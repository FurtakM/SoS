// starting begin ResetFog ;
   0: CALL_OW 335
// InitSettings ;
   4: CALL 44 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 31
// begin PlaceSeeing ( 1 , 1 , 1 , - 372963 ) ;
  14: LD_INT 1
  16: PPUSH
  17: LD_INT 1
  19: PPUSH
  20: LD_INT 1
  22: PPUSH
  23: LD_INT 372963
  25: NEG
  26: PPUSH
  27: CALL_OW 330
// end ; SetTechnologies ;
  31: CALL 595 0 0
// SetDiplomacy ;
  35: CALL 807 0 0
// PrepareGame ;
  39: CALL 889 0 0
// end ;
  43: END
// export debug , GameType , game , disableGlobalTimer ; export mc_amer , mc_leg , mc_rus_1 , mc_rus_2 ; export playerCommander , playerForces , allyCommander , Powell , Farmer , ruOutpost , ruEscape , staticMines , baseCaptured , legDestCounter , cratesSpawns , legOfferAccepted , legChangeSide , allyDestCounter , sibBombAllowed , reinforceAllowed , commander , cratesSpawn , outpostEscape , dialogueMineDetected ; end_of_file export function InitSettings ; begin
  44: LD_INT 0
  46: PPUSH
// debug := 0 ;
  47: LD_ADDR_EXP 1
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// GameType := 1 ;
  55: LD_ADDR_EXP 2
  59: PUSH
  60: LD_INT 1
  62: ST_TO_ADDR
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  63: LD_ADDR_OWVAR 67
  67: PUSH
  68: LD_INT 0
  70: PPUSH
  71: CALL_OW 426
  75: ST_TO_ADDR
// sibBombAllowed := GetMultiPlayerSetting ( 1 ) - 1 ;
  76: LD_ADDR_EXP 23
  80: PUSH
  81: LD_INT 1
  83: PPUSH
  84: CALL_OW 426
  88: PUSH
  89: LD_INT 1
  91: MINUS
  92: ST_TO_ADDR
// reinforceAllowed := GetMultiPlayerSetting ( 2 ) - 1 ;
  93: LD_ADDR_EXP 24
  97: PUSH
  98: LD_INT 2
 100: PPUSH
 101: CALL_OW 426
 105: PUSH
 106: LD_INT 1
 108: MINUS
 109: ST_TO_ADDR
// cratesSpawn := GetMultiPlayerSetting ( 3 ) ;
 110: LD_ADDR_EXP 26
 114: PUSH
 115: LD_INT 3
 117: PPUSH
 118: CALL_OW 426
 122: ST_TO_ADDR
// commander := GetMultiPlayerSetting ( 4 ) ;
 123: LD_ADDR_EXP 25
 127: PUSH
 128: LD_INT 4
 130: PPUSH
 131: CALL_OW 426
 135: ST_TO_ADDR
// if not commander then
 136: LD_EXP 25
 140: NOT
 141: IFFALSE 151
// commander := 3 ;
 143: LD_ADDR_EXP 25
 147: PUSH
 148: LD_INT 3
 150: ST_TO_ADDR
// if not debug then
 151: LD_EXP 1
 155: NOT
 156: IFFALSE 160
// exit ;
 158: GO 217
// display_strings := [ Difficulty:  & Difficulty , sibBomb:  & sibBombAllowed , reinforceAllowed:  & reinforceAllowed , cratesSpawn:  & cratesSpawn , commander:  & commander ] ;
 160: LD_ADDR_OWVAR 47
 164: PUSH
 165: LD_STRING Difficulty: 
 167: PUSH
 168: LD_OWVAR 67
 172: STR
 173: PUSH
 174: LD_STRING sibBomb: 
 176: PUSH
 177: LD_EXP 23
 181: STR
 182: PUSH
 183: LD_STRING reinforceAllowed: 
 185: PUSH
 186: LD_EXP 24
 190: STR
 191: PUSH
 192: LD_STRING cratesSpawn: 
 194: PUSH
 195: LD_EXP 26
 199: STR
 200: PUSH
 201: LD_STRING commander: 
 203: PUSH
 204: LD_EXP 25
 208: STR
 209: PUSH
 210: EMPTY
 211: LIST
 212: LIST
 213: LIST
 214: LIST
 215: LIST
 216: ST_TO_ADDR
// end ;
 217: LD_VAR 0 1
 221: RET
// every 0 0$1 trigger game and GameType = 1 and not disableGlobalTimer do
 222: LD_EXP 3
 226: PUSH
 227: LD_EXP 2
 231: PUSH
 232: LD_INT 1
 234: EQUAL
 235: AND
 236: PUSH
 237: LD_EXP 4
 241: NOT
 242: AND
 243: IFFALSE 266
 245: GO 247
 247: DISABLE
// begin enable ;
 248: ENABLE
// display_strings := [ #SkrTime , tick ] ;
 249: LD_ADDR_OWVAR 47
 253: PUSH
 254: LD_STRING #SkrTime
 256: PUSH
 257: LD_OWVAR 1
 261: PUSH
 262: EMPTY
 263: LIST
 264: LIST
 265: ST_TO_ADDR
// end ;
 266: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 267: LD_EXP 19
 271: PUSH
 272: LD_EXP 3
 276: AND
 277: PUSH
 278: LD_EXP 2
 282: PUSH
 283: LD_INT 1
 285: EQUAL
 286: AND
 287: IFFALSE 348
 289: GO 291
 291: DISABLE
// Crates ( cratesSpawns [ 1 ] [ 1 ] , cratesSpawns [ 1 ] [ 2 ] , cratesSpawns [ 1 ] [ 3 ] , cratesSpawns [ 1 ] [ 4 ] ) ;
 292: LD_EXP 19
 296: PUSH
 297: LD_INT 1
 299: ARRAY
 300: PUSH
 301: LD_INT 1
 303: ARRAY
 304: PPUSH
 305: LD_EXP 19
 309: PUSH
 310: LD_INT 1
 312: ARRAY
 313: PUSH
 314: LD_INT 2
 316: ARRAY
 317: PPUSH
 318: LD_EXP 19
 322: PUSH
 323: LD_INT 1
 325: ARRAY
 326: PUSH
 327: LD_INT 3
 329: ARRAY
 330: PPUSH
 331: LD_EXP 19
 335: PUSH
 336: LD_INT 1
 338: ARRAY
 339: PUSH
 340: LD_INT 4
 342: ARRAY
 343: PPUSH
 344: CALL 54539 0 4
 348: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 349: LD_EXP 19
 353: PUSH
 354: LD_EXP 3
 358: AND
 359: PUSH
 360: LD_EXP 2
 364: PUSH
 365: LD_INT 1
 367: EQUAL
 368: AND
 369: IFFALSE 430
 371: GO 373
 373: DISABLE
// Crates ( cratesSpawns [ 2 ] [ 1 ] , cratesSpawns [ 2 ] [ 2 ] , cratesSpawns [ 2 ] [ 3 ] , cratesSpawns [ 2 ] [ 4 ] ) ;
 374: LD_EXP 19
 378: PUSH
 379: LD_INT 2
 381: ARRAY
 382: PUSH
 383: LD_INT 1
 385: ARRAY
 386: PPUSH
 387: LD_EXP 19
 391: PUSH
 392: LD_INT 2
 394: ARRAY
 395: PUSH
 396: LD_INT 2
 398: ARRAY
 399: PPUSH
 400: LD_EXP 19
 404: PUSH
 405: LD_INT 2
 407: ARRAY
 408: PUSH
 409: LD_INT 3
 411: ARRAY
 412: PPUSH
 413: LD_EXP 19
 417: PUSH
 418: LD_INT 2
 420: ARRAY
 421: PUSH
 422: LD_INT 4
 424: ARRAY
 425: PPUSH
 426: CALL 54539 0 4
 430: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 431: LD_EXP 19
 435: PUSH
 436: LD_EXP 3
 440: AND
 441: PUSH
 442: LD_EXP 2
 446: PUSH
 447: LD_INT 1
 449: EQUAL
 450: AND
 451: IFFALSE 512
 453: GO 455
 455: DISABLE
// Crates ( cratesSpawns [ 3 ] [ 1 ] , cratesSpawns [ 3 ] [ 2 ] , cratesSpawns [ 3 ] [ 3 ] , cratesSpawns [ 3 ] [ 4 ] ) ;
 456: LD_EXP 19
 460: PUSH
 461: LD_INT 3
 463: ARRAY
 464: PUSH
 465: LD_INT 1
 467: ARRAY
 468: PPUSH
 469: LD_EXP 19
 473: PUSH
 474: LD_INT 3
 476: ARRAY
 477: PUSH
 478: LD_INT 2
 480: ARRAY
 481: PPUSH
 482: LD_EXP 19
 486: PUSH
 487: LD_INT 3
 489: ARRAY
 490: PUSH
 491: LD_INT 3
 493: ARRAY
 494: PPUSH
 495: LD_EXP 19
 499: PUSH
 500: LD_INT 3
 502: ARRAY
 503: PUSH
 504: LD_INT 4
 506: ARRAY
 507: PPUSH
 508: CALL 54539 0 4
 512: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 513: LD_EXP 19
 517: PUSH
 518: LD_EXP 3
 522: AND
 523: PUSH
 524: LD_EXP 2
 528: PUSH
 529: LD_INT 1
 531: EQUAL
 532: AND
 533: IFFALSE 594
 535: GO 537
 537: DISABLE
// Crates ( cratesSpawns [ 4 ] [ 1 ] , cratesSpawns [ 4 ] [ 2 ] , cratesSpawns [ 4 ] [ 3 ] , cratesSpawns [ 4 ] [ 4 ] ) ;
 538: LD_EXP 19
 542: PUSH
 543: LD_INT 4
 545: ARRAY
 546: PUSH
 547: LD_INT 1
 549: ARRAY
 550: PPUSH
 551: LD_EXP 19
 555: PUSH
 556: LD_INT 4
 558: ARRAY
 559: PUSH
 560: LD_INT 2
 562: ARRAY
 563: PPUSH
 564: LD_EXP 19
 568: PUSH
 569: LD_INT 4
 571: ARRAY
 572: PUSH
 573: LD_INT 3
 575: ARRAY
 576: PPUSH
 577: LD_EXP 19
 581: PUSH
 582: LD_INT 4
 584: ARRAY
 585: PUSH
 586: LD_INT 4
 588: ARRAY
 589: PPUSH
 590: CALL 54539 0 4
 594: END
// export function SetTechnologies ; var i , j , ban_techs , res_techs ; begin
 595: LD_INT 0
 597: PPUSH
 598: PPUSH
 599: PPUSH
 600: PPUSH
 601: PPUSH
// if GameType = 1 then
 602: LD_EXP 2
 606: PUSH
 607: LD_INT 1
 609: EQUAL
 610: IFFALSE 679
// begin ban_techs := [ ] ;
 612: LD_ADDR_VAR 0 4
 616: PUSH
 617: EMPTY
 618: ST_TO_ADDR
// if sibBombAllowed < 2 then
 619: LD_EXP 23
 623: PUSH
 624: LD_INT 2
 626: LESS
 627: IFFALSE 640
// ban_techs := [ tech_sibFiss ] ;
 629: LD_ADDR_VAR 0 4
 633: PUSH
 634: LD_INT 25
 636: PUSH
 637: EMPTY
 638: LIST
 639: ST_TO_ADDR
// res_techs := [ tech_oilPow , tech_oilEng , tech_tech1 , tech_tech2 , tech_tech3 , tech_gun , tech_gatling , tech_rocket ] ;
 640: LD_ADDR_VAR 0 5
 644: PUSH
 645: LD_INT 46
 647: PUSH
 648: LD_INT 47
 650: PUSH
 651: LD_INT 48
 653: PUSH
 654: LD_INT 49
 656: PUSH
 657: LD_INT 50
 659: PUSH
 660: LD_INT 39
 662: PUSH
 663: LD_INT 69
 665: PUSH
 666: LD_INT 40
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// end ; for i = 1 to 8 do
 679: LD_ADDR_VAR 0 2
 683: PUSH
 684: DOUBLE
 685: LD_INT 1
 687: DEC
 688: ST_TO_ADDR
 689: LD_INT 8
 691: PUSH
 692: FOR_TO
 693: IFFALSE 777
// begin if res_techs then
 695: LD_VAR 0 5
 699: IFFALSE 735
// for j in res_techs do
 701: LD_ADDR_VAR 0 3
 705: PUSH
 706: LD_VAR 0 5
 710: PUSH
 711: FOR_IN
 712: IFFALSE 733
// SetTech ( j , i , state_researched ) ;
 714: LD_VAR 0 3
 718: PPUSH
 719: LD_VAR 0 2
 723: PPUSH
 724: LD_INT 2
 726: PPUSH
 727: CALL_OW 322
 731: GO 711
 733: POP
 734: POP
// if ban_techs then
 735: LD_VAR 0 4
 739: IFFALSE 775
// for j in ban_techs do
 741: LD_ADDR_VAR 0 3
 745: PUSH
 746: LD_VAR 0 4
 750: PUSH
 751: FOR_IN
 752: IFFALSE 773
// SetTech ( j , i , state_disabled ) ;
 754: LD_VAR 0 3
 758: PPUSH
 759: LD_VAR 0 2
 763: PPUSH
 764: LD_INT 0
 766: PPUSH
 767: CALL_OW 322
 771: GO 751
 773: POP
 774: POP
// end ;
 775: GO 692
 777: POP
 778: POP
// if sibBombAllowed = 1 then
 779: LD_EXP 23
 783: PUSH
 784: LD_INT 1
 786: EQUAL
 787: IFFALSE 802
// SetTech ( tech_sibFiss , 3 , state_enabled ) ;
 789: LD_INT 25
 791: PPUSH
 792: LD_INT 3
 794: PPUSH
 795: LD_INT 1
 797: PPUSH
 798: CALL_OW 322
// end ;
 802: LD_VAR 0 1
 806: RET
// export function SetDiplomacy ; begin
 807: LD_INT 0
 809: PPUSH
// if GameType = 1 then
 810: LD_EXP 2
 814: PUSH
 815: LD_INT 1
 817: EQUAL
 818: IFFALSE 884
// begin SetAttitude ( 1 , 4 , att_friend , true ) ;
 820: LD_INT 1
 822: PPUSH
 823: LD_INT 4
 825: PPUSH
 826: LD_INT 1
 828: PPUSH
 829: LD_INT 1
 831: PPUSH
 832: CALL_OW 80
// SetAttitude ( 3 , 6 , att_friend , true ) ;
 836: LD_INT 3
 838: PPUSH
 839: LD_INT 6
 841: PPUSH
 842: LD_INT 1
 844: PPUSH
 845: LD_INT 1
 847: PPUSH
 848: CALL_OW 80
// SetAttitude ( 3 , 8 , att_friend , true ) ;
 852: LD_INT 3
 854: PPUSH
 855: LD_INT 8
 857: PPUSH
 858: LD_INT 1
 860: PPUSH
 861: LD_INT 1
 863: PPUSH
 864: CALL_OW 80
// SetAttitude ( 6 , 8 , att_friend , true ) ;
 868: LD_INT 6
 870: PPUSH
 871: LD_INT 8
 873: PPUSH
 874: LD_INT 1
 876: PPUSH
 877: LD_INT 1
 879: PPUSH
 880: CALL_OW 80
// end ; end ;
 884: LD_VAR 0 1
 888: RET
// export function PrepareGame ; var i , tmp , sources ; begin
 889: LD_INT 0
 891: PPUSH
 892: PPUSH
 893: PPUSH
 894: PPUSH
// if GameType = 1 then
 895: LD_EXP 2
 899: PUSH
 900: LD_INT 1
 902: EQUAL
 903: IFFALSE 1395
// begin game := false ;
 905: LD_ADDR_EXP 3
 909: PUSH
 910: LD_INT 0
 912: ST_TO_ADDR
// your_side := 1 ;
 913: LD_ADDR_OWVAR 2
 917: PUSH
 918: LD_INT 1
 920: ST_TO_ADDR
// mc_amer := 1 ;
 921: LD_ADDR_EXP 5
 925: PUSH
 926: LD_INT 1
 928: ST_TO_ADDR
// mc_leg := 2 ;
 929: LD_ADDR_EXP 6
 933: PUSH
 934: LD_INT 2
 936: ST_TO_ADDR
// mc_rus_1 := 3 ;
 937: LD_ADDR_EXP 7
 941: PUSH
 942: LD_INT 3
 944: ST_TO_ADDR
// mc_rus_2 := 4 ;
 945: LD_ADDR_EXP 8
 949: PUSH
 950: LD_INT 4
 952: ST_TO_ADDR
// cratesSpawns := [ [ amerCrates , 1 , 0 , [ 200 , 250 , 300 ] [ cratesSpawn ] ] , [ rusCrates , 8 , 50 , 500 ] , [ legCrates , 5 , 50 , 300 ] , [ playerCrates , [ 4 , 5 , 6 ] [ cratesSpawn ] , 30 , [ 300 , 450 , 500 ] [ cratesSpawn ] ] ] ;
 953: LD_ADDR_EXP 19
 957: PUSH
 958: LD_INT 5
 960: PUSH
 961: LD_INT 1
 963: PUSH
 964: LD_INT 0
 966: PUSH
 967: LD_INT 200
 969: PUSH
 970: LD_INT 250
 972: PUSH
 973: LD_INT 300
 975: PUSH
 976: EMPTY
 977: LIST
 978: LIST
 979: LIST
 980: PUSH
 981: LD_EXP 26
 985: ARRAY
 986: PUSH
 987: EMPTY
 988: LIST
 989: LIST
 990: LIST
 991: LIST
 992: PUSH
 993: LD_INT 13
 995: PUSH
 996: LD_INT 8
 998: PUSH
 999: LD_INT 50
1001: PUSH
1002: LD_INT 500
1004: PUSH
1005: EMPTY
1006: LIST
1007: LIST
1008: LIST
1009: LIST
1010: PUSH
1011: LD_INT 17
1013: PUSH
1014: LD_INT 5
1016: PUSH
1017: LD_INT 50
1019: PUSH
1020: LD_INT 300
1022: PUSH
1023: EMPTY
1024: LIST
1025: LIST
1026: LIST
1027: LIST
1028: PUSH
1029: LD_INT 18
1031: PUSH
1032: LD_INT 4
1034: PUSH
1035: LD_INT 5
1037: PUSH
1038: LD_INT 6
1040: PUSH
1041: EMPTY
1042: LIST
1043: LIST
1044: LIST
1045: PUSH
1046: LD_EXP 26
1050: ARRAY
1051: PUSH
1052: LD_INT 30
1054: PUSH
1055: LD_INT 300
1057: PUSH
1058: LD_INT 450
1060: PUSH
1061: LD_INT 500
1063: PUSH
1064: EMPTY
1065: LIST
1066: LIST
1067: LIST
1068: PUSH
1069: LD_EXP 26
1073: ARRAY
1074: PUSH
1075: EMPTY
1076: LIST
1077: LIST
1078: LIST
1079: LIST
1080: PUSH
1081: EMPTY
1082: LIST
1083: LIST
1084: LIST
1085: LIST
1086: ST_TO_ADDR
// sources := [ [ 190 , 193 , mat_siberit ] , [ 182 , 117 , mat_siberit ] , [ 43 , 2 , mat_siberit ] , [ 114 , 152 , mat_oil ] , [ 85 , 38 , mat_oil ] ] ;
1087: LD_ADDR_VAR 0 4
1091: PUSH
1092: LD_INT 190
1094: PUSH
1095: LD_INT 193
1097: PUSH
1098: LD_INT 3
1100: PUSH
1101: EMPTY
1102: LIST
1103: LIST
1104: LIST
1105: PUSH
1106: LD_INT 182
1108: PUSH
1109: LD_INT 117
1111: PUSH
1112: LD_INT 3
1114: PUSH
1115: EMPTY
1116: LIST
1117: LIST
1118: LIST
1119: PUSH
1120: LD_INT 43
1122: PUSH
1123: LD_INT 2
1125: PUSH
1126: LD_INT 3
1128: PUSH
1129: EMPTY
1130: LIST
1131: LIST
1132: LIST
1133: PUSH
1134: LD_INT 114
1136: PUSH
1137: LD_INT 152
1139: PUSH
1140: LD_INT 2
1142: PUSH
1143: EMPTY
1144: LIST
1145: LIST
1146: LIST
1147: PUSH
1148: LD_INT 85
1150: PUSH
1151: LD_INT 38
1153: PUSH
1154: LD_INT 2
1156: PUSH
1157: EMPTY
1158: LIST
1159: LIST
1160: LIST
1161: PUSH
1162: EMPTY
1163: LIST
1164: LIST
1165: LIST
1166: LIST
1167: LIST
1168: ST_TO_ADDR
// for i in sources do
1169: LD_ADDR_VAR 0 2
1173: PUSH
1174: LD_VAR 0 4
1178: PUSH
1179: FOR_IN
1180: IFFALSE 1215
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
1182: LD_VAR 0 2
1186: PUSH
1187: LD_INT 1
1189: ARRAY
1190: PPUSH
1191: LD_VAR 0 2
1195: PUSH
1196: LD_INT 2
1198: ARRAY
1199: PPUSH
1200: LD_VAR 0 2
1204: PUSH
1205: LD_INT 3
1207: ARRAY
1208: PPUSH
1209: CALL_OW 62
1213: GO 1179
1215: POP
1216: POP
// disableGlobalTimer := false ;
1217: LD_ADDR_EXP 4
1221: PUSH
1222: LD_INT 0
1224: ST_TO_ADDR
// ruEscape := [ 0 , [ 5 , 6 , 7 ] [ Difficulty ] ] ;
1225: LD_ADDR_EXP 15
1229: PUSH
1230: LD_INT 0
1232: PUSH
1233: LD_INT 5
1235: PUSH
1236: LD_INT 6
1238: PUSH
1239: LD_INT 7
1241: PUSH
1242: EMPTY
1243: LIST
1244: LIST
1245: LIST
1246: PUSH
1247: LD_OWVAR 67
1251: ARRAY
1252: PUSH
1253: EMPTY
1254: LIST
1255: LIST
1256: ST_TO_ADDR
// ruOutpost := [ ] ;
1257: LD_ADDR_EXP 14
1261: PUSH
1262: EMPTY
1263: ST_TO_ADDR
// staticMines := [ ] ;
1264: LD_ADDR_EXP 16
1268: PUSH
1269: EMPTY
1270: ST_TO_ADDR
// baseCaptured := false ;
1271: LD_ADDR_EXP 17
1275: PUSH
1276: LD_INT 0
1278: ST_TO_ADDR
// legDestCounter := 0 ;
1279: LD_ADDR_EXP 18
1283: PUSH
1284: LD_INT 0
1286: ST_TO_ADDR
// legOfferAccepted := false ;
1287: LD_ADDR_EXP 20
1291: PUSH
1292: LD_INT 0
1294: ST_TO_ADDR
// legChangeSide := false ;
1295: LD_ADDR_EXP 21
1299: PUSH
1300: LD_INT 0
1302: ST_TO_ADDR
// allyDestCounter := 0 ;
1303: LD_ADDR_EXP 22
1307: PUSH
1308: LD_INT 0
1310: ST_TO_ADDR
// outpostEscape := false ;
1311: LD_ADDR_EXP 27
1315: PUSH
1316: LD_INT 0
1318: ST_TO_ADDR
// dialogueMineDetected := false ;
1319: LD_ADDR_EXP 28
1323: PUSH
1324: LD_INT 0
1326: ST_TO_ADDR
// PrepareAmericans ;
1327: CALL 7243 0 0
// PrepareLegion ;
1331: CALL 5508 0 0
// PrepareRussians ;
1335: CALL 2474 0 0
// playerForces := PreparePlayer ;
1339: LD_ADDR_EXP 10
1343: PUSH
1344: CALL 8486 0 0
1348: ST_TO_ADDR
// AnimateTrees ( true ) ;
1349: LD_INT 1
1351: PPUSH
1352: CALL_OW 573
// PrepareNature ( 4 , 3 , 8 , 5 , 3 , 1 , 8 , natureGroundArea , natureWaterArea ) ;
1356: LD_INT 4
1358: PPUSH
1359: LD_INT 3
1361: PPUSH
1362: LD_INT 8
1364: PPUSH
1365: LD_INT 5
1367: PPUSH
1368: LD_INT 3
1370: PPUSH
1371: LD_INT 1
1373: PPUSH
1374: LD_INT 8
1376: PPUSH
1377: LD_INT 2
1379: PPUSH
1380: LD_INT 1
1382: PPUSH
1383: CALL 51963 0 9
// MC_Start ;
1387: CALL 57957 0 0
// Action ;
1391: CALL 10682 0 0
// end ; end ;
1395: LD_VAR 0 1
1399: RET
// export function CustomInitMacro ; begin
1400: LD_INT 0
1402: PPUSH
// if GameType <> 1 then
1403: LD_EXP 2
1407: PUSH
1408: LD_INT 1
1410: NONEQUAL
1411: IFFALSE 1415
// exit ;
1413: GO 2469
// MC_SetScanArea ( mc_amer , amerBase ) ;
1415: LD_EXP 5
1419: PPUSH
1420: LD_INT 3
1422: PPUSH
1423: CALL 80797 0 2
// MC_SetParkingArea ( mc_amer , amerParking ) ;
1427: LD_EXP 5
1431: PPUSH
1432: LD_INT 4
1434: PPUSH
1435: CALL 80741 0 2
// MC_SetAllowedTurretWeapons ( mc_amer , [ us_radar , us_heavy_gun , us_rocket_launcher , us_laser , us_double_laser ] ) ;
1439: LD_EXP 5
1443: PPUSH
1444: LD_INT 11
1446: PUSH
1447: LD_INT 6
1449: PUSH
1450: LD_INT 7
1452: PUSH
1453: LD_INT 9
1455: PUSH
1456: LD_INT 10
1458: PUSH
1459: EMPTY
1460: LIST
1461: LIST
1462: LIST
1463: LIST
1464: LIST
1465: PPUSH
1466: CALL 80629 0 2
// MC_SetCratesArea ( mc_amer , amerCrates ) ;
1470: LD_EXP 5
1474: PPUSH
1475: LD_INT 5
1477: PPUSH
1478: CALL 80311 0 2
// MC_SetTame ( mc_amer , amerBase ) ;
1482: LD_EXP 5
1486: PPUSH
1487: LD_INT 3
1489: PPUSH
1490: CALL 80042 0 2
// MC_SetDefenderLimit ( mc_amer , 4 ) ;
1494: LD_EXP 5
1498: PPUSH
1499: LD_INT 4
1501: PPUSH
1502: CALL 79661 0 2
// MC_SetProduceList ( mc_amer , [ [ us_medium_tracked , engine_combustion , control_remote , us_double_gun ] , [ us_medium_tracked , engine_solar , control_remote , us_laser ] , [ us_heavy_tracked , engine_combustion , control_remote , us_rocket_launcher ] , [ us_heavy_tracked , engine_combustion , control_remote , us_heavy_gun ] , ] ) ;
1506: LD_EXP 5
1510: PPUSH
1511: LD_INT 3
1513: PUSH
1514: LD_INT 1
1516: PUSH
1517: LD_INT 2
1519: PUSH
1520: LD_INT 5
1522: PUSH
1523: EMPTY
1524: LIST
1525: LIST
1526: LIST
1527: LIST
1528: PUSH
1529: LD_INT 3
1531: PUSH
1532: LD_INT 2
1534: PUSH
1535: LD_INT 2
1537: PUSH
1538: LD_INT 9
1540: PUSH
1541: EMPTY
1542: LIST
1543: LIST
1544: LIST
1545: LIST
1546: PUSH
1547: LD_INT 4
1549: PUSH
1550: LD_INT 1
1552: PUSH
1553: LD_INT 2
1555: PUSH
1556: LD_INT 7
1558: PUSH
1559: EMPTY
1560: LIST
1561: LIST
1562: LIST
1563: LIST
1564: PUSH
1565: LD_INT 4
1567: PUSH
1568: LD_INT 1
1570: PUSH
1571: LD_INT 2
1573: PUSH
1574: LD_INT 6
1576: PUSH
1577: EMPTY
1578: LIST
1579: LIST
1580: LIST
1581: LIST
1582: PUSH
1583: EMPTY
1584: LIST
1585: LIST
1586: LIST
1587: LIST
1588: PPUSH
1589: CALL 79476 0 2
// MC_SetBuildingList ( mc_amer , [ [ b_turret , 114 , 16 , 0 ] , [ b_bunker , 110 , 12 , 0 ] ] ) ;
1593: LD_EXP 5
1597: PPUSH
1598: LD_INT 33
1600: PUSH
1601: LD_INT 114
1603: PUSH
1604: LD_INT 16
1606: PUSH
1607: LD_INT 0
1609: PUSH
1610: EMPTY
1611: LIST
1612: LIST
1613: LIST
1614: LIST
1615: PUSH
1616: LD_INT 32
1618: PUSH
1619: LD_INT 110
1621: PUSH
1622: LD_INT 12
1624: PUSH
1625: LD_INT 0
1627: PUSH
1628: EMPTY
1629: LIST
1630: LIST
1631: LIST
1632: LIST
1633: PUSH
1634: EMPTY
1635: LIST
1636: LIST
1637: PPUSH
1638: CALL 79368 0 2
// MC_SetLabKind ( mc_amer , [ b_lab_weapon , b_lab_opto , b_lab_computer , b_lab_siberium ] ) ;
1642: LD_EXP 5
1646: PPUSH
1647: LD_INT 10
1649: PUSH
1650: LD_INT 15
1652: PUSH
1653: LD_INT 12
1655: PUSH
1656: LD_INT 11
1658: PUSH
1659: EMPTY
1660: LIST
1661: LIST
1662: LIST
1663: LIST
1664: PPUSH
1665: CALL 80218 0 2
// MC_SetScanArea ( mc_leg , legBase ) ;
1669: LD_EXP 6
1673: PPUSH
1674: LD_INT 6
1676: PPUSH
1677: CALL 80797 0 2
// MC_SetParkingArea ( mc_leg , legParking ) ;
1681: LD_EXP 6
1685: PPUSH
1686: LD_INT 7
1688: PPUSH
1689: CALL 80741 0 2
// MC_SetAllowedTurretWeapons ( mc_leg , [ ar_radar , ar_gun , ar_rocket_launcher , ar_gatling_gun ] ) ;
1693: LD_EXP 6
1697: PPUSH
1698: LD_INT 30
1700: PUSH
1701: LD_INT 27
1703: PUSH
1704: LD_INT 28
1706: PUSH
1707: LD_INT 25
1709: PUSH
1710: EMPTY
1711: LIST
1712: LIST
1713: LIST
1714: LIST
1715: PPUSH
1716: CALL 80629 0 2
// MC_SetCratesArea ( mc_leg , legCrates ) ;
1720: LD_EXP 6
1724: PPUSH
1725: LD_INT 17
1727: PPUSH
1728: CALL 80311 0 2
// MC_SetTame ( mc_leg , legBase ) ;
1732: LD_EXP 6
1736: PPUSH
1737: LD_INT 6
1739: PPUSH
1740: CALL 80042 0 2
// MC_SetDefenderLimit ( mc_leg , 5 ) ;
1744: LD_EXP 6
1748: PPUSH
1749: LD_INT 5
1751: PPUSH
1752: CALL 79661 0 2
// MC_SetMinesField ( mc_leg , 10 , legMines ) ;
1756: LD_EXP 6
1760: PPUSH
1761: LD_INT 10
1763: PPUSH
1764: LD_INT 9
1766: PPUSH
1767: CALL 79158 0 3
// MC_SetBuildingList ( mc_leg , [ [ b_armoury , 157 , 144 , 0 ] , [ b_bunker , 151 , 142 , 0 ] , [ b_bunker , 161 , 144 , 0 ] , [ b_bunker , 140 , 133 , 0 ] ] ) ;
1771: LD_EXP 6
1775: PPUSH
1776: LD_INT 4
1778: PUSH
1779: LD_INT 157
1781: PUSH
1782: LD_INT 144
1784: PUSH
1785: LD_INT 0
1787: PUSH
1788: EMPTY
1789: LIST
1790: LIST
1791: LIST
1792: LIST
1793: PUSH
1794: LD_INT 32
1796: PUSH
1797: LD_INT 151
1799: PUSH
1800: LD_INT 142
1802: PUSH
1803: LD_INT 0
1805: PUSH
1806: EMPTY
1807: LIST
1808: LIST
1809: LIST
1810: LIST
1811: PUSH
1812: LD_INT 32
1814: PUSH
1815: LD_INT 161
1817: PUSH
1818: LD_INT 144
1820: PUSH
1821: LD_INT 0
1823: PUSH
1824: EMPTY
1825: LIST
1826: LIST
1827: LIST
1828: LIST
1829: PUSH
1830: LD_INT 32
1832: PUSH
1833: LD_INT 140
1835: PUSH
1836: LD_INT 133
1838: PUSH
1839: LD_INT 0
1841: PUSH
1842: EMPTY
1843: LIST
1844: LIST
1845: LIST
1846: LIST
1847: PUSH
1848: EMPTY
1849: LIST
1850: LIST
1851: LIST
1852: LIST
1853: PPUSH
1854: CALL 79368 0 2
// MC_SetProduceList ( mc_leg , [ [ ar_medium_trike , engine_solar , control_manual , ar_control_tower ] , [ ar_medium_trike , engine_solar , control_manual , ar_control_tower ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_cargo_bay ] ] ) ;
1858: LD_EXP 6
1862: PPUSH
1863: LD_INT 13
1865: PUSH
1866: LD_INT 2
1868: PUSH
1869: LD_INT 1
1871: PUSH
1872: LD_INT 31
1874: PUSH
1875: EMPTY
1876: LIST
1877: LIST
1878: LIST
1879: LIST
1880: PUSH
1881: LD_INT 13
1883: PUSH
1884: LD_INT 2
1886: PUSH
1887: LD_INT 1
1889: PUSH
1890: LD_INT 31
1892: PUSH
1893: EMPTY
1894: LIST
1895: LIST
1896: LIST
1897: LIST
1898: PUSH
1899: LD_INT 13
1901: PUSH
1902: LD_INT 1
1904: PUSH
1905: LD_INT 1
1907: PUSH
1908: LD_INT 27
1910: PUSH
1911: EMPTY
1912: LIST
1913: LIST
1914: LIST
1915: LIST
1916: PUSH
1917: LD_INT 13
1919: PUSH
1920: LD_INT 1
1922: PUSH
1923: LD_INT 2
1925: PUSH
1926: LD_INT 27
1928: PUSH
1929: EMPTY
1930: LIST
1931: LIST
1932: LIST
1933: LIST
1934: PUSH
1935: LD_INT 13
1937: PUSH
1938: LD_INT 1
1940: PUSH
1941: LD_INT 2
1943: PUSH
1944: LD_INT 27
1946: PUSH
1947: EMPTY
1948: LIST
1949: LIST
1950: LIST
1951: LIST
1952: PUSH
1953: LD_INT 13
1955: PUSH
1956: LD_INT 1
1958: PUSH
1959: LD_INT 2
1961: PUSH
1962: LD_INT 28
1964: PUSH
1965: EMPTY
1966: LIST
1967: LIST
1968: LIST
1969: LIST
1970: PUSH
1971: LD_INT 13
1973: PUSH
1974: LD_INT 1
1976: PUSH
1977: LD_INT 2
1979: PUSH
1980: LD_INT 28
1982: PUSH
1983: EMPTY
1984: LIST
1985: LIST
1986: LIST
1987: LIST
1988: PUSH
1989: LD_INT 13
1991: PUSH
1992: LD_INT 1
1994: PUSH
1995: LD_INT 2
1997: PUSH
1998: LD_INT 32
2000: PUSH
2001: EMPTY
2002: LIST
2003: LIST
2004: LIST
2005: LIST
2006: PUSH
2007: EMPTY
2008: LIST
2009: LIST
2010: LIST
2011: LIST
2012: LIST
2013: LIST
2014: LIST
2015: LIST
2016: PPUSH
2017: CALL 79476 0 2
// HiddenCamera ( 165 , 156 , 8 ) ;
2021: LD_INT 165
2023: PPUSH
2024: LD_INT 156
2026: PPUSH
2027: LD_INT 8
2029: PPUSH
2030: CALL_OW 244
// MC_SetScanArea ( mc_rus_1 , rus1Base ) ;
2034: LD_EXP 7
2038: PPUSH
2039: LD_INT 15
2041: PPUSH
2042: CALL 80797 0 2
// MC_SetParkingArea ( mc_rus_1 , rus1Parking ) ;
2046: LD_EXP 7
2050: PPUSH
2051: LD_INT 16
2053: PPUSH
2054: CALL 80741 0 2
// MC_SetAllowedTurretWeapons ( mc_rus_1 , [ ru_gatling_gun , ru_rocket , ru_rocket_launcher , ru_time_lapser , ru_heavy_gun ] ) ;
2058: LD_EXP 7
2062: PPUSH
2063: LD_INT 43
2065: PUSH
2066: LD_INT 47
2068: PUSH
2069: LD_INT 45
2071: PUSH
2072: LD_INT 49
2074: PUSH
2075: LD_INT 46
2077: PUSH
2078: EMPTY
2079: LIST
2080: LIST
2081: LIST
2082: LIST
2083: LIST
2084: PPUSH
2085: CALL 80629 0 2
// MC_SetCratesArea ( mc_rus_1 , rusCrates ) ;
2089: LD_EXP 7
2093: PPUSH
2094: LD_INT 13
2096: PPUSH
2097: CALL 80311 0 2
// MC_SetTame ( mc_rus_1 , rus1Base ) ;
2101: LD_EXP 7
2105: PPUSH
2106: LD_INT 15
2108: PPUSH
2109: CALL 80042 0 2
// MC_SetDefenderLimit ( mc_rus_1 , 5 ) ;
2113: LD_EXP 7
2117: PPUSH
2118: LD_INT 5
2120: PPUSH
2121: CALL 79661 0 2
// MC_SetProduceList ( mc_rus_1 , [ [ ru_heavy_wheeled , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_wheeled , engine_combustion , control_manual , ru_heavy_gun ] , [ ru_heavy_wheeled , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_heavy_wheeled , engine_combustion , control_manual , ru_rocket ] , [ ru_heavy_wheeled , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_wheeled , engine_combustion , control_computer , ru_cargo_bay ] , [ ru_medium_wheeled , engine_combustion , control_computer , ru_crane ] , ] ) ;
2125: LD_EXP 7
2129: PPUSH
2130: LD_INT 23
2132: PUSH
2133: LD_INT 1
2135: PUSH
2136: LD_INT 3
2138: PUSH
2139: LD_INT 46
2141: PUSH
2142: EMPTY
2143: LIST
2144: LIST
2145: LIST
2146: LIST
2147: PUSH
2148: LD_INT 23
2150: PUSH
2151: LD_INT 1
2153: PUSH
2154: LD_INT 1
2156: PUSH
2157: LD_INT 46
2159: PUSH
2160: EMPTY
2161: LIST
2162: LIST
2163: LIST
2164: LIST
2165: PUSH
2166: LD_INT 23
2168: PUSH
2169: LD_INT 1
2171: PUSH
2172: LD_INT 3
2174: PUSH
2175: LD_INT 45
2177: PUSH
2178: EMPTY
2179: LIST
2180: LIST
2181: LIST
2182: LIST
2183: PUSH
2184: LD_INT 23
2186: PUSH
2187: LD_INT 1
2189: PUSH
2190: LD_INT 1
2192: PUSH
2193: LD_INT 47
2195: PUSH
2196: EMPTY
2197: LIST
2198: LIST
2199: LIST
2200: LIST
2201: PUSH
2202: LD_INT 23
2204: PUSH
2205: LD_INT 1
2207: PUSH
2208: LD_INT 3
2210: PUSH
2211: LD_INT 46
2213: PUSH
2214: EMPTY
2215: LIST
2216: LIST
2217: LIST
2218: LIST
2219: PUSH
2220: LD_INT 21
2222: PUSH
2223: LD_INT 1
2225: PUSH
2226: LD_INT 3
2228: PUSH
2229: LD_INT 51
2231: PUSH
2232: EMPTY
2233: LIST
2234: LIST
2235: LIST
2236: LIST
2237: PUSH
2238: LD_INT 21
2240: PUSH
2241: LD_INT 1
2243: PUSH
2244: LD_INT 3
2246: PUSH
2247: LD_INT 52
2249: PUSH
2250: EMPTY
2251: LIST
2252: LIST
2253: LIST
2254: LIST
2255: PUSH
2256: EMPTY
2257: LIST
2258: LIST
2259: LIST
2260: LIST
2261: LIST
2262: LIST
2263: LIST
2264: PPUSH
2265: CALL 79476 0 2
// MC_SetScanArea ( mc_rus_2 , rus2Base ) ;
2269: LD_EXP 8
2273: PPUSH
2274: LD_INT 11
2276: PPUSH
2277: CALL 80797 0 2
// MC_SetParkingArea ( mc_rus_2 , rus2Parking ) ;
2281: LD_EXP 8
2285: PPUSH
2286: LD_INT 12
2288: PPUSH
2289: CALL 80741 0 2
// MC_SetAllowedTurretWeapons ( mc_rus_2 , [ ru_gatling_gun , ru_rocket , ru_rocket_launcher , ru_time_lapser , ru_heavy_gun ] ) ;
2293: LD_EXP 8
2297: PPUSH
2298: LD_INT 43
2300: PUSH
2301: LD_INT 47
2303: PUSH
2304: LD_INT 45
2306: PUSH
2307: LD_INT 49
2309: PUSH
2310: LD_INT 46
2312: PUSH
2313: EMPTY
2314: LIST
2315: LIST
2316: LIST
2317: LIST
2318: LIST
2319: PPUSH
2320: CALL 80629 0 2
// MC_SetCratesArea ( mc_rus_2 , rusCrates ) ;
2324: LD_EXP 8
2328: PPUSH
2329: LD_INT 13
2331: PPUSH
2332: CALL 80311 0 2
// MC_SetTame ( mc_rus_2 , rus2Base ) ;
2336: LD_EXP 8
2340: PPUSH
2341: LD_INT 11
2343: PPUSH
2344: CALL 80042 0 2
// MC_SetDefenderLimit ( mc_rus_2 , 4 ) ;
2348: LD_EXP 8
2352: PPUSH
2353: LD_INT 4
2355: PPUSH
2356: CALL 79661 0 2
// MC_SetTeleportExit ( mc_rus_2 , [ [ 115 , 201 ] ] ) ;
2360: LD_EXP 8
2364: PPUSH
2365: LD_INT 115
2367: PUSH
2368: LD_INT 201
2370: PUSH
2371: EMPTY
2372: LIST
2373: LIST
2374: PUSH
2375: EMPTY
2376: LIST
2377: PPUSH
2378: CALL 80367 0 2
// MC_SetProduceList ( mc_rus_2 , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] ] ) ;
2382: LD_EXP 8
2386: PPUSH
2387: LD_INT 24
2389: PUSH
2390: LD_INT 3
2392: PUSH
2393: LD_INT 3
2395: PUSH
2396: LD_INT 46
2398: PUSH
2399: EMPTY
2400: LIST
2401: LIST
2402: LIST
2403: LIST
2404: PUSH
2405: LD_INT 24
2407: PUSH
2408: LD_INT 3
2410: PUSH
2411: LD_INT 3
2413: PUSH
2414: LD_INT 46
2416: PUSH
2417: EMPTY
2418: LIST
2419: LIST
2420: LIST
2421: LIST
2422: PUSH
2423: LD_INT 24
2425: PUSH
2426: LD_INT 3
2428: PUSH
2429: LD_INT 3
2431: PUSH
2432: LD_INT 46
2434: PUSH
2435: EMPTY
2436: LIST
2437: LIST
2438: LIST
2439: LIST
2440: PUSH
2441: LD_INT 24
2443: PUSH
2444: LD_INT 3
2446: PUSH
2447: LD_INT 3
2449: PUSH
2450: LD_INT 46
2452: PUSH
2453: EMPTY
2454: LIST
2455: LIST
2456: LIST
2457: LIST
2458: PUSH
2459: EMPTY
2460: LIST
2461: LIST
2462: LIST
2463: LIST
2464: PPUSH
2465: CALL 79476 0 2
// end ;
2469: LD_VAR 0 1
2473: RET
// export function PrepareRussians ; var i , b , tmp , side , sr , depot , base ; begin
2474: LD_INT 0
2476: PPUSH
2477: PPUSH
2478: PPUSH
2479: PPUSH
2480: PPUSH
2481: PPUSH
2482: PPUSH
2483: PPUSH
// PrepareNature ( 0 , 0 , 3 , 0 , 0 , 0 , 0 , rusApe , 0 ) ;
2484: LD_INT 0
2486: PPUSH
2487: LD_INT 0
2489: PPUSH
2490: LD_INT 3
2492: PPUSH
2493: LD_INT 0
2495: PPUSH
2496: LD_INT 0
2498: PPUSH
2499: LD_INT 0
2501: PPUSH
2502: LD_INT 0
2504: PPUSH
2505: LD_INT 14
2507: PPUSH
2508: LD_INT 0
2510: PPUSH
2511: CALL 51963 0 9
// side := 3 ;
2515: LD_ADDR_VAR 0 5
2519: PUSH
2520: LD_INT 3
2522: ST_TO_ADDR
// SetTech ( tech_targTeleport , side , state_researched ) ;
2523: LD_INT 38
2525: PPUSH
2526: LD_VAR 0 5
2530: PPUSH
2531: LD_INT 2
2533: PPUSH
2534: CALL_OW 322
// SetTech ( tech_gun , side , state_researched ) ;
2538: LD_INT 39
2540: PPUSH
2541: LD_VAR 0 5
2545: PPUSH
2546: LD_INT 2
2548: PPUSH
2549: CALL_OW 322
// SetTech ( tech_advMet , side , state_researched ) ;
2553: LD_INT 34
2555: PPUSH
2556: LD_VAR 0 5
2560: PPUSH
2561: LD_INT 2
2563: PPUSH
2564: CALL_OW 322
// tmp := [ [ 0 , 208 , 163 , 4 , 0 , 0 ] , [ 3 , 194 , 161 , 1 , 0 , 0 ] , [ 17 , 190 , 161 , 1 , 0 , 0 ] , [ 5 , 200 , 145 , 3 , 0 , 0 ] , [ 32 , 192 , 144 , 3 , 0 , 0 ] , [ 26 , 216 , 172 , 3 , 0 , 0 ] , [ 26 , 218 , 176 , 3 , 0 , 0 ] , [ 29 , 182 , 149 , 3 , 0 , 0 ] , [ 8 , 201 , 171 , 0 , 10 , 11 ] , [ 32 , 188 , 167 , 0 , 0 , 0 ] , [ 32 , 202 , 179 , 0 , 0 , 0 ] , [ 32 , 209 , 182 , 0 , 0 , 0 ] , [ 32 , 220 , 183 , 5 , 0 , 0 ] , [ 32 , 225 , 181 , 5 , 0 , 0 ] , [ 26 , 220 , 174 , 5 , 0 , 0 ] , [ 1 , 84 , 128 , 4 , 0 , 0 ] , [ 3 , 68 , 121 , 1 , 0 , 0 ] , [ 19 , 72 , 125 , 5 , 0 , 0 ] , [ 18 , 68 , 124 , 0 , 0 , 0 ] , [ 24 , 64 , 121 , 1 , 0 , 0 ] , [ 17 , 65 , 118 , 2 , 0 , 0 ] , [ 21 , 68 , 117 , 3 , 0 , 0 ] , [ 8 , 68 , 130 , 1 , 14 , 10 ] , [ 8 , 67 , 110 , 2 , 11 , 12 ] , [ 28 , 85 , 108 , 2 , 0 , 0 ] , [ 28 , 85 , 124 , 2 , 0 , 0 ] , [ 30 , 97 , 119 , 2 , 0 , 0 ] , [ 5 , 111 , 138 , 4 , 0 , 0 ] , [ 33 , 104 , 130 , 3 , 0 , 0 ] , [ 33 , 110 , 142 , 5 , 0 , 0 ] , [ 33 , 91 , 131 , 5 , 0 , 0 ] , [ 33 , 107 , 157 , 5 , 0 , 0 ] , [ 33 , 104 , 160 , 5 , 0 , 0 ] , [ 33 , 101 , 162 , 5 , 0 , 0 ] , [ 32 , 87 , 157 , 5 , 0 , 0 ] , [ 32 , 105 , 158 , 5 , 0 , 0 ] , [ 33 , 91 , 118 , 4 , 0 , 0 ] , [ 33 , 89 , 107 , 4 , 0 , 0 ] , [ 5 , 86 , 96 , 3 , 0 , 0 ] , [ 33 , 91 , 102 , 4 , 0 , 0 ] , [ 32 , 80 , 95 , 3 , 0 , 0 ] , [ 28 , 77 , 105 , 3 , 0 , 0 ] , [ 28 , 85 , 113 , 3 , 0 , 0 ] , [ 28 , 55 , 97 , 3 , 0 , 0 ] , [ 28 , 88 , 128 , 3 , 0 , 0 ] , [ 32 , 69 , 101 , 2 , 0 , 0 ] , [ 1 , 34 , 23 , 4 , 0 , 0 ] , [ 8 , 25 , 4 , 3 , 11 , 10 ] , [ 8 , 15 , 4 , 2 , 14 , 12 ] , [ 29 , 55 , 35 , 2 , 0 , 0 ] , [ 29 , 24 , 44 , 2 , 0 , 0 ] , [ 34 , 34 , 32 , 4 , 0 , 0 ] , [ 3 , 14 , 16 , 1 , 0 , 0 ] , [ 24 , 10 , 16 , 1 , 0 , 0 ] , [ 21 , 11 , 13 , 2 , 0 , 0 ] , [ 18 , 14 , 12 , 3 , 0 , 0 ] , [ 16 , 14 , 19 , 0 , 0 , 0 ] , [ 17 , 18 , 20 , 5 , 0 , 0 ] , [ 28 , 10 , 5 , 1 , 0 , 0 ] , [ 28 , 8 , 8 , 1 , 0 , 0 ] , [ 26 , 19 , 2 , 1 , 0 , 0 ] , [ 26 , 30 , 2 , 1 , 0 , 0 ] , [ 5 , 59 , 20 , 4 , 0 , 0 ] , [ 32 , 60 , 24 , 4 , 0 , 0 ] , [ 32 , 61 , 45 , 5 , 0 , 0 ] , [ 32 , 52 , 51 , 5 , 0 , 0 ] , [ 33 , 56 , 51 , 5 , 0 , 0 ] , [ 33 , 62 , 49 , 5 , 0 , 0 ] , [ 33 , 41 , 47 , 5 , 0 , 0 ] , [ 33 , 33 , 52 , 5 , 0 , 0 ] , [ 5 , 31 , 40 , 0 , 0 , 0 ] , [ 33 , 65 , 37 , 5 , 0 , 0 ] , [ 33 , 63 , 29 , 4 , 0 , 0 ] , [ 33 , 54 , 11 , 4 , 0 , 0 ] , [ 33 , 56 , 15 , 4 , 0 , 0 ] , [ 33 , 51 , 6 , 4 , 0 , 0 ] , [ 26 , 39 , 25 , 0 , 0 , 0 ] , [ 26 , 37 , 21 , 0 , 0 , 0 ] , [ 32 , 35 , 17 , 4 , 0 , 0 ] , [ 33 , 35 , 28 , 4 , 0 , 0 ] , [ 33 , 28 , 46 , 5 , 0 , 0 ] , [ 33 , 31 , 6 , 4 , 0 , 0 ] , [ 26 , 54 , 38 , 4 , 0 , 0 ] , [ 33 , 207 , 167 , 3 , 0 , 0 ] , [ 30 , 43 , 2 , 4 , 0 , 0 ] ] ;
2568: LD_ADDR_VAR 0 4
2572: PUSH
2573: LD_INT 0
2575: PUSH
2576: LD_INT 208
2578: PUSH
2579: LD_INT 163
2581: PUSH
2582: LD_INT 4
2584: PUSH
2585: LD_INT 0
2587: PUSH
2588: LD_INT 0
2590: PUSH
2591: EMPTY
2592: LIST
2593: LIST
2594: LIST
2595: LIST
2596: LIST
2597: LIST
2598: PUSH
2599: LD_INT 3
2601: PUSH
2602: LD_INT 194
2604: PUSH
2605: LD_INT 161
2607: PUSH
2608: LD_INT 1
2610: PUSH
2611: LD_INT 0
2613: PUSH
2614: LD_INT 0
2616: PUSH
2617: EMPTY
2618: LIST
2619: LIST
2620: LIST
2621: LIST
2622: LIST
2623: LIST
2624: PUSH
2625: LD_INT 17
2627: PUSH
2628: LD_INT 190
2630: PUSH
2631: LD_INT 161
2633: PUSH
2634: LD_INT 1
2636: PUSH
2637: LD_INT 0
2639: PUSH
2640: LD_INT 0
2642: PUSH
2643: EMPTY
2644: LIST
2645: LIST
2646: LIST
2647: LIST
2648: LIST
2649: LIST
2650: PUSH
2651: LD_INT 5
2653: PUSH
2654: LD_INT 200
2656: PUSH
2657: LD_INT 145
2659: PUSH
2660: LD_INT 3
2662: PUSH
2663: LD_INT 0
2665: PUSH
2666: LD_INT 0
2668: PUSH
2669: EMPTY
2670: LIST
2671: LIST
2672: LIST
2673: LIST
2674: LIST
2675: LIST
2676: PUSH
2677: LD_INT 32
2679: PUSH
2680: LD_INT 192
2682: PUSH
2683: LD_INT 144
2685: PUSH
2686: LD_INT 3
2688: PUSH
2689: LD_INT 0
2691: PUSH
2692: LD_INT 0
2694: PUSH
2695: EMPTY
2696: LIST
2697: LIST
2698: LIST
2699: LIST
2700: LIST
2701: LIST
2702: PUSH
2703: LD_INT 26
2705: PUSH
2706: LD_INT 216
2708: PUSH
2709: LD_INT 172
2711: PUSH
2712: LD_INT 3
2714: PUSH
2715: LD_INT 0
2717: PUSH
2718: LD_INT 0
2720: PUSH
2721: EMPTY
2722: LIST
2723: LIST
2724: LIST
2725: LIST
2726: LIST
2727: LIST
2728: PUSH
2729: LD_INT 26
2731: PUSH
2732: LD_INT 218
2734: PUSH
2735: LD_INT 176
2737: PUSH
2738: LD_INT 3
2740: PUSH
2741: LD_INT 0
2743: PUSH
2744: LD_INT 0
2746: PUSH
2747: EMPTY
2748: LIST
2749: LIST
2750: LIST
2751: LIST
2752: LIST
2753: LIST
2754: PUSH
2755: LD_INT 29
2757: PUSH
2758: LD_INT 182
2760: PUSH
2761: LD_INT 149
2763: PUSH
2764: LD_INT 3
2766: PUSH
2767: LD_INT 0
2769: PUSH
2770: LD_INT 0
2772: PUSH
2773: EMPTY
2774: LIST
2775: LIST
2776: LIST
2777: LIST
2778: LIST
2779: LIST
2780: PUSH
2781: LD_INT 8
2783: PUSH
2784: LD_INT 201
2786: PUSH
2787: LD_INT 171
2789: PUSH
2790: LD_INT 0
2792: PUSH
2793: LD_INT 10
2795: PUSH
2796: LD_INT 11
2798: PUSH
2799: EMPTY
2800: LIST
2801: LIST
2802: LIST
2803: LIST
2804: LIST
2805: LIST
2806: PUSH
2807: LD_INT 32
2809: PUSH
2810: LD_INT 188
2812: PUSH
2813: LD_INT 167
2815: PUSH
2816: LD_INT 0
2818: PUSH
2819: LD_INT 0
2821: PUSH
2822: LD_INT 0
2824: PUSH
2825: EMPTY
2826: LIST
2827: LIST
2828: LIST
2829: LIST
2830: LIST
2831: LIST
2832: PUSH
2833: LD_INT 32
2835: PUSH
2836: LD_INT 202
2838: PUSH
2839: LD_INT 179
2841: PUSH
2842: LD_INT 0
2844: PUSH
2845: LD_INT 0
2847: PUSH
2848: LD_INT 0
2850: PUSH
2851: EMPTY
2852: LIST
2853: LIST
2854: LIST
2855: LIST
2856: LIST
2857: LIST
2858: PUSH
2859: LD_INT 32
2861: PUSH
2862: LD_INT 209
2864: PUSH
2865: LD_INT 182
2867: PUSH
2868: LD_INT 0
2870: PUSH
2871: LD_INT 0
2873: PUSH
2874: LD_INT 0
2876: PUSH
2877: EMPTY
2878: LIST
2879: LIST
2880: LIST
2881: LIST
2882: LIST
2883: LIST
2884: PUSH
2885: LD_INT 32
2887: PUSH
2888: LD_INT 220
2890: PUSH
2891: LD_INT 183
2893: PUSH
2894: LD_INT 5
2896: PUSH
2897: LD_INT 0
2899: PUSH
2900: LD_INT 0
2902: PUSH
2903: EMPTY
2904: LIST
2905: LIST
2906: LIST
2907: LIST
2908: LIST
2909: LIST
2910: PUSH
2911: LD_INT 32
2913: PUSH
2914: LD_INT 225
2916: PUSH
2917: LD_INT 181
2919: PUSH
2920: LD_INT 5
2922: PUSH
2923: LD_INT 0
2925: PUSH
2926: LD_INT 0
2928: PUSH
2929: EMPTY
2930: LIST
2931: LIST
2932: LIST
2933: LIST
2934: LIST
2935: LIST
2936: PUSH
2937: LD_INT 26
2939: PUSH
2940: LD_INT 220
2942: PUSH
2943: LD_INT 174
2945: PUSH
2946: LD_INT 5
2948: PUSH
2949: LD_INT 0
2951: PUSH
2952: LD_INT 0
2954: PUSH
2955: EMPTY
2956: LIST
2957: LIST
2958: LIST
2959: LIST
2960: LIST
2961: LIST
2962: PUSH
2963: LD_INT 1
2965: PUSH
2966: LD_INT 84
2968: PUSH
2969: LD_INT 128
2971: PUSH
2972: LD_INT 4
2974: PUSH
2975: LD_INT 0
2977: PUSH
2978: LD_INT 0
2980: PUSH
2981: EMPTY
2982: LIST
2983: LIST
2984: LIST
2985: LIST
2986: LIST
2987: LIST
2988: PUSH
2989: LD_INT 3
2991: PUSH
2992: LD_INT 68
2994: PUSH
2995: LD_INT 121
2997: PUSH
2998: LD_INT 1
3000: PUSH
3001: LD_INT 0
3003: PUSH
3004: LD_INT 0
3006: PUSH
3007: EMPTY
3008: LIST
3009: LIST
3010: LIST
3011: LIST
3012: LIST
3013: LIST
3014: PUSH
3015: LD_INT 19
3017: PUSH
3018: LD_INT 72
3020: PUSH
3021: LD_INT 125
3023: PUSH
3024: LD_INT 5
3026: PUSH
3027: LD_INT 0
3029: PUSH
3030: LD_INT 0
3032: PUSH
3033: EMPTY
3034: LIST
3035: LIST
3036: LIST
3037: LIST
3038: LIST
3039: LIST
3040: PUSH
3041: LD_INT 18
3043: PUSH
3044: LD_INT 68
3046: PUSH
3047: LD_INT 124
3049: PUSH
3050: LD_INT 0
3052: PUSH
3053: LD_INT 0
3055: PUSH
3056: LD_INT 0
3058: PUSH
3059: EMPTY
3060: LIST
3061: LIST
3062: LIST
3063: LIST
3064: LIST
3065: LIST
3066: PUSH
3067: LD_INT 24
3069: PUSH
3070: LD_INT 64
3072: PUSH
3073: LD_INT 121
3075: PUSH
3076: LD_INT 1
3078: PUSH
3079: LD_INT 0
3081: PUSH
3082: LD_INT 0
3084: PUSH
3085: EMPTY
3086: LIST
3087: LIST
3088: LIST
3089: LIST
3090: LIST
3091: LIST
3092: PUSH
3093: LD_INT 17
3095: PUSH
3096: LD_INT 65
3098: PUSH
3099: LD_INT 118
3101: PUSH
3102: LD_INT 2
3104: PUSH
3105: LD_INT 0
3107: PUSH
3108: LD_INT 0
3110: PUSH
3111: EMPTY
3112: LIST
3113: LIST
3114: LIST
3115: LIST
3116: LIST
3117: LIST
3118: PUSH
3119: LD_INT 21
3121: PUSH
3122: LD_INT 68
3124: PUSH
3125: LD_INT 117
3127: PUSH
3128: LD_INT 3
3130: PUSH
3131: LD_INT 0
3133: PUSH
3134: LD_INT 0
3136: PUSH
3137: EMPTY
3138: LIST
3139: LIST
3140: LIST
3141: LIST
3142: LIST
3143: LIST
3144: PUSH
3145: LD_INT 8
3147: PUSH
3148: LD_INT 68
3150: PUSH
3151: LD_INT 130
3153: PUSH
3154: LD_INT 1
3156: PUSH
3157: LD_INT 14
3159: PUSH
3160: LD_INT 10
3162: PUSH
3163: EMPTY
3164: LIST
3165: LIST
3166: LIST
3167: LIST
3168: LIST
3169: LIST
3170: PUSH
3171: LD_INT 8
3173: PUSH
3174: LD_INT 67
3176: PUSH
3177: LD_INT 110
3179: PUSH
3180: LD_INT 2
3182: PUSH
3183: LD_INT 11
3185: PUSH
3186: LD_INT 12
3188: PUSH
3189: EMPTY
3190: LIST
3191: LIST
3192: LIST
3193: LIST
3194: LIST
3195: LIST
3196: PUSH
3197: LD_INT 28
3199: PUSH
3200: LD_INT 85
3202: PUSH
3203: LD_INT 108
3205: PUSH
3206: LD_INT 2
3208: PUSH
3209: LD_INT 0
3211: PUSH
3212: LD_INT 0
3214: PUSH
3215: EMPTY
3216: LIST
3217: LIST
3218: LIST
3219: LIST
3220: LIST
3221: LIST
3222: PUSH
3223: LD_INT 28
3225: PUSH
3226: LD_INT 85
3228: PUSH
3229: LD_INT 124
3231: PUSH
3232: LD_INT 2
3234: PUSH
3235: LD_INT 0
3237: PUSH
3238: LD_INT 0
3240: PUSH
3241: EMPTY
3242: LIST
3243: LIST
3244: LIST
3245: LIST
3246: LIST
3247: LIST
3248: PUSH
3249: LD_INT 30
3251: PUSH
3252: LD_INT 97
3254: PUSH
3255: LD_INT 119
3257: PUSH
3258: LD_INT 2
3260: PUSH
3261: LD_INT 0
3263: PUSH
3264: LD_INT 0
3266: PUSH
3267: EMPTY
3268: LIST
3269: LIST
3270: LIST
3271: LIST
3272: LIST
3273: LIST
3274: PUSH
3275: LD_INT 5
3277: PUSH
3278: LD_INT 111
3280: PUSH
3281: LD_INT 138
3283: PUSH
3284: LD_INT 4
3286: PUSH
3287: LD_INT 0
3289: PUSH
3290: LD_INT 0
3292: PUSH
3293: EMPTY
3294: LIST
3295: LIST
3296: LIST
3297: LIST
3298: LIST
3299: LIST
3300: PUSH
3301: LD_INT 33
3303: PUSH
3304: LD_INT 104
3306: PUSH
3307: LD_INT 130
3309: PUSH
3310: LD_INT 3
3312: PUSH
3313: LD_INT 0
3315: PUSH
3316: LD_INT 0
3318: PUSH
3319: EMPTY
3320: LIST
3321: LIST
3322: LIST
3323: LIST
3324: LIST
3325: LIST
3326: PUSH
3327: LD_INT 33
3329: PUSH
3330: LD_INT 110
3332: PUSH
3333: LD_INT 142
3335: PUSH
3336: LD_INT 5
3338: PUSH
3339: LD_INT 0
3341: PUSH
3342: LD_INT 0
3344: PUSH
3345: EMPTY
3346: LIST
3347: LIST
3348: LIST
3349: LIST
3350: LIST
3351: LIST
3352: PUSH
3353: LD_INT 33
3355: PUSH
3356: LD_INT 91
3358: PUSH
3359: LD_INT 131
3361: PUSH
3362: LD_INT 5
3364: PUSH
3365: LD_INT 0
3367: PUSH
3368: LD_INT 0
3370: PUSH
3371: EMPTY
3372: LIST
3373: LIST
3374: LIST
3375: LIST
3376: LIST
3377: LIST
3378: PUSH
3379: LD_INT 33
3381: PUSH
3382: LD_INT 107
3384: PUSH
3385: LD_INT 157
3387: PUSH
3388: LD_INT 5
3390: PUSH
3391: LD_INT 0
3393: PUSH
3394: LD_INT 0
3396: PUSH
3397: EMPTY
3398: LIST
3399: LIST
3400: LIST
3401: LIST
3402: LIST
3403: LIST
3404: PUSH
3405: LD_INT 33
3407: PUSH
3408: LD_INT 104
3410: PUSH
3411: LD_INT 160
3413: PUSH
3414: LD_INT 5
3416: PUSH
3417: LD_INT 0
3419: PUSH
3420: LD_INT 0
3422: PUSH
3423: EMPTY
3424: LIST
3425: LIST
3426: LIST
3427: LIST
3428: LIST
3429: LIST
3430: PUSH
3431: LD_INT 33
3433: PUSH
3434: LD_INT 101
3436: PUSH
3437: LD_INT 162
3439: PUSH
3440: LD_INT 5
3442: PUSH
3443: LD_INT 0
3445: PUSH
3446: LD_INT 0
3448: PUSH
3449: EMPTY
3450: LIST
3451: LIST
3452: LIST
3453: LIST
3454: LIST
3455: LIST
3456: PUSH
3457: LD_INT 32
3459: PUSH
3460: LD_INT 87
3462: PUSH
3463: LD_INT 157
3465: PUSH
3466: LD_INT 5
3468: PUSH
3469: LD_INT 0
3471: PUSH
3472: LD_INT 0
3474: PUSH
3475: EMPTY
3476: LIST
3477: LIST
3478: LIST
3479: LIST
3480: LIST
3481: LIST
3482: PUSH
3483: LD_INT 32
3485: PUSH
3486: LD_INT 105
3488: PUSH
3489: LD_INT 158
3491: PUSH
3492: LD_INT 5
3494: PUSH
3495: LD_INT 0
3497: PUSH
3498: LD_INT 0
3500: PUSH
3501: EMPTY
3502: LIST
3503: LIST
3504: LIST
3505: LIST
3506: LIST
3507: LIST
3508: PUSH
3509: LD_INT 33
3511: PUSH
3512: LD_INT 91
3514: PUSH
3515: LD_INT 118
3517: PUSH
3518: LD_INT 4
3520: PUSH
3521: LD_INT 0
3523: PUSH
3524: LD_INT 0
3526: PUSH
3527: EMPTY
3528: LIST
3529: LIST
3530: LIST
3531: LIST
3532: LIST
3533: LIST
3534: PUSH
3535: LD_INT 33
3537: PUSH
3538: LD_INT 89
3540: PUSH
3541: LD_INT 107
3543: PUSH
3544: LD_INT 4
3546: PUSH
3547: LD_INT 0
3549: PUSH
3550: LD_INT 0
3552: PUSH
3553: EMPTY
3554: LIST
3555: LIST
3556: LIST
3557: LIST
3558: LIST
3559: LIST
3560: PUSH
3561: LD_INT 5
3563: PUSH
3564: LD_INT 86
3566: PUSH
3567: LD_INT 96
3569: PUSH
3570: LD_INT 3
3572: PUSH
3573: LD_INT 0
3575: PUSH
3576: LD_INT 0
3578: PUSH
3579: EMPTY
3580: LIST
3581: LIST
3582: LIST
3583: LIST
3584: LIST
3585: LIST
3586: PUSH
3587: LD_INT 33
3589: PUSH
3590: LD_INT 91
3592: PUSH
3593: LD_INT 102
3595: PUSH
3596: LD_INT 4
3598: PUSH
3599: LD_INT 0
3601: PUSH
3602: LD_INT 0
3604: PUSH
3605: EMPTY
3606: LIST
3607: LIST
3608: LIST
3609: LIST
3610: LIST
3611: LIST
3612: PUSH
3613: LD_INT 32
3615: PUSH
3616: LD_INT 80
3618: PUSH
3619: LD_INT 95
3621: PUSH
3622: LD_INT 3
3624: PUSH
3625: LD_INT 0
3627: PUSH
3628: LD_INT 0
3630: PUSH
3631: EMPTY
3632: LIST
3633: LIST
3634: LIST
3635: LIST
3636: LIST
3637: LIST
3638: PUSH
3639: LD_INT 28
3641: PUSH
3642: LD_INT 77
3644: PUSH
3645: LD_INT 105
3647: PUSH
3648: LD_INT 3
3650: PUSH
3651: LD_INT 0
3653: PUSH
3654: LD_INT 0
3656: PUSH
3657: EMPTY
3658: LIST
3659: LIST
3660: LIST
3661: LIST
3662: LIST
3663: LIST
3664: PUSH
3665: LD_INT 28
3667: PUSH
3668: LD_INT 85
3670: PUSH
3671: LD_INT 113
3673: PUSH
3674: LD_INT 3
3676: PUSH
3677: LD_INT 0
3679: PUSH
3680: LD_INT 0
3682: PUSH
3683: EMPTY
3684: LIST
3685: LIST
3686: LIST
3687: LIST
3688: LIST
3689: LIST
3690: PUSH
3691: LD_INT 28
3693: PUSH
3694: LD_INT 55
3696: PUSH
3697: LD_INT 97
3699: PUSH
3700: LD_INT 3
3702: PUSH
3703: LD_INT 0
3705: PUSH
3706: LD_INT 0
3708: PUSH
3709: EMPTY
3710: LIST
3711: LIST
3712: LIST
3713: LIST
3714: LIST
3715: LIST
3716: PUSH
3717: LD_INT 28
3719: PUSH
3720: LD_INT 88
3722: PUSH
3723: LD_INT 128
3725: PUSH
3726: LD_INT 3
3728: PUSH
3729: LD_INT 0
3731: PUSH
3732: LD_INT 0
3734: PUSH
3735: EMPTY
3736: LIST
3737: LIST
3738: LIST
3739: LIST
3740: LIST
3741: LIST
3742: PUSH
3743: LD_INT 32
3745: PUSH
3746: LD_INT 69
3748: PUSH
3749: LD_INT 101
3751: PUSH
3752: LD_INT 2
3754: PUSH
3755: LD_INT 0
3757: PUSH
3758: LD_INT 0
3760: PUSH
3761: EMPTY
3762: LIST
3763: LIST
3764: LIST
3765: LIST
3766: LIST
3767: LIST
3768: PUSH
3769: LD_INT 1
3771: PUSH
3772: LD_INT 34
3774: PUSH
3775: LD_INT 23
3777: PUSH
3778: LD_INT 4
3780: PUSH
3781: LD_INT 0
3783: PUSH
3784: LD_INT 0
3786: PUSH
3787: EMPTY
3788: LIST
3789: LIST
3790: LIST
3791: LIST
3792: LIST
3793: LIST
3794: PUSH
3795: LD_INT 8
3797: PUSH
3798: LD_INT 25
3800: PUSH
3801: LD_INT 4
3803: PUSH
3804: LD_INT 3
3806: PUSH
3807: LD_INT 11
3809: PUSH
3810: LD_INT 10
3812: PUSH
3813: EMPTY
3814: LIST
3815: LIST
3816: LIST
3817: LIST
3818: LIST
3819: LIST
3820: PUSH
3821: LD_INT 8
3823: PUSH
3824: LD_INT 15
3826: PUSH
3827: LD_INT 4
3829: PUSH
3830: LD_INT 2
3832: PUSH
3833: LD_INT 14
3835: PUSH
3836: LD_INT 12
3838: PUSH
3839: EMPTY
3840: LIST
3841: LIST
3842: LIST
3843: LIST
3844: LIST
3845: LIST
3846: PUSH
3847: LD_INT 29
3849: PUSH
3850: LD_INT 55
3852: PUSH
3853: LD_INT 35
3855: PUSH
3856: LD_INT 2
3858: PUSH
3859: LD_INT 0
3861: PUSH
3862: LD_INT 0
3864: PUSH
3865: EMPTY
3866: LIST
3867: LIST
3868: LIST
3869: LIST
3870: LIST
3871: LIST
3872: PUSH
3873: LD_INT 29
3875: PUSH
3876: LD_INT 24
3878: PUSH
3879: LD_INT 44
3881: PUSH
3882: LD_INT 2
3884: PUSH
3885: LD_INT 0
3887: PUSH
3888: LD_INT 0
3890: PUSH
3891: EMPTY
3892: LIST
3893: LIST
3894: LIST
3895: LIST
3896: LIST
3897: LIST
3898: PUSH
3899: LD_INT 34
3901: PUSH
3902: LD_INT 34
3904: PUSH
3905: LD_INT 32
3907: PUSH
3908: LD_INT 4
3910: PUSH
3911: LD_INT 0
3913: PUSH
3914: LD_INT 0
3916: PUSH
3917: EMPTY
3918: LIST
3919: LIST
3920: LIST
3921: LIST
3922: LIST
3923: LIST
3924: PUSH
3925: LD_INT 3
3927: PUSH
3928: LD_INT 14
3930: PUSH
3931: LD_INT 16
3933: PUSH
3934: LD_INT 1
3936: PUSH
3937: LD_INT 0
3939: PUSH
3940: LD_INT 0
3942: PUSH
3943: EMPTY
3944: LIST
3945: LIST
3946: LIST
3947: LIST
3948: LIST
3949: LIST
3950: PUSH
3951: LD_INT 24
3953: PUSH
3954: LD_INT 10
3956: PUSH
3957: LD_INT 16
3959: PUSH
3960: LD_INT 1
3962: PUSH
3963: LD_INT 0
3965: PUSH
3966: LD_INT 0
3968: PUSH
3969: EMPTY
3970: LIST
3971: LIST
3972: LIST
3973: LIST
3974: LIST
3975: LIST
3976: PUSH
3977: LD_INT 21
3979: PUSH
3980: LD_INT 11
3982: PUSH
3983: LD_INT 13
3985: PUSH
3986: LD_INT 2
3988: PUSH
3989: LD_INT 0
3991: PUSH
3992: LD_INT 0
3994: PUSH
3995: EMPTY
3996: LIST
3997: LIST
3998: LIST
3999: LIST
4000: LIST
4001: LIST
4002: PUSH
4003: LD_INT 18
4005: PUSH
4006: LD_INT 14
4008: PUSH
4009: LD_INT 12
4011: PUSH
4012: LD_INT 3
4014: PUSH
4015: LD_INT 0
4017: PUSH
4018: LD_INT 0
4020: PUSH
4021: EMPTY
4022: LIST
4023: LIST
4024: LIST
4025: LIST
4026: LIST
4027: LIST
4028: PUSH
4029: LD_INT 16
4031: PUSH
4032: LD_INT 14
4034: PUSH
4035: LD_INT 19
4037: PUSH
4038: LD_INT 0
4040: PUSH
4041: LD_INT 0
4043: PUSH
4044: LD_INT 0
4046: PUSH
4047: EMPTY
4048: LIST
4049: LIST
4050: LIST
4051: LIST
4052: LIST
4053: LIST
4054: PUSH
4055: LD_INT 17
4057: PUSH
4058: LD_INT 18
4060: PUSH
4061: LD_INT 20
4063: PUSH
4064: LD_INT 5
4066: PUSH
4067: LD_INT 0
4069: PUSH
4070: LD_INT 0
4072: PUSH
4073: EMPTY
4074: LIST
4075: LIST
4076: LIST
4077: LIST
4078: LIST
4079: LIST
4080: PUSH
4081: LD_INT 28
4083: PUSH
4084: LD_INT 10
4086: PUSH
4087: LD_INT 5
4089: PUSH
4090: LD_INT 1
4092: PUSH
4093: LD_INT 0
4095: PUSH
4096: LD_INT 0
4098: PUSH
4099: EMPTY
4100: LIST
4101: LIST
4102: LIST
4103: LIST
4104: LIST
4105: LIST
4106: PUSH
4107: LD_INT 28
4109: PUSH
4110: LD_INT 8
4112: PUSH
4113: LD_INT 8
4115: PUSH
4116: LD_INT 1
4118: PUSH
4119: LD_INT 0
4121: PUSH
4122: LD_INT 0
4124: PUSH
4125: EMPTY
4126: LIST
4127: LIST
4128: LIST
4129: LIST
4130: LIST
4131: LIST
4132: PUSH
4133: LD_INT 26
4135: PUSH
4136: LD_INT 19
4138: PUSH
4139: LD_INT 2
4141: PUSH
4142: LD_INT 1
4144: PUSH
4145: LD_INT 0
4147: PUSH
4148: LD_INT 0
4150: PUSH
4151: EMPTY
4152: LIST
4153: LIST
4154: LIST
4155: LIST
4156: LIST
4157: LIST
4158: PUSH
4159: LD_INT 26
4161: PUSH
4162: LD_INT 30
4164: PUSH
4165: LD_INT 2
4167: PUSH
4168: LD_INT 1
4170: PUSH
4171: LD_INT 0
4173: PUSH
4174: LD_INT 0
4176: PUSH
4177: EMPTY
4178: LIST
4179: LIST
4180: LIST
4181: LIST
4182: LIST
4183: LIST
4184: PUSH
4185: LD_INT 5
4187: PUSH
4188: LD_INT 59
4190: PUSH
4191: LD_INT 20
4193: PUSH
4194: LD_INT 4
4196: PUSH
4197: LD_INT 0
4199: PUSH
4200: LD_INT 0
4202: PUSH
4203: EMPTY
4204: LIST
4205: LIST
4206: LIST
4207: LIST
4208: LIST
4209: LIST
4210: PUSH
4211: LD_INT 32
4213: PUSH
4214: LD_INT 60
4216: PUSH
4217: LD_INT 24
4219: PUSH
4220: LD_INT 4
4222: PUSH
4223: LD_INT 0
4225: PUSH
4226: LD_INT 0
4228: PUSH
4229: EMPTY
4230: LIST
4231: LIST
4232: LIST
4233: LIST
4234: LIST
4235: LIST
4236: PUSH
4237: LD_INT 32
4239: PUSH
4240: LD_INT 61
4242: PUSH
4243: LD_INT 45
4245: PUSH
4246: LD_INT 5
4248: PUSH
4249: LD_INT 0
4251: PUSH
4252: LD_INT 0
4254: PUSH
4255: EMPTY
4256: LIST
4257: LIST
4258: LIST
4259: LIST
4260: LIST
4261: LIST
4262: PUSH
4263: LD_INT 32
4265: PUSH
4266: LD_INT 52
4268: PUSH
4269: LD_INT 51
4271: PUSH
4272: LD_INT 5
4274: PUSH
4275: LD_INT 0
4277: PUSH
4278: LD_INT 0
4280: PUSH
4281: EMPTY
4282: LIST
4283: LIST
4284: LIST
4285: LIST
4286: LIST
4287: LIST
4288: PUSH
4289: LD_INT 33
4291: PUSH
4292: LD_INT 56
4294: PUSH
4295: LD_INT 51
4297: PUSH
4298: LD_INT 5
4300: PUSH
4301: LD_INT 0
4303: PUSH
4304: LD_INT 0
4306: PUSH
4307: EMPTY
4308: LIST
4309: LIST
4310: LIST
4311: LIST
4312: LIST
4313: LIST
4314: PUSH
4315: LD_INT 33
4317: PUSH
4318: LD_INT 62
4320: PUSH
4321: LD_INT 49
4323: PUSH
4324: LD_INT 5
4326: PUSH
4327: LD_INT 0
4329: PUSH
4330: LD_INT 0
4332: PUSH
4333: EMPTY
4334: LIST
4335: LIST
4336: LIST
4337: LIST
4338: LIST
4339: LIST
4340: PUSH
4341: LD_INT 33
4343: PUSH
4344: LD_INT 41
4346: PUSH
4347: LD_INT 47
4349: PUSH
4350: LD_INT 5
4352: PUSH
4353: LD_INT 0
4355: PUSH
4356: LD_INT 0
4358: PUSH
4359: EMPTY
4360: LIST
4361: LIST
4362: LIST
4363: LIST
4364: LIST
4365: LIST
4366: PUSH
4367: LD_INT 33
4369: PUSH
4370: LD_INT 33
4372: PUSH
4373: LD_INT 52
4375: PUSH
4376: LD_INT 5
4378: PUSH
4379: LD_INT 0
4381: PUSH
4382: LD_INT 0
4384: PUSH
4385: EMPTY
4386: LIST
4387: LIST
4388: LIST
4389: LIST
4390: LIST
4391: LIST
4392: PUSH
4393: LD_INT 5
4395: PUSH
4396: LD_INT 31
4398: PUSH
4399: LD_INT 40
4401: PUSH
4402: LD_INT 0
4404: PUSH
4405: LD_INT 0
4407: PUSH
4408: LD_INT 0
4410: PUSH
4411: EMPTY
4412: LIST
4413: LIST
4414: LIST
4415: LIST
4416: LIST
4417: LIST
4418: PUSH
4419: LD_INT 33
4421: PUSH
4422: LD_INT 65
4424: PUSH
4425: LD_INT 37
4427: PUSH
4428: LD_INT 5
4430: PUSH
4431: LD_INT 0
4433: PUSH
4434: LD_INT 0
4436: PUSH
4437: EMPTY
4438: LIST
4439: LIST
4440: LIST
4441: LIST
4442: LIST
4443: LIST
4444: PUSH
4445: LD_INT 33
4447: PUSH
4448: LD_INT 63
4450: PUSH
4451: LD_INT 29
4453: PUSH
4454: LD_INT 4
4456: PUSH
4457: LD_INT 0
4459: PUSH
4460: LD_INT 0
4462: PUSH
4463: EMPTY
4464: LIST
4465: LIST
4466: LIST
4467: LIST
4468: LIST
4469: LIST
4470: PUSH
4471: LD_INT 33
4473: PUSH
4474: LD_INT 54
4476: PUSH
4477: LD_INT 11
4479: PUSH
4480: LD_INT 4
4482: PUSH
4483: LD_INT 0
4485: PUSH
4486: LD_INT 0
4488: PUSH
4489: EMPTY
4490: LIST
4491: LIST
4492: LIST
4493: LIST
4494: LIST
4495: LIST
4496: PUSH
4497: LD_INT 33
4499: PUSH
4500: LD_INT 56
4502: PUSH
4503: LD_INT 15
4505: PUSH
4506: LD_INT 4
4508: PUSH
4509: LD_INT 0
4511: PUSH
4512: LD_INT 0
4514: PUSH
4515: EMPTY
4516: LIST
4517: LIST
4518: LIST
4519: LIST
4520: LIST
4521: LIST
4522: PUSH
4523: LD_INT 33
4525: PUSH
4526: LD_INT 51
4528: PUSH
4529: LD_INT 6
4531: PUSH
4532: LD_INT 4
4534: PUSH
4535: LD_INT 0
4537: PUSH
4538: LD_INT 0
4540: PUSH
4541: EMPTY
4542: LIST
4543: LIST
4544: LIST
4545: LIST
4546: LIST
4547: LIST
4548: PUSH
4549: LD_INT 26
4551: PUSH
4552: LD_INT 39
4554: PUSH
4555: LD_INT 25
4557: PUSH
4558: LD_INT 0
4560: PUSH
4561: LD_INT 0
4563: PUSH
4564: LD_INT 0
4566: PUSH
4567: EMPTY
4568: LIST
4569: LIST
4570: LIST
4571: LIST
4572: LIST
4573: LIST
4574: PUSH
4575: LD_INT 26
4577: PUSH
4578: LD_INT 37
4580: PUSH
4581: LD_INT 21
4583: PUSH
4584: LD_INT 0
4586: PUSH
4587: LD_INT 0
4589: PUSH
4590: LD_INT 0
4592: PUSH
4593: EMPTY
4594: LIST
4595: LIST
4596: LIST
4597: LIST
4598: LIST
4599: LIST
4600: PUSH
4601: LD_INT 32
4603: PUSH
4604: LD_INT 35
4606: PUSH
4607: LD_INT 17
4609: PUSH
4610: LD_INT 4
4612: PUSH
4613: LD_INT 0
4615: PUSH
4616: LD_INT 0
4618: PUSH
4619: EMPTY
4620: LIST
4621: LIST
4622: LIST
4623: LIST
4624: LIST
4625: LIST
4626: PUSH
4627: LD_INT 33
4629: PUSH
4630: LD_INT 35
4632: PUSH
4633: LD_INT 28
4635: PUSH
4636: LD_INT 4
4638: PUSH
4639: LD_INT 0
4641: PUSH
4642: LD_INT 0
4644: PUSH
4645: EMPTY
4646: LIST
4647: LIST
4648: LIST
4649: LIST
4650: LIST
4651: LIST
4652: PUSH
4653: LD_INT 33
4655: PUSH
4656: LD_INT 28
4658: PUSH
4659: LD_INT 46
4661: PUSH
4662: LD_INT 5
4664: PUSH
4665: LD_INT 0
4667: PUSH
4668: LD_INT 0
4670: PUSH
4671: EMPTY
4672: LIST
4673: LIST
4674: LIST
4675: LIST
4676: LIST
4677: LIST
4678: PUSH
4679: LD_INT 33
4681: PUSH
4682: LD_INT 31
4684: PUSH
4685: LD_INT 6
4687: PUSH
4688: LD_INT 4
4690: PUSH
4691: LD_INT 0
4693: PUSH
4694: LD_INT 0
4696: PUSH
4697: EMPTY
4698: LIST
4699: LIST
4700: LIST
4701: LIST
4702: LIST
4703: LIST
4704: PUSH
4705: LD_INT 26
4707: PUSH
4708: LD_INT 54
4710: PUSH
4711: LD_INT 38
4713: PUSH
4714: LD_INT 4
4716: PUSH
4717: LD_INT 0
4719: PUSH
4720: LD_INT 0
4722: PUSH
4723: EMPTY
4724: LIST
4725: LIST
4726: LIST
4727: LIST
4728: LIST
4729: LIST
4730: PUSH
4731: LD_INT 33
4733: PUSH
4734: LD_INT 207
4736: PUSH
4737: LD_INT 167
4739: PUSH
4740: LD_INT 3
4742: PUSH
4743: LD_INT 0
4745: PUSH
4746: LD_INT 0
4748: PUSH
4749: EMPTY
4750: LIST
4751: LIST
4752: LIST
4753: LIST
4754: LIST
4755: LIST
4756: PUSH
4757: LD_INT 30
4759: PUSH
4760: LD_INT 43
4762: PUSH
4763: LD_INT 2
4765: PUSH
4766: LD_INT 4
4768: PUSH
4769: LD_INT 0
4771: PUSH
4772: LD_INT 0
4774: PUSH
4775: EMPTY
4776: LIST
4777: LIST
4778: LIST
4779: LIST
4780: LIST
4781: LIST
4782: PUSH
4783: EMPTY
4784: LIST
4785: LIST
4786: LIST
4787: LIST
4788: LIST
4789: LIST
4790: LIST
4791: LIST
4792: LIST
4793: LIST
4794: LIST
4795: LIST
4796: LIST
4797: LIST
4798: LIST
4799: LIST
4800: LIST
4801: LIST
4802: LIST
4803: LIST
4804: LIST
4805: LIST
4806: LIST
4807: LIST
4808: LIST
4809: LIST
4810: LIST
4811: LIST
4812: LIST
4813: LIST
4814: LIST
4815: LIST
4816: LIST
4817: LIST
4818: LIST
4819: LIST
4820: LIST
4821: LIST
4822: LIST
4823: LIST
4824: LIST
4825: LIST
4826: LIST
4827: LIST
4828: LIST
4829: LIST
4830: LIST
4831: LIST
4832: LIST
4833: LIST
4834: LIST
4835: LIST
4836: LIST
4837: LIST
4838: LIST
4839: LIST
4840: LIST
4841: LIST
4842: LIST
4843: LIST
4844: LIST
4845: LIST
4846: LIST
4847: LIST
4848: LIST
4849: LIST
4850: LIST
4851: LIST
4852: LIST
4853: LIST
4854: LIST
4855: LIST
4856: LIST
4857: LIST
4858: LIST
4859: LIST
4860: LIST
4861: LIST
4862: LIST
4863: LIST
4864: LIST
4865: LIST
4866: LIST
4867: LIST
4868: LIST
4869: ST_TO_ADDR
// for i in tmp do
4870: LD_ADDR_VAR 0 2
4874: PUSH
4875: LD_VAR 0 4
4879: PUSH
4880: FOR_IN
4881: IFFALSE 5112
// begin uc_side := side ;
4883: LD_ADDR_OWVAR 20
4887: PUSH
4888: LD_VAR 0 5
4892: ST_TO_ADDR
// uc_nation := nation_russian ;
4893: LD_ADDR_OWVAR 21
4897: PUSH
4898: LD_INT 3
4900: ST_TO_ADDR
// bc_type := i [ 1 ] ;
4901: LD_ADDR_OWVAR 42
4905: PUSH
4906: LD_VAR 0 2
4910: PUSH
4911: LD_INT 1
4913: ARRAY
4914: ST_TO_ADDR
// bc_level := rand ( 5 , 6 ) ;
4915: LD_ADDR_OWVAR 43
4919: PUSH
4920: LD_INT 5
4922: PPUSH
4923: LD_INT 6
4925: PPUSH
4926: CALL_OW 12
4930: ST_TO_ADDR
// bc_kind1 := i [ 5 ] ;
4931: LD_ADDR_OWVAR 44
4935: PUSH
4936: LD_VAR 0 2
4940: PUSH
4941: LD_INT 5
4943: ARRAY
4944: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
4945: LD_ADDR_OWVAR 45
4949: PUSH
4950: LD_VAR 0 2
4954: PUSH
4955: LD_INT 6
4957: ARRAY
4958: ST_TO_ADDR
// sr := 0 ;
4959: LD_ADDR_VAR 0 6
4963: PUSH
4964: LD_INT 0
4966: ST_TO_ADDR
// if i [ 1 ] = b_oil_mine then
4967: LD_VAR 0 2
4971: PUSH
4972: LD_INT 1
4974: ARRAY
4975: PUSH
4976: LD_INT 29
4978: EQUAL
4979: IFFALSE 4991
// sr := mat_oil else
4981: LD_ADDR_VAR 0 6
4985: PUSH
4986: LD_INT 2
4988: ST_TO_ADDR
4989: GO 5013
// if i [ 1 ] = b_siberite_mine then
4991: LD_VAR 0 2
4995: PUSH
4996: LD_INT 1
4998: ARRAY
4999: PUSH
5000: LD_INT 30
5002: EQUAL
5003: IFFALSE 5013
// sr := mat_siberit ;
5005: LD_ADDR_VAR 0 6
5009: PUSH
5010: LD_INT 3
5012: ST_TO_ADDR
// if sr then
5013: LD_VAR 0 6
5017: IFFALSE 5073
// begin CreateDepositXY ( i [ 2 ] , i [ 3 ] , sr ) ;
5019: LD_VAR 0 2
5023: PUSH
5024: LD_INT 2
5026: ARRAY
5027: PPUSH
5028: LD_VAR 0 2
5032: PUSH
5033: LD_INT 3
5035: ARRAY
5036: PPUSH
5037: LD_VAR 0 6
5041: PPUSH
5042: CALL_OW 62
// SetResourceVisibility ( i [ 2 ] , i [ 3 ] , side ) ;
5046: LD_VAR 0 2
5050: PUSH
5051: LD_INT 2
5053: ARRAY
5054: PPUSH
5055: LD_VAR 0 2
5059: PUSH
5060: LD_INT 3
5062: ARRAY
5063: PPUSH
5064: LD_VAR 0 5
5068: PPUSH
5069: CALL_OW 441
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
5073: LD_ADDR_VAR 0 3
5077: PUSH
5078: LD_VAR 0 2
5082: PUSH
5083: LD_INT 2
5085: ARRAY
5086: PPUSH
5087: LD_VAR 0 2
5091: PUSH
5092: LD_INT 3
5094: ARRAY
5095: PPUSH
5096: LD_VAR 0 2
5100: PUSH
5101: LD_INT 4
5103: ARRAY
5104: PPUSH
5105: CALL_OW 47
5109: ST_TO_ADDR
// end ;
5110: GO 4880
5112: POP
5113: POP
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
5114: LD_ADDR_VAR 0 7
5118: PUSH
5119: LD_INT 22
5121: PUSH
5122: LD_VAR 0 5
5126: PUSH
5127: EMPTY
5128: LIST
5129: LIST
5130: PUSH
5131: LD_INT 30
5133: PUSH
5134: LD_INT 1
5136: PUSH
5137: EMPTY
5138: LIST
5139: LIST
5140: PUSH
5141: EMPTY
5142: LIST
5143: LIST
5144: PPUSH
5145: CALL_OW 69
5149: ST_TO_ADDR
// if not depot then
5150: LD_VAR 0 7
5154: NOT
5155: IFFALSE 5159
// exit ;
5157: GO 5503
// base := PrepareBase ( HexInfo ( 84 , 128 ) , rus1Base , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 3000 , 300 , 100 ] , [ 12 , 6 , 6 , 4 ] ) ;
5159: LD_ADDR_VAR 0 8
5163: PUSH
5164: LD_INT 84
5166: PPUSH
5167: LD_INT 128
5169: PPUSH
5170: CALL_OW 428
5174: PPUSH
5175: LD_INT 15
5177: PPUSH
5178: LD_INT 0
5180: PPUSH
5181: LD_INT 6
5183: PUSH
5184: LD_INT 7
5186: PUSH
5187: LD_INT 8
5189: PUSH
5190: EMPTY
5191: LIST
5192: LIST
5193: LIST
5194: PUSH
5195: LD_OWVAR 67
5199: ARRAY
5200: PPUSH
5201: LD_INT 3000
5203: PUSH
5204: LD_INT 300
5206: PUSH
5207: LD_INT 100
5209: PUSH
5210: EMPTY
5211: LIST
5212: LIST
5213: LIST
5214: PPUSH
5215: LD_INT 12
5217: PUSH
5218: LD_INT 6
5220: PUSH
5221: LD_INT 6
5223: PUSH
5224: LD_INT 4
5226: PUSH
5227: EMPTY
5228: LIST
5229: LIST
5230: LIST
5231: LIST
5232: PPUSH
5233: CALL 27581 0 6
5237: ST_TO_ADDR
// if not base then
5238: LD_VAR 0 8
5242: NOT
5243: IFFALSE 5247
// exit ;
5245: GO 5503
// mc_bases := Replace ( mc_bases , mc_rus_1 , base ) ;
5247: LD_ADDR_EXP 46
5251: PUSH
5252: LD_EXP 46
5256: PPUSH
5257: LD_EXP 7
5261: PPUSH
5262: LD_VAR 0 8
5266: PPUSH
5267: CALL_OW 1
5271: ST_TO_ADDR
// base := PrepareBase ( HexInfo ( 34 , 23 ) , rus2Base , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 20000 , 3000 , 1000 ] , [ 12 , 6 , 6 , 4 ] ) ;
5272: LD_ADDR_VAR 0 8
5276: PUSH
5277: LD_INT 34
5279: PPUSH
5280: LD_INT 23
5282: PPUSH
5283: CALL_OW 428
5287: PPUSH
5288: LD_INT 11
5290: PPUSH
5291: LD_INT 0
5293: PPUSH
5294: LD_INT 6
5296: PUSH
5297: LD_INT 7
5299: PUSH
5300: LD_INT 8
5302: PUSH
5303: EMPTY
5304: LIST
5305: LIST
5306: LIST
5307: PUSH
5308: LD_OWVAR 67
5312: ARRAY
5313: PPUSH
5314: LD_INT 20000
5316: PUSH
5317: LD_INT 3000
5319: PUSH
5320: LD_INT 1000
5322: PUSH
5323: EMPTY
5324: LIST
5325: LIST
5326: LIST
5327: PPUSH
5328: LD_INT 12
5330: PUSH
5331: LD_INT 6
5333: PUSH
5334: LD_INT 6
5336: PUSH
5337: LD_INT 4
5339: PUSH
5340: EMPTY
5341: LIST
5342: LIST
5343: LIST
5344: LIST
5345: PPUSH
5346: CALL 27581 0 6
5350: ST_TO_ADDR
// if not base then
5351: LD_VAR 0 8
5355: NOT
5356: IFFALSE 5360
// exit ;
5358: GO 5503
// mc_bases := Replace ( mc_bases , mc_rus_2 , base ) ;
5360: LD_ADDR_EXP 46
5364: PUSH
5365: LD_EXP 46
5369: PPUSH
5370: LD_EXP 8
5374: PPUSH
5375: LD_VAR 0 8
5379: PPUSH
5380: CALL_OW 1
5384: ST_TO_ADDR
// ruOutpost := PrepareBase ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_depot ] ] ) [ 1 ] , ruOutpostArea , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 500 , 100 , 10 ] , [ [ 6 , 7 , 8 ] [ Difficulty ] , 2 , 0 , 1 ] ) ;
5385: LD_ADDR_EXP 14
5389: PUSH
5390: LD_INT 22
5392: PUSH
5393: LD_INT 3
5395: PUSH
5396: EMPTY
5397: LIST
5398: LIST
5399: PUSH
5400: LD_INT 30
5402: PUSH
5403: LD_INT 0
5405: PUSH
5406: EMPTY
5407: LIST
5408: LIST
5409: PUSH
5410: EMPTY
5411: LIST
5412: LIST
5413: PPUSH
5414: CALL_OW 69
5418: PUSH
5419: LD_INT 1
5421: ARRAY
5422: PPUSH
5423: LD_INT 25
5425: PPUSH
5426: LD_INT 0
5428: PPUSH
5429: LD_INT 6
5431: PUSH
5432: LD_INT 7
5434: PUSH
5435: LD_INT 8
5437: PUSH
5438: EMPTY
5439: LIST
5440: LIST
5441: LIST
5442: PUSH
5443: LD_OWVAR 67
5447: ARRAY
5448: PPUSH
5449: LD_INT 500
5451: PUSH
5452: LD_INT 100
5454: PUSH
5455: LD_INT 10
5457: PUSH
5458: EMPTY
5459: LIST
5460: LIST
5461: LIST
5462: PPUSH
5463: LD_INT 6
5465: PUSH
5466: LD_INT 7
5468: PUSH
5469: LD_INT 8
5471: PUSH
5472: EMPTY
5473: LIST
5474: LIST
5475: LIST
5476: PUSH
5477: LD_OWVAR 67
5481: ARRAY
5482: PUSH
5483: LD_INT 2
5485: PUSH
5486: LD_INT 0
5488: PUSH
5489: LD_INT 1
5491: PUSH
5492: EMPTY
5493: LIST
5494: LIST
5495: LIST
5496: LIST
5497: PPUSH
5498: CALL 27581 0 6
5502: ST_TO_ADDR
// end ;
5503: LD_VAR 0 1
5507: RET
// export function PrepareLegion ; var i , b , veh , tmp , tmp2 , cameras , side , sr , depot , base ; begin
5508: LD_INT 0
5510: PPUSH
5511: PPUSH
5512: PPUSH
5513: PPUSH
5514: PPUSH
5515: PPUSH
5516: PPUSH
5517: PPUSH
5518: PPUSH
5519: PPUSH
5520: PPUSH
// PrepareNature ( 0 , 0 , 6 , 0 , 0 , 0 , 0 , legApe , 0 ) ;
5521: LD_INT 0
5523: PPUSH
5524: LD_INT 0
5526: PPUSH
5527: LD_INT 6
5529: PPUSH
5530: LD_INT 0
5532: PPUSH
5533: LD_INT 0
5535: PPUSH
5536: LD_INT 0
5538: PPUSH
5539: LD_INT 0
5541: PPUSH
5542: LD_INT 8
5544: PPUSH
5545: LD_INT 0
5547: PPUSH
5548: CALL 51963 0 9
// side := 8 ;
5552: LD_ADDR_VAR 0 8
5556: PUSH
5557: LD_INT 8
5559: ST_TO_ADDR
// tmp := AreaToList ( minesArea , 0 ) ;
5560: LD_ADDR_VAR 0 5
5564: PUSH
5565: LD_INT 20
5567: PPUSH
5568: LD_INT 0
5570: PPUSH
5571: CALL_OW 517
5575: ST_TO_ADDR
// if Difficulty > 2 then
5576: LD_OWVAR 67
5580: PUSH
5581: LD_INT 2
5583: GREATER
5584: IFFALSE 5728
// begin tmp2 := AreaToList ( minesArea2 , 0 ) ;
5586: LD_ADDR_VAR 0 6
5590: PUSH
5591: LD_INT 27
5593: PPUSH
5594: LD_INT 0
5596: PPUSH
5597: CALL_OW 517
5601: ST_TO_ADDR
// for i = 1 to tmp2 [ 1 ] do
5602: LD_ADDR_VAR 0 2
5606: PUSH
5607: DOUBLE
5608: LD_INT 1
5610: DEC
5611: ST_TO_ADDR
5612: LD_VAR 0 6
5616: PUSH
5617: LD_INT 1
5619: ARRAY
5620: PUSH
5621: FOR_TO
5622: IFFALSE 5726
// begin tmp := ReplaceIn ( tmp , [ 1 , tmp [ 1 ] + 1 ] , tmp2 [ 1 ] [ i ] ) ;
5624: LD_ADDR_VAR 0 5
5628: PUSH
5629: LD_VAR 0 5
5633: PPUSH
5634: LD_INT 1
5636: PUSH
5637: LD_VAR 0 5
5641: PUSH
5642: LD_INT 1
5644: ARRAY
5645: PUSH
5646: LD_INT 1
5648: PLUS
5649: PUSH
5650: EMPTY
5651: LIST
5652: LIST
5653: PPUSH
5654: LD_VAR 0 6
5658: PUSH
5659: LD_INT 1
5661: ARRAY
5662: PUSH
5663: LD_VAR 0 2
5667: ARRAY
5668: PPUSH
5669: CALL 24294 0 3
5673: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 2 , tmp [ 2 ] + 1 ] , tmp2 [ 2 ] [ i ] ) ;
5674: LD_ADDR_VAR 0 5
5678: PUSH
5679: LD_VAR 0 5
5683: PPUSH
5684: LD_INT 2
5686: PUSH
5687: LD_VAR 0 5
5691: PUSH
5692: LD_INT 2
5694: ARRAY
5695: PUSH
5696: LD_INT 1
5698: PLUS
5699: PUSH
5700: EMPTY
5701: LIST
5702: LIST
5703: PPUSH
5704: LD_VAR 0 6
5708: PUSH
5709: LD_INT 2
5711: ARRAY
5712: PUSH
5713: LD_VAR 0 2
5717: ARRAY
5718: PPUSH
5719: CALL 24294 0 3
5723: ST_TO_ADDR
// end ;
5724: GO 5621
5726: POP
5727: POP
// end ; if tmp then
5728: LD_VAR 0 5
5732: IFFALSE 5860
// begin for i = 1 to tmp [ 1 ] do
5734: LD_ADDR_VAR 0 2
5738: PUSH
5739: DOUBLE
5740: LD_INT 1
5742: DEC
5743: ST_TO_ADDR
5744: LD_VAR 0 5
5748: PUSH
5749: LD_INT 1
5751: ARRAY
5752: PUSH
5753: FOR_TO
5754: IFFALSE 5858
// begin PlaceMine ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side , 0 ) ;
5756: LD_VAR 0 5
5760: PUSH
5761: LD_INT 1
5763: ARRAY
5764: PUSH
5765: LD_VAR 0 2
5769: ARRAY
5770: PPUSH
5771: LD_VAR 0 5
5775: PUSH
5776: LD_INT 2
5778: ARRAY
5779: PUSH
5780: LD_VAR 0 2
5784: ARRAY
5785: PPUSH
5786: LD_VAR 0 8
5790: PPUSH
5791: LD_INT 0
5793: PPUSH
5794: CALL_OW 454
// staticMines := Insert ( staticMines , staticMines + 1 , [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ) ;
5798: LD_ADDR_EXP 16
5802: PUSH
5803: LD_EXP 16
5807: PPUSH
5808: LD_EXP 16
5812: PUSH
5813: LD_INT 1
5815: PLUS
5816: PPUSH
5817: LD_VAR 0 5
5821: PUSH
5822: LD_INT 1
5824: ARRAY
5825: PUSH
5826: LD_VAR 0 2
5830: ARRAY
5831: PUSH
5832: LD_VAR 0 5
5836: PUSH
5837: LD_INT 2
5839: ARRAY
5840: PUSH
5841: LD_VAR 0 2
5845: ARRAY
5846: PUSH
5847: EMPTY
5848: LIST
5849: LIST
5850: PPUSH
5851: CALL_OW 2
5855: ST_TO_ADDR
// end ;
5856: GO 5753
5858: POP
5859: POP
// end ; cameras := [ [ 165 , 156 ] , [ 143 , 145 ] , [ 152 , 165 ] , [ 123 , 153 ] , [ 161 , 215 ] , [ 172 , 100 ] , [ 148 , 83 ] , [ 122 , 68 ] , [ 105 , 74 ] , [ 113 , 97 ] ] ;
5860: LD_ADDR_VAR 0 7
5864: PUSH
5865: LD_INT 165
5867: PUSH
5868: LD_INT 156
5870: PUSH
5871: EMPTY
5872: LIST
5873: LIST
5874: PUSH
5875: LD_INT 143
5877: PUSH
5878: LD_INT 145
5880: PUSH
5881: EMPTY
5882: LIST
5883: LIST
5884: PUSH
5885: LD_INT 152
5887: PUSH
5888: LD_INT 165
5890: PUSH
5891: EMPTY
5892: LIST
5893: LIST
5894: PUSH
5895: LD_INT 123
5897: PUSH
5898: LD_INT 153
5900: PUSH
5901: EMPTY
5902: LIST
5903: LIST
5904: PUSH
5905: LD_INT 161
5907: PUSH
5908: LD_INT 215
5910: PUSH
5911: EMPTY
5912: LIST
5913: LIST
5914: PUSH
5915: LD_INT 172
5917: PUSH
5918: LD_INT 100
5920: PUSH
5921: EMPTY
5922: LIST
5923: LIST
5924: PUSH
5925: LD_INT 148
5927: PUSH
5928: LD_INT 83
5930: PUSH
5931: EMPTY
5932: LIST
5933: LIST
5934: PUSH
5935: LD_INT 122
5937: PUSH
5938: LD_INT 68
5940: PUSH
5941: EMPTY
5942: LIST
5943: LIST
5944: PUSH
5945: LD_INT 105
5947: PUSH
5948: LD_INT 74
5950: PUSH
5951: EMPTY
5952: LIST
5953: LIST
5954: PUSH
5955: LD_INT 113
5957: PUSH
5958: LD_INT 97
5960: PUSH
5961: EMPTY
5962: LIST
5963: LIST
5964: PUSH
5965: EMPTY
5966: LIST
5967: LIST
5968: LIST
5969: LIST
5970: LIST
5971: LIST
5972: LIST
5973: LIST
5974: LIST
5975: LIST
5976: ST_TO_ADDR
// for i in cameras do
5977: LD_ADDR_VAR 0 2
5981: PUSH
5982: LD_VAR 0 7
5986: PUSH
5987: FOR_IN
5988: IFFALSE 6019
// HiddenCamera ( i [ 1 ] , i [ 2 ] , side ) ;
5990: LD_VAR 0 2
5994: PUSH
5995: LD_INT 1
5997: ARRAY
5998: PPUSH
5999: LD_VAR 0 2
6003: PUSH
6004: LD_INT 2
6006: ARRAY
6007: PPUSH
6008: LD_VAR 0 8
6012: PPUSH
6013: CALL_OW 244
6017: GO 5987
6019: POP
6020: POP
// tmp := [ [ 1 , 144 , 110 , 1 , 0 , 0 ] , [ 3 , 151 , 118 , 0 , 0 , 0 ] , [ 8 , 158 , 110 , 4 , 10 , 15 ] , [ 23 , 154 , 121 , 5 , 0 , 0 ] , [ 22 , 155 , 118 , 4 , 0 , 0 ] , [ 21 , 151 , 122 , 0 , 0 , 0 ] , [ 18 , 148 , 118 , 1 , 0 , 0 ] , [ 17 , 147 , 114 , 2 , 0 , 0 ] , [ 29 , 163 , 120 , 5 , 0 , 0 ] , [ 27 , 137 , 116 , 3 , 0 , 0 ] , [ 27 , 133 , 111 , 1 , 0 , 0 ] , [ 27 , 132 , 106 , 4 , 0 , 0 ] , [ 26 , 137 , 111 , 0 , 0 , 0 ] , [ 8 , 141 , 117 , 1 , 13 , 11 ] , [ 30 , 140 , 128 , 1 , 0 , 0 ] , [ 5 , 146 , 96 , 3 , 0 , 0 ] , [ 32 , 150 , 98 , 3 , 0 , 0 ] , [ 32 , 142 , 95 , 3 , 0 , 0 ] , [ 32 , 159 , 104 , 3 , 0 , 0 ] , [ 32 , 133 , 95 , 3 , 0 , 0 ] , [ 32 , 131 , 102 , 2 , 0 , 0 ] , [ 32 , 164 , 144 , 0 , 0 , 0 ] , [ 32 , 146 , 139 , 0 , 0 , 0 ] , [ 26 , 143 , 122 , 4 , 0 , 0 ] , [ 26 , 164 , 116 , 2 , 0 , 0 ] , ] ;
6021: LD_ADDR_VAR 0 5
6025: PUSH
6026: LD_INT 1
6028: PUSH
6029: LD_INT 144
6031: PUSH
6032: LD_INT 110
6034: PUSH
6035: LD_INT 1
6037: PUSH
6038: LD_INT 0
6040: PUSH
6041: LD_INT 0
6043: PUSH
6044: EMPTY
6045: LIST
6046: LIST
6047: LIST
6048: LIST
6049: LIST
6050: LIST
6051: PUSH
6052: LD_INT 3
6054: PUSH
6055: LD_INT 151
6057: PUSH
6058: LD_INT 118
6060: PUSH
6061: LD_INT 0
6063: PUSH
6064: LD_INT 0
6066: PUSH
6067: LD_INT 0
6069: PUSH
6070: EMPTY
6071: LIST
6072: LIST
6073: LIST
6074: LIST
6075: LIST
6076: LIST
6077: PUSH
6078: LD_INT 8
6080: PUSH
6081: LD_INT 158
6083: PUSH
6084: LD_INT 110
6086: PUSH
6087: LD_INT 4
6089: PUSH
6090: LD_INT 10
6092: PUSH
6093: LD_INT 15
6095: PUSH
6096: EMPTY
6097: LIST
6098: LIST
6099: LIST
6100: LIST
6101: LIST
6102: LIST
6103: PUSH
6104: LD_INT 23
6106: PUSH
6107: LD_INT 154
6109: PUSH
6110: LD_INT 121
6112: PUSH
6113: LD_INT 5
6115: PUSH
6116: LD_INT 0
6118: PUSH
6119: LD_INT 0
6121: PUSH
6122: EMPTY
6123: LIST
6124: LIST
6125: LIST
6126: LIST
6127: LIST
6128: LIST
6129: PUSH
6130: LD_INT 22
6132: PUSH
6133: LD_INT 155
6135: PUSH
6136: LD_INT 118
6138: PUSH
6139: LD_INT 4
6141: PUSH
6142: LD_INT 0
6144: PUSH
6145: LD_INT 0
6147: PUSH
6148: EMPTY
6149: LIST
6150: LIST
6151: LIST
6152: LIST
6153: LIST
6154: LIST
6155: PUSH
6156: LD_INT 21
6158: PUSH
6159: LD_INT 151
6161: PUSH
6162: LD_INT 122
6164: PUSH
6165: LD_INT 0
6167: PUSH
6168: LD_INT 0
6170: PUSH
6171: LD_INT 0
6173: PUSH
6174: EMPTY
6175: LIST
6176: LIST
6177: LIST
6178: LIST
6179: LIST
6180: LIST
6181: PUSH
6182: LD_INT 18
6184: PUSH
6185: LD_INT 148
6187: PUSH
6188: LD_INT 118
6190: PUSH
6191: LD_INT 1
6193: PUSH
6194: LD_INT 0
6196: PUSH
6197: LD_INT 0
6199: PUSH
6200: EMPTY
6201: LIST
6202: LIST
6203: LIST
6204: LIST
6205: LIST
6206: LIST
6207: PUSH
6208: LD_INT 17
6210: PUSH
6211: LD_INT 147
6213: PUSH
6214: LD_INT 114
6216: PUSH
6217: LD_INT 2
6219: PUSH
6220: LD_INT 0
6222: PUSH
6223: LD_INT 0
6225: PUSH
6226: EMPTY
6227: LIST
6228: LIST
6229: LIST
6230: LIST
6231: LIST
6232: LIST
6233: PUSH
6234: LD_INT 29
6236: PUSH
6237: LD_INT 163
6239: PUSH
6240: LD_INT 120
6242: PUSH
6243: LD_INT 5
6245: PUSH
6246: LD_INT 0
6248: PUSH
6249: LD_INT 0
6251: PUSH
6252: EMPTY
6253: LIST
6254: LIST
6255: LIST
6256: LIST
6257: LIST
6258: LIST
6259: PUSH
6260: LD_INT 27
6262: PUSH
6263: LD_INT 137
6265: PUSH
6266: LD_INT 116
6268: PUSH
6269: LD_INT 3
6271: PUSH
6272: LD_INT 0
6274: PUSH
6275: LD_INT 0
6277: PUSH
6278: EMPTY
6279: LIST
6280: LIST
6281: LIST
6282: LIST
6283: LIST
6284: LIST
6285: PUSH
6286: LD_INT 27
6288: PUSH
6289: LD_INT 133
6291: PUSH
6292: LD_INT 111
6294: PUSH
6295: LD_INT 1
6297: PUSH
6298: LD_INT 0
6300: PUSH
6301: LD_INT 0
6303: PUSH
6304: EMPTY
6305: LIST
6306: LIST
6307: LIST
6308: LIST
6309: LIST
6310: LIST
6311: PUSH
6312: LD_INT 27
6314: PUSH
6315: LD_INT 132
6317: PUSH
6318: LD_INT 106
6320: PUSH
6321: LD_INT 4
6323: PUSH
6324: LD_INT 0
6326: PUSH
6327: LD_INT 0
6329: PUSH
6330: EMPTY
6331: LIST
6332: LIST
6333: LIST
6334: LIST
6335: LIST
6336: LIST
6337: PUSH
6338: LD_INT 26
6340: PUSH
6341: LD_INT 137
6343: PUSH
6344: LD_INT 111
6346: PUSH
6347: LD_INT 0
6349: PUSH
6350: LD_INT 0
6352: PUSH
6353: LD_INT 0
6355: PUSH
6356: EMPTY
6357: LIST
6358: LIST
6359: LIST
6360: LIST
6361: LIST
6362: LIST
6363: PUSH
6364: LD_INT 8
6366: PUSH
6367: LD_INT 141
6369: PUSH
6370: LD_INT 117
6372: PUSH
6373: LD_INT 1
6375: PUSH
6376: LD_INT 13
6378: PUSH
6379: LD_INT 11
6381: PUSH
6382: EMPTY
6383: LIST
6384: LIST
6385: LIST
6386: LIST
6387: LIST
6388: LIST
6389: PUSH
6390: LD_INT 30
6392: PUSH
6393: LD_INT 140
6395: PUSH
6396: LD_INT 128
6398: PUSH
6399: LD_INT 1
6401: PUSH
6402: LD_INT 0
6404: PUSH
6405: LD_INT 0
6407: PUSH
6408: EMPTY
6409: LIST
6410: LIST
6411: LIST
6412: LIST
6413: LIST
6414: LIST
6415: PUSH
6416: LD_INT 5
6418: PUSH
6419: LD_INT 146
6421: PUSH
6422: LD_INT 96
6424: PUSH
6425: LD_INT 3
6427: PUSH
6428: LD_INT 0
6430: PUSH
6431: LD_INT 0
6433: PUSH
6434: EMPTY
6435: LIST
6436: LIST
6437: LIST
6438: LIST
6439: LIST
6440: LIST
6441: PUSH
6442: LD_INT 32
6444: PUSH
6445: LD_INT 150
6447: PUSH
6448: LD_INT 98
6450: PUSH
6451: LD_INT 3
6453: PUSH
6454: LD_INT 0
6456: PUSH
6457: LD_INT 0
6459: PUSH
6460: EMPTY
6461: LIST
6462: LIST
6463: LIST
6464: LIST
6465: LIST
6466: LIST
6467: PUSH
6468: LD_INT 32
6470: PUSH
6471: LD_INT 142
6473: PUSH
6474: LD_INT 95
6476: PUSH
6477: LD_INT 3
6479: PUSH
6480: LD_INT 0
6482: PUSH
6483: LD_INT 0
6485: PUSH
6486: EMPTY
6487: LIST
6488: LIST
6489: LIST
6490: LIST
6491: LIST
6492: LIST
6493: PUSH
6494: LD_INT 32
6496: PUSH
6497: LD_INT 159
6499: PUSH
6500: LD_INT 104
6502: PUSH
6503: LD_INT 3
6505: PUSH
6506: LD_INT 0
6508: PUSH
6509: LD_INT 0
6511: PUSH
6512: EMPTY
6513: LIST
6514: LIST
6515: LIST
6516: LIST
6517: LIST
6518: LIST
6519: PUSH
6520: LD_INT 32
6522: PUSH
6523: LD_INT 133
6525: PUSH
6526: LD_INT 95
6528: PUSH
6529: LD_INT 3
6531: PUSH
6532: LD_INT 0
6534: PUSH
6535: LD_INT 0
6537: PUSH
6538: EMPTY
6539: LIST
6540: LIST
6541: LIST
6542: LIST
6543: LIST
6544: LIST
6545: PUSH
6546: LD_INT 32
6548: PUSH
6549: LD_INT 131
6551: PUSH
6552: LD_INT 102
6554: PUSH
6555: LD_INT 2
6557: PUSH
6558: LD_INT 0
6560: PUSH
6561: LD_INT 0
6563: PUSH
6564: EMPTY
6565: LIST
6566: LIST
6567: LIST
6568: LIST
6569: LIST
6570: LIST
6571: PUSH
6572: LD_INT 32
6574: PUSH
6575: LD_INT 164
6577: PUSH
6578: LD_INT 144
6580: PUSH
6581: LD_INT 0
6583: PUSH
6584: LD_INT 0
6586: PUSH
6587: LD_INT 0
6589: PUSH
6590: EMPTY
6591: LIST
6592: LIST
6593: LIST
6594: LIST
6595: LIST
6596: LIST
6597: PUSH
6598: LD_INT 32
6600: PUSH
6601: LD_INT 146
6603: PUSH
6604: LD_INT 139
6606: PUSH
6607: LD_INT 0
6609: PUSH
6610: LD_INT 0
6612: PUSH
6613: LD_INT 0
6615: PUSH
6616: EMPTY
6617: LIST
6618: LIST
6619: LIST
6620: LIST
6621: LIST
6622: LIST
6623: PUSH
6624: LD_INT 26
6626: PUSH
6627: LD_INT 143
6629: PUSH
6630: LD_INT 122
6632: PUSH
6633: LD_INT 4
6635: PUSH
6636: LD_INT 0
6638: PUSH
6639: LD_INT 0
6641: PUSH
6642: EMPTY
6643: LIST
6644: LIST
6645: LIST
6646: LIST
6647: LIST
6648: LIST
6649: PUSH
6650: LD_INT 26
6652: PUSH
6653: LD_INT 164
6655: PUSH
6656: LD_INT 116
6658: PUSH
6659: LD_INT 2
6661: PUSH
6662: LD_INT 0
6664: PUSH
6665: LD_INT 0
6667: PUSH
6668: EMPTY
6669: LIST
6670: LIST
6671: LIST
6672: LIST
6673: LIST
6674: LIST
6675: PUSH
6676: EMPTY
6677: LIST
6678: LIST
6679: LIST
6680: LIST
6681: LIST
6682: LIST
6683: LIST
6684: LIST
6685: LIST
6686: LIST
6687: LIST
6688: LIST
6689: LIST
6690: LIST
6691: LIST
6692: LIST
6693: LIST
6694: LIST
6695: LIST
6696: LIST
6697: LIST
6698: LIST
6699: LIST
6700: LIST
6701: LIST
6702: ST_TO_ADDR
// for i in tmp do
6703: LD_ADDR_VAR 0 2
6707: PUSH
6708: LD_VAR 0 5
6712: PUSH
6713: FOR_IN
6714: IFFALSE 6945
// begin uc_side := side ;
6716: LD_ADDR_OWVAR 20
6720: PUSH
6721: LD_VAR 0 8
6725: ST_TO_ADDR
// uc_nation := nation_arabian ;
6726: LD_ADDR_OWVAR 21
6730: PUSH
6731: LD_INT 2
6733: ST_TO_ADDR
// bc_type := i [ 1 ] ;
6734: LD_ADDR_OWVAR 42
6738: PUSH
6739: LD_VAR 0 2
6743: PUSH
6744: LD_INT 1
6746: ARRAY
6747: ST_TO_ADDR
// bc_level := rand ( 5 , 6 ) ;
6748: LD_ADDR_OWVAR 43
6752: PUSH
6753: LD_INT 5
6755: PPUSH
6756: LD_INT 6
6758: PPUSH
6759: CALL_OW 12
6763: ST_TO_ADDR
// bc_kind1 := i [ 5 ] ;
6764: LD_ADDR_OWVAR 44
6768: PUSH
6769: LD_VAR 0 2
6773: PUSH
6774: LD_INT 5
6776: ARRAY
6777: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
6778: LD_ADDR_OWVAR 45
6782: PUSH
6783: LD_VAR 0 2
6787: PUSH
6788: LD_INT 6
6790: ARRAY
6791: ST_TO_ADDR
// sr := 0 ;
6792: LD_ADDR_VAR 0 9
6796: PUSH
6797: LD_INT 0
6799: ST_TO_ADDR
// if i [ 1 ] = b_oil_mine then
6800: LD_VAR 0 2
6804: PUSH
6805: LD_INT 1
6807: ARRAY
6808: PUSH
6809: LD_INT 29
6811: EQUAL
6812: IFFALSE 6824
// sr := mat_oil else
6814: LD_ADDR_VAR 0 9
6818: PUSH
6819: LD_INT 2
6821: ST_TO_ADDR
6822: GO 6846
// if i [ 1 ] = b_siberite_mine then
6824: LD_VAR 0 2
6828: PUSH
6829: LD_INT 1
6831: ARRAY
6832: PUSH
6833: LD_INT 30
6835: EQUAL
6836: IFFALSE 6846
// sr := mat_siberit ;
6838: LD_ADDR_VAR 0 9
6842: PUSH
6843: LD_INT 3
6845: ST_TO_ADDR
// if sr then
6846: LD_VAR 0 9
6850: IFFALSE 6906
// begin CreateDepositXY ( i [ 2 ] , i [ 3 ] , sr ) ;
6852: LD_VAR 0 2
6856: PUSH
6857: LD_INT 2
6859: ARRAY
6860: PPUSH
6861: LD_VAR 0 2
6865: PUSH
6866: LD_INT 3
6868: ARRAY
6869: PPUSH
6870: LD_VAR 0 9
6874: PPUSH
6875: CALL_OW 62
// SetResourceVisibility ( i [ 2 ] , i [ 3 ] , side ) ;
6879: LD_VAR 0 2
6883: PUSH
6884: LD_INT 2
6886: ARRAY
6887: PPUSH
6888: LD_VAR 0 2
6892: PUSH
6893: LD_INT 3
6895: ARRAY
6896: PPUSH
6897: LD_VAR 0 8
6901: PPUSH
6902: CALL_OW 441
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
6906: LD_ADDR_VAR 0 3
6910: PUSH
6911: LD_VAR 0 2
6915: PUSH
6916: LD_INT 2
6918: ARRAY
6919: PPUSH
6920: LD_VAR 0 2
6924: PUSH
6925: LD_INT 3
6927: ARRAY
6928: PPUSH
6929: LD_VAR 0 2
6933: PUSH
6934: LD_INT 4
6936: ARRAY
6937: PPUSH
6938: CALL_OW 47
6942: ST_TO_ADDR
// end ;
6943: GO 6713
6945: POP
6946: POP
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
6947: LD_ADDR_VAR 0 10
6951: PUSH
6952: LD_INT 22
6954: PUSH
6955: LD_VAR 0 8
6959: PUSH
6960: EMPTY
6961: LIST
6962: LIST
6963: PUSH
6964: LD_INT 30
6966: PUSH
6967: LD_INT 1
6969: PUSH
6970: EMPTY
6971: LIST
6972: LIST
6973: PUSH
6974: EMPTY
6975: LIST
6976: LIST
6977: PPUSH
6978: CALL_OW 69
6982: ST_TO_ADDR
// if not depot then
6983: LD_VAR 0 10
6987: NOT
6988: IFFALSE 6992
// exit ;
6990: GO 7238
// base := PrepareBase ( depot [ 1 ] , legBase , 0 , [ 7 , 8 , 10 ] [ Difficulty ] , [ 3000 , 300 , 100 ] , [ 14 , 6 , 6 , 5 ] ) ;
6992: LD_ADDR_VAR 0 11
6996: PUSH
6997: LD_VAR 0 10
7001: PUSH
7002: LD_INT 1
7004: ARRAY
7005: PPUSH
7006: LD_INT 6
7008: PPUSH
7009: LD_INT 0
7011: PPUSH
7012: LD_INT 7
7014: PUSH
7015: LD_INT 8
7017: PUSH
7018: LD_INT 10
7020: PUSH
7021: EMPTY
7022: LIST
7023: LIST
7024: LIST
7025: PUSH
7026: LD_OWVAR 67
7030: ARRAY
7031: PPUSH
7032: LD_INT 3000
7034: PUSH
7035: LD_INT 300
7037: PUSH
7038: LD_INT 100
7040: PUSH
7041: EMPTY
7042: LIST
7043: LIST
7044: LIST
7045: PPUSH
7046: LD_INT 14
7048: PUSH
7049: LD_INT 6
7051: PUSH
7052: LD_INT 6
7054: PUSH
7055: LD_INT 5
7057: PUSH
7058: EMPTY
7059: LIST
7060: LIST
7061: LIST
7062: LIST
7063: PPUSH
7064: CALL 27581 0 6
7068: ST_TO_ADDR
// if not base then
7069: LD_VAR 0 11
7073: NOT
7074: IFFALSE 7078
// exit ;
7076: GO 7238
// if Difficulty > 1 then
7078: LD_OWVAR 67
7082: PUSH
7083: LD_INT 1
7085: GREATER
7086: IFFALSE 7159
// begin InitHc ;
7088: CALL_OW 19
// PrepareHuman ( sex_male , class_sniper , [ 5 , 8 ] [ Difficulty - 1 ] ) ;
7092: LD_INT 1
7094: PPUSH
7095: LD_INT 5
7097: PPUSH
7098: LD_INT 5
7100: PUSH
7101: LD_INT 8
7103: PUSH
7104: EMPTY
7105: LIST
7106: LIST
7107: PUSH
7108: LD_OWVAR 67
7112: PUSH
7113: LD_INT 1
7115: MINUS
7116: ARRAY
7117: PPUSH
7118: CALL_OW 380
// for i = 1 to Difficulty do
7122: LD_ADDR_VAR 0 2
7126: PUSH
7127: DOUBLE
7128: LD_INT 1
7130: DEC
7131: ST_TO_ADDR
7132: LD_OWVAR 67
7136: PUSH
7137: FOR_TO
7138: IFFALSE 7157
// PlaceUnitArea ( CreateHuman , sniperGuardArea , false ) ;
7140: CALL_OW 44
7144: PPUSH
7145: LD_INT 24
7147: PPUSH
7148: LD_INT 0
7150: PPUSH
7151: CALL_OW 49
7155: GO 7137
7157: POP
7158: POP
// end ; mc_bases := Replace ( mc_bases , mc_leg , base ) ;
7159: LD_ADDR_EXP 46
7163: PUSH
7164: LD_EXP 46
7168: PPUSH
7169: LD_EXP 6
7173: PPUSH
7174: LD_VAR 0 11
7178: PPUSH
7179: CALL_OW 1
7183: ST_TO_ADDR
// hc_gallery := ru ;
7184: LD_ADDR_OWVAR 33
7188: PUSH
7189: LD_STRING ru
7191: ST_TO_ADDR
// hc_face_number := 44 ;
7192: LD_ADDR_OWVAR 34
7196: PUSH
7197: LD_INT 44
7199: ST_TO_ADDR
// hc_name := Robert Farmer ;
7200: LD_ADDR_OWVAR 26
7204: PUSH
7205: LD_STRING Robert Farmer
7207: ST_TO_ADDR
// hc_sex := sex_male ;
7208: LD_ADDR_OWVAR 27
7212: PUSH
7213: LD_INT 1
7215: ST_TO_ADDR
// hc_class := 1 ;
7216: LD_ADDR_OWVAR 28
7220: PUSH
7221: LD_INT 1
7223: ST_TO_ADDR
// Farmer := CreateHuman ;
7224: LD_ADDR_EXP 13
7228: PUSH
7229: CALL_OW 44
7233: ST_TO_ADDR
// InitHc ;
7234: CALL_OW 19
// end ;
7238: LD_VAR 0 1
7242: RET
// export function PrepareAmericans ; var i , b , tmp , side , sr , base , depot ; begin
7243: LD_INT 0
7245: PPUSH
7246: PPUSH
7247: PPUSH
7248: PPUSH
7249: PPUSH
7250: PPUSH
7251: PPUSH
7252: PPUSH
// PrepareNature ( 0 , 0 , 4 , 0 , 0 , 0 , 0 , amerApe , 0 ) ;
7253: LD_INT 0
7255: PPUSH
7256: LD_INT 0
7258: PPUSH
7259: LD_INT 4
7261: PPUSH
7262: LD_INT 0
7264: PPUSH
7265: LD_INT 0
7267: PPUSH
7268: LD_INT 0
7270: PPUSH
7271: LD_INT 0
7273: PPUSH
7274: LD_INT 10
7276: PPUSH
7277: LD_INT 0
7279: PPUSH
7280: CALL 51963 0 9
// side := 4 ;
7284: LD_ADDR_VAR 0 5
7288: PUSH
7289: LD_INT 4
7291: ST_TO_ADDR
// tmp := [ [ 1 , 144 , 18 , 4 , 0 , 0 ] , [ 3 , 137 , 8 , 4 , 0 , 0 ] , [ 22 , 141 , 8 , 4 , 0 , 0 ] , [ 25 , 137 , 5 , 3 , 0 , 0 ] , [ 18 , 137 , 12 , 0 , 0 , 0 ] , [ 17 , 133 , 4 , 2 , 0 , 0 ] , [ 16 , 140 , 11 , 5 , 0 , 0 ] , [ 8 , 149 , 26 , 4 , 10 , 15 ] , [ 8 , 142 , 26 , 1 , 11 , 12 ] , [ 27 , 153 , 32 , 5 , 0 , 0 ] , [ 27 , 145 , 32 , 3 , 0 , 0 ] , [ 27 , 138 , 2 , 4 , 0 , 0 ] , [ 27 , 144 , 13 , 0 , 0 , 0 ] , [ 26 , 124 , 2 , 4 , 0 , 0 ] , [ 26 , 121 , 2 , 2 , 0 , 0 ] , [ 26 , 118 , 2 , 1 , 0 , 0 ] , [ 29 , 159 , 47 , 2 , 0 , 0 ] , [ 32 , 146 , 41 , 0 , 0 , 0 ] , [ 33 , 136 , 37 , 0 , 0 , 0 ] , [ 33 , 132 , 34 , 0 , 0 , 0 ] , [ 36 , 124 , 7 , 1 , 0 , 0 ] , [ 5 , 124 , 19 , 0 , 0 , 0 ] , [ 32 , 127 , 23 , 0 , 0 , 0 ] ] ;
7292: LD_ADDR_VAR 0 4
7296: PUSH
7297: LD_INT 1
7299: PUSH
7300: LD_INT 144
7302: PUSH
7303: LD_INT 18
7305: PUSH
7306: LD_INT 4
7308: PUSH
7309: LD_INT 0
7311: PUSH
7312: LD_INT 0
7314: PUSH
7315: EMPTY
7316: LIST
7317: LIST
7318: LIST
7319: LIST
7320: LIST
7321: LIST
7322: PUSH
7323: LD_INT 3
7325: PUSH
7326: LD_INT 137
7328: PUSH
7329: LD_INT 8
7331: PUSH
7332: LD_INT 4
7334: PUSH
7335: LD_INT 0
7337: PUSH
7338: LD_INT 0
7340: PUSH
7341: EMPTY
7342: LIST
7343: LIST
7344: LIST
7345: LIST
7346: LIST
7347: LIST
7348: PUSH
7349: LD_INT 22
7351: PUSH
7352: LD_INT 141
7354: PUSH
7355: LD_INT 8
7357: PUSH
7358: LD_INT 4
7360: PUSH
7361: LD_INT 0
7363: PUSH
7364: LD_INT 0
7366: PUSH
7367: EMPTY
7368: LIST
7369: LIST
7370: LIST
7371: LIST
7372: LIST
7373: LIST
7374: PUSH
7375: LD_INT 25
7377: PUSH
7378: LD_INT 137
7380: PUSH
7381: LD_INT 5
7383: PUSH
7384: LD_INT 3
7386: PUSH
7387: LD_INT 0
7389: PUSH
7390: LD_INT 0
7392: PUSH
7393: EMPTY
7394: LIST
7395: LIST
7396: LIST
7397: LIST
7398: LIST
7399: LIST
7400: PUSH
7401: LD_INT 18
7403: PUSH
7404: LD_INT 137
7406: PUSH
7407: LD_INT 12
7409: PUSH
7410: LD_INT 0
7412: PUSH
7413: LD_INT 0
7415: PUSH
7416: LD_INT 0
7418: PUSH
7419: EMPTY
7420: LIST
7421: LIST
7422: LIST
7423: LIST
7424: LIST
7425: LIST
7426: PUSH
7427: LD_INT 17
7429: PUSH
7430: LD_INT 133
7432: PUSH
7433: LD_INT 4
7435: PUSH
7436: LD_INT 2
7438: PUSH
7439: LD_INT 0
7441: PUSH
7442: LD_INT 0
7444: PUSH
7445: EMPTY
7446: LIST
7447: LIST
7448: LIST
7449: LIST
7450: LIST
7451: LIST
7452: PUSH
7453: LD_INT 16
7455: PUSH
7456: LD_INT 140
7458: PUSH
7459: LD_INT 11
7461: PUSH
7462: LD_INT 5
7464: PUSH
7465: LD_INT 0
7467: PUSH
7468: LD_INT 0
7470: PUSH
7471: EMPTY
7472: LIST
7473: LIST
7474: LIST
7475: LIST
7476: LIST
7477: LIST
7478: PUSH
7479: LD_INT 8
7481: PUSH
7482: LD_INT 149
7484: PUSH
7485: LD_INT 26
7487: PUSH
7488: LD_INT 4
7490: PUSH
7491: LD_INT 10
7493: PUSH
7494: LD_INT 15
7496: PUSH
7497: EMPTY
7498: LIST
7499: LIST
7500: LIST
7501: LIST
7502: LIST
7503: LIST
7504: PUSH
7505: LD_INT 8
7507: PUSH
7508: LD_INT 142
7510: PUSH
7511: LD_INT 26
7513: PUSH
7514: LD_INT 1
7516: PUSH
7517: LD_INT 11
7519: PUSH
7520: LD_INT 12
7522: PUSH
7523: EMPTY
7524: LIST
7525: LIST
7526: LIST
7527: LIST
7528: LIST
7529: LIST
7530: PUSH
7531: LD_INT 27
7533: PUSH
7534: LD_INT 153
7536: PUSH
7537: LD_INT 32
7539: PUSH
7540: LD_INT 5
7542: PUSH
7543: LD_INT 0
7545: PUSH
7546: LD_INT 0
7548: PUSH
7549: EMPTY
7550: LIST
7551: LIST
7552: LIST
7553: LIST
7554: LIST
7555: LIST
7556: PUSH
7557: LD_INT 27
7559: PUSH
7560: LD_INT 145
7562: PUSH
7563: LD_INT 32
7565: PUSH
7566: LD_INT 3
7568: PUSH
7569: LD_INT 0
7571: PUSH
7572: LD_INT 0
7574: PUSH
7575: EMPTY
7576: LIST
7577: LIST
7578: LIST
7579: LIST
7580: LIST
7581: LIST
7582: PUSH
7583: LD_INT 27
7585: PUSH
7586: LD_INT 138
7588: PUSH
7589: LD_INT 2
7591: PUSH
7592: LD_INT 4
7594: PUSH
7595: LD_INT 0
7597: PUSH
7598: LD_INT 0
7600: PUSH
7601: EMPTY
7602: LIST
7603: LIST
7604: LIST
7605: LIST
7606: LIST
7607: LIST
7608: PUSH
7609: LD_INT 27
7611: PUSH
7612: LD_INT 144
7614: PUSH
7615: LD_INT 13
7617: PUSH
7618: LD_INT 0
7620: PUSH
7621: LD_INT 0
7623: PUSH
7624: LD_INT 0
7626: PUSH
7627: EMPTY
7628: LIST
7629: LIST
7630: LIST
7631: LIST
7632: LIST
7633: LIST
7634: PUSH
7635: LD_INT 26
7637: PUSH
7638: LD_INT 124
7640: PUSH
7641: LD_INT 2
7643: PUSH
7644: LD_INT 4
7646: PUSH
7647: LD_INT 0
7649: PUSH
7650: LD_INT 0
7652: PUSH
7653: EMPTY
7654: LIST
7655: LIST
7656: LIST
7657: LIST
7658: LIST
7659: LIST
7660: PUSH
7661: LD_INT 26
7663: PUSH
7664: LD_INT 121
7666: PUSH
7667: LD_INT 2
7669: PUSH
7670: LD_INT 2
7672: PUSH
7673: LD_INT 0
7675: PUSH
7676: LD_INT 0
7678: PUSH
7679: EMPTY
7680: LIST
7681: LIST
7682: LIST
7683: LIST
7684: LIST
7685: LIST
7686: PUSH
7687: LD_INT 26
7689: PUSH
7690: LD_INT 118
7692: PUSH
7693: LD_INT 2
7695: PUSH
7696: LD_INT 1
7698: PUSH
7699: LD_INT 0
7701: PUSH
7702: LD_INT 0
7704: PUSH
7705: EMPTY
7706: LIST
7707: LIST
7708: LIST
7709: LIST
7710: LIST
7711: LIST
7712: PUSH
7713: LD_INT 29
7715: PUSH
7716: LD_INT 159
7718: PUSH
7719: LD_INT 47
7721: PUSH
7722: LD_INT 2
7724: PUSH
7725: LD_INT 0
7727: PUSH
7728: LD_INT 0
7730: PUSH
7731: EMPTY
7732: LIST
7733: LIST
7734: LIST
7735: LIST
7736: LIST
7737: LIST
7738: PUSH
7739: LD_INT 32
7741: PUSH
7742: LD_INT 146
7744: PUSH
7745: LD_INT 41
7747: PUSH
7748: LD_INT 0
7750: PUSH
7751: LD_INT 0
7753: PUSH
7754: LD_INT 0
7756: PUSH
7757: EMPTY
7758: LIST
7759: LIST
7760: LIST
7761: LIST
7762: LIST
7763: LIST
7764: PUSH
7765: LD_INT 33
7767: PUSH
7768: LD_INT 136
7770: PUSH
7771: LD_INT 37
7773: PUSH
7774: LD_INT 0
7776: PUSH
7777: LD_INT 0
7779: PUSH
7780: LD_INT 0
7782: PUSH
7783: EMPTY
7784: LIST
7785: LIST
7786: LIST
7787: LIST
7788: LIST
7789: LIST
7790: PUSH
7791: LD_INT 33
7793: PUSH
7794: LD_INT 132
7796: PUSH
7797: LD_INT 34
7799: PUSH
7800: LD_INT 0
7802: PUSH
7803: LD_INT 0
7805: PUSH
7806: LD_INT 0
7808: PUSH
7809: EMPTY
7810: LIST
7811: LIST
7812: LIST
7813: LIST
7814: LIST
7815: LIST
7816: PUSH
7817: LD_INT 36
7819: PUSH
7820: LD_INT 124
7822: PUSH
7823: LD_INT 7
7825: PUSH
7826: LD_INT 1
7828: PUSH
7829: LD_INT 0
7831: PUSH
7832: LD_INT 0
7834: PUSH
7835: EMPTY
7836: LIST
7837: LIST
7838: LIST
7839: LIST
7840: LIST
7841: LIST
7842: PUSH
7843: LD_INT 5
7845: PUSH
7846: LD_INT 124
7848: PUSH
7849: LD_INT 19
7851: PUSH
7852: LD_INT 0
7854: PUSH
7855: LD_INT 0
7857: PUSH
7858: LD_INT 0
7860: PUSH
7861: EMPTY
7862: LIST
7863: LIST
7864: LIST
7865: LIST
7866: LIST
7867: LIST
7868: PUSH
7869: LD_INT 32
7871: PUSH
7872: LD_INT 127
7874: PUSH
7875: LD_INT 23
7877: PUSH
7878: LD_INT 0
7880: PUSH
7881: LD_INT 0
7883: PUSH
7884: LD_INT 0
7886: PUSH
7887: EMPTY
7888: LIST
7889: LIST
7890: LIST
7891: LIST
7892: LIST
7893: LIST
7894: PUSH
7895: EMPTY
7896: LIST
7897: LIST
7898: LIST
7899: LIST
7900: LIST
7901: LIST
7902: LIST
7903: LIST
7904: LIST
7905: LIST
7906: LIST
7907: LIST
7908: LIST
7909: LIST
7910: LIST
7911: LIST
7912: LIST
7913: LIST
7914: LIST
7915: LIST
7916: LIST
7917: LIST
7918: LIST
7919: ST_TO_ADDR
// for i in tmp do
7920: LD_ADDR_VAR 0 2
7924: PUSH
7925: LD_VAR 0 4
7929: PUSH
7930: FOR_IN
7931: IFFALSE 8162
// begin uc_side := side ;
7933: LD_ADDR_OWVAR 20
7937: PUSH
7938: LD_VAR 0 5
7942: ST_TO_ADDR
// uc_nation := nation_american ;
7943: LD_ADDR_OWVAR 21
7947: PUSH
7948: LD_INT 1
7950: ST_TO_ADDR
// bc_type := i [ 1 ] ;
7951: LD_ADDR_OWVAR 42
7955: PUSH
7956: LD_VAR 0 2
7960: PUSH
7961: LD_INT 1
7963: ARRAY
7964: ST_TO_ADDR
// bc_level := rand ( 5 , 6 ) ;
7965: LD_ADDR_OWVAR 43
7969: PUSH
7970: LD_INT 5
7972: PPUSH
7973: LD_INT 6
7975: PPUSH
7976: CALL_OW 12
7980: ST_TO_ADDR
// bc_kind1 := i [ 5 ] ;
7981: LD_ADDR_OWVAR 44
7985: PUSH
7986: LD_VAR 0 2
7990: PUSH
7991: LD_INT 5
7993: ARRAY
7994: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
7995: LD_ADDR_OWVAR 45
7999: PUSH
8000: LD_VAR 0 2
8004: PUSH
8005: LD_INT 6
8007: ARRAY
8008: ST_TO_ADDR
// sr := 0 ;
8009: LD_ADDR_VAR 0 6
8013: PUSH
8014: LD_INT 0
8016: ST_TO_ADDR
// if i [ 1 ] = b_oil_mine then
8017: LD_VAR 0 2
8021: PUSH
8022: LD_INT 1
8024: ARRAY
8025: PUSH
8026: LD_INT 29
8028: EQUAL
8029: IFFALSE 8041
// sr := mat_oil else
8031: LD_ADDR_VAR 0 6
8035: PUSH
8036: LD_INT 2
8038: ST_TO_ADDR
8039: GO 8063
// if i [ 1 ] = b_siberite_mine then
8041: LD_VAR 0 2
8045: PUSH
8046: LD_INT 1
8048: ARRAY
8049: PUSH
8050: LD_INT 30
8052: EQUAL
8053: IFFALSE 8063
// sr := mat_siberit ;
8055: LD_ADDR_VAR 0 6
8059: PUSH
8060: LD_INT 3
8062: ST_TO_ADDR
// if sr then
8063: LD_VAR 0 6
8067: IFFALSE 8123
// begin CreateDepositXY ( i [ 2 ] , i [ 3 ] , sr ) ;
8069: LD_VAR 0 2
8073: PUSH
8074: LD_INT 2
8076: ARRAY
8077: PPUSH
8078: LD_VAR 0 2
8082: PUSH
8083: LD_INT 3
8085: ARRAY
8086: PPUSH
8087: LD_VAR 0 6
8091: PPUSH
8092: CALL_OW 62
// SetResourceVisibility ( i [ 2 ] , i [ 3 ] , side ) ;
8096: LD_VAR 0 2
8100: PUSH
8101: LD_INT 2
8103: ARRAY
8104: PPUSH
8105: LD_VAR 0 2
8109: PUSH
8110: LD_INT 3
8112: ARRAY
8113: PPUSH
8114: LD_VAR 0 5
8118: PPUSH
8119: CALL_OW 441
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
8123: LD_ADDR_VAR 0 3
8127: PUSH
8128: LD_VAR 0 2
8132: PUSH
8133: LD_INT 2
8135: ARRAY
8136: PPUSH
8137: LD_VAR 0 2
8141: PUSH
8142: LD_INT 3
8144: ARRAY
8145: PPUSH
8146: LD_VAR 0 2
8150: PUSH
8151: LD_INT 4
8153: ARRAY
8154: PPUSH
8155: CALL_OW 47
8159: ST_TO_ADDR
// end ;
8160: GO 7930
8162: POP
8163: POP
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
8164: LD_ADDR_VAR 0 8
8168: PUSH
8169: LD_INT 22
8171: PUSH
8172: LD_VAR 0 5
8176: PUSH
8177: EMPTY
8178: LIST
8179: LIST
8180: PUSH
8181: LD_INT 30
8183: PUSH
8184: LD_INT 1
8186: PUSH
8187: EMPTY
8188: LIST
8189: LIST
8190: PUSH
8191: EMPTY
8192: LIST
8193: LIST
8194: PPUSH
8195: CALL_OW 69
8199: ST_TO_ADDR
// if not depot then
8200: LD_VAR 0 8
8204: NOT
8205: IFFALSE 8209
// exit ;
8207: GO 8481
// base := PrepareBase ( depot [ 1 ] , amerBase , theta3 , [ 8 , 7 , 6 ] [ Difficulty ] , [ [ 2500 , 2000 , 1750 ] [ Difficulty ] , [ 300 , 250 , 200 ] [ Difficulty ] , [ 80 , 60 , 50 ] [ Difficulty ] ] , [ 7 , 6 , 5 , 5 ] ) ;
8209: LD_ADDR_VAR 0 7
8213: PUSH
8214: LD_VAR 0 8
8218: PUSH
8219: LD_INT 1
8221: ARRAY
8222: PPUSH
8223: LD_INT 3
8225: PPUSH
8226: LD_STRING theta3
8228: PPUSH
8229: LD_INT 8
8231: PUSH
8232: LD_INT 7
8234: PUSH
8235: LD_INT 6
8237: PUSH
8238: EMPTY
8239: LIST
8240: LIST
8241: LIST
8242: PUSH
8243: LD_OWVAR 67
8247: ARRAY
8248: PPUSH
8249: LD_INT 2500
8251: PUSH
8252: LD_INT 2000
8254: PUSH
8255: LD_INT 1750
8257: PUSH
8258: EMPTY
8259: LIST
8260: LIST
8261: LIST
8262: PUSH
8263: LD_OWVAR 67
8267: ARRAY
8268: PUSH
8269: LD_INT 300
8271: PUSH
8272: LD_INT 250
8274: PUSH
8275: LD_INT 200
8277: PUSH
8278: EMPTY
8279: LIST
8280: LIST
8281: LIST
8282: PUSH
8283: LD_OWVAR 67
8287: ARRAY
8288: PUSH
8289: LD_INT 80
8291: PUSH
8292: LD_INT 60
8294: PUSH
8295: LD_INT 50
8297: PUSH
8298: EMPTY
8299: LIST
8300: LIST
8301: LIST
8302: PUSH
8303: LD_OWVAR 67
8307: ARRAY
8308: PUSH
8309: EMPTY
8310: LIST
8311: LIST
8312: LIST
8313: PPUSH
8314: LD_INT 7
8316: PUSH
8317: LD_INT 6
8319: PUSH
8320: LD_INT 5
8322: PUSH
8323: LD_INT 5
8325: PUSH
8326: EMPTY
8327: LIST
8328: LIST
8329: LIST
8330: LIST
8331: PPUSH
8332: CALL 27581 0 6
8336: ST_TO_ADDR
// if not base then
8337: LD_VAR 0 7
8341: NOT
8342: IFFALSE 8346
// exit ;
8344: GO 8481
// mc_bases := Replace ( mc_bases , mc_amer , base ) ;
8346: LD_ADDR_EXP 46
8350: PUSH
8351: LD_EXP 46
8355: PPUSH
8356: LD_EXP 5
8360: PPUSH
8361: LD_VAR 0 7
8365: PPUSH
8366: CALL_OW 1
8370: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 7 ) ;
8371: LD_INT 1
8373: PPUSH
8374: LD_INT 1
8376: PPUSH
8377: LD_INT 7
8379: PPUSH
8380: CALL_OW 380
// allyCommander := CreateHuman ;
8384: LD_ADDR_EXP 11
8388: PUSH
8389: CALL_OW 44
8393: ST_TO_ADDR
// PlaceUnitXY ( allyCommander , 139 , 15 , false ) ;
8394: LD_EXP 11
8398: PPUSH
8399: LD_INT 139
8401: PPUSH
8402: LD_INT 15
8404: PPUSH
8405: LD_INT 0
8407: PPUSH
8408: CALL_OW 48
// ComTurnXY ( allyCommander , 137 , 15 ) ;
8412: LD_EXP 11
8416: PPUSH
8417: LD_INT 137
8419: PPUSH
8420: LD_INT 15
8422: PPUSH
8423: CALL_OW 118
// hc_gallery := us ;
8427: LD_ADDR_OWVAR 33
8431: PUSH
8432: LD_STRING us
8434: ST_TO_ADDR
// hc_face_number := 7 ;
8435: LD_ADDR_OWVAR 34
8439: PUSH
8440: LD_INT 7
8442: ST_TO_ADDR
// hc_name := Arthur Powell ;
8443: LD_ADDR_OWVAR 26
8447: PUSH
8448: LD_STRING Arthur Powell
8450: ST_TO_ADDR
// hc_sex := sex_male ;
8451: LD_ADDR_OWVAR 27
8455: PUSH
8456: LD_INT 1
8458: ST_TO_ADDR
// hc_class := 1 ;
8459: LD_ADDR_OWVAR 28
8463: PUSH
8464: LD_INT 1
8466: ST_TO_ADDR
// Powell := CreateHuman ;
8467: LD_ADDR_EXP 12
8471: PUSH
8472: CALL_OW 44
8476: ST_TO_ADDR
// InitHc ;
8477: CALL_OW 19
// end ;
8481: LD_VAR 0 1
8485: RET
// export function PreparePlayer ; var i , side , techs , tanks , cl , chassis , engines , weapons ; begin
8486: LD_INT 0
8488: PPUSH
8489: PPUSH
8490: PPUSH
8491: PPUSH
8492: PPUSH
8493: PPUSH
8494: PPUSH
8495: PPUSH
8496: PPUSH
// side := 1 ;
8497: LD_ADDR_VAR 0 3
8501: PUSH
8502: LD_INT 1
8504: ST_TO_ADDR
// result := [ [ ] , [ ] ] ;
8505: LD_ADDR_VAR 0 1
8509: PUSH
8510: EMPTY
8511: PUSH
8512: EMPTY
8513: PUSH
8514: EMPTY
8515: LIST
8516: LIST
8517: ST_TO_ADDR
// uc_side := side ;
8518: LD_ADDR_OWVAR 20
8522: PUSH
8523: LD_VAR 0 3
8527: ST_TO_ADDR
// uc_nation := nation_american ;
8528: LD_ADDR_OWVAR 21
8532: PUSH
8533: LD_INT 1
8535: ST_TO_ADDR
// InitHc ;
8536: CALL_OW 19
// InitVc ;
8540: CALL_OW 20
// hc_importance := 0 ;
8544: LD_ADDR_OWVAR 32
8548: PUSH
8549: LD_INT 0
8551: ST_TO_ADDR
// chassis := [ us_medium_wheeled , us_medium_tracked , us_medium_tracked ] ;
8552: LD_ADDR_VAR 0 7
8556: PUSH
8557: LD_INT 2
8559: PUSH
8560: LD_INT 3
8562: PUSH
8563: LD_INT 3
8565: PUSH
8566: EMPTY
8567: LIST
8568: LIST
8569: LIST
8570: ST_TO_ADDR
// if commander = 2 then
8571: LD_EXP 25
8575: PUSH
8576: LD_INT 2
8578: EQUAL
8579: IFFALSE 8600
// chassis := [ us_medium_tracked , us_heavy_tracked , us_heavy_tracked ] ;
8581: LD_ADDR_VAR 0 7
8585: PUSH
8586: LD_INT 3
8588: PUSH
8589: LD_INT 4
8591: PUSH
8592: LD_INT 4
8594: PUSH
8595: EMPTY
8596: LIST
8597: LIST
8598: LIST
8599: ST_TO_ADDR
// if commander = 3 then
8600: LD_EXP 25
8604: PUSH
8605: LD_INT 3
8607: EQUAL
8608: IFFALSE 8629
// chassis := [ us_medium_wheeled , us_morphling , us_morphling ] ;
8610: LD_ADDR_VAR 0 7
8614: PUSH
8615: LD_INT 2
8617: PUSH
8618: LD_INT 5
8620: PUSH
8621: LD_INT 5
8623: PUSH
8624: EMPTY
8625: LIST
8626: LIST
8627: LIST
8628: ST_TO_ADDR
// engines := [ engine_solar , engine_solar , engine_combustion ] ;
8629: LD_ADDR_VAR 0 8
8633: PUSH
8634: LD_INT 2
8636: PUSH
8637: LD_INT 2
8639: PUSH
8640: LD_INT 1
8642: PUSH
8643: EMPTY
8644: LIST
8645: LIST
8646: LIST
8647: ST_TO_ADDR
// if commander = 2 then
8648: LD_EXP 25
8652: PUSH
8653: LD_INT 2
8655: EQUAL
8656: IFFALSE 8677
// engines := [ engine_combustion , engine_combustion , engine_siberite ] ;
8658: LD_ADDR_VAR 0 8
8662: PUSH
8663: LD_INT 1
8665: PUSH
8666: LD_INT 1
8668: PUSH
8669: LD_INT 3
8671: PUSH
8672: EMPTY
8673: LIST
8674: LIST
8675: LIST
8676: ST_TO_ADDR
// if commander = 3 then
8677: LD_EXP 25
8681: PUSH
8682: LD_INT 3
8684: EQUAL
8685: IFFALSE 8706
// engines := [ engine_siberite , engine_siberite , engine_combustion ] ;
8687: LD_ADDR_VAR 0 8
8691: PUSH
8692: LD_INT 3
8694: PUSH
8695: LD_INT 3
8697: PUSH
8698: LD_INT 1
8700: PUSH
8701: EMPTY
8702: LIST
8703: LIST
8704: LIST
8705: ST_TO_ADDR
// weapons := [ us_double_gun , us_light_gun , us_gatling_gun ] ;
8706: LD_ADDR_VAR 0 9
8710: PUSH
8711: LD_INT 5
8713: PUSH
8714: LD_INT 3
8716: PUSH
8717: LD_INT 4
8719: PUSH
8720: EMPTY
8721: LIST
8722: LIST
8723: LIST
8724: ST_TO_ADDR
// if commander = 2 then
8725: LD_EXP 25
8729: PUSH
8730: LD_INT 2
8732: EQUAL
8733: IFFALSE 8754
// weapons := [ us_rocket_launcher , us_double_gun , us_heavy_gun ] ;
8735: LD_ADDR_VAR 0 9
8739: PUSH
8740: LD_INT 7
8742: PUSH
8743: LD_INT 5
8745: PUSH
8746: LD_INT 6
8748: PUSH
8749: EMPTY
8750: LIST
8751: LIST
8752: LIST
8753: ST_TO_ADDR
// if commander = 3 then
8754: LD_EXP 25
8758: PUSH
8759: LD_INT 3
8761: EQUAL
8762: IFFALSE 8783
// weapons := [ us_laser , us_double_laser , us_rocket_launcher ] ;
8764: LD_ADDR_VAR 0 9
8768: PUSH
8769: LD_INT 9
8771: PUSH
8772: LD_INT 10
8774: PUSH
8775: LD_INT 7
8777: PUSH
8778: EMPTY
8779: LIST
8780: LIST
8781: LIST
8782: ST_TO_ADDR
// tanks := [ 5 , 5 , 4 ] [ Difficulty ] ;
8783: LD_ADDR_VAR 0 5
8787: PUSH
8788: LD_INT 5
8790: PUSH
8791: LD_INT 5
8793: PUSH
8794: LD_INT 4
8796: PUSH
8797: EMPTY
8798: LIST
8799: LIST
8800: LIST
8801: PUSH
8802: LD_OWVAR 67
8806: ARRAY
8807: ST_TO_ADDR
// if commander = 2 then
8808: LD_EXP 25
8812: PUSH
8813: LD_INT 2
8815: EQUAL
8816: IFFALSE 8832
// tanks := tanks + 3 ;
8818: LD_ADDR_VAR 0 5
8822: PUSH
8823: LD_VAR 0 5
8827: PUSH
8828: LD_INT 3
8830: PLUS
8831: ST_TO_ADDR
// for i = 1 to tanks do
8832: LD_ADDR_VAR 0 2
8836: PUSH
8837: DOUBLE
8838: LD_INT 1
8840: DEC
8841: ST_TO_ADDR
8842: LD_VAR 0 5
8846: PUSH
8847: FOR_TO
8848: IFFALSE 8958
// begin PrepareVehicle ( chassis [ i mod 3 + 1 ] , engines [ rand ( 1 , 3 ) ] , control_manual , weapons [ i mod 3 + 1 ] , rand ( 60 , 70 ) ) ;
8850: LD_VAR 0 7
8854: PUSH
8855: LD_VAR 0 2
8859: PUSH
8860: LD_INT 3
8862: MOD
8863: PUSH
8864: LD_INT 1
8866: PLUS
8867: ARRAY
8868: PPUSH
8869: LD_VAR 0 8
8873: PUSH
8874: LD_INT 1
8876: PPUSH
8877: LD_INT 3
8879: PPUSH
8880: CALL_OW 12
8884: ARRAY
8885: PPUSH
8886: LD_INT 1
8888: PPUSH
8889: LD_VAR 0 9
8893: PUSH
8894: LD_VAR 0 2
8898: PUSH
8899: LD_INT 3
8901: MOD
8902: PUSH
8903: LD_INT 1
8905: PLUS
8906: ARRAY
8907: PPUSH
8908: LD_INT 60
8910: PPUSH
8911: LD_INT 70
8913: PPUSH
8914: CALL_OW 12
8918: PPUSH
8919: CALL 24172 0 5
// result := Replace ( result , 1 , result [ 1 ] ^ CreateVehicle ) ;
8923: LD_ADDR_VAR 0 1
8927: PUSH
8928: LD_VAR 0 1
8932: PPUSH
8933: LD_INT 1
8935: PPUSH
8936: LD_VAR 0 1
8940: PUSH
8941: LD_INT 1
8943: ARRAY
8944: PUSH
8945: CALL_OW 45
8949: ADD
8950: PPUSH
8951: CALL_OW 1
8955: ST_TO_ADDR
// end ;
8956: GO 8847
8958: POP
8959: POP
// cl := 1 ;
8960: LD_ADDR_VAR 0 6
8964: PUSH
8965: LD_INT 1
8967: ST_TO_ADDR
// for i = 1 to 10 do
8968: LD_ADDR_VAR 0 2
8972: PUSH
8973: DOUBLE
8974: LD_INT 1
8976: DEC
8977: ST_TO_ADDR
8978: LD_INT 10
8980: PUSH
8981: FOR_TO
8982: IFFALSE 9097
// begin if i mod 4 = 0 then
8984: LD_VAR 0 2
8988: PUSH
8989: LD_INT 4
8991: MOD
8992: PUSH
8993: LD_INT 0
8995: EQUAL
8996: IFFALSE 9012
// cl := cl + 1 ;
8998: LD_ADDR_VAR 0 6
9002: PUSH
9003: LD_VAR 0 6
9007: PUSH
9008: LD_INT 1
9010: PLUS
9011: ST_TO_ADDR
// if cl = 2 then
9012: LD_VAR 0 6
9016: PUSH
9017: LD_INT 2
9019: EQUAL
9020: IFFALSE 9030
// cl := 3 ;
9022: LD_ADDR_VAR 0 6
9026: PUSH
9027: LD_INT 3
9029: ST_TO_ADDR
// PrepareHuman ( false , cl , [ 6 , 6 , 5 ] [ Difficulty ] ) ;
9030: LD_INT 0
9032: PPUSH
9033: LD_VAR 0 6
9037: PPUSH
9038: LD_INT 6
9040: PUSH
9041: LD_INT 6
9043: PUSH
9044: LD_INT 5
9046: PUSH
9047: EMPTY
9048: LIST
9049: LIST
9050: LIST
9051: PUSH
9052: LD_OWVAR 67
9056: ARRAY
9057: PPUSH
9058: CALL_OW 380
// result := Replace ( result , 2 , result [ 2 ] ^ CreateHuman ) ;
9062: LD_ADDR_VAR 0 1
9066: PUSH
9067: LD_VAR 0 1
9071: PPUSH
9072: LD_INT 2
9074: PPUSH
9075: LD_VAR 0 1
9079: PUSH
9080: LD_INT 2
9082: ARRAY
9083: PUSH
9084: CALL_OW 44
9088: ADD
9089: PPUSH
9090: CALL_OW 1
9094: ST_TO_ADDR
// end ;
9095: GO 8981
9097: POP
9098: POP
// if commander = 1 then
9099: LD_EXP 25
9103: PUSH
9104: LD_INT 1
9106: EQUAL
9107: IFFALSE 9175
// for i = 1 to 4 do
9109: LD_ADDR_VAR 0 2
9113: PUSH
9114: DOUBLE
9115: LD_INT 1
9117: DEC
9118: ST_TO_ADDR
9119: LD_INT 4
9121: PUSH
9122: FOR_TO
9123: IFFALSE 9173
// begin PrepareHuman ( false , class_soldier , 8 ) ;
9125: LD_INT 0
9127: PPUSH
9128: LD_INT 1
9130: PPUSH
9131: LD_INT 8
9133: PPUSH
9134: CALL_OW 380
// result := Replace ( result , 2 , result [ 2 ] ^ CreateHuman ) ;
9138: LD_ADDR_VAR 0 1
9142: PUSH
9143: LD_VAR 0 1
9147: PPUSH
9148: LD_INT 2
9150: PPUSH
9151: LD_VAR 0 1
9155: PUSH
9156: LD_INT 2
9158: ARRAY
9159: PUSH
9160: CALL_OW 44
9164: ADD
9165: PPUSH
9166: CALL_OW 1
9170: ST_TO_ADDR
// end ;
9171: GO 9122
9173: POP
9174: POP
// techs := [ ] ;
9175: LD_ADDR_VAR 0 4
9179: PUSH
9180: EMPTY
9181: ST_TO_ADDR
// if commander = 1 then
9182: LD_EXP 25
9186: PUSH
9187: LD_INT 1
9189: EQUAL
9190: IFFALSE 9215
// techs := [ tech_weap1 , tech_weap2 , tech_weap3 , tech_lasSight ] ;
9192: LD_ADDR_VAR 0 4
9196: PUSH
9197: LD_INT 51
9199: PUSH
9200: LD_INT 52
9202: PUSH
9203: LD_INT 53
9205: PUSH
9206: LD_INT 12
9208: PUSH
9209: EMPTY
9210: LIST
9211: LIST
9212: LIST
9213: LIST
9214: ST_TO_ADDR
// if commander = 2 then
9215: LD_EXP 25
9219: PUSH
9220: LD_INT 2
9222: EQUAL
9223: IFFALSE 9260
// techs := [ tech_tech1 , tech_oilEng , tech_oilPow , tech_solEng , tech_solPow , tech_opto1 , tech_radar ] ;
9225: LD_ADDR_VAR 0 4
9229: PUSH
9230: LD_INT 48
9232: PUSH
9233: LD_INT 47
9235: PUSH
9236: LD_INT 46
9238: PUSH
9239: LD_INT 45
9241: PUSH
9242: LD_INT 35
9244: PUSH
9245: LD_INT 60
9247: PUSH
9248: LD_INT 6
9250: PUSH
9251: EMPTY
9252: LIST
9253: LIST
9254: LIST
9255: LIST
9256: LIST
9257: LIST
9258: LIST
9259: ST_TO_ADDR
// if commander = 3 then
9260: LD_EXP 25
9264: PUSH
9265: LD_INT 3
9267: EQUAL
9268: IFFALSE 9317
// techs := [ tech_advAI , tech_advchassis , tech_ai , tech_comp1 , tech_comp2 , tech_oilEng , tech_oilPow , tech_weap1 , tech_gatling , tech_gun ] ;
9270: LD_ADDR_VAR 0 4
9274: PUSH
9275: LD_INT 27
9277: PUSH
9278: LD_INT 36
9280: PUSH
9281: LD_INT 32
9283: PUSH
9284: LD_INT 57
9286: PUSH
9287: LD_INT 58
9289: PUSH
9290: LD_INT 47
9292: PUSH
9293: LD_INT 46
9295: PUSH
9296: LD_INT 51
9298: PUSH
9299: LD_INT 69
9301: PUSH
9302: LD_INT 39
9304: PUSH
9305: EMPTY
9306: LIST
9307: LIST
9308: LIST
9309: LIST
9310: LIST
9311: LIST
9312: LIST
9313: LIST
9314: LIST
9315: LIST
9316: ST_TO_ADDR
// if techs then
9317: LD_VAR 0 4
9321: IFFALSE 9355
// for i in techs do
9323: LD_ADDR_VAR 0 2
9327: PUSH
9328: LD_VAR 0 4
9332: PUSH
9333: FOR_IN
9334: IFFALSE 9353
// SetTech ( i , 1 , state_researched ) ;
9336: LD_VAR 0 2
9340: PPUSH
9341: LD_INT 1
9343: PPUSH
9344: LD_INT 2
9346: PPUSH
9347: CALL_OW 322
9351: GO 9333
9353: POP
9354: POP
// hc_gallery := skirmish ;
9355: LD_ADDR_OWVAR 33
9359: PUSH
9360: LD_STRING skirmish
9362: ST_TO_ADDR
// hc_face_number := commander ;
9363: LD_ADDR_OWVAR 34
9367: PUSH
9368: LD_EXP 25
9372: ST_TO_ADDR
// hc_importance := 100 ;
9373: LD_ADDR_OWVAR 32
9377: PUSH
9378: LD_INT 100
9380: ST_TO_ADDR
// case commander of 1 :
9381: LD_EXP 25
9385: PUSH
9386: LD_INT 1
9388: DOUBLE
9389: EQUAL
9390: IFTRUE 9394
9392: GO 9418
9394: POP
// begin hc_name := Jeff Ironside ;
9395: LD_ADDR_OWVAR 26
9399: PUSH
9400: LD_STRING Jeff Ironside
9402: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 7 ) ;
9403: LD_INT 1
9405: PPUSH
9406: LD_INT 1
9408: PPUSH
9409: LD_INT 7
9411: PPUSH
9412: CALL_OW 380
// end ; 2 :
9416: GO 9483
9418: LD_INT 2
9420: DOUBLE
9421: EQUAL
9422: IFTRUE 9426
9424: GO 9450
9426: POP
// begin hc_name := Paul Johnson ;
9427: LD_ADDR_OWVAR 26
9431: PUSH
9432: LD_STRING Paul Johnson
9434: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 7 ) ;
9435: LD_INT 1
9437: PPUSH
9438: LD_INT 3
9440: PPUSH
9441: LD_INT 7
9443: PPUSH
9444: CALL_OW 380
// end ; 3 :
9448: GO 9483
9450: LD_INT 3
9452: DOUBLE
9453: EQUAL
9454: IFTRUE 9458
9456: GO 9482
9458: POP
// begin hc_name := Lisa Stuart ;
9459: LD_ADDR_OWVAR 26
9463: PUSH
9464: LD_STRING Lisa Stuart
9466: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , 7 ) ;
9467: LD_INT 2
9469: PPUSH
9470: LD_INT 4
9472: PPUSH
9473: LD_INT 7
9475: PPUSH
9476: CALL_OW 380
// end ; end ;
9480: GO 9483
9482: POP
// playerCommander := CreateHuman ;
9483: LD_ADDR_EXP 9
9487: PUSH
9488: CALL_OW 44
9492: ST_TO_ADDR
// hc_importance := 0 ;
9493: LD_ADDR_OWVAR 32
9497: PUSH
9498: LD_INT 0
9500: ST_TO_ADDR
// hc_gallery :=  ;
9501: LD_ADDR_OWVAR 33
9505: PUSH
9506: LD_STRING 
9508: ST_TO_ADDR
// result := Replace ( result , 2 , result [ 2 ] ^ playerCommander ) ;
9509: LD_ADDR_VAR 0 1
9513: PUSH
9514: LD_VAR 0 1
9518: PPUSH
9519: LD_INT 2
9521: PPUSH
9522: LD_VAR 0 1
9526: PUSH
9527: LD_INT 2
9529: ARRAY
9530: PUSH
9531: LD_EXP 9
9535: ADD
9536: PPUSH
9537: CALL_OW 1
9541: ST_TO_ADDR
// end ;
9542: LD_VAR 0 1
9546: RET
// export function PrepareReinforcements ; var i , peopleAmount , tmp , un , veh ; begin
9547: LD_INT 0
9549: PPUSH
9550: PPUSH
9551: PPUSH
9552: PPUSH
9553: PPUSH
9554: PPUSH
// uc_side := 1 ;
9555: LD_ADDR_OWVAR 20
9559: PUSH
9560: LD_INT 1
9562: ST_TO_ADDR
// uc_nation := 1 ;
9563: LD_ADDR_OWVAR 21
9567: PUSH
9568: LD_INT 1
9570: ST_TO_ADDR
// InitHc ;
9571: CALL_OW 19
// peopleAmount := [ 3 , 3 , 2 ] [ Difficulty ] ;
9575: LD_ADDR_VAR 0 3
9579: PUSH
9580: LD_INT 3
9582: PUSH
9583: LD_INT 3
9585: PUSH
9586: LD_INT 2
9588: PUSH
9589: EMPTY
9590: LIST
9591: LIST
9592: LIST
9593: PUSH
9594: LD_OWVAR 67
9598: ARRAY
9599: ST_TO_ADDR
// for i = 1 to peopleAmount do
9600: LD_ADDR_VAR 0 2
9604: PUSH
9605: DOUBLE
9606: LD_INT 1
9608: DEC
9609: ST_TO_ADDR
9610: LD_VAR 0 3
9614: PUSH
9615: FOR_TO
9616: IFFALSE 9665
// begin PrepareHuman ( false , 2 , [ 7 , 6 , 5 ] [ Difficulty ] ) ;
9618: LD_INT 0
9620: PPUSH
9621: LD_INT 2
9623: PPUSH
9624: LD_INT 7
9626: PUSH
9627: LD_INT 6
9629: PUSH
9630: LD_INT 5
9632: PUSH
9633: EMPTY
9634: LIST
9635: LIST
9636: LIST
9637: PUSH
9638: LD_OWVAR 67
9642: ARRAY
9643: PPUSH
9644: CALL_OW 380
// PlaceUnitInArea ( CreateHuman , startArea , false ) ;
9648: CALL_OW 44
9652: PPUSH
9653: LD_INT 19
9655: PPUSH
9656: LD_INT 0
9658: PPUSH
9659: CALL 54132 0 3
// end ;
9663: GO 9615
9665: POP
9666: POP
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_computer , us_crane , 58 ) ;
9667: LD_INT 2
9669: PPUSH
9670: LD_INT 1
9672: PPUSH
9673: LD_INT 3
9675: PPUSH
9676: LD_INT 13
9678: PPUSH
9679: LD_INT 58
9681: PPUSH
9682: CALL 24172 0 5
// PlaceUnitInArea ( CreateVehicle , startArea , false ) ;
9686: CALL_OW 45
9690: PPUSH
9691: LD_INT 19
9693: PPUSH
9694: LD_INT 0
9696: PPUSH
9697: CALL 54132 0 3
// if commander = 1 then
9701: LD_EXP 25
9705: PUSH
9706: LD_INT 1
9708: EQUAL
9709: IFFALSE 9720
// wait ( 6 6$00 ) else
9711: LD_INT 12600
9713: PPUSH
9714: CALL_OW 67
9718: GO 9727
// wait ( 8 8$00 ) ;
9720: LD_INT 16800
9722: PPUSH
9723: CALL_OW 67
// uc_side := 1 ;
9727: LD_ADDR_OWVAR 20
9731: PUSH
9732: LD_INT 1
9734: ST_TO_ADDR
// uc_nation := 1 ;
9735: LD_ADDR_OWVAR 21
9739: PUSH
9740: LD_INT 1
9742: ST_TO_ADDR
// InitVc ;
9743: CALL_OW 20
// InitHc ;
9747: CALL_OW 19
// for i = 1 to 5 do
9751: LD_ADDR_VAR 0 2
9755: PUSH
9756: DOUBLE
9757: LD_INT 1
9759: DEC
9760: ST_TO_ADDR
9761: LD_INT 5
9763: PUSH
9764: FOR_TO
9765: IFFALSE 10009
// begin PrepareVehicle ( [ us_heavy_tracked , us_medium_tracked , us_light_wheeled ] [ i mod 3 + 1 ] , engine_combustion , [ control_manual , control_computer , control_computer ] [ i mod 3 + 1 ] , [ us_heavy_gun , us_cargo_bay , us_radar ] [ i mod 3 + 1 ] , rand ( 40 , 55 ) ) ;
9767: LD_INT 4
9769: PUSH
9770: LD_INT 3
9772: PUSH
9773: LD_INT 1
9775: PUSH
9776: EMPTY
9777: LIST
9778: LIST
9779: LIST
9780: PUSH
9781: LD_VAR 0 2
9785: PUSH
9786: LD_INT 3
9788: MOD
9789: PUSH
9790: LD_INT 1
9792: PLUS
9793: ARRAY
9794: PPUSH
9795: LD_INT 1
9797: PPUSH
9798: LD_INT 1
9800: PUSH
9801: LD_INT 3
9803: PUSH
9804: LD_INT 3
9806: PUSH
9807: EMPTY
9808: LIST
9809: LIST
9810: LIST
9811: PUSH
9812: LD_VAR 0 2
9816: PUSH
9817: LD_INT 3
9819: MOD
9820: PUSH
9821: LD_INT 1
9823: PLUS
9824: ARRAY
9825: PPUSH
9826: LD_INT 6
9828: PUSH
9829: LD_INT 12
9831: PUSH
9832: LD_INT 11
9834: PUSH
9835: EMPTY
9836: LIST
9837: LIST
9838: LIST
9839: PUSH
9840: LD_VAR 0 2
9844: PUSH
9845: LD_INT 3
9847: MOD
9848: PUSH
9849: LD_INT 1
9851: PLUS
9852: ARRAY
9853: PPUSH
9854: LD_INT 40
9856: PPUSH
9857: LD_INT 55
9859: PPUSH
9860: CALL_OW 12
9864: PPUSH
9865: CALL 24172 0 5
// veh := CreateVehicle ;
9869: LD_ADDR_VAR 0 6
9873: PUSH
9874: CALL_OW 45
9878: ST_TO_ADDR
// PlaceUnitInArea ( veh , startArea , false ) ;
9879: LD_VAR 0 6
9883: PPUSH
9884: LD_INT 19
9886: PPUSH
9887: LD_INT 0
9889: PPUSH
9890: CALL 54132 0 3
// if GetWeapon ( veh ) = us_cargo_bay then
9894: LD_VAR 0 6
9898: PPUSH
9899: CALL_OW 264
9903: PUSH
9904: LD_INT 12
9906: EQUAL
9907: IFFALSE 9939
// begin AddCargo ( veh , mat_cans , 70 ) ;
9909: LD_VAR 0 6
9913: PPUSH
9914: LD_INT 1
9916: PPUSH
9917: LD_INT 70
9919: PPUSH
9920: CALL_OW 291
// AddCargo ( veh , mat_siberit , 30 ) ;
9924: LD_VAR 0 6
9928: PPUSH
9929: LD_INT 3
9931: PPUSH
9932: LD_INT 30
9934: PPUSH
9935: CALL_OW 291
// end ; if GetControl ( veh ) = control_manual then
9939: LD_VAR 0 6
9943: PPUSH
9944: CALL_OW 263
9948: PUSH
9949: LD_INT 1
9951: EQUAL
9952: IFFALSE 10007
// begin PrepareHuman ( sex_male , 3 , 6 ) ;
9954: LD_INT 1
9956: PPUSH
9957: LD_INT 3
9959: PPUSH
9960: LD_INT 6
9962: PPUSH
9963: CALL_OW 380
// un := CreateHuman ;
9967: LD_ADDR_VAR 0 5
9971: PUSH
9972: CALL_OW 44
9976: ST_TO_ADDR
// tmp := tmp ^ un ;
9977: LD_ADDR_VAR 0 4
9981: PUSH
9982: LD_VAR 0 4
9986: PUSH
9987: LD_VAR 0 5
9991: ADD
9992: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9993: LD_VAR 0 5
9997: PPUSH
9998: LD_VAR 0 6
10002: PPUSH
10003: CALL_OW 52
// end ; end ;
10007: GO 9764
10009: POP
10010: POP
// if tmp then
10011: LD_VAR 0 4
10015: IFFALSE 10079
// begin CenterNowOnUnits ( tmp ) ;
10017: LD_VAR 0 4
10021: PPUSH
10022: CALL_OW 87
// Say ( tmp [ 1 ] , DAR-1 ) ;
10026: LD_VAR 0 4
10030: PUSH
10031: LD_INT 1
10033: ARRAY
10034: PPUSH
10035: LD_STRING DAR-1
10037: PPUSH
10038: CALL_OW 88
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-DAR ) ;
10042: LD_EXP 9
10046: PPUSH
10047: LD_STRING D
10049: PUSH
10050: LD_STRING I
10052: PUSH
10053: LD_STRING J
10055: PUSH
10056: LD_STRING S
10058: PUSH
10059: EMPTY
10060: LIST
10061: LIST
10062: LIST
10063: PUSH
10064: LD_EXP 25
10068: ARRAY
10069: STR
10070: PUSH
10071: LD_STRING -1-DAR
10073: STR
10074: PPUSH
10075: CALL_OW 88
// end ; if not reinforceAllowed then
10079: LD_EXP 24
10083: NOT
10084: IFFALSE 10088
// exit ;
10086: GO 10242
// wait ( 25 25$00 ) ;
10088: LD_INT 52500
10090: PPUSH
10091: CALL_OW 67
// uc_side := 1 ;
10095: LD_ADDR_OWVAR 20
10099: PUSH
10100: LD_INT 1
10102: ST_TO_ADDR
// uc_nation := 1 ;
10103: LD_ADDR_OWVAR 21
10107: PUSH
10108: LD_INT 1
10110: ST_TO_ADDR
// InitVc ;
10111: CALL_OW 20
// InitHc ;
10115: CALL_OW 19
// for i = 1 to 4 do
10119: LD_ADDR_VAR 0 2
10123: PUSH
10124: DOUBLE
10125: LD_INT 1
10127: DEC
10128: ST_TO_ADDR
10129: LD_INT 4
10131: PUSH
10132: FOR_TO
10133: IFFALSE 10240
// begin PrepareVehicle ( us_morphling , engine_siberite , control_manual , us_heavy_gun , 1 ) ;
10135: LD_INT 5
10137: PPUSH
10138: LD_INT 3
10140: PPUSH
10141: LD_INT 1
10143: PPUSH
10144: LD_INT 6
10146: PPUSH
10147: LD_INT 1
10149: PPUSH
10150: CALL 24172 0 5
// veh := CreateVehicle ;
10154: LD_ADDR_VAR 0 6
10158: PUSH
10159: CALL_OW 45
10163: ST_TO_ADDR
// PlaceUnitInArea ( veh , startArea , false ) ;
10164: LD_VAR 0 6
10168: PPUSH
10169: LD_INT 19
10171: PPUSH
10172: LD_INT 0
10174: PPUSH
10175: CALL 54132 0 3
// if GetControl ( veh ) = control_manual then
10179: LD_VAR 0 6
10183: PPUSH
10184: CALL_OW 263
10188: PUSH
10189: LD_INT 1
10191: EQUAL
10192: IFFALSE 10238
// begin PrepareHuman ( false , 3 , [ 7 , 6 , 5 ] [ Difficulty ] ) ;
10194: LD_INT 0
10196: PPUSH
10197: LD_INT 3
10199: PPUSH
10200: LD_INT 7
10202: PUSH
10203: LD_INT 6
10205: PUSH
10206: LD_INT 5
10208: PUSH
10209: EMPTY
10210: LIST
10211: LIST
10212: LIST
10213: PUSH
10214: LD_OWVAR 67
10218: ARRAY
10219: PPUSH
10220: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
10224: CALL_OW 44
10228: PPUSH
10229: LD_VAR 0 6
10233: PPUSH
10234: CALL_OW 52
// end ; end ;
10238: GO 10132
10240: POP
10241: POP
// end ;
10242: LD_VAR 0 1
10246: RET
// export function PrepareLegionReinforcements ; var i , un , j , tmp ; begin
10247: LD_INT 0
10249: PPUSH
10250: PPUSH
10251: PPUSH
10252: PPUSH
10253: PPUSH
// uc_side := 8 ;
10254: LD_ADDR_OWVAR 20
10258: PUSH
10259: LD_INT 8
10261: ST_TO_ADDR
// uc_nation := nation_arabian ;
10262: LD_ADDR_OWVAR 21
10266: PUSH
10267: LD_INT 2
10269: ST_TO_ADDR
// for i = 1 to 2 do
10270: LD_ADDR_VAR 0 2
10274: PUSH
10275: DOUBLE
10276: LD_INT 1
10278: DEC
10279: ST_TO_ADDR
10280: LD_INT 2
10282: PUSH
10283: FOR_TO
10284: IFFALSE 10364
// for j = 1 to 4 do
10286: LD_ADDR_VAR 0 4
10290: PUSH
10291: DOUBLE
10292: LD_INT 1
10294: DEC
10295: ST_TO_ADDR
10296: LD_INT 4
10298: PUSH
10299: FOR_TO
10300: IFFALSE 10360
// begin PrepareHuman ( false , j , 8 ) ;
10302: LD_INT 0
10304: PPUSH
10305: LD_VAR 0 4
10309: PPUSH
10310: LD_INT 8
10312: PPUSH
10313: CALL_OW 380
// un := CreateHuman ;
10317: LD_ADDR_VAR 0 3
10321: PUSH
10322: CALL_OW 44
10326: ST_TO_ADDR
// PlaceUnitArea ( un , legionSpawn , false ) ;
10327: LD_VAR 0 3
10331: PPUSH
10332: LD_INT 23
10334: PPUSH
10335: LD_INT 0
10337: PPUSH
10338: CALL_OW 49
// tmp := tmp union un ;
10342: LD_ADDR_VAR 0 5
10346: PUSH
10347: LD_VAR 0 5
10351: PUSH
10352: LD_VAR 0 3
10356: UNION
10357: ST_TO_ADDR
// end ;
10358: GO 10299
10360: POP
10361: POP
10362: GO 10283
10364: POP
10365: POP
// for i in tmp do
10366: LD_ADDR_VAR 0 2
10370: PUSH
10371: LD_VAR 0 5
10375: PUSH
10376: FOR_IN
10377: IFFALSE 10396
// ComMoveXY ( i , 150 , 136 ) ;
10379: LD_VAR 0 2
10383: PPUSH
10384: LD_INT 150
10386: PPUSH
10387: LD_INT 136
10389: PPUSH
10390: CALL_OW 111
10394: GO 10376
10396: POP
10397: POP
// mc_bases := Replace ( mc_bases , mc_leg , mc_bases [ mc_leg ] union tmp ) ;
10398: LD_ADDR_EXP 46
10402: PUSH
10403: LD_EXP 46
10407: PPUSH
10408: LD_EXP 6
10412: PPUSH
10413: LD_EXP 46
10417: PUSH
10418: LD_EXP 6
10422: ARRAY
10423: PUSH
10424: LD_VAR 0 5
10428: UNION
10429: PPUSH
10430: CALL_OW 1
10434: ST_TO_ADDR
// end ;
10435: LD_VAR 0 1
10439: RET
// every 0 0$10 trigger Difficulty > 1 and GetTech ( tech_lapser , 3 ) = state_researched do
10440: LD_OWVAR 67
10444: PUSH
10445: LD_INT 1
10447: GREATER
10448: PUSH
10449: LD_INT 31
10451: PPUSH
10452: LD_INT 3
10454: PPUSH
10455: CALL_OW 321
10459: PUSH
10460: LD_INT 2
10462: EQUAL
10463: AND
10464: IFFALSE 10681
10466: GO 10468
10468: DISABLE
// begin MC_InsertBuildingList ( mc_rus_1 , [ [ b_turret , 101 , 159 , 5 ] , [ b_turret , 105 , 158 , 5 ] , [ b_turret , 96 , 136 , 5 ] , [ b_turret , 94 , 133 , 4 ] , [ b_turret , 84 , 102 , 4 ] ] ) ;
10469: LD_EXP 7
10473: PPUSH
10474: LD_INT 33
10476: PUSH
10477: LD_INT 101
10479: PUSH
10480: LD_INT 159
10482: PUSH
10483: LD_INT 5
10485: PUSH
10486: EMPTY
10487: LIST
10488: LIST
10489: LIST
10490: LIST
10491: PUSH
10492: LD_INT 33
10494: PUSH
10495: LD_INT 105
10497: PUSH
10498: LD_INT 158
10500: PUSH
10501: LD_INT 5
10503: PUSH
10504: EMPTY
10505: LIST
10506: LIST
10507: LIST
10508: LIST
10509: PUSH
10510: LD_INT 33
10512: PUSH
10513: LD_INT 96
10515: PUSH
10516: LD_INT 136
10518: PUSH
10519: LD_INT 5
10521: PUSH
10522: EMPTY
10523: LIST
10524: LIST
10525: LIST
10526: LIST
10527: PUSH
10528: LD_INT 33
10530: PUSH
10531: LD_INT 94
10533: PUSH
10534: LD_INT 133
10536: PUSH
10537: LD_INT 4
10539: PUSH
10540: EMPTY
10541: LIST
10542: LIST
10543: LIST
10544: LIST
10545: PUSH
10546: LD_INT 33
10548: PUSH
10549: LD_INT 84
10551: PUSH
10552: LD_INT 102
10554: PUSH
10555: LD_INT 4
10557: PUSH
10558: EMPTY
10559: LIST
10560: LIST
10561: LIST
10562: LIST
10563: PUSH
10564: EMPTY
10565: LIST
10566: LIST
10567: LIST
10568: LIST
10569: LIST
10570: PPUSH
10571: CALL 79416 0 2
// MC_InsertBuildingList ( mc_rus_2 , [ [ b_turret , 50 , 17 , 4 ] , [ b_turret , 52 , 20 , 4 ] , [ b_turret , 53 , 23 , 4 ] , [ b_turret , 45 , 32 , 4 ] , [ b_turret , 45 , 39 , 4 ] ] ) ;
10575: LD_EXP 8
10579: PPUSH
10580: LD_INT 33
10582: PUSH
10583: LD_INT 50
10585: PUSH
10586: LD_INT 17
10588: PUSH
10589: LD_INT 4
10591: PUSH
10592: EMPTY
10593: LIST
10594: LIST
10595: LIST
10596: LIST
10597: PUSH
10598: LD_INT 33
10600: PUSH
10601: LD_INT 52
10603: PUSH
10604: LD_INT 20
10606: PUSH
10607: LD_INT 4
10609: PUSH
10610: EMPTY
10611: LIST
10612: LIST
10613: LIST
10614: LIST
10615: PUSH
10616: LD_INT 33
10618: PUSH
10619: LD_INT 53
10621: PUSH
10622: LD_INT 23
10624: PUSH
10625: LD_INT 4
10627: PUSH
10628: EMPTY
10629: LIST
10630: LIST
10631: LIST
10632: LIST
10633: PUSH
10634: LD_INT 33
10636: PUSH
10637: LD_INT 45
10639: PUSH
10640: LD_INT 32
10642: PUSH
10643: LD_INT 4
10645: PUSH
10646: EMPTY
10647: LIST
10648: LIST
10649: LIST
10650: LIST
10651: PUSH
10652: LD_INT 33
10654: PUSH
10655: LD_INT 45
10657: PUSH
10658: LD_INT 39
10660: PUSH
10661: LD_INT 4
10663: PUSH
10664: EMPTY
10665: LIST
10666: LIST
10667: LIST
10668: LIST
10669: PUSH
10670: EMPTY
10671: LIST
10672: LIST
10673: LIST
10674: LIST
10675: LIST
10676: PPUSH
10677: CALL 79416 0 2
// end ; end_of_file
10681: END
// export function Action ; var i , tmp ; begin
10682: LD_INT 0
10684: PPUSH
10685: PPUSH
10686: PPUSH
// InGameOn ;
10687: CALL_OW 8
// CenterNowOnXY ( 225 , 217 ) ;
10691: LD_INT 225
10693: PPUSH
10694: LD_INT 217
10696: PPUSH
10697: CALL_OW 86
// for i in playerForces [ 2 ] do
10701: LD_ADDR_VAR 0 2
10705: PUSH
10706: LD_EXP 10
10710: PUSH
10711: LD_INT 2
10713: ARRAY
10714: PUSH
10715: FOR_IN
10716: IFFALSE 10849
// begin if playerForces [ 1 ] and GetClass ( i ) in [ 3 , 4 ] then
10718: LD_EXP 10
10722: PUSH
10723: LD_INT 1
10725: ARRAY
10726: PUSH
10727: LD_VAR 0 2
10731: PPUSH
10732: CALL_OW 257
10736: PUSH
10737: LD_INT 3
10739: PUSH
10740: LD_INT 4
10742: PUSH
10743: EMPTY
10744: LIST
10745: LIST
10746: IN
10747: AND
10748: IFFALSE 10832
// begin PlaceUnitInArea ( playerForces [ 1 ] [ 1 ] , startArea , false ) ;
10750: LD_EXP 10
10754: PUSH
10755: LD_INT 1
10757: ARRAY
10758: PUSH
10759: LD_INT 1
10761: ARRAY
10762: PPUSH
10763: LD_INT 19
10765: PPUSH
10766: LD_INT 0
10768: PPUSH
10769: CALL 54132 0 3
// PlaceHumanInUnit ( i , playerForces [ 1 ] [ 1 ] ) ;
10773: LD_VAR 0 2
10777: PPUSH
10778: LD_EXP 10
10782: PUSH
10783: LD_INT 1
10785: ARRAY
10786: PUSH
10787: LD_INT 1
10789: ARRAY
10790: PPUSH
10791: CALL_OW 52
// playerForces := Replace ( playerForces , 1 , Delete ( playerForces [ 1 ] , 1 ) ) ;
10795: LD_ADDR_EXP 10
10799: PUSH
10800: LD_EXP 10
10804: PPUSH
10805: LD_INT 1
10807: PPUSH
10808: LD_EXP 10
10812: PUSH
10813: LD_INT 1
10815: ARRAY
10816: PPUSH
10817: LD_INT 1
10819: PPUSH
10820: CALL_OW 3
10824: PPUSH
10825: CALL_OW 1
10829: ST_TO_ADDR
// end else
10830: GO 10847
// PlaceUnitInArea ( i , startArea , false ) ;
10832: LD_VAR 0 2
10836: PPUSH
10837: LD_INT 19
10839: PPUSH
10840: LD_INT 0
10842: PPUSH
10843: CALL 54132 0 3
// end ;
10847: GO 10715
10849: POP
10850: POP
// wait ( 0 0$2 ) ;
10851: LD_INT 70
10853: PPUSH
10854: CALL_OW 67
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1 ) ;
10858: LD_EXP 9
10862: PPUSH
10863: LD_STRING D
10865: PUSH
10866: LD_STRING I
10868: PUSH
10869: LD_STRING J
10871: PUSH
10872: LD_STRING S
10874: PUSH
10875: EMPTY
10876: LIST
10877: LIST
10878: LIST
10879: PUSH
10880: LD_EXP 25
10884: ARRAY
10885: STR
10886: PUSH
10887: LD_STRING -1
10889: STR
10890: PPUSH
10891: CALL_OW 88
// SayRadio ( Powell , DP-1 ) ;
10895: LD_EXP 12
10899: PPUSH
10900: LD_STRING DP-1
10902: PPUSH
10903: CALL_OW 94
// SayRadio ( Powell , DP-2 ) ;
10907: LD_EXP 12
10911: PPUSH
10912: LD_STRING DP-2
10914: PPUSH
10915: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -2 ) ;
10919: LD_EXP 9
10923: PPUSH
10924: LD_STRING D
10926: PUSH
10927: LD_STRING I
10929: PUSH
10930: LD_STRING J
10932: PUSH
10933: LD_STRING S
10935: PUSH
10936: EMPTY
10937: LIST
10938: LIST
10939: LIST
10940: PUSH
10941: LD_EXP 25
10945: ARRAY
10946: STR
10947: PUSH
10948: LD_STRING -2
10950: STR
10951: PPUSH
10952: CALL_OW 88
// InGameOff ;
10956: CALL_OW 9
// ChangeMissionObjectives ( O1 ) ;
10960: LD_STRING O1
10962: PPUSH
10963: CALL_OW 337
// game := true ;
10967: LD_ADDR_EXP 3
10971: PUSH
10972: LD_INT 1
10974: ST_TO_ADDR
// SaveForQuickRestart ;
10975: CALL_OW 22
// wait ( 0 0$5 ) ;
10979: LD_INT 175
10981: PPUSH
10982: CALL_OW 67
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -3 ) ;
10986: LD_EXP 9
10990: PPUSH
10991: LD_STRING D
10993: PUSH
10994: LD_STRING I
10996: PUSH
10997: LD_STRING J
10999: PUSH
11000: LD_STRING S
11002: PUSH
11003: EMPTY
11004: LIST
11005: LIST
11006: LIST
11007: PUSH
11008: LD_EXP 25
11012: ARRAY
11013: STR
11014: PUSH
11015: LD_STRING -3
11017: STR
11018: PPUSH
11019: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
11023: LD_INT 35
11025: PPUSH
11026: CALL_OW 67
// until ruEscape [ 1 ] >= ruEscape [ 2 ] ;
11030: LD_EXP 15
11034: PUSH
11035: LD_INT 1
11037: ARRAY
11038: PUSH
11039: LD_EXP 15
11043: PUSH
11044: LD_INT 2
11046: ARRAY
11047: GREATEREQUAL
11048: IFFALSE 11023
// outpostEscape := true ;
11050: LD_ADDR_EXP 27
11054: PUSH
11055: LD_INT 1
11057: ST_TO_ADDR
// tmp := UnitFilter ( ruOutpost , [ f_sex , sex_male ] ) ;
11058: LD_ADDR_VAR 0 3
11062: PUSH
11063: LD_EXP 14
11067: PPUSH
11068: LD_INT 26
11070: PUSH
11071: LD_INT 1
11073: PUSH
11074: EMPTY
11075: LIST
11076: LIST
11077: PPUSH
11078: CALL_OW 72
11082: ST_TO_ADDR
// if tmp then
11083: LD_VAR 0 3
11087: IFFALSE 11105
// Say ( tmp [ 1 ] , DR-1-Escape ) ;
11089: LD_VAR 0 3
11093: PUSH
11094: LD_INT 1
11096: ARRAY
11097: PPUSH
11098: LD_STRING DR-1-Escape
11100: PPUSH
11101: CALL_OW 88
// wait ( 0 0$1 ) ;
11105: LD_INT 35
11107: PPUSH
11108: CALL_OW 67
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Escape ) ;
11112: LD_EXP 9
11116: PPUSH
11117: LD_STRING D
11119: PUSH
11120: LD_STRING I
11122: PUSH
11123: LD_STRING J
11125: PUSH
11126: LD_STRING S
11128: PUSH
11129: EMPTY
11130: LIST
11131: LIST
11132: LIST
11133: PUSH
11134: LD_EXP 25
11138: ARRAY
11139: STR
11140: PUSH
11141: LD_STRING -1-Escape
11143: STR
11144: PPUSH
11145: CALL_OW 88
// for i in ruOutpost do
11149: LD_ADDR_VAR 0 2
11153: PUSH
11154: LD_EXP 14
11158: PUSH
11159: FOR_IN
11160: IFFALSE 11214
// begin if IsInUnit ( i ) then
11162: LD_VAR 0 2
11166: PPUSH
11167: CALL_OW 310
11171: IFFALSE 11182
// ComExitBuilding ( i ) ;
11173: LD_VAR 0 2
11177: PPUSH
11178: CALL_OW 122
// AddComMoveXY ( i , 179 , 102 ) ;
11182: LD_VAR 0 2
11186: PPUSH
11187: LD_INT 179
11189: PPUSH
11190: LD_INT 102
11192: PPUSH
11193: CALL_OW 171
// AddComMoveXY ( i , 28 , 20 ) ;
11197: LD_VAR 0 2
11201: PPUSH
11202: LD_INT 28
11204: PPUSH
11205: LD_INT 20
11207: PPUSH
11208: CALL_OW 171
// end ;
11212: GO 11159
11214: POP
11215: POP
// tmp := [ ] ;
11216: LD_ADDR_VAR 0 3
11220: PUSH
11221: EMPTY
11222: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11223: LD_INT 35
11225: PPUSH
11226: CALL_OW 67
// tmp := UnitFilter ( ruOutpost , [ f_inarea , rus2Base ] ) ;
11230: LD_ADDR_VAR 0 3
11234: PUSH
11235: LD_EXP 14
11239: PPUSH
11240: LD_INT 95
11242: PUSH
11243: LD_INT 11
11245: PUSH
11246: EMPTY
11247: LIST
11248: LIST
11249: PPUSH
11250: CALL_OW 72
11254: ST_TO_ADDR
// if tmp then
11255: LD_VAR 0 3
11259: IFFALSE 11338
// for i in tmp do
11261: LD_ADDR_VAR 0 2
11265: PUSH
11266: LD_VAR 0 3
11270: PUSH
11271: FOR_IN
11272: IFFALSE 11336
// begin ruOutpost := ruOutpost diff i ;
11274: LD_ADDR_EXP 14
11278: PUSH
11279: LD_EXP 14
11283: PUSH
11284: LD_VAR 0 2
11288: DIFF
11289: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ mc_rus_2 , mc_bases [ mc_rus_2 ] + 1 ] , i ) ;
11290: LD_ADDR_EXP 46
11294: PUSH
11295: LD_EXP 46
11299: PPUSH
11300: LD_EXP 8
11304: PUSH
11305: LD_EXP 46
11309: PUSH
11310: LD_EXP 8
11314: ARRAY
11315: PUSH
11316: LD_INT 1
11318: PLUS
11319: PUSH
11320: EMPTY
11321: LIST
11322: LIST
11323: PPUSH
11324: LD_VAR 0 2
11328: PPUSH
11329: CALL 24294 0 3
11333: ST_TO_ADDR
// end ;
11334: GO 11271
11336: POP
11337: POP
// until not UnitFilter ( ruOutpost , [ f_type , unit_human ] ) ;
11338: LD_EXP 14
11342: PPUSH
11343: LD_INT 21
11345: PUSH
11346: LD_INT 1
11348: PUSH
11349: EMPTY
11350: LIST
11351: LIST
11352: PPUSH
11353: CALL_OW 72
11357: NOT
11358: IFFALSE 11223
// ruOutpost := [ ] ;
11360: LD_ADDR_EXP 14
11364: PUSH
11365: EMPTY
11366: ST_TO_ADDR
// end ;
11367: LD_VAR 0 1
11371: RET
// every 0 0$1 trigger outpostEscape do var i , tmp ;
11372: LD_EXP 27
11376: IFFALSE 11565
11378: GO 11380
11380: DISABLE
11381: LD_INT 0
11383: PPUSH
11384: PPUSH
// begin wait ( rand ( 0 0$25 , 0 0$35 ) ) ;
11385: LD_INT 875
11387: PPUSH
11388: LD_INT 1225
11390: PPUSH
11391: CALL_OW 12
11395: PPUSH
11396: CALL_OW 67
// tmp := [ [ 208 , 166 ] , [ 218 , 174 ] , [ 201 , 173 ] , [ 189 , 167 ] , [ 191 , 160 ] , [ 209 , 181 ] , [ 192 , 162 ] , [ 197 , 166 ] ] ;
11400: LD_ADDR_VAR 0 2
11404: PUSH
11405: LD_INT 208
11407: PUSH
11408: LD_INT 166
11410: PUSH
11411: EMPTY
11412: LIST
11413: LIST
11414: PUSH
11415: LD_INT 218
11417: PUSH
11418: LD_INT 174
11420: PUSH
11421: EMPTY
11422: LIST
11423: LIST
11424: PUSH
11425: LD_INT 201
11427: PUSH
11428: LD_INT 173
11430: PUSH
11431: EMPTY
11432: LIST
11433: LIST
11434: PUSH
11435: LD_INT 189
11437: PUSH
11438: LD_INT 167
11440: PUSH
11441: EMPTY
11442: LIST
11443: LIST
11444: PUSH
11445: LD_INT 191
11447: PUSH
11448: LD_INT 160
11450: PUSH
11451: EMPTY
11452: LIST
11453: LIST
11454: PUSH
11455: LD_INT 209
11457: PUSH
11458: LD_INT 181
11460: PUSH
11461: EMPTY
11462: LIST
11463: LIST
11464: PUSH
11465: LD_INT 192
11467: PUSH
11468: LD_INT 162
11470: PUSH
11471: EMPTY
11472: LIST
11473: LIST
11474: PUSH
11475: LD_INT 197
11477: PUSH
11478: LD_INT 166
11480: PUSH
11481: EMPTY
11482: LIST
11483: LIST
11484: PUSH
11485: EMPTY
11486: LIST
11487: LIST
11488: LIST
11489: LIST
11490: LIST
11491: LIST
11492: LIST
11493: LIST
11494: ST_TO_ADDR
// for i = 1 to 5 + Difficulty do
11495: LD_ADDR_VAR 0 1
11499: PUSH
11500: DOUBLE
11501: LD_INT 1
11503: DEC
11504: ST_TO_ADDR
11505: LD_INT 5
11507: PUSH
11508: LD_OWVAR 67
11512: PLUS
11513: PUSH
11514: FOR_TO
11515: IFFALSE 11563
// begin MineExplosion ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , 1 ) ;
11517: LD_VAR 0 2
11521: PUSH
11522: LD_VAR 0 1
11526: ARRAY
11527: PUSH
11528: LD_INT 1
11530: ARRAY
11531: PPUSH
11532: LD_VAR 0 2
11536: PUSH
11537: LD_VAR 0 1
11541: ARRAY
11542: PUSH
11543: LD_INT 2
11545: ARRAY
11546: PPUSH
11547: LD_INT 1
11549: PPUSH
11550: CALL_OW 453
// wait ( 0 0$0.8 ) ;
11554: LD_INT 28
11556: PPUSH
11557: CALL_OW 67
// end ;
11561: GO 11514
11563: POP
11564: POP
// end ;
11565: PPOPN 2
11567: END
// every 0 0$3 trigger not outpostEscape do var tmp , engs , buildings , empty , i , j , k ;
11568: LD_EXP 27
11572: NOT
11573: IFFALSE 12227
11575: GO 11577
11577: DISABLE
11578: LD_INT 0
11580: PPUSH
11581: PPUSH
11582: PPUSH
11583: PPUSH
11584: PPUSH
11585: PPUSH
11586: PPUSH
// begin enable ;
11587: ENABLE
// tmp := UnitFilter ( ruOutpost , [ [ f_side , 3 ] , [ f_class , 1 ] ] ) ;
11588: LD_ADDR_VAR 0 1
11592: PUSH
11593: LD_EXP 14
11597: PPUSH
11598: LD_INT 22
11600: PUSH
11601: LD_INT 3
11603: PUSH
11604: EMPTY
11605: LIST
11606: LIST
11607: PUSH
11608: LD_INT 25
11610: PUSH
11611: LD_INT 1
11613: PUSH
11614: EMPTY
11615: LIST
11616: LIST
11617: PUSH
11618: EMPTY
11619: LIST
11620: LIST
11621: PPUSH
11622: CALL_OW 72
11626: ST_TO_ADDR
// engs := UnitFilter ( ruOutpost , [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
11627: LD_ADDR_VAR 0 2
11631: PUSH
11632: LD_EXP 14
11636: PPUSH
11637: LD_INT 22
11639: PUSH
11640: LD_INT 3
11642: PUSH
11643: EMPTY
11644: LIST
11645: LIST
11646: PUSH
11647: LD_INT 25
11649: PUSH
11650: LD_INT 2
11652: PUSH
11653: EMPTY
11654: LIST
11655: LIST
11656: PUSH
11657: EMPTY
11658: LIST
11659: LIST
11660: PPUSH
11661: CALL_OW 72
11665: ST_TO_ADDR
// buildings := UnitFilter ( ruOutpost , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
11666: LD_ADDR_VAR 0 3
11670: PUSH
11671: LD_EXP 14
11675: PPUSH
11676: LD_INT 22
11678: PUSH
11679: LD_INT 3
11681: PUSH
11682: EMPTY
11683: LIST
11684: LIST
11685: PUSH
11686: LD_INT 21
11688: PUSH
11689: LD_INT 3
11691: PUSH
11692: EMPTY
11693: LIST
11694: LIST
11695: PUSH
11696: LD_INT 3
11698: PUSH
11699: LD_INT 24
11701: PUSH
11702: LD_INT 1000
11704: PUSH
11705: EMPTY
11706: LIST
11707: LIST
11708: PUSH
11709: EMPTY
11710: LIST
11711: LIST
11712: PUSH
11713: EMPTY
11714: LIST
11715: LIST
11716: LIST
11717: PPUSH
11718: CALL_OW 72
11722: ST_TO_ADDR
// if engs and buildings then
11723: LD_VAR 0 2
11727: PUSH
11728: LD_VAR 0 3
11732: AND
11733: IFFALSE 11806
// begin for i in engs do
11735: LD_ADDR_VAR 0 5
11739: PUSH
11740: LD_VAR 0 2
11744: PUSH
11745: FOR_IN
11746: IFFALSE 11802
// if IsInUnit ( i ) then
11748: LD_VAR 0 5
11752: PPUSH
11753: CALL_OW 310
11757: IFFALSE 11770
// ComExitBuilding ( i ) else
11759: LD_VAR 0 5
11763: PPUSH
11764: CALL_OW 122
11768: GO 11800
// if not HasTask ( i ) then
11770: LD_VAR 0 5
11774: PPUSH
11775: CALL_OW 314
11779: NOT
11780: IFFALSE 11800
// ComRepairBuilding ( i , buildings [ 1 ] ) ;
11782: LD_VAR 0 5
11786: PPUSH
11787: LD_VAR 0 3
11791: PUSH
11792: LD_INT 1
11794: ARRAY
11795: PPUSH
11796: CALL_OW 130
11800: GO 11745
11802: POP
11803: POP
// end else
11804: GO 11909
// if not buildings and UnitFilter ( ruOutpost , [ f_btype , b_depot ] ) and UnitFilter ( engs , [ f_not , [ f_inside ] ] ) then
11806: LD_VAR 0 3
11810: NOT
11811: PUSH
11812: LD_EXP 14
11816: PPUSH
11817: LD_INT 30
11819: PUSH
11820: LD_INT 0
11822: PUSH
11823: EMPTY
11824: LIST
11825: LIST
11826: PPUSH
11827: CALL_OW 72
11831: AND
11832: PUSH
11833: LD_VAR 0 2
11837: PPUSH
11838: LD_INT 3
11840: PUSH
11841: LD_INT 54
11843: PUSH
11844: EMPTY
11845: LIST
11846: PUSH
11847: EMPTY
11848: LIST
11849: LIST
11850: PPUSH
11851: CALL_OW 72
11855: AND
11856: IFFALSE 11909
// ComEnterUnit ( UnitFilter ( engs , [ f_not , [ f_inside ] ] ) , UnitFilter ( ruOutpost , [ f_btype , b_depot ] ) [ 1 ] ) ;
11858: LD_VAR 0 2
11862: PPUSH
11863: LD_INT 3
11865: PUSH
11866: LD_INT 54
11868: PUSH
11869: EMPTY
11870: LIST
11871: PUSH
11872: EMPTY
11873: LIST
11874: LIST
11875: PPUSH
11876: CALL_OW 72
11880: PPUSH
11881: LD_EXP 14
11885: PPUSH
11886: LD_INT 30
11888: PUSH
11889: LD_INT 0
11891: PUSH
11892: EMPTY
11893: LIST
11894: LIST
11895: PPUSH
11896: CALL_OW 72
11900: PUSH
11901: LD_INT 1
11903: ARRAY
11904: PPUSH
11905: CALL_OW 120
// if not tmp then
11909: LD_VAR 0 1
11913: NOT
11914: IFFALSE 11918
// exit ;
11916: GO 12227
// if FilterUnitsInArea ( ruOutpostCenterArea , [ f_enemy , 3 ] ) > 1 then
11918: LD_INT 26
11920: PPUSH
11921: LD_INT 81
11923: PUSH
11924: LD_INT 3
11926: PUSH
11927: EMPTY
11928: LIST
11929: LIST
11930: PPUSH
11931: CALL_OW 70
11935: PUSH
11936: LD_INT 1
11938: GREATER
11939: IFFALSE 11995
// begin for i in tmp do
11941: LD_ADDR_VAR 0 5
11945: PUSH
11946: LD_VAR 0 1
11950: PUSH
11951: FOR_IN
11952: IFFALSE 11991
// begin if IsInUnit ( i ) then
11954: LD_VAR 0 5
11958: PPUSH
11959: CALL_OW 310
11963: IFFALSE 11974
// ComExitBuilding ( i ) ;
11965: LD_VAR 0 5
11969: PPUSH
11970: CALL_OW 122
// AddComAgressiveMove ( i , 204 , 164 ) ;
11974: LD_VAR 0 5
11978: PPUSH
11979: LD_INT 204
11981: PPUSH
11982: LD_INT 164
11984: PPUSH
11985: CALL_OW 174
// end ;
11989: GO 11951
11991: POP
11992: POP
// end else
11993: GO 12227
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
11995: LD_VAR 0 1
11999: PPUSH
12000: LD_INT 3
12002: PUSH
12003: LD_INT 54
12005: PUSH
12006: EMPTY
12007: LIST
12008: PUSH
12009: EMPTY
12010: LIST
12011: LIST
12012: PPUSH
12013: CALL_OW 72
12017: IFFALSE 12227
// begin empty := UnitFilter ( ruOutpost , [ [ f_btype , b_bunker ] , [ f_empty ] ] ) ;
12019: LD_ADDR_VAR 0 4
12023: PUSH
12024: LD_EXP 14
12028: PPUSH
12029: LD_INT 30
12031: PUSH
12032: LD_INT 32
12034: PUSH
12035: EMPTY
12036: LIST
12037: LIST
12038: PUSH
12039: LD_INT 58
12041: PUSH
12042: EMPTY
12043: LIST
12044: PUSH
12045: EMPTY
12046: LIST
12047: LIST
12048: PPUSH
12049: CALL_OW 72
12053: ST_TO_ADDR
// if not empty and UnitFilter ( ruOutpost , [ f_btype , b_barracks ] ) then
12054: LD_VAR 0 4
12058: NOT
12059: PUSH
12060: LD_EXP 14
12064: PPUSH
12065: LD_INT 30
12067: PUSH
12068: LD_INT 5
12070: PUSH
12071: EMPTY
12072: LIST
12073: LIST
12074: PPUSH
12075: CALL_OW 72
12079: AND
12080: IFFALSE 12117
// begin ComEnterUnit ( tmp , UnitFilter ( ruOutpost , [ f_btype , b_barracks ] ) [ 1 ] ) ;
12082: LD_VAR 0 1
12086: PPUSH
12087: LD_EXP 14
12091: PPUSH
12092: LD_INT 30
12094: PUSH
12095: LD_INT 5
12097: PUSH
12098: EMPTY
12099: LIST
12100: LIST
12101: PPUSH
12102: CALL_OW 72
12106: PUSH
12107: LD_INT 1
12109: ARRAY
12110: PPUSH
12111: CALL_OW 120
// exit ;
12115: GO 12227
// end ; j := UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) ;
12117: LD_ADDR_VAR 0 6
12121: PUSH
12122: LD_VAR 0 1
12126: PPUSH
12127: LD_INT 3
12129: PUSH
12130: LD_INT 54
12132: PUSH
12133: EMPTY
12134: LIST
12135: PUSH
12136: EMPTY
12137: LIST
12138: LIST
12139: PPUSH
12140: CALL_OW 72
12144: ST_TO_ADDR
// if j < empty then
12145: LD_VAR 0 6
12149: PUSH
12150: LD_VAR 0 4
12154: LESS
12155: IFFALSE 12169
// k := j else
12157: LD_ADDR_VAR 0 7
12161: PUSH
12162: LD_VAR 0 6
12166: ST_TO_ADDR
12167: GO 12179
// k := empty ;
12169: LD_ADDR_VAR 0 7
12173: PUSH
12174: LD_VAR 0 4
12178: ST_TO_ADDR
// for i = 1 to k do
12179: LD_ADDR_VAR 0 5
12183: PUSH
12184: DOUBLE
12185: LD_INT 1
12187: DEC
12188: ST_TO_ADDR
12189: LD_VAR 0 7
12193: PUSH
12194: FOR_TO
12195: IFFALSE 12225
// ComEnterUnit ( j [ i ] , empty [ i ] ) ;
12197: LD_VAR 0 6
12201: PUSH
12202: LD_VAR 0 5
12206: ARRAY
12207: PPUSH
12208: LD_VAR 0 4
12212: PUSH
12213: LD_VAR 0 5
12217: ARRAY
12218: PPUSH
12219: CALL_OW 120
12223: GO 12194
12225: POP
12226: POP
// end ; end ;
12227: PPOPN 7
12229: END
// every 0 0$2 trigger GameType = 1 and outpostEscape and FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , 208 , 163 , 8 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_distxy , 208 , 163 , 14 ] ] ) do var i ;
12230: LD_EXP 2
12234: PUSH
12235: LD_INT 1
12237: EQUAL
12238: PUSH
12239: LD_EXP 27
12243: AND
12244: PUSH
12245: LD_INT 22
12247: PUSH
12248: LD_INT 1
12250: PUSH
12251: EMPTY
12252: LIST
12253: LIST
12254: PUSH
12255: LD_INT 92
12257: PUSH
12258: LD_INT 208
12260: PUSH
12261: LD_INT 163
12263: PUSH
12264: LD_INT 8
12266: PUSH
12267: EMPTY
12268: LIST
12269: LIST
12270: LIST
12271: LIST
12272: PUSH
12273: EMPTY
12274: LIST
12275: LIST
12276: PPUSH
12277: CALL_OW 69
12281: AND
12282: PUSH
12283: LD_INT 22
12285: PUSH
12286: LD_INT 3
12288: PUSH
12289: EMPTY
12290: LIST
12291: LIST
12292: PUSH
12293: LD_INT 21
12295: PUSH
12296: LD_INT 1
12298: PUSH
12299: EMPTY
12300: LIST
12301: LIST
12302: PUSH
12303: LD_INT 92
12305: PUSH
12306: LD_INT 208
12308: PUSH
12309: LD_INT 163
12311: PUSH
12312: LD_INT 14
12314: PUSH
12315: EMPTY
12316: LIST
12317: LIST
12318: LIST
12319: LIST
12320: PUSH
12321: EMPTY
12322: LIST
12323: LIST
12324: LIST
12325: PPUSH
12326: CALL_OW 69
12330: NOT
12331: AND
12332: IFFALSE 12637
12334: GO 12336
12336: DISABLE
12337: LD_INT 0
12339: PPUSH
// begin InGameOn ;
12340: CALL_OW 8
// CenterNowOnUnits ( playerCommander ) ;
12344: LD_EXP 9
12348: PPUSH
12349: CALL_OW 87
// wait ( 0 0$1 ) ;
12353: LD_INT 35
12355: PPUSH
12356: CALL_OW 67
// DialogueOn ;
12360: CALL_OW 6
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-BaseCaptured ) ;
12364: LD_EXP 9
12368: PPUSH
12369: LD_STRING D
12371: PUSH
12372: LD_STRING I
12374: PUSH
12375: LD_STRING J
12377: PUSH
12378: LD_STRING S
12380: PUSH
12381: EMPTY
12382: LIST
12383: LIST
12384: LIST
12385: PUSH
12386: LD_EXP 25
12390: ARRAY
12391: STR
12392: PUSH
12393: LD_STRING -1-BaseCaptured
12395: STR
12396: PPUSH
12397: CALL_OW 88
// SayRadio ( Powell , DP-1-BaseCaptured ) ;
12401: LD_EXP 12
12405: PPUSH
12406: LD_STRING DP-1-BaseCaptured
12408: PPUSH
12409: CALL_OW 94
// if sibBombAllowed then
12413: LD_EXP 23
12417: IFFALSE 12559
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -2-BaseCaptured ) ;
12419: LD_EXP 9
12423: PPUSH
12424: LD_STRING D
12426: PUSH
12427: LD_STRING I
12429: PUSH
12430: LD_STRING J
12432: PUSH
12433: LD_STRING S
12435: PUSH
12436: EMPTY
12437: LIST
12438: LIST
12439: LIST
12440: PUSH
12441: LD_EXP 25
12445: ARRAY
12446: STR
12447: PUSH
12448: LD_STRING -2-BaseCaptured
12450: STR
12451: PPUSH
12452: CALL_OW 88
// if commander = 1 then
12456: LD_EXP 25
12460: PUSH
12461: LD_INT 1
12463: EQUAL
12464: IFFALSE 12478
// SayRadio ( Powell , DP-2b-BaseCaptured ) ;
12466: LD_EXP 12
12470: PPUSH
12471: LD_STRING DP-2b-BaseCaptured
12473: PPUSH
12474: CALL_OW 94
// if commander = 2 then
12478: LD_EXP 25
12482: PUSH
12483: LD_INT 2
12485: EQUAL
12486: IFFALSE 12500
// SayRadio ( Powell , DP-2-BaseCaptured ) ;
12488: LD_EXP 12
12492: PPUSH
12493: LD_STRING DP-2-BaseCaptured
12495: PPUSH
12496: CALL_OW 94
// if commander = 3 then
12500: LD_EXP 25
12504: PUSH
12505: LD_INT 3
12507: EQUAL
12508: IFFALSE 12522
// SayRadio ( Powell , DP-2a-BaseCaptured ) ;
12510: LD_EXP 12
12514: PPUSH
12515: LD_STRING DP-2a-BaseCaptured
12517: PPUSH
12518: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -3-BaseCaptured ) ;
12522: LD_EXP 9
12526: PPUSH
12527: LD_STRING D
12529: PUSH
12530: LD_STRING I
12532: PUSH
12533: LD_STRING J
12535: PUSH
12536: LD_STRING S
12538: PUSH
12539: EMPTY
12540: LIST
12541: LIST
12542: LIST
12543: PUSH
12544: LD_EXP 25
12548: ARRAY
12549: STR
12550: PUSH
12551: LD_STRING -3-BaseCaptured
12553: STR
12554: PPUSH
12555: CALL_OW 88
// end ; DialogueOff ;
12559: CALL_OW 7
// InGameOff ;
12563: CALL_OW 9
// ChangeMissionObjectives ( O2 ) ;
12567: LD_STRING O2
12569: PPUSH
12570: CALL_OW 337
// for i in UnitFilter ( ruOutpost , [ f_type , unit_building ] ) do
12574: LD_ADDR_VAR 0 1
12578: PUSH
12579: LD_EXP 14
12583: PPUSH
12584: LD_INT 21
12586: PUSH
12587: LD_INT 3
12589: PUSH
12590: EMPTY
12591: LIST
12592: LIST
12593: PPUSH
12594: CALL_OW 72
12598: PUSH
12599: FOR_IN
12600: IFFALSE 12616
// SetSide ( i , 1 ) ;
12602: LD_VAR 0 1
12606: PPUSH
12607: LD_INT 1
12609: PPUSH
12610: CALL_OW 235
12614: GO 12599
12616: POP
12617: POP
// baseCaptured := true ;
12618: LD_ADDR_EXP 17
12622: PUSH
12623: LD_INT 1
12625: ST_TO_ADDR
// wait ( 0 0$35 ) ;
12626: LD_INT 1225
12628: PPUSH
12629: CALL_OW 67
// PrepareReinforcements ;
12633: CALL 9547 0 0
// end ;
12637: PPOPN 1
12639: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 167 , 197 , 20 ] ] ) > 3 do
12640: LD_INT 22
12642: PUSH
12643: LD_INT 3
12645: PUSH
12646: EMPTY
12647: LIST
12648: LIST
12649: PUSH
12650: LD_INT 92
12652: PUSH
12653: LD_INT 167
12655: PUSH
12656: LD_INT 197
12658: PUSH
12659: LD_INT 20
12661: PUSH
12662: EMPTY
12663: LIST
12664: LIST
12665: LIST
12666: LIST
12667: PUSH
12668: EMPTY
12669: LIST
12670: LIST
12671: PPUSH
12672: CALL_OW 69
12676: PUSH
12677: LD_INT 3
12679: GREATER
12680: IFFALSE 12697
12682: GO 12684
12684: DISABLE
// SayRadio ( Powell , DP-RuAttack ) ;
12685: LD_EXP 12
12689: PPUSH
12690: LD_STRING DP-RuAttack
12692: PPUSH
12693: CALL_OW 94
12697: END
// every 0 0$2 trigger not debug and SeeXY ( 1 , 168 , 74 ) and GetEnvironmentType ( 168 , 72 ) do
12698: LD_EXP 1
12702: NOT
12703: PUSH
12704: LD_INT 1
12706: PPUSH
12707: LD_INT 168
12709: PPUSH
12710: LD_INT 74
12712: PPUSH
12713: CALL_OW 293
12717: AND
12718: PUSH
12719: LD_INT 168
12721: PPUSH
12722: LD_INT 72
12724: PPUSH
12725: CALL_OW 553
12729: AND
12730: IFFALSE 12782
12732: GO 12734
12734: DISABLE
// begin CenterOnXY ( 168 , 72 ) ;
12735: LD_INT 168
12737: PPUSH
12738: LD_INT 72
12740: PPUSH
12741: CALL_OW 84
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Blockade ) ;
12745: LD_EXP 9
12749: PPUSH
12750: LD_STRING D
12752: PUSH
12753: LD_STRING I
12755: PUSH
12756: LD_STRING J
12758: PUSH
12759: LD_STRING S
12761: PUSH
12762: EMPTY
12763: LIST
12764: LIST
12765: LIST
12766: PUSH
12767: LD_EXP 25
12771: ARRAY
12772: STR
12773: PUSH
12774: LD_STRING -1-Blockade
12776: STR
12777: PPUSH
12778: CALL_OW 88
// end ;
12782: END
// every 0 0$2 trigger GameType = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_see , 4 ] ] ) do
12783: LD_EXP 2
12787: PUSH
12788: LD_INT 1
12790: EQUAL
12791: PUSH
12792: LD_INT 22
12794: PUSH
12795: LD_INT 1
12797: PUSH
12798: EMPTY
12799: LIST
12800: LIST
12801: PUSH
12802: LD_INT 101
12804: PUSH
12805: LD_INT 4
12807: PUSH
12808: EMPTY
12809: LIST
12810: LIST
12811: PUSH
12812: EMPTY
12813: LIST
12814: LIST
12815: PPUSH
12816: CALL_OW 69
12820: AND
12821: IFFALSE 13353
12823: GO 12825
12825: DISABLE
// begin ChangeSideFog ( 4 , 1 ) ;
12826: LD_INT 4
12828: PPUSH
12829: LD_INT 1
12831: PPUSH
12832: CALL_OW 343
// DialogueOn ;
12836: CALL_OW 6
// CenterNowOnUnits ( allyCommander ) ;
12840: LD_EXP 11
12844: PPUSH
12845: CALL_OW 87
// SayRadio ( allyCommander , DM-1-Contact ) ;
12849: LD_EXP 11
12853: PPUSH
12854: LD_STRING DM-1-Contact
12856: PPUSH
12857: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Contact ) ;
12861: LD_EXP 9
12865: PPUSH
12866: LD_STRING D
12868: PUSH
12869: LD_STRING I
12871: PUSH
12872: LD_STRING J
12874: PUSH
12875: LD_STRING S
12877: PUSH
12878: EMPTY
12879: LIST
12880: LIST
12881: LIST
12882: PUSH
12883: LD_EXP 25
12887: ARRAY
12888: STR
12889: PUSH
12890: LD_STRING -1-Contact
12892: STR
12893: PPUSH
12894: CALL_OW 88
// if commander = 1 then
12898: LD_EXP 25
12902: PUSH
12903: LD_INT 1
12905: EQUAL
12906: IFFALSE 13038
// begin SayRadio ( allyCommander , DM-2-Contact ) ;
12908: LD_EXP 11
12912: PPUSH
12913: LD_STRING DM-2-Contact
12915: PPUSH
12916: CALL_OW 94
// Say ( playerCommander , DI-2-Contact ) ;
12920: LD_EXP 9
12924: PPUSH
12925: LD_STRING DI-2-Contact
12927: PPUSH
12928: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) and GetAttitude ( 8 , 1 ) = att_enemy then
12932: LD_INT 22
12934: PUSH
12935: LD_INT 8
12937: PUSH
12938: EMPTY
12939: LIST
12940: LIST
12941: PUSH
12942: LD_INT 21
12944: PUSH
12945: LD_INT 1
12947: PUSH
12948: EMPTY
12949: LIST
12950: LIST
12951: PUSH
12952: EMPTY
12953: LIST
12954: LIST
12955: PPUSH
12956: CALL_OW 69
12960: PUSH
12961: LD_INT 8
12963: PPUSH
12964: LD_INT 1
12966: PPUSH
12967: CALL_OW 81
12971: PUSH
12972: LD_INT 2
12974: EQUAL
12975: AND
12976: IFFALSE 13002
// begin SayRadio ( allyCommander , DM-3-Contact ) ;
12978: LD_EXP 11
12982: PPUSH
12983: LD_STRING DM-3-Contact
12985: PPUSH
12986: CALL_OW 94
// Say ( playerCommander , DI-3-Contact ) ;
12990: LD_EXP 9
12994: PPUSH
12995: LD_STRING DI-3-Contact
12997: PPUSH
12998: CALL_OW 88
// end ; SayRadio ( allyCommander , DM-4-Contact ) ;
13002: LD_EXP 11
13006: PPUSH
13007: LD_STRING DM-4-Contact
13009: PPUSH
13010: CALL_OW 94
// Say ( playerCommander , DI-4-Contact ) ;
13014: LD_EXP 9
13018: PPUSH
13019: LD_STRING DI-4-Contact
13021: PPUSH
13022: CALL_OW 88
// SayRadio ( allyCommander , DM-5-Contact ) ;
13026: LD_EXP 11
13030: PPUSH
13031: LD_STRING DM-5-Contact
13033: PPUSH
13034: CALL_OW 94
// end ; if commander = 2 then
13038: LD_EXP 25
13042: PUSH
13043: LD_INT 2
13045: EQUAL
13046: IFFALSE 13178
// begin SayRadio ( allyCommander , DM-2c-Contact ) ;
13048: LD_EXP 11
13052: PPUSH
13053: LD_STRING DM-2c-Contact
13055: PPUSH
13056: CALL_OW 94
// Say ( playerCommander , DJ-2-Contact ) ;
13060: LD_EXP 9
13064: PPUSH
13065: LD_STRING DJ-2-Contact
13067: PPUSH
13068: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) and GetAttitude ( 8 , 1 ) = att_enemy then
13072: LD_INT 22
13074: PUSH
13075: LD_INT 8
13077: PUSH
13078: EMPTY
13079: LIST
13080: LIST
13081: PUSH
13082: LD_INT 21
13084: PUSH
13085: LD_INT 1
13087: PUSH
13088: EMPTY
13089: LIST
13090: LIST
13091: PUSH
13092: EMPTY
13093: LIST
13094: LIST
13095: PPUSH
13096: CALL_OW 69
13100: PUSH
13101: LD_INT 8
13103: PPUSH
13104: LD_INT 1
13106: PPUSH
13107: CALL_OW 81
13111: PUSH
13112: LD_INT 2
13114: EQUAL
13115: AND
13116: IFFALSE 13142
// begin SayRadio ( allyCommander , DM-3-Contact ) ;
13118: LD_EXP 11
13122: PPUSH
13123: LD_STRING DM-3-Contact
13125: PPUSH
13126: CALL_OW 94
// Say ( playerCommander , DJ-3-Contact ) ;
13130: LD_EXP 9
13134: PPUSH
13135: LD_STRING DJ-3-Contact
13137: PPUSH
13138: CALL_OW 88
// end ; SayRadio ( allyCommander , DM-4-Contact ) ;
13142: LD_EXP 11
13146: PPUSH
13147: LD_STRING DM-4-Contact
13149: PPUSH
13150: CALL_OW 94
// Say ( playerCommander , DJ-4-Contact ) ;
13154: LD_EXP 9
13158: PPUSH
13159: LD_STRING DJ-4-Contact
13161: PPUSH
13162: CALL_OW 88
// SayRadio ( allyCommander , DM-5a-Contact ) ;
13166: LD_EXP 11
13170: PPUSH
13171: LD_STRING DM-5a-Contact
13173: PPUSH
13174: CALL_OW 94
// end ; if commander = 3 then
13178: LD_EXP 25
13182: PUSH
13183: LD_INT 3
13185: EQUAL
13186: IFFALSE 13342
// begin SayRadio ( allyCommander , DM-2a-Contact ) ;
13188: LD_EXP 11
13192: PPUSH
13193: LD_STRING DM-2a-Contact
13195: PPUSH
13196: CALL_OW 94
// Say ( playerCommander , DS-2a-Contact ) ;
13200: LD_EXP 9
13204: PPUSH
13205: LD_STRING DS-2a-Contact
13207: PPUSH
13208: CALL_OW 88
// SayRadio ( allyCommander , DM-2b-Contact ) ;
13212: LD_EXP 11
13216: PPUSH
13217: LD_STRING DM-2b-Contact
13219: PPUSH
13220: CALL_OW 94
// Say ( playerCommander , DS-2b-Contact ) ;
13224: LD_EXP 9
13228: PPUSH
13229: LD_STRING DS-2b-Contact
13231: PPUSH
13232: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) and GetAttitude ( 8 , 1 ) = att_enemy then
13236: LD_INT 22
13238: PUSH
13239: LD_INT 8
13241: PUSH
13242: EMPTY
13243: LIST
13244: LIST
13245: PUSH
13246: LD_INT 21
13248: PUSH
13249: LD_INT 1
13251: PUSH
13252: EMPTY
13253: LIST
13254: LIST
13255: PUSH
13256: EMPTY
13257: LIST
13258: LIST
13259: PPUSH
13260: CALL_OW 69
13264: PUSH
13265: LD_INT 8
13267: PPUSH
13268: LD_INT 1
13270: PPUSH
13271: CALL_OW 81
13275: PUSH
13276: LD_INT 2
13278: EQUAL
13279: AND
13280: IFFALSE 13306
// begin SayRadio ( allyCommander , DM-3-Contact ) ;
13282: LD_EXP 11
13286: PPUSH
13287: LD_STRING DM-3-Contact
13289: PPUSH
13290: CALL_OW 94
// Say ( playerCommander , DS-3-Contact ) ;
13294: LD_EXP 9
13298: PPUSH
13299: LD_STRING DS-3-Contact
13301: PPUSH
13302: CALL_OW 88
// end ; SayRadio ( allyCommander , DM-4-Contact ) ;
13306: LD_EXP 11
13310: PPUSH
13311: LD_STRING DM-4-Contact
13313: PPUSH
13314: CALL_OW 94
// Say ( playerCommander , DS-4-Contact ) ;
13318: LD_EXP 9
13322: PPUSH
13323: LD_STRING DS-4-Contact
13325: PPUSH
13326: CALL_OW 88
// SayRadio ( allyCommander , DM-5-Contact ) ;
13330: LD_EXP 11
13334: PPUSH
13335: LD_STRING DM-5-Contact
13337: PPUSH
13338: CALL_OW 94
// end ; DialogueOff ;
13342: CALL_OW 7
// ChangeMissionObjectives ( O3 ) ;
13346: LD_STRING O3
13348: PPUSH
13349: CALL_OW 337
// end ;
13353: END
// every 0 0$10 trigger GameType = 1 and legDestCounter >= [ 15 , 20 , 25 ] [ Difficulty ] and FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_warehouse ] ] ) and FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] ] ) >= 5 do var time , sib , sources , i ;
13354: LD_EXP 2
13358: PUSH
13359: LD_INT 1
13361: EQUAL
13362: PUSH
13363: LD_EXP 18
13367: PUSH
13368: LD_INT 15
13370: PUSH
13371: LD_INT 20
13373: PUSH
13374: LD_INT 25
13376: PUSH
13377: EMPTY
13378: LIST
13379: LIST
13380: LIST
13381: PUSH
13382: LD_OWVAR 67
13386: ARRAY
13387: GREATEREQUAL
13388: AND
13389: PUSH
13390: LD_INT 22
13392: PUSH
13393: LD_INT 8
13395: PUSH
13396: EMPTY
13397: LIST
13398: LIST
13399: PUSH
13400: LD_INT 30
13402: PUSH
13403: LD_INT 1
13405: PUSH
13406: EMPTY
13407: LIST
13408: LIST
13409: PUSH
13410: EMPTY
13411: LIST
13412: LIST
13413: PPUSH
13414: CALL_OW 69
13418: AND
13419: PUSH
13420: LD_INT 22
13422: PUSH
13423: LD_INT 8
13425: PUSH
13426: EMPTY
13427: LIST
13428: LIST
13429: PUSH
13430: LD_INT 21
13432: PUSH
13433: LD_INT 3
13435: PUSH
13436: EMPTY
13437: LIST
13438: LIST
13439: PUSH
13440: EMPTY
13441: LIST
13442: LIST
13443: PPUSH
13444: CALL_OW 69
13448: PUSH
13449: LD_INT 5
13451: GREATEREQUAL
13452: AND
13453: IFFALSE 13976
13455: GO 13457
13457: DISABLE
13458: LD_INT 0
13460: PPUSH
13461: PPUSH
13462: PPUSH
13463: PPUSH
// begin DialogueOn ;
13464: CALL_OW 6
// SayRadio ( Farmer , DF-1-Leg ) ;
13468: LD_EXP 13
13472: PPUSH
13473: LD_STRING DF-1-Leg
13475: PPUSH
13476: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Leg ) ;
13480: LD_EXP 9
13484: PPUSH
13485: LD_STRING D
13487: PUSH
13488: LD_STRING I
13490: PUSH
13491: LD_STRING J
13493: PUSH
13494: LD_STRING S
13496: PUSH
13497: EMPTY
13498: LIST
13499: LIST
13500: LIST
13501: PUSH
13502: LD_EXP 25
13506: ARRAY
13507: STR
13508: PUSH
13509: LD_STRING -1-Leg
13511: STR
13512: PPUSH
13513: CALL_OW 88
// SayRadio ( Farmer , DF-2-Leg ) ;
13517: LD_EXP 13
13521: PPUSH
13522: LD_STRING DF-2-Leg
13524: PPUSH
13525: CALL_OW 94
// DialogueOff ;
13529: CALL_OW 7
// case Query ( QLegionOffer ) of 1 :
13533: LD_STRING QLegionOffer
13535: PPUSH
13536: CALL_OW 97
13540: PUSH
13541: LD_INT 1
13543: DOUBLE
13544: EQUAL
13545: IFTRUE 13549
13547: GO 13552
13549: POP
// ; 2 :
13550: GO 13566
13552: LD_INT 2
13554: DOUBLE
13555: EQUAL
13556: IFTRUE 13560
13558: GO 13565
13560: POP
// exit ; end ;
13561: GO 13976
13563: GO 13566
13565: POP
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -2-Leg ) ;
13566: LD_EXP 9
13570: PPUSH
13571: LD_STRING D
13573: PUSH
13574: LD_STRING I
13576: PUSH
13577: LD_STRING J
13579: PUSH
13580: LD_STRING S
13582: PUSH
13583: EMPTY
13584: LIST
13585: LIST
13586: LIST
13587: PUSH
13588: LD_EXP 25
13592: ARRAY
13593: STR
13594: PUSH
13595: LD_STRING -2-Leg
13597: STR
13598: PPUSH
13599: CALL_OW 88
// legOfferAccepted := true ;
13603: LD_ADDR_EXP 20
13607: PUSH
13608: LD_INT 1
13610: ST_TO_ADDR
// SetAreaMapShow ( legOfferArea , 1 ) ;
13611: LD_INT 21
13613: PPUSH
13614: LD_INT 1
13616: PPUSH
13617: CALL_OW 424
// CenterOnXY ( 190 , 227 ) ;
13621: LD_INT 190
13623: PPUSH
13624: LD_INT 227
13626: PPUSH
13627: CALL_OW 84
// time := [ 8 8$00 , 7 7$00 , 6 6$00 ] [ Difficulty ] ;
13631: LD_ADDR_VAR 0 1
13635: PUSH
13636: LD_INT 16800
13638: PUSH
13639: LD_INT 14700
13641: PUSH
13642: LD_INT 12600
13644: PUSH
13645: EMPTY
13646: LIST
13647: LIST
13648: LIST
13649: PUSH
13650: LD_OWVAR 67
13654: ARRAY
13655: ST_TO_ADDR
// sib := 100 ;
13656: LD_ADDR_VAR 0 2
13660: PUSH
13661: LD_INT 100
13663: ST_TO_ADDR
// disableGlobalTimer := true ;
13664: LD_ADDR_EXP 4
13668: PUSH
13669: LD_INT 1
13671: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13672: LD_INT 35
13674: PPUSH
13675: CALL_OW 67
// time := time - 0 0$1 ;
13679: LD_ADDR_VAR 0 1
13683: PUSH
13684: LD_VAR 0 1
13688: PUSH
13689: LD_INT 35
13691: MINUS
13692: ST_TO_ADDR
// sources := GetResourceArea ( legOfferArea , mat_siberit ) ;
13693: LD_ADDR_VAR 0 3
13697: PUSH
13698: LD_INT 21
13700: PPUSH
13701: LD_INT 3
13703: PPUSH
13704: CALL_OW 287
13708: ST_TO_ADDR
// display_strings := [ #SkrTime , tick , #Skr-LegOffer , sib , time ] ;
13709: LD_ADDR_OWVAR 47
13713: PUSH
13714: LD_STRING #SkrTime
13716: PUSH
13717: LD_OWVAR 1
13721: PUSH
13722: LD_STRING #Skr-LegOffer
13724: PUSH
13725: LD_VAR 0 2
13729: PUSH
13730: LD_VAR 0 1
13734: PUSH
13735: EMPTY
13736: LIST
13737: LIST
13738: LIST
13739: LIST
13740: LIST
13741: ST_TO_ADDR
// if sources then
13742: LD_VAR 0 3
13746: IFFALSE 13778
// begin sib := sib - sources * 10 ;
13748: LD_ADDR_VAR 0 2
13752: PUSH
13753: LD_VAR 0 2
13757: PUSH
13758: LD_VAR 0 3
13762: PUSH
13763: LD_INT 10
13765: MUL
13766: MINUS
13767: ST_TO_ADDR
// EraseResourceArea ( legOfferArea , mat_siberit ) ;
13768: LD_INT 21
13770: PPUSH
13771: LD_INT 3
13773: PPUSH
13774: CALL_OW 286
// end ; until time = 0 0$00 or sib <= 0 or not FilterAllUnits ( [ f_side , 8 ] ) ;
13778: LD_VAR 0 1
13782: PUSH
13783: LD_INT 0
13785: EQUAL
13786: PUSH
13787: LD_VAR 0 2
13791: PUSH
13792: LD_INT 0
13794: LESSEQUAL
13795: OR
13796: PUSH
13797: LD_INT 22
13799: PUSH
13800: LD_INT 8
13802: PUSH
13803: EMPTY
13804: LIST
13805: LIST
13806: PPUSH
13807: CALL_OW 69
13811: NOT
13812: OR
13813: IFFALSE 13672
// SetAreaMapShow ( legOfferArea , 0 ) ;
13815: LD_INT 21
13817: PPUSH
13818: LD_INT 0
13820: PPUSH
13821: CALL_OW 424
// disableGlobalTimer := false ;
13825: LD_ADDR_EXP 4
13829: PUSH
13830: LD_INT 0
13832: ST_TO_ADDR
// if sib <= 0 then
13833: LD_VAR 0 2
13837: PUSH
13838: LD_INT 0
13840: LESSEQUAL
13841: IFFALSE 13957
// begin legChangeSide := true ;
13843: LD_ADDR_EXP 21
13847: PUSH
13848: LD_INT 1
13850: ST_TO_ADDR
// SayRadio ( Farmer , DF-4y-Leg ) ;
13851: LD_EXP 13
13855: PPUSH
13856: LD_STRING DF-4y-Leg
13858: PPUSH
13859: CALL_OW 94
// ChangeMissionObjectives ( O3a ) ;
13863: LD_STRING O3a
13865: PPUSH
13866: CALL_OW 337
// ChangeSideFog ( 8 , 1 ) ;
13870: LD_INT 8
13872: PPUSH
13873: LD_INT 1
13875: PPUSH
13876: CALL_OW 343
// SetAttitude ( 8 , 1 , att_friend , true ) ;
13880: LD_INT 8
13882: PPUSH
13883: LD_INT 1
13885: PPUSH
13886: LD_INT 1
13888: PPUSH
13889: LD_INT 1
13891: PPUSH
13892: CALL_OW 80
// SetAttitude ( 8 , 4 , att_friend , true ) ;
13896: LD_INT 8
13898: PPUSH
13899: LD_INT 4
13901: PPUSH
13902: LD_INT 1
13904: PPUSH
13905: LD_INT 1
13907: PPUSH
13908: CALL_OW 80
// SetAttitude ( 8 , 6 , att_enemy , true ) ;
13912: LD_INT 8
13914: PPUSH
13915: LD_INT 6
13917: PPUSH
13918: LD_INT 2
13920: PPUSH
13921: LD_INT 1
13923: PPUSH
13924: CALL_OW 80
// SetAttitude ( 8 , 3 , att_enemy , true ) ;
13928: LD_INT 8
13930: PPUSH
13931: LD_INT 3
13933: PPUSH
13934: LD_INT 2
13936: PPUSH
13937: LD_INT 1
13939: PPUSH
13940: CALL_OW 80
// wait ( 0 0$30 ) ;
13944: LD_INT 1050
13946: PPUSH
13947: CALL_OW 67
// PrepareLegionReinforcements ;
13951: CALL 10247 0 0
// end else
13955: GO 13976
// begin ChangeMissionObjectives ( O3a ) ;
13957: LD_STRING O3a
13959: PPUSH
13960: CALL_OW 337
// SayRadio ( Farmer , DF-4n-Leg ) ;
13964: LD_EXP 13
13968: PPUSH
13969: LD_STRING DF-4n-Leg
13971: PPUSH
13972: CALL_OW 94
// end ; end ;
13976: PPOPN 4
13978: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) = 0 and GetAttitude ( 8 , 1 ) = att_enemy do
13979: LD_INT 22
13981: PUSH
13982: LD_INT 8
13984: PUSH
13985: EMPTY
13986: LIST
13987: LIST
13988: PUSH
13989: LD_INT 21
13991: PUSH
13992: LD_INT 1
13994: PUSH
13995: EMPTY
13996: LIST
13997: LIST
13998: PUSH
13999: EMPTY
14000: LIST
14001: LIST
14002: PPUSH
14003: CALL_OW 69
14007: PUSH
14008: LD_INT 0
14010: EQUAL
14011: PUSH
14012: LD_INT 8
14014: PPUSH
14015: LD_INT 1
14017: PPUSH
14018: CALL_OW 81
14022: PUSH
14023: LD_INT 2
14025: EQUAL
14026: AND
14027: IFFALSE 14039
14029: GO 14031
14031: DISABLE
// ChangeMissionObjectives ( O3a ) ;
14032: LD_STRING O3a
14034: PPUSH
14035: CALL_OW 337
14039: END
// every 0 0$1 trigger GameType = 1 and game and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) = 0 do
14040: LD_EXP 2
14044: PUSH
14045: LD_INT 1
14047: EQUAL
14048: PUSH
14049: LD_EXP 3
14053: AND
14054: PUSH
14055: LD_INT 22
14057: PUSH
14058: LD_INT 3
14060: PUSH
14061: EMPTY
14062: LIST
14063: LIST
14064: PUSH
14065: LD_INT 21
14067: PUSH
14068: LD_INT 1
14070: PUSH
14071: EMPTY
14072: LIST
14073: LIST
14074: PUSH
14075: EMPTY
14076: LIST
14077: LIST
14078: PPUSH
14079: CALL_OW 69
14083: PUSH
14084: LD_INT 0
14086: EQUAL
14087: AND
14088: PUSH
14089: LD_INT 22
14091: PUSH
14092: LD_INT 3
14094: PUSH
14095: EMPTY
14096: LIST
14097: LIST
14098: PUSH
14099: LD_INT 30
14101: PUSH
14102: LD_INT 1
14104: PUSH
14105: EMPTY
14106: LIST
14107: LIST
14108: PUSH
14109: EMPTY
14110: LIST
14111: LIST
14112: PPUSH
14113: CALL_OW 69
14117: PUSH
14118: LD_INT 0
14120: EQUAL
14121: AND
14122: IFFALSE 14360
14124: GO 14126
14126: DISABLE
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Win ) ;
14127: LD_EXP 9
14131: PPUSH
14132: LD_STRING D
14134: PUSH
14135: LD_STRING I
14137: PUSH
14138: LD_STRING J
14140: PUSH
14141: LD_STRING S
14143: PUSH
14144: EMPTY
14145: LIST
14146: LIST
14147: LIST
14148: PUSH
14149: LD_EXP 25
14153: ARRAY
14154: STR
14155: PUSH
14156: LD_STRING -1-Win
14158: STR
14159: PPUSH
14160: CALL_OW 88
// if tick >= [ 150 150$0 , 130 130$0 , 110 110$0 ] [ Difficulty ] then
14164: LD_OWVAR 1
14168: PUSH
14169: LD_INT 315000
14171: PUSH
14172: LD_INT 273000
14174: PUSH
14175: LD_INT 231000
14177: PUSH
14178: EMPTY
14179: LIST
14180: LIST
14181: LIST
14182: PUSH
14183: LD_OWVAR 67
14187: ARRAY
14188: GREATEREQUAL
14189: IFFALSE 14204
// AddMedal ( med1 , - 1 ) else
14191: LD_STRING med1
14193: PPUSH
14194: LD_INT 1
14196: NEG
14197: PPUSH
14198: CALL_OW 101
14202: GO 14214
// AddMedal ( med1 , 1 ) ;
14204: LD_STRING med1
14206: PPUSH
14207: LD_INT 1
14209: PPUSH
14210: CALL_OW 101
// if allyDestCounter >= [ 20 , 15 , 10 ] [ Difficulty ] then
14214: LD_EXP 22
14218: PUSH
14219: LD_INT 20
14221: PUSH
14222: LD_INT 15
14224: PUSH
14225: LD_INT 10
14227: PUSH
14228: EMPTY
14229: LIST
14230: LIST
14231: LIST
14232: PUSH
14233: LD_OWVAR 67
14237: ARRAY
14238: GREATEREQUAL
14239: IFFALSE 14254
// AddMedal ( med2 , - 1 ) else
14241: LD_STRING med2
14243: PPUSH
14244: LD_INT 1
14246: NEG
14247: PPUSH
14248: CALL_OW 101
14252: GO 14264
// AddMedal ( med2 , 1 ) ;
14254: LD_STRING med2
14256: PPUSH
14257: LD_INT 1
14259: PPUSH
14260: CALL_OW 101
// if GetAttitude ( 8 , 1 ) = att_friend then
14264: LD_INT 8
14266: PPUSH
14267: LD_INT 1
14269: PPUSH
14270: CALL_OW 81
14274: PUSH
14275: LD_INT 1
14277: EQUAL
14278: IFFALSE 14292
// AddMedal ( med3 , 1 ) else
14280: LD_STRING med3
14282: PPUSH
14283: LD_INT 1
14285: PPUSH
14286: CALL_OW 101
14290: GO 14349
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) = 0 then
14292: LD_INT 22
14294: PUSH
14295: LD_INT 8
14297: PUSH
14298: EMPTY
14299: LIST
14300: LIST
14301: PUSH
14302: LD_INT 21
14304: PUSH
14305: LD_INT 1
14307: PUSH
14308: EMPTY
14309: LIST
14310: LIST
14311: PUSH
14312: EMPTY
14313: LIST
14314: LIST
14315: PPUSH
14316: CALL_OW 69
14320: PUSH
14321: LD_INT 0
14323: EQUAL
14324: IFFALSE 14338
// AddMedal ( med3 , 2 ) else
14326: LD_STRING med3
14328: PPUSH
14329: LD_INT 2
14331: PPUSH
14332: CALL_OW 101
14336: GO 14349
// AddMedal ( med3 , - 1 ) ;
14338: LD_STRING med3
14340: PPUSH
14341: LD_INT 1
14343: NEG
14344: PPUSH
14345: CALL_OW 101
// GiveMedals ( MAIN ) ;
14349: LD_STRING MAIN
14351: PPUSH
14352: CALL_OW 102
// YouWin ;
14356: CALL_OW 103
// end ;
14360: END
// every 10 trigger GameType = 1 and staticMines and FilterUnitsInArea ( minesArea , [ f_enemy , 8 ] ) do var i , j , tmp , x , y ;
14361: LD_EXP 2
14365: PUSH
14366: LD_INT 1
14368: EQUAL
14369: PUSH
14370: LD_EXP 16
14374: AND
14375: PUSH
14376: LD_INT 20
14378: PPUSH
14379: LD_INT 81
14381: PUSH
14382: LD_INT 8
14384: PUSH
14385: EMPTY
14386: LIST
14387: LIST
14388: PPUSH
14389: CALL_OW 70
14393: AND
14394: IFFALSE 14673
14396: GO 14398
14398: DISABLE
14399: LD_INT 0
14401: PPUSH
14402: PPUSH
14403: PPUSH
14404: PPUSH
14405: PPUSH
// begin enable ;
14406: ENABLE
// tmp := FilterUnitsInArea ( minesArea , [ f_enemy , 8 ] ) ;
14407: LD_ADDR_VAR 0 3
14411: PUSH
14412: LD_INT 20
14414: PPUSH
14415: LD_INT 81
14417: PUSH
14418: LD_INT 8
14420: PUSH
14421: EMPTY
14422: LIST
14423: LIST
14424: PPUSH
14425: CALL_OW 70
14429: ST_TO_ADDR
// if not tmp then
14430: LD_VAR 0 3
14434: NOT
14435: IFFALSE 14439
// exit ;
14437: GO 14673
// for i in tmp do
14439: LD_ADDR_VAR 0 1
14443: PUSH
14444: LD_VAR 0 3
14448: PUSH
14449: FOR_IN
14450: IFFALSE 14671
// begin x := GetX ( i ) ;
14452: LD_ADDR_VAR 0 4
14456: PUSH
14457: LD_VAR 0 1
14461: PPUSH
14462: CALL_OW 250
14466: ST_TO_ADDR
// y := GetY ( i ) ;
14467: LD_ADDR_VAR 0 5
14471: PUSH
14472: LD_VAR 0 1
14476: PPUSH
14477: CALL_OW 251
14481: ST_TO_ADDR
// if MineAtPos ( x , y ) then
14482: LD_VAR 0 4
14486: PPUSH
14487: LD_VAR 0 5
14491: PPUSH
14492: CALL_OW 458
14496: IFFALSE 14669
// begin LaunchMineAtPos ( x , y , 8 ) ;
14498: LD_VAR 0 4
14502: PPUSH
14503: LD_VAR 0 5
14507: PPUSH
14508: LD_INT 8
14510: PPUSH
14511: CALL_OW 456
// if not dialogueMineDetected then
14515: LD_EXP 28
14519: NOT
14520: IFFALSE 14581
// begin CenterNowOnXY ( x , y ) ;
14522: LD_VAR 0 4
14526: PPUSH
14527: LD_VAR 0 5
14531: PPUSH
14532: CALL_OW 86
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Mine ) ;
14536: LD_EXP 9
14540: PPUSH
14541: LD_STRING D
14543: PUSH
14544: LD_STRING I
14546: PUSH
14547: LD_STRING J
14549: PUSH
14550: LD_STRING S
14552: PUSH
14553: EMPTY
14554: LIST
14555: LIST
14556: LIST
14557: PUSH
14558: LD_EXP 25
14562: ARRAY
14563: STR
14564: PUSH
14565: LD_STRING -1-Mine
14567: STR
14568: PPUSH
14569: CALL_OW 88
// dialogueMineDetected := true ;
14573: LD_ADDR_EXP 28
14577: PUSH
14578: LD_INT 1
14580: ST_TO_ADDR
// end ; for j = 1 to staticMines do
14581: LD_ADDR_VAR 0 2
14585: PUSH
14586: DOUBLE
14587: LD_INT 1
14589: DEC
14590: ST_TO_ADDR
14591: LD_EXP 16
14595: PUSH
14596: FOR_TO
14597: IFFALSE 14667
// if staticMines [ j ] [ 1 ] = x and staticMines [ j ] [ 2 ] = y then
14599: LD_EXP 16
14603: PUSH
14604: LD_VAR 0 2
14608: ARRAY
14609: PUSH
14610: LD_INT 1
14612: ARRAY
14613: PUSH
14614: LD_VAR 0 4
14618: EQUAL
14619: PUSH
14620: LD_EXP 16
14624: PUSH
14625: LD_VAR 0 2
14629: ARRAY
14630: PUSH
14631: LD_INT 2
14633: ARRAY
14634: PUSH
14635: LD_VAR 0 5
14639: EQUAL
14640: AND
14641: IFFALSE 14665
// begin staticMines := Delete ( staticMines , j ) ;
14643: LD_ADDR_EXP 16
14647: PUSH
14648: LD_EXP 16
14652: PPUSH
14653: LD_VAR 0 2
14657: PPUSH
14658: CALL_OW 3
14662: ST_TO_ADDR
// break ;
14663: GO 14667
// end ;
14665: GO 14596
14667: POP
14668: POP
// end ; end ;
14669: GO 14449
14671: POP
14672: POP
// end ;
14673: PPOPN 5
14675: END
// every 30 30$00 + 50 50$00 trigger GameType = 1 and game and sibBombAllowed and UnitFilter ( mc_bases [ mc_rus_1 ] , [ f_btype , b_factory ] ) do var bomb , e ;
14676: LD_EXP 2
14680: PUSH
14681: LD_INT 1
14683: EQUAL
14684: PUSH
14685: LD_EXP 3
14689: AND
14690: PUSH
14691: LD_EXP 23
14695: AND
14696: PUSH
14697: LD_EXP 46
14701: PUSH
14702: LD_EXP 7
14706: ARRAY
14707: PPUSH
14708: LD_INT 30
14710: PUSH
14711: LD_INT 3
14713: PUSH
14714: EMPTY
14715: LIST
14716: LIST
14717: PPUSH
14718: CALL_OW 72
14722: AND
14723: IFFALSE 14927
14725: GO 14727
14727: DISABLE
14728: LD_INT 0
14730: PPUSH
14731: PPUSH
// begin enable ;
14732: ENABLE
// MC_InsertProduceList ( mc_rus_1 , [ [ ru_heavy_wheeled , engine_siberite , control_computer , ru_siberium_rocket ] ] ) ;
14733: LD_EXP 7
14737: PPUSH
14738: LD_INT 23
14740: PUSH
14741: LD_INT 3
14743: PUSH
14744: LD_INT 3
14746: PUSH
14747: LD_INT 48
14749: PUSH
14750: EMPTY
14751: LIST
14752: LIST
14753: LIST
14754: LIST
14755: PUSH
14756: EMPTY
14757: LIST
14758: PPUSH
14759: CALL 79524 0 2
// repeat wait ( 0 0$1 ) ;
14763: LD_INT 35
14765: PPUSH
14766: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) ;
14770: LD_INT 22
14772: PUSH
14773: LD_INT 3
14775: PUSH
14776: EMPTY
14777: LIST
14778: LIST
14779: PUSH
14780: LD_INT 34
14782: PUSH
14783: LD_INT 48
14785: PUSH
14786: EMPTY
14787: LIST
14788: LIST
14789: PUSH
14790: EMPTY
14791: LIST
14792: LIST
14793: PPUSH
14794: CALL_OW 69
14798: IFFALSE 14763
// bomb := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) ;
14800: LD_ADDR_VAR 0 1
14804: PUSH
14805: LD_INT 22
14807: PUSH
14808: LD_INT 3
14810: PUSH
14811: EMPTY
14812: LIST
14813: LIST
14814: PUSH
14815: LD_INT 34
14817: PUSH
14818: LD_INT 48
14820: PUSH
14821: EMPTY
14822: LIST
14823: LIST
14824: PUSH
14825: EMPTY
14826: LIST
14827: LIST
14828: PPUSH
14829: CALL_OW 69
14833: ST_TO_ADDR
// e := FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_type , unit_building ] ] ) ;
14834: LD_ADDR_VAR 0 2
14838: PUSH
14839: LD_INT 81
14841: PUSH
14842: LD_INT 3
14844: PUSH
14845: EMPTY
14846: LIST
14847: LIST
14848: PUSH
14849: LD_INT 21
14851: PUSH
14852: LD_INT 3
14854: PUSH
14855: EMPTY
14856: LIST
14857: LIST
14858: PUSH
14859: EMPTY
14860: LIST
14861: LIST
14862: PPUSH
14863: CALL_OW 69
14867: ST_TO_ADDR
// if e then
14868: LD_VAR 0 2
14872: IFFALSE 14898
// e := NearestUnitToUnit ( e , bomb [ 1 ] ) ;
14874: LD_ADDR_VAR 0 2
14878: PUSH
14879: LD_VAR 0 2
14883: PPUSH
14884: LD_VAR 0 1
14888: PUSH
14889: LD_INT 1
14891: ARRAY
14892: PPUSH
14893: CALL_OW 74
14897: ST_TO_ADDR
// ComAttackPlace ( bomb , GetX ( e ) , GetY ( e ) ) ;
14898: LD_VAR 0 1
14902: PPUSH
14903: LD_VAR 0 2
14907: PPUSH
14908: CALL_OW 250
14912: PPUSH
14913: LD_VAR 0 2
14917: PPUSH
14918: CALL_OW 251
14922: PPUSH
14923: CALL_OW 116
// end ;
14927: PPOPN 2
14929: END
// every 0 0$2 trigger Difficulty > 1 and UnitFilter ( mc_bases [ mc_rus_1 ] , [ f_class , 3 ] ) and GameType = 1 and game and GetTech ( tech_Behemoth , 3 ) = state_researched do var tmp , i ;
14930: LD_OWVAR 67
14934: PUSH
14935: LD_INT 1
14937: GREATER
14938: PUSH
14939: LD_EXP 46
14943: PUSH
14944: LD_EXP 7
14948: ARRAY
14949: PPUSH
14950: LD_INT 25
14952: PUSH
14953: LD_INT 3
14955: PUSH
14956: EMPTY
14957: LIST
14958: LIST
14959: PPUSH
14960: CALL_OW 72
14964: AND
14965: PUSH
14966: LD_EXP 2
14970: PUSH
14971: LD_INT 1
14973: EQUAL
14974: AND
14975: PUSH
14976: LD_EXP 3
14980: AND
14981: PUSH
14982: LD_INT 23
14984: PPUSH
14985: LD_INT 3
14987: PPUSH
14988: CALL_OW 321
14992: PUSH
14993: LD_INT 2
14995: EQUAL
14996: AND
14997: IFFALSE 15124
14999: GO 15001
15001: DISABLE
15002: LD_INT 0
15004: PPUSH
15005: PPUSH
// begin tmp := UnitFilter ( mc_bases [ mc_rus_1 ] , [ f_class , 3 ] ) ;
15006: LD_ADDR_VAR 0 1
15010: PUSH
15011: LD_EXP 46
15015: PUSH
15016: LD_EXP 7
15020: ARRAY
15021: PPUSH
15022: LD_INT 25
15024: PUSH
15025: LD_INT 3
15027: PUSH
15028: EMPTY
15029: LIST
15030: LIST
15031: PPUSH
15032: CALL_OW 72
15036: ST_TO_ADDR
// if not tmp then
15037: LD_VAR 0 1
15041: NOT
15042: IFFALSE 15046
// exit ;
15044: GO 15124
// for i in tmp do
15046: LD_ADDR_VAR 0 2
15050: PUSH
15051: LD_VAR 0 1
15055: PUSH
15056: FOR_IN
15057: IFFALSE 15103
// begin SetTag ( i , 29 ) ;
15059: LD_VAR 0 2
15063: PPUSH
15064: LD_INT 29
15066: PPUSH
15067: CALL_OW 109
// ComExitBuilding ( i ) ;
15071: LD_VAR 0 2
15075: PPUSH
15076: CALL_OW 122
// AddComBuildBehemoth ( i , b_behemoth , 97 , 133 , 0 ) ;
15080: LD_VAR 0 2
15084: PPUSH
15085: LD_INT 37
15087: PPUSH
15088: LD_INT 97
15090: PPUSH
15091: LD_INT 133
15093: PPUSH
15094: LD_INT 0
15096: PPUSH
15097: CALL_OW 230
// end ;
15101: GO 15056
15103: POP
15104: POP
// wait ( 1 1$00 ) ;
15105: LD_INT 2100
15107: PPUSH
15108: CALL_OW 67
// MC_Reset ( mc_rus_1 , 29 ) ;
15112: LD_EXP 7
15116: PPUSH
15117: LD_INT 29
15119: PPUSH
15120: CALL 59923 0 2
// end ;
15124: PPOPN 2
15126: END
// every 7 7$00 trigger GameType = 1 and GetBType ( HexInfo ( 84 , 128 ) ) = b_warehouse and GetSide ( HexInfo ( 84 , 128 ) ) = 3 do var veh , depot ;
15127: LD_EXP 2
15131: PUSH
15132: LD_INT 1
15134: EQUAL
15135: PUSH
15136: LD_INT 84
15138: PPUSH
15139: LD_INT 128
15141: PPUSH
15142: CALL_OW 428
15146: PPUSH
15147: CALL_OW 266
15151: PUSH
15152: LD_INT 1
15154: EQUAL
15155: AND
15156: PUSH
15157: LD_INT 84
15159: PPUSH
15160: LD_INT 128
15162: PPUSH
15163: CALL_OW 428
15167: PPUSH
15168: CALL_OW 255
15172: PUSH
15173: LD_INT 3
15175: EQUAL
15176: AND
15177: IFFALSE 15350
15179: GO 15181
15181: DISABLE
15182: LD_INT 0
15184: PPUSH
15185: PPUSH
// begin enable ;
15186: ENABLE
// depot := HexInfo ( 84 , 128 ) ;
15187: LD_ADDR_VAR 0 2
15191: PUSH
15192: LD_INT 84
15194: PPUSH
15195: LD_INT 128
15197: PPUSH
15198: CALL_OW 428
15202: ST_TO_ADDR
// uc_side := 3 ;
15203: LD_ADDR_OWVAR 20
15207: PUSH
15208: LD_INT 3
15210: ST_TO_ADDR
// uc_nation := 3 ;
15211: LD_ADDR_OWVAR 21
15215: PUSH
15216: LD_INT 3
15218: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_siberite , control_computer , ru_cargo_bay , 0 ) ;
15219: LD_INT 21
15221: PPUSH
15222: LD_INT 3
15224: PPUSH
15225: LD_INT 3
15227: PPUSH
15228: LD_INT 51
15230: PPUSH
15231: LD_INT 0
15233: PPUSH
15234: CALL 24172 0 5
// veh := CreateVehicle ;
15238: LD_ADDR_VAR 0 1
15242: PUSH
15243: CALL_OW 45
15247: ST_TO_ADDR
// PlaceUnitXY ( veh , 126 , 227 , false ) ;
15248: LD_VAR 0 1
15252: PPUSH
15253: LD_INT 126
15255: PPUSH
15256: LD_INT 227
15258: PPUSH
15259: LD_INT 0
15261: PPUSH
15262: CALL_OW 48
// SetCargo ( veh , mat_oil , 100 ) ;
15266: LD_VAR 0 1
15270: PPUSH
15271: LD_INT 2
15273: PPUSH
15274: LD_INT 100
15276: PPUSH
15277: CALL_OW 290
// ComGive ( veh , depot ) ;
15281: LD_VAR 0 1
15285: PPUSH
15286: LD_VAR 0 2
15290: PPUSH
15291: CALL_OW 161
// AddComMoveXY ( veh , 126 , 227 ) ;
15295: LD_VAR 0 1
15299: PPUSH
15300: LD_INT 126
15302: PPUSH
15303: LD_INT 227
15305: PPUSH
15306: CALL_OW 171
// wait ( 0 0$10 ) ;
15310: LD_INT 350
15312: PPUSH
15313: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
15317: LD_INT 35
15319: PPUSH
15320: CALL_OW 67
// until IsAt ( veh , 126 , 227 ) ;
15324: LD_VAR 0 1
15328: PPUSH
15329: LD_INT 126
15331: PPUSH
15332: LD_INT 227
15334: PPUSH
15335: CALL_OW 307
15339: IFFALSE 15317
// RemoveUnit ( veh ) ;
15341: LD_VAR 0 1
15345: PPUSH
15346: CALL_OW 64
// end ;
15350: PPOPN 2
15352: END
// every 9 9$00 trigger GameType = 1 and outpostEscape and commander = 2 do var veh , depot ;
15353: LD_EXP 2
15357: PUSH
15358: LD_INT 1
15360: EQUAL
15361: PUSH
15362: LD_EXP 27
15366: AND
15367: PUSH
15368: LD_EXP 25
15372: PUSH
15373: LD_INT 2
15375: EQUAL
15376: AND
15377: IFFALSE 15569
15379: GO 15381
15381: DISABLE
15382: LD_INT 0
15384: PPUSH
15385: PPUSH
// begin enable ;
15386: ENABLE
// if tick >= [ 50 50$00 , 40 40$00 , 30 30$00 ] [ Difficulty ] then
15387: LD_OWVAR 1
15391: PUSH
15392: LD_INT 105000
15394: PUSH
15395: LD_INT 84000
15397: PUSH
15398: LD_INT 63000
15400: PUSH
15401: EMPTY
15402: LIST
15403: LIST
15404: LIST
15405: PUSH
15406: LD_OWVAR 67
15410: ARRAY
15411: GREATEREQUAL
15412: IFFALSE 15415
// disable ;
15414: DISABLE
// uc_side := 4 ;
15415: LD_ADDR_OWVAR 20
15419: PUSH
15420: LD_INT 4
15422: ST_TO_ADDR
// uc_nation := 1 ;
15423: LD_ADDR_OWVAR 21
15427: PUSH
15428: LD_INT 1
15430: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_cargo_bay , 0 ) ;
15431: LD_INT 2
15433: PPUSH
15434: LD_INT 3
15436: PPUSH
15437: LD_INT 3
15439: PPUSH
15440: LD_INT 12
15442: PPUSH
15443: LD_INT 0
15445: PPUSH
15446: CALL 24172 0 5
// veh := CreateVehicle ;
15450: LD_ADDR_VAR 0 1
15454: PUSH
15455: CALL_OW 45
15459: ST_TO_ADDR
// PlaceUnitXY ( veh , 229 , 226 , false ) ;
15460: LD_VAR 0 1
15464: PPUSH
15465: LD_INT 229
15467: PPUSH
15468: LD_INT 226
15470: PPUSH
15471: LD_INT 0
15473: PPUSH
15474: CALL_OW 48
// SetCargo ( veh , mat_cans , 100 ) ;
15478: LD_VAR 0 1
15482: PPUSH
15483: LD_INT 1
15485: PPUSH
15486: LD_INT 100
15488: PPUSH
15489: CALL_OW 290
// AddComMoveToArea ( veh , ruOutpostArea ) ;
15493: LD_VAR 0 1
15497: PPUSH
15498: LD_INT 25
15500: PPUSH
15501: CALL_OW 173
// AddComUnload ( veh ) ;
15505: LD_VAR 0 1
15509: PPUSH
15510: CALL_OW 219
// AddComMoveXY ( veh , 229 , 226 ) ;
15514: LD_VAR 0 1
15518: PPUSH
15519: LD_INT 229
15521: PPUSH
15522: LD_INT 226
15524: PPUSH
15525: CALL_OW 171
// wait ( 0 0$10 ) ;
15529: LD_INT 350
15531: PPUSH
15532: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
15536: LD_INT 35
15538: PPUSH
15539: CALL_OW 67
// until IsAt ( veh , 229 , 226 ) ;
15543: LD_VAR 0 1
15547: PPUSH
15548: LD_INT 229
15550: PPUSH
15551: LD_INT 226
15553: PPUSH
15554: CALL_OW 307
15558: IFFALSE 15536
// RemoveUnit ( veh ) ;
15560: LD_VAR 0 1
15564: PPUSH
15565: CALL_OW 64
// end ;
15569: PPOPN 2
15571: END
// every 15 15$00 trigger GameType = 1 and game and reinforceAllowed do var i , j , veh , tmp , amount ;
15572: LD_EXP 2
15576: PUSH
15577: LD_INT 1
15579: EQUAL
15580: PUSH
15581: LD_EXP 3
15585: AND
15586: PUSH
15587: LD_EXP 24
15591: AND
15592: IFFALSE 15925
15594: GO 15596
15596: DISABLE
15597: LD_INT 0
15599: PPUSH
15600: PPUSH
15601: PPUSH
15602: PPUSH
15603: PPUSH
// begin enable ;
15604: ENABLE
// tmp := [ ] ;
15605: LD_ADDR_VAR 0 4
15609: PUSH
15610: EMPTY
15611: ST_TO_ADDR
// if commander = 1 then
15612: LD_EXP 25
15616: PUSH
15617: LD_INT 1
15619: EQUAL
15620: IFFALSE 15632
// amount := 3 else
15622: LD_ADDR_VAR 0 5
15626: PUSH
15627: LD_INT 3
15629: ST_TO_ADDR
15630: GO 15640
// amount := 2 ;
15632: LD_ADDR_VAR 0 5
15636: PUSH
15637: LD_INT 2
15639: ST_TO_ADDR
// for i = 1 to amount do
15640: LD_ADDR_VAR 0 1
15644: PUSH
15645: DOUBLE
15646: LD_INT 1
15648: DEC
15649: ST_TO_ADDR
15650: LD_VAR 0 5
15654: PUSH
15655: FOR_TO
15656: IFFALSE 15820
// begin wait ( 0 0$5 ) ;
15658: LD_INT 175
15660: PPUSH
15661: CALL_OW 67
// for j = 1 to 3 do
15665: LD_ADDR_VAR 0 2
15669: PUSH
15670: DOUBLE
15671: LD_INT 1
15673: DEC
15674: ST_TO_ADDR
15675: LD_INT 3
15677: PUSH
15678: FOR_TO
15679: IFFALSE 15816
// begin uc_side := 4 ;
15681: LD_ADDR_OWVAR 20
15685: PUSH
15686: LD_INT 4
15688: ST_TO_ADDR
// uc_nation := 1 ;
15689: LD_ADDR_OWVAR 21
15693: PUSH
15694: LD_INT 1
15696: ST_TO_ADDR
// PrepareVehicle ( [ us_medium_tracked , us_morphling ] [ rand ( 1 , 2 ) ] , engine_siberite , control_computer , [ us_laser , us_double_gun , us_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
15697: LD_INT 3
15699: PUSH
15700: LD_INT 5
15702: PUSH
15703: EMPTY
15704: LIST
15705: LIST
15706: PUSH
15707: LD_INT 1
15709: PPUSH
15710: LD_INT 2
15712: PPUSH
15713: CALL_OW 12
15717: ARRAY
15718: PPUSH
15719: LD_INT 3
15721: PPUSH
15722: LD_INT 3
15724: PPUSH
15725: LD_INT 9
15727: PUSH
15728: LD_INT 5
15730: PUSH
15731: LD_INT 7
15733: PUSH
15734: EMPTY
15735: LIST
15736: LIST
15737: LIST
15738: PUSH
15739: LD_INT 1
15741: PPUSH
15742: LD_INT 3
15744: PPUSH
15745: CALL_OW 12
15749: ARRAY
15750: PPUSH
15751: LD_INT 100
15753: PPUSH
15754: CALL 24172 0 5
// veh := CreateVehicle ;
15758: LD_ADDR_VAR 0 3
15762: PUSH
15763: CALL_OW 45
15767: ST_TO_ADDR
// tmp := tmp ^ veh ;
15768: LD_ADDR_VAR 0 4
15772: PUSH
15773: LD_VAR 0 4
15777: PUSH
15778: LD_VAR 0 3
15782: ADD
15783: ST_TO_ADDR
// PlaceUnitArea ( veh , westSpawn , false ) ;
15784: LD_VAR 0 3
15788: PPUSH
15789: LD_INT 22
15791: PPUSH
15792: LD_INT 0
15794: PPUSH
15795: CALL_OW 49
// ComMoveXY ( veh , 119 , 215 ) ;
15799: LD_VAR 0 3
15803: PPUSH
15804: LD_INT 119
15806: PPUSH
15807: LD_INT 215
15809: PPUSH
15810: CALL_OW 111
// end ;
15814: GO 15678
15816: POP
15817: POP
// end ;
15818: GO 15655
15820: POP
15821: POP
// wait ( 0 0$3 ) ;
15822: LD_INT 105
15824: PPUSH
15825: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
15829: LD_INT 35
15831: PPUSH
15832: CALL_OW 67
// for i in tmp do
15836: LD_ADDR_VAR 0 1
15840: PUSH
15841: LD_VAR 0 4
15845: PUSH
15846: FOR_IN
15847: IFFALSE 15914
// if IsDead ( i ) then
15849: LD_VAR 0 1
15853: PPUSH
15854: CALL_OW 301
15858: IFFALSE 15878
// tmp := tmp diff i else
15860: LD_ADDR_VAR 0 4
15864: PUSH
15865: LD_VAR 0 4
15869: PUSH
15870: LD_VAR 0 1
15874: DIFF
15875: ST_TO_ADDR
15876: GO 15912
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 4 ] ) , i ) ) ;
15878: LD_VAR 0 1
15882: PPUSH
15883: LD_INT 81
15885: PUSH
15886: LD_INT 4
15888: PUSH
15889: EMPTY
15890: LIST
15891: LIST
15892: PPUSH
15893: CALL_OW 69
15897: PPUSH
15898: LD_VAR 0 1
15902: PPUSH
15903: CALL_OW 74
15907: PPUSH
15908: CALL_OW 115
15912: GO 15846
15914: POP
15915: POP
// until tmp = [ ] ;
15916: LD_VAR 0 4
15920: PUSH
15921: EMPTY
15922: EQUAL
15923: IFFALSE 15829
// end ;
15925: PPOPN 5
15927: END
// every 0 0$1 trigger GameType = 1 and game do var i , tmp ;
15928: LD_EXP 2
15932: PUSH
15933: LD_INT 1
15935: EQUAL
15936: PUSH
15937: LD_EXP 3
15941: AND
15942: IFFALSE 16043
15944: GO 15946
15946: DISABLE
15947: LD_INT 0
15949: PPUSH
15950: PPUSH
// begin enable ;
15951: ENABLE
// tmp := FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) ;
15952: LD_ADDR_VAR 0 2
15956: PUSH
15957: LD_INT 3
15959: PUSH
15960: LD_INT 22
15962: PUSH
15963: LD_INT 1
15965: PUSH
15966: EMPTY
15967: LIST
15968: LIST
15969: PUSH
15970: EMPTY
15971: LIST
15972: LIST
15973: PUSH
15974: LD_INT 32
15976: PUSH
15977: LD_INT 1
15979: PUSH
15980: EMPTY
15981: LIST
15982: LIST
15983: PUSH
15984: EMPTY
15985: LIST
15986: LIST
15987: PPUSH
15988: CALL_OW 69
15992: ST_TO_ADDR
// if tmp then
15993: LD_VAR 0 2
15997: IFFALSE 16043
// for i in tmp do
15999: LD_ADDR_VAR 0 1
16003: PUSH
16004: LD_VAR 0 2
16008: PUSH
16009: FOR_IN
16010: IFFALSE 16041
// if GetFuel ( i ) < 3 then
16012: LD_VAR 0 1
16016: PPUSH
16017: CALL_OW 261
16021: PUSH
16022: LD_INT 3
16024: LESS
16025: IFFALSE 16039
// SetFuel ( i , 3 ) ;
16027: LD_VAR 0 1
16031: PPUSH
16032: LD_INT 3
16034: PPUSH
16035: CALL_OW 240
16039: GO 16009
16041: POP
16042: POP
// end ;
16043: PPOPN 2
16045: END
// every 15 15$00 trigger game and GetAttitude ( 8 , 4 ) = att_enemy do var i , un , tmp ;
16046: LD_EXP 3
16050: PUSH
16051: LD_INT 8
16053: PPUSH
16054: LD_INT 4
16056: PPUSH
16057: CALL_OW 81
16061: PUSH
16062: LD_INT 2
16064: EQUAL
16065: AND
16066: IFFALSE 16276
16068: GO 16070
16070: DISABLE
16071: LD_INT 0
16073: PPUSH
16074: PPUSH
16075: PPUSH
// begin enable ;
16076: ENABLE
// tmp := [ ] ;
16077: LD_ADDR_VAR 0 3
16081: PUSH
16082: EMPTY
16083: ST_TO_ADDR
// for i = 1 to 4 do
16084: LD_ADDR_VAR 0 1
16088: PUSH
16089: DOUBLE
16090: LD_INT 1
16092: DEC
16093: ST_TO_ADDR
16094: LD_INT 4
16096: PUSH
16097: FOR_TO
16098: IFFALSE 16242
// begin uc_side := 8 ;
16100: LD_ADDR_OWVAR 20
16104: PUSH
16105: LD_INT 8
16107: ST_TO_ADDR
// uc_nation := nation_arabian ;
16108: LD_ADDR_OWVAR 21
16112: PUSH
16113: LD_INT 2
16115: ST_TO_ADDR
// PrepareVehicle ( ar_hovercraft , engine_combustion , control_apeman , [ ar_double_machine_gun , ar_light_gun ] [ rand ( 1 , 2 ) ] , rand ( 60 , 80 ) ) ;
16116: LD_INT 11
16118: PPUSH
16119: LD_INT 1
16121: PPUSH
16122: LD_INT 5
16124: PPUSH
16125: LD_INT 24
16127: PUSH
16128: LD_INT 23
16130: PUSH
16131: EMPTY
16132: LIST
16133: LIST
16134: PUSH
16135: LD_INT 1
16137: PPUSH
16138: LD_INT 2
16140: PPUSH
16141: CALL_OW 12
16145: ARRAY
16146: PPUSH
16147: LD_INT 60
16149: PPUSH
16150: LD_INT 80
16152: PPUSH
16153: CALL_OW 12
16157: PPUSH
16158: CALL 24172 0 5
// un := CreateVehicle ;
16162: LD_ADDR_VAR 0 2
16166: PUSH
16167: CALL_OW 45
16171: ST_TO_ADDR
// SetDir ( un , 2 ) ;
16172: LD_VAR 0 2
16176: PPUSH
16177: LD_INT 2
16179: PPUSH
16180: CALL_OW 233
// tmp := tmp ^ un ;
16184: LD_ADDR_VAR 0 3
16188: PUSH
16189: LD_VAR 0 3
16193: PUSH
16194: LD_VAR 0 2
16198: ADD
16199: ST_TO_ADDR
// PlaceUnitXY ( un , 88 , 2 , false ) ;
16200: LD_VAR 0 2
16204: PPUSH
16205: LD_INT 88
16207: PPUSH
16208: LD_INT 2
16210: PPUSH
16211: LD_INT 0
16213: PPUSH
16214: CALL_OW 48
// ComMoveXY ( un , 93 , 13 ) ;
16218: LD_VAR 0 2
16222: PPUSH
16223: LD_INT 93
16225: PPUSH
16226: LD_INT 13
16228: PPUSH
16229: CALL_OW 111
// wait ( 0 0$2 ) ;
16233: LD_INT 70
16235: PPUSH
16236: CALL_OW 67
// end ;
16240: GO 16097
16242: POP
16243: POP
// for i in tmp do
16244: LD_ADDR_VAR 0 1
16248: PUSH
16249: LD_VAR 0 3
16253: PUSH
16254: FOR_IN
16255: IFFALSE 16274
// AddComMoveXY ( i , 136 , 19 ) ;
16257: LD_VAR 0 1
16261: PPUSH
16262: LD_INT 136
16264: PPUSH
16265: LD_INT 19
16267: PPUSH
16268: CALL_OW 171
16272: GO 16254
16274: POP
16275: POP
// end ;
16276: PPOPN 3
16278: END
// every 7 7$30 + 7 7$30 trigger game do var i , base , tmp , target ;
16279: LD_EXP 3
16283: IFFALSE 17202
16285: GO 16287
16287: DISABLE
16288: LD_INT 0
16290: PPUSH
16291: PPUSH
16292: PPUSH
16293: PPUSH
// begin enable ;
16294: ENABLE
// base := mc_leg ;
16295: LD_ADDR_VAR 0 2
16299: PUSH
16300: LD_EXP 6
16304: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 8 ] , [ f_nation , 2 ] , [ f_btype , b_factory ] ] ) then
16305: LD_INT 22
16307: PUSH
16308: LD_INT 8
16310: PUSH
16311: EMPTY
16312: LIST
16313: LIST
16314: PUSH
16315: LD_INT 23
16317: PUSH
16318: LD_INT 2
16320: PUSH
16321: EMPTY
16322: LIST
16323: LIST
16324: PUSH
16325: LD_INT 30
16327: PUSH
16328: LD_INT 3
16330: PUSH
16331: EMPTY
16332: LIST
16333: LIST
16334: PUSH
16335: EMPTY
16336: LIST
16337: LIST
16338: LIST
16339: PPUSH
16340: CALL_OW 69
16344: NOT
16345: IFFALSE 16349
// exit ;
16347: GO 17202
// if Prob ( 40 ) then
16349: LD_INT 40
16351: PPUSH
16352: CALL_OW 13
16356: IFFALSE 16485
// begin MC_InsertProduceList ( base , [ [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_flame_thrower ] , ] ) ;
16358: LD_VAR 0 2
16362: PPUSH
16363: LD_INT 13
16365: PUSH
16366: LD_INT 1
16368: PUSH
16369: LD_INT 2
16371: PUSH
16372: LD_INT 28
16374: PUSH
16375: EMPTY
16376: LIST
16377: LIST
16378: LIST
16379: LIST
16380: PUSH
16381: LD_INT 13
16383: PUSH
16384: LD_INT 1
16386: PUSH
16387: LD_INT 2
16389: PUSH
16390: LD_INT 28
16392: PUSH
16393: EMPTY
16394: LIST
16395: LIST
16396: LIST
16397: LIST
16398: PUSH
16399: LD_INT 13
16401: PUSH
16402: LD_INT 1
16404: PUSH
16405: LD_INT 2
16407: PUSH
16408: LD_INT 28
16410: PUSH
16411: EMPTY
16412: LIST
16413: LIST
16414: LIST
16415: LIST
16416: PUSH
16417: LD_INT 13
16419: PUSH
16420: LD_INT 1
16422: PUSH
16423: LD_INT 2
16425: PUSH
16426: LD_INT 28
16428: PUSH
16429: EMPTY
16430: LIST
16431: LIST
16432: LIST
16433: LIST
16434: PUSH
16435: LD_INT 13
16437: PUSH
16438: LD_INT 1
16440: PUSH
16441: LD_INT 2
16443: PUSH
16444: LD_INT 28
16446: PUSH
16447: EMPTY
16448: LIST
16449: LIST
16450: LIST
16451: LIST
16452: PUSH
16453: LD_INT 13
16455: PUSH
16456: LD_INT 1
16458: PUSH
16459: LD_INT 2
16461: PUSH
16462: LD_INT 26
16464: PUSH
16465: EMPTY
16466: LIST
16467: LIST
16468: LIST
16469: LIST
16470: PUSH
16471: EMPTY
16472: LIST
16473: LIST
16474: LIST
16475: LIST
16476: LIST
16477: LIST
16478: PPUSH
16479: CALL 79524 0 2
// end else
16483: GO 16702
// begin MC_InsertProduceList ( base , [ [ ar_medium_trike , engine_combustion , control_remote , [ ar_gun , ar_flame_thrower , ar_flame_thrower ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_gun , ar_flame_thrower , ar_flame_thrower ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_flame_thrower , ar_flame_thrower , ar_selfpropelled_bomb ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_flame_thrower , ar_selfpropelled_bomb , ar_selfpropelled_bomb ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , ar_selfpropelled_bomb ] , [ ar_medium_trike , engine_combustion , control_remote , ar_flame_thrower ] , ] ) ;
16485: LD_VAR 0 2
16489: PPUSH
16490: LD_INT 13
16492: PUSH
16493: LD_INT 1
16495: PUSH
16496: LD_INT 2
16498: PUSH
16499: LD_INT 27
16501: PUSH
16502: LD_INT 26
16504: PUSH
16505: LD_INT 26
16507: PUSH
16508: EMPTY
16509: LIST
16510: LIST
16511: LIST
16512: PUSH
16513: LD_INT 1
16515: PPUSH
16516: LD_INT 3
16518: PPUSH
16519: CALL_OW 12
16523: ARRAY
16524: PUSH
16525: EMPTY
16526: LIST
16527: LIST
16528: LIST
16529: LIST
16530: PUSH
16531: LD_INT 13
16533: PUSH
16534: LD_INT 1
16536: PUSH
16537: LD_INT 2
16539: PUSH
16540: LD_INT 27
16542: PUSH
16543: LD_INT 26
16545: PUSH
16546: LD_INT 26
16548: PUSH
16549: EMPTY
16550: LIST
16551: LIST
16552: LIST
16553: PUSH
16554: LD_INT 1
16556: PPUSH
16557: LD_INT 3
16559: PPUSH
16560: CALL_OW 12
16564: ARRAY
16565: PUSH
16566: EMPTY
16567: LIST
16568: LIST
16569: LIST
16570: LIST
16571: PUSH
16572: LD_INT 13
16574: PUSH
16575: LD_INT 1
16577: PUSH
16578: LD_INT 2
16580: PUSH
16581: LD_INT 26
16583: PUSH
16584: LD_INT 26
16586: PUSH
16587: LD_INT 29
16589: PUSH
16590: EMPTY
16591: LIST
16592: LIST
16593: LIST
16594: PUSH
16595: LD_INT 1
16597: PPUSH
16598: LD_INT 3
16600: PPUSH
16601: CALL_OW 12
16605: ARRAY
16606: PUSH
16607: EMPTY
16608: LIST
16609: LIST
16610: LIST
16611: LIST
16612: PUSH
16613: LD_INT 13
16615: PUSH
16616: LD_INT 1
16618: PUSH
16619: LD_INT 2
16621: PUSH
16622: LD_INT 26
16624: PUSH
16625: LD_INT 29
16627: PUSH
16628: LD_INT 29
16630: PUSH
16631: EMPTY
16632: LIST
16633: LIST
16634: LIST
16635: PUSH
16636: LD_INT 1
16638: PPUSH
16639: LD_INT 3
16641: PPUSH
16642: CALL_OW 12
16646: ARRAY
16647: PUSH
16648: EMPTY
16649: LIST
16650: LIST
16651: LIST
16652: LIST
16653: PUSH
16654: LD_INT 13
16656: PUSH
16657: LD_INT 1
16659: PUSH
16660: LD_INT 2
16662: PUSH
16663: LD_INT 29
16665: PUSH
16666: EMPTY
16667: LIST
16668: LIST
16669: LIST
16670: LIST
16671: PUSH
16672: LD_INT 13
16674: PUSH
16675: LD_INT 1
16677: PUSH
16678: LD_INT 2
16680: PUSH
16681: LD_INT 26
16683: PUSH
16684: EMPTY
16685: LIST
16686: LIST
16687: LIST
16688: LIST
16689: PUSH
16690: EMPTY
16691: LIST
16692: LIST
16693: LIST
16694: LIST
16695: LIST
16696: LIST
16697: PPUSH
16698: CALL 79524 0 2
// end ; repeat wait ( 0 0$1 ) ;
16702: LD_INT 35
16704: PPUSH
16705: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= 6 or tick mod 10 10$00 = 0 ;
16709: LD_VAR 0 2
16713: PPUSH
16714: LD_INT 1
16716: PPUSH
16717: CALL 80942 0 2
16721: PUSH
16722: LD_INT 6
16724: GREATEREQUAL
16725: PUSH
16726: LD_OWVAR 1
16730: PUSH
16731: LD_INT 21000
16733: MOD
16734: PUSH
16735: LD_INT 0
16737: EQUAL
16738: OR
16739: IFFALSE 16702
// wait ( 0 0$30 ) ;
16741: LD_INT 1050
16743: PPUSH
16744: CALL_OW 67
// tmp := MC_GetVehicles ( base , true ) ;
16748: LD_ADDR_VAR 0 3
16752: PUSH
16753: LD_VAR 0 2
16757: PPUSH
16758: LD_INT 1
16760: PPUSH
16761: CALL 80942 0 2
16765: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff tmp ) ;
16766: LD_ADDR_EXP 65
16770: PUSH
16771: LD_EXP 65
16775: PPUSH
16776: LD_VAR 0 2
16780: PPUSH
16781: LD_EXP 65
16785: PUSH
16786: LD_VAR 0 2
16790: ARRAY
16791: PUSH
16792: LD_VAR 0 3
16796: DIFF
16797: PPUSH
16798: CALL_OW 1
16802: ST_TO_ADDR
// target := rand ( 0 , 2 ) ;
16803: LD_ADDR_VAR 0 4
16807: PUSH
16808: LD_INT 0
16810: PPUSH
16811: LD_INT 2
16813: PPUSH
16814: CALL_OW 12
16818: ST_TO_ADDR
// if legChangeSide then
16819: LD_EXP 21
16823: IFFALSE 16833
// target := 2 ;
16825: LD_ADDR_VAR 0 4
16829: PUSH
16830: LD_INT 2
16832: ST_TO_ADDR
// if target = 2 then
16833: LD_VAR 0 4
16837: PUSH
16838: LD_INT 2
16840: EQUAL
16841: IFFALSE 16969
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
16843: LD_ADDR_VAR 0 3
16847: PUSH
16848: LD_VAR 0 3
16852: PPUSH
16853: LD_INT 24
16855: PUSH
16856: LD_INT 250
16858: PUSH
16859: EMPTY
16860: LIST
16861: LIST
16862: PPUSH
16863: CALL_OW 72
16867: ST_TO_ADDR
// for i in tmp do
16868: LD_ADDR_VAR 0 1
16872: PUSH
16873: LD_VAR 0 3
16877: PUSH
16878: FOR_IN
16879: IFFALSE 16919
// if GetDistUnitXY ( i , 112 , 64 ) > 9 then
16881: LD_VAR 0 1
16885: PPUSH
16886: LD_INT 112
16888: PPUSH
16889: LD_INT 64
16891: PPUSH
16892: CALL_OW 297
16896: PUSH
16897: LD_INT 9
16899: GREATER
16900: IFFALSE 16917
// ComMoveXY ( i , 112 , 64 ) ;
16902: LD_VAR 0 1
16906: PPUSH
16907: LD_INT 112
16909: PPUSH
16910: LD_INT 64
16912: PPUSH
16913: CALL_OW 111
16917: GO 16878
16919: POP
16920: POP
// wait ( 0 0$1 ) ;
16921: LD_INT 35
16923: PPUSH
16924: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 112 , 64 , 9 ] ) >= ( tmp - 1 ) ;
16928: LD_VAR 0 3
16932: PPUSH
16933: LD_INT 92
16935: PUSH
16936: LD_INT 112
16938: PUSH
16939: LD_INT 64
16941: PUSH
16942: LD_INT 9
16944: PUSH
16945: EMPTY
16946: LIST
16947: LIST
16948: LIST
16949: LIST
16950: PPUSH
16951: CALL_OW 72
16955: PUSH
16956: LD_VAR 0 3
16960: PUSH
16961: LD_INT 1
16963: MINUS
16964: GREATEREQUAL
16965: IFFALSE 16843
// end else
16967: GO 17093
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
16969: LD_ADDR_VAR 0 3
16973: PUSH
16974: LD_VAR 0 3
16978: PPUSH
16979: LD_INT 24
16981: PUSH
16982: LD_INT 250
16984: PUSH
16985: EMPTY
16986: LIST
16987: LIST
16988: PPUSH
16989: CALL_OW 72
16993: ST_TO_ADDR
// for i in tmp do
16994: LD_ADDR_VAR 0 1
16998: PUSH
16999: LD_VAR 0 3
17003: PUSH
17004: FOR_IN
17005: IFFALSE 17045
// if GetDistUnitXY ( i , 174 , 94 ) > 9 then
17007: LD_VAR 0 1
17011: PPUSH
17012: LD_INT 174
17014: PPUSH
17015: LD_INT 94
17017: PPUSH
17018: CALL_OW 297
17022: PUSH
17023: LD_INT 9
17025: GREATER
17026: IFFALSE 17043
// ComMoveXY ( i , 174 , 94 ) ;
17028: LD_VAR 0 1
17032: PPUSH
17033: LD_INT 174
17035: PPUSH
17036: LD_INT 94
17038: PPUSH
17039: CALL_OW 111
17043: GO 17004
17045: POP
17046: POP
// wait ( 0 0$1 ) ;
17047: LD_INT 35
17049: PPUSH
17050: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 174 , 94 , 9 ] ) >= ( tmp - 1 ) ;
17054: LD_VAR 0 3
17058: PPUSH
17059: LD_INT 92
17061: PUSH
17062: LD_INT 174
17064: PUSH
17065: LD_INT 94
17067: PUSH
17068: LD_INT 9
17070: PUSH
17071: EMPTY
17072: LIST
17073: LIST
17074: LIST
17075: LIST
17076: PPUSH
17077: CALL_OW 72
17081: PUSH
17082: LD_VAR 0 3
17086: PUSH
17087: LD_INT 1
17089: MINUS
17090: GREATEREQUAL
17091: IFFALSE 16969
// end ; repeat wait ( 0 0$1 ) ;
17093: LD_INT 35
17095: PPUSH
17096: CALL_OW 67
// for i in tmp do
17100: LD_ADDR_VAR 0 1
17104: PUSH
17105: LD_VAR 0 3
17109: PUSH
17110: FOR_IN
17111: IFFALSE 17193
// begin if GetLives ( i ) > 251 then
17113: LD_VAR 0 1
17117: PPUSH
17118: CALL_OW 256
17122: PUSH
17123: LD_INT 251
17125: GREATER
17126: IFFALSE 17164
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 8 ] ) , i ) ) else
17128: LD_VAR 0 1
17132: PPUSH
17133: LD_INT 81
17135: PUSH
17136: LD_INT 8
17138: PUSH
17139: EMPTY
17140: LIST
17141: LIST
17142: PPUSH
17143: CALL_OW 69
17147: PPUSH
17148: LD_VAR 0 1
17152: PPUSH
17153: CALL_OW 74
17157: PPUSH
17158: CALL_OW 115
17162: GO 17191
// if IsDead ( i ) then
17164: LD_VAR 0 1
17168: PPUSH
17169: CALL_OW 301
17173: IFFALSE 17191
// tmp := tmp diff i ;
17175: LD_ADDR_VAR 0 3
17179: PUSH
17180: LD_VAR 0 3
17184: PUSH
17185: LD_VAR 0 1
17189: DIFF
17190: ST_TO_ADDR
// end ;
17191: GO 17110
17193: POP
17194: POP
// until not tmp ;
17195: LD_VAR 0 3
17199: NOT
17200: IFFALSE 17093
// end ;
17202: PPOPN 4
17204: END
// every 7 7$30 trigger game do var i , base , tmp , target , teleport ;
17205: LD_EXP 3
17209: IFFALSE 18197
17211: GO 17213
17213: DISABLE
17214: LD_INT 0
17216: PPUSH
17217: PPUSH
17218: PPUSH
17219: PPUSH
17220: PPUSH
// begin enable ;
17221: ENABLE
// if not UnitFilter ( mc_bases [ mc_rus_2 ] , [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) then
17222: LD_EXP 46
17226: PUSH
17227: LD_EXP 8
17231: ARRAY
17232: PPUSH
17233: LD_INT 22
17235: PUSH
17236: LD_INT 3
17238: PUSH
17239: EMPTY
17240: LIST
17241: LIST
17242: PUSH
17243: LD_INT 30
17245: PUSH
17246: LD_INT 3
17248: PUSH
17249: EMPTY
17250: LIST
17251: LIST
17252: PUSH
17253: EMPTY
17254: LIST
17255: LIST
17256: PPUSH
17257: CALL_OW 72
17261: NOT
17262: IFFALSE 17266
// exit ;
17264: GO 18197
// base := mc_rus_2 ;
17266: LD_ADDR_VAR 0 2
17270: PUSH
17271: LD_EXP 8
17275: ST_TO_ADDR
// teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) ;
17276: LD_ADDR_VAR 0 5
17280: PUSH
17281: LD_INT 22
17283: PUSH
17284: LD_INT 3
17286: PUSH
17287: EMPTY
17288: LIST
17289: LIST
17290: PUSH
17291: LD_INT 30
17293: PUSH
17294: LD_INT 34
17296: PUSH
17297: EMPTY
17298: LIST
17299: LIST
17300: PUSH
17301: EMPTY
17302: LIST
17303: LIST
17304: PPUSH
17305: CALL_OW 69
17309: ST_TO_ADDR
// if Prob ( 40 ) then
17310: LD_INT 40
17312: PPUSH
17313: CALL_OW 13
17317: IFFALSE 17446
// begin MC_InsertProduceList ( base , [ [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] ] ) ;
17319: LD_VAR 0 2
17323: PPUSH
17324: LD_INT 22
17326: PUSH
17327: LD_INT 3
17329: PUSH
17330: LD_INT 3
17332: PUSH
17333: LD_INT 49
17335: PUSH
17336: EMPTY
17337: LIST
17338: LIST
17339: LIST
17340: LIST
17341: PUSH
17342: LD_INT 22
17344: PUSH
17345: LD_INT 3
17347: PUSH
17348: LD_INT 3
17350: PUSH
17351: LD_INT 49
17353: PUSH
17354: EMPTY
17355: LIST
17356: LIST
17357: LIST
17358: LIST
17359: PUSH
17360: LD_INT 22
17362: PUSH
17363: LD_INT 3
17365: PUSH
17366: LD_INT 3
17368: PUSH
17369: LD_INT 49
17371: PUSH
17372: EMPTY
17373: LIST
17374: LIST
17375: LIST
17376: LIST
17377: PUSH
17378: LD_INT 24
17380: PUSH
17381: LD_INT 3
17383: PUSH
17384: LD_INT 3
17386: PUSH
17387: LD_INT 46
17389: PUSH
17390: EMPTY
17391: LIST
17392: LIST
17393: LIST
17394: LIST
17395: PUSH
17396: LD_INT 24
17398: PUSH
17399: LD_INT 3
17401: PUSH
17402: LD_INT 3
17404: PUSH
17405: LD_INT 46
17407: PUSH
17408: EMPTY
17409: LIST
17410: LIST
17411: LIST
17412: LIST
17413: PUSH
17414: LD_INT 24
17416: PUSH
17417: LD_INT 3
17419: PUSH
17420: LD_INT 3
17422: PUSH
17423: LD_INT 46
17425: PUSH
17426: EMPTY
17427: LIST
17428: LIST
17429: LIST
17430: LIST
17431: PUSH
17432: EMPTY
17433: LIST
17434: LIST
17435: LIST
17436: LIST
17437: LIST
17438: LIST
17439: PPUSH
17440: CALL 79524 0 2
// end else
17444: GO 17571
// begin MC_InsertProduceList ( base , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] ] ) ;
17446: LD_VAR 0 2
17450: PPUSH
17451: LD_INT 24
17453: PUSH
17454: LD_INT 3
17456: PUSH
17457: LD_INT 3
17459: PUSH
17460: LD_INT 47
17462: PUSH
17463: EMPTY
17464: LIST
17465: LIST
17466: LIST
17467: LIST
17468: PUSH
17469: LD_INT 24
17471: PUSH
17472: LD_INT 3
17474: PUSH
17475: LD_INT 3
17477: PUSH
17478: LD_INT 47
17480: PUSH
17481: EMPTY
17482: LIST
17483: LIST
17484: LIST
17485: LIST
17486: PUSH
17487: LD_INT 24
17489: PUSH
17490: LD_INT 3
17492: PUSH
17493: LD_INT 3
17495: PUSH
17496: LD_INT 47
17498: PUSH
17499: EMPTY
17500: LIST
17501: LIST
17502: LIST
17503: LIST
17504: PUSH
17505: LD_INT 24
17507: PUSH
17508: LD_INT 3
17510: PUSH
17511: LD_INT 3
17513: PUSH
17514: LD_INT 46
17516: PUSH
17517: EMPTY
17518: LIST
17519: LIST
17520: LIST
17521: LIST
17522: PUSH
17523: LD_INT 24
17525: PUSH
17526: LD_INT 3
17528: PUSH
17529: LD_INT 3
17531: PUSH
17532: LD_INT 46
17534: PUSH
17535: EMPTY
17536: LIST
17537: LIST
17538: LIST
17539: LIST
17540: PUSH
17541: LD_INT 24
17543: PUSH
17544: LD_INT 3
17546: PUSH
17547: LD_INT 3
17549: PUSH
17550: LD_INT 46
17552: PUSH
17553: EMPTY
17554: LIST
17555: LIST
17556: LIST
17557: LIST
17558: PUSH
17559: EMPTY
17560: LIST
17561: LIST
17562: LIST
17563: LIST
17564: LIST
17565: LIST
17566: PPUSH
17567: CALL 79524 0 2
// end ; if Difficulty > 1 then
17571: LD_OWVAR 67
17575: PUSH
17576: LD_INT 1
17578: GREATER
17579: IFFALSE 17611
// MC_InsertProduceList ( base , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] ] ) ;
17581: LD_VAR 0 2
17585: PPUSH
17586: LD_INT 24
17588: PUSH
17589: LD_INT 3
17591: PUSH
17592: LD_INT 3
17594: PUSH
17595: LD_INT 47
17597: PUSH
17598: EMPTY
17599: LIST
17600: LIST
17601: LIST
17602: LIST
17603: PUSH
17604: EMPTY
17605: LIST
17606: PPUSH
17607: CALL 79524 0 2
// repeat wait ( 0 0$1 ) ;
17611: LD_INT 35
17613: PPUSH
17614: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= [ 6 , 7 , 7 ] [ Difficulty ] or tick mod 10 10$00 = 0 ;
17618: LD_VAR 0 2
17622: PPUSH
17623: LD_INT 1
17625: PPUSH
17626: CALL 80942 0 2
17630: PUSH
17631: LD_INT 6
17633: PUSH
17634: LD_INT 7
17636: PUSH
17637: LD_INT 7
17639: PUSH
17640: EMPTY
17641: LIST
17642: LIST
17643: LIST
17644: PUSH
17645: LD_OWVAR 67
17649: ARRAY
17650: GREATEREQUAL
17651: PUSH
17652: LD_OWVAR 1
17656: PUSH
17657: LD_INT 21000
17659: MOD
17660: PUSH
17661: LD_INT 0
17663: EQUAL
17664: OR
17665: IFFALSE 17611
// wait ( 0 0$45 ) ;
17667: LD_INT 1575
17669: PPUSH
17670: CALL_OW 67
// tmp := MC_GetVehicles ( base , true ) ;
17674: LD_ADDR_VAR 0 3
17678: PUSH
17679: LD_VAR 0 2
17683: PPUSH
17684: LD_INT 1
17686: PPUSH
17687: CALL 80942 0 2
17691: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff tmp ) ;
17692: LD_ADDR_EXP 65
17696: PUSH
17697: LD_EXP 65
17701: PPUSH
17702: LD_VAR 0 2
17706: PPUSH
17707: LD_EXP 65
17711: PUSH
17712: LD_VAR 0 2
17716: ARRAY
17717: PUSH
17718: LD_VAR 0 3
17722: DIFF
17723: PPUSH
17724: CALL_OW 1
17728: ST_TO_ADDR
// target := rand ( 0 , 1 ) ;
17729: LD_ADDR_VAR 0 4
17733: PUSH
17734: LD_INT 0
17736: PPUSH
17737: LD_INT 1
17739: PPUSH
17740: CALL_OW 12
17744: ST_TO_ADDR
// if target then
17745: LD_VAR 0 4
17749: IFFALSE 17877
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
17751: LD_ADDR_VAR 0 3
17755: PUSH
17756: LD_VAR 0 3
17760: PPUSH
17761: LD_INT 24
17763: PUSH
17764: LD_INT 250
17766: PUSH
17767: EMPTY
17768: LIST
17769: LIST
17770: PPUSH
17771: CALL_OW 72
17775: ST_TO_ADDR
// for i in tmp do
17776: LD_ADDR_VAR 0 1
17780: PUSH
17781: LD_VAR 0 3
17785: PUSH
17786: FOR_IN
17787: IFFALSE 17827
// if GetDistUnitXY ( i , 84 , 32 ) > 9 then
17789: LD_VAR 0 1
17793: PPUSH
17794: LD_INT 84
17796: PPUSH
17797: LD_INT 32
17799: PPUSH
17800: CALL_OW 297
17804: PUSH
17805: LD_INT 9
17807: GREATER
17808: IFFALSE 17825
// ComMoveXY ( i , 84 , 32 ) ;
17810: LD_VAR 0 1
17814: PPUSH
17815: LD_INT 84
17817: PPUSH
17818: LD_INT 32
17820: PPUSH
17821: CALL_OW 111
17825: GO 17786
17827: POP
17828: POP
// wait ( 0 0$1 ) ;
17829: LD_INT 35
17831: PPUSH
17832: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 84 , 32 , 9 ] ) >= ( tmp - 1 ) ;
17836: LD_VAR 0 3
17840: PPUSH
17841: LD_INT 92
17843: PUSH
17844: LD_INT 84
17846: PUSH
17847: LD_INT 32
17849: PUSH
17850: LD_INT 9
17852: PUSH
17853: EMPTY
17854: LIST
17855: LIST
17856: LIST
17857: LIST
17858: PPUSH
17859: CALL_OW 72
17863: PUSH
17864: LD_VAR 0 3
17868: PUSH
17869: LD_INT 1
17871: MINUS
17872: GREATEREQUAL
17873: IFFALSE 17751
// end else
17875: GO 18037
// begin if teleport then
17877: LD_VAR 0 5
17881: IFFALSE 17901
// ComEnterUnit ( tmp , teleport [ 1 ] ) ;
17883: LD_VAR 0 3
17887: PPUSH
17888: LD_VAR 0 5
17892: PUSH
17893: LD_INT 1
17895: ARRAY
17896: PPUSH
17897: CALL_OW 120
// repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
17901: LD_ADDR_VAR 0 3
17905: PUSH
17906: LD_VAR 0 3
17910: PPUSH
17911: LD_INT 24
17913: PUSH
17914: LD_INT 250
17916: PUSH
17917: EMPTY
17918: LIST
17919: LIST
17920: PPUSH
17921: CALL_OW 72
17925: ST_TO_ADDR
// for i in tmp do
17926: LD_ADDR_VAR 0 1
17930: PUSH
17931: LD_VAR 0 3
17935: PUSH
17936: FOR_IN
17937: IFFALSE 17989
// if GetDistUnitXY ( i , 140 , 219 ) > 9 and not HasTask ( i ) then
17939: LD_VAR 0 1
17943: PPUSH
17944: LD_INT 140
17946: PPUSH
17947: LD_INT 219
17949: PPUSH
17950: CALL_OW 297
17954: PUSH
17955: LD_INT 9
17957: GREATER
17958: PUSH
17959: LD_VAR 0 1
17963: PPUSH
17964: CALL_OW 314
17968: NOT
17969: AND
17970: IFFALSE 17987
// AddComMoveXY ( i , 140 , 219 ) ;
17972: LD_VAR 0 1
17976: PPUSH
17977: LD_INT 140
17979: PPUSH
17980: LD_INT 219
17982: PPUSH
17983: CALL_OW 171
17987: GO 17936
17989: POP
17990: POP
// wait ( 0 0$1 ) ;
17991: LD_INT 35
17993: PPUSH
17994: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 140 , 219 , 9 ] ) >= ( tmp - 1 ) ;
17998: LD_VAR 0 3
18002: PPUSH
18003: LD_INT 92
18005: PUSH
18006: LD_INT 140
18008: PUSH
18009: LD_INT 219
18011: PUSH
18012: LD_INT 9
18014: PUSH
18015: EMPTY
18016: LIST
18017: LIST
18018: LIST
18019: LIST
18020: PPUSH
18021: CALL_OW 72
18025: PUSH
18026: LD_VAR 0 3
18030: PUSH
18031: LD_INT 1
18033: MINUS
18034: GREATEREQUAL
18035: IFFALSE 17901
// end ; repeat wait ( 0 0$1 ) ;
18037: LD_INT 35
18039: PPUSH
18040: CALL_OW 67
// for i in tmp do
18044: LD_ADDR_VAR 0 1
18048: PUSH
18049: LD_VAR 0 3
18053: PUSH
18054: FOR_IN
18055: IFFALSE 18188
// begin if GetLives ( i ) > 251 then
18057: LD_VAR 0 1
18061: PPUSH
18062: CALL_OW 256
18066: PUSH
18067: LD_INT 251
18069: GREATER
18070: IFFALSE 18159
// begin if GetWeapon ( i ) = ru_time_lapser then
18072: LD_VAR 0 1
18076: PPUSH
18077: CALL_OW 264
18081: PUSH
18082: LD_INT 49
18084: EQUAL
18085: IFFALSE 18123
// ComMoveUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) else
18087: LD_VAR 0 1
18091: PPUSH
18092: LD_INT 81
18094: PUSH
18095: LD_INT 3
18097: PUSH
18098: EMPTY
18099: LIST
18100: LIST
18101: PPUSH
18102: CALL_OW 69
18106: PPUSH
18107: LD_VAR 0 1
18111: PPUSH
18112: CALL_OW 74
18116: PPUSH
18117: CALL_OW 112
18121: GO 18157
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
18123: LD_VAR 0 1
18127: PPUSH
18128: LD_INT 81
18130: PUSH
18131: LD_INT 3
18133: PUSH
18134: EMPTY
18135: LIST
18136: LIST
18137: PPUSH
18138: CALL_OW 69
18142: PPUSH
18143: LD_VAR 0 1
18147: PPUSH
18148: CALL_OW 74
18152: PPUSH
18153: CALL_OW 115
// end else
18157: GO 18186
// if IsDead ( i ) then
18159: LD_VAR 0 1
18163: PPUSH
18164: CALL_OW 301
18168: IFFALSE 18186
// tmp := tmp diff i ;
18170: LD_ADDR_VAR 0 3
18174: PUSH
18175: LD_VAR 0 3
18179: PUSH
18180: LD_VAR 0 1
18184: DIFF
18185: ST_TO_ADDR
// end ;
18186: GO 18054
18188: POP
18189: POP
// until not tmp ;
18190: LD_VAR 0 3
18194: NOT
18195: IFFALSE 18037
// end ;
18197: PPOPN 5
18199: END
// every 12 12$30 + 11 11$30 trigger game do var i , base , tmp , target ;
18200: LD_EXP 3
18204: IFFALSE 18586
18206: GO 18208
18208: DISABLE
18209: LD_INT 0
18211: PPUSH
18212: PPUSH
18213: PPUSH
18214: PPUSH
// begin enable ;
18215: ENABLE
// base := mc_amer ;
18216: LD_ADDR_VAR 0 2
18220: PUSH
18221: LD_EXP 5
18225: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 4 ] , [ f_nation , 1 ] , [ f_btype , b_factory ] ] ) then
18226: LD_INT 22
18228: PUSH
18229: LD_INT 4
18231: PUSH
18232: EMPTY
18233: LIST
18234: LIST
18235: PUSH
18236: LD_INT 23
18238: PUSH
18239: LD_INT 1
18241: PUSH
18242: EMPTY
18243: LIST
18244: LIST
18245: PUSH
18246: LD_INT 30
18248: PUSH
18249: LD_INT 3
18251: PUSH
18252: EMPTY
18253: LIST
18254: LIST
18255: PUSH
18256: EMPTY
18257: LIST
18258: LIST
18259: LIST
18260: PPUSH
18261: CALL_OW 69
18265: NOT
18266: IFFALSE 18270
// exit ;
18268: GO 18586
// MC_InsertProduceList ( base , [ [ us_medium_tracked , engine_combustion , control_remote , us_double_gun ] , [ us_medium_tracked , engine_combustion , control_remote , us_laser ] , [ us_medium_tracked , engine_combustion , control_remote , us_rocket_launcher ] , [ us_medium_tracked , engine_combustion , control_remote , us_rocket_launcher ] , [ us_medium_tracked , engine_combustion , control_remote , us_rocket_launcher ] ] ) ;
18270: LD_VAR 0 2
18274: PPUSH
18275: LD_INT 3
18277: PUSH
18278: LD_INT 1
18280: PUSH
18281: LD_INT 2
18283: PUSH
18284: LD_INT 5
18286: PUSH
18287: EMPTY
18288: LIST
18289: LIST
18290: LIST
18291: LIST
18292: PUSH
18293: LD_INT 3
18295: PUSH
18296: LD_INT 1
18298: PUSH
18299: LD_INT 2
18301: PUSH
18302: LD_INT 9
18304: PUSH
18305: EMPTY
18306: LIST
18307: LIST
18308: LIST
18309: LIST
18310: PUSH
18311: LD_INT 3
18313: PUSH
18314: LD_INT 1
18316: PUSH
18317: LD_INT 2
18319: PUSH
18320: LD_INT 7
18322: PUSH
18323: EMPTY
18324: LIST
18325: LIST
18326: LIST
18327: LIST
18328: PUSH
18329: LD_INT 3
18331: PUSH
18332: LD_INT 1
18334: PUSH
18335: LD_INT 2
18337: PUSH
18338: LD_INT 7
18340: PUSH
18341: EMPTY
18342: LIST
18343: LIST
18344: LIST
18345: LIST
18346: PUSH
18347: LD_INT 3
18349: PUSH
18350: LD_INT 1
18352: PUSH
18353: LD_INT 2
18355: PUSH
18356: LD_INT 7
18358: PUSH
18359: EMPTY
18360: LIST
18361: LIST
18362: LIST
18363: LIST
18364: PUSH
18365: EMPTY
18366: LIST
18367: LIST
18368: LIST
18369: LIST
18370: LIST
18371: PPUSH
18372: CALL 79524 0 2
// repeat wait ( 0 0$1 ) ;
18376: LD_INT 35
18378: PPUSH
18379: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= 5 or tick mod 10 10$00 = 0 ;
18383: LD_VAR 0 2
18387: PPUSH
18388: LD_INT 1
18390: PPUSH
18391: CALL 80942 0 2
18395: PUSH
18396: LD_INT 5
18398: GREATEREQUAL
18399: PUSH
18400: LD_OWVAR 1
18404: PUSH
18405: LD_INT 21000
18407: MOD
18408: PUSH
18409: LD_INT 0
18411: EQUAL
18412: OR
18413: IFFALSE 18376
// wait ( 0 0$30 ) ;
18415: LD_INT 1050
18417: PPUSH
18418: CALL_OW 67
// tmp := MC_GetVehicles ( base , true ) ;
18422: LD_ADDR_VAR 0 3
18426: PUSH
18427: LD_VAR 0 2
18431: PPUSH
18432: LD_INT 1
18434: PPUSH
18435: CALL 80942 0 2
18439: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff tmp ) ;
18440: LD_ADDR_EXP 65
18444: PUSH
18445: LD_EXP 65
18449: PPUSH
18450: LD_VAR 0 2
18454: PPUSH
18455: LD_EXP 65
18459: PUSH
18460: LD_VAR 0 2
18464: ARRAY
18465: PUSH
18466: LD_VAR 0 3
18470: DIFF
18471: PPUSH
18472: CALL_OW 1
18476: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18477: LD_INT 35
18479: PPUSH
18480: CALL_OW 67
// for i in tmp do
18484: LD_ADDR_VAR 0 1
18488: PUSH
18489: LD_VAR 0 3
18493: PUSH
18494: FOR_IN
18495: IFFALSE 18577
// begin if GetLives ( i ) > 251 then
18497: LD_VAR 0 1
18501: PPUSH
18502: CALL_OW 256
18506: PUSH
18507: LD_INT 251
18509: GREATER
18510: IFFALSE 18548
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 4 ] ) , i ) ) else
18512: LD_VAR 0 1
18516: PPUSH
18517: LD_INT 81
18519: PUSH
18520: LD_INT 4
18522: PUSH
18523: EMPTY
18524: LIST
18525: LIST
18526: PPUSH
18527: CALL_OW 69
18531: PPUSH
18532: LD_VAR 0 1
18536: PPUSH
18537: CALL_OW 74
18541: PPUSH
18542: CALL_OW 115
18546: GO 18575
// if IsDead ( i ) then
18548: LD_VAR 0 1
18552: PPUSH
18553: CALL_OW 301
18557: IFFALSE 18575
// tmp := tmp diff i ;
18559: LD_ADDR_VAR 0 3
18563: PUSH
18564: LD_VAR 0 3
18568: PUSH
18569: LD_VAR 0 1
18573: DIFF
18574: ST_TO_ADDR
// end ;
18575: GO 18494
18577: POP
18578: POP
// until not tmp ;
18579: LD_VAR 0 3
18583: NOT
18584: IFFALSE 18477
// end ; end_of_file
18586: PPOPN 4
18588: END
// export function CustomEvent ( event ) ; begin
18589: LD_INT 0
18591: PPUSH
// end ;
18592: LD_VAR 0 2
18596: RET
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 = 4 then
18597: LD_VAR 0 1
18601: PUSH
18602: LD_INT 1
18604: EQUAL
18605: PUSH
18606: LD_VAR 0 2
18610: PUSH
18611: LD_INT 4
18613: EQUAL
18614: AND
18615: IFFALSE 18643
// begin SayRadio ( Powell , DP-Lost ) ;
18617: LD_EXP 12
18621: PPUSH
18622: LD_STRING DP-Lost
18624: PPUSH
18625: CALL_OW 94
// wait ( 0 0$2 ) ;
18629: LD_INT 70
18631: PPUSH
18632: CALL_OW 67
// YouLost ( FriendlyFire ) ;
18636: LD_STRING FriendlyFire
18638: PPUSH
18639: CALL_OW 104
// end ; end ;
18643: PPOPN 2
18645: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
18646: LD_VAR 0 1
18650: PPUSH
18651: CALL 98526 0 1
// if GameType = 1 then
18655: LD_EXP 2
18659: PUSH
18660: LD_INT 1
18662: EQUAL
18663: IFFALSE 18898
// begin if un = playerCommander then
18665: LD_VAR 0 1
18669: PUSH
18670: LD_EXP 9
18674: EQUAL
18675: IFFALSE 18684
// YouLost ( commanderDied ) ;
18677: LD_STRING commanderDied
18679: PPUSH
18680: CALL_OW 104
// if un = allyCommander then
18684: LD_VAR 0 1
18688: PUSH
18689: LD_EXP 11
18693: EQUAL
18694: IFFALSE 18703
// YouLost ( Theta ) ;
18696: LD_STRING Theta
18698: PPUSH
18699: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_building ] ] ] ) then
18703: LD_VAR 0 1
18707: PUSH
18708: LD_INT 22
18710: PUSH
18711: LD_INT 8
18713: PUSH
18714: EMPTY
18715: LIST
18716: LIST
18717: PUSH
18718: LD_INT 2
18720: PUSH
18721: LD_INT 21
18723: PUSH
18724: LD_INT 1
18726: PUSH
18727: EMPTY
18728: LIST
18729: LIST
18730: PUSH
18731: LD_INT 21
18733: PUSH
18734: LD_INT 3
18736: PUSH
18737: EMPTY
18738: LIST
18739: LIST
18740: PUSH
18741: EMPTY
18742: LIST
18743: LIST
18744: LIST
18745: PUSH
18746: EMPTY
18747: LIST
18748: LIST
18749: PPUSH
18750: CALL_OW 69
18754: IN
18755: IFFALSE 18771
// legDestCounter := legDestCounter + 1 ;
18757: LD_ADDR_EXP 18
18761: PUSH
18762: LD_EXP 18
18766: PUSH
18767: LD_INT 1
18769: PLUS
18770: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_building ] ] ] ) then
18771: LD_VAR 0 1
18775: PUSH
18776: LD_INT 22
18778: PUSH
18779: LD_INT 4
18781: PUSH
18782: EMPTY
18783: LIST
18784: LIST
18785: PUSH
18786: LD_INT 2
18788: PUSH
18789: LD_INT 21
18791: PUSH
18792: LD_INT 1
18794: PUSH
18795: EMPTY
18796: LIST
18797: LIST
18798: PUSH
18799: LD_INT 21
18801: PUSH
18802: LD_INT 3
18804: PUSH
18805: EMPTY
18806: LIST
18807: LIST
18808: PUSH
18809: EMPTY
18810: LIST
18811: LIST
18812: LIST
18813: PUSH
18814: EMPTY
18815: LIST
18816: LIST
18817: PPUSH
18818: CALL_OW 69
18822: IN
18823: IFFALSE 18839
// allyDestCounter := allyDestCounter + 1 ;
18825: LD_ADDR_EXP 22
18829: PUSH
18830: LD_EXP 22
18834: PUSH
18835: LD_INT 1
18837: PLUS
18838: ST_TO_ADDR
// if un in ruOutpost then
18839: LD_VAR 0 1
18843: PUSH
18844: LD_EXP 14
18848: IN
18849: IFFALSE 18898
// begin ruOutpost := ruOutpost diff un ;
18851: LD_ADDR_EXP 14
18855: PUSH
18856: LD_EXP 14
18860: PUSH
18861: LD_VAR 0 1
18865: DIFF
18866: ST_TO_ADDR
// ruEscape := Replace ( ruEscape , 1 , ruEscape [ 1 ] + 1 ) ;
18867: LD_ADDR_EXP 15
18871: PUSH
18872: LD_EXP 15
18876: PPUSH
18877: LD_INT 1
18879: PPUSH
18880: LD_EXP 15
18884: PUSH
18885: LD_INT 1
18887: ARRAY
18888: PUSH
18889: LD_INT 1
18891: PLUS
18892: PPUSH
18893: CALL_OW 1
18897: ST_TO_ADDR
// end ; end ; MCE_UnitDestroyed ( un ) ;
18898: LD_VAR 0 1
18902: PPUSH
18903: CALL 82916 0 1
// end ;
18907: PPOPN 1
18909: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
18910: LD_VAR 0 1
18914: PPUSH
18915: LD_VAR 0 2
18919: PPUSH
18920: CALL 85250 0 2
// end ;
18924: PPOPN 2
18926: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
18927: LD_VAR 0 1
18931: PPUSH
18932: CALL 84318 0 1
// end ;
18936: PPOPN 1
18938: END
// on BuildingComplete ( building ) do begin MCE_BuildingComplete ( building ) ;
18939: LD_VAR 0 1
18943: PPUSH
18944: CALL 84559 0 1
// end ;
18948: PPOPN 1
18950: END
// on ResearchComplete ( tech , lab ) do begin if tech = tech_LasDouble and GetSide ( lab ) = 1 then
18951: LD_VAR 0 1
18955: PUSH
18956: LD_INT 14
18958: EQUAL
18959: PUSH
18960: LD_VAR 0 2
18964: PPUSH
18965: CALL_OW 255
18969: PUSH
18970: LD_INT 1
18972: EQUAL
18973: AND
18974: IFFALSE 19015
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Laser ) ;
18976: LD_EXP 9
18980: PPUSH
18981: LD_STRING D
18983: PUSH
18984: LD_STRING I
18986: PUSH
18987: LD_STRING J
18989: PUSH
18990: LD_STRING S
18992: PUSH
18993: EMPTY
18994: LIST
18995: LIST
18996: LIST
18997: PUSH
18998: LD_EXP 25
19002: ARRAY
19003: STR
19004: PUSH
19005: LD_STRING -1-Laser
19007: STR
19008: PPUSH
19009: CALL_OW 88
// exit ;
19013: GO 19157
// end ; if tech = tech_MatDet and GetSide ( lab ) = 1 then
19015: LD_VAR 0 1
19019: PUSH
19020: LD_INT 7
19022: EQUAL
19023: PUSH
19024: LD_VAR 0 2
19028: PPUSH
19029: CALL_OW 255
19033: PUSH
19034: LD_INT 1
19036: EQUAL
19037: AND
19038: IFFALSE 19079
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Materialization ) ;
19040: LD_EXP 9
19044: PPUSH
19045: LD_STRING D
19047: PUSH
19048: LD_STRING I
19050: PUSH
19051: LD_STRING J
19053: PUSH
19054: LD_STRING S
19056: PUSH
19057: EMPTY
19058: LIST
19059: LIST
19060: LIST
19061: PUSH
19062: LD_EXP 25
19066: ARRAY
19067: STR
19068: PUSH
19069: LD_STRING -1-Materialization
19071: STR
19072: PPUSH
19073: CALL_OW 88
// exit ;
19077: GO 19157
// end ; if tech = tech_SibFiss and GetSide ( lab ) = 1 then
19079: LD_VAR 0 1
19083: PUSH
19084: LD_INT 25
19086: EQUAL
19087: PUSH
19088: LD_VAR 0 2
19092: PPUSH
19093: CALL_OW 255
19097: PUSH
19098: LD_INT 1
19100: EQUAL
19101: AND
19102: IFFALSE 19143
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Rocket ) ;
19104: LD_EXP 9
19108: PPUSH
19109: LD_STRING D
19111: PUSH
19112: LD_STRING I
19114: PUSH
19115: LD_STRING J
19117: PUSH
19118: LD_STRING S
19120: PUSH
19121: EMPTY
19122: LIST
19123: LIST
19124: LIST
19125: PUSH
19126: LD_EXP 25
19130: ARRAY
19131: STR
19132: PUSH
19133: LD_STRING -1-Rocket
19135: STR
19136: PPUSH
19137: CALL_OW 88
// exit ;
19141: GO 19157
// end ; MCE_ResearchComplete ( tech , lab ) ;
19143: LD_VAR 0 1
19147: PPUSH
19148: LD_VAR 0 2
19152: PPUSH
19153: CALL 82612 0 2
// end ;
19157: PPOPN 2
19159: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
19160: LD_VAR 0 1
19164: PPUSH
19165: LD_VAR 0 2
19169: PPUSH
19170: LD_VAR 0 3
19174: PPUSH
19175: LD_VAR 0 4
19179: PPUSH
19180: LD_VAR 0 5
19184: PPUSH
19185: CALL 82232 0 5
// end ;
19189: PPOPN 5
19191: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
19192: LD_VAR 0 1
19196: PPUSH
19197: LD_VAR 0 2
19201: PPUSH
19202: CALL 81828 0 2
// end ;
19206: PPOPN 2
19208: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
19209: LD_VAR 0 1
19213: PPUSH
19214: LD_VAR 0 2
19218: PPUSH
19219: LD_VAR 0 3
19223: PPUSH
19224: LD_VAR 0 4
19228: PPUSH
19229: CALL 81666 0 4
// end ;
19233: PPOPN 4
19235: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
19236: LD_VAR 0 1
19240: PPUSH
19241: LD_VAR 0 2
19245: PPUSH
19246: LD_VAR 0 3
19250: PPUSH
19251: CALL 81441 0 3
// end ;
19255: PPOPN 3
19257: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
19258: LD_VAR 0 1
19262: PPUSH
19263: LD_VAR 0 2
19267: PPUSH
19268: CALL 81326 0 2
// end ;
19272: PPOPN 2
19274: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
19275: LD_VAR 0 1
19279: PPUSH
19280: LD_VAR 0 2
19284: PPUSH
19285: CALL 85511 0 2
// end ;
19289: PPOPN 2
19291: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
19292: LD_VAR 0 1
19296: PPUSH
19297: LD_VAR 0 2
19301: PPUSH
19302: LD_VAR 0 3
19306: PPUSH
19307: LD_VAR 0 4
19311: PPUSH
19312: CALL 85727 0 4
// end ;
19316: PPOPN 4
19318: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
19319: LD_VAR 0 1
19323: PPUSH
19324: LD_VAR 0 2
19328: PPUSH
19329: CALL 81135 0 2
// end ;
19333: PPOPN 2
19335: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
19336: LD_VAR 0 1
19340: PPUSH
19341: CALL 98632 0 1
// end ; end_of_file
19345: PPOPN 1
19347: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
19348: LD_INT 0
19350: PPUSH
19351: PPUSH
// if exist_mode then
19352: LD_VAR 0 2
19356: IFFALSE 19381
// unit := CreateCharacter ( prefix & ident ) else
19358: LD_ADDR_VAR 0 5
19362: PUSH
19363: LD_VAR 0 3
19367: PUSH
19368: LD_VAR 0 1
19372: STR
19373: PPUSH
19374: CALL_OW 34
19378: ST_TO_ADDR
19379: GO 19396
// unit := NewCharacter ( ident ) ;
19381: LD_ADDR_VAR 0 5
19385: PUSH
19386: LD_VAR 0 1
19390: PPUSH
19391: CALL_OW 25
19395: ST_TO_ADDR
// result := unit ;
19396: LD_ADDR_VAR 0 4
19400: PUSH
19401: LD_VAR 0 5
19405: ST_TO_ADDR
// end ;
19406: LD_VAR 0 4
19410: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
19411: LD_INT 0
19413: PPUSH
19414: PPUSH
// if not side or not nation then
19415: LD_VAR 0 1
19419: NOT
19420: PUSH
19421: LD_VAR 0 2
19425: NOT
19426: OR
19427: IFFALSE 19431
// exit ;
19429: GO 20195
// case nation of nation_american :
19431: LD_VAR 0 2
19435: PUSH
19436: LD_INT 1
19438: DOUBLE
19439: EQUAL
19440: IFTRUE 19444
19442: GO 19658
19444: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
19445: LD_ADDR_VAR 0 4
19449: PUSH
19450: LD_INT 35
19452: PUSH
19453: LD_INT 45
19455: PUSH
19456: LD_INT 46
19458: PUSH
19459: LD_INT 47
19461: PUSH
19462: LD_INT 82
19464: PUSH
19465: LD_INT 83
19467: PUSH
19468: LD_INT 84
19470: PUSH
19471: LD_INT 85
19473: PUSH
19474: LD_INT 86
19476: PUSH
19477: LD_INT 1
19479: PUSH
19480: LD_INT 2
19482: PUSH
19483: LD_INT 6
19485: PUSH
19486: LD_INT 15
19488: PUSH
19489: LD_INT 16
19491: PUSH
19492: LD_INT 7
19494: PUSH
19495: LD_INT 12
19497: PUSH
19498: LD_INT 13
19500: PUSH
19501: LD_INT 10
19503: PUSH
19504: LD_INT 14
19506: PUSH
19507: LD_INT 20
19509: PUSH
19510: LD_INT 21
19512: PUSH
19513: LD_INT 22
19515: PUSH
19516: LD_INT 25
19518: PUSH
19519: LD_INT 32
19521: PUSH
19522: LD_INT 27
19524: PUSH
19525: LD_INT 36
19527: PUSH
19528: LD_INT 69
19530: PUSH
19531: LD_INT 39
19533: PUSH
19534: LD_INT 34
19536: PUSH
19537: LD_INT 40
19539: PUSH
19540: LD_INT 48
19542: PUSH
19543: LD_INT 49
19545: PUSH
19546: LD_INT 50
19548: PUSH
19549: LD_INT 51
19551: PUSH
19552: LD_INT 52
19554: PUSH
19555: LD_INT 53
19557: PUSH
19558: LD_INT 54
19560: PUSH
19561: LD_INT 55
19563: PUSH
19564: LD_INT 56
19566: PUSH
19567: LD_INT 57
19569: PUSH
19570: LD_INT 58
19572: PUSH
19573: LD_INT 59
19575: PUSH
19576: LD_INT 60
19578: PUSH
19579: LD_INT 61
19581: PUSH
19582: LD_INT 62
19584: PUSH
19585: LD_INT 80
19587: PUSH
19588: LD_INT 82
19590: PUSH
19591: LD_INT 83
19593: PUSH
19594: LD_INT 84
19596: PUSH
19597: LD_INT 85
19599: PUSH
19600: LD_INT 86
19602: PUSH
19603: EMPTY
19604: LIST
19605: LIST
19606: LIST
19607: LIST
19608: LIST
19609: LIST
19610: LIST
19611: LIST
19612: LIST
19613: LIST
19614: LIST
19615: LIST
19616: LIST
19617: LIST
19618: LIST
19619: LIST
19620: LIST
19621: LIST
19622: LIST
19623: LIST
19624: LIST
19625: LIST
19626: LIST
19627: LIST
19628: LIST
19629: LIST
19630: LIST
19631: LIST
19632: LIST
19633: LIST
19634: LIST
19635: LIST
19636: LIST
19637: LIST
19638: LIST
19639: LIST
19640: LIST
19641: LIST
19642: LIST
19643: LIST
19644: LIST
19645: LIST
19646: LIST
19647: LIST
19648: LIST
19649: LIST
19650: LIST
19651: LIST
19652: LIST
19653: LIST
19654: LIST
19655: ST_TO_ADDR
19656: GO 20119
19658: LD_INT 2
19660: DOUBLE
19661: EQUAL
19662: IFTRUE 19666
19664: GO 19888
19666: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
19667: LD_ADDR_VAR 0 4
19671: PUSH
19672: LD_INT 35
19674: PUSH
19675: LD_INT 45
19677: PUSH
19678: LD_INT 46
19680: PUSH
19681: LD_INT 47
19683: PUSH
19684: LD_INT 82
19686: PUSH
19687: LD_INT 83
19689: PUSH
19690: LD_INT 84
19692: PUSH
19693: LD_INT 85
19695: PUSH
19696: LD_INT 87
19698: PUSH
19699: LD_INT 70
19701: PUSH
19702: LD_INT 1
19704: PUSH
19705: LD_INT 11
19707: PUSH
19708: LD_INT 3
19710: PUSH
19711: LD_INT 4
19713: PUSH
19714: LD_INT 5
19716: PUSH
19717: LD_INT 6
19719: PUSH
19720: LD_INT 15
19722: PUSH
19723: LD_INT 18
19725: PUSH
19726: LD_INT 7
19728: PUSH
19729: LD_INT 17
19731: PUSH
19732: LD_INT 8
19734: PUSH
19735: LD_INT 20
19737: PUSH
19738: LD_INT 21
19740: PUSH
19741: LD_INT 22
19743: PUSH
19744: LD_INT 72
19746: PUSH
19747: LD_INT 26
19749: PUSH
19750: LD_INT 69
19752: PUSH
19753: LD_INT 39
19755: PUSH
19756: LD_INT 40
19758: PUSH
19759: LD_INT 41
19761: PUSH
19762: LD_INT 42
19764: PUSH
19765: LD_INT 43
19767: PUSH
19768: LD_INT 48
19770: PUSH
19771: LD_INT 49
19773: PUSH
19774: LD_INT 50
19776: PUSH
19777: LD_INT 51
19779: PUSH
19780: LD_INT 52
19782: PUSH
19783: LD_INT 53
19785: PUSH
19786: LD_INT 54
19788: PUSH
19789: LD_INT 55
19791: PUSH
19792: LD_INT 56
19794: PUSH
19795: LD_INT 60
19797: PUSH
19798: LD_INT 61
19800: PUSH
19801: LD_INT 62
19803: PUSH
19804: LD_INT 66
19806: PUSH
19807: LD_INT 67
19809: PUSH
19810: LD_INT 68
19812: PUSH
19813: LD_INT 81
19815: PUSH
19816: LD_INT 82
19818: PUSH
19819: LD_INT 83
19821: PUSH
19822: LD_INT 84
19824: PUSH
19825: LD_INT 85
19827: PUSH
19828: LD_INT 87
19830: PUSH
19831: EMPTY
19832: LIST
19833: LIST
19834: LIST
19835: LIST
19836: LIST
19837: LIST
19838: LIST
19839: LIST
19840: LIST
19841: LIST
19842: LIST
19843: LIST
19844: LIST
19845: LIST
19846: LIST
19847: LIST
19848: LIST
19849: LIST
19850: LIST
19851: LIST
19852: LIST
19853: LIST
19854: LIST
19855: LIST
19856: LIST
19857: LIST
19858: LIST
19859: LIST
19860: LIST
19861: LIST
19862: LIST
19863: LIST
19864: LIST
19865: LIST
19866: LIST
19867: LIST
19868: LIST
19869: LIST
19870: LIST
19871: LIST
19872: LIST
19873: LIST
19874: LIST
19875: LIST
19876: LIST
19877: LIST
19878: LIST
19879: LIST
19880: LIST
19881: LIST
19882: LIST
19883: LIST
19884: LIST
19885: ST_TO_ADDR
19886: GO 20119
19888: LD_INT 3
19890: DOUBLE
19891: EQUAL
19892: IFTRUE 19896
19894: GO 20118
19896: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
19897: LD_ADDR_VAR 0 4
19901: PUSH
19902: LD_INT 46
19904: PUSH
19905: LD_INT 47
19907: PUSH
19908: LD_INT 1
19910: PUSH
19911: LD_INT 2
19913: PUSH
19914: LD_INT 82
19916: PUSH
19917: LD_INT 83
19919: PUSH
19920: LD_INT 84
19922: PUSH
19923: LD_INT 85
19925: PUSH
19926: LD_INT 86
19928: PUSH
19929: LD_INT 11
19931: PUSH
19932: LD_INT 9
19934: PUSH
19935: LD_INT 20
19937: PUSH
19938: LD_INT 19
19940: PUSH
19941: LD_INT 21
19943: PUSH
19944: LD_INT 24
19946: PUSH
19947: LD_INT 22
19949: PUSH
19950: LD_INT 25
19952: PUSH
19953: LD_INT 28
19955: PUSH
19956: LD_INT 29
19958: PUSH
19959: LD_INT 30
19961: PUSH
19962: LD_INT 31
19964: PUSH
19965: LD_INT 37
19967: PUSH
19968: LD_INT 38
19970: PUSH
19971: LD_INT 32
19973: PUSH
19974: LD_INT 27
19976: PUSH
19977: LD_INT 33
19979: PUSH
19980: LD_INT 69
19982: PUSH
19983: LD_INT 39
19985: PUSH
19986: LD_INT 34
19988: PUSH
19989: LD_INT 40
19991: PUSH
19992: LD_INT 71
19994: PUSH
19995: LD_INT 23
19997: PUSH
19998: LD_INT 44
20000: PUSH
20001: LD_INT 48
20003: PUSH
20004: LD_INT 49
20006: PUSH
20007: LD_INT 50
20009: PUSH
20010: LD_INT 51
20012: PUSH
20013: LD_INT 52
20015: PUSH
20016: LD_INT 53
20018: PUSH
20019: LD_INT 54
20021: PUSH
20022: LD_INT 55
20024: PUSH
20025: LD_INT 56
20027: PUSH
20028: LD_INT 57
20030: PUSH
20031: LD_INT 58
20033: PUSH
20034: LD_INT 59
20036: PUSH
20037: LD_INT 63
20039: PUSH
20040: LD_INT 64
20042: PUSH
20043: LD_INT 65
20045: PUSH
20046: LD_INT 82
20048: PUSH
20049: LD_INT 83
20051: PUSH
20052: LD_INT 84
20054: PUSH
20055: LD_INT 85
20057: PUSH
20058: LD_INT 86
20060: PUSH
20061: EMPTY
20062: LIST
20063: LIST
20064: LIST
20065: LIST
20066: LIST
20067: LIST
20068: LIST
20069: LIST
20070: LIST
20071: LIST
20072: LIST
20073: LIST
20074: LIST
20075: LIST
20076: LIST
20077: LIST
20078: LIST
20079: LIST
20080: LIST
20081: LIST
20082: LIST
20083: LIST
20084: LIST
20085: LIST
20086: LIST
20087: LIST
20088: LIST
20089: LIST
20090: LIST
20091: LIST
20092: LIST
20093: LIST
20094: LIST
20095: LIST
20096: LIST
20097: LIST
20098: LIST
20099: LIST
20100: LIST
20101: LIST
20102: LIST
20103: LIST
20104: LIST
20105: LIST
20106: LIST
20107: LIST
20108: LIST
20109: LIST
20110: LIST
20111: LIST
20112: LIST
20113: LIST
20114: LIST
20115: ST_TO_ADDR
20116: GO 20119
20118: POP
// if state > - 1 and state < 3 then
20119: LD_VAR 0 3
20123: PUSH
20124: LD_INT 1
20126: NEG
20127: GREATER
20128: PUSH
20129: LD_VAR 0 3
20133: PUSH
20134: LD_INT 3
20136: LESS
20137: AND
20138: IFFALSE 20195
// for i in result do
20140: LD_ADDR_VAR 0 5
20144: PUSH
20145: LD_VAR 0 4
20149: PUSH
20150: FOR_IN
20151: IFFALSE 20193
// if GetTech ( i , side ) <> state then
20153: LD_VAR 0 5
20157: PPUSH
20158: LD_VAR 0 1
20162: PPUSH
20163: CALL_OW 321
20167: PUSH
20168: LD_VAR 0 3
20172: NONEQUAL
20173: IFFALSE 20191
// result := result diff i ;
20175: LD_ADDR_VAR 0 4
20179: PUSH
20180: LD_VAR 0 4
20184: PUSH
20185: LD_VAR 0 5
20189: DIFF
20190: ST_TO_ADDR
20191: GO 20150
20193: POP
20194: POP
// end ;
20195: LD_VAR 0 4
20199: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
20200: LD_INT 0
20202: PPUSH
20203: PPUSH
20204: PPUSH
// result := true ;
20205: LD_ADDR_VAR 0 3
20209: PUSH
20210: LD_INT 1
20212: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
20213: LD_ADDR_VAR 0 5
20217: PUSH
20218: LD_VAR 0 2
20222: PPUSH
20223: CALL_OW 480
20227: ST_TO_ADDR
// if not tmp then
20228: LD_VAR 0 5
20232: NOT
20233: IFFALSE 20237
// exit ;
20235: GO 20286
// for i in tmp do
20237: LD_ADDR_VAR 0 4
20241: PUSH
20242: LD_VAR 0 5
20246: PUSH
20247: FOR_IN
20248: IFFALSE 20284
// if GetTech ( i , side ) <> state_researched then
20250: LD_VAR 0 4
20254: PPUSH
20255: LD_VAR 0 1
20259: PPUSH
20260: CALL_OW 321
20264: PUSH
20265: LD_INT 2
20267: NONEQUAL
20268: IFFALSE 20282
// begin result := false ;
20270: LD_ADDR_VAR 0 3
20274: PUSH
20275: LD_INT 0
20277: ST_TO_ADDR
// exit ;
20278: POP
20279: POP
20280: GO 20286
// end ;
20282: GO 20247
20284: POP
20285: POP
// end ;
20286: LD_VAR 0 3
20290: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
20291: LD_INT 0
20293: PPUSH
20294: PPUSH
20295: PPUSH
20296: PPUSH
20297: PPUSH
20298: PPUSH
20299: PPUSH
20300: PPUSH
20301: PPUSH
20302: PPUSH
20303: PPUSH
20304: PPUSH
20305: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
20306: LD_VAR 0 1
20310: NOT
20311: PUSH
20312: LD_VAR 0 1
20316: PPUSH
20317: CALL_OW 257
20321: PUSH
20322: LD_INT 9
20324: NONEQUAL
20325: OR
20326: IFFALSE 20330
// exit ;
20328: GO 20903
// side := GetSide ( unit ) ;
20330: LD_ADDR_VAR 0 9
20334: PUSH
20335: LD_VAR 0 1
20339: PPUSH
20340: CALL_OW 255
20344: ST_TO_ADDR
// tech_space := tech_spacanom ;
20345: LD_ADDR_VAR 0 12
20349: PUSH
20350: LD_INT 29
20352: ST_TO_ADDR
// tech_time := tech_taurad ;
20353: LD_ADDR_VAR 0 13
20357: PUSH
20358: LD_INT 28
20360: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
20361: LD_ADDR_VAR 0 11
20365: PUSH
20366: LD_VAR 0 1
20370: PPUSH
20371: CALL_OW 310
20375: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
20376: LD_VAR 0 11
20380: PPUSH
20381: CALL_OW 247
20385: PUSH
20386: LD_INT 2
20388: EQUAL
20389: IFFALSE 20393
// exit ;
20391: GO 20903
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
20393: LD_ADDR_VAR 0 8
20397: PUSH
20398: LD_INT 81
20400: PUSH
20401: LD_VAR 0 9
20405: PUSH
20406: EMPTY
20407: LIST
20408: LIST
20409: PUSH
20410: LD_INT 3
20412: PUSH
20413: LD_INT 21
20415: PUSH
20416: LD_INT 3
20418: PUSH
20419: EMPTY
20420: LIST
20421: LIST
20422: PUSH
20423: EMPTY
20424: LIST
20425: LIST
20426: PUSH
20427: EMPTY
20428: LIST
20429: LIST
20430: PPUSH
20431: CALL_OW 69
20435: ST_TO_ADDR
// if not tmp then
20436: LD_VAR 0 8
20440: NOT
20441: IFFALSE 20445
// exit ;
20443: GO 20903
// if in_unit then
20445: LD_VAR 0 11
20449: IFFALSE 20473
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
20451: LD_ADDR_VAR 0 10
20455: PUSH
20456: LD_VAR 0 8
20460: PPUSH
20461: LD_VAR 0 11
20465: PPUSH
20466: CALL_OW 74
20470: ST_TO_ADDR
20471: GO 20493
// enemy := NearestUnitToUnit ( tmp , unit ) ;
20473: LD_ADDR_VAR 0 10
20477: PUSH
20478: LD_VAR 0 8
20482: PPUSH
20483: LD_VAR 0 1
20487: PPUSH
20488: CALL_OW 74
20492: ST_TO_ADDR
// if not enemy then
20493: LD_VAR 0 10
20497: NOT
20498: IFFALSE 20502
// exit ;
20500: GO 20903
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
20502: LD_VAR 0 11
20506: PUSH
20507: LD_VAR 0 11
20511: PPUSH
20512: LD_VAR 0 10
20516: PPUSH
20517: CALL_OW 296
20521: PUSH
20522: LD_INT 13
20524: GREATER
20525: AND
20526: PUSH
20527: LD_VAR 0 1
20531: PPUSH
20532: LD_VAR 0 10
20536: PPUSH
20537: CALL_OW 296
20541: PUSH
20542: LD_INT 12
20544: GREATER
20545: OR
20546: IFFALSE 20550
// exit ;
20548: GO 20903
// missile := [ 1 ] ;
20550: LD_ADDR_VAR 0 14
20554: PUSH
20555: LD_INT 1
20557: PUSH
20558: EMPTY
20559: LIST
20560: ST_TO_ADDR
// if Researched ( side , tech_space ) then
20561: LD_VAR 0 9
20565: PPUSH
20566: LD_VAR 0 12
20570: PPUSH
20571: CALL_OW 325
20575: IFFALSE 20604
// missile := Insert ( missile , missile + 1 , 2 ) ;
20577: LD_ADDR_VAR 0 14
20581: PUSH
20582: LD_VAR 0 14
20586: PPUSH
20587: LD_VAR 0 14
20591: PUSH
20592: LD_INT 1
20594: PLUS
20595: PPUSH
20596: LD_INT 2
20598: PPUSH
20599: CALL_OW 2
20603: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
20604: LD_VAR 0 9
20608: PPUSH
20609: LD_VAR 0 13
20613: PPUSH
20614: CALL_OW 325
20618: PUSH
20619: LD_VAR 0 10
20623: PPUSH
20624: CALL_OW 255
20628: PPUSH
20629: LD_VAR 0 13
20633: PPUSH
20634: CALL_OW 325
20638: NOT
20639: AND
20640: IFFALSE 20669
// missile := Insert ( missile , missile + 1 , 3 ) ;
20642: LD_ADDR_VAR 0 14
20646: PUSH
20647: LD_VAR 0 14
20651: PPUSH
20652: LD_VAR 0 14
20656: PUSH
20657: LD_INT 1
20659: PLUS
20660: PPUSH
20661: LD_INT 3
20663: PPUSH
20664: CALL_OW 2
20668: ST_TO_ADDR
// if missile < 2 then
20669: LD_VAR 0 14
20673: PUSH
20674: LD_INT 2
20676: LESS
20677: IFFALSE 20681
// exit ;
20679: GO 20903
// x := GetX ( enemy ) ;
20681: LD_ADDR_VAR 0 4
20685: PUSH
20686: LD_VAR 0 10
20690: PPUSH
20691: CALL_OW 250
20695: ST_TO_ADDR
// y := GetY ( enemy ) ;
20696: LD_ADDR_VAR 0 5
20700: PUSH
20701: LD_VAR 0 10
20705: PPUSH
20706: CALL_OW 251
20710: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
20711: LD_ADDR_VAR 0 6
20715: PUSH
20716: LD_VAR 0 4
20720: PUSH
20721: LD_INT 1
20723: NEG
20724: PPUSH
20725: LD_INT 1
20727: PPUSH
20728: CALL_OW 12
20732: PLUS
20733: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
20734: LD_ADDR_VAR 0 7
20738: PUSH
20739: LD_VAR 0 5
20743: PUSH
20744: LD_INT 1
20746: NEG
20747: PPUSH
20748: LD_INT 1
20750: PPUSH
20751: CALL_OW 12
20755: PLUS
20756: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
20757: LD_VAR 0 6
20761: PPUSH
20762: LD_VAR 0 7
20766: PPUSH
20767: CALL_OW 488
20771: NOT
20772: IFFALSE 20794
// begin _x := x ;
20774: LD_ADDR_VAR 0 6
20778: PUSH
20779: LD_VAR 0 4
20783: ST_TO_ADDR
// _y := y ;
20784: LD_ADDR_VAR 0 7
20788: PUSH
20789: LD_VAR 0 5
20793: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
20794: LD_ADDR_VAR 0 3
20798: PUSH
20799: LD_INT 1
20801: PPUSH
20802: LD_VAR 0 14
20806: PPUSH
20807: CALL_OW 12
20811: ST_TO_ADDR
// case i of 1 :
20812: LD_VAR 0 3
20816: PUSH
20817: LD_INT 1
20819: DOUBLE
20820: EQUAL
20821: IFTRUE 20825
20823: GO 20842
20825: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
20826: LD_VAR 0 1
20830: PPUSH
20831: LD_VAR 0 10
20835: PPUSH
20836: CALL_OW 115
20840: GO 20903
20842: LD_INT 2
20844: DOUBLE
20845: EQUAL
20846: IFTRUE 20850
20848: GO 20872
20850: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
20851: LD_VAR 0 1
20855: PPUSH
20856: LD_VAR 0 6
20860: PPUSH
20861: LD_VAR 0 7
20865: PPUSH
20866: CALL_OW 153
20870: GO 20903
20872: LD_INT 3
20874: DOUBLE
20875: EQUAL
20876: IFTRUE 20880
20878: GO 20902
20880: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
20881: LD_VAR 0 1
20885: PPUSH
20886: LD_VAR 0 6
20890: PPUSH
20891: LD_VAR 0 7
20895: PPUSH
20896: CALL_OW 154
20900: GO 20903
20902: POP
// end ;
20903: LD_VAR 0 2
20907: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
20908: LD_INT 0
20910: PPUSH
20911: PPUSH
20912: PPUSH
20913: PPUSH
20914: PPUSH
20915: PPUSH
// if not unit or not building then
20916: LD_VAR 0 1
20920: NOT
20921: PUSH
20922: LD_VAR 0 2
20926: NOT
20927: OR
20928: IFFALSE 20932
// exit ;
20930: GO 21090
// x := GetX ( building ) ;
20932: LD_ADDR_VAR 0 5
20936: PUSH
20937: LD_VAR 0 2
20941: PPUSH
20942: CALL_OW 250
20946: ST_TO_ADDR
// y := GetY ( building ) ;
20947: LD_ADDR_VAR 0 6
20951: PUSH
20952: LD_VAR 0 2
20956: PPUSH
20957: CALL_OW 251
20961: ST_TO_ADDR
// for i = 0 to 5 do
20962: LD_ADDR_VAR 0 4
20966: PUSH
20967: DOUBLE
20968: LD_INT 0
20970: DEC
20971: ST_TO_ADDR
20972: LD_INT 5
20974: PUSH
20975: FOR_TO
20976: IFFALSE 21088
// begin _x := ShiftX ( x , i , 3 ) ;
20978: LD_ADDR_VAR 0 7
20982: PUSH
20983: LD_VAR 0 5
20987: PPUSH
20988: LD_VAR 0 4
20992: PPUSH
20993: LD_INT 3
20995: PPUSH
20996: CALL_OW 272
21000: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
21001: LD_ADDR_VAR 0 8
21005: PUSH
21006: LD_VAR 0 6
21010: PPUSH
21011: LD_VAR 0 4
21015: PPUSH
21016: LD_INT 3
21018: PPUSH
21019: CALL_OW 273
21023: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21024: LD_VAR 0 7
21028: PPUSH
21029: LD_VAR 0 8
21033: PPUSH
21034: CALL_OW 488
21038: NOT
21039: IFFALSE 21043
// continue ;
21041: GO 20975
// if HexInfo ( _x , _y ) = 0 then
21043: LD_VAR 0 7
21047: PPUSH
21048: LD_VAR 0 8
21052: PPUSH
21053: CALL_OW 428
21057: PUSH
21058: LD_INT 0
21060: EQUAL
21061: IFFALSE 21086
// begin ComMoveXY ( unit , _x , _y ) ;
21063: LD_VAR 0 1
21067: PPUSH
21068: LD_VAR 0 7
21072: PPUSH
21073: LD_VAR 0 8
21077: PPUSH
21078: CALL_OW 111
// exit ;
21082: POP
21083: POP
21084: GO 21090
// end ; end ;
21086: GO 20975
21088: POP
21089: POP
// end ;
21090: LD_VAR 0 3
21094: RET
// export function ScanBase ( side , base_area ) ; begin
21095: LD_INT 0
21097: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
21098: LD_ADDR_VAR 0 3
21102: PUSH
21103: LD_VAR 0 2
21107: PPUSH
21108: LD_INT 81
21110: PUSH
21111: LD_VAR 0 1
21115: PUSH
21116: EMPTY
21117: LIST
21118: LIST
21119: PPUSH
21120: CALL_OW 70
21124: ST_TO_ADDR
// end ;
21125: LD_VAR 0 3
21129: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
21130: LD_INT 0
21132: PPUSH
21133: PPUSH
21134: PPUSH
21135: PPUSH
// result := false ;
21136: LD_ADDR_VAR 0 2
21140: PUSH
21141: LD_INT 0
21143: ST_TO_ADDR
// side := GetSide ( unit ) ;
21144: LD_ADDR_VAR 0 3
21148: PUSH
21149: LD_VAR 0 1
21153: PPUSH
21154: CALL_OW 255
21158: ST_TO_ADDR
// nat := GetNation ( unit ) ;
21159: LD_ADDR_VAR 0 4
21163: PUSH
21164: LD_VAR 0 1
21168: PPUSH
21169: CALL_OW 248
21173: ST_TO_ADDR
// case nat of 1 :
21174: LD_VAR 0 4
21178: PUSH
21179: LD_INT 1
21181: DOUBLE
21182: EQUAL
21183: IFTRUE 21187
21185: GO 21198
21187: POP
// tech := tech_lassight ; 2 :
21188: LD_ADDR_VAR 0 5
21192: PUSH
21193: LD_INT 12
21195: ST_TO_ADDR
21196: GO 21237
21198: LD_INT 2
21200: DOUBLE
21201: EQUAL
21202: IFTRUE 21206
21204: GO 21217
21206: POP
// tech := tech_mortar ; 3 :
21207: LD_ADDR_VAR 0 5
21211: PUSH
21212: LD_INT 41
21214: ST_TO_ADDR
21215: GO 21237
21217: LD_INT 3
21219: DOUBLE
21220: EQUAL
21221: IFTRUE 21225
21223: GO 21236
21225: POP
// tech := tech_bazooka ; end ;
21226: LD_ADDR_VAR 0 5
21230: PUSH
21231: LD_INT 44
21233: ST_TO_ADDR
21234: GO 21237
21236: POP
// if Researched ( side , tech ) then
21237: LD_VAR 0 3
21241: PPUSH
21242: LD_VAR 0 5
21246: PPUSH
21247: CALL_OW 325
21251: IFFALSE 21278
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
21253: LD_ADDR_VAR 0 2
21257: PUSH
21258: LD_INT 5
21260: PUSH
21261: LD_INT 8
21263: PUSH
21264: LD_INT 9
21266: PUSH
21267: EMPTY
21268: LIST
21269: LIST
21270: LIST
21271: PUSH
21272: LD_VAR 0 4
21276: ARRAY
21277: ST_TO_ADDR
// end ;
21278: LD_VAR 0 2
21282: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
21283: LD_INT 0
21285: PPUSH
21286: PPUSH
21287: PPUSH
// if not mines then
21288: LD_VAR 0 2
21292: NOT
21293: IFFALSE 21297
// exit ;
21295: GO 21441
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21297: LD_ADDR_VAR 0 5
21301: PUSH
21302: LD_INT 81
21304: PUSH
21305: LD_VAR 0 1
21309: PUSH
21310: EMPTY
21311: LIST
21312: LIST
21313: PUSH
21314: LD_INT 3
21316: PUSH
21317: LD_INT 21
21319: PUSH
21320: LD_INT 3
21322: PUSH
21323: EMPTY
21324: LIST
21325: LIST
21326: PUSH
21327: EMPTY
21328: LIST
21329: LIST
21330: PUSH
21331: EMPTY
21332: LIST
21333: LIST
21334: PPUSH
21335: CALL_OW 69
21339: ST_TO_ADDR
// for i in mines do
21340: LD_ADDR_VAR 0 4
21344: PUSH
21345: LD_VAR 0 2
21349: PUSH
21350: FOR_IN
21351: IFFALSE 21439
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
21353: LD_VAR 0 4
21357: PUSH
21358: LD_INT 1
21360: ARRAY
21361: PPUSH
21362: LD_VAR 0 4
21366: PUSH
21367: LD_INT 2
21369: ARRAY
21370: PPUSH
21371: CALL_OW 458
21375: NOT
21376: IFFALSE 21380
// continue ;
21378: GO 21350
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
21380: LD_VAR 0 4
21384: PUSH
21385: LD_INT 1
21387: ARRAY
21388: PPUSH
21389: LD_VAR 0 4
21393: PUSH
21394: LD_INT 2
21396: ARRAY
21397: PPUSH
21398: CALL_OW 428
21402: PUSH
21403: LD_VAR 0 5
21407: IN
21408: IFFALSE 21437
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
21410: LD_VAR 0 4
21414: PUSH
21415: LD_INT 1
21417: ARRAY
21418: PPUSH
21419: LD_VAR 0 4
21423: PUSH
21424: LD_INT 2
21426: ARRAY
21427: PPUSH
21428: LD_VAR 0 1
21432: PPUSH
21433: CALL_OW 456
// end ;
21437: GO 21350
21439: POP
21440: POP
// end ;
21441: LD_VAR 0 3
21445: RET
// export function Count ( array ) ; var i ; begin
21446: LD_INT 0
21448: PPUSH
21449: PPUSH
// result := 0 ;
21450: LD_ADDR_VAR 0 2
21454: PUSH
21455: LD_INT 0
21457: ST_TO_ADDR
// for i in array do
21458: LD_ADDR_VAR 0 3
21462: PUSH
21463: LD_VAR 0 1
21467: PUSH
21468: FOR_IN
21469: IFFALSE 21493
// if i then
21471: LD_VAR 0 3
21475: IFFALSE 21491
// result := result + 1 ;
21477: LD_ADDR_VAR 0 2
21481: PUSH
21482: LD_VAR 0 2
21486: PUSH
21487: LD_INT 1
21489: PLUS
21490: ST_TO_ADDR
21491: GO 21468
21493: POP
21494: POP
// end ;
21495: LD_VAR 0 2
21499: RET
// export function IsEmpty ( building ) ; begin
21500: LD_INT 0
21502: PPUSH
// if not building then
21503: LD_VAR 0 1
21507: NOT
21508: IFFALSE 21512
// exit ;
21510: GO 21555
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
21512: LD_ADDR_VAR 0 2
21516: PUSH
21517: LD_VAR 0 1
21521: PUSH
21522: LD_INT 22
21524: PUSH
21525: LD_VAR 0 1
21529: PPUSH
21530: CALL_OW 255
21534: PUSH
21535: EMPTY
21536: LIST
21537: LIST
21538: PUSH
21539: LD_INT 58
21541: PUSH
21542: EMPTY
21543: LIST
21544: PUSH
21545: EMPTY
21546: LIST
21547: LIST
21548: PPUSH
21549: CALL_OW 69
21553: IN
21554: ST_TO_ADDR
// end ;
21555: LD_VAR 0 2
21559: RET
// export function IsNotFull ( building ) ; begin
21560: LD_INT 0
21562: PPUSH
// if not building then
21563: LD_VAR 0 1
21567: NOT
21568: IFFALSE 21572
// exit ;
21570: GO 21591
// result := UnitsInside ( building ) < 6 ;
21572: LD_ADDR_VAR 0 2
21576: PUSH
21577: LD_VAR 0 1
21581: PPUSH
21582: CALL_OW 313
21586: PUSH
21587: LD_INT 6
21589: LESS
21590: ST_TO_ADDR
// end ;
21591: LD_VAR 0 2
21595: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
21596: LD_INT 0
21598: PPUSH
21599: PPUSH
21600: PPUSH
21601: PPUSH
// tmp := [ ] ;
21602: LD_ADDR_VAR 0 3
21606: PUSH
21607: EMPTY
21608: ST_TO_ADDR
// list := [ ] ;
21609: LD_ADDR_VAR 0 5
21613: PUSH
21614: EMPTY
21615: ST_TO_ADDR
// for i = 16 to 25 do
21616: LD_ADDR_VAR 0 4
21620: PUSH
21621: DOUBLE
21622: LD_INT 16
21624: DEC
21625: ST_TO_ADDR
21626: LD_INT 25
21628: PUSH
21629: FOR_TO
21630: IFFALSE 21703
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
21632: LD_ADDR_VAR 0 3
21636: PUSH
21637: LD_VAR 0 3
21641: PUSH
21642: LD_INT 22
21644: PUSH
21645: LD_VAR 0 1
21649: PPUSH
21650: CALL_OW 255
21654: PUSH
21655: EMPTY
21656: LIST
21657: LIST
21658: PUSH
21659: LD_INT 91
21661: PUSH
21662: LD_VAR 0 1
21666: PUSH
21667: LD_INT 6
21669: PUSH
21670: EMPTY
21671: LIST
21672: LIST
21673: LIST
21674: PUSH
21675: LD_INT 30
21677: PUSH
21678: LD_VAR 0 4
21682: PUSH
21683: EMPTY
21684: LIST
21685: LIST
21686: PUSH
21687: EMPTY
21688: LIST
21689: LIST
21690: LIST
21691: PUSH
21692: EMPTY
21693: LIST
21694: PPUSH
21695: CALL_OW 69
21699: ADD
21700: ST_TO_ADDR
21701: GO 21629
21703: POP
21704: POP
// for i = 1 to tmp do
21705: LD_ADDR_VAR 0 4
21709: PUSH
21710: DOUBLE
21711: LD_INT 1
21713: DEC
21714: ST_TO_ADDR
21715: LD_VAR 0 3
21719: PUSH
21720: FOR_TO
21721: IFFALSE 21809
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
21723: LD_ADDR_VAR 0 5
21727: PUSH
21728: LD_VAR 0 5
21732: PUSH
21733: LD_VAR 0 3
21737: PUSH
21738: LD_VAR 0 4
21742: ARRAY
21743: PPUSH
21744: CALL_OW 266
21748: PUSH
21749: LD_VAR 0 3
21753: PUSH
21754: LD_VAR 0 4
21758: ARRAY
21759: PPUSH
21760: CALL_OW 250
21764: PUSH
21765: LD_VAR 0 3
21769: PUSH
21770: LD_VAR 0 4
21774: ARRAY
21775: PPUSH
21776: CALL_OW 251
21780: PUSH
21781: LD_VAR 0 3
21785: PUSH
21786: LD_VAR 0 4
21790: ARRAY
21791: PPUSH
21792: CALL_OW 254
21796: PUSH
21797: EMPTY
21798: LIST
21799: LIST
21800: LIST
21801: LIST
21802: PUSH
21803: EMPTY
21804: LIST
21805: ADD
21806: ST_TO_ADDR
21807: GO 21720
21809: POP
21810: POP
// result := list ;
21811: LD_ADDR_VAR 0 2
21815: PUSH
21816: LD_VAR 0 5
21820: ST_TO_ADDR
// end ;
21821: LD_VAR 0 2
21825: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
21826: LD_INT 0
21828: PPUSH
21829: PPUSH
21830: PPUSH
21831: PPUSH
21832: PPUSH
21833: PPUSH
21834: PPUSH
// if not factory then
21835: LD_VAR 0 1
21839: NOT
21840: IFFALSE 21844
// exit ;
21842: GO 22437
// if control = control_apeman then
21844: LD_VAR 0 4
21848: PUSH
21849: LD_INT 5
21851: EQUAL
21852: IFFALSE 21961
// begin tmp := UnitsInside ( factory ) ;
21854: LD_ADDR_VAR 0 8
21858: PUSH
21859: LD_VAR 0 1
21863: PPUSH
21864: CALL_OW 313
21868: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
21869: LD_VAR 0 8
21873: PPUSH
21874: LD_INT 25
21876: PUSH
21877: LD_INT 12
21879: PUSH
21880: EMPTY
21881: LIST
21882: LIST
21883: PPUSH
21884: CALL_OW 72
21888: NOT
21889: IFFALSE 21899
// control := control_manual ;
21891: LD_ADDR_VAR 0 4
21895: PUSH
21896: LD_INT 1
21898: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
21899: LD_ADDR_VAR 0 8
21903: PUSH
21904: LD_VAR 0 1
21908: PPUSH
21909: CALL 21596 0 1
21913: ST_TO_ADDR
// if tmp then
21914: LD_VAR 0 8
21918: IFFALSE 21961
// begin for i in tmp do
21920: LD_ADDR_VAR 0 7
21924: PUSH
21925: LD_VAR 0 8
21929: PUSH
21930: FOR_IN
21931: IFFALSE 21959
// if i [ 1 ] = b_ext_radio then
21933: LD_VAR 0 7
21937: PUSH
21938: LD_INT 1
21940: ARRAY
21941: PUSH
21942: LD_INT 22
21944: EQUAL
21945: IFFALSE 21957
// begin control := control_remote ;
21947: LD_ADDR_VAR 0 4
21951: PUSH
21952: LD_INT 2
21954: ST_TO_ADDR
// break ;
21955: GO 21959
// end ;
21957: GO 21930
21959: POP
21960: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
21961: LD_VAR 0 1
21965: PPUSH
21966: LD_VAR 0 2
21970: PPUSH
21971: LD_VAR 0 3
21975: PPUSH
21976: LD_VAR 0 4
21980: PPUSH
21981: LD_VAR 0 5
21985: PPUSH
21986: CALL_OW 448
21990: IFFALSE 22025
// begin result := [ chassis , engine , control , weapon ] ;
21992: LD_ADDR_VAR 0 6
21996: PUSH
21997: LD_VAR 0 2
22001: PUSH
22002: LD_VAR 0 3
22006: PUSH
22007: LD_VAR 0 4
22011: PUSH
22012: LD_VAR 0 5
22016: PUSH
22017: EMPTY
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: ST_TO_ADDR
// exit ;
22023: GO 22437
// end ; _chassis := AvailableChassisList ( factory ) ;
22025: LD_ADDR_VAR 0 9
22029: PUSH
22030: LD_VAR 0 1
22034: PPUSH
22035: CALL_OW 475
22039: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
22040: LD_ADDR_VAR 0 11
22044: PUSH
22045: LD_VAR 0 1
22049: PPUSH
22050: CALL_OW 476
22054: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
22055: LD_ADDR_VAR 0 12
22059: PUSH
22060: LD_VAR 0 1
22064: PPUSH
22065: CALL_OW 477
22069: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
22070: LD_ADDR_VAR 0 10
22074: PUSH
22075: LD_VAR 0 1
22079: PPUSH
22080: CALL_OW 478
22084: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
22085: LD_VAR 0 9
22089: NOT
22090: PUSH
22091: LD_VAR 0 11
22095: NOT
22096: OR
22097: PUSH
22098: LD_VAR 0 12
22102: NOT
22103: OR
22104: PUSH
22105: LD_VAR 0 10
22109: NOT
22110: OR
22111: IFFALSE 22146
// begin result := [ chassis , engine , control , weapon ] ;
22113: LD_ADDR_VAR 0 6
22117: PUSH
22118: LD_VAR 0 2
22122: PUSH
22123: LD_VAR 0 3
22127: PUSH
22128: LD_VAR 0 4
22132: PUSH
22133: LD_VAR 0 5
22137: PUSH
22138: EMPTY
22139: LIST
22140: LIST
22141: LIST
22142: LIST
22143: ST_TO_ADDR
// exit ;
22144: GO 22437
// end ; if not chassis in _chassis then
22146: LD_VAR 0 2
22150: PUSH
22151: LD_VAR 0 9
22155: IN
22156: NOT
22157: IFFALSE 22183
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
22159: LD_ADDR_VAR 0 2
22163: PUSH
22164: LD_VAR 0 9
22168: PUSH
22169: LD_INT 1
22171: PPUSH
22172: LD_VAR 0 9
22176: PPUSH
22177: CALL_OW 12
22181: ARRAY
22182: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
22183: LD_VAR 0 2
22187: PPUSH
22188: LD_VAR 0 3
22192: PPUSH
22193: CALL 22442 0 2
22197: NOT
22198: IFFALSE 22257
// repeat engine := _engine [ 1 ] ;
22200: LD_ADDR_VAR 0 3
22204: PUSH
22205: LD_VAR 0 11
22209: PUSH
22210: LD_INT 1
22212: ARRAY
22213: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
22214: LD_ADDR_VAR 0 11
22218: PUSH
22219: LD_VAR 0 11
22223: PPUSH
22224: LD_INT 1
22226: PPUSH
22227: CALL_OW 3
22231: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
22232: LD_VAR 0 2
22236: PPUSH
22237: LD_VAR 0 3
22241: PPUSH
22242: CALL 22442 0 2
22246: PUSH
22247: LD_VAR 0 11
22251: PUSH
22252: EMPTY
22253: EQUAL
22254: OR
22255: IFFALSE 22200
// if not control in _control then
22257: LD_VAR 0 4
22261: PUSH
22262: LD_VAR 0 12
22266: IN
22267: NOT
22268: IFFALSE 22294
// control := _control [ rand ( 1 , _control ) ] ;
22270: LD_ADDR_VAR 0 4
22274: PUSH
22275: LD_VAR 0 12
22279: PUSH
22280: LD_INT 1
22282: PPUSH
22283: LD_VAR 0 12
22287: PPUSH
22288: CALL_OW 12
22292: ARRAY
22293: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
22294: LD_VAR 0 2
22298: PPUSH
22299: LD_VAR 0 5
22303: PPUSH
22304: CALL 22662 0 2
22308: NOT
22309: IFFALSE 22368
// repeat weapon := _weapon [ 1 ] ;
22311: LD_ADDR_VAR 0 5
22315: PUSH
22316: LD_VAR 0 10
22320: PUSH
22321: LD_INT 1
22323: ARRAY
22324: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
22325: LD_ADDR_VAR 0 10
22329: PUSH
22330: LD_VAR 0 10
22334: PPUSH
22335: LD_INT 1
22337: PPUSH
22338: CALL_OW 3
22342: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
22343: LD_VAR 0 2
22347: PPUSH
22348: LD_VAR 0 5
22352: PPUSH
22353: CALL 22662 0 2
22357: PUSH
22358: LD_VAR 0 10
22362: PUSH
22363: EMPTY
22364: EQUAL
22365: OR
22366: IFFALSE 22311
// result := [ ] ;
22368: LD_ADDR_VAR 0 6
22372: PUSH
22373: EMPTY
22374: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
22375: LD_VAR 0 1
22379: PPUSH
22380: LD_VAR 0 2
22384: PPUSH
22385: LD_VAR 0 3
22389: PPUSH
22390: LD_VAR 0 4
22394: PPUSH
22395: LD_VAR 0 5
22399: PPUSH
22400: CALL_OW 448
22404: IFFALSE 22437
// result := [ chassis , engine , control , weapon ] ;
22406: LD_ADDR_VAR 0 6
22410: PUSH
22411: LD_VAR 0 2
22415: PUSH
22416: LD_VAR 0 3
22420: PUSH
22421: LD_VAR 0 4
22425: PUSH
22426: LD_VAR 0 5
22430: PUSH
22431: EMPTY
22432: LIST
22433: LIST
22434: LIST
22435: LIST
22436: ST_TO_ADDR
// end ;
22437: LD_VAR 0 6
22441: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
22442: LD_INT 0
22444: PPUSH
// if not chassis or not engine then
22445: LD_VAR 0 1
22449: NOT
22450: PUSH
22451: LD_VAR 0 2
22455: NOT
22456: OR
22457: IFFALSE 22461
// exit ;
22459: GO 22657
// case engine of engine_solar :
22461: LD_VAR 0 2
22465: PUSH
22466: LD_INT 2
22468: DOUBLE
22469: EQUAL
22470: IFTRUE 22474
22472: GO 22512
22474: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
22475: LD_ADDR_VAR 0 3
22479: PUSH
22480: LD_INT 11
22482: PUSH
22483: LD_INT 12
22485: PUSH
22486: LD_INT 13
22488: PUSH
22489: LD_INT 14
22491: PUSH
22492: LD_INT 1
22494: PUSH
22495: LD_INT 2
22497: PUSH
22498: LD_INT 3
22500: PUSH
22501: EMPTY
22502: LIST
22503: LIST
22504: LIST
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: ST_TO_ADDR
22510: GO 22641
22512: LD_INT 1
22514: DOUBLE
22515: EQUAL
22516: IFTRUE 22520
22518: GO 22582
22520: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
22521: LD_ADDR_VAR 0 3
22525: PUSH
22526: LD_INT 11
22528: PUSH
22529: LD_INT 12
22531: PUSH
22532: LD_INT 13
22534: PUSH
22535: LD_INT 14
22537: PUSH
22538: LD_INT 1
22540: PUSH
22541: LD_INT 2
22543: PUSH
22544: LD_INT 3
22546: PUSH
22547: LD_INT 4
22549: PUSH
22550: LD_INT 5
22552: PUSH
22553: LD_INT 21
22555: PUSH
22556: LD_INT 23
22558: PUSH
22559: LD_INT 22
22561: PUSH
22562: LD_INT 24
22564: PUSH
22565: EMPTY
22566: LIST
22567: LIST
22568: LIST
22569: LIST
22570: LIST
22571: LIST
22572: LIST
22573: LIST
22574: LIST
22575: LIST
22576: LIST
22577: LIST
22578: LIST
22579: ST_TO_ADDR
22580: GO 22641
22582: LD_INT 3
22584: DOUBLE
22585: EQUAL
22586: IFTRUE 22590
22588: GO 22640
22590: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
22591: LD_ADDR_VAR 0 3
22595: PUSH
22596: LD_INT 13
22598: PUSH
22599: LD_INT 14
22601: PUSH
22602: LD_INT 2
22604: PUSH
22605: LD_INT 3
22607: PUSH
22608: LD_INT 4
22610: PUSH
22611: LD_INT 5
22613: PUSH
22614: LD_INT 21
22616: PUSH
22617: LD_INT 22
22619: PUSH
22620: LD_INT 23
22622: PUSH
22623: LD_INT 24
22625: PUSH
22626: EMPTY
22627: LIST
22628: LIST
22629: LIST
22630: LIST
22631: LIST
22632: LIST
22633: LIST
22634: LIST
22635: LIST
22636: LIST
22637: ST_TO_ADDR
22638: GO 22641
22640: POP
// result := ( chassis in result ) ;
22641: LD_ADDR_VAR 0 3
22645: PUSH
22646: LD_VAR 0 1
22650: PUSH
22651: LD_VAR 0 3
22655: IN
22656: ST_TO_ADDR
// end ;
22657: LD_VAR 0 3
22661: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
22662: LD_INT 0
22664: PPUSH
// if not chassis or not weapon then
22665: LD_VAR 0 1
22669: NOT
22670: PUSH
22671: LD_VAR 0 2
22675: NOT
22676: OR
22677: IFFALSE 22681
// exit ;
22679: GO 23707
// case weapon of us_machine_gun :
22681: LD_VAR 0 2
22685: PUSH
22686: LD_INT 2
22688: DOUBLE
22689: EQUAL
22690: IFTRUE 22694
22692: GO 22724
22694: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
22695: LD_ADDR_VAR 0 3
22699: PUSH
22700: LD_INT 1
22702: PUSH
22703: LD_INT 2
22705: PUSH
22706: LD_INT 3
22708: PUSH
22709: LD_INT 4
22711: PUSH
22712: LD_INT 5
22714: PUSH
22715: EMPTY
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: ST_TO_ADDR
22722: GO 23691
22724: LD_INT 3
22726: DOUBLE
22727: EQUAL
22728: IFTRUE 22732
22730: GO 22762
22732: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
22733: LD_ADDR_VAR 0 3
22737: PUSH
22738: LD_INT 1
22740: PUSH
22741: LD_INT 2
22743: PUSH
22744: LD_INT 3
22746: PUSH
22747: LD_INT 4
22749: PUSH
22750: LD_INT 5
22752: PUSH
22753: EMPTY
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: ST_TO_ADDR
22760: GO 23691
22762: LD_INT 11
22764: DOUBLE
22765: EQUAL
22766: IFTRUE 22770
22768: GO 22800
22770: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
22771: LD_ADDR_VAR 0 3
22775: PUSH
22776: LD_INT 1
22778: PUSH
22779: LD_INT 2
22781: PUSH
22782: LD_INT 3
22784: PUSH
22785: LD_INT 4
22787: PUSH
22788: LD_INT 5
22790: PUSH
22791: EMPTY
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: ST_TO_ADDR
22798: GO 23691
22800: LD_INT 4
22802: DOUBLE
22803: EQUAL
22804: IFTRUE 22808
22806: GO 22834
22808: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
22809: LD_ADDR_VAR 0 3
22813: PUSH
22814: LD_INT 2
22816: PUSH
22817: LD_INT 3
22819: PUSH
22820: LD_INT 4
22822: PUSH
22823: LD_INT 5
22825: PUSH
22826: EMPTY
22827: LIST
22828: LIST
22829: LIST
22830: LIST
22831: ST_TO_ADDR
22832: GO 23691
22834: LD_INT 5
22836: DOUBLE
22837: EQUAL
22838: IFTRUE 22842
22840: GO 22868
22842: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
22843: LD_ADDR_VAR 0 3
22847: PUSH
22848: LD_INT 2
22850: PUSH
22851: LD_INT 3
22853: PUSH
22854: LD_INT 4
22856: PUSH
22857: LD_INT 5
22859: PUSH
22860: EMPTY
22861: LIST
22862: LIST
22863: LIST
22864: LIST
22865: ST_TO_ADDR
22866: GO 23691
22868: LD_INT 9
22870: DOUBLE
22871: EQUAL
22872: IFTRUE 22876
22874: GO 22902
22876: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
22877: LD_ADDR_VAR 0 3
22881: PUSH
22882: LD_INT 2
22884: PUSH
22885: LD_INT 3
22887: PUSH
22888: LD_INT 4
22890: PUSH
22891: LD_INT 5
22893: PUSH
22894: EMPTY
22895: LIST
22896: LIST
22897: LIST
22898: LIST
22899: ST_TO_ADDR
22900: GO 23691
22902: LD_INT 7
22904: DOUBLE
22905: EQUAL
22906: IFTRUE 22910
22908: GO 22936
22910: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
22911: LD_ADDR_VAR 0 3
22915: PUSH
22916: LD_INT 2
22918: PUSH
22919: LD_INT 3
22921: PUSH
22922: LD_INT 4
22924: PUSH
22925: LD_INT 5
22927: PUSH
22928: EMPTY
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: ST_TO_ADDR
22934: GO 23691
22936: LD_INT 12
22938: DOUBLE
22939: EQUAL
22940: IFTRUE 22944
22942: GO 22970
22944: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
22945: LD_ADDR_VAR 0 3
22949: PUSH
22950: LD_INT 2
22952: PUSH
22953: LD_INT 3
22955: PUSH
22956: LD_INT 4
22958: PUSH
22959: LD_INT 5
22961: PUSH
22962: EMPTY
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: ST_TO_ADDR
22968: GO 23691
22970: LD_INT 13
22972: DOUBLE
22973: EQUAL
22974: IFTRUE 22978
22976: GO 23004
22978: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
22979: LD_ADDR_VAR 0 3
22983: PUSH
22984: LD_INT 2
22986: PUSH
22987: LD_INT 3
22989: PUSH
22990: LD_INT 4
22992: PUSH
22993: LD_INT 5
22995: PUSH
22996: EMPTY
22997: LIST
22998: LIST
22999: LIST
23000: LIST
23001: ST_TO_ADDR
23002: GO 23691
23004: LD_INT 14
23006: DOUBLE
23007: EQUAL
23008: IFTRUE 23012
23010: GO 23030
23012: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
23013: LD_ADDR_VAR 0 3
23017: PUSH
23018: LD_INT 4
23020: PUSH
23021: LD_INT 5
23023: PUSH
23024: EMPTY
23025: LIST
23026: LIST
23027: ST_TO_ADDR
23028: GO 23691
23030: LD_INT 6
23032: DOUBLE
23033: EQUAL
23034: IFTRUE 23038
23036: GO 23056
23038: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
23039: LD_ADDR_VAR 0 3
23043: PUSH
23044: LD_INT 4
23046: PUSH
23047: LD_INT 5
23049: PUSH
23050: EMPTY
23051: LIST
23052: LIST
23053: ST_TO_ADDR
23054: GO 23691
23056: LD_INT 10
23058: DOUBLE
23059: EQUAL
23060: IFTRUE 23064
23062: GO 23082
23064: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
23065: LD_ADDR_VAR 0 3
23069: PUSH
23070: LD_INT 4
23072: PUSH
23073: LD_INT 5
23075: PUSH
23076: EMPTY
23077: LIST
23078: LIST
23079: ST_TO_ADDR
23080: GO 23691
23082: LD_INT 22
23084: DOUBLE
23085: EQUAL
23086: IFTRUE 23090
23088: GO 23116
23090: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
23091: LD_ADDR_VAR 0 3
23095: PUSH
23096: LD_INT 11
23098: PUSH
23099: LD_INT 12
23101: PUSH
23102: LD_INT 13
23104: PUSH
23105: LD_INT 14
23107: PUSH
23108: EMPTY
23109: LIST
23110: LIST
23111: LIST
23112: LIST
23113: ST_TO_ADDR
23114: GO 23691
23116: LD_INT 23
23118: DOUBLE
23119: EQUAL
23120: IFTRUE 23124
23122: GO 23150
23124: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
23125: LD_ADDR_VAR 0 3
23129: PUSH
23130: LD_INT 11
23132: PUSH
23133: LD_INT 12
23135: PUSH
23136: LD_INT 13
23138: PUSH
23139: LD_INT 14
23141: PUSH
23142: EMPTY
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: ST_TO_ADDR
23148: GO 23691
23150: LD_INT 24
23152: DOUBLE
23153: EQUAL
23154: IFTRUE 23158
23156: GO 23184
23158: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
23159: LD_ADDR_VAR 0 3
23163: PUSH
23164: LD_INT 11
23166: PUSH
23167: LD_INT 12
23169: PUSH
23170: LD_INT 13
23172: PUSH
23173: LD_INT 14
23175: PUSH
23176: EMPTY
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: ST_TO_ADDR
23182: GO 23691
23184: LD_INT 30
23186: DOUBLE
23187: EQUAL
23188: IFTRUE 23192
23190: GO 23218
23192: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
23193: LD_ADDR_VAR 0 3
23197: PUSH
23198: LD_INT 11
23200: PUSH
23201: LD_INT 12
23203: PUSH
23204: LD_INT 13
23206: PUSH
23207: LD_INT 14
23209: PUSH
23210: EMPTY
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: ST_TO_ADDR
23216: GO 23691
23218: LD_INT 25
23220: DOUBLE
23221: EQUAL
23222: IFTRUE 23226
23224: GO 23244
23226: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
23227: LD_ADDR_VAR 0 3
23231: PUSH
23232: LD_INT 13
23234: PUSH
23235: LD_INT 14
23237: PUSH
23238: EMPTY
23239: LIST
23240: LIST
23241: ST_TO_ADDR
23242: GO 23691
23244: LD_INT 27
23246: DOUBLE
23247: EQUAL
23248: IFTRUE 23252
23250: GO 23270
23252: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
23253: LD_ADDR_VAR 0 3
23257: PUSH
23258: LD_INT 13
23260: PUSH
23261: LD_INT 14
23263: PUSH
23264: EMPTY
23265: LIST
23266: LIST
23267: ST_TO_ADDR
23268: GO 23691
23270: LD_INT 28
23272: DOUBLE
23273: EQUAL
23274: IFTRUE 23278
23276: GO 23296
23278: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
23279: LD_ADDR_VAR 0 3
23283: PUSH
23284: LD_INT 13
23286: PUSH
23287: LD_INT 14
23289: PUSH
23290: EMPTY
23291: LIST
23292: LIST
23293: ST_TO_ADDR
23294: GO 23691
23296: LD_INT 29
23298: DOUBLE
23299: EQUAL
23300: IFTRUE 23304
23302: GO 23322
23304: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
23305: LD_ADDR_VAR 0 3
23309: PUSH
23310: LD_INT 13
23312: PUSH
23313: LD_INT 14
23315: PUSH
23316: EMPTY
23317: LIST
23318: LIST
23319: ST_TO_ADDR
23320: GO 23691
23322: LD_INT 31
23324: DOUBLE
23325: EQUAL
23326: IFTRUE 23330
23328: GO 23348
23330: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
23331: LD_ADDR_VAR 0 3
23335: PUSH
23336: LD_INT 13
23338: PUSH
23339: LD_INT 14
23341: PUSH
23342: EMPTY
23343: LIST
23344: LIST
23345: ST_TO_ADDR
23346: GO 23691
23348: LD_INT 26
23350: DOUBLE
23351: EQUAL
23352: IFTRUE 23356
23354: GO 23374
23356: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
23357: LD_ADDR_VAR 0 3
23361: PUSH
23362: LD_INT 13
23364: PUSH
23365: LD_INT 14
23367: PUSH
23368: EMPTY
23369: LIST
23370: LIST
23371: ST_TO_ADDR
23372: GO 23691
23374: LD_INT 42
23376: DOUBLE
23377: EQUAL
23378: IFTRUE 23382
23380: GO 23408
23382: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
23383: LD_ADDR_VAR 0 3
23387: PUSH
23388: LD_INT 21
23390: PUSH
23391: LD_INT 22
23393: PUSH
23394: LD_INT 23
23396: PUSH
23397: LD_INT 24
23399: PUSH
23400: EMPTY
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: ST_TO_ADDR
23406: GO 23691
23408: LD_INT 43
23410: DOUBLE
23411: EQUAL
23412: IFTRUE 23416
23414: GO 23442
23416: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
23417: LD_ADDR_VAR 0 3
23421: PUSH
23422: LD_INT 21
23424: PUSH
23425: LD_INT 22
23427: PUSH
23428: LD_INT 23
23430: PUSH
23431: LD_INT 24
23433: PUSH
23434: EMPTY
23435: LIST
23436: LIST
23437: LIST
23438: LIST
23439: ST_TO_ADDR
23440: GO 23691
23442: LD_INT 44
23444: DOUBLE
23445: EQUAL
23446: IFTRUE 23450
23448: GO 23476
23450: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
23451: LD_ADDR_VAR 0 3
23455: PUSH
23456: LD_INT 21
23458: PUSH
23459: LD_INT 22
23461: PUSH
23462: LD_INT 23
23464: PUSH
23465: LD_INT 24
23467: PUSH
23468: EMPTY
23469: LIST
23470: LIST
23471: LIST
23472: LIST
23473: ST_TO_ADDR
23474: GO 23691
23476: LD_INT 45
23478: DOUBLE
23479: EQUAL
23480: IFTRUE 23484
23482: GO 23510
23484: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
23485: LD_ADDR_VAR 0 3
23489: PUSH
23490: LD_INT 21
23492: PUSH
23493: LD_INT 22
23495: PUSH
23496: LD_INT 23
23498: PUSH
23499: LD_INT 24
23501: PUSH
23502: EMPTY
23503: LIST
23504: LIST
23505: LIST
23506: LIST
23507: ST_TO_ADDR
23508: GO 23691
23510: LD_INT 49
23512: DOUBLE
23513: EQUAL
23514: IFTRUE 23518
23516: GO 23544
23518: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
23519: LD_ADDR_VAR 0 3
23523: PUSH
23524: LD_INT 21
23526: PUSH
23527: LD_INT 22
23529: PUSH
23530: LD_INT 23
23532: PUSH
23533: LD_INT 24
23535: PUSH
23536: EMPTY
23537: LIST
23538: LIST
23539: LIST
23540: LIST
23541: ST_TO_ADDR
23542: GO 23691
23544: LD_INT 51
23546: DOUBLE
23547: EQUAL
23548: IFTRUE 23552
23550: GO 23578
23552: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
23553: LD_ADDR_VAR 0 3
23557: PUSH
23558: LD_INT 21
23560: PUSH
23561: LD_INT 22
23563: PUSH
23564: LD_INT 23
23566: PUSH
23567: LD_INT 24
23569: PUSH
23570: EMPTY
23571: LIST
23572: LIST
23573: LIST
23574: LIST
23575: ST_TO_ADDR
23576: GO 23691
23578: LD_INT 52
23580: DOUBLE
23581: EQUAL
23582: IFTRUE 23586
23584: GO 23612
23586: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
23587: LD_ADDR_VAR 0 3
23591: PUSH
23592: LD_INT 21
23594: PUSH
23595: LD_INT 22
23597: PUSH
23598: LD_INT 23
23600: PUSH
23601: LD_INT 24
23603: PUSH
23604: EMPTY
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: ST_TO_ADDR
23610: GO 23691
23612: LD_INT 53
23614: DOUBLE
23615: EQUAL
23616: IFTRUE 23620
23618: GO 23638
23620: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
23621: LD_ADDR_VAR 0 3
23625: PUSH
23626: LD_INT 23
23628: PUSH
23629: LD_INT 24
23631: PUSH
23632: EMPTY
23633: LIST
23634: LIST
23635: ST_TO_ADDR
23636: GO 23691
23638: LD_INT 46
23640: DOUBLE
23641: EQUAL
23642: IFTRUE 23646
23644: GO 23664
23646: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
23647: LD_ADDR_VAR 0 3
23651: PUSH
23652: LD_INT 23
23654: PUSH
23655: LD_INT 24
23657: PUSH
23658: EMPTY
23659: LIST
23660: LIST
23661: ST_TO_ADDR
23662: GO 23691
23664: LD_INT 47
23666: DOUBLE
23667: EQUAL
23668: IFTRUE 23672
23670: GO 23690
23672: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
23673: LD_ADDR_VAR 0 3
23677: PUSH
23678: LD_INT 23
23680: PUSH
23681: LD_INT 24
23683: PUSH
23684: EMPTY
23685: LIST
23686: LIST
23687: ST_TO_ADDR
23688: GO 23691
23690: POP
// result := ( chassis in result ) ;
23691: LD_ADDR_VAR 0 3
23695: PUSH
23696: LD_VAR 0 1
23700: PUSH
23701: LD_VAR 0 3
23705: IN
23706: ST_TO_ADDR
// end ;
23707: LD_VAR 0 3
23711: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
23712: LD_INT 0
23714: PPUSH
23715: PPUSH
23716: PPUSH
23717: PPUSH
23718: PPUSH
23719: PPUSH
23720: PPUSH
// result := array ;
23721: LD_ADDR_VAR 0 5
23725: PUSH
23726: LD_VAR 0 1
23730: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
23731: LD_VAR 0 1
23735: NOT
23736: PUSH
23737: LD_VAR 0 2
23741: NOT
23742: OR
23743: PUSH
23744: LD_VAR 0 3
23748: NOT
23749: OR
23750: PUSH
23751: LD_VAR 0 2
23755: PUSH
23756: LD_VAR 0 1
23760: GREATER
23761: OR
23762: PUSH
23763: LD_VAR 0 3
23767: PUSH
23768: LD_VAR 0 1
23772: GREATER
23773: OR
23774: IFFALSE 23778
// exit ;
23776: GO 24074
// if direction then
23778: LD_VAR 0 4
23782: IFFALSE 23846
// begin d := 1 ;
23784: LD_ADDR_VAR 0 9
23788: PUSH
23789: LD_INT 1
23791: ST_TO_ADDR
// if i_from > i_to then
23792: LD_VAR 0 2
23796: PUSH
23797: LD_VAR 0 3
23801: GREATER
23802: IFFALSE 23828
// length := ( array - i_from ) + i_to else
23804: LD_ADDR_VAR 0 11
23808: PUSH
23809: LD_VAR 0 1
23813: PUSH
23814: LD_VAR 0 2
23818: MINUS
23819: PUSH
23820: LD_VAR 0 3
23824: PLUS
23825: ST_TO_ADDR
23826: GO 23844
// length := i_to - i_from ;
23828: LD_ADDR_VAR 0 11
23832: PUSH
23833: LD_VAR 0 3
23837: PUSH
23838: LD_VAR 0 2
23842: MINUS
23843: ST_TO_ADDR
// end else
23844: GO 23907
// begin d := - 1 ;
23846: LD_ADDR_VAR 0 9
23850: PUSH
23851: LD_INT 1
23853: NEG
23854: ST_TO_ADDR
// if i_from > i_to then
23855: LD_VAR 0 2
23859: PUSH
23860: LD_VAR 0 3
23864: GREATER
23865: IFFALSE 23885
// length := i_from - i_to else
23867: LD_ADDR_VAR 0 11
23871: PUSH
23872: LD_VAR 0 2
23876: PUSH
23877: LD_VAR 0 3
23881: MINUS
23882: ST_TO_ADDR
23883: GO 23907
// length := ( array - i_to ) + i_from ;
23885: LD_ADDR_VAR 0 11
23889: PUSH
23890: LD_VAR 0 1
23894: PUSH
23895: LD_VAR 0 3
23899: MINUS
23900: PUSH
23901: LD_VAR 0 2
23905: PLUS
23906: ST_TO_ADDR
// end ; if not length then
23907: LD_VAR 0 11
23911: NOT
23912: IFFALSE 23916
// exit ;
23914: GO 24074
// tmp := array ;
23916: LD_ADDR_VAR 0 10
23920: PUSH
23921: LD_VAR 0 1
23925: ST_TO_ADDR
// for i = 1 to length do
23926: LD_ADDR_VAR 0 6
23930: PUSH
23931: DOUBLE
23932: LD_INT 1
23934: DEC
23935: ST_TO_ADDR
23936: LD_VAR 0 11
23940: PUSH
23941: FOR_TO
23942: IFFALSE 24062
// begin for j = 1 to array do
23944: LD_ADDR_VAR 0 7
23948: PUSH
23949: DOUBLE
23950: LD_INT 1
23952: DEC
23953: ST_TO_ADDR
23954: LD_VAR 0 1
23958: PUSH
23959: FOR_TO
23960: IFFALSE 24048
// begin k := j + d ;
23962: LD_ADDR_VAR 0 8
23966: PUSH
23967: LD_VAR 0 7
23971: PUSH
23972: LD_VAR 0 9
23976: PLUS
23977: ST_TO_ADDR
// if k > array then
23978: LD_VAR 0 8
23982: PUSH
23983: LD_VAR 0 1
23987: GREATER
23988: IFFALSE 23998
// k := 1 ;
23990: LD_ADDR_VAR 0 8
23994: PUSH
23995: LD_INT 1
23997: ST_TO_ADDR
// if not k then
23998: LD_VAR 0 8
24002: NOT
24003: IFFALSE 24015
// k := array ;
24005: LD_ADDR_VAR 0 8
24009: PUSH
24010: LD_VAR 0 1
24014: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
24015: LD_ADDR_VAR 0 10
24019: PUSH
24020: LD_VAR 0 10
24024: PPUSH
24025: LD_VAR 0 8
24029: PPUSH
24030: LD_VAR 0 1
24034: PUSH
24035: LD_VAR 0 7
24039: ARRAY
24040: PPUSH
24041: CALL_OW 1
24045: ST_TO_ADDR
// end ;
24046: GO 23959
24048: POP
24049: POP
// array := tmp ;
24050: LD_ADDR_VAR 0 1
24054: PUSH
24055: LD_VAR 0 10
24059: ST_TO_ADDR
// end ;
24060: GO 23941
24062: POP
24063: POP
// result := array ;
24064: LD_ADDR_VAR 0 5
24068: PUSH
24069: LD_VAR 0 1
24073: ST_TO_ADDR
// end ;
24074: LD_VAR 0 5
24078: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
24079: LD_INT 0
24081: PPUSH
24082: PPUSH
// result := 0 ;
24083: LD_ADDR_VAR 0 3
24087: PUSH
24088: LD_INT 0
24090: ST_TO_ADDR
// if not array or not value in array then
24091: LD_VAR 0 1
24095: NOT
24096: PUSH
24097: LD_VAR 0 2
24101: PUSH
24102: LD_VAR 0 1
24106: IN
24107: NOT
24108: OR
24109: IFFALSE 24113
// exit ;
24111: GO 24167
// for i = 1 to array do
24113: LD_ADDR_VAR 0 4
24117: PUSH
24118: DOUBLE
24119: LD_INT 1
24121: DEC
24122: ST_TO_ADDR
24123: LD_VAR 0 1
24127: PUSH
24128: FOR_TO
24129: IFFALSE 24165
// if value = array [ i ] then
24131: LD_VAR 0 2
24135: PUSH
24136: LD_VAR 0 1
24140: PUSH
24141: LD_VAR 0 4
24145: ARRAY
24146: EQUAL
24147: IFFALSE 24163
// begin result := i ;
24149: LD_ADDR_VAR 0 3
24153: PUSH
24154: LD_VAR 0 4
24158: ST_TO_ADDR
// exit ;
24159: POP
24160: POP
24161: GO 24167
// end ;
24163: GO 24128
24165: POP
24166: POP
// end ;
24167: LD_VAR 0 3
24171: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
24172: LD_INT 0
24174: PPUSH
// vc_chassis := chassis ;
24175: LD_ADDR_OWVAR 37
24179: PUSH
24180: LD_VAR 0 1
24184: ST_TO_ADDR
// vc_engine := engine ;
24185: LD_ADDR_OWVAR 39
24189: PUSH
24190: LD_VAR 0 2
24194: ST_TO_ADDR
// vc_control := control ;
24195: LD_ADDR_OWVAR 38
24199: PUSH
24200: LD_VAR 0 3
24204: ST_TO_ADDR
// vc_weapon := weapon ;
24205: LD_ADDR_OWVAR 40
24209: PUSH
24210: LD_VAR 0 4
24214: ST_TO_ADDR
// vc_fuel_battery := fuel ;
24215: LD_ADDR_OWVAR 41
24219: PUSH
24220: LD_VAR 0 5
24224: ST_TO_ADDR
// end ;
24225: LD_VAR 0 6
24229: RET
// export function WantPlant ( unit ) ; var task ; begin
24230: LD_INT 0
24232: PPUSH
24233: PPUSH
// result := false ;
24234: LD_ADDR_VAR 0 2
24238: PUSH
24239: LD_INT 0
24241: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
24242: LD_ADDR_VAR 0 3
24246: PUSH
24247: LD_VAR 0 1
24251: PPUSH
24252: CALL_OW 437
24256: ST_TO_ADDR
// if task then
24257: LD_VAR 0 3
24261: IFFALSE 24289
// if task [ 1 ] [ 1 ] = p then
24263: LD_VAR 0 3
24267: PUSH
24268: LD_INT 1
24270: ARRAY
24271: PUSH
24272: LD_INT 1
24274: ARRAY
24275: PUSH
24276: LD_STRING p
24278: EQUAL
24279: IFFALSE 24289
// result := true ;
24281: LD_ADDR_VAR 0 2
24285: PUSH
24286: LD_INT 1
24288: ST_TO_ADDR
// end ;
24289: LD_VAR 0 2
24293: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
24294: LD_INT 0
24296: PPUSH
24297: PPUSH
24298: PPUSH
24299: PPUSH
// if pos < 1 then
24300: LD_VAR 0 2
24304: PUSH
24305: LD_INT 1
24307: LESS
24308: IFFALSE 24312
// exit ;
24310: GO 24615
// if pos = 1 then
24312: LD_VAR 0 2
24316: PUSH
24317: LD_INT 1
24319: EQUAL
24320: IFFALSE 24353
// result := Replace ( arr , pos [ 1 ] , value ) else
24322: LD_ADDR_VAR 0 4
24326: PUSH
24327: LD_VAR 0 1
24331: PPUSH
24332: LD_VAR 0 2
24336: PUSH
24337: LD_INT 1
24339: ARRAY
24340: PPUSH
24341: LD_VAR 0 3
24345: PPUSH
24346: CALL_OW 1
24350: ST_TO_ADDR
24351: GO 24615
// begin tmp := arr ;
24353: LD_ADDR_VAR 0 6
24357: PUSH
24358: LD_VAR 0 1
24362: ST_TO_ADDR
// s_arr := [ tmp ] ;
24363: LD_ADDR_VAR 0 7
24367: PUSH
24368: LD_VAR 0 6
24372: PUSH
24373: EMPTY
24374: LIST
24375: ST_TO_ADDR
// for i = 1 to pos - 1 do
24376: LD_ADDR_VAR 0 5
24380: PUSH
24381: DOUBLE
24382: LD_INT 1
24384: DEC
24385: ST_TO_ADDR
24386: LD_VAR 0 2
24390: PUSH
24391: LD_INT 1
24393: MINUS
24394: PUSH
24395: FOR_TO
24396: IFFALSE 24441
// begin tmp := tmp [ pos [ i ] ] ;
24398: LD_ADDR_VAR 0 6
24402: PUSH
24403: LD_VAR 0 6
24407: PUSH
24408: LD_VAR 0 2
24412: PUSH
24413: LD_VAR 0 5
24417: ARRAY
24418: ARRAY
24419: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
24420: LD_ADDR_VAR 0 7
24424: PUSH
24425: LD_VAR 0 7
24429: PUSH
24430: LD_VAR 0 6
24434: PUSH
24435: EMPTY
24436: LIST
24437: ADD
24438: ST_TO_ADDR
// end ;
24439: GO 24395
24441: POP
24442: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
24443: LD_ADDR_VAR 0 6
24447: PUSH
24448: LD_VAR 0 6
24452: PPUSH
24453: LD_VAR 0 2
24457: PUSH
24458: LD_VAR 0 2
24462: ARRAY
24463: PPUSH
24464: LD_VAR 0 3
24468: PPUSH
24469: CALL_OW 1
24473: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
24474: LD_ADDR_VAR 0 7
24478: PUSH
24479: LD_VAR 0 7
24483: PPUSH
24484: LD_VAR 0 7
24488: PPUSH
24489: LD_VAR 0 6
24493: PPUSH
24494: CALL_OW 1
24498: ST_TO_ADDR
// for i = s_arr downto 2 do
24499: LD_ADDR_VAR 0 5
24503: PUSH
24504: DOUBLE
24505: LD_VAR 0 7
24509: INC
24510: ST_TO_ADDR
24511: LD_INT 2
24513: PUSH
24514: FOR_DOWNTO
24515: IFFALSE 24599
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
24517: LD_ADDR_VAR 0 6
24521: PUSH
24522: LD_VAR 0 7
24526: PUSH
24527: LD_VAR 0 5
24531: PUSH
24532: LD_INT 1
24534: MINUS
24535: ARRAY
24536: PPUSH
24537: LD_VAR 0 2
24541: PUSH
24542: LD_VAR 0 5
24546: PUSH
24547: LD_INT 1
24549: MINUS
24550: ARRAY
24551: PPUSH
24552: LD_VAR 0 7
24556: PUSH
24557: LD_VAR 0 5
24561: ARRAY
24562: PPUSH
24563: CALL_OW 1
24567: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
24568: LD_ADDR_VAR 0 7
24572: PUSH
24573: LD_VAR 0 7
24577: PPUSH
24578: LD_VAR 0 5
24582: PUSH
24583: LD_INT 1
24585: MINUS
24586: PPUSH
24587: LD_VAR 0 6
24591: PPUSH
24592: CALL_OW 1
24596: ST_TO_ADDR
// end ;
24597: GO 24514
24599: POP
24600: POP
// result := s_arr [ 1 ] ;
24601: LD_ADDR_VAR 0 4
24605: PUSH
24606: LD_VAR 0 7
24610: PUSH
24611: LD_INT 1
24613: ARRAY
24614: ST_TO_ADDR
// end ; end ;
24615: LD_VAR 0 4
24619: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
24620: LD_INT 0
24622: PPUSH
24623: PPUSH
// if not list then
24624: LD_VAR 0 1
24628: NOT
24629: IFFALSE 24633
// exit ;
24631: GO 24724
// i := list [ pos1 ] ;
24633: LD_ADDR_VAR 0 5
24637: PUSH
24638: LD_VAR 0 1
24642: PUSH
24643: LD_VAR 0 2
24647: ARRAY
24648: ST_TO_ADDR
// if not i then
24649: LD_VAR 0 5
24653: NOT
24654: IFFALSE 24658
// exit ;
24656: GO 24724
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
24658: LD_ADDR_VAR 0 1
24662: PUSH
24663: LD_VAR 0 1
24667: PPUSH
24668: LD_VAR 0 2
24672: PPUSH
24673: LD_VAR 0 1
24677: PUSH
24678: LD_VAR 0 3
24682: ARRAY
24683: PPUSH
24684: CALL_OW 1
24688: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
24689: LD_ADDR_VAR 0 1
24693: PUSH
24694: LD_VAR 0 1
24698: PPUSH
24699: LD_VAR 0 3
24703: PPUSH
24704: LD_VAR 0 5
24708: PPUSH
24709: CALL_OW 1
24713: ST_TO_ADDR
// result := list ;
24714: LD_ADDR_VAR 0 4
24718: PUSH
24719: LD_VAR 0 1
24723: ST_TO_ADDR
// end ;
24724: LD_VAR 0 4
24728: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
24729: LD_INT 0
24731: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
24732: LD_ADDR_VAR 0 5
24736: PUSH
24737: LD_VAR 0 1
24741: PPUSH
24742: CALL_OW 250
24746: PPUSH
24747: LD_VAR 0 1
24751: PPUSH
24752: CALL_OW 251
24756: PPUSH
24757: LD_VAR 0 2
24761: PPUSH
24762: LD_VAR 0 3
24766: PPUSH
24767: LD_VAR 0 4
24771: PPUSH
24772: CALL 24782 0 5
24776: ST_TO_ADDR
// end ;
24777: LD_VAR 0 5
24781: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
24782: LD_INT 0
24784: PPUSH
24785: PPUSH
24786: PPUSH
24787: PPUSH
// if not list then
24788: LD_VAR 0 3
24792: NOT
24793: IFFALSE 24797
// exit ;
24795: GO 25185
// result := [ ] ;
24797: LD_ADDR_VAR 0 6
24801: PUSH
24802: EMPTY
24803: ST_TO_ADDR
// for i in list do
24804: LD_ADDR_VAR 0 7
24808: PUSH
24809: LD_VAR 0 3
24813: PUSH
24814: FOR_IN
24815: IFFALSE 25017
// begin tmp := GetDistUnitXY ( i , x , y ) ;
24817: LD_ADDR_VAR 0 9
24821: PUSH
24822: LD_VAR 0 7
24826: PPUSH
24827: LD_VAR 0 1
24831: PPUSH
24832: LD_VAR 0 2
24836: PPUSH
24837: CALL_OW 297
24841: ST_TO_ADDR
// if not result then
24842: LD_VAR 0 6
24846: NOT
24847: IFFALSE 24873
// result := [ [ i , tmp ] ] else
24849: LD_ADDR_VAR 0 6
24853: PUSH
24854: LD_VAR 0 7
24858: PUSH
24859: LD_VAR 0 9
24863: PUSH
24864: EMPTY
24865: LIST
24866: LIST
24867: PUSH
24868: EMPTY
24869: LIST
24870: ST_TO_ADDR
24871: GO 25015
// begin if result [ result ] [ 2 ] < tmp then
24873: LD_VAR 0 6
24877: PUSH
24878: LD_VAR 0 6
24882: ARRAY
24883: PUSH
24884: LD_INT 2
24886: ARRAY
24887: PUSH
24888: LD_VAR 0 9
24892: LESS
24893: IFFALSE 24935
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
24895: LD_ADDR_VAR 0 6
24899: PUSH
24900: LD_VAR 0 6
24904: PPUSH
24905: LD_VAR 0 6
24909: PUSH
24910: LD_INT 1
24912: PLUS
24913: PPUSH
24914: LD_VAR 0 7
24918: PUSH
24919: LD_VAR 0 9
24923: PUSH
24924: EMPTY
24925: LIST
24926: LIST
24927: PPUSH
24928: CALL_OW 2
24932: ST_TO_ADDR
24933: GO 25015
// for j = 1 to result do
24935: LD_ADDR_VAR 0 8
24939: PUSH
24940: DOUBLE
24941: LD_INT 1
24943: DEC
24944: ST_TO_ADDR
24945: LD_VAR 0 6
24949: PUSH
24950: FOR_TO
24951: IFFALSE 25013
// begin if tmp < result [ j ] [ 2 ] then
24953: LD_VAR 0 9
24957: PUSH
24958: LD_VAR 0 6
24962: PUSH
24963: LD_VAR 0 8
24967: ARRAY
24968: PUSH
24969: LD_INT 2
24971: ARRAY
24972: LESS
24973: IFFALSE 25011
// begin result := Insert ( result , j , [ i , tmp ] ) ;
24975: LD_ADDR_VAR 0 6
24979: PUSH
24980: LD_VAR 0 6
24984: PPUSH
24985: LD_VAR 0 8
24989: PPUSH
24990: LD_VAR 0 7
24994: PUSH
24995: LD_VAR 0 9
24999: PUSH
25000: EMPTY
25001: LIST
25002: LIST
25003: PPUSH
25004: CALL_OW 2
25008: ST_TO_ADDR
// break ;
25009: GO 25013
// end ; end ;
25011: GO 24950
25013: POP
25014: POP
// end ; end ;
25015: GO 24814
25017: POP
25018: POP
// if result and not asc then
25019: LD_VAR 0 6
25023: PUSH
25024: LD_VAR 0 4
25028: NOT
25029: AND
25030: IFFALSE 25105
// begin tmp := result ;
25032: LD_ADDR_VAR 0 9
25036: PUSH
25037: LD_VAR 0 6
25041: ST_TO_ADDR
// for i = tmp downto 1 do
25042: LD_ADDR_VAR 0 7
25046: PUSH
25047: DOUBLE
25048: LD_VAR 0 9
25052: INC
25053: ST_TO_ADDR
25054: LD_INT 1
25056: PUSH
25057: FOR_DOWNTO
25058: IFFALSE 25103
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
25060: LD_ADDR_VAR 0 6
25064: PUSH
25065: LD_VAR 0 6
25069: PPUSH
25070: LD_VAR 0 9
25074: PUSH
25075: LD_VAR 0 7
25079: MINUS
25080: PUSH
25081: LD_INT 1
25083: PLUS
25084: PPUSH
25085: LD_VAR 0 9
25089: PUSH
25090: LD_VAR 0 7
25094: ARRAY
25095: PPUSH
25096: CALL_OW 1
25100: ST_TO_ADDR
25101: GO 25057
25103: POP
25104: POP
// end ; tmp := [ ] ;
25105: LD_ADDR_VAR 0 9
25109: PUSH
25110: EMPTY
25111: ST_TO_ADDR
// if mode then
25112: LD_VAR 0 5
25116: IFFALSE 25185
// begin for i = 1 to result do
25118: LD_ADDR_VAR 0 7
25122: PUSH
25123: DOUBLE
25124: LD_INT 1
25126: DEC
25127: ST_TO_ADDR
25128: LD_VAR 0 6
25132: PUSH
25133: FOR_TO
25134: IFFALSE 25173
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
25136: LD_ADDR_VAR 0 9
25140: PUSH
25141: LD_VAR 0 9
25145: PPUSH
25146: LD_VAR 0 7
25150: PPUSH
25151: LD_VAR 0 6
25155: PUSH
25156: LD_VAR 0 7
25160: ARRAY
25161: PUSH
25162: LD_INT 1
25164: ARRAY
25165: PPUSH
25166: CALL_OW 1
25170: ST_TO_ADDR
25171: GO 25133
25173: POP
25174: POP
// result := tmp ;
25175: LD_ADDR_VAR 0 6
25179: PUSH
25180: LD_VAR 0 9
25184: ST_TO_ADDR
// end ; end ;
25185: LD_VAR 0 6
25189: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
25190: LD_INT 0
25192: PPUSH
25193: PPUSH
25194: PPUSH
25195: PPUSH
25196: PPUSH
25197: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
25198: LD_ADDR_VAR 0 5
25202: PUSH
25203: LD_INT 0
25205: PUSH
25206: LD_INT 0
25208: PUSH
25209: LD_INT 0
25211: PUSH
25212: EMPTY
25213: PUSH
25214: EMPTY
25215: LIST
25216: LIST
25217: LIST
25218: LIST
25219: ST_TO_ADDR
// if not x or not y then
25220: LD_VAR 0 2
25224: NOT
25225: PUSH
25226: LD_VAR 0 3
25230: NOT
25231: OR
25232: IFFALSE 25236
// exit ;
25234: GO 26882
// if not range then
25236: LD_VAR 0 4
25240: NOT
25241: IFFALSE 25251
// range := 10 ;
25243: LD_ADDR_VAR 0 4
25247: PUSH
25248: LD_INT 10
25250: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25251: LD_ADDR_VAR 0 8
25255: PUSH
25256: LD_INT 81
25258: PUSH
25259: LD_VAR 0 1
25263: PUSH
25264: EMPTY
25265: LIST
25266: LIST
25267: PUSH
25268: LD_INT 92
25270: PUSH
25271: LD_VAR 0 2
25275: PUSH
25276: LD_VAR 0 3
25280: PUSH
25281: LD_VAR 0 4
25285: PUSH
25286: EMPTY
25287: LIST
25288: LIST
25289: LIST
25290: LIST
25291: PUSH
25292: LD_INT 3
25294: PUSH
25295: LD_INT 21
25297: PUSH
25298: LD_INT 3
25300: PUSH
25301: EMPTY
25302: LIST
25303: LIST
25304: PUSH
25305: EMPTY
25306: LIST
25307: LIST
25308: PUSH
25309: EMPTY
25310: LIST
25311: LIST
25312: LIST
25313: PPUSH
25314: CALL_OW 69
25318: ST_TO_ADDR
// if not tmp then
25319: LD_VAR 0 8
25323: NOT
25324: IFFALSE 25328
// exit ;
25326: GO 26882
// for i in tmp do
25328: LD_ADDR_VAR 0 6
25332: PUSH
25333: LD_VAR 0 8
25337: PUSH
25338: FOR_IN
25339: IFFALSE 26857
// begin points := [ 0 , 0 , 0 ] ;
25341: LD_ADDR_VAR 0 9
25345: PUSH
25346: LD_INT 0
25348: PUSH
25349: LD_INT 0
25351: PUSH
25352: LD_INT 0
25354: PUSH
25355: EMPTY
25356: LIST
25357: LIST
25358: LIST
25359: ST_TO_ADDR
// bpoints := 1 ;
25360: LD_ADDR_VAR 0 10
25364: PUSH
25365: LD_INT 1
25367: ST_TO_ADDR
// case GetType ( i ) of unit_human :
25368: LD_VAR 0 6
25372: PPUSH
25373: CALL_OW 247
25377: PUSH
25378: LD_INT 1
25380: DOUBLE
25381: EQUAL
25382: IFTRUE 25386
25384: GO 25964
25386: POP
// begin if GetClass ( i ) = 1 then
25387: LD_VAR 0 6
25391: PPUSH
25392: CALL_OW 257
25396: PUSH
25397: LD_INT 1
25399: EQUAL
25400: IFFALSE 25421
// points := [ 10 , 5 , 3 ] ;
25402: LD_ADDR_VAR 0 9
25406: PUSH
25407: LD_INT 10
25409: PUSH
25410: LD_INT 5
25412: PUSH
25413: LD_INT 3
25415: PUSH
25416: EMPTY
25417: LIST
25418: LIST
25419: LIST
25420: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
25421: LD_VAR 0 6
25425: PPUSH
25426: CALL_OW 257
25430: PUSH
25431: LD_INT 2
25433: PUSH
25434: LD_INT 3
25436: PUSH
25437: LD_INT 4
25439: PUSH
25440: EMPTY
25441: LIST
25442: LIST
25443: LIST
25444: IN
25445: IFFALSE 25466
// points := [ 3 , 2 , 1 ] ;
25447: LD_ADDR_VAR 0 9
25451: PUSH
25452: LD_INT 3
25454: PUSH
25455: LD_INT 2
25457: PUSH
25458: LD_INT 1
25460: PUSH
25461: EMPTY
25462: LIST
25463: LIST
25464: LIST
25465: ST_TO_ADDR
// if GetClass ( i ) = 5 then
25466: LD_VAR 0 6
25470: PPUSH
25471: CALL_OW 257
25475: PUSH
25476: LD_INT 5
25478: EQUAL
25479: IFFALSE 25500
// points := [ 130 , 5 , 2 ] ;
25481: LD_ADDR_VAR 0 9
25485: PUSH
25486: LD_INT 130
25488: PUSH
25489: LD_INT 5
25491: PUSH
25492: LD_INT 2
25494: PUSH
25495: EMPTY
25496: LIST
25497: LIST
25498: LIST
25499: ST_TO_ADDR
// if GetClass ( i ) = 8 then
25500: LD_VAR 0 6
25504: PPUSH
25505: CALL_OW 257
25509: PUSH
25510: LD_INT 8
25512: EQUAL
25513: IFFALSE 25534
// points := [ 35 , 35 , 30 ] ;
25515: LD_ADDR_VAR 0 9
25519: PUSH
25520: LD_INT 35
25522: PUSH
25523: LD_INT 35
25525: PUSH
25526: LD_INT 30
25528: PUSH
25529: EMPTY
25530: LIST
25531: LIST
25532: LIST
25533: ST_TO_ADDR
// if GetClass ( i ) = 9 then
25534: LD_VAR 0 6
25538: PPUSH
25539: CALL_OW 257
25543: PUSH
25544: LD_INT 9
25546: EQUAL
25547: IFFALSE 25568
// points := [ 20 , 55 , 40 ] ;
25549: LD_ADDR_VAR 0 9
25553: PUSH
25554: LD_INT 20
25556: PUSH
25557: LD_INT 55
25559: PUSH
25560: LD_INT 40
25562: PUSH
25563: EMPTY
25564: LIST
25565: LIST
25566: LIST
25567: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
25568: LD_VAR 0 6
25572: PPUSH
25573: CALL_OW 257
25577: PUSH
25578: LD_INT 12
25580: PUSH
25581: LD_INT 16
25583: PUSH
25584: EMPTY
25585: LIST
25586: LIST
25587: IN
25588: IFFALSE 25609
// points := [ 5 , 3 , 2 ] ;
25590: LD_ADDR_VAR 0 9
25594: PUSH
25595: LD_INT 5
25597: PUSH
25598: LD_INT 3
25600: PUSH
25601: LD_INT 2
25603: PUSH
25604: EMPTY
25605: LIST
25606: LIST
25607: LIST
25608: ST_TO_ADDR
// if GetClass ( i ) = 17 then
25609: LD_VAR 0 6
25613: PPUSH
25614: CALL_OW 257
25618: PUSH
25619: LD_INT 17
25621: EQUAL
25622: IFFALSE 25643
// points := [ 100 , 50 , 75 ] ;
25624: LD_ADDR_VAR 0 9
25628: PUSH
25629: LD_INT 100
25631: PUSH
25632: LD_INT 50
25634: PUSH
25635: LD_INT 75
25637: PUSH
25638: EMPTY
25639: LIST
25640: LIST
25641: LIST
25642: ST_TO_ADDR
// if GetClass ( i ) = 15 then
25643: LD_VAR 0 6
25647: PPUSH
25648: CALL_OW 257
25652: PUSH
25653: LD_INT 15
25655: EQUAL
25656: IFFALSE 25677
// points := [ 10 , 5 , 3 ] ;
25658: LD_ADDR_VAR 0 9
25662: PUSH
25663: LD_INT 10
25665: PUSH
25666: LD_INT 5
25668: PUSH
25669: LD_INT 3
25671: PUSH
25672: EMPTY
25673: LIST
25674: LIST
25675: LIST
25676: ST_TO_ADDR
// if GetClass ( i ) = 14 then
25677: LD_VAR 0 6
25681: PPUSH
25682: CALL_OW 257
25686: PUSH
25687: LD_INT 14
25689: EQUAL
25690: IFFALSE 25711
// points := [ 10 , 0 , 0 ] ;
25692: LD_ADDR_VAR 0 9
25696: PUSH
25697: LD_INT 10
25699: PUSH
25700: LD_INT 0
25702: PUSH
25703: LD_INT 0
25705: PUSH
25706: EMPTY
25707: LIST
25708: LIST
25709: LIST
25710: ST_TO_ADDR
// if GetClass ( i ) = 11 then
25711: LD_VAR 0 6
25715: PPUSH
25716: CALL_OW 257
25720: PUSH
25721: LD_INT 11
25723: EQUAL
25724: IFFALSE 25745
// points := [ 30 , 10 , 5 ] ;
25726: LD_ADDR_VAR 0 9
25730: PUSH
25731: LD_INT 30
25733: PUSH
25734: LD_INT 10
25736: PUSH
25737: LD_INT 5
25739: PUSH
25740: EMPTY
25741: LIST
25742: LIST
25743: LIST
25744: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
25745: LD_VAR 0 1
25749: PPUSH
25750: LD_INT 5
25752: PPUSH
25753: CALL_OW 321
25757: PUSH
25758: LD_INT 2
25760: EQUAL
25761: IFFALSE 25778
// bpoints := bpoints * 1.8 ;
25763: LD_ADDR_VAR 0 10
25767: PUSH
25768: LD_VAR 0 10
25772: PUSH
25773: LD_REAL  1.80000000000000E+0000
25776: MUL
25777: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
25778: LD_VAR 0 6
25782: PPUSH
25783: CALL_OW 257
25787: PUSH
25788: LD_INT 1
25790: PUSH
25791: LD_INT 2
25793: PUSH
25794: LD_INT 3
25796: PUSH
25797: LD_INT 4
25799: PUSH
25800: EMPTY
25801: LIST
25802: LIST
25803: LIST
25804: LIST
25805: IN
25806: PUSH
25807: LD_VAR 0 1
25811: PPUSH
25812: LD_INT 51
25814: PPUSH
25815: CALL_OW 321
25819: PUSH
25820: LD_INT 2
25822: EQUAL
25823: AND
25824: IFFALSE 25841
// bpoints := bpoints * 1.2 ;
25826: LD_ADDR_VAR 0 10
25830: PUSH
25831: LD_VAR 0 10
25835: PUSH
25836: LD_REAL  1.20000000000000E+0000
25839: MUL
25840: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
25841: LD_VAR 0 6
25845: PPUSH
25846: CALL_OW 257
25850: PUSH
25851: LD_INT 5
25853: PUSH
25854: LD_INT 7
25856: PUSH
25857: LD_INT 9
25859: PUSH
25860: EMPTY
25861: LIST
25862: LIST
25863: LIST
25864: IN
25865: PUSH
25866: LD_VAR 0 1
25870: PPUSH
25871: LD_INT 52
25873: PPUSH
25874: CALL_OW 321
25878: PUSH
25879: LD_INT 2
25881: EQUAL
25882: AND
25883: IFFALSE 25900
// bpoints := bpoints * 1.5 ;
25885: LD_ADDR_VAR 0 10
25889: PUSH
25890: LD_VAR 0 10
25894: PUSH
25895: LD_REAL  1.50000000000000E+0000
25898: MUL
25899: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
25900: LD_VAR 0 1
25904: PPUSH
25905: LD_INT 66
25907: PPUSH
25908: CALL_OW 321
25912: PUSH
25913: LD_INT 2
25915: EQUAL
25916: IFFALSE 25933
// bpoints := bpoints * 1.1 ;
25918: LD_ADDR_VAR 0 10
25922: PUSH
25923: LD_VAR 0 10
25927: PUSH
25928: LD_REAL  1.10000000000000E+0000
25931: MUL
25932: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
25933: LD_ADDR_VAR 0 10
25937: PUSH
25938: LD_VAR 0 10
25942: PUSH
25943: LD_VAR 0 6
25947: PPUSH
25948: LD_INT 1
25950: PPUSH
25951: CALL_OW 259
25955: PUSH
25956: LD_REAL  1.15000000000000E+0000
25959: MUL
25960: MUL
25961: ST_TO_ADDR
// end ; unit_vehicle :
25962: GO 26786
25964: LD_INT 2
25966: DOUBLE
25967: EQUAL
25968: IFTRUE 25972
25970: GO 26774
25972: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
25973: LD_VAR 0 6
25977: PPUSH
25978: CALL_OW 264
25982: PUSH
25983: LD_INT 2
25985: PUSH
25986: LD_INT 42
25988: PUSH
25989: LD_INT 24
25991: PUSH
25992: EMPTY
25993: LIST
25994: LIST
25995: LIST
25996: IN
25997: IFFALSE 26018
// points := [ 25 , 5 , 3 ] ;
25999: LD_ADDR_VAR 0 9
26003: PUSH
26004: LD_INT 25
26006: PUSH
26007: LD_INT 5
26009: PUSH
26010: LD_INT 3
26012: PUSH
26013: EMPTY
26014: LIST
26015: LIST
26016: LIST
26017: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
26018: LD_VAR 0 6
26022: PPUSH
26023: CALL_OW 264
26027: PUSH
26028: LD_INT 4
26030: PUSH
26031: LD_INT 43
26033: PUSH
26034: LD_INT 25
26036: PUSH
26037: EMPTY
26038: LIST
26039: LIST
26040: LIST
26041: IN
26042: IFFALSE 26063
// points := [ 40 , 15 , 5 ] ;
26044: LD_ADDR_VAR 0 9
26048: PUSH
26049: LD_INT 40
26051: PUSH
26052: LD_INT 15
26054: PUSH
26055: LD_INT 5
26057: PUSH
26058: EMPTY
26059: LIST
26060: LIST
26061: LIST
26062: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
26063: LD_VAR 0 6
26067: PPUSH
26068: CALL_OW 264
26072: PUSH
26073: LD_INT 3
26075: PUSH
26076: LD_INT 23
26078: PUSH
26079: EMPTY
26080: LIST
26081: LIST
26082: IN
26083: IFFALSE 26104
// points := [ 7 , 25 , 8 ] ;
26085: LD_ADDR_VAR 0 9
26089: PUSH
26090: LD_INT 7
26092: PUSH
26093: LD_INT 25
26095: PUSH
26096: LD_INT 8
26098: PUSH
26099: EMPTY
26100: LIST
26101: LIST
26102: LIST
26103: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
26104: LD_VAR 0 6
26108: PPUSH
26109: CALL_OW 264
26113: PUSH
26114: LD_INT 5
26116: PUSH
26117: LD_INT 27
26119: PUSH
26120: LD_INT 44
26122: PUSH
26123: EMPTY
26124: LIST
26125: LIST
26126: LIST
26127: IN
26128: IFFALSE 26149
// points := [ 14 , 50 , 16 ] ;
26130: LD_ADDR_VAR 0 9
26134: PUSH
26135: LD_INT 14
26137: PUSH
26138: LD_INT 50
26140: PUSH
26141: LD_INT 16
26143: PUSH
26144: EMPTY
26145: LIST
26146: LIST
26147: LIST
26148: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
26149: LD_VAR 0 6
26153: PPUSH
26154: CALL_OW 264
26158: PUSH
26159: LD_INT 6
26161: PUSH
26162: LD_INT 46
26164: PUSH
26165: EMPTY
26166: LIST
26167: LIST
26168: IN
26169: IFFALSE 26190
// points := [ 32 , 120 , 70 ] ;
26171: LD_ADDR_VAR 0 9
26175: PUSH
26176: LD_INT 32
26178: PUSH
26179: LD_INT 120
26181: PUSH
26182: LD_INT 70
26184: PUSH
26185: EMPTY
26186: LIST
26187: LIST
26188: LIST
26189: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
26190: LD_VAR 0 6
26194: PPUSH
26195: CALL_OW 264
26199: PUSH
26200: LD_INT 7
26202: PUSH
26203: LD_INT 28
26205: PUSH
26206: LD_INT 45
26208: PUSH
26209: EMPTY
26210: LIST
26211: LIST
26212: LIST
26213: IN
26214: IFFALSE 26235
// points := [ 35 , 20 , 45 ] ;
26216: LD_ADDR_VAR 0 9
26220: PUSH
26221: LD_INT 35
26223: PUSH
26224: LD_INT 20
26226: PUSH
26227: LD_INT 45
26229: PUSH
26230: EMPTY
26231: LIST
26232: LIST
26233: LIST
26234: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
26235: LD_VAR 0 6
26239: PPUSH
26240: CALL_OW 264
26244: PUSH
26245: LD_INT 47
26247: PUSH
26248: EMPTY
26249: LIST
26250: IN
26251: IFFALSE 26272
// points := [ 67 , 45 , 75 ] ;
26253: LD_ADDR_VAR 0 9
26257: PUSH
26258: LD_INT 67
26260: PUSH
26261: LD_INT 45
26263: PUSH
26264: LD_INT 75
26266: PUSH
26267: EMPTY
26268: LIST
26269: LIST
26270: LIST
26271: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
26272: LD_VAR 0 6
26276: PPUSH
26277: CALL_OW 264
26281: PUSH
26282: LD_INT 26
26284: PUSH
26285: EMPTY
26286: LIST
26287: IN
26288: IFFALSE 26309
// points := [ 120 , 30 , 80 ] ;
26290: LD_ADDR_VAR 0 9
26294: PUSH
26295: LD_INT 120
26297: PUSH
26298: LD_INT 30
26300: PUSH
26301: LD_INT 80
26303: PUSH
26304: EMPTY
26305: LIST
26306: LIST
26307: LIST
26308: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
26309: LD_VAR 0 6
26313: PPUSH
26314: CALL_OW 264
26318: PUSH
26319: LD_INT 22
26321: PUSH
26322: EMPTY
26323: LIST
26324: IN
26325: IFFALSE 26346
// points := [ 40 , 1 , 1 ] ;
26327: LD_ADDR_VAR 0 9
26331: PUSH
26332: LD_INT 40
26334: PUSH
26335: LD_INT 1
26337: PUSH
26338: LD_INT 1
26340: PUSH
26341: EMPTY
26342: LIST
26343: LIST
26344: LIST
26345: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
26346: LD_VAR 0 6
26350: PPUSH
26351: CALL_OW 264
26355: PUSH
26356: LD_INT 29
26358: PUSH
26359: EMPTY
26360: LIST
26361: IN
26362: IFFALSE 26383
// points := [ 70 , 200 , 400 ] ;
26364: LD_ADDR_VAR 0 9
26368: PUSH
26369: LD_INT 70
26371: PUSH
26372: LD_INT 200
26374: PUSH
26375: LD_INT 400
26377: PUSH
26378: EMPTY
26379: LIST
26380: LIST
26381: LIST
26382: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
26383: LD_VAR 0 6
26387: PPUSH
26388: CALL_OW 264
26392: PUSH
26393: LD_INT 14
26395: PUSH
26396: LD_INT 53
26398: PUSH
26399: EMPTY
26400: LIST
26401: LIST
26402: IN
26403: IFFALSE 26424
// points := [ 40 , 10 , 20 ] ;
26405: LD_ADDR_VAR 0 9
26409: PUSH
26410: LD_INT 40
26412: PUSH
26413: LD_INT 10
26415: PUSH
26416: LD_INT 20
26418: PUSH
26419: EMPTY
26420: LIST
26421: LIST
26422: LIST
26423: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
26424: LD_VAR 0 6
26428: PPUSH
26429: CALL_OW 264
26433: PUSH
26434: LD_INT 9
26436: PUSH
26437: EMPTY
26438: LIST
26439: IN
26440: IFFALSE 26461
// points := [ 5 , 70 , 20 ] ;
26442: LD_ADDR_VAR 0 9
26446: PUSH
26447: LD_INT 5
26449: PUSH
26450: LD_INT 70
26452: PUSH
26453: LD_INT 20
26455: PUSH
26456: EMPTY
26457: LIST
26458: LIST
26459: LIST
26460: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
26461: LD_VAR 0 6
26465: PPUSH
26466: CALL_OW 264
26470: PUSH
26471: LD_INT 10
26473: PUSH
26474: EMPTY
26475: LIST
26476: IN
26477: IFFALSE 26498
// points := [ 35 , 110 , 70 ] ;
26479: LD_ADDR_VAR 0 9
26483: PUSH
26484: LD_INT 35
26486: PUSH
26487: LD_INT 110
26489: PUSH
26490: LD_INT 70
26492: PUSH
26493: EMPTY
26494: LIST
26495: LIST
26496: LIST
26497: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
26498: LD_VAR 0 6
26502: PPUSH
26503: CALL_OW 265
26507: PUSH
26508: LD_INT 25
26510: EQUAL
26511: IFFALSE 26532
// points := [ 80 , 65 , 100 ] ;
26513: LD_ADDR_VAR 0 9
26517: PUSH
26518: LD_INT 80
26520: PUSH
26521: LD_INT 65
26523: PUSH
26524: LD_INT 100
26526: PUSH
26527: EMPTY
26528: LIST
26529: LIST
26530: LIST
26531: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
26532: LD_VAR 0 6
26536: PPUSH
26537: CALL_OW 263
26541: PUSH
26542: LD_INT 1
26544: EQUAL
26545: IFFALSE 26580
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
26547: LD_ADDR_VAR 0 10
26551: PUSH
26552: LD_VAR 0 10
26556: PUSH
26557: LD_VAR 0 6
26561: PPUSH
26562: CALL_OW 311
26566: PPUSH
26567: LD_INT 3
26569: PPUSH
26570: CALL_OW 259
26574: PUSH
26575: LD_INT 4
26577: MUL
26578: MUL
26579: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
26580: LD_VAR 0 6
26584: PPUSH
26585: CALL_OW 263
26589: PUSH
26590: LD_INT 2
26592: EQUAL
26593: IFFALSE 26644
// begin j := IsControledBy ( i ) ;
26595: LD_ADDR_VAR 0 7
26599: PUSH
26600: LD_VAR 0 6
26604: PPUSH
26605: CALL_OW 312
26609: ST_TO_ADDR
// if j then
26610: LD_VAR 0 7
26614: IFFALSE 26644
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
26616: LD_ADDR_VAR 0 10
26620: PUSH
26621: LD_VAR 0 10
26625: PUSH
26626: LD_VAR 0 7
26630: PPUSH
26631: LD_INT 3
26633: PPUSH
26634: CALL_OW 259
26638: PUSH
26639: LD_INT 3
26641: MUL
26642: MUL
26643: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
26644: LD_VAR 0 6
26648: PPUSH
26649: CALL_OW 264
26653: PUSH
26654: LD_INT 5
26656: PUSH
26657: LD_INT 6
26659: PUSH
26660: LD_INT 46
26662: PUSH
26663: LD_INT 44
26665: PUSH
26666: LD_INT 47
26668: PUSH
26669: LD_INT 45
26671: PUSH
26672: LD_INT 28
26674: PUSH
26675: LD_INT 7
26677: PUSH
26678: LD_INT 27
26680: PUSH
26681: LD_INT 29
26683: PUSH
26684: EMPTY
26685: LIST
26686: LIST
26687: LIST
26688: LIST
26689: LIST
26690: LIST
26691: LIST
26692: LIST
26693: LIST
26694: LIST
26695: IN
26696: PUSH
26697: LD_VAR 0 1
26701: PPUSH
26702: LD_INT 52
26704: PPUSH
26705: CALL_OW 321
26709: PUSH
26710: LD_INT 2
26712: EQUAL
26713: AND
26714: IFFALSE 26731
// bpoints := bpoints * 1.2 ;
26716: LD_ADDR_VAR 0 10
26720: PUSH
26721: LD_VAR 0 10
26725: PUSH
26726: LD_REAL  1.20000000000000E+0000
26729: MUL
26730: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
26731: LD_VAR 0 6
26735: PPUSH
26736: CALL_OW 264
26740: PUSH
26741: LD_INT 6
26743: PUSH
26744: LD_INT 46
26746: PUSH
26747: LD_INT 47
26749: PUSH
26750: EMPTY
26751: LIST
26752: LIST
26753: LIST
26754: IN
26755: IFFALSE 26772
// bpoints := bpoints * 1.2 ;
26757: LD_ADDR_VAR 0 10
26761: PUSH
26762: LD_VAR 0 10
26766: PUSH
26767: LD_REAL  1.20000000000000E+0000
26770: MUL
26771: ST_TO_ADDR
// end ; unit_building :
26772: GO 26786
26774: LD_INT 3
26776: DOUBLE
26777: EQUAL
26778: IFTRUE 26782
26780: GO 26785
26782: POP
// ; end ;
26783: GO 26786
26785: POP
// for j = 1 to 3 do
26786: LD_ADDR_VAR 0 7
26790: PUSH
26791: DOUBLE
26792: LD_INT 1
26794: DEC
26795: ST_TO_ADDR
26796: LD_INT 3
26798: PUSH
26799: FOR_TO
26800: IFFALSE 26853
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
26802: LD_ADDR_VAR 0 5
26806: PUSH
26807: LD_VAR 0 5
26811: PPUSH
26812: LD_VAR 0 7
26816: PPUSH
26817: LD_VAR 0 5
26821: PUSH
26822: LD_VAR 0 7
26826: ARRAY
26827: PUSH
26828: LD_VAR 0 9
26832: PUSH
26833: LD_VAR 0 7
26837: ARRAY
26838: PUSH
26839: LD_VAR 0 10
26843: MUL
26844: PLUS
26845: PPUSH
26846: CALL_OW 1
26850: ST_TO_ADDR
26851: GO 26799
26853: POP
26854: POP
// end ;
26855: GO 25338
26857: POP
26858: POP
// result := Replace ( result , 4 , tmp ) ;
26859: LD_ADDR_VAR 0 5
26863: PUSH
26864: LD_VAR 0 5
26868: PPUSH
26869: LD_INT 4
26871: PPUSH
26872: LD_VAR 0 8
26876: PPUSH
26877: CALL_OW 1
26881: ST_TO_ADDR
// end ;
26882: LD_VAR 0 5
26886: RET
// export function DangerAtRange ( unit , range ) ; begin
26887: LD_INT 0
26889: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
26890: LD_ADDR_VAR 0 3
26894: PUSH
26895: LD_VAR 0 1
26899: PPUSH
26900: CALL_OW 255
26904: PPUSH
26905: LD_VAR 0 1
26909: PPUSH
26910: CALL_OW 250
26914: PPUSH
26915: LD_VAR 0 1
26919: PPUSH
26920: CALL_OW 251
26924: PPUSH
26925: LD_VAR 0 2
26929: PPUSH
26930: CALL 25190 0 4
26934: ST_TO_ADDR
// end ;
26935: LD_VAR 0 3
26939: RET
// export function DangerInArea ( side , area ) ; begin
26940: LD_INT 0
26942: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
26943: LD_ADDR_VAR 0 3
26947: PUSH
26948: LD_VAR 0 2
26952: PPUSH
26953: LD_INT 81
26955: PUSH
26956: LD_VAR 0 1
26960: PUSH
26961: EMPTY
26962: LIST
26963: LIST
26964: PPUSH
26965: CALL_OW 70
26969: ST_TO_ADDR
// end ;
26970: LD_VAR 0 3
26974: RET
// export function IsExtension ( b ) ; begin
26975: LD_INT 0
26977: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
26978: LD_ADDR_VAR 0 2
26982: PUSH
26983: LD_VAR 0 1
26987: PUSH
26988: LD_INT 23
26990: PUSH
26991: LD_INT 20
26993: PUSH
26994: LD_INT 22
26996: PUSH
26997: LD_INT 17
26999: PUSH
27000: LD_INT 24
27002: PUSH
27003: LD_INT 21
27005: PUSH
27006: LD_INT 19
27008: PUSH
27009: LD_INT 16
27011: PUSH
27012: LD_INT 25
27014: PUSH
27015: LD_INT 18
27017: PUSH
27018: EMPTY
27019: LIST
27020: LIST
27021: LIST
27022: LIST
27023: LIST
27024: LIST
27025: LIST
27026: LIST
27027: LIST
27028: LIST
27029: IN
27030: ST_TO_ADDR
// end ;
27031: LD_VAR 0 2
27035: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
27036: LD_INT 0
27038: PPUSH
27039: PPUSH
27040: PPUSH
// result := [ ] ;
27041: LD_ADDR_VAR 0 3
27045: PUSH
27046: EMPTY
27047: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
27048: LD_ADDR_VAR 0 4
27052: PUSH
27053: LD_VAR 0 2
27057: PPUSH
27058: LD_INT 21
27060: PUSH
27061: LD_INT 3
27063: PUSH
27064: EMPTY
27065: LIST
27066: LIST
27067: PPUSH
27068: CALL_OW 70
27072: ST_TO_ADDR
// if not tmp then
27073: LD_VAR 0 4
27077: NOT
27078: IFFALSE 27082
// exit ;
27080: GO 27140
// for i in tmp do
27082: LD_ADDR_VAR 0 5
27086: PUSH
27087: LD_VAR 0 4
27091: PUSH
27092: FOR_IN
27093: IFFALSE 27128
// if GetBase ( i ) <> base then
27095: LD_VAR 0 5
27099: PPUSH
27100: CALL_OW 274
27104: PUSH
27105: LD_VAR 0 1
27109: NONEQUAL
27110: IFFALSE 27126
// ComLinkToBase ( base , i ) ;
27112: LD_VAR 0 1
27116: PPUSH
27117: LD_VAR 0 5
27121: PPUSH
27122: CALL_OW 169
27126: GO 27092
27128: POP
27129: POP
// result := tmp ;
27130: LD_ADDR_VAR 0 3
27134: PUSH
27135: LD_VAR 0 4
27139: ST_TO_ADDR
// end ;
27140: LD_VAR 0 3
27144: RET
// export function ComComplete ( unit , b ) ; var i ; begin
27145: LD_INT 0
27147: PPUSH
27148: PPUSH
// if BuildingStatus ( b ) = bs_build then
27149: LD_VAR 0 2
27153: PPUSH
27154: CALL_OW 461
27158: PUSH
27159: LD_INT 1
27161: EQUAL
27162: IFFALSE 27222
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
27164: LD_VAR 0 1
27168: PPUSH
27169: LD_STRING h
27171: PUSH
27172: LD_VAR 0 2
27176: PPUSH
27177: CALL_OW 250
27181: PUSH
27182: LD_VAR 0 2
27186: PPUSH
27187: CALL_OW 251
27191: PUSH
27192: LD_VAR 0 2
27196: PUSH
27197: LD_INT 0
27199: PUSH
27200: LD_INT 0
27202: PUSH
27203: LD_INT 0
27205: PUSH
27206: EMPTY
27207: LIST
27208: LIST
27209: LIST
27210: LIST
27211: LIST
27212: LIST
27213: LIST
27214: PUSH
27215: EMPTY
27216: LIST
27217: PPUSH
27218: CALL_OW 446
// end ;
27222: LD_VAR 0 3
27226: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
27227: LD_INT 0
27229: PPUSH
27230: PPUSH
27231: PPUSH
27232: PPUSH
27233: PPUSH
27234: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
27235: LD_VAR 0 1
27239: NOT
27240: PUSH
27241: LD_VAR 0 1
27245: PPUSH
27246: CALL_OW 263
27250: PUSH
27251: LD_INT 2
27253: EQUAL
27254: NOT
27255: OR
27256: IFFALSE 27260
// exit ;
27258: GO 27576
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
27260: LD_ADDR_VAR 0 6
27264: PUSH
27265: LD_INT 22
27267: PUSH
27268: LD_VAR 0 1
27272: PPUSH
27273: CALL_OW 255
27277: PUSH
27278: EMPTY
27279: LIST
27280: LIST
27281: PUSH
27282: LD_INT 2
27284: PUSH
27285: LD_INT 30
27287: PUSH
27288: LD_INT 36
27290: PUSH
27291: EMPTY
27292: LIST
27293: LIST
27294: PUSH
27295: LD_INT 34
27297: PUSH
27298: LD_INT 31
27300: PUSH
27301: EMPTY
27302: LIST
27303: LIST
27304: PUSH
27305: EMPTY
27306: LIST
27307: LIST
27308: LIST
27309: PUSH
27310: EMPTY
27311: LIST
27312: LIST
27313: PPUSH
27314: CALL_OW 69
27318: ST_TO_ADDR
// if not tmp then
27319: LD_VAR 0 6
27323: NOT
27324: IFFALSE 27328
// exit ;
27326: GO 27576
// result := [ ] ;
27328: LD_ADDR_VAR 0 2
27332: PUSH
27333: EMPTY
27334: ST_TO_ADDR
// for i in tmp do
27335: LD_ADDR_VAR 0 3
27339: PUSH
27340: LD_VAR 0 6
27344: PUSH
27345: FOR_IN
27346: IFFALSE 27417
// begin t := UnitsInside ( i ) ;
27348: LD_ADDR_VAR 0 4
27352: PUSH
27353: LD_VAR 0 3
27357: PPUSH
27358: CALL_OW 313
27362: ST_TO_ADDR
// if t then
27363: LD_VAR 0 4
27367: IFFALSE 27415
// for j in t do
27369: LD_ADDR_VAR 0 7
27373: PUSH
27374: LD_VAR 0 4
27378: PUSH
27379: FOR_IN
27380: IFFALSE 27413
// result := Insert ( result , result + 1 , j ) ;
27382: LD_ADDR_VAR 0 2
27386: PUSH
27387: LD_VAR 0 2
27391: PPUSH
27392: LD_VAR 0 2
27396: PUSH
27397: LD_INT 1
27399: PLUS
27400: PPUSH
27401: LD_VAR 0 7
27405: PPUSH
27406: CALL_OW 2
27410: ST_TO_ADDR
27411: GO 27379
27413: POP
27414: POP
// end ;
27415: GO 27345
27417: POP
27418: POP
// if not result then
27419: LD_VAR 0 2
27423: NOT
27424: IFFALSE 27428
// exit ;
27426: GO 27576
// mech := result [ 1 ] ;
27428: LD_ADDR_VAR 0 5
27432: PUSH
27433: LD_VAR 0 2
27437: PUSH
27438: LD_INT 1
27440: ARRAY
27441: ST_TO_ADDR
// if result > 1 then
27442: LD_VAR 0 2
27446: PUSH
27447: LD_INT 1
27449: GREATER
27450: IFFALSE 27562
// for i = 2 to result do
27452: LD_ADDR_VAR 0 3
27456: PUSH
27457: DOUBLE
27458: LD_INT 2
27460: DEC
27461: ST_TO_ADDR
27462: LD_VAR 0 2
27466: PUSH
27467: FOR_TO
27468: IFFALSE 27560
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
27470: LD_ADDR_VAR 0 4
27474: PUSH
27475: LD_VAR 0 2
27479: PUSH
27480: LD_VAR 0 3
27484: ARRAY
27485: PPUSH
27486: LD_INT 3
27488: PPUSH
27489: CALL_OW 259
27493: PUSH
27494: LD_VAR 0 2
27498: PUSH
27499: LD_VAR 0 3
27503: ARRAY
27504: PPUSH
27505: CALL_OW 432
27509: MINUS
27510: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
27511: LD_VAR 0 4
27515: PUSH
27516: LD_VAR 0 5
27520: PPUSH
27521: LD_INT 3
27523: PPUSH
27524: CALL_OW 259
27528: PUSH
27529: LD_VAR 0 5
27533: PPUSH
27534: CALL_OW 432
27538: MINUS
27539: GREATEREQUAL
27540: IFFALSE 27558
// mech := result [ i ] ;
27542: LD_ADDR_VAR 0 5
27546: PUSH
27547: LD_VAR 0 2
27551: PUSH
27552: LD_VAR 0 3
27556: ARRAY
27557: ST_TO_ADDR
// end ;
27558: GO 27467
27560: POP
27561: POP
// ComLinkTo ( vehicle , mech ) ;
27562: LD_VAR 0 1
27566: PPUSH
27567: LD_VAR 0 5
27571: PPUSH
27572: CALL_OW 135
// end ;
27576: LD_VAR 0 2
27580: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
27581: LD_INT 0
27583: PPUSH
27584: PPUSH
27585: PPUSH
27586: PPUSH
27587: PPUSH
27588: PPUSH
27589: PPUSH
27590: PPUSH
27591: PPUSH
27592: PPUSH
27593: PPUSH
27594: PPUSH
27595: PPUSH
// result := [ ] ;
27596: LD_ADDR_VAR 0 7
27600: PUSH
27601: EMPTY
27602: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
27603: LD_VAR 0 1
27607: PPUSH
27608: CALL_OW 266
27612: PUSH
27613: LD_INT 0
27615: PUSH
27616: LD_INT 1
27618: PUSH
27619: EMPTY
27620: LIST
27621: LIST
27622: IN
27623: NOT
27624: IFFALSE 27628
// exit ;
27626: GO 29259
// if name then
27628: LD_VAR 0 3
27632: IFFALSE 27648
// SetBName ( base_dep , name ) ;
27634: LD_VAR 0 1
27638: PPUSH
27639: LD_VAR 0 3
27643: PPUSH
27644: CALL_OW 500
// base := GetBase ( base_dep ) ;
27648: LD_ADDR_VAR 0 15
27652: PUSH
27653: LD_VAR 0 1
27657: PPUSH
27658: CALL_OW 274
27662: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
27663: LD_ADDR_VAR 0 16
27667: PUSH
27668: LD_VAR 0 1
27672: PPUSH
27673: CALL_OW 255
27677: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
27678: LD_ADDR_VAR 0 17
27682: PUSH
27683: LD_VAR 0 1
27687: PPUSH
27688: CALL_OW 248
27692: ST_TO_ADDR
// if sources then
27693: LD_VAR 0 5
27697: IFFALSE 27744
// for i = 1 to 3 do
27699: LD_ADDR_VAR 0 8
27703: PUSH
27704: DOUBLE
27705: LD_INT 1
27707: DEC
27708: ST_TO_ADDR
27709: LD_INT 3
27711: PUSH
27712: FOR_TO
27713: IFFALSE 27742
// AddResourceType ( base , i , sources [ i ] ) ;
27715: LD_VAR 0 15
27719: PPUSH
27720: LD_VAR 0 8
27724: PPUSH
27725: LD_VAR 0 5
27729: PUSH
27730: LD_VAR 0 8
27734: ARRAY
27735: PPUSH
27736: CALL_OW 276
27740: GO 27712
27742: POP
27743: POP
// buildings := GetBaseBuildings ( base , area ) ;
27744: LD_ADDR_VAR 0 18
27748: PUSH
27749: LD_VAR 0 15
27753: PPUSH
27754: LD_VAR 0 2
27758: PPUSH
27759: CALL 27036 0 2
27763: ST_TO_ADDR
// InitHc ;
27764: CALL_OW 19
// InitUc ;
27768: CALL_OW 18
// uc_side := side ;
27772: LD_ADDR_OWVAR 20
27776: PUSH
27777: LD_VAR 0 16
27781: ST_TO_ADDR
// uc_nation := nation ;
27782: LD_ADDR_OWVAR 21
27786: PUSH
27787: LD_VAR 0 17
27791: ST_TO_ADDR
// if buildings then
27792: LD_VAR 0 18
27796: IFFALSE 29118
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
27798: LD_ADDR_VAR 0 19
27802: PUSH
27803: LD_VAR 0 18
27807: PPUSH
27808: LD_INT 2
27810: PUSH
27811: LD_INT 30
27813: PUSH
27814: LD_INT 29
27816: PUSH
27817: EMPTY
27818: LIST
27819: LIST
27820: PUSH
27821: LD_INT 30
27823: PUSH
27824: LD_INT 30
27826: PUSH
27827: EMPTY
27828: LIST
27829: LIST
27830: PUSH
27831: EMPTY
27832: LIST
27833: LIST
27834: LIST
27835: PPUSH
27836: CALL_OW 72
27840: ST_TO_ADDR
// if tmp then
27841: LD_VAR 0 19
27845: IFFALSE 27893
// for i in tmp do
27847: LD_ADDR_VAR 0 8
27851: PUSH
27852: LD_VAR 0 19
27856: PUSH
27857: FOR_IN
27858: IFFALSE 27891
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
27860: LD_VAR 0 8
27864: PPUSH
27865: CALL_OW 250
27869: PPUSH
27870: LD_VAR 0 8
27874: PPUSH
27875: CALL_OW 251
27879: PPUSH
27880: LD_VAR 0 16
27884: PPUSH
27885: CALL_OW 441
27889: GO 27857
27891: POP
27892: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
27893: LD_VAR 0 18
27897: PPUSH
27898: LD_INT 2
27900: PUSH
27901: LD_INT 30
27903: PUSH
27904: LD_INT 32
27906: PUSH
27907: EMPTY
27908: LIST
27909: LIST
27910: PUSH
27911: LD_INT 30
27913: PUSH
27914: LD_INT 33
27916: PUSH
27917: EMPTY
27918: LIST
27919: LIST
27920: PUSH
27921: EMPTY
27922: LIST
27923: LIST
27924: LIST
27925: PPUSH
27926: CALL_OW 72
27930: IFFALSE 28018
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
27932: LD_ADDR_VAR 0 8
27936: PUSH
27937: LD_VAR 0 18
27941: PPUSH
27942: LD_INT 2
27944: PUSH
27945: LD_INT 30
27947: PUSH
27948: LD_INT 32
27950: PUSH
27951: EMPTY
27952: LIST
27953: LIST
27954: PUSH
27955: LD_INT 30
27957: PUSH
27958: LD_INT 33
27960: PUSH
27961: EMPTY
27962: LIST
27963: LIST
27964: PUSH
27965: EMPTY
27966: LIST
27967: LIST
27968: LIST
27969: PPUSH
27970: CALL_OW 72
27974: PUSH
27975: FOR_IN
27976: IFFALSE 28016
// begin if not GetBWeapon ( i ) then
27978: LD_VAR 0 8
27982: PPUSH
27983: CALL_OW 269
27987: NOT
27988: IFFALSE 28014
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
27990: LD_VAR 0 8
27994: PPUSH
27995: LD_VAR 0 8
27999: PPUSH
28000: LD_VAR 0 2
28004: PPUSH
28005: CALL 29264 0 2
28009: PPUSH
28010: CALL_OW 431
// end ;
28014: GO 27975
28016: POP
28017: POP
// end ; for i = 1 to personel do
28018: LD_ADDR_VAR 0 8
28022: PUSH
28023: DOUBLE
28024: LD_INT 1
28026: DEC
28027: ST_TO_ADDR
28028: LD_VAR 0 6
28032: PUSH
28033: FOR_TO
28034: IFFALSE 29098
// begin if i > 4 then
28036: LD_VAR 0 8
28040: PUSH
28041: LD_INT 4
28043: GREATER
28044: IFFALSE 28048
// break ;
28046: GO 29098
// case i of 1 :
28048: LD_VAR 0 8
28052: PUSH
28053: LD_INT 1
28055: DOUBLE
28056: EQUAL
28057: IFTRUE 28061
28059: GO 28141
28061: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
28062: LD_ADDR_VAR 0 12
28066: PUSH
28067: LD_VAR 0 18
28071: PPUSH
28072: LD_INT 22
28074: PUSH
28075: LD_VAR 0 16
28079: PUSH
28080: EMPTY
28081: LIST
28082: LIST
28083: PUSH
28084: LD_INT 58
28086: PUSH
28087: EMPTY
28088: LIST
28089: PUSH
28090: LD_INT 2
28092: PUSH
28093: LD_INT 30
28095: PUSH
28096: LD_INT 32
28098: PUSH
28099: EMPTY
28100: LIST
28101: LIST
28102: PUSH
28103: LD_INT 30
28105: PUSH
28106: LD_INT 4
28108: PUSH
28109: EMPTY
28110: LIST
28111: LIST
28112: PUSH
28113: LD_INT 30
28115: PUSH
28116: LD_INT 5
28118: PUSH
28119: EMPTY
28120: LIST
28121: LIST
28122: PUSH
28123: EMPTY
28124: LIST
28125: LIST
28126: LIST
28127: LIST
28128: PUSH
28129: EMPTY
28130: LIST
28131: LIST
28132: LIST
28133: PPUSH
28134: CALL_OW 72
28138: ST_TO_ADDR
28139: GO 28363
28141: LD_INT 2
28143: DOUBLE
28144: EQUAL
28145: IFTRUE 28149
28147: GO 28211
28149: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
28150: LD_ADDR_VAR 0 12
28154: PUSH
28155: LD_VAR 0 18
28159: PPUSH
28160: LD_INT 22
28162: PUSH
28163: LD_VAR 0 16
28167: PUSH
28168: EMPTY
28169: LIST
28170: LIST
28171: PUSH
28172: LD_INT 2
28174: PUSH
28175: LD_INT 30
28177: PUSH
28178: LD_INT 0
28180: PUSH
28181: EMPTY
28182: LIST
28183: LIST
28184: PUSH
28185: LD_INT 30
28187: PUSH
28188: LD_INT 1
28190: PUSH
28191: EMPTY
28192: LIST
28193: LIST
28194: PUSH
28195: EMPTY
28196: LIST
28197: LIST
28198: LIST
28199: PUSH
28200: EMPTY
28201: LIST
28202: LIST
28203: PPUSH
28204: CALL_OW 72
28208: ST_TO_ADDR
28209: GO 28363
28211: LD_INT 3
28213: DOUBLE
28214: EQUAL
28215: IFTRUE 28219
28217: GO 28281
28219: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
28220: LD_ADDR_VAR 0 12
28224: PUSH
28225: LD_VAR 0 18
28229: PPUSH
28230: LD_INT 22
28232: PUSH
28233: LD_VAR 0 16
28237: PUSH
28238: EMPTY
28239: LIST
28240: LIST
28241: PUSH
28242: LD_INT 2
28244: PUSH
28245: LD_INT 30
28247: PUSH
28248: LD_INT 2
28250: PUSH
28251: EMPTY
28252: LIST
28253: LIST
28254: PUSH
28255: LD_INT 30
28257: PUSH
28258: LD_INT 3
28260: PUSH
28261: EMPTY
28262: LIST
28263: LIST
28264: PUSH
28265: EMPTY
28266: LIST
28267: LIST
28268: LIST
28269: PUSH
28270: EMPTY
28271: LIST
28272: LIST
28273: PPUSH
28274: CALL_OW 72
28278: ST_TO_ADDR
28279: GO 28363
28281: LD_INT 4
28283: DOUBLE
28284: EQUAL
28285: IFTRUE 28289
28287: GO 28362
28289: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
28290: LD_ADDR_VAR 0 12
28294: PUSH
28295: LD_VAR 0 18
28299: PPUSH
28300: LD_INT 22
28302: PUSH
28303: LD_VAR 0 16
28307: PUSH
28308: EMPTY
28309: LIST
28310: LIST
28311: PUSH
28312: LD_INT 2
28314: PUSH
28315: LD_INT 30
28317: PUSH
28318: LD_INT 6
28320: PUSH
28321: EMPTY
28322: LIST
28323: LIST
28324: PUSH
28325: LD_INT 30
28327: PUSH
28328: LD_INT 7
28330: PUSH
28331: EMPTY
28332: LIST
28333: LIST
28334: PUSH
28335: LD_INT 30
28337: PUSH
28338: LD_INT 8
28340: PUSH
28341: EMPTY
28342: LIST
28343: LIST
28344: PUSH
28345: EMPTY
28346: LIST
28347: LIST
28348: LIST
28349: LIST
28350: PUSH
28351: EMPTY
28352: LIST
28353: LIST
28354: PPUSH
28355: CALL_OW 72
28359: ST_TO_ADDR
28360: GO 28363
28362: POP
// if i = 1 then
28363: LD_VAR 0 8
28367: PUSH
28368: LD_INT 1
28370: EQUAL
28371: IFFALSE 28482
// begin tmp := [ ] ;
28373: LD_ADDR_VAR 0 19
28377: PUSH
28378: EMPTY
28379: ST_TO_ADDR
// for j in f do
28380: LD_ADDR_VAR 0 9
28384: PUSH
28385: LD_VAR 0 12
28389: PUSH
28390: FOR_IN
28391: IFFALSE 28464
// if GetBType ( j ) = b_bunker then
28393: LD_VAR 0 9
28397: PPUSH
28398: CALL_OW 266
28402: PUSH
28403: LD_INT 32
28405: EQUAL
28406: IFFALSE 28433
// tmp := Insert ( tmp , 1 , j ) else
28408: LD_ADDR_VAR 0 19
28412: PUSH
28413: LD_VAR 0 19
28417: PPUSH
28418: LD_INT 1
28420: PPUSH
28421: LD_VAR 0 9
28425: PPUSH
28426: CALL_OW 2
28430: ST_TO_ADDR
28431: GO 28462
// tmp := Insert ( tmp , tmp + 1 , j ) ;
28433: LD_ADDR_VAR 0 19
28437: PUSH
28438: LD_VAR 0 19
28442: PPUSH
28443: LD_VAR 0 19
28447: PUSH
28448: LD_INT 1
28450: PLUS
28451: PPUSH
28452: LD_VAR 0 9
28456: PPUSH
28457: CALL_OW 2
28461: ST_TO_ADDR
28462: GO 28390
28464: POP
28465: POP
// if tmp then
28466: LD_VAR 0 19
28470: IFFALSE 28482
// f := tmp ;
28472: LD_ADDR_VAR 0 12
28476: PUSH
28477: LD_VAR 0 19
28481: ST_TO_ADDR
// end ; x := personel [ i ] ;
28482: LD_ADDR_VAR 0 13
28486: PUSH
28487: LD_VAR 0 6
28491: PUSH
28492: LD_VAR 0 8
28496: ARRAY
28497: ST_TO_ADDR
// if x = - 1 then
28498: LD_VAR 0 13
28502: PUSH
28503: LD_INT 1
28505: NEG
28506: EQUAL
28507: IFFALSE 28716
// begin for j in f do
28509: LD_ADDR_VAR 0 9
28513: PUSH
28514: LD_VAR 0 12
28518: PUSH
28519: FOR_IN
28520: IFFALSE 28712
// repeat InitHc ;
28522: CALL_OW 19
// if GetBType ( j ) = b_barracks then
28526: LD_VAR 0 9
28530: PPUSH
28531: CALL_OW 266
28535: PUSH
28536: LD_INT 5
28538: EQUAL
28539: IFFALSE 28609
// begin if UnitsInside ( j ) < 3 then
28541: LD_VAR 0 9
28545: PPUSH
28546: CALL_OW 313
28550: PUSH
28551: LD_INT 3
28553: LESS
28554: IFFALSE 28590
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
28556: LD_INT 0
28558: PPUSH
28559: LD_INT 5
28561: PUSH
28562: LD_INT 8
28564: PUSH
28565: LD_INT 9
28567: PUSH
28568: EMPTY
28569: LIST
28570: LIST
28571: LIST
28572: PUSH
28573: LD_VAR 0 17
28577: ARRAY
28578: PPUSH
28579: LD_VAR 0 4
28583: PPUSH
28584: CALL_OW 380
28588: GO 28607
// PrepareHuman ( false , i , skill ) ;
28590: LD_INT 0
28592: PPUSH
28593: LD_VAR 0 8
28597: PPUSH
28598: LD_VAR 0 4
28602: PPUSH
28603: CALL_OW 380
// end else
28607: GO 28626
// PrepareHuman ( false , i , skill ) ;
28609: LD_INT 0
28611: PPUSH
28612: LD_VAR 0 8
28616: PPUSH
28617: LD_VAR 0 4
28621: PPUSH
28622: CALL_OW 380
// un := CreateHuman ;
28626: LD_ADDR_VAR 0 14
28630: PUSH
28631: CALL_OW 44
28635: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
28636: LD_ADDR_VAR 0 7
28640: PUSH
28641: LD_VAR 0 7
28645: PPUSH
28646: LD_INT 1
28648: PPUSH
28649: LD_VAR 0 14
28653: PPUSH
28654: CALL_OW 2
28658: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
28659: LD_VAR 0 14
28663: PPUSH
28664: LD_VAR 0 9
28668: PPUSH
28669: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
28673: LD_VAR 0 9
28677: PPUSH
28678: CALL_OW 313
28682: PUSH
28683: LD_INT 6
28685: EQUAL
28686: PUSH
28687: LD_VAR 0 9
28691: PPUSH
28692: CALL_OW 266
28696: PUSH
28697: LD_INT 32
28699: PUSH
28700: LD_INT 31
28702: PUSH
28703: EMPTY
28704: LIST
28705: LIST
28706: IN
28707: OR
28708: IFFALSE 28522
28710: GO 28519
28712: POP
28713: POP
// end else
28714: GO 29096
// for j = 1 to x do
28716: LD_ADDR_VAR 0 9
28720: PUSH
28721: DOUBLE
28722: LD_INT 1
28724: DEC
28725: ST_TO_ADDR
28726: LD_VAR 0 13
28730: PUSH
28731: FOR_TO
28732: IFFALSE 29094
// begin InitHc ;
28734: CALL_OW 19
// if not f then
28738: LD_VAR 0 12
28742: NOT
28743: IFFALSE 28832
// begin PrepareHuman ( false , i , skill ) ;
28745: LD_INT 0
28747: PPUSH
28748: LD_VAR 0 8
28752: PPUSH
28753: LD_VAR 0 4
28757: PPUSH
28758: CALL_OW 380
// un := CreateHuman ;
28762: LD_ADDR_VAR 0 14
28766: PUSH
28767: CALL_OW 44
28771: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
28772: LD_ADDR_VAR 0 7
28776: PUSH
28777: LD_VAR 0 7
28781: PPUSH
28782: LD_INT 1
28784: PPUSH
28785: LD_VAR 0 14
28789: PPUSH
28790: CALL_OW 2
28794: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
28795: LD_VAR 0 14
28799: PPUSH
28800: LD_VAR 0 1
28804: PPUSH
28805: CALL_OW 250
28809: PPUSH
28810: LD_VAR 0 1
28814: PPUSH
28815: CALL_OW 251
28819: PPUSH
28820: LD_INT 10
28822: PPUSH
28823: LD_INT 0
28825: PPUSH
28826: CALL_OW 50
// continue ;
28830: GO 28731
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
28832: LD_VAR 0 12
28836: PUSH
28837: LD_INT 1
28839: ARRAY
28840: PPUSH
28841: CALL_OW 313
28845: PUSH
28846: LD_VAR 0 12
28850: PUSH
28851: LD_INT 1
28853: ARRAY
28854: PPUSH
28855: CALL_OW 266
28859: PUSH
28860: LD_INT 32
28862: PUSH
28863: LD_INT 31
28865: PUSH
28866: EMPTY
28867: LIST
28868: LIST
28869: IN
28870: AND
28871: PUSH
28872: LD_VAR 0 12
28876: PUSH
28877: LD_INT 1
28879: ARRAY
28880: PPUSH
28881: CALL_OW 313
28885: PUSH
28886: LD_INT 6
28888: EQUAL
28889: OR
28890: IFFALSE 28910
// f := Delete ( f , 1 ) ;
28892: LD_ADDR_VAR 0 12
28896: PUSH
28897: LD_VAR 0 12
28901: PPUSH
28902: LD_INT 1
28904: PPUSH
28905: CALL_OW 3
28909: ST_TO_ADDR
// if not f then
28910: LD_VAR 0 12
28914: NOT
28915: IFFALSE 28933
// begin x := x + 2 ;
28917: LD_ADDR_VAR 0 13
28921: PUSH
28922: LD_VAR 0 13
28926: PUSH
28927: LD_INT 2
28929: PLUS
28930: ST_TO_ADDR
// continue ;
28931: GO 28731
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
28933: LD_VAR 0 12
28937: PUSH
28938: LD_INT 1
28940: ARRAY
28941: PPUSH
28942: CALL_OW 266
28946: PUSH
28947: LD_INT 5
28949: EQUAL
28950: IFFALSE 29024
// begin if UnitsInside ( f [ 1 ] ) < 3 then
28952: LD_VAR 0 12
28956: PUSH
28957: LD_INT 1
28959: ARRAY
28960: PPUSH
28961: CALL_OW 313
28965: PUSH
28966: LD_INT 3
28968: LESS
28969: IFFALSE 29005
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
28971: LD_INT 0
28973: PPUSH
28974: LD_INT 5
28976: PUSH
28977: LD_INT 8
28979: PUSH
28980: LD_INT 9
28982: PUSH
28983: EMPTY
28984: LIST
28985: LIST
28986: LIST
28987: PUSH
28988: LD_VAR 0 17
28992: ARRAY
28993: PPUSH
28994: LD_VAR 0 4
28998: PPUSH
28999: CALL_OW 380
29003: GO 29022
// PrepareHuman ( false , i , skill ) ;
29005: LD_INT 0
29007: PPUSH
29008: LD_VAR 0 8
29012: PPUSH
29013: LD_VAR 0 4
29017: PPUSH
29018: CALL_OW 380
// end else
29022: GO 29041
// PrepareHuman ( false , i , skill ) ;
29024: LD_INT 0
29026: PPUSH
29027: LD_VAR 0 8
29031: PPUSH
29032: LD_VAR 0 4
29036: PPUSH
29037: CALL_OW 380
// un := CreateHuman ;
29041: LD_ADDR_VAR 0 14
29045: PUSH
29046: CALL_OW 44
29050: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29051: LD_ADDR_VAR 0 7
29055: PUSH
29056: LD_VAR 0 7
29060: PPUSH
29061: LD_INT 1
29063: PPUSH
29064: LD_VAR 0 14
29068: PPUSH
29069: CALL_OW 2
29073: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
29074: LD_VAR 0 14
29078: PPUSH
29079: LD_VAR 0 12
29083: PUSH
29084: LD_INT 1
29086: ARRAY
29087: PPUSH
29088: CALL_OW 52
// end ;
29092: GO 28731
29094: POP
29095: POP
// end ;
29096: GO 28033
29098: POP
29099: POP
// result := result ^ buildings ;
29100: LD_ADDR_VAR 0 7
29104: PUSH
29105: LD_VAR 0 7
29109: PUSH
29110: LD_VAR 0 18
29114: ADD
29115: ST_TO_ADDR
// end else
29116: GO 29259
// begin for i = 1 to personel do
29118: LD_ADDR_VAR 0 8
29122: PUSH
29123: DOUBLE
29124: LD_INT 1
29126: DEC
29127: ST_TO_ADDR
29128: LD_VAR 0 6
29132: PUSH
29133: FOR_TO
29134: IFFALSE 29257
// begin if i > 4 then
29136: LD_VAR 0 8
29140: PUSH
29141: LD_INT 4
29143: GREATER
29144: IFFALSE 29148
// break ;
29146: GO 29257
// x := personel [ i ] ;
29148: LD_ADDR_VAR 0 13
29152: PUSH
29153: LD_VAR 0 6
29157: PUSH
29158: LD_VAR 0 8
29162: ARRAY
29163: ST_TO_ADDR
// if x = - 1 then
29164: LD_VAR 0 13
29168: PUSH
29169: LD_INT 1
29171: NEG
29172: EQUAL
29173: IFFALSE 29177
// continue ;
29175: GO 29133
// PrepareHuman ( false , i , skill ) ;
29177: LD_INT 0
29179: PPUSH
29180: LD_VAR 0 8
29184: PPUSH
29185: LD_VAR 0 4
29189: PPUSH
29190: CALL_OW 380
// un := CreateHuman ;
29194: LD_ADDR_VAR 0 14
29198: PUSH
29199: CALL_OW 44
29203: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
29204: LD_VAR 0 14
29208: PPUSH
29209: LD_VAR 0 1
29213: PPUSH
29214: CALL_OW 250
29218: PPUSH
29219: LD_VAR 0 1
29223: PPUSH
29224: CALL_OW 251
29228: PPUSH
29229: LD_INT 10
29231: PPUSH
29232: LD_INT 0
29234: PPUSH
29235: CALL_OW 50
// result := result ^ un ;
29239: LD_ADDR_VAR 0 7
29243: PUSH
29244: LD_VAR 0 7
29248: PUSH
29249: LD_VAR 0 14
29253: ADD
29254: ST_TO_ADDR
// end ;
29255: GO 29133
29257: POP
29258: POP
// end ; end ;
29259: LD_VAR 0 7
29263: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
29264: LD_INT 0
29266: PPUSH
29267: PPUSH
29268: PPUSH
29269: PPUSH
29270: PPUSH
29271: PPUSH
29272: PPUSH
29273: PPUSH
29274: PPUSH
29275: PPUSH
29276: PPUSH
29277: PPUSH
29278: PPUSH
29279: PPUSH
29280: PPUSH
29281: PPUSH
// result := false ;
29282: LD_ADDR_VAR 0 3
29286: PUSH
29287: LD_INT 0
29289: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
29290: LD_VAR 0 1
29294: NOT
29295: PUSH
29296: LD_VAR 0 1
29300: PPUSH
29301: CALL_OW 266
29305: PUSH
29306: LD_INT 32
29308: PUSH
29309: LD_INT 33
29311: PUSH
29312: EMPTY
29313: LIST
29314: LIST
29315: IN
29316: NOT
29317: OR
29318: IFFALSE 29322
// exit ;
29320: GO 30458
// nat := GetNation ( tower ) ;
29322: LD_ADDR_VAR 0 12
29326: PUSH
29327: LD_VAR 0 1
29331: PPUSH
29332: CALL_OW 248
29336: ST_TO_ADDR
// side := GetSide ( tower ) ;
29337: LD_ADDR_VAR 0 16
29341: PUSH
29342: LD_VAR 0 1
29346: PPUSH
29347: CALL_OW 255
29351: ST_TO_ADDR
// x := GetX ( tower ) ;
29352: LD_ADDR_VAR 0 10
29356: PUSH
29357: LD_VAR 0 1
29361: PPUSH
29362: CALL_OW 250
29366: ST_TO_ADDR
// y := GetY ( tower ) ;
29367: LD_ADDR_VAR 0 11
29371: PUSH
29372: LD_VAR 0 1
29376: PPUSH
29377: CALL_OW 251
29381: ST_TO_ADDR
// if not x or not y then
29382: LD_VAR 0 10
29386: NOT
29387: PUSH
29388: LD_VAR 0 11
29392: NOT
29393: OR
29394: IFFALSE 29398
// exit ;
29396: GO 30458
// weapon := 0 ;
29398: LD_ADDR_VAR 0 18
29402: PUSH
29403: LD_INT 0
29405: ST_TO_ADDR
// fac_list := [ ] ;
29406: LD_ADDR_VAR 0 17
29410: PUSH
29411: EMPTY
29412: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
29413: LD_ADDR_VAR 0 6
29417: PUSH
29418: LD_VAR 0 1
29422: PPUSH
29423: CALL_OW 274
29427: PPUSH
29428: LD_VAR 0 2
29432: PPUSH
29433: CALL 27036 0 2
29437: PPUSH
29438: LD_INT 30
29440: PUSH
29441: LD_INT 3
29443: PUSH
29444: EMPTY
29445: LIST
29446: LIST
29447: PPUSH
29448: CALL_OW 72
29452: ST_TO_ADDR
// if not factories then
29453: LD_VAR 0 6
29457: NOT
29458: IFFALSE 29462
// exit ;
29460: GO 30458
// for i in factories do
29462: LD_ADDR_VAR 0 8
29466: PUSH
29467: LD_VAR 0 6
29471: PUSH
29472: FOR_IN
29473: IFFALSE 29498
// fac_list := fac_list union AvailableWeaponList ( i ) ;
29475: LD_ADDR_VAR 0 17
29479: PUSH
29480: LD_VAR 0 17
29484: PUSH
29485: LD_VAR 0 8
29489: PPUSH
29490: CALL_OW 478
29494: UNION
29495: ST_TO_ADDR
29496: GO 29472
29498: POP
29499: POP
// if not fac_list then
29500: LD_VAR 0 17
29504: NOT
29505: IFFALSE 29509
// exit ;
29507: GO 30458
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
29509: LD_ADDR_VAR 0 5
29513: PUSH
29514: LD_INT 4
29516: PUSH
29517: LD_INT 5
29519: PUSH
29520: LD_INT 9
29522: PUSH
29523: LD_INT 10
29525: PUSH
29526: LD_INT 6
29528: PUSH
29529: LD_INT 7
29531: PUSH
29532: LD_INT 11
29534: PUSH
29535: EMPTY
29536: LIST
29537: LIST
29538: LIST
29539: LIST
29540: LIST
29541: LIST
29542: LIST
29543: PUSH
29544: LD_INT 27
29546: PUSH
29547: LD_INT 28
29549: PUSH
29550: LD_INT 26
29552: PUSH
29553: LD_INT 30
29555: PUSH
29556: EMPTY
29557: LIST
29558: LIST
29559: LIST
29560: LIST
29561: PUSH
29562: LD_INT 43
29564: PUSH
29565: LD_INT 44
29567: PUSH
29568: LD_INT 46
29570: PUSH
29571: LD_INT 45
29573: PUSH
29574: LD_INT 47
29576: PUSH
29577: LD_INT 49
29579: PUSH
29580: EMPTY
29581: LIST
29582: LIST
29583: LIST
29584: LIST
29585: LIST
29586: LIST
29587: PUSH
29588: EMPTY
29589: LIST
29590: LIST
29591: LIST
29592: PUSH
29593: LD_VAR 0 12
29597: ARRAY
29598: ST_TO_ADDR
// for i in list do
29599: LD_ADDR_VAR 0 8
29603: PUSH
29604: LD_VAR 0 5
29608: PUSH
29609: FOR_IN
29610: IFFALSE 29643
// if not i in fac_list then
29612: LD_VAR 0 8
29616: PUSH
29617: LD_VAR 0 17
29621: IN
29622: NOT
29623: IFFALSE 29641
// list := list diff i ;
29625: LD_ADDR_VAR 0 5
29629: PUSH
29630: LD_VAR 0 5
29634: PUSH
29635: LD_VAR 0 8
29639: DIFF
29640: ST_TO_ADDR
29641: GO 29609
29643: POP
29644: POP
// if not list then
29645: LD_VAR 0 5
29649: NOT
29650: IFFALSE 29654
// exit ;
29652: GO 30458
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
29654: LD_VAR 0 12
29658: PUSH
29659: LD_INT 3
29661: EQUAL
29662: PUSH
29663: LD_INT 49
29665: PUSH
29666: LD_VAR 0 5
29670: IN
29671: AND
29672: PUSH
29673: LD_INT 31
29675: PPUSH
29676: LD_VAR 0 16
29680: PPUSH
29681: CALL_OW 321
29685: PUSH
29686: LD_INT 2
29688: EQUAL
29689: AND
29690: IFFALSE 29750
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
29692: LD_INT 22
29694: PUSH
29695: LD_VAR 0 16
29699: PUSH
29700: EMPTY
29701: LIST
29702: LIST
29703: PUSH
29704: LD_INT 35
29706: PUSH
29707: LD_INT 49
29709: PUSH
29710: EMPTY
29711: LIST
29712: LIST
29713: PUSH
29714: LD_INT 91
29716: PUSH
29717: LD_VAR 0 1
29721: PUSH
29722: LD_INT 10
29724: PUSH
29725: EMPTY
29726: LIST
29727: LIST
29728: LIST
29729: PUSH
29730: EMPTY
29731: LIST
29732: LIST
29733: LIST
29734: PPUSH
29735: CALL_OW 69
29739: NOT
29740: IFFALSE 29750
// weapon := ru_time_lapser ;
29742: LD_ADDR_VAR 0 18
29746: PUSH
29747: LD_INT 49
29749: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
29750: LD_VAR 0 12
29754: PUSH
29755: LD_INT 1
29757: PUSH
29758: LD_INT 2
29760: PUSH
29761: EMPTY
29762: LIST
29763: LIST
29764: IN
29765: PUSH
29766: LD_INT 11
29768: PUSH
29769: LD_VAR 0 5
29773: IN
29774: PUSH
29775: LD_INT 30
29777: PUSH
29778: LD_VAR 0 5
29782: IN
29783: OR
29784: AND
29785: PUSH
29786: LD_INT 6
29788: PPUSH
29789: LD_VAR 0 16
29793: PPUSH
29794: CALL_OW 321
29798: PUSH
29799: LD_INT 2
29801: EQUAL
29802: AND
29803: IFFALSE 29968
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
29805: LD_INT 22
29807: PUSH
29808: LD_VAR 0 16
29812: PUSH
29813: EMPTY
29814: LIST
29815: LIST
29816: PUSH
29817: LD_INT 2
29819: PUSH
29820: LD_INT 35
29822: PUSH
29823: LD_INT 11
29825: PUSH
29826: EMPTY
29827: LIST
29828: LIST
29829: PUSH
29830: LD_INT 35
29832: PUSH
29833: LD_INT 30
29835: PUSH
29836: EMPTY
29837: LIST
29838: LIST
29839: PUSH
29840: EMPTY
29841: LIST
29842: LIST
29843: LIST
29844: PUSH
29845: LD_INT 91
29847: PUSH
29848: LD_VAR 0 1
29852: PUSH
29853: LD_INT 18
29855: PUSH
29856: EMPTY
29857: LIST
29858: LIST
29859: LIST
29860: PUSH
29861: EMPTY
29862: LIST
29863: LIST
29864: LIST
29865: PPUSH
29866: CALL_OW 69
29870: NOT
29871: PUSH
29872: LD_INT 22
29874: PUSH
29875: LD_VAR 0 16
29879: PUSH
29880: EMPTY
29881: LIST
29882: LIST
29883: PUSH
29884: LD_INT 2
29886: PUSH
29887: LD_INT 30
29889: PUSH
29890: LD_INT 32
29892: PUSH
29893: EMPTY
29894: LIST
29895: LIST
29896: PUSH
29897: LD_INT 30
29899: PUSH
29900: LD_INT 33
29902: PUSH
29903: EMPTY
29904: LIST
29905: LIST
29906: PUSH
29907: EMPTY
29908: LIST
29909: LIST
29910: LIST
29911: PUSH
29912: LD_INT 91
29914: PUSH
29915: LD_VAR 0 1
29919: PUSH
29920: LD_INT 12
29922: PUSH
29923: EMPTY
29924: LIST
29925: LIST
29926: LIST
29927: PUSH
29928: EMPTY
29929: LIST
29930: LIST
29931: LIST
29932: PUSH
29933: EMPTY
29934: LIST
29935: PPUSH
29936: CALL_OW 69
29940: PUSH
29941: LD_INT 2
29943: GREATER
29944: AND
29945: IFFALSE 29968
// weapon := [ us_radar , ar_radar ] [ nat ] ;
29947: LD_ADDR_VAR 0 18
29951: PUSH
29952: LD_INT 11
29954: PUSH
29955: LD_INT 30
29957: PUSH
29958: EMPTY
29959: LIST
29960: LIST
29961: PUSH
29962: LD_VAR 0 12
29966: ARRAY
29967: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
29968: LD_VAR 0 18
29972: NOT
29973: PUSH
29974: LD_INT 40
29976: PPUSH
29977: LD_VAR 0 16
29981: PPUSH
29982: CALL_OW 321
29986: PUSH
29987: LD_INT 2
29989: EQUAL
29990: AND
29991: PUSH
29992: LD_INT 7
29994: PUSH
29995: LD_VAR 0 5
29999: IN
30000: PUSH
30001: LD_INT 28
30003: PUSH
30004: LD_VAR 0 5
30008: IN
30009: OR
30010: PUSH
30011: LD_INT 45
30013: PUSH
30014: LD_VAR 0 5
30018: IN
30019: OR
30020: AND
30021: IFFALSE 30275
// begin hex := GetHexInfo ( x , y ) ;
30023: LD_ADDR_VAR 0 4
30027: PUSH
30028: LD_VAR 0 10
30032: PPUSH
30033: LD_VAR 0 11
30037: PPUSH
30038: CALL_OW 546
30042: ST_TO_ADDR
// if hex [ 1 ] then
30043: LD_VAR 0 4
30047: PUSH
30048: LD_INT 1
30050: ARRAY
30051: IFFALSE 30055
// exit ;
30053: GO 30458
// height := hex [ 2 ] ;
30055: LD_ADDR_VAR 0 15
30059: PUSH
30060: LD_VAR 0 4
30064: PUSH
30065: LD_INT 2
30067: ARRAY
30068: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
30069: LD_ADDR_VAR 0 14
30073: PUSH
30074: LD_INT 0
30076: PUSH
30077: LD_INT 2
30079: PUSH
30080: LD_INT 3
30082: PUSH
30083: LD_INT 5
30085: PUSH
30086: EMPTY
30087: LIST
30088: LIST
30089: LIST
30090: LIST
30091: ST_TO_ADDR
// for i in tmp do
30092: LD_ADDR_VAR 0 8
30096: PUSH
30097: LD_VAR 0 14
30101: PUSH
30102: FOR_IN
30103: IFFALSE 30273
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
30105: LD_ADDR_VAR 0 9
30109: PUSH
30110: LD_VAR 0 10
30114: PPUSH
30115: LD_VAR 0 8
30119: PPUSH
30120: LD_INT 5
30122: PPUSH
30123: CALL_OW 272
30127: PUSH
30128: LD_VAR 0 11
30132: PPUSH
30133: LD_VAR 0 8
30137: PPUSH
30138: LD_INT 5
30140: PPUSH
30141: CALL_OW 273
30145: PUSH
30146: EMPTY
30147: LIST
30148: LIST
30149: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
30150: LD_VAR 0 9
30154: PUSH
30155: LD_INT 1
30157: ARRAY
30158: PPUSH
30159: LD_VAR 0 9
30163: PUSH
30164: LD_INT 2
30166: ARRAY
30167: PPUSH
30168: CALL_OW 488
30172: IFFALSE 30271
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
30174: LD_ADDR_VAR 0 4
30178: PUSH
30179: LD_VAR 0 9
30183: PUSH
30184: LD_INT 1
30186: ARRAY
30187: PPUSH
30188: LD_VAR 0 9
30192: PUSH
30193: LD_INT 2
30195: ARRAY
30196: PPUSH
30197: CALL_OW 546
30201: ST_TO_ADDR
// if hex [ 1 ] then
30202: LD_VAR 0 4
30206: PUSH
30207: LD_INT 1
30209: ARRAY
30210: IFFALSE 30214
// continue ;
30212: GO 30102
// h := hex [ 2 ] ;
30214: LD_ADDR_VAR 0 13
30218: PUSH
30219: LD_VAR 0 4
30223: PUSH
30224: LD_INT 2
30226: ARRAY
30227: ST_TO_ADDR
// if h + 7 < height then
30228: LD_VAR 0 13
30232: PUSH
30233: LD_INT 7
30235: PLUS
30236: PUSH
30237: LD_VAR 0 15
30241: LESS
30242: IFFALSE 30271
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
30244: LD_ADDR_VAR 0 18
30248: PUSH
30249: LD_INT 7
30251: PUSH
30252: LD_INT 28
30254: PUSH
30255: LD_INT 45
30257: PUSH
30258: EMPTY
30259: LIST
30260: LIST
30261: LIST
30262: PUSH
30263: LD_VAR 0 12
30267: ARRAY
30268: ST_TO_ADDR
// break ;
30269: GO 30273
// end ; end ; end ;
30271: GO 30102
30273: POP
30274: POP
// end ; if not weapon then
30275: LD_VAR 0 18
30279: NOT
30280: IFFALSE 30340
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
30282: LD_ADDR_VAR 0 5
30286: PUSH
30287: LD_VAR 0 5
30291: PUSH
30292: LD_INT 11
30294: PUSH
30295: LD_INT 30
30297: PUSH
30298: LD_INT 49
30300: PUSH
30301: EMPTY
30302: LIST
30303: LIST
30304: LIST
30305: DIFF
30306: ST_TO_ADDR
// if not list then
30307: LD_VAR 0 5
30311: NOT
30312: IFFALSE 30316
// exit ;
30314: GO 30458
// weapon := list [ rand ( 1 , list ) ] ;
30316: LD_ADDR_VAR 0 18
30320: PUSH
30321: LD_VAR 0 5
30325: PUSH
30326: LD_INT 1
30328: PPUSH
30329: LD_VAR 0 5
30333: PPUSH
30334: CALL_OW 12
30338: ARRAY
30339: ST_TO_ADDR
// end ; if weapon then
30340: LD_VAR 0 18
30344: IFFALSE 30458
// begin tmp := CostOfWeapon ( weapon ) ;
30346: LD_ADDR_VAR 0 14
30350: PUSH
30351: LD_VAR 0 18
30355: PPUSH
30356: CALL_OW 451
30360: ST_TO_ADDR
// j := GetBase ( tower ) ;
30361: LD_ADDR_VAR 0 9
30365: PUSH
30366: LD_VAR 0 1
30370: PPUSH
30371: CALL_OW 274
30375: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
30376: LD_VAR 0 9
30380: PPUSH
30381: LD_INT 1
30383: PPUSH
30384: CALL_OW 275
30388: PUSH
30389: LD_VAR 0 14
30393: PUSH
30394: LD_INT 1
30396: ARRAY
30397: GREATEREQUAL
30398: PUSH
30399: LD_VAR 0 9
30403: PPUSH
30404: LD_INT 2
30406: PPUSH
30407: CALL_OW 275
30411: PUSH
30412: LD_VAR 0 14
30416: PUSH
30417: LD_INT 2
30419: ARRAY
30420: GREATEREQUAL
30421: AND
30422: PUSH
30423: LD_VAR 0 9
30427: PPUSH
30428: LD_INT 3
30430: PPUSH
30431: CALL_OW 275
30435: PUSH
30436: LD_VAR 0 14
30440: PUSH
30441: LD_INT 3
30443: ARRAY
30444: GREATEREQUAL
30445: AND
30446: IFFALSE 30458
// result := weapon ;
30448: LD_ADDR_VAR 0 3
30452: PUSH
30453: LD_VAR 0 18
30457: ST_TO_ADDR
// end ; end ;
30458: LD_VAR 0 3
30462: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
30463: LD_INT 0
30465: PPUSH
30466: PPUSH
// result := true ;
30467: LD_ADDR_VAR 0 3
30471: PUSH
30472: LD_INT 1
30474: ST_TO_ADDR
// if array1 = array2 then
30475: LD_VAR 0 1
30479: PUSH
30480: LD_VAR 0 2
30484: EQUAL
30485: IFFALSE 30545
// begin for i = 1 to array1 do
30487: LD_ADDR_VAR 0 4
30491: PUSH
30492: DOUBLE
30493: LD_INT 1
30495: DEC
30496: ST_TO_ADDR
30497: LD_VAR 0 1
30501: PUSH
30502: FOR_TO
30503: IFFALSE 30541
// if array1 [ i ] <> array2 [ i ] then
30505: LD_VAR 0 1
30509: PUSH
30510: LD_VAR 0 4
30514: ARRAY
30515: PUSH
30516: LD_VAR 0 2
30520: PUSH
30521: LD_VAR 0 4
30525: ARRAY
30526: NONEQUAL
30527: IFFALSE 30539
// begin result := false ;
30529: LD_ADDR_VAR 0 3
30533: PUSH
30534: LD_INT 0
30536: ST_TO_ADDR
// break ;
30537: GO 30541
// end ;
30539: GO 30502
30541: POP
30542: POP
// end else
30543: GO 30553
// result := false ;
30545: LD_ADDR_VAR 0 3
30549: PUSH
30550: LD_INT 0
30552: ST_TO_ADDR
// end ;
30553: LD_VAR 0 3
30557: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
30558: LD_INT 0
30560: PPUSH
30561: PPUSH
30562: PPUSH
// pom := GetBase ( fac ) ;
30563: LD_ADDR_VAR 0 5
30567: PUSH
30568: LD_VAR 0 1
30572: PPUSH
30573: CALL_OW 274
30577: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
30578: LD_ADDR_VAR 0 4
30582: PUSH
30583: LD_VAR 0 2
30587: PUSH
30588: LD_INT 1
30590: ARRAY
30591: PPUSH
30592: LD_VAR 0 2
30596: PUSH
30597: LD_INT 2
30599: ARRAY
30600: PPUSH
30601: LD_VAR 0 2
30605: PUSH
30606: LD_INT 3
30608: ARRAY
30609: PPUSH
30610: LD_VAR 0 2
30614: PUSH
30615: LD_INT 4
30617: ARRAY
30618: PPUSH
30619: CALL_OW 449
30623: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
30624: LD_ADDR_VAR 0 3
30628: PUSH
30629: LD_VAR 0 5
30633: PPUSH
30634: LD_INT 1
30636: PPUSH
30637: CALL_OW 275
30641: PUSH
30642: LD_VAR 0 4
30646: PUSH
30647: LD_INT 1
30649: ARRAY
30650: GREATEREQUAL
30651: PUSH
30652: LD_VAR 0 5
30656: PPUSH
30657: LD_INT 2
30659: PPUSH
30660: CALL_OW 275
30664: PUSH
30665: LD_VAR 0 4
30669: PUSH
30670: LD_INT 2
30672: ARRAY
30673: GREATEREQUAL
30674: AND
30675: PUSH
30676: LD_VAR 0 5
30680: PPUSH
30681: LD_INT 3
30683: PPUSH
30684: CALL_OW 275
30688: PUSH
30689: LD_VAR 0 4
30693: PUSH
30694: LD_INT 3
30696: ARRAY
30697: GREATEREQUAL
30698: AND
30699: ST_TO_ADDR
// end ;
30700: LD_VAR 0 3
30704: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
30705: LD_INT 0
30707: PPUSH
30708: PPUSH
30709: PPUSH
30710: PPUSH
// pom := GetBase ( building ) ;
30711: LD_ADDR_VAR 0 3
30715: PUSH
30716: LD_VAR 0 1
30720: PPUSH
30721: CALL_OW 274
30725: ST_TO_ADDR
// if not pom then
30726: LD_VAR 0 3
30730: NOT
30731: IFFALSE 30735
// exit ;
30733: GO 30905
// btype := GetBType ( building ) ;
30735: LD_ADDR_VAR 0 5
30739: PUSH
30740: LD_VAR 0 1
30744: PPUSH
30745: CALL_OW 266
30749: ST_TO_ADDR
// if btype = b_armoury then
30750: LD_VAR 0 5
30754: PUSH
30755: LD_INT 4
30757: EQUAL
30758: IFFALSE 30768
// btype := b_barracks ;
30760: LD_ADDR_VAR 0 5
30764: PUSH
30765: LD_INT 5
30767: ST_TO_ADDR
// if btype = b_depot then
30768: LD_VAR 0 5
30772: PUSH
30773: LD_INT 0
30775: EQUAL
30776: IFFALSE 30786
// btype := b_warehouse ;
30778: LD_ADDR_VAR 0 5
30782: PUSH
30783: LD_INT 1
30785: ST_TO_ADDR
// if btype = b_workshop then
30786: LD_VAR 0 5
30790: PUSH
30791: LD_INT 2
30793: EQUAL
30794: IFFALSE 30804
// btype := b_factory ;
30796: LD_ADDR_VAR 0 5
30800: PUSH
30801: LD_INT 3
30803: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
30804: LD_ADDR_VAR 0 4
30808: PUSH
30809: LD_VAR 0 5
30813: PPUSH
30814: LD_VAR 0 1
30818: PPUSH
30819: CALL_OW 248
30823: PPUSH
30824: CALL_OW 450
30828: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
30829: LD_ADDR_VAR 0 2
30833: PUSH
30834: LD_VAR 0 3
30838: PPUSH
30839: LD_INT 1
30841: PPUSH
30842: CALL_OW 275
30846: PUSH
30847: LD_VAR 0 4
30851: PUSH
30852: LD_INT 1
30854: ARRAY
30855: GREATEREQUAL
30856: PUSH
30857: LD_VAR 0 3
30861: PPUSH
30862: LD_INT 2
30864: PPUSH
30865: CALL_OW 275
30869: PUSH
30870: LD_VAR 0 4
30874: PUSH
30875: LD_INT 2
30877: ARRAY
30878: GREATEREQUAL
30879: AND
30880: PUSH
30881: LD_VAR 0 3
30885: PPUSH
30886: LD_INT 3
30888: PPUSH
30889: CALL_OW 275
30893: PUSH
30894: LD_VAR 0 4
30898: PUSH
30899: LD_INT 3
30901: ARRAY
30902: GREATEREQUAL
30903: AND
30904: ST_TO_ADDR
// end ;
30905: LD_VAR 0 2
30909: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
30910: LD_INT 0
30912: PPUSH
30913: PPUSH
30914: PPUSH
// pom := GetBase ( building ) ;
30915: LD_ADDR_VAR 0 4
30919: PUSH
30920: LD_VAR 0 1
30924: PPUSH
30925: CALL_OW 274
30929: ST_TO_ADDR
// if not pom then
30930: LD_VAR 0 4
30934: NOT
30935: IFFALSE 30939
// exit ;
30937: GO 31040
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
30939: LD_ADDR_VAR 0 5
30943: PUSH
30944: LD_VAR 0 2
30948: PPUSH
30949: LD_VAR 0 1
30953: PPUSH
30954: CALL_OW 248
30958: PPUSH
30959: CALL_OW 450
30963: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
30964: LD_ADDR_VAR 0 3
30968: PUSH
30969: LD_VAR 0 4
30973: PPUSH
30974: LD_INT 1
30976: PPUSH
30977: CALL_OW 275
30981: PUSH
30982: LD_VAR 0 5
30986: PUSH
30987: LD_INT 1
30989: ARRAY
30990: GREATEREQUAL
30991: PUSH
30992: LD_VAR 0 4
30996: PPUSH
30997: LD_INT 2
30999: PPUSH
31000: CALL_OW 275
31004: PUSH
31005: LD_VAR 0 5
31009: PUSH
31010: LD_INT 2
31012: ARRAY
31013: GREATEREQUAL
31014: AND
31015: PUSH
31016: LD_VAR 0 4
31020: PPUSH
31021: LD_INT 3
31023: PPUSH
31024: CALL_OW 275
31028: PUSH
31029: LD_VAR 0 5
31033: PUSH
31034: LD_INT 3
31036: ARRAY
31037: GREATEREQUAL
31038: AND
31039: ST_TO_ADDR
// end ;
31040: LD_VAR 0 3
31044: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
31045: LD_INT 0
31047: PPUSH
31048: PPUSH
31049: PPUSH
31050: PPUSH
31051: PPUSH
31052: PPUSH
31053: PPUSH
31054: PPUSH
31055: PPUSH
31056: PPUSH
// result := false ;
31057: LD_ADDR_VAR 0 6
31061: PUSH
31062: LD_INT 0
31064: ST_TO_ADDR
// if not base or not btype or not x or not y then
31065: LD_VAR 0 1
31069: NOT
31070: PUSH
31071: LD_VAR 0 2
31075: NOT
31076: OR
31077: PUSH
31078: LD_VAR 0 3
31082: NOT
31083: OR
31084: PUSH
31085: LD_VAR 0 4
31089: NOT
31090: OR
31091: IFFALSE 31095
// exit ;
31093: GO 31704
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
31095: LD_ADDR_VAR 0 12
31099: PUSH
31100: LD_VAR 0 2
31104: PPUSH
31105: LD_VAR 0 3
31109: PPUSH
31110: LD_VAR 0 4
31114: PPUSH
31115: LD_VAR 0 5
31119: PPUSH
31120: LD_VAR 0 1
31124: PUSH
31125: LD_INT 1
31127: ARRAY
31128: PPUSH
31129: CALL_OW 248
31133: PPUSH
31134: LD_INT 0
31136: PPUSH
31137: CALL 32541 0 6
31141: ST_TO_ADDR
// if not hexes then
31142: LD_VAR 0 12
31146: NOT
31147: IFFALSE 31151
// exit ;
31149: GO 31704
// for i = 1 to hexes do
31151: LD_ADDR_VAR 0 7
31155: PUSH
31156: DOUBLE
31157: LD_INT 1
31159: DEC
31160: ST_TO_ADDR
31161: LD_VAR 0 12
31165: PUSH
31166: FOR_TO
31167: IFFALSE 31702
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
31169: LD_ADDR_VAR 0 11
31173: PUSH
31174: LD_VAR 0 12
31178: PUSH
31179: LD_VAR 0 7
31183: ARRAY
31184: PUSH
31185: LD_INT 1
31187: ARRAY
31188: PPUSH
31189: LD_VAR 0 12
31193: PUSH
31194: LD_VAR 0 7
31198: ARRAY
31199: PUSH
31200: LD_INT 2
31202: ARRAY
31203: PPUSH
31204: CALL_OW 428
31208: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
31209: LD_VAR 0 12
31213: PUSH
31214: LD_VAR 0 7
31218: ARRAY
31219: PUSH
31220: LD_INT 1
31222: ARRAY
31223: PPUSH
31224: LD_VAR 0 12
31228: PUSH
31229: LD_VAR 0 7
31233: ARRAY
31234: PUSH
31235: LD_INT 2
31237: ARRAY
31238: PPUSH
31239: CALL_OW 351
31243: PUSH
31244: LD_VAR 0 12
31248: PUSH
31249: LD_VAR 0 7
31253: ARRAY
31254: PUSH
31255: LD_INT 1
31257: ARRAY
31258: PPUSH
31259: LD_VAR 0 12
31263: PUSH
31264: LD_VAR 0 7
31268: ARRAY
31269: PUSH
31270: LD_INT 2
31272: ARRAY
31273: PPUSH
31274: CALL_OW 488
31278: NOT
31279: OR
31280: PUSH
31281: LD_VAR 0 11
31285: PPUSH
31286: CALL_OW 247
31290: PUSH
31291: LD_INT 3
31293: EQUAL
31294: OR
31295: IFFALSE 31301
// exit ;
31297: POP
31298: POP
31299: GO 31704
// if not tmp or not tmp in base then
31301: LD_VAR 0 11
31305: NOT
31306: PUSH
31307: LD_VAR 0 11
31311: PUSH
31312: LD_VAR 0 1
31316: IN
31317: NOT
31318: OR
31319: IFFALSE 31323
// continue ;
31321: GO 31166
// result := true ;
31323: LD_ADDR_VAR 0 6
31327: PUSH
31328: LD_INT 1
31330: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31331: LD_ADDR_VAR 0 15
31335: PUSH
31336: LD_VAR 0 1
31340: PPUSH
31341: LD_INT 22
31343: PUSH
31344: LD_VAR 0 11
31348: PPUSH
31349: CALL_OW 255
31353: PUSH
31354: EMPTY
31355: LIST
31356: LIST
31357: PUSH
31358: LD_INT 2
31360: PUSH
31361: LD_INT 30
31363: PUSH
31364: LD_INT 0
31366: PUSH
31367: EMPTY
31368: LIST
31369: LIST
31370: PUSH
31371: LD_INT 30
31373: PUSH
31374: LD_INT 1
31376: PUSH
31377: EMPTY
31378: LIST
31379: LIST
31380: PUSH
31381: EMPTY
31382: LIST
31383: LIST
31384: LIST
31385: PUSH
31386: EMPTY
31387: LIST
31388: LIST
31389: PPUSH
31390: CALL_OW 72
31394: ST_TO_ADDR
// if dep then
31395: LD_VAR 0 15
31399: IFFALSE 31535
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
31401: LD_ADDR_VAR 0 14
31405: PUSH
31406: LD_VAR 0 15
31410: PUSH
31411: LD_INT 1
31413: ARRAY
31414: PPUSH
31415: CALL_OW 250
31419: PPUSH
31420: LD_VAR 0 15
31424: PUSH
31425: LD_INT 1
31427: ARRAY
31428: PPUSH
31429: CALL_OW 254
31433: PPUSH
31434: LD_INT 5
31436: PPUSH
31437: CALL_OW 272
31441: PUSH
31442: LD_VAR 0 15
31446: PUSH
31447: LD_INT 1
31449: ARRAY
31450: PPUSH
31451: CALL_OW 251
31455: PPUSH
31456: LD_VAR 0 15
31460: PUSH
31461: LD_INT 1
31463: ARRAY
31464: PPUSH
31465: CALL_OW 254
31469: PPUSH
31470: LD_INT 5
31472: PPUSH
31473: CALL_OW 273
31477: PUSH
31478: EMPTY
31479: LIST
31480: LIST
31481: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
31482: LD_VAR 0 14
31486: PUSH
31487: LD_INT 1
31489: ARRAY
31490: PPUSH
31491: LD_VAR 0 14
31495: PUSH
31496: LD_INT 2
31498: ARRAY
31499: PPUSH
31500: CALL_OW 488
31504: IFFALSE 31535
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
31506: LD_VAR 0 11
31510: PPUSH
31511: LD_VAR 0 14
31515: PUSH
31516: LD_INT 1
31518: ARRAY
31519: PPUSH
31520: LD_VAR 0 14
31524: PUSH
31525: LD_INT 2
31527: ARRAY
31528: PPUSH
31529: CALL_OW 111
// continue ;
31533: GO 31166
// end ; end ; r := GetDir ( tmp ) ;
31535: LD_ADDR_VAR 0 13
31539: PUSH
31540: LD_VAR 0 11
31544: PPUSH
31545: CALL_OW 254
31549: ST_TO_ADDR
// if r = 5 then
31550: LD_VAR 0 13
31554: PUSH
31555: LD_INT 5
31557: EQUAL
31558: IFFALSE 31568
// r := 0 ;
31560: LD_ADDR_VAR 0 13
31564: PUSH
31565: LD_INT 0
31567: ST_TO_ADDR
// for j = r to 5 do
31568: LD_ADDR_VAR 0 8
31572: PUSH
31573: DOUBLE
31574: LD_VAR 0 13
31578: DEC
31579: ST_TO_ADDR
31580: LD_INT 5
31582: PUSH
31583: FOR_TO
31584: IFFALSE 31698
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
31586: LD_ADDR_VAR 0 9
31590: PUSH
31591: LD_VAR 0 11
31595: PPUSH
31596: CALL_OW 250
31600: PPUSH
31601: LD_VAR 0 8
31605: PPUSH
31606: LD_INT 2
31608: PPUSH
31609: CALL_OW 272
31613: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
31614: LD_ADDR_VAR 0 10
31618: PUSH
31619: LD_VAR 0 11
31623: PPUSH
31624: CALL_OW 251
31628: PPUSH
31629: LD_VAR 0 8
31633: PPUSH
31634: LD_INT 2
31636: PPUSH
31637: CALL_OW 273
31641: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
31642: LD_VAR 0 9
31646: PPUSH
31647: LD_VAR 0 10
31651: PPUSH
31652: CALL_OW 488
31656: PUSH
31657: LD_VAR 0 9
31661: PPUSH
31662: LD_VAR 0 10
31666: PPUSH
31667: CALL_OW 428
31671: NOT
31672: AND
31673: IFFALSE 31696
// begin ComMoveXY ( tmp , _x , _y ) ;
31675: LD_VAR 0 11
31679: PPUSH
31680: LD_VAR 0 9
31684: PPUSH
31685: LD_VAR 0 10
31689: PPUSH
31690: CALL_OW 111
// break ;
31694: GO 31698
// end ; end ;
31696: GO 31583
31698: POP
31699: POP
// end ;
31700: GO 31166
31702: POP
31703: POP
// end ;
31704: LD_VAR 0 6
31708: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
31709: LD_INT 0
31711: PPUSH
31712: PPUSH
31713: PPUSH
31714: PPUSH
31715: PPUSH
31716: PPUSH
31717: PPUSH
31718: PPUSH
31719: PPUSH
31720: PPUSH
// result := false ;
31721: LD_ADDR_VAR 0 6
31725: PUSH
31726: LD_INT 0
31728: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
31729: LD_VAR 0 1
31733: NOT
31734: PUSH
31735: LD_VAR 0 1
31739: PPUSH
31740: CALL_OW 266
31744: PUSH
31745: LD_INT 0
31747: PUSH
31748: LD_INT 1
31750: PUSH
31751: EMPTY
31752: LIST
31753: LIST
31754: IN
31755: NOT
31756: OR
31757: PUSH
31758: LD_VAR 0 2
31762: NOT
31763: OR
31764: PUSH
31765: LD_VAR 0 5
31769: PUSH
31770: LD_INT 0
31772: PUSH
31773: LD_INT 1
31775: PUSH
31776: LD_INT 2
31778: PUSH
31779: LD_INT 3
31781: PUSH
31782: LD_INT 4
31784: PUSH
31785: LD_INT 5
31787: PUSH
31788: EMPTY
31789: LIST
31790: LIST
31791: LIST
31792: LIST
31793: LIST
31794: LIST
31795: IN
31796: NOT
31797: OR
31798: PUSH
31799: LD_VAR 0 3
31803: PPUSH
31804: LD_VAR 0 4
31808: PPUSH
31809: CALL_OW 488
31813: NOT
31814: OR
31815: IFFALSE 31819
// exit ;
31817: GO 32536
// pom := GetBase ( depot ) ;
31819: LD_ADDR_VAR 0 10
31823: PUSH
31824: LD_VAR 0 1
31828: PPUSH
31829: CALL_OW 274
31833: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
31834: LD_ADDR_VAR 0 11
31838: PUSH
31839: LD_VAR 0 2
31843: PPUSH
31844: LD_VAR 0 1
31848: PPUSH
31849: CALL_OW 248
31853: PPUSH
31854: CALL_OW 450
31858: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
31859: LD_VAR 0 10
31863: PPUSH
31864: LD_INT 1
31866: PPUSH
31867: CALL_OW 275
31871: PUSH
31872: LD_VAR 0 11
31876: PUSH
31877: LD_INT 1
31879: ARRAY
31880: GREATEREQUAL
31881: PUSH
31882: LD_VAR 0 10
31886: PPUSH
31887: LD_INT 2
31889: PPUSH
31890: CALL_OW 275
31894: PUSH
31895: LD_VAR 0 11
31899: PUSH
31900: LD_INT 2
31902: ARRAY
31903: GREATEREQUAL
31904: AND
31905: PUSH
31906: LD_VAR 0 10
31910: PPUSH
31911: LD_INT 3
31913: PPUSH
31914: CALL_OW 275
31918: PUSH
31919: LD_VAR 0 11
31923: PUSH
31924: LD_INT 3
31926: ARRAY
31927: GREATEREQUAL
31928: AND
31929: NOT
31930: IFFALSE 31934
// exit ;
31932: GO 32536
// if GetBType ( depot ) = b_depot then
31934: LD_VAR 0 1
31938: PPUSH
31939: CALL_OW 266
31943: PUSH
31944: LD_INT 0
31946: EQUAL
31947: IFFALSE 31959
// dist := 28 else
31949: LD_ADDR_VAR 0 14
31953: PUSH
31954: LD_INT 28
31956: ST_TO_ADDR
31957: GO 31967
// dist := 36 ;
31959: LD_ADDR_VAR 0 14
31963: PUSH
31964: LD_INT 36
31966: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
31967: LD_VAR 0 1
31971: PPUSH
31972: LD_VAR 0 3
31976: PPUSH
31977: LD_VAR 0 4
31981: PPUSH
31982: CALL_OW 297
31986: PUSH
31987: LD_VAR 0 14
31991: GREATER
31992: IFFALSE 31996
// exit ;
31994: GO 32536
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
31996: LD_ADDR_VAR 0 12
32000: PUSH
32001: LD_VAR 0 2
32005: PPUSH
32006: LD_VAR 0 3
32010: PPUSH
32011: LD_VAR 0 4
32015: PPUSH
32016: LD_VAR 0 5
32020: PPUSH
32021: LD_VAR 0 1
32025: PPUSH
32026: CALL_OW 248
32030: PPUSH
32031: LD_INT 0
32033: PPUSH
32034: CALL 32541 0 6
32038: ST_TO_ADDR
// if not hexes then
32039: LD_VAR 0 12
32043: NOT
32044: IFFALSE 32048
// exit ;
32046: GO 32536
// hex := GetHexInfo ( x , y ) ;
32048: LD_ADDR_VAR 0 15
32052: PUSH
32053: LD_VAR 0 3
32057: PPUSH
32058: LD_VAR 0 4
32062: PPUSH
32063: CALL_OW 546
32067: ST_TO_ADDR
// if hex [ 1 ] then
32068: LD_VAR 0 15
32072: PUSH
32073: LD_INT 1
32075: ARRAY
32076: IFFALSE 32080
// exit ;
32078: GO 32536
// height := hex [ 2 ] ;
32080: LD_ADDR_VAR 0 13
32084: PUSH
32085: LD_VAR 0 15
32089: PUSH
32090: LD_INT 2
32092: ARRAY
32093: ST_TO_ADDR
// for i = 1 to hexes do
32094: LD_ADDR_VAR 0 7
32098: PUSH
32099: DOUBLE
32100: LD_INT 1
32102: DEC
32103: ST_TO_ADDR
32104: LD_VAR 0 12
32108: PUSH
32109: FOR_TO
32110: IFFALSE 32440
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
32112: LD_VAR 0 12
32116: PUSH
32117: LD_VAR 0 7
32121: ARRAY
32122: PUSH
32123: LD_INT 1
32125: ARRAY
32126: PPUSH
32127: LD_VAR 0 12
32131: PUSH
32132: LD_VAR 0 7
32136: ARRAY
32137: PUSH
32138: LD_INT 2
32140: ARRAY
32141: PPUSH
32142: CALL_OW 488
32146: NOT
32147: PUSH
32148: LD_VAR 0 12
32152: PUSH
32153: LD_VAR 0 7
32157: ARRAY
32158: PUSH
32159: LD_INT 1
32161: ARRAY
32162: PPUSH
32163: LD_VAR 0 12
32167: PUSH
32168: LD_VAR 0 7
32172: ARRAY
32173: PUSH
32174: LD_INT 2
32176: ARRAY
32177: PPUSH
32178: CALL_OW 428
32182: PUSH
32183: LD_INT 0
32185: GREATER
32186: OR
32187: PUSH
32188: LD_VAR 0 12
32192: PUSH
32193: LD_VAR 0 7
32197: ARRAY
32198: PUSH
32199: LD_INT 1
32201: ARRAY
32202: PPUSH
32203: LD_VAR 0 12
32207: PUSH
32208: LD_VAR 0 7
32212: ARRAY
32213: PUSH
32214: LD_INT 2
32216: ARRAY
32217: PPUSH
32218: CALL_OW 351
32222: OR
32223: IFFALSE 32229
// exit ;
32225: POP
32226: POP
32227: GO 32536
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
32229: LD_ADDR_VAR 0 8
32233: PUSH
32234: LD_VAR 0 12
32238: PUSH
32239: LD_VAR 0 7
32243: ARRAY
32244: PUSH
32245: LD_INT 1
32247: ARRAY
32248: PPUSH
32249: LD_VAR 0 12
32253: PUSH
32254: LD_VAR 0 7
32258: ARRAY
32259: PUSH
32260: LD_INT 2
32262: ARRAY
32263: PPUSH
32264: CALL_OW 546
32268: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
32269: LD_VAR 0 8
32273: PUSH
32274: LD_INT 1
32276: ARRAY
32277: PUSH
32278: LD_VAR 0 8
32282: PUSH
32283: LD_INT 2
32285: ARRAY
32286: PUSH
32287: LD_VAR 0 13
32291: PUSH
32292: LD_INT 2
32294: PLUS
32295: GREATER
32296: OR
32297: PUSH
32298: LD_VAR 0 8
32302: PUSH
32303: LD_INT 2
32305: ARRAY
32306: PUSH
32307: LD_VAR 0 13
32311: PUSH
32312: LD_INT 2
32314: MINUS
32315: LESS
32316: OR
32317: PUSH
32318: LD_VAR 0 8
32322: PUSH
32323: LD_INT 3
32325: ARRAY
32326: PUSH
32327: LD_INT 0
32329: PUSH
32330: LD_INT 8
32332: PUSH
32333: LD_INT 9
32335: PUSH
32336: LD_INT 10
32338: PUSH
32339: LD_INT 11
32341: PUSH
32342: LD_INT 12
32344: PUSH
32345: LD_INT 13
32347: PUSH
32348: LD_INT 16
32350: PUSH
32351: LD_INT 17
32353: PUSH
32354: LD_INT 18
32356: PUSH
32357: LD_INT 19
32359: PUSH
32360: LD_INT 20
32362: PUSH
32363: LD_INT 21
32365: PUSH
32366: EMPTY
32367: LIST
32368: LIST
32369: LIST
32370: LIST
32371: LIST
32372: LIST
32373: LIST
32374: LIST
32375: LIST
32376: LIST
32377: LIST
32378: LIST
32379: LIST
32380: IN
32381: NOT
32382: OR
32383: PUSH
32384: LD_VAR 0 8
32388: PUSH
32389: LD_INT 5
32391: ARRAY
32392: NOT
32393: OR
32394: PUSH
32395: LD_VAR 0 8
32399: PUSH
32400: LD_INT 6
32402: ARRAY
32403: PUSH
32404: LD_INT 1
32406: PUSH
32407: LD_INT 2
32409: PUSH
32410: LD_INT 7
32412: PUSH
32413: LD_INT 9
32415: PUSH
32416: LD_INT 10
32418: PUSH
32419: LD_INT 11
32421: PUSH
32422: EMPTY
32423: LIST
32424: LIST
32425: LIST
32426: LIST
32427: LIST
32428: LIST
32429: IN
32430: NOT
32431: OR
32432: IFFALSE 32438
// exit ;
32434: POP
32435: POP
32436: GO 32536
// end ;
32438: GO 32109
32440: POP
32441: POP
// side := GetSide ( depot ) ;
32442: LD_ADDR_VAR 0 9
32446: PUSH
32447: LD_VAR 0 1
32451: PPUSH
32452: CALL_OW 255
32456: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
32457: LD_VAR 0 9
32461: PPUSH
32462: LD_VAR 0 3
32466: PPUSH
32467: LD_VAR 0 4
32471: PPUSH
32472: LD_INT 20
32474: PPUSH
32475: CALL 25190 0 4
32479: PUSH
32480: LD_INT 4
32482: ARRAY
32483: IFFALSE 32487
// exit ;
32485: GO 32536
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
32487: LD_VAR 0 2
32491: PUSH
32492: LD_INT 29
32494: PUSH
32495: LD_INT 30
32497: PUSH
32498: EMPTY
32499: LIST
32500: LIST
32501: IN
32502: PUSH
32503: LD_VAR 0 3
32507: PPUSH
32508: LD_VAR 0 4
32512: PPUSH
32513: LD_VAR 0 9
32517: PPUSH
32518: CALL_OW 440
32522: NOT
32523: AND
32524: IFFALSE 32528
// exit ;
32526: GO 32536
// result := true ;
32528: LD_ADDR_VAR 0 6
32532: PUSH
32533: LD_INT 1
32535: ST_TO_ADDR
// end ;
32536: LD_VAR 0 6
32540: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
32541: LD_INT 0
32543: PPUSH
32544: PPUSH
32545: PPUSH
32546: PPUSH
32547: PPUSH
32548: PPUSH
32549: PPUSH
32550: PPUSH
32551: PPUSH
32552: PPUSH
32553: PPUSH
32554: PPUSH
32555: PPUSH
32556: PPUSH
32557: PPUSH
32558: PPUSH
32559: PPUSH
32560: PPUSH
32561: PPUSH
32562: PPUSH
32563: PPUSH
32564: PPUSH
32565: PPUSH
32566: PPUSH
32567: PPUSH
32568: PPUSH
32569: PPUSH
32570: PPUSH
32571: PPUSH
32572: PPUSH
32573: PPUSH
32574: PPUSH
32575: PPUSH
32576: PPUSH
32577: PPUSH
32578: PPUSH
32579: PPUSH
32580: PPUSH
32581: PPUSH
32582: PPUSH
32583: PPUSH
32584: PPUSH
32585: PPUSH
32586: PPUSH
32587: PPUSH
32588: PPUSH
32589: PPUSH
32590: PPUSH
32591: PPUSH
32592: PPUSH
32593: PPUSH
32594: PPUSH
32595: PPUSH
32596: PPUSH
32597: PPUSH
32598: PPUSH
32599: PPUSH
32600: PPUSH
// result = [ ] ;
32601: LD_ADDR_VAR 0 7
32605: PUSH
32606: EMPTY
32607: ST_TO_ADDR
// temp_list = [ ] ;
32608: LD_ADDR_VAR 0 9
32612: PUSH
32613: EMPTY
32614: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
32615: LD_VAR 0 4
32619: PUSH
32620: LD_INT 0
32622: PUSH
32623: LD_INT 1
32625: PUSH
32626: LD_INT 2
32628: PUSH
32629: LD_INT 3
32631: PUSH
32632: LD_INT 4
32634: PUSH
32635: LD_INT 5
32637: PUSH
32638: EMPTY
32639: LIST
32640: LIST
32641: LIST
32642: LIST
32643: LIST
32644: LIST
32645: IN
32646: NOT
32647: PUSH
32648: LD_VAR 0 1
32652: PUSH
32653: LD_INT 0
32655: PUSH
32656: LD_INT 1
32658: PUSH
32659: EMPTY
32660: LIST
32661: LIST
32662: IN
32663: PUSH
32664: LD_VAR 0 5
32668: PUSH
32669: LD_INT 1
32671: PUSH
32672: LD_INT 2
32674: PUSH
32675: LD_INT 3
32677: PUSH
32678: EMPTY
32679: LIST
32680: LIST
32681: LIST
32682: IN
32683: NOT
32684: AND
32685: OR
32686: IFFALSE 32690
// exit ;
32688: GO 51081
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
32690: LD_VAR 0 1
32694: PUSH
32695: LD_INT 6
32697: PUSH
32698: LD_INT 7
32700: PUSH
32701: LD_INT 8
32703: PUSH
32704: LD_INT 13
32706: PUSH
32707: LD_INT 12
32709: PUSH
32710: LD_INT 15
32712: PUSH
32713: LD_INT 11
32715: PUSH
32716: LD_INT 14
32718: PUSH
32719: LD_INT 10
32721: PUSH
32722: EMPTY
32723: LIST
32724: LIST
32725: LIST
32726: LIST
32727: LIST
32728: LIST
32729: LIST
32730: LIST
32731: LIST
32732: IN
32733: IFFALSE 32743
// btype = b_lab ;
32735: LD_ADDR_VAR 0 1
32739: PUSH
32740: LD_INT 6
32742: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
32743: LD_VAR 0 6
32747: PUSH
32748: LD_INT 0
32750: PUSH
32751: LD_INT 1
32753: PUSH
32754: LD_INT 2
32756: PUSH
32757: EMPTY
32758: LIST
32759: LIST
32760: LIST
32761: IN
32762: NOT
32763: PUSH
32764: LD_VAR 0 1
32768: PUSH
32769: LD_INT 0
32771: PUSH
32772: LD_INT 1
32774: PUSH
32775: LD_INT 2
32777: PUSH
32778: LD_INT 3
32780: PUSH
32781: LD_INT 6
32783: PUSH
32784: LD_INT 36
32786: PUSH
32787: LD_INT 4
32789: PUSH
32790: LD_INT 5
32792: PUSH
32793: LD_INT 31
32795: PUSH
32796: LD_INT 32
32798: PUSH
32799: LD_INT 33
32801: PUSH
32802: EMPTY
32803: LIST
32804: LIST
32805: LIST
32806: LIST
32807: LIST
32808: LIST
32809: LIST
32810: LIST
32811: LIST
32812: LIST
32813: LIST
32814: IN
32815: NOT
32816: PUSH
32817: LD_VAR 0 6
32821: PUSH
32822: LD_INT 1
32824: EQUAL
32825: AND
32826: OR
32827: PUSH
32828: LD_VAR 0 1
32832: PUSH
32833: LD_INT 2
32835: PUSH
32836: LD_INT 3
32838: PUSH
32839: EMPTY
32840: LIST
32841: LIST
32842: IN
32843: NOT
32844: PUSH
32845: LD_VAR 0 6
32849: PUSH
32850: LD_INT 2
32852: EQUAL
32853: AND
32854: OR
32855: IFFALSE 32865
// mode = 0 ;
32857: LD_ADDR_VAR 0 6
32861: PUSH
32862: LD_INT 0
32864: ST_TO_ADDR
// case mode of 0 :
32865: LD_VAR 0 6
32869: PUSH
32870: LD_INT 0
32872: DOUBLE
32873: EQUAL
32874: IFTRUE 32878
32876: GO 44331
32878: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
32879: LD_ADDR_VAR 0 11
32883: PUSH
32884: LD_INT 0
32886: PUSH
32887: LD_INT 0
32889: PUSH
32890: EMPTY
32891: LIST
32892: LIST
32893: PUSH
32894: LD_INT 0
32896: PUSH
32897: LD_INT 1
32899: NEG
32900: PUSH
32901: EMPTY
32902: LIST
32903: LIST
32904: PUSH
32905: LD_INT 1
32907: PUSH
32908: LD_INT 0
32910: PUSH
32911: EMPTY
32912: LIST
32913: LIST
32914: PUSH
32915: LD_INT 1
32917: PUSH
32918: LD_INT 1
32920: PUSH
32921: EMPTY
32922: LIST
32923: LIST
32924: PUSH
32925: LD_INT 0
32927: PUSH
32928: LD_INT 1
32930: PUSH
32931: EMPTY
32932: LIST
32933: LIST
32934: PUSH
32935: LD_INT 1
32937: NEG
32938: PUSH
32939: LD_INT 0
32941: PUSH
32942: EMPTY
32943: LIST
32944: LIST
32945: PUSH
32946: LD_INT 1
32948: NEG
32949: PUSH
32950: LD_INT 1
32952: NEG
32953: PUSH
32954: EMPTY
32955: LIST
32956: LIST
32957: PUSH
32958: LD_INT 1
32960: NEG
32961: PUSH
32962: LD_INT 2
32964: NEG
32965: PUSH
32966: EMPTY
32967: LIST
32968: LIST
32969: PUSH
32970: LD_INT 0
32972: PUSH
32973: LD_INT 2
32975: NEG
32976: PUSH
32977: EMPTY
32978: LIST
32979: LIST
32980: PUSH
32981: LD_INT 1
32983: PUSH
32984: LD_INT 1
32986: NEG
32987: PUSH
32988: EMPTY
32989: LIST
32990: LIST
32991: PUSH
32992: LD_INT 1
32994: PUSH
32995: LD_INT 2
32997: PUSH
32998: EMPTY
32999: LIST
33000: LIST
33001: PUSH
33002: LD_INT 0
33004: PUSH
33005: LD_INT 2
33007: PUSH
33008: EMPTY
33009: LIST
33010: LIST
33011: PUSH
33012: LD_INT 1
33014: NEG
33015: PUSH
33016: LD_INT 1
33018: PUSH
33019: EMPTY
33020: LIST
33021: LIST
33022: PUSH
33023: LD_INT 1
33025: PUSH
33026: LD_INT 3
33028: PUSH
33029: EMPTY
33030: LIST
33031: LIST
33032: PUSH
33033: LD_INT 0
33035: PUSH
33036: LD_INT 3
33038: PUSH
33039: EMPTY
33040: LIST
33041: LIST
33042: PUSH
33043: LD_INT 1
33045: NEG
33046: PUSH
33047: LD_INT 2
33049: PUSH
33050: EMPTY
33051: LIST
33052: LIST
33053: PUSH
33054: EMPTY
33055: LIST
33056: LIST
33057: LIST
33058: LIST
33059: LIST
33060: LIST
33061: LIST
33062: LIST
33063: LIST
33064: LIST
33065: LIST
33066: LIST
33067: LIST
33068: LIST
33069: LIST
33070: LIST
33071: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33072: LD_ADDR_VAR 0 12
33076: PUSH
33077: LD_INT 0
33079: PUSH
33080: LD_INT 0
33082: PUSH
33083: EMPTY
33084: LIST
33085: LIST
33086: PUSH
33087: LD_INT 0
33089: PUSH
33090: LD_INT 1
33092: NEG
33093: PUSH
33094: EMPTY
33095: LIST
33096: LIST
33097: PUSH
33098: LD_INT 1
33100: PUSH
33101: LD_INT 0
33103: PUSH
33104: EMPTY
33105: LIST
33106: LIST
33107: PUSH
33108: LD_INT 1
33110: PUSH
33111: LD_INT 1
33113: PUSH
33114: EMPTY
33115: LIST
33116: LIST
33117: PUSH
33118: LD_INT 0
33120: PUSH
33121: LD_INT 1
33123: PUSH
33124: EMPTY
33125: LIST
33126: LIST
33127: PUSH
33128: LD_INT 1
33130: NEG
33131: PUSH
33132: LD_INT 0
33134: PUSH
33135: EMPTY
33136: LIST
33137: LIST
33138: PUSH
33139: LD_INT 1
33141: NEG
33142: PUSH
33143: LD_INT 1
33145: NEG
33146: PUSH
33147: EMPTY
33148: LIST
33149: LIST
33150: PUSH
33151: LD_INT 1
33153: PUSH
33154: LD_INT 1
33156: NEG
33157: PUSH
33158: EMPTY
33159: LIST
33160: LIST
33161: PUSH
33162: LD_INT 2
33164: PUSH
33165: LD_INT 0
33167: PUSH
33168: EMPTY
33169: LIST
33170: LIST
33171: PUSH
33172: LD_INT 2
33174: PUSH
33175: LD_INT 1
33177: PUSH
33178: EMPTY
33179: LIST
33180: LIST
33181: PUSH
33182: LD_INT 1
33184: NEG
33185: PUSH
33186: LD_INT 1
33188: PUSH
33189: EMPTY
33190: LIST
33191: LIST
33192: PUSH
33193: LD_INT 2
33195: NEG
33196: PUSH
33197: LD_INT 0
33199: PUSH
33200: EMPTY
33201: LIST
33202: LIST
33203: PUSH
33204: LD_INT 2
33206: NEG
33207: PUSH
33208: LD_INT 1
33210: NEG
33211: PUSH
33212: EMPTY
33213: LIST
33214: LIST
33215: PUSH
33216: LD_INT 2
33218: NEG
33219: PUSH
33220: LD_INT 1
33222: PUSH
33223: EMPTY
33224: LIST
33225: LIST
33226: PUSH
33227: LD_INT 3
33229: NEG
33230: PUSH
33231: LD_INT 0
33233: PUSH
33234: EMPTY
33235: LIST
33236: LIST
33237: PUSH
33238: LD_INT 3
33240: NEG
33241: PUSH
33242: LD_INT 1
33244: NEG
33245: PUSH
33246: EMPTY
33247: LIST
33248: LIST
33249: PUSH
33250: EMPTY
33251: LIST
33252: LIST
33253: LIST
33254: LIST
33255: LIST
33256: LIST
33257: LIST
33258: LIST
33259: LIST
33260: LIST
33261: LIST
33262: LIST
33263: LIST
33264: LIST
33265: LIST
33266: LIST
33267: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33268: LD_ADDR_VAR 0 13
33272: PUSH
33273: LD_INT 0
33275: PUSH
33276: LD_INT 0
33278: PUSH
33279: EMPTY
33280: LIST
33281: LIST
33282: PUSH
33283: LD_INT 0
33285: PUSH
33286: LD_INT 1
33288: NEG
33289: PUSH
33290: EMPTY
33291: LIST
33292: LIST
33293: PUSH
33294: LD_INT 1
33296: PUSH
33297: LD_INT 0
33299: PUSH
33300: EMPTY
33301: LIST
33302: LIST
33303: PUSH
33304: LD_INT 1
33306: PUSH
33307: LD_INT 1
33309: PUSH
33310: EMPTY
33311: LIST
33312: LIST
33313: PUSH
33314: LD_INT 0
33316: PUSH
33317: LD_INT 1
33319: PUSH
33320: EMPTY
33321: LIST
33322: LIST
33323: PUSH
33324: LD_INT 1
33326: NEG
33327: PUSH
33328: LD_INT 0
33330: PUSH
33331: EMPTY
33332: LIST
33333: LIST
33334: PUSH
33335: LD_INT 1
33337: NEG
33338: PUSH
33339: LD_INT 1
33341: NEG
33342: PUSH
33343: EMPTY
33344: LIST
33345: LIST
33346: PUSH
33347: LD_INT 1
33349: NEG
33350: PUSH
33351: LD_INT 2
33353: NEG
33354: PUSH
33355: EMPTY
33356: LIST
33357: LIST
33358: PUSH
33359: LD_INT 2
33361: PUSH
33362: LD_INT 1
33364: PUSH
33365: EMPTY
33366: LIST
33367: LIST
33368: PUSH
33369: LD_INT 2
33371: PUSH
33372: LD_INT 2
33374: PUSH
33375: EMPTY
33376: LIST
33377: LIST
33378: PUSH
33379: LD_INT 1
33381: PUSH
33382: LD_INT 2
33384: PUSH
33385: EMPTY
33386: LIST
33387: LIST
33388: PUSH
33389: LD_INT 2
33391: NEG
33392: PUSH
33393: LD_INT 1
33395: NEG
33396: PUSH
33397: EMPTY
33398: LIST
33399: LIST
33400: PUSH
33401: LD_INT 2
33403: NEG
33404: PUSH
33405: LD_INT 2
33407: NEG
33408: PUSH
33409: EMPTY
33410: LIST
33411: LIST
33412: PUSH
33413: LD_INT 2
33415: NEG
33416: PUSH
33417: LD_INT 3
33419: NEG
33420: PUSH
33421: EMPTY
33422: LIST
33423: LIST
33424: PUSH
33425: LD_INT 3
33427: NEG
33428: PUSH
33429: LD_INT 2
33431: NEG
33432: PUSH
33433: EMPTY
33434: LIST
33435: LIST
33436: PUSH
33437: LD_INT 3
33439: NEG
33440: PUSH
33441: LD_INT 3
33443: NEG
33444: PUSH
33445: EMPTY
33446: LIST
33447: LIST
33448: PUSH
33449: EMPTY
33450: LIST
33451: LIST
33452: LIST
33453: LIST
33454: LIST
33455: LIST
33456: LIST
33457: LIST
33458: LIST
33459: LIST
33460: LIST
33461: LIST
33462: LIST
33463: LIST
33464: LIST
33465: LIST
33466: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
33467: LD_ADDR_VAR 0 14
33471: PUSH
33472: LD_INT 0
33474: PUSH
33475: LD_INT 0
33477: PUSH
33478: EMPTY
33479: LIST
33480: LIST
33481: PUSH
33482: LD_INT 0
33484: PUSH
33485: LD_INT 1
33487: NEG
33488: PUSH
33489: EMPTY
33490: LIST
33491: LIST
33492: PUSH
33493: LD_INT 1
33495: PUSH
33496: LD_INT 0
33498: PUSH
33499: EMPTY
33500: LIST
33501: LIST
33502: PUSH
33503: LD_INT 1
33505: PUSH
33506: LD_INT 1
33508: PUSH
33509: EMPTY
33510: LIST
33511: LIST
33512: PUSH
33513: LD_INT 0
33515: PUSH
33516: LD_INT 1
33518: PUSH
33519: EMPTY
33520: LIST
33521: LIST
33522: PUSH
33523: LD_INT 1
33525: NEG
33526: PUSH
33527: LD_INT 0
33529: PUSH
33530: EMPTY
33531: LIST
33532: LIST
33533: PUSH
33534: LD_INT 1
33536: NEG
33537: PUSH
33538: LD_INT 1
33540: NEG
33541: PUSH
33542: EMPTY
33543: LIST
33544: LIST
33545: PUSH
33546: LD_INT 1
33548: NEG
33549: PUSH
33550: LD_INT 2
33552: NEG
33553: PUSH
33554: EMPTY
33555: LIST
33556: LIST
33557: PUSH
33558: LD_INT 0
33560: PUSH
33561: LD_INT 2
33563: NEG
33564: PUSH
33565: EMPTY
33566: LIST
33567: LIST
33568: PUSH
33569: LD_INT 1
33571: PUSH
33572: LD_INT 1
33574: NEG
33575: PUSH
33576: EMPTY
33577: LIST
33578: LIST
33579: PUSH
33580: LD_INT 1
33582: PUSH
33583: LD_INT 2
33585: PUSH
33586: EMPTY
33587: LIST
33588: LIST
33589: PUSH
33590: LD_INT 0
33592: PUSH
33593: LD_INT 2
33595: PUSH
33596: EMPTY
33597: LIST
33598: LIST
33599: PUSH
33600: LD_INT 1
33602: NEG
33603: PUSH
33604: LD_INT 1
33606: PUSH
33607: EMPTY
33608: LIST
33609: LIST
33610: PUSH
33611: LD_INT 1
33613: NEG
33614: PUSH
33615: LD_INT 3
33617: NEG
33618: PUSH
33619: EMPTY
33620: LIST
33621: LIST
33622: PUSH
33623: LD_INT 0
33625: PUSH
33626: LD_INT 3
33628: NEG
33629: PUSH
33630: EMPTY
33631: LIST
33632: LIST
33633: PUSH
33634: LD_INT 1
33636: PUSH
33637: LD_INT 2
33639: NEG
33640: PUSH
33641: EMPTY
33642: LIST
33643: LIST
33644: PUSH
33645: EMPTY
33646: LIST
33647: LIST
33648: LIST
33649: LIST
33650: LIST
33651: LIST
33652: LIST
33653: LIST
33654: LIST
33655: LIST
33656: LIST
33657: LIST
33658: LIST
33659: LIST
33660: LIST
33661: LIST
33662: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
33663: LD_ADDR_VAR 0 15
33667: PUSH
33668: LD_INT 0
33670: PUSH
33671: LD_INT 0
33673: PUSH
33674: EMPTY
33675: LIST
33676: LIST
33677: PUSH
33678: LD_INT 0
33680: PUSH
33681: LD_INT 1
33683: NEG
33684: PUSH
33685: EMPTY
33686: LIST
33687: LIST
33688: PUSH
33689: LD_INT 1
33691: PUSH
33692: LD_INT 0
33694: PUSH
33695: EMPTY
33696: LIST
33697: LIST
33698: PUSH
33699: LD_INT 1
33701: PUSH
33702: LD_INT 1
33704: PUSH
33705: EMPTY
33706: LIST
33707: LIST
33708: PUSH
33709: LD_INT 0
33711: PUSH
33712: LD_INT 1
33714: PUSH
33715: EMPTY
33716: LIST
33717: LIST
33718: PUSH
33719: LD_INT 1
33721: NEG
33722: PUSH
33723: LD_INT 0
33725: PUSH
33726: EMPTY
33727: LIST
33728: LIST
33729: PUSH
33730: LD_INT 1
33732: NEG
33733: PUSH
33734: LD_INT 1
33736: NEG
33737: PUSH
33738: EMPTY
33739: LIST
33740: LIST
33741: PUSH
33742: LD_INT 1
33744: PUSH
33745: LD_INT 1
33747: NEG
33748: PUSH
33749: EMPTY
33750: LIST
33751: LIST
33752: PUSH
33753: LD_INT 2
33755: PUSH
33756: LD_INT 0
33758: PUSH
33759: EMPTY
33760: LIST
33761: LIST
33762: PUSH
33763: LD_INT 2
33765: PUSH
33766: LD_INT 1
33768: PUSH
33769: EMPTY
33770: LIST
33771: LIST
33772: PUSH
33773: LD_INT 1
33775: NEG
33776: PUSH
33777: LD_INT 1
33779: PUSH
33780: EMPTY
33781: LIST
33782: LIST
33783: PUSH
33784: LD_INT 2
33786: NEG
33787: PUSH
33788: LD_INT 0
33790: PUSH
33791: EMPTY
33792: LIST
33793: LIST
33794: PUSH
33795: LD_INT 2
33797: NEG
33798: PUSH
33799: LD_INT 1
33801: NEG
33802: PUSH
33803: EMPTY
33804: LIST
33805: LIST
33806: PUSH
33807: LD_INT 2
33809: PUSH
33810: LD_INT 1
33812: NEG
33813: PUSH
33814: EMPTY
33815: LIST
33816: LIST
33817: PUSH
33818: LD_INT 3
33820: PUSH
33821: LD_INT 0
33823: PUSH
33824: EMPTY
33825: LIST
33826: LIST
33827: PUSH
33828: LD_INT 3
33830: PUSH
33831: LD_INT 1
33833: PUSH
33834: EMPTY
33835: LIST
33836: LIST
33837: PUSH
33838: EMPTY
33839: LIST
33840: LIST
33841: LIST
33842: LIST
33843: LIST
33844: LIST
33845: LIST
33846: LIST
33847: LIST
33848: LIST
33849: LIST
33850: LIST
33851: LIST
33852: LIST
33853: LIST
33854: LIST
33855: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
33856: LD_ADDR_VAR 0 16
33860: PUSH
33861: LD_INT 0
33863: PUSH
33864: LD_INT 0
33866: PUSH
33867: EMPTY
33868: LIST
33869: LIST
33870: PUSH
33871: LD_INT 0
33873: PUSH
33874: LD_INT 1
33876: NEG
33877: PUSH
33878: EMPTY
33879: LIST
33880: LIST
33881: PUSH
33882: LD_INT 1
33884: PUSH
33885: LD_INT 0
33887: PUSH
33888: EMPTY
33889: LIST
33890: LIST
33891: PUSH
33892: LD_INT 1
33894: PUSH
33895: LD_INT 1
33897: PUSH
33898: EMPTY
33899: LIST
33900: LIST
33901: PUSH
33902: LD_INT 0
33904: PUSH
33905: LD_INT 1
33907: PUSH
33908: EMPTY
33909: LIST
33910: LIST
33911: PUSH
33912: LD_INT 1
33914: NEG
33915: PUSH
33916: LD_INT 0
33918: PUSH
33919: EMPTY
33920: LIST
33921: LIST
33922: PUSH
33923: LD_INT 1
33925: NEG
33926: PUSH
33927: LD_INT 1
33929: NEG
33930: PUSH
33931: EMPTY
33932: LIST
33933: LIST
33934: PUSH
33935: LD_INT 1
33937: NEG
33938: PUSH
33939: LD_INT 2
33941: NEG
33942: PUSH
33943: EMPTY
33944: LIST
33945: LIST
33946: PUSH
33947: LD_INT 2
33949: PUSH
33950: LD_INT 1
33952: PUSH
33953: EMPTY
33954: LIST
33955: LIST
33956: PUSH
33957: LD_INT 2
33959: PUSH
33960: LD_INT 2
33962: PUSH
33963: EMPTY
33964: LIST
33965: LIST
33966: PUSH
33967: LD_INT 1
33969: PUSH
33970: LD_INT 2
33972: PUSH
33973: EMPTY
33974: LIST
33975: LIST
33976: PUSH
33977: LD_INT 2
33979: NEG
33980: PUSH
33981: LD_INT 1
33983: NEG
33984: PUSH
33985: EMPTY
33986: LIST
33987: LIST
33988: PUSH
33989: LD_INT 2
33991: NEG
33992: PUSH
33993: LD_INT 2
33995: NEG
33996: PUSH
33997: EMPTY
33998: LIST
33999: LIST
34000: PUSH
34001: LD_INT 3
34003: PUSH
34004: LD_INT 2
34006: PUSH
34007: EMPTY
34008: LIST
34009: LIST
34010: PUSH
34011: LD_INT 3
34013: PUSH
34014: LD_INT 3
34016: PUSH
34017: EMPTY
34018: LIST
34019: LIST
34020: PUSH
34021: LD_INT 2
34023: PUSH
34024: LD_INT 3
34026: PUSH
34027: EMPTY
34028: LIST
34029: LIST
34030: PUSH
34031: EMPTY
34032: LIST
34033: LIST
34034: LIST
34035: LIST
34036: LIST
34037: LIST
34038: LIST
34039: LIST
34040: LIST
34041: LIST
34042: LIST
34043: LIST
34044: LIST
34045: LIST
34046: LIST
34047: LIST
34048: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34049: LD_ADDR_VAR 0 17
34053: PUSH
34054: LD_INT 0
34056: PUSH
34057: LD_INT 0
34059: PUSH
34060: EMPTY
34061: LIST
34062: LIST
34063: PUSH
34064: LD_INT 0
34066: PUSH
34067: LD_INT 1
34069: NEG
34070: PUSH
34071: EMPTY
34072: LIST
34073: LIST
34074: PUSH
34075: LD_INT 1
34077: PUSH
34078: LD_INT 0
34080: PUSH
34081: EMPTY
34082: LIST
34083: LIST
34084: PUSH
34085: LD_INT 1
34087: PUSH
34088: LD_INT 1
34090: PUSH
34091: EMPTY
34092: LIST
34093: LIST
34094: PUSH
34095: LD_INT 0
34097: PUSH
34098: LD_INT 1
34100: PUSH
34101: EMPTY
34102: LIST
34103: LIST
34104: PUSH
34105: LD_INT 1
34107: NEG
34108: PUSH
34109: LD_INT 0
34111: PUSH
34112: EMPTY
34113: LIST
34114: LIST
34115: PUSH
34116: LD_INT 1
34118: NEG
34119: PUSH
34120: LD_INT 1
34122: NEG
34123: PUSH
34124: EMPTY
34125: LIST
34126: LIST
34127: PUSH
34128: LD_INT 1
34130: NEG
34131: PUSH
34132: LD_INT 2
34134: NEG
34135: PUSH
34136: EMPTY
34137: LIST
34138: LIST
34139: PUSH
34140: LD_INT 0
34142: PUSH
34143: LD_INT 2
34145: NEG
34146: PUSH
34147: EMPTY
34148: LIST
34149: LIST
34150: PUSH
34151: LD_INT 1
34153: PUSH
34154: LD_INT 1
34156: NEG
34157: PUSH
34158: EMPTY
34159: LIST
34160: LIST
34161: PUSH
34162: LD_INT 2
34164: PUSH
34165: LD_INT 0
34167: PUSH
34168: EMPTY
34169: LIST
34170: LIST
34171: PUSH
34172: LD_INT 2
34174: PUSH
34175: LD_INT 1
34177: PUSH
34178: EMPTY
34179: LIST
34180: LIST
34181: PUSH
34182: LD_INT 2
34184: PUSH
34185: LD_INT 2
34187: PUSH
34188: EMPTY
34189: LIST
34190: LIST
34191: PUSH
34192: LD_INT 1
34194: PUSH
34195: LD_INT 2
34197: PUSH
34198: EMPTY
34199: LIST
34200: LIST
34201: PUSH
34202: LD_INT 0
34204: PUSH
34205: LD_INT 2
34207: PUSH
34208: EMPTY
34209: LIST
34210: LIST
34211: PUSH
34212: LD_INT 1
34214: NEG
34215: PUSH
34216: LD_INT 1
34218: PUSH
34219: EMPTY
34220: LIST
34221: LIST
34222: PUSH
34223: LD_INT 2
34225: NEG
34226: PUSH
34227: LD_INT 0
34229: PUSH
34230: EMPTY
34231: LIST
34232: LIST
34233: PUSH
34234: LD_INT 2
34236: NEG
34237: PUSH
34238: LD_INT 1
34240: NEG
34241: PUSH
34242: EMPTY
34243: LIST
34244: LIST
34245: PUSH
34246: LD_INT 2
34248: NEG
34249: PUSH
34250: LD_INT 2
34252: NEG
34253: PUSH
34254: EMPTY
34255: LIST
34256: LIST
34257: PUSH
34258: EMPTY
34259: LIST
34260: LIST
34261: LIST
34262: LIST
34263: LIST
34264: LIST
34265: LIST
34266: LIST
34267: LIST
34268: LIST
34269: LIST
34270: LIST
34271: LIST
34272: LIST
34273: LIST
34274: LIST
34275: LIST
34276: LIST
34277: LIST
34278: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34279: LD_ADDR_VAR 0 18
34283: PUSH
34284: LD_INT 0
34286: PUSH
34287: LD_INT 0
34289: PUSH
34290: EMPTY
34291: LIST
34292: LIST
34293: PUSH
34294: LD_INT 0
34296: PUSH
34297: LD_INT 1
34299: NEG
34300: PUSH
34301: EMPTY
34302: LIST
34303: LIST
34304: PUSH
34305: LD_INT 1
34307: PUSH
34308: LD_INT 0
34310: PUSH
34311: EMPTY
34312: LIST
34313: LIST
34314: PUSH
34315: LD_INT 1
34317: PUSH
34318: LD_INT 1
34320: PUSH
34321: EMPTY
34322: LIST
34323: LIST
34324: PUSH
34325: LD_INT 0
34327: PUSH
34328: LD_INT 1
34330: PUSH
34331: EMPTY
34332: LIST
34333: LIST
34334: PUSH
34335: LD_INT 1
34337: NEG
34338: PUSH
34339: LD_INT 0
34341: PUSH
34342: EMPTY
34343: LIST
34344: LIST
34345: PUSH
34346: LD_INT 1
34348: NEG
34349: PUSH
34350: LD_INT 1
34352: NEG
34353: PUSH
34354: EMPTY
34355: LIST
34356: LIST
34357: PUSH
34358: LD_INT 1
34360: NEG
34361: PUSH
34362: LD_INT 2
34364: NEG
34365: PUSH
34366: EMPTY
34367: LIST
34368: LIST
34369: PUSH
34370: LD_INT 0
34372: PUSH
34373: LD_INT 2
34375: NEG
34376: PUSH
34377: EMPTY
34378: LIST
34379: LIST
34380: PUSH
34381: LD_INT 1
34383: PUSH
34384: LD_INT 1
34386: NEG
34387: PUSH
34388: EMPTY
34389: LIST
34390: LIST
34391: PUSH
34392: LD_INT 2
34394: PUSH
34395: LD_INT 0
34397: PUSH
34398: EMPTY
34399: LIST
34400: LIST
34401: PUSH
34402: LD_INT 2
34404: PUSH
34405: LD_INT 1
34407: PUSH
34408: EMPTY
34409: LIST
34410: LIST
34411: PUSH
34412: LD_INT 2
34414: PUSH
34415: LD_INT 2
34417: PUSH
34418: EMPTY
34419: LIST
34420: LIST
34421: PUSH
34422: LD_INT 1
34424: PUSH
34425: LD_INT 2
34427: PUSH
34428: EMPTY
34429: LIST
34430: LIST
34431: PUSH
34432: LD_INT 0
34434: PUSH
34435: LD_INT 2
34437: PUSH
34438: EMPTY
34439: LIST
34440: LIST
34441: PUSH
34442: LD_INT 1
34444: NEG
34445: PUSH
34446: LD_INT 1
34448: PUSH
34449: EMPTY
34450: LIST
34451: LIST
34452: PUSH
34453: LD_INT 2
34455: NEG
34456: PUSH
34457: LD_INT 0
34459: PUSH
34460: EMPTY
34461: LIST
34462: LIST
34463: PUSH
34464: LD_INT 2
34466: NEG
34467: PUSH
34468: LD_INT 1
34470: NEG
34471: PUSH
34472: EMPTY
34473: LIST
34474: LIST
34475: PUSH
34476: LD_INT 2
34478: NEG
34479: PUSH
34480: LD_INT 2
34482: NEG
34483: PUSH
34484: EMPTY
34485: LIST
34486: LIST
34487: PUSH
34488: EMPTY
34489: LIST
34490: LIST
34491: LIST
34492: LIST
34493: LIST
34494: LIST
34495: LIST
34496: LIST
34497: LIST
34498: LIST
34499: LIST
34500: LIST
34501: LIST
34502: LIST
34503: LIST
34504: LIST
34505: LIST
34506: LIST
34507: LIST
34508: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34509: LD_ADDR_VAR 0 19
34513: PUSH
34514: LD_INT 0
34516: PUSH
34517: LD_INT 0
34519: PUSH
34520: EMPTY
34521: LIST
34522: LIST
34523: PUSH
34524: LD_INT 0
34526: PUSH
34527: LD_INT 1
34529: NEG
34530: PUSH
34531: EMPTY
34532: LIST
34533: LIST
34534: PUSH
34535: LD_INT 1
34537: PUSH
34538: LD_INT 0
34540: PUSH
34541: EMPTY
34542: LIST
34543: LIST
34544: PUSH
34545: LD_INT 1
34547: PUSH
34548: LD_INT 1
34550: PUSH
34551: EMPTY
34552: LIST
34553: LIST
34554: PUSH
34555: LD_INT 0
34557: PUSH
34558: LD_INT 1
34560: PUSH
34561: EMPTY
34562: LIST
34563: LIST
34564: PUSH
34565: LD_INT 1
34567: NEG
34568: PUSH
34569: LD_INT 0
34571: PUSH
34572: EMPTY
34573: LIST
34574: LIST
34575: PUSH
34576: LD_INT 1
34578: NEG
34579: PUSH
34580: LD_INT 1
34582: NEG
34583: PUSH
34584: EMPTY
34585: LIST
34586: LIST
34587: PUSH
34588: LD_INT 1
34590: NEG
34591: PUSH
34592: LD_INT 2
34594: NEG
34595: PUSH
34596: EMPTY
34597: LIST
34598: LIST
34599: PUSH
34600: LD_INT 0
34602: PUSH
34603: LD_INT 2
34605: NEG
34606: PUSH
34607: EMPTY
34608: LIST
34609: LIST
34610: PUSH
34611: LD_INT 1
34613: PUSH
34614: LD_INT 1
34616: NEG
34617: PUSH
34618: EMPTY
34619: LIST
34620: LIST
34621: PUSH
34622: LD_INT 2
34624: PUSH
34625: LD_INT 0
34627: PUSH
34628: EMPTY
34629: LIST
34630: LIST
34631: PUSH
34632: LD_INT 2
34634: PUSH
34635: LD_INT 1
34637: PUSH
34638: EMPTY
34639: LIST
34640: LIST
34641: PUSH
34642: LD_INT 2
34644: PUSH
34645: LD_INT 2
34647: PUSH
34648: EMPTY
34649: LIST
34650: LIST
34651: PUSH
34652: LD_INT 1
34654: PUSH
34655: LD_INT 2
34657: PUSH
34658: EMPTY
34659: LIST
34660: LIST
34661: PUSH
34662: LD_INT 0
34664: PUSH
34665: LD_INT 2
34667: PUSH
34668: EMPTY
34669: LIST
34670: LIST
34671: PUSH
34672: LD_INT 1
34674: NEG
34675: PUSH
34676: LD_INT 1
34678: PUSH
34679: EMPTY
34680: LIST
34681: LIST
34682: PUSH
34683: LD_INT 2
34685: NEG
34686: PUSH
34687: LD_INT 0
34689: PUSH
34690: EMPTY
34691: LIST
34692: LIST
34693: PUSH
34694: LD_INT 2
34696: NEG
34697: PUSH
34698: LD_INT 1
34700: NEG
34701: PUSH
34702: EMPTY
34703: LIST
34704: LIST
34705: PUSH
34706: LD_INT 2
34708: NEG
34709: PUSH
34710: LD_INT 2
34712: NEG
34713: PUSH
34714: EMPTY
34715: LIST
34716: LIST
34717: PUSH
34718: EMPTY
34719: LIST
34720: LIST
34721: LIST
34722: LIST
34723: LIST
34724: LIST
34725: LIST
34726: LIST
34727: LIST
34728: LIST
34729: LIST
34730: LIST
34731: LIST
34732: LIST
34733: LIST
34734: LIST
34735: LIST
34736: LIST
34737: LIST
34738: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34739: LD_ADDR_VAR 0 20
34743: PUSH
34744: LD_INT 0
34746: PUSH
34747: LD_INT 0
34749: PUSH
34750: EMPTY
34751: LIST
34752: LIST
34753: PUSH
34754: LD_INT 0
34756: PUSH
34757: LD_INT 1
34759: NEG
34760: PUSH
34761: EMPTY
34762: LIST
34763: LIST
34764: PUSH
34765: LD_INT 1
34767: PUSH
34768: LD_INT 0
34770: PUSH
34771: EMPTY
34772: LIST
34773: LIST
34774: PUSH
34775: LD_INT 1
34777: PUSH
34778: LD_INT 1
34780: PUSH
34781: EMPTY
34782: LIST
34783: LIST
34784: PUSH
34785: LD_INT 0
34787: PUSH
34788: LD_INT 1
34790: PUSH
34791: EMPTY
34792: LIST
34793: LIST
34794: PUSH
34795: LD_INT 1
34797: NEG
34798: PUSH
34799: LD_INT 0
34801: PUSH
34802: EMPTY
34803: LIST
34804: LIST
34805: PUSH
34806: LD_INT 1
34808: NEG
34809: PUSH
34810: LD_INT 1
34812: NEG
34813: PUSH
34814: EMPTY
34815: LIST
34816: LIST
34817: PUSH
34818: LD_INT 1
34820: NEG
34821: PUSH
34822: LD_INT 2
34824: NEG
34825: PUSH
34826: EMPTY
34827: LIST
34828: LIST
34829: PUSH
34830: LD_INT 0
34832: PUSH
34833: LD_INT 2
34835: NEG
34836: PUSH
34837: EMPTY
34838: LIST
34839: LIST
34840: PUSH
34841: LD_INT 1
34843: PUSH
34844: LD_INT 1
34846: NEG
34847: PUSH
34848: EMPTY
34849: LIST
34850: LIST
34851: PUSH
34852: LD_INT 2
34854: PUSH
34855: LD_INT 0
34857: PUSH
34858: EMPTY
34859: LIST
34860: LIST
34861: PUSH
34862: LD_INT 2
34864: PUSH
34865: LD_INT 1
34867: PUSH
34868: EMPTY
34869: LIST
34870: LIST
34871: PUSH
34872: LD_INT 2
34874: PUSH
34875: LD_INT 2
34877: PUSH
34878: EMPTY
34879: LIST
34880: LIST
34881: PUSH
34882: LD_INT 1
34884: PUSH
34885: LD_INT 2
34887: PUSH
34888: EMPTY
34889: LIST
34890: LIST
34891: PUSH
34892: LD_INT 0
34894: PUSH
34895: LD_INT 2
34897: PUSH
34898: EMPTY
34899: LIST
34900: LIST
34901: PUSH
34902: LD_INT 1
34904: NEG
34905: PUSH
34906: LD_INT 1
34908: PUSH
34909: EMPTY
34910: LIST
34911: LIST
34912: PUSH
34913: LD_INT 2
34915: NEG
34916: PUSH
34917: LD_INT 0
34919: PUSH
34920: EMPTY
34921: LIST
34922: LIST
34923: PUSH
34924: LD_INT 2
34926: NEG
34927: PUSH
34928: LD_INT 1
34930: NEG
34931: PUSH
34932: EMPTY
34933: LIST
34934: LIST
34935: PUSH
34936: LD_INT 2
34938: NEG
34939: PUSH
34940: LD_INT 2
34942: NEG
34943: PUSH
34944: EMPTY
34945: LIST
34946: LIST
34947: PUSH
34948: EMPTY
34949: LIST
34950: LIST
34951: LIST
34952: LIST
34953: LIST
34954: LIST
34955: LIST
34956: LIST
34957: LIST
34958: LIST
34959: LIST
34960: LIST
34961: LIST
34962: LIST
34963: LIST
34964: LIST
34965: LIST
34966: LIST
34967: LIST
34968: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34969: LD_ADDR_VAR 0 21
34973: PUSH
34974: LD_INT 0
34976: PUSH
34977: LD_INT 0
34979: PUSH
34980: EMPTY
34981: LIST
34982: LIST
34983: PUSH
34984: LD_INT 0
34986: PUSH
34987: LD_INT 1
34989: NEG
34990: PUSH
34991: EMPTY
34992: LIST
34993: LIST
34994: PUSH
34995: LD_INT 1
34997: PUSH
34998: LD_INT 0
35000: PUSH
35001: EMPTY
35002: LIST
35003: LIST
35004: PUSH
35005: LD_INT 1
35007: PUSH
35008: LD_INT 1
35010: PUSH
35011: EMPTY
35012: LIST
35013: LIST
35014: PUSH
35015: LD_INT 0
35017: PUSH
35018: LD_INT 1
35020: PUSH
35021: EMPTY
35022: LIST
35023: LIST
35024: PUSH
35025: LD_INT 1
35027: NEG
35028: PUSH
35029: LD_INT 0
35031: PUSH
35032: EMPTY
35033: LIST
35034: LIST
35035: PUSH
35036: LD_INT 1
35038: NEG
35039: PUSH
35040: LD_INT 1
35042: NEG
35043: PUSH
35044: EMPTY
35045: LIST
35046: LIST
35047: PUSH
35048: LD_INT 1
35050: NEG
35051: PUSH
35052: LD_INT 2
35054: NEG
35055: PUSH
35056: EMPTY
35057: LIST
35058: LIST
35059: PUSH
35060: LD_INT 0
35062: PUSH
35063: LD_INT 2
35065: NEG
35066: PUSH
35067: EMPTY
35068: LIST
35069: LIST
35070: PUSH
35071: LD_INT 1
35073: PUSH
35074: LD_INT 1
35076: NEG
35077: PUSH
35078: EMPTY
35079: LIST
35080: LIST
35081: PUSH
35082: LD_INT 2
35084: PUSH
35085: LD_INT 0
35087: PUSH
35088: EMPTY
35089: LIST
35090: LIST
35091: PUSH
35092: LD_INT 2
35094: PUSH
35095: LD_INT 1
35097: PUSH
35098: EMPTY
35099: LIST
35100: LIST
35101: PUSH
35102: LD_INT 2
35104: PUSH
35105: LD_INT 2
35107: PUSH
35108: EMPTY
35109: LIST
35110: LIST
35111: PUSH
35112: LD_INT 1
35114: PUSH
35115: LD_INT 2
35117: PUSH
35118: EMPTY
35119: LIST
35120: LIST
35121: PUSH
35122: LD_INT 0
35124: PUSH
35125: LD_INT 2
35127: PUSH
35128: EMPTY
35129: LIST
35130: LIST
35131: PUSH
35132: LD_INT 1
35134: NEG
35135: PUSH
35136: LD_INT 1
35138: PUSH
35139: EMPTY
35140: LIST
35141: LIST
35142: PUSH
35143: LD_INT 2
35145: NEG
35146: PUSH
35147: LD_INT 0
35149: PUSH
35150: EMPTY
35151: LIST
35152: LIST
35153: PUSH
35154: LD_INT 2
35156: NEG
35157: PUSH
35158: LD_INT 1
35160: NEG
35161: PUSH
35162: EMPTY
35163: LIST
35164: LIST
35165: PUSH
35166: LD_INT 2
35168: NEG
35169: PUSH
35170: LD_INT 2
35172: NEG
35173: PUSH
35174: EMPTY
35175: LIST
35176: LIST
35177: PUSH
35178: EMPTY
35179: LIST
35180: LIST
35181: LIST
35182: LIST
35183: LIST
35184: LIST
35185: LIST
35186: LIST
35187: LIST
35188: LIST
35189: LIST
35190: LIST
35191: LIST
35192: LIST
35193: LIST
35194: LIST
35195: LIST
35196: LIST
35197: LIST
35198: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35199: LD_ADDR_VAR 0 22
35203: PUSH
35204: LD_INT 0
35206: PUSH
35207: LD_INT 0
35209: PUSH
35210: EMPTY
35211: LIST
35212: LIST
35213: PUSH
35214: LD_INT 0
35216: PUSH
35217: LD_INT 1
35219: NEG
35220: PUSH
35221: EMPTY
35222: LIST
35223: LIST
35224: PUSH
35225: LD_INT 1
35227: PUSH
35228: LD_INT 0
35230: PUSH
35231: EMPTY
35232: LIST
35233: LIST
35234: PUSH
35235: LD_INT 1
35237: PUSH
35238: LD_INT 1
35240: PUSH
35241: EMPTY
35242: LIST
35243: LIST
35244: PUSH
35245: LD_INT 0
35247: PUSH
35248: LD_INT 1
35250: PUSH
35251: EMPTY
35252: LIST
35253: LIST
35254: PUSH
35255: LD_INT 1
35257: NEG
35258: PUSH
35259: LD_INT 0
35261: PUSH
35262: EMPTY
35263: LIST
35264: LIST
35265: PUSH
35266: LD_INT 1
35268: NEG
35269: PUSH
35270: LD_INT 1
35272: NEG
35273: PUSH
35274: EMPTY
35275: LIST
35276: LIST
35277: PUSH
35278: LD_INT 1
35280: NEG
35281: PUSH
35282: LD_INT 2
35284: NEG
35285: PUSH
35286: EMPTY
35287: LIST
35288: LIST
35289: PUSH
35290: LD_INT 0
35292: PUSH
35293: LD_INT 2
35295: NEG
35296: PUSH
35297: EMPTY
35298: LIST
35299: LIST
35300: PUSH
35301: LD_INT 1
35303: PUSH
35304: LD_INT 1
35306: NEG
35307: PUSH
35308: EMPTY
35309: LIST
35310: LIST
35311: PUSH
35312: LD_INT 2
35314: PUSH
35315: LD_INT 0
35317: PUSH
35318: EMPTY
35319: LIST
35320: LIST
35321: PUSH
35322: LD_INT 2
35324: PUSH
35325: LD_INT 1
35327: PUSH
35328: EMPTY
35329: LIST
35330: LIST
35331: PUSH
35332: LD_INT 2
35334: PUSH
35335: LD_INT 2
35337: PUSH
35338: EMPTY
35339: LIST
35340: LIST
35341: PUSH
35342: LD_INT 1
35344: PUSH
35345: LD_INT 2
35347: PUSH
35348: EMPTY
35349: LIST
35350: LIST
35351: PUSH
35352: LD_INT 0
35354: PUSH
35355: LD_INT 2
35357: PUSH
35358: EMPTY
35359: LIST
35360: LIST
35361: PUSH
35362: LD_INT 1
35364: NEG
35365: PUSH
35366: LD_INT 1
35368: PUSH
35369: EMPTY
35370: LIST
35371: LIST
35372: PUSH
35373: LD_INT 2
35375: NEG
35376: PUSH
35377: LD_INT 0
35379: PUSH
35380: EMPTY
35381: LIST
35382: LIST
35383: PUSH
35384: LD_INT 2
35386: NEG
35387: PUSH
35388: LD_INT 1
35390: NEG
35391: PUSH
35392: EMPTY
35393: LIST
35394: LIST
35395: PUSH
35396: LD_INT 2
35398: NEG
35399: PUSH
35400: LD_INT 2
35402: NEG
35403: PUSH
35404: EMPTY
35405: LIST
35406: LIST
35407: PUSH
35408: EMPTY
35409: LIST
35410: LIST
35411: LIST
35412: LIST
35413: LIST
35414: LIST
35415: LIST
35416: LIST
35417: LIST
35418: LIST
35419: LIST
35420: LIST
35421: LIST
35422: LIST
35423: LIST
35424: LIST
35425: LIST
35426: LIST
35427: LIST
35428: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
35429: LD_ADDR_VAR 0 23
35433: PUSH
35434: LD_INT 0
35436: PUSH
35437: LD_INT 0
35439: PUSH
35440: EMPTY
35441: LIST
35442: LIST
35443: PUSH
35444: LD_INT 0
35446: PUSH
35447: LD_INT 1
35449: NEG
35450: PUSH
35451: EMPTY
35452: LIST
35453: LIST
35454: PUSH
35455: LD_INT 1
35457: PUSH
35458: LD_INT 0
35460: PUSH
35461: EMPTY
35462: LIST
35463: LIST
35464: PUSH
35465: LD_INT 1
35467: PUSH
35468: LD_INT 1
35470: PUSH
35471: EMPTY
35472: LIST
35473: LIST
35474: PUSH
35475: LD_INT 0
35477: PUSH
35478: LD_INT 1
35480: PUSH
35481: EMPTY
35482: LIST
35483: LIST
35484: PUSH
35485: LD_INT 1
35487: NEG
35488: PUSH
35489: LD_INT 0
35491: PUSH
35492: EMPTY
35493: LIST
35494: LIST
35495: PUSH
35496: LD_INT 1
35498: NEG
35499: PUSH
35500: LD_INT 1
35502: NEG
35503: PUSH
35504: EMPTY
35505: LIST
35506: LIST
35507: PUSH
35508: LD_INT 1
35510: NEG
35511: PUSH
35512: LD_INT 2
35514: NEG
35515: PUSH
35516: EMPTY
35517: LIST
35518: LIST
35519: PUSH
35520: LD_INT 0
35522: PUSH
35523: LD_INT 2
35525: NEG
35526: PUSH
35527: EMPTY
35528: LIST
35529: LIST
35530: PUSH
35531: LD_INT 1
35533: PUSH
35534: LD_INT 1
35536: NEG
35537: PUSH
35538: EMPTY
35539: LIST
35540: LIST
35541: PUSH
35542: LD_INT 2
35544: PUSH
35545: LD_INT 0
35547: PUSH
35548: EMPTY
35549: LIST
35550: LIST
35551: PUSH
35552: LD_INT 2
35554: PUSH
35555: LD_INT 1
35557: PUSH
35558: EMPTY
35559: LIST
35560: LIST
35561: PUSH
35562: LD_INT 2
35564: PUSH
35565: LD_INT 2
35567: PUSH
35568: EMPTY
35569: LIST
35570: LIST
35571: PUSH
35572: LD_INT 1
35574: PUSH
35575: LD_INT 2
35577: PUSH
35578: EMPTY
35579: LIST
35580: LIST
35581: PUSH
35582: LD_INT 0
35584: PUSH
35585: LD_INT 2
35587: PUSH
35588: EMPTY
35589: LIST
35590: LIST
35591: PUSH
35592: LD_INT 1
35594: NEG
35595: PUSH
35596: LD_INT 1
35598: PUSH
35599: EMPTY
35600: LIST
35601: LIST
35602: PUSH
35603: LD_INT 2
35605: NEG
35606: PUSH
35607: LD_INT 0
35609: PUSH
35610: EMPTY
35611: LIST
35612: LIST
35613: PUSH
35614: LD_INT 2
35616: NEG
35617: PUSH
35618: LD_INT 1
35620: NEG
35621: PUSH
35622: EMPTY
35623: LIST
35624: LIST
35625: PUSH
35626: LD_INT 2
35628: NEG
35629: PUSH
35630: LD_INT 2
35632: NEG
35633: PUSH
35634: EMPTY
35635: LIST
35636: LIST
35637: PUSH
35638: LD_INT 2
35640: NEG
35641: PUSH
35642: LD_INT 3
35644: NEG
35645: PUSH
35646: EMPTY
35647: LIST
35648: LIST
35649: PUSH
35650: LD_INT 1
35652: NEG
35653: PUSH
35654: LD_INT 3
35656: NEG
35657: PUSH
35658: EMPTY
35659: LIST
35660: LIST
35661: PUSH
35662: LD_INT 1
35664: PUSH
35665: LD_INT 2
35667: NEG
35668: PUSH
35669: EMPTY
35670: LIST
35671: LIST
35672: PUSH
35673: LD_INT 2
35675: PUSH
35676: LD_INT 1
35678: NEG
35679: PUSH
35680: EMPTY
35681: LIST
35682: LIST
35683: PUSH
35684: EMPTY
35685: LIST
35686: LIST
35687: LIST
35688: LIST
35689: LIST
35690: LIST
35691: LIST
35692: LIST
35693: LIST
35694: LIST
35695: LIST
35696: LIST
35697: LIST
35698: LIST
35699: LIST
35700: LIST
35701: LIST
35702: LIST
35703: LIST
35704: LIST
35705: LIST
35706: LIST
35707: LIST
35708: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
35709: LD_ADDR_VAR 0 24
35713: PUSH
35714: LD_INT 0
35716: PUSH
35717: LD_INT 0
35719: PUSH
35720: EMPTY
35721: LIST
35722: LIST
35723: PUSH
35724: LD_INT 0
35726: PUSH
35727: LD_INT 1
35729: NEG
35730: PUSH
35731: EMPTY
35732: LIST
35733: LIST
35734: PUSH
35735: LD_INT 1
35737: PUSH
35738: LD_INT 0
35740: PUSH
35741: EMPTY
35742: LIST
35743: LIST
35744: PUSH
35745: LD_INT 1
35747: PUSH
35748: LD_INT 1
35750: PUSH
35751: EMPTY
35752: LIST
35753: LIST
35754: PUSH
35755: LD_INT 0
35757: PUSH
35758: LD_INT 1
35760: PUSH
35761: EMPTY
35762: LIST
35763: LIST
35764: PUSH
35765: LD_INT 1
35767: NEG
35768: PUSH
35769: LD_INT 0
35771: PUSH
35772: EMPTY
35773: LIST
35774: LIST
35775: PUSH
35776: LD_INT 1
35778: NEG
35779: PUSH
35780: LD_INT 1
35782: NEG
35783: PUSH
35784: EMPTY
35785: LIST
35786: LIST
35787: PUSH
35788: LD_INT 1
35790: NEG
35791: PUSH
35792: LD_INT 2
35794: NEG
35795: PUSH
35796: EMPTY
35797: LIST
35798: LIST
35799: PUSH
35800: LD_INT 0
35802: PUSH
35803: LD_INT 2
35805: NEG
35806: PUSH
35807: EMPTY
35808: LIST
35809: LIST
35810: PUSH
35811: LD_INT 1
35813: PUSH
35814: LD_INT 1
35816: NEG
35817: PUSH
35818: EMPTY
35819: LIST
35820: LIST
35821: PUSH
35822: LD_INT 2
35824: PUSH
35825: LD_INT 0
35827: PUSH
35828: EMPTY
35829: LIST
35830: LIST
35831: PUSH
35832: LD_INT 2
35834: PUSH
35835: LD_INT 1
35837: PUSH
35838: EMPTY
35839: LIST
35840: LIST
35841: PUSH
35842: LD_INT 2
35844: PUSH
35845: LD_INT 2
35847: PUSH
35848: EMPTY
35849: LIST
35850: LIST
35851: PUSH
35852: LD_INT 1
35854: PUSH
35855: LD_INT 2
35857: PUSH
35858: EMPTY
35859: LIST
35860: LIST
35861: PUSH
35862: LD_INT 0
35864: PUSH
35865: LD_INT 2
35867: PUSH
35868: EMPTY
35869: LIST
35870: LIST
35871: PUSH
35872: LD_INT 1
35874: NEG
35875: PUSH
35876: LD_INT 1
35878: PUSH
35879: EMPTY
35880: LIST
35881: LIST
35882: PUSH
35883: LD_INT 2
35885: NEG
35886: PUSH
35887: LD_INT 0
35889: PUSH
35890: EMPTY
35891: LIST
35892: LIST
35893: PUSH
35894: LD_INT 2
35896: NEG
35897: PUSH
35898: LD_INT 1
35900: NEG
35901: PUSH
35902: EMPTY
35903: LIST
35904: LIST
35905: PUSH
35906: LD_INT 2
35908: NEG
35909: PUSH
35910: LD_INT 2
35912: NEG
35913: PUSH
35914: EMPTY
35915: LIST
35916: LIST
35917: PUSH
35918: LD_INT 1
35920: PUSH
35921: LD_INT 2
35923: NEG
35924: PUSH
35925: EMPTY
35926: LIST
35927: LIST
35928: PUSH
35929: LD_INT 2
35931: PUSH
35932: LD_INT 1
35934: NEG
35935: PUSH
35936: EMPTY
35937: LIST
35938: LIST
35939: PUSH
35940: LD_INT 3
35942: PUSH
35943: LD_INT 1
35945: PUSH
35946: EMPTY
35947: LIST
35948: LIST
35949: PUSH
35950: LD_INT 3
35952: PUSH
35953: LD_INT 2
35955: PUSH
35956: EMPTY
35957: LIST
35958: LIST
35959: PUSH
35960: EMPTY
35961: LIST
35962: LIST
35963: LIST
35964: LIST
35965: LIST
35966: LIST
35967: LIST
35968: LIST
35969: LIST
35970: LIST
35971: LIST
35972: LIST
35973: LIST
35974: LIST
35975: LIST
35976: LIST
35977: LIST
35978: LIST
35979: LIST
35980: LIST
35981: LIST
35982: LIST
35983: LIST
35984: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
35985: LD_ADDR_VAR 0 25
35989: PUSH
35990: LD_INT 0
35992: PUSH
35993: LD_INT 0
35995: PUSH
35996: EMPTY
35997: LIST
35998: LIST
35999: PUSH
36000: LD_INT 0
36002: PUSH
36003: LD_INT 1
36005: NEG
36006: PUSH
36007: EMPTY
36008: LIST
36009: LIST
36010: PUSH
36011: LD_INT 1
36013: PUSH
36014: LD_INT 0
36016: PUSH
36017: EMPTY
36018: LIST
36019: LIST
36020: PUSH
36021: LD_INT 1
36023: PUSH
36024: LD_INT 1
36026: PUSH
36027: EMPTY
36028: LIST
36029: LIST
36030: PUSH
36031: LD_INT 0
36033: PUSH
36034: LD_INT 1
36036: PUSH
36037: EMPTY
36038: LIST
36039: LIST
36040: PUSH
36041: LD_INT 1
36043: NEG
36044: PUSH
36045: LD_INT 0
36047: PUSH
36048: EMPTY
36049: LIST
36050: LIST
36051: PUSH
36052: LD_INT 1
36054: NEG
36055: PUSH
36056: LD_INT 1
36058: NEG
36059: PUSH
36060: EMPTY
36061: LIST
36062: LIST
36063: PUSH
36064: LD_INT 1
36066: NEG
36067: PUSH
36068: LD_INT 2
36070: NEG
36071: PUSH
36072: EMPTY
36073: LIST
36074: LIST
36075: PUSH
36076: LD_INT 0
36078: PUSH
36079: LD_INT 2
36081: NEG
36082: PUSH
36083: EMPTY
36084: LIST
36085: LIST
36086: PUSH
36087: LD_INT 1
36089: PUSH
36090: LD_INT 1
36092: NEG
36093: PUSH
36094: EMPTY
36095: LIST
36096: LIST
36097: PUSH
36098: LD_INT 2
36100: PUSH
36101: LD_INT 0
36103: PUSH
36104: EMPTY
36105: LIST
36106: LIST
36107: PUSH
36108: LD_INT 2
36110: PUSH
36111: LD_INT 1
36113: PUSH
36114: EMPTY
36115: LIST
36116: LIST
36117: PUSH
36118: LD_INT 2
36120: PUSH
36121: LD_INT 2
36123: PUSH
36124: EMPTY
36125: LIST
36126: LIST
36127: PUSH
36128: LD_INT 1
36130: PUSH
36131: LD_INT 2
36133: PUSH
36134: EMPTY
36135: LIST
36136: LIST
36137: PUSH
36138: LD_INT 0
36140: PUSH
36141: LD_INT 2
36143: PUSH
36144: EMPTY
36145: LIST
36146: LIST
36147: PUSH
36148: LD_INT 1
36150: NEG
36151: PUSH
36152: LD_INT 1
36154: PUSH
36155: EMPTY
36156: LIST
36157: LIST
36158: PUSH
36159: LD_INT 2
36161: NEG
36162: PUSH
36163: LD_INT 0
36165: PUSH
36166: EMPTY
36167: LIST
36168: LIST
36169: PUSH
36170: LD_INT 2
36172: NEG
36173: PUSH
36174: LD_INT 1
36176: NEG
36177: PUSH
36178: EMPTY
36179: LIST
36180: LIST
36181: PUSH
36182: LD_INT 2
36184: NEG
36185: PUSH
36186: LD_INT 2
36188: NEG
36189: PUSH
36190: EMPTY
36191: LIST
36192: LIST
36193: PUSH
36194: LD_INT 3
36196: PUSH
36197: LD_INT 1
36199: PUSH
36200: EMPTY
36201: LIST
36202: LIST
36203: PUSH
36204: LD_INT 3
36206: PUSH
36207: LD_INT 2
36209: PUSH
36210: EMPTY
36211: LIST
36212: LIST
36213: PUSH
36214: LD_INT 2
36216: PUSH
36217: LD_INT 3
36219: PUSH
36220: EMPTY
36221: LIST
36222: LIST
36223: PUSH
36224: LD_INT 1
36226: PUSH
36227: LD_INT 3
36229: PUSH
36230: EMPTY
36231: LIST
36232: LIST
36233: PUSH
36234: EMPTY
36235: LIST
36236: LIST
36237: LIST
36238: LIST
36239: LIST
36240: LIST
36241: LIST
36242: LIST
36243: LIST
36244: LIST
36245: LIST
36246: LIST
36247: LIST
36248: LIST
36249: LIST
36250: LIST
36251: LIST
36252: LIST
36253: LIST
36254: LIST
36255: LIST
36256: LIST
36257: LIST
36258: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
36259: LD_ADDR_VAR 0 26
36263: PUSH
36264: LD_INT 0
36266: PUSH
36267: LD_INT 0
36269: PUSH
36270: EMPTY
36271: LIST
36272: LIST
36273: PUSH
36274: LD_INT 0
36276: PUSH
36277: LD_INT 1
36279: NEG
36280: PUSH
36281: EMPTY
36282: LIST
36283: LIST
36284: PUSH
36285: LD_INT 1
36287: PUSH
36288: LD_INT 0
36290: PUSH
36291: EMPTY
36292: LIST
36293: LIST
36294: PUSH
36295: LD_INT 1
36297: PUSH
36298: LD_INT 1
36300: PUSH
36301: EMPTY
36302: LIST
36303: LIST
36304: PUSH
36305: LD_INT 0
36307: PUSH
36308: LD_INT 1
36310: PUSH
36311: EMPTY
36312: LIST
36313: LIST
36314: PUSH
36315: LD_INT 1
36317: NEG
36318: PUSH
36319: LD_INT 0
36321: PUSH
36322: EMPTY
36323: LIST
36324: LIST
36325: PUSH
36326: LD_INT 1
36328: NEG
36329: PUSH
36330: LD_INT 1
36332: NEG
36333: PUSH
36334: EMPTY
36335: LIST
36336: LIST
36337: PUSH
36338: LD_INT 1
36340: NEG
36341: PUSH
36342: LD_INT 2
36344: NEG
36345: PUSH
36346: EMPTY
36347: LIST
36348: LIST
36349: PUSH
36350: LD_INT 0
36352: PUSH
36353: LD_INT 2
36355: NEG
36356: PUSH
36357: EMPTY
36358: LIST
36359: LIST
36360: PUSH
36361: LD_INT 1
36363: PUSH
36364: LD_INT 1
36366: NEG
36367: PUSH
36368: EMPTY
36369: LIST
36370: LIST
36371: PUSH
36372: LD_INT 2
36374: PUSH
36375: LD_INT 0
36377: PUSH
36378: EMPTY
36379: LIST
36380: LIST
36381: PUSH
36382: LD_INT 2
36384: PUSH
36385: LD_INT 1
36387: PUSH
36388: EMPTY
36389: LIST
36390: LIST
36391: PUSH
36392: LD_INT 2
36394: PUSH
36395: LD_INT 2
36397: PUSH
36398: EMPTY
36399: LIST
36400: LIST
36401: PUSH
36402: LD_INT 1
36404: PUSH
36405: LD_INT 2
36407: PUSH
36408: EMPTY
36409: LIST
36410: LIST
36411: PUSH
36412: LD_INT 0
36414: PUSH
36415: LD_INT 2
36417: PUSH
36418: EMPTY
36419: LIST
36420: LIST
36421: PUSH
36422: LD_INT 1
36424: NEG
36425: PUSH
36426: LD_INT 1
36428: PUSH
36429: EMPTY
36430: LIST
36431: LIST
36432: PUSH
36433: LD_INT 2
36435: NEG
36436: PUSH
36437: LD_INT 0
36439: PUSH
36440: EMPTY
36441: LIST
36442: LIST
36443: PUSH
36444: LD_INT 2
36446: NEG
36447: PUSH
36448: LD_INT 1
36450: NEG
36451: PUSH
36452: EMPTY
36453: LIST
36454: LIST
36455: PUSH
36456: LD_INT 2
36458: NEG
36459: PUSH
36460: LD_INT 2
36462: NEG
36463: PUSH
36464: EMPTY
36465: LIST
36466: LIST
36467: PUSH
36468: LD_INT 2
36470: PUSH
36471: LD_INT 3
36473: PUSH
36474: EMPTY
36475: LIST
36476: LIST
36477: PUSH
36478: LD_INT 1
36480: PUSH
36481: LD_INT 3
36483: PUSH
36484: EMPTY
36485: LIST
36486: LIST
36487: PUSH
36488: LD_INT 1
36490: NEG
36491: PUSH
36492: LD_INT 2
36494: PUSH
36495: EMPTY
36496: LIST
36497: LIST
36498: PUSH
36499: LD_INT 2
36501: NEG
36502: PUSH
36503: LD_INT 1
36505: PUSH
36506: EMPTY
36507: LIST
36508: LIST
36509: PUSH
36510: EMPTY
36511: LIST
36512: LIST
36513: LIST
36514: LIST
36515: LIST
36516: LIST
36517: LIST
36518: LIST
36519: LIST
36520: LIST
36521: LIST
36522: LIST
36523: LIST
36524: LIST
36525: LIST
36526: LIST
36527: LIST
36528: LIST
36529: LIST
36530: LIST
36531: LIST
36532: LIST
36533: LIST
36534: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
36535: LD_ADDR_VAR 0 27
36539: PUSH
36540: LD_INT 0
36542: PUSH
36543: LD_INT 0
36545: PUSH
36546: EMPTY
36547: LIST
36548: LIST
36549: PUSH
36550: LD_INT 0
36552: PUSH
36553: LD_INT 1
36555: NEG
36556: PUSH
36557: EMPTY
36558: LIST
36559: LIST
36560: PUSH
36561: LD_INT 1
36563: PUSH
36564: LD_INT 0
36566: PUSH
36567: EMPTY
36568: LIST
36569: LIST
36570: PUSH
36571: LD_INT 1
36573: PUSH
36574: LD_INT 1
36576: PUSH
36577: EMPTY
36578: LIST
36579: LIST
36580: PUSH
36581: LD_INT 0
36583: PUSH
36584: LD_INT 1
36586: PUSH
36587: EMPTY
36588: LIST
36589: LIST
36590: PUSH
36591: LD_INT 1
36593: NEG
36594: PUSH
36595: LD_INT 0
36597: PUSH
36598: EMPTY
36599: LIST
36600: LIST
36601: PUSH
36602: LD_INT 1
36604: NEG
36605: PUSH
36606: LD_INT 1
36608: NEG
36609: PUSH
36610: EMPTY
36611: LIST
36612: LIST
36613: PUSH
36614: LD_INT 1
36616: NEG
36617: PUSH
36618: LD_INT 2
36620: NEG
36621: PUSH
36622: EMPTY
36623: LIST
36624: LIST
36625: PUSH
36626: LD_INT 0
36628: PUSH
36629: LD_INT 2
36631: NEG
36632: PUSH
36633: EMPTY
36634: LIST
36635: LIST
36636: PUSH
36637: LD_INT 1
36639: PUSH
36640: LD_INT 1
36642: NEG
36643: PUSH
36644: EMPTY
36645: LIST
36646: LIST
36647: PUSH
36648: LD_INT 2
36650: PUSH
36651: LD_INT 0
36653: PUSH
36654: EMPTY
36655: LIST
36656: LIST
36657: PUSH
36658: LD_INT 2
36660: PUSH
36661: LD_INT 1
36663: PUSH
36664: EMPTY
36665: LIST
36666: LIST
36667: PUSH
36668: LD_INT 2
36670: PUSH
36671: LD_INT 2
36673: PUSH
36674: EMPTY
36675: LIST
36676: LIST
36677: PUSH
36678: LD_INT 1
36680: PUSH
36681: LD_INT 2
36683: PUSH
36684: EMPTY
36685: LIST
36686: LIST
36687: PUSH
36688: LD_INT 0
36690: PUSH
36691: LD_INT 2
36693: PUSH
36694: EMPTY
36695: LIST
36696: LIST
36697: PUSH
36698: LD_INT 1
36700: NEG
36701: PUSH
36702: LD_INT 1
36704: PUSH
36705: EMPTY
36706: LIST
36707: LIST
36708: PUSH
36709: LD_INT 2
36711: NEG
36712: PUSH
36713: LD_INT 0
36715: PUSH
36716: EMPTY
36717: LIST
36718: LIST
36719: PUSH
36720: LD_INT 2
36722: NEG
36723: PUSH
36724: LD_INT 1
36726: NEG
36727: PUSH
36728: EMPTY
36729: LIST
36730: LIST
36731: PUSH
36732: LD_INT 2
36734: NEG
36735: PUSH
36736: LD_INT 2
36738: NEG
36739: PUSH
36740: EMPTY
36741: LIST
36742: LIST
36743: PUSH
36744: LD_INT 1
36746: NEG
36747: PUSH
36748: LD_INT 2
36750: PUSH
36751: EMPTY
36752: LIST
36753: LIST
36754: PUSH
36755: LD_INT 2
36757: NEG
36758: PUSH
36759: LD_INT 1
36761: PUSH
36762: EMPTY
36763: LIST
36764: LIST
36765: PUSH
36766: LD_INT 3
36768: NEG
36769: PUSH
36770: LD_INT 1
36772: NEG
36773: PUSH
36774: EMPTY
36775: LIST
36776: LIST
36777: PUSH
36778: LD_INT 3
36780: NEG
36781: PUSH
36782: LD_INT 2
36784: NEG
36785: PUSH
36786: EMPTY
36787: LIST
36788: LIST
36789: PUSH
36790: EMPTY
36791: LIST
36792: LIST
36793: LIST
36794: LIST
36795: LIST
36796: LIST
36797: LIST
36798: LIST
36799: LIST
36800: LIST
36801: LIST
36802: LIST
36803: LIST
36804: LIST
36805: LIST
36806: LIST
36807: LIST
36808: LIST
36809: LIST
36810: LIST
36811: LIST
36812: LIST
36813: LIST
36814: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
36815: LD_ADDR_VAR 0 28
36819: PUSH
36820: LD_INT 0
36822: PUSH
36823: LD_INT 0
36825: PUSH
36826: EMPTY
36827: LIST
36828: LIST
36829: PUSH
36830: LD_INT 0
36832: PUSH
36833: LD_INT 1
36835: NEG
36836: PUSH
36837: EMPTY
36838: LIST
36839: LIST
36840: PUSH
36841: LD_INT 1
36843: PUSH
36844: LD_INT 0
36846: PUSH
36847: EMPTY
36848: LIST
36849: LIST
36850: PUSH
36851: LD_INT 1
36853: PUSH
36854: LD_INT 1
36856: PUSH
36857: EMPTY
36858: LIST
36859: LIST
36860: PUSH
36861: LD_INT 0
36863: PUSH
36864: LD_INT 1
36866: PUSH
36867: EMPTY
36868: LIST
36869: LIST
36870: PUSH
36871: LD_INT 1
36873: NEG
36874: PUSH
36875: LD_INT 0
36877: PUSH
36878: EMPTY
36879: LIST
36880: LIST
36881: PUSH
36882: LD_INT 1
36884: NEG
36885: PUSH
36886: LD_INT 1
36888: NEG
36889: PUSH
36890: EMPTY
36891: LIST
36892: LIST
36893: PUSH
36894: LD_INT 1
36896: NEG
36897: PUSH
36898: LD_INT 2
36900: NEG
36901: PUSH
36902: EMPTY
36903: LIST
36904: LIST
36905: PUSH
36906: LD_INT 0
36908: PUSH
36909: LD_INT 2
36911: NEG
36912: PUSH
36913: EMPTY
36914: LIST
36915: LIST
36916: PUSH
36917: LD_INT 1
36919: PUSH
36920: LD_INT 1
36922: NEG
36923: PUSH
36924: EMPTY
36925: LIST
36926: LIST
36927: PUSH
36928: LD_INT 2
36930: PUSH
36931: LD_INT 0
36933: PUSH
36934: EMPTY
36935: LIST
36936: LIST
36937: PUSH
36938: LD_INT 2
36940: PUSH
36941: LD_INT 1
36943: PUSH
36944: EMPTY
36945: LIST
36946: LIST
36947: PUSH
36948: LD_INT 2
36950: PUSH
36951: LD_INT 2
36953: PUSH
36954: EMPTY
36955: LIST
36956: LIST
36957: PUSH
36958: LD_INT 1
36960: PUSH
36961: LD_INT 2
36963: PUSH
36964: EMPTY
36965: LIST
36966: LIST
36967: PUSH
36968: LD_INT 0
36970: PUSH
36971: LD_INT 2
36973: PUSH
36974: EMPTY
36975: LIST
36976: LIST
36977: PUSH
36978: LD_INT 1
36980: NEG
36981: PUSH
36982: LD_INT 1
36984: PUSH
36985: EMPTY
36986: LIST
36987: LIST
36988: PUSH
36989: LD_INT 2
36991: NEG
36992: PUSH
36993: LD_INT 0
36995: PUSH
36996: EMPTY
36997: LIST
36998: LIST
36999: PUSH
37000: LD_INT 2
37002: NEG
37003: PUSH
37004: LD_INT 1
37006: NEG
37007: PUSH
37008: EMPTY
37009: LIST
37010: LIST
37011: PUSH
37012: LD_INT 2
37014: NEG
37015: PUSH
37016: LD_INT 2
37018: NEG
37019: PUSH
37020: EMPTY
37021: LIST
37022: LIST
37023: PUSH
37024: LD_INT 2
37026: NEG
37027: PUSH
37028: LD_INT 3
37030: NEG
37031: PUSH
37032: EMPTY
37033: LIST
37034: LIST
37035: PUSH
37036: LD_INT 1
37038: NEG
37039: PUSH
37040: LD_INT 3
37042: NEG
37043: PUSH
37044: EMPTY
37045: LIST
37046: LIST
37047: PUSH
37048: LD_INT 3
37050: NEG
37051: PUSH
37052: LD_INT 1
37054: NEG
37055: PUSH
37056: EMPTY
37057: LIST
37058: LIST
37059: PUSH
37060: LD_INT 3
37062: NEG
37063: PUSH
37064: LD_INT 2
37066: NEG
37067: PUSH
37068: EMPTY
37069: LIST
37070: LIST
37071: PUSH
37072: EMPTY
37073: LIST
37074: LIST
37075: LIST
37076: LIST
37077: LIST
37078: LIST
37079: LIST
37080: LIST
37081: LIST
37082: LIST
37083: LIST
37084: LIST
37085: LIST
37086: LIST
37087: LIST
37088: LIST
37089: LIST
37090: LIST
37091: LIST
37092: LIST
37093: LIST
37094: LIST
37095: LIST
37096: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
37097: LD_ADDR_VAR 0 29
37101: PUSH
37102: LD_INT 0
37104: PUSH
37105: LD_INT 0
37107: PUSH
37108: EMPTY
37109: LIST
37110: LIST
37111: PUSH
37112: LD_INT 0
37114: PUSH
37115: LD_INT 1
37117: NEG
37118: PUSH
37119: EMPTY
37120: LIST
37121: LIST
37122: PUSH
37123: LD_INT 1
37125: PUSH
37126: LD_INT 0
37128: PUSH
37129: EMPTY
37130: LIST
37131: LIST
37132: PUSH
37133: LD_INT 1
37135: PUSH
37136: LD_INT 1
37138: PUSH
37139: EMPTY
37140: LIST
37141: LIST
37142: PUSH
37143: LD_INT 0
37145: PUSH
37146: LD_INT 1
37148: PUSH
37149: EMPTY
37150: LIST
37151: LIST
37152: PUSH
37153: LD_INT 1
37155: NEG
37156: PUSH
37157: LD_INT 0
37159: PUSH
37160: EMPTY
37161: LIST
37162: LIST
37163: PUSH
37164: LD_INT 1
37166: NEG
37167: PUSH
37168: LD_INT 1
37170: NEG
37171: PUSH
37172: EMPTY
37173: LIST
37174: LIST
37175: PUSH
37176: LD_INT 1
37178: NEG
37179: PUSH
37180: LD_INT 2
37182: NEG
37183: PUSH
37184: EMPTY
37185: LIST
37186: LIST
37187: PUSH
37188: LD_INT 0
37190: PUSH
37191: LD_INT 2
37193: NEG
37194: PUSH
37195: EMPTY
37196: LIST
37197: LIST
37198: PUSH
37199: LD_INT 1
37201: PUSH
37202: LD_INT 1
37204: NEG
37205: PUSH
37206: EMPTY
37207: LIST
37208: LIST
37209: PUSH
37210: LD_INT 2
37212: PUSH
37213: LD_INT 0
37215: PUSH
37216: EMPTY
37217: LIST
37218: LIST
37219: PUSH
37220: LD_INT 2
37222: PUSH
37223: LD_INT 1
37225: PUSH
37226: EMPTY
37227: LIST
37228: LIST
37229: PUSH
37230: LD_INT 1
37232: PUSH
37233: LD_INT 2
37235: PUSH
37236: EMPTY
37237: LIST
37238: LIST
37239: PUSH
37240: LD_INT 0
37242: PUSH
37243: LD_INT 2
37245: PUSH
37246: EMPTY
37247: LIST
37248: LIST
37249: PUSH
37250: LD_INT 1
37252: NEG
37253: PUSH
37254: LD_INT 1
37256: PUSH
37257: EMPTY
37258: LIST
37259: LIST
37260: PUSH
37261: LD_INT 2
37263: NEG
37264: PUSH
37265: LD_INT 1
37267: NEG
37268: PUSH
37269: EMPTY
37270: LIST
37271: LIST
37272: PUSH
37273: LD_INT 2
37275: NEG
37276: PUSH
37277: LD_INT 2
37279: NEG
37280: PUSH
37281: EMPTY
37282: LIST
37283: LIST
37284: PUSH
37285: LD_INT 2
37287: NEG
37288: PUSH
37289: LD_INT 3
37291: NEG
37292: PUSH
37293: EMPTY
37294: LIST
37295: LIST
37296: PUSH
37297: LD_INT 2
37299: PUSH
37300: LD_INT 1
37302: NEG
37303: PUSH
37304: EMPTY
37305: LIST
37306: LIST
37307: PUSH
37308: LD_INT 3
37310: PUSH
37311: LD_INT 1
37313: PUSH
37314: EMPTY
37315: LIST
37316: LIST
37317: PUSH
37318: LD_INT 1
37320: PUSH
37321: LD_INT 3
37323: PUSH
37324: EMPTY
37325: LIST
37326: LIST
37327: PUSH
37328: LD_INT 1
37330: NEG
37331: PUSH
37332: LD_INT 2
37334: PUSH
37335: EMPTY
37336: LIST
37337: LIST
37338: PUSH
37339: LD_INT 3
37341: NEG
37342: PUSH
37343: LD_INT 2
37345: NEG
37346: PUSH
37347: EMPTY
37348: LIST
37349: LIST
37350: PUSH
37351: EMPTY
37352: LIST
37353: LIST
37354: LIST
37355: LIST
37356: LIST
37357: LIST
37358: LIST
37359: LIST
37360: LIST
37361: LIST
37362: LIST
37363: LIST
37364: LIST
37365: LIST
37366: LIST
37367: LIST
37368: LIST
37369: LIST
37370: LIST
37371: LIST
37372: LIST
37373: LIST
37374: LIST
37375: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37376: LD_ADDR_VAR 0 30
37380: PUSH
37381: LD_INT 0
37383: PUSH
37384: LD_INT 0
37386: PUSH
37387: EMPTY
37388: LIST
37389: LIST
37390: PUSH
37391: LD_INT 0
37393: PUSH
37394: LD_INT 1
37396: NEG
37397: PUSH
37398: EMPTY
37399: LIST
37400: LIST
37401: PUSH
37402: LD_INT 1
37404: PUSH
37405: LD_INT 0
37407: PUSH
37408: EMPTY
37409: LIST
37410: LIST
37411: PUSH
37412: LD_INT 1
37414: PUSH
37415: LD_INT 1
37417: PUSH
37418: EMPTY
37419: LIST
37420: LIST
37421: PUSH
37422: LD_INT 0
37424: PUSH
37425: LD_INT 1
37427: PUSH
37428: EMPTY
37429: LIST
37430: LIST
37431: PUSH
37432: LD_INT 1
37434: NEG
37435: PUSH
37436: LD_INT 0
37438: PUSH
37439: EMPTY
37440: LIST
37441: LIST
37442: PUSH
37443: LD_INT 1
37445: NEG
37446: PUSH
37447: LD_INT 1
37449: NEG
37450: PUSH
37451: EMPTY
37452: LIST
37453: LIST
37454: PUSH
37455: LD_INT 1
37457: NEG
37458: PUSH
37459: LD_INT 2
37461: NEG
37462: PUSH
37463: EMPTY
37464: LIST
37465: LIST
37466: PUSH
37467: LD_INT 0
37469: PUSH
37470: LD_INT 2
37472: NEG
37473: PUSH
37474: EMPTY
37475: LIST
37476: LIST
37477: PUSH
37478: LD_INT 1
37480: PUSH
37481: LD_INT 1
37483: NEG
37484: PUSH
37485: EMPTY
37486: LIST
37487: LIST
37488: PUSH
37489: LD_INT 2
37491: PUSH
37492: LD_INT 0
37494: PUSH
37495: EMPTY
37496: LIST
37497: LIST
37498: PUSH
37499: LD_INT 2
37501: PUSH
37502: LD_INT 1
37504: PUSH
37505: EMPTY
37506: LIST
37507: LIST
37508: PUSH
37509: LD_INT 2
37511: PUSH
37512: LD_INT 2
37514: PUSH
37515: EMPTY
37516: LIST
37517: LIST
37518: PUSH
37519: LD_INT 1
37521: PUSH
37522: LD_INT 2
37524: PUSH
37525: EMPTY
37526: LIST
37527: LIST
37528: PUSH
37529: LD_INT 1
37531: NEG
37532: PUSH
37533: LD_INT 1
37535: PUSH
37536: EMPTY
37537: LIST
37538: LIST
37539: PUSH
37540: LD_INT 2
37542: NEG
37543: PUSH
37544: LD_INT 0
37546: PUSH
37547: EMPTY
37548: LIST
37549: LIST
37550: PUSH
37551: LD_INT 2
37553: NEG
37554: PUSH
37555: LD_INT 1
37557: NEG
37558: PUSH
37559: EMPTY
37560: LIST
37561: LIST
37562: PUSH
37563: LD_INT 1
37565: NEG
37566: PUSH
37567: LD_INT 3
37569: NEG
37570: PUSH
37571: EMPTY
37572: LIST
37573: LIST
37574: PUSH
37575: LD_INT 1
37577: PUSH
37578: LD_INT 2
37580: NEG
37581: PUSH
37582: EMPTY
37583: LIST
37584: LIST
37585: PUSH
37586: LD_INT 3
37588: PUSH
37589: LD_INT 2
37591: PUSH
37592: EMPTY
37593: LIST
37594: LIST
37595: PUSH
37596: LD_INT 2
37598: PUSH
37599: LD_INT 3
37601: PUSH
37602: EMPTY
37603: LIST
37604: LIST
37605: PUSH
37606: LD_INT 2
37608: NEG
37609: PUSH
37610: LD_INT 1
37612: PUSH
37613: EMPTY
37614: LIST
37615: LIST
37616: PUSH
37617: LD_INT 3
37619: NEG
37620: PUSH
37621: LD_INT 1
37623: NEG
37624: PUSH
37625: EMPTY
37626: LIST
37627: LIST
37628: PUSH
37629: EMPTY
37630: LIST
37631: LIST
37632: LIST
37633: LIST
37634: LIST
37635: LIST
37636: LIST
37637: LIST
37638: LIST
37639: LIST
37640: LIST
37641: LIST
37642: LIST
37643: LIST
37644: LIST
37645: LIST
37646: LIST
37647: LIST
37648: LIST
37649: LIST
37650: LIST
37651: LIST
37652: LIST
37653: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
37654: LD_ADDR_VAR 0 31
37658: PUSH
37659: LD_INT 0
37661: PUSH
37662: LD_INT 0
37664: PUSH
37665: EMPTY
37666: LIST
37667: LIST
37668: PUSH
37669: LD_INT 0
37671: PUSH
37672: LD_INT 1
37674: NEG
37675: PUSH
37676: EMPTY
37677: LIST
37678: LIST
37679: PUSH
37680: LD_INT 1
37682: PUSH
37683: LD_INT 0
37685: PUSH
37686: EMPTY
37687: LIST
37688: LIST
37689: PUSH
37690: LD_INT 1
37692: PUSH
37693: LD_INT 1
37695: PUSH
37696: EMPTY
37697: LIST
37698: LIST
37699: PUSH
37700: LD_INT 0
37702: PUSH
37703: LD_INT 1
37705: PUSH
37706: EMPTY
37707: LIST
37708: LIST
37709: PUSH
37710: LD_INT 1
37712: NEG
37713: PUSH
37714: LD_INT 0
37716: PUSH
37717: EMPTY
37718: LIST
37719: LIST
37720: PUSH
37721: LD_INT 1
37723: NEG
37724: PUSH
37725: LD_INT 1
37727: NEG
37728: PUSH
37729: EMPTY
37730: LIST
37731: LIST
37732: PUSH
37733: LD_INT 1
37735: NEG
37736: PUSH
37737: LD_INT 2
37739: NEG
37740: PUSH
37741: EMPTY
37742: LIST
37743: LIST
37744: PUSH
37745: LD_INT 1
37747: PUSH
37748: LD_INT 1
37750: NEG
37751: PUSH
37752: EMPTY
37753: LIST
37754: LIST
37755: PUSH
37756: LD_INT 2
37758: PUSH
37759: LD_INT 0
37761: PUSH
37762: EMPTY
37763: LIST
37764: LIST
37765: PUSH
37766: LD_INT 2
37768: PUSH
37769: LD_INT 1
37771: PUSH
37772: EMPTY
37773: LIST
37774: LIST
37775: PUSH
37776: LD_INT 2
37778: PUSH
37779: LD_INT 2
37781: PUSH
37782: EMPTY
37783: LIST
37784: LIST
37785: PUSH
37786: LD_INT 1
37788: PUSH
37789: LD_INT 2
37791: PUSH
37792: EMPTY
37793: LIST
37794: LIST
37795: PUSH
37796: LD_INT 0
37798: PUSH
37799: LD_INT 2
37801: PUSH
37802: EMPTY
37803: LIST
37804: LIST
37805: PUSH
37806: LD_INT 1
37808: NEG
37809: PUSH
37810: LD_INT 1
37812: PUSH
37813: EMPTY
37814: LIST
37815: LIST
37816: PUSH
37817: LD_INT 2
37819: NEG
37820: PUSH
37821: LD_INT 1
37823: NEG
37824: PUSH
37825: EMPTY
37826: LIST
37827: LIST
37828: PUSH
37829: LD_INT 2
37831: NEG
37832: PUSH
37833: LD_INT 2
37835: NEG
37836: PUSH
37837: EMPTY
37838: LIST
37839: LIST
37840: PUSH
37841: LD_INT 2
37843: NEG
37844: PUSH
37845: LD_INT 3
37847: NEG
37848: PUSH
37849: EMPTY
37850: LIST
37851: LIST
37852: PUSH
37853: LD_INT 2
37855: PUSH
37856: LD_INT 1
37858: NEG
37859: PUSH
37860: EMPTY
37861: LIST
37862: LIST
37863: PUSH
37864: LD_INT 3
37866: PUSH
37867: LD_INT 1
37869: PUSH
37870: EMPTY
37871: LIST
37872: LIST
37873: PUSH
37874: LD_INT 1
37876: PUSH
37877: LD_INT 3
37879: PUSH
37880: EMPTY
37881: LIST
37882: LIST
37883: PUSH
37884: LD_INT 1
37886: NEG
37887: PUSH
37888: LD_INT 2
37890: PUSH
37891: EMPTY
37892: LIST
37893: LIST
37894: PUSH
37895: LD_INT 3
37897: NEG
37898: PUSH
37899: LD_INT 2
37901: NEG
37902: PUSH
37903: EMPTY
37904: LIST
37905: LIST
37906: PUSH
37907: EMPTY
37908: LIST
37909: LIST
37910: LIST
37911: LIST
37912: LIST
37913: LIST
37914: LIST
37915: LIST
37916: LIST
37917: LIST
37918: LIST
37919: LIST
37920: LIST
37921: LIST
37922: LIST
37923: LIST
37924: LIST
37925: LIST
37926: LIST
37927: LIST
37928: LIST
37929: LIST
37930: LIST
37931: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37932: LD_ADDR_VAR 0 32
37936: PUSH
37937: LD_INT 0
37939: PUSH
37940: LD_INT 0
37942: PUSH
37943: EMPTY
37944: LIST
37945: LIST
37946: PUSH
37947: LD_INT 0
37949: PUSH
37950: LD_INT 1
37952: NEG
37953: PUSH
37954: EMPTY
37955: LIST
37956: LIST
37957: PUSH
37958: LD_INT 1
37960: PUSH
37961: LD_INT 0
37963: PUSH
37964: EMPTY
37965: LIST
37966: LIST
37967: PUSH
37968: LD_INT 1
37970: PUSH
37971: LD_INT 1
37973: PUSH
37974: EMPTY
37975: LIST
37976: LIST
37977: PUSH
37978: LD_INT 0
37980: PUSH
37981: LD_INT 1
37983: PUSH
37984: EMPTY
37985: LIST
37986: LIST
37987: PUSH
37988: LD_INT 1
37990: NEG
37991: PUSH
37992: LD_INT 0
37994: PUSH
37995: EMPTY
37996: LIST
37997: LIST
37998: PUSH
37999: LD_INT 1
38001: NEG
38002: PUSH
38003: LD_INT 1
38005: NEG
38006: PUSH
38007: EMPTY
38008: LIST
38009: LIST
38010: PUSH
38011: LD_INT 1
38013: NEG
38014: PUSH
38015: LD_INT 2
38017: NEG
38018: PUSH
38019: EMPTY
38020: LIST
38021: LIST
38022: PUSH
38023: LD_INT 0
38025: PUSH
38026: LD_INT 2
38028: NEG
38029: PUSH
38030: EMPTY
38031: LIST
38032: LIST
38033: PUSH
38034: LD_INT 1
38036: PUSH
38037: LD_INT 1
38039: NEG
38040: PUSH
38041: EMPTY
38042: LIST
38043: LIST
38044: PUSH
38045: LD_INT 2
38047: PUSH
38048: LD_INT 1
38050: PUSH
38051: EMPTY
38052: LIST
38053: LIST
38054: PUSH
38055: LD_INT 2
38057: PUSH
38058: LD_INT 2
38060: PUSH
38061: EMPTY
38062: LIST
38063: LIST
38064: PUSH
38065: LD_INT 1
38067: PUSH
38068: LD_INT 2
38070: PUSH
38071: EMPTY
38072: LIST
38073: LIST
38074: PUSH
38075: LD_INT 0
38077: PUSH
38078: LD_INT 2
38080: PUSH
38081: EMPTY
38082: LIST
38083: LIST
38084: PUSH
38085: LD_INT 1
38087: NEG
38088: PUSH
38089: LD_INT 1
38091: PUSH
38092: EMPTY
38093: LIST
38094: LIST
38095: PUSH
38096: LD_INT 2
38098: NEG
38099: PUSH
38100: LD_INT 0
38102: PUSH
38103: EMPTY
38104: LIST
38105: LIST
38106: PUSH
38107: LD_INT 2
38109: NEG
38110: PUSH
38111: LD_INT 1
38113: NEG
38114: PUSH
38115: EMPTY
38116: LIST
38117: LIST
38118: PUSH
38119: LD_INT 1
38121: NEG
38122: PUSH
38123: LD_INT 3
38125: NEG
38126: PUSH
38127: EMPTY
38128: LIST
38129: LIST
38130: PUSH
38131: LD_INT 1
38133: PUSH
38134: LD_INT 2
38136: NEG
38137: PUSH
38138: EMPTY
38139: LIST
38140: LIST
38141: PUSH
38142: LD_INT 3
38144: PUSH
38145: LD_INT 2
38147: PUSH
38148: EMPTY
38149: LIST
38150: LIST
38151: PUSH
38152: LD_INT 2
38154: PUSH
38155: LD_INT 3
38157: PUSH
38158: EMPTY
38159: LIST
38160: LIST
38161: PUSH
38162: LD_INT 2
38164: NEG
38165: PUSH
38166: LD_INT 1
38168: PUSH
38169: EMPTY
38170: LIST
38171: LIST
38172: PUSH
38173: LD_INT 3
38175: NEG
38176: PUSH
38177: LD_INT 1
38179: NEG
38180: PUSH
38181: EMPTY
38182: LIST
38183: LIST
38184: PUSH
38185: EMPTY
38186: LIST
38187: LIST
38188: LIST
38189: LIST
38190: LIST
38191: LIST
38192: LIST
38193: LIST
38194: LIST
38195: LIST
38196: LIST
38197: LIST
38198: LIST
38199: LIST
38200: LIST
38201: LIST
38202: LIST
38203: LIST
38204: LIST
38205: LIST
38206: LIST
38207: LIST
38208: LIST
38209: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38210: LD_ADDR_VAR 0 33
38214: PUSH
38215: LD_INT 0
38217: PUSH
38218: LD_INT 0
38220: PUSH
38221: EMPTY
38222: LIST
38223: LIST
38224: PUSH
38225: LD_INT 0
38227: PUSH
38228: LD_INT 1
38230: NEG
38231: PUSH
38232: EMPTY
38233: LIST
38234: LIST
38235: PUSH
38236: LD_INT 1
38238: PUSH
38239: LD_INT 0
38241: PUSH
38242: EMPTY
38243: LIST
38244: LIST
38245: PUSH
38246: LD_INT 1
38248: PUSH
38249: LD_INT 1
38251: PUSH
38252: EMPTY
38253: LIST
38254: LIST
38255: PUSH
38256: LD_INT 0
38258: PUSH
38259: LD_INT 1
38261: PUSH
38262: EMPTY
38263: LIST
38264: LIST
38265: PUSH
38266: LD_INT 1
38268: NEG
38269: PUSH
38270: LD_INT 0
38272: PUSH
38273: EMPTY
38274: LIST
38275: LIST
38276: PUSH
38277: LD_INT 1
38279: NEG
38280: PUSH
38281: LD_INT 1
38283: NEG
38284: PUSH
38285: EMPTY
38286: LIST
38287: LIST
38288: PUSH
38289: LD_INT 1
38291: NEG
38292: PUSH
38293: LD_INT 2
38295: NEG
38296: PUSH
38297: EMPTY
38298: LIST
38299: LIST
38300: PUSH
38301: LD_INT 1
38303: PUSH
38304: LD_INT 1
38306: NEG
38307: PUSH
38308: EMPTY
38309: LIST
38310: LIST
38311: PUSH
38312: LD_INT 2
38314: PUSH
38315: LD_INT 0
38317: PUSH
38318: EMPTY
38319: LIST
38320: LIST
38321: PUSH
38322: LD_INT 2
38324: PUSH
38325: LD_INT 1
38327: PUSH
38328: EMPTY
38329: LIST
38330: LIST
38331: PUSH
38332: LD_INT 1
38334: PUSH
38335: LD_INT 2
38337: PUSH
38338: EMPTY
38339: LIST
38340: LIST
38341: PUSH
38342: LD_INT 0
38344: PUSH
38345: LD_INT 2
38347: PUSH
38348: EMPTY
38349: LIST
38350: LIST
38351: PUSH
38352: LD_INT 1
38354: NEG
38355: PUSH
38356: LD_INT 1
38358: PUSH
38359: EMPTY
38360: LIST
38361: LIST
38362: PUSH
38363: LD_INT 2
38365: NEG
38366: PUSH
38367: LD_INT 0
38369: PUSH
38370: EMPTY
38371: LIST
38372: LIST
38373: PUSH
38374: LD_INT 2
38376: NEG
38377: PUSH
38378: LD_INT 1
38380: NEG
38381: PUSH
38382: EMPTY
38383: LIST
38384: LIST
38385: PUSH
38386: LD_INT 2
38388: NEG
38389: PUSH
38390: LD_INT 2
38392: NEG
38393: PUSH
38394: EMPTY
38395: LIST
38396: LIST
38397: PUSH
38398: LD_INT 2
38400: NEG
38401: PUSH
38402: LD_INT 3
38404: NEG
38405: PUSH
38406: EMPTY
38407: LIST
38408: LIST
38409: PUSH
38410: LD_INT 2
38412: PUSH
38413: LD_INT 1
38415: NEG
38416: PUSH
38417: EMPTY
38418: LIST
38419: LIST
38420: PUSH
38421: LD_INT 3
38423: PUSH
38424: LD_INT 1
38426: PUSH
38427: EMPTY
38428: LIST
38429: LIST
38430: PUSH
38431: LD_INT 1
38433: PUSH
38434: LD_INT 3
38436: PUSH
38437: EMPTY
38438: LIST
38439: LIST
38440: PUSH
38441: LD_INT 1
38443: NEG
38444: PUSH
38445: LD_INT 2
38447: PUSH
38448: EMPTY
38449: LIST
38450: LIST
38451: PUSH
38452: LD_INT 3
38454: NEG
38455: PUSH
38456: LD_INT 2
38458: NEG
38459: PUSH
38460: EMPTY
38461: LIST
38462: LIST
38463: PUSH
38464: EMPTY
38465: LIST
38466: LIST
38467: LIST
38468: LIST
38469: LIST
38470: LIST
38471: LIST
38472: LIST
38473: LIST
38474: LIST
38475: LIST
38476: LIST
38477: LIST
38478: LIST
38479: LIST
38480: LIST
38481: LIST
38482: LIST
38483: LIST
38484: LIST
38485: LIST
38486: LIST
38487: LIST
38488: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38489: LD_ADDR_VAR 0 34
38493: PUSH
38494: LD_INT 0
38496: PUSH
38497: LD_INT 0
38499: PUSH
38500: EMPTY
38501: LIST
38502: LIST
38503: PUSH
38504: LD_INT 0
38506: PUSH
38507: LD_INT 1
38509: NEG
38510: PUSH
38511: EMPTY
38512: LIST
38513: LIST
38514: PUSH
38515: LD_INT 1
38517: PUSH
38518: LD_INT 0
38520: PUSH
38521: EMPTY
38522: LIST
38523: LIST
38524: PUSH
38525: LD_INT 1
38527: PUSH
38528: LD_INT 1
38530: PUSH
38531: EMPTY
38532: LIST
38533: LIST
38534: PUSH
38535: LD_INT 0
38537: PUSH
38538: LD_INT 1
38540: PUSH
38541: EMPTY
38542: LIST
38543: LIST
38544: PUSH
38545: LD_INT 1
38547: NEG
38548: PUSH
38549: LD_INT 0
38551: PUSH
38552: EMPTY
38553: LIST
38554: LIST
38555: PUSH
38556: LD_INT 1
38558: NEG
38559: PUSH
38560: LD_INT 1
38562: NEG
38563: PUSH
38564: EMPTY
38565: LIST
38566: LIST
38567: PUSH
38568: LD_INT 1
38570: NEG
38571: PUSH
38572: LD_INT 2
38574: NEG
38575: PUSH
38576: EMPTY
38577: LIST
38578: LIST
38579: PUSH
38580: LD_INT 0
38582: PUSH
38583: LD_INT 2
38585: NEG
38586: PUSH
38587: EMPTY
38588: LIST
38589: LIST
38590: PUSH
38591: LD_INT 1
38593: PUSH
38594: LD_INT 1
38596: NEG
38597: PUSH
38598: EMPTY
38599: LIST
38600: LIST
38601: PUSH
38602: LD_INT 2
38604: PUSH
38605: LD_INT 1
38607: PUSH
38608: EMPTY
38609: LIST
38610: LIST
38611: PUSH
38612: LD_INT 2
38614: PUSH
38615: LD_INT 2
38617: PUSH
38618: EMPTY
38619: LIST
38620: LIST
38621: PUSH
38622: LD_INT 1
38624: PUSH
38625: LD_INT 2
38627: PUSH
38628: EMPTY
38629: LIST
38630: LIST
38631: PUSH
38632: LD_INT 1
38634: NEG
38635: PUSH
38636: LD_INT 1
38638: PUSH
38639: EMPTY
38640: LIST
38641: LIST
38642: PUSH
38643: LD_INT 2
38645: NEG
38646: PUSH
38647: LD_INT 0
38649: PUSH
38650: EMPTY
38651: LIST
38652: LIST
38653: PUSH
38654: LD_INT 2
38656: NEG
38657: PUSH
38658: LD_INT 1
38660: NEG
38661: PUSH
38662: EMPTY
38663: LIST
38664: LIST
38665: PUSH
38666: LD_INT 2
38668: NEG
38669: PUSH
38670: LD_INT 2
38672: NEG
38673: PUSH
38674: EMPTY
38675: LIST
38676: LIST
38677: PUSH
38678: LD_INT 1
38680: NEG
38681: PUSH
38682: LD_INT 3
38684: NEG
38685: PUSH
38686: EMPTY
38687: LIST
38688: LIST
38689: PUSH
38690: LD_INT 1
38692: PUSH
38693: LD_INT 2
38695: NEG
38696: PUSH
38697: EMPTY
38698: LIST
38699: LIST
38700: PUSH
38701: LD_INT 3
38703: PUSH
38704: LD_INT 2
38706: PUSH
38707: EMPTY
38708: LIST
38709: LIST
38710: PUSH
38711: LD_INT 2
38713: PUSH
38714: LD_INT 3
38716: PUSH
38717: EMPTY
38718: LIST
38719: LIST
38720: PUSH
38721: LD_INT 2
38723: NEG
38724: PUSH
38725: LD_INT 1
38727: PUSH
38728: EMPTY
38729: LIST
38730: LIST
38731: PUSH
38732: LD_INT 3
38734: NEG
38735: PUSH
38736: LD_INT 1
38738: NEG
38739: PUSH
38740: EMPTY
38741: LIST
38742: LIST
38743: PUSH
38744: EMPTY
38745: LIST
38746: LIST
38747: LIST
38748: LIST
38749: LIST
38750: LIST
38751: LIST
38752: LIST
38753: LIST
38754: LIST
38755: LIST
38756: LIST
38757: LIST
38758: LIST
38759: LIST
38760: LIST
38761: LIST
38762: LIST
38763: LIST
38764: LIST
38765: LIST
38766: LIST
38767: LIST
38768: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
38769: LD_ADDR_VAR 0 35
38773: PUSH
38774: LD_INT 0
38776: PUSH
38777: LD_INT 0
38779: PUSH
38780: EMPTY
38781: LIST
38782: LIST
38783: PUSH
38784: LD_INT 0
38786: PUSH
38787: LD_INT 1
38789: NEG
38790: PUSH
38791: EMPTY
38792: LIST
38793: LIST
38794: PUSH
38795: LD_INT 1
38797: PUSH
38798: LD_INT 0
38800: PUSH
38801: EMPTY
38802: LIST
38803: LIST
38804: PUSH
38805: LD_INT 1
38807: PUSH
38808: LD_INT 1
38810: PUSH
38811: EMPTY
38812: LIST
38813: LIST
38814: PUSH
38815: LD_INT 0
38817: PUSH
38818: LD_INT 1
38820: PUSH
38821: EMPTY
38822: LIST
38823: LIST
38824: PUSH
38825: LD_INT 1
38827: NEG
38828: PUSH
38829: LD_INT 0
38831: PUSH
38832: EMPTY
38833: LIST
38834: LIST
38835: PUSH
38836: LD_INT 1
38838: NEG
38839: PUSH
38840: LD_INT 1
38842: NEG
38843: PUSH
38844: EMPTY
38845: LIST
38846: LIST
38847: PUSH
38848: LD_INT 2
38850: PUSH
38851: LD_INT 1
38853: PUSH
38854: EMPTY
38855: LIST
38856: LIST
38857: PUSH
38858: LD_INT 2
38860: NEG
38861: PUSH
38862: LD_INT 1
38864: NEG
38865: PUSH
38866: EMPTY
38867: LIST
38868: LIST
38869: PUSH
38870: EMPTY
38871: LIST
38872: LIST
38873: LIST
38874: LIST
38875: LIST
38876: LIST
38877: LIST
38878: LIST
38879: LIST
38880: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
38881: LD_ADDR_VAR 0 36
38885: PUSH
38886: LD_INT 0
38888: PUSH
38889: LD_INT 0
38891: PUSH
38892: EMPTY
38893: LIST
38894: LIST
38895: PUSH
38896: LD_INT 0
38898: PUSH
38899: LD_INT 1
38901: NEG
38902: PUSH
38903: EMPTY
38904: LIST
38905: LIST
38906: PUSH
38907: LD_INT 1
38909: PUSH
38910: LD_INT 0
38912: PUSH
38913: EMPTY
38914: LIST
38915: LIST
38916: PUSH
38917: LD_INT 1
38919: PUSH
38920: LD_INT 1
38922: PUSH
38923: EMPTY
38924: LIST
38925: LIST
38926: PUSH
38927: LD_INT 0
38929: PUSH
38930: LD_INT 1
38932: PUSH
38933: EMPTY
38934: LIST
38935: LIST
38936: PUSH
38937: LD_INT 1
38939: NEG
38940: PUSH
38941: LD_INT 0
38943: PUSH
38944: EMPTY
38945: LIST
38946: LIST
38947: PUSH
38948: LD_INT 1
38950: NEG
38951: PUSH
38952: LD_INT 1
38954: NEG
38955: PUSH
38956: EMPTY
38957: LIST
38958: LIST
38959: PUSH
38960: LD_INT 1
38962: NEG
38963: PUSH
38964: LD_INT 2
38966: NEG
38967: PUSH
38968: EMPTY
38969: LIST
38970: LIST
38971: PUSH
38972: LD_INT 1
38974: PUSH
38975: LD_INT 2
38977: PUSH
38978: EMPTY
38979: LIST
38980: LIST
38981: PUSH
38982: EMPTY
38983: LIST
38984: LIST
38985: LIST
38986: LIST
38987: LIST
38988: LIST
38989: LIST
38990: LIST
38991: LIST
38992: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
38993: LD_ADDR_VAR 0 37
38997: PUSH
38998: LD_INT 0
39000: PUSH
39001: LD_INT 0
39003: PUSH
39004: EMPTY
39005: LIST
39006: LIST
39007: PUSH
39008: LD_INT 0
39010: PUSH
39011: LD_INT 1
39013: NEG
39014: PUSH
39015: EMPTY
39016: LIST
39017: LIST
39018: PUSH
39019: LD_INT 1
39021: PUSH
39022: LD_INT 0
39024: PUSH
39025: EMPTY
39026: LIST
39027: LIST
39028: PUSH
39029: LD_INT 1
39031: PUSH
39032: LD_INT 1
39034: PUSH
39035: EMPTY
39036: LIST
39037: LIST
39038: PUSH
39039: LD_INT 0
39041: PUSH
39042: LD_INT 1
39044: PUSH
39045: EMPTY
39046: LIST
39047: LIST
39048: PUSH
39049: LD_INT 1
39051: NEG
39052: PUSH
39053: LD_INT 0
39055: PUSH
39056: EMPTY
39057: LIST
39058: LIST
39059: PUSH
39060: LD_INT 1
39062: NEG
39063: PUSH
39064: LD_INT 1
39066: NEG
39067: PUSH
39068: EMPTY
39069: LIST
39070: LIST
39071: PUSH
39072: LD_INT 1
39074: PUSH
39075: LD_INT 1
39077: NEG
39078: PUSH
39079: EMPTY
39080: LIST
39081: LIST
39082: PUSH
39083: LD_INT 1
39085: NEG
39086: PUSH
39087: LD_INT 1
39089: PUSH
39090: EMPTY
39091: LIST
39092: LIST
39093: PUSH
39094: EMPTY
39095: LIST
39096: LIST
39097: LIST
39098: LIST
39099: LIST
39100: LIST
39101: LIST
39102: LIST
39103: LIST
39104: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
39105: LD_ADDR_VAR 0 38
39109: PUSH
39110: LD_INT 0
39112: PUSH
39113: LD_INT 0
39115: PUSH
39116: EMPTY
39117: LIST
39118: LIST
39119: PUSH
39120: LD_INT 0
39122: PUSH
39123: LD_INT 1
39125: NEG
39126: PUSH
39127: EMPTY
39128: LIST
39129: LIST
39130: PUSH
39131: LD_INT 1
39133: PUSH
39134: LD_INT 0
39136: PUSH
39137: EMPTY
39138: LIST
39139: LIST
39140: PUSH
39141: LD_INT 1
39143: PUSH
39144: LD_INT 1
39146: PUSH
39147: EMPTY
39148: LIST
39149: LIST
39150: PUSH
39151: LD_INT 0
39153: PUSH
39154: LD_INT 1
39156: PUSH
39157: EMPTY
39158: LIST
39159: LIST
39160: PUSH
39161: LD_INT 1
39163: NEG
39164: PUSH
39165: LD_INT 0
39167: PUSH
39168: EMPTY
39169: LIST
39170: LIST
39171: PUSH
39172: LD_INT 1
39174: NEG
39175: PUSH
39176: LD_INT 1
39178: NEG
39179: PUSH
39180: EMPTY
39181: LIST
39182: LIST
39183: PUSH
39184: LD_INT 2
39186: PUSH
39187: LD_INT 1
39189: PUSH
39190: EMPTY
39191: LIST
39192: LIST
39193: PUSH
39194: LD_INT 2
39196: NEG
39197: PUSH
39198: LD_INT 1
39200: NEG
39201: PUSH
39202: EMPTY
39203: LIST
39204: LIST
39205: PUSH
39206: EMPTY
39207: LIST
39208: LIST
39209: LIST
39210: LIST
39211: LIST
39212: LIST
39213: LIST
39214: LIST
39215: LIST
39216: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
39217: LD_ADDR_VAR 0 39
39221: PUSH
39222: LD_INT 0
39224: PUSH
39225: LD_INT 0
39227: PUSH
39228: EMPTY
39229: LIST
39230: LIST
39231: PUSH
39232: LD_INT 0
39234: PUSH
39235: LD_INT 1
39237: NEG
39238: PUSH
39239: EMPTY
39240: LIST
39241: LIST
39242: PUSH
39243: LD_INT 1
39245: PUSH
39246: LD_INT 0
39248: PUSH
39249: EMPTY
39250: LIST
39251: LIST
39252: PUSH
39253: LD_INT 1
39255: PUSH
39256: LD_INT 1
39258: PUSH
39259: EMPTY
39260: LIST
39261: LIST
39262: PUSH
39263: LD_INT 0
39265: PUSH
39266: LD_INT 1
39268: PUSH
39269: EMPTY
39270: LIST
39271: LIST
39272: PUSH
39273: LD_INT 1
39275: NEG
39276: PUSH
39277: LD_INT 0
39279: PUSH
39280: EMPTY
39281: LIST
39282: LIST
39283: PUSH
39284: LD_INT 1
39286: NEG
39287: PUSH
39288: LD_INT 1
39290: NEG
39291: PUSH
39292: EMPTY
39293: LIST
39294: LIST
39295: PUSH
39296: LD_INT 1
39298: NEG
39299: PUSH
39300: LD_INT 2
39302: NEG
39303: PUSH
39304: EMPTY
39305: LIST
39306: LIST
39307: PUSH
39308: LD_INT 1
39310: PUSH
39311: LD_INT 2
39313: PUSH
39314: EMPTY
39315: LIST
39316: LIST
39317: PUSH
39318: EMPTY
39319: LIST
39320: LIST
39321: LIST
39322: LIST
39323: LIST
39324: LIST
39325: LIST
39326: LIST
39327: LIST
39328: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
39329: LD_ADDR_VAR 0 40
39333: PUSH
39334: LD_INT 0
39336: PUSH
39337: LD_INT 0
39339: PUSH
39340: EMPTY
39341: LIST
39342: LIST
39343: PUSH
39344: LD_INT 0
39346: PUSH
39347: LD_INT 1
39349: NEG
39350: PUSH
39351: EMPTY
39352: LIST
39353: LIST
39354: PUSH
39355: LD_INT 1
39357: PUSH
39358: LD_INT 0
39360: PUSH
39361: EMPTY
39362: LIST
39363: LIST
39364: PUSH
39365: LD_INT 1
39367: PUSH
39368: LD_INT 1
39370: PUSH
39371: EMPTY
39372: LIST
39373: LIST
39374: PUSH
39375: LD_INT 0
39377: PUSH
39378: LD_INT 1
39380: PUSH
39381: EMPTY
39382: LIST
39383: LIST
39384: PUSH
39385: LD_INT 1
39387: NEG
39388: PUSH
39389: LD_INT 0
39391: PUSH
39392: EMPTY
39393: LIST
39394: LIST
39395: PUSH
39396: LD_INT 1
39398: NEG
39399: PUSH
39400: LD_INT 1
39402: NEG
39403: PUSH
39404: EMPTY
39405: LIST
39406: LIST
39407: PUSH
39408: LD_INT 1
39410: PUSH
39411: LD_INT 1
39413: NEG
39414: PUSH
39415: EMPTY
39416: LIST
39417: LIST
39418: PUSH
39419: LD_INT 1
39421: NEG
39422: PUSH
39423: LD_INT 1
39425: PUSH
39426: EMPTY
39427: LIST
39428: LIST
39429: PUSH
39430: EMPTY
39431: LIST
39432: LIST
39433: LIST
39434: LIST
39435: LIST
39436: LIST
39437: LIST
39438: LIST
39439: LIST
39440: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39441: LD_ADDR_VAR 0 41
39445: PUSH
39446: LD_INT 0
39448: PUSH
39449: LD_INT 0
39451: PUSH
39452: EMPTY
39453: LIST
39454: LIST
39455: PUSH
39456: LD_INT 0
39458: PUSH
39459: LD_INT 1
39461: NEG
39462: PUSH
39463: EMPTY
39464: LIST
39465: LIST
39466: PUSH
39467: LD_INT 1
39469: PUSH
39470: LD_INT 0
39472: PUSH
39473: EMPTY
39474: LIST
39475: LIST
39476: PUSH
39477: LD_INT 1
39479: PUSH
39480: LD_INT 1
39482: PUSH
39483: EMPTY
39484: LIST
39485: LIST
39486: PUSH
39487: LD_INT 0
39489: PUSH
39490: LD_INT 1
39492: PUSH
39493: EMPTY
39494: LIST
39495: LIST
39496: PUSH
39497: LD_INT 1
39499: NEG
39500: PUSH
39501: LD_INT 0
39503: PUSH
39504: EMPTY
39505: LIST
39506: LIST
39507: PUSH
39508: LD_INT 1
39510: NEG
39511: PUSH
39512: LD_INT 1
39514: NEG
39515: PUSH
39516: EMPTY
39517: LIST
39518: LIST
39519: PUSH
39520: LD_INT 1
39522: NEG
39523: PUSH
39524: LD_INT 2
39526: NEG
39527: PUSH
39528: EMPTY
39529: LIST
39530: LIST
39531: PUSH
39532: LD_INT 1
39534: PUSH
39535: LD_INT 1
39537: NEG
39538: PUSH
39539: EMPTY
39540: LIST
39541: LIST
39542: PUSH
39543: LD_INT 2
39545: PUSH
39546: LD_INT 0
39548: PUSH
39549: EMPTY
39550: LIST
39551: LIST
39552: PUSH
39553: LD_INT 2
39555: PUSH
39556: LD_INT 1
39558: PUSH
39559: EMPTY
39560: LIST
39561: LIST
39562: PUSH
39563: LD_INT 2
39565: PUSH
39566: LD_INT 2
39568: PUSH
39569: EMPTY
39570: LIST
39571: LIST
39572: PUSH
39573: LD_INT 1
39575: PUSH
39576: LD_INT 2
39578: PUSH
39579: EMPTY
39580: LIST
39581: LIST
39582: PUSH
39583: LD_INT 1
39585: NEG
39586: PUSH
39587: LD_INT 1
39589: PUSH
39590: EMPTY
39591: LIST
39592: LIST
39593: PUSH
39594: LD_INT 2
39596: NEG
39597: PUSH
39598: LD_INT 0
39600: PUSH
39601: EMPTY
39602: LIST
39603: LIST
39604: PUSH
39605: LD_INT 2
39607: NEG
39608: PUSH
39609: LD_INT 1
39611: NEG
39612: PUSH
39613: EMPTY
39614: LIST
39615: LIST
39616: PUSH
39617: LD_INT 2
39619: NEG
39620: PUSH
39621: LD_INT 2
39623: NEG
39624: PUSH
39625: EMPTY
39626: LIST
39627: LIST
39628: PUSH
39629: LD_INT 2
39631: NEG
39632: PUSH
39633: LD_INT 3
39635: NEG
39636: PUSH
39637: EMPTY
39638: LIST
39639: LIST
39640: PUSH
39641: LD_INT 2
39643: PUSH
39644: LD_INT 1
39646: NEG
39647: PUSH
39648: EMPTY
39649: LIST
39650: LIST
39651: PUSH
39652: LD_INT 3
39654: PUSH
39655: LD_INT 0
39657: PUSH
39658: EMPTY
39659: LIST
39660: LIST
39661: PUSH
39662: LD_INT 3
39664: PUSH
39665: LD_INT 1
39667: PUSH
39668: EMPTY
39669: LIST
39670: LIST
39671: PUSH
39672: LD_INT 3
39674: PUSH
39675: LD_INT 2
39677: PUSH
39678: EMPTY
39679: LIST
39680: LIST
39681: PUSH
39682: LD_INT 3
39684: PUSH
39685: LD_INT 3
39687: PUSH
39688: EMPTY
39689: LIST
39690: LIST
39691: PUSH
39692: LD_INT 2
39694: PUSH
39695: LD_INT 3
39697: PUSH
39698: EMPTY
39699: LIST
39700: LIST
39701: PUSH
39702: LD_INT 2
39704: NEG
39705: PUSH
39706: LD_INT 1
39708: PUSH
39709: EMPTY
39710: LIST
39711: LIST
39712: PUSH
39713: LD_INT 3
39715: NEG
39716: PUSH
39717: LD_INT 0
39719: PUSH
39720: EMPTY
39721: LIST
39722: LIST
39723: PUSH
39724: LD_INT 3
39726: NEG
39727: PUSH
39728: LD_INT 1
39730: NEG
39731: PUSH
39732: EMPTY
39733: LIST
39734: LIST
39735: PUSH
39736: LD_INT 3
39738: NEG
39739: PUSH
39740: LD_INT 2
39742: NEG
39743: PUSH
39744: EMPTY
39745: LIST
39746: LIST
39747: PUSH
39748: LD_INT 3
39750: NEG
39751: PUSH
39752: LD_INT 3
39754: NEG
39755: PUSH
39756: EMPTY
39757: LIST
39758: LIST
39759: PUSH
39760: EMPTY
39761: LIST
39762: LIST
39763: LIST
39764: LIST
39765: LIST
39766: LIST
39767: LIST
39768: LIST
39769: LIST
39770: LIST
39771: LIST
39772: LIST
39773: LIST
39774: LIST
39775: LIST
39776: LIST
39777: LIST
39778: LIST
39779: LIST
39780: LIST
39781: LIST
39782: LIST
39783: LIST
39784: LIST
39785: LIST
39786: LIST
39787: LIST
39788: LIST
39789: LIST
39790: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39791: LD_ADDR_VAR 0 42
39795: PUSH
39796: LD_INT 0
39798: PUSH
39799: LD_INT 0
39801: PUSH
39802: EMPTY
39803: LIST
39804: LIST
39805: PUSH
39806: LD_INT 0
39808: PUSH
39809: LD_INT 1
39811: NEG
39812: PUSH
39813: EMPTY
39814: LIST
39815: LIST
39816: PUSH
39817: LD_INT 1
39819: PUSH
39820: LD_INT 0
39822: PUSH
39823: EMPTY
39824: LIST
39825: LIST
39826: PUSH
39827: LD_INT 1
39829: PUSH
39830: LD_INT 1
39832: PUSH
39833: EMPTY
39834: LIST
39835: LIST
39836: PUSH
39837: LD_INT 0
39839: PUSH
39840: LD_INT 1
39842: PUSH
39843: EMPTY
39844: LIST
39845: LIST
39846: PUSH
39847: LD_INT 1
39849: NEG
39850: PUSH
39851: LD_INT 0
39853: PUSH
39854: EMPTY
39855: LIST
39856: LIST
39857: PUSH
39858: LD_INT 1
39860: NEG
39861: PUSH
39862: LD_INT 1
39864: NEG
39865: PUSH
39866: EMPTY
39867: LIST
39868: LIST
39869: PUSH
39870: LD_INT 1
39872: NEG
39873: PUSH
39874: LD_INT 2
39876: NEG
39877: PUSH
39878: EMPTY
39879: LIST
39880: LIST
39881: PUSH
39882: LD_INT 0
39884: PUSH
39885: LD_INT 2
39887: NEG
39888: PUSH
39889: EMPTY
39890: LIST
39891: LIST
39892: PUSH
39893: LD_INT 1
39895: PUSH
39896: LD_INT 1
39898: NEG
39899: PUSH
39900: EMPTY
39901: LIST
39902: LIST
39903: PUSH
39904: LD_INT 2
39906: PUSH
39907: LD_INT 1
39909: PUSH
39910: EMPTY
39911: LIST
39912: LIST
39913: PUSH
39914: LD_INT 2
39916: PUSH
39917: LD_INT 2
39919: PUSH
39920: EMPTY
39921: LIST
39922: LIST
39923: PUSH
39924: LD_INT 1
39926: PUSH
39927: LD_INT 2
39929: PUSH
39930: EMPTY
39931: LIST
39932: LIST
39933: PUSH
39934: LD_INT 0
39936: PUSH
39937: LD_INT 2
39939: PUSH
39940: EMPTY
39941: LIST
39942: LIST
39943: PUSH
39944: LD_INT 1
39946: NEG
39947: PUSH
39948: LD_INT 1
39950: PUSH
39951: EMPTY
39952: LIST
39953: LIST
39954: PUSH
39955: LD_INT 2
39957: NEG
39958: PUSH
39959: LD_INT 1
39961: NEG
39962: PUSH
39963: EMPTY
39964: LIST
39965: LIST
39966: PUSH
39967: LD_INT 2
39969: NEG
39970: PUSH
39971: LD_INT 2
39973: NEG
39974: PUSH
39975: EMPTY
39976: LIST
39977: LIST
39978: PUSH
39979: LD_INT 2
39981: NEG
39982: PUSH
39983: LD_INT 3
39985: NEG
39986: PUSH
39987: EMPTY
39988: LIST
39989: LIST
39990: PUSH
39991: LD_INT 1
39993: NEG
39994: PUSH
39995: LD_INT 3
39997: NEG
39998: PUSH
39999: EMPTY
40000: LIST
40001: LIST
40002: PUSH
40003: LD_INT 0
40005: PUSH
40006: LD_INT 3
40008: NEG
40009: PUSH
40010: EMPTY
40011: LIST
40012: LIST
40013: PUSH
40014: LD_INT 1
40016: PUSH
40017: LD_INT 2
40019: NEG
40020: PUSH
40021: EMPTY
40022: LIST
40023: LIST
40024: PUSH
40025: LD_INT 3
40027: PUSH
40028: LD_INT 2
40030: PUSH
40031: EMPTY
40032: LIST
40033: LIST
40034: PUSH
40035: LD_INT 3
40037: PUSH
40038: LD_INT 3
40040: PUSH
40041: EMPTY
40042: LIST
40043: LIST
40044: PUSH
40045: LD_INT 2
40047: PUSH
40048: LD_INT 3
40050: PUSH
40051: EMPTY
40052: LIST
40053: LIST
40054: PUSH
40055: LD_INT 1
40057: PUSH
40058: LD_INT 3
40060: PUSH
40061: EMPTY
40062: LIST
40063: LIST
40064: PUSH
40065: LD_INT 0
40067: PUSH
40068: LD_INT 3
40070: PUSH
40071: EMPTY
40072: LIST
40073: LIST
40074: PUSH
40075: LD_INT 1
40077: NEG
40078: PUSH
40079: LD_INT 2
40081: PUSH
40082: EMPTY
40083: LIST
40084: LIST
40085: PUSH
40086: LD_INT 3
40088: NEG
40089: PUSH
40090: LD_INT 2
40092: NEG
40093: PUSH
40094: EMPTY
40095: LIST
40096: LIST
40097: PUSH
40098: LD_INT 3
40100: NEG
40101: PUSH
40102: LD_INT 3
40104: NEG
40105: PUSH
40106: EMPTY
40107: LIST
40108: LIST
40109: PUSH
40110: EMPTY
40111: LIST
40112: LIST
40113: LIST
40114: LIST
40115: LIST
40116: LIST
40117: LIST
40118: LIST
40119: LIST
40120: LIST
40121: LIST
40122: LIST
40123: LIST
40124: LIST
40125: LIST
40126: LIST
40127: LIST
40128: LIST
40129: LIST
40130: LIST
40131: LIST
40132: LIST
40133: LIST
40134: LIST
40135: LIST
40136: LIST
40137: LIST
40138: LIST
40139: LIST
40140: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40141: LD_ADDR_VAR 0 43
40145: PUSH
40146: LD_INT 0
40148: PUSH
40149: LD_INT 0
40151: PUSH
40152: EMPTY
40153: LIST
40154: LIST
40155: PUSH
40156: LD_INT 0
40158: PUSH
40159: LD_INT 1
40161: NEG
40162: PUSH
40163: EMPTY
40164: LIST
40165: LIST
40166: PUSH
40167: LD_INT 1
40169: PUSH
40170: LD_INT 0
40172: PUSH
40173: EMPTY
40174: LIST
40175: LIST
40176: PUSH
40177: LD_INT 1
40179: PUSH
40180: LD_INT 1
40182: PUSH
40183: EMPTY
40184: LIST
40185: LIST
40186: PUSH
40187: LD_INT 0
40189: PUSH
40190: LD_INT 1
40192: PUSH
40193: EMPTY
40194: LIST
40195: LIST
40196: PUSH
40197: LD_INT 1
40199: NEG
40200: PUSH
40201: LD_INT 0
40203: PUSH
40204: EMPTY
40205: LIST
40206: LIST
40207: PUSH
40208: LD_INT 1
40210: NEG
40211: PUSH
40212: LD_INT 1
40214: NEG
40215: PUSH
40216: EMPTY
40217: LIST
40218: LIST
40219: PUSH
40220: LD_INT 1
40222: NEG
40223: PUSH
40224: LD_INT 2
40226: NEG
40227: PUSH
40228: EMPTY
40229: LIST
40230: LIST
40231: PUSH
40232: LD_INT 0
40234: PUSH
40235: LD_INT 2
40237: NEG
40238: PUSH
40239: EMPTY
40240: LIST
40241: LIST
40242: PUSH
40243: LD_INT 1
40245: PUSH
40246: LD_INT 1
40248: NEG
40249: PUSH
40250: EMPTY
40251: LIST
40252: LIST
40253: PUSH
40254: LD_INT 2
40256: PUSH
40257: LD_INT 0
40259: PUSH
40260: EMPTY
40261: LIST
40262: LIST
40263: PUSH
40264: LD_INT 2
40266: PUSH
40267: LD_INT 1
40269: PUSH
40270: EMPTY
40271: LIST
40272: LIST
40273: PUSH
40274: LD_INT 1
40276: PUSH
40277: LD_INT 2
40279: PUSH
40280: EMPTY
40281: LIST
40282: LIST
40283: PUSH
40284: LD_INT 0
40286: PUSH
40287: LD_INT 2
40289: PUSH
40290: EMPTY
40291: LIST
40292: LIST
40293: PUSH
40294: LD_INT 1
40296: NEG
40297: PUSH
40298: LD_INT 1
40300: PUSH
40301: EMPTY
40302: LIST
40303: LIST
40304: PUSH
40305: LD_INT 2
40307: NEG
40308: PUSH
40309: LD_INT 0
40311: PUSH
40312: EMPTY
40313: LIST
40314: LIST
40315: PUSH
40316: LD_INT 2
40318: NEG
40319: PUSH
40320: LD_INT 1
40322: NEG
40323: PUSH
40324: EMPTY
40325: LIST
40326: LIST
40327: PUSH
40328: LD_INT 1
40330: NEG
40331: PUSH
40332: LD_INT 3
40334: NEG
40335: PUSH
40336: EMPTY
40337: LIST
40338: LIST
40339: PUSH
40340: LD_INT 0
40342: PUSH
40343: LD_INT 3
40345: NEG
40346: PUSH
40347: EMPTY
40348: LIST
40349: LIST
40350: PUSH
40351: LD_INT 1
40353: PUSH
40354: LD_INT 2
40356: NEG
40357: PUSH
40358: EMPTY
40359: LIST
40360: LIST
40361: PUSH
40362: LD_INT 2
40364: PUSH
40365: LD_INT 1
40367: NEG
40368: PUSH
40369: EMPTY
40370: LIST
40371: LIST
40372: PUSH
40373: LD_INT 3
40375: PUSH
40376: LD_INT 0
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: PUSH
40383: LD_INT 3
40385: PUSH
40386: LD_INT 1
40388: PUSH
40389: EMPTY
40390: LIST
40391: LIST
40392: PUSH
40393: LD_INT 1
40395: PUSH
40396: LD_INT 3
40398: PUSH
40399: EMPTY
40400: LIST
40401: LIST
40402: PUSH
40403: LD_INT 0
40405: PUSH
40406: LD_INT 3
40408: PUSH
40409: EMPTY
40410: LIST
40411: LIST
40412: PUSH
40413: LD_INT 1
40415: NEG
40416: PUSH
40417: LD_INT 2
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: PUSH
40424: LD_INT 2
40426: NEG
40427: PUSH
40428: LD_INT 1
40430: PUSH
40431: EMPTY
40432: LIST
40433: LIST
40434: PUSH
40435: LD_INT 3
40437: NEG
40438: PUSH
40439: LD_INT 0
40441: PUSH
40442: EMPTY
40443: LIST
40444: LIST
40445: PUSH
40446: LD_INT 3
40448: NEG
40449: PUSH
40450: LD_INT 1
40452: NEG
40453: PUSH
40454: EMPTY
40455: LIST
40456: LIST
40457: PUSH
40458: EMPTY
40459: LIST
40460: LIST
40461: LIST
40462: LIST
40463: LIST
40464: LIST
40465: LIST
40466: LIST
40467: LIST
40468: LIST
40469: LIST
40470: LIST
40471: LIST
40472: LIST
40473: LIST
40474: LIST
40475: LIST
40476: LIST
40477: LIST
40478: LIST
40479: LIST
40480: LIST
40481: LIST
40482: LIST
40483: LIST
40484: LIST
40485: LIST
40486: LIST
40487: LIST
40488: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40489: LD_ADDR_VAR 0 44
40493: PUSH
40494: LD_INT 0
40496: PUSH
40497: LD_INT 0
40499: PUSH
40500: EMPTY
40501: LIST
40502: LIST
40503: PUSH
40504: LD_INT 0
40506: PUSH
40507: LD_INT 1
40509: NEG
40510: PUSH
40511: EMPTY
40512: LIST
40513: LIST
40514: PUSH
40515: LD_INT 1
40517: PUSH
40518: LD_INT 0
40520: PUSH
40521: EMPTY
40522: LIST
40523: LIST
40524: PUSH
40525: LD_INT 1
40527: PUSH
40528: LD_INT 1
40530: PUSH
40531: EMPTY
40532: LIST
40533: LIST
40534: PUSH
40535: LD_INT 0
40537: PUSH
40538: LD_INT 1
40540: PUSH
40541: EMPTY
40542: LIST
40543: LIST
40544: PUSH
40545: LD_INT 1
40547: NEG
40548: PUSH
40549: LD_INT 0
40551: PUSH
40552: EMPTY
40553: LIST
40554: LIST
40555: PUSH
40556: LD_INT 1
40558: NEG
40559: PUSH
40560: LD_INT 1
40562: NEG
40563: PUSH
40564: EMPTY
40565: LIST
40566: LIST
40567: PUSH
40568: LD_INT 1
40570: NEG
40571: PUSH
40572: LD_INT 2
40574: NEG
40575: PUSH
40576: EMPTY
40577: LIST
40578: LIST
40579: PUSH
40580: LD_INT 1
40582: PUSH
40583: LD_INT 1
40585: NEG
40586: PUSH
40587: EMPTY
40588: LIST
40589: LIST
40590: PUSH
40591: LD_INT 2
40593: PUSH
40594: LD_INT 0
40596: PUSH
40597: EMPTY
40598: LIST
40599: LIST
40600: PUSH
40601: LD_INT 2
40603: PUSH
40604: LD_INT 1
40606: PUSH
40607: EMPTY
40608: LIST
40609: LIST
40610: PUSH
40611: LD_INT 2
40613: PUSH
40614: LD_INT 2
40616: PUSH
40617: EMPTY
40618: LIST
40619: LIST
40620: PUSH
40621: LD_INT 1
40623: PUSH
40624: LD_INT 2
40626: PUSH
40627: EMPTY
40628: LIST
40629: LIST
40630: PUSH
40631: LD_INT 1
40633: NEG
40634: PUSH
40635: LD_INT 1
40637: PUSH
40638: EMPTY
40639: LIST
40640: LIST
40641: PUSH
40642: LD_INT 2
40644: NEG
40645: PUSH
40646: LD_INT 0
40648: PUSH
40649: EMPTY
40650: LIST
40651: LIST
40652: PUSH
40653: LD_INT 2
40655: NEG
40656: PUSH
40657: LD_INT 1
40659: NEG
40660: PUSH
40661: EMPTY
40662: LIST
40663: LIST
40664: PUSH
40665: LD_INT 2
40667: NEG
40668: PUSH
40669: LD_INT 2
40671: NEG
40672: PUSH
40673: EMPTY
40674: LIST
40675: LIST
40676: PUSH
40677: LD_INT 2
40679: NEG
40680: PUSH
40681: LD_INT 3
40683: NEG
40684: PUSH
40685: EMPTY
40686: LIST
40687: LIST
40688: PUSH
40689: LD_INT 2
40691: PUSH
40692: LD_INT 1
40694: NEG
40695: PUSH
40696: EMPTY
40697: LIST
40698: LIST
40699: PUSH
40700: LD_INT 3
40702: PUSH
40703: LD_INT 0
40705: PUSH
40706: EMPTY
40707: LIST
40708: LIST
40709: PUSH
40710: LD_INT 3
40712: PUSH
40713: LD_INT 1
40715: PUSH
40716: EMPTY
40717: LIST
40718: LIST
40719: PUSH
40720: LD_INT 3
40722: PUSH
40723: LD_INT 2
40725: PUSH
40726: EMPTY
40727: LIST
40728: LIST
40729: PUSH
40730: LD_INT 3
40732: PUSH
40733: LD_INT 3
40735: PUSH
40736: EMPTY
40737: LIST
40738: LIST
40739: PUSH
40740: LD_INT 2
40742: PUSH
40743: LD_INT 3
40745: PUSH
40746: EMPTY
40747: LIST
40748: LIST
40749: PUSH
40750: LD_INT 2
40752: NEG
40753: PUSH
40754: LD_INT 1
40756: PUSH
40757: EMPTY
40758: LIST
40759: LIST
40760: PUSH
40761: LD_INT 3
40763: NEG
40764: PUSH
40765: LD_INT 0
40767: PUSH
40768: EMPTY
40769: LIST
40770: LIST
40771: PUSH
40772: LD_INT 3
40774: NEG
40775: PUSH
40776: LD_INT 1
40778: NEG
40779: PUSH
40780: EMPTY
40781: LIST
40782: LIST
40783: PUSH
40784: LD_INT 3
40786: NEG
40787: PUSH
40788: LD_INT 2
40790: NEG
40791: PUSH
40792: EMPTY
40793: LIST
40794: LIST
40795: PUSH
40796: LD_INT 3
40798: NEG
40799: PUSH
40800: LD_INT 3
40802: NEG
40803: PUSH
40804: EMPTY
40805: LIST
40806: LIST
40807: PUSH
40808: EMPTY
40809: LIST
40810: LIST
40811: LIST
40812: LIST
40813: LIST
40814: LIST
40815: LIST
40816: LIST
40817: LIST
40818: LIST
40819: LIST
40820: LIST
40821: LIST
40822: LIST
40823: LIST
40824: LIST
40825: LIST
40826: LIST
40827: LIST
40828: LIST
40829: LIST
40830: LIST
40831: LIST
40832: LIST
40833: LIST
40834: LIST
40835: LIST
40836: LIST
40837: LIST
40838: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40839: LD_ADDR_VAR 0 45
40843: PUSH
40844: LD_INT 0
40846: PUSH
40847: LD_INT 0
40849: PUSH
40850: EMPTY
40851: LIST
40852: LIST
40853: PUSH
40854: LD_INT 0
40856: PUSH
40857: LD_INT 1
40859: NEG
40860: PUSH
40861: EMPTY
40862: LIST
40863: LIST
40864: PUSH
40865: LD_INT 1
40867: PUSH
40868: LD_INT 0
40870: PUSH
40871: EMPTY
40872: LIST
40873: LIST
40874: PUSH
40875: LD_INT 1
40877: PUSH
40878: LD_INT 1
40880: PUSH
40881: EMPTY
40882: LIST
40883: LIST
40884: PUSH
40885: LD_INT 0
40887: PUSH
40888: LD_INT 1
40890: PUSH
40891: EMPTY
40892: LIST
40893: LIST
40894: PUSH
40895: LD_INT 1
40897: NEG
40898: PUSH
40899: LD_INT 0
40901: PUSH
40902: EMPTY
40903: LIST
40904: LIST
40905: PUSH
40906: LD_INT 1
40908: NEG
40909: PUSH
40910: LD_INT 1
40912: NEG
40913: PUSH
40914: EMPTY
40915: LIST
40916: LIST
40917: PUSH
40918: LD_INT 1
40920: NEG
40921: PUSH
40922: LD_INT 2
40924: NEG
40925: PUSH
40926: EMPTY
40927: LIST
40928: LIST
40929: PUSH
40930: LD_INT 0
40932: PUSH
40933: LD_INT 2
40935: NEG
40936: PUSH
40937: EMPTY
40938: LIST
40939: LIST
40940: PUSH
40941: LD_INT 1
40943: PUSH
40944: LD_INT 1
40946: NEG
40947: PUSH
40948: EMPTY
40949: LIST
40950: LIST
40951: PUSH
40952: LD_INT 2
40954: PUSH
40955: LD_INT 1
40957: PUSH
40958: EMPTY
40959: LIST
40960: LIST
40961: PUSH
40962: LD_INT 2
40964: PUSH
40965: LD_INT 2
40967: PUSH
40968: EMPTY
40969: LIST
40970: LIST
40971: PUSH
40972: LD_INT 1
40974: PUSH
40975: LD_INT 2
40977: PUSH
40978: EMPTY
40979: LIST
40980: LIST
40981: PUSH
40982: LD_INT 0
40984: PUSH
40985: LD_INT 2
40987: PUSH
40988: EMPTY
40989: LIST
40990: LIST
40991: PUSH
40992: LD_INT 1
40994: NEG
40995: PUSH
40996: LD_INT 1
40998: PUSH
40999: EMPTY
41000: LIST
41001: LIST
41002: PUSH
41003: LD_INT 2
41005: NEG
41006: PUSH
41007: LD_INT 1
41009: NEG
41010: PUSH
41011: EMPTY
41012: LIST
41013: LIST
41014: PUSH
41015: LD_INT 2
41017: NEG
41018: PUSH
41019: LD_INT 2
41021: NEG
41022: PUSH
41023: EMPTY
41024: LIST
41025: LIST
41026: PUSH
41027: LD_INT 2
41029: NEG
41030: PUSH
41031: LD_INT 3
41033: NEG
41034: PUSH
41035: EMPTY
41036: LIST
41037: LIST
41038: PUSH
41039: LD_INT 1
41041: NEG
41042: PUSH
41043: LD_INT 3
41045: NEG
41046: PUSH
41047: EMPTY
41048: LIST
41049: LIST
41050: PUSH
41051: LD_INT 0
41053: PUSH
41054: LD_INT 3
41056: NEG
41057: PUSH
41058: EMPTY
41059: LIST
41060: LIST
41061: PUSH
41062: LD_INT 1
41064: PUSH
41065: LD_INT 2
41067: NEG
41068: PUSH
41069: EMPTY
41070: LIST
41071: LIST
41072: PUSH
41073: LD_INT 3
41075: PUSH
41076: LD_INT 2
41078: PUSH
41079: EMPTY
41080: LIST
41081: LIST
41082: PUSH
41083: LD_INT 3
41085: PUSH
41086: LD_INT 3
41088: PUSH
41089: EMPTY
41090: LIST
41091: LIST
41092: PUSH
41093: LD_INT 2
41095: PUSH
41096: LD_INT 3
41098: PUSH
41099: EMPTY
41100: LIST
41101: LIST
41102: PUSH
41103: LD_INT 1
41105: PUSH
41106: LD_INT 3
41108: PUSH
41109: EMPTY
41110: LIST
41111: LIST
41112: PUSH
41113: LD_INT 0
41115: PUSH
41116: LD_INT 3
41118: PUSH
41119: EMPTY
41120: LIST
41121: LIST
41122: PUSH
41123: LD_INT 1
41125: NEG
41126: PUSH
41127: LD_INT 2
41129: PUSH
41130: EMPTY
41131: LIST
41132: LIST
41133: PUSH
41134: LD_INT 3
41136: NEG
41137: PUSH
41138: LD_INT 2
41140: NEG
41141: PUSH
41142: EMPTY
41143: LIST
41144: LIST
41145: PUSH
41146: LD_INT 3
41148: NEG
41149: PUSH
41150: LD_INT 3
41152: NEG
41153: PUSH
41154: EMPTY
41155: LIST
41156: LIST
41157: PUSH
41158: EMPTY
41159: LIST
41160: LIST
41161: LIST
41162: LIST
41163: LIST
41164: LIST
41165: LIST
41166: LIST
41167: LIST
41168: LIST
41169: LIST
41170: LIST
41171: LIST
41172: LIST
41173: LIST
41174: LIST
41175: LIST
41176: LIST
41177: LIST
41178: LIST
41179: LIST
41180: LIST
41181: LIST
41182: LIST
41183: LIST
41184: LIST
41185: LIST
41186: LIST
41187: LIST
41188: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41189: LD_ADDR_VAR 0 46
41193: PUSH
41194: LD_INT 0
41196: PUSH
41197: LD_INT 0
41199: PUSH
41200: EMPTY
41201: LIST
41202: LIST
41203: PUSH
41204: LD_INT 0
41206: PUSH
41207: LD_INT 1
41209: NEG
41210: PUSH
41211: EMPTY
41212: LIST
41213: LIST
41214: PUSH
41215: LD_INT 1
41217: PUSH
41218: LD_INT 0
41220: PUSH
41221: EMPTY
41222: LIST
41223: LIST
41224: PUSH
41225: LD_INT 1
41227: PUSH
41228: LD_INT 1
41230: PUSH
41231: EMPTY
41232: LIST
41233: LIST
41234: PUSH
41235: LD_INT 0
41237: PUSH
41238: LD_INT 1
41240: PUSH
41241: EMPTY
41242: LIST
41243: LIST
41244: PUSH
41245: LD_INT 1
41247: NEG
41248: PUSH
41249: LD_INT 0
41251: PUSH
41252: EMPTY
41253: LIST
41254: LIST
41255: PUSH
41256: LD_INT 1
41258: NEG
41259: PUSH
41260: LD_INT 1
41262: NEG
41263: PUSH
41264: EMPTY
41265: LIST
41266: LIST
41267: PUSH
41268: LD_INT 1
41270: NEG
41271: PUSH
41272: LD_INT 2
41274: NEG
41275: PUSH
41276: EMPTY
41277: LIST
41278: LIST
41279: PUSH
41280: LD_INT 0
41282: PUSH
41283: LD_INT 2
41285: NEG
41286: PUSH
41287: EMPTY
41288: LIST
41289: LIST
41290: PUSH
41291: LD_INT 1
41293: PUSH
41294: LD_INT 1
41296: NEG
41297: PUSH
41298: EMPTY
41299: LIST
41300: LIST
41301: PUSH
41302: LD_INT 2
41304: PUSH
41305: LD_INT 0
41307: PUSH
41308: EMPTY
41309: LIST
41310: LIST
41311: PUSH
41312: LD_INT 2
41314: PUSH
41315: LD_INT 1
41317: PUSH
41318: EMPTY
41319: LIST
41320: LIST
41321: PUSH
41322: LD_INT 1
41324: PUSH
41325: LD_INT 2
41327: PUSH
41328: EMPTY
41329: LIST
41330: LIST
41331: PUSH
41332: LD_INT 0
41334: PUSH
41335: LD_INT 2
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: PUSH
41342: LD_INT 1
41344: NEG
41345: PUSH
41346: LD_INT 1
41348: PUSH
41349: EMPTY
41350: LIST
41351: LIST
41352: PUSH
41353: LD_INT 2
41355: NEG
41356: PUSH
41357: LD_INT 0
41359: PUSH
41360: EMPTY
41361: LIST
41362: LIST
41363: PUSH
41364: LD_INT 2
41366: NEG
41367: PUSH
41368: LD_INT 1
41370: NEG
41371: PUSH
41372: EMPTY
41373: LIST
41374: LIST
41375: PUSH
41376: LD_INT 1
41378: NEG
41379: PUSH
41380: LD_INT 3
41382: NEG
41383: PUSH
41384: EMPTY
41385: LIST
41386: LIST
41387: PUSH
41388: LD_INT 0
41390: PUSH
41391: LD_INT 3
41393: NEG
41394: PUSH
41395: EMPTY
41396: LIST
41397: LIST
41398: PUSH
41399: LD_INT 1
41401: PUSH
41402: LD_INT 2
41404: NEG
41405: PUSH
41406: EMPTY
41407: LIST
41408: LIST
41409: PUSH
41410: LD_INT 2
41412: PUSH
41413: LD_INT 1
41415: NEG
41416: PUSH
41417: EMPTY
41418: LIST
41419: LIST
41420: PUSH
41421: LD_INT 3
41423: PUSH
41424: LD_INT 0
41426: PUSH
41427: EMPTY
41428: LIST
41429: LIST
41430: PUSH
41431: LD_INT 3
41433: PUSH
41434: LD_INT 1
41436: PUSH
41437: EMPTY
41438: LIST
41439: LIST
41440: PUSH
41441: LD_INT 1
41443: PUSH
41444: LD_INT 3
41446: PUSH
41447: EMPTY
41448: LIST
41449: LIST
41450: PUSH
41451: LD_INT 0
41453: PUSH
41454: LD_INT 3
41456: PUSH
41457: EMPTY
41458: LIST
41459: LIST
41460: PUSH
41461: LD_INT 1
41463: NEG
41464: PUSH
41465: LD_INT 2
41467: PUSH
41468: EMPTY
41469: LIST
41470: LIST
41471: PUSH
41472: LD_INT 2
41474: NEG
41475: PUSH
41476: LD_INT 1
41478: PUSH
41479: EMPTY
41480: LIST
41481: LIST
41482: PUSH
41483: LD_INT 3
41485: NEG
41486: PUSH
41487: LD_INT 0
41489: PUSH
41490: EMPTY
41491: LIST
41492: LIST
41493: PUSH
41494: LD_INT 3
41496: NEG
41497: PUSH
41498: LD_INT 1
41500: NEG
41501: PUSH
41502: EMPTY
41503: LIST
41504: LIST
41505: PUSH
41506: EMPTY
41507: LIST
41508: LIST
41509: LIST
41510: LIST
41511: LIST
41512: LIST
41513: LIST
41514: LIST
41515: LIST
41516: LIST
41517: LIST
41518: LIST
41519: LIST
41520: LIST
41521: LIST
41522: LIST
41523: LIST
41524: LIST
41525: LIST
41526: LIST
41527: LIST
41528: LIST
41529: LIST
41530: LIST
41531: LIST
41532: LIST
41533: LIST
41534: LIST
41535: LIST
41536: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41537: LD_ADDR_VAR 0 47
41541: PUSH
41542: LD_INT 0
41544: PUSH
41545: LD_INT 0
41547: PUSH
41548: EMPTY
41549: LIST
41550: LIST
41551: PUSH
41552: LD_INT 0
41554: PUSH
41555: LD_INT 1
41557: NEG
41558: PUSH
41559: EMPTY
41560: LIST
41561: LIST
41562: PUSH
41563: LD_INT 1
41565: PUSH
41566: LD_INT 0
41568: PUSH
41569: EMPTY
41570: LIST
41571: LIST
41572: PUSH
41573: LD_INT 1
41575: PUSH
41576: LD_INT 1
41578: PUSH
41579: EMPTY
41580: LIST
41581: LIST
41582: PUSH
41583: LD_INT 0
41585: PUSH
41586: LD_INT 1
41588: PUSH
41589: EMPTY
41590: LIST
41591: LIST
41592: PUSH
41593: LD_INT 1
41595: NEG
41596: PUSH
41597: LD_INT 0
41599: PUSH
41600: EMPTY
41601: LIST
41602: LIST
41603: PUSH
41604: LD_INT 1
41606: NEG
41607: PUSH
41608: LD_INT 1
41610: NEG
41611: PUSH
41612: EMPTY
41613: LIST
41614: LIST
41615: PUSH
41616: LD_INT 1
41618: NEG
41619: PUSH
41620: LD_INT 2
41622: NEG
41623: PUSH
41624: EMPTY
41625: LIST
41626: LIST
41627: PUSH
41628: LD_INT 0
41630: PUSH
41631: LD_INT 2
41633: NEG
41634: PUSH
41635: EMPTY
41636: LIST
41637: LIST
41638: PUSH
41639: LD_INT 1
41641: PUSH
41642: LD_INT 1
41644: NEG
41645: PUSH
41646: EMPTY
41647: LIST
41648: LIST
41649: PUSH
41650: LD_INT 2
41652: NEG
41653: PUSH
41654: LD_INT 1
41656: NEG
41657: PUSH
41658: EMPTY
41659: LIST
41660: LIST
41661: PUSH
41662: LD_INT 2
41664: NEG
41665: PUSH
41666: LD_INT 2
41668: NEG
41669: PUSH
41670: EMPTY
41671: LIST
41672: LIST
41673: PUSH
41674: EMPTY
41675: LIST
41676: LIST
41677: LIST
41678: LIST
41679: LIST
41680: LIST
41681: LIST
41682: LIST
41683: LIST
41684: LIST
41685: LIST
41686: LIST
41687: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
41688: LD_ADDR_VAR 0 48
41692: PUSH
41693: LD_INT 0
41695: PUSH
41696: LD_INT 0
41698: PUSH
41699: EMPTY
41700: LIST
41701: LIST
41702: PUSH
41703: LD_INT 0
41705: PUSH
41706: LD_INT 1
41708: NEG
41709: PUSH
41710: EMPTY
41711: LIST
41712: LIST
41713: PUSH
41714: LD_INT 1
41716: PUSH
41717: LD_INT 0
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PUSH
41724: LD_INT 1
41726: PUSH
41727: LD_INT 1
41729: PUSH
41730: EMPTY
41731: LIST
41732: LIST
41733: PUSH
41734: LD_INT 0
41736: PUSH
41737: LD_INT 1
41739: PUSH
41740: EMPTY
41741: LIST
41742: LIST
41743: PUSH
41744: LD_INT 1
41746: NEG
41747: PUSH
41748: LD_INT 0
41750: PUSH
41751: EMPTY
41752: LIST
41753: LIST
41754: PUSH
41755: LD_INT 1
41757: NEG
41758: PUSH
41759: LD_INT 1
41761: NEG
41762: PUSH
41763: EMPTY
41764: LIST
41765: LIST
41766: PUSH
41767: LD_INT 1
41769: NEG
41770: PUSH
41771: LD_INT 2
41773: NEG
41774: PUSH
41775: EMPTY
41776: LIST
41777: LIST
41778: PUSH
41779: LD_INT 0
41781: PUSH
41782: LD_INT 2
41784: NEG
41785: PUSH
41786: EMPTY
41787: LIST
41788: LIST
41789: PUSH
41790: LD_INT 1
41792: PUSH
41793: LD_INT 1
41795: NEG
41796: PUSH
41797: EMPTY
41798: LIST
41799: LIST
41800: PUSH
41801: LD_INT 2
41803: PUSH
41804: LD_INT 0
41806: PUSH
41807: EMPTY
41808: LIST
41809: LIST
41810: PUSH
41811: LD_INT 2
41813: PUSH
41814: LD_INT 1
41816: PUSH
41817: EMPTY
41818: LIST
41819: LIST
41820: PUSH
41821: EMPTY
41822: LIST
41823: LIST
41824: LIST
41825: LIST
41826: LIST
41827: LIST
41828: LIST
41829: LIST
41830: LIST
41831: LIST
41832: LIST
41833: LIST
41834: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
41835: LD_ADDR_VAR 0 49
41839: PUSH
41840: LD_INT 0
41842: PUSH
41843: LD_INT 0
41845: PUSH
41846: EMPTY
41847: LIST
41848: LIST
41849: PUSH
41850: LD_INT 0
41852: PUSH
41853: LD_INT 1
41855: NEG
41856: PUSH
41857: EMPTY
41858: LIST
41859: LIST
41860: PUSH
41861: LD_INT 1
41863: PUSH
41864: LD_INT 0
41866: PUSH
41867: EMPTY
41868: LIST
41869: LIST
41870: PUSH
41871: LD_INT 1
41873: PUSH
41874: LD_INT 1
41876: PUSH
41877: EMPTY
41878: LIST
41879: LIST
41880: PUSH
41881: LD_INT 0
41883: PUSH
41884: LD_INT 1
41886: PUSH
41887: EMPTY
41888: LIST
41889: LIST
41890: PUSH
41891: LD_INT 1
41893: NEG
41894: PUSH
41895: LD_INT 0
41897: PUSH
41898: EMPTY
41899: LIST
41900: LIST
41901: PUSH
41902: LD_INT 1
41904: NEG
41905: PUSH
41906: LD_INT 1
41908: NEG
41909: PUSH
41910: EMPTY
41911: LIST
41912: LIST
41913: PUSH
41914: LD_INT 1
41916: PUSH
41917: LD_INT 1
41919: NEG
41920: PUSH
41921: EMPTY
41922: LIST
41923: LIST
41924: PUSH
41925: LD_INT 2
41927: PUSH
41928: LD_INT 0
41930: PUSH
41931: EMPTY
41932: LIST
41933: LIST
41934: PUSH
41935: LD_INT 2
41937: PUSH
41938: LD_INT 1
41940: PUSH
41941: EMPTY
41942: LIST
41943: LIST
41944: PUSH
41945: LD_INT 2
41947: PUSH
41948: LD_INT 2
41950: PUSH
41951: EMPTY
41952: LIST
41953: LIST
41954: PUSH
41955: LD_INT 1
41957: PUSH
41958: LD_INT 2
41960: PUSH
41961: EMPTY
41962: LIST
41963: LIST
41964: PUSH
41965: EMPTY
41966: LIST
41967: LIST
41968: LIST
41969: LIST
41970: LIST
41971: LIST
41972: LIST
41973: LIST
41974: LIST
41975: LIST
41976: LIST
41977: LIST
41978: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
41979: LD_ADDR_VAR 0 50
41983: PUSH
41984: LD_INT 0
41986: PUSH
41987: LD_INT 0
41989: PUSH
41990: EMPTY
41991: LIST
41992: LIST
41993: PUSH
41994: LD_INT 0
41996: PUSH
41997: LD_INT 1
41999: NEG
42000: PUSH
42001: EMPTY
42002: LIST
42003: LIST
42004: PUSH
42005: LD_INT 1
42007: PUSH
42008: LD_INT 0
42010: PUSH
42011: EMPTY
42012: LIST
42013: LIST
42014: PUSH
42015: LD_INT 1
42017: PUSH
42018: LD_INT 1
42020: PUSH
42021: EMPTY
42022: LIST
42023: LIST
42024: PUSH
42025: LD_INT 0
42027: PUSH
42028: LD_INT 1
42030: PUSH
42031: EMPTY
42032: LIST
42033: LIST
42034: PUSH
42035: LD_INT 1
42037: NEG
42038: PUSH
42039: LD_INT 0
42041: PUSH
42042: EMPTY
42043: LIST
42044: LIST
42045: PUSH
42046: LD_INT 1
42048: NEG
42049: PUSH
42050: LD_INT 1
42052: NEG
42053: PUSH
42054: EMPTY
42055: LIST
42056: LIST
42057: PUSH
42058: LD_INT 2
42060: PUSH
42061: LD_INT 1
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: PUSH
42068: LD_INT 2
42070: PUSH
42071: LD_INT 2
42073: PUSH
42074: EMPTY
42075: LIST
42076: LIST
42077: PUSH
42078: LD_INT 1
42080: PUSH
42081: LD_INT 2
42083: PUSH
42084: EMPTY
42085: LIST
42086: LIST
42087: PUSH
42088: LD_INT 0
42090: PUSH
42091: LD_INT 2
42093: PUSH
42094: EMPTY
42095: LIST
42096: LIST
42097: PUSH
42098: LD_INT 1
42100: NEG
42101: PUSH
42102: LD_INT 1
42104: PUSH
42105: EMPTY
42106: LIST
42107: LIST
42108: PUSH
42109: EMPTY
42110: LIST
42111: LIST
42112: LIST
42113: LIST
42114: LIST
42115: LIST
42116: LIST
42117: LIST
42118: LIST
42119: LIST
42120: LIST
42121: LIST
42122: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
42123: LD_ADDR_VAR 0 51
42127: PUSH
42128: LD_INT 0
42130: PUSH
42131: LD_INT 0
42133: PUSH
42134: EMPTY
42135: LIST
42136: LIST
42137: PUSH
42138: LD_INT 0
42140: PUSH
42141: LD_INT 1
42143: NEG
42144: PUSH
42145: EMPTY
42146: LIST
42147: LIST
42148: PUSH
42149: LD_INT 1
42151: PUSH
42152: LD_INT 0
42154: PUSH
42155: EMPTY
42156: LIST
42157: LIST
42158: PUSH
42159: LD_INT 1
42161: PUSH
42162: LD_INT 1
42164: PUSH
42165: EMPTY
42166: LIST
42167: LIST
42168: PUSH
42169: LD_INT 0
42171: PUSH
42172: LD_INT 1
42174: PUSH
42175: EMPTY
42176: LIST
42177: LIST
42178: PUSH
42179: LD_INT 1
42181: NEG
42182: PUSH
42183: LD_INT 0
42185: PUSH
42186: EMPTY
42187: LIST
42188: LIST
42189: PUSH
42190: LD_INT 1
42192: NEG
42193: PUSH
42194: LD_INT 1
42196: NEG
42197: PUSH
42198: EMPTY
42199: LIST
42200: LIST
42201: PUSH
42202: LD_INT 1
42204: PUSH
42205: LD_INT 2
42207: PUSH
42208: EMPTY
42209: LIST
42210: LIST
42211: PUSH
42212: LD_INT 0
42214: PUSH
42215: LD_INT 2
42217: PUSH
42218: EMPTY
42219: LIST
42220: LIST
42221: PUSH
42222: LD_INT 1
42224: NEG
42225: PUSH
42226: LD_INT 1
42228: PUSH
42229: EMPTY
42230: LIST
42231: LIST
42232: PUSH
42233: LD_INT 2
42235: NEG
42236: PUSH
42237: LD_INT 0
42239: PUSH
42240: EMPTY
42241: LIST
42242: LIST
42243: PUSH
42244: LD_INT 2
42246: NEG
42247: PUSH
42248: LD_INT 1
42250: NEG
42251: PUSH
42252: EMPTY
42253: LIST
42254: LIST
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: LIST
42260: LIST
42261: LIST
42262: LIST
42263: LIST
42264: LIST
42265: LIST
42266: LIST
42267: LIST
42268: LIST
42269: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42270: LD_ADDR_VAR 0 52
42274: PUSH
42275: LD_INT 0
42277: PUSH
42278: LD_INT 0
42280: PUSH
42281: EMPTY
42282: LIST
42283: LIST
42284: PUSH
42285: LD_INT 0
42287: PUSH
42288: LD_INT 1
42290: NEG
42291: PUSH
42292: EMPTY
42293: LIST
42294: LIST
42295: PUSH
42296: LD_INT 1
42298: PUSH
42299: LD_INT 0
42301: PUSH
42302: EMPTY
42303: LIST
42304: LIST
42305: PUSH
42306: LD_INT 1
42308: PUSH
42309: LD_INT 1
42311: PUSH
42312: EMPTY
42313: LIST
42314: LIST
42315: PUSH
42316: LD_INT 0
42318: PUSH
42319: LD_INT 1
42321: PUSH
42322: EMPTY
42323: LIST
42324: LIST
42325: PUSH
42326: LD_INT 1
42328: NEG
42329: PUSH
42330: LD_INT 0
42332: PUSH
42333: EMPTY
42334: LIST
42335: LIST
42336: PUSH
42337: LD_INT 1
42339: NEG
42340: PUSH
42341: LD_INT 1
42343: NEG
42344: PUSH
42345: EMPTY
42346: LIST
42347: LIST
42348: PUSH
42349: LD_INT 1
42351: NEG
42352: PUSH
42353: LD_INT 2
42355: NEG
42356: PUSH
42357: EMPTY
42358: LIST
42359: LIST
42360: PUSH
42361: LD_INT 1
42363: NEG
42364: PUSH
42365: LD_INT 1
42367: PUSH
42368: EMPTY
42369: LIST
42370: LIST
42371: PUSH
42372: LD_INT 2
42374: NEG
42375: PUSH
42376: LD_INT 0
42378: PUSH
42379: EMPTY
42380: LIST
42381: LIST
42382: PUSH
42383: LD_INT 2
42385: NEG
42386: PUSH
42387: LD_INT 1
42389: NEG
42390: PUSH
42391: EMPTY
42392: LIST
42393: LIST
42394: PUSH
42395: LD_INT 2
42397: NEG
42398: PUSH
42399: LD_INT 2
42401: NEG
42402: PUSH
42403: EMPTY
42404: LIST
42405: LIST
42406: PUSH
42407: EMPTY
42408: LIST
42409: LIST
42410: LIST
42411: LIST
42412: LIST
42413: LIST
42414: LIST
42415: LIST
42416: LIST
42417: LIST
42418: LIST
42419: LIST
42420: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42421: LD_ADDR_VAR 0 53
42425: PUSH
42426: LD_INT 0
42428: PUSH
42429: LD_INT 0
42431: PUSH
42432: EMPTY
42433: LIST
42434: LIST
42435: PUSH
42436: LD_INT 0
42438: PUSH
42439: LD_INT 1
42441: NEG
42442: PUSH
42443: EMPTY
42444: LIST
42445: LIST
42446: PUSH
42447: LD_INT 1
42449: PUSH
42450: LD_INT 0
42452: PUSH
42453: EMPTY
42454: LIST
42455: LIST
42456: PUSH
42457: LD_INT 1
42459: PUSH
42460: LD_INT 1
42462: PUSH
42463: EMPTY
42464: LIST
42465: LIST
42466: PUSH
42467: LD_INT 0
42469: PUSH
42470: LD_INT 1
42472: PUSH
42473: EMPTY
42474: LIST
42475: LIST
42476: PUSH
42477: LD_INT 1
42479: NEG
42480: PUSH
42481: LD_INT 0
42483: PUSH
42484: EMPTY
42485: LIST
42486: LIST
42487: PUSH
42488: LD_INT 1
42490: NEG
42491: PUSH
42492: LD_INT 1
42494: NEG
42495: PUSH
42496: EMPTY
42497: LIST
42498: LIST
42499: PUSH
42500: LD_INT 1
42502: NEG
42503: PUSH
42504: LD_INT 2
42506: NEG
42507: PUSH
42508: EMPTY
42509: LIST
42510: LIST
42511: PUSH
42512: LD_INT 0
42514: PUSH
42515: LD_INT 2
42517: NEG
42518: PUSH
42519: EMPTY
42520: LIST
42521: LIST
42522: PUSH
42523: LD_INT 1
42525: PUSH
42526: LD_INT 1
42528: NEG
42529: PUSH
42530: EMPTY
42531: LIST
42532: LIST
42533: PUSH
42534: LD_INT 2
42536: PUSH
42537: LD_INT 0
42539: PUSH
42540: EMPTY
42541: LIST
42542: LIST
42543: PUSH
42544: LD_INT 2
42546: PUSH
42547: LD_INT 1
42549: PUSH
42550: EMPTY
42551: LIST
42552: LIST
42553: PUSH
42554: LD_INT 2
42556: PUSH
42557: LD_INT 2
42559: PUSH
42560: EMPTY
42561: LIST
42562: LIST
42563: PUSH
42564: LD_INT 1
42566: PUSH
42567: LD_INT 2
42569: PUSH
42570: EMPTY
42571: LIST
42572: LIST
42573: PUSH
42574: LD_INT 0
42576: PUSH
42577: LD_INT 2
42579: PUSH
42580: EMPTY
42581: LIST
42582: LIST
42583: PUSH
42584: LD_INT 1
42586: NEG
42587: PUSH
42588: LD_INT 1
42590: PUSH
42591: EMPTY
42592: LIST
42593: LIST
42594: PUSH
42595: LD_INT 2
42597: NEG
42598: PUSH
42599: LD_INT 0
42601: PUSH
42602: EMPTY
42603: LIST
42604: LIST
42605: PUSH
42606: LD_INT 2
42608: NEG
42609: PUSH
42610: LD_INT 1
42612: NEG
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: PUSH
42618: LD_INT 2
42620: NEG
42621: PUSH
42622: LD_INT 2
42624: NEG
42625: PUSH
42626: EMPTY
42627: LIST
42628: LIST
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: LIST
42634: LIST
42635: LIST
42636: LIST
42637: LIST
42638: LIST
42639: LIST
42640: LIST
42641: LIST
42642: LIST
42643: LIST
42644: LIST
42645: LIST
42646: LIST
42647: LIST
42648: LIST
42649: LIST
42650: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42651: LD_ADDR_VAR 0 54
42655: PUSH
42656: LD_INT 0
42658: PUSH
42659: LD_INT 0
42661: PUSH
42662: EMPTY
42663: LIST
42664: LIST
42665: PUSH
42666: LD_INT 0
42668: PUSH
42669: LD_INT 1
42671: NEG
42672: PUSH
42673: EMPTY
42674: LIST
42675: LIST
42676: PUSH
42677: LD_INT 1
42679: PUSH
42680: LD_INT 0
42682: PUSH
42683: EMPTY
42684: LIST
42685: LIST
42686: PUSH
42687: LD_INT 1
42689: PUSH
42690: LD_INT 1
42692: PUSH
42693: EMPTY
42694: LIST
42695: LIST
42696: PUSH
42697: LD_INT 0
42699: PUSH
42700: LD_INT 1
42702: PUSH
42703: EMPTY
42704: LIST
42705: LIST
42706: PUSH
42707: LD_INT 1
42709: NEG
42710: PUSH
42711: LD_INT 0
42713: PUSH
42714: EMPTY
42715: LIST
42716: LIST
42717: PUSH
42718: LD_INT 1
42720: NEG
42721: PUSH
42722: LD_INT 1
42724: NEG
42725: PUSH
42726: EMPTY
42727: LIST
42728: LIST
42729: PUSH
42730: LD_INT 1
42732: NEG
42733: PUSH
42734: LD_INT 2
42736: NEG
42737: PUSH
42738: EMPTY
42739: LIST
42740: LIST
42741: PUSH
42742: LD_INT 0
42744: PUSH
42745: LD_INT 2
42747: NEG
42748: PUSH
42749: EMPTY
42750: LIST
42751: LIST
42752: PUSH
42753: LD_INT 1
42755: PUSH
42756: LD_INT 1
42758: NEG
42759: PUSH
42760: EMPTY
42761: LIST
42762: LIST
42763: PUSH
42764: LD_INT 2
42766: PUSH
42767: LD_INT 0
42769: PUSH
42770: EMPTY
42771: LIST
42772: LIST
42773: PUSH
42774: LD_INT 2
42776: PUSH
42777: LD_INT 1
42779: PUSH
42780: EMPTY
42781: LIST
42782: LIST
42783: PUSH
42784: LD_INT 2
42786: PUSH
42787: LD_INT 2
42789: PUSH
42790: EMPTY
42791: LIST
42792: LIST
42793: PUSH
42794: LD_INT 1
42796: PUSH
42797: LD_INT 2
42799: PUSH
42800: EMPTY
42801: LIST
42802: LIST
42803: PUSH
42804: LD_INT 0
42806: PUSH
42807: LD_INT 2
42809: PUSH
42810: EMPTY
42811: LIST
42812: LIST
42813: PUSH
42814: LD_INT 1
42816: NEG
42817: PUSH
42818: LD_INT 1
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: PUSH
42825: LD_INT 2
42827: NEG
42828: PUSH
42829: LD_INT 0
42831: PUSH
42832: EMPTY
42833: LIST
42834: LIST
42835: PUSH
42836: LD_INT 2
42838: NEG
42839: PUSH
42840: LD_INT 1
42842: NEG
42843: PUSH
42844: EMPTY
42845: LIST
42846: LIST
42847: PUSH
42848: LD_INT 2
42850: NEG
42851: PUSH
42852: LD_INT 2
42854: NEG
42855: PUSH
42856: EMPTY
42857: LIST
42858: LIST
42859: PUSH
42860: EMPTY
42861: LIST
42862: LIST
42863: LIST
42864: LIST
42865: LIST
42866: LIST
42867: LIST
42868: LIST
42869: LIST
42870: LIST
42871: LIST
42872: LIST
42873: LIST
42874: LIST
42875: LIST
42876: LIST
42877: LIST
42878: LIST
42879: LIST
42880: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42881: LD_ADDR_VAR 0 55
42885: PUSH
42886: LD_INT 0
42888: PUSH
42889: LD_INT 0
42891: PUSH
42892: EMPTY
42893: LIST
42894: LIST
42895: PUSH
42896: LD_INT 0
42898: PUSH
42899: LD_INT 1
42901: NEG
42902: PUSH
42903: EMPTY
42904: LIST
42905: LIST
42906: PUSH
42907: LD_INT 1
42909: PUSH
42910: LD_INT 0
42912: PUSH
42913: EMPTY
42914: LIST
42915: LIST
42916: PUSH
42917: LD_INT 1
42919: PUSH
42920: LD_INT 1
42922: PUSH
42923: EMPTY
42924: LIST
42925: LIST
42926: PUSH
42927: LD_INT 0
42929: PUSH
42930: LD_INT 1
42932: PUSH
42933: EMPTY
42934: LIST
42935: LIST
42936: PUSH
42937: LD_INT 1
42939: NEG
42940: PUSH
42941: LD_INT 0
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: PUSH
42948: LD_INT 1
42950: NEG
42951: PUSH
42952: LD_INT 1
42954: NEG
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: PUSH
42960: LD_INT 1
42962: NEG
42963: PUSH
42964: LD_INT 2
42966: NEG
42967: PUSH
42968: EMPTY
42969: LIST
42970: LIST
42971: PUSH
42972: LD_INT 0
42974: PUSH
42975: LD_INT 2
42977: NEG
42978: PUSH
42979: EMPTY
42980: LIST
42981: LIST
42982: PUSH
42983: LD_INT 1
42985: PUSH
42986: LD_INT 1
42988: NEG
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: PUSH
42994: LD_INT 2
42996: PUSH
42997: LD_INT 0
42999: PUSH
43000: EMPTY
43001: LIST
43002: LIST
43003: PUSH
43004: LD_INT 2
43006: PUSH
43007: LD_INT 1
43009: PUSH
43010: EMPTY
43011: LIST
43012: LIST
43013: PUSH
43014: LD_INT 2
43016: PUSH
43017: LD_INT 2
43019: PUSH
43020: EMPTY
43021: LIST
43022: LIST
43023: PUSH
43024: LD_INT 1
43026: PUSH
43027: LD_INT 2
43029: PUSH
43030: EMPTY
43031: LIST
43032: LIST
43033: PUSH
43034: LD_INT 0
43036: PUSH
43037: LD_INT 2
43039: PUSH
43040: EMPTY
43041: LIST
43042: LIST
43043: PUSH
43044: LD_INT 1
43046: NEG
43047: PUSH
43048: LD_INT 1
43050: PUSH
43051: EMPTY
43052: LIST
43053: LIST
43054: PUSH
43055: LD_INT 2
43057: NEG
43058: PUSH
43059: LD_INT 0
43061: PUSH
43062: EMPTY
43063: LIST
43064: LIST
43065: PUSH
43066: LD_INT 2
43068: NEG
43069: PUSH
43070: LD_INT 1
43072: NEG
43073: PUSH
43074: EMPTY
43075: LIST
43076: LIST
43077: PUSH
43078: LD_INT 2
43080: NEG
43081: PUSH
43082: LD_INT 2
43084: NEG
43085: PUSH
43086: EMPTY
43087: LIST
43088: LIST
43089: PUSH
43090: EMPTY
43091: LIST
43092: LIST
43093: LIST
43094: LIST
43095: LIST
43096: LIST
43097: LIST
43098: LIST
43099: LIST
43100: LIST
43101: LIST
43102: LIST
43103: LIST
43104: LIST
43105: LIST
43106: LIST
43107: LIST
43108: LIST
43109: LIST
43110: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43111: LD_ADDR_VAR 0 56
43115: PUSH
43116: LD_INT 0
43118: PUSH
43119: LD_INT 0
43121: PUSH
43122: EMPTY
43123: LIST
43124: LIST
43125: PUSH
43126: LD_INT 0
43128: PUSH
43129: LD_INT 1
43131: NEG
43132: PUSH
43133: EMPTY
43134: LIST
43135: LIST
43136: PUSH
43137: LD_INT 1
43139: PUSH
43140: LD_INT 0
43142: PUSH
43143: EMPTY
43144: LIST
43145: LIST
43146: PUSH
43147: LD_INT 1
43149: PUSH
43150: LD_INT 1
43152: PUSH
43153: EMPTY
43154: LIST
43155: LIST
43156: PUSH
43157: LD_INT 0
43159: PUSH
43160: LD_INT 1
43162: PUSH
43163: EMPTY
43164: LIST
43165: LIST
43166: PUSH
43167: LD_INT 1
43169: NEG
43170: PUSH
43171: LD_INT 0
43173: PUSH
43174: EMPTY
43175: LIST
43176: LIST
43177: PUSH
43178: LD_INT 1
43180: NEG
43181: PUSH
43182: LD_INT 1
43184: NEG
43185: PUSH
43186: EMPTY
43187: LIST
43188: LIST
43189: PUSH
43190: LD_INT 1
43192: NEG
43193: PUSH
43194: LD_INT 2
43196: NEG
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: PUSH
43202: LD_INT 0
43204: PUSH
43205: LD_INT 2
43207: NEG
43208: PUSH
43209: EMPTY
43210: LIST
43211: LIST
43212: PUSH
43213: LD_INT 1
43215: PUSH
43216: LD_INT 1
43218: NEG
43219: PUSH
43220: EMPTY
43221: LIST
43222: LIST
43223: PUSH
43224: LD_INT 2
43226: PUSH
43227: LD_INT 0
43229: PUSH
43230: EMPTY
43231: LIST
43232: LIST
43233: PUSH
43234: LD_INT 2
43236: PUSH
43237: LD_INT 1
43239: PUSH
43240: EMPTY
43241: LIST
43242: LIST
43243: PUSH
43244: LD_INT 2
43246: PUSH
43247: LD_INT 2
43249: PUSH
43250: EMPTY
43251: LIST
43252: LIST
43253: PUSH
43254: LD_INT 1
43256: PUSH
43257: LD_INT 2
43259: PUSH
43260: EMPTY
43261: LIST
43262: LIST
43263: PUSH
43264: LD_INT 0
43266: PUSH
43267: LD_INT 2
43269: PUSH
43270: EMPTY
43271: LIST
43272: LIST
43273: PUSH
43274: LD_INT 1
43276: NEG
43277: PUSH
43278: LD_INT 1
43280: PUSH
43281: EMPTY
43282: LIST
43283: LIST
43284: PUSH
43285: LD_INT 2
43287: NEG
43288: PUSH
43289: LD_INT 0
43291: PUSH
43292: EMPTY
43293: LIST
43294: LIST
43295: PUSH
43296: LD_INT 2
43298: NEG
43299: PUSH
43300: LD_INT 1
43302: NEG
43303: PUSH
43304: EMPTY
43305: LIST
43306: LIST
43307: PUSH
43308: LD_INT 2
43310: NEG
43311: PUSH
43312: LD_INT 2
43314: NEG
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: LIST
43324: LIST
43325: LIST
43326: LIST
43327: LIST
43328: LIST
43329: LIST
43330: LIST
43331: LIST
43332: LIST
43333: LIST
43334: LIST
43335: LIST
43336: LIST
43337: LIST
43338: LIST
43339: LIST
43340: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43341: LD_ADDR_VAR 0 57
43345: PUSH
43346: LD_INT 0
43348: PUSH
43349: LD_INT 0
43351: PUSH
43352: EMPTY
43353: LIST
43354: LIST
43355: PUSH
43356: LD_INT 0
43358: PUSH
43359: LD_INT 1
43361: NEG
43362: PUSH
43363: EMPTY
43364: LIST
43365: LIST
43366: PUSH
43367: LD_INT 1
43369: PUSH
43370: LD_INT 0
43372: PUSH
43373: EMPTY
43374: LIST
43375: LIST
43376: PUSH
43377: LD_INT 1
43379: PUSH
43380: LD_INT 1
43382: PUSH
43383: EMPTY
43384: LIST
43385: LIST
43386: PUSH
43387: LD_INT 0
43389: PUSH
43390: LD_INT 1
43392: PUSH
43393: EMPTY
43394: LIST
43395: LIST
43396: PUSH
43397: LD_INT 1
43399: NEG
43400: PUSH
43401: LD_INT 0
43403: PUSH
43404: EMPTY
43405: LIST
43406: LIST
43407: PUSH
43408: LD_INT 1
43410: NEG
43411: PUSH
43412: LD_INT 1
43414: NEG
43415: PUSH
43416: EMPTY
43417: LIST
43418: LIST
43419: PUSH
43420: LD_INT 1
43422: NEG
43423: PUSH
43424: LD_INT 2
43426: NEG
43427: PUSH
43428: EMPTY
43429: LIST
43430: LIST
43431: PUSH
43432: LD_INT 0
43434: PUSH
43435: LD_INT 2
43437: NEG
43438: PUSH
43439: EMPTY
43440: LIST
43441: LIST
43442: PUSH
43443: LD_INT 1
43445: PUSH
43446: LD_INT 1
43448: NEG
43449: PUSH
43450: EMPTY
43451: LIST
43452: LIST
43453: PUSH
43454: LD_INT 2
43456: PUSH
43457: LD_INT 0
43459: PUSH
43460: EMPTY
43461: LIST
43462: LIST
43463: PUSH
43464: LD_INT 2
43466: PUSH
43467: LD_INT 1
43469: PUSH
43470: EMPTY
43471: LIST
43472: LIST
43473: PUSH
43474: LD_INT 2
43476: PUSH
43477: LD_INT 2
43479: PUSH
43480: EMPTY
43481: LIST
43482: LIST
43483: PUSH
43484: LD_INT 1
43486: PUSH
43487: LD_INT 2
43489: PUSH
43490: EMPTY
43491: LIST
43492: LIST
43493: PUSH
43494: LD_INT 0
43496: PUSH
43497: LD_INT 2
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: PUSH
43504: LD_INT 1
43506: NEG
43507: PUSH
43508: LD_INT 1
43510: PUSH
43511: EMPTY
43512: LIST
43513: LIST
43514: PUSH
43515: LD_INT 2
43517: NEG
43518: PUSH
43519: LD_INT 0
43521: PUSH
43522: EMPTY
43523: LIST
43524: LIST
43525: PUSH
43526: LD_INT 2
43528: NEG
43529: PUSH
43530: LD_INT 1
43532: NEG
43533: PUSH
43534: EMPTY
43535: LIST
43536: LIST
43537: PUSH
43538: LD_INT 2
43540: NEG
43541: PUSH
43542: LD_INT 2
43544: NEG
43545: PUSH
43546: EMPTY
43547: LIST
43548: LIST
43549: PUSH
43550: EMPTY
43551: LIST
43552: LIST
43553: LIST
43554: LIST
43555: LIST
43556: LIST
43557: LIST
43558: LIST
43559: LIST
43560: LIST
43561: LIST
43562: LIST
43563: LIST
43564: LIST
43565: LIST
43566: LIST
43567: LIST
43568: LIST
43569: LIST
43570: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43571: LD_ADDR_VAR 0 58
43575: PUSH
43576: LD_INT 0
43578: PUSH
43579: LD_INT 0
43581: PUSH
43582: EMPTY
43583: LIST
43584: LIST
43585: PUSH
43586: LD_INT 0
43588: PUSH
43589: LD_INT 1
43591: NEG
43592: PUSH
43593: EMPTY
43594: LIST
43595: LIST
43596: PUSH
43597: LD_INT 1
43599: PUSH
43600: LD_INT 0
43602: PUSH
43603: EMPTY
43604: LIST
43605: LIST
43606: PUSH
43607: LD_INT 1
43609: PUSH
43610: LD_INT 1
43612: PUSH
43613: EMPTY
43614: LIST
43615: LIST
43616: PUSH
43617: LD_INT 0
43619: PUSH
43620: LD_INT 1
43622: PUSH
43623: EMPTY
43624: LIST
43625: LIST
43626: PUSH
43627: LD_INT 1
43629: NEG
43630: PUSH
43631: LD_INT 0
43633: PUSH
43634: EMPTY
43635: LIST
43636: LIST
43637: PUSH
43638: LD_INT 1
43640: NEG
43641: PUSH
43642: LD_INT 1
43644: NEG
43645: PUSH
43646: EMPTY
43647: LIST
43648: LIST
43649: PUSH
43650: LD_INT 1
43652: NEG
43653: PUSH
43654: LD_INT 2
43656: NEG
43657: PUSH
43658: EMPTY
43659: LIST
43660: LIST
43661: PUSH
43662: LD_INT 0
43664: PUSH
43665: LD_INT 2
43667: NEG
43668: PUSH
43669: EMPTY
43670: LIST
43671: LIST
43672: PUSH
43673: LD_INT 1
43675: PUSH
43676: LD_INT 1
43678: NEG
43679: PUSH
43680: EMPTY
43681: LIST
43682: LIST
43683: PUSH
43684: LD_INT 2
43686: PUSH
43687: LD_INT 0
43689: PUSH
43690: EMPTY
43691: LIST
43692: LIST
43693: PUSH
43694: LD_INT 2
43696: PUSH
43697: LD_INT 1
43699: PUSH
43700: EMPTY
43701: LIST
43702: LIST
43703: PUSH
43704: LD_INT 2
43706: PUSH
43707: LD_INT 2
43709: PUSH
43710: EMPTY
43711: LIST
43712: LIST
43713: PUSH
43714: LD_INT 1
43716: PUSH
43717: LD_INT 2
43719: PUSH
43720: EMPTY
43721: LIST
43722: LIST
43723: PUSH
43724: LD_INT 0
43726: PUSH
43727: LD_INT 2
43729: PUSH
43730: EMPTY
43731: LIST
43732: LIST
43733: PUSH
43734: LD_INT 1
43736: NEG
43737: PUSH
43738: LD_INT 1
43740: PUSH
43741: EMPTY
43742: LIST
43743: LIST
43744: PUSH
43745: LD_INT 2
43747: NEG
43748: PUSH
43749: LD_INT 0
43751: PUSH
43752: EMPTY
43753: LIST
43754: LIST
43755: PUSH
43756: LD_INT 2
43758: NEG
43759: PUSH
43760: LD_INT 1
43762: NEG
43763: PUSH
43764: EMPTY
43765: LIST
43766: LIST
43767: PUSH
43768: LD_INT 2
43770: NEG
43771: PUSH
43772: LD_INT 2
43774: NEG
43775: PUSH
43776: EMPTY
43777: LIST
43778: LIST
43779: PUSH
43780: EMPTY
43781: LIST
43782: LIST
43783: LIST
43784: LIST
43785: LIST
43786: LIST
43787: LIST
43788: LIST
43789: LIST
43790: LIST
43791: LIST
43792: LIST
43793: LIST
43794: LIST
43795: LIST
43796: LIST
43797: LIST
43798: LIST
43799: LIST
43800: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43801: LD_ADDR_VAR 0 59
43805: PUSH
43806: LD_INT 0
43808: PUSH
43809: LD_INT 0
43811: PUSH
43812: EMPTY
43813: LIST
43814: LIST
43815: PUSH
43816: LD_INT 0
43818: PUSH
43819: LD_INT 1
43821: NEG
43822: PUSH
43823: EMPTY
43824: LIST
43825: LIST
43826: PUSH
43827: LD_INT 1
43829: PUSH
43830: LD_INT 0
43832: PUSH
43833: EMPTY
43834: LIST
43835: LIST
43836: PUSH
43837: LD_INT 1
43839: PUSH
43840: LD_INT 1
43842: PUSH
43843: EMPTY
43844: LIST
43845: LIST
43846: PUSH
43847: LD_INT 0
43849: PUSH
43850: LD_INT 1
43852: PUSH
43853: EMPTY
43854: LIST
43855: LIST
43856: PUSH
43857: LD_INT 1
43859: NEG
43860: PUSH
43861: LD_INT 0
43863: PUSH
43864: EMPTY
43865: LIST
43866: LIST
43867: PUSH
43868: LD_INT 1
43870: NEG
43871: PUSH
43872: LD_INT 1
43874: NEG
43875: PUSH
43876: EMPTY
43877: LIST
43878: LIST
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: LIST
43884: LIST
43885: LIST
43886: LIST
43887: LIST
43888: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43889: LD_ADDR_VAR 0 60
43893: PUSH
43894: LD_INT 0
43896: PUSH
43897: LD_INT 0
43899: PUSH
43900: EMPTY
43901: LIST
43902: LIST
43903: PUSH
43904: LD_INT 0
43906: PUSH
43907: LD_INT 1
43909: NEG
43910: PUSH
43911: EMPTY
43912: LIST
43913: LIST
43914: PUSH
43915: LD_INT 1
43917: PUSH
43918: LD_INT 0
43920: PUSH
43921: EMPTY
43922: LIST
43923: LIST
43924: PUSH
43925: LD_INT 1
43927: PUSH
43928: LD_INT 1
43930: PUSH
43931: EMPTY
43932: LIST
43933: LIST
43934: PUSH
43935: LD_INT 0
43937: PUSH
43938: LD_INT 1
43940: PUSH
43941: EMPTY
43942: LIST
43943: LIST
43944: PUSH
43945: LD_INT 1
43947: NEG
43948: PUSH
43949: LD_INT 0
43951: PUSH
43952: EMPTY
43953: LIST
43954: LIST
43955: PUSH
43956: LD_INT 1
43958: NEG
43959: PUSH
43960: LD_INT 1
43962: NEG
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: PUSH
43968: EMPTY
43969: LIST
43970: LIST
43971: LIST
43972: LIST
43973: LIST
43974: LIST
43975: LIST
43976: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43977: LD_ADDR_VAR 0 61
43981: PUSH
43982: LD_INT 0
43984: PUSH
43985: LD_INT 0
43987: PUSH
43988: EMPTY
43989: LIST
43990: LIST
43991: PUSH
43992: LD_INT 0
43994: PUSH
43995: LD_INT 1
43997: NEG
43998: PUSH
43999: EMPTY
44000: LIST
44001: LIST
44002: PUSH
44003: LD_INT 1
44005: PUSH
44006: LD_INT 0
44008: PUSH
44009: EMPTY
44010: LIST
44011: LIST
44012: PUSH
44013: LD_INT 1
44015: PUSH
44016: LD_INT 1
44018: PUSH
44019: EMPTY
44020: LIST
44021: LIST
44022: PUSH
44023: LD_INT 0
44025: PUSH
44026: LD_INT 1
44028: PUSH
44029: EMPTY
44030: LIST
44031: LIST
44032: PUSH
44033: LD_INT 1
44035: NEG
44036: PUSH
44037: LD_INT 0
44039: PUSH
44040: EMPTY
44041: LIST
44042: LIST
44043: PUSH
44044: LD_INT 1
44046: NEG
44047: PUSH
44048: LD_INT 1
44050: NEG
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: EMPTY
44057: LIST
44058: LIST
44059: LIST
44060: LIST
44061: LIST
44062: LIST
44063: LIST
44064: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44065: LD_ADDR_VAR 0 62
44069: PUSH
44070: LD_INT 0
44072: PUSH
44073: LD_INT 0
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: PUSH
44080: LD_INT 0
44082: PUSH
44083: LD_INT 1
44085: NEG
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: PUSH
44091: LD_INT 1
44093: PUSH
44094: LD_INT 0
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: PUSH
44101: LD_INT 1
44103: PUSH
44104: LD_INT 1
44106: PUSH
44107: EMPTY
44108: LIST
44109: LIST
44110: PUSH
44111: LD_INT 0
44113: PUSH
44114: LD_INT 1
44116: PUSH
44117: EMPTY
44118: LIST
44119: LIST
44120: PUSH
44121: LD_INT 1
44123: NEG
44124: PUSH
44125: LD_INT 0
44127: PUSH
44128: EMPTY
44129: LIST
44130: LIST
44131: PUSH
44132: LD_INT 1
44134: NEG
44135: PUSH
44136: LD_INT 1
44138: NEG
44139: PUSH
44140: EMPTY
44141: LIST
44142: LIST
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: LIST
44148: LIST
44149: LIST
44150: LIST
44151: LIST
44152: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44153: LD_ADDR_VAR 0 63
44157: PUSH
44158: LD_INT 0
44160: PUSH
44161: LD_INT 0
44163: PUSH
44164: EMPTY
44165: LIST
44166: LIST
44167: PUSH
44168: LD_INT 0
44170: PUSH
44171: LD_INT 1
44173: NEG
44174: PUSH
44175: EMPTY
44176: LIST
44177: LIST
44178: PUSH
44179: LD_INT 1
44181: PUSH
44182: LD_INT 0
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: PUSH
44189: LD_INT 1
44191: PUSH
44192: LD_INT 1
44194: PUSH
44195: EMPTY
44196: LIST
44197: LIST
44198: PUSH
44199: LD_INT 0
44201: PUSH
44202: LD_INT 1
44204: PUSH
44205: EMPTY
44206: LIST
44207: LIST
44208: PUSH
44209: LD_INT 1
44211: NEG
44212: PUSH
44213: LD_INT 0
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: PUSH
44220: LD_INT 1
44222: NEG
44223: PUSH
44224: LD_INT 1
44226: NEG
44227: PUSH
44228: EMPTY
44229: LIST
44230: LIST
44231: PUSH
44232: EMPTY
44233: LIST
44234: LIST
44235: LIST
44236: LIST
44237: LIST
44238: LIST
44239: LIST
44240: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44241: LD_ADDR_VAR 0 64
44245: PUSH
44246: LD_INT 0
44248: PUSH
44249: LD_INT 0
44251: PUSH
44252: EMPTY
44253: LIST
44254: LIST
44255: PUSH
44256: LD_INT 0
44258: PUSH
44259: LD_INT 1
44261: NEG
44262: PUSH
44263: EMPTY
44264: LIST
44265: LIST
44266: PUSH
44267: LD_INT 1
44269: PUSH
44270: LD_INT 0
44272: PUSH
44273: EMPTY
44274: LIST
44275: LIST
44276: PUSH
44277: LD_INT 1
44279: PUSH
44280: LD_INT 1
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: PUSH
44287: LD_INT 0
44289: PUSH
44290: LD_INT 1
44292: PUSH
44293: EMPTY
44294: LIST
44295: LIST
44296: PUSH
44297: LD_INT 1
44299: NEG
44300: PUSH
44301: LD_INT 0
44303: PUSH
44304: EMPTY
44305: LIST
44306: LIST
44307: PUSH
44308: LD_INT 1
44310: NEG
44311: PUSH
44312: LD_INT 1
44314: NEG
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: LIST
44324: LIST
44325: LIST
44326: LIST
44327: LIST
44328: ST_TO_ADDR
// end ; 1 :
44329: GO 50226
44331: LD_INT 1
44333: DOUBLE
44334: EQUAL
44335: IFTRUE 44339
44337: GO 46962
44339: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44340: LD_ADDR_VAR 0 11
44344: PUSH
44345: LD_INT 1
44347: NEG
44348: PUSH
44349: LD_INT 3
44351: NEG
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: PUSH
44357: LD_INT 0
44359: PUSH
44360: LD_INT 3
44362: NEG
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: PUSH
44368: LD_INT 1
44370: PUSH
44371: LD_INT 2
44373: NEG
44374: PUSH
44375: EMPTY
44376: LIST
44377: LIST
44378: PUSH
44379: EMPTY
44380: LIST
44381: LIST
44382: LIST
44383: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44384: LD_ADDR_VAR 0 12
44388: PUSH
44389: LD_INT 2
44391: PUSH
44392: LD_INT 1
44394: NEG
44395: PUSH
44396: EMPTY
44397: LIST
44398: LIST
44399: PUSH
44400: LD_INT 3
44402: PUSH
44403: LD_INT 0
44405: PUSH
44406: EMPTY
44407: LIST
44408: LIST
44409: PUSH
44410: LD_INT 3
44412: PUSH
44413: LD_INT 1
44415: PUSH
44416: EMPTY
44417: LIST
44418: LIST
44419: PUSH
44420: EMPTY
44421: LIST
44422: LIST
44423: LIST
44424: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44425: LD_ADDR_VAR 0 13
44429: PUSH
44430: LD_INT 3
44432: PUSH
44433: LD_INT 2
44435: PUSH
44436: EMPTY
44437: LIST
44438: LIST
44439: PUSH
44440: LD_INT 3
44442: PUSH
44443: LD_INT 3
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: PUSH
44450: LD_INT 2
44452: PUSH
44453: LD_INT 3
44455: PUSH
44456: EMPTY
44457: LIST
44458: LIST
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: LIST
44464: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44465: LD_ADDR_VAR 0 14
44469: PUSH
44470: LD_INT 1
44472: PUSH
44473: LD_INT 3
44475: PUSH
44476: EMPTY
44477: LIST
44478: LIST
44479: PUSH
44480: LD_INT 0
44482: PUSH
44483: LD_INT 3
44485: PUSH
44486: EMPTY
44487: LIST
44488: LIST
44489: PUSH
44490: LD_INT 1
44492: NEG
44493: PUSH
44494: LD_INT 2
44496: PUSH
44497: EMPTY
44498: LIST
44499: LIST
44500: PUSH
44501: EMPTY
44502: LIST
44503: LIST
44504: LIST
44505: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44506: LD_ADDR_VAR 0 15
44510: PUSH
44511: LD_INT 2
44513: NEG
44514: PUSH
44515: LD_INT 1
44517: PUSH
44518: EMPTY
44519: LIST
44520: LIST
44521: PUSH
44522: LD_INT 3
44524: NEG
44525: PUSH
44526: LD_INT 0
44528: PUSH
44529: EMPTY
44530: LIST
44531: LIST
44532: PUSH
44533: LD_INT 3
44535: NEG
44536: PUSH
44537: LD_INT 1
44539: NEG
44540: PUSH
44541: EMPTY
44542: LIST
44543: LIST
44544: PUSH
44545: EMPTY
44546: LIST
44547: LIST
44548: LIST
44549: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44550: LD_ADDR_VAR 0 16
44554: PUSH
44555: LD_INT 2
44557: NEG
44558: PUSH
44559: LD_INT 3
44561: NEG
44562: PUSH
44563: EMPTY
44564: LIST
44565: LIST
44566: PUSH
44567: LD_INT 3
44569: NEG
44570: PUSH
44571: LD_INT 2
44573: NEG
44574: PUSH
44575: EMPTY
44576: LIST
44577: LIST
44578: PUSH
44579: LD_INT 3
44581: NEG
44582: PUSH
44583: LD_INT 3
44585: NEG
44586: PUSH
44587: EMPTY
44588: LIST
44589: LIST
44590: PUSH
44591: EMPTY
44592: LIST
44593: LIST
44594: LIST
44595: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44596: LD_ADDR_VAR 0 17
44600: PUSH
44601: LD_INT 1
44603: NEG
44604: PUSH
44605: LD_INT 3
44607: NEG
44608: PUSH
44609: EMPTY
44610: LIST
44611: LIST
44612: PUSH
44613: LD_INT 0
44615: PUSH
44616: LD_INT 3
44618: NEG
44619: PUSH
44620: EMPTY
44621: LIST
44622: LIST
44623: PUSH
44624: LD_INT 1
44626: PUSH
44627: LD_INT 2
44629: NEG
44630: PUSH
44631: EMPTY
44632: LIST
44633: LIST
44634: PUSH
44635: EMPTY
44636: LIST
44637: LIST
44638: LIST
44639: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44640: LD_ADDR_VAR 0 18
44644: PUSH
44645: LD_INT 2
44647: PUSH
44648: LD_INT 1
44650: NEG
44651: PUSH
44652: EMPTY
44653: LIST
44654: LIST
44655: PUSH
44656: LD_INT 3
44658: PUSH
44659: LD_INT 0
44661: PUSH
44662: EMPTY
44663: LIST
44664: LIST
44665: PUSH
44666: LD_INT 3
44668: PUSH
44669: LD_INT 1
44671: PUSH
44672: EMPTY
44673: LIST
44674: LIST
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: LIST
44680: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44681: LD_ADDR_VAR 0 19
44685: PUSH
44686: LD_INT 3
44688: PUSH
44689: LD_INT 2
44691: PUSH
44692: EMPTY
44693: LIST
44694: LIST
44695: PUSH
44696: LD_INT 3
44698: PUSH
44699: LD_INT 3
44701: PUSH
44702: EMPTY
44703: LIST
44704: LIST
44705: PUSH
44706: LD_INT 2
44708: PUSH
44709: LD_INT 3
44711: PUSH
44712: EMPTY
44713: LIST
44714: LIST
44715: PUSH
44716: EMPTY
44717: LIST
44718: LIST
44719: LIST
44720: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44721: LD_ADDR_VAR 0 20
44725: PUSH
44726: LD_INT 1
44728: PUSH
44729: LD_INT 3
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: PUSH
44736: LD_INT 0
44738: PUSH
44739: LD_INT 3
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PUSH
44746: LD_INT 1
44748: NEG
44749: PUSH
44750: LD_INT 2
44752: PUSH
44753: EMPTY
44754: LIST
44755: LIST
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: LIST
44761: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44762: LD_ADDR_VAR 0 21
44766: PUSH
44767: LD_INT 2
44769: NEG
44770: PUSH
44771: LD_INT 1
44773: PUSH
44774: EMPTY
44775: LIST
44776: LIST
44777: PUSH
44778: LD_INT 3
44780: NEG
44781: PUSH
44782: LD_INT 0
44784: PUSH
44785: EMPTY
44786: LIST
44787: LIST
44788: PUSH
44789: LD_INT 3
44791: NEG
44792: PUSH
44793: LD_INT 1
44795: NEG
44796: PUSH
44797: EMPTY
44798: LIST
44799: LIST
44800: PUSH
44801: EMPTY
44802: LIST
44803: LIST
44804: LIST
44805: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44806: LD_ADDR_VAR 0 22
44810: PUSH
44811: LD_INT 2
44813: NEG
44814: PUSH
44815: LD_INT 3
44817: NEG
44818: PUSH
44819: EMPTY
44820: LIST
44821: LIST
44822: PUSH
44823: LD_INT 3
44825: NEG
44826: PUSH
44827: LD_INT 2
44829: NEG
44830: PUSH
44831: EMPTY
44832: LIST
44833: LIST
44834: PUSH
44835: LD_INT 3
44837: NEG
44838: PUSH
44839: LD_INT 3
44841: NEG
44842: PUSH
44843: EMPTY
44844: LIST
44845: LIST
44846: PUSH
44847: EMPTY
44848: LIST
44849: LIST
44850: LIST
44851: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
44852: LD_ADDR_VAR 0 23
44856: PUSH
44857: LD_INT 0
44859: PUSH
44860: LD_INT 3
44862: NEG
44863: PUSH
44864: EMPTY
44865: LIST
44866: LIST
44867: PUSH
44868: LD_INT 1
44870: NEG
44871: PUSH
44872: LD_INT 4
44874: NEG
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: PUSH
44880: LD_INT 1
44882: PUSH
44883: LD_INT 3
44885: NEG
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: PUSH
44891: EMPTY
44892: LIST
44893: LIST
44894: LIST
44895: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
44896: LD_ADDR_VAR 0 24
44900: PUSH
44901: LD_INT 3
44903: PUSH
44904: LD_INT 0
44906: PUSH
44907: EMPTY
44908: LIST
44909: LIST
44910: PUSH
44911: LD_INT 3
44913: PUSH
44914: LD_INT 1
44916: NEG
44917: PUSH
44918: EMPTY
44919: LIST
44920: LIST
44921: PUSH
44922: LD_INT 4
44924: PUSH
44925: LD_INT 1
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: LIST
44936: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
44937: LD_ADDR_VAR 0 25
44941: PUSH
44942: LD_INT 3
44944: PUSH
44945: LD_INT 3
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: PUSH
44952: LD_INT 4
44954: PUSH
44955: LD_INT 3
44957: PUSH
44958: EMPTY
44959: LIST
44960: LIST
44961: PUSH
44962: LD_INT 3
44964: PUSH
44965: LD_INT 4
44967: PUSH
44968: EMPTY
44969: LIST
44970: LIST
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: LIST
44976: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
44977: LD_ADDR_VAR 0 26
44981: PUSH
44982: LD_INT 0
44984: PUSH
44985: LD_INT 3
44987: PUSH
44988: EMPTY
44989: LIST
44990: LIST
44991: PUSH
44992: LD_INT 1
44994: PUSH
44995: LD_INT 4
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: PUSH
45002: LD_INT 1
45004: NEG
45005: PUSH
45006: LD_INT 3
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: PUSH
45013: EMPTY
45014: LIST
45015: LIST
45016: LIST
45017: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
45018: LD_ADDR_VAR 0 27
45022: PUSH
45023: LD_INT 3
45025: NEG
45026: PUSH
45027: LD_INT 0
45029: PUSH
45030: EMPTY
45031: LIST
45032: LIST
45033: PUSH
45034: LD_INT 3
45036: NEG
45037: PUSH
45038: LD_INT 1
45040: PUSH
45041: EMPTY
45042: LIST
45043: LIST
45044: PUSH
45045: LD_INT 4
45047: NEG
45048: PUSH
45049: LD_INT 1
45051: NEG
45052: PUSH
45053: EMPTY
45054: LIST
45055: LIST
45056: PUSH
45057: EMPTY
45058: LIST
45059: LIST
45060: LIST
45061: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
45062: LD_ADDR_VAR 0 28
45066: PUSH
45067: LD_INT 3
45069: NEG
45070: PUSH
45071: LD_INT 3
45073: NEG
45074: PUSH
45075: EMPTY
45076: LIST
45077: LIST
45078: PUSH
45079: LD_INT 3
45081: NEG
45082: PUSH
45083: LD_INT 4
45085: NEG
45086: PUSH
45087: EMPTY
45088: LIST
45089: LIST
45090: PUSH
45091: LD_INT 4
45093: NEG
45094: PUSH
45095: LD_INT 3
45097: NEG
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: LIST
45107: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
45108: LD_ADDR_VAR 0 29
45112: PUSH
45113: LD_INT 1
45115: NEG
45116: PUSH
45117: LD_INT 3
45119: NEG
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: PUSH
45125: LD_INT 0
45127: PUSH
45128: LD_INT 3
45130: NEG
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: PUSH
45136: LD_INT 1
45138: PUSH
45139: LD_INT 2
45141: NEG
45142: PUSH
45143: EMPTY
45144: LIST
45145: LIST
45146: PUSH
45147: LD_INT 1
45149: NEG
45150: PUSH
45151: LD_INT 4
45153: NEG
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: PUSH
45159: LD_INT 0
45161: PUSH
45162: LD_INT 4
45164: NEG
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: PUSH
45170: LD_INT 1
45172: PUSH
45173: LD_INT 3
45175: NEG
45176: PUSH
45177: EMPTY
45178: LIST
45179: LIST
45180: PUSH
45181: LD_INT 1
45183: NEG
45184: PUSH
45185: LD_INT 5
45187: NEG
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: PUSH
45193: LD_INT 0
45195: PUSH
45196: LD_INT 5
45198: NEG
45199: PUSH
45200: EMPTY
45201: LIST
45202: LIST
45203: PUSH
45204: LD_INT 1
45206: PUSH
45207: LD_INT 4
45209: NEG
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: PUSH
45215: LD_INT 1
45217: NEG
45218: PUSH
45219: LD_INT 6
45221: NEG
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: PUSH
45227: LD_INT 0
45229: PUSH
45230: LD_INT 6
45232: NEG
45233: PUSH
45234: EMPTY
45235: LIST
45236: LIST
45237: PUSH
45238: LD_INT 1
45240: PUSH
45241: LD_INT 5
45243: NEG
45244: PUSH
45245: EMPTY
45246: LIST
45247: LIST
45248: PUSH
45249: EMPTY
45250: LIST
45251: LIST
45252: LIST
45253: LIST
45254: LIST
45255: LIST
45256: LIST
45257: LIST
45258: LIST
45259: LIST
45260: LIST
45261: LIST
45262: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
45263: LD_ADDR_VAR 0 30
45267: PUSH
45268: LD_INT 2
45270: PUSH
45271: LD_INT 1
45273: NEG
45274: PUSH
45275: EMPTY
45276: LIST
45277: LIST
45278: PUSH
45279: LD_INT 3
45281: PUSH
45282: LD_INT 0
45284: PUSH
45285: EMPTY
45286: LIST
45287: LIST
45288: PUSH
45289: LD_INT 3
45291: PUSH
45292: LD_INT 1
45294: PUSH
45295: EMPTY
45296: LIST
45297: LIST
45298: PUSH
45299: LD_INT 3
45301: PUSH
45302: LD_INT 1
45304: NEG
45305: PUSH
45306: EMPTY
45307: LIST
45308: LIST
45309: PUSH
45310: LD_INT 4
45312: PUSH
45313: LD_INT 0
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: PUSH
45320: LD_INT 4
45322: PUSH
45323: LD_INT 1
45325: PUSH
45326: EMPTY
45327: LIST
45328: LIST
45329: PUSH
45330: LD_INT 4
45332: PUSH
45333: LD_INT 1
45335: NEG
45336: PUSH
45337: EMPTY
45338: LIST
45339: LIST
45340: PUSH
45341: LD_INT 5
45343: PUSH
45344: LD_INT 0
45346: PUSH
45347: EMPTY
45348: LIST
45349: LIST
45350: PUSH
45351: LD_INT 5
45353: PUSH
45354: LD_INT 1
45356: PUSH
45357: EMPTY
45358: LIST
45359: LIST
45360: PUSH
45361: LD_INT 5
45363: PUSH
45364: LD_INT 1
45366: NEG
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: PUSH
45372: LD_INT 6
45374: PUSH
45375: LD_INT 0
45377: PUSH
45378: EMPTY
45379: LIST
45380: LIST
45381: PUSH
45382: LD_INT 6
45384: PUSH
45385: LD_INT 1
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: PUSH
45392: EMPTY
45393: LIST
45394: LIST
45395: LIST
45396: LIST
45397: LIST
45398: LIST
45399: LIST
45400: LIST
45401: LIST
45402: LIST
45403: LIST
45404: LIST
45405: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
45406: LD_ADDR_VAR 0 31
45410: PUSH
45411: LD_INT 3
45413: PUSH
45414: LD_INT 2
45416: PUSH
45417: EMPTY
45418: LIST
45419: LIST
45420: PUSH
45421: LD_INT 3
45423: PUSH
45424: LD_INT 3
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: PUSH
45431: LD_INT 2
45433: PUSH
45434: LD_INT 3
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: PUSH
45441: LD_INT 4
45443: PUSH
45444: LD_INT 3
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: LD_INT 4
45453: PUSH
45454: LD_INT 4
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: LD_INT 3
45463: PUSH
45464: LD_INT 4
45466: PUSH
45467: EMPTY
45468: LIST
45469: LIST
45470: PUSH
45471: LD_INT 5
45473: PUSH
45474: LD_INT 4
45476: PUSH
45477: EMPTY
45478: LIST
45479: LIST
45480: PUSH
45481: LD_INT 5
45483: PUSH
45484: LD_INT 5
45486: PUSH
45487: EMPTY
45488: LIST
45489: LIST
45490: PUSH
45491: LD_INT 4
45493: PUSH
45494: LD_INT 5
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: PUSH
45501: LD_INT 6
45503: PUSH
45504: LD_INT 5
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: PUSH
45511: LD_INT 6
45513: PUSH
45514: LD_INT 6
45516: PUSH
45517: EMPTY
45518: LIST
45519: LIST
45520: PUSH
45521: LD_INT 5
45523: PUSH
45524: LD_INT 6
45526: PUSH
45527: EMPTY
45528: LIST
45529: LIST
45530: PUSH
45531: EMPTY
45532: LIST
45533: LIST
45534: LIST
45535: LIST
45536: LIST
45537: LIST
45538: LIST
45539: LIST
45540: LIST
45541: LIST
45542: LIST
45543: LIST
45544: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
45545: LD_ADDR_VAR 0 32
45549: PUSH
45550: LD_INT 1
45552: PUSH
45553: LD_INT 3
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: PUSH
45560: LD_INT 0
45562: PUSH
45563: LD_INT 3
45565: PUSH
45566: EMPTY
45567: LIST
45568: LIST
45569: PUSH
45570: LD_INT 1
45572: NEG
45573: PUSH
45574: LD_INT 2
45576: PUSH
45577: EMPTY
45578: LIST
45579: LIST
45580: PUSH
45581: LD_INT 1
45583: PUSH
45584: LD_INT 4
45586: PUSH
45587: EMPTY
45588: LIST
45589: LIST
45590: PUSH
45591: LD_INT 0
45593: PUSH
45594: LD_INT 4
45596: PUSH
45597: EMPTY
45598: LIST
45599: LIST
45600: PUSH
45601: LD_INT 1
45603: NEG
45604: PUSH
45605: LD_INT 3
45607: PUSH
45608: EMPTY
45609: LIST
45610: LIST
45611: PUSH
45612: LD_INT 1
45614: PUSH
45615: LD_INT 5
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: PUSH
45622: LD_INT 0
45624: PUSH
45625: LD_INT 5
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: PUSH
45632: LD_INT 1
45634: NEG
45635: PUSH
45636: LD_INT 4
45638: PUSH
45639: EMPTY
45640: LIST
45641: LIST
45642: PUSH
45643: LD_INT 1
45645: PUSH
45646: LD_INT 6
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: PUSH
45653: LD_INT 0
45655: PUSH
45656: LD_INT 6
45658: PUSH
45659: EMPTY
45660: LIST
45661: LIST
45662: PUSH
45663: LD_INT 1
45665: NEG
45666: PUSH
45667: LD_INT 5
45669: PUSH
45670: EMPTY
45671: LIST
45672: LIST
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: LIST
45678: LIST
45679: LIST
45680: LIST
45681: LIST
45682: LIST
45683: LIST
45684: LIST
45685: LIST
45686: LIST
45687: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
45688: LD_ADDR_VAR 0 33
45692: PUSH
45693: LD_INT 2
45695: NEG
45696: PUSH
45697: LD_INT 1
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: PUSH
45704: LD_INT 3
45706: NEG
45707: PUSH
45708: LD_INT 0
45710: PUSH
45711: EMPTY
45712: LIST
45713: LIST
45714: PUSH
45715: LD_INT 3
45717: NEG
45718: PUSH
45719: LD_INT 1
45721: NEG
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: PUSH
45727: LD_INT 3
45729: NEG
45730: PUSH
45731: LD_INT 1
45733: PUSH
45734: EMPTY
45735: LIST
45736: LIST
45737: PUSH
45738: LD_INT 4
45740: NEG
45741: PUSH
45742: LD_INT 0
45744: PUSH
45745: EMPTY
45746: LIST
45747: LIST
45748: PUSH
45749: LD_INT 4
45751: NEG
45752: PUSH
45753: LD_INT 1
45755: NEG
45756: PUSH
45757: EMPTY
45758: LIST
45759: LIST
45760: PUSH
45761: LD_INT 4
45763: NEG
45764: PUSH
45765: LD_INT 1
45767: PUSH
45768: EMPTY
45769: LIST
45770: LIST
45771: PUSH
45772: LD_INT 5
45774: NEG
45775: PUSH
45776: LD_INT 0
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: PUSH
45783: LD_INT 5
45785: NEG
45786: PUSH
45787: LD_INT 1
45789: NEG
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: PUSH
45795: LD_INT 5
45797: NEG
45798: PUSH
45799: LD_INT 1
45801: PUSH
45802: EMPTY
45803: LIST
45804: LIST
45805: PUSH
45806: LD_INT 6
45808: NEG
45809: PUSH
45810: LD_INT 0
45812: PUSH
45813: EMPTY
45814: LIST
45815: LIST
45816: PUSH
45817: LD_INT 6
45819: NEG
45820: PUSH
45821: LD_INT 1
45823: NEG
45824: PUSH
45825: EMPTY
45826: LIST
45827: LIST
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: LIST
45833: LIST
45834: LIST
45835: LIST
45836: LIST
45837: LIST
45838: LIST
45839: LIST
45840: LIST
45841: LIST
45842: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
45843: LD_ADDR_VAR 0 34
45847: PUSH
45848: LD_INT 2
45850: NEG
45851: PUSH
45852: LD_INT 3
45854: NEG
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PUSH
45860: LD_INT 3
45862: NEG
45863: PUSH
45864: LD_INT 2
45866: NEG
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: PUSH
45872: LD_INT 3
45874: NEG
45875: PUSH
45876: LD_INT 3
45878: NEG
45879: PUSH
45880: EMPTY
45881: LIST
45882: LIST
45883: PUSH
45884: LD_INT 3
45886: NEG
45887: PUSH
45888: LD_INT 4
45890: NEG
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: PUSH
45896: LD_INT 4
45898: NEG
45899: PUSH
45900: LD_INT 3
45902: NEG
45903: PUSH
45904: EMPTY
45905: LIST
45906: LIST
45907: PUSH
45908: LD_INT 4
45910: NEG
45911: PUSH
45912: LD_INT 4
45914: NEG
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: PUSH
45920: LD_INT 4
45922: NEG
45923: PUSH
45924: LD_INT 5
45926: NEG
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: PUSH
45932: LD_INT 5
45934: NEG
45935: PUSH
45936: LD_INT 4
45938: NEG
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: PUSH
45944: LD_INT 5
45946: NEG
45947: PUSH
45948: LD_INT 5
45950: NEG
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: PUSH
45956: LD_INT 5
45958: NEG
45959: PUSH
45960: LD_INT 6
45962: NEG
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PUSH
45968: LD_INT 6
45970: NEG
45971: PUSH
45972: LD_INT 5
45974: NEG
45975: PUSH
45976: EMPTY
45977: LIST
45978: LIST
45979: PUSH
45980: LD_INT 6
45982: NEG
45983: PUSH
45984: LD_INT 6
45986: NEG
45987: PUSH
45988: EMPTY
45989: LIST
45990: LIST
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: LIST
45996: LIST
45997: LIST
45998: LIST
45999: LIST
46000: LIST
46001: LIST
46002: LIST
46003: LIST
46004: LIST
46005: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
46006: LD_ADDR_VAR 0 41
46010: PUSH
46011: LD_INT 0
46013: PUSH
46014: LD_INT 2
46016: NEG
46017: PUSH
46018: EMPTY
46019: LIST
46020: LIST
46021: PUSH
46022: LD_INT 1
46024: NEG
46025: PUSH
46026: LD_INT 3
46028: NEG
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: LD_INT 1
46036: PUSH
46037: LD_INT 2
46039: NEG
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: PUSH
46045: EMPTY
46046: LIST
46047: LIST
46048: LIST
46049: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
46050: LD_ADDR_VAR 0 42
46054: PUSH
46055: LD_INT 2
46057: PUSH
46058: LD_INT 0
46060: PUSH
46061: EMPTY
46062: LIST
46063: LIST
46064: PUSH
46065: LD_INT 2
46067: PUSH
46068: LD_INT 1
46070: NEG
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: PUSH
46076: LD_INT 3
46078: PUSH
46079: LD_INT 1
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: EMPTY
46087: LIST
46088: LIST
46089: LIST
46090: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
46091: LD_ADDR_VAR 0 43
46095: PUSH
46096: LD_INT 2
46098: PUSH
46099: LD_INT 2
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: PUSH
46106: LD_INT 3
46108: PUSH
46109: LD_INT 2
46111: PUSH
46112: EMPTY
46113: LIST
46114: LIST
46115: PUSH
46116: LD_INT 2
46118: PUSH
46119: LD_INT 3
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: LIST
46130: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
46131: LD_ADDR_VAR 0 44
46135: PUSH
46136: LD_INT 0
46138: PUSH
46139: LD_INT 2
46141: PUSH
46142: EMPTY
46143: LIST
46144: LIST
46145: PUSH
46146: LD_INT 1
46148: PUSH
46149: LD_INT 3
46151: PUSH
46152: EMPTY
46153: LIST
46154: LIST
46155: PUSH
46156: LD_INT 1
46158: NEG
46159: PUSH
46160: LD_INT 2
46162: PUSH
46163: EMPTY
46164: LIST
46165: LIST
46166: PUSH
46167: EMPTY
46168: LIST
46169: LIST
46170: LIST
46171: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46172: LD_ADDR_VAR 0 45
46176: PUSH
46177: LD_INT 2
46179: NEG
46180: PUSH
46181: LD_INT 0
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: PUSH
46188: LD_INT 2
46190: NEG
46191: PUSH
46192: LD_INT 1
46194: PUSH
46195: EMPTY
46196: LIST
46197: LIST
46198: PUSH
46199: LD_INT 3
46201: NEG
46202: PUSH
46203: LD_INT 1
46205: NEG
46206: PUSH
46207: EMPTY
46208: LIST
46209: LIST
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: LIST
46215: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
46216: LD_ADDR_VAR 0 46
46220: PUSH
46221: LD_INT 2
46223: NEG
46224: PUSH
46225: LD_INT 2
46227: NEG
46228: PUSH
46229: EMPTY
46230: LIST
46231: LIST
46232: PUSH
46233: LD_INT 2
46235: NEG
46236: PUSH
46237: LD_INT 3
46239: NEG
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: PUSH
46245: LD_INT 3
46247: NEG
46248: PUSH
46249: LD_INT 2
46251: NEG
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: LIST
46261: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
46262: LD_ADDR_VAR 0 47
46266: PUSH
46267: LD_INT 2
46269: NEG
46270: PUSH
46271: LD_INT 3
46273: NEG
46274: PUSH
46275: EMPTY
46276: LIST
46277: LIST
46278: PUSH
46279: LD_INT 1
46281: NEG
46282: PUSH
46283: LD_INT 3
46285: NEG
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46295: LD_ADDR_VAR 0 48
46299: PUSH
46300: LD_INT 1
46302: PUSH
46303: LD_INT 2
46305: NEG
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: PUSH
46311: LD_INT 2
46313: PUSH
46314: LD_INT 1
46316: NEG
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
46326: LD_ADDR_VAR 0 49
46330: PUSH
46331: LD_INT 3
46333: PUSH
46334: LD_INT 1
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: PUSH
46341: LD_INT 3
46343: PUSH
46344: LD_INT 2
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
46355: LD_ADDR_VAR 0 50
46359: PUSH
46360: LD_INT 2
46362: PUSH
46363: LD_INT 3
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: PUSH
46370: LD_INT 1
46372: PUSH
46373: LD_INT 3
46375: PUSH
46376: EMPTY
46377: LIST
46378: LIST
46379: PUSH
46380: EMPTY
46381: LIST
46382: LIST
46383: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
46384: LD_ADDR_VAR 0 51
46388: PUSH
46389: LD_INT 1
46391: NEG
46392: PUSH
46393: LD_INT 2
46395: PUSH
46396: EMPTY
46397: LIST
46398: LIST
46399: PUSH
46400: LD_INT 2
46402: NEG
46403: PUSH
46404: LD_INT 1
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: PUSH
46411: EMPTY
46412: LIST
46413: LIST
46414: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46415: LD_ADDR_VAR 0 52
46419: PUSH
46420: LD_INT 3
46422: NEG
46423: PUSH
46424: LD_INT 1
46426: NEG
46427: PUSH
46428: EMPTY
46429: LIST
46430: LIST
46431: PUSH
46432: LD_INT 3
46434: NEG
46435: PUSH
46436: LD_INT 2
46438: NEG
46439: PUSH
46440: EMPTY
46441: LIST
46442: LIST
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46448: LD_ADDR_VAR 0 53
46452: PUSH
46453: LD_INT 1
46455: NEG
46456: PUSH
46457: LD_INT 3
46459: NEG
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: PUSH
46465: LD_INT 0
46467: PUSH
46468: LD_INT 3
46470: NEG
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: PUSH
46476: LD_INT 1
46478: PUSH
46479: LD_INT 2
46481: NEG
46482: PUSH
46483: EMPTY
46484: LIST
46485: LIST
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: LIST
46491: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46492: LD_ADDR_VAR 0 54
46496: PUSH
46497: LD_INT 2
46499: PUSH
46500: LD_INT 1
46502: NEG
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: PUSH
46508: LD_INT 3
46510: PUSH
46511: LD_INT 0
46513: PUSH
46514: EMPTY
46515: LIST
46516: LIST
46517: PUSH
46518: LD_INT 3
46520: PUSH
46521: LD_INT 1
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: LIST
46532: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46533: LD_ADDR_VAR 0 55
46537: PUSH
46538: LD_INT 3
46540: PUSH
46541: LD_INT 2
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: PUSH
46548: LD_INT 3
46550: PUSH
46551: LD_INT 3
46553: PUSH
46554: EMPTY
46555: LIST
46556: LIST
46557: PUSH
46558: LD_INT 2
46560: PUSH
46561: LD_INT 3
46563: PUSH
46564: EMPTY
46565: LIST
46566: LIST
46567: PUSH
46568: EMPTY
46569: LIST
46570: LIST
46571: LIST
46572: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46573: LD_ADDR_VAR 0 56
46577: PUSH
46578: LD_INT 1
46580: PUSH
46581: LD_INT 3
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: PUSH
46588: LD_INT 0
46590: PUSH
46591: LD_INT 3
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: PUSH
46598: LD_INT 1
46600: NEG
46601: PUSH
46602: LD_INT 2
46604: PUSH
46605: EMPTY
46606: LIST
46607: LIST
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: LIST
46613: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46614: LD_ADDR_VAR 0 57
46618: PUSH
46619: LD_INT 2
46621: NEG
46622: PUSH
46623: LD_INT 1
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: PUSH
46630: LD_INT 3
46632: NEG
46633: PUSH
46634: LD_INT 0
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: PUSH
46641: LD_INT 3
46643: NEG
46644: PUSH
46645: LD_INT 1
46647: NEG
46648: PUSH
46649: EMPTY
46650: LIST
46651: LIST
46652: PUSH
46653: EMPTY
46654: LIST
46655: LIST
46656: LIST
46657: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46658: LD_ADDR_VAR 0 58
46662: PUSH
46663: LD_INT 2
46665: NEG
46666: PUSH
46667: LD_INT 3
46669: NEG
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: PUSH
46675: LD_INT 3
46677: NEG
46678: PUSH
46679: LD_INT 2
46681: NEG
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PUSH
46687: LD_INT 3
46689: NEG
46690: PUSH
46691: LD_INT 3
46693: NEG
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: LIST
46703: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
46704: LD_ADDR_VAR 0 59
46708: PUSH
46709: LD_INT 1
46711: NEG
46712: PUSH
46713: LD_INT 2
46715: NEG
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: PUSH
46721: LD_INT 0
46723: PUSH
46724: LD_INT 2
46726: NEG
46727: PUSH
46728: EMPTY
46729: LIST
46730: LIST
46731: PUSH
46732: LD_INT 1
46734: PUSH
46735: LD_INT 1
46737: NEG
46738: PUSH
46739: EMPTY
46740: LIST
46741: LIST
46742: PUSH
46743: EMPTY
46744: LIST
46745: LIST
46746: LIST
46747: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
46748: LD_ADDR_VAR 0 60
46752: PUSH
46753: LD_INT 1
46755: PUSH
46756: LD_INT 1
46758: NEG
46759: PUSH
46760: EMPTY
46761: LIST
46762: LIST
46763: PUSH
46764: LD_INT 2
46766: PUSH
46767: LD_INT 0
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: PUSH
46774: LD_INT 2
46776: PUSH
46777: LD_INT 1
46779: PUSH
46780: EMPTY
46781: LIST
46782: LIST
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: LIST
46788: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
46789: LD_ADDR_VAR 0 61
46793: PUSH
46794: LD_INT 2
46796: PUSH
46797: LD_INT 1
46799: PUSH
46800: EMPTY
46801: LIST
46802: LIST
46803: PUSH
46804: LD_INT 2
46806: PUSH
46807: LD_INT 2
46809: PUSH
46810: EMPTY
46811: LIST
46812: LIST
46813: PUSH
46814: LD_INT 1
46816: PUSH
46817: LD_INT 2
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: PUSH
46824: EMPTY
46825: LIST
46826: LIST
46827: LIST
46828: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
46829: LD_ADDR_VAR 0 62
46833: PUSH
46834: LD_INT 1
46836: PUSH
46837: LD_INT 2
46839: PUSH
46840: EMPTY
46841: LIST
46842: LIST
46843: PUSH
46844: LD_INT 0
46846: PUSH
46847: LD_INT 2
46849: PUSH
46850: EMPTY
46851: LIST
46852: LIST
46853: PUSH
46854: LD_INT 1
46856: NEG
46857: PUSH
46858: LD_INT 1
46860: PUSH
46861: EMPTY
46862: LIST
46863: LIST
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: LIST
46869: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
46870: LD_ADDR_VAR 0 63
46874: PUSH
46875: LD_INT 1
46877: NEG
46878: PUSH
46879: LD_INT 1
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: PUSH
46886: LD_INT 2
46888: NEG
46889: PUSH
46890: LD_INT 0
46892: PUSH
46893: EMPTY
46894: LIST
46895: LIST
46896: PUSH
46897: LD_INT 2
46899: NEG
46900: PUSH
46901: LD_INT 1
46903: NEG
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: PUSH
46909: EMPTY
46910: LIST
46911: LIST
46912: LIST
46913: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46914: LD_ADDR_VAR 0 64
46918: PUSH
46919: LD_INT 1
46921: NEG
46922: PUSH
46923: LD_INT 2
46925: NEG
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: LD_INT 2
46933: NEG
46934: PUSH
46935: LD_INT 1
46937: NEG
46938: PUSH
46939: EMPTY
46940: LIST
46941: LIST
46942: PUSH
46943: LD_INT 2
46945: NEG
46946: PUSH
46947: LD_INT 2
46949: NEG
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: LIST
46959: ST_TO_ADDR
// end ; 2 :
46960: GO 50226
46962: LD_INT 2
46964: DOUBLE
46965: EQUAL
46966: IFTRUE 46970
46968: GO 50225
46970: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
46971: LD_ADDR_VAR 0 29
46975: PUSH
46976: LD_INT 4
46978: PUSH
46979: LD_INT 0
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: PUSH
46986: LD_INT 4
46988: PUSH
46989: LD_INT 1
46991: NEG
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: PUSH
46997: LD_INT 5
46999: PUSH
47000: LD_INT 0
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: PUSH
47007: LD_INT 5
47009: PUSH
47010: LD_INT 1
47012: PUSH
47013: EMPTY
47014: LIST
47015: LIST
47016: PUSH
47017: LD_INT 4
47019: PUSH
47020: LD_INT 1
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: PUSH
47027: LD_INT 3
47029: PUSH
47030: LD_INT 0
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: PUSH
47037: LD_INT 3
47039: PUSH
47040: LD_INT 1
47042: NEG
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: PUSH
47048: LD_INT 3
47050: PUSH
47051: LD_INT 2
47053: NEG
47054: PUSH
47055: EMPTY
47056: LIST
47057: LIST
47058: PUSH
47059: LD_INT 5
47061: PUSH
47062: LD_INT 2
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: PUSH
47069: LD_INT 3
47071: PUSH
47072: LD_INT 3
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: PUSH
47079: LD_INT 3
47081: PUSH
47082: LD_INT 2
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: PUSH
47089: LD_INT 4
47091: PUSH
47092: LD_INT 3
47094: PUSH
47095: EMPTY
47096: LIST
47097: LIST
47098: PUSH
47099: LD_INT 4
47101: PUSH
47102: LD_INT 4
47104: PUSH
47105: EMPTY
47106: LIST
47107: LIST
47108: PUSH
47109: LD_INT 3
47111: PUSH
47112: LD_INT 4
47114: PUSH
47115: EMPTY
47116: LIST
47117: LIST
47118: PUSH
47119: LD_INT 2
47121: PUSH
47122: LD_INT 3
47124: PUSH
47125: EMPTY
47126: LIST
47127: LIST
47128: PUSH
47129: LD_INT 2
47131: PUSH
47132: LD_INT 2
47134: PUSH
47135: EMPTY
47136: LIST
47137: LIST
47138: PUSH
47139: LD_INT 4
47141: PUSH
47142: LD_INT 2
47144: PUSH
47145: EMPTY
47146: LIST
47147: LIST
47148: PUSH
47149: LD_INT 2
47151: PUSH
47152: LD_INT 4
47154: PUSH
47155: EMPTY
47156: LIST
47157: LIST
47158: PUSH
47159: LD_INT 0
47161: PUSH
47162: LD_INT 4
47164: PUSH
47165: EMPTY
47166: LIST
47167: LIST
47168: PUSH
47169: LD_INT 0
47171: PUSH
47172: LD_INT 3
47174: PUSH
47175: EMPTY
47176: LIST
47177: LIST
47178: PUSH
47179: LD_INT 1
47181: PUSH
47182: LD_INT 4
47184: PUSH
47185: EMPTY
47186: LIST
47187: LIST
47188: PUSH
47189: LD_INT 1
47191: PUSH
47192: LD_INT 5
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: PUSH
47199: LD_INT 0
47201: PUSH
47202: LD_INT 5
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: LD_INT 1
47211: NEG
47212: PUSH
47213: LD_INT 4
47215: PUSH
47216: EMPTY
47217: LIST
47218: LIST
47219: PUSH
47220: LD_INT 1
47222: NEG
47223: PUSH
47224: LD_INT 3
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: PUSH
47231: LD_INT 2
47233: PUSH
47234: LD_INT 5
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: PUSH
47241: LD_INT 2
47243: NEG
47244: PUSH
47245: LD_INT 3
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: PUSH
47252: LD_INT 3
47254: NEG
47255: PUSH
47256: LD_INT 0
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: PUSH
47263: LD_INT 3
47265: NEG
47266: PUSH
47267: LD_INT 1
47269: NEG
47270: PUSH
47271: EMPTY
47272: LIST
47273: LIST
47274: PUSH
47275: LD_INT 2
47277: NEG
47278: PUSH
47279: LD_INT 0
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: PUSH
47286: LD_INT 2
47288: NEG
47289: PUSH
47290: LD_INT 1
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: LD_INT 3
47299: NEG
47300: PUSH
47301: LD_INT 1
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: PUSH
47308: LD_INT 4
47310: NEG
47311: PUSH
47312: LD_INT 0
47314: PUSH
47315: EMPTY
47316: LIST
47317: LIST
47318: PUSH
47319: LD_INT 4
47321: NEG
47322: PUSH
47323: LD_INT 1
47325: NEG
47326: PUSH
47327: EMPTY
47328: LIST
47329: LIST
47330: PUSH
47331: LD_INT 4
47333: NEG
47334: PUSH
47335: LD_INT 2
47337: NEG
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 2
47345: NEG
47346: PUSH
47347: LD_INT 2
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: LD_INT 4
47356: NEG
47357: PUSH
47358: LD_INT 4
47360: NEG
47361: PUSH
47362: EMPTY
47363: LIST
47364: LIST
47365: PUSH
47366: LD_INT 4
47368: NEG
47369: PUSH
47370: LD_INT 5
47372: NEG
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: PUSH
47378: LD_INT 3
47380: NEG
47381: PUSH
47382: LD_INT 4
47384: NEG
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: PUSH
47390: LD_INT 3
47392: NEG
47393: PUSH
47394: LD_INT 3
47396: NEG
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: LD_INT 4
47404: NEG
47405: PUSH
47406: LD_INT 3
47408: NEG
47409: PUSH
47410: EMPTY
47411: LIST
47412: LIST
47413: PUSH
47414: LD_INT 5
47416: NEG
47417: PUSH
47418: LD_INT 4
47420: NEG
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: PUSH
47426: LD_INT 5
47428: NEG
47429: PUSH
47430: LD_INT 5
47432: NEG
47433: PUSH
47434: EMPTY
47435: LIST
47436: LIST
47437: PUSH
47438: LD_INT 3
47440: NEG
47441: PUSH
47442: LD_INT 5
47444: NEG
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: PUSH
47450: LD_INT 5
47452: NEG
47453: PUSH
47454: LD_INT 3
47456: NEG
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: PUSH
47462: EMPTY
47463: LIST
47464: LIST
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: LIST
47475: LIST
47476: LIST
47477: LIST
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: LIST
47483: LIST
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: LIST
47489: LIST
47490: LIST
47491: LIST
47492: LIST
47493: LIST
47494: LIST
47495: LIST
47496: LIST
47497: LIST
47498: LIST
47499: LIST
47500: LIST
47501: LIST
47502: LIST
47503: LIST
47504: LIST
47505: LIST
47506: LIST
47507: LIST
47508: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
47509: LD_ADDR_VAR 0 30
47513: PUSH
47514: LD_INT 4
47516: PUSH
47517: LD_INT 4
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: PUSH
47524: LD_INT 4
47526: PUSH
47527: LD_INT 3
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: PUSH
47534: LD_INT 5
47536: PUSH
47537: LD_INT 4
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: PUSH
47544: LD_INT 5
47546: PUSH
47547: LD_INT 5
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: PUSH
47554: LD_INT 4
47556: PUSH
47557: LD_INT 5
47559: PUSH
47560: EMPTY
47561: LIST
47562: LIST
47563: PUSH
47564: LD_INT 3
47566: PUSH
47567: LD_INT 4
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: PUSH
47574: LD_INT 3
47576: PUSH
47577: LD_INT 3
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: PUSH
47584: LD_INT 5
47586: PUSH
47587: LD_INT 3
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: PUSH
47594: LD_INT 3
47596: PUSH
47597: LD_INT 5
47599: PUSH
47600: EMPTY
47601: LIST
47602: LIST
47603: PUSH
47604: LD_INT 0
47606: PUSH
47607: LD_INT 3
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: PUSH
47614: LD_INT 0
47616: PUSH
47617: LD_INT 2
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: PUSH
47624: LD_INT 1
47626: PUSH
47627: LD_INT 3
47629: PUSH
47630: EMPTY
47631: LIST
47632: LIST
47633: PUSH
47634: LD_INT 1
47636: PUSH
47637: LD_INT 4
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: PUSH
47644: LD_INT 0
47646: PUSH
47647: LD_INT 4
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: PUSH
47654: LD_INT 1
47656: NEG
47657: PUSH
47658: LD_INT 3
47660: PUSH
47661: EMPTY
47662: LIST
47663: LIST
47664: PUSH
47665: LD_INT 1
47667: NEG
47668: PUSH
47669: LD_INT 2
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: PUSH
47676: LD_INT 2
47678: PUSH
47679: LD_INT 4
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: LD_INT 2
47688: NEG
47689: PUSH
47690: LD_INT 2
47692: PUSH
47693: EMPTY
47694: LIST
47695: LIST
47696: PUSH
47697: LD_INT 4
47699: NEG
47700: PUSH
47701: LD_INT 0
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: PUSH
47708: LD_INT 4
47710: NEG
47711: PUSH
47712: LD_INT 1
47714: NEG
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: PUSH
47720: LD_INT 3
47722: NEG
47723: PUSH
47724: LD_INT 0
47726: PUSH
47727: EMPTY
47728: LIST
47729: LIST
47730: PUSH
47731: LD_INT 3
47733: NEG
47734: PUSH
47735: LD_INT 1
47737: PUSH
47738: EMPTY
47739: LIST
47740: LIST
47741: PUSH
47742: LD_INT 4
47744: NEG
47745: PUSH
47746: LD_INT 1
47748: PUSH
47749: EMPTY
47750: LIST
47751: LIST
47752: PUSH
47753: LD_INT 5
47755: NEG
47756: PUSH
47757: LD_INT 0
47759: PUSH
47760: EMPTY
47761: LIST
47762: LIST
47763: PUSH
47764: LD_INT 5
47766: NEG
47767: PUSH
47768: LD_INT 1
47770: NEG
47771: PUSH
47772: EMPTY
47773: LIST
47774: LIST
47775: PUSH
47776: LD_INT 5
47778: NEG
47779: PUSH
47780: LD_INT 2
47782: NEG
47783: PUSH
47784: EMPTY
47785: LIST
47786: LIST
47787: PUSH
47788: LD_INT 3
47790: NEG
47791: PUSH
47792: LD_INT 2
47794: PUSH
47795: EMPTY
47796: LIST
47797: LIST
47798: PUSH
47799: LD_INT 3
47801: NEG
47802: PUSH
47803: LD_INT 3
47805: NEG
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: PUSH
47811: LD_INT 3
47813: NEG
47814: PUSH
47815: LD_INT 4
47817: NEG
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: PUSH
47823: LD_INT 2
47825: NEG
47826: PUSH
47827: LD_INT 3
47829: NEG
47830: PUSH
47831: EMPTY
47832: LIST
47833: LIST
47834: PUSH
47835: LD_INT 2
47837: NEG
47838: PUSH
47839: LD_INT 2
47841: NEG
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: PUSH
47847: LD_INT 3
47849: NEG
47850: PUSH
47851: LD_INT 2
47853: NEG
47854: PUSH
47855: EMPTY
47856: LIST
47857: LIST
47858: PUSH
47859: LD_INT 4
47861: NEG
47862: PUSH
47863: LD_INT 3
47865: NEG
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: PUSH
47871: LD_INT 4
47873: NEG
47874: PUSH
47875: LD_INT 4
47877: NEG
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: LD_INT 2
47885: NEG
47886: PUSH
47887: LD_INT 4
47889: NEG
47890: PUSH
47891: EMPTY
47892: LIST
47893: LIST
47894: PUSH
47895: LD_INT 4
47897: NEG
47898: PUSH
47899: LD_INT 2
47901: NEG
47902: PUSH
47903: EMPTY
47904: LIST
47905: LIST
47906: PUSH
47907: LD_INT 0
47909: PUSH
47910: LD_INT 4
47912: NEG
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: PUSH
47918: LD_INT 0
47920: PUSH
47921: LD_INT 5
47923: NEG
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PUSH
47929: LD_INT 1
47931: PUSH
47932: LD_INT 4
47934: NEG
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: PUSH
47940: LD_INT 1
47942: PUSH
47943: LD_INT 3
47945: NEG
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: PUSH
47951: LD_INT 0
47953: PUSH
47954: LD_INT 3
47956: NEG
47957: PUSH
47958: EMPTY
47959: LIST
47960: LIST
47961: PUSH
47962: LD_INT 1
47964: NEG
47965: PUSH
47966: LD_INT 4
47968: NEG
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: LD_INT 1
47976: NEG
47977: PUSH
47978: LD_INT 5
47980: NEG
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: PUSH
47986: LD_INT 2
47988: PUSH
47989: LD_INT 3
47991: NEG
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: PUSH
47997: LD_INT 2
47999: NEG
48000: PUSH
48001: LD_INT 5
48003: NEG
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: LIST
48013: LIST
48014: LIST
48015: LIST
48016: LIST
48017: LIST
48018: LIST
48019: LIST
48020: LIST
48021: LIST
48022: LIST
48023: LIST
48024: LIST
48025: LIST
48026: LIST
48027: LIST
48028: LIST
48029: LIST
48030: LIST
48031: LIST
48032: LIST
48033: LIST
48034: LIST
48035: LIST
48036: LIST
48037: LIST
48038: LIST
48039: LIST
48040: LIST
48041: LIST
48042: LIST
48043: LIST
48044: LIST
48045: LIST
48046: LIST
48047: LIST
48048: LIST
48049: LIST
48050: LIST
48051: LIST
48052: LIST
48053: LIST
48054: LIST
48055: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
48056: LD_ADDR_VAR 0 31
48060: PUSH
48061: LD_INT 0
48063: PUSH
48064: LD_INT 4
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: PUSH
48071: LD_INT 0
48073: PUSH
48074: LD_INT 3
48076: PUSH
48077: EMPTY
48078: LIST
48079: LIST
48080: PUSH
48081: LD_INT 1
48083: PUSH
48084: LD_INT 4
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: PUSH
48091: LD_INT 1
48093: PUSH
48094: LD_INT 5
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: PUSH
48101: LD_INT 0
48103: PUSH
48104: LD_INT 5
48106: PUSH
48107: EMPTY
48108: LIST
48109: LIST
48110: PUSH
48111: LD_INT 1
48113: NEG
48114: PUSH
48115: LD_INT 4
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: LD_INT 1
48124: NEG
48125: PUSH
48126: LD_INT 3
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 2
48135: PUSH
48136: LD_INT 5
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: PUSH
48143: LD_INT 2
48145: NEG
48146: PUSH
48147: LD_INT 3
48149: PUSH
48150: EMPTY
48151: LIST
48152: LIST
48153: PUSH
48154: LD_INT 3
48156: NEG
48157: PUSH
48158: LD_INT 0
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: PUSH
48165: LD_INT 3
48167: NEG
48168: PUSH
48169: LD_INT 1
48171: NEG
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: PUSH
48177: LD_INT 2
48179: NEG
48180: PUSH
48181: LD_INT 0
48183: PUSH
48184: EMPTY
48185: LIST
48186: LIST
48187: PUSH
48188: LD_INT 2
48190: NEG
48191: PUSH
48192: LD_INT 1
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: PUSH
48199: LD_INT 3
48201: NEG
48202: PUSH
48203: LD_INT 1
48205: PUSH
48206: EMPTY
48207: LIST
48208: LIST
48209: PUSH
48210: LD_INT 4
48212: NEG
48213: PUSH
48214: LD_INT 0
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: PUSH
48221: LD_INT 4
48223: NEG
48224: PUSH
48225: LD_INT 1
48227: NEG
48228: PUSH
48229: EMPTY
48230: LIST
48231: LIST
48232: PUSH
48233: LD_INT 4
48235: NEG
48236: PUSH
48237: LD_INT 2
48239: NEG
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: PUSH
48245: LD_INT 2
48247: NEG
48248: PUSH
48249: LD_INT 2
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: PUSH
48256: LD_INT 4
48258: NEG
48259: PUSH
48260: LD_INT 4
48262: NEG
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: PUSH
48268: LD_INT 4
48270: NEG
48271: PUSH
48272: LD_INT 5
48274: NEG
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: PUSH
48280: LD_INT 3
48282: NEG
48283: PUSH
48284: LD_INT 4
48286: NEG
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: PUSH
48292: LD_INT 3
48294: NEG
48295: PUSH
48296: LD_INT 3
48298: NEG
48299: PUSH
48300: EMPTY
48301: LIST
48302: LIST
48303: PUSH
48304: LD_INT 4
48306: NEG
48307: PUSH
48308: LD_INT 3
48310: NEG
48311: PUSH
48312: EMPTY
48313: LIST
48314: LIST
48315: PUSH
48316: LD_INT 5
48318: NEG
48319: PUSH
48320: LD_INT 4
48322: NEG
48323: PUSH
48324: EMPTY
48325: LIST
48326: LIST
48327: PUSH
48328: LD_INT 5
48330: NEG
48331: PUSH
48332: LD_INT 5
48334: NEG
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: PUSH
48340: LD_INT 3
48342: NEG
48343: PUSH
48344: LD_INT 5
48346: NEG
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: PUSH
48352: LD_INT 5
48354: NEG
48355: PUSH
48356: LD_INT 3
48358: NEG
48359: PUSH
48360: EMPTY
48361: LIST
48362: LIST
48363: PUSH
48364: LD_INT 0
48366: PUSH
48367: LD_INT 3
48369: NEG
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: PUSH
48375: LD_INT 0
48377: PUSH
48378: LD_INT 4
48380: NEG
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: PUSH
48386: LD_INT 1
48388: PUSH
48389: LD_INT 3
48391: NEG
48392: PUSH
48393: EMPTY
48394: LIST
48395: LIST
48396: PUSH
48397: LD_INT 1
48399: PUSH
48400: LD_INT 2
48402: NEG
48403: PUSH
48404: EMPTY
48405: LIST
48406: LIST
48407: PUSH
48408: LD_INT 0
48410: PUSH
48411: LD_INT 2
48413: NEG
48414: PUSH
48415: EMPTY
48416: LIST
48417: LIST
48418: PUSH
48419: LD_INT 1
48421: NEG
48422: PUSH
48423: LD_INT 3
48425: NEG
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: PUSH
48431: LD_INT 1
48433: NEG
48434: PUSH
48435: LD_INT 4
48437: NEG
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: PUSH
48443: LD_INT 2
48445: PUSH
48446: LD_INT 2
48448: NEG
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: PUSH
48454: LD_INT 2
48456: NEG
48457: PUSH
48458: LD_INT 4
48460: NEG
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: LD_INT 4
48468: PUSH
48469: LD_INT 0
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: LD_INT 4
48478: PUSH
48479: LD_INT 1
48481: NEG
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: PUSH
48487: LD_INT 5
48489: PUSH
48490: LD_INT 0
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 5
48499: PUSH
48500: LD_INT 1
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 4
48509: PUSH
48510: LD_INT 1
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: LD_INT 3
48519: PUSH
48520: LD_INT 0
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: PUSH
48527: LD_INT 3
48529: PUSH
48530: LD_INT 1
48532: NEG
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: PUSH
48538: LD_INT 3
48540: PUSH
48541: LD_INT 2
48543: NEG
48544: PUSH
48545: EMPTY
48546: LIST
48547: LIST
48548: PUSH
48549: LD_INT 5
48551: PUSH
48552: LD_INT 2
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: LIST
48563: LIST
48564: LIST
48565: LIST
48566: LIST
48567: LIST
48568: LIST
48569: LIST
48570: LIST
48571: LIST
48572: LIST
48573: LIST
48574: LIST
48575: LIST
48576: LIST
48577: LIST
48578: LIST
48579: LIST
48580: LIST
48581: LIST
48582: LIST
48583: LIST
48584: LIST
48585: LIST
48586: LIST
48587: LIST
48588: LIST
48589: LIST
48590: LIST
48591: LIST
48592: LIST
48593: LIST
48594: LIST
48595: LIST
48596: LIST
48597: LIST
48598: LIST
48599: LIST
48600: LIST
48601: LIST
48602: LIST
48603: LIST
48604: LIST
48605: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
48606: LD_ADDR_VAR 0 32
48610: PUSH
48611: LD_INT 4
48613: NEG
48614: PUSH
48615: LD_INT 0
48617: PUSH
48618: EMPTY
48619: LIST
48620: LIST
48621: PUSH
48622: LD_INT 4
48624: NEG
48625: PUSH
48626: LD_INT 1
48628: NEG
48629: PUSH
48630: EMPTY
48631: LIST
48632: LIST
48633: PUSH
48634: LD_INT 3
48636: NEG
48637: PUSH
48638: LD_INT 0
48640: PUSH
48641: EMPTY
48642: LIST
48643: LIST
48644: PUSH
48645: LD_INT 3
48647: NEG
48648: PUSH
48649: LD_INT 1
48651: PUSH
48652: EMPTY
48653: LIST
48654: LIST
48655: PUSH
48656: LD_INT 4
48658: NEG
48659: PUSH
48660: LD_INT 1
48662: PUSH
48663: EMPTY
48664: LIST
48665: LIST
48666: PUSH
48667: LD_INT 5
48669: NEG
48670: PUSH
48671: LD_INT 0
48673: PUSH
48674: EMPTY
48675: LIST
48676: LIST
48677: PUSH
48678: LD_INT 5
48680: NEG
48681: PUSH
48682: LD_INT 1
48684: NEG
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: PUSH
48690: LD_INT 5
48692: NEG
48693: PUSH
48694: LD_INT 2
48696: NEG
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: PUSH
48702: LD_INT 3
48704: NEG
48705: PUSH
48706: LD_INT 2
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: PUSH
48713: LD_INT 3
48715: NEG
48716: PUSH
48717: LD_INT 3
48719: NEG
48720: PUSH
48721: EMPTY
48722: LIST
48723: LIST
48724: PUSH
48725: LD_INT 3
48727: NEG
48728: PUSH
48729: LD_INT 4
48731: NEG
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: PUSH
48737: LD_INT 2
48739: NEG
48740: PUSH
48741: LD_INT 3
48743: NEG
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PUSH
48749: LD_INT 2
48751: NEG
48752: PUSH
48753: LD_INT 2
48755: NEG
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: PUSH
48761: LD_INT 3
48763: NEG
48764: PUSH
48765: LD_INT 2
48767: NEG
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: PUSH
48773: LD_INT 4
48775: NEG
48776: PUSH
48777: LD_INT 3
48779: NEG
48780: PUSH
48781: EMPTY
48782: LIST
48783: LIST
48784: PUSH
48785: LD_INT 4
48787: NEG
48788: PUSH
48789: LD_INT 4
48791: NEG
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: PUSH
48797: LD_INT 2
48799: NEG
48800: PUSH
48801: LD_INT 4
48803: NEG
48804: PUSH
48805: EMPTY
48806: LIST
48807: LIST
48808: PUSH
48809: LD_INT 4
48811: NEG
48812: PUSH
48813: LD_INT 2
48815: NEG
48816: PUSH
48817: EMPTY
48818: LIST
48819: LIST
48820: PUSH
48821: LD_INT 0
48823: PUSH
48824: LD_INT 4
48826: NEG
48827: PUSH
48828: EMPTY
48829: LIST
48830: LIST
48831: PUSH
48832: LD_INT 0
48834: PUSH
48835: LD_INT 5
48837: NEG
48838: PUSH
48839: EMPTY
48840: LIST
48841: LIST
48842: PUSH
48843: LD_INT 1
48845: PUSH
48846: LD_INT 4
48848: NEG
48849: PUSH
48850: EMPTY
48851: LIST
48852: LIST
48853: PUSH
48854: LD_INT 1
48856: PUSH
48857: LD_INT 3
48859: NEG
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: PUSH
48865: LD_INT 0
48867: PUSH
48868: LD_INT 3
48870: NEG
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: LD_INT 1
48878: NEG
48879: PUSH
48880: LD_INT 4
48882: NEG
48883: PUSH
48884: EMPTY
48885: LIST
48886: LIST
48887: PUSH
48888: LD_INT 1
48890: NEG
48891: PUSH
48892: LD_INT 5
48894: NEG
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: PUSH
48900: LD_INT 2
48902: PUSH
48903: LD_INT 3
48905: NEG
48906: PUSH
48907: EMPTY
48908: LIST
48909: LIST
48910: PUSH
48911: LD_INT 2
48913: NEG
48914: PUSH
48915: LD_INT 5
48917: NEG
48918: PUSH
48919: EMPTY
48920: LIST
48921: LIST
48922: PUSH
48923: LD_INT 3
48925: PUSH
48926: LD_INT 0
48928: PUSH
48929: EMPTY
48930: LIST
48931: LIST
48932: PUSH
48933: LD_INT 3
48935: PUSH
48936: LD_INT 1
48938: NEG
48939: PUSH
48940: EMPTY
48941: LIST
48942: LIST
48943: PUSH
48944: LD_INT 4
48946: PUSH
48947: LD_INT 0
48949: PUSH
48950: EMPTY
48951: LIST
48952: LIST
48953: PUSH
48954: LD_INT 4
48956: PUSH
48957: LD_INT 1
48959: PUSH
48960: EMPTY
48961: LIST
48962: LIST
48963: PUSH
48964: LD_INT 3
48966: PUSH
48967: LD_INT 1
48969: PUSH
48970: EMPTY
48971: LIST
48972: LIST
48973: PUSH
48974: LD_INT 2
48976: PUSH
48977: LD_INT 0
48979: PUSH
48980: EMPTY
48981: LIST
48982: LIST
48983: PUSH
48984: LD_INT 2
48986: PUSH
48987: LD_INT 1
48989: NEG
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: PUSH
48995: LD_INT 2
48997: PUSH
48998: LD_INT 2
49000: NEG
49001: PUSH
49002: EMPTY
49003: LIST
49004: LIST
49005: PUSH
49006: LD_INT 4
49008: PUSH
49009: LD_INT 2
49011: PUSH
49012: EMPTY
49013: LIST
49014: LIST
49015: PUSH
49016: LD_INT 4
49018: PUSH
49019: LD_INT 4
49021: PUSH
49022: EMPTY
49023: LIST
49024: LIST
49025: PUSH
49026: LD_INT 4
49028: PUSH
49029: LD_INT 3
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: LD_INT 5
49038: PUSH
49039: LD_INT 4
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PUSH
49046: LD_INT 5
49048: PUSH
49049: LD_INT 5
49051: PUSH
49052: EMPTY
49053: LIST
49054: LIST
49055: PUSH
49056: LD_INT 4
49058: PUSH
49059: LD_INT 5
49061: PUSH
49062: EMPTY
49063: LIST
49064: LIST
49065: PUSH
49066: LD_INT 3
49068: PUSH
49069: LD_INT 4
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: LD_INT 3
49078: PUSH
49079: LD_INT 3
49081: PUSH
49082: EMPTY
49083: LIST
49084: LIST
49085: PUSH
49086: LD_INT 5
49088: PUSH
49089: LD_INT 3
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: PUSH
49096: LD_INT 3
49098: PUSH
49099: LD_INT 5
49101: PUSH
49102: EMPTY
49103: LIST
49104: LIST
49105: PUSH
49106: EMPTY
49107: LIST
49108: LIST
49109: LIST
49110: LIST
49111: LIST
49112: LIST
49113: LIST
49114: LIST
49115: LIST
49116: LIST
49117: LIST
49118: LIST
49119: LIST
49120: LIST
49121: LIST
49122: LIST
49123: LIST
49124: LIST
49125: LIST
49126: LIST
49127: LIST
49128: LIST
49129: LIST
49130: LIST
49131: LIST
49132: LIST
49133: LIST
49134: LIST
49135: LIST
49136: LIST
49137: LIST
49138: LIST
49139: LIST
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: LIST
49145: LIST
49146: LIST
49147: LIST
49148: LIST
49149: LIST
49150: LIST
49151: LIST
49152: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
49153: LD_ADDR_VAR 0 33
49157: PUSH
49158: LD_INT 4
49160: NEG
49161: PUSH
49162: LD_INT 4
49164: NEG
49165: PUSH
49166: EMPTY
49167: LIST
49168: LIST
49169: PUSH
49170: LD_INT 4
49172: NEG
49173: PUSH
49174: LD_INT 5
49176: NEG
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: PUSH
49182: LD_INT 3
49184: NEG
49185: PUSH
49186: LD_INT 4
49188: NEG
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: PUSH
49194: LD_INT 3
49196: NEG
49197: PUSH
49198: LD_INT 3
49200: NEG
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: PUSH
49206: LD_INT 4
49208: NEG
49209: PUSH
49210: LD_INT 3
49212: NEG
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PUSH
49218: LD_INT 5
49220: NEG
49221: PUSH
49222: LD_INT 4
49224: NEG
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: PUSH
49230: LD_INT 5
49232: NEG
49233: PUSH
49234: LD_INT 5
49236: NEG
49237: PUSH
49238: EMPTY
49239: LIST
49240: LIST
49241: PUSH
49242: LD_INT 3
49244: NEG
49245: PUSH
49246: LD_INT 5
49248: NEG
49249: PUSH
49250: EMPTY
49251: LIST
49252: LIST
49253: PUSH
49254: LD_INT 5
49256: NEG
49257: PUSH
49258: LD_INT 3
49260: NEG
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: PUSH
49266: LD_INT 0
49268: PUSH
49269: LD_INT 3
49271: NEG
49272: PUSH
49273: EMPTY
49274: LIST
49275: LIST
49276: PUSH
49277: LD_INT 0
49279: PUSH
49280: LD_INT 4
49282: NEG
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: PUSH
49288: LD_INT 1
49290: PUSH
49291: LD_INT 3
49293: NEG
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: PUSH
49299: LD_INT 1
49301: PUSH
49302: LD_INT 2
49304: NEG
49305: PUSH
49306: EMPTY
49307: LIST
49308: LIST
49309: PUSH
49310: LD_INT 0
49312: PUSH
49313: LD_INT 2
49315: NEG
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: PUSH
49321: LD_INT 1
49323: NEG
49324: PUSH
49325: LD_INT 3
49327: NEG
49328: PUSH
49329: EMPTY
49330: LIST
49331: LIST
49332: PUSH
49333: LD_INT 1
49335: NEG
49336: PUSH
49337: LD_INT 4
49339: NEG
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: PUSH
49345: LD_INT 2
49347: PUSH
49348: LD_INT 2
49350: NEG
49351: PUSH
49352: EMPTY
49353: LIST
49354: LIST
49355: PUSH
49356: LD_INT 2
49358: NEG
49359: PUSH
49360: LD_INT 4
49362: NEG
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: PUSH
49368: LD_INT 4
49370: PUSH
49371: LD_INT 0
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: PUSH
49378: LD_INT 4
49380: PUSH
49381: LD_INT 1
49383: NEG
49384: PUSH
49385: EMPTY
49386: LIST
49387: LIST
49388: PUSH
49389: LD_INT 5
49391: PUSH
49392: LD_INT 0
49394: PUSH
49395: EMPTY
49396: LIST
49397: LIST
49398: PUSH
49399: LD_INT 5
49401: PUSH
49402: LD_INT 1
49404: PUSH
49405: EMPTY
49406: LIST
49407: LIST
49408: PUSH
49409: LD_INT 4
49411: PUSH
49412: LD_INT 1
49414: PUSH
49415: EMPTY
49416: LIST
49417: LIST
49418: PUSH
49419: LD_INT 3
49421: PUSH
49422: LD_INT 0
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: PUSH
49429: LD_INT 3
49431: PUSH
49432: LD_INT 1
49434: NEG
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: PUSH
49440: LD_INT 3
49442: PUSH
49443: LD_INT 2
49445: NEG
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: LD_INT 5
49453: PUSH
49454: LD_INT 2
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: PUSH
49461: LD_INT 3
49463: PUSH
49464: LD_INT 3
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: PUSH
49471: LD_INT 3
49473: PUSH
49474: LD_INT 2
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: PUSH
49481: LD_INT 4
49483: PUSH
49484: LD_INT 3
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: PUSH
49491: LD_INT 4
49493: PUSH
49494: LD_INT 4
49496: PUSH
49497: EMPTY
49498: LIST
49499: LIST
49500: PUSH
49501: LD_INT 3
49503: PUSH
49504: LD_INT 4
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: PUSH
49511: LD_INT 2
49513: PUSH
49514: LD_INT 3
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: PUSH
49521: LD_INT 2
49523: PUSH
49524: LD_INT 2
49526: PUSH
49527: EMPTY
49528: LIST
49529: LIST
49530: PUSH
49531: LD_INT 4
49533: PUSH
49534: LD_INT 2
49536: PUSH
49537: EMPTY
49538: LIST
49539: LIST
49540: PUSH
49541: LD_INT 2
49543: PUSH
49544: LD_INT 4
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: PUSH
49551: LD_INT 0
49553: PUSH
49554: LD_INT 4
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: PUSH
49561: LD_INT 0
49563: PUSH
49564: LD_INT 3
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: PUSH
49571: LD_INT 1
49573: PUSH
49574: LD_INT 4
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PUSH
49581: LD_INT 1
49583: PUSH
49584: LD_INT 5
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: PUSH
49591: LD_INT 0
49593: PUSH
49594: LD_INT 5
49596: PUSH
49597: EMPTY
49598: LIST
49599: LIST
49600: PUSH
49601: LD_INT 1
49603: NEG
49604: PUSH
49605: LD_INT 4
49607: PUSH
49608: EMPTY
49609: LIST
49610: LIST
49611: PUSH
49612: LD_INT 1
49614: NEG
49615: PUSH
49616: LD_INT 3
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: PUSH
49623: LD_INT 2
49625: PUSH
49626: LD_INT 5
49628: PUSH
49629: EMPTY
49630: LIST
49631: LIST
49632: PUSH
49633: LD_INT 2
49635: NEG
49636: PUSH
49637: LD_INT 3
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: PUSH
49644: EMPTY
49645: LIST
49646: LIST
49647: LIST
49648: LIST
49649: LIST
49650: LIST
49651: LIST
49652: LIST
49653: LIST
49654: LIST
49655: LIST
49656: LIST
49657: LIST
49658: LIST
49659: LIST
49660: LIST
49661: LIST
49662: LIST
49663: LIST
49664: LIST
49665: LIST
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: LIST
49676: LIST
49677: LIST
49678: LIST
49679: LIST
49680: LIST
49681: LIST
49682: LIST
49683: LIST
49684: LIST
49685: LIST
49686: LIST
49687: LIST
49688: LIST
49689: LIST
49690: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
49691: LD_ADDR_VAR 0 34
49695: PUSH
49696: LD_INT 0
49698: PUSH
49699: LD_INT 4
49701: NEG
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: LD_INT 0
49709: PUSH
49710: LD_INT 5
49712: NEG
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: LD_INT 1
49720: PUSH
49721: LD_INT 4
49723: NEG
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: PUSH
49729: LD_INT 1
49731: PUSH
49732: LD_INT 3
49734: NEG
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: PUSH
49740: LD_INT 0
49742: PUSH
49743: LD_INT 3
49745: NEG
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: LD_INT 1
49753: NEG
49754: PUSH
49755: LD_INT 4
49757: NEG
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PUSH
49763: LD_INT 1
49765: NEG
49766: PUSH
49767: LD_INT 5
49769: NEG
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: PUSH
49775: LD_INT 2
49777: PUSH
49778: LD_INT 3
49780: NEG
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: LD_INT 2
49788: NEG
49789: PUSH
49790: LD_INT 5
49792: NEG
49793: PUSH
49794: EMPTY
49795: LIST
49796: LIST
49797: PUSH
49798: LD_INT 3
49800: PUSH
49801: LD_INT 0
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: PUSH
49808: LD_INT 3
49810: PUSH
49811: LD_INT 1
49813: NEG
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: PUSH
49819: LD_INT 4
49821: PUSH
49822: LD_INT 0
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: PUSH
49829: LD_INT 4
49831: PUSH
49832: LD_INT 1
49834: PUSH
49835: EMPTY
49836: LIST
49837: LIST
49838: PUSH
49839: LD_INT 3
49841: PUSH
49842: LD_INT 1
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: LD_INT 2
49851: PUSH
49852: LD_INT 0
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: PUSH
49859: LD_INT 2
49861: PUSH
49862: LD_INT 1
49864: NEG
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: PUSH
49870: LD_INT 2
49872: PUSH
49873: LD_INT 2
49875: NEG
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: LD_INT 4
49883: PUSH
49884: LD_INT 2
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: PUSH
49891: LD_INT 4
49893: PUSH
49894: LD_INT 4
49896: PUSH
49897: EMPTY
49898: LIST
49899: LIST
49900: PUSH
49901: LD_INT 4
49903: PUSH
49904: LD_INT 3
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: PUSH
49911: LD_INT 5
49913: PUSH
49914: LD_INT 4
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: LD_INT 5
49923: PUSH
49924: LD_INT 5
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: PUSH
49931: LD_INT 4
49933: PUSH
49934: LD_INT 5
49936: PUSH
49937: EMPTY
49938: LIST
49939: LIST
49940: PUSH
49941: LD_INT 3
49943: PUSH
49944: LD_INT 4
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: PUSH
49951: LD_INT 3
49953: PUSH
49954: LD_INT 3
49956: PUSH
49957: EMPTY
49958: LIST
49959: LIST
49960: PUSH
49961: LD_INT 5
49963: PUSH
49964: LD_INT 3
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: PUSH
49971: LD_INT 3
49973: PUSH
49974: LD_INT 5
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: PUSH
49981: LD_INT 0
49983: PUSH
49984: LD_INT 3
49986: PUSH
49987: EMPTY
49988: LIST
49989: LIST
49990: PUSH
49991: LD_INT 0
49993: PUSH
49994: LD_INT 2
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: PUSH
50001: LD_INT 1
50003: PUSH
50004: LD_INT 3
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: PUSH
50011: LD_INT 1
50013: PUSH
50014: LD_INT 4
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: PUSH
50021: LD_INT 0
50023: PUSH
50024: LD_INT 4
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: PUSH
50031: LD_INT 1
50033: NEG
50034: PUSH
50035: LD_INT 3
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: PUSH
50042: LD_INT 1
50044: NEG
50045: PUSH
50046: LD_INT 2
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: PUSH
50053: LD_INT 2
50055: PUSH
50056: LD_INT 4
50058: PUSH
50059: EMPTY
50060: LIST
50061: LIST
50062: PUSH
50063: LD_INT 2
50065: NEG
50066: PUSH
50067: LD_INT 2
50069: PUSH
50070: EMPTY
50071: LIST
50072: LIST
50073: PUSH
50074: LD_INT 4
50076: NEG
50077: PUSH
50078: LD_INT 0
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: PUSH
50085: LD_INT 4
50087: NEG
50088: PUSH
50089: LD_INT 1
50091: NEG
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: PUSH
50097: LD_INT 3
50099: NEG
50100: PUSH
50101: LD_INT 0
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: PUSH
50108: LD_INT 3
50110: NEG
50111: PUSH
50112: LD_INT 1
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: LD_INT 4
50121: NEG
50122: PUSH
50123: LD_INT 1
50125: PUSH
50126: EMPTY
50127: LIST
50128: LIST
50129: PUSH
50130: LD_INT 5
50132: NEG
50133: PUSH
50134: LD_INT 0
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: PUSH
50141: LD_INT 5
50143: NEG
50144: PUSH
50145: LD_INT 1
50147: NEG
50148: PUSH
50149: EMPTY
50150: LIST
50151: LIST
50152: PUSH
50153: LD_INT 5
50155: NEG
50156: PUSH
50157: LD_INT 2
50159: NEG
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: LD_INT 3
50167: NEG
50168: PUSH
50169: LD_INT 2
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: LIST
50180: LIST
50181: LIST
50182: LIST
50183: LIST
50184: LIST
50185: LIST
50186: LIST
50187: LIST
50188: LIST
50189: LIST
50190: LIST
50191: LIST
50192: LIST
50193: LIST
50194: LIST
50195: LIST
50196: LIST
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: LIST
50209: LIST
50210: LIST
50211: LIST
50212: LIST
50213: LIST
50214: LIST
50215: LIST
50216: LIST
50217: LIST
50218: LIST
50219: LIST
50220: LIST
50221: LIST
50222: ST_TO_ADDR
// end ; end ;
50223: GO 50226
50225: POP
// case btype of b_depot , b_warehouse :
50226: LD_VAR 0 1
50230: PUSH
50231: LD_INT 0
50233: DOUBLE
50234: EQUAL
50235: IFTRUE 50245
50237: LD_INT 1
50239: DOUBLE
50240: EQUAL
50241: IFTRUE 50245
50243: GO 50446
50245: POP
// case nation of nation_american :
50246: LD_VAR 0 5
50250: PUSH
50251: LD_INT 1
50253: DOUBLE
50254: EQUAL
50255: IFTRUE 50259
50257: GO 50315
50259: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
50260: LD_ADDR_VAR 0 9
50264: PUSH
50265: LD_VAR 0 11
50269: PUSH
50270: LD_VAR 0 12
50274: PUSH
50275: LD_VAR 0 13
50279: PUSH
50280: LD_VAR 0 14
50284: PUSH
50285: LD_VAR 0 15
50289: PUSH
50290: LD_VAR 0 16
50294: PUSH
50295: EMPTY
50296: LIST
50297: LIST
50298: LIST
50299: LIST
50300: LIST
50301: LIST
50302: PUSH
50303: LD_VAR 0 4
50307: PUSH
50308: LD_INT 1
50310: PLUS
50311: ARRAY
50312: ST_TO_ADDR
50313: GO 50444
50315: LD_INT 2
50317: DOUBLE
50318: EQUAL
50319: IFTRUE 50323
50321: GO 50379
50323: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
50324: LD_ADDR_VAR 0 9
50328: PUSH
50329: LD_VAR 0 17
50333: PUSH
50334: LD_VAR 0 18
50338: PUSH
50339: LD_VAR 0 19
50343: PUSH
50344: LD_VAR 0 20
50348: PUSH
50349: LD_VAR 0 21
50353: PUSH
50354: LD_VAR 0 22
50358: PUSH
50359: EMPTY
50360: LIST
50361: LIST
50362: LIST
50363: LIST
50364: LIST
50365: LIST
50366: PUSH
50367: LD_VAR 0 4
50371: PUSH
50372: LD_INT 1
50374: PLUS
50375: ARRAY
50376: ST_TO_ADDR
50377: GO 50444
50379: LD_INT 3
50381: DOUBLE
50382: EQUAL
50383: IFTRUE 50387
50385: GO 50443
50387: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
50388: LD_ADDR_VAR 0 9
50392: PUSH
50393: LD_VAR 0 23
50397: PUSH
50398: LD_VAR 0 24
50402: PUSH
50403: LD_VAR 0 25
50407: PUSH
50408: LD_VAR 0 26
50412: PUSH
50413: LD_VAR 0 27
50417: PUSH
50418: LD_VAR 0 28
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: LIST
50427: LIST
50428: LIST
50429: LIST
50430: PUSH
50431: LD_VAR 0 4
50435: PUSH
50436: LD_INT 1
50438: PLUS
50439: ARRAY
50440: ST_TO_ADDR
50441: GO 50444
50443: POP
50444: GO 50999
50446: LD_INT 2
50448: DOUBLE
50449: EQUAL
50450: IFTRUE 50460
50452: LD_INT 3
50454: DOUBLE
50455: EQUAL
50456: IFTRUE 50460
50458: GO 50516
50460: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
50461: LD_ADDR_VAR 0 9
50465: PUSH
50466: LD_VAR 0 29
50470: PUSH
50471: LD_VAR 0 30
50475: PUSH
50476: LD_VAR 0 31
50480: PUSH
50481: LD_VAR 0 32
50485: PUSH
50486: LD_VAR 0 33
50490: PUSH
50491: LD_VAR 0 34
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: LIST
50500: LIST
50501: LIST
50502: LIST
50503: PUSH
50504: LD_VAR 0 4
50508: PUSH
50509: LD_INT 1
50511: PLUS
50512: ARRAY
50513: ST_TO_ADDR
50514: GO 50999
50516: LD_INT 16
50518: DOUBLE
50519: EQUAL
50520: IFTRUE 50578
50522: LD_INT 17
50524: DOUBLE
50525: EQUAL
50526: IFTRUE 50578
50528: LD_INT 18
50530: DOUBLE
50531: EQUAL
50532: IFTRUE 50578
50534: LD_INT 19
50536: DOUBLE
50537: EQUAL
50538: IFTRUE 50578
50540: LD_INT 22
50542: DOUBLE
50543: EQUAL
50544: IFTRUE 50578
50546: LD_INT 20
50548: DOUBLE
50549: EQUAL
50550: IFTRUE 50578
50552: LD_INT 21
50554: DOUBLE
50555: EQUAL
50556: IFTRUE 50578
50558: LD_INT 23
50560: DOUBLE
50561: EQUAL
50562: IFTRUE 50578
50564: LD_INT 24
50566: DOUBLE
50567: EQUAL
50568: IFTRUE 50578
50570: LD_INT 25
50572: DOUBLE
50573: EQUAL
50574: IFTRUE 50578
50576: GO 50634
50578: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
50579: LD_ADDR_VAR 0 9
50583: PUSH
50584: LD_VAR 0 35
50588: PUSH
50589: LD_VAR 0 36
50593: PUSH
50594: LD_VAR 0 37
50598: PUSH
50599: LD_VAR 0 38
50603: PUSH
50604: LD_VAR 0 39
50608: PUSH
50609: LD_VAR 0 40
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: LIST
50618: LIST
50619: LIST
50620: LIST
50621: PUSH
50622: LD_VAR 0 4
50626: PUSH
50627: LD_INT 1
50629: PLUS
50630: ARRAY
50631: ST_TO_ADDR
50632: GO 50999
50634: LD_INT 6
50636: DOUBLE
50637: EQUAL
50638: IFTRUE 50690
50640: LD_INT 7
50642: DOUBLE
50643: EQUAL
50644: IFTRUE 50690
50646: LD_INT 8
50648: DOUBLE
50649: EQUAL
50650: IFTRUE 50690
50652: LD_INT 13
50654: DOUBLE
50655: EQUAL
50656: IFTRUE 50690
50658: LD_INT 12
50660: DOUBLE
50661: EQUAL
50662: IFTRUE 50690
50664: LD_INT 15
50666: DOUBLE
50667: EQUAL
50668: IFTRUE 50690
50670: LD_INT 11
50672: DOUBLE
50673: EQUAL
50674: IFTRUE 50690
50676: LD_INT 14
50678: DOUBLE
50679: EQUAL
50680: IFTRUE 50690
50682: LD_INT 10
50684: DOUBLE
50685: EQUAL
50686: IFTRUE 50690
50688: GO 50746
50690: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
50691: LD_ADDR_VAR 0 9
50695: PUSH
50696: LD_VAR 0 41
50700: PUSH
50701: LD_VAR 0 42
50705: PUSH
50706: LD_VAR 0 43
50710: PUSH
50711: LD_VAR 0 44
50715: PUSH
50716: LD_VAR 0 45
50720: PUSH
50721: LD_VAR 0 46
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: LIST
50730: LIST
50731: LIST
50732: LIST
50733: PUSH
50734: LD_VAR 0 4
50738: PUSH
50739: LD_INT 1
50741: PLUS
50742: ARRAY
50743: ST_TO_ADDR
50744: GO 50999
50746: LD_INT 36
50748: DOUBLE
50749: EQUAL
50750: IFTRUE 50754
50752: GO 50810
50754: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
50755: LD_ADDR_VAR 0 9
50759: PUSH
50760: LD_VAR 0 47
50764: PUSH
50765: LD_VAR 0 48
50769: PUSH
50770: LD_VAR 0 49
50774: PUSH
50775: LD_VAR 0 50
50779: PUSH
50780: LD_VAR 0 51
50784: PUSH
50785: LD_VAR 0 52
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: LIST
50794: LIST
50795: LIST
50796: LIST
50797: PUSH
50798: LD_VAR 0 4
50802: PUSH
50803: LD_INT 1
50805: PLUS
50806: ARRAY
50807: ST_TO_ADDR
50808: GO 50999
50810: LD_INT 4
50812: DOUBLE
50813: EQUAL
50814: IFTRUE 50836
50816: LD_INT 5
50818: DOUBLE
50819: EQUAL
50820: IFTRUE 50836
50822: LD_INT 34
50824: DOUBLE
50825: EQUAL
50826: IFTRUE 50836
50828: LD_INT 37
50830: DOUBLE
50831: EQUAL
50832: IFTRUE 50836
50834: GO 50892
50836: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
50837: LD_ADDR_VAR 0 9
50841: PUSH
50842: LD_VAR 0 53
50846: PUSH
50847: LD_VAR 0 54
50851: PUSH
50852: LD_VAR 0 55
50856: PUSH
50857: LD_VAR 0 56
50861: PUSH
50862: LD_VAR 0 57
50866: PUSH
50867: LD_VAR 0 58
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: LIST
50876: LIST
50877: LIST
50878: LIST
50879: PUSH
50880: LD_VAR 0 4
50884: PUSH
50885: LD_INT 1
50887: PLUS
50888: ARRAY
50889: ST_TO_ADDR
50890: GO 50999
50892: LD_INT 31
50894: DOUBLE
50895: EQUAL
50896: IFTRUE 50942
50898: LD_INT 32
50900: DOUBLE
50901: EQUAL
50902: IFTRUE 50942
50904: LD_INT 33
50906: DOUBLE
50907: EQUAL
50908: IFTRUE 50942
50910: LD_INT 27
50912: DOUBLE
50913: EQUAL
50914: IFTRUE 50942
50916: LD_INT 26
50918: DOUBLE
50919: EQUAL
50920: IFTRUE 50942
50922: LD_INT 28
50924: DOUBLE
50925: EQUAL
50926: IFTRUE 50942
50928: LD_INT 29
50930: DOUBLE
50931: EQUAL
50932: IFTRUE 50942
50934: LD_INT 30
50936: DOUBLE
50937: EQUAL
50938: IFTRUE 50942
50940: GO 50998
50942: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
50943: LD_ADDR_VAR 0 9
50947: PUSH
50948: LD_VAR 0 59
50952: PUSH
50953: LD_VAR 0 60
50957: PUSH
50958: LD_VAR 0 61
50962: PUSH
50963: LD_VAR 0 62
50967: PUSH
50968: LD_VAR 0 63
50972: PUSH
50973: LD_VAR 0 64
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: LIST
50982: LIST
50983: LIST
50984: LIST
50985: PUSH
50986: LD_VAR 0 4
50990: PUSH
50991: LD_INT 1
50993: PLUS
50994: ARRAY
50995: ST_TO_ADDR
50996: GO 50999
50998: POP
// temp_list2 = [ ] ;
50999: LD_ADDR_VAR 0 10
51003: PUSH
51004: EMPTY
51005: ST_TO_ADDR
// for i in temp_list do
51006: LD_ADDR_VAR 0 8
51010: PUSH
51011: LD_VAR 0 9
51015: PUSH
51016: FOR_IN
51017: IFFALSE 51069
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
51019: LD_ADDR_VAR 0 10
51023: PUSH
51024: LD_VAR 0 10
51028: PUSH
51029: LD_VAR 0 8
51033: PUSH
51034: LD_INT 1
51036: ARRAY
51037: PUSH
51038: LD_VAR 0 2
51042: PLUS
51043: PUSH
51044: LD_VAR 0 8
51048: PUSH
51049: LD_INT 2
51051: ARRAY
51052: PUSH
51053: LD_VAR 0 3
51057: PLUS
51058: PUSH
51059: EMPTY
51060: LIST
51061: LIST
51062: PUSH
51063: EMPTY
51064: LIST
51065: ADD
51066: ST_TO_ADDR
51067: GO 51016
51069: POP
51070: POP
// result = temp_list2 ;
51071: LD_ADDR_VAR 0 7
51075: PUSH
51076: LD_VAR 0 10
51080: ST_TO_ADDR
// end ;
51081: LD_VAR 0 7
51085: RET
// export function EnemyInRange ( unit , dist ) ; begin
51086: LD_INT 0
51088: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
51089: LD_ADDR_VAR 0 3
51093: PUSH
51094: LD_VAR 0 1
51098: PPUSH
51099: CALL_OW 255
51103: PPUSH
51104: LD_VAR 0 1
51108: PPUSH
51109: CALL_OW 250
51113: PPUSH
51114: LD_VAR 0 1
51118: PPUSH
51119: CALL_OW 251
51123: PPUSH
51124: LD_VAR 0 2
51128: PPUSH
51129: CALL 25190 0 4
51133: PUSH
51134: LD_INT 4
51136: ARRAY
51137: ST_TO_ADDR
// end ;
51138: LD_VAR 0 3
51142: RET
// export function PlayerSeeMe ( unit ) ; begin
51143: LD_INT 0
51145: PPUSH
// result := See ( your_side , unit ) ;
51146: LD_ADDR_VAR 0 2
51150: PUSH
51151: LD_OWVAR 2
51155: PPUSH
51156: LD_VAR 0 1
51160: PPUSH
51161: CALL_OW 292
51165: ST_TO_ADDR
// end ;
51166: LD_VAR 0 2
51170: RET
// export function ReverseDir ( unit ) ; begin
51171: LD_INT 0
51173: PPUSH
// if not unit then
51174: LD_VAR 0 1
51178: NOT
51179: IFFALSE 51183
// exit ;
51181: GO 51206
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
51183: LD_ADDR_VAR 0 2
51187: PUSH
51188: LD_VAR 0 1
51192: PPUSH
51193: CALL_OW 254
51197: PUSH
51198: LD_INT 3
51200: PLUS
51201: PUSH
51202: LD_INT 6
51204: MOD
51205: ST_TO_ADDR
// end ;
51206: LD_VAR 0 2
51210: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
51211: LD_INT 0
51213: PPUSH
51214: PPUSH
51215: PPUSH
51216: PPUSH
51217: PPUSH
// if not hexes then
51218: LD_VAR 0 2
51222: NOT
51223: IFFALSE 51227
// exit ;
51225: GO 51375
// dist := 9999 ;
51227: LD_ADDR_VAR 0 5
51231: PUSH
51232: LD_INT 9999
51234: ST_TO_ADDR
// for i = 1 to hexes do
51235: LD_ADDR_VAR 0 4
51239: PUSH
51240: DOUBLE
51241: LD_INT 1
51243: DEC
51244: ST_TO_ADDR
51245: LD_VAR 0 2
51249: PUSH
51250: FOR_TO
51251: IFFALSE 51363
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
51253: LD_VAR 0 1
51257: PPUSH
51258: LD_VAR 0 2
51262: PUSH
51263: LD_VAR 0 4
51267: ARRAY
51268: PUSH
51269: LD_INT 1
51271: ARRAY
51272: PPUSH
51273: LD_VAR 0 2
51277: PUSH
51278: LD_VAR 0 4
51282: ARRAY
51283: PUSH
51284: LD_INT 2
51286: ARRAY
51287: PPUSH
51288: CALL_OW 297
51292: PUSH
51293: LD_VAR 0 5
51297: LESS
51298: IFFALSE 51361
// begin hex := hexes [ i ] ;
51300: LD_ADDR_VAR 0 7
51304: PUSH
51305: LD_VAR 0 2
51309: PUSH
51310: LD_VAR 0 4
51314: ARRAY
51315: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51316: LD_ADDR_VAR 0 5
51320: PUSH
51321: LD_VAR 0 1
51325: PPUSH
51326: LD_VAR 0 2
51330: PUSH
51331: LD_VAR 0 4
51335: ARRAY
51336: PUSH
51337: LD_INT 1
51339: ARRAY
51340: PPUSH
51341: LD_VAR 0 2
51345: PUSH
51346: LD_VAR 0 4
51350: ARRAY
51351: PUSH
51352: LD_INT 2
51354: ARRAY
51355: PPUSH
51356: CALL_OW 297
51360: ST_TO_ADDR
// end ; end ;
51361: GO 51250
51363: POP
51364: POP
// result := hex ;
51365: LD_ADDR_VAR 0 3
51369: PUSH
51370: LD_VAR 0 7
51374: ST_TO_ADDR
// end ;
51375: LD_VAR 0 3
51379: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
51380: LD_INT 0
51382: PPUSH
51383: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
51384: LD_VAR 0 1
51388: NOT
51389: PUSH
51390: LD_VAR 0 1
51394: PUSH
51395: LD_INT 21
51397: PUSH
51398: LD_INT 2
51400: PUSH
51401: EMPTY
51402: LIST
51403: LIST
51404: PUSH
51405: LD_INT 23
51407: PUSH
51408: LD_INT 2
51410: PUSH
51411: EMPTY
51412: LIST
51413: LIST
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PPUSH
51419: CALL_OW 69
51423: IN
51424: NOT
51425: OR
51426: IFFALSE 51430
// exit ;
51428: GO 51477
// for i = 1 to 3 do
51430: LD_ADDR_VAR 0 3
51434: PUSH
51435: DOUBLE
51436: LD_INT 1
51438: DEC
51439: ST_TO_ADDR
51440: LD_INT 3
51442: PUSH
51443: FOR_TO
51444: IFFALSE 51475
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
51446: LD_VAR 0 1
51450: PPUSH
51451: CALL_OW 250
51455: PPUSH
51456: LD_VAR 0 1
51460: PPUSH
51461: CALL_OW 251
51465: PPUSH
51466: LD_INT 1
51468: PPUSH
51469: CALL_OW 453
51473: GO 51443
51475: POP
51476: POP
// end ;
51477: LD_VAR 0 2
51481: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
51482: LD_INT 0
51484: PPUSH
51485: PPUSH
51486: PPUSH
51487: PPUSH
51488: PPUSH
51489: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
51490: LD_VAR 0 1
51494: NOT
51495: PUSH
51496: LD_VAR 0 2
51500: NOT
51501: OR
51502: PUSH
51503: LD_VAR 0 1
51507: PPUSH
51508: CALL_OW 314
51512: OR
51513: IFFALSE 51517
// exit ;
51515: GO 51958
// x := GetX ( enemy_unit ) ;
51517: LD_ADDR_VAR 0 7
51521: PUSH
51522: LD_VAR 0 2
51526: PPUSH
51527: CALL_OW 250
51531: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
51532: LD_ADDR_VAR 0 8
51536: PUSH
51537: LD_VAR 0 2
51541: PPUSH
51542: CALL_OW 251
51546: ST_TO_ADDR
// if not x or not y then
51547: LD_VAR 0 7
51551: NOT
51552: PUSH
51553: LD_VAR 0 8
51557: NOT
51558: OR
51559: IFFALSE 51563
// exit ;
51561: GO 51958
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
51563: LD_ADDR_VAR 0 6
51567: PUSH
51568: LD_VAR 0 7
51572: PPUSH
51573: LD_INT 0
51575: PPUSH
51576: LD_INT 4
51578: PPUSH
51579: CALL_OW 272
51583: PUSH
51584: LD_VAR 0 8
51588: PPUSH
51589: LD_INT 0
51591: PPUSH
51592: LD_INT 4
51594: PPUSH
51595: CALL_OW 273
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: PUSH
51604: LD_VAR 0 7
51608: PPUSH
51609: LD_INT 1
51611: PPUSH
51612: LD_INT 4
51614: PPUSH
51615: CALL_OW 272
51619: PUSH
51620: LD_VAR 0 8
51624: PPUSH
51625: LD_INT 1
51627: PPUSH
51628: LD_INT 4
51630: PPUSH
51631: CALL_OW 273
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: PUSH
51640: LD_VAR 0 7
51644: PPUSH
51645: LD_INT 2
51647: PPUSH
51648: LD_INT 4
51650: PPUSH
51651: CALL_OW 272
51655: PUSH
51656: LD_VAR 0 8
51660: PPUSH
51661: LD_INT 2
51663: PPUSH
51664: LD_INT 4
51666: PPUSH
51667: CALL_OW 273
51671: PUSH
51672: EMPTY
51673: LIST
51674: LIST
51675: PUSH
51676: LD_VAR 0 7
51680: PPUSH
51681: LD_INT 3
51683: PPUSH
51684: LD_INT 4
51686: PPUSH
51687: CALL_OW 272
51691: PUSH
51692: LD_VAR 0 8
51696: PPUSH
51697: LD_INT 3
51699: PPUSH
51700: LD_INT 4
51702: PPUSH
51703: CALL_OW 273
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: PUSH
51712: LD_VAR 0 7
51716: PPUSH
51717: LD_INT 4
51719: PPUSH
51720: LD_INT 4
51722: PPUSH
51723: CALL_OW 272
51727: PUSH
51728: LD_VAR 0 8
51732: PPUSH
51733: LD_INT 4
51735: PPUSH
51736: LD_INT 4
51738: PPUSH
51739: CALL_OW 273
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: PUSH
51748: LD_VAR 0 7
51752: PPUSH
51753: LD_INT 5
51755: PPUSH
51756: LD_INT 4
51758: PPUSH
51759: CALL_OW 272
51763: PUSH
51764: LD_VAR 0 8
51768: PPUSH
51769: LD_INT 5
51771: PPUSH
51772: LD_INT 4
51774: PPUSH
51775: CALL_OW 273
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: ST_TO_ADDR
// for i = tmp downto 1 do
51792: LD_ADDR_VAR 0 4
51796: PUSH
51797: DOUBLE
51798: LD_VAR 0 6
51802: INC
51803: ST_TO_ADDR
51804: LD_INT 1
51806: PUSH
51807: FOR_DOWNTO
51808: IFFALSE 51909
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
51810: LD_VAR 0 6
51814: PUSH
51815: LD_VAR 0 4
51819: ARRAY
51820: PUSH
51821: LD_INT 1
51823: ARRAY
51824: PPUSH
51825: LD_VAR 0 6
51829: PUSH
51830: LD_VAR 0 4
51834: ARRAY
51835: PUSH
51836: LD_INT 2
51838: ARRAY
51839: PPUSH
51840: CALL_OW 488
51844: NOT
51845: PUSH
51846: LD_VAR 0 6
51850: PUSH
51851: LD_VAR 0 4
51855: ARRAY
51856: PUSH
51857: LD_INT 1
51859: ARRAY
51860: PPUSH
51861: LD_VAR 0 6
51865: PUSH
51866: LD_VAR 0 4
51870: ARRAY
51871: PUSH
51872: LD_INT 2
51874: ARRAY
51875: PPUSH
51876: CALL_OW 428
51880: PUSH
51881: LD_INT 0
51883: NONEQUAL
51884: OR
51885: IFFALSE 51907
// tmp := Delete ( tmp , i ) ;
51887: LD_ADDR_VAR 0 6
51891: PUSH
51892: LD_VAR 0 6
51896: PPUSH
51897: LD_VAR 0 4
51901: PPUSH
51902: CALL_OW 3
51906: ST_TO_ADDR
51907: GO 51807
51909: POP
51910: POP
// j := GetClosestHex ( unit , tmp ) ;
51911: LD_ADDR_VAR 0 5
51915: PUSH
51916: LD_VAR 0 1
51920: PPUSH
51921: LD_VAR 0 6
51925: PPUSH
51926: CALL 51211 0 2
51930: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
51931: LD_VAR 0 1
51935: PPUSH
51936: LD_VAR 0 5
51940: PUSH
51941: LD_INT 1
51943: ARRAY
51944: PPUSH
51945: LD_VAR 0 5
51949: PUSH
51950: LD_INT 2
51952: ARRAY
51953: PPUSH
51954: CALL_OW 111
// end ;
51958: LD_VAR 0 3
51962: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
51963: LD_INT 0
51965: PPUSH
51966: PPUSH
51967: PPUSH
// uc_side = 0 ;
51968: LD_ADDR_OWVAR 20
51972: PUSH
51973: LD_INT 0
51975: ST_TO_ADDR
// uc_nation = 0 ;
51976: LD_ADDR_OWVAR 21
51980: PUSH
51981: LD_INT 0
51983: ST_TO_ADDR
// InitHc ;
51984: CALL_OW 19
// InitVc ;
51988: CALL_OW 20
// if mastodonts then
51992: LD_VAR 0 6
51996: IFFALSE 52063
// for i = 1 to mastodonts do
51998: LD_ADDR_VAR 0 11
52002: PUSH
52003: DOUBLE
52004: LD_INT 1
52006: DEC
52007: ST_TO_ADDR
52008: LD_VAR 0 6
52012: PUSH
52013: FOR_TO
52014: IFFALSE 52061
// begin vc_chassis := 31 ;
52016: LD_ADDR_OWVAR 37
52020: PUSH
52021: LD_INT 31
52023: ST_TO_ADDR
// vc_control := control_rider ;
52024: LD_ADDR_OWVAR 38
52028: PUSH
52029: LD_INT 4
52031: ST_TO_ADDR
// animal := CreateVehicle ;
52032: LD_ADDR_VAR 0 12
52036: PUSH
52037: CALL_OW 45
52041: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52042: LD_VAR 0 12
52046: PPUSH
52047: LD_VAR 0 8
52051: PPUSH
52052: LD_INT 0
52054: PPUSH
52055: CALL 54132 0 3
// end ;
52059: GO 52013
52061: POP
52062: POP
// if horses then
52063: LD_VAR 0 5
52067: IFFALSE 52134
// for i = 1 to horses do
52069: LD_ADDR_VAR 0 11
52073: PUSH
52074: DOUBLE
52075: LD_INT 1
52077: DEC
52078: ST_TO_ADDR
52079: LD_VAR 0 5
52083: PUSH
52084: FOR_TO
52085: IFFALSE 52132
// begin hc_class := 21 ;
52087: LD_ADDR_OWVAR 28
52091: PUSH
52092: LD_INT 21
52094: ST_TO_ADDR
// hc_gallery :=  ;
52095: LD_ADDR_OWVAR 33
52099: PUSH
52100: LD_STRING 
52102: ST_TO_ADDR
// animal := CreateHuman ;
52103: LD_ADDR_VAR 0 12
52107: PUSH
52108: CALL_OW 44
52112: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52113: LD_VAR 0 12
52117: PPUSH
52118: LD_VAR 0 8
52122: PPUSH
52123: LD_INT 0
52125: PPUSH
52126: CALL 54132 0 3
// end ;
52130: GO 52084
52132: POP
52133: POP
// if birds then
52134: LD_VAR 0 1
52138: IFFALSE 52205
// for i = 1 to birds do
52140: LD_ADDR_VAR 0 11
52144: PUSH
52145: DOUBLE
52146: LD_INT 1
52148: DEC
52149: ST_TO_ADDR
52150: LD_VAR 0 1
52154: PUSH
52155: FOR_TO
52156: IFFALSE 52203
// begin hc_class = 18 ;
52158: LD_ADDR_OWVAR 28
52162: PUSH
52163: LD_INT 18
52165: ST_TO_ADDR
// hc_gallery =  ;
52166: LD_ADDR_OWVAR 33
52170: PUSH
52171: LD_STRING 
52173: ST_TO_ADDR
// animal := CreateHuman ;
52174: LD_ADDR_VAR 0 12
52178: PUSH
52179: CALL_OW 44
52183: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52184: LD_VAR 0 12
52188: PPUSH
52189: LD_VAR 0 8
52193: PPUSH
52194: LD_INT 0
52196: PPUSH
52197: CALL 54132 0 3
// end ;
52201: GO 52155
52203: POP
52204: POP
// if tigers then
52205: LD_VAR 0 2
52209: IFFALSE 52293
// for i = 1 to tigers do
52211: LD_ADDR_VAR 0 11
52215: PUSH
52216: DOUBLE
52217: LD_INT 1
52219: DEC
52220: ST_TO_ADDR
52221: LD_VAR 0 2
52225: PUSH
52226: FOR_TO
52227: IFFALSE 52291
// begin hc_class = class_tiger ;
52229: LD_ADDR_OWVAR 28
52233: PUSH
52234: LD_INT 14
52236: ST_TO_ADDR
// hc_gallery =  ;
52237: LD_ADDR_OWVAR 33
52241: PUSH
52242: LD_STRING 
52244: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
52245: LD_ADDR_OWVAR 35
52249: PUSH
52250: LD_INT 7
52252: NEG
52253: PPUSH
52254: LD_INT 7
52256: PPUSH
52257: CALL_OW 12
52261: ST_TO_ADDR
// animal := CreateHuman ;
52262: LD_ADDR_VAR 0 12
52266: PUSH
52267: CALL_OW 44
52271: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52272: LD_VAR 0 12
52276: PPUSH
52277: LD_VAR 0 8
52281: PPUSH
52282: LD_INT 0
52284: PPUSH
52285: CALL 54132 0 3
// end ;
52289: GO 52226
52291: POP
52292: POP
// if apemans then
52293: LD_VAR 0 3
52297: IFFALSE 52420
// for i = 1 to apemans do
52299: LD_ADDR_VAR 0 11
52303: PUSH
52304: DOUBLE
52305: LD_INT 1
52307: DEC
52308: ST_TO_ADDR
52309: LD_VAR 0 3
52313: PUSH
52314: FOR_TO
52315: IFFALSE 52418
// begin hc_class = class_apeman ;
52317: LD_ADDR_OWVAR 28
52321: PUSH
52322: LD_INT 12
52324: ST_TO_ADDR
// hc_gallery =  ;
52325: LD_ADDR_OWVAR 33
52329: PUSH
52330: LD_STRING 
52332: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
52333: LD_ADDR_OWVAR 35
52337: PUSH
52338: LD_INT 5
52340: NEG
52341: PPUSH
52342: LD_INT 5
52344: PPUSH
52345: CALL_OW 12
52349: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
52350: LD_ADDR_OWVAR 31
52354: PUSH
52355: LD_INT 1
52357: PPUSH
52358: LD_INT 3
52360: PPUSH
52361: CALL_OW 12
52365: PUSH
52366: LD_INT 1
52368: PPUSH
52369: LD_INT 3
52371: PPUSH
52372: CALL_OW 12
52376: PUSH
52377: LD_INT 0
52379: PUSH
52380: LD_INT 0
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: LIST
52387: LIST
52388: ST_TO_ADDR
// animal := CreateHuman ;
52389: LD_ADDR_VAR 0 12
52393: PUSH
52394: CALL_OW 44
52398: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52399: LD_VAR 0 12
52403: PPUSH
52404: LD_VAR 0 8
52408: PPUSH
52409: LD_INT 0
52411: PPUSH
52412: CALL 54132 0 3
// end ;
52416: GO 52314
52418: POP
52419: POP
// if enchidnas then
52420: LD_VAR 0 4
52424: IFFALSE 52491
// for i = 1 to enchidnas do
52426: LD_ADDR_VAR 0 11
52430: PUSH
52431: DOUBLE
52432: LD_INT 1
52434: DEC
52435: ST_TO_ADDR
52436: LD_VAR 0 4
52440: PUSH
52441: FOR_TO
52442: IFFALSE 52489
// begin hc_class = 13 ;
52444: LD_ADDR_OWVAR 28
52448: PUSH
52449: LD_INT 13
52451: ST_TO_ADDR
// hc_gallery =  ;
52452: LD_ADDR_OWVAR 33
52456: PUSH
52457: LD_STRING 
52459: ST_TO_ADDR
// animal := CreateHuman ;
52460: LD_ADDR_VAR 0 12
52464: PUSH
52465: CALL_OW 44
52469: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52470: LD_VAR 0 12
52474: PPUSH
52475: LD_VAR 0 8
52479: PPUSH
52480: LD_INT 0
52482: PPUSH
52483: CALL 54132 0 3
// end ;
52487: GO 52441
52489: POP
52490: POP
// if fishes then
52491: LD_VAR 0 7
52495: IFFALSE 52562
// for i = 1 to fishes do
52497: LD_ADDR_VAR 0 11
52501: PUSH
52502: DOUBLE
52503: LD_INT 1
52505: DEC
52506: ST_TO_ADDR
52507: LD_VAR 0 7
52511: PUSH
52512: FOR_TO
52513: IFFALSE 52560
// begin hc_class = 20 ;
52515: LD_ADDR_OWVAR 28
52519: PUSH
52520: LD_INT 20
52522: ST_TO_ADDR
// hc_gallery =  ;
52523: LD_ADDR_OWVAR 33
52527: PUSH
52528: LD_STRING 
52530: ST_TO_ADDR
// animal := CreateHuman ;
52531: LD_ADDR_VAR 0 12
52535: PUSH
52536: CALL_OW 44
52540: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
52541: LD_VAR 0 12
52545: PPUSH
52546: LD_VAR 0 9
52550: PPUSH
52551: LD_INT 0
52553: PPUSH
52554: CALL 54132 0 3
// end ;
52558: GO 52512
52560: POP
52561: POP
// end ;
52562: LD_VAR 0 10
52566: RET
// export function WantHeal ( sci , unit ) ; begin
52567: LD_INT 0
52569: PPUSH
// if GetTaskList ( sci ) > 0 then
52570: LD_VAR 0 1
52574: PPUSH
52575: CALL_OW 437
52579: PUSH
52580: LD_INT 0
52582: GREATER
52583: IFFALSE 52653
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
52585: LD_VAR 0 1
52589: PPUSH
52590: CALL_OW 437
52594: PUSH
52595: LD_INT 1
52597: ARRAY
52598: PUSH
52599: LD_INT 1
52601: ARRAY
52602: PUSH
52603: LD_STRING l
52605: EQUAL
52606: PUSH
52607: LD_VAR 0 1
52611: PPUSH
52612: CALL_OW 437
52616: PUSH
52617: LD_INT 1
52619: ARRAY
52620: PUSH
52621: LD_INT 4
52623: ARRAY
52624: PUSH
52625: LD_VAR 0 2
52629: EQUAL
52630: AND
52631: IFFALSE 52643
// result := true else
52633: LD_ADDR_VAR 0 3
52637: PUSH
52638: LD_INT 1
52640: ST_TO_ADDR
52641: GO 52651
// result := false ;
52643: LD_ADDR_VAR 0 3
52647: PUSH
52648: LD_INT 0
52650: ST_TO_ADDR
// end else
52651: GO 52661
// result := false ;
52653: LD_ADDR_VAR 0 3
52657: PUSH
52658: LD_INT 0
52660: ST_TO_ADDR
// end ;
52661: LD_VAR 0 3
52665: RET
// export function HealTarget ( sci ) ; begin
52666: LD_INT 0
52668: PPUSH
// if not sci then
52669: LD_VAR 0 1
52673: NOT
52674: IFFALSE 52678
// exit ;
52676: GO 52743
// result := 0 ;
52678: LD_ADDR_VAR 0 2
52682: PUSH
52683: LD_INT 0
52685: ST_TO_ADDR
// if GetTaskList ( sci ) then
52686: LD_VAR 0 1
52690: PPUSH
52691: CALL_OW 437
52695: IFFALSE 52743
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
52697: LD_VAR 0 1
52701: PPUSH
52702: CALL_OW 437
52706: PUSH
52707: LD_INT 1
52709: ARRAY
52710: PUSH
52711: LD_INT 1
52713: ARRAY
52714: PUSH
52715: LD_STRING l
52717: EQUAL
52718: IFFALSE 52743
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
52720: LD_ADDR_VAR 0 2
52724: PUSH
52725: LD_VAR 0 1
52729: PPUSH
52730: CALL_OW 437
52734: PUSH
52735: LD_INT 1
52737: ARRAY
52738: PUSH
52739: LD_INT 4
52741: ARRAY
52742: ST_TO_ADDR
// end ;
52743: LD_VAR 0 2
52747: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
52748: LD_INT 0
52750: PPUSH
52751: PPUSH
52752: PPUSH
52753: PPUSH
// if not base_units then
52754: LD_VAR 0 1
52758: NOT
52759: IFFALSE 52763
// exit ;
52761: GO 52850
// result := false ;
52763: LD_ADDR_VAR 0 2
52767: PUSH
52768: LD_INT 0
52770: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
52771: LD_ADDR_VAR 0 5
52775: PUSH
52776: LD_VAR 0 1
52780: PPUSH
52781: LD_INT 21
52783: PUSH
52784: LD_INT 3
52786: PUSH
52787: EMPTY
52788: LIST
52789: LIST
52790: PPUSH
52791: CALL_OW 72
52795: ST_TO_ADDR
// if not tmp then
52796: LD_VAR 0 5
52800: NOT
52801: IFFALSE 52805
// exit ;
52803: GO 52850
// for i in tmp do
52805: LD_ADDR_VAR 0 3
52809: PUSH
52810: LD_VAR 0 5
52814: PUSH
52815: FOR_IN
52816: IFFALSE 52848
// begin result := EnemyInRange ( i , 22 ) ;
52818: LD_ADDR_VAR 0 2
52822: PUSH
52823: LD_VAR 0 3
52827: PPUSH
52828: LD_INT 22
52830: PPUSH
52831: CALL 51086 0 2
52835: ST_TO_ADDR
// if result then
52836: LD_VAR 0 2
52840: IFFALSE 52846
// exit ;
52842: POP
52843: POP
52844: GO 52850
// end ;
52846: GO 52815
52848: POP
52849: POP
// end ;
52850: LD_VAR 0 2
52854: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
52855: LD_INT 0
52857: PPUSH
52858: PPUSH
// if not units then
52859: LD_VAR 0 1
52863: NOT
52864: IFFALSE 52868
// exit ;
52866: GO 52938
// result := [ ] ;
52868: LD_ADDR_VAR 0 3
52872: PUSH
52873: EMPTY
52874: ST_TO_ADDR
// for i in units do
52875: LD_ADDR_VAR 0 4
52879: PUSH
52880: LD_VAR 0 1
52884: PUSH
52885: FOR_IN
52886: IFFALSE 52936
// if GetTag ( i ) = tag then
52888: LD_VAR 0 4
52892: PPUSH
52893: CALL_OW 110
52897: PUSH
52898: LD_VAR 0 2
52902: EQUAL
52903: IFFALSE 52934
// result := Insert ( result , result + 1 , i ) ;
52905: LD_ADDR_VAR 0 3
52909: PUSH
52910: LD_VAR 0 3
52914: PPUSH
52915: LD_VAR 0 3
52919: PUSH
52920: LD_INT 1
52922: PLUS
52923: PPUSH
52924: LD_VAR 0 4
52928: PPUSH
52929: CALL_OW 2
52933: ST_TO_ADDR
52934: GO 52885
52936: POP
52937: POP
// end ;
52938: LD_VAR 0 3
52942: RET
// export function IsDriver ( un ) ; begin
52943: LD_INT 0
52945: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
52946: LD_ADDR_VAR 0 2
52950: PUSH
52951: LD_VAR 0 1
52955: PUSH
52956: LD_INT 55
52958: PUSH
52959: EMPTY
52960: LIST
52961: PPUSH
52962: CALL_OW 69
52966: IN
52967: ST_TO_ADDR
// end ;
52968: LD_VAR 0 2
52972: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
52973: LD_INT 0
52975: PPUSH
52976: PPUSH
// list := [ ] ;
52977: LD_ADDR_VAR 0 5
52981: PUSH
52982: EMPTY
52983: ST_TO_ADDR
// case d of 0 :
52984: LD_VAR 0 3
52988: PUSH
52989: LD_INT 0
52991: DOUBLE
52992: EQUAL
52993: IFTRUE 52997
52995: GO 53130
52997: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
52998: LD_ADDR_VAR 0 5
53002: PUSH
53003: LD_VAR 0 1
53007: PUSH
53008: LD_INT 4
53010: MINUS
53011: PUSH
53012: LD_VAR 0 2
53016: PUSH
53017: LD_INT 4
53019: MINUS
53020: PUSH
53021: LD_INT 2
53023: PUSH
53024: EMPTY
53025: LIST
53026: LIST
53027: LIST
53028: PUSH
53029: LD_VAR 0 1
53033: PUSH
53034: LD_INT 3
53036: MINUS
53037: PUSH
53038: LD_VAR 0 2
53042: PUSH
53043: LD_INT 1
53045: PUSH
53046: EMPTY
53047: LIST
53048: LIST
53049: LIST
53050: PUSH
53051: LD_VAR 0 1
53055: PUSH
53056: LD_INT 4
53058: PLUS
53059: PUSH
53060: LD_VAR 0 2
53064: PUSH
53065: LD_INT 4
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: LIST
53072: PUSH
53073: LD_VAR 0 1
53077: PUSH
53078: LD_INT 3
53080: PLUS
53081: PUSH
53082: LD_VAR 0 2
53086: PUSH
53087: LD_INT 3
53089: PLUS
53090: PUSH
53091: LD_INT 5
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: LIST
53098: PUSH
53099: LD_VAR 0 1
53103: PUSH
53104: LD_VAR 0 2
53108: PUSH
53109: LD_INT 4
53111: PLUS
53112: PUSH
53113: LD_INT 0
53115: PUSH
53116: EMPTY
53117: LIST
53118: LIST
53119: LIST
53120: PUSH
53121: EMPTY
53122: LIST
53123: LIST
53124: LIST
53125: LIST
53126: LIST
53127: ST_TO_ADDR
// end ; 1 :
53128: GO 53828
53130: LD_INT 1
53132: DOUBLE
53133: EQUAL
53134: IFTRUE 53138
53136: GO 53271
53138: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
53139: LD_ADDR_VAR 0 5
53143: PUSH
53144: LD_VAR 0 1
53148: PUSH
53149: LD_VAR 0 2
53153: PUSH
53154: LD_INT 4
53156: MINUS
53157: PUSH
53158: LD_INT 3
53160: PUSH
53161: EMPTY
53162: LIST
53163: LIST
53164: LIST
53165: PUSH
53166: LD_VAR 0 1
53170: PUSH
53171: LD_INT 3
53173: MINUS
53174: PUSH
53175: LD_VAR 0 2
53179: PUSH
53180: LD_INT 3
53182: MINUS
53183: PUSH
53184: LD_INT 2
53186: PUSH
53187: EMPTY
53188: LIST
53189: LIST
53190: LIST
53191: PUSH
53192: LD_VAR 0 1
53196: PUSH
53197: LD_INT 4
53199: MINUS
53200: PUSH
53201: LD_VAR 0 2
53205: PUSH
53206: LD_INT 1
53208: PUSH
53209: EMPTY
53210: LIST
53211: LIST
53212: LIST
53213: PUSH
53214: LD_VAR 0 1
53218: PUSH
53219: LD_VAR 0 2
53223: PUSH
53224: LD_INT 3
53226: PLUS
53227: PUSH
53228: LD_INT 0
53230: PUSH
53231: EMPTY
53232: LIST
53233: LIST
53234: LIST
53235: PUSH
53236: LD_VAR 0 1
53240: PUSH
53241: LD_INT 4
53243: PLUS
53244: PUSH
53245: LD_VAR 0 2
53249: PUSH
53250: LD_INT 4
53252: PLUS
53253: PUSH
53254: LD_INT 5
53256: PUSH
53257: EMPTY
53258: LIST
53259: LIST
53260: LIST
53261: PUSH
53262: EMPTY
53263: LIST
53264: LIST
53265: LIST
53266: LIST
53267: LIST
53268: ST_TO_ADDR
// end ; 2 :
53269: GO 53828
53271: LD_INT 2
53273: DOUBLE
53274: EQUAL
53275: IFTRUE 53279
53277: GO 53408
53279: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
53280: LD_ADDR_VAR 0 5
53284: PUSH
53285: LD_VAR 0 1
53289: PUSH
53290: LD_VAR 0 2
53294: PUSH
53295: LD_INT 3
53297: MINUS
53298: PUSH
53299: LD_INT 3
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: LIST
53306: PUSH
53307: LD_VAR 0 1
53311: PUSH
53312: LD_INT 4
53314: PLUS
53315: PUSH
53316: LD_VAR 0 2
53320: PUSH
53321: LD_INT 4
53323: PUSH
53324: EMPTY
53325: LIST
53326: LIST
53327: LIST
53328: PUSH
53329: LD_VAR 0 1
53333: PUSH
53334: LD_VAR 0 2
53338: PUSH
53339: LD_INT 4
53341: PLUS
53342: PUSH
53343: LD_INT 0
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: LIST
53350: PUSH
53351: LD_VAR 0 1
53355: PUSH
53356: LD_INT 3
53358: MINUS
53359: PUSH
53360: LD_VAR 0 2
53364: PUSH
53365: LD_INT 1
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: LIST
53372: PUSH
53373: LD_VAR 0 1
53377: PUSH
53378: LD_INT 4
53380: MINUS
53381: PUSH
53382: LD_VAR 0 2
53386: PUSH
53387: LD_INT 4
53389: MINUS
53390: PUSH
53391: LD_INT 2
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: LIST
53398: PUSH
53399: EMPTY
53400: LIST
53401: LIST
53402: LIST
53403: LIST
53404: LIST
53405: ST_TO_ADDR
// end ; 3 :
53406: GO 53828
53408: LD_INT 3
53410: DOUBLE
53411: EQUAL
53412: IFTRUE 53416
53414: GO 53549
53416: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
53417: LD_ADDR_VAR 0 5
53421: PUSH
53422: LD_VAR 0 1
53426: PUSH
53427: LD_INT 3
53429: PLUS
53430: PUSH
53431: LD_VAR 0 2
53435: PUSH
53436: LD_INT 4
53438: PUSH
53439: EMPTY
53440: LIST
53441: LIST
53442: LIST
53443: PUSH
53444: LD_VAR 0 1
53448: PUSH
53449: LD_INT 4
53451: PLUS
53452: PUSH
53453: LD_VAR 0 2
53457: PUSH
53458: LD_INT 4
53460: PLUS
53461: PUSH
53462: LD_INT 5
53464: PUSH
53465: EMPTY
53466: LIST
53467: LIST
53468: LIST
53469: PUSH
53470: LD_VAR 0 1
53474: PUSH
53475: LD_INT 4
53477: MINUS
53478: PUSH
53479: LD_VAR 0 2
53483: PUSH
53484: LD_INT 1
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: LIST
53491: PUSH
53492: LD_VAR 0 1
53496: PUSH
53497: LD_VAR 0 2
53501: PUSH
53502: LD_INT 4
53504: MINUS
53505: PUSH
53506: LD_INT 3
53508: PUSH
53509: EMPTY
53510: LIST
53511: LIST
53512: LIST
53513: PUSH
53514: LD_VAR 0 1
53518: PUSH
53519: LD_INT 3
53521: MINUS
53522: PUSH
53523: LD_VAR 0 2
53527: PUSH
53528: LD_INT 3
53530: MINUS
53531: PUSH
53532: LD_INT 2
53534: PUSH
53535: EMPTY
53536: LIST
53537: LIST
53538: LIST
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: LIST
53544: LIST
53545: LIST
53546: ST_TO_ADDR
// end ; 4 :
53547: GO 53828
53549: LD_INT 4
53551: DOUBLE
53552: EQUAL
53553: IFTRUE 53557
53555: GO 53690
53557: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
53558: LD_ADDR_VAR 0 5
53562: PUSH
53563: LD_VAR 0 1
53567: PUSH
53568: LD_VAR 0 2
53572: PUSH
53573: LD_INT 4
53575: PLUS
53576: PUSH
53577: LD_INT 0
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: LIST
53584: PUSH
53585: LD_VAR 0 1
53589: PUSH
53590: LD_INT 3
53592: PLUS
53593: PUSH
53594: LD_VAR 0 2
53598: PUSH
53599: LD_INT 3
53601: PLUS
53602: PUSH
53603: LD_INT 5
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: LIST
53610: PUSH
53611: LD_VAR 0 1
53615: PUSH
53616: LD_INT 4
53618: PLUS
53619: PUSH
53620: LD_VAR 0 2
53624: PUSH
53625: LD_INT 4
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: LIST
53632: PUSH
53633: LD_VAR 0 1
53637: PUSH
53638: LD_VAR 0 2
53642: PUSH
53643: LD_INT 3
53645: MINUS
53646: PUSH
53647: LD_INT 3
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: LIST
53654: PUSH
53655: LD_VAR 0 1
53659: PUSH
53660: LD_INT 4
53662: MINUS
53663: PUSH
53664: LD_VAR 0 2
53668: PUSH
53669: LD_INT 4
53671: MINUS
53672: PUSH
53673: LD_INT 2
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: LIST
53680: PUSH
53681: EMPTY
53682: LIST
53683: LIST
53684: LIST
53685: LIST
53686: LIST
53687: ST_TO_ADDR
// end ; 5 :
53688: GO 53828
53690: LD_INT 5
53692: DOUBLE
53693: EQUAL
53694: IFTRUE 53698
53696: GO 53827
53698: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
53699: LD_ADDR_VAR 0 5
53703: PUSH
53704: LD_VAR 0 1
53708: PUSH
53709: LD_INT 4
53711: MINUS
53712: PUSH
53713: LD_VAR 0 2
53717: PUSH
53718: LD_INT 1
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: LIST
53725: PUSH
53726: LD_VAR 0 1
53730: PUSH
53731: LD_VAR 0 2
53735: PUSH
53736: LD_INT 4
53738: MINUS
53739: PUSH
53740: LD_INT 3
53742: PUSH
53743: EMPTY
53744: LIST
53745: LIST
53746: LIST
53747: PUSH
53748: LD_VAR 0 1
53752: PUSH
53753: LD_INT 4
53755: PLUS
53756: PUSH
53757: LD_VAR 0 2
53761: PUSH
53762: LD_INT 4
53764: PLUS
53765: PUSH
53766: LD_INT 5
53768: PUSH
53769: EMPTY
53770: LIST
53771: LIST
53772: LIST
53773: PUSH
53774: LD_VAR 0 1
53778: PUSH
53779: LD_INT 3
53781: PLUS
53782: PUSH
53783: LD_VAR 0 2
53787: PUSH
53788: LD_INT 4
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: LIST
53795: PUSH
53796: LD_VAR 0 1
53800: PUSH
53801: LD_VAR 0 2
53805: PUSH
53806: LD_INT 3
53808: PLUS
53809: PUSH
53810: LD_INT 0
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: LIST
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: LIST
53822: LIST
53823: LIST
53824: ST_TO_ADDR
// end ; end ;
53825: GO 53828
53827: POP
// result := list ;
53828: LD_ADDR_VAR 0 4
53832: PUSH
53833: LD_VAR 0 5
53837: ST_TO_ADDR
// end ;
53838: LD_VAR 0 4
53842: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
53843: LD_INT 0
53845: PPUSH
53846: PPUSH
53847: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
53848: LD_VAR 0 1
53852: NOT
53853: PUSH
53854: LD_VAR 0 2
53858: PUSH
53859: LD_INT 1
53861: PUSH
53862: LD_INT 2
53864: PUSH
53865: LD_INT 3
53867: PUSH
53868: LD_INT 4
53870: PUSH
53871: EMPTY
53872: LIST
53873: LIST
53874: LIST
53875: LIST
53876: IN
53877: NOT
53878: OR
53879: IFFALSE 53883
// exit ;
53881: GO 53975
// tmp := [ ] ;
53883: LD_ADDR_VAR 0 5
53887: PUSH
53888: EMPTY
53889: ST_TO_ADDR
// for i in units do
53890: LD_ADDR_VAR 0 4
53894: PUSH
53895: LD_VAR 0 1
53899: PUSH
53900: FOR_IN
53901: IFFALSE 53944
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
53903: LD_ADDR_VAR 0 5
53907: PUSH
53908: LD_VAR 0 5
53912: PPUSH
53913: LD_VAR 0 5
53917: PUSH
53918: LD_INT 1
53920: PLUS
53921: PPUSH
53922: LD_VAR 0 4
53926: PPUSH
53927: LD_VAR 0 2
53931: PPUSH
53932: CALL_OW 259
53936: PPUSH
53937: CALL_OW 2
53941: ST_TO_ADDR
53942: GO 53900
53944: POP
53945: POP
// if not tmp then
53946: LD_VAR 0 5
53950: NOT
53951: IFFALSE 53955
// exit ;
53953: GO 53975
// result := SortListByListDesc ( units , tmp ) ;
53955: LD_ADDR_VAR 0 3
53959: PUSH
53960: LD_VAR 0 1
53964: PPUSH
53965: LD_VAR 0 5
53969: PPUSH
53970: CALL_OW 77
53974: ST_TO_ADDR
// end ;
53975: LD_VAR 0 3
53979: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
53980: LD_INT 0
53982: PPUSH
53983: PPUSH
53984: PPUSH
// x := GetX ( building ) ;
53985: LD_ADDR_VAR 0 4
53989: PUSH
53990: LD_VAR 0 2
53994: PPUSH
53995: CALL_OW 250
53999: ST_TO_ADDR
// y := GetY ( building ) ;
54000: LD_ADDR_VAR 0 5
54004: PUSH
54005: LD_VAR 0 2
54009: PPUSH
54010: CALL_OW 251
54014: ST_TO_ADDR
// if GetTaskList ( unit ) then
54015: LD_VAR 0 1
54019: PPUSH
54020: CALL_OW 437
54024: IFFALSE 54119
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
54026: LD_STRING e
54028: PUSH
54029: LD_VAR 0 1
54033: PPUSH
54034: CALL_OW 437
54038: PUSH
54039: LD_INT 1
54041: ARRAY
54042: PUSH
54043: LD_INT 1
54045: ARRAY
54046: EQUAL
54047: PUSH
54048: LD_VAR 0 4
54052: PUSH
54053: LD_VAR 0 1
54057: PPUSH
54058: CALL_OW 437
54062: PUSH
54063: LD_INT 1
54065: ARRAY
54066: PUSH
54067: LD_INT 2
54069: ARRAY
54070: EQUAL
54071: AND
54072: PUSH
54073: LD_VAR 0 5
54077: PUSH
54078: LD_VAR 0 1
54082: PPUSH
54083: CALL_OW 437
54087: PUSH
54088: LD_INT 1
54090: ARRAY
54091: PUSH
54092: LD_INT 3
54094: ARRAY
54095: EQUAL
54096: AND
54097: IFFALSE 54109
// result := true else
54099: LD_ADDR_VAR 0 3
54103: PUSH
54104: LD_INT 1
54106: ST_TO_ADDR
54107: GO 54117
// result := false ;
54109: LD_ADDR_VAR 0 3
54113: PUSH
54114: LD_INT 0
54116: ST_TO_ADDR
// end else
54117: GO 54127
// result := false ;
54119: LD_ADDR_VAR 0 3
54123: PUSH
54124: LD_INT 0
54126: ST_TO_ADDR
// end ;
54127: LD_VAR 0 3
54131: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
54132: LD_INT 0
54134: PPUSH
54135: PPUSH
54136: PPUSH
54137: PPUSH
// if not unit or not area then
54138: LD_VAR 0 1
54142: NOT
54143: PUSH
54144: LD_VAR 0 2
54148: NOT
54149: OR
54150: IFFALSE 54154
// exit ;
54152: GO 54318
// tmp := AreaToList ( area , i ) ;
54154: LD_ADDR_VAR 0 6
54158: PUSH
54159: LD_VAR 0 2
54163: PPUSH
54164: LD_VAR 0 5
54168: PPUSH
54169: CALL_OW 517
54173: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
54174: LD_ADDR_VAR 0 5
54178: PUSH
54179: DOUBLE
54180: LD_INT 1
54182: DEC
54183: ST_TO_ADDR
54184: LD_VAR 0 6
54188: PUSH
54189: LD_INT 1
54191: ARRAY
54192: PUSH
54193: FOR_TO
54194: IFFALSE 54316
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
54196: LD_ADDR_VAR 0 7
54200: PUSH
54201: LD_VAR 0 6
54205: PUSH
54206: LD_INT 1
54208: ARRAY
54209: PUSH
54210: LD_VAR 0 5
54214: ARRAY
54215: PUSH
54216: LD_VAR 0 6
54220: PUSH
54221: LD_INT 2
54223: ARRAY
54224: PUSH
54225: LD_VAR 0 5
54229: ARRAY
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
54235: LD_VAR 0 7
54239: PUSH
54240: LD_INT 1
54242: ARRAY
54243: PPUSH
54244: LD_VAR 0 7
54248: PUSH
54249: LD_INT 2
54251: ARRAY
54252: PPUSH
54253: CALL_OW 428
54257: PUSH
54258: LD_INT 0
54260: EQUAL
54261: IFFALSE 54314
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
54263: LD_VAR 0 1
54267: PPUSH
54268: LD_VAR 0 7
54272: PUSH
54273: LD_INT 1
54275: ARRAY
54276: PPUSH
54277: LD_VAR 0 7
54281: PUSH
54282: LD_INT 2
54284: ARRAY
54285: PPUSH
54286: LD_VAR 0 3
54290: PPUSH
54291: CALL_OW 48
// result := IsPlaced ( unit ) ;
54295: LD_ADDR_VAR 0 4
54299: PUSH
54300: LD_VAR 0 1
54304: PPUSH
54305: CALL_OW 305
54309: ST_TO_ADDR
// exit ;
54310: POP
54311: POP
54312: GO 54318
// end ; end ;
54314: GO 54193
54316: POP
54317: POP
// end ;
54318: LD_VAR 0 4
54322: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
54323: LD_INT 0
54325: PPUSH
54326: PPUSH
54327: PPUSH
// if not side or side > 8 then
54328: LD_VAR 0 1
54332: NOT
54333: PUSH
54334: LD_VAR 0 1
54338: PUSH
54339: LD_INT 8
54341: GREATER
54342: OR
54343: IFFALSE 54347
// exit ;
54345: GO 54534
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
54347: LD_ADDR_VAR 0 4
54351: PUSH
54352: LD_INT 22
54354: PUSH
54355: LD_VAR 0 1
54359: PUSH
54360: EMPTY
54361: LIST
54362: LIST
54363: PUSH
54364: LD_INT 21
54366: PUSH
54367: LD_INT 3
54369: PUSH
54370: EMPTY
54371: LIST
54372: LIST
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PPUSH
54378: CALL_OW 69
54382: ST_TO_ADDR
// if not tmp then
54383: LD_VAR 0 4
54387: NOT
54388: IFFALSE 54392
// exit ;
54390: GO 54534
// enable_addtolog := true ;
54392: LD_ADDR_OWVAR 81
54396: PUSH
54397: LD_INT 1
54399: ST_TO_ADDR
// AddToLog ( [ ) ;
54400: LD_STRING [
54402: PPUSH
54403: CALL_OW 561
// for i in tmp do
54407: LD_ADDR_VAR 0 3
54411: PUSH
54412: LD_VAR 0 4
54416: PUSH
54417: FOR_IN
54418: IFFALSE 54525
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
54420: LD_STRING [
54422: PUSH
54423: LD_VAR 0 3
54427: PPUSH
54428: CALL_OW 266
54432: STR
54433: PUSH
54434: LD_STRING , 
54436: STR
54437: PUSH
54438: LD_VAR 0 3
54442: PPUSH
54443: CALL_OW 250
54447: STR
54448: PUSH
54449: LD_STRING , 
54451: STR
54452: PUSH
54453: LD_VAR 0 3
54457: PPUSH
54458: CALL_OW 251
54462: STR
54463: PUSH
54464: LD_STRING , 
54466: STR
54467: PUSH
54468: LD_VAR 0 3
54472: PPUSH
54473: CALL_OW 254
54477: STR
54478: PUSH
54479: LD_STRING , 
54481: STR
54482: PUSH
54483: LD_VAR 0 3
54487: PPUSH
54488: LD_INT 1
54490: PPUSH
54491: CALL_OW 268
54495: STR
54496: PUSH
54497: LD_STRING , 
54499: STR
54500: PUSH
54501: LD_VAR 0 3
54505: PPUSH
54506: LD_INT 2
54508: PPUSH
54509: CALL_OW 268
54513: STR
54514: PUSH
54515: LD_STRING ],
54517: STR
54518: PPUSH
54519: CALL_OW 561
// end ;
54523: GO 54417
54525: POP
54526: POP
// AddToLog ( ]; ) ;
54527: LD_STRING ];
54529: PPUSH
54530: CALL_OW 561
// end ;
54534: LD_VAR 0 2
54538: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
54539: LD_INT 0
54541: PPUSH
54542: PPUSH
54543: PPUSH
54544: PPUSH
54545: PPUSH
// if not area or not rate or not max then
54546: LD_VAR 0 1
54550: NOT
54551: PUSH
54552: LD_VAR 0 2
54556: NOT
54557: OR
54558: PUSH
54559: LD_VAR 0 4
54563: NOT
54564: OR
54565: IFFALSE 54569
// exit ;
54567: GO 54761
// while 1 do
54569: LD_INT 1
54571: IFFALSE 54761
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
54573: LD_ADDR_VAR 0 9
54577: PUSH
54578: LD_VAR 0 1
54582: PPUSH
54583: LD_INT 1
54585: PPUSH
54586: CALL_OW 287
54590: PUSH
54591: LD_INT 10
54593: MUL
54594: ST_TO_ADDR
// r := rate / 10 ;
54595: LD_ADDR_VAR 0 7
54599: PUSH
54600: LD_VAR 0 2
54604: PUSH
54605: LD_INT 10
54607: DIVREAL
54608: ST_TO_ADDR
// time := 1 1$00 ;
54609: LD_ADDR_VAR 0 8
54613: PUSH
54614: LD_INT 2100
54616: ST_TO_ADDR
// if amount < min then
54617: LD_VAR 0 9
54621: PUSH
54622: LD_VAR 0 3
54626: LESS
54627: IFFALSE 54645
// r := r * 2 else
54629: LD_ADDR_VAR 0 7
54633: PUSH
54634: LD_VAR 0 7
54638: PUSH
54639: LD_INT 2
54641: MUL
54642: ST_TO_ADDR
54643: GO 54671
// if amount > max then
54645: LD_VAR 0 9
54649: PUSH
54650: LD_VAR 0 4
54654: GREATER
54655: IFFALSE 54671
// r := r / 2 ;
54657: LD_ADDR_VAR 0 7
54661: PUSH
54662: LD_VAR 0 7
54666: PUSH
54667: LD_INT 2
54669: DIVREAL
54670: ST_TO_ADDR
// time := time / r ;
54671: LD_ADDR_VAR 0 8
54675: PUSH
54676: LD_VAR 0 8
54680: PUSH
54681: LD_VAR 0 7
54685: DIVREAL
54686: ST_TO_ADDR
// if time < 0 then
54687: LD_VAR 0 8
54691: PUSH
54692: LD_INT 0
54694: LESS
54695: IFFALSE 54712
// time := time * - 1 ;
54697: LD_ADDR_VAR 0 8
54701: PUSH
54702: LD_VAR 0 8
54706: PUSH
54707: LD_INT 1
54709: NEG
54710: MUL
54711: ST_TO_ADDR
// wait ( time ) ;
54712: LD_VAR 0 8
54716: PPUSH
54717: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
54721: LD_INT 35
54723: PPUSH
54724: LD_INT 875
54726: PPUSH
54727: CALL_OW 12
54731: PPUSH
54732: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
54736: LD_INT 1
54738: PPUSH
54739: LD_INT 5
54741: PPUSH
54742: CALL_OW 12
54746: PPUSH
54747: LD_VAR 0 1
54751: PPUSH
54752: LD_INT 1
54754: PPUSH
54755: CALL_OW 55
// end ;
54759: GO 54569
// end ;
54761: LD_VAR 0 5
54765: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
54766: LD_INT 0
54768: PPUSH
54769: PPUSH
54770: PPUSH
54771: PPUSH
54772: PPUSH
54773: PPUSH
54774: PPUSH
54775: PPUSH
// if not turrets or not factories then
54776: LD_VAR 0 1
54780: NOT
54781: PUSH
54782: LD_VAR 0 2
54786: NOT
54787: OR
54788: IFFALSE 54792
// exit ;
54790: GO 55099
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
54792: LD_ADDR_VAR 0 10
54796: PUSH
54797: LD_INT 5
54799: PUSH
54800: LD_INT 6
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: PUSH
54807: LD_INT 2
54809: PUSH
54810: LD_INT 4
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: LD_INT 3
54819: PUSH
54820: LD_INT 5
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: LIST
54831: PUSH
54832: LD_INT 24
54834: PUSH
54835: LD_INT 25
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: PUSH
54842: LD_INT 23
54844: PUSH
54845: LD_INT 27
54847: PUSH
54848: EMPTY
54849: LIST
54850: LIST
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PUSH
54856: LD_INT 42
54858: PUSH
54859: LD_INT 43
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: LD_INT 44
54868: PUSH
54869: LD_INT 46
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: PUSH
54876: LD_INT 45
54878: PUSH
54879: LD_INT 47
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: LIST
54890: PUSH
54891: EMPTY
54892: LIST
54893: LIST
54894: LIST
54895: ST_TO_ADDR
// result := [ ] ;
54896: LD_ADDR_VAR 0 3
54900: PUSH
54901: EMPTY
54902: ST_TO_ADDR
// for i in turrets do
54903: LD_ADDR_VAR 0 4
54907: PUSH
54908: LD_VAR 0 1
54912: PUSH
54913: FOR_IN
54914: IFFALSE 55097
// begin nat := GetNation ( i ) ;
54916: LD_ADDR_VAR 0 7
54920: PUSH
54921: LD_VAR 0 4
54925: PPUSH
54926: CALL_OW 248
54930: ST_TO_ADDR
// weapon := 0 ;
54931: LD_ADDR_VAR 0 8
54935: PUSH
54936: LD_INT 0
54938: ST_TO_ADDR
// if not nat then
54939: LD_VAR 0 7
54943: NOT
54944: IFFALSE 54948
// continue ;
54946: GO 54913
// for j in list [ nat ] do
54948: LD_ADDR_VAR 0 5
54952: PUSH
54953: LD_VAR 0 10
54957: PUSH
54958: LD_VAR 0 7
54962: ARRAY
54963: PUSH
54964: FOR_IN
54965: IFFALSE 55006
// if GetBWeapon ( i ) = j [ 1 ] then
54967: LD_VAR 0 4
54971: PPUSH
54972: CALL_OW 269
54976: PUSH
54977: LD_VAR 0 5
54981: PUSH
54982: LD_INT 1
54984: ARRAY
54985: EQUAL
54986: IFFALSE 55004
// begin weapon := j [ 2 ] ;
54988: LD_ADDR_VAR 0 8
54992: PUSH
54993: LD_VAR 0 5
54997: PUSH
54998: LD_INT 2
55000: ARRAY
55001: ST_TO_ADDR
// break ;
55002: GO 55006
// end ;
55004: GO 54964
55006: POP
55007: POP
// if not weapon then
55008: LD_VAR 0 8
55012: NOT
55013: IFFALSE 55017
// continue ;
55015: GO 54913
// for k in factories do
55017: LD_ADDR_VAR 0 6
55021: PUSH
55022: LD_VAR 0 2
55026: PUSH
55027: FOR_IN
55028: IFFALSE 55093
// begin weapons := AvailableWeaponList ( k ) ;
55030: LD_ADDR_VAR 0 9
55034: PUSH
55035: LD_VAR 0 6
55039: PPUSH
55040: CALL_OW 478
55044: ST_TO_ADDR
// if not weapons then
55045: LD_VAR 0 9
55049: NOT
55050: IFFALSE 55054
// continue ;
55052: GO 55027
// if weapon in weapons then
55054: LD_VAR 0 8
55058: PUSH
55059: LD_VAR 0 9
55063: IN
55064: IFFALSE 55091
// begin result := [ i , weapon ] ;
55066: LD_ADDR_VAR 0 3
55070: PUSH
55071: LD_VAR 0 4
55075: PUSH
55076: LD_VAR 0 8
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: ST_TO_ADDR
// exit ;
55085: POP
55086: POP
55087: POP
55088: POP
55089: GO 55099
// end ; end ;
55091: GO 55027
55093: POP
55094: POP
// end ;
55095: GO 54913
55097: POP
55098: POP
// end ;
55099: LD_VAR 0 3
55103: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
55104: LD_INT 0
55106: PPUSH
// if not side or side > 8 then
55107: LD_VAR 0 3
55111: NOT
55112: PUSH
55113: LD_VAR 0 3
55117: PUSH
55118: LD_INT 8
55120: GREATER
55121: OR
55122: IFFALSE 55126
// exit ;
55124: GO 55185
// if not range then
55126: LD_VAR 0 4
55130: NOT
55131: IFFALSE 55142
// range := - 12 ;
55133: LD_ADDR_VAR 0 4
55137: PUSH
55138: LD_INT 12
55140: NEG
55141: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
55142: LD_VAR 0 1
55146: PPUSH
55147: LD_VAR 0 2
55151: PPUSH
55152: LD_VAR 0 3
55156: PPUSH
55157: LD_VAR 0 4
55161: PPUSH
55162: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
55166: LD_VAR 0 1
55170: PPUSH
55171: LD_VAR 0 2
55175: PPUSH
55176: LD_VAR 0 3
55180: PPUSH
55181: CALL_OW 331
// end ;
55185: LD_VAR 0 5
55189: RET
// export function Video ( mode ) ; begin
55190: LD_INT 0
55192: PPUSH
// ingame_video = mode ;
55193: LD_ADDR_OWVAR 52
55197: PUSH
55198: LD_VAR 0 1
55202: ST_TO_ADDR
// interface_hidden = mode ;
55203: LD_ADDR_OWVAR 54
55207: PUSH
55208: LD_VAR 0 1
55212: ST_TO_ADDR
// end ;
55213: LD_VAR 0 2
55217: RET
// export function Join ( array , element ) ; begin
55218: LD_INT 0
55220: PPUSH
// result := Replace ( array , array + 1 , element ) ;
55221: LD_ADDR_VAR 0 3
55225: PUSH
55226: LD_VAR 0 1
55230: PPUSH
55231: LD_VAR 0 1
55235: PUSH
55236: LD_INT 1
55238: PLUS
55239: PPUSH
55240: LD_VAR 0 2
55244: PPUSH
55245: CALL_OW 1
55249: ST_TO_ADDR
// end ;
55250: LD_VAR 0 3
55254: RET
// export function JoinUnion ( array , element ) ; begin
55255: LD_INT 0
55257: PPUSH
// result := array union element ;
55258: LD_ADDR_VAR 0 3
55262: PUSH
55263: LD_VAR 0 1
55267: PUSH
55268: LD_VAR 0 2
55272: UNION
55273: ST_TO_ADDR
// end ;
55274: LD_VAR 0 3
55278: RET
// export function GetBehemoths ( side ) ; begin
55279: LD_INT 0
55281: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
55282: LD_ADDR_VAR 0 2
55286: PUSH
55287: LD_INT 22
55289: PUSH
55290: LD_VAR 0 1
55294: PUSH
55295: EMPTY
55296: LIST
55297: LIST
55298: PUSH
55299: LD_INT 31
55301: PUSH
55302: LD_INT 25
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: PPUSH
55313: CALL_OW 69
55317: ST_TO_ADDR
// end ;
55318: LD_VAR 0 2
55322: RET
// export function Shuffle ( array ) ; var i , index ; begin
55323: LD_INT 0
55325: PPUSH
55326: PPUSH
55327: PPUSH
// result := [ ] ;
55328: LD_ADDR_VAR 0 2
55332: PUSH
55333: EMPTY
55334: ST_TO_ADDR
// if not array then
55335: LD_VAR 0 1
55339: NOT
55340: IFFALSE 55344
// exit ;
55342: GO 55443
// Randomize ;
55344: CALL_OW 10
// for i = array downto 1 do
55348: LD_ADDR_VAR 0 3
55352: PUSH
55353: DOUBLE
55354: LD_VAR 0 1
55358: INC
55359: ST_TO_ADDR
55360: LD_INT 1
55362: PUSH
55363: FOR_DOWNTO
55364: IFFALSE 55441
// begin index := rand ( 1 , array ) ;
55366: LD_ADDR_VAR 0 4
55370: PUSH
55371: LD_INT 1
55373: PPUSH
55374: LD_VAR 0 1
55378: PPUSH
55379: CALL_OW 12
55383: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
55384: LD_ADDR_VAR 0 2
55388: PUSH
55389: LD_VAR 0 2
55393: PPUSH
55394: LD_VAR 0 2
55398: PUSH
55399: LD_INT 1
55401: PLUS
55402: PPUSH
55403: LD_VAR 0 1
55407: PUSH
55408: LD_VAR 0 4
55412: ARRAY
55413: PPUSH
55414: CALL_OW 2
55418: ST_TO_ADDR
// array := Delete ( array , index ) ;
55419: LD_ADDR_VAR 0 1
55423: PUSH
55424: LD_VAR 0 1
55428: PPUSH
55429: LD_VAR 0 4
55433: PPUSH
55434: CALL_OW 3
55438: ST_TO_ADDR
// end ;
55439: GO 55363
55441: POP
55442: POP
// end ;
55443: LD_VAR 0 2
55447: RET
// export function GetBaseMaterials ( base ) ; begin
55448: LD_INT 0
55450: PPUSH
// result := [ 0 , 0 , 0 ] ;
55451: LD_ADDR_VAR 0 2
55455: PUSH
55456: LD_INT 0
55458: PUSH
55459: LD_INT 0
55461: PUSH
55462: LD_INT 0
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: LIST
55469: ST_TO_ADDR
// if not base then
55470: LD_VAR 0 1
55474: NOT
55475: IFFALSE 55479
// exit ;
55477: GO 55528
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
55479: LD_ADDR_VAR 0 2
55483: PUSH
55484: LD_VAR 0 1
55488: PPUSH
55489: LD_INT 1
55491: PPUSH
55492: CALL_OW 275
55496: PUSH
55497: LD_VAR 0 1
55501: PPUSH
55502: LD_INT 2
55504: PPUSH
55505: CALL_OW 275
55509: PUSH
55510: LD_VAR 0 1
55514: PPUSH
55515: LD_INT 3
55517: PPUSH
55518: CALL_OW 275
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: LIST
55527: ST_TO_ADDR
// end ;
55528: LD_VAR 0 2
55532: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
55533: LD_INT 0
55535: PPUSH
55536: PPUSH
// result := array ;
55537: LD_ADDR_VAR 0 3
55541: PUSH
55542: LD_VAR 0 1
55546: ST_TO_ADDR
// if size > 0 then
55547: LD_VAR 0 2
55551: PUSH
55552: LD_INT 0
55554: GREATER
55555: IFFALSE 55601
// for i := array downto size do
55557: LD_ADDR_VAR 0 4
55561: PUSH
55562: DOUBLE
55563: LD_VAR 0 1
55567: INC
55568: ST_TO_ADDR
55569: LD_VAR 0 2
55573: PUSH
55574: FOR_DOWNTO
55575: IFFALSE 55599
// result := Delete ( result , result ) ;
55577: LD_ADDR_VAR 0 3
55581: PUSH
55582: LD_VAR 0 3
55586: PPUSH
55587: LD_VAR 0 3
55591: PPUSH
55592: CALL_OW 3
55596: ST_TO_ADDR
55597: GO 55574
55599: POP
55600: POP
// end ;
55601: LD_VAR 0 3
55605: RET
// export function ComExit ( unit ) ; var tmp ; begin
55606: LD_INT 0
55608: PPUSH
55609: PPUSH
// if not IsInUnit ( unit ) then
55610: LD_VAR 0 1
55614: PPUSH
55615: CALL_OW 310
55619: NOT
55620: IFFALSE 55624
// exit ;
55622: GO 55684
// tmp := IsInUnit ( unit ) ;
55624: LD_ADDR_VAR 0 3
55628: PUSH
55629: LD_VAR 0 1
55633: PPUSH
55634: CALL_OW 310
55638: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
55639: LD_VAR 0 3
55643: PPUSH
55644: CALL_OW 247
55648: PUSH
55649: LD_INT 2
55651: EQUAL
55652: IFFALSE 55665
// ComExitVehicle ( unit ) else
55654: LD_VAR 0 1
55658: PPUSH
55659: CALL_OW 121
55663: GO 55674
// ComExitBuilding ( unit ) ;
55665: LD_VAR 0 1
55669: PPUSH
55670: CALL_OW 122
// result := tmp ;
55674: LD_ADDR_VAR 0 2
55678: PUSH
55679: LD_VAR 0 3
55683: ST_TO_ADDR
// end ;
55684: LD_VAR 0 2
55688: RET
// export function ResetHc ; begin
55689: LD_INT 0
55691: PPUSH
// InitHc ;
55692: CALL_OW 19
// hc_importance := 0 ;
55696: LD_ADDR_OWVAR 32
55700: PUSH
55701: LD_INT 0
55703: ST_TO_ADDR
// end ; end_of_file
55704: LD_VAR 0 1
55708: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
55709: LD_INT 0
55711: PPUSH
// ar_crane := 88 ;
55712: LD_ADDR_EXP 35
55716: PUSH
55717: LD_INT 88
55719: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
55720: LD_ADDR_EXP 30
55724: PUSH
55725: LD_INT 89
55727: ST_TO_ADDR
// us_hack := 99 ;
55728: LD_ADDR_EXP 31
55732: PUSH
55733: LD_INT 99
55735: ST_TO_ADDR
// us_artillery := 97 ;
55736: LD_ADDR_EXP 32
55740: PUSH
55741: LD_INT 97
55743: ST_TO_ADDR
// ar_bio_bomb := 91 ;
55744: LD_ADDR_EXP 33
55748: PUSH
55749: LD_INT 91
55751: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
55752: LD_ADDR_EXP 34
55756: PUSH
55757: LD_INT 92
55759: ST_TO_ADDR
// ru_radar := 98 ;
55760: LD_ADDR_EXP 29
55764: PUSH
55765: LD_INT 98
55767: ST_TO_ADDR
// tech_Artillery := 80 ;
55768: LD_ADDR_EXP 36
55772: PUSH
55773: LD_INT 80
55775: ST_TO_ADDR
// tech_RadMat := 81 ;
55776: LD_ADDR_EXP 37
55780: PUSH
55781: LD_INT 81
55783: ST_TO_ADDR
// tech_BasicTools := 82 ;
55784: LD_ADDR_EXP 38
55788: PUSH
55789: LD_INT 82
55791: ST_TO_ADDR
// tech_Cargo := 83 ;
55792: LD_ADDR_EXP 39
55796: PUSH
55797: LD_INT 83
55799: ST_TO_ADDR
// tech_Track := 84 ;
55800: LD_ADDR_EXP 40
55804: PUSH
55805: LD_INT 84
55807: ST_TO_ADDR
// tech_Crane := 85 ;
55808: LD_ADDR_EXP 41
55812: PUSH
55813: LD_INT 85
55815: ST_TO_ADDR
// tech_Bulldozer := 86 ;
55816: LD_ADDR_EXP 42
55820: PUSH
55821: LD_INT 86
55823: ST_TO_ADDR
// tech_Hovercraft := 87 ;
55824: LD_ADDR_EXP 43
55828: PUSH
55829: LD_INT 87
55831: ST_TO_ADDR
// end ;
55832: LD_VAR 0 1
55836: RET
// every 1 do
55837: GO 55839
55839: DISABLE
// InitGlobalVariables ; end_of_file
55840: CALL 55709 0 0
55844: END
// export skirmish , debug_mc ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_teleport_exit_set , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver , mc_class , mc_class_case_use ; export function InitMacro ; var i ; begin
55845: LD_INT 0
55847: PPUSH
55848: PPUSH
// skirmish := false ;
55849: LD_ADDR_EXP 44
55853: PUSH
55854: LD_INT 0
55856: ST_TO_ADDR
// debug_mc := false ;
55857: LD_ADDR_EXP 45
55861: PUSH
55862: LD_INT 0
55864: ST_TO_ADDR
// mc_bases := [ ] ;
55865: LD_ADDR_EXP 46
55869: PUSH
55870: EMPTY
55871: ST_TO_ADDR
// mc_sides := [ ] ;
55872: LD_ADDR_EXP 72
55876: PUSH
55877: EMPTY
55878: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
55879: LD_ADDR_EXP 47
55883: PUSH
55884: EMPTY
55885: ST_TO_ADDR
// mc_building_repairs := [ ] ;
55886: LD_ADDR_EXP 48
55890: PUSH
55891: EMPTY
55892: ST_TO_ADDR
// mc_need_heal := [ ] ;
55893: LD_ADDR_EXP 49
55897: PUSH
55898: EMPTY
55899: ST_TO_ADDR
// mc_healers := [ ] ;
55900: LD_ADDR_EXP 50
55904: PUSH
55905: EMPTY
55906: ST_TO_ADDR
// mc_build_list := [ ] ;
55907: LD_ADDR_EXP 51
55911: PUSH
55912: EMPTY
55913: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
55914: LD_ADDR_EXP 78
55918: PUSH
55919: EMPTY
55920: ST_TO_ADDR
// mc_builders := [ ] ;
55921: LD_ADDR_EXP 52
55925: PUSH
55926: EMPTY
55927: ST_TO_ADDR
// mc_construct_list := [ ] ;
55928: LD_ADDR_EXP 53
55932: PUSH
55933: EMPTY
55934: ST_TO_ADDR
// mc_turret_list := [ ] ;
55935: LD_ADDR_EXP 54
55939: PUSH
55940: EMPTY
55941: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
55942: LD_ADDR_EXP 55
55946: PUSH
55947: EMPTY
55948: ST_TO_ADDR
// mc_miners := [ ] ;
55949: LD_ADDR_EXP 60
55953: PUSH
55954: EMPTY
55955: ST_TO_ADDR
// mc_mines := [ ] ;
55956: LD_ADDR_EXP 59
55960: PUSH
55961: EMPTY
55962: ST_TO_ADDR
// mc_minefields := [ ] ;
55963: LD_ADDR_EXP 61
55967: PUSH
55968: EMPTY
55969: ST_TO_ADDR
// mc_crates := [ ] ;
55970: LD_ADDR_EXP 62
55974: PUSH
55975: EMPTY
55976: ST_TO_ADDR
// mc_crates_collector := [ ] ;
55977: LD_ADDR_EXP 63
55981: PUSH
55982: EMPTY
55983: ST_TO_ADDR
// mc_crates_area := [ ] ;
55984: LD_ADDR_EXP 64
55988: PUSH
55989: EMPTY
55990: ST_TO_ADDR
// mc_vehicles := [ ] ;
55991: LD_ADDR_EXP 65
55995: PUSH
55996: EMPTY
55997: ST_TO_ADDR
// mc_attack := [ ] ;
55998: LD_ADDR_EXP 66
56002: PUSH
56003: EMPTY
56004: ST_TO_ADDR
// mc_produce := [ ] ;
56005: LD_ADDR_EXP 67
56009: PUSH
56010: EMPTY
56011: ST_TO_ADDR
// mc_defender := [ ] ;
56012: LD_ADDR_EXP 68
56016: PUSH
56017: EMPTY
56018: ST_TO_ADDR
// mc_parking := [ ] ;
56019: LD_ADDR_EXP 70
56023: PUSH
56024: EMPTY
56025: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
56026: LD_ADDR_EXP 56
56030: PUSH
56031: EMPTY
56032: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
56033: LD_ADDR_EXP 58
56037: PUSH
56038: EMPTY
56039: ST_TO_ADDR
// mc_scan := [ ] ;
56040: LD_ADDR_EXP 69
56044: PUSH
56045: EMPTY
56046: ST_TO_ADDR
// mc_scan_area := [ ] ;
56047: LD_ADDR_EXP 71
56051: PUSH
56052: EMPTY
56053: ST_TO_ADDR
// mc_tech := [ ] ;
56054: LD_ADDR_EXP 73
56058: PUSH
56059: EMPTY
56060: ST_TO_ADDR
// mc_class := [ ] ;
56061: LD_ADDR_EXP 87
56065: PUSH
56066: EMPTY
56067: ST_TO_ADDR
// mc_class_case_use := [ ] ;
56068: LD_ADDR_EXP 88
56072: PUSH
56073: EMPTY
56074: ST_TO_ADDR
// end ;
56075: LD_VAR 0 1
56079: RET
// export function MC_Kill ( base ) ; begin
56080: LD_INT 0
56082: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
56083: LD_ADDR_EXP 46
56087: PUSH
56088: LD_EXP 46
56092: PPUSH
56093: LD_VAR 0 1
56097: PPUSH
56098: EMPTY
56099: PPUSH
56100: CALL_OW 1
56104: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
56105: LD_ADDR_EXP 47
56109: PUSH
56110: LD_EXP 47
56114: PPUSH
56115: LD_VAR 0 1
56119: PPUSH
56120: EMPTY
56121: PPUSH
56122: CALL_OW 1
56126: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
56127: LD_ADDR_EXP 48
56131: PUSH
56132: LD_EXP 48
56136: PPUSH
56137: LD_VAR 0 1
56141: PPUSH
56142: EMPTY
56143: PPUSH
56144: CALL_OW 1
56148: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
56149: LD_ADDR_EXP 49
56153: PUSH
56154: LD_EXP 49
56158: PPUSH
56159: LD_VAR 0 1
56163: PPUSH
56164: EMPTY
56165: PPUSH
56166: CALL_OW 1
56170: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
56171: LD_ADDR_EXP 50
56175: PUSH
56176: LD_EXP 50
56180: PPUSH
56181: LD_VAR 0 1
56185: PPUSH
56186: EMPTY
56187: PPUSH
56188: CALL_OW 1
56192: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
56193: LD_ADDR_EXP 51
56197: PUSH
56198: LD_EXP 51
56202: PPUSH
56203: LD_VAR 0 1
56207: PPUSH
56208: EMPTY
56209: PPUSH
56210: CALL_OW 1
56214: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
56215: LD_ADDR_EXP 52
56219: PUSH
56220: LD_EXP 52
56224: PPUSH
56225: LD_VAR 0 1
56229: PPUSH
56230: EMPTY
56231: PPUSH
56232: CALL_OW 1
56236: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
56237: LD_ADDR_EXP 53
56241: PUSH
56242: LD_EXP 53
56246: PPUSH
56247: LD_VAR 0 1
56251: PPUSH
56252: EMPTY
56253: PPUSH
56254: CALL_OW 1
56258: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
56259: LD_ADDR_EXP 54
56263: PUSH
56264: LD_EXP 54
56268: PPUSH
56269: LD_VAR 0 1
56273: PPUSH
56274: EMPTY
56275: PPUSH
56276: CALL_OW 1
56280: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
56281: LD_ADDR_EXP 55
56285: PUSH
56286: LD_EXP 55
56290: PPUSH
56291: LD_VAR 0 1
56295: PPUSH
56296: EMPTY
56297: PPUSH
56298: CALL_OW 1
56302: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
56303: LD_ADDR_EXP 56
56307: PUSH
56308: LD_EXP 56
56312: PPUSH
56313: LD_VAR 0 1
56317: PPUSH
56318: EMPTY
56319: PPUSH
56320: CALL_OW 1
56324: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
56325: LD_ADDR_EXP 57
56329: PUSH
56330: LD_EXP 57
56334: PPUSH
56335: LD_VAR 0 1
56339: PPUSH
56340: LD_INT 0
56342: PPUSH
56343: CALL_OW 1
56347: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
56348: LD_ADDR_EXP 58
56352: PUSH
56353: LD_EXP 58
56357: PPUSH
56358: LD_VAR 0 1
56362: PPUSH
56363: EMPTY
56364: PPUSH
56365: CALL_OW 1
56369: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
56370: LD_ADDR_EXP 59
56374: PUSH
56375: LD_EXP 59
56379: PPUSH
56380: LD_VAR 0 1
56384: PPUSH
56385: EMPTY
56386: PPUSH
56387: CALL_OW 1
56391: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
56392: LD_ADDR_EXP 60
56396: PUSH
56397: LD_EXP 60
56401: PPUSH
56402: LD_VAR 0 1
56406: PPUSH
56407: EMPTY
56408: PPUSH
56409: CALL_OW 1
56413: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
56414: LD_ADDR_EXP 61
56418: PUSH
56419: LD_EXP 61
56423: PPUSH
56424: LD_VAR 0 1
56428: PPUSH
56429: EMPTY
56430: PPUSH
56431: CALL_OW 1
56435: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
56436: LD_ADDR_EXP 62
56440: PUSH
56441: LD_EXP 62
56445: PPUSH
56446: LD_VAR 0 1
56450: PPUSH
56451: EMPTY
56452: PPUSH
56453: CALL_OW 1
56457: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
56458: LD_ADDR_EXP 63
56462: PUSH
56463: LD_EXP 63
56467: PPUSH
56468: LD_VAR 0 1
56472: PPUSH
56473: EMPTY
56474: PPUSH
56475: CALL_OW 1
56479: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
56480: LD_ADDR_EXP 64
56484: PUSH
56485: LD_EXP 64
56489: PPUSH
56490: LD_VAR 0 1
56494: PPUSH
56495: EMPTY
56496: PPUSH
56497: CALL_OW 1
56501: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
56502: LD_ADDR_EXP 65
56506: PUSH
56507: LD_EXP 65
56511: PPUSH
56512: LD_VAR 0 1
56516: PPUSH
56517: EMPTY
56518: PPUSH
56519: CALL_OW 1
56523: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
56524: LD_ADDR_EXP 66
56528: PUSH
56529: LD_EXP 66
56533: PPUSH
56534: LD_VAR 0 1
56538: PPUSH
56539: EMPTY
56540: PPUSH
56541: CALL_OW 1
56545: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
56546: LD_ADDR_EXP 67
56550: PUSH
56551: LD_EXP 67
56555: PPUSH
56556: LD_VAR 0 1
56560: PPUSH
56561: EMPTY
56562: PPUSH
56563: CALL_OW 1
56567: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
56568: LD_ADDR_EXP 68
56572: PUSH
56573: LD_EXP 68
56577: PPUSH
56578: LD_VAR 0 1
56582: PPUSH
56583: EMPTY
56584: PPUSH
56585: CALL_OW 1
56589: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
56590: LD_ADDR_EXP 69
56594: PUSH
56595: LD_EXP 69
56599: PPUSH
56600: LD_VAR 0 1
56604: PPUSH
56605: EMPTY
56606: PPUSH
56607: CALL_OW 1
56611: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
56612: LD_ADDR_EXP 70
56616: PUSH
56617: LD_EXP 70
56621: PPUSH
56622: LD_VAR 0 1
56626: PPUSH
56627: EMPTY
56628: PPUSH
56629: CALL_OW 1
56633: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
56634: LD_ADDR_EXP 71
56638: PUSH
56639: LD_EXP 71
56643: PPUSH
56644: LD_VAR 0 1
56648: PPUSH
56649: EMPTY
56650: PPUSH
56651: CALL_OW 1
56655: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
56656: LD_ADDR_EXP 73
56660: PUSH
56661: LD_EXP 73
56665: PPUSH
56666: LD_VAR 0 1
56670: PPUSH
56671: EMPTY
56672: PPUSH
56673: CALL_OW 1
56677: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
56678: LD_ADDR_EXP 75
56682: PUSH
56683: LD_EXP 75
56687: PPUSH
56688: LD_VAR 0 1
56692: PPUSH
56693: EMPTY
56694: PPUSH
56695: CALL_OW 1
56699: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
56700: LD_ADDR_EXP 76
56704: PUSH
56705: LD_EXP 76
56709: PPUSH
56710: LD_VAR 0 1
56714: PPUSH
56715: EMPTY
56716: PPUSH
56717: CALL_OW 1
56721: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
56722: LD_ADDR_EXP 77
56726: PUSH
56727: LD_EXP 77
56731: PPUSH
56732: LD_VAR 0 1
56736: PPUSH
56737: EMPTY
56738: PPUSH
56739: CALL_OW 1
56743: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
56744: LD_ADDR_EXP 78
56748: PUSH
56749: LD_EXP 78
56753: PPUSH
56754: LD_VAR 0 1
56758: PPUSH
56759: EMPTY
56760: PPUSH
56761: CALL_OW 1
56765: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
56766: LD_ADDR_EXP 79
56770: PUSH
56771: LD_EXP 79
56775: PPUSH
56776: LD_VAR 0 1
56780: PPUSH
56781: EMPTY
56782: PPUSH
56783: CALL_OW 1
56787: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
56788: LD_ADDR_EXP 80
56792: PUSH
56793: LD_EXP 80
56797: PPUSH
56798: LD_VAR 0 1
56802: PPUSH
56803: EMPTY
56804: PPUSH
56805: CALL_OW 1
56809: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
56810: LD_ADDR_EXP 81
56814: PUSH
56815: LD_EXP 81
56819: PPUSH
56820: LD_VAR 0 1
56824: PPUSH
56825: EMPTY
56826: PPUSH
56827: CALL_OW 1
56831: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
56832: LD_ADDR_EXP 82
56836: PUSH
56837: LD_EXP 82
56841: PPUSH
56842: LD_VAR 0 1
56846: PPUSH
56847: EMPTY
56848: PPUSH
56849: CALL_OW 1
56853: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
56854: LD_ADDR_EXP 83
56858: PUSH
56859: LD_EXP 83
56863: PPUSH
56864: LD_VAR 0 1
56868: PPUSH
56869: EMPTY
56870: PPUSH
56871: CALL_OW 1
56875: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
56876: LD_ADDR_EXP 84
56880: PUSH
56881: LD_EXP 84
56885: PPUSH
56886: LD_VAR 0 1
56890: PPUSH
56891: EMPTY
56892: PPUSH
56893: CALL_OW 1
56897: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
56898: LD_ADDR_EXP 85
56902: PUSH
56903: LD_EXP 85
56907: PPUSH
56908: LD_VAR 0 1
56912: PPUSH
56913: EMPTY
56914: PPUSH
56915: CALL_OW 1
56919: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
56920: LD_ADDR_EXP 86
56924: PUSH
56925: LD_EXP 86
56929: PPUSH
56930: LD_VAR 0 1
56934: PPUSH
56935: EMPTY
56936: PPUSH
56937: CALL_OW 1
56941: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
56942: LD_ADDR_EXP 87
56946: PUSH
56947: LD_EXP 87
56951: PPUSH
56952: LD_VAR 0 1
56956: PPUSH
56957: EMPTY
56958: PPUSH
56959: CALL_OW 1
56963: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
56964: LD_ADDR_EXP 88
56968: PUSH
56969: LD_EXP 88
56973: PPUSH
56974: LD_VAR 0 1
56978: PPUSH
56979: LD_INT 0
56981: PPUSH
56982: CALL_OW 1
56986: ST_TO_ADDR
// end ;
56987: LD_VAR 0 2
56991: RET
// export function MC_Add ( side , units ) ; var base ; begin
56992: LD_INT 0
56994: PPUSH
56995: PPUSH
// base := mc_bases + 1 ;
56996: LD_ADDR_VAR 0 4
57000: PUSH
57001: LD_EXP 46
57005: PUSH
57006: LD_INT 1
57008: PLUS
57009: ST_TO_ADDR
// mc_sides := Replace ( mc_sides , base , side ) ;
57010: LD_ADDR_EXP 72
57014: PUSH
57015: LD_EXP 72
57019: PPUSH
57020: LD_VAR 0 4
57024: PPUSH
57025: LD_VAR 0 1
57029: PPUSH
57030: CALL_OW 1
57034: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , base , units ) ;
57035: LD_ADDR_EXP 46
57039: PUSH
57040: LD_EXP 46
57044: PPUSH
57045: LD_VAR 0 4
57049: PPUSH
57050: LD_VAR 0 2
57054: PPUSH
57055: CALL_OW 1
57059: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
57060: LD_ADDR_EXP 47
57064: PUSH
57065: LD_EXP 47
57069: PPUSH
57070: LD_VAR 0 4
57074: PPUSH
57075: EMPTY
57076: PPUSH
57077: CALL_OW 1
57081: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
57082: LD_ADDR_EXP 48
57086: PUSH
57087: LD_EXP 48
57091: PPUSH
57092: LD_VAR 0 4
57096: PPUSH
57097: EMPTY
57098: PPUSH
57099: CALL_OW 1
57103: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
57104: LD_ADDR_EXP 49
57108: PUSH
57109: LD_EXP 49
57113: PPUSH
57114: LD_VAR 0 4
57118: PPUSH
57119: EMPTY
57120: PPUSH
57121: CALL_OW 1
57125: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
57126: LD_ADDR_EXP 50
57130: PUSH
57131: LD_EXP 50
57135: PPUSH
57136: LD_VAR 0 4
57140: PPUSH
57141: EMPTY
57142: PPUSH
57143: CALL_OW 1
57147: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
57148: LD_ADDR_EXP 51
57152: PUSH
57153: LD_EXP 51
57157: PPUSH
57158: LD_VAR 0 4
57162: PPUSH
57163: EMPTY
57164: PPUSH
57165: CALL_OW 1
57169: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
57170: LD_ADDR_EXP 52
57174: PUSH
57175: LD_EXP 52
57179: PPUSH
57180: LD_VAR 0 4
57184: PPUSH
57185: EMPTY
57186: PPUSH
57187: CALL_OW 1
57191: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
57192: LD_ADDR_EXP 53
57196: PUSH
57197: LD_EXP 53
57201: PPUSH
57202: LD_VAR 0 4
57206: PPUSH
57207: EMPTY
57208: PPUSH
57209: CALL_OW 1
57213: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
57214: LD_ADDR_EXP 54
57218: PUSH
57219: LD_EXP 54
57223: PPUSH
57224: LD_VAR 0 4
57228: PPUSH
57229: EMPTY
57230: PPUSH
57231: CALL_OW 1
57235: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
57236: LD_ADDR_EXP 55
57240: PUSH
57241: LD_EXP 55
57245: PPUSH
57246: LD_VAR 0 4
57250: PPUSH
57251: EMPTY
57252: PPUSH
57253: CALL_OW 1
57257: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
57258: LD_ADDR_EXP 56
57262: PUSH
57263: LD_EXP 56
57267: PPUSH
57268: LD_VAR 0 4
57272: PPUSH
57273: EMPTY
57274: PPUSH
57275: CALL_OW 1
57279: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
57280: LD_ADDR_EXP 57
57284: PUSH
57285: LD_EXP 57
57289: PPUSH
57290: LD_VAR 0 4
57294: PPUSH
57295: LD_INT 0
57297: PPUSH
57298: CALL_OW 1
57302: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
57303: LD_ADDR_EXP 58
57307: PUSH
57308: LD_EXP 58
57312: PPUSH
57313: LD_VAR 0 4
57317: PPUSH
57318: EMPTY
57319: PPUSH
57320: CALL_OW 1
57324: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
57325: LD_ADDR_EXP 59
57329: PUSH
57330: LD_EXP 59
57334: PPUSH
57335: LD_VAR 0 4
57339: PPUSH
57340: EMPTY
57341: PPUSH
57342: CALL_OW 1
57346: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
57347: LD_ADDR_EXP 60
57351: PUSH
57352: LD_EXP 60
57356: PPUSH
57357: LD_VAR 0 4
57361: PPUSH
57362: EMPTY
57363: PPUSH
57364: CALL_OW 1
57368: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
57369: LD_ADDR_EXP 61
57373: PUSH
57374: LD_EXP 61
57378: PPUSH
57379: LD_VAR 0 4
57383: PPUSH
57384: EMPTY
57385: PPUSH
57386: CALL_OW 1
57390: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
57391: LD_ADDR_EXP 62
57395: PUSH
57396: LD_EXP 62
57400: PPUSH
57401: LD_VAR 0 4
57405: PPUSH
57406: EMPTY
57407: PPUSH
57408: CALL_OW 1
57412: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
57413: LD_ADDR_EXP 63
57417: PUSH
57418: LD_EXP 63
57422: PPUSH
57423: LD_VAR 0 4
57427: PPUSH
57428: EMPTY
57429: PPUSH
57430: CALL_OW 1
57434: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
57435: LD_ADDR_EXP 64
57439: PUSH
57440: LD_EXP 64
57444: PPUSH
57445: LD_VAR 0 4
57449: PPUSH
57450: EMPTY
57451: PPUSH
57452: CALL_OW 1
57456: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
57457: LD_ADDR_EXP 65
57461: PUSH
57462: LD_EXP 65
57466: PPUSH
57467: LD_VAR 0 4
57471: PPUSH
57472: EMPTY
57473: PPUSH
57474: CALL_OW 1
57478: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
57479: LD_ADDR_EXP 66
57483: PUSH
57484: LD_EXP 66
57488: PPUSH
57489: LD_VAR 0 4
57493: PPUSH
57494: EMPTY
57495: PPUSH
57496: CALL_OW 1
57500: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
57501: LD_ADDR_EXP 67
57505: PUSH
57506: LD_EXP 67
57510: PPUSH
57511: LD_VAR 0 4
57515: PPUSH
57516: EMPTY
57517: PPUSH
57518: CALL_OW 1
57522: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
57523: LD_ADDR_EXP 68
57527: PUSH
57528: LD_EXP 68
57532: PPUSH
57533: LD_VAR 0 4
57537: PPUSH
57538: EMPTY
57539: PPUSH
57540: CALL_OW 1
57544: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
57545: LD_ADDR_EXP 69
57549: PUSH
57550: LD_EXP 69
57554: PPUSH
57555: LD_VAR 0 4
57559: PPUSH
57560: EMPTY
57561: PPUSH
57562: CALL_OW 1
57566: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
57567: LD_ADDR_EXP 70
57571: PUSH
57572: LD_EXP 70
57576: PPUSH
57577: LD_VAR 0 4
57581: PPUSH
57582: EMPTY
57583: PPUSH
57584: CALL_OW 1
57588: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
57589: LD_ADDR_EXP 71
57593: PUSH
57594: LD_EXP 71
57598: PPUSH
57599: LD_VAR 0 4
57603: PPUSH
57604: EMPTY
57605: PPUSH
57606: CALL_OW 1
57610: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
57611: LD_ADDR_EXP 73
57615: PUSH
57616: LD_EXP 73
57620: PPUSH
57621: LD_VAR 0 4
57625: PPUSH
57626: EMPTY
57627: PPUSH
57628: CALL_OW 1
57632: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
57633: LD_ADDR_EXP 75
57637: PUSH
57638: LD_EXP 75
57642: PPUSH
57643: LD_VAR 0 4
57647: PPUSH
57648: EMPTY
57649: PPUSH
57650: CALL_OW 1
57654: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
57655: LD_ADDR_EXP 76
57659: PUSH
57660: LD_EXP 76
57664: PPUSH
57665: LD_VAR 0 4
57669: PPUSH
57670: EMPTY
57671: PPUSH
57672: CALL_OW 1
57676: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
57677: LD_ADDR_EXP 77
57681: PUSH
57682: LD_EXP 77
57686: PPUSH
57687: LD_VAR 0 4
57691: PPUSH
57692: EMPTY
57693: PPUSH
57694: CALL_OW 1
57698: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
57699: LD_ADDR_EXP 78
57703: PUSH
57704: LD_EXP 78
57708: PPUSH
57709: LD_VAR 0 4
57713: PPUSH
57714: EMPTY
57715: PPUSH
57716: CALL_OW 1
57720: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
57721: LD_ADDR_EXP 79
57725: PUSH
57726: LD_EXP 79
57730: PPUSH
57731: LD_VAR 0 4
57735: PPUSH
57736: EMPTY
57737: PPUSH
57738: CALL_OW 1
57742: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
57743: LD_ADDR_EXP 80
57747: PUSH
57748: LD_EXP 80
57752: PPUSH
57753: LD_VAR 0 4
57757: PPUSH
57758: EMPTY
57759: PPUSH
57760: CALL_OW 1
57764: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
57765: LD_ADDR_EXP 81
57769: PUSH
57770: LD_EXP 81
57774: PPUSH
57775: LD_VAR 0 4
57779: PPUSH
57780: EMPTY
57781: PPUSH
57782: CALL_OW 1
57786: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
57787: LD_ADDR_EXP 82
57791: PUSH
57792: LD_EXP 82
57796: PPUSH
57797: LD_VAR 0 4
57801: PPUSH
57802: EMPTY
57803: PPUSH
57804: CALL_OW 1
57808: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
57809: LD_ADDR_EXP 83
57813: PUSH
57814: LD_EXP 83
57818: PPUSH
57819: LD_VAR 0 4
57823: PPUSH
57824: EMPTY
57825: PPUSH
57826: CALL_OW 1
57830: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
57831: LD_ADDR_EXP 84
57835: PUSH
57836: LD_EXP 84
57840: PPUSH
57841: LD_VAR 0 4
57845: PPUSH
57846: EMPTY
57847: PPUSH
57848: CALL_OW 1
57852: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
57853: LD_ADDR_EXP 85
57857: PUSH
57858: LD_EXP 85
57862: PPUSH
57863: LD_VAR 0 4
57867: PPUSH
57868: EMPTY
57869: PPUSH
57870: CALL_OW 1
57874: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
57875: LD_ADDR_EXP 86
57879: PUSH
57880: LD_EXP 86
57884: PPUSH
57885: LD_VAR 0 4
57889: PPUSH
57890: EMPTY
57891: PPUSH
57892: CALL_OW 1
57896: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
57897: LD_ADDR_EXP 87
57901: PUSH
57902: LD_EXP 87
57906: PPUSH
57907: LD_VAR 0 4
57911: PPUSH
57912: EMPTY
57913: PPUSH
57914: CALL_OW 1
57918: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
57919: LD_ADDR_EXP 88
57923: PUSH
57924: LD_EXP 88
57928: PPUSH
57929: LD_VAR 0 4
57933: PPUSH
57934: LD_INT 0
57936: PPUSH
57937: CALL_OW 1
57941: ST_TO_ADDR
// result := base ;
57942: LD_ADDR_VAR 0 3
57946: PUSH
57947: LD_VAR 0 4
57951: ST_TO_ADDR
// end ;
57952: LD_VAR 0 3
57956: RET
// export function MC_Start ( ) ; var i ; begin
57957: LD_INT 0
57959: PPUSH
57960: PPUSH
// for i = 1 to mc_bases do
57961: LD_ADDR_VAR 0 2
57965: PUSH
57966: DOUBLE
57967: LD_INT 1
57969: DEC
57970: ST_TO_ADDR
57971: LD_EXP 46
57975: PUSH
57976: FOR_TO
57977: IFFALSE 59054
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff 0 ) ;
57979: LD_ADDR_EXP 46
57983: PUSH
57984: LD_EXP 46
57988: PPUSH
57989: LD_VAR 0 2
57993: PPUSH
57994: LD_EXP 46
57998: PUSH
57999: LD_VAR 0 2
58003: ARRAY
58004: PUSH
58005: LD_INT 0
58007: DIFF
58008: PPUSH
58009: CALL_OW 1
58013: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
58014: LD_ADDR_EXP 47
58018: PUSH
58019: LD_EXP 47
58023: PPUSH
58024: LD_VAR 0 2
58028: PPUSH
58029: EMPTY
58030: PPUSH
58031: CALL_OW 1
58035: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
58036: LD_ADDR_EXP 48
58040: PUSH
58041: LD_EXP 48
58045: PPUSH
58046: LD_VAR 0 2
58050: PPUSH
58051: EMPTY
58052: PPUSH
58053: CALL_OW 1
58057: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
58058: LD_ADDR_EXP 49
58062: PUSH
58063: LD_EXP 49
58067: PPUSH
58068: LD_VAR 0 2
58072: PPUSH
58073: EMPTY
58074: PPUSH
58075: CALL_OW 1
58079: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
58080: LD_ADDR_EXP 50
58084: PUSH
58085: LD_EXP 50
58089: PPUSH
58090: LD_VAR 0 2
58094: PPUSH
58095: EMPTY
58096: PUSH
58097: EMPTY
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: PPUSH
58103: CALL_OW 1
58107: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
58108: LD_ADDR_EXP 51
58112: PUSH
58113: LD_EXP 51
58117: PPUSH
58118: LD_VAR 0 2
58122: PPUSH
58123: EMPTY
58124: PPUSH
58125: CALL_OW 1
58129: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
58130: LD_ADDR_EXP 78
58134: PUSH
58135: LD_EXP 78
58139: PPUSH
58140: LD_VAR 0 2
58144: PPUSH
58145: EMPTY
58146: PPUSH
58147: CALL_OW 1
58151: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
58152: LD_ADDR_EXP 52
58156: PUSH
58157: LD_EXP 52
58161: PPUSH
58162: LD_VAR 0 2
58166: PPUSH
58167: EMPTY
58168: PPUSH
58169: CALL_OW 1
58173: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
58174: LD_ADDR_EXP 53
58178: PUSH
58179: LD_EXP 53
58183: PPUSH
58184: LD_VAR 0 2
58188: PPUSH
58189: EMPTY
58190: PPUSH
58191: CALL_OW 1
58195: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ) ;
58196: LD_ADDR_EXP 54
58200: PUSH
58201: LD_EXP 54
58205: PPUSH
58206: LD_VAR 0 2
58210: PPUSH
58211: LD_EXP 46
58215: PUSH
58216: LD_VAR 0 2
58220: ARRAY
58221: PPUSH
58222: LD_INT 2
58224: PUSH
58225: LD_INT 30
58227: PUSH
58228: LD_INT 32
58230: PUSH
58231: EMPTY
58232: LIST
58233: LIST
58234: PUSH
58235: LD_INT 30
58237: PUSH
58238: LD_INT 33
58240: PUSH
58241: EMPTY
58242: LIST
58243: LIST
58244: PUSH
58245: EMPTY
58246: LIST
58247: LIST
58248: LIST
58249: PPUSH
58250: CALL_OW 72
58254: PPUSH
58255: CALL_OW 1
58259: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
58260: LD_ADDR_EXP 55
58264: PUSH
58265: LD_EXP 55
58269: PPUSH
58270: LD_VAR 0 2
58274: PPUSH
58275: LD_EXP 46
58279: PUSH
58280: LD_VAR 0 2
58284: ARRAY
58285: PPUSH
58286: LD_INT 2
58288: PUSH
58289: LD_INT 30
58291: PUSH
58292: LD_INT 32
58294: PUSH
58295: EMPTY
58296: LIST
58297: LIST
58298: PUSH
58299: LD_INT 30
58301: PUSH
58302: LD_INT 31
58304: PUSH
58305: EMPTY
58306: LIST
58307: LIST
58308: PUSH
58309: EMPTY
58310: LIST
58311: LIST
58312: LIST
58313: PUSH
58314: LD_INT 58
58316: PUSH
58317: EMPTY
58318: LIST
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: PPUSH
58324: CALL_OW 72
58328: PPUSH
58329: CALL_OW 1
58333: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
58334: LD_ADDR_EXP 56
58338: PUSH
58339: LD_EXP 56
58343: PPUSH
58344: LD_VAR 0 2
58348: PPUSH
58349: EMPTY
58350: PPUSH
58351: CALL_OW 1
58355: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
58356: LD_ADDR_EXP 60
58360: PUSH
58361: LD_EXP 60
58365: PPUSH
58366: LD_VAR 0 2
58370: PPUSH
58371: EMPTY
58372: PPUSH
58373: CALL_OW 1
58377: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
58378: LD_ADDR_EXP 59
58382: PUSH
58383: LD_EXP 59
58387: PPUSH
58388: LD_VAR 0 2
58392: PPUSH
58393: EMPTY
58394: PPUSH
58395: CALL_OW 1
58399: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
58400: LD_ADDR_EXP 61
58404: PUSH
58405: LD_EXP 61
58409: PPUSH
58410: LD_VAR 0 2
58414: PPUSH
58415: EMPTY
58416: PPUSH
58417: CALL_OW 1
58421: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
58422: LD_ADDR_EXP 62
58426: PUSH
58427: LD_EXP 62
58431: PPUSH
58432: LD_VAR 0 2
58436: PPUSH
58437: EMPTY
58438: PPUSH
58439: CALL_OW 1
58443: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
58444: LD_ADDR_EXP 63
58448: PUSH
58449: LD_EXP 63
58453: PPUSH
58454: LD_VAR 0 2
58458: PPUSH
58459: EMPTY
58460: PPUSH
58461: CALL_OW 1
58465: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
58466: LD_ADDR_EXP 64
58470: PUSH
58471: LD_EXP 64
58475: PPUSH
58476: LD_VAR 0 2
58480: PPUSH
58481: EMPTY
58482: PPUSH
58483: CALL_OW 1
58487: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
58488: LD_ADDR_EXP 65
58492: PUSH
58493: LD_EXP 65
58497: PPUSH
58498: LD_VAR 0 2
58502: PPUSH
58503: EMPTY
58504: PPUSH
58505: CALL_OW 1
58509: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
58510: LD_ADDR_EXP 66
58514: PUSH
58515: LD_EXP 66
58519: PPUSH
58520: LD_VAR 0 2
58524: PPUSH
58525: EMPTY
58526: PPUSH
58527: CALL_OW 1
58531: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
58532: LD_ADDR_EXP 67
58536: PUSH
58537: LD_EXP 67
58541: PPUSH
58542: LD_VAR 0 2
58546: PPUSH
58547: EMPTY
58548: PPUSH
58549: CALL_OW 1
58553: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
58554: LD_ADDR_EXP 68
58558: PUSH
58559: LD_EXP 68
58563: PPUSH
58564: LD_VAR 0 2
58568: PPUSH
58569: EMPTY
58570: PPUSH
58571: CALL_OW 1
58575: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
58576: LD_ADDR_EXP 57
58580: PUSH
58581: LD_EXP 57
58585: PPUSH
58586: LD_VAR 0 2
58590: PPUSH
58591: LD_INT 0
58593: PPUSH
58594: CALL_OW 1
58598: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
58599: LD_ADDR_EXP 70
58603: PUSH
58604: LD_EXP 70
58608: PPUSH
58609: LD_VAR 0 2
58613: PPUSH
58614: LD_INT 0
58616: PPUSH
58617: CALL_OW 1
58621: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
58622: LD_ADDR_EXP 58
58626: PUSH
58627: LD_EXP 58
58631: PPUSH
58632: LD_VAR 0 2
58636: PPUSH
58637: EMPTY
58638: PPUSH
58639: CALL_OW 1
58643: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
58644: LD_ADDR_EXP 69
58648: PUSH
58649: LD_EXP 69
58653: PPUSH
58654: LD_VAR 0 2
58658: PPUSH
58659: LD_INT 0
58661: PPUSH
58662: CALL_OW 1
58666: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
58667: LD_ADDR_EXP 71
58671: PUSH
58672: LD_EXP 71
58676: PPUSH
58677: LD_VAR 0 2
58681: PPUSH
58682: EMPTY
58683: PPUSH
58684: CALL_OW 1
58688: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
58689: LD_ADDR_EXP 74
58693: PUSH
58694: LD_EXP 74
58698: PPUSH
58699: LD_VAR 0 2
58703: PPUSH
58704: LD_INT 0
58706: PPUSH
58707: CALL_OW 1
58711: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
58712: LD_ADDR_EXP 75
58716: PUSH
58717: LD_EXP 75
58721: PPUSH
58722: LD_VAR 0 2
58726: PPUSH
58727: EMPTY
58728: PPUSH
58729: CALL_OW 1
58733: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
58734: LD_ADDR_EXP 76
58738: PUSH
58739: LD_EXP 76
58743: PPUSH
58744: LD_VAR 0 2
58748: PPUSH
58749: EMPTY
58750: PPUSH
58751: CALL_OW 1
58755: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
58756: LD_ADDR_EXP 77
58760: PUSH
58761: LD_EXP 77
58765: PPUSH
58766: LD_VAR 0 2
58770: PPUSH
58771: EMPTY
58772: PPUSH
58773: CALL_OW 1
58777: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
58778: LD_ADDR_EXP 79
58782: PUSH
58783: LD_EXP 79
58787: PPUSH
58788: LD_VAR 0 2
58792: PPUSH
58793: LD_EXP 46
58797: PUSH
58798: LD_VAR 0 2
58802: ARRAY
58803: PPUSH
58804: LD_INT 2
58806: PUSH
58807: LD_INT 30
58809: PUSH
58810: LD_INT 6
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: PUSH
58817: LD_INT 30
58819: PUSH
58820: LD_INT 7
58822: PUSH
58823: EMPTY
58824: LIST
58825: LIST
58826: PUSH
58827: LD_INT 30
58829: PUSH
58830: LD_INT 8
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: LIST
58841: LIST
58842: PPUSH
58843: CALL_OW 72
58847: PPUSH
58848: CALL_OW 1
58852: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
58853: LD_ADDR_EXP 80
58857: PUSH
58858: LD_EXP 80
58862: PPUSH
58863: LD_VAR 0 2
58867: PPUSH
58868: EMPTY
58869: PPUSH
58870: CALL_OW 1
58874: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
58875: LD_ADDR_EXP 81
58879: PUSH
58880: LD_EXP 81
58884: PPUSH
58885: LD_VAR 0 2
58889: PPUSH
58890: EMPTY
58891: PPUSH
58892: CALL_OW 1
58896: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , i , [ ] ) ;
58897: LD_ADDR_EXP 82
58901: PUSH
58902: LD_EXP 82
58906: PPUSH
58907: LD_VAR 0 2
58911: PPUSH
58912: EMPTY
58913: PPUSH
58914: CALL_OW 1
58918: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
58919: LD_ADDR_EXP 83
58923: PUSH
58924: LD_EXP 83
58928: PPUSH
58929: LD_VAR 0 2
58933: PPUSH
58934: EMPTY
58935: PPUSH
58936: CALL_OW 1
58940: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
58941: LD_ADDR_EXP 84
58945: PUSH
58946: LD_EXP 84
58950: PPUSH
58951: LD_VAR 0 2
58955: PPUSH
58956: EMPTY
58957: PPUSH
58958: CALL_OW 1
58962: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
58963: LD_ADDR_EXP 85
58967: PUSH
58968: LD_EXP 85
58972: PPUSH
58973: LD_VAR 0 2
58977: PPUSH
58978: EMPTY
58979: PPUSH
58980: CALL_OW 1
58984: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
58985: LD_ADDR_EXP 86
58989: PUSH
58990: LD_EXP 86
58994: PPUSH
58995: LD_VAR 0 2
58999: PPUSH
59000: EMPTY
59001: PPUSH
59002: CALL_OW 1
59006: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , [ ] ) ;
59007: LD_ADDR_EXP 87
59011: PUSH
59012: LD_EXP 87
59016: PPUSH
59017: LD_VAR 0 2
59021: PPUSH
59022: EMPTY
59023: PPUSH
59024: CALL_OW 1
59028: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , i , 0 ) ;
59029: LD_ADDR_EXP 88
59033: PUSH
59034: LD_EXP 88
59038: PPUSH
59039: LD_VAR 0 2
59043: PPUSH
59044: LD_INT 0
59046: PPUSH
59047: CALL_OW 1
59051: ST_TO_ADDR
// end ;
59052: GO 57976
59054: POP
59055: POP
// MC_InitSides ( ) ;
59056: CALL 59342 0 0
// MC_InitResearch ( ) ;
59060: CALL 59081 0 0
// CustomInitMacro ( ) ;
59064: CALL 1400 0 0
// skirmish := true ;
59068: LD_ADDR_EXP 44
59072: PUSH
59073: LD_INT 1
59075: ST_TO_ADDR
// end ;
59076: LD_VAR 0 1
59080: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
59081: LD_INT 0
59083: PPUSH
59084: PPUSH
59085: PPUSH
59086: PPUSH
59087: PPUSH
59088: PPUSH
// if not mc_bases then
59089: LD_EXP 46
59093: NOT
59094: IFFALSE 59098
// exit ;
59096: GO 59337
// for i = 1 to 8 do
59098: LD_ADDR_VAR 0 2
59102: PUSH
59103: DOUBLE
59104: LD_INT 1
59106: DEC
59107: ST_TO_ADDR
59108: LD_INT 8
59110: PUSH
59111: FOR_TO
59112: IFFALSE 59138
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
59114: LD_ADDR_EXP 73
59118: PUSH
59119: LD_EXP 73
59123: PPUSH
59124: LD_VAR 0 2
59128: PPUSH
59129: EMPTY
59130: PPUSH
59131: CALL_OW 1
59135: ST_TO_ADDR
59136: GO 59111
59138: POP
59139: POP
// tmp := [ ] ;
59140: LD_ADDR_VAR 0 5
59144: PUSH
59145: EMPTY
59146: ST_TO_ADDR
// for i = 1 to mc_sides do
59147: LD_ADDR_VAR 0 2
59151: PUSH
59152: DOUBLE
59153: LD_INT 1
59155: DEC
59156: ST_TO_ADDR
59157: LD_EXP 72
59161: PUSH
59162: FOR_TO
59163: IFFALSE 59221
// if not mc_sides [ i ] in tmp then
59165: LD_EXP 72
59169: PUSH
59170: LD_VAR 0 2
59174: ARRAY
59175: PUSH
59176: LD_VAR 0 5
59180: IN
59181: NOT
59182: IFFALSE 59219
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
59184: LD_ADDR_VAR 0 5
59188: PUSH
59189: LD_VAR 0 5
59193: PPUSH
59194: LD_VAR 0 5
59198: PUSH
59199: LD_INT 1
59201: PLUS
59202: PPUSH
59203: LD_EXP 72
59207: PUSH
59208: LD_VAR 0 2
59212: ARRAY
59213: PPUSH
59214: CALL_OW 2
59218: ST_TO_ADDR
59219: GO 59162
59221: POP
59222: POP
// if not tmp then
59223: LD_VAR 0 5
59227: NOT
59228: IFFALSE 59232
// exit ;
59230: GO 59337
// for j in tmp do
59232: LD_ADDR_VAR 0 3
59236: PUSH
59237: LD_VAR 0 5
59241: PUSH
59242: FOR_IN
59243: IFFALSE 59335
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
59245: LD_ADDR_VAR 0 6
59249: PUSH
59250: LD_INT 22
59252: PUSH
59253: LD_VAR 0 3
59257: PUSH
59258: EMPTY
59259: LIST
59260: LIST
59261: PPUSH
59262: CALL_OW 69
59266: ST_TO_ADDR
// if not un then
59267: LD_VAR 0 6
59271: NOT
59272: IFFALSE 59276
// continue ;
59274: GO 59242
// nation := GetNation ( un [ 1 ] ) ;
59276: LD_ADDR_VAR 0 4
59280: PUSH
59281: LD_VAR 0 6
59285: PUSH
59286: LD_INT 1
59288: ARRAY
59289: PPUSH
59290: CALL_OW 248
59294: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
59295: LD_ADDR_EXP 73
59299: PUSH
59300: LD_EXP 73
59304: PPUSH
59305: LD_VAR 0 3
59309: PPUSH
59310: LD_VAR 0 3
59314: PPUSH
59315: LD_VAR 0 4
59319: PPUSH
59320: LD_INT 1
59322: PPUSH
59323: CALL 19411 0 3
59327: PPUSH
59328: CALL_OW 1
59332: ST_TO_ADDR
// end ;
59333: GO 59242
59335: POP
59336: POP
// end ;
59337: LD_VAR 0 1
59341: RET
// export function MC_InitSides ( ) ; var i ; begin
59342: LD_INT 0
59344: PPUSH
59345: PPUSH
// if not mc_bases then
59346: LD_EXP 46
59350: NOT
59351: IFFALSE 59355
// exit ;
59353: GO 59429
// for i = 1 to mc_bases do
59355: LD_ADDR_VAR 0 2
59359: PUSH
59360: DOUBLE
59361: LD_INT 1
59363: DEC
59364: ST_TO_ADDR
59365: LD_EXP 46
59369: PUSH
59370: FOR_TO
59371: IFFALSE 59427
// if mc_bases [ i ] then
59373: LD_EXP 46
59377: PUSH
59378: LD_VAR 0 2
59382: ARRAY
59383: IFFALSE 59425
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
59385: LD_ADDR_EXP 72
59389: PUSH
59390: LD_EXP 72
59394: PPUSH
59395: LD_VAR 0 2
59399: PPUSH
59400: LD_EXP 46
59404: PUSH
59405: LD_VAR 0 2
59409: ARRAY
59410: PUSH
59411: LD_INT 1
59413: ARRAY
59414: PPUSH
59415: CALL_OW 255
59419: PPUSH
59420: CALL_OW 1
59424: ST_TO_ADDR
59425: GO 59370
59427: POP
59428: POP
// end ;
59429: LD_VAR 0 1
59433: RET
// every 0 0$01 trigger skirmish do
59434: LD_EXP 44
59438: IFFALSE 59592
59440: GO 59442
59442: DISABLE
// begin enable ;
59443: ENABLE
// MC_CheckBuildings ( ) ;
59444: CALL 64090 0 0
// MC_CheckPeopleLife ( ) ;
59448: CALL 64215 0 0
// RaiseSailEvent ( 100 ) ;
59452: LD_INT 100
59454: PPUSH
59455: CALL_OW 427
// RaiseSailEvent ( 103 ) ;
59459: LD_INT 103
59461: PPUSH
59462: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
59466: LD_INT 104
59468: PPUSH
59469: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
59473: LD_INT 105
59475: PPUSH
59476: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
59480: LD_INT 106
59482: PPUSH
59483: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
59487: LD_INT 107
59489: PPUSH
59490: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
59494: LD_INT 108
59496: PPUSH
59497: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
59501: LD_INT 109
59503: PPUSH
59504: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
59508: LD_INT 110
59510: PPUSH
59511: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
59515: LD_INT 111
59517: PPUSH
59518: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
59522: LD_INT 112
59524: PPUSH
59525: CALL_OW 427
// RaiseSailEvent ( 113 ) ;
59529: LD_INT 113
59531: PPUSH
59532: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
59536: LD_INT 120
59538: PPUSH
59539: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
59543: LD_INT 121
59545: PPUSH
59546: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
59550: LD_INT 122
59552: PPUSH
59553: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
59557: LD_INT 123
59559: PPUSH
59560: CALL_OW 427
// RaiseSailEvent ( 124 ) ;
59564: LD_INT 124
59566: PPUSH
59567: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
59571: LD_INT 125
59573: PPUSH
59574: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
59578: LD_INT 126
59580: PPUSH
59581: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
59585: LD_INT 200
59587: PPUSH
59588: CALL_OW 427
// end ;
59592: END
// on SailEvent ( event ) do begin if event < 100 then
59593: LD_VAR 0 1
59597: PUSH
59598: LD_INT 100
59600: LESS
59601: IFFALSE 59612
// CustomEvent ( event ) ;
59603: LD_VAR 0 1
59607: PPUSH
59608: CALL 18589 0 1
// if event = 100 then
59612: LD_VAR 0 1
59616: PUSH
59617: LD_INT 100
59619: EQUAL
59620: IFFALSE 59626
// MC_ClassManager ( ) ;
59622: CALL 60018 0 0
// if event = 101 then
59626: LD_VAR 0 1
59630: PUSH
59631: LD_INT 101
59633: EQUAL
59634: IFFALSE 59640
// MC_RepairBuildings ( ) ;
59636: CALL 64800 0 0
// if event = 102 then
59640: LD_VAR 0 1
59644: PUSH
59645: LD_INT 102
59647: EQUAL
59648: IFFALSE 59654
// MC_Heal ( ) ;
59650: CALL 65659 0 0
// if event = 103 then
59654: LD_VAR 0 1
59658: PUSH
59659: LD_INT 103
59661: EQUAL
59662: IFFALSE 59668
// MC_Build ( ) ;
59664: CALL 66081 0 0
// if event = 104 then
59668: LD_VAR 0 1
59672: PUSH
59673: LD_INT 104
59675: EQUAL
59676: IFFALSE 59682
// MC_TurretWeapon ( ) ;
59678: CALL 67694 0 0
// if event = 105 then
59682: LD_VAR 0 1
59686: PUSH
59687: LD_INT 105
59689: EQUAL
59690: IFFALSE 59696
// MC_BuildUpgrade ( ) ;
59692: CALL 67245 0 0
// if event = 106 then
59696: LD_VAR 0 1
59700: PUSH
59701: LD_INT 106
59703: EQUAL
59704: IFFALSE 59710
// MC_PlantMines ( ) ;
59706: CALL 68124 0 0
// if event = 107 then
59710: LD_VAR 0 1
59714: PUSH
59715: LD_INT 107
59717: EQUAL
59718: IFFALSE 59724
// MC_CollectCrates ( ) ;
59720: CALL 68922 0 0
// if event = 108 then
59724: LD_VAR 0 1
59728: PUSH
59729: LD_INT 108
59731: EQUAL
59732: IFFALSE 59738
// MC_LinkRemoteControl ( ) ;
59734: CALL 70698 0 0
// if event = 109 then
59738: LD_VAR 0 1
59742: PUSH
59743: LD_INT 109
59745: EQUAL
59746: IFFALSE 59752
// MC_ProduceVehicle ( ) ;
59748: CALL 70879 0 0
// if event = 110 then
59752: LD_VAR 0 1
59756: PUSH
59757: LD_INT 110
59759: EQUAL
59760: IFFALSE 59766
// MC_SendAttack ( ) ;
59762: CALL 71345 0 0
// if event = 111 then
59766: LD_VAR 0 1
59770: PUSH
59771: LD_INT 111
59773: EQUAL
59774: IFFALSE 59780
// MC_Defend ( ) ;
59776: CALL 71453 0 0
// if event = 112 then
59780: LD_VAR 0 1
59784: PUSH
59785: LD_INT 112
59787: EQUAL
59788: IFFALSE 59794
// MC_Research ( ) ;
59790: CALL 72058 0 0
// if event = 113 then
59794: LD_VAR 0 1
59798: PUSH
59799: LD_INT 113
59801: EQUAL
59802: IFFALSE 59808
// MC_MinesTrigger ( ) ;
59804: CALL 73172 0 0
// if event = 120 then
59808: LD_VAR 0 1
59812: PUSH
59813: LD_INT 120
59815: EQUAL
59816: IFFALSE 59822
// MC_RepairVehicle ( ) ;
59818: CALL 73271 0 0
// if event = 121 then
59822: LD_VAR 0 1
59826: PUSH
59827: LD_INT 121
59829: EQUAL
59830: IFFALSE 59836
// MC_TameApe ( ) ;
59832: CALL 74001 0 0
// if event = 122 then
59836: LD_VAR 0 1
59840: PUSH
59841: LD_INT 122
59843: EQUAL
59844: IFFALSE 59850
// MC_ChangeApeClass ( ) ;
59846: CALL 74830 0 0
// if event = 123 then
59850: LD_VAR 0 1
59854: PUSH
59855: LD_INT 123
59857: EQUAL
59858: IFFALSE 59864
// MC_Bazooka ( ) ;
59860: CALL 75480 0 0
// if event = 124 then
59864: LD_VAR 0 1
59868: PUSH
59869: LD_INT 124
59871: EQUAL
59872: IFFALSE 59878
// MC_TeleportExit ( ) ;
59874: CALL 75678 0 0
// if event = 125 then
59878: LD_VAR 0 1
59882: PUSH
59883: LD_INT 125
59885: EQUAL
59886: IFFALSE 59892
// MC_Deposits ( ) ;
59888: CALL 76325 0 0
// if event = 126 then
59892: LD_VAR 0 1
59896: PUSH
59897: LD_INT 126
59899: EQUAL
59900: IFFALSE 59906
// MC_RemoteDriver ( ) ;
59902: CALL 76950 0 0
// if event = 200 then
59906: LD_VAR 0 1
59910: PUSH
59911: LD_INT 200
59913: EQUAL
59914: IFFALSE 59920
// MC_Idle ( ) ;
59916: CALL 78899 0 0
// end ;
59920: PPOPN 1
59922: END
// export function MC_Reset ( base , tag ) ; var i ; begin
59923: LD_INT 0
59925: PPUSH
59926: PPUSH
// if not mc_bases [ base ] or not tag then
59927: LD_EXP 46
59931: PUSH
59932: LD_VAR 0 1
59936: ARRAY
59937: NOT
59938: PUSH
59939: LD_VAR 0 2
59943: NOT
59944: OR
59945: IFFALSE 59949
// exit ;
59947: GO 60013
// for i in mc_bases [ base ] union mc_ape [ base ] do
59949: LD_ADDR_VAR 0 4
59953: PUSH
59954: LD_EXP 46
59958: PUSH
59959: LD_VAR 0 1
59963: ARRAY
59964: PUSH
59965: LD_EXP 75
59969: PUSH
59970: LD_VAR 0 1
59974: ARRAY
59975: UNION
59976: PUSH
59977: FOR_IN
59978: IFFALSE 60011
// if GetTag ( i ) = tag then
59980: LD_VAR 0 4
59984: PPUSH
59985: CALL_OW 110
59989: PUSH
59990: LD_VAR 0 2
59994: EQUAL
59995: IFFALSE 60009
// SetTag ( i , 0 ) ;
59997: LD_VAR 0 4
60001: PPUSH
60002: LD_INT 0
60004: PPUSH
60005: CALL_OW 109
60009: GO 59977
60011: POP
60012: POP
// end ;
60013: LD_VAR 0 3
60017: RET
// export function MC_ClassManager ( ) ; var i , j , tmp , p , b , e , k ; begin
60018: LD_INT 0
60020: PPUSH
60021: PPUSH
60022: PPUSH
60023: PPUSH
60024: PPUSH
60025: PPUSH
60026: PPUSH
60027: PPUSH
// if not mc_bases then
60028: LD_EXP 46
60032: NOT
60033: IFFALSE 60037
// exit ;
60035: GO 60495
// for i = 1 to mc_bases do
60037: LD_ADDR_VAR 0 2
60041: PUSH
60042: DOUBLE
60043: LD_INT 1
60045: DEC
60046: ST_TO_ADDR
60047: LD_EXP 46
60051: PUSH
60052: FOR_TO
60053: IFFALSE 60493
// begin tmp := MC_ClassCheckReq ( i ) ;
60055: LD_ADDR_VAR 0 4
60059: PUSH
60060: LD_VAR 0 2
60064: PPUSH
60065: CALL 60500 0 1
60069: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , tmp ) ;
60070: LD_ADDR_EXP 87
60074: PUSH
60075: LD_EXP 87
60079: PPUSH
60080: LD_VAR 0 2
60084: PPUSH
60085: LD_VAR 0 4
60089: PPUSH
60090: CALL_OW 1
60094: ST_TO_ADDR
// if not tmp then
60095: LD_VAR 0 4
60099: NOT
60100: IFFALSE 60104
// continue ;
60102: GO 60052
// b := [ UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ] ;
60104: LD_ADDR_VAR 0 6
60108: PUSH
60109: LD_EXP 46
60113: PUSH
60114: LD_VAR 0 2
60118: ARRAY
60119: PPUSH
60120: LD_INT 2
60122: PUSH
60123: LD_INT 30
60125: PUSH
60126: LD_INT 4
60128: PUSH
60129: EMPTY
60130: LIST
60131: LIST
60132: PUSH
60133: LD_INT 30
60135: PUSH
60136: LD_INT 5
60138: PUSH
60139: EMPTY
60140: LIST
60141: LIST
60142: PUSH
60143: EMPTY
60144: LIST
60145: LIST
60146: LIST
60147: PPUSH
60148: CALL_OW 72
60152: PUSH
60153: LD_EXP 46
60157: PUSH
60158: LD_VAR 0 2
60162: ARRAY
60163: PPUSH
60164: LD_INT 2
60166: PUSH
60167: LD_INT 30
60169: PUSH
60170: LD_INT 0
60172: PUSH
60173: EMPTY
60174: LIST
60175: LIST
60176: PUSH
60177: LD_INT 30
60179: PUSH
60180: LD_INT 1
60182: PUSH
60183: EMPTY
60184: LIST
60185: LIST
60186: PUSH
60187: EMPTY
60188: LIST
60189: LIST
60190: LIST
60191: PPUSH
60192: CALL_OW 72
60196: PUSH
60197: LD_EXP 46
60201: PUSH
60202: LD_VAR 0 2
60206: ARRAY
60207: PPUSH
60208: LD_INT 30
60210: PUSH
60211: LD_INT 3
60213: PUSH
60214: EMPTY
60215: LIST
60216: LIST
60217: PPUSH
60218: CALL_OW 72
60222: PUSH
60223: LD_EXP 46
60227: PUSH
60228: LD_VAR 0 2
60232: ARRAY
60233: PPUSH
60234: LD_INT 2
60236: PUSH
60237: LD_INT 30
60239: PUSH
60240: LD_INT 6
60242: PUSH
60243: EMPTY
60244: LIST
60245: LIST
60246: PUSH
60247: LD_INT 30
60249: PUSH
60250: LD_INT 7
60252: PUSH
60253: EMPTY
60254: LIST
60255: LIST
60256: PUSH
60257: LD_INT 30
60259: PUSH
60260: LD_INT 8
60262: PUSH
60263: EMPTY
60264: LIST
60265: LIST
60266: PUSH
60267: EMPTY
60268: LIST
60269: LIST
60270: LIST
60271: LIST
60272: PPUSH
60273: CALL_OW 72
60277: PUSH
60278: EMPTY
60279: LIST
60280: LIST
60281: LIST
60282: LIST
60283: ST_TO_ADDR
// for j = 1 to 4 do
60284: LD_ADDR_VAR 0 3
60288: PUSH
60289: DOUBLE
60290: LD_INT 1
60292: DEC
60293: ST_TO_ADDR
60294: LD_INT 4
60296: PUSH
60297: FOR_TO
60298: IFFALSE 60489
// begin if not tmp [ j ] then
60300: LD_VAR 0 4
60304: PUSH
60305: LD_VAR 0 3
60309: ARRAY
60310: NOT
60311: IFFALSE 60315
// continue ;
60313: GO 60297
// for p in tmp [ j ] do
60315: LD_ADDR_VAR 0 5
60319: PUSH
60320: LD_VAR 0 4
60324: PUSH
60325: LD_VAR 0 3
60329: ARRAY
60330: PUSH
60331: FOR_IN
60332: IFFALSE 60485
// begin if not b [ j ] then
60334: LD_VAR 0 6
60338: PUSH
60339: LD_VAR 0 3
60343: ARRAY
60344: NOT
60345: IFFALSE 60349
// break ;
60347: GO 60485
// e := 0 ;
60349: LD_ADDR_VAR 0 7
60353: PUSH
60354: LD_INT 0
60356: ST_TO_ADDR
// for k in b [ j ] do
60357: LD_ADDR_VAR 0 8
60361: PUSH
60362: LD_VAR 0 6
60366: PUSH
60367: LD_VAR 0 3
60371: ARRAY
60372: PUSH
60373: FOR_IN
60374: IFFALSE 60401
// if IsNotFull ( k ) then
60376: LD_VAR 0 8
60380: PPUSH
60381: CALL 21560 0 1
60385: IFFALSE 60399
// begin e := k ;
60387: LD_ADDR_VAR 0 7
60391: PUSH
60392: LD_VAR 0 8
60396: ST_TO_ADDR
// break ;
60397: GO 60401
// end ;
60399: GO 60373
60401: POP
60402: POP
// if e and not UnitGoingToBuilding ( p , e ) then
60403: LD_VAR 0 7
60407: PUSH
60408: LD_VAR 0 5
60412: PPUSH
60413: LD_VAR 0 7
60417: PPUSH
60418: CALL 53980 0 2
60422: NOT
60423: AND
60424: IFFALSE 60483
// begin if IsInUnit ( p ) then
60426: LD_VAR 0 5
60430: PPUSH
60431: CALL_OW 310
60435: IFFALSE 60446
// ComExitBuilding ( p ) ;
60437: LD_VAR 0 5
60441: PPUSH
60442: CALL_OW 122
// ComEnterUnit ( p , e ) ;
60446: LD_VAR 0 5
60450: PPUSH
60451: LD_VAR 0 7
60455: PPUSH
60456: CALL_OW 120
// AddComChangeProfession ( p , j ) ;
60460: LD_VAR 0 5
60464: PPUSH
60465: LD_VAR 0 3
60469: PPUSH
60470: CALL_OW 183
// AddComExitBuilding ( p ) ;
60474: LD_VAR 0 5
60478: PPUSH
60479: CALL_OW 182
// end ; end ;
60483: GO 60331
60485: POP
60486: POP
// end ;
60487: GO 60297
60489: POP
60490: POP
// end ;
60491: GO 60052
60493: POP
60494: POP
// end ;
60495: LD_VAR 0 1
60499: RET
// export function MC_ClassCheckReq ( base ) ; var i , tmp , sol , eng , mech , sci , sort , j , p , b , bcount ; begin
60500: LD_INT 0
60502: PPUSH
60503: PPUSH
60504: PPUSH
60505: PPUSH
60506: PPUSH
60507: PPUSH
60508: PPUSH
60509: PPUSH
60510: PPUSH
60511: PPUSH
60512: PPUSH
60513: PPUSH
// if not base or not mc_bases [ base ] or not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
60514: LD_VAR 0 1
60518: NOT
60519: PUSH
60520: LD_EXP 46
60524: PUSH
60525: LD_VAR 0 1
60529: ARRAY
60530: NOT
60531: OR
60532: PUSH
60533: LD_EXP 46
60537: PUSH
60538: LD_VAR 0 1
60542: ARRAY
60543: PPUSH
60544: LD_INT 2
60546: PUSH
60547: LD_INT 30
60549: PUSH
60550: LD_INT 0
60552: PUSH
60553: EMPTY
60554: LIST
60555: LIST
60556: PUSH
60557: LD_INT 30
60559: PUSH
60560: LD_INT 1
60562: PUSH
60563: EMPTY
60564: LIST
60565: LIST
60566: PUSH
60567: EMPTY
60568: LIST
60569: LIST
60570: LIST
60571: PPUSH
60572: CALL_OW 72
60576: NOT
60577: OR
60578: IFFALSE 60582
// exit ;
60580: GO 64085
// tmp := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
60582: LD_ADDR_VAR 0 4
60586: PUSH
60587: LD_EXP 46
60591: PUSH
60592: LD_VAR 0 1
60596: ARRAY
60597: PPUSH
60598: LD_INT 2
60600: PUSH
60601: LD_INT 25
60603: PUSH
60604: LD_INT 1
60606: PUSH
60607: EMPTY
60608: LIST
60609: LIST
60610: PUSH
60611: LD_INT 25
60613: PUSH
60614: LD_INT 2
60616: PUSH
60617: EMPTY
60618: LIST
60619: LIST
60620: PUSH
60621: LD_INT 25
60623: PUSH
60624: LD_INT 3
60626: PUSH
60627: EMPTY
60628: LIST
60629: LIST
60630: PUSH
60631: LD_INT 25
60633: PUSH
60634: LD_INT 4
60636: PUSH
60637: EMPTY
60638: LIST
60639: LIST
60640: PUSH
60641: LD_INT 25
60643: PUSH
60644: LD_INT 5
60646: PUSH
60647: EMPTY
60648: LIST
60649: LIST
60650: PUSH
60651: LD_INT 25
60653: PUSH
60654: LD_INT 8
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: PUSH
60661: LD_INT 25
60663: PUSH
60664: LD_INT 9
60666: PUSH
60667: EMPTY
60668: LIST
60669: LIST
60670: PUSH
60671: EMPTY
60672: LIST
60673: LIST
60674: LIST
60675: LIST
60676: LIST
60677: LIST
60678: LIST
60679: LIST
60680: PPUSH
60681: CALL_OW 72
60685: ST_TO_ADDR
// if not tmp then
60686: LD_VAR 0 4
60690: NOT
60691: IFFALSE 60695
// exit ;
60693: GO 64085
// for i in tmp do
60695: LD_ADDR_VAR 0 3
60699: PUSH
60700: LD_VAR 0 4
60704: PUSH
60705: FOR_IN
60706: IFFALSE 60737
// if GetTag ( i ) then
60708: LD_VAR 0 3
60712: PPUSH
60713: CALL_OW 110
60717: IFFALSE 60735
// tmp := tmp diff i ;
60719: LD_ADDR_VAR 0 4
60723: PUSH
60724: LD_VAR 0 4
60728: PUSH
60729: LD_VAR 0 3
60733: DIFF
60734: ST_TO_ADDR
60735: GO 60705
60737: POP
60738: POP
// if not tmp then
60739: LD_VAR 0 4
60743: NOT
60744: IFFALSE 60748
// exit ;
60746: GO 64085
// sol := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
60748: LD_ADDR_VAR 0 5
60752: PUSH
60753: LD_EXP 46
60757: PUSH
60758: LD_VAR 0 1
60762: ARRAY
60763: PPUSH
60764: LD_INT 2
60766: PUSH
60767: LD_INT 25
60769: PUSH
60770: LD_INT 1
60772: PUSH
60773: EMPTY
60774: LIST
60775: LIST
60776: PUSH
60777: LD_INT 25
60779: PUSH
60780: LD_INT 5
60782: PUSH
60783: EMPTY
60784: LIST
60785: LIST
60786: PUSH
60787: LD_INT 25
60789: PUSH
60790: LD_INT 8
60792: PUSH
60793: EMPTY
60794: LIST
60795: LIST
60796: PUSH
60797: LD_INT 25
60799: PUSH
60800: LD_INT 9
60802: PUSH
60803: EMPTY
60804: LIST
60805: LIST
60806: PUSH
60807: EMPTY
60808: LIST
60809: LIST
60810: LIST
60811: LIST
60812: LIST
60813: PPUSH
60814: CALL_OW 72
60818: ST_TO_ADDR
// eng := UnitFilter ( mc_bases [ base ] , [ f_class , 2 ] ) ;
60819: LD_ADDR_VAR 0 6
60823: PUSH
60824: LD_EXP 46
60828: PUSH
60829: LD_VAR 0 1
60833: ARRAY
60834: PPUSH
60835: LD_INT 25
60837: PUSH
60838: LD_INT 2
60840: PUSH
60841: EMPTY
60842: LIST
60843: LIST
60844: PPUSH
60845: CALL_OW 72
60849: ST_TO_ADDR
// mech := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
60850: LD_ADDR_VAR 0 7
60854: PUSH
60855: LD_EXP 46
60859: PUSH
60860: LD_VAR 0 1
60864: ARRAY
60865: PPUSH
60866: LD_INT 25
60868: PUSH
60869: LD_INT 3
60871: PUSH
60872: EMPTY
60873: LIST
60874: LIST
60875: PPUSH
60876: CALL_OW 72
60880: ST_TO_ADDR
// sci := UnitFilter ( mc_bases [ base ] , [ [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
60881: LD_ADDR_VAR 0 8
60885: PUSH
60886: LD_EXP 46
60890: PUSH
60891: LD_VAR 0 1
60895: ARRAY
60896: PPUSH
60897: LD_INT 25
60899: PUSH
60900: LD_INT 4
60902: PUSH
60903: EMPTY
60904: LIST
60905: LIST
60906: PUSH
60907: LD_INT 24
60909: PUSH
60910: LD_INT 251
60912: PUSH
60913: EMPTY
60914: LIST
60915: LIST
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: PPUSH
60921: CALL_OW 72
60925: ST_TO_ADDR
// if mc_scan [ base ] then
60926: LD_EXP 69
60930: PUSH
60931: LD_VAR 0 1
60935: ARRAY
60936: IFFALSE 61397
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 4 ) ;
60938: LD_ADDR_EXP 88
60942: PUSH
60943: LD_EXP 88
60947: PPUSH
60948: LD_VAR 0 1
60952: PPUSH
60953: LD_INT 4
60955: PPUSH
60956: CALL_OW 1
60960: ST_TO_ADDR
// b := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
60961: LD_ADDR_VAR 0 12
60965: PUSH
60966: LD_EXP 46
60970: PUSH
60971: LD_VAR 0 1
60975: ARRAY
60976: PPUSH
60977: LD_INT 2
60979: PUSH
60980: LD_INT 30
60982: PUSH
60983: LD_INT 4
60985: PUSH
60986: EMPTY
60987: LIST
60988: LIST
60989: PUSH
60990: LD_INT 30
60992: PUSH
60993: LD_INT 5
60995: PUSH
60996: EMPTY
60997: LIST
60998: LIST
60999: PUSH
61000: EMPTY
61001: LIST
61002: LIST
61003: LIST
61004: PPUSH
61005: CALL_OW 72
61009: ST_TO_ADDR
// if not b then
61010: LD_VAR 0 12
61014: NOT
61015: IFFALSE 61019
// exit ;
61017: GO 64085
// p := [ ] ;
61019: LD_ADDR_VAR 0 11
61023: PUSH
61024: EMPTY
61025: ST_TO_ADDR
// if sci >= 2 then
61026: LD_VAR 0 8
61030: PUSH
61031: LD_INT 2
61033: GREATEREQUAL
61034: IFFALSE 61065
// sci := [ sci [ 1 ] , sci [ 2 ] ] else
61036: LD_ADDR_VAR 0 8
61040: PUSH
61041: LD_VAR 0 8
61045: PUSH
61046: LD_INT 1
61048: ARRAY
61049: PUSH
61050: LD_VAR 0 8
61054: PUSH
61055: LD_INT 2
61057: ARRAY
61058: PUSH
61059: EMPTY
61060: LIST
61061: LIST
61062: ST_TO_ADDR
61063: GO 61126
// if sci = 1 then
61065: LD_VAR 0 8
61069: PUSH
61070: LD_INT 1
61072: EQUAL
61073: IFFALSE 61094
// sci := [ sci [ 1 ] ] else
61075: LD_ADDR_VAR 0 8
61079: PUSH
61080: LD_VAR 0 8
61084: PUSH
61085: LD_INT 1
61087: ARRAY
61088: PUSH
61089: EMPTY
61090: LIST
61091: ST_TO_ADDR
61092: GO 61126
// if sci = 0 then
61094: LD_VAR 0 8
61098: PUSH
61099: LD_INT 0
61101: EQUAL
61102: IFFALSE 61126
// p := SortBySkill ( tmp , 4 ) [ 1 ] ;
61104: LD_ADDR_VAR 0 11
61108: PUSH
61109: LD_VAR 0 4
61113: PPUSH
61114: LD_INT 4
61116: PPUSH
61117: CALL 53843 0 2
61121: PUSH
61122: LD_INT 1
61124: ARRAY
61125: ST_TO_ADDR
// if eng > 4 then
61126: LD_VAR 0 6
61130: PUSH
61131: LD_INT 4
61133: GREATER
61134: IFFALSE 61180
// for i = eng downto 4 do
61136: LD_ADDR_VAR 0 3
61140: PUSH
61141: DOUBLE
61142: LD_VAR 0 6
61146: INC
61147: ST_TO_ADDR
61148: LD_INT 4
61150: PUSH
61151: FOR_DOWNTO
61152: IFFALSE 61178
// eng := eng diff eng [ i ] ;
61154: LD_ADDR_VAR 0 6
61158: PUSH
61159: LD_VAR 0 6
61163: PUSH
61164: LD_VAR 0 6
61168: PUSH
61169: LD_VAR 0 3
61173: ARRAY
61174: DIFF
61175: ST_TO_ADDR
61176: GO 61151
61178: POP
61179: POP
// tmp := tmp diff ( sol union eng union mech union sci ) ;
61180: LD_ADDR_VAR 0 4
61184: PUSH
61185: LD_VAR 0 4
61189: PUSH
61190: LD_VAR 0 5
61194: PUSH
61195: LD_VAR 0 6
61199: UNION
61200: PUSH
61201: LD_VAR 0 7
61205: UNION
61206: PUSH
61207: LD_VAR 0 8
61211: UNION
61212: DIFF
61213: ST_TO_ADDR
// bcount := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) + UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) * 6 ;
61214: LD_ADDR_VAR 0 13
61218: PUSH
61219: LD_EXP 46
61223: PUSH
61224: LD_VAR 0 1
61228: ARRAY
61229: PPUSH
61230: LD_INT 2
61232: PUSH
61233: LD_INT 30
61235: PUSH
61236: LD_INT 32
61238: PUSH
61239: EMPTY
61240: LIST
61241: LIST
61242: PUSH
61243: LD_INT 30
61245: PUSH
61246: LD_INT 31
61248: PUSH
61249: EMPTY
61250: LIST
61251: LIST
61252: PUSH
61253: EMPTY
61254: LIST
61255: LIST
61256: LIST
61257: PPUSH
61258: CALL_OW 72
61262: PUSH
61263: LD_EXP 46
61267: PUSH
61268: LD_VAR 0 1
61272: ARRAY
61273: PPUSH
61274: LD_INT 2
61276: PUSH
61277: LD_INT 30
61279: PUSH
61280: LD_INT 4
61282: PUSH
61283: EMPTY
61284: LIST
61285: LIST
61286: PUSH
61287: LD_INT 30
61289: PUSH
61290: LD_INT 5
61292: PUSH
61293: EMPTY
61294: LIST
61295: LIST
61296: PUSH
61297: EMPTY
61298: LIST
61299: LIST
61300: LIST
61301: PPUSH
61302: CALL_OW 72
61306: PUSH
61307: LD_INT 6
61309: MUL
61310: PLUS
61311: ST_TO_ADDR
// if bcount < tmp then
61312: LD_VAR 0 13
61316: PUSH
61317: LD_VAR 0 4
61321: LESS
61322: IFFALSE 61368
// for i = tmp downto bcount do
61324: LD_ADDR_VAR 0 3
61328: PUSH
61329: DOUBLE
61330: LD_VAR 0 4
61334: INC
61335: ST_TO_ADDR
61336: LD_VAR 0 13
61340: PUSH
61341: FOR_DOWNTO
61342: IFFALSE 61366
// tmp := Delete ( tmp , tmp ) ;
61344: LD_ADDR_VAR 0 4
61348: PUSH
61349: LD_VAR 0 4
61353: PPUSH
61354: LD_VAR 0 4
61358: PPUSH
61359: CALL_OW 3
61363: ST_TO_ADDR
61364: GO 61341
61366: POP
61367: POP
// result := [ tmp , 0 , 0 , p ] ;
61368: LD_ADDR_VAR 0 2
61372: PUSH
61373: LD_VAR 0 4
61377: PUSH
61378: LD_INT 0
61380: PUSH
61381: LD_INT 0
61383: PUSH
61384: LD_VAR 0 11
61388: PUSH
61389: EMPTY
61390: LIST
61391: LIST
61392: LIST
61393: LIST
61394: ST_TO_ADDR
// exit ;
61395: GO 64085
// end ; if not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
61397: LD_EXP 46
61401: PUSH
61402: LD_VAR 0 1
61406: ARRAY
61407: PPUSH
61408: LD_INT 2
61410: PUSH
61411: LD_INT 30
61413: PUSH
61414: LD_INT 6
61416: PUSH
61417: EMPTY
61418: LIST
61419: LIST
61420: PUSH
61421: LD_INT 30
61423: PUSH
61424: LD_INT 7
61426: PUSH
61427: EMPTY
61428: LIST
61429: LIST
61430: PUSH
61431: LD_INT 30
61433: PUSH
61434: LD_INT 8
61436: PUSH
61437: EMPTY
61438: LIST
61439: LIST
61440: PUSH
61441: EMPTY
61442: LIST
61443: LIST
61444: LIST
61445: LIST
61446: PPUSH
61447: CALL_OW 72
61451: NOT
61452: PUSH
61453: LD_EXP 46
61457: PUSH
61458: LD_VAR 0 1
61462: ARRAY
61463: PPUSH
61464: LD_INT 30
61466: PUSH
61467: LD_INT 3
61469: PUSH
61470: EMPTY
61471: LIST
61472: LIST
61473: PPUSH
61474: CALL_OW 72
61478: NOT
61479: AND
61480: IFFALSE 61552
// begin if eng = tmp then
61482: LD_VAR 0 6
61486: PUSH
61487: LD_VAR 0 4
61491: EQUAL
61492: IFFALSE 61496
// exit ;
61494: GO 64085
// mc_class_case_use := Replace ( mc_class_case_use , base , 1 ) ;
61496: LD_ADDR_EXP 88
61500: PUSH
61501: LD_EXP 88
61505: PPUSH
61506: LD_VAR 0 1
61510: PPUSH
61511: LD_INT 1
61513: PPUSH
61514: CALL_OW 1
61518: ST_TO_ADDR
// result := [ 0 , tmp diff eng , 0 , 0 ] ;
61519: LD_ADDR_VAR 0 2
61523: PUSH
61524: LD_INT 0
61526: PUSH
61527: LD_VAR 0 4
61531: PUSH
61532: LD_VAR 0 6
61536: DIFF
61537: PUSH
61538: LD_INT 0
61540: PUSH
61541: LD_INT 0
61543: PUSH
61544: EMPTY
61545: LIST
61546: LIST
61547: LIST
61548: LIST
61549: ST_TO_ADDR
// exit ;
61550: GO 64085
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
61552: LD_EXP 73
61556: PUSH
61557: LD_EXP 72
61561: PUSH
61562: LD_VAR 0 1
61566: ARRAY
61567: ARRAY
61568: PUSH
61569: LD_EXP 46
61573: PUSH
61574: LD_VAR 0 1
61578: ARRAY
61579: PPUSH
61580: LD_INT 2
61582: PUSH
61583: LD_INT 30
61585: PUSH
61586: LD_INT 6
61588: PUSH
61589: EMPTY
61590: LIST
61591: LIST
61592: PUSH
61593: LD_INT 30
61595: PUSH
61596: LD_INT 7
61598: PUSH
61599: EMPTY
61600: LIST
61601: LIST
61602: PUSH
61603: LD_INT 30
61605: PUSH
61606: LD_INT 8
61608: PUSH
61609: EMPTY
61610: LIST
61611: LIST
61612: PUSH
61613: EMPTY
61614: LIST
61615: LIST
61616: LIST
61617: LIST
61618: PPUSH
61619: CALL_OW 72
61623: AND
61624: PUSH
61625: LD_EXP 46
61629: PUSH
61630: LD_VAR 0 1
61634: ARRAY
61635: PPUSH
61636: LD_INT 30
61638: PUSH
61639: LD_INT 3
61641: PUSH
61642: EMPTY
61643: LIST
61644: LIST
61645: PPUSH
61646: CALL_OW 72
61650: NOT
61651: AND
61652: IFFALSE 61866
// begin if sci >= 6 then
61654: LD_VAR 0 8
61658: PUSH
61659: LD_INT 6
61661: GREATEREQUAL
61662: IFFALSE 61666
// exit ;
61664: GO 64085
// mc_class_case_use := Replace ( mc_class_case_use , base , 2 ) ;
61666: LD_ADDR_EXP 88
61670: PUSH
61671: LD_EXP 88
61675: PPUSH
61676: LD_VAR 0 1
61680: PPUSH
61681: LD_INT 2
61683: PPUSH
61684: CALL_OW 1
61688: ST_TO_ADDR
// sort := SortBySkill ( tmp diff sci , 4 ) ;
61689: LD_ADDR_VAR 0 9
61693: PUSH
61694: LD_VAR 0 4
61698: PUSH
61699: LD_VAR 0 8
61703: DIFF
61704: PPUSH
61705: LD_INT 4
61707: PPUSH
61708: CALL 53843 0 2
61712: ST_TO_ADDR
// p := [ ] ;
61713: LD_ADDR_VAR 0 11
61717: PUSH
61718: EMPTY
61719: ST_TO_ADDR
// if sci < 6 and sort > 6 then
61720: LD_VAR 0 8
61724: PUSH
61725: LD_INT 6
61727: LESS
61728: PUSH
61729: LD_VAR 0 9
61733: PUSH
61734: LD_INT 6
61736: GREATER
61737: AND
61738: IFFALSE 61819
// begin for i = 1 to 6 - sci do
61740: LD_ADDR_VAR 0 3
61744: PUSH
61745: DOUBLE
61746: LD_INT 1
61748: DEC
61749: ST_TO_ADDR
61750: LD_INT 6
61752: PUSH
61753: LD_VAR 0 8
61757: MINUS
61758: PUSH
61759: FOR_TO
61760: IFFALSE 61815
// begin p := Insert ( p , p + 1 , sort [ 1 ] ) ;
61762: LD_ADDR_VAR 0 11
61766: PUSH
61767: LD_VAR 0 11
61771: PPUSH
61772: LD_VAR 0 11
61776: PUSH
61777: LD_INT 1
61779: PLUS
61780: PPUSH
61781: LD_VAR 0 9
61785: PUSH
61786: LD_INT 1
61788: ARRAY
61789: PPUSH
61790: CALL_OW 2
61794: ST_TO_ADDR
// sort := Delete ( sort , 1 ) ;
61795: LD_ADDR_VAR 0 9
61799: PUSH
61800: LD_VAR 0 9
61804: PPUSH
61805: LD_INT 1
61807: PPUSH
61808: CALL_OW 3
61812: ST_TO_ADDR
// end ;
61813: GO 61759
61815: POP
61816: POP
// end else
61817: GO 61839
// if sort then
61819: LD_VAR 0 9
61823: IFFALSE 61839
// p := sort [ 1 ] ;
61825: LD_ADDR_VAR 0 11
61829: PUSH
61830: LD_VAR 0 9
61834: PUSH
61835: LD_INT 1
61837: ARRAY
61838: ST_TO_ADDR
// result := [ 0 , 0 , 0 , p ] ;
61839: LD_ADDR_VAR 0 2
61843: PUSH
61844: LD_INT 0
61846: PUSH
61847: LD_INT 0
61849: PUSH
61850: LD_INT 0
61852: PUSH
61853: LD_VAR 0 11
61857: PUSH
61858: EMPTY
61859: LIST
61860: LIST
61861: LIST
61862: LIST
61863: ST_TO_ADDR
// exit ;
61864: GO 64085
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
61866: LD_EXP 73
61870: PUSH
61871: LD_EXP 72
61875: PUSH
61876: LD_VAR 0 1
61880: ARRAY
61881: ARRAY
61882: PUSH
61883: LD_EXP 46
61887: PUSH
61888: LD_VAR 0 1
61892: ARRAY
61893: PPUSH
61894: LD_INT 2
61896: PUSH
61897: LD_INT 30
61899: PUSH
61900: LD_INT 6
61902: PUSH
61903: EMPTY
61904: LIST
61905: LIST
61906: PUSH
61907: LD_INT 30
61909: PUSH
61910: LD_INT 7
61912: PUSH
61913: EMPTY
61914: LIST
61915: LIST
61916: PUSH
61917: LD_INT 30
61919: PUSH
61920: LD_INT 8
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: PUSH
61927: EMPTY
61928: LIST
61929: LIST
61930: LIST
61931: LIST
61932: PPUSH
61933: CALL_OW 72
61937: AND
61938: PUSH
61939: LD_EXP 46
61943: PUSH
61944: LD_VAR 0 1
61948: ARRAY
61949: PPUSH
61950: LD_INT 30
61952: PUSH
61953: LD_INT 3
61955: PUSH
61956: EMPTY
61957: LIST
61958: LIST
61959: PPUSH
61960: CALL_OW 72
61964: AND
61965: IFFALSE 62699
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 3 ) ;
61967: LD_ADDR_EXP 88
61971: PUSH
61972: LD_EXP 88
61976: PPUSH
61977: LD_VAR 0 1
61981: PPUSH
61982: LD_INT 3
61984: PPUSH
61985: CALL_OW 1
61989: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
61990: LD_ADDR_VAR 0 2
61994: PUSH
61995: LD_INT 0
61997: PUSH
61998: LD_INT 0
62000: PUSH
62001: LD_INT 0
62003: PUSH
62004: LD_INT 0
62006: PUSH
62007: EMPTY
62008: LIST
62009: LIST
62010: LIST
62011: LIST
62012: ST_TO_ADDR
// if not eng then
62013: LD_VAR 0 6
62017: NOT
62018: IFFALSE 62081
// begin p := SortBySkill ( tmp , 2 ) [ 1 ] ;
62020: LD_ADDR_VAR 0 11
62024: PUSH
62025: LD_VAR 0 4
62029: PPUSH
62030: LD_INT 2
62032: PPUSH
62033: CALL 53843 0 2
62037: PUSH
62038: LD_INT 1
62040: ARRAY
62041: ST_TO_ADDR
// result := Replace ( result , 2 , p ) ;
62042: LD_ADDR_VAR 0 2
62046: PUSH
62047: LD_VAR 0 2
62051: PPUSH
62052: LD_INT 2
62054: PPUSH
62055: LD_VAR 0 11
62059: PPUSH
62060: CALL_OW 1
62064: ST_TO_ADDR
// tmp := tmp diff p ;
62065: LD_ADDR_VAR 0 4
62069: PUSH
62070: LD_VAR 0 4
62074: PUSH
62075: LD_VAR 0 11
62079: DIFF
62080: ST_TO_ADDR
// end ; if tmp and sci < 6 then
62081: LD_VAR 0 4
62085: PUSH
62086: LD_VAR 0 8
62090: PUSH
62091: LD_INT 6
62093: LESS
62094: AND
62095: IFFALSE 62283
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 4 ) ;
62097: LD_ADDR_VAR 0 9
62101: PUSH
62102: LD_VAR 0 4
62106: PUSH
62107: LD_VAR 0 8
62111: PUSH
62112: LD_VAR 0 7
62116: UNION
62117: DIFF
62118: PPUSH
62119: LD_INT 4
62121: PPUSH
62122: CALL 53843 0 2
62126: ST_TO_ADDR
// p := [ ] ;
62127: LD_ADDR_VAR 0 11
62131: PUSH
62132: EMPTY
62133: ST_TO_ADDR
// if sort then
62134: LD_VAR 0 9
62138: IFFALSE 62254
// for i = 1 to 6 - sci do
62140: LD_ADDR_VAR 0 3
62144: PUSH
62145: DOUBLE
62146: LD_INT 1
62148: DEC
62149: ST_TO_ADDR
62150: LD_INT 6
62152: PUSH
62153: LD_VAR 0 8
62157: MINUS
62158: PUSH
62159: FOR_TO
62160: IFFALSE 62252
// begin if i = sort then
62162: LD_VAR 0 3
62166: PUSH
62167: LD_VAR 0 9
62171: EQUAL
62172: IFFALSE 62176
// break ;
62174: GO 62252
// if GetClass ( i ) = 4 then
62176: LD_VAR 0 3
62180: PPUSH
62181: CALL_OW 257
62185: PUSH
62186: LD_INT 4
62188: EQUAL
62189: IFFALSE 62193
// continue ;
62191: GO 62159
// p := Insert ( p , p + 1 , sort [ i ] ) ;
62193: LD_ADDR_VAR 0 11
62197: PUSH
62198: LD_VAR 0 11
62202: PPUSH
62203: LD_VAR 0 11
62207: PUSH
62208: LD_INT 1
62210: PLUS
62211: PPUSH
62212: LD_VAR 0 9
62216: PUSH
62217: LD_VAR 0 3
62221: ARRAY
62222: PPUSH
62223: CALL_OW 2
62227: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
62228: LD_ADDR_VAR 0 4
62232: PUSH
62233: LD_VAR 0 4
62237: PUSH
62238: LD_VAR 0 9
62242: PUSH
62243: LD_VAR 0 3
62247: ARRAY
62248: DIFF
62249: ST_TO_ADDR
// end ;
62250: GO 62159
62252: POP
62253: POP
// if p then
62254: LD_VAR 0 11
62258: IFFALSE 62283
// result := Replace ( result , 4 , p ) ;
62260: LD_ADDR_VAR 0 2
62264: PUSH
62265: LD_VAR 0 2
62269: PPUSH
62270: LD_INT 4
62272: PPUSH
62273: LD_VAR 0 11
62277: PPUSH
62278: CALL_OW 1
62282: ST_TO_ADDR
// end ; if tmp and mech < 6 then
62283: LD_VAR 0 4
62287: PUSH
62288: LD_VAR 0 7
62292: PUSH
62293: LD_INT 6
62295: LESS
62296: AND
62297: IFFALSE 62485
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
62299: LD_ADDR_VAR 0 9
62303: PUSH
62304: LD_VAR 0 4
62308: PUSH
62309: LD_VAR 0 8
62313: PUSH
62314: LD_VAR 0 7
62318: UNION
62319: DIFF
62320: PPUSH
62321: LD_INT 3
62323: PPUSH
62324: CALL 53843 0 2
62328: ST_TO_ADDR
// p := [ ] ;
62329: LD_ADDR_VAR 0 11
62333: PUSH
62334: EMPTY
62335: ST_TO_ADDR
// if sort then
62336: LD_VAR 0 9
62340: IFFALSE 62456
// for i = 1 to 6 - mech do
62342: LD_ADDR_VAR 0 3
62346: PUSH
62347: DOUBLE
62348: LD_INT 1
62350: DEC
62351: ST_TO_ADDR
62352: LD_INT 6
62354: PUSH
62355: LD_VAR 0 7
62359: MINUS
62360: PUSH
62361: FOR_TO
62362: IFFALSE 62454
// begin if i = sort then
62364: LD_VAR 0 3
62368: PUSH
62369: LD_VAR 0 9
62373: EQUAL
62374: IFFALSE 62378
// break ;
62376: GO 62454
// if GetClass ( i ) = 3 then
62378: LD_VAR 0 3
62382: PPUSH
62383: CALL_OW 257
62387: PUSH
62388: LD_INT 3
62390: EQUAL
62391: IFFALSE 62395
// continue ;
62393: GO 62361
// p := Insert ( p , p + 1 , sort [ i ] ) ;
62395: LD_ADDR_VAR 0 11
62399: PUSH
62400: LD_VAR 0 11
62404: PPUSH
62405: LD_VAR 0 11
62409: PUSH
62410: LD_INT 1
62412: PLUS
62413: PPUSH
62414: LD_VAR 0 9
62418: PUSH
62419: LD_VAR 0 3
62423: ARRAY
62424: PPUSH
62425: CALL_OW 2
62429: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
62430: LD_ADDR_VAR 0 4
62434: PUSH
62435: LD_VAR 0 4
62439: PUSH
62440: LD_VAR 0 9
62444: PUSH
62445: LD_VAR 0 3
62449: ARRAY
62450: DIFF
62451: ST_TO_ADDR
// end ;
62452: GO 62361
62454: POP
62455: POP
// if p then
62456: LD_VAR 0 11
62460: IFFALSE 62485
// result := Replace ( result , 3 , p ) ;
62462: LD_ADDR_VAR 0 2
62466: PUSH
62467: LD_VAR 0 2
62471: PPUSH
62472: LD_INT 3
62474: PPUSH
62475: LD_VAR 0 11
62479: PPUSH
62480: CALL_OW 1
62484: ST_TO_ADDR
// end ; if tmp > 6 and eng < 6 then
62485: LD_VAR 0 4
62489: PUSH
62490: LD_INT 6
62492: GREATER
62493: PUSH
62494: LD_VAR 0 6
62498: PUSH
62499: LD_INT 6
62501: LESS
62502: AND
62503: IFFALSE 62697
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
62505: LD_ADDR_VAR 0 9
62509: PUSH
62510: LD_VAR 0 4
62514: PUSH
62515: LD_VAR 0 8
62519: PUSH
62520: LD_VAR 0 7
62524: UNION
62525: PUSH
62526: LD_VAR 0 6
62530: UNION
62531: DIFF
62532: PPUSH
62533: LD_INT 2
62535: PPUSH
62536: CALL 53843 0 2
62540: ST_TO_ADDR
// p := [ ] ;
62541: LD_ADDR_VAR 0 11
62545: PUSH
62546: EMPTY
62547: ST_TO_ADDR
// if sort then
62548: LD_VAR 0 9
62552: IFFALSE 62668
// for i = 1 to 6 - eng do
62554: LD_ADDR_VAR 0 3
62558: PUSH
62559: DOUBLE
62560: LD_INT 1
62562: DEC
62563: ST_TO_ADDR
62564: LD_INT 6
62566: PUSH
62567: LD_VAR 0 6
62571: MINUS
62572: PUSH
62573: FOR_TO
62574: IFFALSE 62666
// begin if i = sort then
62576: LD_VAR 0 3
62580: PUSH
62581: LD_VAR 0 9
62585: EQUAL
62586: IFFALSE 62590
// break ;
62588: GO 62666
// if GetClass ( i ) = 2 then
62590: LD_VAR 0 3
62594: PPUSH
62595: CALL_OW 257
62599: PUSH
62600: LD_INT 2
62602: EQUAL
62603: IFFALSE 62607
// continue ;
62605: GO 62573
// p := Insert ( p , p + 1 , sort [ i ] ) ;
62607: LD_ADDR_VAR 0 11
62611: PUSH
62612: LD_VAR 0 11
62616: PPUSH
62617: LD_VAR 0 11
62621: PUSH
62622: LD_INT 1
62624: PLUS
62625: PPUSH
62626: LD_VAR 0 9
62630: PUSH
62631: LD_VAR 0 3
62635: ARRAY
62636: PPUSH
62637: CALL_OW 2
62641: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
62642: LD_ADDR_VAR 0 4
62646: PUSH
62647: LD_VAR 0 4
62651: PUSH
62652: LD_VAR 0 9
62656: PUSH
62657: LD_VAR 0 3
62661: ARRAY
62662: DIFF
62663: ST_TO_ADDR
// end ;
62664: GO 62573
62666: POP
62667: POP
// if p then
62668: LD_VAR 0 11
62672: IFFALSE 62697
// result := Replace ( result , 2 , p ) ;
62674: LD_ADDR_VAR 0 2
62678: PUSH
62679: LD_VAR 0 2
62683: PPUSH
62684: LD_INT 2
62686: PPUSH
62687: LD_VAR 0 11
62691: PPUSH
62692: CALL_OW 1
62696: ST_TO_ADDR
// end ; exit ;
62697: GO 64085
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and mc_build_list [ base ] then
62699: LD_EXP 73
62703: PUSH
62704: LD_EXP 72
62708: PUSH
62709: LD_VAR 0 1
62713: ARRAY
62714: ARRAY
62715: NOT
62716: PUSH
62717: LD_EXP 46
62721: PUSH
62722: LD_VAR 0 1
62726: ARRAY
62727: PPUSH
62728: LD_INT 30
62730: PUSH
62731: LD_INT 3
62733: PUSH
62734: EMPTY
62735: LIST
62736: LIST
62737: PPUSH
62738: CALL_OW 72
62742: AND
62743: PUSH
62744: LD_EXP 51
62748: PUSH
62749: LD_VAR 0 1
62753: ARRAY
62754: AND
62755: IFFALSE 63363
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 5 ) ;
62757: LD_ADDR_EXP 88
62761: PUSH
62762: LD_EXP 88
62766: PPUSH
62767: LD_VAR 0 1
62771: PPUSH
62772: LD_INT 5
62774: PPUSH
62775: CALL_OW 1
62779: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
62780: LD_ADDR_VAR 0 2
62784: PUSH
62785: LD_INT 0
62787: PUSH
62788: LD_INT 0
62790: PUSH
62791: LD_INT 0
62793: PUSH
62794: LD_INT 0
62796: PUSH
62797: EMPTY
62798: LIST
62799: LIST
62800: LIST
62801: LIST
62802: ST_TO_ADDR
// if sci > 1 then
62803: LD_VAR 0 8
62807: PUSH
62808: LD_INT 1
62810: GREATER
62811: IFFALSE 62839
// tmp := tmp diff ( sci diff sci [ 1 ] ) ;
62813: LD_ADDR_VAR 0 4
62817: PUSH
62818: LD_VAR 0 4
62822: PUSH
62823: LD_VAR 0 8
62827: PUSH
62828: LD_VAR 0 8
62832: PUSH
62833: LD_INT 1
62835: ARRAY
62836: DIFF
62837: DIFF
62838: ST_TO_ADDR
// if tmp and not sci then
62839: LD_VAR 0 4
62843: PUSH
62844: LD_VAR 0 8
62848: NOT
62849: AND
62850: IFFALSE 62919
// begin sort := SortBySkill ( tmp , 4 ) ;
62852: LD_ADDR_VAR 0 9
62856: PUSH
62857: LD_VAR 0 4
62861: PPUSH
62862: LD_INT 4
62864: PPUSH
62865: CALL 53843 0 2
62869: ST_TO_ADDR
// if sort then
62870: LD_VAR 0 9
62874: IFFALSE 62890
// p := sort [ 1 ] ;
62876: LD_ADDR_VAR 0 11
62880: PUSH
62881: LD_VAR 0 9
62885: PUSH
62886: LD_INT 1
62888: ARRAY
62889: ST_TO_ADDR
// if p then
62890: LD_VAR 0 11
62894: IFFALSE 62919
// result := Replace ( result , 4 , p ) ;
62896: LD_ADDR_VAR 0 2
62900: PUSH
62901: LD_VAR 0 2
62905: PPUSH
62906: LD_INT 4
62908: PPUSH
62909: LD_VAR 0 11
62913: PPUSH
62914: CALL_OW 1
62918: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
62919: LD_ADDR_VAR 0 4
62923: PUSH
62924: LD_VAR 0 4
62928: PUSH
62929: LD_VAR 0 7
62933: DIFF
62934: ST_TO_ADDR
// if tmp and mech < 6 then
62935: LD_VAR 0 4
62939: PUSH
62940: LD_VAR 0 7
62944: PUSH
62945: LD_INT 6
62947: LESS
62948: AND
62949: IFFALSE 63137
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
62951: LD_ADDR_VAR 0 9
62955: PUSH
62956: LD_VAR 0 4
62960: PUSH
62961: LD_VAR 0 8
62965: PUSH
62966: LD_VAR 0 7
62970: UNION
62971: DIFF
62972: PPUSH
62973: LD_INT 3
62975: PPUSH
62976: CALL 53843 0 2
62980: ST_TO_ADDR
// p := [ ] ;
62981: LD_ADDR_VAR 0 11
62985: PUSH
62986: EMPTY
62987: ST_TO_ADDR
// if sort then
62988: LD_VAR 0 9
62992: IFFALSE 63108
// for i = 1 to 6 - mech do
62994: LD_ADDR_VAR 0 3
62998: PUSH
62999: DOUBLE
63000: LD_INT 1
63002: DEC
63003: ST_TO_ADDR
63004: LD_INT 6
63006: PUSH
63007: LD_VAR 0 7
63011: MINUS
63012: PUSH
63013: FOR_TO
63014: IFFALSE 63106
// begin if i = sort then
63016: LD_VAR 0 3
63020: PUSH
63021: LD_VAR 0 9
63025: EQUAL
63026: IFFALSE 63030
// break ;
63028: GO 63106
// if GetClass ( i ) = 3 then
63030: LD_VAR 0 3
63034: PPUSH
63035: CALL_OW 257
63039: PUSH
63040: LD_INT 3
63042: EQUAL
63043: IFFALSE 63047
// continue ;
63045: GO 63013
// p := Insert ( p , p + 1 , sort [ i ] ) ;
63047: LD_ADDR_VAR 0 11
63051: PUSH
63052: LD_VAR 0 11
63056: PPUSH
63057: LD_VAR 0 11
63061: PUSH
63062: LD_INT 1
63064: PLUS
63065: PPUSH
63066: LD_VAR 0 9
63070: PUSH
63071: LD_VAR 0 3
63075: ARRAY
63076: PPUSH
63077: CALL_OW 2
63081: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
63082: LD_ADDR_VAR 0 4
63086: PUSH
63087: LD_VAR 0 4
63091: PUSH
63092: LD_VAR 0 9
63096: PUSH
63097: LD_VAR 0 3
63101: ARRAY
63102: DIFF
63103: ST_TO_ADDR
// end ;
63104: GO 63013
63106: POP
63107: POP
// if p then
63108: LD_VAR 0 11
63112: IFFALSE 63137
// result := Replace ( result , 3 , p ) ;
63114: LD_ADDR_VAR 0 2
63118: PUSH
63119: LD_VAR 0 2
63123: PPUSH
63124: LD_INT 3
63126: PPUSH
63127: LD_VAR 0 11
63131: PPUSH
63132: CALL_OW 1
63136: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
63137: LD_ADDR_VAR 0 4
63141: PUSH
63142: LD_VAR 0 4
63146: PUSH
63147: LD_VAR 0 6
63151: DIFF
63152: ST_TO_ADDR
// if tmp and eng < 6 then
63153: LD_VAR 0 4
63157: PUSH
63158: LD_VAR 0 6
63162: PUSH
63163: LD_INT 6
63165: LESS
63166: AND
63167: IFFALSE 63361
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
63169: LD_ADDR_VAR 0 9
63173: PUSH
63174: LD_VAR 0 4
63178: PUSH
63179: LD_VAR 0 8
63183: PUSH
63184: LD_VAR 0 7
63188: UNION
63189: PUSH
63190: LD_VAR 0 6
63194: UNION
63195: DIFF
63196: PPUSH
63197: LD_INT 2
63199: PPUSH
63200: CALL 53843 0 2
63204: ST_TO_ADDR
// p := [ ] ;
63205: LD_ADDR_VAR 0 11
63209: PUSH
63210: EMPTY
63211: ST_TO_ADDR
// if sort then
63212: LD_VAR 0 9
63216: IFFALSE 63332
// for i = 1 to 6 - eng do
63218: LD_ADDR_VAR 0 3
63222: PUSH
63223: DOUBLE
63224: LD_INT 1
63226: DEC
63227: ST_TO_ADDR
63228: LD_INT 6
63230: PUSH
63231: LD_VAR 0 6
63235: MINUS
63236: PUSH
63237: FOR_TO
63238: IFFALSE 63330
// begin if i = sort then
63240: LD_VAR 0 3
63244: PUSH
63245: LD_VAR 0 9
63249: EQUAL
63250: IFFALSE 63254
// break ;
63252: GO 63330
// if GetClass ( i ) = 2 then
63254: LD_VAR 0 3
63258: PPUSH
63259: CALL_OW 257
63263: PUSH
63264: LD_INT 2
63266: EQUAL
63267: IFFALSE 63271
// continue ;
63269: GO 63237
// p := Insert ( p , p + 1 , sort [ i ] ) ;
63271: LD_ADDR_VAR 0 11
63275: PUSH
63276: LD_VAR 0 11
63280: PPUSH
63281: LD_VAR 0 11
63285: PUSH
63286: LD_INT 1
63288: PLUS
63289: PPUSH
63290: LD_VAR 0 9
63294: PUSH
63295: LD_VAR 0 3
63299: ARRAY
63300: PPUSH
63301: CALL_OW 2
63305: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
63306: LD_ADDR_VAR 0 4
63310: PUSH
63311: LD_VAR 0 4
63315: PUSH
63316: LD_VAR 0 9
63320: PUSH
63321: LD_VAR 0 3
63325: ARRAY
63326: DIFF
63327: ST_TO_ADDR
// end ;
63328: GO 63237
63330: POP
63331: POP
// if p then
63332: LD_VAR 0 11
63336: IFFALSE 63361
// result := Replace ( result , 2 , p ) ;
63338: LD_ADDR_VAR 0 2
63342: PUSH
63343: LD_VAR 0 2
63347: PPUSH
63348: LD_INT 2
63350: PPUSH
63351: LD_VAR 0 11
63355: PPUSH
63356: CALL_OW 1
63360: ST_TO_ADDR
// end ; exit ;
63361: GO 64085
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and not mc_build_list [ base ] then
63363: LD_EXP 73
63367: PUSH
63368: LD_EXP 72
63372: PUSH
63373: LD_VAR 0 1
63377: ARRAY
63378: ARRAY
63379: NOT
63380: PUSH
63381: LD_EXP 46
63385: PUSH
63386: LD_VAR 0 1
63390: ARRAY
63391: PPUSH
63392: LD_INT 30
63394: PUSH
63395: LD_INT 3
63397: PUSH
63398: EMPTY
63399: LIST
63400: LIST
63401: PPUSH
63402: CALL_OW 72
63406: AND
63407: PUSH
63408: LD_EXP 51
63412: PUSH
63413: LD_VAR 0 1
63417: ARRAY
63418: NOT
63419: AND
63420: IFFALSE 64085
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 6 ) ;
63422: LD_ADDR_EXP 88
63426: PUSH
63427: LD_EXP 88
63431: PPUSH
63432: LD_VAR 0 1
63436: PPUSH
63437: LD_INT 6
63439: PPUSH
63440: CALL_OW 1
63444: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
63445: LD_ADDR_VAR 0 2
63449: PUSH
63450: LD_INT 0
63452: PUSH
63453: LD_INT 0
63455: PUSH
63456: LD_INT 0
63458: PUSH
63459: LD_INT 0
63461: PUSH
63462: EMPTY
63463: LIST
63464: LIST
63465: LIST
63466: LIST
63467: ST_TO_ADDR
// if sci >= 1 then
63468: LD_VAR 0 8
63472: PUSH
63473: LD_INT 1
63475: GREATEREQUAL
63476: IFFALSE 63498
// tmp := tmp diff sci [ 1 ] ;
63478: LD_ADDR_VAR 0 4
63482: PUSH
63483: LD_VAR 0 4
63487: PUSH
63488: LD_VAR 0 8
63492: PUSH
63493: LD_INT 1
63495: ARRAY
63496: DIFF
63497: ST_TO_ADDR
// if tmp and not sci then
63498: LD_VAR 0 4
63502: PUSH
63503: LD_VAR 0 8
63507: NOT
63508: AND
63509: IFFALSE 63578
// begin sort := SortBySkill ( tmp , 4 ) ;
63511: LD_ADDR_VAR 0 9
63515: PUSH
63516: LD_VAR 0 4
63520: PPUSH
63521: LD_INT 4
63523: PPUSH
63524: CALL 53843 0 2
63528: ST_TO_ADDR
// if sort then
63529: LD_VAR 0 9
63533: IFFALSE 63549
// p := sort [ 1 ] ;
63535: LD_ADDR_VAR 0 11
63539: PUSH
63540: LD_VAR 0 9
63544: PUSH
63545: LD_INT 1
63547: ARRAY
63548: ST_TO_ADDR
// if p then
63549: LD_VAR 0 11
63553: IFFALSE 63578
// result := Replace ( result , 4 , p ) ;
63555: LD_ADDR_VAR 0 2
63559: PUSH
63560: LD_VAR 0 2
63564: PPUSH
63565: LD_INT 4
63567: PPUSH
63568: LD_VAR 0 11
63572: PPUSH
63573: CALL_OW 1
63577: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
63578: LD_ADDR_VAR 0 4
63582: PUSH
63583: LD_VAR 0 4
63587: PUSH
63588: LD_VAR 0 7
63592: DIFF
63593: ST_TO_ADDR
// if tmp and mech < 6 then
63594: LD_VAR 0 4
63598: PUSH
63599: LD_VAR 0 7
63603: PUSH
63604: LD_INT 6
63606: LESS
63607: AND
63608: IFFALSE 63790
// begin sort := SortBySkill ( tmp diff mech , 3 ) ;
63610: LD_ADDR_VAR 0 9
63614: PUSH
63615: LD_VAR 0 4
63619: PUSH
63620: LD_VAR 0 7
63624: DIFF
63625: PPUSH
63626: LD_INT 3
63628: PPUSH
63629: CALL 53843 0 2
63633: ST_TO_ADDR
// p := [ ] ;
63634: LD_ADDR_VAR 0 11
63638: PUSH
63639: EMPTY
63640: ST_TO_ADDR
// if sort then
63641: LD_VAR 0 9
63645: IFFALSE 63761
// for i = 1 to 6 - mech do
63647: LD_ADDR_VAR 0 3
63651: PUSH
63652: DOUBLE
63653: LD_INT 1
63655: DEC
63656: ST_TO_ADDR
63657: LD_INT 6
63659: PUSH
63660: LD_VAR 0 7
63664: MINUS
63665: PUSH
63666: FOR_TO
63667: IFFALSE 63759
// begin if i = sort then
63669: LD_VAR 0 3
63673: PUSH
63674: LD_VAR 0 9
63678: EQUAL
63679: IFFALSE 63683
// break ;
63681: GO 63759
// if GetClass ( i ) = 3 then
63683: LD_VAR 0 3
63687: PPUSH
63688: CALL_OW 257
63692: PUSH
63693: LD_INT 3
63695: EQUAL
63696: IFFALSE 63700
// continue ;
63698: GO 63666
// p := Insert ( p , p + 1 , sort [ i ] ) ;
63700: LD_ADDR_VAR 0 11
63704: PUSH
63705: LD_VAR 0 11
63709: PPUSH
63710: LD_VAR 0 11
63714: PUSH
63715: LD_INT 1
63717: PLUS
63718: PPUSH
63719: LD_VAR 0 9
63723: PUSH
63724: LD_VAR 0 3
63728: ARRAY
63729: PPUSH
63730: CALL_OW 2
63734: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
63735: LD_ADDR_VAR 0 4
63739: PUSH
63740: LD_VAR 0 4
63744: PUSH
63745: LD_VAR 0 9
63749: PUSH
63750: LD_VAR 0 3
63754: ARRAY
63755: DIFF
63756: ST_TO_ADDR
// end ;
63757: GO 63666
63759: POP
63760: POP
// if p then
63761: LD_VAR 0 11
63765: IFFALSE 63790
// result := Replace ( result , 3 , p ) ;
63767: LD_ADDR_VAR 0 2
63771: PUSH
63772: LD_VAR 0 2
63776: PPUSH
63777: LD_INT 3
63779: PPUSH
63780: LD_VAR 0 11
63784: PPUSH
63785: CALL_OW 1
63789: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
63790: LD_ADDR_VAR 0 4
63794: PUSH
63795: LD_VAR 0 4
63799: PUSH
63800: LD_VAR 0 6
63804: DIFF
63805: ST_TO_ADDR
// if tmp and eng < 4 then
63806: LD_VAR 0 4
63810: PUSH
63811: LD_VAR 0 6
63815: PUSH
63816: LD_INT 4
63818: LESS
63819: AND
63820: IFFALSE 64010
// begin sort := SortBySkill ( tmp diff ( mech union eng ) , 2 ) ;
63822: LD_ADDR_VAR 0 9
63826: PUSH
63827: LD_VAR 0 4
63831: PUSH
63832: LD_VAR 0 7
63836: PUSH
63837: LD_VAR 0 6
63841: UNION
63842: DIFF
63843: PPUSH
63844: LD_INT 2
63846: PPUSH
63847: CALL 53843 0 2
63851: ST_TO_ADDR
// p := [ ] ;
63852: LD_ADDR_VAR 0 11
63856: PUSH
63857: EMPTY
63858: ST_TO_ADDR
// if sort then
63859: LD_VAR 0 9
63863: IFFALSE 63979
// for i = 1 to 4 - eng do
63865: LD_ADDR_VAR 0 3
63869: PUSH
63870: DOUBLE
63871: LD_INT 1
63873: DEC
63874: ST_TO_ADDR
63875: LD_INT 4
63877: PUSH
63878: LD_VAR 0 6
63882: MINUS
63883: PUSH
63884: FOR_TO
63885: IFFALSE 63977
// begin if i = sort then
63887: LD_VAR 0 3
63891: PUSH
63892: LD_VAR 0 9
63896: EQUAL
63897: IFFALSE 63901
// break ;
63899: GO 63977
// if GetClass ( i ) = 2 then
63901: LD_VAR 0 3
63905: PPUSH
63906: CALL_OW 257
63910: PUSH
63911: LD_INT 2
63913: EQUAL
63914: IFFALSE 63918
// continue ;
63916: GO 63884
// p := Insert ( p , p + 1 , sort [ i ] ) ;
63918: LD_ADDR_VAR 0 11
63922: PUSH
63923: LD_VAR 0 11
63927: PPUSH
63928: LD_VAR 0 11
63932: PUSH
63933: LD_INT 1
63935: PLUS
63936: PPUSH
63937: LD_VAR 0 9
63941: PUSH
63942: LD_VAR 0 3
63946: ARRAY
63947: PPUSH
63948: CALL_OW 2
63952: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
63953: LD_ADDR_VAR 0 4
63957: PUSH
63958: LD_VAR 0 4
63962: PUSH
63963: LD_VAR 0 9
63967: PUSH
63968: LD_VAR 0 3
63972: ARRAY
63973: DIFF
63974: ST_TO_ADDR
// end ;
63975: GO 63884
63977: POP
63978: POP
// if p then
63979: LD_VAR 0 11
63983: IFFALSE 64008
// result := Replace ( result , 2 , p ) ;
63985: LD_ADDR_VAR 0 2
63989: PUSH
63990: LD_VAR 0 2
63994: PPUSH
63995: LD_INT 2
63997: PPUSH
63998: LD_VAR 0 11
64002: PPUSH
64003: CALL_OW 1
64007: ST_TO_ADDR
// end else
64008: GO 64054
// for i = eng downto 5 do
64010: LD_ADDR_VAR 0 3
64014: PUSH
64015: DOUBLE
64016: LD_VAR 0 6
64020: INC
64021: ST_TO_ADDR
64022: LD_INT 5
64024: PUSH
64025: FOR_DOWNTO
64026: IFFALSE 64052
// tmp := tmp union eng [ i ] ;
64028: LD_ADDR_VAR 0 4
64032: PUSH
64033: LD_VAR 0 4
64037: PUSH
64038: LD_VAR 0 6
64042: PUSH
64043: LD_VAR 0 3
64047: ARRAY
64048: UNION
64049: ST_TO_ADDR
64050: GO 64025
64052: POP
64053: POP
// result := Replace ( result , 1 , tmp diff sol ) ;
64054: LD_ADDR_VAR 0 2
64058: PUSH
64059: LD_VAR 0 2
64063: PPUSH
64064: LD_INT 1
64066: PPUSH
64067: LD_VAR 0 4
64071: PUSH
64072: LD_VAR 0 5
64076: DIFF
64077: PPUSH
64078: CALL_OW 1
64082: ST_TO_ADDR
// exit ;
64083: GO 64085
// end ; end ;
64085: LD_VAR 0 2
64089: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
64090: LD_INT 0
64092: PPUSH
64093: PPUSH
64094: PPUSH
// if not mc_bases then
64095: LD_EXP 46
64099: NOT
64100: IFFALSE 64104
// exit ;
64102: GO 64210
// for i = 1 to mc_bases do
64104: LD_ADDR_VAR 0 2
64108: PUSH
64109: DOUBLE
64110: LD_INT 1
64112: DEC
64113: ST_TO_ADDR
64114: LD_EXP 46
64118: PUSH
64119: FOR_TO
64120: IFFALSE 64201
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
64122: LD_ADDR_VAR 0 3
64126: PUSH
64127: LD_EXP 46
64131: PUSH
64132: LD_VAR 0 2
64136: ARRAY
64137: PPUSH
64138: LD_INT 21
64140: PUSH
64141: LD_INT 3
64143: PUSH
64144: EMPTY
64145: LIST
64146: LIST
64147: PUSH
64148: LD_INT 3
64150: PUSH
64151: LD_INT 24
64153: PUSH
64154: LD_INT 1000
64156: PUSH
64157: EMPTY
64158: LIST
64159: LIST
64160: PUSH
64161: EMPTY
64162: LIST
64163: LIST
64164: PUSH
64165: EMPTY
64166: LIST
64167: LIST
64168: PPUSH
64169: CALL_OW 72
64173: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
64174: LD_ADDR_EXP 47
64178: PUSH
64179: LD_EXP 47
64183: PPUSH
64184: LD_VAR 0 2
64188: PPUSH
64189: LD_VAR 0 3
64193: PPUSH
64194: CALL_OW 1
64198: ST_TO_ADDR
// end ;
64199: GO 64119
64201: POP
64202: POP
// RaiseSailEvent ( 101 ) ;
64203: LD_INT 101
64205: PPUSH
64206: CALL_OW 427
// end ;
64210: LD_VAR 0 1
64214: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
64215: LD_INT 0
64217: PPUSH
64218: PPUSH
64219: PPUSH
64220: PPUSH
64221: PPUSH
64222: PPUSH
64223: PPUSH
// if not mc_bases then
64224: LD_EXP 46
64228: NOT
64229: IFFALSE 64233
// exit ;
64231: GO 64795
// for i = 1 to mc_bases do
64233: LD_ADDR_VAR 0 2
64237: PUSH
64238: DOUBLE
64239: LD_INT 1
64241: DEC
64242: ST_TO_ADDR
64243: LD_EXP 46
64247: PUSH
64248: FOR_TO
64249: IFFALSE 64786
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 800 ] ] ] ] ) ;
64251: LD_ADDR_VAR 0 5
64255: PUSH
64256: LD_EXP 46
64260: PUSH
64261: LD_VAR 0 2
64265: ARRAY
64266: PUSH
64267: LD_EXP 75
64271: PUSH
64272: LD_VAR 0 2
64276: ARRAY
64277: UNION
64278: PPUSH
64279: LD_INT 21
64281: PUSH
64282: LD_INT 1
64284: PUSH
64285: EMPTY
64286: LIST
64287: LIST
64288: PUSH
64289: LD_INT 1
64291: PUSH
64292: LD_INT 3
64294: PUSH
64295: LD_INT 54
64297: PUSH
64298: EMPTY
64299: LIST
64300: PUSH
64301: EMPTY
64302: LIST
64303: LIST
64304: PUSH
64305: LD_INT 3
64307: PUSH
64308: LD_INT 24
64310: PUSH
64311: LD_INT 800
64313: PUSH
64314: EMPTY
64315: LIST
64316: LIST
64317: PUSH
64318: EMPTY
64319: LIST
64320: LIST
64321: PUSH
64322: EMPTY
64323: LIST
64324: LIST
64325: LIST
64326: PUSH
64327: EMPTY
64328: LIST
64329: LIST
64330: PPUSH
64331: CALL_OW 72
64335: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
64336: LD_ADDR_VAR 0 6
64340: PUSH
64341: LD_EXP 46
64345: PUSH
64346: LD_VAR 0 2
64350: ARRAY
64351: PPUSH
64352: LD_INT 21
64354: PUSH
64355: LD_INT 1
64357: PUSH
64358: EMPTY
64359: LIST
64360: LIST
64361: PUSH
64362: LD_INT 1
64364: PUSH
64365: LD_INT 3
64367: PUSH
64368: LD_INT 54
64370: PUSH
64371: EMPTY
64372: LIST
64373: PUSH
64374: EMPTY
64375: LIST
64376: LIST
64377: PUSH
64378: LD_INT 3
64380: PUSH
64381: LD_INT 24
64383: PUSH
64384: LD_INT 250
64386: PUSH
64387: EMPTY
64388: LIST
64389: LIST
64390: PUSH
64391: EMPTY
64392: LIST
64393: LIST
64394: PUSH
64395: EMPTY
64396: LIST
64397: LIST
64398: LIST
64399: PUSH
64400: EMPTY
64401: LIST
64402: LIST
64403: PPUSH
64404: CALL_OW 72
64408: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
64409: LD_ADDR_VAR 0 7
64413: PUSH
64414: LD_VAR 0 5
64418: PUSH
64419: LD_VAR 0 6
64423: DIFF
64424: ST_TO_ADDR
// if not need_heal_1 then
64425: LD_VAR 0 6
64429: NOT
64430: IFFALSE 64463
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , [ ] ) else
64432: LD_ADDR_EXP 49
64436: PUSH
64437: LD_EXP 49
64441: PPUSH
64442: LD_VAR 0 2
64446: PUSH
64447: LD_INT 1
64449: PUSH
64450: EMPTY
64451: LIST
64452: LIST
64453: PPUSH
64454: EMPTY
64455: PPUSH
64456: CALL 24294 0 3
64460: ST_TO_ADDR
64461: GO 64533
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , UnitFilter ( mc_need_heal [ i ] [ 1 ] , [ f_not , [ f_lives , 1000 ] ] ) union need_heal_1 ) ;
64463: LD_ADDR_EXP 49
64467: PUSH
64468: LD_EXP 49
64472: PPUSH
64473: LD_VAR 0 2
64477: PUSH
64478: LD_INT 1
64480: PUSH
64481: EMPTY
64482: LIST
64483: LIST
64484: PPUSH
64485: LD_EXP 49
64489: PUSH
64490: LD_VAR 0 2
64494: ARRAY
64495: PUSH
64496: LD_INT 1
64498: ARRAY
64499: PPUSH
64500: LD_INT 3
64502: PUSH
64503: LD_INT 24
64505: PUSH
64506: LD_INT 1000
64508: PUSH
64509: EMPTY
64510: LIST
64511: LIST
64512: PUSH
64513: EMPTY
64514: LIST
64515: LIST
64516: PPUSH
64517: CALL_OW 72
64521: PUSH
64522: LD_VAR 0 6
64526: UNION
64527: PPUSH
64528: CALL 24294 0 3
64532: ST_TO_ADDR
// if not need_heal_2 then
64533: LD_VAR 0 7
64537: NOT
64538: IFFALSE 64571
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , [ ] ) else
64540: LD_ADDR_EXP 49
64544: PUSH
64545: LD_EXP 49
64549: PPUSH
64550: LD_VAR 0 2
64554: PUSH
64555: LD_INT 2
64557: PUSH
64558: EMPTY
64559: LIST
64560: LIST
64561: PPUSH
64562: EMPTY
64563: PPUSH
64564: CALL 24294 0 3
64568: ST_TO_ADDR
64569: GO 64603
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
64571: LD_ADDR_EXP 49
64575: PUSH
64576: LD_EXP 49
64580: PPUSH
64581: LD_VAR 0 2
64585: PUSH
64586: LD_INT 2
64588: PUSH
64589: EMPTY
64590: LIST
64591: LIST
64592: PPUSH
64593: LD_VAR 0 7
64597: PPUSH
64598: CALL 24294 0 3
64602: ST_TO_ADDR
// if need_heal_2 then
64603: LD_VAR 0 7
64607: IFFALSE 64768
// for j in need_heal_2 do
64609: LD_ADDR_VAR 0 3
64613: PUSH
64614: LD_VAR 0 7
64618: PUSH
64619: FOR_IN
64620: IFFALSE 64766
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
64622: LD_ADDR_VAR 0 5
64626: PUSH
64627: LD_EXP 46
64631: PUSH
64632: LD_VAR 0 2
64636: ARRAY
64637: PPUSH
64638: LD_INT 2
64640: PUSH
64641: LD_INT 30
64643: PUSH
64644: LD_INT 6
64646: PUSH
64647: EMPTY
64648: LIST
64649: LIST
64650: PUSH
64651: LD_INT 30
64653: PUSH
64654: LD_INT 7
64656: PUSH
64657: EMPTY
64658: LIST
64659: LIST
64660: PUSH
64661: LD_INT 30
64663: PUSH
64664: LD_INT 8
64666: PUSH
64667: EMPTY
64668: LIST
64669: LIST
64670: PUSH
64671: LD_INT 30
64673: PUSH
64674: LD_INT 0
64676: PUSH
64677: EMPTY
64678: LIST
64679: LIST
64680: PUSH
64681: LD_INT 30
64683: PUSH
64684: LD_INT 1
64686: PUSH
64687: EMPTY
64688: LIST
64689: LIST
64690: PUSH
64691: EMPTY
64692: LIST
64693: LIST
64694: LIST
64695: LIST
64696: LIST
64697: LIST
64698: PPUSH
64699: CALL_OW 72
64703: ST_TO_ADDR
// if tmp then
64704: LD_VAR 0 5
64708: IFFALSE 64764
// begin k := NearestUnitToUnit ( tmp , j ) ;
64710: LD_ADDR_VAR 0 4
64714: PUSH
64715: LD_VAR 0 5
64719: PPUSH
64720: LD_VAR 0 3
64724: PPUSH
64725: CALL_OW 74
64729: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 5 then
64730: LD_VAR 0 3
64734: PPUSH
64735: LD_VAR 0 4
64739: PPUSH
64740: CALL_OW 296
64744: PUSH
64745: LD_INT 5
64747: GREATER
64748: IFFALSE 64764
// ComMoveUnit ( j , k ) ;
64750: LD_VAR 0 3
64754: PPUSH
64755: LD_VAR 0 4
64759: PPUSH
64760: CALL_OW 112
// end ; end ;
64764: GO 64619
64766: POP
64767: POP
// if not need_heal_1 and not need_heal_2 then
64768: LD_VAR 0 6
64772: NOT
64773: PUSH
64774: LD_VAR 0 7
64778: NOT
64779: AND
64780: IFFALSE 64784
// continue ;
64782: GO 64248
// end ;
64784: GO 64248
64786: POP
64787: POP
// RaiseSailEvent ( 102 ) ;
64788: LD_INT 102
64790: PPUSH
64791: CALL_OW 427
// end ;
64795: LD_VAR 0 1
64799: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp , cranes , to_repair_tmp , to_repair ; begin
64800: LD_INT 0
64802: PPUSH
64803: PPUSH
64804: PPUSH
64805: PPUSH
64806: PPUSH
64807: PPUSH
64808: PPUSH
64809: PPUSH
// if not mc_bases then
64810: LD_EXP 46
64814: NOT
64815: IFFALSE 64819
// exit ;
64817: GO 65654
// for i = 1 to mc_bases do
64819: LD_ADDR_VAR 0 2
64823: PUSH
64824: DOUBLE
64825: LD_INT 1
64827: DEC
64828: ST_TO_ADDR
64829: LD_EXP 46
64833: PUSH
64834: FOR_TO
64835: IFFALSE 65652
// begin if not mc_building_need_repair [ i ] then
64837: LD_EXP 47
64841: PUSH
64842: LD_VAR 0 2
64846: ARRAY
64847: NOT
64848: IFFALSE 65022
// begin cranes := UnitFilter ( mc_vehicles [ i ] , [ [ f_not , [ f_lives , 1000 ] ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ] ) ;
64850: LD_ADDR_VAR 0 6
64854: PUSH
64855: LD_EXP 65
64859: PUSH
64860: LD_VAR 0 2
64864: ARRAY
64865: PPUSH
64866: LD_INT 3
64868: PUSH
64869: LD_INT 24
64871: PUSH
64872: LD_INT 1000
64874: PUSH
64875: EMPTY
64876: LIST
64877: LIST
64878: PUSH
64879: EMPTY
64880: LIST
64881: LIST
64882: PUSH
64883: LD_INT 2
64885: PUSH
64886: LD_INT 34
64888: PUSH
64889: LD_INT 13
64891: PUSH
64892: EMPTY
64893: LIST
64894: LIST
64895: PUSH
64896: LD_INT 34
64898: PUSH
64899: LD_INT 52
64901: PUSH
64902: EMPTY
64903: LIST
64904: LIST
64905: PUSH
64906: EMPTY
64907: LIST
64908: LIST
64909: LIST
64910: PUSH
64911: EMPTY
64912: LIST
64913: LIST
64914: PPUSH
64915: CALL_OW 72
64919: ST_TO_ADDR
// if cranes then
64920: LD_VAR 0 6
64924: IFFALSE 64986
// for j in cranes do
64926: LD_ADDR_VAR 0 3
64930: PUSH
64931: LD_VAR 0 6
64935: PUSH
64936: FOR_IN
64937: IFFALSE 64984
// if not IsInArea ( j , mc_parking [ i ] ) then
64939: LD_VAR 0 3
64943: PPUSH
64944: LD_EXP 70
64948: PUSH
64949: LD_VAR 0 2
64953: ARRAY
64954: PPUSH
64955: CALL_OW 308
64959: NOT
64960: IFFALSE 64982
// ComMoveToArea ( j , mc_parking [ i ] ) ;
64962: LD_VAR 0 3
64966: PPUSH
64967: LD_EXP 70
64971: PUSH
64972: LD_VAR 0 2
64976: ARRAY
64977: PPUSH
64978: CALL_OW 113
64982: GO 64936
64984: POP
64985: POP
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
64986: LD_ADDR_EXP 48
64990: PUSH
64991: LD_EXP 48
64995: PPUSH
64996: LD_VAR 0 2
65000: PPUSH
65001: EMPTY
65002: PPUSH
65003: CALL_OW 1
65007: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
65008: LD_VAR 0 2
65012: PPUSH
65013: LD_INT 101
65015: PPUSH
65016: CALL 59923 0 2
// continue ;
65020: GO 64834
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
65022: LD_ADDR_EXP 52
65026: PUSH
65027: LD_EXP 52
65031: PPUSH
65032: LD_VAR 0 2
65036: PPUSH
65037: EMPTY
65038: PPUSH
65039: CALL_OW 1
65043: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
65044: LD_VAR 0 2
65048: PPUSH
65049: LD_INT 103
65051: PPUSH
65052: CALL 59923 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) diff ( mc_need_heal [ i ] [ 1 ] union mc_need_heal [ i ] [ 2 ] ) ;
65056: LD_ADDR_VAR 0 5
65060: PUSH
65061: LD_EXP 46
65065: PUSH
65066: LD_VAR 0 2
65070: ARRAY
65071: PUSH
65072: LD_EXP 75
65076: PUSH
65077: LD_VAR 0 2
65081: ARRAY
65082: UNION
65083: PPUSH
65084: LD_INT 2
65086: PUSH
65087: LD_INT 25
65089: PUSH
65090: LD_INT 2
65092: PUSH
65093: EMPTY
65094: LIST
65095: LIST
65096: PUSH
65097: LD_INT 25
65099: PUSH
65100: LD_INT 16
65102: PUSH
65103: EMPTY
65104: LIST
65105: LIST
65106: PUSH
65107: EMPTY
65108: LIST
65109: LIST
65110: LIST
65111: PUSH
65112: EMPTY
65113: LIST
65114: PPUSH
65115: CALL_OW 72
65119: PUSH
65120: LD_EXP 49
65124: PUSH
65125: LD_VAR 0 2
65129: ARRAY
65130: PUSH
65131: LD_INT 1
65133: ARRAY
65134: PUSH
65135: LD_EXP 49
65139: PUSH
65140: LD_VAR 0 2
65144: ARRAY
65145: PUSH
65146: LD_INT 2
65148: ARRAY
65149: UNION
65150: DIFF
65151: ST_TO_ADDR
// cranes := UnitFilter ( mc_vehicles [ i ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ) ;
65152: LD_ADDR_VAR 0 6
65156: PUSH
65157: LD_EXP 65
65161: PUSH
65162: LD_VAR 0 2
65166: ARRAY
65167: PPUSH
65168: LD_INT 2
65170: PUSH
65171: LD_INT 34
65173: PUSH
65174: LD_INT 13
65176: PUSH
65177: EMPTY
65178: LIST
65179: LIST
65180: PUSH
65181: LD_INT 34
65183: PUSH
65184: LD_INT 52
65186: PUSH
65187: EMPTY
65188: LIST
65189: LIST
65190: PUSH
65191: EMPTY
65192: LIST
65193: LIST
65194: LIST
65195: PPUSH
65196: CALL_OW 72
65200: ST_TO_ADDR
// if cranes then
65201: LD_VAR 0 6
65205: IFFALSE 65341
// begin for j in cranes do
65207: LD_ADDR_VAR 0 3
65211: PUSH
65212: LD_VAR 0 6
65216: PUSH
65217: FOR_IN
65218: IFFALSE 65339
// if GetLives ( j ) >= 500 and not HasTask ( j ) then
65220: LD_VAR 0 3
65224: PPUSH
65225: CALL_OW 256
65229: PUSH
65230: LD_INT 500
65232: GREATEREQUAL
65233: PUSH
65234: LD_VAR 0 3
65238: PPUSH
65239: CALL_OW 314
65243: NOT
65244: AND
65245: IFFALSE 65279
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) else
65247: LD_VAR 0 3
65251: PPUSH
65252: LD_EXP 47
65256: PUSH
65257: LD_VAR 0 2
65261: ARRAY
65262: PPUSH
65263: LD_VAR 0 3
65267: PPUSH
65268: CALL_OW 74
65272: PPUSH
65273: CALL_OW 130
65277: GO 65337
// if GetLives ( j ) < 500 and not IsInArea ( j , mc_parking [ i ] ) then
65279: LD_VAR 0 3
65283: PPUSH
65284: CALL_OW 256
65288: PUSH
65289: LD_INT 500
65291: LESS
65292: PUSH
65293: LD_VAR 0 3
65297: PPUSH
65298: LD_EXP 70
65302: PUSH
65303: LD_VAR 0 2
65307: ARRAY
65308: PPUSH
65309: CALL_OW 308
65313: NOT
65314: AND
65315: IFFALSE 65337
// ComMoveToArea ( j , mc_parking [ i ] ) ;
65317: LD_VAR 0 3
65321: PPUSH
65322: LD_EXP 70
65326: PUSH
65327: LD_VAR 0 2
65331: ARRAY
65332: PPUSH
65333: CALL_OW 113
65337: GO 65217
65339: POP
65340: POP
// end ; if tmp > 3 then
65341: LD_VAR 0 5
65345: PUSH
65346: LD_INT 3
65348: GREATER
65349: IFFALSE 65369
// tmp := ShrinkArray ( tmp , 4 ) ;
65351: LD_ADDR_VAR 0 5
65355: PUSH
65356: LD_VAR 0 5
65360: PPUSH
65361: LD_INT 4
65363: PPUSH
65364: CALL 55533 0 2
65368: ST_TO_ADDR
// if not tmp then
65369: LD_VAR 0 5
65373: NOT
65374: IFFALSE 65378
// continue ;
65376: GO 64834
// for j in tmp do
65378: LD_ADDR_VAR 0 3
65382: PUSH
65383: LD_VAR 0 5
65387: PUSH
65388: FOR_IN
65389: IFFALSE 65648
// begin if IsInUnit ( j ) then
65391: LD_VAR 0 3
65395: PPUSH
65396: CALL_OW 310
65400: IFFALSE 65411
// ComExitBuilding ( j ) ;
65402: LD_VAR 0 3
65406: PPUSH
65407: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
65411: LD_VAR 0 3
65415: PUSH
65416: LD_EXP 48
65420: PUSH
65421: LD_VAR 0 2
65425: ARRAY
65426: IN
65427: NOT
65428: IFFALSE 65486
// begin SetTag ( j , 101 ) ;
65430: LD_VAR 0 3
65434: PPUSH
65435: LD_INT 101
65437: PPUSH
65438: CALL_OW 109
// mc_building_repairs := ReplaceIn ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
65442: LD_ADDR_EXP 48
65446: PUSH
65447: LD_EXP 48
65451: PPUSH
65452: LD_VAR 0 2
65456: PUSH
65457: LD_EXP 48
65461: PUSH
65462: LD_VAR 0 2
65466: ARRAY
65467: PUSH
65468: LD_INT 1
65470: PLUS
65471: PUSH
65472: EMPTY
65473: LIST
65474: LIST
65475: PPUSH
65476: LD_VAR 0 3
65480: PPUSH
65481: CALL 24294 0 3
65485: ST_TO_ADDR
// end ; wait ( 1 ) ;
65486: LD_INT 1
65488: PPUSH
65489: CALL_OW 67
// to_repair_tmp := mc_building_need_repair [ i ] ;
65493: LD_ADDR_VAR 0 7
65497: PUSH
65498: LD_EXP 47
65502: PUSH
65503: LD_VAR 0 2
65507: ARRAY
65508: ST_TO_ADDR
// if mc_scan [ i ] then
65509: LD_EXP 69
65513: PUSH
65514: LD_VAR 0 2
65518: ARRAY
65519: IFFALSE 65581
// to_repair_tmp := UnitFilter ( mc_building_need_repair [ i ] , [ f_not , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_breastwork ] ] ) ;
65521: LD_ADDR_VAR 0 7
65525: PUSH
65526: LD_EXP 47
65530: PUSH
65531: LD_VAR 0 2
65535: ARRAY
65536: PPUSH
65537: LD_INT 3
65539: PUSH
65540: LD_INT 30
65542: PUSH
65543: LD_INT 32
65545: PUSH
65546: EMPTY
65547: LIST
65548: LIST
65549: PUSH
65550: LD_INT 30
65552: PUSH
65553: LD_INT 33
65555: PUSH
65556: EMPTY
65557: LIST
65558: LIST
65559: PUSH
65560: LD_INT 30
65562: PUSH
65563: LD_INT 31
65565: PUSH
65566: EMPTY
65567: LIST
65568: LIST
65569: PUSH
65570: EMPTY
65571: LIST
65572: LIST
65573: LIST
65574: LIST
65575: PPUSH
65576: CALL_OW 72
65580: ST_TO_ADDR
// if not to_repair_tmp then
65581: LD_VAR 0 7
65585: NOT
65586: IFFALSE 65590
// continue ;
65588: GO 65388
// to_repair := NearestUnitToUnit ( to_repair_tmp , j ) ;
65590: LD_ADDR_VAR 0 8
65594: PUSH
65595: LD_VAR 0 7
65599: PPUSH
65600: LD_VAR 0 3
65604: PPUSH
65605: CALL_OW 74
65609: ST_TO_ADDR
// if DangerAtRange ( to_repair , 16 ) [ 4 ] < 5 then
65610: LD_VAR 0 8
65614: PPUSH
65615: LD_INT 16
65617: PPUSH
65618: CALL 26887 0 2
65622: PUSH
65623: LD_INT 4
65625: ARRAY
65626: PUSH
65627: LD_INT 5
65629: LESS
65630: IFFALSE 65646
// ComRepairBuilding ( j , to_repair ) ;
65632: LD_VAR 0 3
65636: PPUSH
65637: LD_VAR 0 8
65641: PPUSH
65642: CALL_OW 130
// end ;
65646: GO 65388
65648: POP
65649: POP
// end ;
65650: GO 64834
65652: POP
65653: POP
// end ;
65654: LD_VAR 0 1
65658: RET
// export function MC_Heal ; var i , j , tmp ; begin
65659: LD_INT 0
65661: PPUSH
65662: PPUSH
65663: PPUSH
65664: PPUSH
// if not mc_bases then
65665: LD_EXP 46
65669: NOT
65670: IFFALSE 65674
// exit ;
65672: GO 66076
// for i = 1 to mc_bases do
65674: LD_ADDR_VAR 0 2
65678: PUSH
65679: DOUBLE
65680: LD_INT 1
65682: DEC
65683: ST_TO_ADDR
65684: LD_EXP 46
65688: PUSH
65689: FOR_TO
65690: IFFALSE 66074
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
65692: LD_EXP 49
65696: PUSH
65697: LD_VAR 0 2
65701: ARRAY
65702: PUSH
65703: LD_INT 1
65705: ARRAY
65706: NOT
65707: PUSH
65708: LD_EXP 49
65712: PUSH
65713: LD_VAR 0 2
65717: ARRAY
65718: PUSH
65719: LD_INT 2
65721: ARRAY
65722: NOT
65723: AND
65724: IFFALSE 65762
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
65726: LD_ADDR_EXP 50
65730: PUSH
65731: LD_EXP 50
65735: PPUSH
65736: LD_VAR 0 2
65740: PPUSH
65741: EMPTY
65742: PPUSH
65743: CALL_OW 1
65747: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
65748: LD_VAR 0 2
65752: PPUSH
65753: LD_INT 102
65755: PPUSH
65756: CALL 59923 0 2
// continue ;
65760: GO 65689
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
65762: LD_ADDR_VAR 0 4
65766: PUSH
65767: LD_EXP 46
65771: PUSH
65772: LD_VAR 0 2
65776: ARRAY
65777: PPUSH
65778: LD_INT 25
65780: PUSH
65781: LD_INT 4
65783: PUSH
65784: EMPTY
65785: LIST
65786: LIST
65787: PPUSH
65788: CALL_OW 72
65792: ST_TO_ADDR
// if not tmp then
65793: LD_VAR 0 4
65797: NOT
65798: IFFALSE 65802
// continue ;
65800: GO 65689
// if mc_taming [ i ] then
65802: LD_EXP 77
65806: PUSH
65807: LD_VAR 0 2
65811: ARRAY
65812: IFFALSE 65836
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
65814: LD_ADDR_EXP 77
65818: PUSH
65819: LD_EXP 77
65823: PPUSH
65824: LD_VAR 0 2
65828: PPUSH
65829: EMPTY
65830: PPUSH
65831: CALL_OW 1
65835: ST_TO_ADDR
// for j in tmp do
65836: LD_ADDR_VAR 0 3
65840: PUSH
65841: LD_VAR 0 4
65845: PUSH
65846: FOR_IN
65847: IFFALSE 66070
// begin if IsInUnit ( j ) then
65849: LD_VAR 0 3
65853: PPUSH
65854: CALL_OW 310
65858: IFFALSE 65869
// ComExitBuilding ( j ) ;
65860: LD_VAR 0 3
65864: PPUSH
65865: CALL_OW 122
// if not j in mc_healers [ i ] then
65869: LD_VAR 0 3
65873: PUSH
65874: LD_EXP 50
65878: PUSH
65879: LD_VAR 0 2
65883: ARRAY
65884: IN
65885: NOT
65886: IFFALSE 65932
// mc_healers := ReplaceIn ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
65888: LD_ADDR_EXP 50
65892: PUSH
65893: LD_EXP 50
65897: PPUSH
65898: LD_VAR 0 2
65902: PUSH
65903: LD_EXP 50
65907: PUSH
65908: LD_VAR 0 2
65912: ARRAY
65913: PUSH
65914: LD_INT 1
65916: PLUS
65917: PUSH
65918: EMPTY
65919: LIST
65920: LIST
65921: PPUSH
65922: LD_VAR 0 3
65926: PPUSH
65927: CALL 24294 0 3
65931: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
65932: LD_VAR 0 3
65936: PPUSH
65937: CALL_OW 110
65941: PUSH
65942: LD_INT 102
65944: NONEQUAL
65945: IFFALSE 65959
// SetTag ( j , 102 ) ;
65947: LD_VAR 0 3
65951: PPUSH
65952: LD_INT 102
65954: PPUSH
65955: CALL_OW 109
// Wait ( 3 ) ;
65959: LD_INT 3
65961: PPUSH
65962: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
65966: LD_EXP 49
65970: PUSH
65971: LD_VAR 0 2
65975: ARRAY
65976: PUSH
65977: LD_INT 1
65979: ARRAY
65980: IFFALSE 66012
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
65982: LD_VAR 0 3
65986: PPUSH
65987: LD_EXP 49
65991: PUSH
65992: LD_VAR 0 2
65996: ARRAY
65997: PUSH
65998: LD_INT 1
66000: ARRAY
66001: PUSH
66002: LD_INT 1
66004: ARRAY
66005: PPUSH
66006: CALL_OW 128
66010: GO 66068
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
66012: LD_VAR 0 3
66016: PPUSH
66017: CALL_OW 314
66021: NOT
66022: PUSH
66023: LD_EXP 49
66027: PUSH
66028: LD_VAR 0 2
66032: ARRAY
66033: PUSH
66034: LD_INT 2
66036: ARRAY
66037: AND
66038: IFFALSE 66068
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
66040: LD_VAR 0 3
66044: PPUSH
66045: LD_EXP 49
66049: PUSH
66050: LD_VAR 0 2
66054: ARRAY
66055: PUSH
66056: LD_INT 2
66058: ARRAY
66059: PUSH
66060: LD_INT 1
66062: ARRAY
66063: PPUSH
66064: CALL_OW 128
// end ;
66068: GO 65846
66070: POP
66071: POP
// end ;
66072: GO 65689
66074: POP
66075: POP
// end ;
66076: LD_VAR 0 1
66080: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
66081: LD_INT 0
66083: PPUSH
66084: PPUSH
66085: PPUSH
66086: PPUSH
66087: PPUSH
// if not mc_bases then
66088: LD_EXP 46
66092: NOT
66093: IFFALSE 66097
// exit ;
66095: GO 67240
// for i = 1 to mc_bases do
66097: LD_ADDR_VAR 0 2
66101: PUSH
66102: DOUBLE
66103: LD_INT 1
66105: DEC
66106: ST_TO_ADDR
66107: LD_EXP 46
66111: PUSH
66112: FOR_TO
66113: IFFALSE 67238
// begin if mc_scan [ i ] then
66115: LD_EXP 69
66119: PUSH
66120: LD_VAR 0 2
66124: ARRAY
66125: IFFALSE 66129
// continue ;
66127: GO 66112
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
66129: LD_EXP 51
66133: PUSH
66134: LD_VAR 0 2
66138: ARRAY
66139: NOT
66140: PUSH
66141: LD_EXP 53
66145: PUSH
66146: LD_VAR 0 2
66150: ARRAY
66151: NOT
66152: AND
66153: PUSH
66154: LD_EXP 52
66158: PUSH
66159: LD_VAR 0 2
66163: ARRAY
66164: AND
66165: IFFALSE 66203
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
66167: LD_ADDR_EXP 52
66171: PUSH
66172: LD_EXP 52
66176: PPUSH
66177: LD_VAR 0 2
66181: PPUSH
66182: EMPTY
66183: PPUSH
66184: CALL_OW 1
66188: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
66189: LD_VAR 0 2
66193: PPUSH
66194: LD_INT 103
66196: PPUSH
66197: CALL 59923 0 2
// continue ;
66201: GO 66112
// end ; if mc_construct_list [ i ] then
66203: LD_EXP 53
66207: PUSH
66208: LD_VAR 0 2
66212: ARRAY
66213: IFFALSE 66433
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
66215: LD_ADDR_VAR 0 4
66219: PUSH
66220: LD_EXP 46
66224: PUSH
66225: LD_VAR 0 2
66229: ARRAY
66230: PPUSH
66231: LD_INT 25
66233: PUSH
66234: LD_INT 2
66236: PUSH
66237: EMPTY
66238: LIST
66239: LIST
66240: PPUSH
66241: CALL_OW 72
66245: PUSH
66246: LD_EXP 48
66250: PUSH
66251: LD_VAR 0 2
66255: ARRAY
66256: DIFF
66257: ST_TO_ADDR
// if not tmp then
66258: LD_VAR 0 4
66262: NOT
66263: IFFALSE 66267
// continue ;
66265: GO 66112
// for j in tmp do
66267: LD_ADDR_VAR 0 3
66271: PUSH
66272: LD_VAR 0 4
66276: PUSH
66277: FOR_IN
66278: IFFALSE 66429
// begin if not mc_builders [ i ] then
66280: LD_EXP 52
66284: PUSH
66285: LD_VAR 0 2
66289: ARRAY
66290: NOT
66291: IFFALSE 66349
// begin SetTag ( j , 103 ) ;
66293: LD_VAR 0 3
66297: PPUSH
66298: LD_INT 103
66300: PPUSH
66301: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
66305: LD_ADDR_EXP 52
66309: PUSH
66310: LD_EXP 52
66314: PPUSH
66315: LD_VAR 0 2
66319: PUSH
66320: LD_EXP 52
66324: PUSH
66325: LD_VAR 0 2
66329: ARRAY
66330: PUSH
66331: LD_INT 1
66333: PLUS
66334: PUSH
66335: EMPTY
66336: LIST
66337: LIST
66338: PPUSH
66339: LD_VAR 0 3
66343: PPUSH
66344: CALL 24294 0 3
66348: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
66349: LD_VAR 0 3
66353: PPUSH
66354: CALL_OW 310
66358: IFFALSE 66369
// ComExitBuilding ( j ) ;
66360: LD_VAR 0 3
66364: PPUSH
66365: CALL_OW 122
// wait ( 3 ) ;
66369: LD_INT 3
66371: PPUSH
66372: CALL_OW 67
// if not mc_construct_list [ i ] then
66376: LD_EXP 53
66380: PUSH
66381: LD_VAR 0 2
66385: ARRAY
66386: NOT
66387: IFFALSE 66391
// break ;
66389: GO 66429
// if not HasTask ( j ) then
66391: LD_VAR 0 3
66395: PPUSH
66396: CALL_OW 314
66400: NOT
66401: IFFALSE 66427
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
66403: LD_VAR 0 3
66407: PPUSH
66408: LD_EXP 53
66412: PUSH
66413: LD_VAR 0 2
66417: ARRAY
66418: PUSH
66419: LD_INT 1
66421: ARRAY
66422: PPUSH
66423: CALL 27145 0 2
// end ;
66427: GO 66277
66429: POP
66430: POP
// end else
66431: GO 67236
// if mc_build_list [ i ] then
66433: LD_EXP 51
66437: PUSH
66438: LD_VAR 0 2
66442: ARRAY
66443: IFFALSE 67236
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
66445: LD_ADDR_VAR 0 5
66449: PUSH
66450: LD_EXP 46
66454: PUSH
66455: LD_VAR 0 2
66459: ARRAY
66460: PPUSH
66461: LD_INT 2
66463: PUSH
66464: LD_INT 30
66466: PUSH
66467: LD_INT 0
66469: PUSH
66470: EMPTY
66471: LIST
66472: LIST
66473: PUSH
66474: LD_INT 30
66476: PUSH
66477: LD_INT 1
66479: PUSH
66480: EMPTY
66481: LIST
66482: LIST
66483: PUSH
66484: EMPTY
66485: LIST
66486: LIST
66487: LIST
66488: PPUSH
66489: CALL_OW 72
66493: ST_TO_ADDR
// if depot then
66494: LD_VAR 0 5
66498: IFFALSE 66516
// depot := depot [ 1 ] else
66500: LD_ADDR_VAR 0 5
66504: PUSH
66505: LD_VAR 0 5
66509: PUSH
66510: LD_INT 1
66512: ARRAY
66513: ST_TO_ADDR
66514: GO 66524
// depot := 0 ;
66516: LD_ADDR_VAR 0 5
66520: PUSH
66521: LD_INT 0
66523: ST_TO_ADDR
// if IsExtension ( mc_build_list [ i ] [ 1 ] [ 1 ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) then
66524: LD_EXP 51
66528: PUSH
66529: LD_VAR 0 2
66533: ARRAY
66534: PUSH
66535: LD_INT 1
66537: ARRAY
66538: PUSH
66539: LD_INT 1
66541: ARRAY
66542: PPUSH
66543: CALL 26975 0 1
66547: PUSH
66548: LD_EXP 46
66552: PUSH
66553: LD_VAR 0 2
66557: ARRAY
66558: PPUSH
66559: LD_INT 2
66561: PUSH
66562: LD_INT 30
66564: PUSH
66565: LD_INT 2
66567: PUSH
66568: EMPTY
66569: LIST
66570: LIST
66571: PUSH
66572: LD_INT 30
66574: PUSH
66575: LD_INT 3
66577: PUSH
66578: EMPTY
66579: LIST
66580: LIST
66581: PUSH
66582: EMPTY
66583: LIST
66584: LIST
66585: LIST
66586: PPUSH
66587: CALL_OW 72
66591: NOT
66592: AND
66593: IFFALSE 66698
// begin for j = 1 to mc_build_list [ i ] do
66595: LD_ADDR_VAR 0 3
66599: PUSH
66600: DOUBLE
66601: LD_INT 1
66603: DEC
66604: ST_TO_ADDR
66605: LD_EXP 51
66609: PUSH
66610: LD_VAR 0 2
66614: ARRAY
66615: PUSH
66616: FOR_TO
66617: IFFALSE 66696
// if mc_build_list [ i ] [ j ] [ 1 ] = b_workshop then
66619: LD_EXP 51
66623: PUSH
66624: LD_VAR 0 2
66628: ARRAY
66629: PUSH
66630: LD_VAR 0 3
66634: ARRAY
66635: PUSH
66636: LD_INT 1
66638: ARRAY
66639: PUSH
66640: LD_INT 2
66642: EQUAL
66643: IFFALSE 66694
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , j , 1 , false ) ) ;
66645: LD_ADDR_EXP 51
66649: PUSH
66650: LD_EXP 51
66654: PPUSH
66655: LD_VAR 0 2
66659: PPUSH
66660: LD_EXP 51
66664: PUSH
66665: LD_VAR 0 2
66669: ARRAY
66670: PPUSH
66671: LD_VAR 0 3
66675: PPUSH
66676: LD_INT 1
66678: PPUSH
66679: LD_INT 0
66681: PPUSH
66682: CALL 23712 0 4
66686: PPUSH
66687: CALL_OW 1
66691: ST_TO_ADDR
// break ;
66692: GO 66696
// end ;
66694: GO 66616
66696: POP
66697: POP
// end ; if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilt ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
66698: LD_EXP 51
66702: PUSH
66703: LD_VAR 0 2
66707: ARRAY
66708: PUSH
66709: LD_INT 1
66711: ARRAY
66712: PUSH
66713: LD_INT 1
66715: ARRAY
66716: PUSH
66717: LD_INT 0
66719: EQUAL
66720: PUSH
66721: LD_VAR 0 5
66725: PUSH
66726: LD_VAR 0 5
66730: PPUSH
66731: LD_EXP 51
66735: PUSH
66736: LD_VAR 0 2
66740: ARRAY
66741: PUSH
66742: LD_INT 1
66744: ARRAY
66745: PUSH
66746: LD_INT 1
66748: ARRAY
66749: PPUSH
66750: LD_EXP 51
66754: PUSH
66755: LD_VAR 0 2
66759: ARRAY
66760: PUSH
66761: LD_INT 1
66763: ARRAY
66764: PUSH
66765: LD_INT 2
66767: ARRAY
66768: PPUSH
66769: LD_EXP 51
66773: PUSH
66774: LD_VAR 0 2
66778: ARRAY
66779: PUSH
66780: LD_INT 1
66782: ARRAY
66783: PUSH
66784: LD_INT 3
66786: ARRAY
66787: PPUSH
66788: LD_EXP 51
66792: PUSH
66793: LD_VAR 0 2
66797: ARRAY
66798: PUSH
66799: LD_INT 1
66801: ARRAY
66802: PUSH
66803: LD_INT 4
66805: ARRAY
66806: PPUSH
66807: CALL 31709 0 5
66811: AND
66812: OR
66813: IFFALSE 67094
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
66815: LD_ADDR_VAR 0 4
66819: PUSH
66820: LD_EXP 46
66824: PUSH
66825: LD_VAR 0 2
66829: ARRAY
66830: PPUSH
66831: LD_INT 25
66833: PUSH
66834: LD_INT 2
66836: PUSH
66837: EMPTY
66838: LIST
66839: LIST
66840: PPUSH
66841: CALL_OW 72
66845: PUSH
66846: LD_EXP 48
66850: PUSH
66851: LD_VAR 0 2
66855: ARRAY
66856: DIFF
66857: ST_TO_ADDR
// if not tmp then
66858: LD_VAR 0 4
66862: NOT
66863: IFFALSE 66867
// continue ;
66865: GO 66112
// for j in tmp do
66867: LD_ADDR_VAR 0 3
66871: PUSH
66872: LD_VAR 0 4
66876: PUSH
66877: FOR_IN
66878: IFFALSE 67090
// begin if not mc_builders [ i ] then
66880: LD_EXP 52
66884: PUSH
66885: LD_VAR 0 2
66889: ARRAY
66890: NOT
66891: IFFALSE 66949
// begin SetTag ( j , 103 ) ;
66893: LD_VAR 0 3
66897: PPUSH
66898: LD_INT 103
66900: PPUSH
66901: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
66905: LD_ADDR_EXP 52
66909: PUSH
66910: LD_EXP 52
66914: PPUSH
66915: LD_VAR 0 2
66919: PUSH
66920: LD_EXP 52
66924: PUSH
66925: LD_VAR 0 2
66929: ARRAY
66930: PUSH
66931: LD_INT 1
66933: PLUS
66934: PUSH
66935: EMPTY
66936: LIST
66937: LIST
66938: PPUSH
66939: LD_VAR 0 3
66943: PPUSH
66944: CALL 24294 0 3
66948: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
66949: LD_VAR 0 3
66953: PPUSH
66954: CALL_OW 310
66958: IFFALSE 66969
// ComExitBuilding ( j ) ;
66960: LD_VAR 0 3
66964: PPUSH
66965: CALL_OW 122
// wait ( 3 ) ;
66969: LD_INT 3
66971: PPUSH
66972: CALL_OW 67
// if not mc_build_list [ i ] then
66976: LD_EXP 51
66980: PUSH
66981: LD_VAR 0 2
66985: ARRAY
66986: NOT
66987: IFFALSE 66991
// break ;
66989: GO 67090
// if not HasTask ( j ) then
66991: LD_VAR 0 3
66995: PPUSH
66996: CALL_OW 314
67000: NOT
67001: IFFALSE 67088
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
67003: LD_VAR 0 3
67007: PPUSH
67008: LD_EXP 51
67012: PUSH
67013: LD_VAR 0 2
67017: ARRAY
67018: PUSH
67019: LD_INT 1
67021: ARRAY
67022: PUSH
67023: LD_INT 1
67025: ARRAY
67026: PPUSH
67027: LD_EXP 51
67031: PUSH
67032: LD_VAR 0 2
67036: ARRAY
67037: PUSH
67038: LD_INT 1
67040: ARRAY
67041: PUSH
67042: LD_INT 2
67044: ARRAY
67045: PPUSH
67046: LD_EXP 51
67050: PUSH
67051: LD_VAR 0 2
67055: ARRAY
67056: PUSH
67057: LD_INT 1
67059: ARRAY
67060: PUSH
67061: LD_INT 3
67063: ARRAY
67064: PPUSH
67065: LD_EXP 51
67069: PUSH
67070: LD_VAR 0 2
67074: ARRAY
67075: PUSH
67076: LD_INT 1
67078: ARRAY
67079: PUSH
67080: LD_INT 4
67082: ARRAY
67083: PPUSH
67084: CALL_OW 145
// end ;
67088: GO 66877
67090: POP
67091: POP
// end else
67092: GO 67236
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
67094: LD_EXP 46
67098: PUSH
67099: LD_VAR 0 2
67103: ARRAY
67104: PPUSH
67105: LD_EXP 51
67109: PUSH
67110: LD_VAR 0 2
67114: ARRAY
67115: PUSH
67116: LD_INT 1
67118: ARRAY
67119: PUSH
67120: LD_INT 1
67122: ARRAY
67123: PPUSH
67124: LD_EXP 51
67128: PUSH
67129: LD_VAR 0 2
67133: ARRAY
67134: PUSH
67135: LD_INT 1
67137: ARRAY
67138: PUSH
67139: LD_INT 2
67141: ARRAY
67142: PPUSH
67143: LD_EXP 51
67147: PUSH
67148: LD_VAR 0 2
67152: ARRAY
67153: PUSH
67154: LD_INT 1
67156: ARRAY
67157: PUSH
67158: LD_INT 3
67160: ARRAY
67161: PPUSH
67162: LD_EXP 51
67166: PUSH
67167: LD_VAR 0 2
67171: ARRAY
67172: PUSH
67173: LD_INT 1
67175: ARRAY
67176: PUSH
67177: LD_INT 4
67179: ARRAY
67180: PPUSH
67181: CALL 31045 0 5
67185: NOT
67186: IFFALSE 67236
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
67188: LD_ADDR_EXP 51
67192: PUSH
67193: LD_EXP 51
67197: PPUSH
67198: LD_VAR 0 2
67202: PPUSH
67203: LD_EXP 51
67207: PUSH
67208: LD_VAR 0 2
67212: ARRAY
67213: PPUSH
67214: LD_INT 1
67216: PPUSH
67217: LD_INT 1
67219: NEG
67220: PPUSH
67221: LD_INT 0
67223: PPUSH
67224: CALL 23712 0 4
67228: PPUSH
67229: CALL_OW 1
67233: ST_TO_ADDR
// continue ;
67234: GO 66112
// end ; end ; end ;
67236: GO 66112
67238: POP
67239: POP
// end ;
67240: LD_VAR 0 1
67244: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
67245: LD_INT 0
67247: PPUSH
67248: PPUSH
67249: PPUSH
67250: PPUSH
67251: PPUSH
67252: PPUSH
// if not mc_bases then
67253: LD_EXP 46
67257: NOT
67258: IFFALSE 67262
// exit ;
67260: GO 67689
// for i = 1 to mc_bases do
67262: LD_ADDR_VAR 0 2
67266: PUSH
67267: DOUBLE
67268: LD_INT 1
67270: DEC
67271: ST_TO_ADDR
67272: LD_EXP 46
67276: PUSH
67277: FOR_TO
67278: IFFALSE 67687
// begin tmp := mc_build_upgrade [ i ] ;
67280: LD_ADDR_VAR 0 4
67284: PUSH
67285: LD_EXP 78
67289: PUSH
67290: LD_VAR 0 2
67294: ARRAY
67295: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
67296: LD_ADDR_VAR 0 6
67300: PUSH
67301: LD_EXP 79
67305: PUSH
67306: LD_VAR 0 2
67310: ARRAY
67311: PPUSH
67312: LD_INT 2
67314: PUSH
67315: LD_INT 30
67317: PUSH
67318: LD_INT 6
67320: PUSH
67321: EMPTY
67322: LIST
67323: LIST
67324: PUSH
67325: LD_INT 30
67327: PUSH
67328: LD_INT 7
67330: PUSH
67331: EMPTY
67332: LIST
67333: LIST
67334: PUSH
67335: EMPTY
67336: LIST
67337: LIST
67338: LIST
67339: PPUSH
67340: CALL_OW 72
67344: ST_TO_ADDR
// if not tmp and not lab then
67345: LD_VAR 0 4
67349: NOT
67350: PUSH
67351: LD_VAR 0 6
67355: NOT
67356: AND
67357: IFFALSE 67361
// continue ;
67359: GO 67277
// if tmp then
67361: LD_VAR 0 4
67365: IFFALSE 67485
// for j in tmp do
67367: LD_ADDR_VAR 0 3
67371: PUSH
67372: LD_VAR 0 4
67376: PUSH
67377: FOR_IN
67378: IFFALSE 67483
// begin if UpgradeCost ( j ) then
67380: LD_VAR 0 3
67384: PPUSH
67385: CALL 30705 0 1
67389: IFFALSE 67481
// begin ComUpgrade ( j ) ;
67391: LD_VAR 0 3
67395: PPUSH
67396: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
67400: LD_ADDR_EXP 78
67404: PUSH
67405: LD_EXP 78
67409: PPUSH
67410: LD_VAR 0 2
67414: PPUSH
67415: LD_EXP 78
67419: PUSH
67420: LD_VAR 0 2
67424: ARRAY
67425: PUSH
67426: LD_VAR 0 3
67430: DIFF
67431: PPUSH
67432: CALL_OW 1
67436: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
67437: LD_ADDR_EXP 53
67441: PUSH
67442: LD_EXP 53
67446: PPUSH
67447: LD_VAR 0 2
67451: PUSH
67452: LD_EXP 53
67456: PUSH
67457: LD_VAR 0 2
67461: ARRAY
67462: PUSH
67463: LD_INT 1
67465: PLUS
67466: PUSH
67467: EMPTY
67468: LIST
67469: LIST
67470: PPUSH
67471: LD_VAR 0 3
67475: PPUSH
67476: CALL 24294 0 3
67480: ST_TO_ADDR
// end ; end ;
67481: GO 67377
67483: POP
67484: POP
// if not lab or not mc_lab_upgrade [ i ] then
67485: LD_VAR 0 6
67489: NOT
67490: PUSH
67491: LD_EXP 80
67495: PUSH
67496: LD_VAR 0 2
67500: ARRAY
67501: NOT
67502: OR
67503: IFFALSE 67507
// continue ;
67505: GO 67277
// for j in lab do
67507: LD_ADDR_VAR 0 3
67511: PUSH
67512: LD_VAR 0 6
67516: PUSH
67517: FOR_IN
67518: IFFALSE 67683
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
67520: LD_VAR 0 3
67524: PPUSH
67525: CALL_OW 266
67529: PUSH
67530: LD_INT 6
67532: PUSH
67533: LD_INT 7
67535: PUSH
67536: EMPTY
67537: LIST
67538: LIST
67539: IN
67540: PUSH
67541: LD_VAR 0 3
67545: PPUSH
67546: CALL_OW 461
67550: PUSH
67551: LD_INT 1
67553: NONEQUAL
67554: AND
67555: IFFALSE 67681
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
67557: LD_VAR 0 3
67561: PPUSH
67562: LD_EXP 80
67566: PUSH
67567: LD_VAR 0 2
67571: ARRAY
67572: PUSH
67573: LD_INT 1
67575: ARRAY
67576: PPUSH
67577: CALL 30910 0 2
67581: IFFALSE 67681
// begin ComCancel ( j ) ;
67583: LD_VAR 0 3
67587: PPUSH
67588: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
67592: LD_VAR 0 3
67596: PPUSH
67597: LD_EXP 80
67601: PUSH
67602: LD_VAR 0 2
67606: ARRAY
67607: PUSH
67608: LD_INT 1
67610: ARRAY
67611: PPUSH
67612: CALL_OW 207
// if not j in mc_construct_list [ i ] then
67616: LD_VAR 0 3
67620: PUSH
67621: LD_EXP 53
67625: PUSH
67626: LD_VAR 0 2
67630: ARRAY
67631: IN
67632: NOT
67633: IFFALSE 67679
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
67635: LD_ADDR_EXP 53
67639: PUSH
67640: LD_EXP 53
67644: PPUSH
67645: LD_VAR 0 2
67649: PUSH
67650: LD_EXP 53
67654: PUSH
67655: LD_VAR 0 2
67659: ARRAY
67660: PUSH
67661: LD_INT 1
67663: PLUS
67664: PUSH
67665: EMPTY
67666: LIST
67667: LIST
67668: PPUSH
67669: LD_VAR 0 3
67673: PPUSH
67674: CALL 24294 0 3
67678: ST_TO_ADDR
// break ;
67679: GO 67683
// end ; end ; end ;
67681: GO 67517
67683: POP
67684: POP
// end ;
67685: GO 67277
67687: POP
67688: POP
// end ;
67689: LD_VAR 0 1
67693: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , tmp2 , t , tw , busy , weapon ; begin
67694: LD_INT 0
67696: PPUSH
67697: PPUSH
67698: PPUSH
67699: PPUSH
67700: PPUSH
67701: PPUSH
67702: PPUSH
67703: PPUSH
67704: PPUSH
// if not mc_bases then
67705: LD_EXP 46
67709: NOT
67710: IFFALSE 67714
// exit ;
67712: GO 68119
// for i = 1 to mc_bases do
67714: LD_ADDR_VAR 0 2
67718: PUSH
67719: DOUBLE
67720: LD_INT 1
67722: DEC
67723: ST_TO_ADDR
67724: LD_EXP 46
67728: PUSH
67729: FOR_TO
67730: IFFALSE 68117
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
67732: LD_EXP 54
67736: PUSH
67737: LD_VAR 0 2
67741: ARRAY
67742: NOT
67743: PUSH
67744: LD_EXP 46
67748: PUSH
67749: LD_VAR 0 2
67753: ARRAY
67754: PPUSH
67755: LD_INT 30
67757: PUSH
67758: LD_INT 3
67760: PUSH
67761: EMPTY
67762: LIST
67763: LIST
67764: PPUSH
67765: CALL_OW 72
67769: NOT
67770: OR
67771: IFFALSE 67775
// continue ;
67773: GO 67729
// busy := false ;
67775: LD_ADDR_VAR 0 8
67779: PUSH
67780: LD_INT 0
67782: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
67783: LD_ADDR_VAR 0 4
67787: PUSH
67788: LD_EXP 46
67792: PUSH
67793: LD_VAR 0 2
67797: ARRAY
67798: PPUSH
67799: LD_INT 30
67801: PUSH
67802: LD_INT 3
67804: PUSH
67805: EMPTY
67806: LIST
67807: LIST
67808: PPUSH
67809: CALL_OW 72
67813: ST_TO_ADDR
// t := UnitFilter ( mc_turret_list [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ;
67814: LD_ADDR_VAR 0 6
67818: PUSH
67819: LD_EXP 54
67823: PUSH
67824: LD_VAR 0 2
67828: ARRAY
67829: PPUSH
67830: LD_INT 2
67832: PUSH
67833: LD_INT 30
67835: PUSH
67836: LD_INT 32
67838: PUSH
67839: EMPTY
67840: LIST
67841: LIST
67842: PUSH
67843: LD_INT 30
67845: PUSH
67846: LD_INT 33
67848: PUSH
67849: EMPTY
67850: LIST
67851: LIST
67852: PUSH
67853: EMPTY
67854: LIST
67855: LIST
67856: LIST
67857: PPUSH
67858: CALL_OW 72
67862: ST_TO_ADDR
// if not t then
67863: LD_VAR 0 6
67867: NOT
67868: IFFALSE 67872
// continue ;
67870: GO 67729
// for j in tmp do
67872: LD_ADDR_VAR 0 3
67876: PUSH
67877: LD_VAR 0 4
67881: PUSH
67882: FOR_IN
67883: IFFALSE 67913
// if not BuildingStatus ( j ) = bs_idle then
67885: LD_VAR 0 3
67889: PPUSH
67890: CALL_OW 461
67894: PUSH
67895: LD_INT 2
67897: EQUAL
67898: NOT
67899: IFFALSE 67911
// begin busy := true ;
67901: LD_ADDR_VAR 0 8
67905: PUSH
67906: LD_INT 1
67908: ST_TO_ADDR
// break ;
67909: GO 67913
// end ;
67911: GO 67882
67913: POP
67914: POP
// if busy then
67915: LD_VAR 0 8
67919: IFFALSE 67923
// continue ;
67921: GO 67729
// tw := UnitFilter ( t , [ f_bweapon , 0 ] ) ;
67923: LD_ADDR_VAR 0 7
67927: PUSH
67928: LD_VAR 0 6
67932: PPUSH
67933: LD_INT 35
67935: PUSH
67936: LD_INT 0
67938: PUSH
67939: EMPTY
67940: LIST
67941: LIST
67942: PPUSH
67943: CALL_OW 72
67947: ST_TO_ADDR
// if tw then
67948: LD_VAR 0 7
67952: IFFALSE 68029
// begin tw := tw [ 1 ] ;
67954: LD_ADDR_VAR 0 7
67958: PUSH
67959: LD_VAR 0 7
67963: PUSH
67964: LD_INT 1
67966: ARRAY
67967: ST_TO_ADDR
// weapon := GetTurretWeapon ( tw , mc_scan_area [ i ] ) ;
67968: LD_ADDR_VAR 0 9
67972: PUSH
67973: LD_VAR 0 7
67977: PPUSH
67978: LD_EXP 71
67982: PUSH
67983: LD_VAR 0 2
67987: ARRAY
67988: PPUSH
67989: CALL 29264 0 2
67993: ST_TO_ADDR
// if mc_allowed_tower_weapons [ i ] then
67994: LD_EXP 85
67998: PUSH
67999: LD_VAR 0 2
68003: ARRAY
68004: IFFALSE 68027
// if not weapon in mc_allowed_tower_weapons [ i ] then
68006: LD_VAR 0 9
68010: PUSH
68011: LD_EXP 85
68015: PUSH
68016: LD_VAR 0 2
68020: ARRAY
68021: IN
68022: NOT
68023: IFFALSE 68027
// continue ;
68025: GO 67729
// end else
68027: GO 68092
// begin tmp2 := UpgradeTurretsWeapon ( mc_turret_list [ i ] , tmp ) ;
68029: LD_ADDR_VAR 0 5
68033: PUSH
68034: LD_EXP 54
68038: PUSH
68039: LD_VAR 0 2
68043: ARRAY
68044: PPUSH
68045: LD_VAR 0 4
68049: PPUSH
68050: CALL 54766 0 2
68054: ST_TO_ADDR
// if not tmp2 then
68055: LD_VAR 0 5
68059: NOT
68060: IFFALSE 68064
// continue ;
68062: GO 67729
// tw := tmp2 [ 1 ] ;
68064: LD_ADDR_VAR 0 7
68068: PUSH
68069: LD_VAR 0 5
68073: PUSH
68074: LD_INT 1
68076: ARRAY
68077: ST_TO_ADDR
// weapon := tmp2 [ 2 ] ;
68078: LD_ADDR_VAR 0 9
68082: PUSH
68083: LD_VAR 0 5
68087: PUSH
68088: LD_INT 2
68090: ARRAY
68091: ST_TO_ADDR
// end ; if not weapon then
68092: LD_VAR 0 9
68096: NOT
68097: IFFALSE 68101
// continue ;
68099: GO 67729
// ComPlaceWeapon ( tw , weapon ) ;
68101: LD_VAR 0 7
68105: PPUSH
68106: LD_VAR 0 9
68110: PPUSH
68111: CALL_OW 148
// end ;
68115: GO 67729
68117: POP
68118: POP
// end ;
68119: LD_VAR 0 1
68123: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
68124: LD_INT 0
68126: PPUSH
68127: PPUSH
68128: PPUSH
68129: PPUSH
68130: PPUSH
68131: PPUSH
// if not mc_bases then
68132: LD_EXP 46
68136: NOT
68137: IFFALSE 68141
// exit ;
68139: GO 68917
// for i = 1 to mc_bases do
68141: LD_ADDR_VAR 0 2
68145: PUSH
68146: DOUBLE
68147: LD_INT 1
68149: DEC
68150: ST_TO_ADDR
68151: LD_EXP 46
68155: PUSH
68156: FOR_TO
68157: IFFALSE 68915
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] or mc_scan [ i ] then
68159: LD_EXP 59
68163: PUSH
68164: LD_VAR 0 2
68168: ARRAY
68169: NOT
68170: PUSH
68171: LD_EXP 59
68175: PUSH
68176: LD_VAR 0 2
68180: ARRAY
68181: PUSH
68182: LD_EXP 60
68186: PUSH
68187: LD_VAR 0 2
68191: ARRAY
68192: EQUAL
68193: OR
68194: PUSH
68195: LD_EXP 69
68199: PUSH
68200: LD_VAR 0 2
68204: ARRAY
68205: OR
68206: IFFALSE 68210
// continue ;
68208: GO 68156
// if mc_miners [ i ] then
68210: LD_EXP 60
68214: PUSH
68215: LD_VAR 0 2
68219: ARRAY
68220: IFFALSE 68602
// begin for j = mc_miners [ i ] downto 1 do
68222: LD_ADDR_VAR 0 3
68226: PUSH
68227: DOUBLE
68228: LD_EXP 60
68232: PUSH
68233: LD_VAR 0 2
68237: ARRAY
68238: INC
68239: ST_TO_ADDR
68240: LD_INT 1
68242: PUSH
68243: FOR_DOWNTO
68244: IFFALSE 68600
// begin if IsDead ( mc_miners [ i ] [ j ] ) or GetClass ( mc_miners [ i ] [ j ] ) <> 1 then
68246: LD_EXP 60
68250: PUSH
68251: LD_VAR 0 2
68255: ARRAY
68256: PUSH
68257: LD_VAR 0 3
68261: ARRAY
68262: PPUSH
68263: CALL_OW 301
68267: PUSH
68268: LD_EXP 60
68272: PUSH
68273: LD_VAR 0 2
68277: ARRAY
68278: PUSH
68279: LD_VAR 0 3
68283: ARRAY
68284: PPUSH
68285: CALL_OW 257
68289: PUSH
68290: LD_INT 1
68292: NONEQUAL
68293: OR
68294: IFFALSE 68357
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
68296: LD_ADDR_VAR 0 5
68300: PUSH
68301: LD_EXP 60
68305: PUSH
68306: LD_VAR 0 2
68310: ARRAY
68311: PUSH
68312: LD_EXP 60
68316: PUSH
68317: LD_VAR 0 2
68321: ARRAY
68322: PUSH
68323: LD_VAR 0 3
68327: ARRAY
68328: DIFF
68329: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
68330: LD_ADDR_EXP 60
68334: PUSH
68335: LD_EXP 60
68339: PPUSH
68340: LD_VAR 0 2
68344: PPUSH
68345: LD_VAR 0 5
68349: PPUSH
68350: CALL_OW 1
68354: ST_TO_ADDR
// continue ;
68355: GO 68243
// end ; if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and not HasTask ( mc_miners [ i ] [ j ] ) then
68357: LD_EXP 60
68361: PUSH
68362: LD_VAR 0 2
68366: ARRAY
68367: PUSH
68368: LD_VAR 0 3
68372: ARRAY
68373: PPUSH
68374: CALL_OW 257
68378: PUSH
68379: LD_INT 1
68381: EQUAL
68382: PUSH
68383: LD_EXP 60
68387: PUSH
68388: LD_VAR 0 2
68392: ARRAY
68393: PUSH
68394: LD_VAR 0 3
68398: ARRAY
68399: PPUSH
68400: CALL_OW 459
68404: NOT
68405: AND
68406: PUSH
68407: LD_EXP 60
68411: PUSH
68412: LD_VAR 0 2
68416: ARRAY
68417: PUSH
68418: LD_VAR 0 3
68422: ARRAY
68423: PPUSH
68424: CALL_OW 314
68428: NOT
68429: AND
68430: IFFALSE 68598
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
68432: LD_EXP 60
68436: PUSH
68437: LD_VAR 0 2
68441: ARRAY
68442: PUSH
68443: LD_VAR 0 3
68447: ARRAY
68448: PPUSH
68449: CALL_OW 310
68453: IFFALSE 68476
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
68455: LD_EXP 60
68459: PUSH
68460: LD_VAR 0 2
68464: ARRAY
68465: PUSH
68466: LD_VAR 0 3
68470: ARRAY
68471: PPUSH
68472: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
68476: LD_EXP 60
68480: PUSH
68481: LD_VAR 0 2
68485: ARRAY
68486: PUSH
68487: LD_VAR 0 3
68491: ARRAY
68492: PPUSH
68493: CALL_OW 314
68497: NOT
68498: IFFALSE 68598
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ j mod mc_mines [ i ] + 1 ] [ 1 ] , mc_mines [ i ] [ j mod mc_mines [ i ] + 1 ] [ 2 ] , 0 ) ;
68500: LD_EXP 60
68504: PUSH
68505: LD_VAR 0 2
68509: ARRAY
68510: PUSH
68511: LD_VAR 0 3
68515: ARRAY
68516: PPUSH
68517: LD_EXP 59
68521: PUSH
68522: LD_VAR 0 2
68526: ARRAY
68527: PUSH
68528: LD_VAR 0 3
68532: PUSH
68533: LD_EXP 59
68537: PUSH
68538: LD_VAR 0 2
68542: ARRAY
68543: MOD
68544: PUSH
68545: LD_INT 1
68547: PLUS
68548: ARRAY
68549: PUSH
68550: LD_INT 1
68552: ARRAY
68553: PPUSH
68554: LD_EXP 59
68558: PUSH
68559: LD_VAR 0 2
68563: ARRAY
68564: PUSH
68565: LD_VAR 0 3
68569: PUSH
68570: LD_EXP 59
68574: PUSH
68575: LD_VAR 0 2
68579: ARRAY
68580: MOD
68581: PUSH
68582: LD_INT 1
68584: PLUS
68585: ARRAY
68586: PUSH
68587: LD_INT 2
68589: ARRAY
68590: PPUSH
68591: LD_INT 0
68593: PPUSH
68594: CALL_OW 193
// end ; end ;
68598: GO 68243
68600: POP
68601: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
68602: LD_ADDR_VAR 0 5
68606: PUSH
68607: LD_EXP 46
68611: PUSH
68612: LD_VAR 0 2
68616: ARRAY
68617: PPUSH
68618: LD_INT 2
68620: PUSH
68621: LD_INT 30
68623: PUSH
68624: LD_INT 4
68626: PUSH
68627: EMPTY
68628: LIST
68629: LIST
68630: PUSH
68631: LD_INT 30
68633: PUSH
68634: LD_INT 5
68636: PUSH
68637: EMPTY
68638: LIST
68639: LIST
68640: PUSH
68641: LD_INT 30
68643: PUSH
68644: LD_INT 32
68646: PUSH
68647: EMPTY
68648: LIST
68649: LIST
68650: PUSH
68651: EMPTY
68652: LIST
68653: LIST
68654: LIST
68655: LIST
68656: PPUSH
68657: CALL_OW 72
68661: ST_TO_ADDR
// if not tmp then
68662: LD_VAR 0 5
68666: NOT
68667: IFFALSE 68671
// continue ;
68669: GO 68156
// list := [ ] ;
68671: LD_ADDR_VAR 0 6
68675: PUSH
68676: EMPTY
68677: ST_TO_ADDR
// for j in tmp do
68678: LD_ADDR_VAR 0 3
68682: PUSH
68683: LD_VAR 0 5
68687: PUSH
68688: FOR_IN
68689: IFFALSE 68758
// begin for k in UnitsInside ( j ) do
68691: LD_ADDR_VAR 0 4
68695: PUSH
68696: LD_VAR 0 3
68700: PPUSH
68701: CALL_OW 313
68705: PUSH
68706: FOR_IN
68707: IFFALSE 68754
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
68709: LD_VAR 0 4
68713: PPUSH
68714: CALL_OW 257
68718: PUSH
68719: LD_INT 1
68721: EQUAL
68722: PUSH
68723: LD_VAR 0 4
68727: PPUSH
68728: CALL_OW 459
68732: NOT
68733: AND
68734: IFFALSE 68752
// list := list ^ k ;
68736: LD_ADDR_VAR 0 6
68740: PUSH
68741: LD_VAR 0 6
68745: PUSH
68746: LD_VAR 0 4
68750: ADD
68751: ST_TO_ADDR
68752: GO 68706
68754: POP
68755: POP
// end ;
68756: GO 68688
68758: POP
68759: POP
// list := list diff mc_miners [ i ] ;
68760: LD_ADDR_VAR 0 6
68764: PUSH
68765: LD_VAR 0 6
68769: PUSH
68770: LD_EXP 60
68774: PUSH
68775: LD_VAR 0 2
68779: ARRAY
68780: DIFF
68781: ST_TO_ADDR
// if not list then
68782: LD_VAR 0 6
68786: NOT
68787: IFFALSE 68791
// continue ;
68789: GO 68156
// k := mc_mines [ i ] - mc_miners [ i ] ;
68791: LD_ADDR_VAR 0 4
68795: PUSH
68796: LD_EXP 59
68800: PUSH
68801: LD_VAR 0 2
68805: ARRAY
68806: PUSH
68807: LD_EXP 60
68811: PUSH
68812: LD_VAR 0 2
68816: ARRAY
68817: MINUS
68818: ST_TO_ADDR
// if k > list then
68819: LD_VAR 0 4
68823: PUSH
68824: LD_VAR 0 6
68828: GREATER
68829: IFFALSE 68841
// k := list ;
68831: LD_ADDR_VAR 0 4
68835: PUSH
68836: LD_VAR 0 6
68840: ST_TO_ADDR
// for j = 1 to k do
68841: LD_ADDR_VAR 0 3
68845: PUSH
68846: DOUBLE
68847: LD_INT 1
68849: DEC
68850: ST_TO_ADDR
68851: LD_VAR 0 4
68855: PUSH
68856: FOR_TO
68857: IFFALSE 68911
// mc_miners := ReplaceIn ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
68859: LD_ADDR_EXP 60
68863: PUSH
68864: LD_EXP 60
68868: PPUSH
68869: LD_VAR 0 2
68873: PUSH
68874: LD_EXP 60
68878: PUSH
68879: LD_VAR 0 2
68883: ARRAY
68884: PUSH
68885: LD_INT 1
68887: PLUS
68888: PUSH
68889: EMPTY
68890: LIST
68891: LIST
68892: PPUSH
68893: LD_VAR 0 6
68897: PUSH
68898: LD_VAR 0 3
68902: ARRAY
68903: PPUSH
68904: CALL 24294 0 3
68908: ST_TO_ADDR
68909: GO 68856
68911: POP
68912: POP
// end ;
68913: GO 68156
68915: POP
68916: POP
// end ;
68917: LD_VAR 0 1
68921: RET
// export function MC_CollectCrates ( ) ; var i , j , k , tmp , target , cargo , depot , fac , components ; begin
68922: LD_INT 0
68924: PPUSH
68925: PPUSH
68926: PPUSH
68927: PPUSH
68928: PPUSH
68929: PPUSH
68930: PPUSH
68931: PPUSH
68932: PPUSH
68933: PPUSH
// if not mc_bases then
68934: LD_EXP 46
68938: NOT
68939: IFFALSE 68943
// exit ;
68941: GO 70693
// for i = 1 to mc_bases do
68943: LD_ADDR_VAR 0 2
68947: PUSH
68948: DOUBLE
68949: LD_INT 1
68951: DEC
68952: ST_TO_ADDR
68953: LD_EXP 46
68957: PUSH
68958: FOR_TO
68959: IFFALSE 70691
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
68961: LD_EXP 46
68965: PUSH
68966: LD_VAR 0 2
68970: ARRAY
68971: NOT
68972: PUSH
68973: LD_EXP 53
68977: PUSH
68978: LD_VAR 0 2
68982: ARRAY
68983: OR
68984: IFFALSE 68988
// continue ;
68986: GO 68958
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
68988: LD_EXP 62
68992: PUSH
68993: LD_VAR 0 2
68997: ARRAY
68998: NOT
68999: PUSH
69000: LD_EXP 63
69004: PUSH
69005: LD_VAR 0 2
69009: ARRAY
69010: AND
69011: IFFALSE 69049
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
69013: LD_ADDR_EXP 63
69017: PUSH
69018: LD_EXP 63
69022: PPUSH
69023: LD_VAR 0 2
69027: PPUSH
69028: EMPTY
69029: PPUSH
69030: CALL_OW 1
69034: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
69035: LD_VAR 0 2
69039: PPUSH
69040: LD_INT 107
69042: PPUSH
69043: CALL 59923 0 2
// continue ;
69047: GO 68958
// end ; target := [ ] ;
69049: LD_ADDR_VAR 0 6
69053: PUSH
69054: EMPTY
69055: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
69056: LD_ADDR_VAR 0 3
69060: PUSH
69061: DOUBLE
69062: LD_EXP 62
69066: PUSH
69067: LD_VAR 0 2
69071: ARRAY
69072: INC
69073: ST_TO_ADDR
69074: LD_INT 1
69076: PUSH
69077: FOR_DOWNTO
69078: IFFALSE 69338
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
69080: LD_EXP 62
69084: PUSH
69085: LD_VAR 0 2
69089: ARRAY
69090: PUSH
69091: LD_VAR 0 3
69095: ARRAY
69096: PUSH
69097: LD_INT 2
69099: ARRAY
69100: PPUSH
69101: LD_EXP 62
69105: PUSH
69106: LD_VAR 0 2
69110: ARRAY
69111: PUSH
69112: LD_VAR 0 3
69116: ARRAY
69117: PUSH
69118: LD_INT 3
69120: ARRAY
69121: PPUSH
69122: CALL_OW 488
69126: PUSH
69127: LD_EXP 62
69131: PUSH
69132: LD_VAR 0 2
69136: ARRAY
69137: PUSH
69138: LD_VAR 0 3
69142: ARRAY
69143: PUSH
69144: LD_INT 2
69146: ARRAY
69147: PPUSH
69148: LD_EXP 62
69152: PUSH
69153: LD_VAR 0 2
69157: ARRAY
69158: PUSH
69159: LD_VAR 0 3
69163: ARRAY
69164: PUSH
69165: LD_INT 3
69167: ARRAY
69168: PPUSH
69169: CALL_OW 284
69173: PUSH
69174: LD_INT 0
69176: EQUAL
69177: AND
69178: IFFALSE 69233
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
69180: LD_ADDR_VAR 0 5
69184: PUSH
69185: LD_EXP 62
69189: PUSH
69190: LD_VAR 0 2
69194: ARRAY
69195: PPUSH
69196: LD_VAR 0 3
69200: PPUSH
69201: CALL_OW 3
69205: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
69206: LD_ADDR_EXP 62
69210: PUSH
69211: LD_EXP 62
69215: PPUSH
69216: LD_VAR 0 2
69220: PPUSH
69221: LD_VAR 0 5
69225: PPUSH
69226: CALL_OW 1
69230: ST_TO_ADDR
// continue ;
69231: GO 69077
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 30 ) [ 4 ] = 0 then
69233: LD_EXP 46
69237: PUSH
69238: LD_VAR 0 2
69242: ARRAY
69243: PUSH
69244: LD_INT 1
69246: ARRAY
69247: PPUSH
69248: CALL_OW 255
69252: PPUSH
69253: LD_EXP 62
69257: PUSH
69258: LD_VAR 0 2
69262: ARRAY
69263: PUSH
69264: LD_VAR 0 3
69268: ARRAY
69269: PUSH
69270: LD_INT 2
69272: ARRAY
69273: PPUSH
69274: LD_EXP 62
69278: PUSH
69279: LD_VAR 0 2
69283: ARRAY
69284: PUSH
69285: LD_VAR 0 3
69289: ARRAY
69290: PUSH
69291: LD_INT 3
69293: ARRAY
69294: PPUSH
69295: LD_INT 30
69297: PPUSH
69298: CALL 25190 0 4
69302: PUSH
69303: LD_INT 4
69305: ARRAY
69306: PUSH
69307: LD_INT 0
69309: EQUAL
69310: IFFALSE 69336
// begin target := mc_crates [ i ] [ j ] ;
69312: LD_ADDR_VAR 0 6
69316: PUSH
69317: LD_EXP 62
69321: PUSH
69322: LD_VAR 0 2
69326: ARRAY
69327: PUSH
69328: LD_VAR 0 3
69332: ARRAY
69333: ST_TO_ADDR
// break ;
69334: GO 69338
// end ; end ;
69336: GO 69077
69338: POP
69339: POP
// if not target then
69340: LD_VAR 0 6
69344: NOT
69345: IFFALSE 69349
// continue ;
69347: GO 68958
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
69349: LD_ADDR_VAR 0 7
69353: PUSH
69354: LD_EXP 65
69358: PUSH
69359: LD_VAR 0 2
69363: ARRAY
69364: PPUSH
69365: LD_INT 2
69367: PUSH
69368: LD_INT 3
69370: PUSH
69371: LD_INT 58
69373: PUSH
69374: EMPTY
69375: LIST
69376: PUSH
69377: EMPTY
69378: LIST
69379: LIST
69380: PUSH
69381: LD_INT 61
69383: PUSH
69384: EMPTY
69385: LIST
69386: PUSH
69387: LD_INT 33
69389: PUSH
69390: LD_INT 5
69392: PUSH
69393: EMPTY
69394: LIST
69395: LIST
69396: PUSH
69397: LD_INT 33
69399: PUSH
69400: LD_INT 3
69402: PUSH
69403: EMPTY
69404: LIST
69405: LIST
69406: PUSH
69407: EMPTY
69408: LIST
69409: LIST
69410: LIST
69411: LIST
69412: LIST
69413: PUSH
69414: LD_INT 2
69416: PUSH
69417: LD_INT 34
69419: PUSH
69420: LD_INT 32
69422: PUSH
69423: EMPTY
69424: LIST
69425: LIST
69426: PUSH
69427: LD_INT 34
69429: PUSH
69430: LD_INT 51
69432: PUSH
69433: EMPTY
69434: LIST
69435: LIST
69436: PUSH
69437: LD_INT 34
69439: PUSH
69440: LD_INT 12
69442: PUSH
69443: EMPTY
69444: LIST
69445: LIST
69446: PUSH
69447: EMPTY
69448: LIST
69449: LIST
69450: LIST
69451: LIST
69452: PUSH
69453: EMPTY
69454: LIST
69455: LIST
69456: PPUSH
69457: CALL_OW 72
69461: ST_TO_ADDR
// if not cargo then
69462: LD_VAR 0 7
69466: NOT
69467: IFFALSE 70110
// begin if mc_crates_collector [ i ] < 5 then
69469: LD_EXP 63
69473: PUSH
69474: LD_VAR 0 2
69478: ARRAY
69479: PUSH
69480: LD_INT 5
69482: LESS
69483: IFFALSE 69849
// begin if mc_ape [ i ] then
69485: LD_EXP 75
69489: PUSH
69490: LD_VAR 0 2
69494: ARRAY
69495: IFFALSE 69542
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
69497: LD_ADDR_VAR 0 5
69501: PUSH
69502: LD_EXP 75
69506: PUSH
69507: LD_VAR 0 2
69511: ARRAY
69512: PPUSH
69513: LD_INT 25
69515: PUSH
69516: LD_INT 16
69518: PUSH
69519: EMPTY
69520: LIST
69521: LIST
69522: PUSH
69523: LD_INT 24
69525: PUSH
69526: LD_INT 750
69528: PUSH
69529: EMPTY
69530: LIST
69531: LIST
69532: PUSH
69533: EMPTY
69534: LIST
69535: LIST
69536: PPUSH
69537: CALL_OW 72
69541: ST_TO_ADDR
// if not tmp then
69542: LD_VAR 0 5
69546: NOT
69547: IFFALSE 69594
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
69549: LD_ADDR_VAR 0 5
69553: PUSH
69554: LD_EXP 46
69558: PUSH
69559: LD_VAR 0 2
69563: ARRAY
69564: PPUSH
69565: LD_INT 25
69567: PUSH
69568: LD_INT 2
69570: PUSH
69571: EMPTY
69572: LIST
69573: LIST
69574: PUSH
69575: LD_INT 24
69577: PUSH
69578: LD_INT 750
69580: PUSH
69581: EMPTY
69582: LIST
69583: LIST
69584: PUSH
69585: EMPTY
69586: LIST
69587: LIST
69588: PPUSH
69589: CALL_OW 72
69593: ST_TO_ADDR
// if mc_ape [ i ] and UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) and tmp < 5 then
69594: LD_EXP 75
69598: PUSH
69599: LD_VAR 0 2
69603: ARRAY
69604: PUSH
69605: LD_EXP 46
69609: PUSH
69610: LD_VAR 0 2
69614: ARRAY
69615: PPUSH
69616: LD_INT 25
69618: PUSH
69619: LD_INT 2
69621: PUSH
69622: EMPTY
69623: LIST
69624: LIST
69625: PUSH
69626: LD_INT 24
69628: PUSH
69629: LD_INT 750
69631: PUSH
69632: EMPTY
69633: LIST
69634: LIST
69635: PUSH
69636: EMPTY
69637: LIST
69638: LIST
69639: PPUSH
69640: CALL_OW 72
69644: AND
69645: PUSH
69646: LD_VAR 0 5
69650: PUSH
69651: LD_INT 5
69653: LESS
69654: AND
69655: IFFALSE 69737
// begin for j in UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) do
69657: LD_ADDR_VAR 0 3
69661: PUSH
69662: LD_EXP 46
69666: PUSH
69667: LD_VAR 0 2
69671: ARRAY
69672: PPUSH
69673: LD_INT 25
69675: PUSH
69676: LD_INT 2
69678: PUSH
69679: EMPTY
69680: LIST
69681: LIST
69682: PUSH
69683: LD_INT 24
69685: PUSH
69686: LD_INT 750
69688: PUSH
69689: EMPTY
69690: LIST
69691: LIST
69692: PUSH
69693: EMPTY
69694: LIST
69695: LIST
69696: PPUSH
69697: CALL_OW 72
69701: PUSH
69702: FOR_IN
69703: IFFALSE 69735
// begin tmp := tmp union j ;
69705: LD_ADDR_VAR 0 5
69709: PUSH
69710: LD_VAR 0 5
69714: PUSH
69715: LD_VAR 0 3
69719: UNION
69720: ST_TO_ADDR
// if tmp >= 5 then
69721: LD_VAR 0 5
69725: PUSH
69726: LD_INT 5
69728: GREATEREQUAL
69729: IFFALSE 69733
// break ;
69731: GO 69735
// end ;
69733: GO 69702
69735: POP
69736: POP
// end ; if not tmp then
69737: LD_VAR 0 5
69741: NOT
69742: IFFALSE 69746
// continue ;
69744: GO 68958
// for j in tmp do
69746: LD_ADDR_VAR 0 3
69750: PUSH
69751: LD_VAR 0 5
69755: PUSH
69756: FOR_IN
69757: IFFALSE 69847
// if not GetTag ( j ) then
69759: LD_VAR 0 3
69763: PPUSH
69764: CALL_OW 110
69768: NOT
69769: IFFALSE 69845
// begin mc_crates_collector := ReplaceIn ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
69771: LD_ADDR_EXP 63
69775: PUSH
69776: LD_EXP 63
69780: PPUSH
69781: LD_VAR 0 2
69785: PUSH
69786: LD_EXP 63
69790: PUSH
69791: LD_VAR 0 2
69795: ARRAY
69796: PUSH
69797: LD_INT 1
69799: PLUS
69800: PUSH
69801: EMPTY
69802: LIST
69803: LIST
69804: PPUSH
69805: LD_VAR 0 3
69809: PPUSH
69810: CALL 24294 0 3
69814: ST_TO_ADDR
// SetTag ( j , 107 ) ;
69815: LD_VAR 0 3
69819: PPUSH
69820: LD_INT 107
69822: PPUSH
69823: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
69827: LD_EXP 63
69831: PUSH
69832: LD_VAR 0 2
69836: ARRAY
69837: PUSH
69838: LD_INT 5
69840: GREATEREQUAL
69841: IFFALSE 69845
// break ;
69843: GO 69847
// end ;
69845: GO 69756
69847: POP
69848: POP
// end ; if mc_crates_collector [ i ] and target then
69849: LD_EXP 63
69853: PUSH
69854: LD_VAR 0 2
69858: ARRAY
69859: PUSH
69860: LD_VAR 0 6
69864: AND
69865: IFFALSE 70108
// begin if mc_crates_collector [ i ] < target [ 1 ] then
69867: LD_EXP 63
69871: PUSH
69872: LD_VAR 0 2
69876: ARRAY
69877: PUSH
69878: LD_VAR 0 6
69882: PUSH
69883: LD_INT 1
69885: ARRAY
69886: LESS
69887: IFFALSE 69907
// tmp := mc_crates_collector [ i ] else
69889: LD_ADDR_VAR 0 5
69893: PUSH
69894: LD_EXP 63
69898: PUSH
69899: LD_VAR 0 2
69903: ARRAY
69904: ST_TO_ADDR
69905: GO 69921
// tmp := target [ 1 ] ;
69907: LD_ADDR_VAR 0 5
69911: PUSH
69912: LD_VAR 0 6
69916: PUSH
69917: LD_INT 1
69919: ARRAY
69920: ST_TO_ADDR
// k := 0 ;
69921: LD_ADDR_VAR 0 4
69925: PUSH
69926: LD_INT 0
69928: ST_TO_ADDR
// for j in mc_crates_collector [ i ] do
69929: LD_ADDR_VAR 0 3
69933: PUSH
69934: LD_EXP 63
69938: PUSH
69939: LD_VAR 0 2
69943: ARRAY
69944: PUSH
69945: FOR_IN
69946: IFFALSE 70106
// begin k := k + 1 ;
69948: LD_ADDR_VAR 0 4
69952: PUSH
69953: LD_VAR 0 4
69957: PUSH
69958: LD_INT 1
69960: PLUS
69961: ST_TO_ADDR
// if k > tmp then
69962: LD_VAR 0 4
69966: PUSH
69967: LD_VAR 0 5
69971: GREATER
69972: IFFALSE 69976
// break ;
69974: GO 70106
// if not GetClass ( j ) in [ 2 , 16 ] then
69976: LD_VAR 0 3
69980: PPUSH
69981: CALL_OW 257
69985: PUSH
69986: LD_INT 2
69988: PUSH
69989: LD_INT 16
69991: PUSH
69992: EMPTY
69993: LIST
69994: LIST
69995: IN
69996: NOT
69997: IFFALSE 70050
// begin mc_crates_collector := Replace ( mc_crates_collector , i , mc_crates_collector [ i ] diff j ) ;
69999: LD_ADDR_EXP 63
70003: PUSH
70004: LD_EXP 63
70008: PPUSH
70009: LD_VAR 0 2
70013: PPUSH
70014: LD_EXP 63
70018: PUSH
70019: LD_VAR 0 2
70023: ARRAY
70024: PUSH
70025: LD_VAR 0 3
70029: DIFF
70030: PPUSH
70031: CALL_OW 1
70035: ST_TO_ADDR
// SetTag ( j , 0 ) ;
70036: LD_VAR 0 3
70040: PPUSH
70041: LD_INT 0
70043: PPUSH
70044: CALL_OW 109
// continue ;
70048: GO 69945
// end ; if IsInUnit ( j ) then
70050: LD_VAR 0 3
70054: PPUSH
70055: CALL_OW 310
70059: IFFALSE 70070
// ComExitBuilding ( j ) ;
70061: LD_VAR 0 3
70065: PPUSH
70066: CALL_OW 122
// wait ( 3 ) ;
70070: LD_INT 3
70072: PPUSH
70073: CALL_OW 67
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
70077: LD_VAR 0 3
70081: PPUSH
70082: LD_VAR 0 6
70086: PUSH
70087: LD_INT 2
70089: ARRAY
70090: PPUSH
70091: LD_VAR 0 6
70095: PUSH
70096: LD_INT 3
70098: ARRAY
70099: PPUSH
70100: CALL_OW 117
// end ;
70104: GO 69945
70106: POP
70107: POP
// end ; end else
70108: GO 70689
// begin for j in cargo do
70110: LD_ADDR_VAR 0 3
70114: PUSH
70115: LD_VAR 0 7
70119: PUSH
70120: FOR_IN
70121: IFFALSE 70687
// begin if GetTag ( j ) <> 0 then
70123: LD_VAR 0 3
70127: PPUSH
70128: CALL_OW 110
70132: PUSH
70133: LD_INT 0
70135: NONEQUAL
70136: IFFALSE 70140
// continue ;
70138: GO 70120
// if GetLives ( j ) < 1000 and not IsInArea ( j , mc_parking [ i ] ) then
70140: LD_VAR 0 3
70144: PPUSH
70145: CALL_OW 256
70149: PUSH
70150: LD_INT 1000
70152: LESS
70153: PUSH
70154: LD_VAR 0 3
70158: PPUSH
70159: LD_EXP 70
70163: PUSH
70164: LD_VAR 0 2
70168: ARRAY
70169: PPUSH
70170: CALL_OW 308
70174: NOT
70175: AND
70176: IFFALSE 70198
// ComMoveToArea ( j , mc_parking [ i ] ) ;
70178: LD_VAR 0 3
70182: PPUSH
70183: LD_EXP 70
70187: PUSH
70188: LD_VAR 0 2
70192: ARRAY
70193: PPUSH
70194: CALL_OW 113
// if GetLives ( j ) < 1000 and IsInArea ( j , mc_parking [ i ] ) then
70198: LD_VAR 0 3
70202: PPUSH
70203: CALL_OW 256
70207: PUSH
70208: LD_INT 1000
70210: LESS
70211: PUSH
70212: LD_VAR 0 3
70216: PPUSH
70217: LD_EXP 70
70221: PUSH
70222: LD_VAR 0 2
70226: ARRAY
70227: PPUSH
70228: CALL_OW 308
70232: AND
70233: IFFALSE 70237
// continue ;
70235: GO 70120
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
70237: LD_VAR 0 3
70241: PPUSH
70242: CALL_OW 262
70246: PUSH
70247: LD_INT 2
70249: EQUAL
70250: PUSH
70251: LD_VAR 0 3
70255: PPUSH
70256: CALL_OW 261
70260: PUSH
70261: LD_INT 15
70263: LESS
70264: AND
70265: IFFALSE 70269
// continue ;
70267: GO 70120
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
70269: LD_VAR 0 3
70273: PPUSH
70274: CALL_OW 262
70278: PUSH
70279: LD_INT 1
70281: EQUAL
70282: PUSH
70283: LD_VAR 0 3
70287: PPUSH
70288: CALL_OW 261
70292: PUSH
70293: LD_INT 10
70295: LESS
70296: AND
70297: IFFALSE 70626
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
70299: LD_ADDR_VAR 0 8
70303: PUSH
70304: LD_EXP 46
70308: PUSH
70309: LD_VAR 0 2
70313: ARRAY
70314: PPUSH
70315: LD_INT 2
70317: PUSH
70318: LD_INT 30
70320: PUSH
70321: LD_INT 0
70323: PUSH
70324: EMPTY
70325: LIST
70326: LIST
70327: PUSH
70328: LD_INT 30
70330: PUSH
70331: LD_INT 1
70333: PUSH
70334: EMPTY
70335: LIST
70336: LIST
70337: PUSH
70338: EMPTY
70339: LIST
70340: LIST
70341: LIST
70342: PPUSH
70343: CALL_OW 72
70347: ST_TO_ADDR
// if not depot then
70348: LD_VAR 0 8
70352: NOT
70353: IFFALSE 70357
// continue ;
70355: GO 70120
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
70357: LD_VAR 0 3
70361: PPUSH
70362: LD_VAR 0 8
70366: PPUSH
70367: LD_VAR 0 3
70371: PPUSH
70372: CALL_OW 74
70376: PPUSH
70377: CALL_OW 296
70381: PUSH
70382: LD_INT 6
70384: LESS
70385: IFFALSE 70401
// SetFuel ( j , 100 ) else
70387: LD_VAR 0 3
70391: PPUSH
70392: LD_INT 100
70394: PPUSH
70395: CALL_OW 240
70399: GO 70626
// if GetFuel ( j ) = 0 then
70401: LD_VAR 0 3
70405: PPUSH
70406: CALL_OW 261
70410: PUSH
70411: LD_INT 0
70413: EQUAL
70414: IFFALSE 70626
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
70416: LD_ADDR_EXP 65
70420: PUSH
70421: LD_EXP 65
70425: PPUSH
70426: LD_VAR 0 2
70430: PPUSH
70431: LD_EXP 65
70435: PUSH
70436: LD_VAR 0 2
70440: ARRAY
70441: PUSH
70442: LD_VAR 0 3
70446: DIFF
70447: PPUSH
70448: CALL_OW 1
70452: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
70453: LD_VAR 0 3
70457: PPUSH
70458: CALL_OW 263
70462: PUSH
70463: LD_INT 1
70465: EQUAL
70466: IFFALSE 70482
// ComExitVehicle ( IsInUnit ( j ) ) ;
70468: LD_VAR 0 3
70472: PPUSH
70473: CALL_OW 310
70477: PPUSH
70478: CALL_OW 121
// if GetControl ( j ) = control_remote then
70482: LD_VAR 0 3
70486: PPUSH
70487: CALL_OW 263
70491: PUSH
70492: LD_INT 2
70494: EQUAL
70495: IFFALSE 70506
// ComUnlink ( j ) ;
70497: LD_VAR 0 3
70501: PPUSH
70502: CALL_OW 136
// fac := MC_GetBuildings ( i , b_factory ) ;
70506: LD_ADDR_VAR 0 9
70510: PUSH
70511: LD_VAR 0 2
70515: PPUSH
70516: LD_INT 3
70518: PPUSH
70519: CALL 79979 0 2
70523: ST_TO_ADDR
// if fac then
70524: LD_VAR 0 9
70528: IFFALSE 70624
// begin for k in fac do
70530: LD_ADDR_VAR 0 4
70534: PUSH
70535: LD_VAR 0 9
70539: PUSH
70540: FOR_IN
70541: IFFALSE 70622
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
70543: LD_ADDR_VAR 0 10
70547: PUSH
70548: LD_VAR 0 9
70552: PPUSH
70553: LD_VAR 0 3
70557: PPUSH
70558: CALL_OW 265
70562: PPUSH
70563: LD_VAR 0 3
70567: PPUSH
70568: CALL_OW 262
70572: PPUSH
70573: LD_VAR 0 3
70577: PPUSH
70578: CALL_OW 263
70582: PPUSH
70583: LD_VAR 0 3
70587: PPUSH
70588: CALL_OW 264
70592: PPUSH
70593: CALL 21826 0 5
70597: ST_TO_ADDR
// if components then
70598: LD_VAR 0 10
70602: IFFALSE 70620
// begin MC_InsertProduceList ( i , components ) ;
70604: LD_VAR 0 2
70608: PPUSH
70609: LD_VAR 0 10
70613: PPUSH
70614: CALL 79524 0 2
// break ;
70618: GO 70622
// end ; end ;
70620: GO 70540
70622: POP
70623: POP
// end ; continue ;
70624: GO 70120
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
70626: LD_VAR 0 3
70630: PPUSH
70631: LD_INT 1
70633: PPUSH
70634: CALL_OW 289
70638: PUSH
70639: LD_INT 100
70641: LESS
70642: PUSH
70643: LD_VAR 0 3
70647: PPUSH
70648: CALL_OW 314
70652: NOT
70653: AND
70654: IFFALSE 70683
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
70656: LD_VAR 0 3
70660: PPUSH
70661: LD_VAR 0 6
70665: PUSH
70666: LD_INT 2
70668: ARRAY
70669: PPUSH
70670: LD_VAR 0 6
70674: PUSH
70675: LD_INT 3
70677: ARRAY
70678: PPUSH
70679: CALL_OW 117
// break ;
70683: GO 70687
// end ;
70685: GO 70120
70687: POP
70688: POP
// end ; end ;
70689: GO 68958
70691: POP
70692: POP
// end ;
70693: LD_VAR 0 1
70697: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
70698: LD_INT 0
70700: PPUSH
70701: PPUSH
70702: PPUSH
70703: PPUSH
// if not mc_bases then
70704: LD_EXP 46
70708: NOT
70709: IFFALSE 70713
// exit ;
70711: GO 70874
// for i = 1 to mc_bases do
70713: LD_ADDR_VAR 0 2
70717: PUSH
70718: DOUBLE
70719: LD_INT 1
70721: DEC
70722: ST_TO_ADDR
70723: LD_EXP 46
70727: PUSH
70728: FOR_TO
70729: IFFALSE 70872
// begin tmp := UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) ;
70731: LD_ADDR_VAR 0 4
70735: PUSH
70736: LD_EXP 65
70740: PUSH
70741: LD_VAR 0 2
70745: ARRAY
70746: PUSH
70747: LD_EXP 68
70751: PUSH
70752: LD_VAR 0 2
70756: ARRAY
70757: UNION
70758: PPUSH
70759: LD_INT 33
70761: PUSH
70762: LD_INT 2
70764: PUSH
70765: EMPTY
70766: LIST
70767: LIST
70768: PPUSH
70769: CALL_OW 72
70773: ST_TO_ADDR
// if tmp then
70774: LD_VAR 0 4
70778: IFFALSE 70870
// for j in tmp do
70780: LD_ADDR_VAR 0 3
70784: PUSH
70785: LD_VAR 0 4
70789: PUSH
70790: FOR_IN
70791: IFFALSE 70868
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
70793: LD_VAR 0 3
70797: PPUSH
70798: CALL_OW 312
70802: NOT
70803: PUSH
70804: LD_VAR 0 3
70808: PPUSH
70809: CALL_OW 256
70813: PUSH
70814: LD_INT 250
70816: GREATEREQUAL
70817: AND
70818: IFFALSE 70831
// Connect ( j ) else
70820: LD_VAR 0 3
70824: PPUSH
70825: CALL 27227 0 1
70829: GO 70866
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
70831: LD_VAR 0 3
70835: PPUSH
70836: CALL_OW 256
70840: PUSH
70841: LD_INT 250
70843: LESS
70844: PUSH
70845: LD_VAR 0 3
70849: PPUSH
70850: CALL_OW 312
70854: AND
70855: IFFALSE 70866
// ComUnlink ( j ) ;
70857: LD_VAR 0 3
70861: PPUSH
70862: CALL_OW 136
70866: GO 70790
70868: POP
70869: POP
// end ;
70870: GO 70728
70872: POP
70873: POP
// end ;
70874: LD_VAR 0 1
70878: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
70879: LD_INT 0
70881: PPUSH
70882: PPUSH
70883: PPUSH
70884: PPUSH
70885: PPUSH
// if not mc_bases then
70886: LD_EXP 46
70890: NOT
70891: IFFALSE 70895
// exit ;
70893: GO 71340
// for i = 1 to mc_bases do
70895: LD_ADDR_VAR 0 2
70899: PUSH
70900: DOUBLE
70901: LD_INT 1
70903: DEC
70904: ST_TO_ADDR
70905: LD_EXP 46
70909: PUSH
70910: FOR_TO
70911: IFFALSE 71338
// begin if not mc_produce [ i ] then
70913: LD_EXP 67
70917: PUSH
70918: LD_VAR 0 2
70922: ARRAY
70923: NOT
70924: IFFALSE 70928
// continue ;
70926: GO 70910
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
70928: LD_ADDR_VAR 0 5
70932: PUSH
70933: LD_EXP 46
70937: PUSH
70938: LD_VAR 0 2
70942: ARRAY
70943: PPUSH
70944: LD_INT 30
70946: PUSH
70947: LD_INT 3
70949: PUSH
70950: EMPTY
70951: LIST
70952: LIST
70953: PPUSH
70954: CALL_OW 72
70958: ST_TO_ADDR
// if not fac then
70959: LD_VAR 0 5
70963: NOT
70964: IFFALSE 70968
// continue ;
70966: GO 70910
// for j in fac do
70968: LD_ADDR_VAR 0 3
70972: PUSH
70973: LD_VAR 0 5
70977: PUSH
70978: FOR_IN
70979: IFFALSE 71334
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] then
70981: LD_VAR 0 3
70985: PPUSH
70986: CALL_OW 461
70990: PUSH
70991: LD_INT 2
70993: NONEQUAL
70994: PUSH
70995: LD_VAR 0 3
70999: PPUSH
71000: LD_INT 15
71002: PPUSH
71003: CALL 26887 0 2
71007: PUSH
71008: LD_INT 4
71010: ARRAY
71011: OR
71012: IFFALSE 71016
// continue ;
71014: GO 70978
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
71016: LD_VAR 0 3
71020: PPUSH
71021: LD_EXP 67
71025: PUSH
71026: LD_VAR 0 2
71030: ARRAY
71031: PUSH
71032: LD_INT 1
71034: ARRAY
71035: PUSH
71036: LD_INT 1
71038: ARRAY
71039: PPUSH
71040: LD_EXP 67
71044: PUSH
71045: LD_VAR 0 2
71049: ARRAY
71050: PUSH
71051: LD_INT 1
71053: ARRAY
71054: PUSH
71055: LD_INT 2
71057: ARRAY
71058: PPUSH
71059: LD_EXP 67
71063: PUSH
71064: LD_VAR 0 2
71068: ARRAY
71069: PUSH
71070: LD_INT 1
71072: ARRAY
71073: PUSH
71074: LD_INT 3
71076: ARRAY
71077: PPUSH
71078: LD_EXP 67
71082: PUSH
71083: LD_VAR 0 2
71087: ARRAY
71088: PUSH
71089: LD_INT 1
71091: ARRAY
71092: PUSH
71093: LD_INT 4
71095: ARRAY
71096: PPUSH
71097: CALL_OW 448
71101: PUSH
71102: LD_VAR 0 3
71106: PPUSH
71107: LD_EXP 67
71111: PUSH
71112: LD_VAR 0 2
71116: ARRAY
71117: PUSH
71118: LD_INT 1
71120: ARRAY
71121: PUSH
71122: LD_INT 1
71124: ARRAY
71125: PUSH
71126: LD_EXP 67
71130: PUSH
71131: LD_VAR 0 2
71135: ARRAY
71136: PUSH
71137: LD_INT 1
71139: ARRAY
71140: PUSH
71141: LD_INT 2
71143: ARRAY
71144: PUSH
71145: LD_EXP 67
71149: PUSH
71150: LD_VAR 0 2
71154: ARRAY
71155: PUSH
71156: LD_INT 1
71158: ARRAY
71159: PUSH
71160: LD_INT 3
71162: ARRAY
71163: PUSH
71164: LD_EXP 67
71168: PUSH
71169: LD_VAR 0 2
71173: ARRAY
71174: PUSH
71175: LD_INT 1
71177: ARRAY
71178: PUSH
71179: LD_INT 4
71181: ARRAY
71182: PUSH
71183: EMPTY
71184: LIST
71185: LIST
71186: LIST
71187: LIST
71188: PPUSH
71189: CALL 30558 0 2
71193: AND
71194: IFFALSE 71332
// begin AddComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
71196: LD_VAR 0 3
71200: PPUSH
71201: LD_EXP 67
71205: PUSH
71206: LD_VAR 0 2
71210: ARRAY
71211: PUSH
71212: LD_INT 1
71214: ARRAY
71215: PUSH
71216: LD_INT 1
71218: ARRAY
71219: PPUSH
71220: LD_EXP 67
71224: PUSH
71225: LD_VAR 0 2
71229: ARRAY
71230: PUSH
71231: LD_INT 1
71233: ARRAY
71234: PUSH
71235: LD_INT 2
71237: ARRAY
71238: PPUSH
71239: LD_EXP 67
71243: PUSH
71244: LD_VAR 0 2
71248: ARRAY
71249: PUSH
71250: LD_INT 1
71252: ARRAY
71253: PUSH
71254: LD_INT 3
71256: ARRAY
71257: PPUSH
71258: LD_EXP 67
71262: PUSH
71263: LD_VAR 0 2
71267: ARRAY
71268: PUSH
71269: LD_INT 1
71271: ARRAY
71272: PUSH
71273: LD_INT 4
71275: ARRAY
71276: PPUSH
71277: CALL_OW 185
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
71281: LD_ADDR_VAR 0 4
71285: PUSH
71286: LD_EXP 67
71290: PUSH
71291: LD_VAR 0 2
71295: ARRAY
71296: PPUSH
71297: LD_INT 1
71299: PPUSH
71300: CALL_OW 3
71304: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
71305: LD_ADDR_EXP 67
71309: PUSH
71310: LD_EXP 67
71314: PPUSH
71315: LD_VAR 0 2
71319: PPUSH
71320: LD_VAR 0 4
71324: PPUSH
71325: CALL_OW 1
71329: ST_TO_ADDR
// break ;
71330: GO 71334
// end ; end ;
71332: GO 70978
71334: POP
71335: POP
// end ;
71336: GO 70910
71338: POP
71339: POP
// end ;
71340: LD_VAR 0 1
71344: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
71345: LD_INT 0
71347: PPUSH
71348: PPUSH
71349: PPUSH
// if not mc_bases then
71350: LD_EXP 46
71354: NOT
71355: IFFALSE 71359
// exit ;
71357: GO 71448
// for i = 1 to mc_bases do
71359: LD_ADDR_VAR 0 2
71363: PUSH
71364: DOUBLE
71365: LD_INT 1
71367: DEC
71368: ST_TO_ADDR
71369: LD_EXP 46
71373: PUSH
71374: FOR_TO
71375: IFFALSE 71446
// begin if mc_attack [ i ] then
71377: LD_EXP 66
71381: PUSH
71382: LD_VAR 0 2
71386: ARRAY
71387: IFFALSE 71444
// begin tmp := mc_attack [ i ] [ 1 ] ;
71389: LD_ADDR_VAR 0 3
71393: PUSH
71394: LD_EXP 66
71398: PUSH
71399: LD_VAR 0 2
71403: ARRAY
71404: PUSH
71405: LD_INT 1
71407: ARRAY
71408: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
71409: LD_ADDR_EXP 66
71413: PUSH
71414: LD_EXP 66
71418: PPUSH
71419: LD_VAR 0 2
71423: PPUSH
71424: EMPTY
71425: PPUSH
71426: CALL_OW 1
71430: ST_TO_ADDR
// Attack ( tmp ) ;
71431: LD_VAR 0 3
71435: PPUSH
71436: CALL 100314 0 1
// exit ;
71440: POP
71441: POP
71442: GO 71448
// end ; end ;
71444: GO 71374
71446: POP
71447: POP
// end ;
71448: LD_VAR 0 1
71452: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
71453: LD_INT 0
71455: PPUSH
71456: PPUSH
71457: PPUSH
71458: PPUSH
71459: PPUSH
71460: PPUSH
71461: PPUSH
// if not mc_bases then
71462: LD_EXP 46
71466: NOT
71467: IFFALSE 71471
// exit ;
71469: GO 72053
// for i = 1 to mc_bases do
71471: LD_ADDR_VAR 0 2
71475: PUSH
71476: DOUBLE
71477: LD_INT 1
71479: DEC
71480: ST_TO_ADDR
71481: LD_EXP 46
71485: PUSH
71486: FOR_TO
71487: IFFALSE 72051
// begin if not mc_bases [ i ] then
71489: LD_EXP 46
71493: PUSH
71494: LD_VAR 0 2
71498: ARRAY
71499: NOT
71500: IFFALSE 71504
// continue ;
71502: GO 71486
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
71504: LD_ADDR_VAR 0 7
71508: PUSH
71509: LD_EXP 46
71513: PUSH
71514: LD_VAR 0 2
71518: ARRAY
71519: PUSH
71520: LD_INT 1
71522: ARRAY
71523: PPUSH
71524: CALL 21130 0 1
71528: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
71529: LD_ADDR_EXP 69
71533: PUSH
71534: LD_EXP 69
71538: PPUSH
71539: LD_VAR 0 2
71543: PPUSH
71544: LD_EXP 46
71548: PUSH
71549: LD_VAR 0 2
71553: ARRAY
71554: PUSH
71555: LD_INT 1
71557: ARRAY
71558: PPUSH
71559: CALL_OW 255
71563: PPUSH
71564: LD_EXP 71
71568: PUSH
71569: LD_VAR 0 2
71573: ARRAY
71574: PPUSH
71575: CALL 21095 0 2
71579: PPUSH
71580: CALL_OW 1
71584: ST_TO_ADDR
// if not mc_scan [ i ] then
71585: LD_EXP 69
71589: PUSH
71590: LD_VAR 0 2
71594: ARRAY
71595: NOT
71596: IFFALSE 71751
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
71598: LD_ADDR_VAR 0 4
71602: PUSH
71603: LD_EXP 46
71607: PUSH
71608: LD_VAR 0 2
71612: ARRAY
71613: PPUSH
71614: LD_INT 2
71616: PUSH
71617: LD_INT 25
71619: PUSH
71620: LD_INT 5
71622: PUSH
71623: EMPTY
71624: LIST
71625: LIST
71626: PUSH
71627: LD_INT 25
71629: PUSH
71630: LD_INT 8
71632: PUSH
71633: EMPTY
71634: LIST
71635: LIST
71636: PUSH
71637: LD_INT 25
71639: PUSH
71640: LD_INT 9
71642: PUSH
71643: EMPTY
71644: LIST
71645: LIST
71646: PUSH
71647: EMPTY
71648: LIST
71649: LIST
71650: LIST
71651: LIST
71652: PPUSH
71653: CALL_OW 72
71657: ST_TO_ADDR
// if not tmp then
71658: LD_VAR 0 4
71662: NOT
71663: IFFALSE 71667
// continue ;
71665: GO 71486
// for j in tmp do
71667: LD_ADDR_VAR 0 3
71671: PUSH
71672: LD_VAR 0 4
71676: PUSH
71677: FOR_IN
71678: IFFALSE 71749
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
71680: LD_VAR 0 3
71684: PPUSH
71685: CALL_OW 310
71689: PPUSH
71690: CALL_OW 266
71694: PUSH
71695: LD_INT 5
71697: EQUAL
71698: PUSH
71699: LD_VAR 0 3
71703: PPUSH
71704: CALL_OW 257
71708: PUSH
71709: LD_INT 1
71711: EQUAL
71712: AND
71713: PUSH
71714: LD_VAR 0 3
71718: PPUSH
71719: CALL_OW 459
71723: NOT
71724: AND
71725: PUSH
71726: LD_VAR 0 7
71730: AND
71731: IFFALSE 71747
// ComChangeProfession ( j , class ) ;
71733: LD_VAR 0 3
71737: PPUSH
71738: LD_VAR 0 7
71742: PPUSH
71743: CALL_OW 123
71747: GO 71677
71749: POP
71750: POP
// end ; if mc_scan [ i ] and not mc_defender [ i ] and not UnitFilter ( mc_bases [ i ] , [ f_btype , b_bunker ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) then
71751: LD_EXP 69
71755: PUSH
71756: LD_VAR 0 2
71760: ARRAY
71761: PUSH
71762: LD_EXP 68
71766: PUSH
71767: LD_VAR 0 2
71771: ARRAY
71772: NOT
71773: AND
71774: PUSH
71775: LD_EXP 46
71779: PUSH
71780: LD_VAR 0 2
71784: ARRAY
71785: PPUSH
71786: LD_INT 30
71788: PUSH
71789: LD_INT 32
71791: PUSH
71792: EMPTY
71793: LIST
71794: LIST
71795: PPUSH
71796: CALL_OW 72
71800: NOT
71801: AND
71802: PUSH
71803: LD_EXP 46
71807: PUSH
71808: LD_VAR 0 2
71812: ARRAY
71813: PPUSH
71814: LD_INT 2
71816: PUSH
71817: LD_INT 30
71819: PUSH
71820: LD_INT 4
71822: PUSH
71823: EMPTY
71824: LIST
71825: LIST
71826: PUSH
71827: LD_INT 30
71829: PUSH
71830: LD_INT 5
71832: PUSH
71833: EMPTY
71834: LIST
71835: LIST
71836: PUSH
71837: EMPTY
71838: LIST
71839: LIST
71840: LIST
71841: PPUSH
71842: CALL_OW 72
71846: NOT
71847: AND
71848: IFFALSE 71980
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
71850: LD_ADDR_VAR 0 4
71854: PUSH
71855: LD_EXP 46
71859: PUSH
71860: LD_VAR 0 2
71864: ARRAY
71865: PPUSH
71866: LD_INT 2
71868: PUSH
71869: LD_INT 25
71871: PUSH
71872: LD_INT 1
71874: PUSH
71875: EMPTY
71876: LIST
71877: LIST
71878: PUSH
71879: LD_INT 25
71881: PUSH
71882: LD_INT 5
71884: PUSH
71885: EMPTY
71886: LIST
71887: LIST
71888: PUSH
71889: LD_INT 25
71891: PUSH
71892: LD_INT 8
71894: PUSH
71895: EMPTY
71896: LIST
71897: LIST
71898: PUSH
71899: LD_INT 25
71901: PUSH
71902: LD_INT 9
71904: PUSH
71905: EMPTY
71906: LIST
71907: LIST
71908: PUSH
71909: EMPTY
71910: LIST
71911: LIST
71912: LIST
71913: LIST
71914: LIST
71915: PPUSH
71916: CALL_OW 72
71920: ST_TO_ADDR
// tmp := tmp diff FilterByTag ( tmp , 18 ) ;
71921: LD_ADDR_VAR 0 4
71925: PUSH
71926: LD_VAR 0 4
71930: PUSH
71931: LD_VAR 0 4
71935: PPUSH
71936: LD_INT 18
71938: PPUSH
71939: CALL 52855 0 2
71943: DIFF
71944: ST_TO_ADDR
// if tmp then
71945: LD_VAR 0 4
71949: IFFALSE 71980
// begin BasicDefend ( i , tmp , mc_scan_area [ i ] ) ;
71951: LD_VAR 0 2
71955: PPUSH
71956: LD_VAR 0 4
71960: PPUSH
71961: LD_EXP 71
71965: PUSH
71966: LD_VAR 0 2
71970: ARRAY
71971: PPUSH
71972: CALL 105023 0 3
// exit ;
71976: POP
71977: POP
71978: GO 72053
// end ; end ; if mc_scan [ i ] and mc_defender [ i ] then
71980: LD_EXP 69
71984: PUSH
71985: LD_VAR 0 2
71989: ARRAY
71990: PUSH
71991: LD_EXP 68
71995: PUSH
71996: LD_VAR 0 2
72000: ARRAY
72001: AND
72002: IFFALSE 72049
// begin tmp := mc_defender [ i ] ;
72004: LD_ADDR_VAR 0 4
72008: PUSH
72009: LD_EXP 68
72013: PUSH
72014: LD_VAR 0 2
72018: ARRAY
72019: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
72020: LD_VAR 0 2
72024: PPUSH
72025: LD_VAR 0 4
72029: PPUSH
72030: LD_EXP 69
72034: PUSH
72035: LD_VAR 0 2
72039: ARRAY
72040: PPUSH
72041: CALL 105584 0 3
// exit ;
72045: POP
72046: POP
72047: GO 72053
// end ; end ;
72049: GO 71486
72051: POP
72052: POP
// end ;
72053: LD_VAR 0 1
72057: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 , researching , idle_lab ; begin
72058: LD_INT 0
72060: PPUSH
72061: PPUSH
72062: PPUSH
72063: PPUSH
72064: PPUSH
72065: PPUSH
72066: PPUSH
72067: PPUSH
72068: PPUSH
72069: PPUSH
72070: PPUSH
// if not mc_bases then
72071: LD_EXP 46
72075: NOT
72076: IFFALSE 72080
// exit ;
72078: GO 73167
// for i = 1 to mc_bases do
72080: LD_ADDR_VAR 0 2
72084: PUSH
72085: DOUBLE
72086: LD_INT 1
72088: DEC
72089: ST_TO_ADDR
72090: LD_EXP 46
72094: PUSH
72095: FOR_TO
72096: IFFALSE 73165
// begin tmp := mc_lab [ i ] ;
72098: LD_ADDR_VAR 0 6
72102: PUSH
72103: LD_EXP 79
72107: PUSH
72108: LD_VAR 0 2
72112: ARRAY
72113: ST_TO_ADDR
// if not tmp then
72114: LD_VAR 0 6
72118: NOT
72119: IFFALSE 72123
// continue ;
72121: GO 72095
// idle_lab := 0 ;
72123: LD_ADDR_VAR 0 11
72127: PUSH
72128: LD_INT 0
72130: ST_TO_ADDR
// for j in tmp do
72131: LD_ADDR_VAR 0 3
72135: PUSH
72136: LD_VAR 0 6
72140: PUSH
72141: FOR_IN
72142: IFFALSE 73161
// begin researching := false ;
72144: LD_ADDR_VAR 0 10
72148: PUSH
72149: LD_INT 0
72151: ST_TO_ADDR
// side := GetSide ( j ) ;
72152: LD_ADDR_VAR 0 4
72156: PUSH
72157: LD_VAR 0 3
72161: PPUSH
72162: CALL_OW 255
72166: ST_TO_ADDR
// if not mc_tech [ side ] then
72167: LD_EXP 73
72171: PUSH
72172: LD_VAR 0 4
72176: ARRAY
72177: NOT
72178: IFFALSE 72182
// continue ;
72180: GO 72141
// if BuildingStatus ( j ) = bs_idle then
72182: LD_VAR 0 3
72186: PPUSH
72187: CALL_OW 461
72191: PUSH
72192: LD_INT 2
72194: EQUAL
72195: IFFALSE 72383
// begin if idle_lab and UnitsInside ( j ) < 6 then
72197: LD_VAR 0 11
72201: PUSH
72202: LD_VAR 0 3
72206: PPUSH
72207: CALL_OW 313
72211: PUSH
72212: LD_INT 6
72214: LESS
72215: AND
72216: IFFALSE 72287
// begin tmp2 := UnitsInside ( idle_lab ) ;
72218: LD_ADDR_VAR 0 9
72222: PUSH
72223: LD_VAR 0 11
72227: PPUSH
72228: CALL_OW 313
72232: ST_TO_ADDR
// if tmp2 then
72233: LD_VAR 0 9
72237: IFFALSE 72279
// for x in tmp2 do
72239: LD_ADDR_VAR 0 7
72243: PUSH
72244: LD_VAR 0 9
72248: PUSH
72249: FOR_IN
72250: IFFALSE 72277
// begin ComExitBuilding ( x ) ;
72252: LD_VAR 0 7
72256: PPUSH
72257: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
72261: LD_VAR 0 7
72265: PPUSH
72266: LD_VAR 0 3
72270: PPUSH
72271: CALL_OW 180
// end ;
72275: GO 72249
72277: POP
72278: POP
// idle_lab := 0 ;
72279: LD_ADDR_VAR 0 11
72283: PUSH
72284: LD_INT 0
72286: ST_TO_ADDR
// end ; for t in mc_tech [ side ] do
72287: LD_ADDR_VAR 0 5
72291: PUSH
72292: LD_EXP 73
72296: PUSH
72297: LD_VAR 0 4
72301: ARRAY
72302: PUSH
72303: FOR_IN
72304: IFFALSE 72364
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
72306: LD_VAR 0 3
72310: PPUSH
72311: LD_VAR 0 5
72315: PPUSH
72316: CALL_OW 430
72320: PUSH
72321: LD_VAR 0 4
72325: PPUSH
72326: LD_VAR 0 5
72330: PPUSH
72331: CALL 20200 0 2
72335: AND
72336: IFFALSE 72362
// begin researching := true ;
72338: LD_ADDR_VAR 0 10
72342: PUSH
72343: LD_INT 1
72345: ST_TO_ADDR
// ComResearch ( j , t ) ;
72346: LD_VAR 0 3
72350: PPUSH
72351: LD_VAR 0 5
72355: PPUSH
72356: CALL_OW 124
// break ;
72360: GO 72364
// end ;
72362: GO 72303
72364: POP
72365: POP
// if not researching then
72366: LD_VAR 0 10
72370: NOT
72371: IFFALSE 72383
// idle_lab := j ;
72373: LD_ADDR_VAR 0 11
72377: PUSH
72378: LD_VAR 0 3
72382: ST_TO_ADDR
// end ; if BuildingStatus ( j ) = bs_need_ape then
72383: LD_VAR 0 3
72387: PPUSH
72388: CALL_OW 461
72392: PUSH
72393: LD_INT 10
72395: EQUAL
72396: IFFALSE 72984
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
72398: LD_EXP 75
72402: PUSH
72403: LD_VAR 0 2
72407: ARRAY
72408: NOT
72409: PUSH
72410: LD_EXP 76
72414: PUSH
72415: LD_VAR 0 2
72419: ARRAY
72420: NOT
72421: AND
72422: PUSH
72423: LD_EXP 73
72427: PUSH
72428: LD_VAR 0 4
72432: ARRAY
72433: PUSH
72434: LD_INT 1
72436: GREATER
72437: AND
72438: IFFALSE 72569
// begin ComCancel ( j ) ;
72440: LD_VAR 0 3
72444: PPUSH
72445: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
72449: LD_ADDR_EXP 73
72453: PUSH
72454: LD_EXP 73
72458: PPUSH
72459: LD_VAR 0 4
72463: PPUSH
72464: LD_EXP 73
72468: PUSH
72469: LD_VAR 0 4
72473: ARRAY
72474: PPUSH
72475: LD_EXP 73
72479: PUSH
72480: LD_VAR 0 4
72484: ARRAY
72485: PUSH
72486: LD_INT 1
72488: MINUS
72489: PPUSH
72490: LD_EXP 73
72494: PUSH
72495: LD_VAR 0 4
72499: ARRAY
72500: PPUSH
72501: LD_INT 0
72503: PPUSH
72504: CALL 23712 0 4
72508: PPUSH
72509: CALL_OW 1
72513: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
72514: LD_ADDR_EXP 73
72518: PUSH
72519: LD_EXP 73
72523: PPUSH
72524: LD_VAR 0 4
72528: PPUSH
72529: LD_EXP 73
72533: PUSH
72534: LD_VAR 0 4
72538: ARRAY
72539: PPUSH
72540: LD_EXP 73
72544: PUSH
72545: LD_VAR 0 4
72549: ARRAY
72550: PPUSH
72551: LD_INT 1
72553: PPUSH
72554: LD_INT 0
72556: PPUSH
72557: CALL 23712 0 4
72561: PPUSH
72562: CALL_OW 1
72566: ST_TO_ADDR
// continue ;
72567: GO 72141
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
72569: LD_EXP 75
72573: PUSH
72574: LD_VAR 0 2
72578: ARRAY
72579: PUSH
72580: LD_EXP 76
72584: PUSH
72585: LD_VAR 0 2
72589: ARRAY
72590: NOT
72591: AND
72592: IFFALSE 72719
// begin mc_ape_in_lab := ReplaceIn ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
72594: LD_ADDR_EXP 76
72598: PUSH
72599: LD_EXP 76
72603: PPUSH
72604: LD_VAR 0 2
72608: PUSH
72609: LD_EXP 76
72613: PUSH
72614: LD_VAR 0 2
72618: ARRAY
72619: PUSH
72620: LD_INT 1
72622: PLUS
72623: PUSH
72624: EMPTY
72625: LIST
72626: LIST
72627: PPUSH
72628: LD_EXP 75
72632: PUSH
72633: LD_VAR 0 2
72637: ARRAY
72638: PUSH
72639: LD_INT 1
72641: ARRAY
72642: PPUSH
72643: CALL 24294 0 3
72647: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
72648: LD_EXP 75
72652: PUSH
72653: LD_VAR 0 2
72657: ARRAY
72658: PUSH
72659: LD_INT 1
72661: ARRAY
72662: PPUSH
72663: LD_INT 112
72665: PPUSH
72666: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
72670: LD_ADDR_VAR 0 9
72674: PUSH
72675: LD_EXP 75
72679: PUSH
72680: LD_VAR 0 2
72684: ARRAY
72685: PPUSH
72686: LD_INT 1
72688: PPUSH
72689: CALL_OW 3
72693: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
72694: LD_ADDR_EXP 75
72698: PUSH
72699: LD_EXP 75
72703: PPUSH
72704: LD_VAR 0 2
72708: PPUSH
72709: LD_VAR 0 9
72713: PPUSH
72714: CALL_OW 1
72718: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
72719: LD_EXP 75
72723: PUSH
72724: LD_VAR 0 2
72728: ARRAY
72729: PUSH
72730: LD_EXP 76
72734: PUSH
72735: LD_VAR 0 2
72739: ARRAY
72740: AND
72741: PUSH
72742: LD_EXP 76
72746: PUSH
72747: LD_VAR 0 2
72751: ARRAY
72752: PUSH
72753: LD_INT 1
72755: ARRAY
72756: PPUSH
72757: CALL_OW 310
72761: NOT
72762: AND
72763: PUSH
72764: LD_VAR 0 3
72768: PPUSH
72769: CALL_OW 313
72773: PUSH
72774: LD_INT 6
72776: EQUAL
72777: AND
72778: IFFALSE 72834
// begin tmp2 := UnitsInside ( j ) ;
72780: LD_ADDR_VAR 0 9
72784: PUSH
72785: LD_VAR 0 3
72789: PPUSH
72790: CALL_OW 313
72794: ST_TO_ADDR
// if tmp2 = 6 then
72795: LD_VAR 0 9
72799: PUSH
72800: LD_INT 6
72802: EQUAL
72803: IFFALSE 72834
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
72805: LD_VAR 0 9
72809: PUSH
72810: LD_INT 1
72812: ARRAY
72813: PPUSH
72814: LD_INT 112
72816: PPUSH
72817: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
72821: LD_VAR 0 9
72825: PUSH
72826: LD_INT 1
72828: ARRAY
72829: PPUSH
72830: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
72834: LD_EXP 76
72838: PUSH
72839: LD_VAR 0 2
72843: ARRAY
72844: PUSH
72845: LD_EXP 76
72849: PUSH
72850: LD_VAR 0 2
72854: ARRAY
72855: PUSH
72856: LD_INT 1
72858: ARRAY
72859: PPUSH
72860: CALL_OW 314
72864: NOT
72865: AND
72866: PUSH
72867: LD_EXP 76
72871: PUSH
72872: LD_VAR 0 2
72876: ARRAY
72877: PUSH
72878: LD_INT 1
72880: ARRAY
72881: PPUSH
72882: CALL_OW 310
72886: NOT
72887: AND
72888: IFFALSE 72914
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
72890: LD_EXP 76
72894: PUSH
72895: LD_VAR 0 2
72899: ARRAY
72900: PUSH
72901: LD_INT 1
72903: ARRAY
72904: PPUSH
72905: LD_VAR 0 3
72909: PPUSH
72910: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
72914: LD_EXP 76
72918: PUSH
72919: LD_VAR 0 2
72923: ARRAY
72924: PUSH
72925: LD_INT 1
72927: ARRAY
72928: PPUSH
72929: CALL_OW 310
72933: PUSH
72934: LD_EXP 76
72938: PUSH
72939: LD_VAR 0 2
72943: ARRAY
72944: PUSH
72945: LD_INT 1
72947: ARRAY
72948: PPUSH
72949: CALL_OW 310
72953: PPUSH
72954: CALL_OW 461
72958: PUSH
72959: LD_INT 3
72961: NONEQUAL
72962: AND
72963: IFFALSE 72984
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
72965: LD_EXP 76
72969: PUSH
72970: LD_VAR 0 2
72974: ARRAY
72975: PUSH
72976: LD_INT 1
72978: ARRAY
72979: PPUSH
72980: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
72984: LD_VAR 0 3
72988: PPUSH
72989: CALL_OW 461
72993: PUSH
72994: LD_INT 6
72996: EQUAL
72997: PUSH
72998: LD_VAR 0 6
73002: PUSH
73003: LD_INT 1
73005: GREATER
73006: AND
73007: IFFALSE 73159
// begin sci := [ ] ;
73009: LD_ADDR_VAR 0 8
73013: PUSH
73014: EMPTY
73015: ST_TO_ADDR
// for x in ( tmp diff j ) do
73016: LD_ADDR_VAR 0 7
73020: PUSH
73021: LD_VAR 0 6
73025: PUSH
73026: LD_VAR 0 3
73030: DIFF
73031: PUSH
73032: FOR_IN
73033: IFFALSE 73085
// begin if sci = 6 then
73035: LD_VAR 0 8
73039: PUSH
73040: LD_INT 6
73042: EQUAL
73043: IFFALSE 73047
// break ;
73045: GO 73085
// if BuildingStatus ( x ) = bs_idle then
73047: LD_VAR 0 7
73051: PPUSH
73052: CALL_OW 461
73056: PUSH
73057: LD_INT 2
73059: EQUAL
73060: IFFALSE 73083
// sci := sci ^ UnitsInside ( x ) ;
73062: LD_ADDR_VAR 0 8
73066: PUSH
73067: LD_VAR 0 8
73071: PUSH
73072: LD_VAR 0 7
73076: PPUSH
73077: CALL_OW 313
73081: ADD
73082: ST_TO_ADDR
// end ;
73083: GO 73032
73085: POP
73086: POP
// if not sci then
73087: LD_VAR 0 8
73091: NOT
73092: IFFALSE 73096
// continue ;
73094: GO 72141
// for x in sci do
73096: LD_ADDR_VAR 0 7
73100: PUSH
73101: LD_VAR 0 8
73105: PUSH
73106: FOR_IN
73107: IFFALSE 73157
// if IsInUnit ( x ) and not HasTask ( x ) then
73109: LD_VAR 0 7
73113: PPUSH
73114: CALL_OW 310
73118: PUSH
73119: LD_VAR 0 7
73123: PPUSH
73124: CALL_OW 314
73128: NOT
73129: AND
73130: IFFALSE 73155
// begin ComExitBuilding ( x ) ;
73132: LD_VAR 0 7
73136: PPUSH
73137: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
73141: LD_VAR 0 7
73145: PPUSH
73146: LD_VAR 0 3
73150: PPUSH
73151: CALL_OW 180
// end ;
73155: GO 73106
73157: POP
73158: POP
// end ; end ;
73159: GO 72141
73161: POP
73162: POP
// end ;
73163: GO 72095
73165: POP
73166: POP
// end ;
73167: LD_VAR 0 1
73171: RET
// export function MC_MinesTrigger ( ) ; var i ; begin
73172: LD_INT 0
73174: PPUSH
73175: PPUSH
// if not mc_bases then
73176: LD_EXP 46
73180: NOT
73181: IFFALSE 73185
// exit ;
73183: GO 73266
// for i = 1 to mc_bases do
73185: LD_ADDR_VAR 0 2
73189: PUSH
73190: DOUBLE
73191: LD_INT 1
73193: DEC
73194: ST_TO_ADDR
73195: LD_EXP 46
73199: PUSH
73200: FOR_TO
73201: IFFALSE 73264
// if mc_mines [ i ] and mc_miners [ i ] then
73203: LD_EXP 59
73207: PUSH
73208: LD_VAR 0 2
73212: ARRAY
73213: PUSH
73214: LD_EXP 60
73218: PUSH
73219: LD_VAR 0 2
73223: ARRAY
73224: AND
73225: IFFALSE 73262
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
73227: LD_EXP 60
73231: PUSH
73232: LD_VAR 0 2
73236: ARRAY
73237: PUSH
73238: LD_INT 1
73240: ARRAY
73241: PPUSH
73242: CALL_OW 255
73246: PPUSH
73247: LD_EXP 59
73251: PUSH
73252: LD_VAR 0 2
73256: ARRAY
73257: PPUSH
73258: CALL 21283 0 2
73262: GO 73200
73264: POP
73265: POP
// end ;
73266: LD_VAR 0 1
73270: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
73271: LD_INT 0
73273: PPUSH
73274: PPUSH
73275: PPUSH
73276: PPUSH
73277: PPUSH
73278: PPUSH
73279: PPUSH
73280: PPUSH
// if not mc_bases or not mc_parking then
73281: LD_EXP 46
73285: NOT
73286: PUSH
73287: LD_EXP 70
73291: NOT
73292: OR
73293: IFFALSE 73297
// exit ;
73295: GO 73996
// for i = 1 to mc_bases do
73297: LD_ADDR_VAR 0 2
73301: PUSH
73302: DOUBLE
73303: LD_INT 1
73305: DEC
73306: ST_TO_ADDR
73307: LD_EXP 46
73311: PUSH
73312: FOR_TO
73313: IFFALSE 73994
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
73315: LD_EXP 46
73319: PUSH
73320: LD_VAR 0 2
73324: ARRAY
73325: NOT
73326: PUSH
73327: LD_EXP 70
73331: PUSH
73332: LD_VAR 0 2
73336: ARRAY
73337: NOT
73338: OR
73339: IFFALSE 73343
// continue ;
73341: GO 73312
// side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
73343: LD_ADDR_VAR 0 5
73347: PUSH
73348: LD_EXP 46
73352: PUSH
73353: LD_VAR 0 2
73357: ARRAY
73358: PUSH
73359: LD_INT 1
73361: ARRAY
73362: PPUSH
73363: CALL_OW 255
73367: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
73368: LD_ADDR_VAR 0 6
73372: PUSH
73373: LD_EXP 46
73377: PUSH
73378: LD_VAR 0 2
73382: ARRAY
73383: PPUSH
73384: LD_INT 30
73386: PUSH
73387: LD_INT 3
73389: PUSH
73390: EMPTY
73391: LIST
73392: LIST
73393: PPUSH
73394: CALL_OW 72
73398: ST_TO_ADDR
// if not fac then
73399: LD_VAR 0 6
73403: NOT
73404: IFFALSE 73455
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
73406: LD_ADDR_VAR 0 6
73410: PUSH
73411: LD_EXP 46
73415: PUSH
73416: LD_VAR 0 2
73420: ARRAY
73421: PPUSH
73422: LD_INT 2
73424: PUSH
73425: LD_INT 30
73427: PUSH
73428: LD_INT 0
73430: PUSH
73431: EMPTY
73432: LIST
73433: LIST
73434: PUSH
73435: LD_INT 30
73437: PUSH
73438: LD_INT 1
73440: PUSH
73441: EMPTY
73442: LIST
73443: LIST
73444: PUSH
73445: EMPTY
73446: LIST
73447: LIST
73448: LIST
73449: PPUSH
73450: CALL_OW 72
73454: ST_TO_ADDR
// if not fac then
73455: LD_VAR 0 6
73459: NOT
73460: IFFALSE 73464
// continue ;
73462: GO 73312
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
73464: LD_ADDR_VAR 0 7
73468: PUSH
73469: LD_EXP 70
73473: PUSH
73474: LD_VAR 0 2
73478: ARRAY
73479: PPUSH
73480: LD_INT 22
73482: PUSH
73483: LD_VAR 0 5
73487: PUSH
73488: EMPTY
73489: LIST
73490: LIST
73491: PUSH
73492: LD_INT 21
73494: PUSH
73495: LD_INT 2
73497: PUSH
73498: EMPTY
73499: LIST
73500: LIST
73501: PUSH
73502: LD_INT 3
73504: PUSH
73505: LD_INT 24
73507: PUSH
73508: LD_INT 1000
73510: PUSH
73511: EMPTY
73512: LIST
73513: LIST
73514: PUSH
73515: EMPTY
73516: LIST
73517: LIST
73518: PUSH
73519: EMPTY
73520: LIST
73521: LIST
73522: LIST
73523: PPUSH
73524: CALL_OW 70
73528: ST_TO_ADDR
// for j in fac do
73529: LD_ADDR_VAR 0 3
73533: PUSH
73534: LD_VAR 0 6
73538: PUSH
73539: FOR_IN
73540: IFFALSE 73621
// vehs := vehs union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , j , 15 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
73542: LD_ADDR_VAR 0 7
73546: PUSH
73547: LD_VAR 0 7
73551: PUSH
73552: LD_INT 22
73554: PUSH
73555: LD_VAR 0 5
73559: PUSH
73560: EMPTY
73561: LIST
73562: LIST
73563: PUSH
73564: LD_INT 91
73566: PUSH
73567: LD_VAR 0 3
73571: PUSH
73572: LD_INT 15
73574: PUSH
73575: EMPTY
73576: LIST
73577: LIST
73578: LIST
73579: PUSH
73580: LD_INT 21
73582: PUSH
73583: LD_INT 2
73585: PUSH
73586: EMPTY
73587: LIST
73588: LIST
73589: PUSH
73590: LD_INT 3
73592: PUSH
73593: LD_INT 24
73595: PUSH
73596: LD_INT 1000
73598: PUSH
73599: EMPTY
73600: LIST
73601: LIST
73602: PUSH
73603: EMPTY
73604: LIST
73605: LIST
73606: PUSH
73607: EMPTY
73608: LIST
73609: LIST
73610: LIST
73611: LIST
73612: PPUSH
73613: CALL_OW 69
73617: UNION
73618: ST_TO_ADDR
73619: GO 73539
73621: POP
73622: POP
// if not vehs then
73623: LD_VAR 0 7
73627: NOT
73628: IFFALSE 73654
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
73630: LD_ADDR_EXP 58
73634: PUSH
73635: LD_EXP 58
73639: PPUSH
73640: LD_VAR 0 2
73644: PPUSH
73645: EMPTY
73646: PPUSH
73647: CALL_OW 1
73651: ST_TO_ADDR
// continue ;
73652: GO 73312
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
73654: LD_ADDR_VAR 0 8
73658: PUSH
73659: LD_EXP 46
73663: PUSH
73664: LD_VAR 0 2
73668: ARRAY
73669: PPUSH
73670: LD_INT 30
73672: PUSH
73673: LD_INT 3
73675: PUSH
73676: EMPTY
73677: LIST
73678: LIST
73679: PPUSH
73680: CALL_OW 72
73684: ST_TO_ADDR
// if tmp then
73685: LD_VAR 0 8
73689: IFFALSE 73792
// begin for j in tmp do
73691: LD_ADDR_VAR 0 3
73695: PUSH
73696: LD_VAR 0 8
73700: PUSH
73701: FOR_IN
73702: IFFALSE 73790
// for k in UnitsInside ( j ) do
73704: LD_ADDR_VAR 0 4
73708: PUSH
73709: LD_VAR 0 3
73713: PPUSH
73714: CALL_OW 313
73718: PUSH
73719: FOR_IN
73720: IFFALSE 73786
// if k then
73722: LD_VAR 0 4
73726: IFFALSE 73784
// if not k in mc_repair_vehicle [ i ] then
73728: LD_VAR 0 4
73732: PUSH
73733: LD_EXP 58
73737: PUSH
73738: LD_VAR 0 2
73742: ARRAY
73743: IN
73744: NOT
73745: IFFALSE 73784
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
73747: LD_ADDR_EXP 58
73751: PUSH
73752: LD_EXP 58
73756: PPUSH
73757: LD_VAR 0 2
73761: PPUSH
73762: LD_EXP 58
73766: PUSH
73767: LD_VAR 0 2
73771: ARRAY
73772: PUSH
73773: LD_VAR 0 4
73777: UNION
73778: PPUSH
73779: CALL_OW 1
73783: ST_TO_ADDR
73784: GO 73719
73786: POP
73787: POP
73788: GO 73701
73790: POP
73791: POP
// end ; if not mc_repair_vehicle [ i ] then
73792: LD_EXP 58
73796: PUSH
73797: LD_VAR 0 2
73801: ARRAY
73802: NOT
73803: IFFALSE 73807
// continue ;
73805: GO 73312
// for j in mc_repair_vehicle [ i ] do
73807: LD_ADDR_VAR 0 3
73811: PUSH
73812: LD_EXP 58
73816: PUSH
73817: LD_VAR 0 2
73821: ARRAY
73822: PUSH
73823: FOR_IN
73824: IFFALSE 73990
// begin if GetClass ( j ) <> 3 then
73826: LD_VAR 0 3
73830: PPUSH
73831: CALL_OW 257
73835: PUSH
73836: LD_INT 3
73838: NONEQUAL
73839: IFFALSE 73880
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] diff j ) ;
73841: LD_ADDR_EXP 58
73845: PUSH
73846: LD_EXP 58
73850: PPUSH
73851: LD_VAR 0 2
73855: PPUSH
73856: LD_EXP 58
73860: PUSH
73861: LD_VAR 0 2
73865: ARRAY
73866: PUSH
73867: LD_VAR 0 3
73871: DIFF
73872: PPUSH
73873: CALL_OW 1
73877: ST_TO_ADDR
// continue ;
73878: GO 73823
// end ; if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
73880: LD_VAR 0 3
73884: PPUSH
73885: CALL_OW 311
73889: NOT
73890: PUSH
73891: LD_VAR 0 3
73895: PUSH
73896: LD_EXP 49
73900: PUSH
73901: LD_VAR 0 2
73905: ARRAY
73906: PUSH
73907: LD_INT 1
73909: ARRAY
73910: IN
73911: NOT
73912: AND
73913: PUSH
73914: LD_VAR 0 3
73918: PUSH
73919: LD_EXP 49
73923: PUSH
73924: LD_VAR 0 2
73928: ARRAY
73929: PUSH
73930: LD_INT 2
73932: ARRAY
73933: IN
73934: NOT
73935: AND
73936: IFFALSE 73988
// begin if IsInUnit ( j ) then
73938: LD_VAR 0 3
73942: PPUSH
73943: CALL_OW 310
73947: IFFALSE 73958
// ComExitBuilding ( j ) ;
73949: LD_VAR 0 3
73953: PPUSH
73954: CALL_OW 122
// if not HasTask ( j ) then
73958: LD_VAR 0 3
73962: PPUSH
73963: CALL_OW 314
73967: NOT
73968: IFFALSE 73988
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
73970: LD_VAR 0 3
73974: PPUSH
73975: LD_VAR 0 7
73979: PUSH
73980: LD_INT 1
73982: ARRAY
73983: PPUSH
73984: CALL_OW 189
// end ; end ;
73988: GO 73823
73990: POP
73991: POP
// end ;
73992: GO 73312
73994: POP
73995: POP
// end ;
73996: LD_VAR 0 1
74000: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
74001: LD_INT 0
74003: PPUSH
74004: PPUSH
74005: PPUSH
74006: PPUSH
74007: PPUSH
74008: PPUSH
74009: PPUSH
74010: PPUSH
74011: PPUSH
74012: PPUSH
74013: PPUSH
// if not mc_bases then
74014: LD_EXP 46
74018: NOT
74019: IFFALSE 74023
// exit ;
74021: GO 74825
// for i = 1 to mc_bases do
74023: LD_ADDR_VAR 0 2
74027: PUSH
74028: DOUBLE
74029: LD_INT 1
74031: DEC
74032: ST_TO_ADDR
74033: LD_EXP 46
74037: PUSH
74038: FOR_TO
74039: IFFALSE 74823
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
74041: LD_EXP 74
74045: PUSH
74046: LD_VAR 0 2
74050: ARRAY
74051: NOT
74052: PUSH
74053: LD_EXP 49
74057: PUSH
74058: LD_VAR 0 2
74062: ARRAY
74063: PUSH
74064: LD_INT 1
74066: ARRAY
74067: OR
74068: PUSH
74069: LD_EXP 49
74073: PUSH
74074: LD_VAR 0 2
74078: ARRAY
74079: PUSH
74080: LD_INT 2
74082: ARRAY
74083: OR
74084: PUSH
74085: LD_EXP 72
74089: PUSH
74090: LD_VAR 0 2
74094: ARRAY
74095: PPUSH
74096: LD_INT 1
74098: PPUSH
74099: CALL_OW 325
74103: NOT
74104: OR
74105: PUSH
74106: LD_EXP 69
74110: PUSH
74111: LD_VAR 0 2
74115: ARRAY
74116: OR
74117: IFFALSE 74121
// continue ;
74119: GO 74038
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
74121: LD_ADDR_VAR 0 8
74125: PUSH
74126: LD_EXP 46
74130: PUSH
74131: LD_VAR 0 2
74135: ARRAY
74136: PPUSH
74137: LD_INT 25
74139: PUSH
74140: LD_INT 4
74142: PUSH
74143: EMPTY
74144: LIST
74145: LIST
74146: PUSH
74147: LD_INT 50
74149: PUSH
74150: EMPTY
74151: LIST
74152: PUSH
74153: LD_INT 3
74155: PUSH
74156: LD_INT 60
74158: PUSH
74159: EMPTY
74160: LIST
74161: PUSH
74162: EMPTY
74163: LIST
74164: LIST
74165: PUSH
74166: EMPTY
74167: LIST
74168: LIST
74169: LIST
74170: PPUSH
74171: CALL_OW 72
74175: PUSH
74176: LD_EXP 50
74180: PUSH
74181: LD_VAR 0 2
74185: ARRAY
74186: DIFF
74187: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
74188: LD_ADDR_VAR 0 9
74192: PUSH
74193: LD_EXP 46
74197: PUSH
74198: LD_VAR 0 2
74202: ARRAY
74203: PPUSH
74204: LD_INT 2
74206: PUSH
74207: LD_INT 30
74209: PUSH
74210: LD_INT 0
74212: PUSH
74213: EMPTY
74214: LIST
74215: LIST
74216: PUSH
74217: LD_INT 30
74219: PUSH
74220: LD_INT 1
74222: PUSH
74223: EMPTY
74224: LIST
74225: LIST
74226: PUSH
74227: EMPTY
74228: LIST
74229: LIST
74230: LIST
74231: PPUSH
74232: CALL_OW 72
74236: ST_TO_ADDR
// if not tmp or not dep then
74237: LD_VAR 0 8
74241: NOT
74242: PUSH
74243: LD_VAR 0 9
74247: NOT
74248: OR
74249: IFFALSE 74253
// continue ;
74251: GO 74038
// side := GetSide ( tmp [ 1 ] ) ;
74253: LD_ADDR_VAR 0 11
74257: PUSH
74258: LD_VAR 0 8
74262: PUSH
74263: LD_INT 1
74265: ARRAY
74266: PPUSH
74267: CALL_OW 255
74271: ST_TO_ADDR
// dep := dep [ 1 ] ;
74272: LD_ADDR_VAR 0 9
74276: PUSH
74277: LD_VAR 0 9
74281: PUSH
74282: LD_INT 1
74284: ARRAY
74285: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
74286: LD_ADDR_VAR 0 7
74290: PUSH
74291: LD_EXP 74
74295: PUSH
74296: LD_VAR 0 2
74300: ARRAY
74301: PPUSH
74302: LD_INT 22
74304: PUSH
74305: LD_INT 0
74307: PUSH
74308: EMPTY
74309: LIST
74310: LIST
74311: PUSH
74312: LD_INT 25
74314: PUSH
74315: LD_INT 12
74317: PUSH
74318: EMPTY
74319: LIST
74320: LIST
74321: PUSH
74322: EMPTY
74323: LIST
74324: LIST
74325: PPUSH
74326: CALL_OW 70
74330: PUSH
74331: LD_INT 22
74333: PUSH
74334: LD_INT 0
74336: PUSH
74337: EMPTY
74338: LIST
74339: LIST
74340: PUSH
74341: LD_INT 25
74343: PUSH
74344: LD_INT 12
74346: PUSH
74347: EMPTY
74348: LIST
74349: LIST
74350: PUSH
74351: LD_INT 91
74353: PUSH
74354: LD_VAR 0 9
74358: PUSH
74359: LD_INT 20
74361: PUSH
74362: EMPTY
74363: LIST
74364: LIST
74365: LIST
74366: PUSH
74367: EMPTY
74368: LIST
74369: LIST
74370: LIST
74371: PPUSH
74372: CALL_OW 69
74376: UNION
74377: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
74378: LD_ADDR_VAR 0 10
74382: PUSH
74383: LD_EXP 74
74387: PUSH
74388: LD_VAR 0 2
74392: ARRAY
74393: PPUSH
74394: LD_INT 81
74396: PUSH
74397: LD_VAR 0 11
74401: PUSH
74402: EMPTY
74403: LIST
74404: LIST
74405: PPUSH
74406: CALL_OW 70
74410: ST_TO_ADDR
// if not apes or danger_at_area then
74411: LD_VAR 0 7
74415: NOT
74416: PUSH
74417: LD_VAR 0 10
74421: OR
74422: IFFALSE 74472
// begin if mc_taming [ i ] then
74424: LD_EXP 77
74428: PUSH
74429: LD_VAR 0 2
74433: ARRAY
74434: IFFALSE 74470
// begin MC_Reset ( i , 121 ) ;
74436: LD_VAR 0 2
74440: PPUSH
74441: LD_INT 121
74443: PPUSH
74444: CALL 59923 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
74448: LD_ADDR_EXP 77
74452: PUSH
74453: LD_EXP 77
74457: PPUSH
74458: LD_VAR 0 2
74462: PPUSH
74463: EMPTY
74464: PPUSH
74465: CALL_OW 1
74469: ST_TO_ADDR
// end ; continue ;
74470: GO 74038
// end ; for j in tmp do
74472: LD_ADDR_VAR 0 3
74476: PUSH
74477: LD_VAR 0 8
74481: PUSH
74482: FOR_IN
74483: IFFALSE 74819
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
74485: LD_VAR 0 3
74489: PUSH
74490: LD_EXP 77
74494: PUSH
74495: LD_VAR 0 2
74499: ARRAY
74500: IN
74501: NOT
74502: PUSH
74503: LD_EXP 77
74507: PUSH
74508: LD_VAR 0 2
74512: ARRAY
74513: PUSH
74514: LD_INT 3
74516: LESS
74517: AND
74518: IFFALSE 74576
// begin SetTag ( j , 121 ) ;
74520: LD_VAR 0 3
74524: PPUSH
74525: LD_INT 121
74527: PPUSH
74528: CALL_OW 109
// mc_taming := ReplaceIn ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
74532: LD_ADDR_EXP 77
74536: PUSH
74537: LD_EXP 77
74541: PPUSH
74542: LD_VAR 0 2
74546: PUSH
74547: LD_EXP 77
74551: PUSH
74552: LD_VAR 0 2
74556: ARRAY
74557: PUSH
74558: LD_INT 1
74560: PLUS
74561: PUSH
74562: EMPTY
74563: LIST
74564: LIST
74565: PPUSH
74566: LD_VAR 0 3
74570: PPUSH
74571: CALL 24294 0 3
74575: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
74576: LD_VAR 0 3
74580: PUSH
74581: LD_EXP 77
74585: PUSH
74586: LD_VAR 0 2
74590: ARRAY
74591: IN
74592: IFFALSE 74817
// begin if GetClass ( j ) <> 4 then
74594: LD_VAR 0 3
74598: PPUSH
74599: CALL_OW 257
74603: PUSH
74604: LD_INT 4
74606: NONEQUAL
74607: IFFALSE 74660
// begin mc_taming := Replace ( mc_taming , i , mc_taming [ i ] diff j ) ;
74609: LD_ADDR_EXP 77
74613: PUSH
74614: LD_EXP 77
74618: PPUSH
74619: LD_VAR 0 2
74623: PPUSH
74624: LD_EXP 77
74628: PUSH
74629: LD_VAR 0 2
74633: ARRAY
74634: PUSH
74635: LD_VAR 0 3
74639: DIFF
74640: PPUSH
74641: CALL_OW 1
74645: ST_TO_ADDR
// SetTag ( j , 0 ) ;
74646: LD_VAR 0 3
74650: PPUSH
74651: LD_INT 0
74653: PPUSH
74654: CALL_OW 109
// continue ;
74658: GO 74482
// end ; if IsInUnit ( j ) then
74660: LD_VAR 0 3
74664: PPUSH
74665: CALL_OW 310
74669: IFFALSE 74680
// ComExitBuilding ( j ) ;
74671: LD_VAR 0 3
74675: PPUSH
74676: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
74680: LD_ADDR_VAR 0 6
74684: PUSH
74685: LD_VAR 0 7
74689: PPUSH
74690: LD_VAR 0 3
74694: PPUSH
74695: CALL_OW 74
74699: ST_TO_ADDR
// if not ape then
74700: LD_VAR 0 6
74704: NOT
74705: IFFALSE 74709
// break ;
74707: GO 74819
// x := GetX ( ape ) ;
74709: LD_ADDR_VAR 0 4
74713: PUSH
74714: LD_VAR 0 6
74718: PPUSH
74719: CALL_OW 250
74723: ST_TO_ADDR
// y := GetY ( ape ) ;
74724: LD_ADDR_VAR 0 5
74728: PUSH
74729: LD_VAR 0 6
74733: PPUSH
74734: CALL_OW 251
74738: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
74739: LD_VAR 0 4
74743: PPUSH
74744: LD_VAR 0 5
74748: PPUSH
74749: CALL_OW 488
74753: NOT
74754: PUSH
74755: LD_VAR 0 11
74759: PPUSH
74760: LD_VAR 0 4
74764: PPUSH
74765: LD_VAR 0 5
74769: PPUSH
74770: LD_INT 20
74772: PPUSH
74773: CALL 25190 0 4
74777: PUSH
74778: LD_INT 4
74780: ARRAY
74781: OR
74782: IFFALSE 74786
// break ;
74784: GO 74819
// if not HasTask ( j ) then
74786: LD_VAR 0 3
74790: PPUSH
74791: CALL_OW 314
74795: NOT
74796: IFFALSE 74817
// ComTameXY ( j , x , y ) ;
74798: LD_VAR 0 3
74802: PPUSH
74803: LD_VAR 0 4
74807: PPUSH
74808: LD_VAR 0 5
74812: PPUSH
74813: CALL_OW 131
// end ; end ;
74817: GO 74482
74819: POP
74820: POP
// end ;
74821: GO 74038
74823: POP
74824: POP
// end ;
74825: LD_VAR 0 1
74829: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
74830: LD_INT 0
74832: PPUSH
74833: PPUSH
74834: PPUSH
74835: PPUSH
74836: PPUSH
74837: PPUSH
74838: PPUSH
74839: PPUSH
// if not mc_bases then
74840: LD_EXP 46
74844: NOT
74845: IFFALSE 74849
// exit ;
74847: GO 75475
// for i = 1 to mc_bases do
74849: LD_ADDR_VAR 0 2
74853: PUSH
74854: DOUBLE
74855: LD_INT 1
74857: DEC
74858: ST_TO_ADDR
74859: LD_EXP 46
74863: PUSH
74864: FOR_TO
74865: IFFALSE 75473
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
74867: LD_EXP 75
74871: PUSH
74872: LD_VAR 0 2
74876: ARRAY
74877: NOT
74878: PUSH
74879: LD_EXP 75
74883: PUSH
74884: LD_VAR 0 2
74888: ARRAY
74889: PPUSH
74890: LD_INT 25
74892: PUSH
74893: LD_INT 12
74895: PUSH
74896: EMPTY
74897: LIST
74898: LIST
74899: PPUSH
74900: CALL_OW 72
74904: NOT
74905: OR
74906: IFFALSE 74910
// continue ;
74908: GO 74864
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
74910: LD_ADDR_VAR 0 5
74914: PUSH
74915: LD_EXP 75
74919: PUSH
74920: LD_VAR 0 2
74924: ARRAY
74925: PUSH
74926: LD_INT 1
74928: ARRAY
74929: PPUSH
74930: CALL_OW 255
74934: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
74935: LD_VAR 0 5
74939: PPUSH
74940: LD_INT 2
74942: PPUSH
74943: CALL_OW 325
74947: IFFALSE 75200
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
74949: LD_ADDR_VAR 0 4
74953: PUSH
74954: LD_EXP 75
74958: PUSH
74959: LD_VAR 0 2
74963: ARRAY
74964: PPUSH
74965: LD_INT 25
74967: PUSH
74968: LD_INT 16
74970: PUSH
74971: EMPTY
74972: LIST
74973: LIST
74974: PPUSH
74975: CALL_OW 72
74979: ST_TO_ADDR
// if tmp < 6 then
74980: LD_VAR 0 4
74984: PUSH
74985: LD_INT 6
74987: LESS
74988: IFFALSE 75200
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
74990: LD_ADDR_VAR 0 6
74994: PUSH
74995: LD_EXP 46
74999: PUSH
75000: LD_VAR 0 2
75004: ARRAY
75005: PPUSH
75006: LD_INT 2
75008: PUSH
75009: LD_INT 30
75011: PUSH
75012: LD_INT 0
75014: PUSH
75015: EMPTY
75016: LIST
75017: LIST
75018: PUSH
75019: LD_INT 30
75021: PUSH
75022: LD_INT 1
75024: PUSH
75025: EMPTY
75026: LIST
75027: LIST
75028: PUSH
75029: EMPTY
75030: LIST
75031: LIST
75032: LIST
75033: PPUSH
75034: CALL_OW 72
75038: ST_TO_ADDR
// if depot then
75039: LD_VAR 0 6
75043: IFFALSE 75200
// begin selected := 0 ;
75045: LD_ADDR_VAR 0 7
75049: PUSH
75050: LD_INT 0
75052: ST_TO_ADDR
// for j in depot do
75053: LD_ADDR_VAR 0 3
75057: PUSH
75058: LD_VAR 0 6
75062: PUSH
75063: FOR_IN
75064: IFFALSE 75095
// begin if UnitsInside ( j ) < 6 then
75066: LD_VAR 0 3
75070: PPUSH
75071: CALL_OW 313
75075: PUSH
75076: LD_INT 6
75078: LESS
75079: IFFALSE 75093
// begin selected := j ;
75081: LD_ADDR_VAR 0 7
75085: PUSH
75086: LD_VAR 0 3
75090: ST_TO_ADDR
// break ;
75091: GO 75095
// end ; end ;
75093: GO 75063
75095: POP
75096: POP
// if selected then
75097: LD_VAR 0 7
75101: IFFALSE 75200
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
75103: LD_ADDR_VAR 0 3
75107: PUSH
75108: LD_EXP 75
75112: PUSH
75113: LD_VAR 0 2
75117: ARRAY
75118: PPUSH
75119: LD_INT 25
75121: PUSH
75122: LD_INT 12
75124: PUSH
75125: EMPTY
75126: LIST
75127: LIST
75128: PPUSH
75129: CALL_OW 72
75133: PUSH
75134: FOR_IN
75135: IFFALSE 75198
// if not HasTask ( j ) then
75137: LD_VAR 0 3
75141: PPUSH
75142: CALL_OW 314
75146: NOT
75147: IFFALSE 75196
// begin if not IsInUnit ( j ) then
75149: LD_VAR 0 3
75153: PPUSH
75154: CALL_OW 310
75158: NOT
75159: IFFALSE 75175
// ComEnterUnit ( j , selected ) ;
75161: LD_VAR 0 3
75165: PPUSH
75166: LD_VAR 0 7
75170: PPUSH
75171: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
75175: LD_VAR 0 3
75179: PPUSH
75180: LD_INT 16
75182: PPUSH
75183: CALL_OW 183
// AddComExitBuilding ( j ) ;
75187: LD_VAR 0 3
75191: PPUSH
75192: CALL_OW 182
// end ;
75196: GO 75134
75198: POP
75199: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
75200: LD_VAR 0 5
75204: PPUSH
75205: LD_INT 11
75207: PPUSH
75208: CALL_OW 325
75212: IFFALSE 75471
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
75214: LD_ADDR_VAR 0 4
75218: PUSH
75219: LD_EXP 75
75223: PUSH
75224: LD_VAR 0 2
75228: ARRAY
75229: PPUSH
75230: LD_INT 25
75232: PUSH
75233: LD_INT 16
75235: PUSH
75236: EMPTY
75237: LIST
75238: LIST
75239: PPUSH
75240: CALL_OW 72
75244: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
75245: LD_VAR 0 4
75249: PUSH
75250: LD_INT 6
75252: GREATEREQUAL
75253: PUSH
75254: LD_VAR 0 5
75258: PPUSH
75259: LD_INT 2
75261: PPUSH
75262: CALL_OW 325
75266: NOT
75267: OR
75268: IFFALSE 75471
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
75270: LD_ADDR_VAR 0 8
75274: PUSH
75275: LD_EXP 46
75279: PUSH
75280: LD_VAR 0 2
75284: ARRAY
75285: PPUSH
75286: LD_INT 2
75288: PUSH
75289: LD_INT 30
75291: PUSH
75292: LD_INT 4
75294: PUSH
75295: EMPTY
75296: LIST
75297: LIST
75298: PUSH
75299: LD_INT 30
75301: PUSH
75302: LD_INT 5
75304: PUSH
75305: EMPTY
75306: LIST
75307: LIST
75308: PUSH
75309: EMPTY
75310: LIST
75311: LIST
75312: LIST
75313: PPUSH
75314: CALL_OW 72
75318: ST_TO_ADDR
// if barracks then
75319: LD_VAR 0 8
75323: IFFALSE 75471
// begin selected := 0 ;
75325: LD_ADDR_VAR 0 7
75329: PUSH
75330: LD_INT 0
75332: ST_TO_ADDR
// for j in barracks do
75333: LD_ADDR_VAR 0 3
75337: PUSH
75338: LD_VAR 0 8
75342: PUSH
75343: FOR_IN
75344: IFFALSE 75375
// begin if UnitsInside ( j ) < 6 then
75346: LD_VAR 0 3
75350: PPUSH
75351: CALL_OW 313
75355: PUSH
75356: LD_INT 6
75358: LESS
75359: IFFALSE 75373
// begin selected := j ;
75361: LD_ADDR_VAR 0 7
75365: PUSH
75366: LD_VAR 0 3
75370: ST_TO_ADDR
// break ;
75371: GO 75375
// end ; end ;
75373: GO 75343
75375: POP
75376: POP
// if selected then
75377: LD_VAR 0 7
75381: IFFALSE 75471
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
75383: LD_ADDR_VAR 0 3
75387: PUSH
75388: LD_EXP 75
75392: PUSH
75393: LD_VAR 0 2
75397: ARRAY
75398: PPUSH
75399: LD_INT 25
75401: PUSH
75402: LD_INT 12
75404: PUSH
75405: EMPTY
75406: LIST
75407: LIST
75408: PPUSH
75409: CALL_OW 72
75413: PUSH
75414: FOR_IN
75415: IFFALSE 75469
// if not IsInUnit ( j ) and not HasTask ( j ) then
75417: LD_VAR 0 3
75421: PPUSH
75422: CALL_OW 310
75426: NOT
75427: PUSH
75428: LD_VAR 0 3
75432: PPUSH
75433: CALL_OW 314
75437: NOT
75438: AND
75439: IFFALSE 75467
// begin ComEnterUnit ( j , selected ) ;
75441: LD_VAR 0 3
75445: PPUSH
75446: LD_VAR 0 7
75450: PPUSH
75451: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
75455: LD_VAR 0 3
75459: PPUSH
75460: LD_INT 15
75462: PPUSH
75463: CALL_OW 183
// end ;
75467: GO 75414
75469: POP
75470: POP
// end ; end ; end ; end ; end ;
75471: GO 74864
75473: POP
75474: POP
// end ;
75475: LD_VAR 0 1
75479: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
75480: LD_INT 0
75482: PPUSH
75483: PPUSH
75484: PPUSH
75485: PPUSH
// if not mc_bases then
75486: LD_EXP 46
75490: NOT
75491: IFFALSE 75495
// exit ;
75493: GO 75673
// for i = 1 to mc_bases do
75495: LD_ADDR_VAR 0 2
75499: PUSH
75500: DOUBLE
75501: LD_INT 1
75503: DEC
75504: ST_TO_ADDR
75505: LD_EXP 46
75509: PUSH
75510: FOR_TO
75511: IFFALSE 75671
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
75513: LD_ADDR_VAR 0 4
75517: PUSH
75518: LD_EXP 46
75522: PUSH
75523: LD_VAR 0 2
75527: ARRAY
75528: PPUSH
75529: LD_INT 25
75531: PUSH
75532: LD_INT 9
75534: PUSH
75535: EMPTY
75536: LIST
75537: LIST
75538: PPUSH
75539: CALL_OW 72
75543: ST_TO_ADDR
// if not tmp then
75544: LD_VAR 0 4
75548: NOT
75549: IFFALSE 75553
// continue ;
75551: GO 75510
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
75553: LD_EXP 72
75557: PUSH
75558: LD_VAR 0 2
75562: ARRAY
75563: PPUSH
75564: LD_INT 29
75566: PPUSH
75567: CALL_OW 325
75571: NOT
75572: PUSH
75573: LD_EXP 72
75577: PUSH
75578: LD_VAR 0 2
75582: ARRAY
75583: PPUSH
75584: LD_INT 28
75586: PPUSH
75587: CALL_OW 325
75591: NOT
75592: AND
75593: IFFALSE 75597
// continue ;
75595: GO 75510
// for j in tmp do
75597: LD_ADDR_VAR 0 3
75601: PUSH
75602: LD_VAR 0 4
75606: PUSH
75607: FOR_IN
75608: IFFALSE 75667
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
75610: LD_VAR 0 3
75614: PUSH
75615: LD_EXP 49
75619: PUSH
75620: LD_VAR 0 2
75624: ARRAY
75625: PUSH
75626: LD_INT 1
75628: ARRAY
75629: IN
75630: NOT
75631: PUSH
75632: LD_VAR 0 3
75636: PUSH
75637: LD_EXP 49
75641: PUSH
75642: LD_VAR 0 2
75646: ARRAY
75647: PUSH
75648: LD_INT 2
75650: ARRAY
75651: IN
75652: NOT
75653: AND
75654: IFFALSE 75665
// ComSpaceTimeShoot ( j ) ;
75656: LD_VAR 0 3
75660: PPUSH
75661: CALL 20291 0 1
75665: GO 75607
75667: POP
75668: POP
// end ;
75669: GO 75510
75671: POP
75672: POP
// end ;
75673: LD_VAR 0 1
75677: RET
// export function MC_TeleportExit ( ) ; var i , j , x , y , save_point , tmp , teleports , sci ; begin
75678: LD_INT 0
75680: PPUSH
75681: PPUSH
75682: PPUSH
75683: PPUSH
75684: PPUSH
75685: PPUSH
75686: PPUSH
75687: PPUSH
75688: PPUSH
// if not mc_bases then
75689: LD_EXP 46
75693: NOT
75694: IFFALSE 75698
// exit ;
75696: GO 76320
// for i = 1 to mc_bases do
75698: LD_ADDR_VAR 0 2
75702: PUSH
75703: DOUBLE
75704: LD_INT 1
75706: DEC
75707: ST_TO_ADDR
75708: LD_EXP 46
75712: PUSH
75713: FOR_TO
75714: IFFALSE 76318
// begin if not mc_teleport_exit [ i ] or GetTech ( tech_targTeleport , mc_sides [ i ] ) <> state_researched then
75716: LD_EXP 81
75720: PUSH
75721: LD_VAR 0 2
75725: ARRAY
75726: NOT
75727: PUSH
75728: LD_INT 38
75730: PPUSH
75731: LD_EXP 72
75735: PUSH
75736: LD_VAR 0 2
75740: ARRAY
75741: PPUSH
75742: CALL_OW 321
75746: PUSH
75747: LD_INT 2
75749: NONEQUAL
75750: OR
75751: IFFALSE 75755
// continue ;
75753: GO 75713
// teleports := UnitFilter ( mc_bases [ i ] , [ f_btype , b_teleport ] ) ;
75755: LD_ADDR_VAR 0 8
75759: PUSH
75760: LD_EXP 46
75764: PUSH
75765: LD_VAR 0 2
75769: ARRAY
75770: PPUSH
75771: LD_INT 30
75773: PUSH
75774: LD_INT 34
75776: PUSH
75777: EMPTY
75778: LIST
75779: LIST
75780: PPUSH
75781: CALL_OW 72
75785: ST_TO_ADDR
// sci := FilterByTag ( UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) , 0 ) ;
75786: LD_ADDR_VAR 0 9
75790: PUSH
75791: LD_EXP 46
75795: PUSH
75796: LD_VAR 0 2
75800: ARRAY
75801: PPUSH
75802: LD_INT 25
75804: PUSH
75805: LD_INT 4
75807: PUSH
75808: EMPTY
75809: LIST
75810: LIST
75811: PPUSH
75812: CALL_OW 72
75816: PPUSH
75817: LD_INT 0
75819: PPUSH
75820: CALL 52855 0 2
75824: ST_TO_ADDR
// if not sci or not teleports or FilterByTag ( mc_bases [ i ] , 124 ) then
75825: LD_VAR 0 9
75829: NOT
75830: PUSH
75831: LD_VAR 0 8
75835: NOT
75836: OR
75837: PUSH
75838: LD_EXP 46
75842: PUSH
75843: LD_VAR 0 2
75847: ARRAY
75848: PPUSH
75849: LD_INT 124
75851: PPUSH
75852: CALL 52855 0 2
75856: OR
75857: IFFALSE 75861
// continue ;
75859: GO 75713
// if mc_teleport_exit_set [ i ] < mc_teleport_exit [ i ] and mc_teleport_exit_set [ i ] < teleports then
75861: LD_EXP 82
75865: PUSH
75866: LD_VAR 0 2
75870: ARRAY
75871: PUSH
75872: LD_EXP 81
75876: PUSH
75877: LD_VAR 0 2
75881: ARRAY
75882: LESS
75883: PUSH
75884: LD_EXP 82
75888: PUSH
75889: LD_VAR 0 2
75893: ARRAY
75894: PUSH
75895: LD_VAR 0 8
75899: LESS
75900: AND
75901: IFFALSE 76316
// begin tmp := sci [ 1 ] ;
75903: LD_ADDR_VAR 0 7
75907: PUSH
75908: LD_VAR 0 9
75912: PUSH
75913: LD_INT 1
75915: ARRAY
75916: ST_TO_ADDR
// SetTag ( tmp , 124 ) ;
75917: LD_VAR 0 7
75921: PPUSH
75922: LD_INT 124
75924: PPUSH
75925: CALL_OW 109
// for j = mc_teleport_exit [ i ] downto mc_teleport_exit [ i ] do
75929: LD_ADDR_VAR 0 3
75933: PUSH
75934: DOUBLE
75935: LD_EXP 81
75939: PUSH
75940: LD_VAR 0 2
75944: ARRAY
75945: INC
75946: ST_TO_ADDR
75947: LD_EXP 81
75951: PUSH
75952: LD_VAR 0 2
75956: ARRAY
75957: PUSH
75958: FOR_DOWNTO
75959: IFFALSE 76302
// begin if IsInUnit ( tmp ) then
75961: LD_VAR 0 7
75965: PPUSH
75966: CALL_OW 310
75970: IFFALSE 75981
// ComExitBuilding ( tmp ) ;
75972: LD_VAR 0 7
75976: PPUSH
75977: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
75981: LD_INT 35
75983: PPUSH
75984: CALL_OW 67
// until not IsInUnit ( tmp ) and not HasTask ( tmp ) ;
75988: LD_VAR 0 7
75992: PPUSH
75993: CALL_OW 310
75997: NOT
75998: PUSH
75999: LD_VAR 0 7
76003: PPUSH
76004: CALL_OW 314
76008: NOT
76009: AND
76010: IFFALSE 75981
// save_point := [ GetX ( tmp ) , GetY ( tmp ) ] ;
76012: LD_ADDR_VAR 0 6
76016: PUSH
76017: LD_VAR 0 7
76021: PPUSH
76022: CALL_OW 250
76026: PUSH
76027: LD_VAR 0 7
76031: PPUSH
76032: CALL_OW 251
76036: PUSH
76037: EMPTY
76038: LIST
76039: LIST
76040: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
76041: LD_INT 35
76043: PPUSH
76044: CALL_OW 67
// x := mc_teleport_exit [ i ] [ j ] [ 1 ] ;
76048: LD_ADDR_VAR 0 4
76052: PUSH
76053: LD_EXP 81
76057: PUSH
76058: LD_VAR 0 2
76062: ARRAY
76063: PUSH
76064: LD_VAR 0 3
76068: ARRAY
76069: PUSH
76070: LD_INT 1
76072: ARRAY
76073: ST_TO_ADDR
// y := mc_teleport_exit [ i ] [ j ] [ 2 ] ;
76074: LD_ADDR_VAR 0 5
76078: PUSH
76079: LD_EXP 81
76083: PUSH
76084: LD_VAR 0 2
76088: ARRAY
76089: PUSH
76090: LD_VAR 0 3
76094: ARRAY
76095: PUSH
76096: LD_INT 2
76098: ARRAY
76099: ST_TO_ADDR
// if DangerAtRange ( tmp , 10 ) [ 4 ] then
76100: LD_VAR 0 7
76104: PPUSH
76105: LD_INT 10
76107: PPUSH
76108: CALL 26887 0 2
76112: PUSH
76113: LD_INT 4
76115: ARRAY
76116: IFFALSE 76154
// begin ComMoveXY ( tmp , save_point [ 1 ] , save_point [ 2 ] ) ;
76118: LD_VAR 0 7
76122: PPUSH
76123: LD_VAR 0 6
76127: PUSH
76128: LD_INT 1
76130: ARRAY
76131: PPUSH
76132: LD_VAR 0 6
76136: PUSH
76137: LD_INT 2
76139: ARRAY
76140: PPUSH
76141: CALL_OW 111
// wait ( 0 0$10 ) ;
76145: LD_INT 350
76147: PPUSH
76148: CALL_OW 67
// end else
76152: GO 76180
// begin ComMoveXY ( tmp , x , y ) ;
76154: LD_VAR 0 7
76158: PPUSH
76159: LD_VAR 0 4
76163: PPUSH
76164: LD_VAR 0 5
76168: PPUSH
76169: CALL_OW 111
// wait ( 0 0$3 ) ;
76173: LD_INT 105
76175: PPUSH
76176: CALL_OW 67
// end ; until IsAt ( tmp , x , y ) ;
76180: LD_VAR 0 7
76184: PPUSH
76185: LD_VAR 0 4
76189: PPUSH
76190: LD_VAR 0 5
76194: PPUSH
76195: CALL_OW 307
76199: IFFALSE 76041
// ComTeleportExit ( tmp , x , y , teleports [ j ] ) ;
76201: LD_VAR 0 7
76205: PPUSH
76206: LD_VAR 0 4
76210: PPUSH
76211: LD_VAR 0 5
76215: PPUSH
76216: LD_VAR 0 8
76220: PUSH
76221: LD_VAR 0 3
76225: ARRAY
76226: PPUSH
76227: CALL_OW 156
// repeat wait ( 0 0$1 ) ;
76231: LD_INT 35
76233: PPUSH
76234: CALL_OW 67
// until not HasTask ( tmp ) ;
76238: LD_VAR 0 7
76242: PPUSH
76243: CALL_OW 314
76247: NOT
76248: IFFALSE 76231
// mc_teleport_exit_set := ReplaceIn ( mc_teleport_exit_set , [ i , mc_teleport_exit_set [ i ] + 1 ] , teleports [ j ] ) ;
76250: LD_ADDR_EXP 82
76254: PUSH
76255: LD_EXP 82
76259: PPUSH
76260: LD_VAR 0 2
76264: PUSH
76265: LD_EXP 82
76269: PUSH
76270: LD_VAR 0 2
76274: ARRAY
76275: PUSH
76276: LD_INT 1
76278: PLUS
76279: PUSH
76280: EMPTY
76281: LIST
76282: LIST
76283: PPUSH
76284: LD_VAR 0 8
76288: PUSH
76289: LD_VAR 0 3
76293: ARRAY
76294: PPUSH
76295: CALL 24294 0 3
76299: ST_TO_ADDR
// end ;
76300: GO 75958
76302: POP
76303: POP
// MC_Reset ( i , 124 ) ;
76304: LD_VAR 0 2
76308: PPUSH
76309: LD_INT 124
76311: PPUSH
76312: CALL 59923 0 2
// end ; end ;
76316: GO 75713
76318: POP
76319: POP
// end ;
76320: LD_VAR 0 1
76324: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
76325: LD_INT 0
76327: PPUSH
76328: PPUSH
76329: PPUSH
// if not mc_bases then
76330: LD_EXP 46
76334: NOT
76335: IFFALSE 76339
// exit ;
76337: GO 76945
// for i = 1 to mc_bases do
76339: LD_ADDR_VAR 0 2
76343: PUSH
76344: DOUBLE
76345: LD_INT 1
76347: DEC
76348: ST_TO_ADDR
76349: LD_EXP 46
76353: PUSH
76354: FOR_TO
76355: IFFALSE 76943
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
76357: LD_ADDR_VAR 0 3
76361: PUSH
76362: LD_EXP 46
76366: PUSH
76367: LD_VAR 0 2
76371: ARRAY
76372: PPUSH
76373: LD_INT 25
76375: PUSH
76376: LD_INT 4
76378: PUSH
76379: EMPTY
76380: LIST
76381: LIST
76382: PPUSH
76383: CALL_OW 72
76387: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
76388: LD_VAR 0 3
76392: NOT
76393: PUSH
76394: LD_EXP 83
76398: PUSH
76399: LD_VAR 0 2
76403: ARRAY
76404: NOT
76405: OR
76406: PUSH
76407: LD_EXP 46
76411: PUSH
76412: LD_VAR 0 2
76416: ARRAY
76417: PPUSH
76418: LD_INT 2
76420: PUSH
76421: LD_INT 30
76423: PUSH
76424: LD_INT 0
76426: PUSH
76427: EMPTY
76428: LIST
76429: LIST
76430: PUSH
76431: LD_INT 30
76433: PUSH
76434: LD_INT 1
76436: PUSH
76437: EMPTY
76438: LIST
76439: LIST
76440: PUSH
76441: EMPTY
76442: LIST
76443: LIST
76444: LIST
76445: PPUSH
76446: CALL_OW 72
76450: NOT
76451: OR
76452: IFFALSE 76502
// begin if mc_deposits_finder [ i ] then
76454: LD_EXP 84
76458: PUSH
76459: LD_VAR 0 2
76463: ARRAY
76464: IFFALSE 76500
// begin MC_Reset ( i , 125 ) ;
76466: LD_VAR 0 2
76470: PPUSH
76471: LD_INT 125
76473: PPUSH
76474: CALL 59923 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
76478: LD_ADDR_EXP 84
76482: PUSH
76483: LD_EXP 84
76487: PPUSH
76488: LD_VAR 0 2
76492: PPUSH
76493: EMPTY
76494: PPUSH
76495: CALL_OW 1
76499: ST_TO_ADDR
// end ; continue ;
76500: GO 76354
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
76502: LD_EXP 83
76506: PUSH
76507: LD_VAR 0 2
76511: ARRAY
76512: PUSH
76513: LD_INT 1
76515: ARRAY
76516: PUSH
76517: LD_INT 3
76519: ARRAY
76520: PUSH
76521: LD_INT 1
76523: EQUAL
76524: PUSH
76525: LD_INT 20
76527: PPUSH
76528: LD_EXP 72
76532: PUSH
76533: LD_VAR 0 2
76537: ARRAY
76538: PPUSH
76539: CALL_OW 321
76543: PUSH
76544: LD_INT 2
76546: NONEQUAL
76547: AND
76548: IFFALSE 76598
// begin if mc_deposits_finder [ i ] then
76550: LD_EXP 84
76554: PUSH
76555: LD_VAR 0 2
76559: ARRAY
76560: IFFALSE 76596
// begin MC_Reset ( i , 125 ) ;
76562: LD_VAR 0 2
76566: PPUSH
76567: LD_INT 125
76569: PPUSH
76570: CALL 59923 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
76574: LD_ADDR_EXP 84
76578: PUSH
76579: LD_EXP 84
76583: PPUSH
76584: LD_VAR 0 2
76588: PPUSH
76589: EMPTY
76590: PPUSH
76591: CALL_OW 1
76595: ST_TO_ADDR
// end ; continue ;
76596: GO 76354
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
76598: LD_EXP 83
76602: PUSH
76603: LD_VAR 0 2
76607: ARRAY
76608: PUSH
76609: LD_INT 1
76611: ARRAY
76612: PUSH
76613: LD_INT 1
76615: ARRAY
76616: PPUSH
76617: LD_EXP 83
76621: PUSH
76622: LD_VAR 0 2
76626: ARRAY
76627: PUSH
76628: LD_INT 1
76630: ARRAY
76631: PUSH
76632: LD_INT 2
76634: ARRAY
76635: PPUSH
76636: LD_EXP 72
76640: PUSH
76641: LD_VAR 0 2
76645: ARRAY
76646: PPUSH
76647: CALL_OW 440
76651: IFFALSE 76694
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
76653: LD_ADDR_EXP 83
76657: PUSH
76658: LD_EXP 83
76662: PPUSH
76663: LD_VAR 0 2
76667: PPUSH
76668: LD_EXP 83
76672: PUSH
76673: LD_VAR 0 2
76677: ARRAY
76678: PPUSH
76679: LD_INT 1
76681: PPUSH
76682: CALL_OW 3
76686: PPUSH
76687: CALL_OW 1
76691: ST_TO_ADDR
76692: GO 76941
// begin if not mc_deposits_finder [ i ] then
76694: LD_EXP 84
76698: PUSH
76699: LD_VAR 0 2
76703: ARRAY
76704: NOT
76705: IFFALSE 76757
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
76707: LD_ADDR_EXP 84
76711: PUSH
76712: LD_EXP 84
76716: PPUSH
76717: LD_VAR 0 2
76721: PPUSH
76722: LD_VAR 0 3
76726: PUSH
76727: LD_INT 1
76729: ARRAY
76730: PUSH
76731: EMPTY
76732: LIST
76733: PPUSH
76734: CALL_OW 1
76738: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
76739: LD_VAR 0 3
76743: PUSH
76744: LD_INT 1
76746: ARRAY
76747: PPUSH
76748: LD_INT 125
76750: PPUSH
76751: CALL_OW 109
// end else
76755: GO 76941
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
76757: LD_EXP 84
76761: PUSH
76762: LD_VAR 0 2
76766: ARRAY
76767: PUSH
76768: LD_INT 1
76770: ARRAY
76771: PPUSH
76772: CALL_OW 310
76776: IFFALSE 76799
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
76778: LD_EXP 84
76782: PUSH
76783: LD_VAR 0 2
76787: ARRAY
76788: PUSH
76789: LD_INT 1
76791: ARRAY
76792: PPUSH
76793: CALL_OW 122
76797: GO 76941
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
76799: LD_EXP 84
76803: PUSH
76804: LD_VAR 0 2
76808: ARRAY
76809: PUSH
76810: LD_INT 1
76812: ARRAY
76813: PPUSH
76814: CALL_OW 314
76818: NOT
76819: PUSH
76820: LD_EXP 84
76824: PUSH
76825: LD_VAR 0 2
76829: ARRAY
76830: PUSH
76831: LD_INT 1
76833: ARRAY
76834: PPUSH
76835: LD_EXP 83
76839: PUSH
76840: LD_VAR 0 2
76844: ARRAY
76845: PUSH
76846: LD_INT 1
76848: ARRAY
76849: PUSH
76850: LD_INT 1
76852: ARRAY
76853: PPUSH
76854: LD_EXP 83
76858: PUSH
76859: LD_VAR 0 2
76863: ARRAY
76864: PUSH
76865: LD_INT 1
76867: ARRAY
76868: PUSH
76869: LD_INT 2
76871: ARRAY
76872: PPUSH
76873: CALL_OW 297
76877: PUSH
76878: LD_INT 6
76880: GREATER
76881: AND
76882: IFFALSE 76941
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
76884: LD_EXP 84
76888: PUSH
76889: LD_VAR 0 2
76893: ARRAY
76894: PUSH
76895: LD_INT 1
76897: ARRAY
76898: PPUSH
76899: LD_EXP 83
76903: PUSH
76904: LD_VAR 0 2
76908: ARRAY
76909: PUSH
76910: LD_INT 1
76912: ARRAY
76913: PUSH
76914: LD_INT 1
76916: ARRAY
76917: PPUSH
76918: LD_EXP 83
76922: PUSH
76923: LD_VAR 0 2
76927: ARRAY
76928: PUSH
76929: LD_INT 1
76931: ARRAY
76932: PUSH
76933: LD_INT 2
76935: ARRAY
76936: PPUSH
76937: CALL_OW 111
// end ; end ; end ;
76941: GO 76354
76943: POP
76944: POP
// end ;
76945: LD_VAR 0 1
76949: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts , mcts , x ; begin
76950: LD_INT 0
76952: PPUSH
76953: PPUSH
76954: PPUSH
76955: PPUSH
76956: PPUSH
76957: PPUSH
76958: PPUSH
76959: PPUSH
76960: PPUSH
76961: PPUSH
76962: PPUSH
// if not mc_bases then
76963: LD_EXP 46
76967: NOT
76968: IFFALSE 76972
// exit ;
76970: GO 77912
// for i = 1 to mc_bases do
76972: LD_ADDR_VAR 0 2
76976: PUSH
76977: DOUBLE
76978: LD_INT 1
76980: DEC
76981: ST_TO_ADDR
76982: LD_EXP 46
76986: PUSH
76987: FOR_TO
76988: IFFALSE 77910
// begin if not mc_bases [ i ] or mc_scan [ i ] then
76990: LD_EXP 46
76994: PUSH
76995: LD_VAR 0 2
76999: ARRAY
77000: NOT
77001: PUSH
77002: LD_EXP 69
77006: PUSH
77007: LD_VAR 0 2
77011: ARRAY
77012: OR
77013: IFFALSE 77017
// continue ;
77015: GO 76987
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
77017: LD_ADDR_VAR 0 7
77021: PUSH
77022: LD_EXP 46
77026: PUSH
77027: LD_VAR 0 2
77031: ARRAY
77032: PUSH
77033: LD_INT 1
77035: ARRAY
77036: PPUSH
77037: CALL_OW 248
77041: ST_TO_ADDR
// if nation = 3 or not UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) then
77042: LD_VAR 0 7
77046: PUSH
77047: LD_INT 3
77049: EQUAL
77050: PUSH
77051: LD_EXP 65
77055: PUSH
77056: LD_VAR 0 2
77060: ARRAY
77061: PUSH
77062: LD_EXP 68
77066: PUSH
77067: LD_VAR 0 2
77071: ARRAY
77072: UNION
77073: PPUSH
77074: LD_INT 33
77076: PUSH
77077: LD_INT 2
77079: PUSH
77080: EMPTY
77081: LIST
77082: LIST
77083: PPUSH
77084: CALL_OW 72
77088: NOT
77089: OR
77090: IFFALSE 77094
// continue ;
77092: GO 76987
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
77094: LD_ADDR_VAR 0 9
77098: PUSH
77099: LD_EXP 46
77103: PUSH
77104: LD_VAR 0 2
77108: ARRAY
77109: PPUSH
77110: LD_INT 30
77112: PUSH
77113: LD_INT 36
77115: PUSH
77116: EMPTY
77117: LIST
77118: LIST
77119: PPUSH
77120: CALL_OW 72
77124: ST_TO_ADDR
// mcts := UnitFilter ( mc_vehicles [ i ] , [ f_weapon , ar_control_tower ] ) ;
77125: LD_ADDR_VAR 0 10
77129: PUSH
77130: LD_EXP 65
77134: PUSH
77135: LD_VAR 0 2
77139: ARRAY
77140: PPUSH
77141: LD_INT 34
77143: PUSH
77144: LD_INT 31
77146: PUSH
77147: EMPTY
77148: LIST
77149: LIST
77150: PPUSH
77151: CALL_OW 72
77155: ST_TO_ADDR
// if not cts and not mcts then
77156: LD_VAR 0 9
77160: NOT
77161: PUSH
77162: LD_VAR 0 10
77166: NOT
77167: AND
77168: IFFALSE 77172
// continue ;
77170: GO 76987
// x := cts ;
77172: LD_ADDR_VAR 0 11
77176: PUSH
77177: LD_VAR 0 9
77181: ST_TO_ADDR
// if not x then
77182: LD_VAR 0 11
77186: NOT
77187: IFFALSE 77199
// x := mcts ;
77189: LD_ADDR_VAR 0 11
77193: PUSH
77194: LD_VAR 0 10
77198: ST_TO_ADDR
// if not x then
77199: LD_VAR 0 11
77203: NOT
77204: IFFALSE 77208
// continue ;
77206: GO 76987
// if mc_remote_driver [ i ] then
77208: LD_EXP 86
77212: PUSH
77213: LD_VAR 0 2
77217: ARRAY
77218: IFFALSE 77605
// for j in mc_remote_driver [ i ] do
77220: LD_ADDR_VAR 0 3
77224: PUSH
77225: LD_EXP 86
77229: PUSH
77230: LD_VAR 0 2
77234: ARRAY
77235: PUSH
77236: FOR_IN
77237: IFFALSE 77603
// begin if GetClass ( j ) <> 3 then
77239: LD_VAR 0 3
77243: PPUSH
77244: CALL_OW 257
77248: PUSH
77249: LD_INT 3
77251: NONEQUAL
77252: IFFALSE 77305
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff j ) ;
77254: LD_ADDR_EXP 86
77258: PUSH
77259: LD_EXP 86
77263: PPUSH
77264: LD_VAR 0 2
77268: PPUSH
77269: LD_EXP 86
77273: PUSH
77274: LD_VAR 0 2
77278: ARRAY
77279: PUSH
77280: LD_VAR 0 3
77284: DIFF
77285: PPUSH
77286: CALL_OW 1
77290: ST_TO_ADDR
// SetTag ( j , 0 ) ;
77291: LD_VAR 0 3
77295: PPUSH
77296: LD_INT 0
77298: PPUSH
77299: CALL_OW 109
// continue ;
77303: GO 77236
// end ; if UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) and not IsDriver ( j ) then
77305: LD_EXP 65
77309: PUSH
77310: LD_VAR 0 2
77314: ARRAY
77315: PPUSH
77316: LD_INT 34
77318: PUSH
77319: LD_INT 31
77321: PUSH
77322: EMPTY
77323: LIST
77324: LIST
77325: PUSH
77326: LD_INT 58
77328: PUSH
77329: EMPTY
77330: LIST
77331: PUSH
77332: EMPTY
77333: LIST
77334: LIST
77335: PPUSH
77336: CALL_OW 72
77340: PUSH
77341: LD_VAR 0 3
77345: PPUSH
77346: CALL 52943 0 1
77350: NOT
77351: AND
77352: IFFALSE 77423
// begin if IsInUnit ( j ) then
77354: LD_VAR 0 3
77358: PPUSH
77359: CALL_OW 310
77363: IFFALSE 77374
// ComExitBuilding ( j ) ;
77365: LD_VAR 0 3
77369: PPUSH
77370: CALL_OW 122
// AddComEnterUnit ( j , UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) [ 1 ] ) ;
77374: LD_VAR 0 3
77378: PPUSH
77379: LD_EXP 65
77383: PUSH
77384: LD_VAR 0 2
77388: ARRAY
77389: PPUSH
77390: LD_INT 34
77392: PUSH
77393: LD_INT 31
77395: PUSH
77396: EMPTY
77397: LIST
77398: LIST
77399: PUSH
77400: LD_INT 58
77402: PUSH
77403: EMPTY
77404: LIST
77405: PUSH
77406: EMPTY
77407: LIST
77408: LIST
77409: PPUSH
77410: CALL_OW 72
77414: PUSH
77415: LD_INT 1
77417: ARRAY
77418: PPUSH
77419: CALL_OW 180
// end ; if not IsInUnit ( j ) or ( GetBType ( IsInUnit ( j ) ) <> b_control_tower and not IsDriver ( j ) ) then
77423: LD_VAR 0 3
77427: PPUSH
77428: CALL_OW 310
77432: NOT
77433: PUSH
77434: LD_VAR 0 3
77438: PPUSH
77439: CALL_OW 310
77443: PPUSH
77444: CALL_OW 266
77448: PUSH
77449: LD_INT 36
77451: NONEQUAL
77452: PUSH
77453: LD_VAR 0 3
77457: PPUSH
77458: CALL 52943 0 1
77462: NOT
77463: AND
77464: OR
77465: IFFALSE 77601
// begin if IsInUnit ( j ) then
77467: LD_VAR 0 3
77471: PPUSH
77472: CALL_OW 310
77476: IFFALSE 77487
// ComExitBuilding ( j ) ;
77478: LD_VAR 0 3
77482: PPUSH
77483: CALL_OW 122
// ct := 0 ;
77487: LD_ADDR_VAR 0 8
77491: PUSH
77492: LD_INT 0
77494: ST_TO_ADDR
// for k in x do
77495: LD_ADDR_VAR 0 4
77499: PUSH
77500: LD_VAR 0 11
77504: PUSH
77505: FOR_IN
77506: IFFALSE 77579
// if ( GetWeapon ( k ) = ar_control_tower and not IsDrivenBy ( k ) ) or ( GetBType ( k ) = b_control_tower and UnitsInside ( k ) < 3 ) then
77508: LD_VAR 0 4
77512: PPUSH
77513: CALL_OW 264
77517: PUSH
77518: LD_INT 31
77520: EQUAL
77521: PUSH
77522: LD_VAR 0 4
77526: PPUSH
77527: CALL_OW 311
77531: NOT
77532: AND
77533: PUSH
77534: LD_VAR 0 4
77538: PPUSH
77539: CALL_OW 266
77543: PUSH
77544: LD_INT 36
77546: EQUAL
77547: PUSH
77548: LD_VAR 0 4
77552: PPUSH
77553: CALL_OW 313
77557: PUSH
77558: LD_INT 3
77560: LESS
77561: AND
77562: OR
77563: IFFALSE 77577
// begin ct := k ;
77565: LD_ADDR_VAR 0 8
77569: PUSH
77570: LD_VAR 0 4
77574: ST_TO_ADDR
// break ;
77575: GO 77579
// end ;
77577: GO 77505
77579: POP
77580: POP
// if ct then
77581: LD_VAR 0 8
77585: IFFALSE 77601
// ComEnterUnit ( j , ct ) ;
77587: LD_VAR 0 3
77591: PPUSH
77592: LD_VAR 0 8
77596: PPUSH
77597: CALL_OW 120
// end ; end ;
77601: GO 77236
77603: POP
77604: POP
// places := 0 ;
77605: LD_ADDR_VAR 0 5
77609: PUSH
77610: LD_INT 0
77612: ST_TO_ADDR
// for j = 1 to x do
77613: LD_ADDR_VAR 0 3
77617: PUSH
77618: DOUBLE
77619: LD_INT 1
77621: DEC
77622: ST_TO_ADDR
77623: LD_VAR 0 11
77627: PUSH
77628: FOR_TO
77629: IFFALSE 77705
// if GetWeapon ( x [ j ] ) = ar_control_tower then
77631: LD_VAR 0 11
77635: PUSH
77636: LD_VAR 0 3
77640: ARRAY
77641: PPUSH
77642: CALL_OW 264
77646: PUSH
77647: LD_INT 31
77649: EQUAL
77650: IFFALSE 77668
// places := places + 1 else
77652: LD_ADDR_VAR 0 5
77656: PUSH
77657: LD_VAR 0 5
77661: PUSH
77662: LD_INT 1
77664: PLUS
77665: ST_TO_ADDR
77666: GO 77703
// if GetBType ( x [ j ] ) = b_control_tower then
77668: LD_VAR 0 11
77672: PUSH
77673: LD_VAR 0 3
77677: ARRAY
77678: PPUSH
77679: CALL_OW 266
77683: PUSH
77684: LD_INT 36
77686: EQUAL
77687: IFFALSE 77703
// places := places + 3 ;
77689: LD_ADDR_VAR 0 5
77693: PUSH
77694: LD_VAR 0 5
77698: PUSH
77699: LD_INT 3
77701: PLUS
77702: ST_TO_ADDR
77703: GO 77628
77705: POP
77706: POP
// if places = 0 or places <= mc_remote_driver [ i ] then
77707: LD_VAR 0 5
77711: PUSH
77712: LD_INT 0
77714: EQUAL
77715: PUSH
77716: LD_VAR 0 5
77720: PUSH
77721: LD_EXP 86
77725: PUSH
77726: LD_VAR 0 2
77730: ARRAY
77731: LESSEQUAL
77732: OR
77733: IFFALSE 77737
// continue ;
77735: GO 76987
// tmp := SortBySkill ( UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] , 3 ) ;
77737: LD_ADDR_VAR 0 6
77741: PUSH
77742: LD_EXP 46
77746: PUSH
77747: LD_VAR 0 2
77751: ARRAY
77752: PPUSH
77753: LD_INT 25
77755: PUSH
77756: LD_INT 3
77758: PUSH
77759: EMPTY
77760: LIST
77761: LIST
77762: PPUSH
77763: CALL_OW 72
77767: PUSH
77768: LD_EXP 86
77772: PUSH
77773: LD_VAR 0 2
77777: ARRAY
77778: DIFF
77779: PPUSH
77780: LD_INT 3
77782: PPUSH
77783: CALL 53843 0 2
77787: ST_TO_ADDR
// for j in tmp do
77788: LD_ADDR_VAR 0 3
77792: PUSH
77793: LD_VAR 0 6
77797: PUSH
77798: FOR_IN
77799: IFFALSE 77834
// if GetTag ( j ) > 0 then
77801: LD_VAR 0 3
77805: PPUSH
77806: CALL_OW 110
77810: PUSH
77811: LD_INT 0
77813: GREATER
77814: IFFALSE 77832
// tmp := tmp diff j ;
77816: LD_ADDR_VAR 0 6
77820: PUSH
77821: LD_VAR 0 6
77825: PUSH
77826: LD_VAR 0 3
77830: DIFF
77831: ST_TO_ADDR
77832: GO 77798
77834: POP
77835: POP
// if not tmp then
77836: LD_VAR 0 6
77840: NOT
77841: IFFALSE 77845
// continue ;
77843: GO 76987
// if places then
77845: LD_VAR 0 5
77849: IFFALSE 77908
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
77851: LD_ADDR_EXP 86
77855: PUSH
77856: LD_EXP 86
77860: PPUSH
77861: LD_VAR 0 2
77865: PPUSH
77866: LD_EXP 86
77870: PUSH
77871: LD_VAR 0 2
77875: ARRAY
77876: PUSH
77877: LD_VAR 0 6
77881: PUSH
77882: LD_INT 1
77884: ARRAY
77885: UNION
77886: PPUSH
77887: CALL_OW 1
77891: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
77892: LD_VAR 0 6
77896: PUSH
77897: LD_INT 1
77899: ARRAY
77900: PPUSH
77901: LD_INT 126
77903: PPUSH
77904: CALL_OW 109
// end ; end ;
77908: GO 76987
77910: POP
77911: POP
// end ;
77912: LD_VAR 0 1
77916: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
77917: LD_INT 0
77919: PPUSH
77920: PPUSH
77921: PPUSH
77922: PPUSH
77923: PPUSH
77924: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
77925: LD_VAR 0 1
77929: NOT
77930: PUSH
77931: LD_VAR 0 2
77935: NOT
77936: OR
77937: PUSH
77938: LD_VAR 0 3
77942: NOT
77943: OR
77944: PUSH
77945: LD_VAR 0 4
77949: PUSH
77950: LD_INT 1
77952: PUSH
77953: LD_INT 2
77955: PUSH
77956: LD_INT 3
77958: PUSH
77959: LD_INT 4
77961: PUSH
77962: LD_INT 5
77964: PUSH
77965: LD_INT 8
77967: PUSH
77968: LD_INT 9
77970: PUSH
77971: LD_INT 15
77973: PUSH
77974: LD_INT 16
77976: PUSH
77977: EMPTY
77978: LIST
77979: LIST
77980: LIST
77981: LIST
77982: LIST
77983: LIST
77984: LIST
77985: LIST
77986: LIST
77987: IN
77988: NOT
77989: OR
77990: IFFALSE 77994
// exit ;
77992: GO 78894
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
77994: LD_ADDR_VAR 0 2
77998: PUSH
77999: LD_VAR 0 2
78003: PPUSH
78004: LD_INT 21
78006: PUSH
78007: LD_INT 3
78009: PUSH
78010: EMPTY
78011: LIST
78012: LIST
78013: PUSH
78014: LD_INT 24
78016: PUSH
78017: LD_INT 250
78019: PUSH
78020: EMPTY
78021: LIST
78022: LIST
78023: PUSH
78024: EMPTY
78025: LIST
78026: LIST
78027: PPUSH
78028: CALL_OW 72
78032: ST_TO_ADDR
// case class of 1 , 15 :
78033: LD_VAR 0 4
78037: PUSH
78038: LD_INT 1
78040: DOUBLE
78041: EQUAL
78042: IFTRUE 78052
78044: LD_INT 15
78046: DOUBLE
78047: EQUAL
78048: IFTRUE 78052
78050: GO 78137
78052: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
78053: LD_ADDR_VAR 0 8
78057: PUSH
78058: LD_VAR 0 2
78062: PPUSH
78063: LD_INT 2
78065: PUSH
78066: LD_INT 30
78068: PUSH
78069: LD_INT 32
78071: PUSH
78072: EMPTY
78073: LIST
78074: LIST
78075: PUSH
78076: LD_INT 30
78078: PUSH
78079: LD_INT 31
78081: PUSH
78082: EMPTY
78083: LIST
78084: LIST
78085: PUSH
78086: EMPTY
78087: LIST
78088: LIST
78089: LIST
78090: PPUSH
78091: CALL_OW 72
78095: PUSH
78096: LD_VAR 0 2
78100: PPUSH
78101: LD_INT 2
78103: PUSH
78104: LD_INT 30
78106: PUSH
78107: LD_INT 4
78109: PUSH
78110: EMPTY
78111: LIST
78112: LIST
78113: PUSH
78114: LD_INT 30
78116: PUSH
78117: LD_INT 5
78119: PUSH
78120: EMPTY
78121: LIST
78122: LIST
78123: PUSH
78124: EMPTY
78125: LIST
78126: LIST
78127: LIST
78128: PPUSH
78129: CALL_OW 72
78133: ADD
78134: ST_TO_ADDR
78135: GO 78383
78137: LD_INT 2
78139: DOUBLE
78140: EQUAL
78141: IFTRUE 78151
78143: LD_INT 16
78145: DOUBLE
78146: EQUAL
78147: IFTRUE 78151
78149: GO 78197
78151: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
78152: LD_ADDR_VAR 0 8
78156: PUSH
78157: LD_VAR 0 2
78161: PPUSH
78162: LD_INT 2
78164: PUSH
78165: LD_INT 30
78167: PUSH
78168: LD_INT 0
78170: PUSH
78171: EMPTY
78172: LIST
78173: LIST
78174: PUSH
78175: LD_INT 30
78177: PUSH
78178: LD_INT 1
78180: PUSH
78181: EMPTY
78182: LIST
78183: LIST
78184: PUSH
78185: EMPTY
78186: LIST
78187: LIST
78188: LIST
78189: PPUSH
78190: CALL_OW 72
78194: ST_TO_ADDR
78195: GO 78383
78197: LD_INT 3
78199: DOUBLE
78200: EQUAL
78201: IFTRUE 78205
78203: GO 78251
78205: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
78206: LD_ADDR_VAR 0 8
78210: PUSH
78211: LD_VAR 0 2
78215: PPUSH
78216: LD_INT 2
78218: PUSH
78219: LD_INT 30
78221: PUSH
78222: LD_INT 2
78224: PUSH
78225: EMPTY
78226: LIST
78227: LIST
78228: PUSH
78229: LD_INT 30
78231: PUSH
78232: LD_INT 3
78234: PUSH
78235: EMPTY
78236: LIST
78237: LIST
78238: PUSH
78239: EMPTY
78240: LIST
78241: LIST
78242: LIST
78243: PPUSH
78244: CALL_OW 72
78248: ST_TO_ADDR
78249: GO 78383
78251: LD_INT 4
78253: DOUBLE
78254: EQUAL
78255: IFTRUE 78259
78257: GO 78316
78259: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
78260: LD_ADDR_VAR 0 8
78264: PUSH
78265: LD_VAR 0 2
78269: PPUSH
78270: LD_INT 2
78272: PUSH
78273: LD_INT 30
78275: PUSH
78276: LD_INT 6
78278: PUSH
78279: EMPTY
78280: LIST
78281: LIST
78282: PUSH
78283: LD_INT 30
78285: PUSH
78286: LD_INT 7
78288: PUSH
78289: EMPTY
78290: LIST
78291: LIST
78292: PUSH
78293: LD_INT 30
78295: PUSH
78296: LD_INT 8
78298: PUSH
78299: EMPTY
78300: LIST
78301: LIST
78302: PUSH
78303: EMPTY
78304: LIST
78305: LIST
78306: LIST
78307: LIST
78308: PPUSH
78309: CALL_OW 72
78313: ST_TO_ADDR
78314: GO 78383
78316: LD_INT 5
78318: DOUBLE
78319: EQUAL
78320: IFTRUE 78336
78322: LD_INT 8
78324: DOUBLE
78325: EQUAL
78326: IFTRUE 78336
78328: LD_INT 9
78330: DOUBLE
78331: EQUAL
78332: IFTRUE 78336
78334: GO 78382
78336: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
78337: LD_ADDR_VAR 0 8
78341: PUSH
78342: LD_VAR 0 2
78346: PPUSH
78347: LD_INT 2
78349: PUSH
78350: LD_INT 30
78352: PUSH
78353: LD_INT 4
78355: PUSH
78356: EMPTY
78357: LIST
78358: LIST
78359: PUSH
78360: LD_INT 30
78362: PUSH
78363: LD_INT 5
78365: PUSH
78366: EMPTY
78367: LIST
78368: LIST
78369: PUSH
78370: EMPTY
78371: LIST
78372: LIST
78373: LIST
78374: PPUSH
78375: CALL_OW 72
78379: ST_TO_ADDR
78380: GO 78383
78382: POP
// if not tmp then
78383: LD_VAR 0 8
78387: NOT
78388: IFFALSE 78392
// exit ;
78390: GO 78894
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
78392: LD_VAR 0 4
78396: PUSH
78397: LD_INT 1
78399: PUSH
78400: LD_INT 15
78402: PUSH
78403: EMPTY
78404: LIST
78405: LIST
78406: IN
78407: PUSH
78408: LD_EXP 55
78412: PUSH
78413: LD_VAR 0 1
78417: ARRAY
78418: AND
78419: IFFALSE 78575
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
78421: LD_ADDR_VAR 0 9
78425: PUSH
78426: LD_EXP 55
78430: PUSH
78431: LD_VAR 0 1
78435: ARRAY
78436: PUSH
78437: LD_INT 1
78439: ARRAY
78440: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
78441: LD_VAR 0 9
78445: PUSH
78446: LD_EXP 56
78450: PUSH
78451: LD_VAR 0 1
78455: ARRAY
78456: IN
78457: NOT
78458: IFFALSE 78573
// begin mc_busy_turret_list := ReplaceIn ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
78460: LD_ADDR_EXP 56
78464: PUSH
78465: LD_EXP 56
78469: PPUSH
78470: LD_VAR 0 1
78474: PUSH
78475: LD_EXP 56
78479: PUSH
78480: LD_VAR 0 1
78484: ARRAY
78485: PUSH
78486: LD_INT 1
78488: PLUS
78489: PUSH
78490: EMPTY
78491: LIST
78492: LIST
78493: PPUSH
78494: LD_VAR 0 9
78498: PPUSH
78499: CALL 24294 0 3
78503: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
78504: LD_ADDR_EXP 55
78508: PUSH
78509: LD_EXP 55
78513: PPUSH
78514: LD_VAR 0 1
78518: PPUSH
78519: LD_EXP 55
78523: PUSH
78524: LD_VAR 0 1
78528: ARRAY
78529: PUSH
78530: LD_VAR 0 9
78534: DIFF
78535: PPUSH
78536: CALL_OW 1
78540: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
78541: LD_VAR 0 3
78545: PPUSH
78546: LD_EXP 56
78550: PUSH
78551: LD_VAR 0 1
78555: ARRAY
78556: PUSH
78557: LD_EXP 56
78561: PUSH
78562: LD_VAR 0 1
78566: ARRAY
78567: ARRAY
78568: PPUSH
78569: CALL_OW 120
// end ; exit ;
78573: GO 78894
// end ; if tmp > 1 then
78575: LD_VAR 0 8
78579: PUSH
78580: LD_INT 1
78582: GREATER
78583: IFFALSE 78687
// for i = 2 to tmp do
78585: LD_ADDR_VAR 0 6
78589: PUSH
78590: DOUBLE
78591: LD_INT 2
78593: DEC
78594: ST_TO_ADDR
78595: LD_VAR 0 8
78599: PUSH
78600: FOR_TO
78601: IFFALSE 78685
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
78603: LD_VAR 0 8
78607: PUSH
78608: LD_VAR 0 6
78612: ARRAY
78613: PPUSH
78614: CALL_OW 461
78618: PUSH
78619: LD_INT 6
78621: EQUAL
78622: IFFALSE 78683
// begin x := tmp [ i ] ;
78624: LD_ADDR_VAR 0 9
78628: PUSH
78629: LD_VAR 0 8
78633: PUSH
78634: LD_VAR 0 6
78638: ARRAY
78639: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
78640: LD_ADDR_VAR 0 8
78644: PUSH
78645: LD_VAR 0 8
78649: PPUSH
78650: LD_VAR 0 6
78654: PPUSH
78655: CALL_OW 3
78659: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
78660: LD_ADDR_VAR 0 8
78664: PUSH
78665: LD_VAR 0 8
78669: PPUSH
78670: LD_INT 1
78672: PPUSH
78673: LD_VAR 0 9
78677: PPUSH
78678: CALL_OW 2
78682: ST_TO_ADDR
// end ;
78683: GO 78600
78685: POP
78686: POP
// for i in tmp do
78687: LD_ADDR_VAR 0 6
78691: PUSH
78692: LD_VAR 0 8
78696: PUSH
78697: FOR_IN
78698: IFFALSE 78767
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
78700: LD_VAR 0 6
78704: PPUSH
78705: CALL_OW 313
78709: PUSH
78710: LD_INT 6
78712: LESS
78713: PUSH
78714: LD_VAR 0 6
78718: PPUSH
78719: CALL_OW 266
78723: PUSH
78724: LD_INT 31
78726: PUSH
78727: LD_INT 32
78729: PUSH
78730: EMPTY
78731: LIST
78732: LIST
78733: IN
78734: NOT
78735: AND
78736: PUSH
78737: LD_VAR 0 6
78741: PPUSH
78742: CALL_OW 313
78746: PUSH
78747: LD_INT 0
78749: EQUAL
78750: OR
78751: IFFALSE 78765
// begin j := i ;
78753: LD_ADDR_VAR 0 7
78757: PUSH
78758: LD_VAR 0 6
78762: ST_TO_ADDR
// break ;
78763: GO 78767
// end ; end ;
78765: GO 78697
78767: POP
78768: POP
// if j then
78769: LD_VAR 0 7
78773: IFFALSE 78791
// ComEnterUnit ( unit , j ) else
78775: LD_VAR 0 3
78779: PPUSH
78780: LD_VAR 0 7
78784: PPUSH
78785: CALL_OW 120
78789: GO 78894
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
78791: LD_ADDR_VAR 0 10
78795: PUSH
78796: LD_VAR 0 2
78800: PPUSH
78801: LD_INT 2
78803: PUSH
78804: LD_INT 30
78806: PUSH
78807: LD_INT 0
78809: PUSH
78810: EMPTY
78811: LIST
78812: LIST
78813: PUSH
78814: LD_INT 30
78816: PUSH
78817: LD_INT 1
78819: PUSH
78820: EMPTY
78821: LIST
78822: LIST
78823: PUSH
78824: EMPTY
78825: LIST
78826: LIST
78827: LIST
78828: PPUSH
78829: CALL_OW 72
78833: ST_TO_ADDR
// if depot then
78834: LD_VAR 0 10
78838: IFFALSE 78894
// begin depot := NearestUnitToUnit ( depot , unit ) ;
78840: LD_ADDR_VAR 0 10
78844: PUSH
78845: LD_VAR 0 10
78849: PPUSH
78850: LD_VAR 0 3
78854: PPUSH
78855: CALL_OW 74
78859: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
78860: LD_VAR 0 3
78864: PPUSH
78865: LD_VAR 0 10
78869: PPUSH
78870: CALL_OW 296
78874: PUSH
78875: LD_INT 10
78877: GREATER
78878: IFFALSE 78894
// ComStandNearbyBuilding ( unit , depot ) ;
78880: LD_VAR 0 3
78884: PPUSH
78885: LD_VAR 0 10
78889: PPUSH
78890: CALL 20908 0 2
// end ; end ; end ;
78894: LD_VAR 0 5
78898: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
78899: LD_INT 0
78901: PPUSH
78902: PPUSH
78903: PPUSH
78904: PPUSH
// if not mc_bases then
78905: LD_EXP 46
78909: NOT
78910: IFFALSE 78914
// exit ;
78912: GO 79153
// for i = 1 to mc_bases do
78914: LD_ADDR_VAR 0 2
78918: PUSH
78919: DOUBLE
78920: LD_INT 1
78922: DEC
78923: ST_TO_ADDR
78924: LD_EXP 46
78928: PUSH
78929: FOR_TO
78930: IFFALSE 79151
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
78932: LD_ADDR_VAR 0 4
78936: PUSH
78937: LD_EXP 46
78941: PUSH
78942: LD_VAR 0 2
78946: ARRAY
78947: PPUSH
78948: LD_INT 21
78950: PUSH
78951: LD_INT 1
78953: PUSH
78954: EMPTY
78955: LIST
78956: LIST
78957: PPUSH
78958: CALL_OW 72
78962: PUSH
78963: LD_EXP 75
78967: PUSH
78968: LD_VAR 0 2
78972: ARRAY
78973: UNION
78974: ST_TO_ADDR
// if not tmp then
78975: LD_VAR 0 4
78979: NOT
78980: IFFALSE 78984
// continue ;
78982: GO 78929
// for j in tmp do
78984: LD_ADDR_VAR 0 3
78988: PUSH
78989: LD_VAR 0 4
78993: PUSH
78994: FOR_IN
78995: IFFALSE 79147
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
78997: LD_VAR 0 3
79001: PPUSH
79002: CALL_OW 110
79006: NOT
79007: PUSH
79008: LD_VAR 0 3
79012: PPUSH
79013: CALL_OW 314
79017: NOT
79018: AND
79019: PUSH
79020: LD_VAR 0 3
79024: PPUSH
79025: CALL_OW 311
79029: NOT
79030: AND
79031: PUSH
79032: LD_VAR 0 3
79036: PPUSH
79037: CALL_OW 310
79041: NOT
79042: AND
79043: PUSH
79044: LD_VAR 0 3
79048: PUSH
79049: LD_EXP 49
79053: PUSH
79054: LD_VAR 0 2
79058: ARRAY
79059: PUSH
79060: LD_INT 1
79062: ARRAY
79063: IN
79064: NOT
79065: AND
79066: PUSH
79067: LD_VAR 0 3
79071: PUSH
79072: LD_EXP 49
79076: PUSH
79077: LD_VAR 0 2
79081: ARRAY
79082: PUSH
79083: LD_INT 2
79085: ARRAY
79086: IN
79087: NOT
79088: AND
79089: PUSH
79090: LD_VAR 0 3
79094: PUSH
79095: LD_EXP 58
79099: PUSH
79100: LD_VAR 0 2
79104: ARRAY
79105: IN
79106: NOT
79107: AND
79108: IFFALSE 79145
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
79110: LD_VAR 0 2
79114: PPUSH
79115: LD_EXP 46
79119: PUSH
79120: LD_VAR 0 2
79124: ARRAY
79125: PPUSH
79126: LD_VAR 0 3
79130: PPUSH
79131: LD_VAR 0 3
79135: PPUSH
79136: CALL_OW 257
79140: PPUSH
79141: CALL 77917 0 4
// end ;
79145: GO 78994
79147: POP
79148: POP
// end ;
79149: GO 78929
79151: POP
79152: POP
// end ;
79153: LD_VAR 0 1
79157: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
79158: LD_INT 0
79160: PPUSH
79161: PPUSH
79162: PPUSH
79163: PPUSH
79164: PPUSH
79165: PPUSH
// if not mc_bases [ base ] then
79166: LD_EXP 46
79170: PUSH
79171: LD_VAR 0 1
79175: ARRAY
79176: NOT
79177: IFFALSE 79181
// exit ;
79179: GO 79363
// tmp := [ ] ;
79181: LD_ADDR_VAR 0 6
79185: PUSH
79186: EMPTY
79187: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
79188: LD_ADDR_VAR 0 7
79192: PUSH
79193: LD_VAR 0 3
79197: PPUSH
79198: LD_INT 0
79200: PPUSH
79201: CALL_OW 517
79205: ST_TO_ADDR
// if not list then
79206: LD_VAR 0 7
79210: NOT
79211: IFFALSE 79215
// exit ;
79213: GO 79363
// for i = 1 to amount do
79215: LD_ADDR_VAR 0 5
79219: PUSH
79220: DOUBLE
79221: LD_INT 1
79223: DEC
79224: ST_TO_ADDR
79225: LD_VAR 0 2
79229: PUSH
79230: FOR_TO
79231: IFFALSE 79311
// begin x := rand ( 1 , list [ 1 ] ) ;
79233: LD_ADDR_VAR 0 8
79237: PUSH
79238: LD_INT 1
79240: PPUSH
79241: LD_VAR 0 7
79245: PUSH
79246: LD_INT 1
79248: ARRAY
79249: PPUSH
79250: CALL_OW 12
79254: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
79255: LD_ADDR_VAR 0 6
79259: PUSH
79260: LD_VAR 0 6
79264: PPUSH
79265: LD_VAR 0 5
79269: PPUSH
79270: LD_VAR 0 7
79274: PUSH
79275: LD_INT 1
79277: ARRAY
79278: PUSH
79279: LD_VAR 0 8
79283: ARRAY
79284: PUSH
79285: LD_VAR 0 7
79289: PUSH
79290: LD_INT 2
79292: ARRAY
79293: PUSH
79294: LD_VAR 0 8
79298: ARRAY
79299: PUSH
79300: EMPTY
79301: LIST
79302: LIST
79303: PPUSH
79304: CALL_OW 1
79308: ST_TO_ADDR
// end ;
79309: GO 79230
79311: POP
79312: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
79313: LD_ADDR_EXP 59
79317: PUSH
79318: LD_EXP 59
79322: PPUSH
79323: LD_VAR 0 1
79327: PPUSH
79328: LD_VAR 0 6
79332: PPUSH
79333: CALL_OW 1
79337: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
79338: LD_ADDR_EXP 61
79342: PUSH
79343: LD_EXP 61
79347: PPUSH
79348: LD_VAR 0 1
79352: PPUSH
79353: LD_VAR 0 3
79357: PPUSH
79358: CALL_OW 1
79362: ST_TO_ADDR
// end ;
79363: LD_VAR 0 4
79367: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
79368: LD_INT 0
79370: PPUSH
// if not mc_bases [ base ] then
79371: LD_EXP 46
79375: PUSH
79376: LD_VAR 0 1
79380: ARRAY
79381: NOT
79382: IFFALSE 79386
// exit ;
79384: GO 79411
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
79386: LD_ADDR_EXP 51
79390: PUSH
79391: LD_EXP 51
79395: PPUSH
79396: LD_VAR 0 1
79400: PPUSH
79401: LD_VAR 0 2
79405: PPUSH
79406: CALL_OW 1
79410: ST_TO_ADDR
// end ;
79411: LD_VAR 0 3
79415: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
79416: LD_INT 0
79418: PPUSH
// if not mc_bases [ base ] then
79419: LD_EXP 46
79423: PUSH
79424: LD_VAR 0 1
79428: ARRAY
79429: NOT
79430: IFFALSE 79434
// exit ;
79432: GO 79471
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union list ) ;
79434: LD_ADDR_EXP 51
79438: PUSH
79439: LD_EXP 51
79443: PPUSH
79444: LD_VAR 0 1
79448: PPUSH
79449: LD_EXP 51
79453: PUSH
79454: LD_VAR 0 1
79458: ARRAY
79459: PUSH
79460: LD_VAR 0 2
79464: UNION
79465: PPUSH
79466: CALL_OW 1
79470: ST_TO_ADDR
// end ;
79471: LD_VAR 0 3
79475: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
79476: LD_INT 0
79478: PPUSH
// if not mc_bases [ base ] then
79479: LD_EXP 46
79483: PUSH
79484: LD_VAR 0 1
79488: ARRAY
79489: NOT
79490: IFFALSE 79494
// exit ;
79492: GO 79519
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
79494: LD_ADDR_EXP 67
79498: PUSH
79499: LD_EXP 67
79503: PPUSH
79504: LD_VAR 0 1
79508: PPUSH
79509: LD_VAR 0 2
79513: PPUSH
79514: CALL_OW 1
79518: ST_TO_ADDR
// end ;
79519: LD_VAR 0 3
79523: RET
// export function MC_InsertProduceList ( base , components ) ; begin
79524: LD_INT 0
79526: PPUSH
// if not mc_bases [ base ] then
79527: LD_EXP 46
79531: PUSH
79532: LD_VAR 0 1
79536: ARRAY
79537: NOT
79538: IFFALSE 79542
// exit ;
79540: GO 79579
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ components ) ;
79542: LD_ADDR_EXP 67
79546: PUSH
79547: LD_EXP 67
79551: PPUSH
79552: LD_VAR 0 1
79556: PPUSH
79557: LD_EXP 67
79561: PUSH
79562: LD_VAR 0 1
79566: ARRAY
79567: PUSH
79568: LD_VAR 0 2
79572: ADD
79573: PPUSH
79574: CALL_OW 1
79578: ST_TO_ADDR
// end ;
79579: LD_VAR 0 3
79583: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
79584: LD_INT 0
79586: PPUSH
// if not mc_bases [ base ] then
79587: LD_EXP 46
79591: PUSH
79592: LD_VAR 0 1
79596: ARRAY
79597: NOT
79598: IFFALSE 79602
// exit ;
79600: GO 79656
// mc_defender := Replace ( mc_defender , base , deflist ) ;
79602: LD_ADDR_EXP 68
79606: PUSH
79607: LD_EXP 68
79611: PPUSH
79612: LD_VAR 0 1
79616: PPUSH
79617: LD_VAR 0 2
79621: PPUSH
79622: CALL_OW 1
79626: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
79627: LD_ADDR_EXP 57
79631: PUSH
79632: LD_EXP 57
79636: PPUSH
79637: LD_VAR 0 1
79641: PPUSH
79642: LD_VAR 0 2
79646: PUSH
79647: LD_INT 0
79649: PLUS
79650: PPUSH
79651: CALL_OW 1
79655: ST_TO_ADDR
// end ;
79656: LD_VAR 0 3
79660: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
79661: LD_INT 0
79663: PPUSH
// if not mc_bases [ base ] then
79664: LD_EXP 46
79668: PUSH
79669: LD_VAR 0 1
79673: ARRAY
79674: NOT
79675: IFFALSE 79679
// exit ;
79677: GO 79704
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
79679: LD_ADDR_EXP 57
79683: PUSH
79684: LD_EXP 57
79688: PPUSH
79689: LD_VAR 0 1
79693: PPUSH
79694: LD_VAR 0 2
79698: PPUSH
79699: CALL_OW 1
79703: ST_TO_ADDR
// end ;
79704: LD_VAR 0 3
79708: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
79709: LD_INT 0
79711: PPUSH
79712: PPUSH
79713: PPUSH
79714: PPUSH
// if not mc_bases [ base ] then
79715: LD_EXP 46
79719: PUSH
79720: LD_VAR 0 1
79724: ARRAY
79725: NOT
79726: IFFALSE 79730
// exit ;
79728: GO 79795
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
79730: LD_ADDR_EXP 66
79734: PUSH
79735: LD_EXP 66
79739: PPUSH
79740: LD_VAR 0 1
79744: PUSH
79745: LD_EXP 66
79749: PUSH
79750: LD_VAR 0 1
79754: ARRAY
79755: PUSH
79756: LD_INT 1
79758: PLUS
79759: PUSH
79760: EMPTY
79761: LIST
79762: LIST
79763: PPUSH
79764: LD_VAR 0 1
79768: PUSH
79769: LD_VAR 0 2
79773: PUSH
79774: LD_VAR 0 3
79778: PUSH
79779: LD_VAR 0 4
79783: PUSH
79784: EMPTY
79785: LIST
79786: LIST
79787: LIST
79788: LIST
79789: PPUSH
79790: CALL 24294 0 3
79794: ST_TO_ADDR
// end ;
79795: LD_VAR 0 5
79799: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
79800: LD_INT 0
79802: PPUSH
// if not mc_bases [ base ] then
79803: LD_EXP 46
79807: PUSH
79808: LD_VAR 0 1
79812: ARRAY
79813: NOT
79814: IFFALSE 79818
// exit ;
79816: GO 79843
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
79818: LD_ADDR_EXP 83
79822: PUSH
79823: LD_EXP 83
79827: PPUSH
79828: LD_VAR 0 1
79832: PPUSH
79833: LD_VAR 0 2
79837: PPUSH
79838: CALL_OW 1
79842: ST_TO_ADDR
// end ;
79843: LD_VAR 0 3
79847: RET
// export function MC_GetMinesField ( base ) ; begin
79848: LD_INT 0
79850: PPUSH
// result := mc_mines [ base ] ;
79851: LD_ADDR_VAR 0 2
79855: PUSH
79856: LD_EXP 59
79860: PUSH
79861: LD_VAR 0 1
79865: ARRAY
79866: ST_TO_ADDR
// end ;
79867: LD_VAR 0 2
79871: RET
// export function MC_GetProduceList ( base ) ; begin
79872: LD_INT 0
79874: PPUSH
// result := mc_produce [ base ] ;
79875: LD_ADDR_VAR 0 2
79879: PUSH
79880: LD_EXP 67
79884: PUSH
79885: LD_VAR 0 1
79889: ARRAY
79890: ST_TO_ADDR
// end ;
79891: LD_VAR 0 2
79895: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
79896: LD_INT 0
79898: PPUSH
79899: PPUSH
// if not mc_bases then
79900: LD_EXP 46
79904: NOT
79905: IFFALSE 79909
// exit ;
79907: GO 79974
// if mc_bases [ base ] then
79909: LD_EXP 46
79913: PUSH
79914: LD_VAR 0 1
79918: ARRAY
79919: IFFALSE 79974
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
79921: LD_ADDR_VAR 0 3
79925: PUSH
79926: LD_EXP 46
79930: PUSH
79931: LD_VAR 0 1
79935: ARRAY
79936: PPUSH
79937: LD_INT 30
79939: PUSH
79940: LD_VAR 0 2
79944: PUSH
79945: EMPTY
79946: LIST
79947: LIST
79948: PPUSH
79949: CALL_OW 72
79953: ST_TO_ADDR
// if result then
79954: LD_VAR 0 3
79958: IFFALSE 79974
// result := result [ 1 ] ;
79960: LD_ADDR_VAR 0 3
79964: PUSH
79965: LD_VAR 0 3
79969: PUSH
79970: LD_INT 1
79972: ARRAY
79973: ST_TO_ADDR
// end ; end ;
79974: LD_VAR 0 3
79978: RET
// export function MC_GetBuildings ( base , btype ) ; var i ; begin
79979: LD_INT 0
79981: PPUSH
79982: PPUSH
// if not mc_bases then
79983: LD_EXP 46
79987: NOT
79988: IFFALSE 79992
// exit ;
79990: GO 80037
// if mc_bases [ base ] then
79992: LD_EXP 46
79996: PUSH
79997: LD_VAR 0 1
80001: ARRAY
80002: IFFALSE 80037
// result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
80004: LD_ADDR_VAR 0 3
80008: PUSH
80009: LD_EXP 46
80013: PUSH
80014: LD_VAR 0 1
80018: ARRAY
80019: PPUSH
80020: LD_INT 30
80022: PUSH
80023: LD_VAR 0 2
80027: PUSH
80028: EMPTY
80029: LIST
80030: LIST
80031: PPUSH
80032: CALL_OW 72
80036: ST_TO_ADDR
// end ;
80037: LD_VAR 0 3
80041: RET
// export function MC_SetTame ( base , area ) ; begin
80042: LD_INT 0
80044: PPUSH
// if not mc_bases or not base then
80045: LD_EXP 46
80049: NOT
80050: PUSH
80051: LD_VAR 0 1
80055: NOT
80056: OR
80057: IFFALSE 80061
// exit ;
80059: GO 80086
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
80061: LD_ADDR_EXP 74
80065: PUSH
80066: LD_EXP 74
80070: PPUSH
80071: LD_VAR 0 1
80075: PPUSH
80076: LD_VAR 0 2
80080: PPUSH
80081: CALL_OW 1
80085: ST_TO_ADDR
// end ;
80086: LD_VAR 0 3
80090: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
80091: LD_INT 0
80093: PPUSH
80094: PPUSH
// if not mc_bases or not base then
80095: LD_EXP 46
80099: NOT
80100: PUSH
80101: LD_VAR 0 1
80105: NOT
80106: OR
80107: IFFALSE 80111
// exit ;
80109: GO 80213
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
80111: LD_ADDR_VAR 0 4
80115: PUSH
80116: LD_EXP 46
80120: PUSH
80121: LD_VAR 0 1
80125: ARRAY
80126: PPUSH
80127: LD_INT 30
80129: PUSH
80130: LD_VAR 0 2
80134: PUSH
80135: EMPTY
80136: LIST
80137: LIST
80138: PPUSH
80139: CALL_OW 72
80143: ST_TO_ADDR
// if not tmp then
80144: LD_VAR 0 4
80148: NOT
80149: IFFALSE 80153
// exit ;
80151: GO 80213
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
80153: LD_ADDR_EXP 78
80157: PUSH
80158: LD_EXP 78
80162: PPUSH
80163: LD_VAR 0 1
80167: PPUSH
80168: LD_EXP 78
80172: PUSH
80173: LD_VAR 0 1
80177: ARRAY
80178: PPUSH
80179: LD_EXP 78
80183: PUSH
80184: LD_VAR 0 1
80188: ARRAY
80189: PUSH
80190: LD_INT 1
80192: PLUS
80193: PPUSH
80194: LD_VAR 0 4
80198: PUSH
80199: LD_INT 1
80201: ARRAY
80202: PPUSH
80203: CALL_OW 2
80207: PPUSH
80208: CALL_OW 1
80212: ST_TO_ADDR
// end ;
80213: LD_VAR 0 3
80217: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
80218: LD_INT 0
80220: PPUSH
80221: PPUSH
// if not mc_bases or not base or not kinds then
80222: LD_EXP 46
80226: NOT
80227: PUSH
80228: LD_VAR 0 1
80232: NOT
80233: OR
80234: PUSH
80235: LD_VAR 0 2
80239: NOT
80240: OR
80241: IFFALSE 80245
// exit ;
80243: GO 80306
// for i in kinds do
80245: LD_ADDR_VAR 0 4
80249: PUSH
80250: LD_VAR 0 2
80254: PUSH
80255: FOR_IN
80256: IFFALSE 80304
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
80258: LD_ADDR_EXP 80
80262: PUSH
80263: LD_EXP 80
80267: PPUSH
80268: LD_VAR 0 1
80272: PUSH
80273: LD_EXP 80
80277: PUSH
80278: LD_VAR 0 1
80282: ARRAY
80283: PUSH
80284: LD_INT 1
80286: PLUS
80287: PUSH
80288: EMPTY
80289: LIST
80290: LIST
80291: PPUSH
80292: LD_VAR 0 4
80296: PPUSH
80297: CALL 24294 0 3
80301: ST_TO_ADDR
80302: GO 80255
80304: POP
80305: POP
// end ;
80306: LD_VAR 0 3
80310: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
80311: LD_INT 0
80313: PPUSH
// if not mc_bases or not base or not areas then
80314: LD_EXP 46
80318: NOT
80319: PUSH
80320: LD_VAR 0 1
80324: NOT
80325: OR
80326: PUSH
80327: LD_VAR 0 2
80331: NOT
80332: OR
80333: IFFALSE 80337
// exit ;
80335: GO 80362
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
80337: LD_ADDR_EXP 64
80341: PUSH
80342: LD_EXP 64
80346: PPUSH
80347: LD_VAR 0 1
80351: PPUSH
80352: LD_VAR 0 2
80356: PPUSH
80357: CALL_OW 1
80361: ST_TO_ADDR
// end ;
80362: LD_VAR 0 3
80366: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
80367: LD_INT 0
80369: PPUSH
// if not mc_bases or not base or not teleports_exit then
80370: LD_EXP 46
80374: NOT
80375: PUSH
80376: LD_VAR 0 1
80380: NOT
80381: OR
80382: PUSH
80383: LD_VAR 0 2
80387: NOT
80388: OR
80389: IFFALSE 80393
// exit ;
80391: GO 80418
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
80393: LD_ADDR_EXP 81
80397: PUSH
80398: LD_EXP 81
80402: PPUSH
80403: LD_VAR 0 1
80407: PPUSH
80408: LD_VAR 0 2
80412: PPUSH
80413: CALL_OW 1
80417: ST_TO_ADDR
// end ;
80418: LD_VAR 0 3
80422: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
80423: LD_INT 0
80425: PPUSH
80426: PPUSH
80427: PPUSH
// if not mc_bases or not base or not ext_list then
80428: LD_EXP 46
80432: NOT
80433: PUSH
80434: LD_VAR 0 1
80438: NOT
80439: OR
80440: PUSH
80441: LD_VAR 0 5
80445: NOT
80446: OR
80447: IFFALSE 80451
// exit ;
80449: GO 80624
// tmp := GetFacExtXYD ( x , y , d ) ;
80451: LD_ADDR_VAR 0 8
80455: PUSH
80456: LD_VAR 0 2
80460: PPUSH
80461: LD_VAR 0 3
80465: PPUSH
80466: LD_VAR 0 4
80470: PPUSH
80471: CALL 52973 0 3
80475: ST_TO_ADDR
// if not tmp then
80476: LD_VAR 0 8
80480: NOT
80481: IFFALSE 80485
// exit ;
80483: GO 80624
// for i in tmp do
80485: LD_ADDR_VAR 0 7
80489: PUSH
80490: LD_VAR 0 8
80494: PUSH
80495: FOR_IN
80496: IFFALSE 80622
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
80498: LD_ADDR_EXP 51
80502: PUSH
80503: LD_EXP 51
80507: PPUSH
80508: LD_VAR 0 1
80512: PPUSH
80513: LD_EXP 51
80517: PUSH
80518: LD_VAR 0 1
80522: ARRAY
80523: PPUSH
80524: LD_EXP 51
80528: PUSH
80529: LD_VAR 0 1
80533: ARRAY
80534: PUSH
80535: LD_INT 1
80537: PLUS
80538: PPUSH
80539: LD_VAR 0 5
80543: PUSH
80544: LD_INT 1
80546: ARRAY
80547: PUSH
80548: LD_VAR 0 7
80552: PUSH
80553: LD_INT 1
80555: ARRAY
80556: PUSH
80557: LD_VAR 0 7
80561: PUSH
80562: LD_INT 2
80564: ARRAY
80565: PUSH
80566: LD_VAR 0 7
80570: PUSH
80571: LD_INT 3
80573: ARRAY
80574: PUSH
80575: EMPTY
80576: LIST
80577: LIST
80578: LIST
80579: LIST
80580: PPUSH
80581: CALL_OW 2
80585: PPUSH
80586: CALL_OW 1
80590: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
80591: LD_ADDR_VAR 0 5
80595: PUSH
80596: LD_VAR 0 5
80600: PPUSH
80601: LD_INT 1
80603: PPUSH
80604: CALL_OW 3
80608: ST_TO_ADDR
// if not ext_list then
80609: LD_VAR 0 5
80613: NOT
80614: IFFALSE 80620
// exit ;
80616: POP
80617: POP
80618: GO 80624
// end ;
80620: GO 80495
80622: POP
80623: POP
// end ;
80624: LD_VAR 0 6
80628: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
80629: LD_INT 0
80631: PPUSH
// if not mc_bases or not base or not weapon_list then
80632: LD_EXP 46
80636: NOT
80637: PUSH
80638: LD_VAR 0 1
80642: NOT
80643: OR
80644: PUSH
80645: LD_VAR 0 2
80649: NOT
80650: OR
80651: IFFALSE 80655
// exit ;
80653: GO 80680
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
80655: LD_ADDR_EXP 85
80659: PUSH
80660: LD_EXP 85
80664: PPUSH
80665: LD_VAR 0 1
80669: PPUSH
80670: LD_VAR 0 2
80674: PPUSH
80675: CALL_OW 1
80679: ST_TO_ADDR
// end ;
80680: LD_VAR 0 3
80684: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
80685: LD_INT 0
80687: PPUSH
// if not mc_bases or not base or not tech_list then
80688: LD_EXP 46
80692: NOT
80693: PUSH
80694: LD_VAR 0 1
80698: NOT
80699: OR
80700: PUSH
80701: LD_VAR 0 2
80705: NOT
80706: OR
80707: IFFALSE 80711
// exit ;
80709: GO 80736
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
80711: LD_ADDR_EXP 73
80715: PUSH
80716: LD_EXP 73
80720: PPUSH
80721: LD_VAR 0 1
80725: PPUSH
80726: LD_VAR 0 2
80730: PPUSH
80731: CALL_OW 1
80735: ST_TO_ADDR
// end ;
80736: LD_VAR 0 3
80740: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
80741: LD_INT 0
80743: PPUSH
// if not mc_bases or not parking_area or not base then
80744: LD_EXP 46
80748: NOT
80749: PUSH
80750: LD_VAR 0 2
80754: NOT
80755: OR
80756: PUSH
80757: LD_VAR 0 1
80761: NOT
80762: OR
80763: IFFALSE 80767
// exit ;
80765: GO 80792
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
80767: LD_ADDR_EXP 70
80771: PUSH
80772: LD_EXP 70
80776: PPUSH
80777: LD_VAR 0 1
80781: PPUSH
80782: LD_VAR 0 2
80786: PPUSH
80787: CALL_OW 1
80791: ST_TO_ADDR
// end ;
80792: LD_VAR 0 3
80796: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
80797: LD_INT 0
80799: PPUSH
// if not mc_bases or not base or not scan_area then
80800: LD_EXP 46
80804: NOT
80805: PUSH
80806: LD_VAR 0 1
80810: NOT
80811: OR
80812: PUSH
80813: LD_VAR 0 2
80817: NOT
80818: OR
80819: IFFALSE 80823
// exit ;
80821: GO 80848
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
80823: LD_ADDR_EXP 71
80827: PUSH
80828: LD_EXP 71
80832: PPUSH
80833: LD_VAR 0 1
80837: PPUSH
80838: LD_VAR 0 2
80842: PPUSH
80843: CALL_OW 1
80847: ST_TO_ADDR
// end ;
80848: LD_VAR 0 3
80852: RET
// export function MC_NotTameApeman ( base ) ; var ape_techs ; begin
80853: LD_INT 0
80855: PPUSH
80856: PPUSH
// if not mc_bases or not base then
80857: LD_EXP 46
80861: NOT
80862: PUSH
80863: LD_VAR 0 1
80867: NOT
80868: OR
80869: IFFALSE 80873
// exit ;
80871: GO 80937
// ape_techs := [ 1 , 2 , 3 , 4 , 11 ] ;
80873: LD_ADDR_VAR 0 3
80877: PUSH
80878: LD_INT 1
80880: PUSH
80881: LD_INT 2
80883: PUSH
80884: LD_INT 3
80886: PUSH
80887: LD_INT 4
80889: PUSH
80890: LD_INT 11
80892: PUSH
80893: EMPTY
80894: LIST
80895: LIST
80896: LIST
80897: LIST
80898: LIST
80899: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , mc_tech [ base ] diff ape_techs ) ;
80900: LD_ADDR_EXP 73
80904: PUSH
80905: LD_EXP 73
80909: PPUSH
80910: LD_VAR 0 1
80914: PPUSH
80915: LD_EXP 73
80919: PUSH
80920: LD_VAR 0 1
80924: ARRAY
80925: PUSH
80926: LD_VAR 0 3
80930: DIFF
80931: PPUSH
80932: CALL_OW 1
80936: ST_TO_ADDR
// end ;
80937: LD_VAR 0 2
80941: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
80942: LD_INT 0
80944: PPUSH
// result := mc_vehicles [ base ] ;
80945: LD_ADDR_VAR 0 3
80949: PUSH
80950: LD_EXP 65
80954: PUSH
80955: LD_VAR 0 1
80959: ARRAY
80960: ST_TO_ADDR
// if onlyCombat then
80961: LD_VAR 0 2
80965: IFFALSE 81130
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] , [ f_weapon , ru_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ) ;
80967: LD_ADDR_VAR 0 3
80971: PUSH
80972: LD_VAR 0 3
80976: PUSH
80977: LD_VAR 0 3
80981: PPUSH
80982: LD_INT 2
80984: PUSH
80985: LD_INT 34
80987: PUSH
80988: LD_INT 12
80990: PUSH
80991: EMPTY
80992: LIST
80993: LIST
80994: PUSH
80995: LD_INT 34
80997: PUSH
80998: LD_INT 51
81000: PUSH
81001: EMPTY
81002: LIST
81003: LIST
81004: PUSH
81005: LD_INT 34
81007: PUSH
81008: LD_EXP 30
81012: PUSH
81013: EMPTY
81014: LIST
81015: LIST
81016: PUSH
81017: LD_INT 34
81019: PUSH
81020: LD_INT 32
81022: PUSH
81023: EMPTY
81024: LIST
81025: LIST
81026: PUSH
81027: LD_INT 34
81029: PUSH
81030: LD_INT 13
81032: PUSH
81033: EMPTY
81034: LIST
81035: LIST
81036: PUSH
81037: LD_INT 34
81039: PUSH
81040: LD_INT 52
81042: PUSH
81043: EMPTY
81044: LIST
81045: LIST
81046: PUSH
81047: LD_INT 34
81049: PUSH
81050: LD_INT 14
81052: PUSH
81053: EMPTY
81054: LIST
81055: LIST
81056: PUSH
81057: LD_INT 34
81059: PUSH
81060: LD_INT 53
81062: PUSH
81063: EMPTY
81064: LIST
81065: LIST
81066: PUSH
81067: LD_INT 34
81069: PUSH
81070: LD_EXP 29
81074: PUSH
81075: EMPTY
81076: LIST
81077: LIST
81078: PUSH
81079: LD_INT 34
81081: PUSH
81082: LD_INT 31
81084: PUSH
81085: EMPTY
81086: LIST
81087: LIST
81088: PUSH
81089: LD_INT 34
81091: PUSH
81092: LD_INT 48
81094: PUSH
81095: EMPTY
81096: LIST
81097: LIST
81098: PUSH
81099: LD_INT 34
81101: PUSH
81102: LD_INT 8
81104: PUSH
81105: EMPTY
81106: LIST
81107: LIST
81108: PUSH
81109: EMPTY
81110: LIST
81111: LIST
81112: LIST
81113: LIST
81114: LIST
81115: LIST
81116: LIST
81117: LIST
81118: LIST
81119: LIST
81120: LIST
81121: LIST
81122: LIST
81123: PPUSH
81124: CALL_OW 72
81128: DIFF
81129: ST_TO_ADDR
// end ; end_of_file
81130: LD_VAR 0 3
81134: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
81135: LD_INT 0
81137: PPUSH
81138: PPUSH
81139: PPUSH
// if not mc_bases or not skirmish then
81140: LD_EXP 46
81144: NOT
81145: PUSH
81146: LD_EXP 44
81150: NOT
81151: OR
81152: IFFALSE 81156
// exit ;
81154: GO 81321
// for i = 1 to mc_bases do
81156: LD_ADDR_VAR 0 4
81160: PUSH
81161: DOUBLE
81162: LD_INT 1
81164: DEC
81165: ST_TO_ADDR
81166: LD_EXP 46
81170: PUSH
81171: FOR_TO
81172: IFFALSE 81319
// begin if sci in mc_bases [ i ] then
81174: LD_VAR 0 2
81178: PUSH
81179: LD_EXP 46
81183: PUSH
81184: LD_VAR 0 4
81188: ARRAY
81189: IN
81190: IFFALSE 81317
// begin mc_ape := ReplaceIn ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
81192: LD_ADDR_EXP 75
81196: PUSH
81197: LD_EXP 75
81201: PPUSH
81202: LD_VAR 0 4
81206: PUSH
81207: LD_EXP 75
81211: PUSH
81212: LD_VAR 0 4
81216: ARRAY
81217: PUSH
81218: LD_INT 1
81220: PLUS
81221: PUSH
81222: EMPTY
81223: LIST
81224: LIST
81225: PPUSH
81226: LD_VAR 0 1
81230: PPUSH
81231: CALL 24294 0 3
81235: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
81236: LD_ADDR_VAR 0 5
81240: PUSH
81241: LD_EXP 46
81245: PUSH
81246: LD_VAR 0 4
81250: ARRAY
81251: PPUSH
81252: LD_INT 2
81254: PUSH
81255: LD_INT 30
81257: PUSH
81258: LD_INT 0
81260: PUSH
81261: EMPTY
81262: LIST
81263: LIST
81264: PUSH
81265: LD_INT 30
81267: PUSH
81268: LD_INT 1
81270: PUSH
81271: EMPTY
81272: LIST
81273: LIST
81274: PUSH
81275: EMPTY
81276: LIST
81277: LIST
81278: LIST
81279: PPUSH
81280: CALL_OW 72
81284: PPUSH
81285: LD_VAR 0 1
81289: PPUSH
81290: CALL_OW 74
81294: ST_TO_ADDR
// if tmp then
81295: LD_VAR 0 5
81299: IFFALSE 81315
// ComStandNearbyBuilding ( ape , tmp ) ;
81301: LD_VAR 0 1
81305: PPUSH
81306: LD_VAR 0 5
81310: PPUSH
81311: CALL 20908 0 2
// break ;
81315: GO 81319
// end ; end ;
81317: GO 81171
81319: POP
81320: POP
// end ;
81321: LD_VAR 0 3
81325: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
81326: LD_INT 0
81328: PPUSH
81329: PPUSH
81330: PPUSH
// if not mc_bases or not skirmish then
81331: LD_EXP 46
81335: NOT
81336: PUSH
81337: LD_EXP 44
81341: NOT
81342: OR
81343: IFFALSE 81347
// exit ;
81345: GO 81436
// for i = 1 to mc_bases do
81347: LD_ADDR_VAR 0 4
81351: PUSH
81352: DOUBLE
81353: LD_INT 1
81355: DEC
81356: ST_TO_ADDR
81357: LD_EXP 46
81361: PUSH
81362: FOR_TO
81363: IFFALSE 81434
// begin if building in mc_busy_turret_list [ i ] then
81365: LD_VAR 0 1
81369: PUSH
81370: LD_EXP 56
81374: PUSH
81375: LD_VAR 0 4
81379: ARRAY
81380: IN
81381: IFFALSE 81432
// begin tmp := mc_busy_turret_list [ i ] diff building ;
81383: LD_ADDR_VAR 0 5
81387: PUSH
81388: LD_EXP 56
81392: PUSH
81393: LD_VAR 0 4
81397: ARRAY
81398: PUSH
81399: LD_VAR 0 1
81403: DIFF
81404: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
81405: LD_ADDR_EXP 56
81409: PUSH
81410: LD_EXP 56
81414: PPUSH
81415: LD_VAR 0 4
81419: PPUSH
81420: LD_VAR 0 5
81424: PPUSH
81425: CALL_OW 1
81429: ST_TO_ADDR
// break ;
81430: GO 81434
// end ; end ;
81432: GO 81362
81434: POP
81435: POP
// end ;
81436: LD_VAR 0 3
81440: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
81441: LD_INT 0
81443: PPUSH
81444: PPUSH
81445: PPUSH
// if not mc_bases or not skirmish then
81446: LD_EXP 46
81450: NOT
81451: PUSH
81452: LD_EXP 44
81456: NOT
81457: OR
81458: IFFALSE 81462
// exit ;
81460: GO 81661
// for i = 1 to mc_bases do
81462: LD_ADDR_VAR 0 5
81466: PUSH
81467: DOUBLE
81468: LD_INT 1
81470: DEC
81471: ST_TO_ADDR
81472: LD_EXP 46
81476: PUSH
81477: FOR_TO
81478: IFFALSE 81659
// if building in mc_bases [ i ] then
81480: LD_VAR 0 1
81484: PUSH
81485: LD_EXP 46
81489: PUSH
81490: LD_VAR 0 5
81494: ARRAY
81495: IN
81496: IFFALSE 81657
// begin tmp := mc_bases [ i ] diff building ;
81498: LD_ADDR_VAR 0 6
81502: PUSH
81503: LD_EXP 46
81507: PUSH
81508: LD_VAR 0 5
81512: ARRAY
81513: PUSH
81514: LD_VAR 0 1
81518: DIFF
81519: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
81520: LD_ADDR_EXP 46
81524: PUSH
81525: LD_EXP 46
81529: PPUSH
81530: LD_VAR 0 5
81534: PPUSH
81535: LD_VAR 0 6
81539: PPUSH
81540: CALL_OW 1
81544: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
81545: LD_VAR 0 1
81549: PUSH
81550: LD_EXP 54
81554: PUSH
81555: LD_VAR 0 5
81559: ARRAY
81560: IN
81561: IFFALSE 81600
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
81563: LD_ADDR_EXP 54
81567: PUSH
81568: LD_EXP 54
81572: PPUSH
81573: LD_VAR 0 5
81577: PPUSH
81578: LD_EXP 54
81582: PUSH
81583: LD_VAR 0 5
81587: ARRAY
81588: PUSH
81589: LD_VAR 0 1
81593: DIFF
81594: PPUSH
81595: CALL_OW 1
81599: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
81600: LD_VAR 0 1
81604: PUSH
81605: LD_EXP 55
81609: PUSH
81610: LD_VAR 0 5
81614: ARRAY
81615: IN
81616: IFFALSE 81655
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
81618: LD_ADDR_EXP 55
81622: PUSH
81623: LD_EXP 55
81627: PPUSH
81628: LD_VAR 0 5
81632: PPUSH
81633: LD_EXP 55
81637: PUSH
81638: LD_VAR 0 5
81642: ARRAY
81643: PUSH
81644: LD_VAR 0 1
81648: DIFF
81649: PPUSH
81650: CALL_OW 1
81654: ST_TO_ADDR
// break ;
81655: GO 81659
// end ;
81657: GO 81477
81659: POP
81660: POP
// end ;
81661: LD_VAR 0 4
81665: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
81666: LD_INT 0
81668: PPUSH
81669: PPUSH
81670: PPUSH
// if not mc_bases or not skirmish or not side in mc_sides then
81671: LD_EXP 46
81675: NOT
81676: PUSH
81677: LD_EXP 44
81681: NOT
81682: OR
81683: PUSH
81684: LD_VAR 0 3
81688: PUSH
81689: LD_EXP 72
81693: IN
81694: NOT
81695: OR
81696: IFFALSE 81700
// exit ;
81698: GO 81823
// for i = 1 to mc_vehicles do
81700: LD_ADDR_VAR 0 6
81704: PUSH
81705: DOUBLE
81706: LD_INT 1
81708: DEC
81709: ST_TO_ADDR
81710: LD_EXP 65
81714: PUSH
81715: FOR_TO
81716: IFFALSE 81821
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
81718: LD_VAR 0 2
81722: PUSH
81723: LD_EXP 65
81727: PUSH
81728: LD_VAR 0 6
81732: ARRAY
81733: IN
81734: PUSH
81735: LD_VAR 0 1
81739: PUSH
81740: LD_EXP 65
81744: PUSH
81745: LD_VAR 0 6
81749: ARRAY
81750: IN
81751: OR
81752: IFFALSE 81819
// begin tmp := mc_vehicles [ i ] diff old ;
81754: LD_ADDR_VAR 0 7
81758: PUSH
81759: LD_EXP 65
81763: PUSH
81764: LD_VAR 0 6
81768: ARRAY
81769: PUSH
81770: LD_VAR 0 2
81774: DIFF
81775: ST_TO_ADDR
// tmp := tmp diff new ;
81776: LD_ADDR_VAR 0 7
81780: PUSH
81781: LD_VAR 0 7
81785: PUSH
81786: LD_VAR 0 1
81790: DIFF
81791: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
81792: LD_ADDR_EXP 65
81796: PUSH
81797: LD_EXP 65
81801: PPUSH
81802: LD_VAR 0 6
81806: PPUSH
81807: LD_VAR 0 7
81811: PPUSH
81812: CALL_OW 1
81816: ST_TO_ADDR
// break ;
81817: GO 81821
// end ;
81819: GO 81715
81821: POP
81822: POP
// end ;
81823: LD_VAR 0 5
81827: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
81828: LD_INT 0
81830: PPUSH
81831: PPUSH
81832: PPUSH
81833: PPUSH
// if not mc_bases or not skirmish then
81834: LD_EXP 46
81838: NOT
81839: PUSH
81840: LD_EXP 44
81844: NOT
81845: OR
81846: IFFALSE 81850
// exit ;
81848: GO 82227
// side := GetSide ( vehicle ) ;
81850: LD_ADDR_VAR 0 5
81854: PUSH
81855: LD_VAR 0 1
81859: PPUSH
81860: CALL_OW 255
81864: ST_TO_ADDR
// for i = 1 to mc_bases do
81865: LD_ADDR_VAR 0 4
81869: PUSH
81870: DOUBLE
81871: LD_INT 1
81873: DEC
81874: ST_TO_ADDR
81875: LD_EXP 46
81879: PUSH
81880: FOR_TO
81881: IFFALSE 82225
// begin if factory in mc_bases [ i ] then
81883: LD_VAR 0 2
81887: PUSH
81888: LD_EXP 46
81892: PUSH
81893: LD_VAR 0 4
81897: ARRAY
81898: IN
81899: IFFALSE 82223
// begin if mc_defender [ i ] < mc_defender_limit [ i ] and not GetWeapon ( vehicle ) in [ ar_control_tower , ar_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , us_cargo_bay , ar_radar , ru_radar , us_radar , ru_bulldozer , us_bulldozer , ar_bio_bomb , ar_selfpropelled_bomb , us_hack , us_crane , ru_crane , ru_siberium_rocket , us_siberium_rocket ] then
81901: LD_EXP 68
81905: PUSH
81906: LD_VAR 0 4
81910: ARRAY
81911: PUSH
81912: LD_EXP 57
81916: PUSH
81917: LD_VAR 0 4
81921: ARRAY
81922: LESS
81923: PUSH
81924: LD_VAR 0 1
81928: PPUSH
81929: CALL_OW 264
81933: PUSH
81934: LD_INT 31
81936: PUSH
81937: LD_INT 32
81939: PUSH
81940: LD_INT 51
81942: PUSH
81943: LD_EXP 30
81947: PUSH
81948: LD_INT 12
81950: PUSH
81951: LD_INT 30
81953: PUSH
81954: LD_EXP 29
81958: PUSH
81959: LD_INT 11
81961: PUSH
81962: LD_INT 53
81964: PUSH
81965: LD_INT 14
81967: PUSH
81968: LD_EXP 33
81972: PUSH
81973: LD_INT 29
81975: PUSH
81976: LD_EXP 31
81980: PUSH
81981: LD_INT 13
81983: PUSH
81984: LD_INT 52
81986: PUSH
81987: LD_INT 48
81989: PUSH
81990: LD_INT 8
81992: PUSH
81993: EMPTY
81994: LIST
81995: LIST
81996: LIST
81997: LIST
81998: LIST
81999: LIST
82000: LIST
82001: LIST
82002: LIST
82003: LIST
82004: LIST
82005: LIST
82006: LIST
82007: LIST
82008: LIST
82009: LIST
82010: LIST
82011: IN
82012: NOT
82013: AND
82014: IFFALSE 82062
// mc_defender := ReplaceIn ( mc_defender , [ i , mc_defender [ i ] + 1 ] , vehicle ) else
82016: LD_ADDR_EXP 68
82020: PUSH
82021: LD_EXP 68
82025: PPUSH
82026: LD_VAR 0 4
82030: PUSH
82031: LD_EXP 68
82035: PUSH
82036: LD_VAR 0 4
82040: ARRAY
82041: PUSH
82042: LD_INT 1
82044: PLUS
82045: PUSH
82046: EMPTY
82047: LIST
82048: LIST
82049: PPUSH
82050: LD_VAR 0 1
82054: PPUSH
82055: CALL 24294 0 3
82059: ST_TO_ADDR
82060: GO 82106
// mc_vehicles := ReplaceIn ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
82062: LD_ADDR_EXP 65
82066: PUSH
82067: LD_EXP 65
82071: PPUSH
82072: LD_VAR 0 4
82076: PUSH
82077: LD_EXP 65
82081: PUSH
82082: LD_VAR 0 4
82086: ARRAY
82087: PUSH
82088: LD_INT 1
82090: PLUS
82091: PUSH
82092: EMPTY
82093: LIST
82094: LIST
82095: PPUSH
82096: LD_VAR 0 1
82100: PPUSH
82101: CALL 24294 0 3
82105: ST_TO_ADDR
// if GetControl ( vehicle ) = control_remote then
82106: LD_VAR 0 1
82110: PPUSH
82111: CALL_OW 263
82115: PUSH
82116: LD_INT 2
82118: EQUAL
82119: IFFALSE 82139
// begin repeat wait ( 0 0$1 ) ;
82121: LD_INT 35
82123: PPUSH
82124: CALL_OW 67
// until IsControledBy ( vehicle ) ;
82128: LD_VAR 0 1
82132: PPUSH
82133: CALL_OW 312
82137: IFFALSE 82121
// end ; ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
82139: LD_VAR 0 1
82143: PPUSH
82144: LD_EXP 70
82148: PUSH
82149: LD_VAR 0 4
82153: ARRAY
82154: PPUSH
82155: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
82159: LD_VAR 0 1
82163: PPUSH
82164: CALL_OW 263
82168: PUSH
82169: LD_INT 1
82171: NONEQUAL
82172: IFFALSE 82176
// break ;
82174: GO 82225
// repeat wait ( 0 0$1 ) ;
82176: LD_INT 35
82178: PPUSH
82179: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
82183: LD_VAR 0 1
82187: PPUSH
82188: LD_EXP 70
82192: PUSH
82193: LD_VAR 0 4
82197: ARRAY
82198: PPUSH
82199: CALL_OW 308
82203: IFFALSE 82176
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
82205: LD_VAR 0 1
82209: PPUSH
82210: CALL_OW 311
82214: PPUSH
82215: CALL_OW 121
// exit ;
82219: POP
82220: POP
82221: GO 82227
// end ; end ;
82223: GO 81880
82225: POP
82226: POP
// end ;
82227: LD_VAR 0 3
82231: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
82232: LD_INT 0
82234: PPUSH
82235: PPUSH
82236: PPUSH
82237: PPUSH
// if not mc_bases or not skirmish then
82238: LD_EXP 46
82242: NOT
82243: PUSH
82244: LD_EXP 44
82248: NOT
82249: OR
82250: IFFALSE 82254
// exit ;
82252: GO 82607
// repeat wait ( 0 0$1 ) ;
82254: LD_INT 35
82256: PPUSH
82257: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
82261: LD_VAR 0 2
82265: PPUSH
82266: LD_VAR 0 3
82270: PPUSH
82271: CALL_OW 284
82275: IFFALSE 82254
// if GetResourceTypeXY ( x , y ) = mat_artefact then
82277: LD_VAR 0 2
82281: PPUSH
82282: LD_VAR 0 3
82286: PPUSH
82287: CALL_OW 283
82291: PUSH
82292: LD_INT 4
82294: EQUAL
82295: IFFALSE 82299
// exit ;
82297: GO 82607
// for i = 1 to mc_bases do
82299: LD_ADDR_VAR 0 7
82303: PUSH
82304: DOUBLE
82305: LD_INT 1
82307: DEC
82308: ST_TO_ADDR
82309: LD_EXP 46
82313: PUSH
82314: FOR_TO
82315: IFFALSE 82605
// begin if mc_crates_area [ i ] then
82317: LD_EXP 64
82321: PUSH
82322: LD_VAR 0 7
82326: ARRAY
82327: IFFALSE 82438
// for j in mc_crates_area [ i ] do
82329: LD_ADDR_VAR 0 8
82333: PUSH
82334: LD_EXP 64
82338: PUSH
82339: LD_VAR 0 7
82343: ARRAY
82344: PUSH
82345: FOR_IN
82346: IFFALSE 82436
// if InArea ( x , y , j ) then
82348: LD_VAR 0 2
82352: PPUSH
82353: LD_VAR 0 3
82357: PPUSH
82358: LD_VAR 0 8
82362: PPUSH
82363: CALL_OW 309
82367: IFFALSE 82434
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
82369: LD_ADDR_EXP 62
82373: PUSH
82374: LD_EXP 62
82378: PPUSH
82379: LD_VAR 0 7
82383: PUSH
82384: LD_EXP 62
82388: PUSH
82389: LD_VAR 0 7
82393: ARRAY
82394: PUSH
82395: LD_INT 1
82397: PLUS
82398: PUSH
82399: EMPTY
82400: LIST
82401: LIST
82402: PPUSH
82403: LD_VAR 0 4
82407: PUSH
82408: LD_VAR 0 2
82412: PUSH
82413: LD_VAR 0 3
82417: PUSH
82418: EMPTY
82419: LIST
82420: LIST
82421: LIST
82422: PPUSH
82423: CALL 24294 0 3
82427: ST_TO_ADDR
// exit ;
82428: POP
82429: POP
82430: POP
82431: POP
82432: GO 82607
// end ;
82434: GO 82345
82436: POP
82437: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
82438: LD_ADDR_VAR 0 9
82442: PUSH
82443: LD_EXP 46
82447: PUSH
82448: LD_VAR 0 7
82452: ARRAY
82453: PPUSH
82454: LD_INT 2
82456: PUSH
82457: LD_INT 30
82459: PUSH
82460: LD_INT 0
82462: PUSH
82463: EMPTY
82464: LIST
82465: LIST
82466: PUSH
82467: LD_INT 30
82469: PUSH
82470: LD_INT 1
82472: PUSH
82473: EMPTY
82474: LIST
82475: LIST
82476: PUSH
82477: EMPTY
82478: LIST
82479: LIST
82480: LIST
82481: PPUSH
82482: CALL_OW 72
82486: ST_TO_ADDR
// if not depot then
82487: LD_VAR 0 9
82491: NOT
82492: IFFALSE 82496
// continue ;
82494: GO 82314
// for j in depot do
82496: LD_ADDR_VAR 0 8
82500: PUSH
82501: LD_VAR 0 9
82505: PUSH
82506: FOR_IN
82507: IFFALSE 82601
// if GetDistUnitXY ( j , x , y ) < 30 then
82509: LD_VAR 0 8
82513: PPUSH
82514: LD_VAR 0 2
82518: PPUSH
82519: LD_VAR 0 3
82523: PPUSH
82524: CALL_OW 297
82528: PUSH
82529: LD_INT 30
82531: LESS
82532: IFFALSE 82599
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
82534: LD_ADDR_EXP 62
82538: PUSH
82539: LD_EXP 62
82543: PPUSH
82544: LD_VAR 0 7
82548: PUSH
82549: LD_EXP 62
82553: PUSH
82554: LD_VAR 0 7
82558: ARRAY
82559: PUSH
82560: LD_INT 1
82562: PLUS
82563: PUSH
82564: EMPTY
82565: LIST
82566: LIST
82567: PPUSH
82568: LD_VAR 0 4
82572: PUSH
82573: LD_VAR 0 2
82577: PUSH
82578: LD_VAR 0 3
82582: PUSH
82583: EMPTY
82584: LIST
82585: LIST
82586: LIST
82587: PPUSH
82588: CALL 24294 0 3
82592: ST_TO_ADDR
// exit ;
82593: POP
82594: POP
82595: POP
82596: POP
82597: GO 82607
// end ;
82599: GO 82506
82601: POP
82602: POP
// end ;
82603: GO 82314
82605: POP
82606: POP
// end ;
82607: LD_VAR 0 6
82611: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
82612: LD_INT 0
82614: PPUSH
82615: PPUSH
82616: PPUSH
82617: PPUSH
// if not mc_bases or not skirmish then
82618: LD_EXP 46
82622: NOT
82623: PUSH
82624: LD_EXP 44
82628: NOT
82629: OR
82630: IFFALSE 82634
// exit ;
82632: GO 82911
// side := GetSide ( lab ) ;
82634: LD_ADDR_VAR 0 4
82638: PUSH
82639: LD_VAR 0 2
82643: PPUSH
82644: CALL_OW 255
82648: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
82649: LD_VAR 0 4
82653: PUSH
82654: LD_EXP 72
82658: IN
82659: NOT
82660: PUSH
82661: LD_EXP 73
82665: NOT
82666: OR
82667: PUSH
82668: LD_EXP 46
82672: NOT
82673: OR
82674: IFFALSE 82678
// exit ;
82676: GO 82911
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
82678: LD_ADDR_EXP 73
82682: PUSH
82683: LD_EXP 73
82687: PPUSH
82688: LD_VAR 0 4
82692: PPUSH
82693: LD_EXP 73
82697: PUSH
82698: LD_VAR 0 4
82702: ARRAY
82703: PUSH
82704: LD_VAR 0 1
82708: DIFF
82709: PPUSH
82710: CALL_OW 1
82714: ST_TO_ADDR
// for i = 1 to mc_bases do
82715: LD_ADDR_VAR 0 5
82719: PUSH
82720: DOUBLE
82721: LD_INT 1
82723: DEC
82724: ST_TO_ADDR
82725: LD_EXP 46
82729: PUSH
82730: FOR_TO
82731: IFFALSE 82909
// begin if lab in mc_bases [ i ] then
82733: LD_VAR 0 2
82737: PUSH
82738: LD_EXP 46
82742: PUSH
82743: LD_VAR 0 5
82747: ARRAY
82748: IN
82749: IFFALSE 82907
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
82751: LD_VAR 0 1
82755: PUSH
82756: LD_INT 11
82758: PUSH
82759: LD_INT 4
82761: PUSH
82762: LD_INT 3
82764: PUSH
82765: LD_INT 2
82767: PUSH
82768: EMPTY
82769: LIST
82770: LIST
82771: LIST
82772: LIST
82773: IN
82774: PUSH
82775: LD_EXP 76
82779: PUSH
82780: LD_VAR 0 5
82784: ARRAY
82785: AND
82786: IFFALSE 82907
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
82788: LD_ADDR_VAR 0 6
82792: PUSH
82793: LD_EXP 76
82797: PUSH
82798: LD_VAR 0 5
82802: ARRAY
82803: PUSH
82804: LD_INT 1
82806: ARRAY
82807: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
82808: LD_ADDR_EXP 76
82812: PUSH
82813: LD_EXP 76
82817: PPUSH
82818: LD_VAR 0 5
82822: PPUSH
82823: EMPTY
82824: PPUSH
82825: CALL_OW 1
82829: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
82830: LD_VAR 0 6
82834: PPUSH
82835: LD_INT 0
82837: PPUSH
82838: CALL_OW 109
// ComExitBuilding ( tmp ) ;
82842: LD_VAR 0 6
82846: PPUSH
82847: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
82851: LD_ADDR_EXP 75
82855: PUSH
82856: LD_EXP 75
82860: PPUSH
82861: LD_VAR 0 5
82865: PPUSH
82866: LD_EXP 75
82870: PUSH
82871: LD_VAR 0 5
82875: ARRAY
82876: PPUSH
82877: LD_INT 1
82879: PPUSH
82880: LD_VAR 0 6
82884: PPUSH
82885: CALL_OW 2
82889: PPUSH
82890: CALL_OW 1
82894: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
82895: LD_VAR 0 5
82899: PPUSH
82900: LD_INT 112
82902: PPUSH
82903: CALL 59923 0 2
// end ; end ; end ;
82907: GO 82730
82909: POP
82910: POP
// end ;
82911: LD_VAR 0 3
82915: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
82916: LD_INT 0
82918: PPUSH
82919: PPUSH
82920: PPUSH
82921: PPUSH
82922: PPUSH
82923: PPUSH
82924: PPUSH
82925: PPUSH
// if not mc_bases or not skirmish then
82926: LD_EXP 46
82930: NOT
82931: PUSH
82932: LD_EXP 44
82936: NOT
82937: OR
82938: IFFALSE 82942
// exit ;
82940: GO 84313
// for i = 1 to mc_bases do
82942: LD_ADDR_VAR 0 3
82946: PUSH
82947: DOUBLE
82948: LD_INT 1
82950: DEC
82951: ST_TO_ADDR
82952: LD_EXP 46
82956: PUSH
82957: FOR_TO
82958: IFFALSE 84311
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_defender [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
82960: LD_VAR 0 1
82964: PUSH
82965: LD_EXP 46
82969: PUSH
82970: LD_VAR 0 3
82974: ARRAY
82975: IN
82976: PUSH
82977: LD_VAR 0 1
82981: PUSH
82982: LD_EXP 53
82986: PUSH
82987: LD_VAR 0 3
82991: ARRAY
82992: IN
82993: OR
82994: PUSH
82995: LD_VAR 0 1
82999: PUSH
83000: LD_EXP 68
83004: PUSH
83005: LD_VAR 0 3
83009: ARRAY
83010: IN
83011: OR
83012: PUSH
83013: LD_VAR 0 1
83017: PUSH
83018: LD_EXP 65
83022: PUSH
83023: LD_VAR 0 3
83027: ARRAY
83028: IN
83029: OR
83030: PUSH
83031: LD_VAR 0 1
83035: PUSH
83036: LD_EXP 75
83040: PUSH
83041: LD_VAR 0 3
83045: ARRAY
83046: IN
83047: OR
83048: PUSH
83049: LD_VAR 0 1
83053: PUSH
83054: LD_EXP 76
83058: PUSH
83059: LD_VAR 0 3
83063: ARRAY
83064: IN
83065: OR
83066: IFFALSE 84309
// begin if un in mc_ape [ i ] then
83068: LD_VAR 0 1
83072: PUSH
83073: LD_EXP 75
83077: PUSH
83078: LD_VAR 0 3
83082: ARRAY
83083: IN
83084: IFFALSE 83123
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
83086: LD_ADDR_EXP 75
83090: PUSH
83091: LD_EXP 75
83095: PPUSH
83096: LD_VAR 0 3
83100: PPUSH
83101: LD_EXP 75
83105: PUSH
83106: LD_VAR 0 3
83110: ARRAY
83111: PUSH
83112: LD_VAR 0 1
83116: DIFF
83117: PPUSH
83118: CALL_OW 1
83122: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
83123: LD_VAR 0 1
83127: PUSH
83128: LD_EXP 76
83132: PUSH
83133: LD_VAR 0 3
83137: ARRAY
83138: IN
83139: IFFALSE 83163
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
83141: LD_ADDR_EXP 76
83145: PUSH
83146: LD_EXP 76
83150: PPUSH
83151: LD_VAR 0 3
83155: PPUSH
83156: EMPTY
83157: PPUSH
83158: CALL_OW 1
83162: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and ( GetTag ( un ) = 20 or un in mc_defender [ i ] or GetWeapon ( un ) in [ us_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , ar_cargo_bay , us_crane , ru_crane , ar_control_tower ] ) then
83163: LD_VAR 0 1
83167: PPUSH
83168: CALL_OW 247
83172: PUSH
83173: LD_INT 2
83175: EQUAL
83176: PUSH
83177: LD_VAR 0 1
83181: PPUSH
83182: CALL_OW 110
83186: PUSH
83187: LD_INT 20
83189: EQUAL
83190: PUSH
83191: LD_VAR 0 1
83195: PUSH
83196: LD_EXP 68
83200: PUSH
83201: LD_VAR 0 3
83205: ARRAY
83206: IN
83207: OR
83208: PUSH
83209: LD_VAR 0 1
83213: PPUSH
83214: CALL_OW 264
83218: PUSH
83219: LD_INT 12
83221: PUSH
83222: LD_INT 51
83224: PUSH
83225: LD_EXP 30
83229: PUSH
83230: LD_INT 32
83232: PUSH
83233: LD_INT 13
83235: PUSH
83236: LD_INT 52
83238: PUSH
83239: LD_INT 31
83241: PUSH
83242: EMPTY
83243: LIST
83244: LIST
83245: LIST
83246: LIST
83247: LIST
83248: LIST
83249: LIST
83250: IN
83251: OR
83252: AND
83253: IFFALSE 83561
// begin if un in mc_defender [ i ] then
83255: LD_VAR 0 1
83259: PUSH
83260: LD_EXP 68
83264: PUSH
83265: LD_VAR 0 3
83269: ARRAY
83270: IN
83271: IFFALSE 83310
// mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
83273: LD_ADDR_EXP 68
83277: PUSH
83278: LD_EXP 68
83282: PPUSH
83283: LD_VAR 0 3
83287: PPUSH
83288: LD_EXP 68
83292: PUSH
83293: LD_VAR 0 3
83297: ARRAY
83298: PUSH
83299: LD_VAR 0 1
83303: DIFF
83304: PPUSH
83305: CALL_OW 1
83309: ST_TO_ADDR
// fac := MC_GetBuildings ( i , b_factory ) ;
83310: LD_ADDR_VAR 0 8
83314: PUSH
83315: LD_VAR 0 3
83319: PPUSH
83320: LD_INT 3
83322: PPUSH
83323: CALL 79979 0 2
83327: ST_TO_ADDR
// if fac then
83328: LD_VAR 0 8
83332: IFFALSE 83561
// begin for j in fac do
83334: LD_ADDR_VAR 0 4
83338: PUSH
83339: LD_VAR 0 8
83343: PUSH
83344: FOR_IN
83345: IFFALSE 83559
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
83347: LD_ADDR_VAR 0 9
83351: PUSH
83352: LD_VAR 0 8
83356: PPUSH
83357: LD_VAR 0 1
83361: PPUSH
83362: CALL_OW 265
83366: PPUSH
83367: LD_VAR 0 1
83371: PPUSH
83372: CALL_OW 262
83376: PPUSH
83377: LD_VAR 0 1
83381: PPUSH
83382: CALL_OW 263
83386: PPUSH
83387: LD_VAR 0 1
83391: PPUSH
83392: CALL_OW 264
83396: PPUSH
83397: CALL 21826 0 5
83401: ST_TO_ADDR
// if components then
83402: LD_VAR 0 9
83406: IFFALSE 83557
// begin if GetWeapon ( un ) = ar_control_tower then
83408: LD_VAR 0 1
83412: PPUSH
83413: CALL_OW 264
83417: PUSH
83418: LD_INT 31
83420: EQUAL
83421: IFFALSE 83538
// begin SetTag ( IsDrivenBy ( un ) , 0 ) ;
83423: LD_VAR 0 1
83427: PPUSH
83428: CALL_OW 311
83432: PPUSH
83433: LD_INT 0
83435: PPUSH
83436: CALL_OW 109
// mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff IsDrivenBy ( un ) ) ;
83440: LD_ADDR_EXP 86
83444: PUSH
83445: LD_EXP 86
83449: PPUSH
83450: LD_VAR 0 3
83454: PPUSH
83455: LD_EXP 86
83459: PUSH
83460: LD_VAR 0 3
83464: ARRAY
83465: PUSH
83466: LD_VAR 0 1
83470: PPUSH
83471: CALL_OW 311
83475: DIFF
83476: PPUSH
83477: CALL_OW 1
83481: ST_TO_ADDR
// tmp := Insert ( mc_produce [ i ] , 1 , components ) ;
83482: LD_ADDR_VAR 0 7
83486: PUSH
83487: LD_EXP 67
83491: PUSH
83492: LD_VAR 0 3
83496: ARRAY
83497: PPUSH
83498: LD_INT 1
83500: PPUSH
83501: LD_VAR 0 9
83505: PPUSH
83506: CALL_OW 2
83510: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
83511: LD_ADDR_EXP 67
83515: PUSH
83516: LD_EXP 67
83520: PPUSH
83521: LD_VAR 0 3
83525: PPUSH
83526: LD_VAR 0 7
83530: PPUSH
83531: CALL_OW 1
83535: ST_TO_ADDR
// end else
83536: GO 83555
// MC_InsertProduceList ( i , [ components ] ) ;
83538: LD_VAR 0 3
83542: PPUSH
83543: LD_VAR 0 9
83547: PUSH
83548: EMPTY
83549: LIST
83550: PPUSH
83551: CALL 79524 0 2
// break ;
83555: GO 83559
// end ; end ;
83557: GO 83344
83559: POP
83560: POP
// end ; end ; if GetType ( un ) = unit_building then
83561: LD_VAR 0 1
83565: PPUSH
83566: CALL_OW 247
83570: PUSH
83571: LD_INT 3
83573: EQUAL
83574: IFFALSE 83977
// begin btype := GetBType ( un ) ;
83576: LD_ADDR_VAR 0 5
83580: PUSH
83581: LD_VAR 0 1
83585: PPUSH
83586: CALL_OW 266
83590: ST_TO_ADDR
// if btype in [ b_oil_mine , b_siberite_mine ] then
83591: LD_VAR 0 5
83595: PUSH
83596: LD_INT 29
83598: PUSH
83599: LD_INT 30
83601: PUSH
83602: EMPTY
83603: LIST
83604: LIST
83605: IN
83606: IFFALSE 83679
// begin if not GetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) then
83608: LD_VAR 0 1
83612: PPUSH
83613: CALL_OW 250
83617: PPUSH
83618: LD_VAR 0 1
83622: PPUSH
83623: CALL_OW 251
83627: PPUSH
83628: LD_VAR 0 1
83632: PPUSH
83633: CALL_OW 255
83637: PPUSH
83638: CALL_OW 440
83642: NOT
83643: IFFALSE 83679
// SetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) ;
83645: LD_VAR 0 1
83649: PPUSH
83650: CALL_OW 250
83654: PPUSH
83655: LD_VAR 0 1
83659: PPUSH
83660: CALL_OW 251
83664: PPUSH
83665: LD_VAR 0 1
83669: PPUSH
83670: CALL_OW 255
83674: PPUSH
83675: CALL_OW 441
// end ; if btype = b_warehouse then
83679: LD_VAR 0 5
83683: PUSH
83684: LD_INT 1
83686: EQUAL
83687: IFFALSE 83705
// begin btype := b_depot ;
83689: LD_ADDR_VAR 0 5
83693: PUSH
83694: LD_INT 0
83696: ST_TO_ADDR
// pos := 1 ;
83697: LD_ADDR_VAR 0 6
83701: PUSH
83702: LD_INT 1
83704: ST_TO_ADDR
// end ; if btype = b_factory then
83705: LD_VAR 0 5
83709: PUSH
83710: LD_INT 3
83712: EQUAL
83713: IFFALSE 83731
// begin btype := b_workshop ;
83715: LD_ADDR_VAR 0 5
83719: PUSH
83720: LD_INT 2
83722: ST_TO_ADDR
// pos := 1 ;
83723: LD_ADDR_VAR 0 6
83727: PUSH
83728: LD_INT 1
83730: ST_TO_ADDR
// end ; if btype = b_barracks then
83731: LD_VAR 0 5
83735: PUSH
83736: LD_INT 5
83738: EQUAL
83739: IFFALSE 83749
// btype := b_armoury ;
83741: LD_ADDR_VAR 0 5
83745: PUSH
83746: LD_INT 4
83748: ST_TO_ADDR
// if btype in [ b_lab_half , b_lab_full ] then
83749: LD_VAR 0 5
83753: PUSH
83754: LD_INT 7
83756: PUSH
83757: LD_INT 8
83759: PUSH
83760: EMPTY
83761: LIST
83762: LIST
83763: IN
83764: IFFALSE 83774
// btype := b_lab ;
83766: LD_ADDR_VAR 0 5
83770: PUSH
83771: LD_INT 6
83773: ST_TO_ADDR
// mc_build_list := ReplaceIn ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
83774: LD_ADDR_EXP 51
83778: PUSH
83779: LD_EXP 51
83783: PPUSH
83784: LD_VAR 0 3
83788: PUSH
83789: LD_EXP 51
83793: PUSH
83794: LD_VAR 0 3
83798: ARRAY
83799: PUSH
83800: LD_INT 1
83802: PLUS
83803: PUSH
83804: EMPTY
83805: LIST
83806: LIST
83807: PPUSH
83808: LD_VAR 0 5
83812: PUSH
83813: LD_VAR 0 1
83817: PPUSH
83818: CALL_OW 250
83822: PUSH
83823: LD_VAR 0 1
83827: PPUSH
83828: CALL_OW 251
83832: PUSH
83833: LD_VAR 0 1
83837: PPUSH
83838: CALL_OW 254
83842: PUSH
83843: EMPTY
83844: LIST
83845: LIST
83846: LIST
83847: LIST
83848: PPUSH
83849: CALL 24294 0 3
83853: ST_TO_ADDR
// if pos = 1 then
83854: LD_VAR 0 6
83858: PUSH
83859: LD_INT 1
83861: EQUAL
83862: IFFALSE 83977
// begin tmp := mc_build_list [ i ] ;
83864: LD_ADDR_VAR 0 7
83868: PUSH
83869: LD_EXP 51
83873: PUSH
83874: LD_VAR 0 3
83878: ARRAY
83879: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
83880: LD_VAR 0 7
83884: PPUSH
83885: LD_INT 2
83887: PUSH
83888: LD_INT 30
83890: PUSH
83891: LD_INT 0
83893: PUSH
83894: EMPTY
83895: LIST
83896: LIST
83897: PUSH
83898: LD_INT 30
83900: PUSH
83901: LD_INT 1
83903: PUSH
83904: EMPTY
83905: LIST
83906: LIST
83907: PUSH
83908: EMPTY
83909: LIST
83910: LIST
83911: LIST
83912: PPUSH
83913: CALL_OW 72
83917: IFFALSE 83927
// pos := 2 ;
83919: LD_ADDR_VAR 0 6
83923: PUSH
83924: LD_INT 2
83926: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
83927: LD_ADDR_VAR 0 7
83931: PUSH
83932: LD_VAR 0 7
83936: PPUSH
83937: LD_VAR 0 6
83941: PPUSH
83942: LD_VAR 0 7
83946: PPUSH
83947: CALL 24620 0 3
83951: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
83952: LD_ADDR_EXP 51
83956: PUSH
83957: LD_EXP 51
83961: PPUSH
83962: LD_VAR 0 3
83966: PPUSH
83967: LD_VAR 0 7
83971: PPUSH
83972: CALL_OW 1
83976: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
83977: LD_VAR 0 1
83981: PUSH
83982: LD_EXP 46
83986: PUSH
83987: LD_VAR 0 3
83991: ARRAY
83992: IN
83993: IFFALSE 84032
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
83995: LD_ADDR_EXP 46
83999: PUSH
84000: LD_EXP 46
84004: PPUSH
84005: LD_VAR 0 3
84009: PPUSH
84010: LD_EXP 46
84014: PUSH
84015: LD_VAR 0 3
84019: ARRAY
84020: PUSH
84021: LD_VAR 0 1
84025: DIFF
84026: PPUSH
84027: CALL_OW 1
84031: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
84032: LD_VAR 0 1
84036: PUSH
84037: LD_EXP 53
84041: PUSH
84042: LD_VAR 0 3
84046: ARRAY
84047: IN
84048: IFFALSE 84087
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
84050: LD_ADDR_EXP 53
84054: PUSH
84055: LD_EXP 53
84059: PPUSH
84060: LD_VAR 0 3
84064: PPUSH
84065: LD_EXP 53
84069: PUSH
84070: LD_VAR 0 3
84074: ARRAY
84075: PUSH
84076: LD_VAR 0 1
84080: DIFF
84081: PPUSH
84082: CALL_OW 1
84086: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
84087: LD_VAR 0 1
84091: PUSH
84092: LD_EXP 65
84096: PUSH
84097: LD_VAR 0 3
84101: ARRAY
84102: IN
84103: IFFALSE 84142
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
84105: LD_ADDR_EXP 65
84109: PUSH
84110: LD_EXP 65
84114: PPUSH
84115: LD_VAR 0 3
84119: PPUSH
84120: LD_EXP 65
84124: PUSH
84125: LD_VAR 0 3
84129: ARRAY
84130: PUSH
84131: LD_VAR 0 1
84135: DIFF
84136: PPUSH
84137: CALL_OW 1
84141: ST_TO_ADDR
// end ; if un in mc_defender [ i ] then
84142: LD_VAR 0 1
84146: PUSH
84147: LD_EXP 68
84151: PUSH
84152: LD_VAR 0 3
84156: ARRAY
84157: IN
84158: IFFALSE 84197
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
84160: LD_ADDR_EXP 68
84164: PUSH
84165: LD_EXP 68
84169: PPUSH
84170: LD_VAR 0 3
84174: PPUSH
84175: LD_EXP 68
84179: PUSH
84180: LD_VAR 0 3
84184: ARRAY
84185: PUSH
84186: LD_VAR 0 1
84190: DIFF
84191: PPUSH
84192: CALL_OW 1
84196: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
84197: LD_VAR 0 1
84201: PUSH
84202: LD_EXP 55
84206: PUSH
84207: LD_VAR 0 3
84211: ARRAY
84212: IN
84213: IFFALSE 84252
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
84215: LD_ADDR_EXP 55
84219: PUSH
84220: LD_EXP 55
84224: PPUSH
84225: LD_VAR 0 3
84229: PPUSH
84230: LD_EXP 55
84234: PUSH
84235: LD_VAR 0 3
84239: ARRAY
84240: PUSH
84241: LD_VAR 0 1
84245: DIFF
84246: PPUSH
84247: CALL_OW 1
84251: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
84252: LD_VAR 0 1
84256: PUSH
84257: LD_EXP 54
84261: PUSH
84262: LD_VAR 0 3
84266: ARRAY
84267: IN
84268: IFFALSE 84307
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
84270: LD_ADDR_EXP 54
84274: PUSH
84275: LD_EXP 54
84279: PPUSH
84280: LD_VAR 0 3
84284: PPUSH
84285: LD_EXP 54
84289: PUSH
84290: LD_VAR 0 3
84294: ARRAY
84295: PUSH
84296: LD_VAR 0 1
84300: DIFF
84301: PPUSH
84302: CALL_OW 1
84306: ST_TO_ADDR
// end ; break ;
84307: GO 84311
// end ;
84309: GO 82957
84311: POP
84312: POP
// end ;
84313: LD_VAR 0 2
84317: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
84318: LD_INT 0
84320: PPUSH
84321: PPUSH
84322: PPUSH
// if not mc_bases or not skirmish then
84323: LD_EXP 46
84327: NOT
84328: PUSH
84329: LD_EXP 44
84333: NOT
84334: OR
84335: IFFALSE 84339
// exit ;
84337: GO 84554
// for i = 1 to mc_bases do
84339: LD_ADDR_VAR 0 3
84343: PUSH
84344: DOUBLE
84345: LD_INT 1
84347: DEC
84348: ST_TO_ADDR
84349: LD_EXP 46
84353: PUSH
84354: FOR_TO
84355: IFFALSE 84552
// begin if building in mc_construct_list [ i ] then
84357: LD_VAR 0 1
84361: PUSH
84362: LD_EXP 53
84366: PUSH
84367: LD_VAR 0 3
84371: ARRAY
84372: IN
84373: IFFALSE 84550
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
84375: LD_ADDR_EXP 53
84379: PUSH
84380: LD_EXP 53
84384: PPUSH
84385: LD_VAR 0 3
84389: PPUSH
84390: LD_EXP 53
84394: PUSH
84395: LD_VAR 0 3
84399: ARRAY
84400: PUSH
84401: LD_VAR 0 1
84405: DIFF
84406: PPUSH
84407: CALL_OW 1
84411: ST_TO_ADDR
// if building in mc_lab [ i ] then
84412: LD_VAR 0 1
84416: PUSH
84417: LD_EXP 79
84421: PUSH
84422: LD_VAR 0 3
84426: ARRAY
84427: IN
84428: IFFALSE 84483
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
84430: LD_ADDR_EXP 80
84434: PUSH
84435: LD_EXP 80
84439: PPUSH
84440: LD_VAR 0 3
84444: PPUSH
84445: LD_EXP 80
84449: PUSH
84450: LD_VAR 0 3
84454: ARRAY
84455: PPUSH
84456: LD_INT 1
84458: PPUSH
84459: LD_EXP 80
84463: PUSH
84464: LD_VAR 0 3
84468: ARRAY
84469: PPUSH
84470: LD_INT 0
84472: PPUSH
84473: CALL 23712 0 4
84477: PPUSH
84478: CALL_OW 1
84482: ST_TO_ADDR
// if not building in mc_bases [ i ] then
84483: LD_VAR 0 1
84487: PUSH
84488: LD_EXP 46
84492: PUSH
84493: LD_VAR 0 3
84497: ARRAY
84498: IN
84499: NOT
84500: IFFALSE 84546
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
84502: LD_ADDR_EXP 46
84506: PUSH
84507: LD_EXP 46
84511: PPUSH
84512: LD_VAR 0 3
84516: PUSH
84517: LD_EXP 46
84521: PUSH
84522: LD_VAR 0 3
84526: ARRAY
84527: PUSH
84528: LD_INT 1
84530: PLUS
84531: PUSH
84532: EMPTY
84533: LIST
84534: LIST
84535: PPUSH
84536: LD_VAR 0 1
84540: PPUSH
84541: CALL 24294 0 3
84545: ST_TO_ADDR
// exit ;
84546: POP
84547: POP
84548: GO 84554
// end ; end ;
84550: GO 84354
84552: POP
84553: POP
// end ;
84554: LD_VAR 0 2
84558: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
84559: LD_INT 0
84561: PPUSH
84562: PPUSH
84563: PPUSH
84564: PPUSH
84565: PPUSH
84566: PPUSH
84567: PPUSH
// if not mc_bases or not skirmish then
84568: LD_EXP 46
84572: NOT
84573: PUSH
84574: LD_EXP 44
84578: NOT
84579: OR
84580: IFFALSE 84584
// exit ;
84582: GO 85245
// for i = 1 to mc_bases do
84584: LD_ADDR_VAR 0 3
84588: PUSH
84589: DOUBLE
84590: LD_INT 1
84592: DEC
84593: ST_TO_ADDR
84594: LD_EXP 46
84598: PUSH
84599: FOR_TO
84600: IFFALSE 85243
// begin if building in mc_construct_list [ i ] then
84602: LD_VAR 0 1
84606: PUSH
84607: LD_EXP 53
84611: PUSH
84612: LD_VAR 0 3
84616: ARRAY
84617: IN
84618: IFFALSE 85241
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
84620: LD_ADDR_EXP 53
84624: PUSH
84625: LD_EXP 53
84629: PPUSH
84630: LD_VAR 0 3
84634: PPUSH
84635: LD_EXP 53
84639: PUSH
84640: LD_VAR 0 3
84644: ARRAY
84645: PUSH
84646: LD_VAR 0 1
84650: DIFF
84651: PPUSH
84652: CALL_OW 1
84656: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
84657: LD_ADDR_EXP 46
84661: PUSH
84662: LD_EXP 46
84666: PPUSH
84667: LD_VAR 0 3
84671: PUSH
84672: LD_EXP 46
84676: PUSH
84677: LD_VAR 0 3
84681: ARRAY
84682: PUSH
84683: LD_INT 1
84685: PLUS
84686: PUSH
84687: EMPTY
84688: LIST
84689: LIST
84690: PPUSH
84691: LD_VAR 0 1
84695: PPUSH
84696: CALL 24294 0 3
84700: ST_TO_ADDR
// btype := GetBType ( building ) ;
84701: LD_ADDR_VAR 0 5
84705: PUSH
84706: LD_VAR 0 1
84710: PPUSH
84711: CALL_OW 266
84715: ST_TO_ADDR
// side := GetSide ( building ) ;
84716: LD_ADDR_VAR 0 8
84720: PUSH
84721: LD_VAR 0 1
84725: PPUSH
84726: CALL_OW 255
84730: ST_TO_ADDR
// if btype = b_lab then
84731: LD_VAR 0 5
84735: PUSH
84736: LD_INT 6
84738: EQUAL
84739: IFFALSE 84789
// begin mc_lab := ReplaceIn ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
84741: LD_ADDR_EXP 79
84745: PUSH
84746: LD_EXP 79
84750: PPUSH
84751: LD_VAR 0 3
84755: PUSH
84756: LD_EXP 79
84760: PUSH
84761: LD_VAR 0 3
84765: ARRAY
84766: PUSH
84767: LD_INT 1
84769: PLUS
84770: PUSH
84771: EMPTY
84772: LIST
84773: LIST
84774: PPUSH
84775: LD_VAR 0 1
84779: PPUSH
84780: CALL 24294 0 3
84784: ST_TO_ADDR
// exit ;
84785: POP
84786: POP
84787: GO 85245
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
84789: LD_VAR 0 5
84793: PUSH
84794: LD_INT 0
84796: PUSH
84797: LD_INT 2
84799: PUSH
84800: LD_INT 4
84802: PUSH
84803: EMPTY
84804: LIST
84805: LIST
84806: LIST
84807: IN
84808: IFFALSE 84932
// begin if btype = b_armoury then
84810: LD_VAR 0 5
84814: PUSH
84815: LD_INT 4
84817: EQUAL
84818: IFFALSE 84828
// btype := b_barracks ;
84820: LD_ADDR_VAR 0 5
84824: PUSH
84825: LD_INT 5
84827: ST_TO_ADDR
// if btype = b_depot then
84828: LD_VAR 0 5
84832: PUSH
84833: LD_INT 0
84835: EQUAL
84836: IFFALSE 84846
// btype := b_warehouse ;
84838: LD_ADDR_VAR 0 5
84842: PUSH
84843: LD_INT 1
84845: ST_TO_ADDR
// if btype = b_workshop then
84846: LD_VAR 0 5
84850: PUSH
84851: LD_INT 2
84853: EQUAL
84854: IFFALSE 84864
// btype := b_factory ;
84856: LD_ADDR_VAR 0 5
84860: PUSH
84861: LD_INT 3
84863: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
84864: LD_VAR 0 5
84868: PPUSH
84869: LD_VAR 0 8
84873: PPUSH
84874: CALL_OW 323
84878: PUSH
84879: LD_INT 1
84881: EQUAL
84882: IFFALSE 84928
// mc_build_upgrade := ReplaceIn ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
84884: LD_ADDR_EXP 78
84888: PUSH
84889: LD_EXP 78
84893: PPUSH
84894: LD_VAR 0 3
84898: PUSH
84899: LD_EXP 78
84903: PUSH
84904: LD_VAR 0 3
84908: ARRAY
84909: PUSH
84910: LD_INT 1
84912: PLUS
84913: PUSH
84914: EMPTY
84915: LIST
84916: LIST
84917: PPUSH
84918: LD_VAR 0 1
84922: PPUSH
84923: CALL 24294 0 3
84927: ST_TO_ADDR
// exit ;
84928: POP
84929: POP
84930: GO 85245
// end ; if btype in [ b_bunker , b_turret ] then
84932: LD_VAR 0 5
84936: PUSH
84937: LD_INT 32
84939: PUSH
84940: LD_INT 33
84942: PUSH
84943: EMPTY
84944: LIST
84945: LIST
84946: IN
84947: IFFALSE 85237
// begin mc_turret_list := ReplaceIn ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
84949: LD_ADDR_EXP 54
84953: PUSH
84954: LD_EXP 54
84958: PPUSH
84959: LD_VAR 0 3
84963: PUSH
84964: LD_EXP 54
84968: PUSH
84969: LD_VAR 0 3
84973: ARRAY
84974: PUSH
84975: LD_INT 1
84977: PLUS
84978: PUSH
84979: EMPTY
84980: LIST
84981: LIST
84982: PPUSH
84983: LD_VAR 0 1
84987: PPUSH
84988: CALL 24294 0 3
84992: ST_TO_ADDR
// if btype = b_bunker then
84993: LD_VAR 0 5
84997: PUSH
84998: LD_INT 32
85000: EQUAL
85001: IFFALSE 85237
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
85003: LD_ADDR_EXP 55
85007: PUSH
85008: LD_EXP 55
85012: PPUSH
85013: LD_VAR 0 3
85017: PUSH
85018: LD_EXP 55
85022: PUSH
85023: LD_VAR 0 3
85027: ARRAY
85028: PUSH
85029: LD_INT 1
85031: PLUS
85032: PUSH
85033: EMPTY
85034: LIST
85035: LIST
85036: PPUSH
85037: LD_VAR 0 1
85041: PPUSH
85042: CALL 24294 0 3
85046: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
85047: LD_ADDR_VAR 0 6
85051: PUSH
85052: LD_EXP 46
85056: PUSH
85057: LD_VAR 0 3
85061: ARRAY
85062: PPUSH
85063: LD_INT 25
85065: PUSH
85066: LD_INT 1
85068: PUSH
85069: EMPTY
85070: LIST
85071: LIST
85072: PUSH
85073: LD_INT 3
85075: PUSH
85076: LD_INT 54
85078: PUSH
85079: EMPTY
85080: LIST
85081: PUSH
85082: EMPTY
85083: LIST
85084: LIST
85085: PUSH
85086: EMPTY
85087: LIST
85088: LIST
85089: PPUSH
85090: CALL_OW 72
85094: ST_TO_ADDR
// if tmp then
85095: LD_VAR 0 6
85099: IFFALSE 85105
// exit ;
85101: POP
85102: POP
85103: GO 85245
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
85105: LD_ADDR_VAR 0 6
85109: PUSH
85110: LD_EXP 46
85114: PUSH
85115: LD_VAR 0 3
85119: ARRAY
85120: PPUSH
85121: LD_INT 2
85123: PUSH
85124: LD_INT 30
85126: PUSH
85127: LD_INT 4
85129: PUSH
85130: EMPTY
85131: LIST
85132: LIST
85133: PUSH
85134: LD_INT 30
85136: PUSH
85137: LD_INT 5
85139: PUSH
85140: EMPTY
85141: LIST
85142: LIST
85143: PUSH
85144: EMPTY
85145: LIST
85146: LIST
85147: LIST
85148: PPUSH
85149: CALL_OW 72
85153: ST_TO_ADDR
// if not tmp then
85154: LD_VAR 0 6
85158: NOT
85159: IFFALSE 85165
// exit ;
85161: POP
85162: POP
85163: GO 85245
// for j in tmp do
85165: LD_ADDR_VAR 0 4
85169: PUSH
85170: LD_VAR 0 6
85174: PUSH
85175: FOR_IN
85176: IFFALSE 85235
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
85178: LD_ADDR_VAR 0 7
85182: PUSH
85183: LD_VAR 0 4
85187: PPUSH
85188: CALL_OW 313
85192: PPUSH
85193: LD_INT 25
85195: PUSH
85196: LD_INT 1
85198: PUSH
85199: EMPTY
85200: LIST
85201: LIST
85202: PPUSH
85203: CALL_OW 72
85207: ST_TO_ADDR
// if units then
85208: LD_VAR 0 7
85212: IFFALSE 85233
// begin ComExitBuilding ( units [ 1 ] ) ;
85214: LD_VAR 0 7
85218: PUSH
85219: LD_INT 1
85221: ARRAY
85222: PPUSH
85223: CALL_OW 122
// exit ;
85227: POP
85228: POP
85229: POP
85230: POP
85231: GO 85245
// end ; end ;
85233: GO 85175
85235: POP
85236: POP
// end ; end ; exit ;
85237: POP
85238: POP
85239: GO 85245
// end ; end ;
85241: GO 84599
85243: POP
85244: POP
// end ;
85245: LD_VAR 0 2
85249: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
85250: LD_INT 0
85252: PPUSH
85253: PPUSH
85254: PPUSH
85255: PPUSH
85256: PPUSH
85257: PPUSH
85258: PPUSH
// if not mc_bases or not skirmish then
85259: LD_EXP 46
85263: NOT
85264: PUSH
85265: LD_EXP 44
85269: NOT
85270: OR
85271: IFFALSE 85275
// exit ;
85273: GO 85506
// btype := GetBType ( building ) ;
85275: LD_ADDR_VAR 0 6
85279: PUSH
85280: LD_VAR 0 1
85284: PPUSH
85285: CALL_OW 266
85289: ST_TO_ADDR
// x := GetX ( building ) ;
85290: LD_ADDR_VAR 0 7
85294: PUSH
85295: LD_VAR 0 1
85299: PPUSH
85300: CALL_OW 250
85304: ST_TO_ADDR
// y := GetY ( building ) ;
85305: LD_ADDR_VAR 0 8
85309: PUSH
85310: LD_VAR 0 1
85314: PPUSH
85315: CALL_OW 251
85319: ST_TO_ADDR
// d := GetDir ( building ) ;
85320: LD_ADDR_VAR 0 9
85324: PUSH
85325: LD_VAR 0 1
85329: PPUSH
85330: CALL_OW 254
85334: ST_TO_ADDR
// for i = 1 to mc_bases do
85335: LD_ADDR_VAR 0 4
85339: PUSH
85340: DOUBLE
85341: LD_INT 1
85343: DEC
85344: ST_TO_ADDR
85345: LD_EXP 46
85349: PUSH
85350: FOR_TO
85351: IFFALSE 85504
// begin if not mc_build_list [ i ] then
85353: LD_EXP 51
85357: PUSH
85358: LD_VAR 0 4
85362: ARRAY
85363: NOT
85364: IFFALSE 85368
// continue ;
85366: GO 85350
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
85368: LD_VAR 0 6
85372: PUSH
85373: LD_VAR 0 7
85377: PUSH
85378: LD_VAR 0 8
85382: PUSH
85383: LD_VAR 0 9
85387: PUSH
85388: EMPTY
85389: LIST
85390: LIST
85391: LIST
85392: LIST
85393: PPUSH
85394: LD_EXP 51
85398: PUSH
85399: LD_VAR 0 4
85403: ARRAY
85404: PUSH
85405: LD_INT 1
85407: ARRAY
85408: PPUSH
85409: CALL 30463 0 2
85413: IFFALSE 85502
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
85415: LD_ADDR_EXP 51
85419: PUSH
85420: LD_EXP 51
85424: PPUSH
85425: LD_VAR 0 4
85429: PPUSH
85430: LD_EXP 51
85434: PUSH
85435: LD_VAR 0 4
85439: ARRAY
85440: PPUSH
85441: LD_INT 1
85443: PPUSH
85444: CALL_OW 3
85448: PPUSH
85449: CALL_OW 1
85453: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
85454: LD_ADDR_EXP 53
85458: PUSH
85459: LD_EXP 53
85463: PPUSH
85464: LD_VAR 0 4
85468: PUSH
85469: LD_EXP 53
85473: PUSH
85474: LD_VAR 0 4
85478: ARRAY
85479: PUSH
85480: LD_INT 1
85482: PLUS
85483: PUSH
85484: EMPTY
85485: LIST
85486: LIST
85487: PPUSH
85488: LD_VAR 0 1
85492: PPUSH
85493: CALL 24294 0 3
85497: ST_TO_ADDR
// exit ;
85498: POP
85499: POP
85500: GO 85506
// end ; end ;
85502: GO 85350
85504: POP
85505: POP
// end ;
85506: LD_VAR 0 3
85510: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
85511: LD_INT 0
85513: PPUSH
85514: PPUSH
85515: PPUSH
// if not mc_bases or not skirmish then
85516: LD_EXP 46
85520: NOT
85521: PUSH
85522: LD_EXP 44
85526: NOT
85527: OR
85528: IFFALSE 85532
// exit ;
85530: GO 85722
// for i = 1 to mc_bases do
85532: LD_ADDR_VAR 0 4
85536: PUSH
85537: DOUBLE
85538: LD_INT 1
85540: DEC
85541: ST_TO_ADDR
85542: LD_EXP 46
85546: PUSH
85547: FOR_TO
85548: IFFALSE 85635
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
85550: LD_VAR 0 1
85554: PUSH
85555: LD_EXP 54
85559: PUSH
85560: LD_VAR 0 4
85564: ARRAY
85565: IN
85566: PUSH
85567: LD_VAR 0 1
85571: PUSH
85572: LD_EXP 55
85576: PUSH
85577: LD_VAR 0 4
85581: ARRAY
85582: IN
85583: NOT
85584: AND
85585: IFFALSE 85633
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
85587: LD_ADDR_EXP 55
85591: PUSH
85592: LD_EXP 55
85596: PPUSH
85597: LD_VAR 0 4
85601: PUSH
85602: LD_EXP 55
85606: PUSH
85607: LD_VAR 0 4
85611: ARRAY
85612: PUSH
85613: LD_INT 1
85615: PLUS
85616: PUSH
85617: EMPTY
85618: LIST
85619: LIST
85620: PPUSH
85621: LD_VAR 0 1
85625: PPUSH
85626: CALL 24294 0 3
85630: ST_TO_ADDR
// break ;
85631: GO 85635
// end ; end ;
85633: GO 85547
85635: POP
85636: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
85637: LD_VAR 0 1
85641: PPUSH
85642: CALL_OW 257
85646: PUSH
85647: LD_EXP 72
85651: IN
85652: PUSH
85653: LD_VAR 0 1
85657: PPUSH
85658: CALL_OW 266
85662: PUSH
85663: LD_INT 5
85665: EQUAL
85666: AND
85667: PUSH
85668: LD_VAR 0 2
85672: PPUSH
85673: CALL_OW 110
85677: PUSH
85678: LD_INT 18
85680: NONEQUAL
85681: AND
85682: IFFALSE 85722
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
85684: LD_VAR 0 2
85688: PPUSH
85689: CALL_OW 257
85693: PUSH
85694: LD_INT 5
85696: PUSH
85697: LD_INT 8
85699: PUSH
85700: LD_INT 9
85702: PUSH
85703: EMPTY
85704: LIST
85705: LIST
85706: LIST
85707: IN
85708: IFFALSE 85722
// SetClass ( unit , 1 ) ;
85710: LD_VAR 0 2
85714: PPUSH
85715: LD_INT 1
85717: PPUSH
85718: CALL_OW 336
// end ;
85722: LD_VAR 0 3
85726: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
85727: LD_INT 0
85729: PPUSH
85730: PPUSH
// if not mc_bases or not skirmish then
85731: LD_EXP 46
85735: NOT
85736: PUSH
85737: LD_EXP 44
85741: NOT
85742: OR
85743: IFFALSE 85747
// exit ;
85745: GO 85863
// if GetLives ( abandoned_vehicle ) > 250 then
85747: LD_VAR 0 2
85751: PPUSH
85752: CALL_OW 256
85756: PUSH
85757: LD_INT 250
85759: GREATER
85760: IFFALSE 85764
// exit ;
85762: GO 85863
// for i = 1 to mc_bases do
85764: LD_ADDR_VAR 0 6
85768: PUSH
85769: DOUBLE
85770: LD_INT 1
85772: DEC
85773: ST_TO_ADDR
85774: LD_EXP 46
85778: PUSH
85779: FOR_TO
85780: IFFALSE 85861
// begin if driver in mc_bases [ i ] then
85782: LD_VAR 0 1
85786: PUSH
85787: LD_EXP 46
85791: PUSH
85792: LD_VAR 0 6
85796: ARRAY
85797: IN
85798: IFFALSE 85859
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
85800: LD_VAR 0 1
85804: PPUSH
85805: LD_EXP 46
85809: PUSH
85810: LD_VAR 0 6
85814: ARRAY
85815: PPUSH
85816: LD_INT 2
85818: PUSH
85819: LD_INT 30
85821: PUSH
85822: LD_INT 0
85824: PUSH
85825: EMPTY
85826: LIST
85827: LIST
85828: PUSH
85829: LD_INT 30
85831: PUSH
85832: LD_INT 1
85834: PUSH
85835: EMPTY
85836: LIST
85837: LIST
85838: PUSH
85839: EMPTY
85840: LIST
85841: LIST
85842: LIST
85843: PPUSH
85844: CALL_OW 72
85848: PUSH
85849: LD_INT 1
85851: ARRAY
85852: PPUSH
85853: CALL_OW 112
// break ;
85857: GO 85861
// end ; end ;
85859: GO 85779
85861: POP
85862: POP
// end ; end_of_file end_of_file
85863: LD_VAR 0 5
85867: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
85868: LD_VAR 0 2
85872: PUSH
85873: LD_INT 100
85875: EQUAL
85876: IFFALSE 86825
// begin if not StreamModeActive then
85878: LD_EXP 89
85882: NOT
85883: IFFALSE 85893
// StreamModeActive := true ;
85885: LD_ADDR_EXP 89
85889: PUSH
85890: LD_INT 1
85892: ST_TO_ADDR
// if p3 = 0 then
85893: LD_VAR 0 3
85897: PUSH
85898: LD_INT 0
85900: EQUAL
85901: IFFALSE 85907
// InitStreamMode ;
85903: CALL 87058 0 0
// if p3 = 1 then
85907: LD_VAR 0 3
85911: PUSH
85912: LD_INT 1
85914: EQUAL
85915: IFFALSE 85925
// sRocket := true ;
85917: LD_ADDR_EXP 94
85921: PUSH
85922: LD_INT 1
85924: ST_TO_ADDR
// if p3 = 2 then
85925: LD_VAR 0 3
85929: PUSH
85930: LD_INT 2
85932: EQUAL
85933: IFFALSE 85943
// sSpeed := true ;
85935: LD_ADDR_EXP 93
85939: PUSH
85940: LD_INT 1
85942: ST_TO_ADDR
// if p3 = 3 then
85943: LD_VAR 0 3
85947: PUSH
85948: LD_INT 3
85950: EQUAL
85951: IFFALSE 85961
// sEngine := true ;
85953: LD_ADDR_EXP 95
85957: PUSH
85958: LD_INT 1
85960: ST_TO_ADDR
// if p3 = 4 then
85961: LD_VAR 0 3
85965: PUSH
85966: LD_INT 4
85968: EQUAL
85969: IFFALSE 85979
// sSpec := true ;
85971: LD_ADDR_EXP 92
85975: PUSH
85976: LD_INT 1
85978: ST_TO_ADDR
// if p3 = 5 then
85979: LD_VAR 0 3
85983: PUSH
85984: LD_INT 5
85986: EQUAL
85987: IFFALSE 85997
// sLevel := true ;
85989: LD_ADDR_EXP 96
85993: PUSH
85994: LD_INT 1
85996: ST_TO_ADDR
// if p3 = 6 then
85997: LD_VAR 0 3
86001: PUSH
86002: LD_INT 6
86004: EQUAL
86005: IFFALSE 86015
// sArmoury := true ;
86007: LD_ADDR_EXP 97
86011: PUSH
86012: LD_INT 1
86014: ST_TO_ADDR
// if p3 = 7 then
86015: LD_VAR 0 3
86019: PUSH
86020: LD_INT 7
86022: EQUAL
86023: IFFALSE 86033
// sRadar := true ;
86025: LD_ADDR_EXP 98
86029: PUSH
86030: LD_INT 1
86032: ST_TO_ADDR
// if p3 = 8 then
86033: LD_VAR 0 3
86037: PUSH
86038: LD_INT 8
86040: EQUAL
86041: IFFALSE 86051
// sBunker := true ;
86043: LD_ADDR_EXP 99
86047: PUSH
86048: LD_INT 1
86050: ST_TO_ADDR
// if p3 = 9 then
86051: LD_VAR 0 3
86055: PUSH
86056: LD_INT 9
86058: EQUAL
86059: IFFALSE 86069
// sHack := true ;
86061: LD_ADDR_EXP 100
86065: PUSH
86066: LD_INT 1
86068: ST_TO_ADDR
// if p3 = 10 then
86069: LD_VAR 0 3
86073: PUSH
86074: LD_INT 10
86076: EQUAL
86077: IFFALSE 86087
// sFire := true ;
86079: LD_ADDR_EXP 101
86083: PUSH
86084: LD_INT 1
86086: ST_TO_ADDR
// if p3 = 11 then
86087: LD_VAR 0 3
86091: PUSH
86092: LD_INT 11
86094: EQUAL
86095: IFFALSE 86105
// sRefresh := true ;
86097: LD_ADDR_EXP 102
86101: PUSH
86102: LD_INT 1
86104: ST_TO_ADDR
// if p3 = 12 then
86105: LD_VAR 0 3
86109: PUSH
86110: LD_INT 12
86112: EQUAL
86113: IFFALSE 86123
// sExp := true ;
86115: LD_ADDR_EXP 103
86119: PUSH
86120: LD_INT 1
86122: ST_TO_ADDR
// if p3 = 13 then
86123: LD_VAR 0 3
86127: PUSH
86128: LD_INT 13
86130: EQUAL
86131: IFFALSE 86141
// sDepot := true ;
86133: LD_ADDR_EXP 104
86137: PUSH
86138: LD_INT 1
86140: ST_TO_ADDR
// if p3 = 14 then
86141: LD_VAR 0 3
86145: PUSH
86146: LD_INT 14
86148: EQUAL
86149: IFFALSE 86159
// sFlag := true ;
86151: LD_ADDR_EXP 105
86155: PUSH
86156: LD_INT 1
86158: ST_TO_ADDR
// if p3 = 15 then
86159: LD_VAR 0 3
86163: PUSH
86164: LD_INT 15
86166: EQUAL
86167: IFFALSE 86177
// sKamikadze := true ;
86169: LD_ADDR_EXP 113
86173: PUSH
86174: LD_INT 1
86176: ST_TO_ADDR
// if p3 = 16 then
86177: LD_VAR 0 3
86181: PUSH
86182: LD_INT 16
86184: EQUAL
86185: IFFALSE 86195
// sTroll := true ;
86187: LD_ADDR_EXP 114
86191: PUSH
86192: LD_INT 1
86194: ST_TO_ADDR
// if p3 = 17 then
86195: LD_VAR 0 3
86199: PUSH
86200: LD_INT 17
86202: EQUAL
86203: IFFALSE 86213
// sSlow := true ;
86205: LD_ADDR_EXP 115
86209: PUSH
86210: LD_INT 1
86212: ST_TO_ADDR
// if p3 = 18 then
86213: LD_VAR 0 3
86217: PUSH
86218: LD_INT 18
86220: EQUAL
86221: IFFALSE 86231
// sLack := true ;
86223: LD_ADDR_EXP 116
86227: PUSH
86228: LD_INT 1
86230: ST_TO_ADDR
// if p3 = 19 then
86231: LD_VAR 0 3
86235: PUSH
86236: LD_INT 19
86238: EQUAL
86239: IFFALSE 86249
// sTank := true ;
86241: LD_ADDR_EXP 118
86245: PUSH
86246: LD_INT 1
86248: ST_TO_ADDR
// if p3 = 20 then
86249: LD_VAR 0 3
86253: PUSH
86254: LD_INT 20
86256: EQUAL
86257: IFFALSE 86267
// sRemote := true ;
86259: LD_ADDR_EXP 119
86263: PUSH
86264: LD_INT 1
86266: ST_TO_ADDR
// if p3 = 21 then
86267: LD_VAR 0 3
86271: PUSH
86272: LD_INT 21
86274: EQUAL
86275: IFFALSE 86285
// sPowell := true ;
86277: LD_ADDR_EXP 120
86281: PUSH
86282: LD_INT 1
86284: ST_TO_ADDR
// if p3 = 22 then
86285: LD_VAR 0 3
86289: PUSH
86290: LD_INT 22
86292: EQUAL
86293: IFFALSE 86303
// sTeleport := true ;
86295: LD_ADDR_EXP 123
86299: PUSH
86300: LD_INT 1
86302: ST_TO_ADDR
// if p3 = 23 then
86303: LD_VAR 0 3
86307: PUSH
86308: LD_INT 23
86310: EQUAL
86311: IFFALSE 86321
// sOilTower := true ;
86313: LD_ADDR_EXP 125
86317: PUSH
86318: LD_INT 1
86320: ST_TO_ADDR
// if p3 = 24 then
86321: LD_VAR 0 3
86325: PUSH
86326: LD_INT 24
86328: EQUAL
86329: IFFALSE 86339
// sShovel := true ;
86331: LD_ADDR_EXP 126
86335: PUSH
86336: LD_INT 1
86338: ST_TO_ADDR
// if p3 = 25 then
86339: LD_VAR 0 3
86343: PUSH
86344: LD_INT 25
86346: EQUAL
86347: IFFALSE 86357
// sSheik := true ;
86349: LD_ADDR_EXP 127
86353: PUSH
86354: LD_INT 1
86356: ST_TO_ADDR
// if p3 = 26 then
86357: LD_VAR 0 3
86361: PUSH
86362: LD_INT 26
86364: EQUAL
86365: IFFALSE 86375
// sEarthquake := true ;
86367: LD_ADDR_EXP 129
86371: PUSH
86372: LD_INT 1
86374: ST_TO_ADDR
// if p3 = 27 then
86375: LD_VAR 0 3
86379: PUSH
86380: LD_INT 27
86382: EQUAL
86383: IFFALSE 86393
// sAI := true ;
86385: LD_ADDR_EXP 130
86389: PUSH
86390: LD_INT 1
86392: ST_TO_ADDR
// if p3 = 28 then
86393: LD_VAR 0 3
86397: PUSH
86398: LD_INT 28
86400: EQUAL
86401: IFFALSE 86411
// sCargo := true ;
86403: LD_ADDR_EXP 133
86407: PUSH
86408: LD_INT 1
86410: ST_TO_ADDR
// if p3 = 29 then
86411: LD_VAR 0 3
86415: PUSH
86416: LD_INT 29
86418: EQUAL
86419: IFFALSE 86429
// sDLaser := true ;
86421: LD_ADDR_EXP 134
86425: PUSH
86426: LD_INT 1
86428: ST_TO_ADDR
// if p3 = 30 then
86429: LD_VAR 0 3
86433: PUSH
86434: LD_INT 30
86436: EQUAL
86437: IFFALSE 86447
// sExchange := true ;
86439: LD_ADDR_EXP 135
86443: PUSH
86444: LD_INT 1
86446: ST_TO_ADDR
// if p3 = 31 then
86447: LD_VAR 0 3
86451: PUSH
86452: LD_INT 31
86454: EQUAL
86455: IFFALSE 86465
// sFac := true ;
86457: LD_ADDR_EXP 136
86461: PUSH
86462: LD_INT 1
86464: ST_TO_ADDR
// if p3 = 32 then
86465: LD_VAR 0 3
86469: PUSH
86470: LD_INT 32
86472: EQUAL
86473: IFFALSE 86483
// sPower := true ;
86475: LD_ADDR_EXP 137
86479: PUSH
86480: LD_INT 1
86482: ST_TO_ADDR
// if p3 = 33 then
86483: LD_VAR 0 3
86487: PUSH
86488: LD_INT 33
86490: EQUAL
86491: IFFALSE 86501
// sRandom := true ;
86493: LD_ADDR_EXP 138
86497: PUSH
86498: LD_INT 1
86500: ST_TO_ADDR
// if p3 = 34 then
86501: LD_VAR 0 3
86505: PUSH
86506: LD_INT 34
86508: EQUAL
86509: IFFALSE 86519
// sShield := true ;
86511: LD_ADDR_EXP 139
86515: PUSH
86516: LD_INT 1
86518: ST_TO_ADDR
// if p3 = 35 then
86519: LD_VAR 0 3
86523: PUSH
86524: LD_INT 35
86526: EQUAL
86527: IFFALSE 86537
// sTime := true ;
86529: LD_ADDR_EXP 140
86533: PUSH
86534: LD_INT 1
86536: ST_TO_ADDR
// if p3 = 36 then
86537: LD_VAR 0 3
86541: PUSH
86542: LD_INT 36
86544: EQUAL
86545: IFFALSE 86555
// sTools := true ;
86547: LD_ADDR_EXP 141
86551: PUSH
86552: LD_INT 1
86554: ST_TO_ADDR
// if p3 = 101 then
86555: LD_VAR 0 3
86559: PUSH
86560: LD_INT 101
86562: EQUAL
86563: IFFALSE 86573
// sSold := true ;
86565: LD_ADDR_EXP 106
86569: PUSH
86570: LD_INT 1
86572: ST_TO_ADDR
// if p3 = 102 then
86573: LD_VAR 0 3
86577: PUSH
86578: LD_INT 102
86580: EQUAL
86581: IFFALSE 86591
// sDiff := true ;
86583: LD_ADDR_EXP 107
86587: PUSH
86588: LD_INT 1
86590: ST_TO_ADDR
// if p3 = 103 then
86591: LD_VAR 0 3
86595: PUSH
86596: LD_INT 103
86598: EQUAL
86599: IFFALSE 86609
// sFog := true ;
86601: LD_ADDR_EXP 110
86605: PUSH
86606: LD_INT 1
86608: ST_TO_ADDR
// if p3 = 104 then
86609: LD_VAR 0 3
86613: PUSH
86614: LD_INT 104
86616: EQUAL
86617: IFFALSE 86627
// sReset := true ;
86619: LD_ADDR_EXP 111
86623: PUSH
86624: LD_INT 1
86626: ST_TO_ADDR
// if p3 = 105 then
86627: LD_VAR 0 3
86631: PUSH
86632: LD_INT 105
86634: EQUAL
86635: IFFALSE 86645
// sSun := true ;
86637: LD_ADDR_EXP 112
86641: PUSH
86642: LD_INT 1
86644: ST_TO_ADDR
// if p3 = 106 then
86645: LD_VAR 0 3
86649: PUSH
86650: LD_INT 106
86652: EQUAL
86653: IFFALSE 86663
// sTiger := true ;
86655: LD_ADDR_EXP 108
86659: PUSH
86660: LD_INT 1
86662: ST_TO_ADDR
// if p3 = 107 then
86663: LD_VAR 0 3
86667: PUSH
86668: LD_INT 107
86670: EQUAL
86671: IFFALSE 86681
// sBomb := true ;
86673: LD_ADDR_EXP 109
86677: PUSH
86678: LD_INT 1
86680: ST_TO_ADDR
// if p3 = 108 then
86681: LD_VAR 0 3
86685: PUSH
86686: LD_INT 108
86688: EQUAL
86689: IFFALSE 86699
// sWound := true ;
86691: LD_ADDR_EXP 117
86695: PUSH
86696: LD_INT 1
86698: ST_TO_ADDR
// if p3 = 109 then
86699: LD_VAR 0 3
86703: PUSH
86704: LD_INT 109
86706: EQUAL
86707: IFFALSE 86717
// sBetray := true ;
86709: LD_ADDR_EXP 121
86713: PUSH
86714: LD_INT 1
86716: ST_TO_ADDR
// if p3 = 110 then
86717: LD_VAR 0 3
86721: PUSH
86722: LD_INT 110
86724: EQUAL
86725: IFFALSE 86735
// sContamin := true ;
86727: LD_ADDR_EXP 122
86731: PUSH
86732: LD_INT 1
86734: ST_TO_ADDR
// if p3 = 111 then
86735: LD_VAR 0 3
86739: PUSH
86740: LD_INT 111
86742: EQUAL
86743: IFFALSE 86753
// sOil := true ;
86745: LD_ADDR_EXP 124
86749: PUSH
86750: LD_INT 1
86752: ST_TO_ADDR
// if p3 = 112 then
86753: LD_VAR 0 3
86757: PUSH
86758: LD_INT 112
86760: EQUAL
86761: IFFALSE 86771
// sStu := true ;
86763: LD_ADDR_EXP 128
86767: PUSH
86768: LD_INT 1
86770: ST_TO_ADDR
// if p3 = 113 then
86771: LD_VAR 0 3
86775: PUSH
86776: LD_INT 113
86778: EQUAL
86779: IFFALSE 86789
// sBazooka := true ;
86781: LD_ADDR_EXP 131
86785: PUSH
86786: LD_INT 1
86788: ST_TO_ADDR
// if p3 = 114 then
86789: LD_VAR 0 3
86793: PUSH
86794: LD_INT 114
86796: EQUAL
86797: IFFALSE 86807
// sMortar := true ;
86799: LD_ADDR_EXP 132
86803: PUSH
86804: LD_INT 1
86806: ST_TO_ADDR
// if p3 = 115 then
86807: LD_VAR 0 3
86811: PUSH
86812: LD_INT 115
86814: EQUAL
86815: IFFALSE 86825
// sRanger := true ;
86817: LD_ADDR_EXP 142
86821: PUSH
86822: LD_INT 1
86824: ST_TO_ADDR
// end ; if p2 = 101 then
86825: LD_VAR 0 2
86829: PUSH
86830: LD_INT 101
86832: EQUAL
86833: IFFALSE 87036
// begin case p3 of 1 :
86835: LD_VAR 0 3
86839: PUSH
86840: LD_INT 1
86842: DOUBLE
86843: EQUAL
86844: IFTRUE 86848
86846: GO 86855
86848: POP
// hHackUnlimitedResources ; 2 :
86849: CALL 97130 0 0
86853: GO 87036
86855: LD_INT 2
86857: DOUBLE
86858: EQUAL
86859: IFTRUE 86863
86861: GO 86870
86863: POP
// hHackSetLevel10 ; 3 :
86864: CALL 97263 0 0
86868: GO 87036
86870: LD_INT 3
86872: DOUBLE
86873: EQUAL
86874: IFTRUE 86878
86876: GO 86885
86878: POP
// hHackSetLevel10YourUnits ; 4 :
86879: CALL 97348 0 0
86883: GO 87036
86885: LD_INT 4
86887: DOUBLE
86888: EQUAL
86889: IFTRUE 86893
86891: GO 86915
86893: POP
// hHackSpawnHuman ( p4 , p5 , p6 ) ; 5 :
86894: LD_VAR 0 4
86898: PPUSH
86899: LD_VAR 0 5
86903: PPUSH
86904: LD_VAR 0 6
86908: PPUSH
86909: CALL 97438 0 3
86913: GO 87036
86915: LD_INT 5
86917: DOUBLE
86918: EQUAL
86919: IFTRUE 86923
86921: GO 86930
86923: POP
// hHackSpawnVehicle ; 6 :
86924: CALL 97499 0 0
86928: GO 87036
86930: LD_INT 6
86932: DOUBLE
86933: EQUAL
86934: IFTRUE 86938
86936: GO 86945
86938: POP
// hHackInvincible ; 7 :
86939: CALL 98045 0 0
86943: GO 87036
86945: LD_INT 7
86947: DOUBLE
86948: EQUAL
86949: IFTRUE 86953
86951: GO 86960
86953: POP
// hHackInvisible ; 8 :
86954: CALL 98156 0 0
86958: GO 87036
86960: LD_INT 8
86962: DOUBLE
86963: EQUAL
86964: IFTRUE 86968
86966: GO 86975
86968: POP
// hHackChangeYourSide ; 9 :
86969: CALL 98213 0 0
86973: GO 87036
86975: LD_INT 9
86977: DOUBLE
86978: EQUAL
86979: IFTRUE 86983
86981: GO 86990
86983: POP
// hHackChangeUnitSide ; 10 :
86984: CALL 98255 0 0
86988: GO 87036
86990: LD_INT 10
86992: DOUBLE
86993: EQUAL
86994: IFTRUE 86998
86996: GO 87005
86998: POP
// hHackFog ; 11 :
86999: CALL 98356 0 0
87003: GO 87036
87005: LD_INT 11
87007: DOUBLE
87008: EQUAL
87009: IFTRUE 87013
87011: GO 87020
87013: POP
// hHackApeman ; 12 :
87014: CALL 98371 0 0
87018: GO 87036
87020: LD_INT 12
87022: DOUBLE
87023: EQUAL
87024: IFTRUE 87028
87026: GO 87035
87028: POP
// hHackBoom ; end ;
87029: CALL 98456 0 0
87033: GO 87036
87035: POP
// end ; end ;
87036: PPOPN 6
87038: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
87039: GO 87041
87041: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
87042: LD_STRING initStreamRollete();
87044: PPUSH
87045: CALL_OW 559
// InitStreamMode ;
87049: CALL 87058 0 0
// DefineStreamItems ( ) ;
87053: CALL 87498 0 0
// end ;
87057: END
// function InitStreamMode ; begin
87058: LD_INT 0
87060: PPUSH
// streamModeActive := false ;
87061: LD_ADDR_EXP 89
87065: PUSH
87066: LD_INT 0
87068: ST_TO_ADDR
// normalCounter := 36 ;
87069: LD_ADDR_EXP 90
87073: PUSH
87074: LD_INT 36
87076: ST_TO_ADDR
// hardcoreCounter := 16 ;
87077: LD_ADDR_EXP 91
87081: PUSH
87082: LD_INT 16
87084: ST_TO_ADDR
// sRocket := false ;
87085: LD_ADDR_EXP 94
87089: PUSH
87090: LD_INT 0
87092: ST_TO_ADDR
// sSpeed := false ;
87093: LD_ADDR_EXP 93
87097: PUSH
87098: LD_INT 0
87100: ST_TO_ADDR
// sEngine := false ;
87101: LD_ADDR_EXP 95
87105: PUSH
87106: LD_INT 0
87108: ST_TO_ADDR
// sSpec := false ;
87109: LD_ADDR_EXP 92
87113: PUSH
87114: LD_INT 0
87116: ST_TO_ADDR
// sLevel := false ;
87117: LD_ADDR_EXP 96
87121: PUSH
87122: LD_INT 0
87124: ST_TO_ADDR
// sArmoury := false ;
87125: LD_ADDR_EXP 97
87129: PUSH
87130: LD_INT 0
87132: ST_TO_ADDR
// sRadar := false ;
87133: LD_ADDR_EXP 98
87137: PUSH
87138: LD_INT 0
87140: ST_TO_ADDR
// sBunker := false ;
87141: LD_ADDR_EXP 99
87145: PUSH
87146: LD_INT 0
87148: ST_TO_ADDR
// sHack := false ;
87149: LD_ADDR_EXP 100
87153: PUSH
87154: LD_INT 0
87156: ST_TO_ADDR
// sFire := false ;
87157: LD_ADDR_EXP 101
87161: PUSH
87162: LD_INT 0
87164: ST_TO_ADDR
// sRefresh := false ;
87165: LD_ADDR_EXP 102
87169: PUSH
87170: LD_INT 0
87172: ST_TO_ADDR
// sExp := false ;
87173: LD_ADDR_EXP 103
87177: PUSH
87178: LD_INT 0
87180: ST_TO_ADDR
// sDepot := false ;
87181: LD_ADDR_EXP 104
87185: PUSH
87186: LD_INT 0
87188: ST_TO_ADDR
// sFlag := false ;
87189: LD_ADDR_EXP 105
87193: PUSH
87194: LD_INT 0
87196: ST_TO_ADDR
// sKamikadze := false ;
87197: LD_ADDR_EXP 113
87201: PUSH
87202: LD_INT 0
87204: ST_TO_ADDR
// sTroll := false ;
87205: LD_ADDR_EXP 114
87209: PUSH
87210: LD_INT 0
87212: ST_TO_ADDR
// sSlow := false ;
87213: LD_ADDR_EXP 115
87217: PUSH
87218: LD_INT 0
87220: ST_TO_ADDR
// sLack := false ;
87221: LD_ADDR_EXP 116
87225: PUSH
87226: LD_INT 0
87228: ST_TO_ADDR
// sTank := false ;
87229: LD_ADDR_EXP 118
87233: PUSH
87234: LD_INT 0
87236: ST_TO_ADDR
// sRemote := false ;
87237: LD_ADDR_EXP 119
87241: PUSH
87242: LD_INT 0
87244: ST_TO_ADDR
// sPowell := false ;
87245: LD_ADDR_EXP 120
87249: PUSH
87250: LD_INT 0
87252: ST_TO_ADDR
// sTeleport := false ;
87253: LD_ADDR_EXP 123
87257: PUSH
87258: LD_INT 0
87260: ST_TO_ADDR
// sOilTower := false ;
87261: LD_ADDR_EXP 125
87265: PUSH
87266: LD_INT 0
87268: ST_TO_ADDR
// sShovel := false ;
87269: LD_ADDR_EXP 126
87273: PUSH
87274: LD_INT 0
87276: ST_TO_ADDR
// sSheik := false ;
87277: LD_ADDR_EXP 127
87281: PUSH
87282: LD_INT 0
87284: ST_TO_ADDR
// sEarthquake := false ;
87285: LD_ADDR_EXP 129
87289: PUSH
87290: LD_INT 0
87292: ST_TO_ADDR
// sAI := false ;
87293: LD_ADDR_EXP 130
87297: PUSH
87298: LD_INT 0
87300: ST_TO_ADDR
// sCargo := false ;
87301: LD_ADDR_EXP 133
87305: PUSH
87306: LD_INT 0
87308: ST_TO_ADDR
// sDLaser := false ;
87309: LD_ADDR_EXP 134
87313: PUSH
87314: LD_INT 0
87316: ST_TO_ADDR
// sExchange := false ;
87317: LD_ADDR_EXP 135
87321: PUSH
87322: LD_INT 0
87324: ST_TO_ADDR
// sFac := false ;
87325: LD_ADDR_EXP 136
87329: PUSH
87330: LD_INT 0
87332: ST_TO_ADDR
// sPower := false ;
87333: LD_ADDR_EXP 137
87337: PUSH
87338: LD_INT 0
87340: ST_TO_ADDR
// sRandom := false ;
87341: LD_ADDR_EXP 138
87345: PUSH
87346: LD_INT 0
87348: ST_TO_ADDR
// sShield := false ;
87349: LD_ADDR_EXP 139
87353: PUSH
87354: LD_INT 0
87356: ST_TO_ADDR
// sTime := false ;
87357: LD_ADDR_EXP 140
87361: PUSH
87362: LD_INT 0
87364: ST_TO_ADDR
// sTools := false ;
87365: LD_ADDR_EXP 141
87369: PUSH
87370: LD_INT 0
87372: ST_TO_ADDR
// sSold := false ;
87373: LD_ADDR_EXP 106
87377: PUSH
87378: LD_INT 0
87380: ST_TO_ADDR
// sDiff := false ;
87381: LD_ADDR_EXP 107
87385: PUSH
87386: LD_INT 0
87388: ST_TO_ADDR
// sFog := false ;
87389: LD_ADDR_EXP 110
87393: PUSH
87394: LD_INT 0
87396: ST_TO_ADDR
// sReset := false ;
87397: LD_ADDR_EXP 111
87401: PUSH
87402: LD_INT 0
87404: ST_TO_ADDR
// sSun := false ;
87405: LD_ADDR_EXP 112
87409: PUSH
87410: LD_INT 0
87412: ST_TO_ADDR
// sTiger := false ;
87413: LD_ADDR_EXP 108
87417: PUSH
87418: LD_INT 0
87420: ST_TO_ADDR
// sBomb := false ;
87421: LD_ADDR_EXP 109
87425: PUSH
87426: LD_INT 0
87428: ST_TO_ADDR
// sWound := false ;
87429: LD_ADDR_EXP 117
87433: PUSH
87434: LD_INT 0
87436: ST_TO_ADDR
// sBetray := false ;
87437: LD_ADDR_EXP 121
87441: PUSH
87442: LD_INT 0
87444: ST_TO_ADDR
// sContamin := false ;
87445: LD_ADDR_EXP 122
87449: PUSH
87450: LD_INT 0
87452: ST_TO_ADDR
// sOil := false ;
87453: LD_ADDR_EXP 124
87457: PUSH
87458: LD_INT 0
87460: ST_TO_ADDR
// sStu := false ;
87461: LD_ADDR_EXP 128
87465: PUSH
87466: LD_INT 0
87468: ST_TO_ADDR
// sBazooka := false ;
87469: LD_ADDR_EXP 131
87473: PUSH
87474: LD_INT 0
87476: ST_TO_ADDR
// sMortar := false ;
87477: LD_ADDR_EXP 132
87481: PUSH
87482: LD_INT 0
87484: ST_TO_ADDR
// sRanger := false ;
87485: LD_ADDR_EXP 142
87489: PUSH
87490: LD_INT 0
87492: ST_TO_ADDR
// end ;
87493: LD_VAR 0 1
87497: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
87498: LD_INT 0
87500: PPUSH
87501: PPUSH
87502: PPUSH
87503: PPUSH
87504: PPUSH
// result := [ ] ;
87505: LD_ADDR_VAR 0 1
87509: PUSH
87510: EMPTY
87511: ST_TO_ADDR
// if campaign_id = 1 then
87512: LD_OWVAR 69
87516: PUSH
87517: LD_INT 1
87519: EQUAL
87520: IFFALSE 90458
// begin case mission_number of 1 :
87522: LD_OWVAR 70
87526: PUSH
87527: LD_INT 1
87529: DOUBLE
87530: EQUAL
87531: IFTRUE 87535
87533: GO 87599
87535: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
87536: LD_ADDR_VAR 0 1
87540: PUSH
87541: LD_INT 2
87543: PUSH
87544: LD_INT 4
87546: PUSH
87547: LD_INT 11
87549: PUSH
87550: LD_INT 12
87552: PUSH
87553: LD_INT 15
87555: PUSH
87556: LD_INT 16
87558: PUSH
87559: LD_INT 22
87561: PUSH
87562: LD_INT 23
87564: PUSH
87565: LD_INT 26
87567: PUSH
87568: EMPTY
87569: LIST
87570: LIST
87571: LIST
87572: LIST
87573: LIST
87574: LIST
87575: LIST
87576: LIST
87577: LIST
87578: PUSH
87579: LD_INT 101
87581: PUSH
87582: LD_INT 102
87584: PUSH
87585: LD_INT 106
87587: PUSH
87588: EMPTY
87589: LIST
87590: LIST
87591: LIST
87592: PUSH
87593: EMPTY
87594: LIST
87595: LIST
87596: ST_TO_ADDR
87597: GO 90456
87599: LD_INT 2
87601: DOUBLE
87602: EQUAL
87603: IFTRUE 87607
87605: GO 87679
87607: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
87608: LD_ADDR_VAR 0 1
87612: PUSH
87613: LD_INT 2
87615: PUSH
87616: LD_INT 4
87618: PUSH
87619: LD_INT 11
87621: PUSH
87622: LD_INT 12
87624: PUSH
87625: LD_INT 15
87627: PUSH
87628: LD_INT 16
87630: PUSH
87631: LD_INT 22
87633: PUSH
87634: LD_INT 23
87636: PUSH
87637: LD_INT 26
87639: PUSH
87640: EMPTY
87641: LIST
87642: LIST
87643: LIST
87644: LIST
87645: LIST
87646: LIST
87647: LIST
87648: LIST
87649: LIST
87650: PUSH
87651: LD_INT 101
87653: PUSH
87654: LD_INT 102
87656: PUSH
87657: LD_INT 105
87659: PUSH
87660: LD_INT 106
87662: PUSH
87663: LD_INT 108
87665: PUSH
87666: EMPTY
87667: LIST
87668: LIST
87669: LIST
87670: LIST
87671: LIST
87672: PUSH
87673: EMPTY
87674: LIST
87675: LIST
87676: ST_TO_ADDR
87677: GO 90456
87679: LD_INT 3
87681: DOUBLE
87682: EQUAL
87683: IFTRUE 87687
87685: GO 87763
87687: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
87688: LD_ADDR_VAR 0 1
87692: PUSH
87693: LD_INT 2
87695: PUSH
87696: LD_INT 4
87698: PUSH
87699: LD_INT 5
87701: PUSH
87702: LD_INT 11
87704: PUSH
87705: LD_INT 12
87707: PUSH
87708: LD_INT 15
87710: PUSH
87711: LD_INT 16
87713: PUSH
87714: LD_INT 22
87716: PUSH
87717: LD_INT 26
87719: PUSH
87720: LD_INT 36
87722: PUSH
87723: EMPTY
87724: LIST
87725: LIST
87726: LIST
87727: LIST
87728: LIST
87729: LIST
87730: LIST
87731: LIST
87732: LIST
87733: LIST
87734: PUSH
87735: LD_INT 101
87737: PUSH
87738: LD_INT 102
87740: PUSH
87741: LD_INT 105
87743: PUSH
87744: LD_INT 106
87746: PUSH
87747: LD_INT 108
87749: PUSH
87750: EMPTY
87751: LIST
87752: LIST
87753: LIST
87754: LIST
87755: LIST
87756: PUSH
87757: EMPTY
87758: LIST
87759: LIST
87760: ST_TO_ADDR
87761: GO 90456
87763: LD_INT 4
87765: DOUBLE
87766: EQUAL
87767: IFTRUE 87771
87769: GO 87855
87771: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
87772: LD_ADDR_VAR 0 1
87776: PUSH
87777: LD_INT 2
87779: PUSH
87780: LD_INT 4
87782: PUSH
87783: LD_INT 5
87785: PUSH
87786: LD_INT 8
87788: PUSH
87789: LD_INT 11
87791: PUSH
87792: LD_INT 12
87794: PUSH
87795: LD_INT 15
87797: PUSH
87798: LD_INT 16
87800: PUSH
87801: LD_INT 22
87803: PUSH
87804: LD_INT 23
87806: PUSH
87807: LD_INT 26
87809: PUSH
87810: LD_INT 36
87812: PUSH
87813: EMPTY
87814: LIST
87815: LIST
87816: LIST
87817: LIST
87818: LIST
87819: LIST
87820: LIST
87821: LIST
87822: LIST
87823: LIST
87824: LIST
87825: LIST
87826: PUSH
87827: LD_INT 101
87829: PUSH
87830: LD_INT 102
87832: PUSH
87833: LD_INT 105
87835: PUSH
87836: LD_INT 106
87838: PUSH
87839: LD_INT 108
87841: PUSH
87842: EMPTY
87843: LIST
87844: LIST
87845: LIST
87846: LIST
87847: LIST
87848: PUSH
87849: EMPTY
87850: LIST
87851: LIST
87852: ST_TO_ADDR
87853: GO 90456
87855: LD_INT 5
87857: DOUBLE
87858: EQUAL
87859: IFTRUE 87863
87861: GO 87963
87863: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
87864: LD_ADDR_VAR 0 1
87868: PUSH
87869: LD_INT 2
87871: PUSH
87872: LD_INT 4
87874: PUSH
87875: LD_INT 5
87877: PUSH
87878: LD_INT 6
87880: PUSH
87881: LD_INT 8
87883: PUSH
87884: LD_INT 11
87886: PUSH
87887: LD_INT 12
87889: PUSH
87890: LD_INT 15
87892: PUSH
87893: LD_INT 16
87895: PUSH
87896: LD_INT 22
87898: PUSH
87899: LD_INT 23
87901: PUSH
87902: LD_INT 25
87904: PUSH
87905: LD_INT 26
87907: PUSH
87908: LD_INT 36
87910: PUSH
87911: EMPTY
87912: LIST
87913: LIST
87914: LIST
87915: LIST
87916: LIST
87917: LIST
87918: LIST
87919: LIST
87920: LIST
87921: LIST
87922: LIST
87923: LIST
87924: LIST
87925: LIST
87926: PUSH
87927: LD_INT 101
87929: PUSH
87930: LD_INT 102
87932: PUSH
87933: LD_INT 105
87935: PUSH
87936: LD_INT 106
87938: PUSH
87939: LD_INT 108
87941: PUSH
87942: LD_INT 109
87944: PUSH
87945: LD_INT 112
87947: PUSH
87948: EMPTY
87949: LIST
87950: LIST
87951: LIST
87952: LIST
87953: LIST
87954: LIST
87955: LIST
87956: PUSH
87957: EMPTY
87958: LIST
87959: LIST
87960: ST_TO_ADDR
87961: GO 90456
87963: LD_INT 6
87965: DOUBLE
87966: EQUAL
87967: IFTRUE 87971
87969: GO 88091
87971: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
87972: LD_ADDR_VAR 0 1
87976: PUSH
87977: LD_INT 2
87979: PUSH
87980: LD_INT 4
87982: PUSH
87983: LD_INT 5
87985: PUSH
87986: LD_INT 6
87988: PUSH
87989: LD_INT 8
87991: PUSH
87992: LD_INT 11
87994: PUSH
87995: LD_INT 12
87997: PUSH
87998: LD_INT 15
88000: PUSH
88001: LD_INT 16
88003: PUSH
88004: LD_INT 20
88006: PUSH
88007: LD_INT 21
88009: PUSH
88010: LD_INT 22
88012: PUSH
88013: LD_INT 23
88015: PUSH
88016: LD_INT 25
88018: PUSH
88019: LD_INT 26
88021: PUSH
88022: LD_INT 30
88024: PUSH
88025: LD_INT 31
88027: PUSH
88028: LD_INT 32
88030: PUSH
88031: LD_INT 36
88033: PUSH
88034: EMPTY
88035: LIST
88036: LIST
88037: LIST
88038: LIST
88039: LIST
88040: LIST
88041: LIST
88042: LIST
88043: LIST
88044: LIST
88045: LIST
88046: LIST
88047: LIST
88048: LIST
88049: LIST
88050: LIST
88051: LIST
88052: LIST
88053: LIST
88054: PUSH
88055: LD_INT 101
88057: PUSH
88058: LD_INT 102
88060: PUSH
88061: LD_INT 105
88063: PUSH
88064: LD_INT 106
88066: PUSH
88067: LD_INT 108
88069: PUSH
88070: LD_INT 109
88072: PUSH
88073: LD_INT 112
88075: PUSH
88076: EMPTY
88077: LIST
88078: LIST
88079: LIST
88080: LIST
88081: LIST
88082: LIST
88083: LIST
88084: PUSH
88085: EMPTY
88086: LIST
88087: LIST
88088: ST_TO_ADDR
88089: GO 90456
88091: LD_INT 7
88093: DOUBLE
88094: EQUAL
88095: IFTRUE 88099
88097: GO 88199
88099: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
88100: LD_ADDR_VAR 0 1
88104: PUSH
88105: LD_INT 2
88107: PUSH
88108: LD_INT 4
88110: PUSH
88111: LD_INT 5
88113: PUSH
88114: LD_INT 7
88116: PUSH
88117: LD_INT 11
88119: PUSH
88120: LD_INT 12
88122: PUSH
88123: LD_INT 15
88125: PUSH
88126: LD_INT 16
88128: PUSH
88129: LD_INT 20
88131: PUSH
88132: LD_INT 21
88134: PUSH
88135: LD_INT 22
88137: PUSH
88138: LD_INT 23
88140: PUSH
88141: LD_INT 25
88143: PUSH
88144: LD_INT 26
88146: PUSH
88147: EMPTY
88148: LIST
88149: LIST
88150: LIST
88151: LIST
88152: LIST
88153: LIST
88154: LIST
88155: LIST
88156: LIST
88157: LIST
88158: LIST
88159: LIST
88160: LIST
88161: LIST
88162: PUSH
88163: LD_INT 101
88165: PUSH
88166: LD_INT 102
88168: PUSH
88169: LD_INT 103
88171: PUSH
88172: LD_INT 105
88174: PUSH
88175: LD_INT 106
88177: PUSH
88178: LD_INT 108
88180: PUSH
88181: LD_INT 112
88183: PUSH
88184: EMPTY
88185: LIST
88186: LIST
88187: LIST
88188: LIST
88189: LIST
88190: LIST
88191: LIST
88192: PUSH
88193: EMPTY
88194: LIST
88195: LIST
88196: ST_TO_ADDR
88197: GO 90456
88199: LD_INT 8
88201: DOUBLE
88202: EQUAL
88203: IFTRUE 88207
88205: GO 88335
88207: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
88208: LD_ADDR_VAR 0 1
88212: PUSH
88213: LD_INT 2
88215: PUSH
88216: LD_INT 4
88218: PUSH
88219: LD_INT 5
88221: PUSH
88222: LD_INT 6
88224: PUSH
88225: LD_INT 7
88227: PUSH
88228: LD_INT 8
88230: PUSH
88231: LD_INT 11
88233: PUSH
88234: LD_INT 12
88236: PUSH
88237: LD_INT 15
88239: PUSH
88240: LD_INT 16
88242: PUSH
88243: LD_INT 20
88245: PUSH
88246: LD_INT 21
88248: PUSH
88249: LD_INT 22
88251: PUSH
88252: LD_INT 23
88254: PUSH
88255: LD_INT 25
88257: PUSH
88258: LD_INT 26
88260: PUSH
88261: LD_INT 30
88263: PUSH
88264: LD_INT 31
88266: PUSH
88267: LD_INT 32
88269: PUSH
88270: LD_INT 36
88272: PUSH
88273: EMPTY
88274: LIST
88275: LIST
88276: LIST
88277: LIST
88278: LIST
88279: LIST
88280: LIST
88281: LIST
88282: LIST
88283: LIST
88284: LIST
88285: LIST
88286: LIST
88287: LIST
88288: LIST
88289: LIST
88290: LIST
88291: LIST
88292: LIST
88293: LIST
88294: PUSH
88295: LD_INT 101
88297: PUSH
88298: LD_INT 102
88300: PUSH
88301: LD_INT 103
88303: PUSH
88304: LD_INT 105
88306: PUSH
88307: LD_INT 106
88309: PUSH
88310: LD_INT 108
88312: PUSH
88313: LD_INT 109
88315: PUSH
88316: LD_INT 112
88318: PUSH
88319: EMPTY
88320: LIST
88321: LIST
88322: LIST
88323: LIST
88324: LIST
88325: LIST
88326: LIST
88327: LIST
88328: PUSH
88329: EMPTY
88330: LIST
88331: LIST
88332: ST_TO_ADDR
88333: GO 90456
88335: LD_INT 9
88337: DOUBLE
88338: EQUAL
88339: IFTRUE 88343
88341: GO 88479
88343: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
88344: LD_ADDR_VAR 0 1
88348: PUSH
88349: LD_INT 2
88351: PUSH
88352: LD_INT 4
88354: PUSH
88355: LD_INT 5
88357: PUSH
88358: LD_INT 6
88360: PUSH
88361: LD_INT 7
88363: PUSH
88364: LD_INT 8
88366: PUSH
88367: LD_INT 11
88369: PUSH
88370: LD_INT 12
88372: PUSH
88373: LD_INT 15
88375: PUSH
88376: LD_INT 16
88378: PUSH
88379: LD_INT 20
88381: PUSH
88382: LD_INT 21
88384: PUSH
88385: LD_INT 22
88387: PUSH
88388: LD_INT 23
88390: PUSH
88391: LD_INT 25
88393: PUSH
88394: LD_INT 26
88396: PUSH
88397: LD_INT 28
88399: PUSH
88400: LD_INT 30
88402: PUSH
88403: LD_INT 31
88405: PUSH
88406: LD_INT 32
88408: PUSH
88409: LD_INT 36
88411: PUSH
88412: EMPTY
88413: LIST
88414: LIST
88415: LIST
88416: LIST
88417: LIST
88418: LIST
88419: LIST
88420: LIST
88421: LIST
88422: LIST
88423: LIST
88424: LIST
88425: LIST
88426: LIST
88427: LIST
88428: LIST
88429: LIST
88430: LIST
88431: LIST
88432: LIST
88433: LIST
88434: PUSH
88435: LD_INT 101
88437: PUSH
88438: LD_INT 102
88440: PUSH
88441: LD_INT 103
88443: PUSH
88444: LD_INT 105
88446: PUSH
88447: LD_INT 106
88449: PUSH
88450: LD_INT 108
88452: PUSH
88453: LD_INT 109
88455: PUSH
88456: LD_INT 112
88458: PUSH
88459: LD_INT 114
88461: PUSH
88462: EMPTY
88463: LIST
88464: LIST
88465: LIST
88466: LIST
88467: LIST
88468: LIST
88469: LIST
88470: LIST
88471: LIST
88472: PUSH
88473: EMPTY
88474: LIST
88475: LIST
88476: ST_TO_ADDR
88477: GO 90456
88479: LD_INT 10
88481: DOUBLE
88482: EQUAL
88483: IFTRUE 88487
88485: GO 88671
88487: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
88488: LD_ADDR_VAR 0 1
88492: PUSH
88493: LD_INT 2
88495: PUSH
88496: LD_INT 4
88498: PUSH
88499: LD_INT 5
88501: PUSH
88502: LD_INT 6
88504: PUSH
88505: LD_INT 7
88507: PUSH
88508: LD_INT 8
88510: PUSH
88511: LD_INT 9
88513: PUSH
88514: LD_INT 10
88516: PUSH
88517: LD_INT 11
88519: PUSH
88520: LD_INT 12
88522: PUSH
88523: LD_INT 13
88525: PUSH
88526: LD_INT 14
88528: PUSH
88529: LD_INT 15
88531: PUSH
88532: LD_INT 16
88534: PUSH
88535: LD_INT 17
88537: PUSH
88538: LD_INT 18
88540: PUSH
88541: LD_INT 19
88543: PUSH
88544: LD_INT 20
88546: PUSH
88547: LD_INT 21
88549: PUSH
88550: LD_INT 22
88552: PUSH
88553: LD_INT 23
88555: PUSH
88556: LD_INT 24
88558: PUSH
88559: LD_INT 25
88561: PUSH
88562: LD_INT 26
88564: PUSH
88565: LD_INT 28
88567: PUSH
88568: LD_INT 30
88570: PUSH
88571: LD_INT 31
88573: PUSH
88574: LD_INT 32
88576: PUSH
88577: LD_INT 36
88579: PUSH
88580: EMPTY
88581: LIST
88582: LIST
88583: LIST
88584: LIST
88585: LIST
88586: LIST
88587: LIST
88588: LIST
88589: LIST
88590: LIST
88591: LIST
88592: LIST
88593: LIST
88594: LIST
88595: LIST
88596: LIST
88597: LIST
88598: LIST
88599: LIST
88600: LIST
88601: LIST
88602: LIST
88603: LIST
88604: LIST
88605: LIST
88606: LIST
88607: LIST
88608: LIST
88609: LIST
88610: PUSH
88611: LD_INT 101
88613: PUSH
88614: LD_INT 102
88616: PUSH
88617: LD_INT 103
88619: PUSH
88620: LD_INT 104
88622: PUSH
88623: LD_INT 105
88625: PUSH
88626: LD_INT 106
88628: PUSH
88629: LD_INT 107
88631: PUSH
88632: LD_INT 108
88634: PUSH
88635: LD_INT 109
88637: PUSH
88638: LD_INT 110
88640: PUSH
88641: LD_INT 111
88643: PUSH
88644: LD_INT 112
88646: PUSH
88647: LD_INT 114
88649: PUSH
88650: EMPTY
88651: LIST
88652: LIST
88653: LIST
88654: LIST
88655: LIST
88656: LIST
88657: LIST
88658: LIST
88659: LIST
88660: LIST
88661: LIST
88662: LIST
88663: LIST
88664: PUSH
88665: EMPTY
88666: LIST
88667: LIST
88668: ST_TO_ADDR
88669: GO 90456
88671: LD_INT 11
88673: DOUBLE
88674: EQUAL
88675: IFTRUE 88679
88677: GO 88871
88679: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
88680: LD_ADDR_VAR 0 1
88684: PUSH
88685: LD_INT 2
88687: PUSH
88688: LD_INT 3
88690: PUSH
88691: LD_INT 4
88693: PUSH
88694: LD_INT 5
88696: PUSH
88697: LD_INT 6
88699: PUSH
88700: LD_INT 7
88702: PUSH
88703: LD_INT 8
88705: PUSH
88706: LD_INT 9
88708: PUSH
88709: LD_INT 10
88711: PUSH
88712: LD_INT 11
88714: PUSH
88715: LD_INT 12
88717: PUSH
88718: LD_INT 13
88720: PUSH
88721: LD_INT 14
88723: PUSH
88724: LD_INT 15
88726: PUSH
88727: LD_INT 16
88729: PUSH
88730: LD_INT 17
88732: PUSH
88733: LD_INT 18
88735: PUSH
88736: LD_INT 19
88738: PUSH
88739: LD_INT 20
88741: PUSH
88742: LD_INT 21
88744: PUSH
88745: LD_INT 22
88747: PUSH
88748: LD_INT 23
88750: PUSH
88751: LD_INT 24
88753: PUSH
88754: LD_INT 25
88756: PUSH
88757: LD_INT 26
88759: PUSH
88760: LD_INT 28
88762: PUSH
88763: LD_INT 30
88765: PUSH
88766: LD_INT 31
88768: PUSH
88769: LD_INT 32
88771: PUSH
88772: LD_INT 34
88774: PUSH
88775: LD_INT 36
88777: PUSH
88778: EMPTY
88779: LIST
88780: LIST
88781: LIST
88782: LIST
88783: LIST
88784: LIST
88785: LIST
88786: LIST
88787: LIST
88788: LIST
88789: LIST
88790: LIST
88791: LIST
88792: LIST
88793: LIST
88794: LIST
88795: LIST
88796: LIST
88797: LIST
88798: LIST
88799: LIST
88800: LIST
88801: LIST
88802: LIST
88803: LIST
88804: LIST
88805: LIST
88806: LIST
88807: LIST
88808: LIST
88809: LIST
88810: PUSH
88811: LD_INT 101
88813: PUSH
88814: LD_INT 102
88816: PUSH
88817: LD_INT 103
88819: PUSH
88820: LD_INT 104
88822: PUSH
88823: LD_INT 105
88825: PUSH
88826: LD_INT 106
88828: PUSH
88829: LD_INT 107
88831: PUSH
88832: LD_INT 108
88834: PUSH
88835: LD_INT 109
88837: PUSH
88838: LD_INT 110
88840: PUSH
88841: LD_INT 111
88843: PUSH
88844: LD_INT 112
88846: PUSH
88847: LD_INT 114
88849: PUSH
88850: EMPTY
88851: LIST
88852: LIST
88853: LIST
88854: LIST
88855: LIST
88856: LIST
88857: LIST
88858: LIST
88859: LIST
88860: LIST
88861: LIST
88862: LIST
88863: LIST
88864: PUSH
88865: EMPTY
88866: LIST
88867: LIST
88868: ST_TO_ADDR
88869: GO 90456
88871: LD_INT 12
88873: DOUBLE
88874: EQUAL
88875: IFTRUE 88879
88877: GO 89087
88879: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
88880: LD_ADDR_VAR 0 1
88884: PUSH
88885: LD_INT 1
88887: PUSH
88888: LD_INT 2
88890: PUSH
88891: LD_INT 3
88893: PUSH
88894: LD_INT 4
88896: PUSH
88897: LD_INT 5
88899: PUSH
88900: LD_INT 6
88902: PUSH
88903: LD_INT 7
88905: PUSH
88906: LD_INT 8
88908: PUSH
88909: LD_INT 9
88911: PUSH
88912: LD_INT 10
88914: PUSH
88915: LD_INT 11
88917: PUSH
88918: LD_INT 12
88920: PUSH
88921: LD_INT 13
88923: PUSH
88924: LD_INT 14
88926: PUSH
88927: LD_INT 15
88929: PUSH
88930: LD_INT 16
88932: PUSH
88933: LD_INT 17
88935: PUSH
88936: LD_INT 18
88938: PUSH
88939: LD_INT 19
88941: PUSH
88942: LD_INT 20
88944: PUSH
88945: LD_INT 21
88947: PUSH
88948: LD_INT 22
88950: PUSH
88951: LD_INT 23
88953: PUSH
88954: LD_INT 24
88956: PUSH
88957: LD_INT 25
88959: PUSH
88960: LD_INT 26
88962: PUSH
88963: LD_INT 27
88965: PUSH
88966: LD_INT 28
88968: PUSH
88969: LD_INT 30
88971: PUSH
88972: LD_INT 31
88974: PUSH
88975: LD_INT 32
88977: PUSH
88978: LD_INT 33
88980: PUSH
88981: LD_INT 34
88983: PUSH
88984: LD_INT 36
88986: PUSH
88987: EMPTY
88988: LIST
88989: LIST
88990: LIST
88991: LIST
88992: LIST
88993: LIST
88994: LIST
88995: LIST
88996: LIST
88997: LIST
88998: LIST
88999: LIST
89000: LIST
89001: LIST
89002: LIST
89003: LIST
89004: LIST
89005: LIST
89006: LIST
89007: LIST
89008: LIST
89009: LIST
89010: LIST
89011: LIST
89012: LIST
89013: LIST
89014: LIST
89015: LIST
89016: LIST
89017: LIST
89018: LIST
89019: LIST
89020: LIST
89021: LIST
89022: PUSH
89023: LD_INT 101
89025: PUSH
89026: LD_INT 102
89028: PUSH
89029: LD_INT 103
89031: PUSH
89032: LD_INT 104
89034: PUSH
89035: LD_INT 105
89037: PUSH
89038: LD_INT 106
89040: PUSH
89041: LD_INT 107
89043: PUSH
89044: LD_INT 108
89046: PUSH
89047: LD_INT 109
89049: PUSH
89050: LD_INT 110
89052: PUSH
89053: LD_INT 111
89055: PUSH
89056: LD_INT 112
89058: PUSH
89059: LD_INT 113
89061: PUSH
89062: LD_INT 114
89064: PUSH
89065: EMPTY
89066: LIST
89067: LIST
89068: LIST
89069: LIST
89070: LIST
89071: LIST
89072: LIST
89073: LIST
89074: LIST
89075: LIST
89076: LIST
89077: LIST
89078: LIST
89079: LIST
89080: PUSH
89081: EMPTY
89082: LIST
89083: LIST
89084: ST_TO_ADDR
89085: GO 90456
89087: LD_INT 13
89089: DOUBLE
89090: EQUAL
89091: IFTRUE 89095
89093: GO 89291
89095: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
89096: LD_ADDR_VAR 0 1
89100: PUSH
89101: LD_INT 1
89103: PUSH
89104: LD_INT 2
89106: PUSH
89107: LD_INT 3
89109: PUSH
89110: LD_INT 4
89112: PUSH
89113: LD_INT 5
89115: PUSH
89116: LD_INT 8
89118: PUSH
89119: LD_INT 9
89121: PUSH
89122: LD_INT 10
89124: PUSH
89125: LD_INT 11
89127: PUSH
89128: LD_INT 12
89130: PUSH
89131: LD_INT 14
89133: PUSH
89134: LD_INT 15
89136: PUSH
89137: LD_INT 16
89139: PUSH
89140: LD_INT 17
89142: PUSH
89143: LD_INT 18
89145: PUSH
89146: LD_INT 19
89148: PUSH
89149: LD_INT 20
89151: PUSH
89152: LD_INT 21
89154: PUSH
89155: LD_INT 22
89157: PUSH
89158: LD_INT 23
89160: PUSH
89161: LD_INT 24
89163: PUSH
89164: LD_INT 25
89166: PUSH
89167: LD_INT 26
89169: PUSH
89170: LD_INT 27
89172: PUSH
89173: LD_INT 28
89175: PUSH
89176: LD_INT 30
89178: PUSH
89179: LD_INT 31
89181: PUSH
89182: LD_INT 32
89184: PUSH
89185: LD_INT 33
89187: PUSH
89188: LD_INT 34
89190: PUSH
89191: LD_INT 36
89193: PUSH
89194: EMPTY
89195: LIST
89196: LIST
89197: LIST
89198: LIST
89199: LIST
89200: LIST
89201: LIST
89202: LIST
89203: LIST
89204: LIST
89205: LIST
89206: LIST
89207: LIST
89208: LIST
89209: LIST
89210: LIST
89211: LIST
89212: LIST
89213: LIST
89214: LIST
89215: LIST
89216: LIST
89217: LIST
89218: LIST
89219: LIST
89220: LIST
89221: LIST
89222: LIST
89223: LIST
89224: LIST
89225: LIST
89226: PUSH
89227: LD_INT 101
89229: PUSH
89230: LD_INT 102
89232: PUSH
89233: LD_INT 103
89235: PUSH
89236: LD_INT 104
89238: PUSH
89239: LD_INT 105
89241: PUSH
89242: LD_INT 106
89244: PUSH
89245: LD_INT 107
89247: PUSH
89248: LD_INT 108
89250: PUSH
89251: LD_INT 109
89253: PUSH
89254: LD_INT 110
89256: PUSH
89257: LD_INT 111
89259: PUSH
89260: LD_INT 112
89262: PUSH
89263: LD_INT 113
89265: PUSH
89266: LD_INT 114
89268: PUSH
89269: EMPTY
89270: LIST
89271: LIST
89272: LIST
89273: LIST
89274: LIST
89275: LIST
89276: LIST
89277: LIST
89278: LIST
89279: LIST
89280: LIST
89281: LIST
89282: LIST
89283: LIST
89284: PUSH
89285: EMPTY
89286: LIST
89287: LIST
89288: ST_TO_ADDR
89289: GO 90456
89291: LD_INT 14
89293: DOUBLE
89294: EQUAL
89295: IFTRUE 89299
89297: GO 89511
89299: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
89300: LD_ADDR_VAR 0 1
89304: PUSH
89305: LD_INT 1
89307: PUSH
89308: LD_INT 2
89310: PUSH
89311: LD_INT 3
89313: PUSH
89314: LD_INT 4
89316: PUSH
89317: LD_INT 5
89319: PUSH
89320: LD_INT 6
89322: PUSH
89323: LD_INT 7
89325: PUSH
89326: LD_INT 8
89328: PUSH
89329: LD_INT 9
89331: PUSH
89332: LD_INT 10
89334: PUSH
89335: LD_INT 11
89337: PUSH
89338: LD_INT 12
89340: PUSH
89341: LD_INT 13
89343: PUSH
89344: LD_INT 14
89346: PUSH
89347: LD_INT 15
89349: PUSH
89350: LD_INT 16
89352: PUSH
89353: LD_INT 17
89355: PUSH
89356: LD_INT 18
89358: PUSH
89359: LD_INT 19
89361: PUSH
89362: LD_INT 20
89364: PUSH
89365: LD_INT 21
89367: PUSH
89368: LD_INT 22
89370: PUSH
89371: LD_INT 23
89373: PUSH
89374: LD_INT 24
89376: PUSH
89377: LD_INT 25
89379: PUSH
89380: LD_INT 26
89382: PUSH
89383: LD_INT 27
89385: PUSH
89386: LD_INT 28
89388: PUSH
89389: LD_INT 29
89391: PUSH
89392: LD_INT 30
89394: PUSH
89395: LD_INT 31
89397: PUSH
89398: LD_INT 32
89400: PUSH
89401: LD_INT 33
89403: PUSH
89404: LD_INT 34
89406: PUSH
89407: LD_INT 36
89409: PUSH
89410: EMPTY
89411: LIST
89412: LIST
89413: LIST
89414: LIST
89415: LIST
89416: LIST
89417: LIST
89418: LIST
89419: LIST
89420: LIST
89421: LIST
89422: LIST
89423: LIST
89424: LIST
89425: LIST
89426: LIST
89427: LIST
89428: LIST
89429: LIST
89430: LIST
89431: LIST
89432: LIST
89433: LIST
89434: LIST
89435: LIST
89436: LIST
89437: LIST
89438: LIST
89439: LIST
89440: LIST
89441: LIST
89442: LIST
89443: LIST
89444: LIST
89445: LIST
89446: PUSH
89447: LD_INT 101
89449: PUSH
89450: LD_INT 102
89452: PUSH
89453: LD_INT 103
89455: PUSH
89456: LD_INT 104
89458: PUSH
89459: LD_INT 105
89461: PUSH
89462: LD_INT 106
89464: PUSH
89465: LD_INT 107
89467: PUSH
89468: LD_INT 108
89470: PUSH
89471: LD_INT 109
89473: PUSH
89474: LD_INT 110
89476: PUSH
89477: LD_INT 111
89479: PUSH
89480: LD_INT 112
89482: PUSH
89483: LD_INT 113
89485: PUSH
89486: LD_INT 114
89488: PUSH
89489: EMPTY
89490: LIST
89491: LIST
89492: LIST
89493: LIST
89494: LIST
89495: LIST
89496: LIST
89497: LIST
89498: LIST
89499: LIST
89500: LIST
89501: LIST
89502: LIST
89503: LIST
89504: PUSH
89505: EMPTY
89506: LIST
89507: LIST
89508: ST_TO_ADDR
89509: GO 90456
89511: LD_INT 15
89513: DOUBLE
89514: EQUAL
89515: IFTRUE 89519
89517: GO 89731
89519: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
89520: LD_ADDR_VAR 0 1
89524: PUSH
89525: LD_INT 1
89527: PUSH
89528: LD_INT 2
89530: PUSH
89531: LD_INT 3
89533: PUSH
89534: LD_INT 4
89536: PUSH
89537: LD_INT 5
89539: PUSH
89540: LD_INT 6
89542: PUSH
89543: LD_INT 7
89545: PUSH
89546: LD_INT 8
89548: PUSH
89549: LD_INT 9
89551: PUSH
89552: LD_INT 10
89554: PUSH
89555: LD_INT 11
89557: PUSH
89558: LD_INT 12
89560: PUSH
89561: LD_INT 13
89563: PUSH
89564: LD_INT 14
89566: PUSH
89567: LD_INT 15
89569: PUSH
89570: LD_INT 16
89572: PUSH
89573: LD_INT 17
89575: PUSH
89576: LD_INT 18
89578: PUSH
89579: LD_INT 19
89581: PUSH
89582: LD_INT 20
89584: PUSH
89585: LD_INT 21
89587: PUSH
89588: LD_INT 22
89590: PUSH
89591: LD_INT 23
89593: PUSH
89594: LD_INT 24
89596: PUSH
89597: LD_INT 25
89599: PUSH
89600: LD_INT 26
89602: PUSH
89603: LD_INT 27
89605: PUSH
89606: LD_INT 28
89608: PUSH
89609: LD_INT 29
89611: PUSH
89612: LD_INT 30
89614: PUSH
89615: LD_INT 31
89617: PUSH
89618: LD_INT 32
89620: PUSH
89621: LD_INT 33
89623: PUSH
89624: LD_INT 34
89626: PUSH
89627: LD_INT 36
89629: PUSH
89630: EMPTY
89631: LIST
89632: LIST
89633: LIST
89634: LIST
89635: LIST
89636: LIST
89637: LIST
89638: LIST
89639: LIST
89640: LIST
89641: LIST
89642: LIST
89643: LIST
89644: LIST
89645: LIST
89646: LIST
89647: LIST
89648: LIST
89649: LIST
89650: LIST
89651: LIST
89652: LIST
89653: LIST
89654: LIST
89655: LIST
89656: LIST
89657: LIST
89658: LIST
89659: LIST
89660: LIST
89661: LIST
89662: LIST
89663: LIST
89664: LIST
89665: LIST
89666: PUSH
89667: LD_INT 101
89669: PUSH
89670: LD_INT 102
89672: PUSH
89673: LD_INT 103
89675: PUSH
89676: LD_INT 104
89678: PUSH
89679: LD_INT 105
89681: PUSH
89682: LD_INT 106
89684: PUSH
89685: LD_INT 107
89687: PUSH
89688: LD_INT 108
89690: PUSH
89691: LD_INT 109
89693: PUSH
89694: LD_INT 110
89696: PUSH
89697: LD_INT 111
89699: PUSH
89700: LD_INT 112
89702: PUSH
89703: LD_INT 113
89705: PUSH
89706: LD_INT 114
89708: PUSH
89709: EMPTY
89710: LIST
89711: LIST
89712: LIST
89713: LIST
89714: LIST
89715: LIST
89716: LIST
89717: LIST
89718: LIST
89719: LIST
89720: LIST
89721: LIST
89722: LIST
89723: LIST
89724: PUSH
89725: EMPTY
89726: LIST
89727: LIST
89728: ST_TO_ADDR
89729: GO 90456
89731: LD_INT 16
89733: DOUBLE
89734: EQUAL
89735: IFTRUE 89739
89737: GO 89863
89739: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
89740: LD_ADDR_VAR 0 1
89744: PUSH
89745: LD_INT 2
89747: PUSH
89748: LD_INT 4
89750: PUSH
89751: LD_INT 5
89753: PUSH
89754: LD_INT 7
89756: PUSH
89757: LD_INT 11
89759: PUSH
89760: LD_INT 12
89762: PUSH
89763: LD_INT 15
89765: PUSH
89766: LD_INT 16
89768: PUSH
89769: LD_INT 20
89771: PUSH
89772: LD_INT 21
89774: PUSH
89775: LD_INT 22
89777: PUSH
89778: LD_INT 23
89780: PUSH
89781: LD_INT 25
89783: PUSH
89784: LD_INT 26
89786: PUSH
89787: LD_INT 30
89789: PUSH
89790: LD_INT 31
89792: PUSH
89793: LD_INT 32
89795: PUSH
89796: LD_INT 33
89798: PUSH
89799: LD_INT 34
89801: PUSH
89802: EMPTY
89803: LIST
89804: LIST
89805: LIST
89806: LIST
89807: LIST
89808: LIST
89809: LIST
89810: LIST
89811: LIST
89812: LIST
89813: LIST
89814: LIST
89815: LIST
89816: LIST
89817: LIST
89818: LIST
89819: LIST
89820: LIST
89821: LIST
89822: PUSH
89823: LD_INT 101
89825: PUSH
89826: LD_INT 102
89828: PUSH
89829: LD_INT 103
89831: PUSH
89832: LD_INT 106
89834: PUSH
89835: LD_INT 108
89837: PUSH
89838: LD_INT 112
89840: PUSH
89841: LD_INT 113
89843: PUSH
89844: LD_INT 114
89846: PUSH
89847: EMPTY
89848: LIST
89849: LIST
89850: LIST
89851: LIST
89852: LIST
89853: LIST
89854: LIST
89855: LIST
89856: PUSH
89857: EMPTY
89858: LIST
89859: LIST
89860: ST_TO_ADDR
89861: GO 90456
89863: LD_INT 17
89865: DOUBLE
89866: EQUAL
89867: IFTRUE 89871
89869: GO 90083
89871: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
89872: LD_ADDR_VAR 0 1
89876: PUSH
89877: LD_INT 1
89879: PUSH
89880: LD_INT 2
89882: PUSH
89883: LD_INT 3
89885: PUSH
89886: LD_INT 4
89888: PUSH
89889: LD_INT 5
89891: PUSH
89892: LD_INT 6
89894: PUSH
89895: LD_INT 7
89897: PUSH
89898: LD_INT 8
89900: PUSH
89901: LD_INT 9
89903: PUSH
89904: LD_INT 10
89906: PUSH
89907: LD_INT 11
89909: PUSH
89910: LD_INT 12
89912: PUSH
89913: LD_INT 13
89915: PUSH
89916: LD_INT 14
89918: PUSH
89919: LD_INT 15
89921: PUSH
89922: LD_INT 16
89924: PUSH
89925: LD_INT 17
89927: PUSH
89928: LD_INT 18
89930: PUSH
89931: LD_INT 19
89933: PUSH
89934: LD_INT 20
89936: PUSH
89937: LD_INT 21
89939: PUSH
89940: LD_INT 22
89942: PUSH
89943: LD_INT 23
89945: PUSH
89946: LD_INT 24
89948: PUSH
89949: LD_INT 25
89951: PUSH
89952: LD_INT 26
89954: PUSH
89955: LD_INT 27
89957: PUSH
89958: LD_INT 28
89960: PUSH
89961: LD_INT 29
89963: PUSH
89964: LD_INT 30
89966: PUSH
89967: LD_INT 31
89969: PUSH
89970: LD_INT 32
89972: PUSH
89973: LD_INT 33
89975: PUSH
89976: LD_INT 34
89978: PUSH
89979: LD_INT 36
89981: PUSH
89982: EMPTY
89983: LIST
89984: LIST
89985: LIST
89986: LIST
89987: LIST
89988: LIST
89989: LIST
89990: LIST
89991: LIST
89992: LIST
89993: LIST
89994: LIST
89995: LIST
89996: LIST
89997: LIST
89998: LIST
89999: LIST
90000: LIST
90001: LIST
90002: LIST
90003: LIST
90004: LIST
90005: LIST
90006: LIST
90007: LIST
90008: LIST
90009: LIST
90010: LIST
90011: LIST
90012: LIST
90013: LIST
90014: LIST
90015: LIST
90016: LIST
90017: LIST
90018: PUSH
90019: LD_INT 101
90021: PUSH
90022: LD_INT 102
90024: PUSH
90025: LD_INT 103
90027: PUSH
90028: LD_INT 104
90030: PUSH
90031: LD_INT 105
90033: PUSH
90034: LD_INT 106
90036: PUSH
90037: LD_INT 107
90039: PUSH
90040: LD_INT 108
90042: PUSH
90043: LD_INT 109
90045: PUSH
90046: LD_INT 110
90048: PUSH
90049: LD_INT 111
90051: PUSH
90052: LD_INT 112
90054: PUSH
90055: LD_INT 113
90057: PUSH
90058: LD_INT 114
90060: PUSH
90061: EMPTY
90062: LIST
90063: LIST
90064: LIST
90065: LIST
90066: LIST
90067: LIST
90068: LIST
90069: LIST
90070: LIST
90071: LIST
90072: LIST
90073: LIST
90074: LIST
90075: LIST
90076: PUSH
90077: EMPTY
90078: LIST
90079: LIST
90080: ST_TO_ADDR
90081: GO 90456
90083: LD_INT 18
90085: DOUBLE
90086: EQUAL
90087: IFTRUE 90091
90089: GO 90227
90091: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
90092: LD_ADDR_VAR 0 1
90096: PUSH
90097: LD_INT 2
90099: PUSH
90100: LD_INT 4
90102: PUSH
90103: LD_INT 5
90105: PUSH
90106: LD_INT 7
90108: PUSH
90109: LD_INT 11
90111: PUSH
90112: LD_INT 12
90114: PUSH
90115: LD_INT 15
90117: PUSH
90118: LD_INT 16
90120: PUSH
90121: LD_INT 20
90123: PUSH
90124: LD_INT 21
90126: PUSH
90127: LD_INT 22
90129: PUSH
90130: LD_INT 23
90132: PUSH
90133: LD_INT 25
90135: PUSH
90136: LD_INT 26
90138: PUSH
90139: LD_INT 30
90141: PUSH
90142: LD_INT 31
90144: PUSH
90145: LD_INT 32
90147: PUSH
90148: LD_INT 33
90150: PUSH
90151: LD_INT 34
90153: PUSH
90154: LD_INT 35
90156: PUSH
90157: LD_INT 36
90159: PUSH
90160: EMPTY
90161: LIST
90162: LIST
90163: LIST
90164: LIST
90165: LIST
90166: LIST
90167: LIST
90168: LIST
90169: LIST
90170: LIST
90171: LIST
90172: LIST
90173: LIST
90174: LIST
90175: LIST
90176: LIST
90177: LIST
90178: LIST
90179: LIST
90180: LIST
90181: LIST
90182: PUSH
90183: LD_INT 101
90185: PUSH
90186: LD_INT 102
90188: PUSH
90189: LD_INT 103
90191: PUSH
90192: LD_INT 106
90194: PUSH
90195: LD_INT 108
90197: PUSH
90198: LD_INT 112
90200: PUSH
90201: LD_INT 113
90203: PUSH
90204: LD_INT 114
90206: PUSH
90207: LD_INT 115
90209: PUSH
90210: EMPTY
90211: LIST
90212: LIST
90213: LIST
90214: LIST
90215: LIST
90216: LIST
90217: LIST
90218: LIST
90219: LIST
90220: PUSH
90221: EMPTY
90222: LIST
90223: LIST
90224: ST_TO_ADDR
90225: GO 90456
90227: LD_INT 19
90229: DOUBLE
90230: EQUAL
90231: IFTRUE 90235
90233: GO 90455
90235: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
90236: LD_ADDR_VAR 0 1
90240: PUSH
90241: LD_INT 1
90243: PUSH
90244: LD_INT 2
90246: PUSH
90247: LD_INT 3
90249: PUSH
90250: LD_INT 4
90252: PUSH
90253: LD_INT 5
90255: PUSH
90256: LD_INT 6
90258: PUSH
90259: LD_INT 7
90261: PUSH
90262: LD_INT 8
90264: PUSH
90265: LD_INT 9
90267: PUSH
90268: LD_INT 10
90270: PUSH
90271: LD_INT 11
90273: PUSH
90274: LD_INT 12
90276: PUSH
90277: LD_INT 13
90279: PUSH
90280: LD_INT 14
90282: PUSH
90283: LD_INT 15
90285: PUSH
90286: LD_INT 16
90288: PUSH
90289: LD_INT 17
90291: PUSH
90292: LD_INT 18
90294: PUSH
90295: LD_INT 19
90297: PUSH
90298: LD_INT 20
90300: PUSH
90301: LD_INT 21
90303: PUSH
90304: LD_INT 22
90306: PUSH
90307: LD_INT 23
90309: PUSH
90310: LD_INT 24
90312: PUSH
90313: LD_INT 25
90315: PUSH
90316: LD_INT 26
90318: PUSH
90319: LD_INT 27
90321: PUSH
90322: LD_INT 28
90324: PUSH
90325: LD_INT 29
90327: PUSH
90328: LD_INT 30
90330: PUSH
90331: LD_INT 31
90333: PUSH
90334: LD_INT 32
90336: PUSH
90337: LD_INT 33
90339: PUSH
90340: LD_INT 34
90342: PUSH
90343: LD_INT 35
90345: PUSH
90346: LD_INT 36
90348: PUSH
90349: EMPTY
90350: LIST
90351: LIST
90352: LIST
90353: LIST
90354: LIST
90355: LIST
90356: LIST
90357: LIST
90358: LIST
90359: LIST
90360: LIST
90361: LIST
90362: LIST
90363: LIST
90364: LIST
90365: LIST
90366: LIST
90367: LIST
90368: LIST
90369: LIST
90370: LIST
90371: LIST
90372: LIST
90373: LIST
90374: LIST
90375: LIST
90376: LIST
90377: LIST
90378: LIST
90379: LIST
90380: LIST
90381: LIST
90382: LIST
90383: LIST
90384: LIST
90385: LIST
90386: PUSH
90387: LD_INT 101
90389: PUSH
90390: LD_INT 102
90392: PUSH
90393: LD_INT 103
90395: PUSH
90396: LD_INT 104
90398: PUSH
90399: LD_INT 105
90401: PUSH
90402: LD_INT 106
90404: PUSH
90405: LD_INT 107
90407: PUSH
90408: LD_INT 108
90410: PUSH
90411: LD_INT 109
90413: PUSH
90414: LD_INT 110
90416: PUSH
90417: LD_INT 111
90419: PUSH
90420: LD_INT 112
90422: PUSH
90423: LD_INT 113
90425: PUSH
90426: LD_INT 114
90428: PUSH
90429: LD_INT 115
90431: PUSH
90432: EMPTY
90433: LIST
90434: LIST
90435: LIST
90436: LIST
90437: LIST
90438: LIST
90439: LIST
90440: LIST
90441: LIST
90442: LIST
90443: LIST
90444: LIST
90445: LIST
90446: LIST
90447: LIST
90448: PUSH
90449: EMPTY
90450: LIST
90451: LIST
90452: ST_TO_ADDR
90453: GO 90456
90455: POP
// end else
90456: GO 90675
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
90458: LD_ADDR_VAR 0 1
90462: PUSH
90463: LD_INT 1
90465: PUSH
90466: LD_INT 2
90468: PUSH
90469: LD_INT 3
90471: PUSH
90472: LD_INT 4
90474: PUSH
90475: LD_INT 5
90477: PUSH
90478: LD_INT 6
90480: PUSH
90481: LD_INT 7
90483: PUSH
90484: LD_INT 8
90486: PUSH
90487: LD_INT 9
90489: PUSH
90490: LD_INT 10
90492: PUSH
90493: LD_INT 11
90495: PUSH
90496: LD_INT 12
90498: PUSH
90499: LD_INT 13
90501: PUSH
90502: LD_INT 14
90504: PUSH
90505: LD_INT 15
90507: PUSH
90508: LD_INT 16
90510: PUSH
90511: LD_INT 17
90513: PUSH
90514: LD_INT 18
90516: PUSH
90517: LD_INT 19
90519: PUSH
90520: LD_INT 20
90522: PUSH
90523: LD_INT 21
90525: PUSH
90526: LD_INT 22
90528: PUSH
90529: LD_INT 23
90531: PUSH
90532: LD_INT 24
90534: PUSH
90535: LD_INT 25
90537: PUSH
90538: LD_INT 26
90540: PUSH
90541: LD_INT 27
90543: PUSH
90544: LD_INT 28
90546: PUSH
90547: LD_INT 29
90549: PUSH
90550: LD_INT 30
90552: PUSH
90553: LD_INT 31
90555: PUSH
90556: LD_INT 32
90558: PUSH
90559: LD_INT 33
90561: PUSH
90562: LD_INT 34
90564: PUSH
90565: LD_INT 35
90567: PUSH
90568: LD_INT 36
90570: PUSH
90571: EMPTY
90572: LIST
90573: LIST
90574: LIST
90575: LIST
90576: LIST
90577: LIST
90578: LIST
90579: LIST
90580: LIST
90581: LIST
90582: LIST
90583: LIST
90584: LIST
90585: LIST
90586: LIST
90587: LIST
90588: LIST
90589: LIST
90590: LIST
90591: LIST
90592: LIST
90593: LIST
90594: LIST
90595: LIST
90596: LIST
90597: LIST
90598: LIST
90599: LIST
90600: LIST
90601: LIST
90602: LIST
90603: LIST
90604: LIST
90605: LIST
90606: LIST
90607: LIST
90608: PUSH
90609: LD_INT 101
90611: PUSH
90612: LD_INT 102
90614: PUSH
90615: LD_INT 103
90617: PUSH
90618: LD_INT 104
90620: PUSH
90621: LD_INT 105
90623: PUSH
90624: LD_INT 106
90626: PUSH
90627: LD_INT 107
90629: PUSH
90630: LD_INT 108
90632: PUSH
90633: LD_INT 109
90635: PUSH
90636: LD_INT 110
90638: PUSH
90639: LD_INT 111
90641: PUSH
90642: LD_INT 112
90644: PUSH
90645: LD_INT 113
90647: PUSH
90648: LD_INT 114
90650: PUSH
90651: LD_INT 115
90653: PUSH
90654: EMPTY
90655: LIST
90656: LIST
90657: LIST
90658: LIST
90659: LIST
90660: LIST
90661: LIST
90662: LIST
90663: LIST
90664: LIST
90665: LIST
90666: LIST
90667: LIST
90668: LIST
90669: LIST
90670: PUSH
90671: EMPTY
90672: LIST
90673: LIST
90674: ST_TO_ADDR
// if result then
90675: LD_VAR 0 1
90679: IFFALSE 90968
// begin normal :=  ;
90681: LD_ADDR_VAR 0 3
90685: PUSH
90686: LD_STRING 
90688: ST_TO_ADDR
// hardcore :=  ;
90689: LD_ADDR_VAR 0 4
90693: PUSH
90694: LD_STRING 
90696: ST_TO_ADDR
// for i = 1 to normalCounter do
90697: LD_ADDR_VAR 0 5
90701: PUSH
90702: DOUBLE
90703: LD_INT 1
90705: DEC
90706: ST_TO_ADDR
90707: LD_EXP 90
90711: PUSH
90712: FOR_TO
90713: IFFALSE 90814
// begin tmp := 0 ;
90715: LD_ADDR_VAR 0 2
90719: PUSH
90720: LD_STRING 0
90722: ST_TO_ADDR
// if result [ 1 ] then
90723: LD_VAR 0 1
90727: PUSH
90728: LD_INT 1
90730: ARRAY
90731: IFFALSE 90796
// if result [ 1 ] [ 1 ] = i then
90733: LD_VAR 0 1
90737: PUSH
90738: LD_INT 1
90740: ARRAY
90741: PUSH
90742: LD_INT 1
90744: ARRAY
90745: PUSH
90746: LD_VAR 0 5
90750: EQUAL
90751: IFFALSE 90796
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
90753: LD_ADDR_VAR 0 1
90757: PUSH
90758: LD_VAR 0 1
90762: PPUSH
90763: LD_INT 1
90765: PPUSH
90766: LD_VAR 0 1
90770: PUSH
90771: LD_INT 1
90773: ARRAY
90774: PPUSH
90775: LD_INT 1
90777: PPUSH
90778: CALL_OW 3
90782: PPUSH
90783: CALL_OW 1
90787: ST_TO_ADDR
// tmp := 1 ;
90788: LD_ADDR_VAR 0 2
90792: PUSH
90793: LD_STRING 1
90795: ST_TO_ADDR
// end ; normal := normal & tmp ;
90796: LD_ADDR_VAR 0 3
90800: PUSH
90801: LD_VAR 0 3
90805: PUSH
90806: LD_VAR 0 2
90810: STR
90811: ST_TO_ADDR
// end ;
90812: GO 90712
90814: POP
90815: POP
// for i = 1 to hardcoreCounter do
90816: LD_ADDR_VAR 0 5
90820: PUSH
90821: DOUBLE
90822: LD_INT 1
90824: DEC
90825: ST_TO_ADDR
90826: LD_EXP 91
90830: PUSH
90831: FOR_TO
90832: IFFALSE 90937
// begin tmp := 0 ;
90834: LD_ADDR_VAR 0 2
90838: PUSH
90839: LD_STRING 0
90841: ST_TO_ADDR
// if result [ 2 ] then
90842: LD_VAR 0 1
90846: PUSH
90847: LD_INT 2
90849: ARRAY
90850: IFFALSE 90919
// if result [ 2 ] [ 1 ] = 100 + i then
90852: LD_VAR 0 1
90856: PUSH
90857: LD_INT 2
90859: ARRAY
90860: PUSH
90861: LD_INT 1
90863: ARRAY
90864: PUSH
90865: LD_INT 100
90867: PUSH
90868: LD_VAR 0 5
90872: PLUS
90873: EQUAL
90874: IFFALSE 90919
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
90876: LD_ADDR_VAR 0 1
90880: PUSH
90881: LD_VAR 0 1
90885: PPUSH
90886: LD_INT 2
90888: PPUSH
90889: LD_VAR 0 1
90893: PUSH
90894: LD_INT 2
90896: ARRAY
90897: PPUSH
90898: LD_INT 1
90900: PPUSH
90901: CALL_OW 3
90905: PPUSH
90906: CALL_OW 1
90910: ST_TO_ADDR
// tmp := 1 ;
90911: LD_ADDR_VAR 0 2
90915: PUSH
90916: LD_STRING 1
90918: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
90919: LD_ADDR_VAR 0 4
90923: PUSH
90924: LD_VAR 0 4
90928: PUSH
90929: LD_VAR 0 2
90933: STR
90934: ST_TO_ADDR
// end ;
90935: GO 90831
90937: POP
90938: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
90939: LD_STRING getStreamItemsFromMission("
90941: PUSH
90942: LD_VAR 0 3
90946: STR
90947: PUSH
90948: LD_STRING ","
90950: STR
90951: PUSH
90952: LD_VAR 0 4
90956: STR
90957: PUSH
90958: LD_STRING ")
90960: STR
90961: PPUSH
90962: CALL_OW 559
// end else
90966: GO 90975
// ToLua ( getStreamItemsFromMission("","") ) ;
90968: LD_STRING getStreamItemsFromMission("","")
90970: PPUSH
90971: CALL_OW 559
// end ;
90975: LD_VAR 0 1
90979: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
90980: LD_EXP 89
90984: PUSH
90985: LD_EXP 94
90989: AND
90990: IFFALSE 91114
90992: GO 90994
90994: DISABLE
90995: LD_INT 0
90997: PPUSH
90998: PPUSH
// begin enable ;
90999: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
91000: LD_ADDR_VAR 0 2
91004: PUSH
91005: LD_INT 22
91007: PUSH
91008: LD_OWVAR 2
91012: PUSH
91013: EMPTY
91014: LIST
91015: LIST
91016: PUSH
91017: LD_INT 2
91019: PUSH
91020: LD_INT 34
91022: PUSH
91023: LD_INT 7
91025: PUSH
91026: EMPTY
91027: LIST
91028: LIST
91029: PUSH
91030: LD_INT 34
91032: PUSH
91033: LD_INT 45
91035: PUSH
91036: EMPTY
91037: LIST
91038: LIST
91039: PUSH
91040: LD_INT 34
91042: PUSH
91043: LD_INT 28
91045: PUSH
91046: EMPTY
91047: LIST
91048: LIST
91049: PUSH
91050: LD_INT 34
91052: PUSH
91053: LD_INT 47
91055: PUSH
91056: EMPTY
91057: LIST
91058: LIST
91059: PUSH
91060: EMPTY
91061: LIST
91062: LIST
91063: LIST
91064: LIST
91065: LIST
91066: PUSH
91067: EMPTY
91068: LIST
91069: LIST
91070: PPUSH
91071: CALL_OW 69
91075: ST_TO_ADDR
// if not tmp then
91076: LD_VAR 0 2
91080: NOT
91081: IFFALSE 91085
// exit ;
91083: GO 91114
// for i in tmp do
91085: LD_ADDR_VAR 0 1
91089: PUSH
91090: LD_VAR 0 2
91094: PUSH
91095: FOR_IN
91096: IFFALSE 91112
// begin SetLives ( i , 0 ) ;
91098: LD_VAR 0 1
91102: PPUSH
91103: LD_INT 0
91105: PPUSH
91106: CALL_OW 234
// end ;
91110: GO 91095
91112: POP
91113: POP
// end ;
91114: PPOPN 2
91116: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
91117: LD_EXP 89
91121: PUSH
91122: LD_EXP 95
91126: AND
91127: IFFALSE 91211
91129: GO 91131
91131: DISABLE
91132: LD_INT 0
91134: PPUSH
91135: PPUSH
// begin enable ;
91136: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
91137: LD_ADDR_VAR 0 2
91141: PUSH
91142: LD_INT 22
91144: PUSH
91145: LD_OWVAR 2
91149: PUSH
91150: EMPTY
91151: LIST
91152: LIST
91153: PUSH
91154: LD_INT 32
91156: PUSH
91157: LD_INT 3
91159: PUSH
91160: EMPTY
91161: LIST
91162: LIST
91163: PUSH
91164: EMPTY
91165: LIST
91166: LIST
91167: PPUSH
91168: CALL_OW 69
91172: ST_TO_ADDR
// if not tmp then
91173: LD_VAR 0 2
91177: NOT
91178: IFFALSE 91182
// exit ;
91180: GO 91211
// for i in tmp do
91182: LD_ADDR_VAR 0 1
91186: PUSH
91187: LD_VAR 0 2
91191: PUSH
91192: FOR_IN
91193: IFFALSE 91209
// begin SetLives ( i , 0 ) ;
91195: LD_VAR 0 1
91199: PPUSH
91200: LD_INT 0
91202: PPUSH
91203: CALL_OW 234
// end ;
91207: GO 91192
91209: POP
91210: POP
// end ;
91211: PPOPN 2
91213: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
91214: LD_EXP 89
91218: PUSH
91219: LD_EXP 92
91223: AND
91224: IFFALSE 91317
91226: GO 91228
91228: DISABLE
91229: LD_INT 0
91231: PPUSH
// begin enable ;
91232: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
91233: LD_ADDR_VAR 0 1
91237: PUSH
91238: LD_INT 22
91240: PUSH
91241: LD_OWVAR 2
91245: PUSH
91246: EMPTY
91247: LIST
91248: LIST
91249: PUSH
91250: LD_INT 2
91252: PUSH
91253: LD_INT 25
91255: PUSH
91256: LD_INT 5
91258: PUSH
91259: EMPTY
91260: LIST
91261: LIST
91262: PUSH
91263: LD_INT 25
91265: PUSH
91266: LD_INT 9
91268: PUSH
91269: EMPTY
91270: LIST
91271: LIST
91272: PUSH
91273: LD_INT 25
91275: PUSH
91276: LD_INT 8
91278: PUSH
91279: EMPTY
91280: LIST
91281: LIST
91282: PUSH
91283: EMPTY
91284: LIST
91285: LIST
91286: LIST
91287: LIST
91288: PUSH
91289: EMPTY
91290: LIST
91291: LIST
91292: PPUSH
91293: CALL_OW 69
91297: PUSH
91298: FOR_IN
91299: IFFALSE 91315
// begin SetClass ( i , 1 ) ;
91301: LD_VAR 0 1
91305: PPUSH
91306: LD_INT 1
91308: PPUSH
91309: CALL_OW 336
// end ;
91313: GO 91298
91315: POP
91316: POP
// end ;
91317: PPOPN 1
91319: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
91320: LD_EXP 89
91324: PUSH
91325: LD_EXP 93
91329: AND
91330: PUSH
91331: LD_OWVAR 65
91335: PUSH
91336: LD_INT 7
91338: LESS
91339: AND
91340: IFFALSE 91354
91342: GO 91344
91344: DISABLE
// begin enable ;
91345: ENABLE
// game_speed := 7 ;
91346: LD_ADDR_OWVAR 65
91350: PUSH
91351: LD_INT 7
91353: ST_TO_ADDR
// end ;
91354: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
91355: LD_EXP 89
91359: PUSH
91360: LD_EXP 96
91364: AND
91365: IFFALSE 91567
91367: GO 91369
91369: DISABLE
91370: LD_INT 0
91372: PPUSH
91373: PPUSH
91374: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
91375: LD_ADDR_VAR 0 3
91379: PUSH
91380: LD_INT 81
91382: PUSH
91383: LD_OWVAR 2
91387: PUSH
91388: EMPTY
91389: LIST
91390: LIST
91391: PUSH
91392: LD_INT 21
91394: PUSH
91395: LD_INT 1
91397: PUSH
91398: EMPTY
91399: LIST
91400: LIST
91401: PUSH
91402: EMPTY
91403: LIST
91404: LIST
91405: PPUSH
91406: CALL_OW 69
91410: ST_TO_ADDR
// if not tmp then
91411: LD_VAR 0 3
91415: NOT
91416: IFFALSE 91420
// exit ;
91418: GO 91567
// if tmp > 5 then
91420: LD_VAR 0 3
91424: PUSH
91425: LD_INT 5
91427: GREATER
91428: IFFALSE 91440
// k := 5 else
91430: LD_ADDR_VAR 0 2
91434: PUSH
91435: LD_INT 5
91437: ST_TO_ADDR
91438: GO 91450
// k := tmp ;
91440: LD_ADDR_VAR 0 2
91444: PUSH
91445: LD_VAR 0 3
91449: ST_TO_ADDR
// for i := 1 to k do
91450: LD_ADDR_VAR 0 1
91454: PUSH
91455: DOUBLE
91456: LD_INT 1
91458: DEC
91459: ST_TO_ADDR
91460: LD_VAR 0 2
91464: PUSH
91465: FOR_TO
91466: IFFALSE 91565
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
91468: LD_VAR 0 3
91472: PUSH
91473: LD_VAR 0 1
91477: ARRAY
91478: PPUSH
91479: LD_VAR 0 1
91483: PUSH
91484: LD_INT 4
91486: MOD
91487: PUSH
91488: LD_INT 1
91490: PLUS
91491: PPUSH
91492: CALL_OW 259
91496: PUSH
91497: LD_INT 10
91499: LESS
91500: IFFALSE 91563
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
91502: LD_VAR 0 3
91506: PUSH
91507: LD_VAR 0 1
91511: ARRAY
91512: PPUSH
91513: LD_VAR 0 1
91517: PUSH
91518: LD_INT 4
91520: MOD
91521: PUSH
91522: LD_INT 1
91524: PLUS
91525: PPUSH
91526: LD_VAR 0 3
91530: PUSH
91531: LD_VAR 0 1
91535: ARRAY
91536: PPUSH
91537: LD_VAR 0 1
91541: PUSH
91542: LD_INT 4
91544: MOD
91545: PUSH
91546: LD_INT 1
91548: PLUS
91549: PPUSH
91550: CALL_OW 259
91554: PUSH
91555: LD_INT 1
91557: PLUS
91558: PPUSH
91559: CALL_OW 237
91563: GO 91465
91565: POP
91566: POP
// end ;
91567: PPOPN 3
91569: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
91570: LD_EXP 89
91574: PUSH
91575: LD_EXP 97
91579: AND
91580: IFFALSE 91600
91582: GO 91584
91584: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
91585: LD_INT 4
91587: PPUSH
91588: LD_OWVAR 2
91592: PPUSH
91593: LD_INT 0
91595: PPUSH
91596: CALL_OW 324
91600: END
// every 0 0$1 trigger StreamModeActive and sShovel do
91601: LD_EXP 89
91605: PUSH
91606: LD_EXP 126
91610: AND
91611: IFFALSE 91631
91613: GO 91615
91615: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
91616: LD_INT 19
91618: PPUSH
91619: LD_OWVAR 2
91623: PPUSH
91624: LD_INT 0
91626: PPUSH
91627: CALL_OW 324
91631: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
91632: LD_EXP 89
91636: PUSH
91637: LD_EXP 98
91641: AND
91642: IFFALSE 91744
91644: GO 91646
91646: DISABLE
91647: LD_INT 0
91649: PPUSH
91650: PPUSH
// begin enable ;
91651: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
91652: LD_ADDR_VAR 0 2
91656: PUSH
91657: LD_INT 22
91659: PUSH
91660: LD_OWVAR 2
91664: PUSH
91665: EMPTY
91666: LIST
91667: LIST
91668: PUSH
91669: LD_INT 2
91671: PUSH
91672: LD_INT 34
91674: PUSH
91675: LD_INT 11
91677: PUSH
91678: EMPTY
91679: LIST
91680: LIST
91681: PUSH
91682: LD_INT 34
91684: PUSH
91685: LD_INT 30
91687: PUSH
91688: EMPTY
91689: LIST
91690: LIST
91691: PUSH
91692: EMPTY
91693: LIST
91694: LIST
91695: LIST
91696: PUSH
91697: EMPTY
91698: LIST
91699: LIST
91700: PPUSH
91701: CALL_OW 69
91705: ST_TO_ADDR
// if not tmp then
91706: LD_VAR 0 2
91710: NOT
91711: IFFALSE 91715
// exit ;
91713: GO 91744
// for i in tmp do
91715: LD_ADDR_VAR 0 1
91719: PUSH
91720: LD_VAR 0 2
91724: PUSH
91725: FOR_IN
91726: IFFALSE 91742
// begin SetLives ( i , 0 ) ;
91728: LD_VAR 0 1
91732: PPUSH
91733: LD_INT 0
91735: PPUSH
91736: CALL_OW 234
// end ;
91740: GO 91725
91742: POP
91743: POP
// end ;
91744: PPOPN 2
91746: END
// every 0 0$1 trigger StreamModeActive and sBunker do
91747: LD_EXP 89
91751: PUSH
91752: LD_EXP 99
91756: AND
91757: IFFALSE 91777
91759: GO 91761
91761: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
91762: LD_INT 32
91764: PPUSH
91765: LD_OWVAR 2
91769: PPUSH
91770: LD_INT 0
91772: PPUSH
91773: CALL_OW 324
91777: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
91778: LD_EXP 89
91782: PUSH
91783: LD_EXP 100
91787: AND
91788: IFFALSE 91969
91790: GO 91792
91792: DISABLE
91793: LD_INT 0
91795: PPUSH
91796: PPUSH
91797: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
91798: LD_ADDR_VAR 0 2
91802: PUSH
91803: LD_INT 22
91805: PUSH
91806: LD_OWVAR 2
91810: PUSH
91811: EMPTY
91812: LIST
91813: LIST
91814: PUSH
91815: LD_INT 33
91817: PUSH
91818: LD_INT 3
91820: PUSH
91821: EMPTY
91822: LIST
91823: LIST
91824: PUSH
91825: EMPTY
91826: LIST
91827: LIST
91828: PPUSH
91829: CALL_OW 69
91833: ST_TO_ADDR
// if not tmp then
91834: LD_VAR 0 2
91838: NOT
91839: IFFALSE 91843
// exit ;
91841: GO 91969
// side := 0 ;
91843: LD_ADDR_VAR 0 3
91847: PUSH
91848: LD_INT 0
91850: ST_TO_ADDR
// for i := 1 to 8 do
91851: LD_ADDR_VAR 0 1
91855: PUSH
91856: DOUBLE
91857: LD_INT 1
91859: DEC
91860: ST_TO_ADDR
91861: LD_INT 8
91863: PUSH
91864: FOR_TO
91865: IFFALSE 91913
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
91867: LD_OWVAR 2
91871: PUSH
91872: LD_VAR 0 1
91876: NONEQUAL
91877: PUSH
91878: LD_OWVAR 2
91882: PPUSH
91883: LD_VAR 0 1
91887: PPUSH
91888: CALL_OW 81
91892: PUSH
91893: LD_INT 2
91895: EQUAL
91896: AND
91897: IFFALSE 91911
// begin side := i ;
91899: LD_ADDR_VAR 0 3
91903: PUSH
91904: LD_VAR 0 1
91908: ST_TO_ADDR
// break ;
91909: GO 91913
// end ;
91911: GO 91864
91913: POP
91914: POP
// if not side then
91915: LD_VAR 0 3
91919: NOT
91920: IFFALSE 91924
// exit ;
91922: GO 91969
// for i := 1 to tmp do
91924: LD_ADDR_VAR 0 1
91928: PUSH
91929: DOUBLE
91930: LD_INT 1
91932: DEC
91933: ST_TO_ADDR
91934: LD_VAR 0 2
91938: PUSH
91939: FOR_TO
91940: IFFALSE 91967
// if Prob ( 60 ) then
91942: LD_INT 60
91944: PPUSH
91945: CALL_OW 13
91949: IFFALSE 91965
// SetSide ( i , side ) ;
91951: LD_VAR 0 1
91955: PPUSH
91956: LD_VAR 0 3
91960: PPUSH
91961: CALL_OW 235
91965: GO 91939
91967: POP
91968: POP
// end ;
91969: PPOPN 3
91971: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
91972: LD_EXP 89
91976: PUSH
91977: LD_EXP 102
91981: AND
91982: IFFALSE 92101
91984: GO 91986
91986: DISABLE
91987: LD_INT 0
91989: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
91990: LD_ADDR_VAR 0 1
91994: PUSH
91995: LD_INT 22
91997: PUSH
91998: LD_OWVAR 2
92002: PUSH
92003: EMPTY
92004: LIST
92005: LIST
92006: PUSH
92007: LD_INT 21
92009: PUSH
92010: LD_INT 1
92012: PUSH
92013: EMPTY
92014: LIST
92015: LIST
92016: PUSH
92017: LD_INT 3
92019: PUSH
92020: LD_INT 23
92022: PUSH
92023: LD_INT 0
92025: PUSH
92026: EMPTY
92027: LIST
92028: LIST
92029: PUSH
92030: EMPTY
92031: LIST
92032: LIST
92033: PUSH
92034: EMPTY
92035: LIST
92036: LIST
92037: LIST
92038: PPUSH
92039: CALL_OW 69
92043: PUSH
92044: FOR_IN
92045: IFFALSE 92099
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
92047: LD_VAR 0 1
92051: PPUSH
92052: CALL_OW 257
92056: PUSH
92057: LD_INT 1
92059: PUSH
92060: LD_INT 2
92062: PUSH
92063: LD_INT 3
92065: PUSH
92066: LD_INT 4
92068: PUSH
92069: EMPTY
92070: LIST
92071: LIST
92072: LIST
92073: LIST
92074: IN
92075: IFFALSE 92097
// SetClass ( un , rand ( 1 , 4 ) ) ;
92077: LD_VAR 0 1
92081: PPUSH
92082: LD_INT 1
92084: PPUSH
92085: LD_INT 4
92087: PPUSH
92088: CALL_OW 12
92092: PPUSH
92093: CALL_OW 336
92097: GO 92044
92099: POP
92100: POP
// end ;
92101: PPOPN 1
92103: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
92104: LD_EXP 89
92108: PUSH
92109: LD_EXP 101
92113: AND
92114: IFFALSE 92193
92116: GO 92118
92118: DISABLE
92119: LD_INT 0
92121: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
92122: LD_ADDR_VAR 0 1
92126: PUSH
92127: LD_INT 22
92129: PUSH
92130: LD_OWVAR 2
92134: PUSH
92135: EMPTY
92136: LIST
92137: LIST
92138: PUSH
92139: LD_INT 21
92141: PUSH
92142: LD_INT 3
92144: PUSH
92145: EMPTY
92146: LIST
92147: LIST
92148: PUSH
92149: EMPTY
92150: LIST
92151: LIST
92152: PPUSH
92153: CALL_OW 69
92157: ST_TO_ADDR
// if not tmp then
92158: LD_VAR 0 1
92162: NOT
92163: IFFALSE 92167
// exit ;
92165: GO 92193
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
92167: LD_VAR 0 1
92171: PUSH
92172: LD_INT 1
92174: PPUSH
92175: LD_VAR 0 1
92179: PPUSH
92180: CALL_OW 12
92184: ARRAY
92185: PPUSH
92186: LD_INT 100
92188: PPUSH
92189: CALL_OW 234
// end ;
92193: PPOPN 1
92195: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
92196: LD_EXP 89
92200: PUSH
92201: LD_EXP 103
92205: AND
92206: IFFALSE 92304
92208: GO 92210
92210: DISABLE
92211: LD_INT 0
92213: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
92214: LD_ADDR_VAR 0 1
92218: PUSH
92219: LD_INT 22
92221: PUSH
92222: LD_OWVAR 2
92226: PUSH
92227: EMPTY
92228: LIST
92229: LIST
92230: PUSH
92231: LD_INT 21
92233: PUSH
92234: LD_INT 1
92236: PUSH
92237: EMPTY
92238: LIST
92239: LIST
92240: PUSH
92241: EMPTY
92242: LIST
92243: LIST
92244: PPUSH
92245: CALL_OW 69
92249: ST_TO_ADDR
// if not tmp then
92250: LD_VAR 0 1
92254: NOT
92255: IFFALSE 92259
// exit ;
92257: GO 92304
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
92259: LD_VAR 0 1
92263: PUSH
92264: LD_INT 1
92266: PPUSH
92267: LD_VAR 0 1
92271: PPUSH
92272: CALL_OW 12
92276: ARRAY
92277: PPUSH
92278: LD_INT 1
92280: PPUSH
92281: LD_INT 4
92283: PPUSH
92284: CALL_OW 12
92288: PPUSH
92289: LD_INT 3000
92291: PPUSH
92292: LD_INT 9000
92294: PPUSH
92295: CALL_OW 12
92299: PPUSH
92300: CALL_OW 492
// end ;
92304: PPOPN 1
92306: END
// every 0 0$1 trigger StreamModeActive and sDepot do
92307: LD_EXP 89
92311: PUSH
92312: LD_EXP 104
92316: AND
92317: IFFALSE 92337
92319: GO 92321
92321: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
92322: LD_INT 1
92324: PPUSH
92325: LD_OWVAR 2
92329: PPUSH
92330: LD_INT 0
92332: PPUSH
92333: CALL_OW 324
92337: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
92338: LD_EXP 89
92342: PUSH
92343: LD_EXP 105
92347: AND
92348: IFFALSE 92431
92350: GO 92352
92352: DISABLE
92353: LD_INT 0
92355: PPUSH
92356: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
92357: LD_ADDR_VAR 0 2
92361: PUSH
92362: LD_INT 22
92364: PUSH
92365: LD_OWVAR 2
92369: PUSH
92370: EMPTY
92371: LIST
92372: LIST
92373: PUSH
92374: LD_INT 21
92376: PUSH
92377: LD_INT 3
92379: PUSH
92380: EMPTY
92381: LIST
92382: LIST
92383: PUSH
92384: EMPTY
92385: LIST
92386: LIST
92387: PPUSH
92388: CALL_OW 69
92392: ST_TO_ADDR
// if not tmp then
92393: LD_VAR 0 2
92397: NOT
92398: IFFALSE 92402
// exit ;
92400: GO 92431
// for i in tmp do
92402: LD_ADDR_VAR 0 1
92406: PUSH
92407: LD_VAR 0 2
92411: PUSH
92412: FOR_IN
92413: IFFALSE 92429
// SetBLevel ( i , 10 ) ;
92415: LD_VAR 0 1
92419: PPUSH
92420: LD_INT 10
92422: PPUSH
92423: CALL_OW 241
92427: GO 92412
92429: POP
92430: POP
// end ;
92431: PPOPN 2
92433: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
92434: LD_EXP 89
92438: PUSH
92439: LD_EXP 106
92443: AND
92444: IFFALSE 92555
92446: GO 92448
92448: DISABLE
92449: LD_INT 0
92451: PPUSH
92452: PPUSH
92453: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
92454: LD_ADDR_VAR 0 3
92458: PUSH
92459: LD_INT 22
92461: PUSH
92462: LD_OWVAR 2
92466: PUSH
92467: EMPTY
92468: LIST
92469: LIST
92470: PUSH
92471: LD_INT 25
92473: PUSH
92474: LD_INT 1
92476: PUSH
92477: EMPTY
92478: LIST
92479: LIST
92480: PUSH
92481: EMPTY
92482: LIST
92483: LIST
92484: PPUSH
92485: CALL_OW 69
92489: ST_TO_ADDR
// if not tmp then
92490: LD_VAR 0 3
92494: NOT
92495: IFFALSE 92499
// exit ;
92497: GO 92555
// un := tmp [ rand ( 1 , tmp ) ] ;
92499: LD_ADDR_VAR 0 2
92503: PUSH
92504: LD_VAR 0 3
92508: PUSH
92509: LD_INT 1
92511: PPUSH
92512: LD_VAR 0 3
92516: PPUSH
92517: CALL_OW 12
92521: ARRAY
92522: ST_TO_ADDR
// if Crawls ( un ) then
92523: LD_VAR 0 2
92527: PPUSH
92528: CALL_OW 318
92532: IFFALSE 92543
// ComWalk ( un ) ;
92534: LD_VAR 0 2
92538: PPUSH
92539: CALL_OW 138
// SetClass ( un , class_sniper ) ;
92543: LD_VAR 0 2
92547: PPUSH
92548: LD_INT 5
92550: PPUSH
92551: CALL_OW 336
// end ;
92555: PPOPN 3
92557: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
92558: LD_EXP 89
92562: PUSH
92563: LD_EXP 107
92567: AND
92568: PUSH
92569: LD_OWVAR 67
92573: PUSH
92574: LD_INT 3
92576: LESS
92577: AND
92578: IFFALSE 92597
92580: GO 92582
92582: DISABLE
// Difficulty := Difficulty + 1 ;
92583: LD_ADDR_OWVAR 67
92587: PUSH
92588: LD_OWVAR 67
92592: PUSH
92593: LD_INT 1
92595: PLUS
92596: ST_TO_ADDR
92597: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
92598: LD_EXP 89
92602: PUSH
92603: LD_EXP 108
92607: AND
92608: IFFALSE 92711
92610: GO 92612
92612: DISABLE
92613: LD_INT 0
92615: PPUSH
// begin for i := 1 to 5 do
92616: LD_ADDR_VAR 0 1
92620: PUSH
92621: DOUBLE
92622: LD_INT 1
92624: DEC
92625: ST_TO_ADDR
92626: LD_INT 5
92628: PUSH
92629: FOR_TO
92630: IFFALSE 92709
// begin uc_nation := nation_nature ;
92632: LD_ADDR_OWVAR 21
92636: PUSH
92637: LD_INT 0
92639: ST_TO_ADDR
// uc_side := 0 ;
92640: LD_ADDR_OWVAR 20
92644: PUSH
92645: LD_INT 0
92647: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
92648: LD_ADDR_OWVAR 29
92652: PUSH
92653: LD_INT 12
92655: PUSH
92656: LD_INT 12
92658: PUSH
92659: EMPTY
92660: LIST
92661: LIST
92662: ST_TO_ADDR
// hc_agressivity := 20 ;
92663: LD_ADDR_OWVAR 35
92667: PUSH
92668: LD_INT 20
92670: ST_TO_ADDR
// hc_class := class_tiger ;
92671: LD_ADDR_OWVAR 28
92675: PUSH
92676: LD_INT 14
92678: ST_TO_ADDR
// hc_gallery :=  ;
92679: LD_ADDR_OWVAR 33
92683: PUSH
92684: LD_STRING 
92686: ST_TO_ADDR
// hc_name :=  ;
92687: LD_ADDR_OWVAR 26
92691: PUSH
92692: LD_STRING 
92694: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
92695: CALL_OW 44
92699: PPUSH
92700: LD_INT 0
92702: PPUSH
92703: CALL_OW 51
// end ;
92707: GO 92629
92709: POP
92710: POP
// end ;
92711: PPOPN 1
92713: END
// every 0 0$1 trigger StreamModeActive and sBomb do
92714: LD_EXP 89
92718: PUSH
92719: LD_EXP 109
92723: AND
92724: IFFALSE 92733
92726: GO 92728
92728: DISABLE
// StreamSibBomb ;
92729: CALL 92734 0 0
92733: END
// export function StreamSibBomb ; var i , x , y ; begin
92734: LD_INT 0
92736: PPUSH
92737: PPUSH
92738: PPUSH
92739: PPUSH
// result := false ;
92740: LD_ADDR_VAR 0 1
92744: PUSH
92745: LD_INT 0
92747: ST_TO_ADDR
// for i := 1 to 16 do
92748: LD_ADDR_VAR 0 2
92752: PUSH
92753: DOUBLE
92754: LD_INT 1
92756: DEC
92757: ST_TO_ADDR
92758: LD_INT 16
92760: PUSH
92761: FOR_TO
92762: IFFALSE 92961
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
92764: LD_ADDR_VAR 0 3
92768: PUSH
92769: LD_INT 10
92771: PUSH
92772: LD_INT 20
92774: PUSH
92775: LD_INT 30
92777: PUSH
92778: LD_INT 40
92780: PUSH
92781: LD_INT 50
92783: PUSH
92784: LD_INT 60
92786: PUSH
92787: LD_INT 70
92789: PUSH
92790: LD_INT 80
92792: PUSH
92793: LD_INT 90
92795: PUSH
92796: LD_INT 100
92798: PUSH
92799: LD_INT 110
92801: PUSH
92802: LD_INT 120
92804: PUSH
92805: LD_INT 130
92807: PUSH
92808: LD_INT 140
92810: PUSH
92811: LD_INT 150
92813: PUSH
92814: EMPTY
92815: LIST
92816: LIST
92817: LIST
92818: LIST
92819: LIST
92820: LIST
92821: LIST
92822: LIST
92823: LIST
92824: LIST
92825: LIST
92826: LIST
92827: LIST
92828: LIST
92829: LIST
92830: PUSH
92831: LD_INT 1
92833: PPUSH
92834: LD_INT 15
92836: PPUSH
92837: CALL_OW 12
92841: ARRAY
92842: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
92843: LD_ADDR_VAR 0 4
92847: PUSH
92848: LD_INT 10
92850: PUSH
92851: LD_INT 20
92853: PUSH
92854: LD_INT 30
92856: PUSH
92857: LD_INT 40
92859: PUSH
92860: LD_INT 50
92862: PUSH
92863: LD_INT 60
92865: PUSH
92866: LD_INT 70
92868: PUSH
92869: LD_INT 80
92871: PUSH
92872: LD_INT 90
92874: PUSH
92875: LD_INT 100
92877: PUSH
92878: LD_INT 110
92880: PUSH
92881: LD_INT 120
92883: PUSH
92884: LD_INT 130
92886: PUSH
92887: LD_INT 140
92889: PUSH
92890: LD_INT 150
92892: PUSH
92893: EMPTY
92894: LIST
92895: LIST
92896: LIST
92897: LIST
92898: LIST
92899: LIST
92900: LIST
92901: LIST
92902: LIST
92903: LIST
92904: LIST
92905: LIST
92906: LIST
92907: LIST
92908: LIST
92909: PUSH
92910: LD_INT 1
92912: PPUSH
92913: LD_INT 15
92915: PPUSH
92916: CALL_OW 12
92920: ARRAY
92921: ST_TO_ADDR
// if ValidHex ( x , y ) then
92922: LD_VAR 0 3
92926: PPUSH
92927: LD_VAR 0 4
92931: PPUSH
92932: CALL_OW 488
92936: IFFALSE 92959
// begin result := [ x , y ] ;
92938: LD_ADDR_VAR 0 1
92942: PUSH
92943: LD_VAR 0 3
92947: PUSH
92948: LD_VAR 0 4
92952: PUSH
92953: EMPTY
92954: LIST
92955: LIST
92956: ST_TO_ADDR
// break ;
92957: GO 92961
// end ; end ;
92959: GO 92761
92961: POP
92962: POP
// if result then
92963: LD_VAR 0 1
92967: IFFALSE 93027
// begin ToLua ( playSibBomb() ) ;
92969: LD_STRING playSibBomb()
92971: PPUSH
92972: CALL_OW 559
// wait ( 0 0$14 ) ;
92976: LD_INT 490
92978: PPUSH
92979: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
92983: LD_VAR 0 1
92987: PUSH
92988: LD_INT 1
92990: ARRAY
92991: PPUSH
92992: LD_VAR 0 1
92996: PUSH
92997: LD_INT 2
92999: ARRAY
93000: PPUSH
93001: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
93005: LD_VAR 0 1
93009: PUSH
93010: LD_INT 1
93012: ARRAY
93013: PPUSH
93014: LD_VAR 0 1
93018: PUSH
93019: LD_INT 2
93021: ARRAY
93022: PPUSH
93023: CALL_OW 429
// end ; end ;
93027: LD_VAR 0 1
93031: RET
// every 0 0$1 trigger StreamModeActive and sReset do
93032: LD_EXP 89
93036: PUSH
93037: LD_EXP 111
93041: AND
93042: IFFALSE 93054
93044: GO 93046
93046: DISABLE
// YouLost (  ) ;
93047: LD_STRING 
93049: PPUSH
93050: CALL_OW 104
93054: END
// every 0 0$1 trigger StreamModeActive and sFog do
93055: LD_EXP 89
93059: PUSH
93060: LD_EXP 110
93064: AND
93065: IFFALSE 93079
93067: GO 93069
93069: DISABLE
// FogOff ( your_side ) ;
93070: LD_OWVAR 2
93074: PPUSH
93075: CALL_OW 344
93079: END
// every 0 0$1 trigger StreamModeActive and sSun do
93080: LD_EXP 89
93084: PUSH
93085: LD_EXP 112
93089: AND
93090: IFFALSE 93118
93092: GO 93094
93094: DISABLE
// begin solar_recharge_percent := 0 ;
93095: LD_ADDR_OWVAR 79
93099: PUSH
93100: LD_INT 0
93102: ST_TO_ADDR
// wait ( 5 5$00 ) ;
93103: LD_INT 10500
93105: PPUSH
93106: CALL_OW 67
// solar_recharge_percent := 100 ;
93110: LD_ADDR_OWVAR 79
93114: PUSH
93115: LD_INT 100
93117: ST_TO_ADDR
// end ;
93118: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
93119: LD_EXP 89
93123: PUSH
93124: LD_EXP 113
93128: AND
93129: IFFALSE 93368
93131: GO 93133
93133: DISABLE
93134: LD_INT 0
93136: PPUSH
93137: PPUSH
93138: PPUSH
// begin tmp := [ ] ;
93139: LD_ADDR_VAR 0 3
93143: PUSH
93144: EMPTY
93145: ST_TO_ADDR
// for i := 1 to 6 do
93146: LD_ADDR_VAR 0 1
93150: PUSH
93151: DOUBLE
93152: LD_INT 1
93154: DEC
93155: ST_TO_ADDR
93156: LD_INT 6
93158: PUSH
93159: FOR_TO
93160: IFFALSE 93265
// begin uc_nation := nation_nature ;
93162: LD_ADDR_OWVAR 21
93166: PUSH
93167: LD_INT 0
93169: ST_TO_ADDR
// uc_side := 0 ;
93170: LD_ADDR_OWVAR 20
93174: PUSH
93175: LD_INT 0
93177: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
93178: LD_ADDR_OWVAR 29
93182: PUSH
93183: LD_INT 12
93185: PUSH
93186: LD_INT 12
93188: PUSH
93189: EMPTY
93190: LIST
93191: LIST
93192: ST_TO_ADDR
// hc_agressivity := 20 ;
93193: LD_ADDR_OWVAR 35
93197: PUSH
93198: LD_INT 20
93200: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
93201: LD_ADDR_OWVAR 28
93205: PUSH
93206: LD_INT 17
93208: ST_TO_ADDR
// hc_gallery :=  ;
93209: LD_ADDR_OWVAR 33
93213: PUSH
93214: LD_STRING 
93216: ST_TO_ADDR
// hc_name :=  ;
93217: LD_ADDR_OWVAR 26
93221: PUSH
93222: LD_STRING 
93224: ST_TO_ADDR
// un := CreateHuman ;
93225: LD_ADDR_VAR 0 2
93229: PUSH
93230: CALL_OW 44
93234: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
93235: LD_VAR 0 2
93239: PPUSH
93240: LD_INT 1
93242: PPUSH
93243: CALL_OW 51
// tmp := tmp ^ un ;
93247: LD_ADDR_VAR 0 3
93251: PUSH
93252: LD_VAR 0 3
93256: PUSH
93257: LD_VAR 0 2
93261: ADD
93262: ST_TO_ADDR
// end ;
93263: GO 93159
93265: POP
93266: POP
// repeat wait ( 0 0$1 ) ;
93267: LD_INT 35
93269: PPUSH
93270: CALL_OW 67
// for un in tmp do
93274: LD_ADDR_VAR 0 2
93278: PUSH
93279: LD_VAR 0 3
93283: PUSH
93284: FOR_IN
93285: IFFALSE 93359
// begin if IsDead ( un ) then
93287: LD_VAR 0 2
93291: PPUSH
93292: CALL_OW 301
93296: IFFALSE 93316
// begin tmp := tmp diff un ;
93298: LD_ADDR_VAR 0 3
93302: PUSH
93303: LD_VAR 0 3
93307: PUSH
93308: LD_VAR 0 2
93312: DIFF
93313: ST_TO_ADDR
// continue ;
93314: GO 93284
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
93316: LD_VAR 0 2
93320: PPUSH
93321: LD_INT 3
93323: PUSH
93324: LD_INT 22
93326: PUSH
93327: LD_INT 0
93329: PUSH
93330: EMPTY
93331: LIST
93332: LIST
93333: PUSH
93334: EMPTY
93335: LIST
93336: LIST
93337: PPUSH
93338: CALL_OW 69
93342: PPUSH
93343: LD_VAR 0 2
93347: PPUSH
93348: CALL_OW 74
93352: PPUSH
93353: CALL_OW 115
// end ;
93357: GO 93284
93359: POP
93360: POP
// until not tmp ;
93361: LD_VAR 0 3
93365: NOT
93366: IFFALSE 93267
// end ;
93368: PPOPN 3
93370: END
// every 0 0$1 trigger StreamModeActive and sTroll do
93371: LD_EXP 89
93375: PUSH
93376: LD_EXP 114
93380: AND
93381: IFFALSE 93435
93383: GO 93385
93385: DISABLE
// begin ToLua ( displayTroll(); ) ;
93386: LD_STRING displayTroll();
93388: PPUSH
93389: CALL_OW 559
// wait ( 3 3$00 ) ;
93393: LD_INT 6300
93395: PPUSH
93396: CALL_OW 67
// ToLua ( hideTroll(); ) ;
93400: LD_STRING hideTroll();
93402: PPUSH
93403: CALL_OW 559
// wait ( 1 1$00 ) ;
93407: LD_INT 2100
93409: PPUSH
93410: CALL_OW 67
// ToLua ( displayTroll(); ) ;
93414: LD_STRING displayTroll();
93416: PPUSH
93417: CALL_OW 559
// wait ( 1 1$00 ) ;
93421: LD_INT 2100
93423: PPUSH
93424: CALL_OW 67
// ToLua ( hideTroll(); ) ;
93428: LD_STRING hideTroll();
93430: PPUSH
93431: CALL_OW 559
// end ;
93435: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
93436: LD_EXP 89
93440: PUSH
93441: LD_EXP 115
93445: AND
93446: IFFALSE 93509
93448: GO 93450
93450: DISABLE
93451: LD_INT 0
93453: PPUSH
// begin p := 0 ;
93454: LD_ADDR_VAR 0 1
93458: PUSH
93459: LD_INT 0
93461: ST_TO_ADDR
// repeat game_speed := 1 ;
93462: LD_ADDR_OWVAR 65
93466: PUSH
93467: LD_INT 1
93469: ST_TO_ADDR
// wait ( 0 0$1 ) ;
93470: LD_INT 35
93472: PPUSH
93473: CALL_OW 67
// p := p + 1 ;
93477: LD_ADDR_VAR 0 1
93481: PUSH
93482: LD_VAR 0 1
93486: PUSH
93487: LD_INT 1
93489: PLUS
93490: ST_TO_ADDR
// until p >= 60 ;
93491: LD_VAR 0 1
93495: PUSH
93496: LD_INT 60
93498: GREATEREQUAL
93499: IFFALSE 93462
// game_speed := 4 ;
93501: LD_ADDR_OWVAR 65
93505: PUSH
93506: LD_INT 4
93508: ST_TO_ADDR
// end ;
93509: PPOPN 1
93511: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
93512: LD_EXP 89
93516: PUSH
93517: LD_EXP 116
93521: AND
93522: IFFALSE 93668
93524: GO 93526
93526: DISABLE
93527: LD_INT 0
93529: PPUSH
93530: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
93531: LD_ADDR_VAR 0 1
93535: PUSH
93536: LD_INT 22
93538: PUSH
93539: LD_OWVAR 2
93543: PUSH
93544: EMPTY
93545: LIST
93546: LIST
93547: PUSH
93548: LD_INT 2
93550: PUSH
93551: LD_INT 30
93553: PUSH
93554: LD_INT 0
93556: PUSH
93557: EMPTY
93558: LIST
93559: LIST
93560: PUSH
93561: LD_INT 30
93563: PUSH
93564: LD_INT 1
93566: PUSH
93567: EMPTY
93568: LIST
93569: LIST
93570: PUSH
93571: EMPTY
93572: LIST
93573: LIST
93574: LIST
93575: PUSH
93576: EMPTY
93577: LIST
93578: LIST
93579: PPUSH
93580: CALL_OW 69
93584: ST_TO_ADDR
// if not depot then
93585: LD_VAR 0 1
93589: NOT
93590: IFFALSE 93594
// exit ;
93592: GO 93668
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
93594: LD_ADDR_VAR 0 2
93598: PUSH
93599: LD_VAR 0 1
93603: PUSH
93604: LD_INT 1
93606: PPUSH
93607: LD_VAR 0 1
93611: PPUSH
93612: CALL_OW 12
93616: ARRAY
93617: PPUSH
93618: CALL_OW 274
93622: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
93623: LD_VAR 0 2
93627: PPUSH
93628: LD_INT 1
93630: PPUSH
93631: LD_INT 0
93633: PPUSH
93634: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
93638: LD_VAR 0 2
93642: PPUSH
93643: LD_INT 2
93645: PPUSH
93646: LD_INT 0
93648: PPUSH
93649: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
93653: LD_VAR 0 2
93657: PPUSH
93658: LD_INT 3
93660: PPUSH
93661: LD_INT 0
93663: PPUSH
93664: CALL_OW 277
// end ;
93668: PPOPN 2
93670: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
93671: LD_EXP 89
93675: PUSH
93676: LD_EXP 117
93680: AND
93681: IFFALSE 93778
93683: GO 93685
93685: DISABLE
93686: LD_INT 0
93688: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
93689: LD_ADDR_VAR 0 1
93693: PUSH
93694: LD_INT 22
93696: PUSH
93697: LD_OWVAR 2
93701: PUSH
93702: EMPTY
93703: LIST
93704: LIST
93705: PUSH
93706: LD_INT 21
93708: PUSH
93709: LD_INT 1
93711: PUSH
93712: EMPTY
93713: LIST
93714: LIST
93715: PUSH
93716: LD_INT 3
93718: PUSH
93719: LD_INT 23
93721: PUSH
93722: LD_INT 0
93724: PUSH
93725: EMPTY
93726: LIST
93727: LIST
93728: PUSH
93729: EMPTY
93730: LIST
93731: LIST
93732: PUSH
93733: EMPTY
93734: LIST
93735: LIST
93736: LIST
93737: PPUSH
93738: CALL_OW 69
93742: ST_TO_ADDR
// if not tmp then
93743: LD_VAR 0 1
93747: NOT
93748: IFFALSE 93752
// exit ;
93750: GO 93778
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
93752: LD_VAR 0 1
93756: PUSH
93757: LD_INT 1
93759: PPUSH
93760: LD_VAR 0 1
93764: PPUSH
93765: CALL_OW 12
93769: ARRAY
93770: PPUSH
93771: LD_INT 200
93773: PPUSH
93774: CALL_OW 234
// end ;
93778: PPOPN 1
93780: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
93781: LD_EXP 89
93785: PUSH
93786: LD_EXP 118
93790: AND
93791: IFFALSE 93870
93793: GO 93795
93795: DISABLE
93796: LD_INT 0
93798: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
93799: LD_ADDR_VAR 0 1
93803: PUSH
93804: LD_INT 22
93806: PUSH
93807: LD_OWVAR 2
93811: PUSH
93812: EMPTY
93813: LIST
93814: LIST
93815: PUSH
93816: LD_INT 21
93818: PUSH
93819: LD_INT 2
93821: PUSH
93822: EMPTY
93823: LIST
93824: LIST
93825: PUSH
93826: EMPTY
93827: LIST
93828: LIST
93829: PPUSH
93830: CALL_OW 69
93834: ST_TO_ADDR
// if not tmp then
93835: LD_VAR 0 1
93839: NOT
93840: IFFALSE 93844
// exit ;
93842: GO 93870
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
93844: LD_VAR 0 1
93848: PUSH
93849: LD_INT 1
93851: PPUSH
93852: LD_VAR 0 1
93856: PPUSH
93857: CALL_OW 12
93861: ARRAY
93862: PPUSH
93863: LD_INT 60
93865: PPUSH
93866: CALL_OW 234
// end ;
93870: PPOPN 1
93872: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
93873: LD_EXP 89
93877: PUSH
93878: LD_EXP 119
93882: AND
93883: IFFALSE 93982
93885: GO 93887
93887: DISABLE
93888: LD_INT 0
93890: PPUSH
93891: PPUSH
// begin enable ;
93892: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
93893: LD_ADDR_VAR 0 1
93897: PUSH
93898: LD_INT 22
93900: PUSH
93901: LD_OWVAR 2
93905: PUSH
93906: EMPTY
93907: LIST
93908: LIST
93909: PUSH
93910: LD_INT 61
93912: PUSH
93913: EMPTY
93914: LIST
93915: PUSH
93916: LD_INT 33
93918: PUSH
93919: LD_INT 2
93921: PUSH
93922: EMPTY
93923: LIST
93924: LIST
93925: PUSH
93926: EMPTY
93927: LIST
93928: LIST
93929: LIST
93930: PPUSH
93931: CALL_OW 69
93935: ST_TO_ADDR
// if not tmp then
93936: LD_VAR 0 1
93940: NOT
93941: IFFALSE 93945
// exit ;
93943: GO 93982
// for i in tmp do
93945: LD_ADDR_VAR 0 2
93949: PUSH
93950: LD_VAR 0 1
93954: PUSH
93955: FOR_IN
93956: IFFALSE 93980
// if IsControledBy ( i ) then
93958: LD_VAR 0 2
93962: PPUSH
93963: CALL_OW 312
93967: IFFALSE 93978
// ComUnlink ( i ) ;
93969: LD_VAR 0 2
93973: PPUSH
93974: CALL_OW 136
93978: GO 93955
93980: POP
93981: POP
// end ;
93982: PPOPN 2
93984: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
93985: LD_EXP 89
93989: PUSH
93990: LD_EXP 120
93994: AND
93995: IFFALSE 94135
93997: GO 93999
93999: DISABLE
94000: LD_INT 0
94002: PPUSH
94003: PPUSH
// begin ToLua ( displayPowell(); ) ;
94004: LD_STRING displayPowell();
94006: PPUSH
94007: CALL_OW 559
// uc_side := 0 ;
94011: LD_ADDR_OWVAR 20
94015: PUSH
94016: LD_INT 0
94018: ST_TO_ADDR
// uc_nation := 2 ;
94019: LD_ADDR_OWVAR 21
94023: PUSH
94024: LD_INT 2
94026: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
94027: LD_ADDR_OWVAR 37
94031: PUSH
94032: LD_INT 14
94034: ST_TO_ADDR
// vc_engine := engine_siberite ;
94035: LD_ADDR_OWVAR 39
94039: PUSH
94040: LD_INT 3
94042: ST_TO_ADDR
// vc_control := control_apeman ;
94043: LD_ADDR_OWVAR 38
94047: PUSH
94048: LD_INT 5
94050: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
94051: LD_ADDR_OWVAR 40
94055: PUSH
94056: LD_INT 29
94058: ST_TO_ADDR
// un := CreateVehicle ;
94059: LD_ADDR_VAR 0 2
94063: PUSH
94064: CALL_OW 45
94068: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
94069: LD_VAR 0 2
94073: PPUSH
94074: LD_INT 1
94076: PPUSH
94077: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
94081: LD_INT 35
94083: PPUSH
94084: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
94088: LD_VAR 0 2
94092: PPUSH
94093: LD_INT 22
94095: PUSH
94096: LD_OWVAR 2
94100: PUSH
94101: EMPTY
94102: LIST
94103: LIST
94104: PPUSH
94105: CALL_OW 69
94109: PPUSH
94110: LD_VAR 0 2
94114: PPUSH
94115: CALL_OW 74
94119: PPUSH
94120: CALL_OW 115
// until IsDead ( un ) ;
94124: LD_VAR 0 2
94128: PPUSH
94129: CALL_OW 301
94133: IFFALSE 94081
// end ;
94135: PPOPN 2
94137: END
// every 0 0$1 trigger StreamModeActive and sStu do
94138: LD_EXP 89
94142: PUSH
94143: LD_EXP 128
94147: AND
94148: IFFALSE 94164
94150: GO 94152
94152: DISABLE
// begin ToLua ( displayStucuk(); ) ;
94153: LD_STRING displayStucuk();
94155: PPUSH
94156: CALL_OW 559
// ResetFog ;
94160: CALL_OW 335
// end ;
94164: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
94165: LD_EXP 89
94169: PUSH
94170: LD_EXP 121
94174: AND
94175: IFFALSE 94316
94177: GO 94179
94179: DISABLE
94180: LD_INT 0
94182: PPUSH
94183: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
94184: LD_ADDR_VAR 0 2
94188: PUSH
94189: LD_INT 22
94191: PUSH
94192: LD_OWVAR 2
94196: PUSH
94197: EMPTY
94198: LIST
94199: LIST
94200: PUSH
94201: LD_INT 21
94203: PUSH
94204: LD_INT 1
94206: PUSH
94207: EMPTY
94208: LIST
94209: LIST
94210: PUSH
94211: EMPTY
94212: LIST
94213: LIST
94214: PPUSH
94215: CALL_OW 69
94219: ST_TO_ADDR
// if not tmp then
94220: LD_VAR 0 2
94224: NOT
94225: IFFALSE 94229
// exit ;
94227: GO 94316
// un := tmp [ rand ( 1 , tmp ) ] ;
94229: LD_ADDR_VAR 0 1
94233: PUSH
94234: LD_VAR 0 2
94238: PUSH
94239: LD_INT 1
94241: PPUSH
94242: LD_VAR 0 2
94246: PPUSH
94247: CALL_OW 12
94251: ARRAY
94252: ST_TO_ADDR
// SetSide ( un , 0 ) ;
94253: LD_VAR 0 1
94257: PPUSH
94258: LD_INT 0
94260: PPUSH
94261: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
94265: LD_VAR 0 1
94269: PPUSH
94270: LD_OWVAR 3
94274: PUSH
94275: LD_VAR 0 1
94279: DIFF
94280: PPUSH
94281: LD_VAR 0 1
94285: PPUSH
94286: CALL_OW 74
94290: PPUSH
94291: CALL_OW 115
// wait ( 0 0$20 ) ;
94295: LD_INT 700
94297: PPUSH
94298: CALL_OW 67
// SetSide ( un , your_side ) ;
94302: LD_VAR 0 1
94306: PPUSH
94307: LD_OWVAR 2
94311: PPUSH
94312: CALL_OW 235
// end ;
94316: PPOPN 2
94318: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
94319: LD_EXP 89
94323: PUSH
94324: LD_EXP 122
94328: AND
94329: IFFALSE 94435
94331: GO 94333
94333: DISABLE
94334: LD_INT 0
94336: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
94337: LD_ADDR_VAR 0 1
94341: PUSH
94342: LD_INT 22
94344: PUSH
94345: LD_OWVAR 2
94349: PUSH
94350: EMPTY
94351: LIST
94352: LIST
94353: PUSH
94354: LD_INT 2
94356: PUSH
94357: LD_INT 30
94359: PUSH
94360: LD_INT 0
94362: PUSH
94363: EMPTY
94364: LIST
94365: LIST
94366: PUSH
94367: LD_INT 30
94369: PUSH
94370: LD_INT 1
94372: PUSH
94373: EMPTY
94374: LIST
94375: LIST
94376: PUSH
94377: EMPTY
94378: LIST
94379: LIST
94380: LIST
94381: PUSH
94382: EMPTY
94383: LIST
94384: LIST
94385: PPUSH
94386: CALL_OW 69
94390: ST_TO_ADDR
// if not depot then
94391: LD_VAR 0 1
94395: NOT
94396: IFFALSE 94400
// exit ;
94398: GO 94435
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
94400: LD_VAR 0 1
94404: PUSH
94405: LD_INT 1
94407: ARRAY
94408: PPUSH
94409: CALL_OW 250
94413: PPUSH
94414: LD_VAR 0 1
94418: PUSH
94419: LD_INT 1
94421: ARRAY
94422: PPUSH
94423: CALL_OW 251
94427: PPUSH
94428: LD_INT 70
94430: PPUSH
94431: CALL_OW 495
// end ;
94435: PPOPN 1
94437: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
94438: LD_EXP 89
94442: PUSH
94443: LD_EXP 123
94447: AND
94448: IFFALSE 94659
94450: GO 94452
94452: DISABLE
94453: LD_INT 0
94455: PPUSH
94456: PPUSH
94457: PPUSH
94458: PPUSH
94459: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
94460: LD_ADDR_VAR 0 5
94464: PUSH
94465: LD_INT 22
94467: PUSH
94468: LD_OWVAR 2
94472: PUSH
94473: EMPTY
94474: LIST
94475: LIST
94476: PUSH
94477: LD_INT 21
94479: PUSH
94480: LD_INT 1
94482: PUSH
94483: EMPTY
94484: LIST
94485: LIST
94486: PUSH
94487: EMPTY
94488: LIST
94489: LIST
94490: PPUSH
94491: CALL_OW 69
94495: ST_TO_ADDR
// if not tmp then
94496: LD_VAR 0 5
94500: NOT
94501: IFFALSE 94505
// exit ;
94503: GO 94659
// for i in tmp do
94505: LD_ADDR_VAR 0 1
94509: PUSH
94510: LD_VAR 0 5
94514: PUSH
94515: FOR_IN
94516: IFFALSE 94657
// begin d := rand ( 0 , 5 ) ;
94518: LD_ADDR_VAR 0 4
94522: PUSH
94523: LD_INT 0
94525: PPUSH
94526: LD_INT 5
94528: PPUSH
94529: CALL_OW 12
94533: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
94534: LD_ADDR_VAR 0 2
94538: PUSH
94539: LD_VAR 0 1
94543: PPUSH
94544: CALL_OW 250
94548: PPUSH
94549: LD_VAR 0 4
94553: PPUSH
94554: LD_INT 3
94556: PPUSH
94557: LD_INT 12
94559: PPUSH
94560: CALL_OW 12
94564: PPUSH
94565: CALL_OW 272
94569: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
94570: LD_ADDR_VAR 0 3
94574: PUSH
94575: LD_VAR 0 1
94579: PPUSH
94580: CALL_OW 251
94584: PPUSH
94585: LD_VAR 0 4
94589: PPUSH
94590: LD_INT 3
94592: PPUSH
94593: LD_INT 12
94595: PPUSH
94596: CALL_OW 12
94600: PPUSH
94601: CALL_OW 273
94605: ST_TO_ADDR
// if ValidHex ( x , y ) then
94606: LD_VAR 0 2
94610: PPUSH
94611: LD_VAR 0 3
94615: PPUSH
94616: CALL_OW 488
94620: IFFALSE 94655
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
94622: LD_VAR 0 1
94626: PPUSH
94627: LD_VAR 0 2
94631: PPUSH
94632: LD_VAR 0 3
94636: PPUSH
94637: LD_INT 3
94639: PPUSH
94640: LD_INT 6
94642: PPUSH
94643: CALL_OW 12
94647: PPUSH
94648: LD_INT 1
94650: PPUSH
94651: CALL_OW 483
// end ;
94655: GO 94515
94657: POP
94658: POP
// end ;
94659: PPOPN 5
94661: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
94662: LD_EXP 89
94666: PUSH
94667: LD_EXP 124
94671: AND
94672: IFFALSE 94766
94674: GO 94676
94676: DISABLE
94677: LD_INT 0
94679: PPUSH
94680: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
94681: LD_ADDR_VAR 0 2
94685: PUSH
94686: LD_INT 22
94688: PUSH
94689: LD_OWVAR 2
94693: PUSH
94694: EMPTY
94695: LIST
94696: LIST
94697: PUSH
94698: LD_INT 32
94700: PUSH
94701: LD_INT 1
94703: PUSH
94704: EMPTY
94705: LIST
94706: LIST
94707: PUSH
94708: LD_INT 21
94710: PUSH
94711: LD_INT 2
94713: PUSH
94714: EMPTY
94715: LIST
94716: LIST
94717: PUSH
94718: EMPTY
94719: LIST
94720: LIST
94721: LIST
94722: PPUSH
94723: CALL_OW 69
94727: ST_TO_ADDR
// if not tmp then
94728: LD_VAR 0 2
94732: NOT
94733: IFFALSE 94737
// exit ;
94735: GO 94766
// for i in tmp do
94737: LD_ADDR_VAR 0 1
94741: PUSH
94742: LD_VAR 0 2
94746: PUSH
94747: FOR_IN
94748: IFFALSE 94764
// SetFuel ( i , 0 ) ;
94750: LD_VAR 0 1
94754: PPUSH
94755: LD_INT 0
94757: PPUSH
94758: CALL_OW 240
94762: GO 94747
94764: POP
94765: POP
// end ;
94766: PPOPN 2
94768: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
94769: LD_EXP 89
94773: PUSH
94774: LD_EXP 125
94778: AND
94779: IFFALSE 94845
94781: GO 94783
94783: DISABLE
94784: LD_INT 0
94786: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
94787: LD_ADDR_VAR 0 1
94791: PUSH
94792: LD_INT 22
94794: PUSH
94795: LD_OWVAR 2
94799: PUSH
94800: EMPTY
94801: LIST
94802: LIST
94803: PUSH
94804: LD_INT 30
94806: PUSH
94807: LD_INT 29
94809: PUSH
94810: EMPTY
94811: LIST
94812: LIST
94813: PUSH
94814: EMPTY
94815: LIST
94816: LIST
94817: PPUSH
94818: CALL_OW 69
94822: ST_TO_ADDR
// if not tmp then
94823: LD_VAR 0 1
94827: NOT
94828: IFFALSE 94832
// exit ;
94830: GO 94845
// DestroyUnit ( tmp [ 1 ] ) ;
94832: LD_VAR 0 1
94836: PUSH
94837: LD_INT 1
94839: ARRAY
94840: PPUSH
94841: CALL_OW 65
// end ;
94845: PPOPN 1
94847: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
94848: LD_EXP 89
94852: PUSH
94853: LD_EXP 127
94857: AND
94858: IFFALSE 94987
94860: GO 94862
94862: DISABLE
94863: LD_INT 0
94865: PPUSH
// begin uc_side := 0 ;
94866: LD_ADDR_OWVAR 20
94870: PUSH
94871: LD_INT 0
94873: ST_TO_ADDR
// uc_nation := nation_arabian ;
94874: LD_ADDR_OWVAR 21
94878: PUSH
94879: LD_INT 2
94881: ST_TO_ADDR
// hc_gallery :=  ;
94882: LD_ADDR_OWVAR 33
94886: PUSH
94887: LD_STRING 
94889: ST_TO_ADDR
// hc_name :=  ;
94890: LD_ADDR_OWVAR 26
94894: PUSH
94895: LD_STRING 
94897: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
94898: LD_INT 1
94900: PPUSH
94901: LD_INT 11
94903: PPUSH
94904: LD_INT 10
94906: PPUSH
94907: CALL_OW 380
// un := CreateHuman ;
94911: LD_ADDR_VAR 0 1
94915: PUSH
94916: CALL_OW 44
94920: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
94921: LD_VAR 0 1
94925: PPUSH
94926: LD_INT 1
94928: PPUSH
94929: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
94933: LD_INT 35
94935: PPUSH
94936: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
94940: LD_VAR 0 1
94944: PPUSH
94945: LD_INT 22
94947: PUSH
94948: LD_OWVAR 2
94952: PUSH
94953: EMPTY
94954: LIST
94955: LIST
94956: PPUSH
94957: CALL_OW 69
94961: PPUSH
94962: LD_VAR 0 1
94966: PPUSH
94967: CALL_OW 74
94971: PPUSH
94972: CALL_OW 115
// until IsDead ( un ) ;
94976: LD_VAR 0 1
94980: PPUSH
94981: CALL_OW 301
94985: IFFALSE 94933
// end ;
94987: PPOPN 1
94989: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
94990: LD_EXP 89
94994: PUSH
94995: LD_EXP 129
94999: AND
95000: IFFALSE 95012
95002: GO 95004
95004: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
95005: LD_STRING earthquake(getX(game), 0, 32)
95007: PPUSH
95008: CALL_OW 559
95012: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
95013: LD_EXP 89
95017: PUSH
95018: LD_EXP 130
95022: AND
95023: IFFALSE 95114
95025: GO 95027
95027: DISABLE
95028: LD_INT 0
95030: PPUSH
// begin enable ;
95031: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
95032: LD_ADDR_VAR 0 1
95036: PUSH
95037: LD_INT 22
95039: PUSH
95040: LD_OWVAR 2
95044: PUSH
95045: EMPTY
95046: LIST
95047: LIST
95048: PUSH
95049: LD_INT 21
95051: PUSH
95052: LD_INT 2
95054: PUSH
95055: EMPTY
95056: LIST
95057: LIST
95058: PUSH
95059: LD_INT 33
95061: PUSH
95062: LD_INT 3
95064: PUSH
95065: EMPTY
95066: LIST
95067: LIST
95068: PUSH
95069: EMPTY
95070: LIST
95071: LIST
95072: LIST
95073: PPUSH
95074: CALL_OW 69
95078: ST_TO_ADDR
// if not tmp then
95079: LD_VAR 0 1
95083: NOT
95084: IFFALSE 95088
// exit ;
95086: GO 95114
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
95088: LD_VAR 0 1
95092: PUSH
95093: LD_INT 1
95095: PPUSH
95096: LD_VAR 0 1
95100: PPUSH
95101: CALL_OW 12
95105: ARRAY
95106: PPUSH
95107: LD_INT 1
95109: PPUSH
95110: CALL_OW 234
// end ;
95114: PPOPN 1
95116: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
95117: LD_EXP 89
95121: PUSH
95122: LD_EXP 131
95126: AND
95127: IFFALSE 95268
95129: GO 95131
95131: DISABLE
95132: LD_INT 0
95134: PPUSH
95135: PPUSH
95136: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
95137: LD_ADDR_VAR 0 3
95141: PUSH
95142: LD_INT 22
95144: PUSH
95145: LD_OWVAR 2
95149: PUSH
95150: EMPTY
95151: LIST
95152: LIST
95153: PUSH
95154: LD_INT 25
95156: PUSH
95157: LD_INT 1
95159: PUSH
95160: EMPTY
95161: LIST
95162: LIST
95163: PUSH
95164: EMPTY
95165: LIST
95166: LIST
95167: PPUSH
95168: CALL_OW 69
95172: ST_TO_ADDR
// if not tmp then
95173: LD_VAR 0 3
95177: NOT
95178: IFFALSE 95182
// exit ;
95180: GO 95268
// un := tmp [ rand ( 1 , tmp ) ] ;
95182: LD_ADDR_VAR 0 2
95186: PUSH
95187: LD_VAR 0 3
95191: PUSH
95192: LD_INT 1
95194: PPUSH
95195: LD_VAR 0 3
95199: PPUSH
95200: CALL_OW 12
95204: ARRAY
95205: ST_TO_ADDR
// if Crawls ( un ) then
95206: LD_VAR 0 2
95210: PPUSH
95211: CALL_OW 318
95215: IFFALSE 95226
// ComWalk ( un ) ;
95217: LD_VAR 0 2
95221: PPUSH
95222: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
95226: LD_VAR 0 2
95230: PPUSH
95231: LD_INT 9
95233: PPUSH
95234: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
95238: LD_INT 28
95240: PPUSH
95241: LD_OWVAR 2
95245: PPUSH
95246: LD_INT 2
95248: PPUSH
95249: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
95253: LD_INT 29
95255: PPUSH
95256: LD_OWVAR 2
95260: PPUSH
95261: LD_INT 2
95263: PPUSH
95264: CALL_OW 322
// end ;
95268: PPOPN 3
95270: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
95271: LD_EXP 89
95275: PUSH
95276: LD_EXP 132
95280: AND
95281: IFFALSE 95392
95283: GO 95285
95285: DISABLE
95286: LD_INT 0
95288: PPUSH
95289: PPUSH
95290: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
95291: LD_ADDR_VAR 0 3
95295: PUSH
95296: LD_INT 22
95298: PUSH
95299: LD_OWVAR 2
95303: PUSH
95304: EMPTY
95305: LIST
95306: LIST
95307: PUSH
95308: LD_INT 25
95310: PUSH
95311: LD_INT 1
95313: PUSH
95314: EMPTY
95315: LIST
95316: LIST
95317: PUSH
95318: EMPTY
95319: LIST
95320: LIST
95321: PPUSH
95322: CALL_OW 69
95326: ST_TO_ADDR
// if not tmp then
95327: LD_VAR 0 3
95331: NOT
95332: IFFALSE 95336
// exit ;
95334: GO 95392
// un := tmp [ rand ( 1 , tmp ) ] ;
95336: LD_ADDR_VAR 0 2
95340: PUSH
95341: LD_VAR 0 3
95345: PUSH
95346: LD_INT 1
95348: PPUSH
95349: LD_VAR 0 3
95353: PPUSH
95354: CALL_OW 12
95358: ARRAY
95359: ST_TO_ADDR
// if Crawls ( un ) then
95360: LD_VAR 0 2
95364: PPUSH
95365: CALL_OW 318
95369: IFFALSE 95380
// ComWalk ( un ) ;
95371: LD_VAR 0 2
95375: PPUSH
95376: CALL_OW 138
// SetClass ( un , class_mortar ) ;
95380: LD_VAR 0 2
95384: PPUSH
95385: LD_INT 8
95387: PPUSH
95388: CALL_OW 336
// end ;
95392: PPOPN 3
95394: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
95395: LD_EXP 89
95399: PUSH
95400: LD_EXP 133
95404: AND
95405: IFFALSE 95549
95407: GO 95409
95409: DISABLE
95410: LD_INT 0
95412: PPUSH
95413: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
95414: LD_ADDR_VAR 0 2
95418: PUSH
95419: LD_INT 22
95421: PUSH
95422: LD_OWVAR 2
95426: PUSH
95427: EMPTY
95428: LIST
95429: LIST
95430: PUSH
95431: LD_INT 21
95433: PUSH
95434: LD_INT 2
95436: PUSH
95437: EMPTY
95438: LIST
95439: LIST
95440: PUSH
95441: LD_INT 2
95443: PUSH
95444: LD_INT 34
95446: PUSH
95447: LD_INT 12
95449: PUSH
95450: EMPTY
95451: LIST
95452: LIST
95453: PUSH
95454: LD_INT 34
95456: PUSH
95457: LD_INT 51
95459: PUSH
95460: EMPTY
95461: LIST
95462: LIST
95463: PUSH
95464: LD_INT 34
95466: PUSH
95467: LD_INT 32
95469: PUSH
95470: EMPTY
95471: LIST
95472: LIST
95473: PUSH
95474: EMPTY
95475: LIST
95476: LIST
95477: LIST
95478: LIST
95479: PUSH
95480: EMPTY
95481: LIST
95482: LIST
95483: LIST
95484: PPUSH
95485: CALL_OW 69
95489: ST_TO_ADDR
// if not tmp then
95490: LD_VAR 0 2
95494: NOT
95495: IFFALSE 95499
// exit ;
95497: GO 95549
// for i in tmp do
95499: LD_ADDR_VAR 0 1
95503: PUSH
95504: LD_VAR 0 2
95508: PUSH
95509: FOR_IN
95510: IFFALSE 95547
// if GetCargo ( i , mat_artifact ) = 0 then
95512: LD_VAR 0 1
95516: PPUSH
95517: LD_INT 4
95519: PPUSH
95520: CALL_OW 289
95524: PUSH
95525: LD_INT 0
95527: EQUAL
95528: IFFALSE 95545
// SetCargo ( i , mat_siberit , 100 ) ;
95530: LD_VAR 0 1
95534: PPUSH
95535: LD_INT 3
95537: PPUSH
95538: LD_INT 100
95540: PPUSH
95541: CALL_OW 290
95545: GO 95509
95547: POP
95548: POP
// end ;
95549: PPOPN 2
95551: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
95552: LD_EXP 89
95556: PUSH
95557: LD_EXP 134
95561: AND
95562: IFFALSE 95745
95564: GO 95566
95566: DISABLE
95567: LD_INT 0
95569: PPUSH
95570: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
95571: LD_ADDR_VAR 0 2
95575: PUSH
95576: LD_INT 22
95578: PUSH
95579: LD_OWVAR 2
95583: PUSH
95584: EMPTY
95585: LIST
95586: LIST
95587: PPUSH
95588: CALL_OW 69
95592: ST_TO_ADDR
// if not tmp then
95593: LD_VAR 0 2
95597: NOT
95598: IFFALSE 95602
// exit ;
95600: GO 95745
// for i := 1 to 2 do
95602: LD_ADDR_VAR 0 1
95606: PUSH
95607: DOUBLE
95608: LD_INT 1
95610: DEC
95611: ST_TO_ADDR
95612: LD_INT 2
95614: PUSH
95615: FOR_TO
95616: IFFALSE 95743
// begin uc_side := your_side ;
95618: LD_ADDR_OWVAR 20
95622: PUSH
95623: LD_OWVAR 2
95627: ST_TO_ADDR
// uc_nation := nation_american ;
95628: LD_ADDR_OWVAR 21
95632: PUSH
95633: LD_INT 1
95635: ST_TO_ADDR
// vc_chassis := us_morphling ;
95636: LD_ADDR_OWVAR 37
95640: PUSH
95641: LD_INT 5
95643: ST_TO_ADDR
// vc_engine := engine_siberite ;
95644: LD_ADDR_OWVAR 39
95648: PUSH
95649: LD_INT 3
95651: ST_TO_ADDR
// vc_control := control_computer ;
95652: LD_ADDR_OWVAR 38
95656: PUSH
95657: LD_INT 3
95659: ST_TO_ADDR
// vc_weapon := us_double_laser ;
95660: LD_ADDR_OWVAR 40
95664: PUSH
95665: LD_INT 10
95667: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
95668: LD_VAR 0 2
95672: PUSH
95673: LD_INT 1
95675: ARRAY
95676: PPUSH
95677: CALL_OW 310
95681: NOT
95682: IFFALSE 95729
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
95684: CALL_OW 45
95688: PPUSH
95689: LD_VAR 0 2
95693: PUSH
95694: LD_INT 1
95696: ARRAY
95697: PPUSH
95698: CALL_OW 250
95702: PPUSH
95703: LD_VAR 0 2
95707: PUSH
95708: LD_INT 1
95710: ARRAY
95711: PPUSH
95712: CALL_OW 251
95716: PPUSH
95717: LD_INT 12
95719: PPUSH
95720: LD_INT 1
95722: PPUSH
95723: CALL_OW 50
95727: GO 95741
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
95729: CALL_OW 45
95733: PPUSH
95734: LD_INT 1
95736: PPUSH
95737: CALL_OW 51
// end ;
95741: GO 95615
95743: POP
95744: POP
// end ;
95745: PPOPN 2
95747: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
95748: LD_EXP 89
95752: PUSH
95753: LD_EXP 135
95757: AND
95758: IFFALSE 95980
95760: GO 95762
95762: DISABLE
95763: LD_INT 0
95765: PPUSH
95766: PPUSH
95767: PPUSH
95768: PPUSH
95769: PPUSH
95770: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
95771: LD_ADDR_VAR 0 6
95775: PUSH
95776: LD_INT 22
95778: PUSH
95779: LD_OWVAR 2
95783: PUSH
95784: EMPTY
95785: LIST
95786: LIST
95787: PUSH
95788: LD_INT 21
95790: PUSH
95791: LD_INT 1
95793: PUSH
95794: EMPTY
95795: LIST
95796: LIST
95797: PUSH
95798: LD_INT 3
95800: PUSH
95801: LD_INT 23
95803: PUSH
95804: LD_INT 0
95806: PUSH
95807: EMPTY
95808: LIST
95809: LIST
95810: PUSH
95811: EMPTY
95812: LIST
95813: LIST
95814: PUSH
95815: EMPTY
95816: LIST
95817: LIST
95818: LIST
95819: PPUSH
95820: CALL_OW 69
95824: ST_TO_ADDR
// if not tmp then
95825: LD_VAR 0 6
95829: NOT
95830: IFFALSE 95834
// exit ;
95832: GO 95980
// s1 := rand ( 1 , 4 ) ;
95834: LD_ADDR_VAR 0 2
95838: PUSH
95839: LD_INT 1
95841: PPUSH
95842: LD_INT 4
95844: PPUSH
95845: CALL_OW 12
95849: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
95850: LD_ADDR_VAR 0 4
95854: PUSH
95855: LD_VAR 0 6
95859: PUSH
95860: LD_INT 1
95862: ARRAY
95863: PPUSH
95864: LD_VAR 0 2
95868: PPUSH
95869: CALL_OW 259
95873: ST_TO_ADDR
// if s1 = 1 then
95874: LD_VAR 0 2
95878: PUSH
95879: LD_INT 1
95881: EQUAL
95882: IFFALSE 95902
// s2 := rand ( 2 , 4 ) else
95884: LD_ADDR_VAR 0 3
95888: PUSH
95889: LD_INT 2
95891: PPUSH
95892: LD_INT 4
95894: PPUSH
95895: CALL_OW 12
95899: ST_TO_ADDR
95900: GO 95910
// s2 := 1 ;
95902: LD_ADDR_VAR 0 3
95906: PUSH
95907: LD_INT 1
95909: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
95910: LD_ADDR_VAR 0 5
95914: PUSH
95915: LD_VAR 0 6
95919: PUSH
95920: LD_INT 1
95922: ARRAY
95923: PPUSH
95924: LD_VAR 0 3
95928: PPUSH
95929: CALL_OW 259
95933: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
95934: LD_VAR 0 6
95938: PUSH
95939: LD_INT 1
95941: ARRAY
95942: PPUSH
95943: LD_VAR 0 2
95947: PPUSH
95948: LD_VAR 0 5
95952: PPUSH
95953: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
95957: LD_VAR 0 6
95961: PUSH
95962: LD_INT 1
95964: ARRAY
95965: PPUSH
95966: LD_VAR 0 3
95970: PPUSH
95971: LD_VAR 0 4
95975: PPUSH
95976: CALL_OW 237
// end ;
95980: PPOPN 6
95982: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
95983: LD_EXP 89
95987: PUSH
95988: LD_EXP 136
95992: AND
95993: IFFALSE 96072
95995: GO 95997
95997: DISABLE
95998: LD_INT 0
96000: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
96001: LD_ADDR_VAR 0 1
96005: PUSH
96006: LD_INT 22
96008: PUSH
96009: LD_OWVAR 2
96013: PUSH
96014: EMPTY
96015: LIST
96016: LIST
96017: PUSH
96018: LD_INT 30
96020: PUSH
96021: LD_INT 3
96023: PUSH
96024: EMPTY
96025: LIST
96026: LIST
96027: PUSH
96028: EMPTY
96029: LIST
96030: LIST
96031: PPUSH
96032: CALL_OW 69
96036: ST_TO_ADDR
// if not tmp then
96037: LD_VAR 0 1
96041: NOT
96042: IFFALSE 96046
// exit ;
96044: GO 96072
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
96046: LD_VAR 0 1
96050: PUSH
96051: LD_INT 1
96053: PPUSH
96054: LD_VAR 0 1
96058: PPUSH
96059: CALL_OW 12
96063: ARRAY
96064: PPUSH
96065: LD_INT 1
96067: PPUSH
96068: CALL_OW 234
// end ;
96072: PPOPN 1
96074: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
96075: LD_EXP 89
96079: PUSH
96080: LD_EXP 137
96084: AND
96085: IFFALSE 96197
96087: GO 96089
96089: DISABLE
96090: LD_INT 0
96092: PPUSH
96093: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
96094: LD_ADDR_VAR 0 2
96098: PUSH
96099: LD_INT 22
96101: PUSH
96102: LD_OWVAR 2
96106: PUSH
96107: EMPTY
96108: LIST
96109: LIST
96110: PUSH
96111: LD_INT 2
96113: PUSH
96114: LD_INT 30
96116: PUSH
96117: LD_INT 27
96119: PUSH
96120: EMPTY
96121: LIST
96122: LIST
96123: PUSH
96124: LD_INT 30
96126: PUSH
96127: LD_INT 26
96129: PUSH
96130: EMPTY
96131: LIST
96132: LIST
96133: PUSH
96134: LD_INT 30
96136: PUSH
96137: LD_INT 28
96139: PUSH
96140: EMPTY
96141: LIST
96142: LIST
96143: PUSH
96144: EMPTY
96145: LIST
96146: LIST
96147: LIST
96148: LIST
96149: PUSH
96150: EMPTY
96151: LIST
96152: LIST
96153: PPUSH
96154: CALL_OW 69
96158: ST_TO_ADDR
// if not tmp then
96159: LD_VAR 0 2
96163: NOT
96164: IFFALSE 96168
// exit ;
96166: GO 96197
// for i in tmp do
96168: LD_ADDR_VAR 0 1
96172: PUSH
96173: LD_VAR 0 2
96177: PUSH
96178: FOR_IN
96179: IFFALSE 96195
// SetLives ( i , 1 ) ;
96181: LD_VAR 0 1
96185: PPUSH
96186: LD_INT 1
96188: PPUSH
96189: CALL_OW 234
96193: GO 96178
96195: POP
96196: POP
// end ;
96197: PPOPN 2
96199: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
96200: LD_EXP 89
96204: PUSH
96205: LD_EXP 138
96209: AND
96210: IFFALSE 96484
96212: GO 96214
96214: DISABLE
96215: LD_INT 0
96217: PPUSH
96218: PPUSH
96219: PPUSH
// begin i := rand ( 1 , 7 ) ;
96220: LD_ADDR_VAR 0 1
96224: PUSH
96225: LD_INT 1
96227: PPUSH
96228: LD_INT 7
96230: PPUSH
96231: CALL_OW 12
96235: ST_TO_ADDR
// case i of 1 :
96236: LD_VAR 0 1
96240: PUSH
96241: LD_INT 1
96243: DOUBLE
96244: EQUAL
96245: IFTRUE 96249
96247: GO 96259
96249: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
96250: LD_STRING earthquake(getX(game), 0, 32)
96252: PPUSH
96253: CALL_OW 559
96257: GO 96484
96259: LD_INT 2
96261: DOUBLE
96262: EQUAL
96263: IFTRUE 96267
96265: GO 96281
96267: POP
// begin ToLua ( displayStucuk(); ) ;
96268: LD_STRING displayStucuk();
96270: PPUSH
96271: CALL_OW 559
// ResetFog ;
96275: CALL_OW 335
// end ; 3 :
96279: GO 96484
96281: LD_INT 3
96283: DOUBLE
96284: EQUAL
96285: IFTRUE 96289
96287: GO 96393
96289: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
96290: LD_ADDR_VAR 0 2
96294: PUSH
96295: LD_INT 22
96297: PUSH
96298: LD_OWVAR 2
96302: PUSH
96303: EMPTY
96304: LIST
96305: LIST
96306: PUSH
96307: LD_INT 25
96309: PUSH
96310: LD_INT 1
96312: PUSH
96313: EMPTY
96314: LIST
96315: LIST
96316: PUSH
96317: EMPTY
96318: LIST
96319: LIST
96320: PPUSH
96321: CALL_OW 69
96325: ST_TO_ADDR
// if not tmp then
96326: LD_VAR 0 2
96330: NOT
96331: IFFALSE 96335
// exit ;
96333: GO 96484
// un := tmp [ rand ( 1 , tmp ) ] ;
96335: LD_ADDR_VAR 0 3
96339: PUSH
96340: LD_VAR 0 2
96344: PUSH
96345: LD_INT 1
96347: PPUSH
96348: LD_VAR 0 2
96352: PPUSH
96353: CALL_OW 12
96357: ARRAY
96358: ST_TO_ADDR
// if Crawls ( un ) then
96359: LD_VAR 0 3
96363: PPUSH
96364: CALL_OW 318
96368: IFFALSE 96379
// ComWalk ( un ) ;
96370: LD_VAR 0 3
96374: PPUSH
96375: CALL_OW 138
// SetClass ( un , class_mortar ) ;
96379: LD_VAR 0 3
96383: PPUSH
96384: LD_INT 8
96386: PPUSH
96387: CALL_OW 336
// end ; 4 :
96391: GO 96484
96393: LD_INT 4
96395: DOUBLE
96396: EQUAL
96397: IFTRUE 96401
96399: GO 96462
96401: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
96402: LD_ADDR_VAR 0 2
96406: PUSH
96407: LD_INT 22
96409: PUSH
96410: LD_OWVAR 2
96414: PUSH
96415: EMPTY
96416: LIST
96417: LIST
96418: PUSH
96419: LD_INT 30
96421: PUSH
96422: LD_INT 29
96424: PUSH
96425: EMPTY
96426: LIST
96427: LIST
96428: PUSH
96429: EMPTY
96430: LIST
96431: LIST
96432: PPUSH
96433: CALL_OW 69
96437: ST_TO_ADDR
// if not tmp then
96438: LD_VAR 0 2
96442: NOT
96443: IFFALSE 96447
// exit ;
96445: GO 96484
// DestroyUnit ( tmp [ 1 ] ) ;
96447: LD_VAR 0 2
96451: PUSH
96452: LD_INT 1
96454: ARRAY
96455: PPUSH
96456: CALL_OW 65
// end ; 5 .. 7 :
96460: GO 96484
96462: LD_INT 5
96464: DOUBLE
96465: GREATEREQUAL
96466: IFFALSE 96474
96468: LD_INT 7
96470: DOUBLE
96471: LESSEQUAL
96472: IFTRUE 96476
96474: GO 96483
96476: POP
// StreamSibBomb ; end ;
96477: CALL 92734 0 0
96481: GO 96484
96483: POP
// end ;
96484: PPOPN 3
96486: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
96487: LD_EXP 89
96491: PUSH
96492: LD_EXP 139
96496: AND
96497: IFFALSE 96653
96499: GO 96501
96501: DISABLE
96502: LD_INT 0
96504: PPUSH
96505: PPUSH
96506: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
96507: LD_ADDR_VAR 0 2
96511: PUSH
96512: LD_INT 81
96514: PUSH
96515: LD_OWVAR 2
96519: PUSH
96520: EMPTY
96521: LIST
96522: LIST
96523: PUSH
96524: LD_INT 2
96526: PUSH
96527: LD_INT 21
96529: PUSH
96530: LD_INT 1
96532: PUSH
96533: EMPTY
96534: LIST
96535: LIST
96536: PUSH
96537: LD_INT 21
96539: PUSH
96540: LD_INT 2
96542: PUSH
96543: EMPTY
96544: LIST
96545: LIST
96546: PUSH
96547: EMPTY
96548: LIST
96549: LIST
96550: LIST
96551: PUSH
96552: EMPTY
96553: LIST
96554: LIST
96555: PPUSH
96556: CALL_OW 69
96560: ST_TO_ADDR
// if not tmp then
96561: LD_VAR 0 2
96565: NOT
96566: IFFALSE 96570
// exit ;
96568: GO 96653
// p := 0 ;
96570: LD_ADDR_VAR 0 3
96574: PUSH
96575: LD_INT 0
96577: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
96578: LD_INT 35
96580: PPUSH
96581: CALL_OW 67
// p := p + 1 ;
96585: LD_ADDR_VAR 0 3
96589: PUSH
96590: LD_VAR 0 3
96594: PUSH
96595: LD_INT 1
96597: PLUS
96598: ST_TO_ADDR
// for i in tmp do
96599: LD_ADDR_VAR 0 1
96603: PUSH
96604: LD_VAR 0 2
96608: PUSH
96609: FOR_IN
96610: IFFALSE 96641
// if GetLives ( i ) < 1000 then
96612: LD_VAR 0 1
96616: PPUSH
96617: CALL_OW 256
96621: PUSH
96622: LD_INT 1000
96624: LESS
96625: IFFALSE 96639
// SetLives ( i , 1000 ) ;
96627: LD_VAR 0 1
96631: PPUSH
96632: LD_INT 1000
96634: PPUSH
96635: CALL_OW 234
96639: GO 96609
96641: POP
96642: POP
// until p > 20 ;
96643: LD_VAR 0 3
96647: PUSH
96648: LD_INT 20
96650: GREATER
96651: IFFALSE 96578
// end ;
96653: PPOPN 3
96655: END
// every 0 0$1 trigger StreamModeActive and sTime do
96656: LD_EXP 89
96660: PUSH
96661: LD_EXP 140
96665: AND
96666: IFFALSE 96701
96668: GO 96670
96670: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
96671: LD_INT 28
96673: PPUSH
96674: LD_OWVAR 2
96678: PPUSH
96679: LD_INT 2
96681: PPUSH
96682: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
96686: LD_INT 30
96688: PPUSH
96689: LD_OWVAR 2
96693: PPUSH
96694: LD_INT 2
96696: PPUSH
96697: CALL_OW 322
// end ;
96701: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
96702: LD_EXP 89
96706: PUSH
96707: LD_EXP 141
96711: AND
96712: IFFALSE 96833
96714: GO 96716
96716: DISABLE
96717: LD_INT 0
96719: PPUSH
96720: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
96721: LD_ADDR_VAR 0 2
96725: PUSH
96726: LD_INT 22
96728: PUSH
96729: LD_OWVAR 2
96733: PUSH
96734: EMPTY
96735: LIST
96736: LIST
96737: PUSH
96738: LD_INT 21
96740: PUSH
96741: LD_INT 1
96743: PUSH
96744: EMPTY
96745: LIST
96746: LIST
96747: PUSH
96748: LD_INT 3
96750: PUSH
96751: LD_INT 23
96753: PUSH
96754: LD_INT 0
96756: PUSH
96757: EMPTY
96758: LIST
96759: LIST
96760: PUSH
96761: EMPTY
96762: LIST
96763: LIST
96764: PUSH
96765: EMPTY
96766: LIST
96767: LIST
96768: LIST
96769: PPUSH
96770: CALL_OW 69
96774: ST_TO_ADDR
// if not tmp then
96775: LD_VAR 0 2
96779: NOT
96780: IFFALSE 96784
// exit ;
96782: GO 96833
// for i in tmp do
96784: LD_ADDR_VAR 0 1
96788: PUSH
96789: LD_VAR 0 2
96793: PUSH
96794: FOR_IN
96795: IFFALSE 96831
// begin if Crawls ( i ) then
96797: LD_VAR 0 1
96801: PPUSH
96802: CALL_OW 318
96806: IFFALSE 96817
// ComWalk ( i ) ;
96808: LD_VAR 0 1
96812: PPUSH
96813: CALL_OW 138
// SetClass ( i , 2 ) ;
96817: LD_VAR 0 1
96821: PPUSH
96822: LD_INT 2
96824: PPUSH
96825: CALL_OW 336
// end ;
96829: GO 96794
96831: POP
96832: POP
// end ;
96833: PPOPN 2
96835: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
96836: LD_EXP 89
96840: PUSH
96841: LD_EXP 142
96845: AND
96846: IFFALSE 97127
96848: GO 96850
96850: DISABLE
96851: LD_INT 0
96853: PPUSH
96854: PPUSH
96855: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
96856: LD_OWVAR 2
96860: PPUSH
96861: LD_INT 9
96863: PPUSH
96864: LD_INT 1
96866: PPUSH
96867: LD_INT 1
96869: PPUSH
96870: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
96874: LD_INT 9
96876: PPUSH
96877: LD_OWVAR 2
96881: PPUSH
96882: CALL_OW 343
// uc_side := 9 ;
96886: LD_ADDR_OWVAR 20
96890: PUSH
96891: LD_INT 9
96893: ST_TO_ADDR
// uc_nation := 2 ;
96894: LD_ADDR_OWVAR 21
96898: PUSH
96899: LD_INT 2
96901: ST_TO_ADDR
// hc_name := Dark Warrior ;
96902: LD_ADDR_OWVAR 26
96906: PUSH
96907: LD_STRING Dark Warrior
96909: ST_TO_ADDR
// hc_gallery :=  ;
96910: LD_ADDR_OWVAR 33
96914: PUSH
96915: LD_STRING 
96917: ST_TO_ADDR
// hc_noskilllimit := true ;
96918: LD_ADDR_OWVAR 76
96922: PUSH
96923: LD_INT 1
96925: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
96926: LD_ADDR_OWVAR 31
96930: PUSH
96931: LD_INT 30
96933: PUSH
96934: LD_INT 30
96936: PUSH
96937: LD_INT 30
96939: PUSH
96940: LD_INT 30
96942: PUSH
96943: EMPTY
96944: LIST
96945: LIST
96946: LIST
96947: LIST
96948: ST_TO_ADDR
// un := CreateHuman ;
96949: LD_ADDR_VAR 0 3
96953: PUSH
96954: CALL_OW 44
96958: ST_TO_ADDR
// hc_noskilllimit := false ;
96959: LD_ADDR_OWVAR 76
96963: PUSH
96964: LD_INT 0
96966: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
96967: LD_VAR 0 3
96971: PPUSH
96972: LD_INT 1
96974: PPUSH
96975: CALL_OW 51
// p := 0 ;
96979: LD_ADDR_VAR 0 2
96983: PUSH
96984: LD_INT 0
96986: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
96987: LD_INT 35
96989: PPUSH
96990: CALL_OW 67
// p := p + 1 ;
96994: LD_ADDR_VAR 0 2
96998: PUSH
96999: LD_VAR 0 2
97003: PUSH
97004: LD_INT 1
97006: PLUS
97007: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
97008: LD_VAR 0 3
97012: PPUSH
97013: CALL_OW 256
97017: PUSH
97018: LD_INT 1000
97020: LESS
97021: IFFALSE 97035
// SetLives ( un , 1000 ) ;
97023: LD_VAR 0 3
97027: PPUSH
97028: LD_INT 1000
97030: PPUSH
97031: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
97035: LD_VAR 0 3
97039: PPUSH
97040: LD_INT 81
97042: PUSH
97043: LD_OWVAR 2
97047: PUSH
97048: EMPTY
97049: LIST
97050: LIST
97051: PUSH
97052: LD_INT 91
97054: PUSH
97055: LD_VAR 0 3
97059: PUSH
97060: LD_INT 30
97062: PUSH
97063: EMPTY
97064: LIST
97065: LIST
97066: LIST
97067: PUSH
97068: EMPTY
97069: LIST
97070: LIST
97071: PPUSH
97072: CALL_OW 69
97076: PPUSH
97077: LD_VAR 0 3
97081: PPUSH
97082: CALL_OW 74
97086: PPUSH
97087: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
97091: LD_VAR 0 2
97095: PUSH
97096: LD_INT 60
97098: GREATER
97099: PUSH
97100: LD_VAR 0 3
97104: PPUSH
97105: CALL_OW 301
97109: OR
97110: IFFALSE 96987
// if un then
97112: LD_VAR 0 3
97116: IFFALSE 97127
// RemoveUnit ( un ) ;
97118: LD_VAR 0 3
97122: PPUSH
97123: CALL_OW 64
// end ;
97127: PPOPN 3
97129: END
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
97130: LD_INT 0
97132: PPUSH
97133: PPUSH
97134: PPUSH
97135: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
97136: LD_ADDR_VAR 0 4
97140: PUSH
97141: LD_INT 22
97143: PUSH
97144: LD_OWVAR 2
97148: PUSH
97149: EMPTY
97150: LIST
97151: LIST
97152: PUSH
97153: LD_INT 2
97155: PUSH
97156: LD_INT 30
97158: PUSH
97159: LD_INT 0
97161: PUSH
97162: EMPTY
97163: LIST
97164: LIST
97165: PUSH
97166: LD_INT 30
97168: PUSH
97169: LD_INT 1
97171: PUSH
97172: EMPTY
97173: LIST
97174: LIST
97175: PUSH
97176: EMPTY
97177: LIST
97178: LIST
97179: LIST
97180: PUSH
97181: EMPTY
97182: LIST
97183: LIST
97184: PPUSH
97185: CALL_OW 69
97189: ST_TO_ADDR
// if not tmp then
97190: LD_VAR 0 4
97194: NOT
97195: IFFALSE 97199
// exit ;
97197: GO 97258
// for i in tmp do
97199: LD_ADDR_VAR 0 2
97203: PUSH
97204: LD_VAR 0 4
97208: PUSH
97209: FOR_IN
97210: IFFALSE 97256
// for j = 1 to 3 do
97212: LD_ADDR_VAR 0 3
97216: PUSH
97217: DOUBLE
97218: LD_INT 1
97220: DEC
97221: ST_TO_ADDR
97222: LD_INT 3
97224: PUSH
97225: FOR_TO
97226: IFFALSE 97252
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
97228: LD_VAR 0 2
97232: PPUSH
97233: CALL_OW 274
97237: PPUSH
97238: LD_VAR 0 3
97242: PPUSH
97243: LD_INT 99999
97245: PPUSH
97246: CALL_OW 277
97250: GO 97225
97252: POP
97253: POP
97254: GO 97209
97256: POP
97257: POP
// end ;
97258: LD_VAR 0 1
97262: RET
// export function hHackSetLevel10 ; var i , j ; begin
97263: LD_INT 0
97265: PPUSH
97266: PPUSH
97267: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
97268: LD_ADDR_VAR 0 2
97272: PUSH
97273: LD_INT 21
97275: PUSH
97276: LD_INT 1
97278: PUSH
97279: EMPTY
97280: LIST
97281: LIST
97282: PPUSH
97283: CALL_OW 69
97287: PUSH
97288: FOR_IN
97289: IFFALSE 97341
// if IsSelected ( i ) then
97291: LD_VAR 0 2
97295: PPUSH
97296: CALL_OW 306
97300: IFFALSE 97339
// begin for j := 1 to 4 do
97302: LD_ADDR_VAR 0 3
97306: PUSH
97307: DOUBLE
97308: LD_INT 1
97310: DEC
97311: ST_TO_ADDR
97312: LD_INT 4
97314: PUSH
97315: FOR_TO
97316: IFFALSE 97337
// SetSkill ( i , j , 10 ) ;
97318: LD_VAR 0 2
97322: PPUSH
97323: LD_VAR 0 3
97327: PPUSH
97328: LD_INT 10
97330: PPUSH
97331: CALL_OW 237
97335: GO 97315
97337: POP
97338: POP
// end ;
97339: GO 97288
97341: POP
97342: POP
// end ;
97343: LD_VAR 0 1
97347: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
97348: LD_INT 0
97350: PPUSH
97351: PPUSH
97352: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
97353: LD_ADDR_VAR 0 2
97357: PUSH
97358: LD_INT 22
97360: PUSH
97361: LD_OWVAR 2
97365: PUSH
97366: EMPTY
97367: LIST
97368: LIST
97369: PUSH
97370: LD_INT 21
97372: PUSH
97373: LD_INT 1
97375: PUSH
97376: EMPTY
97377: LIST
97378: LIST
97379: PUSH
97380: EMPTY
97381: LIST
97382: LIST
97383: PPUSH
97384: CALL_OW 69
97388: PUSH
97389: FOR_IN
97390: IFFALSE 97431
// begin for j := 1 to 4 do
97392: LD_ADDR_VAR 0 3
97396: PUSH
97397: DOUBLE
97398: LD_INT 1
97400: DEC
97401: ST_TO_ADDR
97402: LD_INT 4
97404: PUSH
97405: FOR_TO
97406: IFFALSE 97427
// SetSkill ( i , j , 10 ) ;
97408: LD_VAR 0 2
97412: PPUSH
97413: LD_VAR 0 3
97417: PPUSH
97418: LD_INT 10
97420: PPUSH
97421: CALL_OW 237
97425: GO 97405
97427: POP
97428: POP
// end ;
97429: GO 97389
97431: POP
97432: POP
// end ;
97433: LD_VAR 0 1
97437: RET
// export function hHackSpawnHuman ( nation , class , skill ) ; begin
97438: LD_INT 0
97440: PPUSH
// uc_side := your_side ;
97441: LD_ADDR_OWVAR 20
97445: PUSH
97446: LD_OWVAR 2
97450: ST_TO_ADDR
// uc_nation := nation ;
97451: LD_ADDR_OWVAR 21
97455: PUSH
97456: LD_VAR 0 1
97460: ST_TO_ADDR
// InitHc ;
97461: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
97465: LD_INT 0
97467: PPUSH
97468: LD_VAR 0 2
97472: PPUSH
97473: LD_VAR 0 3
97477: PPUSH
97478: CALL_OW 380
// PlaceUnitAnywhere ( CreateHuman , true ) ;
97482: CALL_OW 44
97486: PPUSH
97487: LD_INT 1
97489: PPUSH
97490: CALL_OW 51
// end ;
97494: LD_VAR 0 4
97498: RET
// export function hHackSpawnVehicle ; begin
97499: LD_INT 0
97501: PPUSH
// uc_side := your_side ;
97502: LD_ADDR_OWVAR 20
97506: PUSH
97507: LD_OWVAR 2
97511: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
97512: LD_ADDR_OWVAR 21
97516: PUSH
97517: LD_INT 1
97519: PPUSH
97520: LD_INT 3
97522: PPUSH
97523: CALL_OW 12
97527: ST_TO_ADDR
// InitVc ;
97528: CALL_OW 20
// case uc_nation of 1 :
97532: LD_OWVAR 21
97536: PUSH
97537: LD_INT 1
97539: DOUBLE
97540: EQUAL
97541: IFTRUE 97545
97543: GO 97689
97545: POP
// begin vc_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] [ rand ( 1 , 5 ) ] ;
97546: LD_ADDR_OWVAR 37
97550: PUSH
97551: LD_INT 1
97553: PUSH
97554: LD_INT 2
97556: PUSH
97557: LD_INT 3
97559: PUSH
97560: LD_INT 4
97562: PUSH
97563: LD_INT 5
97565: PUSH
97566: EMPTY
97567: LIST
97568: LIST
97569: LIST
97570: LIST
97571: LIST
97572: PUSH
97573: LD_INT 1
97575: PPUSH
97576: LD_INT 5
97578: PPUSH
97579: CALL_OW 12
97583: ARRAY
97584: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
97585: LD_ADDR_OWVAR 39
97589: PUSH
97590: LD_INT 1
97592: PPUSH
97593: LD_INT 3
97595: PPUSH
97596: CALL_OW 12
97600: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_computer ] [ rand ( 1 , 3 ) ] ;
97601: LD_ADDR_OWVAR 38
97605: PUSH
97606: LD_INT 1
97608: PUSH
97609: LD_INT 2
97611: PUSH
97612: LD_INT 3
97614: PUSH
97615: EMPTY
97616: LIST
97617: LIST
97618: LIST
97619: PUSH
97620: LD_INT 1
97622: PPUSH
97623: LD_INT 3
97625: PPUSH
97626: CALL_OW 12
97630: ARRAY
97631: ST_TO_ADDR
// vc_weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_light_gun , us_rocket_launcher , us_siberium_rocket , us_laser , us_double_laser , us_heavy_gun ] [ rand ( 1 , 9 ) ] ;
97632: LD_ADDR_OWVAR 40
97636: PUSH
97637: LD_INT 2
97639: PUSH
97640: LD_INT 4
97642: PUSH
97643: LD_INT 5
97645: PUSH
97646: LD_INT 3
97648: PUSH
97649: LD_INT 7
97651: PUSH
97652: LD_INT 8
97654: PUSH
97655: LD_INT 9
97657: PUSH
97658: LD_INT 10
97660: PUSH
97661: LD_INT 6
97663: PUSH
97664: EMPTY
97665: LIST
97666: LIST
97667: LIST
97668: LIST
97669: LIST
97670: LIST
97671: LIST
97672: LIST
97673: LIST
97674: PUSH
97675: LD_INT 1
97677: PPUSH
97678: LD_INT 9
97680: PPUSH
97681: CALL_OW 12
97685: ARRAY
97686: ST_TO_ADDR
// end ; 2 :
97687: GO 97954
97689: LD_INT 2
97691: DOUBLE
97692: EQUAL
97693: IFTRUE 97697
97695: GO 97821
97697: POP
// begin vc_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 4 ) ] ;
97698: LD_ADDR_OWVAR 37
97702: PUSH
97703: LD_INT 11
97705: PUSH
97706: LD_INT 12
97708: PUSH
97709: LD_INT 13
97711: PUSH
97712: LD_INT 14
97714: PUSH
97715: EMPTY
97716: LIST
97717: LIST
97718: LIST
97719: LIST
97720: PUSH
97721: LD_INT 1
97723: PPUSH
97724: LD_INT 4
97726: PPUSH
97727: CALL_OW 12
97731: ARRAY
97732: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
97733: LD_ADDR_OWVAR 39
97737: PUSH
97738: LD_INT 1
97740: PPUSH
97741: LD_INT 3
97743: PPUSH
97744: CALL_OW 12
97748: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] ;
97749: LD_ADDR_OWVAR 38
97753: PUSH
97754: LD_INT 1
97756: PUSH
97757: LD_INT 2
97759: PUSH
97760: LD_INT 5
97762: PUSH
97763: EMPTY
97764: LIST
97765: LIST
97766: LIST
97767: PUSH
97768: LD_INT 1
97770: PPUSH
97771: LD_INT 3
97773: PPUSH
97774: CALL_OW 12
97778: ARRAY
97779: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_flame_thrower , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 5 ) ] ;
97780: LD_ADDR_OWVAR 40
97784: PUSH
97785: LD_INT 24
97787: PUSH
97788: LD_INT 26
97790: PUSH
97791: LD_INT 27
97793: PUSH
97794: LD_INT 28
97796: PUSH
97797: LD_INT 29
97799: PUSH
97800: EMPTY
97801: LIST
97802: LIST
97803: LIST
97804: LIST
97805: LIST
97806: PUSH
97807: LD_INT 1
97809: PPUSH
97810: LD_INT 5
97812: PPUSH
97813: CALL_OW 12
97817: ARRAY
97818: ST_TO_ADDR
// end ; 3 :
97819: GO 97954
97821: LD_INT 3
97823: DOUBLE
97824: EQUAL
97825: IFTRUE 97829
97827: GO 97953
97829: POP
// begin vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
97830: LD_ADDR_OWVAR 37
97834: PUSH
97835: LD_INT 21
97837: PUSH
97838: LD_INT 23
97840: PUSH
97841: LD_INT 22
97843: PUSH
97844: LD_INT 24
97846: PUSH
97847: EMPTY
97848: LIST
97849: LIST
97850: LIST
97851: LIST
97852: PUSH
97853: LD_INT 1
97855: PPUSH
97856: LD_INT 4
97858: PPUSH
97859: CALL_OW 12
97863: ARRAY
97864: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
97865: LD_ADDR_OWVAR 39
97869: PUSH
97870: LD_INT 1
97872: PPUSH
97873: LD_INT 3
97875: PPUSH
97876: CALL_OW 12
97880: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] ;
97881: LD_ADDR_OWVAR 38
97885: PUSH
97886: LD_INT 1
97888: PUSH
97889: LD_INT 3
97891: PUSH
97892: EMPTY
97893: LIST
97894: LIST
97895: PUSH
97896: LD_INT 1
97898: PPUSH
97899: LD_INT 2
97901: PPUSH
97902: CALL_OW 12
97906: ARRAY
97907: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_siberium_rocket , ru_rocket ] [ rand ( 1 , 6 ) ] ;
97908: LD_ADDR_OWVAR 40
97912: PUSH
97913: LD_INT 42
97915: PUSH
97916: LD_INT 43
97918: PUSH
97919: LD_INT 44
97921: PUSH
97922: LD_INT 46
97924: PUSH
97925: LD_INT 48
97927: PUSH
97928: LD_INT 47
97930: PUSH
97931: EMPTY
97932: LIST
97933: LIST
97934: LIST
97935: LIST
97936: LIST
97937: LIST
97938: PUSH
97939: LD_INT 1
97941: PPUSH
97942: LD_INT 6
97944: PPUSH
97945: CALL_OW 12
97949: ARRAY
97950: ST_TO_ADDR
// end ; end ;
97951: GO 97954
97953: POP
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
97954: CALL_OW 45
97958: PPUSH
97959: LD_INT 1
97961: PPUSH
97962: CALL_OW 51
// end ;
97966: LD_VAR 0 1
97970: RET
// export hInvincible ; every 1 do
97971: GO 97973
97973: DISABLE
// hInvincible := [ ] ;
97974: LD_ADDR_EXP 143
97978: PUSH
97979: EMPTY
97980: ST_TO_ADDR
97981: END
// every 10 do var i ;
97982: GO 97984
97984: DISABLE
97985: LD_INT 0
97987: PPUSH
// begin enable ;
97988: ENABLE
// if not hInvincible then
97989: LD_EXP 143
97993: NOT
97994: IFFALSE 97998
// exit ;
97996: GO 98042
// for i in hInvincible do
97998: LD_ADDR_VAR 0 1
98002: PUSH
98003: LD_EXP 143
98007: PUSH
98008: FOR_IN
98009: IFFALSE 98040
// if GetLives ( i ) < 1000 then
98011: LD_VAR 0 1
98015: PPUSH
98016: CALL_OW 256
98020: PUSH
98021: LD_INT 1000
98023: LESS
98024: IFFALSE 98038
// SetLives ( i , 1000 ) ;
98026: LD_VAR 0 1
98030: PPUSH
98031: LD_INT 1000
98033: PPUSH
98034: CALL_OW 234
98038: GO 98008
98040: POP
98041: POP
// end ;
98042: PPOPN 1
98044: END
// export function hHackInvincible ; var i ; begin
98045: LD_INT 0
98047: PPUSH
98048: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
98049: LD_ADDR_VAR 0 2
98053: PUSH
98054: LD_INT 2
98056: PUSH
98057: LD_INT 21
98059: PUSH
98060: LD_INT 1
98062: PUSH
98063: EMPTY
98064: LIST
98065: LIST
98066: PUSH
98067: LD_INT 21
98069: PUSH
98070: LD_INT 2
98072: PUSH
98073: EMPTY
98074: LIST
98075: LIST
98076: PUSH
98077: EMPTY
98078: LIST
98079: LIST
98080: LIST
98081: PPUSH
98082: CALL_OW 69
98086: PUSH
98087: FOR_IN
98088: IFFALSE 98149
// if IsSelected ( i ) then
98090: LD_VAR 0 2
98094: PPUSH
98095: CALL_OW 306
98099: IFFALSE 98147
// begin if i in hInvincible then
98101: LD_VAR 0 2
98105: PUSH
98106: LD_EXP 143
98110: IN
98111: IFFALSE 98131
// hInvincible := hInvincible diff i else
98113: LD_ADDR_EXP 143
98117: PUSH
98118: LD_EXP 143
98122: PUSH
98123: LD_VAR 0 2
98127: DIFF
98128: ST_TO_ADDR
98129: GO 98147
// hInvincible := hInvincible union i ;
98131: LD_ADDR_EXP 143
98135: PUSH
98136: LD_EXP 143
98140: PUSH
98141: LD_VAR 0 2
98145: UNION
98146: ST_TO_ADDR
// end ;
98147: GO 98087
98149: POP
98150: POP
// end ;
98151: LD_VAR 0 1
98155: RET
// export function hHackInvisible ; var i , j ; begin
98156: LD_INT 0
98158: PPUSH
98159: PPUSH
98160: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
98161: LD_ADDR_VAR 0 2
98165: PUSH
98166: LD_INT 21
98168: PUSH
98169: LD_INT 1
98171: PUSH
98172: EMPTY
98173: LIST
98174: LIST
98175: PPUSH
98176: CALL_OW 69
98180: PUSH
98181: FOR_IN
98182: IFFALSE 98206
// if IsSelected ( i ) then
98184: LD_VAR 0 2
98188: PPUSH
98189: CALL_OW 306
98193: IFFALSE 98204
// ComForceInvisible ( i ) ;
98195: LD_VAR 0 2
98199: PPUSH
98200: CALL_OW 496
98204: GO 98181
98206: POP
98207: POP
// end ;
98208: LD_VAR 0 1
98212: RET
// export function hHackChangeYourSide ; begin
98213: LD_INT 0
98215: PPUSH
// if your_side = 8 then
98216: LD_OWVAR 2
98220: PUSH
98221: LD_INT 8
98223: EQUAL
98224: IFFALSE 98236
// your_side := 0 else
98226: LD_ADDR_OWVAR 2
98230: PUSH
98231: LD_INT 0
98233: ST_TO_ADDR
98234: GO 98250
// your_side := your_side + 1 ;
98236: LD_ADDR_OWVAR 2
98240: PUSH
98241: LD_OWVAR 2
98245: PUSH
98246: LD_INT 1
98248: PLUS
98249: ST_TO_ADDR
// end ;
98250: LD_VAR 0 1
98254: RET
// export function hHackChangeUnitSide ; var i , j ; begin
98255: LD_INT 0
98257: PPUSH
98258: PPUSH
98259: PPUSH
// for i in all_units do
98260: LD_ADDR_VAR 0 2
98264: PUSH
98265: LD_OWVAR 3
98269: PUSH
98270: FOR_IN
98271: IFFALSE 98349
// if IsSelected ( i ) then
98273: LD_VAR 0 2
98277: PPUSH
98278: CALL_OW 306
98282: IFFALSE 98347
// begin j := GetSide ( i ) ;
98284: LD_ADDR_VAR 0 3
98288: PUSH
98289: LD_VAR 0 2
98293: PPUSH
98294: CALL_OW 255
98298: ST_TO_ADDR
// if j = 8 then
98299: LD_VAR 0 3
98303: PUSH
98304: LD_INT 8
98306: EQUAL
98307: IFFALSE 98319
// j := 0 else
98309: LD_ADDR_VAR 0 3
98313: PUSH
98314: LD_INT 0
98316: ST_TO_ADDR
98317: GO 98333
// j := j + 1 ;
98319: LD_ADDR_VAR 0 3
98323: PUSH
98324: LD_VAR 0 3
98328: PUSH
98329: LD_INT 1
98331: PLUS
98332: ST_TO_ADDR
// SetSide ( i , j ) ;
98333: LD_VAR 0 2
98337: PPUSH
98338: LD_VAR 0 3
98342: PPUSH
98343: CALL_OW 235
// end ;
98347: GO 98270
98349: POP
98350: POP
// end ;
98351: LD_VAR 0 1
98355: RET
// export function hHackFog ; begin
98356: LD_INT 0
98358: PPUSH
// FogOff ( true ) ;
98359: LD_INT 1
98361: PPUSH
98362: CALL_OW 344
// end ;
98366: LD_VAR 0 1
98370: RET
// export function hHackApeman ; begin
98371: LD_INT 0
98373: PPUSH
// uc_side := your_side ;
98374: LD_ADDR_OWVAR 20
98378: PUSH
98379: LD_OWVAR 2
98383: ST_TO_ADDR
// uc_nation := 0 ;
98384: LD_ADDR_OWVAR 21
98388: PUSH
98389: LD_INT 0
98391: ST_TO_ADDR
// hc_name :=  ;
98392: LD_ADDR_OWVAR 26
98396: PUSH
98397: LD_STRING 
98399: ST_TO_ADDR
// hc_gallery :=  ;
98400: LD_ADDR_OWVAR 33
98404: PUSH
98405: LD_STRING 
98407: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
98408: LD_ADDR_OWVAR 31
98412: PUSH
98413: LD_INT 0
98415: PUSH
98416: LD_INT 0
98418: PUSH
98419: LD_INT 0
98421: PUSH
98422: LD_INT 0
98424: PUSH
98425: EMPTY
98426: LIST
98427: LIST
98428: LIST
98429: LIST
98430: ST_TO_ADDR
// hc_class := class_apeman ;
98431: LD_ADDR_OWVAR 28
98435: PUSH
98436: LD_INT 12
98438: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateHuman , true ) ;
98439: CALL_OW 44
98443: PPUSH
98444: LD_INT 1
98446: PPUSH
98447: CALL_OW 51
// end ;
98451: LD_VAR 0 1
98455: RET
// export function hHackBoom ; begin
98456: LD_INT 0
98458: PPUSH
// uc_side := your_side ;
98459: LD_ADDR_OWVAR 20
98463: PUSH
98464: LD_OWVAR 2
98468: ST_TO_ADDR
// uc_nation := 1 ;
98469: LD_ADDR_OWVAR 21
98473: PUSH
98474: LD_INT 1
98476: ST_TO_ADDR
// vc_chassis := us_morphling ;
98477: LD_ADDR_OWVAR 37
98481: PUSH
98482: LD_INT 5
98484: ST_TO_ADDR
// vc_engine := engine_siberite ;
98485: LD_ADDR_OWVAR 39
98489: PUSH
98490: LD_INT 3
98492: ST_TO_ADDR
// vc_control := control_computer ;
98493: LD_ADDR_OWVAR 38
98497: PUSH
98498: LD_INT 3
98500: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
98501: LD_ADDR_OWVAR 40
98505: PUSH
98506: LD_INT 8
98508: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
98509: CALL_OW 45
98513: PPUSH
98514: LD_INT 1
98516: PPUSH
98517: CALL_OW 51
// end ; end_of_file
98521: LD_VAR 0 1
98525: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
98526: LD_INT 0
98528: PPUSH
98529: PPUSH
98530: PPUSH
98531: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
98532: LD_VAR 0 1
98536: PPUSH
98537: CALL_OW 264
98541: PUSH
98542: LD_EXP 33
98546: EQUAL
98547: IFFALSE 98619
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
98549: LD_INT 68
98551: PPUSH
98552: LD_VAR 0 1
98556: PPUSH
98557: CALL_OW 255
98561: PPUSH
98562: CALL_OW 321
98566: PUSH
98567: LD_INT 2
98569: EQUAL
98570: IFFALSE 98582
// eff := 70 else
98572: LD_ADDR_VAR 0 4
98576: PUSH
98577: LD_INT 70
98579: ST_TO_ADDR
98580: GO 98590
// eff := 30 ;
98582: LD_ADDR_VAR 0 4
98586: PUSH
98587: LD_INT 30
98589: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
98590: LD_VAR 0 1
98594: PPUSH
98595: CALL_OW 250
98599: PPUSH
98600: LD_VAR 0 1
98604: PPUSH
98605: CALL_OW 251
98609: PPUSH
98610: LD_VAR 0 4
98614: PPUSH
98615: CALL_OW 495
// end ; end ;
98619: LD_VAR 0 2
98623: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
98624: LD_INT 0
98626: PPUSH
// end ;
98627: LD_VAR 0 4
98631: RET
// export function SOS_Command ( cmd ) ; begin
98632: LD_INT 0
98634: PPUSH
// end ;
98635: LD_VAR 0 2
98639: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y ) do begin if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
98640: LD_VAR 0 1
98644: PUSH
98645: LD_INT 254
98647: EQUAL
98648: PUSH
98649: LD_VAR 0 2
98653: PPUSH
98654: CALL_OW 264
98658: PUSH
98659: LD_EXP 31
98663: EQUAL
98664: AND
98665: PUSH
98666: LD_VAR 0 3
98670: PPUSH
98671: CALL_OW 263
98675: PUSH
98676: LD_INT 3
98678: EQUAL
98679: AND
98680: IFFALSE 98696
// HackDestroyVehicle ( unit , selectedUnit ) ;
98682: LD_VAR 0 2
98686: PPUSH
98687: LD_VAR 0 3
98691: PPUSH
98692: CALL 100203 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
98696: LD_VAR 0 1
98700: PUSH
98701: LD_INT 255
98703: EQUAL
98704: PUSH
98705: LD_VAR 0 2
98709: PPUSH
98710: CALL_OW 264
98714: PUSH
98715: LD_INT 14
98717: PUSH
98718: LD_INT 53
98720: PUSH
98721: EMPTY
98722: LIST
98723: LIST
98724: IN
98725: AND
98726: PUSH
98727: LD_VAR 0 4
98731: PPUSH
98732: LD_VAR 0 5
98736: PPUSH
98737: CALL_OW 488
98741: AND
98742: IFFALSE 98766
// CutTreeXYR ( unit , x , y , 12 ) ;
98744: LD_VAR 0 2
98748: PPUSH
98749: LD_VAR 0 4
98753: PPUSH
98754: LD_VAR 0 5
98758: PPUSH
98759: LD_INT 12
98761: PPUSH
98762: CALL 98769 0 4
// end ;
98766: PPOPN 5
98768: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
98769: LD_INT 0
98771: PPUSH
98772: PPUSH
98773: PPUSH
98774: PPUSH
98775: PPUSH
98776: PPUSH
98777: PPUSH
98778: PPUSH
98779: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
98780: LD_VAR 0 1
98784: NOT
98785: PUSH
98786: LD_VAR 0 2
98790: PPUSH
98791: LD_VAR 0 3
98795: PPUSH
98796: CALL_OW 488
98800: NOT
98801: OR
98802: PUSH
98803: LD_VAR 0 4
98807: NOT
98808: OR
98809: IFFALSE 98813
// exit ;
98811: GO 99153
// list := [ ] ;
98813: LD_ADDR_VAR 0 13
98817: PUSH
98818: EMPTY
98819: ST_TO_ADDR
// if x - r < 0 then
98820: LD_VAR 0 2
98824: PUSH
98825: LD_VAR 0 4
98829: MINUS
98830: PUSH
98831: LD_INT 0
98833: LESS
98834: IFFALSE 98846
// min_x := 0 else
98836: LD_ADDR_VAR 0 7
98840: PUSH
98841: LD_INT 0
98843: ST_TO_ADDR
98844: GO 98862
// min_x := x - r ;
98846: LD_ADDR_VAR 0 7
98850: PUSH
98851: LD_VAR 0 2
98855: PUSH
98856: LD_VAR 0 4
98860: MINUS
98861: ST_TO_ADDR
// if y - r < 0 then
98862: LD_VAR 0 3
98866: PUSH
98867: LD_VAR 0 4
98871: MINUS
98872: PUSH
98873: LD_INT 0
98875: LESS
98876: IFFALSE 98888
// min_y := 0 else
98878: LD_ADDR_VAR 0 8
98882: PUSH
98883: LD_INT 0
98885: ST_TO_ADDR
98886: GO 98904
// min_y := y - r ;
98888: LD_ADDR_VAR 0 8
98892: PUSH
98893: LD_VAR 0 3
98897: PUSH
98898: LD_VAR 0 4
98902: MINUS
98903: ST_TO_ADDR
// max_x := x + r ;
98904: LD_ADDR_VAR 0 9
98908: PUSH
98909: LD_VAR 0 2
98913: PUSH
98914: LD_VAR 0 4
98918: PLUS
98919: ST_TO_ADDR
// max_y := y + r ;
98920: LD_ADDR_VAR 0 10
98924: PUSH
98925: LD_VAR 0 3
98929: PUSH
98930: LD_VAR 0 4
98934: PLUS
98935: ST_TO_ADDR
// for _x = min_x to max_x do
98936: LD_ADDR_VAR 0 11
98940: PUSH
98941: DOUBLE
98942: LD_VAR 0 7
98946: DEC
98947: ST_TO_ADDR
98948: LD_VAR 0 9
98952: PUSH
98953: FOR_TO
98954: IFFALSE 99071
// for _y = min_y to max_y do
98956: LD_ADDR_VAR 0 12
98960: PUSH
98961: DOUBLE
98962: LD_VAR 0 8
98966: DEC
98967: ST_TO_ADDR
98968: LD_VAR 0 10
98972: PUSH
98973: FOR_TO
98974: IFFALSE 99067
// begin if not ValidHex ( _x , _y ) then
98976: LD_VAR 0 11
98980: PPUSH
98981: LD_VAR 0 12
98985: PPUSH
98986: CALL_OW 488
98990: NOT
98991: IFFALSE 98995
// continue ;
98993: GO 98973
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
98995: LD_VAR 0 11
98999: PPUSH
99000: LD_VAR 0 12
99004: PPUSH
99005: CALL_OW 351
99009: PUSH
99010: LD_VAR 0 11
99014: PPUSH
99015: LD_VAR 0 12
99019: PPUSH
99020: CALL_OW 554
99024: AND
99025: IFFALSE 99065
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
99027: LD_ADDR_VAR 0 13
99031: PUSH
99032: LD_VAR 0 13
99036: PPUSH
99037: LD_VAR 0 13
99041: PUSH
99042: LD_INT 1
99044: PLUS
99045: PPUSH
99046: LD_VAR 0 11
99050: PUSH
99051: LD_VAR 0 12
99055: PUSH
99056: EMPTY
99057: LIST
99058: LIST
99059: PPUSH
99060: CALL_OW 2
99064: ST_TO_ADDR
// end ;
99065: GO 98973
99067: POP
99068: POP
99069: GO 98953
99071: POP
99072: POP
// if not list then
99073: LD_VAR 0 13
99077: NOT
99078: IFFALSE 99082
// exit ;
99080: GO 99153
// for i in list do
99082: LD_ADDR_VAR 0 6
99086: PUSH
99087: LD_VAR 0 13
99091: PUSH
99092: FOR_IN
99093: IFFALSE 99151
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
99095: LD_VAR 0 1
99099: PPUSH
99100: LD_STRING M
99102: PUSH
99103: LD_VAR 0 6
99107: PUSH
99108: LD_INT 1
99110: ARRAY
99111: PUSH
99112: LD_VAR 0 6
99116: PUSH
99117: LD_INT 2
99119: ARRAY
99120: PUSH
99121: LD_INT 0
99123: PUSH
99124: LD_INT 0
99126: PUSH
99127: LD_INT 0
99129: PUSH
99130: LD_INT 0
99132: PUSH
99133: EMPTY
99134: LIST
99135: LIST
99136: LIST
99137: LIST
99138: LIST
99139: LIST
99140: LIST
99141: PUSH
99142: EMPTY
99143: LIST
99144: PPUSH
99145: CALL_OW 447
99149: GO 99092
99151: POP
99152: POP
// end ;
99153: LD_VAR 0 5
99157: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
99158: LD_EXP 144
99162: NOT
99163: IFFALSE 99213
99165: GO 99167
99167: DISABLE
// begin initHack := true ;
99168: LD_ADDR_EXP 144
99172: PUSH
99173: LD_INT 1
99175: ST_TO_ADDR
// hackTanks := [ ] ;
99176: LD_ADDR_EXP 145
99180: PUSH
99181: EMPTY
99182: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
99183: LD_ADDR_EXP 146
99187: PUSH
99188: EMPTY
99189: ST_TO_ADDR
// hackLimit := 3 ;
99190: LD_ADDR_EXP 147
99194: PUSH
99195: LD_INT 3
99197: ST_TO_ADDR
// hackDist := 12 ;
99198: LD_ADDR_EXP 148
99202: PUSH
99203: LD_INT 12
99205: ST_TO_ADDR
// hackCounter := [ ] ;
99206: LD_ADDR_EXP 149
99210: PUSH
99211: EMPTY
99212: ST_TO_ADDR
// end ;
99213: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
99214: LD_EXP 144
99218: PUSH
99219: LD_INT 34
99221: PUSH
99222: LD_EXP 31
99226: PUSH
99227: EMPTY
99228: LIST
99229: LIST
99230: PPUSH
99231: CALL_OW 69
99235: AND
99236: IFFALSE 99491
99238: GO 99240
99240: DISABLE
99241: LD_INT 0
99243: PPUSH
99244: PPUSH
// begin enable ;
99245: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
99246: LD_ADDR_VAR 0 1
99250: PUSH
99251: LD_INT 34
99253: PUSH
99254: LD_EXP 31
99258: PUSH
99259: EMPTY
99260: LIST
99261: LIST
99262: PPUSH
99263: CALL_OW 69
99267: PUSH
99268: FOR_IN
99269: IFFALSE 99489
// begin if not i in hackTanks then
99271: LD_VAR 0 1
99275: PUSH
99276: LD_EXP 145
99280: IN
99281: NOT
99282: IFFALSE 99365
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
99284: LD_ADDR_EXP 145
99288: PUSH
99289: LD_EXP 145
99293: PPUSH
99294: LD_EXP 145
99298: PUSH
99299: LD_INT 1
99301: PLUS
99302: PPUSH
99303: LD_VAR 0 1
99307: PPUSH
99308: CALL_OW 1
99312: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
99313: LD_ADDR_EXP 146
99317: PUSH
99318: LD_EXP 146
99322: PPUSH
99323: LD_EXP 146
99327: PUSH
99328: LD_INT 1
99330: PLUS
99331: PPUSH
99332: EMPTY
99333: PPUSH
99334: CALL_OW 1
99338: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
99339: LD_ADDR_EXP 149
99343: PUSH
99344: LD_EXP 149
99348: PPUSH
99349: LD_EXP 149
99353: PUSH
99354: LD_INT 1
99356: PLUS
99357: PPUSH
99358: EMPTY
99359: PPUSH
99360: CALL_OW 1
99364: ST_TO_ADDR
// end ; if not IsOk ( i ) then
99365: LD_VAR 0 1
99369: PPUSH
99370: CALL_OW 302
99374: NOT
99375: IFFALSE 99388
// begin HackUnlinkAll ( i ) ;
99377: LD_VAR 0 1
99381: PPUSH
99382: CALL 99494 0 1
// continue ;
99386: GO 99268
// end ; HackCheckCapturedStatus ( i ) ;
99388: LD_VAR 0 1
99392: PPUSH
99393: CALL 99937 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
99397: LD_ADDR_VAR 0 2
99401: PUSH
99402: LD_INT 81
99404: PUSH
99405: LD_VAR 0 1
99409: PPUSH
99410: CALL_OW 255
99414: PUSH
99415: EMPTY
99416: LIST
99417: LIST
99418: PUSH
99419: LD_INT 33
99421: PUSH
99422: LD_INT 3
99424: PUSH
99425: EMPTY
99426: LIST
99427: LIST
99428: PUSH
99429: LD_INT 91
99431: PUSH
99432: LD_VAR 0 1
99436: PUSH
99437: LD_EXP 148
99441: PUSH
99442: EMPTY
99443: LIST
99444: LIST
99445: LIST
99446: PUSH
99447: LD_INT 50
99449: PUSH
99450: EMPTY
99451: LIST
99452: PUSH
99453: EMPTY
99454: LIST
99455: LIST
99456: LIST
99457: LIST
99458: PPUSH
99459: CALL_OW 69
99463: ST_TO_ADDR
// if not tmp then
99464: LD_VAR 0 2
99468: NOT
99469: IFFALSE 99473
// continue ;
99471: GO 99268
// HackLink ( i , tmp ) ;
99473: LD_VAR 0 1
99477: PPUSH
99478: LD_VAR 0 2
99482: PPUSH
99483: CALL 99630 0 2
// end ;
99487: GO 99268
99489: POP
99490: POP
// end ;
99491: PPOPN 2
99493: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
99494: LD_INT 0
99496: PPUSH
99497: PPUSH
99498: PPUSH
// if not hack in hackTanks then
99499: LD_VAR 0 1
99503: PUSH
99504: LD_EXP 145
99508: IN
99509: NOT
99510: IFFALSE 99514
// exit ;
99512: GO 99625
// index := GetElementIndex ( hackTanks , hack ) ;
99514: LD_ADDR_VAR 0 4
99518: PUSH
99519: LD_EXP 145
99523: PPUSH
99524: LD_VAR 0 1
99528: PPUSH
99529: CALL 24079 0 2
99533: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
99534: LD_EXP 146
99538: PUSH
99539: LD_VAR 0 4
99543: ARRAY
99544: IFFALSE 99625
// begin for i in hackTanksCaptured [ index ] do
99546: LD_ADDR_VAR 0 3
99550: PUSH
99551: LD_EXP 146
99555: PUSH
99556: LD_VAR 0 4
99560: ARRAY
99561: PUSH
99562: FOR_IN
99563: IFFALSE 99589
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
99565: LD_VAR 0 3
99569: PUSH
99570: LD_INT 1
99572: ARRAY
99573: PPUSH
99574: LD_VAR 0 3
99578: PUSH
99579: LD_INT 2
99581: ARRAY
99582: PPUSH
99583: CALL_OW 235
99587: GO 99562
99589: POP
99590: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
99591: LD_ADDR_EXP 146
99595: PUSH
99596: LD_EXP 146
99600: PPUSH
99601: LD_VAR 0 4
99605: PPUSH
99606: EMPTY
99607: PPUSH
99608: CALL_OW 1
99612: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
99613: LD_VAR 0 1
99617: PPUSH
99618: LD_INT 0
99620: PPUSH
99621: CALL_OW 505
// end ; end ;
99625: LD_VAR 0 2
99629: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
99630: LD_INT 0
99632: PPUSH
99633: PPUSH
99634: PPUSH
// if not hack in hackTanks or not vehicles then
99635: LD_VAR 0 1
99639: PUSH
99640: LD_EXP 145
99644: IN
99645: NOT
99646: PUSH
99647: LD_VAR 0 2
99651: NOT
99652: OR
99653: IFFALSE 99657
// exit ;
99655: GO 99932
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
99657: LD_ADDR_VAR 0 2
99661: PUSH
99662: LD_VAR 0 1
99666: PPUSH
99667: LD_VAR 0 2
99671: PPUSH
99672: LD_INT 1
99674: PPUSH
99675: LD_INT 1
99677: PPUSH
99678: CALL 24729 0 4
99682: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
99683: LD_ADDR_VAR 0 5
99687: PUSH
99688: LD_EXP 145
99692: PPUSH
99693: LD_VAR 0 1
99697: PPUSH
99698: CALL 24079 0 2
99702: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
99703: LD_EXP 146
99707: PUSH
99708: LD_VAR 0 5
99712: ARRAY
99713: PUSH
99714: LD_EXP 147
99718: LESS
99719: IFFALSE 99908
// begin for i := 1 to vehicles do
99721: LD_ADDR_VAR 0 4
99725: PUSH
99726: DOUBLE
99727: LD_INT 1
99729: DEC
99730: ST_TO_ADDR
99731: LD_VAR 0 2
99735: PUSH
99736: FOR_TO
99737: IFFALSE 99906
// begin if hackTanksCaptured [ index ] = hackLimit then
99739: LD_EXP 146
99743: PUSH
99744: LD_VAR 0 5
99748: ARRAY
99749: PUSH
99750: LD_EXP 147
99754: EQUAL
99755: IFFALSE 99759
// break ;
99757: GO 99906
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
99759: LD_ADDR_EXP 149
99763: PUSH
99764: LD_EXP 149
99768: PPUSH
99769: LD_VAR 0 5
99773: PPUSH
99774: LD_EXP 149
99778: PUSH
99779: LD_VAR 0 5
99783: ARRAY
99784: PUSH
99785: LD_INT 1
99787: PLUS
99788: PPUSH
99789: CALL_OW 1
99793: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
99794: LD_ADDR_EXP 146
99798: PUSH
99799: LD_EXP 146
99803: PPUSH
99804: LD_VAR 0 5
99808: PUSH
99809: LD_EXP 146
99813: PUSH
99814: LD_VAR 0 5
99818: ARRAY
99819: PUSH
99820: LD_INT 1
99822: PLUS
99823: PUSH
99824: EMPTY
99825: LIST
99826: LIST
99827: PPUSH
99828: LD_VAR 0 2
99832: PUSH
99833: LD_VAR 0 4
99837: ARRAY
99838: PUSH
99839: LD_VAR 0 2
99843: PUSH
99844: LD_VAR 0 4
99848: ARRAY
99849: PPUSH
99850: CALL_OW 255
99854: PUSH
99855: EMPTY
99856: LIST
99857: LIST
99858: PPUSH
99859: CALL 24294 0 3
99863: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
99864: LD_VAR 0 2
99868: PUSH
99869: LD_VAR 0 4
99873: ARRAY
99874: PPUSH
99875: LD_VAR 0 1
99879: PPUSH
99880: CALL_OW 255
99884: PPUSH
99885: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
99889: LD_VAR 0 2
99893: PUSH
99894: LD_VAR 0 4
99898: ARRAY
99899: PPUSH
99900: CALL_OW 141
// end ;
99904: GO 99736
99906: POP
99907: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
99908: LD_VAR 0 1
99912: PPUSH
99913: LD_EXP 146
99917: PUSH
99918: LD_VAR 0 5
99922: ARRAY
99923: PUSH
99924: LD_INT 0
99926: PLUS
99927: PPUSH
99928: CALL_OW 505
// end ;
99932: LD_VAR 0 3
99936: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
99937: LD_INT 0
99939: PPUSH
99940: PPUSH
99941: PPUSH
99942: PPUSH
// if not hack in hackTanks then
99943: LD_VAR 0 1
99947: PUSH
99948: LD_EXP 145
99952: IN
99953: NOT
99954: IFFALSE 99958
// exit ;
99956: GO 100198
// index := GetElementIndex ( hackTanks , hack ) ;
99958: LD_ADDR_VAR 0 4
99962: PUSH
99963: LD_EXP 145
99967: PPUSH
99968: LD_VAR 0 1
99972: PPUSH
99973: CALL 24079 0 2
99977: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
99978: LD_ADDR_VAR 0 3
99982: PUSH
99983: DOUBLE
99984: LD_EXP 146
99988: PUSH
99989: LD_VAR 0 4
99993: ARRAY
99994: INC
99995: ST_TO_ADDR
99996: LD_INT 1
99998: PUSH
99999: FOR_DOWNTO
100000: IFFALSE 100172
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
100002: LD_ADDR_VAR 0 5
100006: PUSH
100007: LD_EXP 146
100011: PUSH
100012: LD_VAR 0 4
100016: ARRAY
100017: PUSH
100018: LD_VAR 0 3
100022: ARRAY
100023: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
100024: LD_VAR 0 5
100028: PUSH
100029: LD_INT 1
100031: ARRAY
100032: PPUSH
100033: CALL_OW 302
100037: NOT
100038: PUSH
100039: LD_VAR 0 5
100043: PUSH
100044: LD_INT 1
100046: ARRAY
100047: PPUSH
100048: CALL_OW 255
100052: PUSH
100053: LD_VAR 0 1
100057: PPUSH
100058: CALL_OW 255
100062: NONEQUAL
100063: OR
100064: IFFALSE 100170
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
100066: LD_VAR 0 5
100070: PUSH
100071: LD_INT 1
100073: ARRAY
100074: PPUSH
100075: CALL_OW 305
100079: PUSH
100080: LD_VAR 0 5
100084: PUSH
100085: LD_INT 1
100087: ARRAY
100088: PPUSH
100089: CALL_OW 255
100093: PUSH
100094: LD_VAR 0 1
100098: PPUSH
100099: CALL_OW 255
100103: EQUAL
100104: AND
100105: IFFALSE 100129
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
100107: LD_VAR 0 5
100111: PUSH
100112: LD_INT 1
100114: ARRAY
100115: PPUSH
100116: LD_VAR 0 5
100120: PUSH
100121: LD_INT 2
100123: ARRAY
100124: PPUSH
100125: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
100129: LD_ADDR_EXP 146
100133: PUSH
100134: LD_EXP 146
100138: PPUSH
100139: LD_VAR 0 4
100143: PPUSH
100144: LD_EXP 146
100148: PUSH
100149: LD_VAR 0 4
100153: ARRAY
100154: PPUSH
100155: LD_VAR 0 3
100159: PPUSH
100160: CALL_OW 3
100164: PPUSH
100165: CALL_OW 1
100169: ST_TO_ADDR
// end ; end ;
100170: GO 99999
100172: POP
100173: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
100174: LD_VAR 0 1
100178: PPUSH
100179: LD_EXP 146
100183: PUSH
100184: LD_VAR 0 4
100188: ARRAY
100189: PUSH
100190: LD_INT 0
100192: PLUS
100193: PPUSH
100194: CALL_OW 505
// end ;
100198: LD_VAR 0 2
100202: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
100203: LD_INT 0
100205: PPUSH
100206: PPUSH
100207: PPUSH
100208: PPUSH
// if not hack in hackTanks then
100209: LD_VAR 0 1
100213: PUSH
100214: LD_EXP 145
100218: IN
100219: NOT
100220: IFFALSE 100224
// exit ;
100222: GO 100309
// index := GetElementIndex ( hackTanks , hack ) ;
100224: LD_ADDR_VAR 0 5
100228: PUSH
100229: LD_EXP 145
100233: PPUSH
100234: LD_VAR 0 1
100238: PPUSH
100239: CALL 24079 0 2
100243: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
100244: LD_ADDR_VAR 0 4
100248: PUSH
100249: DOUBLE
100250: LD_INT 1
100252: DEC
100253: ST_TO_ADDR
100254: LD_EXP 146
100258: PUSH
100259: LD_VAR 0 5
100263: ARRAY
100264: PUSH
100265: FOR_TO
100266: IFFALSE 100307
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
100268: LD_EXP 146
100272: PUSH
100273: LD_VAR 0 5
100277: ARRAY
100278: PUSH
100279: LD_VAR 0 4
100283: ARRAY
100284: PUSH
100285: LD_INT 1
100287: ARRAY
100288: PUSH
100289: LD_VAR 0 2
100293: EQUAL
100294: IFFALSE 100305
// KillUnit ( vehicle ) ;
100296: LD_VAR 0 2
100300: PPUSH
100301: CALL_OW 66
100305: GO 100265
100307: POP
100308: POP
// end ; end_of_file
100309: LD_VAR 0 3
100313: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking , to_heal , healers , to_repair , repairs , empty_vehs , side ; begin
100314: LD_INT 0
100316: PPUSH
100317: PPUSH
100318: PPUSH
100319: PPUSH
100320: PPUSH
100321: PPUSH
100322: PPUSH
100323: PPUSH
100324: PPUSH
100325: PPUSH
100326: PPUSH
100327: PPUSH
100328: PPUSH
100329: PPUSH
100330: PPUSH
100331: PPUSH
100332: PPUSH
100333: PPUSH
100334: PPUSH
100335: PPUSH
100336: PPUSH
100337: PPUSH
100338: PPUSH
100339: PPUSH
100340: PPUSH
100341: PPUSH
100342: PPUSH
100343: PPUSH
100344: PPUSH
100345: PPUSH
100346: PPUSH
100347: PPUSH
100348: PPUSH
100349: PPUSH
// if not list then
100350: LD_VAR 0 1
100354: NOT
100355: IFFALSE 100359
// exit ;
100357: GO 105018
// base := list [ 1 ] ;
100359: LD_ADDR_VAR 0 3
100363: PUSH
100364: LD_VAR 0 1
100368: PUSH
100369: LD_INT 1
100371: ARRAY
100372: ST_TO_ADDR
// group := list [ 2 ] ;
100373: LD_ADDR_VAR 0 4
100377: PUSH
100378: LD_VAR 0 1
100382: PUSH
100383: LD_INT 2
100385: ARRAY
100386: ST_TO_ADDR
// path := list [ 3 ] ;
100387: LD_ADDR_VAR 0 5
100391: PUSH
100392: LD_VAR 0 1
100396: PUSH
100397: LD_INT 3
100399: ARRAY
100400: ST_TO_ADDR
// flags := list [ 4 ] ;
100401: LD_ADDR_VAR 0 6
100405: PUSH
100406: LD_VAR 0 1
100410: PUSH
100411: LD_INT 4
100413: ARRAY
100414: ST_TO_ADDR
// mined := [ ] ;
100415: LD_ADDR_VAR 0 27
100419: PUSH
100420: EMPTY
100421: ST_TO_ADDR
// bombed := [ ] ;
100422: LD_ADDR_VAR 0 28
100426: PUSH
100427: EMPTY
100428: ST_TO_ADDR
// healers := [ ] ;
100429: LD_ADDR_VAR 0 31
100433: PUSH
100434: EMPTY
100435: ST_TO_ADDR
// to_heal := [ ] ;
100436: LD_ADDR_VAR 0 30
100440: PUSH
100441: EMPTY
100442: ST_TO_ADDR
// repairs := [ ] ;
100443: LD_ADDR_VAR 0 33
100447: PUSH
100448: EMPTY
100449: ST_TO_ADDR
// to_repair := [ ] ;
100450: LD_ADDR_VAR 0 32
100454: PUSH
100455: EMPTY
100456: ST_TO_ADDR
// if not group or not path then
100457: LD_VAR 0 4
100461: NOT
100462: PUSH
100463: LD_VAR 0 5
100467: NOT
100468: OR
100469: IFFALSE 100473
// exit ;
100471: GO 105018
// side := GetSide ( group [ 1 ] ) ;
100473: LD_ADDR_VAR 0 35
100477: PUSH
100478: LD_VAR 0 4
100482: PUSH
100483: LD_INT 1
100485: ARRAY
100486: PPUSH
100487: CALL_OW 255
100491: ST_TO_ADDR
// if flags then
100492: LD_VAR 0 6
100496: IFFALSE 100640
// begin f_ignore_area := flags [ 1 ] ;
100498: LD_ADDR_VAR 0 17
100502: PUSH
100503: LD_VAR 0 6
100507: PUSH
100508: LD_INT 1
100510: ARRAY
100511: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
100512: LD_ADDR_VAR 0 18
100516: PUSH
100517: LD_VAR 0 6
100521: PUSH
100522: LD_INT 2
100524: ARRAY
100525: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
100526: LD_ADDR_VAR 0 19
100530: PUSH
100531: LD_VAR 0 6
100535: PUSH
100536: LD_INT 3
100538: ARRAY
100539: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
100540: LD_ADDR_VAR 0 20
100544: PUSH
100545: LD_VAR 0 6
100549: PUSH
100550: LD_INT 4
100552: ARRAY
100553: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
100554: LD_ADDR_VAR 0 21
100558: PUSH
100559: LD_VAR 0 6
100563: PUSH
100564: LD_INT 5
100566: ARRAY
100567: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
100568: LD_ADDR_VAR 0 22
100572: PUSH
100573: LD_VAR 0 6
100577: PUSH
100578: LD_INT 6
100580: ARRAY
100581: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
100582: LD_ADDR_VAR 0 23
100586: PUSH
100587: LD_VAR 0 6
100591: PUSH
100592: LD_INT 7
100594: ARRAY
100595: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
100596: LD_ADDR_VAR 0 24
100600: PUSH
100601: LD_VAR 0 6
100605: PUSH
100606: LD_INT 8
100608: ARRAY
100609: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
100610: LD_ADDR_VAR 0 25
100614: PUSH
100615: LD_VAR 0 6
100619: PUSH
100620: LD_INT 9
100622: ARRAY
100623: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
100624: LD_ADDR_VAR 0 26
100628: PUSH
100629: LD_VAR 0 6
100633: PUSH
100634: LD_INT 10
100636: ARRAY
100637: ST_TO_ADDR
// end else
100638: GO 100720
// begin f_ignore_area := false ;
100640: LD_ADDR_VAR 0 17
100644: PUSH
100645: LD_INT 0
100647: ST_TO_ADDR
// f_capture := false ;
100648: LD_ADDR_VAR 0 18
100652: PUSH
100653: LD_INT 0
100655: ST_TO_ADDR
// f_ignore_civ := false ;
100656: LD_ADDR_VAR 0 19
100660: PUSH
100661: LD_INT 0
100663: ST_TO_ADDR
// f_murder := false ;
100664: LD_ADDR_VAR 0 20
100668: PUSH
100669: LD_INT 0
100671: ST_TO_ADDR
// f_mines := false ;
100672: LD_ADDR_VAR 0 21
100676: PUSH
100677: LD_INT 0
100679: ST_TO_ADDR
// f_repair := false ;
100680: LD_ADDR_VAR 0 22
100684: PUSH
100685: LD_INT 0
100687: ST_TO_ADDR
// f_heal := false ;
100688: LD_ADDR_VAR 0 23
100692: PUSH
100693: LD_INT 0
100695: ST_TO_ADDR
// f_spacetime := false ;
100696: LD_ADDR_VAR 0 24
100700: PUSH
100701: LD_INT 0
100703: ST_TO_ADDR
// f_attack_depot := false ;
100704: LD_ADDR_VAR 0 25
100708: PUSH
100709: LD_INT 0
100711: ST_TO_ADDR
// f_crawl := false ;
100712: LD_ADDR_VAR 0 26
100716: PUSH
100717: LD_INT 0
100719: ST_TO_ADDR
// end ; if f_heal then
100720: LD_VAR 0 23
100724: IFFALSE 100751
// healers := UnitFilter ( group , [ f_class , 4 ] ) ;
100726: LD_ADDR_VAR 0 31
100730: PUSH
100731: LD_VAR 0 4
100735: PPUSH
100736: LD_INT 25
100738: PUSH
100739: LD_INT 4
100741: PUSH
100742: EMPTY
100743: LIST
100744: LIST
100745: PPUSH
100746: CALL_OW 72
100750: ST_TO_ADDR
// if f_repair then
100751: LD_VAR 0 22
100755: IFFALSE 100782
// repairs := UnitFilter ( group , [ f_class , 3 ] ) ;
100757: LD_ADDR_VAR 0 33
100761: PUSH
100762: LD_VAR 0 4
100766: PPUSH
100767: LD_INT 25
100769: PUSH
100770: LD_INT 3
100772: PUSH
100773: EMPTY
100774: LIST
100775: LIST
100776: PPUSH
100777: CALL_OW 72
100781: ST_TO_ADDR
// units_path := [ ] ;
100782: LD_ADDR_VAR 0 16
100786: PUSH
100787: EMPTY
100788: ST_TO_ADDR
// for i = 1 to group do
100789: LD_ADDR_VAR 0 7
100793: PUSH
100794: DOUBLE
100795: LD_INT 1
100797: DEC
100798: ST_TO_ADDR
100799: LD_VAR 0 4
100803: PUSH
100804: FOR_TO
100805: IFFALSE 100834
// units_path := Replace ( units_path , i , path ) ;
100807: LD_ADDR_VAR 0 16
100811: PUSH
100812: LD_VAR 0 16
100816: PPUSH
100817: LD_VAR 0 7
100821: PPUSH
100822: LD_VAR 0 5
100826: PPUSH
100827: CALL_OW 1
100831: ST_TO_ADDR
100832: GO 100804
100834: POP
100835: POP
// repeat for i = group downto 1 do
100836: LD_ADDR_VAR 0 7
100840: PUSH
100841: DOUBLE
100842: LD_VAR 0 4
100846: INC
100847: ST_TO_ADDR
100848: LD_INT 1
100850: PUSH
100851: FOR_DOWNTO
100852: IFFALSE 104974
// begin wait ( 5 ) ;
100854: LD_INT 5
100856: PPUSH
100857: CALL_OW 67
// tmp := [ ] ;
100861: LD_ADDR_VAR 0 14
100865: PUSH
100866: EMPTY
100867: ST_TO_ADDR
// attacking := false ;
100868: LD_ADDR_VAR 0 29
100872: PUSH
100873: LD_INT 0
100875: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
100876: LD_VAR 0 4
100880: PUSH
100881: LD_VAR 0 7
100885: ARRAY
100886: PPUSH
100887: CALL_OW 301
100891: PUSH
100892: LD_VAR 0 4
100896: PUSH
100897: LD_VAR 0 7
100901: ARRAY
100902: NOT
100903: OR
100904: IFFALSE 101013
// begin if GetType ( group [ i ] ) = unit_human then
100906: LD_VAR 0 4
100910: PUSH
100911: LD_VAR 0 7
100915: ARRAY
100916: PPUSH
100917: CALL_OW 247
100921: PUSH
100922: LD_INT 1
100924: EQUAL
100925: IFFALSE 100971
// begin to_heal := to_heal diff group [ i ] ;
100927: LD_ADDR_VAR 0 30
100931: PUSH
100932: LD_VAR 0 30
100936: PUSH
100937: LD_VAR 0 4
100941: PUSH
100942: LD_VAR 0 7
100946: ARRAY
100947: DIFF
100948: ST_TO_ADDR
// healers := healers diff group [ i ] ;
100949: LD_ADDR_VAR 0 31
100953: PUSH
100954: LD_VAR 0 31
100958: PUSH
100959: LD_VAR 0 4
100963: PUSH
100964: LD_VAR 0 7
100968: ARRAY
100969: DIFF
100970: ST_TO_ADDR
// end ; group := Delete ( group , i ) ;
100971: LD_ADDR_VAR 0 4
100975: PUSH
100976: LD_VAR 0 4
100980: PPUSH
100981: LD_VAR 0 7
100985: PPUSH
100986: CALL_OW 3
100990: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
100991: LD_ADDR_VAR 0 16
100995: PUSH
100996: LD_VAR 0 16
101000: PPUSH
101001: LD_VAR 0 7
101005: PPUSH
101006: CALL_OW 3
101010: ST_TO_ADDR
// continue ;
101011: GO 100851
// end ; if f_repair then
101013: LD_VAR 0 22
101017: IFFALSE 101506
// begin if GetType ( group [ i ] ) = unit_vehicle then
101019: LD_VAR 0 4
101023: PUSH
101024: LD_VAR 0 7
101028: ARRAY
101029: PPUSH
101030: CALL_OW 247
101034: PUSH
101035: LD_INT 2
101037: EQUAL
101038: IFFALSE 101228
// begin if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_repair then
101040: LD_VAR 0 4
101044: PUSH
101045: LD_VAR 0 7
101049: ARRAY
101050: PPUSH
101051: CALL_OW 256
101055: PUSH
101056: LD_INT 700
101058: LESS
101059: PUSH
101060: LD_VAR 0 4
101064: PUSH
101065: LD_VAR 0 7
101069: ARRAY
101070: PUSH
101071: LD_VAR 0 32
101075: IN
101076: NOT
101077: AND
101078: IFFALSE 101102
// to_repair := to_repair union group [ i ] ;
101080: LD_ADDR_VAR 0 32
101084: PUSH
101085: LD_VAR 0 32
101089: PUSH
101090: LD_VAR 0 4
101094: PUSH
101095: LD_VAR 0 7
101099: ARRAY
101100: UNION
101101: ST_TO_ADDR
// if GetLives ( group [ i ] ) = 1000 and group [ i ] in to_repair then
101102: LD_VAR 0 4
101106: PUSH
101107: LD_VAR 0 7
101111: ARRAY
101112: PPUSH
101113: CALL_OW 256
101117: PUSH
101118: LD_INT 1000
101120: EQUAL
101121: PUSH
101122: LD_VAR 0 4
101126: PUSH
101127: LD_VAR 0 7
101131: ARRAY
101132: PUSH
101133: LD_VAR 0 32
101137: IN
101138: AND
101139: IFFALSE 101163
// to_repair := to_repair diff group [ i ] ;
101141: LD_ADDR_VAR 0 32
101145: PUSH
101146: LD_VAR 0 32
101150: PUSH
101151: LD_VAR 0 4
101155: PUSH
101156: LD_VAR 0 7
101160: ARRAY
101161: DIFF
101162: ST_TO_ADDR
// if group [ i ] in to_repair then
101163: LD_VAR 0 4
101167: PUSH
101168: LD_VAR 0 7
101172: ARRAY
101173: PUSH
101174: LD_VAR 0 32
101178: IN
101179: IFFALSE 101226
// begin if not IsInArea ( group [ i ] , f_repair ) then
101181: LD_VAR 0 4
101185: PUSH
101186: LD_VAR 0 7
101190: ARRAY
101191: PPUSH
101192: LD_VAR 0 22
101196: PPUSH
101197: CALL_OW 308
101201: NOT
101202: IFFALSE 101224
// ComMoveToArea ( group [ i ] , f_repair ) ;
101204: LD_VAR 0 4
101208: PUSH
101209: LD_VAR 0 7
101213: ARRAY
101214: PPUSH
101215: LD_VAR 0 22
101219: PPUSH
101220: CALL_OW 113
// continue ;
101224: GO 100851
// end ; end else
101226: GO 101506
// if group [ i ] in repairs then
101228: LD_VAR 0 4
101232: PUSH
101233: LD_VAR 0 7
101237: ARRAY
101238: PUSH
101239: LD_VAR 0 33
101243: IN
101244: IFFALSE 101506
// begin if IsInUnit ( group [ i ] ) then
101246: LD_VAR 0 4
101250: PUSH
101251: LD_VAR 0 7
101255: ARRAY
101256: PPUSH
101257: CALL_OW 310
101261: IFFALSE 101329
// begin z := IsInUnit ( group [ i ] ) ;
101263: LD_ADDR_VAR 0 13
101267: PUSH
101268: LD_VAR 0 4
101272: PUSH
101273: LD_VAR 0 7
101277: ARRAY
101278: PPUSH
101279: CALL_OW 310
101283: ST_TO_ADDR
// if z in to_repair and IsInArea ( z , f_repair ) then
101284: LD_VAR 0 13
101288: PUSH
101289: LD_VAR 0 32
101293: IN
101294: PUSH
101295: LD_VAR 0 13
101299: PPUSH
101300: LD_VAR 0 22
101304: PPUSH
101305: CALL_OW 308
101309: AND
101310: IFFALSE 101327
// ComExitVehicle ( group [ i ] ) ;
101312: LD_VAR 0 4
101316: PUSH
101317: LD_VAR 0 7
101321: ARRAY
101322: PPUSH
101323: CALL_OW 121
// end else
101327: GO 101506
// begin z := UnitFilter ( group , [ [ f_inarea , f_repair ] , [ f_empty ] ] ) ;
101329: LD_ADDR_VAR 0 13
101333: PUSH
101334: LD_VAR 0 4
101338: PPUSH
101339: LD_INT 95
101341: PUSH
101342: LD_VAR 0 22
101346: PUSH
101347: EMPTY
101348: LIST
101349: LIST
101350: PUSH
101351: LD_INT 58
101353: PUSH
101354: EMPTY
101355: LIST
101356: PUSH
101357: EMPTY
101358: LIST
101359: LIST
101360: PPUSH
101361: CALL_OW 72
101365: ST_TO_ADDR
// if not HasTask ( group [ i ] ) then
101366: LD_VAR 0 4
101370: PUSH
101371: LD_VAR 0 7
101375: ARRAY
101376: PPUSH
101377: CALL_OW 314
101381: NOT
101382: IFFALSE 101504
// begin x := NearestUnitToUnit ( z , group [ i ] ) ;
101384: LD_ADDR_VAR 0 10
101388: PUSH
101389: LD_VAR 0 13
101393: PPUSH
101394: LD_VAR 0 4
101398: PUSH
101399: LD_VAR 0 7
101403: ARRAY
101404: PPUSH
101405: CALL_OW 74
101409: ST_TO_ADDR
// if not x then
101410: LD_VAR 0 10
101414: NOT
101415: IFFALSE 101419
// continue ;
101417: GO 100851
// if GetLives ( x ) < 1000 then
101419: LD_VAR 0 10
101423: PPUSH
101424: CALL_OW 256
101428: PUSH
101429: LD_INT 1000
101431: LESS
101432: IFFALSE 101456
// ComRepairVehicle ( group [ i ] , x ) else
101434: LD_VAR 0 4
101438: PUSH
101439: LD_VAR 0 7
101443: ARRAY
101444: PPUSH
101445: LD_VAR 0 10
101449: PPUSH
101450: CALL_OW 129
101454: GO 101504
// if not ( f_heal and GetLives ( group [ i ] ) < 1000 ) then
101456: LD_VAR 0 23
101460: PUSH
101461: LD_VAR 0 4
101465: PUSH
101466: LD_VAR 0 7
101470: ARRAY
101471: PPUSH
101472: CALL_OW 256
101476: PUSH
101477: LD_INT 1000
101479: LESS
101480: AND
101481: NOT
101482: IFFALSE 101504
// ComEnterUnit ( group [ i ] , x ) ;
101484: LD_VAR 0 4
101488: PUSH
101489: LD_VAR 0 7
101493: ARRAY
101494: PPUSH
101495: LD_VAR 0 10
101499: PPUSH
101500: CALL_OW 120
// end ; continue ;
101504: GO 100851
// end ; end ; end ; if f_heal and GetType ( group [ i ] ) = unit_human then
101506: LD_VAR 0 23
101510: PUSH
101511: LD_VAR 0 4
101515: PUSH
101516: LD_VAR 0 7
101520: ARRAY
101521: PPUSH
101522: CALL_OW 247
101526: PUSH
101527: LD_INT 1
101529: EQUAL
101530: AND
101531: IFFALSE 102009
// begin if group [ i ] in healers then
101533: LD_VAR 0 4
101537: PUSH
101538: LD_VAR 0 7
101542: ARRAY
101543: PUSH
101544: LD_VAR 0 31
101548: IN
101549: IFFALSE 101822
// begin if not IsInArea ( group [ i ] , f_heal ) and not HasTask ( group [ i ] ) then
101551: LD_VAR 0 4
101555: PUSH
101556: LD_VAR 0 7
101560: ARRAY
101561: PPUSH
101562: LD_VAR 0 23
101566: PPUSH
101567: CALL_OW 308
101571: NOT
101572: PUSH
101573: LD_VAR 0 4
101577: PUSH
101578: LD_VAR 0 7
101582: ARRAY
101583: PPUSH
101584: CALL_OW 314
101588: NOT
101589: AND
101590: IFFALSE 101614
// ComMoveToArea ( group [ i ] , f_heal ) else
101592: LD_VAR 0 4
101596: PUSH
101597: LD_VAR 0 7
101601: ARRAY
101602: PPUSH
101603: LD_VAR 0 23
101607: PPUSH
101608: CALL_OW 113
101612: GO 101820
// if GetLives ( HealTarget ( group [ i ] ) ) = 1000 then
101614: LD_VAR 0 4
101618: PUSH
101619: LD_VAR 0 7
101623: ARRAY
101624: PPUSH
101625: CALL 52666 0 1
101629: PPUSH
101630: CALL_OW 256
101634: PUSH
101635: LD_INT 1000
101637: EQUAL
101638: IFFALSE 101657
// ComStop ( group [ i ] ) else
101640: LD_VAR 0 4
101644: PUSH
101645: LD_VAR 0 7
101649: ARRAY
101650: PPUSH
101651: CALL_OW 141
101655: GO 101820
// if not HasTask ( group [ i ] ) and to_heal then
101657: LD_VAR 0 4
101661: PUSH
101662: LD_VAR 0 7
101666: ARRAY
101667: PPUSH
101668: CALL_OW 314
101672: NOT
101673: PUSH
101674: LD_VAR 0 30
101678: AND
101679: IFFALSE 101820
// begin z := NearestUnitToUnit ( UnitFilter ( to_heal , [ f_not , [ f_inside ] ] ) , group [ i ] ) ;
101681: LD_ADDR_VAR 0 13
101685: PUSH
101686: LD_VAR 0 30
101690: PPUSH
101691: LD_INT 3
101693: PUSH
101694: LD_INT 54
101696: PUSH
101697: EMPTY
101698: LIST
101699: PUSH
101700: EMPTY
101701: LIST
101702: LIST
101703: PPUSH
101704: CALL_OW 72
101708: PPUSH
101709: LD_VAR 0 4
101713: PUSH
101714: LD_VAR 0 7
101718: ARRAY
101719: PPUSH
101720: CALL_OW 74
101724: ST_TO_ADDR
// if z then
101725: LD_VAR 0 13
101729: IFFALSE 101820
// if FilterAllUnits ( [ [ f_dist , z , 10 ] , [ f_enemy , GetSide ( z ) ] ] ) = 0 then
101731: LD_INT 91
101733: PUSH
101734: LD_VAR 0 13
101738: PUSH
101739: LD_INT 10
101741: PUSH
101742: EMPTY
101743: LIST
101744: LIST
101745: LIST
101746: PUSH
101747: LD_INT 81
101749: PUSH
101750: LD_VAR 0 13
101754: PPUSH
101755: CALL_OW 255
101759: PUSH
101760: EMPTY
101761: LIST
101762: LIST
101763: PUSH
101764: EMPTY
101765: LIST
101766: LIST
101767: PPUSH
101768: CALL_OW 69
101772: PUSH
101773: LD_INT 0
101775: EQUAL
101776: IFFALSE 101800
// ComHeal ( group [ i ] , z ) else
101778: LD_VAR 0 4
101782: PUSH
101783: LD_VAR 0 7
101787: ARRAY
101788: PPUSH
101789: LD_VAR 0 13
101793: PPUSH
101794: CALL_OW 128
101798: GO 101820
// ComMoveToArea ( group [ i ] , f_heal ) ;
101800: LD_VAR 0 4
101804: PUSH
101805: LD_VAR 0 7
101809: ARRAY
101810: PPUSH
101811: LD_VAR 0 23
101815: PPUSH
101816: CALL_OW 113
// end ; continue ;
101820: GO 100851
// end ; if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_heal then
101822: LD_VAR 0 4
101826: PUSH
101827: LD_VAR 0 7
101831: ARRAY
101832: PPUSH
101833: CALL_OW 256
101837: PUSH
101838: LD_INT 700
101840: LESS
101841: PUSH
101842: LD_VAR 0 4
101846: PUSH
101847: LD_VAR 0 7
101851: ARRAY
101852: PUSH
101853: LD_VAR 0 30
101857: IN
101858: NOT
101859: AND
101860: IFFALSE 101884
// to_heal := to_heal union group [ i ] ;
101862: LD_ADDR_VAR 0 30
101866: PUSH
101867: LD_VAR 0 30
101871: PUSH
101872: LD_VAR 0 4
101876: PUSH
101877: LD_VAR 0 7
101881: ARRAY
101882: UNION
101883: ST_TO_ADDR
// if group [ i ] in to_heal then
101884: LD_VAR 0 4
101888: PUSH
101889: LD_VAR 0 7
101893: ARRAY
101894: PUSH
101895: LD_VAR 0 30
101899: IN
101900: IFFALSE 102009
// begin if GetLives ( group [ i ] ) = 1000 then
101902: LD_VAR 0 4
101906: PUSH
101907: LD_VAR 0 7
101911: ARRAY
101912: PPUSH
101913: CALL_OW 256
101917: PUSH
101918: LD_INT 1000
101920: EQUAL
101921: IFFALSE 101947
// to_heal := to_heal diff group [ i ] else
101923: LD_ADDR_VAR 0 30
101927: PUSH
101928: LD_VAR 0 30
101932: PUSH
101933: LD_VAR 0 4
101937: PUSH
101938: LD_VAR 0 7
101942: ARRAY
101943: DIFF
101944: ST_TO_ADDR
101945: GO 102009
// begin if not IsInArea ( group [ i ] , to_heal ) then
101947: LD_VAR 0 4
101951: PUSH
101952: LD_VAR 0 7
101956: ARRAY
101957: PPUSH
101958: LD_VAR 0 30
101962: PPUSH
101963: CALL_OW 308
101967: NOT
101968: IFFALSE 101992
// ComMoveToArea ( group [ i ] , f_heal ) else
101970: LD_VAR 0 4
101974: PUSH
101975: LD_VAR 0 7
101979: ARRAY
101980: PPUSH
101981: LD_VAR 0 23
101985: PPUSH
101986: CALL_OW 113
101990: GO 102007
// ComHold ( group [ i ] ) ;
101992: LD_VAR 0 4
101996: PUSH
101997: LD_VAR 0 7
102001: ARRAY
102002: PPUSH
102003: CALL_OW 140
// continue ;
102007: GO 100851
// end ; end ; end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
102009: LD_VAR 0 4
102013: PUSH
102014: LD_VAR 0 7
102018: ARRAY
102019: PPUSH
102020: LD_INT 10
102022: PPUSH
102023: CALL 51086 0 2
102027: NOT
102028: PUSH
102029: LD_VAR 0 16
102033: PUSH
102034: LD_VAR 0 7
102038: ARRAY
102039: PUSH
102040: EMPTY
102041: EQUAL
102042: NOT
102043: AND
102044: IFFALSE 102310
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
102046: LD_VAR 0 4
102050: PUSH
102051: LD_VAR 0 7
102055: ARRAY
102056: PPUSH
102057: CALL_OW 262
102061: PUSH
102062: LD_INT 1
102064: PUSH
102065: LD_INT 2
102067: PUSH
102068: EMPTY
102069: LIST
102070: LIST
102071: IN
102072: IFFALSE 102113
// if GetFuel ( group [ i ] ) < 10 then
102074: LD_VAR 0 4
102078: PUSH
102079: LD_VAR 0 7
102083: ARRAY
102084: PPUSH
102085: CALL_OW 261
102089: PUSH
102090: LD_INT 10
102092: LESS
102093: IFFALSE 102113
// SetFuel ( group [ i ] , 12 ) ;
102095: LD_VAR 0 4
102099: PUSH
102100: LD_VAR 0 7
102104: ARRAY
102105: PPUSH
102106: LD_INT 12
102108: PPUSH
102109: CALL_OW 240
// if units_path [ i ] then
102113: LD_VAR 0 16
102117: PUSH
102118: LD_VAR 0 7
102122: ARRAY
102123: IFFALSE 102308
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
102125: LD_VAR 0 4
102129: PUSH
102130: LD_VAR 0 7
102134: ARRAY
102135: PPUSH
102136: LD_VAR 0 16
102140: PUSH
102141: LD_VAR 0 7
102145: ARRAY
102146: PUSH
102147: LD_INT 1
102149: ARRAY
102150: PUSH
102151: LD_INT 1
102153: ARRAY
102154: PPUSH
102155: LD_VAR 0 16
102159: PUSH
102160: LD_VAR 0 7
102164: ARRAY
102165: PUSH
102166: LD_INT 1
102168: ARRAY
102169: PUSH
102170: LD_INT 2
102172: ARRAY
102173: PPUSH
102174: CALL_OW 297
102178: PUSH
102179: LD_INT 6
102181: GREATER
102182: IFFALSE 102257
// begin if not HasTask ( group [ i ] ) then
102184: LD_VAR 0 4
102188: PUSH
102189: LD_VAR 0 7
102193: ARRAY
102194: PPUSH
102195: CALL_OW 314
102199: NOT
102200: IFFALSE 102255
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
102202: LD_VAR 0 4
102206: PUSH
102207: LD_VAR 0 7
102211: ARRAY
102212: PPUSH
102213: LD_VAR 0 16
102217: PUSH
102218: LD_VAR 0 7
102222: ARRAY
102223: PUSH
102224: LD_INT 1
102226: ARRAY
102227: PUSH
102228: LD_INT 1
102230: ARRAY
102231: PPUSH
102232: LD_VAR 0 16
102236: PUSH
102237: LD_VAR 0 7
102241: ARRAY
102242: PUSH
102243: LD_INT 1
102245: ARRAY
102246: PUSH
102247: LD_INT 2
102249: ARRAY
102250: PPUSH
102251: CALL_OW 114
// end else
102255: GO 102308
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
102257: LD_ADDR_VAR 0 15
102261: PUSH
102262: LD_VAR 0 16
102266: PUSH
102267: LD_VAR 0 7
102271: ARRAY
102272: PPUSH
102273: LD_INT 1
102275: PPUSH
102276: CALL_OW 3
102280: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
102281: LD_ADDR_VAR 0 16
102285: PUSH
102286: LD_VAR 0 16
102290: PPUSH
102291: LD_VAR 0 7
102295: PPUSH
102296: LD_VAR 0 15
102300: PPUSH
102301: CALL_OW 1
102305: ST_TO_ADDR
// continue ;
102306: GO 100851
// end ; end ; end else
102308: GO 104972
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
102310: LD_ADDR_VAR 0 14
102314: PUSH
102315: LD_INT 81
102317: PUSH
102318: LD_VAR 0 4
102322: PUSH
102323: LD_VAR 0 7
102327: ARRAY
102328: PPUSH
102329: CALL_OW 255
102333: PUSH
102334: EMPTY
102335: LIST
102336: LIST
102337: PPUSH
102338: CALL_OW 69
102342: ST_TO_ADDR
// if not tmp then
102343: LD_VAR 0 14
102347: NOT
102348: IFFALSE 102352
// continue ;
102350: GO 100851
// if f_ignore_area then
102352: LD_VAR 0 17
102356: IFFALSE 102444
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
102358: LD_ADDR_VAR 0 15
102362: PUSH
102363: LD_VAR 0 14
102367: PPUSH
102368: LD_INT 3
102370: PUSH
102371: LD_INT 92
102373: PUSH
102374: LD_VAR 0 17
102378: PUSH
102379: LD_INT 1
102381: ARRAY
102382: PUSH
102383: LD_VAR 0 17
102387: PUSH
102388: LD_INT 2
102390: ARRAY
102391: PUSH
102392: LD_VAR 0 17
102396: PUSH
102397: LD_INT 3
102399: ARRAY
102400: PUSH
102401: EMPTY
102402: LIST
102403: LIST
102404: LIST
102405: LIST
102406: PUSH
102407: EMPTY
102408: LIST
102409: LIST
102410: PPUSH
102411: CALL_OW 72
102415: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
102416: LD_VAR 0 14
102420: PUSH
102421: LD_VAR 0 15
102425: DIFF
102426: IFFALSE 102444
// tmp := tmp diff tmp2 ;
102428: LD_ADDR_VAR 0 14
102432: PUSH
102433: LD_VAR 0 14
102437: PUSH
102438: LD_VAR 0 15
102442: DIFF
102443: ST_TO_ADDR
// end ; if not f_murder then
102444: LD_VAR 0 20
102448: NOT
102449: IFFALSE 102507
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
102451: LD_ADDR_VAR 0 15
102455: PUSH
102456: LD_VAR 0 14
102460: PPUSH
102461: LD_INT 3
102463: PUSH
102464: LD_INT 50
102466: PUSH
102467: EMPTY
102468: LIST
102469: PUSH
102470: EMPTY
102471: LIST
102472: LIST
102473: PPUSH
102474: CALL_OW 72
102478: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
102479: LD_VAR 0 14
102483: PUSH
102484: LD_VAR 0 15
102488: DIFF
102489: IFFALSE 102507
// tmp := tmp diff tmp2 ;
102491: LD_ADDR_VAR 0 14
102495: PUSH
102496: LD_VAR 0 14
102500: PUSH
102501: LD_VAR 0 15
102505: DIFF
102506: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
102507: LD_ADDR_VAR 0 14
102511: PUSH
102512: LD_VAR 0 4
102516: PUSH
102517: LD_VAR 0 7
102521: ARRAY
102522: PPUSH
102523: LD_VAR 0 14
102527: PPUSH
102528: LD_INT 1
102530: PPUSH
102531: LD_INT 1
102533: PPUSH
102534: CALL 24729 0 4
102538: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
102539: LD_VAR 0 4
102543: PUSH
102544: LD_VAR 0 7
102548: ARRAY
102549: PPUSH
102550: CALL_OW 257
102554: PUSH
102555: LD_INT 1
102557: EQUAL
102558: IFFALSE 103006
// begin if WantPlant ( group [ i ] ) then
102560: LD_VAR 0 4
102564: PUSH
102565: LD_VAR 0 7
102569: ARRAY
102570: PPUSH
102571: CALL 24230 0 1
102575: IFFALSE 102579
// continue ;
102577: GO 100851
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
102579: LD_VAR 0 18
102583: PUSH
102584: LD_VAR 0 4
102588: PUSH
102589: LD_VAR 0 7
102593: ARRAY
102594: PPUSH
102595: CALL_OW 310
102599: NOT
102600: AND
102601: PUSH
102602: LD_VAR 0 14
102606: PUSH
102607: LD_INT 1
102609: ARRAY
102610: PUSH
102611: LD_VAR 0 14
102615: PPUSH
102616: LD_INT 21
102618: PUSH
102619: LD_INT 2
102621: PUSH
102622: EMPTY
102623: LIST
102624: LIST
102625: PUSH
102626: LD_INT 58
102628: PUSH
102629: EMPTY
102630: LIST
102631: PUSH
102632: EMPTY
102633: LIST
102634: LIST
102635: PPUSH
102636: CALL_OW 72
102640: IN
102641: AND
102642: IFFALSE 102678
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
102644: LD_VAR 0 4
102648: PUSH
102649: LD_VAR 0 7
102653: ARRAY
102654: PPUSH
102655: LD_VAR 0 14
102659: PUSH
102660: LD_INT 1
102662: ARRAY
102663: PPUSH
102664: CALL_OW 120
// attacking := true ;
102668: LD_ADDR_VAR 0 29
102672: PUSH
102673: LD_INT 1
102675: ST_TO_ADDR
// continue ;
102676: GO 100851
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
102678: LD_VAR 0 26
102682: PUSH
102683: LD_VAR 0 4
102687: PUSH
102688: LD_VAR 0 7
102692: ARRAY
102693: PPUSH
102694: CALL_OW 257
102698: PUSH
102699: LD_INT 1
102701: EQUAL
102702: AND
102703: PUSH
102704: LD_VAR 0 4
102708: PUSH
102709: LD_VAR 0 7
102713: ARRAY
102714: PPUSH
102715: CALL_OW 256
102719: PUSH
102720: LD_INT 800
102722: LESS
102723: AND
102724: PUSH
102725: LD_VAR 0 4
102729: PUSH
102730: LD_VAR 0 7
102734: ARRAY
102735: PPUSH
102736: CALL_OW 318
102740: NOT
102741: AND
102742: IFFALSE 102759
// ComCrawl ( group [ i ] ) ;
102744: LD_VAR 0 4
102748: PUSH
102749: LD_VAR 0 7
102753: ARRAY
102754: PPUSH
102755: CALL_OW 137
// if f_mines then
102759: LD_VAR 0 21
102763: IFFALSE 103006
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
102765: LD_VAR 0 14
102769: PUSH
102770: LD_INT 1
102772: ARRAY
102773: PPUSH
102774: CALL_OW 247
102778: PUSH
102779: LD_INT 3
102781: EQUAL
102782: PUSH
102783: LD_VAR 0 14
102787: PUSH
102788: LD_INT 1
102790: ARRAY
102791: PUSH
102792: LD_VAR 0 27
102796: IN
102797: NOT
102798: AND
102799: IFFALSE 103006
// begin x := GetX ( tmp [ 1 ] ) ;
102801: LD_ADDR_VAR 0 10
102805: PUSH
102806: LD_VAR 0 14
102810: PUSH
102811: LD_INT 1
102813: ARRAY
102814: PPUSH
102815: CALL_OW 250
102819: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
102820: LD_ADDR_VAR 0 11
102824: PUSH
102825: LD_VAR 0 14
102829: PUSH
102830: LD_INT 1
102832: ARRAY
102833: PPUSH
102834: CALL_OW 251
102838: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
102839: LD_ADDR_VAR 0 12
102843: PUSH
102844: LD_VAR 0 4
102848: PUSH
102849: LD_VAR 0 7
102853: ARRAY
102854: PPUSH
102855: CALL 51171 0 1
102859: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
102860: LD_VAR 0 4
102864: PUSH
102865: LD_VAR 0 7
102869: ARRAY
102870: PPUSH
102871: LD_VAR 0 10
102875: PPUSH
102876: LD_VAR 0 11
102880: PPUSH
102881: LD_VAR 0 14
102885: PUSH
102886: LD_INT 1
102888: ARRAY
102889: PPUSH
102890: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
102894: LD_VAR 0 4
102898: PUSH
102899: LD_VAR 0 7
102903: ARRAY
102904: PPUSH
102905: LD_VAR 0 10
102909: PPUSH
102910: LD_VAR 0 12
102914: PPUSH
102915: LD_INT 7
102917: PPUSH
102918: CALL_OW 272
102922: PPUSH
102923: LD_VAR 0 11
102927: PPUSH
102928: LD_VAR 0 12
102932: PPUSH
102933: LD_INT 7
102935: PPUSH
102936: CALL_OW 273
102940: PPUSH
102941: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
102945: LD_VAR 0 4
102949: PUSH
102950: LD_VAR 0 7
102954: ARRAY
102955: PPUSH
102956: LD_INT 71
102958: PPUSH
102959: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
102963: LD_ADDR_VAR 0 27
102967: PUSH
102968: LD_VAR 0 27
102972: PPUSH
102973: LD_VAR 0 27
102977: PUSH
102978: LD_INT 1
102980: PLUS
102981: PPUSH
102982: LD_VAR 0 14
102986: PUSH
102987: LD_INT 1
102989: ARRAY
102990: PPUSH
102991: CALL_OW 1
102995: ST_TO_ADDR
// attacking := true ;
102996: LD_ADDR_VAR 0 29
103000: PUSH
103001: LD_INT 1
103003: ST_TO_ADDR
// continue ;
103004: GO 100851
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
103006: LD_VAR 0 4
103010: PUSH
103011: LD_VAR 0 7
103015: ARRAY
103016: PPUSH
103017: CALL_OW 257
103021: PUSH
103022: LD_INT 17
103024: EQUAL
103025: PUSH
103026: LD_VAR 0 4
103030: PUSH
103031: LD_VAR 0 7
103035: ARRAY
103036: PPUSH
103037: CALL_OW 110
103041: PUSH
103042: LD_INT 71
103044: EQUAL
103045: NOT
103046: AND
103047: IFFALSE 103193
// begin attacking := false ;
103049: LD_ADDR_VAR 0 29
103053: PUSH
103054: LD_INT 0
103056: ST_TO_ADDR
// k := 5 ;
103057: LD_ADDR_VAR 0 9
103061: PUSH
103062: LD_INT 5
103064: ST_TO_ADDR
// if tmp < k then
103065: LD_VAR 0 14
103069: PUSH
103070: LD_VAR 0 9
103074: LESS
103075: IFFALSE 103087
// k := tmp ;
103077: LD_ADDR_VAR 0 9
103081: PUSH
103082: LD_VAR 0 14
103086: ST_TO_ADDR
// for j = 1 to k do
103087: LD_ADDR_VAR 0 8
103091: PUSH
103092: DOUBLE
103093: LD_INT 1
103095: DEC
103096: ST_TO_ADDR
103097: LD_VAR 0 9
103101: PUSH
103102: FOR_TO
103103: IFFALSE 103191
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
103105: LD_VAR 0 14
103109: PUSH
103110: LD_VAR 0 8
103114: ARRAY
103115: PUSH
103116: LD_VAR 0 14
103120: PPUSH
103121: LD_INT 58
103123: PUSH
103124: EMPTY
103125: LIST
103126: PPUSH
103127: CALL_OW 72
103131: IN
103132: NOT
103133: IFFALSE 103189
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
103135: LD_VAR 0 4
103139: PUSH
103140: LD_VAR 0 7
103144: ARRAY
103145: PPUSH
103146: LD_VAR 0 14
103150: PUSH
103151: LD_VAR 0 8
103155: ARRAY
103156: PPUSH
103157: CALL_OW 115
// attacking := true ;
103161: LD_ADDR_VAR 0 29
103165: PUSH
103166: LD_INT 1
103168: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
103169: LD_VAR 0 4
103173: PUSH
103174: LD_VAR 0 7
103178: ARRAY
103179: PPUSH
103180: LD_INT 71
103182: PPUSH
103183: CALL_OW 109
// continue ;
103187: GO 103102
// end ; end ;
103189: GO 103102
103191: POP
103192: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
103193: LD_VAR 0 4
103197: PUSH
103198: LD_VAR 0 7
103202: ARRAY
103203: PPUSH
103204: CALL_OW 257
103208: PUSH
103209: LD_INT 8
103211: EQUAL
103212: PUSH
103213: LD_VAR 0 4
103217: PUSH
103218: LD_VAR 0 7
103222: ARRAY
103223: PPUSH
103224: CALL_OW 264
103228: PUSH
103229: LD_INT 28
103231: PUSH
103232: LD_INT 45
103234: PUSH
103235: LD_INT 7
103237: PUSH
103238: LD_INT 47
103240: PUSH
103241: EMPTY
103242: LIST
103243: LIST
103244: LIST
103245: LIST
103246: IN
103247: OR
103248: IFFALSE 103504
// begin attacking := false ;
103250: LD_ADDR_VAR 0 29
103254: PUSH
103255: LD_INT 0
103257: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
103258: LD_VAR 0 14
103262: PUSH
103263: LD_INT 1
103265: ARRAY
103266: PPUSH
103267: CALL_OW 266
103271: PUSH
103272: LD_INT 32
103274: PUSH
103275: LD_INT 31
103277: PUSH
103278: LD_INT 33
103280: PUSH
103281: LD_INT 4
103283: PUSH
103284: LD_INT 5
103286: PUSH
103287: EMPTY
103288: LIST
103289: LIST
103290: LIST
103291: LIST
103292: LIST
103293: IN
103294: IFFALSE 103480
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
103296: LD_ADDR_VAR 0 9
103300: PUSH
103301: LD_VAR 0 14
103305: PUSH
103306: LD_INT 1
103308: ARRAY
103309: PPUSH
103310: CALL_OW 266
103314: PPUSH
103315: LD_VAR 0 14
103319: PUSH
103320: LD_INT 1
103322: ARRAY
103323: PPUSH
103324: CALL_OW 250
103328: PPUSH
103329: LD_VAR 0 14
103333: PUSH
103334: LD_INT 1
103336: ARRAY
103337: PPUSH
103338: CALL_OW 251
103342: PPUSH
103343: LD_VAR 0 14
103347: PUSH
103348: LD_INT 1
103350: ARRAY
103351: PPUSH
103352: CALL_OW 254
103356: PPUSH
103357: LD_VAR 0 14
103361: PUSH
103362: LD_INT 1
103364: ARRAY
103365: PPUSH
103366: CALL_OW 248
103370: PPUSH
103371: LD_INT 0
103373: PPUSH
103374: CALL 32541 0 6
103378: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
103379: LD_ADDR_VAR 0 8
103383: PUSH
103384: LD_VAR 0 4
103388: PUSH
103389: LD_VAR 0 7
103393: ARRAY
103394: PPUSH
103395: LD_VAR 0 9
103399: PPUSH
103400: CALL 51211 0 2
103404: ST_TO_ADDR
// if j then
103405: LD_VAR 0 8
103409: IFFALSE 103478
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
103411: LD_VAR 0 8
103415: PUSH
103416: LD_INT 1
103418: ARRAY
103419: PPUSH
103420: LD_VAR 0 8
103424: PUSH
103425: LD_INT 2
103427: ARRAY
103428: PPUSH
103429: CALL_OW 488
103433: IFFALSE 103478
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
103435: LD_VAR 0 4
103439: PUSH
103440: LD_VAR 0 7
103444: ARRAY
103445: PPUSH
103446: LD_VAR 0 8
103450: PUSH
103451: LD_INT 1
103453: ARRAY
103454: PPUSH
103455: LD_VAR 0 8
103459: PUSH
103460: LD_INT 2
103462: ARRAY
103463: PPUSH
103464: CALL_OW 116
// attacking := true ;
103468: LD_ADDR_VAR 0 29
103472: PUSH
103473: LD_INT 1
103475: ST_TO_ADDR
// continue ;
103476: GO 100851
// end ; end else
103478: GO 103504
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
103480: LD_VAR 0 4
103484: PUSH
103485: LD_VAR 0 7
103489: ARRAY
103490: PPUSH
103491: LD_VAR 0 14
103495: PUSH
103496: LD_INT 1
103498: ARRAY
103499: PPUSH
103500: CALL_OW 115
// end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
103504: LD_VAR 0 4
103508: PUSH
103509: LD_VAR 0 7
103513: ARRAY
103514: PPUSH
103515: CALL_OW 265
103519: PUSH
103520: LD_INT 11
103522: EQUAL
103523: IFFALSE 103801
// begin k := 10 ;
103525: LD_ADDR_VAR 0 9
103529: PUSH
103530: LD_INT 10
103532: ST_TO_ADDR
// x := 0 ;
103533: LD_ADDR_VAR 0 10
103537: PUSH
103538: LD_INT 0
103540: ST_TO_ADDR
// if tmp < k then
103541: LD_VAR 0 14
103545: PUSH
103546: LD_VAR 0 9
103550: LESS
103551: IFFALSE 103563
// k := tmp ;
103553: LD_ADDR_VAR 0 9
103557: PUSH
103558: LD_VAR 0 14
103562: ST_TO_ADDR
// for j = k downto 1 do
103563: LD_ADDR_VAR 0 8
103567: PUSH
103568: DOUBLE
103569: LD_VAR 0 9
103573: INC
103574: ST_TO_ADDR
103575: LD_INT 1
103577: PUSH
103578: FOR_DOWNTO
103579: IFFALSE 103654
// begin if GetType ( tmp [ j ] ) = unit_human then
103581: LD_VAR 0 14
103585: PUSH
103586: LD_VAR 0 8
103590: ARRAY
103591: PPUSH
103592: CALL_OW 247
103596: PUSH
103597: LD_INT 1
103599: EQUAL
103600: IFFALSE 103652
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
103602: LD_VAR 0 4
103606: PUSH
103607: LD_VAR 0 7
103611: ARRAY
103612: PPUSH
103613: LD_VAR 0 14
103617: PUSH
103618: LD_VAR 0 8
103622: ARRAY
103623: PPUSH
103624: CALL 51482 0 2
// x := tmp [ j ] ;
103628: LD_ADDR_VAR 0 10
103632: PUSH
103633: LD_VAR 0 14
103637: PUSH
103638: LD_VAR 0 8
103642: ARRAY
103643: ST_TO_ADDR
// attacking := true ;
103644: LD_ADDR_VAR 0 29
103648: PUSH
103649: LD_INT 1
103651: ST_TO_ADDR
// end ; end ;
103652: GO 103578
103654: POP
103655: POP
// if not x then
103656: LD_VAR 0 10
103660: NOT
103661: IFFALSE 103801
// begin attacking := true ;
103663: LD_ADDR_VAR 0 29
103667: PUSH
103668: LD_INT 1
103670: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
103671: LD_VAR 0 4
103675: PUSH
103676: LD_VAR 0 7
103680: ARRAY
103681: PPUSH
103682: CALL_OW 250
103686: PPUSH
103687: LD_VAR 0 4
103691: PUSH
103692: LD_VAR 0 7
103696: ARRAY
103697: PPUSH
103698: CALL_OW 251
103702: PPUSH
103703: CALL_OW 546
103707: PUSH
103708: LD_INT 2
103710: ARRAY
103711: PUSH
103712: LD_VAR 0 14
103716: PUSH
103717: LD_INT 1
103719: ARRAY
103720: PPUSH
103721: CALL_OW 250
103725: PPUSH
103726: LD_VAR 0 14
103730: PUSH
103731: LD_INT 1
103733: ARRAY
103734: PPUSH
103735: CALL_OW 251
103739: PPUSH
103740: CALL_OW 546
103744: PUSH
103745: LD_INT 2
103747: ARRAY
103748: EQUAL
103749: IFFALSE 103777
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
103751: LD_VAR 0 4
103755: PUSH
103756: LD_VAR 0 7
103760: ARRAY
103761: PPUSH
103762: LD_VAR 0 14
103766: PUSH
103767: LD_INT 1
103769: ARRAY
103770: PPUSH
103771: CALL 51482 0 2
103775: GO 103801
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
103777: LD_VAR 0 4
103781: PUSH
103782: LD_VAR 0 7
103786: ARRAY
103787: PPUSH
103788: LD_VAR 0 14
103792: PUSH
103793: LD_INT 1
103795: ARRAY
103796: PPUSH
103797: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
103801: LD_VAR 0 4
103805: PUSH
103806: LD_VAR 0 7
103810: ARRAY
103811: PPUSH
103812: CALL_OW 264
103816: PUSH
103817: LD_INT 29
103819: EQUAL
103820: IFFALSE 104186
// begin if WantsToAttack ( group [ i ] ) in bombed then
103822: LD_VAR 0 4
103826: PUSH
103827: LD_VAR 0 7
103831: ARRAY
103832: PPUSH
103833: CALL_OW 319
103837: PUSH
103838: LD_VAR 0 28
103842: IN
103843: IFFALSE 103847
// continue ;
103845: GO 100851
// k := 8 ;
103847: LD_ADDR_VAR 0 9
103851: PUSH
103852: LD_INT 8
103854: ST_TO_ADDR
// x := 0 ;
103855: LD_ADDR_VAR 0 10
103859: PUSH
103860: LD_INT 0
103862: ST_TO_ADDR
// if tmp < k then
103863: LD_VAR 0 14
103867: PUSH
103868: LD_VAR 0 9
103872: LESS
103873: IFFALSE 103885
// k := tmp ;
103875: LD_ADDR_VAR 0 9
103879: PUSH
103880: LD_VAR 0 14
103884: ST_TO_ADDR
// for j = 1 to k do
103885: LD_ADDR_VAR 0 8
103889: PUSH
103890: DOUBLE
103891: LD_INT 1
103893: DEC
103894: ST_TO_ADDR
103895: LD_VAR 0 9
103899: PUSH
103900: FOR_TO
103901: IFFALSE 104033
// begin if GetType ( tmp [ j ] ) = unit_building then
103903: LD_VAR 0 14
103907: PUSH
103908: LD_VAR 0 8
103912: ARRAY
103913: PPUSH
103914: CALL_OW 247
103918: PUSH
103919: LD_INT 3
103921: EQUAL
103922: IFFALSE 104031
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
103924: LD_VAR 0 14
103928: PUSH
103929: LD_VAR 0 8
103933: ARRAY
103934: PUSH
103935: LD_VAR 0 28
103939: IN
103940: NOT
103941: PUSH
103942: LD_VAR 0 14
103946: PUSH
103947: LD_VAR 0 8
103951: ARRAY
103952: PPUSH
103953: CALL_OW 313
103957: AND
103958: IFFALSE 104031
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
103960: LD_VAR 0 4
103964: PUSH
103965: LD_VAR 0 7
103969: ARRAY
103970: PPUSH
103971: LD_VAR 0 14
103975: PUSH
103976: LD_VAR 0 8
103980: ARRAY
103981: PPUSH
103982: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
103986: LD_ADDR_VAR 0 28
103990: PUSH
103991: LD_VAR 0 28
103995: PPUSH
103996: LD_VAR 0 28
104000: PUSH
104001: LD_INT 1
104003: PLUS
104004: PPUSH
104005: LD_VAR 0 14
104009: PUSH
104010: LD_VAR 0 8
104014: ARRAY
104015: PPUSH
104016: CALL_OW 1
104020: ST_TO_ADDR
// attacking := true ;
104021: LD_ADDR_VAR 0 29
104025: PUSH
104026: LD_INT 1
104028: ST_TO_ADDR
// break ;
104029: GO 104033
// end ; end ;
104031: GO 103900
104033: POP
104034: POP
// if not attacking and f_attack_depot then
104035: LD_VAR 0 29
104039: NOT
104040: PUSH
104041: LD_VAR 0 25
104045: AND
104046: IFFALSE 104141
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
104048: LD_ADDR_VAR 0 13
104052: PUSH
104053: LD_VAR 0 14
104057: PPUSH
104058: LD_INT 2
104060: PUSH
104061: LD_INT 30
104063: PUSH
104064: LD_INT 0
104066: PUSH
104067: EMPTY
104068: LIST
104069: LIST
104070: PUSH
104071: LD_INT 30
104073: PUSH
104074: LD_INT 1
104076: PUSH
104077: EMPTY
104078: LIST
104079: LIST
104080: PUSH
104081: EMPTY
104082: LIST
104083: LIST
104084: LIST
104085: PPUSH
104086: CALL_OW 72
104090: ST_TO_ADDR
// if z then
104091: LD_VAR 0 13
104095: IFFALSE 104141
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
104097: LD_VAR 0 4
104101: PUSH
104102: LD_VAR 0 7
104106: ARRAY
104107: PPUSH
104108: LD_VAR 0 13
104112: PPUSH
104113: LD_VAR 0 4
104117: PUSH
104118: LD_VAR 0 7
104122: ARRAY
104123: PPUSH
104124: CALL_OW 74
104128: PPUSH
104129: CALL_OW 115
// attacking := true ;
104133: LD_ADDR_VAR 0 29
104137: PUSH
104138: LD_INT 1
104140: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
104141: LD_VAR 0 4
104145: PUSH
104146: LD_VAR 0 7
104150: ARRAY
104151: PPUSH
104152: CALL_OW 256
104156: PUSH
104157: LD_INT 500
104159: LESS
104160: IFFALSE 104186
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
104162: LD_VAR 0 4
104166: PUSH
104167: LD_VAR 0 7
104171: ARRAY
104172: PPUSH
104173: LD_VAR 0 14
104177: PUSH
104178: LD_INT 1
104180: ARRAY
104181: PPUSH
104182: CALL_OW 115
// end ; if GetWeapon ( group [ i ] ) = ru_time_lapser then
104186: LD_VAR 0 4
104190: PUSH
104191: LD_VAR 0 7
104195: ARRAY
104196: PPUSH
104197: CALL_OW 264
104201: PUSH
104202: LD_INT 49
104204: EQUAL
104205: IFFALSE 104326
// begin if not HasTask ( group [ i ] ) then
104207: LD_VAR 0 4
104211: PUSH
104212: LD_VAR 0 7
104216: ARRAY
104217: PPUSH
104218: CALL_OW 314
104222: NOT
104223: IFFALSE 104326
// begin k := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) , group [ i ] ) ;
104225: LD_ADDR_VAR 0 9
104229: PUSH
104230: LD_INT 81
104232: PUSH
104233: LD_VAR 0 4
104237: PUSH
104238: LD_VAR 0 7
104242: ARRAY
104243: PPUSH
104244: CALL_OW 255
104248: PUSH
104249: EMPTY
104250: LIST
104251: LIST
104252: PPUSH
104253: CALL_OW 69
104257: PPUSH
104258: LD_VAR 0 4
104262: PUSH
104263: LD_VAR 0 7
104267: ARRAY
104268: PPUSH
104269: CALL_OW 74
104273: ST_TO_ADDR
// if k then
104274: LD_VAR 0 9
104278: IFFALSE 104326
// if GetDistUnits ( group [ i ] , k ) > 10 then
104280: LD_VAR 0 4
104284: PUSH
104285: LD_VAR 0 7
104289: ARRAY
104290: PPUSH
104291: LD_VAR 0 9
104295: PPUSH
104296: CALL_OW 296
104300: PUSH
104301: LD_INT 10
104303: GREATER
104304: IFFALSE 104326
// ComMoveUnit ( group [ i ] , k ) ;
104306: LD_VAR 0 4
104310: PUSH
104311: LD_VAR 0 7
104315: ARRAY
104316: PPUSH
104317: LD_VAR 0 9
104321: PPUSH
104322: CALL_OW 112
// end ; end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
104326: LD_VAR 0 4
104330: PUSH
104331: LD_VAR 0 7
104335: ARRAY
104336: PPUSH
104337: CALL_OW 256
104341: PUSH
104342: LD_INT 250
104344: LESS
104345: PUSH
104346: LD_VAR 0 4
104350: PUSH
104351: LD_VAR 0 7
104355: ARRAY
104356: PUSH
104357: LD_INT 21
104359: PUSH
104360: LD_INT 2
104362: PUSH
104363: EMPTY
104364: LIST
104365: LIST
104366: PUSH
104367: LD_INT 23
104369: PUSH
104370: LD_INT 2
104372: PUSH
104373: EMPTY
104374: LIST
104375: LIST
104376: PUSH
104377: EMPTY
104378: LIST
104379: LIST
104380: PPUSH
104381: CALL_OW 69
104385: IN
104386: AND
104387: IFFALSE 104512
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
104389: LD_ADDR_VAR 0 9
104393: PUSH
104394: LD_OWVAR 3
104398: PUSH
104399: LD_VAR 0 4
104403: PUSH
104404: LD_VAR 0 7
104408: ARRAY
104409: DIFF
104410: PPUSH
104411: LD_VAR 0 4
104415: PUSH
104416: LD_VAR 0 7
104420: ARRAY
104421: PPUSH
104422: CALL_OW 74
104426: ST_TO_ADDR
// if not k then
104427: LD_VAR 0 9
104431: NOT
104432: IFFALSE 104436
// continue ;
104434: GO 100851
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
104436: LD_VAR 0 9
104440: PUSH
104441: LD_INT 81
104443: PUSH
104444: LD_VAR 0 4
104448: PUSH
104449: LD_VAR 0 7
104453: ARRAY
104454: PPUSH
104455: CALL_OW 255
104459: PUSH
104460: EMPTY
104461: LIST
104462: LIST
104463: PPUSH
104464: CALL_OW 69
104468: IN
104469: PUSH
104470: LD_VAR 0 9
104474: PPUSH
104475: LD_VAR 0 4
104479: PUSH
104480: LD_VAR 0 7
104484: ARRAY
104485: PPUSH
104486: CALL_OW 296
104490: PUSH
104491: LD_INT 5
104493: LESS
104494: AND
104495: IFFALSE 104512
// ComAutodestruct ( group [ i ] ) ;
104497: LD_VAR 0 4
104501: PUSH
104502: LD_VAR 0 7
104506: ARRAY
104507: PPUSH
104508: CALL 51380 0 1
// end ; if f_attack_depot then
104512: LD_VAR 0 25
104516: IFFALSE 104628
// begin k := 6 ;
104518: LD_ADDR_VAR 0 9
104522: PUSH
104523: LD_INT 6
104525: ST_TO_ADDR
// if tmp < k then
104526: LD_VAR 0 14
104530: PUSH
104531: LD_VAR 0 9
104535: LESS
104536: IFFALSE 104548
// k := tmp ;
104538: LD_ADDR_VAR 0 9
104542: PUSH
104543: LD_VAR 0 14
104547: ST_TO_ADDR
// for j = 1 to k do
104548: LD_ADDR_VAR 0 8
104552: PUSH
104553: DOUBLE
104554: LD_INT 1
104556: DEC
104557: ST_TO_ADDR
104558: LD_VAR 0 9
104562: PUSH
104563: FOR_TO
104564: IFFALSE 104626
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
104566: LD_VAR 0 8
104570: PPUSH
104571: CALL_OW 266
104575: PUSH
104576: LD_INT 0
104578: PUSH
104579: LD_INT 1
104581: PUSH
104582: EMPTY
104583: LIST
104584: LIST
104585: IN
104586: IFFALSE 104624
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
104588: LD_VAR 0 4
104592: PUSH
104593: LD_VAR 0 7
104597: ARRAY
104598: PPUSH
104599: LD_VAR 0 14
104603: PUSH
104604: LD_VAR 0 8
104608: ARRAY
104609: PPUSH
104610: CALL_OW 115
// attacking := true ;
104614: LD_ADDR_VAR 0 29
104618: PUSH
104619: LD_INT 1
104621: ST_TO_ADDR
// break ;
104622: GO 104626
// end ;
104624: GO 104563
104626: POP
104627: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
104628: LD_VAR 0 4
104632: PUSH
104633: LD_VAR 0 7
104637: ARRAY
104638: PPUSH
104639: CALL_OW 302
104643: PUSH
104644: LD_VAR 0 29
104648: NOT
104649: AND
104650: IFFALSE 104972
// begin if GetTag ( group [ i ] ) = 71 then
104652: LD_VAR 0 4
104656: PUSH
104657: LD_VAR 0 7
104661: ARRAY
104662: PPUSH
104663: CALL_OW 110
104667: PUSH
104668: LD_INT 71
104670: EQUAL
104671: IFFALSE 104712
// begin if HasTask ( group [ i ] ) then
104673: LD_VAR 0 4
104677: PUSH
104678: LD_VAR 0 7
104682: ARRAY
104683: PPUSH
104684: CALL_OW 314
104688: IFFALSE 104694
// continue else
104690: GO 100851
104692: GO 104712
// SetTag ( group [ i ] , 0 ) ;
104694: LD_VAR 0 4
104698: PUSH
104699: LD_VAR 0 7
104703: ARRAY
104704: PPUSH
104705: LD_INT 0
104707: PPUSH
104708: CALL_OW 109
// end ; k := 8 ;
104712: LD_ADDR_VAR 0 9
104716: PUSH
104717: LD_INT 8
104719: ST_TO_ADDR
// x := 0 ;
104720: LD_ADDR_VAR 0 10
104724: PUSH
104725: LD_INT 0
104727: ST_TO_ADDR
// if tmp < k then
104728: LD_VAR 0 14
104732: PUSH
104733: LD_VAR 0 9
104737: LESS
104738: IFFALSE 104750
// k := tmp ;
104740: LD_ADDR_VAR 0 9
104744: PUSH
104745: LD_VAR 0 14
104749: ST_TO_ADDR
// for j = 1 to k do
104750: LD_ADDR_VAR 0 8
104754: PUSH
104755: DOUBLE
104756: LD_INT 1
104758: DEC
104759: ST_TO_ADDR
104760: LD_VAR 0 9
104764: PUSH
104765: FOR_TO
104766: IFFALSE 104864
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
104768: LD_VAR 0 14
104772: PUSH
104773: LD_VAR 0 8
104777: ARRAY
104778: PPUSH
104779: CALL_OW 247
104783: PUSH
104784: LD_INT 1
104786: EQUAL
104787: PUSH
104788: LD_VAR 0 14
104792: PUSH
104793: LD_VAR 0 8
104797: ARRAY
104798: PPUSH
104799: CALL_OW 256
104803: PUSH
104804: LD_INT 250
104806: LESS
104807: PUSH
104808: LD_VAR 0 20
104812: AND
104813: PUSH
104814: LD_VAR 0 20
104818: NOT
104819: PUSH
104820: LD_VAR 0 14
104824: PUSH
104825: LD_VAR 0 8
104829: ARRAY
104830: PPUSH
104831: CALL_OW 256
104835: PUSH
104836: LD_INT 250
104838: GREATEREQUAL
104839: AND
104840: OR
104841: AND
104842: IFFALSE 104862
// begin x := tmp [ j ] ;
104844: LD_ADDR_VAR 0 10
104848: PUSH
104849: LD_VAR 0 14
104853: PUSH
104854: LD_VAR 0 8
104858: ARRAY
104859: ST_TO_ADDR
// break ;
104860: GO 104864
// end ;
104862: GO 104765
104864: POP
104865: POP
// if x then
104866: LD_VAR 0 10
104870: IFFALSE 104894
// ComAttackUnit ( group [ i ] , x ) else
104872: LD_VAR 0 4
104876: PUSH
104877: LD_VAR 0 7
104881: ARRAY
104882: PPUSH
104883: LD_VAR 0 10
104887: PPUSH
104888: CALL_OW 115
104892: GO 104918
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
104894: LD_VAR 0 4
104898: PUSH
104899: LD_VAR 0 7
104903: ARRAY
104904: PPUSH
104905: LD_VAR 0 14
104909: PUSH
104910: LD_INT 1
104912: ARRAY
104913: PPUSH
104914: CALL_OW 115
// if not HasTask ( group [ i ] ) then
104918: LD_VAR 0 4
104922: PUSH
104923: LD_VAR 0 7
104927: ARRAY
104928: PPUSH
104929: CALL_OW 314
104933: NOT
104934: IFFALSE 104972
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
104936: LD_VAR 0 4
104940: PUSH
104941: LD_VAR 0 7
104945: ARRAY
104946: PPUSH
104947: LD_VAR 0 14
104951: PPUSH
104952: LD_VAR 0 4
104956: PUSH
104957: LD_VAR 0 7
104961: ARRAY
104962: PPUSH
104963: CALL_OW 74
104967: PPUSH
104968: CALL_OW 115
// end ; end ; end ;
104972: GO 100851
104974: POP
104975: POP
// wait ( 0 0$2 ) ;
104976: LD_INT 70
104978: PPUSH
104979: CALL_OW 67
// until not group or group = [ ] or not FilterAllUnits ( [ f_enemy , side ] ) ;
104983: LD_VAR 0 4
104987: NOT
104988: PUSH
104989: LD_VAR 0 4
104993: PUSH
104994: EMPTY
104995: EQUAL
104996: OR
104997: PUSH
104998: LD_INT 81
105000: PUSH
105001: LD_VAR 0 35
105005: PUSH
105006: EMPTY
105007: LIST
105008: LIST
105009: PPUSH
105010: CALL_OW 69
105014: NOT
105015: OR
105016: IFFALSE 100836
// end ;
105018: LD_VAR 0 2
105022: RET
// export function BasicDefend ( base , solds , area ) ; var enemy , side , i , hex ; begin
105023: LD_INT 0
105025: PPUSH
105026: PPUSH
105027: PPUSH
105028: PPUSH
105029: PPUSH
// if not base or not mc_bases [ base ] or not solds or not area then
105030: LD_VAR 0 1
105034: NOT
105035: PUSH
105036: LD_EXP 46
105040: PUSH
105041: LD_VAR 0 1
105045: ARRAY
105046: NOT
105047: OR
105048: PUSH
105049: LD_VAR 0 2
105053: NOT
105054: OR
105055: PUSH
105056: LD_VAR 0 3
105060: NOT
105061: OR
105062: IFFALSE 105066
// exit ;
105064: GO 105579
// side := mc_sides [ base ] ;
105066: LD_ADDR_VAR 0 6
105070: PUSH
105071: LD_EXP 72
105075: PUSH
105076: LD_VAR 0 1
105080: ARRAY
105081: ST_TO_ADDR
// if not side then
105082: LD_VAR 0 6
105086: NOT
105087: IFFALSE 105091
// exit ;
105089: GO 105579
// for i in solds do
105091: LD_ADDR_VAR 0 7
105095: PUSH
105096: LD_VAR 0 2
105100: PUSH
105101: FOR_IN
105102: IFFALSE 105163
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
105104: LD_VAR 0 7
105108: PPUSH
105109: CALL_OW 310
105113: PPUSH
105114: CALL_OW 266
105118: PUSH
105119: LD_INT 32
105121: PUSH
105122: LD_INT 31
105124: PUSH
105125: EMPTY
105126: LIST
105127: LIST
105128: IN
105129: IFFALSE 105149
// solds := solds diff i else
105131: LD_ADDR_VAR 0 2
105135: PUSH
105136: LD_VAR 0 2
105140: PUSH
105141: LD_VAR 0 7
105145: DIFF
105146: ST_TO_ADDR
105147: GO 105161
// SetTag ( i , 18 ) ;
105149: LD_VAR 0 7
105153: PPUSH
105154: LD_INT 18
105156: PPUSH
105157: CALL_OW 109
105161: GO 105101
105163: POP
105164: POP
// if not solds then
105165: LD_VAR 0 2
105169: NOT
105170: IFFALSE 105174
// exit ;
105172: GO 105579
// repeat wait ( 0 0$1 ) ;
105174: LD_INT 35
105176: PPUSH
105177: CALL_OW 67
// enemy := ScanBase ( side , area ) ;
105181: LD_ADDR_VAR 0 5
105185: PUSH
105186: LD_VAR 0 6
105190: PPUSH
105191: LD_VAR 0 3
105195: PPUSH
105196: CALL 21095 0 2
105200: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
105201: LD_EXP 46
105205: PUSH
105206: LD_VAR 0 1
105210: ARRAY
105211: NOT
105212: PUSH
105213: LD_EXP 46
105217: PUSH
105218: LD_VAR 0 1
105222: ARRAY
105223: PUSH
105224: EMPTY
105225: EQUAL
105226: OR
105227: IFFALSE 105264
// begin for i in solds do
105229: LD_ADDR_VAR 0 7
105233: PUSH
105234: LD_VAR 0 2
105238: PUSH
105239: FOR_IN
105240: IFFALSE 105253
// ComStop ( i ) ;
105242: LD_VAR 0 7
105246: PPUSH
105247: CALL_OW 141
105251: GO 105239
105253: POP
105254: POP
// solds := [ ] ;
105255: LD_ADDR_VAR 0 2
105259: PUSH
105260: EMPTY
105261: ST_TO_ADDR
// exit ;
105262: GO 105579
// end ; if not enemy or enemy > 3 or mc_defender [ base ] then
105264: LD_VAR 0 5
105268: NOT
105269: PUSH
105270: LD_VAR 0 5
105274: PUSH
105275: LD_INT 3
105277: GREATER
105278: OR
105279: PUSH
105280: LD_EXP 68
105284: PUSH
105285: LD_VAR 0 1
105289: ARRAY
105290: OR
105291: IFFALSE 105332
// begin for i in solds do
105293: LD_ADDR_VAR 0 7
105297: PUSH
105298: LD_VAR 0 2
105302: PUSH
105303: FOR_IN
105304: IFFALSE 105328
// if HasTask ( i ) then
105306: LD_VAR 0 7
105310: PPUSH
105311: CALL_OW 314
105315: IFFALSE 105326
// ComStop ( i ) ;
105317: LD_VAR 0 7
105321: PPUSH
105322: CALL_OW 141
105326: GO 105303
105328: POP
105329: POP
// break ;
105330: GO 105567
// end ; for i in solds do
105332: LD_ADDR_VAR 0 7
105336: PUSH
105337: LD_VAR 0 2
105341: PUSH
105342: FOR_IN
105343: IFFALSE 105559
// begin if IsInUnit ( i ) then
105345: LD_VAR 0 7
105349: PPUSH
105350: CALL_OW 310
105354: IFFALSE 105365
// ComExitBuilding ( i ) ;
105356: LD_VAR 0 7
105360: PPUSH
105361: CALL_OW 122
// if GetLives ( i ) > 333 then
105365: LD_VAR 0 7
105369: PPUSH
105370: CALL_OW 256
105374: PUSH
105375: LD_INT 333
105377: GREATER
105378: IFFALSE 105406
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
105380: LD_VAR 0 7
105384: PPUSH
105385: LD_VAR 0 5
105389: PPUSH
105390: LD_VAR 0 7
105394: PPUSH
105395: CALL_OW 74
105399: PPUSH
105400: CALL_OW 115
105404: GO 105557
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
105406: LD_ADDR_VAR 0 8
105410: PUSH
105411: LD_EXP 46
105415: PUSH
105416: LD_VAR 0 1
105420: ARRAY
105421: PPUSH
105422: LD_INT 2
105424: PUSH
105425: LD_INT 30
105427: PUSH
105428: LD_INT 0
105430: PUSH
105431: EMPTY
105432: LIST
105433: LIST
105434: PUSH
105435: LD_INT 30
105437: PUSH
105438: LD_INT 1
105440: PUSH
105441: EMPTY
105442: LIST
105443: LIST
105444: PUSH
105445: LD_INT 30
105447: PUSH
105448: LD_INT 6
105450: PUSH
105451: EMPTY
105452: LIST
105453: LIST
105454: PUSH
105455: EMPTY
105456: LIST
105457: LIST
105458: LIST
105459: LIST
105460: PPUSH
105461: CALL_OW 72
105465: PPUSH
105466: LD_VAR 0 7
105470: PPUSH
105471: CALL_OW 74
105475: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
105476: LD_VAR 0 7
105480: PPUSH
105481: LD_VAR 0 8
105485: PPUSH
105486: CALL_OW 250
105490: PPUSH
105491: LD_INT 3
105493: PPUSH
105494: LD_INT 5
105496: PPUSH
105497: CALL_OW 272
105501: PPUSH
105502: LD_VAR 0 8
105506: PPUSH
105507: CALL_OW 251
105511: PPUSH
105512: LD_INT 3
105514: PPUSH
105515: LD_INT 5
105517: PPUSH
105518: CALL_OW 273
105522: PPUSH
105523: CALL_OW 111
// SetTag ( i , 0 ) ;
105527: LD_VAR 0 7
105531: PPUSH
105532: LD_INT 0
105534: PPUSH
105535: CALL_OW 109
// solds := solds diff i ;
105539: LD_ADDR_VAR 0 2
105543: PUSH
105544: LD_VAR 0 2
105548: PUSH
105549: LD_VAR 0 7
105553: DIFF
105554: ST_TO_ADDR
// continue ;
105555: GO 105342
// end ; end ;
105557: GO 105342
105559: POP
105560: POP
// until solds ;
105561: LD_VAR 0 2
105565: IFFALSE 105174
// MC_Reset ( base , 18 ) ;
105567: LD_VAR 0 1
105571: PPUSH
105572: LD_INT 18
105574: PPUSH
105575: CALL 59923 0 2
// end ;
105579: LD_VAR 0 4
105583: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , depot , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
105584: LD_INT 0
105586: PPUSH
105587: PPUSH
105588: PPUSH
105589: PPUSH
105590: PPUSH
105591: PPUSH
105592: PPUSH
105593: PPUSH
105594: PPUSH
105595: PPUSH
105596: PPUSH
105597: PPUSH
105598: PPUSH
105599: PPUSH
105600: PPUSH
105601: PPUSH
105602: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
105603: LD_ADDR_VAR 0 13
105607: PUSH
105608: LD_EXP 46
105612: PUSH
105613: LD_VAR 0 1
105617: ARRAY
105618: PPUSH
105619: LD_INT 25
105621: PUSH
105622: LD_INT 3
105624: PUSH
105625: EMPTY
105626: LIST
105627: LIST
105628: PPUSH
105629: CALL_OW 72
105633: ST_TO_ADDR
// if mc_remote_driver [ base ] then
105634: LD_EXP 86
105638: PUSH
105639: LD_VAR 0 1
105643: ARRAY
105644: IFFALSE 105668
// mechs := mechs diff mc_remote_driver [ base ] ;
105646: LD_ADDR_VAR 0 13
105650: PUSH
105651: LD_VAR 0 13
105655: PUSH
105656: LD_EXP 86
105660: PUSH
105661: LD_VAR 0 1
105665: ARRAY
105666: DIFF
105667: ST_TO_ADDR
// for i in mechs do
105668: LD_ADDR_VAR 0 5
105672: PUSH
105673: LD_VAR 0 13
105677: PUSH
105678: FOR_IN
105679: IFFALSE 105714
// if GetTag ( i ) > 0 then
105681: LD_VAR 0 5
105685: PPUSH
105686: CALL_OW 110
105690: PUSH
105691: LD_INT 0
105693: GREATER
105694: IFFALSE 105712
// mechs := mechs diff i ;
105696: LD_ADDR_VAR 0 13
105700: PUSH
105701: LD_VAR 0 13
105705: PUSH
105706: LD_VAR 0 5
105710: DIFF
105711: ST_TO_ADDR
105712: GO 105678
105714: POP
105715: POP
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
105716: LD_ADDR_VAR 0 9
105720: PUSH
105721: LD_EXP 46
105725: PUSH
105726: LD_VAR 0 1
105730: ARRAY
105731: PPUSH
105732: LD_INT 2
105734: PUSH
105735: LD_INT 25
105737: PUSH
105738: LD_INT 1
105740: PUSH
105741: EMPTY
105742: LIST
105743: LIST
105744: PUSH
105745: LD_INT 25
105747: PUSH
105748: LD_INT 5
105750: PUSH
105751: EMPTY
105752: LIST
105753: LIST
105754: PUSH
105755: LD_INT 25
105757: PUSH
105758: LD_INT 8
105760: PUSH
105761: EMPTY
105762: LIST
105763: LIST
105764: PUSH
105765: LD_INT 25
105767: PUSH
105768: LD_INT 9
105770: PUSH
105771: EMPTY
105772: LIST
105773: LIST
105774: PUSH
105775: EMPTY
105776: LIST
105777: LIST
105778: LIST
105779: LIST
105780: LIST
105781: PPUSH
105782: CALL_OW 72
105786: ST_TO_ADDR
// if not defenders and not solds then
105787: LD_VAR 0 2
105791: NOT
105792: PUSH
105793: LD_VAR 0 9
105797: NOT
105798: AND
105799: IFFALSE 105803
// exit ;
105801: GO 107429
// depot_under_attack := false ;
105803: LD_ADDR_VAR 0 17
105807: PUSH
105808: LD_INT 0
105810: ST_TO_ADDR
// sold_defenders := [ ] ;
105811: LD_ADDR_VAR 0 18
105815: PUSH
105816: EMPTY
105817: ST_TO_ADDR
// if mechs then
105818: LD_VAR 0 13
105822: IFFALSE 105951
// for i in defenders do
105824: LD_ADDR_VAR 0 5
105828: PUSH
105829: LD_VAR 0 2
105833: PUSH
105834: FOR_IN
105835: IFFALSE 105949
// begin SetTag ( i , 20 ) ;
105837: LD_VAR 0 5
105841: PPUSH
105842: LD_INT 20
105844: PPUSH
105845: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
105849: LD_VAR 0 5
105853: PPUSH
105854: CALL_OW 263
105858: PUSH
105859: LD_INT 1
105861: EQUAL
105862: PUSH
105863: LD_VAR 0 5
105867: PPUSH
105868: CALL_OW 311
105872: NOT
105873: AND
105874: PUSH
105875: LD_VAR 0 13
105879: AND
105880: IFFALSE 105947
// begin un := mechs [ 1 ] ;
105882: LD_ADDR_VAR 0 11
105886: PUSH
105887: LD_VAR 0 13
105891: PUSH
105892: LD_INT 1
105894: ARRAY
105895: ST_TO_ADDR
// ComExitBuilding ( un ) ;
105896: LD_VAR 0 11
105900: PPUSH
105901: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
105905: LD_VAR 0 11
105909: PPUSH
105910: LD_VAR 0 5
105914: PPUSH
105915: CALL_OW 180
// SetTag ( un , 19 ) ;
105919: LD_VAR 0 11
105923: PPUSH
105924: LD_INT 19
105926: PPUSH
105927: CALL_OW 109
// mechs := mechs diff un ;
105931: LD_ADDR_VAR 0 13
105935: PUSH
105936: LD_VAR 0 13
105940: PUSH
105941: LD_VAR 0 11
105945: DIFF
105946: ST_TO_ADDR
// end ; end ;
105947: GO 105834
105949: POP
105950: POP
// if solds then
105951: LD_VAR 0 9
105955: IFFALSE 106014
// for i in solds do
105957: LD_ADDR_VAR 0 5
105961: PUSH
105962: LD_VAR 0 9
105966: PUSH
105967: FOR_IN
105968: IFFALSE 106012
// if not GetTag ( i ) then
105970: LD_VAR 0 5
105974: PPUSH
105975: CALL_OW 110
105979: NOT
105980: IFFALSE 106010
// begin defenders := defenders union i ;
105982: LD_ADDR_VAR 0 2
105986: PUSH
105987: LD_VAR 0 2
105991: PUSH
105992: LD_VAR 0 5
105996: UNION
105997: ST_TO_ADDR
// SetTag ( i , 18 ) ;
105998: LD_VAR 0 5
106002: PPUSH
106003: LD_INT 18
106005: PPUSH
106006: CALL_OW 109
// end ;
106010: GO 105967
106012: POP
106013: POP
// repeat wait ( 0 0$1 ) ;
106014: LD_INT 35
106016: PPUSH
106017: CALL_OW 67
// enemy := mc_scan [ base ] ;
106021: LD_ADDR_VAR 0 3
106025: PUSH
106026: LD_EXP 69
106030: PUSH
106031: LD_VAR 0 1
106035: ARRAY
106036: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
106037: LD_EXP 46
106041: PUSH
106042: LD_VAR 0 1
106046: ARRAY
106047: NOT
106048: PUSH
106049: LD_EXP 46
106053: PUSH
106054: LD_VAR 0 1
106058: ARRAY
106059: PUSH
106060: EMPTY
106061: EQUAL
106062: OR
106063: IFFALSE 106100
// begin for i in defenders do
106065: LD_ADDR_VAR 0 5
106069: PUSH
106070: LD_VAR 0 2
106074: PUSH
106075: FOR_IN
106076: IFFALSE 106089
// ComStop ( i ) ;
106078: LD_VAR 0 5
106082: PPUSH
106083: CALL_OW 141
106087: GO 106075
106089: POP
106090: POP
// defenders := [ ] ;
106091: LD_ADDR_VAR 0 2
106095: PUSH
106096: EMPTY
106097: ST_TO_ADDR
// exit ;
106098: GO 107429
// end ; for i in defenders do
106100: LD_ADDR_VAR 0 5
106104: PUSH
106105: LD_VAR 0 2
106109: PUSH
106110: FOR_IN
106111: IFFALSE 106929
// begin e := NearestUnitToUnit ( enemy , i ) ;
106113: LD_ADDR_VAR 0 14
106117: PUSH
106118: LD_VAR 0 3
106122: PPUSH
106123: LD_VAR 0 5
106127: PPUSH
106128: CALL_OW 74
106132: ST_TO_ADDR
// depot := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
106133: LD_ADDR_VAR 0 8
106137: PUSH
106138: LD_EXP 46
106142: PUSH
106143: LD_VAR 0 1
106147: ARRAY
106148: PPUSH
106149: LD_INT 2
106151: PUSH
106152: LD_INT 30
106154: PUSH
106155: LD_INT 0
106157: PUSH
106158: EMPTY
106159: LIST
106160: LIST
106161: PUSH
106162: LD_INT 30
106164: PUSH
106165: LD_INT 1
106167: PUSH
106168: EMPTY
106169: LIST
106170: LIST
106171: PUSH
106172: EMPTY
106173: LIST
106174: LIST
106175: LIST
106176: PPUSH
106177: CALL_OW 72
106181: ST_TO_ADDR
// depot_under_attack := ( not depot or UnitFilter ( depot , [ f_not , [ f_lives , 600 ] ] ) ) ;
106182: LD_ADDR_VAR 0 17
106186: PUSH
106187: LD_VAR 0 8
106191: NOT
106192: PUSH
106193: LD_VAR 0 8
106197: PPUSH
106198: LD_INT 3
106200: PUSH
106201: LD_INT 24
106203: PUSH
106204: LD_INT 600
106206: PUSH
106207: EMPTY
106208: LIST
106209: LIST
106210: PUSH
106211: EMPTY
106212: LIST
106213: LIST
106214: PPUSH
106215: CALL_OW 72
106219: OR
106220: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
106221: LD_VAR 0 5
106225: PPUSH
106226: CALL_OW 247
106230: PUSH
106231: LD_INT 2
106233: DOUBLE
106234: EQUAL
106235: IFTRUE 106239
106237: GO 106635
106239: POP
// begin if GetLives ( i ) > 650 and ( GetDistUnits ( i , e ) < 40 or IsInArea ( e , mc_scan_area [ base ] ) ) then
106240: LD_VAR 0 5
106244: PPUSH
106245: CALL_OW 256
106249: PUSH
106250: LD_INT 650
106252: GREATER
106253: PUSH
106254: LD_VAR 0 5
106258: PPUSH
106259: LD_VAR 0 14
106263: PPUSH
106264: CALL_OW 296
106268: PUSH
106269: LD_INT 40
106271: LESS
106272: PUSH
106273: LD_VAR 0 14
106277: PPUSH
106278: LD_EXP 71
106282: PUSH
106283: LD_VAR 0 1
106287: ARRAY
106288: PPUSH
106289: CALL_OW 308
106293: OR
106294: AND
106295: IFFALSE 106417
// begin if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 30 and depot then
106297: LD_VAR 0 5
106301: PPUSH
106302: CALL_OW 262
106306: PUSH
106307: LD_INT 1
106309: EQUAL
106310: PUSH
106311: LD_VAR 0 5
106315: PPUSH
106316: CALL_OW 261
106320: PUSH
106321: LD_INT 30
106323: LESS
106324: AND
106325: PUSH
106326: LD_VAR 0 8
106330: AND
106331: IFFALSE 106401
// begin ComMoveUnit ( i , NearestUnitToUnit ( depot , i ) ) ;
106333: LD_VAR 0 5
106337: PPUSH
106338: LD_VAR 0 8
106342: PPUSH
106343: LD_VAR 0 5
106347: PPUSH
106348: CALL_OW 74
106352: PPUSH
106353: CALL_OW 112
// if GetDistUnits ( i , NearestUnitToUnit ( depot , i ) ) < 6 then
106357: LD_VAR 0 5
106361: PPUSH
106362: LD_VAR 0 8
106366: PPUSH
106367: LD_VAR 0 5
106371: PPUSH
106372: CALL_OW 74
106376: PPUSH
106377: CALL_OW 296
106381: PUSH
106382: LD_INT 6
106384: LESS
106385: IFFALSE 106399
// SetFuel ( i , 100 ) ;
106387: LD_VAR 0 5
106391: PPUSH
106392: LD_INT 100
106394: PPUSH
106395: CALL_OW 240
// end else
106399: GO 106415
// ComAttackUnit ( i , e ) ;
106401: LD_VAR 0 5
106405: PPUSH
106406: LD_VAR 0 14
106410: PPUSH
106411: CALL_OW 115
// end else
106415: GO 106518
// if ( ( not IsInArea ( e , mc_scan_area [ base ] ) and GetDistUnits ( i , e ) >= 40 ) or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
106417: LD_VAR 0 14
106421: PPUSH
106422: LD_EXP 71
106426: PUSH
106427: LD_VAR 0 1
106431: ARRAY
106432: PPUSH
106433: CALL_OW 308
106437: NOT
106438: PUSH
106439: LD_VAR 0 5
106443: PPUSH
106444: LD_VAR 0 14
106448: PPUSH
106449: CALL_OW 296
106453: PUSH
106454: LD_INT 40
106456: GREATEREQUAL
106457: AND
106458: PUSH
106459: LD_VAR 0 5
106463: PPUSH
106464: CALL_OW 256
106468: PUSH
106469: LD_INT 650
106471: LESSEQUAL
106472: OR
106473: PUSH
106474: LD_VAR 0 5
106478: PPUSH
106479: LD_EXP 70
106483: PUSH
106484: LD_VAR 0 1
106488: ARRAY
106489: PPUSH
106490: CALL_OW 308
106494: NOT
106495: AND
106496: IFFALSE 106518
// ComMoveToArea ( i , mc_parking [ base ] ) ;
106498: LD_VAR 0 5
106502: PPUSH
106503: LD_EXP 70
106507: PUSH
106508: LD_VAR 0 1
106512: ARRAY
106513: PPUSH
106514: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
106518: LD_VAR 0 5
106522: PPUSH
106523: CALL_OW 256
106527: PUSH
106528: LD_INT 998
106530: LESS
106531: PUSH
106532: LD_VAR 0 5
106536: PPUSH
106537: CALL_OW 263
106541: PUSH
106542: LD_INT 1
106544: EQUAL
106545: AND
106546: PUSH
106547: LD_VAR 0 5
106551: PPUSH
106552: CALL_OW 311
106556: AND
106557: PUSH
106558: LD_VAR 0 5
106562: PPUSH
106563: LD_EXP 70
106567: PUSH
106568: LD_VAR 0 1
106572: ARRAY
106573: PPUSH
106574: CALL_OW 308
106578: AND
106579: IFFALSE 106633
// begin mech := IsDrivenBy ( i ) ;
106581: LD_ADDR_VAR 0 10
106585: PUSH
106586: LD_VAR 0 5
106590: PPUSH
106591: CALL_OW 311
106595: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
106596: LD_VAR 0 10
106600: PPUSH
106601: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
106605: LD_VAR 0 10
106609: PPUSH
106610: LD_VAR 0 5
106614: PPUSH
106615: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
106619: LD_VAR 0 10
106623: PPUSH
106624: LD_VAR 0 5
106628: PPUSH
106629: CALL_OW 180
// end ; end ; unit_human :
106633: GO 106900
106635: LD_INT 1
106637: DOUBLE
106638: EQUAL
106639: IFTRUE 106643
106641: GO 106899
106643: POP
// begin b := IsInUnit ( i ) ;
106644: LD_ADDR_VAR 0 19
106648: PUSH
106649: LD_VAR 0 5
106653: PPUSH
106654: CALL_OW 310
106658: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
106659: LD_ADDR_VAR 0 20
106663: PUSH
106664: LD_VAR 0 19
106668: NOT
106669: PUSH
106670: LD_VAR 0 19
106674: PPUSH
106675: CALL_OW 266
106679: PUSH
106680: LD_INT 32
106682: PUSH
106683: LD_INT 31
106685: PUSH
106686: EMPTY
106687: LIST
106688: LIST
106689: IN
106690: OR
106691: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
106692: LD_VAR 0 17
106696: PUSH
106697: LD_VAR 0 2
106701: PPUSH
106702: LD_INT 21
106704: PUSH
106705: LD_INT 2
106707: PUSH
106708: EMPTY
106709: LIST
106710: LIST
106711: PPUSH
106712: CALL_OW 72
106716: PUSH
106717: LD_INT 1
106719: LESSEQUAL
106720: OR
106721: PUSH
106722: LD_VAR 0 20
106726: AND
106727: PUSH
106728: LD_VAR 0 5
106732: PUSH
106733: LD_VAR 0 18
106737: IN
106738: NOT
106739: AND
106740: IFFALSE 106833
// begin if b then
106742: LD_VAR 0 19
106746: IFFALSE 106795
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
106748: LD_VAR 0 19
106752: PPUSH
106753: LD_VAR 0 3
106757: PPUSH
106758: LD_VAR 0 19
106762: PPUSH
106763: CALL_OW 74
106767: PPUSH
106768: CALL_OW 296
106772: PUSH
106773: LD_INT 10
106775: LESS
106776: PUSH
106777: LD_VAR 0 19
106781: PPUSH
106782: CALL_OW 461
106786: PUSH
106787: LD_INT 7
106789: NONEQUAL
106790: AND
106791: IFFALSE 106795
// continue ;
106793: GO 106110
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
106795: LD_ADDR_VAR 0 18
106799: PUSH
106800: LD_VAR 0 18
106804: PPUSH
106805: LD_VAR 0 18
106809: PUSH
106810: LD_INT 1
106812: PLUS
106813: PPUSH
106814: LD_VAR 0 5
106818: PPUSH
106819: CALL_OW 1
106823: ST_TO_ADDR
// ComExitBuilding ( i ) ;
106824: LD_VAR 0 5
106828: PPUSH
106829: CALL_OW 122
// end ; if sold_defenders then
106833: LD_VAR 0 18
106837: IFFALSE 106897
// if i in sold_defenders then
106839: LD_VAR 0 5
106843: PUSH
106844: LD_VAR 0 18
106848: IN
106849: IFFALSE 106897
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
106851: LD_VAR 0 5
106855: PPUSH
106856: CALL_OW 314
106860: NOT
106861: PUSH
106862: LD_VAR 0 5
106866: PPUSH
106867: LD_VAR 0 14
106871: PPUSH
106872: CALL_OW 296
106876: PUSH
106877: LD_INT 30
106879: LESS
106880: AND
106881: IFFALSE 106897
// ComAttackUnit ( i , e ) ;
106883: LD_VAR 0 5
106887: PPUSH
106888: LD_VAR 0 14
106892: PPUSH
106893: CALL_OW 115
// end ; end ; end ;
106897: GO 106900
106899: POP
// if IsDead ( i ) then
106900: LD_VAR 0 5
106904: PPUSH
106905: CALL_OW 301
106909: IFFALSE 106927
// defenders := defenders diff i ;
106911: LD_ADDR_VAR 0 2
106915: PUSH
106916: LD_VAR 0 2
106920: PUSH
106921: LD_VAR 0 5
106925: DIFF
106926: ST_TO_ADDR
// end ;
106927: GO 106110
106929: POP
106930: POP
// until not enemy or not defenders or not mc_bases [ base ] ;
106931: LD_VAR 0 3
106935: NOT
106936: PUSH
106937: LD_VAR 0 2
106941: NOT
106942: OR
106943: PUSH
106944: LD_EXP 46
106948: PUSH
106949: LD_VAR 0 1
106953: ARRAY
106954: NOT
106955: OR
106956: IFFALSE 106014
// MC_Reset ( base , 18 ) ;
106958: LD_VAR 0 1
106962: PPUSH
106963: LD_INT 18
106965: PPUSH
106966: CALL 59923 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
106970: LD_ADDR_VAR 0 2
106974: PUSH
106975: LD_VAR 0 2
106979: PUSH
106980: LD_VAR 0 2
106984: PPUSH
106985: LD_INT 2
106987: PUSH
106988: LD_INT 25
106990: PUSH
106991: LD_INT 1
106993: PUSH
106994: EMPTY
106995: LIST
106996: LIST
106997: PUSH
106998: LD_INT 25
107000: PUSH
107001: LD_INT 5
107003: PUSH
107004: EMPTY
107005: LIST
107006: LIST
107007: PUSH
107008: LD_INT 25
107010: PUSH
107011: LD_INT 8
107013: PUSH
107014: EMPTY
107015: LIST
107016: LIST
107017: PUSH
107018: LD_INT 25
107020: PUSH
107021: LD_INT 9
107023: PUSH
107024: EMPTY
107025: LIST
107026: LIST
107027: PUSH
107028: EMPTY
107029: LIST
107030: LIST
107031: LIST
107032: LIST
107033: LIST
107034: PPUSH
107035: CALL_OW 72
107039: DIFF
107040: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
107041: LD_VAR 0 3
107045: NOT
107046: PUSH
107047: LD_VAR 0 2
107051: PPUSH
107052: LD_INT 21
107054: PUSH
107055: LD_INT 2
107057: PUSH
107058: EMPTY
107059: LIST
107060: LIST
107061: PPUSH
107062: CALL_OW 72
107066: AND
107067: IFFALSE 107405
// begin tmp := FilterByTag ( defenders , 19 ) ;
107069: LD_ADDR_VAR 0 12
107073: PUSH
107074: LD_VAR 0 2
107078: PPUSH
107079: LD_INT 19
107081: PPUSH
107082: CALL 52855 0 2
107086: ST_TO_ADDR
// if tmp then
107087: LD_VAR 0 12
107091: IFFALSE 107161
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
107093: LD_ADDR_VAR 0 12
107097: PUSH
107098: LD_VAR 0 12
107102: PPUSH
107103: LD_INT 25
107105: PUSH
107106: LD_INT 3
107108: PUSH
107109: EMPTY
107110: LIST
107111: LIST
107112: PPUSH
107113: CALL_OW 72
107117: ST_TO_ADDR
// if tmp then
107118: LD_VAR 0 12
107122: IFFALSE 107161
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
107124: LD_ADDR_EXP 58
107128: PUSH
107129: LD_EXP 58
107133: PPUSH
107134: LD_VAR 0 1
107138: PPUSH
107139: LD_EXP 58
107143: PUSH
107144: LD_VAR 0 1
107148: ARRAY
107149: PUSH
107150: LD_VAR 0 12
107154: UNION
107155: PPUSH
107156: CALL_OW 1
107160: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
107161: LD_VAR 0 1
107165: PPUSH
107166: LD_INT 19
107168: PPUSH
107169: CALL 59923 0 2
// repeat wait ( 0 0$1 ) ;
107173: LD_INT 35
107175: PPUSH
107176: CALL_OW 67
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
107180: LD_EXP 46
107184: PUSH
107185: LD_VAR 0 1
107189: ARRAY
107190: NOT
107191: PUSH
107192: LD_EXP 46
107196: PUSH
107197: LD_VAR 0 1
107201: ARRAY
107202: PUSH
107203: EMPTY
107204: EQUAL
107205: OR
107206: IFFALSE 107243
// begin for i in defenders do
107208: LD_ADDR_VAR 0 5
107212: PUSH
107213: LD_VAR 0 2
107217: PUSH
107218: FOR_IN
107219: IFFALSE 107232
// ComStop ( i ) ;
107221: LD_VAR 0 5
107225: PPUSH
107226: CALL_OW 141
107230: GO 107218
107232: POP
107233: POP
// defenders := [ ] ;
107234: LD_ADDR_VAR 0 2
107238: PUSH
107239: EMPTY
107240: ST_TO_ADDR
// exit ;
107241: GO 107429
// end ; for i in defenders do
107243: LD_ADDR_VAR 0 5
107247: PUSH
107248: LD_VAR 0 2
107252: PUSH
107253: FOR_IN
107254: IFFALSE 107343
// begin if not IsInArea ( i , mc_parking [ base ] ) then
107256: LD_VAR 0 5
107260: PPUSH
107261: LD_EXP 70
107265: PUSH
107266: LD_VAR 0 1
107270: ARRAY
107271: PPUSH
107272: CALL_OW 308
107276: NOT
107277: IFFALSE 107301
// ComMoveToArea ( i , mc_parking [ base ] ) else
107279: LD_VAR 0 5
107283: PPUSH
107284: LD_EXP 70
107288: PUSH
107289: LD_VAR 0 1
107293: ARRAY
107294: PPUSH
107295: CALL_OW 113
107299: GO 107341
// if GetControl ( i ) = control_manual then
107301: LD_VAR 0 5
107305: PPUSH
107306: CALL_OW 263
107310: PUSH
107311: LD_INT 1
107313: EQUAL
107314: IFFALSE 107341
// if IsDrivenBy ( i ) then
107316: LD_VAR 0 5
107320: PPUSH
107321: CALL_OW 311
107325: IFFALSE 107341
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
107327: LD_VAR 0 5
107331: PPUSH
107332: CALL_OW 311
107336: PPUSH
107337: CALL_OW 121
// end ;
107341: GO 107253
107343: POP
107344: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] or not mc_bases [ base ] ;
107345: LD_VAR 0 2
107349: PPUSH
107350: LD_INT 95
107352: PUSH
107353: LD_EXP 70
107357: PUSH
107358: LD_VAR 0 1
107362: ARRAY
107363: PUSH
107364: EMPTY
107365: LIST
107366: LIST
107367: PPUSH
107368: CALL_OW 72
107372: PUSH
107373: LD_VAR 0 2
107377: EQUAL
107378: PUSH
107379: LD_EXP 69
107383: PUSH
107384: LD_VAR 0 1
107388: ARRAY
107389: OR
107390: PUSH
107391: LD_EXP 46
107395: PUSH
107396: LD_VAR 0 1
107400: ARRAY
107401: NOT
107402: OR
107403: IFFALSE 107173
// end ; MC_Reset ( base , 19 ) ;
107405: LD_VAR 0 1
107409: PPUSH
107410: LD_INT 19
107412: PPUSH
107413: CALL 59923 0 2
// MC_Reset ( base , 20 ) ;
107417: LD_VAR 0 1
107421: PPUSH
107422: LD_INT 20
107424: PPUSH
107425: CALL 59923 0 2
// end ;
107429: LD_VAR 0 4
107433: RET
