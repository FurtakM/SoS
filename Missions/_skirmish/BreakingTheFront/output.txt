// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// InitSettings ;
  11: CALL 51 0 0
// if debug then
  15: LD_EXP 1
  19: IFFALSE 38
// begin PlaceSeeing ( 1 , 1 , 1 , - 372963 ) ;
  21: LD_INT 1
  23: PPUSH
  24: LD_INT 1
  26: PPUSH
  27: LD_INT 1
  29: PPUSH
  30: LD_INT 372963
  32: NEG
  33: PPUSH
  34: CALL_OW 330
// end ; SetTechnologies ;
  38: CALL 602 0 0
// SetDiplomacy ;
  42: CALL 814 0 0
// PrepareGame ;
  46: CALL 896 0 0
// end ;
  50: END
// export debug , GameType , game , disableGlobalTimer ; export mc_amer , mc_leg , mc_rus_1 , mc_rus_2 ; export playerCommander , playerForces , allyCommander , Powell , Farmer , ruOutpost , ruEscape , staticMines , baseCaptured , legDestCounter , cratesSpawns , legOfferAccepted , legChangeSide , allyDestCounter , sibBombAllowed , reinforceAllowed , commander , cratesSpawn , outpostEscape , dialogueMineDetected ; end_of_file export function InitSettings ; begin
  51: LD_INT 0
  53: PPUSH
// debug := 0 ;
  54: LD_ADDR_EXP 1
  58: PUSH
  59: LD_INT 0
  61: ST_TO_ADDR
// GameType := 1 ;
  62: LD_ADDR_EXP 2
  66: PUSH
  67: LD_INT 1
  69: ST_TO_ADDR
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  70: LD_ADDR_OWVAR 67
  74: PUSH
  75: LD_INT 0
  77: PPUSH
  78: CALL_OW 426
  82: ST_TO_ADDR
// sibBombAllowed := GetMultiPlayerSetting ( 1 ) - 1 ;
  83: LD_ADDR_EXP 23
  87: PUSH
  88: LD_INT 1
  90: PPUSH
  91: CALL_OW 426
  95: PUSH
  96: LD_INT 1
  98: MINUS
  99: ST_TO_ADDR
// reinforceAllowed := GetMultiPlayerSetting ( 2 ) - 1 ;
 100: LD_ADDR_EXP 24
 104: PUSH
 105: LD_INT 2
 107: PPUSH
 108: CALL_OW 426
 112: PUSH
 113: LD_INT 1
 115: MINUS
 116: ST_TO_ADDR
// cratesSpawn := GetMultiPlayerSetting ( 3 ) ;
 117: LD_ADDR_EXP 26
 121: PUSH
 122: LD_INT 3
 124: PPUSH
 125: CALL_OW 426
 129: ST_TO_ADDR
// commander := GetMultiPlayerSetting ( 4 ) ;
 130: LD_ADDR_EXP 25
 134: PUSH
 135: LD_INT 4
 137: PPUSH
 138: CALL_OW 426
 142: ST_TO_ADDR
// if not commander then
 143: LD_EXP 25
 147: NOT
 148: IFFALSE 158
// commander := 3 ;
 150: LD_ADDR_EXP 25
 154: PUSH
 155: LD_INT 3
 157: ST_TO_ADDR
// if not debug then
 158: LD_EXP 1
 162: NOT
 163: IFFALSE 167
// exit ;
 165: GO 224
// display_strings := [ Difficulty:  & Difficulty , sibBomb:  & sibBombAllowed , reinforceAllowed:  & reinforceAllowed , cratesSpawn:  & cratesSpawn , commander:  & commander ] ;
 167: LD_ADDR_OWVAR 47
 171: PUSH
 172: LD_STRING Difficulty: 
 174: PUSH
 175: LD_OWVAR 67
 179: STR
 180: PUSH
 181: LD_STRING sibBomb: 
 183: PUSH
 184: LD_EXP 23
 188: STR
 189: PUSH
 190: LD_STRING reinforceAllowed: 
 192: PUSH
 193: LD_EXP 24
 197: STR
 198: PUSH
 199: LD_STRING cratesSpawn: 
 201: PUSH
 202: LD_EXP 26
 206: STR
 207: PUSH
 208: LD_STRING commander: 
 210: PUSH
 211: LD_EXP 25
 215: STR
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: LIST
 223: ST_TO_ADDR
// end ;
 224: LD_VAR 0 1
 228: RET
// every 0 0$1 trigger game and GameType = 1 and not disableGlobalTimer do
 229: LD_EXP 3
 233: PUSH
 234: LD_EXP 2
 238: PUSH
 239: LD_INT 1
 241: EQUAL
 242: AND
 243: PUSH
 244: LD_EXP 4
 248: NOT
 249: AND
 250: IFFALSE 273
 252: GO 254
 254: DISABLE
// begin enable ;
 255: ENABLE
// display_strings := [ #SkrTime , tick ] ;
 256: LD_ADDR_OWVAR 47
 260: PUSH
 261: LD_STRING #SkrTime
 263: PUSH
 264: LD_OWVAR 1
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: ST_TO_ADDR
// end ;
 273: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 274: LD_EXP 19
 278: PUSH
 279: LD_EXP 3
 283: AND
 284: PUSH
 285: LD_EXP 2
 289: PUSH
 290: LD_INT 1
 292: EQUAL
 293: AND
 294: IFFALSE 355
 296: GO 298
 298: DISABLE
// Crates ( cratesSpawns [ 1 ] [ 1 ] , cratesSpawns [ 1 ] [ 2 ] , cratesSpawns [ 1 ] [ 3 ] , cratesSpawns [ 1 ] [ 4 ] ) ;
 299: LD_EXP 19
 303: PUSH
 304: LD_INT 1
 306: ARRAY
 307: PUSH
 308: LD_INT 1
 310: ARRAY
 311: PPUSH
 312: LD_EXP 19
 316: PUSH
 317: LD_INT 1
 319: ARRAY
 320: PUSH
 321: LD_INT 2
 323: ARRAY
 324: PPUSH
 325: LD_EXP 19
 329: PUSH
 330: LD_INT 1
 332: ARRAY
 333: PUSH
 334: LD_INT 3
 336: ARRAY
 337: PPUSH
 338: LD_EXP 19
 342: PUSH
 343: LD_INT 1
 345: ARRAY
 346: PUSH
 347: LD_INT 4
 349: ARRAY
 350: PPUSH
 351: CALL 61430 0 4
 355: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 356: LD_EXP 19
 360: PUSH
 361: LD_EXP 3
 365: AND
 366: PUSH
 367: LD_EXP 2
 371: PUSH
 372: LD_INT 1
 374: EQUAL
 375: AND
 376: IFFALSE 437
 378: GO 380
 380: DISABLE
// Crates ( cratesSpawns [ 2 ] [ 1 ] , cratesSpawns [ 2 ] [ 2 ] , cratesSpawns [ 2 ] [ 3 ] , cratesSpawns [ 2 ] [ 4 ] ) ;
 381: LD_EXP 19
 385: PUSH
 386: LD_INT 2
 388: ARRAY
 389: PUSH
 390: LD_INT 1
 392: ARRAY
 393: PPUSH
 394: LD_EXP 19
 398: PUSH
 399: LD_INT 2
 401: ARRAY
 402: PUSH
 403: LD_INT 2
 405: ARRAY
 406: PPUSH
 407: LD_EXP 19
 411: PUSH
 412: LD_INT 2
 414: ARRAY
 415: PUSH
 416: LD_INT 3
 418: ARRAY
 419: PPUSH
 420: LD_EXP 19
 424: PUSH
 425: LD_INT 2
 427: ARRAY
 428: PUSH
 429: LD_INT 4
 431: ARRAY
 432: PPUSH
 433: CALL 61430 0 4
 437: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 438: LD_EXP 19
 442: PUSH
 443: LD_EXP 3
 447: AND
 448: PUSH
 449: LD_EXP 2
 453: PUSH
 454: LD_INT 1
 456: EQUAL
 457: AND
 458: IFFALSE 519
 460: GO 462
 462: DISABLE
// Crates ( cratesSpawns [ 3 ] [ 1 ] , cratesSpawns [ 3 ] [ 2 ] , cratesSpawns [ 3 ] [ 3 ] , cratesSpawns [ 3 ] [ 4 ] ) ;
 463: LD_EXP 19
 467: PUSH
 468: LD_INT 3
 470: ARRAY
 471: PUSH
 472: LD_INT 1
 474: ARRAY
 475: PPUSH
 476: LD_EXP 19
 480: PUSH
 481: LD_INT 3
 483: ARRAY
 484: PUSH
 485: LD_INT 2
 487: ARRAY
 488: PPUSH
 489: LD_EXP 19
 493: PUSH
 494: LD_INT 3
 496: ARRAY
 497: PUSH
 498: LD_INT 3
 500: ARRAY
 501: PPUSH
 502: LD_EXP 19
 506: PUSH
 507: LD_INT 3
 509: ARRAY
 510: PUSH
 511: LD_INT 4
 513: ARRAY
 514: PPUSH
 515: CALL 61430 0 4
 519: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 520: LD_EXP 19
 524: PUSH
 525: LD_EXP 3
 529: AND
 530: PUSH
 531: LD_EXP 2
 535: PUSH
 536: LD_INT 1
 538: EQUAL
 539: AND
 540: IFFALSE 601
 542: GO 544
 544: DISABLE
// Crates ( cratesSpawns [ 4 ] [ 1 ] , cratesSpawns [ 4 ] [ 2 ] , cratesSpawns [ 4 ] [ 3 ] , cratesSpawns [ 4 ] [ 4 ] ) ;
 545: LD_EXP 19
 549: PUSH
 550: LD_INT 4
 552: ARRAY
 553: PUSH
 554: LD_INT 1
 556: ARRAY
 557: PPUSH
 558: LD_EXP 19
 562: PUSH
 563: LD_INT 4
 565: ARRAY
 566: PUSH
 567: LD_INT 2
 569: ARRAY
 570: PPUSH
 571: LD_EXP 19
 575: PUSH
 576: LD_INT 4
 578: ARRAY
 579: PUSH
 580: LD_INT 3
 582: ARRAY
 583: PPUSH
 584: LD_EXP 19
 588: PUSH
 589: LD_INT 4
 591: ARRAY
 592: PUSH
 593: LD_INT 4
 595: ARRAY
 596: PPUSH
 597: CALL 61430 0 4
 601: END
// export function SetTechnologies ; var i , j , ban_techs , res_techs ; begin
 602: LD_INT 0
 604: PPUSH
 605: PPUSH
 606: PPUSH
 607: PPUSH
 608: PPUSH
// if GameType = 1 then
 609: LD_EXP 2
 613: PUSH
 614: LD_INT 1
 616: EQUAL
 617: IFFALSE 686
// begin ban_techs := [ ] ;
 619: LD_ADDR_VAR 0 4
 623: PUSH
 624: EMPTY
 625: ST_TO_ADDR
// if sibBombAllowed < 2 then
 626: LD_EXP 23
 630: PUSH
 631: LD_INT 2
 633: LESS
 634: IFFALSE 647
// ban_techs := [ tech_sibFiss ] ;
 636: LD_ADDR_VAR 0 4
 640: PUSH
 641: LD_INT 25
 643: PUSH
 644: EMPTY
 645: LIST
 646: ST_TO_ADDR
// res_techs := [ tech_oilPow , tech_oilEng , tech_tech1 , tech_tech2 , tech_tech3 , tech_gun , tech_gatling , tech_rocket ] ;
 647: LD_ADDR_VAR 0 5
 651: PUSH
 652: LD_INT 46
 654: PUSH
 655: LD_INT 47
 657: PUSH
 658: LD_INT 48
 660: PUSH
 661: LD_INT 49
 663: PUSH
 664: LD_INT 50
 666: PUSH
 667: LD_INT 39
 669: PUSH
 670: LD_INT 69
 672: PUSH
 673: LD_INT 40
 675: PUSH
 676: EMPTY
 677: LIST
 678: LIST
 679: LIST
 680: LIST
 681: LIST
 682: LIST
 683: LIST
 684: LIST
 685: ST_TO_ADDR
// end ; for i = 1 to 8 do
 686: LD_ADDR_VAR 0 2
 690: PUSH
 691: DOUBLE
 692: LD_INT 1
 694: DEC
 695: ST_TO_ADDR
 696: LD_INT 8
 698: PUSH
 699: FOR_TO
 700: IFFALSE 784
// begin if res_techs then
 702: LD_VAR 0 5
 706: IFFALSE 742
// for j in res_techs do
 708: LD_ADDR_VAR 0 3
 712: PUSH
 713: LD_VAR 0 5
 717: PUSH
 718: FOR_IN
 719: IFFALSE 740
// SetTech ( j , i , state_researched ) ;
 721: LD_VAR 0 3
 725: PPUSH
 726: LD_VAR 0 2
 730: PPUSH
 731: LD_INT 2
 733: PPUSH
 734: CALL_OW 322
 738: GO 718
 740: POP
 741: POP
// if ban_techs then
 742: LD_VAR 0 4
 746: IFFALSE 782
// for j in ban_techs do
 748: LD_ADDR_VAR 0 3
 752: PUSH
 753: LD_VAR 0 4
 757: PUSH
 758: FOR_IN
 759: IFFALSE 780
// SetTech ( j , i , state_disabled ) ;
 761: LD_VAR 0 3
 765: PPUSH
 766: LD_VAR 0 2
 770: PPUSH
 771: LD_INT 0
 773: PPUSH
 774: CALL_OW 322
 778: GO 758
 780: POP
 781: POP
// end ;
 782: GO 699
 784: POP
 785: POP
// if sibBombAllowed = 1 then
 786: LD_EXP 23
 790: PUSH
 791: LD_INT 1
 793: EQUAL
 794: IFFALSE 809
// SetTech ( tech_sibFiss , 3 , state_enabled ) ;
 796: LD_INT 25
 798: PPUSH
 799: LD_INT 3
 801: PPUSH
 802: LD_INT 1
 804: PPUSH
 805: CALL_OW 322
// end ;
 809: LD_VAR 0 1
 813: RET
// export function SetDiplomacy ; begin
 814: LD_INT 0
 816: PPUSH
// if GameType = 1 then
 817: LD_EXP 2
 821: PUSH
 822: LD_INT 1
 824: EQUAL
 825: IFFALSE 891
// begin SetAttitude ( 1 , 4 , att_friend , true ) ;
 827: LD_INT 1
 829: PPUSH
 830: LD_INT 4
 832: PPUSH
 833: LD_INT 1
 835: PPUSH
 836: LD_INT 1
 838: PPUSH
 839: CALL_OW 80
// SetAttitude ( 3 , 6 , att_friend , true ) ;
 843: LD_INT 3
 845: PPUSH
 846: LD_INT 6
 848: PPUSH
 849: LD_INT 1
 851: PPUSH
 852: LD_INT 1
 854: PPUSH
 855: CALL_OW 80
// SetAttitude ( 3 , 8 , att_friend , true ) ;
 859: LD_INT 3
 861: PPUSH
 862: LD_INT 8
 864: PPUSH
 865: LD_INT 1
 867: PPUSH
 868: LD_INT 1
 870: PPUSH
 871: CALL_OW 80
// SetAttitude ( 6 , 8 , att_friend , true ) ;
 875: LD_INT 6
 877: PPUSH
 878: LD_INT 8
 880: PPUSH
 881: LD_INT 1
 883: PPUSH
 884: LD_INT 1
 886: PPUSH
 887: CALL_OW 80
// end ; end ;
 891: LD_VAR 0 1
 895: RET
// export function PrepareGame ; var i , tmp , sources ; begin
 896: LD_INT 0
 898: PPUSH
 899: PPUSH
 900: PPUSH
 901: PPUSH
// if GameType = 1 then
 902: LD_EXP 2
 906: PUSH
 907: LD_INT 1
 909: EQUAL
 910: IFFALSE 1402
// begin game := false ;
 912: LD_ADDR_EXP 3
 916: PUSH
 917: LD_INT 0
 919: ST_TO_ADDR
// your_side := 1 ;
 920: LD_ADDR_OWVAR 2
 924: PUSH
 925: LD_INT 1
 927: ST_TO_ADDR
// mc_amer := 1 ;
 928: LD_ADDR_EXP 5
 932: PUSH
 933: LD_INT 1
 935: ST_TO_ADDR
// mc_leg := 2 ;
 936: LD_ADDR_EXP 6
 940: PUSH
 941: LD_INT 2
 943: ST_TO_ADDR
// mc_rus_1 := 3 ;
 944: LD_ADDR_EXP 7
 948: PUSH
 949: LD_INT 3
 951: ST_TO_ADDR
// mc_rus_2 := 4 ;
 952: LD_ADDR_EXP 8
 956: PUSH
 957: LD_INT 4
 959: ST_TO_ADDR
// cratesSpawns := [ [ amerCrates , 1 , 0 , [ 200 , 250 , 300 ] [ cratesSpawn ] ] , [ rusCrates , 8 , 50 , 500 ] , [ legCrates , 5 , 50 , 300 ] , [ playerCrates , [ 4 , 5 , 6 ] [ cratesSpawn ] , 30 , [ 300 , 450 , 500 ] [ cratesSpawn ] ] ] ;
 960: LD_ADDR_EXP 19
 964: PUSH
 965: LD_INT 5
 967: PUSH
 968: LD_INT 1
 970: PUSH
 971: LD_INT 0
 973: PUSH
 974: LD_INT 200
 976: PUSH
 977: LD_INT 250
 979: PUSH
 980: LD_INT 300
 982: PUSH
 983: EMPTY
 984: LIST
 985: LIST
 986: LIST
 987: PUSH
 988: LD_EXP 26
 992: ARRAY
 993: PUSH
 994: EMPTY
 995: LIST
 996: LIST
 997: LIST
 998: LIST
 999: PUSH
1000: LD_INT 13
1002: PUSH
1003: LD_INT 8
1005: PUSH
1006: LD_INT 50
1008: PUSH
1009: LD_INT 500
1011: PUSH
1012: EMPTY
1013: LIST
1014: LIST
1015: LIST
1016: LIST
1017: PUSH
1018: LD_INT 17
1020: PUSH
1021: LD_INT 5
1023: PUSH
1024: LD_INT 50
1026: PUSH
1027: LD_INT 300
1029: PUSH
1030: EMPTY
1031: LIST
1032: LIST
1033: LIST
1034: LIST
1035: PUSH
1036: LD_INT 18
1038: PUSH
1039: LD_INT 4
1041: PUSH
1042: LD_INT 5
1044: PUSH
1045: LD_INT 6
1047: PUSH
1048: EMPTY
1049: LIST
1050: LIST
1051: LIST
1052: PUSH
1053: LD_EXP 26
1057: ARRAY
1058: PUSH
1059: LD_INT 30
1061: PUSH
1062: LD_INT 300
1064: PUSH
1065: LD_INT 450
1067: PUSH
1068: LD_INT 500
1070: PUSH
1071: EMPTY
1072: LIST
1073: LIST
1074: LIST
1075: PUSH
1076: LD_EXP 26
1080: ARRAY
1081: PUSH
1082: EMPTY
1083: LIST
1084: LIST
1085: LIST
1086: LIST
1087: PUSH
1088: EMPTY
1089: LIST
1090: LIST
1091: LIST
1092: LIST
1093: ST_TO_ADDR
// sources := [ [ 190 , 193 , mat_siberit ] , [ 182 , 117 , mat_siberit ] , [ 43 , 2 , mat_siberit ] , [ 114 , 152 , mat_oil ] , [ 85 , 38 , mat_oil ] ] ;
1094: LD_ADDR_VAR 0 4
1098: PUSH
1099: LD_INT 190
1101: PUSH
1102: LD_INT 193
1104: PUSH
1105: LD_INT 3
1107: PUSH
1108: EMPTY
1109: LIST
1110: LIST
1111: LIST
1112: PUSH
1113: LD_INT 182
1115: PUSH
1116: LD_INT 117
1118: PUSH
1119: LD_INT 3
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: LIST
1126: PUSH
1127: LD_INT 43
1129: PUSH
1130: LD_INT 2
1132: PUSH
1133: LD_INT 3
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: LIST
1140: PUSH
1141: LD_INT 114
1143: PUSH
1144: LD_INT 152
1146: PUSH
1147: LD_INT 2
1149: PUSH
1150: EMPTY
1151: LIST
1152: LIST
1153: LIST
1154: PUSH
1155: LD_INT 85
1157: PUSH
1158: LD_INT 38
1160: PUSH
1161: LD_INT 2
1163: PUSH
1164: EMPTY
1165: LIST
1166: LIST
1167: LIST
1168: PUSH
1169: EMPTY
1170: LIST
1171: LIST
1172: LIST
1173: LIST
1174: LIST
1175: ST_TO_ADDR
// for i in sources do
1176: LD_ADDR_VAR 0 2
1180: PUSH
1181: LD_VAR 0 4
1185: PUSH
1186: FOR_IN
1187: IFFALSE 1222
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
1189: LD_VAR 0 2
1193: PUSH
1194: LD_INT 1
1196: ARRAY
1197: PPUSH
1198: LD_VAR 0 2
1202: PUSH
1203: LD_INT 2
1205: ARRAY
1206: PPUSH
1207: LD_VAR 0 2
1211: PUSH
1212: LD_INT 3
1214: ARRAY
1215: PPUSH
1216: CALL_OW 62
1220: GO 1186
1222: POP
1223: POP
// disableGlobalTimer := false ;
1224: LD_ADDR_EXP 4
1228: PUSH
1229: LD_INT 0
1231: ST_TO_ADDR
// ruEscape := [ 0 , [ 5 , 6 , 7 ] [ Difficulty ] ] ;
1232: LD_ADDR_EXP 15
1236: PUSH
1237: LD_INT 0
1239: PUSH
1240: LD_INT 5
1242: PUSH
1243: LD_INT 6
1245: PUSH
1246: LD_INT 7
1248: PUSH
1249: EMPTY
1250: LIST
1251: LIST
1252: LIST
1253: PUSH
1254: LD_OWVAR 67
1258: ARRAY
1259: PUSH
1260: EMPTY
1261: LIST
1262: LIST
1263: ST_TO_ADDR
// ruOutpost := [ ] ;
1264: LD_ADDR_EXP 14
1268: PUSH
1269: EMPTY
1270: ST_TO_ADDR
// staticMines := [ ] ;
1271: LD_ADDR_EXP 16
1275: PUSH
1276: EMPTY
1277: ST_TO_ADDR
// baseCaptured := false ;
1278: LD_ADDR_EXP 17
1282: PUSH
1283: LD_INT 0
1285: ST_TO_ADDR
// legDestCounter := 0 ;
1286: LD_ADDR_EXP 18
1290: PUSH
1291: LD_INT 0
1293: ST_TO_ADDR
// legOfferAccepted := false ;
1294: LD_ADDR_EXP 20
1298: PUSH
1299: LD_INT 0
1301: ST_TO_ADDR
// legChangeSide := false ;
1302: LD_ADDR_EXP 21
1306: PUSH
1307: LD_INT 0
1309: ST_TO_ADDR
// allyDestCounter := 0 ;
1310: LD_ADDR_EXP 22
1314: PUSH
1315: LD_INT 0
1317: ST_TO_ADDR
// outpostEscape := false ;
1318: LD_ADDR_EXP 27
1322: PUSH
1323: LD_INT 0
1325: ST_TO_ADDR
// dialogueMineDetected := false ;
1326: LD_ADDR_EXP 28
1330: PUSH
1331: LD_INT 0
1333: ST_TO_ADDR
// PrepareAmericans ;
1334: CALL 7218 0 0
// PrepareLegion ;
1338: CALL 5483 0 0
// PrepareRussians ;
1342: CALL 2449 0 0
// playerForces := PreparePlayer ;
1346: LD_ADDR_EXP 10
1350: PUSH
1351: CALL 8461 0 0
1355: ST_TO_ADDR
// AnimateTrees ( true ) ;
1356: LD_INT 1
1358: PPUSH
1359: CALL_OW 573
// PrepareNature ( 4 , 3 , 8 , 5 , 3 , 1 , 8 , natureGroundArea , natureWaterArea ) ;
1363: LD_INT 4
1365: PPUSH
1366: LD_INT 3
1368: PPUSH
1369: LD_INT 8
1371: PPUSH
1372: LD_INT 5
1374: PPUSH
1375: LD_INT 3
1377: PPUSH
1378: LD_INT 1
1380: PPUSH
1381: LD_INT 8
1383: PPUSH
1384: LD_INT 2
1386: PPUSH
1387: LD_INT 1
1389: PPUSH
1390: CALL 54178 0 9
// MC_Start ;
1394: CALL 64567 0 0
// Action ;
1398: CALL 10657 0 0
// end ; end ;
1402: LD_VAR 0 1
1406: RET
// export function CustomInitMacro ; begin
1407: LD_INT 0
1409: PPUSH
// if GameType <> 1 then
1410: LD_EXP 2
1414: PUSH
1415: LD_INT 1
1417: NONEQUAL
1418: IFFALSE 1422
// exit ;
1420: GO 2444
// MC_SetScanArea ( mc_amer , amerBase ) ;
1422: LD_EXP 5
1426: PPUSH
1427: LD_INT 3
1429: PPUSH
1430: CALL 87527 0 2
// MC_SetParkingArea ( mc_amer , amerParking ) ;
1434: LD_EXP 5
1438: PPUSH
1439: LD_INT 4
1441: PPUSH
1442: CALL 87471 0 2
// MC_SetAllowedTurretWeapons ( mc_amer , [ us_radar , us_heavy_gun , us_rocket_launcher , us_laser , us_double_laser ] ) ;
1446: LD_EXP 5
1450: PPUSH
1451: LD_INT 11
1453: PUSH
1454: LD_INT 6
1456: PUSH
1457: LD_INT 7
1459: PUSH
1460: LD_INT 9
1462: PUSH
1463: LD_INT 10
1465: PUSH
1466: EMPTY
1467: LIST
1468: LIST
1469: LIST
1470: LIST
1471: LIST
1472: PPUSH
1473: CALL 87359 0 2
// MC_SetCratesArea ( mc_amer , amerCrates ) ;
1477: LD_EXP 5
1481: PPUSH
1482: LD_INT 5
1484: PPUSH
1485: CALL 87041 0 2
// MC_SetTame ( mc_amer , amerBase ) ;
1489: LD_EXP 5
1493: PPUSH
1494: LD_INT 3
1496: PPUSH
1497: CALL 86772 0 2
// MC_SetDefenderLimit ( mc_amer , 4 ) ;
1501: LD_EXP 5
1505: PPUSH
1506: LD_INT 4
1508: PPUSH
1509: CALL 86391 0 2
// MC_SetProduceList ( mc_amer , [ [ us_medium_tracked , engine_combustion , control_remote , us_double_gun ] , [ us_medium_tracked , engine_solar , control_remote , us_laser ] , [ us_heavy_tracked , engine_combustion , control_remote , us_rocket_launcher ] , [ us_heavy_tracked , engine_combustion , control_remote , us_heavy_gun ] , ] ) ;
1513: LD_EXP 5
1517: PPUSH
1518: LD_INT 3
1520: PUSH
1521: LD_INT 1
1523: PUSH
1524: LD_INT 2
1526: PUSH
1527: LD_INT 5
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: LIST
1534: LIST
1535: PUSH
1536: LD_INT 3
1538: PUSH
1539: LD_INT 2
1541: PUSH
1542: LD_INT 2
1544: PUSH
1545: LD_INT 9
1547: PUSH
1548: EMPTY
1549: LIST
1550: LIST
1551: LIST
1552: LIST
1553: PUSH
1554: LD_INT 4
1556: PUSH
1557: LD_INT 1
1559: PUSH
1560: LD_INT 2
1562: PUSH
1563: LD_INT 7
1565: PUSH
1566: EMPTY
1567: LIST
1568: LIST
1569: LIST
1570: LIST
1571: PUSH
1572: LD_INT 4
1574: PUSH
1575: LD_INT 1
1577: PUSH
1578: LD_INT 2
1580: PUSH
1581: LD_INT 6
1583: PUSH
1584: EMPTY
1585: LIST
1586: LIST
1587: LIST
1588: LIST
1589: PUSH
1590: EMPTY
1591: LIST
1592: LIST
1593: LIST
1594: LIST
1595: PPUSH
1596: CALL 86206 0 2
// MC_SetBuildingList ( mc_amer , [ [ b_turret , 114 , 16 , 0 ] , [ b_bunker , 110 , 12 , 0 ] ] ) ;
1600: LD_EXP 5
1604: PPUSH
1605: LD_INT 33
1607: PUSH
1608: LD_INT 114
1610: PUSH
1611: LD_INT 16
1613: PUSH
1614: LD_INT 0
1616: PUSH
1617: EMPTY
1618: LIST
1619: LIST
1620: LIST
1621: LIST
1622: PUSH
1623: LD_INT 32
1625: PUSH
1626: LD_INT 110
1628: PUSH
1629: LD_INT 12
1631: PUSH
1632: LD_INT 0
1634: PUSH
1635: EMPTY
1636: LIST
1637: LIST
1638: LIST
1639: LIST
1640: PUSH
1641: EMPTY
1642: LIST
1643: LIST
1644: PPUSH
1645: CALL 86098 0 2
// MC_SetLabKind ( mc_amer , [ b_lab_weapon , b_lab_opto , b_lab_computer , b_lab_siberium ] ) ;
1649: LD_EXP 5
1653: PPUSH
1654: LD_INT 10
1656: PUSH
1657: LD_INT 15
1659: PUSH
1660: LD_INT 12
1662: PUSH
1663: LD_INT 11
1665: PUSH
1666: EMPTY
1667: LIST
1668: LIST
1669: LIST
1670: LIST
1671: PPUSH
1672: CALL 86948 0 2
// MC_SetScanArea ( mc_leg , legBase ) ;
1676: LD_EXP 6
1680: PPUSH
1681: LD_INT 6
1683: PPUSH
1684: CALL 87527 0 2
// MC_SetParkingArea ( mc_leg , legParking ) ;
1688: LD_EXP 6
1692: PPUSH
1693: LD_INT 7
1695: PPUSH
1696: CALL 87471 0 2
// MC_SetAllowedTurretWeapons ( mc_leg , [ ar_radar , ar_gun , ar_rocket_launcher , ar_gatling_gun ] ) ;
1700: LD_EXP 6
1704: PPUSH
1705: LD_INT 30
1707: PUSH
1708: LD_INT 27
1710: PUSH
1711: LD_INT 28
1713: PUSH
1714: LD_INT 25
1716: PUSH
1717: EMPTY
1718: LIST
1719: LIST
1720: LIST
1721: LIST
1722: PPUSH
1723: CALL 87359 0 2
// MC_SetCratesArea ( mc_leg , legCrates ) ;
1727: LD_EXP 6
1731: PPUSH
1732: LD_INT 17
1734: PPUSH
1735: CALL 87041 0 2
// MC_SetTame ( mc_leg , legBase ) ;
1739: LD_EXP 6
1743: PPUSH
1744: LD_INT 6
1746: PPUSH
1747: CALL 86772 0 2
// MC_SetDefenderLimit ( mc_leg , 5 ) ;
1751: LD_EXP 6
1755: PPUSH
1756: LD_INT 5
1758: PPUSH
1759: CALL 86391 0 2
// MC_SetMinesField ( mc_leg , 10 , legMines ) ;
1763: LD_EXP 6
1767: PPUSH
1768: LD_INT 10
1770: PPUSH
1771: LD_INT 9
1773: PPUSH
1774: CALL 85888 0 3
// MC_SetBuildingList ( mc_leg , [ [ b_armoury , 157 , 144 , 0 ] , [ b_bunker , 151 , 142 , 0 ] , [ b_bunker , 161 , 145 , 0 ] , [ b_bunker , 140 , 133 , 0 ] ] ) ;
1778: LD_EXP 6
1782: PPUSH
1783: LD_INT 4
1785: PUSH
1786: LD_INT 157
1788: PUSH
1789: LD_INT 144
1791: PUSH
1792: LD_INT 0
1794: PUSH
1795: EMPTY
1796: LIST
1797: LIST
1798: LIST
1799: LIST
1800: PUSH
1801: LD_INT 32
1803: PUSH
1804: LD_INT 151
1806: PUSH
1807: LD_INT 142
1809: PUSH
1810: LD_INT 0
1812: PUSH
1813: EMPTY
1814: LIST
1815: LIST
1816: LIST
1817: LIST
1818: PUSH
1819: LD_INT 32
1821: PUSH
1822: LD_INT 161
1824: PUSH
1825: LD_INT 145
1827: PUSH
1828: LD_INT 0
1830: PUSH
1831: EMPTY
1832: LIST
1833: LIST
1834: LIST
1835: LIST
1836: PUSH
1837: LD_INT 32
1839: PUSH
1840: LD_INT 140
1842: PUSH
1843: LD_INT 133
1845: PUSH
1846: LD_INT 0
1848: PUSH
1849: EMPTY
1850: LIST
1851: LIST
1852: LIST
1853: LIST
1854: PUSH
1855: EMPTY
1856: LIST
1857: LIST
1858: LIST
1859: LIST
1860: PPUSH
1861: CALL 86098 0 2
// MC_SetProduceList ( mc_leg , [ [ ar_medium_trike , engine_solar , control_manual , ar_control_tower ] , [ ar_medium_trike , engine_solar , control_manual , ar_control_tower ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_cargo_bay ] ] ) ;
1865: LD_EXP 6
1869: PPUSH
1870: LD_INT 13
1872: PUSH
1873: LD_INT 2
1875: PUSH
1876: LD_INT 1
1878: PUSH
1879: LD_INT 31
1881: PUSH
1882: EMPTY
1883: LIST
1884: LIST
1885: LIST
1886: LIST
1887: PUSH
1888: LD_INT 13
1890: PUSH
1891: LD_INT 2
1893: PUSH
1894: LD_INT 1
1896: PUSH
1897: LD_INT 31
1899: PUSH
1900: EMPTY
1901: LIST
1902: LIST
1903: LIST
1904: LIST
1905: PUSH
1906: LD_INT 13
1908: PUSH
1909: LD_INT 1
1911: PUSH
1912: LD_INT 1
1914: PUSH
1915: LD_INT 27
1917: PUSH
1918: EMPTY
1919: LIST
1920: LIST
1921: LIST
1922: LIST
1923: PUSH
1924: LD_INT 13
1926: PUSH
1927: LD_INT 1
1929: PUSH
1930: LD_INT 2
1932: PUSH
1933: LD_INT 27
1935: PUSH
1936: EMPTY
1937: LIST
1938: LIST
1939: LIST
1940: LIST
1941: PUSH
1942: LD_INT 13
1944: PUSH
1945: LD_INT 1
1947: PUSH
1948: LD_INT 2
1950: PUSH
1951: LD_INT 27
1953: PUSH
1954: EMPTY
1955: LIST
1956: LIST
1957: LIST
1958: LIST
1959: PUSH
1960: LD_INT 13
1962: PUSH
1963: LD_INT 1
1965: PUSH
1966: LD_INT 2
1968: PUSH
1969: LD_INT 28
1971: PUSH
1972: EMPTY
1973: LIST
1974: LIST
1975: LIST
1976: LIST
1977: PUSH
1978: LD_INT 13
1980: PUSH
1981: LD_INT 1
1983: PUSH
1984: LD_INT 2
1986: PUSH
1987: LD_INT 28
1989: PUSH
1990: EMPTY
1991: LIST
1992: LIST
1993: LIST
1994: LIST
1995: PUSH
1996: LD_INT 13
1998: PUSH
1999: LD_INT 1
2001: PUSH
2002: LD_INT 2
2004: PUSH
2005: LD_INT 32
2007: PUSH
2008: EMPTY
2009: LIST
2010: LIST
2011: LIST
2012: LIST
2013: PUSH
2014: EMPTY
2015: LIST
2016: LIST
2017: LIST
2018: LIST
2019: LIST
2020: LIST
2021: LIST
2022: LIST
2023: PPUSH
2024: CALL 86206 0 2
// MC_SetScanArea ( mc_rus_1 , rus1Base ) ;
2028: LD_EXP 7
2032: PPUSH
2033: LD_INT 15
2035: PPUSH
2036: CALL 87527 0 2
// MC_SetParkingArea ( mc_rus_1 , rus1Parking ) ;
2040: LD_EXP 7
2044: PPUSH
2045: LD_INT 16
2047: PPUSH
2048: CALL 87471 0 2
// MC_SetAllowedTurretWeapons ( mc_rus_1 , [ ru_gatling_gun , ru_rocket , ru_rocket_launcher , ru_time_lapser , ru_heavy_gun ] ) ;
2052: LD_EXP 7
2056: PPUSH
2057: LD_INT 43
2059: PUSH
2060: LD_INT 47
2062: PUSH
2063: LD_INT 45
2065: PUSH
2066: LD_INT 49
2068: PUSH
2069: LD_INT 46
2071: PUSH
2072: EMPTY
2073: LIST
2074: LIST
2075: LIST
2076: LIST
2077: LIST
2078: PPUSH
2079: CALL 87359 0 2
// MC_SetCratesArea ( mc_rus_1 , rusCrates ) ;
2083: LD_EXP 7
2087: PPUSH
2088: LD_INT 13
2090: PPUSH
2091: CALL 87041 0 2
// MC_SetTame ( mc_rus_1 , rus1Base ) ;
2095: LD_EXP 7
2099: PPUSH
2100: LD_INT 15
2102: PPUSH
2103: CALL 86772 0 2
// MC_SetDefenderLimit ( mc_rus_1 , 5 ) ;
2107: LD_EXP 7
2111: PPUSH
2112: LD_INT 5
2114: PPUSH
2115: CALL 86391 0 2
// MC_SetProduceList ( mc_rus_1 , [ [ ru_heavy_wheeled , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_wheeled , engine_combustion , control_manual , ru_heavy_gun ] , [ ru_heavy_wheeled , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_heavy_wheeled , engine_combustion , control_manual , ru_rocket ] , [ ru_medium_wheeled , engine_combustion , control_computer , ru_cargo_bay ] ] ) ;
2119: LD_EXP 7
2123: PPUSH
2124: LD_INT 23
2126: PUSH
2127: LD_INT 1
2129: PUSH
2130: LD_INT 3
2132: PUSH
2133: LD_INT 46
2135: PUSH
2136: EMPTY
2137: LIST
2138: LIST
2139: LIST
2140: LIST
2141: PUSH
2142: LD_INT 23
2144: PUSH
2145: LD_INT 1
2147: PUSH
2148: LD_INT 1
2150: PUSH
2151: LD_INT 46
2153: PUSH
2154: EMPTY
2155: LIST
2156: LIST
2157: LIST
2158: LIST
2159: PUSH
2160: LD_INT 23
2162: PUSH
2163: LD_INT 1
2165: PUSH
2166: LD_INT 3
2168: PUSH
2169: LD_INT 45
2171: PUSH
2172: EMPTY
2173: LIST
2174: LIST
2175: LIST
2176: LIST
2177: PUSH
2178: LD_INT 23
2180: PUSH
2181: LD_INT 1
2183: PUSH
2184: LD_INT 1
2186: PUSH
2187: LD_INT 47
2189: PUSH
2190: EMPTY
2191: LIST
2192: LIST
2193: LIST
2194: LIST
2195: PUSH
2196: LD_INT 21
2198: PUSH
2199: LD_INT 1
2201: PUSH
2202: LD_INT 3
2204: PUSH
2205: LD_INT 51
2207: PUSH
2208: EMPTY
2209: LIST
2210: LIST
2211: LIST
2212: LIST
2213: PUSH
2214: EMPTY
2215: LIST
2216: LIST
2217: LIST
2218: LIST
2219: LIST
2220: PPUSH
2221: CALL 86206 0 2
// MC_SetScanArea ( mc_rus_2 , rus2Base ) ;
2225: LD_EXP 8
2229: PPUSH
2230: LD_INT 11
2232: PPUSH
2233: CALL 87527 0 2
// MC_SetParkingArea ( mc_rus_2 , rus2Parking ) ;
2237: LD_EXP 8
2241: PPUSH
2242: LD_INT 12
2244: PPUSH
2245: CALL 87471 0 2
// MC_SetAllowedTurretWeapons ( mc_rus_2 , [ ru_gatling_gun , ru_rocket , ru_rocket_launcher , ru_time_lapser , ru_heavy_gun ] ) ;
2249: LD_EXP 8
2253: PPUSH
2254: LD_INT 43
2256: PUSH
2257: LD_INT 47
2259: PUSH
2260: LD_INT 45
2262: PUSH
2263: LD_INT 49
2265: PUSH
2266: LD_INT 46
2268: PUSH
2269: EMPTY
2270: LIST
2271: LIST
2272: LIST
2273: LIST
2274: LIST
2275: PPUSH
2276: CALL 87359 0 2
// MC_SetCratesArea ( mc_rus_2 , rusCrates ) ;
2280: LD_EXP 8
2284: PPUSH
2285: LD_INT 13
2287: PPUSH
2288: CALL 87041 0 2
// MC_SetTame ( mc_rus_2 , rus2Base ) ;
2292: LD_EXP 8
2296: PPUSH
2297: LD_INT 11
2299: PPUSH
2300: CALL 86772 0 2
// MC_SetDefenderLimit ( mc_rus_2 , 4 ) ;
2304: LD_EXP 8
2308: PPUSH
2309: LD_INT 4
2311: PPUSH
2312: CALL 86391 0 2
// MC_SetTeleportExit ( mc_rus_2 , [ [ 115 , 201 ] ] ) ;
2316: LD_EXP 8
2320: PPUSH
2321: LD_INT 115
2323: PUSH
2324: LD_INT 201
2326: PUSH
2327: EMPTY
2328: LIST
2329: LIST
2330: PUSH
2331: EMPTY
2332: LIST
2333: PPUSH
2334: CALL 87097 0 2
// MC_SetProduceList ( mc_rus_2 , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , ] ) ;
2338: LD_EXP 8
2342: PPUSH
2343: LD_INT 24
2345: PUSH
2346: LD_INT 3
2348: PUSH
2349: LD_INT 3
2351: PUSH
2352: LD_INT 46
2354: PUSH
2355: EMPTY
2356: LIST
2357: LIST
2358: LIST
2359: LIST
2360: PUSH
2361: LD_INT 24
2363: PUSH
2364: LD_INT 3
2366: PUSH
2367: LD_INT 3
2369: PUSH
2370: LD_INT 46
2372: PUSH
2373: EMPTY
2374: LIST
2375: LIST
2376: LIST
2377: LIST
2378: PUSH
2379: LD_INT 24
2381: PUSH
2382: LD_INT 3
2384: PUSH
2385: LD_INT 3
2387: PUSH
2388: LD_INT 46
2390: PUSH
2391: EMPTY
2392: LIST
2393: LIST
2394: LIST
2395: LIST
2396: PUSH
2397: LD_INT 24
2399: PUSH
2400: LD_INT 3
2402: PUSH
2403: LD_INT 3
2405: PUSH
2406: LD_INT 46
2408: PUSH
2409: EMPTY
2410: LIST
2411: LIST
2412: LIST
2413: LIST
2414: PUSH
2415: LD_INT 24
2417: PUSH
2418: LD_INT 3
2420: PUSH
2421: LD_INT 3
2423: PUSH
2424: LD_INT 46
2426: PUSH
2427: EMPTY
2428: LIST
2429: LIST
2430: LIST
2431: LIST
2432: PUSH
2433: EMPTY
2434: LIST
2435: LIST
2436: LIST
2437: LIST
2438: LIST
2439: PPUSH
2440: CALL 86206 0 2
// end ;
2444: LD_VAR 0 1
2448: RET
// export function PrepareRussians ; var i , b , tmp , side , sr , depot , base ; begin
2449: LD_INT 0
2451: PPUSH
2452: PPUSH
2453: PPUSH
2454: PPUSH
2455: PPUSH
2456: PPUSH
2457: PPUSH
2458: PPUSH
// PrepareNature ( 0 , 0 , 3 , 0 , 0 , 0 , 0 , rusApe , 0 ) ;
2459: LD_INT 0
2461: PPUSH
2462: LD_INT 0
2464: PPUSH
2465: LD_INT 3
2467: PPUSH
2468: LD_INT 0
2470: PPUSH
2471: LD_INT 0
2473: PPUSH
2474: LD_INT 0
2476: PPUSH
2477: LD_INT 0
2479: PPUSH
2480: LD_INT 14
2482: PPUSH
2483: LD_INT 0
2485: PPUSH
2486: CALL 54178 0 9
// side := 3 ;
2490: LD_ADDR_VAR 0 5
2494: PUSH
2495: LD_INT 3
2497: ST_TO_ADDR
// SetTech ( tech_targTeleport , side , state_researched ) ;
2498: LD_INT 38
2500: PPUSH
2501: LD_VAR 0 5
2505: PPUSH
2506: LD_INT 2
2508: PPUSH
2509: CALL_OW 322
// SetTech ( tech_gun , side , state_researched ) ;
2513: LD_INT 39
2515: PPUSH
2516: LD_VAR 0 5
2520: PPUSH
2521: LD_INT 2
2523: PPUSH
2524: CALL_OW 322
// SetTech ( tech_advMet , side , state_researched ) ;
2528: LD_INT 34
2530: PPUSH
2531: LD_VAR 0 5
2535: PPUSH
2536: LD_INT 2
2538: PPUSH
2539: CALL_OW 322
// tmp := [ [ 0 , 208 , 163 , 4 , 0 , 0 ] , [ 3 , 194 , 161 , 1 , 0 , 0 ] , [ 17 , 190 , 161 , 1 , 0 , 0 ] , [ 5 , 200 , 145 , 3 , 0 , 0 ] , [ 32 , 192 , 144 , 3 , 0 , 0 ] , [ 26 , 216 , 172 , 3 , 0 , 0 ] , [ 26 , 218 , 176 , 3 , 0 , 0 ] , [ 29 , 182 , 149 , 3 , 0 , 0 ] , [ 8 , 201 , 171 , 0 , 10 , 11 ] , [ 32 , 188 , 167 , 0 , 0 , 0 ] , [ 32 , 202 , 179 , 0 , 0 , 0 ] , [ 32 , 209 , 182 , 0 , 0 , 0 ] , [ 32 , 220 , 183 , 5 , 0 , 0 ] , [ 32 , 225 , 181 , 5 , 0 , 0 ] , [ 26 , 220 , 174 , 5 , 0 , 0 ] , [ 1 , 84 , 128 , 4 , 0 , 0 ] , [ 3 , 68 , 121 , 1 , 0 , 0 ] , [ 19 , 72 , 125 , 5 , 0 , 0 ] , [ 18 , 68 , 124 , 0 , 0 , 0 ] , [ 24 , 64 , 121 , 1 , 0 , 0 ] , [ 17 , 65 , 118 , 2 , 0 , 0 ] , [ 21 , 68 , 117 , 3 , 0 , 0 ] , [ 8 , 68 , 130 , 1 , 14 , 10 ] , [ 8 , 67 , 110 , 2 , 11 , 12 ] , [ 28 , 85 , 108 , 2 , 0 , 0 ] , [ 28 , 85 , 124 , 2 , 0 , 0 ] , [ 30 , 97 , 119 , 2 , 0 , 0 ] , [ 5 , 111 , 138 , 4 , 0 , 0 ] , [ 33 , 104 , 130 , 3 , 0 , 0 ] , [ 33 , 110 , 142 , 5 , 0 , 0 ] , [ 33 , 91 , 131 , 5 , 0 , 0 ] , [ 33 , 107 , 157 , 5 , 0 , 0 ] , [ 33 , 104 , 160 , 5 , 0 , 0 ] , [ 33 , 101 , 162 , 5 , 0 , 0 ] , [ 32 , 87 , 157 , 5 , 0 , 0 ] , [ 32 , 105 , 158 , 5 , 0 , 0 ] , [ 33 , 91 , 118 , 4 , 0 , 0 ] , [ 33 , 89 , 107 , 4 , 0 , 0 ] , [ 5 , 86 , 96 , 3 , 0 , 0 ] , [ 33 , 91 , 102 , 4 , 0 , 0 ] , [ 32 , 80 , 95 , 3 , 0 , 0 ] , [ 28 , 77 , 105 , 3 , 0 , 0 ] , [ 28 , 85 , 113 , 3 , 0 , 0 ] , [ 28 , 55 , 97 , 3 , 0 , 0 ] , [ 28 , 88 , 128 , 3 , 0 , 0 ] , [ 32 , 69 , 101 , 2 , 0 , 0 ] , [ 1 , 34 , 23 , 4 , 0 , 0 ] , [ 8 , 25 , 4 , 3 , 11 , 10 ] , [ 8 , 15 , 4 , 2 , 14 , 12 ] , [ 29 , 55 , 35 , 2 , 0 , 0 ] , [ 29 , 24 , 44 , 2 , 0 , 0 ] , [ 34 , 34 , 32 , 4 , 0 , 0 ] , [ 3 , 14 , 16 , 1 , 0 , 0 ] , [ 24 , 10 , 16 , 1 , 0 , 0 ] , [ 21 , 11 , 13 , 2 , 0 , 0 ] , [ 18 , 14 , 12 , 3 , 0 , 0 ] , [ 16 , 14 , 19 , 0 , 0 , 0 ] , [ 17 , 18 , 20 , 5 , 0 , 0 ] , [ 28 , 10 , 5 , 1 , 0 , 0 ] , [ 28 , 8 , 8 , 1 , 0 , 0 ] , [ 26 , 19 , 2 , 1 , 0 , 0 ] , [ 26 , 30 , 2 , 1 , 0 , 0 ] , [ 5 , 59 , 20 , 4 , 0 , 0 ] , [ 32 , 60 , 24 , 4 , 0 , 0 ] , [ 32 , 61 , 45 , 5 , 0 , 0 ] , [ 32 , 52 , 51 , 5 , 0 , 0 ] , [ 33 , 56 , 51 , 5 , 0 , 0 ] , [ 33 , 62 , 49 , 5 , 0 , 0 ] , [ 33 , 41 , 47 , 5 , 0 , 0 ] , [ 33 , 33 , 52 , 5 , 0 , 0 ] , [ 5 , 31 , 40 , 0 , 0 , 0 ] , [ 33 , 65 , 37 , 5 , 0 , 0 ] , [ 33 , 63 , 29 , 4 , 0 , 0 ] , [ 33 , 54 , 11 , 4 , 0 , 0 ] , [ 33 , 56 , 15 , 4 , 0 , 0 ] , [ 33 , 51 , 6 , 4 , 0 , 0 ] , [ 26 , 39 , 25 , 0 , 0 , 0 ] , [ 26 , 37 , 21 , 0 , 0 , 0 ] , [ 32 , 35 , 17 , 4 , 0 , 0 ] , [ 33 , 35 , 28 , 4 , 0 , 0 ] , [ 33 , 28 , 46 , 5 , 0 , 0 ] , [ 33 , 31 , 6 , 4 , 0 , 0 ] , [ 26 , 54 , 38 , 4 , 0 , 0 ] , [ 33 , 207 , 167 , 3 , 0 , 0 ] , [ 30 , 43 , 2 , 4 , 0 , 0 ] ] ;
2543: LD_ADDR_VAR 0 4
2547: PUSH
2548: LD_INT 0
2550: PUSH
2551: LD_INT 208
2553: PUSH
2554: LD_INT 163
2556: PUSH
2557: LD_INT 4
2559: PUSH
2560: LD_INT 0
2562: PUSH
2563: LD_INT 0
2565: PUSH
2566: EMPTY
2567: LIST
2568: LIST
2569: LIST
2570: LIST
2571: LIST
2572: LIST
2573: PUSH
2574: LD_INT 3
2576: PUSH
2577: LD_INT 194
2579: PUSH
2580: LD_INT 161
2582: PUSH
2583: LD_INT 1
2585: PUSH
2586: LD_INT 0
2588: PUSH
2589: LD_INT 0
2591: PUSH
2592: EMPTY
2593: LIST
2594: LIST
2595: LIST
2596: LIST
2597: LIST
2598: LIST
2599: PUSH
2600: LD_INT 17
2602: PUSH
2603: LD_INT 190
2605: PUSH
2606: LD_INT 161
2608: PUSH
2609: LD_INT 1
2611: PUSH
2612: LD_INT 0
2614: PUSH
2615: LD_INT 0
2617: PUSH
2618: EMPTY
2619: LIST
2620: LIST
2621: LIST
2622: LIST
2623: LIST
2624: LIST
2625: PUSH
2626: LD_INT 5
2628: PUSH
2629: LD_INT 200
2631: PUSH
2632: LD_INT 145
2634: PUSH
2635: LD_INT 3
2637: PUSH
2638: LD_INT 0
2640: PUSH
2641: LD_INT 0
2643: PUSH
2644: EMPTY
2645: LIST
2646: LIST
2647: LIST
2648: LIST
2649: LIST
2650: LIST
2651: PUSH
2652: LD_INT 32
2654: PUSH
2655: LD_INT 192
2657: PUSH
2658: LD_INT 144
2660: PUSH
2661: LD_INT 3
2663: PUSH
2664: LD_INT 0
2666: PUSH
2667: LD_INT 0
2669: PUSH
2670: EMPTY
2671: LIST
2672: LIST
2673: LIST
2674: LIST
2675: LIST
2676: LIST
2677: PUSH
2678: LD_INT 26
2680: PUSH
2681: LD_INT 216
2683: PUSH
2684: LD_INT 172
2686: PUSH
2687: LD_INT 3
2689: PUSH
2690: LD_INT 0
2692: PUSH
2693: LD_INT 0
2695: PUSH
2696: EMPTY
2697: LIST
2698: LIST
2699: LIST
2700: LIST
2701: LIST
2702: LIST
2703: PUSH
2704: LD_INT 26
2706: PUSH
2707: LD_INT 218
2709: PUSH
2710: LD_INT 176
2712: PUSH
2713: LD_INT 3
2715: PUSH
2716: LD_INT 0
2718: PUSH
2719: LD_INT 0
2721: PUSH
2722: EMPTY
2723: LIST
2724: LIST
2725: LIST
2726: LIST
2727: LIST
2728: LIST
2729: PUSH
2730: LD_INT 29
2732: PUSH
2733: LD_INT 182
2735: PUSH
2736: LD_INT 149
2738: PUSH
2739: LD_INT 3
2741: PUSH
2742: LD_INT 0
2744: PUSH
2745: LD_INT 0
2747: PUSH
2748: EMPTY
2749: LIST
2750: LIST
2751: LIST
2752: LIST
2753: LIST
2754: LIST
2755: PUSH
2756: LD_INT 8
2758: PUSH
2759: LD_INT 201
2761: PUSH
2762: LD_INT 171
2764: PUSH
2765: LD_INT 0
2767: PUSH
2768: LD_INT 10
2770: PUSH
2771: LD_INT 11
2773: PUSH
2774: EMPTY
2775: LIST
2776: LIST
2777: LIST
2778: LIST
2779: LIST
2780: LIST
2781: PUSH
2782: LD_INT 32
2784: PUSH
2785: LD_INT 188
2787: PUSH
2788: LD_INT 167
2790: PUSH
2791: LD_INT 0
2793: PUSH
2794: LD_INT 0
2796: PUSH
2797: LD_INT 0
2799: PUSH
2800: EMPTY
2801: LIST
2802: LIST
2803: LIST
2804: LIST
2805: LIST
2806: LIST
2807: PUSH
2808: LD_INT 32
2810: PUSH
2811: LD_INT 202
2813: PUSH
2814: LD_INT 179
2816: PUSH
2817: LD_INT 0
2819: PUSH
2820: LD_INT 0
2822: PUSH
2823: LD_INT 0
2825: PUSH
2826: EMPTY
2827: LIST
2828: LIST
2829: LIST
2830: LIST
2831: LIST
2832: LIST
2833: PUSH
2834: LD_INT 32
2836: PUSH
2837: LD_INT 209
2839: PUSH
2840: LD_INT 182
2842: PUSH
2843: LD_INT 0
2845: PUSH
2846: LD_INT 0
2848: PUSH
2849: LD_INT 0
2851: PUSH
2852: EMPTY
2853: LIST
2854: LIST
2855: LIST
2856: LIST
2857: LIST
2858: LIST
2859: PUSH
2860: LD_INT 32
2862: PUSH
2863: LD_INT 220
2865: PUSH
2866: LD_INT 183
2868: PUSH
2869: LD_INT 5
2871: PUSH
2872: LD_INT 0
2874: PUSH
2875: LD_INT 0
2877: PUSH
2878: EMPTY
2879: LIST
2880: LIST
2881: LIST
2882: LIST
2883: LIST
2884: LIST
2885: PUSH
2886: LD_INT 32
2888: PUSH
2889: LD_INT 225
2891: PUSH
2892: LD_INT 181
2894: PUSH
2895: LD_INT 5
2897: PUSH
2898: LD_INT 0
2900: PUSH
2901: LD_INT 0
2903: PUSH
2904: EMPTY
2905: LIST
2906: LIST
2907: LIST
2908: LIST
2909: LIST
2910: LIST
2911: PUSH
2912: LD_INT 26
2914: PUSH
2915: LD_INT 220
2917: PUSH
2918: LD_INT 174
2920: PUSH
2921: LD_INT 5
2923: PUSH
2924: LD_INT 0
2926: PUSH
2927: LD_INT 0
2929: PUSH
2930: EMPTY
2931: LIST
2932: LIST
2933: LIST
2934: LIST
2935: LIST
2936: LIST
2937: PUSH
2938: LD_INT 1
2940: PUSH
2941: LD_INT 84
2943: PUSH
2944: LD_INT 128
2946: PUSH
2947: LD_INT 4
2949: PUSH
2950: LD_INT 0
2952: PUSH
2953: LD_INT 0
2955: PUSH
2956: EMPTY
2957: LIST
2958: LIST
2959: LIST
2960: LIST
2961: LIST
2962: LIST
2963: PUSH
2964: LD_INT 3
2966: PUSH
2967: LD_INT 68
2969: PUSH
2970: LD_INT 121
2972: PUSH
2973: LD_INT 1
2975: PUSH
2976: LD_INT 0
2978: PUSH
2979: LD_INT 0
2981: PUSH
2982: EMPTY
2983: LIST
2984: LIST
2985: LIST
2986: LIST
2987: LIST
2988: LIST
2989: PUSH
2990: LD_INT 19
2992: PUSH
2993: LD_INT 72
2995: PUSH
2996: LD_INT 125
2998: PUSH
2999: LD_INT 5
3001: PUSH
3002: LD_INT 0
3004: PUSH
3005: LD_INT 0
3007: PUSH
3008: EMPTY
3009: LIST
3010: LIST
3011: LIST
3012: LIST
3013: LIST
3014: LIST
3015: PUSH
3016: LD_INT 18
3018: PUSH
3019: LD_INT 68
3021: PUSH
3022: LD_INT 124
3024: PUSH
3025: LD_INT 0
3027: PUSH
3028: LD_INT 0
3030: PUSH
3031: LD_INT 0
3033: PUSH
3034: EMPTY
3035: LIST
3036: LIST
3037: LIST
3038: LIST
3039: LIST
3040: LIST
3041: PUSH
3042: LD_INT 24
3044: PUSH
3045: LD_INT 64
3047: PUSH
3048: LD_INT 121
3050: PUSH
3051: LD_INT 1
3053: PUSH
3054: LD_INT 0
3056: PUSH
3057: LD_INT 0
3059: PUSH
3060: EMPTY
3061: LIST
3062: LIST
3063: LIST
3064: LIST
3065: LIST
3066: LIST
3067: PUSH
3068: LD_INT 17
3070: PUSH
3071: LD_INT 65
3073: PUSH
3074: LD_INT 118
3076: PUSH
3077: LD_INT 2
3079: PUSH
3080: LD_INT 0
3082: PUSH
3083: LD_INT 0
3085: PUSH
3086: EMPTY
3087: LIST
3088: LIST
3089: LIST
3090: LIST
3091: LIST
3092: LIST
3093: PUSH
3094: LD_INT 21
3096: PUSH
3097: LD_INT 68
3099: PUSH
3100: LD_INT 117
3102: PUSH
3103: LD_INT 3
3105: PUSH
3106: LD_INT 0
3108: PUSH
3109: LD_INT 0
3111: PUSH
3112: EMPTY
3113: LIST
3114: LIST
3115: LIST
3116: LIST
3117: LIST
3118: LIST
3119: PUSH
3120: LD_INT 8
3122: PUSH
3123: LD_INT 68
3125: PUSH
3126: LD_INT 130
3128: PUSH
3129: LD_INT 1
3131: PUSH
3132: LD_INT 14
3134: PUSH
3135: LD_INT 10
3137: PUSH
3138: EMPTY
3139: LIST
3140: LIST
3141: LIST
3142: LIST
3143: LIST
3144: LIST
3145: PUSH
3146: LD_INT 8
3148: PUSH
3149: LD_INT 67
3151: PUSH
3152: LD_INT 110
3154: PUSH
3155: LD_INT 2
3157: PUSH
3158: LD_INT 11
3160: PUSH
3161: LD_INT 12
3163: PUSH
3164: EMPTY
3165: LIST
3166: LIST
3167: LIST
3168: LIST
3169: LIST
3170: LIST
3171: PUSH
3172: LD_INT 28
3174: PUSH
3175: LD_INT 85
3177: PUSH
3178: LD_INT 108
3180: PUSH
3181: LD_INT 2
3183: PUSH
3184: LD_INT 0
3186: PUSH
3187: LD_INT 0
3189: PUSH
3190: EMPTY
3191: LIST
3192: LIST
3193: LIST
3194: LIST
3195: LIST
3196: LIST
3197: PUSH
3198: LD_INT 28
3200: PUSH
3201: LD_INT 85
3203: PUSH
3204: LD_INT 124
3206: PUSH
3207: LD_INT 2
3209: PUSH
3210: LD_INT 0
3212: PUSH
3213: LD_INT 0
3215: PUSH
3216: EMPTY
3217: LIST
3218: LIST
3219: LIST
3220: LIST
3221: LIST
3222: LIST
3223: PUSH
3224: LD_INT 30
3226: PUSH
3227: LD_INT 97
3229: PUSH
3230: LD_INT 119
3232: PUSH
3233: LD_INT 2
3235: PUSH
3236: LD_INT 0
3238: PUSH
3239: LD_INT 0
3241: PUSH
3242: EMPTY
3243: LIST
3244: LIST
3245: LIST
3246: LIST
3247: LIST
3248: LIST
3249: PUSH
3250: LD_INT 5
3252: PUSH
3253: LD_INT 111
3255: PUSH
3256: LD_INT 138
3258: PUSH
3259: LD_INT 4
3261: PUSH
3262: LD_INT 0
3264: PUSH
3265: LD_INT 0
3267: PUSH
3268: EMPTY
3269: LIST
3270: LIST
3271: LIST
3272: LIST
3273: LIST
3274: LIST
3275: PUSH
3276: LD_INT 33
3278: PUSH
3279: LD_INT 104
3281: PUSH
3282: LD_INT 130
3284: PUSH
3285: LD_INT 3
3287: PUSH
3288: LD_INT 0
3290: PUSH
3291: LD_INT 0
3293: PUSH
3294: EMPTY
3295: LIST
3296: LIST
3297: LIST
3298: LIST
3299: LIST
3300: LIST
3301: PUSH
3302: LD_INT 33
3304: PUSH
3305: LD_INT 110
3307: PUSH
3308: LD_INT 142
3310: PUSH
3311: LD_INT 5
3313: PUSH
3314: LD_INT 0
3316: PUSH
3317: LD_INT 0
3319: PUSH
3320: EMPTY
3321: LIST
3322: LIST
3323: LIST
3324: LIST
3325: LIST
3326: LIST
3327: PUSH
3328: LD_INT 33
3330: PUSH
3331: LD_INT 91
3333: PUSH
3334: LD_INT 131
3336: PUSH
3337: LD_INT 5
3339: PUSH
3340: LD_INT 0
3342: PUSH
3343: LD_INT 0
3345: PUSH
3346: EMPTY
3347: LIST
3348: LIST
3349: LIST
3350: LIST
3351: LIST
3352: LIST
3353: PUSH
3354: LD_INT 33
3356: PUSH
3357: LD_INT 107
3359: PUSH
3360: LD_INT 157
3362: PUSH
3363: LD_INT 5
3365: PUSH
3366: LD_INT 0
3368: PUSH
3369: LD_INT 0
3371: PUSH
3372: EMPTY
3373: LIST
3374: LIST
3375: LIST
3376: LIST
3377: LIST
3378: LIST
3379: PUSH
3380: LD_INT 33
3382: PUSH
3383: LD_INT 104
3385: PUSH
3386: LD_INT 160
3388: PUSH
3389: LD_INT 5
3391: PUSH
3392: LD_INT 0
3394: PUSH
3395: LD_INT 0
3397: PUSH
3398: EMPTY
3399: LIST
3400: LIST
3401: LIST
3402: LIST
3403: LIST
3404: LIST
3405: PUSH
3406: LD_INT 33
3408: PUSH
3409: LD_INT 101
3411: PUSH
3412: LD_INT 162
3414: PUSH
3415: LD_INT 5
3417: PUSH
3418: LD_INT 0
3420: PUSH
3421: LD_INT 0
3423: PUSH
3424: EMPTY
3425: LIST
3426: LIST
3427: LIST
3428: LIST
3429: LIST
3430: LIST
3431: PUSH
3432: LD_INT 32
3434: PUSH
3435: LD_INT 87
3437: PUSH
3438: LD_INT 157
3440: PUSH
3441: LD_INT 5
3443: PUSH
3444: LD_INT 0
3446: PUSH
3447: LD_INT 0
3449: PUSH
3450: EMPTY
3451: LIST
3452: LIST
3453: LIST
3454: LIST
3455: LIST
3456: LIST
3457: PUSH
3458: LD_INT 32
3460: PUSH
3461: LD_INT 105
3463: PUSH
3464: LD_INT 158
3466: PUSH
3467: LD_INT 5
3469: PUSH
3470: LD_INT 0
3472: PUSH
3473: LD_INT 0
3475: PUSH
3476: EMPTY
3477: LIST
3478: LIST
3479: LIST
3480: LIST
3481: LIST
3482: LIST
3483: PUSH
3484: LD_INT 33
3486: PUSH
3487: LD_INT 91
3489: PUSH
3490: LD_INT 118
3492: PUSH
3493: LD_INT 4
3495: PUSH
3496: LD_INT 0
3498: PUSH
3499: LD_INT 0
3501: PUSH
3502: EMPTY
3503: LIST
3504: LIST
3505: LIST
3506: LIST
3507: LIST
3508: LIST
3509: PUSH
3510: LD_INT 33
3512: PUSH
3513: LD_INT 89
3515: PUSH
3516: LD_INT 107
3518: PUSH
3519: LD_INT 4
3521: PUSH
3522: LD_INT 0
3524: PUSH
3525: LD_INT 0
3527: PUSH
3528: EMPTY
3529: LIST
3530: LIST
3531: LIST
3532: LIST
3533: LIST
3534: LIST
3535: PUSH
3536: LD_INT 5
3538: PUSH
3539: LD_INT 86
3541: PUSH
3542: LD_INT 96
3544: PUSH
3545: LD_INT 3
3547: PUSH
3548: LD_INT 0
3550: PUSH
3551: LD_INT 0
3553: PUSH
3554: EMPTY
3555: LIST
3556: LIST
3557: LIST
3558: LIST
3559: LIST
3560: LIST
3561: PUSH
3562: LD_INT 33
3564: PUSH
3565: LD_INT 91
3567: PUSH
3568: LD_INT 102
3570: PUSH
3571: LD_INT 4
3573: PUSH
3574: LD_INT 0
3576: PUSH
3577: LD_INT 0
3579: PUSH
3580: EMPTY
3581: LIST
3582: LIST
3583: LIST
3584: LIST
3585: LIST
3586: LIST
3587: PUSH
3588: LD_INT 32
3590: PUSH
3591: LD_INT 80
3593: PUSH
3594: LD_INT 95
3596: PUSH
3597: LD_INT 3
3599: PUSH
3600: LD_INT 0
3602: PUSH
3603: LD_INT 0
3605: PUSH
3606: EMPTY
3607: LIST
3608: LIST
3609: LIST
3610: LIST
3611: LIST
3612: LIST
3613: PUSH
3614: LD_INT 28
3616: PUSH
3617: LD_INT 77
3619: PUSH
3620: LD_INT 105
3622: PUSH
3623: LD_INT 3
3625: PUSH
3626: LD_INT 0
3628: PUSH
3629: LD_INT 0
3631: PUSH
3632: EMPTY
3633: LIST
3634: LIST
3635: LIST
3636: LIST
3637: LIST
3638: LIST
3639: PUSH
3640: LD_INT 28
3642: PUSH
3643: LD_INT 85
3645: PUSH
3646: LD_INT 113
3648: PUSH
3649: LD_INT 3
3651: PUSH
3652: LD_INT 0
3654: PUSH
3655: LD_INT 0
3657: PUSH
3658: EMPTY
3659: LIST
3660: LIST
3661: LIST
3662: LIST
3663: LIST
3664: LIST
3665: PUSH
3666: LD_INT 28
3668: PUSH
3669: LD_INT 55
3671: PUSH
3672: LD_INT 97
3674: PUSH
3675: LD_INT 3
3677: PUSH
3678: LD_INT 0
3680: PUSH
3681: LD_INT 0
3683: PUSH
3684: EMPTY
3685: LIST
3686: LIST
3687: LIST
3688: LIST
3689: LIST
3690: LIST
3691: PUSH
3692: LD_INT 28
3694: PUSH
3695: LD_INT 88
3697: PUSH
3698: LD_INT 128
3700: PUSH
3701: LD_INT 3
3703: PUSH
3704: LD_INT 0
3706: PUSH
3707: LD_INT 0
3709: PUSH
3710: EMPTY
3711: LIST
3712: LIST
3713: LIST
3714: LIST
3715: LIST
3716: LIST
3717: PUSH
3718: LD_INT 32
3720: PUSH
3721: LD_INT 69
3723: PUSH
3724: LD_INT 101
3726: PUSH
3727: LD_INT 2
3729: PUSH
3730: LD_INT 0
3732: PUSH
3733: LD_INT 0
3735: PUSH
3736: EMPTY
3737: LIST
3738: LIST
3739: LIST
3740: LIST
3741: LIST
3742: LIST
3743: PUSH
3744: LD_INT 1
3746: PUSH
3747: LD_INT 34
3749: PUSH
3750: LD_INT 23
3752: PUSH
3753: LD_INT 4
3755: PUSH
3756: LD_INT 0
3758: PUSH
3759: LD_INT 0
3761: PUSH
3762: EMPTY
3763: LIST
3764: LIST
3765: LIST
3766: LIST
3767: LIST
3768: LIST
3769: PUSH
3770: LD_INT 8
3772: PUSH
3773: LD_INT 25
3775: PUSH
3776: LD_INT 4
3778: PUSH
3779: LD_INT 3
3781: PUSH
3782: LD_INT 11
3784: PUSH
3785: LD_INT 10
3787: PUSH
3788: EMPTY
3789: LIST
3790: LIST
3791: LIST
3792: LIST
3793: LIST
3794: LIST
3795: PUSH
3796: LD_INT 8
3798: PUSH
3799: LD_INT 15
3801: PUSH
3802: LD_INT 4
3804: PUSH
3805: LD_INT 2
3807: PUSH
3808: LD_INT 14
3810: PUSH
3811: LD_INT 12
3813: PUSH
3814: EMPTY
3815: LIST
3816: LIST
3817: LIST
3818: LIST
3819: LIST
3820: LIST
3821: PUSH
3822: LD_INT 29
3824: PUSH
3825: LD_INT 55
3827: PUSH
3828: LD_INT 35
3830: PUSH
3831: LD_INT 2
3833: PUSH
3834: LD_INT 0
3836: PUSH
3837: LD_INT 0
3839: PUSH
3840: EMPTY
3841: LIST
3842: LIST
3843: LIST
3844: LIST
3845: LIST
3846: LIST
3847: PUSH
3848: LD_INT 29
3850: PUSH
3851: LD_INT 24
3853: PUSH
3854: LD_INT 44
3856: PUSH
3857: LD_INT 2
3859: PUSH
3860: LD_INT 0
3862: PUSH
3863: LD_INT 0
3865: PUSH
3866: EMPTY
3867: LIST
3868: LIST
3869: LIST
3870: LIST
3871: LIST
3872: LIST
3873: PUSH
3874: LD_INT 34
3876: PUSH
3877: LD_INT 34
3879: PUSH
3880: LD_INT 32
3882: PUSH
3883: LD_INT 4
3885: PUSH
3886: LD_INT 0
3888: PUSH
3889: LD_INT 0
3891: PUSH
3892: EMPTY
3893: LIST
3894: LIST
3895: LIST
3896: LIST
3897: LIST
3898: LIST
3899: PUSH
3900: LD_INT 3
3902: PUSH
3903: LD_INT 14
3905: PUSH
3906: LD_INT 16
3908: PUSH
3909: LD_INT 1
3911: PUSH
3912: LD_INT 0
3914: PUSH
3915: LD_INT 0
3917: PUSH
3918: EMPTY
3919: LIST
3920: LIST
3921: LIST
3922: LIST
3923: LIST
3924: LIST
3925: PUSH
3926: LD_INT 24
3928: PUSH
3929: LD_INT 10
3931: PUSH
3932: LD_INT 16
3934: PUSH
3935: LD_INT 1
3937: PUSH
3938: LD_INT 0
3940: PUSH
3941: LD_INT 0
3943: PUSH
3944: EMPTY
3945: LIST
3946: LIST
3947: LIST
3948: LIST
3949: LIST
3950: LIST
3951: PUSH
3952: LD_INT 21
3954: PUSH
3955: LD_INT 11
3957: PUSH
3958: LD_INT 13
3960: PUSH
3961: LD_INT 2
3963: PUSH
3964: LD_INT 0
3966: PUSH
3967: LD_INT 0
3969: PUSH
3970: EMPTY
3971: LIST
3972: LIST
3973: LIST
3974: LIST
3975: LIST
3976: LIST
3977: PUSH
3978: LD_INT 18
3980: PUSH
3981: LD_INT 14
3983: PUSH
3984: LD_INT 12
3986: PUSH
3987: LD_INT 3
3989: PUSH
3990: LD_INT 0
3992: PUSH
3993: LD_INT 0
3995: PUSH
3996: EMPTY
3997: LIST
3998: LIST
3999: LIST
4000: LIST
4001: LIST
4002: LIST
4003: PUSH
4004: LD_INT 16
4006: PUSH
4007: LD_INT 14
4009: PUSH
4010: LD_INT 19
4012: PUSH
4013: LD_INT 0
4015: PUSH
4016: LD_INT 0
4018: PUSH
4019: LD_INT 0
4021: PUSH
4022: EMPTY
4023: LIST
4024: LIST
4025: LIST
4026: LIST
4027: LIST
4028: LIST
4029: PUSH
4030: LD_INT 17
4032: PUSH
4033: LD_INT 18
4035: PUSH
4036: LD_INT 20
4038: PUSH
4039: LD_INT 5
4041: PUSH
4042: LD_INT 0
4044: PUSH
4045: LD_INT 0
4047: PUSH
4048: EMPTY
4049: LIST
4050: LIST
4051: LIST
4052: LIST
4053: LIST
4054: LIST
4055: PUSH
4056: LD_INT 28
4058: PUSH
4059: LD_INT 10
4061: PUSH
4062: LD_INT 5
4064: PUSH
4065: LD_INT 1
4067: PUSH
4068: LD_INT 0
4070: PUSH
4071: LD_INT 0
4073: PUSH
4074: EMPTY
4075: LIST
4076: LIST
4077: LIST
4078: LIST
4079: LIST
4080: LIST
4081: PUSH
4082: LD_INT 28
4084: PUSH
4085: LD_INT 8
4087: PUSH
4088: LD_INT 8
4090: PUSH
4091: LD_INT 1
4093: PUSH
4094: LD_INT 0
4096: PUSH
4097: LD_INT 0
4099: PUSH
4100: EMPTY
4101: LIST
4102: LIST
4103: LIST
4104: LIST
4105: LIST
4106: LIST
4107: PUSH
4108: LD_INT 26
4110: PUSH
4111: LD_INT 19
4113: PUSH
4114: LD_INT 2
4116: PUSH
4117: LD_INT 1
4119: PUSH
4120: LD_INT 0
4122: PUSH
4123: LD_INT 0
4125: PUSH
4126: EMPTY
4127: LIST
4128: LIST
4129: LIST
4130: LIST
4131: LIST
4132: LIST
4133: PUSH
4134: LD_INT 26
4136: PUSH
4137: LD_INT 30
4139: PUSH
4140: LD_INT 2
4142: PUSH
4143: LD_INT 1
4145: PUSH
4146: LD_INT 0
4148: PUSH
4149: LD_INT 0
4151: PUSH
4152: EMPTY
4153: LIST
4154: LIST
4155: LIST
4156: LIST
4157: LIST
4158: LIST
4159: PUSH
4160: LD_INT 5
4162: PUSH
4163: LD_INT 59
4165: PUSH
4166: LD_INT 20
4168: PUSH
4169: LD_INT 4
4171: PUSH
4172: LD_INT 0
4174: PUSH
4175: LD_INT 0
4177: PUSH
4178: EMPTY
4179: LIST
4180: LIST
4181: LIST
4182: LIST
4183: LIST
4184: LIST
4185: PUSH
4186: LD_INT 32
4188: PUSH
4189: LD_INT 60
4191: PUSH
4192: LD_INT 24
4194: PUSH
4195: LD_INT 4
4197: PUSH
4198: LD_INT 0
4200: PUSH
4201: LD_INT 0
4203: PUSH
4204: EMPTY
4205: LIST
4206: LIST
4207: LIST
4208: LIST
4209: LIST
4210: LIST
4211: PUSH
4212: LD_INT 32
4214: PUSH
4215: LD_INT 61
4217: PUSH
4218: LD_INT 45
4220: PUSH
4221: LD_INT 5
4223: PUSH
4224: LD_INT 0
4226: PUSH
4227: LD_INT 0
4229: PUSH
4230: EMPTY
4231: LIST
4232: LIST
4233: LIST
4234: LIST
4235: LIST
4236: LIST
4237: PUSH
4238: LD_INT 32
4240: PUSH
4241: LD_INT 52
4243: PUSH
4244: LD_INT 51
4246: PUSH
4247: LD_INT 5
4249: PUSH
4250: LD_INT 0
4252: PUSH
4253: LD_INT 0
4255: PUSH
4256: EMPTY
4257: LIST
4258: LIST
4259: LIST
4260: LIST
4261: LIST
4262: LIST
4263: PUSH
4264: LD_INT 33
4266: PUSH
4267: LD_INT 56
4269: PUSH
4270: LD_INT 51
4272: PUSH
4273: LD_INT 5
4275: PUSH
4276: LD_INT 0
4278: PUSH
4279: LD_INT 0
4281: PUSH
4282: EMPTY
4283: LIST
4284: LIST
4285: LIST
4286: LIST
4287: LIST
4288: LIST
4289: PUSH
4290: LD_INT 33
4292: PUSH
4293: LD_INT 62
4295: PUSH
4296: LD_INT 49
4298: PUSH
4299: LD_INT 5
4301: PUSH
4302: LD_INT 0
4304: PUSH
4305: LD_INT 0
4307: PUSH
4308: EMPTY
4309: LIST
4310: LIST
4311: LIST
4312: LIST
4313: LIST
4314: LIST
4315: PUSH
4316: LD_INT 33
4318: PUSH
4319: LD_INT 41
4321: PUSH
4322: LD_INT 47
4324: PUSH
4325: LD_INT 5
4327: PUSH
4328: LD_INT 0
4330: PUSH
4331: LD_INT 0
4333: PUSH
4334: EMPTY
4335: LIST
4336: LIST
4337: LIST
4338: LIST
4339: LIST
4340: LIST
4341: PUSH
4342: LD_INT 33
4344: PUSH
4345: LD_INT 33
4347: PUSH
4348: LD_INT 52
4350: PUSH
4351: LD_INT 5
4353: PUSH
4354: LD_INT 0
4356: PUSH
4357: LD_INT 0
4359: PUSH
4360: EMPTY
4361: LIST
4362: LIST
4363: LIST
4364: LIST
4365: LIST
4366: LIST
4367: PUSH
4368: LD_INT 5
4370: PUSH
4371: LD_INT 31
4373: PUSH
4374: LD_INT 40
4376: PUSH
4377: LD_INT 0
4379: PUSH
4380: LD_INT 0
4382: PUSH
4383: LD_INT 0
4385: PUSH
4386: EMPTY
4387: LIST
4388: LIST
4389: LIST
4390: LIST
4391: LIST
4392: LIST
4393: PUSH
4394: LD_INT 33
4396: PUSH
4397: LD_INT 65
4399: PUSH
4400: LD_INT 37
4402: PUSH
4403: LD_INT 5
4405: PUSH
4406: LD_INT 0
4408: PUSH
4409: LD_INT 0
4411: PUSH
4412: EMPTY
4413: LIST
4414: LIST
4415: LIST
4416: LIST
4417: LIST
4418: LIST
4419: PUSH
4420: LD_INT 33
4422: PUSH
4423: LD_INT 63
4425: PUSH
4426: LD_INT 29
4428: PUSH
4429: LD_INT 4
4431: PUSH
4432: LD_INT 0
4434: PUSH
4435: LD_INT 0
4437: PUSH
4438: EMPTY
4439: LIST
4440: LIST
4441: LIST
4442: LIST
4443: LIST
4444: LIST
4445: PUSH
4446: LD_INT 33
4448: PUSH
4449: LD_INT 54
4451: PUSH
4452: LD_INT 11
4454: PUSH
4455: LD_INT 4
4457: PUSH
4458: LD_INT 0
4460: PUSH
4461: LD_INT 0
4463: PUSH
4464: EMPTY
4465: LIST
4466: LIST
4467: LIST
4468: LIST
4469: LIST
4470: LIST
4471: PUSH
4472: LD_INT 33
4474: PUSH
4475: LD_INT 56
4477: PUSH
4478: LD_INT 15
4480: PUSH
4481: LD_INT 4
4483: PUSH
4484: LD_INT 0
4486: PUSH
4487: LD_INT 0
4489: PUSH
4490: EMPTY
4491: LIST
4492: LIST
4493: LIST
4494: LIST
4495: LIST
4496: LIST
4497: PUSH
4498: LD_INT 33
4500: PUSH
4501: LD_INT 51
4503: PUSH
4504: LD_INT 6
4506: PUSH
4507: LD_INT 4
4509: PUSH
4510: LD_INT 0
4512: PUSH
4513: LD_INT 0
4515: PUSH
4516: EMPTY
4517: LIST
4518: LIST
4519: LIST
4520: LIST
4521: LIST
4522: LIST
4523: PUSH
4524: LD_INT 26
4526: PUSH
4527: LD_INT 39
4529: PUSH
4530: LD_INT 25
4532: PUSH
4533: LD_INT 0
4535: PUSH
4536: LD_INT 0
4538: PUSH
4539: LD_INT 0
4541: PUSH
4542: EMPTY
4543: LIST
4544: LIST
4545: LIST
4546: LIST
4547: LIST
4548: LIST
4549: PUSH
4550: LD_INT 26
4552: PUSH
4553: LD_INT 37
4555: PUSH
4556: LD_INT 21
4558: PUSH
4559: LD_INT 0
4561: PUSH
4562: LD_INT 0
4564: PUSH
4565: LD_INT 0
4567: PUSH
4568: EMPTY
4569: LIST
4570: LIST
4571: LIST
4572: LIST
4573: LIST
4574: LIST
4575: PUSH
4576: LD_INT 32
4578: PUSH
4579: LD_INT 35
4581: PUSH
4582: LD_INT 17
4584: PUSH
4585: LD_INT 4
4587: PUSH
4588: LD_INT 0
4590: PUSH
4591: LD_INT 0
4593: PUSH
4594: EMPTY
4595: LIST
4596: LIST
4597: LIST
4598: LIST
4599: LIST
4600: LIST
4601: PUSH
4602: LD_INT 33
4604: PUSH
4605: LD_INT 35
4607: PUSH
4608: LD_INT 28
4610: PUSH
4611: LD_INT 4
4613: PUSH
4614: LD_INT 0
4616: PUSH
4617: LD_INT 0
4619: PUSH
4620: EMPTY
4621: LIST
4622: LIST
4623: LIST
4624: LIST
4625: LIST
4626: LIST
4627: PUSH
4628: LD_INT 33
4630: PUSH
4631: LD_INT 28
4633: PUSH
4634: LD_INT 46
4636: PUSH
4637: LD_INT 5
4639: PUSH
4640: LD_INT 0
4642: PUSH
4643: LD_INT 0
4645: PUSH
4646: EMPTY
4647: LIST
4648: LIST
4649: LIST
4650: LIST
4651: LIST
4652: LIST
4653: PUSH
4654: LD_INT 33
4656: PUSH
4657: LD_INT 31
4659: PUSH
4660: LD_INT 6
4662: PUSH
4663: LD_INT 4
4665: PUSH
4666: LD_INT 0
4668: PUSH
4669: LD_INT 0
4671: PUSH
4672: EMPTY
4673: LIST
4674: LIST
4675: LIST
4676: LIST
4677: LIST
4678: LIST
4679: PUSH
4680: LD_INT 26
4682: PUSH
4683: LD_INT 54
4685: PUSH
4686: LD_INT 38
4688: PUSH
4689: LD_INT 4
4691: PUSH
4692: LD_INT 0
4694: PUSH
4695: LD_INT 0
4697: PUSH
4698: EMPTY
4699: LIST
4700: LIST
4701: LIST
4702: LIST
4703: LIST
4704: LIST
4705: PUSH
4706: LD_INT 33
4708: PUSH
4709: LD_INT 207
4711: PUSH
4712: LD_INT 167
4714: PUSH
4715: LD_INT 3
4717: PUSH
4718: LD_INT 0
4720: PUSH
4721: LD_INT 0
4723: PUSH
4724: EMPTY
4725: LIST
4726: LIST
4727: LIST
4728: LIST
4729: LIST
4730: LIST
4731: PUSH
4732: LD_INT 30
4734: PUSH
4735: LD_INT 43
4737: PUSH
4738: LD_INT 2
4740: PUSH
4741: LD_INT 4
4743: PUSH
4744: LD_INT 0
4746: PUSH
4747: LD_INT 0
4749: PUSH
4750: EMPTY
4751: LIST
4752: LIST
4753: LIST
4754: LIST
4755: LIST
4756: LIST
4757: PUSH
4758: EMPTY
4759: LIST
4760: LIST
4761: LIST
4762: LIST
4763: LIST
4764: LIST
4765: LIST
4766: LIST
4767: LIST
4768: LIST
4769: LIST
4770: LIST
4771: LIST
4772: LIST
4773: LIST
4774: LIST
4775: LIST
4776: LIST
4777: LIST
4778: LIST
4779: LIST
4780: LIST
4781: LIST
4782: LIST
4783: LIST
4784: LIST
4785: LIST
4786: LIST
4787: LIST
4788: LIST
4789: LIST
4790: LIST
4791: LIST
4792: LIST
4793: LIST
4794: LIST
4795: LIST
4796: LIST
4797: LIST
4798: LIST
4799: LIST
4800: LIST
4801: LIST
4802: LIST
4803: LIST
4804: LIST
4805: LIST
4806: LIST
4807: LIST
4808: LIST
4809: LIST
4810: LIST
4811: LIST
4812: LIST
4813: LIST
4814: LIST
4815: LIST
4816: LIST
4817: LIST
4818: LIST
4819: LIST
4820: LIST
4821: LIST
4822: LIST
4823: LIST
4824: LIST
4825: LIST
4826: LIST
4827: LIST
4828: LIST
4829: LIST
4830: LIST
4831: LIST
4832: LIST
4833: LIST
4834: LIST
4835: LIST
4836: LIST
4837: LIST
4838: LIST
4839: LIST
4840: LIST
4841: LIST
4842: LIST
4843: LIST
4844: ST_TO_ADDR
// for i in tmp do
4845: LD_ADDR_VAR 0 2
4849: PUSH
4850: LD_VAR 0 4
4854: PUSH
4855: FOR_IN
4856: IFFALSE 5087
// begin uc_side := side ;
4858: LD_ADDR_OWVAR 20
4862: PUSH
4863: LD_VAR 0 5
4867: ST_TO_ADDR
// uc_nation := nation_russian ;
4868: LD_ADDR_OWVAR 21
4872: PUSH
4873: LD_INT 3
4875: ST_TO_ADDR
// bc_type := i [ 1 ] ;
4876: LD_ADDR_OWVAR 42
4880: PUSH
4881: LD_VAR 0 2
4885: PUSH
4886: LD_INT 1
4888: ARRAY
4889: ST_TO_ADDR
// bc_level := rand ( 5 , 6 ) ;
4890: LD_ADDR_OWVAR 43
4894: PUSH
4895: LD_INT 5
4897: PPUSH
4898: LD_INT 6
4900: PPUSH
4901: CALL_OW 12
4905: ST_TO_ADDR
// bc_kind1 := i [ 5 ] ;
4906: LD_ADDR_OWVAR 44
4910: PUSH
4911: LD_VAR 0 2
4915: PUSH
4916: LD_INT 5
4918: ARRAY
4919: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
4920: LD_ADDR_OWVAR 45
4924: PUSH
4925: LD_VAR 0 2
4929: PUSH
4930: LD_INT 6
4932: ARRAY
4933: ST_TO_ADDR
// sr := 0 ;
4934: LD_ADDR_VAR 0 6
4938: PUSH
4939: LD_INT 0
4941: ST_TO_ADDR
// if i [ 1 ] = b_oil_mine then
4942: LD_VAR 0 2
4946: PUSH
4947: LD_INT 1
4949: ARRAY
4950: PUSH
4951: LD_INT 29
4953: EQUAL
4954: IFFALSE 4966
// sr := mat_oil else
4956: LD_ADDR_VAR 0 6
4960: PUSH
4961: LD_INT 2
4963: ST_TO_ADDR
4964: GO 4988
// if i [ 1 ] = b_siberite_mine then
4966: LD_VAR 0 2
4970: PUSH
4971: LD_INT 1
4973: ARRAY
4974: PUSH
4975: LD_INT 30
4977: EQUAL
4978: IFFALSE 4988
// sr := mat_siberit ;
4980: LD_ADDR_VAR 0 6
4984: PUSH
4985: LD_INT 3
4987: ST_TO_ADDR
// if sr then
4988: LD_VAR 0 6
4992: IFFALSE 5048
// begin CreateDepositXY ( i [ 2 ] , i [ 3 ] , sr ) ;
4994: LD_VAR 0 2
4998: PUSH
4999: LD_INT 2
5001: ARRAY
5002: PPUSH
5003: LD_VAR 0 2
5007: PUSH
5008: LD_INT 3
5010: ARRAY
5011: PPUSH
5012: LD_VAR 0 6
5016: PPUSH
5017: CALL_OW 62
// SetResourceVisibility ( i [ 2 ] , i [ 3 ] , side ) ;
5021: LD_VAR 0 2
5025: PUSH
5026: LD_INT 2
5028: ARRAY
5029: PPUSH
5030: LD_VAR 0 2
5034: PUSH
5035: LD_INT 3
5037: ARRAY
5038: PPUSH
5039: LD_VAR 0 5
5043: PPUSH
5044: CALL_OW 441
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
5048: LD_ADDR_VAR 0 3
5052: PUSH
5053: LD_VAR 0 2
5057: PUSH
5058: LD_INT 2
5060: ARRAY
5061: PPUSH
5062: LD_VAR 0 2
5066: PUSH
5067: LD_INT 3
5069: ARRAY
5070: PPUSH
5071: LD_VAR 0 2
5075: PUSH
5076: LD_INT 4
5078: ARRAY
5079: PPUSH
5080: CALL_OW 47
5084: ST_TO_ADDR
// end ;
5085: GO 4855
5087: POP
5088: POP
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
5089: LD_ADDR_VAR 0 7
5093: PUSH
5094: LD_INT 22
5096: PUSH
5097: LD_VAR 0 5
5101: PUSH
5102: EMPTY
5103: LIST
5104: LIST
5105: PUSH
5106: LD_INT 30
5108: PUSH
5109: LD_INT 1
5111: PUSH
5112: EMPTY
5113: LIST
5114: LIST
5115: PUSH
5116: EMPTY
5117: LIST
5118: LIST
5119: PPUSH
5120: CALL_OW 69
5124: ST_TO_ADDR
// if not depot then
5125: LD_VAR 0 7
5129: NOT
5130: IFFALSE 5134
// exit ;
5132: GO 5478
// base := PrepareBase ( HexInfo ( 84 , 128 ) , rus1Base , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 3000 , 300 , 100 ] , [ 12 , 6 , 6 , 4 ] ) ;
5134: LD_ADDR_VAR 0 8
5138: PUSH
5139: LD_INT 84
5141: PPUSH
5142: LD_INT 128
5144: PPUSH
5145: CALL_OW 428
5149: PPUSH
5150: LD_INT 15
5152: PPUSH
5153: LD_INT 0
5155: PPUSH
5156: LD_INT 6
5158: PUSH
5159: LD_INT 7
5161: PUSH
5162: LD_INT 8
5164: PUSH
5165: EMPTY
5166: LIST
5167: LIST
5168: LIST
5169: PUSH
5170: LD_OWVAR 67
5174: ARRAY
5175: PPUSH
5176: LD_INT 3000
5178: PUSH
5179: LD_INT 300
5181: PUSH
5182: LD_INT 100
5184: PUSH
5185: EMPTY
5186: LIST
5187: LIST
5188: LIST
5189: PPUSH
5190: LD_INT 12
5192: PUSH
5193: LD_INT 6
5195: PUSH
5196: LD_INT 6
5198: PUSH
5199: LD_INT 4
5201: PUSH
5202: EMPTY
5203: LIST
5204: LIST
5205: LIST
5206: LIST
5207: PPUSH
5208: CALL 29773 0 6
5212: ST_TO_ADDR
// if not base then
5213: LD_VAR 0 8
5217: NOT
5218: IFFALSE 5222
// exit ;
5220: GO 5478
// mc_bases := Replace ( mc_bases , mc_rus_1 , base ) ;
5222: LD_ADDR_EXP 36
5226: PUSH
5227: LD_EXP 36
5231: PPUSH
5232: LD_EXP 7
5236: PPUSH
5237: LD_VAR 0 8
5241: PPUSH
5242: CALL_OW 1
5246: ST_TO_ADDR
// base := PrepareBase ( HexInfo ( 34 , 23 ) , rus2Base , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 20000 , 3000 , 1000 ] , [ 12 , 6 , 6 , 4 ] ) ;
5247: LD_ADDR_VAR 0 8
5251: PUSH
5252: LD_INT 34
5254: PPUSH
5255: LD_INT 23
5257: PPUSH
5258: CALL_OW 428
5262: PPUSH
5263: LD_INT 11
5265: PPUSH
5266: LD_INT 0
5268: PPUSH
5269: LD_INT 6
5271: PUSH
5272: LD_INT 7
5274: PUSH
5275: LD_INT 8
5277: PUSH
5278: EMPTY
5279: LIST
5280: LIST
5281: LIST
5282: PUSH
5283: LD_OWVAR 67
5287: ARRAY
5288: PPUSH
5289: LD_INT 20000
5291: PUSH
5292: LD_INT 3000
5294: PUSH
5295: LD_INT 1000
5297: PUSH
5298: EMPTY
5299: LIST
5300: LIST
5301: LIST
5302: PPUSH
5303: LD_INT 12
5305: PUSH
5306: LD_INT 6
5308: PUSH
5309: LD_INT 6
5311: PUSH
5312: LD_INT 4
5314: PUSH
5315: EMPTY
5316: LIST
5317: LIST
5318: LIST
5319: LIST
5320: PPUSH
5321: CALL 29773 0 6
5325: ST_TO_ADDR
// if not base then
5326: LD_VAR 0 8
5330: NOT
5331: IFFALSE 5335
// exit ;
5333: GO 5478
// mc_bases := Replace ( mc_bases , mc_rus_2 , base ) ;
5335: LD_ADDR_EXP 36
5339: PUSH
5340: LD_EXP 36
5344: PPUSH
5345: LD_EXP 8
5349: PPUSH
5350: LD_VAR 0 8
5354: PPUSH
5355: CALL_OW 1
5359: ST_TO_ADDR
// ruOutpost := PrepareBase ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_depot ] ] ) [ 1 ] , ruOutpostArea , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 500 , 100 , 10 ] , [ [ 6 , 7 , 8 ] [ Difficulty ] , 2 , 0 , 1 ] ) ;
5360: LD_ADDR_EXP 14
5364: PUSH
5365: LD_INT 22
5367: PUSH
5368: LD_INT 3
5370: PUSH
5371: EMPTY
5372: LIST
5373: LIST
5374: PUSH
5375: LD_INT 30
5377: PUSH
5378: LD_INT 0
5380: PUSH
5381: EMPTY
5382: LIST
5383: LIST
5384: PUSH
5385: EMPTY
5386: LIST
5387: LIST
5388: PPUSH
5389: CALL_OW 69
5393: PUSH
5394: LD_INT 1
5396: ARRAY
5397: PPUSH
5398: LD_INT 25
5400: PPUSH
5401: LD_INT 0
5403: PPUSH
5404: LD_INT 6
5406: PUSH
5407: LD_INT 7
5409: PUSH
5410: LD_INT 8
5412: PUSH
5413: EMPTY
5414: LIST
5415: LIST
5416: LIST
5417: PUSH
5418: LD_OWVAR 67
5422: ARRAY
5423: PPUSH
5424: LD_INT 500
5426: PUSH
5427: LD_INT 100
5429: PUSH
5430: LD_INT 10
5432: PUSH
5433: EMPTY
5434: LIST
5435: LIST
5436: LIST
5437: PPUSH
5438: LD_INT 6
5440: PUSH
5441: LD_INT 7
5443: PUSH
5444: LD_INT 8
5446: PUSH
5447: EMPTY
5448: LIST
5449: LIST
5450: LIST
5451: PUSH
5452: LD_OWVAR 67
5456: ARRAY
5457: PUSH
5458: LD_INT 2
5460: PUSH
5461: LD_INT 0
5463: PUSH
5464: LD_INT 1
5466: PUSH
5467: EMPTY
5468: LIST
5469: LIST
5470: LIST
5471: LIST
5472: PPUSH
5473: CALL 29773 0 6
5477: ST_TO_ADDR
// end ;
5478: LD_VAR 0 1
5482: RET
// export function PrepareLegion ; var i , b , veh , tmp , tmp2 , cameras , side , sr , depot , base ; begin
5483: LD_INT 0
5485: PPUSH
5486: PPUSH
5487: PPUSH
5488: PPUSH
5489: PPUSH
5490: PPUSH
5491: PPUSH
5492: PPUSH
5493: PPUSH
5494: PPUSH
5495: PPUSH
// PrepareNature ( 0 , 0 , 6 , 0 , 0 , 0 , 0 , legApe , 0 ) ;
5496: LD_INT 0
5498: PPUSH
5499: LD_INT 0
5501: PPUSH
5502: LD_INT 6
5504: PPUSH
5505: LD_INT 0
5507: PPUSH
5508: LD_INT 0
5510: PPUSH
5511: LD_INT 0
5513: PPUSH
5514: LD_INT 0
5516: PPUSH
5517: LD_INT 8
5519: PPUSH
5520: LD_INT 0
5522: PPUSH
5523: CALL 54178 0 9
// side := 8 ;
5527: LD_ADDR_VAR 0 8
5531: PUSH
5532: LD_INT 8
5534: ST_TO_ADDR
// tmp := AreaToList ( minesArea , 0 ) ;
5535: LD_ADDR_VAR 0 5
5539: PUSH
5540: LD_INT 20
5542: PPUSH
5543: LD_INT 0
5545: PPUSH
5546: CALL_OW 517
5550: ST_TO_ADDR
// if Difficulty > 2 then
5551: LD_OWVAR 67
5555: PUSH
5556: LD_INT 2
5558: GREATER
5559: IFFALSE 5703
// begin tmp2 := AreaToList ( minesArea2 , 0 ) ;
5561: LD_ADDR_VAR 0 6
5565: PUSH
5566: LD_INT 27
5568: PPUSH
5569: LD_INT 0
5571: PPUSH
5572: CALL_OW 517
5576: ST_TO_ADDR
// for i = 1 to tmp2 [ 1 ] do
5577: LD_ADDR_VAR 0 2
5581: PUSH
5582: DOUBLE
5583: LD_INT 1
5585: DEC
5586: ST_TO_ADDR
5587: LD_VAR 0 6
5591: PUSH
5592: LD_INT 1
5594: ARRAY
5595: PUSH
5596: FOR_TO
5597: IFFALSE 5701
// begin tmp := ReplaceIn ( tmp , [ 1 , tmp [ 1 ] + 1 ] , tmp2 [ 1 ] [ i ] ) ;
5599: LD_ADDR_VAR 0 5
5603: PUSH
5604: LD_VAR 0 5
5608: PPUSH
5609: LD_INT 1
5611: PUSH
5612: LD_VAR 0 5
5616: PUSH
5617: LD_INT 1
5619: ARRAY
5620: PUSH
5621: LD_INT 1
5623: PLUS
5624: PUSH
5625: EMPTY
5626: LIST
5627: LIST
5628: PPUSH
5629: LD_VAR 0 6
5633: PUSH
5634: LD_INT 1
5636: ARRAY
5637: PUSH
5638: LD_VAR 0 2
5642: ARRAY
5643: PPUSH
5644: CALL 26486 0 3
5648: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 2 , tmp [ 2 ] + 1 ] , tmp2 [ 2 ] [ i ] ) ;
5649: LD_ADDR_VAR 0 5
5653: PUSH
5654: LD_VAR 0 5
5658: PPUSH
5659: LD_INT 2
5661: PUSH
5662: LD_VAR 0 5
5666: PUSH
5667: LD_INT 2
5669: ARRAY
5670: PUSH
5671: LD_INT 1
5673: PLUS
5674: PUSH
5675: EMPTY
5676: LIST
5677: LIST
5678: PPUSH
5679: LD_VAR 0 6
5683: PUSH
5684: LD_INT 2
5686: ARRAY
5687: PUSH
5688: LD_VAR 0 2
5692: ARRAY
5693: PPUSH
5694: CALL 26486 0 3
5698: ST_TO_ADDR
// end ;
5699: GO 5596
5701: POP
5702: POP
// end ; if tmp then
5703: LD_VAR 0 5
5707: IFFALSE 5835
// begin for i = 1 to tmp [ 1 ] do
5709: LD_ADDR_VAR 0 2
5713: PUSH
5714: DOUBLE
5715: LD_INT 1
5717: DEC
5718: ST_TO_ADDR
5719: LD_VAR 0 5
5723: PUSH
5724: LD_INT 1
5726: ARRAY
5727: PUSH
5728: FOR_TO
5729: IFFALSE 5833
// begin PlaceMine ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side , 0 ) ;
5731: LD_VAR 0 5
5735: PUSH
5736: LD_INT 1
5738: ARRAY
5739: PUSH
5740: LD_VAR 0 2
5744: ARRAY
5745: PPUSH
5746: LD_VAR 0 5
5750: PUSH
5751: LD_INT 2
5753: ARRAY
5754: PUSH
5755: LD_VAR 0 2
5759: ARRAY
5760: PPUSH
5761: LD_VAR 0 8
5765: PPUSH
5766: LD_INT 0
5768: PPUSH
5769: CALL_OW 454
// staticMines := Insert ( staticMines , staticMines + 1 , [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ) ;
5773: LD_ADDR_EXP 16
5777: PUSH
5778: LD_EXP 16
5782: PPUSH
5783: LD_EXP 16
5787: PUSH
5788: LD_INT 1
5790: PLUS
5791: PPUSH
5792: LD_VAR 0 5
5796: PUSH
5797: LD_INT 1
5799: ARRAY
5800: PUSH
5801: LD_VAR 0 2
5805: ARRAY
5806: PUSH
5807: LD_VAR 0 5
5811: PUSH
5812: LD_INT 2
5814: ARRAY
5815: PUSH
5816: LD_VAR 0 2
5820: ARRAY
5821: PUSH
5822: EMPTY
5823: LIST
5824: LIST
5825: PPUSH
5826: CALL_OW 2
5830: ST_TO_ADDR
// end ;
5831: GO 5728
5833: POP
5834: POP
// end ; cameras := [ [ 165 , 156 ] , [ 143 , 145 ] , [ 152 , 165 ] , [ 123 , 153 ] , [ 161 , 215 ] , [ 172 , 100 ] , [ 148 , 83 ] , [ 122 , 68 ] , [ 105 , 74 ] , [ 113 , 97 ] ] ;
5835: LD_ADDR_VAR 0 7
5839: PUSH
5840: LD_INT 165
5842: PUSH
5843: LD_INT 156
5845: PUSH
5846: EMPTY
5847: LIST
5848: LIST
5849: PUSH
5850: LD_INT 143
5852: PUSH
5853: LD_INT 145
5855: PUSH
5856: EMPTY
5857: LIST
5858: LIST
5859: PUSH
5860: LD_INT 152
5862: PUSH
5863: LD_INT 165
5865: PUSH
5866: EMPTY
5867: LIST
5868: LIST
5869: PUSH
5870: LD_INT 123
5872: PUSH
5873: LD_INT 153
5875: PUSH
5876: EMPTY
5877: LIST
5878: LIST
5879: PUSH
5880: LD_INT 161
5882: PUSH
5883: LD_INT 215
5885: PUSH
5886: EMPTY
5887: LIST
5888: LIST
5889: PUSH
5890: LD_INT 172
5892: PUSH
5893: LD_INT 100
5895: PUSH
5896: EMPTY
5897: LIST
5898: LIST
5899: PUSH
5900: LD_INT 148
5902: PUSH
5903: LD_INT 83
5905: PUSH
5906: EMPTY
5907: LIST
5908: LIST
5909: PUSH
5910: LD_INT 122
5912: PUSH
5913: LD_INT 68
5915: PUSH
5916: EMPTY
5917: LIST
5918: LIST
5919: PUSH
5920: LD_INT 105
5922: PUSH
5923: LD_INT 74
5925: PUSH
5926: EMPTY
5927: LIST
5928: LIST
5929: PUSH
5930: LD_INT 113
5932: PUSH
5933: LD_INT 97
5935: PUSH
5936: EMPTY
5937: LIST
5938: LIST
5939: PUSH
5940: EMPTY
5941: LIST
5942: LIST
5943: LIST
5944: LIST
5945: LIST
5946: LIST
5947: LIST
5948: LIST
5949: LIST
5950: LIST
5951: ST_TO_ADDR
// for i in cameras do
5952: LD_ADDR_VAR 0 2
5956: PUSH
5957: LD_VAR 0 7
5961: PUSH
5962: FOR_IN
5963: IFFALSE 5994
// HiddenCamera ( i [ 1 ] , i [ 2 ] , side ) ;
5965: LD_VAR 0 2
5969: PUSH
5970: LD_INT 1
5972: ARRAY
5973: PPUSH
5974: LD_VAR 0 2
5978: PUSH
5979: LD_INT 2
5981: ARRAY
5982: PPUSH
5983: LD_VAR 0 8
5987: PPUSH
5988: CALL_OW 244
5992: GO 5962
5994: POP
5995: POP
// tmp := [ [ 1 , 144 , 110 , 1 , 0 , 0 ] , [ 3 , 151 , 118 , 0 , 0 , 0 ] , [ 8 , 158 , 110 , 4 , 10 , 15 ] , [ 23 , 154 , 121 , 5 , 0 , 0 ] , [ 22 , 155 , 118 , 4 , 0 , 0 ] , [ 21 , 151 , 122 , 0 , 0 , 0 ] , [ 18 , 148 , 118 , 1 , 0 , 0 ] , [ 17 , 147 , 114 , 2 , 0 , 0 ] , [ 29 , 163 , 120 , 5 , 0 , 0 ] , [ 27 , 137 , 116 , 3 , 0 , 0 ] , [ 27 , 133 , 111 , 1 , 0 , 0 ] , [ 27 , 132 , 106 , 4 , 0 , 0 ] , [ 26 , 137 , 111 , 0 , 0 , 0 ] , [ 8 , 141 , 117 , 1 , 13 , 11 ] , [ 30 , 140 , 128 , 1 , 0 , 0 ] , [ 5 , 146 , 96 , 3 , 0 , 0 ] , [ 32 , 150 , 98 , 3 , 0 , 0 ] , [ 32 , 142 , 95 , 3 , 0 , 0 ] , [ 32 , 159 , 104 , 3 , 0 , 0 ] , [ 32 , 133 , 95 , 3 , 0 , 0 ] , [ 32 , 131 , 102 , 2 , 0 , 0 ] , [ 32 , 164 , 144 , 0 , 0 , 0 ] , [ 32 , 146 , 139 , 0 , 0 , 0 ] , [ 26 , 143 , 122 , 4 , 0 , 0 ] , [ 26 , 164 , 116 , 2 , 0 , 0 ] , ] ;
5996: LD_ADDR_VAR 0 5
6000: PUSH
6001: LD_INT 1
6003: PUSH
6004: LD_INT 144
6006: PUSH
6007: LD_INT 110
6009: PUSH
6010: LD_INT 1
6012: PUSH
6013: LD_INT 0
6015: PUSH
6016: LD_INT 0
6018: PUSH
6019: EMPTY
6020: LIST
6021: LIST
6022: LIST
6023: LIST
6024: LIST
6025: LIST
6026: PUSH
6027: LD_INT 3
6029: PUSH
6030: LD_INT 151
6032: PUSH
6033: LD_INT 118
6035: PUSH
6036: LD_INT 0
6038: PUSH
6039: LD_INT 0
6041: PUSH
6042: LD_INT 0
6044: PUSH
6045: EMPTY
6046: LIST
6047: LIST
6048: LIST
6049: LIST
6050: LIST
6051: LIST
6052: PUSH
6053: LD_INT 8
6055: PUSH
6056: LD_INT 158
6058: PUSH
6059: LD_INT 110
6061: PUSH
6062: LD_INT 4
6064: PUSH
6065: LD_INT 10
6067: PUSH
6068: LD_INT 15
6070: PUSH
6071: EMPTY
6072: LIST
6073: LIST
6074: LIST
6075: LIST
6076: LIST
6077: LIST
6078: PUSH
6079: LD_INT 23
6081: PUSH
6082: LD_INT 154
6084: PUSH
6085: LD_INT 121
6087: PUSH
6088: LD_INT 5
6090: PUSH
6091: LD_INT 0
6093: PUSH
6094: LD_INT 0
6096: PUSH
6097: EMPTY
6098: LIST
6099: LIST
6100: LIST
6101: LIST
6102: LIST
6103: LIST
6104: PUSH
6105: LD_INT 22
6107: PUSH
6108: LD_INT 155
6110: PUSH
6111: LD_INT 118
6113: PUSH
6114: LD_INT 4
6116: PUSH
6117: LD_INT 0
6119: PUSH
6120: LD_INT 0
6122: PUSH
6123: EMPTY
6124: LIST
6125: LIST
6126: LIST
6127: LIST
6128: LIST
6129: LIST
6130: PUSH
6131: LD_INT 21
6133: PUSH
6134: LD_INT 151
6136: PUSH
6137: LD_INT 122
6139: PUSH
6140: LD_INT 0
6142: PUSH
6143: LD_INT 0
6145: PUSH
6146: LD_INT 0
6148: PUSH
6149: EMPTY
6150: LIST
6151: LIST
6152: LIST
6153: LIST
6154: LIST
6155: LIST
6156: PUSH
6157: LD_INT 18
6159: PUSH
6160: LD_INT 148
6162: PUSH
6163: LD_INT 118
6165: PUSH
6166: LD_INT 1
6168: PUSH
6169: LD_INT 0
6171: PUSH
6172: LD_INT 0
6174: PUSH
6175: EMPTY
6176: LIST
6177: LIST
6178: LIST
6179: LIST
6180: LIST
6181: LIST
6182: PUSH
6183: LD_INT 17
6185: PUSH
6186: LD_INT 147
6188: PUSH
6189: LD_INT 114
6191: PUSH
6192: LD_INT 2
6194: PUSH
6195: LD_INT 0
6197: PUSH
6198: LD_INT 0
6200: PUSH
6201: EMPTY
6202: LIST
6203: LIST
6204: LIST
6205: LIST
6206: LIST
6207: LIST
6208: PUSH
6209: LD_INT 29
6211: PUSH
6212: LD_INT 163
6214: PUSH
6215: LD_INT 120
6217: PUSH
6218: LD_INT 5
6220: PUSH
6221: LD_INT 0
6223: PUSH
6224: LD_INT 0
6226: PUSH
6227: EMPTY
6228: LIST
6229: LIST
6230: LIST
6231: LIST
6232: LIST
6233: LIST
6234: PUSH
6235: LD_INT 27
6237: PUSH
6238: LD_INT 137
6240: PUSH
6241: LD_INT 116
6243: PUSH
6244: LD_INT 3
6246: PUSH
6247: LD_INT 0
6249: PUSH
6250: LD_INT 0
6252: PUSH
6253: EMPTY
6254: LIST
6255: LIST
6256: LIST
6257: LIST
6258: LIST
6259: LIST
6260: PUSH
6261: LD_INT 27
6263: PUSH
6264: LD_INT 133
6266: PUSH
6267: LD_INT 111
6269: PUSH
6270: LD_INT 1
6272: PUSH
6273: LD_INT 0
6275: PUSH
6276: LD_INT 0
6278: PUSH
6279: EMPTY
6280: LIST
6281: LIST
6282: LIST
6283: LIST
6284: LIST
6285: LIST
6286: PUSH
6287: LD_INT 27
6289: PUSH
6290: LD_INT 132
6292: PUSH
6293: LD_INT 106
6295: PUSH
6296: LD_INT 4
6298: PUSH
6299: LD_INT 0
6301: PUSH
6302: LD_INT 0
6304: PUSH
6305: EMPTY
6306: LIST
6307: LIST
6308: LIST
6309: LIST
6310: LIST
6311: LIST
6312: PUSH
6313: LD_INT 26
6315: PUSH
6316: LD_INT 137
6318: PUSH
6319: LD_INT 111
6321: PUSH
6322: LD_INT 0
6324: PUSH
6325: LD_INT 0
6327: PUSH
6328: LD_INT 0
6330: PUSH
6331: EMPTY
6332: LIST
6333: LIST
6334: LIST
6335: LIST
6336: LIST
6337: LIST
6338: PUSH
6339: LD_INT 8
6341: PUSH
6342: LD_INT 141
6344: PUSH
6345: LD_INT 117
6347: PUSH
6348: LD_INT 1
6350: PUSH
6351: LD_INT 13
6353: PUSH
6354: LD_INT 11
6356: PUSH
6357: EMPTY
6358: LIST
6359: LIST
6360: LIST
6361: LIST
6362: LIST
6363: LIST
6364: PUSH
6365: LD_INT 30
6367: PUSH
6368: LD_INT 140
6370: PUSH
6371: LD_INT 128
6373: PUSH
6374: LD_INT 1
6376: PUSH
6377: LD_INT 0
6379: PUSH
6380: LD_INT 0
6382: PUSH
6383: EMPTY
6384: LIST
6385: LIST
6386: LIST
6387: LIST
6388: LIST
6389: LIST
6390: PUSH
6391: LD_INT 5
6393: PUSH
6394: LD_INT 146
6396: PUSH
6397: LD_INT 96
6399: PUSH
6400: LD_INT 3
6402: PUSH
6403: LD_INT 0
6405: PUSH
6406: LD_INT 0
6408: PUSH
6409: EMPTY
6410: LIST
6411: LIST
6412: LIST
6413: LIST
6414: LIST
6415: LIST
6416: PUSH
6417: LD_INT 32
6419: PUSH
6420: LD_INT 150
6422: PUSH
6423: LD_INT 98
6425: PUSH
6426: LD_INT 3
6428: PUSH
6429: LD_INT 0
6431: PUSH
6432: LD_INT 0
6434: PUSH
6435: EMPTY
6436: LIST
6437: LIST
6438: LIST
6439: LIST
6440: LIST
6441: LIST
6442: PUSH
6443: LD_INT 32
6445: PUSH
6446: LD_INT 142
6448: PUSH
6449: LD_INT 95
6451: PUSH
6452: LD_INT 3
6454: PUSH
6455: LD_INT 0
6457: PUSH
6458: LD_INT 0
6460: PUSH
6461: EMPTY
6462: LIST
6463: LIST
6464: LIST
6465: LIST
6466: LIST
6467: LIST
6468: PUSH
6469: LD_INT 32
6471: PUSH
6472: LD_INT 159
6474: PUSH
6475: LD_INT 104
6477: PUSH
6478: LD_INT 3
6480: PUSH
6481: LD_INT 0
6483: PUSH
6484: LD_INT 0
6486: PUSH
6487: EMPTY
6488: LIST
6489: LIST
6490: LIST
6491: LIST
6492: LIST
6493: LIST
6494: PUSH
6495: LD_INT 32
6497: PUSH
6498: LD_INT 133
6500: PUSH
6501: LD_INT 95
6503: PUSH
6504: LD_INT 3
6506: PUSH
6507: LD_INT 0
6509: PUSH
6510: LD_INT 0
6512: PUSH
6513: EMPTY
6514: LIST
6515: LIST
6516: LIST
6517: LIST
6518: LIST
6519: LIST
6520: PUSH
6521: LD_INT 32
6523: PUSH
6524: LD_INT 131
6526: PUSH
6527: LD_INT 102
6529: PUSH
6530: LD_INT 2
6532: PUSH
6533: LD_INT 0
6535: PUSH
6536: LD_INT 0
6538: PUSH
6539: EMPTY
6540: LIST
6541: LIST
6542: LIST
6543: LIST
6544: LIST
6545: LIST
6546: PUSH
6547: LD_INT 32
6549: PUSH
6550: LD_INT 164
6552: PUSH
6553: LD_INT 144
6555: PUSH
6556: LD_INT 0
6558: PUSH
6559: LD_INT 0
6561: PUSH
6562: LD_INT 0
6564: PUSH
6565: EMPTY
6566: LIST
6567: LIST
6568: LIST
6569: LIST
6570: LIST
6571: LIST
6572: PUSH
6573: LD_INT 32
6575: PUSH
6576: LD_INT 146
6578: PUSH
6579: LD_INT 139
6581: PUSH
6582: LD_INT 0
6584: PUSH
6585: LD_INT 0
6587: PUSH
6588: LD_INT 0
6590: PUSH
6591: EMPTY
6592: LIST
6593: LIST
6594: LIST
6595: LIST
6596: LIST
6597: LIST
6598: PUSH
6599: LD_INT 26
6601: PUSH
6602: LD_INT 143
6604: PUSH
6605: LD_INT 122
6607: PUSH
6608: LD_INT 4
6610: PUSH
6611: LD_INT 0
6613: PUSH
6614: LD_INT 0
6616: PUSH
6617: EMPTY
6618: LIST
6619: LIST
6620: LIST
6621: LIST
6622: LIST
6623: LIST
6624: PUSH
6625: LD_INT 26
6627: PUSH
6628: LD_INT 164
6630: PUSH
6631: LD_INT 116
6633: PUSH
6634: LD_INT 2
6636: PUSH
6637: LD_INT 0
6639: PUSH
6640: LD_INT 0
6642: PUSH
6643: EMPTY
6644: LIST
6645: LIST
6646: LIST
6647: LIST
6648: LIST
6649: LIST
6650: PUSH
6651: EMPTY
6652: LIST
6653: LIST
6654: LIST
6655: LIST
6656: LIST
6657: LIST
6658: LIST
6659: LIST
6660: LIST
6661: LIST
6662: LIST
6663: LIST
6664: LIST
6665: LIST
6666: LIST
6667: LIST
6668: LIST
6669: LIST
6670: LIST
6671: LIST
6672: LIST
6673: LIST
6674: LIST
6675: LIST
6676: LIST
6677: ST_TO_ADDR
// for i in tmp do
6678: LD_ADDR_VAR 0 2
6682: PUSH
6683: LD_VAR 0 5
6687: PUSH
6688: FOR_IN
6689: IFFALSE 6920
// begin uc_side := side ;
6691: LD_ADDR_OWVAR 20
6695: PUSH
6696: LD_VAR 0 8
6700: ST_TO_ADDR
// uc_nation := nation_arabian ;
6701: LD_ADDR_OWVAR 21
6705: PUSH
6706: LD_INT 2
6708: ST_TO_ADDR
// bc_type := i [ 1 ] ;
6709: LD_ADDR_OWVAR 42
6713: PUSH
6714: LD_VAR 0 2
6718: PUSH
6719: LD_INT 1
6721: ARRAY
6722: ST_TO_ADDR
// bc_level := rand ( 5 , 6 ) ;
6723: LD_ADDR_OWVAR 43
6727: PUSH
6728: LD_INT 5
6730: PPUSH
6731: LD_INT 6
6733: PPUSH
6734: CALL_OW 12
6738: ST_TO_ADDR
// bc_kind1 := i [ 5 ] ;
6739: LD_ADDR_OWVAR 44
6743: PUSH
6744: LD_VAR 0 2
6748: PUSH
6749: LD_INT 5
6751: ARRAY
6752: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
6753: LD_ADDR_OWVAR 45
6757: PUSH
6758: LD_VAR 0 2
6762: PUSH
6763: LD_INT 6
6765: ARRAY
6766: ST_TO_ADDR
// sr := 0 ;
6767: LD_ADDR_VAR 0 9
6771: PUSH
6772: LD_INT 0
6774: ST_TO_ADDR
// if i [ 1 ] = b_oil_mine then
6775: LD_VAR 0 2
6779: PUSH
6780: LD_INT 1
6782: ARRAY
6783: PUSH
6784: LD_INT 29
6786: EQUAL
6787: IFFALSE 6799
// sr := mat_oil else
6789: LD_ADDR_VAR 0 9
6793: PUSH
6794: LD_INT 2
6796: ST_TO_ADDR
6797: GO 6821
// if i [ 1 ] = b_siberite_mine then
6799: LD_VAR 0 2
6803: PUSH
6804: LD_INT 1
6806: ARRAY
6807: PUSH
6808: LD_INT 30
6810: EQUAL
6811: IFFALSE 6821
// sr := mat_siberit ;
6813: LD_ADDR_VAR 0 9
6817: PUSH
6818: LD_INT 3
6820: ST_TO_ADDR
// if sr then
6821: LD_VAR 0 9
6825: IFFALSE 6881
// begin CreateDepositXY ( i [ 2 ] , i [ 3 ] , sr ) ;
6827: LD_VAR 0 2
6831: PUSH
6832: LD_INT 2
6834: ARRAY
6835: PPUSH
6836: LD_VAR 0 2
6840: PUSH
6841: LD_INT 3
6843: ARRAY
6844: PPUSH
6845: LD_VAR 0 9
6849: PPUSH
6850: CALL_OW 62
// SetResourceVisibility ( i [ 2 ] , i [ 3 ] , side ) ;
6854: LD_VAR 0 2
6858: PUSH
6859: LD_INT 2
6861: ARRAY
6862: PPUSH
6863: LD_VAR 0 2
6867: PUSH
6868: LD_INT 3
6870: ARRAY
6871: PPUSH
6872: LD_VAR 0 8
6876: PPUSH
6877: CALL_OW 441
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
6881: LD_ADDR_VAR 0 3
6885: PUSH
6886: LD_VAR 0 2
6890: PUSH
6891: LD_INT 2
6893: ARRAY
6894: PPUSH
6895: LD_VAR 0 2
6899: PUSH
6900: LD_INT 3
6902: ARRAY
6903: PPUSH
6904: LD_VAR 0 2
6908: PUSH
6909: LD_INT 4
6911: ARRAY
6912: PPUSH
6913: CALL_OW 47
6917: ST_TO_ADDR
// end ;
6918: GO 6688
6920: POP
6921: POP
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
6922: LD_ADDR_VAR 0 10
6926: PUSH
6927: LD_INT 22
6929: PUSH
6930: LD_VAR 0 8
6934: PUSH
6935: EMPTY
6936: LIST
6937: LIST
6938: PUSH
6939: LD_INT 30
6941: PUSH
6942: LD_INT 1
6944: PUSH
6945: EMPTY
6946: LIST
6947: LIST
6948: PUSH
6949: EMPTY
6950: LIST
6951: LIST
6952: PPUSH
6953: CALL_OW 69
6957: ST_TO_ADDR
// if not depot then
6958: LD_VAR 0 10
6962: NOT
6963: IFFALSE 6967
// exit ;
6965: GO 7213
// base := PrepareBase ( depot [ 1 ] , legBase , 0 , [ 7 , 8 , 10 ] [ Difficulty ] , [ 3000 , 300 , 100 ] , [ 14 , 6 , 6 , 5 ] ) ;
6967: LD_ADDR_VAR 0 11
6971: PUSH
6972: LD_VAR 0 10
6976: PUSH
6977: LD_INT 1
6979: ARRAY
6980: PPUSH
6981: LD_INT 6
6983: PPUSH
6984: LD_INT 0
6986: PPUSH
6987: LD_INT 7
6989: PUSH
6990: LD_INT 8
6992: PUSH
6993: LD_INT 10
6995: PUSH
6996: EMPTY
6997: LIST
6998: LIST
6999: LIST
7000: PUSH
7001: LD_OWVAR 67
7005: ARRAY
7006: PPUSH
7007: LD_INT 3000
7009: PUSH
7010: LD_INT 300
7012: PUSH
7013: LD_INT 100
7015: PUSH
7016: EMPTY
7017: LIST
7018: LIST
7019: LIST
7020: PPUSH
7021: LD_INT 14
7023: PUSH
7024: LD_INT 6
7026: PUSH
7027: LD_INT 6
7029: PUSH
7030: LD_INT 5
7032: PUSH
7033: EMPTY
7034: LIST
7035: LIST
7036: LIST
7037: LIST
7038: PPUSH
7039: CALL 29773 0 6
7043: ST_TO_ADDR
// if not base then
7044: LD_VAR 0 11
7048: NOT
7049: IFFALSE 7053
// exit ;
7051: GO 7213
// if Difficulty > 1 then
7053: LD_OWVAR 67
7057: PUSH
7058: LD_INT 1
7060: GREATER
7061: IFFALSE 7134
// begin InitHc ;
7063: CALL_OW 19
// PrepareHuman ( sex_male , class_sniper , [ 5 , 8 ] [ Difficulty - 1 ] ) ;
7067: LD_INT 1
7069: PPUSH
7070: LD_INT 5
7072: PPUSH
7073: LD_INT 5
7075: PUSH
7076: LD_INT 8
7078: PUSH
7079: EMPTY
7080: LIST
7081: LIST
7082: PUSH
7083: LD_OWVAR 67
7087: PUSH
7088: LD_INT 1
7090: MINUS
7091: ARRAY
7092: PPUSH
7093: CALL_OW 380
// for i = 1 to Difficulty do
7097: LD_ADDR_VAR 0 2
7101: PUSH
7102: DOUBLE
7103: LD_INT 1
7105: DEC
7106: ST_TO_ADDR
7107: LD_OWVAR 67
7111: PUSH
7112: FOR_TO
7113: IFFALSE 7132
// PlaceUnitArea ( CreateHuman , sniperGuardArea , false ) ;
7115: CALL_OW 44
7119: PPUSH
7120: LD_INT 24
7122: PPUSH
7123: LD_INT 0
7125: PPUSH
7126: CALL_OW 49
7130: GO 7112
7132: POP
7133: POP
// end ; mc_bases := Replace ( mc_bases , mc_leg , base ) ;
7134: LD_ADDR_EXP 36
7138: PUSH
7139: LD_EXP 36
7143: PPUSH
7144: LD_EXP 6
7148: PPUSH
7149: LD_VAR 0 11
7153: PPUSH
7154: CALL_OW 1
7158: ST_TO_ADDR
// hc_gallery := ru ;
7159: LD_ADDR_OWVAR 33
7163: PUSH
7164: LD_STRING ru
7166: ST_TO_ADDR
// hc_face_number := 44 ;
7167: LD_ADDR_OWVAR 34
7171: PUSH
7172: LD_INT 44
7174: ST_TO_ADDR
// hc_name := Robert Farmer ;
7175: LD_ADDR_OWVAR 26
7179: PUSH
7180: LD_STRING Robert Farmer
7182: ST_TO_ADDR
// hc_sex := sex_male ;
7183: LD_ADDR_OWVAR 27
7187: PUSH
7188: LD_INT 1
7190: ST_TO_ADDR
// hc_class := 1 ;
7191: LD_ADDR_OWVAR 28
7195: PUSH
7196: LD_INT 1
7198: ST_TO_ADDR
// Farmer := CreateHuman ;
7199: LD_ADDR_EXP 13
7203: PUSH
7204: CALL_OW 44
7208: ST_TO_ADDR
// InitHc ;
7209: CALL_OW 19
// end ;
7213: LD_VAR 0 1
7217: RET
// export function PrepareAmericans ; var i , b , tmp , side , sr , base , depot ; begin
7218: LD_INT 0
7220: PPUSH
7221: PPUSH
7222: PPUSH
7223: PPUSH
7224: PPUSH
7225: PPUSH
7226: PPUSH
7227: PPUSH
// PrepareNature ( 0 , 0 , 4 , 0 , 0 , 0 , 0 , amerApe , 0 ) ;
7228: LD_INT 0
7230: PPUSH
7231: LD_INT 0
7233: PPUSH
7234: LD_INT 4
7236: PPUSH
7237: LD_INT 0
7239: PPUSH
7240: LD_INT 0
7242: PPUSH
7243: LD_INT 0
7245: PPUSH
7246: LD_INT 0
7248: PPUSH
7249: LD_INT 10
7251: PPUSH
7252: LD_INT 0
7254: PPUSH
7255: CALL 54178 0 9
// side := 4 ;
7259: LD_ADDR_VAR 0 5
7263: PUSH
7264: LD_INT 4
7266: ST_TO_ADDR
// tmp := [ [ 1 , 144 , 18 , 4 , 0 , 0 ] , [ 3 , 137 , 8 , 4 , 0 , 0 ] , [ 22 , 141 , 8 , 4 , 0 , 0 ] , [ 25 , 137 , 5 , 3 , 0 , 0 ] , [ 18 , 137 , 12 , 0 , 0 , 0 ] , [ 17 , 133 , 4 , 2 , 0 , 0 ] , [ 16 , 140 , 11 , 5 , 0 , 0 ] , [ 8 , 149 , 26 , 4 , 10 , 15 ] , [ 8 , 142 , 26 , 1 , 11 , 12 ] , [ 27 , 153 , 32 , 5 , 0 , 0 ] , [ 27 , 145 , 32 , 3 , 0 , 0 ] , [ 27 , 138 , 2 , 4 , 0 , 0 ] , [ 27 , 144 , 13 , 0 , 0 , 0 ] , [ 26 , 124 , 2 , 4 , 0 , 0 ] , [ 26 , 121 , 2 , 2 , 0 , 0 ] , [ 26 , 118 , 2 , 1 , 0 , 0 ] , [ 29 , 159 , 47 , 2 , 0 , 0 ] , [ 32 , 146 , 41 , 0 , 0 , 0 ] , [ 33 , 136 , 37 , 0 , 0 , 0 ] , [ 33 , 132 , 34 , 0 , 0 , 0 ] , [ 36 , 124 , 7 , 1 , 0 , 0 ] , [ 5 , 124 , 19 , 0 , 0 , 0 ] , [ 32 , 127 , 23 , 0 , 0 , 0 ] ] ;
7267: LD_ADDR_VAR 0 4
7271: PUSH
7272: LD_INT 1
7274: PUSH
7275: LD_INT 144
7277: PUSH
7278: LD_INT 18
7280: PUSH
7281: LD_INT 4
7283: PUSH
7284: LD_INT 0
7286: PUSH
7287: LD_INT 0
7289: PUSH
7290: EMPTY
7291: LIST
7292: LIST
7293: LIST
7294: LIST
7295: LIST
7296: LIST
7297: PUSH
7298: LD_INT 3
7300: PUSH
7301: LD_INT 137
7303: PUSH
7304: LD_INT 8
7306: PUSH
7307: LD_INT 4
7309: PUSH
7310: LD_INT 0
7312: PUSH
7313: LD_INT 0
7315: PUSH
7316: EMPTY
7317: LIST
7318: LIST
7319: LIST
7320: LIST
7321: LIST
7322: LIST
7323: PUSH
7324: LD_INT 22
7326: PUSH
7327: LD_INT 141
7329: PUSH
7330: LD_INT 8
7332: PUSH
7333: LD_INT 4
7335: PUSH
7336: LD_INT 0
7338: PUSH
7339: LD_INT 0
7341: PUSH
7342: EMPTY
7343: LIST
7344: LIST
7345: LIST
7346: LIST
7347: LIST
7348: LIST
7349: PUSH
7350: LD_INT 25
7352: PUSH
7353: LD_INT 137
7355: PUSH
7356: LD_INT 5
7358: PUSH
7359: LD_INT 3
7361: PUSH
7362: LD_INT 0
7364: PUSH
7365: LD_INT 0
7367: PUSH
7368: EMPTY
7369: LIST
7370: LIST
7371: LIST
7372: LIST
7373: LIST
7374: LIST
7375: PUSH
7376: LD_INT 18
7378: PUSH
7379: LD_INT 137
7381: PUSH
7382: LD_INT 12
7384: PUSH
7385: LD_INT 0
7387: PUSH
7388: LD_INT 0
7390: PUSH
7391: LD_INT 0
7393: PUSH
7394: EMPTY
7395: LIST
7396: LIST
7397: LIST
7398: LIST
7399: LIST
7400: LIST
7401: PUSH
7402: LD_INT 17
7404: PUSH
7405: LD_INT 133
7407: PUSH
7408: LD_INT 4
7410: PUSH
7411: LD_INT 2
7413: PUSH
7414: LD_INT 0
7416: PUSH
7417: LD_INT 0
7419: PUSH
7420: EMPTY
7421: LIST
7422: LIST
7423: LIST
7424: LIST
7425: LIST
7426: LIST
7427: PUSH
7428: LD_INT 16
7430: PUSH
7431: LD_INT 140
7433: PUSH
7434: LD_INT 11
7436: PUSH
7437: LD_INT 5
7439: PUSH
7440: LD_INT 0
7442: PUSH
7443: LD_INT 0
7445: PUSH
7446: EMPTY
7447: LIST
7448: LIST
7449: LIST
7450: LIST
7451: LIST
7452: LIST
7453: PUSH
7454: LD_INT 8
7456: PUSH
7457: LD_INT 149
7459: PUSH
7460: LD_INT 26
7462: PUSH
7463: LD_INT 4
7465: PUSH
7466: LD_INT 10
7468: PUSH
7469: LD_INT 15
7471: PUSH
7472: EMPTY
7473: LIST
7474: LIST
7475: LIST
7476: LIST
7477: LIST
7478: LIST
7479: PUSH
7480: LD_INT 8
7482: PUSH
7483: LD_INT 142
7485: PUSH
7486: LD_INT 26
7488: PUSH
7489: LD_INT 1
7491: PUSH
7492: LD_INT 11
7494: PUSH
7495: LD_INT 12
7497: PUSH
7498: EMPTY
7499: LIST
7500: LIST
7501: LIST
7502: LIST
7503: LIST
7504: LIST
7505: PUSH
7506: LD_INT 27
7508: PUSH
7509: LD_INT 153
7511: PUSH
7512: LD_INT 32
7514: PUSH
7515: LD_INT 5
7517: PUSH
7518: LD_INT 0
7520: PUSH
7521: LD_INT 0
7523: PUSH
7524: EMPTY
7525: LIST
7526: LIST
7527: LIST
7528: LIST
7529: LIST
7530: LIST
7531: PUSH
7532: LD_INT 27
7534: PUSH
7535: LD_INT 145
7537: PUSH
7538: LD_INT 32
7540: PUSH
7541: LD_INT 3
7543: PUSH
7544: LD_INT 0
7546: PUSH
7547: LD_INT 0
7549: PUSH
7550: EMPTY
7551: LIST
7552: LIST
7553: LIST
7554: LIST
7555: LIST
7556: LIST
7557: PUSH
7558: LD_INT 27
7560: PUSH
7561: LD_INT 138
7563: PUSH
7564: LD_INT 2
7566: PUSH
7567: LD_INT 4
7569: PUSH
7570: LD_INT 0
7572: PUSH
7573: LD_INT 0
7575: PUSH
7576: EMPTY
7577: LIST
7578: LIST
7579: LIST
7580: LIST
7581: LIST
7582: LIST
7583: PUSH
7584: LD_INT 27
7586: PUSH
7587: LD_INT 144
7589: PUSH
7590: LD_INT 13
7592: PUSH
7593: LD_INT 0
7595: PUSH
7596: LD_INT 0
7598: PUSH
7599: LD_INT 0
7601: PUSH
7602: EMPTY
7603: LIST
7604: LIST
7605: LIST
7606: LIST
7607: LIST
7608: LIST
7609: PUSH
7610: LD_INT 26
7612: PUSH
7613: LD_INT 124
7615: PUSH
7616: LD_INT 2
7618: PUSH
7619: LD_INT 4
7621: PUSH
7622: LD_INT 0
7624: PUSH
7625: LD_INT 0
7627: PUSH
7628: EMPTY
7629: LIST
7630: LIST
7631: LIST
7632: LIST
7633: LIST
7634: LIST
7635: PUSH
7636: LD_INT 26
7638: PUSH
7639: LD_INT 121
7641: PUSH
7642: LD_INT 2
7644: PUSH
7645: LD_INT 2
7647: PUSH
7648: LD_INT 0
7650: PUSH
7651: LD_INT 0
7653: PUSH
7654: EMPTY
7655: LIST
7656: LIST
7657: LIST
7658: LIST
7659: LIST
7660: LIST
7661: PUSH
7662: LD_INT 26
7664: PUSH
7665: LD_INT 118
7667: PUSH
7668: LD_INT 2
7670: PUSH
7671: LD_INT 1
7673: PUSH
7674: LD_INT 0
7676: PUSH
7677: LD_INT 0
7679: PUSH
7680: EMPTY
7681: LIST
7682: LIST
7683: LIST
7684: LIST
7685: LIST
7686: LIST
7687: PUSH
7688: LD_INT 29
7690: PUSH
7691: LD_INT 159
7693: PUSH
7694: LD_INT 47
7696: PUSH
7697: LD_INT 2
7699: PUSH
7700: LD_INT 0
7702: PUSH
7703: LD_INT 0
7705: PUSH
7706: EMPTY
7707: LIST
7708: LIST
7709: LIST
7710: LIST
7711: LIST
7712: LIST
7713: PUSH
7714: LD_INT 32
7716: PUSH
7717: LD_INT 146
7719: PUSH
7720: LD_INT 41
7722: PUSH
7723: LD_INT 0
7725: PUSH
7726: LD_INT 0
7728: PUSH
7729: LD_INT 0
7731: PUSH
7732: EMPTY
7733: LIST
7734: LIST
7735: LIST
7736: LIST
7737: LIST
7738: LIST
7739: PUSH
7740: LD_INT 33
7742: PUSH
7743: LD_INT 136
7745: PUSH
7746: LD_INT 37
7748: PUSH
7749: LD_INT 0
7751: PUSH
7752: LD_INT 0
7754: PUSH
7755: LD_INT 0
7757: PUSH
7758: EMPTY
7759: LIST
7760: LIST
7761: LIST
7762: LIST
7763: LIST
7764: LIST
7765: PUSH
7766: LD_INT 33
7768: PUSH
7769: LD_INT 132
7771: PUSH
7772: LD_INT 34
7774: PUSH
7775: LD_INT 0
7777: PUSH
7778: LD_INT 0
7780: PUSH
7781: LD_INT 0
7783: PUSH
7784: EMPTY
7785: LIST
7786: LIST
7787: LIST
7788: LIST
7789: LIST
7790: LIST
7791: PUSH
7792: LD_INT 36
7794: PUSH
7795: LD_INT 124
7797: PUSH
7798: LD_INT 7
7800: PUSH
7801: LD_INT 1
7803: PUSH
7804: LD_INT 0
7806: PUSH
7807: LD_INT 0
7809: PUSH
7810: EMPTY
7811: LIST
7812: LIST
7813: LIST
7814: LIST
7815: LIST
7816: LIST
7817: PUSH
7818: LD_INT 5
7820: PUSH
7821: LD_INT 124
7823: PUSH
7824: LD_INT 19
7826: PUSH
7827: LD_INT 0
7829: PUSH
7830: LD_INT 0
7832: PUSH
7833: LD_INT 0
7835: PUSH
7836: EMPTY
7837: LIST
7838: LIST
7839: LIST
7840: LIST
7841: LIST
7842: LIST
7843: PUSH
7844: LD_INT 32
7846: PUSH
7847: LD_INT 127
7849: PUSH
7850: LD_INT 23
7852: PUSH
7853: LD_INT 0
7855: PUSH
7856: LD_INT 0
7858: PUSH
7859: LD_INT 0
7861: PUSH
7862: EMPTY
7863: LIST
7864: LIST
7865: LIST
7866: LIST
7867: LIST
7868: LIST
7869: PUSH
7870: EMPTY
7871: LIST
7872: LIST
7873: LIST
7874: LIST
7875: LIST
7876: LIST
7877: LIST
7878: LIST
7879: LIST
7880: LIST
7881: LIST
7882: LIST
7883: LIST
7884: LIST
7885: LIST
7886: LIST
7887: LIST
7888: LIST
7889: LIST
7890: LIST
7891: LIST
7892: LIST
7893: LIST
7894: ST_TO_ADDR
// for i in tmp do
7895: LD_ADDR_VAR 0 2
7899: PUSH
7900: LD_VAR 0 4
7904: PUSH
7905: FOR_IN
7906: IFFALSE 8137
// begin uc_side := side ;
7908: LD_ADDR_OWVAR 20
7912: PUSH
7913: LD_VAR 0 5
7917: ST_TO_ADDR
// uc_nation := nation_american ;
7918: LD_ADDR_OWVAR 21
7922: PUSH
7923: LD_INT 1
7925: ST_TO_ADDR
// bc_type := i [ 1 ] ;
7926: LD_ADDR_OWVAR 42
7930: PUSH
7931: LD_VAR 0 2
7935: PUSH
7936: LD_INT 1
7938: ARRAY
7939: ST_TO_ADDR
// bc_level := rand ( 5 , 6 ) ;
7940: LD_ADDR_OWVAR 43
7944: PUSH
7945: LD_INT 5
7947: PPUSH
7948: LD_INT 6
7950: PPUSH
7951: CALL_OW 12
7955: ST_TO_ADDR
// bc_kind1 := i [ 5 ] ;
7956: LD_ADDR_OWVAR 44
7960: PUSH
7961: LD_VAR 0 2
7965: PUSH
7966: LD_INT 5
7968: ARRAY
7969: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
7970: LD_ADDR_OWVAR 45
7974: PUSH
7975: LD_VAR 0 2
7979: PUSH
7980: LD_INT 6
7982: ARRAY
7983: ST_TO_ADDR
// sr := 0 ;
7984: LD_ADDR_VAR 0 6
7988: PUSH
7989: LD_INT 0
7991: ST_TO_ADDR
// if i [ 1 ] = b_oil_mine then
7992: LD_VAR 0 2
7996: PUSH
7997: LD_INT 1
7999: ARRAY
8000: PUSH
8001: LD_INT 29
8003: EQUAL
8004: IFFALSE 8016
// sr := mat_oil else
8006: LD_ADDR_VAR 0 6
8010: PUSH
8011: LD_INT 2
8013: ST_TO_ADDR
8014: GO 8038
// if i [ 1 ] = b_siberite_mine then
8016: LD_VAR 0 2
8020: PUSH
8021: LD_INT 1
8023: ARRAY
8024: PUSH
8025: LD_INT 30
8027: EQUAL
8028: IFFALSE 8038
// sr := mat_siberit ;
8030: LD_ADDR_VAR 0 6
8034: PUSH
8035: LD_INT 3
8037: ST_TO_ADDR
// if sr then
8038: LD_VAR 0 6
8042: IFFALSE 8098
// begin CreateDepositXY ( i [ 2 ] , i [ 3 ] , sr ) ;
8044: LD_VAR 0 2
8048: PUSH
8049: LD_INT 2
8051: ARRAY
8052: PPUSH
8053: LD_VAR 0 2
8057: PUSH
8058: LD_INT 3
8060: ARRAY
8061: PPUSH
8062: LD_VAR 0 6
8066: PPUSH
8067: CALL_OW 62
// SetResourceVisibility ( i [ 2 ] , i [ 3 ] , side ) ;
8071: LD_VAR 0 2
8075: PUSH
8076: LD_INT 2
8078: ARRAY
8079: PPUSH
8080: LD_VAR 0 2
8084: PUSH
8085: LD_INT 3
8087: ARRAY
8088: PPUSH
8089: LD_VAR 0 5
8093: PPUSH
8094: CALL_OW 441
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
8098: LD_ADDR_VAR 0 3
8102: PUSH
8103: LD_VAR 0 2
8107: PUSH
8108: LD_INT 2
8110: ARRAY
8111: PPUSH
8112: LD_VAR 0 2
8116: PUSH
8117: LD_INT 3
8119: ARRAY
8120: PPUSH
8121: LD_VAR 0 2
8125: PUSH
8126: LD_INT 4
8128: ARRAY
8129: PPUSH
8130: CALL_OW 47
8134: ST_TO_ADDR
// end ;
8135: GO 7905
8137: POP
8138: POP
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
8139: LD_ADDR_VAR 0 8
8143: PUSH
8144: LD_INT 22
8146: PUSH
8147: LD_VAR 0 5
8151: PUSH
8152: EMPTY
8153: LIST
8154: LIST
8155: PUSH
8156: LD_INT 30
8158: PUSH
8159: LD_INT 1
8161: PUSH
8162: EMPTY
8163: LIST
8164: LIST
8165: PUSH
8166: EMPTY
8167: LIST
8168: LIST
8169: PPUSH
8170: CALL_OW 69
8174: ST_TO_ADDR
// if not depot then
8175: LD_VAR 0 8
8179: NOT
8180: IFFALSE 8184
// exit ;
8182: GO 8456
// base := PrepareBase ( depot [ 1 ] , amerBase , theta3 , [ 8 , 7 , 6 ] [ Difficulty ] , [ [ 2500 , 2000 , 1750 ] [ Difficulty ] , [ 300 , 250 , 200 ] [ Difficulty ] , [ 80 , 60 , 50 ] [ Difficulty ] ] , [ 7 , 6 , 5 , 5 ] ) ;
8184: LD_ADDR_VAR 0 7
8188: PUSH
8189: LD_VAR 0 8
8193: PUSH
8194: LD_INT 1
8196: ARRAY
8197: PPUSH
8198: LD_INT 3
8200: PPUSH
8201: LD_STRING theta3
8203: PPUSH
8204: LD_INT 8
8206: PUSH
8207: LD_INT 7
8209: PUSH
8210: LD_INT 6
8212: PUSH
8213: EMPTY
8214: LIST
8215: LIST
8216: LIST
8217: PUSH
8218: LD_OWVAR 67
8222: ARRAY
8223: PPUSH
8224: LD_INT 2500
8226: PUSH
8227: LD_INT 2000
8229: PUSH
8230: LD_INT 1750
8232: PUSH
8233: EMPTY
8234: LIST
8235: LIST
8236: LIST
8237: PUSH
8238: LD_OWVAR 67
8242: ARRAY
8243: PUSH
8244: LD_INT 300
8246: PUSH
8247: LD_INT 250
8249: PUSH
8250: LD_INT 200
8252: PUSH
8253: EMPTY
8254: LIST
8255: LIST
8256: LIST
8257: PUSH
8258: LD_OWVAR 67
8262: ARRAY
8263: PUSH
8264: LD_INT 80
8266: PUSH
8267: LD_INT 60
8269: PUSH
8270: LD_INT 50
8272: PUSH
8273: EMPTY
8274: LIST
8275: LIST
8276: LIST
8277: PUSH
8278: LD_OWVAR 67
8282: ARRAY
8283: PUSH
8284: EMPTY
8285: LIST
8286: LIST
8287: LIST
8288: PPUSH
8289: LD_INT 7
8291: PUSH
8292: LD_INT 6
8294: PUSH
8295: LD_INT 5
8297: PUSH
8298: LD_INT 5
8300: PUSH
8301: EMPTY
8302: LIST
8303: LIST
8304: LIST
8305: LIST
8306: PPUSH
8307: CALL 29773 0 6
8311: ST_TO_ADDR
// if not base then
8312: LD_VAR 0 7
8316: NOT
8317: IFFALSE 8321
// exit ;
8319: GO 8456
// mc_bases := Replace ( mc_bases , mc_amer , base ) ;
8321: LD_ADDR_EXP 36
8325: PUSH
8326: LD_EXP 36
8330: PPUSH
8331: LD_EXP 5
8335: PPUSH
8336: LD_VAR 0 7
8340: PPUSH
8341: CALL_OW 1
8345: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 7 ) ;
8346: LD_INT 1
8348: PPUSH
8349: LD_INT 1
8351: PPUSH
8352: LD_INT 7
8354: PPUSH
8355: CALL_OW 380
// allyCommander := CreateHuman ;
8359: LD_ADDR_EXP 11
8363: PUSH
8364: CALL_OW 44
8368: ST_TO_ADDR
// PlaceUnitXY ( allyCommander , 139 , 15 , false ) ;
8369: LD_EXP 11
8373: PPUSH
8374: LD_INT 139
8376: PPUSH
8377: LD_INT 15
8379: PPUSH
8380: LD_INT 0
8382: PPUSH
8383: CALL_OW 48
// ComTurnXY ( allyCommander , 137 , 15 ) ;
8387: LD_EXP 11
8391: PPUSH
8392: LD_INT 137
8394: PPUSH
8395: LD_INT 15
8397: PPUSH
8398: CALL_OW 118
// hc_gallery := us ;
8402: LD_ADDR_OWVAR 33
8406: PUSH
8407: LD_STRING us
8409: ST_TO_ADDR
// hc_face_number := 7 ;
8410: LD_ADDR_OWVAR 34
8414: PUSH
8415: LD_INT 7
8417: ST_TO_ADDR
// hc_name := Arthur Powell ;
8418: LD_ADDR_OWVAR 26
8422: PUSH
8423: LD_STRING Arthur Powell
8425: ST_TO_ADDR
// hc_sex := sex_male ;
8426: LD_ADDR_OWVAR 27
8430: PUSH
8431: LD_INT 1
8433: ST_TO_ADDR
// hc_class := 1 ;
8434: LD_ADDR_OWVAR 28
8438: PUSH
8439: LD_INT 1
8441: ST_TO_ADDR
// Powell := CreateHuman ;
8442: LD_ADDR_EXP 12
8446: PUSH
8447: CALL_OW 44
8451: ST_TO_ADDR
// InitHc ;
8452: CALL_OW 19
// end ;
8456: LD_VAR 0 1
8460: RET
// export function PreparePlayer ; var i , side , techs , tanks , cl , chassis , engines , weapons ; begin
8461: LD_INT 0
8463: PPUSH
8464: PPUSH
8465: PPUSH
8466: PPUSH
8467: PPUSH
8468: PPUSH
8469: PPUSH
8470: PPUSH
8471: PPUSH
// side := 1 ;
8472: LD_ADDR_VAR 0 3
8476: PUSH
8477: LD_INT 1
8479: ST_TO_ADDR
// result := [ [ ] , [ ] ] ;
8480: LD_ADDR_VAR 0 1
8484: PUSH
8485: EMPTY
8486: PUSH
8487: EMPTY
8488: PUSH
8489: EMPTY
8490: LIST
8491: LIST
8492: ST_TO_ADDR
// uc_side := side ;
8493: LD_ADDR_OWVAR 20
8497: PUSH
8498: LD_VAR 0 3
8502: ST_TO_ADDR
// uc_nation := nation_american ;
8503: LD_ADDR_OWVAR 21
8507: PUSH
8508: LD_INT 1
8510: ST_TO_ADDR
// InitHc ;
8511: CALL_OW 19
// InitVc ;
8515: CALL_OW 20
// hc_importance := 0 ;
8519: LD_ADDR_OWVAR 32
8523: PUSH
8524: LD_INT 0
8526: ST_TO_ADDR
// chassis := [ us_medium_wheeled , us_medium_tracked , us_medium_tracked ] ;
8527: LD_ADDR_VAR 0 7
8531: PUSH
8532: LD_INT 2
8534: PUSH
8535: LD_INT 3
8537: PUSH
8538: LD_INT 3
8540: PUSH
8541: EMPTY
8542: LIST
8543: LIST
8544: LIST
8545: ST_TO_ADDR
// if commander = 2 then
8546: LD_EXP 25
8550: PUSH
8551: LD_INT 2
8553: EQUAL
8554: IFFALSE 8575
// chassis := [ us_medium_tracked , us_heavy_tracked , us_heavy_tracked ] ;
8556: LD_ADDR_VAR 0 7
8560: PUSH
8561: LD_INT 3
8563: PUSH
8564: LD_INT 4
8566: PUSH
8567: LD_INT 4
8569: PUSH
8570: EMPTY
8571: LIST
8572: LIST
8573: LIST
8574: ST_TO_ADDR
// if commander = 3 then
8575: LD_EXP 25
8579: PUSH
8580: LD_INT 3
8582: EQUAL
8583: IFFALSE 8604
// chassis := [ us_medium_wheeled , us_morphling , us_morphling ] ;
8585: LD_ADDR_VAR 0 7
8589: PUSH
8590: LD_INT 2
8592: PUSH
8593: LD_INT 5
8595: PUSH
8596: LD_INT 5
8598: PUSH
8599: EMPTY
8600: LIST
8601: LIST
8602: LIST
8603: ST_TO_ADDR
// engines := [ engine_solar , engine_solar , engine_combustion ] ;
8604: LD_ADDR_VAR 0 8
8608: PUSH
8609: LD_INT 2
8611: PUSH
8612: LD_INT 2
8614: PUSH
8615: LD_INT 1
8617: PUSH
8618: EMPTY
8619: LIST
8620: LIST
8621: LIST
8622: ST_TO_ADDR
// if commander = 2 then
8623: LD_EXP 25
8627: PUSH
8628: LD_INT 2
8630: EQUAL
8631: IFFALSE 8652
// engines := [ engine_combustion , engine_combustion , engine_siberite ] ;
8633: LD_ADDR_VAR 0 8
8637: PUSH
8638: LD_INT 1
8640: PUSH
8641: LD_INT 1
8643: PUSH
8644: LD_INT 3
8646: PUSH
8647: EMPTY
8648: LIST
8649: LIST
8650: LIST
8651: ST_TO_ADDR
// if commander = 3 then
8652: LD_EXP 25
8656: PUSH
8657: LD_INT 3
8659: EQUAL
8660: IFFALSE 8681
// engines := [ engine_siberite , engine_siberite , engine_combustion ] ;
8662: LD_ADDR_VAR 0 8
8666: PUSH
8667: LD_INT 3
8669: PUSH
8670: LD_INT 3
8672: PUSH
8673: LD_INT 1
8675: PUSH
8676: EMPTY
8677: LIST
8678: LIST
8679: LIST
8680: ST_TO_ADDR
// weapons := [ us_double_gun , us_light_gun , us_gatling_gun ] ;
8681: LD_ADDR_VAR 0 9
8685: PUSH
8686: LD_INT 5
8688: PUSH
8689: LD_INT 3
8691: PUSH
8692: LD_INT 4
8694: PUSH
8695: EMPTY
8696: LIST
8697: LIST
8698: LIST
8699: ST_TO_ADDR
// if commander = 2 then
8700: LD_EXP 25
8704: PUSH
8705: LD_INT 2
8707: EQUAL
8708: IFFALSE 8729
// weapons := [ us_rocket_launcher , us_double_gun , us_heavy_gun ] ;
8710: LD_ADDR_VAR 0 9
8714: PUSH
8715: LD_INT 7
8717: PUSH
8718: LD_INT 5
8720: PUSH
8721: LD_INT 6
8723: PUSH
8724: EMPTY
8725: LIST
8726: LIST
8727: LIST
8728: ST_TO_ADDR
// if commander = 3 then
8729: LD_EXP 25
8733: PUSH
8734: LD_INT 3
8736: EQUAL
8737: IFFALSE 8758
// weapons := [ us_laser , us_double_laser , us_rocket_launcher ] ;
8739: LD_ADDR_VAR 0 9
8743: PUSH
8744: LD_INT 9
8746: PUSH
8747: LD_INT 10
8749: PUSH
8750: LD_INT 7
8752: PUSH
8753: EMPTY
8754: LIST
8755: LIST
8756: LIST
8757: ST_TO_ADDR
// tanks := [ 5 , 5 , 4 ] [ Difficulty ] ;
8758: LD_ADDR_VAR 0 5
8762: PUSH
8763: LD_INT 5
8765: PUSH
8766: LD_INT 5
8768: PUSH
8769: LD_INT 4
8771: PUSH
8772: EMPTY
8773: LIST
8774: LIST
8775: LIST
8776: PUSH
8777: LD_OWVAR 67
8781: ARRAY
8782: ST_TO_ADDR
// if commander = 2 then
8783: LD_EXP 25
8787: PUSH
8788: LD_INT 2
8790: EQUAL
8791: IFFALSE 8807
// tanks := tanks + 3 ;
8793: LD_ADDR_VAR 0 5
8797: PUSH
8798: LD_VAR 0 5
8802: PUSH
8803: LD_INT 3
8805: PLUS
8806: ST_TO_ADDR
// for i = 1 to tanks do
8807: LD_ADDR_VAR 0 2
8811: PUSH
8812: DOUBLE
8813: LD_INT 1
8815: DEC
8816: ST_TO_ADDR
8817: LD_VAR 0 5
8821: PUSH
8822: FOR_TO
8823: IFFALSE 8933
// begin PrepareVehicle ( chassis [ i mod 3 + 1 ] , engines [ rand ( 1 , 3 ) ] , control_manual , weapons [ i mod 3 + 1 ] , rand ( 60 , 70 ) ) ;
8825: LD_VAR 0 7
8829: PUSH
8830: LD_VAR 0 2
8834: PUSH
8835: LD_INT 3
8837: MOD
8838: PUSH
8839: LD_INT 1
8841: PLUS
8842: ARRAY
8843: PPUSH
8844: LD_VAR 0 8
8848: PUSH
8849: LD_INT 1
8851: PPUSH
8852: LD_INT 3
8854: PPUSH
8855: CALL_OW 12
8859: ARRAY
8860: PPUSH
8861: LD_INT 1
8863: PPUSH
8864: LD_VAR 0 9
8868: PUSH
8869: LD_VAR 0 2
8873: PUSH
8874: LD_INT 3
8876: MOD
8877: PUSH
8878: LD_INT 1
8880: PLUS
8881: ARRAY
8882: PPUSH
8883: LD_INT 60
8885: PPUSH
8886: LD_INT 70
8888: PPUSH
8889: CALL_OW 12
8893: PPUSH
8894: CALL 26364 0 5
// result := Replace ( result , 1 , result [ 1 ] ^ CreateVehicle ) ;
8898: LD_ADDR_VAR 0 1
8902: PUSH
8903: LD_VAR 0 1
8907: PPUSH
8908: LD_INT 1
8910: PPUSH
8911: LD_VAR 0 1
8915: PUSH
8916: LD_INT 1
8918: ARRAY
8919: PUSH
8920: CALL_OW 45
8924: ADD
8925: PPUSH
8926: CALL_OW 1
8930: ST_TO_ADDR
// end ;
8931: GO 8822
8933: POP
8934: POP
// cl := 1 ;
8935: LD_ADDR_VAR 0 6
8939: PUSH
8940: LD_INT 1
8942: ST_TO_ADDR
// for i = 1 to 10 do
8943: LD_ADDR_VAR 0 2
8947: PUSH
8948: DOUBLE
8949: LD_INT 1
8951: DEC
8952: ST_TO_ADDR
8953: LD_INT 10
8955: PUSH
8956: FOR_TO
8957: IFFALSE 9072
// begin if i mod 4 = 0 then
8959: LD_VAR 0 2
8963: PUSH
8964: LD_INT 4
8966: MOD
8967: PUSH
8968: LD_INT 0
8970: EQUAL
8971: IFFALSE 8987
// cl := cl + 1 ;
8973: LD_ADDR_VAR 0 6
8977: PUSH
8978: LD_VAR 0 6
8982: PUSH
8983: LD_INT 1
8985: PLUS
8986: ST_TO_ADDR
// if cl = 2 then
8987: LD_VAR 0 6
8991: PUSH
8992: LD_INT 2
8994: EQUAL
8995: IFFALSE 9005
// cl := 3 ;
8997: LD_ADDR_VAR 0 6
9001: PUSH
9002: LD_INT 3
9004: ST_TO_ADDR
// PrepareHuman ( false , cl , [ 6 , 6 , 5 ] [ Difficulty ] ) ;
9005: LD_INT 0
9007: PPUSH
9008: LD_VAR 0 6
9012: PPUSH
9013: LD_INT 6
9015: PUSH
9016: LD_INT 6
9018: PUSH
9019: LD_INT 5
9021: PUSH
9022: EMPTY
9023: LIST
9024: LIST
9025: LIST
9026: PUSH
9027: LD_OWVAR 67
9031: ARRAY
9032: PPUSH
9033: CALL_OW 380
// result := Replace ( result , 2 , result [ 2 ] ^ CreateHuman ) ;
9037: LD_ADDR_VAR 0 1
9041: PUSH
9042: LD_VAR 0 1
9046: PPUSH
9047: LD_INT 2
9049: PPUSH
9050: LD_VAR 0 1
9054: PUSH
9055: LD_INT 2
9057: ARRAY
9058: PUSH
9059: CALL_OW 44
9063: ADD
9064: PPUSH
9065: CALL_OW 1
9069: ST_TO_ADDR
// end ;
9070: GO 8956
9072: POP
9073: POP
// if commander = 1 then
9074: LD_EXP 25
9078: PUSH
9079: LD_INT 1
9081: EQUAL
9082: IFFALSE 9150
// for i = 1 to 4 do
9084: LD_ADDR_VAR 0 2
9088: PUSH
9089: DOUBLE
9090: LD_INT 1
9092: DEC
9093: ST_TO_ADDR
9094: LD_INT 4
9096: PUSH
9097: FOR_TO
9098: IFFALSE 9148
// begin PrepareHuman ( false , class_soldier , 8 ) ;
9100: LD_INT 0
9102: PPUSH
9103: LD_INT 1
9105: PPUSH
9106: LD_INT 8
9108: PPUSH
9109: CALL_OW 380
// result := Replace ( result , 2 , result [ 2 ] ^ CreateHuman ) ;
9113: LD_ADDR_VAR 0 1
9117: PUSH
9118: LD_VAR 0 1
9122: PPUSH
9123: LD_INT 2
9125: PPUSH
9126: LD_VAR 0 1
9130: PUSH
9131: LD_INT 2
9133: ARRAY
9134: PUSH
9135: CALL_OW 44
9139: ADD
9140: PPUSH
9141: CALL_OW 1
9145: ST_TO_ADDR
// end ;
9146: GO 9097
9148: POP
9149: POP
// techs := [ ] ;
9150: LD_ADDR_VAR 0 4
9154: PUSH
9155: EMPTY
9156: ST_TO_ADDR
// if commander = 1 then
9157: LD_EXP 25
9161: PUSH
9162: LD_INT 1
9164: EQUAL
9165: IFFALSE 9190
// techs := [ tech_weap1 , tech_weap2 , tech_weap3 , tech_lasSight ] ;
9167: LD_ADDR_VAR 0 4
9171: PUSH
9172: LD_INT 51
9174: PUSH
9175: LD_INT 52
9177: PUSH
9178: LD_INT 53
9180: PUSH
9181: LD_INT 12
9183: PUSH
9184: EMPTY
9185: LIST
9186: LIST
9187: LIST
9188: LIST
9189: ST_TO_ADDR
// if commander = 2 then
9190: LD_EXP 25
9194: PUSH
9195: LD_INT 2
9197: EQUAL
9198: IFFALSE 9235
// techs := [ tech_tech1 , tech_oilEng , tech_oilPow , tech_solEng , tech_solPow , tech_opto1 , tech_radar ] ;
9200: LD_ADDR_VAR 0 4
9204: PUSH
9205: LD_INT 48
9207: PUSH
9208: LD_INT 47
9210: PUSH
9211: LD_INT 46
9213: PUSH
9214: LD_INT 45
9216: PUSH
9217: LD_INT 35
9219: PUSH
9220: LD_INT 60
9222: PUSH
9223: LD_INT 6
9225: PUSH
9226: EMPTY
9227: LIST
9228: LIST
9229: LIST
9230: LIST
9231: LIST
9232: LIST
9233: LIST
9234: ST_TO_ADDR
// if commander = 3 then
9235: LD_EXP 25
9239: PUSH
9240: LD_INT 3
9242: EQUAL
9243: IFFALSE 9292
// techs := [ tech_advAI , tech_advchassis , tech_ai , tech_comp1 , tech_comp2 , tech_oilEng , tech_oilPow , tech_weap1 , tech_gatling , tech_gun ] ;
9245: LD_ADDR_VAR 0 4
9249: PUSH
9250: LD_INT 27
9252: PUSH
9253: LD_INT 36
9255: PUSH
9256: LD_INT 32
9258: PUSH
9259: LD_INT 57
9261: PUSH
9262: LD_INT 58
9264: PUSH
9265: LD_INT 47
9267: PUSH
9268: LD_INT 46
9270: PUSH
9271: LD_INT 51
9273: PUSH
9274: LD_INT 69
9276: PUSH
9277: LD_INT 39
9279: PUSH
9280: EMPTY
9281: LIST
9282: LIST
9283: LIST
9284: LIST
9285: LIST
9286: LIST
9287: LIST
9288: LIST
9289: LIST
9290: LIST
9291: ST_TO_ADDR
// if techs then
9292: LD_VAR 0 4
9296: IFFALSE 9330
// for i in techs do
9298: LD_ADDR_VAR 0 2
9302: PUSH
9303: LD_VAR 0 4
9307: PUSH
9308: FOR_IN
9309: IFFALSE 9328
// SetTech ( i , 1 , state_researched ) ;
9311: LD_VAR 0 2
9315: PPUSH
9316: LD_INT 1
9318: PPUSH
9319: LD_INT 2
9321: PPUSH
9322: CALL_OW 322
9326: GO 9308
9328: POP
9329: POP
// hc_gallery := skirmish ;
9330: LD_ADDR_OWVAR 33
9334: PUSH
9335: LD_STRING skirmish
9337: ST_TO_ADDR
// hc_face_number := commander ;
9338: LD_ADDR_OWVAR 34
9342: PUSH
9343: LD_EXP 25
9347: ST_TO_ADDR
// hc_importance := 100 ;
9348: LD_ADDR_OWVAR 32
9352: PUSH
9353: LD_INT 100
9355: ST_TO_ADDR
// case commander of 1 :
9356: LD_EXP 25
9360: PUSH
9361: LD_INT 1
9363: DOUBLE
9364: EQUAL
9365: IFTRUE 9369
9367: GO 9393
9369: POP
// begin hc_name := Jeff Ironside ;
9370: LD_ADDR_OWVAR 26
9374: PUSH
9375: LD_STRING Jeff Ironside
9377: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 7 ) ;
9378: LD_INT 1
9380: PPUSH
9381: LD_INT 1
9383: PPUSH
9384: LD_INT 7
9386: PPUSH
9387: CALL_OW 380
// end ; 2 :
9391: GO 9458
9393: LD_INT 2
9395: DOUBLE
9396: EQUAL
9397: IFTRUE 9401
9399: GO 9425
9401: POP
// begin hc_name := Paul Johnson ;
9402: LD_ADDR_OWVAR 26
9406: PUSH
9407: LD_STRING Paul Johnson
9409: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 7 ) ;
9410: LD_INT 1
9412: PPUSH
9413: LD_INT 3
9415: PPUSH
9416: LD_INT 7
9418: PPUSH
9419: CALL_OW 380
// end ; 3 :
9423: GO 9458
9425: LD_INT 3
9427: DOUBLE
9428: EQUAL
9429: IFTRUE 9433
9431: GO 9457
9433: POP
// begin hc_name := Lisa Stuart ;
9434: LD_ADDR_OWVAR 26
9438: PUSH
9439: LD_STRING Lisa Stuart
9441: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , 7 ) ;
9442: LD_INT 2
9444: PPUSH
9445: LD_INT 4
9447: PPUSH
9448: LD_INT 7
9450: PPUSH
9451: CALL_OW 380
// end ; end ;
9455: GO 9458
9457: POP
// playerCommander := CreateHuman ;
9458: LD_ADDR_EXP 9
9462: PUSH
9463: CALL_OW 44
9467: ST_TO_ADDR
// hc_importance := 0 ;
9468: LD_ADDR_OWVAR 32
9472: PUSH
9473: LD_INT 0
9475: ST_TO_ADDR
// hc_gallery :=  ;
9476: LD_ADDR_OWVAR 33
9480: PUSH
9481: LD_STRING 
9483: ST_TO_ADDR
// result := Replace ( result , 2 , result [ 2 ] ^ playerCommander ) ;
9484: LD_ADDR_VAR 0 1
9488: PUSH
9489: LD_VAR 0 1
9493: PPUSH
9494: LD_INT 2
9496: PPUSH
9497: LD_VAR 0 1
9501: PUSH
9502: LD_INT 2
9504: ARRAY
9505: PUSH
9506: LD_EXP 9
9510: ADD
9511: PPUSH
9512: CALL_OW 1
9516: ST_TO_ADDR
// end ;
9517: LD_VAR 0 1
9521: RET
// export function PrepareReinforcements ; var i , peopleAmount , tmp , un , veh ; begin
9522: LD_INT 0
9524: PPUSH
9525: PPUSH
9526: PPUSH
9527: PPUSH
9528: PPUSH
9529: PPUSH
// uc_side := 1 ;
9530: LD_ADDR_OWVAR 20
9534: PUSH
9535: LD_INT 1
9537: ST_TO_ADDR
// uc_nation := 1 ;
9538: LD_ADDR_OWVAR 21
9542: PUSH
9543: LD_INT 1
9545: ST_TO_ADDR
// InitHc ;
9546: CALL_OW 19
// peopleAmount := [ 3 , 3 , 2 ] [ Difficulty ] ;
9550: LD_ADDR_VAR 0 3
9554: PUSH
9555: LD_INT 3
9557: PUSH
9558: LD_INT 3
9560: PUSH
9561: LD_INT 2
9563: PUSH
9564: EMPTY
9565: LIST
9566: LIST
9567: LIST
9568: PUSH
9569: LD_OWVAR 67
9573: ARRAY
9574: ST_TO_ADDR
// for i = 1 to peopleAmount do
9575: LD_ADDR_VAR 0 2
9579: PUSH
9580: DOUBLE
9581: LD_INT 1
9583: DEC
9584: ST_TO_ADDR
9585: LD_VAR 0 3
9589: PUSH
9590: FOR_TO
9591: IFFALSE 9640
// begin PrepareHuman ( false , 2 , [ 7 , 6 , 5 ] [ Difficulty ] ) ;
9593: LD_INT 0
9595: PPUSH
9596: LD_INT 2
9598: PPUSH
9599: LD_INT 7
9601: PUSH
9602: LD_INT 6
9604: PUSH
9605: LD_INT 5
9607: PUSH
9608: EMPTY
9609: LIST
9610: LIST
9611: LIST
9612: PUSH
9613: LD_OWVAR 67
9617: ARRAY
9618: PPUSH
9619: CALL_OW 380
// PlaceUnitInArea ( CreateHuman , startArea , false ) ;
9623: CALL_OW 44
9627: PPUSH
9628: LD_INT 19
9630: PPUSH
9631: LD_INT 0
9633: PPUSH
9634: CALL 61023 0 3
// end ;
9638: GO 9590
9640: POP
9641: POP
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_computer , us_crane , 58 ) ;
9642: LD_INT 2
9644: PPUSH
9645: LD_INT 1
9647: PPUSH
9648: LD_INT 3
9650: PPUSH
9651: LD_INT 13
9653: PPUSH
9654: LD_INT 58
9656: PPUSH
9657: CALL 26364 0 5
// PlaceUnitInArea ( CreateVehicle , startArea , false ) ;
9661: CALL_OW 45
9665: PPUSH
9666: LD_INT 19
9668: PPUSH
9669: LD_INT 0
9671: PPUSH
9672: CALL 61023 0 3
// if commander = 1 then
9676: LD_EXP 25
9680: PUSH
9681: LD_INT 1
9683: EQUAL
9684: IFFALSE 9695
// wait ( 6 6$00 ) else
9686: LD_INT 12600
9688: PPUSH
9689: CALL_OW 67
9693: GO 9702
// wait ( 8 8$00 ) ;
9695: LD_INT 16800
9697: PPUSH
9698: CALL_OW 67
// uc_side := 1 ;
9702: LD_ADDR_OWVAR 20
9706: PUSH
9707: LD_INT 1
9709: ST_TO_ADDR
// uc_nation := 1 ;
9710: LD_ADDR_OWVAR 21
9714: PUSH
9715: LD_INT 1
9717: ST_TO_ADDR
// InitVc ;
9718: CALL_OW 20
// InitHc ;
9722: CALL_OW 19
// for i = 1 to 5 do
9726: LD_ADDR_VAR 0 2
9730: PUSH
9731: DOUBLE
9732: LD_INT 1
9734: DEC
9735: ST_TO_ADDR
9736: LD_INT 5
9738: PUSH
9739: FOR_TO
9740: IFFALSE 9984
// begin PrepareVehicle ( [ us_heavy_tracked , us_medium_tracked , us_light_wheeled ] [ i mod 3 + 1 ] , engine_combustion , [ control_manual , control_computer , control_computer ] [ i mod 3 + 1 ] , [ us_heavy_gun , us_cargo_bay , us_radar ] [ i mod 3 + 1 ] , rand ( 40 , 55 ) ) ;
9742: LD_INT 4
9744: PUSH
9745: LD_INT 3
9747: PUSH
9748: LD_INT 1
9750: PUSH
9751: EMPTY
9752: LIST
9753: LIST
9754: LIST
9755: PUSH
9756: LD_VAR 0 2
9760: PUSH
9761: LD_INT 3
9763: MOD
9764: PUSH
9765: LD_INT 1
9767: PLUS
9768: ARRAY
9769: PPUSH
9770: LD_INT 1
9772: PPUSH
9773: LD_INT 1
9775: PUSH
9776: LD_INT 3
9778: PUSH
9779: LD_INT 3
9781: PUSH
9782: EMPTY
9783: LIST
9784: LIST
9785: LIST
9786: PUSH
9787: LD_VAR 0 2
9791: PUSH
9792: LD_INT 3
9794: MOD
9795: PUSH
9796: LD_INT 1
9798: PLUS
9799: ARRAY
9800: PPUSH
9801: LD_INT 6
9803: PUSH
9804: LD_INT 12
9806: PUSH
9807: LD_INT 11
9809: PUSH
9810: EMPTY
9811: LIST
9812: LIST
9813: LIST
9814: PUSH
9815: LD_VAR 0 2
9819: PUSH
9820: LD_INT 3
9822: MOD
9823: PUSH
9824: LD_INT 1
9826: PLUS
9827: ARRAY
9828: PPUSH
9829: LD_INT 40
9831: PPUSH
9832: LD_INT 55
9834: PPUSH
9835: CALL_OW 12
9839: PPUSH
9840: CALL 26364 0 5
// veh := CreateVehicle ;
9844: LD_ADDR_VAR 0 6
9848: PUSH
9849: CALL_OW 45
9853: ST_TO_ADDR
// PlaceUnitInArea ( veh , startArea , false ) ;
9854: LD_VAR 0 6
9858: PPUSH
9859: LD_INT 19
9861: PPUSH
9862: LD_INT 0
9864: PPUSH
9865: CALL 61023 0 3
// if GetWeapon ( veh ) = us_cargo_bay then
9869: LD_VAR 0 6
9873: PPUSH
9874: CALL_OW 264
9878: PUSH
9879: LD_INT 12
9881: EQUAL
9882: IFFALSE 9914
// begin AddCargo ( veh , mat_cans , 70 ) ;
9884: LD_VAR 0 6
9888: PPUSH
9889: LD_INT 1
9891: PPUSH
9892: LD_INT 70
9894: PPUSH
9895: CALL_OW 291
// AddCargo ( veh , mat_siberit , 30 ) ;
9899: LD_VAR 0 6
9903: PPUSH
9904: LD_INT 3
9906: PPUSH
9907: LD_INT 30
9909: PPUSH
9910: CALL_OW 291
// end ; if GetControl ( veh ) = control_manual then
9914: LD_VAR 0 6
9918: PPUSH
9919: CALL_OW 263
9923: PUSH
9924: LD_INT 1
9926: EQUAL
9927: IFFALSE 9982
// begin PrepareHuman ( sex_male , 3 , 6 ) ;
9929: LD_INT 1
9931: PPUSH
9932: LD_INT 3
9934: PPUSH
9935: LD_INT 6
9937: PPUSH
9938: CALL_OW 380
// un := CreateHuman ;
9942: LD_ADDR_VAR 0 5
9946: PUSH
9947: CALL_OW 44
9951: ST_TO_ADDR
// tmp := tmp ^ un ;
9952: LD_ADDR_VAR 0 4
9956: PUSH
9957: LD_VAR 0 4
9961: PUSH
9962: LD_VAR 0 5
9966: ADD
9967: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9968: LD_VAR 0 5
9972: PPUSH
9973: LD_VAR 0 6
9977: PPUSH
9978: CALL_OW 52
// end ; end ;
9982: GO 9739
9984: POP
9985: POP
// if tmp then
9986: LD_VAR 0 4
9990: IFFALSE 10054
// begin CenterNowOnUnits ( tmp ) ;
9992: LD_VAR 0 4
9996: PPUSH
9997: CALL_OW 87
// Say ( tmp [ 1 ] , DAR-1 ) ;
10001: LD_VAR 0 4
10005: PUSH
10006: LD_INT 1
10008: ARRAY
10009: PPUSH
10010: LD_STRING DAR-1
10012: PPUSH
10013: CALL_OW 88
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-DAR ) ;
10017: LD_EXP 9
10021: PPUSH
10022: LD_STRING D
10024: PUSH
10025: LD_STRING I
10027: PUSH
10028: LD_STRING J
10030: PUSH
10031: LD_STRING S
10033: PUSH
10034: EMPTY
10035: LIST
10036: LIST
10037: LIST
10038: PUSH
10039: LD_EXP 25
10043: ARRAY
10044: STR
10045: PUSH
10046: LD_STRING -1-DAR
10048: STR
10049: PPUSH
10050: CALL_OW 88
// end ; if not reinforceAllowed then
10054: LD_EXP 24
10058: NOT
10059: IFFALSE 10063
// exit ;
10061: GO 10217
// wait ( 25 25$00 ) ;
10063: LD_INT 52500
10065: PPUSH
10066: CALL_OW 67
// uc_side := 1 ;
10070: LD_ADDR_OWVAR 20
10074: PUSH
10075: LD_INT 1
10077: ST_TO_ADDR
// uc_nation := 1 ;
10078: LD_ADDR_OWVAR 21
10082: PUSH
10083: LD_INT 1
10085: ST_TO_ADDR
// InitVc ;
10086: CALL_OW 20
// InitHc ;
10090: CALL_OW 19
// for i = 1 to 4 do
10094: LD_ADDR_VAR 0 2
10098: PUSH
10099: DOUBLE
10100: LD_INT 1
10102: DEC
10103: ST_TO_ADDR
10104: LD_INT 4
10106: PUSH
10107: FOR_TO
10108: IFFALSE 10215
// begin PrepareVehicle ( us_morphling , engine_siberite , control_manual , us_heavy_gun , 1 ) ;
10110: LD_INT 5
10112: PPUSH
10113: LD_INT 3
10115: PPUSH
10116: LD_INT 1
10118: PPUSH
10119: LD_INT 6
10121: PPUSH
10122: LD_INT 1
10124: PPUSH
10125: CALL 26364 0 5
// veh := CreateVehicle ;
10129: LD_ADDR_VAR 0 6
10133: PUSH
10134: CALL_OW 45
10138: ST_TO_ADDR
// PlaceUnitInArea ( veh , startArea , false ) ;
10139: LD_VAR 0 6
10143: PPUSH
10144: LD_INT 19
10146: PPUSH
10147: LD_INT 0
10149: PPUSH
10150: CALL 61023 0 3
// if GetControl ( veh ) = control_manual then
10154: LD_VAR 0 6
10158: PPUSH
10159: CALL_OW 263
10163: PUSH
10164: LD_INT 1
10166: EQUAL
10167: IFFALSE 10213
// begin PrepareHuman ( false , 3 , [ 7 , 6 , 5 ] [ Difficulty ] ) ;
10169: LD_INT 0
10171: PPUSH
10172: LD_INT 3
10174: PPUSH
10175: LD_INT 7
10177: PUSH
10178: LD_INT 6
10180: PUSH
10181: LD_INT 5
10183: PUSH
10184: EMPTY
10185: LIST
10186: LIST
10187: LIST
10188: PUSH
10189: LD_OWVAR 67
10193: ARRAY
10194: PPUSH
10195: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
10199: CALL_OW 44
10203: PPUSH
10204: LD_VAR 0 6
10208: PPUSH
10209: CALL_OW 52
// end ; end ;
10213: GO 10107
10215: POP
10216: POP
// end ;
10217: LD_VAR 0 1
10221: RET
// export function PrepareLegionReinforcements ; var i , un , j , tmp ; begin
10222: LD_INT 0
10224: PPUSH
10225: PPUSH
10226: PPUSH
10227: PPUSH
10228: PPUSH
// uc_side := 8 ;
10229: LD_ADDR_OWVAR 20
10233: PUSH
10234: LD_INT 8
10236: ST_TO_ADDR
// uc_nation := nation_arabian ;
10237: LD_ADDR_OWVAR 21
10241: PUSH
10242: LD_INT 2
10244: ST_TO_ADDR
// for i = 1 to 2 do
10245: LD_ADDR_VAR 0 2
10249: PUSH
10250: DOUBLE
10251: LD_INT 1
10253: DEC
10254: ST_TO_ADDR
10255: LD_INT 2
10257: PUSH
10258: FOR_TO
10259: IFFALSE 10339
// for j = 1 to 4 do
10261: LD_ADDR_VAR 0 4
10265: PUSH
10266: DOUBLE
10267: LD_INT 1
10269: DEC
10270: ST_TO_ADDR
10271: LD_INT 4
10273: PUSH
10274: FOR_TO
10275: IFFALSE 10335
// begin PrepareHuman ( false , j , 8 ) ;
10277: LD_INT 0
10279: PPUSH
10280: LD_VAR 0 4
10284: PPUSH
10285: LD_INT 8
10287: PPUSH
10288: CALL_OW 380
// un := CreateHuman ;
10292: LD_ADDR_VAR 0 3
10296: PUSH
10297: CALL_OW 44
10301: ST_TO_ADDR
// PlaceUnitArea ( un , legionSpawn , false ) ;
10302: LD_VAR 0 3
10306: PPUSH
10307: LD_INT 23
10309: PPUSH
10310: LD_INT 0
10312: PPUSH
10313: CALL_OW 49
// tmp := tmp union un ;
10317: LD_ADDR_VAR 0 5
10321: PUSH
10322: LD_VAR 0 5
10326: PUSH
10327: LD_VAR 0 3
10331: UNION
10332: ST_TO_ADDR
// end ;
10333: GO 10274
10335: POP
10336: POP
10337: GO 10258
10339: POP
10340: POP
// for i in tmp do
10341: LD_ADDR_VAR 0 2
10345: PUSH
10346: LD_VAR 0 5
10350: PUSH
10351: FOR_IN
10352: IFFALSE 10371
// ComMoveXY ( i , 150 , 136 ) ;
10354: LD_VAR 0 2
10358: PPUSH
10359: LD_INT 150
10361: PPUSH
10362: LD_INT 136
10364: PPUSH
10365: CALL_OW 111
10369: GO 10351
10371: POP
10372: POP
// mc_bases := Replace ( mc_bases , mc_leg , mc_bases [ mc_leg ] union tmp ) ;
10373: LD_ADDR_EXP 36
10377: PUSH
10378: LD_EXP 36
10382: PPUSH
10383: LD_EXP 6
10387: PPUSH
10388: LD_EXP 36
10392: PUSH
10393: LD_EXP 6
10397: ARRAY
10398: PUSH
10399: LD_VAR 0 5
10403: UNION
10404: PPUSH
10405: CALL_OW 1
10409: ST_TO_ADDR
// end ;
10410: LD_VAR 0 1
10414: RET
// every 0 0$10 trigger Difficulty > 1 and GetTech ( tech_lapser , 3 ) = state_researched do
10415: LD_OWVAR 67
10419: PUSH
10420: LD_INT 1
10422: GREATER
10423: PUSH
10424: LD_INT 31
10426: PPUSH
10427: LD_INT 3
10429: PPUSH
10430: CALL_OW 321
10434: PUSH
10435: LD_INT 2
10437: EQUAL
10438: AND
10439: IFFALSE 10656
10441: GO 10443
10443: DISABLE
// begin MC_InsertBuildingList ( mc_rus_1 , [ [ b_turret , 101 , 159 , 5 ] , [ b_turret , 105 , 158 , 5 ] , [ b_turret , 96 , 136 , 5 ] , [ b_turret , 94 , 133 , 4 ] , [ b_turret , 84 , 102 , 4 ] ] ) ;
10444: LD_EXP 7
10448: PPUSH
10449: LD_INT 33
10451: PUSH
10452: LD_INT 101
10454: PUSH
10455: LD_INT 159
10457: PUSH
10458: LD_INT 5
10460: PUSH
10461: EMPTY
10462: LIST
10463: LIST
10464: LIST
10465: LIST
10466: PUSH
10467: LD_INT 33
10469: PUSH
10470: LD_INT 105
10472: PUSH
10473: LD_INT 158
10475: PUSH
10476: LD_INT 5
10478: PUSH
10479: EMPTY
10480: LIST
10481: LIST
10482: LIST
10483: LIST
10484: PUSH
10485: LD_INT 33
10487: PUSH
10488: LD_INT 96
10490: PUSH
10491: LD_INT 136
10493: PUSH
10494: LD_INT 5
10496: PUSH
10497: EMPTY
10498: LIST
10499: LIST
10500: LIST
10501: LIST
10502: PUSH
10503: LD_INT 33
10505: PUSH
10506: LD_INT 94
10508: PUSH
10509: LD_INT 133
10511: PUSH
10512: LD_INT 4
10514: PUSH
10515: EMPTY
10516: LIST
10517: LIST
10518: LIST
10519: LIST
10520: PUSH
10521: LD_INT 33
10523: PUSH
10524: LD_INT 84
10526: PUSH
10527: LD_INT 102
10529: PUSH
10530: LD_INT 4
10532: PUSH
10533: EMPTY
10534: LIST
10535: LIST
10536: LIST
10537: LIST
10538: PUSH
10539: EMPTY
10540: LIST
10541: LIST
10542: LIST
10543: LIST
10544: LIST
10545: PPUSH
10546: CALL 86146 0 2
// MC_InsertBuildingList ( mc_rus_2 , [ [ b_turret , 50 , 17 , 4 ] , [ b_turret , 52 , 20 , 4 ] , [ b_turret , 53 , 23 , 4 ] , [ b_turret , 45 , 32 , 4 ] , [ b_turret , 45 , 39 , 4 ] ] ) ;
10550: LD_EXP 8
10554: PPUSH
10555: LD_INT 33
10557: PUSH
10558: LD_INT 50
10560: PUSH
10561: LD_INT 17
10563: PUSH
10564: LD_INT 4
10566: PUSH
10567: EMPTY
10568: LIST
10569: LIST
10570: LIST
10571: LIST
10572: PUSH
10573: LD_INT 33
10575: PUSH
10576: LD_INT 52
10578: PUSH
10579: LD_INT 20
10581: PUSH
10582: LD_INT 4
10584: PUSH
10585: EMPTY
10586: LIST
10587: LIST
10588: LIST
10589: LIST
10590: PUSH
10591: LD_INT 33
10593: PUSH
10594: LD_INT 53
10596: PUSH
10597: LD_INT 23
10599: PUSH
10600: LD_INT 4
10602: PUSH
10603: EMPTY
10604: LIST
10605: LIST
10606: LIST
10607: LIST
10608: PUSH
10609: LD_INT 33
10611: PUSH
10612: LD_INT 45
10614: PUSH
10615: LD_INT 32
10617: PUSH
10618: LD_INT 4
10620: PUSH
10621: EMPTY
10622: LIST
10623: LIST
10624: LIST
10625: LIST
10626: PUSH
10627: LD_INT 33
10629: PUSH
10630: LD_INT 45
10632: PUSH
10633: LD_INT 39
10635: PUSH
10636: LD_INT 4
10638: PUSH
10639: EMPTY
10640: LIST
10641: LIST
10642: LIST
10643: LIST
10644: PUSH
10645: EMPTY
10646: LIST
10647: LIST
10648: LIST
10649: LIST
10650: LIST
10651: PPUSH
10652: CALL 86146 0 2
// end ; end_of_file
10656: END
// export function Action ; var i , tmp ; begin
10657: LD_INT 0
10659: PPUSH
10660: PPUSH
10661: PPUSH
// InGameOn ;
10662: CALL_OW 8
// CenterNowOnXY ( 225 , 217 ) ;
10666: LD_INT 225
10668: PPUSH
10669: LD_INT 217
10671: PPUSH
10672: CALL_OW 86
// for i in playerForces [ 2 ] do
10676: LD_ADDR_VAR 0 2
10680: PUSH
10681: LD_EXP 10
10685: PUSH
10686: LD_INT 2
10688: ARRAY
10689: PUSH
10690: FOR_IN
10691: IFFALSE 10824
// begin if playerForces [ 1 ] and GetClass ( i ) in [ 3 , 4 ] then
10693: LD_EXP 10
10697: PUSH
10698: LD_INT 1
10700: ARRAY
10701: PUSH
10702: LD_VAR 0 2
10706: PPUSH
10707: CALL_OW 257
10711: PUSH
10712: LD_INT 3
10714: PUSH
10715: LD_INT 4
10717: PUSH
10718: EMPTY
10719: LIST
10720: LIST
10721: IN
10722: AND
10723: IFFALSE 10807
// begin PlaceUnitInArea ( playerForces [ 1 ] [ 1 ] , startArea , false ) ;
10725: LD_EXP 10
10729: PUSH
10730: LD_INT 1
10732: ARRAY
10733: PUSH
10734: LD_INT 1
10736: ARRAY
10737: PPUSH
10738: LD_INT 19
10740: PPUSH
10741: LD_INT 0
10743: PPUSH
10744: CALL 61023 0 3
// PlaceHumanInUnit ( i , playerForces [ 1 ] [ 1 ] ) ;
10748: LD_VAR 0 2
10752: PPUSH
10753: LD_EXP 10
10757: PUSH
10758: LD_INT 1
10760: ARRAY
10761: PUSH
10762: LD_INT 1
10764: ARRAY
10765: PPUSH
10766: CALL_OW 52
// playerForces := Replace ( playerForces , 1 , Delete ( playerForces [ 1 ] , 1 ) ) ;
10770: LD_ADDR_EXP 10
10774: PUSH
10775: LD_EXP 10
10779: PPUSH
10780: LD_INT 1
10782: PPUSH
10783: LD_EXP 10
10787: PUSH
10788: LD_INT 1
10790: ARRAY
10791: PPUSH
10792: LD_INT 1
10794: PPUSH
10795: CALL_OW 3
10799: PPUSH
10800: CALL_OW 1
10804: ST_TO_ADDR
// end else
10805: GO 10822
// PlaceUnitInArea ( i , startArea , false ) ;
10807: LD_VAR 0 2
10811: PPUSH
10812: LD_INT 19
10814: PPUSH
10815: LD_INT 0
10817: PPUSH
10818: CALL 61023 0 3
// end ;
10822: GO 10690
10824: POP
10825: POP
// wait ( 0 0$2 ) ;
10826: LD_INT 70
10828: PPUSH
10829: CALL_OW 67
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1 ) ;
10833: LD_EXP 9
10837: PPUSH
10838: LD_STRING D
10840: PUSH
10841: LD_STRING I
10843: PUSH
10844: LD_STRING J
10846: PUSH
10847: LD_STRING S
10849: PUSH
10850: EMPTY
10851: LIST
10852: LIST
10853: LIST
10854: PUSH
10855: LD_EXP 25
10859: ARRAY
10860: STR
10861: PUSH
10862: LD_STRING -1
10864: STR
10865: PPUSH
10866: CALL_OW 88
// SayRadio ( Powell , DP-1 ) ;
10870: LD_EXP 12
10874: PPUSH
10875: LD_STRING DP-1
10877: PPUSH
10878: CALL_OW 94
// SayRadio ( Powell , DP-2 ) ;
10882: LD_EXP 12
10886: PPUSH
10887: LD_STRING DP-2
10889: PPUSH
10890: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -2 ) ;
10894: LD_EXP 9
10898: PPUSH
10899: LD_STRING D
10901: PUSH
10902: LD_STRING I
10904: PUSH
10905: LD_STRING J
10907: PUSH
10908: LD_STRING S
10910: PUSH
10911: EMPTY
10912: LIST
10913: LIST
10914: LIST
10915: PUSH
10916: LD_EXP 25
10920: ARRAY
10921: STR
10922: PUSH
10923: LD_STRING -2
10925: STR
10926: PPUSH
10927: CALL_OW 88
// InGameOff ;
10931: CALL_OW 9
// ChangeMissionObjectives ( O1 ) ;
10935: LD_STRING O1
10937: PPUSH
10938: CALL_OW 337
// game := true ;
10942: LD_ADDR_EXP 3
10946: PUSH
10947: LD_INT 1
10949: ST_TO_ADDR
// SaveForQuickRestart ;
10950: CALL_OW 22
// wait ( 0 0$5 ) ;
10954: LD_INT 175
10956: PPUSH
10957: CALL_OW 67
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -3 ) ;
10961: LD_EXP 9
10965: PPUSH
10966: LD_STRING D
10968: PUSH
10969: LD_STRING I
10971: PUSH
10972: LD_STRING J
10974: PUSH
10975: LD_STRING S
10977: PUSH
10978: EMPTY
10979: LIST
10980: LIST
10981: LIST
10982: PUSH
10983: LD_EXP 25
10987: ARRAY
10988: STR
10989: PUSH
10990: LD_STRING -3
10992: STR
10993: PPUSH
10994: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
10998: LD_INT 35
11000: PPUSH
11001: CALL_OW 67
// until ruEscape [ 1 ] >= ruEscape [ 2 ] ;
11005: LD_EXP 15
11009: PUSH
11010: LD_INT 1
11012: ARRAY
11013: PUSH
11014: LD_EXP 15
11018: PUSH
11019: LD_INT 2
11021: ARRAY
11022: GREATEREQUAL
11023: IFFALSE 10998
// outpostEscape := true ;
11025: LD_ADDR_EXP 27
11029: PUSH
11030: LD_INT 1
11032: ST_TO_ADDR
// tmp := UnitFilter ( ruOutpost , [ f_sex , sex_male ] ) ;
11033: LD_ADDR_VAR 0 3
11037: PUSH
11038: LD_EXP 14
11042: PPUSH
11043: LD_INT 26
11045: PUSH
11046: LD_INT 1
11048: PUSH
11049: EMPTY
11050: LIST
11051: LIST
11052: PPUSH
11053: CALL_OW 72
11057: ST_TO_ADDR
// if tmp then
11058: LD_VAR 0 3
11062: IFFALSE 11080
// Say ( tmp [ 1 ] , DR-1-Escape ) ;
11064: LD_VAR 0 3
11068: PUSH
11069: LD_INT 1
11071: ARRAY
11072: PPUSH
11073: LD_STRING DR-1-Escape
11075: PPUSH
11076: CALL_OW 88
// wait ( 0 0$1 ) ;
11080: LD_INT 35
11082: PPUSH
11083: CALL_OW 67
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Escape ) ;
11087: LD_EXP 9
11091: PPUSH
11092: LD_STRING D
11094: PUSH
11095: LD_STRING I
11097: PUSH
11098: LD_STRING J
11100: PUSH
11101: LD_STRING S
11103: PUSH
11104: EMPTY
11105: LIST
11106: LIST
11107: LIST
11108: PUSH
11109: LD_EXP 25
11113: ARRAY
11114: STR
11115: PUSH
11116: LD_STRING -1-Escape
11118: STR
11119: PPUSH
11120: CALL_OW 88
// for i in ruOutpost do
11124: LD_ADDR_VAR 0 2
11128: PUSH
11129: LD_EXP 14
11133: PUSH
11134: FOR_IN
11135: IFFALSE 11189
// begin if IsInUnit ( i ) then
11137: LD_VAR 0 2
11141: PPUSH
11142: CALL_OW 310
11146: IFFALSE 11157
// ComExitBuilding ( i ) ;
11148: LD_VAR 0 2
11152: PPUSH
11153: CALL_OW 122
// AddComMoveXY ( i , 179 , 102 ) ;
11157: LD_VAR 0 2
11161: PPUSH
11162: LD_INT 179
11164: PPUSH
11165: LD_INT 102
11167: PPUSH
11168: CALL_OW 171
// AddComMoveXY ( i , 28 , 20 ) ;
11172: LD_VAR 0 2
11176: PPUSH
11177: LD_INT 28
11179: PPUSH
11180: LD_INT 20
11182: PPUSH
11183: CALL_OW 171
// end ;
11187: GO 11134
11189: POP
11190: POP
// tmp := [ ] ;
11191: LD_ADDR_VAR 0 3
11195: PUSH
11196: EMPTY
11197: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11198: LD_INT 35
11200: PPUSH
11201: CALL_OW 67
// tmp := UnitFilter ( ruOutpost , [ f_inarea , rus2Base ] ) ;
11205: LD_ADDR_VAR 0 3
11209: PUSH
11210: LD_EXP 14
11214: PPUSH
11215: LD_INT 95
11217: PUSH
11218: LD_INT 11
11220: PUSH
11221: EMPTY
11222: LIST
11223: LIST
11224: PPUSH
11225: CALL_OW 72
11229: ST_TO_ADDR
// if tmp then
11230: LD_VAR 0 3
11234: IFFALSE 11313
// for i in tmp do
11236: LD_ADDR_VAR 0 2
11240: PUSH
11241: LD_VAR 0 3
11245: PUSH
11246: FOR_IN
11247: IFFALSE 11311
// begin ruOutpost := ruOutpost diff i ;
11249: LD_ADDR_EXP 14
11253: PUSH
11254: LD_EXP 14
11258: PUSH
11259: LD_VAR 0 2
11263: DIFF
11264: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ mc_rus_2 , mc_bases [ mc_rus_2 ] + 1 ] , i ) ;
11265: LD_ADDR_EXP 36
11269: PUSH
11270: LD_EXP 36
11274: PPUSH
11275: LD_EXP 8
11279: PUSH
11280: LD_EXP 36
11284: PUSH
11285: LD_EXP 8
11289: ARRAY
11290: PUSH
11291: LD_INT 1
11293: PLUS
11294: PUSH
11295: EMPTY
11296: LIST
11297: LIST
11298: PPUSH
11299: LD_VAR 0 2
11303: PPUSH
11304: CALL 26486 0 3
11308: ST_TO_ADDR
// end ;
11309: GO 11246
11311: POP
11312: POP
// until not UnitFilter ( ruOutpost , [ f_type , unit_human ] ) ;
11313: LD_EXP 14
11317: PPUSH
11318: LD_INT 21
11320: PUSH
11321: LD_INT 1
11323: PUSH
11324: EMPTY
11325: LIST
11326: LIST
11327: PPUSH
11328: CALL_OW 72
11332: NOT
11333: IFFALSE 11198
// ruOutpost := [ ] ;
11335: LD_ADDR_EXP 14
11339: PUSH
11340: EMPTY
11341: ST_TO_ADDR
// end ;
11342: LD_VAR 0 1
11346: RET
// every 0 0$1 trigger outpostEscape do var i , tmp ;
11347: LD_EXP 27
11351: IFFALSE 11540
11353: GO 11355
11355: DISABLE
11356: LD_INT 0
11358: PPUSH
11359: PPUSH
// begin wait ( rand ( 0 0$25 , 0 0$35 ) ) ;
11360: LD_INT 875
11362: PPUSH
11363: LD_INT 1225
11365: PPUSH
11366: CALL_OW 12
11370: PPUSH
11371: CALL_OW 67
// tmp := [ [ 208 , 166 ] , [ 218 , 174 ] , [ 201 , 173 ] , [ 189 , 167 ] , [ 191 , 160 ] , [ 209 , 181 ] , [ 192 , 162 ] , [ 197 , 166 ] ] ;
11375: LD_ADDR_VAR 0 2
11379: PUSH
11380: LD_INT 208
11382: PUSH
11383: LD_INT 166
11385: PUSH
11386: EMPTY
11387: LIST
11388: LIST
11389: PUSH
11390: LD_INT 218
11392: PUSH
11393: LD_INT 174
11395: PUSH
11396: EMPTY
11397: LIST
11398: LIST
11399: PUSH
11400: LD_INT 201
11402: PUSH
11403: LD_INT 173
11405: PUSH
11406: EMPTY
11407: LIST
11408: LIST
11409: PUSH
11410: LD_INT 189
11412: PUSH
11413: LD_INT 167
11415: PUSH
11416: EMPTY
11417: LIST
11418: LIST
11419: PUSH
11420: LD_INT 191
11422: PUSH
11423: LD_INT 160
11425: PUSH
11426: EMPTY
11427: LIST
11428: LIST
11429: PUSH
11430: LD_INT 209
11432: PUSH
11433: LD_INT 181
11435: PUSH
11436: EMPTY
11437: LIST
11438: LIST
11439: PUSH
11440: LD_INT 192
11442: PUSH
11443: LD_INT 162
11445: PUSH
11446: EMPTY
11447: LIST
11448: LIST
11449: PUSH
11450: LD_INT 197
11452: PUSH
11453: LD_INT 166
11455: PUSH
11456: EMPTY
11457: LIST
11458: LIST
11459: PUSH
11460: EMPTY
11461: LIST
11462: LIST
11463: LIST
11464: LIST
11465: LIST
11466: LIST
11467: LIST
11468: LIST
11469: ST_TO_ADDR
// for i = 1 to 5 + Difficulty do
11470: LD_ADDR_VAR 0 1
11474: PUSH
11475: DOUBLE
11476: LD_INT 1
11478: DEC
11479: ST_TO_ADDR
11480: LD_INT 5
11482: PUSH
11483: LD_OWVAR 67
11487: PLUS
11488: PUSH
11489: FOR_TO
11490: IFFALSE 11538
// begin MineExplosion ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , 1 ) ;
11492: LD_VAR 0 2
11496: PUSH
11497: LD_VAR 0 1
11501: ARRAY
11502: PUSH
11503: LD_INT 1
11505: ARRAY
11506: PPUSH
11507: LD_VAR 0 2
11511: PUSH
11512: LD_VAR 0 1
11516: ARRAY
11517: PUSH
11518: LD_INT 2
11520: ARRAY
11521: PPUSH
11522: LD_INT 1
11524: PPUSH
11525: CALL_OW 453
// wait ( 0 0$0.8 ) ;
11529: LD_INT 28
11531: PPUSH
11532: CALL_OW 67
// end ;
11536: GO 11489
11538: POP
11539: POP
// end ;
11540: PPOPN 2
11542: END
// every 0 0$3 trigger not outpostEscape do var tmp , engs , buildings , empty , i , j , k ;
11543: LD_EXP 27
11547: NOT
11548: IFFALSE 12202
11550: GO 11552
11552: DISABLE
11553: LD_INT 0
11555: PPUSH
11556: PPUSH
11557: PPUSH
11558: PPUSH
11559: PPUSH
11560: PPUSH
11561: PPUSH
// begin enable ;
11562: ENABLE
// tmp := UnitFilter ( ruOutpost , [ [ f_side , 3 ] , [ f_class , 1 ] ] ) ;
11563: LD_ADDR_VAR 0 1
11567: PUSH
11568: LD_EXP 14
11572: PPUSH
11573: LD_INT 22
11575: PUSH
11576: LD_INT 3
11578: PUSH
11579: EMPTY
11580: LIST
11581: LIST
11582: PUSH
11583: LD_INT 25
11585: PUSH
11586: LD_INT 1
11588: PUSH
11589: EMPTY
11590: LIST
11591: LIST
11592: PUSH
11593: EMPTY
11594: LIST
11595: LIST
11596: PPUSH
11597: CALL_OW 72
11601: ST_TO_ADDR
// engs := UnitFilter ( ruOutpost , [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
11602: LD_ADDR_VAR 0 2
11606: PUSH
11607: LD_EXP 14
11611: PPUSH
11612: LD_INT 22
11614: PUSH
11615: LD_INT 3
11617: PUSH
11618: EMPTY
11619: LIST
11620: LIST
11621: PUSH
11622: LD_INT 25
11624: PUSH
11625: LD_INT 2
11627: PUSH
11628: EMPTY
11629: LIST
11630: LIST
11631: PUSH
11632: EMPTY
11633: LIST
11634: LIST
11635: PPUSH
11636: CALL_OW 72
11640: ST_TO_ADDR
// buildings := UnitFilter ( ruOutpost , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
11641: LD_ADDR_VAR 0 3
11645: PUSH
11646: LD_EXP 14
11650: PPUSH
11651: LD_INT 22
11653: PUSH
11654: LD_INT 3
11656: PUSH
11657: EMPTY
11658: LIST
11659: LIST
11660: PUSH
11661: LD_INT 21
11663: PUSH
11664: LD_INT 3
11666: PUSH
11667: EMPTY
11668: LIST
11669: LIST
11670: PUSH
11671: LD_INT 3
11673: PUSH
11674: LD_INT 24
11676: PUSH
11677: LD_INT 1000
11679: PUSH
11680: EMPTY
11681: LIST
11682: LIST
11683: PUSH
11684: EMPTY
11685: LIST
11686: LIST
11687: PUSH
11688: EMPTY
11689: LIST
11690: LIST
11691: LIST
11692: PPUSH
11693: CALL_OW 72
11697: ST_TO_ADDR
// if engs and buildings then
11698: LD_VAR 0 2
11702: PUSH
11703: LD_VAR 0 3
11707: AND
11708: IFFALSE 11781
// begin for i in engs do
11710: LD_ADDR_VAR 0 5
11714: PUSH
11715: LD_VAR 0 2
11719: PUSH
11720: FOR_IN
11721: IFFALSE 11777
// if IsInUnit ( i ) then
11723: LD_VAR 0 5
11727: PPUSH
11728: CALL_OW 310
11732: IFFALSE 11745
// ComExitBuilding ( i ) else
11734: LD_VAR 0 5
11738: PPUSH
11739: CALL_OW 122
11743: GO 11775
// if not HasTask ( i ) then
11745: LD_VAR 0 5
11749: PPUSH
11750: CALL_OW 314
11754: NOT
11755: IFFALSE 11775
// ComRepairBuilding ( i , buildings [ 1 ] ) ;
11757: LD_VAR 0 5
11761: PPUSH
11762: LD_VAR 0 3
11766: PUSH
11767: LD_INT 1
11769: ARRAY
11770: PPUSH
11771: CALL_OW 130
11775: GO 11720
11777: POP
11778: POP
// end else
11779: GO 11884
// if not buildings and UnitFilter ( ruOutpost , [ f_btype , b_depot ] ) and UnitFilter ( engs , [ f_not , [ f_inside ] ] ) then
11781: LD_VAR 0 3
11785: NOT
11786: PUSH
11787: LD_EXP 14
11791: PPUSH
11792: LD_INT 30
11794: PUSH
11795: LD_INT 0
11797: PUSH
11798: EMPTY
11799: LIST
11800: LIST
11801: PPUSH
11802: CALL_OW 72
11806: AND
11807: PUSH
11808: LD_VAR 0 2
11812: PPUSH
11813: LD_INT 3
11815: PUSH
11816: LD_INT 54
11818: PUSH
11819: EMPTY
11820: LIST
11821: PUSH
11822: EMPTY
11823: LIST
11824: LIST
11825: PPUSH
11826: CALL_OW 72
11830: AND
11831: IFFALSE 11884
// ComEnterUnit ( UnitFilter ( engs , [ f_not , [ f_inside ] ] ) , UnitFilter ( ruOutpost , [ f_btype , b_depot ] ) [ 1 ] ) ;
11833: LD_VAR 0 2
11837: PPUSH
11838: LD_INT 3
11840: PUSH
11841: LD_INT 54
11843: PUSH
11844: EMPTY
11845: LIST
11846: PUSH
11847: EMPTY
11848: LIST
11849: LIST
11850: PPUSH
11851: CALL_OW 72
11855: PPUSH
11856: LD_EXP 14
11860: PPUSH
11861: LD_INT 30
11863: PUSH
11864: LD_INT 0
11866: PUSH
11867: EMPTY
11868: LIST
11869: LIST
11870: PPUSH
11871: CALL_OW 72
11875: PUSH
11876: LD_INT 1
11878: ARRAY
11879: PPUSH
11880: CALL_OW 120
// if not tmp then
11884: LD_VAR 0 1
11888: NOT
11889: IFFALSE 11893
// exit ;
11891: GO 12202
// if FilterUnitsInArea ( ruOutpostCenterArea , [ f_enemy , 3 ] ) > 1 then
11893: LD_INT 26
11895: PPUSH
11896: LD_INT 81
11898: PUSH
11899: LD_INT 3
11901: PUSH
11902: EMPTY
11903: LIST
11904: LIST
11905: PPUSH
11906: CALL_OW 70
11910: PUSH
11911: LD_INT 1
11913: GREATER
11914: IFFALSE 11970
// begin for i in tmp do
11916: LD_ADDR_VAR 0 5
11920: PUSH
11921: LD_VAR 0 1
11925: PUSH
11926: FOR_IN
11927: IFFALSE 11966
// begin if IsInUnit ( i ) then
11929: LD_VAR 0 5
11933: PPUSH
11934: CALL_OW 310
11938: IFFALSE 11949
// ComExitBuilding ( i ) ;
11940: LD_VAR 0 5
11944: PPUSH
11945: CALL_OW 122
// AddComAgressiveMove ( i , 204 , 164 ) ;
11949: LD_VAR 0 5
11953: PPUSH
11954: LD_INT 204
11956: PPUSH
11957: LD_INT 164
11959: PPUSH
11960: CALL_OW 174
// end ;
11964: GO 11926
11966: POP
11967: POP
// end else
11968: GO 12202
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
11970: LD_VAR 0 1
11974: PPUSH
11975: LD_INT 3
11977: PUSH
11978: LD_INT 54
11980: PUSH
11981: EMPTY
11982: LIST
11983: PUSH
11984: EMPTY
11985: LIST
11986: LIST
11987: PPUSH
11988: CALL_OW 72
11992: IFFALSE 12202
// begin empty := UnitFilter ( ruOutpost , [ [ f_btype , b_bunker ] , [ f_empty ] ] ) ;
11994: LD_ADDR_VAR 0 4
11998: PUSH
11999: LD_EXP 14
12003: PPUSH
12004: LD_INT 30
12006: PUSH
12007: LD_INT 32
12009: PUSH
12010: EMPTY
12011: LIST
12012: LIST
12013: PUSH
12014: LD_INT 58
12016: PUSH
12017: EMPTY
12018: LIST
12019: PUSH
12020: EMPTY
12021: LIST
12022: LIST
12023: PPUSH
12024: CALL_OW 72
12028: ST_TO_ADDR
// if not empty and UnitFilter ( ruOutpost , [ f_btype , b_barracks ] ) then
12029: LD_VAR 0 4
12033: NOT
12034: PUSH
12035: LD_EXP 14
12039: PPUSH
12040: LD_INT 30
12042: PUSH
12043: LD_INT 5
12045: PUSH
12046: EMPTY
12047: LIST
12048: LIST
12049: PPUSH
12050: CALL_OW 72
12054: AND
12055: IFFALSE 12092
// begin ComEnterUnit ( tmp , UnitFilter ( ruOutpost , [ f_btype , b_barracks ] ) [ 1 ] ) ;
12057: LD_VAR 0 1
12061: PPUSH
12062: LD_EXP 14
12066: PPUSH
12067: LD_INT 30
12069: PUSH
12070: LD_INT 5
12072: PUSH
12073: EMPTY
12074: LIST
12075: LIST
12076: PPUSH
12077: CALL_OW 72
12081: PUSH
12082: LD_INT 1
12084: ARRAY
12085: PPUSH
12086: CALL_OW 120
// exit ;
12090: GO 12202
// end ; j := UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) ;
12092: LD_ADDR_VAR 0 6
12096: PUSH
12097: LD_VAR 0 1
12101: PPUSH
12102: LD_INT 3
12104: PUSH
12105: LD_INT 54
12107: PUSH
12108: EMPTY
12109: LIST
12110: PUSH
12111: EMPTY
12112: LIST
12113: LIST
12114: PPUSH
12115: CALL_OW 72
12119: ST_TO_ADDR
// if j < empty then
12120: LD_VAR 0 6
12124: PUSH
12125: LD_VAR 0 4
12129: LESS
12130: IFFALSE 12144
// k := j else
12132: LD_ADDR_VAR 0 7
12136: PUSH
12137: LD_VAR 0 6
12141: ST_TO_ADDR
12142: GO 12154
// k := empty ;
12144: LD_ADDR_VAR 0 7
12148: PUSH
12149: LD_VAR 0 4
12153: ST_TO_ADDR
// for i = 1 to k do
12154: LD_ADDR_VAR 0 5
12158: PUSH
12159: DOUBLE
12160: LD_INT 1
12162: DEC
12163: ST_TO_ADDR
12164: LD_VAR 0 7
12168: PUSH
12169: FOR_TO
12170: IFFALSE 12200
// ComEnterUnit ( j [ i ] , empty [ i ] ) ;
12172: LD_VAR 0 6
12176: PUSH
12177: LD_VAR 0 5
12181: ARRAY
12182: PPUSH
12183: LD_VAR 0 4
12187: PUSH
12188: LD_VAR 0 5
12192: ARRAY
12193: PPUSH
12194: CALL_OW 120
12198: GO 12169
12200: POP
12201: POP
// end ; end ;
12202: PPOPN 7
12204: END
// every 0 0$2 trigger GameType = 1 and outpostEscape and FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , 208 , 163 , 8 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_distxy , 208 , 163 , 14 ] ] ) do var i ;
12205: LD_EXP 2
12209: PUSH
12210: LD_INT 1
12212: EQUAL
12213: PUSH
12214: LD_EXP 27
12218: AND
12219: PUSH
12220: LD_INT 22
12222: PUSH
12223: LD_INT 1
12225: PUSH
12226: EMPTY
12227: LIST
12228: LIST
12229: PUSH
12230: LD_INT 92
12232: PUSH
12233: LD_INT 208
12235: PUSH
12236: LD_INT 163
12238: PUSH
12239: LD_INT 8
12241: PUSH
12242: EMPTY
12243: LIST
12244: LIST
12245: LIST
12246: LIST
12247: PUSH
12248: EMPTY
12249: LIST
12250: LIST
12251: PPUSH
12252: CALL_OW 69
12256: AND
12257: PUSH
12258: LD_INT 22
12260: PUSH
12261: LD_INT 3
12263: PUSH
12264: EMPTY
12265: LIST
12266: LIST
12267: PUSH
12268: LD_INT 21
12270: PUSH
12271: LD_INT 1
12273: PUSH
12274: EMPTY
12275: LIST
12276: LIST
12277: PUSH
12278: LD_INT 92
12280: PUSH
12281: LD_INT 208
12283: PUSH
12284: LD_INT 163
12286: PUSH
12287: LD_INT 14
12289: PUSH
12290: EMPTY
12291: LIST
12292: LIST
12293: LIST
12294: LIST
12295: PUSH
12296: EMPTY
12297: LIST
12298: LIST
12299: LIST
12300: PPUSH
12301: CALL_OW 69
12305: NOT
12306: AND
12307: IFFALSE 12612
12309: GO 12311
12311: DISABLE
12312: LD_INT 0
12314: PPUSH
// begin InGameOn ;
12315: CALL_OW 8
// CenterNowOnUnits ( playerCommander ) ;
12319: LD_EXP 9
12323: PPUSH
12324: CALL_OW 87
// wait ( 0 0$1 ) ;
12328: LD_INT 35
12330: PPUSH
12331: CALL_OW 67
// DialogueOn ;
12335: CALL_OW 6
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-BaseCaptured ) ;
12339: LD_EXP 9
12343: PPUSH
12344: LD_STRING D
12346: PUSH
12347: LD_STRING I
12349: PUSH
12350: LD_STRING J
12352: PUSH
12353: LD_STRING S
12355: PUSH
12356: EMPTY
12357: LIST
12358: LIST
12359: LIST
12360: PUSH
12361: LD_EXP 25
12365: ARRAY
12366: STR
12367: PUSH
12368: LD_STRING -1-BaseCaptured
12370: STR
12371: PPUSH
12372: CALL_OW 88
// SayRadio ( Powell , DP-1-BaseCaptured ) ;
12376: LD_EXP 12
12380: PPUSH
12381: LD_STRING DP-1-BaseCaptured
12383: PPUSH
12384: CALL_OW 94
// if sibBombAllowed then
12388: LD_EXP 23
12392: IFFALSE 12534
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -2-BaseCaptured ) ;
12394: LD_EXP 9
12398: PPUSH
12399: LD_STRING D
12401: PUSH
12402: LD_STRING I
12404: PUSH
12405: LD_STRING J
12407: PUSH
12408: LD_STRING S
12410: PUSH
12411: EMPTY
12412: LIST
12413: LIST
12414: LIST
12415: PUSH
12416: LD_EXP 25
12420: ARRAY
12421: STR
12422: PUSH
12423: LD_STRING -2-BaseCaptured
12425: STR
12426: PPUSH
12427: CALL_OW 88
// if commander = 1 then
12431: LD_EXP 25
12435: PUSH
12436: LD_INT 1
12438: EQUAL
12439: IFFALSE 12453
// SayRadio ( Powell , DP-2b-BaseCaptured ) ;
12441: LD_EXP 12
12445: PPUSH
12446: LD_STRING DP-2b-BaseCaptured
12448: PPUSH
12449: CALL_OW 94
// if commander = 2 then
12453: LD_EXP 25
12457: PUSH
12458: LD_INT 2
12460: EQUAL
12461: IFFALSE 12475
// SayRadio ( Powell , DP-2-BaseCaptured ) ;
12463: LD_EXP 12
12467: PPUSH
12468: LD_STRING DP-2-BaseCaptured
12470: PPUSH
12471: CALL_OW 94
// if commander = 3 then
12475: LD_EXP 25
12479: PUSH
12480: LD_INT 3
12482: EQUAL
12483: IFFALSE 12497
// SayRadio ( Powell , DP-2a-BaseCaptured ) ;
12485: LD_EXP 12
12489: PPUSH
12490: LD_STRING DP-2a-BaseCaptured
12492: PPUSH
12493: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -3-BaseCaptured ) ;
12497: LD_EXP 9
12501: PPUSH
12502: LD_STRING D
12504: PUSH
12505: LD_STRING I
12507: PUSH
12508: LD_STRING J
12510: PUSH
12511: LD_STRING S
12513: PUSH
12514: EMPTY
12515: LIST
12516: LIST
12517: LIST
12518: PUSH
12519: LD_EXP 25
12523: ARRAY
12524: STR
12525: PUSH
12526: LD_STRING -3-BaseCaptured
12528: STR
12529: PPUSH
12530: CALL_OW 88
// end ; DialogueOff ;
12534: CALL_OW 7
// InGameOff ;
12538: CALL_OW 9
// ChangeMissionObjectives ( O2 ) ;
12542: LD_STRING O2
12544: PPUSH
12545: CALL_OW 337
// for i in UnitFilter ( ruOutpost , [ f_type , unit_building ] ) do
12549: LD_ADDR_VAR 0 1
12553: PUSH
12554: LD_EXP 14
12558: PPUSH
12559: LD_INT 21
12561: PUSH
12562: LD_INT 3
12564: PUSH
12565: EMPTY
12566: LIST
12567: LIST
12568: PPUSH
12569: CALL_OW 72
12573: PUSH
12574: FOR_IN
12575: IFFALSE 12591
// SetSide ( i , 1 ) ;
12577: LD_VAR 0 1
12581: PPUSH
12582: LD_INT 1
12584: PPUSH
12585: CALL_OW 235
12589: GO 12574
12591: POP
12592: POP
// baseCaptured := true ;
12593: LD_ADDR_EXP 17
12597: PUSH
12598: LD_INT 1
12600: ST_TO_ADDR
// wait ( 0 0$35 ) ;
12601: LD_INT 1225
12603: PPUSH
12604: CALL_OW 67
// PrepareReinforcements ;
12608: CALL 9522 0 0
// end ;
12612: PPOPN 1
12614: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 167 , 197 , 20 ] ] ) > 3 do
12615: LD_INT 22
12617: PUSH
12618: LD_INT 3
12620: PUSH
12621: EMPTY
12622: LIST
12623: LIST
12624: PUSH
12625: LD_INT 92
12627: PUSH
12628: LD_INT 167
12630: PUSH
12631: LD_INT 197
12633: PUSH
12634: LD_INT 20
12636: PUSH
12637: EMPTY
12638: LIST
12639: LIST
12640: LIST
12641: LIST
12642: PUSH
12643: EMPTY
12644: LIST
12645: LIST
12646: PPUSH
12647: CALL_OW 69
12651: PUSH
12652: LD_INT 3
12654: GREATER
12655: IFFALSE 12672
12657: GO 12659
12659: DISABLE
// SayRadio ( Powell , DP-RuAttack ) ;
12660: LD_EXP 12
12664: PPUSH
12665: LD_STRING DP-RuAttack
12667: PPUSH
12668: CALL_OW 94
12672: END
// every 0 0$2 trigger not debug and SeeXY ( 1 , 168 , 74 ) and GetEnvironmentType ( 168 , 72 ) do
12673: LD_EXP 1
12677: NOT
12678: PUSH
12679: LD_INT 1
12681: PPUSH
12682: LD_INT 168
12684: PPUSH
12685: LD_INT 74
12687: PPUSH
12688: CALL_OW 293
12692: AND
12693: PUSH
12694: LD_INT 168
12696: PPUSH
12697: LD_INT 72
12699: PPUSH
12700: CALL_OW 553
12704: AND
12705: IFFALSE 12757
12707: GO 12709
12709: DISABLE
// begin CenterOnXY ( 168 , 72 ) ;
12710: LD_INT 168
12712: PPUSH
12713: LD_INT 72
12715: PPUSH
12716: CALL_OW 84
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Blockade ) ;
12720: LD_EXP 9
12724: PPUSH
12725: LD_STRING D
12727: PUSH
12728: LD_STRING I
12730: PUSH
12731: LD_STRING J
12733: PUSH
12734: LD_STRING S
12736: PUSH
12737: EMPTY
12738: LIST
12739: LIST
12740: LIST
12741: PUSH
12742: LD_EXP 25
12746: ARRAY
12747: STR
12748: PUSH
12749: LD_STRING -1-Blockade
12751: STR
12752: PPUSH
12753: CALL_OW 88
// end ;
12757: END
// every 0 0$2 trigger GameType = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_see , 4 ] ] ) do
12758: LD_EXP 2
12762: PUSH
12763: LD_INT 1
12765: EQUAL
12766: PUSH
12767: LD_INT 22
12769: PUSH
12770: LD_INT 1
12772: PUSH
12773: EMPTY
12774: LIST
12775: LIST
12776: PUSH
12777: LD_INT 101
12779: PUSH
12780: LD_INT 4
12782: PUSH
12783: EMPTY
12784: LIST
12785: LIST
12786: PUSH
12787: EMPTY
12788: LIST
12789: LIST
12790: PPUSH
12791: CALL_OW 69
12795: AND
12796: IFFALSE 13328
12798: GO 12800
12800: DISABLE
// begin ChangeSideFog ( 4 , 1 ) ;
12801: LD_INT 4
12803: PPUSH
12804: LD_INT 1
12806: PPUSH
12807: CALL_OW 343
// DialogueOn ;
12811: CALL_OW 6
// CenterNowOnUnits ( allyCommander ) ;
12815: LD_EXP 11
12819: PPUSH
12820: CALL_OW 87
// SayRadio ( allyCommander , DM-1-Contact ) ;
12824: LD_EXP 11
12828: PPUSH
12829: LD_STRING DM-1-Contact
12831: PPUSH
12832: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Contact ) ;
12836: LD_EXP 9
12840: PPUSH
12841: LD_STRING D
12843: PUSH
12844: LD_STRING I
12846: PUSH
12847: LD_STRING J
12849: PUSH
12850: LD_STRING S
12852: PUSH
12853: EMPTY
12854: LIST
12855: LIST
12856: LIST
12857: PUSH
12858: LD_EXP 25
12862: ARRAY
12863: STR
12864: PUSH
12865: LD_STRING -1-Contact
12867: STR
12868: PPUSH
12869: CALL_OW 88
// if commander = 1 then
12873: LD_EXP 25
12877: PUSH
12878: LD_INT 1
12880: EQUAL
12881: IFFALSE 13013
// begin SayRadio ( allyCommander , DM-2-Contact ) ;
12883: LD_EXP 11
12887: PPUSH
12888: LD_STRING DM-2-Contact
12890: PPUSH
12891: CALL_OW 94
// Say ( playerCommander , DI-2-Contact ) ;
12895: LD_EXP 9
12899: PPUSH
12900: LD_STRING DI-2-Contact
12902: PPUSH
12903: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) and GetAttitude ( 8 , 1 ) = att_enemy then
12907: LD_INT 22
12909: PUSH
12910: LD_INT 8
12912: PUSH
12913: EMPTY
12914: LIST
12915: LIST
12916: PUSH
12917: LD_INT 21
12919: PUSH
12920: LD_INT 1
12922: PUSH
12923: EMPTY
12924: LIST
12925: LIST
12926: PUSH
12927: EMPTY
12928: LIST
12929: LIST
12930: PPUSH
12931: CALL_OW 69
12935: PUSH
12936: LD_INT 8
12938: PPUSH
12939: LD_INT 1
12941: PPUSH
12942: CALL_OW 81
12946: PUSH
12947: LD_INT 2
12949: EQUAL
12950: AND
12951: IFFALSE 12977
// begin SayRadio ( allyCommander , DM-3-Contact ) ;
12953: LD_EXP 11
12957: PPUSH
12958: LD_STRING DM-3-Contact
12960: PPUSH
12961: CALL_OW 94
// Say ( playerCommander , DI-3-Contact ) ;
12965: LD_EXP 9
12969: PPUSH
12970: LD_STRING DI-3-Contact
12972: PPUSH
12973: CALL_OW 88
// end ; SayRadio ( allyCommander , DM-4-Contact ) ;
12977: LD_EXP 11
12981: PPUSH
12982: LD_STRING DM-4-Contact
12984: PPUSH
12985: CALL_OW 94
// Say ( playerCommander , DI-4-Contact ) ;
12989: LD_EXP 9
12993: PPUSH
12994: LD_STRING DI-4-Contact
12996: PPUSH
12997: CALL_OW 88
// SayRadio ( allyCommander , DM-5-Contact ) ;
13001: LD_EXP 11
13005: PPUSH
13006: LD_STRING DM-5-Contact
13008: PPUSH
13009: CALL_OW 94
// end ; if commander = 2 then
13013: LD_EXP 25
13017: PUSH
13018: LD_INT 2
13020: EQUAL
13021: IFFALSE 13153
// begin SayRadio ( allyCommander , DM-2c-Contact ) ;
13023: LD_EXP 11
13027: PPUSH
13028: LD_STRING DM-2c-Contact
13030: PPUSH
13031: CALL_OW 94
// Say ( playerCommander , DJ-2-Contact ) ;
13035: LD_EXP 9
13039: PPUSH
13040: LD_STRING DJ-2-Contact
13042: PPUSH
13043: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) and GetAttitude ( 8 , 1 ) = att_enemy then
13047: LD_INT 22
13049: PUSH
13050: LD_INT 8
13052: PUSH
13053: EMPTY
13054: LIST
13055: LIST
13056: PUSH
13057: LD_INT 21
13059: PUSH
13060: LD_INT 1
13062: PUSH
13063: EMPTY
13064: LIST
13065: LIST
13066: PUSH
13067: EMPTY
13068: LIST
13069: LIST
13070: PPUSH
13071: CALL_OW 69
13075: PUSH
13076: LD_INT 8
13078: PPUSH
13079: LD_INT 1
13081: PPUSH
13082: CALL_OW 81
13086: PUSH
13087: LD_INT 2
13089: EQUAL
13090: AND
13091: IFFALSE 13117
// begin SayRadio ( allyCommander , DM-3-Contact ) ;
13093: LD_EXP 11
13097: PPUSH
13098: LD_STRING DM-3-Contact
13100: PPUSH
13101: CALL_OW 94
// Say ( playerCommander , DJ-3-Contact ) ;
13105: LD_EXP 9
13109: PPUSH
13110: LD_STRING DJ-3-Contact
13112: PPUSH
13113: CALL_OW 88
// end ; SayRadio ( allyCommander , DM-4-Contact ) ;
13117: LD_EXP 11
13121: PPUSH
13122: LD_STRING DM-4-Contact
13124: PPUSH
13125: CALL_OW 94
// Say ( playerCommander , DJ-4-Contact ) ;
13129: LD_EXP 9
13133: PPUSH
13134: LD_STRING DJ-4-Contact
13136: PPUSH
13137: CALL_OW 88
// SayRadio ( allyCommander , DM-5a-Contact ) ;
13141: LD_EXP 11
13145: PPUSH
13146: LD_STRING DM-5a-Contact
13148: PPUSH
13149: CALL_OW 94
// end ; if commander = 3 then
13153: LD_EXP 25
13157: PUSH
13158: LD_INT 3
13160: EQUAL
13161: IFFALSE 13317
// begin SayRadio ( allyCommander , DM-2a-Contact ) ;
13163: LD_EXP 11
13167: PPUSH
13168: LD_STRING DM-2a-Contact
13170: PPUSH
13171: CALL_OW 94
// Say ( playerCommander , DS-2a-Contact ) ;
13175: LD_EXP 9
13179: PPUSH
13180: LD_STRING DS-2a-Contact
13182: PPUSH
13183: CALL_OW 88
// SayRadio ( allyCommander , DM-2b-Contact ) ;
13187: LD_EXP 11
13191: PPUSH
13192: LD_STRING DM-2b-Contact
13194: PPUSH
13195: CALL_OW 94
// Say ( playerCommander , DS-2b-Contact ) ;
13199: LD_EXP 9
13203: PPUSH
13204: LD_STRING DS-2b-Contact
13206: PPUSH
13207: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) and GetAttitude ( 8 , 1 ) = att_enemy then
13211: LD_INT 22
13213: PUSH
13214: LD_INT 8
13216: PUSH
13217: EMPTY
13218: LIST
13219: LIST
13220: PUSH
13221: LD_INT 21
13223: PUSH
13224: LD_INT 1
13226: PUSH
13227: EMPTY
13228: LIST
13229: LIST
13230: PUSH
13231: EMPTY
13232: LIST
13233: LIST
13234: PPUSH
13235: CALL_OW 69
13239: PUSH
13240: LD_INT 8
13242: PPUSH
13243: LD_INT 1
13245: PPUSH
13246: CALL_OW 81
13250: PUSH
13251: LD_INT 2
13253: EQUAL
13254: AND
13255: IFFALSE 13281
// begin SayRadio ( allyCommander , DM-3-Contact ) ;
13257: LD_EXP 11
13261: PPUSH
13262: LD_STRING DM-3-Contact
13264: PPUSH
13265: CALL_OW 94
// Say ( playerCommander , DS-3-Contact ) ;
13269: LD_EXP 9
13273: PPUSH
13274: LD_STRING DS-3-Contact
13276: PPUSH
13277: CALL_OW 88
// end ; SayRadio ( allyCommander , DM-4-Contact ) ;
13281: LD_EXP 11
13285: PPUSH
13286: LD_STRING DM-4-Contact
13288: PPUSH
13289: CALL_OW 94
// Say ( playerCommander , DS-4-Contact ) ;
13293: LD_EXP 9
13297: PPUSH
13298: LD_STRING DS-4-Contact
13300: PPUSH
13301: CALL_OW 88
// SayRadio ( allyCommander , DM-5-Contact ) ;
13305: LD_EXP 11
13309: PPUSH
13310: LD_STRING DM-5-Contact
13312: PPUSH
13313: CALL_OW 94
// end ; DialogueOff ;
13317: CALL_OW 7
// ChangeMissionObjectives ( O3 ) ;
13321: LD_STRING O3
13323: PPUSH
13324: CALL_OW 337
// end ;
13328: END
// every 0 0$10 trigger GameType = 1 and legDestCounter >= [ 15 , 20 , 25 ] [ Difficulty ] and FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_warehouse ] ] ) and FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] ] ) >= 5 do var time , sib , sources , i ;
13329: LD_EXP 2
13333: PUSH
13334: LD_INT 1
13336: EQUAL
13337: PUSH
13338: LD_EXP 18
13342: PUSH
13343: LD_INT 15
13345: PUSH
13346: LD_INT 20
13348: PUSH
13349: LD_INT 25
13351: PUSH
13352: EMPTY
13353: LIST
13354: LIST
13355: LIST
13356: PUSH
13357: LD_OWVAR 67
13361: ARRAY
13362: GREATEREQUAL
13363: AND
13364: PUSH
13365: LD_INT 22
13367: PUSH
13368: LD_INT 8
13370: PUSH
13371: EMPTY
13372: LIST
13373: LIST
13374: PUSH
13375: LD_INT 30
13377: PUSH
13378: LD_INT 1
13380: PUSH
13381: EMPTY
13382: LIST
13383: LIST
13384: PUSH
13385: EMPTY
13386: LIST
13387: LIST
13388: PPUSH
13389: CALL_OW 69
13393: AND
13394: PUSH
13395: LD_INT 22
13397: PUSH
13398: LD_INT 8
13400: PUSH
13401: EMPTY
13402: LIST
13403: LIST
13404: PUSH
13405: LD_INT 21
13407: PUSH
13408: LD_INT 3
13410: PUSH
13411: EMPTY
13412: LIST
13413: LIST
13414: PUSH
13415: EMPTY
13416: LIST
13417: LIST
13418: PPUSH
13419: CALL_OW 69
13423: PUSH
13424: LD_INT 5
13426: GREATEREQUAL
13427: AND
13428: IFFALSE 13951
13430: GO 13432
13432: DISABLE
13433: LD_INT 0
13435: PPUSH
13436: PPUSH
13437: PPUSH
13438: PPUSH
// begin DialogueOn ;
13439: CALL_OW 6
// SayRadio ( Farmer , DF-1-Leg ) ;
13443: LD_EXP 13
13447: PPUSH
13448: LD_STRING DF-1-Leg
13450: PPUSH
13451: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Leg ) ;
13455: LD_EXP 9
13459: PPUSH
13460: LD_STRING D
13462: PUSH
13463: LD_STRING I
13465: PUSH
13466: LD_STRING J
13468: PUSH
13469: LD_STRING S
13471: PUSH
13472: EMPTY
13473: LIST
13474: LIST
13475: LIST
13476: PUSH
13477: LD_EXP 25
13481: ARRAY
13482: STR
13483: PUSH
13484: LD_STRING -1-Leg
13486: STR
13487: PPUSH
13488: CALL_OW 88
// SayRadio ( Farmer , DF-2-Leg ) ;
13492: LD_EXP 13
13496: PPUSH
13497: LD_STRING DF-2-Leg
13499: PPUSH
13500: CALL_OW 94
// DialogueOff ;
13504: CALL_OW 7
// case Query ( QLegionOffer ) of 1 :
13508: LD_STRING QLegionOffer
13510: PPUSH
13511: CALL_OW 97
13515: PUSH
13516: LD_INT 1
13518: DOUBLE
13519: EQUAL
13520: IFTRUE 13524
13522: GO 13527
13524: POP
// ; 2 :
13525: GO 13541
13527: LD_INT 2
13529: DOUBLE
13530: EQUAL
13531: IFTRUE 13535
13533: GO 13540
13535: POP
// exit ; end ;
13536: GO 13951
13538: GO 13541
13540: POP
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -2-Leg ) ;
13541: LD_EXP 9
13545: PPUSH
13546: LD_STRING D
13548: PUSH
13549: LD_STRING I
13551: PUSH
13552: LD_STRING J
13554: PUSH
13555: LD_STRING S
13557: PUSH
13558: EMPTY
13559: LIST
13560: LIST
13561: LIST
13562: PUSH
13563: LD_EXP 25
13567: ARRAY
13568: STR
13569: PUSH
13570: LD_STRING -2-Leg
13572: STR
13573: PPUSH
13574: CALL_OW 88
// legOfferAccepted := true ;
13578: LD_ADDR_EXP 20
13582: PUSH
13583: LD_INT 1
13585: ST_TO_ADDR
// SetAreaMapShow ( legOfferArea , 1 ) ;
13586: LD_INT 21
13588: PPUSH
13589: LD_INT 1
13591: PPUSH
13592: CALL_OW 424
// CenterOnXY ( 190 , 227 ) ;
13596: LD_INT 190
13598: PPUSH
13599: LD_INT 227
13601: PPUSH
13602: CALL_OW 84
// time := [ 8 8$00 , 7 7$00 , 6 6$00 ] [ Difficulty ] ;
13606: LD_ADDR_VAR 0 1
13610: PUSH
13611: LD_INT 16800
13613: PUSH
13614: LD_INT 14700
13616: PUSH
13617: LD_INT 12600
13619: PUSH
13620: EMPTY
13621: LIST
13622: LIST
13623: LIST
13624: PUSH
13625: LD_OWVAR 67
13629: ARRAY
13630: ST_TO_ADDR
// sib := 100 ;
13631: LD_ADDR_VAR 0 2
13635: PUSH
13636: LD_INT 100
13638: ST_TO_ADDR
// disableGlobalTimer := true ;
13639: LD_ADDR_EXP 4
13643: PUSH
13644: LD_INT 1
13646: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13647: LD_INT 35
13649: PPUSH
13650: CALL_OW 67
// time := time - 0 0$1 ;
13654: LD_ADDR_VAR 0 1
13658: PUSH
13659: LD_VAR 0 1
13663: PUSH
13664: LD_INT 35
13666: MINUS
13667: ST_TO_ADDR
// sources := GetResourceArea ( legOfferArea , mat_siberit ) ;
13668: LD_ADDR_VAR 0 3
13672: PUSH
13673: LD_INT 21
13675: PPUSH
13676: LD_INT 3
13678: PPUSH
13679: CALL_OW 287
13683: ST_TO_ADDR
// display_strings := [ #SkrTime , tick , #Skr-LegOffer , sib , time ] ;
13684: LD_ADDR_OWVAR 47
13688: PUSH
13689: LD_STRING #SkrTime
13691: PUSH
13692: LD_OWVAR 1
13696: PUSH
13697: LD_STRING #Skr-LegOffer
13699: PUSH
13700: LD_VAR 0 2
13704: PUSH
13705: LD_VAR 0 1
13709: PUSH
13710: EMPTY
13711: LIST
13712: LIST
13713: LIST
13714: LIST
13715: LIST
13716: ST_TO_ADDR
// if sources then
13717: LD_VAR 0 3
13721: IFFALSE 13753
// begin sib := sib - sources * 10 ;
13723: LD_ADDR_VAR 0 2
13727: PUSH
13728: LD_VAR 0 2
13732: PUSH
13733: LD_VAR 0 3
13737: PUSH
13738: LD_INT 10
13740: MUL
13741: MINUS
13742: ST_TO_ADDR
// EraseResourceArea ( legOfferArea , mat_siberit ) ;
13743: LD_INT 21
13745: PPUSH
13746: LD_INT 3
13748: PPUSH
13749: CALL_OW 286
// end ; until time = 0 0$00 or sib <= 0 or not FilterAllUnits ( [ f_side , 8 ] ) ;
13753: LD_VAR 0 1
13757: PUSH
13758: LD_INT 0
13760: EQUAL
13761: PUSH
13762: LD_VAR 0 2
13766: PUSH
13767: LD_INT 0
13769: LESSEQUAL
13770: OR
13771: PUSH
13772: LD_INT 22
13774: PUSH
13775: LD_INT 8
13777: PUSH
13778: EMPTY
13779: LIST
13780: LIST
13781: PPUSH
13782: CALL_OW 69
13786: NOT
13787: OR
13788: IFFALSE 13647
// SetAreaMapShow ( legOfferArea , 0 ) ;
13790: LD_INT 21
13792: PPUSH
13793: LD_INT 0
13795: PPUSH
13796: CALL_OW 424
// disableGlobalTimer := false ;
13800: LD_ADDR_EXP 4
13804: PUSH
13805: LD_INT 0
13807: ST_TO_ADDR
// if sib <= 0 then
13808: LD_VAR 0 2
13812: PUSH
13813: LD_INT 0
13815: LESSEQUAL
13816: IFFALSE 13932
// begin legChangeSide := true ;
13818: LD_ADDR_EXP 21
13822: PUSH
13823: LD_INT 1
13825: ST_TO_ADDR
// SayRadio ( Farmer , DF-4y-Leg ) ;
13826: LD_EXP 13
13830: PPUSH
13831: LD_STRING DF-4y-Leg
13833: PPUSH
13834: CALL_OW 94
// ChangeMissionObjectives ( O3a ) ;
13838: LD_STRING O3a
13840: PPUSH
13841: CALL_OW 337
// ChangeSideFog ( 8 , 1 ) ;
13845: LD_INT 8
13847: PPUSH
13848: LD_INT 1
13850: PPUSH
13851: CALL_OW 343
// SetAttitude ( 8 , 1 , att_friend , true ) ;
13855: LD_INT 8
13857: PPUSH
13858: LD_INT 1
13860: PPUSH
13861: LD_INT 1
13863: PPUSH
13864: LD_INT 1
13866: PPUSH
13867: CALL_OW 80
// SetAttitude ( 8 , 4 , att_friend , true ) ;
13871: LD_INT 8
13873: PPUSH
13874: LD_INT 4
13876: PPUSH
13877: LD_INT 1
13879: PPUSH
13880: LD_INT 1
13882: PPUSH
13883: CALL_OW 80
// SetAttitude ( 8 , 6 , att_enemy , true ) ;
13887: LD_INT 8
13889: PPUSH
13890: LD_INT 6
13892: PPUSH
13893: LD_INT 2
13895: PPUSH
13896: LD_INT 1
13898: PPUSH
13899: CALL_OW 80
// SetAttitude ( 8 , 3 , att_enemy , true ) ;
13903: LD_INT 8
13905: PPUSH
13906: LD_INT 3
13908: PPUSH
13909: LD_INT 2
13911: PPUSH
13912: LD_INT 1
13914: PPUSH
13915: CALL_OW 80
// wait ( 0 0$30 ) ;
13919: LD_INT 1050
13921: PPUSH
13922: CALL_OW 67
// PrepareLegionReinforcements ;
13926: CALL 10222 0 0
// end else
13930: GO 13951
// begin ChangeMissionObjectives ( O3 ) ;
13932: LD_STRING O3
13934: PPUSH
13935: CALL_OW 337
// SayRadio ( Farmer , DF-4n-Leg ) ;
13939: LD_EXP 13
13943: PPUSH
13944: LD_STRING DF-4n-Leg
13946: PPUSH
13947: CALL_OW 94
// end ; end ;
13951: PPOPN 4
13953: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) = 0 and GetAttitude ( 8 , 1 ) = att_enemy do
13954: LD_INT 22
13956: PUSH
13957: LD_INT 8
13959: PUSH
13960: EMPTY
13961: LIST
13962: LIST
13963: PUSH
13964: LD_INT 21
13966: PUSH
13967: LD_INT 1
13969: PUSH
13970: EMPTY
13971: LIST
13972: LIST
13973: PUSH
13974: EMPTY
13975: LIST
13976: LIST
13977: PPUSH
13978: CALL_OW 69
13982: PUSH
13983: LD_INT 0
13985: EQUAL
13986: PUSH
13987: LD_INT 8
13989: PPUSH
13990: LD_INT 1
13992: PPUSH
13993: CALL_OW 81
13997: PUSH
13998: LD_INT 2
14000: EQUAL
14001: AND
14002: IFFALSE 14014
14004: GO 14006
14006: DISABLE
// ChangeMissionObjectives ( O3a ) ;
14007: LD_STRING O3a
14009: PPUSH
14010: CALL_OW 337
14014: END
// every 0 0$1 trigger GameType = 1 and game and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) = 0 do
14015: LD_EXP 2
14019: PUSH
14020: LD_INT 1
14022: EQUAL
14023: PUSH
14024: LD_EXP 3
14028: AND
14029: PUSH
14030: LD_INT 22
14032: PUSH
14033: LD_INT 3
14035: PUSH
14036: EMPTY
14037: LIST
14038: LIST
14039: PUSH
14040: LD_INT 21
14042: PUSH
14043: LD_INT 1
14045: PUSH
14046: EMPTY
14047: LIST
14048: LIST
14049: PUSH
14050: EMPTY
14051: LIST
14052: LIST
14053: PPUSH
14054: CALL_OW 69
14058: PUSH
14059: LD_INT 0
14061: EQUAL
14062: AND
14063: PUSH
14064: LD_INT 22
14066: PUSH
14067: LD_INT 3
14069: PUSH
14070: EMPTY
14071: LIST
14072: LIST
14073: PUSH
14074: LD_INT 30
14076: PUSH
14077: LD_INT 1
14079: PUSH
14080: EMPTY
14081: LIST
14082: LIST
14083: PUSH
14084: EMPTY
14085: LIST
14086: LIST
14087: PPUSH
14088: CALL_OW 69
14092: PUSH
14093: LD_INT 0
14095: EQUAL
14096: AND
14097: IFFALSE 14335
14099: GO 14101
14101: DISABLE
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Win ) ;
14102: LD_EXP 9
14106: PPUSH
14107: LD_STRING D
14109: PUSH
14110: LD_STRING I
14112: PUSH
14113: LD_STRING J
14115: PUSH
14116: LD_STRING S
14118: PUSH
14119: EMPTY
14120: LIST
14121: LIST
14122: LIST
14123: PUSH
14124: LD_EXP 25
14128: ARRAY
14129: STR
14130: PUSH
14131: LD_STRING -1-Win
14133: STR
14134: PPUSH
14135: CALL_OW 88
// if tick >= [ 150 150$0 , 130 130$0 , 110 110$0 ] [ Difficulty ] then
14139: LD_OWVAR 1
14143: PUSH
14144: LD_INT 315000
14146: PUSH
14147: LD_INT 273000
14149: PUSH
14150: LD_INT 231000
14152: PUSH
14153: EMPTY
14154: LIST
14155: LIST
14156: LIST
14157: PUSH
14158: LD_OWVAR 67
14162: ARRAY
14163: GREATEREQUAL
14164: IFFALSE 14179
// AddMedal ( med1 , - 1 ) else
14166: LD_STRING med1
14168: PPUSH
14169: LD_INT 1
14171: NEG
14172: PPUSH
14173: CALL_OW 101
14177: GO 14189
// AddMedal ( med1 , 1 ) ;
14179: LD_STRING med1
14181: PPUSH
14182: LD_INT 1
14184: PPUSH
14185: CALL_OW 101
// if allyDestCounter >= [ 20 , 15 , 10 ] [ Difficulty ] then
14189: LD_EXP 22
14193: PUSH
14194: LD_INT 20
14196: PUSH
14197: LD_INT 15
14199: PUSH
14200: LD_INT 10
14202: PUSH
14203: EMPTY
14204: LIST
14205: LIST
14206: LIST
14207: PUSH
14208: LD_OWVAR 67
14212: ARRAY
14213: GREATEREQUAL
14214: IFFALSE 14229
// AddMedal ( med2 , - 1 ) else
14216: LD_STRING med2
14218: PPUSH
14219: LD_INT 1
14221: NEG
14222: PPUSH
14223: CALL_OW 101
14227: GO 14239
// AddMedal ( med2 , 1 ) ;
14229: LD_STRING med2
14231: PPUSH
14232: LD_INT 1
14234: PPUSH
14235: CALL_OW 101
// if GetAttitude ( 8 , 1 ) = att_friend then
14239: LD_INT 8
14241: PPUSH
14242: LD_INT 1
14244: PPUSH
14245: CALL_OW 81
14249: PUSH
14250: LD_INT 1
14252: EQUAL
14253: IFFALSE 14267
// AddMedal ( med3 , 1 ) else
14255: LD_STRING med3
14257: PPUSH
14258: LD_INT 1
14260: PPUSH
14261: CALL_OW 101
14265: GO 14324
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) = 0 then
14267: LD_INT 22
14269: PUSH
14270: LD_INT 8
14272: PUSH
14273: EMPTY
14274: LIST
14275: LIST
14276: PUSH
14277: LD_INT 21
14279: PUSH
14280: LD_INT 1
14282: PUSH
14283: EMPTY
14284: LIST
14285: LIST
14286: PUSH
14287: EMPTY
14288: LIST
14289: LIST
14290: PPUSH
14291: CALL_OW 69
14295: PUSH
14296: LD_INT 0
14298: EQUAL
14299: IFFALSE 14313
// AddMedal ( med3 , 2 ) else
14301: LD_STRING med3
14303: PPUSH
14304: LD_INT 2
14306: PPUSH
14307: CALL_OW 101
14311: GO 14324
// AddMedal ( med3 , - 1 ) ;
14313: LD_STRING med3
14315: PPUSH
14316: LD_INT 1
14318: NEG
14319: PPUSH
14320: CALL_OW 101
// GiveMedals ( MAIN ) ;
14324: LD_STRING MAIN
14326: PPUSH
14327: CALL_OW 102
// YouWin ;
14331: CALL_OW 103
// end ;
14335: END
// every 10 trigger GameType = 1 and staticMines and FilterUnitsInArea ( minesArea , [ f_enemy , 8 ] ) do var i , j , tmp , x , y ;
14336: LD_EXP 2
14340: PUSH
14341: LD_INT 1
14343: EQUAL
14344: PUSH
14345: LD_EXP 16
14349: AND
14350: PUSH
14351: LD_INT 20
14353: PPUSH
14354: LD_INT 81
14356: PUSH
14357: LD_INT 8
14359: PUSH
14360: EMPTY
14361: LIST
14362: LIST
14363: PPUSH
14364: CALL_OW 70
14368: AND
14369: IFFALSE 14648
14371: GO 14373
14373: DISABLE
14374: LD_INT 0
14376: PPUSH
14377: PPUSH
14378: PPUSH
14379: PPUSH
14380: PPUSH
// begin enable ;
14381: ENABLE
// tmp := FilterUnitsInArea ( minesArea , [ f_enemy , 8 ] ) ;
14382: LD_ADDR_VAR 0 3
14386: PUSH
14387: LD_INT 20
14389: PPUSH
14390: LD_INT 81
14392: PUSH
14393: LD_INT 8
14395: PUSH
14396: EMPTY
14397: LIST
14398: LIST
14399: PPUSH
14400: CALL_OW 70
14404: ST_TO_ADDR
// if not tmp then
14405: LD_VAR 0 3
14409: NOT
14410: IFFALSE 14414
// exit ;
14412: GO 14648
// for i in tmp do
14414: LD_ADDR_VAR 0 1
14418: PUSH
14419: LD_VAR 0 3
14423: PUSH
14424: FOR_IN
14425: IFFALSE 14646
// begin x := GetX ( i ) ;
14427: LD_ADDR_VAR 0 4
14431: PUSH
14432: LD_VAR 0 1
14436: PPUSH
14437: CALL_OW 250
14441: ST_TO_ADDR
// y := GetY ( i ) ;
14442: LD_ADDR_VAR 0 5
14446: PUSH
14447: LD_VAR 0 1
14451: PPUSH
14452: CALL_OW 251
14456: ST_TO_ADDR
// if MineAtPos ( x , y ) then
14457: LD_VAR 0 4
14461: PPUSH
14462: LD_VAR 0 5
14466: PPUSH
14467: CALL_OW 458
14471: IFFALSE 14644
// begin LaunchMineAtPos ( x , y , 8 ) ;
14473: LD_VAR 0 4
14477: PPUSH
14478: LD_VAR 0 5
14482: PPUSH
14483: LD_INT 8
14485: PPUSH
14486: CALL_OW 456
// if not dialogueMineDetected then
14490: LD_EXP 28
14494: NOT
14495: IFFALSE 14556
// begin CenterNowOnXY ( x , y ) ;
14497: LD_VAR 0 4
14501: PPUSH
14502: LD_VAR 0 5
14506: PPUSH
14507: CALL_OW 86
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Mine ) ;
14511: LD_EXP 9
14515: PPUSH
14516: LD_STRING D
14518: PUSH
14519: LD_STRING I
14521: PUSH
14522: LD_STRING J
14524: PUSH
14525: LD_STRING S
14527: PUSH
14528: EMPTY
14529: LIST
14530: LIST
14531: LIST
14532: PUSH
14533: LD_EXP 25
14537: ARRAY
14538: STR
14539: PUSH
14540: LD_STRING -1-Mine
14542: STR
14543: PPUSH
14544: CALL_OW 88
// dialogueMineDetected := true ;
14548: LD_ADDR_EXP 28
14552: PUSH
14553: LD_INT 1
14555: ST_TO_ADDR
// end ; for j = 1 to staticMines do
14556: LD_ADDR_VAR 0 2
14560: PUSH
14561: DOUBLE
14562: LD_INT 1
14564: DEC
14565: ST_TO_ADDR
14566: LD_EXP 16
14570: PUSH
14571: FOR_TO
14572: IFFALSE 14642
// if staticMines [ j ] [ 1 ] = x and staticMines [ j ] [ 2 ] = y then
14574: LD_EXP 16
14578: PUSH
14579: LD_VAR 0 2
14583: ARRAY
14584: PUSH
14585: LD_INT 1
14587: ARRAY
14588: PUSH
14589: LD_VAR 0 4
14593: EQUAL
14594: PUSH
14595: LD_EXP 16
14599: PUSH
14600: LD_VAR 0 2
14604: ARRAY
14605: PUSH
14606: LD_INT 2
14608: ARRAY
14609: PUSH
14610: LD_VAR 0 5
14614: EQUAL
14615: AND
14616: IFFALSE 14640
// begin staticMines := Delete ( staticMines , j ) ;
14618: LD_ADDR_EXP 16
14622: PUSH
14623: LD_EXP 16
14627: PPUSH
14628: LD_VAR 0 2
14632: PPUSH
14633: CALL_OW 3
14637: ST_TO_ADDR
// break ;
14638: GO 14642
// end ;
14640: GO 14571
14642: POP
14643: POP
// end ; end ;
14644: GO 14424
14646: POP
14647: POP
// end ;
14648: PPOPN 5
14650: END
// every 30 30$00 + 50 50$00 trigger GameType = 1 and game and sibBombAllowed and UnitFilter ( mc_bases [ mc_rus_1 ] , [ f_btype , b_factory ] ) do var bomb , e ;
14651: LD_EXP 2
14655: PUSH
14656: LD_INT 1
14658: EQUAL
14659: PUSH
14660: LD_EXP 3
14664: AND
14665: PUSH
14666: LD_EXP 23
14670: AND
14671: PUSH
14672: LD_EXP 36
14676: PUSH
14677: LD_EXP 7
14681: ARRAY
14682: PPUSH
14683: LD_INT 30
14685: PUSH
14686: LD_INT 3
14688: PUSH
14689: EMPTY
14690: LIST
14691: LIST
14692: PPUSH
14693: CALL_OW 72
14697: AND
14698: IFFALSE 14902
14700: GO 14702
14702: DISABLE
14703: LD_INT 0
14705: PPUSH
14706: PPUSH
// begin enable ;
14707: ENABLE
// MC_InsertProduceList ( mc_rus_1 , [ [ ru_heavy_wheeled , engine_siberite , control_computer , ru_siberium_rocket ] ] ) ;
14708: LD_EXP 7
14712: PPUSH
14713: LD_INT 23
14715: PUSH
14716: LD_INT 3
14718: PUSH
14719: LD_INT 3
14721: PUSH
14722: LD_INT 48
14724: PUSH
14725: EMPTY
14726: LIST
14727: LIST
14728: LIST
14729: LIST
14730: PUSH
14731: EMPTY
14732: LIST
14733: PPUSH
14734: CALL 86254 0 2
// repeat wait ( 0 0$1 ) ;
14738: LD_INT 35
14740: PPUSH
14741: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) ;
14745: LD_INT 22
14747: PUSH
14748: LD_INT 3
14750: PUSH
14751: EMPTY
14752: LIST
14753: LIST
14754: PUSH
14755: LD_INT 34
14757: PUSH
14758: LD_INT 48
14760: PUSH
14761: EMPTY
14762: LIST
14763: LIST
14764: PUSH
14765: EMPTY
14766: LIST
14767: LIST
14768: PPUSH
14769: CALL_OW 69
14773: IFFALSE 14738
// bomb := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) ;
14775: LD_ADDR_VAR 0 1
14779: PUSH
14780: LD_INT 22
14782: PUSH
14783: LD_INT 3
14785: PUSH
14786: EMPTY
14787: LIST
14788: LIST
14789: PUSH
14790: LD_INT 34
14792: PUSH
14793: LD_INT 48
14795: PUSH
14796: EMPTY
14797: LIST
14798: LIST
14799: PUSH
14800: EMPTY
14801: LIST
14802: LIST
14803: PPUSH
14804: CALL_OW 69
14808: ST_TO_ADDR
// e := FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_type , unit_building ] ] ) ;
14809: LD_ADDR_VAR 0 2
14813: PUSH
14814: LD_INT 81
14816: PUSH
14817: LD_INT 3
14819: PUSH
14820: EMPTY
14821: LIST
14822: LIST
14823: PUSH
14824: LD_INT 21
14826: PUSH
14827: LD_INT 3
14829: PUSH
14830: EMPTY
14831: LIST
14832: LIST
14833: PUSH
14834: EMPTY
14835: LIST
14836: LIST
14837: PPUSH
14838: CALL_OW 69
14842: ST_TO_ADDR
// if e then
14843: LD_VAR 0 2
14847: IFFALSE 14873
// e := NearestUnitToUnit ( e , bomb [ 1 ] ) ;
14849: LD_ADDR_VAR 0 2
14853: PUSH
14854: LD_VAR 0 2
14858: PPUSH
14859: LD_VAR 0 1
14863: PUSH
14864: LD_INT 1
14866: ARRAY
14867: PPUSH
14868: CALL_OW 74
14872: ST_TO_ADDR
// ComAttackPlace ( bomb , GetX ( e ) , GetY ( e ) ) ;
14873: LD_VAR 0 1
14877: PPUSH
14878: LD_VAR 0 2
14882: PPUSH
14883: CALL_OW 250
14887: PPUSH
14888: LD_VAR 0 2
14892: PPUSH
14893: CALL_OW 251
14897: PPUSH
14898: CALL_OW 116
// end ;
14902: PPOPN 2
14904: END
// every 0 0$2 trigger Difficulty > 1 and UnitFilter ( mc_bases [ mc_rus_1 ] , [ f_class , 3 ] ) and GameType = 1 and game and GetTech ( tech_Behemoth , 3 ) = state_researched do var tmp , i ;
14905: LD_OWVAR 67
14909: PUSH
14910: LD_INT 1
14912: GREATER
14913: PUSH
14914: LD_EXP 36
14918: PUSH
14919: LD_EXP 7
14923: ARRAY
14924: PPUSH
14925: LD_INT 25
14927: PUSH
14928: LD_INT 3
14930: PUSH
14931: EMPTY
14932: LIST
14933: LIST
14934: PPUSH
14935: CALL_OW 72
14939: AND
14940: PUSH
14941: LD_EXP 2
14945: PUSH
14946: LD_INT 1
14948: EQUAL
14949: AND
14950: PUSH
14951: LD_EXP 3
14955: AND
14956: PUSH
14957: LD_INT 23
14959: PPUSH
14960: LD_INT 3
14962: PPUSH
14963: CALL_OW 321
14967: PUSH
14968: LD_INT 2
14970: EQUAL
14971: AND
14972: IFFALSE 15099
14974: GO 14976
14976: DISABLE
14977: LD_INT 0
14979: PPUSH
14980: PPUSH
// begin tmp := UnitFilter ( mc_bases [ mc_rus_1 ] , [ f_class , 3 ] ) ;
14981: LD_ADDR_VAR 0 1
14985: PUSH
14986: LD_EXP 36
14990: PUSH
14991: LD_EXP 7
14995: ARRAY
14996: PPUSH
14997: LD_INT 25
14999: PUSH
15000: LD_INT 3
15002: PUSH
15003: EMPTY
15004: LIST
15005: LIST
15006: PPUSH
15007: CALL_OW 72
15011: ST_TO_ADDR
// if not tmp then
15012: LD_VAR 0 1
15016: NOT
15017: IFFALSE 15021
// exit ;
15019: GO 15099
// for i in tmp do
15021: LD_ADDR_VAR 0 2
15025: PUSH
15026: LD_VAR 0 1
15030: PUSH
15031: FOR_IN
15032: IFFALSE 15078
// begin SetTag ( i , 29 ) ;
15034: LD_VAR 0 2
15038: PPUSH
15039: LD_INT 29
15041: PPUSH
15042: CALL_OW 109
// ComExitBuilding ( i ) ;
15046: LD_VAR 0 2
15050: PPUSH
15051: CALL_OW 122
// AddComBuildBehemoth ( i , b_behemoth , 97 , 133 , 0 ) ;
15055: LD_VAR 0 2
15059: PPUSH
15060: LD_INT 37
15062: PPUSH
15063: LD_INT 97
15065: PPUSH
15066: LD_INT 133
15068: PPUSH
15069: LD_INT 0
15071: PPUSH
15072: CALL_OW 230
// end ;
15076: GO 15031
15078: POP
15079: POP
// wait ( 1 1$00 ) ;
15080: LD_INT 2100
15082: PPUSH
15083: CALL_OW 67
// MC_Reset ( mc_rus_1 , 29 ) ;
15087: LD_EXP 7
15091: PPUSH
15092: LD_INT 29
15094: PPUSH
15095: CALL 66533 0 2
// end ;
15099: PPOPN 2
15101: END
// every 7 7$00 trigger GameType = 1 and GetBType ( HexInfo ( 84 , 128 ) ) = b_warehouse do var veh , depot ;
15102: LD_EXP 2
15106: PUSH
15107: LD_INT 1
15109: EQUAL
15110: PUSH
15111: LD_INT 84
15113: PPUSH
15114: LD_INT 128
15116: PPUSH
15117: CALL_OW 428
15121: PPUSH
15122: CALL_OW 266
15126: PUSH
15127: LD_INT 1
15129: EQUAL
15130: AND
15131: IFFALSE 15304
15133: GO 15135
15135: DISABLE
15136: LD_INT 0
15138: PPUSH
15139: PPUSH
// begin enable ;
15140: ENABLE
// depot := HexInfo ( 84 , 128 ) ;
15141: LD_ADDR_VAR 0 2
15145: PUSH
15146: LD_INT 84
15148: PPUSH
15149: LD_INT 128
15151: PPUSH
15152: CALL_OW 428
15156: ST_TO_ADDR
// uc_side := 3 ;
15157: LD_ADDR_OWVAR 20
15161: PUSH
15162: LD_INT 3
15164: ST_TO_ADDR
// uc_nation := 3 ;
15165: LD_ADDR_OWVAR 21
15169: PUSH
15170: LD_INT 3
15172: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_siberite , control_computer , ru_cargo_bay , 0 ) ;
15173: LD_INT 21
15175: PPUSH
15176: LD_INT 3
15178: PPUSH
15179: LD_INT 3
15181: PPUSH
15182: LD_INT 51
15184: PPUSH
15185: LD_INT 0
15187: PPUSH
15188: CALL 26364 0 5
// veh := CreateVehicle ;
15192: LD_ADDR_VAR 0 1
15196: PUSH
15197: CALL_OW 45
15201: ST_TO_ADDR
// PlaceUnitXY ( veh , 126 , 227 , false ) ;
15202: LD_VAR 0 1
15206: PPUSH
15207: LD_INT 126
15209: PPUSH
15210: LD_INT 227
15212: PPUSH
15213: LD_INT 0
15215: PPUSH
15216: CALL_OW 48
// SetCargo ( veh , mat_oil , 100 ) ;
15220: LD_VAR 0 1
15224: PPUSH
15225: LD_INT 2
15227: PPUSH
15228: LD_INT 100
15230: PPUSH
15231: CALL_OW 290
// ComGive ( veh , depot ) ;
15235: LD_VAR 0 1
15239: PPUSH
15240: LD_VAR 0 2
15244: PPUSH
15245: CALL_OW 161
// AddComMoveXY ( veh , 126 , 227 ) ;
15249: LD_VAR 0 1
15253: PPUSH
15254: LD_INT 126
15256: PPUSH
15257: LD_INT 227
15259: PPUSH
15260: CALL_OW 171
// wait ( 0 0$10 ) ;
15264: LD_INT 350
15266: PPUSH
15267: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
15271: LD_INT 35
15273: PPUSH
15274: CALL_OW 67
// until IsAt ( veh , 126 , 227 ) ;
15278: LD_VAR 0 1
15282: PPUSH
15283: LD_INT 126
15285: PPUSH
15286: LD_INT 227
15288: PPUSH
15289: CALL_OW 307
15293: IFFALSE 15271
// RemoveUnit ( veh ) ;
15295: LD_VAR 0 1
15299: PPUSH
15300: CALL_OW 64
// end ;
15304: PPOPN 2
15306: END
// every 9 9$00 trigger GameType = 1 and outpostEscape and commander = 2 do var veh , depot ;
15307: LD_EXP 2
15311: PUSH
15312: LD_INT 1
15314: EQUAL
15315: PUSH
15316: LD_EXP 27
15320: AND
15321: PUSH
15322: LD_EXP 25
15326: PUSH
15327: LD_INT 2
15329: EQUAL
15330: AND
15331: IFFALSE 15523
15333: GO 15335
15335: DISABLE
15336: LD_INT 0
15338: PPUSH
15339: PPUSH
// begin enable ;
15340: ENABLE
// if tick >= [ 50 50$00 , 40 40$00 , 30 30$00 ] [ Difficulty ] then
15341: LD_OWVAR 1
15345: PUSH
15346: LD_INT 105000
15348: PUSH
15349: LD_INT 84000
15351: PUSH
15352: LD_INT 63000
15354: PUSH
15355: EMPTY
15356: LIST
15357: LIST
15358: LIST
15359: PUSH
15360: LD_OWVAR 67
15364: ARRAY
15365: GREATEREQUAL
15366: IFFALSE 15369
// disable ;
15368: DISABLE
// uc_side := 4 ;
15369: LD_ADDR_OWVAR 20
15373: PUSH
15374: LD_INT 4
15376: ST_TO_ADDR
// uc_nation := 1 ;
15377: LD_ADDR_OWVAR 21
15381: PUSH
15382: LD_INT 1
15384: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_cargo_bay , 0 ) ;
15385: LD_INT 2
15387: PPUSH
15388: LD_INT 3
15390: PPUSH
15391: LD_INT 3
15393: PPUSH
15394: LD_INT 12
15396: PPUSH
15397: LD_INT 0
15399: PPUSH
15400: CALL 26364 0 5
// veh := CreateVehicle ;
15404: LD_ADDR_VAR 0 1
15408: PUSH
15409: CALL_OW 45
15413: ST_TO_ADDR
// PlaceUnitXY ( veh , 229 , 226 , false ) ;
15414: LD_VAR 0 1
15418: PPUSH
15419: LD_INT 229
15421: PPUSH
15422: LD_INT 226
15424: PPUSH
15425: LD_INT 0
15427: PPUSH
15428: CALL_OW 48
// SetCargo ( veh , mat_cans , 100 ) ;
15432: LD_VAR 0 1
15436: PPUSH
15437: LD_INT 1
15439: PPUSH
15440: LD_INT 100
15442: PPUSH
15443: CALL_OW 290
// AddComMoveToArea ( veh , ruOutpostArea ) ;
15447: LD_VAR 0 1
15451: PPUSH
15452: LD_INT 25
15454: PPUSH
15455: CALL_OW 173
// AddComUnload ( veh ) ;
15459: LD_VAR 0 1
15463: PPUSH
15464: CALL_OW 219
// AddComMoveXY ( veh , 229 , 226 ) ;
15468: LD_VAR 0 1
15472: PPUSH
15473: LD_INT 229
15475: PPUSH
15476: LD_INT 226
15478: PPUSH
15479: CALL_OW 171
// wait ( 0 0$10 ) ;
15483: LD_INT 350
15485: PPUSH
15486: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
15490: LD_INT 35
15492: PPUSH
15493: CALL_OW 67
// until IsAt ( veh , 229 , 226 ) ;
15497: LD_VAR 0 1
15501: PPUSH
15502: LD_INT 229
15504: PPUSH
15505: LD_INT 226
15507: PPUSH
15508: CALL_OW 307
15512: IFFALSE 15490
// RemoveUnit ( veh ) ;
15514: LD_VAR 0 1
15518: PPUSH
15519: CALL_OW 64
// end ;
15523: PPOPN 2
15525: END
// every 15 15$00 trigger GameType = 1 and game and reinforceAllowed do var i , j , veh , tmp , amount ;
15526: LD_EXP 2
15530: PUSH
15531: LD_INT 1
15533: EQUAL
15534: PUSH
15535: LD_EXP 3
15539: AND
15540: PUSH
15541: LD_EXP 24
15545: AND
15546: IFFALSE 15879
15548: GO 15550
15550: DISABLE
15551: LD_INT 0
15553: PPUSH
15554: PPUSH
15555: PPUSH
15556: PPUSH
15557: PPUSH
// begin enable ;
15558: ENABLE
// tmp := [ ] ;
15559: LD_ADDR_VAR 0 4
15563: PUSH
15564: EMPTY
15565: ST_TO_ADDR
// if commander = 1 then
15566: LD_EXP 25
15570: PUSH
15571: LD_INT 1
15573: EQUAL
15574: IFFALSE 15586
// amount := 3 else
15576: LD_ADDR_VAR 0 5
15580: PUSH
15581: LD_INT 3
15583: ST_TO_ADDR
15584: GO 15594
// amount := 2 ;
15586: LD_ADDR_VAR 0 5
15590: PUSH
15591: LD_INT 2
15593: ST_TO_ADDR
// for i = 1 to amount do
15594: LD_ADDR_VAR 0 1
15598: PUSH
15599: DOUBLE
15600: LD_INT 1
15602: DEC
15603: ST_TO_ADDR
15604: LD_VAR 0 5
15608: PUSH
15609: FOR_TO
15610: IFFALSE 15774
// begin wait ( 0 0$5 ) ;
15612: LD_INT 175
15614: PPUSH
15615: CALL_OW 67
// for j = 1 to 3 do
15619: LD_ADDR_VAR 0 2
15623: PUSH
15624: DOUBLE
15625: LD_INT 1
15627: DEC
15628: ST_TO_ADDR
15629: LD_INT 3
15631: PUSH
15632: FOR_TO
15633: IFFALSE 15770
// begin uc_side := 4 ;
15635: LD_ADDR_OWVAR 20
15639: PUSH
15640: LD_INT 4
15642: ST_TO_ADDR
// uc_nation := 1 ;
15643: LD_ADDR_OWVAR 21
15647: PUSH
15648: LD_INT 1
15650: ST_TO_ADDR
// PrepareVehicle ( [ us_medium_tracked , us_morphling ] [ rand ( 1 , 2 ) ] , engine_siberite , control_computer , [ us_laser , us_double_gun , us_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
15651: LD_INT 3
15653: PUSH
15654: LD_INT 5
15656: PUSH
15657: EMPTY
15658: LIST
15659: LIST
15660: PUSH
15661: LD_INT 1
15663: PPUSH
15664: LD_INT 2
15666: PPUSH
15667: CALL_OW 12
15671: ARRAY
15672: PPUSH
15673: LD_INT 3
15675: PPUSH
15676: LD_INT 3
15678: PPUSH
15679: LD_INT 9
15681: PUSH
15682: LD_INT 5
15684: PUSH
15685: LD_INT 7
15687: PUSH
15688: EMPTY
15689: LIST
15690: LIST
15691: LIST
15692: PUSH
15693: LD_INT 1
15695: PPUSH
15696: LD_INT 3
15698: PPUSH
15699: CALL_OW 12
15703: ARRAY
15704: PPUSH
15705: LD_INT 100
15707: PPUSH
15708: CALL 26364 0 5
// veh := CreateVehicle ;
15712: LD_ADDR_VAR 0 3
15716: PUSH
15717: CALL_OW 45
15721: ST_TO_ADDR
// tmp := tmp ^ veh ;
15722: LD_ADDR_VAR 0 4
15726: PUSH
15727: LD_VAR 0 4
15731: PUSH
15732: LD_VAR 0 3
15736: ADD
15737: ST_TO_ADDR
// PlaceUnitArea ( veh , westSpawn , false ) ;
15738: LD_VAR 0 3
15742: PPUSH
15743: LD_INT 22
15745: PPUSH
15746: LD_INT 0
15748: PPUSH
15749: CALL_OW 49
// ComMoveXY ( veh , 119 , 215 ) ;
15753: LD_VAR 0 3
15757: PPUSH
15758: LD_INT 119
15760: PPUSH
15761: LD_INT 215
15763: PPUSH
15764: CALL_OW 111
// end ;
15768: GO 15632
15770: POP
15771: POP
// end ;
15772: GO 15609
15774: POP
15775: POP
// wait ( 0 0$3 ) ;
15776: LD_INT 105
15778: PPUSH
15779: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
15783: LD_INT 35
15785: PPUSH
15786: CALL_OW 67
// for i in tmp do
15790: LD_ADDR_VAR 0 1
15794: PUSH
15795: LD_VAR 0 4
15799: PUSH
15800: FOR_IN
15801: IFFALSE 15868
// if IsDead ( i ) then
15803: LD_VAR 0 1
15807: PPUSH
15808: CALL_OW 301
15812: IFFALSE 15832
// tmp := tmp diff i else
15814: LD_ADDR_VAR 0 4
15818: PUSH
15819: LD_VAR 0 4
15823: PUSH
15824: LD_VAR 0 1
15828: DIFF
15829: ST_TO_ADDR
15830: GO 15866
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 4 ] ) , i ) ) ;
15832: LD_VAR 0 1
15836: PPUSH
15837: LD_INT 81
15839: PUSH
15840: LD_INT 4
15842: PUSH
15843: EMPTY
15844: LIST
15845: LIST
15846: PPUSH
15847: CALL_OW 69
15851: PPUSH
15852: LD_VAR 0 1
15856: PPUSH
15857: CALL_OW 74
15861: PPUSH
15862: CALL_OW 115
15866: GO 15800
15868: POP
15869: POP
// until tmp = [ ] ;
15870: LD_VAR 0 4
15874: PUSH
15875: EMPTY
15876: EQUAL
15877: IFFALSE 15783
// end ;
15879: PPOPN 5
15881: END
// every 0 0$1 trigger GameType = 1 and game do var i , tmp ;
15882: LD_EXP 2
15886: PUSH
15887: LD_INT 1
15889: EQUAL
15890: PUSH
15891: LD_EXP 3
15895: AND
15896: IFFALSE 15997
15898: GO 15900
15900: DISABLE
15901: LD_INT 0
15903: PPUSH
15904: PPUSH
// begin enable ;
15905: ENABLE
// tmp := FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) ;
15906: LD_ADDR_VAR 0 2
15910: PUSH
15911: LD_INT 3
15913: PUSH
15914: LD_INT 22
15916: PUSH
15917: LD_INT 1
15919: PUSH
15920: EMPTY
15921: LIST
15922: LIST
15923: PUSH
15924: EMPTY
15925: LIST
15926: LIST
15927: PUSH
15928: LD_INT 32
15930: PUSH
15931: LD_INT 1
15933: PUSH
15934: EMPTY
15935: LIST
15936: LIST
15937: PUSH
15938: EMPTY
15939: LIST
15940: LIST
15941: PPUSH
15942: CALL_OW 69
15946: ST_TO_ADDR
// if tmp then
15947: LD_VAR 0 2
15951: IFFALSE 15997
// for i in tmp do
15953: LD_ADDR_VAR 0 1
15957: PUSH
15958: LD_VAR 0 2
15962: PUSH
15963: FOR_IN
15964: IFFALSE 15995
// if GetFuel ( i ) < 3 then
15966: LD_VAR 0 1
15970: PPUSH
15971: CALL_OW 261
15975: PUSH
15976: LD_INT 3
15978: LESS
15979: IFFALSE 15993
// SetFuel ( i , 3 ) ;
15981: LD_VAR 0 1
15985: PPUSH
15986: LD_INT 3
15988: PPUSH
15989: CALL_OW 240
15993: GO 15963
15995: POP
15996: POP
// end ;
15997: PPOPN 2
15999: END
// every 15 15$00 trigger game and GetAttitude ( 8 , 4 ) = att_enemy do var i , un , tmp ;
16000: LD_EXP 3
16004: PUSH
16005: LD_INT 8
16007: PPUSH
16008: LD_INT 4
16010: PPUSH
16011: CALL_OW 81
16015: PUSH
16016: LD_INT 2
16018: EQUAL
16019: AND
16020: IFFALSE 16230
16022: GO 16024
16024: DISABLE
16025: LD_INT 0
16027: PPUSH
16028: PPUSH
16029: PPUSH
// begin enable ;
16030: ENABLE
// tmp := [ ] ;
16031: LD_ADDR_VAR 0 3
16035: PUSH
16036: EMPTY
16037: ST_TO_ADDR
// for i = 1 to 4 do
16038: LD_ADDR_VAR 0 1
16042: PUSH
16043: DOUBLE
16044: LD_INT 1
16046: DEC
16047: ST_TO_ADDR
16048: LD_INT 4
16050: PUSH
16051: FOR_TO
16052: IFFALSE 16196
// begin uc_side := 8 ;
16054: LD_ADDR_OWVAR 20
16058: PUSH
16059: LD_INT 8
16061: ST_TO_ADDR
// uc_nation := nation_arabian ;
16062: LD_ADDR_OWVAR 21
16066: PUSH
16067: LD_INT 2
16069: ST_TO_ADDR
// PrepareVehicle ( ar_hovercraft , engine_combustion , control_apeman , [ ar_double_machine_gun , ar_light_gun ] [ rand ( 1 , 2 ) ] , rand ( 60 , 80 ) ) ;
16070: LD_INT 11
16072: PPUSH
16073: LD_INT 1
16075: PPUSH
16076: LD_INT 5
16078: PPUSH
16079: LD_INT 24
16081: PUSH
16082: LD_INT 23
16084: PUSH
16085: EMPTY
16086: LIST
16087: LIST
16088: PUSH
16089: LD_INT 1
16091: PPUSH
16092: LD_INT 2
16094: PPUSH
16095: CALL_OW 12
16099: ARRAY
16100: PPUSH
16101: LD_INT 60
16103: PPUSH
16104: LD_INT 80
16106: PPUSH
16107: CALL_OW 12
16111: PPUSH
16112: CALL 26364 0 5
// un := CreateVehicle ;
16116: LD_ADDR_VAR 0 2
16120: PUSH
16121: CALL_OW 45
16125: ST_TO_ADDR
// SetDir ( un , 2 ) ;
16126: LD_VAR 0 2
16130: PPUSH
16131: LD_INT 2
16133: PPUSH
16134: CALL_OW 233
// tmp := tmp ^ un ;
16138: LD_ADDR_VAR 0 3
16142: PUSH
16143: LD_VAR 0 3
16147: PUSH
16148: LD_VAR 0 2
16152: ADD
16153: ST_TO_ADDR
// PlaceUnitXY ( un , 88 , 2 , false ) ;
16154: LD_VAR 0 2
16158: PPUSH
16159: LD_INT 88
16161: PPUSH
16162: LD_INT 2
16164: PPUSH
16165: LD_INT 0
16167: PPUSH
16168: CALL_OW 48
// ComMoveXY ( un , 93 , 13 ) ;
16172: LD_VAR 0 2
16176: PPUSH
16177: LD_INT 93
16179: PPUSH
16180: LD_INT 13
16182: PPUSH
16183: CALL_OW 111
// wait ( 0 0$2 ) ;
16187: LD_INT 70
16189: PPUSH
16190: CALL_OW 67
// end ;
16194: GO 16051
16196: POP
16197: POP
// for i in tmp do
16198: LD_ADDR_VAR 0 1
16202: PUSH
16203: LD_VAR 0 3
16207: PUSH
16208: FOR_IN
16209: IFFALSE 16228
// AddComMoveXY ( i , 136 , 19 ) ;
16211: LD_VAR 0 1
16215: PPUSH
16216: LD_INT 136
16218: PPUSH
16219: LD_INT 19
16221: PPUSH
16222: CALL_OW 171
16226: GO 16208
16228: POP
16229: POP
// end ;
16230: PPOPN 3
16232: END
// every 7 7$30 + 7 7$30 trigger game and not MC_GetVehicles ( mc_leg , true ) do var i , base , tmp , target ;
16233: LD_EXP 3
16237: PUSH
16238: LD_EXP 6
16242: PPUSH
16243: LD_INT 1
16245: PPUSH
16246: CALL 87672 0 2
16250: NOT
16251: AND
16252: IFFALSE 17171
16254: GO 16256
16256: DISABLE
16257: LD_INT 0
16259: PPUSH
16260: PPUSH
16261: PPUSH
16262: PPUSH
// begin enable ;
16263: ENABLE
// base := mc_leg ;
16264: LD_ADDR_VAR 0 2
16268: PUSH
16269: LD_EXP 6
16273: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 8 ] , [ f_nation , 2 ] , [ f_btype , b_factory ] ] ) then
16274: LD_INT 22
16276: PUSH
16277: LD_INT 8
16279: PUSH
16280: EMPTY
16281: LIST
16282: LIST
16283: PUSH
16284: LD_INT 23
16286: PUSH
16287: LD_INT 2
16289: PUSH
16290: EMPTY
16291: LIST
16292: LIST
16293: PUSH
16294: LD_INT 30
16296: PUSH
16297: LD_INT 3
16299: PUSH
16300: EMPTY
16301: LIST
16302: LIST
16303: PUSH
16304: EMPTY
16305: LIST
16306: LIST
16307: LIST
16308: PPUSH
16309: CALL_OW 69
16313: NOT
16314: IFFALSE 16318
// exit ;
16316: GO 17171
// if Prob ( 40 ) then
16318: LD_INT 40
16320: PPUSH
16321: CALL_OW 13
16325: IFFALSE 16454
// begin MC_InsertProduceList ( base , [ [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_flame_thrower ] , ] ) ;
16327: LD_VAR 0 2
16331: PPUSH
16332: LD_INT 13
16334: PUSH
16335: LD_INT 1
16337: PUSH
16338: LD_INT 2
16340: PUSH
16341: LD_INT 28
16343: PUSH
16344: EMPTY
16345: LIST
16346: LIST
16347: LIST
16348: LIST
16349: PUSH
16350: LD_INT 13
16352: PUSH
16353: LD_INT 1
16355: PUSH
16356: LD_INT 2
16358: PUSH
16359: LD_INT 28
16361: PUSH
16362: EMPTY
16363: LIST
16364: LIST
16365: LIST
16366: LIST
16367: PUSH
16368: LD_INT 13
16370: PUSH
16371: LD_INT 1
16373: PUSH
16374: LD_INT 2
16376: PUSH
16377: LD_INT 28
16379: PUSH
16380: EMPTY
16381: LIST
16382: LIST
16383: LIST
16384: LIST
16385: PUSH
16386: LD_INT 13
16388: PUSH
16389: LD_INT 1
16391: PUSH
16392: LD_INT 2
16394: PUSH
16395: LD_INT 28
16397: PUSH
16398: EMPTY
16399: LIST
16400: LIST
16401: LIST
16402: LIST
16403: PUSH
16404: LD_INT 13
16406: PUSH
16407: LD_INT 1
16409: PUSH
16410: LD_INT 2
16412: PUSH
16413: LD_INT 28
16415: PUSH
16416: EMPTY
16417: LIST
16418: LIST
16419: LIST
16420: LIST
16421: PUSH
16422: LD_INT 13
16424: PUSH
16425: LD_INT 1
16427: PUSH
16428: LD_INT 2
16430: PUSH
16431: LD_INT 26
16433: PUSH
16434: EMPTY
16435: LIST
16436: LIST
16437: LIST
16438: LIST
16439: PUSH
16440: EMPTY
16441: LIST
16442: LIST
16443: LIST
16444: LIST
16445: LIST
16446: LIST
16447: PPUSH
16448: CALL 86254 0 2
// end else
16452: GO 16671
// begin MC_InsertProduceList ( base , [ [ ar_medium_trike , engine_combustion , control_remote , [ ar_gun , ar_flame_thrower , ar_flame_thrower ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_gun , ar_flame_thrower , ar_flame_thrower ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_flame_thrower , ar_flame_thrower , ar_selfpropelled_bomb ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_flame_thrower , ar_selfpropelled_bomb , ar_selfpropelled_bomb ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , ar_selfpropelled_bomb ] , [ ar_medium_trike , engine_combustion , control_remote , ar_flame_thrower ] , ] ) ;
16454: LD_VAR 0 2
16458: PPUSH
16459: LD_INT 13
16461: PUSH
16462: LD_INT 1
16464: PUSH
16465: LD_INT 2
16467: PUSH
16468: LD_INT 27
16470: PUSH
16471: LD_INT 26
16473: PUSH
16474: LD_INT 26
16476: PUSH
16477: EMPTY
16478: LIST
16479: LIST
16480: LIST
16481: PUSH
16482: LD_INT 1
16484: PPUSH
16485: LD_INT 3
16487: PPUSH
16488: CALL_OW 12
16492: ARRAY
16493: PUSH
16494: EMPTY
16495: LIST
16496: LIST
16497: LIST
16498: LIST
16499: PUSH
16500: LD_INT 13
16502: PUSH
16503: LD_INT 1
16505: PUSH
16506: LD_INT 2
16508: PUSH
16509: LD_INT 27
16511: PUSH
16512: LD_INT 26
16514: PUSH
16515: LD_INT 26
16517: PUSH
16518: EMPTY
16519: LIST
16520: LIST
16521: LIST
16522: PUSH
16523: LD_INT 1
16525: PPUSH
16526: LD_INT 3
16528: PPUSH
16529: CALL_OW 12
16533: ARRAY
16534: PUSH
16535: EMPTY
16536: LIST
16537: LIST
16538: LIST
16539: LIST
16540: PUSH
16541: LD_INT 13
16543: PUSH
16544: LD_INT 1
16546: PUSH
16547: LD_INT 2
16549: PUSH
16550: LD_INT 26
16552: PUSH
16553: LD_INT 26
16555: PUSH
16556: LD_INT 29
16558: PUSH
16559: EMPTY
16560: LIST
16561: LIST
16562: LIST
16563: PUSH
16564: LD_INT 1
16566: PPUSH
16567: LD_INT 3
16569: PPUSH
16570: CALL_OW 12
16574: ARRAY
16575: PUSH
16576: EMPTY
16577: LIST
16578: LIST
16579: LIST
16580: LIST
16581: PUSH
16582: LD_INT 13
16584: PUSH
16585: LD_INT 1
16587: PUSH
16588: LD_INT 2
16590: PUSH
16591: LD_INT 26
16593: PUSH
16594: LD_INT 29
16596: PUSH
16597: LD_INT 29
16599: PUSH
16600: EMPTY
16601: LIST
16602: LIST
16603: LIST
16604: PUSH
16605: LD_INT 1
16607: PPUSH
16608: LD_INT 3
16610: PPUSH
16611: CALL_OW 12
16615: ARRAY
16616: PUSH
16617: EMPTY
16618: LIST
16619: LIST
16620: LIST
16621: LIST
16622: PUSH
16623: LD_INT 13
16625: PUSH
16626: LD_INT 1
16628: PUSH
16629: LD_INT 2
16631: PUSH
16632: LD_INT 29
16634: PUSH
16635: EMPTY
16636: LIST
16637: LIST
16638: LIST
16639: LIST
16640: PUSH
16641: LD_INT 13
16643: PUSH
16644: LD_INT 1
16646: PUSH
16647: LD_INT 2
16649: PUSH
16650: LD_INT 26
16652: PUSH
16653: EMPTY
16654: LIST
16655: LIST
16656: LIST
16657: LIST
16658: PUSH
16659: EMPTY
16660: LIST
16661: LIST
16662: LIST
16663: LIST
16664: LIST
16665: LIST
16666: PPUSH
16667: CALL 86254 0 2
// end ; repeat wait ( 0 0$1 ) ;
16671: LD_INT 35
16673: PPUSH
16674: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= 6 or tick mod 10 10$00 = 0 ;
16678: LD_VAR 0 2
16682: PPUSH
16683: LD_INT 1
16685: PPUSH
16686: CALL 87672 0 2
16690: PUSH
16691: LD_INT 6
16693: GREATEREQUAL
16694: PUSH
16695: LD_OWVAR 1
16699: PUSH
16700: LD_INT 21000
16702: MOD
16703: PUSH
16704: LD_INT 0
16706: EQUAL
16707: OR
16708: IFFALSE 16671
// wait ( 0 0$30 ) ;
16710: LD_INT 1050
16712: PPUSH
16713: CALL_OW 67
// tmp := MC_GetVehicles ( base , true ) ;
16717: LD_ADDR_VAR 0 3
16721: PUSH
16722: LD_VAR 0 2
16726: PPUSH
16727: LD_INT 1
16729: PPUSH
16730: CALL 87672 0 2
16734: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff tmp ) ;
16735: LD_ADDR_EXP 55
16739: PUSH
16740: LD_EXP 55
16744: PPUSH
16745: LD_VAR 0 2
16749: PPUSH
16750: LD_EXP 55
16754: PUSH
16755: LD_VAR 0 2
16759: ARRAY
16760: PUSH
16761: LD_VAR 0 3
16765: DIFF
16766: PPUSH
16767: CALL_OW 1
16771: ST_TO_ADDR
// target := rand ( 0 , 2 ) ;
16772: LD_ADDR_VAR 0 4
16776: PUSH
16777: LD_INT 0
16779: PPUSH
16780: LD_INT 2
16782: PPUSH
16783: CALL_OW 12
16787: ST_TO_ADDR
// if legChangeSide then
16788: LD_EXP 21
16792: IFFALSE 16802
// target := 2 ;
16794: LD_ADDR_VAR 0 4
16798: PUSH
16799: LD_INT 2
16801: ST_TO_ADDR
// if target = 2 then
16802: LD_VAR 0 4
16806: PUSH
16807: LD_INT 2
16809: EQUAL
16810: IFFALSE 16938
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
16812: LD_ADDR_VAR 0 3
16816: PUSH
16817: LD_VAR 0 3
16821: PPUSH
16822: LD_INT 24
16824: PUSH
16825: LD_INT 250
16827: PUSH
16828: EMPTY
16829: LIST
16830: LIST
16831: PPUSH
16832: CALL_OW 72
16836: ST_TO_ADDR
// for i in tmp do
16837: LD_ADDR_VAR 0 1
16841: PUSH
16842: LD_VAR 0 3
16846: PUSH
16847: FOR_IN
16848: IFFALSE 16888
// if GetDistUnitXY ( i , 112 , 64 ) > 9 then
16850: LD_VAR 0 1
16854: PPUSH
16855: LD_INT 112
16857: PPUSH
16858: LD_INT 64
16860: PPUSH
16861: CALL_OW 297
16865: PUSH
16866: LD_INT 9
16868: GREATER
16869: IFFALSE 16886
// ComMoveXY ( i , 112 , 64 ) ;
16871: LD_VAR 0 1
16875: PPUSH
16876: LD_INT 112
16878: PPUSH
16879: LD_INT 64
16881: PPUSH
16882: CALL_OW 111
16886: GO 16847
16888: POP
16889: POP
// wait ( 0 0$1 ) ;
16890: LD_INT 35
16892: PPUSH
16893: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 112 , 64 , 9 ] ) >= ( tmp - 1 ) ;
16897: LD_VAR 0 3
16901: PPUSH
16902: LD_INT 92
16904: PUSH
16905: LD_INT 112
16907: PUSH
16908: LD_INT 64
16910: PUSH
16911: LD_INT 9
16913: PUSH
16914: EMPTY
16915: LIST
16916: LIST
16917: LIST
16918: LIST
16919: PPUSH
16920: CALL_OW 72
16924: PUSH
16925: LD_VAR 0 3
16929: PUSH
16930: LD_INT 1
16932: MINUS
16933: GREATEREQUAL
16934: IFFALSE 16812
// end else
16936: GO 17062
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
16938: LD_ADDR_VAR 0 3
16942: PUSH
16943: LD_VAR 0 3
16947: PPUSH
16948: LD_INT 24
16950: PUSH
16951: LD_INT 250
16953: PUSH
16954: EMPTY
16955: LIST
16956: LIST
16957: PPUSH
16958: CALL_OW 72
16962: ST_TO_ADDR
// for i in tmp do
16963: LD_ADDR_VAR 0 1
16967: PUSH
16968: LD_VAR 0 3
16972: PUSH
16973: FOR_IN
16974: IFFALSE 17014
// if GetDistUnitXY ( i , 174 , 94 ) > 9 then
16976: LD_VAR 0 1
16980: PPUSH
16981: LD_INT 174
16983: PPUSH
16984: LD_INT 94
16986: PPUSH
16987: CALL_OW 297
16991: PUSH
16992: LD_INT 9
16994: GREATER
16995: IFFALSE 17012
// ComMoveXY ( i , 174 , 94 ) ;
16997: LD_VAR 0 1
17001: PPUSH
17002: LD_INT 174
17004: PPUSH
17005: LD_INT 94
17007: PPUSH
17008: CALL_OW 111
17012: GO 16973
17014: POP
17015: POP
// wait ( 0 0$1 ) ;
17016: LD_INT 35
17018: PPUSH
17019: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 174 , 94 , 9 ] ) >= ( tmp - 1 ) ;
17023: LD_VAR 0 3
17027: PPUSH
17028: LD_INT 92
17030: PUSH
17031: LD_INT 174
17033: PUSH
17034: LD_INT 94
17036: PUSH
17037: LD_INT 9
17039: PUSH
17040: EMPTY
17041: LIST
17042: LIST
17043: LIST
17044: LIST
17045: PPUSH
17046: CALL_OW 72
17050: PUSH
17051: LD_VAR 0 3
17055: PUSH
17056: LD_INT 1
17058: MINUS
17059: GREATEREQUAL
17060: IFFALSE 16938
// end ; repeat wait ( 0 0$1 ) ;
17062: LD_INT 35
17064: PPUSH
17065: CALL_OW 67
// for i in tmp do
17069: LD_ADDR_VAR 0 1
17073: PUSH
17074: LD_VAR 0 3
17078: PUSH
17079: FOR_IN
17080: IFFALSE 17162
// begin if GetLives ( i ) > 251 then
17082: LD_VAR 0 1
17086: PPUSH
17087: CALL_OW 256
17091: PUSH
17092: LD_INT 251
17094: GREATER
17095: IFFALSE 17133
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 8 ] ) , i ) ) else
17097: LD_VAR 0 1
17101: PPUSH
17102: LD_INT 81
17104: PUSH
17105: LD_INT 8
17107: PUSH
17108: EMPTY
17109: LIST
17110: LIST
17111: PPUSH
17112: CALL_OW 69
17116: PPUSH
17117: LD_VAR 0 1
17121: PPUSH
17122: CALL_OW 74
17126: PPUSH
17127: CALL_OW 115
17131: GO 17160
// if IsDead ( i ) then
17133: LD_VAR 0 1
17137: PPUSH
17138: CALL_OW 301
17142: IFFALSE 17160
// tmp := tmp diff i ;
17144: LD_ADDR_VAR 0 3
17148: PUSH
17149: LD_VAR 0 3
17153: PUSH
17154: LD_VAR 0 1
17158: DIFF
17159: ST_TO_ADDR
// end ;
17160: GO 17079
17162: POP
17163: POP
// until not tmp ;
17164: LD_VAR 0 3
17168: NOT
17169: IFFALSE 17062
// end ;
17171: PPOPN 4
17173: END
// every 7 7$30 trigger game and not MC_GetVehicles ( mc_rus_2 , true ) do var i , base , tmp , target , teleport ;
17174: LD_EXP 3
17178: PUSH
17179: LD_EXP 8
17183: PPUSH
17184: LD_INT 1
17186: PPUSH
17187: CALL 87672 0 2
17191: NOT
17192: AND
17193: IFFALSE 18181
17195: GO 17197
17197: DISABLE
17198: LD_INT 0
17200: PPUSH
17201: PPUSH
17202: PPUSH
17203: PPUSH
17204: PPUSH
// begin enable ;
17205: ENABLE
// if not UnitFilter ( mc_bases [ mc_rus_2 ] , [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) then
17206: LD_EXP 36
17210: PUSH
17211: LD_EXP 8
17215: ARRAY
17216: PPUSH
17217: LD_INT 22
17219: PUSH
17220: LD_INT 3
17222: PUSH
17223: EMPTY
17224: LIST
17225: LIST
17226: PUSH
17227: LD_INT 30
17229: PUSH
17230: LD_INT 3
17232: PUSH
17233: EMPTY
17234: LIST
17235: LIST
17236: PUSH
17237: EMPTY
17238: LIST
17239: LIST
17240: PPUSH
17241: CALL_OW 72
17245: NOT
17246: IFFALSE 17250
// exit ;
17248: GO 18181
// base := mc_rus_2 ;
17250: LD_ADDR_VAR 0 2
17254: PUSH
17255: LD_EXP 8
17259: ST_TO_ADDR
// teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) ;
17260: LD_ADDR_VAR 0 5
17264: PUSH
17265: LD_INT 22
17267: PUSH
17268: LD_INT 3
17270: PUSH
17271: EMPTY
17272: LIST
17273: LIST
17274: PUSH
17275: LD_INT 30
17277: PUSH
17278: LD_INT 34
17280: PUSH
17281: EMPTY
17282: LIST
17283: LIST
17284: PUSH
17285: EMPTY
17286: LIST
17287: LIST
17288: PPUSH
17289: CALL_OW 69
17293: ST_TO_ADDR
// if Prob ( 40 ) then
17294: LD_INT 40
17296: PPUSH
17297: CALL_OW 13
17301: IFFALSE 17430
// begin MC_InsertProduceList ( base , [ [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] ] ) ;
17303: LD_VAR 0 2
17307: PPUSH
17308: LD_INT 22
17310: PUSH
17311: LD_INT 3
17313: PUSH
17314: LD_INT 3
17316: PUSH
17317: LD_INT 49
17319: PUSH
17320: EMPTY
17321: LIST
17322: LIST
17323: LIST
17324: LIST
17325: PUSH
17326: LD_INT 22
17328: PUSH
17329: LD_INT 3
17331: PUSH
17332: LD_INT 3
17334: PUSH
17335: LD_INT 49
17337: PUSH
17338: EMPTY
17339: LIST
17340: LIST
17341: LIST
17342: LIST
17343: PUSH
17344: LD_INT 22
17346: PUSH
17347: LD_INT 3
17349: PUSH
17350: LD_INT 3
17352: PUSH
17353: LD_INT 49
17355: PUSH
17356: EMPTY
17357: LIST
17358: LIST
17359: LIST
17360: LIST
17361: PUSH
17362: LD_INT 24
17364: PUSH
17365: LD_INT 3
17367: PUSH
17368: LD_INT 3
17370: PUSH
17371: LD_INT 46
17373: PUSH
17374: EMPTY
17375: LIST
17376: LIST
17377: LIST
17378: LIST
17379: PUSH
17380: LD_INT 24
17382: PUSH
17383: LD_INT 3
17385: PUSH
17386: LD_INT 3
17388: PUSH
17389: LD_INT 46
17391: PUSH
17392: EMPTY
17393: LIST
17394: LIST
17395: LIST
17396: LIST
17397: PUSH
17398: LD_INT 24
17400: PUSH
17401: LD_INT 3
17403: PUSH
17404: LD_INT 3
17406: PUSH
17407: LD_INT 46
17409: PUSH
17410: EMPTY
17411: LIST
17412: LIST
17413: LIST
17414: LIST
17415: PUSH
17416: EMPTY
17417: LIST
17418: LIST
17419: LIST
17420: LIST
17421: LIST
17422: LIST
17423: PPUSH
17424: CALL 86254 0 2
// end else
17428: GO 17555
// begin MC_InsertProduceList ( base , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] ] ) ;
17430: LD_VAR 0 2
17434: PPUSH
17435: LD_INT 24
17437: PUSH
17438: LD_INT 3
17440: PUSH
17441: LD_INT 3
17443: PUSH
17444: LD_INT 47
17446: PUSH
17447: EMPTY
17448: LIST
17449: LIST
17450: LIST
17451: LIST
17452: PUSH
17453: LD_INT 24
17455: PUSH
17456: LD_INT 3
17458: PUSH
17459: LD_INT 3
17461: PUSH
17462: LD_INT 47
17464: PUSH
17465: EMPTY
17466: LIST
17467: LIST
17468: LIST
17469: LIST
17470: PUSH
17471: LD_INT 24
17473: PUSH
17474: LD_INT 3
17476: PUSH
17477: LD_INT 3
17479: PUSH
17480: LD_INT 47
17482: PUSH
17483: EMPTY
17484: LIST
17485: LIST
17486: LIST
17487: LIST
17488: PUSH
17489: LD_INT 24
17491: PUSH
17492: LD_INT 3
17494: PUSH
17495: LD_INT 3
17497: PUSH
17498: LD_INT 46
17500: PUSH
17501: EMPTY
17502: LIST
17503: LIST
17504: LIST
17505: LIST
17506: PUSH
17507: LD_INT 24
17509: PUSH
17510: LD_INT 3
17512: PUSH
17513: LD_INT 3
17515: PUSH
17516: LD_INT 46
17518: PUSH
17519: EMPTY
17520: LIST
17521: LIST
17522: LIST
17523: LIST
17524: PUSH
17525: LD_INT 24
17527: PUSH
17528: LD_INT 3
17530: PUSH
17531: LD_INT 3
17533: PUSH
17534: LD_INT 46
17536: PUSH
17537: EMPTY
17538: LIST
17539: LIST
17540: LIST
17541: LIST
17542: PUSH
17543: EMPTY
17544: LIST
17545: LIST
17546: LIST
17547: LIST
17548: LIST
17549: LIST
17550: PPUSH
17551: CALL 86254 0 2
// end ; if Difficulty > 1 then
17555: LD_OWVAR 67
17559: PUSH
17560: LD_INT 1
17562: GREATER
17563: IFFALSE 17595
// MC_InsertProduceList ( base , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] ] ) ;
17565: LD_VAR 0 2
17569: PPUSH
17570: LD_INT 24
17572: PUSH
17573: LD_INT 3
17575: PUSH
17576: LD_INT 3
17578: PUSH
17579: LD_INT 47
17581: PUSH
17582: EMPTY
17583: LIST
17584: LIST
17585: LIST
17586: LIST
17587: PUSH
17588: EMPTY
17589: LIST
17590: PPUSH
17591: CALL 86254 0 2
// repeat wait ( 0 0$1 ) ;
17595: LD_INT 35
17597: PPUSH
17598: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= [ 6 , 7 , 7 ] [ Difficulty ] or tick mod 10 10$00 = 0 ;
17602: LD_VAR 0 2
17606: PPUSH
17607: LD_INT 1
17609: PPUSH
17610: CALL 87672 0 2
17614: PUSH
17615: LD_INT 6
17617: PUSH
17618: LD_INT 7
17620: PUSH
17621: LD_INT 7
17623: PUSH
17624: EMPTY
17625: LIST
17626: LIST
17627: LIST
17628: PUSH
17629: LD_OWVAR 67
17633: ARRAY
17634: GREATEREQUAL
17635: PUSH
17636: LD_OWVAR 1
17640: PUSH
17641: LD_INT 21000
17643: MOD
17644: PUSH
17645: LD_INT 0
17647: EQUAL
17648: OR
17649: IFFALSE 17595
// wait ( 0 0$45 ) ;
17651: LD_INT 1575
17653: PPUSH
17654: CALL_OW 67
// tmp := MC_GetVehicles ( base , true ) ;
17658: LD_ADDR_VAR 0 3
17662: PUSH
17663: LD_VAR 0 2
17667: PPUSH
17668: LD_INT 1
17670: PPUSH
17671: CALL 87672 0 2
17675: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff tmp ) ;
17676: LD_ADDR_EXP 55
17680: PUSH
17681: LD_EXP 55
17685: PPUSH
17686: LD_VAR 0 2
17690: PPUSH
17691: LD_EXP 55
17695: PUSH
17696: LD_VAR 0 2
17700: ARRAY
17701: PUSH
17702: LD_VAR 0 3
17706: DIFF
17707: PPUSH
17708: CALL_OW 1
17712: ST_TO_ADDR
// target := rand ( 0 , 1 ) ;
17713: LD_ADDR_VAR 0 4
17717: PUSH
17718: LD_INT 0
17720: PPUSH
17721: LD_INT 1
17723: PPUSH
17724: CALL_OW 12
17728: ST_TO_ADDR
// if target then
17729: LD_VAR 0 4
17733: IFFALSE 17861
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
17735: LD_ADDR_VAR 0 3
17739: PUSH
17740: LD_VAR 0 3
17744: PPUSH
17745: LD_INT 24
17747: PUSH
17748: LD_INT 250
17750: PUSH
17751: EMPTY
17752: LIST
17753: LIST
17754: PPUSH
17755: CALL_OW 72
17759: ST_TO_ADDR
// for i in tmp do
17760: LD_ADDR_VAR 0 1
17764: PUSH
17765: LD_VAR 0 3
17769: PUSH
17770: FOR_IN
17771: IFFALSE 17811
// if GetDistUnitXY ( i , 84 , 32 ) > 9 then
17773: LD_VAR 0 1
17777: PPUSH
17778: LD_INT 84
17780: PPUSH
17781: LD_INT 32
17783: PPUSH
17784: CALL_OW 297
17788: PUSH
17789: LD_INT 9
17791: GREATER
17792: IFFALSE 17809
// ComMoveXY ( i , 84 , 32 ) ;
17794: LD_VAR 0 1
17798: PPUSH
17799: LD_INT 84
17801: PPUSH
17802: LD_INT 32
17804: PPUSH
17805: CALL_OW 111
17809: GO 17770
17811: POP
17812: POP
// wait ( 0 0$1 ) ;
17813: LD_INT 35
17815: PPUSH
17816: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 84 , 32 , 9 ] ) >= ( tmp - 1 ) ;
17820: LD_VAR 0 3
17824: PPUSH
17825: LD_INT 92
17827: PUSH
17828: LD_INT 84
17830: PUSH
17831: LD_INT 32
17833: PUSH
17834: LD_INT 9
17836: PUSH
17837: EMPTY
17838: LIST
17839: LIST
17840: LIST
17841: LIST
17842: PPUSH
17843: CALL_OW 72
17847: PUSH
17848: LD_VAR 0 3
17852: PUSH
17853: LD_INT 1
17855: MINUS
17856: GREATEREQUAL
17857: IFFALSE 17735
// end else
17859: GO 18021
// begin if teleport then
17861: LD_VAR 0 5
17865: IFFALSE 17885
// ComEnterUnit ( tmp , teleport [ 1 ] ) ;
17867: LD_VAR 0 3
17871: PPUSH
17872: LD_VAR 0 5
17876: PUSH
17877: LD_INT 1
17879: ARRAY
17880: PPUSH
17881: CALL_OW 120
// repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
17885: LD_ADDR_VAR 0 3
17889: PUSH
17890: LD_VAR 0 3
17894: PPUSH
17895: LD_INT 24
17897: PUSH
17898: LD_INT 250
17900: PUSH
17901: EMPTY
17902: LIST
17903: LIST
17904: PPUSH
17905: CALL_OW 72
17909: ST_TO_ADDR
// for i in tmp do
17910: LD_ADDR_VAR 0 1
17914: PUSH
17915: LD_VAR 0 3
17919: PUSH
17920: FOR_IN
17921: IFFALSE 17973
// if GetDistUnitXY ( i , 140 , 219 ) > 9 and not HasTask ( i ) then
17923: LD_VAR 0 1
17927: PPUSH
17928: LD_INT 140
17930: PPUSH
17931: LD_INT 219
17933: PPUSH
17934: CALL_OW 297
17938: PUSH
17939: LD_INT 9
17941: GREATER
17942: PUSH
17943: LD_VAR 0 1
17947: PPUSH
17948: CALL_OW 314
17952: NOT
17953: AND
17954: IFFALSE 17971
// AddComMoveXY ( i , 140 , 219 ) ;
17956: LD_VAR 0 1
17960: PPUSH
17961: LD_INT 140
17963: PPUSH
17964: LD_INT 219
17966: PPUSH
17967: CALL_OW 171
17971: GO 17920
17973: POP
17974: POP
// wait ( 0 0$1 ) ;
17975: LD_INT 35
17977: PPUSH
17978: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 140 , 219 , 9 ] ) >= ( tmp - 1 ) ;
17982: LD_VAR 0 3
17986: PPUSH
17987: LD_INT 92
17989: PUSH
17990: LD_INT 140
17992: PUSH
17993: LD_INT 219
17995: PUSH
17996: LD_INT 9
17998: PUSH
17999: EMPTY
18000: LIST
18001: LIST
18002: LIST
18003: LIST
18004: PPUSH
18005: CALL_OW 72
18009: PUSH
18010: LD_VAR 0 3
18014: PUSH
18015: LD_INT 1
18017: MINUS
18018: GREATEREQUAL
18019: IFFALSE 17885
// end ; repeat wait ( 0 0$1 ) ;
18021: LD_INT 35
18023: PPUSH
18024: CALL_OW 67
// for i in tmp do
18028: LD_ADDR_VAR 0 1
18032: PUSH
18033: LD_VAR 0 3
18037: PUSH
18038: FOR_IN
18039: IFFALSE 18172
// begin if GetLives ( i ) > 251 then
18041: LD_VAR 0 1
18045: PPUSH
18046: CALL_OW 256
18050: PUSH
18051: LD_INT 251
18053: GREATER
18054: IFFALSE 18143
// begin if GetWeapon ( i ) = ru_time_lapser then
18056: LD_VAR 0 1
18060: PPUSH
18061: CALL_OW 264
18065: PUSH
18066: LD_INT 49
18068: EQUAL
18069: IFFALSE 18107
// ComMoveUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) else
18071: LD_VAR 0 1
18075: PPUSH
18076: LD_INT 81
18078: PUSH
18079: LD_INT 3
18081: PUSH
18082: EMPTY
18083: LIST
18084: LIST
18085: PPUSH
18086: CALL_OW 69
18090: PPUSH
18091: LD_VAR 0 1
18095: PPUSH
18096: CALL_OW 74
18100: PPUSH
18101: CALL_OW 112
18105: GO 18141
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
18107: LD_VAR 0 1
18111: PPUSH
18112: LD_INT 81
18114: PUSH
18115: LD_INT 3
18117: PUSH
18118: EMPTY
18119: LIST
18120: LIST
18121: PPUSH
18122: CALL_OW 69
18126: PPUSH
18127: LD_VAR 0 1
18131: PPUSH
18132: CALL_OW 74
18136: PPUSH
18137: CALL_OW 115
// end else
18141: GO 18170
// if IsDead ( i ) then
18143: LD_VAR 0 1
18147: PPUSH
18148: CALL_OW 301
18152: IFFALSE 18170
// tmp := tmp diff i ;
18154: LD_ADDR_VAR 0 3
18158: PUSH
18159: LD_VAR 0 3
18163: PUSH
18164: LD_VAR 0 1
18168: DIFF
18169: ST_TO_ADDR
// end ;
18170: GO 18038
18172: POP
18173: POP
// until not tmp ;
18174: LD_VAR 0 3
18178: NOT
18179: IFFALSE 18021
// end ;
18181: PPOPN 5
18183: END
// every 12 12$30 + 11 11$30 trigger game and not MC_GetVehicles ( mc_amer , true ) do var i , base , tmp , target ;
18184: LD_EXP 3
18188: PUSH
18189: LD_EXP 5
18193: PPUSH
18194: LD_INT 1
18196: PPUSH
18197: CALL 87672 0 2
18201: NOT
18202: AND
18203: IFFALSE 18585
18205: GO 18207
18207: DISABLE
18208: LD_INT 0
18210: PPUSH
18211: PPUSH
18212: PPUSH
18213: PPUSH
// begin enable ;
18214: ENABLE
// base := mc_amer ;
18215: LD_ADDR_VAR 0 2
18219: PUSH
18220: LD_EXP 5
18224: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 4 ] , [ f_nation , 1 ] , [ f_btype , b_factory ] ] ) then
18225: LD_INT 22
18227: PUSH
18228: LD_INT 4
18230: PUSH
18231: EMPTY
18232: LIST
18233: LIST
18234: PUSH
18235: LD_INT 23
18237: PUSH
18238: LD_INT 1
18240: PUSH
18241: EMPTY
18242: LIST
18243: LIST
18244: PUSH
18245: LD_INT 30
18247: PUSH
18248: LD_INT 3
18250: PUSH
18251: EMPTY
18252: LIST
18253: LIST
18254: PUSH
18255: EMPTY
18256: LIST
18257: LIST
18258: LIST
18259: PPUSH
18260: CALL_OW 69
18264: NOT
18265: IFFALSE 18269
// exit ;
18267: GO 18585
// MC_InsertProduceList ( base , [ [ us_medium_tracked , engine_combustion , control_remote , us_double_gun ] , [ us_medium_tracked , engine_combustion , control_remote , us_laser ] , [ us_medium_tracked , engine_combustion , control_remote , us_rocket_launcher ] , [ us_medium_tracked , engine_combustion , control_remote , us_rocket_launcher ] , [ us_medium_tracked , engine_combustion , control_remote , us_rocket_launcher ] ] ) ;
18269: LD_VAR 0 2
18273: PPUSH
18274: LD_INT 3
18276: PUSH
18277: LD_INT 1
18279: PUSH
18280: LD_INT 2
18282: PUSH
18283: LD_INT 5
18285: PUSH
18286: EMPTY
18287: LIST
18288: LIST
18289: LIST
18290: LIST
18291: PUSH
18292: LD_INT 3
18294: PUSH
18295: LD_INT 1
18297: PUSH
18298: LD_INT 2
18300: PUSH
18301: LD_INT 9
18303: PUSH
18304: EMPTY
18305: LIST
18306: LIST
18307: LIST
18308: LIST
18309: PUSH
18310: LD_INT 3
18312: PUSH
18313: LD_INT 1
18315: PUSH
18316: LD_INT 2
18318: PUSH
18319: LD_INT 7
18321: PUSH
18322: EMPTY
18323: LIST
18324: LIST
18325: LIST
18326: LIST
18327: PUSH
18328: LD_INT 3
18330: PUSH
18331: LD_INT 1
18333: PUSH
18334: LD_INT 2
18336: PUSH
18337: LD_INT 7
18339: PUSH
18340: EMPTY
18341: LIST
18342: LIST
18343: LIST
18344: LIST
18345: PUSH
18346: LD_INT 3
18348: PUSH
18349: LD_INT 1
18351: PUSH
18352: LD_INT 2
18354: PUSH
18355: LD_INT 7
18357: PUSH
18358: EMPTY
18359: LIST
18360: LIST
18361: LIST
18362: LIST
18363: PUSH
18364: EMPTY
18365: LIST
18366: LIST
18367: LIST
18368: LIST
18369: LIST
18370: PPUSH
18371: CALL 86254 0 2
// repeat wait ( 0 0$1 ) ;
18375: LD_INT 35
18377: PPUSH
18378: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= 5 or tick mod 10 10$00 = 0 ;
18382: LD_VAR 0 2
18386: PPUSH
18387: LD_INT 1
18389: PPUSH
18390: CALL 87672 0 2
18394: PUSH
18395: LD_INT 5
18397: GREATEREQUAL
18398: PUSH
18399: LD_OWVAR 1
18403: PUSH
18404: LD_INT 21000
18406: MOD
18407: PUSH
18408: LD_INT 0
18410: EQUAL
18411: OR
18412: IFFALSE 18375
// wait ( 0 0$30 ) ;
18414: LD_INT 1050
18416: PPUSH
18417: CALL_OW 67
// tmp := MC_GetVehicles ( base , true ) ;
18421: LD_ADDR_VAR 0 3
18425: PUSH
18426: LD_VAR 0 2
18430: PPUSH
18431: LD_INT 1
18433: PPUSH
18434: CALL 87672 0 2
18438: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff tmp ) ;
18439: LD_ADDR_EXP 55
18443: PUSH
18444: LD_EXP 55
18448: PPUSH
18449: LD_VAR 0 2
18453: PPUSH
18454: LD_EXP 55
18458: PUSH
18459: LD_VAR 0 2
18463: ARRAY
18464: PUSH
18465: LD_VAR 0 3
18469: DIFF
18470: PPUSH
18471: CALL_OW 1
18475: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18476: LD_INT 35
18478: PPUSH
18479: CALL_OW 67
// for i in tmp do
18483: LD_ADDR_VAR 0 1
18487: PUSH
18488: LD_VAR 0 3
18492: PUSH
18493: FOR_IN
18494: IFFALSE 18576
// begin if GetLives ( i ) > 251 then
18496: LD_VAR 0 1
18500: PPUSH
18501: CALL_OW 256
18505: PUSH
18506: LD_INT 251
18508: GREATER
18509: IFFALSE 18547
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 4 ] ) , i ) ) else
18511: LD_VAR 0 1
18515: PPUSH
18516: LD_INT 81
18518: PUSH
18519: LD_INT 4
18521: PUSH
18522: EMPTY
18523: LIST
18524: LIST
18525: PPUSH
18526: CALL_OW 69
18530: PPUSH
18531: LD_VAR 0 1
18535: PPUSH
18536: CALL_OW 74
18540: PPUSH
18541: CALL_OW 115
18545: GO 18574
// if IsDead ( i ) then
18547: LD_VAR 0 1
18551: PPUSH
18552: CALL_OW 301
18556: IFFALSE 18574
// tmp := tmp diff i ;
18558: LD_ADDR_VAR 0 3
18562: PUSH
18563: LD_VAR 0 3
18567: PUSH
18568: LD_VAR 0 1
18572: DIFF
18573: ST_TO_ADDR
// end ;
18574: GO 18493
18576: POP
18577: POP
// until not tmp ;
18578: LD_VAR 0 3
18582: NOT
18583: IFFALSE 18476
// end ; end_of_file
18585: PPOPN 4
18587: END
// export function CustomEvent ( event ) ; begin
18588: LD_INT 0
18590: PPUSH
// end ;
18591: LD_VAR 0 2
18595: RET
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 = 4 then
18596: LD_VAR 0 1
18600: PUSH
18601: LD_INT 1
18603: EQUAL
18604: PUSH
18605: LD_VAR 0 2
18609: PUSH
18610: LD_INT 4
18612: EQUAL
18613: AND
18614: IFFALSE 18642
// begin SayRadio ( Powell , DP-Lost ) ;
18616: LD_EXP 12
18620: PPUSH
18621: LD_STRING DP-Lost
18623: PPUSH
18624: CALL_OW 94
// wait ( 0 0$2 ) ;
18628: LD_INT 70
18630: PPUSH
18631: CALL_OW 67
// YouLost ( FriendlyFire ) ;
18635: LD_STRING FriendlyFire
18637: PPUSH
18638: CALL_OW 104
// end ; end ;
18642: PPOPN 2
18644: END
// on UnitDestroyed ( un ) do begin if GameType = 1 then
18645: LD_EXP 2
18649: PUSH
18650: LD_INT 1
18652: EQUAL
18653: IFFALSE 18888
// begin if un = playerCommander then
18655: LD_VAR 0 1
18659: PUSH
18660: LD_EXP 9
18664: EQUAL
18665: IFFALSE 18674
// YouLost ( commanderDied ) ;
18667: LD_STRING commanderDied
18669: PPUSH
18670: CALL_OW 104
// if un = allyCommander then
18674: LD_VAR 0 1
18678: PUSH
18679: LD_EXP 11
18683: EQUAL
18684: IFFALSE 18693
// YouLost ( Theta ) ;
18686: LD_STRING Theta
18688: PPUSH
18689: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_building ] ] ] ) then
18693: LD_VAR 0 1
18697: PUSH
18698: LD_INT 22
18700: PUSH
18701: LD_INT 8
18703: PUSH
18704: EMPTY
18705: LIST
18706: LIST
18707: PUSH
18708: LD_INT 2
18710: PUSH
18711: LD_INT 21
18713: PUSH
18714: LD_INT 1
18716: PUSH
18717: EMPTY
18718: LIST
18719: LIST
18720: PUSH
18721: LD_INT 21
18723: PUSH
18724: LD_INT 3
18726: PUSH
18727: EMPTY
18728: LIST
18729: LIST
18730: PUSH
18731: EMPTY
18732: LIST
18733: LIST
18734: LIST
18735: PUSH
18736: EMPTY
18737: LIST
18738: LIST
18739: PPUSH
18740: CALL_OW 69
18744: IN
18745: IFFALSE 18761
// legDestCounter := legDestCounter + 1 ;
18747: LD_ADDR_EXP 18
18751: PUSH
18752: LD_EXP 18
18756: PUSH
18757: LD_INT 1
18759: PLUS
18760: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_building ] ] ] ) then
18761: LD_VAR 0 1
18765: PUSH
18766: LD_INT 22
18768: PUSH
18769: LD_INT 4
18771: PUSH
18772: EMPTY
18773: LIST
18774: LIST
18775: PUSH
18776: LD_INT 2
18778: PUSH
18779: LD_INT 21
18781: PUSH
18782: LD_INT 1
18784: PUSH
18785: EMPTY
18786: LIST
18787: LIST
18788: PUSH
18789: LD_INT 21
18791: PUSH
18792: LD_INT 3
18794: PUSH
18795: EMPTY
18796: LIST
18797: LIST
18798: PUSH
18799: EMPTY
18800: LIST
18801: LIST
18802: LIST
18803: PUSH
18804: EMPTY
18805: LIST
18806: LIST
18807: PPUSH
18808: CALL_OW 69
18812: IN
18813: IFFALSE 18829
// allyDestCounter := allyDestCounter + 1 ;
18815: LD_ADDR_EXP 22
18819: PUSH
18820: LD_EXP 22
18824: PUSH
18825: LD_INT 1
18827: PLUS
18828: ST_TO_ADDR
// if un in ruOutpost then
18829: LD_VAR 0 1
18833: PUSH
18834: LD_EXP 14
18838: IN
18839: IFFALSE 18888
// begin ruOutpost := ruOutpost diff un ;
18841: LD_ADDR_EXP 14
18845: PUSH
18846: LD_EXP 14
18850: PUSH
18851: LD_VAR 0 1
18855: DIFF
18856: ST_TO_ADDR
// ruEscape := Replace ( ruEscape , 1 , ruEscape [ 1 ] + 1 ) ;
18857: LD_ADDR_EXP 15
18861: PUSH
18862: LD_EXP 15
18866: PPUSH
18867: LD_INT 1
18869: PPUSH
18870: LD_EXP 15
18874: PUSH
18875: LD_INT 1
18877: ARRAY
18878: PUSH
18879: LD_INT 1
18881: PLUS
18882: PPUSH
18883: CALL_OW 1
18887: ST_TO_ADDR
// end ; end ; MCE_UnitDestroyed ( un ) ;
18888: LD_VAR 0 1
18892: PPUSH
18893: CALL 89646 0 1
// end ;
18897: PPOPN 1
18899: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
18900: LD_VAR 0 1
18904: PPUSH
18905: LD_VAR 0 2
18909: PPUSH
18910: CALL 91980 0 2
// end ;
18914: PPOPN 2
18916: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
18917: LD_VAR 0 1
18921: PPUSH
18922: CALL 91048 0 1
// end ;
18926: PPOPN 1
18928: END
// on BuildingComplete ( building ) do begin MCE_BuildingComplete ( building ) ;
18929: LD_VAR 0 1
18933: PPUSH
18934: CALL 91289 0 1
// end ;
18938: PPOPN 1
18940: END
// on ResearchComplete ( tech , lab ) do begin if tech = tech_LasDouble and GetSide ( lab ) = 1 then
18941: LD_VAR 0 1
18945: PUSH
18946: LD_INT 14
18948: EQUAL
18949: PUSH
18950: LD_VAR 0 2
18954: PPUSH
18955: CALL_OW 255
18959: PUSH
18960: LD_INT 1
18962: EQUAL
18963: AND
18964: IFFALSE 19005
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Laser ) ;
18966: LD_EXP 9
18970: PPUSH
18971: LD_STRING D
18973: PUSH
18974: LD_STRING I
18976: PUSH
18977: LD_STRING J
18979: PUSH
18980: LD_STRING S
18982: PUSH
18983: EMPTY
18984: LIST
18985: LIST
18986: LIST
18987: PUSH
18988: LD_EXP 25
18992: ARRAY
18993: STR
18994: PUSH
18995: LD_STRING -1-Laser
18997: STR
18998: PPUSH
18999: CALL_OW 88
// exit ;
19003: GO 19147
// end ; if tech = tech_MatDet and GetSide ( lab ) = 1 then
19005: LD_VAR 0 1
19009: PUSH
19010: LD_INT 7
19012: EQUAL
19013: PUSH
19014: LD_VAR 0 2
19018: PPUSH
19019: CALL_OW 255
19023: PUSH
19024: LD_INT 1
19026: EQUAL
19027: AND
19028: IFFALSE 19069
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Materialization ) ;
19030: LD_EXP 9
19034: PPUSH
19035: LD_STRING D
19037: PUSH
19038: LD_STRING I
19040: PUSH
19041: LD_STRING J
19043: PUSH
19044: LD_STRING S
19046: PUSH
19047: EMPTY
19048: LIST
19049: LIST
19050: LIST
19051: PUSH
19052: LD_EXP 25
19056: ARRAY
19057: STR
19058: PUSH
19059: LD_STRING -1-Materialization
19061: STR
19062: PPUSH
19063: CALL_OW 88
// exit ;
19067: GO 19147
// end ; if tech = tech_SibFiss and GetSide ( lab ) = 1 then
19069: LD_VAR 0 1
19073: PUSH
19074: LD_INT 25
19076: EQUAL
19077: PUSH
19078: LD_VAR 0 2
19082: PPUSH
19083: CALL_OW 255
19087: PUSH
19088: LD_INT 1
19090: EQUAL
19091: AND
19092: IFFALSE 19133
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Rocket ) ;
19094: LD_EXP 9
19098: PPUSH
19099: LD_STRING D
19101: PUSH
19102: LD_STRING I
19104: PUSH
19105: LD_STRING J
19107: PUSH
19108: LD_STRING S
19110: PUSH
19111: EMPTY
19112: LIST
19113: LIST
19114: LIST
19115: PUSH
19116: LD_EXP 25
19120: ARRAY
19121: STR
19122: PUSH
19123: LD_STRING -1-Rocket
19125: STR
19126: PPUSH
19127: CALL_OW 88
// exit ;
19131: GO 19147
// end ; MCE_ResearchComplete ( tech , lab ) ;
19133: LD_VAR 0 1
19137: PPUSH
19138: LD_VAR 0 2
19142: PPUSH
19143: CALL 89342 0 2
// end ;
19147: PPOPN 2
19149: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
19150: LD_VAR 0 1
19154: PPUSH
19155: LD_VAR 0 2
19159: PPUSH
19160: LD_VAR 0 3
19164: PPUSH
19165: LD_VAR 0 4
19169: PPUSH
19170: LD_VAR 0 5
19174: PPUSH
19175: CALL 88962 0 5
// end ;
19179: PPOPN 5
19181: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
19182: LD_VAR 0 1
19186: PPUSH
19187: LD_VAR 0 2
19191: PPUSH
19192: CALL 88558 0 2
// end ;
19196: PPOPN 2
19198: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
19199: LD_VAR 0 1
19203: PPUSH
19204: LD_VAR 0 2
19208: PPUSH
19209: LD_VAR 0 3
19213: PPUSH
19214: LD_VAR 0 4
19218: PPUSH
19219: CALL 88396 0 4
// end ;
19223: PPOPN 4
19225: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
19226: LD_VAR 0 1
19230: PPUSH
19231: LD_VAR 0 2
19235: PPUSH
19236: LD_VAR 0 3
19240: PPUSH
19241: CALL 88171 0 3
// end ;
19245: PPOPN 3
19247: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
19248: LD_VAR 0 1
19252: PPUSH
19253: LD_VAR 0 2
19257: PPUSH
19258: CALL 88056 0 2
// end ;
19262: PPOPN 2
19264: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
19265: LD_VAR 0 1
19269: PPUSH
19270: LD_VAR 0 2
19274: PPUSH
19275: CALL 92241 0 2
// end ;
19279: PPOPN 2
19281: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
19282: LD_VAR 0 1
19286: PPUSH
19287: LD_VAR 0 2
19291: PPUSH
19292: LD_VAR 0 3
19296: PPUSH
19297: LD_VAR 0 4
19301: PPUSH
19302: CALL 92457 0 4
// end ;
19306: PPOPN 4
19308: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
19309: LD_VAR 0 1
19313: PPUSH
19314: LD_VAR 0 2
19318: PPUSH
19319: CALL 87865 0 2
// end ;
19323: PPOPN 2
19325: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
19326: LD_VAR 0 1
19330: PPUSH
19331: CALL 92696 0 1
// end ; end_of_file
19335: PPOPN 1
19337: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
19338: LD_INT 0
19340: PPUSH
19341: PPUSH
// if exist_mode then
19342: LD_VAR 0 2
19346: IFFALSE 19371
// unit := CreateCharacter ( prefix & ident ) else
19348: LD_ADDR_VAR 0 5
19352: PUSH
19353: LD_VAR 0 3
19357: PUSH
19358: LD_VAR 0 1
19362: STR
19363: PPUSH
19364: CALL_OW 34
19368: ST_TO_ADDR
19369: GO 19386
// unit := NewCharacter ( ident ) ;
19371: LD_ADDR_VAR 0 5
19375: PUSH
19376: LD_VAR 0 1
19380: PPUSH
19381: CALL_OW 25
19385: ST_TO_ADDR
// result := unit ;
19386: LD_ADDR_VAR 0 4
19390: PUSH
19391: LD_VAR 0 5
19395: ST_TO_ADDR
// end ;
19396: LD_VAR 0 4
19400: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
19401: LD_INT 0
19403: PPUSH
19404: PPUSH
// if not side or not nation then
19405: LD_VAR 0 1
19409: NOT
19410: PUSH
19411: LD_VAR 0 2
19415: NOT
19416: OR
19417: IFFALSE 19421
// exit ;
19419: GO 20065
// case nation of nation_american :
19421: LD_VAR 0 2
19425: PUSH
19426: LD_INT 1
19428: DOUBLE
19429: EQUAL
19430: IFTRUE 19434
19432: GO 19608
19434: POP
// result := [ 35 , 45 , 46 , 47 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 ] ; nation_arabian :
19435: LD_ADDR_VAR 0 4
19439: PUSH
19440: LD_INT 35
19442: PUSH
19443: LD_INT 45
19445: PUSH
19446: LD_INT 46
19448: PUSH
19449: LD_INT 47
19451: PUSH
19452: LD_INT 1
19454: PUSH
19455: LD_INT 2
19457: PUSH
19458: LD_INT 6
19460: PUSH
19461: LD_INT 15
19463: PUSH
19464: LD_INT 16
19466: PUSH
19467: LD_INT 7
19469: PUSH
19470: LD_INT 12
19472: PUSH
19473: LD_INT 13
19475: PUSH
19476: LD_INT 10
19478: PUSH
19479: LD_INT 14
19481: PUSH
19482: LD_INT 20
19484: PUSH
19485: LD_INT 21
19487: PUSH
19488: LD_INT 22
19490: PUSH
19491: LD_INT 25
19493: PUSH
19494: LD_INT 32
19496: PUSH
19497: LD_INT 27
19499: PUSH
19500: LD_INT 36
19502: PUSH
19503: LD_INT 69
19505: PUSH
19506: LD_INT 39
19508: PUSH
19509: LD_INT 34
19511: PUSH
19512: LD_INT 40
19514: PUSH
19515: LD_INT 48
19517: PUSH
19518: LD_INT 49
19520: PUSH
19521: LD_INT 50
19523: PUSH
19524: LD_INT 51
19526: PUSH
19527: LD_INT 52
19529: PUSH
19530: LD_INT 53
19532: PUSH
19533: LD_INT 54
19535: PUSH
19536: LD_INT 55
19538: PUSH
19539: LD_INT 56
19541: PUSH
19542: LD_INT 57
19544: PUSH
19545: LD_INT 58
19547: PUSH
19548: LD_INT 59
19550: PUSH
19551: LD_INT 60
19553: PUSH
19554: LD_INT 61
19556: PUSH
19557: LD_INT 62
19559: PUSH
19560: LD_INT 80
19562: PUSH
19563: EMPTY
19564: LIST
19565: LIST
19566: LIST
19567: LIST
19568: LIST
19569: LIST
19570: LIST
19571: LIST
19572: LIST
19573: LIST
19574: LIST
19575: LIST
19576: LIST
19577: LIST
19578: LIST
19579: LIST
19580: LIST
19581: LIST
19582: LIST
19583: LIST
19584: LIST
19585: LIST
19586: LIST
19587: LIST
19588: LIST
19589: LIST
19590: LIST
19591: LIST
19592: LIST
19593: LIST
19594: LIST
19595: LIST
19596: LIST
19597: LIST
19598: LIST
19599: LIST
19600: LIST
19601: LIST
19602: LIST
19603: LIST
19604: LIST
19605: ST_TO_ADDR
19606: GO 19989
19608: LD_INT 2
19610: DOUBLE
19611: EQUAL
19612: IFTRUE 19616
19614: GO 19798
19616: POP
// result := [ 35 , 45 , 46 , 47 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 ] ; nation_russian :
19617: LD_ADDR_VAR 0 4
19621: PUSH
19622: LD_INT 35
19624: PUSH
19625: LD_INT 45
19627: PUSH
19628: LD_INT 46
19630: PUSH
19631: LD_INT 47
19633: PUSH
19634: LD_INT 70
19636: PUSH
19637: LD_INT 1
19639: PUSH
19640: LD_INT 11
19642: PUSH
19643: LD_INT 3
19645: PUSH
19646: LD_INT 4
19648: PUSH
19649: LD_INT 5
19651: PUSH
19652: LD_INT 6
19654: PUSH
19655: LD_INT 15
19657: PUSH
19658: LD_INT 18
19660: PUSH
19661: LD_INT 7
19663: PUSH
19664: LD_INT 17
19666: PUSH
19667: LD_INT 8
19669: PUSH
19670: LD_INT 20
19672: PUSH
19673: LD_INT 21
19675: PUSH
19676: LD_INT 22
19678: PUSH
19679: LD_INT 72
19681: PUSH
19682: LD_INT 26
19684: PUSH
19685: LD_INT 69
19687: PUSH
19688: LD_INT 39
19690: PUSH
19691: LD_INT 40
19693: PUSH
19694: LD_INT 41
19696: PUSH
19697: LD_INT 42
19699: PUSH
19700: LD_INT 43
19702: PUSH
19703: LD_INT 48
19705: PUSH
19706: LD_INT 49
19708: PUSH
19709: LD_INT 50
19711: PUSH
19712: LD_INT 51
19714: PUSH
19715: LD_INT 52
19717: PUSH
19718: LD_INT 53
19720: PUSH
19721: LD_INT 54
19723: PUSH
19724: LD_INT 55
19726: PUSH
19727: LD_INT 56
19729: PUSH
19730: LD_INT 60
19732: PUSH
19733: LD_INT 61
19735: PUSH
19736: LD_INT 62
19738: PUSH
19739: LD_INT 66
19741: PUSH
19742: LD_INT 67
19744: PUSH
19745: LD_INT 68
19747: PUSH
19748: LD_INT 81
19750: PUSH
19751: EMPTY
19752: LIST
19753: LIST
19754: LIST
19755: LIST
19756: LIST
19757: LIST
19758: LIST
19759: LIST
19760: LIST
19761: LIST
19762: LIST
19763: LIST
19764: LIST
19765: LIST
19766: LIST
19767: LIST
19768: LIST
19769: LIST
19770: LIST
19771: LIST
19772: LIST
19773: LIST
19774: LIST
19775: LIST
19776: LIST
19777: LIST
19778: LIST
19779: LIST
19780: LIST
19781: LIST
19782: LIST
19783: LIST
19784: LIST
19785: LIST
19786: LIST
19787: LIST
19788: LIST
19789: LIST
19790: LIST
19791: LIST
19792: LIST
19793: LIST
19794: LIST
19795: ST_TO_ADDR
19796: GO 19989
19798: LD_INT 3
19800: DOUBLE
19801: EQUAL
19802: IFTRUE 19806
19804: GO 19988
19806: POP
// result := [ 46 , 47 , 1 , 2 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 ] ; end ;
19807: LD_ADDR_VAR 0 4
19811: PUSH
19812: LD_INT 46
19814: PUSH
19815: LD_INT 47
19817: PUSH
19818: LD_INT 1
19820: PUSH
19821: LD_INT 2
19823: PUSH
19824: LD_INT 11
19826: PUSH
19827: LD_INT 9
19829: PUSH
19830: LD_INT 20
19832: PUSH
19833: LD_INT 19
19835: PUSH
19836: LD_INT 21
19838: PUSH
19839: LD_INT 24
19841: PUSH
19842: LD_INT 22
19844: PUSH
19845: LD_INT 25
19847: PUSH
19848: LD_INT 28
19850: PUSH
19851: LD_INT 29
19853: PUSH
19854: LD_INT 30
19856: PUSH
19857: LD_INT 31
19859: PUSH
19860: LD_INT 37
19862: PUSH
19863: LD_INT 38
19865: PUSH
19866: LD_INT 32
19868: PUSH
19869: LD_INT 27
19871: PUSH
19872: LD_INT 33
19874: PUSH
19875: LD_INT 69
19877: PUSH
19878: LD_INT 39
19880: PUSH
19881: LD_INT 34
19883: PUSH
19884: LD_INT 40
19886: PUSH
19887: LD_INT 71
19889: PUSH
19890: LD_INT 23
19892: PUSH
19893: LD_INT 44
19895: PUSH
19896: LD_INT 48
19898: PUSH
19899: LD_INT 49
19901: PUSH
19902: LD_INT 50
19904: PUSH
19905: LD_INT 51
19907: PUSH
19908: LD_INT 52
19910: PUSH
19911: LD_INT 53
19913: PUSH
19914: LD_INT 54
19916: PUSH
19917: LD_INT 55
19919: PUSH
19920: LD_INT 56
19922: PUSH
19923: LD_INT 57
19925: PUSH
19926: LD_INT 58
19928: PUSH
19929: LD_INT 59
19931: PUSH
19932: LD_INT 63
19934: PUSH
19935: LD_INT 64
19937: PUSH
19938: LD_INT 65
19940: PUSH
19941: EMPTY
19942: LIST
19943: LIST
19944: LIST
19945: LIST
19946: LIST
19947: LIST
19948: LIST
19949: LIST
19950: LIST
19951: LIST
19952: LIST
19953: LIST
19954: LIST
19955: LIST
19956: LIST
19957: LIST
19958: LIST
19959: LIST
19960: LIST
19961: LIST
19962: LIST
19963: LIST
19964: LIST
19965: LIST
19966: LIST
19967: LIST
19968: LIST
19969: LIST
19970: LIST
19971: LIST
19972: LIST
19973: LIST
19974: LIST
19975: LIST
19976: LIST
19977: LIST
19978: LIST
19979: LIST
19980: LIST
19981: LIST
19982: LIST
19983: LIST
19984: LIST
19985: ST_TO_ADDR
19986: GO 19989
19988: POP
// if state > - 1 and state < 3 then
19989: LD_VAR 0 3
19993: PUSH
19994: LD_INT 1
19996: NEG
19997: GREATER
19998: PUSH
19999: LD_VAR 0 3
20003: PUSH
20004: LD_INT 3
20006: LESS
20007: AND
20008: IFFALSE 20065
// for i in result do
20010: LD_ADDR_VAR 0 5
20014: PUSH
20015: LD_VAR 0 4
20019: PUSH
20020: FOR_IN
20021: IFFALSE 20063
// if GetTech ( i , side ) <> state then
20023: LD_VAR 0 5
20027: PPUSH
20028: LD_VAR 0 1
20032: PPUSH
20033: CALL_OW 321
20037: PUSH
20038: LD_VAR 0 3
20042: NONEQUAL
20043: IFFALSE 20061
// result := result diff i ;
20045: LD_ADDR_VAR 0 4
20049: PUSH
20050: LD_VAR 0 4
20054: PUSH
20055: LD_VAR 0 5
20059: DIFF
20060: ST_TO_ADDR
20061: GO 20020
20063: POP
20064: POP
// end ;
20065: LD_VAR 0 4
20069: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
20070: LD_INT 0
20072: PPUSH
20073: PPUSH
20074: PPUSH
// result := true ;
20075: LD_ADDR_VAR 0 3
20079: PUSH
20080: LD_INT 1
20082: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
20083: LD_ADDR_VAR 0 5
20087: PUSH
20088: LD_VAR 0 2
20092: PPUSH
20093: CALL_OW 480
20097: ST_TO_ADDR
// if not tmp then
20098: LD_VAR 0 5
20102: NOT
20103: IFFALSE 20107
// exit ;
20105: GO 20156
// for i in tmp do
20107: LD_ADDR_VAR 0 4
20111: PUSH
20112: LD_VAR 0 5
20116: PUSH
20117: FOR_IN
20118: IFFALSE 20154
// if GetTech ( i , side ) <> state_researched then
20120: LD_VAR 0 4
20124: PPUSH
20125: LD_VAR 0 1
20129: PPUSH
20130: CALL_OW 321
20134: PUSH
20135: LD_INT 2
20137: NONEQUAL
20138: IFFALSE 20152
// begin result := false ;
20140: LD_ADDR_VAR 0 3
20144: PUSH
20145: LD_INT 0
20147: ST_TO_ADDR
// exit ;
20148: POP
20149: POP
20150: GO 20156
// end ;
20152: GO 20117
20154: POP
20155: POP
// end ;
20156: LD_VAR 0 3
20160: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
20161: LD_INT 0
20163: PPUSH
20164: PPUSH
20165: PPUSH
20166: PPUSH
20167: PPUSH
20168: PPUSH
20169: PPUSH
20170: PPUSH
20171: PPUSH
20172: PPUSH
20173: PPUSH
20174: PPUSH
20175: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
20176: LD_VAR 0 1
20180: NOT
20181: PUSH
20182: LD_VAR 0 1
20186: PPUSH
20187: CALL_OW 257
20191: PUSH
20192: LD_INT 9
20194: NONEQUAL
20195: OR
20196: IFFALSE 20200
// exit ;
20198: GO 20773
// side := GetSide ( unit ) ;
20200: LD_ADDR_VAR 0 9
20204: PUSH
20205: LD_VAR 0 1
20209: PPUSH
20210: CALL_OW 255
20214: ST_TO_ADDR
// tech_space := tech_spacanom ;
20215: LD_ADDR_VAR 0 12
20219: PUSH
20220: LD_INT 29
20222: ST_TO_ADDR
// tech_time := tech_taurad ;
20223: LD_ADDR_VAR 0 13
20227: PUSH
20228: LD_INT 28
20230: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
20231: LD_ADDR_VAR 0 11
20235: PUSH
20236: LD_VAR 0 1
20240: PPUSH
20241: CALL_OW 310
20245: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
20246: LD_VAR 0 11
20250: PPUSH
20251: CALL_OW 247
20255: PUSH
20256: LD_INT 2
20258: EQUAL
20259: IFFALSE 20263
// exit ;
20261: GO 20773
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
20263: LD_ADDR_VAR 0 8
20267: PUSH
20268: LD_INT 81
20270: PUSH
20271: LD_VAR 0 9
20275: PUSH
20276: EMPTY
20277: LIST
20278: LIST
20279: PUSH
20280: LD_INT 3
20282: PUSH
20283: LD_INT 21
20285: PUSH
20286: LD_INT 3
20288: PUSH
20289: EMPTY
20290: LIST
20291: LIST
20292: PUSH
20293: EMPTY
20294: LIST
20295: LIST
20296: PUSH
20297: EMPTY
20298: LIST
20299: LIST
20300: PPUSH
20301: CALL_OW 69
20305: ST_TO_ADDR
// if not tmp then
20306: LD_VAR 0 8
20310: NOT
20311: IFFALSE 20315
// exit ;
20313: GO 20773
// if in_unit then
20315: LD_VAR 0 11
20319: IFFALSE 20343
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
20321: LD_ADDR_VAR 0 10
20325: PUSH
20326: LD_VAR 0 8
20330: PPUSH
20331: LD_VAR 0 11
20335: PPUSH
20336: CALL_OW 74
20340: ST_TO_ADDR
20341: GO 20363
// enemy := NearestUnitToUnit ( tmp , unit ) ;
20343: LD_ADDR_VAR 0 10
20347: PUSH
20348: LD_VAR 0 8
20352: PPUSH
20353: LD_VAR 0 1
20357: PPUSH
20358: CALL_OW 74
20362: ST_TO_ADDR
// if not enemy then
20363: LD_VAR 0 10
20367: NOT
20368: IFFALSE 20372
// exit ;
20370: GO 20773
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
20372: LD_VAR 0 11
20376: PUSH
20377: LD_VAR 0 11
20381: PPUSH
20382: LD_VAR 0 10
20386: PPUSH
20387: CALL_OW 296
20391: PUSH
20392: LD_INT 13
20394: GREATER
20395: AND
20396: PUSH
20397: LD_VAR 0 1
20401: PPUSH
20402: LD_VAR 0 10
20406: PPUSH
20407: CALL_OW 296
20411: PUSH
20412: LD_INT 12
20414: GREATER
20415: OR
20416: IFFALSE 20420
// exit ;
20418: GO 20773
// missile := [ 1 ] ;
20420: LD_ADDR_VAR 0 14
20424: PUSH
20425: LD_INT 1
20427: PUSH
20428: EMPTY
20429: LIST
20430: ST_TO_ADDR
// if Researched ( side , tech_space ) then
20431: LD_VAR 0 9
20435: PPUSH
20436: LD_VAR 0 12
20440: PPUSH
20441: CALL_OW 325
20445: IFFALSE 20474
// missile := Insert ( missile , missile + 1 , 2 ) ;
20447: LD_ADDR_VAR 0 14
20451: PUSH
20452: LD_VAR 0 14
20456: PPUSH
20457: LD_VAR 0 14
20461: PUSH
20462: LD_INT 1
20464: PLUS
20465: PPUSH
20466: LD_INT 2
20468: PPUSH
20469: CALL_OW 2
20473: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
20474: LD_VAR 0 9
20478: PPUSH
20479: LD_VAR 0 13
20483: PPUSH
20484: CALL_OW 325
20488: PUSH
20489: LD_VAR 0 10
20493: PPUSH
20494: CALL_OW 255
20498: PPUSH
20499: LD_VAR 0 13
20503: PPUSH
20504: CALL_OW 325
20508: NOT
20509: AND
20510: IFFALSE 20539
// missile := Insert ( missile , missile + 1 , 3 ) ;
20512: LD_ADDR_VAR 0 14
20516: PUSH
20517: LD_VAR 0 14
20521: PPUSH
20522: LD_VAR 0 14
20526: PUSH
20527: LD_INT 1
20529: PLUS
20530: PPUSH
20531: LD_INT 3
20533: PPUSH
20534: CALL_OW 2
20538: ST_TO_ADDR
// if missile < 2 then
20539: LD_VAR 0 14
20543: PUSH
20544: LD_INT 2
20546: LESS
20547: IFFALSE 20551
// exit ;
20549: GO 20773
// x := GetX ( enemy ) ;
20551: LD_ADDR_VAR 0 4
20555: PUSH
20556: LD_VAR 0 10
20560: PPUSH
20561: CALL_OW 250
20565: ST_TO_ADDR
// y := GetY ( enemy ) ;
20566: LD_ADDR_VAR 0 5
20570: PUSH
20571: LD_VAR 0 10
20575: PPUSH
20576: CALL_OW 251
20580: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
20581: LD_ADDR_VAR 0 6
20585: PUSH
20586: LD_VAR 0 4
20590: PUSH
20591: LD_INT 1
20593: NEG
20594: PPUSH
20595: LD_INT 1
20597: PPUSH
20598: CALL_OW 12
20602: PLUS
20603: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
20604: LD_ADDR_VAR 0 7
20608: PUSH
20609: LD_VAR 0 5
20613: PUSH
20614: LD_INT 1
20616: NEG
20617: PPUSH
20618: LD_INT 1
20620: PPUSH
20621: CALL_OW 12
20625: PLUS
20626: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
20627: LD_VAR 0 6
20631: PPUSH
20632: LD_VAR 0 7
20636: PPUSH
20637: CALL_OW 488
20641: NOT
20642: IFFALSE 20664
// begin _x := x ;
20644: LD_ADDR_VAR 0 6
20648: PUSH
20649: LD_VAR 0 4
20653: ST_TO_ADDR
// _y := y ;
20654: LD_ADDR_VAR 0 7
20658: PUSH
20659: LD_VAR 0 5
20663: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
20664: LD_ADDR_VAR 0 3
20668: PUSH
20669: LD_INT 1
20671: PPUSH
20672: LD_VAR 0 14
20676: PPUSH
20677: CALL_OW 12
20681: ST_TO_ADDR
// case i of 1 :
20682: LD_VAR 0 3
20686: PUSH
20687: LD_INT 1
20689: DOUBLE
20690: EQUAL
20691: IFTRUE 20695
20693: GO 20712
20695: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
20696: LD_VAR 0 1
20700: PPUSH
20701: LD_VAR 0 10
20705: PPUSH
20706: CALL_OW 115
20710: GO 20773
20712: LD_INT 2
20714: DOUBLE
20715: EQUAL
20716: IFTRUE 20720
20718: GO 20742
20720: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
20721: LD_VAR 0 1
20725: PPUSH
20726: LD_VAR 0 6
20730: PPUSH
20731: LD_VAR 0 7
20735: PPUSH
20736: CALL_OW 153
20740: GO 20773
20742: LD_INT 3
20744: DOUBLE
20745: EQUAL
20746: IFTRUE 20750
20748: GO 20772
20750: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
20751: LD_VAR 0 1
20755: PPUSH
20756: LD_VAR 0 6
20760: PPUSH
20761: LD_VAR 0 7
20765: PPUSH
20766: CALL_OW 154
20770: GO 20773
20772: POP
// end ;
20773: LD_VAR 0 2
20777: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
20778: LD_INT 0
20780: PPUSH
20781: PPUSH
20782: PPUSH
20783: PPUSH
20784: PPUSH
20785: PPUSH
// if not unit or not building then
20786: LD_VAR 0 1
20790: NOT
20791: PUSH
20792: LD_VAR 0 2
20796: NOT
20797: OR
20798: IFFALSE 20802
// exit ;
20800: GO 20960
// x := GetX ( building ) ;
20802: LD_ADDR_VAR 0 5
20806: PUSH
20807: LD_VAR 0 2
20811: PPUSH
20812: CALL_OW 250
20816: ST_TO_ADDR
// y := GetY ( building ) ;
20817: LD_ADDR_VAR 0 6
20821: PUSH
20822: LD_VAR 0 2
20826: PPUSH
20827: CALL_OW 251
20831: ST_TO_ADDR
// for i = 0 to 5 do
20832: LD_ADDR_VAR 0 4
20836: PUSH
20837: DOUBLE
20838: LD_INT 0
20840: DEC
20841: ST_TO_ADDR
20842: LD_INT 5
20844: PUSH
20845: FOR_TO
20846: IFFALSE 20958
// begin _x := ShiftX ( x , i , 3 ) ;
20848: LD_ADDR_VAR 0 7
20852: PUSH
20853: LD_VAR 0 5
20857: PPUSH
20858: LD_VAR 0 4
20862: PPUSH
20863: LD_INT 3
20865: PPUSH
20866: CALL_OW 272
20870: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
20871: LD_ADDR_VAR 0 8
20875: PUSH
20876: LD_VAR 0 6
20880: PPUSH
20881: LD_VAR 0 4
20885: PPUSH
20886: LD_INT 3
20888: PPUSH
20889: CALL_OW 273
20893: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
20894: LD_VAR 0 7
20898: PPUSH
20899: LD_VAR 0 8
20903: PPUSH
20904: CALL_OW 488
20908: NOT
20909: IFFALSE 20913
// continue ;
20911: GO 20845
// if HexInfo ( _x , _y ) = 0 then
20913: LD_VAR 0 7
20917: PPUSH
20918: LD_VAR 0 8
20922: PPUSH
20923: CALL_OW 428
20927: PUSH
20928: LD_INT 0
20930: EQUAL
20931: IFFALSE 20956
// begin ComMoveXY ( unit , _x , _y ) ;
20933: LD_VAR 0 1
20937: PPUSH
20938: LD_VAR 0 7
20942: PPUSH
20943: LD_VAR 0 8
20947: PPUSH
20948: CALL_OW 111
// exit ;
20952: POP
20953: POP
20954: GO 20960
// end ; end ;
20956: GO 20845
20958: POP
20959: POP
// end ;
20960: LD_VAR 0 3
20964: RET
// export function ScanBase ( side , base_area ) ; begin
20965: LD_INT 0
20967: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
20968: LD_ADDR_VAR 0 3
20972: PUSH
20973: LD_VAR 0 2
20977: PPUSH
20978: LD_INT 81
20980: PUSH
20981: LD_VAR 0 1
20985: PUSH
20986: EMPTY
20987: LIST
20988: LIST
20989: PPUSH
20990: CALL_OW 70
20994: ST_TO_ADDR
// end ;
20995: LD_VAR 0 3
20999: RET
// export function BasicDefend ( base , solds , area ) ; var enemy , side , i , hex ; begin
21000: LD_INT 0
21002: PPUSH
21003: PPUSH
21004: PPUSH
21005: PPUSH
21006: PPUSH
// if not base or not mc_bases [ base ] or not solds or not area then
21007: LD_VAR 0 1
21011: NOT
21012: PUSH
21013: LD_EXP 36
21017: PUSH
21018: LD_VAR 0 1
21022: ARRAY
21023: NOT
21024: OR
21025: PUSH
21026: LD_VAR 0 2
21030: NOT
21031: OR
21032: PUSH
21033: LD_VAR 0 3
21037: NOT
21038: OR
21039: IFFALSE 21043
// exit ;
21041: GO 21556
// side := mc_sides [ base ] ;
21043: LD_ADDR_VAR 0 6
21047: PUSH
21048: LD_EXP 62
21052: PUSH
21053: LD_VAR 0 1
21057: ARRAY
21058: ST_TO_ADDR
// if not side then
21059: LD_VAR 0 6
21063: NOT
21064: IFFALSE 21068
// exit ;
21066: GO 21556
// for i in solds do
21068: LD_ADDR_VAR 0 7
21072: PUSH
21073: LD_VAR 0 2
21077: PUSH
21078: FOR_IN
21079: IFFALSE 21140
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
21081: LD_VAR 0 7
21085: PPUSH
21086: CALL_OW 310
21090: PPUSH
21091: CALL_OW 266
21095: PUSH
21096: LD_INT 32
21098: PUSH
21099: LD_INT 31
21101: PUSH
21102: EMPTY
21103: LIST
21104: LIST
21105: IN
21106: IFFALSE 21126
// solds := solds diff i else
21108: LD_ADDR_VAR 0 2
21112: PUSH
21113: LD_VAR 0 2
21117: PUSH
21118: LD_VAR 0 7
21122: DIFF
21123: ST_TO_ADDR
21124: GO 21138
// SetTag ( i , 18 ) ;
21126: LD_VAR 0 7
21130: PPUSH
21131: LD_INT 18
21133: PPUSH
21134: CALL_OW 109
21138: GO 21078
21140: POP
21141: POP
// if not solds then
21142: LD_VAR 0 2
21146: NOT
21147: IFFALSE 21151
// exit ;
21149: GO 21556
// repeat wait ( 0 0$1 ) ;
21151: LD_INT 35
21153: PPUSH
21154: CALL_OW 67
// enemy := ScanBase ( side , area ) ;
21158: LD_ADDR_VAR 0 5
21162: PUSH
21163: LD_VAR 0 6
21167: PPUSH
21168: LD_VAR 0 3
21172: PPUSH
21173: CALL 20965 0 2
21177: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
21178: LD_EXP 36
21182: PUSH
21183: LD_VAR 0 1
21187: ARRAY
21188: NOT
21189: PUSH
21190: LD_EXP 36
21194: PUSH
21195: LD_VAR 0 1
21199: ARRAY
21200: PUSH
21201: EMPTY
21202: EQUAL
21203: OR
21204: IFFALSE 21241
// begin for i in solds do
21206: LD_ADDR_VAR 0 7
21210: PUSH
21211: LD_VAR 0 2
21215: PUSH
21216: FOR_IN
21217: IFFALSE 21230
// ComStop ( i ) ;
21219: LD_VAR 0 7
21223: PPUSH
21224: CALL_OW 141
21228: GO 21216
21230: POP
21231: POP
// solds := [ ] ;
21232: LD_ADDR_VAR 0 2
21236: PUSH
21237: EMPTY
21238: ST_TO_ADDR
// exit ;
21239: GO 21556
// end ; if not enemy or enemy > 3 or mc_defender [ base ] then
21241: LD_VAR 0 5
21245: NOT
21246: PUSH
21247: LD_VAR 0 5
21251: PUSH
21252: LD_INT 3
21254: GREATER
21255: OR
21256: PUSH
21257: LD_EXP 58
21261: PUSH
21262: LD_VAR 0 1
21266: ARRAY
21267: OR
21268: IFFALSE 21309
// begin for i in solds do
21270: LD_ADDR_VAR 0 7
21274: PUSH
21275: LD_VAR 0 2
21279: PUSH
21280: FOR_IN
21281: IFFALSE 21305
// if HasTask ( i ) then
21283: LD_VAR 0 7
21287: PPUSH
21288: CALL_OW 314
21292: IFFALSE 21303
// ComStop ( i ) ;
21294: LD_VAR 0 7
21298: PPUSH
21299: CALL_OW 141
21303: GO 21280
21305: POP
21306: POP
// break ;
21307: GO 21544
// end ; for i in solds do
21309: LD_ADDR_VAR 0 7
21313: PUSH
21314: LD_VAR 0 2
21318: PUSH
21319: FOR_IN
21320: IFFALSE 21536
// begin if IsInUnit ( i ) then
21322: LD_VAR 0 7
21326: PPUSH
21327: CALL_OW 310
21331: IFFALSE 21342
// ComExitBuilding ( i ) ;
21333: LD_VAR 0 7
21337: PPUSH
21338: CALL_OW 122
// if GetLives ( i ) > 333 then
21342: LD_VAR 0 7
21346: PPUSH
21347: CALL_OW 256
21351: PUSH
21352: LD_INT 333
21354: GREATER
21355: IFFALSE 21383
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
21357: LD_VAR 0 7
21361: PPUSH
21362: LD_VAR 0 5
21366: PPUSH
21367: LD_VAR 0 7
21371: PPUSH
21372: CALL_OW 74
21376: PPUSH
21377: CALL_OW 115
21381: GO 21534
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
21383: LD_ADDR_VAR 0 8
21387: PUSH
21388: LD_EXP 36
21392: PUSH
21393: LD_VAR 0 1
21397: ARRAY
21398: PPUSH
21399: LD_INT 2
21401: PUSH
21402: LD_INT 30
21404: PUSH
21405: LD_INT 0
21407: PUSH
21408: EMPTY
21409: LIST
21410: LIST
21411: PUSH
21412: LD_INT 30
21414: PUSH
21415: LD_INT 1
21417: PUSH
21418: EMPTY
21419: LIST
21420: LIST
21421: PUSH
21422: LD_INT 30
21424: PUSH
21425: LD_INT 6
21427: PUSH
21428: EMPTY
21429: LIST
21430: LIST
21431: PUSH
21432: EMPTY
21433: LIST
21434: LIST
21435: LIST
21436: LIST
21437: PPUSH
21438: CALL_OW 72
21442: PPUSH
21443: LD_VAR 0 7
21447: PPUSH
21448: CALL_OW 74
21452: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
21453: LD_VAR 0 7
21457: PPUSH
21458: LD_VAR 0 8
21462: PPUSH
21463: CALL_OW 250
21467: PPUSH
21468: LD_INT 3
21470: PPUSH
21471: LD_INT 5
21473: PPUSH
21474: CALL_OW 272
21478: PPUSH
21479: LD_VAR 0 8
21483: PPUSH
21484: CALL_OW 251
21488: PPUSH
21489: LD_INT 3
21491: PPUSH
21492: LD_INT 5
21494: PPUSH
21495: CALL_OW 273
21499: PPUSH
21500: CALL_OW 111
// SetTag ( i , 0 ) ;
21504: LD_VAR 0 7
21508: PPUSH
21509: LD_INT 0
21511: PPUSH
21512: CALL_OW 109
// solds := solds diff i ;
21516: LD_ADDR_VAR 0 2
21520: PUSH
21521: LD_VAR 0 2
21525: PUSH
21526: LD_VAR 0 7
21530: DIFF
21531: ST_TO_ADDR
// continue ;
21532: GO 21319
// end ; end ;
21534: GO 21319
21536: POP
21537: POP
// until solds ;
21538: LD_VAR 0 2
21542: IFFALSE 21151
// MC_Reset ( base , 18 ) ;
21544: LD_VAR 0 1
21548: PPUSH
21549: LD_INT 18
21551: PPUSH
21552: CALL 66533 0 2
// end ;
21556: LD_VAR 0 4
21560: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
21561: LD_INT 0
21563: PPUSH
21564: PPUSH
21565: PPUSH
21566: PPUSH
21567: PPUSH
21568: PPUSH
21569: PPUSH
21570: PPUSH
21571: PPUSH
21572: PPUSH
21573: PPUSH
21574: PPUSH
21575: PPUSH
21576: PPUSH
21577: PPUSH
21578: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
21579: LD_ADDR_VAR 0 12
21583: PUSH
21584: LD_EXP 36
21588: PUSH
21589: LD_VAR 0 1
21593: ARRAY
21594: PPUSH
21595: LD_INT 25
21597: PUSH
21598: LD_INT 3
21600: PUSH
21601: EMPTY
21602: LIST
21603: LIST
21604: PPUSH
21605: CALL_OW 72
21609: ST_TO_ADDR
// if mc_remote_driver [ base ] then
21610: LD_EXP 76
21614: PUSH
21615: LD_VAR 0 1
21619: ARRAY
21620: IFFALSE 21644
// mechs := mechs diff mc_remote_driver [ base ] ;
21622: LD_ADDR_VAR 0 12
21626: PUSH
21627: LD_VAR 0 12
21631: PUSH
21632: LD_EXP 76
21636: PUSH
21637: LD_VAR 0 1
21641: ARRAY
21642: DIFF
21643: ST_TO_ADDR
// for i in mechs do
21644: LD_ADDR_VAR 0 5
21648: PUSH
21649: LD_VAR 0 12
21653: PUSH
21654: FOR_IN
21655: IFFALSE 21690
// if GetTag ( i ) > 0 then
21657: LD_VAR 0 5
21661: PPUSH
21662: CALL_OW 110
21666: PUSH
21667: LD_INT 0
21669: GREATER
21670: IFFALSE 21688
// mechs := mechs diff i ;
21672: LD_ADDR_VAR 0 12
21676: PUSH
21677: LD_VAR 0 12
21681: PUSH
21682: LD_VAR 0 5
21686: DIFF
21687: ST_TO_ADDR
21688: GO 21654
21690: POP
21691: POP
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
21692: LD_ADDR_VAR 0 8
21696: PUSH
21697: LD_EXP 36
21701: PUSH
21702: LD_VAR 0 1
21706: ARRAY
21707: PPUSH
21708: LD_INT 2
21710: PUSH
21711: LD_INT 25
21713: PUSH
21714: LD_INT 1
21716: PUSH
21717: EMPTY
21718: LIST
21719: LIST
21720: PUSH
21721: LD_INT 25
21723: PUSH
21724: LD_INT 5
21726: PUSH
21727: EMPTY
21728: LIST
21729: LIST
21730: PUSH
21731: LD_INT 25
21733: PUSH
21734: LD_INT 8
21736: PUSH
21737: EMPTY
21738: LIST
21739: LIST
21740: PUSH
21741: LD_INT 25
21743: PUSH
21744: LD_INT 9
21746: PUSH
21747: EMPTY
21748: LIST
21749: LIST
21750: PUSH
21751: EMPTY
21752: LIST
21753: LIST
21754: LIST
21755: LIST
21756: LIST
21757: PPUSH
21758: CALL_OW 72
21762: ST_TO_ADDR
// if not defenders and not solds then
21763: LD_VAR 0 2
21767: NOT
21768: PUSH
21769: LD_VAR 0 8
21773: NOT
21774: AND
21775: IFFALSE 21779
// exit ;
21777: GO 23317
// depot_under_attack := false ;
21779: LD_ADDR_VAR 0 16
21783: PUSH
21784: LD_INT 0
21786: ST_TO_ADDR
// sold_defenders := [ ] ;
21787: LD_ADDR_VAR 0 17
21791: PUSH
21792: EMPTY
21793: ST_TO_ADDR
// if mechs then
21794: LD_VAR 0 12
21798: IFFALSE 21927
// for i in defenders do
21800: LD_ADDR_VAR 0 5
21804: PUSH
21805: LD_VAR 0 2
21809: PUSH
21810: FOR_IN
21811: IFFALSE 21925
// begin SetTag ( i , 20 ) ;
21813: LD_VAR 0 5
21817: PPUSH
21818: LD_INT 20
21820: PPUSH
21821: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
21825: LD_VAR 0 5
21829: PPUSH
21830: CALL_OW 263
21834: PUSH
21835: LD_INT 1
21837: EQUAL
21838: PUSH
21839: LD_VAR 0 5
21843: PPUSH
21844: CALL_OW 311
21848: NOT
21849: AND
21850: PUSH
21851: LD_VAR 0 12
21855: AND
21856: IFFALSE 21923
// begin un := mechs [ 1 ] ;
21858: LD_ADDR_VAR 0 10
21862: PUSH
21863: LD_VAR 0 12
21867: PUSH
21868: LD_INT 1
21870: ARRAY
21871: ST_TO_ADDR
// ComExitBuilding ( un ) ;
21872: LD_VAR 0 10
21876: PPUSH
21877: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
21881: LD_VAR 0 10
21885: PPUSH
21886: LD_VAR 0 5
21890: PPUSH
21891: CALL_OW 180
// SetTag ( un , 19 ) ;
21895: LD_VAR 0 10
21899: PPUSH
21900: LD_INT 19
21902: PPUSH
21903: CALL_OW 109
// mechs := mechs diff un ;
21907: LD_ADDR_VAR 0 12
21911: PUSH
21912: LD_VAR 0 12
21916: PUSH
21917: LD_VAR 0 10
21921: DIFF
21922: ST_TO_ADDR
// end ; end ;
21923: GO 21810
21925: POP
21926: POP
// if solds then
21927: LD_VAR 0 8
21931: IFFALSE 21990
// for i in solds do
21933: LD_ADDR_VAR 0 5
21937: PUSH
21938: LD_VAR 0 8
21942: PUSH
21943: FOR_IN
21944: IFFALSE 21988
// if not GetTag ( i ) then
21946: LD_VAR 0 5
21950: PPUSH
21951: CALL_OW 110
21955: NOT
21956: IFFALSE 21986
// begin defenders := defenders union i ;
21958: LD_ADDR_VAR 0 2
21962: PUSH
21963: LD_VAR 0 2
21967: PUSH
21968: LD_VAR 0 5
21972: UNION
21973: ST_TO_ADDR
// SetTag ( i , 18 ) ;
21974: LD_VAR 0 5
21978: PPUSH
21979: LD_INT 18
21981: PPUSH
21982: CALL_OW 109
// end ;
21986: GO 21943
21988: POP
21989: POP
// repeat wait ( 0 0$1 ) ;
21990: LD_INT 35
21992: PPUSH
21993: CALL_OW 67
// enemy := mc_scan [ base ] ;
21997: LD_ADDR_VAR 0 3
22001: PUSH
22002: LD_EXP 59
22006: PUSH
22007: LD_VAR 0 1
22011: ARRAY
22012: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
22013: LD_EXP 36
22017: PUSH
22018: LD_VAR 0 1
22022: ARRAY
22023: NOT
22024: PUSH
22025: LD_EXP 36
22029: PUSH
22030: LD_VAR 0 1
22034: ARRAY
22035: PUSH
22036: EMPTY
22037: EQUAL
22038: OR
22039: IFFALSE 22076
// begin for i in defenders do
22041: LD_ADDR_VAR 0 5
22045: PUSH
22046: LD_VAR 0 2
22050: PUSH
22051: FOR_IN
22052: IFFALSE 22065
// ComStop ( i ) ;
22054: LD_VAR 0 5
22058: PPUSH
22059: CALL_OW 141
22063: GO 22051
22065: POP
22066: POP
// defenders := [ ] ;
22067: LD_ADDR_VAR 0 2
22071: PUSH
22072: EMPTY
22073: ST_TO_ADDR
// exit ;
22074: GO 23317
// end ; for i in defenders do
22076: LD_ADDR_VAR 0 5
22080: PUSH
22081: LD_VAR 0 2
22085: PUSH
22086: FOR_IN
22087: IFFALSE 22817
// begin e := NearestUnitToUnit ( enemy , i ) ;
22089: LD_ADDR_VAR 0 13
22093: PUSH
22094: LD_VAR 0 3
22098: PPUSH
22099: LD_VAR 0 5
22103: PPUSH
22104: CALL_OW 74
22108: ST_TO_ADDR
// depot_under_attack := ( not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) or GetLives ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ) < 600 ) ;
22109: LD_ADDR_VAR 0 16
22113: PUSH
22114: LD_EXP 36
22118: PUSH
22119: LD_VAR 0 1
22123: ARRAY
22124: PPUSH
22125: LD_INT 2
22127: PUSH
22128: LD_INT 30
22130: PUSH
22131: LD_INT 0
22133: PUSH
22134: EMPTY
22135: LIST
22136: LIST
22137: PUSH
22138: LD_INT 30
22140: PUSH
22141: LD_INT 1
22143: PUSH
22144: EMPTY
22145: LIST
22146: LIST
22147: PUSH
22148: EMPTY
22149: LIST
22150: LIST
22151: LIST
22152: PPUSH
22153: CALL_OW 72
22157: NOT
22158: PUSH
22159: LD_EXP 36
22163: PUSH
22164: LD_VAR 0 1
22168: ARRAY
22169: PPUSH
22170: LD_INT 2
22172: PUSH
22173: LD_INT 30
22175: PUSH
22176: LD_INT 0
22178: PUSH
22179: EMPTY
22180: LIST
22181: LIST
22182: PUSH
22183: LD_INT 30
22185: PUSH
22186: LD_INT 1
22188: PUSH
22189: EMPTY
22190: LIST
22191: LIST
22192: PUSH
22193: EMPTY
22194: LIST
22195: LIST
22196: LIST
22197: PPUSH
22198: CALL_OW 72
22202: PPUSH
22203: CALL_OW 256
22207: PUSH
22208: LD_INT 600
22210: LESS
22211: OR
22212: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
22213: LD_VAR 0 5
22217: PPUSH
22218: CALL_OW 247
22222: PUSH
22223: LD_INT 2
22225: DOUBLE
22226: EQUAL
22227: IFTRUE 22231
22229: GO 22523
22231: POP
// begin if GetLives ( i ) > 650 and ( GetDistUnits ( i , e ) < 40 or IsInArea ( e , mc_scan_area [ base ] ) ) then
22232: LD_VAR 0 5
22236: PPUSH
22237: CALL_OW 256
22241: PUSH
22242: LD_INT 650
22244: GREATER
22245: PUSH
22246: LD_VAR 0 5
22250: PPUSH
22251: LD_VAR 0 13
22255: PPUSH
22256: CALL_OW 296
22260: PUSH
22261: LD_INT 40
22263: LESS
22264: PUSH
22265: LD_VAR 0 13
22269: PPUSH
22270: LD_EXP 61
22274: PUSH
22275: LD_VAR 0 1
22279: ARRAY
22280: PPUSH
22281: CALL_OW 308
22285: OR
22286: AND
22287: IFFALSE 22305
// ComAttackUnit ( i , e ) else
22289: LD_VAR 0 5
22293: PPUSH
22294: LD_VAR 0 13
22298: PPUSH
22299: CALL_OW 115
22303: GO 22406
// if ( ( not IsInArea ( e , mc_scan_area [ base ] ) and GetDistUnits ( i , e ) >= 40 ) or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
22305: LD_VAR 0 13
22309: PPUSH
22310: LD_EXP 61
22314: PUSH
22315: LD_VAR 0 1
22319: ARRAY
22320: PPUSH
22321: CALL_OW 308
22325: NOT
22326: PUSH
22327: LD_VAR 0 5
22331: PPUSH
22332: LD_VAR 0 13
22336: PPUSH
22337: CALL_OW 296
22341: PUSH
22342: LD_INT 40
22344: GREATEREQUAL
22345: AND
22346: PUSH
22347: LD_VAR 0 5
22351: PPUSH
22352: CALL_OW 256
22356: PUSH
22357: LD_INT 650
22359: LESSEQUAL
22360: OR
22361: PUSH
22362: LD_VAR 0 5
22366: PPUSH
22367: LD_EXP 60
22371: PUSH
22372: LD_VAR 0 1
22376: ARRAY
22377: PPUSH
22378: CALL_OW 308
22382: NOT
22383: AND
22384: IFFALSE 22406
// ComMoveToArea ( i , mc_parking [ base ] ) ;
22386: LD_VAR 0 5
22390: PPUSH
22391: LD_EXP 60
22395: PUSH
22396: LD_VAR 0 1
22400: ARRAY
22401: PPUSH
22402: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
22406: LD_VAR 0 5
22410: PPUSH
22411: CALL_OW 256
22415: PUSH
22416: LD_INT 998
22418: LESS
22419: PUSH
22420: LD_VAR 0 5
22424: PPUSH
22425: CALL_OW 263
22429: PUSH
22430: LD_INT 1
22432: EQUAL
22433: AND
22434: PUSH
22435: LD_VAR 0 5
22439: PPUSH
22440: CALL_OW 311
22444: AND
22445: PUSH
22446: LD_VAR 0 5
22450: PPUSH
22451: LD_EXP 60
22455: PUSH
22456: LD_VAR 0 1
22460: ARRAY
22461: PPUSH
22462: CALL_OW 308
22466: AND
22467: IFFALSE 22521
// begin mech := IsDrivenBy ( i ) ;
22469: LD_ADDR_VAR 0 9
22473: PUSH
22474: LD_VAR 0 5
22478: PPUSH
22479: CALL_OW 311
22483: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
22484: LD_VAR 0 9
22488: PPUSH
22489: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
22493: LD_VAR 0 9
22497: PPUSH
22498: LD_VAR 0 5
22502: PPUSH
22503: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
22507: LD_VAR 0 9
22511: PPUSH
22512: LD_VAR 0 5
22516: PPUSH
22517: CALL_OW 180
// end ; end ; unit_human :
22521: GO 22788
22523: LD_INT 1
22525: DOUBLE
22526: EQUAL
22527: IFTRUE 22531
22529: GO 22787
22531: POP
// begin b := IsInUnit ( i ) ;
22532: LD_ADDR_VAR 0 18
22536: PUSH
22537: LD_VAR 0 5
22541: PPUSH
22542: CALL_OW 310
22546: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
22547: LD_ADDR_VAR 0 19
22551: PUSH
22552: LD_VAR 0 18
22556: NOT
22557: PUSH
22558: LD_VAR 0 18
22562: PPUSH
22563: CALL_OW 266
22567: PUSH
22568: LD_INT 32
22570: PUSH
22571: LD_INT 31
22573: PUSH
22574: EMPTY
22575: LIST
22576: LIST
22577: IN
22578: OR
22579: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
22580: LD_VAR 0 16
22584: PUSH
22585: LD_VAR 0 2
22589: PPUSH
22590: LD_INT 21
22592: PUSH
22593: LD_INT 2
22595: PUSH
22596: EMPTY
22597: LIST
22598: LIST
22599: PPUSH
22600: CALL_OW 72
22604: PUSH
22605: LD_INT 1
22607: LESSEQUAL
22608: OR
22609: PUSH
22610: LD_VAR 0 19
22614: AND
22615: PUSH
22616: LD_VAR 0 5
22620: PUSH
22621: LD_VAR 0 17
22625: IN
22626: NOT
22627: AND
22628: IFFALSE 22721
// begin if b then
22630: LD_VAR 0 18
22634: IFFALSE 22683
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
22636: LD_VAR 0 18
22640: PPUSH
22641: LD_VAR 0 3
22645: PPUSH
22646: LD_VAR 0 18
22650: PPUSH
22651: CALL_OW 74
22655: PPUSH
22656: CALL_OW 296
22660: PUSH
22661: LD_INT 10
22663: LESS
22664: PUSH
22665: LD_VAR 0 18
22669: PPUSH
22670: CALL_OW 461
22674: PUSH
22675: LD_INT 7
22677: NONEQUAL
22678: AND
22679: IFFALSE 22683
// continue ;
22681: GO 22086
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
22683: LD_ADDR_VAR 0 17
22687: PUSH
22688: LD_VAR 0 17
22692: PPUSH
22693: LD_VAR 0 17
22697: PUSH
22698: LD_INT 1
22700: PLUS
22701: PPUSH
22702: LD_VAR 0 5
22706: PPUSH
22707: CALL_OW 1
22711: ST_TO_ADDR
// ComExitBuilding ( i ) ;
22712: LD_VAR 0 5
22716: PPUSH
22717: CALL_OW 122
// end ; if sold_defenders then
22721: LD_VAR 0 17
22725: IFFALSE 22785
// if i in sold_defenders then
22727: LD_VAR 0 5
22731: PUSH
22732: LD_VAR 0 17
22736: IN
22737: IFFALSE 22785
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
22739: LD_VAR 0 5
22743: PPUSH
22744: CALL_OW 314
22748: NOT
22749: PUSH
22750: LD_VAR 0 5
22754: PPUSH
22755: LD_VAR 0 13
22759: PPUSH
22760: CALL_OW 296
22764: PUSH
22765: LD_INT 30
22767: LESS
22768: AND
22769: IFFALSE 22785
// ComAttackUnit ( i , e ) ;
22771: LD_VAR 0 5
22775: PPUSH
22776: LD_VAR 0 13
22780: PPUSH
22781: CALL_OW 115
// end ; end ; end ;
22785: GO 22788
22787: POP
// if IsDead ( i ) then
22788: LD_VAR 0 5
22792: PPUSH
22793: CALL_OW 301
22797: IFFALSE 22815
// defenders := defenders diff i ;
22799: LD_ADDR_VAR 0 2
22803: PUSH
22804: LD_VAR 0 2
22808: PUSH
22809: LD_VAR 0 5
22813: DIFF
22814: ST_TO_ADDR
// end ;
22815: GO 22086
22817: POP
22818: POP
// until not enemy or not defenders or not mc_bases [ base ] ;
22819: LD_VAR 0 3
22823: NOT
22824: PUSH
22825: LD_VAR 0 2
22829: NOT
22830: OR
22831: PUSH
22832: LD_EXP 36
22836: PUSH
22837: LD_VAR 0 1
22841: ARRAY
22842: NOT
22843: OR
22844: IFFALSE 21990
// MC_Reset ( base , 18 ) ;
22846: LD_VAR 0 1
22850: PPUSH
22851: LD_INT 18
22853: PPUSH
22854: CALL 66533 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
22858: LD_ADDR_VAR 0 2
22862: PUSH
22863: LD_VAR 0 2
22867: PUSH
22868: LD_VAR 0 2
22872: PPUSH
22873: LD_INT 2
22875: PUSH
22876: LD_INT 25
22878: PUSH
22879: LD_INT 1
22881: PUSH
22882: EMPTY
22883: LIST
22884: LIST
22885: PUSH
22886: LD_INT 25
22888: PUSH
22889: LD_INT 5
22891: PUSH
22892: EMPTY
22893: LIST
22894: LIST
22895: PUSH
22896: LD_INT 25
22898: PUSH
22899: LD_INT 8
22901: PUSH
22902: EMPTY
22903: LIST
22904: LIST
22905: PUSH
22906: LD_INT 25
22908: PUSH
22909: LD_INT 9
22911: PUSH
22912: EMPTY
22913: LIST
22914: LIST
22915: PUSH
22916: EMPTY
22917: LIST
22918: LIST
22919: LIST
22920: LIST
22921: LIST
22922: PPUSH
22923: CALL_OW 72
22927: DIFF
22928: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
22929: LD_VAR 0 3
22933: NOT
22934: PUSH
22935: LD_VAR 0 2
22939: PPUSH
22940: LD_INT 21
22942: PUSH
22943: LD_INT 2
22945: PUSH
22946: EMPTY
22947: LIST
22948: LIST
22949: PPUSH
22950: CALL_OW 72
22954: AND
22955: IFFALSE 23293
// begin tmp := FilterByTag ( defenders , 19 ) ;
22957: LD_ADDR_VAR 0 11
22961: PUSH
22962: LD_VAR 0 2
22966: PPUSH
22967: LD_INT 19
22969: PPUSH
22970: CALL 59746 0 2
22974: ST_TO_ADDR
// if tmp then
22975: LD_VAR 0 11
22979: IFFALSE 23049
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
22981: LD_ADDR_VAR 0 11
22985: PUSH
22986: LD_VAR 0 11
22990: PPUSH
22991: LD_INT 25
22993: PUSH
22994: LD_INT 3
22996: PUSH
22997: EMPTY
22998: LIST
22999: LIST
23000: PPUSH
23001: CALL_OW 72
23005: ST_TO_ADDR
// if tmp then
23006: LD_VAR 0 11
23010: IFFALSE 23049
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
23012: LD_ADDR_EXP 48
23016: PUSH
23017: LD_EXP 48
23021: PPUSH
23022: LD_VAR 0 1
23026: PPUSH
23027: LD_EXP 48
23031: PUSH
23032: LD_VAR 0 1
23036: ARRAY
23037: PUSH
23038: LD_VAR 0 11
23042: UNION
23043: PPUSH
23044: CALL_OW 1
23048: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
23049: LD_VAR 0 1
23053: PPUSH
23054: LD_INT 19
23056: PPUSH
23057: CALL 66533 0 2
// repeat wait ( 0 0$1 ) ;
23061: LD_INT 35
23063: PPUSH
23064: CALL_OW 67
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
23068: LD_EXP 36
23072: PUSH
23073: LD_VAR 0 1
23077: ARRAY
23078: NOT
23079: PUSH
23080: LD_EXP 36
23084: PUSH
23085: LD_VAR 0 1
23089: ARRAY
23090: PUSH
23091: EMPTY
23092: EQUAL
23093: OR
23094: IFFALSE 23131
// begin for i in defenders do
23096: LD_ADDR_VAR 0 5
23100: PUSH
23101: LD_VAR 0 2
23105: PUSH
23106: FOR_IN
23107: IFFALSE 23120
// ComStop ( i ) ;
23109: LD_VAR 0 5
23113: PPUSH
23114: CALL_OW 141
23118: GO 23106
23120: POP
23121: POP
// defenders := [ ] ;
23122: LD_ADDR_VAR 0 2
23126: PUSH
23127: EMPTY
23128: ST_TO_ADDR
// exit ;
23129: GO 23317
// end ; for i in defenders do
23131: LD_ADDR_VAR 0 5
23135: PUSH
23136: LD_VAR 0 2
23140: PUSH
23141: FOR_IN
23142: IFFALSE 23231
// begin if not IsInArea ( i , mc_parking [ base ] ) then
23144: LD_VAR 0 5
23148: PPUSH
23149: LD_EXP 60
23153: PUSH
23154: LD_VAR 0 1
23158: ARRAY
23159: PPUSH
23160: CALL_OW 308
23164: NOT
23165: IFFALSE 23189
// ComMoveToArea ( i , mc_parking [ base ] ) else
23167: LD_VAR 0 5
23171: PPUSH
23172: LD_EXP 60
23176: PUSH
23177: LD_VAR 0 1
23181: ARRAY
23182: PPUSH
23183: CALL_OW 113
23187: GO 23229
// if GetControl ( i ) = control_manual then
23189: LD_VAR 0 5
23193: PPUSH
23194: CALL_OW 263
23198: PUSH
23199: LD_INT 1
23201: EQUAL
23202: IFFALSE 23229
// if IsDrivenBy ( i ) then
23204: LD_VAR 0 5
23208: PPUSH
23209: CALL_OW 311
23213: IFFALSE 23229
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
23215: LD_VAR 0 5
23219: PPUSH
23220: CALL_OW 311
23224: PPUSH
23225: CALL_OW 121
// end ;
23229: GO 23141
23231: POP
23232: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] or not mc_bases [ base ] ;
23233: LD_VAR 0 2
23237: PPUSH
23238: LD_INT 95
23240: PUSH
23241: LD_EXP 60
23245: PUSH
23246: LD_VAR 0 1
23250: ARRAY
23251: PUSH
23252: EMPTY
23253: LIST
23254: LIST
23255: PPUSH
23256: CALL_OW 72
23260: PUSH
23261: LD_VAR 0 2
23265: EQUAL
23266: PUSH
23267: LD_EXP 59
23271: PUSH
23272: LD_VAR 0 1
23276: ARRAY
23277: OR
23278: PUSH
23279: LD_EXP 36
23283: PUSH
23284: LD_VAR 0 1
23288: ARRAY
23289: NOT
23290: OR
23291: IFFALSE 23061
// end ; MC_Reset ( base , 19 ) ;
23293: LD_VAR 0 1
23297: PPUSH
23298: LD_INT 19
23300: PPUSH
23301: CALL 66533 0 2
// MC_Reset ( base , 20 ) ;
23305: LD_VAR 0 1
23309: PPUSH
23310: LD_INT 20
23312: PPUSH
23313: CALL 66533 0 2
// end ;
23317: LD_VAR 0 4
23321: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
23322: LD_INT 0
23324: PPUSH
23325: PPUSH
23326: PPUSH
23327: PPUSH
// result := false ;
23328: LD_ADDR_VAR 0 2
23332: PUSH
23333: LD_INT 0
23335: ST_TO_ADDR
// side := GetSide ( unit ) ;
23336: LD_ADDR_VAR 0 3
23340: PUSH
23341: LD_VAR 0 1
23345: PPUSH
23346: CALL_OW 255
23350: ST_TO_ADDR
// nat := GetNation ( unit ) ;
23351: LD_ADDR_VAR 0 4
23355: PUSH
23356: LD_VAR 0 1
23360: PPUSH
23361: CALL_OW 248
23365: ST_TO_ADDR
// case nat of 1 :
23366: LD_VAR 0 4
23370: PUSH
23371: LD_INT 1
23373: DOUBLE
23374: EQUAL
23375: IFTRUE 23379
23377: GO 23390
23379: POP
// tech := tech_lassight ; 2 :
23380: LD_ADDR_VAR 0 5
23384: PUSH
23385: LD_INT 12
23387: ST_TO_ADDR
23388: GO 23429
23390: LD_INT 2
23392: DOUBLE
23393: EQUAL
23394: IFTRUE 23398
23396: GO 23409
23398: POP
// tech := tech_mortar ; 3 :
23399: LD_ADDR_VAR 0 5
23403: PUSH
23404: LD_INT 41
23406: ST_TO_ADDR
23407: GO 23429
23409: LD_INT 3
23411: DOUBLE
23412: EQUAL
23413: IFTRUE 23417
23415: GO 23428
23417: POP
// tech := tech_bazooka ; end ;
23418: LD_ADDR_VAR 0 5
23422: PUSH
23423: LD_INT 44
23425: ST_TO_ADDR
23426: GO 23429
23428: POP
// if Researched ( side , tech ) then
23429: LD_VAR 0 3
23433: PPUSH
23434: LD_VAR 0 5
23438: PPUSH
23439: CALL_OW 325
23443: IFFALSE 23470
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
23445: LD_ADDR_VAR 0 2
23449: PUSH
23450: LD_INT 5
23452: PUSH
23453: LD_INT 8
23455: PUSH
23456: LD_INT 9
23458: PUSH
23459: EMPTY
23460: LIST
23461: LIST
23462: LIST
23463: PUSH
23464: LD_VAR 0 4
23468: ARRAY
23469: ST_TO_ADDR
// end ;
23470: LD_VAR 0 2
23474: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
23475: LD_INT 0
23477: PPUSH
23478: PPUSH
23479: PPUSH
// if not mines then
23480: LD_VAR 0 2
23484: NOT
23485: IFFALSE 23489
// exit ;
23487: GO 23633
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23489: LD_ADDR_VAR 0 5
23493: PUSH
23494: LD_INT 81
23496: PUSH
23497: LD_VAR 0 1
23501: PUSH
23502: EMPTY
23503: LIST
23504: LIST
23505: PUSH
23506: LD_INT 3
23508: PUSH
23509: LD_INT 21
23511: PUSH
23512: LD_INT 3
23514: PUSH
23515: EMPTY
23516: LIST
23517: LIST
23518: PUSH
23519: EMPTY
23520: LIST
23521: LIST
23522: PUSH
23523: EMPTY
23524: LIST
23525: LIST
23526: PPUSH
23527: CALL_OW 69
23531: ST_TO_ADDR
// for i in mines do
23532: LD_ADDR_VAR 0 4
23536: PUSH
23537: LD_VAR 0 2
23541: PUSH
23542: FOR_IN
23543: IFFALSE 23631
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
23545: LD_VAR 0 4
23549: PUSH
23550: LD_INT 1
23552: ARRAY
23553: PPUSH
23554: LD_VAR 0 4
23558: PUSH
23559: LD_INT 2
23561: ARRAY
23562: PPUSH
23563: CALL_OW 458
23567: NOT
23568: IFFALSE 23572
// continue ;
23570: GO 23542
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
23572: LD_VAR 0 4
23576: PUSH
23577: LD_INT 1
23579: ARRAY
23580: PPUSH
23581: LD_VAR 0 4
23585: PUSH
23586: LD_INT 2
23588: ARRAY
23589: PPUSH
23590: CALL_OW 428
23594: PUSH
23595: LD_VAR 0 5
23599: IN
23600: IFFALSE 23629
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
23602: LD_VAR 0 4
23606: PUSH
23607: LD_INT 1
23609: ARRAY
23610: PPUSH
23611: LD_VAR 0 4
23615: PUSH
23616: LD_INT 2
23618: ARRAY
23619: PPUSH
23620: LD_VAR 0 1
23624: PPUSH
23625: CALL_OW 456
// end ;
23629: GO 23542
23631: POP
23632: POP
// end ;
23633: LD_VAR 0 3
23637: RET
// export function Count ( array ) ; var i ; begin
23638: LD_INT 0
23640: PPUSH
23641: PPUSH
// result := 0 ;
23642: LD_ADDR_VAR 0 2
23646: PUSH
23647: LD_INT 0
23649: ST_TO_ADDR
// for i in array do
23650: LD_ADDR_VAR 0 3
23654: PUSH
23655: LD_VAR 0 1
23659: PUSH
23660: FOR_IN
23661: IFFALSE 23685
// if i then
23663: LD_VAR 0 3
23667: IFFALSE 23683
// result := result + 1 ;
23669: LD_ADDR_VAR 0 2
23673: PUSH
23674: LD_VAR 0 2
23678: PUSH
23679: LD_INT 1
23681: PLUS
23682: ST_TO_ADDR
23683: GO 23660
23685: POP
23686: POP
// end ;
23687: LD_VAR 0 2
23691: RET
// export function IsEmpty ( building ) ; begin
23692: LD_INT 0
23694: PPUSH
// if not building then
23695: LD_VAR 0 1
23699: NOT
23700: IFFALSE 23704
// exit ;
23702: GO 23747
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
23704: LD_ADDR_VAR 0 2
23708: PUSH
23709: LD_VAR 0 1
23713: PUSH
23714: LD_INT 22
23716: PUSH
23717: LD_VAR 0 1
23721: PPUSH
23722: CALL_OW 255
23726: PUSH
23727: EMPTY
23728: LIST
23729: LIST
23730: PUSH
23731: LD_INT 58
23733: PUSH
23734: EMPTY
23735: LIST
23736: PUSH
23737: EMPTY
23738: LIST
23739: LIST
23740: PPUSH
23741: CALL_OW 69
23745: IN
23746: ST_TO_ADDR
// end ;
23747: LD_VAR 0 2
23751: RET
// export function IsNotFull ( building ) ; begin
23752: LD_INT 0
23754: PPUSH
// if not building then
23755: LD_VAR 0 1
23759: NOT
23760: IFFALSE 23764
// exit ;
23762: GO 23783
// result := UnitsInside ( building ) < 6 ;
23764: LD_ADDR_VAR 0 2
23768: PUSH
23769: LD_VAR 0 1
23773: PPUSH
23774: CALL_OW 313
23778: PUSH
23779: LD_INT 6
23781: LESS
23782: ST_TO_ADDR
// end ;
23783: LD_VAR 0 2
23787: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
23788: LD_INT 0
23790: PPUSH
23791: PPUSH
23792: PPUSH
23793: PPUSH
// tmp := [ ] ;
23794: LD_ADDR_VAR 0 3
23798: PUSH
23799: EMPTY
23800: ST_TO_ADDR
// list := [ ] ;
23801: LD_ADDR_VAR 0 5
23805: PUSH
23806: EMPTY
23807: ST_TO_ADDR
// for i = 16 to 25 do
23808: LD_ADDR_VAR 0 4
23812: PUSH
23813: DOUBLE
23814: LD_INT 16
23816: DEC
23817: ST_TO_ADDR
23818: LD_INT 25
23820: PUSH
23821: FOR_TO
23822: IFFALSE 23895
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
23824: LD_ADDR_VAR 0 3
23828: PUSH
23829: LD_VAR 0 3
23833: PUSH
23834: LD_INT 22
23836: PUSH
23837: LD_VAR 0 1
23841: PPUSH
23842: CALL_OW 255
23846: PUSH
23847: EMPTY
23848: LIST
23849: LIST
23850: PUSH
23851: LD_INT 91
23853: PUSH
23854: LD_VAR 0 1
23858: PUSH
23859: LD_INT 6
23861: PUSH
23862: EMPTY
23863: LIST
23864: LIST
23865: LIST
23866: PUSH
23867: LD_INT 30
23869: PUSH
23870: LD_VAR 0 4
23874: PUSH
23875: EMPTY
23876: LIST
23877: LIST
23878: PUSH
23879: EMPTY
23880: LIST
23881: LIST
23882: LIST
23883: PUSH
23884: EMPTY
23885: LIST
23886: PPUSH
23887: CALL_OW 69
23891: ADD
23892: ST_TO_ADDR
23893: GO 23821
23895: POP
23896: POP
// for i = 1 to tmp do
23897: LD_ADDR_VAR 0 4
23901: PUSH
23902: DOUBLE
23903: LD_INT 1
23905: DEC
23906: ST_TO_ADDR
23907: LD_VAR 0 3
23911: PUSH
23912: FOR_TO
23913: IFFALSE 24001
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
23915: LD_ADDR_VAR 0 5
23919: PUSH
23920: LD_VAR 0 5
23924: PUSH
23925: LD_VAR 0 3
23929: PUSH
23930: LD_VAR 0 4
23934: ARRAY
23935: PPUSH
23936: CALL_OW 266
23940: PUSH
23941: LD_VAR 0 3
23945: PUSH
23946: LD_VAR 0 4
23950: ARRAY
23951: PPUSH
23952: CALL_OW 250
23956: PUSH
23957: LD_VAR 0 3
23961: PUSH
23962: LD_VAR 0 4
23966: ARRAY
23967: PPUSH
23968: CALL_OW 251
23972: PUSH
23973: LD_VAR 0 3
23977: PUSH
23978: LD_VAR 0 4
23982: ARRAY
23983: PPUSH
23984: CALL_OW 254
23988: PUSH
23989: EMPTY
23990: LIST
23991: LIST
23992: LIST
23993: LIST
23994: PUSH
23995: EMPTY
23996: LIST
23997: ADD
23998: ST_TO_ADDR
23999: GO 23912
24001: POP
24002: POP
// result := list ;
24003: LD_ADDR_VAR 0 2
24007: PUSH
24008: LD_VAR 0 5
24012: ST_TO_ADDR
// end ;
24013: LD_VAR 0 2
24017: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
24018: LD_INT 0
24020: PPUSH
24021: PPUSH
24022: PPUSH
24023: PPUSH
24024: PPUSH
24025: PPUSH
24026: PPUSH
// if not factory then
24027: LD_VAR 0 1
24031: NOT
24032: IFFALSE 24036
// exit ;
24034: GO 24629
// if control = control_apeman then
24036: LD_VAR 0 4
24040: PUSH
24041: LD_INT 5
24043: EQUAL
24044: IFFALSE 24153
// begin tmp := UnitsInside ( factory ) ;
24046: LD_ADDR_VAR 0 8
24050: PUSH
24051: LD_VAR 0 1
24055: PPUSH
24056: CALL_OW 313
24060: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
24061: LD_VAR 0 8
24065: PPUSH
24066: LD_INT 25
24068: PUSH
24069: LD_INT 12
24071: PUSH
24072: EMPTY
24073: LIST
24074: LIST
24075: PPUSH
24076: CALL_OW 72
24080: NOT
24081: IFFALSE 24091
// control := control_manual ;
24083: LD_ADDR_VAR 0 4
24087: PUSH
24088: LD_INT 1
24090: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
24091: LD_ADDR_VAR 0 8
24095: PUSH
24096: LD_VAR 0 1
24100: PPUSH
24101: CALL 23788 0 1
24105: ST_TO_ADDR
// if tmp then
24106: LD_VAR 0 8
24110: IFFALSE 24153
// begin for i in tmp do
24112: LD_ADDR_VAR 0 7
24116: PUSH
24117: LD_VAR 0 8
24121: PUSH
24122: FOR_IN
24123: IFFALSE 24151
// if i [ 1 ] = b_ext_radio then
24125: LD_VAR 0 7
24129: PUSH
24130: LD_INT 1
24132: ARRAY
24133: PUSH
24134: LD_INT 22
24136: EQUAL
24137: IFFALSE 24149
// begin control := control_remote ;
24139: LD_ADDR_VAR 0 4
24143: PUSH
24144: LD_INT 2
24146: ST_TO_ADDR
// break ;
24147: GO 24151
// end ;
24149: GO 24122
24151: POP
24152: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24153: LD_VAR 0 1
24157: PPUSH
24158: LD_VAR 0 2
24162: PPUSH
24163: LD_VAR 0 3
24167: PPUSH
24168: LD_VAR 0 4
24172: PPUSH
24173: LD_VAR 0 5
24177: PPUSH
24178: CALL_OW 448
24182: IFFALSE 24217
// begin result := [ chassis , engine , control , weapon ] ;
24184: LD_ADDR_VAR 0 6
24188: PUSH
24189: LD_VAR 0 2
24193: PUSH
24194: LD_VAR 0 3
24198: PUSH
24199: LD_VAR 0 4
24203: PUSH
24204: LD_VAR 0 5
24208: PUSH
24209: EMPTY
24210: LIST
24211: LIST
24212: LIST
24213: LIST
24214: ST_TO_ADDR
// exit ;
24215: GO 24629
// end ; _chassis := AvailableChassisList ( factory ) ;
24217: LD_ADDR_VAR 0 9
24221: PUSH
24222: LD_VAR 0 1
24226: PPUSH
24227: CALL_OW 475
24231: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
24232: LD_ADDR_VAR 0 11
24236: PUSH
24237: LD_VAR 0 1
24241: PPUSH
24242: CALL_OW 476
24246: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
24247: LD_ADDR_VAR 0 12
24251: PUSH
24252: LD_VAR 0 1
24256: PPUSH
24257: CALL_OW 477
24261: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
24262: LD_ADDR_VAR 0 10
24266: PUSH
24267: LD_VAR 0 1
24271: PPUSH
24272: CALL_OW 478
24276: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
24277: LD_VAR 0 9
24281: NOT
24282: PUSH
24283: LD_VAR 0 11
24287: NOT
24288: OR
24289: PUSH
24290: LD_VAR 0 12
24294: NOT
24295: OR
24296: PUSH
24297: LD_VAR 0 10
24301: NOT
24302: OR
24303: IFFALSE 24338
// begin result := [ chassis , engine , control , weapon ] ;
24305: LD_ADDR_VAR 0 6
24309: PUSH
24310: LD_VAR 0 2
24314: PUSH
24315: LD_VAR 0 3
24319: PUSH
24320: LD_VAR 0 4
24324: PUSH
24325: LD_VAR 0 5
24329: PUSH
24330: EMPTY
24331: LIST
24332: LIST
24333: LIST
24334: LIST
24335: ST_TO_ADDR
// exit ;
24336: GO 24629
// end ; if not chassis in _chassis then
24338: LD_VAR 0 2
24342: PUSH
24343: LD_VAR 0 9
24347: IN
24348: NOT
24349: IFFALSE 24375
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
24351: LD_ADDR_VAR 0 2
24355: PUSH
24356: LD_VAR 0 9
24360: PUSH
24361: LD_INT 1
24363: PPUSH
24364: LD_VAR 0 9
24368: PPUSH
24369: CALL_OW 12
24373: ARRAY
24374: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
24375: LD_VAR 0 2
24379: PPUSH
24380: LD_VAR 0 3
24384: PPUSH
24385: CALL 24634 0 2
24389: NOT
24390: IFFALSE 24449
// repeat engine := _engine [ 1 ] ;
24392: LD_ADDR_VAR 0 3
24396: PUSH
24397: LD_VAR 0 11
24401: PUSH
24402: LD_INT 1
24404: ARRAY
24405: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
24406: LD_ADDR_VAR 0 11
24410: PUSH
24411: LD_VAR 0 11
24415: PPUSH
24416: LD_INT 1
24418: PPUSH
24419: CALL_OW 3
24423: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
24424: LD_VAR 0 2
24428: PPUSH
24429: LD_VAR 0 3
24433: PPUSH
24434: CALL 24634 0 2
24438: PUSH
24439: LD_VAR 0 11
24443: PUSH
24444: EMPTY
24445: EQUAL
24446: OR
24447: IFFALSE 24392
// if not control in _control then
24449: LD_VAR 0 4
24453: PUSH
24454: LD_VAR 0 12
24458: IN
24459: NOT
24460: IFFALSE 24486
// control := _control [ rand ( 1 , _control ) ] ;
24462: LD_ADDR_VAR 0 4
24466: PUSH
24467: LD_VAR 0 12
24471: PUSH
24472: LD_INT 1
24474: PPUSH
24475: LD_VAR 0 12
24479: PPUSH
24480: CALL_OW 12
24484: ARRAY
24485: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
24486: LD_VAR 0 2
24490: PPUSH
24491: LD_VAR 0 5
24495: PPUSH
24496: CALL 24854 0 2
24500: NOT
24501: IFFALSE 24560
// repeat weapon := _weapon [ 1 ] ;
24503: LD_ADDR_VAR 0 5
24507: PUSH
24508: LD_VAR 0 10
24512: PUSH
24513: LD_INT 1
24515: ARRAY
24516: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
24517: LD_ADDR_VAR 0 10
24521: PUSH
24522: LD_VAR 0 10
24526: PPUSH
24527: LD_INT 1
24529: PPUSH
24530: CALL_OW 3
24534: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
24535: LD_VAR 0 2
24539: PPUSH
24540: LD_VAR 0 5
24544: PPUSH
24545: CALL 24854 0 2
24549: PUSH
24550: LD_VAR 0 10
24554: PUSH
24555: EMPTY
24556: EQUAL
24557: OR
24558: IFFALSE 24503
// result := [ ] ;
24560: LD_ADDR_VAR 0 6
24564: PUSH
24565: EMPTY
24566: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24567: LD_VAR 0 1
24571: PPUSH
24572: LD_VAR 0 2
24576: PPUSH
24577: LD_VAR 0 3
24581: PPUSH
24582: LD_VAR 0 4
24586: PPUSH
24587: LD_VAR 0 5
24591: PPUSH
24592: CALL_OW 448
24596: IFFALSE 24629
// result := [ chassis , engine , control , weapon ] ;
24598: LD_ADDR_VAR 0 6
24602: PUSH
24603: LD_VAR 0 2
24607: PUSH
24608: LD_VAR 0 3
24612: PUSH
24613: LD_VAR 0 4
24617: PUSH
24618: LD_VAR 0 5
24622: PUSH
24623: EMPTY
24624: LIST
24625: LIST
24626: LIST
24627: LIST
24628: ST_TO_ADDR
// end ;
24629: LD_VAR 0 6
24633: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
24634: LD_INT 0
24636: PPUSH
// if not chassis or not engine then
24637: LD_VAR 0 1
24641: NOT
24642: PUSH
24643: LD_VAR 0 2
24647: NOT
24648: OR
24649: IFFALSE 24653
// exit ;
24651: GO 24849
// case engine of engine_solar :
24653: LD_VAR 0 2
24657: PUSH
24658: LD_INT 2
24660: DOUBLE
24661: EQUAL
24662: IFTRUE 24666
24664: GO 24704
24666: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
24667: LD_ADDR_VAR 0 3
24671: PUSH
24672: LD_INT 11
24674: PUSH
24675: LD_INT 12
24677: PUSH
24678: LD_INT 13
24680: PUSH
24681: LD_INT 14
24683: PUSH
24684: LD_INT 1
24686: PUSH
24687: LD_INT 2
24689: PUSH
24690: LD_INT 3
24692: PUSH
24693: EMPTY
24694: LIST
24695: LIST
24696: LIST
24697: LIST
24698: LIST
24699: LIST
24700: LIST
24701: ST_TO_ADDR
24702: GO 24833
24704: LD_INT 1
24706: DOUBLE
24707: EQUAL
24708: IFTRUE 24712
24710: GO 24774
24712: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
24713: LD_ADDR_VAR 0 3
24717: PUSH
24718: LD_INT 11
24720: PUSH
24721: LD_INT 12
24723: PUSH
24724: LD_INT 13
24726: PUSH
24727: LD_INT 14
24729: PUSH
24730: LD_INT 1
24732: PUSH
24733: LD_INT 2
24735: PUSH
24736: LD_INT 3
24738: PUSH
24739: LD_INT 4
24741: PUSH
24742: LD_INT 5
24744: PUSH
24745: LD_INT 21
24747: PUSH
24748: LD_INT 23
24750: PUSH
24751: LD_INT 22
24753: PUSH
24754: LD_INT 24
24756: PUSH
24757: EMPTY
24758: LIST
24759: LIST
24760: LIST
24761: LIST
24762: LIST
24763: LIST
24764: LIST
24765: LIST
24766: LIST
24767: LIST
24768: LIST
24769: LIST
24770: LIST
24771: ST_TO_ADDR
24772: GO 24833
24774: LD_INT 3
24776: DOUBLE
24777: EQUAL
24778: IFTRUE 24782
24780: GO 24832
24782: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24783: LD_ADDR_VAR 0 3
24787: PUSH
24788: LD_INT 13
24790: PUSH
24791: LD_INT 14
24793: PUSH
24794: LD_INT 2
24796: PUSH
24797: LD_INT 3
24799: PUSH
24800: LD_INT 4
24802: PUSH
24803: LD_INT 5
24805: PUSH
24806: LD_INT 21
24808: PUSH
24809: LD_INT 22
24811: PUSH
24812: LD_INT 23
24814: PUSH
24815: LD_INT 24
24817: PUSH
24818: EMPTY
24819: LIST
24820: LIST
24821: LIST
24822: LIST
24823: LIST
24824: LIST
24825: LIST
24826: LIST
24827: LIST
24828: LIST
24829: ST_TO_ADDR
24830: GO 24833
24832: POP
// result := ( chassis in result ) ;
24833: LD_ADDR_VAR 0 3
24837: PUSH
24838: LD_VAR 0 1
24842: PUSH
24843: LD_VAR 0 3
24847: IN
24848: ST_TO_ADDR
// end ;
24849: LD_VAR 0 3
24853: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
24854: LD_INT 0
24856: PPUSH
// if not chassis or not weapon then
24857: LD_VAR 0 1
24861: NOT
24862: PUSH
24863: LD_VAR 0 2
24867: NOT
24868: OR
24869: IFFALSE 24873
// exit ;
24871: GO 25899
// case weapon of us_machine_gun :
24873: LD_VAR 0 2
24877: PUSH
24878: LD_INT 2
24880: DOUBLE
24881: EQUAL
24882: IFTRUE 24886
24884: GO 24916
24886: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
24887: LD_ADDR_VAR 0 3
24891: PUSH
24892: LD_INT 1
24894: PUSH
24895: LD_INT 2
24897: PUSH
24898: LD_INT 3
24900: PUSH
24901: LD_INT 4
24903: PUSH
24904: LD_INT 5
24906: PUSH
24907: EMPTY
24908: LIST
24909: LIST
24910: LIST
24911: LIST
24912: LIST
24913: ST_TO_ADDR
24914: GO 25883
24916: LD_INT 3
24918: DOUBLE
24919: EQUAL
24920: IFTRUE 24924
24922: GO 24954
24924: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
24925: LD_ADDR_VAR 0 3
24929: PUSH
24930: LD_INT 1
24932: PUSH
24933: LD_INT 2
24935: PUSH
24936: LD_INT 3
24938: PUSH
24939: LD_INT 4
24941: PUSH
24942: LD_INT 5
24944: PUSH
24945: EMPTY
24946: LIST
24947: LIST
24948: LIST
24949: LIST
24950: LIST
24951: ST_TO_ADDR
24952: GO 25883
24954: LD_INT 11
24956: DOUBLE
24957: EQUAL
24958: IFTRUE 24962
24960: GO 24992
24962: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
24963: LD_ADDR_VAR 0 3
24967: PUSH
24968: LD_INT 1
24970: PUSH
24971: LD_INT 2
24973: PUSH
24974: LD_INT 3
24976: PUSH
24977: LD_INT 4
24979: PUSH
24980: LD_INT 5
24982: PUSH
24983: EMPTY
24984: LIST
24985: LIST
24986: LIST
24987: LIST
24988: LIST
24989: ST_TO_ADDR
24990: GO 25883
24992: LD_INT 4
24994: DOUBLE
24995: EQUAL
24996: IFTRUE 25000
24998: GO 25026
25000: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
25001: LD_ADDR_VAR 0 3
25005: PUSH
25006: LD_INT 2
25008: PUSH
25009: LD_INT 3
25011: PUSH
25012: LD_INT 4
25014: PUSH
25015: LD_INT 5
25017: PUSH
25018: EMPTY
25019: LIST
25020: LIST
25021: LIST
25022: LIST
25023: ST_TO_ADDR
25024: GO 25883
25026: LD_INT 5
25028: DOUBLE
25029: EQUAL
25030: IFTRUE 25034
25032: GO 25060
25034: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
25035: LD_ADDR_VAR 0 3
25039: PUSH
25040: LD_INT 2
25042: PUSH
25043: LD_INT 3
25045: PUSH
25046: LD_INT 4
25048: PUSH
25049: LD_INT 5
25051: PUSH
25052: EMPTY
25053: LIST
25054: LIST
25055: LIST
25056: LIST
25057: ST_TO_ADDR
25058: GO 25883
25060: LD_INT 9
25062: DOUBLE
25063: EQUAL
25064: IFTRUE 25068
25066: GO 25094
25068: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
25069: LD_ADDR_VAR 0 3
25073: PUSH
25074: LD_INT 2
25076: PUSH
25077: LD_INT 3
25079: PUSH
25080: LD_INT 4
25082: PUSH
25083: LD_INT 5
25085: PUSH
25086: EMPTY
25087: LIST
25088: LIST
25089: LIST
25090: LIST
25091: ST_TO_ADDR
25092: GO 25883
25094: LD_INT 7
25096: DOUBLE
25097: EQUAL
25098: IFTRUE 25102
25100: GO 25128
25102: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
25103: LD_ADDR_VAR 0 3
25107: PUSH
25108: LD_INT 2
25110: PUSH
25111: LD_INT 3
25113: PUSH
25114: LD_INT 4
25116: PUSH
25117: LD_INT 5
25119: PUSH
25120: EMPTY
25121: LIST
25122: LIST
25123: LIST
25124: LIST
25125: ST_TO_ADDR
25126: GO 25883
25128: LD_INT 12
25130: DOUBLE
25131: EQUAL
25132: IFTRUE 25136
25134: GO 25162
25136: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
25137: LD_ADDR_VAR 0 3
25141: PUSH
25142: LD_INT 2
25144: PUSH
25145: LD_INT 3
25147: PUSH
25148: LD_INT 4
25150: PUSH
25151: LD_INT 5
25153: PUSH
25154: EMPTY
25155: LIST
25156: LIST
25157: LIST
25158: LIST
25159: ST_TO_ADDR
25160: GO 25883
25162: LD_INT 13
25164: DOUBLE
25165: EQUAL
25166: IFTRUE 25170
25168: GO 25196
25170: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
25171: LD_ADDR_VAR 0 3
25175: PUSH
25176: LD_INT 2
25178: PUSH
25179: LD_INT 3
25181: PUSH
25182: LD_INT 4
25184: PUSH
25185: LD_INT 5
25187: PUSH
25188: EMPTY
25189: LIST
25190: LIST
25191: LIST
25192: LIST
25193: ST_TO_ADDR
25194: GO 25883
25196: LD_INT 14
25198: DOUBLE
25199: EQUAL
25200: IFTRUE 25204
25202: GO 25222
25204: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
25205: LD_ADDR_VAR 0 3
25209: PUSH
25210: LD_INT 4
25212: PUSH
25213: LD_INT 5
25215: PUSH
25216: EMPTY
25217: LIST
25218: LIST
25219: ST_TO_ADDR
25220: GO 25883
25222: LD_INT 6
25224: DOUBLE
25225: EQUAL
25226: IFTRUE 25230
25228: GO 25248
25230: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
25231: LD_ADDR_VAR 0 3
25235: PUSH
25236: LD_INT 4
25238: PUSH
25239: LD_INT 5
25241: PUSH
25242: EMPTY
25243: LIST
25244: LIST
25245: ST_TO_ADDR
25246: GO 25883
25248: LD_INT 10
25250: DOUBLE
25251: EQUAL
25252: IFTRUE 25256
25254: GO 25274
25256: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
25257: LD_ADDR_VAR 0 3
25261: PUSH
25262: LD_INT 4
25264: PUSH
25265: LD_INT 5
25267: PUSH
25268: EMPTY
25269: LIST
25270: LIST
25271: ST_TO_ADDR
25272: GO 25883
25274: LD_INT 22
25276: DOUBLE
25277: EQUAL
25278: IFTRUE 25282
25280: GO 25308
25282: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
25283: LD_ADDR_VAR 0 3
25287: PUSH
25288: LD_INT 11
25290: PUSH
25291: LD_INT 12
25293: PUSH
25294: LD_INT 13
25296: PUSH
25297: LD_INT 14
25299: PUSH
25300: EMPTY
25301: LIST
25302: LIST
25303: LIST
25304: LIST
25305: ST_TO_ADDR
25306: GO 25883
25308: LD_INT 23
25310: DOUBLE
25311: EQUAL
25312: IFTRUE 25316
25314: GO 25342
25316: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
25317: LD_ADDR_VAR 0 3
25321: PUSH
25322: LD_INT 11
25324: PUSH
25325: LD_INT 12
25327: PUSH
25328: LD_INT 13
25330: PUSH
25331: LD_INT 14
25333: PUSH
25334: EMPTY
25335: LIST
25336: LIST
25337: LIST
25338: LIST
25339: ST_TO_ADDR
25340: GO 25883
25342: LD_INT 24
25344: DOUBLE
25345: EQUAL
25346: IFTRUE 25350
25348: GO 25376
25350: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
25351: LD_ADDR_VAR 0 3
25355: PUSH
25356: LD_INT 11
25358: PUSH
25359: LD_INT 12
25361: PUSH
25362: LD_INT 13
25364: PUSH
25365: LD_INT 14
25367: PUSH
25368: EMPTY
25369: LIST
25370: LIST
25371: LIST
25372: LIST
25373: ST_TO_ADDR
25374: GO 25883
25376: LD_INT 30
25378: DOUBLE
25379: EQUAL
25380: IFTRUE 25384
25382: GO 25410
25384: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
25385: LD_ADDR_VAR 0 3
25389: PUSH
25390: LD_INT 11
25392: PUSH
25393: LD_INT 12
25395: PUSH
25396: LD_INT 13
25398: PUSH
25399: LD_INT 14
25401: PUSH
25402: EMPTY
25403: LIST
25404: LIST
25405: LIST
25406: LIST
25407: ST_TO_ADDR
25408: GO 25883
25410: LD_INT 25
25412: DOUBLE
25413: EQUAL
25414: IFTRUE 25418
25416: GO 25436
25418: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
25419: LD_ADDR_VAR 0 3
25423: PUSH
25424: LD_INT 13
25426: PUSH
25427: LD_INT 14
25429: PUSH
25430: EMPTY
25431: LIST
25432: LIST
25433: ST_TO_ADDR
25434: GO 25883
25436: LD_INT 27
25438: DOUBLE
25439: EQUAL
25440: IFTRUE 25444
25442: GO 25462
25444: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
25445: LD_ADDR_VAR 0 3
25449: PUSH
25450: LD_INT 13
25452: PUSH
25453: LD_INT 14
25455: PUSH
25456: EMPTY
25457: LIST
25458: LIST
25459: ST_TO_ADDR
25460: GO 25883
25462: LD_INT 28
25464: DOUBLE
25465: EQUAL
25466: IFTRUE 25470
25468: GO 25488
25470: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
25471: LD_ADDR_VAR 0 3
25475: PUSH
25476: LD_INT 13
25478: PUSH
25479: LD_INT 14
25481: PUSH
25482: EMPTY
25483: LIST
25484: LIST
25485: ST_TO_ADDR
25486: GO 25883
25488: LD_INT 29
25490: DOUBLE
25491: EQUAL
25492: IFTRUE 25496
25494: GO 25514
25496: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
25497: LD_ADDR_VAR 0 3
25501: PUSH
25502: LD_INT 13
25504: PUSH
25505: LD_INT 14
25507: PUSH
25508: EMPTY
25509: LIST
25510: LIST
25511: ST_TO_ADDR
25512: GO 25883
25514: LD_INT 31
25516: DOUBLE
25517: EQUAL
25518: IFTRUE 25522
25520: GO 25540
25522: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
25523: LD_ADDR_VAR 0 3
25527: PUSH
25528: LD_INT 13
25530: PUSH
25531: LD_INT 14
25533: PUSH
25534: EMPTY
25535: LIST
25536: LIST
25537: ST_TO_ADDR
25538: GO 25883
25540: LD_INT 26
25542: DOUBLE
25543: EQUAL
25544: IFTRUE 25548
25546: GO 25566
25548: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
25549: LD_ADDR_VAR 0 3
25553: PUSH
25554: LD_INT 13
25556: PUSH
25557: LD_INT 14
25559: PUSH
25560: EMPTY
25561: LIST
25562: LIST
25563: ST_TO_ADDR
25564: GO 25883
25566: LD_INT 42
25568: DOUBLE
25569: EQUAL
25570: IFTRUE 25574
25572: GO 25600
25574: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
25575: LD_ADDR_VAR 0 3
25579: PUSH
25580: LD_INT 21
25582: PUSH
25583: LD_INT 22
25585: PUSH
25586: LD_INT 23
25588: PUSH
25589: LD_INT 24
25591: PUSH
25592: EMPTY
25593: LIST
25594: LIST
25595: LIST
25596: LIST
25597: ST_TO_ADDR
25598: GO 25883
25600: LD_INT 43
25602: DOUBLE
25603: EQUAL
25604: IFTRUE 25608
25606: GO 25634
25608: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
25609: LD_ADDR_VAR 0 3
25613: PUSH
25614: LD_INT 21
25616: PUSH
25617: LD_INT 22
25619: PUSH
25620: LD_INT 23
25622: PUSH
25623: LD_INT 24
25625: PUSH
25626: EMPTY
25627: LIST
25628: LIST
25629: LIST
25630: LIST
25631: ST_TO_ADDR
25632: GO 25883
25634: LD_INT 44
25636: DOUBLE
25637: EQUAL
25638: IFTRUE 25642
25640: GO 25668
25642: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
25643: LD_ADDR_VAR 0 3
25647: PUSH
25648: LD_INT 21
25650: PUSH
25651: LD_INT 22
25653: PUSH
25654: LD_INT 23
25656: PUSH
25657: LD_INT 24
25659: PUSH
25660: EMPTY
25661: LIST
25662: LIST
25663: LIST
25664: LIST
25665: ST_TO_ADDR
25666: GO 25883
25668: LD_INT 45
25670: DOUBLE
25671: EQUAL
25672: IFTRUE 25676
25674: GO 25702
25676: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
25677: LD_ADDR_VAR 0 3
25681: PUSH
25682: LD_INT 21
25684: PUSH
25685: LD_INT 22
25687: PUSH
25688: LD_INT 23
25690: PUSH
25691: LD_INT 24
25693: PUSH
25694: EMPTY
25695: LIST
25696: LIST
25697: LIST
25698: LIST
25699: ST_TO_ADDR
25700: GO 25883
25702: LD_INT 49
25704: DOUBLE
25705: EQUAL
25706: IFTRUE 25710
25708: GO 25736
25710: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
25711: LD_ADDR_VAR 0 3
25715: PUSH
25716: LD_INT 21
25718: PUSH
25719: LD_INT 22
25721: PUSH
25722: LD_INT 23
25724: PUSH
25725: LD_INT 24
25727: PUSH
25728: EMPTY
25729: LIST
25730: LIST
25731: LIST
25732: LIST
25733: ST_TO_ADDR
25734: GO 25883
25736: LD_INT 51
25738: DOUBLE
25739: EQUAL
25740: IFTRUE 25744
25742: GO 25770
25744: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
25745: LD_ADDR_VAR 0 3
25749: PUSH
25750: LD_INT 21
25752: PUSH
25753: LD_INT 22
25755: PUSH
25756: LD_INT 23
25758: PUSH
25759: LD_INT 24
25761: PUSH
25762: EMPTY
25763: LIST
25764: LIST
25765: LIST
25766: LIST
25767: ST_TO_ADDR
25768: GO 25883
25770: LD_INT 52
25772: DOUBLE
25773: EQUAL
25774: IFTRUE 25778
25776: GO 25804
25778: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
25779: LD_ADDR_VAR 0 3
25783: PUSH
25784: LD_INT 21
25786: PUSH
25787: LD_INT 22
25789: PUSH
25790: LD_INT 23
25792: PUSH
25793: LD_INT 24
25795: PUSH
25796: EMPTY
25797: LIST
25798: LIST
25799: LIST
25800: LIST
25801: ST_TO_ADDR
25802: GO 25883
25804: LD_INT 53
25806: DOUBLE
25807: EQUAL
25808: IFTRUE 25812
25810: GO 25830
25812: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
25813: LD_ADDR_VAR 0 3
25817: PUSH
25818: LD_INT 23
25820: PUSH
25821: LD_INT 24
25823: PUSH
25824: EMPTY
25825: LIST
25826: LIST
25827: ST_TO_ADDR
25828: GO 25883
25830: LD_INT 46
25832: DOUBLE
25833: EQUAL
25834: IFTRUE 25838
25836: GO 25856
25838: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
25839: LD_ADDR_VAR 0 3
25843: PUSH
25844: LD_INT 23
25846: PUSH
25847: LD_INT 24
25849: PUSH
25850: EMPTY
25851: LIST
25852: LIST
25853: ST_TO_ADDR
25854: GO 25883
25856: LD_INT 47
25858: DOUBLE
25859: EQUAL
25860: IFTRUE 25864
25862: GO 25882
25864: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25865: LD_ADDR_VAR 0 3
25869: PUSH
25870: LD_INT 23
25872: PUSH
25873: LD_INT 24
25875: PUSH
25876: EMPTY
25877: LIST
25878: LIST
25879: ST_TO_ADDR
25880: GO 25883
25882: POP
// result := ( chassis in result ) ;
25883: LD_ADDR_VAR 0 3
25887: PUSH
25888: LD_VAR 0 1
25892: PUSH
25893: LD_VAR 0 3
25897: IN
25898: ST_TO_ADDR
// end ;
25899: LD_VAR 0 3
25903: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
25904: LD_INT 0
25906: PPUSH
25907: PPUSH
25908: PPUSH
25909: PPUSH
25910: PPUSH
25911: PPUSH
25912: PPUSH
// result := array ;
25913: LD_ADDR_VAR 0 5
25917: PUSH
25918: LD_VAR 0 1
25922: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
25923: LD_VAR 0 1
25927: NOT
25928: PUSH
25929: LD_VAR 0 2
25933: NOT
25934: OR
25935: PUSH
25936: LD_VAR 0 3
25940: NOT
25941: OR
25942: PUSH
25943: LD_VAR 0 2
25947: PUSH
25948: LD_VAR 0 1
25952: GREATER
25953: OR
25954: PUSH
25955: LD_VAR 0 3
25959: PUSH
25960: LD_VAR 0 1
25964: GREATER
25965: OR
25966: IFFALSE 25970
// exit ;
25968: GO 26266
// if direction then
25970: LD_VAR 0 4
25974: IFFALSE 26038
// begin d := 1 ;
25976: LD_ADDR_VAR 0 9
25980: PUSH
25981: LD_INT 1
25983: ST_TO_ADDR
// if i_from > i_to then
25984: LD_VAR 0 2
25988: PUSH
25989: LD_VAR 0 3
25993: GREATER
25994: IFFALSE 26020
// length := ( array - i_from ) + i_to else
25996: LD_ADDR_VAR 0 11
26000: PUSH
26001: LD_VAR 0 1
26005: PUSH
26006: LD_VAR 0 2
26010: MINUS
26011: PUSH
26012: LD_VAR 0 3
26016: PLUS
26017: ST_TO_ADDR
26018: GO 26036
// length := i_to - i_from ;
26020: LD_ADDR_VAR 0 11
26024: PUSH
26025: LD_VAR 0 3
26029: PUSH
26030: LD_VAR 0 2
26034: MINUS
26035: ST_TO_ADDR
// end else
26036: GO 26099
// begin d := - 1 ;
26038: LD_ADDR_VAR 0 9
26042: PUSH
26043: LD_INT 1
26045: NEG
26046: ST_TO_ADDR
// if i_from > i_to then
26047: LD_VAR 0 2
26051: PUSH
26052: LD_VAR 0 3
26056: GREATER
26057: IFFALSE 26077
// length := i_from - i_to else
26059: LD_ADDR_VAR 0 11
26063: PUSH
26064: LD_VAR 0 2
26068: PUSH
26069: LD_VAR 0 3
26073: MINUS
26074: ST_TO_ADDR
26075: GO 26099
// length := ( array - i_to ) + i_from ;
26077: LD_ADDR_VAR 0 11
26081: PUSH
26082: LD_VAR 0 1
26086: PUSH
26087: LD_VAR 0 3
26091: MINUS
26092: PUSH
26093: LD_VAR 0 2
26097: PLUS
26098: ST_TO_ADDR
// end ; if not length then
26099: LD_VAR 0 11
26103: NOT
26104: IFFALSE 26108
// exit ;
26106: GO 26266
// tmp := array ;
26108: LD_ADDR_VAR 0 10
26112: PUSH
26113: LD_VAR 0 1
26117: ST_TO_ADDR
// for i = 1 to length do
26118: LD_ADDR_VAR 0 6
26122: PUSH
26123: DOUBLE
26124: LD_INT 1
26126: DEC
26127: ST_TO_ADDR
26128: LD_VAR 0 11
26132: PUSH
26133: FOR_TO
26134: IFFALSE 26254
// begin for j = 1 to array do
26136: LD_ADDR_VAR 0 7
26140: PUSH
26141: DOUBLE
26142: LD_INT 1
26144: DEC
26145: ST_TO_ADDR
26146: LD_VAR 0 1
26150: PUSH
26151: FOR_TO
26152: IFFALSE 26240
// begin k := j + d ;
26154: LD_ADDR_VAR 0 8
26158: PUSH
26159: LD_VAR 0 7
26163: PUSH
26164: LD_VAR 0 9
26168: PLUS
26169: ST_TO_ADDR
// if k > array then
26170: LD_VAR 0 8
26174: PUSH
26175: LD_VAR 0 1
26179: GREATER
26180: IFFALSE 26190
// k := 1 ;
26182: LD_ADDR_VAR 0 8
26186: PUSH
26187: LD_INT 1
26189: ST_TO_ADDR
// if not k then
26190: LD_VAR 0 8
26194: NOT
26195: IFFALSE 26207
// k := array ;
26197: LD_ADDR_VAR 0 8
26201: PUSH
26202: LD_VAR 0 1
26206: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
26207: LD_ADDR_VAR 0 10
26211: PUSH
26212: LD_VAR 0 10
26216: PPUSH
26217: LD_VAR 0 8
26221: PPUSH
26222: LD_VAR 0 1
26226: PUSH
26227: LD_VAR 0 7
26231: ARRAY
26232: PPUSH
26233: CALL_OW 1
26237: ST_TO_ADDR
// end ;
26238: GO 26151
26240: POP
26241: POP
// array := tmp ;
26242: LD_ADDR_VAR 0 1
26246: PUSH
26247: LD_VAR 0 10
26251: ST_TO_ADDR
// end ;
26252: GO 26133
26254: POP
26255: POP
// result := array ;
26256: LD_ADDR_VAR 0 5
26260: PUSH
26261: LD_VAR 0 1
26265: ST_TO_ADDR
// end ;
26266: LD_VAR 0 5
26270: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
26271: LD_INT 0
26273: PPUSH
26274: PPUSH
// result := 0 ;
26275: LD_ADDR_VAR 0 3
26279: PUSH
26280: LD_INT 0
26282: ST_TO_ADDR
// if not array or not value in array then
26283: LD_VAR 0 1
26287: NOT
26288: PUSH
26289: LD_VAR 0 2
26293: PUSH
26294: LD_VAR 0 1
26298: IN
26299: NOT
26300: OR
26301: IFFALSE 26305
// exit ;
26303: GO 26359
// for i = 1 to array do
26305: LD_ADDR_VAR 0 4
26309: PUSH
26310: DOUBLE
26311: LD_INT 1
26313: DEC
26314: ST_TO_ADDR
26315: LD_VAR 0 1
26319: PUSH
26320: FOR_TO
26321: IFFALSE 26357
// if value = array [ i ] then
26323: LD_VAR 0 2
26327: PUSH
26328: LD_VAR 0 1
26332: PUSH
26333: LD_VAR 0 4
26337: ARRAY
26338: EQUAL
26339: IFFALSE 26355
// begin result := i ;
26341: LD_ADDR_VAR 0 3
26345: PUSH
26346: LD_VAR 0 4
26350: ST_TO_ADDR
// exit ;
26351: POP
26352: POP
26353: GO 26359
// end ;
26355: GO 26320
26357: POP
26358: POP
// end ;
26359: LD_VAR 0 3
26363: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
26364: LD_INT 0
26366: PPUSH
// vc_chassis := chassis ;
26367: LD_ADDR_OWVAR 37
26371: PUSH
26372: LD_VAR 0 1
26376: ST_TO_ADDR
// vc_engine := engine ;
26377: LD_ADDR_OWVAR 39
26381: PUSH
26382: LD_VAR 0 2
26386: ST_TO_ADDR
// vc_control := control ;
26387: LD_ADDR_OWVAR 38
26391: PUSH
26392: LD_VAR 0 3
26396: ST_TO_ADDR
// vc_weapon := weapon ;
26397: LD_ADDR_OWVAR 40
26401: PUSH
26402: LD_VAR 0 4
26406: ST_TO_ADDR
// vc_fuel_battery := fuel ;
26407: LD_ADDR_OWVAR 41
26411: PUSH
26412: LD_VAR 0 5
26416: ST_TO_ADDR
// end ;
26417: LD_VAR 0 6
26421: RET
// export function WantPlant ( unit ) ; var task ; begin
26422: LD_INT 0
26424: PPUSH
26425: PPUSH
// result := false ;
26426: LD_ADDR_VAR 0 2
26430: PUSH
26431: LD_INT 0
26433: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
26434: LD_ADDR_VAR 0 3
26438: PUSH
26439: LD_VAR 0 1
26443: PPUSH
26444: CALL_OW 437
26448: ST_TO_ADDR
// if task then
26449: LD_VAR 0 3
26453: IFFALSE 26481
// if task [ 1 ] [ 1 ] = p then
26455: LD_VAR 0 3
26459: PUSH
26460: LD_INT 1
26462: ARRAY
26463: PUSH
26464: LD_INT 1
26466: ARRAY
26467: PUSH
26468: LD_STRING p
26470: EQUAL
26471: IFFALSE 26481
// result := true ;
26473: LD_ADDR_VAR 0 2
26477: PUSH
26478: LD_INT 1
26480: ST_TO_ADDR
// end ;
26481: LD_VAR 0 2
26485: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
26486: LD_INT 0
26488: PPUSH
26489: PPUSH
26490: PPUSH
26491: PPUSH
// if pos < 1 then
26492: LD_VAR 0 2
26496: PUSH
26497: LD_INT 1
26499: LESS
26500: IFFALSE 26504
// exit ;
26502: GO 26807
// if pos = 1 then
26504: LD_VAR 0 2
26508: PUSH
26509: LD_INT 1
26511: EQUAL
26512: IFFALSE 26545
// result := Replace ( arr , pos [ 1 ] , value ) else
26514: LD_ADDR_VAR 0 4
26518: PUSH
26519: LD_VAR 0 1
26523: PPUSH
26524: LD_VAR 0 2
26528: PUSH
26529: LD_INT 1
26531: ARRAY
26532: PPUSH
26533: LD_VAR 0 3
26537: PPUSH
26538: CALL_OW 1
26542: ST_TO_ADDR
26543: GO 26807
// begin tmp := arr ;
26545: LD_ADDR_VAR 0 6
26549: PUSH
26550: LD_VAR 0 1
26554: ST_TO_ADDR
// s_arr := [ tmp ] ;
26555: LD_ADDR_VAR 0 7
26559: PUSH
26560: LD_VAR 0 6
26564: PUSH
26565: EMPTY
26566: LIST
26567: ST_TO_ADDR
// for i = 1 to pos - 1 do
26568: LD_ADDR_VAR 0 5
26572: PUSH
26573: DOUBLE
26574: LD_INT 1
26576: DEC
26577: ST_TO_ADDR
26578: LD_VAR 0 2
26582: PUSH
26583: LD_INT 1
26585: MINUS
26586: PUSH
26587: FOR_TO
26588: IFFALSE 26633
// begin tmp := tmp [ pos [ i ] ] ;
26590: LD_ADDR_VAR 0 6
26594: PUSH
26595: LD_VAR 0 6
26599: PUSH
26600: LD_VAR 0 2
26604: PUSH
26605: LD_VAR 0 5
26609: ARRAY
26610: ARRAY
26611: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
26612: LD_ADDR_VAR 0 7
26616: PUSH
26617: LD_VAR 0 7
26621: PUSH
26622: LD_VAR 0 6
26626: PUSH
26627: EMPTY
26628: LIST
26629: ADD
26630: ST_TO_ADDR
// end ;
26631: GO 26587
26633: POP
26634: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
26635: LD_ADDR_VAR 0 6
26639: PUSH
26640: LD_VAR 0 6
26644: PPUSH
26645: LD_VAR 0 2
26649: PUSH
26650: LD_VAR 0 2
26654: ARRAY
26655: PPUSH
26656: LD_VAR 0 3
26660: PPUSH
26661: CALL_OW 1
26665: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
26666: LD_ADDR_VAR 0 7
26670: PUSH
26671: LD_VAR 0 7
26675: PPUSH
26676: LD_VAR 0 7
26680: PPUSH
26681: LD_VAR 0 6
26685: PPUSH
26686: CALL_OW 1
26690: ST_TO_ADDR
// for i = s_arr downto 2 do
26691: LD_ADDR_VAR 0 5
26695: PUSH
26696: DOUBLE
26697: LD_VAR 0 7
26701: INC
26702: ST_TO_ADDR
26703: LD_INT 2
26705: PUSH
26706: FOR_DOWNTO
26707: IFFALSE 26791
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
26709: LD_ADDR_VAR 0 6
26713: PUSH
26714: LD_VAR 0 7
26718: PUSH
26719: LD_VAR 0 5
26723: PUSH
26724: LD_INT 1
26726: MINUS
26727: ARRAY
26728: PPUSH
26729: LD_VAR 0 2
26733: PUSH
26734: LD_VAR 0 5
26738: PUSH
26739: LD_INT 1
26741: MINUS
26742: ARRAY
26743: PPUSH
26744: LD_VAR 0 7
26748: PUSH
26749: LD_VAR 0 5
26753: ARRAY
26754: PPUSH
26755: CALL_OW 1
26759: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
26760: LD_ADDR_VAR 0 7
26764: PUSH
26765: LD_VAR 0 7
26769: PPUSH
26770: LD_VAR 0 5
26774: PUSH
26775: LD_INT 1
26777: MINUS
26778: PPUSH
26779: LD_VAR 0 6
26783: PPUSH
26784: CALL_OW 1
26788: ST_TO_ADDR
// end ;
26789: GO 26706
26791: POP
26792: POP
// result := s_arr [ 1 ] ;
26793: LD_ADDR_VAR 0 4
26797: PUSH
26798: LD_VAR 0 7
26802: PUSH
26803: LD_INT 1
26805: ARRAY
26806: ST_TO_ADDR
// end ; end ;
26807: LD_VAR 0 4
26811: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
26812: LD_INT 0
26814: PPUSH
26815: PPUSH
// if not list then
26816: LD_VAR 0 1
26820: NOT
26821: IFFALSE 26825
// exit ;
26823: GO 26916
// i := list [ pos1 ] ;
26825: LD_ADDR_VAR 0 5
26829: PUSH
26830: LD_VAR 0 1
26834: PUSH
26835: LD_VAR 0 2
26839: ARRAY
26840: ST_TO_ADDR
// if not i then
26841: LD_VAR 0 5
26845: NOT
26846: IFFALSE 26850
// exit ;
26848: GO 26916
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
26850: LD_ADDR_VAR 0 1
26854: PUSH
26855: LD_VAR 0 1
26859: PPUSH
26860: LD_VAR 0 2
26864: PPUSH
26865: LD_VAR 0 1
26869: PUSH
26870: LD_VAR 0 3
26874: ARRAY
26875: PPUSH
26876: CALL_OW 1
26880: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
26881: LD_ADDR_VAR 0 1
26885: PUSH
26886: LD_VAR 0 1
26890: PPUSH
26891: LD_VAR 0 3
26895: PPUSH
26896: LD_VAR 0 5
26900: PPUSH
26901: CALL_OW 1
26905: ST_TO_ADDR
// result := list ;
26906: LD_ADDR_VAR 0 4
26910: PUSH
26911: LD_VAR 0 1
26915: ST_TO_ADDR
// end ;
26916: LD_VAR 0 4
26920: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
26921: LD_INT 0
26923: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
26924: LD_ADDR_VAR 0 5
26928: PUSH
26929: LD_VAR 0 1
26933: PPUSH
26934: CALL_OW 250
26938: PPUSH
26939: LD_VAR 0 1
26943: PPUSH
26944: CALL_OW 251
26948: PPUSH
26949: LD_VAR 0 2
26953: PPUSH
26954: LD_VAR 0 3
26958: PPUSH
26959: LD_VAR 0 4
26963: PPUSH
26964: CALL 26974 0 5
26968: ST_TO_ADDR
// end ;
26969: LD_VAR 0 5
26973: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
26974: LD_INT 0
26976: PPUSH
26977: PPUSH
26978: PPUSH
26979: PPUSH
// if not list then
26980: LD_VAR 0 3
26984: NOT
26985: IFFALSE 26989
// exit ;
26987: GO 27377
// result := [ ] ;
26989: LD_ADDR_VAR 0 6
26993: PUSH
26994: EMPTY
26995: ST_TO_ADDR
// for i in list do
26996: LD_ADDR_VAR 0 7
27000: PUSH
27001: LD_VAR 0 3
27005: PUSH
27006: FOR_IN
27007: IFFALSE 27209
// begin tmp := GetDistUnitXY ( i , x , y ) ;
27009: LD_ADDR_VAR 0 9
27013: PUSH
27014: LD_VAR 0 7
27018: PPUSH
27019: LD_VAR 0 1
27023: PPUSH
27024: LD_VAR 0 2
27028: PPUSH
27029: CALL_OW 297
27033: ST_TO_ADDR
// if not result then
27034: LD_VAR 0 6
27038: NOT
27039: IFFALSE 27065
// result := [ [ i , tmp ] ] else
27041: LD_ADDR_VAR 0 6
27045: PUSH
27046: LD_VAR 0 7
27050: PUSH
27051: LD_VAR 0 9
27055: PUSH
27056: EMPTY
27057: LIST
27058: LIST
27059: PUSH
27060: EMPTY
27061: LIST
27062: ST_TO_ADDR
27063: GO 27207
// begin if result [ result ] [ 2 ] < tmp then
27065: LD_VAR 0 6
27069: PUSH
27070: LD_VAR 0 6
27074: ARRAY
27075: PUSH
27076: LD_INT 2
27078: ARRAY
27079: PUSH
27080: LD_VAR 0 9
27084: LESS
27085: IFFALSE 27127
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
27087: LD_ADDR_VAR 0 6
27091: PUSH
27092: LD_VAR 0 6
27096: PPUSH
27097: LD_VAR 0 6
27101: PUSH
27102: LD_INT 1
27104: PLUS
27105: PPUSH
27106: LD_VAR 0 7
27110: PUSH
27111: LD_VAR 0 9
27115: PUSH
27116: EMPTY
27117: LIST
27118: LIST
27119: PPUSH
27120: CALL_OW 2
27124: ST_TO_ADDR
27125: GO 27207
// for j = 1 to result do
27127: LD_ADDR_VAR 0 8
27131: PUSH
27132: DOUBLE
27133: LD_INT 1
27135: DEC
27136: ST_TO_ADDR
27137: LD_VAR 0 6
27141: PUSH
27142: FOR_TO
27143: IFFALSE 27205
// begin if tmp < result [ j ] [ 2 ] then
27145: LD_VAR 0 9
27149: PUSH
27150: LD_VAR 0 6
27154: PUSH
27155: LD_VAR 0 8
27159: ARRAY
27160: PUSH
27161: LD_INT 2
27163: ARRAY
27164: LESS
27165: IFFALSE 27203
// begin result := Insert ( result , j , [ i , tmp ] ) ;
27167: LD_ADDR_VAR 0 6
27171: PUSH
27172: LD_VAR 0 6
27176: PPUSH
27177: LD_VAR 0 8
27181: PPUSH
27182: LD_VAR 0 7
27186: PUSH
27187: LD_VAR 0 9
27191: PUSH
27192: EMPTY
27193: LIST
27194: LIST
27195: PPUSH
27196: CALL_OW 2
27200: ST_TO_ADDR
// break ;
27201: GO 27205
// end ; end ;
27203: GO 27142
27205: POP
27206: POP
// end ; end ;
27207: GO 27006
27209: POP
27210: POP
// if result and not asc then
27211: LD_VAR 0 6
27215: PUSH
27216: LD_VAR 0 4
27220: NOT
27221: AND
27222: IFFALSE 27297
// begin tmp := result ;
27224: LD_ADDR_VAR 0 9
27228: PUSH
27229: LD_VAR 0 6
27233: ST_TO_ADDR
// for i = tmp downto 1 do
27234: LD_ADDR_VAR 0 7
27238: PUSH
27239: DOUBLE
27240: LD_VAR 0 9
27244: INC
27245: ST_TO_ADDR
27246: LD_INT 1
27248: PUSH
27249: FOR_DOWNTO
27250: IFFALSE 27295
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
27252: LD_ADDR_VAR 0 6
27256: PUSH
27257: LD_VAR 0 6
27261: PPUSH
27262: LD_VAR 0 9
27266: PUSH
27267: LD_VAR 0 7
27271: MINUS
27272: PUSH
27273: LD_INT 1
27275: PLUS
27276: PPUSH
27277: LD_VAR 0 9
27281: PUSH
27282: LD_VAR 0 7
27286: ARRAY
27287: PPUSH
27288: CALL_OW 1
27292: ST_TO_ADDR
27293: GO 27249
27295: POP
27296: POP
// end ; tmp := [ ] ;
27297: LD_ADDR_VAR 0 9
27301: PUSH
27302: EMPTY
27303: ST_TO_ADDR
// if mode then
27304: LD_VAR 0 5
27308: IFFALSE 27377
// begin for i = 1 to result do
27310: LD_ADDR_VAR 0 7
27314: PUSH
27315: DOUBLE
27316: LD_INT 1
27318: DEC
27319: ST_TO_ADDR
27320: LD_VAR 0 6
27324: PUSH
27325: FOR_TO
27326: IFFALSE 27365
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
27328: LD_ADDR_VAR 0 9
27332: PUSH
27333: LD_VAR 0 9
27337: PPUSH
27338: LD_VAR 0 7
27342: PPUSH
27343: LD_VAR 0 6
27347: PUSH
27348: LD_VAR 0 7
27352: ARRAY
27353: PUSH
27354: LD_INT 1
27356: ARRAY
27357: PPUSH
27358: CALL_OW 1
27362: ST_TO_ADDR
27363: GO 27325
27365: POP
27366: POP
// result := tmp ;
27367: LD_ADDR_VAR 0 6
27371: PUSH
27372: LD_VAR 0 9
27376: ST_TO_ADDR
// end ; end ;
27377: LD_VAR 0 6
27381: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
27382: LD_INT 0
27384: PPUSH
27385: PPUSH
27386: PPUSH
27387: PPUSH
27388: PPUSH
27389: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
27390: LD_ADDR_VAR 0 5
27394: PUSH
27395: LD_INT 0
27397: PUSH
27398: LD_INT 0
27400: PUSH
27401: LD_INT 0
27403: PUSH
27404: EMPTY
27405: PUSH
27406: EMPTY
27407: LIST
27408: LIST
27409: LIST
27410: LIST
27411: ST_TO_ADDR
// if not x or not y then
27412: LD_VAR 0 2
27416: NOT
27417: PUSH
27418: LD_VAR 0 3
27422: NOT
27423: OR
27424: IFFALSE 27428
// exit ;
27426: GO 29074
// if not range then
27428: LD_VAR 0 4
27432: NOT
27433: IFFALSE 27443
// range := 10 ;
27435: LD_ADDR_VAR 0 4
27439: PUSH
27440: LD_INT 10
27442: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27443: LD_ADDR_VAR 0 8
27447: PUSH
27448: LD_INT 81
27450: PUSH
27451: LD_VAR 0 1
27455: PUSH
27456: EMPTY
27457: LIST
27458: LIST
27459: PUSH
27460: LD_INT 92
27462: PUSH
27463: LD_VAR 0 2
27467: PUSH
27468: LD_VAR 0 3
27472: PUSH
27473: LD_VAR 0 4
27477: PUSH
27478: EMPTY
27479: LIST
27480: LIST
27481: LIST
27482: LIST
27483: PUSH
27484: LD_INT 3
27486: PUSH
27487: LD_INT 21
27489: PUSH
27490: LD_INT 3
27492: PUSH
27493: EMPTY
27494: LIST
27495: LIST
27496: PUSH
27497: EMPTY
27498: LIST
27499: LIST
27500: PUSH
27501: EMPTY
27502: LIST
27503: LIST
27504: LIST
27505: PPUSH
27506: CALL_OW 69
27510: ST_TO_ADDR
// if not tmp then
27511: LD_VAR 0 8
27515: NOT
27516: IFFALSE 27520
// exit ;
27518: GO 29074
// for i in tmp do
27520: LD_ADDR_VAR 0 6
27524: PUSH
27525: LD_VAR 0 8
27529: PUSH
27530: FOR_IN
27531: IFFALSE 29049
// begin points := [ 0 , 0 , 0 ] ;
27533: LD_ADDR_VAR 0 9
27537: PUSH
27538: LD_INT 0
27540: PUSH
27541: LD_INT 0
27543: PUSH
27544: LD_INT 0
27546: PUSH
27547: EMPTY
27548: LIST
27549: LIST
27550: LIST
27551: ST_TO_ADDR
// bpoints := 1 ;
27552: LD_ADDR_VAR 0 10
27556: PUSH
27557: LD_INT 1
27559: ST_TO_ADDR
// case GetType ( i ) of unit_human :
27560: LD_VAR 0 6
27564: PPUSH
27565: CALL_OW 247
27569: PUSH
27570: LD_INT 1
27572: DOUBLE
27573: EQUAL
27574: IFTRUE 27578
27576: GO 28156
27578: POP
// begin if GetClass ( i ) = 1 then
27579: LD_VAR 0 6
27583: PPUSH
27584: CALL_OW 257
27588: PUSH
27589: LD_INT 1
27591: EQUAL
27592: IFFALSE 27613
// points := [ 10 , 5 , 3 ] ;
27594: LD_ADDR_VAR 0 9
27598: PUSH
27599: LD_INT 10
27601: PUSH
27602: LD_INT 5
27604: PUSH
27605: LD_INT 3
27607: PUSH
27608: EMPTY
27609: LIST
27610: LIST
27611: LIST
27612: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
27613: LD_VAR 0 6
27617: PPUSH
27618: CALL_OW 257
27622: PUSH
27623: LD_INT 2
27625: PUSH
27626: LD_INT 3
27628: PUSH
27629: LD_INT 4
27631: PUSH
27632: EMPTY
27633: LIST
27634: LIST
27635: LIST
27636: IN
27637: IFFALSE 27658
// points := [ 3 , 2 , 1 ] ;
27639: LD_ADDR_VAR 0 9
27643: PUSH
27644: LD_INT 3
27646: PUSH
27647: LD_INT 2
27649: PUSH
27650: LD_INT 1
27652: PUSH
27653: EMPTY
27654: LIST
27655: LIST
27656: LIST
27657: ST_TO_ADDR
// if GetClass ( i ) = 5 then
27658: LD_VAR 0 6
27662: PPUSH
27663: CALL_OW 257
27667: PUSH
27668: LD_INT 5
27670: EQUAL
27671: IFFALSE 27692
// points := [ 130 , 5 , 2 ] ;
27673: LD_ADDR_VAR 0 9
27677: PUSH
27678: LD_INT 130
27680: PUSH
27681: LD_INT 5
27683: PUSH
27684: LD_INT 2
27686: PUSH
27687: EMPTY
27688: LIST
27689: LIST
27690: LIST
27691: ST_TO_ADDR
// if GetClass ( i ) = 8 then
27692: LD_VAR 0 6
27696: PPUSH
27697: CALL_OW 257
27701: PUSH
27702: LD_INT 8
27704: EQUAL
27705: IFFALSE 27726
// points := [ 35 , 35 , 30 ] ;
27707: LD_ADDR_VAR 0 9
27711: PUSH
27712: LD_INT 35
27714: PUSH
27715: LD_INT 35
27717: PUSH
27718: LD_INT 30
27720: PUSH
27721: EMPTY
27722: LIST
27723: LIST
27724: LIST
27725: ST_TO_ADDR
// if GetClass ( i ) = 9 then
27726: LD_VAR 0 6
27730: PPUSH
27731: CALL_OW 257
27735: PUSH
27736: LD_INT 9
27738: EQUAL
27739: IFFALSE 27760
// points := [ 20 , 55 , 40 ] ;
27741: LD_ADDR_VAR 0 9
27745: PUSH
27746: LD_INT 20
27748: PUSH
27749: LD_INT 55
27751: PUSH
27752: LD_INT 40
27754: PUSH
27755: EMPTY
27756: LIST
27757: LIST
27758: LIST
27759: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
27760: LD_VAR 0 6
27764: PPUSH
27765: CALL_OW 257
27769: PUSH
27770: LD_INT 12
27772: PUSH
27773: LD_INT 16
27775: PUSH
27776: EMPTY
27777: LIST
27778: LIST
27779: IN
27780: IFFALSE 27801
// points := [ 5 , 3 , 2 ] ;
27782: LD_ADDR_VAR 0 9
27786: PUSH
27787: LD_INT 5
27789: PUSH
27790: LD_INT 3
27792: PUSH
27793: LD_INT 2
27795: PUSH
27796: EMPTY
27797: LIST
27798: LIST
27799: LIST
27800: ST_TO_ADDR
// if GetClass ( i ) = 17 then
27801: LD_VAR 0 6
27805: PPUSH
27806: CALL_OW 257
27810: PUSH
27811: LD_INT 17
27813: EQUAL
27814: IFFALSE 27835
// points := [ 100 , 50 , 75 ] ;
27816: LD_ADDR_VAR 0 9
27820: PUSH
27821: LD_INT 100
27823: PUSH
27824: LD_INT 50
27826: PUSH
27827: LD_INT 75
27829: PUSH
27830: EMPTY
27831: LIST
27832: LIST
27833: LIST
27834: ST_TO_ADDR
// if GetClass ( i ) = 15 then
27835: LD_VAR 0 6
27839: PPUSH
27840: CALL_OW 257
27844: PUSH
27845: LD_INT 15
27847: EQUAL
27848: IFFALSE 27869
// points := [ 10 , 5 , 3 ] ;
27850: LD_ADDR_VAR 0 9
27854: PUSH
27855: LD_INT 10
27857: PUSH
27858: LD_INT 5
27860: PUSH
27861: LD_INT 3
27863: PUSH
27864: EMPTY
27865: LIST
27866: LIST
27867: LIST
27868: ST_TO_ADDR
// if GetClass ( i ) = 14 then
27869: LD_VAR 0 6
27873: PPUSH
27874: CALL_OW 257
27878: PUSH
27879: LD_INT 14
27881: EQUAL
27882: IFFALSE 27903
// points := [ 10 , 0 , 0 ] ;
27884: LD_ADDR_VAR 0 9
27888: PUSH
27889: LD_INT 10
27891: PUSH
27892: LD_INT 0
27894: PUSH
27895: LD_INT 0
27897: PUSH
27898: EMPTY
27899: LIST
27900: LIST
27901: LIST
27902: ST_TO_ADDR
// if GetClass ( i ) = 11 then
27903: LD_VAR 0 6
27907: PPUSH
27908: CALL_OW 257
27912: PUSH
27913: LD_INT 11
27915: EQUAL
27916: IFFALSE 27937
// points := [ 30 , 10 , 5 ] ;
27918: LD_ADDR_VAR 0 9
27922: PUSH
27923: LD_INT 30
27925: PUSH
27926: LD_INT 10
27928: PUSH
27929: LD_INT 5
27931: PUSH
27932: EMPTY
27933: LIST
27934: LIST
27935: LIST
27936: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
27937: LD_VAR 0 1
27941: PPUSH
27942: LD_INT 5
27944: PPUSH
27945: CALL_OW 321
27949: PUSH
27950: LD_INT 2
27952: EQUAL
27953: IFFALSE 27970
// bpoints := bpoints * 1.8 ;
27955: LD_ADDR_VAR 0 10
27959: PUSH
27960: LD_VAR 0 10
27964: PUSH
27965: LD_REAL  1.80000000000000E+0000
27968: MUL
27969: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
27970: LD_VAR 0 6
27974: PPUSH
27975: CALL_OW 257
27979: PUSH
27980: LD_INT 1
27982: PUSH
27983: LD_INT 2
27985: PUSH
27986: LD_INT 3
27988: PUSH
27989: LD_INT 4
27991: PUSH
27992: EMPTY
27993: LIST
27994: LIST
27995: LIST
27996: LIST
27997: IN
27998: PUSH
27999: LD_VAR 0 1
28003: PPUSH
28004: LD_INT 51
28006: PPUSH
28007: CALL_OW 321
28011: PUSH
28012: LD_INT 2
28014: EQUAL
28015: AND
28016: IFFALSE 28033
// bpoints := bpoints * 1.2 ;
28018: LD_ADDR_VAR 0 10
28022: PUSH
28023: LD_VAR 0 10
28027: PUSH
28028: LD_REAL  1.20000000000000E+0000
28031: MUL
28032: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
28033: LD_VAR 0 6
28037: PPUSH
28038: CALL_OW 257
28042: PUSH
28043: LD_INT 5
28045: PUSH
28046: LD_INT 7
28048: PUSH
28049: LD_INT 9
28051: PUSH
28052: EMPTY
28053: LIST
28054: LIST
28055: LIST
28056: IN
28057: PUSH
28058: LD_VAR 0 1
28062: PPUSH
28063: LD_INT 52
28065: PPUSH
28066: CALL_OW 321
28070: PUSH
28071: LD_INT 2
28073: EQUAL
28074: AND
28075: IFFALSE 28092
// bpoints := bpoints * 1.5 ;
28077: LD_ADDR_VAR 0 10
28081: PUSH
28082: LD_VAR 0 10
28086: PUSH
28087: LD_REAL  1.50000000000000E+0000
28090: MUL
28091: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
28092: LD_VAR 0 1
28096: PPUSH
28097: LD_INT 66
28099: PPUSH
28100: CALL_OW 321
28104: PUSH
28105: LD_INT 2
28107: EQUAL
28108: IFFALSE 28125
// bpoints := bpoints * 1.1 ;
28110: LD_ADDR_VAR 0 10
28114: PUSH
28115: LD_VAR 0 10
28119: PUSH
28120: LD_REAL  1.10000000000000E+0000
28123: MUL
28124: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
28125: LD_ADDR_VAR 0 10
28129: PUSH
28130: LD_VAR 0 10
28134: PUSH
28135: LD_VAR 0 6
28139: PPUSH
28140: LD_INT 1
28142: PPUSH
28143: CALL_OW 259
28147: PUSH
28148: LD_REAL  1.15000000000000E+0000
28151: MUL
28152: MUL
28153: ST_TO_ADDR
// end ; unit_vehicle :
28154: GO 28978
28156: LD_INT 2
28158: DOUBLE
28159: EQUAL
28160: IFTRUE 28164
28162: GO 28966
28164: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
28165: LD_VAR 0 6
28169: PPUSH
28170: CALL_OW 264
28174: PUSH
28175: LD_INT 2
28177: PUSH
28178: LD_INT 42
28180: PUSH
28181: LD_INT 24
28183: PUSH
28184: EMPTY
28185: LIST
28186: LIST
28187: LIST
28188: IN
28189: IFFALSE 28210
// points := [ 25 , 5 , 3 ] ;
28191: LD_ADDR_VAR 0 9
28195: PUSH
28196: LD_INT 25
28198: PUSH
28199: LD_INT 5
28201: PUSH
28202: LD_INT 3
28204: PUSH
28205: EMPTY
28206: LIST
28207: LIST
28208: LIST
28209: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
28210: LD_VAR 0 6
28214: PPUSH
28215: CALL_OW 264
28219: PUSH
28220: LD_INT 4
28222: PUSH
28223: LD_INT 43
28225: PUSH
28226: LD_INT 25
28228: PUSH
28229: EMPTY
28230: LIST
28231: LIST
28232: LIST
28233: IN
28234: IFFALSE 28255
// points := [ 40 , 15 , 5 ] ;
28236: LD_ADDR_VAR 0 9
28240: PUSH
28241: LD_INT 40
28243: PUSH
28244: LD_INT 15
28246: PUSH
28247: LD_INT 5
28249: PUSH
28250: EMPTY
28251: LIST
28252: LIST
28253: LIST
28254: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
28255: LD_VAR 0 6
28259: PPUSH
28260: CALL_OW 264
28264: PUSH
28265: LD_INT 3
28267: PUSH
28268: LD_INT 23
28270: PUSH
28271: EMPTY
28272: LIST
28273: LIST
28274: IN
28275: IFFALSE 28296
// points := [ 7 , 25 , 8 ] ;
28277: LD_ADDR_VAR 0 9
28281: PUSH
28282: LD_INT 7
28284: PUSH
28285: LD_INT 25
28287: PUSH
28288: LD_INT 8
28290: PUSH
28291: EMPTY
28292: LIST
28293: LIST
28294: LIST
28295: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
28296: LD_VAR 0 6
28300: PPUSH
28301: CALL_OW 264
28305: PUSH
28306: LD_INT 5
28308: PUSH
28309: LD_INT 27
28311: PUSH
28312: LD_INT 44
28314: PUSH
28315: EMPTY
28316: LIST
28317: LIST
28318: LIST
28319: IN
28320: IFFALSE 28341
// points := [ 14 , 50 , 16 ] ;
28322: LD_ADDR_VAR 0 9
28326: PUSH
28327: LD_INT 14
28329: PUSH
28330: LD_INT 50
28332: PUSH
28333: LD_INT 16
28335: PUSH
28336: EMPTY
28337: LIST
28338: LIST
28339: LIST
28340: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
28341: LD_VAR 0 6
28345: PPUSH
28346: CALL_OW 264
28350: PUSH
28351: LD_INT 6
28353: PUSH
28354: LD_INT 46
28356: PUSH
28357: EMPTY
28358: LIST
28359: LIST
28360: IN
28361: IFFALSE 28382
// points := [ 32 , 120 , 70 ] ;
28363: LD_ADDR_VAR 0 9
28367: PUSH
28368: LD_INT 32
28370: PUSH
28371: LD_INT 120
28373: PUSH
28374: LD_INT 70
28376: PUSH
28377: EMPTY
28378: LIST
28379: LIST
28380: LIST
28381: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
28382: LD_VAR 0 6
28386: PPUSH
28387: CALL_OW 264
28391: PUSH
28392: LD_INT 7
28394: PUSH
28395: LD_INT 28
28397: PUSH
28398: LD_INT 45
28400: PUSH
28401: EMPTY
28402: LIST
28403: LIST
28404: LIST
28405: IN
28406: IFFALSE 28427
// points := [ 35 , 20 , 45 ] ;
28408: LD_ADDR_VAR 0 9
28412: PUSH
28413: LD_INT 35
28415: PUSH
28416: LD_INT 20
28418: PUSH
28419: LD_INT 45
28421: PUSH
28422: EMPTY
28423: LIST
28424: LIST
28425: LIST
28426: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
28427: LD_VAR 0 6
28431: PPUSH
28432: CALL_OW 264
28436: PUSH
28437: LD_INT 47
28439: PUSH
28440: EMPTY
28441: LIST
28442: IN
28443: IFFALSE 28464
// points := [ 67 , 45 , 75 ] ;
28445: LD_ADDR_VAR 0 9
28449: PUSH
28450: LD_INT 67
28452: PUSH
28453: LD_INT 45
28455: PUSH
28456: LD_INT 75
28458: PUSH
28459: EMPTY
28460: LIST
28461: LIST
28462: LIST
28463: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
28464: LD_VAR 0 6
28468: PPUSH
28469: CALL_OW 264
28473: PUSH
28474: LD_INT 26
28476: PUSH
28477: EMPTY
28478: LIST
28479: IN
28480: IFFALSE 28501
// points := [ 120 , 30 , 80 ] ;
28482: LD_ADDR_VAR 0 9
28486: PUSH
28487: LD_INT 120
28489: PUSH
28490: LD_INT 30
28492: PUSH
28493: LD_INT 80
28495: PUSH
28496: EMPTY
28497: LIST
28498: LIST
28499: LIST
28500: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
28501: LD_VAR 0 6
28505: PPUSH
28506: CALL_OW 264
28510: PUSH
28511: LD_INT 22
28513: PUSH
28514: EMPTY
28515: LIST
28516: IN
28517: IFFALSE 28538
// points := [ 40 , 1 , 1 ] ;
28519: LD_ADDR_VAR 0 9
28523: PUSH
28524: LD_INT 40
28526: PUSH
28527: LD_INT 1
28529: PUSH
28530: LD_INT 1
28532: PUSH
28533: EMPTY
28534: LIST
28535: LIST
28536: LIST
28537: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
28538: LD_VAR 0 6
28542: PPUSH
28543: CALL_OW 264
28547: PUSH
28548: LD_INT 29
28550: PUSH
28551: EMPTY
28552: LIST
28553: IN
28554: IFFALSE 28575
// points := [ 70 , 200 , 400 ] ;
28556: LD_ADDR_VAR 0 9
28560: PUSH
28561: LD_INT 70
28563: PUSH
28564: LD_INT 200
28566: PUSH
28567: LD_INT 400
28569: PUSH
28570: EMPTY
28571: LIST
28572: LIST
28573: LIST
28574: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
28575: LD_VAR 0 6
28579: PPUSH
28580: CALL_OW 264
28584: PUSH
28585: LD_INT 14
28587: PUSH
28588: LD_INT 53
28590: PUSH
28591: EMPTY
28592: LIST
28593: LIST
28594: IN
28595: IFFALSE 28616
// points := [ 40 , 10 , 20 ] ;
28597: LD_ADDR_VAR 0 9
28601: PUSH
28602: LD_INT 40
28604: PUSH
28605: LD_INT 10
28607: PUSH
28608: LD_INT 20
28610: PUSH
28611: EMPTY
28612: LIST
28613: LIST
28614: LIST
28615: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
28616: LD_VAR 0 6
28620: PPUSH
28621: CALL_OW 264
28625: PUSH
28626: LD_INT 9
28628: PUSH
28629: EMPTY
28630: LIST
28631: IN
28632: IFFALSE 28653
// points := [ 5 , 70 , 20 ] ;
28634: LD_ADDR_VAR 0 9
28638: PUSH
28639: LD_INT 5
28641: PUSH
28642: LD_INT 70
28644: PUSH
28645: LD_INT 20
28647: PUSH
28648: EMPTY
28649: LIST
28650: LIST
28651: LIST
28652: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
28653: LD_VAR 0 6
28657: PPUSH
28658: CALL_OW 264
28662: PUSH
28663: LD_INT 10
28665: PUSH
28666: EMPTY
28667: LIST
28668: IN
28669: IFFALSE 28690
// points := [ 35 , 110 , 70 ] ;
28671: LD_ADDR_VAR 0 9
28675: PUSH
28676: LD_INT 35
28678: PUSH
28679: LD_INT 110
28681: PUSH
28682: LD_INT 70
28684: PUSH
28685: EMPTY
28686: LIST
28687: LIST
28688: LIST
28689: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
28690: LD_VAR 0 6
28694: PPUSH
28695: CALL_OW 265
28699: PUSH
28700: LD_INT 25
28702: EQUAL
28703: IFFALSE 28724
// points := [ 80 , 65 , 100 ] ;
28705: LD_ADDR_VAR 0 9
28709: PUSH
28710: LD_INT 80
28712: PUSH
28713: LD_INT 65
28715: PUSH
28716: LD_INT 100
28718: PUSH
28719: EMPTY
28720: LIST
28721: LIST
28722: LIST
28723: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
28724: LD_VAR 0 6
28728: PPUSH
28729: CALL_OW 263
28733: PUSH
28734: LD_INT 1
28736: EQUAL
28737: IFFALSE 28772
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
28739: LD_ADDR_VAR 0 10
28743: PUSH
28744: LD_VAR 0 10
28748: PUSH
28749: LD_VAR 0 6
28753: PPUSH
28754: CALL_OW 311
28758: PPUSH
28759: LD_INT 3
28761: PPUSH
28762: CALL_OW 259
28766: PUSH
28767: LD_INT 4
28769: MUL
28770: MUL
28771: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
28772: LD_VAR 0 6
28776: PPUSH
28777: CALL_OW 263
28781: PUSH
28782: LD_INT 2
28784: EQUAL
28785: IFFALSE 28836
// begin j := IsControledBy ( i ) ;
28787: LD_ADDR_VAR 0 7
28791: PUSH
28792: LD_VAR 0 6
28796: PPUSH
28797: CALL_OW 312
28801: ST_TO_ADDR
// if j then
28802: LD_VAR 0 7
28806: IFFALSE 28836
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
28808: LD_ADDR_VAR 0 10
28812: PUSH
28813: LD_VAR 0 10
28817: PUSH
28818: LD_VAR 0 7
28822: PPUSH
28823: LD_INT 3
28825: PPUSH
28826: CALL_OW 259
28830: PUSH
28831: LD_INT 3
28833: MUL
28834: MUL
28835: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
28836: LD_VAR 0 6
28840: PPUSH
28841: CALL_OW 264
28845: PUSH
28846: LD_INT 5
28848: PUSH
28849: LD_INT 6
28851: PUSH
28852: LD_INT 46
28854: PUSH
28855: LD_INT 44
28857: PUSH
28858: LD_INT 47
28860: PUSH
28861: LD_INT 45
28863: PUSH
28864: LD_INT 28
28866: PUSH
28867: LD_INT 7
28869: PUSH
28870: LD_INT 27
28872: PUSH
28873: LD_INT 29
28875: PUSH
28876: EMPTY
28877: LIST
28878: LIST
28879: LIST
28880: LIST
28881: LIST
28882: LIST
28883: LIST
28884: LIST
28885: LIST
28886: LIST
28887: IN
28888: PUSH
28889: LD_VAR 0 1
28893: PPUSH
28894: LD_INT 52
28896: PPUSH
28897: CALL_OW 321
28901: PUSH
28902: LD_INT 2
28904: EQUAL
28905: AND
28906: IFFALSE 28923
// bpoints := bpoints * 1.2 ;
28908: LD_ADDR_VAR 0 10
28912: PUSH
28913: LD_VAR 0 10
28917: PUSH
28918: LD_REAL  1.20000000000000E+0000
28921: MUL
28922: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
28923: LD_VAR 0 6
28927: PPUSH
28928: CALL_OW 264
28932: PUSH
28933: LD_INT 6
28935: PUSH
28936: LD_INT 46
28938: PUSH
28939: LD_INT 47
28941: PUSH
28942: EMPTY
28943: LIST
28944: LIST
28945: LIST
28946: IN
28947: IFFALSE 28964
// bpoints := bpoints * 1.2 ;
28949: LD_ADDR_VAR 0 10
28953: PUSH
28954: LD_VAR 0 10
28958: PUSH
28959: LD_REAL  1.20000000000000E+0000
28962: MUL
28963: ST_TO_ADDR
// end ; unit_building :
28964: GO 28978
28966: LD_INT 3
28968: DOUBLE
28969: EQUAL
28970: IFTRUE 28974
28972: GO 28977
28974: POP
// ; end ;
28975: GO 28978
28977: POP
// for j = 1 to 3 do
28978: LD_ADDR_VAR 0 7
28982: PUSH
28983: DOUBLE
28984: LD_INT 1
28986: DEC
28987: ST_TO_ADDR
28988: LD_INT 3
28990: PUSH
28991: FOR_TO
28992: IFFALSE 29045
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
28994: LD_ADDR_VAR 0 5
28998: PUSH
28999: LD_VAR 0 5
29003: PPUSH
29004: LD_VAR 0 7
29008: PPUSH
29009: LD_VAR 0 5
29013: PUSH
29014: LD_VAR 0 7
29018: ARRAY
29019: PUSH
29020: LD_VAR 0 9
29024: PUSH
29025: LD_VAR 0 7
29029: ARRAY
29030: PUSH
29031: LD_VAR 0 10
29035: MUL
29036: PLUS
29037: PPUSH
29038: CALL_OW 1
29042: ST_TO_ADDR
29043: GO 28991
29045: POP
29046: POP
// end ;
29047: GO 27530
29049: POP
29050: POP
// result := Replace ( result , 4 , tmp ) ;
29051: LD_ADDR_VAR 0 5
29055: PUSH
29056: LD_VAR 0 5
29060: PPUSH
29061: LD_INT 4
29063: PPUSH
29064: LD_VAR 0 8
29068: PPUSH
29069: CALL_OW 1
29073: ST_TO_ADDR
// end ;
29074: LD_VAR 0 5
29078: RET
// export function DangerAtRange ( unit , range ) ; begin
29079: LD_INT 0
29081: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
29082: LD_ADDR_VAR 0 3
29086: PUSH
29087: LD_VAR 0 1
29091: PPUSH
29092: CALL_OW 255
29096: PPUSH
29097: LD_VAR 0 1
29101: PPUSH
29102: CALL_OW 250
29106: PPUSH
29107: LD_VAR 0 1
29111: PPUSH
29112: CALL_OW 251
29116: PPUSH
29117: LD_VAR 0 2
29121: PPUSH
29122: CALL 27382 0 4
29126: ST_TO_ADDR
// end ;
29127: LD_VAR 0 3
29131: RET
// export function DangerInArea ( side , area ) ; begin
29132: LD_INT 0
29134: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
29135: LD_ADDR_VAR 0 3
29139: PUSH
29140: LD_VAR 0 2
29144: PPUSH
29145: LD_INT 81
29147: PUSH
29148: LD_VAR 0 1
29152: PUSH
29153: EMPTY
29154: LIST
29155: LIST
29156: PPUSH
29157: CALL_OW 70
29161: ST_TO_ADDR
// end ;
29162: LD_VAR 0 3
29166: RET
// export function IsExtension ( b ) ; begin
29167: LD_INT 0
29169: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
29170: LD_ADDR_VAR 0 2
29174: PUSH
29175: LD_VAR 0 1
29179: PUSH
29180: LD_INT 23
29182: PUSH
29183: LD_INT 20
29185: PUSH
29186: LD_INT 22
29188: PUSH
29189: LD_INT 17
29191: PUSH
29192: LD_INT 24
29194: PUSH
29195: LD_INT 21
29197: PUSH
29198: LD_INT 19
29200: PUSH
29201: LD_INT 16
29203: PUSH
29204: LD_INT 25
29206: PUSH
29207: LD_INT 18
29209: PUSH
29210: EMPTY
29211: LIST
29212: LIST
29213: LIST
29214: LIST
29215: LIST
29216: LIST
29217: LIST
29218: LIST
29219: LIST
29220: LIST
29221: IN
29222: ST_TO_ADDR
// end ;
29223: LD_VAR 0 2
29227: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
29228: LD_INT 0
29230: PPUSH
29231: PPUSH
29232: PPUSH
// result := [ ] ;
29233: LD_ADDR_VAR 0 3
29237: PUSH
29238: EMPTY
29239: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
29240: LD_ADDR_VAR 0 4
29244: PUSH
29245: LD_VAR 0 2
29249: PPUSH
29250: LD_INT 21
29252: PUSH
29253: LD_INT 3
29255: PUSH
29256: EMPTY
29257: LIST
29258: LIST
29259: PPUSH
29260: CALL_OW 70
29264: ST_TO_ADDR
// if not tmp then
29265: LD_VAR 0 4
29269: NOT
29270: IFFALSE 29274
// exit ;
29272: GO 29332
// for i in tmp do
29274: LD_ADDR_VAR 0 5
29278: PUSH
29279: LD_VAR 0 4
29283: PUSH
29284: FOR_IN
29285: IFFALSE 29320
// if GetBase ( i ) <> base then
29287: LD_VAR 0 5
29291: PPUSH
29292: CALL_OW 274
29296: PUSH
29297: LD_VAR 0 1
29301: NONEQUAL
29302: IFFALSE 29318
// ComLinkToBase ( base , i ) ;
29304: LD_VAR 0 1
29308: PPUSH
29309: LD_VAR 0 5
29313: PPUSH
29314: CALL_OW 169
29318: GO 29284
29320: POP
29321: POP
// result := tmp ;
29322: LD_ADDR_VAR 0 3
29326: PUSH
29327: LD_VAR 0 4
29331: ST_TO_ADDR
// end ;
29332: LD_VAR 0 3
29336: RET
// export function ComComplete ( unit , b ) ; var i ; begin
29337: LD_INT 0
29339: PPUSH
29340: PPUSH
// if BuildingStatus ( b ) = bs_build then
29341: LD_VAR 0 2
29345: PPUSH
29346: CALL_OW 461
29350: PUSH
29351: LD_INT 1
29353: EQUAL
29354: IFFALSE 29414
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
29356: LD_VAR 0 1
29360: PPUSH
29361: LD_STRING h
29363: PUSH
29364: LD_VAR 0 2
29368: PPUSH
29369: CALL_OW 250
29373: PUSH
29374: LD_VAR 0 2
29378: PPUSH
29379: CALL_OW 251
29383: PUSH
29384: LD_VAR 0 2
29388: PUSH
29389: LD_INT 0
29391: PUSH
29392: LD_INT 0
29394: PUSH
29395: LD_INT 0
29397: PUSH
29398: EMPTY
29399: LIST
29400: LIST
29401: LIST
29402: LIST
29403: LIST
29404: LIST
29405: LIST
29406: PUSH
29407: EMPTY
29408: LIST
29409: PPUSH
29410: CALL_OW 446
// end ;
29414: LD_VAR 0 3
29418: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
29419: LD_INT 0
29421: PPUSH
29422: PPUSH
29423: PPUSH
29424: PPUSH
29425: PPUSH
29426: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
29427: LD_VAR 0 1
29431: NOT
29432: PUSH
29433: LD_VAR 0 1
29437: PPUSH
29438: CALL_OW 263
29442: PUSH
29443: LD_INT 2
29445: EQUAL
29446: NOT
29447: OR
29448: IFFALSE 29452
// exit ;
29450: GO 29768
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
29452: LD_ADDR_VAR 0 6
29456: PUSH
29457: LD_INT 22
29459: PUSH
29460: LD_VAR 0 1
29464: PPUSH
29465: CALL_OW 255
29469: PUSH
29470: EMPTY
29471: LIST
29472: LIST
29473: PUSH
29474: LD_INT 2
29476: PUSH
29477: LD_INT 30
29479: PUSH
29480: LD_INT 36
29482: PUSH
29483: EMPTY
29484: LIST
29485: LIST
29486: PUSH
29487: LD_INT 34
29489: PUSH
29490: LD_INT 31
29492: PUSH
29493: EMPTY
29494: LIST
29495: LIST
29496: PUSH
29497: EMPTY
29498: LIST
29499: LIST
29500: LIST
29501: PUSH
29502: EMPTY
29503: LIST
29504: LIST
29505: PPUSH
29506: CALL_OW 69
29510: ST_TO_ADDR
// if not tmp then
29511: LD_VAR 0 6
29515: NOT
29516: IFFALSE 29520
// exit ;
29518: GO 29768
// result := [ ] ;
29520: LD_ADDR_VAR 0 2
29524: PUSH
29525: EMPTY
29526: ST_TO_ADDR
// for i in tmp do
29527: LD_ADDR_VAR 0 3
29531: PUSH
29532: LD_VAR 0 6
29536: PUSH
29537: FOR_IN
29538: IFFALSE 29609
// begin t := UnitsInside ( i ) ;
29540: LD_ADDR_VAR 0 4
29544: PUSH
29545: LD_VAR 0 3
29549: PPUSH
29550: CALL_OW 313
29554: ST_TO_ADDR
// if t then
29555: LD_VAR 0 4
29559: IFFALSE 29607
// for j in t do
29561: LD_ADDR_VAR 0 7
29565: PUSH
29566: LD_VAR 0 4
29570: PUSH
29571: FOR_IN
29572: IFFALSE 29605
// result := Insert ( result , result + 1 , j ) ;
29574: LD_ADDR_VAR 0 2
29578: PUSH
29579: LD_VAR 0 2
29583: PPUSH
29584: LD_VAR 0 2
29588: PUSH
29589: LD_INT 1
29591: PLUS
29592: PPUSH
29593: LD_VAR 0 7
29597: PPUSH
29598: CALL_OW 2
29602: ST_TO_ADDR
29603: GO 29571
29605: POP
29606: POP
// end ;
29607: GO 29537
29609: POP
29610: POP
// if not result then
29611: LD_VAR 0 2
29615: NOT
29616: IFFALSE 29620
// exit ;
29618: GO 29768
// mech := result [ 1 ] ;
29620: LD_ADDR_VAR 0 5
29624: PUSH
29625: LD_VAR 0 2
29629: PUSH
29630: LD_INT 1
29632: ARRAY
29633: ST_TO_ADDR
// if result > 1 then
29634: LD_VAR 0 2
29638: PUSH
29639: LD_INT 1
29641: GREATER
29642: IFFALSE 29754
// for i = 2 to result do
29644: LD_ADDR_VAR 0 3
29648: PUSH
29649: DOUBLE
29650: LD_INT 2
29652: DEC
29653: ST_TO_ADDR
29654: LD_VAR 0 2
29658: PUSH
29659: FOR_TO
29660: IFFALSE 29752
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
29662: LD_ADDR_VAR 0 4
29666: PUSH
29667: LD_VAR 0 2
29671: PUSH
29672: LD_VAR 0 3
29676: ARRAY
29677: PPUSH
29678: LD_INT 3
29680: PPUSH
29681: CALL_OW 259
29685: PUSH
29686: LD_VAR 0 2
29690: PUSH
29691: LD_VAR 0 3
29695: ARRAY
29696: PPUSH
29697: CALL_OW 432
29701: MINUS
29702: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
29703: LD_VAR 0 4
29707: PUSH
29708: LD_VAR 0 5
29712: PPUSH
29713: LD_INT 3
29715: PPUSH
29716: CALL_OW 259
29720: PUSH
29721: LD_VAR 0 5
29725: PPUSH
29726: CALL_OW 432
29730: MINUS
29731: GREATEREQUAL
29732: IFFALSE 29750
// mech := result [ i ] ;
29734: LD_ADDR_VAR 0 5
29738: PUSH
29739: LD_VAR 0 2
29743: PUSH
29744: LD_VAR 0 3
29748: ARRAY
29749: ST_TO_ADDR
// end ;
29750: GO 29659
29752: POP
29753: POP
// ComLinkTo ( vehicle , mech ) ;
29754: LD_VAR 0 1
29758: PPUSH
29759: LD_VAR 0 5
29763: PPUSH
29764: CALL_OW 135
// end ;
29768: LD_VAR 0 2
29772: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
29773: LD_INT 0
29775: PPUSH
29776: PPUSH
29777: PPUSH
29778: PPUSH
29779: PPUSH
29780: PPUSH
29781: PPUSH
29782: PPUSH
29783: PPUSH
29784: PPUSH
29785: PPUSH
29786: PPUSH
29787: PPUSH
// result := [ ] ;
29788: LD_ADDR_VAR 0 7
29792: PUSH
29793: EMPTY
29794: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
29795: LD_VAR 0 1
29799: PPUSH
29800: CALL_OW 266
29804: PUSH
29805: LD_INT 0
29807: PUSH
29808: LD_INT 1
29810: PUSH
29811: EMPTY
29812: LIST
29813: LIST
29814: IN
29815: NOT
29816: IFFALSE 29820
// exit ;
29818: GO 31451
// if name then
29820: LD_VAR 0 3
29824: IFFALSE 29840
// SetBName ( base_dep , name ) ;
29826: LD_VAR 0 1
29830: PPUSH
29831: LD_VAR 0 3
29835: PPUSH
29836: CALL_OW 500
// base := GetBase ( base_dep ) ;
29840: LD_ADDR_VAR 0 15
29844: PUSH
29845: LD_VAR 0 1
29849: PPUSH
29850: CALL_OW 274
29854: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
29855: LD_ADDR_VAR 0 16
29859: PUSH
29860: LD_VAR 0 1
29864: PPUSH
29865: CALL_OW 255
29869: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
29870: LD_ADDR_VAR 0 17
29874: PUSH
29875: LD_VAR 0 1
29879: PPUSH
29880: CALL_OW 248
29884: ST_TO_ADDR
// if sources then
29885: LD_VAR 0 5
29889: IFFALSE 29936
// for i = 1 to 3 do
29891: LD_ADDR_VAR 0 8
29895: PUSH
29896: DOUBLE
29897: LD_INT 1
29899: DEC
29900: ST_TO_ADDR
29901: LD_INT 3
29903: PUSH
29904: FOR_TO
29905: IFFALSE 29934
// AddResourceType ( base , i , sources [ i ] ) ;
29907: LD_VAR 0 15
29911: PPUSH
29912: LD_VAR 0 8
29916: PPUSH
29917: LD_VAR 0 5
29921: PUSH
29922: LD_VAR 0 8
29926: ARRAY
29927: PPUSH
29928: CALL_OW 276
29932: GO 29904
29934: POP
29935: POP
// buildings := GetBaseBuildings ( base , area ) ;
29936: LD_ADDR_VAR 0 18
29940: PUSH
29941: LD_VAR 0 15
29945: PPUSH
29946: LD_VAR 0 2
29950: PPUSH
29951: CALL 29228 0 2
29955: ST_TO_ADDR
// InitHc ;
29956: CALL_OW 19
// InitUc ;
29960: CALL_OW 18
// uc_side := side ;
29964: LD_ADDR_OWVAR 20
29968: PUSH
29969: LD_VAR 0 16
29973: ST_TO_ADDR
// uc_nation := nation ;
29974: LD_ADDR_OWVAR 21
29978: PUSH
29979: LD_VAR 0 17
29983: ST_TO_ADDR
// if buildings then
29984: LD_VAR 0 18
29988: IFFALSE 31310
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
29990: LD_ADDR_VAR 0 19
29994: PUSH
29995: LD_VAR 0 18
29999: PPUSH
30000: LD_INT 2
30002: PUSH
30003: LD_INT 30
30005: PUSH
30006: LD_INT 29
30008: PUSH
30009: EMPTY
30010: LIST
30011: LIST
30012: PUSH
30013: LD_INT 30
30015: PUSH
30016: LD_INT 30
30018: PUSH
30019: EMPTY
30020: LIST
30021: LIST
30022: PUSH
30023: EMPTY
30024: LIST
30025: LIST
30026: LIST
30027: PPUSH
30028: CALL_OW 72
30032: ST_TO_ADDR
// if tmp then
30033: LD_VAR 0 19
30037: IFFALSE 30085
// for i in tmp do
30039: LD_ADDR_VAR 0 8
30043: PUSH
30044: LD_VAR 0 19
30048: PUSH
30049: FOR_IN
30050: IFFALSE 30083
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
30052: LD_VAR 0 8
30056: PPUSH
30057: CALL_OW 250
30061: PPUSH
30062: LD_VAR 0 8
30066: PPUSH
30067: CALL_OW 251
30071: PPUSH
30072: LD_VAR 0 16
30076: PPUSH
30077: CALL_OW 441
30081: GO 30049
30083: POP
30084: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
30085: LD_VAR 0 18
30089: PPUSH
30090: LD_INT 2
30092: PUSH
30093: LD_INT 30
30095: PUSH
30096: LD_INT 32
30098: PUSH
30099: EMPTY
30100: LIST
30101: LIST
30102: PUSH
30103: LD_INT 30
30105: PUSH
30106: LD_INT 33
30108: PUSH
30109: EMPTY
30110: LIST
30111: LIST
30112: PUSH
30113: EMPTY
30114: LIST
30115: LIST
30116: LIST
30117: PPUSH
30118: CALL_OW 72
30122: IFFALSE 30210
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
30124: LD_ADDR_VAR 0 8
30128: PUSH
30129: LD_VAR 0 18
30133: PPUSH
30134: LD_INT 2
30136: PUSH
30137: LD_INT 30
30139: PUSH
30140: LD_INT 32
30142: PUSH
30143: EMPTY
30144: LIST
30145: LIST
30146: PUSH
30147: LD_INT 30
30149: PUSH
30150: LD_INT 33
30152: PUSH
30153: EMPTY
30154: LIST
30155: LIST
30156: PUSH
30157: EMPTY
30158: LIST
30159: LIST
30160: LIST
30161: PPUSH
30162: CALL_OW 72
30166: PUSH
30167: FOR_IN
30168: IFFALSE 30208
// begin if not GetBWeapon ( i ) then
30170: LD_VAR 0 8
30174: PPUSH
30175: CALL_OW 269
30179: NOT
30180: IFFALSE 30206
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
30182: LD_VAR 0 8
30186: PPUSH
30187: LD_VAR 0 8
30191: PPUSH
30192: LD_VAR 0 2
30196: PPUSH
30197: CALL 31456 0 2
30201: PPUSH
30202: CALL_OW 431
// end ;
30206: GO 30167
30208: POP
30209: POP
// end ; for i = 1 to personel do
30210: LD_ADDR_VAR 0 8
30214: PUSH
30215: DOUBLE
30216: LD_INT 1
30218: DEC
30219: ST_TO_ADDR
30220: LD_VAR 0 6
30224: PUSH
30225: FOR_TO
30226: IFFALSE 31290
// begin if i > 4 then
30228: LD_VAR 0 8
30232: PUSH
30233: LD_INT 4
30235: GREATER
30236: IFFALSE 30240
// break ;
30238: GO 31290
// case i of 1 :
30240: LD_VAR 0 8
30244: PUSH
30245: LD_INT 1
30247: DOUBLE
30248: EQUAL
30249: IFTRUE 30253
30251: GO 30333
30253: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
30254: LD_ADDR_VAR 0 12
30258: PUSH
30259: LD_VAR 0 18
30263: PPUSH
30264: LD_INT 22
30266: PUSH
30267: LD_VAR 0 16
30271: PUSH
30272: EMPTY
30273: LIST
30274: LIST
30275: PUSH
30276: LD_INT 58
30278: PUSH
30279: EMPTY
30280: LIST
30281: PUSH
30282: LD_INT 2
30284: PUSH
30285: LD_INT 30
30287: PUSH
30288: LD_INT 32
30290: PUSH
30291: EMPTY
30292: LIST
30293: LIST
30294: PUSH
30295: LD_INT 30
30297: PUSH
30298: LD_INT 4
30300: PUSH
30301: EMPTY
30302: LIST
30303: LIST
30304: PUSH
30305: LD_INT 30
30307: PUSH
30308: LD_INT 5
30310: PUSH
30311: EMPTY
30312: LIST
30313: LIST
30314: PUSH
30315: EMPTY
30316: LIST
30317: LIST
30318: LIST
30319: LIST
30320: PUSH
30321: EMPTY
30322: LIST
30323: LIST
30324: LIST
30325: PPUSH
30326: CALL_OW 72
30330: ST_TO_ADDR
30331: GO 30555
30333: LD_INT 2
30335: DOUBLE
30336: EQUAL
30337: IFTRUE 30341
30339: GO 30403
30341: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
30342: LD_ADDR_VAR 0 12
30346: PUSH
30347: LD_VAR 0 18
30351: PPUSH
30352: LD_INT 22
30354: PUSH
30355: LD_VAR 0 16
30359: PUSH
30360: EMPTY
30361: LIST
30362: LIST
30363: PUSH
30364: LD_INT 2
30366: PUSH
30367: LD_INT 30
30369: PUSH
30370: LD_INT 0
30372: PUSH
30373: EMPTY
30374: LIST
30375: LIST
30376: PUSH
30377: LD_INT 30
30379: PUSH
30380: LD_INT 1
30382: PUSH
30383: EMPTY
30384: LIST
30385: LIST
30386: PUSH
30387: EMPTY
30388: LIST
30389: LIST
30390: LIST
30391: PUSH
30392: EMPTY
30393: LIST
30394: LIST
30395: PPUSH
30396: CALL_OW 72
30400: ST_TO_ADDR
30401: GO 30555
30403: LD_INT 3
30405: DOUBLE
30406: EQUAL
30407: IFTRUE 30411
30409: GO 30473
30411: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
30412: LD_ADDR_VAR 0 12
30416: PUSH
30417: LD_VAR 0 18
30421: PPUSH
30422: LD_INT 22
30424: PUSH
30425: LD_VAR 0 16
30429: PUSH
30430: EMPTY
30431: LIST
30432: LIST
30433: PUSH
30434: LD_INT 2
30436: PUSH
30437: LD_INT 30
30439: PUSH
30440: LD_INT 2
30442: PUSH
30443: EMPTY
30444: LIST
30445: LIST
30446: PUSH
30447: LD_INT 30
30449: PUSH
30450: LD_INT 3
30452: PUSH
30453: EMPTY
30454: LIST
30455: LIST
30456: PUSH
30457: EMPTY
30458: LIST
30459: LIST
30460: LIST
30461: PUSH
30462: EMPTY
30463: LIST
30464: LIST
30465: PPUSH
30466: CALL_OW 72
30470: ST_TO_ADDR
30471: GO 30555
30473: LD_INT 4
30475: DOUBLE
30476: EQUAL
30477: IFTRUE 30481
30479: GO 30554
30481: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
30482: LD_ADDR_VAR 0 12
30486: PUSH
30487: LD_VAR 0 18
30491: PPUSH
30492: LD_INT 22
30494: PUSH
30495: LD_VAR 0 16
30499: PUSH
30500: EMPTY
30501: LIST
30502: LIST
30503: PUSH
30504: LD_INT 2
30506: PUSH
30507: LD_INT 30
30509: PUSH
30510: LD_INT 6
30512: PUSH
30513: EMPTY
30514: LIST
30515: LIST
30516: PUSH
30517: LD_INT 30
30519: PUSH
30520: LD_INT 7
30522: PUSH
30523: EMPTY
30524: LIST
30525: LIST
30526: PUSH
30527: LD_INT 30
30529: PUSH
30530: LD_INT 8
30532: PUSH
30533: EMPTY
30534: LIST
30535: LIST
30536: PUSH
30537: EMPTY
30538: LIST
30539: LIST
30540: LIST
30541: LIST
30542: PUSH
30543: EMPTY
30544: LIST
30545: LIST
30546: PPUSH
30547: CALL_OW 72
30551: ST_TO_ADDR
30552: GO 30555
30554: POP
// if i = 1 then
30555: LD_VAR 0 8
30559: PUSH
30560: LD_INT 1
30562: EQUAL
30563: IFFALSE 30674
// begin tmp := [ ] ;
30565: LD_ADDR_VAR 0 19
30569: PUSH
30570: EMPTY
30571: ST_TO_ADDR
// for j in f do
30572: LD_ADDR_VAR 0 9
30576: PUSH
30577: LD_VAR 0 12
30581: PUSH
30582: FOR_IN
30583: IFFALSE 30656
// if GetBType ( j ) = b_bunker then
30585: LD_VAR 0 9
30589: PPUSH
30590: CALL_OW 266
30594: PUSH
30595: LD_INT 32
30597: EQUAL
30598: IFFALSE 30625
// tmp := Insert ( tmp , 1 , j ) else
30600: LD_ADDR_VAR 0 19
30604: PUSH
30605: LD_VAR 0 19
30609: PPUSH
30610: LD_INT 1
30612: PPUSH
30613: LD_VAR 0 9
30617: PPUSH
30618: CALL_OW 2
30622: ST_TO_ADDR
30623: GO 30654
// tmp := Insert ( tmp , tmp + 1 , j ) ;
30625: LD_ADDR_VAR 0 19
30629: PUSH
30630: LD_VAR 0 19
30634: PPUSH
30635: LD_VAR 0 19
30639: PUSH
30640: LD_INT 1
30642: PLUS
30643: PPUSH
30644: LD_VAR 0 9
30648: PPUSH
30649: CALL_OW 2
30653: ST_TO_ADDR
30654: GO 30582
30656: POP
30657: POP
// if tmp then
30658: LD_VAR 0 19
30662: IFFALSE 30674
// f := tmp ;
30664: LD_ADDR_VAR 0 12
30668: PUSH
30669: LD_VAR 0 19
30673: ST_TO_ADDR
// end ; x := personel [ i ] ;
30674: LD_ADDR_VAR 0 13
30678: PUSH
30679: LD_VAR 0 6
30683: PUSH
30684: LD_VAR 0 8
30688: ARRAY
30689: ST_TO_ADDR
// if x = - 1 then
30690: LD_VAR 0 13
30694: PUSH
30695: LD_INT 1
30697: NEG
30698: EQUAL
30699: IFFALSE 30908
// begin for j in f do
30701: LD_ADDR_VAR 0 9
30705: PUSH
30706: LD_VAR 0 12
30710: PUSH
30711: FOR_IN
30712: IFFALSE 30904
// repeat InitHc ;
30714: CALL_OW 19
// if GetBType ( j ) = b_barracks then
30718: LD_VAR 0 9
30722: PPUSH
30723: CALL_OW 266
30727: PUSH
30728: LD_INT 5
30730: EQUAL
30731: IFFALSE 30801
// begin if UnitsInside ( j ) < 3 then
30733: LD_VAR 0 9
30737: PPUSH
30738: CALL_OW 313
30742: PUSH
30743: LD_INT 3
30745: LESS
30746: IFFALSE 30782
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30748: LD_INT 0
30750: PPUSH
30751: LD_INT 5
30753: PUSH
30754: LD_INT 8
30756: PUSH
30757: LD_INT 9
30759: PUSH
30760: EMPTY
30761: LIST
30762: LIST
30763: LIST
30764: PUSH
30765: LD_VAR 0 17
30769: ARRAY
30770: PPUSH
30771: LD_VAR 0 4
30775: PPUSH
30776: CALL_OW 380
30780: GO 30799
// PrepareHuman ( false , i , skill ) ;
30782: LD_INT 0
30784: PPUSH
30785: LD_VAR 0 8
30789: PPUSH
30790: LD_VAR 0 4
30794: PPUSH
30795: CALL_OW 380
// end else
30799: GO 30818
// PrepareHuman ( false , i , skill ) ;
30801: LD_INT 0
30803: PPUSH
30804: LD_VAR 0 8
30808: PPUSH
30809: LD_VAR 0 4
30813: PPUSH
30814: CALL_OW 380
// un := CreateHuman ;
30818: LD_ADDR_VAR 0 14
30822: PUSH
30823: CALL_OW 44
30827: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30828: LD_ADDR_VAR 0 7
30832: PUSH
30833: LD_VAR 0 7
30837: PPUSH
30838: LD_INT 1
30840: PPUSH
30841: LD_VAR 0 14
30845: PPUSH
30846: CALL_OW 2
30850: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
30851: LD_VAR 0 14
30855: PPUSH
30856: LD_VAR 0 9
30860: PPUSH
30861: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
30865: LD_VAR 0 9
30869: PPUSH
30870: CALL_OW 313
30874: PUSH
30875: LD_INT 6
30877: EQUAL
30878: PUSH
30879: LD_VAR 0 9
30883: PPUSH
30884: CALL_OW 266
30888: PUSH
30889: LD_INT 32
30891: PUSH
30892: LD_INT 31
30894: PUSH
30895: EMPTY
30896: LIST
30897: LIST
30898: IN
30899: OR
30900: IFFALSE 30714
30902: GO 30711
30904: POP
30905: POP
// end else
30906: GO 31288
// for j = 1 to x do
30908: LD_ADDR_VAR 0 9
30912: PUSH
30913: DOUBLE
30914: LD_INT 1
30916: DEC
30917: ST_TO_ADDR
30918: LD_VAR 0 13
30922: PUSH
30923: FOR_TO
30924: IFFALSE 31286
// begin InitHc ;
30926: CALL_OW 19
// if not f then
30930: LD_VAR 0 12
30934: NOT
30935: IFFALSE 31024
// begin PrepareHuman ( false , i , skill ) ;
30937: LD_INT 0
30939: PPUSH
30940: LD_VAR 0 8
30944: PPUSH
30945: LD_VAR 0 4
30949: PPUSH
30950: CALL_OW 380
// un := CreateHuman ;
30954: LD_ADDR_VAR 0 14
30958: PUSH
30959: CALL_OW 44
30963: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30964: LD_ADDR_VAR 0 7
30968: PUSH
30969: LD_VAR 0 7
30973: PPUSH
30974: LD_INT 1
30976: PPUSH
30977: LD_VAR 0 14
30981: PPUSH
30982: CALL_OW 2
30986: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30987: LD_VAR 0 14
30991: PPUSH
30992: LD_VAR 0 1
30996: PPUSH
30997: CALL_OW 250
31001: PPUSH
31002: LD_VAR 0 1
31006: PPUSH
31007: CALL_OW 251
31011: PPUSH
31012: LD_INT 10
31014: PPUSH
31015: LD_INT 0
31017: PPUSH
31018: CALL_OW 50
// continue ;
31022: GO 30923
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
31024: LD_VAR 0 12
31028: PUSH
31029: LD_INT 1
31031: ARRAY
31032: PPUSH
31033: CALL_OW 313
31037: PUSH
31038: LD_VAR 0 12
31042: PUSH
31043: LD_INT 1
31045: ARRAY
31046: PPUSH
31047: CALL_OW 266
31051: PUSH
31052: LD_INT 32
31054: PUSH
31055: LD_INT 31
31057: PUSH
31058: EMPTY
31059: LIST
31060: LIST
31061: IN
31062: AND
31063: PUSH
31064: LD_VAR 0 12
31068: PUSH
31069: LD_INT 1
31071: ARRAY
31072: PPUSH
31073: CALL_OW 313
31077: PUSH
31078: LD_INT 6
31080: EQUAL
31081: OR
31082: IFFALSE 31102
// f := Delete ( f , 1 ) ;
31084: LD_ADDR_VAR 0 12
31088: PUSH
31089: LD_VAR 0 12
31093: PPUSH
31094: LD_INT 1
31096: PPUSH
31097: CALL_OW 3
31101: ST_TO_ADDR
// if not f then
31102: LD_VAR 0 12
31106: NOT
31107: IFFALSE 31125
// begin x := x + 2 ;
31109: LD_ADDR_VAR 0 13
31113: PUSH
31114: LD_VAR 0 13
31118: PUSH
31119: LD_INT 2
31121: PLUS
31122: ST_TO_ADDR
// continue ;
31123: GO 30923
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
31125: LD_VAR 0 12
31129: PUSH
31130: LD_INT 1
31132: ARRAY
31133: PPUSH
31134: CALL_OW 266
31138: PUSH
31139: LD_INT 5
31141: EQUAL
31142: IFFALSE 31216
// begin if UnitsInside ( f [ 1 ] ) < 3 then
31144: LD_VAR 0 12
31148: PUSH
31149: LD_INT 1
31151: ARRAY
31152: PPUSH
31153: CALL_OW 313
31157: PUSH
31158: LD_INT 3
31160: LESS
31161: IFFALSE 31197
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31163: LD_INT 0
31165: PPUSH
31166: LD_INT 5
31168: PUSH
31169: LD_INT 8
31171: PUSH
31172: LD_INT 9
31174: PUSH
31175: EMPTY
31176: LIST
31177: LIST
31178: LIST
31179: PUSH
31180: LD_VAR 0 17
31184: ARRAY
31185: PPUSH
31186: LD_VAR 0 4
31190: PPUSH
31191: CALL_OW 380
31195: GO 31214
// PrepareHuman ( false , i , skill ) ;
31197: LD_INT 0
31199: PPUSH
31200: LD_VAR 0 8
31204: PPUSH
31205: LD_VAR 0 4
31209: PPUSH
31210: CALL_OW 380
// end else
31214: GO 31233
// PrepareHuman ( false , i , skill ) ;
31216: LD_INT 0
31218: PPUSH
31219: LD_VAR 0 8
31223: PPUSH
31224: LD_VAR 0 4
31228: PPUSH
31229: CALL_OW 380
// un := CreateHuman ;
31233: LD_ADDR_VAR 0 14
31237: PUSH
31238: CALL_OW 44
31242: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31243: LD_ADDR_VAR 0 7
31247: PUSH
31248: LD_VAR 0 7
31252: PPUSH
31253: LD_INT 1
31255: PPUSH
31256: LD_VAR 0 14
31260: PPUSH
31261: CALL_OW 2
31265: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
31266: LD_VAR 0 14
31270: PPUSH
31271: LD_VAR 0 12
31275: PUSH
31276: LD_INT 1
31278: ARRAY
31279: PPUSH
31280: CALL_OW 52
// end ;
31284: GO 30923
31286: POP
31287: POP
// end ;
31288: GO 30225
31290: POP
31291: POP
// result := result ^ buildings ;
31292: LD_ADDR_VAR 0 7
31296: PUSH
31297: LD_VAR 0 7
31301: PUSH
31302: LD_VAR 0 18
31306: ADD
31307: ST_TO_ADDR
// end else
31308: GO 31451
// begin for i = 1 to personel do
31310: LD_ADDR_VAR 0 8
31314: PUSH
31315: DOUBLE
31316: LD_INT 1
31318: DEC
31319: ST_TO_ADDR
31320: LD_VAR 0 6
31324: PUSH
31325: FOR_TO
31326: IFFALSE 31449
// begin if i > 4 then
31328: LD_VAR 0 8
31332: PUSH
31333: LD_INT 4
31335: GREATER
31336: IFFALSE 31340
// break ;
31338: GO 31449
// x := personel [ i ] ;
31340: LD_ADDR_VAR 0 13
31344: PUSH
31345: LD_VAR 0 6
31349: PUSH
31350: LD_VAR 0 8
31354: ARRAY
31355: ST_TO_ADDR
// if x = - 1 then
31356: LD_VAR 0 13
31360: PUSH
31361: LD_INT 1
31363: NEG
31364: EQUAL
31365: IFFALSE 31369
// continue ;
31367: GO 31325
// PrepareHuman ( false , i , skill ) ;
31369: LD_INT 0
31371: PPUSH
31372: LD_VAR 0 8
31376: PPUSH
31377: LD_VAR 0 4
31381: PPUSH
31382: CALL_OW 380
// un := CreateHuman ;
31386: LD_ADDR_VAR 0 14
31390: PUSH
31391: CALL_OW 44
31395: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31396: LD_VAR 0 14
31400: PPUSH
31401: LD_VAR 0 1
31405: PPUSH
31406: CALL_OW 250
31410: PPUSH
31411: LD_VAR 0 1
31415: PPUSH
31416: CALL_OW 251
31420: PPUSH
31421: LD_INT 10
31423: PPUSH
31424: LD_INT 0
31426: PPUSH
31427: CALL_OW 50
// result := result ^ un ;
31431: LD_ADDR_VAR 0 7
31435: PUSH
31436: LD_VAR 0 7
31440: PUSH
31441: LD_VAR 0 14
31445: ADD
31446: ST_TO_ADDR
// end ;
31447: GO 31325
31449: POP
31450: POP
// end ; end ;
31451: LD_VAR 0 7
31455: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
31456: LD_INT 0
31458: PPUSH
31459: PPUSH
31460: PPUSH
31461: PPUSH
31462: PPUSH
31463: PPUSH
31464: PPUSH
31465: PPUSH
31466: PPUSH
31467: PPUSH
31468: PPUSH
31469: PPUSH
31470: PPUSH
31471: PPUSH
31472: PPUSH
31473: PPUSH
// result := false ;
31474: LD_ADDR_VAR 0 3
31478: PUSH
31479: LD_INT 0
31481: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
31482: LD_VAR 0 1
31486: NOT
31487: PUSH
31488: LD_VAR 0 1
31492: PPUSH
31493: CALL_OW 266
31497: PUSH
31498: LD_INT 32
31500: PUSH
31501: LD_INT 33
31503: PUSH
31504: EMPTY
31505: LIST
31506: LIST
31507: IN
31508: NOT
31509: OR
31510: IFFALSE 31514
// exit ;
31512: GO 32650
// nat := GetNation ( tower ) ;
31514: LD_ADDR_VAR 0 12
31518: PUSH
31519: LD_VAR 0 1
31523: PPUSH
31524: CALL_OW 248
31528: ST_TO_ADDR
// side := GetSide ( tower ) ;
31529: LD_ADDR_VAR 0 16
31533: PUSH
31534: LD_VAR 0 1
31538: PPUSH
31539: CALL_OW 255
31543: ST_TO_ADDR
// x := GetX ( tower ) ;
31544: LD_ADDR_VAR 0 10
31548: PUSH
31549: LD_VAR 0 1
31553: PPUSH
31554: CALL_OW 250
31558: ST_TO_ADDR
// y := GetY ( tower ) ;
31559: LD_ADDR_VAR 0 11
31563: PUSH
31564: LD_VAR 0 1
31568: PPUSH
31569: CALL_OW 251
31573: ST_TO_ADDR
// if not x or not y then
31574: LD_VAR 0 10
31578: NOT
31579: PUSH
31580: LD_VAR 0 11
31584: NOT
31585: OR
31586: IFFALSE 31590
// exit ;
31588: GO 32650
// weapon := 0 ;
31590: LD_ADDR_VAR 0 18
31594: PUSH
31595: LD_INT 0
31597: ST_TO_ADDR
// fac_list := [ ] ;
31598: LD_ADDR_VAR 0 17
31602: PUSH
31603: EMPTY
31604: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
31605: LD_ADDR_VAR 0 6
31609: PUSH
31610: LD_VAR 0 1
31614: PPUSH
31615: CALL_OW 274
31619: PPUSH
31620: LD_VAR 0 2
31624: PPUSH
31625: CALL 29228 0 2
31629: PPUSH
31630: LD_INT 30
31632: PUSH
31633: LD_INT 3
31635: PUSH
31636: EMPTY
31637: LIST
31638: LIST
31639: PPUSH
31640: CALL_OW 72
31644: ST_TO_ADDR
// if not factories then
31645: LD_VAR 0 6
31649: NOT
31650: IFFALSE 31654
// exit ;
31652: GO 32650
// for i in factories do
31654: LD_ADDR_VAR 0 8
31658: PUSH
31659: LD_VAR 0 6
31663: PUSH
31664: FOR_IN
31665: IFFALSE 31690
// fac_list := fac_list union AvailableWeaponList ( i ) ;
31667: LD_ADDR_VAR 0 17
31671: PUSH
31672: LD_VAR 0 17
31676: PUSH
31677: LD_VAR 0 8
31681: PPUSH
31682: CALL_OW 478
31686: UNION
31687: ST_TO_ADDR
31688: GO 31664
31690: POP
31691: POP
// if not fac_list then
31692: LD_VAR 0 17
31696: NOT
31697: IFFALSE 31701
// exit ;
31699: GO 32650
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
31701: LD_ADDR_VAR 0 5
31705: PUSH
31706: LD_INT 4
31708: PUSH
31709: LD_INT 5
31711: PUSH
31712: LD_INT 9
31714: PUSH
31715: LD_INT 10
31717: PUSH
31718: LD_INT 6
31720: PUSH
31721: LD_INT 7
31723: PUSH
31724: LD_INT 11
31726: PUSH
31727: EMPTY
31728: LIST
31729: LIST
31730: LIST
31731: LIST
31732: LIST
31733: LIST
31734: LIST
31735: PUSH
31736: LD_INT 27
31738: PUSH
31739: LD_INT 28
31741: PUSH
31742: LD_INT 26
31744: PUSH
31745: LD_INT 30
31747: PUSH
31748: EMPTY
31749: LIST
31750: LIST
31751: LIST
31752: LIST
31753: PUSH
31754: LD_INT 43
31756: PUSH
31757: LD_INT 44
31759: PUSH
31760: LD_INT 46
31762: PUSH
31763: LD_INT 45
31765: PUSH
31766: LD_INT 47
31768: PUSH
31769: LD_INT 49
31771: PUSH
31772: EMPTY
31773: LIST
31774: LIST
31775: LIST
31776: LIST
31777: LIST
31778: LIST
31779: PUSH
31780: EMPTY
31781: LIST
31782: LIST
31783: LIST
31784: PUSH
31785: LD_VAR 0 12
31789: ARRAY
31790: ST_TO_ADDR
// for i in list do
31791: LD_ADDR_VAR 0 8
31795: PUSH
31796: LD_VAR 0 5
31800: PUSH
31801: FOR_IN
31802: IFFALSE 31835
// if not i in fac_list then
31804: LD_VAR 0 8
31808: PUSH
31809: LD_VAR 0 17
31813: IN
31814: NOT
31815: IFFALSE 31833
// list := list diff i ;
31817: LD_ADDR_VAR 0 5
31821: PUSH
31822: LD_VAR 0 5
31826: PUSH
31827: LD_VAR 0 8
31831: DIFF
31832: ST_TO_ADDR
31833: GO 31801
31835: POP
31836: POP
// if not list then
31837: LD_VAR 0 5
31841: NOT
31842: IFFALSE 31846
// exit ;
31844: GO 32650
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
31846: LD_VAR 0 12
31850: PUSH
31851: LD_INT 3
31853: EQUAL
31854: PUSH
31855: LD_INT 49
31857: PUSH
31858: LD_VAR 0 5
31862: IN
31863: AND
31864: PUSH
31865: LD_INT 31
31867: PPUSH
31868: LD_VAR 0 16
31872: PPUSH
31873: CALL_OW 321
31877: PUSH
31878: LD_INT 2
31880: EQUAL
31881: AND
31882: IFFALSE 31942
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
31884: LD_INT 22
31886: PUSH
31887: LD_VAR 0 16
31891: PUSH
31892: EMPTY
31893: LIST
31894: LIST
31895: PUSH
31896: LD_INT 35
31898: PUSH
31899: LD_INT 49
31901: PUSH
31902: EMPTY
31903: LIST
31904: LIST
31905: PUSH
31906: LD_INT 91
31908: PUSH
31909: LD_VAR 0 1
31913: PUSH
31914: LD_INT 10
31916: PUSH
31917: EMPTY
31918: LIST
31919: LIST
31920: LIST
31921: PUSH
31922: EMPTY
31923: LIST
31924: LIST
31925: LIST
31926: PPUSH
31927: CALL_OW 69
31931: NOT
31932: IFFALSE 31942
// weapon := ru_time_lapser ;
31934: LD_ADDR_VAR 0 18
31938: PUSH
31939: LD_INT 49
31941: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
31942: LD_VAR 0 12
31946: PUSH
31947: LD_INT 1
31949: PUSH
31950: LD_INT 2
31952: PUSH
31953: EMPTY
31954: LIST
31955: LIST
31956: IN
31957: PUSH
31958: LD_INT 11
31960: PUSH
31961: LD_VAR 0 5
31965: IN
31966: PUSH
31967: LD_INT 30
31969: PUSH
31970: LD_VAR 0 5
31974: IN
31975: OR
31976: AND
31977: PUSH
31978: LD_INT 6
31980: PPUSH
31981: LD_VAR 0 16
31985: PPUSH
31986: CALL_OW 321
31990: PUSH
31991: LD_INT 2
31993: EQUAL
31994: AND
31995: IFFALSE 32160
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
31997: LD_INT 22
31999: PUSH
32000: LD_VAR 0 16
32004: PUSH
32005: EMPTY
32006: LIST
32007: LIST
32008: PUSH
32009: LD_INT 2
32011: PUSH
32012: LD_INT 35
32014: PUSH
32015: LD_INT 11
32017: PUSH
32018: EMPTY
32019: LIST
32020: LIST
32021: PUSH
32022: LD_INT 35
32024: PUSH
32025: LD_INT 30
32027: PUSH
32028: EMPTY
32029: LIST
32030: LIST
32031: PUSH
32032: EMPTY
32033: LIST
32034: LIST
32035: LIST
32036: PUSH
32037: LD_INT 91
32039: PUSH
32040: LD_VAR 0 1
32044: PUSH
32045: LD_INT 18
32047: PUSH
32048: EMPTY
32049: LIST
32050: LIST
32051: LIST
32052: PUSH
32053: EMPTY
32054: LIST
32055: LIST
32056: LIST
32057: PPUSH
32058: CALL_OW 69
32062: NOT
32063: PUSH
32064: LD_INT 22
32066: PUSH
32067: LD_VAR 0 16
32071: PUSH
32072: EMPTY
32073: LIST
32074: LIST
32075: PUSH
32076: LD_INT 2
32078: PUSH
32079: LD_INT 30
32081: PUSH
32082: LD_INT 32
32084: PUSH
32085: EMPTY
32086: LIST
32087: LIST
32088: PUSH
32089: LD_INT 30
32091: PUSH
32092: LD_INT 33
32094: PUSH
32095: EMPTY
32096: LIST
32097: LIST
32098: PUSH
32099: EMPTY
32100: LIST
32101: LIST
32102: LIST
32103: PUSH
32104: LD_INT 91
32106: PUSH
32107: LD_VAR 0 1
32111: PUSH
32112: LD_INT 12
32114: PUSH
32115: EMPTY
32116: LIST
32117: LIST
32118: LIST
32119: PUSH
32120: EMPTY
32121: LIST
32122: LIST
32123: LIST
32124: PUSH
32125: EMPTY
32126: LIST
32127: PPUSH
32128: CALL_OW 69
32132: PUSH
32133: LD_INT 2
32135: GREATER
32136: AND
32137: IFFALSE 32160
// weapon := [ us_radar , ar_radar ] [ nat ] ;
32139: LD_ADDR_VAR 0 18
32143: PUSH
32144: LD_INT 11
32146: PUSH
32147: LD_INT 30
32149: PUSH
32150: EMPTY
32151: LIST
32152: LIST
32153: PUSH
32154: LD_VAR 0 12
32158: ARRAY
32159: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
32160: LD_VAR 0 18
32164: NOT
32165: PUSH
32166: LD_INT 40
32168: PPUSH
32169: LD_VAR 0 16
32173: PPUSH
32174: CALL_OW 321
32178: PUSH
32179: LD_INT 2
32181: EQUAL
32182: AND
32183: PUSH
32184: LD_INT 7
32186: PUSH
32187: LD_VAR 0 5
32191: IN
32192: PUSH
32193: LD_INT 28
32195: PUSH
32196: LD_VAR 0 5
32200: IN
32201: OR
32202: PUSH
32203: LD_INT 45
32205: PUSH
32206: LD_VAR 0 5
32210: IN
32211: OR
32212: AND
32213: IFFALSE 32467
// begin hex := GetHexInfo ( x , y ) ;
32215: LD_ADDR_VAR 0 4
32219: PUSH
32220: LD_VAR 0 10
32224: PPUSH
32225: LD_VAR 0 11
32229: PPUSH
32230: CALL_OW 546
32234: ST_TO_ADDR
// if hex [ 1 ] then
32235: LD_VAR 0 4
32239: PUSH
32240: LD_INT 1
32242: ARRAY
32243: IFFALSE 32247
// exit ;
32245: GO 32650
// height := hex [ 2 ] ;
32247: LD_ADDR_VAR 0 15
32251: PUSH
32252: LD_VAR 0 4
32256: PUSH
32257: LD_INT 2
32259: ARRAY
32260: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
32261: LD_ADDR_VAR 0 14
32265: PUSH
32266: LD_INT 0
32268: PUSH
32269: LD_INT 2
32271: PUSH
32272: LD_INT 3
32274: PUSH
32275: LD_INT 5
32277: PUSH
32278: EMPTY
32279: LIST
32280: LIST
32281: LIST
32282: LIST
32283: ST_TO_ADDR
// for i in tmp do
32284: LD_ADDR_VAR 0 8
32288: PUSH
32289: LD_VAR 0 14
32293: PUSH
32294: FOR_IN
32295: IFFALSE 32465
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
32297: LD_ADDR_VAR 0 9
32301: PUSH
32302: LD_VAR 0 10
32306: PPUSH
32307: LD_VAR 0 8
32311: PPUSH
32312: LD_INT 5
32314: PPUSH
32315: CALL_OW 272
32319: PUSH
32320: LD_VAR 0 11
32324: PPUSH
32325: LD_VAR 0 8
32329: PPUSH
32330: LD_INT 5
32332: PPUSH
32333: CALL_OW 273
32337: PUSH
32338: EMPTY
32339: LIST
32340: LIST
32341: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
32342: LD_VAR 0 9
32346: PUSH
32347: LD_INT 1
32349: ARRAY
32350: PPUSH
32351: LD_VAR 0 9
32355: PUSH
32356: LD_INT 2
32358: ARRAY
32359: PPUSH
32360: CALL_OW 488
32364: IFFALSE 32463
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
32366: LD_ADDR_VAR 0 4
32370: PUSH
32371: LD_VAR 0 9
32375: PUSH
32376: LD_INT 1
32378: ARRAY
32379: PPUSH
32380: LD_VAR 0 9
32384: PUSH
32385: LD_INT 2
32387: ARRAY
32388: PPUSH
32389: CALL_OW 546
32393: ST_TO_ADDR
// if hex [ 1 ] then
32394: LD_VAR 0 4
32398: PUSH
32399: LD_INT 1
32401: ARRAY
32402: IFFALSE 32406
// continue ;
32404: GO 32294
// h := hex [ 2 ] ;
32406: LD_ADDR_VAR 0 13
32410: PUSH
32411: LD_VAR 0 4
32415: PUSH
32416: LD_INT 2
32418: ARRAY
32419: ST_TO_ADDR
// if h + 7 < height then
32420: LD_VAR 0 13
32424: PUSH
32425: LD_INT 7
32427: PLUS
32428: PUSH
32429: LD_VAR 0 15
32433: LESS
32434: IFFALSE 32463
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
32436: LD_ADDR_VAR 0 18
32440: PUSH
32441: LD_INT 7
32443: PUSH
32444: LD_INT 28
32446: PUSH
32447: LD_INT 45
32449: PUSH
32450: EMPTY
32451: LIST
32452: LIST
32453: LIST
32454: PUSH
32455: LD_VAR 0 12
32459: ARRAY
32460: ST_TO_ADDR
// break ;
32461: GO 32465
// end ; end ; end ;
32463: GO 32294
32465: POP
32466: POP
// end ; if not weapon then
32467: LD_VAR 0 18
32471: NOT
32472: IFFALSE 32532
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
32474: LD_ADDR_VAR 0 5
32478: PUSH
32479: LD_VAR 0 5
32483: PUSH
32484: LD_INT 11
32486: PUSH
32487: LD_INT 30
32489: PUSH
32490: LD_INT 49
32492: PUSH
32493: EMPTY
32494: LIST
32495: LIST
32496: LIST
32497: DIFF
32498: ST_TO_ADDR
// if not list then
32499: LD_VAR 0 5
32503: NOT
32504: IFFALSE 32508
// exit ;
32506: GO 32650
// weapon := list [ rand ( 1 , list ) ] ;
32508: LD_ADDR_VAR 0 18
32512: PUSH
32513: LD_VAR 0 5
32517: PUSH
32518: LD_INT 1
32520: PPUSH
32521: LD_VAR 0 5
32525: PPUSH
32526: CALL_OW 12
32530: ARRAY
32531: ST_TO_ADDR
// end ; if weapon then
32532: LD_VAR 0 18
32536: IFFALSE 32650
// begin tmp := CostOfWeapon ( weapon ) ;
32538: LD_ADDR_VAR 0 14
32542: PUSH
32543: LD_VAR 0 18
32547: PPUSH
32548: CALL_OW 451
32552: ST_TO_ADDR
// j := GetBase ( tower ) ;
32553: LD_ADDR_VAR 0 9
32557: PUSH
32558: LD_VAR 0 1
32562: PPUSH
32563: CALL_OW 274
32567: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
32568: LD_VAR 0 9
32572: PPUSH
32573: LD_INT 1
32575: PPUSH
32576: CALL_OW 275
32580: PUSH
32581: LD_VAR 0 14
32585: PUSH
32586: LD_INT 1
32588: ARRAY
32589: GREATEREQUAL
32590: PUSH
32591: LD_VAR 0 9
32595: PPUSH
32596: LD_INT 2
32598: PPUSH
32599: CALL_OW 275
32603: PUSH
32604: LD_VAR 0 14
32608: PUSH
32609: LD_INT 2
32611: ARRAY
32612: GREATEREQUAL
32613: AND
32614: PUSH
32615: LD_VAR 0 9
32619: PPUSH
32620: LD_INT 3
32622: PPUSH
32623: CALL_OW 275
32627: PUSH
32628: LD_VAR 0 14
32632: PUSH
32633: LD_INT 3
32635: ARRAY
32636: GREATEREQUAL
32637: AND
32638: IFFALSE 32650
// result := weapon ;
32640: LD_ADDR_VAR 0 3
32644: PUSH
32645: LD_VAR 0 18
32649: ST_TO_ADDR
// end ; end ;
32650: LD_VAR 0 3
32654: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
32655: LD_INT 0
32657: PPUSH
32658: PPUSH
// result := true ;
32659: LD_ADDR_VAR 0 3
32663: PUSH
32664: LD_INT 1
32666: ST_TO_ADDR
// if array1 = array2 then
32667: LD_VAR 0 1
32671: PUSH
32672: LD_VAR 0 2
32676: EQUAL
32677: IFFALSE 32737
// begin for i = 1 to array1 do
32679: LD_ADDR_VAR 0 4
32683: PUSH
32684: DOUBLE
32685: LD_INT 1
32687: DEC
32688: ST_TO_ADDR
32689: LD_VAR 0 1
32693: PUSH
32694: FOR_TO
32695: IFFALSE 32733
// if array1 [ i ] <> array2 [ i ] then
32697: LD_VAR 0 1
32701: PUSH
32702: LD_VAR 0 4
32706: ARRAY
32707: PUSH
32708: LD_VAR 0 2
32712: PUSH
32713: LD_VAR 0 4
32717: ARRAY
32718: NONEQUAL
32719: IFFALSE 32731
// begin result := false ;
32721: LD_ADDR_VAR 0 3
32725: PUSH
32726: LD_INT 0
32728: ST_TO_ADDR
// break ;
32729: GO 32733
// end ;
32731: GO 32694
32733: POP
32734: POP
// end else
32735: GO 32745
// result := false ;
32737: LD_ADDR_VAR 0 3
32741: PUSH
32742: LD_INT 0
32744: ST_TO_ADDR
// end ;
32745: LD_VAR 0 3
32749: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
32750: LD_INT 0
32752: PPUSH
32753: PPUSH
32754: PPUSH
// pom := GetBase ( fac ) ;
32755: LD_ADDR_VAR 0 5
32759: PUSH
32760: LD_VAR 0 1
32764: PPUSH
32765: CALL_OW 274
32769: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
32770: LD_ADDR_VAR 0 4
32774: PUSH
32775: LD_VAR 0 2
32779: PUSH
32780: LD_INT 1
32782: ARRAY
32783: PPUSH
32784: LD_VAR 0 2
32788: PUSH
32789: LD_INT 2
32791: ARRAY
32792: PPUSH
32793: LD_VAR 0 2
32797: PUSH
32798: LD_INT 3
32800: ARRAY
32801: PPUSH
32802: LD_VAR 0 2
32806: PUSH
32807: LD_INT 4
32809: ARRAY
32810: PPUSH
32811: CALL_OW 449
32815: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32816: LD_ADDR_VAR 0 3
32820: PUSH
32821: LD_VAR 0 5
32825: PPUSH
32826: LD_INT 1
32828: PPUSH
32829: CALL_OW 275
32833: PUSH
32834: LD_VAR 0 4
32838: PUSH
32839: LD_INT 1
32841: ARRAY
32842: GREATEREQUAL
32843: PUSH
32844: LD_VAR 0 5
32848: PPUSH
32849: LD_INT 2
32851: PPUSH
32852: CALL_OW 275
32856: PUSH
32857: LD_VAR 0 4
32861: PUSH
32862: LD_INT 2
32864: ARRAY
32865: GREATEREQUAL
32866: AND
32867: PUSH
32868: LD_VAR 0 5
32872: PPUSH
32873: LD_INT 3
32875: PPUSH
32876: CALL_OW 275
32880: PUSH
32881: LD_VAR 0 4
32885: PUSH
32886: LD_INT 3
32888: ARRAY
32889: GREATEREQUAL
32890: AND
32891: ST_TO_ADDR
// end ;
32892: LD_VAR 0 3
32896: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
32897: LD_INT 0
32899: PPUSH
32900: PPUSH
32901: PPUSH
32902: PPUSH
// pom := GetBase ( building ) ;
32903: LD_ADDR_VAR 0 3
32907: PUSH
32908: LD_VAR 0 1
32912: PPUSH
32913: CALL_OW 274
32917: ST_TO_ADDR
// if not pom then
32918: LD_VAR 0 3
32922: NOT
32923: IFFALSE 32927
// exit ;
32925: GO 33097
// btype := GetBType ( building ) ;
32927: LD_ADDR_VAR 0 5
32931: PUSH
32932: LD_VAR 0 1
32936: PPUSH
32937: CALL_OW 266
32941: ST_TO_ADDR
// if btype = b_armoury then
32942: LD_VAR 0 5
32946: PUSH
32947: LD_INT 4
32949: EQUAL
32950: IFFALSE 32960
// btype := b_barracks ;
32952: LD_ADDR_VAR 0 5
32956: PUSH
32957: LD_INT 5
32959: ST_TO_ADDR
// if btype = b_depot then
32960: LD_VAR 0 5
32964: PUSH
32965: LD_INT 0
32967: EQUAL
32968: IFFALSE 32978
// btype := b_warehouse ;
32970: LD_ADDR_VAR 0 5
32974: PUSH
32975: LD_INT 1
32977: ST_TO_ADDR
// if btype = b_workshop then
32978: LD_VAR 0 5
32982: PUSH
32983: LD_INT 2
32985: EQUAL
32986: IFFALSE 32996
// btype := b_factory ;
32988: LD_ADDR_VAR 0 5
32992: PUSH
32993: LD_INT 3
32995: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32996: LD_ADDR_VAR 0 4
33000: PUSH
33001: LD_VAR 0 5
33005: PPUSH
33006: LD_VAR 0 1
33010: PPUSH
33011: CALL_OW 248
33015: PPUSH
33016: CALL_OW 450
33020: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33021: LD_ADDR_VAR 0 2
33025: PUSH
33026: LD_VAR 0 3
33030: PPUSH
33031: LD_INT 1
33033: PPUSH
33034: CALL_OW 275
33038: PUSH
33039: LD_VAR 0 4
33043: PUSH
33044: LD_INT 1
33046: ARRAY
33047: GREATEREQUAL
33048: PUSH
33049: LD_VAR 0 3
33053: PPUSH
33054: LD_INT 2
33056: PPUSH
33057: CALL_OW 275
33061: PUSH
33062: LD_VAR 0 4
33066: PUSH
33067: LD_INT 2
33069: ARRAY
33070: GREATEREQUAL
33071: AND
33072: PUSH
33073: LD_VAR 0 3
33077: PPUSH
33078: LD_INT 3
33080: PPUSH
33081: CALL_OW 275
33085: PUSH
33086: LD_VAR 0 4
33090: PUSH
33091: LD_INT 3
33093: ARRAY
33094: GREATEREQUAL
33095: AND
33096: ST_TO_ADDR
// end ;
33097: LD_VAR 0 2
33101: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
33102: LD_INT 0
33104: PPUSH
33105: PPUSH
33106: PPUSH
// pom := GetBase ( building ) ;
33107: LD_ADDR_VAR 0 4
33111: PUSH
33112: LD_VAR 0 1
33116: PPUSH
33117: CALL_OW 274
33121: ST_TO_ADDR
// if not pom then
33122: LD_VAR 0 4
33126: NOT
33127: IFFALSE 33131
// exit ;
33129: GO 33232
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33131: LD_ADDR_VAR 0 5
33135: PUSH
33136: LD_VAR 0 2
33140: PPUSH
33141: LD_VAR 0 1
33145: PPUSH
33146: CALL_OW 248
33150: PPUSH
33151: CALL_OW 450
33155: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33156: LD_ADDR_VAR 0 3
33160: PUSH
33161: LD_VAR 0 4
33165: PPUSH
33166: LD_INT 1
33168: PPUSH
33169: CALL_OW 275
33173: PUSH
33174: LD_VAR 0 5
33178: PUSH
33179: LD_INT 1
33181: ARRAY
33182: GREATEREQUAL
33183: PUSH
33184: LD_VAR 0 4
33188: PPUSH
33189: LD_INT 2
33191: PPUSH
33192: CALL_OW 275
33196: PUSH
33197: LD_VAR 0 5
33201: PUSH
33202: LD_INT 2
33204: ARRAY
33205: GREATEREQUAL
33206: AND
33207: PUSH
33208: LD_VAR 0 4
33212: PPUSH
33213: LD_INT 3
33215: PPUSH
33216: CALL_OW 275
33220: PUSH
33221: LD_VAR 0 5
33225: PUSH
33226: LD_INT 3
33228: ARRAY
33229: GREATEREQUAL
33230: AND
33231: ST_TO_ADDR
// end ;
33232: LD_VAR 0 3
33236: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
33237: LD_INT 0
33239: PPUSH
33240: PPUSH
33241: PPUSH
33242: PPUSH
33243: PPUSH
33244: PPUSH
33245: PPUSH
33246: PPUSH
33247: PPUSH
33248: PPUSH
// result := false ;
33249: LD_ADDR_VAR 0 6
33253: PUSH
33254: LD_INT 0
33256: ST_TO_ADDR
// if not base or not btype or not x or not y then
33257: LD_VAR 0 1
33261: NOT
33262: PUSH
33263: LD_VAR 0 2
33267: NOT
33268: OR
33269: PUSH
33270: LD_VAR 0 3
33274: NOT
33275: OR
33276: PUSH
33277: LD_VAR 0 4
33281: NOT
33282: OR
33283: IFFALSE 33287
// exit ;
33285: GO 33896
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
33287: LD_ADDR_VAR 0 12
33291: PUSH
33292: LD_VAR 0 2
33296: PPUSH
33297: LD_VAR 0 3
33301: PPUSH
33302: LD_VAR 0 4
33306: PPUSH
33307: LD_VAR 0 5
33311: PPUSH
33312: LD_VAR 0 1
33316: PUSH
33317: LD_INT 1
33319: ARRAY
33320: PPUSH
33321: CALL_OW 248
33325: PPUSH
33326: LD_INT 0
33328: PPUSH
33329: CALL 34733 0 6
33333: ST_TO_ADDR
// if not hexes then
33334: LD_VAR 0 12
33338: NOT
33339: IFFALSE 33343
// exit ;
33341: GO 33896
// for i = 1 to hexes do
33343: LD_ADDR_VAR 0 7
33347: PUSH
33348: DOUBLE
33349: LD_INT 1
33351: DEC
33352: ST_TO_ADDR
33353: LD_VAR 0 12
33357: PUSH
33358: FOR_TO
33359: IFFALSE 33894
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33361: LD_ADDR_VAR 0 11
33365: PUSH
33366: LD_VAR 0 12
33370: PUSH
33371: LD_VAR 0 7
33375: ARRAY
33376: PUSH
33377: LD_INT 1
33379: ARRAY
33380: PPUSH
33381: LD_VAR 0 12
33385: PUSH
33386: LD_VAR 0 7
33390: ARRAY
33391: PUSH
33392: LD_INT 2
33394: ARRAY
33395: PPUSH
33396: CALL_OW 428
33400: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
33401: LD_VAR 0 12
33405: PUSH
33406: LD_VAR 0 7
33410: ARRAY
33411: PUSH
33412: LD_INT 1
33414: ARRAY
33415: PPUSH
33416: LD_VAR 0 12
33420: PUSH
33421: LD_VAR 0 7
33425: ARRAY
33426: PUSH
33427: LD_INT 2
33429: ARRAY
33430: PPUSH
33431: CALL_OW 351
33435: PUSH
33436: LD_VAR 0 12
33440: PUSH
33441: LD_VAR 0 7
33445: ARRAY
33446: PUSH
33447: LD_INT 1
33449: ARRAY
33450: PPUSH
33451: LD_VAR 0 12
33455: PUSH
33456: LD_VAR 0 7
33460: ARRAY
33461: PUSH
33462: LD_INT 2
33464: ARRAY
33465: PPUSH
33466: CALL_OW 488
33470: NOT
33471: OR
33472: PUSH
33473: LD_VAR 0 11
33477: PPUSH
33478: CALL_OW 247
33482: PUSH
33483: LD_INT 3
33485: EQUAL
33486: OR
33487: IFFALSE 33493
// exit ;
33489: POP
33490: POP
33491: GO 33896
// if not tmp or not tmp in base then
33493: LD_VAR 0 11
33497: NOT
33498: PUSH
33499: LD_VAR 0 11
33503: PUSH
33504: LD_VAR 0 1
33508: IN
33509: NOT
33510: OR
33511: IFFALSE 33515
// continue ;
33513: GO 33358
// result := true ;
33515: LD_ADDR_VAR 0 6
33519: PUSH
33520: LD_INT 1
33522: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33523: LD_ADDR_VAR 0 15
33527: PUSH
33528: LD_VAR 0 1
33532: PPUSH
33533: LD_INT 22
33535: PUSH
33536: LD_VAR 0 11
33540: PPUSH
33541: CALL_OW 255
33545: PUSH
33546: EMPTY
33547: LIST
33548: LIST
33549: PUSH
33550: LD_INT 2
33552: PUSH
33553: LD_INT 30
33555: PUSH
33556: LD_INT 0
33558: PUSH
33559: EMPTY
33560: LIST
33561: LIST
33562: PUSH
33563: LD_INT 30
33565: PUSH
33566: LD_INT 1
33568: PUSH
33569: EMPTY
33570: LIST
33571: LIST
33572: PUSH
33573: EMPTY
33574: LIST
33575: LIST
33576: LIST
33577: PUSH
33578: EMPTY
33579: LIST
33580: LIST
33581: PPUSH
33582: CALL_OW 72
33586: ST_TO_ADDR
// if dep then
33587: LD_VAR 0 15
33591: IFFALSE 33727
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
33593: LD_ADDR_VAR 0 14
33597: PUSH
33598: LD_VAR 0 15
33602: PUSH
33603: LD_INT 1
33605: ARRAY
33606: PPUSH
33607: CALL_OW 250
33611: PPUSH
33612: LD_VAR 0 15
33616: PUSH
33617: LD_INT 1
33619: ARRAY
33620: PPUSH
33621: CALL_OW 254
33625: PPUSH
33626: LD_INT 5
33628: PPUSH
33629: CALL_OW 272
33633: PUSH
33634: LD_VAR 0 15
33638: PUSH
33639: LD_INT 1
33641: ARRAY
33642: PPUSH
33643: CALL_OW 251
33647: PPUSH
33648: LD_VAR 0 15
33652: PUSH
33653: LD_INT 1
33655: ARRAY
33656: PPUSH
33657: CALL_OW 254
33661: PPUSH
33662: LD_INT 5
33664: PPUSH
33665: CALL_OW 273
33669: PUSH
33670: EMPTY
33671: LIST
33672: LIST
33673: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
33674: LD_VAR 0 14
33678: PUSH
33679: LD_INT 1
33681: ARRAY
33682: PPUSH
33683: LD_VAR 0 14
33687: PUSH
33688: LD_INT 2
33690: ARRAY
33691: PPUSH
33692: CALL_OW 488
33696: IFFALSE 33727
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
33698: LD_VAR 0 11
33702: PPUSH
33703: LD_VAR 0 14
33707: PUSH
33708: LD_INT 1
33710: ARRAY
33711: PPUSH
33712: LD_VAR 0 14
33716: PUSH
33717: LD_INT 2
33719: ARRAY
33720: PPUSH
33721: CALL_OW 111
// continue ;
33725: GO 33358
// end ; end ; r := GetDir ( tmp ) ;
33727: LD_ADDR_VAR 0 13
33731: PUSH
33732: LD_VAR 0 11
33736: PPUSH
33737: CALL_OW 254
33741: ST_TO_ADDR
// if r = 5 then
33742: LD_VAR 0 13
33746: PUSH
33747: LD_INT 5
33749: EQUAL
33750: IFFALSE 33760
// r := 0 ;
33752: LD_ADDR_VAR 0 13
33756: PUSH
33757: LD_INT 0
33759: ST_TO_ADDR
// for j = r to 5 do
33760: LD_ADDR_VAR 0 8
33764: PUSH
33765: DOUBLE
33766: LD_VAR 0 13
33770: DEC
33771: ST_TO_ADDR
33772: LD_INT 5
33774: PUSH
33775: FOR_TO
33776: IFFALSE 33890
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
33778: LD_ADDR_VAR 0 9
33782: PUSH
33783: LD_VAR 0 11
33787: PPUSH
33788: CALL_OW 250
33792: PPUSH
33793: LD_VAR 0 8
33797: PPUSH
33798: LD_INT 2
33800: PPUSH
33801: CALL_OW 272
33805: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
33806: LD_ADDR_VAR 0 10
33810: PUSH
33811: LD_VAR 0 11
33815: PPUSH
33816: CALL_OW 251
33820: PPUSH
33821: LD_VAR 0 8
33825: PPUSH
33826: LD_INT 2
33828: PPUSH
33829: CALL_OW 273
33833: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
33834: LD_VAR 0 9
33838: PPUSH
33839: LD_VAR 0 10
33843: PPUSH
33844: CALL_OW 488
33848: PUSH
33849: LD_VAR 0 9
33853: PPUSH
33854: LD_VAR 0 10
33858: PPUSH
33859: CALL_OW 428
33863: NOT
33864: AND
33865: IFFALSE 33888
// begin ComMoveXY ( tmp , _x , _y ) ;
33867: LD_VAR 0 11
33871: PPUSH
33872: LD_VAR 0 9
33876: PPUSH
33877: LD_VAR 0 10
33881: PPUSH
33882: CALL_OW 111
// break ;
33886: GO 33890
// end ; end ;
33888: GO 33775
33890: POP
33891: POP
// end ;
33892: GO 33358
33894: POP
33895: POP
// end ;
33896: LD_VAR 0 6
33900: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
33901: LD_INT 0
33903: PPUSH
33904: PPUSH
33905: PPUSH
33906: PPUSH
33907: PPUSH
33908: PPUSH
33909: PPUSH
33910: PPUSH
33911: PPUSH
33912: PPUSH
// result := false ;
33913: LD_ADDR_VAR 0 6
33917: PUSH
33918: LD_INT 0
33920: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
33921: LD_VAR 0 1
33925: NOT
33926: PUSH
33927: LD_VAR 0 1
33931: PPUSH
33932: CALL_OW 266
33936: PUSH
33937: LD_INT 0
33939: PUSH
33940: LD_INT 1
33942: PUSH
33943: EMPTY
33944: LIST
33945: LIST
33946: IN
33947: NOT
33948: OR
33949: PUSH
33950: LD_VAR 0 2
33954: NOT
33955: OR
33956: PUSH
33957: LD_VAR 0 5
33961: PUSH
33962: LD_INT 0
33964: PUSH
33965: LD_INT 1
33967: PUSH
33968: LD_INT 2
33970: PUSH
33971: LD_INT 3
33973: PUSH
33974: LD_INT 4
33976: PUSH
33977: LD_INT 5
33979: PUSH
33980: EMPTY
33981: LIST
33982: LIST
33983: LIST
33984: LIST
33985: LIST
33986: LIST
33987: IN
33988: NOT
33989: OR
33990: PUSH
33991: LD_VAR 0 3
33995: PPUSH
33996: LD_VAR 0 4
34000: PPUSH
34001: CALL_OW 488
34005: NOT
34006: OR
34007: IFFALSE 34011
// exit ;
34009: GO 34728
// pom := GetBase ( depot ) ;
34011: LD_ADDR_VAR 0 10
34015: PUSH
34016: LD_VAR 0 1
34020: PPUSH
34021: CALL_OW 274
34025: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
34026: LD_ADDR_VAR 0 11
34030: PUSH
34031: LD_VAR 0 2
34035: PPUSH
34036: LD_VAR 0 1
34040: PPUSH
34041: CALL_OW 248
34045: PPUSH
34046: CALL_OW 450
34050: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
34051: LD_VAR 0 10
34055: PPUSH
34056: LD_INT 1
34058: PPUSH
34059: CALL_OW 275
34063: PUSH
34064: LD_VAR 0 11
34068: PUSH
34069: LD_INT 1
34071: ARRAY
34072: GREATEREQUAL
34073: PUSH
34074: LD_VAR 0 10
34078: PPUSH
34079: LD_INT 2
34081: PPUSH
34082: CALL_OW 275
34086: PUSH
34087: LD_VAR 0 11
34091: PUSH
34092: LD_INT 2
34094: ARRAY
34095: GREATEREQUAL
34096: AND
34097: PUSH
34098: LD_VAR 0 10
34102: PPUSH
34103: LD_INT 3
34105: PPUSH
34106: CALL_OW 275
34110: PUSH
34111: LD_VAR 0 11
34115: PUSH
34116: LD_INT 3
34118: ARRAY
34119: GREATEREQUAL
34120: AND
34121: NOT
34122: IFFALSE 34126
// exit ;
34124: GO 34728
// if GetBType ( depot ) = b_depot then
34126: LD_VAR 0 1
34130: PPUSH
34131: CALL_OW 266
34135: PUSH
34136: LD_INT 0
34138: EQUAL
34139: IFFALSE 34151
// dist := 28 else
34141: LD_ADDR_VAR 0 14
34145: PUSH
34146: LD_INT 28
34148: ST_TO_ADDR
34149: GO 34159
// dist := 36 ;
34151: LD_ADDR_VAR 0 14
34155: PUSH
34156: LD_INT 36
34158: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
34159: LD_VAR 0 1
34163: PPUSH
34164: LD_VAR 0 3
34168: PPUSH
34169: LD_VAR 0 4
34173: PPUSH
34174: CALL_OW 297
34178: PUSH
34179: LD_VAR 0 14
34183: GREATER
34184: IFFALSE 34188
// exit ;
34186: GO 34728
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
34188: LD_ADDR_VAR 0 12
34192: PUSH
34193: LD_VAR 0 2
34197: PPUSH
34198: LD_VAR 0 3
34202: PPUSH
34203: LD_VAR 0 4
34207: PPUSH
34208: LD_VAR 0 5
34212: PPUSH
34213: LD_VAR 0 1
34217: PPUSH
34218: CALL_OW 248
34222: PPUSH
34223: LD_INT 0
34225: PPUSH
34226: CALL 34733 0 6
34230: ST_TO_ADDR
// if not hexes then
34231: LD_VAR 0 12
34235: NOT
34236: IFFALSE 34240
// exit ;
34238: GO 34728
// hex := GetHexInfo ( x , y ) ;
34240: LD_ADDR_VAR 0 15
34244: PUSH
34245: LD_VAR 0 3
34249: PPUSH
34250: LD_VAR 0 4
34254: PPUSH
34255: CALL_OW 546
34259: ST_TO_ADDR
// if hex [ 1 ] then
34260: LD_VAR 0 15
34264: PUSH
34265: LD_INT 1
34267: ARRAY
34268: IFFALSE 34272
// exit ;
34270: GO 34728
// height := hex [ 2 ] ;
34272: LD_ADDR_VAR 0 13
34276: PUSH
34277: LD_VAR 0 15
34281: PUSH
34282: LD_INT 2
34284: ARRAY
34285: ST_TO_ADDR
// for i = 1 to hexes do
34286: LD_ADDR_VAR 0 7
34290: PUSH
34291: DOUBLE
34292: LD_INT 1
34294: DEC
34295: ST_TO_ADDR
34296: LD_VAR 0 12
34300: PUSH
34301: FOR_TO
34302: IFFALSE 34632
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
34304: LD_VAR 0 12
34308: PUSH
34309: LD_VAR 0 7
34313: ARRAY
34314: PUSH
34315: LD_INT 1
34317: ARRAY
34318: PPUSH
34319: LD_VAR 0 12
34323: PUSH
34324: LD_VAR 0 7
34328: ARRAY
34329: PUSH
34330: LD_INT 2
34332: ARRAY
34333: PPUSH
34334: CALL_OW 488
34338: NOT
34339: PUSH
34340: LD_VAR 0 12
34344: PUSH
34345: LD_VAR 0 7
34349: ARRAY
34350: PUSH
34351: LD_INT 1
34353: ARRAY
34354: PPUSH
34355: LD_VAR 0 12
34359: PUSH
34360: LD_VAR 0 7
34364: ARRAY
34365: PUSH
34366: LD_INT 2
34368: ARRAY
34369: PPUSH
34370: CALL_OW 428
34374: PUSH
34375: LD_INT 0
34377: GREATER
34378: OR
34379: PUSH
34380: LD_VAR 0 12
34384: PUSH
34385: LD_VAR 0 7
34389: ARRAY
34390: PUSH
34391: LD_INT 1
34393: ARRAY
34394: PPUSH
34395: LD_VAR 0 12
34399: PUSH
34400: LD_VAR 0 7
34404: ARRAY
34405: PUSH
34406: LD_INT 2
34408: ARRAY
34409: PPUSH
34410: CALL_OW 351
34414: OR
34415: IFFALSE 34421
// exit ;
34417: POP
34418: POP
34419: GO 34728
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34421: LD_ADDR_VAR 0 8
34425: PUSH
34426: LD_VAR 0 12
34430: PUSH
34431: LD_VAR 0 7
34435: ARRAY
34436: PUSH
34437: LD_INT 1
34439: ARRAY
34440: PPUSH
34441: LD_VAR 0 12
34445: PUSH
34446: LD_VAR 0 7
34450: ARRAY
34451: PUSH
34452: LD_INT 2
34454: ARRAY
34455: PPUSH
34456: CALL_OW 546
34460: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
34461: LD_VAR 0 8
34465: PUSH
34466: LD_INT 1
34468: ARRAY
34469: PUSH
34470: LD_VAR 0 8
34474: PUSH
34475: LD_INT 2
34477: ARRAY
34478: PUSH
34479: LD_VAR 0 13
34483: PUSH
34484: LD_INT 2
34486: PLUS
34487: GREATER
34488: OR
34489: PUSH
34490: LD_VAR 0 8
34494: PUSH
34495: LD_INT 2
34497: ARRAY
34498: PUSH
34499: LD_VAR 0 13
34503: PUSH
34504: LD_INT 2
34506: MINUS
34507: LESS
34508: OR
34509: PUSH
34510: LD_VAR 0 8
34514: PUSH
34515: LD_INT 3
34517: ARRAY
34518: PUSH
34519: LD_INT 0
34521: PUSH
34522: LD_INT 8
34524: PUSH
34525: LD_INT 9
34527: PUSH
34528: LD_INT 10
34530: PUSH
34531: LD_INT 11
34533: PUSH
34534: LD_INT 12
34536: PUSH
34537: LD_INT 13
34539: PUSH
34540: LD_INT 16
34542: PUSH
34543: LD_INT 17
34545: PUSH
34546: LD_INT 18
34548: PUSH
34549: LD_INT 19
34551: PUSH
34552: LD_INT 20
34554: PUSH
34555: LD_INT 21
34557: PUSH
34558: EMPTY
34559: LIST
34560: LIST
34561: LIST
34562: LIST
34563: LIST
34564: LIST
34565: LIST
34566: LIST
34567: LIST
34568: LIST
34569: LIST
34570: LIST
34571: LIST
34572: IN
34573: NOT
34574: OR
34575: PUSH
34576: LD_VAR 0 8
34580: PUSH
34581: LD_INT 5
34583: ARRAY
34584: NOT
34585: OR
34586: PUSH
34587: LD_VAR 0 8
34591: PUSH
34592: LD_INT 6
34594: ARRAY
34595: PUSH
34596: LD_INT 1
34598: PUSH
34599: LD_INT 2
34601: PUSH
34602: LD_INT 7
34604: PUSH
34605: LD_INT 9
34607: PUSH
34608: LD_INT 10
34610: PUSH
34611: LD_INT 11
34613: PUSH
34614: EMPTY
34615: LIST
34616: LIST
34617: LIST
34618: LIST
34619: LIST
34620: LIST
34621: IN
34622: NOT
34623: OR
34624: IFFALSE 34630
// exit ;
34626: POP
34627: POP
34628: GO 34728
// end ;
34630: GO 34301
34632: POP
34633: POP
// side := GetSide ( depot ) ;
34634: LD_ADDR_VAR 0 9
34638: PUSH
34639: LD_VAR 0 1
34643: PPUSH
34644: CALL_OW 255
34648: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
34649: LD_VAR 0 9
34653: PPUSH
34654: LD_VAR 0 3
34658: PPUSH
34659: LD_VAR 0 4
34663: PPUSH
34664: LD_INT 20
34666: PPUSH
34667: CALL 27382 0 4
34671: PUSH
34672: LD_INT 4
34674: ARRAY
34675: IFFALSE 34679
// exit ;
34677: GO 34728
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
34679: LD_VAR 0 2
34683: PUSH
34684: LD_INT 29
34686: PUSH
34687: LD_INT 30
34689: PUSH
34690: EMPTY
34691: LIST
34692: LIST
34693: IN
34694: PUSH
34695: LD_VAR 0 3
34699: PPUSH
34700: LD_VAR 0 4
34704: PPUSH
34705: LD_VAR 0 9
34709: PPUSH
34710: CALL_OW 440
34714: NOT
34715: AND
34716: IFFALSE 34720
// exit ;
34718: GO 34728
// result := true ;
34720: LD_ADDR_VAR 0 6
34724: PUSH
34725: LD_INT 1
34727: ST_TO_ADDR
// end ;
34728: LD_VAR 0 6
34732: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
34733: LD_INT 0
34735: PPUSH
34736: PPUSH
34737: PPUSH
34738: PPUSH
34739: PPUSH
34740: PPUSH
34741: PPUSH
34742: PPUSH
34743: PPUSH
34744: PPUSH
34745: PPUSH
34746: PPUSH
34747: PPUSH
34748: PPUSH
34749: PPUSH
34750: PPUSH
34751: PPUSH
34752: PPUSH
34753: PPUSH
34754: PPUSH
34755: PPUSH
34756: PPUSH
34757: PPUSH
34758: PPUSH
34759: PPUSH
34760: PPUSH
34761: PPUSH
34762: PPUSH
34763: PPUSH
34764: PPUSH
34765: PPUSH
34766: PPUSH
34767: PPUSH
34768: PPUSH
34769: PPUSH
34770: PPUSH
34771: PPUSH
34772: PPUSH
34773: PPUSH
34774: PPUSH
34775: PPUSH
34776: PPUSH
34777: PPUSH
34778: PPUSH
34779: PPUSH
34780: PPUSH
34781: PPUSH
34782: PPUSH
34783: PPUSH
34784: PPUSH
34785: PPUSH
34786: PPUSH
34787: PPUSH
34788: PPUSH
34789: PPUSH
34790: PPUSH
34791: PPUSH
34792: PPUSH
// result = [ ] ;
34793: LD_ADDR_VAR 0 7
34797: PUSH
34798: EMPTY
34799: ST_TO_ADDR
// temp_list = [ ] ;
34800: LD_ADDR_VAR 0 9
34804: PUSH
34805: EMPTY
34806: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
34807: LD_VAR 0 4
34811: PUSH
34812: LD_INT 0
34814: PUSH
34815: LD_INT 1
34817: PUSH
34818: LD_INT 2
34820: PUSH
34821: LD_INT 3
34823: PUSH
34824: LD_INT 4
34826: PUSH
34827: LD_INT 5
34829: PUSH
34830: EMPTY
34831: LIST
34832: LIST
34833: LIST
34834: LIST
34835: LIST
34836: LIST
34837: IN
34838: NOT
34839: PUSH
34840: LD_VAR 0 1
34844: PUSH
34845: LD_INT 0
34847: PUSH
34848: LD_INT 1
34850: PUSH
34851: EMPTY
34852: LIST
34853: LIST
34854: IN
34855: PUSH
34856: LD_VAR 0 5
34860: PUSH
34861: LD_INT 1
34863: PUSH
34864: LD_INT 2
34866: PUSH
34867: LD_INT 3
34869: PUSH
34870: EMPTY
34871: LIST
34872: LIST
34873: LIST
34874: IN
34875: NOT
34876: AND
34877: OR
34878: IFFALSE 34882
// exit ;
34880: GO 53273
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
34882: LD_VAR 0 1
34886: PUSH
34887: LD_INT 6
34889: PUSH
34890: LD_INT 7
34892: PUSH
34893: LD_INT 8
34895: PUSH
34896: LD_INT 13
34898: PUSH
34899: LD_INT 12
34901: PUSH
34902: LD_INT 15
34904: PUSH
34905: LD_INT 11
34907: PUSH
34908: LD_INT 14
34910: PUSH
34911: LD_INT 10
34913: PUSH
34914: EMPTY
34915: LIST
34916: LIST
34917: LIST
34918: LIST
34919: LIST
34920: LIST
34921: LIST
34922: LIST
34923: LIST
34924: IN
34925: IFFALSE 34935
// btype = b_lab ;
34927: LD_ADDR_VAR 0 1
34931: PUSH
34932: LD_INT 6
34934: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
34935: LD_VAR 0 6
34939: PUSH
34940: LD_INT 0
34942: PUSH
34943: LD_INT 1
34945: PUSH
34946: LD_INT 2
34948: PUSH
34949: EMPTY
34950: LIST
34951: LIST
34952: LIST
34953: IN
34954: NOT
34955: PUSH
34956: LD_VAR 0 1
34960: PUSH
34961: LD_INT 0
34963: PUSH
34964: LD_INT 1
34966: PUSH
34967: LD_INT 2
34969: PUSH
34970: LD_INT 3
34972: PUSH
34973: LD_INT 6
34975: PUSH
34976: LD_INT 36
34978: PUSH
34979: LD_INT 4
34981: PUSH
34982: LD_INT 5
34984: PUSH
34985: LD_INT 31
34987: PUSH
34988: LD_INT 32
34990: PUSH
34991: LD_INT 33
34993: PUSH
34994: EMPTY
34995: LIST
34996: LIST
34997: LIST
34998: LIST
34999: LIST
35000: LIST
35001: LIST
35002: LIST
35003: LIST
35004: LIST
35005: LIST
35006: IN
35007: NOT
35008: PUSH
35009: LD_VAR 0 6
35013: PUSH
35014: LD_INT 1
35016: EQUAL
35017: AND
35018: OR
35019: PUSH
35020: LD_VAR 0 1
35024: PUSH
35025: LD_INT 2
35027: PUSH
35028: LD_INT 3
35030: PUSH
35031: EMPTY
35032: LIST
35033: LIST
35034: IN
35035: NOT
35036: PUSH
35037: LD_VAR 0 6
35041: PUSH
35042: LD_INT 2
35044: EQUAL
35045: AND
35046: OR
35047: IFFALSE 35057
// mode = 0 ;
35049: LD_ADDR_VAR 0 6
35053: PUSH
35054: LD_INT 0
35056: ST_TO_ADDR
// case mode of 0 :
35057: LD_VAR 0 6
35061: PUSH
35062: LD_INT 0
35064: DOUBLE
35065: EQUAL
35066: IFTRUE 35070
35068: GO 46523
35070: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35071: LD_ADDR_VAR 0 11
35075: PUSH
35076: LD_INT 0
35078: PUSH
35079: LD_INT 0
35081: PUSH
35082: EMPTY
35083: LIST
35084: LIST
35085: PUSH
35086: LD_INT 0
35088: PUSH
35089: LD_INT 1
35091: NEG
35092: PUSH
35093: EMPTY
35094: LIST
35095: LIST
35096: PUSH
35097: LD_INT 1
35099: PUSH
35100: LD_INT 0
35102: PUSH
35103: EMPTY
35104: LIST
35105: LIST
35106: PUSH
35107: LD_INT 1
35109: PUSH
35110: LD_INT 1
35112: PUSH
35113: EMPTY
35114: LIST
35115: LIST
35116: PUSH
35117: LD_INT 0
35119: PUSH
35120: LD_INT 1
35122: PUSH
35123: EMPTY
35124: LIST
35125: LIST
35126: PUSH
35127: LD_INT 1
35129: NEG
35130: PUSH
35131: LD_INT 0
35133: PUSH
35134: EMPTY
35135: LIST
35136: LIST
35137: PUSH
35138: LD_INT 1
35140: NEG
35141: PUSH
35142: LD_INT 1
35144: NEG
35145: PUSH
35146: EMPTY
35147: LIST
35148: LIST
35149: PUSH
35150: LD_INT 1
35152: NEG
35153: PUSH
35154: LD_INT 2
35156: NEG
35157: PUSH
35158: EMPTY
35159: LIST
35160: LIST
35161: PUSH
35162: LD_INT 0
35164: PUSH
35165: LD_INT 2
35167: NEG
35168: PUSH
35169: EMPTY
35170: LIST
35171: LIST
35172: PUSH
35173: LD_INT 1
35175: PUSH
35176: LD_INT 1
35178: NEG
35179: PUSH
35180: EMPTY
35181: LIST
35182: LIST
35183: PUSH
35184: LD_INT 1
35186: PUSH
35187: LD_INT 2
35189: PUSH
35190: EMPTY
35191: LIST
35192: LIST
35193: PUSH
35194: LD_INT 0
35196: PUSH
35197: LD_INT 2
35199: PUSH
35200: EMPTY
35201: LIST
35202: LIST
35203: PUSH
35204: LD_INT 1
35206: NEG
35207: PUSH
35208: LD_INT 1
35210: PUSH
35211: EMPTY
35212: LIST
35213: LIST
35214: PUSH
35215: LD_INT 1
35217: PUSH
35218: LD_INT 3
35220: PUSH
35221: EMPTY
35222: LIST
35223: LIST
35224: PUSH
35225: LD_INT 0
35227: PUSH
35228: LD_INT 3
35230: PUSH
35231: EMPTY
35232: LIST
35233: LIST
35234: PUSH
35235: LD_INT 1
35237: NEG
35238: PUSH
35239: LD_INT 2
35241: PUSH
35242: EMPTY
35243: LIST
35244: LIST
35245: PUSH
35246: EMPTY
35247: LIST
35248: LIST
35249: LIST
35250: LIST
35251: LIST
35252: LIST
35253: LIST
35254: LIST
35255: LIST
35256: LIST
35257: LIST
35258: LIST
35259: LIST
35260: LIST
35261: LIST
35262: LIST
35263: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35264: LD_ADDR_VAR 0 12
35268: PUSH
35269: LD_INT 0
35271: PUSH
35272: LD_INT 0
35274: PUSH
35275: EMPTY
35276: LIST
35277: LIST
35278: PUSH
35279: LD_INT 0
35281: PUSH
35282: LD_INT 1
35284: NEG
35285: PUSH
35286: EMPTY
35287: LIST
35288: LIST
35289: PUSH
35290: LD_INT 1
35292: PUSH
35293: LD_INT 0
35295: PUSH
35296: EMPTY
35297: LIST
35298: LIST
35299: PUSH
35300: LD_INT 1
35302: PUSH
35303: LD_INT 1
35305: PUSH
35306: EMPTY
35307: LIST
35308: LIST
35309: PUSH
35310: LD_INT 0
35312: PUSH
35313: LD_INT 1
35315: PUSH
35316: EMPTY
35317: LIST
35318: LIST
35319: PUSH
35320: LD_INT 1
35322: NEG
35323: PUSH
35324: LD_INT 0
35326: PUSH
35327: EMPTY
35328: LIST
35329: LIST
35330: PUSH
35331: LD_INT 1
35333: NEG
35334: PUSH
35335: LD_INT 1
35337: NEG
35338: PUSH
35339: EMPTY
35340: LIST
35341: LIST
35342: PUSH
35343: LD_INT 1
35345: PUSH
35346: LD_INT 1
35348: NEG
35349: PUSH
35350: EMPTY
35351: LIST
35352: LIST
35353: PUSH
35354: LD_INT 2
35356: PUSH
35357: LD_INT 0
35359: PUSH
35360: EMPTY
35361: LIST
35362: LIST
35363: PUSH
35364: LD_INT 2
35366: PUSH
35367: LD_INT 1
35369: PUSH
35370: EMPTY
35371: LIST
35372: LIST
35373: PUSH
35374: LD_INT 1
35376: NEG
35377: PUSH
35378: LD_INT 1
35380: PUSH
35381: EMPTY
35382: LIST
35383: LIST
35384: PUSH
35385: LD_INT 2
35387: NEG
35388: PUSH
35389: LD_INT 0
35391: PUSH
35392: EMPTY
35393: LIST
35394: LIST
35395: PUSH
35396: LD_INT 2
35398: NEG
35399: PUSH
35400: LD_INT 1
35402: NEG
35403: PUSH
35404: EMPTY
35405: LIST
35406: LIST
35407: PUSH
35408: LD_INT 2
35410: NEG
35411: PUSH
35412: LD_INT 1
35414: PUSH
35415: EMPTY
35416: LIST
35417: LIST
35418: PUSH
35419: LD_INT 3
35421: NEG
35422: PUSH
35423: LD_INT 0
35425: PUSH
35426: EMPTY
35427: LIST
35428: LIST
35429: PUSH
35430: LD_INT 3
35432: NEG
35433: PUSH
35434: LD_INT 1
35436: NEG
35437: PUSH
35438: EMPTY
35439: LIST
35440: LIST
35441: PUSH
35442: EMPTY
35443: LIST
35444: LIST
35445: LIST
35446: LIST
35447: LIST
35448: LIST
35449: LIST
35450: LIST
35451: LIST
35452: LIST
35453: LIST
35454: LIST
35455: LIST
35456: LIST
35457: LIST
35458: LIST
35459: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35460: LD_ADDR_VAR 0 13
35464: PUSH
35465: LD_INT 0
35467: PUSH
35468: LD_INT 0
35470: PUSH
35471: EMPTY
35472: LIST
35473: LIST
35474: PUSH
35475: LD_INT 0
35477: PUSH
35478: LD_INT 1
35480: NEG
35481: PUSH
35482: EMPTY
35483: LIST
35484: LIST
35485: PUSH
35486: LD_INT 1
35488: PUSH
35489: LD_INT 0
35491: PUSH
35492: EMPTY
35493: LIST
35494: LIST
35495: PUSH
35496: LD_INT 1
35498: PUSH
35499: LD_INT 1
35501: PUSH
35502: EMPTY
35503: LIST
35504: LIST
35505: PUSH
35506: LD_INT 0
35508: PUSH
35509: LD_INT 1
35511: PUSH
35512: EMPTY
35513: LIST
35514: LIST
35515: PUSH
35516: LD_INT 1
35518: NEG
35519: PUSH
35520: LD_INT 0
35522: PUSH
35523: EMPTY
35524: LIST
35525: LIST
35526: PUSH
35527: LD_INT 1
35529: NEG
35530: PUSH
35531: LD_INT 1
35533: NEG
35534: PUSH
35535: EMPTY
35536: LIST
35537: LIST
35538: PUSH
35539: LD_INT 1
35541: NEG
35542: PUSH
35543: LD_INT 2
35545: NEG
35546: PUSH
35547: EMPTY
35548: LIST
35549: LIST
35550: PUSH
35551: LD_INT 2
35553: PUSH
35554: LD_INT 1
35556: PUSH
35557: EMPTY
35558: LIST
35559: LIST
35560: PUSH
35561: LD_INT 2
35563: PUSH
35564: LD_INT 2
35566: PUSH
35567: EMPTY
35568: LIST
35569: LIST
35570: PUSH
35571: LD_INT 1
35573: PUSH
35574: LD_INT 2
35576: PUSH
35577: EMPTY
35578: LIST
35579: LIST
35580: PUSH
35581: LD_INT 2
35583: NEG
35584: PUSH
35585: LD_INT 1
35587: NEG
35588: PUSH
35589: EMPTY
35590: LIST
35591: LIST
35592: PUSH
35593: LD_INT 2
35595: NEG
35596: PUSH
35597: LD_INT 2
35599: NEG
35600: PUSH
35601: EMPTY
35602: LIST
35603: LIST
35604: PUSH
35605: LD_INT 2
35607: NEG
35608: PUSH
35609: LD_INT 3
35611: NEG
35612: PUSH
35613: EMPTY
35614: LIST
35615: LIST
35616: PUSH
35617: LD_INT 3
35619: NEG
35620: PUSH
35621: LD_INT 2
35623: NEG
35624: PUSH
35625: EMPTY
35626: LIST
35627: LIST
35628: PUSH
35629: LD_INT 3
35631: NEG
35632: PUSH
35633: LD_INT 3
35635: NEG
35636: PUSH
35637: EMPTY
35638: LIST
35639: LIST
35640: PUSH
35641: EMPTY
35642: LIST
35643: LIST
35644: LIST
35645: LIST
35646: LIST
35647: LIST
35648: LIST
35649: LIST
35650: LIST
35651: LIST
35652: LIST
35653: LIST
35654: LIST
35655: LIST
35656: LIST
35657: LIST
35658: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35659: LD_ADDR_VAR 0 14
35663: PUSH
35664: LD_INT 0
35666: PUSH
35667: LD_INT 0
35669: PUSH
35670: EMPTY
35671: LIST
35672: LIST
35673: PUSH
35674: LD_INT 0
35676: PUSH
35677: LD_INT 1
35679: NEG
35680: PUSH
35681: EMPTY
35682: LIST
35683: LIST
35684: PUSH
35685: LD_INT 1
35687: PUSH
35688: LD_INT 0
35690: PUSH
35691: EMPTY
35692: LIST
35693: LIST
35694: PUSH
35695: LD_INT 1
35697: PUSH
35698: LD_INT 1
35700: PUSH
35701: EMPTY
35702: LIST
35703: LIST
35704: PUSH
35705: LD_INT 0
35707: PUSH
35708: LD_INT 1
35710: PUSH
35711: EMPTY
35712: LIST
35713: LIST
35714: PUSH
35715: LD_INT 1
35717: NEG
35718: PUSH
35719: LD_INT 0
35721: PUSH
35722: EMPTY
35723: LIST
35724: LIST
35725: PUSH
35726: LD_INT 1
35728: NEG
35729: PUSH
35730: LD_INT 1
35732: NEG
35733: PUSH
35734: EMPTY
35735: LIST
35736: LIST
35737: PUSH
35738: LD_INT 1
35740: NEG
35741: PUSH
35742: LD_INT 2
35744: NEG
35745: PUSH
35746: EMPTY
35747: LIST
35748: LIST
35749: PUSH
35750: LD_INT 0
35752: PUSH
35753: LD_INT 2
35755: NEG
35756: PUSH
35757: EMPTY
35758: LIST
35759: LIST
35760: PUSH
35761: LD_INT 1
35763: PUSH
35764: LD_INT 1
35766: NEG
35767: PUSH
35768: EMPTY
35769: LIST
35770: LIST
35771: PUSH
35772: LD_INT 1
35774: PUSH
35775: LD_INT 2
35777: PUSH
35778: EMPTY
35779: LIST
35780: LIST
35781: PUSH
35782: LD_INT 0
35784: PUSH
35785: LD_INT 2
35787: PUSH
35788: EMPTY
35789: LIST
35790: LIST
35791: PUSH
35792: LD_INT 1
35794: NEG
35795: PUSH
35796: LD_INT 1
35798: PUSH
35799: EMPTY
35800: LIST
35801: LIST
35802: PUSH
35803: LD_INT 1
35805: NEG
35806: PUSH
35807: LD_INT 3
35809: NEG
35810: PUSH
35811: EMPTY
35812: LIST
35813: LIST
35814: PUSH
35815: LD_INT 0
35817: PUSH
35818: LD_INT 3
35820: NEG
35821: PUSH
35822: EMPTY
35823: LIST
35824: LIST
35825: PUSH
35826: LD_INT 1
35828: PUSH
35829: LD_INT 2
35831: NEG
35832: PUSH
35833: EMPTY
35834: LIST
35835: LIST
35836: PUSH
35837: EMPTY
35838: LIST
35839: LIST
35840: LIST
35841: LIST
35842: LIST
35843: LIST
35844: LIST
35845: LIST
35846: LIST
35847: LIST
35848: LIST
35849: LIST
35850: LIST
35851: LIST
35852: LIST
35853: LIST
35854: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35855: LD_ADDR_VAR 0 15
35859: PUSH
35860: LD_INT 0
35862: PUSH
35863: LD_INT 0
35865: PUSH
35866: EMPTY
35867: LIST
35868: LIST
35869: PUSH
35870: LD_INT 0
35872: PUSH
35873: LD_INT 1
35875: NEG
35876: PUSH
35877: EMPTY
35878: LIST
35879: LIST
35880: PUSH
35881: LD_INT 1
35883: PUSH
35884: LD_INT 0
35886: PUSH
35887: EMPTY
35888: LIST
35889: LIST
35890: PUSH
35891: LD_INT 1
35893: PUSH
35894: LD_INT 1
35896: PUSH
35897: EMPTY
35898: LIST
35899: LIST
35900: PUSH
35901: LD_INT 0
35903: PUSH
35904: LD_INT 1
35906: PUSH
35907: EMPTY
35908: LIST
35909: LIST
35910: PUSH
35911: LD_INT 1
35913: NEG
35914: PUSH
35915: LD_INT 0
35917: PUSH
35918: EMPTY
35919: LIST
35920: LIST
35921: PUSH
35922: LD_INT 1
35924: NEG
35925: PUSH
35926: LD_INT 1
35928: NEG
35929: PUSH
35930: EMPTY
35931: LIST
35932: LIST
35933: PUSH
35934: LD_INT 1
35936: PUSH
35937: LD_INT 1
35939: NEG
35940: PUSH
35941: EMPTY
35942: LIST
35943: LIST
35944: PUSH
35945: LD_INT 2
35947: PUSH
35948: LD_INT 0
35950: PUSH
35951: EMPTY
35952: LIST
35953: LIST
35954: PUSH
35955: LD_INT 2
35957: PUSH
35958: LD_INT 1
35960: PUSH
35961: EMPTY
35962: LIST
35963: LIST
35964: PUSH
35965: LD_INT 1
35967: NEG
35968: PUSH
35969: LD_INT 1
35971: PUSH
35972: EMPTY
35973: LIST
35974: LIST
35975: PUSH
35976: LD_INT 2
35978: NEG
35979: PUSH
35980: LD_INT 0
35982: PUSH
35983: EMPTY
35984: LIST
35985: LIST
35986: PUSH
35987: LD_INT 2
35989: NEG
35990: PUSH
35991: LD_INT 1
35993: NEG
35994: PUSH
35995: EMPTY
35996: LIST
35997: LIST
35998: PUSH
35999: LD_INT 2
36001: PUSH
36002: LD_INT 1
36004: NEG
36005: PUSH
36006: EMPTY
36007: LIST
36008: LIST
36009: PUSH
36010: LD_INT 3
36012: PUSH
36013: LD_INT 0
36015: PUSH
36016: EMPTY
36017: LIST
36018: LIST
36019: PUSH
36020: LD_INT 3
36022: PUSH
36023: LD_INT 1
36025: PUSH
36026: EMPTY
36027: LIST
36028: LIST
36029: PUSH
36030: EMPTY
36031: LIST
36032: LIST
36033: LIST
36034: LIST
36035: LIST
36036: LIST
36037: LIST
36038: LIST
36039: LIST
36040: LIST
36041: LIST
36042: LIST
36043: LIST
36044: LIST
36045: LIST
36046: LIST
36047: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36048: LD_ADDR_VAR 0 16
36052: PUSH
36053: LD_INT 0
36055: PUSH
36056: LD_INT 0
36058: PUSH
36059: EMPTY
36060: LIST
36061: LIST
36062: PUSH
36063: LD_INT 0
36065: PUSH
36066: LD_INT 1
36068: NEG
36069: PUSH
36070: EMPTY
36071: LIST
36072: LIST
36073: PUSH
36074: LD_INT 1
36076: PUSH
36077: LD_INT 0
36079: PUSH
36080: EMPTY
36081: LIST
36082: LIST
36083: PUSH
36084: LD_INT 1
36086: PUSH
36087: LD_INT 1
36089: PUSH
36090: EMPTY
36091: LIST
36092: LIST
36093: PUSH
36094: LD_INT 0
36096: PUSH
36097: LD_INT 1
36099: PUSH
36100: EMPTY
36101: LIST
36102: LIST
36103: PUSH
36104: LD_INT 1
36106: NEG
36107: PUSH
36108: LD_INT 0
36110: PUSH
36111: EMPTY
36112: LIST
36113: LIST
36114: PUSH
36115: LD_INT 1
36117: NEG
36118: PUSH
36119: LD_INT 1
36121: NEG
36122: PUSH
36123: EMPTY
36124: LIST
36125: LIST
36126: PUSH
36127: LD_INT 1
36129: NEG
36130: PUSH
36131: LD_INT 2
36133: NEG
36134: PUSH
36135: EMPTY
36136: LIST
36137: LIST
36138: PUSH
36139: LD_INT 2
36141: PUSH
36142: LD_INT 1
36144: PUSH
36145: EMPTY
36146: LIST
36147: LIST
36148: PUSH
36149: LD_INT 2
36151: PUSH
36152: LD_INT 2
36154: PUSH
36155: EMPTY
36156: LIST
36157: LIST
36158: PUSH
36159: LD_INT 1
36161: PUSH
36162: LD_INT 2
36164: PUSH
36165: EMPTY
36166: LIST
36167: LIST
36168: PUSH
36169: LD_INT 2
36171: NEG
36172: PUSH
36173: LD_INT 1
36175: NEG
36176: PUSH
36177: EMPTY
36178: LIST
36179: LIST
36180: PUSH
36181: LD_INT 2
36183: NEG
36184: PUSH
36185: LD_INT 2
36187: NEG
36188: PUSH
36189: EMPTY
36190: LIST
36191: LIST
36192: PUSH
36193: LD_INT 3
36195: PUSH
36196: LD_INT 2
36198: PUSH
36199: EMPTY
36200: LIST
36201: LIST
36202: PUSH
36203: LD_INT 3
36205: PUSH
36206: LD_INT 3
36208: PUSH
36209: EMPTY
36210: LIST
36211: LIST
36212: PUSH
36213: LD_INT 2
36215: PUSH
36216: LD_INT 3
36218: PUSH
36219: EMPTY
36220: LIST
36221: LIST
36222: PUSH
36223: EMPTY
36224: LIST
36225: LIST
36226: LIST
36227: LIST
36228: LIST
36229: LIST
36230: LIST
36231: LIST
36232: LIST
36233: LIST
36234: LIST
36235: LIST
36236: LIST
36237: LIST
36238: LIST
36239: LIST
36240: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36241: LD_ADDR_VAR 0 17
36245: PUSH
36246: LD_INT 0
36248: PUSH
36249: LD_INT 0
36251: PUSH
36252: EMPTY
36253: LIST
36254: LIST
36255: PUSH
36256: LD_INT 0
36258: PUSH
36259: LD_INT 1
36261: NEG
36262: PUSH
36263: EMPTY
36264: LIST
36265: LIST
36266: PUSH
36267: LD_INT 1
36269: PUSH
36270: LD_INT 0
36272: PUSH
36273: EMPTY
36274: LIST
36275: LIST
36276: PUSH
36277: LD_INT 1
36279: PUSH
36280: LD_INT 1
36282: PUSH
36283: EMPTY
36284: LIST
36285: LIST
36286: PUSH
36287: LD_INT 0
36289: PUSH
36290: LD_INT 1
36292: PUSH
36293: EMPTY
36294: LIST
36295: LIST
36296: PUSH
36297: LD_INT 1
36299: NEG
36300: PUSH
36301: LD_INT 0
36303: PUSH
36304: EMPTY
36305: LIST
36306: LIST
36307: PUSH
36308: LD_INT 1
36310: NEG
36311: PUSH
36312: LD_INT 1
36314: NEG
36315: PUSH
36316: EMPTY
36317: LIST
36318: LIST
36319: PUSH
36320: LD_INT 1
36322: NEG
36323: PUSH
36324: LD_INT 2
36326: NEG
36327: PUSH
36328: EMPTY
36329: LIST
36330: LIST
36331: PUSH
36332: LD_INT 0
36334: PUSH
36335: LD_INT 2
36337: NEG
36338: PUSH
36339: EMPTY
36340: LIST
36341: LIST
36342: PUSH
36343: LD_INT 1
36345: PUSH
36346: LD_INT 1
36348: NEG
36349: PUSH
36350: EMPTY
36351: LIST
36352: LIST
36353: PUSH
36354: LD_INT 2
36356: PUSH
36357: LD_INT 0
36359: PUSH
36360: EMPTY
36361: LIST
36362: LIST
36363: PUSH
36364: LD_INT 2
36366: PUSH
36367: LD_INT 1
36369: PUSH
36370: EMPTY
36371: LIST
36372: LIST
36373: PUSH
36374: LD_INT 2
36376: PUSH
36377: LD_INT 2
36379: PUSH
36380: EMPTY
36381: LIST
36382: LIST
36383: PUSH
36384: LD_INT 1
36386: PUSH
36387: LD_INT 2
36389: PUSH
36390: EMPTY
36391: LIST
36392: LIST
36393: PUSH
36394: LD_INT 0
36396: PUSH
36397: LD_INT 2
36399: PUSH
36400: EMPTY
36401: LIST
36402: LIST
36403: PUSH
36404: LD_INT 1
36406: NEG
36407: PUSH
36408: LD_INT 1
36410: PUSH
36411: EMPTY
36412: LIST
36413: LIST
36414: PUSH
36415: LD_INT 2
36417: NEG
36418: PUSH
36419: LD_INT 0
36421: PUSH
36422: EMPTY
36423: LIST
36424: LIST
36425: PUSH
36426: LD_INT 2
36428: NEG
36429: PUSH
36430: LD_INT 1
36432: NEG
36433: PUSH
36434: EMPTY
36435: LIST
36436: LIST
36437: PUSH
36438: LD_INT 2
36440: NEG
36441: PUSH
36442: LD_INT 2
36444: NEG
36445: PUSH
36446: EMPTY
36447: LIST
36448: LIST
36449: PUSH
36450: EMPTY
36451: LIST
36452: LIST
36453: LIST
36454: LIST
36455: LIST
36456: LIST
36457: LIST
36458: LIST
36459: LIST
36460: LIST
36461: LIST
36462: LIST
36463: LIST
36464: LIST
36465: LIST
36466: LIST
36467: LIST
36468: LIST
36469: LIST
36470: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36471: LD_ADDR_VAR 0 18
36475: PUSH
36476: LD_INT 0
36478: PUSH
36479: LD_INT 0
36481: PUSH
36482: EMPTY
36483: LIST
36484: LIST
36485: PUSH
36486: LD_INT 0
36488: PUSH
36489: LD_INT 1
36491: NEG
36492: PUSH
36493: EMPTY
36494: LIST
36495: LIST
36496: PUSH
36497: LD_INT 1
36499: PUSH
36500: LD_INT 0
36502: PUSH
36503: EMPTY
36504: LIST
36505: LIST
36506: PUSH
36507: LD_INT 1
36509: PUSH
36510: LD_INT 1
36512: PUSH
36513: EMPTY
36514: LIST
36515: LIST
36516: PUSH
36517: LD_INT 0
36519: PUSH
36520: LD_INT 1
36522: PUSH
36523: EMPTY
36524: LIST
36525: LIST
36526: PUSH
36527: LD_INT 1
36529: NEG
36530: PUSH
36531: LD_INT 0
36533: PUSH
36534: EMPTY
36535: LIST
36536: LIST
36537: PUSH
36538: LD_INT 1
36540: NEG
36541: PUSH
36542: LD_INT 1
36544: NEG
36545: PUSH
36546: EMPTY
36547: LIST
36548: LIST
36549: PUSH
36550: LD_INT 1
36552: NEG
36553: PUSH
36554: LD_INT 2
36556: NEG
36557: PUSH
36558: EMPTY
36559: LIST
36560: LIST
36561: PUSH
36562: LD_INT 0
36564: PUSH
36565: LD_INT 2
36567: NEG
36568: PUSH
36569: EMPTY
36570: LIST
36571: LIST
36572: PUSH
36573: LD_INT 1
36575: PUSH
36576: LD_INT 1
36578: NEG
36579: PUSH
36580: EMPTY
36581: LIST
36582: LIST
36583: PUSH
36584: LD_INT 2
36586: PUSH
36587: LD_INT 0
36589: PUSH
36590: EMPTY
36591: LIST
36592: LIST
36593: PUSH
36594: LD_INT 2
36596: PUSH
36597: LD_INT 1
36599: PUSH
36600: EMPTY
36601: LIST
36602: LIST
36603: PUSH
36604: LD_INT 2
36606: PUSH
36607: LD_INT 2
36609: PUSH
36610: EMPTY
36611: LIST
36612: LIST
36613: PUSH
36614: LD_INT 1
36616: PUSH
36617: LD_INT 2
36619: PUSH
36620: EMPTY
36621: LIST
36622: LIST
36623: PUSH
36624: LD_INT 0
36626: PUSH
36627: LD_INT 2
36629: PUSH
36630: EMPTY
36631: LIST
36632: LIST
36633: PUSH
36634: LD_INT 1
36636: NEG
36637: PUSH
36638: LD_INT 1
36640: PUSH
36641: EMPTY
36642: LIST
36643: LIST
36644: PUSH
36645: LD_INT 2
36647: NEG
36648: PUSH
36649: LD_INT 0
36651: PUSH
36652: EMPTY
36653: LIST
36654: LIST
36655: PUSH
36656: LD_INT 2
36658: NEG
36659: PUSH
36660: LD_INT 1
36662: NEG
36663: PUSH
36664: EMPTY
36665: LIST
36666: LIST
36667: PUSH
36668: LD_INT 2
36670: NEG
36671: PUSH
36672: LD_INT 2
36674: NEG
36675: PUSH
36676: EMPTY
36677: LIST
36678: LIST
36679: PUSH
36680: EMPTY
36681: LIST
36682: LIST
36683: LIST
36684: LIST
36685: LIST
36686: LIST
36687: LIST
36688: LIST
36689: LIST
36690: LIST
36691: LIST
36692: LIST
36693: LIST
36694: LIST
36695: LIST
36696: LIST
36697: LIST
36698: LIST
36699: LIST
36700: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36701: LD_ADDR_VAR 0 19
36705: PUSH
36706: LD_INT 0
36708: PUSH
36709: LD_INT 0
36711: PUSH
36712: EMPTY
36713: LIST
36714: LIST
36715: PUSH
36716: LD_INT 0
36718: PUSH
36719: LD_INT 1
36721: NEG
36722: PUSH
36723: EMPTY
36724: LIST
36725: LIST
36726: PUSH
36727: LD_INT 1
36729: PUSH
36730: LD_INT 0
36732: PUSH
36733: EMPTY
36734: LIST
36735: LIST
36736: PUSH
36737: LD_INT 1
36739: PUSH
36740: LD_INT 1
36742: PUSH
36743: EMPTY
36744: LIST
36745: LIST
36746: PUSH
36747: LD_INT 0
36749: PUSH
36750: LD_INT 1
36752: PUSH
36753: EMPTY
36754: LIST
36755: LIST
36756: PUSH
36757: LD_INT 1
36759: NEG
36760: PUSH
36761: LD_INT 0
36763: PUSH
36764: EMPTY
36765: LIST
36766: LIST
36767: PUSH
36768: LD_INT 1
36770: NEG
36771: PUSH
36772: LD_INT 1
36774: NEG
36775: PUSH
36776: EMPTY
36777: LIST
36778: LIST
36779: PUSH
36780: LD_INT 1
36782: NEG
36783: PUSH
36784: LD_INT 2
36786: NEG
36787: PUSH
36788: EMPTY
36789: LIST
36790: LIST
36791: PUSH
36792: LD_INT 0
36794: PUSH
36795: LD_INT 2
36797: NEG
36798: PUSH
36799: EMPTY
36800: LIST
36801: LIST
36802: PUSH
36803: LD_INT 1
36805: PUSH
36806: LD_INT 1
36808: NEG
36809: PUSH
36810: EMPTY
36811: LIST
36812: LIST
36813: PUSH
36814: LD_INT 2
36816: PUSH
36817: LD_INT 0
36819: PUSH
36820: EMPTY
36821: LIST
36822: LIST
36823: PUSH
36824: LD_INT 2
36826: PUSH
36827: LD_INT 1
36829: PUSH
36830: EMPTY
36831: LIST
36832: LIST
36833: PUSH
36834: LD_INT 2
36836: PUSH
36837: LD_INT 2
36839: PUSH
36840: EMPTY
36841: LIST
36842: LIST
36843: PUSH
36844: LD_INT 1
36846: PUSH
36847: LD_INT 2
36849: PUSH
36850: EMPTY
36851: LIST
36852: LIST
36853: PUSH
36854: LD_INT 0
36856: PUSH
36857: LD_INT 2
36859: PUSH
36860: EMPTY
36861: LIST
36862: LIST
36863: PUSH
36864: LD_INT 1
36866: NEG
36867: PUSH
36868: LD_INT 1
36870: PUSH
36871: EMPTY
36872: LIST
36873: LIST
36874: PUSH
36875: LD_INT 2
36877: NEG
36878: PUSH
36879: LD_INT 0
36881: PUSH
36882: EMPTY
36883: LIST
36884: LIST
36885: PUSH
36886: LD_INT 2
36888: NEG
36889: PUSH
36890: LD_INT 1
36892: NEG
36893: PUSH
36894: EMPTY
36895: LIST
36896: LIST
36897: PUSH
36898: LD_INT 2
36900: NEG
36901: PUSH
36902: LD_INT 2
36904: NEG
36905: PUSH
36906: EMPTY
36907: LIST
36908: LIST
36909: PUSH
36910: EMPTY
36911: LIST
36912: LIST
36913: LIST
36914: LIST
36915: LIST
36916: LIST
36917: LIST
36918: LIST
36919: LIST
36920: LIST
36921: LIST
36922: LIST
36923: LIST
36924: LIST
36925: LIST
36926: LIST
36927: LIST
36928: LIST
36929: LIST
36930: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36931: LD_ADDR_VAR 0 20
36935: PUSH
36936: LD_INT 0
36938: PUSH
36939: LD_INT 0
36941: PUSH
36942: EMPTY
36943: LIST
36944: LIST
36945: PUSH
36946: LD_INT 0
36948: PUSH
36949: LD_INT 1
36951: NEG
36952: PUSH
36953: EMPTY
36954: LIST
36955: LIST
36956: PUSH
36957: LD_INT 1
36959: PUSH
36960: LD_INT 0
36962: PUSH
36963: EMPTY
36964: LIST
36965: LIST
36966: PUSH
36967: LD_INT 1
36969: PUSH
36970: LD_INT 1
36972: PUSH
36973: EMPTY
36974: LIST
36975: LIST
36976: PUSH
36977: LD_INT 0
36979: PUSH
36980: LD_INT 1
36982: PUSH
36983: EMPTY
36984: LIST
36985: LIST
36986: PUSH
36987: LD_INT 1
36989: NEG
36990: PUSH
36991: LD_INT 0
36993: PUSH
36994: EMPTY
36995: LIST
36996: LIST
36997: PUSH
36998: LD_INT 1
37000: NEG
37001: PUSH
37002: LD_INT 1
37004: NEG
37005: PUSH
37006: EMPTY
37007: LIST
37008: LIST
37009: PUSH
37010: LD_INT 1
37012: NEG
37013: PUSH
37014: LD_INT 2
37016: NEG
37017: PUSH
37018: EMPTY
37019: LIST
37020: LIST
37021: PUSH
37022: LD_INT 0
37024: PUSH
37025: LD_INT 2
37027: NEG
37028: PUSH
37029: EMPTY
37030: LIST
37031: LIST
37032: PUSH
37033: LD_INT 1
37035: PUSH
37036: LD_INT 1
37038: NEG
37039: PUSH
37040: EMPTY
37041: LIST
37042: LIST
37043: PUSH
37044: LD_INT 2
37046: PUSH
37047: LD_INT 0
37049: PUSH
37050: EMPTY
37051: LIST
37052: LIST
37053: PUSH
37054: LD_INT 2
37056: PUSH
37057: LD_INT 1
37059: PUSH
37060: EMPTY
37061: LIST
37062: LIST
37063: PUSH
37064: LD_INT 2
37066: PUSH
37067: LD_INT 2
37069: PUSH
37070: EMPTY
37071: LIST
37072: LIST
37073: PUSH
37074: LD_INT 1
37076: PUSH
37077: LD_INT 2
37079: PUSH
37080: EMPTY
37081: LIST
37082: LIST
37083: PUSH
37084: LD_INT 0
37086: PUSH
37087: LD_INT 2
37089: PUSH
37090: EMPTY
37091: LIST
37092: LIST
37093: PUSH
37094: LD_INT 1
37096: NEG
37097: PUSH
37098: LD_INT 1
37100: PUSH
37101: EMPTY
37102: LIST
37103: LIST
37104: PUSH
37105: LD_INT 2
37107: NEG
37108: PUSH
37109: LD_INT 0
37111: PUSH
37112: EMPTY
37113: LIST
37114: LIST
37115: PUSH
37116: LD_INT 2
37118: NEG
37119: PUSH
37120: LD_INT 1
37122: NEG
37123: PUSH
37124: EMPTY
37125: LIST
37126: LIST
37127: PUSH
37128: LD_INT 2
37130: NEG
37131: PUSH
37132: LD_INT 2
37134: NEG
37135: PUSH
37136: EMPTY
37137: LIST
37138: LIST
37139: PUSH
37140: EMPTY
37141: LIST
37142: LIST
37143: LIST
37144: LIST
37145: LIST
37146: LIST
37147: LIST
37148: LIST
37149: LIST
37150: LIST
37151: LIST
37152: LIST
37153: LIST
37154: LIST
37155: LIST
37156: LIST
37157: LIST
37158: LIST
37159: LIST
37160: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37161: LD_ADDR_VAR 0 21
37165: PUSH
37166: LD_INT 0
37168: PUSH
37169: LD_INT 0
37171: PUSH
37172: EMPTY
37173: LIST
37174: LIST
37175: PUSH
37176: LD_INT 0
37178: PUSH
37179: LD_INT 1
37181: NEG
37182: PUSH
37183: EMPTY
37184: LIST
37185: LIST
37186: PUSH
37187: LD_INT 1
37189: PUSH
37190: LD_INT 0
37192: PUSH
37193: EMPTY
37194: LIST
37195: LIST
37196: PUSH
37197: LD_INT 1
37199: PUSH
37200: LD_INT 1
37202: PUSH
37203: EMPTY
37204: LIST
37205: LIST
37206: PUSH
37207: LD_INT 0
37209: PUSH
37210: LD_INT 1
37212: PUSH
37213: EMPTY
37214: LIST
37215: LIST
37216: PUSH
37217: LD_INT 1
37219: NEG
37220: PUSH
37221: LD_INT 0
37223: PUSH
37224: EMPTY
37225: LIST
37226: LIST
37227: PUSH
37228: LD_INT 1
37230: NEG
37231: PUSH
37232: LD_INT 1
37234: NEG
37235: PUSH
37236: EMPTY
37237: LIST
37238: LIST
37239: PUSH
37240: LD_INT 1
37242: NEG
37243: PUSH
37244: LD_INT 2
37246: NEG
37247: PUSH
37248: EMPTY
37249: LIST
37250: LIST
37251: PUSH
37252: LD_INT 0
37254: PUSH
37255: LD_INT 2
37257: NEG
37258: PUSH
37259: EMPTY
37260: LIST
37261: LIST
37262: PUSH
37263: LD_INT 1
37265: PUSH
37266: LD_INT 1
37268: NEG
37269: PUSH
37270: EMPTY
37271: LIST
37272: LIST
37273: PUSH
37274: LD_INT 2
37276: PUSH
37277: LD_INT 0
37279: PUSH
37280: EMPTY
37281: LIST
37282: LIST
37283: PUSH
37284: LD_INT 2
37286: PUSH
37287: LD_INT 1
37289: PUSH
37290: EMPTY
37291: LIST
37292: LIST
37293: PUSH
37294: LD_INT 2
37296: PUSH
37297: LD_INT 2
37299: PUSH
37300: EMPTY
37301: LIST
37302: LIST
37303: PUSH
37304: LD_INT 1
37306: PUSH
37307: LD_INT 2
37309: PUSH
37310: EMPTY
37311: LIST
37312: LIST
37313: PUSH
37314: LD_INT 0
37316: PUSH
37317: LD_INT 2
37319: PUSH
37320: EMPTY
37321: LIST
37322: LIST
37323: PUSH
37324: LD_INT 1
37326: NEG
37327: PUSH
37328: LD_INT 1
37330: PUSH
37331: EMPTY
37332: LIST
37333: LIST
37334: PUSH
37335: LD_INT 2
37337: NEG
37338: PUSH
37339: LD_INT 0
37341: PUSH
37342: EMPTY
37343: LIST
37344: LIST
37345: PUSH
37346: LD_INT 2
37348: NEG
37349: PUSH
37350: LD_INT 1
37352: NEG
37353: PUSH
37354: EMPTY
37355: LIST
37356: LIST
37357: PUSH
37358: LD_INT 2
37360: NEG
37361: PUSH
37362: LD_INT 2
37364: NEG
37365: PUSH
37366: EMPTY
37367: LIST
37368: LIST
37369: PUSH
37370: EMPTY
37371: LIST
37372: LIST
37373: LIST
37374: LIST
37375: LIST
37376: LIST
37377: LIST
37378: LIST
37379: LIST
37380: LIST
37381: LIST
37382: LIST
37383: LIST
37384: LIST
37385: LIST
37386: LIST
37387: LIST
37388: LIST
37389: LIST
37390: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37391: LD_ADDR_VAR 0 22
37395: PUSH
37396: LD_INT 0
37398: PUSH
37399: LD_INT 0
37401: PUSH
37402: EMPTY
37403: LIST
37404: LIST
37405: PUSH
37406: LD_INT 0
37408: PUSH
37409: LD_INT 1
37411: NEG
37412: PUSH
37413: EMPTY
37414: LIST
37415: LIST
37416: PUSH
37417: LD_INT 1
37419: PUSH
37420: LD_INT 0
37422: PUSH
37423: EMPTY
37424: LIST
37425: LIST
37426: PUSH
37427: LD_INT 1
37429: PUSH
37430: LD_INT 1
37432: PUSH
37433: EMPTY
37434: LIST
37435: LIST
37436: PUSH
37437: LD_INT 0
37439: PUSH
37440: LD_INT 1
37442: PUSH
37443: EMPTY
37444: LIST
37445: LIST
37446: PUSH
37447: LD_INT 1
37449: NEG
37450: PUSH
37451: LD_INT 0
37453: PUSH
37454: EMPTY
37455: LIST
37456: LIST
37457: PUSH
37458: LD_INT 1
37460: NEG
37461: PUSH
37462: LD_INT 1
37464: NEG
37465: PUSH
37466: EMPTY
37467: LIST
37468: LIST
37469: PUSH
37470: LD_INT 1
37472: NEG
37473: PUSH
37474: LD_INT 2
37476: NEG
37477: PUSH
37478: EMPTY
37479: LIST
37480: LIST
37481: PUSH
37482: LD_INT 0
37484: PUSH
37485: LD_INT 2
37487: NEG
37488: PUSH
37489: EMPTY
37490: LIST
37491: LIST
37492: PUSH
37493: LD_INT 1
37495: PUSH
37496: LD_INT 1
37498: NEG
37499: PUSH
37500: EMPTY
37501: LIST
37502: LIST
37503: PUSH
37504: LD_INT 2
37506: PUSH
37507: LD_INT 0
37509: PUSH
37510: EMPTY
37511: LIST
37512: LIST
37513: PUSH
37514: LD_INT 2
37516: PUSH
37517: LD_INT 1
37519: PUSH
37520: EMPTY
37521: LIST
37522: LIST
37523: PUSH
37524: LD_INT 2
37526: PUSH
37527: LD_INT 2
37529: PUSH
37530: EMPTY
37531: LIST
37532: LIST
37533: PUSH
37534: LD_INT 1
37536: PUSH
37537: LD_INT 2
37539: PUSH
37540: EMPTY
37541: LIST
37542: LIST
37543: PUSH
37544: LD_INT 0
37546: PUSH
37547: LD_INT 2
37549: PUSH
37550: EMPTY
37551: LIST
37552: LIST
37553: PUSH
37554: LD_INT 1
37556: NEG
37557: PUSH
37558: LD_INT 1
37560: PUSH
37561: EMPTY
37562: LIST
37563: LIST
37564: PUSH
37565: LD_INT 2
37567: NEG
37568: PUSH
37569: LD_INT 0
37571: PUSH
37572: EMPTY
37573: LIST
37574: LIST
37575: PUSH
37576: LD_INT 2
37578: NEG
37579: PUSH
37580: LD_INT 1
37582: NEG
37583: PUSH
37584: EMPTY
37585: LIST
37586: LIST
37587: PUSH
37588: LD_INT 2
37590: NEG
37591: PUSH
37592: LD_INT 2
37594: NEG
37595: PUSH
37596: EMPTY
37597: LIST
37598: LIST
37599: PUSH
37600: EMPTY
37601: LIST
37602: LIST
37603: LIST
37604: LIST
37605: LIST
37606: LIST
37607: LIST
37608: LIST
37609: LIST
37610: LIST
37611: LIST
37612: LIST
37613: LIST
37614: LIST
37615: LIST
37616: LIST
37617: LIST
37618: LIST
37619: LIST
37620: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
37621: LD_ADDR_VAR 0 23
37625: PUSH
37626: LD_INT 0
37628: PUSH
37629: LD_INT 0
37631: PUSH
37632: EMPTY
37633: LIST
37634: LIST
37635: PUSH
37636: LD_INT 0
37638: PUSH
37639: LD_INT 1
37641: NEG
37642: PUSH
37643: EMPTY
37644: LIST
37645: LIST
37646: PUSH
37647: LD_INT 1
37649: PUSH
37650: LD_INT 0
37652: PUSH
37653: EMPTY
37654: LIST
37655: LIST
37656: PUSH
37657: LD_INT 1
37659: PUSH
37660: LD_INT 1
37662: PUSH
37663: EMPTY
37664: LIST
37665: LIST
37666: PUSH
37667: LD_INT 0
37669: PUSH
37670: LD_INT 1
37672: PUSH
37673: EMPTY
37674: LIST
37675: LIST
37676: PUSH
37677: LD_INT 1
37679: NEG
37680: PUSH
37681: LD_INT 0
37683: PUSH
37684: EMPTY
37685: LIST
37686: LIST
37687: PUSH
37688: LD_INT 1
37690: NEG
37691: PUSH
37692: LD_INT 1
37694: NEG
37695: PUSH
37696: EMPTY
37697: LIST
37698: LIST
37699: PUSH
37700: LD_INT 1
37702: NEG
37703: PUSH
37704: LD_INT 2
37706: NEG
37707: PUSH
37708: EMPTY
37709: LIST
37710: LIST
37711: PUSH
37712: LD_INT 0
37714: PUSH
37715: LD_INT 2
37717: NEG
37718: PUSH
37719: EMPTY
37720: LIST
37721: LIST
37722: PUSH
37723: LD_INT 1
37725: PUSH
37726: LD_INT 1
37728: NEG
37729: PUSH
37730: EMPTY
37731: LIST
37732: LIST
37733: PUSH
37734: LD_INT 2
37736: PUSH
37737: LD_INT 0
37739: PUSH
37740: EMPTY
37741: LIST
37742: LIST
37743: PUSH
37744: LD_INT 2
37746: PUSH
37747: LD_INT 1
37749: PUSH
37750: EMPTY
37751: LIST
37752: LIST
37753: PUSH
37754: LD_INT 2
37756: PUSH
37757: LD_INT 2
37759: PUSH
37760: EMPTY
37761: LIST
37762: LIST
37763: PUSH
37764: LD_INT 1
37766: PUSH
37767: LD_INT 2
37769: PUSH
37770: EMPTY
37771: LIST
37772: LIST
37773: PUSH
37774: LD_INT 0
37776: PUSH
37777: LD_INT 2
37779: PUSH
37780: EMPTY
37781: LIST
37782: LIST
37783: PUSH
37784: LD_INT 1
37786: NEG
37787: PUSH
37788: LD_INT 1
37790: PUSH
37791: EMPTY
37792: LIST
37793: LIST
37794: PUSH
37795: LD_INT 2
37797: NEG
37798: PUSH
37799: LD_INT 0
37801: PUSH
37802: EMPTY
37803: LIST
37804: LIST
37805: PUSH
37806: LD_INT 2
37808: NEG
37809: PUSH
37810: LD_INT 1
37812: NEG
37813: PUSH
37814: EMPTY
37815: LIST
37816: LIST
37817: PUSH
37818: LD_INT 2
37820: NEG
37821: PUSH
37822: LD_INT 2
37824: NEG
37825: PUSH
37826: EMPTY
37827: LIST
37828: LIST
37829: PUSH
37830: LD_INT 2
37832: NEG
37833: PUSH
37834: LD_INT 3
37836: NEG
37837: PUSH
37838: EMPTY
37839: LIST
37840: LIST
37841: PUSH
37842: LD_INT 1
37844: NEG
37845: PUSH
37846: LD_INT 3
37848: NEG
37849: PUSH
37850: EMPTY
37851: LIST
37852: LIST
37853: PUSH
37854: LD_INT 1
37856: PUSH
37857: LD_INT 2
37859: NEG
37860: PUSH
37861: EMPTY
37862: LIST
37863: LIST
37864: PUSH
37865: LD_INT 2
37867: PUSH
37868: LD_INT 1
37870: NEG
37871: PUSH
37872: EMPTY
37873: LIST
37874: LIST
37875: PUSH
37876: EMPTY
37877: LIST
37878: LIST
37879: LIST
37880: LIST
37881: LIST
37882: LIST
37883: LIST
37884: LIST
37885: LIST
37886: LIST
37887: LIST
37888: LIST
37889: LIST
37890: LIST
37891: LIST
37892: LIST
37893: LIST
37894: LIST
37895: LIST
37896: LIST
37897: LIST
37898: LIST
37899: LIST
37900: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
37901: LD_ADDR_VAR 0 24
37905: PUSH
37906: LD_INT 0
37908: PUSH
37909: LD_INT 0
37911: PUSH
37912: EMPTY
37913: LIST
37914: LIST
37915: PUSH
37916: LD_INT 0
37918: PUSH
37919: LD_INT 1
37921: NEG
37922: PUSH
37923: EMPTY
37924: LIST
37925: LIST
37926: PUSH
37927: LD_INT 1
37929: PUSH
37930: LD_INT 0
37932: PUSH
37933: EMPTY
37934: LIST
37935: LIST
37936: PUSH
37937: LD_INT 1
37939: PUSH
37940: LD_INT 1
37942: PUSH
37943: EMPTY
37944: LIST
37945: LIST
37946: PUSH
37947: LD_INT 0
37949: PUSH
37950: LD_INT 1
37952: PUSH
37953: EMPTY
37954: LIST
37955: LIST
37956: PUSH
37957: LD_INT 1
37959: NEG
37960: PUSH
37961: LD_INT 0
37963: PUSH
37964: EMPTY
37965: LIST
37966: LIST
37967: PUSH
37968: LD_INT 1
37970: NEG
37971: PUSH
37972: LD_INT 1
37974: NEG
37975: PUSH
37976: EMPTY
37977: LIST
37978: LIST
37979: PUSH
37980: LD_INT 1
37982: NEG
37983: PUSH
37984: LD_INT 2
37986: NEG
37987: PUSH
37988: EMPTY
37989: LIST
37990: LIST
37991: PUSH
37992: LD_INT 0
37994: PUSH
37995: LD_INT 2
37997: NEG
37998: PUSH
37999: EMPTY
38000: LIST
38001: LIST
38002: PUSH
38003: LD_INT 1
38005: PUSH
38006: LD_INT 1
38008: NEG
38009: PUSH
38010: EMPTY
38011: LIST
38012: LIST
38013: PUSH
38014: LD_INT 2
38016: PUSH
38017: LD_INT 0
38019: PUSH
38020: EMPTY
38021: LIST
38022: LIST
38023: PUSH
38024: LD_INT 2
38026: PUSH
38027: LD_INT 1
38029: PUSH
38030: EMPTY
38031: LIST
38032: LIST
38033: PUSH
38034: LD_INT 2
38036: PUSH
38037: LD_INT 2
38039: PUSH
38040: EMPTY
38041: LIST
38042: LIST
38043: PUSH
38044: LD_INT 1
38046: PUSH
38047: LD_INT 2
38049: PUSH
38050: EMPTY
38051: LIST
38052: LIST
38053: PUSH
38054: LD_INT 0
38056: PUSH
38057: LD_INT 2
38059: PUSH
38060: EMPTY
38061: LIST
38062: LIST
38063: PUSH
38064: LD_INT 1
38066: NEG
38067: PUSH
38068: LD_INT 1
38070: PUSH
38071: EMPTY
38072: LIST
38073: LIST
38074: PUSH
38075: LD_INT 2
38077: NEG
38078: PUSH
38079: LD_INT 0
38081: PUSH
38082: EMPTY
38083: LIST
38084: LIST
38085: PUSH
38086: LD_INT 2
38088: NEG
38089: PUSH
38090: LD_INT 1
38092: NEG
38093: PUSH
38094: EMPTY
38095: LIST
38096: LIST
38097: PUSH
38098: LD_INT 2
38100: NEG
38101: PUSH
38102: LD_INT 2
38104: NEG
38105: PUSH
38106: EMPTY
38107: LIST
38108: LIST
38109: PUSH
38110: LD_INT 1
38112: PUSH
38113: LD_INT 2
38115: NEG
38116: PUSH
38117: EMPTY
38118: LIST
38119: LIST
38120: PUSH
38121: LD_INT 2
38123: PUSH
38124: LD_INT 1
38126: NEG
38127: PUSH
38128: EMPTY
38129: LIST
38130: LIST
38131: PUSH
38132: LD_INT 3
38134: PUSH
38135: LD_INT 1
38137: PUSH
38138: EMPTY
38139: LIST
38140: LIST
38141: PUSH
38142: LD_INT 3
38144: PUSH
38145: LD_INT 2
38147: PUSH
38148: EMPTY
38149: LIST
38150: LIST
38151: PUSH
38152: EMPTY
38153: LIST
38154: LIST
38155: LIST
38156: LIST
38157: LIST
38158: LIST
38159: LIST
38160: LIST
38161: LIST
38162: LIST
38163: LIST
38164: LIST
38165: LIST
38166: LIST
38167: LIST
38168: LIST
38169: LIST
38170: LIST
38171: LIST
38172: LIST
38173: LIST
38174: LIST
38175: LIST
38176: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
38177: LD_ADDR_VAR 0 25
38181: PUSH
38182: LD_INT 0
38184: PUSH
38185: LD_INT 0
38187: PUSH
38188: EMPTY
38189: LIST
38190: LIST
38191: PUSH
38192: LD_INT 0
38194: PUSH
38195: LD_INT 1
38197: NEG
38198: PUSH
38199: EMPTY
38200: LIST
38201: LIST
38202: PUSH
38203: LD_INT 1
38205: PUSH
38206: LD_INT 0
38208: PUSH
38209: EMPTY
38210: LIST
38211: LIST
38212: PUSH
38213: LD_INT 1
38215: PUSH
38216: LD_INT 1
38218: PUSH
38219: EMPTY
38220: LIST
38221: LIST
38222: PUSH
38223: LD_INT 0
38225: PUSH
38226: LD_INT 1
38228: PUSH
38229: EMPTY
38230: LIST
38231: LIST
38232: PUSH
38233: LD_INT 1
38235: NEG
38236: PUSH
38237: LD_INT 0
38239: PUSH
38240: EMPTY
38241: LIST
38242: LIST
38243: PUSH
38244: LD_INT 1
38246: NEG
38247: PUSH
38248: LD_INT 1
38250: NEG
38251: PUSH
38252: EMPTY
38253: LIST
38254: LIST
38255: PUSH
38256: LD_INT 1
38258: NEG
38259: PUSH
38260: LD_INT 2
38262: NEG
38263: PUSH
38264: EMPTY
38265: LIST
38266: LIST
38267: PUSH
38268: LD_INT 0
38270: PUSH
38271: LD_INT 2
38273: NEG
38274: PUSH
38275: EMPTY
38276: LIST
38277: LIST
38278: PUSH
38279: LD_INT 1
38281: PUSH
38282: LD_INT 1
38284: NEG
38285: PUSH
38286: EMPTY
38287: LIST
38288: LIST
38289: PUSH
38290: LD_INT 2
38292: PUSH
38293: LD_INT 0
38295: PUSH
38296: EMPTY
38297: LIST
38298: LIST
38299: PUSH
38300: LD_INT 2
38302: PUSH
38303: LD_INT 1
38305: PUSH
38306: EMPTY
38307: LIST
38308: LIST
38309: PUSH
38310: LD_INT 2
38312: PUSH
38313: LD_INT 2
38315: PUSH
38316: EMPTY
38317: LIST
38318: LIST
38319: PUSH
38320: LD_INT 1
38322: PUSH
38323: LD_INT 2
38325: PUSH
38326: EMPTY
38327: LIST
38328: LIST
38329: PUSH
38330: LD_INT 0
38332: PUSH
38333: LD_INT 2
38335: PUSH
38336: EMPTY
38337: LIST
38338: LIST
38339: PUSH
38340: LD_INT 1
38342: NEG
38343: PUSH
38344: LD_INT 1
38346: PUSH
38347: EMPTY
38348: LIST
38349: LIST
38350: PUSH
38351: LD_INT 2
38353: NEG
38354: PUSH
38355: LD_INT 0
38357: PUSH
38358: EMPTY
38359: LIST
38360: LIST
38361: PUSH
38362: LD_INT 2
38364: NEG
38365: PUSH
38366: LD_INT 1
38368: NEG
38369: PUSH
38370: EMPTY
38371: LIST
38372: LIST
38373: PUSH
38374: LD_INT 2
38376: NEG
38377: PUSH
38378: LD_INT 2
38380: NEG
38381: PUSH
38382: EMPTY
38383: LIST
38384: LIST
38385: PUSH
38386: LD_INT 3
38388: PUSH
38389: LD_INT 1
38391: PUSH
38392: EMPTY
38393: LIST
38394: LIST
38395: PUSH
38396: LD_INT 3
38398: PUSH
38399: LD_INT 2
38401: PUSH
38402: EMPTY
38403: LIST
38404: LIST
38405: PUSH
38406: LD_INT 2
38408: PUSH
38409: LD_INT 3
38411: PUSH
38412: EMPTY
38413: LIST
38414: LIST
38415: PUSH
38416: LD_INT 1
38418: PUSH
38419: LD_INT 3
38421: PUSH
38422: EMPTY
38423: LIST
38424: LIST
38425: PUSH
38426: EMPTY
38427: LIST
38428: LIST
38429: LIST
38430: LIST
38431: LIST
38432: LIST
38433: LIST
38434: LIST
38435: LIST
38436: LIST
38437: LIST
38438: LIST
38439: LIST
38440: LIST
38441: LIST
38442: LIST
38443: LIST
38444: LIST
38445: LIST
38446: LIST
38447: LIST
38448: LIST
38449: LIST
38450: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
38451: LD_ADDR_VAR 0 26
38455: PUSH
38456: LD_INT 0
38458: PUSH
38459: LD_INT 0
38461: PUSH
38462: EMPTY
38463: LIST
38464: LIST
38465: PUSH
38466: LD_INT 0
38468: PUSH
38469: LD_INT 1
38471: NEG
38472: PUSH
38473: EMPTY
38474: LIST
38475: LIST
38476: PUSH
38477: LD_INT 1
38479: PUSH
38480: LD_INT 0
38482: PUSH
38483: EMPTY
38484: LIST
38485: LIST
38486: PUSH
38487: LD_INT 1
38489: PUSH
38490: LD_INT 1
38492: PUSH
38493: EMPTY
38494: LIST
38495: LIST
38496: PUSH
38497: LD_INT 0
38499: PUSH
38500: LD_INT 1
38502: PUSH
38503: EMPTY
38504: LIST
38505: LIST
38506: PUSH
38507: LD_INT 1
38509: NEG
38510: PUSH
38511: LD_INT 0
38513: PUSH
38514: EMPTY
38515: LIST
38516: LIST
38517: PUSH
38518: LD_INT 1
38520: NEG
38521: PUSH
38522: LD_INT 1
38524: NEG
38525: PUSH
38526: EMPTY
38527: LIST
38528: LIST
38529: PUSH
38530: LD_INT 1
38532: NEG
38533: PUSH
38534: LD_INT 2
38536: NEG
38537: PUSH
38538: EMPTY
38539: LIST
38540: LIST
38541: PUSH
38542: LD_INT 0
38544: PUSH
38545: LD_INT 2
38547: NEG
38548: PUSH
38549: EMPTY
38550: LIST
38551: LIST
38552: PUSH
38553: LD_INT 1
38555: PUSH
38556: LD_INT 1
38558: NEG
38559: PUSH
38560: EMPTY
38561: LIST
38562: LIST
38563: PUSH
38564: LD_INT 2
38566: PUSH
38567: LD_INT 0
38569: PUSH
38570: EMPTY
38571: LIST
38572: LIST
38573: PUSH
38574: LD_INT 2
38576: PUSH
38577: LD_INT 1
38579: PUSH
38580: EMPTY
38581: LIST
38582: LIST
38583: PUSH
38584: LD_INT 2
38586: PUSH
38587: LD_INT 2
38589: PUSH
38590: EMPTY
38591: LIST
38592: LIST
38593: PUSH
38594: LD_INT 1
38596: PUSH
38597: LD_INT 2
38599: PUSH
38600: EMPTY
38601: LIST
38602: LIST
38603: PUSH
38604: LD_INT 0
38606: PUSH
38607: LD_INT 2
38609: PUSH
38610: EMPTY
38611: LIST
38612: LIST
38613: PUSH
38614: LD_INT 1
38616: NEG
38617: PUSH
38618: LD_INT 1
38620: PUSH
38621: EMPTY
38622: LIST
38623: LIST
38624: PUSH
38625: LD_INT 2
38627: NEG
38628: PUSH
38629: LD_INT 0
38631: PUSH
38632: EMPTY
38633: LIST
38634: LIST
38635: PUSH
38636: LD_INT 2
38638: NEG
38639: PUSH
38640: LD_INT 1
38642: NEG
38643: PUSH
38644: EMPTY
38645: LIST
38646: LIST
38647: PUSH
38648: LD_INT 2
38650: NEG
38651: PUSH
38652: LD_INT 2
38654: NEG
38655: PUSH
38656: EMPTY
38657: LIST
38658: LIST
38659: PUSH
38660: LD_INT 2
38662: PUSH
38663: LD_INT 3
38665: PUSH
38666: EMPTY
38667: LIST
38668: LIST
38669: PUSH
38670: LD_INT 1
38672: PUSH
38673: LD_INT 3
38675: PUSH
38676: EMPTY
38677: LIST
38678: LIST
38679: PUSH
38680: LD_INT 1
38682: NEG
38683: PUSH
38684: LD_INT 2
38686: PUSH
38687: EMPTY
38688: LIST
38689: LIST
38690: PUSH
38691: LD_INT 2
38693: NEG
38694: PUSH
38695: LD_INT 1
38697: PUSH
38698: EMPTY
38699: LIST
38700: LIST
38701: PUSH
38702: EMPTY
38703: LIST
38704: LIST
38705: LIST
38706: LIST
38707: LIST
38708: LIST
38709: LIST
38710: LIST
38711: LIST
38712: LIST
38713: LIST
38714: LIST
38715: LIST
38716: LIST
38717: LIST
38718: LIST
38719: LIST
38720: LIST
38721: LIST
38722: LIST
38723: LIST
38724: LIST
38725: LIST
38726: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38727: LD_ADDR_VAR 0 27
38731: PUSH
38732: LD_INT 0
38734: PUSH
38735: LD_INT 0
38737: PUSH
38738: EMPTY
38739: LIST
38740: LIST
38741: PUSH
38742: LD_INT 0
38744: PUSH
38745: LD_INT 1
38747: NEG
38748: PUSH
38749: EMPTY
38750: LIST
38751: LIST
38752: PUSH
38753: LD_INT 1
38755: PUSH
38756: LD_INT 0
38758: PUSH
38759: EMPTY
38760: LIST
38761: LIST
38762: PUSH
38763: LD_INT 1
38765: PUSH
38766: LD_INT 1
38768: PUSH
38769: EMPTY
38770: LIST
38771: LIST
38772: PUSH
38773: LD_INT 0
38775: PUSH
38776: LD_INT 1
38778: PUSH
38779: EMPTY
38780: LIST
38781: LIST
38782: PUSH
38783: LD_INT 1
38785: NEG
38786: PUSH
38787: LD_INT 0
38789: PUSH
38790: EMPTY
38791: LIST
38792: LIST
38793: PUSH
38794: LD_INT 1
38796: NEG
38797: PUSH
38798: LD_INT 1
38800: NEG
38801: PUSH
38802: EMPTY
38803: LIST
38804: LIST
38805: PUSH
38806: LD_INT 1
38808: NEG
38809: PUSH
38810: LD_INT 2
38812: NEG
38813: PUSH
38814: EMPTY
38815: LIST
38816: LIST
38817: PUSH
38818: LD_INT 0
38820: PUSH
38821: LD_INT 2
38823: NEG
38824: PUSH
38825: EMPTY
38826: LIST
38827: LIST
38828: PUSH
38829: LD_INT 1
38831: PUSH
38832: LD_INT 1
38834: NEG
38835: PUSH
38836: EMPTY
38837: LIST
38838: LIST
38839: PUSH
38840: LD_INT 2
38842: PUSH
38843: LD_INT 0
38845: PUSH
38846: EMPTY
38847: LIST
38848: LIST
38849: PUSH
38850: LD_INT 2
38852: PUSH
38853: LD_INT 1
38855: PUSH
38856: EMPTY
38857: LIST
38858: LIST
38859: PUSH
38860: LD_INT 2
38862: PUSH
38863: LD_INT 2
38865: PUSH
38866: EMPTY
38867: LIST
38868: LIST
38869: PUSH
38870: LD_INT 1
38872: PUSH
38873: LD_INT 2
38875: PUSH
38876: EMPTY
38877: LIST
38878: LIST
38879: PUSH
38880: LD_INT 0
38882: PUSH
38883: LD_INT 2
38885: PUSH
38886: EMPTY
38887: LIST
38888: LIST
38889: PUSH
38890: LD_INT 1
38892: NEG
38893: PUSH
38894: LD_INT 1
38896: PUSH
38897: EMPTY
38898: LIST
38899: LIST
38900: PUSH
38901: LD_INT 2
38903: NEG
38904: PUSH
38905: LD_INT 0
38907: PUSH
38908: EMPTY
38909: LIST
38910: LIST
38911: PUSH
38912: LD_INT 2
38914: NEG
38915: PUSH
38916: LD_INT 1
38918: NEG
38919: PUSH
38920: EMPTY
38921: LIST
38922: LIST
38923: PUSH
38924: LD_INT 2
38926: NEG
38927: PUSH
38928: LD_INT 2
38930: NEG
38931: PUSH
38932: EMPTY
38933: LIST
38934: LIST
38935: PUSH
38936: LD_INT 1
38938: NEG
38939: PUSH
38940: LD_INT 2
38942: PUSH
38943: EMPTY
38944: LIST
38945: LIST
38946: PUSH
38947: LD_INT 2
38949: NEG
38950: PUSH
38951: LD_INT 1
38953: PUSH
38954: EMPTY
38955: LIST
38956: LIST
38957: PUSH
38958: LD_INT 3
38960: NEG
38961: PUSH
38962: LD_INT 1
38964: NEG
38965: PUSH
38966: EMPTY
38967: LIST
38968: LIST
38969: PUSH
38970: LD_INT 3
38972: NEG
38973: PUSH
38974: LD_INT 2
38976: NEG
38977: PUSH
38978: EMPTY
38979: LIST
38980: LIST
38981: PUSH
38982: EMPTY
38983: LIST
38984: LIST
38985: LIST
38986: LIST
38987: LIST
38988: LIST
38989: LIST
38990: LIST
38991: LIST
38992: LIST
38993: LIST
38994: LIST
38995: LIST
38996: LIST
38997: LIST
38998: LIST
38999: LIST
39000: LIST
39001: LIST
39002: LIST
39003: LIST
39004: LIST
39005: LIST
39006: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39007: LD_ADDR_VAR 0 28
39011: PUSH
39012: LD_INT 0
39014: PUSH
39015: LD_INT 0
39017: PUSH
39018: EMPTY
39019: LIST
39020: LIST
39021: PUSH
39022: LD_INT 0
39024: PUSH
39025: LD_INT 1
39027: NEG
39028: PUSH
39029: EMPTY
39030: LIST
39031: LIST
39032: PUSH
39033: LD_INT 1
39035: PUSH
39036: LD_INT 0
39038: PUSH
39039: EMPTY
39040: LIST
39041: LIST
39042: PUSH
39043: LD_INT 1
39045: PUSH
39046: LD_INT 1
39048: PUSH
39049: EMPTY
39050: LIST
39051: LIST
39052: PUSH
39053: LD_INT 0
39055: PUSH
39056: LD_INT 1
39058: PUSH
39059: EMPTY
39060: LIST
39061: LIST
39062: PUSH
39063: LD_INT 1
39065: NEG
39066: PUSH
39067: LD_INT 0
39069: PUSH
39070: EMPTY
39071: LIST
39072: LIST
39073: PUSH
39074: LD_INT 1
39076: NEG
39077: PUSH
39078: LD_INT 1
39080: NEG
39081: PUSH
39082: EMPTY
39083: LIST
39084: LIST
39085: PUSH
39086: LD_INT 1
39088: NEG
39089: PUSH
39090: LD_INT 2
39092: NEG
39093: PUSH
39094: EMPTY
39095: LIST
39096: LIST
39097: PUSH
39098: LD_INT 0
39100: PUSH
39101: LD_INT 2
39103: NEG
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: PUSH
39109: LD_INT 1
39111: PUSH
39112: LD_INT 1
39114: NEG
39115: PUSH
39116: EMPTY
39117: LIST
39118: LIST
39119: PUSH
39120: LD_INT 2
39122: PUSH
39123: LD_INT 0
39125: PUSH
39126: EMPTY
39127: LIST
39128: LIST
39129: PUSH
39130: LD_INT 2
39132: PUSH
39133: LD_INT 1
39135: PUSH
39136: EMPTY
39137: LIST
39138: LIST
39139: PUSH
39140: LD_INT 2
39142: PUSH
39143: LD_INT 2
39145: PUSH
39146: EMPTY
39147: LIST
39148: LIST
39149: PUSH
39150: LD_INT 1
39152: PUSH
39153: LD_INT 2
39155: PUSH
39156: EMPTY
39157: LIST
39158: LIST
39159: PUSH
39160: LD_INT 0
39162: PUSH
39163: LD_INT 2
39165: PUSH
39166: EMPTY
39167: LIST
39168: LIST
39169: PUSH
39170: LD_INT 1
39172: NEG
39173: PUSH
39174: LD_INT 1
39176: PUSH
39177: EMPTY
39178: LIST
39179: LIST
39180: PUSH
39181: LD_INT 2
39183: NEG
39184: PUSH
39185: LD_INT 0
39187: PUSH
39188: EMPTY
39189: LIST
39190: LIST
39191: PUSH
39192: LD_INT 2
39194: NEG
39195: PUSH
39196: LD_INT 1
39198: NEG
39199: PUSH
39200: EMPTY
39201: LIST
39202: LIST
39203: PUSH
39204: LD_INT 2
39206: NEG
39207: PUSH
39208: LD_INT 2
39210: NEG
39211: PUSH
39212: EMPTY
39213: LIST
39214: LIST
39215: PUSH
39216: LD_INT 2
39218: NEG
39219: PUSH
39220: LD_INT 3
39222: NEG
39223: PUSH
39224: EMPTY
39225: LIST
39226: LIST
39227: PUSH
39228: LD_INT 1
39230: NEG
39231: PUSH
39232: LD_INT 3
39234: NEG
39235: PUSH
39236: EMPTY
39237: LIST
39238: LIST
39239: PUSH
39240: LD_INT 3
39242: NEG
39243: PUSH
39244: LD_INT 1
39246: NEG
39247: PUSH
39248: EMPTY
39249: LIST
39250: LIST
39251: PUSH
39252: LD_INT 3
39254: NEG
39255: PUSH
39256: LD_INT 2
39258: NEG
39259: PUSH
39260: EMPTY
39261: LIST
39262: LIST
39263: PUSH
39264: EMPTY
39265: LIST
39266: LIST
39267: LIST
39268: LIST
39269: LIST
39270: LIST
39271: LIST
39272: LIST
39273: LIST
39274: LIST
39275: LIST
39276: LIST
39277: LIST
39278: LIST
39279: LIST
39280: LIST
39281: LIST
39282: LIST
39283: LIST
39284: LIST
39285: LIST
39286: LIST
39287: LIST
39288: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39289: LD_ADDR_VAR 0 29
39293: PUSH
39294: LD_INT 0
39296: PUSH
39297: LD_INT 0
39299: PUSH
39300: EMPTY
39301: LIST
39302: LIST
39303: PUSH
39304: LD_INT 0
39306: PUSH
39307: LD_INT 1
39309: NEG
39310: PUSH
39311: EMPTY
39312: LIST
39313: LIST
39314: PUSH
39315: LD_INT 1
39317: PUSH
39318: LD_INT 0
39320: PUSH
39321: EMPTY
39322: LIST
39323: LIST
39324: PUSH
39325: LD_INT 1
39327: PUSH
39328: LD_INT 1
39330: PUSH
39331: EMPTY
39332: LIST
39333: LIST
39334: PUSH
39335: LD_INT 0
39337: PUSH
39338: LD_INT 1
39340: PUSH
39341: EMPTY
39342: LIST
39343: LIST
39344: PUSH
39345: LD_INT 1
39347: NEG
39348: PUSH
39349: LD_INT 0
39351: PUSH
39352: EMPTY
39353: LIST
39354: LIST
39355: PUSH
39356: LD_INT 1
39358: NEG
39359: PUSH
39360: LD_INT 1
39362: NEG
39363: PUSH
39364: EMPTY
39365: LIST
39366: LIST
39367: PUSH
39368: LD_INT 1
39370: NEG
39371: PUSH
39372: LD_INT 2
39374: NEG
39375: PUSH
39376: EMPTY
39377: LIST
39378: LIST
39379: PUSH
39380: LD_INT 0
39382: PUSH
39383: LD_INT 2
39385: NEG
39386: PUSH
39387: EMPTY
39388: LIST
39389: LIST
39390: PUSH
39391: LD_INT 1
39393: PUSH
39394: LD_INT 1
39396: NEG
39397: PUSH
39398: EMPTY
39399: LIST
39400: LIST
39401: PUSH
39402: LD_INT 2
39404: PUSH
39405: LD_INT 0
39407: PUSH
39408: EMPTY
39409: LIST
39410: LIST
39411: PUSH
39412: LD_INT 2
39414: PUSH
39415: LD_INT 1
39417: PUSH
39418: EMPTY
39419: LIST
39420: LIST
39421: PUSH
39422: LD_INT 1
39424: PUSH
39425: LD_INT 2
39427: PUSH
39428: EMPTY
39429: LIST
39430: LIST
39431: PUSH
39432: LD_INT 0
39434: PUSH
39435: LD_INT 2
39437: PUSH
39438: EMPTY
39439: LIST
39440: LIST
39441: PUSH
39442: LD_INT 1
39444: NEG
39445: PUSH
39446: LD_INT 1
39448: PUSH
39449: EMPTY
39450: LIST
39451: LIST
39452: PUSH
39453: LD_INT 2
39455: NEG
39456: PUSH
39457: LD_INT 1
39459: NEG
39460: PUSH
39461: EMPTY
39462: LIST
39463: LIST
39464: PUSH
39465: LD_INT 2
39467: NEG
39468: PUSH
39469: LD_INT 2
39471: NEG
39472: PUSH
39473: EMPTY
39474: LIST
39475: LIST
39476: PUSH
39477: LD_INT 2
39479: NEG
39480: PUSH
39481: LD_INT 3
39483: NEG
39484: PUSH
39485: EMPTY
39486: LIST
39487: LIST
39488: PUSH
39489: LD_INT 2
39491: PUSH
39492: LD_INT 1
39494: NEG
39495: PUSH
39496: EMPTY
39497: LIST
39498: LIST
39499: PUSH
39500: LD_INT 3
39502: PUSH
39503: LD_INT 1
39505: PUSH
39506: EMPTY
39507: LIST
39508: LIST
39509: PUSH
39510: LD_INT 1
39512: PUSH
39513: LD_INT 3
39515: PUSH
39516: EMPTY
39517: LIST
39518: LIST
39519: PUSH
39520: LD_INT 1
39522: NEG
39523: PUSH
39524: LD_INT 2
39526: PUSH
39527: EMPTY
39528: LIST
39529: LIST
39530: PUSH
39531: LD_INT 3
39533: NEG
39534: PUSH
39535: LD_INT 2
39537: NEG
39538: PUSH
39539: EMPTY
39540: LIST
39541: LIST
39542: PUSH
39543: EMPTY
39544: LIST
39545: LIST
39546: LIST
39547: LIST
39548: LIST
39549: LIST
39550: LIST
39551: LIST
39552: LIST
39553: LIST
39554: LIST
39555: LIST
39556: LIST
39557: LIST
39558: LIST
39559: LIST
39560: LIST
39561: LIST
39562: LIST
39563: LIST
39564: LIST
39565: LIST
39566: LIST
39567: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39568: LD_ADDR_VAR 0 30
39572: PUSH
39573: LD_INT 0
39575: PUSH
39576: LD_INT 0
39578: PUSH
39579: EMPTY
39580: LIST
39581: LIST
39582: PUSH
39583: LD_INT 0
39585: PUSH
39586: LD_INT 1
39588: NEG
39589: PUSH
39590: EMPTY
39591: LIST
39592: LIST
39593: PUSH
39594: LD_INT 1
39596: PUSH
39597: LD_INT 0
39599: PUSH
39600: EMPTY
39601: LIST
39602: LIST
39603: PUSH
39604: LD_INT 1
39606: PUSH
39607: LD_INT 1
39609: PUSH
39610: EMPTY
39611: LIST
39612: LIST
39613: PUSH
39614: LD_INT 0
39616: PUSH
39617: LD_INT 1
39619: PUSH
39620: EMPTY
39621: LIST
39622: LIST
39623: PUSH
39624: LD_INT 1
39626: NEG
39627: PUSH
39628: LD_INT 0
39630: PUSH
39631: EMPTY
39632: LIST
39633: LIST
39634: PUSH
39635: LD_INT 1
39637: NEG
39638: PUSH
39639: LD_INT 1
39641: NEG
39642: PUSH
39643: EMPTY
39644: LIST
39645: LIST
39646: PUSH
39647: LD_INT 1
39649: NEG
39650: PUSH
39651: LD_INT 2
39653: NEG
39654: PUSH
39655: EMPTY
39656: LIST
39657: LIST
39658: PUSH
39659: LD_INT 0
39661: PUSH
39662: LD_INT 2
39664: NEG
39665: PUSH
39666: EMPTY
39667: LIST
39668: LIST
39669: PUSH
39670: LD_INT 1
39672: PUSH
39673: LD_INT 1
39675: NEG
39676: PUSH
39677: EMPTY
39678: LIST
39679: LIST
39680: PUSH
39681: LD_INT 2
39683: PUSH
39684: LD_INT 0
39686: PUSH
39687: EMPTY
39688: LIST
39689: LIST
39690: PUSH
39691: LD_INT 2
39693: PUSH
39694: LD_INT 1
39696: PUSH
39697: EMPTY
39698: LIST
39699: LIST
39700: PUSH
39701: LD_INT 2
39703: PUSH
39704: LD_INT 2
39706: PUSH
39707: EMPTY
39708: LIST
39709: LIST
39710: PUSH
39711: LD_INT 1
39713: PUSH
39714: LD_INT 2
39716: PUSH
39717: EMPTY
39718: LIST
39719: LIST
39720: PUSH
39721: LD_INT 1
39723: NEG
39724: PUSH
39725: LD_INT 1
39727: PUSH
39728: EMPTY
39729: LIST
39730: LIST
39731: PUSH
39732: LD_INT 2
39734: NEG
39735: PUSH
39736: LD_INT 0
39738: PUSH
39739: EMPTY
39740: LIST
39741: LIST
39742: PUSH
39743: LD_INT 2
39745: NEG
39746: PUSH
39747: LD_INT 1
39749: NEG
39750: PUSH
39751: EMPTY
39752: LIST
39753: LIST
39754: PUSH
39755: LD_INT 1
39757: NEG
39758: PUSH
39759: LD_INT 3
39761: NEG
39762: PUSH
39763: EMPTY
39764: LIST
39765: LIST
39766: PUSH
39767: LD_INT 1
39769: PUSH
39770: LD_INT 2
39772: NEG
39773: PUSH
39774: EMPTY
39775: LIST
39776: LIST
39777: PUSH
39778: LD_INT 3
39780: PUSH
39781: LD_INT 2
39783: PUSH
39784: EMPTY
39785: LIST
39786: LIST
39787: PUSH
39788: LD_INT 2
39790: PUSH
39791: LD_INT 3
39793: PUSH
39794: EMPTY
39795: LIST
39796: LIST
39797: PUSH
39798: LD_INT 2
39800: NEG
39801: PUSH
39802: LD_INT 1
39804: PUSH
39805: EMPTY
39806: LIST
39807: LIST
39808: PUSH
39809: LD_INT 3
39811: NEG
39812: PUSH
39813: LD_INT 1
39815: NEG
39816: PUSH
39817: EMPTY
39818: LIST
39819: LIST
39820: PUSH
39821: EMPTY
39822: LIST
39823: LIST
39824: LIST
39825: LIST
39826: LIST
39827: LIST
39828: LIST
39829: LIST
39830: LIST
39831: LIST
39832: LIST
39833: LIST
39834: LIST
39835: LIST
39836: LIST
39837: LIST
39838: LIST
39839: LIST
39840: LIST
39841: LIST
39842: LIST
39843: LIST
39844: LIST
39845: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39846: LD_ADDR_VAR 0 31
39850: PUSH
39851: LD_INT 0
39853: PUSH
39854: LD_INT 0
39856: PUSH
39857: EMPTY
39858: LIST
39859: LIST
39860: PUSH
39861: LD_INT 0
39863: PUSH
39864: LD_INT 1
39866: NEG
39867: PUSH
39868: EMPTY
39869: LIST
39870: LIST
39871: PUSH
39872: LD_INT 1
39874: PUSH
39875: LD_INT 0
39877: PUSH
39878: EMPTY
39879: LIST
39880: LIST
39881: PUSH
39882: LD_INT 1
39884: PUSH
39885: LD_INT 1
39887: PUSH
39888: EMPTY
39889: LIST
39890: LIST
39891: PUSH
39892: LD_INT 0
39894: PUSH
39895: LD_INT 1
39897: PUSH
39898: EMPTY
39899: LIST
39900: LIST
39901: PUSH
39902: LD_INT 1
39904: NEG
39905: PUSH
39906: LD_INT 0
39908: PUSH
39909: EMPTY
39910: LIST
39911: LIST
39912: PUSH
39913: LD_INT 1
39915: NEG
39916: PUSH
39917: LD_INT 1
39919: NEG
39920: PUSH
39921: EMPTY
39922: LIST
39923: LIST
39924: PUSH
39925: LD_INT 1
39927: NEG
39928: PUSH
39929: LD_INT 2
39931: NEG
39932: PUSH
39933: EMPTY
39934: LIST
39935: LIST
39936: PUSH
39937: LD_INT 1
39939: PUSH
39940: LD_INT 1
39942: NEG
39943: PUSH
39944: EMPTY
39945: LIST
39946: LIST
39947: PUSH
39948: LD_INT 2
39950: PUSH
39951: LD_INT 0
39953: PUSH
39954: EMPTY
39955: LIST
39956: LIST
39957: PUSH
39958: LD_INT 2
39960: PUSH
39961: LD_INT 1
39963: PUSH
39964: EMPTY
39965: LIST
39966: LIST
39967: PUSH
39968: LD_INT 2
39970: PUSH
39971: LD_INT 2
39973: PUSH
39974: EMPTY
39975: LIST
39976: LIST
39977: PUSH
39978: LD_INT 1
39980: PUSH
39981: LD_INT 2
39983: PUSH
39984: EMPTY
39985: LIST
39986: LIST
39987: PUSH
39988: LD_INT 0
39990: PUSH
39991: LD_INT 2
39993: PUSH
39994: EMPTY
39995: LIST
39996: LIST
39997: PUSH
39998: LD_INT 1
40000: NEG
40001: PUSH
40002: LD_INT 1
40004: PUSH
40005: EMPTY
40006: LIST
40007: LIST
40008: PUSH
40009: LD_INT 2
40011: NEG
40012: PUSH
40013: LD_INT 1
40015: NEG
40016: PUSH
40017: EMPTY
40018: LIST
40019: LIST
40020: PUSH
40021: LD_INT 2
40023: NEG
40024: PUSH
40025: LD_INT 2
40027: NEG
40028: PUSH
40029: EMPTY
40030: LIST
40031: LIST
40032: PUSH
40033: LD_INT 2
40035: NEG
40036: PUSH
40037: LD_INT 3
40039: NEG
40040: PUSH
40041: EMPTY
40042: LIST
40043: LIST
40044: PUSH
40045: LD_INT 2
40047: PUSH
40048: LD_INT 1
40050: NEG
40051: PUSH
40052: EMPTY
40053: LIST
40054: LIST
40055: PUSH
40056: LD_INT 3
40058: PUSH
40059: LD_INT 1
40061: PUSH
40062: EMPTY
40063: LIST
40064: LIST
40065: PUSH
40066: LD_INT 1
40068: PUSH
40069: LD_INT 3
40071: PUSH
40072: EMPTY
40073: LIST
40074: LIST
40075: PUSH
40076: LD_INT 1
40078: NEG
40079: PUSH
40080: LD_INT 2
40082: PUSH
40083: EMPTY
40084: LIST
40085: LIST
40086: PUSH
40087: LD_INT 3
40089: NEG
40090: PUSH
40091: LD_INT 2
40093: NEG
40094: PUSH
40095: EMPTY
40096: LIST
40097: LIST
40098: PUSH
40099: EMPTY
40100: LIST
40101: LIST
40102: LIST
40103: LIST
40104: LIST
40105: LIST
40106: LIST
40107: LIST
40108: LIST
40109: LIST
40110: LIST
40111: LIST
40112: LIST
40113: LIST
40114: LIST
40115: LIST
40116: LIST
40117: LIST
40118: LIST
40119: LIST
40120: LIST
40121: LIST
40122: LIST
40123: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40124: LD_ADDR_VAR 0 32
40128: PUSH
40129: LD_INT 0
40131: PUSH
40132: LD_INT 0
40134: PUSH
40135: EMPTY
40136: LIST
40137: LIST
40138: PUSH
40139: LD_INT 0
40141: PUSH
40142: LD_INT 1
40144: NEG
40145: PUSH
40146: EMPTY
40147: LIST
40148: LIST
40149: PUSH
40150: LD_INT 1
40152: PUSH
40153: LD_INT 0
40155: PUSH
40156: EMPTY
40157: LIST
40158: LIST
40159: PUSH
40160: LD_INT 1
40162: PUSH
40163: LD_INT 1
40165: PUSH
40166: EMPTY
40167: LIST
40168: LIST
40169: PUSH
40170: LD_INT 0
40172: PUSH
40173: LD_INT 1
40175: PUSH
40176: EMPTY
40177: LIST
40178: LIST
40179: PUSH
40180: LD_INT 1
40182: NEG
40183: PUSH
40184: LD_INT 0
40186: PUSH
40187: EMPTY
40188: LIST
40189: LIST
40190: PUSH
40191: LD_INT 1
40193: NEG
40194: PUSH
40195: LD_INT 1
40197: NEG
40198: PUSH
40199: EMPTY
40200: LIST
40201: LIST
40202: PUSH
40203: LD_INT 1
40205: NEG
40206: PUSH
40207: LD_INT 2
40209: NEG
40210: PUSH
40211: EMPTY
40212: LIST
40213: LIST
40214: PUSH
40215: LD_INT 0
40217: PUSH
40218: LD_INT 2
40220: NEG
40221: PUSH
40222: EMPTY
40223: LIST
40224: LIST
40225: PUSH
40226: LD_INT 1
40228: PUSH
40229: LD_INT 1
40231: NEG
40232: PUSH
40233: EMPTY
40234: LIST
40235: LIST
40236: PUSH
40237: LD_INT 2
40239: PUSH
40240: LD_INT 1
40242: PUSH
40243: EMPTY
40244: LIST
40245: LIST
40246: PUSH
40247: LD_INT 2
40249: PUSH
40250: LD_INT 2
40252: PUSH
40253: EMPTY
40254: LIST
40255: LIST
40256: PUSH
40257: LD_INT 1
40259: PUSH
40260: LD_INT 2
40262: PUSH
40263: EMPTY
40264: LIST
40265: LIST
40266: PUSH
40267: LD_INT 0
40269: PUSH
40270: LD_INT 2
40272: PUSH
40273: EMPTY
40274: LIST
40275: LIST
40276: PUSH
40277: LD_INT 1
40279: NEG
40280: PUSH
40281: LD_INT 1
40283: PUSH
40284: EMPTY
40285: LIST
40286: LIST
40287: PUSH
40288: LD_INT 2
40290: NEG
40291: PUSH
40292: LD_INT 0
40294: PUSH
40295: EMPTY
40296: LIST
40297: LIST
40298: PUSH
40299: LD_INT 2
40301: NEG
40302: PUSH
40303: LD_INT 1
40305: NEG
40306: PUSH
40307: EMPTY
40308: LIST
40309: LIST
40310: PUSH
40311: LD_INT 1
40313: NEG
40314: PUSH
40315: LD_INT 3
40317: NEG
40318: PUSH
40319: EMPTY
40320: LIST
40321: LIST
40322: PUSH
40323: LD_INT 1
40325: PUSH
40326: LD_INT 2
40328: NEG
40329: PUSH
40330: EMPTY
40331: LIST
40332: LIST
40333: PUSH
40334: LD_INT 3
40336: PUSH
40337: LD_INT 2
40339: PUSH
40340: EMPTY
40341: LIST
40342: LIST
40343: PUSH
40344: LD_INT 2
40346: PUSH
40347: LD_INT 3
40349: PUSH
40350: EMPTY
40351: LIST
40352: LIST
40353: PUSH
40354: LD_INT 2
40356: NEG
40357: PUSH
40358: LD_INT 1
40360: PUSH
40361: EMPTY
40362: LIST
40363: LIST
40364: PUSH
40365: LD_INT 3
40367: NEG
40368: PUSH
40369: LD_INT 1
40371: NEG
40372: PUSH
40373: EMPTY
40374: LIST
40375: LIST
40376: PUSH
40377: EMPTY
40378: LIST
40379: LIST
40380: LIST
40381: LIST
40382: LIST
40383: LIST
40384: LIST
40385: LIST
40386: LIST
40387: LIST
40388: LIST
40389: LIST
40390: LIST
40391: LIST
40392: LIST
40393: LIST
40394: LIST
40395: LIST
40396: LIST
40397: LIST
40398: LIST
40399: LIST
40400: LIST
40401: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40402: LD_ADDR_VAR 0 33
40406: PUSH
40407: LD_INT 0
40409: PUSH
40410: LD_INT 0
40412: PUSH
40413: EMPTY
40414: LIST
40415: LIST
40416: PUSH
40417: LD_INT 0
40419: PUSH
40420: LD_INT 1
40422: NEG
40423: PUSH
40424: EMPTY
40425: LIST
40426: LIST
40427: PUSH
40428: LD_INT 1
40430: PUSH
40431: LD_INT 0
40433: PUSH
40434: EMPTY
40435: LIST
40436: LIST
40437: PUSH
40438: LD_INT 1
40440: PUSH
40441: LD_INT 1
40443: PUSH
40444: EMPTY
40445: LIST
40446: LIST
40447: PUSH
40448: LD_INT 0
40450: PUSH
40451: LD_INT 1
40453: PUSH
40454: EMPTY
40455: LIST
40456: LIST
40457: PUSH
40458: LD_INT 1
40460: NEG
40461: PUSH
40462: LD_INT 0
40464: PUSH
40465: EMPTY
40466: LIST
40467: LIST
40468: PUSH
40469: LD_INT 1
40471: NEG
40472: PUSH
40473: LD_INT 1
40475: NEG
40476: PUSH
40477: EMPTY
40478: LIST
40479: LIST
40480: PUSH
40481: LD_INT 1
40483: NEG
40484: PUSH
40485: LD_INT 2
40487: NEG
40488: PUSH
40489: EMPTY
40490: LIST
40491: LIST
40492: PUSH
40493: LD_INT 1
40495: PUSH
40496: LD_INT 1
40498: NEG
40499: PUSH
40500: EMPTY
40501: LIST
40502: LIST
40503: PUSH
40504: LD_INT 2
40506: PUSH
40507: LD_INT 0
40509: PUSH
40510: EMPTY
40511: LIST
40512: LIST
40513: PUSH
40514: LD_INT 2
40516: PUSH
40517: LD_INT 1
40519: PUSH
40520: EMPTY
40521: LIST
40522: LIST
40523: PUSH
40524: LD_INT 1
40526: PUSH
40527: LD_INT 2
40529: PUSH
40530: EMPTY
40531: LIST
40532: LIST
40533: PUSH
40534: LD_INT 0
40536: PUSH
40537: LD_INT 2
40539: PUSH
40540: EMPTY
40541: LIST
40542: LIST
40543: PUSH
40544: LD_INT 1
40546: NEG
40547: PUSH
40548: LD_INT 1
40550: PUSH
40551: EMPTY
40552: LIST
40553: LIST
40554: PUSH
40555: LD_INT 2
40557: NEG
40558: PUSH
40559: LD_INT 0
40561: PUSH
40562: EMPTY
40563: LIST
40564: LIST
40565: PUSH
40566: LD_INT 2
40568: NEG
40569: PUSH
40570: LD_INT 1
40572: NEG
40573: PUSH
40574: EMPTY
40575: LIST
40576: LIST
40577: PUSH
40578: LD_INT 2
40580: NEG
40581: PUSH
40582: LD_INT 2
40584: NEG
40585: PUSH
40586: EMPTY
40587: LIST
40588: LIST
40589: PUSH
40590: LD_INT 2
40592: NEG
40593: PUSH
40594: LD_INT 3
40596: NEG
40597: PUSH
40598: EMPTY
40599: LIST
40600: LIST
40601: PUSH
40602: LD_INT 2
40604: PUSH
40605: LD_INT 1
40607: NEG
40608: PUSH
40609: EMPTY
40610: LIST
40611: LIST
40612: PUSH
40613: LD_INT 3
40615: PUSH
40616: LD_INT 1
40618: PUSH
40619: EMPTY
40620: LIST
40621: LIST
40622: PUSH
40623: LD_INT 1
40625: PUSH
40626: LD_INT 3
40628: PUSH
40629: EMPTY
40630: LIST
40631: LIST
40632: PUSH
40633: LD_INT 1
40635: NEG
40636: PUSH
40637: LD_INT 2
40639: PUSH
40640: EMPTY
40641: LIST
40642: LIST
40643: PUSH
40644: LD_INT 3
40646: NEG
40647: PUSH
40648: LD_INT 2
40650: NEG
40651: PUSH
40652: EMPTY
40653: LIST
40654: LIST
40655: PUSH
40656: EMPTY
40657: LIST
40658: LIST
40659: LIST
40660: LIST
40661: LIST
40662: LIST
40663: LIST
40664: LIST
40665: LIST
40666: LIST
40667: LIST
40668: LIST
40669: LIST
40670: LIST
40671: LIST
40672: LIST
40673: LIST
40674: LIST
40675: LIST
40676: LIST
40677: LIST
40678: LIST
40679: LIST
40680: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40681: LD_ADDR_VAR 0 34
40685: PUSH
40686: LD_INT 0
40688: PUSH
40689: LD_INT 0
40691: PUSH
40692: EMPTY
40693: LIST
40694: LIST
40695: PUSH
40696: LD_INT 0
40698: PUSH
40699: LD_INT 1
40701: NEG
40702: PUSH
40703: EMPTY
40704: LIST
40705: LIST
40706: PUSH
40707: LD_INT 1
40709: PUSH
40710: LD_INT 0
40712: PUSH
40713: EMPTY
40714: LIST
40715: LIST
40716: PUSH
40717: LD_INT 1
40719: PUSH
40720: LD_INT 1
40722: PUSH
40723: EMPTY
40724: LIST
40725: LIST
40726: PUSH
40727: LD_INT 0
40729: PUSH
40730: LD_INT 1
40732: PUSH
40733: EMPTY
40734: LIST
40735: LIST
40736: PUSH
40737: LD_INT 1
40739: NEG
40740: PUSH
40741: LD_INT 0
40743: PUSH
40744: EMPTY
40745: LIST
40746: LIST
40747: PUSH
40748: LD_INT 1
40750: NEG
40751: PUSH
40752: LD_INT 1
40754: NEG
40755: PUSH
40756: EMPTY
40757: LIST
40758: LIST
40759: PUSH
40760: LD_INT 1
40762: NEG
40763: PUSH
40764: LD_INT 2
40766: NEG
40767: PUSH
40768: EMPTY
40769: LIST
40770: LIST
40771: PUSH
40772: LD_INT 0
40774: PUSH
40775: LD_INT 2
40777: NEG
40778: PUSH
40779: EMPTY
40780: LIST
40781: LIST
40782: PUSH
40783: LD_INT 1
40785: PUSH
40786: LD_INT 1
40788: NEG
40789: PUSH
40790: EMPTY
40791: LIST
40792: LIST
40793: PUSH
40794: LD_INT 2
40796: PUSH
40797: LD_INT 1
40799: PUSH
40800: EMPTY
40801: LIST
40802: LIST
40803: PUSH
40804: LD_INT 2
40806: PUSH
40807: LD_INT 2
40809: PUSH
40810: EMPTY
40811: LIST
40812: LIST
40813: PUSH
40814: LD_INT 1
40816: PUSH
40817: LD_INT 2
40819: PUSH
40820: EMPTY
40821: LIST
40822: LIST
40823: PUSH
40824: LD_INT 1
40826: NEG
40827: PUSH
40828: LD_INT 1
40830: PUSH
40831: EMPTY
40832: LIST
40833: LIST
40834: PUSH
40835: LD_INT 2
40837: NEG
40838: PUSH
40839: LD_INT 0
40841: PUSH
40842: EMPTY
40843: LIST
40844: LIST
40845: PUSH
40846: LD_INT 2
40848: NEG
40849: PUSH
40850: LD_INT 1
40852: NEG
40853: PUSH
40854: EMPTY
40855: LIST
40856: LIST
40857: PUSH
40858: LD_INT 2
40860: NEG
40861: PUSH
40862: LD_INT 2
40864: NEG
40865: PUSH
40866: EMPTY
40867: LIST
40868: LIST
40869: PUSH
40870: LD_INT 1
40872: NEG
40873: PUSH
40874: LD_INT 3
40876: NEG
40877: PUSH
40878: EMPTY
40879: LIST
40880: LIST
40881: PUSH
40882: LD_INT 1
40884: PUSH
40885: LD_INT 2
40887: NEG
40888: PUSH
40889: EMPTY
40890: LIST
40891: LIST
40892: PUSH
40893: LD_INT 3
40895: PUSH
40896: LD_INT 2
40898: PUSH
40899: EMPTY
40900: LIST
40901: LIST
40902: PUSH
40903: LD_INT 2
40905: PUSH
40906: LD_INT 3
40908: PUSH
40909: EMPTY
40910: LIST
40911: LIST
40912: PUSH
40913: LD_INT 2
40915: NEG
40916: PUSH
40917: LD_INT 1
40919: PUSH
40920: EMPTY
40921: LIST
40922: LIST
40923: PUSH
40924: LD_INT 3
40926: NEG
40927: PUSH
40928: LD_INT 1
40930: NEG
40931: PUSH
40932: EMPTY
40933: LIST
40934: LIST
40935: PUSH
40936: EMPTY
40937: LIST
40938: LIST
40939: LIST
40940: LIST
40941: LIST
40942: LIST
40943: LIST
40944: LIST
40945: LIST
40946: LIST
40947: LIST
40948: LIST
40949: LIST
40950: LIST
40951: LIST
40952: LIST
40953: LIST
40954: LIST
40955: LIST
40956: LIST
40957: LIST
40958: LIST
40959: LIST
40960: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40961: LD_ADDR_VAR 0 35
40965: PUSH
40966: LD_INT 0
40968: PUSH
40969: LD_INT 0
40971: PUSH
40972: EMPTY
40973: LIST
40974: LIST
40975: PUSH
40976: LD_INT 0
40978: PUSH
40979: LD_INT 1
40981: NEG
40982: PUSH
40983: EMPTY
40984: LIST
40985: LIST
40986: PUSH
40987: LD_INT 1
40989: PUSH
40990: LD_INT 0
40992: PUSH
40993: EMPTY
40994: LIST
40995: LIST
40996: PUSH
40997: LD_INT 1
40999: PUSH
41000: LD_INT 1
41002: PUSH
41003: EMPTY
41004: LIST
41005: LIST
41006: PUSH
41007: LD_INT 0
41009: PUSH
41010: LD_INT 1
41012: PUSH
41013: EMPTY
41014: LIST
41015: LIST
41016: PUSH
41017: LD_INT 1
41019: NEG
41020: PUSH
41021: LD_INT 0
41023: PUSH
41024: EMPTY
41025: LIST
41026: LIST
41027: PUSH
41028: LD_INT 1
41030: NEG
41031: PUSH
41032: LD_INT 1
41034: NEG
41035: PUSH
41036: EMPTY
41037: LIST
41038: LIST
41039: PUSH
41040: LD_INT 2
41042: PUSH
41043: LD_INT 1
41045: PUSH
41046: EMPTY
41047: LIST
41048: LIST
41049: PUSH
41050: LD_INT 2
41052: NEG
41053: PUSH
41054: LD_INT 1
41056: NEG
41057: PUSH
41058: EMPTY
41059: LIST
41060: LIST
41061: PUSH
41062: EMPTY
41063: LIST
41064: LIST
41065: LIST
41066: LIST
41067: LIST
41068: LIST
41069: LIST
41070: LIST
41071: LIST
41072: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41073: LD_ADDR_VAR 0 36
41077: PUSH
41078: LD_INT 0
41080: PUSH
41081: LD_INT 0
41083: PUSH
41084: EMPTY
41085: LIST
41086: LIST
41087: PUSH
41088: LD_INT 0
41090: PUSH
41091: LD_INT 1
41093: NEG
41094: PUSH
41095: EMPTY
41096: LIST
41097: LIST
41098: PUSH
41099: LD_INT 1
41101: PUSH
41102: LD_INT 0
41104: PUSH
41105: EMPTY
41106: LIST
41107: LIST
41108: PUSH
41109: LD_INT 1
41111: PUSH
41112: LD_INT 1
41114: PUSH
41115: EMPTY
41116: LIST
41117: LIST
41118: PUSH
41119: LD_INT 0
41121: PUSH
41122: LD_INT 1
41124: PUSH
41125: EMPTY
41126: LIST
41127: LIST
41128: PUSH
41129: LD_INT 1
41131: NEG
41132: PUSH
41133: LD_INT 0
41135: PUSH
41136: EMPTY
41137: LIST
41138: LIST
41139: PUSH
41140: LD_INT 1
41142: NEG
41143: PUSH
41144: LD_INT 1
41146: NEG
41147: PUSH
41148: EMPTY
41149: LIST
41150: LIST
41151: PUSH
41152: LD_INT 1
41154: NEG
41155: PUSH
41156: LD_INT 2
41158: NEG
41159: PUSH
41160: EMPTY
41161: LIST
41162: LIST
41163: PUSH
41164: LD_INT 1
41166: PUSH
41167: LD_INT 2
41169: PUSH
41170: EMPTY
41171: LIST
41172: LIST
41173: PUSH
41174: EMPTY
41175: LIST
41176: LIST
41177: LIST
41178: LIST
41179: LIST
41180: LIST
41181: LIST
41182: LIST
41183: LIST
41184: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41185: LD_ADDR_VAR 0 37
41189: PUSH
41190: LD_INT 0
41192: PUSH
41193: LD_INT 0
41195: PUSH
41196: EMPTY
41197: LIST
41198: LIST
41199: PUSH
41200: LD_INT 0
41202: PUSH
41203: LD_INT 1
41205: NEG
41206: PUSH
41207: EMPTY
41208: LIST
41209: LIST
41210: PUSH
41211: LD_INT 1
41213: PUSH
41214: LD_INT 0
41216: PUSH
41217: EMPTY
41218: LIST
41219: LIST
41220: PUSH
41221: LD_INT 1
41223: PUSH
41224: LD_INT 1
41226: PUSH
41227: EMPTY
41228: LIST
41229: LIST
41230: PUSH
41231: LD_INT 0
41233: PUSH
41234: LD_INT 1
41236: PUSH
41237: EMPTY
41238: LIST
41239: LIST
41240: PUSH
41241: LD_INT 1
41243: NEG
41244: PUSH
41245: LD_INT 0
41247: PUSH
41248: EMPTY
41249: LIST
41250: LIST
41251: PUSH
41252: LD_INT 1
41254: NEG
41255: PUSH
41256: LD_INT 1
41258: NEG
41259: PUSH
41260: EMPTY
41261: LIST
41262: LIST
41263: PUSH
41264: LD_INT 1
41266: PUSH
41267: LD_INT 1
41269: NEG
41270: PUSH
41271: EMPTY
41272: LIST
41273: LIST
41274: PUSH
41275: LD_INT 1
41277: NEG
41278: PUSH
41279: LD_INT 1
41281: PUSH
41282: EMPTY
41283: LIST
41284: LIST
41285: PUSH
41286: EMPTY
41287: LIST
41288: LIST
41289: LIST
41290: LIST
41291: LIST
41292: LIST
41293: LIST
41294: LIST
41295: LIST
41296: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41297: LD_ADDR_VAR 0 38
41301: PUSH
41302: LD_INT 0
41304: PUSH
41305: LD_INT 0
41307: PUSH
41308: EMPTY
41309: LIST
41310: LIST
41311: PUSH
41312: LD_INT 0
41314: PUSH
41315: LD_INT 1
41317: NEG
41318: PUSH
41319: EMPTY
41320: LIST
41321: LIST
41322: PUSH
41323: LD_INT 1
41325: PUSH
41326: LD_INT 0
41328: PUSH
41329: EMPTY
41330: LIST
41331: LIST
41332: PUSH
41333: LD_INT 1
41335: PUSH
41336: LD_INT 1
41338: PUSH
41339: EMPTY
41340: LIST
41341: LIST
41342: PUSH
41343: LD_INT 0
41345: PUSH
41346: LD_INT 1
41348: PUSH
41349: EMPTY
41350: LIST
41351: LIST
41352: PUSH
41353: LD_INT 1
41355: NEG
41356: PUSH
41357: LD_INT 0
41359: PUSH
41360: EMPTY
41361: LIST
41362: LIST
41363: PUSH
41364: LD_INT 1
41366: NEG
41367: PUSH
41368: LD_INT 1
41370: NEG
41371: PUSH
41372: EMPTY
41373: LIST
41374: LIST
41375: PUSH
41376: LD_INT 2
41378: PUSH
41379: LD_INT 1
41381: PUSH
41382: EMPTY
41383: LIST
41384: LIST
41385: PUSH
41386: LD_INT 2
41388: NEG
41389: PUSH
41390: LD_INT 1
41392: NEG
41393: PUSH
41394: EMPTY
41395: LIST
41396: LIST
41397: PUSH
41398: EMPTY
41399: LIST
41400: LIST
41401: LIST
41402: LIST
41403: LIST
41404: LIST
41405: LIST
41406: LIST
41407: LIST
41408: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41409: LD_ADDR_VAR 0 39
41413: PUSH
41414: LD_INT 0
41416: PUSH
41417: LD_INT 0
41419: PUSH
41420: EMPTY
41421: LIST
41422: LIST
41423: PUSH
41424: LD_INT 0
41426: PUSH
41427: LD_INT 1
41429: NEG
41430: PUSH
41431: EMPTY
41432: LIST
41433: LIST
41434: PUSH
41435: LD_INT 1
41437: PUSH
41438: LD_INT 0
41440: PUSH
41441: EMPTY
41442: LIST
41443: LIST
41444: PUSH
41445: LD_INT 1
41447: PUSH
41448: LD_INT 1
41450: PUSH
41451: EMPTY
41452: LIST
41453: LIST
41454: PUSH
41455: LD_INT 0
41457: PUSH
41458: LD_INT 1
41460: PUSH
41461: EMPTY
41462: LIST
41463: LIST
41464: PUSH
41465: LD_INT 1
41467: NEG
41468: PUSH
41469: LD_INT 0
41471: PUSH
41472: EMPTY
41473: LIST
41474: LIST
41475: PUSH
41476: LD_INT 1
41478: NEG
41479: PUSH
41480: LD_INT 1
41482: NEG
41483: PUSH
41484: EMPTY
41485: LIST
41486: LIST
41487: PUSH
41488: LD_INT 1
41490: NEG
41491: PUSH
41492: LD_INT 2
41494: NEG
41495: PUSH
41496: EMPTY
41497: LIST
41498: LIST
41499: PUSH
41500: LD_INT 1
41502: PUSH
41503: LD_INT 2
41505: PUSH
41506: EMPTY
41507: LIST
41508: LIST
41509: PUSH
41510: EMPTY
41511: LIST
41512: LIST
41513: LIST
41514: LIST
41515: LIST
41516: LIST
41517: LIST
41518: LIST
41519: LIST
41520: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41521: LD_ADDR_VAR 0 40
41525: PUSH
41526: LD_INT 0
41528: PUSH
41529: LD_INT 0
41531: PUSH
41532: EMPTY
41533: LIST
41534: LIST
41535: PUSH
41536: LD_INT 0
41538: PUSH
41539: LD_INT 1
41541: NEG
41542: PUSH
41543: EMPTY
41544: LIST
41545: LIST
41546: PUSH
41547: LD_INT 1
41549: PUSH
41550: LD_INT 0
41552: PUSH
41553: EMPTY
41554: LIST
41555: LIST
41556: PUSH
41557: LD_INT 1
41559: PUSH
41560: LD_INT 1
41562: PUSH
41563: EMPTY
41564: LIST
41565: LIST
41566: PUSH
41567: LD_INT 0
41569: PUSH
41570: LD_INT 1
41572: PUSH
41573: EMPTY
41574: LIST
41575: LIST
41576: PUSH
41577: LD_INT 1
41579: NEG
41580: PUSH
41581: LD_INT 0
41583: PUSH
41584: EMPTY
41585: LIST
41586: LIST
41587: PUSH
41588: LD_INT 1
41590: NEG
41591: PUSH
41592: LD_INT 1
41594: NEG
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: PUSH
41600: LD_INT 1
41602: PUSH
41603: LD_INT 1
41605: NEG
41606: PUSH
41607: EMPTY
41608: LIST
41609: LIST
41610: PUSH
41611: LD_INT 1
41613: NEG
41614: PUSH
41615: LD_INT 1
41617: PUSH
41618: EMPTY
41619: LIST
41620: LIST
41621: PUSH
41622: EMPTY
41623: LIST
41624: LIST
41625: LIST
41626: LIST
41627: LIST
41628: LIST
41629: LIST
41630: LIST
41631: LIST
41632: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41633: LD_ADDR_VAR 0 41
41637: PUSH
41638: LD_INT 0
41640: PUSH
41641: LD_INT 0
41643: PUSH
41644: EMPTY
41645: LIST
41646: LIST
41647: PUSH
41648: LD_INT 0
41650: PUSH
41651: LD_INT 1
41653: NEG
41654: PUSH
41655: EMPTY
41656: LIST
41657: LIST
41658: PUSH
41659: LD_INT 1
41661: PUSH
41662: LD_INT 0
41664: PUSH
41665: EMPTY
41666: LIST
41667: LIST
41668: PUSH
41669: LD_INT 1
41671: PUSH
41672: LD_INT 1
41674: PUSH
41675: EMPTY
41676: LIST
41677: LIST
41678: PUSH
41679: LD_INT 0
41681: PUSH
41682: LD_INT 1
41684: PUSH
41685: EMPTY
41686: LIST
41687: LIST
41688: PUSH
41689: LD_INT 1
41691: NEG
41692: PUSH
41693: LD_INT 0
41695: PUSH
41696: EMPTY
41697: LIST
41698: LIST
41699: PUSH
41700: LD_INT 1
41702: NEG
41703: PUSH
41704: LD_INT 1
41706: NEG
41707: PUSH
41708: EMPTY
41709: LIST
41710: LIST
41711: PUSH
41712: LD_INT 1
41714: NEG
41715: PUSH
41716: LD_INT 2
41718: NEG
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PUSH
41724: LD_INT 1
41726: PUSH
41727: LD_INT 1
41729: NEG
41730: PUSH
41731: EMPTY
41732: LIST
41733: LIST
41734: PUSH
41735: LD_INT 2
41737: PUSH
41738: LD_INT 0
41740: PUSH
41741: EMPTY
41742: LIST
41743: LIST
41744: PUSH
41745: LD_INT 2
41747: PUSH
41748: LD_INT 1
41750: PUSH
41751: EMPTY
41752: LIST
41753: LIST
41754: PUSH
41755: LD_INT 2
41757: PUSH
41758: LD_INT 2
41760: PUSH
41761: EMPTY
41762: LIST
41763: LIST
41764: PUSH
41765: LD_INT 1
41767: PUSH
41768: LD_INT 2
41770: PUSH
41771: EMPTY
41772: LIST
41773: LIST
41774: PUSH
41775: LD_INT 1
41777: NEG
41778: PUSH
41779: LD_INT 1
41781: PUSH
41782: EMPTY
41783: LIST
41784: LIST
41785: PUSH
41786: LD_INT 2
41788: NEG
41789: PUSH
41790: LD_INT 0
41792: PUSH
41793: EMPTY
41794: LIST
41795: LIST
41796: PUSH
41797: LD_INT 2
41799: NEG
41800: PUSH
41801: LD_INT 1
41803: NEG
41804: PUSH
41805: EMPTY
41806: LIST
41807: LIST
41808: PUSH
41809: LD_INT 2
41811: NEG
41812: PUSH
41813: LD_INT 2
41815: NEG
41816: PUSH
41817: EMPTY
41818: LIST
41819: LIST
41820: PUSH
41821: LD_INT 2
41823: NEG
41824: PUSH
41825: LD_INT 3
41827: NEG
41828: PUSH
41829: EMPTY
41830: LIST
41831: LIST
41832: PUSH
41833: LD_INT 2
41835: PUSH
41836: LD_INT 1
41838: NEG
41839: PUSH
41840: EMPTY
41841: LIST
41842: LIST
41843: PUSH
41844: LD_INT 3
41846: PUSH
41847: LD_INT 0
41849: PUSH
41850: EMPTY
41851: LIST
41852: LIST
41853: PUSH
41854: LD_INT 3
41856: PUSH
41857: LD_INT 1
41859: PUSH
41860: EMPTY
41861: LIST
41862: LIST
41863: PUSH
41864: LD_INT 3
41866: PUSH
41867: LD_INT 2
41869: PUSH
41870: EMPTY
41871: LIST
41872: LIST
41873: PUSH
41874: LD_INT 3
41876: PUSH
41877: LD_INT 3
41879: PUSH
41880: EMPTY
41881: LIST
41882: LIST
41883: PUSH
41884: LD_INT 2
41886: PUSH
41887: LD_INT 3
41889: PUSH
41890: EMPTY
41891: LIST
41892: LIST
41893: PUSH
41894: LD_INT 2
41896: NEG
41897: PUSH
41898: LD_INT 1
41900: PUSH
41901: EMPTY
41902: LIST
41903: LIST
41904: PUSH
41905: LD_INT 3
41907: NEG
41908: PUSH
41909: LD_INT 0
41911: PUSH
41912: EMPTY
41913: LIST
41914: LIST
41915: PUSH
41916: LD_INT 3
41918: NEG
41919: PUSH
41920: LD_INT 1
41922: NEG
41923: PUSH
41924: EMPTY
41925: LIST
41926: LIST
41927: PUSH
41928: LD_INT 3
41930: NEG
41931: PUSH
41932: LD_INT 2
41934: NEG
41935: PUSH
41936: EMPTY
41937: LIST
41938: LIST
41939: PUSH
41940: LD_INT 3
41942: NEG
41943: PUSH
41944: LD_INT 3
41946: NEG
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: PUSH
41952: EMPTY
41953: LIST
41954: LIST
41955: LIST
41956: LIST
41957: LIST
41958: LIST
41959: LIST
41960: LIST
41961: LIST
41962: LIST
41963: LIST
41964: LIST
41965: LIST
41966: LIST
41967: LIST
41968: LIST
41969: LIST
41970: LIST
41971: LIST
41972: LIST
41973: LIST
41974: LIST
41975: LIST
41976: LIST
41977: LIST
41978: LIST
41979: LIST
41980: LIST
41981: LIST
41982: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41983: LD_ADDR_VAR 0 42
41987: PUSH
41988: LD_INT 0
41990: PUSH
41991: LD_INT 0
41993: PUSH
41994: EMPTY
41995: LIST
41996: LIST
41997: PUSH
41998: LD_INT 0
42000: PUSH
42001: LD_INT 1
42003: NEG
42004: PUSH
42005: EMPTY
42006: LIST
42007: LIST
42008: PUSH
42009: LD_INT 1
42011: PUSH
42012: LD_INT 0
42014: PUSH
42015: EMPTY
42016: LIST
42017: LIST
42018: PUSH
42019: LD_INT 1
42021: PUSH
42022: LD_INT 1
42024: PUSH
42025: EMPTY
42026: LIST
42027: LIST
42028: PUSH
42029: LD_INT 0
42031: PUSH
42032: LD_INT 1
42034: PUSH
42035: EMPTY
42036: LIST
42037: LIST
42038: PUSH
42039: LD_INT 1
42041: NEG
42042: PUSH
42043: LD_INT 0
42045: PUSH
42046: EMPTY
42047: LIST
42048: LIST
42049: PUSH
42050: LD_INT 1
42052: NEG
42053: PUSH
42054: LD_INT 1
42056: NEG
42057: PUSH
42058: EMPTY
42059: LIST
42060: LIST
42061: PUSH
42062: LD_INT 1
42064: NEG
42065: PUSH
42066: LD_INT 2
42068: NEG
42069: PUSH
42070: EMPTY
42071: LIST
42072: LIST
42073: PUSH
42074: LD_INT 0
42076: PUSH
42077: LD_INT 2
42079: NEG
42080: PUSH
42081: EMPTY
42082: LIST
42083: LIST
42084: PUSH
42085: LD_INT 1
42087: PUSH
42088: LD_INT 1
42090: NEG
42091: PUSH
42092: EMPTY
42093: LIST
42094: LIST
42095: PUSH
42096: LD_INT 2
42098: PUSH
42099: LD_INT 1
42101: PUSH
42102: EMPTY
42103: LIST
42104: LIST
42105: PUSH
42106: LD_INT 2
42108: PUSH
42109: LD_INT 2
42111: PUSH
42112: EMPTY
42113: LIST
42114: LIST
42115: PUSH
42116: LD_INT 1
42118: PUSH
42119: LD_INT 2
42121: PUSH
42122: EMPTY
42123: LIST
42124: LIST
42125: PUSH
42126: LD_INT 0
42128: PUSH
42129: LD_INT 2
42131: PUSH
42132: EMPTY
42133: LIST
42134: LIST
42135: PUSH
42136: LD_INT 1
42138: NEG
42139: PUSH
42140: LD_INT 1
42142: PUSH
42143: EMPTY
42144: LIST
42145: LIST
42146: PUSH
42147: LD_INT 2
42149: NEG
42150: PUSH
42151: LD_INT 1
42153: NEG
42154: PUSH
42155: EMPTY
42156: LIST
42157: LIST
42158: PUSH
42159: LD_INT 2
42161: NEG
42162: PUSH
42163: LD_INT 2
42165: NEG
42166: PUSH
42167: EMPTY
42168: LIST
42169: LIST
42170: PUSH
42171: LD_INT 2
42173: NEG
42174: PUSH
42175: LD_INT 3
42177: NEG
42178: PUSH
42179: EMPTY
42180: LIST
42181: LIST
42182: PUSH
42183: LD_INT 1
42185: NEG
42186: PUSH
42187: LD_INT 3
42189: NEG
42190: PUSH
42191: EMPTY
42192: LIST
42193: LIST
42194: PUSH
42195: LD_INT 0
42197: PUSH
42198: LD_INT 3
42200: NEG
42201: PUSH
42202: EMPTY
42203: LIST
42204: LIST
42205: PUSH
42206: LD_INT 1
42208: PUSH
42209: LD_INT 2
42211: NEG
42212: PUSH
42213: EMPTY
42214: LIST
42215: LIST
42216: PUSH
42217: LD_INT 3
42219: PUSH
42220: LD_INT 2
42222: PUSH
42223: EMPTY
42224: LIST
42225: LIST
42226: PUSH
42227: LD_INT 3
42229: PUSH
42230: LD_INT 3
42232: PUSH
42233: EMPTY
42234: LIST
42235: LIST
42236: PUSH
42237: LD_INT 2
42239: PUSH
42240: LD_INT 3
42242: PUSH
42243: EMPTY
42244: LIST
42245: LIST
42246: PUSH
42247: LD_INT 1
42249: PUSH
42250: LD_INT 3
42252: PUSH
42253: EMPTY
42254: LIST
42255: LIST
42256: PUSH
42257: LD_INT 0
42259: PUSH
42260: LD_INT 3
42262: PUSH
42263: EMPTY
42264: LIST
42265: LIST
42266: PUSH
42267: LD_INT 1
42269: NEG
42270: PUSH
42271: LD_INT 2
42273: PUSH
42274: EMPTY
42275: LIST
42276: LIST
42277: PUSH
42278: LD_INT 3
42280: NEG
42281: PUSH
42282: LD_INT 2
42284: NEG
42285: PUSH
42286: EMPTY
42287: LIST
42288: LIST
42289: PUSH
42290: LD_INT 3
42292: NEG
42293: PUSH
42294: LD_INT 3
42296: NEG
42297: PUSH
42298: EMPTY
42299: LIST
42300: LIST
42301: PUSH
42302: EMPTY
42303: LIST
42304: LIST
42305: LIST
42306: LIST
42307: LIST
42308: LIST
42309: LIST
42310: LIST
42311: LIST
42312: LIST
42313: LIST
42314: LIST
42315: LIST
42316: LIST
42317: LIST
42318: LIST
42319: LIST
42320: LIST
42321: LIST
42322: LIST
42323: LIST
42324: LIST
42325: LIST
42326: LIST
42327: LIST
42328: LIST
42329: LIST
42330: LIST
42331: LIST
42332: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42333: LD_ADDR_VAR 0 43
42337: PUSH
42338: LD_INT 0
42340: PUSH
42341: LD_INT 0
42343: PUSH
42344: EMPTY
42345: LIST
42346: LIST
42347: PUSH
42348: LD_INT 0
42350: PUSH
42351: LD_INT 1
42353: NEG
42354: PUSH
42355: EMPTY
42356: LIST
42357: LIST
42358: PUSH
42359: LD_INT 1
42361: PUSH
42362: LD_INT 0
42364: PUSH
42365: EMPTY
42366: LIST
42367: LIST
42368: PUSH
42369: LD_INT 1
42371: PUSH
42372: LD_INT 1
42374: PUSH
42375: EMPTY
42376: LIST
42377: LIST
42378: PUSH
42379: LD_INT 0
42381: PUSH
42382: LD_INT 1
42384: PUSH
42385: EMPTY
42386: LIST
42387: LIST
42388: PUSH
42389: LD_INT 1
42391: NEG
42392: PUSH
42393: LD_INT 0
42395: PUSH
42396: EMPTY
42397: LIST
42398: LIST
42399: PUSH
42400: LD_INT 1
42402: NEG
42403: PUSH
42404: LD_INT 1
42406: NEG
42407: PUSH
42408: EMPTY
42409: LIST
42410: LIST
42411: PUSH
42412: LD_INT 1
42414: NEG
42415: PUSH
42416: LD_INT 2
42418: NEG
42419: PUSH
42420: EMPTY
42421: LIST
42422: LIST
42423: PUSH
42424: LD_INT 0
42426: PUSH
42427: LD_INT 2
42429: NEG
42430: PUSH
42431: EMPTY
42432: LIST
42433: LIST
42434: PUSH
42435: LD_INT 1
42437: PUSH
42438: LD_INT 1
42440: NEG
42441: PUSH
42442: EMPTY
42443: LIST
42444: LIST
42445: PUSH
42446: LD_INT 2
42448: PUSH
42449: LD_INT 0
42451: PUSH
42452: EMPTY
42453: LIST
42454: LIST
42455: PUSH
42456: LD_INT 2
42458: PUSH
42459: LD_INT 1
42461: PUSH
42462: EMPTY
42463: LIST
42464: LIST
42465: PUSH
42466: LD_INT 1
42468: PUSH
42469: LD_INT 2
42471: PUSH
42472: EMPTY
42473: LIST
42474: LIST
42475: PUSH
42476: LD_INT 0
42478: PUSH
42479: LD_INT 2
42481: PUSH
42482: EMPTY
42483: LIST
42484: LIST
42485: PUSH
42486: LD_INT 1
42488: NEG
42489: PUSH
42490: LD_INT 1
42492: PUSH
42493: EMPTY
42494: LIST
42495: LIST
42496: PUSH
42497: LD_INT 2
42499: NEG
42500: PUSH
42501: LD_INT 0
42503: PUSH
42504: EMPTY
42505: LIST
42506: LIST
42507: PUSH
42508: LD_INT 2
42510: NEG
42511: PUSH
42512: LD_INT 1
42514: NEG
42515: PUSH
42516: EMPTY
42517: LIST
42518: LIST
42519: PUSH
42520: LD_INT 1
42522: NEG
42523: PUSH
42524: LD_INT 3
42526: NEG
42527: PUSH
42528: EMPTY
42529: LIST
42530: LIST
42531: PUSH
42532: LD_INT 0
42534: PUSH
42535: LD_INT 3
42537: NEG
42538: PUSH
42539: EMPTY
42540: LIST
42541: LIST
42542: PUSH
42543: LD_INT 1
42545: PUSH
42546: LD_INT 2
42548: NEG
42549: PUSH
42550: EMPTY
42551: LIST
42552: LIST
42553: PUSH
42554: LD_INT 2
42556: PUSH
42557: LD_INT 1
42559: NEG
42560: PUSH
42561: EMPTY
42562: LIST
42563: LIST
42564: PUSH
42565: LD_INT 3
42567: PUSH
42568: LD_INT 0
42570: PUSH
42571: EMPTY
42572: LIST
42573: LIST
42574: PUSH
42575: LD_INT 3
42577: PUSH
42578: LD_INT 1
42580: PUSH
42581: EMPTY
42582: LIST
42583: LIST
42584: PUSH
42585: LD_INT 1
42587: PUSH
42588: LD_INT 3
42590: PUSH
42591: EMPTY
42592: LIST
42593: LIST
42594: PUSH
42595: LD_INT 0
42597: PUSH
42598: LD_INT 3
42600: PUSH
42601: EMPTY
42602: LIST
42603: LIST
42604: PUSH
42605: LD_INT 1
42607: NEG
42608: PUSH
42609: LD_INT 2
42611: PUSH
42612: EMPTY
42613: LIST
42614: LIST
42615: PUSH
42616: LD_INT 2
42618: NEG
42619: PUSH
42620: LD_INT 1
42622: PUSH
42623: EMPTY
42624: LIST
42625: LIST
42626: PUSH
42627: LD_INT 3
42629: NEG
42630: PUSH
42631: LD_INT 0
42633: PUSH
42634: EMPTY
42635: LIST
42636: LIST
42637: PUSH
42638: LD_INT 3
42640: NEG
42641: PUSH
42642: LD_INT 1
42644: NEG
42645: PUSH
42646: EMPTY
42647: LIST
42648: LIST
42649: PUSH
42650: EMPTY
42651: LIST
42652: LIST
42653: LIST
42654: LIST
42655: LIST
42656: LIST
42657: LIST
42658: LIST
42659: LIST
42660: LIST
42661: LIST
42662: LIST
42663: LIST
42664: LIST
42665: LIST
42666: LIST
42667: LIST
42668: LIST
42669: LIST
42670: LIST
42671: LIST
42672: LIST
42673: LIST
42674: LIST
42675: LIST
42676: LIST
42677: LIST
42678: LIST
42679: LIST
42680: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42681: LD_ADDR_VAR 0 44
42685: PUSH
42686: LD_INT 0
42688: PUSH
42689: LD_INT 0
42691: PUSH
42692: EMPTY
42693: LIST
42694: LIST
42695: PUSH
42696: LD_INT 0
42698: PUSH
42699: LD_INT 1
42701: NEG
42702: PUSH
42703: EMPTY
42704: LIST
42705: LIST
42706: PUSH
42707: LD_INT 1
42709: PUSH
42710: LD_INT 0
42712: PUSH
42713: EMPTY
42714: LIST
42715: LIST
42716: PUSH
42717: LD_INT 1
42719: PUSH
42720: LD_INT 1
42722: PUSH
42723: EMPTY
42724: LIST
42725: LIST
42726: PUSH
42727: LD_INT 0
42729: PUSH
42730: LD_INT 1
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: PUSH
42737: LD_INT 1
42739: NEG
42740: PUSH
42741: LD_INT 0
42743: PUSH
42744: EMPTY
42745: LIST
42746: LIST
42747: PUSH
42748: LD_INT 1
42750: NEG
42751: PUSH
42752: LD_INT 1
42754: NEG
42755: PUSH
42756: EMPTY
42757: LIST
42758: LIST
42759: PUSH
42760: LD_INT 1
42762: NEG
42763: PUSH
42764: LD_INT 2
42766: NEG
42767: PUSH
42768: EMPTY
42769: LIST
42770: LIST
42771: PUSH
42772: LD_INT 1
42774: PUSH
42775: LD_INT 1
42777: NEG
42778: PUSH
42779: EMPTY
42780: LIST
42781: LIST
42782: PUSH
42783: LD_INT 2
42785: PUSH
42786: LD_INT 0
42788: PUSH
42789: EMPTY
42790: LIST
42791: LIST
42792: PUSH
42793: LD_INT 2
42795: PUSH
42796: LD_INT 1
42798: PUSH
42799: EMPTY
42800: LIST
42801: LIST
42802: PUSH
42803: LD_INT 2
42805: PUSH
42806: LD_INT 2
42808: PUSH
42809: EMPTY
42810: LIST
42811: LIST
42812: PUSH
42813: LD_INT 1
42815: PUSH
42816: LD_INT 2
42818: PUSH
42819: EMPTY
42820: LIST
42821: LIST
42822: PUSH
42823: LD_INT 1
42825: NEG
42826: PUSH
42827: LD_INT 1
42829: PUSH
42830: EMPTY
42831: LIST
42832: LIST
42833: PUSH
42834: LD_INT 2
42836: NEG
42837: PUSH
42838: LD_INT 0
42840: PUSH
42841: EMPTY
42842: LIST
42843: LIST
42844: PUSH
42845: LD_INT 2
42847: NEG
42848: PUSH
42849: LD_INT 1
42851: NEG
42852: PUSH
42853: EMPTY
42854: LIST
42855: LIST
42856: PUSH
42857: LD_INT 2
42859: NEG
42860: PUSH
42861: LD_INT 2
42863: NEG
42864: PUSH
42865: EMPTY
42866: LIST
42867: LIST
42868: PUSH
42869: LD_INT 2
42871: NEG
42872: PUSH
42873: LD_INT 3
42875: NEG
42876: PUSH
42877: EMPTY
42878: LIST
42879: LIST
42880: PUSH
42881: LD_INT 2
42883: PUSH
42884: LD_INT 1
42886: NEG
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: PUSH
42892: LD_INT 3
42894: PUSH
42895: LD_INT 0
42897: PUSH
42898: EMPTY
42899: LIST
42900: LIST
42901: PUSH
42902: LD_INT 3
42904: PUSH
42905: LD_INT 1
42907: PUSH
42908: EMPTY
42909: LIST
42910: LIST
42911: PUSH
42912: LD_INT 3
42914: PUSH
42915: LD_INT 2
42917: PUSH
42918: EMPTY
42919: LIST
42920: LIST
42921: PUSH
42922: LD_INT 3
42924: PUSH
42925: LD_INT 3
42927: PUSH
42928: EMPTY
42929: LIST
42930: LIST
42931: PUSH
42932: LD_INT 2
42934: PUSH
42935: LD_INT 3
42937: PUSH
42938: EMPTY
42939: LIST
42940: LIST
42941: PUSH
42942: LD_INT 2
42944: NEG
42945: PUSH
42946: LD_INT 1
42948: PUSH
42949: EMPTY
42950: LIST
42951: LIST
42952: PUSH
42953: LD_INT 3
42955: NEG
42956: PUSH
42957: LD_INT 0
42959: PUSH
42960: EMPTY
42961: LIST
42962: LIST
42963: PUSH
42964: LD_INT 3
42966: NEG
42967: PUSH
42968: LD_INT 1
42970: NEG
42971: PUSH
42972: EMPTY
42973: LIST
42974: LIST
42975: PUSH
42976: LD_INT 3
42978: NEG
42979: PUSH
42980: LD_INT 2
42982: NEG
42983: PUSH
42984: EMPTY
42985: LIST
42986: LIST
42987: PUSH
42988: LD_INT 3
42990: NEG
42991: PUSH
42992: LD_INT 3
42994: NEG
42995: PUSH
42996: EMPTY
42997: LIST
42998: LIST
42999: PUSH
43000: EMPTY
43001: LIST
43002: LIST
43003: LIST
43004: LIST
43005: LIST
43006: LIST
43007: LIST
43008: LIST
43009: LIST
43010: LIST
43011: LIST
43012: LIST
43013: LIST
43014: LIST
43015: LIST
43016: LIST
43017: LIST
43018: LIST
43019: LIST
43020: LIST
43021: LIST
43022: LIST
43023: LIST
43024: LIST
43025: LIST
43026: LIST
43027: LIST
43028: LIST
43029: LIST
43030: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43031: LD_ADDR_VAR 0 45
43035: PUSH
43036: LD_INT 0
43038: PUSH
43039: LD_INT 0
43041: PUSH
43042: EMPTY
43043: LIST
43044: LIST
43045: PUSH
43046: LD_INT 0
43048: PUSH
43049: LD_INT 1
43051: NEG
43052: PUSH
43053: EMPTY
43054: LIST
43055: LIST
43056: PUSH
43057: LD_INT 1
43059: PUSH
43060: LD_INT 0
43062: PUSH
43063: EMPTY
43064: LIST
43065: LIST
43066: PUSH
43067: LD_INT 1
43069: PUSH
43070: LD_INT 1
43072: PUSH
43073: EMPTY
43074: LIST
43075: LIST
43076: PUSH
43077: LD_INT 0
43079: PUSH
43080: LD_INT 1
43082: PUSH
43083: EMPTY
43084: LIST
43085: LIST
43086: PUSH
43087: LD_INT 1
43089: NEG
43090: PUSH
43091: LD_INT 0
43093: PUSH
43094: EMPTY
43095: LIST
43096: LIST
43097: PUSH
43098: LD_INT 1
43100: NEG
43101: PUSH
43102: LD_INT 1
43104: NEG
43105: PUSH
43106: EMPTY
43107: LIST
43108: LIST
43109: PUSH
43110: LD_INT 1
43112: NEG
43113: PUSH
43114: LD_INT 2
43116: NEG
43117: PUSH
43118: EMPTY
43119: LIST
43120: LIST
43121: PUSH
43122: LD_INT 0
43124: PUSH
43125: LD_INT 2
43127: NEG
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: PUSH
43133: LD_INT 1
43135: PUSH
43136: LD_INT 1
43138: NEG
43139: PUSH
43140: EMPTY
43141: LIST
43142: LIST
43143: PUSH
43144: LD_INT 2
43146: PUSH
43147: LD_INT 1
43149: PUSH
43150: EMPTY
43151: LIST
43152: LIST
43153: PUSH
43154: LD_INT 2
43156: PUSH
43157: LD_INT 2
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: PUSH
43164: LD_INT 1
43166: PUSH
43167: LD_INT 2
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: PUSH
43174: LD_INT 0
43176: PUSH
43177: LD_INT 2
43179: PUSH
43180: EMPTY
43181: LIST
43182: LIST
43183: PUSH
43184: LD_INT 1
43186: NEG
43187: PUSH
43188: LD_INT 1
43190: PUSH
43191: EMPTY
43192: LIST
43193: LIST
43194: PUSH
43195: LD_INT 2
43197: NEG
43198: PUSH
43199: LD_INT 1
43201: NEG
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: PUSH
43207: LD_INT 2
43209: NEG
43210: PUSH
43211: LD_INT 2
43213: NEG
43214: PUSH
43215: EMPTY
43216: LIST
43217: LIST
43218: PUSH
43219: LD_INT 2
43221: NEG
43222: PUSH
43223: LD_INT 3
43225: NEG
43226: PUSH
43227: EMPTY
43228: LIST
43229: LIST
43230: PUSH
43231: LD_INT 1
43233: NEG
43234: PUSH
43235: LD_INT 3
43237: NEG
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: PUSH
43243: LD_INT 0
43245: PUSH
43246: LD_INT 3
43248: NEG
43249: PUSH
43250: EMPTY
43251: LIST
43252: LIST
43253: PUSH
43254: LD_INT 1
43256: PUSH
43257: LD_INT 2
43259: NEG
43260: PUSH
43261: EMPTY
43262: LIST
43263: LIST
43264: PUSH
43265: LD_INT 3
43267: PUSH
43268: LD_INT 2
43270: PUSH
43271: EMPTY
43272: LIST
43273: LIST
43274: PUSH
43275: LD_INT 3
43277: PUSH
43278: LD_INT 3
43280: PUSH
43281: EMPTY
43282: LIST
43283: LIST
43284: PUSH
43285: LD_INT 2
43287: PUSH
43288: LD_INT 3
43290: PUSH
43291: EMPTY
43292: LIST
43293: LIST
43294: PUSH
43295: LD_INT 1
43297: PUSH
43298: LD_INT 3
43300: PUSH
43301: EMPTY
43302: LIST
43303: LIST
43304: PUSH
43305: LD_INT 0
43307: PUSH
43308: LD_INT 3
43310: PUSH
43311: EMPTY
43312: LIST
43313: LIST
43314: PUSH
43315: LD_INT 1
43317: NEG
43318: PUSH
43319: LD_INT 2
43321: PUSH
43322: EMPTY
43323: LIST
43324: LIST
43325: PUSH
43326: LD_INT 3
43328: NEG
43329: PUSH
43330: LD_INT 2
43332: NEG
43333: PUSH
43334: EMPTY
43335: LIST
43336: LIST
43337: PUSH
43338: LD_INT 3
43340: NEG
43341: PUSH
43342: LD_INT 3
43344: NEG
43345: PUSH
43346: EMPTY
43347: LIST
43348: LIST
43349: PUSH
43350: EMPTY
43351: LIST
43352: LIST
43353: LIST
43354: LIST
43355: LIST
43356: LIST
43357: LIST
43358: LIST
43359: LIST
43360: LIST
43361: LIST
43362: LIST
43363: LIST
43364: LIST
43365: LIST
43366: LIST
43367: LIST
43368: LIST
43369: LIST
43370: LIST
43371: LIST
43372: LIST
43373: LIST
43374: LIST
43375: LIST
43376: LIST
43377: LIST
43378: LIST
43379: LIST
43380: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43381: LD_ADDR_VAR 0 46
43385: PUSH
43386: LD_INT 0
43388: PUSH
43389: LD_INT 0
43391: PUSH
43392: EMPTY
43393: LIST
43394: LIST
43395: PUSH
43396: LD_INT 0
43398: PUSH
43399: LD_INT 1
43401: NEG
43402: PUSH
43403: EMPTY
43404: LIST
43405: LIST
43406: PUSH
43407: LD_INT 1
43409: PUSH
43410: LD_INT 0
43412: PUSH
43413: EMPTY
43414: LIST
43415: LIST
43416: PUSH
43417: LD_INT 1
43419: PUSH
43420: LD_INT 1
43422: PUSH
43423: EMPTY
43424: LIST
43425: LIST
43426: PUSH
43427: LD_INT 0
43429: PUSH
43430: LD_INT 1
43432: PUSH
43433: EMPTY
43434: LIST
43435: LIST
43436: PUSH
43437: LD_INT 1
43439: NEG
43440: PUSH
43441: LD_INT 0
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: PUSH
43448: LD_INT 1
43450: NEG
43451: PUSH
43452: LD_INT 1
43454: NEG
43455: PUSH
43456: EMPTY
43457: LIST
43458: LIST
43459: PUSH
43460: LD_INT 1
43462: NEG
43463: PUSH
43464: LD_INT 2
43466: NEG
43467: PUSH
43468: EMPTY
43469: LIST
43470: LIST
43471: PUSH
43472: LD_INT 0
43474: PUSH
43475: LD_INT 2
43477: NEG
43478: PUSH
43479: EMPTY
43480: LIST
43481: LIST
43482: PUSH
43483: LD_INT 1
43485: PUSH
43486: LD_INT 1
43488: NEG
43489: PUSH
43490: EMPTY
43491: LIST
43492: LIST
43493: PUSH
43494: LD_INT 2
43496: PUSH
43497: LD_INT 0
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: PUSH
43504: LD_INT 2
43506: PUSH
43507: LD_INT 1
43509: PUSH
43510: EMPTY
43511: LIST
43512: LIST
43513: PUSH
43514: LD_INT 1
43516: PUSH
43517: LD_INT 2
43519: PUSH
43520: EMPTY
43521: LIST
43522: LIST
43523: PUSH
43524: LD_INT 0
43526: PUSH
43527: LD_INT 2
43529: PUSH
43530: EMPTY
43531: LIST
43532: LIST
43533: PUSH
43534: LD_INT 1
43536: NEG
43537: PUSH
43538: LD_INT 1
43540: PUSH
43541: EMPTY
43542: LIST
43543: LIST
43544: PUSH
43545: LD_INT 2
43547: NEG
43548: PUSH
43549: LD_INT 0
43551: PUSH
43552: EMPTY
43553: LIST
43554: LIST
43555: PUSH
43556: LD_INT 2
43558: NEG
43559: PUSH
43560: LD_INT 1
43562: NEG
43563: PUSH
43564: EMPTY
43565: LIST
43566: LIST
43567: PUSH
43568: LD_INT 1
43570: NEG
43571: PUSH
43572: LD_INT 3
43574: NEG
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: PUSH
43580: LD_INT 0
43582: PUSH
43583: LD_INT 3
43585: NEG
43586: PUSH
43587: EMPTY
43588: LIST
43589: LIST
43590: PUSH
43591: LD_INT 1
43593: PUSH
43594: LD_INT 2
43596: NEG
43597: PUSH
43598: EMPTY
43599: LIST
43600: LIST
43601: PUSH
43602: LD_INT 2
43604: PUSH
43605: LD_INT 1
43607: NEG
43608: PUSH
43609: EMPTY
43610: LIST
43611: LIST
43612: PUSH
43613: LD_INT 3
43615: PUSH
43616: LD_INT 0
43618: PUSH
43619: EMPTY
43620: LIST
43621: LIST
43622: PUSH
43623: LD_INT 3
43625: PUSH
43626: LD_INT 1
43628: PUSH
43629: EMPTY
43630: LIST
43631: LIST
43632: PUSH
43633: LD_INT 1
43635: PUSH
43636: LD_INT 3
43638: PUSH
43639: EMPTY
43640: LIST
43641: LIST
43642: PUSH
43643: LD_INT 0
43645: PUSH
43646: LD_INT 3
43648: PUSH
43649: EMPTY
43650: LIST
43651: LIST
43652: PUSH
43653: LD_INT 1
43655: NEG
43656: PUSH
43657: LD_INT 2
43659: PUSH
43660: EMPTY
43661: LIST
43662: LIST
43663: PUSH
43664: LD_INT 2
43666: NEG
43667: PUSH
43668: LD_INT 1
43670: PUSH
43671: EMPTY
43672: LIST
43673: LIST
43674: PUSH
43675: LD_INT 3
43677: NEG
43678: PUSH
43679: LD_INT 0
43681: PUSH
43682: EMPTY
43683: LIST
43684: LIST
43685: PUSH
43686: LD_INT 3
43688: NEG
43689: PUSH
43690: LD_INT 1
43692: NEG
43693: PUSH
43694: EMPTY
43695: LIST
43696: LIST
43697: PUSH
43698: EMPTY
43699: LIST
43700: LIST
43701: LIST
43702: LIST
43703: LIST
43704: LIST
43705: LIST
43706: LIST
43707: LIST
43708: LIST
43709: LIST
43710: LIST
43711: LIST
43712: LIST
43713: LIST
43714: LIST
43715: LIST
43716: LIST
43717: LIST
43718: LIST
43719: LIST
43720: LIST
43721: LIST
43722: LIST
43723: LIST
43724: LIST
43725: LIST
43726: LIST
43727: LIST
43728: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43729: LD_ADDR_VAR 0 47
43733: PUSH
43734: LD_INT 0
43736: PUSH
43737: LD_INT 0
43739: PUSH
43740: EMPTY
43741: LIST
43742: LIST
43743: PUSH
43744: LD_INT 0
43746: PUSH
43747: LD_INT 1
43749: NEG
43750: PUSH
43751: EMPTY
43752: LIST
43753: LIST
43754: PUSH
43755: LD_INT 1
43757: PUSH
43758: LD_INT 0
43760: PUSH
43761: EMPTY
43762: LIST
43763: LIST
43764: PUSH
43765: LD_INT 1
43767: PUSH
43768: LD_INT 1
43770: PUSH
43771: EMPTY
43772: LIST
43773: LIST
43774: PUSH
43775: LD_INT 0
43777: PUSH
43778: LD_INT 1
43780: PUSH
43781: EMPTY
43782: LIST
43783: LIST
43784: PUSH
43785: LD_INT 1
43787: NEG
43788: PUSH
43789: LD_INT 0
43791: PUSH
43792: EMPTY
43793: LIST
43794: LIST
43795: PUSH
43796: LD_INT 1
43798: NEG
43799: PUSH
43800: LD_INT 1
43802: NEG
43803: PUSH
43804: EMPTY
43805: LIST
43806: LIST
43807: PUSH
43808: LD_INT 1
43810: NEG
43811: PUSH
43812: LD_INT 2
43814: NEG
43815: PUSH
43816: EMPTY
43817: LIST
43818: LIST
43819: PUSH
43820: LD_INT 0
43822: PUSH
43823: LD_INT 2
43825: NEG
43826: PUSH
43827: EMPTY
43828: LIST
43829: LIST
43830: PUSH
43831: LD_INT 1
43833: PUSH
43834: LD_INT 1
43836: NEG
43837: PUSH
43838: EMPTY
43839: LIST
43840: LIST
43841: PUSH
43842: LD_INT 2
43844: NEG
43845: PUSH
43846: LD_INT 1
43848: NEG
43849: PUSH
43850: EMPTY
43851: LIST
43852: LIST
43853: PUSH
43854: LD_INT 2
43856: NEG
43857: PUSH
43858: LD_INT 2
43860: NEG
43861: PUSH
43862: EMPTY
43863: LIST
43864: LIST
43865: PUSH
43866: EMPTY
43867: LIST
43868: LIST
43869: LIST
43870: LIST
43871: LIST
43872: LIST
43873: LIST
43874: LIST
43875: LIST
43876: LIST
43877: LIST
43878: LIST
43879: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
43880: LD_ADDR_VAR 0 48
43884: PUSH
43885: LD_INT 0
43887: PUSH
43888: LD_INT 0
43890: PUSH
43891: EMPTY
43892: LIST
43893: LIST
43894: PUSH
43895: LD_INT 0
43897: PUSH
43898: LD_INT 1
43900: NEG
43901: PUSH
43902: EMPTY
43903: LIST
43904: LIST
43905: PUSH
43906: LD_INT 1
43908: PUSH
43909: LD_INT 0
43911: PUSH
43912: EMPTY
43913: LIST
43914: LIST
43915: PUSH
43916: LD_INT 1
43918: PUSH
43919: LD_INT 1
43921: PUSH
43922: EMPTY
43923: LIST
43924: LIST
43925: PUSH
43926: LD_INT 0
43928: PUSH
43929: LD_INT 1
43931: PUSH
43932: EMPTY
43933: LIST
43934: LIST
43935: PUSH
43936: LD_INT 1
43938: NEG
43939: PUSH
43940: LD_INT 0
43942: PUSH
43943: EMPTY
43944: LIST
43945: LIST
43946: PUSH
43947: LD_INT 1
43949: NEG
43950: PUSH
43951: LD_INT 1
43953: NEG
43954: PUSH
43955: EMPTY
43956: LIST
43957: LIST
43958: PUSH
43959: LD_INT 1
43961: NEG
43962: PUSH
43963: LD_INT 2
43965: NEG
43966: PUSH
43967: EMPTY
43968: LIST
43969: LIST
43970: PUSH
43971: LD_INT 0
43973: PUSH
43974: LD_INT 2
43976: NEG
43977: PUSH
43978: EMPTY
43979: LIST
43980: LIST
43981: PUSH
43982: LD_INT 1
43984: PUSH
43985: LD_INT 1
43987: NEG
43988: PUSH
43989: EMPTY
43990: LIST
43991: LIST
43992: PUSH
43993: LD_INT 2
43995: PUSH
43996: LD_INT 0
43998: PUSH
43999: EMPTY
44000: LIST
44001: LIST
44002: PUSH
44003: LD_INT 2
44005: PUSH
44006: LD_INT 1
44008: PUSH
44009: EMPTY
44010: LIST
44011: LIST
44012: PUSH
44013: EMPTY
44014: LIST
44015: LIST
44016: LIST
44017: LIST
44018: LIST
44019: LIST
44020: LIST
44021: LIST
44022: LIST
44023: LIST
44024: LIST
44025: LIST
44026: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44027: LD_ADDR_VAR 0 49
44031: PUSH
44032: LD_INT 0
44034: PUSH
44035: LD_INT 0
44037: PUSH
44038: EMPTY
44039: LIST
44040: LIST
44041: PUSH
44042: LD_INT 0
44044: PUSH
44045: LD_INT 1
44047: NEG
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: PUSH
44053: LD_INT 1
44055: PUSH
44056: LD_INT 0
44058: PUSH
44059: EMPTY
44060: LIST
44061: LIST
44062: PUSH
44063: LD_INT 1
44065: PUSH
44066: LD_INT 1
44068: PUSH
44069: EMPTY
44070: LIST
44071: LIST
44072: PUSH
44073: LD_INT 0
44075: PUSH
44076: LD_INT 1
44078: PUSH
44079: EMPTY
44080: LIST
44081: LIST
44082: PUSH
44083: LD_INT 1
44085: NEG
44086: PUSH
44087: LD_INT 0
44089: PUSH
44090: EMPTY
44091: LIST
44092: LIST
44093: PUSH
44094: LD_INT 1
44096: NEG
44097: PUSH
44098: LD_INT 1
44100: NEG
44101: PUSH
44102: EMPTY
44103: LIST
44104: LIST
44105: PUSH
44106: LD_INT 1
44108: PUSH
44109: LD_INT 1
44111: NEG
44112: PUSH
44113: EMPTY
44114: LIST
44115: LIST
44116: PUSH
44117: LD_INT 2
44119: PUSH
44120: LD_INT 0
44122: PUSH
44123: EMPTY
44124: LIST
44125: LIST
44126: PUSH
44127: LD_INT 2
44129: PUSH
44130: LD_INT 1
44132: PUSH
44133: EMPTY
44134: LIST
44135: LIST
44136: PUSH
44137: LD_INT 2
44139: PUSH
44140: LD_INT 2
44142: PUSH
44143: EMPTY
44144: LIST
44145: LIST
44146: PUSH
44147: LD_INT 1
44149: PUSH
44150: LD_INT 2
44152: PUSH
44153: EMPTY
44154: LIST
44155: LIST
44156: PUSH
44157: EMPTY
44158: LIST
44159: LIST
44160: LIST
44161: LIST
44162: LIST
44163: LIST
44164: LIST
44165: LIST
44166: LIST
44167: LIST
44168: LIST
44169: LIST
44170: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44171: LD_ADDR_VAR 0 50
44175: PUSH
44176: LD_INT 0
44178: PUSH
44179: LD_INT 0
44181: PUSH
44182: EMPTY
44183: LIST
44184: LIST
44185: PUSH
44186: LD_INT 0
44188: PUSH
44189: LD_INT 1
44191: NEG
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: PUSH
44197: LD_INT 1
44199: PUSH
44200: LD_INT 0
44202: PUSH
44203: EMPTY
44204: LIST
44205: LIST
44206: PUSH
44207: LD_INT 1
44209: PUSH
44210: LD_INT 1
44212: PUSH
44213: EMPTY
44214: LIST
44215: LIST
44216: PUSH
44217: LD_INT 0
44219: PUSH
44220: LD_INT 1
44222: PUSH
44223: EMPTY
44224: LIST
44225: LIST
44226: PUSH
44227: LD_INT 1
44229: NEG
44230: PUSH
44231: LD_INT 0
44233: PUSH
44234: EMPTY
44235: LIST
44236: LIST
44237: PUSH
44238: LD_INT 1
44240: NEG
44241: PUSH
44242: LD_INT 1
44244: NEG
44245: PUSH
44246: EMPTY
44247: LIST
44248: LIST
44249: PUSH
44250: LD_INT 2
44252: PUSH
44253: LD_INT 1
44255: PUSH
44256: EMPTY
44257: LIST
44258: LIST
44259: PUSH
44260: LD_INT 2
44262: PUSH
44263: LD_INT 2
44265: PUSH
44266: EMPTY
44267: LIST
44268: LIST
44269: PUSH
44270: LD_INT 1
44272: PUSH
44273: LD_INT 2
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: PUSH
44280: LD_INT 0
44282: PUSH
44283: LD_INT 2
44285: PUSH
44286: EMPTY
44287: LIST
44288: LIST
44289: PUSH
44290: LD_INT 1
44292: NEG
44293: PUSH
44294: LD_INT 1
44296: PUSH
44297: EMPTY
44298: LIST
44299: LIST
44300: PUSH
44301: EMPTY
44302: LIST
44303: LIST
44304: LIST
44305: LIST
44306: LIST
44307: LIST
44308: LIST
44309: LIST
44310: LIST
44311: LIST
44312: LIST
44313: LIST
44314: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44315: LD_ADDR_VAR 0 51
44319: PUSH
44320: LD_INT 0
44322: PUSH
44323: LD_INT 0
44325: PUSH
44326: EMPTY
44327: LIST
44328: LIST
44329: PUSH
44330: LD_INT 0
44332: PUSH
44333: LD_INT 1
44335: NEG
44336: PUSH
44337: EMPTY
44338: LIST
44339: LIST
44340: PUSH
44341: LD_INT 1
44343: PUSH
44344: LD_INT 0
44346: PUSH
44347: EMPTY
44348: LIST
44349: LIST
44350: PUSH
44351: LD_INT 1
44353: PUSH
44354: LD_INT 1
44356: PUSH
44357: EMPTY
44358: LIST
44359: LIST
44360: PUSH
44361: LD_INT 0
44363: PUSH
44364: LD_INT 1
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: PUSH
44371: LD_INT 1
44373: NEG
44374: PUSH
44375: LD_INT 0
44377: PUSH
44378: EMPTY
44379: LIST
44380: LIST
44381: PUSH
44382: LD_INT 1
44384: NEG
44385: PUSH
44386: LD_INT 1
44388: NEG
44389: PUSH
44390: EMPTY
44391: LIST
44392: LIST
44393: PUSH
44394: LD_INT 1
44396: PUSH
44397: LD_INT 2
44399: PUSH
44400: EMPTY
44401: LIST
44402: LIST
44403: PUSH
44404: LD_INT 0
44406: PUSH
44407: LD_INT 2
44409: PUSH
44410: EMPTY
44411: LIST
44412: LIST
44413: PUSH
44414: LD_INT 1
44416: NEG
44417: PUSH
44418: LD_INT 1
44420: PUSH
44421: EMPTY
44422: LIST
44423: LIST
44424: PUSH
44425: LD_INT 2
44427: NEG
44428: PUSH
44429: LD_INT 0
44431: PUSH
44432: EMPTY
44433: LIST
44434: LIST
44435: PUSH
44436: LD_INT 2
44438: NEG
44439: PUSH
44440: LD_INT 1
44442: NEG
44443: PUSH
44444: EMPTY
44445: LIST
44446: LIST
44447: PUSH
44448: EMPTY
44449: LIST
44450: LIST
44451: LIST
44452: LIST
44453: LIST
44454: LIST
44455: LIST
44456: LIST
44457: LIST
44458: LIST
44459: LIST
44460: LIST
44461: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44462: LD_ADDR_VAR 0 52
44466: PUSH
44467: LD_INT 0
44469: PUSH
44470: LD_INT 0
44472: PUSH
44473: EMPTY
44474: LIST
44475: LIST
44476: PUSH
44477: LD_INT 0
44479: PUSH
44480: LD_INT 1
44482: NEG
44483: PUSH
44484: EMPTY
44485: LIST
44486: LIST
44487: PUSH
44488: LD_INT 1
44490: PUSH
44491: LD_INT 0
44493: PUSH
44494: EMPTY
44495: LIST
44496: LIST
44497: PUSH
44498: LD_INT 1
44500: PUSH
44501: LD_INT 1
44503: PUSH
44504: EMPTY
44505: LIST
44506: LIST
44507: PUSH
44508: LD_INT 0
44510: PUSH
44511: LD_INT 1
44513: PUSH
44514: EMPTY
44515: LIST
44516: LIST
44517: PUSH
44518: LD_INT 1
44520: NEG
44521: PUSH
44522: LD_INT 0
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: PUSH
44529: LD_INT 1
44531: NEG
44532: PUSH
44533: LD_INT 1
44535: NEG
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: PUSH
44541: LD_INT 1
44543: NEG
44544: PUSH
44545: LD_INT 2
44547: NEG
44548: PUSH
44549: EMPTY
44550: LIST
44551: LIST
44552: PUSH
44553: LD_INT 1
44555: NEG
44556: PUSH
44557: LD_INT 1
44559: PUSH
44560: EMPTY
44561: LIST
44562: LIST
44563: PUSH
44564: LD_INT 2
44566: NEG
44567: PUSH
44568: LD_INT 0
44570: PUSH
44571: EMPTY
44572: LIST
44573: LIST
44574: PUSH
44575: LD_INT 2
44577: NEG
44578: PUSH
44579: LD_INT 1
44581: NEG
44582: PUSH
44583: EMPTY
44584: LIST
44585: LIST
44586: PUSH
44587: LD_INT 2
44589: NEG
44590: PUSH
44591: LD_INT 2
44593: NEG
44594: PUSH
44595: EMPTY
44596: LIST
44597: LIST
44598: PUSH
44599: EMPTY
44600: LIST
44601: LIST
44602: LIST
44603: LIST
44604: LIST
44605: LIST
44606: LIST
44607: LIST
44608: LIST
44609: LIST
44610: LIST
44611: LIST
44612: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44613: LD_ADDR_VAR 0 53
44617: PUSH
44618: LD_INT 0
44620: PUSH
44621: LD_INT 0
44623: PUSH
44624: EMPTY
44625: LIST
44626: LIST
44627: PUSH
44628: LD_INT 0
44630: PUSH
44631: LD_INT 1
44633: NEG
44634: PUSH
44635: EMPTY
44636: LIST
44637: LIST
44638: PUSH
44639: LD_INT 1
44641: PUSH
44642: LD_INT 0
44644: PUSH
44645: EMPTY
44646: LIST
44647: LIST
44648: PUSH
44649: LD_INT 1
44651: PUSH
44652: LD_INT 1
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: PUSH
44659: LD_INT 0
44661: PUSH
44662: LD_INT 1
44664: PUSH
44665: EMPTY
44666: LIST
44667: LIST
44668: PUSH
44669: LD_INT 1
44671: NEG
44672: PUSH
44673: LD_INT 0
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: PUSH
44680: LD_INT 1
44682: NEG
44683: PUSH
44684: LD_INT 1
44686: NEG
44687: PUSH
44688: EMPTY
44689: LIST
44690: LIST
44691: PUSH
44692: LD_INT 1
44694: NEG
44695: PUSH
44696: LD_INT 2
44698: NEG
44699: PUSH
44700: EMPTY
44701: LIST
44702: LIST
44703: PUSH
44704: LD_INT 0
44706: PUSH
44707: LD_INT 2
44709: NEG
44710: PUSH
44711: EMPTY
44712: LIST
44713: LIST
44714: PUSH
44715: LD_INT 1
44717: PUSH
44718: LD_INT 1
44720: NEG
44721: PUSH
44722: EMPTY
44723: LIST
44724: LIST
44725: PUSH
44726: LD_INT 2
44728: PUSH
44729: LD_INT 0
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: PUSH
44736: LD_INT 2
44738: PUSH
44739: LD_INT 1
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PUSH
44746: LD_INT 2
44748: PUSH
44749: LD_INT 2
44751: PUSH
44752: EMPTY
44753: LIST
44754: LIST
44755: PUSH
44756: LD_INT 1
44758: PUSH
44759: LD_INT 2
44761: PUSH
44762: EMPTY
44763: LIST
44764: LIST
44765: PUSH
44766: LD_INT 0
44768: PUSH
44769: LD_INT 2
44771: PUSH
44772: EMPTY
44773: LIST
44774: LIST
44775: PUSH
44776: LD_INT 1
44778: NEG
44779: PUSH
44780: LD_INT 1
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: PUSH
44787: LD_INT 2
44789: NEG
44790: PUSH
44791: LD_INT 0
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: PUSH
44798: LD_INT 2
44800: NEG
44801: PUSH
44802: LD_INT 1
44804: NEG
44805: PUSH
44806: EMPTY
44807: LIST
44808: LIST
44809: PUSH
44810: LD_INT 2
44812: NEG
44813: PUSH
44814: LD_INT 2
44816: NEG
44817: PUSH
44818: EMPTY
44819: LIST
44820: LIST
44821: PUSH
44822: EMPTY
44823: LIST
44824: LIST
44825: LIST
44826: LIST
44827: LIST
44828: LIST
44829: LIST
44830: LIST
44831: LIST
44832: LIST
44833: LIST
44834: LIST
44835: LIST
44836: LIST
44837: LIST
44838: LIST
44839: LIST
44840: LIST
44841: LIST
44842: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44843: LD_ADDR_VAR 0 54
44847: PUSH
44848: LD_INT 0
44850: PUSH
44851: LD_INT 0
44853: PUSH
44854: EMPTY
44855: LIST
44856: LIST
44857: PUSH
44858: LD_INT 0
44860: PUSH
44861: LD_INT 1
44863: NEG
44864: PUSH
44865: EMPTY
44866: LIST
44867: LIST
44868: PUSH
44869: LD_INT 1
44871: PUSH
44872: LD_INT 0
44874: PUSH
44875: EMPTY
44876: LIST
44877: LIST
44878: PUSH
44879: LD_INT 1
44881: PUSH
44882: LD_INT 1
44884: PUSH
44885: EMPTY
44886: LIST
44887: LIST
44888: PUSH
44889: LD_INT 0
44891: PUSH
44892: LD_INT 1
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: PUSH
44899: LD_INT 1
44901: NEG
44902: PUSH
44903: LD_INT 0
44905: PUSH
44906: EMPTY
44907: LIST
44908: LIST
44909: PUSH
44910: LD_INT 1
44912: NEG
44913: PUSH
44914: LD_INT 1
44916: NEG
44917: PUSH
44918: EMPTY
44919: LIST
44920: LIST
44921: PUSH
44922: LD_INT 1
44924: NEG
44925: PUSH
44926: LD_INT 2
44928: NEG
44929: PUSH
44930: EMPTY
44931: LIST
44932: LIST
44933: PUSH
44934: LD_INT 0
44936: PUSH
44937: LD_INT 2
44939: NEG
44940: PUSH
44941: EMPTY
44942: LIST
44943: LIST
44944: PUSH
44945: LD_INT 1
44947: PUSH
44948: LD_INT 1
44950: NEG
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: PUSH
44956: LD_INT 2
44958: PUSH
44959: LD_INT 0
44961: PUSH
44962: EMPTY
44963: LIST
44964: LIST
44965: PUSH
44966: LD_INT 2
44968: PUSH
44969: LD_INT 1
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: PUSH
44976: LD_INT 2
44978: PUSH
44979: LD_INT 2
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: PUSH
44986: LD_INT 1
44988: PUSH
44989: LD_INT 2
44991: PUSH
44992: EMPTY
44993: LIST
44994: LIST
44995: PUSH
44996: LD_INT 0
44998: PUSH
44999: LD_INT 2
45001: PUSH
45002: EMPTY
45003: LIST
45004: LIST
45005: PUSH
45006: LD_INT 1
45008: NEG
45009: PUSH
45010: LD_INT 1
45012: PUSH
45013: EMPTY
45014: LIST
45015: LIST
45016: PUSH
45017: LD_INT 2
45019: NEG
45020: PUSH
45021: LD_INT 0
45023: PUSH
45024: EMPTY
45025: LIST
45026: LIST
45027: PUSH
45028: LD_INT 2
45030: NEG
45031: PUSH
45032: LD_INT 1
45034: NEG
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: PUSH
45040: LD_INT 2
45042: NEG
45043: PUSH
45044: LD_INT 2
45046: NEG
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: EMPTY
45053: LIST
45054: LIST
45055: LIST
45056: LIST
45057: LIST
45058: LIST
45059: LIST
45060: LIST
45061: LIST
45062: LIST
45063: LIST
45064: LIST
45065: LIST
45066: LIST
45067: LIST
45068: LIST
45069: LIST
45070: LIST
45071: LIST
45072: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45073: LD_ADDR_VAR 0 55
45077: PUSH
45078: LD_INT 0
45080: PUSH
45081: LD_INT 0
45083: PUSH
45084: EMPTY
45085: LIST
45086: LIST
45087: PUSH
45088: LD_INT 0
45090: PUSH
45091: LD_INT 1
45093: NEG
45094: PUSH
45095: EMPTY
45096: LIST
45097: LIST
45098: PUSH
45099: LD_INT 1
45101: PUSH
45102: LD_INT 0
45104: PUSH
45105: EMPTY
45106: LIST
45107: LIST
45108: PUSH
45109: LD_INT 1
45111: PUSH
45112: LD_INT 1
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: PUSH
45119: LD_INT 0
45121: PUSH
45122: LD_INT 1
45124: PUSH
45125: EMPTY
45126: LIST
45127: LIST
45128: PUSH
45129: LD_INT 1
45131: NEG
45132: PUSH
45133: LD_INT 0
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: PUSH
45140: LD_INT 1
45142: NEG
45143: PUSH
45144: LD_INT 1
45146: NEG
45147: PUSH
45148: EMPTY
45149: LIST
45150: LIST
45151: PUSH
45152: LD_INT 1
45154: NEG
45155: PUSH
45156: LD_INT 2
45158: NEG
45159: PUSH
45160: EMPTY
45161: LIST
45162: LIST
45163: PUSH
45164: LD_INT 0
45166: PUSH
45167: LD_INT 2
45169: NEG
45170: PUSH
45171: EMPTY
45172: LIST
45173: LIST
45174: PUSH
45175: LD_INT 1
45177: PUSH
45178: LD_INT 1
45180: NEG
45181: PUSH
45182: EMPTY
45183: LIST
45184: LIST
45185: PUSH
45186: LD_INT 2
45188: PUSH
45189: LD_INT 0
45191: PUSH
45192: EMPTY
45193: LIST
45194: LIST
45195: PUSH
45196: LD_INT 2
45198: PUSH
45199: LD_INT 1
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PUSH
45206: LD_INT 2
45208: PUSH
45209: LD_INT 2
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: PUSH
45216: LD_INT 1
45218: PUSH
45219: LD_INT 2
45221: PUSH
45222: EMPTY
45223: LIST
45224: LIST
45225: PUSH
45226: LD_INT 0
45228: PUSH
45229: LD_INT 2
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: PUSH
45236: LD_INT 1
45238: NEG
45239: PUSH
45240: LD_INT 1
45242: PUSH
45243: EMPTY
45244: LIST
45245: LIST
45246: PUSH
45247: LD_INT 2
45249: NEG
45250: PUSH
45251: LD_INT 0
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: PUSH
45258: LD_INT 2
45260: NEG
45261: PUSH
45262: LD_INT 1
45264: NEG
45265: PUSH
45266: EMPTY
45267: LIST
45268: LIST
45269: PUSH
45270: LD_INT 2
45272: NEG
45273: PUSH
45274: LD_INT 2
45276: NEG
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: PUSH
45282: EMPTY
45283: LIST
45284: LIST
45285: LIST
45286: LIST
45287: LIST
45288: LIST
45289: LIST
45290: LIST
45291: LIST
45292: LIST
45293: LIST
45294: LIST
45295: LIST
45296: LIST
45297: LIST
45298: LIST
45299: LIST
45300: LIST
45301: LIST
45302: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45303: LD_ADDR_VAR 0 56
45307: PUSH
45308: LD_INT 0
45310: PUSH
45311: LD_INT 0
45313: PUSH
45314: EMPTY
45315: LIST
45316: LIST
45317: PUSH
45318: LD_INT 0
45320: PUSH
45321: LD_INT 1
45323: NEG
45324: PUSH
45325: EMPTY
45326: LIST
45327: LIST
45328: PUSH
45329: LD_INT 1
45331: PUSH
45332: LD_INT 0
45334: PUSH
45335: EMPTY
45336: LIST
45337: LIST
45338: PUSH
45339: LD_INT 1
45341: PUSH
45342: LD_INT 1
45344: PUSH
45345: EMPTY
45346: LIST
45347: LIST
45348: PUSH
45349: LD_INT 0
45351: PUSH
45352: LD_INT 1
45354: PUSH
45355: EMPTY
45356: LIST
45357: LIST
45358: PUSH
45359: LD_INT 1
45361: NEG
45362: PUSH
45363: LD_INT 0
45365: PUSH
45366: EMPTY
45367: LIST
45368: LIST
45369: PUSH
45370: LD_INT 1
45372: NEG
45373: PUSH
45374: LD_INT 1
45376: NEG
45377: PUSH
45378: EMPTY
45379: LIST
45380: LIST
45381: PUSH
45382: LD_INT 1
45384: NEG
45385: PUSH
45386: LD_INT 2
45388: NEG
45389: PUSH
45390: EMPTY
45391: LIST
45392: LIST
45393: PUSH
45394: LD_INT 0
45396: PUSH
45397: LD_INT 2
45399: NEG
45400: PUSH
45401: EMPTY
45402: LIST
45403: LIST
45404: PUSH
45405: LD_INT 1
45407: PUSH
45408: LD_INT 1
45410: NEG
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: PUSH
45416: LD_INT 2
45418: PUSH
45419: LD_INT 0
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: PUSH
45426: LD_INT 2
45428: PUSH
45429: LD_INT 1
45431: PUSH
45432: EMPTY
45433: LIST
45434: LIST
45435: PUSH
45436: LD_INT 2
45438: PUSH
45439: LD_INT 2
45441: PUSH
45442: EMPTY
45443: LIST
45444: LIST
45445: PUSH
45446: LD_INT 1
45448: PUSH
45449: LD_INT 2
45451: PUSH
45452: EMPTY
45453: LIST
45454: LIST
45455: PUSH
45456: LD_INT 0
45458: PUSH
45459: LD_INT 2
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: PUSH
45466: LD_INT 1
45468: NEG
45469: PUSH
45470: LD_INT 1
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: PUSH
45477: LD_INT 2
45479: NEG
45480: PUSH
45481: LD_INT 0
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: PUSH
45488: LD_INT 2
45490: NEG
45491: PUSH
45492: LD_INT 1
45494: NEG
45495: PUSH
45496: EMPTY
45497: LIST
45498: LIST
45499: PUSH
45500: LD_INT 2
45502: NEG
45503: PUSH
45504: LD_INT 2
45506: NEG
45507: PUSH
45508: EMPTY
45509: LIST
45510: LIST
45511: PUSH
45512: EMPTY
45513: LIST
45514: LIST
45515: LIST
45516: LIST
45517: LIST
45518: LIST
45519: LIST
45520: LIST
45521: LIST
45522: LIST
45523: LIST
45524: LIST
45525: LIST
45526: LIST
45527: LIST
45528: LIST
45529: LIST
45530: LIST
45531: LIST
45532: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45533: LD_ADDR_VAR 0 57
45537: PUSH
45538: LD_INT 0
45540: PUSH
45541: LD_INT 0
45543: PUSH
45544: EMPTY
45545: LIST
45546: LIST
45547: PUSH
45548: LD_INT 0
45550: PUSH
45551: LD_INT 1
45553: NEG
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: PUSH
45559: LD_INT 1
45561: PUSH
45562: LD_INT 0
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: PUSH
45569: LD_INT 1
45571: PUSH
45572: LD_INT 1
45574: PUSH
45575: EMPTY
45576: LIST
45577: LIST
45578: PUSH
45579: LD_INT 0
45581: PUSH
45582: LD_INT 1
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: PUSH
45589: LD_INT 1
45591: NEG
45592: PUSH
45593: LD_INT 0
45595: PUSH
45596: EMPTY
45597: LIST
45598: LIST
45599: PUSH
45600: LD_INT 1
45602: NEG
45603: PUSH
45604: LD_INT 1
45606: NEG
45607: PUSH
45608: EMPTY
45609: LIST
45610: LIST
45611: PUSH
45612: LD_INT 1
45614: NEG
45615: PUSH
45616: LD_INT 2
45618: NEG
45619: PUSH
45620: EMPTY
45621: LIST
45622: LIST
45623: PUSH
45624: LD_INT 0
45626: PUSH
45627: LD_INT 2
45629: NEG
45630: PUSH
45631: EMPTY
45632: LIST
45633: LIST
45634: PUSH
45635: LD_INT 1
45637: PUSH
45638: LD_INT 1
45640: NEG
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: PUSH
45646: LD_INT 2
45648: PUSH
45649: LD_INT 0
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: PUSH
45656: LD_INT 2
45658: PUSH
45659: LD_INT 1
45661: PUSH
45662: EMPTY
45663: LIST
45664: LIST
45665: PUSH
45666: LD_INT 2
45668: PUSH
45669: LD_INT 2
45671: PUSH
45672: EMPTY
45673: LIST
45674: LIST
45675: PUSH
45676: LD_INT 1
45678: PUSH
45679: LD_INT 2
45681: PUSH
45682: EMPTY
45683: LIST
45684: LIST
45685: PUSH
45686: LD_INT 0
45688: PUSH
45689: LD_INT 2
45691: PUSH
45692: EMPTY
45693: LIST
45694: LIST
45695: PUSH
45696: LD_INT 1
45698: NEG
45699: PUSH
45700: LD_INT 1
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: PUSH
45707: LD_INT 2
45709: NEG
45710: PUSH
45711: LD_INT 0
45713: PUSH
45714: EMPTY
45715: LIST
45716: LIST
45717: PUSH
45718: LD_INT 2
45720: NEG
45721: PUSH
45722: LD_INT 1
45724: NEG
45725: PUSH
45726: EMPTY
45727: LIST
45728: LIST
45729: PUSH
45730: LD_INT 2
45732: NEG
45733: PUSH
45734: LD_INT 2
45736: NEG
45737: PUSH
45738: EMPTY
45739: LIST
45740: LIST
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: LIST
45746: LIST
45747: LIST
45748: LIST
45749: LIST
45750: LIST
45751: LIST
45752: LIST
45753: LIST
45754: LIST
45755: LIST
45756: LIST
45757: LIST
45758: LIST
45759: LIST
45760: LIST
45761: LIST
45762: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45763: LD_ADDR_VAR 0 58
45767: PUSH
45768: LD_INT 0
45770: PUSH
45771: LD_INT 0
45773: PUSH
45774: EMPTY
45775: LIST
45776: LIST
45777: PUSH
45778: LD_INT 0
45780: PUSH
45781: LD_INT 1
45783: NEG
45784: PUSH
45785: EMPTY
45786: LIST
45787: LIST
45788: PUSH
45789: LD_INT 1
45791: PUSH
45792: LD_INT 0
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: PUSH
45799: LD_INT 1
45801: PUSH
45802: LD_INT 1
45804: PUSH
45805: EMPTY
45806: LIST
45807: LIST
45808: PUSH
45809: LD_INT 0
45811: PUSH
45812: LD_INT 1
45814: PUSH
45815: EMPTY
45816: LIST
45817: LIST
45818: PUSH
45819: LD_INT 1
45821: NEG
45822: PUSH
45823: LD_INT 0
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: PUSH
45830: LD_INT 1
45832: NEG
45833: PUSH
45834: LD_INT 1
45836: NEG
45837: PUSH
45838: EMPTY
45839: LIST
45840: LIST
45841: PUSH
45842: LD_INT 1
45844: NEG
45845: PUSH
45846: LD_INT 2
45848: NEG
45849: PUSH
45850: EMPTY
45851: LIST
45852: LIST
45853: PUSH
45854: LD_INT 0
45856: PUSH
45857: LD_INT 2
45859: NEG
45860: PUSH
45861: EMPTY
45862: LIST
45863: LIST
45864: PUSH
45865: LD_INT 1
45867: PUSH
45868: LD_INT 1
45870: NEG
45871: PUSH
45872: EMPTY
45873: LIST
45874: LIST
45875: PUSH
45876: LD_INT 2
45878: PUSH
45879: LD_INT 0
45881: PUSH
45882: EMPTY
45883: LIST
45884: LIST
45885: PUSH
45886: LD_INT 2
45888: PUSH
45889: LD_INT 1
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: PUSH
45896: LD_INT 2
45898: PUSH
45899: LD_INT 2
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: PUSH
45906: LD_INT 1
45908: PUSH
45909: LD_INT 2
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: PUSH
45916: LD_INT 0
45918: PUSH
45919: LD_INT 2
45921: PUSH
45922: EMPTY
45923: LIST
45924: LIST
45925: PUSH
45926: LD_INT 1
45928: NEG
45929: PUSH
45930: LD_INT 1
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: PUSH
45937: LD_INT 2
45939: NEG
45940: PUSH
45941: LD_INT 0
45943: PUSH
45944: EMPTY
45945: LIST
45946: LIST
45947: PUSH
45948: LD_INT 2
45950: NEG
45951: PUSH
45952: LD_INT 1
45954: NEG
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: PUSH
45960: LD_INT 2
45962: NEG
45963: PUSH
45964: LD_INT 2
45966: NEG
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: LIST
45976: LIST
45977: LIST
45978: LIST
45979: LIST
45980: LIST
45981: LIST
45982: LIST
45983: LIST
45984: LIST
45985: LIST
45986: LIST
45987: LIST
45988: LIST
45989: LIST
45990: LIST
45991: LIST
45992: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45993: LD_ADDR_VAR 0 59
45997: PUSH
45998: LD_INT 0
46000: PUSH
46001: LD_INT 0
46003: PUSH
46004: EMPTY
46005: LIST
46006: LIST
46007: PUSH
46008: LD_INT 0
46010: PUSH
46011: LD_INT 1
46013: NEG
46014: PUSH
46015: EMPTY
46016: LIST
46017: LIST
46018: PUSH
46019: LD_INT 1
46021: PUSH
46022: LD_INT 0
46024: PUSH
46025: EMPTY
46026: LIST
46027: LIST
46028: PUSH
46029: LD_INT 1
46031: PUSH
46032: LD_INT 1
46034: PUSH
46035: EMPTY
46036: LIST
46037: LIST
46038: PUSH
46039: LD_INT 0
46041: PUSH
46042: LD_INT 1
46044: PUSH
46045: EMPTY
46046: LIST
46047: LIST
46048: PUSH
46049: LD_INT 1
46051: NEG
46052: PUSH
46053: LD_INT 0
46055: PUSH
46056: EMPTY
46057: LIST
46058: LIST
46059: PUSH
46060: LD_INT 1
46062: NEG
46063: PUSH
46064: LD_INT 1
46066: NEG
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: LIST
46076: LIST
46077: LIST
46078: LIST
46079: LIST
46080: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46081: LD_ADDR_VAR 0 60
46085: PUSH
46086: LD_INT 0
46088: PUSH
46089: LD_INT 0
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 0
46098: PUSH
46099: LD_INT 1
46101: NEG
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: PUSH
46107: LD_INT 1
46109: PUSH
46110: LD_INT 0
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: PUSH
46117: LD_INT 1
46119: PUSH
46120: LD_INT 1
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: PUSH
46127: LD_INT 0
46129: PUSH
46130: LD_INT 1
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: PUSH
46137: LD_INT 1
46139: NEG
46140: PUSH
46141: LD_INT 0
46143: PUSH
46144: EMPTY
46145: LIST
46146: LIST
46147: PUSH
46148: LD_INT 1
46150: NEG
46151: PUSH
46152: LD_INT 1
46154: NEG
46155: PUSH
46156: EMPTY
46157: LIST
46158: LIST
46159: PUSH
46160: EMPTY
46161: LIST
46162: LIST
46163: LIST
46164: LIST
46165: LIST
46166: LIST
46167: LIST
46168: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46169: LD_ADDR_VAR 0 61
46173: PUSH
46174: LD_INT 0
46176: PUSH
46177: LD_INT 0
46179: PUSH
46180: EMPTY
46181: LIST
46182: LIST
46183: PUSH
46184: LD_INT 0
46186: PUSH
46187: LD_INT 1
46189: NEG
46190: PUSH
46191: EMPTY
46192: LIST
46193: LIST
46194: PUSH
46195: LD_INT 1
46197: PUSH
46198: LD_INT 0
46200: PUSH
46201: EMPTY
46202: LIST
46203: LIST
46204: PUSH
46205: LD_INT 1
46207: PUSH
46208: LD_INT 1
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: PUSH
46215: LD_INT 0
46217: PUSH
46218: LD_INT 1
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: PUSH
46225: LD_INT 1
46227: NEG
46228: PUSH
46229: LD_INT 0
46231: PUSH
46232: EMPTY
46233: LIST
46234: LIST
46235: PUSH
46236: LD_INT 1
46238: NEG
46239: PUSH
46240: LD_INT 1
46242: NEG
46243: PUSH
46244: EMPTY
46245: LIST
46246: LIST
46247: PUSH
46248: EMPTY
46249: LIST
46250: LIST
46251: LIST
46252: LIST
46253: LIST
46254: LIST
46255: LIST
46256: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46257: LD_ADDR_VAR 0 62
46261: PUSH
46262: LD_INT 0
46264: PUSH
46265: LD_INT 0
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: PUSH
46272: LD_INT 0
46274: PUSH
46275: LD_INT 1
46277: NEG
46278: PUSH
46279: EMPTY
46280: LIST
46281: LIST
46282: PUSH
46283: LD_INT 1
46285: PUSH
46286: LD_INT 0
46288: PUSH
46289: EMPTY
46290: LIST
46291: LIST
46292: PUSH
46293: LD_INT 1
46295: PUSH
46296: LD_INT 1
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: PUSH
46303: LD_INT 0
46305: PUSH
46306: LD_INT 1
46308: PUSH
46309: EMPTY
46310: LIST
46311: LIST
46312: PUSH
46313: LD_INT 1
46315: NEG
46316: PUSH
46317: LD_INT 0
46319: PUSH
46320: EMPTY
46321: LIST
46322: LIST
46323: PUSH
46324: LD_INT 1
46326: NEG
46327: PUSH
46328: LD_INT 1
46330: NEG
46331: PUSH
46332: EMPTY
46333: LIST
46334: LIST
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: LIST
46340: LIST
46341: LIST
46342: LIST
46343: LIST
46344: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46345: LD_ADDR_VAR 0 63
46349: PUSH
46350: LD_INT 0
46352: PUSH
46353: LD_INT 0
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: PUSH
46360: LD_INT 0
46362: PUSH
46363: LD_INT 1
46365: NEG
46366: PUSH
46367: EMPTY
46368: LIST
46369: LIST
46370: PUSH
46371: LD_INT 1
46373: PUSH
46374: LD_INT 0
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: PUSH
46381: LD_INT 1
46383: PUSH
46384: LD_INT 1
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: PUSH
46391: LD_INT 0
46393: PUSH
46394: LD_INT 1
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: PUSH
46401: LD_INT 1
46403: NEG
46404: PUSH
46405: LD_INT 0
46407: PUSH
46408: EMPTY
46409: LIST
46410: LIST
46411: PUSH
46412: LD_INT 1
46414: NEG
46415: PUSH
46416: LD_INT 1
46418: NEG
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: LIST
46428: LIST
46429: LIST
46430: LIST
46431: LIST
46432: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46433: LD_ADDR_VAR 0 64
46437: PUSH
46438: LD_INT 0
46440: PUSH
46441: LD_INT 0
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: PUSH
46448: LD_INT 0
46450: PUSH
46451: LD_INT 1
46453: NEG
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: PUSH
46459: LD_INT 1
46461: PUSH
46462: LD_INT 0
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: PUSH
46469: LD_INT 1
46471: PUSH
46472: LD_INT 1
46474: PUSH
46475: EMPTY
46476: LIST
46477: LIST
46478: PUSH
46479: LD_INT 0
46481: PUSH
46482: LD_INT 1
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: PUSH
46489: LD_INT 1
46491: NEG
46492: PUSH
46493: LD_INT 0
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: LD_INT 1
46502: NEG
46503: PUSH
46504: LD_INT 1
46506: NEG
46507: PUSH
46508: EMPTY
46509: LIST
46510: LIST
46511: PUSH
46512: EMPTY
46513: LIST
46514: LIST
46515: LIST
46516: LIST
46517: LIST
46518: LIST
46519: LIST
46520: ST_TO_ADDR
// end ; 1 :
46521: GO 52418
46523: LD_INT 1
46525: DOUBLE
46526: EQUAL
46527: IFTRUE 46531
46529: GO 49154
46531: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46532: LD_ADDR_VAR 0 11
46536: PUSH
46537: LD_INT 1
46539: NEG
46540: PUSH
46541: LD_INT 3
46543: NEG
46544: PUSH
46545: EMPTY
46546: LIST
46547: LIST
46548: PUSH
46549: LD_INT 0
46551: PUSH
46552: LD_INT 3
46554: NEG
46555: PUSH
46556: EMPTY
46557: LIST
46558: LIST
46559: PUSH
46560: LD_INT 1
46562: PUSH
46563: LD_INT 2
46565: NEG
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: LIST
46575: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46576: LD_ADDR_VAR 0 12
46580: PUSH
46581: LD_INT 2
46583: PUSH
46584: LD_INT 1
46586: NEG
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: PUSH
46592: LD_INT 3
46594: PUSH
46595: LD_INT 0
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: PUSH
46602: LD_INT 3
46604: PUSH
46605: LD_INT 1
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: PUSH
46612: EMPTY
46613: LIST
46614: LIST
46615: LIST
46616: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46617: LD_ADDR_VAR 0 13
46621: PUSH
46622: LD_INT 3
46624: PUSH
46625: LD_INT 2
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: PUSH
46632: LD_INT 3
46634: PUSH
46635: LD_INT 3
46637: PUSH
46638: EMPTY
46639: LIST
46640: LIST
46641: PUSH
46642: LD_INT 2
46644: PUSH
46645: LD_INT 3
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: PUSH
46652: EMPTY
46653: LIST
46654: LIST
46655: LIST
46656: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46657: LD_ADDR_VAR 0 14
46661: PUSH
46662: LD_INT 1
46664: PUSH
46665: LD_INT 3
46667: PUSH
46668: EMPTY
46669: LIST
46670: LIST
46671: PUSH
46672: LD_INT 0
46674: PUSH
46675: LD_INT 3
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: PUSH
46682: LD_INT 1
46684: NEG
46685: PUSH
46686: LD_INT 2
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: LIST
46697: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46698: LD_ADDR_VAR 0 15
46702: PUSH
46703: LD_INT 2
46705: NEG
46706: PUSH
46707: LD_INT 1
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: PUSH
46714: LD_INT 3
46716: NEG
46717: PUSH
46718: LD_INT 0
46720: PUSH
46721: EMPTY
46722: LIST
46723: LIST
46724: PUSH
46725: LD_INT 3
46727: NEG
46728: PUSH
46729: LD_INT 1
46731: NEG
46732: PUSH
46733: EMPTY
46734: LIST
46735: LIST
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: LIST
46741: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46742: LD_ADDR_VAR 0 16
46746: PUSH
46747: LD_INT 2
46749: NEG
46750: PUSH
46751: LD_INT 3
46753: NEG
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: LD_INT 3
46761: NEG
46762: PUSH
46763: LD_INT 2
46765: NEG
46766: PUSH
46767: EMPTY
46768: LIST
46769: LIST
46770: PUSH
46771: LD_INT 3
46773: NEG
46774: PUSH
46775: LD_INT 3
46777: NEG
46778: PUSH
46779: EMPTY
46780: LIST
46781: LIST
46782: PUSH
46783: EMPTY
46784: LIST
46785: LIST
46786: LIST
46787: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46788: LD_ADDR_VAR 0 17
46792: PUSH
46793: LD_INT 1
46795: NEG
46796: PUSH
46797: LD_INT 3
46799: NEG
46800: PUSH
46801: EMPTY
46802: LIST
46803: LIST
46804: PUSH
46805: LD_INT 0
46807: PUSH
46808: LD_INT 3
46810: NEG
46811: PUSH
46812: EMPTY
46813: LIST
46814: LIST
46815: PUSH
46816: LD_INT 1
46818: PUSH
46819: LD_INT 2
46821: NEG
46822: PUSH
46823: EMPTY
46824: LIST
46825: LIST
46826: PUSH
46827: EMPTY
46828: LIST
46829: LIST
46830: LIST
46831: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46832: LD_ADDR_VAR 0 18
46836: PUSH
46837: LD_INT 2
46839: PUSH
46840: LD_INT 1
46842: NEG
46843: PUSH
46844: EMPTY
46845: LIST
46846: LIST
46847: PUSH
46848: LD_INT 3
46850: PUSH
46851: LD_INT 0
46853: PUSH
46854: EMPTY
46855: LIST
46856: LIST
46857: PUSH
46858: LD_INT 3
46860: PUSH
46861: LD_INT 1
46863: PUSH
46864: EMPTY
46865: LIST
46866: LIST
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: LIST
46872: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46873: LD_ADDR_VAR 0 19
46877: PUSH
46878: LD_INT 3
46880: PUSH
46881: LD_INT 2
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PUSH
46888: LD_INT 3
46890: PUSH
46891: LD_INT 3
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: PUSH
46898: LD_INT 2
46900: PUSH
46901: LD_INT 3
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: PUSH
46908: EMPTY
46909: LIST
46910: LIST
46911: LIST
46912: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46913: LD_ADDR_VAR 0 20
46917: PUSH
46918: LD_INT 1
46920: PUSH
46921: LD_INT 3
46923: PUSH
46924: EMPTY
46925: LIST
46926: LIST
46927: PUSH
46928: LD_INT 0
46930: PUSH
46931: LD_INT 3
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: PUSH
46938: LD_INT 1
46940: NEG
46941: PUSH
46942: LD_INT 2
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: PUSH
46949: EMPTY
46950: LIST
46951: LIST
46952: LIST
46953: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46954: LD_ADDR_VAR 0 21
46958: PUSH
46959: LD_INT 2
46961: NEG
46962: PUSH
46963: LD_INT 1
46965: PUSH
46966: EMPTY
46967: LIST
46968: LIST
46969: PUSH
46970: LD_INT 3
46972: NEG
46973: PUSH
46974: LD_INT 0
46976: PUSH
46977: EMPTY
46978: LIST
46979: LIST
46980: PUSH
46981: LD_INT 3
46983: NEG
46984: PUSH
46985: LD_INT 1
46987: NEG
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: LIST
46997: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46998: LD_ADDR_VAR 0 22
47002: PUSH
47003: LD_INT 2
47005: NEG
47006: PUSH
47007: LD_INT 3
47009: NEG
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PUSH
47015: LD_INT 3
47017: NEG
47018: PUSH
47019: LD_INT 2
47021: NEG
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: PUSH
47027: LD_INT 3
47029: NEG
47030: PUSH
47031: LD_INT 3
47033: NEG
47034: PUSH
47035: EMPTY
47036: LIST
47037: LIST
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: LIST
47043: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
47044: LD_ADDR_VAR 0 23
47048: PUSH
47049: LD_INT 0
47051: PUSH
47052: LD_INT 3
47054: NEG
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: PUSH
47060: LD_INT 1
47062: NEG
47063: PUSH
47064: LD_INT 4
47066: NEG
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: PUSH
47072: LD_INT 1
47074: PUSH
47075: LD_INT 3
47077: NEG
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: PUSH
47083: EMPTY
47084: LIST
47085: LIST
47086: LIST
47087: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
47088: LD_ADDR_VAR 0 24
47092: PUSH
47093: LD_INT 3
47095: PUSH
47096: LD_INT 0
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: PUSH
47103: LD_INT 3
47105: PUSH
47106: LD_INT 1
47108: NEG
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 4
47116: PUSH
47117: LD_INT 1
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: EMPTY
47125: LIST
47126: LIST
47127: LIST
47128: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
47129: LD_ADDR_VAR 0 25
47133: PUSH
47134: LD_INT 3
47136: PUSH
47137: LD_INT 3
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: PUSH
47144: LD_INT 4
47146: PUSH
47147: LD_INT 3
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: PUSH
47154: LD_INT 3
47156: PUSH
47157: LD_INT 4
47159: PUSH
47160: EMPTY
47161: LIST
47162: LIST
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: LIST
47168: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
47169: LD_ADDR_VAR 0 26
47173: PUSH
47174: LD_INT 0
47176: PUSH
47177: LD_INT 3
47179: PUSH
47180: EMPTY
47181: LIST
47182: LIST
47183: PUSH
47184: LD_INT 1
47186: PUSH
47187: LD_INT 4
47189: PUSH
47190: EMPTY
47191: LIST
47192: LIST
47193: PUSH
47194: LD_INT 1
47196: NEG
47197: PUSH
47198: LD_INT 3
47200: PUSH
47201: EMPTY
47202: LIST
47203: LIST
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: LIST
47209: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
47210: LD_ADDR_VAR 0 27
47214: PUSH
47215: LD_INT 3
47217: NEG
47218: PUSH
47219: LD_INT 0
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: PUSH
47226: LD_INT 3
47228: NEG
47229: PUSH
47230: LD_INT 1
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: PUSH
47237: LD_INT 4
47239: NEG
47240: PUSH
47241: LD_INT 1
47243: NEG
47244: PUSH
47245: EMPTY
47246: LIST
47247: LIST
47248: PUSH
47249: EMPTY
47250: LIST
47251: LIST
47252: LIST
47253: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
47254: LD_ADDR_VAR 0 28
47258: PUSH
47259: LD_INT 3
47261: NEG
47262: PUSH
47263: LD_INT 3
47265: NEG
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: PUSH
47271: LD_INT 3
47273: NEG
47274: PUSH
47275: LD_INT 4
47277: NEG
47278: PUSH
47279: EMPTY
47280: LIST
47281: LIST
47282: PUSH
47283: LD_INT 4
47285: NEG
47286: PUSH
47287: LD_INT 3
47289: NEG
47290: PUSH
47291: EMPTY
47292: LIST
47293: LIST
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: LIST
47299: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
47300: LD_ADDR_VAR 0 29
47304: PUSH
47305: LD_INT 1
47307: NEG
47308: PUSH
47309: LD_INT 3
47311: NEG
47312: PUSH
47313: EMPTY
47314: LIST
47315: LIST
47316: PUSH
47317: LD_INT 0
47319: PUSH
47320: LD_INT 3
47322: NEG
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: PUSH
47328: LD_INT 1
47330: PUSH
47331: LD_INT 2
47333: NEG
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: PUSH
47339: LD_INT 1
47341: NEG
47342: PUSH
47343: LD_INT 4
47345: NEG
47346: PUSH
47347: EMPTY
47348: LIST
47349: LIST
47350: PUSH
47351: LD_INT 0
47353: PUSH
47354: LD_INT 4
47356: NEG
47357: PUSH
47358: EMPTY
47359: LIST
47360: LIST
47361: PUSH
47362: LD_INT 1
47364: PUSH
47365: LD_INT 3
47367: NEG
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: PUSH
47373: LD_INT 1
47375: NEG
47376: PUSH
47377: LD_INT 5
47379: NEG
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PUSH
47385: LD_INT 0
47387: PUSH
47388: LD_INT 5
47390: NEG
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: PUSH
47396: LD_INT 1
47398: PUSH
47399: LD_INT 4
47401: NEG
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: PUSH
47407: LD_INT 1
47409: NEG
47410: PUSH
47411: LD_INT 6
47413: NEG
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: PUSH
47419: LD_INT 0
47421: PUSH
47422: LD_INT 6
47424: NEG
47425: PUSH
47426: EMPTY
47427: LIST
47428: LIST
47429: PUSH
47430: LD_INT 1
47432: PUSH
47433: LD_INT 5
47435: NEG
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: PUSH
47441: EMPTY
47442: LIST
47443: LIST
47444: LIST
47445: LIST
47446: LIST
47447: LIST
47448: LIST
47449: LIST
47450: LIST
47451: LIST
47452: LIST
47453: LIST
47454: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
47455: LD_ADDR_VAR 0 30
47459: PUSH
47460: LD_INT 2
47462: PUSH
47463: LD_INT 1
47465: NEG
47466: PUSH
47467: EMPTY
47468: LIST
47469: LIST
47470: PUSH
47471: LD_INT 3
47473: PUSH
47474: LD_INT 0
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: PUSH
47481: LD_INT 3
47483: PUSH
47484: LD_INT 1
47486: PUSH
47487: EMPTY
47488: LIST
47489: LIST
47490: PUSH
47491: LD_INT 3
47493: PUSH
47494: LD_INT 1
47496: NEG
47497: PUSH
47498: EMPTY
47499: LIST
47500: LIST
47501: PUSH
47502: LD_INT 4
47504: PUSH
47505: LD_INT 0
47507: PUSH
47508: EMPTY
47509: LIST
47510: LIST
47511: PUSH
47512: LD_INT 4
47514: PUSH
47515: LD_INT 1
47517: PUSH
47518: EMPTY
47519: LIST
47520: LIST
47521: PUSH
47522: LD_INT 4
47524: PUSH
47525: LD_INT 1
47527: NEG
47528: PUSH
47529: EMPTY
47530: LIST
47531: LIST
47532: PUSH
47533: LD_INT 5
47535: PUSH
47536: LD_INT 0
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: PUSH
47543: LD_INT 5
47545: PUSH
47546: LD_INT 1
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: PUSH
47553: LD_INT 5
47555: PUSH
47556: LD_INT 1
47558: NEG
47559: PUSH
47560: EMPTY
47561: LIST
47562: LIST
47563: PUSH
47564: LD_INT 6
47566: PUSH
47567: LD_INT 0
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: PUSH
47574: LD_INT 6
47576: PUSH
47577: LD_INT 1
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: LIST
47588: LIST
47589: LIST
47590: LIST
47591: LIST
47592: LIST
47593: LIST
47594: LIST
47595: LIST
47596: LIST
47597: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
47598: LD_ADDR_VAR 0 31
47602: PUSH
47603: LD_INT 3
47605: PUSH
47606: LD_INT 2
47608: PUSH
47609: EMPTY
47610: LIST
47611: LIST
47612: PUSH
47613: LD_INT 3
47615: PUSH
47616: LD_INT 3
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: PUSH
47623: LD_INT 2
47625: PUSH
47626: LD_INT 3
47628: PUSH
47629: EMPTY
47630: LIST
47631: LIST
47632: PUSH
47633: LD_INT 4
47635: PUSH
47636: LD_INT 3
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: PUSH
47643: LD_INT 4
47645: PUSH
47646: LD_INT 4
47648: PUSH
47649: EMPTY
47650: LIST
47651: LIST
47652: PUSH
47653: LD_INT 3
47655: PUSH
47656: LD_INT 4
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: PUSH
47663: LD_INT 5
47665: PUSH
47666: LD_INT 4
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: PUSH
47673: LD_INT 5
47675: PUSH
47676: LD_INT 5
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: LD_INT 4
47685: PUSH
47686: LD_INT 5
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: PUSH
47693: LD_INT 6
47695: PUSH
47696: LD_INT 5
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: PUSH
47703: LD_INT 6
47705: PUSH
47706: LD_INT 6
47708: PUSH
47709: EMPTY
47710: LIST
47711: LIST
47712: PUSH
47713: LD_INT 5
47715: PUSH
47716: LD_INT 6
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: LIST
47727: LIST
47728: LIST
47729: LIST
47730: LIST
47731: LIST
47732: LIST
47733: LIST
47734: LIST
47735: LIST
47736: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
47737: LD_ADDR_VAR 0 32
47741: PUSH
47742: LD_INT 1
47744: PUSH
47745: LD_INT 3
47747: PUSH
47748: EMPTY
47749: LIST
47750: LIST
47751: PUSH
47752: LD_INT 0
47754: PUSH
47755: LD_INT 3
47757: PUSH
47758: EMPTY
47759: LIST
47760: LIST
47761: PUSH
47762: LD_INT 1
47764: NEG
47765: PUSH
47766: LD_INT 2
47768: PUSH
47769: EMPTY
47770: LIST
47771: LIST
47772: PUSH
47773: LD_INT 1
47775: PUSH
47776: LD_INT 4
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: PUSH
47783: LD_INT 0
47785: PUSH
47786: LD_INT 4
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: PUSH
47793: LD_INT 1
47795: NEG
47796: PUSH
47797: LD_INT 3
47799: PUSH
47800: EMPTY
47801: LIST
47802: LIST
47803: PUSH
47804: LD_INT 1
47806: PUSH
47807: LD_INT 5
47809: PUSH
47810: EMPTY
47811: LIST
47812: LIST
47813: PUSH
47814: LD_INT 0
47816: PUSH
47817: LD_INT 5
47819: PUSH
47820: EMPTY
47821: LIST
47822: LIST
47823: PUSH
47824: LD_INT 1
47826: NEG
47827: PUSH
47828: LD_INT 4
47830: PUSH
47831: EMPTY
47832: LIST
47833: LIST
47834: PUSH
47835: LD_INT 1
47837: PUSH
47838: LD_INT 6
47840: PUSH
47841: EMPTY
47842: LIST
47843: LIST
47844: PUSH
47845: LD_INT 0
47847: PUSH
47848: LD_INT 6
47850: PUSH
47851: EMPTY
47852: LIST
47853: LIST
47854: PUSH
47855: LD_INT 1
47857: NEG
47858: PUSH
47859: LD_INT 5
47861: PUSH
47862: EMPTY
47863: LIST
47864: LIST
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: LIST
47870: LIST
47871: LIST
47872: LIST
47873: LIST
47874: LIST
47875: LIST
47876: LIST
47877: LIST
47878: LIST
47879: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
47880: LD_ADDR_VAR 0 33
47884: PUSH
47885: LD_INT 2
47887: NEG
47888: PUSH
47889: LD_INT 1
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: PUSH
47896: LD_INT 3
47898: NEG
47899: PUSH
47900: LD_INT 0
47902: PUSH
47903: EMPTY
47904: LIST
47905: LIST
47906: PUSH
47907: LD_INT 3
47909: NEG
47910: PUSH
47911: LD_INT 1
47913: NEG
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: LD_INT 3
47921: NEG
47922: PUSH
47923: LD_INT 1
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: PUSH
47930: LD_INT 4
47932: NEG
47933: PUSH
47934: LD_INT 0
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: PUSH
47941: LD_INT 4
47943: NEG
47944: PUSH
47945: LD_INT 1
47947: NEG
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: PUSH
47953: LD_INT 4
47955: NEG
47956: PUSH
47957: LD_INT 1
47959: PUSH
47960: EMPTY
47961: LIST
47962: LIST
47963: PUSH
47964: LD_INT 5
47966: NEG
47967: PUSH
47968: LD_INT 0
47970: PUSH
47971: EMPTY
47972: LIST
47973: LIST
47974: PUSH
47975: LD_INT 5
47977: NEG
47978: PUSH
47979: LD_INT 1
47981: NEG
47982: PUSH
47983: EMPTY
47984: LIST
47985: LIST
47986: PUSH
47987: LD_INT 5
47989: NEG
47990: PUSH
47991: LD_INT 1
47993: PUSH
47994: EMPTY
47995: LIST
47996: LIST
47997: PUSH
47998: LD_INT 6
48000: NEG
48001: PUSH
48002: LD_INT 0
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: PUSH
48009: LD_INT 6
48011: NEG
48012: PUSH
48013: LD_INT 1
48015: NEG
48016: PUSH
48017: EMPTY
48018: LIST
48019: LIST
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: LIST
48025: LIST
48026: LIST
48027: LIST
48028: LIST
48029: LIST
48030: LIST
48031: LIST
48032: LIST
48033: LIST
48034: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
48035: LD_ADDR_VAR 0 34
48039: PUSH
48040: LD_INT 2
48042: NEG
48043: PUSH
48044: LD_INT 3
48046: NEG
48047: PUSH
48048: EMPTY
48049: LIST
48050: LIST
48051: PUSH
48052: LD_INT 3
48054: NEG
48055: PUSH
48056: LD_INT 2
48058: NEG
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PUSH
48064: LD_INT 3
48066: NEG
48067: PUSH
48068: LD_INT 3
48070: NEG
48071: PUSH
48072: EMPTY
48073: LIST
48074: LIST
48075: PUSH
48076: LD_INT 3
48078: NEG
48079: PUSH
48080: LD_INT 4
48082: NEG
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: PUSH
48088: LD_INT 4
48090: NEG
48091: PUSH
48092: LD_INT 3
48094: NEG
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: PUSH
48100: LD_INT 4
48102: NEG
48103: PUSH
48104: LD_INT 4
48106: NEG
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: PUSH
48112: LD_INT 4
48114: NEG
48115: PUSH
48116: LD_INT 5
48118: NEG
48119: PUSH
48120: EMPTY
48121: LIST
48122: LIST
48123: PUSH
48124: LD_INT 5
48126: NEG
48127: PUSH
48128: LD_INT 4
48130: NEG
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: PUSH
48136: LD_INT 5
48138: NEG
48139: PUSH
48140: LD_INT 5
48142: NEG
48143: PUSH
48144: EMPTY
48145: LIST
48146: LIST
48147: PUSH
48148: LD_INT 5
48150: NEG
48151: PUSH
48152: LD_INT 6
48154: NEG
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: PUSH
48160: LD_INT 6
48162: NEG
48163: PUSH
48164: LD_INT 5
48166: NEG
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: PUSH
48172: LD_INT 6
48174: NEG
48175: PUSH
48176: LD_INT 6
48178: NEG
48179: PUSH
48180: EMPTY
48181: LIST
48182: LIST
48183: PUSH
48184: EMPTY
48185: LIST
48186: LIST
48187: LIST
48188: LIST
48189: LIST
48190: LIST
48191: LIST
48192: LIST
48193: LIST
48194: LIST
48195: LIST
48196: LIST
48197: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
48198: LD_ADDR_VAR 0 41
48202: PUSH
48203: LD_INT 0
48205: PUSH
48206: LD_INT 2
48208: NEG
48209: PUSH
48210: EMPTY
48211: LIST
48212: LIST
48213: PUSH
48214: LD_INT 1
48216: NEG
48217: PUSH
48218: LD_INT 3
48220: NEG
48221: PUSH
48222: EMPTY
48223: LIST
48224: LIST
48225: PUSH
48226: LD_INT 1
48228: PUSH
48229: LD_INT 2
48231: NEG
48232: PUSH
48233: EMPTY
48234: LIST
48235: LIST
48236: PUSH
48237: EMPTY
48238: LIST
48239: LIST
48240: LIST
48241: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
48242: LD_ADDR_VAR 0 42
48246: PUSH
48247: LD_INT 2
48249: PUSH
48250: LD_INT 0
48252: PUSH
48253: EMPTY
48254: LIST
48255: LIST
48256: PUSH
48257: LD_INT 2
48259: PUSH
48260: LD_INT 1
48262: NEG
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: PUSH
48268: LD_INT 3
48270: PUSH
48271: LD_INT 1
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: EMPTY
48279: LIST
48280: LIST
48281: LIST
48282: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
48283: LD_ADDR_VAR 0 43
48287: PUSH
48288: LD_INT 2
48290: PUSH
48291: LD_INT 2
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: PUSH
48298: LD_INT 3
48300: PUSH
48301: LD_INT 2
48303: PUSH
48304: EMPTY
48305: LIST
48306: LIST
48307: PUSH
48308: LD_INT 2
48310: PUSH
48311: LD_INT 3
48313: PUSH
48314: EMPTY
48315: LIST
48316: LIST
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: LIST
48322: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
48323: LD_ADDR_VAR 0 44
48327: PUSH
48328: LD_INT 0
48330: PUSH
48331: LD_INT 2
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: PUSH
48338: LD_INT 1
48340: PUSH
48341: LD_INT 3
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: LD_INT 1
48350: NEG
48351: PUSH
48352: LD_INT 2
48354: PUSH
48355: EMPTY
48356: LIST
48357: LIST
48358: PUSH
48359: EMPTY
48360: LIST
48361: LIST
48362: LIST
48363: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48364: LD_ADDR_VAR 0 45
48368: PUSH
48369: LD_INT 2
48371: NEG
48372: PUSH
48373: LD_INT 0
48375: PUSH
48376: EMPTY
48377: LIST
48378: LIST
48379: PUSH
48380: LD_INT 2
48382: NEG
48383: PUSH
48384: LD_INT 1
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: PUSH
48391: LD_INT 3
48393: NEG
48394: PUSH
48395: LD_INT 1
48397: NEG
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: LIST
48407: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
48408: LD_ADDR_VAR 0 46
48412: PUSH
48413: LD_INT 2
48415: NEG
48416: PUSH
48417: LD_INT 2
48419: NEG
48420: PUSH
48421: EMPTY
48422: LIST
48423: LIST
48424: PUSH
48425: LD_INT 2
48427: NEG
48428: PUSH
48429: LD_INT 3
48431: NEG
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: PUSH
48437: LD_INT 3
48439: NEG
48440: PUSH
48441: LD_INT 2
48443: NEG
48444: PUSH
48445: EMPTY
48446: LIST
48447: LIST
48448: PUSH
48449: EMPTY
48450: LIST
48451: LIST
48452: LIST
48453: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
48454: LD_ADDR_VAR 0 47
48458: PUSH
48459: LD_INT 2
48461: NEG
48462: PUSH
48463: LD_INT 3
48465: NEG
48466: PUSH
48467: EMPTY
48468: LIST
48469: LIST
48470: PUSH
48471: LD_INT 1
48473: NEG
48474: PUSH
48475: LD_INT 3
48477: NEG
48478: PUSH
48479: EMPTY
48480: LIST
48481: LIST
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48487: LD_ADDR_VAR 0 48
48491: PUSH
48492: LD_INT 1
48494: PUSH
48495: LD_INT 2
48497: NEG
48498: PUSH
48499: EMPTY
48500: LIST
48501: LIST
48502: PUSH
48503: LD_INT 2
48505: PUSH
48506: LD_INT 1
48508: NEG
48509: PUSH
48510: EMPTY
48511: LIST
48512: LIST
48513: PUSH
48514: EMPTY
48515: LIST
48516: LIST
48517: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
48518: LD_ADDR_VAR 0 49
48522: PUSH
48523: LD_INT 3
48525: PUSH
48526: LD_INT 1
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PUSH
48533: LD_INT 3
48535: PUSH
48536: LD_INT 2
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: EMPTY
48544: LIST
48545: LIST
48546: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
48547: LD_ADDR_VAR 0 50
48551: PUSH
48552: LD_INT 2
48554: PUSH
48555: LD_INT 3
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: PUSH
48562: LD_INT 1
48564: PUSH
48565: LD_INT 3
48567: PUSH
48568: EMPTY
48569: LIST
48570: LIST
48571: PUSH
48572: EMPTY
48573: LIST
48574: LIST
48575: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48576: LD_ADDR_VAR 0 51
48580: PUSH
48581: LD_INT 1
48583: NEG
48584: PUSH
48585: LD_INT 2
48587: PUSH
48588: EMPTY
48589: LIST
48590: LIST
48591: PUSH
48592: LD_INT 2
48594: NEG
48595: PUSH
48596: LD_INT 1
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: EMPTY
48604: LIST
48605: LIST
48606: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48607: LD_ADDR_VAR 0 52
48611: PUSH
48612: LD_INT 3
48614: NEG
48615: PUSH
48616: LD_INT 1
48618: NEG
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: LD_INT 3
48626: NEG
48627: PUSH
48628: LD_INT 2
48630: NEG
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48640: LD_ADDR_VAR 0 53
48644: PUSH
48645: LD_INT 1
48647: NEG
48648: PUSH
48649: LD_INT 3
48651: NEG
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: PUSH
48657: LD_INT 0
48659: PUSH
48660: LD_INT 3
48662: NEG
48663: PUSH
48664: EMPTY
48665: LIST
48666: LIST
48667: PUSH
48668: LD_INT 1
48670: PUSH
48671: LD_INT 2
48673: NEG
48674: PUSH
48675: EMPTY
48676: LIST
48677: LIST
48678: PUSH
48679: EMPTY
48680: LIST
48681: LIST
48682: LIST
48683: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48684: LD_ADDR_VAR 0 54
48688: PUSH
48689: LD_INT 2
48691: PUSH
48692: LD_INT 1
48694: NEG
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: PUSH
48700: LD_INT 3
48702: PUSH
48703: LD_INT 0
48705: PUSH
48706: EMPTY
48707: LIST
48708: LIST
48709: PUSH
48710: LD_INT 3
48712: PUSH
48713: LD_INT 1
48715: PUSH
48716: EMPTY
48717: LIST
48718: LIST
48719: PUSH
48720: EMPTY
48721: LIST
48722: LIST
48723: LIST
48724: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48725: LD_ADDR_VAR 0 55
48729: PUSH
48730: LD_INT 3
48732: PUSH
48733: LD_INT 2
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: PUSH
48740: LD_INT 3
48742: PUSH
48743: LD_INT 3
48745: PUSH
48746: EMPTY
48747: LIST
48748: LIST
48749: PUSH
48750: LD_INT 2
48752: PUSH
48753: LD_INT 3
48755: PUSH
48756: EMPTY
48757: LIST
48758: LIST
48759: PUSH
48760: EMPTY
48761: LIST
48762: LIST
48763: LIST
48764: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48765: LD_ADDR_VAR 0 56
48769: PUSH
48770: LD_INT 1
48772: PUSH
48773: LD_INT 3
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: PUSH
48780: LD_INT 0
48782: PUSH
48783: LD_INT 3
48785: PUSH
48786: EMPTY
48787: LIST
48788: LIST
48789: PUSH
48790: LD_INT 1
48792: NEG
48793: PUSH
48794: LD_INT 2
48796: PUSH
48797: EMPTY
48798: LIST
48799: LIST
48800: PUSH
48801: EMPTY
48802: LIST
48803: LIST
48804: LIST
48805: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48806: LD_ADDR_VAR 0 57
48810: PUSH
48811: LD_INT 2
48813: NEG
48814: PUSH
48815: LD_INT 1
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: PUSH
48822: LD_INT 3
48824: NEG
48825: PUSH
48826: LD_INT 0
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: PUSH
48833: LD_INT 3
48835: NEG
48836: PUSH
48837: LD_INT 1
48839: NEG
48840: PUSH
48841: EMPTY
48842: LIST
48843: LIST
48844: PUSH
48845: EMPTY
48846: LIST
48847: LIST
48848: LIST
48849: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48850: LD_ADDR_VAR 0 58
48854: PUSH
48855: LD_INT 2
48857: NEG
48858: PUSH
48859: LD_INT 3
48861: NEG
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: PUSH
48867: LD_INT 3
48869: NEG
48870: PUSH
48871: LD_INT 2
48873: NEG
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: PUSH
48879: LD_INT 3
48881: NEG
48882: PUSH
48883: LD_INT 3
48885: NEG
48886: PUSH
48887: EMPTY
48888: LIST
48889: LIST
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: LIST
48895: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
48896: LD_ADDR_VAR 0 59
48900: PUSH
48901: LD_INT 1
48903: NEG
48904: PUSH
48905: LD_INT 2
48907: NEG
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: PUSH
48913: LD_INT 0
48915: PUSH
48916: LD_INT 2
48918: NEG
48919: PUSH
48920: EMPTY
48921: LIST
48922: LIST
48923: PUSH
48924: LD_INT 1
48926: PUSH
48927: LD_INT 1
48929: NEG
48930: PUSH
48931: EMPTY
48932: LIST
48933: LIST
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: LIST
48939: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48940: LD_ADDR_VAR 0 60
48944: PUSH
48945: LD_INT 1
48947: PUSH
48948: LD_INT 1
48950: NEG
48951: PUSH
48952: EMPTY
48953: LIST
48954: LIST
48955: PUSH
48956: LD_INT 2
48958: PUSH
48959: LD_INT 0
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: PUSH
48966: LD_INT 2
48968: PUSH
48969: LD_INT 1
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: LIST
48980: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48981: LD_ADDR_VAR 0 61
48985: PUSH
48986: LD_INT 2
48988: PUSH
48989: LD_INT 1
48991: PUSH
48992: EMPTY
48993: LIST
48994: LIST
48995: PUSH
48996: LD_INT 2
48998: PUSH
48999: LD_INT 2
49001: PUSH
49002: EMPTY
49003: LIST
49004: LIST
49005: PUSH
49006: LD_INT 1
49008: PUSH
49009: LD_INT 2
49011: PUSH
49012: EMPTY
49013: LIST
49014: LIST
49015: PUSH
49016: EMPTY
49017: LIST
49018: LIST
49019: LIST
49020: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49021: LD_ADDR_VAR 0 62
49025: PUSH
49026: LD_INT 1
49028: PUSH
49029: LD_INT 2
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: LD_INT 0
49038: PUSH
49039: LD_INT 2
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PUSH
49046: LD_INT 1
49048: NEG
49049: PUSH
49050: LD_INT 1
49052: PUSH
49053: EMPTY
49054: LIST
49055: LIST
49056: PUSH
49057: EMPTY
49058: LIST
49059: LIST
49060: LIST
49061: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49062: LD_ADDR_VAR 0 63
49066: PUSH
49067: LD_INT 1
49069: NEG
49070: PUSH
49071: LD_INT 1
49073: PUSH
49074: EMPTY
49075: LIST
49076: LIST
49077: PUSH
49078: LD_INT 2
49080: NEG
49081: PUSH
49082: LD_INT 0
49084: PUSH
49085: EMPTY
49086: LIST
49087: LIST
49088: PUSH
49089: LD_INT 2
49091: NEG
49092: PUSH
49093: LD_INT 1
49095: NEG
49096: PUSH
49097: EMPTY
49098: LIST
49099: LIST
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: LIST
49105: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49106: LD_ADDR_VAR 0 64
49110: PUSH
49111: LD_INT 1
49113: NEG
49114: PUSH
49115: LD_INT 2
49117: NEG
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: LD_INT 2
49125: NEG
49126: PUSH
49127: LD_INT 1
49129: NEG
49130: PUSH
49131: EMPTY
49132: LIST
49133: LIST
49134: PUSH
49135: LD_INT 2
49137: NEG
49138: PUSH
49139: LD_INT 2
49141: NEG
49142: PUSH
49143: EMPTY
49144: LIST
49145: LIST
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: LIST
49151: ST_TO_ADDR
// end ; 2 :
49152: GO 52418
49154: LD_INT 2
49156: DOUBLE
49157: EQUAL
49158: IFTRUE 49162
49160: GO 52417
49162: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
49163: LD_ADDR_VAR 0 29
49167: PUSH
49168: LD_INT 4
49170: PUSH
49171: LD_INT 0
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: PUSH
49178: LD_INT 4
49180: PUSH
49181: LD_INT 1
49183: NEG
49184: PUSH
49185: EMPTY
49186: LIST
49187: LIST
49188: PUSH
49189: LD_INT 5
49191: PUSH
49192: LD_INT 0
49194: PUSH
49195: EMPTY
49196: LIST
49197: LIST
49198: PUSH
49199: LD_INT 5
49201: PUSH
49202: LD_INT 1
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: PUSH
49209: LD_INT 4
49211: PUSH
49212: LD_INT 1
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: PUSH
49219: LD_INT 3
49221: PUSH
49222: LD_INT 0
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: PUSH
49229: LD_INT 3
49231: PUSH
49232: LD_INT 1
49234: NEG
49235: PUSH
49236: EMPTY
49237: LIST
49238: LIST
49239: PUSH
49240: LD_INT 3
49242: PUSH
49243: LD_INT 2
49245: NEG
49246: PUSH
49247: EMPTY
49248: LIST
49249: LIST
49250: PUSH
49251: LD_INT 5
49253: PUSH
49254: LD_INT 2
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: PUSH
49261: LD_INT 3
49263: PUSH
49264: LD_INT 3
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: PUSH
49271: LD_INT 3
49273: PUSH
49274: LD_INT 2
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: PUSH
49281: LD_INT 4
49283: PUSH
49284: LD_INT 3
49286: PUSH
49287: EMPTY
49288: LIST
49289: LIST
49290: PUSH
49291: LD_INT 4
49293: PUSH
49294: LD_INT 4
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: PUSH
49301: LD_INT 3
49303: PUSH
49304: LD_INT 4
49306: PUSH
49307: EMPTY
49308: LIST
49309: LIST
49310: PUSH
49311: LD_INT 2
49313: PUSH
49314: LD_INT 3
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: PUSH
49321: LD_INT 2
49323: PUSH
49324: LD_INT 2
49326: PUSH
49327: EMPTY
49328: LIST
49329: LIST
49330: PUSH
49331: LD_INT 4
49333: PUSH
49334: LD_INT 2
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: PUSH
49341: LD_INT 2
49343: PUSH
49344: LD_INT 4
49346: PUSH
49347: EMPTY
49348: LIST
49349: LIST
49350: PUSH
49351: LD_INT 0
49353: PUSH
49354: LD_INT 4
49356: PUSH
49357: EMPTY
49358: LIST
49359: LIST
49360: PUSH
49361: LD_INT 0
49363: PUSH
49364: LD_INT 3
49366: PUSH
49367: EMPTY
49368: LIST
49369: LIST
49370: PUSH
49371: LD_INT 1
49373: PUSH
49374: LD_INT 4
49376: PUSH
49377: EMPTY
49378: LIST
49379: LIST
49380: PUSH
49381: LD_INT 1
49383: PUSH
49384: LD_INT 5
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: PUSH
49391: LD_INT 0
49393: PUSH
49394: LD_INT 5
49396: PUSH
49397: EMPTY
49398: LIST
49399: LIST
49400: PUSH
49401: LD_INT 1
49403: NEG
49404: PUSH
49405: LD_INT 4
49407: PUSH
49408: EMPTY
49409: LIST
49410: LIST
49411: PUSH
49412: LD_INT 1
49414: NEG
49415: PUSH
49416: LD_INT 3
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: PUSH
49423: LD_INT 2
49425: PUSH
49426: LD_INT 5
49428: PUSH
49429: EMPTY
49430: LIST
49431: LIST
49432: PUSH
49433: LD_INT 2
49435: NEG
49436: PUSH
49437: LD_INT 3
49439: PUSH
49440: EMPTY
49441: LIST
49442: LIST
49443: PUSH
49444: LD_INT 3
49446: NEG
49447: PUSH
49448: LD_INT 0
49450: PUSH
49451: EMPTY
49452: LIST
49453: LIST
49454: PUSH
49455: LD_INT 3
49457: NEG
49458: PUSH
49459: LD_INT 1
49461: NEG
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: PUSH
49467: LD_INT 2
49469: NEG
49470: PUSH
49471: LD_INT 0
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: PUSH
49478: LD_INT 2
49480: NEG
49481: PUSH
49482: LD_INT 1
49484: PUSH
49485: EMPTY
49486: LIST
49487: LIST
49488: PUSH
49489: LD_INT 3
49491: NEG
49492: PUSH
49493: LD_INT 1
49495: PUSH
49496: EMPTY
49497: LIST
49498: LIST
49499: PUSH
49500: LD_INT 4
49502: NEG
49503: PUSH
49504: LD_INT 0
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: PUSH
49511: LD_INT 4
49513: NEG
49514: PUSH
49515: LD_INT 1
49517: NEG
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: PUSH
49523: LD_INT 4
49525: NEG
49526: PUSH
49527: LD_INT 2
49529: NEG
49530: PUSH
49531: EMPTY
49532: LIST
49533: LIST
49534: PUSH
49535: LD_INT 2
49537: NEG
49538: PUSH
49539: LD_INT 2
49541: PUSH
49542: EMPTY
49543: LIST
49544: LIST
49545: PUSH
49546: LD_INT 4
49548: NEG
49549: PUSH
49550: LD_INT 4
49552: NEG
49553: PUSH
49554: EMPTY
49555: LIST
49556: LIST
49557: PUSH
49558: LD_INT 4
49560: NEG
49561: PUSH
49562: LD_INT 5
49564: NEG
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: PUSH
49570: LD_INT 3
49572: NEG
49573: PUSH
49574: LD_INT 4
49576: NEG
49577: PUSH
49578: EMPTY
49579: LIST
49580: LIST
49581: PUSH
49582: LD_INT 3
49584: NEG
49585: PUSH
49586: LD_INT 3
49588: NEG
49589: PUSH
49590: EMPTY
49591: LIST
49592: LIST
49593: PUSH
49594: LD_INT 4
49596: NEG
49597: PUSH
49598: LD_INT 3
49600: NEG
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: PUSH
49606: LD_INT 5
49608: NEG
49609: PUSH
49610: LD_INT 4
49612: NEG
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: PUSH
49618: LD_INT 5
49620: NEG
49621: PUSH
49622: LD_INT 5
49624: NEG
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: LD_INT 3
49632: NEG
49633: PUSH
49634: LD_INT 5
49636: NEG
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 5
49644: NEG
49645: PUSH
49646: LD_INT 3
49648: NEG
49649: PUSH
49650: EMPTY
49651: LIST
49652: LIST
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: LIST
49658: LIST
49659: LIST
49660: LIST
49661: LIST
49662: LIST
49663: LIST
49664: LIST
49665: LIST
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: LIST
49676: LIST
49677: LIST
49678: LIST
49679: LIST
49680: LIST
49681: LIST
49682: LIST
49683: LIST
49684: LIST
49685: LIST
49686: LIST
49687: LIST
49688: LIST
49689: LIST
49690: LIST
49691: LIST
49692: LIST
49693: LIST
49694: LIST
49695: LIST
49696: LIST
49697: LIST
49698: LIST
49699: LIST
49700: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
49701: LD_ADDR_VAR 0 30
49705: PUSH
49706: LD_INT 4
49708: PUSH
49709: LD_INT 4
49711: PUSH
49712: EMPTY
49713: LIST
49714: LIST
49715: PUSH
49716: LD_INT 4
49718: PUSH
49719: LD_INT 3
49721: PUSH
49722: EMPTY
49723: LIST
49724: LIST
49725: PUSH
49726: LD_INT 5
49728: PUSH
49729: LD_INT 4
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: PUSH
49736: LD_INT 5
49738: PUSH
49739: LD_INT 5
49741: PUSH
49742: EMPTY
49743: LIST
49744: LIST
49745: PUSH
49746: LD_INT 4
49748: PUSH
49749: LD_INT 5
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: PUSH
49756: LD_INT 3
49758: PUSH
49759: LD_INT 4
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PUSH
49766: LD_INT 3
49768: PUSH
49769: LD_INT 3
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: PUSH
49776: LD_INT 5
49778: PUSH
49779: LD_INT 3
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: LD_INT 3
49788: PUSH
49789: LD_INT 5
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: LD_INT 0
49798: PUSH
49799: LD_INT 3
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: PUSH
49806: LD_INT 0
49808: PUSH
49809: LD_INT 2
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: PUSH
49816: LD_INT 1
49818: PUSH
49819: LD_INT 3
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: PUSH
49826: LD_INT 1
49828: PUSH
49829: LD_INT 4
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: PUSH
49836: LD_INT 0
49838: PUSH
49839: LD_INT 4
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: PUSH
49846: LD_INT 1
49848: NEG
49849: PUSH
49850: LD_INT 3
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: PUSH
49857: LD_INT 1
49859: NEG
49860: PUSH
49861: LD_INT 2
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: PUSH
49868: LD_INT 2
49870: PUSH
49871: LD_INT 4
49873: PUSH
49874: EMPTY
49875: LIST
49876: LIST
49877: PUSH
49878: LD_INT 2
49880: NEG
49881: PUSH
49882: LD_INT 2
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: PUSH
49889: LD_INT 4
49891: NEG
49892: PUSH
49893: LD_INT 0
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: PUSH
49900: LD_INT 4
49902: NEG
49903: PUSH
49904: LD_INT 1
49906: NEG
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: PUSH
49912: LD_INT 3
49914: NEG
49915: PUSH
49916: LD_INT 0
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: PUSH
49923: LD_INT 3
49925: NEG
49926: PUSH
49927: LD_INT 1
49929: PUSH
49930: EMPTY
49931: LIST
49932: LIST
49933: PUSH
49934: LD_INT 4
49936: NEG
49937: PUSH
49938: LD_INT 1
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: PUSH
49945: LD_INT 5
49947: NEG
49948: PUSH
49949: LD_INT 0
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: PUSH
49956: LD_INT 5
49958: NEG
49959: PUSH
49960: LD_INT 1
49962: NEG
49963: PUSH
49964: EMPTY
49965: LIST
49966: LIST
49967: PUSH
49968: LD_INT 5
49970: NEG
49971: PUSH
49972: LD_INT 2
49974: NEG
49975: PUSH
49976: EMPTY
49977: LIST
49978: LIST
49979: PUSH
49980: LD_INT 3
49982: NEG
49983: PUSH
49984: LD_INT 2
49986: PUSH
49987: EMPTY
49988: LIST
49989: LIST
49990: PUSH
49991: LD_INT 3
49993: NEG
49994: PUSH
49995: LD_INT 3
49997: NEG
49998: PUSH
49999: EMPTY
50000: LIST
50001: LIST
50002: PUSH
50003: LD_INT 3
50005: NEG
50006: PUSH
50007: LD_INT 4
50009: NEG
50010: PUSH
50011: EMPTY
50012: LIST
50013: LIST
50014: PUSH
50015: LD_INT 2
50017: NEG
50018: PUSH
50019: LD_INT 3
50021: NEG
50022: PUSH
50023: EMPTY
50024: LIST
50025: LIST
50026: PUSH
50027: LD_INT 2
50029: NEG
50030: PUSH
50031: LD_INT 2
50033: NEG
50034: PUSH
50035: EMPTY
50036: LIST
50037: LIST
50038: PUSH
50039: LD_INT 3
50041: NEG
50042: PUSH
50043: LD_INT 2
50045: NEG
50046: PUSH
50047: EMPTY
50048: LIST
50049: LIST
50050: PUSH
50051: LD_INT 4
50053: NEG
50054: PUSH
50055: LD_INT 3
50057: NEG
50058: PUSH
50059: EMPTY
50060: LIST
50061: LIST
50062: PUSH
50063: LD_INT 4
50065: NEG
50066: PUSH
50067: LD_INT 4
50069: NEG
50070: PUSH
50071: EMPTY
50072: LIST
50073: LIST
50074: PUSH
50075: LD_INT 2
50077: NEG
50078: PUSH
50079: LD_INT 4
50081: NEG
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: PUSH
50087: LD_INT 4
50089: NEG
50090: PUSH
50091: LD_INT 2
50093: NEG
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: PUSH
50099: LD_INT 0
50101: PUSH
50102: LD_INT 4
50104: NEG
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: LD_INT 0
50112: PUSH
50113: LD_INT 5
50115: NEG
50116: PUSH
50117: EMPTY
50118: LIST
50119: LIST
50120: PUSH
50121: LD_INT 1
50123: PUSH
50124: LD_INT 4
50126: NEG
50127: PUSH
50128: EMPTY
50129: LIST
50130: LIST
50131: PUSH
50132: LD_INT 1
50134: PUSH
50135: LD_INT 3
50137: NEG
50138: PUSH
50139: EMPTY
50140: LIST
50141: LIST
50142: PUSH
50143: LD_INT 0
50145: PUSH
50146: LD_INT 3
50148: NEG
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: PUSH
50154: LD_INT 1
50156: NEG
50157: PUSH
50158: LD_INT 4
50160: NEG
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: PUSH
50166: LD_INT 1
50168: NEG
50169: PUSH
50170: LD_INT 5
50172: NEG
50173: PUSH
50174: EMPTY
50175: LIST
50176: LIST
50177: PUSH
50178: LD_INT 2
50180: PUSH
50181: LD_INT 3
50183: NEG
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: PUSH
50189: LD_INT 2
50191: NEG
50192: PUSH
50193: LD_INT 5
50195: NEG
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: LIST
50209: LIST
50210: LIST
50211: LIST
50212: LIST
50213: LIST
50214: LIST
50215: LIST
50216: LIST
50217: LIST
50218: LIST
50219: LIST
50220: LIST
50221: LIST
50222: LIST
50223: LIST
50224: LIST
50225: LIST
50226: LIST
50227: LIST
50228: LIST
50229: LIST
50230: LIST
50231: LIST
50232: LIST
50233: LIST
50234: LIST
50235: LIST
50236: LIST
50237: LIST
50238: LIST
50239: LIST
50240: LIST
50241: LIST
50242: LIST
50243: LIST
50244: LIST
50245: LIST
50246: LIST
50247: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
50248: LD_ADDR_VAR 0 31
50252: PUSH
50253: LD_INT 0
50255: PUSH
50256: LD_INT 4
50258: PUSH
50259: EMPTY
50260: LIST
50261: LIST
50262: PUSH
50263: LD_INT 0
50265: PUSH
50266: LD_INT 3
50268: PUSH
50269: EMPTY
50270: LIST
50271: LIST
50272: PUSH
50273: LD_INT 1
50275: PUSH
50276: LD_INT 4
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: PUSH
50283: LD_INT 1
50285: PUSH
50286: LD_INT 5
50288: PUSH
50289: EMPTY
50290: LIST
50291: LIST
50292: PUSH
50293: LD_INT 0
50295: PUSH
50296: LD_INT 5
50298: PUSH
50299: EMPTY
50300: LIST
50301: LIST
50302: PUSH
50303: LD_INT 1
50305: NEG
50306: PUSH
50307: LD_INT 4
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: PUSH
50314: LD_INT 1
50316: NEG
50317: PUSH
50318: LD_INT 3
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PUSH
50325: LD_INT 2
50327: PUSH
50328: LD_INT 5
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PUSH
50335: LD_INT 2
50337: NEG
50338: PUSH
50339: LD_INT 3
50341: PUSH
50342: EMPTY
50343: LIST
50344: LIST
50345: PUSH
50346: LD_INT 3
50348: NEG
50349: PUSH
50350: LD_INT 0
50352: PUSH
50353: EMPTY
50354: LIST
50355: LIST
50356: PUSH
50357: LD_INT 3
50359: NEG
50360: PUSH
50361: LD_INT 1
50363: NEG
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: LD_INT 2
50371: NEG
50372: PUSH
50373: LD_INT 0
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PUSH
50380: LD_INT 2
50382: NEG
50383: PUSH
50384: LD_INT 1
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: PUSH
50391: LD_INT 3
50393: NEG
50394: PUSH
50395: LD_INT 1
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: PUSH
50402: LD_INT 4
50404: NEG
50405: PUSH
50406: LD_INT 0
50408: PUSH
50409: EMPTY
50410: LIST
50411: LIST
50412: PUSH
50413: LD_INT 4
50415: NEG
50416: PUSH
50417: LD_INT 1
50419: NEG
50420: PUSH
50421: EMPTY
50422: LIST
50423: LIST
50424: PUSH
50425: LD_INT 4
50427: NEG
50428: PUSH
50429: LD_INT 2
50431: NEG
50432: PUSH
50433: EMPTY
50434: LIST
50435: LIST
50436: PUSH
50437: LD_INT 2
50439: NEG
50440: PUSH
50441: LD_INT 2
50443: PUSH
50444: EMPTY
50445: LIST
50446: LIST
50447: PUSH
50448: LD_INT 4
50450: NEG
50451: PUSH
50452: LD_INT 4
50454: NEG
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: PUSH
50460: LD_INT 4
50462: NEG
50463: PUSH
50464: LD_INT 5
50466: NEG
50467: PUSH
50468: EMPTY
50469: LIST
50470: LIST
50471: PUSH
50472: LD_INT 3
50474: NEG
50475: PUSH
50476: LD_INT 4
50478: NEG
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: PUSH
50484: LD_INT 3
50486: NEG
50487: PUSH
50488: LD_INT 3
50490: NEG
50491: PUSH
50492: EMPTY
50493: LIST
50494: LIST
50495: PUSH
50496: LD_INT 4
50498: NEG
50499: PUSH
50500: LD_INT 3
50502: NEG
50503: PUSH
50504: EMPTY
50505: LIST
50506: LIST
50507: PUSH
50508: LD_INT 5
50510: NEG
50511: PUSH
50512: LD_INT 4
50514: NEG
50515: PUSH
50516: EMPTY
50517: LIST
50518: LIST
50519: PUSH
50520: LD_INT 5
50522: NEG
50523: PUSH
50524: LD_INT 5
50526: NEG
50527: PUSH
50528: EMPTY
50529: LIST
50530: LIST
50531: PUSH
50532: LD_INT 3
50534: NEG
50535: PUSH
50536: LD_INT 5
50538: NEG
50539: PUSH
50540: EMPTY
50541: LIST
50542: LIST
50543: PUSH
50544: LD_INT 5
50546: NEG
50547: PUSH
50548: LD_INT 3
50550: NEG
50551: PUSH
50552: EMPTY
50553: LIST
50554: LIST
50555: PUSH
50556: LD_INT 0
50558: PUSH
50559: LD_INT 3
50561: NEG
50562: PUSH
50563: EMPTY
50564: LIST
50565: LIST
50566: PUSH
50567: LD_INT 0
50569: PUSH
50570: LD_INT 4
50572: NEG
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: PUSH
50578: LD_INT 1
50580: PUSH
50581: LD_INT 3
50583: NEG
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: PUSH
50589: LD_INT 1
50591: PUSH
50592: LD_INT 2
50594: NEG
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: PUSH
50600: LD_INT 0
50602: PUSH
50603: LD_INT 2
50605: NEG
50606: PUSH
50607: EMPTY
50608: LIST
50609: LIST
50610: PUSH
50611: LD_INT 1
50613: NEG
50614: PUSH
50615: LD_INT 3
50617: NEG
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: PUSH
50623: LD_INT 1
50625: NEG
50626: PUSH
50627: LD_INT 4
50629: NEG
50630: PUSH
50631: EMPTY
50632: LIST
50633: LIST
50634: PUSH
50635: LD_INT 2
50637: PUSH
50638: LD_INT 2
50640: NEG
50641: PUSH
50642: EMPTY
50643: LIST
50644: LIST
50645: PUSH
50646: LD_INT 2
50648: NEG
50649: PUSH
50650: LD_INT 4
50652: NEG
50653: PUSH
50654: EMPTY
50655: LIST
50656: LIST
50657: PUSH
50658: LD_INT 4
50660: PUSH
50661: LD_INT 0
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: PUSH
50668: LD_INT 4
50670: PUSH
50671: LD_INT 1
50673: NEG
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: PUSH
50679: LD_INT 5
50681: PUSH
50682: LD_INT 0
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: PUSH
50689: LD_INT 5
50691: PUSH
50692: LD_INT 1
50694: PUSH
50695: EMPTY
50696: LIST
50697: LIST
50698: PUSH
50699: LD_INT 4
50701: PUSH
50702: LD_INT 1
50704: PUSH
50705: EMPTY
50706: LIST
50707: LIST
50708: PUSH
50709: LD_INT 3
50711: PUSH
50712: LD_INT 0
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: PUSH
50719: LD_INT 3
50721: PUSH
50722: LD_INT 1
50724: NEG
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: LD_INT 3
50732: PUSH
50733: LD_INT 2
50735: NEG
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: LD_INT 5
50743: PUSH
50744: LD_INT 2
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: LIST
50755: LIST
50756: LIST
50757: LIST
50758: LIST
50759: LIST
50760: LIST
50761: LIST
50762: LIST
50763: LIST
50764: LIST
50765: LIST
50766: LIST
50767: LIST
50768: LIST
50769: LIST
50770: LIST
50771: LIST
50772: LIST
50773: LIST
50774: LIST
50775: LIST
50776: LIST
50777: LIST
50778: LIST
50779: LIST
50780: LIST
50781: LIST
50782: LIST
50783: LIST
50784: LIST
50785: LIST
50786: LIST
50787: LIST
50788: LIST
50789: LIST
50790: LIST
50791: LIST
50792: LIST
50793: LIST
50794: LIST
50795: LIST
50796: LIST
50797: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
50798: LD_ADDR_VAR 0 32
50802: PUSH
50803: LD_INT 4
50805: NEG
50806: PUSH
50807: LD_INT 0
50809: PUSH
50810: EMPTY
50811: LIST
50812: LIST
50813: PUSH
50814: LD_INT 4
50816: NEG
50817: PUSH
50818: LD_INT 1
50820: NEG
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: PUSH
50826: LD_INT 3
50828: NEG
50829: PUSH
50830: LD_INT 0
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: PUSH
50837: LD_INT 3
50839: NEG
50840: PUSH
50841: LD_INT 1
50843: PUSH
50844: EMPTY
50845: LIST
50846: LIST
50847: PUSH
50848: LD_INT 4
50850: NEG
50851: PUSH
50852: LD_INT 1
50854: PUSH
50855: EMPTY
50856: LIST
50857: LIST
50858: PUSH
50859: LD_INT 5
50861: NEG
50862: PUSH
50863: LD_INT 0
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: PUSH
50870: LD_INT 5
50872: NEG
50873: PUSH
50874: LD_INT 1
50876: NEG
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: PUSH
50882: LD_INT 5
50884: NEG
50885: PUSH
50886: LD_INT 2
50888: NEG
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: PUSH
50894: LD_INT 3
50896: NEG
50897: PUSH
50898: LD_INT 2
50900: PUSH
50901: EMPTY
50902: LIST
50903: LIST
50904: PUSH
50905: LD_INT 3
50907: NEG
50908: PUSH
50909: LD_INT 3
50911: NEG
50912: PUSH
50913: EMPTY
50914: LIST
50915: LIST
50916: PUSH
50917: LD_INT 3
50919: NEG
50920: PUSH
50921: LD_INT 4
50923: NEG
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: PUSH
50929: LD_INT 2
50931: NEG
50932: PUSH
50933: LD_INT 3
50935: NEG
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: PUSH
50941: LD_INT 2
50943: NEG
50944: PUSH
50945: LD_INT 2
50947: NEG
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: PUSH
50953: LD_INT 3
50955: NEG
50956: PUSH
50957: LD_INT 2
50959: NEG
50960: PUSH
50961: EMPTY
50962: LIST
50963: LIST
50964: PUSH
50965: LD_INT 4
50967: NEG
50968: PUSH
50969: LD_INT 3
50971: NEG
50972: PUSH
50973: EMPTY
50974: LIST
50975: LIST
50976: PUSH
50977: LD_INT 4
50979: NEG
50980: PUSH
50981: LD_INT 4
50983: NEG
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: PUSH
50989: LD_INT 2
50991: NEG
50992: PUSH
50993: LD_INT 4
50995: NEG
50996: PUSH
50997: EMPTY
50998: LIST
50999: LIST
51000: PUSH
51001: LD_INT 4
51003: NEG
51004: PUSH
51005: LD_INT 2
51007: NEG
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: PUSH
51013: LD_INT 0
51015: PUSH
51016: LD_INT 4
51018: NEG
51019: PUSH
51020: EMPTY
51021: LIST
51022: LIST
51023: PUSH
51024: LD_INT 0
51026: PUSH
51027: LD_INT 5
51029: NEG
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: PUSH
51035: LD_INT 1
51037: PUSH
51038: LD_INT 4
51040: NEG
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: LD_INT 1
51048: PUSH
51049: LD_INT 3
51051: NEG
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: PUSH
51057: LD_INT 0
51059: PUSH
51060: LD_INT 3
51062: NEG
51063: PUSH
51064: EMPTY
51065: LIST
51066: LIST
51067: PUSH
51068: LD_INT 1
51070: NEG
51071: PUSH
51072: LD_INT 4
51074: NEG
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: PUSH
51080: LD_INT 1
51082: NEG
51083: PUSH
51084: LD_INT 5
51086: NEG
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: PUSH
51092: LD_INT 2
51094: PUSH
51095: LD_INT 3
51097: NEG
51098: PUSH
51099: EMPTY
51100: LIST
51101: LIST
51102: PUSH
51103: LD_INT 2
51105: NEG
51106: PUSH
51107: LD_INT 5
51109: NEG
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: PUSH
51115: LD_INT 3
51117: PUSH
51118: LD_INT 0
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: PUSH
51125: LD_INT 3
51127: PUSH
51128: LD_INT 1
51130: NEG
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: LD_INT 4
51138: PUSH
51139: LD_INT 0
51141: PUSH
51142: EMPTY
51143: LIST
51144: LIST
51145: PUSH
51146: LD_INT 4
51148: PUSH
51149: LD_INT 1
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: PUSH
51156: LD_INT 3
51158: PUSH
51159: LD_INT 1
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: PUSH
51166: LD_INT 2
51168: PUSH
51169: LD_INT 0
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: LD_INT 2
51178: PUSH
51179: LD_INT 1
51181: NEG
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: PUSH
51187: LD_INT 2
51189: PUSH
51190: LD_INT 2
51192: NEG
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: LD_INT 4
51200: PUSH
51201: LD_INT 2
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: LD_INT 4
51210: PUSH
51211: LD_INT 4
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: PUSH
51218: LD_INT 4
51220: PUSH
51221: LD_INT 3
51223: PUSH
51224: EMPTY
51225: LIST
51226: LIST
51227: PUSH
51228: LD_INT 5
51230: PUSH
51231: LD_INT 4
51233: PUSH
51234: EMPTY
51235: LIST
51236: LIST
51237: PUSH
51238: LD_INT 5
51240: PUSH
51241: LD_INT 5
51243: PUSH
51244: EMPTY
51245: LIST
51246: LIST
51247: PUSH
51248: LD_INT 4
51250: PUSH
51251: LD_INT 5
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: LD_INT 3
51260: PUSH
51261: LD_INT 4
51263: PUSH
51264: EMPTY
51265: LIST
51266: LIST
51267: PUSH
51268: LD_INT 3
51270: PUSH
51271: LD_INT 3
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: PUSH
51278: LD_INT 5
51280: PUSH
51281: LD_INT 3
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: PUSH
51288: LD_INT 3
51290: PUSH
51291: LD_INT 5
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: LIST
51302: LIST
51303: LIST
51304: LIST
51305: LIST
51306: LIST
51307: LIST
51308: LIST
51309: LIST
51310: LIST
51311: LIST
51312: LIST
51313: LIST
51314: LIST
51315: LIST
51316: LIST
51317: LIST
51318: LIST
51319: LIST
51320: LIST
51321: LIST
51322: LIST
51323: LIST
51324: LIST
51325: LIST
51326: LIST
51327: LIST
51328: LIST
51329: LIST
51330: LIST
51331: LIST
51332: LIST
51333: LIST
51334: LIST
51335: LIST
51336: LIST
51337: LIST
51338: LIST
51339: LIST
51340: LIST
51341: LIST
51342: LIST
51343: LIST
51344: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
51345: LD_ADDR_VAR 0 33
51349: PUSH
51350: LD_INT 4
51352: NEG
51353: PUSH
51354: LD_INT 4
51356: NEG
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: PUSH
51362: LD_INT 4
51364: NEG
51365: PUSH
51366: LD_INT 5
51368: NEG
51369: PUSH
51370: EMPTY
51371: LIST
51372: LIST
51373: PUSH
51374: LD_INT 3
51376: NEG
51377: PUSH
51378: LD_INT 4
51380: NEG
51381: PUSH
51382: EMPTY
51383: LIST
51384: LIST
51385: PUSH
51386: LD_INT 3
51388: NEG
51389: PUSH
51390: LD_INT 3
51392: NEG
51393: PUSH
51394: EMPTY
51395: LIST
51396: LIST
51397: PUSH
51398: LD_INT 4
51400: NEG
51401: PUSH
51402: LD_INT 3
51404: NEG
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: LD_INT 5
51412: NEG
51413: PUSH
51414: LD_INT 4
51416: NEG
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: PUSH
51422: LD_INT 5
51424: NEG
51425: PUSH
51426: LD_INT 5
51428: NEG
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: PUSH
51434: LD_INT 3
51436: NEG
51437: PUSH
51438: LD_INT 5
51440: NEG
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: PUSH
51446: LD_INT 5
51448: NEG
51449: PUSH
51450: LD_INT 3
51452: NEG
51453: PUSH
51454: EMPTY
51455: LIST
51456: LIST
51457: PUSH
51458: LD_INT 0
51460: PUSH
51461: LD_INT 3
51463: NEG
51464: PUSH
51465: EMPTY
51466: LIST
51467: LIST
51468: PUSH
51469: LD_INT 0
51471: PUSH
51472: LD_INT 4
51474: NEG
51475: PUSH
51476: EMPTY
51477: LIST
51478: LIST
51479: PUSH
51480: LD_INT 1
51482: PUSH
51483: LD_INT 3
51485: NEG
51486: PUSH
51487: EMPTY
51488: LIST
51489: LIST
51490: PUSH
51491: LD_INT 1
51493: PUSH
51494: LD_INT 2
51496: NEG
51497: PUSH
51498: EMPTY
51499: LIST
51500: LIST
51501: PUSH
51502: LD_INT 0
51504: PUSH
51505: LD_INT 2
51507: NEG
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: PUSH
51513: LD_INT 1
51515: NEG
51516: PUSH
51517: LD_INT 3
51519: NEG
51520: PUSH
51521: EMPTY
51522: LIST
51523: LIST
51524: PUSH
51525: LD_INT 1
51527: NEG
51528: PUSH
51529: LD_INT 4
51531: NEG
51532: PUSH
51533: EMPTY
51534: LIST
51535: LIST
51536: PUSH
51537: LD_INT 2
51539: PUSH
51540: LD_INT 2
51542: NEG
51543: PUSH
51544: EMPTY
51545: LIST
51546: LIST
51547: PUSH
51548: LD_INT 2
51550: NEG
51551: PUSH
51552: LD_INT 4
51554: NEG
51555: PUSH
51556: EMPTY
51557: LIST
51558: LIST
51559: PUSH
51560: LD_INT 4
51562: PUSH
51563: LD_INT 0
51565: PUSH
51566: EMPTY
51567: LIST
51568: LIST
51569: PUSH
51570: LD_INT 4
51572: PUSH
51573: LD_INT 1
51575: NEG
51576: PUSH
51577: EMPTY
51578: LIST
51579: LIST
51580: PUSH
51581: LD_INT 5
51583: PUSH
51584: LD_INT 0
51586: PUSH
51587: EMPTY
51588: LIST
51589: LIST
51590: PUSH
51591: LD_INT 5
51593: PUSH
51594: LD_INT 1
51596: PUSH
51597: EMPTY
51598: LIST
51599: LIST
51600: PUSH
51601: LD_INT 4
51603: PUSH
51604: LD_INT 1
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: LD_INT 3
51613: PUSH
51614: LD_INT 0
51616: PUSH
51617: EMPTY
51618: LIST
51619: LIST
51620: PUSH
51621: LD_INT 3
51623: PUSH
51624: LD_INT 1
51626: NEG
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: LD_INT 3
51634: PUSH
51635: LD_INT 2
51637: NEG
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PUSH
51643: LD_INT 5
51645: PUSH
51646: LD_INT 2
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: PUSH
51653: LD_INT 3
51655: PUSH
51656: LD_INT 3
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: PUSH
51663: LD_INT 3
51665: PUSH
51666: LD_INT 2
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: LD_INT 4
51675: PUSH
51676: LD_INT 3
51678: PUSH
51679: EMPTY
51680: LIST
51681: LIST
51682: PUSH
51683: LD_INT 4
51685: PUSH
51686: LD_INT 4
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: PUSH
51693: LD_INT 3
51695: PUSH
51696: LD_INT 4
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: PUSH
51703: LD_INT 2
51705: PUSH
51706: LD_INT 3
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: PUSH
51713: LD_INT 2
51715: PUSH
51716: LD_INT 2
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: LD_INT 4
51725: PUSH
51726: LD_INT 2
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: PUSH
51733: LD_INT 2
51735: PUSH
51736: LD_INT 4
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: LD_INT 0
51745: PUSH
51746: LD_INT 4
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: PUSH
51753: LD_INT 0
51755: PUSH
51756: LD_INT 3
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: PUSH
51763: LD_INT 1
51765: PUSH
51766: LD_INT 4
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: PUSH
51773: LD_INT 1
51775: PUSH
51776: LD_INT 5
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: PUSH
51783: LD_INT 0
51785: PUSH
51786: LD_INT 5
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: PUSH
51793: LD_INT 1
51795: NEG
51796: PUSH
51797: LD_INT 4
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: PUSH
51804: LD_INT 1
51806: NEG
51807: PUSH
51808: LD_INT 3
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: PUSH
51815: LD_INT 2
51817: PUSH
51818: LD_INT 5
51820: PUSH
51821: EMPTY
51822: LIST
51823: LIST
51824: PUSH
51825: LD_INT 2
51827: NEG
51828: PUSH
51829: LD_INT 3
51831: PUSH
51832: EMPTY
51833: LIST
51834: LIST
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: LIST
51840: LIST
51841: LIST
51842: LIST
51843: LIST
51844: LIST
51845: LIST
51846: LIST
51847: LIST
51848: LIST
51849: LIST
51850: LIST
51851: LIST
51852: LIST
51853: LIST
51854: LIST
51855: LIST
51856: LIST
51857: LIST
51858: LIST
51859: LIST
51860: LIST
51861: LIST
51862: LIST
51863: LIST
51864: LIST
51865: LIST
51866: LIST
51867: LIST
51868: LIST
51869: LIST
51870: LIST
51871: LIST
51872: LIST
51873: LIST
51874: LIST
51875: LIST
51876: LIST
51877: LIST
51878: LIST
51879: LIST
51880: LIST
51881: LIST
51882: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
51883: LD_ADDR_VAR 0 34
51887: PUSH
51888: LD_INT 0
51890: PUSH
51891: LD_INT 4
51893: NEG
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: PUSH
51899: LD_INT 0
51901: PUSH
51902: LD_INT 5
51904: NEG
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: PUSH
51910: LD_INT 1
51912: PUSH
51913: LD_INT 4
51915: NEG
51916: PUSH
51917: EMPTY
51918: LIST
51919: LIST
51920: PUSH
51921: LD_INT 1
51923: PUSH
51924: LD_INT 3
51926: NEG
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: PUSH
51932: LD_INT 0
51934: PUSH
51935: LD_INT 3
51937: NEG
51938: PUSH
51939: EMPTY
51940: LIST
51941: LIST
51942: PUSH
51943: LD_INT 1
51945: NEG
51946: PUSH
51947: LD_INT 4
51949: NEG
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: PUSH
51955: LD_INT 1
51957: NEG
51958: PUSH
51959: LD_INT 5
51961: NEG
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: PUSH
51967: LD_INT 2
51969: PUSH
51970: LD_INT 3
51972: NEG
51973: PUSH
51974: EMPTY
51975: LIST
51976: LIST
51977: PUSH
51978: LD_INT 2
51980: NEG
51981: PUSH
51982: LD_INT 5
51984: NEG
51985: PUSH
51986: EMPTY
51987: LIST
51988: LIST
51989: PUSH
51990: LD_INT 3
51992: PUSH
51993: LD_INT 0
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: PUSH
52000: LD_INT 3
52002: PUSH
52003: LD_INT 1
52005: NEG
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PUSH
52011: LD_INT 4
52013: PUSH
52014: LD_INT 0
52016: PUSH
52017: EMPTY
52018: LIST
52019: LIST
52020: PUSH
52021: LD_INT 4
52023: PUSH
52024: LD_INT 1
52026: PUSH
52027: EMPTY
52028: LIST
52029: LIST
52030: PUSH
52031: LD_INT 3
52033: PUSH
52034: LD_INT 1
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: PUSH
52041: LD_INT 2
52043: PUSH
52044: LD_INT 0
52046: PUSH
52047: EMPTY
52048: LIST
52049: LIST
52050: PUSH
52051: LD_INT 2
52053: PUSH
52054: LD_INT 1
52056: NEG
52057: PUSH
52058: EMPTY
52059: LIST
52060: LIST
52061: PUSH
52062: LD_INT 2
52064: PUSH
52065: LD_INT 2
52067: NEG
52068: PUSH
52069: EMPTY
52070: LIST
52071: LIST
52072: PUSH
52073: LD_INT 4
52075: PUSH
52076: LD_INT 2
52078: PUSH
52079: EMPTY
52080: LIST
52081: LIST
52082: PUSH
52083: LD_INT 4
52085: PUSH
52086: LD_INT 4
52088: PUSH
52089: EMPTY
52090: LIST
52091: LIST
52092: PUSH
52093: LD_INT 4
52095: PUSH
52096: LD_INT 3
52098: PUSH
52099: EMPTY
52100: LIST
52101: LIST
52102: PUSH
52103: LD_INT 5
52105: PUSH
52106: LD_INT 4
52108: PUSH
52109: EMPTY
52110: LIST
52111: LIST
52112: PUSH
52113: LD_INT 5
52115: PUSH
52116: LD_INT 5
52118: PUSH
52119: EMPTY
52120: LIST
52121: LIST
52122: PUSH
52123: LD_INT 4
52125: PUSH
52126: LD_INT 5
52128: PUSH
52129: EMPTY
52130: LIST
52131: LIST
52132: PUSH
52133: LD_INT 3
52135: PUSH
52136: LD_INT 4
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: PUSH
52143: LD_INT 3
52145: PUSH
52146: LD_INT 3
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: PUSH
52153: LD_INT 5
52155: PUSH
52156: LD_INT 3
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: PUSH
52163: LD_INT 3
52165: PUSH
52166: LD_INT 5
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: PUSH
52173: LD_INT 0
52175: PUSH
52176: LD_INT 3
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: PUSH
52183: LD_INT 0
52185: PUSH
52186: LD_INT 2
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: PUSH
52193: LD_INT 1
52195: PUSH
52196: LD_INT 3
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: PUSH
52203: LD_INT 1
52205: PUSH
52206: LD_INT 4
52208: PUSH
52209: EMPTY
52210: LIST
52211: LIST
52212: PUSH
52213: LD_INT 0
52215: PUSH
52216: LD_INT 4
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: PUSH
52223: LD_INT 1
52225: NEG
52226: PUSH
52227: LD_INT 3
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: PUSH
52234: LD_INT 1
52236: NEG
52237: PUSH
52238: LD_INT 2
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: PUSH
52245: LD_INT 2
52247: PUSH
52248: LD_INT 4
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: PUSH
52255: LD_INT 2
52257: NEG
52258: PUSH
52259: LD_INT 2
52261: PUSH
52262: EMPTY
52263: LIST
52264: LIST
52265: PUSH
52266: LD_INT 4
52268: NEG
52269: PUSH
52270: LD_INT 0
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: PUSH
52277: LD_INT 4
52279: NEG
52280: PUSH
52281: LD_INT 1
52283: NEG
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 3
52291: NEG
52292: PUSH
52293: LD_INT 0
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 3
52302: NEG
52303: PUSH
52304: LD_INT 1
52306: PUSH
52307: EMPTY
52308: LIST
52309: LIST
52310: PUSH
52311: LD_INT 4
52313: NEG
52314: PUSH
52315: LD_INT 1
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 5
52324: NEG
52325: PUSH
52326: LD_INT 0
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: LD_INT 5
52335: NEG
52336: PUSH
52337: LD_INT 1
52339: NEG
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: LD_INT 5
52347: NEG
52348: PUSH
52349: LD_INT 2
52351: NEG
52352: PUSH
52353: EMPTY
52354: LIST
52355: LIST
52356: PUSH
52357: LD_INT 3
52359: NEG
52360: PUSH
52361: LD_INT 2
52363: PUSH
52364: EMPTY
52365: LIST
52366: LIST
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: LIST
52372: LIST
52373: LIST
52374: LIST
52375: LIST
52376: LIST
52377: LIST
52378: LIST
52379: LIST
52380: LIST
52381: LIST
52382: LIST
52383: LIST
52384: LIST
52385: LIST
52386: LIST
52387: LIST
52388: LIST
52389: LIST
52390: LIST
52391: LIST
52392: LIST
52393: LIST
52394: LIST
52395: LIST
52396: LIST
52397: LIST
52398: LIST
52399: LIST
52400: LIST
52401: LIST
52402: LIST
52403: LIST
52404: LIST
52405: LIST
52406: LIST
52407: LIST
52408: LIST
52409: LIST
52410: LIST
52411: LIST
52412: LIST
52413: LIST
52414: ST_TO_ADDR
// end ; end ;
52415: GO 52418
52417: POP
// case btype of b_depot , b_warehouse :
52418: LD_VAR 0 1
52422: PUSH
52423: LD_INT 0
52425: DOUBLE
52426: EQUAL
52427: IFTRUE 52437
52429: LD_INT 1
52431: DOUBLE
52432: EQUAL
52433: IFTRUE 52437
52435: GO 52638
52437: POP
// case nation of nation_american :
52438: LD_VAR 0 5
52442: PUSH
52443: LD_INT 1
52445: DOUBLE
52446: EQUAL
52447: IFTRUE 52451
52449: GO 52507
52451: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
52452: LD_ADDR_VAR 0 9
52456: PUSH
52457: LD_VAR 0 11
52461: PUSH
52462: LD_VAR 0 12
52466: PUSH
52467: LD_VAR 0 13
52471: PUSH
52472: LD_VAR 0 14
52476: PUSH
52477: LD_VAR 0 15
52481: PUSH
52482: LD_VAR 0 16
52486: PUSH
52487: EMPTY
52488: LIST
52489: LIST
52490: LIST
52491: LIST
52492: LIST
52493: LIST
52494: PUSH
52495: LD_VAR 0 4
52499: PUSH
52500: LD_INT 1
52502: PLUS
52503: ARRAY
52504: ST_TO_ADDR
52505: GO 52636
52507: LD_INT 2
52509: DOUBLE
52510: EQUAL
52511: IFTRUE 52515
52513: GO 52571
52515: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
52516: LD_ADDR_VAR 0 9
52520: PUSH
52521: LD_VAR 0 17
52525: PUSH
52526: LD_VAR 0 18
52530: PUSH
52531: LD_VAR 0 19
52535: PUSH
52536: LD_VAR 0 20
52540: PUSH
52541: LD_VAR 0 21
52545: PUSH
52546: LD_VAR 0 22
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: LIST
52555: LIST
52556: LIST
52557: LIST
52558: PUSH
52559: LD_VAR 0 4
52563: PUSH
52564: LD_INT 1
52566: PLUS
52567: ARRAY
52568: ST_TO_ADDR
52569: GO 52636
52571: LD_INT 3
52573: DOUBLE
52574: EQUAL
52575: IFTRUE 52579
52577: GO 52635
52579: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
52580: LD_ADDR_VAR 0 9
52584: PUSH
52585: LD_VAR 0 23
52589: PUSH
52590: LD_VAR 0 24
52594: PUSH
52595: LD_VAR 0 25
52599: PUSH
52600: LD_VAR 0 26
52604: PUSH
52605: LD_VAR 0 27
52609: PUSH
52610: LD_VAR 0 28
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: LIST
52619: LIST
52620: LIST
52621: LIST
52622: PUSH
52623: LD_VAR 0 4
52627: PUSH
52628: LD_INT 1
52630: PLUS
52631: ARRAY
52632: ST_TO_ADDR
52633: GO 52636
52635: POP
52636: GO 53191
52638: LD_INT 2
52640: DOUBLE
52641: EQUAL
52642: IFTRUE 52652
52644: LD_INT 3
52646: DOUBLE
52647: EQUAL
52648: IFTRUE 52652
52650: GO 52708
52652: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
52653: LD_ADDR_VAR 0 9
52657: PUSH
52658: LD_VAR 0 29
52662: PUSH
52663: LD_VAR 0 30
52667: PUSH
52668: LD_VAR 0 31
52672: PUSH
52673: LD_VAR 0 32
52677: PUSH
52678: LD_VAR 0 33
52682: PUSH
52683: LD_VAR 0 34
52687: PUSH
52688: EMPTY
52689: LIST
52690: LIST
52691: LIST
52692: LIST
52693: LIST
52694: LIST
52695: PUSH
52696: LD_VAR 0 4
52700: PUSH
52701: LD_INT 1
52703: PLUS
52704: ARRAY
52705: ST_TO_ADDR
52706: GO 53191
52708: LD_INT 16
52710: DOUBLE
52711: EQUAL
52712: IFTRUE 52770
52714: LD_INT 17
52716: DOUBLE
52717: EQUAL
52718: IFTRUE 52770
52720: LD_INT 18
52722: DOUBLE
52723: EQUAL
52724: IFTRUE 52770
52726: LD_INT 19
52728: DOUBLE
52729: EQUAL
52730: IFTRUE 52770
52732: LD_INT 22
52734: DOUBLE
52735: EQUAL
52736: IFTRUE 52770
52738: LD_INT 20
52740: DOUBLE
52741: EQUAL
52742: IFTRUE 52770
52744: LD_INT 21
52746: DOUBLE
52747: EQUAL
52748: IFTRUE 52770
52750: LD_INT 23
52752: DOUBLE
52753: EQUAL
52754: IFTRUE 52770
52756: LD_INT 24
52758: DOUBLE
52759: EQUAL
52760: IFTRUE 52770
52762: LD_INT 25
52764: DOUBLE
52765: EQUAL
52766: IFTRUE 52770
52768: GO 52826
52770: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
52771: LD_ADDR_VAR 0 9
52775: PUSH
52776: LD_VAR 0 35
52780: PUSH
52781: LD_VAR 0 36
52785: PUSH
52786: LD_VAR 0 37
52790: PUSH
52791: LD_VAR 0 38
52795: PUSH
52796: LD_VAR 0 39
52800: PUSH
52801: LD_VAR 0 40
52805: PUSH
52806: EMPTY
52807: LIST
52808: LIST
52809: LIST
52810: LIST
52811: LIST
52812: LIST
52813: PUSH
52814: LD_VAR 0 4
52818: PUSH
52819: LD_INT 1
52821: PLUS
52822: ARRAY
52823: ST_TO_ADDR
52824: GO 53191
52826: LD_INT 6
52828: DOUBLE
52829: EQUAL
52830: IFTRUE 52882
52832: LD_INT 7
52834: DOUBLE
52835: EQUAL
52836: IFTRUE 52882
52838: LD_INT 8
52840: DOUBLE
52841: EQUAL
52842: IFTRUE 52882
52844: LD_INT 13
52846: DOUBLE
52847: EQUAL
52848: IFTRUE 52882
52850: LD_INT 12
52852: DOUBLE
52853: EQUAL
52854: IFTRUE 52882
52856: LD_INT 15
52858: DOUBLE
52859: EQUAL
52860: IFTRUE 52882
52862: LD_INT 11
52864: DOUBLE
52865: EQUAL
52866: IFTRUE 52882
52868: LD_INT 14
52870: DOUBLE
52871: EQUAL
52872: IFTRUE 52882
52874: LD_INT 10
52876: DOUBLE
52877: EQUAL
52878: IFTRUE 52882
52880: GO 52938
52882: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
52883: LD_ADDR_VAR 0 9
52887: PUSH
52888: LD_VAR 0 41
52892: PUSH
52893: LD_VAR 0 42
52897: PUSH
52898: LD_VAR 0 43
52902: PUSH
52903: LD_VAR 0 44
52907: PUSH
52908: LD_VAR 0 45
52912: PUSH
52913: LD_VAR 0 46
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: LIST
52922: LIST
52923: LIST
52924: LIST
52925: PUSH
52926: LD_VAR 0 4
52930: PUSH
52931: LD_INT 1
52933: PLUS
52934: ARRAY
52935: ST_TO_ADDR
52936: GO 53191
52938: LD_INT 36
52940: DOUBLE
52941: EQUAL
52942: IFTRUE 52946
52944: GO 53002
52946: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
52947: LD_ADDR_VAR 0 9
52951: PUSH
52952: LD_VAR 0 47
52956: PUSH
52957: LD_VAR 0 48
52961: PUSH
52962: LD_VAR 0 49
52966: PUSH
52967: LD_VAR 0 50
52971: PUSH
52972: LD_VAR 0 51
52976: PUSH
52977: LD_VAR 0 52
52981: PUSH
52982: EMPTY
52983: LIST
52984: LIST
52985: LIST
52986: LIST
52987: LIST
52988: LIST
52989: PUSH
52990: LD_VAR 0 4
52994: PUSH
52995: LD_INT 1
52997: PLUS
52998: ARRAY
52999: ST_TO_ADDR
53000: GO 53191
53002: LD_INT 4
53004: DOUBLE
53005: EQUAL
53006: IFTRUE 53028
53008: LD_INT 5
53010: DOUBLE
53011: EQUAL
53012: IFTRUE 53028
53014: LD_INT 34
53016: DOUBLE
53017: EQUAL
53018: IFTRUE 53028
53020: LD_INT 37
53022: DOUBLE
53023: EQUAL
53024: IFTRUE 53028
53026: GO 53084
53028: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
53029: LD_ADDR_VAR 0 9
53033: PUSH
53034: LD_VAR 0 53
53038: PUSH
53039: LD_VAR 0 54
53043: PUSH
53044: LD_VAR 0 55
53048: PUSH
53049: LD_VAR 0 56
53053: PUSH
53054: LD_VAR 0 57
53058: PUSH
53059: LD_VAR 0 58
53063: PUSH
53064: EMPTY
53065: LIST
53066: LIST
53067: LIST
53068: LIST
53069: LIST
53070: LIST
53071: PUSH
53072: LD_VAR 0 4
53076: PUSH
53077: LD_INT 1
53079: PLUS
53080: ARRAY
53081: ST_TO_ADDR
53082: GO 53191
53084: LD_INT 31
53086: DOUBLE
53087: EQUAL
53088: IFTRUE 53134
53090: LD_INT 32
53092: DOUBLE
53093: EQUAL
53094: IFTRUE 53134
53096: LD_INT 33
53098: DOUBLE
53099: EQUAL
53100: IFTRUE 53134
53102: LD_INT 27
53104: DOUBLE
53105: EQUAL
53106: IFTRUE 53134
53108: LD_INT 26
53110: DOUBLE
53111: EQUAL
53112: IFTRUE 53134
53114: LD_INT 28
53116: DOUBLE
53117: EQUAL
53118: IFTRUE 53134
53120: LD_INT 29
53122: DOUBLE
53123: EQUAL
53124: IFTRUE 53134
53126: LD_INT 30
53128: DOUBLE
53129: EQUAL
53130: IFTRUE 53134
53132: GO 53190
53134: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
53135: LD_ADDR_VAR 0 9
53139: PUSH
53140: LD_VAR 0 59
53144: PUSH
53145: LD_VAR 0 60
53149: PUSH
53150: LD_VAR 0 61
53154: PUSH
53155: LD_VAR 0 62
53159: PUSH
53160: LD_VAR 0 63
53164: PUSH
53165: LD_VAR 0 64
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: LIST
53174: LIST
53175: LIST
53176: LIST
53177: PUSH
53178: LD_VAR 0 4
53182: PUSH
53183: LD_INT 1
53185: PLUS
53186: ARRAY
53187: ST_TO_ADDR
53188: GO 53191
53190: POP
// temp_list2 = [ ] ;
53191: LD_ADDR_VAR 0 10
53195: PUSH
53196: EMPTY
53197: ST_TO_ADDR
// for i in temp_list do
53198: LD_ADDR_VAR 0 8
53202: PUSH
53203: LD_VAR 0 9
53207: PUSH
53208: FOR_IN
53209: IFFALSE 53261
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
53211: LD_ADDR_VAR 0 10
53215: PUSH
53216: LD_VAR 0 10
53220: PUSH
53221: LD_VAR 0 8
53225: PUSH
53226: LD_INT 1
53228: ARRAY
53229: PUSH
53230: LD_VAR 0 2
53234: PLUS
53235: PUSH
53236: LD_VAR 0 8
53240: PUSH
53241: LD_INT 2
53243: ARRAY
53244: PUSH
53245: LD_VAR 0 3
53249: PLUS
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: PUSH
53255: EMPTY
53256: LIST
53257: ADD
53258: ST_TO_ADDR
53259: GO 53208
53261: POP
53262: POP
// result = temp_list2 ;
53263: LD_ADDR_VAR 0 7
53267: PUSH
53268: LD_VAR 0 10
53272: ST_TO_ADDR
// end ;
53273: LD_VAR 0 7
53277: RET
// export function EnemyInRange ( unit , dist ) ; begin
53278: LD_INT 0
53280: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
53281: LD_ADDR_VAR 0 3
53285: PUSH
53286: LD_VAR 0 1
53290: PPUSH
53291: CALL_OW 255
53295: PPUSH
53296: LD_VAR 0 1
53300: PPUSH
53301: CALL_OW 250
53305: PPUSH
53306: LD_VAR 0 1
53310: PPUSH
53311: CALL_OW 251
53315: PPUSH
53316: LD_VAR 0 2
53320: PPUSH
53321: CALL 27382 0 4
53325: PUSH
53326: LD_INT 4
53328: ARRAY
53329: ST_TO_ADDR
// end ;
53330: LD_VAR 0 3
53334: RET
// export function PlayerSeeMe ( unit ) ; begin
53335: LD_INT 0
53337: PPUSH
// result := See ( your_side , unit ) ;
53338: LD_ADDR_VAR 0 2
53342: PUSH
53343: LD_OWVAR 2
53347: PPUSH
53348: LD_VAR 0 1
53352: PPUSH
53353: CALL_OW 292
53357: ST_TO_ADDR
// end ;
53358: LD_VAR 0 2
53362: RET
// export function ReverseDir ( unit ) ; begin
53363: LD_INT 0
53365: PPUSH
// if not unit then
53366: LD_VAR 0 1
53370: NOT
53371: IFFALSE 53375
// exit ;
53373: GO 53421
// result := [ 3 , 4 , 5 , 0 , 1 , 2 ] [ GetDir ( unit ) + 1 ] ;
53375: LD_ADDR_VAR 0 2
53379: PUSH
53380: LD_INT 3
53382: PUSH
53383: LD_INT 4
53385: PUSH
53386: LD_INT 5
53388: PUSH
53389: LD_INT 0
53391: PUSH
53392: LD_INT 1
53394: PUSH
53395: LD_INT 2
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: LIST
53402: LIST
53403: LIST
53404: LIST
53405: PUSH
53406: LD_VAR 0 1
53410: PPUSH
53411: CALL_OW 254
53415: PUSH
53416: LD_INT 1
53418: PLUS
53419: ARRAY
53420: ST_TO_ADDR
// end ;
53421: LD_VAR 0 2
53425: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
53426: LD_INT 0
53428: PPUSH
53429: PPUSH
53430: PPUSH
53431: PPUSH
53432: PPUSH
// if not hexes then
53433: LD_VAR 0 2
53437: NOT
53438: IFFALSE 53442
// exit ;
53440: GO 53590
// dist := 9999 ;
53442: LD_ADDR_VAR 0 5
53446: PUSH
53447: LD_INT 9999
53449: ST_TO_ADDR
// for i = 1 to hexes do
53450: LD_ADDR_VAR 0 4
53454: PUSH
53455: DOUBLE
53456: LD_INT 1
53458: DEC
53459: ST_TO_ADDR
53460: LD_VAR 0 2
53464: PUSH
53465: FOR_TO
53466: IFFALSE 53578
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
53468: LD_VAR 0 1
53472: PPUSH
53473: LD_VAR 0 2
53477: PUSH
53478: LD_VAR 0 4
53482: ARRAY
53483: PUSH
53484: LD_INT 1
53486: ARRAY
53487: PPUSH
53488: LD_VAR 0 2
53492: PUSH
53493: LD_VAR 0 4
53497: ARRAY
53498: PUSH
53499: LD_INT 2
53501: ARRAY
53502: PPUSH
53503: CALL_OW 297
53507: PUSH
53508: LD_VAR 0 5
53512: LESS
53513: IFFALSE 53576
// begin hex := hexes [ i ] ;
53515: LD_ADDR_VAR 0 7
53519: PUSH
53520: LD_VAR 0 2
53524: PUSH
53525: LD_VAR 0 4
53529: ARRAY
53530: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53531: LD_ADDR_VAR 0 5
53535: PUSH
53536: LD_VAR 0 1
53540: PPUSH
53541: LD_VAR 0 2
53545: PUSH
53546: LD_VAR 0 4
53550: ARRAY
53551: PUSH
53552: LD_INT 1
53554: ARRAY
53555: PPUSH
53556: LD_VAR 0 2
53560: PUSH
53561: LD_VAR 0 4
53565: ARRAY
53566: PUSH
53567: LD_INT 2
53569: ARRAY
53570: PPUSH
53571: CALL_OW 297
53575: ST_TO_ADDR
// end ; end ;
53576: GO 53465
53578: POP
53579: POP
// result := hex ;
53580: LD_ADDR_VAR 0 3
53584: PUSH
53585: LD_VAR 0 7
53589: ST_TO_ADDR
// end ;
53590: LD_VAR 0 3
53594: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
53595: LD_INT 0
53597: PPUSH
53598: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
53599: LD_VAR 0 1
53603: NOT
53604: PUSH
53605: LD_VAR 0 1
53609: PUSH
53610: LD_INT 21
53612: PUSH
53613: LD_INT 2
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: PUSH
53620: LD_INT 23
53622: PUSH
53623: LD_INT 2
53625: PUSH
53626: EMPTY
53627: LIST
53628: LIST
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: PPUSH
53634: CALL_OW 69
53638: IN
53639: NOT
53640: OR
53641: IFFALSE 53645
// exit ;
53643: GO 53692
// for i = 1 to 3 do
53645: LD_ADDR_VAR 0 3
53649: PUSH
53650: DOUBLE
53651: LD_INT 1
53653: DEC
53654: ST_TO_ADDR
53655: LD_INT 3
53657: PUSH
53658: FOR_TO
53659: IFFALSE 53690
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
53661: LD_VAR 0 1
53665: PPUSH
53666: CALL_OW 250
53670: PPUSH
53671: LD_VAR 0 1
53675: PPUSH
53676: CALL_OW 251
53680: PPUSH
53681: LD_INT 1
53683: PPUSH
53684: CALL_OW 453
53688: GO 53658
53690: POP
53691: POP
// end ;
53692: LD_VAR 0 2
53696: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
53697: LD_INT 0
53699: PPUSH
53700: PPUSH
53701: PPUSH
53702: PPUSH
53703: PPUSH
53704: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
53705: LD_VAR 0 1
53709: NOT
53710: PUSH
53711: LD_VAR 0 2
53715: NOT
53716: OR
53717: PUSH
53718: LD_VAR 0 1
53722: PPUSH
53723: CALL_OW 314
53727: OR
53728: IFFALSE 53732
// exit ;
53730: GO 54173
// x := GetX ( enemy_unit ) ;
53732: LD_ADDR_VAR 0 7
53736: PUSH
53737: LD_VAR 0 2
53741: PPUSH
53742: CALL_OW 250
53746: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
53747: LD_ADDR_VAR 0 8
53751: PUSH
53752: LD_VAR 0 2
53756: PPUSH
53757: CALL_OW 251
53761: ST_TO_ADDR
// if not x or not y then
53762: LD_VAR 0 7
53766: NOT
53767: PUSH
53768: LD_VAR 0 8
53772: NOT
53773: OR
53774: IFFALSE 53778
// exit ;
53776: GO 54173
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
53778: LD_ADDR_VAR 0 6
53782: PUSH
53783: LD_VAR 0 7
53787: PPUSH
53788: LD_INT 0
53790: PPUSH
53791: LD_INT 4
53793: PPUSH
53794: CALL_OW 272
53798: PUSH
53799: LD_VAR 0 8
53803: PPUSH
53804: LD_INT 0
53806: PPUSH
53807: LD_INT 4
53809: PPUSH
53810: CALL_OW 273
53814: PUSH
53815: EMPTY
53816: LIST
53817: LIST
53818: PUSH
53819: LD_VAR 0 7
53823: PPUSH
53824: LD_INT 1
53826: PPUSH
53827: LD_INT 4
53829: PPUSH
53830: CALL_OW 272
53834: PUSH
53835: LD_VAR 0 8
53839: PPUSH
53840: LD_INT 1
53842: PPUSH
53843: LD_INT 4
53845: PPUSH
53846: CALL_OW 273
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: PUSH
53855: LD_VAR 0 7
53859: PPUSH
53860: LD_INT 2
53862: PPUSH
53863: LD_INT 4
53865: PPUSH
53866: CALL_OW 272
53870: PUSH
53871: LD_VAR 0 8
53875: PPUSH
53876: LD_INT 2
53878: PPUSH
53879: LD_INT 4
53881: PPUSH
53882: CALL_OW 273
53886: PUSH
53887: EMPTY
53888: LIST
53889: LIST
53890: PUSH
53891: LD_VAR 0 7
53895: PPUSH
53896: LD_INT 3
53898: PPUSH
53899: LD_INT 4
53901: PPUSH
53902: CALL_OW 272
53906: PUSH
53907: LD_VAR 0 8
53911: PPUSH
53912: LD_INT 3
53914: PPUSH
53915: LD_INT 4
53917: PPUSH
53918: CALL_OW 273
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: PUSH
53927: LD_VAR 0 7
53931: PPUSH
53932: LD_INT 4
53934: PPUSH
53935: LD_INT 4
53937: PPUSH
53938: CALL_OW 272
53942: PUSH
53943: LD_VAR 0 8
53947: PPUSH
53948: LD_INT 4
53950: PPUSH
53951: LD_INT 4
53953: PPUSH
53954: CALL_OW 273
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: PUSH
53963: LD_VAR 0 7
53967: PPUSH
53968: LD_INT 5
53970: PPUSH
53971: LD_INT 4
53973: PPUSH
53974: CALL_OW 272
53978: PUSH
53979: LD_VAR 0 8
53983: PPUSH
53984: LD_INT 5
53986: PPUSH
53987: LD_INT 4
53989: PPUSH
53990: CALL_OW 273
53994: PUSH
53995: EMPTY
53996: LIST
53997: LIST
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: LIST
54003: LIST
54004: LIST
54005: LIST
54006: ST_TO_ADDR
// for i = tmp downto 1 do
54007: LD_ADDR_VAR 0 4
54011: PUSH
54012: DOUBLE
54013: LD_VAR 0 6
54017: INC
54018: ST_TO_ADDR
54019: LD_INT 1
54021: PUSH
54022: FOR_DOWNTO
54023: IFFALSE 54124
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
54025: LD_VAR 0 6
54029: PUSH
54030: LD_VAR 0 4
54034: ARRAY
54035: PUSH
54036: LD_INT 1
54038: ARRAY
54039: PPUSH
54040: LD_VAR 0 6
54044: PUSH
54045: LD_VAR 0 4
54049: ARRAY
54050: PUSH
54051: LD_INT 2
54053: ARRAY
54054: PPUSH
54055: CALL_OW 488
54059: NOT
54060: PUSH
54061: LD_VAR 0 6
54065: PUSH
54066: LD_VAR 0 4
54070: ARRAY
54071: PUSH
54072: LD_INT 1
54074: ARRAY
54075: PPUSH
54076: LD_VAR 0 6
54080: PUSH
54081: LD_VAR 0 4
54085: ARRAY
54086: PUSH
54087: LD_INT 2
54089: ARRAY
54090: PPUSH
54091: CALL_OW 428
54095: PUSH
54096: LD_INT 0
54098: NONEQUAL
54099: OR
54100: IFFALSE 54122
// tmp := Delete ( tmp , i ) ;
54102: LD_ADDR_VAR 0 6
54106: PUSH
54107: LD_VAR 0 6
54111: PPUSH
54112: LD_VAR 0 4
54116: PPUSH
54117: CALL_OW 3
54121: ST_TO_ADDR
54122: GO 54022
54124: POP
54125: POP
// j := GetClosestHex ( unit , tmp ) ;
54126: LD_ADDR_VAR 0 5
54130: PUSH
54131: LD_VAR 0 1
54135: PPUSH
54136: LD_VAR 0 6
54140: PPUSH
54141: CALL 53426 0 2
54145: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
54146: LD_VAR 0 1
54150: PPUSH
54151: LD_VAR 0 5
54155: PUSH
54156: LD_INT 1
54158: ARRAY
54159: PPUSH
54160: LD_VAR 0 5
54164: PUSH
54165: LD_INT 2
54167: ARRAY
54168: PPUSH
54169: CALL_OW 111
// end ;
54173: LD_VAR 0 3
54177: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
54178: LD_INT 0
54180: PPUSH
54181: PPUSH
54182: PPUSH
// uc_side = 0 ;
54183: LD_ADDR_OWVAR 20
54187: PUSH
54188: LD_INT 0
54190: ST_TO_ADDR
// uc_nation = 0 ;
54191: LD_ADDR_OWVAR 21
54195: PUSH
54196: LD_INT 0
54198: ST_TO_ADDR
// InitHc ;
54199: CALL_OW 19
// InitVc ;
54203: CALL_OW 20
// if mastodonts then
54207: LD_VAR 0 6
54211: IFFALSE 54278
// for i = 1 to mastodonts do
54213: LD_ADDR_VAR 0 11
54217: PUSH
54218: DOUBLE
54219: LD_INT 1
54221: DEC
54222: ST_TO_ADDR
54223: LD_VAR 0 6
54227: PUSH
54228: FOR_TO
54229: IFFALSE 54276
// begin vc_chassis := 31 ;
54231: LD_ADDR_OWVAR 37
54235: PUSH
54236: LD_INT 31
54238: ST_TO_ADDR
// vc_control := control_rider ;
54239: LD_ADDR_OWVAR 38
54243: PUSH
54244: LD_INT 4
54246: ST_TO_ADDR
// animal := CreateVehicle ;
54247: LD_ADDR_VAR 0 12
54251: PUSH
54252: CALL_OW 45
54256: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54257: LD_VAR 0 12
54261: PPUSH
54262: LD_VAR 0 8
54266: PPUSH
54267: LD_INT 0
54269: PPUSH
54270: CALL 61023 0 3
// end ;
54274: GO 54228
54276: POP
54277: POP
// if horses then
54278: LD_VAR 0 5
54282: IFFALSE 54349
// for i = 1 to horses do
54284: LD_ADDR_VAR 0 11
54288: PUSH
54289: DOUBLE
54290: LD_INT 1
54292: DEC
54293: ST_TO_ADDR
54294: LD_VAR 0 5
54298: PUSH
54299: FOR_TO
54300: IFFALSE 54347
// begin hc_class := 21 ;
54302: LD_ADDR_OWVAR 28
54306: PUSH
54307: LD_INT 21
54309: ST_TO_ADDR
// hc_gallery :=  ;
54310: LD_ADDR_OWVAR 33
54314: PUSH
54315: LD_STRING 
54317: ST_TO_ADDR
// animal := CreateHuman ;
54318: LD_ADDR_VAR 0 12
54322: PUSH
54323: CALL_OW 44
54327: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54328: LD_VAR 0 12
54332: PPUSH
54333: LD_VAR 0 8
54337: PPUSH
54338: LD_INT 0
54340: PPUSH
54341: CALL 61023 0 3
// end ;
54345: GO 54299
54347: POP
54348: POP
// if birds then
54349: LD_VAR 0 1
54353: IFFALSE 54420
// for i = 1 to birds do
54355: LD_ADDR_VAR 0 11
54359: PUSH
54360: DOUBLE
54361: LD_INT 1
54363: DEC
54364: ST_TO_ADDR
54365: LD_VAR 0 1
54369: PUSH
54370: FOR_TO
54371: IFFALSE 54418
// begin hc_class = 18 ;
54373: LD_ADDR_OWVAR 28
54377: PUSH
54378: LD_INT 18
54380: ST_TO_ADDR
// hc_gallery =  ;
54381: LD_ADDR_OWVAR 33
54385: PUSH
54386: LD_STRING 
54388: ST_TO_ADDR
// animal := CreateHuman ;
54389: LD_ADDR_VAR 0 12
54393: PUSH
54394: CALL_OW 44
54398: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54399: LD_VAR 0 12
54403: PPUSH
54404: LD_VAR 0 8
54408: PPUSH
54409: LD_INT 0
54411: PPUSH
54412: CALL 61023 0 3
// end ;
54416: GO 54370
54418: POP
54419: POP
// if tigers then
54420: LD_VAR 0 2
54424: IFFALSE 54508
// for i = 1 to tigers do
54426: LD_ADDR_VAR 0 11
54430: PUSH
54431: DOUBLE
54432: LD_INT 1
54434: DEC
54435: ST_TO_ADDR
54436: LD_VAR 0 2
54440: PUSH
54441: FOR_TO
54442: IFFALSE 54506
// begin hc_class = class_tiger ;
54444: LD_ADDR_OWVAR 28
54448: PUSH
54449: LD_INT 14
54451: ST_TO_ADDR
// hc_gallery =  ;
54452: LD_ADDR_OWVAR 33
54456: PUSH
54457: LD_STRING 
54459: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
54460: LD_ADDR_OWVAR 35
54464: PUSH
54465: LD_INT 7
54467: NEG
54468: PPUSH
54469: LD_INT 7
54471: PPUSH
54472: CALL_OW 12
54476: ST_TO_ADDR
// animal := CreateHuman ;
54477: LD_ADDR_VAR 0 12
54481: PUSH
54482: CALL_OW 44
54486: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54487: LD_VAR 0 12
54491: PPUSH
54492: LD_VAR 0 8
54496: PPUSH
54497: LD_INT 0
54499: PPUSH
54500: CALL 61023 0 3
// end ;
54504: GO 54441
54506: POP
54507: POP
// if apemans then
54508: LD_VAR 0 3
54512: IFFALSE 54635
// for i = 1 to apemans do
54514: LD_ADDR_VAR 0 11
54518: PUSH
54519: DOUBLE
54520: LD_INT 1
54522: DEC
54523: ST_TO_ADDR
54524: LD_VAR 0 3
54528: PUSH
54529: FOR_TO
54530: IFFALSE 54633
// begin hc_class = class_apeman ;
54532: LD_ADDR_OWVAR 28
54536: PUSH
54537: LD_INT 12
54539: ST_TO_ADDR
// hc_gallery =  ;
54540: LD_ADDR_OWVAR 33
54544: PUSH
54545: LD_STRING 
54547: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
54548: LD_ADDR_OWVAR 35
54552: PUSH
54553: LD_INT 5
54555: NEG
54556: PPUSH
54557: LD_INT 5
54559: PPUSH
54560: CALL_OW 12
54564: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
54565: LD_ADDR_OWVAR 31
54569: PUSH
54570: LD_INT 1
54572: PPUSH
54573: LD_INT 3
54575: PPUSH
54576: CALL_OW 12
54580: PUSH
54581: LD_INT 1
54583: PPUSH
54584: LD_INT 3
54586: PPUSH
54587: CALL_OW 12
54591: PUSH
54592: LD_INT 0
54594: PUSH
54595: LD_INT 0
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: LIST
54602: LIST
54603: ST_TO_ADDR
// animal := CreateHuman ;
54604: LD_ADDR_VAR 0 12
54608: PUSH
54609: CALL_OW 44
54613: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54614: LD_VAR 0 12
54618: PPUSH
54619: LD_VAR 0 8
54623: PPUSH
54624: LD_INT 0
54626: PPUSH
54627: CALL 61023 0 3
// end ;
54631: GO 54529
54633: POP
54634: POP
// if enchidnas then
54635: LD_VAR 0 4
54639: IFFALSE 54706
// for i = 1 to enchidnas do
54641: LD_ADDR_VAR 0 11
54645: PUSH
54646: DOUBLE
54647: LD_INT 1
54649: DEC
54650: ST_TO_ADDR
54651: LD_VAR 0 4
54655: PUSH
54656: FOR_TO
54657: IFFALSE 54704
// begin hc_class = 13 ;
54659: LD_ADDR_OWVAR 28
54663: PUSH
54664: LD_INT 13
54666: ST_TO_ADDR
// hc_gallery =  ;
54667: LD_ADDR_OWVAR 33
54671: PUSH
54672: LD_STRING 
54674: ST_TO_ADDR
// animal := CreateHuman ;
54675: LD_ADDR_VAR 0 12
54679: PUSH
54680: CALL_OW 44
54684: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54685: LD_VAR 0 12
54689: PPUSH
54690: LD_VAR 0 8
54694: PPUSH
54695: LD_INT 0
54697: PPUSH
54698: CALL 61023 0 3
// end ;
54702: GO 54656
54704: POP
54705: POP
// if fishes then
54706: LD_VAR 0 7
54710: IFFALSE 54777
// for i = 1 to fishes do
54712: LD_ADDR_VAR 0 11
54716: PUSH
54717: DOUBLE
54718: LD_INT 1
54720: DEC
54721: ST_TO_ADDR
54722: LD_VAR 0 7
54726: PUSH
54727: FOR_TO
54728: IFFALSE 54775
// begin hc_class = 20 ;
54730: LD_ADDR_OWVAR 28
54734: PUSH
54735: LD_INT 20
54737: ST_TO_ADDR
// hc_gallery =  ;
54738: LD_ADDR_OWVAR 33
54742: PUSH
54743: LD_STRING 
54745: ST_TO_ADDR
// animal := CreateHuman ;
54746: LD_ADDR_VAR 0 12
54750: PUSH
54751: CALL_OW 44
54755: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
54756: LD_VAR 0 12
54760: PPUSH
54761: LD_VAR 0 9
54765: PPUSH
54766: LD_INT 0
54768: PPUSH
54769: CALL 61023 0 3
// end ;
54773: GO 54727
54775: POP
54776: POP
// end ;
54777: LD_VAR 0 10
54781: RET
// export function WantHeal ( sci , unit ) ; begin
54782: LD_INT 0
54784: PPUSH
// if GetTaskList ( sci ) > 0 then
54785: LD_VAR 0 1
54789: PPUSH
54790: CALL_OW 437
54794: PUSH
54795: LD_INT 0
54797: GREATER
54798: IFFALSE 54868
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
54800: LD_VAR 0 1
54804: PPUSH
54805: CALL_OW 437
54809: PUSH
54810: LD_INT 1
54812: ARRAY
54813: PUSH
54814: LD_INT 1
54816: ARRAY
54817: PUSH
54818: LD_STRING l
54820: EQUAL
54821: PUSH
54822: LD_VAR 0 1
54826: PPUSH
54827: CALL_OW 437
54831: PUSH
54832: LD_INT 1
54834: ARRAY
54835: PUSH
54836: LD_INT 4
54838: ARRAY
54839: PUSH
54840: LD_VAR 0 2
54844: EQUAL
54845: AND
54846: IFFALSE 54858
// result := true else
54848: LD_ADDR_VAR 0 3
54852: PUSH
54853: LD_INT 1
54855: ST_TO_ADDR
54856: GO 54866
// result := false ;
54858: LD_ADDR_VAR 0 3
54862: PUSH
54863: LD_INT 0
54865: ST_TO_ADDR
// end else
54866: GO 54876
// result := false ;
54868: LD_ADDR_VAR 0 3
54872: PUSH
54873: LD_INT 0
54875: ST_TO_ADDR
// end ;
54876: LD_VAR 0 3
54880: RET
// export function HealTarget ( sci ) ; begin
54881: LD_INT 0
54883: PPUSH
// if not sci then
54884: LD_VAR 0 1
54888: NOT
54889: IFFALSE 54893
// exit ;
54891: GO 54958
// result := 0 ;
54893: LD_ADDR_VAR 0 2
54897: PUSH
54898: LD_INT 0
54900: ST_TO_ADDR
// if GetTaskList ( sci ) then
54901: LD_VAR 0 1
54905: PPUSH
54906: CALL_OW 437
54910: IFFALSE 54958
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
54912: LD_VAR 0 1
54916: PPUSH
54917: CALL_OW 437
54921: PUSH
54922: LD_INT 1
54924: ARRAY
54925: PUSH
54926: LD_INT 1
54928: ARRAY
54929: PUSH
54930: LD_STRING l
54932: EQUAL
54933: IFFALSE 54958
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
54935: LD_ADDR_VAR 0 2
54939: PUSH
54940: LD_VAR 0 1
54944: PPUSH
54945: CALL_OW 437
54949: PUSH
54950: LD_INT 1
54952: ARRAY
54953: PUSH
54954: LD_INT 4
54956: ARRAY
54957: ST_TO_ADDR
// end ;
54958: LD_VAR 0 2
54962: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking , to_heal , healers , to_repair , repairs , empty_vehs , side ; begin
54963: LD_INT 0
54965: PPUSH
54966: PPUSH
54967: PPUSH
54968: PPUSH
54969: PPUSH
54970: PPUSH
54971: PPUSH
54972: PPUSH
54973: PPUSH
54974: PPUSH
54975: PPUSH
54976: PPUSH
54977: PPUSH
54978: PPUSH
54979: PPUSH
54980: PPUSH
54981: PPUSH
54982: PPUSH
54983: PPUSH
54984: PPUSH
54985: PPUSH
54986: PPUSH
54987: PPUSH
54988: PPUSH
54989: PPUSH
54990: PPUSH
54991: PPUSH
54992: PPUSH
54993: PPUSH
54994: PPUSH
54995: PPUSH
54996: PPUSH
54997: PPUSH
54998: PPUSH
// if not list then
54999: LD_VAR 0 1
55003: NOT
55004: IFFALSE 55008
// exit ;
55006: GO 59634
// base := list [ 1 ] ;
55008: LD_ADDR_VAR 0 3
55012: PUSH
55013: LD_VAR 0 1
55017: PUSH
55018: LD_INT 1
55020: ARRAY
55021: ST_TO_ADDR
// group := list [ 2 ] ;
55022: LD_ADDR_VAR 0 4
55026: PUSH
55027: LD_VAR 0 1
55031: PUSH
55032: LD_INT 2
55034: ARRAY
55035: ST_TO_ADDR
// path := list [ 3 ] ;
55036: LD_ADDR_VAR 0 5
55040: PUSH
55041: LD_VAR 0 1
55045: PUSH
55046: LD_INT 3
55048: ARRAY
55049: ST_TO_ADDR
// flags := list [ 4 ] ;
55050: LD_ADDR_VAR 0 6
55054: PUSH
55055: LD_VAR 0 1
55059: PUSH
55060: LD_INT 4
55062: ARRAY
55063: ST_TO_ADDR
// mined := [ ] ;
55064: LD_ADDR_VAR 0 27
55068: PUSH
55069: EMPTY
55070: ST_TO_ADDR
// bombed := [ ] ;
55071: LD_ADDR_VAR 0 28
55075: PUSH
55076: EMPTY
55077: ST_TO_ADDR
// healers := [ ] ;
55078: LD_ADDR_VAR 0 31
55082: PUSH
55083: EMPTY
55084: ST_TO_ADDR
// to_heal := [ ] ;
55085: LD_ADDR_VAR 0 30
55089: PUSH
55090: EMPTY
55091: ST_TO_ADDR
// repairs := [ ] ;
55092: LD_ADDR_VAR 0 33
55096: PUSH
55097: EMPTY
55098: ST_TO_ADDR
// to_repair := [ ] ;
55099: LD_ADDR_VAR 0 32
55103: PUSH
55104: EMPTY
55105: ST_TO_ADDR
// if not group or not path then
55106: LD_VAR 0 4
55110: NOT
55111: PUSH
55112: LD_VAR 0 5
55116: NOT
55117: OR
55118: IFFALSE 55122
// exit ;
55120: GO 59634
// side := GetSide ( group [ 1 ] ) ;
55122: LD_ADDR_VAR 0 35
55126: PUSH
55127: LD_VAR 0 4
55131: PUSH
55132: LD_INT 1
55134: ARRAY
55135: PPUSH
55136: CALL_OW 255
55140: ST_TO_ADDR
// if flags then
55141: LD_VAR 0 6
55145: IFFALSE 55289
// begin f_ignore_area := flags [ 1 ] ;
55147: LD_ADDR_VAR 0 17
55151: PUSH
55152: LD_VAR 0 6
55156: PUSH
55157: LD_INT 1
55159: ARRAY
55160: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
55161: LD_ADDR_VAR 0 18
55165: PUSH
55166: LD_VAR 0 6
55170: PUSH
55171: LD_INT 2
55173: ARRAY
55174: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
55175: LD_ADDR_VAR 0 19
55179: PUSH
55180: LD_VAR 0 6
55184: PUSH
55185: LD_INT 3
55187: ARRAY
55188: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
55189: LD_ADDR_VAR 0 20
55193: PUSH
55194: LD_VAR 0 6
55198: PUSH
55199: LD_INT 4
55201: ARRAY
55202: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
55203: LD_ADDR_VAR 0 21
55207: PUSH
55208: LD_VAR 0 6
55212: PUSH
55213: LD_INT 5
55215: ARRAY
55216: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
55217: LD_ADDR_VAR 0 22
55221: PUSH
55222: LD_VAR 0 6
55226: PUSH
55227: LD_INT 6
55229: ARRAY
55230: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
55231: LD_ADDR_VAR 0 23
55235: PUSH
55236: LD_VAR 0 6
55240: PUSH
55241: LD_INT 7
55243: ARRAY
55244: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
55245: LD_ADDR_VAR 0 24
55249: PUSH
55250: LD_VAR 0 6
55254: PUSH
55255: LD_INT 8
55257: ARRAY
55258: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
55259: LD_ADDR_VAR 0 25
55263: PUSH
55264: LD_VAR 0 6
55268: PUSH
55269: LD_INT 9
55271: ARRAY
55272: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
55273: LD_ADDR_VAR 0 26
55277: PUSH
55278: LD_VAR 0 6
55282: PUSH
55283: LD_INT 10
55285: ARRAY
55286: ST_TO_ADDR
// end else
55287: GO 55369
// begin f_ignore_area := false ;
55289: LD_ADDR_VAR 0 17
55293: PUSH
55294: LD_INT 0
55296: ST_TO_ADDR
// f_capture := false ;
55297: LD_ADDR_VAR 0 18
55301: PUSH
55302: LD_INT 0
55304: ST_TO_ADDR
// f_ignore_civ := false ;
55305: LD_ADDR_VAR 0 19
55309: PUSH
55310: LD_INT 0
55312: ST_TO_ADDR
// f_murder := false ;
55313: LD_ADDR_VAR 0 20
55317: PUSH
55318: LD_INT 0
55320: ST_TO_ADDR
// f_mines := false ;
55321: LD_ADDR_VAR 0 21
55325: PUSH
55326: LD_INT 0
55328: ST_TO_ADDR
// f_repair := false ;
55329: LD_ADDR_VAR 0 22
55333: PUSH
55334: LD_INT 0
55336: ST_TO_ADDR
// f_heal := false ;
55337: LD_ADDR_VAR 0 23
55341: PUSH
55342: LD_INT 0
55344: ST_TO_ADDR
// f_spacetime := false ;
55345: LD_ADDR_VAR 0 24
55349: PUSH
55350: LD_INT 0
55352: ST_TO_ADDR
// f_attack_depot := false ;
55353: LD_ADDR_VAR 0 25
55357: PUSH
55358: LD_INT 0
55360: ST_TO_ADDR
// f_crawl := false ;
55361: LD_ADDR_VAR 0 26
55365: PUSH
55366: LD_INT 0
55368: ST_TO_ADDR
// end ; if f_heal then
55369: LD_VAR 0 23
55373: IFFALSE 55400
// healers := UnitFilter ( group , [ f_class , 4 ] ) ;
55375: LD_ADDR_VAR 0 31
55379: PUSH
55380: LD_VAR 0 4
55384: PPUSH
55385: LD_INT 25
55387: PUSH
55388: LD_INT 4
55390: PUSH
55391: EMPTY
55392: LIST
55393: LIST
55394: PPUSH
55395: CALL_OW 72
55399: ST_TO_ADDR
// if f_repair then
55400: LD_VAR 0 22
55404: IFFALSE 55431
// repairs := UnitFilter ( group , [ f_class , 3 ] ) ;
55406: LD_ADDR_VAR 0 33
55410: PUSH
55411: LD_VAR 0 4
55415: PPUSH
55416: LD_INT 25
55418: PUSH
55419: LD_INT 3
55421: PUSH
55422: EMPTY
55423: LIST
55424: LIST
55425: PPUSH
55426: CALL_OW 72
55430: ST_TO_ADDR
// units_path := [ ] ;
55431: LD_ADDR_VAR 0 16
55435: PUSH
55436: EMPTY
55437: ST_TO_ADDR
// for i = 1 to group do
55438: LD_ADDR_VAR 0 7
55442: PUSH
55443: DOUBLE
55444: LD_INT 1
55446: DEC
55447: ST_TO_ADDR
55448: LD_VAR 0 4
55452: PUSH
55453: FOR_TO
55454: IFFALSE 55483
// units_path := Replace ( units_path , i , path ) ;
55456: LD_ADDR_VAR 0 16
55460: PUSH
55461: LD_VAR 0 16
55465: PPUSH
55466: LD_VAR 0 7
55470: PPUSH
55471: LD_VAR 0 5
55475: PPUSH
55476: CALL_OW 1
55480: ST_TO_ADDR
55481: GO 55453
55483: POP
55484: POP
// repeat for i = group downto 1 do
55485: LD_ADDR_VAR 0 7
55489: PUSH
55490: DOUBLE
55491: LD_VAR 0 4
55495: INC
55496: ST_TO_ADDR
55497: LD_INT 1
55499: PUSH
55500: FOR_DOWNTO
55501: IFFALSE 59597
// begin wait ( 5 ) ;
55503: LD_INT 5
55505: PPUSH
55506: CALL_OW 67
// tmp := [ ] ;
55510: LD_ADDR_VAR 0 14
55514: PUSH
55515: EMPTY
55516: ST_TO_ADDR
// attacking := false ;
55517: LD_ADDR_VAR 0 29
55521: PUSH
55522: LD_INT 0
55524: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
55525: LD_VAR 0 4
55529: PUSH
55530: LD_VAR 0 7
55534: ARRAY
55535: PPUSH
55536: CALL_OW 301
55540: PUSH
55541: LD_VAR 0 4
55545: PUSH
55546: LD_VAR 0 7
55550: ARRAY
55551: NOT
55552: OR
55553: IFFALSE 55662
// begin if GetType ( group [ i ] ) = unit_human then
55555: LD_VAR 0 4
55559: PUSH
55560: LD_VAR 0 7
55564: ARRAY
55565: PPUSH
55566: CALL_OW 247
55570: PUSH
55571: LD_INT 1
55573: EQUAL
55574: IFFALSE 55620
// begin to_heal := to_heal diff group [ i ] ;
55576: LD_ADDR_VAR 0 30
55580: PUSH
55581: LD_VAR 0 30
55585: PUSH
55586: LD_VAR 0 4
55590: PUSH
55591: LD_VAR 0 7
55595: ARRAY
55596: DIFF
55597: ST_TO_ADDR
// healers := healers diff group [ i ] ;
55598: LD_ADDR_VAR 0 31
55602: PUSH
55603: LD_VAR 0 31
55607: PUSH
55608: LD_VAR 0 4
55612: PUSH
55613: LD_VAR 0 7
55617: ARRAY
55618: DIFF
55619: ST_TO_ADDR
// end ; group := Delete ( group , i ) ;
55620: LD_ADDR_VAR 0 4
55624: PUSH
55625: LD_VAR 0 4
55629: PPUSH
55630: LD_VAR 0 7
55634: PPUSH
55635: CALL_OW 3
55639: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
55640: LD_ADDR_VAR 0 16
55644: PUSH
55645: LD_VAR 0 16
55649: PPUSH
55650: LD_VAR 0 7
55654: PPUSH
55655: CALL_OW 3
55659: ST_TO_ADDR
// continue ;
55660: GO 55500
// end ; if f_repair then
55662: LD_VAR 0 22
55666: IFFALSE 56155
// begin if GetType ( group [ i ] ) = unit_vehicle then
55668: LD_VAR 0 4
55672: PUSH
55673: LD_VAR 0 7
55677: ARRAY
55678: PPUSH
55679: CALL_OW 247
55683: PUSH
55684: LD_INT 2
55686: EQUAL
55687: IFFALSE 55877
// begin if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_repair then
55689: LD_VAR 0 4
55693: PUSH
55694: LD_VAR 0 7
55698: ARRAY
55699: PPUSH
55700: CALL_OW 256
55704: PUSH
55705: LD_INT 700
55707: LESS
55708: PUSH
55709: LD_VAR 0 4
55713: PUSH
55714: LD_VAR 0 7
55718: ARRAY
55719: PUSH
55720: LD_VAR 0 32
55724: IN
55725: NOT
55726: AND
55727: IFFALSE 55751
// to_repair := to_repair union group [ i ] ;
55729: LD_ADDR_VAR 0 32
55733: PUSH
55734: LD_VAR 0 32
55738: PUSH
55739: LD_VAR 0 4
55743: PUSH
55744: LD_VAR 0 7
55748: ARRAY
55749: UNION
55750: ST_TO_ADDR
// if GetLives ( group [ i ] ) = 1000 and group [ i ] in to_repair then
55751: LD_VAR 0 4
55755: PUSH
55756: LD_VAR 0 7
55760: ARRAY
55761: PPUSH
55762: CALL_OW 256
55766: PUSH
55767: LD_INT 1000
55769: EQUAL
55770: PUSH
55771: LD_VAR 0 4
55775: PUSH
55776: LD_VAR 0 7
55780: ARRAY
55781: PUSH
55782: LD_VAR 0 32
55786: IN
55787: AND
55788: IFFALSE 55812
// to_repair := to_repair diff group [ i ] ;
55790: LD_ADDR_VAR 0 32
55794: PUSH
55795: LD_VAR 0 32
55799: PUSH
55800: LD_VAR 0 4
55804: PUSH
55805: LD_VAR 0 7
55809: ARRAY
55810: DIFF
55811: ST_TO_ADDR
// if group [ i ] in to_repair then
55812: LD_VAR 0 4
55816: PUSH
55817: LD_VAR 0 7
55821: ARRAY
55822: PUSH
55823: LD_VAR 0 32
55827: IN
55828: IFFALSE 55875
// begin if not IsInArea ( group [ i ] , f_repair ) then
55830: LD_VAR 0 4
55834: PUSH
55835: LD_VAR 0 7
55839: ARRAY
55840: PPUSH
55841: LD_VAR 0 22
55845: PPUSH
55846: CALL_OW 308
55850: NOT
55851: IFFALSE 55873
// ComMoveToArea ( group [ i ] , f_repair ) ;
55853: LD_VAR 0 4
55857: PUSH
55858: LD_VAR 0 7
55862: ARRAY
55863: PPUSH
55864: LD_VAR 0 22
55868: PPUSH
55869: CALL_OW 113
// continue ;
55873: GO 55500
// end ; end else
55875: GO 56155
// if group [ i ] in repairs then
55877: LD_VAR 0 4
55881: PUSH
55882: LD_VAR 0 7
55886: ARRAY
55887: PUSH
55888: LD_VAR 0 33
55892: IN
55893: IFFALSE 56155
// begin if IsInUnit ( group [ i ] ) then
55895: LD_VAR 0 4
55899: PUSH
55900: LD_VAR 0 7
55904: ARRAY
55905: PPUSH
55906: CALL_OW 310
55910: IFFALSE 55978
// begin z := IsInUnit ( group [ i ] ) ;
55912: LD_ADDR_VAR 0 13
55916: PUSH
55917: LD_VAR 0 4
55921: PUSH
55922: LD_VAR 0 7
55926: ARRAY
55927: PPUSH
55928: CALL_OW 310
55932: ST_TO_ADDR
// if z in to_repair and IsInArea ( z , f_repair ) then
55933: LD_VAR 0 13
55937: PUSH
55938: LD_VAR 0 32
55942: IN
55943: PUSH
55944: LD_VAR 0 13
55948: PPUSH
55949: LD_VAR 0 22
55953: PPUSH
55954: CALL_OW 308
55958: AND
55959: IFFALSE 55976
// ComExitVehicle ( group [ i ] ) ;
55961: LD_VAR 0 4
55965: PUSH
55966: LD_VAR 0 7
55970: ARRAY
55971: PPUSH
55972: CALL_OW 121
// end else
55976: GO 56155
// begin z := UnitFilter ( group , [ [ f_inarea , f_repair ] , [ f_empty ] ] ) ;
55978: LD_ADDR_VAR 0 13
55982: PUSH
55983: LD_VAR 0 4
55987: PPUSH
55988: LD_INT 95
55990: PUSH
55991: LD_VAR 0 22
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: PUSH
56000: LD_INT 58
56002: PUSH
56003: EMPTY
56004: LIST
56005: PUSH
56006: EMPTY
56007: LIST
56008: LIST
56009: PPUSH
56010: CALL_OW 72
56014: ST_TO_ADDR
// if not HasTask ( group [ i ] ) then
56015: LD_VAR 0 4
56019: PUSH
56020: LD_VAR 0 7
56024: ARRAY
56025: PPUSH
56026: CALL_OW 314
56030: NOT
56031: IFFALSE 56153
// begin x := NearestUnitToUnit ( z , group [ i ] ) ;
56033: LD_ADDR_VAR 0 10
56037: PUSH
56038: LD_VAR 0 13
56042: PPUSH
56043: LD_VAR 0 4
56047: PUSH
56048: LD_VAR 0 7
56052: ARRAY
56053: PPUSH
56054: CALL_OW 74
56058: ST_TO_ADDR
// if not x then
56059: LD_VAR 0 10
56063: NOT
56064: IFFALSE 56068
// continue ;
56066: GO 55500
// if GetLives ( x ) < 1000 then
56068: LD_VAR 0 10
56072: PPUSH
56073: CALL_OW 256
56077: PUSH
56078: LD_INT 1000
56080: LESS
56081: IFFALSE 56105
// ComRepairVehicle ( group [ i ] , x ) else
56083: LD_VAR 0 4
56087: PUSH
56088: LD_VAR 0 7
56092: ARRAY
56093: PPUSH
56094: LD_VAR 0 10
56098: PPUSH
56099: CALL_OW 129
56103: GO 56153
// if not ( f_heal and GetLives ( group [ i ] ) < 1000 ) then
56105: LD_VAR 0 23
56109: PUSH
56110: LD_VAR 0 4
56114: PUSH
56115: LD_VAR 0 7
56119: ARRAY
56120: PPUSH
56121: CALL_OW 256
56125: PUSH
56126: LD_INT 1000
56128: LESS
56129: AND
56130: NOT
56131: IFFALSE 56153
// ComEnterUnit ( group [ i ] , x ) ;
56133: LD_VAR 0 4
56137: PUSH
56138: LD_VAR 0 7
56142: ARRAY
56143: PPUSH
56144: LD_VAR 0 10
56148: PPUSH
56149: CALL_OW 120
// end ; continue ;
56153: GO 55500
// end ; end ; end ; if f_heal and GetType ( group [ i ] ) = unit_human then
56155: LD_VAR 0 23
56159: PUSH
56160: LD_VAR 0 4
56164: PUSH
56165: LD_VAR 0 7
56169: ARRAY
56170: PPUSH
56171: CALL_OW 247
56175: PUSH
56176: LD_INT 1
56178: EQUAL
56179: AND
56180: IFFALSE 56658
// begin if group [ i ] in healers then
56182: LD_VAR 0 4
56186: PUSH
56187: LD_VAR 0 7
56191: ARRAY
56192: PUSH
56193: LD_VAR 0 31
56197: IN
56198: IFFALSE 56471
// begin if not IsInArea ( group [ i ] , f_heal ) and not HasTask ( group [ i ] ) then
56200: LD_VAR 0 4
56204: PUSH
56205: LD_VAR 0 7
56209: ARRAY
56210: PPUSH
56211: LD_VAR 0 23
56215: PPUSH
56216: CALL_OW 308
56220: NOT
56221: PUSH
56222: LD_VAR 0 4
56226: PUSH
56227: LD_VAR 0 7
56231: ARRAY
56232: PPUSH
56233: CALL_OW 314
56237: NOT
56238: AND
56239: IFFALSE 56263
// ComMoveToArea ( group [ i ] , f_heal ) else
56241: LD_VAR 0 4
56245: PUSH
56246: LD_VAR 0 7
56250: ARRAY
56251: PPUSH
56252: LD_VAR 0 23
56256: PPUSH
56257: CALL_OW 113
56261: GO 56469
// if GetLives ( HealTarget ( group [ i ] ) ) = 1000 then
56263: LD_VAR 0 4
56267: PUSH
56268: LD_VAR 0 7
56272: ARRAY
56273: PPUSH
56274: CALL 54881 0 1
56278: PPUSH
56279: CALL_OW 256
56283: PUSH
56284: LD_INT 1000
56286: EQUAL
56287: IFFALSE 56306
// ComStop ( group [ i ] ) else
56289: LD_VAR 0 4
56293: PUSH
56294: LD_VAR 0 7
56298: ARRAY
56299: PPUSH
56300: CALL_OW 141
56304: GO 56469
// if not HasTask ( group [ i ] ) and to_heal then
56306: LD_VAR 0 4
56310: PUSH
56311: LD_VAR 0 7
56315: ARRAY
56316: PPUSH
56317: CALL_OW 314
56321: NOT
56322: PUSH
56323: LD_VAR 0 30
56327: AND
56328: IFFALSE 56469
// begin z := NearestUnitToUnit ( UnitFilter ( to_heal , [ f_not , [ f_inside ] ] ) , group [ i ] ) ;
56330: LD_ADDR_VAR 0 13
56334: PUSH
56335: LD_VAR 0 30
56339: PPUSH
56340: LD_INT 3
56342: PUSH
56343: LD_INT 54
56345: PUSH
56346: EMPTY
56347: LIST
56348: PUSH
56349: EMPTY
56350: LIST
56351: LIST
56352: PPUSH
56353: CALL_OW 72
56357: PPUSH
56358: LD_VAR 0 4
56362: PUSH
56363: LD_VAR 0 7
56367: ARRAY
56368: PPUSH
56369: CALL_OW 74
56373: ST_TO_ADDR
// if z then
56374: LD_VAR 0 13
56378: IFFALSE 56469
// if FilterAllUnits ( [ [ f_dist , z , 10 ] , [ f_enemy , GetSide ( z ) ] ] ) = 0 then
56380: LD_INT 91
56382: PUSH
56383: LD_VAR 0 13
56387: PUSH
56388: LD_INT 10
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: LIST
56395: PUSH
56396: LD_INT 81
56398: PUSH
56399: LD_VAR 0 13
56403: PPUSH
56404: CALL_OW 255
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: PPUSH
56417: CALL_OW 69
56421: PUSH
56422: LD_INT 0
56424: EQUAL
56425: IFFALSE 56449
// ComHeal ( group [ i ] , z ) else
56427: LD_VAR 0 4
56431: PUSH
56432: LD_VAR 0 7
56436: ARRAY
56437: PPUSH
56438: LD_VAR 0 13
56442: PPUSH
56443: CALL_OW 128
56447: GO 56469
// ComMoveToArea ( group [ i ] , f_heal ) ;
56449: LD_VAR 0 4
56453: PUSH
56454: LD_VAR 0 7
56458: ARRAY
56459: PPUSH
56460: LD_VAR 0 23
56464: PPUSH
56465: CALL_OW 113
// end ; continue ;
56469: GO 55500
// end ; if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_heal then
56471: LD_VAR 0 4
56475: PUSH
56476: LD_VAR 0 7
56480: ARRAY
56481: PPUSH
56482: CALL_OW 256
56486: PUSH
56487: LD_INT 700
56489: LESS
56490: PUSH
56491: LD_VAR 0 4
56495: PUSH
56496: LD_VAR 0 7
56500: ARRAY
56501: PUSH
56502: LD_VAR 0 30
56506: IN
56507: NOT
56508: AND
56509: IFFALSE 56533
// to_heal := to_heal union group [ i ] ;
56511: LD_ADDR_VAR 0 30
56515: PUSH
56516: LD_VAR 0 30
56520: PUSH
56521: LD_VAR 0 4
56525: PUSH
56526: LD_VAR 0 7
56530: ARRAY
56531: UNION
56532: ST_TO_ADDR
// if group [ i ] in to_heal then
56533: LD_VAR 0 4
56537: PUSH
56538: LD_VAR 0 7
56542: ARRAY
56543: PUSH
56544: LD_VAR 0 30
56548: IN
56549: IFFALSE 56658
// begin if GetLives ( group [ i ] ) = 1000 then
56551: LD_VAR 0 4
56555: PUSH
56556: LD_VAR 0 7
56560: ARRAY
56561: PPUSH
56562: CALL_OW 256
56566: PUSH
56567: LD_INT 1000
56569: EQUAL
56570: IFFALSE 56596
// to_heal := to_heal diff group [ i ] else
56572: LD_ADDR_VAR 0 30
56576: PUSH
56577: LD_VAR 0 30
56581: PUSH
56582: LD_VAR 0 4
56586: PUSH
56587: LD_VAR 0 7
56591: ARRAY
56592: DIFF
56593: ST_TO_ADDR
56594: GO 56658
// begin if not IsInArea ( group [ i ] , to_heal ) then
56596: LD_VAR 0 4
56600: PUSH
56601: LD_VAR 0 7
56605: ARRAY
56606: PPUSH
56607: LD_VAR 0 30
56611: PPUSH
56612: CALL_OW 308
56616: NOT
56617: IFFALSE 56641
// ComMoveToArea ( group [ i ] , f_heal ) else
56619: LD_VAR 0 4
56623: PUSH
56624: LD_VAR 0 7
56628: ARRAY
56629: PPUSH
56630: LD_VAR 0 23
56634: PPUSH
56635: CALL_OW 113
56639: GO 56656
// ComHold ( group [ i ] ) ;
56641: LD_VAR 0 4
56645: PUSH
56646: LD_VAR 0 7
56650: ARRAY
56651: PPUSH
56652: CALL_OW 140
// continue ;
56656: GO 55500
// end ; end ; end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
56658: LD_VAR 0 4
56662: PUSH
56663: LD_VAR 0 7
56667: ARRAY
56668: PPUSH
56669: LD_INT 10
56671: PPUSH
56672: CALL 53278 0 2
56676: NOT
56677: PUSH
56678: LD_VAR 0 16
56682: PUSH
56683: LD_VAR 0 7
56687: ARRAY
56688: PUSH
56689: EMPTY
56690: EQUAL
56691: NOT
56692: AND
56693: IFFALSE 56959
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
56695: LD_VAR 0 4
56699: PUSH
56700: LD_VAR 0 7
56704: ARRAY
56705: PPUSH
56706: CALL_OW 262
56710: PUSH
56711: LD_INT 1
56713: PUSH
56714: LD_INT 2
56716: PUSH
56717: EMPTY
56718: LIST
56719: LIST
56720: IN
56721: IFFALSE 56762
// if GetFuel ( group [ i ] ) < 10 then
56723: LD_VAR 0 4
56727: PUSH
56728: LD_VAR 0 7
56732: ARRAY
56733: PPUSH
56734: CALL_OW 261
56738: PUSH
56739: LD_INT 10
56741: LESS
56742: IFFALSE 56762
// SetFuel ( group [ i ] , 12 ) ;
56744: LD_VAR 0 4
56748: PUSH
56749: LD_VAR 0 7
56753: ARRAY
56754: PPUSH
56755: LD_INT 12
56757: PPUSH
56758: CALL_OW 240
// if units_path [ i ] then
56762: LD_VAR 0 16
56766: PUSH
56767: LD_VAR 0 7
56771: ARRAY
56772: IFFALSE 56957
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
56774: LD_VAR 0 4
56778: PUSH
56779: LD_VAR 0 7
56783: ARRAY
56784: PPUSH
56785: LD_VAR 0 16
56789: PUSH
56790: LD_VAR 0 7
56794: ARRAY
56795: PUSH
56796: LD_INT 1
56798: ARRAY
56799: PUSH
56800: LD_INT 1
56802: ARRAY
56803: PPUSH
56804: LD_VAR 0 16
56808: PUSH
56809: LD_VAR 0 7
56813: ARRAY
56814: PUSH
56815: LD_INT 1
56817: ARRAY
56818: PUSH
56819: LD_INT 2
56821: ARRAY
56822: PPUSH
56823: CALL_OW 297
56827: PUSH
56828: LD_INT 6
56830: GREATER
56831: IFFALSE 56906
// begin if not HasTask ( group [ i ] ) then
56833: LD_VAR 0 4
56837: PUSH
56838: LD_VAR 0 7
56842: ARRAY
56843: PPUSH
56844: CALL_OW 314
56848: NOT
56849: IFFALSE 56904
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
56851: LD_VAR 0 4
56855: PUSH
56856: LD_VAR 0 7
56860: ARRAY
56861: PPUSH
56862: LD_VAR 0 16
56866: PUSH
56867: LD_VAR 0 7
56871: ARRAY
56872: PUSH
56873: LD_INT 1
56875: ARRAY
56876: PUSH
56877: LD_INT 1
56879: ARRAY
56880: PPUSH
56881: LD_VAR 0 16
56885: PUSH
56886: LD_VAR 0 7
56890: ARRAY
56891: PUSH
56892: LD_INT 1
56894: ARRAY
56895: PUSH
56896: LD_INT 2
56898: ARRAY
56899: PPUSH
56900: CALL_OW 114
// end else
56904: GO 56957
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
56906: LD_ADDR_VAR 0 15
56910: PUSH
56911: LD_VAR 0 16
56915: PUSH
56916: LD_VAR 0 7
56920: ARRAY
56921: PPUSH
56922: LD_INT 1
56924: PPUSH
56925: CALL_OW 3
56929: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
56930: LD_ADDR_VAR 0 16
56934: PUSH
56935: LD_VAR 0 16
56939: PPUSH
56940: LD_VAR 0 7
56944: PPUSH
56945: LD_VAR 0 15
56949: PPUSH
56950: CALL_OW 1
56954: ST_TO_ADDR
// continue ;
56955: GO 55500
// end ; end ; end else
56957: GO 59595
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
56959: LD_ADDR_VAR 0 14
56963: PUSH
56964: LD_INT 81
56966: PUSH
56967: LD_VAR 0 4
56971: PUSH
56972: LD_VAR 0 7
56976: ARRAY
56977: PPUSH
56978: CALL_OW 255
56982: PUSH
56983: EMPTY
56984: LIST
56985: LIST
56986: PPUSH
56987: CALL_OW 69
56991: ST_TO_ADDR
// if not tmp then
56992: LD_VAR 0 14
56996: NOT
56997: IFFALSE 57001
// continue ;
56999: GO 55500
// if f_ignore_area then
57001: LD_VAR 0 17
57005: IFFALSE 57093
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
57007: LD_ADDR_VAR 0 15
57011: PUSH
57012: LD_VAR 0 14
57016: PPUSH
57017: LD_INT 3
57019: PUSH
57020: LD_INT 92
57022: PUSH
57023: LD_VAR 0 17
57027: PUSH
57028: LD_INT 1
57030: ARRAY
57031: PUSH
57032: LD_VAR 0 17
57036: PUSH
57037: LD_INT 2
57039: ARRAY
57040: PUSH
57041: LD_VAR 0 17
57045: PUSH
57046: LD_INT 3
57048: ARRAY
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: LIST
57054: LIST
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: PPUSH
57060: CALL_OW 72
57064: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
57065: LD_VAR 0 14
57069: PUSH
57070: LD_VAR 0 15
57074: DIFF
57075: IFFALSE 57093
// tmp := tmp diff tmp2 ;
57077: LD_ADDR_VAR 0 14
57081: PUSH
57082: LD_VAR 0 14
57086: PUSH
57087: LD_VAR 0 15
57091: DIFF
57092: ST_TO_ADDR
// end ; if not f_murder then
57093: LD_VAR 0 20
57097: NOT
57098: IFFALSE 57156
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
57100: LD_ADDR_VAR 0 15
57104: PUSH
57105: LD_VAR 0 14
57109: PPUSH
57110: LD_INT 3
57112: PUSH
57113: LD_INT 50
57115: PUSH
57116: EMPTY
57117: LIST
57118: PUSH
57119: EMPTY
57120: LIST
57121: LIST
57122: PPUSH
57123: CALL_OW 72
57127: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
57128: LD_VAR 0 14
57132: PUSH
57133: LD_VAR 0 15
57137: DIFF
57138: IFFALSE 57156
// tmp := tmp diff tmp2 ;
57140: LD_ADDR_VAR 0 14
57144: PUSH
57145: LD_VAR 0 14
57149: PUSH
57150: LD_VAR 0 15
57154: DIFF
57155: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
57156: LD_ADDR_VAR 0 14
57160: PUSH
57161: LD_VAR 0 4
57165: PUSH
57166: LD_VAR 0 7
57170: ARRAY
57171: PPUSH
57172: LD_VAR 0 14
57176: PPUSH
57177: LD_INT 1
57179: PPUSH
57180: LD_INT 1
57182: PPUSH
57183: CALL 26921 0 4
57187: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
57188: LD_VAR 0 4
57192: PUSH
57193: LD_VAR 0 7
57197: ARRAY
57198: PPUSH
57199: CALL_OW 257
57203: PUSH
57204: LD_INT 1
57206: EQUAL
57207: IFFALSE 57655
// begin if WantPlant ( group [ i ] ) then
57209: LD_VAR 0 4
57213: PUSH
57214: LD_VAR 0 7
57218: ARRAY
57219: PPUSH
57220: CALL 26422 0 1
57224: IFFALSE 57228
// continue ;
57226: GO 55500
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
57228: LD_VAR 0 18
57232: PUSH
57233: LD_VAR 0 4
57237: PUSH
57238: LD_VAR 0 7
57242: ARRAY
57243: PPUSH
57244: CALL_OW 310
57248: NOT
57249: AND
57250: PUSH
57251: LD_VAR 0 14
57255: PUSH
57256: LD_INT 1
57258: ARRAY
57259: PUSH
57260: LD_VAR 0 14
57264: PPUSH
57265: LD_INT 21
57267: PUSH
57268: LD_INT 2
57270: PUSH
57271: EMPTY
57272: LIST
57273: LIST
57274: PUSH
57275: LD_INT 58
57277: PUSH
57278: EMPTY
57279: LIST
57280: PUSH
57281: EMPTY
57282: LIST
57283: LIST
57284: PPUSH
57285: CALL_OW 72
57289: IN
57290: AND
57291: IFFALSE 57327
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
57293: LD_VAR 0 4
57297: PUSH
57298: LD_VAR 0 7
57302: ARRAY
57303: PPUSH
57304: LD_VAR 0 14
57308: PUSH
57309: LD_INT 1
57311: ARRAY
57312: PPUSH
57313: CALL_OW 120
// attacking := true ;
57317: LD_ADDR_VAR 0 29
57321: PUSH
57322: LD_INT 1
57324: ST_TO_ADDR
// continue ;
57325: GO 55500
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
57327: LD_VAR 0 26
57331: PUSH
57332: LD_VAR 0 4
57336: PUSH
57337: LD_VAR 0 7
57341: ARRAY
57342: PPUSH
57343: CALL_OW 257
57347: PUSH
57348: LD_INT 1
57350: EQUAL
57351: AND
57352: PUSH
57353: LD_VAR 0 4
57357: PUSH
57358: LD_VAR 0 7
57362: ARRAY
57363: PPUSH
57364: CALL_OW 256
57368: PUSH
57369: LD_INT 800
57371: LESS
57372: AND
57373: PUSH
57374: LD_VAR 0 4
57378: PUSH
57379: LD_VAR 0 7
57383: ARRAY
57384: PPUSH
57385: CALL_OW 318
57389: NOT
57390: AND
57391: IFFALSE 57408
// ComCrawl ( group [ i ] ) ;
57393: LD_VAR 0 4
57397: PUSH
57398: LD_VAR 0 7
57402: ARRAY
57403: PPUSH
57404: CALL_OW 137
// if f_mines then
57408: LD_VAR 0 21
57412: IFFALSE 57655
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
57414: LD_VAR 0 14
57418: PUSH
57419: LD_INT 1
57421: ARRAY
57422: PPUSH
57423: CALL_OW 247
57427: PUSH
57428: LD_INT 3
57430: EQUAL
57431: PUSH
57432: LD_VAR 0 14
57436: PUSH
57437: LD_INT 1
57439: ARRAY
57440: PUSH
57441: LD_VAR 0 27
57445: IN
57446: NOT
57447: AND
57448: IFFALSE 57655
// begin x := GetX ( tmp [ 1 ] ) ;
57450: LD_ADDR_VAR 0 10
57454: PUSH
57455: LD_VAR 0 14
57459: PUSH
57460: LD_INT 1
57462: ARRAY
57463: PPUSH
57464: CALL_OW 250
57468: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
57469: LD_ADDR_VAR 0 11
57473: PUSH
57474: LD_VAR 0 14
57478: PUSH
57479: LD_INT 1
57481: ARRAY
57482: PPUSH
57483: CALL_OW 251
57487: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
57488: LD_ADDR_VAR 0 12
57492: PUSH
57493: LD_VAR 0 4
57497: PUSH
57498: LD_VAR 0 7
57502: ARRAY
57503: PPUSH
57504: CALL 53363 0 1
57508: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
57509: LD_VAR 0 4
57513: PUSH
57514: LD_VAR 0 7
57518: ARRAY
57519: PPUSH
57520: LD_VAR 0 10
57524: PPUSH
57525: LD_VAR 0 11
57529: PPUSH
57530: LD_VAR 0 14
57534: PUSH
57535: LD_INT 1
57537: ARRAY
57538: PPUSH
57539: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
57543: LD_VAR 0 4
57547: PUSH
57548: LD_VAR 0 7
57552: ARRAY
57553: PPUSH
57554: LD_VAR 0 10
57558: PPUSH
57559: LD_VAR 0 12
57563: PPUSH
57564: LD_INT 7
57566: PPUSH
57567: CALL_OW 272
57571: PPUSH
57572: LD_VAR 0 11
57576: PPUSH
57577: LD_VAR 0 12
57581: PPUSH
57582: LD_INT 7
57584: PPUSH
57585: CALL_OW 273
57589: PPUSH
57590: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
57594: LD_VAR 0 4
57598: PUSH
57599: LD_VAR 0 7
57603: ARRAY
57604: PPUSH
57605: LD_INT 71
57607: PPUSH
57608: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
57612: LD_ADDR_VAR 0 27
57616: PUSH
57617: LD_VAR 0 27
57621: PPUSH
57622: LD_VAR 0 27
57626: PUSH
57627: LD_INT 1
57629: PLUS
57630: PPUSH
57631: LD_VAR 0 14
57635: PUSH
57636: LD_INT 1
57638: ARRAY
57639: PPUSH
57640: CALL_OW 1
57644: ST_TO_ADDR
// attacking := true ;
57645: LD_ADDR_VAR 0 29
57649: PUSH
57650: LD_INT 1
57652: ST_TO_ADDR
// continue ;
57653: GO 55500
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
57655: LD_VAR 0 4
57659: PUSH
57660: LD_VAR 0 7
57664: ARRAY
57665: PPUSH
57666: CALL_OW 257
57670: PUSH
57671: LD_INT 17
57673: EQUAL
57674: PUSH
57675: LD_VAR 0 4
57679: PUSH
57680: LD_VAR 0 7
57684: ARRAY
57685: PPUSH
57686: CALL_OW 110
57690: PUSH
57691: LD_INT 71
57693: EQUAL
57694: NOT
57695: AND
57696: IFFALSE 57842
// begin attacking := false ;
57698: LD_ADDR_VAR 0 29
57702: PUSH
57703: LD_INT 0
57705: ST_TO_ADDR
// k := 5 ;
57706: LD_ADDR_VAR 0 9
57710: PUSH
57711: LD_INT 5
57713: ST_TO_ADDR
// if tmp < k then
57714: LD_VAR 0 14
57718: PUSH
57719: LD_VAR 0 9
57723: LESS
57724: IFFALSE 57736
// k := tmp ;
57726: LD_ADDR_VAR 0 9
57730: PUSH
57731: LD_VAR 0 14
57735: ST_TO_ADDR
// for j = 1 to k do
57736: LD_ADDR_VAR 0 8
57740: PUSH
57741: DOUBLE
57742: LD_INT 1
57744: DEC
57745: ST_TO_ADDR
57746: LD_VAR 0 9
57750: PUSH
57751: FOR_TO
57752: IFFALSE 57840
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
57754: LD_VAR 0 14
57758: PUSH
57759: LD_VAR 0 8
57763: ARRAY
57764: PUSH
57765: LD_VAR 0 14
57769: PPUSH
57770: LD_INT 58
57772: PUSH
57773: EMPTY
57774: LIST
57775: PPUSH
57776: CALL_OW 72
57780: IN
57781: NOT
57782: IFFALSE 57838
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
57784: LD_VAR 0 4
57788: PUSH
57789: LD_VAR 0 7
57793: ARRAY
57794: PPUSH
57795: LD_VAR 0 14
57799: PUSH
57800: LD_VAR 0 8
57804: ARRAY
57805: PPUSH
57806: CALL_OW 115
// attacking := true ;
57810: LD_ADDR_VAR 0 29
57814: PUSH
57815: LD_INT 1
57817: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
57818: LD_VAR 0 4
57822: PUSH
57823: LD_VAR 0 7
57827: ARRAY
57828: PPUSH
57829: LD_INT 71
57831: PPUSH
57832: CALL_OW 109
// continue ;
57836: GO 57751
// end ; end ;
57838: GO 57751
57840: POP
57841: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
57842: LD_VAR 0 4
57846: PUSH
57847: LD_VAR 0 7
57851: ARRAY
57852: PPUSH
57853: CALL_OW 257
57857: PUSH
57858: LD_INT 8
57860: EQUAL
57861: PUSH
57862: LD_VAR 0 4
57866: PUSH
57867: LD_VAR 0 7
57871: ARRAY
57872: PPUSH
57873: CALL_OW 264
57877: PUSH
57878: LD_INT 28
57880: PUSH
57881: LD_INT 45
57883: PUSH
57884: LD_INT 7
57886: PUSH
57887: LD_INT 47
57889: PUSH
57890: EMPTY
57891: LIST
57892: LIST
57893: LIST
57894: LIST
57895: IN
57896: OR
57897: IFFALSE 58127
// begin attacking := false ;
57899: LD_ADDR_VAR 0 29
57903: PUSH
57904: LD_INT 0
57906: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
57907: LD_VAR 0 14
57911: PUSH
57912: LD_INT 1
57914: ARRAY
57915: PPUSH
57916: CALL_OW 266
57920: PUSH
57921: LD_INT 32
57923: PUSH
57924: LD_INT 31
57926: PUSH
57927: LD_INT 33
57929: PUSH
57930: LD_INT 4
57932: PUSH
57933: LD_INT 5
57935: PUSH
57936: EMPTY
57937: LIST
57938: LIST
57939: LIST
57940: LIST
57941: LIST
57942: IN
57943: IFFALSE 58127
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
57945: LD_ADDR_VAR 0 9
57949: PUSH
57950: LD_VAR 0 14
57954: PUSH
57955: LD_INT 1
57957: ARRAY
57958: PPUSH
57959: CALL_OW 266
57963: PPUSH
57964: LD_VAR 0 14
57968: PUSH
57969: LD_INT 1
57971: ARRAY
57972: PPUSH
57973: CALL_OW 250
57977: PPUSH
57978: LD_VAR 0 14
57982: PUSH
57983: LD_INT 1
57985: ARRAY
57986: PPUSH
57987: CALL_OW 251
57991: PPUSH
57992: LD_VAR 0 14
57996: PUSH
57997: LD_INT 1
57999: ARRAY
58000: PPUSH
58001: CALL_OW 254
58005: PPUSH
58006: LD_VAR 0 14
58010: PUSH
58011: LD_INT 1
58013: ARRAY
58014: PPUSH
58015: CALL_OW 248
58019: PPUSH
58020: LD_INT 0
58022: PPUSH
58023: CALL 34733 0 6
58027: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
58028: LD_ADDR_VAR 0 8
58032: PUSH
58033: LD_VAR 0 4
58037: PUSH
58038: LD_VAR 0 7
58042: ARRAY
58043: PPUSH
58044: LD_VAR 0 9
58048: PPUSH
58049: CALL 53426 0 2
58053: ST_TO_ADDR
// if j then
58054: LD_VAR 0 8
58058: IFFALSE 58127
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
58060: LD_VAR 0 8
58064: PUSH
58065: LD_INT 1
58067: ARRAY
58068: PPUSH
58069: LD_VAR 0 8
58073: PUSH
58074: LD_INT 2
58076: ARRAY
58077: PPUSH
58078: CALL_OW 488
58082: IFFALSE 58127
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
58084: LD_VAR 0 4
58088: PUSH
58089: LD_VAR 0 7
58093: ARRAY
58094: PPUSH
58095: LD_VAR 0 8
58099: PUSH
58100: LD_INT 1
58102: ARRAY
58103: PPUSH
58104: LD_VAR 0 8
58108: PUSH
58109: LD_INT 2
58111: ARRAY
58112: PPUSH
58113: CALL_OW 116
// attacking := true ;
58117: LD_ADDR_VAR 0 29
58121: PUSH
58122: LD_INT 1
58124: ST_TO_ADDR
// continue ;
58125: GO 55500
// end ; end ; end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
58127: LD_VAR 0 4
58131: PUSH
58132: LD_VAR 0 7
58136: ARRAY
58137: PPUSH
58138: CALL_OW 265
58142: PUSH
58143: LD_INT 11
58145: EQUAL
58146: IFFALSE 58424
// begin k := 10 ;
58148: LD_ADDR_VAR 0 9
58152: PUSH
58153: LD_INT 10
58155: ST_TO_ADDR
// x := 0 ;
58156: LD_ADDR_VAR 0 10
58160: PUSH
58161: LD_INT 0
58163: ST_TO_ADDR
// if tmp < k then
58164: LD_VAR 0 14
58168: PUSH
58169: LD_VAR 0 9
58173: LESS
58174: IFFALSE 58186
// k := tmp ;
58176: LD_ADDR_VAR 0 9
58180: PUSH
58181: LD_VAR 0 14
58185: ST_TO_ADDR
// for j = k downto 1 do
58186: LD_ADDR_VAR 0 8
58190: PUSH
58191: DOUBLE
58192: LD_VAR 0 9
58196: INC
58197: ST_TO_ADDR
58198: LD_INT 1
58200: PUSH
58201: FOR_DOWNTO
58202: IFFALSE 58277
// begin if GetType ( tmp [ j ] ) = unit_human then
58204: LD_VAR 0 14
58208: PUSH
58209: LD_VAR 0 8
58213: ARRAY
58214: PPUSH
58215: CALL_OW 247
58219: PUSH
58220: LD_INT 1
58222: EQUAL
58223: IFFALSE 58275
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
58225: LD_VAR 0 4
58229: PUSH
58230: LD_VAR 0 7
58234: ARRAY
58235: PPUSH
58236: LD_VAR 0 14
58240: PUSH
58241: LD_VAR 0 8
58245: ARRAY
58246: PPUSH
58247: CALL 53697 0 2
// x := tmp [ j ] ;
58251: LD_ADDR_VAR 0 10
58255: PUSH
58256: LD_VAR 0 14
58260: PUSH
58261: LD_VAR 0 8
58265: ARRAY
58266: ST_TO_ADDR
// attacking := true ;
58267: LD_ADDR_VAR 0 29
58271: PUSH
58272: LD_INT 1
58274: ST_TO_ADDR
// end ; end ;
58275: GO 58201
58277: POP
58278: POP
// if not x then
58279: LD_VAR 0 10
58283: NOT
58284: IFFALSE 58424
// begin attacking := true ;
58286: LD_ADDR_VAR 0 29
58290: PUSH
58291: LD_INT 1
58293: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
58294: LD_VAR 0 4
58298: PUSH
58299: LD_VAR 0 7
58303: ARRAY
58304: PPUSH
58305: CALL_OW 250
58309: PPUSH
58310: LD_VAR 0 4
58314: PUSH
58315: LD_VAR 0 7
58319: ARRAY
58320: PPUSH
58321: CALL_OW 251
58325: PPUSH
58326: CALL_OW 546
58330: PUSH
58331: LD_INT 2
58333: ARRAY
58334: PUSH
58335: LD_VAR 0 14
58339: PUSH
58340: LD_INT 1
58342: ARRAY
58343: PPUSH
58344: CALL_OW 250
58348: PPUSH
58349: LD_VAR 0 14
58353: PUSH
58354: LD_INT 1
58356: ARRAY
58357: PPUSH
58358: CALL_OW 251
58362: PPUSH
58363: CALL_OW 546
58367: PUSH
58368: LD_INT 2
58370: ARRAY
58371: EQUAL
58372: IFFALSE 58400
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
58374: LD_VAR 0 4
58378: PUSH
58379: LD_VAR 0 7
58383: ARRAY
58384: PPUSH
58385: LD_VAR 0 14
58389: PUSH
58390: LD_INT 1
58392: ARRAY
58393: PPUSH
58394: CALL 53697 0 2
58398: GO 58424
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
58400: LD_VAR 0 4
58404: PUSH
58405: LD_VAR 0 7
58409: ARRAY
58410: PPUSH
58411: LD_VAR 0 14
58415: PUSH
58416: LD_INT 1
58418: ARRAY
58419: PPUSH
58420: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
58424: LD_VAR 0 4
58428: PUSH
58429: LD_VAR 0 7
58433: ARRAY
58434: PPUSH
58435: CALL_OW 264
58439: PUSH
58440: LD_INT 29
58442: EQUAL
58443: IFFALSE 58809
// begin if WantsToAttack ( group [ i ] ) in bombed then
58445: LD_VAR 0 4
58449: PUSH
58450: LD_VAR 0 7
58454: ARRAY
58455: PPUSH
58456: CALL_OW 319
58460: PUSH
58461: LD_VAR 0 28
58465: IN
58466: IFFALSE 58470
// continue ;
58468: GO 55500
// k := 8 ;
58470: LD_ADDR_VAR 0 9
58474: PUSH
58475: LD_INT 8
58477: ST_TO_ADDR
// x := 0 ;
58478: LD_ADDR_VAR 0 10
58482: PUSH
58483: LD_INT 0
58485: ST_TO_ADDR
// if tmp < k then
58486: LD_VAR 0 14
58490: PUSH
58491: LD_VAR 0 9
58495: LESS
58496: IFFALSE 58508
// k := tmp ;
58498: LD_ADDR_VAR 0 9
58502: PUSH
58503: LD_VAR 0 14
58507: ST_TO_ADDR
// for j = 1 to k do
58508: LD_ADDR_VAR 0 8
58512: PUSH
58513: DOUBLE
58514: LD_INT 1
58516: DEC
58517: ST_TO_ADDR
58518: LD_VAR 0 9
58522: PUSH
58523: FOR_TO
58524: IFFALSE 58656
// begin if GetType ( tmp [ j ] ) = unit_building then
58526: LD_VAR 0 14
58530: PUSH
58531: LD_VAR 0 8
58535: ARRAY
58536: PPUSH
58537: CALL_OW 247
58541: PUSH
58542: LD_INT 3
58544: EQUAL
58545: IFFALSE 58654
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
58547: LD_VAR 0 14
58551: PUSH
58552: LD_VAR 0 8
58556: ARRAY
58557: PUSH
58558: LD_VAR 0 28
58562: IN
58563: NOT
58564: PUSH
58565: LD_VAR 0 14
58569: PUSH
58570: LD_VAR 0 8
58574: ARRAY
58575: PPUSH
58576: CALL_OW 313
58580: AND
58581: IFFALSE 58654
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
58583: LD_VAR 0 4
58587: PUSH
58588: LD_VAR 0 7
58592: ARRAY
58593: PPUSH
58594: LD_VAR 0 14
58598: PUSH
58599: LD_VAR 0 8
58603: ARRAY
58604: PPUSH
58605: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
58609: LD_ADDR_VAR 0 28
58613: PUSH
58614: LD_VAR 0 28
58618: PPUSH
58619: LD_VAR 0 28
58623: PUSH
58624: LD_INT 1
58626: PLUS
58627: PPUSH
58628: LD_VAR 0 14
58632: PUSH
58633: LD_VAR 0 8
58637: ARRAY
58638: PPUSH
58639: CALL_OW 1
58643: ST_TO_ADDR
// attacking := true ;
58644: LD_ADDR_VAR 0 29
58648: PUSH
58649: LD_INT 1
58651: ST_TO_ADDR
// break ;
58652: GO 58656
// end ; end ;
58654: GO 58523
58656: POP
58657: POP
// if not attacking and f_attack_depot then
58658: LD_VAR 0 29
58662: NOT
58663: PUSH
58664: LD_VAR 0 25
58668: AND
58669: IFFALSE 58764
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
58671: LD_ADDR_VAR 0 13
58675: PUSH
58676: LD_VAR 0 14
58680: PPUSH
58681: LD_INT 2
58683: PUSH
58684: LD_INT 30
58686: PUSH
58687: LD_INT 0
58689: PUSH
58690: EMPTY
58691: LIST
58692: LIST
58693: PUSH
58694: LD_INT 30
58696: PUSH
58697: LD_INT 1
58699: PUSH
58700: EMPTY
58701: LIST
58702: LIST
58703: PUSH
58704: EMPTY
58705: LIST
58706: LIST
58707: LIST
58708: PPUSH
58709: CALL_OW 72
58713: ST_TO_ADDR
// if z then
58714: LD_VAR 0 13
58718: IFFALSE 58764
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
58720: LD_VAR 0 4
58724: PUSH
58725: LD_VAR 0 7
58729: ARRAY
58730: PPUSH
58731: LD_VAR 0 13
58735: PPUSH
58736: LD_VAR 0 4
58740: PUSH
58741: LD_VAR 0 7
58745: ARRAY
58746: PPUSH
58747: CALL_OW 74
58751: PPUSH
58752: CALL_OW 115
// attacking := true ;
58756: LD_ADDR_VAR 0 29
58760: PUSH
58761: LD_INT 1
58763: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
58764: LD_VAR 0 4
58768: PUSH
58769: LD_VAR 0 7
58773: ARRAY
58774: PPUSH
58775: CALL_OW 256
58779: PUSH
58780: LD_INT 500
58782: LESS
58783: IFFALSE 58809
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
58785: LD_VAR 0 4
58789: PUSH
58790: LD_VAR 0 7
58794: ARRAY
58795: PPUSH
58796: LD_VAR 0 14
58800: PUSH
58801: LD_INT 1
58803: ARRAY
58804: PPUSH
58805: CALL_OW 115
// end ; if GetWeapon ( group [ i ] ) = ru_time_lapser then
58809: LD_VAR 0 4
58813: PUSH
58814: LD_VAR 0 7
58818: ARRAY
58819: PPUSH
58820: CALL_OW 264
58824: PUSH
58825: LD_INT 49
58827: EQUAL
58828: IFFALSE 58949
// begin if not HasTask ( group [ i ] ) then
58830: LD_VAR 0 4
58834: PUSH
58835: LD_VAR 0 7
58839: ARRAY
58840: PPUSH
58841: CALL_OW 314
58845: NOT
58846: IFFALSE 58949
// begin k := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) , group [ i ] ) ;
58848: LD_ADDR_VAR 0 9
58852: PUSH
58853: LD_INT 81
58855: PUSH
58856: LD_VAR 0 4
58860: PUSH
58861: LD_VAR 0 7
58865: ARRAY
58866: PPUSH
58867: CALL_OW 255
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: PPUSH
58876: CALL_OW 69
58880: PPUSH
58881: LD_VAR 0 4
58885: PUSH
58886: LD_VAR 0 7
58890: ARRAY
58891: PPUSH
58892: CALL_OW 74
58896: ST_TO_ADDR
// if k then
58897: LD_VAR 0 9
58901: IFFALSE 58949
// if GetDistUnits ( group [ i ] , k ) > 10 then
58903: LD_VAR 0 4
58907: PUSH
58908: LD_VAR 0 7
58912: ARRAY
58913: PPUSH
58914: LD_VAR 0 9
58918: PPUSH
58919: CALL_OW 296
58923: PUSH
58924: LD_INT 10
58926: GREATER
58927: IFFALSE 58949
// ComMoveUnit ( group [ i ] , k ) ;
58929: LD_VAR 0 4
58933: PUSH
58934: LD_VAR 0 7
58938: ARRAY
58939: PPUSH
58940: LD_VAR 0 9
58944: PPUSH
58945: CALL_OW 112
// end ; end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
58949: LD_VAR 0 4
58953: PUSH
58954: LD_VAR 0 7
58958: ARRAY
58959: PPUSH
58960: CALL_OW 256
58964: PUSH
58965: LD_INT 250
58967: LESS
58968: PUSH
58969: LD_VAR 0 4
58973: PUSH
58974: LD_VAR 0 7
58978: ARRAY
58979: PUSH
58980: LD_INT 21
58982: PUSH
58983: LD_INT 2
58985: PUSH
58986: EMPTY
58987: LIST
58988: LIST
58989: PUSH
58990: LD_INT 23
58992: PUSH
58993: LD_INT 2
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: PPUSH
59004: CALL_OW 69
59008: IN
59009: AND
59010: IFFALSE 59135
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
59012: LD_ADDR_VAR 0 9
59016: PUSH
59017: LD_OWVAR 3
59021: PUSH
59022: LD_VAR 0 4
59026: PUSH
59027: LD_VAR 0 7
59031: ARRAY
59032: DIFF
59033: PPUSH
59034: LD_VAR 0 4
59038: PUSH
59039: LD_VAR 0 7
59043: ARRAY
59044: PPUSH
59045: CALL_OW 74
59049: ST_TO_ADDR
// if not k then
59050: LD_VAR 0 9
59054: NOT
59055: IFFALSE 59059
// continue ;
59057: GO 55500
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
59059: LD_VAR 0 9
59063: PUSH
59064: LD_INT 81
59066: PUSH
59067: LD_VAR 0 4
59071: PUSH
59072: LD_VAR 0 7
59076: ARRAY
59077: PPUSH
59078: CALL_OW 255
59082: PUSH
59083: EMPTY
59084: LIST
59085: LIST
59086: PPUSH
59087: CALL_OW 69
59091: IN
59092: PUSH
59093: LD_VAR 0 9
59097: PPUSH
59098: LD_VAR 0 4
59102: PUSH
59103: LD_VAR 0 7
59107: ARRAY
59108: PPUSH
59109: CALL_OW 296
59113: PUSH
59114: LD_INT 5
59116: LESS
59117: AND
59118: IFFALSE 59135
// ComAutodestruct ( group [ i ] ) ;
59120: LD_VAR 0 4
59124: PUSH
59125: LD_VAR 0 7
59129: ARRAY
59130: PPUSH
59131: CALL 53595 0 1
// end ; if f_attack_depot then
59135: LD_VAR 0 25
59139: IFFALSE 59251
// begin k := 6 ;
59141: LD_ADDR_VAR 0 9
59145: PUSH
59146: LD_INT 6
59148: ST_TO_ADDR
// if tmp < k then
59149: LD_VAR 0 14
59153: PUSH
59154: LD_VAR 0 9
59158: LESS
59159: IFFALSE 59171
// k := tmp ;
59161: LD_ADDR_VAR 0 9
59165: PUSH
59166: LD_VAR 0 14
59170: ST_TO_ADDR
// for j = 1 to k do
59171: LD_ADDR_VAR 0 8
59175: PUSH
59176: DOUBLE
59177: LD_INT 1
59179: DEC
59180: ST_TO_ADDR
59181: LD_VAR 0 9
59185: PUSH
59186: FOR_TO
59187: IFFALSE 59249
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
59189: LD_VAR 0 8
59193: PPUSH
59194: CALL_OW 266
59198: PUSH
59199: LD_INT 0
59201: PUSH
59202: LD_INT 1
59204: PUSH
59205: EMPTY
59206: LIST
59207: LIST
59208: IN
59209: IFFALSE 59247
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
59211: LD_VAR 0 4
59215: PUSH
59216: LD_VAR 0 7
59220: ARRAY
59221: PPUSH
59222: LD_VAR 0 14
59226: PUSH
59227: LD_VAR 0 8
59231: ARRAY
59232: PPUSH
59233: CALL_OW 115
// attacking := true ;
59237: LD_ADDR_VAR 0 29
59241: PUSH
59242: LD_INT 1
59244: ST_TO_ADDR
// break ;
59245: GO 59249
// end ;
59247: GO 59186
59249: POP
59250: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
59251: LD_VAR 0 4
59255: PUSH
59256: LD_VAR 0 7
59260: ARRAY
59261: PPUSH
59262: CALL_OW 302
59266: PUSH
59267: LD_VAR 0 29
59271: NOT
59272: AND
59273: IFFALSE 59595
// begin if GetTag ( group [ i ] ) = 71 then
59275: LD_VAR 0 4
59279: PUSH
59280: LD_VAR 0 7
59284: ARRAY
59285: PPUSH
59286: CALL_OW 110
59290: PUSH
59291: LD_INT 71
59293: EQUAL
59294: IFFALSE 59335
// begin if HasTask ( group [ i ] ) then
59296: LD_VAR 0 4
59300: PUSH
59301: LD_VAR 0 7
59305: ARRAY
59306: PPUSH
59307: CALL_OW 314
59311: IFFALSE 59317
// continue else
59313: GO 55500
59315: GO 59335
// SetTag ( group [ i ] , 0 ) ;
59317: LD_VAR 0 4
59321: PUSH
59322: LD_VAR 0 7
59326: ARRAY
59327: PPUSH
59328: LD_INT 0
59330: PPUSH
59331: CALL_OW 109
// end ; k := 8 ;
59335: LD_ADDR_VAR 0 9
59339: PUSH
59340: LD_INT 8
59342: ST_TO_ADDR
// x := 0 ;
59343: LD_ADDR_VAR 0 10
59347: PUSH
59348: LD_INT 0
59350: ST_TO_ADDR
// if tmp < k then
59351: LD_VAR 0 14
59355: PUSH
59356: LD_VAR 0 9
59360: LESS
59361: IFFALSE 59373
// k := tmp ;
59363: LD_ADDR_VAR 0 9
59367: PUSH
59368: LD_VAR 0 14
59372: ST_TO_ADDR
// for j = 1 to k do
59373: LD_ADDR_VAR 0 8
59377: PUSH
59378: DOUBLE
59379: LD_INT 1
59381: DEC
59382: ST_TO_ADDR
59383: LD_VAR 0 9
59387: PUSH
59388: FOR_TO
59389: IFFALSE 59487
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
59391: LD_VAR 0 14
59395: PUSH
59396: LD_VAR 0 8
59400: ARRAY
59401: PPUSH
59402: CALL_OW 247
59406: PUSH
59407: LD_INT 1
59409: EQUAL
59410: PUSH
59411: LD_VAR 0 14
59415: PUSH
59416: LD_VAR 0 8
59420: ARRAY
59421: PPUSH
59422: CALL_OW 256
59426: PUSH
59427: LD_INT 250
59429: LESS
59430: PUSH
59431: LD_VAR 0 20
59435: AND
59436: PUSH
59437: LD_VAR 0 20
59441: NOT
59442: PUSH
59443: LD_VAR 0 14
59447: PUSH
59448: LD_VAR 0 8
59452: ARRAY
59453: PPUSH
59454: CALL_OW 256
59458: PUSH
59459: LD_INT 250
59461: GREATEREQUAL
59462: AND
59463: OR
59464: AND
59465: IFFALSE 59485
// begin x := tmp [ j ] ;
59467: LD_ADDR_VAR 0 10
59471: PUSH
59472: LD_VAR 0 14
59476: PUSH
59477: LD_VAR 0 8
59481: ARRAY
59482: ST_TO_ADDR
// break ;
59483: GO 59487
// end ;
59485: GO 59388
59487: POP
59488: POP
// if x then
59489: LD_VAR 0 10
59493: IFFALSE 59517
// ComAttackUnit ( group [ i ] , x ) else
59495: LD_VAR 0 4
59499: PUSH
59500: LD_VAR 0 7
59504: ARRAY
59505: PPUSH
59506: LD_VAR 0 10
59510: PPUSH
59511: CALL_OW 115
59515: GO 59541
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
59517: LD_VAR 0 4
59521: PUSH
59522: LD_VAR 0 7
59526: ARRAY
59527: PPUSH
59528: LD_VAR 0 14
59532: PUSH
59533: LD_INT 1
59535: ARRAY
59536: PPUSH
59537: CALL_OW 115
// if not HasTask ( group [ i ] ) then
59541: LD_VAR 0 4
59545: PUSH
59546: LD_VAR 0 7
59550: ARRAY
59551: PPUSH
59552: CALL_OW 314
59556: NOT
59557: IFFALSE 59595
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
59559: LD_VAR 0 4
59563: PUSH
59564: LD_VAR 0 7
59568: ARRAY
59569: PPUSH
59570: LD_VAR 0 14
59574: PPUSH
59575: LD_VAR 0 4
59579: PUSH
59580: LD_VAR 0 7
59584: ARRAY
59585: PPUSH
59586: CALL_OW 74
59590: PPUSH
59591: CALL_OW 115
// end ; end ; end ;
59595: GO 55500
59597: POP
59598: POP
// wait ( 0 0$1 ) ;
59599: LD_INT 35
59601: PPUSH
59602: CALL_OW 67
// until group = [ ] or not FilterAllUnits ( [ f_enemy , side ] ) ;
59606: LD_VAR 0 4
59610: PUSH
59611: EMPTY
59612: EQUAL
59613: PUSH
59614: LD_INT 81
59616: PUSH
59617: LD_VAR 0 35
59621: PUSH
59622: EMPTY
59623: LIST
59624: LIST
59625: PPUSH
59626: CALL_OW 69
59630: NOT
59631: OR
59632: IFFALSE 55485
// end ;
59634: LD_VAR 0 2
59638: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
59639: LD_INT 0
59641: PPUSH
59642: PPUSH
59643: PPUSH
59644: PPUSH
// if not base_units then
59645: LD_VAR 0 1
59649: NOT
59650: IFFALSE 59654
// exit ;
59652: GO 59741
// result := false ;
59654: LD_ADDR_VAR 0 2
59658: PUSH
59659: LD_INT 0
59661: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
59662: LD_ADDR_VAR 0 5
59666: PUSH
59667: LD_VAR 0 1
59671: PPUSH
59672: LD_INT 21
59674: PUSH
59675: LD_INT 3
59677: PUSH
59678: EMPTY
59679: LIST
59680: LIST
59681: PPUSH
59682: CALL_OW 72
59686: ST_TO_ADDR
// if not tmp then
59687: LD_VAR 0 5
59691: NOT
59692: IFFALSE 59696
// exit ;
59694: GO 59741
// for i in tmp do
59696: LD_ADDR_VAR 0 3
59700: PUSH
59701: LD_VAR 0 5
59705: PUSH
59706: FOR_IN
59707: IFFALSE 59739
// begin result := EnemyInRange ( i , 22 ) ;
59709: LD_ADDR_VAR 0 2
59713: PUSH
59714: LD_VAR 0 3
59718: PPUSH
59719: LD_INT 22
59721: PPUSH
59722: CALL 53278 0 2
59726: ST_TO_ADDR
// if result then
59727: LD_VAR 0 2
59731: IFFALSE 59737
// exit ;
59733: POP
59734: POP
59735: GO 59741
// end ;
59737: GO 59706
59739: POP
59740: POP
// end ;
59741: LD_VAR 0 2
59745: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
59746: LD_INT 0
59748: PPUSH
59749: PPUSH
// if not units then
59750: LD_VAR 0 1
59754: NOT
59755: IFFALSE 59759
// exit ;
59757: GO 59829
// result := [ ] ;
59759: LD_ADDR_VAR 0 3
59763: PUSH
59764: EMPTY
59765: ST_TO_ADDR
// for i in units do
59766: LD_ADDR_VAR 0 4
59770: PUSH
59771: LD_VAR 0 1
59775: PUSH
59776: FOR_IN
59777: IFFALSE 59827
// if GetTag ( i ) = tag then
59779: LD_VAR 0 4
59783: PPUSH
59784: CALL_OW 110
59788: PUSH
59789: LD_VAR 0 2
59793: EQUAL
59794: IFFALSE 59825
// result := Insert ( result , result + 1 , i ) ;
59796: LD_ADDR_VAR 0 3
59800: PUSH
59801: LD_VAR 0 3
59805: PPUSH
59806: LD_VAR 0 3
59810: PUSH
59811: LD_INT 1
59813: PLUS
59814: PPUSH
59815: LD_VAR 0 4
59819: PPUSH
59820: CALL_OW 2
59824: ST_TO_ADDR
59825: GO 59776
59827: POP
59828: POP
// end ;
59829: LD_VAR 0 3
59833: RET
// export function IsDriver ( un ) ; begin
59834: LD_INT 0
59836: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
59837: LD_ADDR_VAR 0 2
59841: PUSH
59842: LD_VAR 0 1
59846: PUSH
59847: LD_INT 55
59849: PUSH
59850: EMPTY
59851: LIST
59852: PPUSH
59853: CALL_OW 69
59857: IN
59858: ST_TO_ADDR
// end ;
59859: LD_VAR 0 2
59863: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
59864: LD_INT 0
59866: PPUSH
59867: PPUSH
// list := [ ] ;
59868: LD_ADDR_VAR 0 5
59872: PUSH
59873: EMPTY
59874: ST_TO_ADDR
// case d of 0 :
59875: LD_VAR 0 3
59879: PUSH
59880: LD_INT 0
59882: DOUBLE
59883: EQUAL
59884: IFTRUE 59888
59886: GO 60021
59888: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
59889: LD_ADDR_VAR 0 5
59893: PUSH
59894: LD_VAR 0 1
59898: PUSH
59899: LD_INT 4
59901: MINUS
59902: PUSH
59903: LD_VAR 0 2
59907: PUSH
59908: LD_INT 4
59910: MINUS
59911: PUSH
59912: LD_INT 2
59914: PUSH
59915: EMPTY
59916: LIST
59917: LIST
59918: LIST
59919: PUSH
59920: LD_VAR 0 1
59924: PUSH
59925: LD_INT 3
59927: MINUS
59928: PUSH
59929: LD_VAR 0 2
59933: PUSH
59934: LD_INT 1
59936: PUSH
59937: EMPTY
59938: LIST
59939: LIST
59940: LIST
59941: PUSH
59942: LD_VAR 0 1
59946: PUSH
59947: LD_INT 4
59949: PLUS
59950: PUSH
59951: LD_VAR 0 2
59955: PUSH
59956: LD_INT 4
59958: PUSH
59959: EMPTY
59960: LIST
59961: LIST
59962: LIST
59963: PUSH
59964: LD_VAR 0 1
59968: PUSH
59969: LD_INT 3
59971: PLUS
59972: PUSH
59973: LD_VAR 0 2
59977: PUSH
59978: LD_INT 3
59980: PLUS
59981: PUSH
59982: LD_INT 5
59984: PUSH
59985: EMPTY
59986: LIST
59987: LIST
59988: LIST
59989: PUSH
59990: LD_VAR 0 1
59994: PUSH
59995: LD_VAR 0 2
59999: PUSH
60000: LD_INT 4
60002: PLUS
60003: PUSH
60004: LD_INT 0
60006: PUSH
60007: EMPTY
60008: LIST
60009: LIST
60010: LIST
60011: PUSH
60012: EMPTY
60013: LIST
60014: LIST
60015: LIST
60016: LIST
60017: LIST
60018: ST_TO_ADDR
// end ; 1 :
60019: GO 60719
60021: LD_INT 1
60023: DOUBLE
60024: EQUAL
60025: IFTRUE 60029
60027: GO 60162
60029: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
60030: LD_ADDR_VAR 0 5
60034: PUSH
60035: LD_VAR 0 1
60039: PUSH
60040: LD_VAR 0 2
60044: PUSH
60045: LD_INT 4
60047: MINUS
60048: PUSH
60049: LD_INT 3
60051: PUSH
60052: EMPTY
60053: LIST
60054: LIST
60055: LIST
60056: PUSH
60057: LD_VAR 0 1
60061: PUSH
60062: LD_INT 3
60064: MINUS
60065: PUSH
60066: LD_VAR 0 2
60070: PUSH
60071: LD_INT 3
60073: MINUS
60074: PUSH
60075: LD_INT 2
60077: PUSH
60078: EMPTY
60079: LIST
60080: LIST
60081: LIST
60082: PUSH
60083: LD_VAR 0 1
60087: PUSH
60088: LD_INT 4
60090: MINUS
60091: PUSH
60092: LD_VAR 0 2
60096: PUSH
60097: LD_INT 1
60099: PUSH
60100: EMPTY
60101: LIST
60102: LIST
60103: LIST
60104: PUSH
60105: LD_VAR 0 1
60109: PUSH
60110: LD_VAR 0 2
60114: PUSH
60115: LD_INT 3
60117: PLUS
60118: PUSH
60119: LD_INT 0
60121: PUSH
60122: EMPTY
60123: LIST
60124: LIST
60125: LIST
60126: PUSH
60127: LD_VAR 0 1
60131: PUSH
60132: LD_INT 4
60134: PLUS
60135: PUSH
60136: LD_VAR 0 2
60140: PUSH
60141: LD_INT 4
60143: PLUS
60144: PUSH
60145: LD_INT 5
60147: PUSH
60148: EMPTY
60149: LIST
60150: LIST
60151: LIST
60152: PUSH
60153: EMPTY
60154: LIST
60155: LIST
60156: LIST
60157: LIST
60158: LIST
60159: ST_TO_ADDR
// end ; 2 :
60160: GO 60719
60162: LD_INT 2
60164: DOUBLE
60165: EQUAL
60166: IFTRUE 60170
60168: GO 60299
60170: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
60171: LD_ADDR_VAR 0 5
60175: PUSH
60176: LD_VAR 0 1
60180: PUSH
60181: LD_VAR 0 2
60185: PUSH
60186: LD_INT 3
60188: MINUS
60189: PUSH
60190: LD_INT 3
60192: PUSH
60193: EMPTY
60194: LIST
60195: LIST
60196: LIST
60197: PUSH
60198: LD_VAR 0 1
60202: PUSH
60203: LD_INT 4
60205: PLUS
60206: PUSH
60207: LD_VAR 0 2
60211: PUSH
60212: LD_INT 4
60214: PUSH
60215: EMPTY
60216: LIST
60217: LIST
60218: LIST
60219: PUSH
60220: LD_VAR 0 1
60224: PUSH
60225: LD_VAR 0 2
60229: PUSH
60230: LD_INT 4
60232: PLUS
60233: PUSH
60234: LD_INT 0
60236: PUSH
60237: EMPTY
60238: LIST
60239: LIST
60240: LIST
60241: PUSH
60242: LD_VAR 0 1
60246: PUSH
60247: LD_INT 3
60249: MINUS
60250: PUSH
60251: LD_VAR 0 2
60255: PUSH
60256: LD_INT 1
60258: PUSH
60259: EMPTY
60260: LIST
60261: LIST
60262: LIST
60263: PUSH
60264: LD_VAR 0 1
60268: PUSH
60269: LD_INT 4
60271: MINUS
60272: PUSH
60273: LD_VAR 0 2
60277: PUSH
60278: LD_INT 4
60280: MINUS
60281: PUSH
60282: LD_INT 2
60284: PUSH
60285: EMPTY
60286: LIST
60287: LIST
60288: LIST
60289: PUSH
60290: EMPTY
60291: LIST
60292: LIST
60293: LIST
60294: LIST
60295: LIST
60296: ST_TO_ADDR
// end ; 3 :
60297: GO 60719
60299: LD_INT 3
60301: DOUBLE
60302: EQUAL
60303: IFTRUE 60307
60305: GO 60440
60307: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
60308: LD_ADDR_VAR 0 5
60312: PUSH
60313: LD_VAR 0 1
60317: PUSH
60318: LD_INT 3
60320: PLUS
60321: PUSH
60322: LD_VAR 0 2
60326: PUSH
60327: LD_INT 4
60329: PUSH
60330: EMPTY
60331: LIST
60332: LIST
60333: LIST
60334: PUSH
60335: LD_VAR 0 1
60339: PUSH
60340: LD_INT 4
60342: PLUS
60343: PUSH
60344: LD_VAR 0 2
60348: PUSH
60349: LD_INT 4
60351: PLUS
60352: PUSH
60353: LD_INT 5
60355: PUSH
60356: EMPTY
60357: LIST
60358: LIST
60359: LIST
60360: PUSH
60361: LD_VAR 0 1
60365: PUSH
60366: LD_INT 4
60368: MINUS
60369: PUSH
60370: LD_VAR 0 2
60374: PUSH
60375: LD_INT 1
60377: PUSH
60378: EMPTY
60379: LIST
60380: LIST
60381: LIST
60382: PUSH
60383: LD_VAR 0 1
60387: PUSH
60388: LD_VAR 0 2
60392: PUSH
60393: LD_INT 4
60395: MINUS
60396: PUSH
60397: LD_INT 3
60399: PUSH
60400: EMPTY
60401: LIST
60402: LIST
60403: LIST
60404: PUSH
60405: LD_VAR 0 1
60409: PUSH
60410: LD_INT 3
60412: MINUS
60413: PUSH
60414: LD_VAR 0 2
60418: PUSH
60419: LD_INT 3
60421: MINUS
60422: PUSH
60423: LD_INT 2
60425: PUSH
60426: EMPTY
60427: LIST
60428: LIST
60429: LIST
60430: PUSH
60431: EMPTY
60432: LIST
60433: LIST
60434: LIST
60435: LIST
60436: LIST
60437: ST_TO_ADDR
// end ; 4 :
60438: GO 60719
60440: LD_INT 4
60442: DOUBLE
60443: EQUAL
60444: IFTRUE 60448
60446: GO 60581
60448: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
60449: LD_ADDR_VAR 0 5
60453: PUSH
60454: LD_VAR 0 1
60458: PUSH
60459: LD_VAR 0 2
60463: PUSH
60464: LD_INT 4
60466: PLUS
60467: PUSH
60468: LD_INT 0
60470: PUSH
60471: EMPTY
60472: LIST
60473: LIST
60474: LIST
60475: PUSH
60476: LD_VAR 0 1
60480: PUSH
60481: LD_INT 3
60483: PLUS
60484: PUSH
60485: LD_VAR 0 2
60489: PUSH
60490: LD_INT 3
60492: PLUS
60493: PUSH
60494: LD_INT 5
60496: PUSH
60497: EMPTY
60498: LIST
60499: LIST
60500: LIST
60501: PUSH
60502: LD_VAR 0 1
60506: PUSH
60507: LD_INT 4
60509: PLUS
60510: PUSH
60511: LD_VAR 0 2
60515: PUSH
60516: LD_INT 4
60518: PUSH
60519: EMPTY
60520: LIST
60521: LIST
60522: LIST
60523: PUSH
60524: LD_VAR 0 1
60528: PUSH
60529: LD_VAR 0 2
60533: PUSH
60534: LD_INT 3
60536: MINUS
60537: PUSH
60538: LD_INT 3
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: LIST
60545: PUSH
60546: LD_VAR 0 1
60550: PUSH
60551: LD_INT 4
60553: MINUS
60554: PUSH
60555: LD_VAR 0 2
60559: PUSH
60560: LD_INT 4
60562: MINUS
60563: PUSH
60564: LD_INT 2
60566: PUSH
60567: EMPTY
60568: LIST
60569: LIST
60570: LIST
60571: PUSH
60572: EMPTY
60573: LIST
60574: LIST
60575: LIST
60576: LIST
60577: LIST
60578: ST_TO_ADDR
// end ; 5 :
60579: GO 60719
60581: LD_INT 5
60583: DOUBLE
60584: EQUAL
60585: IFTRUE 60589
60587: GO 60718
60589: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
60590: LD_ADDR_VAR 0 5
60594: PUSH
60595: LD_VAR 0 1
60599: PUSH
60600: LD_INT 4
60602: MINUS
60603: PUSH
60604: LD_VAR 0 2
60608: PUSH
60609: LD_INT 1
60611: PUSH
60612: EMPTY
60613: LIST
60614: LIST
60615: LIST
60616: PUSH
60617: LD_VAR 0 1
60621: PUSH
60622: LD_VAR 0 2
60626: PUSH
60627: LD_INT 4
60629: MINUS
60630: PUSH
60631: LD_INT 3
60633: PUSH
60634: EMPTY
60635: LIST
60636: LIST
60637: LIST
60638: PUSH
60639: LD_VAR 0 1
60643: PUSH
60644: LD_INT 4
60646: PLUS
60647: PUSH
60648: LD_VAR 0 2
60652: PUSH
60653: LD_INT 4
60655: PLUS
60656: PUSH
60657: LD_INT 5
60659: PUSH
60660: EMPTY
60661: LIST
60662: LIST
60663: LIST
60664: PUSH
60665: LD_VAR 0 1
60669: PUSH
60670: LD_INT 3
60672: PLUS
60673: PUSH
60674: LD_VAR 0 2
60678: PUSH
60679: LD_INT 4
60681: PUSH
60682: EMPTY
60683: LIST
60684: LIST
60685: LIST
60686: PUSH
60687: LD_VAR 0 1
60691: PUSH
60692: LD_VAR 0 2
60696: PUSH
60697: LD_INT 3
60699: PLUS
60700: PUSH
60701: LD_INT 0
60703: PUSH
60704: EMPTY
60705: LIST
60706: LIST
60707: LIST
60708: PUSH
60709: EMPTY
60710: LIST
60711: LIST
60712: LIST
60713: LIST
60714: LIST
60715: ST_TO_ADDR
// end ; end ;
60716: GO 60719
60718: POP
// result := list ;
60719: LD_ADDR_VAR 0 4
60723: PUSH
60724: LD_VAR 0 5
60728: ST_TO_ADDR
// end ;
60729: LD_VAR 0 4
60733: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
60734: LD_INT 0
60736: PPUSH
60737: PPUSH
60738: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
60739: LD_VAR 0 1
60743: NOT
60744: PUSH
60745: LD_VAR 0 2
60749: PUSH
60750: LD_INT 1
60752: PUSH
60753: LD_INT 2
60755: PUSH
60756: LD_INT 3
60758: PUSH
60759: LD_INT 4
60761: PUSH
60762: EMPTY
60763: LIST
60764: LIST
60765: LIST
60766: LIST
60767: IN
60768: NOT
60769: OR
60770: IFFALSE 60774
// exit ;
60772: GO 60866
// tmp := [ ] ;
60774: LD_ADDR_VAR 0 5
60778: PUSH
60779: EMPTY
60780: ST_TO_ADDR
// for i in units do
60781: LD_ADDR_VAR 0 4
60785: PUSH
60786: LD_VAR 0 1
60790: PUSH
60791: FOR_IN
60792: IFFALSE 60835
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
60794: LD_ADDR_VAR 0 5
60798: PUSH
60799: LD_VAR 0 5
60803: PPUSH
60804: LD_VAR 0 5
60808: PUSH
60809: LD_INT 1
60811: PLUS
60812: PPUSH
60813: LD_VAR 0 4
60817: PPUSH
60818: LD_VAR 0 2
60822: PPUSH
60823: CALL_OW 259
60827: PPUSH
60828: CALL_OW 2
60832: ST_TO_ADDR
60833: GO 60791
60835: POP
60836: POP
// if not tmp then
60837: LD_VAR 0 5
60841: NOT
60842: IFFALSE 60846
// exit ;
60844: GO 60866
// result := SortListByListDesc ( units , tmp ) ;
60846: LD_ADDR_VAR 0 3
60850: PUSH
60851: LD_VAR 0 1
60855: PPUSH
60856: LD_VAR 0 5
60860: PPUSH
60861: CALL_OW 77
60865: ST_TO_ADDR
// end ;
60866: LD_VAR 0 3
60870: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
60871: LD_INT 0
60873: PPUSH
60874: PPUSH
60875: PPUSH
// x := GetX ( building ) ;
60876: LD_ADDR_VAR 0 4
60880: PUSH
60881: LD_VAR 0 2
60885: PPUSH
60886: CALL_OW 250
60890: ST_TO_ADDR
// y := GetY ( building ) ;
60891: LD_ADDR_VAR 0 5
60895: PUSH
60896: LD_VAR 0 2
60900: PPUSH
60901: CALL_OW 251
60905: ST_TO_ADDR
// if GetTaskList ( unit ) then
60906: LD_VAR 0 1
60910: PPUSH
60911: CALL_OW 437
60915: IFFALSE 61010
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60917: LD_STRING e
60919: PUSH
60920: LD_VAR 0 1
60924: PPUSH
60925: CALL_OW 437
60929: PUSH
60930: LD_INT 1
60932: ARRAY
60933: PUSH
60934: LD_INT 1
60936: ARRAY
60937: EQUAL
60938: PUSH
60939: LD_VAR 0 4
60943: PUSH
60944: LD_VAR 0 1
60948: PPUSH
60949: CALL_OW 437
60953: PUSH
60954: LD_INT 1
60956: ARRAY
60957: PUSH
60958: LD_INT 2
60960: ARRAY
60961: EQUAL
60962: AND
60963: PUSH
60964: LD_VAR 0 5
60968: PUSH
60969: LD_VAR 0 1
60973: PPUSH
60974: CALL_OW 437
60978: PUSH
60979: LD_INT 1
60981: ARRAY
60982: PUSH
60983: LD_INT 3
60985: ARRAY
60986: EQUAL
60987: AND
60988: IFFALSE 61000
// result := true else
60990: LD_ADDR_VAR 0 3
60994: PUSH
60995: LD_INT 1
60997: ST_TO_ADDR
60998: GO 61008
// result := false ;
61000: LD_ADDR_VAR 0 3
61004: PUSH
61005: LD_INT 0
61007: ST_TO_ADDR
// end else
61008: GO 61018
// result := false ;
61010: LD_ADDR_VAR 0 3
61014: PUSH
61015: LD_INT 0
61017: ST_TO_ADDR
// end ;
61018: LD_VAR 0 3
61022: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
61023: LD_INT 0
61025: PPUSH
61026: PPUSH
61027: PPUSH
61028: PPUSH
// if not unit or not area then
61029: LD_VAR 0 1
61033: NOT
61034: PUSH
61035: LD_VAR 0 2
61039: NOT
61040: OR
61041: IFFALSE 61045
// exit ;
61043: GO 61209
// tmp := AreaToList ( area , i ) ;
61045: LD_ADDR_VAR 0 6
61049: PUSH
61050: LD_VAR 0 2
61054: PPUSH
61055: LD_VAR 0 5
61059: PPUSH
61060: CALL_OW 517
61064: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
61065: LD_ADDR_VAR 0 5
61069: PUSH
61070: DOUBLE
61071: LD_INT 1
61073: DEC
61074: ST_TO_ADDR
61075: LD_VAR 0 6
61079: PUSH
61080: LD_INT 1
61082: ARRAY
61083: PUSH
61084: FOR_TO
61085: IFFALSE 61207
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
61087: LD_ADDR_VAR 0 7
61091: PUSH
61092: LD_VAR 0 6
61096: PUSH
61097: LD_INT 1
61099: ARRAY
61100: PUSH
61101: LD_VAR 0 5
61105: ARRAY
61106: PUSH
61107: LD_VAR 0 6
61111: PUSH
61112: LD_INT 2
61114: ARRAY
61115: PUSH
61116: LD_VAR 0 5
61120: ARRAY
61121: PUSH
61122: EMPTY
61123: LIST
61124: LIST
61125: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
61126: LD_VAR 0 7
61130: PUSH
61131: LD_INT 1
61133: ARRAY
61134: PPUSH
61135: LD_VAR 0 7
61139: PUSH
61140: LD_INT 2
61142: ARRAY
61143: PPUSH
61144: CALL_OW 428
61148: PUSH
61149: LD_INT 0
61151: EQUAL
61152: IFFALSE 61205
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
61154: LD_VAR 0 1
61158: PPUSH
61159: LD_VAR 0 7
61163: PUSH
61164: LD_INT 1
61166: ARRAY
61167: PPUSH
61168: LD_VAR 0 7
61172: PUSH
61173: LD_INT 2
61175: ARRAY
61176: PPUSH
61177: LD_VAR 0 3
61181: PPUSH
61182: CALL_OW 48
// result := IsPlaced ( unit ) ;
61186: LD_ADDR_VAR 0 4
61190: PUSH
61191: LD_VAR 0 1
61195: PPUSH
61196: CALL_OW 305
61200: ST_TO_ADDR
// exit ;
61201: POP
61202: POP
61203: GO 61209
// end ; end ;
61205: GO 61084
61207: POP
61208: POP
// end ;
61209: LD_VAR 0 4
61213: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
61214: LD_INT 0
61216: PPUSH
61217: PPUSH
61218: PPUSH
// if not side or side > 8 then
61219: LD_VAR 0 1
61223: NOT
61224: PUSH
61225: LD_VAR 0 1
61229: PUSH
61230: LD_INT 8
61232: GREATER
61233: OR
61234: IFFALSE 61238
// exit ;
61236: GO 61425
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
61238: LD_ADDR_VAR 0 4
61242: PUSH
61243: LD_INT 22
61245: PUSH
61246: LD_VAR 0 1
61250: PUSH
61251: EMPTY
61252: LIST
61253: LIST
61254: PUSH
61255: LD_INT 21
61257: PUSH
61258: LD_INT 3
61260: PUSH
61261: EMPTY
61262: LIST
61263: LIST
61264: PUSH
61265: EMPTY
61266: LIST
61267: LIST
61268: PPUSH
61269: CALL_OW 69
61273: ST_TO_ADDR
// if not tmp then
61274: LD_VAR 0 4
61278: NOT
61279: IFFALSE 61283
// exit ;
61281: GO 61425
// enable_addtolog := true ;
61283: LD_ADDR_OWVAR 81
61287: PUSH
61288: LD_INT 1
61290: ST_TO_ADDR
// AddToLog ( [ ) ;
61291: LD_STRING [
61293: PPUSH
61294: CALL_OW 561
// for i in tmp do
61298: LD_ADDR_VAR 0 3
61302: PUSH
61303: LD_VAR 0 4
61307: PUSH
61308: FOR_IN
61309: IFFALSE 61416
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
61311: LD_STRING [
61313: PUSH
61314: LD_VAR 0 3
61318: PPUSH
61319: CALL_OW 266
61323: STR
61324: PUSH
61325: LD_STRING , 
61327: STR
61328: PUSH
61329: LD_VAR 0 3
61333: PPUSH
61334: CALL_OW 250
61338: STR
61339: PUSH
61340: LD_STRING , 
61342: STR
61343: PUSH
61344: LD_VAR 0 3
61348: PPUSH
61349: CALL_OW 251
61353: STR
61354: PUSH
61355: LD_STRING , 
61357: STR
61358: PUSH
61359: LD_VAR 0 3
61363: PPUSH
61364: CALL_OW 254
61368: STR
61369: PUSH
61370: LD_STRING , 
61372: STR
61373: PUSH
61374: LD_VAR 0 3
61378: PPUSH
61379: LD_INT 1
61381: PPUSH
61382: CALL_OW 268
61386: STR
61387: PUSH
61388: LD_STRING , 
61390: STR
61391: PUSH
61392: LD_VAR 0 3
61396: PPUSH
61397: LD_INT 2
61399: PPUSH
61400: CALL_OW 268
61404: STR
61405: PUSH
61406: LD_STRING ],
61408: STR
61409: PPUSH
61410: CALL_OW 561
// end ;
61414: GO 61308
61416: POP
61417: POP
// AddToLog ( ]; ) ;
61418: LD_STRING ];
61420: PPUSH
61421: CALL_OW 561
// end ;
61425: LD_VAR 0 2
61429: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
61430: LD_INT 0
61432: PPUSH
61433: PPUSH
61434: PPUSH
61435: PPUSH
61436: PPUSH
// if not area or not rate or not max then
61437: LD_VAR 0 1
61441: NOT
61442: PUSH
61443: LD_VAR 0 2
61447: NOT
61448: OR
61449: PUSH
61450: LD_VAR 0 4
61454: NOT
61455: OR
61456: IFFALSE 61460
// exit ;
61458: GO 61652
// while 1 do
61460: LD_INT 1
61462: IFFALSE 61652
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
61464: LD_ADDR_VAR 0 9
61468: PUSH
61469: LD_VAR 0 1
61473: PPUSH
61474: LD_INT 1
61476: PPUSH
61477: CALL_OW 287
61481: PUSH
61482: LD_INT 10
61484: MUL
61485: ST_TO_ADDR
// r := rate / 10 ;
61486: LD_ADDR_VAR 0 7
61490: PUSH
61491: LD_VAR 0 2
61495: PUSH
61496: LD_INT 10
61498: DIVREAL
61499: ST_TO_ADDR
// time := 1 1$00 ;
61500: LD_ADDR_VAR 0 8
61504: PUSH
61505: LD_INT 2100
61507: ST_TO_ADDR
// if amount < min then
61508: LD_VAR 0 9
61512: PUSH
61513: LD_VAR 0 3
61517: LESS
61518: IFFALSE 61536
// r := r * 2 else
61520: LD_ADDR_VAR 0 7
61524: PUSH
61525: LD_VAR 0 7
61529: PUSH
61530: LD_INT 2
61532: MUL
61533: ST_TO_ADDR
61534: GO 61562
// if amount > max then
61536: LD_VAR 0 9
61540: PUSH
61541: LD_VAR 0 4
61545: GREATER
61546: IFFALSE 61562
// r := r / 2 ;
61548: LD_ADDR_VAR 0 7
61552: PUSH
61553: LD_VAR 0 7
61557: PUSH
61558: LD_INT 2
61560: DIVREAL
61561: ST_TO_ADDR
// time := time / r ;
61562: LD_ADDR_VAR 0 8
61566: PUSH
61567: LD_VAR 0 8
61571: PUSH
61572: LD_VAR 0 7
61576: DIVREAL
61577: ST_TO_ADDR
// if time < 0 then
61578: LD_VAR 0 8
61582: PUSH
61583: LD_INT 0
61585: LESS
61586: IFFALSE 61603
// time := time * - 1 ;
61588: LD_ADDR_VAR 0 8
61592: PUSH
61593: LD_VAR 0 8
61597: PUSH
61598: LD_INT 1
61600: NEG
61601: MUL
61602: ST_TO_ADDR
// wait ( time ) ;
61603: LD_VAR 0 8
61607: PPUSH
61608: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
61612: LD_INT 35
61614: PPUSH
61615: LD_INT 875
61617: PPUSH
61618: CALL_OW 12
61622: PPUSH
61623: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
61627: LD_INT 1
61629: PPUSH
61630: LD_INT 5
61632: PPUSH
61633: CALL_OW 12
61637: PPUSH
61638: LD_VAR 0 1
61642: PPUSH
61643: LD_INT 1
61645: PPUSH
61646: CALL_OW 55
// end ;
61650: GO 61460
// end ;
61652: LD_VAR 0 5
61656: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
61657: LD_INT 0
61659: PPUSH
61660: PPUSH
61661: PPUSH
61662: PPUSH
61663: PPUSH
61664: PPUSH
61665: PPUSH
61666: PPUSH
// if not turrets or not factories then
61667: LD_VAR 0 1
61671: NOT
61672: PUSH
61673: LD_VAR 0 2
61677: NOT
61678: OR
61679: IFFALSE 61683
// exit ;
61681: GO 61990
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
61683: LD_ADDR_VAR 0 10
61687: PUSH
61688: LD_INT 5
61690: PUSH
61691: LD_INT 6
61693: PUSH
61694: EMPTY
61695: LIST
61696: LIST
61697: PUSH
61698: LD_INT 2
61700: PUSH
61701: LD_INT 4
61703: PUSH
61704: EMPTY
61705: LIST
61706: LIST
61707: PUSH
61708: LD_INT 3
61710: PUSH
61711: LD_INT 5
61713: PUSH
61714: EMPTY
61715: LIST
61716: LIST
61717: PUSH
61718: EMPTY
61719: LIST
61720: LIST
61721: LIST
61722: PUSH
61723: LD_INT 24
61725: PUSH
61726: LD_INT 25
61728: PUSH
61729: EMPTY
61730: LIST
61731: LIST
61732: PUSH
61733: LD_INT 23
61735: PUSH
61736: LD_INT 27
61738: PUSH
61739: EMPTY
61740: LIST
61741: LIST
61742: PUSH
61743: EMPTY
61744: LIST
61745: LIST
61746: PUSH
61747: LD_INT 42
61749: PUSH
61750: LD_INT 43
61752: PUSH
61753: EMPTY
61754: LIST
61755: LIST
61756: PUSH
61757: LD_INT 44
61759: PUSH
61760: LD_INT 46
61762: PUSH
61763: EMPTY
61764: LIST
61765: LIST
61766: PUSH
61767: LD_INT 45
61769: PUSH
61770: LD_INT 47
61772: PUSH
61773: EMPTY
61774: LIST
61775: LIST
61776: PUSH
61777: EMPTY
61778: LIST
61779: LIST
61780: LIST
61781: PUSH
61782: EMPTY
61783: LIST
61784: LIST
61785: LIST
61786: ST_TO_ADDR
// result := [ ] ;
61787: LD_ADDR_VAR 0 3
61791: PUSH
61792: EMPTY
61793: ST_TO_ADDR
// for i in turrets do
61794: LD_ADDR_VAR 0 4
61798: PUSH
61799: LD_VAR 0 1
61803: PUSH
61804: FOR_IN
61805: IFFALSE 61988
// begin nat := GetNation ( i ) ;
61807: LD_ADDR_VAR 0 7
61811: PUSH
61812: LD_VAR 0 4
61816: PPUSH
61817: CALL_OW 248
61821: ST_TO_ADDR
// weapon := 0 ;
61822: LD_ADDR_VAR 0 8
61826: PUSH
61827: LD_INT 0
61829: ST_TO_ADDR
// if not nat then
61830: LD_VAR 0 7
61834: NOT
61835: IFFALSE 61839
// continue ;
61837: GO 61804
// for j in list [ nat ] do
61839: LD_ADDR_VAR 0 5
61843: PUSH
61844: LD_VAR 0 10
61848: PUSH
61849: LD_VAR 0 7
61853: ARRAY
61854: PUSH
61855: FOR_IN
61856: IFFALSE 61897
// if GetBWeapon ( i ) = j [ 1 ] then
61858: LD_VAR 0 4
61862: PPUSH
61863: CALL_OW 269
61867: PUSH
61868: LD_VAR 0 5
61872: PUSH
61873: LD_INT 1
61875: ARRAY
61876: EQUAL
61877: IFFALSE 61895
// begin weapon := j [ 2 ] ;
61879: LD_ADDR_VAR 0 8
61883: PUSH
61884: LD_VAR 0 5
61888: PUSH
61889: LD_INT 2
61891: ARRAY
61892: ST_TO_ADDR
// break ;
61893: GO 61897
// end ;
61895: GO 61855
61897: POP
61898: POP
// if not weapon then
61899: LD_VAR 0 8
61903: NOT
61904: IFFALSE 61908
// continue ;
61906: GO 61804
// for k in factories do
61908: LD_ADDR_VAR 0 6
61912: PUSH
61913: LD_VAR 0 2
61917: PUSH
61918: FOR_IN
61919: IFFALSE 61984
// begin weapons := AvailableWeaponList ( k ) ;
61921: LD_ADDR_VAR 0 9
61925: PUSH
61926: LD_VAR 0 6
61930: PPUSH
61931: CALL_OW 478
61935: ST_TO_ADDR
// if not weapons then
61936: LD_VAR 0 9
61940: NOT
61941: IFFALSE 61945
// continue ;
61943: GO 61918
// if weapon in weapons then
61945: LD_VAR 0 8
61949: PUSH
61950: LD_VAR 0 9
61954: IN
61955: IFFALSE 61982
// begin result := [ i , weapon ] ;
61957: LD_ADDR_VAR 0 3
61961: PUSH
61962: LD_VAR 0 4
61966: PUSH
61967: LD_VAR 0 8
61971: PUSH
61972: EMPTY
61973: LIST
61974: LIST
61975: ST_TO_ADDR
// exit ;
61976: POP
61977: POP
61978: POP
61979: POP
61980: GO 61990
// end ; end ;
61982: GO 61918
61984: POP
61985: POP
// end ;
61986: GO 61804
61988: POP
61989: POP
// end ;
61990: LD_VAR 0 3
61994: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
61995: LD_INT 0
61997: PPUSH
// if not side or side > 8 then
61998: LD_VAR 0 3
62002: NOT
62003: PUSH
62004: LD_VAR 0 3
62008: PUSH
62009: LD_INT 8
62011: GREATER
62012: OR
62013: IFFALSE 62017
// exit ;
62015: GO 62076
// if not range then
62017: LD_VAR 0 4
62021: NOT
62022: IFFALSE 62033
// range := - 12 ;
62024: LD_ADDR_VAR 0 4
62028: PUSH
62029: LD_INT 12
62031: NEG
62032: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
62033: LD_VAR 0 1
62037: PPUSH
62038: LD_VAR 0 2
62042: PPUSH
62043: LD_VAR 0 3
62047: PPUSH
62048: LD_VAR 0 4
62052: PPUSH
62053: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
62057: LD_VAR 0 1
62061: PPUSH
62062: LD_VAR 0 2
62066: PPUSH
62067: LD_VAR 0 3
62071: PPUSH
62072: CALL_OW 331
// end ;
62076: LD_VAR 0 5
62080: RET
// export function Video ( mode ) ; begin
62081: LD_INT 0
62083: PPUSH
// ingame_video = mode ;
62084: LD_ADDR_OWVAR 52
62088: PUSH
62089: LD_VAR 0 1
62093: ST_TO_ADDR
// interface_hidden = mode ;
62094: LD_ADDR_OWVAR 54
62098: PUSH
62099: LD_VAR 0 1
62103: ST_TO_ADDR
// end ;
62104: LD_VAR 0 2
62108: RET
// export function Join ( array , element ) ; begin
62109: LD_INT 0
62111: PPUSH
// result := array ^ element ;
62112: LD_ADDR_VAR 0 3
62116: PUSH
62117: LD_VAR 0 1
62121: PUSH
62122: LD_VAR 0 2
62126: ADD
62127: ST_TO_ADDR
// end ;
62128: LD_VAR 0 3
62132: RET
// export function JoinUnion ( array , element ) ; begin
62133: LD_INT 0
62135: PPUSH
// result := array union element ;
62136: LD_ADDR_VAR 0 3
62140: PUSH
62141: LD_VAR 0 1
62145: PUSH
62146: LD_VAR 0 2
62150: UNION
62151: ST_TO_ADDR
// end ;
62152: LD_VAR 0 3
62156: RET
// export function GetBehemoths ( side ) ; begin
62157: LD_INT 0
62159: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
62160: LD_ADDR_VAR 0 2
62164: PUSH
62165: LD_INT 22
62167: PUSH
62168: LD_VAR 0 1
62172: PUSH
62173: EMPTY
62174: LIST
62175: LIST
62176: PUSH
62177: LD_INT 31
62179: PUSH
62180: LD_INT 25
62182: PUSH
62183: EMPTY
62184: LIST
62185: LIST
62186: PUSH
62187: EMPTY
62188: LIST
62189: LIST
62190: PPUSH
62191: CALL_OW 69
62195: ST_TO_ADDR
// end ;
62196: LD_VAR 0 2
62200: RET
// export function Shuffle ( array ) ; var i , index ; begin
62201: LD_INT 0
62203: PPUSH
62204: PPUSH
62205: PPUSH
// result := [ ] ;
62206: LD_ADDR_VAR 0 2
62210: PUSH
62211: EMPTY
62212: ST_TO_ADDR
// if not array then
62213: LD_VAR 0 1
62217: NOT
62218: IFFALSE 62222
// exit ;
62220: GO 62321
// Randomize ;
62222: CALL_OW 10
// for i = array downto 1 do
62226: LD_ADDR_VAR 0 3
62230: PUSH
62231: DOUBLE
62232: LD_VAR 0 1
62236: INC
62237: ST_TO_ADDR
62238: LD_INT 1
62240: PUSH
62241: FOR_DOWNTO
62242: IFFALSE 62319
// begin index := rand ( 1 , array ) ;
62244: LD_ADDR_VAR 0 4
62248: PUSH
62249: LD_INT 1
62251: PPUSH
62252: LD_VAR 0 1
62256: PPUSH
62257: CALL_OW 12
62261: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
62262: LD_ADDR_VAR 0 2
62266: PUSH
62267: LD_VAR 0 2
62271: PPUSH
62272: LD_VAR 0 2
62276: PUSH
62277: LD_INT 1
62279: PLUS
62280: PPUSH
62281: LD_VAR 0 1
62285: PUSH
62286: LD_VAR 0 4
62290: ARRAY
62291: PPUSH
62292: CALL_OW 2
62296: ST_TO_ADDR
// array := Delete ( array , index ) ;
62297: LD_ADDR_VAR 0 1
62301: PUSH
62302: LD_VAR 0 1
62306: PPUSH
62307: LD_VAR 0 4
62311: PPUSH
62312: CALL_OW 3
62316: ST_TO_ADDR
// end ;
62317: GO 62241
62319: POP
62320: POP
// end ;
62321: LD_VAR 0 2
62325: RET
// export function GetBaseMaterials ( base ) ; begin
62326: LD_INT 0
62328: PPUSH
// result := [ 0 , 0 , 0 ] ;
62329: LD_ADDR_VAR 0 2
62333: PUSH
62334: LD_INT 0
62336: PUSH
62337: LD_INT 0
62339: PUSH
62340: LD_INT 0
62342: PUSH
62343: EMPTY
62344: LIST
62345: LIST
62346: LIST
62347: ST_TO_ADDR
// if not base then
62348: LD_VAR 0 1
62352: NOT
62353: IFFALSE 62357
// exit ;
62355: GO 62406
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
62357: LD_ADDR_VAR 0 2
62361: PUSH
62362: LD_VAR 0 1
62366: PPUSH
62367: LD_INT 1
62369: PPUSH
62370: CALL_OW 275
62374: PUSH
62375: LD_VAR 0 1
62379: PPUSH
62380: LD_INT 2
62382: PPUSH
62383: CALL_OW 275
62387: PUSH
62388: LD_VAR 0 1
62392: PPUSH
62393: LD_INT 3
62395: PPUSH
62396: CALL_OW 275
62400: PUSH
62401: EMPTY
62402: LIST
62403: LIST
62404: LIST
62405: ST_TO_ADDR
// end ; end_of_file
62406: LD_VAR 0 2
62410: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
62411: GO 62413
62413: DISABLE
// begin ru_radar := 98 ;
62414: LD_ADDR_EXP 29
62418: PUSH
62419: LD_INT 98
62421: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
62422: LD_ADDR_EXP 30
62426: PUSH
62427: LD_INT 89
62429: ST_TO_ADDR
// us_hack := 99 ;
62430: LD_ADDR_EXP 31
62434: PUSH
62435: LD_INT 99
62437: ST_TO_ADDR
// us_artillery := 97 ;
62438: LD_ADDR_EXP 32
62442: PUSH
62443: LD_INT 97
62445: ST_TO_ADDR
// ar_bio_bomb := 91 ;
62446: LD_ADDR_EXP 33
62450: PUSH
62451: LD_INT 91
62453: ST_TO_ADDR
// end ; end_of_file
62454: END
// export skirmish , debug_mc ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_teleport_exit_set , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver , mc_class , mc_class_case_use ; export function InitMacro ; var i ; begin
62455: LD_INT 0
62457: PPUSH
62458: PPUSH
// skirmish := false ;
62459: LD_ADDR_EXP 34
62463: PUSH
62464: LD_INT 0
62466: ST_TO_ADDR
// debug_mc := false ;
62467: LD_ADDR_EXP 35
62471: PUSH
62472: LD_INT 0
62474: ST_TO_ADDR
// mc_bases := [ ] ;
62475: LD_ADDR_EXP 36
62479: PUSH
62480: EMPTY
62481: ST_TO_ADDR
// mc_sides := [ ] ;
62482: LD_ADDR_EXP 62
62486: PUSH
62487: EMPTY
62488: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
62489: LD_ADDR_EXP 37
62493: PUSH
62494: EMPTY
62495: ST_TO_ADDR
// mc_building_repairs := [ ] ;
62496: LD_ADDR_EXP 38
62500: PUSH
62501: EMPTY
62502: ST_TO_ADDR
// mc_need_heal := [ ] ;
62503: LD_ADDR_EXP 39
62507: PUSH
62508: EMPTY
62509: ST_TO_ADDR
// mc_healers := [ ] ;
62510: LD_ADDR_EXP 40
62514: PUSH
62515: EMPTY
62516: ST_TO_ADDR
// mc_build_list := [ ] ;
62517: LD_ADDR_EXP 41
62521: PUSH
62522: EMPTY
62523: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
62524: LD_ADDR_EXP 68
62528: PUSH
62529: EMPTY
62530: ST_TO_ADDR
// mc_builders := [ ] ;
62531: LD_ADDR_EXP 42
62535: PUSH
62536: EMPTY
62537: ST_TO_ADDR
// mc_construct_list := [ ] ;
62538: LD_ADDR_EXP 43
62542: PUSH
62543: EMPTY
62544: ST_TO_ADDR
// mc_turret_list := [ ] ;
62545: LD_ADDR_EXP 44
62549: PUSH
62550: EMPTY
62551: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
62552: LD_ADDR_EXP 45
62556: PUSH
62557: EMPTY
62558: ST_TO_ADDR
// mc_miners := [ ] ;
62559: LD_ADDR_EXP 50
62563: PUSH
62564: EMPTY
62565: ST_TO_ADDR
// mc_mines := [ ] ;
62566: LD_ADDR_EXP 49
62570: PUSH
62571: EMPTY
62572: ST_TO_ADDR
// mc_minefields := [ ] ;
62573: LD_ADDR_EXP 51
62577: PUSH
62578: EMPTY
62579: ST_TO_ADDR
// mc_crates := [ ] ;
62580: LD_ADDR_EXP 52
62584: PUSH
62585: EMPTY
62586: ST_TO_ADDR
// mc_crates_collector := [ ] ;
62587: LD_ADDR_EXP 53
62591: PUSH
62592: EMPTY
62593: ST_TO_ADDR
// mc_crates_area := [ ] ;
62594: LD_ADDR_EXP 54
62598: PUSH
62599: EMPTY
62600: ST_TO_ADDR
// mc_vehicles := [ ] ;
62601: LD_ADDR_EXP 55
62605: PUSH
62606: EMPTY
62607: ST_TO_ADDR
// mc_attack := [ ] ;
62608: LD_ADDR_EXP 56
62612: PUSH
62613: EMPTY
62614: ST_TO_ADDR
// mc_produce := [ ] ;
62615: LD_ADDR_EXP 57
62619: PUSH
62620: EMPTY
62621: ST_TO_ADDR
// mc_defender := [ ] ;
62622: LD_ADDR_EXP 58
62626: PUSH
62627: EMPTY
62628: ST_TO_ADDR
// mc_parking := [ ] ;
62629: LD_ADDR_EXP 60
62633: PUSH
62634: EMPTY
62635: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
62636: LD_ADDR_EXP 46
62640: PUSH
62641: EMPTY
62642: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
62643: LD_ADDR_EXP 48
62647: PUSH
62648: EMPTY
62649: ST_TO_ADDR
// mc_scan := [ ] ;
62650: LD_ADDR_EXP 59
62654: PUSH
62655: EMPTY
62656: ST_TO_ADDR
// mc_scan_area := [ ] ;
62657: LD_ADDR_EXP 61
62661: PUSH
62662: EMPTY
62663: ST_TO_ADDR
// mc_tech := [ ] ;
62664: LD_ADDR_EXP 63
62668: PUSH
62669: EMPTY
62670: ST_TO_ADDR
// mc_class := [ ] ;
62671: LD_ADDR_EXP 77
62675: PUSH
62676: EMPTY
62677: ST_TO_ADDR
// mc_class_case_use := [ ] ;
62678: LD_ADDR_EXP 78
62682: PUSH
62683: EMPTY
62684: ST_TO_ADDR
// end ;
62685: LD_VAR 0 1
62689: RET
// export function MC_Kill ( base ) ; begin
62690: LD_INT 0
62692: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
62693: LD_ADDR_EXP 36
62697: PUSH
62698: LD_EXP 36
62702: PPUSH
62703: LD_VAR 0 1
62707: PPUSH
62708: EMPTY
62709: PPUSH
62710: CALL_OW 1
62714: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
62715: LD_ADDR_EXP 37
62719: PUSH
62720: LD_EXP 37
62724: PPUSH
62725: LD_VAR 0 1
62729: PPUSH
62730: EMPTY
62731: PPUSH
62732: CALL_OW 1
62736: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
62737: LD_ADDR_EXP 38
62741: PUSH
62742: LD_EXP 38
62746: PPUSH
62747: LD_VAR 0 1
62751: PPUSH
62752: EMPTY
62753: PPUSH
62754: CALL_OW 1
62758: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
62759: LD_ADDR_EXP 39
62763: PUSH
62764: LD_EXP 39
62768: PPUSH
62769: LD_VAR 0 1
62773: PPUSH
62774: EMPTY
62775: PPUSH
62776: CALL_OW 1
62780: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
62781: LD_ADDR_EXP 40
62785: PUSH
62786: LD_EXP 40
62790: PPUSH
62791: LD_VAR 0 1
62795: PPUSH
62796: EMPTY
62797: PPUSH
62798: CALL_OW 1
62802: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
62803: LD_ADDR_EXP 41
62807: PUSH
62808: LD_EXP 41
62812: PPUSH
62813: LD_VAR 0 1
62817: PPUSH
62818: EMPTY
62819: PPUSH
62820: CALL_OW 1
62824: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
62825: LD_ADDR_EXP 42
62829: PUSH
62830: LD_EXP 42
62834: PPUSH
62835: LD_VAR 0 1
62839: PPUSH
62840: EMPTY
62841: PPUSH
62842: CALL_OW 1
62846: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
62847: LD_ADDR_EXP 43
62851: PUSH
62852: LD_EXP 43
62856: PPUSH
62857: LD_VAR 0 1
62861: PPUSH
62862: EMPTY
62863: PPUSH
62864: CALL_OW 1
62868: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
62869: LD_ADDR_EXP 44
62873: PUSH
62874: LD_EXP 44
62878: PPUSH
62879: LD_VAR 0 1
62883: PPUSH
62884: EMPTY
62885: PPUSH
62886: CALL_OW 1
62890: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
62891: LD_ADDR_EXP 45
62895: PUSH
62896: LD_EXP 45
62900: PPUSH
62901: LD_VAR 0 1
62905: PPUSH
62906: EMPTY
62907: PPUSH
62908: CALL_OW 1
62912: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
62913: LD_ADDR_EXP 46
62917: PUSH
62918: LD_EXP 46
62922: PPUSH
62923: LD_VAR 0 1
62927: PPUSH
62928: EMPTY
62929: PPUSH
62930: CALL_OW 1
62934: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
62935: LD_ADDR_EXP 47
62939: PUSH
62940: LD_EXP 47
62944: PPUSH
62945: LD_VAR 0 1
62949: PPUSH
62950: LD_INT 0
62952: PPUSH
62953: CALL_OW 1
62957: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
62958: LD_ADDR_EXP 48
62962: PUSH
62963: LD_EXP 48
62967: PPUSH
62968: LD_VAR 0 1
62972: PPUSH
62973: EMPTY
62974: PPUSH
62975: CALL_OW 1
62979: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
62980: LD_ADDR_EXP 49
62984: PUSH
62985: LD_EXP 49
62989: PPUSH
62990: LD_VAR 0 1
62994: PPUSH
62995: EMPTY
62996: PPUSH
62997: CALL_OW 1
63001: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
63002: LD_ADDR_EXP 50
63006: PUSH
63007: LD_EXP 50
63011: PPUSH
63012: LD_VAR 0 1
63016: PPUSH
63017: EMPTY
63018: PPUSH
63019: CALL_OW 1
63023: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
63024: LD_ADDR_EXP 51
63028: PUSH
63029: LD_EXP 51
63033: PPUSH
63034: LD_VAR 0 1
63038: PPUSH
63039: EMPTY
63040: PPUSH
63041: CALL_OW 1
63045: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
63046: LD_ADDR_EXP 52
63050: PUSH
63051: LD_EXP 52
63055: PPUSH
63056: LD_VAR 0 1
63060: PPUSH
63061: EMPTY
63062: PPUSH
63063: CALL_OW 1
63067: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
63068: LD_ADDR_EXP 53
63072: PUSH
63073: LD_EXP 53
63077: PPUSH
63078: LD_VAR 0 1
63082: PPUSH
63083: EMPTY
63084: PPUSH
63085: CALL_OW 1
63089: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
63090: LD_ADDR_EXP 54
63094: PUSH
63095: LD_EXP 54
63099: PPUSH
63100: LD_VAR 0 1
63104: PPUSH
63105: EMPTY
63106: PPUSH
63107: CALL_OW 1
63111: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
63112: LD_ADDR_EXP 55
63116: PUSH
63117: LD_EXP 55
63121: PPUSH
63122: LD_VAR 0 1
63126: PPUSH
63127: EMPTY
63128: PPUSH
63129: CALL_OW 1
63133: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
63134: LD_ADDR_EXP 56
63138: PUSH
63139: LD_EXP 56
63143: PPUSH
63144: LD_VAR 0 1
63148: PPUSH
63149: EMPTY
63150: PPUSH
63151: CALL_OW 1
63155: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
63156: LD_ADDR_EXP 57
63160: PUSH
63161: LD_EXP 57
63165: PPUSH
63166: LD_VAR 0 1
63170: PPUSH
63171: EMPTY
63172: PPUSH
63173: CALL_OW 1
63177: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
63178: LD_ADDR_EXP 58
63182: PUSH
63183: LD_EXP 58
63187: PPUSH
63188: LD_VAR 0 1
63192: PPUSH
63193: EMPTY
63194: PPUSH
63195: CALL_OW 1
63199: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
63200: LD_ADDR_EXP 59
63204: PUSH
63205: LD_EXP 59
63209: PPUSH
63210: LD_VAR 0 1
63214: PPUSH
63215: EMPTY
63216: PPUSH
63217: CALL_OW 1
63221: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
63222: LD_ADDR_EXP 60
63226: PUSH
63227: LD_EXP 60
63231: PPUSH
63232: LD_VAR 0 1
63236: PPUSH
63237: EMPTY
63238: PPUSH
63239: CALL_OW 1
63243: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
63244: LD_ADDR_EXP 61
63248: PUSH
63249: LD_EXP 61
63253: PPUSH
63254: LD_VAR 0 1
63258: PPUSH
63259: EMPTY
63260: PPUSH
63261: CALL_OW 1
63265: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
63266: LD_ADDR_EXP 63
63270: PUSH
63271: LD_EXP 63
63275: PPUSH
63276: LD_VAR 0 1
63280: PPUSH
63281: EMPTY
63282: PPUSH
63283: CALL_OW 1
63287: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
63288: LD_ADDR_EXP 65
63292: PUSH
63293: LD_EXP 65
63297: PPUSH
63298: LD_VAR 0 1
63302: PPUSH
63303: EMPTY
63304: PPUSH
63305: CALL_OW 1
63309: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
63310: LD_ADDR_EXP 66
63314: PUSH
63315: LD_EXP 66
63319: PPUSH
63320: LD_VAR 0 1
63324: PPUSH
63325: EMPTY
63326: PPUSH
63327: CALL_OW 1
63331: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
63332: LD_ADDR_EXP 67
63336: PUSH
63337: LD_EXP 67
63341: PPUSH
63342: LD_VAR 0 1
63346: PPUSH
63347: EMPTY
63348: PPUSH
63349: CALL_OW 1
63353: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
63354: LD_ADDR_EXP 68
63358: PUSH
63359: LD_EXP 68
63363: PPUSH
63364: LD_VAR 0 1
63368: PPUSH
63369: EMPTY
63370: PPUSH
63371: CALL_OW 1
63375: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
63376: LD_ADDR_EXP 69
63380: PUSH
63381: LD_EXP 69
63385: PPUSH
63386: LD_VAR 0 1
63390: PPUSH
63391: EMPTY
63392: PPUSH
63393: CALL_OW 1
63397: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
63398: LD_ADDR_EXP 70
63402: PUSH
63403: LD_EXP 70
63407: PPUSH
63408: LD_VAR 0 1
63412: PPUSH
63413: EMPTY
63414: PPUSH
63415: CALL_OW 1
63419: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
63420: LD_ADDR_EXP 71
63424: PUSH
63425: LD_EXP 71
63429: PPUSH
63430: LD_VAR 0 1
63434: PPUSH
63435: EMPTY
63436: PPUSH
63437: CALL_OW 1
63441: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
63442: LD_ADDR_EXP 72
63446: PUSH
63447: LD_EXP 72
63451: PPUSH
63452: LD_VAR 0 1
63456: PPUSH
63457: EMPTY
63458: PPUSH
63459: CALL_OW 1
63463: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
63464: LD_ADDR_EXP 73
63468: PUSH
63469: LD_EXP 73
63473: PPUSH
63474: LD_VAR 0 1
63478: PPUSH
63479: EMPTY
63480: PPUSH
63481: CALL_OW 1
63485: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
63486: LD_ADDR_EXP 74
63490: PUSH
63491: LD_EXP 74
63495: PPUSH
63496: LD_VAR 0 1
63500: PPUSH
63501: EMPTY
63502: PPUSH
63503: CALL_OW 1
63507: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
63508: LD_ADDR_EXP 75
63512: PUSH
63513: LD_EXP 75
63517: PPUSH
63518: LD_VAR 0 1
63522: PPUSH
63523: EMPTY
63524: PPUSH
63525: CALL_OW 1
63529: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
63530: LD_ADDR_EXP 76
63534: PUSH
63535: LD_EXP 76
63539: PPUSH
63540: LD_VAR 0 1
63544: PPUSH
63545: EMPTY
63546: PPUSH
63547: CALL_OW 1
63551: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
63552: LD_ADDR_EXP 77
63556: PUSH
63557: LD_EXP 77
63561: PPUSH
63562: LD_VAR 0 1
63566: PPUSH
63567: EMPTY
63568: PPUSH
63569: CALL_OW 1
63573: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
63574: LD_ADDR_EXP 78
63578: PUSH
63579: LD_EXP 78
63583: PPUSH
63584: LD_VAR 0 1
63588: PPUSH
63589: LD_INT 0
63591: PPUSH
63592: CALL_OW 1
63596: ST_TO_ADDR
// end ;
63597: LD_VAR 0 2
63601: RET
// export function MC_Add ( side , units ) ; var base ; begin
63602: LD_INT 0
63604: PPUSH
63605: PPUSH
// base := mc_bases + 1 ;
63606: LD_ADDR_VAR 0 4
63610: PUSH
63611: LD_EXP 36
63615: PUSH
63616: LD_INT 1
63618: PLUS
63619: ST_TO_ADDR
// mc_sides := Replace ( mc_sides , base , side ) ;
63620: LD_ADDR_EXP 62
63624: PUSH
63625: LD_EXP 62
63629: PPUSH
63630: LD_VAR 0 4
63634: PPUSH
63635: LD_VAR 0 1
63639: PPUSH
63640: CALL_OW 1
63644: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , base , units ) ;
63645: LD_ADDR_EXP 36
63649: PUSH
63650: LD_EXP 36
63654: PPUSH
63655: LD_VAR 0 4
63659: PPUSH
63660: LD_VAR 0 2
63664: PPUSH
63665: CALL_OW 1
63669: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
63670: LD_ADDR_EXP 37
63674: PUSH
63675: LD_EXP 37
63679: PPUSH
63680: LD_VAR 0 4
63684: PPUSH
63685: EMPTY
63686: PPUSH
63687: CALL_OW 1
63691: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
63692: LD_ADDR_EXP 38
63696: PUSH
63697: LD_EXP 38
63701: PPUSH
63702: LD_VAR 0 4
63706: PPUSH
63707: EMPTY
63708: PPUSH
63709: CALL_OW 1
63713: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
63714: LD_ADDR_EXP 39
63718: PUSH
63719: LD_EXP 39
63723: PPUSH
63724: LD_VAR 0 4
63728: PPUSH
63729: EMPTY
63730: PPUSH
63731: CALL_OW 1
63735: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
63736: LD_ADDR_EXP 40
63740: PUSH
63741: LD_EXP 40
63745: PPUSH
63746: LD_VAR 0 4
63750: PPUSH
63751: EMPTY
63752: PPUSH
63753: CALL_OW 1
63757: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
63758: LD_ADDR_EXP 41
63762: PUSH
63763: LD_EXP 41
63767: PPUSH
63768: LD_VAR 0 4
63772: PPUSH
63773: EMPTY
63774: PPUSH
63775: CALL_OW 1
63779: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
63780: LD_ADDR_EXP 42
63784: PUSH
63785: LD_EXP 42
63789: PPUSH
63790: LD_VAR 0 4
63794: PPUSH
63795: EMPTY
63796: PPUSH
63797: CALL_OW 1
63801: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
63802: LD_ADDR_EXP 43
63806: PUSH
63807: LD_EXP 43
63811: PPUSH
63812: LD_VAR 0 4
63816: PPUSH
63817: EMPTY
63818: PPUSH
63819: CALL_OW 1
63823: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
63824: LD_ADDR_EXP 44
63828: PUSH
63829: LD_EXP 44
63833: PPUSH
63834: LD_VAR 0 4
63838: PPUSH
63839: EMPTY
63840: PPUSH
63841: CALL_OW 1
63845: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
63846: LD_ADDR_EXP 45
63850: PUSH
63851: LD_EXP 45
63855: PPUSH
63856: LD_VAR 0 4
63860: PPUSH
63861: EMPTY
63862: PPUSH
63863: CALL_OW 1
63867: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
63868: LD_ADDR_EXP 46
63872: PUSH
63873: LD_EXP 46
63877: PPUSH
63878: LD_VAR 0 4
63882: PPUSH
63883: EMPTY
63884: PPUSH
63885: CALL_OW 1
63889: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
63890: LD_ADDR_EXP 47
63894: PUSH
63895: LD_EXP 47
63899: PPUSH
63900: LD_VAR 0 4
63904: PPUSH
63905: LD_INT 0
63907: PPUSH
63908: CALL_OW 1
63912: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
63913: LD_ADDR_EXP 48
63917: PUSH
63918: LD_EXP 48
63922: PPUSH
63923: LD_VAR 0 4
63927: PPUSH
63928: EMPTY
63929: PPUSH
63930: CALL_OW 1
63934: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
63935: LD_ADDR_EXP 49
63939: PUSH
63940: LD_EXP 49
63944: PPUSH
63945: LD_VAR 0 4
63949: PPUSH
63950: EMPTY
63951: PPUSH
63952: CALL_OW 1
63956: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
63957: LD_ADDR_EXP 50
63961: PUSH
63962: LD_EXP 50
63966: PPUSH
63967: LD_VAR 0 4
63971: PPUSH
63972: EMPTY
63973: PPUSH
63974: CALL_OW 1
63978: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
63979: LD_ADDR_EXP 51
63983: PUSH
63984: LD_EXP 51
63988: PPUSH
63989: LD_VAR 0 4
63993: PPUSH
63994: EMPTY
63995: PPUSH
63996: CALL_OW 1
64000: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
64001: LD_ADDR_EXP 52
64005: PUSH
64006: LD_EXP 52
64010: PPUSH
64011: LD_VAR 0 4
64015: PPUSH
64016: EMPTY
64017: PPUSH
64018: CALL_OW 1
64022: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
64023: LD_ADDR_EXP 53
64027: PUSH
64028: LD_EXP 53
64032: PPUSH
64033: LD_VAR 0 4
64037: PPUSH
64038: EMPTY
64039: PPUSH
64040: CALL_OW 1
64044: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
64045: LD_ADDR_EXP 54
64049: PUSH
64050: LD_EXP 54
64054: PPUSH
64055: LD_VAR 0 4
64059: PPUSH
64060: EMPTY
64061: PPUSH
64062: CALL_OW 1
64066: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
64067: LD_ADDR_EXP 55
64071: PUSH
64072: LD_EXP 55
64076: PPUSH
64077: LD_VAR 0 4
64081: PPUSH
64082: EMPTY
64083: PPUSH
64084: CALL_OW 1
64088: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
64089: LD_ADDR_EXP 56
64093: PUSH
64094: LD_EXP 56
64098: PPUSH
64099: LD_VAR 0 4
64103: PPUSH
64104: EMPTY
64105: PPUSH
64106: CALL_OW 1
64110: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
64111: LD_ADDR_EXP 57
64115: PUSH
64116: LD_EXP 57
64120: PPUSH
64121: LD_VAR 0 4
64125: PPUSH
64126: EMPTY
64127: PPUSH
64128: CALL_OW 1
64132: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
64133: LD_ADDR_EXP 58
64137: PUSH
64138: LD_EXP 58
64142: PPUSH
64143: LD_VAR 0 4
64147: PPUSH
64148: EMPTY
64149: PPUSH
64150: CALL_OW 1
64154: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
64155: LD_ADDR_EXP 59
64159: PUSH
64160: LD_EXP 59
64164: PPUSH
64165: LD_VAR 0 4
64169: PPUSH
64170: EMPTY
64171: PPUSH
64172: CALL_OW 1
64176: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
64177: LD_ADDR_EXP 60
64181: PUSH
64182: LD_EXP 60
64186: PPUSH
64187: LD_VAR 0 4
64191: PPUSH
64192: EMPTY
64193: PPUSH
64194: CALL_OW 1
64198: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
64199: LD_ADDR_EXP 61
64203: PUSH
64204: LD_EXP 61
64208: PPUSH
64209: LD_VAR 0 4
64213: PPUSH
64214: EMPTY
64215: PPUSH
64216: CALL_OW 1
64220: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
64221: LD_ADDR_EXP 63
64225: PUSH
64226: LD_EXP 63
64230: PPUSH
64231: LD_VAR 0 4
64235: PPUSH
64236: EMPTY
64237: PPUSH
64238: CALL_OW 1
64242: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
64243: LD_ADDR_EXP 65
64247: PUSH
64248: LD_EXP 65
64252: PPUSH
64253: LD_VAR 0 4
64257: PPUSH
64258: EMPTY
64259: PPUSH
64260: CALL_OW 1
64264: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
64265: LD_ADDR_EXP 66
64269: PUSH
64270: LD_EXP 66
64274: PPUSH
64275: LD_VAR 0 4
64279: PPUSH
64280: EMPTY
64281: PPUSH
64282: CALL_OW 1
64286: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
64287: LD_ADDR_EXP 67
64291: PUSH
64292: LD_EXP 67
64296: PPUSH
64297: LD_VAR 0 4
64301: PPUSH
64302: EMPTY
64303: PPUSH
64304: CALL_OW 1
64308: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
64309: LD_ADDR_EXP 68
64313: PUSH
64314: LD_EXP 68
64318: PPUSH
64319: LD_VAR 0 4
64323: PPUSH
64324: EMPTY
64325: PPUSH
64326: CALL_OW 1
64330: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
64331: LD_ADDR_EXP 69
64335: PUSH
64336: LD_EXP 69
64340: PPUSH
64341: LD_VAR 0 4
64345: PPUSH
64346: EMPTY
64347: PPUSH
64348: CALL_OW 1
64352: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
64353: LD_ADDR_EXP 70
64357: PUSH
64358: LD_EXP 70
64362: PPUSH
64363: LD_VAR 0 4
64367: PPUSH
64368: EMPTY
64369: PPUSH
64370: CALL_OW 1
64374: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
64375: LD_ADDR_EXP 71
64379: PUSH
64380: LD_EXP 71
64384: PPUSH
64385: LD_VAR 0 4
64389: PPUSH
64390: EMPTY
64391: PPUSH
64392: CALL_OW 1
64396: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
64397: LD_ADDR_EXP 72
64401: PUSH
64402: LD_EXP 72
64406: PPUSH
64407: LD_VAR 0 4
64411: PPUSH
64412: EMPTY
64413: PPUSH
64414: CALL_OW 1
64418: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
64419: LD_ADDR_EXP 73
64423: PUSH
64424: LD_EXP 73
64428: PPUSH
64429: LD_VAR 0 4
64433: PPUSH
64434: EMPTY
64435: PPUSH
64436: CALL_OW 1
64440: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
64441: LD_ADDR_EXP 74
64445: PUSH
64446: LD_EXP 74
64450: PPUSH
64451: LD_VAR 0 4
64455: PPUSH
64456: EMPTY
64457: PPUSH
64458: CALL_OW 1
64462: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
64463: LD_ADDR_EXP 75
64467: PUSH
64468: LD_EXP 75
64472: PPUSH
64473: LD_VAR 0 4
64477: PPUSH
64478: EMPTY
64479: PPUSH
64480: CALL_OW 1
64484: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
64485: LD_ADDR_EXP 76
64489: PUSH
64490: LD_EXP 76
64494: PPUSH
64495: LD_VAR 0 4
64499: PPUSH
64500: EMPTY
64501: PPUSH
64502: CALL_OW 1
64506: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
64507: LD_ADDR_EXP 77
64511: PUSH
64512: LD_EXP 77
64516: PPUSH
64517: LD_VAR 0 4
64521: PPUSH
64522: EMPTY
64523: PPUSH
64524: CALL_OW 1
64528: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
64529: LD_ADDR_EXP 78
64533: PUSH
64534: LD_EXP 78
64538: PPUSH
64539: LD_VAR 0 4
64543: PPUSH
64544: LD_INT 0
64546: PPUSH
64547: CALL_OW 1
64551: ST_TO_ADDR
// result := base ;
64552: LD_ADDR_VAR 0 3
64556: PUSH
64557: LD_VAR 0 4
64561: ST_TO_ADDR
// end ;
64562: LD_VAR 0 3
64566: RET
// export function MC_Start ( ) ; var i ; begin
64567: LD_INT 0
64569: PPUSH
64570: PPUSH
// for i = 1 to mc_bases do
64571: LD_ADDR_VAR 0 2
64575: PUSH
64576: DOUBLE
64577: LD_INT 1
64579: DEC
64580: ST_TO_ADDR
64581: LD_EXP 36
64585: PUSH
64586: FOR_TO
64587: IFFALSE 65664
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff 0 ) ;
64589: LD_ADDR_EXP 36
64593: PUSH
64594: LD_EXP 36
64598: PPUSH
64599: LD_VAR 0 2
64603: PPUSH
64604: LD_EXP 36
64608: PUSH
64609: LD_VAR 0 2
64613: ARRAY
64614: PUSH
64615: LD_INT 0
64617: DIFF
64618: PPUSH
64619: CALL_OW 1
64623: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
64624: LD_ADDR_EXP 37
64628: PUSH
64629: LD_EXP 37
64633: PPUSH
64634: LD_VAR 0 2
64638: PPUSH
64639: EMPTY
64640: PPUSH
64641: CALL_OW 1
64645: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
64646: LD_ADDR_EXP 38
64650: PUSH
64651: LD_EXP 38
64655: PPUSH
64656: LD_VAR 0 2
64660: PPUSH
64661: EMPTY
64662: PPUSH
64663: CALL_OW 1
64667: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
64668: LD_ADDR_EXP 39
64672: PUSH
64673: LD_EXP 39
64677: PPUSH
64678: LD_VAR 0 2
64682: PPUSH
64683: EMPTY
64684: PPUSH
64685: CALL_OW 1
64689: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
64690: LD_ADDR_EXP 40
64694: PUSH
64695: LD_EXP 40
64699: PPUSH
64700: LD_VAR 0 2
64704: PPUSH
64705: EMPTY
64706: PUSH
64707: EMPTY
64708: PUSH
64709: EMPTY
64710: LIST
64711: LIST
64712: PPUSH
64713: CALL_OW 1
64717: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
64718: LD_ADDR_EXP 41
64722: PUSH
64723: LD_EXP 41
64727: PPUSH
64728: LD_VAR 0 2
64732: PPUSH
64733: EMPTY
64734: PPUSH
64735: CALL_OW 1
64739: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
64740: LD_ADDR_EXP 68
64744: PUSH
64745: LD_EXP 68
64749: PPUSH
64750: LD_VAR 0 2
64754: PPUSH
64755: EMPTY
64756: PPUSH
64757: CALL_OW 1
64761: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
64762: LD_ADDR_EXP 42
64766: PUSH
64767: LD_EXP 42
64771: PPUSH
64772: LD_VAR 0 2
64776: PPUSH
64777: EMPTY
64778: PPUSH
64779: CALL_OW 1
64783: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
64784: LD_ADDR_EXP 43
64788: PUSH
64789: LD_EXP 43
64793: PPUSH
64794: LD_VAR 0 2
64798: PPUSH
64799: EMPTY
64800: PPUSH
64801: CALL_OW 1
64805: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ) ;
64806: LD_ADDR_EXP 44
64810: PUSH
64811: LD_EXP 44
64815: PPUSH
64816: LD_VAR 0 2
64820: PPUSH
64821: LD_EXP 36
64825: PUSH
64826: LD_VAR 0 2
64830: ARRAY
64831: PPUSH
64832: LD_INT 2
64834: PUSH
64835: LD_INT 30
64837: PUSH
64838: LD_INT 32
64840: PUSH
64841: EMPTY
64842: LIST
64843: LIST
64844: PUSH
64845: LD_INT 30
64847: PUSH
64848: LD_INT 33
64850: PUSH
64851: EMPTY
64852: LIST
64853: LIST
64854: PUSH
64855: EMPTY
64856: LIST
64857: LIST
64858: LIST
64859: PPUSH
64860: CALL_OW 72
64864: PPUSH
64865: CALL_OW 1
64869: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
64870: LD_ADDR_EXP 45
64874: PUSH
64875: LD_EXP 45
64879: PPUSH
64880: LD_VAR 0 2
64884: PPUSH
64885: LD_EXP 36
64889: PUSH
64890: LD_VAR 0 2
64894: ARRAY
64895: PPUSH
64896: LD_INT 2
64898: PUSH
64899: LD_INT 30
64901: PUSH
64902: LD_INT 32
64904: PUSH
64905: EMPTY
64906: LIST
64907: LIST
64908: PUSH
64909: LD_INT 30
64911: PUSH
64912: LD_INT 31
64914: PUSH
64915: EMPTY
64916: LIST
64917: LIST
64918: PUSH
64919: EMPTY
64920: LIST
64921: LIST
64922: LIST
64923: PUSH
64924: LD_INT 58
64926: PUSH
64927: EMPTY
64928: LIST
64929: PUSH
64930: EMPTY
64931: LIST
64932: LIST
64933: PPUSH
64934: CALL_OW 72
64938: PPUSH
64939: CALL_OW 1
64943: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
64944: LD_ADDR_EXP 46
64948: PUSH
64949: LD_EXP 46
64953: PPUSH
64954: LD_VAR 0 2
64958: PPUSH
64959: EMPTY
64960: PPUSH
64961: CALL_OW 1
64965: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
64966: LD_ADDR_EXP 50
64970: PUSH
64971: LD_EXP 50
64975: PPUSH
64976: LD_VAR 0 2
64980: PPUSH
64981: EMPTY
64982: PPUSH
64983: CALL_OW 1
64987: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
64988: LD_ADDR_EXP 49
64992: PUSH
64993: LD_EXP 49
64997: PPUSH
64998: LD_VAR 0 2
65002: PPUSH
65003: EMPTY
65004: PPUSH
65005: CALL_OW 1
65009: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
65010: LD_ADDR_EXP 51
65014: PUSH
65015: LD_EXP 51
65019: PPUSH
65020: LD_VAR 0 2
65024: PPUSH
65025: EMPTY
65026: PPUSH
65027: CALL_OW 1
65031: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
65032: LD_ADDR_EXP 52
65036: PUSH
65037: LD_EXP 52
65041: PPUSH
65042: LD_VAR 0 2
65046: PPUSH
65047: EMPTY
65048: PPUSH
65049: CALL_OW 1
65053: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
65054: LD_ADDR_EXP 53
65058: PUSH
65059: LD_EXP 53
65063: PPUSH
65064: LD_VAR 0 2
65068: PPUSH
65069: EMPTY
65070: PPUSH
65071: CALL_OW 1
65075: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
65076: LD_ADDR_EXP 54
65080: PUSH
65081: LD_EXP 54
65085: PPUSH
65086: LD_VAR 0 2
65090: PPUSH
65091: EMPTY
65092: PPUSH
65093: CALL_OW 1
65097: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
65098: LD_ADDR_EXP 55
65102: PUSH
65103: LD_EXP 55
65107: PPUSH
65108: LD_VAR 0 2
65112: PPUSH
65113: EMPTY
65114: PPUSH
65115: CALL_OW 1
65119: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
65120: LD_ADDR_EXP 56
65124: PUSH
65125: LD_EXP 56
65129: PPUSH
65130: LD_VAR 0 2
65134: PPUSH
65135: EMPTY
65136: PPUSH
65137: CALL_OW 1
65141: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
65142: LD_ADDR_EXP 57
65146: PUSH
65147: LD_EXP 57
65151: PPUSH
65152: LD_VAR 0 2
65156: PPUSH
65157: EMPTY
65158: PPUSH
65159: CALL_OW 1
65163: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
65164: LD_ADDR_EXP 58
65168: PUSH
65169: LD_EXP 58
65173: PPUSH
65174: LD_VAR 0 2
65178: PPUSH
65179: EMPTY
65180: PPUSH
65181: CALL_OW 1
65185: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
65186: LD_ADDR_EXP 47
65190: PUSH
65191: LD_EXP 47
65195: PPUSH
65196: LD_VAR 0 2
65200: PPUSH
65201: LD_INT 0
65203: PPUSH
65204: CALL_OW 1
65208: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
65209: LD_ADDR_EXP 60
65213: PUSH
65214: LD_EXP 60
65218: PPUSH
65219: LD_VAR 0 2
65223: PPUSH
65224: LD_INT 0
65226: PPUSH
65227: CALL_OW 1
65231: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
65232: LD_ADDR_EXP 48
65236: PUSH
65237: LD_EXP 48
65241: PPUSH
65242: LD_VAR 0 2
65246: PPUSH
65247: EMPTY
65248: PPUSH
65249: CALL_OW 1
65253: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
65254: LD_ADDR_EXP 59
65258: PUSH
65259: LD_EXP 59
65263: PPUSH
65264: LD_VAR 0 2
65268: PPUSH
65269: LD_INT 0
65271: PPUSH
65272: CALL_OW 1
65276: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
65277: LD_ADDR_EXP 61
65281: PUSH
65282: LD_EXP 61
65286: PPUSH
65287: LD_VAR 0 2
65291: PPUSH
65292: EMPTY
65293: PPUSH
65294: CALL_OW 1
65298: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
65299: LD_ADDR_EXP 64
65303: PUSH
65304: LD_EXP 64
65308: PPUSH
65309: LD_VAR 0 2
65313: PPUSH
65314: LD_INT 0
65316: PPUSH
65317: CALL_OW 1
65321: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
65322: LD_ADDR_EXP 65
65326: PUSH
65327: LD_EXP 65
65331: PPUSH
65332: LD_VAR 0 2
65336: PPUSH
65337: EMPTY
65338: PPUSH
65339: CALL_OW 1
65343: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
65344: LD_ADDR_EXP 66
65348: PUSH
65349: LD_EXP 66
65353: PPUSH
65354: LD_VAR 0 2
65358: PPUSH
65359: EMPTY
65360: PPUSH
65361: CALL_OW 1
65365: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
65366: LD_ADDR_EXP 67
65370: PUSH
65371: LD_EXP 67
65375: PPUSH
65376: LD_VAR 0 2
65380: PPUSH
65381: EMPTY
65382: PPUSH
65383: CALL_OW 1
65387: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
65388: LD_ADDR_EXP 69
65392: PUSH
65393: LD_EXP 69
65397: PPUSH
65398: LD_VAR 0 2
65402: PPUSH
65403: LD_EXP 36
65407: PUSH
65408: LD_VAR 0 2
65412: ARRAY
65413: PPUSH
65414: LD_INT 2
65416: PUSH
65417: LD_INT 30
65419: PUSH
65420: LD_INT 6
65422: PUSH
65423: EMPTY
65424: LIST
65425: LIST
65426: PUSH
65427: LD_INT 30
65429: PUSH
65430: LD_INT 7
65432: PUSH
65433: EMPTY
65434: LIST
65435: LIST
65436: PUSH
65437: LD_INT 30
65439: PUSH
65440: LD_INT 8
65442: PUSH
65443: EMPTY
65444: LIST
65445: LIST
65446: PUSH
65447: EMPTY
65448: LIST
65449: LIST
65450: LIST
65451: LIST
65452: PPUSH
65453: CALL_OW 72
65457: PPUSH
65458: CALL_OW 1
65462: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
65463: LD_ADDR_EXP 70
65467: PUSH
65468: LD_EXP 70
65472: PPUSH
65473: LD_VAR 0 2
65477: PPUSH
65478: EMPTY
65479: PPUSH
65480: CALL_OW 1
65484: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
65485: LD_ADDR_EXP 71
65489: PUSH
65490: LD_EXP 71
65494: PPUSH
65495: LD_VAR 0 2
65499: PPUSH
65500: EMPTY
65501: PPUSH
65502: CALL_OW 1
65506: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , i , [ ] ) ;
65507: LD_ADDR_EXP 72
65511: PUSH
65512: LD_EXP 72
65516: PPUSH
65517: LD_VAR 0 2
65521: PPUSH
65522: EMPTY
65523: PPUSH
65524: CALL_OW 1
65528: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
65529: LD_ADDR_EXP 73
65533: PUSH
65534: LD_EXP 73
65538: PPUSH
65539: LD_VAR 0 2
65543: PPUSH
65544: EMPTY
65545: PPUSH
65546: CALL_OW 1
65550: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
65551: LD_ADDR_EXP 74
65555: PUSH
65556: LD_EXP 74
65560: PPUSH
65561: LD_VAR 0 2
65565: PPUSH
65566: EMPTY
65567: PPUSH
65568: CALL_OW 1
65572: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
65573: LD_ADDR_EXP 75
65577: PUSH
65578: LD_EXP 75
65582: PPUSH
65583: LD_VAR 0 2
65587: PPUSH
65588: EMPTY
65589: PPUSH
65590: CALL_OW 1
65594: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
65595: LD_ADDR_EXP 76
65599: PUSH
65600: LD_EXP 76
65604: PPUSH
65605: LD_VAR 0 2
65609: PPUSH
65610: EMPTY
65611: PPUSH
65612: CALL_OW 1
65616: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , [ ] ) ;
65617: LD_ADDR_EXP 77
65621: PUSH
65622: LD_EXP 77
65626: PPUSH
65627: LD_VAR 0 2
65631: PPUSH
65632: EMPTY
65633: PPUSH
65634: CALL_OW 1
65638: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , i , 0 ) ;
65639: LD_ADDR_EXP 78
65643: PUSH
65644: LD_EXP 78
65648: PPUSH
65649: LD_VAR 0 2
65653: PPUSH
65654: LD_INT 0
65656: PPUSH
65657: CALL_OW 1
65661: ST_TO_ADDR
// end ;
65662: GO 64586
65664: POP
65665: POP
// MC_InitSides ( ) ;
65666: CALL 65952 0 0
// MC_InitResearch ( ) ;
65670: CALL 65691 0 0
// CustomInitMacro ( ) ;
65674: CALL 1407 0 0
// skirmish := true ;
65678: LD_ADDR_EXP 34
65682: PUSH
65683: LD_INT 1
65685: ST_TO_ADDR
// end ;
65686: LD_VAR 0 1
65690: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
65691: LD_INT 0
65693: PPUSH
65694: PPUSH
65695: PPUSH
65696: PPUSH
65697: PPUSH
65698: PPUSH
// if not mc_bases then
65699: LD_EXP 36
65703: NOT
65704: IFFALSE 65708
// exit ;
65706: GO 65947
// for i = 1 to 8 do
65708: LD_ADDR_VAR 0 2
65712: PUSH
65713: DOUBLE
65714: LD_INT 1
65716: DEC
65717: ST_TO_ADDR
65718: LD_INT 8
65720: PUSH
65721: FOR_TO
65722: IFFALSE 65748
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
65724: LD_ADDR_EXP 63
65728: PUSH
65729: LD_EXP 63
65733: PPUSH
65734: LD_VAR 0 2
65738: PPUSH
65739: EMPTY
65740: PPUSH
65741: CALL_OW 1
65745: ST_TO_ADDR
65746: GO 65721
65748: POP
65749: POP
// tmp := [ ] ;
65750: LD_ADDR_VAR 0 5
65754: PUSH
65755: EMPTY
65756: ST_TO_ADDR
// for i = 1 to mc_sides do
65757: LD_ADDR_VAR 0 2
65761: PUSH
65762: DOUBLE
65763: LD_INT 1
65765: DEC
65766: ST_TO_ADDR
65767: LD_EXP 62
65771: PUSH
65772: FOR_TO
65773: IFFALSE 65831
// if not mc_sides [ i ] in tmp then
65775: LD_EXP 62
65779: PUSH
65780: LD_VAR 0 2
65784: ARRAY
65785: PUSH
65786: LD_VAR 0 5
65790: IN
65791: NOT
65792: IFFALSE 65829
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
65794: LD_ADDR_VAR 0 5
65798: PUSH
65799: LD_VAR 0 5
65803: PPUSH
65804: LD_VAR 0 5
65808: PUSH
65809: LD_INT 1
65811: PLUS
65812: PPUSH
65813: LD_EXP 62
65817: PUSH
65818: LD_VAR 0 2
65822: ARRAY
65823: PPUSH
65824: CALL_OW 2
65828: ST_TO_ADDR
65829: GO 65772
65831: POP
65832: POP
// if not tmp then
65833: LD_VAR 0 5
65837: NOT
65838: IFFALSE 65842
// exit ;
65840: GO 65947
// for j in tmp do
65842: LD_ADDR_VAR 0 3
65846: PUSH
65847: LD_VAR 0 5
65851: PUSH
65852: FOR_IN
65853: IFFALSE 65945
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
65855: LD_ADDR_VAR 0 6
65859: PUSH
65860: LD_INT 22
65862: PUSH
65863: LD_VAR 0 3
65867: PUSH
65868: EMPTY
65869: LIST
65870: LIST
65871: PPUSH
65872: CALL_OW 69
65876: ST_TO_ADDR
// if not un then
65877: LD_VAR 0 6
65881: NOT
65882: IFFALSE 65886
// continue ;
65884: GO 65852
// nation := GetNation ( un [ 1 ] ) ;
65886: LD_ADDR_VAR 0 4
65890: PUSH
65891: LD_VAR 0 6
65895: PUSH
65896: LD_INT 1
65898: ARRAY
65899: PPUSH
65900: CALL_OW 248
65904: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
65905: LD_ADDR_EXP 63
65909: PUSH
65910: LD_EXP 63
65914: PPUSH
65915: LD_VAR 0 3
65919: PPUSH
65920: LD_VAR 0 3
65924: PPUSH
65925: LD_VAR 0 4
65929: PPUSH
65930: LD_INT 1
65932: PPUSH
65933: CALL 19401 0 3
65937: PPUSH
65938: CALL_OW 1
65942: ST_TO_ADDR
// end ;
65943: GO 65852
65945: POP
65946: POP
// end ;
65947: LD_VAR 0 1
65951: RET
// export function MC_InitSides ( ) ; var i ; begin
65952: LD_INT 0
65954: PPUSH
65955: PPUSH
// if not mc_bases then
65956: LD_EXP 36
65960: NOT
65961: IFFALSE 65965
// exit ;
65963: GO 66039
// for i = 1 to mc_bases do
65965: LD_ADDR_VAR 0 2
65969: PUSH
65970: DOUBLE
65971: LD_INT 1
65973: DEC
65974: ST_TO_ADDR
65975: LD_EXP 36
65979: PUSH
65980: FOR_TO
65981: IFFALSE 66037
// if mc_bases [ i ] then
65983: LD_EXP 36
65987: PUSH
65988: LD_VAR 0 2
65992: ARRAY
65993: IFFALSE 66035
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
65995: LD_ADDR_EXP 62
65999: PUSH
66000: LD_EXP 62
66004: PPUSH
66005: LD_VAR 0 2
66009: PPUSH
66010: LD_EXP 36
66014: PUSH
66015: LD_VAR 0 2
66019: ARRAY
66020: PUSH
66021: LD_INT 1
66023: ARRAY
66024: PPUSH
66025: CALL_OW 255
66029: PPUSH
66030: CALL_OW 1
66034: ST_TO_ADDR
66035: GO 65980
66037: POP
66038: POP
// end ;
66039: LD_VAR 0 1
66043: RET
// every 0 0$01 trigger skirmish do
66044: LD_EXP 34
66048: IFFALSE 66202
66050: GO 66052
66052: DISABLE
// begin enable ;
66053: ENABLE
// MC_CheckBuildings ( ) ;
66054: CALL 70700 0 0
// MC_CheckPeopleLife ( ) ;
66058: CALL 70825 0 0
// RaiseSailEvent ( 100 ) ;
66062: LD_INT 100
66064: PPUSH
66065: CALL_OW 427
// RaiseSailEvent ( 103 ) ;
66069: LD_INT 103
66071: PPUSH
66072: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
66076: LD_INT 104
66078: PPUSH
66079: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
66083: LD_INT 105
66085: PPUSH
66086: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
66090: LD_INT 106
66092: PPUSH
66093: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
66097: LD_INT 107
66099: PPUSH
66100: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
66104: LD_INT 108
66106: PPUSH
66107: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
66111: LD_INT 109
66113: PPUSH
66114: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
66118: LD_INT 110
66120: PPUSH
66121: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
66125: LD_INT 111
66127: PPUSH
66128: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
66132: LD_INT 112
66134: PPUSH
66135: CALL_OW 427
// RaiseSailEvent ( 113 ) ;
66139: LD_INT 113
66141: PPUSH
66142: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
66146: LD_INT 120
66148: PPUSH
66149: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
66153: LD_INT 121
66155: PPUSH
66156: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
66160: LD_INT 122
66162: PPUSH
66163: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
66167: LD_INT 123
66169: PPUSH
66170: CALL_OW 427
// RaiseSailEvent ( 124 ) ;
66174: LD_INT 124
66176: PPUSH
66177: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
66181: LD_INT 125
66183: PPUSH
66184: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
66188: LD_INT 126
66190: PPUSH
66191: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
66195: LD_INT 200
66197: PPUSH
66198: CALL_OW 427
// end ;
66202: END
// on SailEvent ( event ) do begin if event < 100 then
66203: LD_VAR 0 1
66207: PUSH
66208: LD_INT 100
66210: LESS
66211: IFFALSE 66222
// CustomEvent ( event ) ;
66213: LD_VAR 0 1
66217: PPUSH
66218: CALL 18588 0 1
// if event = 100 then
66222: LD_VAR 0 1
66226: PUSH
66227: LD_INT 100
66229: EQUAL
66230: IFFALSE 66236
// MC_ClassManager ( ) ;
66232: CALL 66628 0 0
// if event = 101 then
66236: LD_VAR 0 1
66240: PUSH
66241: LD_INT 101
66243: EQUAL
66244: IFFALSE 66250
// MC_RepairBuildings ( ) ;
66246: CALL 71421 0 0
// if event = 102 then
66250: LD_VAR 0 1
66254: PUSH
66255: LD_INT 102
66257: EQUAL
66258: IFFALSE 66264
// MC_Heal ( ) ;
66260: CALL 72153 0 0
// if event = 103 then
66264: LD_VAR 0 1
66268: PUSH
66269: LD_INT 103
66271: EQUAL
66272: IFFALSE 66278
// MC_Build ( ) ;
66274: CALL 72575 0 0
// if event = 104 then
66278: LD_VAR 0 1
66282: PUSH
66283: LD_INT 104
66285: EQUAL
66286: IFFALSE 66292
// MC_TurretWeapon ( ) ;
66288: CALL 74188 0 0
// if event = 105 then
66292: LD_VAR 0 1
66296: PUSH
66297: LD_INT 105
66299: EQUAL
66300: IFFALSE 66306
// MC_BuildUpgrade ( ) ;
66302: CALL 73739 0 0
// if event = 106 then
66306: LD_VAR 0 1
66310: PUSH
66311: LD_INT 106
66313: EQUAL
66314: IFFALSE 66320
// MC_PlantMines ( ) ;
66316: CALL 74618 0 0
// if event = 107 then
66320: LD_VAR 0 1
66324: PUSH
66325: LD_INT 107
66327: EQUAL
66328: IFFALSE 66334
// MC_CollectCrates ( ) ;
66330: CALL 75652 0 0
// if event = 108 then
66334: LD_VAR 0 1
66338: PUSH
66339: LD_INT 108
66341: EQUAL
66342: IFFALSE 66348
// MC_LinkRemoteControl ( ) ;
66344: CALL 77428 0 0
// if event = 109 then
66348: LD_VAR 0 1
66352: PUSH
66353: LD_INT 109
66355: EQUAL
66356: IFFALSE 66362
// MC_ProduceVehicle ( ) ;
66358: CALL 77609 0 0
// if event = 110 then
66362: LD_VAR 0 1
66366: PUSH
66367: LD_INT 110
66369: EQUAL
66370: IFFALSE 66376
// MC_SendAttack ( ) ;
66372: CALL 78075 0 0
// if event = 111 then
66376: LD_VAR 0 1
66380: PUSH
66381: LD_INT 111
66383: EQUAL
66384: IFFALSE 66390
// MC_Defend ( ) ;
66386: CALL 78183 0 0
// if event = 112 then
66390: LD_VAR 0 1
66394: PUSH
66395: LD_INT 112
66397: EQUAL
66398: IFFALSE 66404
// MC_Research ( ) ;
66400: CALL 78788 0 0
// if event = 113 then
66404: LD_VAR 0 1
66408: PUSH
66409: LD_INT 113
66411: EQUAL
66412: IFFALSE 66418
// MC_MinesTrigger ( ) ;
66414: CALL 79902 0 0
// if event = 120 then
66418: LD_VAR 0 1
66422: PUSH
66423: LD_INT 120
66425: EQUAL
66426: IFFALSE 66432
// MC_RepairVehicle ( ) ;
66428: CALL 80001 0 0
// if event = 121 then
66432: LD_VAR 0 1
66436: PUSH
66437: LD_INT 121
66439: EQUAL
66440: IFFALSE 66446
// MC_TameApe ( ) ;
66442: CALL 80731 0 0
// if event = 122 then
66446: LD_VAR 0 1
66450: PUSH
66451: LD_INT 122
66453: EQUAL
66454: IFFALSE 66460
// MC_ChangeApeClass ( ) ;
66456: CALL 81560 0 0
// if event = 123 then
66460: LD_VAR 0 1
66464: PUSH
66465: LD_INT 123
66467: EQUAL
66468: IFFALSE 66474
// MC_Bazooka ( ) ;
66470: CALL 82210 0 0
// if event = 124 then
66474: LD_VAR 0 1
66478: PUSH
66479: LD_INT 124
66481: EQUAL
66482: IFFALSE 66488
// MC_TeleportExit ( ) ;
66484: CALL 82408 0 0
// if event = 125 then
66488: LD_VAR 0 1
66492: PUSH
66493: LD_INT 125
66495: EQUAL
66496: IFFALSE 66502
// MC_Deposits ( ) ;
66498: CALL 83055 0 0
// if event = 126 then
66502: LD_VAR 0 1
66506: PUSH
66507: LD_INT 126
66509: EQUAL
66510: IFFALSE 66516
// MC_RemoteDriver ( ) ;
66512: CALL 83680 0 0
// if event = 200 then
66516: LD_VAR 0 1
66520: PUSH
66521: LD_INT 200
66523: EQUAL
66524: IFFALSE 66530
// MC_Idle ( ) ;
66526: CALL 85629 0 0
// end ;
66530: PPOPN 1
66532: END
// export function MC_Reset ( base , tag ) ; var i ; begin
66533: LD_INT 0
66535: PPUSH
66536: PPUSH
// if not mc_bases [ base ] or not tag then
66537: LD_EXP 36
66541: PUSH
66542: LD_VAR 0 1
66546: ARRAY
66547: NOT
66548: PUSH
66549: LD_VAR 0 2
66553: NOT
66554: OR
66555: IFFALSE 66559
// exit ;
66557: GO 66623
// for i in mc_bases [ base ] union mc_ape [ base ] do
66559: LD_ADDR_VAR 0 4
66563: PUSH
66564: LD_EXP 36
66568: PUSH
66569: LD_VAR 0 1
66573: ARRAY
66574: PUSH
66575: LD_EXP 65
66579: PUSH
66580: LD_VAR 0 1
66584: ARRAY
66585: UNION
66586: PUSH
66587: FOR_IN
66588: IFFALSE 66621
// if GetTag ( i ) = tag then
66590: LD_VAR 0 4
66594: PPUSH
66595: CALL_OW 110
66599: PUSH
66600: LD_VAR 0 2
66604: EQUAL
66605: IFFALSE 66619
// SetTag ( i , 0 ) ;
66607: LD_VAR 0 4
66611: PPUSH
66612: LD_INT 0
66614: PPUSH
66615: CALL_OW 109
66619: GO 66587
66621: POP
66622: POP
// end ;
66623: LD_VAR 0 3
66627: RET
// export function MC_ClassManager ( ) ; var i , j , tmp , p , b , e , k ; begin
66628: LD_INT 0
66630: PPUSH
66631: PPUSH
66632: PPUSH
66633: PPUSH
66634: PPUSH
66635: PPUSH
66636: PPUSH
66637: PPUSH
// if not mc_bases then
66638: LD_EXP 36
66642: NOT
66643: IFFALSE 66647
// exit ;
66645: GO 67105
// for i = 1 to mc_bases do
66647: LD_ADDR_VAR 0 2
66651: PUSH
66652: DOUBLE
66653: LD_INT 1
66655: DEC
66656: ST_TO_ADDR
66657: LD_EXP 36
66661: PUSH
66662: FOR_TO
66663: IFFALSE 67103
// begin tmp := MC_ClassCheckReq ( i ) ;
66665: LD_ADDR_VAR 0 4
66669: PUSH
66670: LD_VAR 0 2
66674: PPUSH
66675: CALL 67110 0 1
66679: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , tmp ) ;
66680: LD_ADDR_EXP 77
66684: PUSH
66685: LD_EXP 77
66689: PPUSH
66690: LD_VAR 0 2
66694: PPUSH
66695: LD_VAR 0 4
66699: PPUSH
66700: CALL_OW 1
66704: ST_TO_ADDR
// if not tmp then
66705: LD_VAR 0 4
66709: NOT
66710: IFFALSE 66714
// continue ;
66712: GO 66662
// b := [ UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ] ;
66714: LD_ADDR_VAR 0 6
66718: PUSH
66719: LD_EXP 36
66723: PUSH
66724: LD_VAR 0 2
66728: ARRAY
66729: PPUSH
66730: LD_INT 2
66732: PUSH
66733: LD_INT 30
66735: PUSH
66736: LD_INT 4
66738: PUSH
66739: EMPTY
66740: LIST
66741: LIST
66742: PUSH
66743: LD_INT 30
66745: PUSH
66746: LD_INT 5
66748: PUSH
66749: EMPTY
66750: LIST
66751: LIST
66752: PUSH
66753: EMPTY
66754: LIST
66755: LIST
66756: LIST
66757: PPUSH
66758: CALL_OW 72
66762: PUSH
66763: LD_EXP 36
66767: PUSH
66768: LD_VAR 0 2
66772: ARRAY
66773: PPUSH
66774: LD_INT 2
66776: PUSH
66777: LD_INT 30
66779: PUSH
66780: LD_INT 0
66782: PUSH
66783: EMPTY
66784: LIST
66785: LIST
66786: PUSH
66787: LD_INT 30
66789: PUSH
66790: LD_INT 1
66792: PUSH
66793: EMPTY
66794: LIST
66795: LIST
66796: PUSH
66797: EMPTY
66798: LIST
66799: LIST
66800: LIST
66801: PPUSH
66802: CALL_OW 72
66806: PUSH
66807: LD_EXP 36
66811: PUSH
66812: LD_VAR 0 2
66816: ARRAY
66817: PPUSH
66818: LD_INT 30
66820: PUSH
66821: LD_INT 3
66823: PUSH
66824: EMPTY
66825: LIST
66826: LIST
66827: PPUSH
66828: CALL_OW 72
66832: PUSH
66833: LD_EXP 36
66837: PUSH
66838: LD_VAR 0 2
66842: ARRAY
66843: PPUSH
66844: LD_INT 2
66846: PUSH
66847: LD_INT 30
66849: PUSH
66850: LD_INT 6
66852: PUSH
66853: EMPTY
66854: LIST
66855: LIST
66856: PUSH
66857: LD_INT 30
66859: PUSH
66860: LD_INT 7
66862: PUSH
66863: EMPTY
66864: LIST
66865: LIST
66866: PUSH
66867: LD_INT 30
66869: PUSH
66870: LD_INT 8
66872: PUSH
66873: EMPTY
66874: LIST
66875: LIST
66876: PUSH
66877: EMPTY
66878: LIST
66879: LIST
66880: LIST
66881: LIST
66882: PPUSH
66883: CALL_OW 72
66887: PUSH
66888: EMPTY
66889: LIST
66890: LIST
66891: LIST
66892: LIST
66893: ST_TO_ADDR
// for j = 1 to 4 do
66894: LD_ADDR_VAR 0 3
66898: PUSH
66899: DOUBLE
66900: LD_INT 1
66902: DEC
66903: ST_TO_ADDR
66904: LD_INT 4
66906: PUSH
66907: FOR_TO
66908: IFFALSE 67099
// begin if not tmp [ j ] then
66910: LD_VAR 0 4
66914: PUSH
66915: LD_VAR 0 3
66919: ARRAY
66920: NOT
66921: IFFALSE 66925
// continue ;
66923: GO 66907
// for p in tmp [ j ] do
66925: LD_ADDR_VAR 0 5
66929: PUSH
66930: LD_VAR 0 4
66934: PUSH
66935: LD_VAR 0 3
66939: ARRAY
66940: PUSH
66941: FOR_IN
66942: IFFALSE 67095
// begin if not b [ j ] then
66944: LD_VAR 0 6
66948: PUSH
66949: LD_VAR 0 3
66953: ARRAY
66954: NOT
66955: IFFALSE 66959
// break ;
66957: GO 67095
// e := 0 ;
66959: LD_ADDR_VAR 0 7
66963: PUSH
66964: LD_INT 0
66966: ST_TO_ADDR
// for k in b [ j ] do
66967: LD_ADDR_VAR 0 8
66971: PUSH
66972: LD_VAR 0 6
66976: PUSH
66977: LD_VAR 0 3
66981: ARRAY
66982: PUSH
66983: FOR_IN
66984: IFFALSE 67011
// if IsNotFull ( k ) then
66986: LD_VAR 0 8
66990: PPUSH
66991: CALL 23752 0 1
66995: IFFALSE 67009
// begin e := k ;
66997: LD_ADDR_VAR 0 7
67001: PUSH
67002: LD_VAR 0 8
67006: ST_TO_ADDR
// break ;
67007: GO 67011
// end ;
67009: GO 66983
67011: POP
67012: POP
// if e and not UnitGoingToBuilding ( p , e ) then
67013: LD_VAR 0 7
67017: PUSH
67018: LD_VAR 0 5
67022: PPUSH
67023: LD_VAR 0 7
67027: PPUSH
67028: CALL 60871 0 2
67032: NOT
67033: AND
67034: IFFALSE 67093
// begin if IsInUnit ( p ) then
67036: LD_VAR 0 5
67040: PPUSH
67041: CALL_OW 310
67045: IFFALSE 67056
// ComExitBuilding ( p ) ;
67047: LD_VAR 0 5
67051: PPUSH
67052: CALL_OW 122
// ComEnterUnit ( p , e ) ;
67056: LD_VAR 0 5
67060: PPUSH
67061: LD_VAR 0 7
67065: PPUSH
67066: CALL_OW 120
// AddComChangeProfession ( p , j ) ;
67070: LD_VAR 0 5
67074: PPUSH
67075: LD_VAR 0 3
67079: PPUSH
67080: CALL_OW 183
// AddComExitBuilding ( p ) ;
67084: LD_VAR 0 5
67088: PPUSH
67089: CALL_OW 182
// end ; end ;
67093: GO 66941
67095: POP
67096: POP
// end ;
67097: GO 66907
67099: POP
67100: POP
// end ;
67101: GO 66662
67103: POP
67104: POP
// end ;
67105: LD_VAR 0 1
67109: RET
// export function MC_ClassCheckReq ( base ) ; var i , tmp , sol , eng , mech , sci , sort , j , p , b , bcount ; begin
67110: LD_INT 0
67112: PPUSH
67113: PPUSH
67114: PPUSH
67115: PPUSH
67116: PPUSH
67117: PPUSH
67118: PPUSH
67119: PPUSH
67120: PPUSH
67121: PPUSH
67122: PPUSH
67123: PPUSH
// if not base or not mc_bases [ base ] or not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
67124: LD_VAR 0 1
67128: NOT
67129: PUSH
67130: LD_EXP 36
67134: PUSH
67135: LD_VAR 0 1
67139: ARRAY
67140: NOT
67141: OR
67142: PUSH
67143: LD_EXP 36
67147: PUSH
67148: LD_VAR 0 1
67152: ARRAY
67153: PPUSH
67154: LD_INT 2
67156: PUSH
67157: LD_INT 30
67159: PUSH
67160: LD_INT 0
67162: PUSH
67163: EMPTY
67164: LIST
67165: LIST
67166: PUSH
67167: LD_INT 30
67169: PUSH
67170: LD_INT 1
67172: PUSH
67173: EMPTY
67174: LIST
67175: LIST
67176: PUSH
67177: EMPTY
67178: LIST
67179: LIST
67180: LIST
67181: PPUSH
67182: CALL_OW 72
67186: NOT
67187: OR
67188: IFFALSE 67192
// exit ;
67190: GO 70695
// tmp := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
67192: LD_ADDR_VAR 0 4
67196: PUSH
67197: LD_EXP 36
67201: PUSH
67202: LD_VAR 0 1
67206: ARRAY
67207: PPUSH
67208: LD_INT 2
67210: PUSH
67211: LD_INT 25
67213: PUSH
67214: LD_INT 1
67216: PUSH
67217: EMPTY
67218: LIST
67219: LIST
67220: PUSH
67221: LD_INT 25
67223: PUSH
67224: LD_INT 2
67226: PUSH
67227: EMPTY
67228: LIST
67229: LIST
67230: PUSH
67231: LD_INT 25
67233: PUSH
67234: LD_INT 3
67236: PUSH
67237: EMPTY
67238: LIST
67239: LIST
67240: PUSH
67241: LD_INT 25
67243: PUSH
67244: LD_INT 4
67246: PUSH
67247: EMPTY
67248: LIST
67249: LIST
67250: PUSH
67251: LD_INT 25
67253: PUSH
67254: LD_INT 5
67256: PUSH
67257: EMPTY
67258: LIST
67259: LIST
67260: PUSH
67261: LD_INT 25
67263: PUSH
67264: LD_INT 8
67266: PUSH
67267: EMPTY
67268: LIST
67269: LIST
67270: PUSH
67271: LD_INT 25
67273: PUSH
67274: LD_INT 9
67276: PUSH
67277: EMPTY
67278: LIST
67279: LIST
67280: PUSH
67281: EMPTY
67282: LIST
67283: LIST
67284: LIST
67285: LIST
67286: LIST
67287: LIST
67288: LIST
67289: LIST
67290: PPUSH
67291: CALL_OW 72
67295: ST_TO_ADDR
// if not tmp then
67296: LD_VAR 0 4
67300: NOT
67301: IFFALSE 67305
// exit ;
67303: GO 70695
// for i in tmp do
67305: LD_ADDR_VAR 0 3
67309: PUSH
67310: LD_VAR 0 4
67314: PUSH
67315: FOR_IN
67316: IFFALSE 67347
// if GetTag ( i ) then
67318: LD_VAR 0 3
67322: PPUSH
67323: CALL_OW 110
67327: IFFALSE 67345
// tmp := tmp diff i ;
67329: LD_ADDR_VAR 0 4
67333: PUSH
67334: LD_VAR 0 4
67338: PUSH
67339: LD_VAR 0 3
67343: DIFF
67344: ST_TO_ADDR
67345: GO 67315
67347: POP
67348: POP
// if not tmp then
67349: LD_VAR 0 4
67353: NOT
67354: IFFALSE 67358
// exit ;
67356: GO 70695
// sol := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
67358: LD_ADDR_VAR 0 5
67362: PUSH
67363: LD_EXP 36
67367: PUSH
67368: LD_VAR 0 1
67372: ARRAY
67373: PPUSH
67374: LD_INT 2
67376: PUSH
67377: LD_INT 25
67379: PUSH
67380: LD_INT 1
67382: PUSH
67383: EMPTY
67384: LIST
67385: LIST
67386: PUSH
67387: LD_INT 25
67389: PUSH
67390: LD_INT 5
67392: PUSH
67393: EMPTY
67394: LIST
67395: LIST
67396: PUSH
67397: LD_INT 25
67399: PUSH
67400: LD_INT 8
67402: PUSH
67403: EMPTY
67404: LIST
67405: LIST
67406: PUSH
67407: LD_INT 25
67409: PUSH
67410: LD_INT 9
67412: PUSH
67413: EMPTY
67414: LIST
67415: LIST
67416: PUSH
67417: EMPTY
67418: LIST
67419: LIST
67420: LIST
67421: LIST
67422: LIST
67423: PPUSH
67424: CALL_OW 72
67428: ST_TO_ADDR
// eng := UnitFilter ( mc_bases [ base ] , [ f_class , 2 ] ) ;
67429: LD_ADDR_VAR 0 6
67433: PUSH
67434: LD_EXP 36
67438: PUSH
67439: LD_VAR 0 1
67443: ARRAY
67444: PPUSH
67445: LD_INT 25
67447: PUSH
67448: LD_INT 2
67450: PUSH
67451: EMPTY
67452: LIST
67453: LIST
67454: PPUSH
67455: CALL_OW 72
67459: ST_TO_ADDR
// mech := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
67460: LD_ADDR_VAR 0 7
67464: PUSH
67465: LD_EXP 36
67469: PUSH
67470: LD_VAR 0 1
67474: ARRAY
67475: PPUSH
67476: LD_INT 25
67478: PUSH
67479: LD_INT 3
67481: PUSH
67482: EMPTY
67483: LIST
67484: LIST
67485: PPUSH
67486: CALL_OW 72
67490: ST_TO_ADDR
// sci := UnitFilter ( mc_bases [ base ] , [ [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
67491: LD_ADDR_VAR 0 8
67495: PUSH
67496: LD_EXP 36
67500: PUSH
67501: LD_VAR 0 1
67505: ARRAY
67506: PPUSH
67507: LD_INT 25
67509: PUSH
67510: LD_INT 4
67512: PUSH
67513: EMPTY
67514: LIST
67515: LIST
67516: PUSH
67517: LD_INT 24
67519: PUSH
67520: LD_INT 251
67522: PUSH
67523: EMPTY
67524: LIST
67525: LIST
67526: PUSH
67527: EMPTY
67528: LIST
67529: LIST
67530: PPUSH
67531: CALL_OW 72
67535: ST_TO_ADDR
// if mc_scan [ base ] then
67536: LD_EXP 59
67540: PUSH
67541: LD_VAR 0 1
67545: ARRAY
67546: IFFALSE 68007
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 4 ) ;
67548: LD_ADDR_EXP 78
67552: PUSH
67553: LD_EXP 78
67557: PPUSH
67558: LD_VAR 0 1
67562: PPUSH
67563: LD_INT 4
67565: PPUSH
67566: CALL_OW 1
67570: ST_TO_ADDR
// b := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
67571: LD_ADDR_VAR 0 12
67575: PUSH
67576: LD_EXP 36
67580: PUSH
67581: LD_VAR 0 1
67585: ARRAY
67586: PPUSH
67587: LD_INT 2
67589: PUSH
67590: LD_INT 30
67592: PUSH
67593: LD_INT 4
67595: PUSH
67596: EMPTY
67597: LIST
67598: LIST
67599: PUSH
67600: LD_INT 30
67602: PUSH
67603: LD_INT 5
67605: PUSH
67606: EMPTY
67607: LIST
67608: LIST
67609: PUSH
67610: EMPTY
67611: LIST
67612: LIST
67613: LIST
67614: PPUSH
67615: CALL_OW 72
67619: ST_TO_ADDR
// if not b then
67620: LD_VAR 0 12
67624: NOT
67625: IFFALSE 67629
// exit ;
67627: GO 70695
// p := [ ] ;
67629: LD_ADDR_VAR 0 11
67633: PUSH
67634: EMPTY
67635: ST_TO_ADDR
// if sci >= 2 then
67636: LD_VAR 0 8
67640: PUSH
67641: LD_INT 2
67643: GREATEREQUAL
67644: IFFALSE 67675
// sci := [ sci [ 1 ] , sci [ 2 ] ] else
67646: LD_ADDR_VAR 0 8
67650: PUSH
67651: LD_VAR 0 8
67655: PUSH
67656: LD_INT 1
67658: ARRAY
67659: PUSH
67660: LD_VAR 0 8
67664: PUSH
67665: LD_INT 2
67667: ARRAY
67668: PUSH
67669: EMPTY
67670: LIST
67671: LIST
67672: ST_TO_ADDR
67673: GO 67736
// if sci = 1 then
67675: LD_VAR 0 8
67679: PUSH
67680: LD_INT 1
67682: EQUAL
67683: IFFALSE 67704
// sci := [ sci [ 1 ] ] else
67685: LD_ADDR_VAR 0 8
67689: PUSH
67690: LD_VAR 0 8
67694: PUSH
67695: LD_INT 1
67697: ARRAY
67698: PUSH
67699: EMPTY
67700: LIST
67701: ST_TO_ADDR
67702: GO 67736
// if sci = 0 then
67704: LD_VAR 0 8
67708: PUSH
67709: LD_INT 0
67711: EQUAL
67712: IFFALSE 67736
// p := SortBySkill ( tmp , 4 ) [ 1 ] ;
67714: LD_ADDR_VAR 0 11
67718: PUSH
67719: LD_VAR 0 4
67723: PPUSH
67724: LD_INT 4
67726: PPUSH
67727: CALL 60734 0 2
67731: PUSH
67732: LD_INT 1
67734: ARRAY
67735: ST_TO_ADDR
// if eng > 4 then
67736: LD_VAR 0 6
67740: PUSH
67741: LD_INT 4
67743: GREATER
67744: IFFALSE 67790
// for i = eng downto 4 do
67746: LD_ADDR_VAR 0 3
67750: PUSH
67751: DOUBLE
67752: LD_VAR 0 6
67756: INC
67757: ST_TO_ADDR
67758: LD_INT 4
67760: PUSH
67761: FOR_DOWNTO
67762: IFFALSE 67788
// eng := eng diff eng [ i ] ;
67764: LD_ADDR_VAR 0 6
67768: PUSH
67769: LD_VAR 0 6
67773: PUSH
67774: LD_VAR 0 6
67778: PUSH
67779: LD_VAR 0 3
67783: ARRAY
67784: DIFF
67785: ST_TO_ADDR
67786: GO 67761
67788: POP
67789: POP
// tmp := tmp diff ( sol union eng union mech union sci ) ;
67790: LD_ADDR_VAR 0 4
67794: PUSH
67795: LD_VAR 0 4
67799: PUSH
67800: LD_VAR 0 5
67804: PUSH
67805: LD_VAR 0 6
67809: UNION
67810: PUSH
67811: LD_VAR 0 7
67815: UNION
67816: PUSH
67817: LD_VAR 0 8
67821: UNION
67822: DIFF
67823: ST_TO_ADDR
// bcount := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) + UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) * 6 ;
67824: LD_ADDR_VAR 0 13
67828: PUSH
67829: LD_EXP 36
67833: PUSH
67834: LD_VAR 0 1
67838: ARRAY
67839: PPUSH
67840: LD_INT 2
67842: PUSH
67843: LD_INT 30
67845: PUSH
67846: LD_INT 32
67848: PUSH
67849: EMPTY
67850: LIST
67851: LIST
67852: PUSH
67853: LD_INT 30
67855: PUSH
67856: LD_INT 31
67858: PUSH
67859: EMPTY
67860: LIST
67861: LIST
67862: PUSH
67863: EMPTY
67864: LIST
67865: LIST
67866: LIST
67867: PPUSH
67868: CALL_OW 72
67872: PUSH
67873: LD_EXP 36
67877: PUSH
67878: LD_VAR 0 1
67882: ARRAY
67883: PPUSH
67884: LD_INT 2
67886: PUSH
67887: LD_INT 30
67889: PUSH
67890: LD_INT 4
67892: PUSH
67893: EMPTY
67894: LIST
67895: LIST
67896: PUSH
67897: LD_INT 30
67899: PUSH
67900: LD_INT 5
67902: PUSH
67903: EMPTY
67904: LIST
67905: LIST
67906: PUSH
67907: EMPTY
67908: LIST
67909: LIST
67910: LIST
67911: PPUSH
67912: CALL_OW 72
67916: PUSH
67917: LD_INT 6
67919: MUL
67920: PLUS
67921: ST_TO_ADDR
// if bcount < tmp then
67922: LD_VAR 0 13
67926: PUSH
67927: LD_VAR 0 4
67931: LESS
67932: IFFALSE 67978
// for i = tmp downto bcount do
67934: LD_ADDR_VAR 0 3
67938: PUSH
67939: DOUBLE
67940: LD_VAR 0 4
67944: INC
67945: ST_TO_ADDR
67946: LD_VAR 0 13
67950: PUSH
67951: FOR_DOWNTO
67952: IFFALSE 67976
// tmp := Delete ( tmp , tmp ) ;
67954: LD_ADDR_VAR 0 4
67958: PUSH
67959: LD_VAR 0 4
67963: PPUSH
67964: LD_VAR 0 4
67968: PPUSH
67969: CALL_OW 3
67973: ST_TO_ADDR
67974: GO 67951
67976: POP
67977: POP
// result := [ tmp , 0 , 0 , p ] ;
67978: LD_ADDR_VAR 0 2
67982: PUSH
67983: LD_VAR 0 4
67987: PUSH
67988: LD_INT 0
67990: PUSH
67991: LD_INT 0
67993: PUSH
67994: LD_VAR 0 11
67998: PUSH
67999: EMPTY
68000: LIST
68001: LIST
68002: LIST
68003: LIST
68004: ST_TO_ADDR
// exit ;
68005: GO 70695
// end ; if not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
68007: LD_EXP 36
68011: PUSH
68012: LD_VAR 0 1
68016: ARRAY
68017: PPUSH
68018: LD_INT 2
68020: PUSH
68021: LD_INT 30
68023: PUSH
68024: LD_INT 6
68026: PUSH
68027: EMPTY
68028: LIST
68029: LIST
68030: PUSH
68031: LD_INT 30
68033: PUSH
68034: LD_INT 7
68036: PUSH
68037: EMPTY
68038: LIST
68039: LIST
68040: PUSH
68041: LD_INT 30
68043: PUSH
68044: LD_INT 8
68046: PUSH
68047: EMPTY
68048: LIST
68049: LIST
68050: PUSH
68051: EMPTY
68052: LIST
68053: LIST
68054: LIST
68055: LIST
68056: PPUSH
68057: CALL_OW 72
68061: NOT
68062: PUSH
68063: LD_EXP 36
68067: PUSH
68068: LD_VAR 0 1
68072: ARRAY
68073: PPUSH
68074: LD_INT 30
68076: PUSH
68077: LD_INT 3
68079: PUSH
68080: EMPTY
68081: LIST
68082: LIST
68083: PPUSH
68084: CALL_OW 72
68088: NOT
68089: AND
68090: IFFALSE 68162
// begin if eng = tmp then
68092: LD_VAR 0 6
68096: PUSH
68097: LD_VAR 0 4
68101: EQUAL
68102: IFFALSE 68106
// exit ;
68104: GO 70695
// mc_class_case_use := Replace ( mc_class_case_use , base , 1 ) ;
68106: LD_ADDR_EXP 78
68110: PUSH
68111: LD_EXP 78
68115: PPUSH
68116: LD_VAR 0 1
68120: PPUSH
68121: LD_INT 1
68123: PPUSH
68124: CALL_OW 1
68128: ST_TO_ADDR
// result := [ 0 , tmp diff eng , 0 , 0 ] ;
68129: LD_ADDR_VAR 0 2
68133: PUSH
68134: LD_INT 0
68136: PUSH
68137: LD_VAR 0 4
68141: PUSH
68142: LD_VAR 0 6
68146: DIFF
68147: PUSH
68148: LD_INT 0
68150: PUSH
68151: LD_INT 0
68153: PUSH
68154: EMPTY
68155: LIST
68156: LIST
68157: LIST
68158: LIST
68159: ST_TO_ADDR
// exit ;
68160: GO 70695
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
68162: LD_EXP 63
68166: PUSH
68167: LD_EXP 62
68171: PUSH
68172: LD_VAR 0 1
68176: ARRAY
68177: ARRAY
68178: PUSH
68179: LD_EXP 36
68183: PUSH
68184: LD_VAR 0 1
68188: ARRAY
68189: PPUSH
68190: LD_INT 2
68192: PUSH
68193: LD_INT 30
68195: PUSH
68196: LD_INT 6
68198: PUSH
68199: EMPTY
68200: LIST
68201: LIST
68202: PUSH
68203: LD_INT 30
68205: PUSH
68206: LD_INT 7
68208: PUSH
68209: EMPTY
68210: LIST
68211: LIST
68212: PUSH
68213: LD_INT 30
68215: PUSH
68216: LD_INT 8
68218: PUSH
68219: EMPTY
68220: LIST
68221: LIST
68222: PUSH
68223: EMPTY
68224: LIST
68225: LIST
68226: LIST
68227: LIST
68228: PPUSH
68229: CALL_OW 72
68233: AND
68234: PUSH
68235: LD_EXP 36
68239: PUSH
68240: LD_VAR 0 1
68244: ARRAY
68245: PPUSH
68246: LD_INT 30
68248: PUSH
68249: LD_INT 3
68251: PUSH
68252: EMPTY
68253: LIST
68254: LIST
68255: PPUSH
68256: CALL_OW 72
68260: NOT
68261: AND
68262: IFFALSE 68476
// begin if sci >= 6 then
68264: LD_VAR 0 8
68268: PUSH
68269: LD_INT 6
68271: GREATEREQUAL
68272: IFFALSE 68276
// exit ;
68274: GO 70695
// mc_class_case_use := Replace ( mc_class_case_use , base , 2 ) ;
68276: LD_ADDR_EXP 78
68280: PUSH
68281: LD_EXP 78
68285: PPUSH
68286: LD_VAR 0 1
68290: PPUSH
68291: LD_INT 2
68293: PPUSH
68294: CALL_OW 1
68298: ST_TO_ADDR
// sort := SortBySkill ( tmp diff sci , 4 ) ;
68299: LD_ADDR_VAR 0 9
68303: PUSH
68304: LD_VAR 0 4
68308: PUSH
68309: LD_VAR 0 8
68313: DIFF
68314: PPUSH
68315: LD_INT 4
68317: PPUSH
68318: CALL 60734 0 2
68322: ST_TO_ADDR
// p := [ ] ;
68323: LD_ADDR_VAR 0 11
68327: PUSH
68328: EMPTY
68329: ST_TO_ADDR
// if sci < 6 and sort > 6 then
68330: LD_VAR 0 8
68334: PUSH
68335: LD_INT 6
68337: LESS
68338: PUSH
68339: LD_VAR 0 9
68343: PUSH
68344: LD_INT 6
68346: GREATER
68347: AND
68348: IFFALSE 68429
// begin for i = 1 to 6 - sci do
68350: LD_ADDR_VAR 0 3
68354: PUSH
68355: DOUBLE
68356: LD_INT 1
68358: DEC
68359: ST_TO_ADDR
68360: LD_INT 6
68362: PUSH
68363: LD_VAR 0 8
68367: MINUS
68368: PUSH
68369: FOR_TO
68370: IFFALSE 68425
// begin p := Insert ( p , p + 1 , sort [ 1 ] ) ;
68372: LD_ADDR_VAR 0 11
68376: PUSH
68377: LD_VAR 0 11
68381: PPUSH
68382: LD_VAR 0 11
68386: PUSH
68387: LD_INT 1
68389: PLUS
68390: PPUSH
68391: LD_VAR 0 9
68395: PUSH
68396: LD_INT 1
68398: ARRAY
68399: PPUSH
68400: CALL_OW 2
68404: ST_TO_ADDR
// sort := Delete ( sort , 1 ) ;
68405: LD_ADDR_VAR 0 9
68409: PUSH
68410: LD_VAR 0 9
68414: PPUSH
68415: LD_INT 1
68417: PPUSH
68418: CALL_OW 3
68422: ST_TO_ADDR
// end ;
68423: GO 68369
68425: POP
68426: POP
// end else
68427: GO 68449
// if sort then
68429: LD_VAR 0 9
68433: IFFALSE 68449
// p := sort [ 1 ] ;
68435: LD_ADDR_VAR 0 11
68439: PUSH
68440: LD_VAR 0 9
68444: PUSH
68445: LD_INT 1
68447: ARRAY
68448: ST_TO_ADDR
// result := [ 0 , 0 , 0 , p ] ;
68449: LD_ADDR_VAR 0 2
68453: PUSH
68454: LD_INT 0
68456: PUSH
68457: LD_INT 0
68459: PUSH
68460: LD_INT 0
68462: PUSH
68463: LD_VAR 0 11
68467: PUSH
68468: EMPTY
68469: LIST
68470: LIST
68471: LIST
68472: LIST
68473: ST_TO_ADDR
// exit ;
68474: GO 70695
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
68476: LD_EXP 63
68480: PUSH
68481: LD_EXP 62
68485: PUSH
68486: LD_VAR 0 1
68490: ARRAY
68491: ARRAY
68492: PUSH
68493: LD_EXP 36
68497: PUSH
68498: LD_VAR 0 1
68502: ARRAY
68503: PPUSH
68504: LD_INT 2
68506: PUSH
68507: LD_INT 30
68509: PUSH
68510: LD_INT 6
68512: PUSH
68513: EMPTY
68514: LIST
68515: LIST
68516: PUSH
68517: LD_INT 30
68519: PUSH
68520: LD_INT 7
68522: PUSH
68523: EMPTY
68524: LIST
68525: LIST
68526: PUSH
68527: LD_INT 30
68529: PUSH
68530: LD_INT 8
68532: PUSH
68533: EMPTY
68534: LIST
68535: LIST
68536: PUSH
68537: EMPTY
68538: LIST
68539: LIST
68540: LIST
68541: LIST
68542: PPUSH
68543: CALL_OW 72
68547: AND
68548: PUSH
68549: LD_EXP 36
68553: PUSH
68554: LD_VAR 0 1
68558: ARRAY
68559: PPUSH
68560: LD_INT 30
68562: PUSH
68563: LD_INT 3
68565: PUSH
68566: EMPTY
68567: LIST
68568: LIST
68569: PPUSH
68570: CALL_OW 72
68574: AND
68575: IFFALSE 69309
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 3 ) ;
68577: LD_ADDR_EXP 78
68581: PUSH
68582: LD_EXP 78
68586: PPUSH
68587: LD_VAR 0 1
68591: PPUSH
68592: LD_INT 3
68594: PPUSH
68595: CALL_OW 1
68599: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
68600: LD_ADDR_VAR 0 2
68604: PUSH
68605: LD_INT 0
68607: PUSH
68608: LD_INT 0
68610: PUSH
68611: LD_INT 0
68613: PUSH
68614: LD_INT 0
68616: PUSH
68617: EMPTY
68618: LIST
68619: LIST
68620: LIST
68621: LIST
68622: ST_TO_ADDR
// if not eng then
68623: LD_VAR 0 6
68627: NOT
68628: IFFALSE 68691
// begin p := SortBySkill ( tmp , 2 ) [ 1 ] ;
68630: LD_ADDR_VAR 0 11
68634: PUSH
68635: LD_VAR 0 4
68639: PPUSH
68640: LD_INT 2
68642: PPUSH
68643: CALL 60734 0 2
68647: PUSH
68648: LD_INT 1
68650: ARRAY
68651: ST_TO_ADDR
// result := Replace ( result , 2 , p ) ;
68652: LD_ADDR_VAR 0 2
68656: PUSH
68657: LD_VAR 0 2
68661: PPUSH
68662: LD_INT 2
68664: PPUSH
68665: LD_VAR 0 11
68669: PPUSH
68670: CALL_OW 1
68674: ST_TO_ADDR
// tmp := tmp diff p ;
68675: LD_ADDR_VAR 0 4
68679: PUSH
68680: LD_VAR 0 4
68684: PUSH
68685: LD_VAR 0 11
68689: DIFF
68690: ST_TO_ADDR
// end ; if tmp and sci < 6 then
68691: LD_VAR 0 4
68695: PUSH
68696: LD_VAR 0 8
68700: PUSH
68701: LD_INT 6
68703: LESS
68704: AND
68705: IFFALSE 68893
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 4 ) ;
68707: LD_ADDR_VAR 0 9
68711: PUSH
68712: LD_VAR 0 4
68716: PUSH
68717: LD_VAR 0 8
68721: PUSH
68722: LD_VAR 0 7
68726: UNION
68727: DIFF
68728: PPUSH
68729: LD_INT 4
68731: PPUSH
68732: CALL 60734 0 2
68736: ST_TO_ADDR
// p := [ ] ;
68737: LD_ADDR_VAR 0 11
68741: PUSH
68742: EMPTY
68743: ST_TO_ADDR
// if sort then
68744: LD_VAR 0 9
68748: IFFALSE 68864
// for i = 1 to 6 - sci do
68750: LD_ADDR_VAR 0 3
68754: PUSH
68755: DOUBLE
68756: LD_INT 1
68758: DEC
68759: ST_TO_ADDR
68760: LD_INT 6
68762: PUSH
68763: LD_VAR 0 8
68767: MINUS
68768: PUSH
68769: FOR_TO
68770: IFFALSE 68862
// begin if i = sort then
68772: LD_VAR 0 3
68776: PUSH
68777: LD_VAR 0 9
68781: EQUAL
68782: IFFALSE 68786
// break ;
68784: GO 68862
// if GetClass ( i ) = 4 then
68786: LD_VAR 0 3
68790: PPUSH
68791: CALL_OW 257
68795: PUSH
68796: LD_INT 4
68798: EQUAL
68799: IFFALSE 68803
// continue ;
68801: GO 68769
// p := Insert ( p , p + 1 , sort [ i ] ) ;
68803: LD_ADDR_VAR 0 11
68807: PUSH
68808: LD_VAR 0 11
68812: PPUSH
68813: LD_VAR 0 11
68817: PUSH
68818: LD_INT 1
68820: PLUS
68821: PPUSH
68822: LD_VAR 0 9
68826: PUSH
68827: LD_VAR 0 3
68831: ARRAY
68832: PPUSH
68833: CALL_OW 2
68837: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
68838: LD_ADDR_VAR 0 4
68842: PUSH
68843: LD_VAR 0 4
68847: PUSH
68848: LD_VAR 0 9
68852: PUSH
68853: LD_VAR 0 3
68857: ARRAY
68858: DIFF
68859: ST_TO_ADDR
// end ;
68860: GO 68769
68862: POP
68863: POP
// if p then
68864: LD_VAR 0 11
68868: IFFALSE 68893
// result := Replace ( result , 4 , p ) ;
68870: LD_ADDR_VAR 0 2
68874: PUSH
68875: LD_VAR 0 2
68879: PPUSH
68880: LD_INT 4
68882: PPUSH
68883: LD_VAR 0 11
68887: PPUSH
68888: CALL_OW 1
68892: ST_TO_ADDR
// end ; if tmp and mech < 6 then
68893: LD_VAR 0 4
68897: PUSH
68898: LD_VAR 0 7
68902: PUSH
68903: LD_INT 6
68905: LESS
68906: AND
68907: IFFALSE 69095
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
68909: LD_ADDR_VAR 0 9
68913: PUSH
68914: LD_VAR 0 4
68918: PUSH
68919: LD_VAR 0 8
68923: PUSH
68924: LD_VAR 0 7
68928: UNION
68929: DIFF
68930: PPUSH
68931: LD_INT 3
68933: PPUSH
68934: CALL 60734 0 2
68938: ST_TO_ADDR
// p := [ ] ;
68939: LD_ADDR_VAR 0 11
68943: PUSH
68944: EMPTY
68945: ST_TO_ADDR
// if sort then
68946: LD_VAR 0 9
68950: IFFALSE 69066
// for i = 1 to 6 - mech do
68952: LD_ADDR_VAR 0 3
68956: PUSH
68957: DOUBLE
68958: LD_INT 1
68960: DEC
68961: ST_TO_ADDR
68962: LD_INT 6
68964: PUSH
68965: LD_VAR 0 7
68969: MINUS
68970: PUSH
68971: FOR_TO
68972: IFFALSE 69064
// begin if i = sort then
68974: LD_VAR 0 3
68978: PUSH
68979: LD_VAR 0 9
68983: EQUAL
68984: IFFALSE 68988
// break ;
68986: GO 69064
// if GetClass ( i ) = 3 then
68988: LD_VAR 0 3
68992: PPUSH
68993: CALL_OW 257
68997: PUSH
68998: LD_INT 3
69000: EQUAL
69001: IFFALSE 69005
// continue ;
69003: GO 68971
// p := Insert ( p , p + 1 , sort [ i ] ) ;
69005: LD_ADDR_VAR 0 11
69009: PUSH
69010: LD_VAR 0 11
69014: PPUSH
69015: LD_VAR 0 11
69019: PUSH
69020: LD_INT 1
69022: PLUS
69023: PPUSH
69024: LD_VAR 0 9
69028: PUSH
69029: LD_VAR 0 3
69033: ARRAY
69034: PPUSH
69035: CALL_OW 2
69039: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
69040: LD_ADDR_VAR 0 4
69044: PUSH
69045: LD_VAR 0 4
69049: PUSH
69050: LD_VAR 0 9
69054: PUSH
69055: LD_VAR 0 3
69059: ARRAY
69060: DIFF
69061: ST_TO_ADDR
// end ;
69062: GO 68971
69064: POP
69065: POP
// if p then
69066: LD_VAR 0 11
69070: IFFALSE 69095
// result := Replace ( result , 3 , p ) ;
69072: LD_ADDR_VAR 0 2
69076: PUSH
69077: LD_VAR 0 2
69081: PPUSH
69082: LD_INT 3
69084: PPUSH
69085: LD_VAR 0 11
69089: PPUSH
69090: CALL_OW 1
69094: ST_TO_ADDR
// end ; if tmp > 6 and eng < 6 then
69095: LD_VAR 0 4
69099: PUSH
69100: LD_INT 6
69102: GREATER
69103: PUSH
69104: LD_VAR 0 6
69108: PUSH
69109: LD_INT 6
69111: LESS
69112: AND
69113: IFFALSE 69307
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
69115: LD_ADDR_VAR 0 9
69119: PUSH
69120: LD_VAR 0 4
69124: PUSH
69125: LD_VAR 0 8
69129: PUSH
69130: LD_VAR 0 7
69134: UNION
69135: PUSH
69136: LD_VAR 0 6
69140: UNION
69141: DIFF
69142: PPUSH
69143: LD_INT 2
69145: PPUSH
69146: CALL 60734 0 2
69150: ST_TO_ADDR
// p := [ ] ;
69151: LD_ADDR_VAR 0 11
69155: PUSH
69156: EMPTY
69157: ST_TO_ADDR
// if sort then
69158: LD_VAR 0 9
69162: IFFALSE 69278
// for i = 1 to 6 - eng do
69164: LD_ADDR_VAR 0 3
69168: PUSH
69169: DOUBLE
69170: LD_INT 1
69172: DEC
69173: ST_TO_ADDR
69174: LD_INT 6
69176: PUSH
69177: LD_VAR 0 6
69181: MINUS
69182: PUSH
69183: FOR_TO
69184: IFFALSE 69276
// begin if i = sort then
69186: LD_VAR 0 3
69190: PUSH
69191: LD_VAR 0 9
69195: EQUAL
69196: IFFALSE 69200
// break ;
69198: GO 69276
// if GetClass ( i ) = 2 then
69200: LD_VAR 0 3
69204: PPUSH
69205: CALL_OW 257
69209: PUSH
69210: LD_INT 2
69212: EQUAL
69213: IFFALSE 69217
// continue ;
69215: GO 69183
// p := Insert ( p , p + 1 , sort [ i ] ) ;
69217: LD_ADDR_VAR 0 11
69221: PUSH
69222: LD_VAR 0 11
69226: PPUSH
69227: LD_VAR 0 11
69231: PUSH
69232: LD_INT 1
69234: PLUS
69235: PPUSH
69236: LD_VAR 0 9
69240: PUSH
69241: LD_VAR 0 3
69245: ARRAY
69246: PPUSH
69247: CALL_OW 2
69251: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
69252: LD_ADDR_VAR 0 4
69256: PUSH
69257: LD_VAR 0 4
69261: PUSH
69262: LD_VAR 0 9
69266: PUSH
69267: LD_VAR 0 3
69271: ARRAY
69272: DIFF
69273: ST_TO_ADDR
// end ;
69274: GO 69183
69276: POP
69277: POP
// if p then
69278: LD_VAR 0 11
69282: IFFALSE 69307
// result := Replace ( result , 2 , p ) ;
69284: LD_ADDR_VAR 0 2
69288: PUSH
69289: LD_VAR 0 2
69293: PPUSH
69294: LD_INT 2
69296: PPUSH
69297: LD_VAR 0 11
69301: PPUSH
69302: CALL_OW 1
69306: ST_TO_ADDR
// end ; exit ;
69307: GO 70695
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and mc_build_list [ base ] then
69309: LD_EXP 63
69313: PUSH
69314: LD_EXP 62
69318: PUSH
69319: LD_VAR 0 1
69323: ARRAY
69324: ARRAY
69325: NOT
69326: PUSH
69327: LD_EXP 36
69331: PUSH
69332: LD_VAR 0 1
69336: ARRAY
69337: PPUSH
69338: LD_INT 30
69340: PUSH
69341: LD_INT 3
69343: PUSH
69344: EMPTY
69345: LIST
69346: LIST
69347: PPUSH
69348: CALL_OW 72
69352: AND
69353: PUSH
69354: LD_EXP 41
69358: PUSH
69359: LD_VAR 0 1
69363: ARRAY
69364: AND
69365: IFFALSE 69973
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 5 ) ;
69367: LD_ADDR_EXP 78
69371: PUSH
69372: LD_EXP 78
69376: PPUSH
69377: LD_VAR 0 1
69381: PPUSH
69382: LD_INT 5
69384: PPUSH
69385: CALL_OW 1
69389: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
69390: LD_ADDR_VAR 0 2
69394: PUSH
69395: LD_INT 0
69397: PUSH
69398: LD_INT 0
69400: PUSH
69401: LD_INT 0
69403: PUSH
69404: LD_INT 0
69406: PUSH
69407: EMPTY
69408: LIST
69409: LIST
69410: LIST
69411: LIST
69412: ST_TO_ADDR
// if sci > 1 then
69413: LD_VAR 0 8
69417: PUSH
69418: LD_INT 1
69420: GREATER
69421: IFFALSE 69449
// tmp := tmp diff ( sci diff sci [ 1 ] ) ;
69423: LD_ADDR_VAR 0 4
69427: PUSH
69428: LD_VAR 0 4
69432: PUSH
69433: LD_VAR 0 8
69437: PUSH
69438: LD_VAR 0 8
69442: PUSH
69443: LD_INT 1
69445: ARRAY
69446: DIFF
69447: DIFF
69448: ST_TO_ADDR
// if tmp and not sci then
69449: LD_VAR 0 4
69453: PUSH
69454: LD_VAR 0 8
69458: NOT
69459: AND
69460: IFFALSE 69529
// begin sort := SortBySkill ( tmp , 4 ) ;
69462: LD_ADDR_VAR 0 9
69466: PUSH
69467: LD_VAR 0 4
69471: PPUSH
69472: LD_INT 4
69474: PPUSH
69475: CALL 60734 0 2
69479: ST_TO_ADDR
// if sort then
69480: LD_VAR 0 9
69484: IFFALSE 69500
// p := sort [ 1 ] ;
69486: LD_ADDR_VAR 0 11
69490: PUSH
69491: LD_VAR 0 9
69495: PUSH
69496: LD_INT 1
69498: ARRAY
69499: ST_TO_ADDR
// if p then
69500: LD_VAR 0 11
69504: IFFALSE 69529
// result := Replace ( result , 4 , p ) ;
69506: LD_ADDR_VAR 0 2
69510: PUSH
69511: LD_VAR 0 2
69515: PPUSH
69516: LD_INT 4
69518: PPUSH
69519: LD_VAR 0 11
69523: PPUSH
69524: CALL_OW 1
69528: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
69529: LD_ADDR_VAR 0 4
69533: PUSH
69534: LD_VAR 0 4
69538: PUSH
69539: LD_VAR 0 7
69543: DIFF
69544: ST_TO_ADDR
// if tmp and mech < 6 then
69545: LD_VAR 0 4
69549: PUSH
69550: LD_VAR 0 7
69554: PUSH
69555: LD_INT 6
69557: LESS
69558: AND
69559: IFFALSE 69747
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
69561: LD_ADDR_VAR 0 9
69565: PUSH
69566: LD_VAR 0 4
69570: PUSH
69571: LD_VAR 0 8
69575: PUSH
69576: LD_VAR 0 7
69580: UNION
69581: DIFF
69582: PPUSH
69583: LD_INT 3
69585: PPUSH
69586: CALL 60734 0 2
69590: ST_TO_ADDR
// p := [ ] ;
69591: LD_ADDR_VAR 0 11
69595: PUSH
69596: EMPTY
69597: ST_TO_ADDR
// if sort then
69598: LD_VAR 0 9
69602: IFFALSE 69718
// for i = 1 to 6 - mech do
69604: LD_ADDR_VAR 0 3
69608: PUSH
69609: DOUBLE
69610: LD_INT 1
69612: DEC
69613: ST_TO_ADDR
69614: LD_INT 6
69616: PUSH
69617: LD_VAR 0 7
69621: MINUS
69622: PUSH
69623: FOR_TO
69624: IFFALSE 69716
// begin if i = sort then
69626: LD_VAR 0 3
69630: PUSH
69631: LD_VAR 0 9
69635: EQUAL
69636: IFFALSE 69640
// break ;
69638: GO 69716
// if GetClass ( i ) = 3 then
69640: LD_VAR 0 3
69644: PPUSH
69645: CALL_OW 257
69649: PUSH
69650: LD_INT 3
69652: EQUAL
69653: IFFALSE 69657
// continue ;
69655: GO 69623
// p := Insert ( p , p + 1 , sort [ i ] ) ;
69657: LD_ADDR_VAR 0 11
69661: PUSH
69662: LD_VAR 0 11
69666: PPUSH
69667: LD_VAR 0 11
69671: PUSH
69672: LD_INT 1
69674: PLUS
69675: PPUSH
69676: LD_VAR 0 9
69680: PUSH
69681: LD_VAR 0 3
69685: ARRAY
69686: PPUSH
69687: CALL_OW 2
69691: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
69692: LD_ADDR_VAR 0 4
69696: PUSH
69697: LD_VAR 0 4
69701: PUSH
69702: LD_VAR 0 9
69706: PUSH
69707: LD_VAR 0 3
69711: ARRAY
69712: DIFF
69713: ST_TO_ADDR
// end ;
69714: GO 69623
69716: POP
69717: POP
// if p then
69718: LD_VAR 0 11
69722: IFFALSE 69747
// result := Replace ( result , 3 , p ) ;
69724: LD_ADDR_VAR 0 2
69728: PUSH
69729: LD_VAR 0 2
69733: PPUSH
69734: LD_INT 3
69736: PPUSH
69737: LD_VAR 0 11
69741: PPUSH
69742: CALL_OW 1
69746: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
69747: LD_ADDR_VAR 0 4
69751: PUSH
69752: LD_VAR 0 4
69756: PUSH
69757: LD_VAR 0 6
69761: DIFF
69762: ST_TO_ADDR
// if tmp and eng < 6 then
69763: LD_VAR 0 4
69767: PUSH
69768: LD_VAR 0 6
69772: PUSH
69773: LD_INT 6
69775: LESS
69776: AND
69777: IFFALSE 69971
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
69779: LD_ADDR_VAR 0 9
69783: PUSH
69784: LD_VAR 0 4
69788: PUSH
69789: LD_VAR 0 8
69793: PUSH
69794: LD_VAR 0 7
69798: UNION
69799: PUSH
69800: LD_VAR 0 6
69804: UNION
69805: DIFF
69806: PPUSH
69807: LD_INT 2
69809: PPUSH
69810: CALL 60734 0 2
69814: ST_TO_ADDR
// p := [ ] ;
69815: LD_ADDR_VAR 0 11
69819: PUSH
69820: EMPTY
69821: ST_TO_ADDR
// if sort then
69822: LD_VAR 0 9
69826: IFFALSE 69942
// for i = 1 to 6 - eng do
69828: LD_ADDR_VAR 0 3
69832: PUSH
69833: DOUBLE
69834: LD_INT 1
69836: DEC
69837: ST_TO_ADDR
69838: LD_INT 6
69840: PUSH
69841: LD_VAR 0 6
69845: MINUS
69846: PUSH
69847: FOR_TO
69848: IFFALSE 69940
// begin if i = sort then
69850: LD_VAR 0 3
69854: PUSH
69855: LD_VAR 0 9
69859: EQUAL
69860: IFFALSE 69864
// break ;
69862: GO 69940
// if GetClass ( i ) = 2 then
69864: LD_VAR 0 3
69868: PPUSH
69869: CALL_OW 257
69873: PUSH
69874: LD_INT 2
69876: EQUAL
69877: IFFALSE 69881
// continue ;
69879: GO 69847
// p := Insert ( p , p + 1 , sort [ i ] ) ;
69881: LD_ADDR_VAR 0 11
69885: PUSH
69886: LD_VAR 0 11
69890: PPUSH
69891: LD_VAR 0 11
69895: PUSH
69896: LD_INT 1
69898: PLUS
69899: PPUSH
69900: LD_VAR 0 9
69904: PUSH
69905: LD_VAR 0 3
69909: ARRAY
69910: PPUSH
69911: CALL_OW 2
69915: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
69916: LD_ADDR_VAR 0 4
69920: PUSH
69921: LD_VAR 0 4
69925: PUSH
69926: LD_VAR 0 9
69930: PUSH
69931: LD_VAR 0 3
69935: ARRAY
69936: DIFF
69937: ST_TO_ADDR
// end ;
69938: GO 69847
69940: POP
69941: POP
// if p then
69942: LD_VAR 0 11
69946: IFFALSE 69971
// result := Replace ( result , 2 , p ) ;
69948: LD_ADDR_VAR 0 2
69952: PUSH
69953: LD_VAR 0 2
69957: PPUSH
69958: LD_INT 2
69960: PPUSH
69961: LD_VAR 0 11
69965: PPUSH
69966: CALL_OW 1
69970: ST_TO_ADDR
// end ; exit ;
69971: GO 70695
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and not mc_build_list [ base ] then
69973: LD_EXP 63
69977: PUSH
69978: LD_EXP 62
69982: PUSH
69983: LD_VAR 0 1
69987: ARRAY
69988: ARRAY
69989: NOT
69990: PUSH
69991: LD_EXP 36
69995: PUSH
69996: LD_VAR 0 1
70000: ARRAY
70001: PPUSH
70002: LD_INT 30
70004: PUSH
70005: LD_INT 3
70007: PUSH
70008: EMPTY
70009: LIST
70010: LIST
70011: PPUSH
70012: CALL_OW 72
70016: AND
70017: PUSH
70018: LD_EXP 41
70022: PUSH
70023: LD_VAR 0 1
70027: ARRAY
70028: NOT
70029: AND
70030: IFFALSE 70695
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 6 ) ;
70032: LD_ADDR_EXP 78
70036: PUSH
70037: LD_EXP 78
70041: PPUSH
70042: LD_VAR 0 1
70046: PPUSH
70047: LD_INT 6
70049: PPUSH
70050: CALL_OW 1
70054: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
70055: LD_ADDR_VAR 0 2
70059: PUSH
70060: LD_INT 0
70062: PUSH
70063: LD_INT 0
70065: PUSH
70066: LD_INT 0
70068: PUSH
70069: LD_INT 0
70071: PUSH
70072: EMPTY
70073: LIST
70074: LIST
70075: LIST
70076: LIST
70077: ST_TO_ADDR
// if sci >= 1 then
70078: LD_VAR 0 8
70082: PUSH
70083: LD_INT 1
70085: GREATEREQUAL
70086: IFFALSE 70108
// tmp := tmp diff sci [ 1 ] ;
70088: LD_ADDR_VAR 0 4
70092: PUSH
70093: LD_VAR 0 4
70097: PUSH
70098: LD_VAR 0 8
70102: PUSH
70103: LD_INT 1
70105: ARRAY
70106: DIFF
70107: ST_TO_ADDR
// if tmp and not sci then
70108: LD_VAR 0 4
70112: PUSH
70113: LD_VAR 0 8
70117: NOT
70118: AND
70119: IFFALSE 70188
// begin sort := SortBySkill ( tmp , 4 ) ;
70121: LD_ADDR_VAR 0 9
70125: PUSH
70126: LD_VAR 0 4
70130: PPUSH
70131: LD_INT 4
70133: PPUSH
70134: CALL 60734 0 2
70138: ST_TO_ADDR
// if sort then
70139: LD_VAR 0 9
70143: IFFALSE 70159
// p := sort [ 1 ] ;
70145: LD_ADDR_VAR 0 11
70149: PUSH
70150: LD_VAR 0 9
70154: PUSH
70155: LD_INT 1
70157: ARRAY
70158: ST_TO_ADDR
// if p then
70159: LD_VAR 0 11
70163: IFFALSE 70188
// result := Replace ( result , 4 , p ) ;
70165: LD_ADDR_VAR 0 2
70169: PUSH
70170: LD_VAR 0 2
70174: PPUSH
70175: LD_INT 4
70177: PPUSH
70178: LD_VAR 0 11
70182: PPUSH
70183: CALL_OW 1
70187: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
70188: LD_ADDR_VAR 0 4
70192: PUSH
70193: LD_VAR 0 4
70197: PUSH
70198: LD_VAR 0 7
70202: DIFF
70203: ST_TO_ADDR
// if tmp and mech < 6 then
70204: LD_VAR 0 4
70208: PUSH
70209: LD_VAR 0 7
70213: PUSH
70214: LD_INT 6
70216: LESS
70217: AND
70218: IFFALSE 70400
// begin sort := SortBySkill ( tmp diff mech , 3 ) ;
70220: LD_ADDR_VAR 0 9
70224: PUSH
70225: LD_VAR 0 4
70229: PUSH
70230: LD_VAR 0 7
70234: DIFF
70235: PPUSH
70236: LD_INT 3
70238: PPUSH
70239: CALL 60734 0 2
70243: ST_TO_ADDR
// p := [ ] ;
70244: LD_ADDR_VAR 0 11
70248: PUSH
70249: EMPTY
70250: ST_TO_ADDR
// if sort then
70251: LD_VAR 0 9
70255: IFFALSE 70371
// for i = 1 to 6 - mech do
70257: LD_ADDR_VAR 0 3
70261: PUSH
70262: DOUBLE
70263: LD_INT 1
70265: DEC
70266: ST_TO_ADDR
70267: LD_INT 6
70269: PUSH
70270: LD_VAR 0 7
70274: MINUS
70275: PUSH
70276: FOR_TO
70277: IFFALSE 70369
// begin if i = sort then
70279: LD_VAR 0 3
70283: PUSH
70284: LD_VAR 0 9
70288: EQUAL
70289: IFFALSE 70293
// break ;
70291: GO 70369
// if GetClass ( i ) = 3 then
70293: LD_VAR 0 3
70297: PPUSH
70298: CALL_OW 257
70302: PUSH
70303: LD_INT 3
70305: EQUAL
70306: IFFALSE 70310
// continue ;
70308: GO 70276
// p := Insert ( p , p + 1 , sort [ i ] ) ;
70310: LD_ADDR_VAR 0 11
70314: PUSH
70315: LD_VAR 0 11
70319: PPUSH
70320: LD_VAR 0 11
70324: PUSH
70325: LD_INT 1
70327: PLUS
70328: PPUSH
70329: LD_VAR 0 9
70333: PUSH
70334: LD_VAR 0 3
70338: ARRAY
70339: PPUSH
70340: CALL_OW 2
70344: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
70345: LD_ADDR_VAR 0 4
70349: PUSH
70350: LD_VAR 0 4
70354: PUSH
70355: LD_VAR 0 9
70359: PUSH
70360: LD_VAR 0 3
70364: ARRAY
70365: DIFF
70366: ST_TO_ADDR
// end ;
70367: GO 70276
70369: POP
70370: POP
// if p then
70371: LD_VAR 0 11
70375: IFFALSE 70400
// result := Replace ( result , 3 , p ) ;
70377: LD_ADDR_VAR 0 2
70381: PUSH
70382: LD_VAR 0 2
70386: PPUSH
70387: LD_INT 3
70389: PPUSH
70390: LD_VAR 0 11
70394: PPUSH
70395: CALL_OW 1
70399: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
70400: LD_ADDR_VAR 0 4
70404: PUSH
70405: LD_VAR 0 4
70409: PUSH
70410: LD_VAR 0 6
70414: DIFF
70415: ST_TO_ADDR
// if tmp and eng < 4 then
70416: LD_VAR 0 4
70420: PUSH
70421: LD_VAR 0 6
70425: PUSH
70426: LD_INT 4
70428: LESS
70429: AND
70430: IFFALSE 70620
// begin sort := SortBySkill ( tmp diff ( mech union eng ) , 2 ) ;
70432: LD_ADDR_VAR 0 9
70436: PUSH
70437: LD_VAR 0 4
70441: PUSH
70442: LD_VAR 0 7
70446: PUSH
70447: LD_VAR 0 6
70451: UNION
70452: DIFF
70453: PPUSH
70454: LD_INT 2
70456: PPUSH
70457: CALL 60734 0 2
70461: ST_TO_ADDR
// p := [ ] ;
70462: LD_ADDR_VAR 0 11
70466: PUSH
70467: EMPTY
70468: ST_TO_ADDR
// if sort then
70469: LD_VAR 0 9
70473: IFFALSE 70589
// for i = 1 to 4 - eng do
70475: LD_ADDR_VAR 0 3
70479: PUSH
70480: DOUBLE
70481: LD_INT 1
70483: DEC
70484: ST_TO_ADDR
70485: LD_INT 4
70487: PUSH
70488: LD_VAR 0 6
70492: MINUS
70493: PUSH
70494: FOR_TO
70495: IFFALSE 70587
// begin if i = sort then
70497: LD_VAR 0 3
70501: PUSH
70502: LD_VAR 0 9
70506: EQUAL
70507: IFFALSE 70511
// break ;
70509: GO 70587
// if GetClass ( i ) = 2 then
70511: LD_VAR 0 3
70515: PPUSH
70516: CALL_OW 257
70520: PUSH
70521: LD_INT 2
70523: EQUAL
70524: IFFALSE 70528
// continue ;
70526: GO 70494
// p := Insert ( p , p + 1 , sort [ i ] ) ;
70528: LD_ADDR_VAR 0 11
70532: PUSH
70533: LD_VAR 0 11
70537: PPUSH
70538: LD_VAR 0 11
70542: PUSH
70543: LD_INT 1
70545: PLUS
70546: PPUSH
70547: LD_VAR 0 9
70551: PUSH
70552: LD_VAR 0 3
70556: ARRAY
70557: PPUSH
70558: CALL_OW 2
70562: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
70563: LD_ADDR_VAR 0 4
70567: PUSH
70568: LD_VAR 0 4
70572: PUSH
70573: LD_VAR 0 9
70577: PUSH
70578: LD_VAR 0 3
70582: ARRAY
70583: DIFF
70584: ST_TO_ADDR
// end ;
70585: GO 70494
70587: POP
70588: POP
// if p then
70589: LD_VAR 0 11
70593: IFFALSE 70618
// result := Replace ( result , 2 , p ) ;
70595: LD_ADDR_VAR 0 2
70599: PUSH
70600: LD_VAR 0 2
70604: PPUSH
70605: LD_INT 2
70607: PPUSH
70608: LD_VAR 0 11
70612: PPUSH
70613: CALL_OW 1
70617: ST_TO_ADDR
// end else
70618: GO 70664
// for i = eng downto 5 do
70620: LD_ADDR_VAR 0 3
70624: PUSH
70625: DOUBLE
70626: LD_VAR 0 6
70630: INC
70631: ST_TO_ADDR
70632: LD_INT 5
70634: PUSH
70635: FOR_DOWNTO
70636: IFFALSE 70662
// tmp := tmp union eng [ i ] ;
70638: LD_ADDR_VAR 0 4
70642: PUSH
70643: LD_VAR 0 4
70647: PUSH
70648: LD_VAR 0 6
70652: PUSH
70653: LD_VAR 0 3
70657: ARRAY
70658: UNION
70659: ST_TO_ADDR
70660: GO 70635
70662: POP
70663: POP
// result := Replace ( result , 1 , tmp diff sol ) ;
70664: LD_ADDR_VAR 0 2
70668: PUSH
70669: LD_VAR 0 2
70673: PPUSH
70674: LD_INT 1
70676: PPUSH
70677: LD_VAR 0 4
70681: PUSH
70682: LD_VAR 0 5
70686: DIFF
70687: PPUSH
70688: CALL_OW 1
70692: ST_TO_ADDR
// exit ;
70693: GO 70695
// end ; end ;
70695: LD_VAR 0 2
70699: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
70700: LD_INT 0
70702: PPUSH
70703: PPUSH
70704: PPUSH
// if not mc_bases then
70705: LD_EXP 36
70709: NOT
70710: IFFALSE 70714
// exit ;
70712: GO 70820
// for i = 1 to mc_bases do
70714: LD_ADDR_VAR 0 2
70718: PUSH
70719: DOUBLE
70720: LD_INT 1
70722: DEC
70723: ST_TO_ADDR
70724: LD_EXP 36
70728: PUSH
70729: FOR_TO
70730: IFFALSE 70811
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
70732: LD_ADDR_VAR 0 3
70736: PUSH
70737: LD_EXP 36
70741: PUSH
70742: LD_VAR 0 2
70746: ARRAY
70747: PPUSH
70748: LD_INT 21
70750: PUSH
70751: LD_INT 3
70753: PUSH
70754: EMPTY
70755: LIST
70756: LIST
70757: PUSH
70758: LD_INT 3
70760: PUSH
70761: LD_INT 24
70763: PUSH
70764: LD_INT 1000
70766: PUSH
70767: EMPTY
70768: LIST
70769: LIST
70770: PUSH
70771: EMPTY
70772: LIST
70773: LIST
70774: PUSH
70775: EMPTY
70776: LIST
70777: LIST
70778: PPUSH
70779: CALL_OW 72
70783: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
70784: LD_ADDR_EXP 37
70788: PUSH
70789: LD_EXP 37
70793: PPUSH
70794: LD_VAR 0 2
70798: PPUSH
70799: LD_VAR 0 3
70803: PPUSH
70804: CALL_OW 1
70808: ST_TO_ADDR
// end ;
70809: GO 70729
70811: POP
70812: POP
// RaiseSailEvent ( 101 ) ;
70813: LD_INT 101
70815: PPUSH
70816: CALL_OW 427
// end ;
70820: LD_VAR 0 1
70824: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
70825: LD_INT 0
70827: PPUSH
70828: PPUSH
70829: PPUSH
70830: PPUSH
70831: PPUSH
70832: PPUSH
70833: PPUSH
// if not mc_bases then
70834: LD_EXP 36
70838: NOT
70839: IFFALSE 70843
// exit ;
70841: GO 71416
// for i = 1 to mc_bases do
70843: LD_ADDR_VAR 0 2
70847: PUSH
70848: DOUBLE
70849: LD_INT 1
70851: DEC
70852: ST_TO_ADDR
70853: LD_EXP 36
70857: PUSH
70858: FOR_TO
70859: IFFALSE 71407
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 800 ] ] ] ] ) ;
70861: LD_ADDR_VAR 0 5
70865: PUSH
70866: LD_EXP 36
70870: PUSH
70871: LD_VAR 0 2
70875: ARRAY
70876: PUSH
70877: LD_EXP 65
70881: PUSH
70882: LD_VAR 0 2
70886: ARRAY
70887: UNION
70888: PPUSH
70889: LD_INT 21
70891: PUSH
70892: LD_INT 1
70894: PUSH
70895: EMPTY
70896: LIST
70897: LIST
70898: PUSH
70899: LD_INT 1
70901: PUSH
70902: LD_INT 3
70904: PUSH
70905: LD_INT 54
70907: PUSH
70908: EMPTY
70909: LIST
70910: PUSH
70911: EMPTY
70912: LIST
70913: LIST
70914: PUSH
70915: LD_INT 3
70917: PUSH
70918: LD_INT 24
70920: PUSH
70921: LD_INT 800
70923: PUSH
70924: EMPTY
70925: LIST
70926: LIST
70927: PUSH
70928: EMPTY
70929: LIST
70930: LIST
70931: PUSH
70932: EMPTY
70933: LIST
70934: LIST
70935: LIST
70936: PUSH
70937: EMPTY
70938: LIST
70939: LIST
70940: PPUSH
70941: CALL_OW 72
70945: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
70946: LD_ADDR_VAR 0 6
70950: PUSH
70951: LD_EXP 36
70955: PUSH
70956: LD_VAR 0 2
70960: ARRAY
70961: PPUSH
70962: LD_INT 21
70964: PUSH
70965: LD_INT 1
70967: PUSH
70968: EMPTY
70969: LIST
70970: LIST
70971: PUSH
70972: LD_INT 1
70974: PUSH
70975: LD_INT 3
70977: PUSH
70978: LD_INT 54
70980: PUSH
70981: EMPTY
70982: LIST
70983: PUSH
70984: EMPTY
70985: LIST
70986: LIST
70987: PUSH
70988: LD_INT 3
70990: PUSH
70991: LD_INT 24
70993: PUSH
70994: LD_INT 250
70996: PUSH
70997: EMPTY
70998: LIST
70999: LIST
71000: PUSH
71001: EMPTY
71002: LIST
71003: LIST
71004: PUSH
71005: EMPTY
71006: LIST
71007: LIST
71008: LIST
71009: PUSH
71010: EMPTY
71011: LIST
71012: LIST
71013: PPUSH
71014: CALL_OW 72
71018: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
71019: LD_ADDR_VAR 0 7
71023: PUSH
71024: LD_VAR 0 5
71028: PUSH
71029: LD_VAR 0 6
71033: DIFF
71034: ST_TO_ADDR
// if not need_heal_1 then
71035: LD_VAR 0 6
71039: NOT
71040: IFFALSE 71073
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , [ ] ) else
71042: LD_ADDR_EXP 39
71046: PUSH
71047: LD_EXP 39
71051: PPUSH
71052: LD_VAR 0 2
71056: PUSH
71057: LD_INT 1
71059: PUSH
71060: EMPTY
71061: LIST
71062: LIST
71063: PPUSH
71064: EMPTY
71065: PPUSH
71066: CALL 26486 0 3
71070: ST_TO_ADDR
71071: GO 71143
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , UnitFilter ( mc_need_heal [ i ] [ 1 ] , [ f_not , [ f_lives , 1000 ] ] ) union need_heal_1 ) ;
71073: LD_ADDR_EXP 39
71077: PUSH
71078: LD_EXP 39
71082: PPUSH
71083: LD_VAR 0 2
71087: PUSH
71088: LD_INT 1
71090: PUSH
71091: EMPTY
71092: LIST
71093: LIST
71094: PPUSH
71095: LD_EXP 39
71099: PUSH
71100: LD_VAR 0 2
71104: ARRAY
71105: PUSH
71106: LD_INT 1
71108: ARRAY
71109: PPUSH
71110: LD_INT 3
71112: PUSH
71113: LD_INT 24
71115: PUSH
71116: LD_INT 1000
71118: PUSH
71119: EMPTY
71120: LIST
71121: LIST
71122: PUSH
71123: EMPTY
71124: LIST
71125: LIST
71126: PPUSH
71127: CALL_OW 72
71131: PUSH
71132: LD_VAR 0 6
71136: UNION
71137: PPUSH
71138: CALL 26486 0 3
71142: ST_TO_ADDR
// if not need_heal_2 then
71143: LD_VAR 0 7
71147: NOT
71148: IFFALSE 71181
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , [ ] ) else
71150: LD_ADDR_EXP 39
71154: PUSH
71155: LD_EXP 39
71159: PPUSH
71160: LD_VAR 0 2
71164: PUSH
71165: LD_INT 2
71167: PUSH
71168: EMPTY
71169: LIST
71170: LIST
71171: PPUSH
71172: EMPTY
71173: PPUSH
71174: CALL 26486 0 3
71178: ST_TO_ADDR
71179: GO 71213
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
71181: LD_ADDR_EXP 39
71185: PUSH
71186: LD_EXP 39
71190: PPUSH
71191: LD_VAR 0 2
71195: PUSH
71196: LD_INT 2
71198: PUSH
71199: EMPTY
71200: LIST
71201: LIST
71202: PPUSH
71203: LD_VAR 0 7
71207: PPUSH
71208: CALL 26486 0 3
71212: ST_TO_ADDR
// if need_heal_2 then
71213: LD_VAR 0 7
71217: IFFALSE 71389
// for j in need_heal_2 do
71219: LD_ADDR_VAR 0 3
71223: PUSH
71224: LD_VAR 0 7
71228: PUSH
71229: FOR_IN
71230: IFFALSE 71387
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
71232: LD_ADDR_VAR 0 5
71236: PUSH
71237: LD_EXP 36
71241: PUSH
71242: LD_VAR 0 2
71246: ARRAY
71247: PPUSH
71248: LD_INT 2
71250: PUSH
71251: LD_INT 30
71253: PUSH
71254: LD_INT 6
71256: PUSH
71257: EMPTY
71258: LIST
71259: LIST
71260: PUSH
71261: LD_INT 30
71263: PUSH
71264: LD_INT 7
71266: PUSH
71267: EMPTY
71268: LIST
71269: LIST
71270: PUSH
71271: LD_INT 30
71273: PUSH
71274: LD_INT 8
71276: PUSH
71277: EMPTY
71278: LIST
71279: LIST
71280: PUSH
71281: LD_INT 30
71283: PUSH
71284: LD_INT 0
71286: PUSH
71287: EMPTY
71288: LIST
71289: LIST
71290: PUSH
71291: LD_INT 30
71293: PUSH
71294: LD_INT 1
71296: PUSH
71297: EMPTY
71298: LIST
71299: LIST
71300: PUSH
71301: LD_INT 25
71303: PUSH
71304: LD_INT 4
71306: PUSH
71307: EMPTY
71308: LIST
71309: LIST
71310: PUSH
71311: EMPTY
71312: LIST
71313: LIST
71314: LIST
71315: LIST
71316: LIST
71317: LIST
71318: LIST
71319: PPUSH
71320: CALL_OW 72
71324: ST_TO_ADDR
// if tmp then
71325: LD_VAR 0 5
71329: IFFALSE 71385
// begin k := NearestUnitToUnit ( tmp , j ) ;
71331: LD_ADDR_VAR 0 4
71335: PUSH
71336: LD_VAR 0 5
71340: PPUSH
71341: LD_VAR 0 3
71345: PPUSH
71346: CALL_OW 74
71350: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
71351: LD_VAR 0 3
71355: PPUSH
71356: LD_VAR 0 4
71360: PPUSH
71361: CALL_OW 296
71365: PUSH
71366: LD_INT 7
71368: GREATER
71369: IFFALSE 71385
// ComMoveUnit ( j , k ) ;
71371: LD_VAR 0 3
71375: PPUSH
71376: LD_VAR 0 4
71380: PPUSH
71381: CALL_OW 112
// end ; end ;
71385: GO 71229
71387: POP
71388: POP
// if not need_heal_1 and not need_heal_2 then
71389: LD_VAR 0 6
71393: NOT
71394: PUSH
71395: LD_VAR 0 7
71399: NOT
71400: AND
71401: IFFALSE 71405
// continue ;
71403: GO 70858
// end ;
71405: GO 70858
71407: POP
71408: POP
// RaiseSailEvent ( 102 ) ;
71409: LD_INT 102
71411: PPUSH
71412: CALL_OW 427
// end ;
71416: LD_VAR 0 1
71420: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp , cranes ; begin
71421: LD_INT 0
71423: PPUSH
71424: PPUSH
71425: PPUSH
71426: PPUSH
71427: PPUSH
71428: PPUSH
// if not mc_bases then
71429: LD_EXP 36
71433: NOT
71434: IFFALSE 71438
// exit ;
71436: GO 72148
// for i = 1 to mc_bases do
71438: LD_ADDR_VAR 0 2
71442: PUSH
71443: DOUBLE
71444: LD_INT 1
71446: DEC
71447: ST_TO_ADDR
71448: LD_EXP 36
71452: PUSH
71453: FOR_TO
71454: IFFALSE 72146
// begin if not mc_building_need_repair [ i ] then
71456: LD_EXP 37
71460: PUSH
71461: LD_VAR 0 2
71465: ARRAY
71466: NOT
71467: IFFALSE 71641
// begin cranes := UnitFilter ( mc_vehicles [ i ] , [ [ f_not , [ f_lives , 1000 ] ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ] ) ;
71469: LD_ADDR_VAR 0 6
71473: PUSH
71474: LD_EXP 55
71478: PUSH
71479: LD_VAR 0 2
71483: ARRAY
71484: PPUSH
71485: LD_INT 3
71487: PUSH
71488: LD_INT 24
71490: PUSH
71491: LD_INT 1000
71493: PUSH
71494: EMPTY
71495: LIST
71496: LIST
71497: PUSH
71498: EMPTY
71499: LIST
71500: LIST
71501: PUSH
71502: LD_INT 2
71504: PUSH
71505: LD_INT 34
71507: PUSH
71508: LD_INT 13
71510: PUSH
71511: EMPTY
71512: LIST
71513: LIST
71514: PUSH
71515: LD_INT 34
71517: PUSH
71518: LD_INT 52
71520: PUSH
71521: EMPTY
71522: LIST
71523: LIST
71524: PUSH
71525: EMPTY
71526: LIST
71527: LIST
71528: LIST
71529: PUSH
71530: EMPTY
71531: LIST
71532: LIST
71533: PPUSH
71534: CALL_OW 72
71538: ST_TO_ADDR
// if cranes then
71539: LD_VAR 0 6
71543: IFFALSE 71605
// for j in cranes do
71545: LD_ADDR_VAR 0 3
71549: PUSH
71550: LD_VAR 0 6
71554: PUSH
71555: FOR_IN
71556: IFFALSE 71603
// if not IsInArea ( j , mc_parking [ i ] ) then
71558: LD_VAR 0 3
71562: PPUSH
71563: LD_EXP 60
71567: PUSH
71568: LD_VAR 0 2
71572: ARRAY
71573: PPUSH
71574: CALL_OW 308
71578: NOT
71579: IFFALSE 71601
// ComMoveToArea ( j , mc_parking [ i ] ) ;
71581: LD_VAR 0 3
71585: PPUSH
71586: LD_EXP 60
71590: PUSH
71591: LD_VAR 0 2
71595: ARRAY
71596: PPUSH
71597: CALL_OW 113
71601: GO 71555
71603: POP
71604: POP
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
71605: LD_ADDR_EXP 38
71609: PUSH
71610: LD_EXP 38
71614: PPUSH
71615: LD_VAR 0 2
71619: PPUSH
71620: EMPTY
71621: PPUSH
71622: CALL_OW 1
71626: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
71627: LD_VAR 0 2
71631: PPUSH
71632: LD_INT 101
71634: PPUSH
71635: CALL 66533 0 2
// continue ;
71639: GO 71453
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
71641: LD_ADDR_EXP 42
71645: PUSH
71646: LD_EXP 42
71650: PPUSH
71651: LD_VAR 0 2
71655: PPUSH
71656: EMPTY
71657: PPUSH
71658: CALL_OW 1
71662: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
71663: LD_VAR 0 2
71667: PPUSH
71668: LD_INT 103
71670: PPUSH
71671: CALL 66533 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
71675: LD_ADDR_VAR 0 5
71679: PUSH
71680: LD_EXP 36
71684: PUSH
71685: LD_VAR 0 2
71689: ARRAY
71690: PUSH
71691: LD_EXP 65
71695: PUSH
71696: LD_VAR 0 2
71700: ARRAY
71701: UNION
71702: PPUSH
71703: LD_INT 2
71705: PUSH
71706: LD_INT 25
71708: PUSH
71709: LD_INT 2
71711: PUSH
71712: EMPTY
71713: LIST
71714: LIST
71715: PUSH
71716: LD_INT 25
71718: PUSH
71719: LD_INT 16
71721: PUSH
71722: EMPTY
71723: LIST
71724: LIST
71725: PUSH
71726: EMPTY
71727: LIST
71728: LIST
71729: LIST
71730: PUSH
71731: EMPTY
71732: LIST
71733: PPUSH
71734: CALL_OW 72
71738: ST_TO_ADDR
// cranes := UnitFilter ( mc_vehicles [ i ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ) ;
71739: LD_ADDR_VAR 0 6
71743: PUSH
71744: LD_EXP 55
71748: PUSH
71749: LD_VAR 0 2
71753: ARRAY
71754: PPUSH
71755: LD_INT 2
71757: PUSH
71758: LD_INT 34
71760: PUSH
71761: LD_INT 13
71763: PUSH
71764: EMPTY
71765: LIST
71766: LIST
71767: PUSH
71768: LD_INT 34
71770: PUSH
71771: LD_INT 52
71773: PUSH
71774: EMPTY
71775: LIST
71776: LIST
71777: PUSH
71778: EMPTY
71779: LIST
71780: LIST
71781: LIST
71782: PPUSH
71783: CALL_OW 72
71787: ST_TO_ADDR
// if cranes then
71788: LD_VAR 0 6
71792: IFFALSE 71928
// begin for j in cranes do
71794: LD_ADDR_VAR 0 3
71798: PUSH
71799: LD_VAR 0 6
71803: PUSH
71804: FOR_IN
71805: IFFALSE 71926
// if GetLives ( j ) >= 500 and not HasTask ( j ) then
71807: LD_VAR 0 3
71811: PPUSH
71812: CALL_OW 256
71816: PUSH
71817: LD_INT 500
71819: GREATEREQUAL
71820: PUSH
71821: LD_VAR 0 3
71825: PPUSH
71826: CALL_OW 314
71830: NOT
71831: AND
71832: IFFALSE 71866
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) else
71834: LD_VAR 0 3
71838: PPUSH
71839: LD_EXP 37
71843: PUSH
71844: LD_VAR 0 2
71848: ARRAY
71849: PPUSH
71850: LD_VAR 0 3
71854: PPUSH
71855: CALL_OW 74
71859: PPUSH
71860: CALL_OW 130
71864: GO 71924
// if GetLives ( j ) < 500 and not IsInArea ( j , mc_parking [ i ] ) then
71866: LD_VAR 0 3
71870: PPUSH
71871: CALL_OW 256
71875: PUSH
71876: LD_INT 500
71878: LESS
71879: PUSH
71880: LD_VAR 0 3
71884: PPUSH
71885: LD_EXP 60
71889: PUSH
71890: LD_VAR 0 2
71894: ARRAY
71895: PPUSH
71896: CALL_OW 308
71900: NOT
71901: AND
71902: IFFALSE 71924
// ComMoveToArea ( j , mc_parking [ i ] ) ;
71904: LD_VAR 0 3
71908: PPUSH
71909: LD_EXP 60
71913: PUSH
71914: LD_VAR 0 2
71918: ARRAY
71919: PPUSH
71920: CALL_OW 113
71924: GO 71804
71926: POP
71927: POP
// end ; if not tmp then
71928: LD_VAR 0 5
71932: NOT
71933: IFFALSE 71937
// continue ;
71935: GO 71453
// for j in tmp do
71937: LD_ADDR_VAR 0 3
71941: PUSH
71942: LD_VAR 0 5
71946: PUSH
71947: FOR_IN
71948: IFFALSE 72142
// begin if mc_need_heal [ i ] then
71950: LD_EXP 39
71954: PUSH
71955: LD_VAR 0 2
71959: ARRAY
71960: IFFALSE 72008
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
71962: LD_VAR 0 3
71966: PUSH
71967: LD_EXP 39
71971: PUSH
71972: LD_VAR 0 2
71976: ARRAY
71977: PUSH
71978: LD_INT 1
71980: ARRAY
71981: IN
71982: PUSH
71983: LD_VAR 0 3
71987: PUSH
71988: LD_EXP 39
71992: PUSH
71993: LD_VAR 0 2
71997: ARRAY
71998: PUSH
71999: LD_INT 2
72001: ARRAY
72002: IN
72003: OR
72004: IFFALSE 72008
// continue ;
72006: GO 71947
// if IsInUnit ( j ) then
72008: LD_VAR 0 3
72012: PPUSH
72013: CALL_OW 310
72017: IFFALSE 72028
// ComExitBuilding ( j ) ;
72019: LD_VAR 0 3
72023: PPUSH
72024: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
72028: LD_VAR 0 3
72032: PUSH
72033: LD_EXP 38
72037: PUSH
72038: LD_VAR 0 2
72042: ARRAY
72043: IN
72044: NOT
72045: IFFALSE 72103
// begin SetTag ( j , 101 ) ;
72047: LD_VAR 0 3
72051: PPUSH
72052: LD_INT 101
72054: PPUSH
72055: CALL_OW 109
// mc_building_repairs := ReplaceIn ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
72059: LD_ADDR_EXP 38
72063: PUSH
72064: LD_EXP 38
72068: PPUSH
72069: LD_VAR 0 2
72073: PUSH
72074: LD_EXP 38
72078: PUSH
72079: LD_VAR 0 2
72083: ARRAY
72084: PUSH
72085: LD_INT 1
72087: PLUS
72088: PUSH
72089: EMPTY
72090: LIST
72091: LIST
72092: PPUSH
72093: LD_VAR 0 3
72097: PPUSH
72098: CALL 26486 0 3
72102: ST_TO_ADDR
// end ; wait ( 1 ) ;
72103: LD_INT 1
72105: PPUSH
72106: CALL_OW 67
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) ;
72110: LD_VAR 0 3
72114: PPUSH
72115: LD_EXP 37
72119: PUSH
72120: LD_VAR 0 2
72124: ARRAY
72125: PPUSH
72126: LD_VAR 0 3
72130: PPUSH
72131: CALL_OW 74
72135: PPUSH
72136: CALL_OW 130
// end ;
72140: GO 71947
72142: POP
72143: POP
// end ;
72144: GO 71453
72146: POP
72147: POP
// end ;
72148: LD_VAR 0 1
72152: RET
// export function MC_Heal ; var i , j , tmp ; begin
72153: LD_INT 0
72155: PPUSH
72156: PPUSH
72157: PPUSH
72158: PPUSH
// if not mc_bases then
72159: LD_EXP 36
72163: NOT
72164: IFFALSE 72168
// exit ;
72166: GO 72570
// for i = 1 to mc_bases do
72168: LD_ADDR_VAR 0 2
72172: PUSH
72173: DOUBLE
72174: LD_INT 1
72176: DEC
72177: ST_TO_ADDR
72178: LD_EXP 36
72182: PUSH
72183: FOR_TO
72184: IFFALSE 72568
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
72186: LD_EXP 39
72190: PUSH
72191: LD_VAR 0 2
72195: ARRAY
72196: PUSH
72197: LD_INT 1
72199: ARRAY
72200: NOT
72201: PUSH
72202: LD_EXP 39
72206: PUSH
72207: LD_VAR 0 2
72211: ARRAY
72212: PUSH
72213: LD_INT 2
72215: ARRAY
72216: NOT
72217: AND
72218: IFFALSE 72256
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
72220: LD_ADDR_EXP 40
72224: PUSH
72225: LD_EXP 40
72229: PPUSH
72230: LD_VAR 0 2
72234: PPUSH
72235: EMPTY
72236: PPUSH
72237: CALL_OW 1
72241: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
72242: LD_VAR 0 2
72246: PPUSH
72247: LD_INT 102
72249: PPUSH
72250: CALL 66533 0 2
// continue ;
72254: GO 72183
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
72256: LD_ADDR_VAR 0 4
72260: PUSH
72261: LD_EXP 36
72265: PUSH
72266: LD_VAR 0 2
72270: ARRAY
72271: PPUSH
72272: LD_INT 25
72274: PUSH
72275: LD_INT 4
72277: PUSH
72278: EMPTY
72279: LIST
72280: LIST
72281: PPUSH
72282: CALL_OW 72
72286: ST_TO_ADDR
// if not tmp then
72287: LD_VAR 0 4
72291: NOT
72292: IFFALSE 72296
// continue ;
72294: GO 72183
// if mc_taming [ i ] then
72296: LD_EXP 67
72300: PUSH
72301: LD_VAR 0 2
72305: ARRAY
72306: IFFALSE 72330
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
72308: LD_ADDR_EXP 67
72312: PUSH
72313: LD_EXP 67
72317: PPUSH
72318: LD_VAR 0 2
72322: PPUSH
72323: EMPTY
72324: PPUSH
72325: CALL_OW 1
72329: ST_TO_ADDR
// for j in tmp do
72330: LD_ADDR_VAR 0 3
72334: PUSH
72335: LD_VAR 0 4
72339: PUSH
72340: FOR_IN
72341: IFFALSE 72564
// begin if IsInUnit ( j ) then
72343: LD_VAR 0 3
72347: PPUSH
72348: CALL_OW 310
72352: IFFALSE 72363
// ComExitBuilding ( j ) ;
72354: LD_VAR 0 3
72358: PPUSH
72359: CALL_OW 122
// if not j in mc_healers [ i ] then
72363: LD_VAR 0 3
72367: PUSH
72368: LD_EXP 40
72372: PUSH
72373: LD_VAR 0 2
72377: ARRAY
72378: IN
72379: NOT
72380: IFFALSE 72426
// mc_healers := ReplaceIn ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
72382: LD_ADDR_EXP 40
72386: PUSH
72387: LD_EXP 40
72391: PPUSH
72392: LD_VAR 0 2
72396: PUSH
72397: LD_EXP 40
72401: PUSH
72402: LD_VAR 0 2
72406: ARRAY
72407: PUSH
72408: LD_INT 1
72410: PLUS
72411: PUSH
72412: EMPTY
72413: LIST
72414: LIST
72415: PPUSH
72416: LD_VAR 0 3
72420: PPUSH
72421: CALL 26486 0 3
72425: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
72426: LD_VAR 0 3
72430: PPUSH
72431: CALL_OW 110
72435: PUSH
72436: LD_INT 102
72438: NONEQUAL
72439: IFFALSE 72453
// SetTag ( j , 102 ) ;
72441: LD_VAR 0 3
72445: PPUSH
72446: LD_INT 102
72448: PPUSH
72449: CALL_OW 109
// Wait ( 3 ) ;
72453: LD_INT 3
72455: PPUSH
72456: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
72460: LD_EXP 39
72464: PUSH
72465: LD_VAR 0 2
72469: ARRAY
72470: PUSH
72471: LD_INT 1
72473: ARRAY
72474: IFFALSE 72506
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
72476: LD_VAR 0 3
72480: PPUSH
72481: LD_EXP 39
72485: PUSH
72486: LD_VAR 0 2
72490: ARRAY
72491: PUSH
72492: LD_INT 1
72494: ARRAY
72495: PUSH
72496: LD_INT 1
72498: ARRAY
72499: PPUSH
72500: CALL_OW 128
72504: GO 72562
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
72506: LD_VAR 0 3
72510: PPUSH
72511: CALL_OW 314
72515: NOT
72516: PUSH
72517: LD_EXP 39
72521: PUSH
72522: LD_VAR 0 2
72526: ARRAY
72527: PUSH
72528: LD_INT 2
72530: ARRAY
72531: AND
72532: IFFALSE 72562
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
72534: LD_VAR 0 3
72538: PPUSH
72539: LD_EXP 39
72543: PUSH
72544: LD_VAR 0 2
72548: ARRAY
72549: PUSH
72550: LD_INT 2
72552: ARRAY
72553: PUSH
72554: LD_INT 1
72556: ARRAY
72557: PPUSH
72558: CALL_OW 128
// end ;
72562: GO 72340
72564: POP
72565: POP
// end ;
72566: GO 72183
72568: POP
72569: POP
// end ;
72570: LD_VAR 0 1
72574: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
72575: LD_INT 0
72577: PPUSH
72578: PPUSH
72579: PPUSH
72580: PPUSH
72581: PPUSH
// if not mc_bases then
72582: LD_EXP 36
72586: NOT
72587: IFFALSE 72591
// exit ;
72589: GO 73734
// for i = 1 to mc_bases do
72591: LD_ADDR_VAR 0 2
72595: PUSH
72596: DOUBLE
72597: LD_INT 1
72599: DEC
72600: ST_TO_ADDR
72601: LD_EXP 36
72605: PUSH
72606: FOR_TO
72607: IFFALSE 73732
// begin if mc_scan [ i ] then
72609: LD_EXP 59
72613: PUSH
72614: LD_VAR 0 2
72618: ARRAY
72619: IFFALSE 72623
// continue ;
72621: GO 72606
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
72623: LD_EXP 41
72627: PUSH
72628: LD_VAR 0 2
72632: ARRAY
72633: NOT
72634: PUSH
72635: LD_EXP 43
72639: PUSH
72640: LD_VAR 0 2
72644: ARRAY
72645: NOT
72646: AND
72647: PUSH
72648: LD_EXP 42
72652: PUSH
72653: LD_VAR 0 2
72657: ARRAY
72658: AND
72659: IFFALSE 72697
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
72661: LD_ADDR_EXP 42
72665: PUSH
72666: LD_EXP 42
72670: PPUSH
72671: LD_VAR 0 2
72675: PPUSH
72676: EMPTY
72677: PPUSH
72678: CALL_OW 1
72682: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
72683: LD_VAR 0 2
72687: PPUSH
72688: LD_INT 103
72690: PPUSH
72691: CALL 66533 0 2
// continue ;
72695: GO 72606
// end ; if mc_construct_list [ i ] then
72697: LD_EXP 43
72701: PUSH
72702: LD_VAR 0 2
72706: ARRAY
72707: IFFALSE 72927
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
72709: LD_ADDR_VAR 0 4
72713: PUSH
72714: LD_EXP 36
72718: PUSH
72719: LD_VAR 0 2
72723: ARRAY
72724: PPUSH
72725: LD_INT 25
72727: PUSH
72728: LD_INT 2
72730: PUSH
72731: EMPTY
72732: LIST
72733: LIST
72734: PPUSH
72735: CALL_OW 72
72739: PUSH
72740: LD_EXP 38
72744: PUSH
72745: LD_VAR 0 2
72749: ARRAY
72750: DIFF
72751: ST_TO_ADDR
// if not tmp then
72752: LD_VAR 0 4
72756: NOT
72757: IFFALSE 72761
// continue ;
72759: GO 72606
// for j in tmp do
72761: LD_ADDR_VAR 0 3
72765: PUSH
72766: LD_VAR 0 4
72770: PUSH
72771: FOR_IN
72772: IFFALSE 72923
// begin if not mc_builders [ i ] then
72774: LD_EXP 42
72778: PUSH
72779: LD_VAR 0 2
72783: ARRAY
72784: NOT
72785: IFFALSE 72843
// begin SetTag ( j , 103 ) ;
72787: LD_VAR 0 3
72791: PPUSH
72792: LD_INT 103
72794: PPUSH
72795: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
72799: LD_ADDR_EXP 42
72803: PUSH
72804: LD_EXP 42
72808: PPUSH
72809: LD_VAR 0 2
72813: PUSH
72814: LD_EXP 42
72818: PUSH
72819: LD_VAR 0 2
72823: ARRAY
72824: PUSH
72825: LD_INT 1
72827: PLUS
72828: PUSH
72829: EMPTY
72830: LIST
72831: LIST
72832: PPUSH
72833: LD_VAR 0 3
72837: PPUSH
72838: CALL 26486 0 3
72842: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
72843: LD_VAR 0 3
72847: PPUSH
72848: CALL_OW 310
72852: IFFALSE 72863
// ComExitBuilding ( j ) ;
72854: LD_VAR 0 3
72858: PPUSH
72859: CALL_OW 122
// wait ( 3 ) ;
72863: LD_INT 3
72865: PPUSH
72866: CALL_OW 67
// if not mc_construct_list [ i ] then
72870: LD_EXP 43
72874: PUSH
72875: LD_VAR 0 2
72879: ARRAY
72880: NOT
72881: IFFALSE 72885
// break ;
72883: GO 72923
// if not HasTask ( j ) then
72885: LD_VAR 0 3
72889: PPUSH
72890: CALL_OW 314
72894: NOT
72895: IFFALSE 72921
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
72897: LD_VAR 0 3
72901: PPUSH
72902: LD_EXP 43
72906: PUSH
72907: LD_VAR 0 2
72911: ARRAY
72912: PUSH
72913: LD_INT 1
72915: ARRAY
72916: PPUSH
72917: CALL 29337 0 2
// end ;
72921: GO 72771
72923: POP
72924: POP
// end else
72925: GO 73730
// if mc_build_list [ i ] then
72927: LD_EXP 41
72931: PUSH
72932: LD_VAR 0 2
72936: ARRAY
72937: IFFALSE 73730
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
72939: LD_ADDR_VAR 0 5
72943: PUSH
72944: LD_EXP 36
72948: PUSH
72949: LD_VAR 0 2
72953: ARRAY
72954: PPUSH
72955: LD_INT 2
72957: PUSH
72958: LD_INT 30
72960: PUSH
72961: LD_INT 0
72963: PUSH
72964: EMPTY
72965: LIST
72966: LIST
72967: PUSH
72968: LD_INT 30
72970: PUSH
72971: LD_INT 1
72973: PUSH
72974: EMPTY
72975: LIST
72976: LIST
72977: PUSH
72978: EMPTY
72979: LIST
72980: LIST
72981: LIST
72982: PPUSH
72983: CALL_OW 72
72987: ST_TO_ADDR
// if depot then
72988: LD_VAR 0 5
72992: IFFALSE 73010
// depot := depot [ 1 ] else
72994: LD_ADDR_VAR 0 5
72998: PUSH
72999: LD_VAR 0 5
73003: PUSH
73004: LD_INT 1
73006: ARRAY
73007: ST_TO_ADDR
73008: GO 73018
// depot := 0 ;
73010: LD_ADDR_VAR 0 5
73014: PUSH
73015: LD_INT 0
73017: ST_TO_ADDR
// if IsExtension ( mc_build_list [ i ] [ 1 ] [ 1 ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) then
73018: LD_EXP 41
73022: PUSH
73023: LD_VAR 0 2
73027: ARRAY
73028: PUSH
73029: LD_INT 1
73031: ARRAY
73032: PUSH
73033: LD_INT 1
73035: ARRAY
73036: PPUSH
73037: CALL 29167 0 1
73041: PUSH
73042: LD_EXP 36
73046: PUSH
73047: LD_VAR 0 2
73051: ARRAY
73052: PPUSH
73053: LD_INT 2
73055: PUSH
73056: LD_INT 30
73058: PUSH
73059: LD_INT 2
73061: PUSH
73062: EMPTY
73063: LIST
73064: LIST
73065: PUSH
73066: LD_INT 30
73068: PUSH
73069: LD_INT 3
73071: PUSH
73072: EMPTY
73073: LIST
73074: LIST
73075: PUSH
73076: EMPTY
73077: LIST
73078: LIST
73079: LIST
73080: PPUSH
73081: CALL_OW 72
73085: NOT
73086: AND
73087: IFFALSE 73192
// begin for j = 1 to mc_build_list [ i ] do
73089: LD_ADDR_VAR 0 3
73093: PUSH
73094: DOUBLE
73095: LD_INT 1
73097: DEC
73098: ST_TO_ADDR
73099: LD_EXP 41
73103: PUSH
73104: LD_VAR 0 2
73108: ARRAY
73109: PUSH
73110: FOR_TO
73111: IFFALSE 73190
// if mc_build_list [ i ] [ j ] [ 1 ] = b_workshop then
73113: LD_EXP 41
73117: PUSH
73118: LD_VAR 0 2
73122: ARRAY
73123: PUSH
73124: LD_VAR 0 3
73128: ARRAY
73129: PUSH
73130: LD_INT 1
73132: ARRAY
73133: PUSH
73134: LD_INT 2
73136: EQUAL
73137: IFFALSE 73188
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , j , 1 , false ) ) ;
73139: LD_ADDR_EXP 41
73143: PUSH
73144: LD_EXP 41
73148: PPUSH
73149: LD_VAR 0 2
73153: PPUSH
73154: LD_EXP 41
73158: PUSH
73159: LD_VAR 0 2
73163: ARRAY
73164: PPUSH
73165: LD_VAR 0 3
73169: PPUSH
73170: LD_INT 1
73172: PPUSH
73173: LD_INT 0
73175: PPUSH
73176: CALL 25904 0 4
73180: PPUSH
73181: CALL_OW 1
73185: ST_TO_ADDR
// break ;
73186: GO 73190
// end ;
73188: GO 73110
73190: POP
73191: POP
// end ; if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilt ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
73192: LD_EXP 41
73196: PUSH
73197: LD_VAR 0 2
73201: ARRAY
73202: PUSH
73203: LD_INT 1
73205: ARRAY
73206: PUSH
73207: LD_INT 1
73209: ARRAY
73210: PUSH
73211: LD_INT 0
73213: EQUAL
73214: PUSH
73215: LD_VAR 0 5
73219: PUSH
73220: LD_VAR 0 5
73224: PPUSH
73225: LD_EXP 41
73229: PUSH
73230: LD_VAR 0 2
73234: ARRAY
73235: PUSH
73236: LD_INT 1
73238: ARRAY
73239: PUSH
73240: LD_INT 1
73242: ARRAY
73243: PPUSH
73244: LD_EXP 41
73248: PUSH
73249: LD_VAR 0 2
73253: ARRAY
73254: PUSH
73255: LD_INT 1
73257: ARRAY
73258: PUSH
73259: LD_INT 2
73261: ARRAY
73262: PPUSH
73263: LD_EXP 41
73267: PUSH
73268: LD_VAR 0 2
73272: ARRAY
73273: PUSH
73274: LD_INT 1
73276: ARRAY
73277: PUSH
73278: LD_INT 3
73280: ARRAY
73281: PPUSH
73282: LD_EXP 41
73286: PUSH
73287: LD_VAR 0 2
73291: ARRAY
73292: PUSH
73293: LD_INT 1
73295: ARRAY
73296: PUSH
73297: LD_INT 4
73299: ARRAY
73300: PPUSH
73301: CALL 33901 0 5
73305: AND
73306: OR
73307: IFFALSE 73588
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
73309: LD_ADDR_VAR 0 4
73313: PUSH
73314: LD_EXP 36
73318: PUSH
73319: LD_VAR 0 2
73323: ARRAY
73324: PPUSH
73325: LD_INT 25
73327: PUSH
73328: LD_INT 2
73330: PUSH
73331: EMPTY
73332: LIST
73333: LIST
73334: PPUSH
73335: CALL_OW 72
73339: PUSH
73340: LD_EXP 38
73344: PUSH
73345: LD_VAR 0 2
73349: ARRAY
73350: DIFF
73351: ST_TO_ADDR
// if not tmp then
73352: LD_VAR 0 4
73356: NOT
73357: IFFALSE 73361
// continue ;
73359: GO 72606
// for j in tmp do
73361: LD_ADDR_VAR 0 3
73365: PUSH
73366: LD_VAR 0 4
73370: PUSH
73371: FOR_IN
73372: IFFALSE 73584
// begin if not mc_builders [ i ] then
73374: LD_EXP 42
73378: PUSH
73379: LD_VAR 0 2
73383: ARRAY
73384: NOT
73385: IFFALSE 73443
// begin SetTag ( j , 103 ) ;
73387: LD_VAR 0 3
73391: PPUSH
73392: LD_INT 103
73394: PPUSH
73395: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
73399: LD_ADDR_EXP 42
73403: PUSH
73404: LD_EXP 42
73408: PPUSH
73409: LD_VAR 0 2
73413: PUSH
73414: LD_EXP 42
73418: PUSH
73419: LD_VAR 0 2
73423: ARRAY
73424: PUSH
73425: LD_INT 1
73427: PLUS
73428: PUSH
73429: EMPTY
73430: LIST
73431: LIST
73432: PPUSH
73433: LD_VAR 0 3
73437: PPUSH
73438: CALL 26486 0 3
73442: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
73443: LD_VAR 0 3
73447: PPUSH
73448: CALL_OW 310
73452: IFFALSE 73463
// ComExitBuilding ( j ) ;
73454: LD_VAR 0 3
73458: PPUSH
73459: CALL_OW 122
// wait ( 3 ) ;
73463: LD_INT 3
73465: PPUSH
73466: CALL_OW 67
// if not mc_build_list [ i ] then
73470: LD_EXP 41
73474: PUSH
73475: LD_VAR 0 2
73479: ARRAY
73480: NOT
73481: IFFALSE 73485
// break ;
73483: GO 73584
// if not HasTask ( j ) then
73485: LD_VAR 0 3
73489: PPUSH
73490: CALL_OW 314
73494: NOT
73495: IFFALSE 73582
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
73497: LD_VAR 0 3
73501: PPUSH
73502: LD_EXP 41
73506: PUSH
73507: LD_VAR 0 2
73511: ARRAY
73512: PUSH
73513: LD_INT 1
73515: ARRAY
73516: PUSH
73517: LD_INT 1
73519: ARRAY
73520: PPUSH
73521: LD_EXP 41
73525: PUSH
73526: LD_VAR 0 2
73530: ARRAY
73531: PUSH
73532: LD_INT 1
73534: ARRAY
73535: PUSH
73536: LD_INT 2
73538: ARRAY
73539: PPUSH
73540: LD_EXP 41
73544: PUSH
73545: LD_VAR 0 2
73549: ARRAY
73550: PUSH
73551: LD_INT 1
73553: ARRAY
73554: PUSH
73555: LD_INT 3
73557: ARRAY
73558: PPUSH
73559: LD_EXP 41
73563: PUSH
73564: LD_VAR 0 2
73568: ARRAY
73569: PUSH
73570: LD_INT 1
73572: ARRAY
73573: PUSH
73574: LD_INT 4
73576: ARRAY
73577: PPUSH
73578: CALL_OW 145
// end ;
73582: GO 73371
73584: POP
73585: POP
// end else
73586: GO 73730
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
73588: LD_EXP 36
73592: PUSH
73593: LD_VAR 0 2
73597: ARRAY
73598: PPUSH
73599: LD_EXP 41
73603: PUSH
73604: LD_VAR 0 2
73608: ARRAY
73609: PUSH
73610: LD_INT 1
73612: ARRAY
73613: PUSH
73614: LD_INT 1
73616: ARRAY
73617: PPUSH
73618: LD_EXP 41
73622: PUSH
73623: LD_VAR 0 2
73627: ARRAY
73628: PUSH
73629: LD_INT 1
73631: ARRAY
73632: PUSH
73633: LD_INT 2
73635: ARRAY
73636: PPUSH
73637: LD_EXP 41
73641: PUSH
73642: LD_VAR 0 2
73646: ARRAY
73647: PUSH
73648: LD_INT 1
73650: ARRAY
73651: PUSH
73652: LD_INT 3
73654: ARRAY
73655: PPUSH
73656: LD_EXP 41
73660: PUSH
73661: LD_VAR 0 2
73665: ARRAY
73666: PUSH
73667: LD_INT 1
73669: ARRAY
73670: PUSH
73671: LD_INT 4
73673: ARRAY
73674: PPUSH
73675: CALL 33237 0 5
73679: NOT
73680: IFFALSE 73730
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
73682: LD_ADDR_EXP 41
73686: PUSH
73687: LD_EXP 41
73691: PPUSH
73692: LD_VAR 0 2
73696: PPUSH
73697: LD_EXP 41
73701: PUSH
73702: LD_VAR 0 2
73706: ARRAY
73707: PPUSH
73708: LD_INT 1
73710: PPUSH
73711: LD_INT 1
73713: NEG
73714: PPUSH
73715: LD_INT 0
73717: PPUSH
73718: CALL 25904 0 4
73722: PPUSH
73723: CALL_OW 1
73727: ST_TO_ADDR
// continue ;
73728: GO 72606
// end ; end ; end ;
73730: GO 72606
73732: POP
73733: POP
// end ;
73734: LD_VAR 0 1
73738: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
73739: LD_INT 0
73741: PPUSH
73742: PPUSH
73743: PPUSH
73744: PPUSH
73745: PPUSH
73746: PPUSH
// if not mc_bases then
73747: LD_EXP 36
73751: NOT
73752: IFFALSE 73756
// exit ;
73754: GO 74183
// for i = 1 to mc_bases do
73756: LD_ADDR_VAR 0 2
73760: PUSH
73761: DOUBLE
73762: LD_INT 1
73764: DEC
73765: ST_TO_ADDR
73766: LD_EXP 36
73770: PUSH
73771: FOR_TO
73772: IFFALSE 74181
// begin tmp := mc_build_upgrade [ i ] ;
73774: LD_ADDR_VAR 0 4
73778: PUSH
73779: LD_EXP 68
73783: PUSH
73784: LD_VAR 0 2
73788: ARRAY
73789: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
73790: LD_ADDR_VAR 0 6
73794: PUSH
73795: LD_EXP 69
73799: PUSH
73800: LD_VAR 0 2
73804: ARRAY
73805: PPUSH
73806: LD_INT 2
73808: PUSH
73809: LD_INT 30
73811: PUSH
73812: LD_INT 6
73814: PUSH
73815: EMPTY
73816: LIST
73817: LIST
73818: PUSH
73819: LD_INT 30
73821: PUSH
73822: LD_INT 7
73824: PUSH
73825: EMPTY
73826: LIST
73827: LIST
73828: PUSH
73829: EMPTY
73830: LIST
73831: LIST
73832: LIST
73833: PPUSH
73834: CALL_OW 72
73838: ST_TO_ADDR
// if not tmp and not lab then
73839: LD_VAR 0 4
73843: NOT
73844: PUSH
73845: LD_VAR 0 6
73849: NOT
73850: AND
73851: IFFALSE 73855
// continue ;
73853: GO 73771
// if tmp then
73855: LD_VAR 0 4
73859: IFFALSE 73979
// for j in tmp do
73861: LD_ADDR_VAR 0 3
73865: PUSH
73866: LD_VAR 0 4
73870: PUSH
73871: FOR_IN
73872: IFFALSE 73977
// begin if UpgradeCost ( j ) then
73874: LD_VAR 0 3
73878: PPUSH
73879: CALL 32897 0 1
73883: IFFALSE 73975
// begin ComUpgrade ( j ) ;
73885: LD_VAR 0 3
73889: PPUSH
73890: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
73894: LD_ADDR_EXP 68
73898: PUSH
73899: LD_EXP 68
73903: PPUSH
73904: LD_VAR 0 2
73908: PPUSH
73909: LD_EXP 68
73913: PUSH
73914: LD_VAR 0 2
73918: ARRAY
73919: PUSH
73920: LD_VAR 0 3
73924: DIFF
73925: PPUSH
73926: CALL_OW 1
73930: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
73931: LD_ADDR_EXP 43
73935: PUSH
73936: LD_EXP 43
73940: PPUSH
73941: LD_VAR 0 2
73945: PUSH
73946: LD_EXP 43
73950: PUSH
73951: LD_VAR 0 2
73955: ARRAY
73956: PUSH
73957: LD_INT 1
73959: PLUS
73960: PUSH
73961: EMPTY
73962: LIST
73963: LIST
73964: PPUSH
73965: LD_VAR 0 3
73969: PPUSH
73970: CALL 26486 0 3
73974: ST_TO_ADDR
// end ; end ;
73975: GO 73871
73977: POP
73978: POP
// if not lab or not mc_lab_upgrade [ i ] then
73979: LD_VAR 0 6
73983: NOT
73984: PUSH
73985: LD_EXP 70
73989: PUSH
73990: LD_VAR 0 2
73994: ARRAY
73995: NOT
73996: OR
73997: IFFALSE 74001
// continue ;
73999: GO 73771
// for j in lab do
74001: LD_ADDR_VAR 0 3
74005: PUSH
74006: LD_VAR 0 6
74010: PUSH
74011: FOR_IN
74012: IFFALSE 74177
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
74014: LD_VAR 0 3
74018: PPUSH
74019: CALL_OW 266
74023: PUSH
74024: LD_INT 6
74026: PUSH
74027: LD_INT 7
74029: PUSH
74030: EMPTY
74031: LIST
74032: LIST
74033: IN
74034: PUSH
74035: LD_VAR 0 3
74039: PPUSH
74040: CALL_OW 461
74044: PUSH
74045: LD_INT 1
74047: NONEQUAL
74048: AND
74049: IFFALSE 74175
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
74051: LD_VAR 0 3
74055: PPUSH
74056: LD_EXP 70
74060: PUSH
74061: LD_VAR 0 2
74065: ARRAY
74066: PUSH
74067: LD_INT 1
74069: ARRAY
74070: PPUSH
74071: CALL 33102 0 2
74075: IFFALSE 74175
// begin ComCancel ( j ) ;
74077: LD_VAR 0 3
74081: PPUSH
74082: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
74086: LD_VAR 0 3
74090: PPUSH
74091: LD_EXP 70
74095: PUSH
74096: LD_VAR 0 2
74100: ARRAY
74101: PUSH
74102: LD_INT 1
74104: ARRAY
74105: PPUSH
74106: CALL_OW 207
// if not j in mc_construct_list [ i ] then
74110: LD_VAR 0 3
74114: PUSH
74115: LD_EXP 43
74119: PUSH
74120: LD_VAR 0 2
74124: ARRAY
74125: IN
74126: NOT
74127: IFFALSE 74173
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
74129: LD_ADDR_EXP 43
74133: PUSH
74134: LD_EXP 43
74138: PPUSH
74139: LD_VAR 0 2
74143: PUSH
74144: LD_EXP 43
74148: PUSH
74149: LD_VAR 0 2
74153: ARRAY
74154: PUSH
74155: LD_INT 1
74157: PLUS
74158: PUSH
74159: EMPTY
74160: LIST
74161: LIST
74162: PPUSH
74163: LD_VAR 0 3
74167: PPUSH
74168: CALL 26486 0 3
74172: ST_TO_ADDR
// break ;
74173: GO 74177
// end ; end ; end ;
74175: GO 74011
74177: POP
74178: POP
// end ;
74179: GO 73771
74181: POP
74182: POP
// end ;
74183: LD_VAR 0 1
74187: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , tmp2 , t , tw , busy , weapon ; begin
74188: LD_INT 0
74190: PPUSH
74191: PPUSH
74192: PPUSH
74193: PPUSH
74194: PPUSH
74195: PPUSH
74196: PPUSH
74197: PPUSH
74198: PPUSH
// if not mc_bases then
74199: LD_EXP 36
74203: NOT
74204: IFFALSE 74208
// exit ;
74206: GO 74613
// for i = 1 to mc_bases do
74208: LD_ADDR_VAR 0 2
74212: PUSH
74213: DOUBLE
74214: LD_INT 1
74216: DEC
74217: ST_TO_ADDR
74218: LD_EXP 36
74222: PUSH
74223: FOR_TO
74224: IFFALSE 74611
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
74226: LD_EXP 44
74230: PUSH
74231: LD_VAR 0 2
74235: ARRAY
74236: NOT
74237: PUSH
74238: LD_EXP 36
74242: PUSH
74243: LD_VAR 0 2
74247: ARRAY
74248: PPUSH
74249: LD_INT 30
74251: PUSH
74252: LD_INT 3
74254: PUSH
74255: EMPTY
74256: LIST
74257: LIST
74258: PPUSH
74259: CALL_OW 72
74263: NOT
74264: OR
74265: IFFALSE 74269
// continue ;
74267: GO 74223
// busy := false ;
74269: LD_ADDR_VAR 0 8
74273: PUSH
74274: LD_INT 0
74276: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
74277: LD_ADDR_VAR 0 4
74281: PUSH
74282: LD_EXP 36
74286: PUSH
74287: LD_VAR 0 2
74291: ARRAY
74292: PPUSH
74293: LD_INT 30
74295: PUSH
74296: LD_INT 3
74298: PUSH
74299: EMPTY
74300: LIST
74301: LIST
74302: PPUSH
74303: CALL_OW 72
74307: ST_TO_ADDR
// t := UnitFilter ( mc_turret_list [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ;
74308: LD_ADDR_VAR 0 6
74312: PUSH
74313: LD_EXP 44
74317: PUSH
74318: LD_VAR 0 2
74322: ARRAY
74323: PPUSH
74324: LD_INT 2
74326: PUSH
74327: LD_INT 30
74329: PUSH
74330: LD_INT 32
74332: PUSH
74333: EMPTY
74334: LIST
74335: LIST
74336: PUSH
74337: LD_INT 30
74339: PUSH
74340: LD_INT 33
74342: PUSH
74343: EMPTY
74344: LIST
74345: LIST
74346: PUSH
74347: EMPTY
74348: LIST
74349: LIST
74350: LIST
74351: PPUSH
74352: CALL_OW 72
74356: ST_TO_ADDR
// if not t then
74357: LD_VAR 0 6
74361: NOT
74362: IFFALSE 74366
// continue ;
74364: GO 74223
// for j in tmp do
74366: LD_ADDR_VAR 0 3
74370: PUSH
74371: LD_VAR 0 4
74375: PUSH
74376: FOR_IN
74377: IFFALSE 74407
// if not BuildingStatus ( j ) = bs_idle then
74379: LD_VAR 0 3
74383: PPUSH
74384: CALL_OW 461
74388: PUSH
74389: LD_INT 2
74391: EQUAL
74392: NOT
74393: IFFALSE 74405
// begin busy := true ;
74395: LD_ADDR_VAR 0 8
74399: PUSH
74400: LD_INT 1
74402: ST_TO_ADDR
// break ;
74403: GO 74407
// end ;
74405: GO 74376
74407: POP
74408: POP
// if busy then
74409: LD_VAR 0 8
74413: IFFALSE 74417
// continue ;
74415: GO 74223
// tw := UnitFilter ( t , [ f_bweapon , 0 ] ) ;
74417: LD_ADDR_VAR 0 7
74421: PUSH
74422: LD_VAR 0 6
74426: PPUSH
74427: LD_INT 35
74429: PUSH
74430: LD_INT 0
74432: PUSH
74433: EMPTY
74434: LIST
74435: LIST
74436: PPUSH
74437: CALL_OW 72
74441: ST_TO_ADDR
// if tw then
74442: LD_VAR 0 7
74446: IFFALSE 74523
// begin tw := tw [ 1 ] ;
74448: LD_ADDR_VAR 0 7
74452: PUSH
74453: LD_VAR 0 7
74457: PUSH
74458: LD_INT 1
74460: ARRAY
74461: ST_TO_ADDR
// weapon := GetTurretWeapon ( tw , mc_scan_area [ i ] ) ;
74462: LD_ADDR_VAR 0 9
74466: PUSH
74467: LD_VAR 0 7
74471: PPUSH
74472: LD_EXP 61
74476: PUSH
74477: LD_VAR 0 2
74481: ARRAY
74482: PPUSH
74483: CALL 31456 0 2
74487: ST_TO_ADDR
// if mc_allowed_tower_weapons [ i ] then
74488: LD_EXP 75
74492: PUSH
74493: LD_VAR 0 2
74497: ARRAY
74498: IFFALSE 74521
// if not weapon in mc_allowed_tower_weapons [ i ] then
74500: LD_VAR 0 9
74504: PUSH
74505: LD_EXP 75
74509: PUSH
74510: LD_VAR 0 2
74514: ARRAY
74515: IN
74516: NOT
74517: IFFALSE 74521
// continue ;
74519: GO 74223
// end else
74521: GO 74586
// begin tmp2 := UpgradeTurretsWeapon ( mc_turret_list [ i ] , tmp ) ;
74523: LD_ADDR_VAR 0 5
74527: PUSH
74528: LD_EXP 44
74532: PUSH
74533: LD_VAR 0 2
74537: ARRAY
74538: PPUSH
74539: LD_VAR 0 4
74543: PPUSH
74544: CALL 61657 0 2
74548: ST_TO_ADDR
// if not tmp2 then
74549: LD_VAR 0 5
74553: NOT
74554: IFFALSE 74558
// continue ;
74556: GO 74223
// tw := tmp2 [ 1 ] ;
74558: LD_ADDR_VAR 0 7
74562: PUSH
74563: LD_VAR 0 5
74567: PUSH
74568: LD_INT 1
74570: ARRAY
74571: ST_TO_ADDR
// weapon := tmp2 [ 2 ] ;
74572: LD_ADDR_VAR 0 9
74576: PUSH
74577: LD_VAR 0 5
74581: PUSH
74582: LD_INT 2
74584: ARRAY
74585: ST_TO_ADDR
// end ; if not weapon then
74586: LD_VAR 0 9
74590: NOT
74591: IFFALSE 74595
// continue ;
74593: GO 74223
// ComPlaceWeapon ( tw , weapon ) ;
74595: LD_VAR 0 7
74599: PPUSH
74600: LD_VAR 0 9
74604: PPUSH
74605: CALL_OW 148
// end ;
74609: GO 74223
74611: POP
74612: POP
// end ;
74613: LD_VAR 0 1
74617: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
74618: LD_INT 0
74620: PPUSH
74621: PPUSH
74622: PPUSH
74623: PPUSH
74624: PPUSH
74625: PPUSH
// if not mc_bases then
74626: LD_EXP 36
74630: NOT
74631: IFFALSE 74635
// exit ;
74633: GO 75647
// for i = 1 to mc_bases do
74635: LD_ADDR_VAR 0 2
74639: PUSH
74640: DOUBLE
74641: LD_INT 1
74643: DEC
74644: ST_TO_ADDR
74645: LD_EXP 36
74649: PUSH
74650: FOR_TO
74651: IFFALSE 75645
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] then
74653: LD_EXP 49
74657: PUSH
74658: LD_VAR 0 2
74662: ARRAY
74663: NOT
74664: PUSH
74665: LD_EXP 49
74669: PUSH
74670: LD_VAR 0 2
74674: ARRAY
74675: PUSH
74676: LD_EXP 50
74680: PUSH
74681: LD_VAR 0 2
74685: ARRAY
74686: EQUAL
74687: OR
74688: IFFALSE 74692
// continue ;
74690: GO 74650
// if mc_miners [ i ] then
74692: LD_EXP 50
74696: PUSH
74697: LD_VAR 0 2
74701: ARRAY
74702: IFFALSE 75332
// begin k := 1 ;
74704: LD_ADDR_VAR 0 4
74708: PUSH
74709: LD_INT 1
74711: ST_TO_ADDR
// for j = mc_miners [ i ] downto 1 do
74712: LD_ADDR_VAR 0 3
74716: PUSH
74717: DOUBLE
74718: LD_EXP 50
74722: PUSH
74723: LD_VAR 0 2
74727: ARRAY
74728: INC
74729: ST_TO_ADDR
74730: LD_INT 1
74732: PUSH
74733: FOR_DOWNTO
74734: IFFALSE 75330
// begin if IsDead ( mc_miners [ i ] [ j ] ) or GetClass ( mc_miners [ i ] [ j ] ) <> 1 then
74736: LD_EXP 50
74740: PUSH
74741: LD_VAR 0 2
74745: ARRAY
74746: PUSH
74747: LD_VAR 0 3
74751: ARRAY
74752: PPUSH
74753: CALL_OW 301
74757: PUSH
74758: LD_EXP 50
74762: PUSH
74763: LD_VAR 0 2
74767: ARRAY
74768: PUSH
74769: LD_VAR 0 3
74773: ARRAY
74774: PPUSH
74775: CALL_OW 257
74779: PUSH
74780: LD_INT 1
74782: NONEQUAL
74783: OR
74784: IFFALSE 74847
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
74786: LD_ADDR_VAR 0 5
74790: PUSH
74791: LD_EXP 50
74795: PUSH
74796: LD_VAR 0 2
74800: ARRAY
74801: PUSH
74802: LD_EXP 50
74806: PUSH
74807: LD_VAR 0 2
74811: ARRAY
74812: PUSH
74813: LD_VAR 0 3
74817: ARRAY
74818: DIFF
74819: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
74820: LD_ADDR_EXP 50
74824: PUSH
74825: LD_EXP 50
74829: PPUSH
74830: LD_VAR 0 2
74834: PPUSH
74835: LD_VAR 0 5
74839: PPUSH
74840: CALL_OW 1
74844: ST_TO_ADDR
// continue ;
74845: GO 74733
// end ; if WantPlant ( mc_miners [ i ] [ j ] ) and ( DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] or DangerAtRange ( mc_miners [ i ] [ j ] , 10 ) [ 4 ] ) then
74847: LD_EXP 50
74851: PUSH
74852: LD_VAR 0 2
74856: ARRAY
74857: PUSH
74858: LD_VAR 0 3
74862: ARRAY
74863: PPUSH
74864: CALL 26422 0 1
74868: PUSH
74869: LD_EXP 50
74873: PUSH
74874: LD_VAR 0 2
74878: ARRAY
74879: PUSH
74880: LD_VAR 0 3
74884: ARRAY
74885: PPUSH
74886: CALL_OW 255
74890: PPUSH
74891: LD_EXP 49
74895: PUSH
74896: LD_VAR 0 2
74900: ARRAY
74901: PUSH
74902: LD_VAR 0 4
74906: ARRAY
74907: PUSH
74908: LD_INT 1
74910: ARRAY
74911: PPUSH
74912: LD_EXP 49
74916: PUSH
74917: LD_VAR 0 2
74921: ARRAY
74922: PUSH
74923: LD_VAR 0 4
74927: ARRAY
74928: PUSH
74929: LD_INT 2
74931: ARRAY
74932: PPUSH
74933: LD_INT 15
74935: PPUSH
74936: CALL 27382 0 4
74940: PUSH
74941: LD_INT 4
74943: ARRAY
74944: PUSH
74945: LD_EXP 50
74949: PUSH
74950: LD_VAR 0 2
74954: ARRAY
74955: PUSH
74956: LD_VAR 0 3
74960: ARRAY
74961: PPUSH
74962: LD_INT 10
74964: PPUSH
74965: CALL 29079 0 2
74969: PUSH
74970: LD_INT 4
74972: ARRAY
74973: OR
74974: AND
74975: IFFALSE 74998
// ComStop ( mc_miners [ i ] [ j ] ) ;
74977: LD_EXP 50
74981: PUSH
74982: LD_VAR 0 2
74986: ARRAY
74987: PUSH
74988: LD_VAR 0 3
74992: ARRAY
74993: PPUSH
74994: CALL_OW 141
// if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] = 0 and not HasTask ( mc_miners [ i ] [ j ] ) then
74998: LD_EXP 50
75002: PUSH
75003: LD_VAR 0 2
75007: ARRAY
75008: PUSH
75009: LD_VAR 0 3
75013: ARRAY
75014: PPUSH
75015: CALL_OW 257
75019: PUSH
75020: LD_INT 1
75022: EQUAL
75023: PUSH
75024: LD_EXP 50
75028: PUSH
75029: LD_VAR 0 2
75033: ARRAY
75034: PUSH
75035: LD_VAR 0 3
75039: ARRAY
75040: PPUSH
75041: CALL_OW 459
75045: NOT
75046: AND
75047: PUSH
75048: LD_EXP 50
75052: PUSH
75053: LD_VAR 0 2
75057: ARRAY
75058: PUSH
75059: LD_VAR 0 3
75063: ARRAY
75064: PPUSH
75065: CALL_OW 255
75069: PPUSH
75070: LD_EXP 49
75074: PUSH
75075: LD_VAR 0 2
75079: ARRAY
75080: PUSH
75081: LD_VAR 0 4
75085: ARRAY
75086: PUSH
75087: LD_INT 1
75089: ARRAY
75090: PPUSH
75091: LD_EXP 49
75095: PUSH
75096: LD_VAR 0 2
75100: ARRAY
75101: PUSH
75102: LD_VAR 0 4
75106: ARRAY
75107: PUSH
75108: LD_INT 2
75110: ARRAY
75111: PPUSH
75112: LD_INT 15
75114: PPUSH
75115: CALL 27382 0 4
75119: PUSH
75120: LD_INT 4
75122: ARRAY
75123: PUSH
75124: LD_INT 0
75126: EQUAL
75127: AND
75128: PUSH
75129: LD_EXP 50
75133: PUSH
75134: LD_VAR 0 2
75138: ARRAY
75139: PUSH
75140: LD_VAR 0 3
75144: ARRAY
75145: PPUSH
75146: CALL_OW 314
75150: NOT
75151: AND
75152: IFFALSE 75328
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
75154: LD_EXP 50
75158: PUSH
75159: LD_VAR 0 2
75163: ARRAY
75164: PUSH
75165: LD_VAR 0 3
75169: ARRAY
75170: PPUSH
75171: CALL_OW 310
75175: IFFALSE 75198
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
75177: LD_EXP 50
75181: PUSH
75182: LD_VAR 0 2
75186: ARRAY
75187: PUSH
75188: LD_VAR 0 3
75192: ARRAY
75193: PPUSH
75194: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
75198: LD_EXP 50
75202: PUSH
75203: LD_VAR 0 2
75207: ARRAY
75208: PUSH
75209: LD_VAR 0 3
75213: ARRAY
75214: PPUSH
75215: CALL_OW 314
75219: NOT
75220: IFFALSE 75288
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 0 ) ;
75222: LD_EXP 50
75226: PUSH
75227: LD_VAR 0 2
75231: ARRAY
75232: PUSH
75233: LD_VAR 0 3
75237: ARRAY
75238: PPUSH
75239: LD_EXP 49
75243: PUSH
75244: LD_VAR 0 2
75248: ARRAY
75249: PUSH
75250: LD_VAR 0 4
75254: ARRAY
75255: PUSH
75256: LD_INT 1
75258: ARRAY
75259: PPUSH
75260: LD_EXP 49
75264: PUSH
75265: LD_VAR 0 2
75269: ARRAY
75270: PUSH
75271: LD_VAR 0 4
75275: ARRAY
75276: PUSH
75277: LD_INT 2
75279: ARRAY
75280: PPUSH
75281: LD_INT 0
75283: PPUSH
75284: CALL_OW 193
// k := k + 1 ;
75288: LD_ADDR_VAR 0 4
75292: PUSH
75293: LD_VAR 0 4
75297: PUSH
75298: LD_INT 1
75300: PLUS
75301: ST_TO_ADDR
// if k > mc_mines [ i ] then
75302: LD_VAR 0 4
75306: PUSH
75307: LD_EXP 49
75311: PUSH
75312: LD_VAR 0 2
75316: ARRAY
75317: GREATER
75318: IFFALSE 75328
// k := 1 ;
75320: LD_ADDR_VAR 0 4
75324: PUSH
75325: LD_INT 1
75327: ST_TO_ADDR
// end ; end ;
75328: GO 74733
75330: POP
75331: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
75332: LD_ADDR_VAR 0 5
75336: PUSH
75337: LD_EXP 36
75341: PUSH
75342: LD_VAR 0 2
75346: ARRAY
75347: PPUSH
75348: LD_INT 2
75350: PUSH
75351: LD_INT 30
75353: PUSH
75354: LD_INT 4
75356: PUSH
75357: EMPTY
75358: LIST
75359: LIST
75360: PUSH
75361: LD_INT 30
75363: PUSH
75364: LD_INT 5
75366: PUSH
75367: EMPTY
75368: LIST
75369: LIST
75370: PUSH
75371: LD_INT 30
75373: PUSH
75374: LD_INT 32
75376: PUSH
75377: EMPTY
75378: LIST
75379: LIST
75380: PUSH
75381: EMPTY
75382: LIST
75383: LIST
75384: LIST
75385: LIST
75386: PPUSH
75387: CALL_OW 72
75391: ST_TO_ADDR
// if not tmp then
75392: LD_VAR 0 5
75396: NOT
75397: IFFALSE 75401
// continue ;
75399: GO 74650
// list := [ ] ;
75401: LD_ADDR_VAR 0 6
75405: PUSH
75406: EMPTY
75407: ST_TO_ADDR
// for j in tmp do
75408: LD_ADDR_VAR 0 3
75412: PUSH
75413: LD_VAR 0 5
75417: PUSH
75418: FOR_IN
75419: IFFALSE 75488
// begin for k in UnitsInside ( j ) do
75421: LD_ADDR_VAR 0 4
75425: PUSH
75426: LD_VAR 0 3
75430: PPUSH
75431: CALL_OW 313
75435: PUSH
75436: FOR_IN
75437: IFFALSE 75484
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
75439: LD_VAR 0 4
75443: PPUSH
75444: CALL_OW 257
75448: PUSH
75449: LD_INT 1
75451: EQUAL
75452: PUSH
75453: LD_VAR 0 4
75457: PPUSH
75458: CALL_OW 459
75462: NOT
75463: AND
75464: IFFALSE 75482
// list := list ^ k ;
75466: LD_ADDR_VAR 0 6
75470: PUSH
75471: LD_VAR 0 6
75475: PUSH
75476: LD_VAR 0 4
75480: ADD
75481: ST_TO_ADDR
75482: GO 75436
75484: POP
75485: POP
// end ;
75486: GO 75418
75488: POP
75489: POP
// list := list diff mc_miners [ i ] ;
75490: LD_ADDR_VAR 0 6
75494: PUSH
75495: LD_VAR 0 6
75499: PUSH
75500: LD_EXP 50
75504: PUSH
75505: LD_VAR 0 2
75509: ARRAY
75510: DIFF
75511: ST_TO_ADDR
// if not list then
75512: LD_VAR 0 6
75516: NOT
75517: IFFALSE 75521
// continue ;
75519: GO 74650
// k := mc_mines [ i ] - mc_miners [ i ] ;
75521: LD_ADDR_VAR 0 4
75525: PUSH
75526: LD_EXP 49
75530: PUSH
75531: LD_VAR 0 2
75535: ARRAY
75536: PUSH
75537: LD_EXP 50
75541: PUSH
75542: LD_VAR 0 2
75546: ARRAY
75547: MINUS
75548: ST_TO_ADDR
// if k > list then
75549: LD_VAR 0 4
75553: PUSH
75554: LD_VAR 0 6
75558: GREATER
75559: IFFALSE 75571
// k := list ;
75561: LD_ADDR_VAR 0 4
75565: PUSH
75566: LD_VAR 0 6
75570: ST_TO_ADDR
// for j = 1 to k do
75571: LD_ADDR_VAR 0 3
75575: PUSH
75576: DOUBLE
75577: LD_INT 1
75579: DEC
75580: ST_TO_ADDR
75581: LD_VAR 0 4
75585: PUSH
75586: FOR_TO
75587: IFFALSE 75641
// mc_miners := ReplaceIn ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
75589: LD_ADDR_EXP 50
75593: PUSH
75594: LD_EXP 50
75598: PPUSH
75599: LD_VAR 0 2
75603: PUSH
75604: LD_EXP 50
75608: PUSH
75609: LD_VAR 0 2
75613: ARRAY
75614: PUSH
75615: LD_INT 1
75617: PLUS
75618: PUSH
75619: EMPTY
75620: LIST
75621: LIST
75622: PPUSH
75623: LD_VAR 0 6
75627: PUSH
75628: LD_VAR 0 3
75632: ARRAY
75633: PPUSH
75634: CALL 26486 0 3
75638: ST_TO_ADDR
75639: GO 75586
75641: POP
75642: POP
// end ;
75643: GO 74650
75645: POP
75646: POP
// end ;
75647: LD_VAR 0 1
75651: RET
// export function MC_CollectCrates ( ) ; var i , j , k , tmp , target , cargo , depot , fac , components ; begin
75652: LD_INT 0
75654: PPUSH
75655: PPUSH
75656: PPUSH
75657: PPUSH
75658: PPUSH
75659: PPUSH
75660: PPUSH
75661: PPUSH
75662: PPUSH
75663: PPUSH
// if not mc_bases then
75664: LD_EXP 36
75668: NOT
75669: IFFALSE 75673
// exit ;
75671: GO 77423
// for i = 1 to mc_bases do
75673: LD_ADDR_VAR 0 2
75677: PUSH
75678: DOUBLE
75679: LD_INT 1
75681: DEC
75682: ST_TO_ADDR
75683: LD_EXP 36
75687: PUSH
75688: FOR_TO
75689: IFFALSE 77421
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
75691: LD_EXP 36
75695: PUSH
75696: LD_VAR 0 2
75700: ARRAY
75701: NOT
75702: PUSH
75703: LD_EXP 43
75707: PUSH
75708: LD_VAR 0 2
75712: ARRAY
75713: OR
75714: IFFALSE 75718
// continue ;
75716: GO 75688
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
75718: LD_EXP 52
75722: PUSH
75723: LD_VAR 0 2
75727: ARRAY
75728: NOT
75729: PUSH
75730: LD_EXP 53
75734: PUSH
75735: LD_VAR 0 2
75739: ARRAY
75740: AND
75741: IFFALSE 75779
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
75743: LD_ADDR_EXP 53
75747: PUSH
75748: LD_EXP 53
75752: PPUSH
75753: LD_VAR 0 2
75757: PPUSH
75758: EMPTY
75759: PPUSH
75760: CALL_OW 1
75764: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
75765: LD_VAR 0 2
75769: PPUSH
75770: LD_INT 107
75772: PPUSH
75773: CALL 66533 0 2
// continue ;
75777: GO 75688
// end ; target := [ ] ;
75779: LD_ADDR_VAR 0 6
75783: PUSH
75784: EMPTY
75785: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
75786: LD_ADDR_VAR 0 3
75790: PUSH
75791: DOUBLE
75792: LD_EXP 52
75796: PUSH
75797: LD_VAR 0 2
75801: ARRAY
75802: INC
75803: ST_TO_ADDR
75804: LD_INT 1
75806: PUSH
75807: FOR_DOWNTO
75808: IFFALSE 76068
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
75810: LD_EXP 52
75814: PUSH
75815: LD_VAR 0 2
75819: ARRAY
75820: PUSH
75821: LD_VAR 0 3
75825: ARRAY
75826: PUSH
75827: LD_INT 2
75829: ARRAY
75830: PPUSH
75831: LD_EXP 52
75835: PUSH
75836: LD_VAR 0 2
75840: ARRAY
75841: PUSH
75842: LD_VAR 0 3
75846: ARRAY
75847: PUSH
75848: LD_INT 3
75850: ARRAY
75851: PPUSH
75852: CALL_OW 488
75856: PUSH
75857: LD_EXP 52
75861: PUSH
75862: LD_VAR 0 2
75866: ARRAY
75867: PUSH
75868: LD_VAR 0 3
75872: ARRAY
75873: PUSH
75874: LD_INT 2
75876: ARRAY
75877: PPUSH
75878: LD_EXP 52
75882: PUSH
75883: LD_VAR 0 2
75887: ARRAY
75888: PUSH
75889: LD_VAR 0 3
75893: ARRAY
75894: PUSH
75895: LD_INT 3
75897: ARRAY
75898: PPUSH
75899: CALL_OW 284
75903: PUSH
75904: LD_INT 0
75906: EQUAL
75907: AND
75908: IFFALSE 75963
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
75910: LD_ADDR_VAR 0 5
75914: PUSH
75915: LD_EXP 52
75919: PUSH
75920: LD_VAR 0 2
75924: ARRAY
75925: PPUSH
75926: LD_VAR 0 3
75930: PPUSH
75931: CALL_OW 3
75935: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
75936: LD_ADDR_EXP 52
75940: PUSH
75941: LD_EXP 52
75945: PPUSH
75946: LD_VAR 0 2
75950: PPUSH
75951: LD_VAR 0 5
75955: PPUSH
75956: CALL_OW 1
75960: ST_TO_ADDR
// continue ;
75961: GO 75807
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 30 ) [ 4 ] = 0 then
75963: LD_EXP 36
75967: PUSH
75968: LD_VAR 0 2
75972: ARRAY
75973: PUSH
75974: LD_INT 1
75976: ARRAY
75977: PPUSH
75978: CALL_OW 255
75982: PPUSH
75983: LD_EXP 52
75987: PUSH
75988: LD_VAR 0 2
75992: ARRAY
75993: PUSH
75994: LD_VAR 0 3
75998: ARRAY
75999: PUSH
76000: LD_INT 2
76002: ARRAY
76003: PPUSH
76004: LD_EXP 52
76008: PUSH
76009: LD_VAR 0 2
76013: ARRAY
76014: PUSH
76015: LD_VAR 0 3
76019: ARRAY
76020: PUSH
76021: LD_INT 3
76023: ARRAY
76024: PPUSH
76025: LD_INT 30
76027: PPUSH
76028: CALL 27382 0 4
76032: PUSH
76033: LD_INT 4
76035: ARRAY
76036: PUSH
76037: LD_INT 0
76039: EQUAL
76040: IFFALSE 76066
// begin target := mc_crates [ i ] [ j ] ;
76042: LD_ADDR_VAR 0 6
76046: PUSH
76047: LD_EXP 52
76051: PUSH
76052: LD_VAR 0 2
76056: ARRAY
76057: PUSH
76058: LD_VAR 0 3
76062: ARRAY
76063: ST_TO_ADDR
// break ;
76064: GO 76068
// end ; end ;
76066: GO 75807
76068: POP
76069: POP
// if not target then
76070: LD_VAR 0 6
76074: NOT
76075: IFFALSE 76079
// continue ;
76077: GO 75688
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
76079: LD_ADDR_VAR 0 7
76083: PUSH
76084: LD_EXP 55
76088: PUSH
76089: LD_VAR 0 2
76093: ARRAY
76094: PPUSH
76095: LD_INT 2
76097: PUSH
76098: LD_INT 3
76100: PUSH
76101: LD_INT 58
76103: PUSH
76104: EMPTY
76105: LIST
76106: PUSH
76107: EMPTY
76108: LIST
76109: LIST
76110: PUSH
76111: LD_INT 61
76113: PUSH
76114: EMPTY
76115: LIST
76116: PUSH
76117: LD_INT 33
76119: PUSH
76120: LD_INT 5
76122: PUSH
76123: EMPTY
76124: LIST
76125: LIST
76126: PUSH
76127: LD_INT 33
76129: PUSH
76130: LD_INT 3
76132: PUSH
76133: EMPTY
76134: LIST
76135: LIST
76136: PUSH
76137: EMPTY
76138: LIST
76139: LIST
76140: LIST
76141: LIST
76142: LIST
76143: PUSH
76144: LD_INT 2
76146: PUSH
76147: LD_INT 34
76149: PUSH
76150: LD_INT 32
76152: PUSH
76153: EMPTY
76154: LIST
76155: LIST
76156: PUSH
76157: LD_INT 34
76159: PUSH
76160: LD_INT 51
76162: PUSH
76163: EMPTY
76164: LIST
76165: LIST
76166: PUSH
76167: LD_INT 34
76169: PUSH
76170: LD_INT 12
76172: PUSH
76173: EMPTY
76174: LIST
76175: LIST
76176: PUSH
76177: EMPTY
76178: LIST
76179: LIST
76180: LIST
76181: LIST
76182: PUSH
76183: EMPTY
76184: LIST
76185: LIST
76186: PPUSH
76187: CALL_OW 72
76191: ST_TO_ADDR
// if not cargo then
76192: LD_VAR 0 7
76196: NOT
76197: IFFALSE 76840
// begin if mc_crates_collector [ i ] < 5 then
76199: LD_EXP 53
76203: PUSH
76204: LD_VAR 0 2
76208: ARRAY
76209: PUSH
76210: LD_INT 5
76212: LESS
76213: IFFALSE 76579
// begin if mc_ape [ i ] then
76215: LD_EXP 65
76219: PUSH
76220: LD_VAR 0 2
76224: ARRAY
76225: IFFALSE 76272
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
76227: LD_ADDR_VAR 0 5
76231: PUSH
76232: LD_EXP 65
76236: PUSH
76237: LD_VAR 0 2
76241: ARRAY
76242: PPUSH
76243: LD_INT 25
76245: PUSH
76246: LD_INT 16
76248: PUSH
76249: EMPTY
76250: LIST
76251: LIST
76252: PUSH
76253: LD_INT 24
76255: PUSH
76256: LD_INT 750
76258: PUSH
76259: EMPTY
76260: LIST
76261: LIST
76262: PUSH
76263: EMPTY
76264: LIST
76265: LIST
76266: PPUSH
76267: CALL_OW 72
76271: ST_TO_ADDR
// if not tmp then
76272: LD_VAR 0 5
76276: NOT
76277: IFFALSE 76324
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
76279: LD_ADDR_VAR 0 5
76283: PUSH
76284: LD_EXP 36
76288: PUSH
76289: LD_VAR 0 2
76293: ARRAY
76294: PPUSH
76295: LD_INT 25
76297: PUSH
76298: LD_INT 2
76300: PUSH
76301: EMPTY
76302: LIST
76303: LIST
76304: PUSH
76305: LD_INT 24
76307: PUSH
76308: LD_INT 750
76310: PUSH
76311: EMPTY
76312: LIST
76313: LIST
76314: PUSH
76315: EMPTY
76316: LIST
76317: LIST
76318: PPUSH
76319: CALL_OW 72
76323: ST_TO_ADDR
// if mc_ape [ i ] and UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) and tmp < 5 then
76324: LD_EXP 65
76328: PUSH
76329: LD_VAR 0 2
76333: ARRAY
76334: PUSH
76335: LD_EXP 36
76339: PUSH
76340: LD_VAR 0 2
76344: ARRAY
76345: PPUSH
76346: LD_INT 25
76348: PUSH
76349: LD_INT 2
76351: PUSH
76352: EMPTY
76353: LIST
76354: LIST
76355: PUSH
76356: LD_INT 24
76358: PUSH
76359: LD_INT 750
76361: PUSH
76362: EMPTY
76363: LIST
76364: LIST
76365: PUSH
76366: EMPTY
76367: LIST
76368: LIST
76369: PPUSH
76370: CALL_OW 72
76374: AND
76375: PUSH
76376: LD_VAR 0 5
76380: PUSH
76381: LD_INT 5
76383: LESS
76384: AND
76385: IFFALSE 76467
// begin for j in UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) do
76387: LD_ADDR_VAR 0 3
76391: PUSH
76392: LD_EXP 36
76396: PUSH
76397: LD_VAR 0 2
76401: ARRAY
76402: PPUSH
76403: LD_INT 25
76405: PUSH
76406: LD_INT 2
76408: PUSH
76409: EMPTY
76410: LIST
76411: LIST
76412: PUSH
76413: LD_INT 24
76415: PUSH
76416: LD_INT 750
76418: PUSH
76419: EMPTY
76420: LIST
76421: LIST
76422: PUSH
76423: EMPTY
76424: LIST
76425: LIST
76426: PPUSH
76427: CALL_OW 72
76431: PUSH
76432: FOR_IN
76433: IFFALSE 76465
// begin tmp := tmp union j ;
76435: LD_ADDR_VAR 0 5
76439: PUSH
76440: LD_VAR 0 5
76444: PUSH
76445: LD_VAR 0 3
76449: UNION
76450: ST_TO_ADDR
// if tmp >= 5 then
76451: LD_VAR 0 5
76455: PUSH
76456: LD_INT 5
76458: GREATEREQUAL
76459: IFFALSE 76463
// break ;
76461: GO 76465
// end ;
76463: GO 76432
76465: POP
76466: POP
// end ; if not tmp then
76467: LD_VAR 0 5
76471: NOT
76472: IFFALSE 76476
// continue ;
76474: GO 75688
// for j in tmp do
76476: LD_ADDR_VAR 0 3
76480: PUSH
76481: LD_VAR 0 5
76485: PUSH
76486: FOR_IN
76487: IFFALSE 76577
// if not GetTag ( j ) then
76489: LD_VAR 0 3
76493: PPUSH
76494: CALL_OW 110
76498: NOT
76499: IFFALSE 76575
// begin mc_crates_collector := ReplaceIn ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
76501: LD_ADDR_EXP 53
76505: PUSH
76506: LD_EXP 53
76510: PPUSH
76511: LD_VAR 0 2
76515: PUSH
76516: LD_EXP 53
76520: PUSH
76521: LD_VAR 0 2
76525: ARRAY
76526: PUSH
76527: LD_INT 1
76529: PLUS
76530: PUSH
76531: EMPTY
76532: LIST
76533: LIST
76534: PPUSH
76535: LD_VAR 0 3
76539: PPUSH
76540: CALL 26486 0 3
76544: ST_TO_ADDR
// SetTag ( j , 107 ) ;
76545: LD_VAR 0 3
76549: PPUSH
76550: LD_INT 107
76552: PPUSH
76553: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
76557: LD_EXP 53
76561: PUSH
76562: LD_VAR 0 2
76566: ARRAY
76567: PUSH
76568: LD_INT 5
76570: GREATEREQUAL
76571: IFFALSE 76575
// break ;
76573: GO 76577
// end ;
76575: GO 76486
76577: POP
76578: POP
// end ; if mc_crates_collector [ i ] and target then
76579: LD_EXP 53
76583: PUSH
76584: LD_VAR 0 2
76588: ARRAY
76589: PUSH
76590: LD_VAR 0 6
76594: AND
76595: IFFALSE 76838
// begin if mc_crates_collector [ i ] < target [ 1 ] then
76597: LD_EXP 53
76601: PUSH
76602: LD_VAR 0 2
76606: ARRAY
76607: PUSH
76608: LD_VAR 0 6
76612: PUSH
76613: LD_INT 1
76615: ARRAY
76616: LESS
76617: IFFALSE 76637
// tmp := mc_crates_collector [ i ] else
76619: LD_ADDR_VAR 0 5
76623: PUSH
76624: LD_EXP 53
76628: PUSH
76629: LD_VAR 0 2
76633: ARRAY
76634: ST_TO_ADDR
76635: GO 76651
// tmp := target [ 1 ] ;
76637: LD_ADDR_VAR 0 5
76641: PUSH
76642: LD_VAR 0 6
76646: PUSH
76647: LD_INT 1
76649: ARRAY
76650: ST_TO_ADDR
// k := 0 ;
76651: LD_ADDR_VAR 0 4
76655: PUSH
76656: LD_INT 0
76658: ST_TO_ADDR
// for j in mc_crates_collector [ i ] do
76659: LD_ADDR_VAR 0 3
76663: PUSH
76664: LD_EXP 53
76668: PUSH
76669: LD_VAR 0 2
76673: ARRAY
76674: PUSH
76675: FOR_IN
76676: IFFALSE 76836
// begin k := k + 1 ;
76678: LD_ADDR_VAR 0 4
76682: PUSH
76683: LD_VAR 0 4
76687: PUSH
76688: LD_INT 1
76690: PLUS
76691: ST_TO_ADDR
// if k > tmp then
76692: LD_VAR 0 4
76696: PUSH
76697: LD_VAR 0 5
76701: GREATER
76702: IFFALSE 76706
// break ;
76704: GO 76836
// if not GetClass ( j ) in [ 2 , 16 ] then
76706: LD_VAR 0 3
76710: PPUSH
76711: CALL_OW 257
76715: PUSH
76716: LD_INT 2
76718: PUSH
76719: LD_INT 16
76721: PUSH
76722: EMPTY
76723: LIST
76724: LIST
76725: IN
76726: NOT
76727: IFFALSE 76780
// begin mc_crates_collector := Replace ( mc_crates_collector , i , mc_crates_collector [ i ] diff j ) ;
76729: LD_ADDR_EXP 53
76733: PUSH
76734: LD_EXP 53
76738: PPUSH
76739: LD_VAR 0 2
76743: PPUSH
76744: LD_EXP 53
76748: PUSH
76749: LD_VAR 0 2
76753: ARRAY
76754: PUSH
76755: LD_VAR 0 3
76759: DIFF
76760: PPUSH
76761: CALL_OW 1
76765: ST_TO_ADDR
// SetTag ( j , 0 ) ;
76766: LD_VAR 0 3
76770: PPUSH
76771: LD_INT 0
76773: PPUSH
76774: CALL_OW 109
// continue ;
76778: GO 76675
// end ; if IsInUnit ( j ) then
76780: LD_VAR 0 3
76784: PPUSH
76785: CALL_OW 310
76789: IFFALSE 76800
// ComExitBuilding ( j ) ;
76791: LD_VAR 0 3
76795: PPUSH
76796: CALL_OW 122
// wait ( 3 ) ;
76800: LD_INT 3
76802: PPUSH
76803: CALL_OW 67
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
76807: LD_VAR 0 3
76811: PPUSH
76812: LD_VAR 0 6
76816: PUSH
76817: LD_INT 2
76819: ARRAY
76820: PPUSH
76821: LD_VAR 0 6
76825: PUSH
76826: LD_INT 3
76828: ARRAY
76829: PPUSH
76830: CALL_OW 117
// end ;
76834: GO 76675
76836: POP
76837: POP
// end ; end else
76838: GO 77419
// begin for j in cargo do
76840: LD_ADDR_VAR 0 3
76844: PUSH
76845: LD_VAR 0 7
76849: PUSH
76850: FOR_IN
76851: IFFALSE 77417
// begin if GetTag ( j ) <> 0 then
76853: LD_VAR 0 3
76857: PPUSH
76858: CALL_OW 110
76862: PUSH
76863: LD_INT 0
76865: NONEQUAL
76866: IFFALSE 76870
// continue ;
76868: GO 76850
// if GetLives ( j ) < 1000 and not IsInArea ( j , mc_parking [ i ] ) then
76870: LD_VAR 0 3
76874: PPUSH
76875: CALL_OW 256
76879: PUSH
76880: LD_INT 1000
76882: LESS
76883: PUSH
76884: LD_VAR 0 3
76888: PPUSH
76889: LD_EXP 60
76893: PUSH
76894: LD_VAR 0 2
76898: ARRAY
76899: PPUSH
76900: CALL_OW 308
76904: NOT
76905: AND
76906: IFFALSE 76928
// ComMoveToArea ( j , mc_parking [ i ] ) ;
76908: LD_VAR 0 3
76912: PPUSH
76913: LD_EXP 60
76917: PUSH
76918: LD_VAR 0 2
76922: ARRAY
76923: PPUSH
76924: CALL_OW 113
// if GetLives ( j ) < 1000 and IsInArea ( j , mc_parking [ i ] ) then
76928: LD_VAR 0 3
76932: PPUSH
76933: CALL_OW 256
76937: PUSH
76938: LD_INT 1000
76940: LESS
76941: PUSH
76942: LD_VAR 0 3
76946: PPUSH
76947: LD_EXP 60
76951: PUSH
76952: LD_VAR 0 2
76956: ARRAY
76957: PPUSH
76958: CALL_OW 308
76962: AND
76963: IFFALSE 76967
// continue ;
76965: GO 76850
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
76967: LD_VAR 0 3
76971: PPUSH
76972: CALL_OW 262
76976: PUSH
76977: LD_INT 2
76979: EQUAL
76980: PUSH
76981: LD_VAR 0 3
76985: PPUSH
76986: CALL_OW 261
76990: PUSH
76991: LD_INT 15
76993: LESS
76994: AND
76995: IFFALSE 76999
// continue ;
76997: GO 76850
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
76999: LD_VAR 0 3
77003: PPUSH
77004: CALL_OW 262
77008: PUSH
77009: LD_INT 1
77011: EQUAL
77012: PUSH
77013: LD_VAR 0 3
77017: PPUSH
77018: CALL_OW 261
77022: PUSH
77023: LD_INT 10
77025: LESS
77026: AND
77027: IFFALSE 77356
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
77029: LD_ADDR_VAR 0 8
77033: PUSH
77034: LD_EXP 36
77038: PUSH
77039: LD_VAR 0 2
77043: ARRAY
77044: PPUSH
77045: LD_INT 2
77047: PUSH
77048: LD_INT 30
77050: PUSH
77051: LD_INT 0
77053: PUSH
77054: EMPTY
77055: LIST
77056: LIST
77057: PUSH
77058: LD_INT 30
77060: PUSH
77061: LD_INT 1
77063: PUSH
77064: EMPTY
77065: LIST
77066: LIST
77067: PUSH
77068: EMPTY
77069: LIST
77070: LIST
77071: LIST
77072: PPUSH
77073: CALL_OW 72
77077: ST_TO_ADDR
// if not depot then
77078: LD_VAR 0 8
77082: NOT
77083: IFFALSE 77087
// continue ;
77085: GO 76850
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
77087: LD_VAR 0 3
77091: PPUSH
77092: LD_VAR 0 8
77096: PPUSH
77097: LD_VAR 0 3
77101: PPUSH
77102: CALL_OW 74
77106: PPUSH
77107: CALL_OW 296
77111: PUSH
77112: LD_INT 6
77114: LESS
77115: IFFALSE 77131
// SetFuel ( j , 100 ) else
77117: LD_VAR 0 3
77121: PPUSH
77122: LD_INT 100
77124: PPUSH
77125: CALL_OW 240
77129: GO 77356
// if GetFuel ( j ) = 0 then
77131: LD_VAR 0 3
77135: PPUSH
77136: CALL_OW 261
77140: PUSH
77141: LD_INT 0
77143: EQUAL
77144: IFFALSE 77356
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
77146: LD_ADDR_EXP 55
77150: PUSH
77151: LD_EXP 55
77155: PPUSH
77156: LD_VAR 0 2
77160: PPUSH
77161: LD_EXP 55
77165: PUSH
77166: LD_VAR 0 2
77170: ARRAY
77171: PUSH
77172: LD_VAR 0 3
77176: DIFF
77177: PPUSH
77178: CALL_OW 1
77182: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
77183: LD_VAR 0 3
77187: PPUSH
77188: CALL_OW 263
77192: PUSH
77193: LD_INT 1
77195: EQUAL
77196: IFFALSE 77212
// ComExitVehicle ( IsInUnit ( j ) ) ;
77198: LD_VAR 0 3
77202: PPUSH
77203: CALL_OW 310
77207: PPUSH
77208: CALL_OW 121
// if GetControl ( j ) = control_remote then
77212: LD_VAR 0 3
77216: PPUSH
77217: CALL_OW 263
77221: PUSH
77222: LD_INT 2
77224: EQUAL
77225: IFFALSE 77236
// ComUnlink ( j ) ;
77227: LD_VAR 0 3
77231: PPUSH
77232: CALL_OW 136
// fac := MC_GetBuildings ( i , b_factory ) ;
77236: LD_ADDR_VAR 0 9
77240: PUSH
77241: LD_VAR 0 2
77245: PPUSH
77246: LD_INT 3
77248: PPUSH
77249: CALL 86709 0 2
77253: ST_TO_ADDR
// if fac then
77254: LD_VAR 0 9
77258: IFFALSE 77354
// begin for k in fac do
77260: LD_ADDR_VAR 0 4
77264: PUSH
77265: LD_VAR 0 9
77269: PUSH
77270: FOR_IN
77271: IFFALSE 77352
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
77273: LD_ADDR_VAR 0 10
77277: PUSH
77278: LD_VAR 0 9
77282: PPUSH
77283: LD_VAR 0 3
77287: PPUSH
77288: CALL_OW 265
77292: PPUSH
77293: LD_VAR 0 3
77297: PPUSH
77298: CALL_OW 262
77302: PPUSH
77303: LD_VAR 0 3
77307: PPUSH
77308: CALL_OW 263
77312: PPUSH
77313: LD_VAR 0 3
77317: PPUSH
77318: CALL_OW 264
77322: PPUSH
77323: CALL 24018 0 5
77327: ST_TO_ADDR
// if components then
77328: LD_VAR 0 10
77332: IFFALSE 77350
// begin MC_InsertProduceList ( i , components ) ;
77334: LD_VAR 0 2
77338: PPUSH
77339: LD_VAR 0 10
77343: PPUSH
77344: CALL 86254 0 2
// break ;
77348: GO 77352
// end ; end ;
77350: GO 77270
77352: POP
77353: POP
// end ; continue ;
77354: GO 76850
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
77356: LD_VAR 0 3
77360: PPUSH
77361: LD_INT 1
77363: PPUSH
77364: CALL_OW 289
77368: PUSH
77369: LD_INT 100
77371: LESS
77372: PUSH
77373: LD_VAR 0 3
77377: PPUSH
77378: CALL_OW 314
77382: NOT
77383: AND
77384: IFFALSE 77413
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
77386: LD_VAR 0 3
77390: PPUSH
77391: LD_VAR 0 6
77395: PUSH
77396: LD_INT 2
77398: ARRAY
77399: PPUSH
77400: LD_VAR 0 6
77404: PUSH
77405: LD_INT 3
77407: ARRAY
77408: PPUSH
77409: CALL_OW 117
// break ;
77413: GO 77417
// end ;
77415: GO 76850
77417: POP
77418: POP
// end ; end ;
77419: GO 75688
77421: POP
77422: POP
// end ;
77423: LD_VAR 0 1
77427: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
77428: LD_INT 0
77430: PPUSH
77431: PPUSH
77432: PPUSH
77433: PPUSH
// if not mc_bases then
77434: LD_EXP 36
77438: NOT
77439: IFFALSE 77443
// exit ;
77441: GO 77604
// for i = 1 to mc_bases do
77443: LD_ADDR_VAR 0 2
77447: PUSH
77448: DOUBLE
77449: LD_INT 1
77451: DEC
77452: ST_TO_ADDR
77453: LD_EXP 36
77457: PUSH
77458: FOR_TO
77459: IFFALSE 77602
// begin tmp := UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) ;
77461: LD_ADDR_VAR 0 4
77465: PUSH
77466: LD_EXP 55
77470: PUSH
77471: LD_VAR 0 2
77475: ARRAY
77476: PUSH
77477: LD_EXP 58
77481: PUSH
77482: LD_VAR 0 2
77486: ARRAY
77487: UNION
77488: PPUSH
77489: LD_INT 33
77491: PUSH
77492: LD_INT 2
77494: PUSH
77495: EMPTY
77496: LIST
77497: LIST
77498: PPUSH
77499: CALL_OW 72
77503: ST_TO_ADDR
// if tmp then
77504: LD_VAR 0 4
77508: IFFALSE 77600
// for j in tmp do
77510: LD_ADDR_VAR 0 3
77514: PUSH
77515: LD_VAR 0 4
77519: PUSH
77520: FOR_IN
77521: IFFALSE 77598
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
77523: LD_VAR 0 3
77527: PPUSH
77528: CALL_OW 312
77532: NOT
77533: PUSH
77534: LD_VAR 0 3
77538: PPUSH
77539: CALL_OW 256
77543: PUSH
77544: LD_INT 250
77546: GREATEREQUAL
77547: AND
77548: IFFALSE 77561
// Connect ( j ) else
77550: LD_VAR 0 3
77554: PPUSH
77555: CALL 29419 0 1
77559: GO 77596
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
77561: LD_VAR 0 3
77565: PPUSH
77566: CALL_OW 256
77570: PUSH
77571: LD_INT 250
77573: LESS
77574: PUSH
77575: LD_VAR 0 3
77579: PPUSH
77580: CALL_OW 312
77584: AND
77585: IFFALSE 77596
// ComUnlink ( j ) ;
77587: LD_VAR 0 3
77591: PPUSH
77592: CALL_OW 136
77596: GO 77520
77598: POP
77599: POP
// end ;
77600: GO 77458
77602: POP
77603: POP
// end ;
77604: LD_VAR 0 1
77608: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
77609: LD_INT 0
77611: PPUSH
77612: PPUSH
77613: PPUSH
77614: PPUSH
77615: PPUSH
// if not mc_bases then
77616: LD_EXP 36
77620: NOT
77621: IFFALSE 77625
// exit ;
77623: GO 78070
// for i = 1 to mc_bases do
77625: LD_ADDR_VAR 0 2
77629: PUSH
77630: DOUBLE
77631: LD_INT 1
77633: DEC
77634: ST_TO_ADDR
77635: LD_EXP 36
77639: PUSH
77640: FOR_TO
77641: IFFALSE 78068
// begin if not mc_produce [ i ] then
77643: LD_EXP 57
77647: PUSH
77648: LD_VAR 0 2
77652: ARRAY
77653: NOT
77654: IFFALSE 77658
// continue ;
77656: GO 77640
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
77658: LD_ADDR_VAR 0 5
77662: PUSH
77663: LD_EXP 36
77667: PUSH
77668: LD_VAR 0 2
77672: ARRAY
77673: PPUSH
77674: LD_INT 30
77676: PUSH
77677: LD_INT 3
77679: PUSH
77680: EMPTY
77681: LIST
77682: LIST
77683: PPUSH
77684: CALL_OW 72
77688: ST_TO_ADDR
// if not fac then
77689: LD_VAR 0 5
77693: NOT
77694: IFFALSE 77698
// continue ;
77696: GO 77640
// for j in fac do
77698: LD_ADDR_VAR 0 3
77702: PUSH
77703: LD_VAR 0 5
77707: PUSH
77708: FOR_IN
77709: IFFALSE 78064
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] then
77711: LD_VAR 0 3
77715: PPUSH
77716: CALL_OW 461
77720: PUSH
77721: LD_INT 2
77723: NONEQUAL
77724: PUSH
77725: LD_VAR 0 3
77729: PPUSH
77730: LD_INT 15
77732: PPUSH
77733: CALL 29079 0 2
77737: PUSH
77738: LD_INT 4
77740: ARRAY
77741: OR
77742: IFFALSE 77746
// continue ;
77744: GO 77708
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
77746: LD_VAR 0 3
77750: PPUSH
77751: LD_EXP 57
77755: PUSH
77756: LD_VAR 0 2
77760: ARRAY
77761: PUSH
77762: LD_INT 1
77764: ARRAY
77765: PUSH
77766: LD_INT 1
77768: ARRAY
77769: PPUSH
77770: LD_EXP 57
77774: PUSH
77775: LD_VAR 0 2
77779: ARRAY
77780: PUSH
77781: LD_INT 1
77783: ARRAY
77784: PUSH
77785: LD_INT 2
77787: ARRAY
77788: PPUSH
77789: LD_EXP 57
77793: PUSH
77794: LD_VAR 0 2
77798: ARRAY
77799: PUSH
77800: LD_INT 1
77802: ARRAY
77803: PUSH
77804: LD_INT 3
77806: ARRAY
77807: PPUSH
77808: LD_EXP 57
77812: PUSH
77813: LD_VAR 0 2
77817: ARRAY
77818: PUSH
77819: LD_INT 1
77821: ARRAY
77822: PUSH
77823: LD_INT 4
77825: ARRAY
77826: PPUSH
77827: CALL_OW 448
77831: PUSH
77832: LD_VAR 0 3
77836: PPUSH
77837: LD_EXP 57
77841: PUSH
77842: LD_VAR 0 2
77846: ARRAY
77847: PUSH
77848: LD_INT 1
77850: ARRAY
77851: PUSH
77852: LD_INT 1
77854: ARRAY
77855: PUSH
77856: LD_EXP 57
77860: PUSH
77861: LD_VAR 0 2
77865: ARRAY
77866: PUSH
77867: LD_INT 1
77869: ARRAY
77870: PUSH
77871: LD_INT 2
77873: ARRAY
77874: PUSH
77875: LD_EXP 57
77879: PUSH
77880: LD_VAR 0 2
77884: ARRAY
77885: PUSH
77886: LD_INT 1
77888: ARRAY
77889: PUSH
77890: LD_INT 3
77892: ARRAY
77893: PUSH
77894: LD_EXP 57
77898: PUSH
77899: LD_VAR 0 2
77903: ARRAY
77904: PUSH
77905: LD_INT 1
77907: ARRAY
77908: PUSH
77909: LD_INT 4
77911: ARRAY
77912: PUSH
77913: EMPTY
77914: LIST
77915: LIST
77916: LIST
77917: LIST
77918: PPUSH
77919: CALL 32750 0 2
77923: AND
77924: IFFALSE 78062
// begin AddComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
77926: LD_VAR 0 3
77930: PPUSH
77931: LD_EXP 57
77935: PUSH
77936: LD_VAR 0 2
77940: ARRAY
77941: PUSH
77942: LD_INT 1
77944: ARRAY
77945: PUSH
77946: LD_INT 1
77948: ARRAY
77949: PPUSH
77950: LD_EXP 57
77954: PUSH
77955: LD_VAR 0 2
77959: ARRAY
77960: PUSH
77961: LD_INT 1
77963: ARRAY
77964: PUSH
77965: LD_INT 2
77967: ARRAY
77968: PPUSH
77969: LD_EXP 57
77973: PUSH
77974: LD_VAR 0 2
77978: ARRAY
77979: PUSH
77980: LD_INT 1
77982: ARRAY
77983: PUSH
77984: LD_INT 3
77986: ARRAY
77987: PPUSH
77988: LD_EXP 57
77992: PUSH
77993: LD_VAR 0 2
77997: ARRAY
77998: PUSH
77999: LD_INT 1
78001: ARRAY
78002: PUSH
78003: LD_INT 4
78005: ARRAY
78006: PPUSH
78007: CALL_OW 185
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
78011: LD_ADDR_VAR 0 4
78015: PUSH
78016: LD_EXP 57
78020: PUSH
78021: LD_VAR 0 2
78025: ARRAY
78026: PPUSH
78027: LD_INT 1
78029: PPUSH
78030: CALL_OW 3
78034: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
78035: LD_ADDR_EXP 57
78039: PUSH
78040: LD_EXP 57
78044: PPUSH
78045: LD_VAR 0 2
78049: PPUSH
78050: LD_VAR 0 4
78054: PPUSH
78055: CALL_OW 1
78059: ST_TO_ADDR
// break ;
78060: GO 78064
// end ; end ;
78062: GO 77708
78064: POP
78065: POP
// end ;
78066: GO 77640
78068: POP
78069: POP
// end ;
78070: LD_VAR 0 1
78074: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
78075: LD_INT 0
78077: PPUSH
78078: PPUSH
78079: PPUSH
// if not mc_bases then
78080: LD_EXP 36
78084: NOT
78085: IFFALSE 78089
// exit ;
78087: GO 78178
// for i = 1 to mc_bases do
78089: LD_ADDR_VAR 0 2
78093: PUSH
78094: DOUBLE
78095: LD_INT 1
78097: DEC
78098: ST_TO_ADDR
78099: LD_EXP 36
78103: PUSH
78104: FOR_TO
78105: IFFALSE 78176
// begin if mc_attack [ i ] then
78107: LD_EXP 56
78111: PUSH
78112: LD_VAR 0 2
78116: ARRAY
78117: IFFALSE 78174
// begin tmp := mc_attack [ i ] [ 1 ] ;
78119: LD_ADDR_VAR 0 3
78123: PUSH
78124: LD_EXP 56
78128: PUSH
78129: LD_VAR 0 2
78133: ARRAY
78134: PUSH
78135: LD_INT 1
78137: ARRAY
78138: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
78139: LD_ADDR_EXP 56
78143: PUSH
78144: LD_EXP 56
78148: PPUSH
78149: LD_VAR 0 2
78153: PPUSH
78154: EMPTY
78155: PPUSH
78156: CALL_OW 1
78160: ST_TO_ADDR
// Attack ( tmp ) ;
78161: LD_VAR 0 3
78165: PPUSH
78166: CALL 54963 0 1
// exit ;
78170: POP
78171: POP
78172: GO 78178
// end ; end ;
78174: GO 78104
78176: POP
78177: POP
// end ;
78178: LD_VAR 0 1
78182: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
78183: LD_INT 0
78185: PPUSH
78186: PPUSH
78187: PPUSH
78188: PPUSH
78189: PPUSH
78190: PPUSH
78191: PPUSH
// if not mc_bases then
78192: LD_EXP 36
78196: NOT
78197: IFFALSE 78201
// exit ;
78199: GO 78783
// for i = 1 to mc_bases do
78201: LD_ADDR_VAR 0 2
78205: PUSH
78206: DOUBLE
78207: LD_INT 1
78209: DEC
78210: ST_TO_ADDR
78211: LD_EXP 36
78215: PUSH
78216: FOR_TO
78217: IFFALSE 78781
// begin if not mc_bases [ i ] then
78219: LD_EXP 36
78223: PUSH
78224: LD_VAR 0 2
78228: ARRAY
78229: NOT
78230: IFFALSE 78234
// continue ;
78232: GO 78216
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
78234: LD_ADDR_VAR 0 7
78238: PUSH
78239: LD_EXP 36
78243: PUSH
78244: LD_VAR 0 2
78248: ARRAY
78249: PUSH
78250: LD_INT 1
78252: ARRAY
78253: PPUSH
78254: CALL 23322 0 1
78258: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
78259: LD_ADDR_EXP 59
78263: PUSH
78264: LD_EXP 59
78268: PPUSH
78269: LD_VAR 0 2
78273: PPUSH
78274: LD_EXP 36
78278: PUSH
78279: LD_VAR 0 2
78283: ARRAY
78284: PUSH
78285: LD_INT 1
78287: ARRAY
78288: PPUSH
78289: CALL_OW 255
78293: PPUSH
78294: LD_EXP 61
78298: PUSH
78299: LD_VAR 0 2
78303: ARRAY
78304: PPUSH
78305: CALL 20965 0 2
78309: PPUSH
78310: CALL_OW 1
78314: ST_TO_ADDR
// if not mc_scan [ i ] then
78315: LD_EXP 59
78319: PUSH
78320: LD_VAR 0 2
78324: ARRAY
78325: NOT
78326: IFFALSE 78481
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
78328: LD_ADDR_VAR 0 4
78332: PUSH
78333: LD_EXP 36
78337: PUSH
78338: LD_VAR 0 2
78342: ARRAY
78343: PPUSH
78344: LD_INT 2
78346: PUSH
78347: LD_INT 25
78349: PUSH
78350: LD_INT 5
78352: PUSH
78353: EMPTY
78354: LIST
78355: LIST
78356: PUSH
78357: LD_INT 25
78359: PUSH
78360: LD_INT 8
78362: PUSH
78363: EMPTY
78364: LIST
78365: LIST
78366: PUSH
78367: LD_INT 25
78369: PUSH
78370: LD_INT 9
78372: PUSH
78373: EMPTY
78374: LIST
78375: LIST
78376: PUSH
78377: EMPTY
78378: LIST
78379: LIST
78380: LIST
78381: LIST
78382: PPUSH
78383: CALL_OW 72
78387: ST_TO_ADDR
// if not tmp then
78388: LD_VAR 0 4
78392: NOT
78393: IFFALSE 78397
// continue ;
78395: GO 78216
// for j in tmp do
78397: LD_ADDR_VAR 0 3
78401: PUSH
78402: LD_VAR 0 4
78406: PUSH
78407: FOR_IN
78408: IFFALSE 78479
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
78410: LD_VAR 0 3
78414: PPUSH
78415: CALL_OW 310
78419: PPUSH
78420: CALL_OW 266
78424: PUSH
78425: LD_INT 5
78427: EQUAL
78428: PUSH
78429: LD_VAR 0 3
78433: PPUSH
78434: CALL_OW 257
78438: PUSH
78439: LD_INT 1
78441: EQUAL
78442: AND
78443: PUSH
78444: LD_VAR 0 3
78448: PPUSH
78449: CALL_OW 459
78453: NOT
78454: AND
78455: PUSH
78456: LD_VAR 0 7
78460: AND
78461: IFFALSE 78477
// ComChangeProfession ( j , class ) ;
78463: LD_VAR 0 3
78467: PPUSH
78468: LD_VAR 0 7
78472: PPUSH
78473: CALL_OW 123
78477: GO 78407
78479: POP
78480: POP
// end ; if mc_scan [ i ] and not mc_defender [ i ] and not UnitFilter ( mc_bases [ i ] , [ f_btype , b_bunker ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) then
78481: LD_EXP 59
78485: PUSH
78486: LD_VAR 0 2
78490: ARRAY
78491: PUSH
78492: LD_EXP 58
78496: PUSH
78497: LD_VAR 0 2
78501: ARRAY
78502: NOT
78503: AND
78504: PUSH
78505: LD_EXP 36
78509: PUSH
78510: LD_VAR 0 2
78514: ARRAY
78515: PPUSH
78516: LD_INT 30
78518: PUSH
78519: LD_INT 32
78521: PUSH
78522: EMPTY
78523: LIST
78524: LIST
78525: PPUSH
78526: CALL_OW 72
78530: NOT
78531: AND
78532: PUSH
78533: LD_EXP 36
78537: PUSH
78538: LD_VAR 0 2
78542: ARRAY
78543: PPUSH
78544: LD_INT 2
78546: PUSH
78547: LD_INT 30
78549: PUSH
78550: LD_INT 4
78552: PUSH
78553: EMPTY
78554: LIST
78555: LIST
78556: PUSH
78557: LD_INT 30
78559: PUSH
78560: LD_INT 5
78562: PUSH
78563: EMPTY
78564: LIST
78565: LIST
78566: PUSH
78567: EMPTY
78568: LIST
78569: LIST
78570: LIST
78571: PPUSH
78572: CALL_OW 72
78576: NOT
78577: AND
78578: IFFALSE 78710
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
78580: LD_ADDR_VAR 0 4
78584: PUSH
78585: LD_EXP 36
78589: PUSH
78590: LD_VAR 0 2
78594: ARRAY
78595: PPUSH
78596: LD_INT 2
78598: PUSH
78599: LD_INT 25
78601: PUSH
78602: LD_INT 1
78604: PUSH
78605: EMPTY
78606: LIST
78607: LIST
78608: PUSH
78609: LD_INT 25
78611: PUSH
78612: LD_INT 5
78614: PUSH
78615: EMPTY
78616: LIST
78617: LIST
78618: PUSH
78619: LD_INT 25
78621: PUSH
78622: LD_INT 8
78624: PUSH
78625: EMPTY
78626: LIST
78627: LIST
78628: PUSH
78629: LD_INT 25
78631: PUSH
78632: LD_INT 9
78634: PUSH
78635: EMPTY
78636: LIST
78637: LIST
78638: PUSH
78639: EMPTY
78640: LIST
78641: LIST
78642: LIST
78643: LIST
78644: LIST
78645: PPUSH
78646: CALL_OW 72
78650: ST_TO_ADDR
// tmp := tmp diff FilterByTag ( tmp , 18 ) ;
78651: LD_ADDR_VAR 0 4
78655: PUSH
78656: LD_VAR 0 4
78660: PUSH
78661: LD_VAR 0 4
78665: PPUSH
78666: LD_INT 18
78668: PPUSH
78669: CALL 59746 0 2
78673: DIFF
78674: ST_TO_ADDR
// if tmp then
78675: LD_VAR 0 4
78679: IFFALSE 78710
// begin BasicDefend ( i , tmp , mc_scan_area [ i ] ) ;
78681: LD_VAR 0 2
78685: PPUSH
78686: LD_VAR 0 4
78690: PPUSH
78691: LD_EXP 61
78695: PUSH
78696: LD_VAR 0 2
78700: ARRAY
78701: PPUSH
78702: CALL 21000 0 3
// exit ;
78706: POP
78707: POP
78708: GO 78783
// end ; end ; if mc_scan [ i ] and mc_defender [ i ] then
78710: LD_EXP 59
78714: PUSH
78715: LD_VAR 0 2
78719: ARRAY
78720: PUSH
78721: LD_EXP 58
78725: PUSH
78726: LD_VAR 0 2
78730: ARRAY
78731: AND
78732: IFFALSE 78779
// begin tmp := mc_defender [ i ] ;
78734: LD_ADDR_VAR 0 4
78738: PUSH
78739: LD_EXP 58
78743: PUSH
78744: LD_VAR 0 2
78748: ARRAY
78749: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
78750: LD_VAR 0 2
78754: PPUSH
78755: LD_VAR 0 4
78759: PPUSH
78760: LD_EXP 59
78764: PUSH
78765: LD_VAR 0 2
78769: ARRAY
78770: PPUSH
78771: CALL 21561 0 3
// exit ;
78775: POP
78776: POP
78777: GO 78783
// end ; end ;
78779: GO 78216
78781: POP
78782: POP
// end ;
78783: LD_VAR 0 1
78787: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 , researching , idle_lab ; begin
78788: LD_INT 0
78790: PPUSH
78791: PPUSH
78792: PPUSH
78793: PPUSH
78794: PPUSH
78795: PPUSH
78796: PPUSH
78797: PPUSH
78798: PPUSH
78799: PPUSH
78800: PPUSH
// if not mc_bases then
78801: LD_EXP 36
78805: NOT
78806: IFFALSE 78810
// exit ;
78808: GO 79897
// for i = 1 to mc_bases do
78810: LD_ADDR_VAR 0 2
78814: PUSH
78815: DOUBLE
78816: LD_INT 1
78818: DEC
78819: ST_TO_ADDR
78820: LD_EXP 36
78824: PUSH
78825: FOR_TO
78826: IFFALSE 79895
// begin tmp := mc_lab [ i ] ;
78828: LD_ADDR_VAR 0 6
78832: PUSH
78833: LD_EXP 69
78837: PUSH
78838: LD_VAR 0 2
78842: ARRAY
78843: ST_TO_ADDR
// if not tmp then
78844: LD_VAR 0 6
78848: NOT
78849: IFFALSE 78853
// continue ;
78851: GO 78825
// idle_lab := 0 ;
78853: LD_ADDR_VAR 0 11
78857: PUSH
78858: LD_INT 0
78860: ST_TO_ADDR
// for j in tmp do
78861: LD_ADDR_VAR 0 3
78865: PUSH
78866: LD_VAR 0 6
78870: PUSH
78871: FOR_IN
78872: IFFALSE 79891
// begin researching := false ;
78874: LD_ADDR_VAR 0 10
78878: PUSH
78879: LD_INT 0
78881: ST_TO_ADDR
// side := GetSide ( j ) ;
78882: LD_ADDR_VAR 0 4
78886: PUSH
78887: LD_VAR 0 3
78891: PPUSH
78892: CALL_OW 255
78896: ST_TO_ADDR
// if not mc_tech [ side ] then
78897: LD_EXP 63
78901: PUSH
78902: LD_VAR 0 4
78906: ARRAY
78907: NOT
78908: IFFALSE 78912
// continue ;
78910: GO 78871
// if BuildingStatus ( j ) = bs_idle then
78912: LD_VAR 0 3
78916: PPUSH
78917: CALL_OW 461
78921: PUSH
78922: LD_INT 2
78924: EQUAL
78925: IFFALSE 79113
// begin if idle_lab and UnitsInside ( j ) < 6 then
78927: LD_VAR 0 11
78931: PUSH
78932: LD_VAR 0 3
78936: PPUSH
78937: CALL_OW 313
78941: PUSH
78942: LD_INT 6
78944: LESS
78945: AND
78946: IFFALSE 79017
// begin tmp2 := UnitsInside ( idle_lab ) ;
78948: LD_ADDR_VAR 0 9
78952: PUSH
78953: LD_VAR 0 11
78957: PPUSH
78958: CALL_OW 313
78962: ST_TO_ADDR
// if tmp2 then
78963: LD_VAR 0 9
78967: IFFALSE 79009
// for x in tmp2 do
78969: LD_ADDR_VAR 0 7
78973: PUSH
78974: LD_VAR 0 9
78978: PUSH
78979: FOR_IN
78980: IFFALSE 79007
// begin ComExitBuilding ( x ) ;
78982: LD_VAR 0 7
78986: PPUSH
78987: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
78991: LD_VAR 0 7
78995: PPUSH
78996: LD_VAR 0 3
79000: PPUSH
79001: CALL_OW 180
// end ;
79005: GO 78979
79007: POP
79008: POP
// idle_lab := 0 ;
79009: LD_ADDR_VAR 0 11
79013: PUSH
79014: LD_INT 0
79016: ST_TO_ADDR
// end ; for t in mc_tech [ side ] do
79017: LD_ADDR_VAR 0 5
79021: PUSH
79022: LD_EXP 63
79026: PUSH
79027: LD_VAR 0 4
79031: ARRAY
79032: PUSH
79033: FOR_IN
79034: IFFALSE 79094
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
79036: LD_VAR 0 3
79040: PPUSH
79041: LD_VAR 0 5
79045: PPUSH
79046: CALL_OW 430
79050: PUSH
79051: LD_VAR 0 4
79055: PPUSH
79056: LD_VAR 0 5
79060: PPUSH
79061: CALL 20070 0 2
79065: AND
79066: IFFALSE 79092
// begin researching := true ;
79068: LD_ADDR_VAR 0 10
79072: PUSH
79073: LD_INT 1
79075: ST_TO_ADDR
// ComResearch ( j , t ) ;
79076: LD_VAR 0 3
79080: PPUSH
79081: LD_VAR 0 5
79085: PPUSH
79086: CALL_OW 124
// break ;
79090: GO 79094
// end ;
79092: GO 79033
79094: POP
79095: POP
// if not researching then
79096: LD_VAR 0 10
79100: NOT
79101: IFFALSE 79113
// idle_lab := j ;
79103: LD_ADDR_VAR 0 11
79107: PUSH
79108: LD_VAR 0 3
79112: ST_TO_ADDR
// end ; if BuildingStatus ( j ) = bs_need_ape then
79113: LD_VAR 0 3
79117: PPUSH
79118: CALL_OW 461
79122: PUSH
79123: LD_INT 10
79125: EQUAL
79126: IFFALSE 79714
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
79128: LD_EXP 65
79132: PUSH
79133: LD_VAR 0 2
79137: ARRAY
79138: NOT
79139: PUSH
79140: LD_EXP 66
79144: PUSH
79145: LD_VAR 0 2
79149: ARRAY
79150: NOT
79151: AND
79152: PUSH
79153: LD_EXP 63
79157: PUSH
79158: LD_VAR 0 4
79162: ARRAY
79163: PUSH
79164: LD_INT 1
79166: GREATER
79167: AND
79168: IFFALSE 79299
// begin ComCancel ( j ) ;
79170: LD_VAR 0 3
79174: PPUSH
79175: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
79179: LD_ADDR_EXP 63
79183: PUSH
79184: LD_EXP 63
79188: PPUSH
79189: LD_VAR 0 4
79193: PPUSH
79194: LD_EXP 63
79198: PUSH
79199: LD_VAR 0 4
79203: ARRAY
79204: PPUSH
79205: LD_EXP 63
79209: PUSH
79210: LD_VAR 0 4
79214: ARRAY
79215: PUSH
79216: LD_INT 1
79218: MINUS
79219: PPUSH
79220: LD_EXP 63
79224: PUSH
79225: LD_VAR 0 4
79229: ARRAY
79230: PPUSH
79231: LD_INT 0
79233: PPUSH
79234: CALL 25904 0 4
79238: PPUSH
79239: CALL_OW 1
79243: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
79244: LD_ADDR_EXP 63
79248: PUSH
79249: LD_EXP 63
79253: PPUSH
79254: LD_VAR 0 4
79258: PPUSH
79259: LD_EXP 63
79263: PUSH
79264: LD_VAR 0 4
79268: ARRAY
79269: PPUSH
79270: LD_EXP 63
79274: PUSH
79275: LD_VAR 0 4
79279: ARRAY
79280: PPUSH
79281: LD_INT 1
79283: PPUSH
79284: LD_INT 0
79286: PPUSH
79287: CALL 25904 0 4
79291: PPUSH
79292: CALL_OW 1
79296: ST_TO_ADDR
// continue ;
79297: GO 78871
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
79299: LD_EXP 65
79303: PUSH
79304: LD_VAR 0 2
79308: ARRAY
79309: PUSH
79310: LD_EXP 66
79314: PUSH
79315: LD_VAR 0 2
79319: ARRAY
79320: NOT
79321: AND
79322: IFFALSE 79449
// begin mc_ape_in_lab := ReplaceIn ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
79324: LD_ADDR_EXP 66
79328: PUSH
79329: LD_EXP 66
79333: PPUSH
79334: LD_VAR 0 2
79338: PUSH
79339: LD_EXP 66
79343: PUSH
79344: LD_VAR 0 2
79348: ARRAY
79349: PUSH
79350: LD_INT 1
79352: PLUS
79353: PUSH
79354: EMPTY
79355: LIST
79356: LIST
79357: PPUSH
79358: LD_EXP 65
79362: PUSH
79363: LD_VAR 0 2
79367: ARRAY
79368: PUSH
79369: LD_INT 1
79371: ARRAY
79372: PPUSH
79373: CALL 26486 0 3
79377: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
79378: LD_EXP 65
79382: PUSH
79383: LD_VAR 0 2
79387: ARRAY
79388: PUSH
79389: LD_INT 1
79391: ARRAY
79392: PPUSH
79393: LD_INT 112
79395: PPUSH
79396: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
79400: LD_ADDR_VAR 0 9
79404: PUSH
79405: LD_EXP 65
79409: PUSH
79410: LD_VAR 0 2
79414: ARRAY
79415: PPUSH
79416: LD_INT 1
79418: PPUSH
79419: CALL_OW 3
79423: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
79424: LD_ADDR_EXP 65
79428: PUSH
79429: LD_EXP 65
79433: PPUSH
79434: LD_VAR 0 2
79438: PPUSH
79439: LD_VAR 0 9
79443: PPUSH
79444: CALL_OW 1
79448: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
79449: LD_EXP 65
79453: PUSH
79454: LD_VAR 0 2
79458: ARRAY
79459: PUSH
79460: LD_EXP 66
79464: PUSH
79465: LD_VAR 0 2
79469: ARRAY
79470: AND
79471: PUSH
79472: LD_EXP 66
79476: PUSH
79477: LD_VAR 0 2
79481: ARRAY
79482: PUSH
79483: LD_INT 1
79485: ARRAY
79486: PPUSH
79487: CALL_OW 310
79491: NOT
79492: AND
79493: PUSH
79494: LD_VAR 0 3
79498: PPUSH
79499: CALL_OW 313
79503: PUSH
79504: LD_INT 6
79506: EQUAL
79507: AND
79508: IFFALSE 79564
// begin tmp2 := UnitsInside ( j ) ;
79510: LD_ADDR_VAR 0 9
79514: PUSH
79515: LD_VAR 0 3
79519: PPUSH
79520: CALL_OW 313
79524: ST_TO_ADDR
// if tmp2 = 6 then
79525: LD_VAR 0 9
79529: PUSH
79530: LD_INT 6
79532: EQUAL
79533: IFFALSE 79564
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
79535: LD_VAR 0 9
79539: PUSH
79540: LD_INT 1
79542: ARRAY
79543: PPUSH
79544: LD_INT 112
79546: PPUSH
79547: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
79551: LD_VAR 0 9
79555: PUSH
79556: LD_INT 1
79558: ARRAY
79559: PPUSH
79560: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
79564: LD_EXP 66
79568: PUSH
79569: LD_VAR 0 2
79573: ARRAY
79574: PUSH
79575: LD_EXP 66
79579: PUSH
79580: LD_VAR 0 2
79584: ARRAY
79585: PUSH
79586: LD_INT 1
79588: ARRAY
79589: PPUSH
79590: CALL_OW 314
79594: NOT
79595: AND
79596: PUSH
79597: LD_EXP 66
79601: PUSH
79602: LD_VAR 0 2
79606: ARRAY
79607: PUSH
79608: LD_INT 1
79610: ARRAY
79611: PPUSH
79612: CALL_OW 310
79616: NOT
79617: AND
79618: IFFALSE 79644
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
79620: LD_EXP 66
79624: PUSH
79625: LD_VAR 0 2
79629: ARRAY
79630: PUSH
79631: LD_INT 1
79633: ARRAY
79634: PPUSH
79635: LD_VAR 0 3
79639: PPUSH
79640: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
79644: LD_EXP 66
79648: PUSH
79649: LD_VAR 0 2
79653: ARRAY
79654: PUSH
79655: LD_INT 1
79657: ARRAY
79658: PPUSH
79659: CALL_OW 310
79663: PUSH
79664: LD_EXP 66
79668: PUSH
79669: LD_VAR 0 2
79673: ARRAY
79674: PUSH
79675: LD_INT 1
79677: ARRAY
79678: PPUSH
79679: CALL_OW 310
79683: PPUSH
79684: CALL_OW 461
79688: PUSH
79689: LD_INT 3
79691: NONEQUAL
79692: AND
79693: IFFALSE 79714
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
79695: LD_EXP 66
79699: PUSH
79700: LD_VAR 0 2
79704: ARRAY
79705: PUSH
79706: LD_INT 1
79708: ARRAY
79709: PPUSH
79710: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
79714: LD_VAR 0 3
79718: PPUSH
79719: CALL_OW 461
79723: PUSH
79724: LD_INT 6
79726: EQUAL
79727: PUSH
79728: LD_VAR 0 6
79732: PUSH
79733: LD_INT 1
79735: GREATER
79736: AND
79737: IFFALSE 79889
// begin sci := [ ] ;
79739: LD_ADDR_VAR 0 8
79743: PUSH
79744: EMPTY
79745: ST_TO_ADDR
// for x in ( tmp diff j ) do
79746: LD_ADDR_VAR 0 7
79750: PUSH
79751: LD_VAR 0 6
79755: PUSH
79756: LD_VAR 0 3
79760: DIFF
79761: PUSH
79762: FOR_IN
79763: IFFALSE 79815
// begin if sci = 6 then
79765: LD_VAR 0 8
79769: PUSH
79770: LD_INT 6
79772: EQUAL
79773: IFFALSE 79777
// break ;
79775: GO 79815
// if BuildingStatus ( x ) = bs_idle then
79777: LD_VAR 0 7
79781: PPUSH
79782: CALL_OW 461
79786: PUSH
79787: LD_INT 2
79789: EQUAL
79790: IFFALSE 79813
// sci := sci ^ UnitsInside ( x ) ;
79792: LD_ADDR_VAR 0 8
79796: PUSH
79797: LD_VAR 0 8
79801: PUSH
79802: LD_VAR 0 7
79806: PPUSH
79807: CALL_OW 313
79811: ADD
79812: ST_TO_ADDR
// end ;
79813: GO 79762
79815: POP
79816: POP
// if not sci then
79817: LD_VAR 0 8
79821: NOT
79822: IFFALSE 79826
// continue ;
79824: GO 78871
// for x in sci do
79826: LD_ADDR_VAR 0 7
79830: PUSH
79831: LD_VAR 0 8
79835: PUSH
79836: FOR_IN
79837: IFFALSE 79887
// if IsInUnit ( x ) and not HasTask ( x ) then
79839: LD_VAR 0 7
79843: PPUSH
79844: CALL_OW 310
79848: PUSH
79849: LD_VAR 0 7
79853: PPUSH
79854: CALL_OW 314
79858: NOT
79859: AND
79860: IFFALSE 79885
// begin ComExitBuilding ( x ) ;
79862: LD_VAR 0 7
79866: PPUSH
79867: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
79871: LD_VAR 0 7
79875: PPUSH
79876: LD_VAR 0 3
79880: PPUSH
79881: CALL_OW 180
// end ;
79885: GO 79836
79887: POP
79888: POP
// end ; end ;
79889: GO 78871
79891: POP
79892: POP
// end ;
79893: GO 78825
79895: POP
79896: POP
// end ;
79897: LD_VAR 0 1
79901: RET
// export function MC_MinesTrigger ( ) ; var i ; begin
79902: LD_INT 0
79904: PPUSH
79905: PPUSH
// if not mc_bases then
79906: LD_EXP 36
79910: NOT
79911: IFFALSE 79915
// exit ;
79913: GO 79996
// for i = 1 to mc_bases do
79915: LD_ADDR_VAR 0 2
79919: PUSH
79920: DOUBLE
79921: LD_INT 1
79923: DEC
79924: ST_TO_ADDR
79925: LD_EXP 36
79929: PUSH
79930: FOR_TO
79931: IFFALSE 79994
// if mc_mines [ i ] and mc_miners [ i ] then
79933: LD_EXP 49
79937: PUSH
79938: LD_VAR 0 2
79942: ARRAY
79943: PUSH
79944: LD_EXP 50
79948: PUSH
79949: LD_VAR 0 2
79953: ARRAY
79954: AND
79955: IFFALSE 79992
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
79957: LD_EXP 50
79961: PUSH
79962: LD_VAR 0 2
79966: ARRAY
79967: PUSH
79968: LD_INT 1
79970: ARRAY
79971: PPUSH
79972: CALL_OW 255
79976: PPUSH
79977: LD_EXP 49
79981: PUSH
79982: LD_VAR 0 2
79986: ARRAY
79987: PPUSH
79988: CALL 23475 0 2
79992: GO 79930
79994: POP
79995: POP
// end ;
79996: LD_VAR 0 1
80000: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
80001: LD_INT 0
80003: PPUSH
80004: PPUSH
80005: PPUSH
80006: PPUSH
80007: PPUSH
80008: PPUSH
80009: PPUSH
80010: PPUSH
// if not mc_bases or not mc_parking then
80011: LD_EXP 36
80015: NOT
80016: PUSH
80017: LD_EXP 60
80021: NOT
80022: OR
80023: IFFALSE 80027
// exit ;
80025: GO 80726
// for i = 1 to mc_bases do
80027: LD_ADDR_VAR 0 2
80031: PUSH
80032: DOUBLE
80033: LD_INT 1
80035: DEC
80036: ST_TO_ADDR
80037: LD_EXP 36
80041: PUSH
80042: FOR_TO
80043: IFFALSE 80724
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
80045: LD_EXP 36
80049: PUSH
80050: LD_VAR 0 2
80054: ARRAY
80055: NOT
80056: PUSH
80057: LD_EXP 60
80061: PUSH
80062: LD_VAR 0 2
80066: ARRAY
80067: NOT
80068: OR
80069: IFFALSE 80073
// continue ;
80071: GO 80042
// side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
80073: LD_ADDR_VAR 0 5
80077: PUSH
80078: LD_EXP 36
80082: PUSH
80083: LD_VAR 0 2
80087: ARRAY
80088: PUSH
80089: LD_INT 1
80091: ARRAY
80092: PPUSH
80093: CALL_OW 255
80097: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
80098: LD_ADDR_VAR 0 6
80102: PUSH
80103: LD_EXP 36
80107: PUSH
80108: LD_VAR 0 2
80112: ARRAY
80113: PPUSH
80114: LD_INT 30
80116: PUSH
80117: LD_INT 3
80119: PUSH
80120: EMPTY
80121: LIST
80122: LIST
80123: PPUSH
80124: CALL_OW 72
80128: ST_TO_ADDR
// if not fac then
80129: LD_VAR 0 6
80133: NOT
80134: IFFALSE 80185
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
80136: LD_ADDR_VAR 0 6
80140: PUSH
80141: LD_EXP 36
80145: PUSH
80146: LD_VAR 0 2
80150: ARRAY
80151: PPUSH
80152: LD_INT 2
80154: PUSH
80155: LD_INT 30
80157: PUSH
80158: LD_INT 0
80160: PUSH
80161: EMPTY
80162: LIST
80163: LIST
80164: PUSH
80165: LD_INT 30
80167: PUSH
80168: LD_INT 1
80170: PUSH
80171: EMPTY
80172: LIST
80173: LIST
80174: PUSH
80175: EMPTY
80176: LIST
80177: LIST
80178: LIST
80179: PPUSH
80180: CALL_OW 72
80184: ST_TO_ADDR
// if not fac then
80185: LD_VAR 0 6
80189: NOT
80190: IFFALSE 80194
// continue ;
80192: GO 80042
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
80194: LD_ADDR_VAR 0 7
80198: PUSH
80199: LD_EXP 60
80203: PUSH
80204: LD_VAR 0 2
80208: ARRAY
80209: PPUSH
80210: LD_INT 22
80212: PUSH
80213: LD_VAR 0 5
80217: PUSH
80218: EMPTY
80219: LIST
80220: LIST
80221: PUSH
80222: LD_INT 21
80224: PUSH
80225: LD_INT 2
80227: PUSH
80228: EMPTY
80229: LIST
80230: LIST
80231: PUSH
80232: LD_INT 3
80234: PUSH
80235: LD_INT 24
80237: PUSH
80238: LD_INT 1000
80240: PUSH
80241: EMPTY
80242: LIST
80243: LIST
80244: PUSH
80245: EMPTY
80246: LIST
80247: LIST
80248: PUSH
80249: EMPTY
80250: LIST
80251: LIST
80252: LIST
80253: PPUSH
80254: CALL_OW 70
80258: ST_TO_ADDR
// for j in fac do
80259: LD_ADDR_VAR 0 3
80263: PUSH
80264: LD_VAR 0 6
80268: PUSH
80269: FOR_IN
80270: IFFALSE 80351
// vehs := vehs union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , j , 15 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
80272: LD_ADDR_VAR 0 7
80276: PUSH
80277: LD_VAR 0 7
80281: PUSH
80282: LD_INT 22
80284: PUSH
80285: LD_VAR 0 5
80289: PUSH
80290: EMPTY
80291: LIST
80292: LIST
80293: PUSH
80294: LD_INT 91
80296: PUSH
80297: LD_VAR 0 3
80301: PUSH
80302: LD_INT 15
80304: PUSH
80305: EMPTY
80306: LIST
80307: LIST
80308: LIST
80309: PUSH
80310: LD_INT 21
80312: PUSH
80313: LD_INT 2
80315: PUSH
80316: EMPTY
80317: LIST
80318: LIST
80319: PUSH
80320: LD_INT 3
80322: PUSH
80323: LD_INT 24
80325: PUSH
80326: LD_INT 1000
80328: PUSH
80329: EMPTY
80330: LIST
80331: LIST
80332: PUSH
80333: EMPTY
80334: LIST
80335: LIST
80336: PUSH
80337: EMPTY
80338: LIST
80339: LIST
80340: LIST
80341: LIST
80342: PPUSH
80343: CALL_OW 69
80347: UNION
80348: ST_TO_ADDR
80349: GO 80269
80351: POP
80352: POP
// if not vehs then
80353: LD_VAR 0 7
80357: NOT
80358: IFFALSE 80384
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
80360: LD_ADDR_EXP 48
80364: PUSH
80365: LD_EXP 48
80369: PPUSH
80370: LD_VAR 0 2
80374: PPUSH
80375: EMPTY
80376: PPUSH
80377: CALL_OW 1
80381: ST_TO_ADDR
// continue ;
80382: GO 80042
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
80384: LD_ADDR_VAR 0 8
80388: PUSH
80389: LD_EXP 36
80393: PUSH
80394: LD_VAR 0 2
80398: ARRAY
80399: PPUSH
80400: LD_INT 30
80402: PUSH
80403: LD_INT 3
80405: PUSH
80406: EMPTY
80407: LIST
80408: LIST
80409: PPUSH
80410: CALL_OW 72
80414: ST_TO_ADDR
// if tmp then
80415: LD_VAR 0 8
80419: IFFALSE 80522
// begin for j in tmp do
80421: LD_ADDR_VAR 0 3
80425: PUSH
80426: LD_VAR 0 8
80430: PUSH
80431: FOR_IN
80432: IFFALSE 80520
// for k in UnitsInside ( j ) do
80434: LD_ADDR_VAR 0 4
80438: PUSH
80439: LD_VAR 0 3
80443: PPUSH
80444: CALL_OW 313
80448: PUSH
80449: FOR_IN
80450: IFFALSE 80516
// if k then
80452: LD_VAR 0 4
80456: IFFALSE 80514
// if not k in mc_repair_vehicle [ i ] then
80458: LD_VAR 0 4
80462: PUSH
80463: LD_EXP 48
80467: PUSH
80468: LD_VAR 0 2
80472: ARRAY
80473: IN
80474: NOT
80475: IFFALSE 80514
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
80477: LD_ADDR_EXP 48
80481: PUSH
80482: LD_EXP 48
80486: PPUSH
80487: LD_VAR 0 2
80491: PPUSH
80492: LD_EXP 48
80496: PUSH
80497: LD_VAR 0 2
80501: ARRAY
80502: PUSH
80503: LD_VAR 0 4
80507: UNION
80508: PPUSH
80509: CALL_OW 1
80513: ST_TO_ADDR
80514: GO 80449
80516: POP
80517: POP
80518: GO 80431
80520: POP
80521: POP
// end ; if not mc_repair_vehicle [ i ] then
80522: LD_EXP 48
80526: PUSH
80527: LD_VAR 0 2
80531: ARRAY
80532: NOT
80533: IFFALSE 80537
// continue ;
80535: GO 80042
// for j in mc_repair_vehicle [ i ] do
80537: LD_ADDR_VAR 0 3
80541: PUSH
80542: LD_EXP 48
80546: PUSH
80547: LD_VAR 0 2
80551: ARRAY
80552: PUSH
80553: FOR_IN
80554: IFFALSE 80720
// begin if GetClass ( j ) <> 3 then
80556: LD_VAR 0 3
80560: PPUSH
80561: CALL_OW 257
80565: PUSH
80566: LD_INT 3
80568: NONEQUAL
80569: IFFALSE 80610
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] diff j ) ;
80571: LD_ADDR_EXP 48
80575: PUSH
80576: LD_EXP 48
80580: PPUSH
80581: LD_VAR 0 2
80585: PPUSH
80586: LD_EXP 48
80590: PUSH
80591: LD_VAR 0 2
80595: ARRAY
80596: PUSH
80597: LD_VAR 0 3
80601: DIFF
80602: PPUSH
80603: CALL_OW 1
80607: ST_TO_ADDR
// continue ;
80608: GO 80553
// end ; if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
80610: LD_VAR 0 3
80614: PPUSH
80615: CALL_OW 311
80619: NOT
80620: PUSH
80621: LD_VAR 0 3
80625: PUSH
80626: LD_EXP 39
80630: PUSH
80631: LD_VAR 0 2
80635: ARRAY
80636: PUSH
80637: LD_INT 1
80639: ARRAY
80640: IN
80641: NOT
80642: AND
80643: PUSH
80644: LD_VAR 0 3
80648: PUSH
80649: LD_EXP 39
80653: PUSH
80654: LD_VAR 0 2
80658: ARRAY
80659: PUSH
80660: LD_INT 2
80662: ARRAY
80663: IN
80664: NOT
80665: AND
80666: IFFALSE 80718
// begin if IsInUnit ( j ) then
80668: LD_VAR 0 3
80672: PPUSH
80673: CALL_OW 310
80677: IFFALSE 80688
// ComExitBuilding ( j ) ;
80679: LD_VAR 0 3
80683: PPUSH
80684: CALL_OW 122
// if not HasTask ( j ) then
80688: LD_VAR 0 3
80692: PPUSH
80693: CALL_OW 314
80697: NOT
80698: IFFALSE 80718
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
80700: LD_VAR 0 3
80704: PPUSH
80705: LD_VAR 0 7
80709: PUSH
80710: LD_INT 1
80712: ARRAY
80713: PPUSH
80714: CALL_OW 189
// end ; end ;
80718: GO 80553
80720: POP
80721: POP
// end ;
80722: GO 80042
80724: POP
80725: POP
// end ;
80726: LD_VAR 0 1
80730: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
80731: LD_INT 0
80733: PPUSH
80734: PPUSH
80735: PPUSH
80736: PPUSH
80737: PPUSH
80738: PPUSH
80739: PPUSH
80740: PPUSH
80741: PPUSH
80742: PPUSH
80743: PPUSH
// if not mc_bases then
80744: LD_EXP 36
80748: NOT
80749: IFFALSE 80753
// exit ;
80751: GO 81555
// for i = 1 to mc_bases do
80753: LD_ADDR_VAR 0 2
80757: PUSH
80758: DOUBLE
80759: LD_INT 1
80761: DEC
80762: ST_TO_ADDR
80763: LD_EXP 36
80767: PUSH
80768: FOR_TO
80769: IFFALSE 81553
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
80771: LD_EXP 64
80775: PUSH
80776: LD_VAR 0 2
80780: ARRAY
80781: NOT
80782: PUSH
80783: LD_EXP 39
80787: PUSH
80788: LD_VAR 0 2
80792: ARRAY
80793: PUSH
80794: LD_INT 1
80796: ARRAY
80797: OR
80798: PUSH
80799: LD_EXP 39
80803: PUSH
80804: LD_VAR 0 2
80808: ARRAY
80809: PUSH
80810: LD_INT 2
80812: ARRAY
80813: OR
80814: PUSH
80815: LD_EXP 62
80819: PUSH
80820: LD_VAR 0 2
80824: ARRAY
80825: PPUSH
80826: LD_INT 1
80828: PPUSH
80829: CALL_OW 325
80833: NOT
80834: OR
80835: PUSH
80836: LD_EXP 59
80840: PUSH
80841: LD_VAR 0 2
80845: ARRAY
80846: OR
80847: IFFALSE 80851
// continue ;
80849: GO 80768
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
80851: LD_ADDR_VAR 0 8
80855: PUSH
80856: LD_EXP 36
80860: PUSH
80861: LD_VAR 0 2
80865: ARRAY
80866: PPUSH
80867: LD_INT 25
80869: PUSH
80870: LD_INT 4
80872: PUSH
80873: EMPTY
80874: LIST
80875: LIST
80876: PUSH
80877: LD_INT 50
80879: PUSH
80880: EMPTY
80881: LIST
80882: PUSH
80883: LD_INT 3
80885: PUSH
80886: LD_INT 60
80888: PUSH
80889: EMPTY
80890: LIST
80891: PUSH
80892: EMPTY
80893: LIST
80894: LIST
80895: PUSH
80896: EMPTY
80897: LIST
80898: LIST
80899: LIST
80900: PPUSH
80901: CALL_OW 72
80905: PUSH
80906: LD_EXP 40
80910: PUSH
80911: LD_VAR 0 2
80915: ARRAY
80916: DIFF
80917: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
80918: LD_ADDR_VAR 0 9
80922: PUSH
80923: LD_EXP 36
80927: PUSH
80928: LD_VAR 0 2
80932: ARRAY
80933: PPUSH
80934: LD_INT 2
80936: PUSH
80937: LD_INT 30
80939: PUSH
80940: LD_INT 0
80942: PUSH
80943: EMPTY
80944: LIST
80945: LIST
80946: PUSH
80947: LD_INT 30
80949: PUSH
80950: LD_INT 1
80952: PUSH
80953: EMPTY
80954: LIST
80955: LIST
80956: PUSH
80957: EMPTY
80958: LIST
80959: LIST
80960: LIST
80961: PPUSH
80962: CALL_OW 72
80966: ST_TO_ADDR
// if not tmp or not dep then
80967: LD_VAR 0 8
80971: NOT
80972: PUSH
80973: LD_VAR 0 9
80977: NOT
80978: OR
80979: IFFALSE 80983
// continue ;
80981: GO 80768
// side := GetSide ( tmp [ 1 ] ) ;
80983: LD_ADDR_VAR 0 11
80987: PUSH
80988: LD_VAR 0 8
80992: PUSH
80993: LD_INT 1
80995: ARRAY
80996: PPUSH
80997: CALL_OW 255
81001: ST_TO_ADDR
// dep := dep [ 1 ] ;
81002: LD_ADDR_VAR 0 9
81006: PUSH
81007: LD_VAR 0 9
81011: PUSH
81012: LD_INT 1
81014: ARRAY
81015: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
81016: LD_ADDR_VAR 0 7
81020: PUSH
81021: LD_EXP 64
81025: PUSH
81026: LD_VAR 0 2
81030: ARRAY
81031: PPUSH
81032: LD_INT 22
81034: PUSH
81035: LD_INT 0
81037: PUSH
81038: EMPTY
81039: LIST
81040: LIST
81041: PUSH
81042: LD_INT 25
81044: PUSH
81045: LD_INT 12
81047: PUSH
81048: EMPTY
81049: LIST
81050: LIST
81051: PUSH
81052: EMPTY
81053: LIST
81054: LIST
81055: PPUSH
81056: CALL_OW 70
81060: PUSH
81061: LD_INT 22
81063: PUSH
81064: LD_INT 0
81066: PUSH
81067: EMPTY
81068: LIST
81069: LIST
81070: PUSH
81071: LD_INT 25
81073: PUSH
81074: LD_INT 12
81076: PUSH
81077: EMPTY
81078: LIST
81079: LIST
81080: PUSH
81081: LD_INT 91
81083: PUSH
81084: LD_VAR 0 9
81088: PUSH
81089: LD_INT 20
81091: PUSH
81092: EMPTY
81093: LIST
81094: LIST
81095: LIST
81096: PUSH
81097: EMPTY
81098: LIST
81099: LIST
81100: LIST
81101: PPUSH
81102: CALL_OW 69
81106: UNION
81107: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
81108: LD_ADDR_VAR 0 10
81112: PUSH
81113: LD_EXP 64
81117: PUSH
81118: LD_VAR 0 2
81122: ARRAY
81123: PPUSH
81124: LD_INT 81
81126: PUSH
81127: LD_VAR 0 11
81131: PUSH
81132: EMPTY
81133: LIST
81134: LIST
81135: PPUSH
81136: CALL_OW 70
81140: ST_TO_ADDR
// if not apes or danger_at_area then
81141: LD_VAR 0 7
81145: NOT
81146: PUSH
81147: LD_VAR 0 10
81151: OR
81152: IFFALSE 81202
// begin if mc_taming [ i ] then
81154: LD_EXP 67
81158: PUSH
81159: LD_VAR 0 2
81163: ARRAY
81164: IFFALSE 81200
// begin MC_Reset ( i , 121 ) ;
81166: LD_VAR 0 2
81170: PPUSH
81171: LD_INT 121
81173: PPUSH
81174: CALL 66533 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
81178: LD_ADDR_EXP 67
81182: PUSH
81183: LD_EXP 67
81187: PPUSH
81188: LD_VAR 0 2
81192: PPUSH
81193: EMPTY
81194: PPUSH
81195: CALL_OW 1
81199: ST_TO_ADDR
// end ; continue ;
81200: GO 80768
// end ; for j in tmp do
81202: LD_ADDR_VAR 0 3
81206: PUSH
81207: LD_VAR 0 8
81211: PUSH
81212: FOR_IN
81213: IFFALSE 81549
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
81215: LD_VAR 0 3
81219: PUSH
81220: LD_EXP 67
81224: PUSH
81225: LD_VAR 0 2
81229: ARRAY
81230: IN
81231: NOT
81232: PUSH
81233: LD_EXP 67
81237: PUSH
81238: LD_VAR 0 2
81242: ARRAY
81243: PUSH
81244: LD_INT 3
81246: LESS
81247: AND
81248: IFFALSE 81306
// begin SetTag ( j , 121 ) ;
81250: LD_VAR 0 3
81254: PPUSH
81255: LD_INT 121
81257: PPUSH
81258: CALL_OW 109
// mc_taming := ReplaceIn ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
81262: LD_ADDR_EXP 67
81266: PUSH
81267: LD_EXP 67
81271: PPUSH
81272: LD_VAR 0 2
81276: PUSH
81277: LD_EXP 67
81281: PUSH
81282: LD_VAR 0 2
81286: ARRAY
81287: PUSH
81288: LD_INT 1
81290: PLUS
81291: PUSH
81292: EMPTY
81293: LIST
81294: LIST
81295: PPUSH
81296: LD_VAR 0 3
81300: PPUSH
81301: CALL 26486 0 3
81305: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
81306: LD_VAR 0 3
81310: PUSH
81311: LD_EXP 67
81315: PUSH
81316: LD_VAR 0 2
81320: ARRAY
81321: IN
81322: IFFALSE 81547
// begin if GetClass ( j ) <> 4 then
81324: LD_VAR 0 3
81328: PPUSH
81329: CALL_OW 257
81333: PUSH
81334: LD_INT 4
81336: NONEQUAL
81337: IFFALSE 81390
// begin mc_taming := Replace ( mc_taming , i , mc_taming [ i ] diff j ) ;
81339: LD_ADDR_EXP 67
81343: PUSH
81344: LD_EXP 67
81348: PPUSH
81349: LD_VAR 0 2
81353: PPUSH
81354: LD_EXP 67
81358: PUSH
81359: LD_VAR 0 2
81363: ARRAY
81364: PUSH
81365: LD_VAR 0 3
81369: DIFF
81370: PPUSH
81371: CALL_OW 1
81375: ST_TO_ADDR
// SetTag ( j , 0 ) ;
81376: LD_VAR 0 3
81380: PPUSH
81381: LD_INT 0
81383: PPUSH
81384: CALL_OW 109
// continue ;
81388: GO 81212
// end ; if IsInUnit ( j ) then
81390: LD_VAR 0 3
81394: PPUSH
81395: CALL_OW 310
81399: IFFALSE 81410
// ComExitBuilding ( j ) ;
81401: LD_VAR 0 3
81405: PPUSH
81406: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
81410: LD_ADDR_VAR 0 6
81414: PUSH
81415: LD_VAR 0 7
81419: PPUSH
81420: LD_VAR 0 3
81424: PPUSH
81425: CALL_OW 74
81429: ST_TO_ADDR
// if not ape then
81430: LD_VAR 0 6
81434: NOT
81435: IFFALSE 81439
// break ;
81437: GO 81549
// x := GetX ( ape ) ;
81439: LD_ADDR_VAR 0 4
81443: PUSH
81444: LD_VAR 0 6
81448: PPUSH
81449: CALL_OW 250
81453: ST_TO_ADDR
// y := GetY ( ape ) ;
81454: LD_ADDR_VAR 0 5
81458: PUSH
81459: LD_VAR 0 6
81463: PPUSH
81464: CALL_OW 251
81468: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
81469: LD_VAR 0 4
81473: PPUSH
81474: LD_VAR 0 5
81478: PPUSH
81479: CALL_OW 488
81483: NOT
81484: PUSH
81485: LD_VAR 0 11
81489: PPUSH
81490: LD_VAR 0 4
81494: PPUSH
81495: LD_VAR 0 5
81499: PPUSH
81500: LD_INT 20
81502: PPUSH
81503: CALL 27382 0 4
81507: PUSH
81508: LD_INT 4
81510: ARRAY
81511: OR
81512: IFFALSE 81516
// break ;
81514: GO 81549
// if not HasTask ( j ) then
81516: LD_VAR 0 3
81520: PPUSH
81521: CALL_OW 314
81525: NOT
81526: IFFALSE 81547
// ComTameXY ( j , x , y ) ;
81528: LD_VAR 0 3
81532: PPUSH
81533: LD_VAR 0 4
81537: PPUSH
81538: LD_VAR 0 5
81542: PPUSH
81543: CALL_OW 131
// end ; end ;
81547: GO 81212
81549: POP
81550: POP
// end ;
81551: GO 80768
81553: POP
81554: POP
// end ;
81555: LD_VAR 0 1
81559: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
81560: LD_INT 0
81562: PPUSH
81563: PPUSH
81564: PPUSH
81565: PPUSH
81566: PPUSH
81567: PPUSH
81568: PPUSH
81569: PPUSH
// if not mc_bases then
81570: LD_EXP 36
81574: NOT
81575: IFFALSE 81579
// exit ;
81577: GO 82205
// for i = 1 to mc_bases do
81579: LD_ADDR_VAR 0 2
81583: PUSH
81584: DOUBLE
81585: LD_INT 1
81587: DEC
81588: ST_TO_ADDR
81589: LD_EXP 36
81593: PUSH
81594: FOR_TO
81595: IFFALSE 82203
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
81597: LD_EXP 65
81601: PUSH
81602: LD_VAR 0 2
81606: ARRAY
81607: NOT
81608: PUSH
81609: LD_EXP 65
81613: PUSH
81614: LD_VAR 0 2
81618: ARRAY
81619: PPUSH
81620: LD_INT 25
81622: PUSH
81623: LD_INT 12
81625: PUSH
81626: EMPTY
81627: LIST
81628: LIST
81629: PPUSH
81630: CALL_OW 72
81634: NOT
81635: OR
81636: IFFALSE 81640
// continue ;
81638: GO 81594
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
81640: LD_ADDR_VAR 0 5
81644: PUSH
81645: LD_EXP 65
81649: PUSH
81650: LD_VAR 0 2
81654: ARRAY
81655: PUSH
81656: LD_INT 1
81658: ARRAY
81659: PPUSH
81660: CALL_OW 255
81664: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
81665: LD_VAR 0 5
81669: PPUSH
81670: LD_INT 2
81672: PPUSH
81673: CALL_OW 325
81677: IFFALSE 81930
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
81679: LD_ADDR_VAR 0 4
81683: PUSH
81684: LD_EXP 65
81688: PUSH
81689: LD_VAR 0 2
81693: ARRAY
81694: PPUSH
81695: LD_INT 25
81697: PUSH
81698: LD_INT 16
81700: PUSH
81701: EMPTY
81702: LIST
81703: LIST
81704: PPUSH
81705: CALL_OW 72
81709: ST_TO_ADDR
// if tmp < 6 then
81710: LD_VAR 0 4
81714: PUSH
81715: LD_INT 6
81717: LESS
81718: IFFALSE 81930
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
81720: LD_ADDR_VAR 0 6
81724: PUSH
81725: LD_EXP 36
81729: PUSH
81730: LD_VAR 0 2
81734: ARRAY
81735: PPUSH
81736: LD_INT 2
81738: PUSH
81739: LD_INT 30
81741: PUSH
81742: LD_INT 0
81744: PUSH
81745: EMPTY
81746: LIST
81747: LIST
81748: PUSH
81749: LD_INT 30
81751: PUSH
81752: LD_INT 1
81754: PUSH
81755: EMPTY
81756: LIST
81757: LIST
81758: PUSH
81759: EMPTY
81760: LIST
81761: LIST
81762: LIST
81763: PPUSH
81764: CALL_OW 72
81768: ST_TO_ADDR
// if depot then
81769: LD_VAR 0 6
81773: IFFALSE 81930
// begin selected := 0 ;
81775: LD_ADDR_VAR 0 7
81779: PUSH
81780: LD_INT 0
81782: ST_TO_ADDR
// for j in depot do
81783: LD_ADDR_VAR 0 3
81787: PUSH
81788: LD_VAR 0 6
81792: PUSH
81793: FOR_IN
81794: IFFALSE 81825
// begin if UnitsInside ( j ) < 6 then
81796: LD_VAR 0 3
81800: PPUSH
81801: CALL_OW 313
81805: PUSH
81806: LD_INT 6
81808: LESS
81809: IFFALSE 81823
// begin selected := j ;
81811: LD_ADDR_VAR 0 7
81815: PUSH
81816: LD_VAR 0 3
81820: ST_TO_ADDR
// break ;
81821: GO 81825
// end ; end ;
81823: GO 81793
81825: POP
81826: POP
// if selected then
81827: LD_VAR 0 7
81831: IFFALSE 81930
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
81833: LD_ADDR_VAR 0 3
81837: PUSH
81838: LD_EXP 65
81842: PUSH
81843: LD_VAR 0 2
81847: ARRAY
81848: PPUSH
81849: LD_INT 25
81851: PUSH
81852: LD_INT 12
81854: PUSH
81855: EMPTY
81856: LIST
81857: LIST
81858: PPUSH
81859: CALL_OW 72
81863: PUSH
81864: FOR_IN
81865: IFFALSE 81928
// if not HasTask ( j ) then
81867: LD_VAR 0 3
81871: PPUSH
81872: CALL_OW 314
81876: NOT
81877: IFFALSE 81926
// begin if not IsInUnit ( j ) then
81879: LD_VAR 0 3
81883: PPUSH
81884: CALL_OW 310
81888: NOT
81889: IFFALSE 81905
// ComEnterUnit ( j , selected ) ;
81891: LD_VAR 0 3
81895: PPUSH
81896: LD_VAR 0 7
81900: PPUSH
81901: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
81905: LD_VAR 0 3
81909: PPUSH
81910: LD_INT 16
81912: PPUSH
81913: CALL_OW 183
// AddComExitBuilding ( j ) ;
81917: LD_VAR 0 3
81921: PPUSH
81922: CALL_OW 182
// end ;
81926: GO 81864
81928: POP
81929: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
81930: LD_VAR 0 5
81934: PPUSH
81935: LD_INT 11
81937: PPUSH
81938: CALL_OW 325
81942: IFFALSE 82201
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
81944: LD_ADDR_VAR 0 4
81948: PUSH
81949: LD_EXP 65
81953: PUSH
81954: LD_VAR 0 2
81958: ARRAY
81959: PPUSH
81960: LD_INT 25
81962: PUSH
81963: LD_INT 16
81965: PUSH
81966: EMPTY
81967: LIST
81968: LIST
81969: PPUSH
81970: CALL_OW 72
81974: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
81975: LD_VAR 0 4
81979: PUSH
81980: LD_INT 6
81982: GREATEREQUAL
81983: PUSH
81984: LD_VAR 0 5
81988: PPUSH
81989: LD_INT 2
81991: PPUSH
81992: CALL_OW 325
81996: NOT
81997: OR
81998: IFFALSE 82201
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
82000: LD_ADDR_VAR 0 8
82004: PUSH
82005: LD_EXP 36
82009: PUSH
82010: LD_VAR 0 2
82014: ARRAY
82015: PPUSH
82016: LD_INT 2
82018: PUSH
82019: LD_INT 30
82021: PUSH
82022: LD_INT 4
82024: PUSH
82025: EMPTY
82026: LIST
82027: LIST
82028: PUSH
82029: LD_INT 30
82031: PUSH
82032: LD_INT 5
82034: PUSH
82035: EMPTY
82036: LIST
82037: LIST
82038: PUSH
82039: EMPTY
82040: LIST
82041: LIST
82042: LIST
82043: PPUSH
82044: CALL_OW 72
82048: ST_TO_ADDR
// if barracks then
82049: LD_VAR 0 8
82053: IFFALSE 82201
// begin selected := 0 ;
82055: LD_ADDR_VAR 0 7
82059: PUSH
82060: LD_INT 0
82062: ST_TO_ADDR
// for j in barracks do
82063: LD_ADDR_VAR 0 3
82067: PUSH
82068: LD_VAR 0 8
82072: PUSH
82073: FOR_IN
82074: IFFALSE 82105
// begin if UnitsInside ( j ) < 6 then
82076: LD_VAR 0 3
82080: PPUSH
82081: CALL_OW 313
82085: PUSH
82086: LD_INT 6
82088: LESS
82089: IFFALSE 82103
// begin selected := j ;
82091: LD_ADDR_VAR 0 7
82095: PUSH
82096: LD_VAR 0 3
82100: ST_TO_ADDR
// break ;
82101: GO 82105
// end ; end ;
82103: GO 82073
82105: POP
82106: POP
// if selected then
82107: LD_VAR 0 7
82111: IFFALSE 82201
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
82113: LD_ADDR_VAR 0 3
82117: PUSH
82118: LD_EXP 65
82122: PUSH
82123: LD_VAR 0 2
82127: ARRAY
82128: PPUSH
82129: LD_INT 25
82131: PUSH
82132: LD_INT 12
82134: PUSH
82135: EMPTY
82136: LIST
82137: LIST
82138: PPUSH
82139: CALL_OW 72
82143: PUSH
82144: FOR_IN
82145: IFFALSE 82199
// if not IsInUnit ( j ) and not HasTask ( j ) then
82147: LD_VAR 0 3
82151: PPUSH
82152: CALL_OW 310
82156: NOT
82157: PUSH
82158: LD_VAR 0 3
82162: PPUSH
82163: CALL_OW 314
82167: NOT
82168: AND
82169: IFFALSE 82197
// begin ComEnterUnit ( j , selected ) ;
82171: LD_VAR 0 3
82175: PPUSH
82176: LD_VAR 0 7
82180: PPUSH
82181: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
82185: LD_VAR 0 3
82189: PPUSH
82190: LD_INT 15
82192: PPUSH
82193: CALL_OW 183
// end ;
82197: GO 82144
82199: POP
82200: POP
// end ; end ; end ; end ; end ;
82201: GO 81594
82203: POP
82204: POP
// end ;
82205: LD_VAR 0 1
82209: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
82210: LD_INT 0
82212: PPUSH
82213: PPUSH
82214: PPUSH
82215: PPUSH
// if not mc_bases then
82216: LD_EXP 36
82220: NOT
82221: IFFALSE 82225
// exit ;
82223: GO 82403
// for i = 1 to mc_bases do
82225: LD_ADDR_VAR 0 2
82229: PUSH
82230: DOUBLE
82231: LD_INT 1
82233: DEC
82234: ST_TO_ADDR
82235: LD_EXP 36
82239: PUSH
82240: FOR_TO
82241: IFFALSE 82401
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
82243: LD_ADDR_VAR 0 4
82247: PUSH
82248: LD_EXP 36
82252: PUSH
82253: LD_VAR 0 2
82257: ARRAY
82258: PPUSH
82259: LD_INT 25
82261: PUSH
82262: LD_INT 9
82264: PUSH
82265: EMPTY
82266: LIST
82267: LIST
82268: PPUSH
82269: CALL_OW 72
82273: ST_TO_ADDR
// if not tmp then
82274: LD_VAR 0 4
82278: NOT
82279: IFFALSE 82283
// continue ;
82281: GO 82240
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
82283: LD_EXP 62
82287: PUSH
82288: LD_VAR 0 2
82292: ARRAY
82293: PPUSH
82294: LD_INT 29
82296: PPUSH
82297: CALL_OW 325
82301: NOT
82302: PUSH
82303: LD_EXP 62
82307: PUSH
82308: LD_VAR 0 2
82312: ARRAY
82313: PPUSH
82314: LD_INT 28
82316: PPUSH
82317: CALL_OW 325
82321: NOT
82322: AND
82323: IFFALSE 82327
// continue ;
82325: GO 82240
// for j in tmp do
82327: LD_ADDR_VAR 0 3
82331: PUSH
82332: LD_VAR 0 4
82336: PUSH
82337: FOR_IN
82338: IFFALSE 82397
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
82340: LD_VAR 0 3
82344: PUSH
82345: LD_EXP 39
82349: PUSH
82350: LD_VAR 0 2
82354: ARRAY
82355: PUSH
82356: LD_INT 1
82358: ARRAY
82359: IN
82360: NOT
82361: PUSH
82362: LD_VAR 0 3
82366: PUSH
82367: LD_EXP 39
82371: PUSH
82372: LD_VAR 0 2
82376: ARRAY
82377: PUSH
82378: LD_INT 2
82380: ARRAY
82381: IN
82382: NOT
82383: AND
82384: IFFALSE 82395
// ComSpaceTimeShoot ( j ) ;
82386: LD_VAR 0 3
82390: PPUSH
82391: CALL 20161 0 1
82395: GO 82337
82397: POP
82398: POP
// end ;
82399: GO 82240
82401: POP
82402: POP
// end ;
82403: LD_VAR 0 1
82407: RET
// export function MC_TeleportExit ( ) ; var i , j , x , y , save_point , tmp , teleports , sci ; begin
82408: LD_INT 0
82410: PPUSH
82411: PPUSH
82412: PPUSH
82413: PPUSH
82414: PPUSH
82415: PPUSH
82416: PPUSH
82417: PPUSH
82418: PPUSH
// if not mc_bases then
82419: LD_EXP 36
82423: NOT
82424: IFFALSE 82428
// exit ;
82426: GO 83050
// for i = 1 to mc_bases do
82428: LD_ADDR_VAR 0 2
82432: PUSH
82433: DOUBLE
82434: LD_INT 1
82436: DEC
82437: ST_TO_ADDR
82438: LD_EXP 36
82442: PUSH
82443: FOR_TO
82444: IFFALSE 83048
// begin if not mc_teleport_exit [ i ] or GetTech ( tech_targTeleport , mc_sides [ i ] ) <> state_researched then
82446: LD_EXP 71
82450: PUSH
82451: LD_VAR 0 2
82455: ARRAY
82456: NOT
82457: PUSH
82458: LD_INT 38
82460: PPUSH
82461: LD_EXP 62
82465: PUSH
82466: LD_VAR 0 2
82470: ARRAY
82471: PPUSH
82472: CALL_OW 321
82476: PUSH
82477: LD_INT 2
82479: NONEQUAL
82480: OR
82481: IFFALSE 82485
// continue ;
82483: GO 82443
// teleports := UnitFilter ( mc_bases [ i ] , [ f_btype , b_teleport ] ) ;
82485: LD_ADDR_VAR 0 8
82489: PUSH
82490: LD_EXP 36
82494: PUSH
82495: LD_VAR 0 2
82499: ARRAY
82500: PPUSH
82501: LD_INT 30
82503: PUSH
82504: LD_INT 34
82506: PUSH
82507: EMPTY
82508: LIST
82509: LIST
82510: PPUSH
82511: CALL_OW 72
82515: ST_TO_ADDR
// sci := FilterByTag ( UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) , 0 ) ;
82516: LD_ADDR_VAR 0 9
82520: PUSH
82521: LD_EXP 36
82525: PUSH
82526: LD_VAR 0 2
82530: ARRAY
82531: PPUSH
82532: LD_INT 25
82534: PUSH
82535: LD_INT 4
82537: PUSH
82538: EMPTY
82539: LIST
82540: LIST
82541: PPUSH
82542: CALL_OW 72
82546: PPUSH
82547: LD_INT 0
82549: PPUSH
82550: CALL 59746 0 2
82554: ST_TO_ADDR
// if not sci or not teleports or FilterByTag ( mc_bases [ i ] , 124 ) then
82555: LD_VAR 0 9
82559: NOT
82560: PUSH
82561: LD_VAR 0 8
82565: NOT
82566: OR
82567: PUSH
82568: LD_EXP 36
82572: PUSH
82573: LD_VAR 0 2
82577: ARRAY
82578: PPUSH
82579: LD_INT 124
82581: PPUSH
82582: CALL 59746 0 2
82586: OR
82587: IFFALSE 82591
// continue ;
82589: GO 82443
// if mc_teleport_exit_set [ i ] < mc_teleport_exit [ i ] and mc_teleport_exit_set [ i ] < teleports then
82591: LD_EXP 72
82595: PUSH
82596: LD_VAR 0 2
82600: ARRAY
82601: PUSH
82602: LD_EXP 71
82606: PUSH
82607: LD_VAR 0 2
82611: ARRAY
82612: LESS
82613: PUSH
82614: LD_EXP 72
82618: PUSH
82619: LD_VAR 0 2
82623: ARRAY
82624: PUSH
82625: LD_VAR 0 8
82629: LESS
82630: AND
82631: IFFALSE 83046
// begin tmp := sci [ 1 ] ;
82633: LD_ADDR_VAR 0 7
82637: PUSH
82638: LD_VAR 0 9
82642: PUSH
82643: LD_INT 1
82645: ARRAY
82646: ST_TO_ADDR
// SetTag ( tmp , 124 ) ;
82647: LD_VAR 0 7
82651: PPUSH
82652: LD_INT 124
82654: PPUSH
82655: CALL_OW 109
// for j = mc_teleport_exit [ i ] downto mc_teleport_exit [ i ] do
82659: LD_ADDR_VAR 0 3
82663: PUSH
82664: DOUBLE
82665: LD_EXP 71
82669: PUSH
82670: LD_VAR 0 2
82674: ARRAY
82675: INC
82676: ST_TO_ADDR
82677: LD_EXP 71
82681: PUSH
82682: LD_VAR 0 2
82686: ARRAY
82687: PUSH
82688: FOR_DOWNTO
82689: IFFALSE 83032
// begin if IsInUnit ( tmp ) then
82691: LD_VAR 0 7
82695: PPUSH
82696: CALL_OW 310
82700: IFFALSE 82711
// ComExitBuilding ( tmp ) ;
82702: LD_VAR 0 7
82706: PPUSH
82707: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
82711: LD_INT 35
82713: PPUSH
82714: CALL_OW 67
// until not IsInUnit ( tmp ) and not HasTask ( tmp ) ;
82718: LD_VAR 0 7
82722: PPUSH
82723: CALL_OW 310
82727: NOT
82728: PUSH
82729: LD_VAR 0 7
82733: PPUSH
82734: CALL_OW 314
82738: NOT
82739: AND
82740: IFFALSE 82711
// save_point := [ GetX ( tmp ) , GetY ( tmp ) ] ;
82742: LD_ADDR_VAR 0 6
82746: PUSH
82747: LD_VAR 0 7
82751: PPUSH
82752: CALL_OW 250
82756: PUSH
82757: LD_VAR 0 7
82761: PPUSH
82762: CALL_OW 251
82766: PUSH
82767: EMPTY
82768: LIST
82769: LIST
82770: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
82771: LD_INT 35
82773: PPUSH
82774: CALL_OW 67
// x := mc_teleport_exit [ i ] [ j ] [ 1 ] ;
82778: LD_ADDR_VAR 0 4
82782: PUSH
82783: LD_EXP 71
82787: PUSH
82788: LD_VAR 0 2
82792: ARRAY
82793: PUSH
82794: LD_VAR 0 3
82798: ARRAY
82799: PUSH
82800: LD_INT 1
82802: ARRAY
82803: ST_TO_ADDR
// y := mc_teleport_exit [ i ] [ j ] [ 2 ] ;
82804: LD_ADDR_VAR 0 5
82808: PUSH
82809: LD_EXP 71
82813: PUSH
82814: LD_VAR 0 2
82818: ARRAY
82819: PUSH
82820: LD_VAR 0 3
82824: ARRAY
82825: PUSH
82826: LD_INT 2
82828: ARRAY
82829: ST_TO_ADDR
// if DangerAtRange ( tmp , 10 ) [ 4 ] then
82830: LD_VAR 0 7
82834: PPUSH
82835: LD_INT 10
82837: PPUSH
82838: CALL 29079 0 2
82842: PUSH
82843: LD_INT 4
82845: ARRAY
82846: IFFALSE 82884
// begin ComMoveXY ( tmp , save_point [ 1 ] , save_point [ 2 ] ) ;
82848: LD_VAR 0 7
82852: PPUSH
82853: LD_VAR 0 6
82857: PUSH
82858: LD_INT 1
82860: ARRAY
82861: PPUSH
82862: LD_VAR 0 6
82866: PUSH
82867: LD_INT 2
82869: ARRAY
82870: PPUSH
82871: CALL_OW 111
// wait ( 0 0$10 ) ;
82875: LD_INT 350
82877: PPUSH
82878: CALL_OW 67
// end else
82882: GO 82910
// begin ComMoveXY ( tmp , x , y ) ;
82884: LD_VAR 0 7
82888: PPUSH
82889: LD_VAR 0 4
82893: PPUSH
82894: LD_VAR 0 5
82898: PPUSH
82899: CALL_OW 111
// wait ( 0 0$3 ) ;
82903: LD_INT 105
82905: PPUSH
82906: CALL_OW 67
// end ; until IsAt ( tmp , x , y ) ;
82910: LD_VAR 0 7
82914: PPUSH
82915: LD_VAR 0 4
82919: PPUSH
82920: LD_VAR 0 5
82924: PPUSH
82925: CALL_OW 307
82929: IFFALSE 82771
// ComTeleportExit ( tmp , x , y , teleports [ j ] ) ;
82931: LD_VAR 0 7
82935: PPUSH
82936: LD_VAR 0 4
82940: PPUSH
82941: LD_VAR 0 5
82945: PPUSH
82946: LD_VAR 0 8
82950: PUSH
82951: LD_VAR 0 3
82955: ARRAY
82956: PPUSH
82957: CALL_OW 156
// repeat wait ( 0 0$1 ) ;
82961: LD_INT 35
82963: PPUSH
82964: CALL_OW 67
// until not HasTask ( tmp ) ;
82968: LD_VAR 0 7
82972: PPUSH
82973: CALL_OW 314
82977: NOT
82978: IFFALSE 82961
// mc_teleport_exit_set := ReplaceIn ( mc_teleport_exit_set , [ i , mc_teleport_exit_set [ i ] + 1 ] , teleports [ j ] ) ;
82980: LD_ADDR_EXP 72
82984: PUSH
82985: LD_EXP 72
82989: PPUSH
82990: LD_VAR 0 2
82994: PUSH
82995: LD_EXP 72
82999: PUSH
83000: LD_VAR 0 2
83004: ARRAY
83005: PUSH
83006: LD_INT 1
83008: PLUS
83009: PUSH
83010: EMPTY
83011: LIST
83012: LIST
83013: PPUSH
83014: LD_VAR 0 8
83018: PUSH
83019: LD_VAR 0 3
83023: ARRAY
83024: PPUSH
83025: CALL 26486 0 3
83029: ST_TO_ADDR
// end ;
83030: GO 82688
83032: POP
83033: POP
// MC_Reset ( i , 124 ) ;
83034: LD_VAR 0 2
83038: PPUSH
83039: LD_INT 124
83041: PPUSH
83042: CALL 66533 0 2
// end ; end ;
83046: GO 82443
83048: POP
83049: POP
// end ;
83050: LD_VAR 0 1
83054: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
83055: LD_INT 0
83057: PPUSH
83058: PPUSH
83059: PPUSH
// if not mc_bases then
83060: LD_EXP 36
83064: NOT
83065: IFFALSE 83069
// exit ;
83067: GO 83675
// for i = 1 to mc_bases do
83069: LD_ADDR_VAR 0 2
83073: PUSH
83074: DOUBLE
83075: LD_INT 1
83077: DEC
83078: ST_TO_ADDR
83079: LD_EXP 36
83083: PUSH
83084: FOR_TO
83085: IFFALSE 83673
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
83087: LD_ADDR_VAR 0 3
83091: PUSH
83092: LD_EXP 36
83096: PUSH
83097: LD_VAR 0 2
83101: ARRAY
83102: PPUSH
83103: LD_INT 25
83105: PUSH
83106: LD_INT 4
83108: PUSH
83109: EMPTY
83110: LIST
83111: LIST
83112: PPUSH
83113: CALL_OW 72
83117: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
83118: LD_VAR 0 3
83122: NOT
83123: PUSH
83124: LD_EXP 73
83128: PUSH
83129: LD_VAR 0 2
83133: ARRAY
83134: NOT
83135: OR
83136: PUSH
83137: LD_EXP 36
83141: PUSH
83142: LD_VAR 0 2
83146: ARRAY
83147: PPUSH
83148: LD_INT 2
83150: PUSH
83151: LD_INT 30
83153: PUSH
83154: LD_INT 0
83156: PUSH
83157: EMPTY
83158: LIST
83159: LIST
83160: PUSH
83161: LD_INT 30
83163: PUSH
83164: LD_INT 1
83166: PUSH
83167: EMPTY
83168: LIST
83169: LIST
83170: PUSH
83171: EMPTY
83172: LIST
83173: LIST
83174: LIST
83175: PPUSH
83176: CALL_OW 72
83180: NOT
83181: OR
83182: IFFALSE 83232
// begin if mc_deposits_finder [ i ] then
83184: LD_EXP 74
83188: PUSH
83189: LD_VAR 0 2
83193: ARRAY
83194: IFFALSE 83230
// begin MC_Reset ( i , 125 ) ;
83196: LD_VAR 0 2
83200: PPUSH
83201: LD_INT 125
83203: PPUSH
83204: CALL 66533 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
83208: LD_ADDR_EXP 74
83212: PUSH
83213: LD_EXP 74
83217: PPUSH
83218: LD_VAR 0 2
83222: PPUSH
83223: EMPTY
83224: PPUSH
83225: CALL_OW 1
83229: ST_TO_ADDR
// end ; continue ;
83230: GO 83084
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
83232: LD_EXP 73
83236: PUSH
83237: LD_VAR 0 2
83241: ARRAY
83242: PUSH
83243: LD_INT 1
83245: ARRAY
83246: PUSH
83247: LD_INT 3
83249: ARRAY
83250: PUSH
83251: LD_INT 1
83253: EQUAL
83254: PUSH
83255: LD_INT 20
83257: PPUSH
83258: LD_EXP 62
83262: PUSH
83263: LD_VAR 0 2
83267: ARRAY
83268: PPUSH
83269: CALL_OW 321
83273: PUSH
83274: LD_INT 2
83276: NONEQUAL
83277: AND
83278: IFFALSE 83328
// begin if mc_deposits_finder [ i ] then
83280: LD_EXP 74
83284: PUSH
83285: LD_VAR 0 2
83289: ARRAY
83290: IFFALSE 83326
// begin MC_Reset ( i , 125 ) ;
83292: LD_VAR 0 2
83296: PPUSH
83297: LD_INT 125
83299: PPUSH
83300: CALL 66533 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
83304: LD_ADDR_EXP 74
83308: PUSH
83309: LD_EXP 74
83313: PPUSH
83314: LD_VAR 0 2
83318: PPUSH
83319: EMPTY
83320: PPUSH
83321: CALL_OW 1
83325: ST_TO_ADDR
// end ; continue ;
83326: GO 83084
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
83328: LD_EXP 73
83332: PUSH
83333: LD_VAR 0 2
83337: ARRAY
83338: PUSH
83339: LD_INT 1
83341: ARRAY
83342: PUSH
83343: LD_INT 1
83345: ARRAY
83346: PPUSH
83347: LD_EXP 73
83351: PUSH
83352: LD_VAR 0 2
83356: ARRAY
83357: PUSH
83358: LD_INT 1
83360: ARRAY
83361: PUSH
83362: LD_INT 2
83364: ARRAY
83365: PPUSH
83366: LD_EXP 62
83370: PUSH
83371: LD_VAR 0 2
83375: ARRAY
83376: PPUSH
83377: CALL_OW 440
83381: IFFALSE 83424
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
83383: LD_ADDR_EXP 73
83387: PUSH
83388: LD_EXP 73
83392: PPUSH
83393: LD_VAR 0 2
83397: PPUSH
83398: LD_EXP 73
83402: PUSH
83403: LD_VAR 0 2
83407: ARRAY
83408: PPUSH
83409: LD_INT 1
83411: PPUSH
83412: CALL_OW 3
83416: PPUSH
83417: CALL_OW 1
83421: ST_TO_ADDR
83422: GO 83671
// begin if not mc_deposits_finder [ i ] then
83424: LD_EXP 74
83428: PUSH
83429: LD_VAR 0 2
83433: ARRAY
83434: NOT
83435: IFFALSE 83487
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
83437: LD_ADDR_EXP 74
83441: PUSH
83442: LD_EXP 74
83446: PPUSH
83447: LD_VAR 0 2
83451: PPUSH
83452: LD_VAR 0 3
83456: PUSH
83457: LD_INT 1
83459: ARRAY
83460: PUSH
83461: EMPTY
83462: LIST
83463: PPUSH
83464: CALL_OW 1
83468: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
83469: LD_VAR 0 3
83473: PUSH
83474: LD_INT 1
83476: ARRAY
83477: PPUSH
83478: LD_INT 125
83480: PPUSH
83481: CALL_OW 109
// end else
83485: GO 83671
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
83487: LD_EXP 74
83491: PUSH
83492: LD_VAR 0 2
83496: ARRAY
83497: PUSH
83498: LD_INT 1
83500: ARRAY
83501: PPUSH
83502: CALL_OW 310
83506: IFFALSE 83529
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
83508: LD_EXP 74
83512: PUSH
83513: LD_VAR 0 2
83517: ARRAY
83518: PUSH
83519: LD_INT 1
83521: ARRAY
83522: PPUSH
83523: CALL_OW 122
83527: GO 83671
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
83529: LD_EXP 74
83533: PUSH
83534: LD_VAR 0 2
83538: ARRAY
83539: PUSH
83540: LD_INT 1
83542: ARRAY
83543: PPUSH
83544: CALL_OW 314
83548: NOT
83549: PUSH
83550: LD_EXP 74
83554: PUSH
83555: LD_VAR 0 2
83559: ARRAY
83560: PUSH
83561: LD_INT 1
83563: ARRAY
83564: PPUSH
83565: LD_EXP 73
83569: PUSH
83570: LD_VAR 0 2
83574: ARRAY
83575: PUSH
83576: LD_INT 1
83578: ARRAY
83579: PUSH
83580: LD_INT 1
83582: ARRAY
83583: PPUSH
83584: LD_EXP 73
83588: PUSH
83589: LD_VAR 0 2
83593: ARRAY
83594: PUSH
83595: LD_INT 1
83597: ARRAY
83598: PUSH
83599: LD_INT 2
83601: ARRAY
83602: PPUSH
83603: CALL_OW 297
83607: PUSH
83608: LD_INT 6
83610: GREATER
83611: AND
83612: IFFALSE 83671
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
83614: LD_EXP 74
83618: PUSH
83619: LD_VAR 0 2
83623: ARRAY
83624: PUSH
83625: LD_INT 1
83627: ARRAY
83628: PPUSH
83629: LD_EXP 73
83633: PUSH
83634: LD_VAR 0 2
83638: ARRAY
83639: PUSH
83640: LD_INT 1
83642: ARRAY
83643: PUSH
83644: LD_INT 1
83646: ARRAY
83647: PPUSH
83648: LD_EXP 73
83652: PUSH
83653: LD_VAR 0 2
83657: ARRAY
83658: PUSH
83659: LD_INT 1
83661: ARRAY
83662: PUSH
83663: LD_INT 2
83665: ARRAY
83666: PPUSH
83667: CALL_OW 111
// end ; end ; end ;
83671: GO 83084
83673: POP
83674: POP
// end ;
83675: LD_VAR 0 1
83679: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts , mcts , x ; begin
83680: LD_INT 0
83682: PPUSH
83683: PPUSH
83684: PPUSH
83685: PPUSH
83686: PPUSH
83687: PPUSH
83688: PPUSH
83689: PPUSH
83690: PPUSH
83691: PPUSH
83692: PPUSH
// if not mc_bases then
83693: LD_EXP 36
83697: NOT
83698: IFFALSE 83702
// exit ;
83700: GO 84642
// for i = 1 to mc_bases do
83702: LD_ADDR_VAR 0 2
83706: PUSH
83707: DOUBLE
83708: LD_INT 1
83710: DEC
83711: ST_TO_ADDR
83712: LD_EXP 36
83716: PUSH
83717: FOR_TO
83718: IFFALSE 84640
// begin if not mc_bases [ i ] or mc_scan [ i ] then
83720: LD_EXP 36
83724: PUSH
83725: LD_VAR 0 2
83729: ARRAY
83730: NOT
83731: PUSH
83732: LD_EXP 59
83736: PUSH
83737: LD_VAR 0 2
83741: ARRAY
83742: OR
83743: IFFALSE 83747
// continue ;
83745: GO 83717
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
83747: LD_ADDR_VAR 0 7
83751: PUSH
83752: LD_EXP 36
83756: PUSH
83757: LD_VAR 0 2
83761: ARRAY
83762: PUSH
83763: LD_INT 1
83765: ARRAY
83766: PPUSH
83767: CALL_OW 248
83771: ST_TO_ADDR
// if nation = 3 or not UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) then
83772: LD_VAR 0 7
83776: PUSH
83777: LD_INT 3
83779: EQUAL
83780: PUSH
83781: LD_EXP 55
83785: PUSH
83786: LD_VAR 0 2
83790: ARRAY
83791: PUSH
83792: LD_EXP 58
83796: PUSH
83797: LD_VAR 0 2
83801: ARRAY
83802: UNION
83803: PPUSH
83804: LD_INT 33
83806: PUSH
83807: LD_INT 2
83809: PUSH
83810: EMPTY
83811: LIST
83812: LIST
83813: PPUSH
83814: CALL_OW 72
83818: NOT
83819: OR
83820: IFFALSE 83824
// continue ;
83822: GO 83717
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
83824: LD_ADDR_VAR 0 9
83828: PUSH
83829: LD_EXP 36
83833: PUSH
83834: LD_VAR 0 2
83838: ARRAY
83839: PPUSH
83840: LD_INT 30
83842: PUSH
83843: LD_INT 36
83845: PUSH
83846: EMPTY
83847: LIST
83848: LIST
83849: PPUSH
83850: CALL_OW 72
83854: ST_TO_ADDR
// mcts := UnitFilter ( mc_vehicles [ i ] , [ f_weapon , ar_control_tower ] ) ;
83855: LD_ADDR_VAR 0 10
83859: PUSH
83860: LD_EXP 55
83864: PUSH
83865: LD_VAR 0 2
83869: ARRAY
83870: PPUSH
83871: LD_INT 34
83873: PUSH
83874: LD_INT 31
83876: PUSH
83877: EMPTY
83878: LIST
83879: LIST
83880: PPUSH
83881: CALL_OW 72
83885: ST_TO_ADDR
// if not cts and not mcts then
83886: LD_VAR 0 9
83890: NOT
83891: PUSH
83892: LD_VAR 0 10
83896: NOT
83897: AND
83898: IFFALSE 83902
// continue ;
83900: GO 83717
// x := cts ;
83902: LD_ADDR_VAR 0 11
83906: PUSH
83907: LD_VAR 0 9
83911: ST_TO_ADDR
// if not x then
83912: LD_VAR 0 11
83916: NOT
83917: IFFALSE 83929
// x := mcts ;
83919: LD_ADDR_VAR 0 11
83923: PUSH
83924: LD_VAR 0 10
83928: ST_TO_ADDR
// if not x then
83929: LD_VAR 0 11
83933: NOT
83934: IFFALSE 83938
// continue ;
83936: GO 83717
// if mc_remote_driver [ i ] then
83938: LD_EXP 76
83942: PUSH
83943: LD_VAR 0 2
83947: ARRAY
83948: IFFALSE 84335
// for j in mc_remote_driver [ i ] do
83950: LD_ADDR_VAR 0 3
83954: PUSH
83955: LD_EXP 76
83959: PUSH
83960: LD_VAR 0 2
83964: ARRAY
83965: PUSH
83966: FOR_IN
83967: IFFALSE 84333
// begin if GetClass ( j ) <> 3 then
83969: LD_VAR 0 3
83973: PPUSH
83974: CALL_OW 257
83978: PUSH
83979: LD_INT 3
83981: NONEQUAL
83982: IFFALSE 84035
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff j ) ;
83984: LD_ADDR_EXP 76
83988: PUSH
83989: LD_EXP 76
83993: PPUSH
83994: LD_VAR 0 2
83998: PPUSH
83999: LD_EXP 76
84003: PUSH
84004: LD_VAR 0 2
84008: ARRAY
84009: PUSH
84010: LD_VAR 0 3
84014: DIFF
84015: PPUSH
84016: CALL_OW 1
84020: ST_TO_ADDR
// SetTag ( j , 0 ) ;
84021: LD_VAR 0 3
84025: PPUSH
84026: LD_INT 0
84028: PPUSH
84029: CALL_OW 109
// continue ;
84033: GO 83966
// end ; if UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) and not IsDriver ( j ) then
84035: LD_EXP 55
84039: PUSH
84040: LD_VAR 0 2
84044: ARRAY
84045: PPUSH
84046: LD_INT 34
84048: PUSH
84049: LD_INT 31
84051: PUSH
84052: EMPTY
84053: LIST
84054: LIST
84055: PUSH
84056: LD_INT 58
84058: PUSH
84059: EMPTY
84060: LIST
84061: PUSH
84062: EMPTY
84063: LIST
84064: LIST
84065: PPUSH
84066: CALL_OW 72
84070: PUSH
84071: LD_VAR 0 3
84075: PPUSH
84076: CALL 59834 0 1
84080: NOT
84081: AND
84082: IFFALSE 84153
// begin if IsInUnit ( j ) then
84084: LD_VAR 0 3
84088: PPUSH
84089: CALL_OW 310
84093: IFFALSE 84104
// ComExitBuilding ( j ) ;
84095: LD_VAR 0 3
84099: PPUSH
84100: CALL_OW 122
// AddComEnterUnit ( j , UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) [ 1 ] ) ;
84104: LD_VAR 0 3
84108: PPUSH
84109: LD_EXP 55
84113: PUSH
84114: LD_VAR 0 2
84118: ARRAY
84119: PPUSH
84120: LD_INT 34
84122: PUSH
84123: LD_INT 31
84125: PUSH
84126: EMPTY
84127: LIST
84128: LIST
84129: PUSH
84130: LD_INT 58
84132: PUSH
84133: EMPTY
84134: LIST
84135: PUSH
84136: EMPTY
84137: LIST
84138: LIST
84139: PPUSH
84140: CALL_OW 72
84144: PUSH
84145: LD_INT 1
84147: ARRAY
84148: PPUSH
84149: CALL_OW 180
// end ; if not IsInUnit ( j ) or ( GetBType ( IsInUnit ( j ) ) <> b_control_tower and not IsDriver ( j ) ) then
84153: LD_VAR 0 3
84157: PPUSH
84158: CALL_OW 310
84162: NOT
84163: PUSH
84164: LD_VAR 0 3
84168: PPUSH
84169: CALL_OW 310
84173: PPUSH
84174: CALL_OW 266
84178: PUSH
84179: LD_INT 36
84181: NONEQUAL
84182: PUSH
84183: LD_VAR 0 3
84187: PPUSH
84188: CALL 59834 0 1
84192: NOT
84193: AND
84194: OR
84195: IFFALSE 84331
// begin if IsInUnit ( j ) then
84197: LD_VAR 0 3
84201: PPUSH
84202: CALL_OW 310
84206: IFFALSE 84217
// ComExitBuilding ( j ) ;
84208: LD_VAR 0 3
84212: PPUSH
84213: CALL_OW 122
// ct := 0 ;
84217: LD_ADDR_VAR 0 8
84221: PUSH
84222: LD_INT 0
84224: ST_TO_ADDR
// for k in x do
84225: LD_ADDR_VAR 0 4
84229: PUSH
84230: LD_VAR 0 11
84234: PUSH
84235: FOR_IN
84236: IFFALSE 84309
// if ( GetWeapon ( k ) = ar_control_tower and not IsDrivenBy ( k ) ) or ( GetBType ( k ) = b_control_tower and UnitsInside ( k ) < 3 ) then
84238: LD_VAR 0 4
84242: PPUSH
84243: CALL_OW 264
84247: PUSH
84248: LD_INT 31
84250: EQUAL
84251: PUSH
84252: LD_VAR 0 4
84256: PPUSH
84257: CALL_OW 311
84261: NOT
84262: AND
84263: PUSH
84264: LD_VAR 0 4
84268: PPUSH
84269: CALL_OW 266
84273: PUSH
84274: LD_INT 36
84276: EQUAL
84277: PUSH
84278: LD_VAR 0 4
84282: PPUSH
84283: CALL_OW 313
84287: PUSH
84288: LD_INT 3
84290: LESS
84291: AND
84292: OR
84293: IFFALSE 84307
// begin ct := k ;
84295: LD_ADDR_VAR 0 8
84299: PUSH
84300: LD_VAR 0 4
84304: ST_TO_ADDR
// break ;
84305: GO 84309
// end ;
84307: GO 84235
84309: POP
84310: POP
// if ct then
84311: LD_VAR 0 8
84315: IFFALSE 84331
// ComEnterUnit ( j , ct ) ;
84317: LD_VAR 0 3
84321: PPUSH
84322: LD_VAR 0 8
84326: PPUSH
84327: CALL_OW 120
// end ; end ;
84331: GO 83966
84333: POP
84334: POP
// places := 0 ;
84335: LD_ADDR_VAR 0 5
84339: PUSH
84340: LD_INT 0
84342: ST_TO_ADDR
// for j = 1 to x do
84343: LD_ADDR_VAR 0 3
84347: PUSH
84348: DOUBLE
84349: LD_INT 1
84351: DEC
84352: ST_TO_ADDR
84353: LD_VAR 0 11
84357: PUSH
84358: FOR_TO
84359: IFFALSE 84435
// if GetWeapon ( x [ j ] ) = ar_control_tower then
84361: LD_VAR 0 11
84365: PUSH
84366: LD_VAR 0 3
84370: ARRAY
84371: PPUSH
84372: CALL_OW 264
84376: PUSH
84377: LD_INT 31
84379: EQUAL
84380: IFFALSE 84398
// places := places + 1 else
84382: LD_ADDR_VAR 0 5
84386: PUSH
84387: LD_VAR 0 5
84391: PUSH
84392: LD_INT 1
84394: PLUS
84395: ST_TO_ADDR
84396: GO 84433
// if GetBType ( x [ j ] ) = b_control_tower then
84398: LD_VAR 0 11
84402: PUSH
84403: LD_VAR 0 3
84407: ARRAY
84408: PPUSH
84409: CALL_OW 266
84413: PUSH
84414: LD_INT 36
84416: EQUAL
84417: IFFALSE 84433
// places := places + 3 ;
84419: LD_ADDR_VAR 0 5
84423: PUSH
84424: LD_VAR 0 5
84428: PUSH
84429: LD_INT 3
84431: PLUS
84432: ST_TO_ADDR
84433: GO 84358
84435: POP
84436: POP
// if places = 0 or places <= mc_remote_driver [ i ] then
84437: LD_VAR 0 5
84441: PUSH
84442: LD_INT 0
84444: EQUAL
84445: PUSH
84446: LD_VAR 0 5
84450: PUSH
84451: LD_EXP 76
84455: PUSH
84456: LD_VAR 0 2
84460: ARRAY
84461: LESSEQUAL
84462: OR
84463: IFFALSE 84467
// continue ;
84465: GO 83717
// tmp := SortBySkill ( UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] , 3 ) ;
84467: LD_ADDR_VAR 0 6
84471: PUSH
84472: LD_EXP 36
84476: PUSH
84477: LD_VAR 0 2
84481: ARRAY
84482: PPUSH
84483: LD_INT 25
84485: PUSH
84486: LD_INT 3
84488: PUSH
84489: EMPTY
84490: LIST
84491: LIST
84492: PPUSH
84493: CALL_OW 72
84497: PUSH
84498: LD_EXP 76
84502: PUSH
84503: LD_VAR 0 2
84507: ARRAY
84508: DIFF
84509: PPUSH
84510: LD_INT 3
84512: PPUSH
84513: CALL 60734 0 2
84517: ST_TO_ADDR
// for j in tmp do
84518: LD_ADDR_VAR 0 3
84522: PUSH
84523: LD_VAR 0 6
84527: PUSH
84528: FOR_IN
84529: IFFALSE 84564
// if GetTag ( j ) > 0 then
84531: LD_VAR 0 3
84535: PPUSH
84536: CALL_OW 110
84540: PUSH
84541: LD_INT 0
84543: GREATER
84544: IFFALSE 84562
// tmp := tmp diff j ;
84546: LD_ADDR_VAR 0 6
84550: PUSH
84551: LD_VAR 0 6
84555: PUSH
84556: LD_VAR 0 3
84560: DIFF
84561: ST_TO_ADDR
84562: GO 84528
84564: POP
84565: POP
// if not tmp then
84566: LD_VAR 0 6
84570: NOT
84571: IFFALSE 84575
// continue ;
84573: GO 83717
// if places then
84575: LD_VAR 0 5
84579: IFFALSE 84638
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
84581: LD_ADDR_EXP 76
84585: PUSH
84586: LD_EXP 76
84590: PPUSH
84591: LD_VAR 0 2
84595: PPUSH
84596: LD_EXP 76
84600: PUSH
84601: LD_VAR 0 2
84605: ARRAY
84606: PUSH
84607: LD_VAR 0 6
84611: PUSH
84612: LD_INT 1
84614: ARRAY
84615: UNION
84616: PPUSH
84617: CALL_OW 1
84621: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
84622: LD_VAR 0 6
84626: PUSH
84627: LD_INT 1
84629: ARRAY
84630: PPUSH
84631: LD_INT 126
84633: PPUSH
84634: CALL_OW 109
// end ; end ;
84638: GO 83717
84640: POP
84641: POP
// end ;
84642: LD_VAR 0 1
84646: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
84647: LD_INT 0
84649: PPUSH
84650: PPUSH
84651: PPUSH
84652: PPUSH
84653: PPUSH
84654: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
84655: LD_VAR 0 1
84659: NOT
84660: PUSH
84661: LD_VAR 0 2
84665: NOT
84666: OR
84667: PUSH
84668: LD_VAR 0 3
84672: NOT
84673: OR
84674: PUSH
84675: LD_VAR 0 4
84679: PUSH
84680: LD_INT 1
84682: PUSH
84683: LD_INT 2
84685: PUSH
84686: LD_INT 3
84688: PUSH
84689: LD_INT 4
84691: PUSH
84692: LD_INT 5
84694: PUSH
84695: LD_INT 8
84697: PUSH
84698: LD_INT 9
84700: PUSH
84701: LD_INT 15
84703: PUSH
84704: LD_INT 16
84706: PUSH
84707: EMPTY
84708: LIST
84709: LIST
84710: LIST
84711: LIST
84712: LIST
84713: LIST
84714: LIST
84715: LIST
84716: LIST
84717: IN
84718: NOT
84719: OR
84720: IFFALSE 84724
// exit ;
84722: GO 85624
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
84724: LD_ADDR_VAR 0 2
84728: PUSH
84729: LD_VAR 0 2
84733: PPUSH
84734: LD_INT 21
84736: PUSH
84737: LD_INT 3
84739: PUSH
84740: EMPTY
84741: LIST
84742: LIST
84743: PUSH
84744: LD_INT 24
84746: PUSH
84747: LD_INT 250
84749: PUSH
84750: EMPTY
84751: LIST
84752: LIST
84753: PUSH
84754: EMPTY
84755: LIST
84756: LIST
84757: PPUSH
84758: CALL_OW 72
84762: ST_TO_ADDR
// case class of 1 , 15 :
84763: LD_VAR 0 4
84767: PUSH
84768: LD_INT 1
84770: DOUBLE
84771: EQUAL
84772: IFTRUE 84782
84774: LD_INT 15
84776: DOUBLE
84777: EQUAL
84778: IFTRUE 84782
84780: GO 84867
84782: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
84783: LD_ADDR_VAR 0 8
84787: PUSH
84788: LD_VAR 0 2
84792: PPUSH
84793: LD_INT 2
84795: PUSH
84796: LD_INT 30
84798: PUSH
84799: LD_INT 32
84801: PUSH
84802: EMPTY
84803: LIST
84804: LIST
84805: PUSH
84806: LD_INT 30
84808: PUSH
84809: LD_INT 31
84811: PUSH
84812: EMPTY
84813: LIST
84814: LIST
84815: PUSH
84816: EMPTY
84817: LIST
84818: LIST
84819: LIST
84820: PPUSH
84821: CALL_OW 72
84825: PUSH
84826: LD_VAR 0 2
84830: PPUSH
84831: LD_INT 2
84833: PUSH
84834: LD_INT 30
84836: PUSH
84837: LD_INT 4
84839: PUSH
84840: EMPTY
84841: LIST
84842: LIST
84843: PUSH
84844: LD_INT 30
84846: PUSH
84847: LD_INT 5
84849: PUSH
84850: EMPTY
84851: LIST
84852: LIST
84853: PUSH
84854: EMPTY
84855: LIST
84856: LIST
84857: LIST
84858: PPUSH
84859: CALL_OW 72
84863: ADD
84864: ST_TO_ADDR
84865: GO 85113
84867: LD_INT 2
84869: DOUBLE
84870: EQUAL
84871: IFTRUE 84881
84873: LD_INT 16
84875: DOUBLE
84876: EQUAL
84877: IFTRUE 84881
84879: GO 84927
84881: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
84882: LD_ADDR_VAR 0 8
84886: PUSH
84887: LD_VAR 0 2
84891: PPUSH
84892: LD_INT 2
84894: PUSH
84895: LD_INT 30
84897: PUSH
84898: LD_INT 0
84900: PUSH
84901: EMPTY
84902: LIST
84903: LIST
84904: PUSH
84905: LD_INT 30
84907: PUSH
84908: LD_INT 1
84910: PUSH
84911: EMPTY
84912: LIST
84913: LIST
84914: PUSH
84915: EMPTY
84916: LIST
84917: LIST
84918: LIST
84919: PPUSH
84920: CALL_OW 72
84924: ST_TO_ADDR
84925: GO 85113
84927: LD_INT 3
84929: DOUBLE
84930: EQUAL
84931: IFTRUE 84935
84933: GO 84981
84935: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
84936: LD_ADDR_VAR 0 8
84940: PUSH
84941: LD_VAR 0 2
84945: PPUSH
84946: LD_INT 2
84948: PUSH
84949: LD_INT 30
84951: PUSH
84952: LD_INT 2
84954: PUSH
84955: EMPTY
84956: LIST
84957: LIST
84958: PUSH
84959: LD_INT 30
84961: PUSH
84962: LD_INT 3
84964: PUSH
84965: EMPTY
84966: LIST
84967: LIST
84968: PUSH
84969: EMPTY
84970: LIST
84971: LIST
84972: LIST
84973: PPUSH
84974: CALL_OW 72
84978: ST_TO_ADDR
84979: GO 85113
84981: LD_INT 4
84983: DOUBLE
84984: EQUAL
84985: IFTRUE 84989
84987: GO 85046
84989: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
84990: LD_ADDR_VAR 0 8
84994: PUSH
84995: LD_VAR 0 2
84999: PPUSH
85000: LD_INT 2
85002: PUSH
85003: LD_INT 30
85005: PUSH
85006: LD_INT 6
85008: PUSH
85009: EMPTY
85010: LIST
85011: LIST
85012: PUSH
85013: LD_INT 30
85015: PUSH
85016: LD_INT 7
85018: PUSH
85019: EMPTY
85020: LIST
85021: LIST
85022: PUSH
85023: LD_INT 30
85025: PUSH
85026: LD_INT 8
85028: PUSH
85029: EMPTY
85030: LIST
85031: LIST
85032: PUSH
85033: EMPTY
85034: LIST
85035: LIST
85036: LIST
85037: LIST
85038: PPUSH
85039: CALL_OW 72
85043: ST_TO_ADDR
85044: GO 85113
85046: LD_INT 5
85048: DOUBLE
85049: EQUAL
85050: IFTRUE 85066
85052: LD_INT 8
85054: DOUBLE
85055: EQUAL
85056: IFTRUE 85066
85058: LD_INT 9
85060: DOUBLE
85061: EQUAL
85062: IFTRUE 85066
85064: GO 85112
85066: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
85067: LD_ADDR_VAR 0 8
85071: PUSH
85072: LD_VAR 0 2
85076: PPUSH
85077: LD_INT 2
85079: PUSH
85080: LD_INT 30
85082: PUSH
85083: LD_INT 4
85085: PUSH
85086: EMPTY
85087: LIST
85088: LIST
85089: PUSH
85090: LD_INT 30
85092: PUSH
85093: LD_INT 5
85095: PUSH
85096: EMPTY
85097: LIST
85098: LIST
85099: PUSH
85100: EMPTY
85101: LIST
85102: LIST
85103: LIST
85104: PPUSH
85105: CALL_OW 72
85109: ST_TO_ADDR
85110: GO 85113
85112: POP
// if not tmp then
85113: LD_VAR 0 8
85117: NOT
85118: IFFALSE 85122
// exit ;
85120: GO 85624
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
85122: LD_VAR 0 4
85126: PUSH
85127: LD_INT 1
85129: PUSH
85130: LD_INT 15
85132: PUSH
85133: EMPTY
85134: LIST
85135: LIST
85136: IN
85137: PUSH
85138: LD_EXP 45
85142: PUSH
85143: LD_VAR 0 1
85147: ARRAY
85148: AND
85149: IFFALSE 85305
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
85151: LD_ADDR_VAR 0 9
85155: PUSH
85156: LD_EXP 45
85160: PUSH
85161: LD_VAR 0 1
85165: ARRAY
85166: PUSH
85167: LD_INT 1
85169: ARRAY
85170: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
85171: LD_VAR 0 9
85175: PUSH
85176: LD_EXP 46
85180: PUSH
85181: LD_VAR 0 1
85185: ARRAY
85186: IN
85187: NOT
85188: IFFALSE 85303
// begin mc_busy_turret_list := ReplaceIn ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
85190: LD_ADDR_EXP 46
85194: PUSH
85195: LD_EXP 46
85199: PPUSH
85200: LD_VAR 0 1
85204: PUSH
85205: LD_EXP 46
85209: PUSH
85210: LD_VAR 0 1
85214: ARRAY
85215: PUSH
85216: LD_INT 1
85218: PLUS
85219: PUSH
85220: EMPTY
85221: LIST
85222: LIST
85223: PPUSH
85224: LD_VAR 0 9
85228: PPUSH
85229: CALL 26486 0 3
85233: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
85234: LD_ADDR_EXP 45
85238: PUSH
85239: LD_EXP 45
85243: PPUSH
85244: LD_VAR 0 1
85248: PPUSH
85249: LD_EXP 45
85253: PUSH
85254: LD_VAR 0 1
85258: ARRAY
85259: PUSH
85260: LD_VAR 0 9
85264: DIFF
85265: PPUSH
85266: CALL_OW 1
85270: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
85271: LD_VAR 0 3
85275: PPUSH
85276: LD_EXP 46
85280: PUSH
85281: LD_VAR 0 1
85285: ARRAY
85286: PUSH
85287: LD_EXP 46
85291: PUSH
85292: LD_VAR 0 1
85296: ARRAY
85297: ARRAY
85298: PPUSH
85299: CALL_OW 120
// end ; exit ;
85303: GO 85624
// end ; if tmp > 1 then
85305: LD_VAR 0 8
85309: PUSH
85310: LD_INT 1
85312: GREATER
85313: IFFALSE 85417
// for i = 2 to tmp do
85315: LD_ADDR_VAR 0 6
85319: PUSH
85320: DOUBLE
85321: LD_INT 2
85323: DEC
85324: ST_TO_ADDR
85325: LD_VAR 0 8
85329: PUSH
85330: FOR_TO
85331: IFFALSE 85415
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
85333: LD_VAR 0 8
85337: PUSH
85338: LD_VAR 0 6
85342: ARRAY
85343: PPUSH
85344: CALL_OW 461
85348: PUSH
85349: LD_INT 6
85351: EQUAL
85352: IFFALSE 85413
// begin x := tmp [ i ] ;
85354: LD_ADDR_VAR 0 9
85358: PUSH
85359: LD_VAR 0 8
85363: PUSH
85364: LD_VAR 0 6
85368: ARRAY
85369: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
85370: LD_ADDR_VAR 0 8
85374: PUSH
85375: LD_VAR 0 8
85379: PPUSH
85380: LD_VAR 0 6
85384: PPUSH
85385: CALL_OW 3
85389: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
85390: LD_ADDR_VAR 0 8
85394: PUSH
85395: LD_VAR 0 8
85399: PPUSH
85400: LD_INT 1
85402: PPUSH
85403: LD_VAR 0 9
85407: PPUSH
85408: CALL_OW 2
85412: ST_TO_ADDR
// end ;
85413: GO 85330
85415: POP
85416: POP
// for i in tmp do
85417: LD_ADDR_VAR 0 6
85421: PUSH
85422: LD_VAR 0 8
85426: PUSH
85427: FOR_IN
85428: IFFALSE 85497
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
85430: LD_VAR 0 6
85434: PPUSH
85435: CALL_OW 313
85439: PUSH
85440: LD_INT 6
85442: LESS
85443: PUSH
85444: LD_VAR 0 6
85448: PPUSH
85449: CALL_OW 266
85453: PUSH
85454: LD_INT 31
85456: PUSH
85457: LD_INT 32
85459: PUSH
85460: EMPTY
85461: LIST
85462: LIST
85463: IN
85464: NOT
85465: AND
85466: PUSH
85467: LD_VAR 0 6
85471: PPUSH
85472: CALL_OW 313
85476: PUSH
85477: LD_INT 0
85479: EQUAL
85480: OR
85481: IFFALSE 85495
// begin j := i ;
85483: LD_ADDR_VAR 0 7
85487: PUSH
85488: LD_VAR 0 6
85492: ST_TO_ADDR
// break ;
85493: GO 85497
// end ; end ;
85495: GO 85427
85497: POP
85498: POP
// if j then
85499: LD_VAR 0 7
85503: IFFALSE 85521
// ComEnterUnit ( unit , j ) else
85505: LD_VAR 0 3
85509: PPUSH
85510: LD_VAR 0 7
85514: PPUSH
85515: CALL_OW 120
85519: GO 85624
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
85521: LD_ADDR_VAR 0 10
85525: PUSH
85526: LD_VAR 0 2
85530: PPUSH
85531: LD_INT 2
85533: PUSH
85534: LD_INT 30
85536: PUSH
85537: LD_INT 0
85539: PUSH
85540: EMPTY
85541: LIST
85542: LIST
85543: PUSH
85544: LD_INT 30
85546: PUSH
85547: LD_INT 1
85549: PUSH
85550: EMPTY
85551: LIST
85552: LIST
85553: PUSH
85554: EMPTY
85555: LIST
85556: LIST
85557: LIST
85558: PPUSH
85559: CALL_OW 72
85563: ST_TO_ADDR
// if depot then
85564: LD_VAR 0 10
85568: IFFALSE 85624
// begin depot := NearestUnitToUnit ( depot , unit ) ;
85570: LD_ADDR_VAR 0 10
85574: PUSH
85575: LD_VAR 0 10
85579: PPUSH
85580: LD_VAR 0 3
85584: PPUSH
85585: CALL_OW 74
85589: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
85590: LD_VAR 0 3
85594: PPUSH
85595: LD_VAR 0 10
85599: PPUSH
85600: CALL_OW 296
85604: PUSH
85605: LD_INT 10
85607: GREATER
85608: IFFALSE 85624
// ComStandNearbyBuilding ( unit , depot ) ;
85610: LD_VAR 0 3
85614: PPUSH
85615: LD_VAR 0 10
85619: PPUSH
85620: CALL 20778 0 2
// end ; end ; end ;
85624: LD_VAR 0 5
85628: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
85629: LD_INT 0
85631: PPUSH
85632: PPUSH
85633: PPUSH
85634: PPUSH
// if not mc_bases then
85635: LD_EXP 36
85639: NOT
85640: IFFALSE 85644
// exit ;
85642: GO 85883
// for i = 1 to mc_bases do
85644: LD_ADDR_VAR 0 2
85648: PUSH
85649: DOUBLE
85650: LD_INT 1
85652: DEC
85653: ST_TO_ADDR
85654: LD_EXP 36
85658: PUSH
85659: FOR_TO
85660: IFFALSE 85881
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
85662: LD_ADDR_VAR 0 4
85666: PUSH
85667: LD_EXP 36
85671: PUSH
85672: LD_VAR 0 2
85676: ARRAY
85677: PPUSH
85678: LD_INT 21
85680: PUSH
85681: LD_INT 1
85683: PUSH
85684: EMPTY
85685: LIST
85686: LIST
85687: PPUSH
85688: CALL_OW 72
85692: PUSH
85693: LD_EXP 65
85697: PUSH
85698: LD_VAR 0 2
85702: ARRAY
85703: UNION
85704: ST_TO_ADDR
// if not tmp then
85705: LD_VAR 0 4
85709: NOT
85710: IFFALSE 85714
// continue ;
85712: GO 85659
// for j in tmp do
85714: LD_ADDR_VAR 0 3
85718: PUSH
85719: LD_VAR 0 4
85723: PUSH
85724: FOR_IN
85725: IFFALSE 85877
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
85727: LD_VAR 0 3
85731: PPUSH
85732: CALL_OW 110
85736: NOT
85737: PUSH
85738: LD_VAR 0 3
85742: PPUSH
85743: CALL_OW 314
85747: NOT
85748: AND
85749: PUSH
85750: LD_VAR 0 3
85754: PPUSH
85755: CALL_OW 311
85759: NOT
85760: AND
85761: PUSH
85762: LD_VAR 0 3
85766: PPUSH
85767: CALL_OW 310
85771: NOT
85772: AND
85773: PUSH
85774: LD_VAR 0 3
85778: PUSH
85779: LD_EXP 39
85783: PUSH
85784: LD_VAR 0 2
85788: ARRAY
85789: PUSH
85790: LD_INT 1
85792: ARRAY
85793: IN
85794: NOT
85795: AND
85796: PUSH
85797: LD_VAR 0 3
85801: PUSH
85802: LD_EXP 39
85806: PUSH
85807: LD_VAR 0 2
85811: ARRAY
85812: PUSH
85813: LD_INT 2
85815: ARRAY
85816: IN
85817: NOT
85818: AND
85819: PUSH
85820: LD_VAR 0 3
85824: PUSH
85825: LD_EXP 48
85829: PUSH
85830: LD_VAR 0 2
85834: ARRAY
85835: IN
85836: NOT
85837: AND
85838: IFFALSE 85875
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
85840: LD_VAR 0 2
85844: PPUSH
85845: LD_EXP 36
85849: PUSH
85850: LD_VAR 0 2
85854: ARRAY
85855: PPUSH
85856: LD_VAR 0 3
85860: PPUSH
85861: LD_VAR 0 3
85865: PPUSH
85866: CALL_OW 257
85870: PPUSH
85871: CALL 84647 0 4
// end ;
85875: GO 85724
85877: POP
85878: POP
// end ;
85879: GO 85659
85881: POP
85882: POP
// end ;
85883: LD_VAR 0 1
85887: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
85888: LD_INT 0
85890: PPUSH
85891: PPUSH
85892: PPUSH
85893: PPUSH
85894: PPUSH
85895: PPUSH
// if not mc_bases [ base ] then
85896: LD_EXP 36
85900: PUSH
85901: LD_VAR 0 1
85905: ARRAY
85906: NOT
85907: IFFALSE 85911
// exit ;
85909: GO 86093
// tmp := [ ] ;
85911: LD_ADDR_VAR 0 6
85915: PUSH
85916: EMPTY
85917: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
85918: LD_ADDR_VAR 0 7
85922: PUSH
85923: LD_VAR 0 3
85927: PPUSH
85928: LD_INT 0
85930: PPUSH
85931: CALL_OW 517
85935: ST_TO_ADDR
// if not list then
85936: LD_VAR 0 7
85940: NOT
85941: IFFALSE 85945
// exit ;
85943: GO 86093
// for i = 1 to amount do
85945: LD_ADDR_VAR 0 5
85949: PUSH
85950: DOUBLE
85951: LD_INT 1
85953: DEC
85954: ST_TO_ADDR
85955: LD_VAR 0 2
85959: PUSH
85960: FOR_TO
85961: IFFALSE 86041
// begin x := rand ( 1 , list [ 1 ] ) ;
85963: LD_ADDR_VAR 0 8
85967: PUSH
85968: LD_INT 1
85970: PPUSH
85971: LD_VAR 0 7
85975: PUSH
85976: LD_INT 1
85978: ARRAY
85979: PPUSH
85980: CALL_OW 12
85984: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
85985: LD_ADDR_VAR 0 6
85989: PUSH
85990: LD_VAR 0 6
85994: PPUSH
85995: LD_VAR 0 5
85999: PPUSH
86000: LD_VAR 0 7
86004: PUSH
86005: LD_INT 1
86007: ARRAY
86008: PUSH
86009: LD_VAR 0 8
86013: ARRAY
86014: PUSH
86015: LD_VAR 0 7
86019: PUSH
86020: LD_INT 2
86022: ARRAY
86023: PUSH
86024: LD_VAR 0 8
86028: ARRAY
86029: PUSH
86030: EMPTY
86031: LIST
86032: LIST
86033: PPUSH
86034: CALL_OW 1
86038: ST_TO_ADDR
// end ;
86039: GO 85960
86041: POP
86042: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
86043: LD_ADDR_EXP 49
86047: PUSH
86048: LD_EXP 49
86052: PPUSH
86053: LD_VAR 0 1
86057: PPUSH
86058: LD_VAR 0 6
86062: PPUSH
86063: CALL_OW 1
86067: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
86068: LD_ADDR_EXP 51
86072: PUSH
86073: LD_EXP 51
86077: PPUSH
86078: LD_VAR 0 1
86082: PPUSH
86083: LD_VAR 0 3
86087: PPUSH
86088: CALL_OW 1
86092: ST_TO_ADDR
// end ;
86093: LD_VAR 0 4
86097: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
86098: LD_INT 0
86100: PPUSH
// if not mc_bases [ base ] then
86101: LD_EXP 36
86105: PUSH
86106: LD_VAR 0 1
86110: ARRAY
86111: NOT
86112: IFFALSE 86116
// exit ;
86114: GO 86141
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
86116: LD_ADDR_EXP 41
86120: PUSH
86121: LD_EXP 41
86125: PPUSH
86126: LD_VAR 0 1
86130: PPUSH
86131: LD_VAR 0 2
86135: PPUSH
86136: CALL_OW 1
86140: ST_TO_ADDR
// end ;
86141: LD_VAR 0 3
86145: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
86146: LD_INT 0
86148: PPUSH
// if not mc_bases [ base ] then
86149: LD_EXP 36
86153: PUSH
86154: LD_VAR 0 1
86158: ARRAY
86159: NOT
86160: IFFALSE 86164
// exit ;
86162: GO 86201
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union list ) ;
86164: LD_ADDR_EXP 41
86168: PUSH
86169: LD_EXP 41
86173: PPUSH
86174: LD_VAR 0 1
86178: PPUSH
86179: LD_EXP 41
86183: PUSH
86184: LD_VAR 0 1
86188: ARRAY
86189: PUSH
86190: LD_VAR 0 2
86194: UNION
86195: PPUSH
86196: CALL_OW 1
86200: ST_TO_ADDR
// end ;
86201: LD_VAR 0 3
86205: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
86206: LD_INT 0
86208: PPUSH
// if not mc_bases [ base ] then
86209: LD_EXP 36
86213: PUSH
86214: LD_VAR 0 1
86218: ARRAY
86219: NOT
86220: IFFALSE 86224
// exit ;
86222: GO 86249
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
86224: LD_ADDR_EXP 57
86228: PUSH
86229: LD_EXP 57
86233: PPUSH
86234: LD_VAR 0 1
86238: PPUSH
86239: LD_VAR 0 2
86243: PPUSH
86244: CALL_OW 1
86248: ST_TO_ADDR
// end ;
86249: LD_VAR 0 3
86253: RET
// export function MC_InsertProduceList ( base , components ) ; begin
86254: LD_INT 0
86256: PPUSH
// if not mc_bases [ base ] then
86257: LD_EXP 36
86261: PUSH
86262: LD_VAR 0 1
86266: ARRAY
86267: NOT
86268: IFFALSE 86272
// exit ;
86270: GO 86309
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ components ) ;
86272: LD_ADDR_EXP 57
86276: PUSH
86277: LD_EXP 57
86281: PPUSH
86282: LD_VAR 0 1
86286: PPUSH
86287: LD_EXP 57
86291: PUSH
86292: LD_VAR 0 1
86296: ARRAY
86297: PUSH
86298: LD_VAR 0 2
86302: ADD
86303: PPUSH
86304: CALL_OW 1
86308: ST_TO_ADDR
// end ;
86309: LD_VAR 0 3
86313: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
86314: LD_INT 0
86316: PPUSH
// if not mc_bases [ base ] then
86317: LD_EXP 36
86321: PUSH
86322: LD_VAR 0 1
86326: ARRAY
86327: NOT
86328: IFFALSE 86332
// exit ;
86330: GO 86386
// mc_defender := Replace ( mc_defender , base , deflist ) ;
86332: LD_ADDR_EXP 58
86336: PUSH
86337: LD_EXP 58
86341: PPUSH
86342: LD_VAR 0 1
86346: PPUSH
86347: LD_VAR 0 2
86351: PPUSH
86352: CALL_OW 1
86356: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
86357: LD_ADDR_EXP 47
86361: PUSH
86362: LD_EXP 47
86366: PPUSH
86367: LD_VAR 0 1
86371: PPUSH
86372: LD_VAR 0 2
86376: PUSH
86377: LD_INT 0
86379: PLUS
86380: PPUSH
86381: CALL_OW 1
86385: ST_TO_ADDR
// end ;
86386: LD_VAR 0 3
86390: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
86391: LD_INT 0
86393: PPUSH
// if not mc_bases [ base ] then
86394: LD_EXP 36
86398: PUSH
86399: LD_VAR 0 1
86403: ARRAY
86404: NOT
86405: IFFALSE 86409
// exit ;
86407: GO 86434
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
86409: LD_ADDR_EXP 47
86413: PUSH
86414: LD_EXP 47
86418: PPUSH
86419: LD_VAR 0 1
86423: PPUSH
86424: LD_VAR 0 2
86428: PPUSH
86429: CALL_OW 1
86433: ST_TO_ADDR
// end ;
86434: LD_VAR 0 3
86438: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
86439: LD_INT 0
86441: PPUSH
86442: PPUSH
86443: PPUSH
86444: PPUSH
// if not mc_bases [ base ] then
86445: LD_EXP 36
86449: PUSH
86450: LD_VAR 0 1
86454: ARRAY
86455: NOT
86456: IFFALSE 86460
// exit ;
86458: GO 86525
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
86460: LD_ADDR_EXP 56
86464: PUSH
86465: LD_EXP 56
86469: PPUSH
86470: LD_VAR 0 1
86474: PUSH
86475: LD_EXP 56
86479: PUSH
86480: LD_VAR 0 1
86484: ARRAY
86485: PUSH
86486: LD_INT 1
86488: PLUS
86489: PUSH
86490: EMPTY
86491: LIST
86492: LIST
86493: PPUSH
86494: LD_VAR 0 1
86498: PUSH
86499: LD_VAR 0 2
86503: PUSH
86504: LD_VAR 0 3
86508: PUSH
86509: LD_VAR 0 4
86513: PUSH
86514: EMPTY
86515: LIST
86516: LIST
86517: LIST
86518: LIST
86519: PPUSH
86520: CALL 26486 0 3
86524: ST_TO_ADDR
// end ;
86525: LD_VAR 0 5
86529: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
86530: LD_INT 0
86532: PPUSH
// if not mc_bases [ base ] then
86533: LD_EXP 36
86537: PUSH
86538: LD_VAR 0 1
86542: ARRAY
86543: NOT
86544: IFFALSE 86548
// exit ;
86546: GO 86573
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
86548: LD_ADDR_EXP 73
86552: PUSH
86553: LD_EXP 73
86557: PPUSH
86558: LD_VAR 0 1
86562: PPUSH
86563: LD_VAR 0 2
86567: PPUSH
86568: CALL_OW 1
86572: ST_TO_ADDR
// end ;
86573: LD_VAR 0 3
86577: RET
// export function MC_GetMinesField ( base ) ; begin
86578: LD_INT 0
86580: PPUSH
// result := mc_mines [ base ] ;
86581: LD_ADDR_VAR 0 2
86585: PUSH
86586: LD_EXP 49
86590: PUSH
86591: LD_VAR 0 1
86595: ARRAY
86596: ST_TO_ADDR
// end ;
86597: LD_VAR 0 2
86601: RET
// export function MC_GetProduceList ( base ) ; begin
86602: LD_INT 0
86604: PPUSH
// result := mc_produce [ base ] ;
86605: LD_ADDR_VAR 0 2
86609: PUSH
86610: LD_EXP 57
86614: PUSH
86615: LD_VAR 0 1
86619: ARRAY
86620: ST_TO_ADDR
// end ;
86621: LD_VAR 0 2
86625: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
86626: LD_INT 0
86628: PPUSH
86629: PPUSH
// if not mc_bases then
86630: LD_EXP 36
86634: NOT
86635: IFFALSE 86639
// exit ;
86637: GO 86704
// if mc_bases [ base ] then
86639: LD_EXP 36
86643: PUSH
86644: LD_VAR 0 1
86648: ARRAY
86649: IFFALSE 86704
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
86651: LD_ADDR_VAR 0 3
86655: PUSH
86656: LD_EXP 36
86660: PUSH
86661: LD_VAR 0 1
86665: ARRAY
86666: PPUSH
86667: LD_INT 30
86669: PUSH
86670: LD_VAR 0 2
86674: PUSH
86675: EMPTY
86676: LIST
86677: LIST
86678: PPUSH
86679: CALL_OW 72
86683: ST_TO_ADDR
// if result then
86684: LD_VAR 0 3
86688: IFFALSE 86704
// result := result [ 1 ] ;
86690: LD_ADDR_VAR 0 3
86694: PUSH
86695: LD_VAR 0 3
86699: PUSH
86700: LD_INT 1
86702: ARRAY
86703: ST_TO_ADDR
// end ; end ;
86704: LD_VAR 0 3
86708: RET
// export function MC_GetBuildings ( base , btype ) ; var i ; begin
86709: LD_INT 0
86711: PPUSH
86712: PPUSH
// if not mc_bases then
86713: LD_EXP 36
86717: NOT
86718: IFFALSE 86722
// exit ;
86720: GO 86767
// if mc_bases [ base ] then
86722: LD_EXP 36
86726: PUSH
86727: LD_VAR 0 1
86731: ARRAY
86732: IFFALSE 86767
// result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
86734: LD_ADDR_VAR 0 3
86738: PUSH
86739: LD_EXP 36
86743: PUSH
86744: LD_VAR 0 1
86748: ARRAY
86749: PPUSH
86750: LD_INT 30
86752: PUSH
86753: LD_VAR 0 2
86757: PUSH
86758: EMPTY
86759: LIST
86760: LIST
86761: PPUSH
86762: CALL_OW 72
86766: ST_TO_ADDR
// end ;
86767: LD_VAR 0 3
86771: RET
// export function MC_SetTame ( base , area ) ; begin
86772: LD_INT 0
86774: PPUSH
// if not mc_bases or not base then
86775: LD_EXP 36
86779: NOT
86780: PUSH
86781: LD_VAR 0 1
86785: NOT
86786: OR
86787: IFFALSE 86791
// exit ;
86789: GO 86816
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
86791: LD_ADDR_EXP 64
86795: PUSH
86796: LD_EXP 64
86800: PPUSH
86801: LD_VAR 0 1
86805: PPUSH
86806: LD_VAR 0 2
86810: PPUSH
86811: CALL_OW 1
86815: ST_TO_ADDR
// end ;
86816: LD_VAR 0 3
86820: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
86821: LD_INT 0
86823: PPUSH
86824: PPUSH
// if not mc_bases or not base then
86825: LD_EXP 36
86829: NOT
86830: PUSH
86831: LD_VAR 0 1
86835: NOT
86836: OR
86837: IFFALSE 86841
// exit ;
86839: GO 86943
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
86841: LD_ADDR_VAR 0 4
86845: PUSH
86846: LD_EXP 36
86850: PUSH
86851: LD_VAR 0 1
86855: ARRAY
86856: PPUSH
86857: LD_INT 30
86859: PUSH
86860: LD_VAR 0 2
86864: PUSH
86865: EMPTY
86866: LIST
86867: LIST
86868: PPUSH
86869: CALL_OW 72
86873: ST_TO_ADDR
// if not tmp then
86874: LD_VAR 0 4
86878: NOT
86879: IFFALSE 86883
// exit ;
86881: GO 86943
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
86883: LD_ADDR_EXP 68
86887: PUSH
86888: LD_EXP 68
86892: PPUSH
86893: LD_VAR 0 1
86897: PPUSH
86898: LD_EXP 68
86902: PUSH
86903: LD_VAR 0 1
86907: ARRAY
86908: PPUSH
86909: LD_EXP 68
86913: PUSH
86914: LD_VAR 0 1
86918: ARRAY
86919: PUSH
86920: LD_INT 1
86922: PLUS
86923: PPUSH
86924: LD_VAR 0 4
86928: PUSH
86929: LD_INT 1
86931: ARRAY
86932: PPUSH
86933: CALL_OW 2
86937: PPUSH
86938: CALL_OW 1
86942: ST_TO_ADDR
// end ;
86943: LD_VAR 0 3
86947: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
86948: LD_INT 0
86950: PPUSH
86951: PPUSH
// if not mc_bases or not base or not kinds then
86952: LD_EXP 36
86956: NOT
86957: PUSH
86958: LD_VAR 0 1
86962: NOT
86963: OR
86964: PUSH
86965: LD_VAR 0 2
86969: NOT
86970: OR
86971: IFFALSE 86975
// exit ;
86973: GO 87036
// for i in kinds do
86975: LD_ADDR_VAR 0 4
86979: PUSH
86980: LD_VAR 0 2
86984: PUSH
86985: FOR_IN
86986: IFFALSE 87034
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
86988: LD_ADDR_EXP 70
86992: PUSH
86993: LD_EXP 70
86997: PPUSH
86998: LD_VAR 0 1
87002: PUSH
87003: LD_EXP 70
87007: PUSH
87008: LD_VAR 0 1
87012: ARRAY
87013: PUSH
87014: LD_INT 1
87016: PLUS
87017: PUSH
87018: EMPTY
87019: LIST
87020: LIST
87021: PPUSH
87022: LD_VAR 0 4
87026: PPUSH
87027: CALL 26486 0 3
87031: ST_TO_ADDR
87032: GO 86985
87034: POP
87035: POP
// end ;
87036: LD_VAR 0 3
87040: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
87041: LD_INT 0
87043: PPUSH
// if not mc_bases or not base or not areas then
87044: LD_EXP 36
87048: NOT
87049: PUSH
87050: LD_VAR 0 1
87054: NOT
87055: OR
87056: PUSH
87057: LD_VAR 0 2
87061: NOT
87062: OR
87063: IFFALSE 87067
// exit ;
87065: GO 87092
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
87067: LD_ADDR_EXP 54
87071: PUSH
87072: LD_EXP 54
87076: PPUSH
87077: LD_VAR 0 1
87081: PPUSH
87082: LD_VAR 0 2
87086: PPUSH
87087: CALL_OW 1
87091: ST_TO_ADDR
// end ;
87092: LD_VAR 0 3
87096: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
87097: LD_INT 0
87099: PPUSH
// if not mc_bases or not base or not teleports_exit then
87100: LD_EXP 36
87104: NOT
87105: PUSH
87106: LD_VAR 0 1
87110: NOT
87111: OR
87112: PUSH
87113: LD_VAR 0 2
87117: NOT
87118: OR
87119: IFFALSE 87123
// exit ;
87121: GO 87148
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
87123: LD_ADDR_EXP 71
87127: PUSH
87128: LD_EXP 71
87132: PPUSH
87133: LD_VAR 0 1
87137: PPUSH
87138: LD_VAR 0 2
87142: PPUSH
87143: CALL_OW 1
87147: ST_TO_ADDR
// end ;
87148: LD_VAR 0 3
87152: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
87153: LD_INT 0
87155: PPUSH
87156: PPUSH
87157: PPUSH
// if not mc_bases or not base or not ext_list then
87158: LD_EXP 36
87162: NOT
87163: PUSH
87164: LD_VAR 0 1
87168: NOT
87169: OR
87170: PUSH
87171: LD_VAR 0 5
87175: NOT
87176: OR
87177: IFFALSE 87181
// exit ;
87179: GO 87354
// tmp := GetFacExtXYD ( x , y , d ) ;
87181: LD_ADDR_VAR 0 8
87185: PUSH
87186: LD_VAR 0 2
87190: PPUSH
87191: LD_VAR 0 3
87195: PPUSH
87196: LD_VAR 0 4
87200: PPUSH
87201: CALL 59864 0 3
87205: ST_TO_ADDR
// if not tmp then
87206: LD_VAR 0 8
87210: NOT
87211: IFFALSE 87215
// exit ;
87213: GO 87354
// for i in tmp do
87215: LD_ADDR_VAR 0 7
87219: PUSH
87220: LD_VAR 0 8
87224: PUSH
87225: FOR_IN
87226: IFFALSE 87352
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
87228: LD_ADDR_EXP 41
87232: PUSH
87233: LD_EXP 41
87237: PPUSH
87238: LD_VAR 0 1
87242: PPUSH
87243: LD_EXP 41
87247: PUSH
87248: LD_VAR 0 1
87252: ARRAY
87253: PPUSH
87254: LD_EXP 41
87258: PUSH
87259: LD_VAR 0 1
87263: ARRAY
87264: PUSH
87265: LD_INT 1
87267: PLUS
87268: PPUSH
87269: LD_VAR 0 5
87273: PUSH
87274: LD_INT 1
87276: ARRAY
87277: PUSH
87278: LD_VAR 0 7
87282: PUSH
87283: LD_INT 1
87285: ARRAY
87286: PUSH
87287: LD_VAR 0 7
87291: PUSH
87292: LD_INT 2
87294: ARRAY
87295: PUSH
87296: LD_VAR 0 7
87300: PUSH
87301: LD_INT 3
87303: ARRAY
87304: PUSH
87305: EMPTY
87306: LIST
87307: LIST
87308: LIST
87309: LIST
87310: PPUSH
87311: CALL_OW 2
87315: PPUSH
87316: CALL_OW 1
87320: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
87321: LD_ADDR_VAR 0 5
87325: PUSH
87326: LD_VAR 0 5
87330: PPUSH
87331: LD_INT 1
87333: PPUSH
87334: CALL_OW 3
87338: ST_TO_ADDR
// if not ext_list then
87339: LD_VAR 0 5
87343: NOT
87344: IFFALSE 87350
// exit ;
87346: POP
87347: POP
87348: GO 87354
// end ;
87350: GO 87225
87352: POP
87353: POP
// end ;
87354: LD_VAR 0 6
87358: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
87359: LD_INT 0
87361: PPUSH
// if not mc_bases or not base or not weapon_list then
87362: LD_EXP 36
87366: NOT
87367: PUSH
87368: LD_VAR 0 1
87372: NOT
87373: OR
87374: PUSH
87375: LD_VAR 0 2
87379: NOT
87380: OR
87381: IFFALSE 87385
// exit ;
87383: GO 87410
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
87385: LD_ADDR_EXP 75
87389: PUSH
87390: LD_EXP 75
87394: PPUSH
87395: LD_VAR 0 1
87399: PPUSH
87400: LD_VAR 0 2
87404: PPUSH
87405: CALL_OW 1
87409: ST_TO_ADDR
// end ;
87410: LD_VAR 0 3
87414: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
87415: LD_INT 0
87417: PPUSH
// if not mc_bases or not base or not tech_list then
87418: LD_EXP 36
87422: NOT
87423: PUSH
87424: LD_VAR 0 1
87428: NOT
87429: OR
87430: PUSH
87431: LD_VAR 0 2
87435: NOT
87436: OR
87437: IFFALSE 87441
// exit ;
87439: GO 87466
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
87441: LD_ADDR_EXP 63
87445: PUSH
87446: LD_EXP 63
87450: PPUSH
87451: LD_VAR 0 1
87455: PPUSH
87456: LD_VAR 0 2
87460: PPUSH
87461: CALL_OW 1
87465: ST_TO_ADDR
// end ;
87466: LD_VAR 0 3
87470: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
87471: LD_INT 0
87473: PPUSH
// if not mc_bases or not parking_area or not base then
87474: LD_EXP 36
87478: NOT
87479: PUSH
87480: LD_VAR 0 2
87484: NOT
87485: OR
87486: PUSH
87487: LD_VAR 0 1
87491: NOT
87492: OR
87493: IFFALSE 87497
// exit ;
87495: GO 87522
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
87497: LD_ADDR_EXP 60
87501: PUSH
87502: LD_EXP 60
87506: PPUSH
87507: LD_VAR 0 1
87511: PPUSH
87512: LD_VAR 0 2
87516: PPUSH
87517: CALL_OW 1
87521: ST_TO_ADDR
// end ;
87522: LD_VAR 0 3
87526: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
87527: LD_INT 0
87529: PPUSH
// if not mc_bases or not base or not scan_area then
87530: LD_EXP 36
87534: NOT
87535: PUSH
87536: LD_VAR 0 1
87540: NOT
87541: OR
87542: PUSH
87543: LD_VAR 0 2
87547: NOT
87548: OR
87549: IFFALSE 87553
// exit ;
87551: GO 87578
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
87553: LD_ADDR_EXP 61
87557: PUSH
87558: LD_EXP 61
87562: PPUSH
87563: LD_VAR 0 1
87567: PPUSH
87568: LD_VAR 0 2
87572: PPUSH
87573: CALL_OW 1
87577: ST_TO_ADDR
// end ;
87578: LD_VAR 0 3
87582: RET
// export function MC_NotTameApeman ( base ) ; var ape_techs ; begin
87583: LD_INT 0
87585: PPUSH
87586: PPUSH
// if not mc_bases or not base then
87587: LD_EXP 36
87591: NOT
87592: PUSH
87593: LD_VAR 0 1
87597: NOT
87598: OR
87599: IFFALSE 87603
// exit ;
87601: GO 87667
// ape_techs := [ 1 , 2 , 3 , 4 , 11 ] ;
87603: LD_ADDR_VAR 0 3
87607: PUSH
87608: LD_INT 1
87610: PUSH
87611: LD_INT 2
87613: PUSH
87614: LD_INT 3
87616: PUSH
87617: LD_INT 4
87619: PUSH
87620: LD_INT 11
87622: PUSH
87623: EMPTY
87624: LIST
87625: LIST
87626: LIST
87627: LIST
87628: LIST
87629: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , mc_tech [ base ] diff ape_techs ) ;
87630: LD_ADDR_EXP 63
87634: PUSH
87635: LD_EXP 63
87639: PPUSH
87640: LD_VAR 0 1
87644: PPUSH
87645: LD_EXP 63
87649: PUSH
87650: LD_VAR 0 1
87654: ARRAY
87655: PUSH
87656: LD_VAR 0 3
87660: DIFF
87661: PPUSH
87662: CALL_OW 1
87666: ST_TO_ADDR
// end ;
87667: LD_VAR 0 2
87671: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
87672: LD_INT 0
87674: PPUSH
// result := mc_vehicles [ base ] ;
87675: LD_ADDR_VAR 0 3
87679: PUSH
87680: LD_EXP 55
87684: PUSH
87685: LD_VAR 0 1
87689: ARRAY
87690: ST_TO_ADDR
// if onlyCombat then
87691: LD_VAR 0 2
87695: IFFALSE 87860
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] , [ f_weapon , ru_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ) ;
87697: LD_ADDR_VAR 0 3
87701: PUSH
87702: LD_VAR 0 3
87706: PUSH
87707: LD_VAR 0 3
87711: PPUSH
87712: LD_INT 2
87714: PUSH
87715: LD_INT 34
87717: PUSH
87718: LD_INT 12
87720: PUSH
87721: EMPTY
87722: LIST
87723: LIST
87724: PUSH
87725: LD_INT 34
87727: PUSH
87728: LD_INT 51
87730: PUSH
87731: EMPTY
87732: LIST
87733: LIST
87734: PUSH
87735: LD_INT 34
87737: PUSH
87738: LD_EXP 30
87742: PUSH
87743: EMPTY
87744: LIST
87745: LIST
87746: PUSH
87747: LD_INT 34
87749: PUSH
87750: LD_INT 32
87752: PUSH
87753: EMPTY
87754: LIST
87755: LIST
87756: PUSH
87757: LD_INT 34
87759: PUSH
87760: LD_INT 13
87762: PUSH
87763: EMPTY
87764: LIST
87765: LIST
87766: PUSH
87767: LD_INT 34
87769: PUSH
87770: LD_INT 52
87772: PUSH
87773: EMPTY
87774: LIST
87775: LIST
87776: PUSH
87777: LD_INT 34
87779: PUSH
87780: LD_INT 14
87782: PUSH
87783: EMPTY
87784: LIST
87785: LIST
87786: PUSH
87787: LD_INT 34
87789: PUSH
87790: LD_INT 53
87792: PUSH
87793: EMPTY
87794: LIST
87795: LIST
87796: PUSH
87797: LD_INT 34
87799: PUSH
87800: LD_EXP 29
87804: PUSH
87805: EMPTY
87806: LIST
87807: LIST
87808: PUSH
87809: LD_INT 34
87811: PUSH
87812: LD_INT 31
87814: PUSH
87815: EMPTY
87816: LIST
87817: LIST
87818: PUSH
87819: LD_INT 34
87821: PUSH
87822: LD_INT 48
87824: PUSH
87825: EMPTY
87826: LIST
87827: LIST
87828: PUSH
87829: LD_INT 34
87831: PUSH
87832: LD_INT 8
87834: PUSH
87835: EMPTY
87836: LIST
87837: LIST
87838: PUSH
87839: EMPTY
87840: LIST
87841: LIST
87842: LIST
87843: LIST
87844: LIST
87845: LIST
87846: LIST
87847: LIST
87848: LIST
87849: LIST
87850: LIST
87851: LIST
87852: LIST
87853: PPUSH
87854: CALL_OW 72
87858: DIFF
87859: ST_TO_ADDR
// end ; end_of_file
87860: LD_VAR 0 3
87864: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
87865: LD_INT 0
87867: PPUSH
87868: PPUSH
87869: PPUSH
// if not mc_bases or not skirmish then
87870: LD_EXP 36
87874: NOT
87875: PUSH
87876: LD_EXP 34
87880: NOT
87881: OR
87882: IFFALSE 87886
// exit ;
87884: GO 88051
// for i = 1 to mc_bases do
87886: LD_ADDR_VAR 0 4
87890: PUSH
87891: DOUBLE
87892: LD_INT 1
87894: DEC
87895: ST_TO_ADDR
87896: LD_EXP 36
87900: PUSH
87901: FOR_TO
87902: IFFALSE 88049
// begin if sci in mc_bases [ i ] then
87904: LD_VAR 0 2
87908: PUSH
87909: LD_EXP 36
87913: PUSH
87914: LD_VAR 0 4
87918: ARRAY
87919: IN
87920: IFFALSE 88047
// begin mc_ape := ReplaceIn ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
87922: LD_ADDR_EXP 65
87926: PUSH
87927: LD_EXP 65
87931: PPUSH
87932: LD_VAR 0 4
87936: PUSH
87937: LD_EXP 65
87941: PUSH
87942: LD_VAR 0 4
87946: ARRAY
87947: PUSH
87948: LD_INT 1
87950: PLUS
87951: PUSH
87952: EMPTY
87953: LIST
87954: LIST
87955: PPUSH
87956: LD_VAR 0 1
87960: PPUSH
87961: CALL 26486 0 3
87965: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
87966: LD_ADDR_VAR 0 5
87970: PUSH
87971: LD_EXP 36
87975: PUSH
87976: LD_VAR 0 4
87980: ARRAY
87981: PPUSH
87982: LD_INT 2
87984: PUSH
87985: LD_INT 30
87987: PUSH
87988: LD_INT 0
87990: PUSH
87991: EMPTY
87992: LIST
87993: LIST
87994: PUSH
87995: LD_INT 30
87997: PUSH
87998: LD_INT 1
88000: PUSH
88001: EMPTY
88002: LIST
88003: LIST
88004: PUSH
88005: EMPTY
88006: LIST
88007: LIST
88008: LIST
88009: PPUSH
88010: CALL_OW 72
88014: PPUSH
88015: LD_VAR 0 1
88019: PPUSH
88020: CALL_OW 74
88024: ST_TO_ADDR
// if tmp then
88025: LD_VAR 0 5
88029: IFFALSE 88045
// ComStandNearbyBuilding ( ape , tmp ) ;
88031: LD_VAR 0 1
88035: PPUSH
88036: LD_VAR 0 5
88040: PPUSH
88041: CALL 20778 0 2
// break ;
88045: GO 88049
// end ; end ;
88047: GO 87901
88049: POP
88050: POP
// end ;
88051: LD_VAR 0 3
88055: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
88056: LD_INT 0
88058: PPUSH
88059: PPUSH
88060: PPUSH
// if not mc_bases or not skirmish then
88061: LD_EXP 36
88065: NOT
88066: PUSH
88067: LD_EXP 34
88071: NOT
88072: OR
88073: IFFALSE 88077
// exit ;
88075: GO 88166
// for i = 1 to mc_bases do
88077: LD_ADDR_VAR 0 4
88081: PUSH
88082: DOUBLE
88083: LD_INT 1
88085: DEC
88086: ST_TO_ADDR
88087: LD_EXP 36
88091: PUSH
88092: FOR_TO
88093: IFFALSE 88164
// begin if building in mc_busy_turret_list [ i ] then
88095: LD_VAR 0 1
88099: PUSH
88100: LD_EXP 46
88104: PUSH
88105: LD_VAR 0 4
88109: ARRAY
88110: IN
88111: IFFALSE 88162
// begin tmp := mc_busy_turret_list [ i ] diff building ;
88113: LD_ADDR_VAR 0 5
88117: PUSH
88118: LD_EXP 46
88122: PUSH
88123: LD_VAR 0 4
88127: ARRAY
88128: PUSH
88129: LD_VAR 0 1
88133: DIFF
88134: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
88135: LD_ADDR_EXP 46
88139: PUSH
88140: LD_EXP 46
88144: PPUSH
88145: LD_VAR 0 4
88149: PPUSH
88150: LD_VAR 0 5
88154: PPUSH
88155: CALL_OW 1
88159: ST_TO_ADDR
// break ;
88160: GO 88164
// end ; end ;
88162: GO 88092
88164: POP
88165: POP
// end ;
88166: LD_VAR 0 3
88170: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
88171: LD_INT 0
88173: PPUSH
88174: PPUSH
88175: PPUSH
// if not mc_bases or not skirmish then
88176: LD_EXP 36
88180: NOT
88181: PUSH
88182: LD_EXP 34
88186: NOT
88187: OR
88188: IFFALSE 88192
// exit ;
88190: GO 88391
// for i = 1 to mc_bases do
88192: LD_ADDR_VAR 0 5
88196: PUSH
88197: DOUBLE
88198: LD_INT 1
88200: DEC
88201: ST_TO_ADDR
88202: LD_EXP 36
88206: PUSH
88207: FOR_TO
88208: IFFALSE 88389
// if building in mc_bases [ i ] then
88210: LD_VAR 0 1
88214: PUSH
88215: LD_EXP 36
88219: PUSH
88220: LD_VAR 0 5
88224: ARRAY
88225: IN
88226: IFFALSE 88387
// begin tmp := mc_bases [ i ] diff building ;
88228: LD_ADDR_VAR 0 6
88232: PUSH
88233: LD_EXP 36
88237: PUSH
88238: LD_VAR 0 5
88242: ARRAY
88243: PUSH
88244: LD_VAR 0 1
88248: DIFF
88249: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
88250: LD_ADDR_EXP 36
88254: PUSH
88255: LD_EXP 36
88259: PPUSH
88260: LD_VAR 0 5
88264: PPUSH
88265: LD_VAR 0 6
88269: PPUSH
88270: CALL_OW 1
88274: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
88275: LD_VAR 0 1
88279: PUSH
88280: LD_EXP 44
88284: PUSH
88285: LD_VAR 0 5
88289: ARRAY
88290: IN
88291: IFFALSE 88330
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
88293: LD_ADDR_EXP 44
88297: PUSH
88298: LD_EXP 44
88302: PPUSH
88303: LD_VAR 0 5
88307: PPUSH
88308: LD_EXP 44
88312: PUSH
88313: LD_VAR 0 5
88317: ARRAY
88318: PUSH
88319: LD_VAR 0 1
88323: DIFF
88324: PPUSH
88325: CALL_OW 1
88329: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
88330: LD_VAR 0 1
88334: PUSH
88335: LD_EXP 45
88339: PUSH
88340: LD_VAR 0 5
88344: ARRAY
88345: IN
88346: IFFALSE 88385
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
88348: LD_ADDR_EXP 45
88352: PUSH
88353: LD_EXP 45
88357: PPUSH
88358: LD_VAR 0 5
88362: PPUSH
88363: LD_EXP 45
88367: PUSH
88368: LD_VAR 0 5
88372: ARRAY
88373: PUSH
88374: LD_VAR 0 1
88378: DIFF
88379: PPUSH
88380: CALL_OW 1
88384: ST_TO_ADDR
// break ;
88385: GO 88389
// end ;
88387: GO 88207
88389: POP
88390: POP
// end ;
88391: LD_VAR 0 4
88395: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
88396: LD_INT 0
88398: PPUSH
88399: PPUSH
88400: PPUSH
// if not mc_bases or not skirmish or not side in mc_sides then
88401: LD_EXP 36
88405: NOT
88406: PUSH
88407: LD_EXP 34
88411: NOT
88412: OR
88413: PUSH
88414: LD_VAR 0 3
88418: PUSH
88419: LD_EXP 62
88423: IN
88424: NOT
88425: OR
88426: IFFALSE 88430
// exit ;
88428: GO 88553
// for i = 1 to mc_vehicles do
88430: LD_ADDR_VAR 0 6
88434: PUSH
88435: DOUBLE
88436: LD_INT 1
88438: DEC
88439: ST_TO_ADDR
88440: LD_EXP 55
88444: PUSH
88445: FOR_TO
88446: IFFALSE 88551
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
88448: LD_VAR 0 2
88452: PUSH
88453: LD_EXP 55
88457: PUSH
88458: LD_VAR 0 6
88462: ARRAY
88463: IN
88464: PUSH
88465: LD_VAR 0 1
88469: PUSH
88470: LD_EXP 55
88474: PUSH
88475: LD_VAR 0 6
88479: ARRAY
88480: IN
88481: OR
88482: IFFALSE 88549
// begin tmp := mc_vehicles [ i ] diff old ;
88484: LD_ADDR_VAR 0 7
88488: PUSH
88489: LD_EXP 55
88493: PUSH
88494: LD_VAR 0 6
88498: ARRAY
88499: PUSH
88500: LD_VAR 0 2
88504: DIFF
88505: ST_TO_ADDR
// tmp := tmp diff new ;
88506: LD_ADDR_VAR 0 7
88510: PUSH
88511: LD_VAR 0 7
88515: PUSH
88516: LD_VAR 0 1
88520: DIFF
88521: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
88522: LD_ADDR_EXP 55
88526: PUSH
88527: LD_EXP 55
88531: PPUSH
88532: LD_VAR 0 6
88536: PPUSH
88537: LD_VAR 0 7
88541: PPUSH
88542: CALL_OW 1
88546: ST_TO_ADDR
// break ;
88547: GO 88551
// end ;
88549: GO 88445
88551: POP
88552: POP
// end ;
88553: LD_VAR 0 5
88557: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
88558: LD_INT 0
88560: PPUSH
88561: PPUSH
88562: PPUSH
88563: PPUSH
// if not mc_bases or not skirmish then
88564: LD_EXP 36
88568: NOT
88569: PUSH
88570: LD_EXP 34
88574: NOT
88575: OR
88576: IFFALSE 88580
// exit ;
88578: GO 88957
// side := GetSide ( vehicle ) ;
88580: LD_ADDR_VAR 0 5
88584: PUSH
88585: LD_VAR 0 1
88589: PPUSH
88590: CALL_OW 255
88594: ST_TO_ADDR
// for i = 1 to mc_bases do
88595: LD_ADDR_VAR 0 4
88599: PUSH
88600: DOUBLE
88601: LD_INT 1
88603: DEC
88604: ST_TO_ADDR
88605: LD_EXP 36
88609: PUSH
88610: FOR_TO
88611: IFFALSE 88955
// begin if factory in mc_bases [ i ] then
88613: LD_VAR 0 2
88617: PUSH
88618: LD_EXP 36
88622: PUSH
88623: LD_VAR 0 4
88627: ARRAY
88628: IN
88629: IFFALSE 88953
// begin if mc_defender [ i ] < mc_defender_limit [ i ] and not GetWeapon ( vehicle ) in [ ar_control_tower , ar_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , us_cargo_bay , ar_radar , ru_radar , us_radar , ru_bulldozer , us_bulldozer , ar_bio_bomb , ar_selfpropelled_bomb , us_hack , us_crane , ru_crane , ru_siberium_rocket , us_siberium_rocket ] then
88631: LD_EXP 58
88635: PUSH
88636: LD_VAR 0 4
88640: ARRAY
88641: PUSH
88642: LD_EXP 47
88646: PUSH
88647: LD_VAR 0 4
88651: ARRAY
88652: LESS
88653: PUSH
88654: LD_VAR 0 1
88658: PPUSH
88659: CALL_OW 264
88663: PUSH
88664: LD_INT 31
88666: PUSH
88667: LD_INT 32
88669: PUSH
88670: LD_INT 51
88672: PUSH
88673: LD_EXP 30
88677: PUSH
88678: LD_INT 12
88680: PUSH
88681: LD_INT 30
88683: PUSH
88684: LD_EXP 29
88688: PUSH
88689: LD_INT 11
88691: PUSH
88692: LD_INT 53
88694: PUSH
88695: LD_INT 14
88697: PUSH
88698: LD_EXP 33
88702: PUSH
88703: LD_INT 29
88705: PUSH
88706: LD_EXP 31
88710: PUSH
88711: LD_INT 13
88713: PUSH
88714: LD_INT 52
88716: PUSH
88717: LD_INT 48
88719: PUSH
88720: LD_INT 8
88722: PUSH
88723: EMPTY
88724: LIST
88725: LIST
88726: LIST
88727: LIST
88728: LIST
88729: LIST
88730: LIST
88731: LIST
88732: LIST
88733: LIST
88734: LIST
88735: LIST
88736: LIST
88737: LIST
88738: LIST
88739: LIST
88740: LIST
88741: IN
88742: NOT
88743: AND
88744: IFFALSE 88792
// mc_defender := ReplaceIn ( mc_defender , [ i , mc_defender [ i ] + 1 ] , vehicle ) else
88746: LD_ADDR_EXP 58
88750: PUSH
88751: LD_EXP 58
88755: PPUSH
88756: LD_VAR 0 4
88760: PUSH
88761: LD_EXP 58
88765: PUSH
88766: LD_VAR 0 4
88770: ARRAY
88771: PUSH
88772: LD_INT 1
88774: PLUS
88775: PUSH
88776: EMPTY
88777: LIST
88778: LIST
88779: PPUSH
88780: LD_VAR 0 1
88784: PPUSH
88785: CALL 26486 0 3
88789: ST_TO_ADDR
88790: GO 88836
// mc_vehicles := ReplaceIn ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
88792: LD_ADDR_EXP 55
88796: PUSH
88797: LD_EXP 55
88801: PPUSH
88802: LD_VAR 0 4
88806: PUSH
88807: LD_EXP 55
88811: PUSH
88812: LD_VAR 0 4
88816: ARRAY
88817: PUSH
88818: LD_INT 1
88820: PLUS
88821: PUSH
88822: EMPTY
88823: LIST
88824: LIST
88825: PPUSH
88826: LD_VAR 0 1
88830: PPUSH
88831: CALL 26486 0 3
88835: ST_TO_ADDR
// if GetControl ( vehicle ) = control_remote then
88836: LD_VAR 0 1
88840: PPUSH
88841: CALL_OW 263
88845: PUSH
88846: LD_INT 2
88848: EQUAL
88849: IFFALSE 88869
// begin repeat wait ( 0 0$1 ) ;
88851: LD_INT 35
88853: PPUSH
88854: CALL_OW 67
// until IsControledBy ( vehicle ) ;
88858: LD_VAR 0 1
88862: PPUSH
88863: CALL_OW 312
88867: IFFALSE 88851
// end ; ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
88869: LD_VAR 0 1
88873: PPUSH
88874: LD_EXP 60
88878: PUSH
88879: LD_VAR 0 4
88883: ARRAY
88884: PPUSH
88885: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
88889: LD_VAR 0 1
88893: PPUSH
88894: CALL_OW 263
88898: PUSH
88899: LD_INT 1
88901: NONEQUAL
88902: IFFALSE 88906
// break ;
88904: GO 88955
// repeat wait ( 0 0$1 ) ;
88906: LD_INT 35
88908: PPUSH
88909: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
88913: LD_VAR 0 1
88917: PPUSH
88918: LD_EXP 60
88922: PUSH
88923: LD_VAR 0 4
88927: ARRAY
88928: PPUSH
88929: CALL_OW 308
88933: IFFALSE 88906
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
88935: LD_VAR 0 1
88939: PPUSH
88940: CALL_OW 311
88944: PPUSH
88945: CALL_OW 121
// exit ;
88949: POP
88950: POP
88951: GO 88957
// end ; end ;
88953: GO 88610
88955: POP
88956: POP
// end ;
88957: LD_VAR 0 3
88961: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
88962: LD_INT 0
88964: PPUSH
88965: PPUSH
88966: PPUSH
88967: PPUSH
// if not mc_bases or not skirmish then
88968: LD_EXP 36
88972: NOT
88973: PUSH
88974: LD_EXP 34
88978: NOT
88979: OR
88980: IFFALSE 88984
// exit ;
88982: GO 89337
// repeat wait ( 0 0$1 ) ;
88984: LD_INT 35
88986: PPUSH
88987: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
88991: LD_VAR 0 2
88995: PPUSH
88996: LD_VAR 0 3
89000: PPUSH
89001: CALL_OW 284
89005: IFFALSE 88984
// if GetResourceTypeXY ( x , y ) = mat_artefact then
89007: LD_VAR 0 2
89011: PPUSH
89012: LD_VAR 0 3
89016: PPUSH
89017: CALL_OW 283
89021: PUSH
89022: LD_INT 4
89024: EQUAL
89025: IFFALSE 89029
// exit ;
89027: GO 89337
// for i = 1 to mc_bases do
89029: LD_ADDR_VAR 0 7
89033: PUSH
89034: DOUBLE
89035: LD_INT 1
89037: DEC
89038: ST_TO_ADDR
89039: LD_EXP 36
89043: PUSH
89044: FOR_TO
89045: IFFALSE 89335
// begin if mc_crates_area [ i ] then
89047: LD_EXP 54
89051: PUSH
89052: LD_VAR 0 7
89056: ARRAY
89057: IFFALSE 89168
// for j in mc_crates_area [ i ] do
89059: LD_ADDR_VAR 0 8
89063: PUSH
89064: LD_EXP 54
89068: PUSH
89069: LD_VAR 0 7
89073: ARRAY
89074: PUSH
89075: FOR_IN
89076: IFFALSE 89166
// if InArea ( x , y , j ) then
89078: LD_VAR 0 2
89082: PPUSH
89083: LD_VAR 0 3
89087: PPUSH
89088: LD_VAR 0 8
89092: PPUSH
89093: CALL_OW 309
89097: IFFALSE 89164
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
89099: LD_ADDR_EXP 52
89103: PUSH
89104: LD_EXP 52
89108: PPUSH
89109: LD_VAR 0 7
89113: PUSH
89114: LD_EXP 52
89118: PUSH
89119: LD_VAR 0 7
89123: ARRAY
89124: PUSH
89125: LD_INT 1
89127: PLUS
89128: PUSH
89129: EMPTY
89130: LIST
89131: LIST
89132: PPUSH
89133: LD_VAR 0 4
89137: PUSH
89138: LD_VAR 0 2
89142: PUSH
89143: LD_VAR 0 3
89147: PUSH
89148: EMPTY
89149: LIST
89150: LIST
89151: LIST
89152: PPUSH
89153: CALL 26486 0 3
89157: ST_TO_ADDR
// exit ;
89158: POP
89159: POP
89160: POP
89161: POP
89162: GO 89337
// end ;
89164: GO 89075
89166: POP
89167: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
89168: LD_ADDR_VAR 0 9
89172: PUSH
89173: LD_EXP 36
89177: PUSH
89178: LD_VAR 0 7
89182: ARRAY
89183: PPUSH
89184: LD_INT 2
89186: PUSH
89187: LD_INT 30
89189: PUSH
89190: LD_INT 0
89192: PUSH
89193: EMPTY
89194: LIST
89195: LIST
89196: PUSH
89197: LD_INT 30
89199: PUSH
89200: LD_INT 1
89202: PUSH
89203: EMPTY
89204: LIST
89205: LIST
89206: PUSH
89207: EMPTY
89208: LIST
89209: LIST
89210: LIST
89211: PPUSH
89212: CALL_OW 72
89216: ST_TO_ADDR
// if not depot then
89217: LD_VAR 0 9
89221: NOT
89222: IFFALSE 89226
// continue ;
89224: GO 89044
// for j in depot do
89226: LD_ADDR_VAR 0 8
89230: PUSH
89231: LD_VAR 0 9
89235: PUSH
89236: FOR_IN
89237: IFFALSE 89331
// if GetDistUnitXY ( j , x , y ) < 30 then
89239: LD_VAR 0 8
89243: PPUSH
89244: LD_VAR 0 2
89248: PPUSH
89249: LD_VAR 0 3
89253: PPUSH
89254: CALL_OW 297
89258: PUSH
89259: LD_INT 30
89261: LESS
89262: IFFALSE 89329
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
89264: LD_ADDR_EXP 52
89268: PUSH
89269: LD_EXP 52
89273: PPUSH
89274: LD_VAR 0 7
89278: PUSH
89279: LD_EXP 52
89283: PUSH
89284: LD_VAR 0 7
89288: ARRAY
89289: PUSH
89290: LD_INT 1
89292: PLUS
89293: PUSH
89294: EMPTY
89295: LIST
89296: LIST
89297: PPUSH
89298: LD_VAR 0 4
89302: PUSH
89303: LD_VAR 0 2
89307: PUSH
89308: LD_VAR 0 3
89312: PUSH
89313: EMPTY
89314: LIST
89315: LIST
89316: LIST
89317: PPUSH
89318: CALL 26486 0 3
89322: ST_TO_ADDR
// exit ;
89323: POP
89324: POP
89325: POP
89326: POP
89327: GO 89337
// end ;
89329: GO 89236
89331: POP
89332: POP
// end ;
89333: GO 89044
89335: POP
89336: POP
// end ;
89337: LD_VAR 0 6
89341: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
89342: LD_INT 0
89344: PPUSH
89345: PPUSH
89346: PPUSH
89347: PPUSH
// if not mc_bases or not skirmish then
89348: LD_EXP 36
89352: NOT
89353: PUSH
89354: LD_EXP 34
89358: NOT
89359: OR
89360: IFFALSE 89364
// exit ;
89362: GO 89641
// side := GetSide ( lab ) ;
89364: LD_ADDR_VAR 0 4
89368: PUSH
89369: LD_VAR 0 2
89373: PPUSH
89374: CALL_OW 255
89378: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
89379: LD_VAR 0 4
89383: PUSH
89384: LD_EXP 62
89388: IN
89389: NOT
89390: PUSH
89391: LD_EXP 63
89395: NOT
89396: OR
89397: PUSH
89398: LD_EXP 36
89402: NOT
89403: OR
89404: IFFALSE 89408
// exit ;
89406: GO 89641
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
89408: LD_ADDR_EXP 63
89412: PUSH
89413: LD_EXP 63
89417: PPUSH
89418: LD_VAR 0 4
89422: PPUSH
89423: LD_EXP 63
89427: PUSH
89428: LD_VAR 0 4
89432: ARRAY
89433: PUSH
89434: LD_VAR 0 1
89438: DIFF
89439: PPUSH
89440: CALL_OW 1
89444: ST_TO_ADDR
// for i = 1 to mc_bases do
89445: LD_ADDR_VAR 0 5
89449: PUSH
89450: DOUBLE
89451: LD_INT 1
89453: DEC
89454: ST_TO_ADDR
89455: LD_EXP 36
89459: PUSH
89460: FOR_TO
89461: IFFALSE 89639
// begin if lab in mc_bases [ i ] then
89463: LD_VAR 0 2
89467: PUSH
89468: LD_EXP 36
89472: PUSH
89473: LD_VAR 0 5
89477: ARRAY
89478: IN
89479: IFFALSE 89637
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
89481: LD_VAR 0 1
89485: PUSH
89486: LD_INT 11
89488: PUSH
89489: LD_INT 4
89491: PUSH
89492: LD_INT 3
89494: PUSH
89495: LD_INT 2
89497: PUSH
89498: EMPTY
89499: LIST
89500: LIST
89501: LIST
89502: LIST
89503: IN
89504: PUSH
89505: LD_EXP 66
89509: PUSH
89510: LD_VAR 0 5
89514: ARRAY
89515: AND
89516: IFFALSE 89637
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
89518: LD_ADDR_VAR 0 6
89522: PUSH
89523: LD_EXP 66
89527: PUSH
89528: LD_VAR 0 5
89532: ARRAY
89533: PUSH
89534: LD_INT 1
89536: ARRAY
89537: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
89538: LD_ADDR_EXP 66
89542: PUSH
89543: LD_EXP 66
89547: PPUSH
89548: LD_VAR 0 5
89552: PPUSH
89553: EMPTY
89554: PPUSH
89555: CALL_OW 1
89559: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
89560: LD_VAR 0 6
89564: PPUSH
89565: LD_INT 0
89567: PPUSH
89568: CALL_OW 109
// ComExitBuilding ( tmp ) ;
89572: LD_VAR 0 6
89576: PPUSH
89577: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
89581: LD_ADDR_EXP 65
89585: PUSH
89586: LD_EXP 65
89590: PPUSH
89591: LD_VAR 0 5
89595: PPUSH
89596: LD_EXP 65
89600: PUSH
89601: LD_VAR 0 5
89605: ARRAY
89606: PPUSH
89607: LD_INT 1
89609: PPUSH
89610: LD_VAR 0 6
89614: PPUSH
89615: CALL_OW 2
89619: PPUSH
89620: CALL_OW 1
89624: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
89625: LD_VAR 0 5
89629: PPUSH
89630: LD_INT 112
89632: PPUSH
89633: CALL 66533 0 2
// end ; end ; end ;
89637: GO 89460
89639: POP
89640: POP
// end ;
89641: LD_VAR 0 3
89645: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
89646: LD_INT 0
89648: PPUSH
89649: PPUSH
89650: PPUSH
89651: PPUSH
89652: PPUSH
89653: PPUSH
89654: PPUSH
89655: PPUSH
// if not mc_bases or not skirmish then
89656: LD_EXP 36
89660: NOT
89661: PUSH
89662: LD_EXP 34
89666: NOT
89667: OR
89668: IFFALSE 89672
// exit ;
89670: GO 91043
// for i = 1 to mc_bases do
89672: LD_ADDR_VAR 0 3
89676: PUSH
89677: DOUBLE
89678: LD_INT 1
89680: DEC
89681: ST_TO_ADDR
89682: LD_EXP 36
89686: PUSH
89687: FOR_TO
89688: IFFALSE 91041
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_defender [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
89690: LD_VAR 0 1
89694: PUSH
89695: LD_EXP 36
89699: PUSH
89700: LD_VAR 0 3
89704: ARRAY
89705: IN
89706: PUSH
89707: LD_VAR 0 1
89711: PUSH
89712: LD_EXP 43
89716: PUSH
89717: LD_VAR 0 3
89721: ARRAY
89722: IN
89723: OR
89724: PUSH
89725: LD_VAR 0 1
89729: PUSH
89730: LD_EXP 58
89734: PUSH
89735: LD_VAR 0 3
89739: ARRAY
89740: IN
89741: OR
89742: PUSH
89743: LD_VAR 0 1
89747: PUSH
89748: LD_EXP 55
89752: PUSH
89753: LD_VAR 0 3
89757: ARRAY
89758: IN
89759: OR
89760: PUSH
89761: LD_VAR 0 1
89765: PUSH
89766: LD_EXP 65
89770: PUSH
89771: LD_VAR 0 3
89775: ARRAY
89776: IN
89777: OR
89778: PUSH
89779: LD_VAR 0 1
89783: PUSH
89784: LD_EXP 66
89788: PUSH
89789: LD_VAR 0 3
89793: ARRAY
89794: IN
89795: OR
89796: IFFALSE 91039
// begin if un in mc_ape [ i ] then
89798: LD_VAR 0 1
89802: PUSH
89803: LD_EXP 65
89807: PUSH
89808: LD_VAR 0 3
89812: ARRAY
89813: IN
89814: IFFALSE 89853
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
89816: LD_ADDR_EXP 65
89820: PUSH
89821: LD_EXP 65
89825: PPUSH
89826: LD_VAR 0 3
89830: PPUSH
89831: LD_EXP 65
89835: PUSH
89836: LD_VAR 0 3
89840: ARRAY
89841: PUSH
89842: LD_VAR 0 1
89846: DIFF
89847: PPUSH
89848: CALL_OW 1
89852: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
89853: LD_VAR 0 1
89857: PUSH
89858: LD_EXP 66
89862: PUSH
89863: LD_VAR 0 3
89867: ARRAY
89868: IN
89869: IFFALSE 89893
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
89871: LD_ADDR_EXP 66
89875: PUSH
89876: LD_EXP 66
89880: PPUSH
89881: LD_VAR 0 3
89885: PPUSH
89886: EMPTY
89887: PPUSH
89888: CALL_OW 1
89892: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and ( GetTag ( un ) = 20 or un in mc_defender [ i ] or GetWeapon ( un ) in [ us_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , ar_cargo_bay , us_crane , ru_crane , ar_control_tower ] ) then
89893: LD_VAR 0 1
89897: PPUSH
89898: CALL_OW 247
89902: PUSH
89903: LD_INT 2
89905: EQUAL
89906: PUSH
89907: LD_VAR 0 1
89911: PPUSH
89912: CALL_OW 110
89916: PUSH
89917: LD_INT 20
89919: EQUAL
89920: PUSH
89921: LD_VAR 0 1
89925: PUSH
89926: LD_EXP 58
89930: PUSH
89931: LD_VAR 0 3
89935: ARRAY
89936: IN
89937: OR
89938: PUSH
89939: LD_VAR 0 1
89943: PPUSH
89944: CALL_OW 264
89948: PUSH
89949: LD_INT 12
89951: PUSH
89952: LD_INT 51
89954: PUSH
89955: LD_EXP 30
89959: PUSH
89960: LD_INT 32
89962: PUSH
89963: LD_INT 13
89965: PUSH
89966: LD_INT 52
89968: PUSH
89969: LD_INT 31
89971: PUSH
89972: EMPTY
89973: LIST
89974: LIST
89975: LIST
89976: LIST
89977: LIST
89978: LIST
89979: LIST
89980: IN
89981: OR
89982: AND
89983: IFFALSE 90291
// begin if un in mc_defender [ i ] then
89985: LD_VAR 0 1
89989: PUSH
89990: LD_EXP 58
89994: PUSH
89995: LD_VAR 0 3
89999: ARRAY
90000: IN
90001: IFFALSE 90040
// mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
90003: LD_ADDR_EXP 58
90007: PUSH
90008: LD_EXP 58
90012: PPUSH
90013: LD_VAR 0 3
90017: PPUSH
90018: LD_EXP 58
90022: PUSH
90023: LD_VAR 0 3
90027: ARRAY
90028: PUSH
90029: LD_VAR 0 1
90033: DIFF
90034: PPUSH
90035: CALL_OW 1
90039: ST_TO_ADDR
// fac := MC_GetBuildings ( i , b_factory ) ;
90040: LD_ADDR_VAR 0 8
90044: PUSH
90045: LD_VAR 0 3
90049: PPUSH
90050: LD_INT 3
90052: PPUSH
90053: CALL 86709 0 2
90057: ST_TO_ADDR
// if fac then
90058: LD_VAR 0 8
90062: IFFALSE 90291
// begin for j in fac do
90064: LD_ADDR_VAR 0 4
90068: PUSH
90069: LD_VAR 0 8
90073: PUSH
90074: FOR_IN
90075: IFFALSE 90289
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
90077: LD_ADDR_VAR 0 9
90081: PUSH
90082: LD_VAR 0 8
90086: PPUSH
90087: LD_VAR 0 1
90091: PPUSH
90092: CALL_OW 265
90096: PPUSH
90097: LD_VAR 0 1
90101: PPUSH
90102: CALL_OW 262
90106: PPUSH
90107: LD_VAR 0 1
90111: PPUSH
90112: CALL_OW 263
90116: PPUSH
90117: LD_VAR 0 1
90121: PPUSH
90122: CALL_OW 264
90126: PPUSH
90127: CALL 24018 0 5
90131: ST_TO_ADDR
// if components then
90132: LD_VAR 0 9
90136: IFFALSE 90287
// begin if GetWeapon ( un ) = ar_control_tower then
90138: LD_VAR 0 1
90142: PPUSH
90143: CALL_OW 264
90147: PUSH
90148: LD_INT 31
90150: EQUAL
90151: IFFALSE 90268
// begin SetTag ( IsDrivenBy ( un ) , 0 ) ;
90153: LD_VAR 0 1
90157: PPUSH
90158: CALL_OW 311
90162: PPUSH
90163: LD_INT 0
90165: PPUSH
90166: CALL_OW 109
// mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff IsDrivenBy ( un ) ) ;
90170: LD_ADDR_EXP 76
90174: PUSH
90175: LD_EXP 76
90179: PPUSH
90180: LD_VAR 0 3
90184: PPUSH
90185: LD_EXP 76
90189: PUSH
90190: LD_VAR 0 3
90194: ARRAY
90195: PUSH
90196: LD_VAR 0 1
90200: PPUSH
90201: CALL_OW 311
90205: DIFF
90206: PPUSH
90207: CALL_OW 1
90211: ST_TO_ADDR
// tmp := Insert ( mc_produce [ i ] , 1 , components ) ;
90212: LD_ADDR_VAR 0 7
90216: PUSH
90217: LD_EXP 57
90221: PUSH
90222: LD_VAR 0 3
90226: ARRAY
90227: PPUSH
90228: LD_INT 1
90230: PPUSH
90231: LD_VAR 0 9
90235: PPUSH
90236: CALL_OW 2
90240: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
90241: LD_ADDR_EXP 57
90245: PUSH
90246: LD_EXP 57
90250: PPUSH
90251: LD_VAR 0 3
90255: PPUSH
90256: LD_VAR 0 7
90260: PPUSH
90261: CALL_OW 1
90265: ST_TO_ADDR
// end else
90266: GO 90285
// MC_InsertProduceList ( i , [ components ] ) ;
90268: LD_VAR 0 3
90272: PPUSH
90273: LD_VAR 0 9
90277: PUSH
90278: EMPTY
90279: LIST
90280: PPUSH
90281: CALL 86254 0 2
// break ;
90285: GO 90289
// end ; end ;
90287: GO 90074
90289: POP
90290: POP
// end ; end ; if GetType ( un ) = unit_building then
90291: LD_VAR 0 1
90295: PPUSH
90296: CALL_OW 247
90300: PUSH
90301: LD_INT 3
90303: EQUAL
90304: IFFALSE 90707
// begin btype := GetBType ( un ) ;
90306: LD_ADDR_VAR 0 5
90310: PUSH
90311: LD_VAR 0 1
90315: PPUSH
90316: CALL_OW 266
90320: ST_TO_ADDR
// if btype in [ b_oil_mine , b_siberite_mine ] then
90321: LD_VAR 0 5
90325: PUSH
90326: LD_INT 29
90328: PUSH
90329: LD_INT 30
90331: PUSH
90332: EMPTY
90333: LIST
90334: LIST
90335: IN
90336: IFFALSE 90409
// begin if not GetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) then
90338: LD_VAR 0 1
90342: PPUSH
90343: CALL_OW 250
90347: PPUSH
90348: LD_VAR 0 1
90352: PPUSH
90353: CALL_OW 251
90357: PPUSH
90358: LD_VAR 0 1
90362: PPUSH
90363: CALL_OW 255
90367: PPUSH
90368: CALL_OW 440
90372: NOT
90373: IFFALSE 90409
// SetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) ;
90375: LD_VAR 0 1
90379: PPUSH
90380: CALL_OW 250
90384: PPUSH
90385: LD_VAR 0 1
90389: PPUSH
90390: CALL_OW 251
90394: PPUSH
90395: LD_VAR 0 1
90399: PPUSH
90400: CALL_OW 255
90404: PPUSH
90405: CALL_OW 441
// end ; if btype = b_warehouse then
90409: LD_VAR 0 5
90413: PUSH
90414: LD_INT 1
90416: EQUAL
90417: IFFALSE 90435
// begin btype := b_depot ;
90419: LD_ADDR_VAR 0 5
90423: PUSH
90424: LD_INT 0
90426: ST_TO_ADDR
// pos := 1 ;
90427: LD_ADDR_VAR 0 6
90431: PUSH
90432: LD_INT 1
90434: ST_TO_ADDR
// end ; if btype = b_factory then
90435: LD_VAR 0 5
90439: PUSH
90440: LD_INT 3
90442: EQUAL
90443: IFFALSE 90461
// begin btype := b_workshop ;
90445: LD_ADDR_VAR 0 5
90449: PUSH
90450: LD_INT 2
90452: ST_TO_ADDR
// pos := 1 ;
90453: LD_ADDR_VAR 0 6
90457: PUSH
90458: LD_INT 1
90460: ST_TO_ADDR
// end ; if btype = b_barracks then
90461: LD_VAR 0 5
90465: PUSH
90466: LD_INT 5
90468: EQUAL
90469: IFFALSE 90479
// btype := b_armoury ;
90471: LD_ADDR_VAR 0 5
90475: PUSH
90476: LD_INT 4
90478: ST_TO_ADDR
// if btype in [ b_lab_half , b_lab_full ] then
90479: LD_VAR 0 5
90483: PUSH
90484: LD_INT 7
90486: PUSH
90487: LD_INT 8
90489: PUSH
90490: EMPTY
90491: LIST
90492: LIST
90493: IN
90494: IFFALSE 90504
// btype := b_lab ;
90496: LD_ADDR_VAR 0 5
90500: PUSH
90501: LD_INT 6
90503: ST_TO_ADDR
// mc_build_list := ReplaceIn ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
90504: LD_ADDR_EXP 41
90508: PUSH
90509: LD_EXP 41
90513: PPUSH
90514: LD_VAR 0 3
90518: PUSH
90519: LD_EXP 41
90523: PUSH
90524: LD_VAR 0 3
90528: ARRAY
90529: PUSH
90530: LD_INT 1
90532: PLUS
90533: PUSH
90534: EMPTY
90535: LIST
90536: LIST
90537: PPUSH
90538: LD_VAR 0 5
90542: PUSH
90543: LD_VAR 0 1
90547: PPUSH
90548: CALL_OW 250
90552: PUSH
90553: LD_VAR 0 1
90557: PPUSH
90558: CALL_OW 251
90562: PUSH
90563: LD_VAR 0 1
90567: PPUSH
90568: CALL_OW 254
90572: PUSH
90573: EMPTY
90574: LIST
90575: LIST
90576: LIST
90577: LIST
90578: PPUSH
90579: CALL 26486 0 3
90583: ST_TO_ADDR
// if pos = 1 then
90584: LD_VAR 0 6
90588: PUSH
90589: LD_INT 1
90591: EQUAL
90592: IFFALSE 90707
// begin tmp := mc_build_list [ i ] ;
90594: LD_ADDR_VAR 0 7
90598: PUSH
90599: LD_EXP 41
90603: PUSH
90604: LD_VAR 0 3
90608: ARRAY
90609: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
90610: LD_VAR 0 7
90614: PPUSH
90615: LD_INT 2
90617: PUSH
90618: LD_INT 30
90620: PUSH
90621: LD_INT 0
90623: PUSH
90624: EMPTY
90625: LIST
90626: LIST
90627: PUSH
90628: LD_INT 30
90630: PUSH
90631: LD_INT 1
90633: PUSH
90634: EMPTY
90635: LIST
90636: LIST
90637: PUSH
90638: EMPTY
90639: LIST
90640: LIST
90641: LIST
90642: PPUSH
90643: CALL_OW 72
90647: IFFALSE 90657
// pos := 2 ;
90649: LD_ADDR_VAR 0 6
90653: PUSH
90654: LD_INT 2
90656: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
90657: LD_ADDR_VAR 0 7
90661: PUSH
90662: LD_VAR 0 7
90666: PPUSH
90667: LD_VAR 0 6
90671: PPUSH
90672: LD_VAR 0 7
90676: PPUSH
90677: CALL 26812 0 3
90681: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
90682: LD_ADDR_EXP 41
90686: PUSH
90687: LD_EXP 41
90691: PPUSH
90692: LD_VAR 0 3
90696: PPUSH
90697: LD_VAR 0 7
90701: PPUSH
90702: CALL_OW 1
90706: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
90707: LD_VAR 0 1
90711: PUSH
90712: LD_EXP 36
90716: PUSH
90717: LD_VAR 0 3
90721: ARRAY
90722: IN
90723: IFFALSE 90762
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
90725: LD_ADDR_EXP 36
90729: PUSH
90730: LD_EXP 36
90734: PPUSH
90735: LD_VAR 0 3
90739: PPUSH
90740: LD_EXP 36
90744: PUSH
90745: LD_VAR 0 3
90749: ARRAY
90750: PUSH
90751: LD_VAR 0 1
90755: DIFF
90756: PPUSH
90757: CALL_OW 1
90761: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
90762: LD_VAR 0 1
90766: PUSH
90767: LD_EXP 43
90771: PUSH
90772: LD_VAR 0 3
90776: ARRAY
90777: IN
90778: IFFALSE 90817
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
90780: LD_ADDR_EXP 43
90784: PUSH
90785: LD_EXP 43
90789: PPUSH
90790: LD_VAR 0 3
90794: PPUSH
90795: LD_EXP 43
90799: PUSH
90800: LD_VAR 0 3
90804: ARRAY
90805: PUSH
90806: LD_VAR 0 1
90810: DIFF
90811: PPUSH
90812: CALL_OW 1
90816: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
90817: LD_VAR 0 1
90821: PUSH
90822: LD_EXP 55
90826: PUSH
90827: LD_VAR 0 3
90831: ARRAY
90832: IN
90833: IFFALSE 90872
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
90835: LD_ADDR_EXP 55
90839: PUSH
90840: LD_EXP 55
90844: PPUSH
90845: LD_VAR 0 3
90849: PPUSH
90850: LD_EXP 55
90854: PUSH
90855: LD_VAR 0 3
90859: ARRAY
90860: PUSH
90861: LD_VAR 0 1
90865: DIFF
90866: PPUSH
90867: CALL_OW 1
90871: ST_TO_ADDR
// end ; if un in mc_defender [ i ] then
90872: LD_VAR 0 1
90876: PUSH
90877: LD_EXP 58
90881: PUSH
90882: LD_VAR 0 3
90886: ARRAY
90887: IN
90888: IFFALSE 90927
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
90890: LD_ADDR_EXP 58
90894: PUSH
90895: LD_EXP 58
90899: PPUSH
90900: LD_VAR 0 3
90904: PPUSH
90905: LD_EXP 58
90909: PUSH
90910: LD_VAR 0 3
90914: ARRAY
90915: PUSH
90916: LD_VAR 0 1
90920: DIFF
90921: PPUSH
90922: CALL_OW 1
90926: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
90927: LD_VAR 0 1
90931: PUSH
90932: LD_EXP 45
90936: PUSH
90937: LD_VAR 0 3
90941: ARRAY
90942: IN
90943: IFFALSE 90982
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
90945: LD_ADDR_EXP 45
90949: PUSH
90950: LD_EXP 45
90954: PPUSH
90955: LD_VAR 0 3
90959: PPUSH
90960: LD_EXP 45
90964: PUSH
90965: LD_VAR 0 3
90969: ARRAY
90970: PUSH
90971: LD_VAR 0 1
90975: DIFF
90976: PPUSH
90977: CALL_OW 1
90981: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
90982: LD_VAR 0 1
90986: PUSH
90987: LD_EXP 44
90991: PUSH
90992: LD_VAR 0 3
90996: ARRAY
90997: IN
90998: IFFALSE 91037
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
91000: LD_ADDR_EXP 44
91004: PUSH
91005: LD_EXP 44
91009: PPUSH
91010: LD_VAR 0 3
91014: PPUSH
91015: LD_EXP 44
91019: PUSH
91020: LD_VAR 0 3
91024: ARRAY
91025: PUSH
91026: LD_VAR 0 1
91030: DIFF
91031: PPUSH
91032: CALL_OW 1
91036: ST_TO_ADDR
// end ; break ;
91037: GO 91041
// end ;
91039: GO 89687
91041: POP
91042: POP
// end ;
91043: LD_VAR 0 2
91047: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
91048: LD_INT 0
91050: PPUSH
91051: PPUSH
91052: PPUSH
// if not mc_bases or not skirmish then
91053: LD_EXP 36
91057: NOT
91058: PUSH
91059: LD_EXP 34
91063: NOT
91064: OR
91065: IFFALSE 91069
// exit ;
91067: GO 91284
// for i = 1 to mc_bases do
91069: LD_ADDR_VAR 0 3
91073: PUSH
91074: DOUBLE
91075: LD_INT 1
91077: DEC
91078: ST_TO_ADDR
91079: LD_EXP 36
91083: PUSH
91084: FOR_TO
91085: IFFALSE 91282
// begin if building in mc_construct_list [ i ] then
91087: LD_VAR 0 1
91091: PUSH
91092: LD_EXP 43
91096: PUSH
91097: LD_VAR 0 3
91101: ARRAY
91102: IN
91103: IFFALSE 91280
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
91105: LD_ADDR_EXP 43
91109: PUSH
91110: LD_EXP 43
91114: PPUSH
91115: LD_VAR 0 3
91119: PPUSH
91120: LD_EXP 43
91124: PUSH
91125: LD_VAR 0 3
91129: ARRAY
91130: PUSH
91131: LD_VAR 0 1
91135: DIFF
91136: PPUSH
91137: CALL_OW 1
91141: ST_TO_ADDR
// if building in mc_lab [ i ] then
91142: LD_VAR 0 1
91146: PUSH
91147: LD_EXP 69
91151: PUSH
91152: LD_VAR 0 3
91156: ARRAY
91157: IN
91158: IFFALSE 91213
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
91160: LD_ADDR_EXP 70
91164: PUSH
91165: LD_EXP 70
91169: PPUSH
91170: LD_VAR 0 3
91174: PPUSH
91175: LD_EXP 70
91179: PUSH
91180: LD_VAR 0 3
91184: ARRAY
91185: PPUSH
91186: LD_INT 1
91188: PPUSH
91189: LD_EXP 70
91193: PUSH
91194: LD_VAR 0 3
91198: ARRAY
91199: PPUSH
91200: LD_INT 0
91202: PPUSH
91203: CALL 25904 0 4
91207: PPUSH
91208: CALL_OW 1
91212: ST_TO_ADDR
// if not building in mc_bases [ i ] then
91213: LD_VAR 0 1
91217: PUSH
91218: LD_EXP 36
91222: PUSH
91223: LD_VAR 0 3
91227: ARRAY
91228: IN
91229: NOT
91230: IFFALSE 91276
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
91232: LD_ADDR_EXP 36
91236: PUSH
91237: LD_EXP 36
91241: PPUSH
91242: LD_VAR 0 3
91246: PUSH
91247: LD_EXP 36
91251: PUSH
91252: LD_VAR 0 3
91256: ARRAY
91257: PUSH
91258: LD_INT 1
91260: PLUS
91261: PUSH
91262: EMPTY
91263: LIST
91264: LIST
91265: PPUSH
91266: LD_VAR 0 1
91270: PPUSH
91271: CALL 26486 0 3
91275: ST_TO_ADDR
// exit ;
91276: POP
91277: POP
91278: GO 91284
// end ; end ;
91280: GO 91084
91282: POP
91283: POP
// end ;
91284: LD_VAR 0 2
91288: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
91289: LD_INT 0
91291: PPUSH
91292: PPUSH
91293: PPUSH
91294: PPUSH
91295: PPUSH
91296: PPUSH
91297: PPUSH
// if not mc_bases or not skirmish then
91298: LD_EXP 36
91302: NOT
91303: PUSH
91304: LD_EXP 34
91308: NOT
91309: OR
91310: IFFALSE 91314
// exit ;
91312: GO 91975
// for i = 1 to mc_bases do
91314: LD_ADDR_VAR 0 3
91318: PUSH
91319: DOUBLE
91320: LD_INT 1
91322: DEC
91323: ST_TO_ADDR
91324: LD_EXP 36
91328: PUSH
91329: FOR_TO
91330: IFFALSE 91973
// begin if building in mc_construct_list [ i ] then
91332: LD_VAR 0 1
91336: PUSH
91337: LD_EXP 43
91341: PUSH
91342: LD_VAR 0 3
91346: ARRAY
91347: IN
91348: IFFALSE 91971
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
91350: LD_ADDR_EXP 43
91354: PUSH
91355: LD_EXP 43
91359: PPUSH
91360: LD_VAR 0 3
91364: PPUSH
91365: LD_EXP 43
91369: PUSH
91370: LD_VAR 0 3
91374: ARRAY
91375: PUSH
91376: LD_VAR 0 1
91380: DIFF
91381: PPUSH
91382: CALL_OW 1
91386: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
91387: LD_ADDR_EXP 36
91391: PUSH
91392: LD_EXP 36
91396: PPUSH
91397: LD_VAR 0 3
91401: PUSH
91402: LD_EXP 36
91406: PUSH
91407: LD_VAR 0 3
91411: ARRAY
91412: PUSH
91413: LD_INT 1
91415: PLUS
91416: PUSH
91417: EMPTY
91418: LIST
91419: LIST
91420: PPUSH
91421: LD_VAR 0 1
91425: PPUSH
91426: CALL 26486 0 3
91430: ST_TO_ADDR
// btype := GetBType ( building ) ;
91431: LD_ADDR_VAR 0 5
91435: PUSH
91436: LD_VAR 0 1
91440: PPUSH
91441: CALL_OW 266
91445: ST_TO_ADDR
// side := GetSide ( building ) ;
91446: LD_ADDR_VAR 0 8
91450: PUSH
91451: LD_VAR 0 1
91455: PPUSH
91456: CALL_OW 255
91460: ST_TO_ADDR
// if btype = b_lab then
91461: LD_VAR 0 5
91465: PUSH
91466: LD_INT 6
91468: EQUAL
91469: IFFALSE 91519
// begin mc_lab := ReplaceIn ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
91471: LD_ADDR_EXP 69
91475: PUSH
91476: LD_EXP 69
91480: PPUSH
91481: LD_VAR 0 3
91485: PUSH
91486: LD_EXP 69
91490: PUSH
91491: LD_VAR 0 3
91495: ARRAY
91496: PUSH
91497: LD_INT 1
91499: PLUS
91500: PUSH
91501: EMPTY
91502: LIST
91503: LIST
91504: PPUSH
91505: LD_VAR 0 1
91509: PPUSH
91510: CALL 26486 0 3
91514: ST_TO_ADDR
// exit ;
91515: POP
91516: POP
91517: GO 91975
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
91519: LD_VAR 0 5
91523: PUSH
91524: LD_INT 0
91526: PUSH
91527: LD_INT 2
91529: PUSH
91530: LD_INT 4
91532: PUSH
91533: EMPTY
91534: LIST
91535: LIST
91536: LIST
91537: IN
91538: IFFALSE 91662
// begin if btype = b_armoury then
91540: LD_VAR 0 5
91544: PUSH
91545: LD_INT 4
91547: EQUAL
91548: IFFALSE 91558
// btype := b_barracks ;
91550: LD_ADDR_VAR 0 5
91554: PUSH
91555: LD_INT 5
91557: ST_TO_ADDR
// if btype = b_depot then
91558: LD_VAR 0 5
91562: PUSH
91563: LD_INT 0
91565: EQUAL
91566: IFFALSE 91576
// btype := b_warehouse ;
91568: LD_ADDR_VAR 0 5
91572: PUSH
91573: LD_INT 1
91575: ST_TO_ADDR
// if btype = b_workshop then
91576: LD_VAR 0 5
91580: PUSH
91581: LD_INT 2
91583: EQUAL
91584: IFFALSE 91594
// btype := b_factory ;
91586: LD_ADDR_VAR 0 5
91590: PUSH
91591: LD_INT 3
91593: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
91594: LD_VAR 0 5
91598: PPUSH
91599: LD_VAR 0 8
91603: PPUSH
91604: CALL_OW 323
91608: PUSH
91609: LD_INT 1
91611: EQUAL
91612: IFFALSE 91658
// mc_build_upgrade := ReplaceIn ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
91614: LD_ADDR_EXP 68
91618: PUSH
91619: LD_EXP 68
91623: PPUSH
91624: LD_VAR 0 3
91628: PUSH
91629: LD_EXP 68
91633: PUSH
91634: LD_VAR 0 3
91638: ARRAY
91639: PUSH
91640: LD_INT 1
91642: PLUS
91643: PUSH
91644: EMPTY
91645: LIST
91646: LIST
91647: PPUSH
91648: LD_VAR 0 1
91652: PPUSH
91653: CALL 26486 0 3
91657: ST_TO_ADDR
// exit ;
91658: POP
91659: POP
91660: GO 91975
// end ; if btype in [ b_bunker , b_turret ] then
91662: LD_VAR 0 5
91666: PUSH
91667: LD_INT 32
91669: PUSH
91670: LD_INT 33
91672: PUSH
91673: EMPTY
91674: LIST
91675: LIST
91676: IN
91677: IFFALSE 91967
// begin mc_turret_list := ReplaceIn ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
91679: LD_ADDR_EXP 44
91683: PUSH
91684: LD_EXP 44
91688: PPUSH
91689: LD_VAR 0 3
91693: PUSH
91694: LD_EXP 44
91698: PUSH
91699: LD_VAR 0 3
91703: ARRAY
91704: PUSH
91705: LD_INT 1
91707: PLUS
91708: PUSH
91709: EMPTY
91710: LIST
91711: LIST
91712: PPUSH
91713: LD_VAR 0 1
91717: PPUSH
91718: CALL 26486 0 3
91722: ST_TO_ADDR
// if btype = b_bunker then
91723: LD_VAR 0 5
91727: PUSH
91728: LD_INT 32
91730: EQUAL
91731: IFFALSE 91967
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
91733: LD_ADDR_EXP 45
91737: PUSH
91738: LD_EXP 45
91742: PPUSH
91743: LD_VAR 0 3
91747: PUSH
91748: LD_EXP 45
91752: PUSH
91753: LD_VAR 0 3
91757: ARRAY
91758: PUSH
91759: LD_INT 1
91761: PLUS
91762: PUSH
91763: EMPTY
91764: LIST
91765: LIST
91766: PPUSH
91767: LD_VAR 0 1
91771: PPUSH
91772: CALL 26486 0 3
91776: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
91777: LD_ADDR_VAR 0 6
91781: PUSH
91782: LD_EXP 36
91786: PUSH
91787: LD_VAR 0 3
91791: ARRAY
91792: PPUSH
91793: LD_INT 25
91795: PUSH
91796: LD_INT 1
91798: PUSH
91799: EMPTY
91800: LIST
91801: LIST
91802: PUSH
91803: LD_INT 3
91805: PUSH
91806: LD_INT 54
91808: PUSH
91809: EMPTY
91810: LIST
91811: PUSH
91812: EMPTY
91813: LIST
91814: LIST
91815: PUSH
91816: EMPTY
91817: LIST
91818: LIST
91819: PPUSH
91820: CALL_OW 72
91824: ST_TO_ADDR
// if tmp then
91825: LD_VAR 0 6
91829: IFFALSE 91835
// exit ;
91831: POP
91832: POP
91833: GO 91975
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
91835: LD_ADDR_VAR 0 6
91839: PUSH
91840: LD_EXP 36
91844: PUSH
91845: LD_VAR 0 3
91849: ARRAY
91850: PPUSH
91851: LD_INT 2
91853: PUSH
91854: LD_INT 30
91856: PUSH
91857: LD_INT 4
91859: PUSH
91860: EMPTY
91861: LIST
91862: LIST
91863: PUSH
91864: LD_INT 30
91866: PUSH
91867: LD_INT 5
91869: PUSH
91870: EMPTY
91871: LIST
91872: LIST
91873: PUSH
91874: EMPTY
91875: LIST
91876: LIST
91877: LIST
91878: PPUSH
91879: CALL_OW 72
91883: ST_TO_ADDR
// if not tmp then
91884: LD_VAR 0 6
91888: NOT
91889: IFFALSE 91895
// exit ;
91891: POP
91892: POP
91893: GO 91975
// for j in tmp do
91895: LD_ADDR_VAR 0 4
91899: PUSH
91900: LD_VAR 0 6
91904: PUSH
91905: FOR_IN
91906: IFFALSE 91965
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
91908: LD_ADDR_VAR 0 7
91912: PUSH
91913: LD_VAR 0 4
91917: PPUSH
91918: CALL_OW 313
91922: PPUSH
91923: LD_INT 25
91925: PUSH
91926: LD_INT 1
91928: PUSH
91929: EMPTY
91930: LIST
91931: LIST
91932: PPUSH
91933: CALL_OW 72
91937: ST_TO_ADDR
// if units then
91938: LD_VAR 0 7
91942: IFFALSE 91963
// begin ComExitBuilding ( units [ 1 ] ) ;
91944: LD_VAR 0 7
91948: PUSH
91949: LD_INT 1
91951: ARRAY
91952: PPUSH
91953: CALL_OW 122
// exit ;
91957: POP
91958: POP
91959: POP
91960: POP
91961: GO 91975
// end ; end ;
91963: GO 91905
91965: POP
91966: POP
// end ; end ; exit ;
91967: POP
91968: POP
91969: GO 91975
// end ; end ;
91971: GO 91329
91973: POP
91974: POP
// end ;
91975: LD_VAR 0 2
91979: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
91980: LD_INT 0
91982: PPUSH
91983: PPUSH
91984: PPUSH
91985: PPUSH
91986: PPUSH
91987: PPUSH
91988: PPUSH
// if not mc_bases or not skirmish then
91989: LD_EXP 36
91993: NOT
91994: PUSH
91995: LD_EXP 34
91999: NOT
92000: OR
92001: IFFALSE 92005
// exit ;
92003: GO 92236
// btype := GetBType ( building ) ;
92005: LD_ADDR_VAR 0 6
92009: PUSH
92010: LD_VAR 0 1
92014: PPUSH
92015: CALL_OW 266
92019: ST_TO_ADDR
// x := GetX ( building ) ;
92020: LD_ADDR_VAR 0 7
92024: PUSH
92025: LD_VAR 0 1
92029: PPUSH
92030: CALL_OW 250
92034: ST_TO_ADDR
// y := GetY ( building ) ;
92035: LD_ADDR_VAR 0 8
92039: PUSH
92040: LD_VAR 0 1
92044: PPUSH
92045: CALL_OW 251
92049: ST_TO_ADDR
// d := GetDir ( building ) ;
92050: LD_ADDR_VAR 0 9
92054: PUSH
92055: LD_VAR 0 1
92059: PPUSH
92060: CALL_OW 254
92064: ST_TO_ADDR
// for i = 1 to mc_bases do
92065: LD_ADDR_VAR 0 4
92069: PUSH
92070: DOUBLE
92071: LD_INT 1
92073: DEC
92074: ST_TO_ADDR
92075: LD_EXP 36
92079: PUSH
92080: FOR_TO
92081: IFFALSE 92234
// begin if not mc_build_list [ i ] then
92083: LD_EXP 41
92087: PUSH
92088: LD_VAR 0 4
92092: ARRAY
92093: NOT
92094: IFFALSE 92098
// continue ;
92096: GO 92080
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
92098: LD_VAR 0 6
92102: PUSH
92103: LD_VAR 0 7
92107: PUSH
92108: LD_VAR 0 8
92112: PUSH
92113: LD_VAR 0 9
92117: PUSH
92118: EMPTY
92119: LIST
92120: LIST
92121: LIST
92122: LIST
92123: PPUSH
92124: LD_EXP 41
92128: PUSH
92129: LD_VAR 0 4
92133: ARRAY
92134: PUSH
92135: LD_INT 1
92137: ARRAY
92138: PPUSH
92139: CALL 32655 0 2
92143: IFFALSE 92232
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
92145: LD_ADDR_EXP 41
92149: PUSH
92150: LD_EXP 41
92154: PPUSH
92155: LD_VAR 0 4
92159: PPUSH
92160: LD_EXP 41
92164: PUSH
92165: LD_VAR 0 4
92169: ARRAY
92170: PPUSH
92171: LD_INT 1
92173: PPUSH
92174: CALL_OW 3
92178: PPUSH
92179: CALL_OW 1
92183: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
92184: LD_ADDR_EXP 43
92188: PUSH
92189: LD_EXP 43
92193: PPUSH
92194: LD_VAR 0 4
92198: PUSH
92199: LD_EXP 43
92203: PUSH
92204: LD_VAR 0 4
92208: ARRAY
92209: PUSH
92210: LD_INT 1
92212: PLUS
92213: PUSH
92214: EMPTY
92215: LIST
92216: LIST
92217: PPUSH
92218: LD_VAR 0 1
92222: PPUSH
92223: CALL 26486 0 3
92227: ST_TO_ADDR
// exit ;
92228: POP
92229: POP
92230: GO 92236
// end ; end ;
92232: GO 92080
92234: POP
92235: POP
// end ;
92236: LD_VAR 0 3
92240: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
92241: LD_INT 0
92243: PPUSH
92244: PPUSH
92245: PPUSH
// if not mc_bases or not skirmish then
92246: LD_EXP 36
92250: NOT
92251: PUSH
92252: LD_EXP 34
92256: NOT
92257: OR
92258: IFFALSE 92262
// exit ;
92260: GO 92452
// for i = 1 to mc_bases do
92262: LD_ADDR_VAR 0 4
92266: PUSH
92267: DOUBLE
92268: LD_INT 1
92270: DEC
92271: ST_TO_ADDR
92272: LD_EXP 36
92276: PUSH
92277: FOR_TO
92278: IFFALSE 92365
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
92280: LD_VAR 0 1
92284: PUSH
92285: LD_EXP 44
92289: PUSH
92290: LD_VAR 0 4
92294: ARRAY
92295: IN
92296: PUSH
92297: LD_VAR 0 1
92301: PUSH
92302: LD_EXP 45
92306: PUSH
92307: LD_VAR 0 4
92311: ARRAY
92312: IN
92313: NOT
92314: AND
92315: IFFALSE 92363
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
92317: LD_ADDR_EXP 45
92321: PUSH
92322: LD_EXP 45
92326: PPUSH
92327: LD_VAR 0 4
92331: PUSH
92332: LD_EXP 45
92336: PUSH
92337: LD_VAR 0 4
92341: ARRAY
92342: PUSH
92343: LD_INT 1
92345: PLUS
92346: PUSH
92347: EMPTY
92348: LIST
92349: LIST
92350: PPUSH
92351: LD_VAR 0 1
92355: PPUSH
92356: CALL 26486 0 3
92360: ST_TO_ADDR
// break ;
92361: GO 92365
// end ; end ;
92363: GO 92277
92365: POP
92366: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
92367: LD_VAR 0 1
92371: PPUSH
92372: CALL_OW 257
92376: PUSH
92377: LD_EXP 62
92381: IN
92382: PUSH
92383: LD_VAR 0 1
92387: PPUSH
92388: CALL_OW 266
92392: PUSH
92393: LD_INT 5
92395: EQUAL
92396: AND
92397: PUSH
92398: LD_VAR 0 2
92402: PPUSH
92403: CALL_OW 110
92407: PUSH
92408: LD_INT 18
92410: NONEQUAL
92411: AND
92412: IFFALSE 92452
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
92414: LD_VAR 0 2
92418: PPUSH
92419: CALL_OW 257
92423: PUSH
92424: LD_INT 5
92426: PUSH
92427: LD_INT 8
92429: PUSH
92430: LD_INT 9
92432: PUSH
92433: EMPTY
92434: LIST
92435: LIST
92436: LIST
92437: IN
92438: IFFALSE 92452
// SetClass ( unit , 1 ) ;
92440: LD_VAR 0 2
92444: PPUSH
92445: LD_INT 1
92447: PPUSH
92448: CALL_OW 336
// end ;
92452: LD_VAR 0 3
92456: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
92457: LD_INT 0
92459: PPUSH
92460: PPUSH
// if not mc_bases or not skirmish then
92461: LD_EXP 36
92465: NOT
92466: PUSH
92467: LD_EXP 34
92471: NOT
92472: OR
92473: IFFALSE 92477
// exit ;
92475: GO 92593
// if GetLives ( abandoned_vehicle ) > 250 then
92477: LD_VAR 0 2
92481: PPUSH
92482: CALL_OW 256
92486: PUSH
92487: LD_INT 250
92489: GREATER
92490: IFFALSE 92494
// exit ;
92492: GO 92593
// for i = 1 to mc_bases do
92494: LD_ADDR_VAR 0 6
92498: PUSH
92499: DOUBLE
92500: LD_INT 1
92502: DEC
92503: ST_TO_ADDR
92504: LD_EXP 36
92508: PUSH
92509: FOR_TO
92510: IFFALSE 92591
// begin if driver in mc_bases [ i ] then
92512: LD_VAR 0 1
92516: PUSH
92517: LD_EXP 36
92521: PUSH
92522: LD_VAR 0 6
92526: ARRAY
92527: IN
92528: IFFALSE 92589
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
92530: LD_VAR 0 1
92534: PPUSH
92535: LD_EXP 36
92539: PUSH
92540: LD_VAR 0 6
92544: ARRAY
92545: PPUSH
92546: LD_INT 2
92548: PUSH
92549: LD_INT 30
92551: PUSH
92552: LD_INT 0
92554: PUSH
92555: EMPTY
92556: LIST
92557: LIST
92558: PUSH
92559: LD_INT 30
92561: PUSH
92562: LD_INT 1
92564: PUSH
92565: EMPTY
92566: LIST
92567: LIST
92568: PUSH
92569: EMPTY
92570: LIST
92571: LIST
92572: LIST
92573: PPUSH
92574: CALL_OW 72
92578: PUSH
92579: LD_INT 1
92581: ARRAY
92582: PPUSH
92583: CALL_OW 112
// break ;
92587: GO 92591
// end ; end ;
92589: GO 92509
92591: POP
92592: POP
// end ; end_of_file end_of_file end_of_file
92593: LD_VAR 0 5
92597: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; var i , eff , side ; begin
92598: LD_INT 0
92600: PPUSH
92601: PPUSH
92602: PPUSH
92603: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
92604: LD_VAR 0 1
92608: PPUSH
92609: CALL_OW 264
92613: PUSH
92614: LD_EXP 33
92618: EQUAL
92619: IFFALSE 92691
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
92621: LD_INT 68
92623: PPUSH
92624: LD_VAR 0 1
92628: PPUSH
92629: CALL_OW 255
92633: PPUSH
92634: CALL_OW 321
92638: PUSH
92639: LD_INT 2
92641: EQUAL
92642: IFFALSE 92654
// eff := 70 else
92644: LD_ADDR_VAR 0 6
92648: PUSH
92649: LD_INT 70
92651: ST_TO_ADDR
92652: GO 92662
// eff := 30 ;
92654: LD_ADDR_VAR 0 6
92658: PUSH
92659: LD_INT 30
92661: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
92662: LD_VAR 0 1
92666: PPUSH
92667: CALL_OW 250
92671: PPUSH
92672: LD_VAR 0 1
92676: PPUSH
92677: CALL_OW 251
92681: PPUSH
92682: LD_VAR 0 6
92686: PPUSH
92687: CALL_OW 495
// end ; end ;
92691: LD_VAR 0 4
92695: RET
// export function SOS_Command ( cmd ) ; var i , j , tmp , taskList , _taskList ; begin
92696: LD_INT 0
92698: PPUSH
92699: PPUSH
92700: PPUSH
92701: PPUSH
92702: PPUSH
92703: PPUSH
// if cmd = 124 then
92704: LD_VAR 0 1
92708: PUSH
92709: LD_INT 124
92711: EQUAL
92712: IFFALSE 92918
// begin tmp := FilterAllUnits ( [ f_or , [ f_weapon , ru_bulldozer ] , [ f_weapon , us_bulldozer ] ] ) ;
92714: LD_ADDR_VAR 0 5
92718: PUSH
92719: LD_INT 2
92721: PUSH
92722: LD_INT 34
92724: PUSH
92725: LD_INT 53
92727: PUSH
92728: EMPTY
92729: LIST
92730: LIST
92731: PUSH
92732: LD_INT 34
92734: PUSH
92735: LD_INT 14
92737: PUSH
92738: EMPTY
92739: LIST
92740: LIST
92741: PUSH
92742: EMPTY
92743: LIST
92744: LIST
92745: LIST
92746: PPUSH
92747: CALL_OW 69
92751: ST_TO_ADDR
// if not tmp then
92752: LD_VAR 0 5
92756: NOT
92757: IFFALSE 92761
// exit ;
92759: GO 92918
// for i in tmp do
92761: LD_ADDR_VAR 0 3
92765: PUSH
92766: LD_VAR 0 5
92770: PUSH
92771: FOR_IN
92772: IFFALSE 92916
// begin taskList := GetTaskList ( i ) ;
92774: LD_ADDR_VAR 0 6
92778: PUSH
92779: LD_VAR 0 3
92783: PPUSH
92784: CALL_OW 437
92788: ST_TO_ADDR
// if not taskList then
92789: LD_VAR 0 6
92793: NOT
92794: IFFALSE 92798
// continue ;
92796: GO 92771
// for j = 1 to taskList do
92798: LD_ADDR_VAR 0 4
92802: PUSH
92803: DOUBLE
92804: LD_INT 1
92806: DEC
92807: ST_TO_ADDR
92808: LD_VAR 0 6
92812: PUSH
92813: FOR_TO
92814: IFFALSE 92912
// if taskList [ j ] [ 1 ] = | then
92816: LD_VAR 0 6
92820: PUSH
92821: LD_VAR 0 4
92825: ARRAY
92826: PUSH
92827: LD_INT 1
92829: ARRAY
92830: PUSH
92831: LD_STRING |
92833: EQUAL
92834: IFFALSE 92910
// begin _taskList := Delete ( taskList , 1 ) ;
92836: LD_ADDR_VAR 0 7
92840: PUSH
92841: LD_VAR 0 6
92845: PPUSH
92846: LD_INT 1
92848: PPUSH
92849: CALL_OW 3
92853: ST_TO_ADDR
// SetTaskList ( i , _taskList ) ;
92854: LD_VAR 0 3
92858: PPUSH
92859: LD_VAR 0 7
92863: PPUSH
92864: CALL_OW 446
// CutTreeXYR ( i , taskList [ j ] [ 2 ] , taskList [ j ] [ 3 ] , 8 ) ;
92868: LD_VAR 0 3
92872: PPUSH
92873: LD_VAR 0 6
92877: PUSH
92878: LD_VAR 0 4
92882: ARRAY
92883: PUSH
92884: LD_INT 2
92886: ARRAY
92887: PPUSH
92888: LD_VAR 0 6
92892: PUSH
92893: LD_VAR 0 4
92897: ARRAY
92898: PUSH
92899: LD_INT 3
92901: ARRAY
92902: PPUSH
92903: LD_INT 8
92905: PPUSH
92906: CALL 92923 0 4
// end ;
92910: GO 92813
92912: POP
92913: POP
// end ;
92914: GO 92771
92916: POP
92917: POP
// end ; end ;
92918: LD_VAR 0 2
92922: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
92923: LD_INT 0
92925: PPUSH
92926: PPUSH
92927: PPUSH
92928: PPUSH
92929: PPUSH
92930: PPUSH
92931: PPUSH
92932: PPUSH
92933: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
92934: LD_VAR 0 1
92938: NOT
92939: PUSH
92940: LD_VAR 0 2
92944: PPUSH
92945: LD_VAR 0 3
92949: PPUSH
92950: CALL_OW 488
92954: NOT
92955: OR
92956: PUSH
92957: LD_VAR 0 4
92961: NOT
92962: OR
92963: IFFALSE 92967
// exit ;
92965: GO 93307
// list := [ ] ;
92967: LD_ADDR_VAR 0 13
92971: PUSH
92972: EMPTY
92973: ST_TO_ADDR
// if x - r < 0 then
92974: LD_VAR 0 2
92978: PUSH
92979: LD_VAR 0 4
92983: MINUS
92984: PUSH
92985: LD_INT 0
92987: LESS
92988: IFFALSE 93000
// min_x := 0 else
92990: LD_ADDR_VAR 0 7
92994: PUSH
92995: LD_INT 0
92997: ST_TO_ADDR
92998: GO 93016
// min_x := x - r ;
93000: LD_ADDR_VAR 0 7
93004: PUSH
93005: LD_VAR 0 2
93009: PUSH
93010: LD_VAR 0 4
93014: MINUS
93015: ST_TO_ADDR
// if y - r < 0 then
93016: LD_VAR 0 3
93020: PUSH
93021: LD_VAR 0 4
93025: MINUS
93026: PUSH
93027: LD_INT 0
93029: LESS
93030: IFFALSE 93042
// min_y := 0 else
93032: LD_ADDR_VAR 0 8
93036: PUSH
93037: LD_INT 0
93039: ST_TO_ADDR
93040: GO 93058
// min_y := y - r ;
93042: LD_ADDR_VAR 0 8
93046: PUSH
93047: LD_VAR 0 3
93051: PUSH
93052: LD_VAR 0 4
93056: MINUS
93057: ST_TO_ADDR
// max_x := x + r ;
93058: LD_ADDR_VAR 0 9
93062: PUSH
93063: LD_VAR 0 2
93067: PUSH
93068: LD_VAR 0 4
93072: PLUS
93073: ST_TO_ADDR
// max_y := y + r ;
93074: LD_ADDR_VAR 0 10
93078: PUSH
93079: LD_VAR 0 3
93083: PUSH
93084: LD_VAR 0 4
93088: PLUS
93089: ST_TO_ADDR
// for _x = min_x to max_x do
93090: LD_ADDR_VAR 0 11
93094: PUSH
93095: DOUBLE
93096: LD_VAR 0 7
93100: DEC
93101: ST_TO_ADDR
93102: LD_VAR 0 9
93106: PUSH
93107: FOR_TO
93108: IFFALSE 93225
// for _y = min_y to max_y do
93110: LD_ADDR_VAR 0 12
93114: PUSH
93115: DOUBLE
93116: LD_VAR 0 8
93120: DEC
93121: ST_TO_ADDR
93122: LD_VAR 0 10
93126: PUSH
93127: FOR_TO
93128: IFFALSE 93221
// begin if not ValidHex ( _x , _y ) then
93130: LD_VAR 0 11
93134: PPUSH
93135: LD_VAR 0 12
93139: PPUSH
93140: CALL_OW 488
93144: NOT
93145: IFFALSE 93149
// continue ;
93147: GO 93127
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
93149: LD_VAR 0 11
93153: PPUSH
93154: LD_VAR 0 12
93158: PPUSH
93159: CALL_OW 351
93163: PUSH
93164: LD_VAR 0 11
93168: PPUSH
93169: LD_VAR 0 12
93173: PPUSH
93174: CALL_OW 554
93178: AND
93179: IFFALSE 93219
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
93181: LD_ADDR_VAR 0 13
93185: PUSH
93186: LD_VAR 0 13
93190: PPUSH
93191: LD_VAR 0 13
93195: PUSH
93196: LD_INT 1
93198: PLUS
93199: PPUSH
93200: LD_VAR 0 11
93204: PUSH
93205: LD_VAR 0 12
93209: PUSH
93210: EMPTY
93211: LIST
93212: LIST
93213: PPUSH
93214: CALL_OW 2
93218: ST_TO_ADDR
// end ;
93219: GO 93127
93221: POP
93222: POP
93223: GO 93107
93225: POP
93226: POP
// if not list then
93227: LD_VAR 0 13
93231: NOT
93232: IFFALSE 93236
// exit ;
93234: GO 93307
// for i in list do
93236: LD_ADDR_VAR 0 6
93240: PUSH
93241: LD_VAR 0 13
93245: PUSH
93246: FOR_IN
93247: IFFALSE 93305
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
93249: LD_VAR 0 1
93253: PPUSH
93254: LD_STRING M
93256: PUSH
93257: LD_VAR 0 6
93261: PUSH
93262: LD_INT 1
93264: ARRAY
93265: PUSH
93266: LD_VAR 0 6
93270: PUSH
93271: LD_INT 2
93273: ARRAY
93274: PUSH
93275: LD_INT 0
93277: PUSH
93278: LD_INT 0
93280: PUSH
93281: LD_INT 0
93283: PUSH
93284: LD_INT 0
93286: PUSH
93287: EMPTY
93288: LIST
93289: LIST
93290: LIST
93291: LIST
93292: LIST
93293: LIST
93294: LIST
93295: PUSH
93296: EMPTY
93297: LIST
93298: PPUSH
93299: CALL_OW 447
93303: GO 93246
93305: POP
93306: POP
// end ;
93307: LD_VAR 0 5
93311: RET
