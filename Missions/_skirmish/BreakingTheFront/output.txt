// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// InitSettings ;
  11: CALL 51 0 0
// if debug then
  15: LD_EXP 1
  19: IFFALSE 38
// begin PlaceSeeing ( 1 , 1 , 1 , - 372963 ) ;
  21: LD_INT 1
  23: PPUSH
  24: LD_INT 1
  26: PPUSH
  27: LD_INT 1
  29: PPUSH
  30: LD_INT 372963
  32: NEG
  33: PPUSH
  34: CALL_OW 330
// end ; SetTechnologies ;
  38: CALL 602 0 0
// SetDiplomacy ;
  42: CALL 814 0 0
// PrepareGame ;
  46: CALL 896 0 0
// end ;
  50: END
// export debug , GameType , game , disableGlobalTimer ; export mc_amer , mc_leg , mc_rus_1 , mc_rus_2 ; export playerCommander , playerForces , allyCommander , Powell , Farmer , ruOutpost , ruEscape , staticMines , baseCaptured , legDestCounter , cratesSpawns , legOfferAccepted , legChangeSide , allyDestCounter , sibBombAllowed , reinforceAllowed , commander , cratesSpawn , outpostEscape , dialogueMineDetected ; end_of_file export function InitSettings ; begin
  51: LD_INT 0
  53: PPUSH
// debug := 0 ;
  54: LD_ADDR_EXP 1
  58: PUSH
  59: LD_INT 0
  61: ST_TO_ADDR
// GameType := 1 ;
  62: LD_ADDR_EXP 2
  66: PUSH
  67: LD_INT 1
  69: ST_TO_ADDR
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  70: LD_ADDR_OWVAR 67
  74: PUSH
  75: LD_INT 0
  77: PPUSH
  78: CALL_OW 426
  82: ST_TO_ADDR
// sibBombAllowed := GetMultiPlayerSetting ( 1 ) - 1 ;
  83: LD_ADDR_EXP 23
  87: PUSH
  88: LD_INT 1
  90: PPUSH
  91: CALL_OW 426
  95: PUSH
  96: LD_INT 1
  98: MINUS
  99: ST_TO_ADDR
// reinforceAllowed := GetMultiPlayerSetting ( 2 ) - 1 ;
 100: LD_ADDR_EXP 24
 104: PUSH
 105: LD_INT 2
 107: PPUSH
 108: CALL_OW 426
 112: PUSH
 113: LD_INT 1
 115: MINUS
 116: ST_TO_ADDR
// cratesSpawn := GetMultiPlayerSetting ( 3 ) ;
 117: LD_ADDR_EXP 26
 121: PUSH
 122: LD_INT 3
 124: PPUSH
 125: CALL_OW 426
 129: ST_TO_ADDR
// commander := GetMultiPlayerSetting ( 4 ) ;
 130: LD_ADDR_EXP 25
 134: PUSH
 135: LD_INT 4
 137: PPUSH
 138: CALL_OW 426
 142: ST_TO_ADDR
// if not commander then
 143: LD_EXP 25
 147: NOT
 148: IFFALSE 158
// commander := 3 ;
 150: LD_ADDR_EXP 25
 154: PUSH
 155: LD_INT 3
 157: ST_TO_ADDR
// if not debug then
 158: LD_EXP 1
 162: NOT
 163: IFFALSE 167
// exit ;
 165: GO 224
// display_strings := [ Difficulty:  & Difficulty , sibBomb:  & sibBombAllowed , reinforceAllowed:  & reinforceAllowed , cratesSpawn:  & cratesSpawn , commander:  & commander ] ;
 167: LD_ADDR_OWVAR 47
 171: PUSH
 172: LD_STRING Difficulty: 
 174: PUSH
 175: LD_OWVAR 67
 179: STR
 180: PUSH
 181: LD_STRING sibBomb: 
 183: PUSH
 184: LD_EXP 23
 188: STR
 189: PUSH
 190: LD_STRING reinforceAllowed: 
 192: PUSH
 193: LD_EXP 24
 197: STR
 198: PUSH
 199: LD_STRING cratesSpawn: 
 201: PUSH
 202: LD_EXP 26
 206: STR
 207: PUSH
 208: LD_STRING commander: 
 210: PUSH
 211: LD_EXP 25
 215: STR
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: LIST
 223: ST_TO_ADDR
// end ;
 224: LD_VAR 0 1
 228: RET
// every 0 0$1 trigger game and GameType = 1 and not disableGlobalTimer do
 229: LD_EXP 3
 233: PUSH
 234: LD_EXP 2
 238: PUSH
 239: LD_INT 1
 241: EQUAL
 242: AND
 243: PUSH
 244: LD_EXP 4
 248: NOT
 249: AND
 250: IFFALSE 273
 252: GO 254
 254: DISABLE
// begin enable ;
 255: ENABLE
// display_strings := [ #SkrTime , tick ] ;
 256: LD_ADDR_OWVAR 47
 260: PUSH
 261: LD_STRING #SkrTime
 263: PUSH
 264: LD_OWVAR 1
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: ST_TO_ADDR
// end ;
 273: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 274: LD_EXP 19
 278: PUSH
 279: LD_EXP 3
 283: AND
 284: PUSH
 285: LD_EXP 2
 289: PUSH
 290: LD_INT 1
 292: EQUAL
 293: AND
 294: IFFALSE 355
 296: GO 298
 298: DISABLE
// Crates ( cratesSpawns [ 1 ] [ 1 ] , cratesSpawns [ 1 ] [ 2 ] , cratesSpawns [ 1 ] [ 3 ] , cratesSpawns [ 1 ] [ 4 ] ) ;
 299: LD_EXP 19
 303: PUSH
 304: LD_INT 1
 306: ARRAY
 307: PUSH
 308: LD_INT 1
 310: ARRAY
 311: PPUSH
 312: LD_EXP 19
 316: PUSH
 317: LD_INT 1
 319: ARRAY
 320: PUSH
 321: LD_INT 2
 323: ARRAY
 324: PPUSH
 325: LD_EXP 19
 329: PUSH
 330: LD_INT 1
 332: ARRAY
 333: PUSH
 334: LD_INT 3
 336: ARRAY
 337: PPUSH
 338: LD_EXP 19
 342: PUSH
 343: LD_INT 1
 345: ARRAY
 346: PUSH
 347: LD_INT 4
 349: ARRAY
 350: PPUSH
 351: CALL 55930 0 4
 355: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 356: LD_EXP 19
 360: PUSH
 361: LD_EXP 3
 365: AND
 366: PUSH
 367: LD_EXP 2
 371: PUSH
 372: LD_INT 1
 374: EQUAL
 375: AND
 376: IFFALSE 437
 378: GO 380
 380: DISABLE
// Crates ( cratesSpawns [ 2 ] [ 1 ] , cratesSpawns [ 2 ] [ 2 ] , cratesSpawns [ 2 ] [ 3 ] , cratesSpawns [ 2 ] [ 4 ] ) ;
 381: LD_EXP 19
 385: PUSH
 386: LD_INT 2
 388: ARRAY
 389: PUSH
 390: LD_INT 1
 392: ARRAY
 393: PPUSH
 394: LD_EXP 19
 398: PUSH
 399: LD_INT 2
 401: ARRAY
 402: PUSH
 403: LD_INT 2
 405: ARRAY
 406: PPUSH
 407: LD_EXP 19
 411: PUSH
 412: LD_INT 2
 414: ARRAY
 415: PUSH
 416: LD_INT 3
 418: ARRAY
 419: PPUSH
 420: LD_EXP 19
 424: PUSH
 425: LD_INT 2
 427: ARRAY
 428: PUSH
 429: LD_INT 4
 431: ARRAY
 432: PPUSH
 433: CALL 55930 0 4
 437: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 438: LD_EXP 19
 442: PUSH
 443: LD_EXP 3
 447: AND
 448: PUSH
 449: LD_EXP 2
 453: PUSH
 454: LD_INT 1
 456: EQUAL
 457: AND
 458: IFFALSE 519
 460: GO 462
 462: DISABLE
// Crates ( cratesSpawns [ 3 ] [ 1 ] , cratesSpawns [ 3 ] [ 2 ] , cratesSpawns [ 3 ] [ 3 ] , cratesSpawns [ 3 ] [ 4 ] ) ;
 463: LD_EXP 19
 467: PUSH
 468: LD_INT 3
 470: ARRAY
 471: PUSH
 472: LD_INT 1
 474: ARRAY
 475: PPUSH
 476: LD_EXP 19
 480: PUSH
 481: LD_INT 3
 483: ARRAY
 484: PUSH
 485: LD_INT 2
 487: ARRAY
 488: PPUSH
 489: LD_EXP 19
 493: PUSH
 494: LD_INT 3
 496: ARRAY
 497: PUSH
 498: LD_INT 3
 500: ARRAY
 501: PPUSH
 502: LD_EXP 19
 506: PUSH
 507: LD_INT 3
 509: ARRAY
 510: PUSH
 511: LD_INT 4
 513: ARRAY
 514: PPUSH
 515: CALL 55930 0 4
 519: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 520: LD_EXP 19
 524: PUSH
 525: LD_EXP 3
 529: AND
 530: PUSH
 531: LD_EXP 2
 535: PUSH
 536: LD_INT 1
 538: EQUAL
 539: AND
 540: IFFALSE 601
 542: GO 544
 544: DISABLE
// Crates ( cratesSpawns [ 4 ] [ 1 ] , cratesSpawns [ 4 ] [ 2 ] , cratesSpawns [ 4 ] [ 3 ] , cratesSpawns [ 4 ] [ 4 ] ) ;
 545: LD_EXP 19
 549: PUSH
 550: LD_INT 4
 552: ARRAY
 553: PUSH
 554: LD_INT 1
 556: ARRAY
 557: PPUSH
 558: LD_EXP 19
 562: PUSH
 563: LD_INT 4
 565: ARRAY
 566: PUSH
 567: LD_INT 2
 569: ARRAY
 570: PPUSH
 571: LD_EXP 19
 575: PUSH
 576: LD_INT 4
 578: ARRAY
 579: PUSH
 580: LD_INT 3
 582: ARRAY
 583: PPUSH
 584: LD_EXP 19
 588: PUSH
 589: LD_INT 4
 591: ARRAY
 592: PUSH
 593: LD_INT 4
 595: ARRAY
 596: PPUSH
 597: CALL 55930 0 4
 601: END
// export function SetTechnologies ; var i , j , ban_techs , res_techs ; begin
 602: LD_INT 0
 604: PPUSH
 605: PPUSH
 606: PPUSH
 607: PPUSH
 608: PPUSH
// if GameType = 1 then
 609: LD_EXP 2
 613: PUSH
 614: LD_INT 1
 616: EQUAL
 617: IFFALSE 686
// begin ban_techs := [ ] ;
 619: LD_ADDR_VAR 0 4
 623: PUSH
 624: EMPTY
 625: ST_TO_ADDR
// if sibBombAllowed < 2 then
 626: LD_EXP 23
 630: PUSH
 631: LD_INT 2
 633: LESS
 634: IFFALSE 647
// ban_techs := [ tech_sibFiss ] ;
 636: LD_ADDR_VAR 0 4
 640: PUSH
 641: LD_INT 25
 643: PUSH
 644: EMPTY
 645: LIST
 646: ST_TO_ADDR
// res_techs := [ tech_oilPow , tech_oilEng , tech_tech1 , tech_tech2 , tech_tech3 , tech_gun , tech_gatling , tech_rocket ] ;
 647: LD_ADDR_VAR 0 5
 651: PUSH
 652: LD_INT 46
 654: PUSH
 655: LD_INT 47
 657: PUSH
 658: LD_INT 48
 660: PUSH
 661: LD_INT 49
 663: PUSH
 664: LD_INT 50
 666: PUSH
 667: LD_INT 39
 669: PUSH
 670: LD_INT 69
 672: PUSH
 673: LD_INT 40
 675: PUSH
 676: EMPTY
 677: LIST
 678: LIST
 679: LIST
 680: LIST
 681: LIST
 682: LIST
 683: LIST
 684: LIST
 685: ST_TO_ADDR
// end ; for i = 1 to 8 do
 686: LD_ADDR_VAR 0 2
 690: PUSH
 691: DOUBLE
 692: LD_INT 1
 694: DEC
 695: ST_TO_ADDR
 696: LD_INT 8
 698: PUSH
 699: FOR_TO
 700: IFFALSE 784
// begin if res_techs then
 702: LD_VAR 0 5
 706: IFFALSE 742
// for j in res_techs do
 708: LD_ADDR_VAR 0 3
 712: PUSH
 713: LD_VAR 0 5
 717: PUSH
 718: FOR_IN
 719: IFFALSE 740
// SetTech ( j , i , state_researched ) ;
 721: LD_VAR 0 3
 725: PPUSH
 726: LD_VAR 0 2
 730: PPUSH
 731: LD_INT 2
 733: PPUSH
 734: CALL_OW 322
 738: GO 718
 740: POP
 741: POP
// if ban_techs then
 742: LD_VAR 0 4
 746: IFFALSE 782
// for j in ban_techs do
 748: LD_ADDR_VAR 0 3
 752: PUSH
 753: LD_VAR 0 4
 757: PUSH
 758: FOR_IN
 759: IFFALSE 780
// SetTech ( j , i , state_disabled ) ;
 761: LD_VAR 0 3
 765: PPUSH
 766: LD_VAR 0 2
 770: PPUSH
 771: LD_INT 0
 773: PPUSH
 774: CALL_OW 322
 778: GO 758
 780: POP
 781: POP
// end ;
 782: GO 699
 784: POP
 785: POP
// if sibBombAllowed = 1 then
 786: LD_EXP 23
 790: PUSH
 791: LD_INT 1
 793: EQUAL
 794: IFFALSE 809
// SetTech ( tech_sibFiss , 3 , state_enabled ) ;
 796: LD_INT 25
 798: PPUSH
 799: LD_INT 3
 801: PPUSH
 802: LD_INT 1
 804: PPUSH
 805: CALL_OW 322
// end ;
 809: LD_VAR 0 1
 813: RET
// export function SetDiplomacy ; begin
 814: LD_INT 0
 816: PPUSH
// if GameType = 1 then
 817: LD_EXP 2
 821: PUSH
 822: LD_INT 1
 824: EQUAL
 825: IFFALSE 891
// begin SetAttitude ( 1 , 4 , att_friend , true ) ;
 827: LD_INT 1
 829: PPUSH
 830: LD_INT 4
 832: PPUSH
 833: LD_INT 1
 835: PPUSH
 836: LD_INT 1
 838: PPUSH
 839: CALL_OW 80
// SetAttitude ( 3 , 6 , att_friend , true ) ;
 843: LD_INT 3
 845: PPUSH
 846: LD_INT 6
 848: PPUSH
 849: LD_INT 1
 851: PPUSH
 852: LD_INT 1
 854: PPUSH
 855: CALL_OW 80
// SetAttitude ( 3 , 8 , att_friend , true ) ;
 859: LD_INT 3
 861: PPUSH
 862: LD_INT 8
 864: PPUSH
 865: LD_INT 1
 867: PPUSH
 868: LD_INT 1
 870: PPUSH
 871: CALL_OW 80
// SetAttitude ( 6 , 8 , att_friend , true ) ;
 875: LD_INT 6
 877: PPUSH
 878: LD_INT 8
 880: PPUSH
 881: LD_INT 1
 883: PPUSH
 884: LD_INT 1
 886: PPUSH
 887: CALL_OW 80
// end ; end ;
 891: LD_VAR 0 1
 895: RET
// export function PrepareGame ; var i , tmp , sources ; begin
 896: LD_INT 0
 898: PPUSH
 899: PPUSH
 900: PPUSH
 901: PPUSH
// if GameType = 1 then
 902: LD_EXP 2
 906: PUSH
 907: LD_INT 1
 909: EQUAL
 910: IFFALSE 1406
// begin game := false ;
 912: LD_ADDR_EXP 3
 916: PUSH
 917: LD_INT 0
 919: ST_TO_ADDR
// your_side := 1 ;
 920: LD_ADDR_OWVAR 2
 924: PUSH
 925: LD_INT 1
 927: ST_TO_ADDR
// mc_amer := 1 ;
 928: LD_ADDR_EXP 5
 932: PUSH
 933: LD_INT 1
 935: ST_TO_ADDR
// mc_leg := 2 ;
 936: LD_ADDR_EXP 6
 940: PUSH
 941: LD_INT 2
 943: ST_TO_ADDR
// mc_rus_1 := 3 ;
 944: LD_ADDR_EXP 7
 948: PUSH
 949: LD_INT 3
 951: ST_TO_ADDR
// mc_rus_2 := 4 ;
 952: LD_ADDR_EXP 8
 956: PUSH
 957: LD_INT 4
 959: ST_TO_ADDR
// cratesSpawns := [ [ amerCrates , 1 , 0 , [ 200 , 250 , 300 ] [ cratesSpawn ] ] , [ rusCrates , 8 , 50 , 500 ] , [ legCrates , 5 , 50 , 300 ] , [ playerCrates , [ 4 , 5 , 6 ] [ cratesSpawn ] , 30 , [ 300 , 450 , 500 ] [ cratesSpawn ] ] ] ;
 960: LD_ADDR_EXP 19
 964: PUSH
 965: LD_INT 5
 967: PUSH
 968: LD_INT 1
 970: PUSH
 971: LD_INT 0
 973: PUSH
 974: LD_INT 200
 976: PUSH
 977: LD_INT 250
 979: PUSH
 980: LD_INT 300
 982: PUSH
 983: EMPTY
 984: LIST
 985: LIST
 986: LIST
 987: PUSH
 988: LD_EXP 26
 992: ARRAY
 993: PUSH
 994: EMPTY
 995: LIST
 996: LIST
 997: LIST
 998: LIST
 999: PUSH
1000: LD_INT 13
1002: PUSH
1003: LD_INT 8
1005: PUSH
1006: LD_INT 50
1008: PUSH
1009: LD_INT 500
1011: PUSH
1012: EMPTY
1013: LIST
1014: LIST
1015: LIST
1016: LIST
1017: PUSH
1018: LD_INT 17
1020: PUSH
1021: LD_INT 5
1023: PUSH
1024: LD_INT 50
1026: PUSH
1027: LD_INT 300
1029: PUSH
1030: EMPTY
1031: LIST
1032: LIST
1033: LIST
1034: LIST
1035: PUSH
1036: LD_INT 18
1038: PUSH
1039: LD_INT 4
1041: PUSH
1042: LD_INT 5
1044: PUSH
1045: LD_INT 6
1047: PUSH
1048: EMPTY
1049: LIST
1050: LIST
1051: LIST
1052: PUSH
1053: LD_EXP 26
1057: ARRAY
1058: PUSH
1059: LD_INT 30
1061: PUSH
1062: LD_INT 300
1064: PUSH
1065: LD_INT 450
1067: PUSH
1068: LD_INT 500
1070: PUSH
1071: EMPTY
1072: LIST
1073: LIST
1074: LIST
1075: PUSH
1076: LD_EXP 26
1080: ARRAY
1081: PUSH
1082: EMPTY
1083: LIST
1084: LIST
1085: LIST
1086: LIST
1087: PUSH
1088: EMPTY
1089: LIST
1090: LIST
1091: LIST
1092: LIST
1093: ST_TO_ADDR
// sources := [ [ 190 , 193 , mat_siberit ] , [ 182 , 117 , mat_siberit ] , [ 43 , 2 , mat_siberit ] , [ 114 , 152 , mat_oil ] , [ 85 , 38 , mat_oil ] ] ;
1094: LD_ADDR_VAR 0 4
1098: PUSH
1099: LD_INT 190
1101: PUSH
1102: LD_INT 193
1104: PUSH
1105: LD_INT 3
1107: PUSH
1108: EMPTY
1109: LIST
1110: LIST
1111: LIST
1112: PUSH
1113: LD_INT 182
1115: PUSH
1116: LD_INT 117
1118: PUSH
1119: LD_INT 3
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: LIST
1126: PUSH
1127: LD_INT 43
1129: PUSH
1130: LD_INT 2
1132: PUSH
1133: LD_INT 3
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: LIST
1140: PUSH
1141: LD_INT 114
1143: PUSH
1144: LD_INT 152
1146: PUSH
1147: LD_INT 2
1149: PUSH
1150: EMPTY
1151: LIST
1152: LIST
1153: LIST
1154: PUSH
1155: LD_INT 85
1157: PUSH
1158: LD_INT 38
1160: PUSH
1161: LD_INT 2
1163: PUSH
1164: EMPTY
1165: LIST
1166: LIST
1167: LIST
1168: PUSH
1169: EMPTY
1170: LIST
1171: LIST
1172: LIST
1173: LIST
1174: LIST
1175: ST_TO_ADDR
// for i in sources do
1176: LD_ADDR_VAR 0 2
1180: PUSH
1181: LD_VAR 0 4
1185: PUSH
1186: FOR_IN
1187: IFFALSE 1222
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
1189: LD_VAR 0 2
1193: PUSH
1194: LD_INT 1
1196: ARRAY
1197: PPUSH
1198: LD_VAR 0 2
1202: PUSH
1203: LD_INT 2
1205: ARRAY
1206: PPUSH
1207: LD_VAR 0 2
1211: PUSH
1212: LD_INT 3
1214: ARRAY
1215: PPUSH
1216: CALL_OW 62
1220: GO 1186
1222: POP
1223: POP
// disableGlobalTimer := false ;
1224: LD_ADDR_EXP 4
1228: PUSH
1229: LD_INT 0
1231: ST_TO_ADDR
// ruEscape := [ 0 , [ 5 , 6 , 7 ] [ Difficulty ] ] ;
1232: LD_ADDR_EXP 15
1236: PUSH
1237: LD_INT 0
1239: PUSH
1240: LD_INT 5
1242: PUSH
1243: LD_INT 6
1245: PUSH
1246: LD_INT 7
1248: PUSH
1249: EMPTY
1250: LIST
1251: LIST
1252: LIST
1253: PUSH
1254: LD_OWVAR 67
1258: ARRAY
1259: PUSH
1260: EMPTY
1261: LIST
1262: LIST
1263: ST_TO_ADDR
// ruOutpost := [ ] ;
1264: LD_ADDR_EXP 14
1268: PUSH
1269: EMPTY
1270: ST_TO_ADDR
// staticMines := [ ] ;
1271: LD_ADDR_EXP 16
1275: PUSH
1276: EMPTY
1277: ST_TO_ADDR
// baseCaptured := false ;
1278: LD_ADDR_EXP 17
1282: PUSH
1283: LD_INT 0
1285: ST_TO_ADDR
// legDestCounter := 0 ;
1286: LD_ADDR_EXP 18
1290: PUSH
1291: LD_INT 0
1293: ST_TO_ADDR
// legOfferAccepted := false ;
1294: LD_ADDR_EXP 20
1298: PUSH
1299: LD_INT 0
1301: ST_TO_ADDR
// legChangeSide := false ;
1302: LD_ADDR_EXP 21
1306: PUSH
1307: LD_INT 0
1309: ST_TO_ADDR
// allyDestCounter := 0 ;
1310: LD_ADDR_EXP 22
1314: PUSH
1315: LD_INT 0
1317: ST_TO_ADDR
// outpostEscape := false ;
1318: LD_ADDR_EXP 27
1322: PUSH
1323: LD_INT 0
1325: ST_TO_ADDR
// dialogueMineDetected := false ;
1326: LD_ADDR_EXP 28
1330: PUSH
1331: LD_INT 0
1333: ST_TO_ADDR
// PrepareAmericans ;
1334: CALL 7606 0 0
// PrepareLegion ;
1338: CALL 5540 0 0
// PrepareRussians ;
1342: CALL 2506 0 0
// playerForces := PreparePlayer ;
1346: LD_ADDR_EXP 10
1350: PUSH
1351: CALL 8849 0 0
1355: ST_TO_ADDR
// AnimateTrees ( true ) ;
1356: LD_INT 1
1358: PPUSH
1359: CALL_OW 573
// PrepareNature ( 4 , 3 , 8 , 5 , 3 , 1 , 8 , natureGroundArea , natureWaterArea ) ;
1363: LD_INT 4
1365: PPUSH
1366: LD_INT 3
1368: PPUSH
1369: LD_INT 8
1371: PPUSH
1372: LD_INT 5
1374: PPUSH
1375: LD_INT 3
1377: PPUSH
1378: LD_INT 1
1380: PPUSH
1381: LD_INT 8
1383: PPUSH
1384: LD_INT 2
1386: PPUSH
1387: LD_INT 1
1389: PPUSH
1390: CALL 53235 0 9
// MC_Start ;
1394: CALL 61079 0 0
// SetAdditionalRussianForces ;
1398: CALL 7275 0 0
// Action ;
1402: CALL 11206 0 0
// end ; end ;
1406: LD_VAR 0 1
1410: RET
// export function CustomInitMacro ; begin
1411: LD_INT 0
1413: PPUSH
// if GameType <> 1 then
1414: LD_EXP 2
1418: PUSH
1419: LD_INT 1
1421: NONEQUAL
1422: IFFALSE 1426
// exit ;
1424: GO 2501
// MC_SetScanArea ( mc_amer , amerBase ) ;
1426: LD_EXP 5
1430: PPUSH
1431: LD_INT 3
1433: PPUSH
1434: CALL 84260 0 2
// MC_SetParkingArea ( mc_amer , amerParking ) ;
1438: LD_EXP 5
1442: PPUSH
1443: LD_INT 4
1445: PPUSH
1446: CALL 84204 0 2
// MC_SetAllowedTurretWeapons ( mc_amer , [ us_radar , us_heavy_gun , us_rocket_launcher , us_laser , us_double_laser ] ) ;
1450: LD_EXP 5
1454: PPUSH
1455: LD_INT 11
1457: PUSH
1458: LD_INT 6
1460: PUSH
1461: LD_INT 7
1463: PUSH
1464: LD_INT 9
1466: PUSH
1467: LD_INT 10
1469: PUSH
1470: EMPTY
1471: LIST
1472: LIST
1473: LIST
1474: LIST
1475: LIST
1476: PPUSH
1477: CALL 84092 0 2
// MC_SetCratesArea ( mc_amer , amerCrates ) ;
1481: LD_EXP 5
1485: PPUSH
1486: LD_INT 5
1488: PPUSH
1489: CALL 83774 0 2
// MC_SetTame ( mc_amer , amerBase ) ;
1493: LD_EXP 5
1497: PPUSH
1498: LD_INT 3
1500: PPUSH
1501: CALL 83505 0 2
// MC_SetDefenderLimit ( mc_amer , 4 ) ;
1505: LD_EXP 5
1509: PPUSH
1510: LD_INT 4
1512: PPUSH
1513: CALL 83124 0 2
// MC_SetProduceList ( mc_amer , [ [ us_medium_tracked , engine_combustion , control_remote , us_double_gun ] , [ us_medium_tracked , engine_solar , control_remote , us_laser ] , [ us_heavy_tracked , engine_combustion , control_remote , us_rocket_launcher ] , [ us_heavy_tracked , engine_combustion , control_remote , us_heavy_gun ] , ] ) ;
1517: LD_EXP 5
1521: PPUSH
1522: LD_INT 3
1524: PUSH
1525: LD_INT 1
1527: PUSH
1528: LD_INT 2
1530: PUSH
1531: LD_INT 5
1533: PUSH
1534: EMPTY
1535: LIST
1536: LIST
1537: LIST
1538: LIST
1539: PUSH
1540: LD_INT 3
1542: PUSH
1543: LD_INT 2
1545: PUSH
1546: LD_INT 2
1548: PUSH
1549: LD_INT 9
1551: PUSH
1552: EMPTY
1553: LIST
1554: LIST
1555: LIST
1556: LIST
1557: PUSH
1558: LD_INT 4
1560: PUSH
1561: LD_INT 1
1563: PUSH
1564: LD_INT 2
1566: PUSH
1567: LD_INT 7
1569: PUSH
1570: EMPTY
1571: LIST
1572: LIST
1573: LIST
1574: LIST
1575: PUSH
1576: LD_INT 4
1578: PUSH
1579: LD_INT 1
1581: PUSH
1582: LD_INT 2
1584: PUSH
1585: LD_INT 6
1587: PUSH
1588: EMPTY
1589: LIST
1590: LIST
1591: LIST
1592: LIST
1593: PUSH
1594: EMPTY
1595: LIST
1596: LIST
1597: LIST
1598: LIST
1599: PPUSH
1600: CALL 82939 0 2
// MC_SetBuildingList ( mc_amer , [ [ b_turret , 114 , 16 , 0 ] , [ b_bunker , 110 , 12 , 0 ] ] ) ;
1604: LD_EXP 5
1608: PPUSH
1609: LD_INT 33
1611: PUSH
1612: LD_INT 114
1614: PUSH
1615: LD_INT 16
1617: PUSH
1618: LD_INT 0
1620: PUSH
1621: EMPTY
1622: LIST
1623: LIST
1624: LIST
1625: LIST
1626: PUSH
1627: LD_INT 32
1629: PUSH
1630: LD_INT 110
1632: PUSH
1633: LD_INT 12
1635: PUSH
1636: LD_INT 0
1638: PUSH
1639: EMPTY
1640: LIST
1641: LIST
1642: LIST
1643: LIST
1644: PUSH
1645: EMPTY
1646: LIST
1647: LIST
1648: PPUSH
1649: CALL 82831 0 2
// MC_SetLabKind ( mc_amer , [ b_lab_weapon , b_lab_opto , b_lab_computer , b_lab_siberium ] ) ;
1653: LD_EXP 5
1657: PPUSH
1658: LD_INT 10
1660: PUSH
1661: LD_INT 15
1663: PUSH
1664: LD_INT 12
1666: PUSH
1667: LD_INT 11
1669: PUSH
1670: EMPTY
1671: LIST
1672: LIST
1673: LIST
1674: LIST
1675: PPUSH
1676: CALL 83681 0 2
// MC_SetScanArea ( mc_leg , legBase ) ;
1680: LD_EXP 6
1684: PPUSH
1685: LD_INT 6
1687: PPUSH
1688: CALL 84260 0 2
// MC_SetParkingArea ( mc_leg , legParking ) ;
1692: LD_EXP 6
1696: PPUSH
1697: LD_INT 7
1699: PPUSH
1700: CALL 84204 0 2
// MC_SetAllowedTurretWeapons ( mc_leg , [ ar_radar , ar_gun , ar_rocket_launcher , ar_gatling_gun ] ) ;
1704: LD_EXP 6
1708: PPUSH
1709: LD_INT 30
1711: PUSH
1712: LD_INT 27
1714: PUSH
1715: LD_INT 28
1717: PUSH
1718: LD_INT 25
1720: PUSH
1721: EMPTY
1722: LIST
1723: LIST
1724: LIST
1725: LIST
1726: PPUSH
1727: CALL 84092 0 2
// MC_SetCratesArea ( mc_leg , legCrates ) ;
1731: LD_EXP 6
1735: PPUSH
1736: LD_INT 17
1738: PPUSH
1739: CALL 83774 0 2
// MC_SetTame ( mc_leg , legBase ) ;
1743: LD_EXP 6
1747: PPUSH
1748: LD_INT 6
1750: PPUSH
1751: CALL 83505 0 2
// MC_SetDefenderLimit ( mc_leg , 5 ) ;
1755: LD_EXP 6
1759: PPUSH
1760: LD_INT 5
1762: PPUSH
1763: CALL 83124 0 2
// MC_SetMinesField ( mc_leg , 10 , legMines ) ;
1767: LD_EXP 6
1771: PPUSH
1772: LD_INT 10
1774: PPUSH
1775: LD_INT 9
1777: PPUSH
1778: CALL 82621 0 3
// MC_SetBuildingList ( mc_leg , [ [ b_armoury , 157 , 144 , 0 ] , [ b_bunker , 151 , 142 , 0 ] , [ b_bunker , 161 , 144 , 0 ] , [ b_bunker , 140 , 133 , 0 ] ] ) ;
1782: LD_EXP 6
1786: PPUSH
1787: LD_INT 4
1789: PUSH
1790: LD_INT 157
1792: PUSH
1793: LD_INT 144
1795: PUSH
1796: LD_INT 0
1798: PUSH
1799: EMPTY
1800: LIST
1801: LIST
1802: LIST
1803: LIST
1804: PUSH
1805: LD_INT 32
1807: PUSH
1808: LD_INT 151
1810: PUSH
1811: LD_INT 142
1813: PUSH
1814: LD_INT 0
1816: PUSH
1817: EMPTY
1818: LIST
1819: LIST
1820: LIST
1821: LIST
1822: PUSH
1823: LD_INT 32
1825: PUSH
1826: LD_INT 161
1828: PUSH
1829: LD_INT 144
1831: PUSH
1832: LD_INT 0
1834: PUSH
1835: EMPTY
1836: LIST
1837: LIST
1838: LIST
1839: LIST
1840: PUSH
1841: LD_INT 32
1843: PUSH
1844: LD_INT 140
1846: PUSH
1847: LD_INT 133
1849: PUSH
1850: LD_INT 0
1852: PUSH
1853: EMPTY
1854: LIST
1855: LIST
1856: LIST
1857: LIST
1858: PUSH
1859: EMPTY
1860: LIST
1861: LIST
1862: LIST
1863: LIST
1864: PPUSH
1865: CALL 82831 0 2
// MC_SetProduceList ( mc_leg , [ [ ar_medium_trike , engine_solar , control_manual , ar_control_tower ] , [ ar_medium_trike , engine_solar , control_manual , ar_control_tower ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_cargo_bay ] , [ ar_medium_trike , engine_combustion , control_remote , ar_crane ] ] ) ;
1869: LD_EXP 6
1873: PPUSH
1874: LD_INT 13
1876: PUSH
1877: LD_INT 2
1879: PUSH
1880: LD_INT 1
1882: PUSH
1883: LD_INT 31
1885: PUSH
1886: EMPTY
1887: LIST
1888: LIST
1889: LIST
1890: LIST
1891: PUSH
1892: LD_INT 13
1894: PUSH
1895: LD_INT 2
1897: PUSH
1898: LD_INT 1
1900: PUSH
1901: LD_INT 31
1903: PUSH
1904: EMPTY
1905: LIST
1906: LIST
1907: LIST
1908: LIST
1909: PUSH
1910: LD_INT 13
1912: PUSH
1913: LD_INT 1
1915: PUSH
1916: LD_INT 1
1918: PUSH
1919: LD_INT 27
1921: PUSH
1922: EMPTY
1923: LIST
1924: LIST
1925: LIST
1926: LIST
1927: PUSH
1928: LD_INT 13
1930: PUSH
1931: LD_INT 1
1933: PUSH
1934: LD_INT 2
1936: PUSH
1937: LD_INT 27
1939: PUSH
1940: EMPTY
1941: LIST
1942: LIST
1943: LIST
1944: LIST
1945: PUSH
1946: LD_INT 13
1948: PUSH
1949: LD_INT 1
1951: PUSH
1952: LD_INT 2
1954: PUSH
1955: LD_INT 27
1957: PUSH
1958: EMPTY
1959: LIST
1960: LIST
1961: LIST
1962: LIST
1963: PUSH
1964: LD_INT 13
1966: PUSH
1967: LD_INT 1
1969: PUSH
1970: LD_INT 2
1972: PUSH
1973: LD_INT 28
1975: PUSH
1976: EMPTY
1977: LIST
1978: LIST
1979: LIST
1980: LIST
1981: PUSH
1982: LD_INT 13
1984: PUSH
1985: LD_INT 1
1987: PUSH
1988: LD_INT 2
1990: PUSH
1991: LD_INT 28
1993: PUSH
1994: EMPTY
1995: LIST
1996: LIST
1997: LIST
1998: LIST
1999: PUSH
2000: LD_INT 13
2002: PUSH
2003: LD_INT 1
2005: PUSH
2006: LD_INT 2
2008: PUSH
2009: LD_INT 32
2011: PUSH
2012: EMPTY
2013: LIST
2014: LIST
2015: LIST
2016: LIST
2017: PUSH
2018: LD_INT 13
2020: PUSH
2021: LD_INT 1
2023: PUSH
2024: LD_INT 2
2026: PUSH
2027: LD_EXP 35
2031: PUSH
2032: EMPTY
2033: LIST
2034: LIST
2035: LIST
2036: LIST
2037: PUSH
2038: EMPTY
2039: LIST
2040: LIST
2041: LIST
2042: LIST
2043: LIST
2044: LIST
2045: LIST
2046: LIST
2047: LIST
2048: PPUSH
2049: CALL 82939 0 2
// HiddenCamera ( 165 , 156 , 8 ) ;
2053: LD_INT 165
2055: PPUSH
2056: LD_INT 156
2058: PPUSH
2059: LD_INT 8
2061: PPUSH
2062: CALL_OW 244
// MC_SetScanArea ( mc_rus_1 , rus1Base ) ;
2066: LD_EXP 7
2070: PPUSH
2071: LD_INT 15
2073: PPUSH
2074: CALL 84260 0 2
// MC_SetParkingArea ( mc_rus_1 , rus1Parking ) ;
2078: LD_EXP 7
2082: PPUSH
2083: LD_INT 16
2085: PPUSH
2086: CALL 84204 0 2
// MC_SetAllowedTurretWeapons ( mc_rus_1 , [ ru_gatling_gun , ru_rocket , ru_rocket_launcher , ru_time_lapser , ru_heavy_gun ] ) ;
2090: LD_EXP 7
2094: PPUSH
2095: LD_INT 43
2097: PUSH
2098: LD_INT 47
2100: PUSH
2101: LD_INT 45
2103: PUSH
2104: LD_INT 49
2106: PUSH
2107: LD_INT 46
2109: PUSH
2110: EMPTY
2111: LIST
2112: LIST
2113: LIST
2114: LIST
2115: LIST
2116: PPUSH
2117: CALL 84092 0 2
// MC_SetCratesArea ( mc_rus_1 , rusCrates ) ;
2121: LD_EXP 7
2125: PPUSH
2126: LD_INT 13
2128: PPUSH
2129: CALL 83774 0 2
// MC_SetTame ( mc_rus_1 , rus1Base ) ;
2133: LD_EXP 7
2137: PPUSH
2138: LD_INT 15
2140: PPUSH
2141: CALL 83505 0 2
// MC_SetDefenderLimit ( mc_rus_1 , 5 ) ;
2145: LD_EXP 7
2149: PPUSH
2150: LD_INT 5
2152: PPUSH
2153: CALL 83124 0 2
// MC_SetProduceList ( mc_rus_1 , [ [ ru_heavy_wheeled , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_wheeled , engine_combustion , control_manual , ru_heavy_gun ] , [ ru_heavy_wheeled , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_heavy_wheeled , engine_combustion , control_manual , ru_rocket ] , [ ru_heavy_wheeled , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_wheeled , engine_combustion , control_computer , ru_cargo_bay ] , [ ru_medium_wheeled , engine_combustion , control_computer , ru_crane ] , ] ) ;
2157: LD_EXP 7
2161: PPUSH
2162: LD_INT 23
2164: PUSH
2165: LD_INT 1
2167: PUSH
2168: LD_INT 3
2170: PUSH
2171: LD_INT 46
2173: PUSH
2174: EMPTY
2175: LIST
2176: LIST
2177: LIST
2178: LIST
2179: PUSH
2180: LD_INT 23
2182: PUSH
2183: LD_INT 1
2185: PUSH
2186: LD_INT 1
2188: PUSH
2189: LD_INT 46
2191: PUSH
2192: EMPTY
2193: LIST
2194: LIST
2195: LIST
2196: LIST
2197: PUSH
2198: LD_INT 23
2200: PUSH
2201: LD_INT 1
2203: PUSH
2204: LD_INT 3
2206: PUSH
2207: LD_INT 45
2209: PUSH
2210: EMPTY
2211: LIST
2212: LIST
2213: LIST
2214: LIST
2215: PUSH
2216: LD_INT 23
2218: PUSH
2219: LD_INT 1
2221: PUSH
2222: LD_INT 1
2224: PUSH
2225: LD_INT 47
2227: PUSH
2228: EMPTY
2229: LIST
2230: LIST
2231: LIST
2232: LIST
2233: PUSH
2234: LD_INT 23
2236: PUSH
2237: LD_INT 1
2239: PUSH
2240: LD_INT 3
2242: PUSH
2243: LD_INT 46
2245: PUSH
2246: EMPTY
2247: LIST
2248: LIST
2249: LIST
2250: LIST
2251: PUSH
2252: LD_INT 21
2254: PUSH
2255: LD_INT 1
2257: PUSH
2258: LD_INT 3
2260: PUSH
2261: LD_INT 51
2263: PUSH
2264: EMPTY
2265: LIST
2266: LIST
2267: LIST
2268: LIST
2269: PUSH
2270: LD_INT 21
2272: PUSH
2273: LD_INT 1
2275: PUSH
2276: LD_INT 3
2278: PUSH
2279: LD_INT 52
2281: PUSH
2282: EMPTY
2283: LIST
2284: LIST
2285: LIST
2286: LIST
2287: PUSH
2288: EMPTY
2289: LIST
2290: LIST
2291: LIST
2292: LIST
2293: LIST
2294: LIST
2295: LIST
2296: PPUSH
2297: CALL 82939 0 2
// MC_SetScanArea ( mc_rus_2 , rus2Base ) ;
2301: LD_EXP 8
2305: PPUSH
2306: LD_INT 11
2308: PPUSH
2309: CALL 84260 0 2
// MC_SetParkingArea ( mc_rus_2 , rus2Parking ) ;
2313: LD_EXP 8
2317: PPUSH
2318: LD_INT 12
2320: PPUSH
2321: CALL 84204 0 2
// MC_SetAllowedTurretWeapons ( mc_rus_2 , [ ru_gatling_gun , ru_rocket , ru_rocket_launcher , ru_time_lapser , ru_heavy_gun ] ) ;
2325: LD_EXP 8
2329: PPUSH
2330: LD_INT 43
2332: PUSH
2333: LD_INT 47
2335: PUSH
2336: LD_INT 45
2338: PUSH
2339: LD_INT 49
2341: PUSH
2342: LD_INT 46
2344: PUSH
2345: EMPTY
2346: LIST
2347: LIST
2348: LIST
2349: LIST
2350: LIST
2351: PPUSH
2352: CALL 84092 0 2
// MC_SetCratesArea ( mc_rus_2 , rusCrates ) ;
2356: LD_EXP 8
2360: PPUSH
2361: LD_INT 13
2363: PPUSH
2364: CALL 83774 0 2
// MC_SetTame ( mc_rus_2 , rus2Base ) ;
2368: LD_EXP 8
2372: PPUSH
2373: LD_INT 11
2375: PPUSH
2376: CALL 83505 0 2
// MC_SetDefenderLimit ( mc_rus_2 , 4 ) ;
2380: LD_EXP 8
2384: PPUSH
2385: LD_INT 4
2387: PPUSH
2388: CALL 83124 0 2
// MC_SetTeleportExit ( mc_rus_2 , [ [ 115 , 201 ] ] ) ;
2392: LD_EXP 8
2396: PPUSH
2397: LD_INT 115
2399: PUSH
2400: LD_INT 201
2402: PUSH
2403: EMPTY
2404: LIST
2405: LIST
2406: PUSH
2407: EMPTY
2408: LIST
2409: PPUSH
2410: CALL 83830 0 2
// MC_SetProduceList ( mc_rus_2 , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] ] ) ;
2414: LD_EXP 8
2418: PPUSH
2419: LD_INT 24
2421: PUSH
2422: LD_INT 3
2424: PUSH
2425: LD_INT 3
2427: PUSH
2428: LD_INT 46
2430: PUSH
2431: EMPTY
2432: LIST
2433: LIST
2434: LIST
2435: LIST
2436: PUSH
2437: LD_INT 24
2439: PUSH
2440: LD_INT 3
2442: PUSH
2443: LD_INT 3
2445: PUSH
2446: LD_INT 46
2448: PUSH
2449: EMPTY
2450: LIST
2451: LIST
2452: LIST
2453: LIST
2454: PUSH
2455: LD_INT 24
2457: PUSH
2458: LD_INT 3
2460: PUSH
2461: LD_INT 3
2463: PUSH
2464: LD_INT 46
2466: PUSH
2467: EMPTY
2468: LIST
2469: LIST
2470: LIST
2471: LIST
2472: PUSH
2473: LD_INT 24
2475: PUSH
2476: LD_INT 3
2478: PUSH
2479: LD_INT 3
2481: PUSH
2482: LD_INT 46
2484: PUSH
2485: EMPTY
2486: LIST
2487: LIST
2488: LIST
2489: LIST
2490: PUSH
2491: EMPTY
2492: LIST
2493: LIST
2494: LIST
2495: LIST
2496: PPUSH
2497: CALL 82939 0 2
// end ;
2501: LD_VAR 0 1
2505: RET
// export function PrepareRussians ; var i , b , tmp , side , sr , depot , base ; begin
2506: LD_INT 0
2508: PPUSH
2509: PPUSH
2510: PPUSH
2511: PPUSH
2512: PPUSH
2513: PPUSH
2514: PPUSH
2515: PPUSH
// PrepareNature ( 0 , 0 , 3 , 0 , 0 , 0 , 0 , rusApe , 0 ) ;
2516: LD_INT 0
2518: PPUSH
2519: LD_INT 0
2521: PPUSH
2522: LD_INT 3
2524: PPUSH
2525: LD_INT 0
2527: PPUSH
2528: LD_INT 0
2530: PPUSH
2531: LD_INT 0
2533: PPUSH
2534: LD_INT 0
2536: PPUSH
2537: LD_INT 14
2539: PPUSH
2540: LD_INT 0
2542: PPUSH
2543: CALL 53235 0 9
// side := 3 ;
2547: LD_ADDR_VAR 0 5
2551: PUSH
2552: LD_INT 3
2554: ST_TO_ADDR
// SetTech ( tech_targTeleport , side , state_researched ) ;
2555: LD_INT 38
2557: PPUSH
2558: LD_VAR 0 5
2562: PPUSH
2563: LD_INT 2
2565: PPUSH
2566: CALL_OW 322
// SetTech ( tech_gun , side , state_researched ) ;
2570: LD_INT 39
2572: PPUSH
2573: LD_VAR 0 5
2577: PPUSH
2578: LD_INT 2
2580: PPUSH
2581: CALL_OW 322
// SetTech ( tech_advMet , side , state_researched ) ;
2585: LD_INT 34
2587: PPUSH
2588: LD_VAR 0 5
2592: PPUSH
2593: LD_INT 2
2595: PPUSH
2596: CALL_OW 322
// tmp := [ [ 0 , 208 , 163 , 4 , 0 , 0 ] , [ 3 , 194 , 161 , 1 , 0 , 0 ] , [ 17 , 190 , 161 , 1 , 0 , 0 ] , [ 5 , 200 , 145 , 3 , 0 , 0 ] , [ 32 , 192 , 144 , 3 , 0 , 0 ] , [ 26 , 216 , 172 , 3 , 0 , 0 ] , [ 26 , 218 , 176 , 3 , 0 , 0 ] , [ 29 , 182 , 149 , 3 , 0 , 0 ] , [ 8 , 201 , 171 , 0 , 10 , 11 ] , [ 32 , 188 , 167 , 0 , 0 , 0 ] , [ 32 , 202 , 179 , 0 , 0 , 0 ] , [ 32 , 209 , 182 , 0 , 0 , 0 ] , [ 32 , 220 , 183 , 5 , 0 , 0 ] , [ 32 , 225 , 181 , 5 , 0 , 0 ] , [ 26 , 220 , 174 , 5 , 0 , 0 ] , [ 1 , 84 , 128 , 4 , 0 , 0 ] , [ 3 , 68 , 121 , 1 , 0 , 0 ] , [ 19 , 72 , 125 , 5 , 0 , 0 ] , [ 18 , 68 , 124 , 0 , 0 , 0 ] , [ 24 , 64 , 121 , 1 , 0 , 0 ] , [ 17 , 65 , 118 , 2 , 0 , 0 ] , [ 21 , 68 , 117 , 3 , 0 , 0 ] , [ 8 , 68 , 130 , 1 , 14 , 10 ] , [ 8 , 67 , 110 , 2 , 11 , 12 ] , [ 28 , 85 , 108 , 2 , 0 , 0 ] , [ 28 , 85 , 124 , 2 , 0 , 0 ] , [ 30 , 97 , 119 , 2 , 0 , 0 ] , [ 5 , 111 , 138 , 4 , 0 , 0 ] , [ 33 , 104 , 130 , 3 , 0 , 0 ] , [ 33 , 110 , 142 , 5 , 0 , 0 ] , [ 33 , 91 , 131 , 5 , 0 , 0 ] , [ 33 , 107 , 157 , 5 , 0 , 0 ] , [ 33 , 104 , 160 , 5 , 0 , 0 ] , [ 33 , 101 , 162 , 5 , 0 , 0 ] , [ 32 , 87 , 157 , 5 , 0 , 0 ] , [ 32 , 105 , 158 , 5 , 0 , 0 ] , [ 33 , 91 , 118 , 4 , 0 , 0 ] , [ 33 , 89 , 107 , 4 , 0 , 0 ] , [ 5 , 86 , 96 , 3 , 0 , 0 ] , [ 33 , 91 , 102 , 4 , 0 , 0 ] , [ 32 , 80 , 95 , 3 , 0 , 0 ] , [ 28 , 77 , 105 , 3 , 0 , 0 ] , [ 28 , 85 , 113 , 3 , 0 , 0 ] , [ 28 , 55 , 97 , 3 , 0 , 0 ] , [ 28 , 88 , 128 , 3 , 0 , 0 ] , [ 32 , 69 , 101 , 2 , 0 , 0 ] , [ 1 , 34 , 23 , 4 , 0 , 0 ] , [ 8 , 25 , 4 , 3 , 11 , 10 ] , [ 8 , 15 , 4 , 2 , 14 , 12 ] , [ 29 , 55 , 35 , 2 , 0 , 0 ] , [ 29 , 24 , 44 , 2 , 0 , 0 ] , [ 34 , 34 , 32 , 4 , 0 , 0 ] , [ 3 , 14 , 16 , 1 , 0 , 0 ] , [ 24 , 10 , 16 , 1 , 0 , 0 ] , [ 21 , 11 , 13 , 2 , 0 , 0 ] , [ 18 , 14 , 12 , 3 , 0 , 0 ] , [ 16 , 14 , 19 , 0 , 0 , 0 ] , [ 17 , 18 , 20 , 5 , 0 , 0 ] , [ 28 , 10 , 5 , 1 , 0 , 0 ] , [ 28 , 8 , 8 , 1 , 0 , 0 ] , [ 26 , 19 , 2 , 1 , 0 , 0 ] , [ 26 , 30 , 2 , 1 , 0 , 0 ] , [ 5 , 59 , 20 , 4 , 0 , 0 ] , [ 32 , 60 , 24 , 4 , 0 , 0 ] , [ 32 , 61 , 45 , 5 , 0 , 0 ] , [ 32 , 52 , 51 , 5 , 0 , 0 ] , [ 33 , 56 , 51 , 5 , 0 , 0 ] , [ 33 , 62 , 49 , 5 , 0 , 0 ] , [ 33 , 41 , 47 , 5 , 0 , 0 ] , [ 33 , 33 , 52 , 5 , 0 , 0 ] , [ 5 , 31 , 40 , 0 , 0 , 0 ] , [ 33 , 65 , 37 , 5 , 0 , 0 ] , [ 33 , 63 , 29 , 4 , 0 , 0 ] , [ 33 , 54 , 11 , 4 , 0 , 0 ] , [ 33 , 56 , 15 , 4 , 0 , 0 ] , [ 33 , 51 , 6 , 4 , 0 , 0 ] , [ 26 , 39 , 25 , 0 , 0 , 0 ] , [ 26 , 37 , 21 , 0 , 0 , 0 ] , [ 32 , 35 , 17 , 4 , 0 , 0 ] , [ 33 , 35 , 28 , 4 , 0 , 0 ] , [ 33 , 28 , 46 , 5 , 0 , 0 ] , [ 33 , 31 , 6 , 4 , 0 , 0 ] , [ 26 , 54 , 38 , 4 , 0 , 0 ] , [ 33 , 207 , 167 , 3 , 0 , 0 ] , [ 30 , 43 , 2 , 4 , 0 , 0 ] ] ;
2600: LD_ADDR_VAR 0 4
2604: PUSH
2605: LD_INT 0
2607: PUSH
2608: LD_INT 208
2610: PUSH
2611: LD_INT 163
2613: PUSH
2614: LD_INT 4
2616: PUSH
2617: LD_INT 0
2619: PUSH
2620: LD_INT 0
2622: PUSH
2623: EMPTY
2624: LIST
2625: LIST
2626: LIST
2627: LIST
2628: LIST
2629: LIST
2630: PUSH
2631: LD_INT 3
2633: PUSH
2634: LD_INT 194
2636: PUSH
2637: LD_INT 161
2639: PUSH
2640: LD_INT 1
2642: PUSH
2643: LD_INT 0
2645: PUSH
2646: LD_INT 0
2648: PUSH
2649: EMPTY
2650: LIST
2651: LIST
2652: LIST
2653: LIST
2654: LIST
2655: LIST
2656: PUSH
2657: LD_INT 17
2659: PUSH
2660: LD_INT 190
2662: PUSH
2663: LD_INT 161
2665: PUSH
2666: LD_INT 1
2668: PUSH
2669: LD_INT 0
2671: PUSH
2672: LD_INT 0
2674: PUSH
2675: EMPTY
2676: LIST
2677: LIST
2678: LIST
2679: LIST
2680: LIST
2681: LIST
2682: PUSH
2683: LD_INT 5
2685: PUSH
2686: LD_INT 200
2688: PUSH
2689: LD_INT 145
2691: PUSH
2692: LD_INT 3
2694: PUSH
2695: LD_INT 0
2697: PUSH
2698: LD_INT 0
2700: PUSH
2701: EMPTY
2702: LIST
2703: LIST
2704: LIST
2705: LIST
2706: LIST
2707: LIST
2708: PUSH
2709: LD_INT 32
2711: PUSH
2712: LD_INT 192
2714: PUSH
2715: LD_INT 144
2717: PUSH
2718: LD_INT 3
2720: PUSH
2721: LD_INT 0
2723: PUSH
2724: LD_INT 0
2726: PUSH
2727: EMPTY
2728: LIST
2729: LIST
2730: LIST
2731: LIST
2732: LIST
2733: LIST
2734: PUSH
2735: LD_INT 26
2737: PUSH
2738: LD_INT 216
2740: PUSH
2741: LD_INT 172
2743: PUSH
2744: LD_INT 3
2746: PUSH
2747: LD_INT 0
2749: PUSH
2750: LD_INT 0
2752: PUSH
2753: EMPTY
2754: LIST
2755: LIST
2756: LIST
2757: LIST
2758: LIST
2759: LIST
2760: PUSH
2761: LD_INT 26
2763: PUSH
2764: LD_INT 218
2766: PUSH
2767: LD_INT 176
2769: PUSH
2770: LD_INT 3
2772: PUSH
2773: LD_INT 0
2775: PUSH
2776: LD_INT 0
2778: PUSH
2779: EMPTY
2780: LIST
2781: LIST
2782: LIST
2783: LIST
2784: LIST
2785: LIST
2786: PUSH
2787: LD_INT 29
2789: PUSH
2790: LD_INT 182
2792: PUSH
2793: LD_INT 149
2795: PUSH
2796: LD_INT 3
2798: PUSH
2799: LD_INT 0
2801: PUSH
2802: LD_INT 0
2804: PUSH
2805: EMPTY
2806: LIST
2807: LIST
2808: LIST
2809: LIST
2810: LIST
2811: LIST
2812: PUSH
2813: LD_INT 8
2815: PUSH
2816: LD_INT 201
2818: PUSH
2819: LD_INT 171
2821: PUSH
2822: LD_INT 0
2824: PUSH
2825: LD_INT 10
2827: PUSH
2828: LD_INT 11
2830: PUSH
2831: EMPTY
2832: LIST
2833: LIST
2834: LIST
2835: LIST
2836: LIST
2837: LIST
2838: PUSH
2839: LD_INT 32
2841: PUSH
2842: LD_INT 188
2844: PUSH
2845: LD_INT 167
2847: PUSH
2848: LD_INT 0
2850: PUSH
2851: LD_INT 0
2853: PUSH
2854: LD_INT 0
2856: PUSH
2857: EMPTY
2858: LIST
2859: LIST
2860: LIST
2861: LIST
2862: LIST
2863: LIST
2864: PUSH
2865: LD_INT 32
2867: PUSH
2868: LD_INT 202
2870: PUSH
2871: LD_INT 179
2873: PUSH
2874: LD_INT 0
2876: PUSH
2877: LD_INT 0
2879: PUSH
2880: LD_INT 0
2882: PUSH
2883: EMPTY
2884: LIST
2885: LIST
2886: LIST
2887: LIST
2888: LIST
2889: LIST
2890: PUSH
2891: LD_INT 32
2893: PUSH
2894: LD_INT 209
2896: PUSH
2897: LD_INT 182
2899: PUSH
2900: LD_INT 0
2902: PUSH
2903: LD_INT 0
2905: PUSH
2906: LD_INT 0
2908: PUSH
2909: EMPTY
2910: LIST
2911: LIST
2912: LIST
2913: LIST
2914: LIST
2915: LIST
2916: PUSH
2917: LD_INT 32
2919: PUSH
2920: LD_INT 220
2922: PUSH
2923: LD_INT 183
2925: PUSH
2926: LD_INT 5
2928: PUSH
2929: LD_INT 0
2931: PUSH
2932: LD_INT 0
2934: PUSH
2935: EMPTY
2936: LIST
2937: LIST
2938: LIST
2939: LIST
2940: LIST
2941: LIST
2942: PUSH
2943: LD_INT 32
2945: PUSH
2946: LD_INT 225
2948: PUSH
2949: LD_INT 181
2951: PUSH
2952: LD_INT 5
2954: PUSH
2955: LD_INT 0
2957: PUSH
2958: LD_INT 0
2960: PUSH
2961: EMPTY
2962: LIST
2963: LIST
2964: LIST
2965: LIST
2966: LIST
2967: LIST
2968: PUSH
2969: LD_INT 26
2971: PUSH
2972: LD_INT 220
2974: PUSH
2975: LD_INT 174
2977: PUSH
2978: LD_INT 5
2980: PUSH
2981: LD_INT 0
2983: PUSH
2984: LD_INT 0
2986: PUSH
2987: EMPTY
2988: LIST
2989: LIST
2990: LIST
2991: LIST
2992: LIST
2993: LIST
2994: PUSH
2995: LD_INT 1
2997: PUSH
2998: LD_INT 84
3000: PUSH
3001: LD_INT 128
3003: PUSH
3004: LD_INT 4
3006: PUSH
3007: LD_INT 0
3009: PUSH
3010: LD_INT 0
3012: PUSH
3013: EMPTY
3014: LIST
3015: LIST
3016: LIST
3017: LIST
3018: LIST
3019: LIST
3020: PUSH
3021: LD_INT 3
3023: PUSH
3024: LD_INT 68
3026: PUSH
3027: LD_INT 121
3029: PUSH
3030: LD_INT 1
3032: PUSH
3033: LD_INT 0
3035: PUSH
3036: LD_INT 0
3038: PUSH
3039: EMPTY
3040: LIST
3041: LIST
3042: LIST
3043: LIST
3044: LIST
3045: LIST
3046: PUSH
3047: LD_INT 19
3049: PUSH
3050: LD_INT 72
3052: PUSH
3053: LD_INT 125
3055: PUSH
3056: LD_INT 5
3058: PUSH
3059: LD_INT 0
3061: PUSH
3062: LD_INT 0
3064: PUSH
3065: EMPTY
3066: LIST
3067: LIST
3068: LIST
3069: LIST
3070: LIST
3071: LIST
3072: PUSH
3073: LD_INT 18
3075: PUSH
3076: LD_INT 68
3078: PUSH
3079: LD_INT 124
3081: PUSH
3082: LD_INT 0
3084: PUSH
3085: LD_INT 0
3087: PUSH
3088: LD_INT 0
3090: PUSH
3091: EMPTY
3092: LIST
3093: LIST
3094: LIST
3095: LIST
3096: LIST
3097: LIST
3098: PUSH
3099: LD_INT 24
3101: PUSH
3102: LD_INT 64
3104: PUSH
3105: LD_INT 121
3107: PUSH
3108: LD_INT 1
3110: PUSH
3111: LD_INT 0
3113: PUSH
3114: LD_INT 0
3116: PUSH
3117: EMPTY
3118: LIST
3119: LIST
3120: LIST
3121: LIST
3122: LIST
3123: LIST
3124: PUSH
3125: LD_INT 17
3127: PUSH
3128: LD_INT 65
3130: PUSH
3131: LD_INT 118
3133: PUSH
3134: LD_INT 2
3136: PUSH
3137: LD_INT 0
3139: PUSH
3140: LD_INT 0
3142: PUSH
3143: EMPTY
3144: LIST
3145: LIST
3146: LIST
3147: LIST
3148: LIST
3149: LIST
3150: PUSH
3151: LD_INT 21
3153: PUSH
3154: LD_INT 68
3156: PUSH
3157: LD_INT 117
3159: PUSH
3160: LD_INT 3
3162: PUSH
3163: LD_INT 0
3165: PUSH
3166: LD_INT 0
3168: PUSH
3169: EMPTY
3170: LIST
3171: LIST
3172: LIST
3173: LIST
3174: LIST
3175: LIST
3176: PUSH
3177: LD_INT 8
3179: PUSH
3180: LD_INT 68
3182: PUSH
3183: LD_INT 130
3185: PUSH
3186: LD_INT 1
3188: PUSH
3189: LD_INT 14
3191: PUSH
3192: LD_INT 10
3194: PUSH
3195: EMPTY
3196: LIST
3197: LIST
3198: LIST
3199: LIST
3200: LIST
3201: LIST
3202: PUSH
3203: LD_INT 8
3205: PUSH
3206: LD_INT 67
3208: PUSH
3209: LD_INT 110
3211: PUSH
3212: LD_INT 2
3214: PUSH
3215: LD_INT 11
3217: PUSH
3218: LD_INT 12
3220: PUSH
3221: EMPTY
3222: LIST
3223: LIST
3224: LIST
3225: LIST
3226: LIST
3227: LIST
3228: PUSH
3229: LD_INT 28
3231: PUSH
3232: LD_INT 85
3234: PUSH
3235: LD_INT 108
3237: PUSH
3238: LD_INT 2
3240: PUSH
3241: LD_INT 0
3243: PUSH
3244: LD_INT 0
3246: PUSH
3247: EMPTY
3248: LIST
3249: LIST
3250: LIST
3251: LIST
3252: LIST
3253: LIST
3254: PUSH
3255: LD_INT 28
3257: PUSH
3258: LD_INT 85
3260: PUSH
3261: LD_INT 124
3263: PUSH
3264: LD_INT 2
3266: PUSH
3267: LD_INT 0
3269: PUSH
3270: LD_INT 0
3272: PUSH
3273: EMPTY
3274: LIST
3275: LIST
3276: LIST
3277: LIST
3278: LIST
3279: LIST
3280: PUSH
3281: LD_INT 30
3283: PUSH
3284: LD_INT 97
3286: PUSH
3287: LD_INT 119
3289: PUSH
3290: LD_INT 2
3292: PUSH
3293: LD_INT 0
3295: PUSH
3296: LD_INT 0
3298: PUSH
3299: EMPTY
3300: LIST
3301: LIST
3302: LIST
3303: LIST
3304: LIST
3305: LIST
3306: PUSH
3307: LD_INT 5
3309: PUSH
3310: LD_INT 111
3312: PUSH
3313: LD_INT 138
3315: PUSH
3316: LD_INT 4
3318: PUSH
3319: LD_INT 0
3321: PUSH
3322: LD_INT 0
3324: PUSH
3325: EMPTY
3326: LIST
3327: LIST
3328: LIST
3329: LIST
3330: LIST
3331: LIST
3332: PUSH
3333: LD_INT 33
3335: PUSH
3336: LD_INT 104
3338: PUSH
3339: LD_INT 130
3341: PUSH
3342: LD_INT 3
3344: PUSH
3345: LD_INT 0
3347: PUSH
3348: LD_INT 0
3350: PUSH
3351: EMPTY
3352: LIST
3353: LIST
3354: LIST
3355: LIST
3356: LIST
3357: LIST
3358: PUSH
3359: LD_INT 33
3361: PUSH
3362: LD_INT 110
3364: PUSH
3365: LD_INT 142
3367: PUSH
3368: LD_INT 5
3370: PUSH
3371: LD_INT 0
3373: PUSH
3374: LD_INT 0
3376: PUSH
3377: EMPTY
3378: LIST
3379: LIST
3380: LIST
3381: LIST
3382: LIST
3383: LIST
3384: PUSH
3385: LD_INT 33
3387: PUSH
3388: LD_INT 91
3390: PUSH
3391: LD_INT 131
3393: PUSH
3394: LD_INT 5
3396: PUSH
3397: LD_INT 0
3399: PUSH
3400: LD_INT 0
3402: PUSH
3403: EMPTY
3404: LIST
3405: LIST
3406: LIST
3407: LIST
3408: LIST
3409: LIST
3410: PUSH
3411: LD_INT 33
3413: PUSH
3414: LD_INT 107
3416: PUSH
3417: LD_INT 157
3419: PUSH
3420: LD_INT 5
3422: PUSH
3423: LD_INT 0
3425: PUSH
3426: LD_INT 0
3428: PUSH
3429: EMPTY
3430: LIST
3431: LIST
3432: LIST
3433: LIST
3434: LIST
3435: LIST
3436: PUSH
3437: LD_INT 33
3439: PUSH
3440: LD_INT 104
3442: PUSH
3443: LD_INT 160
3445: PUSH
3446: LD_INT 5
3448: PUSH
3449: LD_INT 0
3451: PUSH
3452: LD_INT 0
3454: PUSH
3455: EMPTY
3456: LIST
3457: LIST
3458: LIST
3459: LIST
3460: LIST
3461: LIST
3462: PUSH
3463: LD_INT 33
3465: PUSH
3466: LD_INT 101
3468: PUSH
3469: LD_INT 162
3471: PUSH
3472: LD_INT 5
3474: PUSH
3475: LD_INT 0
3477: PUSH
3478: LD_INT 0
3480: PUSH
3481: EMPTY
3482: LIST
3483: LIST
3484: LIST
3485: LIST
3486: LIST
3487: LIST
3488: PUSH
3489: LD_INT 32
3491: PUSH
3492: LD_INT 87
3494: PUSH
3495: LD_INT 157
3497: PUSH
3498: LD_INT 5
3500: PUSH
3501: LD_INT 0
3503: PUSH
3504: LD_INT 0
3506: PUSH
3507: EMPTY
3508: LIST
3509: LIST
3510: LIST
3511: LIST
3512: LIST
3513: LIST
3514: PUSH
3515: LD_INT 32
3517: PUSH
3518: LD_INT 105
3520: PUSH
3521: LD_INT 158
3523: PUSH
3524: LD_INT 5
3526: PUSH
3527: LD_INT 0
3529: PUSH
3530: LD_INT 0
3532: PUSH
3533: EMPTY
3534: LIST
3535: LIST
3536: LIST
3537: LIST
3538: LIST
3539: LIST
3540: PUSH
3541: LD_INT 33
3543: PUSH
3544: LD_INT 91
3546: PUSH
3547: LD_INT 118
3549: PUSH
3550: LD_INT 4
3552: PUSH
3553: LD_INT 0
3555: PUSH
3556: LD_INT 0
3558: PUSH
3559: EMPTY
3560: LIST
3561: LIST
3562: LIST
3563: LIST
3564: LIST
3565: LIST
3566: PUSH
3567: LD_INT 33
3569: PUSH
3570: LD_INT 89
3572: PUSH
3573: LD_INT 107
3575: PUSH
3576: LD_INT 4
3578: PUSH
3579: LD_INT 0
3581: PUSH
3582: LD_INT 0
3584: PUSH
3585: EMPTY
3586: LIST
3587: LIST
3588: LIST
3589: LIST
3590: LIST
3591: LIST
3592: PUSH
3593: LD_INT 5
3595: PUSH
3596: LD_INT 86
3598: PUSH
3599: LD_INT 96
3601: PUSH
3602: LD_INT 3
3604: PUSH
3605: LD_INT 0
3607: PUSH
3608: LD_INT 0
3610: PUSH
3611: EMPTY
3612: LIST
3613: LIST
3614: LIST
3615: LIST
3616: LIST
3617: LIST
3618: PUSH
3619: LD_INT 33
3621: PUSH
3622: LD_INT 91
3624: PUSH
3625: LD_INT 102
3627: PUSH
3628: LD_INT 4
3630: PUSH
3631: LD_INT 0
3633: PUSH
3634: LD_INT 0
3636: PUSH
3637: EMPTY
3638: LIST
3639: LIST
3640: LIST
3641: LIST
3642: LIST
3643: LIST
3644: PUSH
3645: LD_INT 32
3647: PUSH
3648: LD_INT 80
3650: PUSH
3651: LD_INT 95
3653: PUSH
3654: LD_INT 3
3656: PUSH
3657: LD_INT 0
3659: PUSH
3660: LD_INT 0
3662: PUSH
3663: EMPTY
3664: LIST
3665: LIST
3666: LIST
3667: LIST
3668: LIST
3669: LIST
3670: PUSH
3671: LD_INT 28
3673: PUSH
3674: LD_INT 77
3676: PUSH
3677: LD_INT 105
3679: PUSH
3680: LD_INT 3
3682: PUSH
3683: LD_INT 0
3685: PUSH
3686: LD_INT 0
3688: PUSH
3689: EMPTY
3690: LIST
3691: LIST
3692: LIST
3693: LIST
3694: LIST
3695: LIST
3696: PUSH
3697: LD_INT 28
3699: PUSH
3700: LD_INT 85
3702: PUSH
3703: LD_INT 113
3705: PUSH
3706: LD_INT 3
3708: PUSH
3709: LD_INT 0
3711: PUSH
3712: LD_INT 0
3714: PUSH
3715: EMPTY
3716: LIST
3717: LIST
3718: LIST
3719: LIST
3720: LIST
3721: LIST
3722: PUSH
3723: LD_INT 28
3725: PUSH
3726: LD_INT 55
3728: PUSH
3729: LD_INT 97
3731: PUSH
3732: LD_INT 3
3734: PUSH
3735: LD_INT 0
3737: PUSH
3738: LD_INT 0
3740: PUSH
3741: EMPTY
3742: LIST
3743: LIST
3744: LIST
3745: LIST
3746: LIST
3747: LIST
3748: PUSH
3749: LD_INT 28
3751: PUSH
3752: LD_INT 88
3754: PUSH
3755: LD_INT 128
3757: PUSH
3758: LD_INT 3
3760: PUSH
3761: LD_INT 0
3763: PUSH
3764: LD_INT 0
3766: PUSH
3767: EMPTY
3768: LIST
3769: LIST
3770: LIST
3771: LIST
3772: LIST
3773: LIST
3774: PUSH
3775: LD_INT 32
3777: PUSH
3778: LD_INT 69
3780: PUSH
3781: LD_INT 101
3783: PUSH
3784: LD_INT 2
3786: PUSH
3787: LD_INT 0
3789: PUSH
3790: LD_INT 0
3792: PUSH
3793: EMPTY
3794: LIST
3795: LIST
3796: LIST
3797: LIST
3798: LIST
3799: LIST
3800: PUSH
3801: LD_INT 1
3803: PUSH
3804: LD_INT 34
3806: PUSH
3807: LD_INT 23
3809: PUSH
3810: LD_INT 4
3812: PUSH
3813: LD_INT 0
3815: PUSH
3816: LD_INT 0
3818: PUSH
3819: EMPTY
3820: LIST
3821: LIST
3822: LIST
3823: LIST
3824: LIST
3825: LIST
3826: PUSH
3827: LD_INT 8
3829: PUSH
3830: LD_INT 25
3832: PUSH
3833: LD_INT 4
3835: PUSH
3836: LD_INT 3
3838: PUSH
3839: LD_INT 11
3841: PUSH
3842: LD_INT 10
3844: PUSH
3845: EMPTY
3846: LIST
3847: LIST
3848: LIST
3849: LIST
3850: LIST
3851: LIST
3852: PUSH
3853: LD_INT 8
3855: PUSH
3856: LD_INT 15
3858: PUSH
3859: LD_INT 4
3861: PUSH
3862: LD_INT 2
3864: PUSH
3865: LD_INT 14
3867: PUSH
3868: LD_INT 12
3870: PUSH
3871: EMPTY
3872: LIST
3873: LIST
3874: LIST
3875: LIST
3876: LIST
3877: LIST
3878: PUSH
3879: LD_INT 29
3881: PUSH
3882: LD_INT 55
3884: PUSH
3885: LD_INT 35
3887: PUSH
3888: LD_INT 2
3890: PUSH
3891: LD_INT 0
3893: PUSH
3894: LD_INT 0
3896: PUSH
3897: EMPTY
3898: LIST
3899: LIST
3900: LIST
3901: LIST
3902: LIST
3903: LIST
3904: PUSH
3905: LD_INT 29
3907: PUSH
3908: LD_INT 24
3910: PUSH
3911: LD_INT 44
3913: PUSH
3914: LD_INT 2
3916: PUSH
3917: LD_INT 0
3919: PUSH
3920: LD_INT 0
3922: PUSH
3923: EMPTY
3924: LIST
3925: LIST
3926: LIST
3927: LIST
3928: LIST
3929: LIST
3930: PUSH
3931: LD_INT 34
3933: PUSH
3934: LD_INT 34
3936: PUSH
3937: LD_INT 32
3939: PUSH
3940: LD_INT 4
3942: PUSH
3943: LD_INT 0
3945: PUSH
3946: LD_INT 0
3948: PUSH
3949: EMPTY
3950: LIST
3951: LIST
3952: LIST
3953: LIST
3954: LIST
3955: LIST
3956: PUSH
3957: LD_INT 3
3959: PUSH
3960: LD_INT 14
3962: PUSH
3963: LD_INT 16
3965: PUSH
3966: LD_INT 1
3968: PUSH
3969: LD_INT 0
3971: PUSH
3972: LD_INT 0
3974: PUSH
3975: EMPTY
3976: LIST
3977: LIST
3978: LIST
3979: LIST
3980: LIST
3981: LIST
3982: PUSH
3983: LD_INT 24
3985: PUSH
3986: LD_INT 10
3988: PUSH
3989: LD_INT 16
3991: PUSH
3992: LD_INT 1
3994: PUSH
3995: LD_INT 0
3997: PUSH
3998: LD_INT 0
4000: PUSH
4001: EMPTY
4002: LIST
4003: LIST
4004: LIST
4005: LIST
4006: LIST
4007: LIST
4008: PUSH
4009: LD_INT 21
4011: PUSH
4012: LD_INT 11
4014: PUSH
4015: LD_INT 13
4017: PUSH
4018: LD_INT 2
4020: PUSH
4021: LD_INT 0
4023: PUSH
4024: LD_INT 0
4026: PUSH
4027: EMPTY
4028: LIST
4029: LIST
4030: LIST
4031: LIST
4032: LIST
4033: LIST
4034: PUSH
4035: LD_INT 18
4037: PUSH
4038: LD_INT 14
4040: PUSH
4041: LD_INT 12
4043: PUSH
4044: LD_INT 3
4046: PUSH
4047: LD_INT 0
4049: PUSH
4050: LD_INT 0
4052: PUSH
4053: EMPTY
4054: LIST
4055: LIST
4056: LIST
4057: LIST
4058: LIST
4059: LIST
4060: PUSH
4061: LD_INT 16
4063: PUSH
4064: LD_INT 14
4066: PUSH
4067: LD_INT 19
4069: PUSH
4070: LD_INT 0
4072: PUSH
4073: LD_INT 0
4075: PUSH
4076: LD_INT 0
4078: PUSH
4079: EMPTY
4080: LIST
4081: LIST
4082: LIST
4083: LIST
4084: LIST
4085: LIST
4086: PUSH
4087: LD_INT 17
4089: PUSH
4090: LD_INT 18
4092: PUSH
4093: LD_INT 20
4095: PUSH
4096: LD_INT 5
4098: PUSH
4099: LD_INT 0
4101: PUSH
4102: LD_INT 0
4104: PUSH
4105: EMPTY
4106: LIST
4107: LIST
4108: LIST
4109: LIST
4110: LIST
4111: LIST
4112: PUSH
4113: LD_INT 28
4115: PUSH
4116: LD_INT 10
4118: PUSH
4119: LD_INT 5
4121: PUSH
4122: LD_INT 1
4124: PUSH
4125: LD_INT 0
4127: PUSH
4128: LD_INT 0
4130: PUSH
4131: EMPTY
4132: LIST
4133: LIST
4134: LIST
4135: LIST
4136: LIST
4137: LIST
4138: PUSH
4139: LD_INT 28
4141: PUSH
4142: LD_INT 8
4144: PUSH
4145: LD_INT 8
4147: PUSH
4148: LD_INT 1
4150: PUSH
4151: LD_INT 0
4153: PUSH
4154: LD_INT 0
4156: PUSH
4157: EMPTY
4158: LIST
4159: LIST
4160: LIST
4161: LIST
4162: LIST
4163: LIST
4164: PUSH
4165: LD_INT 26
4167: PUSH
4168: LD_INT 19
4170: PUSH
4171: LD_INT 2
4173: PUSH
4174: LD_INT 1
4176: PUSH
4177: LD_INT 0
4179: PUSH
4180: LD_INT 0
4182: PUSH
4183: EMPTY
4184: LIST
4185: LIST
4186: LIST
4187: LIST
4188: LIST
4189: LIST
4190: PUSH
4191: LD_INT 26
4193: PUSH
4194: LD_INT 30
4196: PUSH
4197: LD_INT 2
4199: PUSH
4200: LD_INT 1
4202: PUSH
4203: LD_INT 0
4205: PUSH
4206: LD_INT 0
4208: PUSH
4209: EMPTY
4210: LIST
4211: LIST
4212: LIST
4213: LIST
4214: LIST
4215: LIST
4216: PUSH
4217: LD_INT 5
4219: PUSH
4220: LD_INT 59
4222: PUSH
4223: LD_INT 20
4225: PUSH
4226: LD_INT 4
4228: PUSH
4229: LD_INT 0
4231: PUSH
4232: LD_INT 0
4234: PUSH
4235: EMPTY
4236: LIST
4237: LIST
4238: LIST
4239: LIST
4240: LIST
4241: LIST
4242: PUSH
4243: LD_INT 32
4245: PUSH
4246: LD_INT 60
4248: PUSH
4249: LD_INT 24
4251: PUSH
4252: LD_INT 4
4254: PUSH
4255: LD_INT 0
4257: PUSH
4258: LD_INT 0
4260: PUSH
4261: EMPTY
4262: LIST
4263: LIST
4264: LIST
4265: LIST
4266: LIST
4267: LIST
4268: PUSH
4269: LD_INT 32
4271: PUSH
4272: LD_INT 61
4274: PUSH
4275: LD_INT 45
4277: PUSH
4278: LD_INT 5
4280: PUSH
4281: LD_INT 0
4283: PUSH
4284: LD_INT 0
4286: PUSH
4287: EMPTY
4288: LIST
4289: LIST
4290: LIST
4291: LIST
4292: LIST
4293: LIST
4294: PUSH
4295: LD_INT 32
4297: PUSH
4298: LD_INT 52
4300: PUSH
4301: LD_INT 51
4303: PUSH
4304: LD_INT 5
4306: PUSH
4307: LD_INT 0
4309: PUSH
4310: LD_INT 0
4312: PUSH
4313: EMPTY
4314: LIST
4315: LIST
4316: LIST
4317: LIST
4318: LIST
4319: LIST
4320: PUSH
4321: LD_INT 33
4323: PUSH
4324: LD_INT 56
4326: PUSH
4327: LD_INT 51
4329: PUSH
4330: LD_INT 5
4332: PUSH
4333: LD_INT 0
4335: PUSH
4336: LD_INT 0
4338: PUSH
4339: EMPTY
4340: LIST
4341: LIST
4342: LIST
4343: LIST
4344: LIST
4345: LIST
4346: PUSH
4347: LD_INT 33
4349: PUSH
4350: LD_INT 62
4352: PUSH
4353: LD_INT 49
4355: PUSH
4356: LD_INT 5
4358: PUSH
4359: LD_INT 0
4361: PUSH
4362: LD_INT 0
4364: PUSH
4365: EMPTY
4366: LIST
4367: LIST
4368: LIST
4369: LIST
4370: LIST
4371: LIST
4372: PUSH
4373: LD_INT 33
4375: PUSH
4376: LD_INT 41
4378: PUSH
4379: LD_INT 47
4381: PUSH
4382: LD_INT 5
4384: PUSH
4385: LD_INT 0
4387: PUSH
4388: LD_INT 0
4390: PUSH
4391: EMPTY
4392: LIST
4393: LIST
4394: LIST
4395: LIST
4396: LIST
4397: LIST
4398: PUSH
4399: LD_INT 33
4401: PUSH
4402: LD_INT 33
4404: PUSH
4405: LD_INT 52
4407: PUSH
4408: LD_INT 5
4410: PUSH
4411: LD_INT 0
4413: PUSH
4414: LD_INT 0
4416: PUSH
4417: EMPTY
4418: LIST
4419: LIST
4420: LIST
4421: LIST
4422: LIST
4423: LIST
4424: PUSH
4425: LD_INT 5
4427: PUSH
4428: LD_INT 31
4430: PUSH
4431: LD_INT 40
4433: PUSH
4434: LD_INT 0
4436: PUSH
4437: LD_INT 0
4439: PUSH
4440: LD_INT 0
4442: PUSH
4443: EMPTY
4444: LIST
4445: LIST
4446: LIST
4447: LIST
4448: LIST
4449: LIST
4450: PUSH
4451: LD_INT 33
4453: PUSH
4454: LD_INT 65
4456: PUSH
4457: LD_INT 37
4459: PUSH
4460: LD_INT 5
4462: PUSH
4463: LD_INT 0
4465: PUSH
4466: LD_INT 0
4468: PUSH
4469: EMPTY
4470: LIST
4471: LIST
4472: LIST
4473: LIST
4474: LIST
4475: LIST
4476: PUSH
4477: LD_INT 33
4479: PUSH
4480: LD_INT 63
4482: PUSH
4483: LD_INT 29
4485: PUSH
4486: LD_INT 4
4488: PUSH
4489: LD_INT 0
4491: PUSH
4492: LD_INT 0
4494: PUSH
4495: EMPTY
4496: LIST
4497: LIST
4498: LIST
4499: LIST
4500: LIST
4501: LIST
4502: PUSH
4503: LD_INT 33
4505: PUSH
4506: LD_INT 54
4508: PUSH
4509: LD_INT 11
4511: PUSH
4512: LD_INT 4
4514: PUSH
4515: LD_INT 0
4517: PUSH
4518: LD_INT 0
4520: PUSH
4521: EMPTY
4522: LIST
4523: LIST
4524: LIST
4525: LIST
4526: LIST
4527: LIST
4528: PUSH
4529: LD_INT 33
4531: PUSH
4532: LD_INT 56
4534: PUSH
4535: LD_INT 15
4537: PUSH
4538: LD_INT 4
4540: PUSH
4541: LD_INT 0
4543: PUSH
4544: LD_INT 0
4546: PUSH
4547: EMPTY
4548: LIST
4549: LIST
4550: LIST
4551: LIST
4552: LIST
4553: LIST
4554: PUSH
4555: LD_INT 33
4557: PUSH
4558: LD_INT 51
4560: PUSH
4561: LD_INT 6
4563: PUSH
4564: LD_INT 4
4566: PUSH
4567: LD_INT 0
4569: PUSH
4570: LD_INT 0
4572: PUSH
4573: EMPTY
4574: LIST
4575: LIST
4576: LIST
4577: LIST
4578: LIST
4579: LIST
4580: PUSH
4581: LD_INT 26
4583: PUSH
4584: LD_INT 39
4586: PUSH
4587: LD_INT 25
4589: PUSH
4590: LD_INT 0
4592: PUSH
4593: LD_INT 0
4595: PUSH
4596: LD_INT 0
4598: PUSH
4599: EMPTY
4600: LIST
4601: LIST
4602: LIST
4603: LIST
4604: LIST
4605: LIST
4606: PUSH
4607: LD_INT 26
4609: PUSH
4610: LD_INT 37
4612: PUSH
4613: LD_INT 21
4615: PUSH
4616: LD_INT 0
4618: PUSH
4619: LD_INT 0
4621: PUSH
4622: LD_INT 0
4624: PUSH
4625: EMPTY
4626: LIST
4627: LIST
4628: LIST
4629: LIST
4630: LIST
4631: LIST
4632: PUSH
4633: LD_INT 32
4635: PUSH
4636: LD_INT 35
4638: PUSH
4639: LD_INT 17
4641: PUSH
4642: LD_INT 4
4644: PUSH
4645: LD_INT 0
4647: PUSH
4648: LD_INT 0
4650: PUSH
4651: EMPTY
4652: LIST
4653: LIST
4654: LIST
4655: LIST
4656: LIST
4657: LIST
4658: PUSH
4659: LD_INT 33
4661: PUSH
4662: LD_INT 35
4664: PUSH
4665: LD_INT 28
4667: PUSH
4668: LD_INT 4
4670: PUSH
4671: LD_INT 0
4673: PUSH
4674: LD_INT 0
4676: PUSH
4677: EMPTY
4678: LIST
4679: LIST
4680: LIST
4681: LIST
4682: LIST
4683: LIST
4684: PUSH
4685: LD_INT 33
4687: PUSH
4688: LD_INT 28
4690: PUSH
4691: LD_INT 46
4693: PUSH
4694: LD_INT 5
4696: PUSH
4697: LD_INT 0
4699: PUSH
4700: LD_INT 0
4702: PUSH
4703: EMPTY
4704: LIST
4705: LIST
4706: LIST
4707: LIST
4708: LIST
4709: LIST
4710: PUSH
4711: LD_INT 33
4713: PUSH
4714: LD_INT 31
4716: PUSH
4717: LD_INT 6
4719: PUSH
4720: LD_INT 4
4722: PUSH
4723: LD_INT 0
4725: PUSH
4726: LD_INT 0
4728: PUSH
4729: EMPTY
4730: LIST
4731: LIST
4732: LIST
4733: LIST
4734: LIST
4735: LIST
4736: PUSH
4737: LD_INT 26
4739: PUSH
4740: LD_INT 54
4742: PUSH
4743: LD_INT 38
4745: PUSH
4746: LD_INT 4
4748: PUSH
4749: LD_INT 0
4751: PUSH
4752: LD_INT 0
4754: PUSH
4755: EMPTY
4756: LIST
4757: LIST
4758: LIST
4759: LIST
4760: LIST
4761: LIST
4762: PUSH
4763: LD_INT 33
4765: PUSH
4766: LD_INT 207
4768: PUSH
4769: LD_INT 167
4771: PUSH
4772: LD_INT 3
4774: PUSH
4775: LD_INT 0
4777: PUSH
4778: LD_INT 0
4780: PUSH
4781: EMPTY
4782: LIST
4783: LIST
4784: LIST
4785: LIST
4786: LIST
4787: LIST
4788: PUSH
4789: LD_INT 30
4791: PUSH
4792: LD_INT 43
4794: PUSH
4795: LD_INT 2
4797: PUSH
4798: LD_INT 4
4800: PUSH
4801: LD_INT 0
4803: PUSH
4804: LD_INT 0
4806: PUSH
4807: EMPTY
4808: LIST
4809: LIST
4810: LIST
4811: LIST
4812: LIST
4813: LIST
4814: PUSH
4815: EMPTY
4816: LIST
4817: LIST
4818: LIST
4819: LIST
4820: LIST
4821: LIST
4822: LIST
4823: LIST
4824: LIST
4825: LIST
4826: LIST
4827: LIST
4828: LIST
4829: LIST
4830: LIST
4831: LIST
4832: LIST
4833: LIST
4834: LIST
4835: LIST
4836: LIST
4837: LIST
4838: LIST
4839: LIST
4840: LIST
4841: LIST
4842: LIST
4843: LIST
4844: LIST
4845: LIST
4846: LIST
4847: LIST
4848: LIST
4849: LIST
4850: LIST
4851: LIST
4852: LIST
4853: LIST
4854: LIST
4855: LIST
4856: LIST
4857: LIST
4858: LIST
4859: LIST
4860: LIST
4861: LIST
4862: LIST
4863: LIST
4864: LIST
4865: LIST
4866: LIST
4867: LIST
4868: LIST
4869: LIST
4870: LIST
4871: LIST
4872: LIST
4873: LIST
4874: LIST
4875: LIST
4876: LIST
4877: LIST
4878: LIST
4879: LIST
4880: LIST
4881: LIST
4882: LIST
4883: LIST
4884: LIST
4885: LIST
4886: LIST
4887: LIST
4888: LIST
4889: LIST
4890: LIST
4891: LIST
4892: LIST
4893: LIST
4894: LIST
4895: LIST
4896: LIST
4897: LIST
4898: LIST
4899: LIST
4900: LIST
4901: ST_TO_ADDR
// for i in tmp do
4902: LD_ADDR_VAR 0 2
4906: PUSH
4907: LD_VAR 0 4
4911: PUSH
4912: FOR_IN
4913: IFFALSE 5144
// begin uc_side := side ;
4915: LD_ADDR_OWVAR 20
4919: PUSH
4920: LD_VAR 0 5
4924: ST_TO_ADDR
// uc_nation := nation_russian ;
4925: LD_ADDR_OWVAR 21
4929: PUSH
4930: LD_INT 3
4932: ST_TO_ADDR
// bc_type := i [ 1 ] ;
4933: LD_ADDR_OWVAR 42
4937: PUSH
4938: LD_VAR 0 2
4942: PUSH
4943: LD_INT 1
4945: ARRAY
4946: ST_TO_ADDR
// bc_level := rand ( 5 , 6 ) ;
4947: LD_ADDR_OWVAR 43
4951: PUSH
4952: LD_INT 5
4954: PPUSH
4955: LD_INT 6
4957: PPUSH
4958: CALL_OW 12
4962: ST_TO_ADDR
// bc_kind1 := i [ 5 ] ;
4963: LD_ADDR_OWVAR 44
4967: PUSH
4968: LD_VAR 0 2
4972: PUSH
4973: LD_INT 5
4975: ARRAY
4976: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
4977: LD_ADDR_OWVAR 45
4981: PUSH
4982: LD_VAR 0 2
4986: PUSH
4987: LD_INT 6
4989: ARRAY
4990: ST_TO_ADDR
// sr := 0 ;
4991: LD_ADDR_VAR 0 6
4995: PUSH
4996: LD_INT 0
4998: ST_TO_ADDR
// if i [ 1 ] = b_oil_mine then
4999: LD_VAR 0 2
5003: PUSH
5004: LD_INT 1
5006: ARRAY
5007: PUSH
5008: LD_INT 29
5010: EQUAL
5011: IFFALSE 5023
// sr := mat_oil else
5013: LD_ADDR_VAR 0 6
5017: PUSH
5018: LD_INT 2
5020: ST_TO_ADDR
5021: GO 5045
// if i [ 1 ] = b_siberite_mine then
5023: LD_VAR 0 2
5027: PUSH
5028: LD_INT 1
5030: ARRAY
5031: PUSH
5032: LD_INT 30
5034: EQUAL
5035: IFFALSE 5045
// sr := mat_siberit ;
5037: LD_ADDR_VAR 0 6
5041: PUSH
5042: LD_INT 3
5044: ST_TO_ADDR
// if sr then
5045: LD_VAR 0 6
5049: IFFALSE 5105
// begin CreateDepositXY ( i [ 2 ] , i [ 3 ] , sr ) ;
5051: LD_VAR 0 2
5055: PUSH
5056: LD_INT 2
5058: ARRAY
5059: PPUSH
5060: LD_VAR 0 2
5064: PUSH
5065: LD_INT 3
5067: ARRAY
5068: PPUSH
5069: LD_VAR 0 6
5073: PPUSH
5074: CALL_OW 62
// SetResourceVisibility ( i [ 2 ] , i [ 3 ] , side ) ;
5078: LD_VAR 0 2
5082: PUSH
5083: LD_INT 2
5085: ARRAY
5086: PPUSH
5087: LD_VAR 0 2
5091: PUSH
5092: LD_INT 3
5094: ARRAY
5095: PPUSH
5096: LD_VAR 0 5
5100: PPUSH
5101: CALL_OW 441
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
5105: LD_ADDR_VAR 0 3
5109: PUSH
5110: LD_VAR 0 2
5114: PUSH
5115: LD_INT 2
5117: ARRAY
5118: PPUSH
5119: LD_VAR 0 2
5123: PUSH
5124: LD_INT 3
5126: ARRAY
5127: PPUSH
5128: LD_VAR 0 2
5132: PUSH
5133: LD_INT 4
5135: ARRAY
5136: PPUSH
5137: CALL_OW 47
5141: ST_TO_ADDR
// end ;
5142: GO 4912
5144: POP
5145: POP
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
5146: LD_ADDR_VAR 0 7
5150: PUSH
5151: LD_INT 22
5153: PUSH
5154: LD_VAR 0 5
5158: PUSH
5159: EMPTY
5160: LIST
5161: LIST
5162: PUSH
5163: LD_INT 30
5165: PUSH
5166: LD_INT 1
5168: PUSH
5169: EMPTY
5170: LIST
5171: LIST
5172: PUSH
5173: EMPTY
5174: LIST
5175: LIST
5176: PPUSH
5177: CALL_OW 69
5181: ST_TO_ADDR
// if not depot then
5182: LD_VAR 0 7
5186: NOT
5187: IFFALSE 5191
// exit ;
5189: GO 5535
// base := PrepareBase ( HexInfo ( 84 , 128 ) , rus1Base , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 3000 , 300 , 100 ] , [ 12 , 6 , 6 , 4 ] ) ;
5191: LD_ADDR_VAR 0 8
5195: PUSH
5196: LD_INT 84
5198: PPUSH
5199: LD_INT 128
5201: PPUSH
5202: CALL_OW 428
5206: PPUSH
5207: LD_INT 15
5209: PPUSH
5210: LD_INT 0
5212: PPUSH
5213: LD_INT 6
5215: PUSH
5216: LD_INT 7
5218: PUSH
5219: LD_INT 8
5221: PUSH
5222: EMPTY
5223: LIST
5224: LIST
5225: LIST
5226: PUSH
5227: LD_OWVAR 67
5231: ARRAY
5232: PPUSH
5233: LD_INT 3000
5235: PUSH
5236: LD_INT 300
5238: PUSH
5239: LD_INT 100
5241: PUSH
5242: EMPTY
5243: LIST
5244: LIST
5245: LIST
5246: PPUSH
5247: LD_INT 12
5249: PUSH
5250: LD_INT 6
5252: PUSH
5253: LD_INT 6
5255: PUSH
5256: LD_INT 4
5258: PUSH
5259: EMPTY
5260: LIST
5261: LIST
5262: LIST
5263: LIST
5264: PPUSH
5265: CALL 28182 0 6
5269: ST_TO_ADDR
// if not base then
5270: LD_VAR 0 8
5274: NOT
5275: IFFALSE 5279
// exit ;
5277: GO 5535
// mc_bases := Replace ( mc_bases , mc_rus_1 , base ) ;
5279: LD_ADDR_EXP 50
5283: PUSH
5284: LD_EXP 50
5288: PPUSH
5289: LD_EXP 7
5293: PPUSH
5294: LD_VAR 0 8
5298: PPUSH
5299: CALL_OW 1
5303: ST_TO_ADDR
// base := PrepareBase ( HexInfo ( 34 , 23 ) , rus2Base , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 20000 , 3000 , 1000 ] , [ 12 , 6 , 6 , 4 ] ) ;
5304: LD_ADDR_VAR 0 8
5308: PUSH
5309: LD_INT 34
5311: PPUSH
5312: LD_INT 23
5314: PPUSH
5315: CALL_OW 428
5319: PPUSH
5320: LD_INT 11
5322: PPUSH
5323: LD_INT 0
5325: PPUSH
5326: LD_INT 6
5328: PUSH
5329: LD_INT 7
5331: PUSH
5332: LD_INT 8
5334: PUSH
5335: EMPTY
5336: LIST
5337: LIST
5338: LIST
5339: PUSH
5340: LD_OWVAR 67
5344: ARRAY
5345: PPUSH
5346: LD_INT 20000
5348: PUSH
5349: LD_INT 3000
5351: PUSH
5352: LD_INT 1000
5354: PUSH
5355: EMPTY
5356: LIST
5357: LIST
5358: LIST
5359: PPUSH
5360: LD_INT 12
5362: PUSH
5363: LD_INT 6
5365: PUSH
5366: LD_INT 6
5368: PUSH
5369: LD_INT 4
5371: PUSH
5372: EMPTY
5373: LIST
5374: LIST
5375: LIST
5376: LIST
5377: PPUSH
5378: CALL 28182 0 6
5382: ST_TO_ADDR
// if not base then
5383: LD_VAR 0 8
5387: NOT
5388: IFFALSE 5392
// exit ;
5390: GO 5535
// mc_bases := Replace ( mc_bases , mc_rus_2 , base ) ;
5392: LD_ADDR_EXP 50
5396: PUSH
5397: LD_EXP 50
5401: PPUSH
5402: LD_EXP 8
5406: PPUSH
5407: LD_VAR 0 8
5411: PPUSH
5412: CALL_OW 1
5416: ST_TO_ADDR
// ruOutpost := PrepareBase ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_depot ] ] ) [ 1 ] , ruOutpostArea , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 500 , 100 , 10 ] , [ [ 6 , 7 , 8 ] [ Difficulty ] , 2 , 0 , 1 ] ) ;
5417: LD_ADDR_EXP 14
5421: PUSH
5422: LD_INT 22
5424: PUSH
5425: LD_INT 3
5427: PUSH
5428: EMPTY
5429: LIST
5430: LIST
5431: PUSH
5432: LD_INT 30
5434: PUSH
5435: LD_INT 0
5437: PUSH
5438: EMPTY
5439: LIST
5440: LIST
5441: PUSH
5442: EMPTY
5443: LIST
5444: LIST
5445: PPUSH
5446: CALL_OW 69
5450: PUSH
5451: LD_INT 1
5453: ARRAY
5454: PPUSH
5455: LD_INT 25
5457: PPUSH
5458: LD_INT 0
5460: PPUSH
5461: LD_INT 6
5463: PUSH
5464: LD_INT 7
5466: PUSH
5467: LD_INT 8
5469: PUSH
5470: EMPTY
5471: LIST
5472: LIST
5473: LIST
5474: PUSH
5475: LD_OWVAR 67
5479: ARRAY
5480: PPUSH
5481: LD_INT 500
5483: PUSH
5484: LD_INT 100
5486: PUSH
5487: LD_INT 10
5489: PUSH
5490: EMPTY
5491: LIST
5492: LIST
5493: LIST
5494: PPUSH
5495: LD_INT 6
5497: PUSH
5498: LD_INT 7
5500: PUSH
5501: LD_INT 8
5503: PUSH
5504: EMPTY
5505: LIST
5506: LIST
5507: LIST
5508: PUSH
5509: LD_OWVAR 67
5513: ARRAY
5514: PUSH
5515: LD_INT 2
5517: PUSH
5518: LD_INT 0
5520: PUSH
5521: LD_INT 1
5523: PUSH
5524: EMPTY
5525: LIST
5526: LIST
5527: LIST
5528: LIST
5529: PPUSH
5530: CALL 28182 0 6
5534: ST_TO_ADDR
// end ;
5535: LD_VAR 0 1
5539: RET
// export function PrepareLegion ; var i , b , veh , tmp , tmp2 , cameras , side , sr , depot , base ; begin
5540: LD_INT 0
5542: PPUSH
5543: PPUSH
5544: PPUSH
5545: PPUSH
5546: PPUSH
5547: PPUSH
5548: PPUSH
5549: PPUSH
5550: PPUSH
5551: PPUSH
5552: PPUSH
// PrepareNature ( 0 , 0 , 6 , 0 , 0 , 0 , 0 , legApe , 0 ) ;
5553: LD_INT 0
5555: PPUSH
5556: LD_INT 0
5558: PPUSH
5559: LD_INT 6
5561: PPUSH
5562: LD_INT 0
5564: PPUSH
5565: LD_INT 0
5567: PPUSH
5568: LD_INT 0
5570: PPUSH
5571: LD_INT 0
5573: PPUSH
5574: LD_INT 8
5576: PPUSH
5577: LD_INT 0
5579: PPUSH
5580: CALL 53235 0 9
// side := 8 ;
5584: LD_ADDR_VAR 0 8
5588: PUSH
5589: LD_INT 8
5591: ST_TO_ADDR
// tmp := AreaToList ( minesArea , 0 ) ;
5592: LD_ADDR_VAR 0 5
5596: PUSH
5597: LD_INT 20
5599: PPUSH
5600: LD_INT 0
5602: PPUSH
5603: CALL_OW 517
5607: ST_TO_ADDR
// if Difficulty > 2 then
5608: LD_OWVAR 67
5612: PUSH
5613: LD_INT 2
5615: GREATER
5616: IFFALSE 5760
// begin tmp2 := AreaToList ( minesArea2 , 0 ) ;
5618: LD_ADDR_VAR 0 6
5622: PUSH
5623: LD_INT 27
5625: PPUSH
5626: LD_INT 0
5628: PPUSH
5629: CALL_OW 517
5633: ST_TO_ADDR
// for i = 1 to tmp2 [ 1 ] do
5634: LD_ADDR_VAR 0 2
5638: PUSH
5639: DOUBLE
5640: LD_INT 1
5642: DEC
5643: ST_TO_ADDR
5644: LD_VAR 0 6
5648: PUSH
5649: LD_INT 1
5651: ARRAY
5652: PUSH
5653: FOR_TO
5654: IFFALSE 5758
// begin tmp := ReplaceIn ( tmp , [ 1 , tmp [ 1 ] + 1 ] , tmp2 [ 1 ] [ i ] ) ;
5656: LD_ADDR_VAR 0 5
5660: PUSH
5661: LD_VAR 0 5
5665: PPUSH
5666: LD_INT 1
5668: PUSH
5669: LD_VAR 0 5
5673: PUSH
5674: LD_INT 1
5676: ARRAY
5677: PUSH
5678: LD_INT 1
5680: PLUS
5681: PUSH
5682: EMPTY
5683: LIST
5684: LIST
5685: PPUSH
5686: LD_VAR 0 6
5690: PUSH
5691: LD_INT 1
5693: ARRAY
5694: PUSH
5695: LD_VAR 0 2
5699: ARRAY
5700: PPUSH
5701: CALL 24858 0 3
5705: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 2 , tmp [ 2 ] + 1 ] , tmp2 [ 2 ] [ i ] ) ;
5706: LD_ADDR_VAR 0 5
5710: PUSH
5711: LD_VAR 0 5
5715: PPUSH
5716: LD_INT 2
5718: PUSH
5719: LD_VAR 0 5
5723: PUSH
5724: LD_INT 2
5726: ARRAY
5727: PUSH
5728: LD_INT 1
5730: PLUS
5731: PUSH
5732: EMPTY
5733: LIST
5734: LIST
5735: PPUSH
5736: LD_VAR 0 6
5740: PUSH
5741: LD_INT 2
5743: ARRAY
5744: PUSH
5745: LD_VAR 0 2
5749: ARRAY
5750: PPUSH
5751: CALL 24858 0 3
5755: ST_TO_ADDR
// end ;
5756: GO 5653
5758: POP
5759: POP
// end ; if tmp then
5760: LD_VAR 0 5
5764: IFFALSE 5892
// begin for i = 1 to tmp [ 1 ] do
5766: LD_ADDR_VAR 0 2
5770: PUSH
5771: DOUBLE
5772: LD_INT 1
5774: DEC
5775: ST_TO_ADDR
5776: LD_VAR 0 5
5780: PUSH
5781: LD_INT 1
5783: ARRAY
5784: PUSH
5785: FOR_TO
5786: IFFALSE 5890
// begin PlaceMine ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side , 0 ) ;
5788: LD_VAR 0 5
5792: PUSH
5793: LD_INT 1
5795: ARRAY
5796: PUSH
5797: LD_VAR 0 2
5801: ARRAY
5802: PPUSH
5803: LD_VAR 0 5
5807: PUSH
5808: LD_INT 2
5810: ARRAY
5811: PUSH
5812: LD_VAR 0 2
5816: ARRAY
5817: PPUSH
5818: LD_VAR 0 8
5822: PPUSH
5823: LD_INT 0
5825: PPUSH
5826: CALL_OW 454
// staticMines := Insert ( staticMines , staticMines + 1 , [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ) ;
5830: LD_ADDR_EXP 16
5834: PUSH
5835: LD_EXP 16
5839: PPUSH
5840: LD_EXP 16
5844: PUSH
5845: LD_INT 1
5847: PLUS
5848: PPUSH
5849: LD_VAR 0 5
5853: PUSH
5854: LD_INT 1
5856: ARRAY
5857: PUSH
5858: LD_VAR 0 2
5862: ARRAY
5863: PUSH
5864: LD_VAR 0 5
5868: PUSH
5869: LD_INT 2
5871: ARRAY
5872: PUSH
5873: LD_VAR 0 2
5877: ARRAY
5878: PUSH
5879: EMPTY
5880: LIST
5881: LIST
5882: PPUSH
5883: CALL_OW 2
5887: ST_TO_ADDR
// end ;
5888: GO 5785
5890: POP
5891: POP
// end ; cameras := [ [ 165 , 156 ] , [ 143 , 145 ] , [ 152 , 165 ] , [ 123 , 153 ] , [ 161 , 215 ] , [ 172 , 100 ] , [ 148 , 83 ] , [ 122 , 68 ] , [ 105 , 74 ] , [ 113 , 97 ] ] ;
5892: LD_ADDR_VAR 0 7
5896: PUSH
5897: LD_INT 165
5899: PUSH
5900: LD_INT 156
5902: PUSH
5903: EMPTY
5904: LIST
5905: LIST
5906: PUSH
5907: LD_INT 143
5909: PUSH
5910: LD_INT 145
5912: PUSH
5913: EMPTY
5914: LIST
5915: LIST
5916: PUSH
5917: LD_INT 152
5919: PUSH
5920: LD_INT 165
5922: PUSH
5923: EMPTY
5924: LIST
5925: LIST
5926: PUSH
5927: LD_INT 123
5929: PUSH
5930: LD_INT 153
5932: PUSH
5933: EMPTY
5934: LIST
5935: LIST
5936: PUSH
5937: LD_INT 161
5939: PUSH
5940: LD_INT 215
5942: PUSH
5943: EMPTY
5944: LIST
5945: LIST
5946: PUSH
5947: LD_INT 172
5949: PUSH
5950: LD_INT 100
5952: PUSH
5953: EMPTY
5954: LIST
5955: LIST
5956: PUSH
5957: LD_INT 148
5959: PUSH
5960: LD_INT 83
5962: PUSH
5963: EMPTY
5964: LIST
5965: LIST
5966: PUSH
5967: LD_INT 122
5969: PUSH
5970: LD_INT 68
5972: PUSH
5973: EMPTY
5974: LIST
5975: LIST
5976: PUSH
5977: LD_INT 105
5979: PUSH
5980: LD_INT 74
5982: PUSH
5983: EMPTY
5984: LIST
5985: LIST
5986: PUSH
5987: LD_INT 113
5989: PUSH
5990: LD_INT 97
5992: PUSH
5993: EMPTY
5994: LIST
5995: LIST
5996: PUSH
5997: EMPTY
5998: LIST
5999: LIST
6000: LIST
6001: LIST
6002: LIST
6003: LIST
6004: LIST
6005: LIST
6006: LIST
6007: LIST
6008: ST_TO_ADDR
// for i in cameras do
6009: LD_ADDR_VAR 0 2
6013: PUSH
6014: LD_VAR 0 7
6018: PUSH
6019: FOR_IN
6020: IFFALSE 6051
// HiddenCamera ( i [ 1 ] , i [ 2 ] , side ) ;
6022: LD_VAR 0 2
6026: PUSH
6027: LD_INT 1
6029: ARRAY
6030: PPUSH
6031: LD_VAR 0 2
6035: PUSH
6036: LD_INT 2
6038: ARRAY
6039: PPUSH
6040: LD_VAR 0 8
6044: PPUSH
6045: CALL_OW 244
6049: GO 6019
6051: POP
6052: POP
// tmp := [ [ 1 , 144 , 110 , 1 , 0 , 0 ] , [ 3 , 151 , 118 , 0 , 0 , 0 ] , [ 8 , 158 , 110 , 4 , 10 , 15 ] , [ 23 , 154 , 121 , 5 , 0 , 0 ] , [ 22 , 155 , 118 , 4 , 0 , 0 ] , [ 21 , 151 , 122 , 0 , 0 , 0 ] , [ 18 , 148 , 118 , 1 , 0 , 0 ] , [ 17 , 147 , 114 , 2 , 0 , 0 ] , [ 29 , 163 , 120 , 5 , 0 , 0 ] , [ 27 , 137 , 116 , 3 , 0 , 0 ] , [ 27 , 133 , 111 , 1 , 0 , 0 ] , [ 27 , 132 , 106 , 4 , 0 , 0 ] , [ 26 , 137 , 111 , 0 , 0 , 0 ] , [ 8 , 141 , 117 , 1 , 13 , 11 ] , [ 30 , 140 , 128 , 1 , 0 , 0 ] , [ 5 , 146 , 96 , 3 , 0 , 0 ] , [ 32 , 150 , 98 , 3 , 0 , 0 ] , [ 32 , 142 , 95 , 3 , 0 , 0 ] , [ 32 , 159 , 104 , 3 , 0 , 0 ] , [ 32 , 133 , 95 , 3 , 0 , 0 ] , [ 32 , 131 , 102 , 2 , 0 , 0 ] , [ 32 , 164 , 144 , 0 , 0 , 0 ] , [ 32 , 146 , 139 , 0 , 0 , 0 ] , [ 26 , 143 , 122 , 4 , 0 , 0 ] , [ 26 , 164 , 116 , 2 , 0 , 0 ] , ] ;
6053: LD_ADDR_VAR 0 5
6057: PUSH
6058: LD_INT 1
6060: PUSH
6061: LD_INT 144
6063: PUSH
6064: LD_INT 110
6066: PUSH
6067: LD_INT 1
6069: PUSH
6070: LD_INT 0
6072: PUSH
6073: LD_INT 0
6075: PUSH
6076: EMPTY
6077: LIST
6078: LIST
6079: LIST
6080: LIST
6081: LIST
6082: LIST
6083: PUSH
6084: LD_INT 3
6086: PUSH
6087: LD_INT 151
6089: PUSH
6090: LD_INT 118
6092: PUSH
6093: LD_INT 0
6095: PUSH
6096: LD_INT 0
6098: PUSH
6099: LD_INT 0
6101: PUSH
6102: EMPTY
6103: LIST
6104: LIST
6105: LIST
6106: LIST
6107: LIST
6108: LIST
6109: PUSH
6110: LD_INT 8
6112: PUSH
6113: LD_INT 158
6115: PUSH
6116: LD_INT 110
6118: PUSH
6119: LD_INT 4
6121: PUSH
6122: LD_INT 10
6124: PUSH
6125: LD_INT 15
6127: PUSH
6128: EMPTY
6129: LIST
6130: LIST
6131: LIST
6132: LIST
6133: LIST
6134: LIST
6135: PUSH
6136: LD_INT 23
6138: PUSH
6139: LD_INT 154
6141: PUSH
6142: LD_INT 121
6144: PUSH
6145: LD_INT 5
6147: PUSH
6148: LD_INT 0
6150: PUSH
6151: LD_INT 0
6153: PUSH
6154: EMPTY
6155: LIST
6156: LIST
6157: LIST
6158: LIST
6159: LIST
6160: LIST
6161: PUSH
6162: LD_INT 22
6164: PUSH
6165: LD_INT 155
6167: PUSH
6168: LD_INT 118
6170: PUSH
6171: LD_INT 4
6173: PUSH
6174: LD_INT 0
6176: PUSH
6177: LD_INT 0
6179: PUSH
6180: EMPTY
6181: LIST
6182: LIST
6183: LIST
6184: LIST
6185: LIST
6186: LIST
6187: PUSH
6188: LD_INT 21
6190: PUSH
6191: LD_INT 151
6193: PUSH
6194: LD_INT 122
6196: PUSH
6197: LD_INT 0
6199: PUSH
6200: LD_INT 0
6202: PUSH
6203: LD_INT 0
6205: PUSH
6206: EMPTY
6207: LIST
6208: LIST
6209: LIST
6210: LIST
6211: LIST
6212: LIST
6213: PUSH
6214: LD_INT 18
6216: PUSH
6217: LD_INT 148
6219: PUSH
6220: LD_INT 118
6222: PUSH
6223: LD_INT 1
6225: PUSH
6226: LD_INT 0
6228: PUSH
6229: LD_INT 0
6231: PUSH
6232: EMPTY
6233: LIST
6234: LIST
6235: LIST
6236: LIST
6237: LIST
6238: LIST
6239: PUSH
6240: LD_INT 17
6242: PUSH
6243: LD_INT 147
6245: PUSH
6246: LD_INT 114
6248: PUSH
6249: LD_INT 2
6251: PUSH
6252: LD_INT 0
6254: PUSH
6255: LD_INT 0
6257: PUSH
6258: EMPTY
6259: LIST
6260: LIST
6261: LIST
6262: LIST
6263: LIST
6264: LIST
6265: PUSH
6266: LD_INT 29
6268: PUSH
6269: LD_INT 163
6271: PUSH
6272: LD_INT 120
6274: PUSH
6275: LD_INT 5
6277: PUSH
6278: LD_INT 0
6280: PUSH
6281: LD_INT 0
6283: PUSH
6284: EMPTY
6285: LIST
6286: LIST
6287: LIST
6288: LIST
6289: LIST
6290: LIST
6291: PUSH
6292: LD_INT 27
6294: PUSH
6295: LD_INT 137
6297: PUSH
6298: LD_INT 116
6300: PUSH
6301: LD_INT 3
6303: PUSH
6304: LD_INT 0
6306: PUSH
6307: LD_INT 0
6309: PUSH
6310: EMPTY
6311: LIST
6312: LIST
6313: LIST
6314: LIST
6315: LIST
6316: LIST
6317: PUSH
6318: LD_INT 27
6320: PUSH
6321: LD_INT 133
6323: PUSH
6324: LD_INT 111
6326: PUSH
6327: LD_INT 1
6329: PUSH
6330: LD_INT 0
6332: PUSH
6333: LD_INT 0
6335: PUSH
6336: EMPTY
6337: LIST
6338: LIST
6339: LIST
6340: LIST
6341: LIST
6342: LIST
6343: PUSH
6344: LD_INT 27
6346: PUSH
6347: LD_INT 132
6349: PUSH
6350: LD_INT 106
6352: PUSH
6353: LD_INT 4
6355: PUSH
6356: LD_INT 0
6358: PUSH
6359: LD_INT 0
6361: PUSH
6362: EMPTY
6363: LIST
6364: LIST
6365: LIST
6366: LIST
6367: LIST
6368: LIST
6369: PUSH
6370: LD_INT 26
6372: PUSH
6373: LD_INT 137
6375: PUSH
6376: LD_INT 111
6378: PUSH
6379: LD_INT 0
6381: PUSH
6382: LD_INT 0
6384: PUSH
6385: LD_INT 0
6387: PUSH
6388: EMPTY
6389: LIST
6390: LIST
6391: LIST
6392: LIST
6393: LIST
6394: LIST
6395: PUSH
6396: LD_INT 8
6398: PUSH
6399: LD_INT 141
6401: PUSH
6402: LD_INT 117
6404: PUSH
6405: LD_INT 1
6407: PUSH
6408: LD_INT 13
6410: PUSH
6411: LD_INT 11
6413: PUSH
6414: EMPTY
6415: LIST
6416: LIST
6417: LIST
6418: LIST
6419: LIST
6420: LIST
6421: PUSH
6422: LD_INT 30
6424: PUSH
6425: LD_INT 140
6427: PUSH
6428: LD_INT 128
6430: PUSH
6431: LD_INT 1
6433: PUSH
6434: LD_INT 0
6436: PUSH
6437: LD_INT 0
6439: PUSH
6440: EMPTY
6441: LIST
6442: LIST
6443: LIST
6444: LIST
6445: LIST
6446: LIST
6447: PUSH
6448: LD_INT 5
6450: PUSH
6451: LD_INT 146
6453: PUSH
6454: LD_INT 96
6456: PUSH
6457: LD_INT 3
6459: PUSH
6460: LD_INT 0
6462: PUSH
6463: LD_INT 0
6465: PUSH
6466: EMPTY
6467: LIST
6468: LIST
6469: LIST
6470: LIST
6471: LIST
6472: LIST
6473: PUSH
6474: LD_INT 32
6476: PUSH
6477: LD_INT 150
6479: PUSH
6480: LD_INT 98
6482: PUSH
6483: LD_INT 3
6485: PUSH
6486: LD_INT 0
6488: PUSH
6489: LD_INT 0
6491: PUSH
6492: EMPTY
6493: LIST
6494: LIST
6495: LIST
6496: LIST
6497: LIST
6498: LIST
6499: PUSH
6500: LD_INT 32
6502: PUSH
6503: LD_INT 142
6505: PUSH
6506: LD_INT 95
6508: PUSH
6509: LD_INT 3
6511: PUSH
6512: LD_INT 0
6514: PUSH
6515: LD_INT 0
6517: PUSH
6518: EMPTY
6519: LIST
6520: LIST
6521: LIST
6522: LIST
6523: LIST
6524: LIST
6525: PUSH
6526: LD_INT 32
6528: PUSH
6529: LD_INT 159
6531: PUSH
6532: LD_INT 104
6534: PUSH
6535: LD_INT 3
6537: PUSH
6538: LD_INT 0
6540: PUSH
6541: LD_INT 0
6543: PUSH
6544: EMPTY
6545: LIST
6546: LIST
6547: LIST
6548: LIST
6549: LIST
6550: LIST
6551: PUSH
6552: LD_INT 32
6554: PUSH
6555: LD_INT 133
6557: PUSH
6558: LD_INT 95
6560: PUSH
6561: LD_INT 3
6563: PUSH
6564: LD_INT 0
6566: PUSH
6567: LD_INT 0
6569: PUSH
6570: EMPTY
6571: LIST
6572: LIST
6573: LIST
6574: LIST
6575: LIST
6576: LIST
6577: PUSH
6578: LD_INT 32
6580: PUSH
6581: LD_INT 131
6583: PUSH
6584: LD_INT 102
6586: PUSH
6587: LD_INT 2
6589: PUSH
6590: LD_INT 0
6592: PUSH
6593: LD_INT 0
6595: PUSH
6596: EMPTY
6597: LIST
6598: LIST
6599: LIST
6600: LIST
6601: LIST
6602: LIST
6603: PUSH
6604: LD_INT 32
6606: PUSH
6607: LD_INT 164
6609: PUSH
6610: LD_INT 144
6612: PUSH
6613: LD_INT 0
6615: PUSH
6616: LD_INT 0
6618: PUSH
6619: LD_INT 0
6621: PUSH
6622: EMPTY
6623: LIST
6624: LIST
6625: LIST
6626: LIST
6627: LIST
6628: LIST
6629: PUSH
6630: LD_INT 32
6632: PUSH
6633: LD_INT 146
6635: PUSH
6636: LD_INT 139
6638: PUSH
6639: LD_INT 0
6641: PUSH
6642: LD_INT 0
6644: PUSH
6645: LD_INT 0
6647: PUSH
6648: EMPTY
6649: LIST
6650: LIST
6651: LIST
6652: LIST
6653: LIST
6654: LIST
6655: PUSH
6656: LD_INT 26
6658: PUSH
6659: LD_INT 143
6661: PUSH
6662: LD_INT 122
6664: PUSH
6665: LD_INT 4
6667: PUSH
6668: LD_INT 0
6670: PUSH
6671: LD_INT 0
6673: PUSH
6674: EMPTY
6675: LIST
6676: LIST
6677: LIST
6678: LIST
6679: LIST
6680: LIST
6681: PUSH
6682: LD_INT 26
6684: PUSH
6685: LD_INT 164
6687: PUSH
6688: LD_INT 116
6690: PUSH
6691: LD_INT 2
6693: PUSH
6694: LD_INT 0
6696: PUSH
6697: LD_INT 0
6699: PUSH
6700: EMPTY
6701: LIST
6702: LIST
6703: LIST
6704: LIST
6705: LIST
6706: LIST
6707: PUSH
6708: EMPTY
6709: LIST
6710: LIST
6711: LIST
6712: LIST
6713: LIST
6714: LIST
6715: LIST
6716: LIST
6717: LIST
6718: LIST
6719: LIST
6720: LIST
6721: LIST
6722: LIST
6723: LIST
6724: LIST
6725: LIST
6726: LIST
6727: LIST
6728: LIST
6729: LIST
6730: LIST
6731: LIST
6732: LIST
6733: LIST
6734: ST_TO_ADDR
// for i in tmp do
6735: LD_ADDR_VAR 0 2
6739: PUSH
6740: LD_VAR 0 5
6744: PUSH
6745: FOR_IN
6746: IFFALSE 6977
// begin uc_side := side ;
6748: LD_ADDR_OWVAR 20
6752: PUSH
6753: LD_VAR 0 8
6757: ST_TO_ADDR
// uc_nation := nation_arabian ;
6758: LD_ADDR_OWVAR 21
6762: PUSH
6763: LD_INT 2
6765: ST_TO_ADDR
// bc_type := i [ 1 ] ;
6766: LD_ADDR_OWVAR 42
6770: PUSH
6771: LD_VAR 0 2
6775: PUSH
6776: LD_INT 1
6778: ARRAY
6779: ST_TO_ADDR
// bc_level := rand ( 5 , 6 ) ;
6780: LD_ADDR_OWVAR 43
6784: PUSH
6785: LD_INT 5
6787: PPUSH
6788: LD_INT 6
6790: PPUSH
6791: CALL_OW 12
6795: ST_TO_ADDR
// bc_kind1 := i [ 5 ] ;
6796: LD_ADDR_OWVAR 44
6800: PUSH
6801: LD_VAR 0 2
6805: PUSH
6806: LD_INT 5
6808: ARRAY
6809: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
6810: LD_ADDR_OWVAR 45
6814: PUSH
6815: LD_VAR 0 2
6819: PUSH
6820: LD_INT 6
6822: ARRAY
6823: ST_TO_ADDR
// sr := 0 ;
6824: LD_ADDR_VAR 0 9
6828: PUSH
6829: LD_INT 0
6831: ST_TO_ADDR
// if i [ 1 ] = b_oil_mine then
6832: LD_VAR 0 2
6836: PUSH
6837: LD_INT 1
6839: ARRAY
6840: PUSH
6841: LD_INT 29
6843: EQUAL
6844: IFFALSE 6856
// sr := mat_oil else
6846: LD_ADDR_VAR 0 9
6850: PUSH
6851: LD_INT 2
6853: ST_TO_ADDR
6854: GO 6878
// if i [ 1 ] = b_siberite_mine then
6856: LD_VAR 0 2
6860: PUSH
6861: LD_INT 1
6863: ARRAY
6864: PUSH
6865: LD_INT 30
6867: EQUAL
6868: IFFALSE 6878
// sr := mat_siberit ;
6870: LD_ADDR_VAR 0 9
6874: PUSH
6875: LD_INT 3
6877: ST_TO_ADDR
// if sr then
6878: LD_VAR 0 9
6882: IFFALSE 6938
// begin CreateDepositXY ( i [ 2 ] , i [ 3 ] , sr ) ;
6884: LD_VAR 0 2
6888: PUSH
6889: LD_INT 2
6891: ARRAY
6892: PPUSH
6893: LD_VAR 0 2
6897: PUSH
6898: LD_INT 3
6900: ARRAY
6901: PPUSH
6902: LD_VAR 0 9
6906: PPUSH
6907: CALL_OW 62
// SetResourceVisibility ( i [ 2 ] , i [ 3 ] , side ) ;
6911: LD_VAR 0 2
6915: PUSH
6916: LD_INT 2
6918: ARRAY
6919: PPUSH
6920: LD_VAR 0 2
6924: PUSH
6925: LD_INT 3
6927: ARRAY
6928: PPUSH
6929: LD_VAR 0 8
6933: PPUSH
6934: CALL_OW 441
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
6938: LD_ADDR_VAR 0 3
6942: PUSH
6943: LD_VAR 0 2
6947: PUSH
6948: LD_INT 2
6950: ARRAY
6951: PPUSH
6952: LD_VAR 0 2
6956: PUSH
6957: LD_INT 3
6959: ARRAY
6960: PPUSH
6961: LD_VAR 0 2
6965: PUSH
6966: LD_INT 4
6968: ARRAY
6969: PPUSH
6970: CALL_OW 47
6974: ST_TO_ADDR
// end ;
6975: GO 6745
6977: POP
6978: POP
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
6979: LD_ADDR_VAR 0 10
6983: PUSH
6984: LD_INT 22
6986: PUSH
6987: LD_VAR 0 8
6991: PUSH
6992: EMPTY
6993: LIST
6994: LIST
6995: PUSH
6996: LD_INT 30
6998: PUSH
6999: LD_INT 1
7001: PUSH
7002: EMPTY
7003: LIST
7004: LIST
7005: PUSH
7006: EMPTY
7007: LIST
7008: LIST
7009: PPUSH
7010: CALL_OW 69
7014: ST_TO_ADDR
// if not depot then
7015: LD_VAR 0 10
7019: NOT
7020: IFFALSE 7024
// exit ;
7022: GO 7270
// base := PrepareBase ( depot [ 1 ] , legBase , 0 , [ 7 , 8 , 10 ] [ Difficulty ] , [ 3000 , 300 , 100 ] , [ 14 , 6 , 6 , 5 ] ) ;
7024: LD_ADDR_VAR 0 11
7028: PUSH
7029: LD_VAR 0 10
7033: PUSH
7034: LD_INT 1
7036: ARRAY
7037: PPUSH
7038: LD_INT 6
7040: PPUSH
7041: LD_INT 0
7043: PPUSH
7044: LD_INT 7
7046: PUSH
7047: LD_INT 8
7049: PUSH
7050: LD_INT 10
7052: PUSH
7053: EMPTY
7054: LIST
7055: LIST
7056: LIST
7057: PUSH
7058: LD_OWVAR 67
7062: ARRAY
7063: PPUSH
7064: LD_INT 3000
7066: PUSH
7067: LD_INT 300
7069: PUSH
7070: LD_INT 100
7072: PUSH
7073: EMPTY
7074: LIST
7075: LIST
7076: LIST
7077: PPUSH
7078: LD_INT 14
7080: PUSH
7081: LD_INT 6
7083: PUSH
7084: LD_INT 6
7086: PUSH
7087: LD_INT 5
7089: PUSH
7090: EMPTY
7091: LIST
7092: LIST
7093: LIST
7094: LIST
7095: PPUSH
7096: CALL 28182 0 6
7100: ST_TO_ADDR
// if not base then
7101: LD_VAR 0 11
7105: NOT
7106: IFFALSE 7110
// exit ;
7108: GO 7270
// if Difficulty > 1 then
7110: LD_OWVAR 67
7114: PUSH
7115: LD_INT 1
7117: GREATER
7118: IFFALSE 7191
// begin InitHc ;
7120: CALL_OW 19
// PrepareHuman ( sex_male , class_sniper , [ 5 , 8 ] [ Difficulty - 1 ] ) ;
7124: LD_INT 1
7126: PPUSH
7127: LD_INT 5
7129: PPUSH
7130: LD_INT 5
7132: PUSH
7133: LD_INT 8
7135: PUSH
7136: EMPTY
7137: LIST
7138: LIST
7139: PUSH
7140: LD_OWVAR 67
7144: PUSH
7145: LD_INT 1
7147: MINUS
7148: ARRAY
7149: PPUSH
7150: CALL_OW 380
// for i = 1 to Difficulty do
7154: LD_ADDR_VAR 0 2
7158: PUSH
7159: DOUBLE
7160: LD_INT 1
7162: DEC
7163: ST_TO_ADDR
7164: LD_OWVAR 67
7168: PUSH
7169: FOR_TO
7170: IFFALSE 7189
// PlaceUnitArea ( CreateHuman , sniperGuardArea , false ) ;
7172: CALL_OW 44
7176: PPUSH
7177: LD_INT 24
7179: PPUSH
7180: LD_INT 0
7182: PPUSH
7183: CALL_OW 49
7187: GO 7169
7189: POP
7190: POP
// end ; mc_bases := Replace ( mc_bases , mc_leg , base ) ;
7191: LD_ADDR_EXP 50
7195: PUSH
7196: LD_EXP 50
7200: PPUSH
7201: LD_EXP 6
7205: PPUSH
7206: LD_VAR 0 11
7210: PPUSH
7211: CALL_OW 1
7215: ST_TO_ADDR
// hc_gallery := ru ;
7216: LD_ADDR_OWVAR 33
7220: PUSH
7221: LD_STRING ru
7223: ST_TO_ADDR
// hc_face_number := 44 ;
7224: LD_ADDR_OWVAR 34
7228: PUSH
7229: LD_INT 44
7231: ST_TO_ADDR
// hc_name := Robert Farmer ;
7232: LD_ADDR_OWVAR 26
7236: PUSH
7237: LD_STRING Robert Farmer
7239: ST_TO_ADDR
// hc_sex := sex_male ;
7240: LD_ADDR_OWVAR 27
7244: PUSH
7245: LD_INT 1
7247: ST_TO_ADDR
// hc_class := 1 ;
7248: LD_ADDR_OWVAR 28
7252: PUSH
7253: LD_INT 1
7255: ST_TO_ADDR
// Farmer := CreateHuman ;
7256: LD_ADDR_EXP 13
7260: PUSH
7261: CALL_OW 44
7265: ST_TO_ADDR
// InitHc ;
7266: CALL_OW 19
// end ;
7270: LD_VAR 0 1
7274: RET
// export function SetAdditionalRussianForces ; var i , tmp , veh ; begin
7275: LD_INT 0
7277: PPUSH
7278: PPUSH
7279: PPUSH
7280: PPUSH
// tmp := [ ] ;
7281: LD_ADDR_VAR 0 3
7285: PUSH
7286: EMPTY
7287: ST_TO_ADDR
// for i := 1 to 3 do
7288: LD_ADDR_VAR 0 2
7292: PUSH
7293: DOUBLE
7294: LD_INT 1
7296: DEC
7297: ST_TO_ADDR
7298: LD_INT 3
7300: PUSH
7301: FOR_TO
7302: IFFALSE 7414
// begin uc_side := 3 ;
7304: LD_ADDR_OWVAR 20
7308: PUSH
7309: LD_INT 3
7311: ST_TO_ADDR
// uc_nation := 3 ;
7312: LD_ADDR_OWVAR 21
7316: PUSH
7317: LD_INT 3
7319: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
7320: LD_ADDR_OWVAR 37
7324: PUSH
7325: LD_INT 22
7327: ST_TO_ADDR
// vc_engine := engine_siberite ;
7328: LD_ADDR_OWVAR 39
7332: PUSH
7333: LD_INT 3
7335: ST_TO_ADDR
// vc_control := control_computer ;
7336: LD_ADDR_OWVAR 38
7340: PUSH
7341: LD_INT 3
7343: ST_TO_ADDR
// vc_weapon := ru_crane ;
7344: LD_ADDR_OWVAR 40
7348: PUSH
7349: LD_INT 52
7351: ST_TO_ADDR
// veh := CreateVehicle ;
7352: LD_ADDR_VAR 0 4
7356: PUSH
7357: CALL_OW 45
7361: ST_TO_ADDR
// PlaceUnitXYR ( veh , 73 , 122 , 3 , false ) ;
7362: LD_VAR 0 4
7366: PPUSH
7367: LD_INT 73
7369: PPUSH
7370: LD_INT 122
7372: PPUSH
7373: LD_INT 3
7375: PPUSH
7376: LD_INT 0
7378: PPUSH
7379: CALL_OW 50
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
7383: LD_ADDR_VAR 0 3
7387: PUSH
7388: LD_VAR 0 3
7392: PPUSH
7393: LD_VAR 0 3
7397: PUSH
7398: LD_INT 1
7400: PLUS
7401: PPUSH
7402: LD_VAR 0 4
7406: PPUSH
7407: CALL_OW 1
7411: ST_TO_ADDR
// end ;
7412: GO 7301
7414: POP
7415: POP
// mc_vehicles := Replace ( mc_vehicles , mc_rus_1 , tmp ) ;
7416: LD_ADDR_EXP 69
7420: PUSH
7421: LD_EXP 69
7425: PPUSH
7426: LD_EXP 7
7430: PPUSH
7431: LD_VAR 0 3
7435: PPUSH
7436: CALL_OW 1
7440: ST_TO_ADDR
// tmp := [ ] ;
7441: LD_ADDR_VAR 0 3
7445: PUSH
7446: EMPTY
7447: ST_TO_ADDR
// for i := 1 to 3 do
7448: LD_ADDR_VAR 0 2
7452: PUSH
7453: DOUBLE
7454: LD_INT 1
7456: DEC
7457: ST_TO_ADDR
7458: LD_INT 3
7460: PUSH
7461: FOR_TO
7462: IFFALSE 7574
// begin uc_side := 3 ;
7464: LD_ADDR_OWVAR 20
7468: PUSH
7469: LD_INT 3
7471: ST_TO_ADDR
// uc_nation := 3 ;
7472: LD_ADDR_OWVAR 21
7476: PUSH
7477: LD_INT 3
7479: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
7480: LD_ADDR_OWVAR 37
7484: PUSH
7485: LD_INT 22
7487: ST_TO_ADDR
// vc_engine := engine_siberite ;
7488: LD_ADDR_OWVAR 39
7492: PUSH
7493: LD_INT 3
7495: ST_TO_ADDR
// vc_control := control_computer ;
7496: LD_ADDR_OWVAR 38
7500: PUSH
7501: LD_INT 3
7503: ST_TO_ADDR
// vc_weapon := ru_crane ;
7504: LD_ADDR_OWVAR 40
7508: PUSH
7509: LD_INT 52
7511: ST_TO_ADDR
// veh := CreateVehicle ;
7512: LD_ADDR_VAR 0 4
7516: PUSH
7517: CALL_OW 45
7521: ST_TO_ADDR
// PlaceUnitXYR ( veh , 22 , 28 , 3 , false ) ;
7522: LD_VAR 0 4
7526: PPUSH
7527: LD_INT 22
7529: PPUSH
7530: LD_INT 28
7532: PPUSH
7533: LD_INT 3
7535: PPUSH
7536: LD_INT 0
7538: PPUSH
7539: CALL_OW 50
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
7543: LD_ADDR_VAR 0 3
7547: PUSH
7548: LD_VAR 0 3
7552: PPUSH
7553: LD_VAR 0 3
7557: PUSH
7558: LD_INT 1
7560: PLUS
7561: PPUSH
7562: LD_VAR 0 4
7566: PPUSH
7567: CALL_OW 1
7571: ST_TO_ADDR
// end ;
7572: GO 7461
7574: POP
7575: POP
// mc_vehicles := Replace ( mc_vehicles , mc_rus_2 , tmp ) ;
7576: LD_ADDR_EXP 69
7580: PUSH
7581: LD_EXP 69
7585: PPUSH
7586: LD_EXP 8
7590: PPUSH
7591: LD_VAR 0 3
7595: PPUSH
7596: CALL_OW 1
7600: ST_TO_ADDR
// end ;
7601: LD_VAR 0 1
7605: RET
// export function PrepareAmericans ; var i , b , tmp , side , sr , base , depot ; begin
7606: LD_INT 0
7608: PPUSH
7609: PPUSH
7610: PPUSH
7611: PPUSH
7612: PPUSH
7613: PPUSH
7614: PPUSH
7615: PPUSH
// PrepareNature ( 0 , 0 , 4 , 0 , 0 , 0 , 0 , amerApe , 0 ) ;
7616: LD_INT 0
7618: PPUSH
7619: LD_INT 0
7621: PPUSH
7622: LD_INT 4
7624: PPUSH
7625: LD_INT 0
7627: PPUSH
7628: LD_INT 0
7630: PPUSH
7631: LD_INT 0
7633: PPUSH
7634: LD_INT 0
7636: PPUSH
7637: LD_INT 10
7639: PPUSH
7640: LD_INT 0
7642: PPUSH
7643: CALL 53235 0 9
// side := 4 ;
7647: LD_ADDR_VAR 0 5
7651: PUSH
7652: LD_INT 4
7654: ST_TO_ADDR
// tmp := [ [ 1 , 144 , 18 , 4 , 0 , 0 ] , [ 3 , 137 , 8 , 4 , 0 , 0 ] , [ 22 , 141 , 8 , 4 , 0 , 0 ] , [ 25 , 137 , 5 , 3 , 0 , 0 ] , [ 18 , 137 , 12 , 0 , 0 , 0 ] , [ 17 , 133 , 4 , 2 , 0 , 0 ] , [ 16 , 140 , 11 , 5 , 0 , 0 ] , [ 8 , 149 , 26 , 4 , 10 , 15 ] , [ 8 , 142 , 26 , 1 , 11 , 12 ] , [ 27 , 153 , 32 , 5 , 0 , 0 ] , [ 27 , 145 , 32 , 3 , 0 , 0 ] , [ 27 , 138 , 2 , 4 , 0 , 0 ] , [ 27 , 144 , 13 , 0 , 0 , 0 ] , [ 26 , 124 , 2 , 4 , 0 , 0 ] , [ 26 , 121 , 2 , 2 , 0 , 0 ] , [ 26 , 118 , 2 , 1 , 0 , 0 ] , [ 29 , 159 , 47 , 2 , 0 , 0 ] , [ 32 , 146 , 41 , 0 , 0 , 0 ] , [ 33 , 136 , 37 , 0 , 0 , 0 ] , [ 33 , 132 , 34 , 0 , 0 , 0 ] , [ 36 , 124 , 7 , 1 , 0 , 0 ] , [ 5 , 124 , 19 , 0 , 0 , 0 ] , [ 32 , 127 , 23 , 0 , 0 , 0 ] ] ;
7655: LD_ADDR_VAR 0 4
7659: PUSH
7660: LD_INT 1
7662: PUSH
7663: LD_INT 144
7665: PUSH
7666: LD_INT 18
7668: PUSH
7669: LD_INT 4
7671: PUSH
7672: LD_INT 0
7674: PUSH
7675: LD_INT 0
7677: PUSH
7678: EMPTY
7679: LIST
7680: LIST
7681: LIST
7682: LIST
7683: LIST
7684: LIST
7685: PUSH
7686: LD_INT 3
7688: PUSH
7689: LD_INT 137
7691: PUSH
7692: LD_INT 8
7694: PUSH
7695: LD_INT 4
7697: PUSH
7698: LD_INT 0
7700: PUSH
7701: LD_INT 0
7703: PUSH
7704: EMPTY
7705: LIST
7706: LIST
7707: LIST
7708: LIST
7709: LIST
7710: LIST
7711: PUSH
7712: LD_INT 22
7714: PUSH
7715: LD_INT 141
7717: PUSH
7718: LD_INT 8
7720: PUSH
7721: LD_INT 4
7723: PUSH
7724: LD_INT 0
7726: PUSH
7727: LD_INT 0
7729: PUSH
7730: EMPTY
7731: LIST
7732: LIST
7733: LIST
7734: LIST
7735: LIST
7736: LIST
7737: PUSH
7738: LD_INT 25
7740: PUSH
7741: LD_INT 137
7743: PUSH
7744: LD_INT 5
7746: PUSH
7747: LD_INT 3
7749: PUSH
7750: LD_INT 0
7752: PUSH
7753: LD_INT 0
7755: PUSH
7756: EMPTY
7757: LIST
7758: LIST
7759: LIST
7760: LIST
7761: LIST
7762: LIST
7763: PUSH
7764: LD_INT 18
7766: PUSH
7767: LD_INT 137
7769: PUSH
7770: LD_INT 12
7772: PUSH
7773: LD_INT 0
7775: PUSH
7776: LD_INT 0
7778: PUSH
7779: LD_INT 0
7781: PUSH
7782: EMPTY
7783: LIST
7784: LIST
7785: LIST
7786: LIST
7787: LIST
7788: LIST
7789: PUSH
7790: LD_INT 17
7792: PUSH
7793: LD_INT 133
7795: PUSH
7796: LD_INT 4
7798: PUSH
7799: LD_INT 2
7801: PUSH
7802: LD_INT 0
7804: PUSH
7805: LD_INT 0
7807: PUSH
7808: EMPTY
7809: LIST
7810: LIST
7811: LIST
7812: LIST
7813: LIST
7814: LIST
7815: PUSH
7816: LD_INT 16
7818: PUSH
7819: LD_INT 140
7821: PUSH
7822: LD_INT 11
7824: PUSH
7825: LD_INT 5
7827: PUSH
7828: LD_INT 0
7830: PUSH
7831: LD_INT 0
7833: PUSH
7834: EMPTY
7835: LIST
7836: LIST
7837: LIST
7838: LIST
7839: LIST
7840: LIST
7841: PUSH
7842: LD_INT 8
7844: PUSH
7845: LD_INT 149
7847: PUSH
7848: LD_INT 26
7850: PUSH
7851: LD_INT 4
7853: PUSH
7854: LD_INT 10
7856: PUSH
7857: LD_INT 15
7859: PUSH
7860: EMPTY
7861: LIST
7862: LIST
7863: LIST
7864: LIST
7865: LIST
7866: LIST
7867: PUSH
7868: LD_INT 8
7870: PUSH
7871: LD_INT 142
7873: PUSH
7874: LD_INT 26
7876: PUSH
7877: LD_INT 1
7879: PUSH
7880: LD_INT 11
7882: PUSH
7883: LD_INT 12
7885: PUSH
7886: EMPTY
7887: LIST
7888: LIST
7889: LIST
7890: LIST
7891: LIST
7892: LIST
7893: PUSH
7894: LD_INT 27
7896: PUSH
7897: LD_INT 153
7899: PUSH
7900: LD_INT 32
7902: PUSH
7903: LD_INT 5
7905: PUSH
7906: LD_INT 0
7908: PUSH
7909: LD_INT 0
7911: PUSH
7912: EMPTY
7913: LIST
7914: LIST
7915: LIST
7916: LIST
7917: LIST
7918: LIST
7919: PUSH
7920: LD_INT 27
7922: PUSH
7923: LD_INT 145
7925: PUSH
7926: LD_INT 32
7928: PUSH
7929: LD_INT 3
7931: PUSH
7932: LD_INT 0
7934: PUSH
7935: LD_INT 0
7937: PUSH
7938: EMPTY
7939: LIST
7940: LIST
7941: LIST
7942: LIST
7943: LIST
7944: LIST
7945: PUSH
7946: LD_INT 27
7948: PUSH
7949: LD_INT 138
7951: PUSH
7952: LD_INT 2
7954: PUSH
7955: LD_INT 4
7957: PUSH
7958: LD_INT 0
7960: PUSH
7961: LD_INT 0
7963: PUSH
7964: EMPTY
7965: LIST
7966: LIST
7967: LIST
7968: LIST
7969: LIST
7970: LIST
7971: PUSH
7972: LD_INT 27
7974: PUSH
7975: LD_INT 144
7977: PUSH
7978: LD_INT 13
7980: PUSH
7981: LD_INT 0
7983: PUSH
7984: LD_INT 0
7986: PUSH
7987: LD_INT 0
7989: PUSH
7990: EMPTY
7991: LIST
7992: LIST
7993: LIST
7994: LIST
7995: LIST
7996: LIST
7997: PUSH
7998: LD_INT 26
8000: PUSH
8001: LD_INT 124
8003: PUSH
8004: LD_INT 2
8006: PUSH
8007: LD_INT 4
8009: PUSH
8010: LD_INT 0
8012: PUSH
8013: LD_INT 0
8015: PUSH
8016: EMPTY
8017: LIST
8018: LIST
8019: LIST
8020: LIST
8021: LIST
8022: LIST
8023: PUSH
8024: LD_INT 26
8026: PUSH
8027: LD_INT 121
8029: PUSH
8030: LD_INT 2
8032: PUSH
8033: LD_INT 2
8035: PUSH
8036: LD_INT 0
8038: PUSH
8039: LD_INT 0
8041: PUSH
8042: EMPTY
8043: LIST
8044: LIST
8045: LIST
8046: LIST
8047: LIST
8048: LIST
8049: PUSH
8050: LD_INT 26
8052: PUSH
8053: LD_INT 118
8055: PUSH
8056: LD_INT 2
8058: PUSH
8059: LD_INT 1
8061: PUSH
8062: LD_INT 0
8064: PUSH
8065: LD_INT 0
8067: PUSH
8068: EMPTY
8069: LIST
8070: LIST
8071: LIST
8072: LIST
8073: LIST
8074: LIST
8075: PUSH
8076: LD_INT 29
8078: PUSH
8079: LD_INT 159
8081: PUSH
8082: LD_INT 47
8084: PUSH
8085: LD_INT 2
8087: PUSH
8088: LD_INT 0
8090: PUSH
8091: LD_INT 0
8093: PUSH
8094: EMPTY
8095: LIST
8096: LIST
8097: LIST
8098: LIST
8099: LIST
8100: LIST
8101: PUSH
8102: LD_INT 32
8104: PUSH
8105: LD_INT 146
8107: PUSH
8108: LD_INT 41
8110: PUSH
8111: LD_INT 0
8113: PUSH
8114: LD_INT 0
8116: PUSH
8117: LD_INT 0
8119: PUSH
8120: EMPTY
8121: LIST
8122: LIST
8123: LIST
8124: LIST
8125: LIST
8126: LIST
8127: PUSH
8128: LD_INT 33
8130: PUSH
8131: LD_INT 136
8133: PUSH
8134: LD_INT 37
8136: PUSH
8137: LD_INT 0
8139: PUSH
8140: LD_INT 0
8142: PUSH
8143: LD_INT 0
8145: PUSH
8146: EMPTY
8147: LIST
8148: LIST
8149: LIST
8150: LIST
8151: LIST
8152: LIST
8153: PUSH
8154: LD_INT 33
8156: PUSH
8157: LD_INT 132
8159: PUSH
8160: LD_INT 34
8162: PUSH
8163: LD_INT 0
8165: PUSH
8166: LD_INT 0
8168: PUSH
8169: LD_INT 0
8171: PUSH
8172: EMPTY
8173: LIST
8174: LIST
8175: LIST
8176: LIST
8177: LIST
8178: LIST
8179: PUSH
8180: LD_INT 36
8182: PUSH
8183: LD_INT 124
8185: PUSH
8186: LD_INT 7
8188: PUSH
8189: LD_INT 1
8191: PUSH
8192: LD_INT 0
8194: PUSH
8195: LD_INT 0
8197: PUSH
8198: EMPTY
8199: LIST
8200: LIST
8201: LIST
8202: LIST
8203: LIST
8204: LIST
8205: PUSH
8206: LD_INT 5
8208: PUSH
8209: LD_INT 124
8211: PUSH
8212: LD_INT 19
8214: PUSH
8215: LD_INT 0
8217: PUSH
8218: LD_INT 0
8220: PUSH
8221: LD_INT 0
8223: PUSH
8224: EMPTY
8225: LIST
8226: LIST
8227: LIST
8228: LIST
8229: LIST
8230: LIST
8231: PUSH
8232: LD_INT 32
8234: PUSH
8235: LD_INT 127
8237: PUSH
8238: LD_INT 23
8240: PUSH
8241: LD_INT 0
8243: PUSH
8244: LD_INT 0
8246: PUSH
8247: LD_INT 0
8249: PUSH
8250: EMPTY
8251: LIST
8252: LIST
8253: LIST
8254: LIST
8255: LIST
8256: LIST
8257: PUSH
8258: EMPTY
8259: LIST
8260: LIST
8261: LIST
8262: LIST
8263: LIST
8264: LIST
8265: LIST
8266: LIST
8267: LIST
8268: LIST
8269: LIST
8270: LIST
8271: LIST
8272: LIST
8273: LIST
8274: LIST
8275: LIST
8276: LIST
8277: LIST
8278: LIST
8279: LIST
8280: LIST
8281: LIST
8282: ST_TO_ADDR
// for i in tmp do
8283: LD_ADDR_VAR 0 2
8287: PUSH
8288: LD_VAR 0 4
8292: PUSH
8293: FOR_IN
8294: IFFALSE 8525
// begin uc_side := side ;
8296: LD_ADDR_OWVAR 20
8300: PUSH
8301: LD_VAR 0 5
8305: ST_TO_ADDR
// uc_nation := nation_american ;
8306: LD_ADDR_OWVAR 21
8310: PUSH
8311: LD_INT 1
8313: ST_TO_ADDR
// bc_type := i [ 1 ] ;
8314: LD_ADDR_OWVAR 42
8318: PUSH
8319: LD_VAR 0 2
8323: PUSH
8324: LD_INT 1
8326: ARRAY
8327: ST_TO_ADDR
// bc_level := rand ( 5 , 6 ) ;
8328: LD_ADDR_OWVAR 43
8332: PUSH
8333: LD_INT 5
8335: PPUSH
8336: LD_INT 6
8338: PPUSH
8339: CALL_OW 12
8343: ST_TO_ADDR
// bc_kind1 := i [ 5 ] ;
8344: LD_ADDR_OWVAR 44
8348: PUSH
8349: LD_VAR 0 2
8353: PUSH
8354: LD_INT 5
8356: ARRAY
8357: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
8358: LD_ADDR_OWVAR 45
8362: PUSH
8363: LD_VAR 0 2
8367: PUSH
8368: LD_INT 6
8370: ARRAY
8371: ST_TO_ADDR
// sr := 0 ;
8372: LD_ADDR_VAR 0 6
8376: PUSH
8377: LD_INT 0
8379: ST_TO_ADDR
// if i [ 1 ] = b_oil_mine then
8380: LD_VAR 0 2
8384: PUSH
8385: LD_INT 1
8387: ARRAY
8388: PUSH
8389: LD_INT 29
8391: EQUAL
8392: IFFALSE 8404
// sr := mat_oil else
8394: LD_ADDR_VAR 0 6
8398: PUSH
8399: LD_INT 2
8401: ST_TO_ADDR
8402: GO 8426
// if i [ 1 ] = b_siberite_mine then
8404: LD_VAR 0 2
8408: PUSH
8409: LD_INT 1
8411: ARRAY
8412: PUSH
8413: LD_INT 30
8415: EQUAL
8416: IFFALSE 8426
// sr := mat_siberit ;
8418: LD_ADDR_VAR 0 6
8422: PUSH
8423: LD_INT 3
8425: ST_TO_ADDR
// if sr then
8426: LD_VAR 0 6
8430: IFFALSE 8486
// begin CreateDepositXY ( i [ 2 ] , i [ 3 ] , sr ) ;
8432: LD_VAR 0 2
8436: PUSH
8437: LD_INT 2
8439: ARRAY
8440: PPUSH
8441: LD_VAR 0 2
8445: PUSH
8446: LD_INT 3
8448: ARRAY
8449: PPUSH
8450: LD_VAR 0 6
8454: PPUSH
8455: CALL_OW 62
// SetResourceVisibility ( i [ 2 ] , i [ 3 ] , side ) ;
8459: LD_VAR 0 2
8463: PUSH
8464: LD_INT 2
8466: ARRAY
8467: PPUSH
8468: LD_VAR 0 2
8472: PUSH
8473: LD_INT 3
8475: ARRAY
8476: PPUSH
8477: LD_VAR 0 5
8481: PPUSH
8482: CALL_OW 441
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
8486: LD_ADDR_VAR 0 3
8490: PUSH
8491: LD_VAR 0 2
8495: PUSH
8496: LD_INT 2
8498: ARRAY
8499: PPUSH
8500: LD_VAR 0 2
8504: PUSH
8505: LD_INT 3
8507: ARRAY
8508: PPUSH
8509: LD_VAR 0 2
8513: PUSH
8514: LD_INT 4
8516: ARRAY
8517: PPUSH
8518: CALL_OW 47
8522: ST_TO_ADDR
// end ;
8523: GO 8293
8525: POP
8526: POP
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
8527: LD_ADDR_VAR 0 8
8531: PUSH
8532: LD_INT 22
8534: PUSH
8535: LD_VAR 0 5
8539: PUSH
8540: EMPTY
8541: LIST
8542: LIST
8543: PUSH
8544: LD_INT 30
8546: PUSH
8547: LD_INT 1
8549: PUSH
8550: EMPTY
8551: LIST
8552: LIST
8553: PUSH
8554: EMPTY
8555: LIST
8556: LIST
8557: PPUSH
8558: CALL_OW 69
8562: ST_TO_ADDR
// if not depot then
8563: LD_VAR 0 8
8567: NOT
8568: IFFALSE 8572
// exit ;
8570: GO 8844
// base := PrepareBase ( depot [ 1 ] , amerBase , theta3 , [ 8 , 7 , 6 ] [ Difficulty ] , [ [ 2500 , 2000 , 1750 ] [ Difficulty ] , [ 300 , 250 , 200 ] [ Difficulty ] , [ 80 , 60 , 50 ] [ Difficulty ] ] , [ 7 , 6 , 5 , 5 ] ) ;
8572: LD_ADDR_VAR 0 7
8576: PUSH
8577: LD_VAR 0 8
8581: PUSH
8582: LD_INT 1
8584: ARRAY
8585: PPUSH
8586: LD_INT 3
8588: PPUSH
8589: LD_STRING theta3
8591: PPUSH
8592: LD_INT 8
8594: PUSH
8595: LD_INT 7
8597: PUSH
8598: LD_INT 6
8600: PUSH
8601: EMPTY
8602: LIST
8603: LIST
8604: LIST
8605: PUSH
8606: LD_OWVAR 67
8610: ARRAY
8611: PPUSH
8612: LD_INT 2500
8614: PUSH
8615: LD_INT 2000
8617: PUSH
8618: LD_INT 1750
8620: PUSH
8621: EMPTY
8622: LIST
8623: LIST
8624: LIST
8625: PUSH
8626: LD_OWVAR 67
8630: ARRAY
8631: PUSH
8632: LD_INT 300
8634: PUSH
8635: LD_INT 250
8637: PUSH
8638: LD_INT 200
8640: PUSH
8641: EMPTY
8642: LIST
8643: LIST
8644: LIST
8645: PUSH
8646: LD_OWVAR 67
8650: ARRAY
8651: PUSH
8652: LD_INT 80
8654: PUSH
8655: LD_INT 60
8657: PUSH
8658: LD_INT 50
8660: PUSH
8661: EMPTY
8662: LIST
8663: LIST
8664: LIST
8665: PUSH
8666: LD_OWVAR 67
8670: ARRAY
8671: PUSH
8672: EMPTY
8673: LIST
8674: LIST
8675: LIST
8676: PPUSH
8677: LD_INT 7
8679: PUSH
8680: LD_INT 6
8682: PUSH
8683: LD_INT 5
8685: PUSH
8686: LD_INT 5
8688: PUSH
8689: EMPTY
8690: LIST
8691: LIST
8692: LIST
8693: LIST
8694: PPUSH
8695: CALL 28182 0 6
8699: ST_TO_ADDR
// if not base then
8700: LD_VAR 0 7
8704: NOT
8705: IFFALSE 8709
// exit ;
8707: GO 8844
// mc_bases := Replace ( mc_bases , mc_amer , base ) ;
8709: LD_ADDR_EXP 50
8713: PUSH
8714: LD_EXP 50
8718: PPUSH
8719: LD_EXP 5
8723: PPUSH
8724: LD_VAR 0 7
8728: PPUSH
8729: CALL_OW 1
8733: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 7 ) ;
8734: LD_INT 1
8736: PPUSH
8737: LD_INT 1
8739: PPUSH
8740: LD_INT 7
8742: PPUSH
8743: CALL_OW 380
// allyCommander := CreateHuman ;
8747: LD_ADDR_EXP 11
8751: PUSH
8752: CALL_OW 44
8756: ST_TO_ADDR
// PlaceUnitXY ( allyCommander , 139 , 15 , false ) ;
8757: LD_EXP 11
8761: PPUSH
8762: LD_INT 139
8764: PPUSH
8765: LD_INT 15
8767: PPUSH
8768: LD_INT 0
8770: PPUSH
8771: CALL_OW 48
// ComTurnXY ( allyCommander , 137 , 15 ) ;
8775: LD_EXP 11
8779: PPUSH
8780: LD_INT 137
8782: PPUSH
8783: LD_INT 15
8785: PPUSH
8786: CALL_OW 118
// hc_gallery := us ;
8790: LD_ADDR_OWVAR 33
8794: PUSH
8795: LD_STRING us
8797: ST_TO_ADDR
// hc_face_number := 7 ;
8798: LD_ADDR_OWVAR 34
8802: PUSH
8803: LD_INT 7
8805: ST_TO_ADDR
// hc_name := Arthur Powell ;
8806: LD_ADDR_OWVAR 26
8810: PUSH
8811: LD_STRING Arthur Powell
8813: ST_TO_ADDR
// hc_sex := sex_male ;
8814: LD_ADDR_OWVAR 27
8818: PUSH
8819: LD_INT 1
8821: ST_TO_ADDR
// hc_class := 1 ;
8822: LD_ADDR_OWVAR 28
8826: PUSH
8827: LD_INT 1
8829: ST_TO_ADDR
// Powell := CreateHuman ;
8830: LD_ADDR_EXP 12
8834: PUSH
8835: CALL_OW 44
8839: ST_TO_ADDR
// InitHc ;
8840: CALL_OW 19
// end ;
8844: LD_VAR 0 1
8848: RET
// export function PreparePlayer ; var i , side , techs , tanks , cl , chassis , engines , weapons ; begin
8849: LD_INT 0
8851: PPUSH
8852: PPUSH
8853: PPUSH
8854: PPUSH
8855: PPUSH
8856: PPUSH
8857: PPUSH
8858: PPUSH
8859: PPUSH
// side := 1 ;
8860: LD_ADDR_VAR 0 3
8864: PUSH
8865: LD_INT 1
8867: ST_TO_ADDR
// result := [ [ ] , [ ] ] ;
8868: LD_ADDR_VAR 0 1
8872: PUSH
8873: EMPTY
8874: PUSH
8875: EMPTY
8876: PUSH
8877: EMPTY
8878: LIST
8879: LIST
8880: ST_TO_ADDR
// uc_side := side ;
8881: LD_ADDR_OWVAR 20
8885: PUSH
8886: LD_VAR 0 3
8890: ST_TO_ADDR
// uc_nation := nation_american ;
8891: LD_ADDR_OWVAR 21
8895: PUSH
8896: LD_INT 1
8898: ST_TO_ADDR
// InitHc ;
8899: CALL_OW 19
// InitVc ;
8903: CALL_OW 20
// hc_importance := 0 ;
8907: LD_ADDR_OWVAR 32
8911: PUSH
8912: LD_INT 0
8914: ST_TO_ADDR
// chassis := [ us_medium_wheeled , us_medium_tracked , us_medium_tracked ] ;
8915: LD_ADDR_VAR 0 7
8919: PUSH
8920: LD_INT 2
8922: PUSH
8923: LD_INT 3
8925: PUSH
8926: LD_INT 3
8928: PUSH
8929: EMPTY
8930: LIST
8931: LIST
8932: LIST
8933: ST_TO_ADDR
// if commander = 2 then
8934: LD_EXP 25
8938: PUSH
8939: LD_INT 2
8941: EQUAL
8942: IFFALSE 8963
// chassis := [ us_medium_tracked , us_heavy_tracked , us_heavy_tracked ] ;
8944: LD_ADDR_VAR 0 7
8948: PUSH
8949: LD_INT 3
8951: PUSH
8952: LD_INT 4
8954: PUSH
8955: LD_INT 4
8957: PUSH
8958: EMPTY
8959: LIST
8960: LIST
8961: LIST
8962: ST_TO_ADDR
// if commander = 3 then
8963: LD_EXP 25
8967: PUSH
8968: LD_INT 3
8970: EQUAL
8971: IFFALSE 8992
// chassis := [ us_medium_wheeled , us_morphling , us_morphling ] ;
8973: LD_ADDR_VAR 0 7
8977: PUSH
8978: LD_INT 2
8980: PUSH
8981: LD_INT 5
8983: PUSH
8984: LD_INT 5
8986: PUSH
8987: EMPTY
8988: LIST
8989: LIST
8990: LIST
8991: ST_TO_ADDR
// engines := [ engine_solar , engine_solar , engine_combustion ] ;
8992: LD_ADDR_VAR 0 8
8996: PUSH
8997: LD_INT 2
8999: PUSH
9000: LD_INT 2
9002: PUSH
9003: LD_INT 1
9005: PUSH
9006: EMPTY
9007: LIST
9008: LIST
9009: LIST
9010: ST_TO_ADDR
// if commander = 2 then
9011: LD_EXP 25
9015: PUSH
9016: LD_INT 2
9018: EQUAL
9019: IFFALSE 9040
// engines := [ engine_combustion , engine_combustion , engine_siberite ] ;
9021: LD_ADDR_VAR 0 8
9025: PUSH
9026: LD_INT 1
9028: PUSH
9029: LD_INT 1
9031: PUSH
9032: LD_INT 3
9034: PUSH
9035: EMPTY
9036: LIST
9037: LIST
9038: LIST
9039: ST_TO_ADDR
// if commander = 3 then
9040: LD_EXP 25
9044: PUSH
9045: LD_INT 3
9047: EQUAL
9048: IFFALSE 9069
// engines := [ engine_siberite , engine_siberite , engine_combustion ] ;
9050: LD_ADDR_VAR 0 8
9054: PUSH
9055: LD_INT 3
9057: PUSH
9058: LD_INT 3
9060: PUSH
9061: LD_INT 1
9063: PUSH
9064: EMPTY
9065: LIST
9066: LIST
9067: LIST
9068: ST_TO_ADDR
// weapons := [ us_double_gun , us_light_gun , us_gatling_gun ] ;
9069: LD_ADDR_VAR 0 9
9073: PUSH
9074: LD_INT 5
9076: PUSH
9077: LD_INT 3
9079: PUSH
9080: LD_INT 4
9082: PUSH
9083: EMPTY
9084: LIST
9085: LIST
9086: LIST
9087: ST_TO_ADDR
// if commander = 2 then
9088: LD_EXP 25
9092: PUSH
9093: LD_INT 2
9095: EQUAL
9096: IFFALSE 9117
// weapons := [ us_rocket_launcher , us_double_gun , us_heavy_gun ] ;
9098: LD_ADDR_VAR 0 9
9102: PUSH
9103: LD_INT 7
9105: PUSH
9106: LD_INT 5
9108: PUSH
9109: LD_INT 6
9111: PUSH
9112: EMPTY
9113: LIST
9114: LIST
9115: LIST
9116: ST_TO_ADDR
// if commander = 3 then
9117: LD_EXP 25
9121: PUSH
9122: LD_INT 3
9124: EQUAL
9125: IFFALSE 9146
// weapons := [ us_laser , us_double_laser , us_rocket_launcher ] ;
9127: LD_ADDR_VAR 0 9
9131: PUSH
9132: LD_INT 9
9134: PUSH
9135: LD_INT 10
9137: PUSH
9138: LD_INT 7
9140: PUSH
9141: EMPTY
9142: LIST
9143: LIST
9144: LIST
9145: ST_TO_ADDR
// tanks := [ 5 , 5 , 4 ] [ Difficulty ] ;
9146: LD_ADDR_VAR 0 5
9150: PUSH
9151: LD_INT 5
9153: PUSH
9154: LD_INT 5
9156: PUSH
9157: LD_INT 4
9159: PUSH
9160: EMPTY
9161: LIST
9162: LIST
9163: LIST
9164: PUSH
9165: LD_OWVAR 67
9169: ARRAY
9170: ST_TO_ADDR
// if commander = 2 then
9171: LD_EXP 25
9175: PUSH
9176: LD_INT 2
9178: EQUAL
9179: IFFALSE 9195
// tanks := tanks + 3 ;
9181: LD_ADDR_VAR 0 5
9185: PUSH
9186: LD_VAR 0 5
9190: PUSH
9191: LD_INT 3
9193: PLUS
9194: ST_TO_ADDR
// for i = 1 to tanks do
9195: LD_ADDR_VAR 0 2
9199: PUSH
9200: DOUBLE
9201: LD_INT 1
9203: DEC
9204: ST_TO_ADDR
9205: LD_VAR 0 5
9209: PUSH
9210: FOR_TO
9211: IFFALSE 9321
// begin PrepareVehicle ( chassis [ i mod 3 + 1 ] , engines [ rand ( 1 , 3 ) ] , control_manual , weapons [ i mod 3 + 1 ] , rand ( 60 , 70 ) ) ;
9213: LD_VAR 0 7
9217: PUSH
9218: LD_VAR 0 2
9222: PUSH
9223: LD_INT 3
9225: MOD
9226: PUSH
9227: LD_INT 1
9229: PLUS
9230: ARRAY
9231: PPUSH
9232: LD_VAR 0 8
9236: PUSH
9237: LD_INT 1
9239: PPUSH
9240: LD_INT 3
9242: PPUSH
9243: CALL_OW 12
9247: ARRAY
9248: PPUSH
9249: LD_INT 1
9251: PPUSH
9252: LD_VAR 0 9
9256: PUSH
9257: LD_VAR 0 2
9261: PUSH
9262: LD_INT 3
9264: MOD
9265: PUSH
9266: LD_INT 1
9268: PLUS
9269: ARRAY
9270: PPUSH
9271: LD_INT 60
9273: PPUSH
9274: LD_INT 70
9276: PPUSH
9277: CALL_OW 12
9281: PPUSH
9282: CALL 24736 0 5
// result := Replace ( result , 1 , result [ 1 ] ^ CreateVehicle ) ;
9286: LD_ADDR_VAR 0 1
9290: PUSH
9291: LD_VAR 0 1
9295: PPUSH
9296: LD_INT 1
9298: PPUSH
9299: LD_VAR 0 1
9303: PUSH
9304: LD_INT 1
9306: ARRAY
9307: PUSH
9308: CALL_OW 45
9312: ADD
9313: PPUSH
9314: CALL_OW 1
9318: ST_TO_ADDR
// end ;
9319: GO 9210
9321: POP
9322: POP
// cl := 1 ;
9323: LD_ADDR_VAR 0 6
9327: PUSH
9328: LD_INT 1
9330: ST_TO_ADDR
// for i = 1 to 10 do
9331: LD_ADDR_VAR 0 2
9335: PUSH
9336: DOUBLE
9337: LD_INT 1
9339: DEC
9340: ST_TO_ADDR
9341: LD_INT 10
9343: PUSH
9344: FOR_TO
9345: IFFALSE 9460
// begin if i mod 4 = 0 then
9347: LD_VAR 0 2
9351: PUSH
9352: LD_INT 4
9354: MOD
9355: PUSH
9356: LD_INT 0
9358: EQUAL
9359: IFFALSE 9375
// cl := cl + 1 ;
9361: LD_ADDR_VAR 0 6
9365: PUSH
9366: LD_VAR 0 6
9370: PUSH
9371: LD_INT 1
9373: PLUS
9374: ST_TO_ADDR
// if cl = 2 then
9375: LD_VAR 0 6
9379: PUSH
9380: LD_INT 2
9382: EQUAL
9383: IFFALSE 9393
// cl := 3 ;
9385: LD_ADDR_VAR 0 6
9389: PUSH
9390: LD_INT 3
9392: ST_TO_ADDR
// PrepareHuman ( false , cl , [ 6 , 6 , 5 ] [ Difficulty ] ) ;
9393: LD_INT 0
9395: PPUSH
9396: LD_VAR 0 6
9400: PPUSH
9401: LD_INT 6
9403: PUSH
9404: LD_INT 6
9406: PUSH
9407: LD_INT 5
9409: PUSH
9410: EMPTY
9411: LIST
9412: LIST
9413: LIST
9414: PUSH
9415: LD_OWVAR 67
9419: ARRAY
9420: PPUSH
9421: CALL_OW 380
// result := Replace ( result , 2 , result [ 2 ] ^ CreateHuman ) ;
9425: LD_ADDR_VAR 0 1
9429: PUSH
9430: LD_VAR 0 1
9434: PPUSH
9435: LD_INT 2
9437: PPUSH
9438: LD_VAR 0 1
9442: PUSH
9443: LD_INT 2
9445: ARRAY
9446: PUSH
9447: CALL_OW 44
9451: ADD
9452: PPUSH
9453: CALL_OW 1
9457: ST_TO_ADDR
// end ;
9458: GO 9344
9460: POP
9461: POP
// if commander = 1 then
9462: LD_EXP 25
9466: PUSH
9467: LD_INT 1
9469: EQUAL
9470: IFFALSE 9538
// for i = 1 to 4 do
9472: LD_ADDR_VAR 0 2
9476: PUSH
9477: DOUBLE
9478: LD_INT 1
9480: DEC
9481: ST_TO_ADDR
9482: LD_INT 4
9484: PUSH
9485: FOR_TO
9486: IFFALSE 9536
// begin PrepareHuman ( false , class_soldier , 8 ) ;
9488: LD_INT 0
9490: PPUSH
9491: LD_INT 1
9493: PPUSH
9494: LD_INT 8
9496: PPUSH
9497: CALL_OW 380
// result := Replace ( result , 2 , result [ 2 ] ^ CreateHuman ) ;
9501: LD_ADDR_VAR 0 1
9505: PUSH
9506: LD_VAR 0 1
9510: PPUSH
9511: LD_INT 2
9513: PPUSH
9514: LD_VAR 0 1
9518: PUSH
9519: LD_INT 2
9521: ARRAY
9522: PUSH
9523: CALL_OW 44
9527: ADD
9528: PPUSH
9529: CALL_OW 1
9533: ST_TO_ADDR
// end ;
9534: GO 9485
9536: POP
9537: POP
// techs := [ ] ;
9538: LD_ADDR_VAR 0 4
9542: PUSH
9543: EMPTY
9544: ST_TO_ADDR
// if commander = 1 then
9545: LD_EXP 25
9549: PUSH
9550: LD_INT 1
9552: EQUAL
9553: IFFALSE 9578
// techs := [ tech_weap1 , tech_weap2 , tech_weap3 , tech_lasSight ] ;
9555: LD_ADDR_VAR 0 4
9559: PUSH
9560: LD_INT 51
9562: PUSH
9563: LD_INT 52
9565: PUSH
9566: LD_INT 53
9568: PUSH
9569: LD_INT 12
9571: PUSH
9572: EMPTY
9573: LIST
9574: LIST
9575: LIST
9576: LIST
9577: ST_TO_ADDR
// if commander = 2 then
9578: LD_EXP 25
9582: PUSH
9583: LD_INT 2
9585: EQUAL
9586: IFFALSE 9623
// techs := [ tech_tech1 , tech_oilEng , tech_oilPow , tech_solEng , tech_solPow , tech_opto1 , tech_radar ] ;
9588: LD_ADDR_VAR 0 4
9592: PUSH
9593: LD_INT 48
9595: PUSH
9596: LD_INT 47
9598: PUSH
9599: LD_INT 46
9601: PUSH
9602: LD_INT 45
9604: PUSH
9605: LD_INT 35
9607: PUSH
9608: LD_INT 60
9610: PUSH
9611: LD_INT 6
9613: PUSH
9614: EMPTY
9615: LIST
9616: LIST
9617: LIST
9618: LIST
9619: LIST
9620: LIST
9621: LIST
9622: ST_TO_ADDR
// if commander = 3 then
9623: LD_EXP 25
9627: PUSH
9628: LD_INT 3
9630: EQUAL
9631: IFFALSE 9680
// techs := [ tech_advAI , tech_advchassis , tech_ai , tech_comp1 , tech_comp2 , tech_oilEng , tech_oilPow , tech_weap1 , tech_gatling , tech_gun ] ;
9633: LD_ADDR_VAR 0 4
9637: PUSH
9638: LD_INT 27
9640: PUSH
9641: LD_INT 36
9643: PUSH
9644: LD_INT 32
9646: PUSH
9647: LD_INT 57
9649: PUSH
9650: LD_INT 58
9652: PUSH
9653: LD_INT 47
9655: PUSH
9656: LD_INT 46
9658: PUSH
9659: LD_INT 51
9661: PUSH
9662: LD_INT 69
9664: PUSH
9665: LD_INT 39
9667: PUSH
9668: EMPTY
9669: LIST
9670: LIST
9671: LIST
9672: LIST
9673: LIST
9674: LIST
9675: LIST
9676: LIST
9677: LIST
9678: LIST
9679: ST_TO_ADDR
// if techs then
9680: LD_VAR 0 4
9684: IFFALSE 9718
// for i in techs do
9686: LD_ADDR_VAR 0 2
9690: PUSH
9691: LD_VAR 0 4
9695: PUSH
9696: FOR_IN
9697: IFFALSE 9716
// SetTech ( i , 1 , state_researched ) ;
9699: LD_VAR 0 2
9703: PPUSH
9704: LD_INT 1
9706: PPUSH
9707: LD_INT 2
9709: PPUSH
9710: CALL_OW 322
9714: GO 9696
9716: POP
9717: POP
// hc_gallery := skirmish ;
9718: LD_ADDR_OWVAR 33
9722: PUSH
9723: LD_STRING skirmish
9725: ST_TO_ADDR
// hc_face_number := commander ;
9726: LD_ADDR_OWVAR 34
9730: PUSH
9731: LD_EXP 25
9735: ST_TO_ADDR
// hc_importance := 100 ;
9736: LD_ADDR_OWVAR 32
9740: PUSH
9741: LD_INT 100
9743: ST_TO_ADDR
// case commander of 1 :
9744: LD_EXP 25
9748: PUSH
9749: LD_INT 1
9751: DOUBLE
9752: EQUAL
9753: IFTRUE 9757
9755: GO 9781
9757: POP
// begin hc_name := Jeff Ironside ;
9758: LD_ADDR_OWVAR 26
9762: PUSH
9763: LD_STRING Jeff Ironside
9765: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 7 ) ;
9766: LD_INT 1
9768: PPUSH
9769: LD_INT 1
9771: PPUSH
9772: LD_INT 7
9774: PPUSH
9775: CALL_OW 380
// end ; 2 :
9779: GO 9846
9781: LD_INT 2
9783: DOUBLE
9784: EQUAL
9785: IFTRUE 9789
9787: GO 9813
9789: POP
// begin hc_name := Paul Johnson ;
9790: LD_ADDR_OWVAR 26
9794: PUSH
9795: LD_STRING Paul Johnson
9797: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 7 ) ;
9798: LD_INT 1
9800: PPUSH
9801: LD_INT 3
9803: PPUSH
9804: LD_INT 7
9806: PPUSH
9807: CALL_OW 380
// end ; 3 :
9811: GO 9846
9813: LD_INT 3
9815: DOUBLE
9816: EQUAL
9817: IFTRUE 9821
9819: GO 9845
9821: POP
// begin hc_name := Lisa Stuart ;
9822: LD_ADDR_OWVAR 26
9826: PUSH
9827: LD_STRING Lisa Stuart
9829: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , 7 ) ;
9830: LD_INT 2
9832: PPUSH
9833: LD_INT 4
9835: PPUSH
9836: LD_INT 7
9838: PPUSH
9839: CALL_OW 380
// end ; end ;
9843: GO 9846
9845: POP
// playerCommander := CreateHuman ;
9846: LD_ADDR_EXP 9
9850: PUSH
9851: CALL_OW 44
9855: ST_TO_ADDR
// hc_importance := 0 ;
9856: LD_ADDR_OWVAR 32
9860: PUSH
9861: LD_INT 0
9863: ST_TO_ADDR
// hc_gallery :=  ;
9864: LD_ADDR_OWVAR 33
9868: PUSH
9869: LD_STRING 
9871: ST_TO_ADDR
// result := Replace ( result , 2 , result [ 2 ] ^ playerCommander ) ;
9872: LD_ADDR_VAR 0 1
9876: PUSH
9877: LD_VAR 0 1
9881: PPUSH
9882: LD_INT 2
9884: PPUSH
9885: LD_VAR 0 1
9889: PUSH
9890: LD_INT 2
9892: ARRAY
9893: PUSH
9894: LD_EXP 9
9898: ADD
9899: PPUSH
9900: CALL_OW 1
9904: ST_TO_ADDR
// end ;
9905: LD_VAR 0 1
9909: RET
// export function PrepareReinforcements ; var i , peopleAmount , tmp , un , veh ; begin
9910: LD_INT 0
9912: PPUSH
9913: PPUSH
9914: PPUSH
9915: PPUSH
9916: PPUSH
9917: PPUSH
// uc_side := 1 ;
9918: LD_ADDR_OWVAR 20
9922: PUSH
9923: LD_INT 1
9925: ST_TO_ADDR
// uc_nation := 1 ;
9926: LD_ADDR_OWVAR 21
9930: PUSH
9931: LD_INT 1
9933: ST_TO_ADDR
// InitHc ;
9934: CALL_OW 19
// peopleAmount := [ 3 , 3 , 2 ] [ Difficulty ] ;
9938: LD_ADDR_VAR 0 3
9942: PUSH
9943: LD_INT 3
9945: PUSH
9946: LD_INT 3
9948: PUSH
9949: LD_INT 2
9951: PUSH
9952: EMPTY
9953: LIST
9954: LIST
9955: LIST
9956: PUSH
9957: LD_OWVAR 67
9961: ARRAY
9962: ST_TO_ADDR
// for i = 1 to peopleAmount do
9963: LD_ADDR_VAR 0 2
9967: PUSH
9968: DOUBLE
9969: LD_INT 1
9971: DEC
9972: ST_TO_ADDR
9973: LD_VAR 0 3
9977: PUSH
9978: FOR_TO
9979: IFFALSE 10028
// begin PrepareHuman ( false , 2 , [ 7 , 6 , 5 ] [ Difficulty ] ) ;
9981: LD_INT 0
9983: PPUSH
9984: LD_INT 2
9986: PPUSH
9987: LD_INT 7
9989: PUSH
9990: LD_INT 6
9992: PUSH
9993: LD_INT 5
9995: PUSH
9996: EMPTY
9997: LIST
9998: LIST
9999: LIST
10000: PUSH
10001: LD_OWVAR 67
10005: ARRAY
10006: PPUSH
10007: CALL_OW 380
// PlaceUnitInArea ( CreateHuman , startArea , false ) ;
10011: CALL_OW 44
10015: PPUSH
10016: LD_INT 19
10018: PPUSH
10019: LD_INT 0
10021: PPUSH
10022: CALL 55523 0 3
// end ;
10026: GO 9978
10028: POP
10029: POP
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_computer , us_crane , 58 ) ;
10030: LD_INT 2
10032: PPUSH
10033: LD_INT 1
10035: PPUSH
10036: LD_INT 3
10038: PPUSH
10039: LD_INT 13
10041: PPUSH
10042: LD_INT 58
10044: PPUSH
10045: CALL 24736 0 5
// PlaceUnitInArea ( CreateVehicle , startArea , false ) ;
10049: CALL_OW 45
10053: PPUSH
10054: LD_INT 19
10056: PPUSH
10057: LD_INT 0
10059: PPUSH
10060: CALL 55523 0 3
// if commander = 1 then
10064: LD_EXP 25
10068: PUSH
10069: LD_INT 1
10071: EQUAL
10072: IFFALSE 10083
// wait ( 6 6$00 ) else
10074: LD_INT 12600
10076: PPUSH
10077: CALL_OW 67
10081: GO 10090
// wait ( 8 8$00 ) ;
10083: LD_INT 16800
10085: PPUSH
10086: CALL_OW 67
// uc_side := 1 ;
10090: LD_ADDR_OWVAR 20
10094: PUSH
10095: LD_INT 1
10097: ST_TO_ADDR
// uc_nation := 1 ;
10098: LD_ADDR_OWVAR 21
10102: PUSH
10103: LD_INT 1
10105: ST_TO_ADDR
// InitVc ;
10106: CALL_OW 20
// InitHc ;
10110: CALL_OW 19
// for i = 1 to 5 do
10114: LD_ADDR_VAR 0 2
10118: PUSH
10119: DOUBLE
10120: LD_INT 1
10122: DEC
10123: ST_TO_ADDR
10124: LD_INT 5
10126: PUSH
10127: FOR_TO
10128: IFFALSE 10372
// begin PrepareVehicle ( [ us_heavy_tracked , us_medium_tracked , us_light_wheeled ] [ i mod 3 + 1 ] , engine_combustion , [ control_manual , control_computer , control_computer ] [ i mod 3 + 1 ] , [ us_heavy_gun , us_cargo_bay , us_radar ] [ i mod 3 + 1 ] , rand ( 40 , 55 ) ) ;
10130: LD_INT 4
10132: PUSH
10133: LD_INT 3
10135: PUSH
10136: LD_INT 1
10138: PUSH
10139: EMPTY
10140: LIST
10141: LIST
10142: LIST
10143: PUSH
10144: LD_VAR 0 2
10148: PUSH
10149: LD_INT 3
10151: MOD
10152: PUSH
10153: LD_INT 1
10155: PLUS
10156: ARRAY
10157: PPUSH
10158: LD_INT 1
10160: PPUSH
10161: LD_INT 1
10163: PUSH
10164: LD_INT 3
10166: PUSH
10167: LD_INT 3
10169: PUSH
10170: EMPTY
10171: LIST
10172: LIST
10173: LIST
10174: PUSH
10175: LD_VAR 0 2
10179: PUSH
10180: LD_INT 3
10182: MOD
10183: PUSH
10184: LD_INT 1
10186: PLUS
10187: ARRAY
10188: PPUSH
10189: LD_INT 6
10191: PUSH
10192: LD_INT 12
10194: PUSH
10195: LD_INT 11
10197: PUSH
10198: EMPTY
10199: LIST
10200: LIST
10201: LIST
10202: PUSH
10203: LD_VAR 0 2
10207: PUSH
10208: LD_INT 3
10210: MOD
10211: PUSH
10212: LD_INT 1
10214: PLUS
10215: ARRAY
10216: PPUSH
10217: LD_INT 40
10219: PPUSH
10220: LD_INT 55
10222: PPUSH
10223: CALL_OW 12
10227: PPUSH
10228: CALL 24736 0 5
// veh := CreateVehicle ;
10232: LD_ADDR_VAR 0 6
10236: PUSH
10237: CALL_OW 45
10241: ST_TO_ADDR
// PlaceUnitInArea ( veh , startArea , false ) ;
10242: LD_VAR 0 6
10246: PPUSH
10247: LD_INT 19
10249: PPUSH
10250: LD_INT 0
10252: PPUSH
10253: CALL 55523 0 3
// if GetWeapon ( veh ) = us_cargo_bay then
10257: LD_VAR 0 6
10261: PPUSH
10262: CALL_OW 264
10266: PUSH
10267: LD_INT 12
10269: EQUAL
10270: IFFALSE 10302
// begin AddCargo ( veh , mat_cans , 70 ) ;
10272: LD_VAR 0 6
10276: PPUSH
10277: LD_INT 1
10279: PPUSH
10280: LD_INT 70
10282: PPUSH
10283: CALL_OW 291
// AddCargo ( veh , mat_siberit , 30 ) ;
10287: LD_VAR 0 6
10291: PPUSH
10292: LD_INT 3
10294: PPUSH
10295: LD_INT 30
10297: PPUSH
10298: CALL_OW 291
// end ; if GetControl ( veh ) = control_manual then
10302: LD_VAR 0 6
10306: PPUSH
10307: CALL_OW 263
10311: PUSH
10312: LD_INT 1
10314: EQUAL
10315: IFFALSE 10370
// begin PrepareHuman ( sex_male , 3 , 6 ) ;
10317: LD_INT 1
10319: PPUSH
10320: LD_INT 3
10322: PPUSH
10323: LD_INT 6
10325: PPUSH
10326: CALL_OW 380
// un := CreateHuman ;
10330: LD_ADDR_VAR 0 5
10334: PUSH
10335: CALL_OW 44
10339: ST_TO_ADDR
// tmp := tmp ^ un ;
10340: LD_ADDR_VAR 0 4
10344: PUSH
10345: LD_VAR 0 4
10349: PUSH
10350: LD_VAR 0 5
10354: ADD
10355: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10356: LD_VAR 0 5
10360: PPUSH
10361: LD_VAR 0 6
10365: PPUSH
10366: CALL_OW 52
// end ; end ;
10370: GO 10127
10372: POP
10373: POP
// if tmp then
10374: LD_VAR 0 4
10378: IFFALSE 10442
// begin CenterNowOnUnits ( tmp ) ;
10380: LD_VAR 0 4
10384: PPUSH
10385: CALL_OW 87
// Say ( tmp [ 1 ] , DAR-1 ) ;
10389: LD_VAR 0 4
10393: PUSH
10394: LD_INT 1
10396: ARRAY
10397: PPUSH
10398: LD_STRING DAR-1
10400: PPUSH
10401: CALL_OW 88
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-DAR ) ;
10405: LD_EXP 9
10409: PPUSH
10410: LD_STRING D
10412: PUSH
10413: LD_STRING I
10415: PUSH
10416: LD_STRING J
10418: PUSH
10419: LD_STRING S
10421: PUSH
10422: EMPTY
10423: LIST
10424: LIST
10425: LIST
10426: PUSH
10427: LD_EXP 25
10431: ARRAY
10432: STR
10433: PUSH
10434: LD_STRING -1-DAR
10436: STR
10437: PPUSH
10438: CALL_OW 88
// end ; if not reinforceAllowed then
10442: LD_EXP 24
10446: NOT
10447: IFFALSE 10451
// exit ;
10449: GO 10605
// wait ( 25 25$00 ) ;
10451: LD_INT 52500
10453: PPUSH
10454: CALL_OW 67
// uc_side := 1 ;
10458: LD_ADDR_OWVAR 20
10462: PUSH
10463: LD_INT 1
10465: ST_TO_ADDR
// uc_nation := 1 ;
10466: LD_ADDR_OWVAR 21
10470: PUSH
10471: LD_INT 1
10473: ST_TO_ADDR
// InitVc ;
10474: CALL_OW 20
// InitHc ;
10478: CALL_OW 19
// for i = 1 to 4 do
10482: LD_ADDR_VAR 0 2
10486: PUSH
10487: DOUBLE
10488: LD_INT 1
10490: DEC
10491: ST_TO_ADDR
10492: LD_INT 4
10494: PUSH
10495: FOR_TO
10496: IFFALSE 10603
// begin PrepareVehicle ( us_morphling , engine_siberite , control_manual , us_heavy_gun , 1 ) ;
10498: LD_INT 5
10500: PPUSH
10501: LD_INT 3
10503: PPUSH
10504: LD_INT 1
10506: PPUSH
10507: LD_INT 6
10509: PPUSH
10510: LD_INT 1
10512: PPUSH
10513: CALL 24736 0 5
// veh := CreateVehicle ;
10517: LD_ADDR_VAR 0 6
10521: PUSH
10522: CALL_OW 45
10526: ST_TO_ADDR
// PlaceUnitInArea ( veh , startArea , false ) ;
10527: LD_VAR 0 6
10531: PPUSH
10532: LD_INT 19
10534: PPUSH
10535: LD_INT 0
10537: PPUSH
10538: CALL 55523 0 3
// if GetControl ( veh ) = control_manual then
10542: LD_VAR 0 6
10546: PPUSH
10547: CALL_OW 263
10551: PUSH
10552: LD_INT 1
10554: EQUAL
10555: IFFALSE 10601
// begin PrepareHuman ( false , 3 , [ 7 , 6 , 5 ] [ Difficulty ] ) ;
10557: LD_INT 0
10559: PPUSH
10560: LD_INT 3
10562: PPUSH
10563: LD_INT 7
10565: PUSH
10566: LD_INT 6
10568: PUSH
10569: LD_INT 5
10571: PUSH
10572: EMPTY
10573: LIST
10574: LIST
10575: LIST
10576: PUSH
10577: LD_OWVAR 67
10581: ARRAY
10582: PPUSH
10583: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
10587: CALL_OW 44
10591: PPUSH
10592: LD_VAR 0 6
10596: PPUSH
10597: CALL_OW 52
// end ; end ;
10601: GO 10495
10603: POP
10604: POP
// end ;
10605: LD_VAR 0 1
10609: RET
// export function PrepareLegionReinforcements ; var i , un , j , tmp ; begin
10610: LD_INT 0
10612: PPUSH
10613: PPUSH
10614: PPUSH
10615: PPUSH
10616: PPUSH
// uc_side := 8 ;
10617: LD_ADDR_OWVAR 20
10621: PUSH
10622: LD_INT 8
10624: ST_TO_ADDR
// uc_nation := nation_arabian ;
10625: LD_ADDR_OWVAR 21
10629: PUSH
10630: LD_INT 2
10632: ST_TO_ADDR
// for i = 1 to 2 do
10633: LD_ADDR_VAR 0 2
10637: PUSH
10638: DOUBLE
10639: LD_INT 1
10641: DEC
10642: ST_TO_ADDR
10643: LD_INT 2
10645: PUSH
10646: FOR_TO
10647: IFFALSE 10727
// for j = 1 to 4 do
10649: LD_ADDR_VAR 0 4
10653: PUSH
10654: DOUBLE
10655: LD_INT 1
10657: DEC
10658: ST_TO_ADDR
10659: LD_INT 4
10661: PUSH
10662: FOR_TO
10663: IFFALSE 10723
// begin PrepareHuman ( false , j , 8 ) ;
10665: LD_INT 0
10667: PPUSH
10668: LD_VAR 0 4
10672: PPUSH
10673: LD_INT 8
10675: PPUSH
10676: CALL_OW 380
// un := CreateHuman ;
10680: LD_ADDR_VAR 0 3
10684: PUSH
10685: CALL_OW 44
10689: ST_TO_ADDR
// PlaceUnitArea ( un , legionSpawn , false ) ;
10690: LD_VAR 0 3
10694: PPUSH
10695: LD_INT 23
10697: PPUSH
10698: LD_INT 0
10700: PPUSH
10701: CALL_OW 49
// tmp := tmp union un ;
10705: LD_ADDR_VAR 0 5
10709: PUSH
10710: LD_VAR 0 5
10714: PUSH
10715: LD_VAR 0 3
10719: UNION
10720: ST_TO_ADDR
// end ;
10721: GO 10662
10723: POP
10724: POP
10725: GO 10646
10727: POP
10728: POP
// for i in tmp do
10729: LD_ADDR_VAR 0 2
10733: PUSH
10734: LD_VAR 0 5
10738: PUSH
10739: FOR_IN
10740: IFFALSE 10759
// ComMoveXY ( i , 150 , 136 ) ;
10742: LD_VAR 0 2
10746: PPUSH
10747: LD_INT 150
10749: PPUSH
10750: LD_INT 136
10752: PPUSH
10753: CALL_OW 111
10757: GO 10739
10759: POP
10760: POP
// mc_bases := Replace ( mc_bases , mc_leg , mc_bases [ mc_leg ] union tmp ) ;
10761: LD_ADDR_EXP 50
10765: PUSH
10766: LD_EXP 50
10770: PPUSH
10771: LD_EXP 6
10775: PPUSH
10776: LD_EXP 50
10780: PUSH
10781: LD_EXP 6
10785: ARRAY
10786: PUSH
10787: LD_VAR 0 5
10791: UNION
10792: PPUSH
10793: CALL_OW 1
10797: ST_TO_ADDR
// end ;
10798: LD_VAR 0 1
10802: RET
// every 0 0$10 trigger Difficulty > 1 and GetTech ( tech_lapser , 3 ) = state_researched do
10803: LD_OWVAR 67
10807: PUSH
10808: LD_INT 1
10810: GREATER
10811: PUSH
10812: LD_INT 31
10814: PPUSH
10815: LD_INT 3
10817: PPUSH
10818: CALL_OW 321
10822: PUSH
10823: LD_INT 2
10825: EQUAL
10826: AND
10827: IFFALSE 11044
10829: GO 10831
10831: DISABLE
// begin MC_InsertBuildingList ( mc_rus_1 , [ [ b_turret , 101 , 159 , 5 ] , [ b_turret , 105 , 158 , 5 ] , [ b_turret , 96 , 136 , 5 ] , [ b_turret , 94 , 133 , 4 ] , [ b_turret , 84 , 102 , 4 ] ] ) ;
10832: LD_EXP 7
10836: PPUSH
10837: LD_INT 33
10839: PUSH
10840: LD_INT 101
10842: PUSH
10843: LD_INT 159
10845: PUSH
10846: LD_INT 5
10848: PUSH
10849: EMPTY
10850: LIST
10851: LIST
10852: LIST
10853: LIST
10854: PUSH
10855: LD_INT 33
10857: PUSH
10858: LD_INT 105
10860: PUSH
10861: LD_INT 158
10863: PUSH
10864: LD_INT 5
10866: PUSH
10867: EMPTY
10868: LIST
10869: LIST
10870: LIST
10871: LIST
10872: PUSH
10873: LD_INT 33
10875: PUSH
10876: LD_INT 96
10878: PUSH
10879: LD_INT 136
10881: PUSH
10882: LD_INT 5
10884: PUSH
10885: EMPTY
10886: LIST
10887: LIST
10888: LIST
10889: LIST
10890: PUSH
10891: LD_INT 33
10893: PUSH
10894: LD_INT 94
10896: PUSH
10897: LD_INT 133
10899: PUSH
10900: LD_INT 4
10902: PUSH
10903: EMPTY
10904: LIST
10905: LIST
10906: LIST
10907: LIST
10908: PUSH
10909: LD_INT 33
10911: PUSH
10912: LD_INT 84
10914: PUSH
10915: LD_INT 102
10917: PUSH
10918: LD_INT 4
10920: PUSH
10921: EMPTY
10922: LIST
10923: LIST
10924: LIST
10925: LIST
10926: PUSH
10927: EMPTY
10928: LIST
10929: LIST
10930: LIST
10931: LIST
10932: LIST
10933: PPUSH
10934: CALL 82879 0 2
// MC_InsertBuildingList ( mc_rus_2 , [ [ b_turret , 50 , 17 , 4 ] , [ b_turret , 52 , 20 , 4 ] , [ b_turret , 53 , 23 , 4 ] , [ b_turret , 45 , 32 , 4 ] , [ b_turret , 45 , 39 , 4 ] ] ) ;
10938: LD_EXP 8
10942: PPUSH
10943: LD_INT 33
10945: PUSH
10946: LD_INT 50
10948: PUSH
10949: LD_INT 17
10951: PUSH
10952: LD_INT 4
10954: PUSH
10955: EMPTY
10956: LIST
10957: LIST
10958: LIST
10959: LIST
10960: PUSH
10961: LD_INT 33
10963: PUSH
10964: LD_INT 52
10966: PUSH
10967: LD_INT 20
10969: PUSH
10970: LD_INT 4
10972: PUSH
10973: EMPTY
10974: LIST
10975: LIST
10976: LIST
10977: LIST
10978: PUSH
10979: LD_INT 33
10981: PUSH
10982: LD_INT 53
10984: PUSH
10985: LD_INT 23
10987: PUSH
10988: LD_INT 4
10990: PUSH
10991: EMPTY
10992: LIST
10993: LIST
10994: LIST
10995: LIST
10996: PUSH
10997: LD_INT 33
10999: PUSH
11000: LD_INT 45
11002: PUSH
11003: LD_INT 32
11005: PUSH
11006: LD_INT 4
11008: PUSH
11009: EMPTY
11010: LIST
11011: LIST
11012: LIST
11013: LIST
11014: PUSH
11015: LD_INT 33
11017: PUSH
11018: LD_INT 45
11020: PUSH
11021: LD_INT 39
11023: PUSH
11024: LD_INT 4
11026: PUSH
11027: EMPTY
11028: LIST
11029: LIST
11030: LIST
11031: LIST
11032: PUSH
11033: EMPTY
11034: LIST
11035: LIST
11036: LIST
11037: LIST
11038: LIST
11039: PPUSH
11040: CALL 82879 0 2
// end ;
11044: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_not , [ f_side , your_side ] ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) do var i , tmp ;
11045: LD_INT 3
11047: PUSH
11048: LD_INT 22
11050: PUSH
11051: LD_OWVAR 2
11055: PUSH
11056: EMPTY
11057: LIST
11058: LIST
11059: PUSH
11060: EMPTY
11061: LIST
11062: LIST
11063: PUSH
11064: LD_INT 33
11066: PUSH
11067: LD_INT 2
11069: PUSH
11070: EMPTY
11071: LIST
11072: LIST
11073: PUSH
11074: LD_INT 50
11076: PUSH
11077: EMPTY
11078: LIST
11079: PUSH
11080: LD_INT 3
11082: PUSH
11083: LD_INT 61
11085: PUSH
11086: EMPTY
11087: LIST
11088: PUSH
11089: EMPTY
11090: LIST
11091: LIST
11092: PUSH
11093: EMPTY
11094: LIST
11095: LIST
11096: LIST
11097: LIST
11098: PPUSH
11099: CALL_OW 69
11103: IFFALSE 11203
11105: GO 11107
11107: DISABLE
11108: LD_INT 0
11110: PPUSH
11111: PPUSH
// begin enable ;
11112: ENABLE
// tmp := FilterAllUnits ( [ [ f_not , [ f_side , your_side ] ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) ;
11113: LD_ADDR_VAR 0 2
11117: PUSH
11118: LD_INT 3
11120: PUSH
11121: LD_INT 22
11123: PUSH
11124: LD_OWVAR 2
11128: PUSH
11129: EMPTY
11130: LIST
11131: LIST
11132: PUSH
11133: EMPTY
11134: LIST
11135: LIST
11136: PUSH
11137: LD_INT 33
11139: PUSH
11140: LD_INT 2
11142: PUSH
11143: EMPTY
11144: LIST
11145: LIST
11146: PUSH
11147: LD_INT 50
11149: PUSH
11150: EMPTY
11151: LIST
11152: PUSH
11153: LD_INT 3
11155: PUSH
11156: LD_INT 61
11158: PUSH
11159: EMPTY
11160: LIST
11161: PUSH
11162: EMPTY
11163: LIST
11164: LIST
11165: PUSH
11166: EMPTY
11167: LIST
11168: LIST
11169: LIST
11170: LIST
11171: PPUSH
11172: CALL_OW 69
11176: ST_TO_ADDR
// for i in tmp do
11177: LD_ADDR_VAR 0 1
11181: PUSH
11182: LD_VAR 0 2
11186: PUSH
11187: FOR_IN
11188: IFFALSE 11201
// Connect ( i ) ;
11190: LD_VAR 0 1
11194: PPUSH
11195: CALL 27829 0 1
11199: GO 11187
11201: POP
11202: POP
// end ; end_of_file
11203: PPOPN 2
11205: END
// export function Action ; var i , tmp ; begin
11206: LD_INT 0
11208: PPUSH
11209: PPUSH
11210: PPUSH
// InGameOn ;
11211: CALL_OW 8
// CenterNowOnXY ( 225 , 217 ) ;
11215: LD_INT 225
11217: PPUSH
11218: LD_INT 217
11220: PPUSH
11221: CALL_OW 86
// for i in playerForces [ 2 ] do
11225: LD_ADDR_VAR 0 2
11229: PUSH
11230: LD_EXP 10
11234: PUSH
11235: LD_INT 2
11237: ARRAY
11238: PUSH
11239: FOR_IN
11240: IFFALSE 11373
// begin if playerForces [ 1 ] and GetClass ( i ) in [ 3 , 4 ] then
11242: LD_EXP 10
11246: PUSH
11247: LD_INT 1
11249: ARRAY
11250: PUSH
11251: LD_VAR 0 2
11255: PPUSH
11256: CALL_OW 257
11260: PUSH
11261: LD_INT 3
11263: PUSH
11264: LD_INT 4
11266: PUSH
11267: EMPTY
11268: LIST
11269: LIST
11270: IN
11271: AND
11272: IFFALSE 11356
// begin PlaceUnitInArea ( playerForces [ 1 ] [ 1 ] , startArea , false ) ;
11274: LD_EXP 10
11278: PUSH
11279: LD_INT 1
11281: ARRAY
11282: PUSH
11283: LD_INT 1
11285: ARRAY
11286: PPUSH
11287: LD_INT 19
11289: PPUSH
11290: LD_INT 0
11292: PPUSH
11293: CALL 55523 0 3
// PlaceHumanInUnit ( i , playerForces [ 1 ] [ 1 ] ) ;
11297: LD_VAR 0 2
11301: PPUSH
11302: LD_EXP 10
11306: PUSH
11307: LD_INT 1
11309: ARRAY
11310: PUSH
11311: LD_INT 1
11313: ARRAY
11314: PPUSH
11315: CALL_OW 52
// playerForces := Replace ( playerForces , 1 , Delete ( playerForces [ 1 ] , 1 ) ) ;
11319: LD_ADDR_EXP 10
11323: PUSH
11324: LD_EXP 10
11328: PPUSH
11329: LD_INT 1
11331: PPUSH
11332: LD_EXP 10
11336: PUSH
11337: LD_INT 1
11339: ARRAY
11340: PPUSH
11341: LD_INT 1
11343: PPUSH
11344: CALL_OW 3
11348: PPUSH
11349: CALL_OW 1
11353: ST_TO_ADDR
// end else
11354: GO 11371
// PlaceUnitInArea ( i , startArea , false ) ;
11356: LD_VAR 0 2
11360: PPUSH
11361: LD_INT 19
11363: PPUSH
11364: LD_INT 0
11366: PPUSH
11367: CALL 55523 0 3
// end ;
11371: GO 11239
11373: POP
11374: POP
// wait ( 0 0$2 ) ;
11375: LD_INT 70
11377: PPUSH
11378: CALL_OW 67
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1 ) ;
11382: LD_EXP 9
11386: PPUSH
11387: LD_STRING D
11389: PUSH
11390: LD_STRING I
11392: PUSH
11393: LD_STRING J
11395: PUSH
11396: LD_STRING S
11398: PUSH
11399: EMPTY
11400: LIST
11401: LIST
11402: LIST
11403: PUSH
11404: LD_EXP 25
11408: ARRAY
11409: STR
11410: PUSH
11411: LD_STRING -1
11413: STR
11414: PPUSH
11415: CALL_OW 88
// SayRadio ( Powell , DP-1 ) ;
11419: LD_EXP 12
11423: PPUSH
11424: LD_STRING DP-1
11426: PPUSH
11427: CALL_OW 94
// SayRadio ( Powell , DP-2 ) ;
11431: LD_EXP 12
11435: PPUSH
11436: LD_STRING DP-2
11438: PPUSH
11439: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -2 ) ;
11443: LD_EXP 9
11447: PPUSH
11448: LD_STRING D
11450: PUSH
11451: LD_STRING I
11453: PUSH
11454: LD_STRING J
11456: PUSH
11457: LD_STRING S
11459: PUSH
11460: EMPTY
11461: LIST
11462: LIST
11463: LIST
11464: PUSH
11465: LD_EXP 25
11469: ARRAY
11470: STR
11471: PUSH
11472: LD_STRING -2
11474: STR
11475: PPUSH
11476: CALL_OW 88
// InGameOff ;
11480: CALL_OW 9
// ChangeMissionObjectives ( O1 ) ;
11484: LD_STRING O1
11486: PPUSH
11487: CALL_OW 337
// game := true ;
11491: LD_ADDR_EXP 3
11495: PUSH
11496: LD_INT 1
11498: ST_TO_ADDR
// SaveForQuickRestart ;
11499: CALL_OW 22
// wait ( 0 0$5 ) ;
11503: LD_INT 175
11505: PPUSH
11506: CALL_OW 67
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -3 ) ;
11510: LD_EXP 9
11514: PPUSH
11515: LD_STRING D
11517: PUSH
11518: LD_STRING I
11520: PUSH
11521: LD_STRING J
11523: PUSH
11524: LD_STRING S
11526: PUSH
11527: EMPTY
11528: LIST
11529: LIST
11530: LIST
11531: PUSH
11532: LD_EXP 25
11536: ARRAY
11537: STR
11538: PUSH
11539: LD_STRING -3
11541: STR
11542: PPUSH
11543: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
11547: LD_INT 35
11549: PPUSH
11550: CALL_OW 67
// until ruEscape [ 1 ] >= ruEscape [ 2 ] ;
11554: LD_EXP 15
11558: PUSH
11559: LD_INT 1
11561: ARRAY
11562: PUSH
11563: LD_EXP 15
11567: PUSH
11568: LD_INT 2
11570: ARRAY
11571: GREATEREQUAL
11572: IFFALSE 11547
// outpostEscape := true ;
11574: LD_ADDR_EXP 27
11578: PUSH
11579: LD_INT 1
11581: ST_TO_ADDR
// tmp := UnitFilter ( ruOutpost , [ f_sex , sex_male ] ) ;
11582: LD_ADDR_VAR 0 3
11586: PUSH
11587: LD_EXP 14
11591: PPUSH
11592: LD_INT 26
11594: PUSH
11595: LD_INT 1
11597: PUSH
11598: EMPTY
11599: LIST
11600: LIST
11601: PPUSH
11602: CALL_OW 72
11606: ST_TO_ADDR
// if tmp then
11607: LD_VAR 0 3
11611: IFFALSE 11629
// Say ( tmp [ 1 ] , DR-1-Escape ) ;
11613: LD_VAR 0 3
11617: PUSH
11618: LD_INT 1
11620: ARRAY
11621: PPUSH
11622: LD_STRING DR-1-Escape
11624: PPUSH
11625: CALL_OW 88
// wait ( 0 0$1 ) ;
11629: LD_INT 35
11631: PPUSH
11632: CALL_OW 67
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Escape ) ;
11636: LD_EXP 9
11640: PPUSH
11641: LD_STRING D
11643: PUSH
11644: LD_STRING I
11646: PUSH
11647: LD_STRING J
11649: PUSH
11650: LD_STRING S
11652: PUSH
11653: EMPTY
11654: LIST
11655: LIST
11656: LIST
11657: PUSH
11658: LD_EXP 25
11662: ARRAY
11663: STR
11664: PUSH
11665: LD_STRING -1-Escape
11667: STR
11668: PPUSH
11669: CALL_OW 88
// for i in ruOutpost do
11673: LD_ADDR_VAR 0 2
11677: PUSH
11678: LD_EXP 14
11682: PUSH
11683: FOR_IN
11684: IFFALSE 11738
// begin if IsInUnit ( i ) then
11686: LD_VAR 0 2
11690: PPUSH
11691: CALL_OW 310
11695: IFFALSE 11706
// ComExitBuilding ( i ) ;
11697: LD_VAR 0 2
11701: PPUSH
11702: CALL_OW 122
// AddComMoveXY ( i , 179 , 102 ) ;
11706: LD_VAR 0 2
11710: PPUSH
11711: LD_INT 179
11713: PPUSH
11714: LD_INT 102
11716: PPUSH
11717: CALL_OW 171
// AddComMoveXY ( i , 28 , 20 ) ;
11721: LD_VAR 0 2
11725: PPUSH
11726: LD_INT 28
11728: PPUSH
11729: LD_INT 20
11731: PPUSH
11732: CALL_OW 171
// end ;
11736: GO 11683
11738: POP
11739: POP
// tmp := [ ] ;
11740: LD_ADDR_VAR 0 3
11744: PUSH
11745: EMPTY
11746: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11747: LD_INT 35
11749: PPUSH
11750: CALL_OW 67
// tmp := UnitFilter ( ruOutpost , [ f_inarea , rus2Base ] ) ;
11754: LD_ADDR_VAR 0 3
11758: PUSH
11759: LD_EXP 14
11763: PPUSH
11764: LD_INT 95
11766: PUSH
11767: LD_INT 11
11769: PUSH
11770: EMPTY
11771: LIST
11772: LIST
11773: PPUSH
11774: CALL_OW 72
11778: ST_TO_ADDR
// if tmp then
11779: LD_VAR 0 3
11783: IFFALSE 11862
// for i in tmp do
11785: LD_ADDR_VAR 0 2
11789: PUSH
11790: LD_VAR 0 3
11794: PUSH
11795: FOR_IN
11796: IFFALSE 11860
// begin ruOutpost := ruOutpost diff i ;
11798: LD_ADDR_EXP 14
11802: PUSH
11803: LD_EXP 14
11807: PUSH
11808: LD_VAR 0 2
11812: DIFF
11813: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ mc_rus_2 , mc_bases [ mc_rus_2 ] + 1 ] , i ) ;
11814: LD_ADDR_EXP 50
11818: PUSH
11819: LD_EXP 50
11823: PPUSH
11824: LD_EXP 8
11828: PUSH
11829: LD_EXP 50
11833: PUSH
11834: LD_EXP 8
11838: ARRAY
11839: PUSH
11840: LD_INT 1
11842: PLUS
11843: PUSH
11844: EMPTY
11845: LIST
11846: LIST
11847: PPUSH
11848: LD_VAR 0 2
11852: PPUSH
11853: CALL 24858 0 3
11857: ST_TO_ADDR
// end ;
11858: GO 11795
11860: POP
11861: POP
// until not UnitFilter ( ruOutpost , [ f_type , unit_human ] ) ;
11862: LD_EXP 14
11866: PPUSH
11867: LD_INT 21
11869: PUSH
11870: LD_INT 1
11872: PUSH
11873: EMPTY
11874: LIST
11875: LIST
11876: PPUSH
11877: CALL_OW 72
11881: NOT
11882: IFFALSE 11747
// ruOutpost := [ ] ;
11884: LD_ADDR_EXP 14
11888: PUSH
11889: EMPTY
11890: ST_TO_ADDR
// end ;
11891: LD_VAR 0 1
11895: RET
// every 0 0$1 trigger outpostEscape do var i , tmp ;
11896: LD_EXP 27
11900: IFFALSE 12089
11902: GO 11904
11904: DISABLE
11905: LD_INT 0
11907: PPUSH
11908: PPUSH
// begin wait ( rand ( 0 0$25 , 0 0$35 ) ) ;
11909: LD_INT 875
11911: PPUSH
11912: LD_INT 1225
11914: PPUSH
11915: CALL_OW 12
11919: PPUSH
11920: CALL_OW 67
// tmp := [ [ 208 , 166 ] , [ 218 , 174 ] , [ 201 , 173 ] , [ 189 , 167 ] , [ 191 , 160 ] , [ 209 , 181 ] , [ 192 , 162 ] , [ 197 , 166 ] ] ;
11924: LD_ADDR_VAR 0 2
11928: PUSH
11929: LD_INT 208
11931: PUSH
11932: LD_INT 166
11934: PUSH
11935: EMPTY
11936: LIST
11937: LIST
11938: PUSH
11939: LD_INT 218
11941: PUSH
11942: LD_INT 174
11944: PUSH
11945: EMPTY
11946: LIST
11947: LIST
11948: PUSH
11949: LD_INT 201
11951: PUSH
11952: LD_INT 173
11954: PUSH
11955: EMPTY
11956: LIST
11957: LIST
11958: PUSH
11959: LD_INT 189
11961: PUSH
11962: LD_INT 167
11964: PUSH
11965: EMPTY
11966: LIST
11967: LIST
11968: PUSH
11969: LD_INT 191
11971: PUSH
11972: LD_INT 160
11974: PUSH
11975: EMPTY
11976: LIST
11977: LIST
11978: PUSH
11979: LD_INT 209
11981: PUSH
11982: LD_INT 181
11984: PUSH
11985: EMPTY
11986: LIST
11987: LIST
11988: PUSH
11989: LD_INT 192
11991: PUSH
11992: LD_INT 162
11994: PUSH
11995: EMPTY
11996: LIST
11997: LIST
11998: PUSH
11999: LD_INT 197
12001: PUSH
12002: LD_INT 166
12004: PUSH
12005: EMPTY
12006: LIST
12007: LIST
12008: PUSH
12009: EMPTY
12010: LIST
12011: LIST
12012: LIST
12013: LIST
12014: LIST
12015: LIST
12016: LIST
12017: LIST
12018: ST_TO_ADDR
// for i = 1 to 5 + Difficulty do
12019: LD_ADDR_VAR 0 1
12023: PUSH
12024: DOUBLE
12025: LD_INT 1
12027: DEC
12028: ST_TO_ADDR
12029: LD_INT 5
12031: PUSH
12032: LD_OWVAR 67
12036: PLUS
12037: PUSH
12038: FOR_TO
12039: IFFALSE 12087
// begin MineExplosion ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , 1 ) ;
12041: LD_VAR 0 2
12045: PUSH
12046: LD_VAR 0 1
12050: ARRAY
12051: PUSH
12052: LD_INT 1
12054: ARRAY
12055: PPUSH
12056: LD_VAR 0 2
12060: PUSH
12061: LD_VAR 0 1
12065: ARRAY
12066: PUSH
12067: LD_INT 2
12069: ARRAY
12070: PPUSH
12071: LD_INT 1
12073: PPUSH
12074: CALL_OW 453
// wait ( 0 0$0.8 ) ;
12078: LD_INT 28
12080: PPUSH
12081: CALL_OW 67
// end ;
12085: GO 12038
12087: POP
12088: POP
// end ;
12089: PPOPN 2
12091: END
// every 0 0$3 trigger not outpostEscape do var tmp , engs , buildings , empty , i , j , k ;
12092: LD_EXP 27
12096: NOT
12097: IFFALSE 12751
12099: GO 12101
12101: DISABLE
12102: LD_INT 0
12104: PPUSH
12105: PPUSH
12106: PPUSH
12107: PPUSH
12108: PPUSH
12109: PPUSH
12110: PPUSH
// begin enable ;
12111: ENABLE
// tmp := UnitFilter ( ruOutpost , [ [ f_side , 3 ] , [ f_class , 1 ] ] ) ;
12112: LD_ADDR_VAR 0 1
12116: PUSH
12117: LD_EXP 14
12121: PPUSH
12122: LD_INT 22
12124: PUSH
12125: LD_INT 3
12127: PUSH
12128: EMPTY
12129: LIST
12130: LIST
12131: PUSH
12132: LD_INT 25
12134: PUSH
12135: LD_INT 1
12137: PUSH
12138: EMPTY
12139: LIST
12140: LIST
12141: PUSH
12142: EMPTY
12143: LIST
12144: LIST
12145: PPUSH
12146: CALL_OW 72
12150: ST_TO_ADDR
// engs := UnitFilter ( ruOutpost , [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
12151: LD_ADDR_VAR 0 2
12155: PUSH
12156: LD_EXP 14
12160: PPUSH
12161: LD_INT 22
12163: PUSH
12164: LD_INT 3
12166: PUSH
12167: EMPTY
12168: LIST
12169: LIST
12170: PUSH
12171: LD_INT 25
12173: PUSH
12174: LD_INT 2
12176: PUSH
12177: EMPTY
12178: LIST
12179: LIST
12180: PUSH
12181: EMPTY
12182: LIST
12183: LIST
12184: PPUSH
12185: CALL_OW 72
12189: ST_TO_ADDR
// buildings := UnitFilter ( ruOutpost , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
12190: LD_ADDR_VAR 0 3
12194: PUSH
12195: LD_EXP 14
12199: PPUSH
12200: LD_INT 22
12202: PUSH
12203: LD_INT 3
12205: PUSH
12206: EMPTY
12207: LIST
12208: LIST
12209: PUSH
12210: LD_INT 21
12212: PUSH
12213: LD_INT 3
12215: PUSH
12216: EMPTY
12217: LIST
12218: LIST
12219: PUSH
12220: LD_INT 3
12222: PUSH
12223: LD_INT 24
12225: PUSH
12226: LD_INT 1000
12228: PUSH
12229: EMPTY
12230: LIST
12231: LIST
12232: PUSH
12233: EMPTY
12234: LIST
12235: LIST
12236: PUSH
12237: EMPTY
12238: LIST
12239: LIST
12240: LIST
12241: PPUSH
12242: CALL_OW 72
12246: ST_TO_ADDR
// if engs and buildings then
12247: LD_VAR 0 2
12251: PUSH
12252: LD_VAR 0 3
12256: AND
12257: IFFALSE 12330
// begin for i in engs do
12259: LD_ADDR_VAR 0 5
12263: PUSH
12264: LD_VAR 0 2
12268: PUSH
12269: FOR_IN
12270: IFFALSE 12326
// if IsInUnit ( i ) then
12272: LD_VAR 0 5
12276: PPUSH
12277: CALL_OW 310
12281: IFFALSE 12294
// ComExitBuilding ( i ) else
12283: LD_VAR 0 5
12287: PPUSH
12288: CALL_OW 122
12292: GO 12324
// if not HasTask ( i ) then
12294: LD_VAR 0 5
12298: PPUSH
12299: CALL_OW 314
12303: NOT
12304: IFFALSE 12324
// ComRepairBuilding ( i , buildings [ 1 ] ) ;
12306: LD_VAR 0 5
12310: PPUSH
12311: LD_VAR 0 3
12315: PUSH
12316: LD_INT 1
12318: ARRAY
12319: PPUSH
12320: CALL_OW 130
12324: GO 12269
12326: POP
12327: POP
// end else
12328: GO 12433
// if not buildings and UnitFilter ( ruOutpost , [ f_btype , b_depot ] ) and UnitFilter ( engs , [ f_not , [ f_inside ] ] ) then
12330: LD_VAR 0 3
12334: NOT
12335: PUSH
12336: LD_EXP 14
12340: PPUSH
12341: LD_INT 30
12343: PUSH
12344: LD_INT 0
12346: PUSH
12347: EMPTY
12348: LIST
12349: LIST
12350: PPUSH
12351: CALL_OW 72
12355: AND
12356: PUSH
12357: LD_VAR 0 2
12361: PPUSH
12362: LD_INT 3
12364: PUSH
12365: LD_INT 54
12367: PUSH
12368: EMPTY
12369: LIST
12370: PUSH
12371: EMPTY
12372: LIST
12373: LIST
12374: PPUSH
12375: CALL_OW 72
12379: AND
12380: IFFALSE 12433
// ComEnterUnit ( UnitFilter ( engs , [ f_not , [ f_inside ] ] ) , UnitFilter ( ruOutpost , [ f_btype , b_depot ] ) [ 1 ] ) ;
12382: LD_VAR 0 2
12386: PPUSH
12387: LD_INT 3
12389: PUSH
12390: LD_INT 54
12392: PUSH
12393: EMPTY
12394: LIST
12395: PUSH
12396: EMPTY
12397: LIST
12398: LIST
12399: PPUSH
12400: CALL_OW 72
12404: PPUSH
12405: LD_EXP 14
12409: PPUSH
12410: LD_INT 30
12412: PUSH
12413: LD_INT 0
12415: PUSH
12416: EMPTY
12417: LIST
12418: LIST
12419: PPUSH
12420: CALL_OW 72
12424: PUSH
12425: LD_INT 1
12427: ARRAY
12428: PPUSH
12429: CALL_OW 120
// if not tmp then
12433: LD_VAR 0 1
12437: NOT
12438: IFFALSE 12442
// exit ;
12440: GO 12751
// if FilterUnitsInArea ( ruOutpostCenterArea , [ f_enemy , 3 ] ) > 1 then
12442: LD_INT 26
12444: PPUSH
12445: LD_INT 81
12447: PUSH
12448: LD_INT 3
12450: PUSH
12451: EMPTY
12452: LIST
12453: LIST
12454: PPUSH
12455: CALL_OW 70
12459: PUSH
12460: LD_INT 1
12462: GREATER
12463: IFFALSE 12519
// begin for i in tmp do
12465: LD_ADDR_VAR 0 5
12469: PUSH
12470: LD_VAR 0 1
12474: PUSH
12475: FOR_IN
12476: IFFALSE 12515
// begin if IsInUnit ( i ) then
12478: LD_VAR 0 5
12482: PPUSH
12483: CALL_OW 310
12487: IFFALSE 12498
// ComExitBuilding ( i ) ;
12489: LD_VAR 0 5
12493: PPUSH
12494: CALL_OW 122
// AddComAgressiveMove ( i , 204 , 164 ) ;
12498: LD_VAR 0 5
12502: PPUSH
12503: LD_INT 204
12505: PPUSH
12506: LD_INT 164
12508: PPUSH
12509: CALL_OW 174
// end ;
12513: GO 12475
12515: POP
12516: POP
// end else
12517: GO 12751
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
12519: LD_VAR 0 1
12523: PPUSH
12524: LD_INT 3
12526: PUSH
12527: LD_INT 54
12529: PUSH
12530: EMPTY
12531: LIST
12532: PUSH
12533: EMPTY
12534: LIST
12535: LIST
12536: PPUSH
12537: CALL_OW 72
12541: IFFALSE 12751
// begin empty := UnitFilter ( ruOutpost , [ [ f_btype , b_bunker ] , [ f_empty ] ] ) ;
12543: LD_ADDR_VAR 0 4
12547: PUSH
12548: LD_EXP 14
12552: PPUSH
12553: LD_INT 30
12555: PUSH
12556: LD_INT 32
12558: PUSH
12559: EMPTY
12560: LIST
12561: LIST
12562: PUSH
12563: LD_INT 58
12565: PUSH
12566: EMPTY
12567: LIST
12568: PUSH
12569: EMPTY
12570: LIST
12571: LIST
12572: PPUSH
12573: CALL_OW 72
12577: ST_TO_ADDR
// if not empty and UnitFilter ( ruOutpost , [ f_btype , b_barracks ] ) then
12578: LD_VAR 0 4
12582: NOT
12583: PUSH
12584: LD_EXP 14
12588: PPUSH
12589: LD_INT 30
12591: PUSH
12592: LD_INT 5
12594: PUSH
12595: EMPTY
12596: LIST
12597: LIST
12598: PPUSH
12599: CALL_OW 72
12603: AND
12604: IFFALSE 12641
// begin ComEnterUnit ( tmp , UnitFilter ( ruOutpost , [ f_btype , b_barracks ] ) [ 1 ] ) ;
12606: LD_VAR 0 1
12610: PPUSH
12611: LD_EXP 14
12615: PPUSH
12616: LD_INT 30
12618: PUSH
12619: LD_INT 5
12621: PUSH
12622: EMPTY
12623: LIST
12624: LIST
12625: PPUSH
12626: CALL_OW 72
12630: PUSH
12631: LD_INT 1
12633: ARRAY
12634: PPUSH
12635: CALL_OW 120
// exit ;
12639: GO 12751
// end ; j := UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) ;
12641: LD_ADDR_VAR 0 6
12645: PUSH
12646: LD_VAR 0 1
12650: PPUSH
12651: LD_INT 3
12653: PUSH
12654: LD_INT 54
12656: PUSH
12657: EMPTY
12658: LIST
12659: PUSH
12660: EMPTY
12661: LIST
12662: LIST
12663: PPUSH
12664: CALL_OW 72
12668: ST_TO_ADDR
// if j < empty then
12669: LD_VAR 0 6
12673: PUSH
12674: LD_VAR 0 4
12678: LESS
12679: IFFALSE 12693
// k := j else
12681: LD_ADDR_VAR 0 7
12685: PUSH
12686: LD_VAR 0 6
12690: ST_TO_ADDR
12691: GO 12703
// k := empty ;
12693: LD_ADDR_VAR 0 7
12697: PUSH
12698: LD_VAR 0 4
12702: ST_TO_ADDR
// for i = 1 to k do
12703: LD_ADDR_VAR 0 5
12707: PUSH
12708: DOUBLE
12709: LD_INT 1
12711: DEC
12712: ST_TO_ADDR
12713: LD_VAR 0 7
12717: PUSH
12718: FOR_TO
12719: IFFALSE 12749
// ComEnterUnit ( j [ i ] , empty [ i ] ) ;
12721: LD_VAR 0 6
12725: PUSH
12726: LD_VAR 0 5
12730: ARRAY
12731: PPUSH
12732: LD_VAR 0 4
12736: PUSH
12737: LD_VAR 0 5
12741: ARRAY
12742: PPUSH
12743: CALL_OW 120
12747: GO 12718
12749: POP
12750: POP
// end ; end ;
12751: PPOPN 7
12753: END
// every 0 0$2 trigger GameType = 1 and outpostEscape and FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , 208 , 163 , 8 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_distxy , 208 , 163 , 14 ] ] ) do var i ;
12754: LD_EXP 2
12758: PUSH
12759: LD_INT 1
12761: EQUAL
12762: PUSH
12763: LD_EXP 27
12767: AND
12768: PUSH
12769: LD_INT 22
12771: PUSH
12772: LD_INT 1
12774: PUSH
12775: EMPTY
12776: LIST
12777: LIST
12778: PUSH
12779: LD_INT 92
12781: PUSH
12782: LD_INT 208
12784: PUSH
12785: LD_INT 163
12787: PUSH
12788: LD_INT 8
12790: PUSH
12791: EMPTY
12792: LIST
12793: LIST
12794: LIST
12795: LIST
12796: PUSH
12797: EMPTY
12798: LIST
12799: LIST
12800: PPUSH
12801: CALL_OW 69
12805: AND
12806: PUSH
12807: LD_INT 22
12809: PUSH
12810: LD_INT 3
12812: PUSH
12813: EMPTY
12814: LIST
12815: LIST
12816: PUSH
12817: LD_INT 21
12819: PUSH
12820: LD_INT 1
12822: PUSH
12823: EMPTY
12824: LIST
12825: LIST
12826: PUSH
12827: LD_INT 92
12829: PUSH
12830: LD_INT 208
12832: PUSH
12833: LD_INT 163
12835: PUSH
12836: LD_INT 14
12838: PUSH
12839: EMPTY
12840: LIST
12841: LIST
12842: LIST
12843: LIST
12844: PUSH
12845: EMPTY
12846: LIST
12847: LIST
12848: LIST
12849: PPUSH
12850: CALL_OW 69
12854: NOT
12855: AND
12856: IFFALSE 13161
12858: GO 12860
12860: DISABLE
12861: LD_INT 0
12863: PPUSH
// begin InGameOn ;
12864: CALL_OW 8
// CenterNowOnUnits ( playerCommander ) ;
12868: LD_EXP 9
12872: PPUSH
12873: CALL_OW 87
// wait ( 0 0$1 ) ;
12877: LD_INT 35
12879: PPUSH
12880: CALL_OW 67
// DialogueOn ;
12884: CALL_OW 6
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-BaseCaptured ) ;
12888: LD_EXP 9
12892: PPUSH
12893: LD_STRING D
12895: PUSH
12896: LD_STRING I
12898: PUSH
12899: LD_STRING J
12901: PUSH
12902: LD_STRING S
12904: PUSH
12905: EMPTY
12906: LIST
12907: LIST
12908: LIST
12909: PUSH
12910: LD_EXP 25
12914: ARRAY
12915: STR
12916: PUSH
12917: LD_STRING -1-BaseCaptured
12919: STR
12920: PPUSH
12921: CALL_OW 88
// SayRadio ( Powell , DP-1-BaseCaptured ) ;
12925: LD_EXP 12
12929: PPUSH
12930: LD_STRING DP-1-BaseCaptured
12932: PPUSH
12933: CALL_OW 94
// if sibBombAllowed then
12937: LD_EXP 23
12941: IFFALSE 13083
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -2-BaseCaptured ) ;
12943: LD_EXP 9
12947: PPUSH
12948: LD_STRING D
12950: PUSH
12951: LD_STRING I
12953: PUSH
12954: LD_STRING J
12956: PUSH
12957: LD_STRING S
12959: PUSH
12960: EMPTY
12961: LIST
12962: LIST
12963: LIST
12964: PUSH
12965: LD_EXP 25
12969: ARRAY
12970: STR
12971: PUSH
12972: LD_STRING -2-BaseCaptured
12974: STR
12975: PPUSH
12976: CALL_OW 88
// if commander = 1 then
12980: LD_EXP 25
12984: PUSH
12985: LD_INT 1
12987: EQUAL
12988: IFFALSE 13002
// SayRadio ( Powell , DP-2b-BaseCaptured ) ;
12990: LD_EXP 12
12994: PPUSH
12995: LD_STRING DP-2b-BaseCaptured
12997: PPUSH
12998: CALL_OW 94
// if commander = 2 then
13002: LD_EXP 25
13006: PUSH
13007: LD_INT 2
13009: EQUAL
13010: IFFALSE 13024
// SayRadio ( Powell , DP-2-BaseCaptured ) ;
13012: LD_EXP 12
13016: PPUSH
13017: LD_STRING DP-2-BaseCaptured
13019: PPUSH
13020: CALL_OW 94
// if commander = 3 then
13024: LD_EXP 25
13028: PUSH
13029: LD_INT 3
13031: EQUAL
13032: IFFALSE 13046
// SayRadio ( Powell , DP-2a-BaseCaptured ) ;
13034: LD_EXP 12
13038: PPUSH
13039: LD_STRING DP-2a-BaseCaptured
13041: PPUSH
13042: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -3-BaseCaptured ) ;
13046: LD_EXP 9
13050: PPUSH
13051: LD_STRING D
13053: PUSH
13054: LD_STRING I
13056: PUSH
13057: LD_STRING J
13059: PUSH
13060: LD_STRING S
13062: PUSH
13063: EMPTY
13064: LIST
13065: LIST
13066: LIST
13067: PUSH
13068: LD_EXP 25
13072: ARRAY
13073: STR
13074: PUSH
13075: LD_STRING -3-BaseCaptured
13077: STR
13078: PPUSH
13079: CALL_OW 88
// end ; DialogueOff ;
13083: CALL_OW 7
// InGameOff ;
13087: CALL_OW 9
// ChangeMissionObjectives ( O2 ) ;
13091: LD_STRING O2
13093: PPUSH
13094: CALL_OW 337
// for i in UnitFilter ( ruOutpost , [ f_type , unit_building ] ) do
13098: LD_ADDR_VAR 0 1
13102: PUSH
13103: LD_EXP 14
13107: PPUSH
13108: LD_INT 21
13110: PUSH
13111: LD_INT 3
13113: PUSH
13114: EMPTY
13115: LIST
13116: LIST
13117: PPUSH
13118: CALL_OW 72
13122: PUSH
13123: FOR_IN
13124: IFFALSE 13140
// SetSide ( i , 1 ) ;
13126: LD_VAR 0 1
13130: PPUSH
13131: LD_INT 1
13133: PPUSH
13134: CALL_OW 235
13138: GO 13123
13140: POP
13141: POP
// baseCaptured := true ;
13142: LD_ADDR_EXP 17
13146: PUSH
13147: LD_INT 1
13149: ST_TO_ADDR
// wait ( 0 0$35 ) ;
13150: LD_INT 1225
13152: PPUSH
13153: CALL_OW 67
// PrepareReinforcements ;
13157: CALL 9910 0 0
// end ;
13161: PPOPN 1
13163: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 167 , 197 , 20 ] ] ) > 3 do
13164: LD_INT 22
13166: PUSH
13167: LD_INT 3
13169: PUSH
13170: EMPTY
13171: LIST
13172: LIST
13173: PUSH
13174: LD_INT 92
13176: PUSH
13177: LD_INT 167
13179: PUSH
13180: LD_INT 197
13182: PUSH
13183: LD_INT 20
13185: PUSH
13186: EMPTY
13187: LIST
13188: LIST
13189: LIST
13190: LIST
13191: PUSH
13192: EMPTY
13193: LIST
13194: LIST
13195: PPUSH
13196: CALL_OW 69
13200: PUSH
13201: LD_INT 3
13203: GREATER
13204: IFFALSE 13221
13206: GO 13208
13208: DISABLE
// SayRadio ( Powell , DP-RuAttack ) ;
13209: LD_EXP 12
13213: PPUSH
13214: LD_STRING DP-RuAttack
13216: PPUSH
13217: CALL_OW 94
13221: END
// every 0 0$2 trigger not debug and SeeXY ( 1 , 168 , 74 ) and GetEnvironmentType ( 168 , 72 ) do
13222: LD_EXP 1
13226: NOT
13227: PUSH
13228: LD_INT 1
13230: PPUSH
13231: LD_INT 168
13233: PPUSH
13234: LD_INT 74
13236: PPUSH
13237: CALL_OW 293
13241: AND
13242: PUSH
13243: LD_INT 168
13245: PPUSH
13246: LD_INT 72
13248: PPUSH
13249: CALL_OW 553
13253: AND
13254: IFFALSE 13306
13256: GO 13258
13258: DISABLE
// begin CenterOnXY ( 168 , 72 ) ;
13259: LD_INT 168
13261: PPUSH
13262: LD_INT 72
13264: PPUSH
13265: CALL_OW 84
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Blockade ) ;
13269: LD_EXP 9
13273: PPUSH
13274: LD_STRING D
13276: PUSH
13277: LD_STRING I
13279: PUSH
13280: LD_STRING J
13282: PUSH
13283: LD_STRING S
13285: PUSH
13286: EMPTY
13287: LIST
13288: LIST
13289: LIST
13290: PUSH
13291: LD_EXP 25
13295: ARRAY
13296: STR
13297: PUSH
13298: LD_STRING -1-Blockade
13300: STR
13301: PPUSH
13302: CALL_OW 88
// end ;
13306: END
// every 0 0$2 trigger GameType = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_see , 4 ] ] ) do
13307: LD_EXP 2
13311: PUSH
13312: LD_INT 1
13314: EQUAL
13315: PUSH
13316: LD_INT 22
13318: PUSH
13319: LD_INT 1
13321: PUSH
13322: EMPTY
13323: LIST
13324: LIST
13325: PUSH
13326: LD_INT 101
13328: PUSH
13329: LD_INT 4
13331: PUSH
13332: EMPTY
13333: LIST
13334: LIST
13335: PUSH
13336: EMPTY
13337: LIST
13338: LIST
13339: PPUSH
13340: CALL_OW 69
13344: AND
13345: IFFALSE 13877
13347: GO 13349
13349: DISABLE
// begin ChangeSideFog ( 4 , 1 ) ;
13350: LD_INT 4
13352: PPUSH
13353: LD_INT 1
13355: PPUSH
13356: CALL_OW 343
// DialogueOn ;
13360: CALL_OW 6
// CenterNowOnUnits ( allyCommander ) ;
13364: LD_EXP 11
13368: PPUSH
13369: CALL_OW 87
// SayRadio ( allyCommander , DM-1-Contact ) ;
13373: LD_EXP 11
13377: PPUSH
13378: LD_STRING DM-1-Contact
13380: PPUSH
13381: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Contact ) ;
13385: LD_EXP 9
13389: PPUSH
13390: LD_STRING D
13392: PUSH
13393: LD_STRING I
13395: PUSH
13396: LD_STRING J
13398: PUSH
13399: LD_STRING S
13401: PUSH
13402: EMPTY
13403: LIST
13404: LIST
13405: LIST
13406: PUSH
13407: LD_EXP 25
13411: ARRAY
13412: STR
13413: PUSH
13414: LD_STRING -1-Contact
13416: STR
13417: PPUSH
13418: CALL_OW 88
// if commander = 1 then
13422: LD_EXP 25
13426: PUSH
13427: LD_INT 1
13429: EQUAL
13430: IFFALSE 13562
// begin SayRadio ( allyCommander , DM-2-Contact ) ;
13432: LD_EXP 11
13436: PPUSH
13437: LD_STRING DM-2-Contact
13439: PPUSH
13440: CALL_OW 94
// Say ( playerCommander , DI-2-Contact ) ;
13444: LD_EXP 9
13448: PPUSH
13449: LD_STRING DI-2-Contact
13451: PPUSH
13452: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) and GetAttitude ( 8 , 1 ) = att_enemy then
13456: LD_INT 22
13458: PUSH
13459: LD_INT 8
13461: PUSH
13462: EMPTY
13463: LIST
13464: LIST
13465: PUSH
13466: LD_INT 21
13468: PUSH
13469: LD_INT 1
13471: PUSH
13472: EMPTY
13473: LIST
13474: LIST
13475: PUSH
13476: EMPTY
13477: LIST
13478: LIST
13479: PPUSH
13480: CALL_OW 69
13484: PUSH
13485: LD_INT 8
13487: PPUSH
13488: LD_INT 1
13490: PPUSH
13491: CALL_OW 81
13495: PUSH
13496: LD_INT 2
13498: EQUAL
13499: AND
13500: IFFALSE 13526
// begin SayRadio ( allyCommander , DM-3-Contact ) ;
13502: LD_EXP 11
13506: PPUSH
13507: LD_STRING DM-3-Contact
13509: PPUSH
13510: CALL_OW 94
// Say ( playerCommander , DI-3-Contact ) ;
13514: LD_EXP 9
13518: PPUSH
13519: LD_STRING DI-3-Contact
13521: PPUSH
13522: CALL_OW 88
// end ; SayRadio ( allyCommander , DM-4-Contact ) ;
13526: LD_EXP 11
13530: PPUSH
13531: LD_STRING DM-4-Contact
13533: PPUSH
13534: CALL_OW 94
// Say ( playerCommander , DI-4-Contact ) ;
13538: LD_EXP 9
13542: PPUSH
13543: LD_STRING DI-4-Contact
13545: PPUSH
13546: CALL_OW 88
// SayRadio ( allyCommander , DM-5-Contact ) ;
13550: LD_EXP 11
13554: PPUSH
13555: LD_STRING DM-5-Contact
13557: PPUSH
13558: CALL_OW 94
// end ; if commander = 2 then
13562: LD_EXP 25
13566: PUSH
13567: LD_INT 2
13569: EQUAL
13570: IFFALSE 13702
// begin SayRadio ( allyCommander , DM-2c-Contact ) ;
13572: LD_EXP 11
13576: PPUSH
13577: LD_STRING DM-2c-Contact
13579: PPUSH
13580: CALL_OW 94
// Say ( playerCommander , DJ-2-Contact ) ;
13584: LD_EXP 9
13588: PPUSH
13589: LD_STRING DJ-2-Contact
13591: PPUSH
13592: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) and GetAttitude ( 8 , 1 ) = att_enemy then
13596: LD_INT 22
13598: PUSH
13599: LD_INT 8
13601: PUSH
13602: EMPTY
13603: LIST
13604: LIST
13605: PUSH
13606: LD_INT 21
13608: PUSH
13609: LD_INT 1
13611: PUSH
13612: EMPTY
13613: LIST
13614: LIST
13615: PUSH
13616: EMPTY
13617: LIST
13618: LIST
13619: PPUSH
13620: CALL_OW 69
13624: PUSH
13625: LD_INT 8
13627: PPUSH
13628: LD_INT 1
13630: PPUSH
13631: CALL_OW 81
13635: PUSH
13636: LD_INT 2
13638: EQUAL
13639: AND
13640: IFFALSE 13666
// begin SayRadio ( allyCommander , DM-3-Contact ) ;
13642: LD_EXP 11
13646: PPUSH
13647: LD_STRING DM-3-Contact
13649: PPUSH
13650: CALL_OW 94
// Say ( playerCommander , DJ-3-Contact ) ;
13654: LD_EXP 9
13658: PPUSH
13659: LD_STRING DJ-3-Contact
13661: PPUSH
13662: CALL_OW 88
// end ; SayRadio ( allyCommander , DM-4-Contact ) ;
13666: LD_EXP 11
13670: PPUSH
13671: LD_STRING DM-4-Contact
13673: PPUSH
13674: CALL_OW 94
// Say ( playerCommander , DJ-4-Contact ) ;
13678: LD_EXP 9
13682: PPUSH
13683: LD_STRING DJ-4-Contact
13685: PPUSH
13686: CALL_OW 88
// SayRadio ( allyCommander , DM-5a-Contact ) ;
13690: LD_EXP 11
13694: PPUSH
13695: LD_STRING DM-5a-Contact
13697: PPUSH
13698: CALL_OW 94
// end ; if commander = 3 then
13702: LD_EXP 25
13706: PUSH
13707: LD_INT 3
13709: EQUAL
13710: IFFALSE 13866
// begin SayRadio ( allyCommander , DM-2a-Contact ) ;
13712: LD_EXP 11
13716: PPUSH
13717: LD_STRING DM-2a-Contact
13719: PPUSH
13720: CALL_OW 94
// Say ( playerCommander , DS-2a-Contact ) ;
13724: LD_EXP 9
13728: PPUSH
13729: LD_STRING DS-2a-Contact
13731: PPUSH
13732: CALL_OW 88
// SayRadio ( allyCommander , DM-2b-Contact ) ;
13736: LD_EXP 11
13740: PPUSH
13741: LD_STRING DM-2b-Contact
13743: PPUSH
13744: CALL_OW 94
// Say ( playerCommander , DS-2b-Contact ) ;
13748: LD_EXP 9
13752: PPUSH
13753: LD_STRING DS-2b-Contact
13755: PPUSH
13756: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) and GetAttitude ( 8 , 1 ) = att_enemy then
13760: LD_INT 22
13762: PUSH
13763: LD_INT 8
13765: PUSH
13766: EMPTY
13767: LIST
13768: LIST
13769: PUSH
13770: LD_INT 21
13772: PUSH
13773: LD_INT 1
13775: PUSH
13776: EMPTY
13777: LIST
13778: LIST
13779: PUSH
13780: EMPTY
13781: LIST
13782: LIST
13783: PPUSH
13784: CALL_OW 69
13788: PUSH
13789: LD_INT 8
13791: PPUSH
13792: LD_INT 1
13794: PPUSH
13795: CALL_OW 81
13799: PUSH
13800: LD_INT 2
13802: EQUAL
13803: AND
13804: IFFALSE 13830
// begin SayRadio ( allyCommander , DM-3-Contact ) ;
13806: LD_EXP 11
13810: PPUSH
13811: LD_STRING DM-3-Contact
13813: PPUSH
13814: CALL_OW 94
// Say ( playerCommander , DS-3-Contact ) ;
13818: LD_EXP 9
13822: PPUSH
13823: LD_STRING DS-3-Contact
13825: PPUSH
13826: CALL_OW 88
// end ; SayRadio ( allyCommander , DM-4-Contact ) ;
13830: LD_EXP 11
13834: PPUSH
13835: LD_STRING DM-4-Contact
13837: PPUSH
13838: CALL_OW 94
// Say ( playerCommander , DS-4-Contact ) ;
13842: LD_EXP 9
13846: PPUSH
13847: LD_STRING DS-4-Contact
13849: PPUSH
13850: CALL_OW 88
// SayRadio ( allyCommander , DM-5-Contact ) ;
13854: LD_EXP 11
13858: PPUSH
13859: LD_STRING DM-5-Contact
13861: PPUSH
13862: CALL_OW 94
// end ; DialogueOff ;
13866: CALL_OW 7
// ChangeMissionObjectives ( O3 ) ;
13870: LD_STRING O3
13872: PPUSH
13873: CALL_OW 337
// end ;
13877: END
// every 0 0$10 trigger GameType = 1 and legDestCounter >= [ 15 , 20 , 25 ] [ Difficulty ] and FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_warehouse ] ] ) and FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] ] ) >= 5 do var time , sib , sources , i ;
13878: LD_EXP 2
13882: PUSH
13883: LD_INT 1
13885: EQUAL
13886: PUSH
13887: LD_EXP 18
13891: PUSH
13892: LD_INT 15
13894: PUSH
13895: LD_INT 20
13897: PUSH
13898: LD_INT 25
13900: PUSH
13901: EMPTY
13902: LIST
13903: LIST
13904: LIST
13905: PUSH
13906: LD_OWVAR 67
13910: ARRAY
13911: GREATEREQUAL
13912: AND
13913: PUSH
13914: LD_INT 22
13916: PUSH
13917: LD_INT 8
13919: PUSH
13920: EMPTY
13921: LIST
13922: LIST
13923: PUSH
13924: LD_INT 30
13926: PUSH
13927: LD_INT 1
13929: PUSH
13930: EMPTY
13931: LIST
13932: LIST
13933: PUSH
13934: EMPTY
13935: LIST
13936: LIST
13937: PPUSH
13938: CALL_OW 69
13942: AND
13943: PUSH
13944: LD_INT 22
13946: PUSH
13947: LD_INT 8
13949: PUSH
13950: EMPTY
13951: LIST
13952: LIST
13953: PUSH
13954: LD_INT 21
13956: PUSH
13957: LD_INT 3
13959: PUSH
13960: EMPTY
13961: LIST
13962: LIST
13963: PUSH
13964: EMPTY
13965: LIST
13966: LIST
13967: PPUSH
13968: CALL_OW 69
13972: PUSH
13973: LD_INT 5
13975: GREATEREQUAL
13976: AND
13977: IFFALSE 14500
13979: GO 13981
13981: DISABLE
13982: LD_INT 0
13984: PPUSH
13985: PPUSH
13986: PPUSH
13987: PPUSH
// begin DialogueOn ;
13988: CALL_OW 6
// SayRadio ( Farmer , DF-1-Leg ) ;
13992: LD_EXP 13
13996: PPUSH
13997: LD_STRING DF-1-Leg
13999: PPUSH
14000: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Leg ) ;
14004: LD_EXP 9
14008: PPUSH
14009: LD_STRING D
14011: PUSH
14012: LD_STRING I
14014: PUSH
14015: LD_STRING J
14017: PUSH
14018: LD_STRING S
14020: PUSH
14021: EMPTY
14022: LIST
14023: LIST
14024: LIST
14025: PUSH
14026: LD_EXP 25
14030: ARRAY
14031: STR
14032: PUSH
14033: LD_STRING -1-Leg
14035: STR
14036: PPUSH
14037: CALL_OW 88
// SayRadio ( Farmer , DF-2-Leg ) ;
14041: LD_EXP 13
14045: PPUSH
14046: LD_STRING DF-2-Leg
14048: PPUSH
14049: CALL_OW 94
// DialogueOff ;
14053: CALL_OW 7
// case Query ( QLegionOffer ) of 1 :
14057: LD_STRING QLegionOffer
14059: PPUSH
14060: CALL_OW 97
14064: PUSH
14065: LD_INT 1
14067: DOUBLE
14068: EQUAL
14069: IFTRUE 14073
14071: GO 14076
14073: POP
// ; 2 :
14074: GO 14090
14076: LD_INT 2
14078: DOUBLE
14079: EQUAL
14080: IFTRUE 14084
14082: GO 14089
14084: POP
// exit ; end ;
14085: GO 14500
14087: GO 14090
14089: POP
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -2-Leg ) ;
14090: LD_EXP 9
14094: PPUSH
14095: LD_STRING D
14097: PUSH
14098: LD_STRING I
14100: PUSH
14101: LD_STRING J
14103: PUSH
14104: LD_STRING S
14106: PUSH
14107: EMPTY
14108: LIST
14109: LIST
14110: LIST
14111: PUSH
14112: LD_EXP 25
14116: ARRAY
14117: STR
14118: PUSH
14119: LD_STRING -2-Leg
14121: STR
14122: PPUSH
14123: CALL_OW 88
// legOfferAccepted := true ;
14127: LD_ADDR_EXP 20
14131: PUSH
14132: LD_INT 1
14134: ST_TO_ADDR
// SetAreaMapShow ( legOfferArea , 1 ) ;
14135: LD_INT 21
14137: PPUSH
14138: LD_INT 1
14140: PPUSH
14141: CALL_OW 424
// CenterOnXY ( 190 , 227 ) ;
14145: LD_INT 190
14147: PPUSH
14148: LD_INT 227
14150: PPUSH
14151: CALL_OW 84
// time := [ 8 8$00 , 7 7$00 , 6 6$00 ] [ Difficulty ] ;
14155: LD_ADDR_VAR 0 1
14159: PUSH
14160: LD_INT 16800
14162: PUSH
14163: LD_INT 14700
14165: PUSH
14166: LD_INT 12600
14168: PUSH
14169: EMPTY
14170: LIST
14171: LIST
14172: LIST
14173: PUSH
14174: LD_OWVAR 67
14178: ARRAY
14179: ST_TO_ADDR
// sib := 100 ;
14180: LD_ADDR_VAR 0 2
14184: PUSH
14185: LD_INT 100
14187: ST_TO_ADDR
// disableGlobalTimer := true ;
14188: LD_ADDR_EXP 4
14192: PUSH
14193: LD_INT 1
14195: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14196: LD_INT 35
14198: PPUSH
14199: CALL_OW 67
// time := time - 0 0$1 ;
14203: LD_ADDR_VAR 0 1
14207: PUSH
14208: LD_VAR 0 1
14212: PUSH
14213: LD_INT 35
14215: MINUS
14216: ST_TO_ADDR
// sources := GetResourceArea ( legOfferArea , mat_siberit ) ;
14217: LD_ADDR_VAR 0 3
14221: PUSH
14222: LD_INT 21
14224: PPUSH
14225: LD_INT 3
14227: PPUSH
14228: CALL_OW 287
14232: ST_TO_ADDR
// display_strings := [ #SkrTime , tick , #Skr-LegOffer , sib , time ] ;
14233: LD_ADDR_OWVAR 47
14237: PUSH
14238: LD_STRING #SkrTime
14240: PUSH
14241: LD_OWVAR 1
14245: PUSH
14246: LD_STRING #Skr-LegOffer
14248: PUSH
14249: LD_VAR 0 2
14253: PUSH
14254: LD_VAR 0 1
14258: PUSH
14259: EMPTY
14260: LIST
14261: LIST
14262: LIST
14263: LIST
14264: LIST
14265: ST_TO_ADDR
// if sources then
14266: LD_VAR 0 3
14270: IFFALSE 14302
// begin sib := sib - sources * 10 ;
14272: LD_ADDR_VAR 0 2
14276: PUSH
14277: LD_VAR 0 2
14281: PUSH
14282: LD_VAR 0 3
14286: PUSH
14287: LD_INT 10
14289: MUL
14290: MINUS
14291: ST_TO_ADDR
// EraseResourceArea ( legOfferArea , mat_siberit ) ;
14292: LD_INT 21
14294: PPUSH
14295: LD_INT 3
14297: PPUSH
14298: CALL_OW 286
// end ; until time = 0 0$00 or sib <= 0 or not FilterAllUnits ( [ f_side , 8 ] ) ;
14302: LD_VAR 0 1
14306: PUSH
14307: LD_INT 0
14309: EQUAL
14310: PUSH
14311: LD_VAR 0 2
14315: PUSH
14316: LD_INT 0
14318: LESSEQUAL
14319: OR
14320: PUSH
14321: LD_INT 22
14323: PUSH
14324: LD_INT 8
14326: PUSH
14327: EMPTY
14328: LIST
14329: LIST
14330: PPUSH
14331: CALL_OW 69
14335: NOT
14336: OR
14337: IFFALSE 14196
// SetAreaMapShow ( legOfferArea , 0 ) ;
14339: LD_INT 21
14341: PPUSH
14342: LD_INT 0
14344: PPUSH
14345: CALL_OW 424
// disableGlobalTimer := false ;
14349: LD_ADDR_EXP 4
14353: PUSH
14354: LD_INT 0
14356: ST_TO_ADDR
// if sib <= 0 then
14357: LD_VAR 0 2
14361: PUSH
14362: LD_INT 0
14364: LESSEQUAL
14365: IFFALSE 14481
// begin legChangeSide := true ;
14367: LD_ADDR_EXP 21
14371: PUSH
14372: LD_INT 1
14374: ST_TO_ADDR
// SayRadio ( Farmer , DF-4y-Leg ) ;
14375: LD_EXP 13
14379: PPUSH
14380: LD_STRING DF-4y-Leg
14382: PPUSH
14383: CALL_OW 94
// ChangeMissionObjectives ( O3a ) ;
14387: LD_STRING O3a
14389: PPUSH
14390: CALL_OW 337
// ChangeSideFog ( 8 , 1 ) ;
14394: LD_INT 8
14396: PPUSH
14397: LD_INT 1
14399: PPUSH
14400: CALL_OW 343
// SetAttitude ( 8 , 1 , att_friend , true ) ;
14404: LD_INT 8
14406: PPUSH
14407: LD_INT 1
14409: PPUSH
14410: LD_INT 1
14412: PPUSH
14413: LD_INT 1
14415: PPUSH
14416: CALL_OW 80
// SetAttitude ( 8 , 4 , att_friend , true ) ;
14420: LD_INT 8
14422: PPUSH
14423: LD_INT 4
14425: PPUSH
14426: LD_INT 1
14428: PPUSH
14429: LD_INT 1
14431: PPUSH
14432: CALL_OW 80
// SetAttitude ( 8 , 6 , att_enemy , true ) ;
14436: LD_INT 8
14438: PPUSH
14439: LD_INT 6
14441: PPUSH
14442: LD_INT 2
14444: PPUSH
14445: LD_INT 1
14447: PPUSH
14448: CALL_OW 80
// SetAttitude ( 8 , 3 , att_enemy , true ) ;
14452: LD_INT 8
14454: PPUSH
14455: LD_INT 3
14457: PPUSH
14458: LD_INT 2
14460: PPUSH
14461: LD_INT 1
14463: PPUSH
14464: CALL_OW 80
// wait ( 0 0$30 ) ;
14468: LD_INT 1050
14470: PPUSH
14471: CALL_OW 67
// PrepareLegionReinforcements ;
14475: CALL 10610 0 0
// end else
14479: GO 14500
// begin ChangeMissionObjectives ( O3a ) ;
14481: LD_STRING O3a
14483: PPUSH
14484: CALL_OW 337
// SayRadio ( Farmer , DF-4n-Leg ) ;
14488: LD_EXP 13
14492: PPUSH
14493: LD_STRING DF-4n-Leg
14495: PPUSH
14496: CALL_OW 94
// end ; end ;
14500: PPOPN 4
14502: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) = 0 and GetAttitude ( 8 , 1 ) = att_enemy do
14503: LD_INT 22
14505: PUSH
14506: LD_INT 8
14508: PUSH
14509: EMPTY
14510: LIST
14511: LIST
14512: PUSH
14513: LD_INT 21
14515: PUSH
14516: LD_INT 1
14518: PUSH
14519: EMPTY
14520: LIST
14521: LIST
14522: PUSH
14523: EMPTY
14524: LIST
14525: LIST
14526: PPUSH
14527: CALL_OW 69
14531: PUSH
14532: LD_INT 0
14534: EQUAL
14535: PUSH
14536: LD_INT 8
14538: PPUSH
14539: LD_INT 1
14541: PPUSH
14542: CALL_OW 81
14546: PUSH
14547: LD_INT 2
14549: EQUAL
14550: AND
14551: IFFALSE 14563
14553: GO 14555
14555: DISABLE
// ChangeMissionObjectives ( O3a ) ;
14556: LD_STRING O3a
14558: PPUSH
14559: CALL_OW 337
14563: END
// every 0 0$1 trigger GameType = 1 and game and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) = 0 do
14564: LD_EXP 2
14568: PUSH
14569: LD_INT 1
14571: EQUAL
14572: PUSH
14573: LD_EXP 3
14577: AND
14578: PUSH
14579: LD_INT 22
14581: PUSH
14582: LD_INT 3
14584: PUSH
14585: EMPTY
14586: LIST
14587: LIST
14588: PUSH
14589: LD_INT 21
14591: PUSH
14592: LD_INT 1
14594: PUSH
14595: EMPTY
14596: LIST
14597: LIST
14598: PUSH
14599: EMPTY
14600: LIST
14601: LIST
14602: PPUSH
14603: CALL_OW 69
14607: PUSH
14608: LD_INT 0
14610: EQUAL
14611: AND
14612: PUSH
14613: LD_INT 22
14615: PUSH
14616: LD_INT 3
14618: PUSH
14619: EMPTY
14620: LIST
14621: LIST
14622: PUSH
14623: LD_INT 30
14625: PUSH
14626: LD_INT 1
14628: PUSH
14629: EMPTY
14630: LIST
14631: LIST
14632: PUSH
14633: EMPTY
14634: LIST
14635: LIST
14636: PPUSH
14637: CALL_OW 69
14641: PUSH
14642: LD_INT 0
14644: EQUAL
14645: AND
14646: IFFALSE 14884
14648: GO 14650
14650: DISABLE
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Win ) ;
14651: LD_EXP 9
14655: PPUSH
14656: LD_STRING D
14658: PUSH
14659: LD_STRING I
14661: PUSH
14662: LD_STRING J
14664: PUSH
14665: LD_STRING S
14667: PUSH
14668: EMPTY
14669: LIST
14670: LIST
14671: LIST
14672: PUSH
14673: LD_EXP 25
14677: ARRAY
14678: STR
14679: PUSH
14680: LD_STRING -1-Win
14682: STR
14683: PPUSH
14684: CALL_OW 88
// if tick >= [ 150 150$0 , 130 130$0 , 110 110$0 ] [ Difficulty ] then
14688: LD_OWVAR 1
14692: PUSH
14693: LD_INT 315000
14695: PUSH
14696: LD_INT 273000
14698: PUSH
14699: LD_INT 231000
14701: PUSH
14702: EMPTY
14703: LIST
14704: LIST
14705: LIST
14706: PUSH
14707: LD_OWVAR 67
14711: ARRAY
14712: GREATEREQUAL
14713: IFFALSE 14728
// AddMedal ( med1 , - 1 ) else
14715: LD_STRING med1
14717: PPUSH
14718: LD_INT 1
14720: NEG
14721: PPUSH
14722: CALL_OW 101
14726: GO 14738
// AddMedal ( med1 , 1 ) ;
14728: LD_STRING med1
14730: PPUSH
14731: LD_INT 1
14733: PPUSH
14734: CALL_OW 101
// if allyDestCounter >= [ 20 , 15 , 10 ] [ Difficulty ] then
14738: LD_EXP 22
14742: PUSH
14743: LD_INT 20
14745: PUSH
14746: LD_INT 15
14748: PUSH
14749: LD_INT 10
14751: PUSH
14752: EMPTY
14753: LIST
14754: LIST
14755: LIST
14756: PUSH
14757: LD_OWVAR 67
14761: ARRAY
14762: GREATEREQUAL
14763: IFFALSE 14778
// AddMedal ( med2 , - 1 ) else
14765: LD_STRING med2
14767: PPUSH
14768: LD_INT 1
14770: NEG
14771: PPUSH
14772: CALL_OW 101
14776: GO 14788
// AddMedal ( med2 , 1 ) ;
14778: LD_STRING med2
14780: PPUSH
14781: LD_INT 1
14783: PPUSH
14784: CALL_OW 101
// if GetAttitude ( 8 , 1 ) = att_friend then
14788: LD_INT 8
14790: PPUSH
14791: LD_INT 1
14793: PPUSH
14794: CALL_OW 81
14798: PUSH
14799: LD_INT 1
14801: EQUAL
14802: IFFALSE 14816
// AddMedal ( med3 , 1 ) else
14804: LD_STRING med3
14806: PPUSH
14807: LD_INT 1
14809: PPUSH
14810: CALL_OW 101
14814: GO 14873
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) = 0 then
14816: LD_INT 22
14818: PUSH
14819: LD_INT 8
14821: PUSH
14822: EMPTY
14823: LIST
14824: LIST
14825: PUSH
14826: LD_INT 21
14828: PUSH
14829: LD_INT 1
14831: PUSH
14832: EMPTY
14833: LIST
14834: LIST
14835: PUSH
14836: EMPTY
14837: LIST
14838: LIST
14839: PPUSH
14840: CALL_OW 69
14844: PUSH
14845: LD_INT 0
14847: EQUAL
14848: IFFALSE 14862
// AddMedal ( med3 , 2 ) else
14850: LD_STRING med3
14852: PPUSH
14853: LD_INT 2
14855: PPUSH
14856: CALL_OW 101
14860: GO 14873
// AddMedal ( med3 , - 1 ) ;
14862: LD_STRING med3
14864: PPUSH
14865: LD_INT 1
14867: NEG
14868: PPUSH
14869: CALL_OW 101
// GiveMedals ( MAIN ) ;
14873: LD_STRING MAIN
14875: PPUSH
14876: CALL_OW 102
// YouWin ;
14880: CALL_OW 103
// end ;
14884: END
// every 10 trigger GameType = 1 and staticMines and FilterUnitsInArea ( minesArea , [ f_enemy , 8 ] ) do var i , j , tmp , x , y ;
14885: LD_EXP 2
14889: PUSH
14890: LD_INT 1
14892: EQUAL
14893: PUSH
14894: LD_EXP 16
14898: AND
14899: PUSH
14900: LD_INT 20
14902: PPUSH
14903: LD_INT 81
14905: PUSH
14906: LD_INT 8
14908: PUSH
14909: EMPTY
14910: LIST
14911: LIST
14912: PPUSH
14913: CALL_OW 70
14917: AND
14918: IFFALSE 15197
14920: GO 14922
14922: DISABLE
14923: LD_INT 0
14925: PPUSH
14926: PPUSH
14927: PPUSH
14928: PPUSH
14929: PPUSH
// begin enable ;
14930: ENABLE
// tmp := FilterUnitsInArea ( minesArea , [ f_enemy , 8 ] ) ;
14931: LD_ADDR_VAR 0 3
14935: PUSH
14936: LD_INT 20
14938: PPUSH
14939: LD_INT 81
14941: PUSH
14942: LD_INT 8
14944: PUSH
14945: EMPTY
14946: LIST
14947: LIST
14948: PPUSH
14949: CALL_OW 70
14953: ST_TO_ADDR
// if not tmp then
14954: LD_VAR 0 3
14958: NOT
14959: IFFALSE 14963
// exit ;
14961: GO 15197
// for i in tmp do
14963: LD_ADDR_VAR 0 1
14967: PUSH
14968: LD_VAR 0 3
14972: PUSH
14973: FOR_IN
14974: IFFALSE 15195
// begin x := GetX ( i ) ;
14976: LD_ADDR_VAR 0 4
14980: PUSH
14981: LD_VAR 0 1
14985: PPUSH
14986: CALL_OW 250
14990: ST_TO_ADDR
// y := GetY ( i ) ;
14991: LD_ADDR_VAR 0 5
14995: PUSH
14996: LD_VAR 0 1
15000: PPUSH
15001: CALL_OW 251
15005: ST_TO_ADDR
// if MineAtPos ( x , y ) then
15006: LD_VAR 0 4
15010: PPUSH
15011: LD_VAR 0 5
15015: PPUSH
15016: CALL_OW 458
15020: IFFALSE 15193
// begin LaunchMineAtPos ( x , y , 8 ) ;
15022: LD_VAR 0 4
15026: PPUSH
15027: LD_VAR 0 5
15031: PPUSH
15032: LD_INT 8
15034: PPUSH
15035: CALL_OW 456
// if not dialogueMineDetected then
15039: LD_EXP 28
15043: NOT
15044: IFFALSE 15105
// begin CenterNowOnXY ( x , y ) ;
15046: LD_VAR 0 4
15050: PPUSH
15051: LD_VAR 0 5
15055: PPUSH
15056: CALL_OW 86
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Mine ) ;
15060: LD_EXP 9
15064: PPUSH
15065: LD_STRING D
15067: PUSH
15068: LD_STRING I
15070: PUSH
15071: LD_STRING J
15073: PUSH
15074: LD_STRING S
15076: PUSH
15077: EMPTY
15078: LIST
15079: LIST
15080: LIST
15081: PUSH
15082: LD_EXP 25
15086: ARRAY
15087: STR
15088: PUSH
15089: LD_STRING -1-Mine
15091: STR
15092: PPUSH
15093: CALL_OW 88
// dialogueMineDetected := true ;
15097: LD_ADDR_EXP 28
15101: PUSH
15102: LD_INT 1
15104: ST_TO_ADDR
// end ; for j = 1 to staticMines do
15105: LD_ADDR_VAR 0 2
15109: PUSH
15110: DOUBLE
15111: LD_INT 1
15113: DEC
15114: ST_TO_ADDR
15115: LD_EXP 16
15119: PUSH
15120: FOR_TO
15121: IFFALSE 15191
// if staticMines [ j ] [ 1 ] = x and staticMines [ j ] [ 2 ] = y then
15123: LD_EXP 16
15127: PUSH
15128: LD_VAR 0 2
15132: ARRAY
15133: PUSH
15134: LD_INT 1
15136: ARRAY
15137: PUSH
15138: LD_VAR 0 4
15142: EQUAL
15143: PUSH
15144: LD_EXP 16
15148: PUSH
15149: LD_VAR 0 2
15153: ARRAY
15154: PUSH
15155: LD_INT 2
15157: ARRAY
15158: PUSH
15159: LD_VAR 0 5
15163: EQUAL
15164: AND
15165: IFFALSE 15189
// begin staticMines := Delete ( staticMines , j ) ;
15167: LD_ADDR_EXP 16
15171: PUSH
15172: LD_EXP 16
15176: PPUSH
15177: LD_VAR 0 2
15181: PPUSH
15182: CALL_OW 3
15186: ST_TO_ADDR
// break ;
15187: GO 15191
// end ;
15189: GO 15120
15191: POP
15192: POP
// end ; end ;
15193: GO 14973
15195: POP
15196: POP
// end ;
15197: PPOPN 5
15199: END
// every 30 30$00 + 50 50$00 trigger GameType = 1 and game and sibBombAllowed and UnitFilter ( mc_bases [ mc_rus_1 ] , [ f_btype , b_factory ] ) do var bomb , e ;
15200: LD_EXP 2
15204: PUSH
15205: LD_INT 1
15207: EQUAL
15208: PUSH
15209: LD_EXP 3
15213: AND
15214: PUSH
15215: LD_EXP 23
15219: AND
15220: PUSH
15221: LD_EXP 50
15225: PUSH
15226: LD_EXP 7
15230: ARRAY
15231: PPUSH
15232: LD_INT 30
15234: PUSH
15235: LD_INT 3
15237: PUSH
15238: EMPTY
15239: LIST
15240: LIST
15241: PPUSH
15242: CALL_OW 72
15246: AND
15247: IFFALSE 15451
15249: GO 15251
15251: DISABLE
15252: LD_INT 0
15254: PPUSH
15255: PPUSH
// begin enable ;
15256: ENABLE
// MC_InsertProduceList ( mc_rus_1 , [ [ ru_heavy_wheeled , engine_siberite , control_computer , ru_siberium_rocket ] ] ) ;
15257: LD_EXP 7
15261: PPUSH
15262: LD_INT 23
15264: PUSH
15265: LD_INT 3
15267: PUSH
15268: LD_INT 3
15270: PUSH
15271: LD_INT 48
15273: PUSH
15274: EMPTY
15275: LIST
15276: LIST
15277: LIST
15278: LIST
15279: PUSH
15280: EMPTY
15281: LIST
15282: PPUSH
15283: CALL 82987 0 2
// repeat wait ( 0 0$1 ) ;
15287: LD_INT 35
15289: PPUSH
15290: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) ;
15294: LD_INT 22
15296: PUSH
15297: LD_INT 3
15299: PUSH
15300: EMPTY
15301: LIST
15302: LIST
15303: PUSH
15304: LD_INT 34
15306: PUSH
15307: LD_INT 48
15309: PUSH
15310: EMPTY
15311: LIST
15312: LIST
15313: PUSH
15314: EMPTY
15315: LIST
15316: LIST
15317: PPUSH
15318: CALL_OW 69
15322: IFFALSE 15287
// bomb := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) ;
15324: LD_ADDR_VAR 0 1
15328: PUSH
15329: LD_INT 22
15331: PUSH
15332: LD_INT 3
15334: PUSH
15335: EMPTY
15336: LIST
15337: LIST
15338: PUSH
15339: LD_INT 34
15341: PUSH
15342: LD_INT 48
15344: PUSH
15345: EMPTY
15346: LIST
15347: LIST
15348: PUSH
15349: EMPTY
15350: LIST
15351: LIST
15352: PPUSH
15353: CALL_OW 69
15357: ST_TO_ADDR
// e := FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_type , unit_building ] ] ) ;
15358: LD_ADDR_VAR 0 2
15362: PUSH
15363: LD_INT 81
15365: PUSH
15366: LD_INT 3
15368: PUSH
15369: EMPTY
15370: LIST
15371: LIST
15372: PUSH
15373: LD_INT 21
15375: PUSH
15376: LD_INT 3
15378: PUSH
15379: EMPTY
15380: LIST
15381: LIST
15382: PUSH
15383: EMPTY
15384: LIST
15385: LIST
15386: PPUSH
15387: CALL_OW 69
15391: ST_TO_ADDR
// if e then
15392: LD_VAR 0 2
15396: IFFALSE 15422
// e := NearestUnitToUnit ( e , bomb [ 1 ] ) ;
15398: LD_ADDR_VAR 0 2
15402: PUSH
15403: LD_VAR 0 2
15407: PPUSH
15408: LD_VAR 0 1
15412: PUSH
15413: LD_INT 1
15415: ARRAY
15416: PPUSH
15417: CALL_OW 74
15421: ST_TO_ADDR
// ComAttackPlace ( bomb , GetX ( e ) , GetY ( e ) ) ;
15422: LD_VAR 0 1
15426: PPUSH
15427: LD_VAR 0 2
15431: PPUSH
15432: CALL_OW 250
15436: PPUSH
15437: LD_VAR 0 2
15441: PPUSH
15442: CALL_OW 251
15446: PPUSH
15447: CALL_OW 116
// end ;
15451: PPOPN 2
15453: END
// every 0 0$2 trigger Difficulty > 1 and UnitFilter ( mc_bases [ mc_rus_1 ] , [ f_class , 3 ] ) and GameType = 1 and game and GetTech ( tech_Behemoth , 3 ) = state_researched do var tmp , i ;
15454: LD_OWVAR 67
15458: PUSH
15459: LD_INT 1
15461: GREATER
15462: PUSH
15463: LD_EXP 50
15467: PUSH
15468: LD_EXP 7
15472: ARRAY
15473: PPUSH
15474: LD_INT 25
15476: PUSH
15477: LD_INT 3
15479: PUSH
15480: EMPTY
15481: LIST
15482: LIST
15483: PPUSH
15484: CALL_OW 72
15488: AND
15489: PUSH
15490: LD_EXP 2
15494: PUSH
15495: LD_INT 1
15497: EQUAL
15498: AND
15499: PUSH
15500: LD_EXP 3
15504: AND
15505: PUSH
15506: LD_INT 23
15508: PPUSH
15509: LD_INT 3
15511: PPUSH
15512: CALL_OW 321
15516: PUSH
15517: LD_INT 2
15519: EQUAL
15520: AND
15521: IFFALSE 15648
15523: GO 15525
15525: DISABLE
15526: LD_INT 0
15528: PPUSH
15529: PPUSH
// begin tmp := UnitFilter ( mc_bases [ mc_rus_1 ] , [ f_class , 3 ] ) ;
15530: LD_ADDR_VAR 0 1
15534: PUSH
15535: LD_EXP 50
15539: PUSH
15540: LD_EXP 7
15544: ARRAY
15545: PPUSH
15546: LD_INT 25
15548: PUSH
15549: LD_INT 3
15551: PUSH
15552: EMPTY
15553: LIST
15554: LIST
15555: PPUSH
15556: CALL_OW 72
15560: ST_TO_ADDR
// if not tmp then
15561: LD_VAR 0 1
15565: NOT
15566: IFFALSE 15570
// exit ;
15568: GO 15648
// for i in tmp do
15570: LD_ADDR_VAR 0 2
15574: PUSH
15575: LD_VAR 0 1
15579: PUSH
15580: FOR_IN
15581: IFFALSE 15627
// begin SetTag ( i , 29 ) ;
15583: LD_VAR 0 2
15587: PPUSH
15588: LD_INT 29
15590: PPUSH
15591: CALL_OW 109
// ComExitBuilding ( i ) ;
15595: LD_VAR 0 2
15599: PPUSH
15600: CALL_OW 122
// AddComBuildBehemoth ( i , b_behemoth , 97 , 133 , 0 ) ;
15604: LD_VAR 0 2
15608: PPUSH
15609: LD_INT 37
15611: PPUSH
15612: LD_INT 97
15614: PPUSH
15615: LD_INT 133
15617: PPUSH
15618: LD_INT 0
15620: PPUSH
15621: CALL_OW 230
// end ;
15625: GO 15580
15627: POP
15628: POP
// wait ( 1 1$00 ) ;
15629: LD_INT 2100
15631: PPUSH
15632: CALL_OW 67
// MC_Reset ( mc_rus_1 , 29 ) ;
15636: LD_EXP 7
15640: PPUSH
15641: LD_INT 29
15643: PPUSH
15644: CALL 63068 0 2
// end ;
15648: PPOPN 2
15650: END
// every 7 7$00 trigger GameType = 1 and GetBType ( HexInfo ( 84 , 128 ) ) = b_warehouse and GetSide ( HexInfo ( 84 , 128 ) ) = 3 do var veh , depot ;
15651: LD_EXP 2
15655: PUSH
15656: LD_INT 1
15658: EQUAL
15659: PUSH
15660: LD_INT 84
15662: PPUSH
15663: LD_INT 128
15665: PPUSH
15666: CALL_OW 428
15670: PPUSH
15671: CALL_OW 266
15675: PUSH
15676: LD_INT 1
15678: EQUAL
15679: AND
15680: PUSH
15681: LD_INT 84
15683: PPUSH
15684: LD_INT 128
15686: PPUSH
15687: CALL_OW 428
15691: PPUSH
15692: CALL_OW 255
15696: PUSH
15697: LD_INT 3
15699: EQUAL
15700: AND
15701: IFFALSE 15874
15703: GO 15705
15705: DISABLE
15706: LD_INT 0
15708: PPUSH
15709: PPUSH
// begin enable ;
15710: ENABLE
// depot := HexInfo ( 84 , 128 ) ;
15711: LD_ADDR_VAR 0 2
15715: PUSH
15716: LD_INT 84
15718: PPUSH
15719: LD_INT 128
15721: PPUSH
15722: CALL_OW 428
15726: ST_TO_ADDR
// uc_side := 3 ;
15727: LD_ADDR_OWVAR 20
15731: PUSH
15732: LD_INT 3
15734: ST_TO_ADDR
// uc_nation := 3 ;
15735: LD_ADDR_OWVAR 21
15739: PUSH
15740: LD_INT 3
15742: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_siberite , control_computer , ru_cargo_bay , 0 ) ;
15743: LD_INT 21
15745: PPUSH
15746: LD_INT 3
15748: PPUSH
15749: LD_INT 3
15751: PPUSH
15752: LD_INT 51
15754: PPUSH
15755: LD_INT 0
15757: PPUSH
15758: CALL 24736 0 5
// veh := CreateVehicle ;
15762: LD_ADDR_VAR 0 1
15766: PUSH
15767: CALL_OW 45
15771: ST_TO_ADDR
// PlaceUnitXY ( veh , 126 , 227 , false ) ;
15772: LD_VAR 0 1
15776: PPUSH
15777: LD_INT 126
15779: PPUSH
15780: LD_INT 227
15782: PPUSH
15783: LD_INT 0
15785: PPUSH
15786: CALL_OW 48
// SetCargo ( veh , mat_oil , 100 ) ;
15790: LD_VAR 0 1
15794: PPUSH
15795: LD_INT 2
15797: PPUSH
15798: LD_INT 100
15800: PPUSH
15801: CALL_OW 290
// ComGive ( veh , depot ) ;
15805: LD_VAR 0 1
15809: PPUSH
15810: LD_VAR 0 2
15814: PPUSH
15815: CALL_OW 161
// AddComMoveXY ( veh , 126 , 227 ) ;
15819: LD_VAR 0 1
15823: PPUSH
15824: LD_INT 126
15826: PPUSH
15827: LD_INT 227
15829: PPUSH
15830: CALL_OW 171
// wait ( 0 0$10 ) ;
15834: LD_INT 350
15836: PPUSH
15837: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
15841: LD_INT 35
15843: PPUSH
15844: CALL_OW 67
// until IsAt ( veh , 126 , 227 ) ;
15848: LD_VAR 0 1
15852: PPUSH
15853: LD_INT 126
15855: PPUSH
15856: LD_INT 227
15858: PPUSH
15859: CALL_OW 307
15863: IFFALSE 15841
// RemoveUnit ( veh ) ;
15865: LD_VAR 0 1
15869: PPUSH
15870: CALL_OW 64
// end ;
15874: PPOPN 2
15876: END
// every 9 9$00 trigger GameType = 1 and outpostEscape and commander = 2 do var veh , depot ;
15877: LD_EXP 2
15881: PUSH
15882: LD_INT 1
15884: EQUAL
15885: PUSH
15886: LD_EXP 27
15890: AND
15891: PUSH
15892: LD_EXP 25
15896: PUSH
15897: LD_INT 2
15899: EQUAL
15900: AND
15901: IFFALSE 16093
15903: GO 15905
15905: DISABLE
15906: LD_INT 0
15908: PPUSH
15909: PPUSH
// begin enable ;
15910: ENABLE
// if tick >= [ 50 50$00 , 40 40$00 , 30 30$00 ] [ Difficulty ] then
15911: LD_OWVAR 1
15915: PUSH
15916: LD_INT 105000
15918: PUSH
15919: LD_INT 84000
15921: PUSH
15922: LD_INT 63000
15924: PUSH
15925: EMPTY
15926: LIST
15927: LIST
15928: LIST
15929: PUSH
15930: LD_OWVAR 67
15934: ARRAY
15935: GREATEREQUAL
15936: IFFALSE 15939
// disable ;
15938: DISABLE
// uc_side := 4 ;
15939: LD_ADDR_OWVAR 20
15943: PUSH
15944: LD_INT 4
15946: ST_TO_ADDR
// uc_nation := 1 ;
15947: LD_ADDR_OWVAR 21
15951: PUSH
15952: LD_INT 1
15954: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_cargo_bay , 0 ) ;
15955: LD_INT 2
15957: PPUSH
15958: LD_INT 3
15960: PPUSH
15961: LD_INT 3
15963: PPUSH
15964: LD_INT 12
15966: PPUSH
15967: LD_INT 0
15969: PPUSH
15970: CALL 24736 0 5
// veh := CreateVehicle ;
15974: LD_ADDR_VAR 0 1
15978: PUSH
15979: CALL_OW 45
15983: ST_TO_ADDR
// PlaceUnitXY ( veh , 229 , 226 , false ) ;
15984: LD_VAR 0 1
15988: PPUSH
15989: LD_INT 229
15991: PPUSH
15992: LD_INT 226
15994: PPUSH
15995: LD_INT 0
15997: PPUSH
15998: CALL_OW 48
// SetCargo ( veh , mat_cans , 100 ) ;
16002: LD_VAR 0 1
16006: PPUSH
16007: LD_INT 1
16009: PPUSH
16010: LD_INT 100
16012: PPUSH
16013: CALL_OW 290
// AddComMoveToArea ( veh , ruOutpostArea ) ;
16017: LD_VAR 0 1
16021: PPUSH
16022: LD_INT 25
16024: PPUSH
16025: CALL_OW 173
// AddComUnload ( veh ) ;
16029: LD_VAR 0 1
16033: PPUSH
16034: CALL_OW 219
// AddComMoveXY ( veh , 229 , 226 ) ;
16038: LD_VAR 0 1
16042: PPUSH
16043: LD_INT 229
16045: PPUSH
16046: LD_INT 226
16048: PPUSH
16049: CALL_OW 171
// wait ( 0 0$10 ) ;
16053: LD_INT 350
16055: PPUSH
16056: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
16060: LD_INT 35
16062: PPUSH
16063: CALL_OW 67
// until IsAt ( veh , 229 , 226 ) ;
16067: LD_VAR 0 1
16071: PPUSH
16072: LD_INT 229
16074: PPUSH
16075: LD_INT 226
16077: PPUSH
16078: CALL_OW 307
16082: IFFALSE 16060
// RemoveUnit ( veh ) ;
16084: LD_VAR 0 1
16088: PPUSH
16089: CALL_OW 64
// end ;
16093: PPOPN 2
16095: END
// every 15 15$00 trigger GameType = 1 and game and reinforceAllowed do var i , j , veh , tmp , amount ;
16096: LD_EXP 2
16100: PUSH
16101: LD_INT 1
16103: EQUAL
16104: PUSH
16105: LD_EXP 3
16109: AND
16110: PUSH
16111: LD_EXP 24
16115: AND
16116: IFFALSE 16449
16118: GO 16120
16120: DISABLE
16121: LD_INT 0
16123: PPUSH
16124: PPUSH
16125: PPUSH
16126: PPUSH
16127: PPUSH
// begin enable ;
16128: ENABLE
// tmp := [ ] ;
16129: LD_ADDR_VAR 0 4
16133: PUSH
16134: EMPTY
16135: ST_TO_ADDR
// if commander = 1 then
16136: LD_EXP 25
16140: PUSH
16141: LD_INT 1
16143: EQUAL
16144: IFFALSE 16156
// amount := 3 else
16146: LD_ADDR_VAR 0 5
16150: PUSH
16151: LD_INT 3
16153: ST_TO_ADDR
16154: GO 16164
// amount := 2 ;
16156: LD_ADDR_VAR 0 5
16160: PUSH
16161: LD_INT 2
16163: ST_TO_ADDR
// for i = 1 to amount do
16164: LD_ADDR_VAR 0 1
16168: PUSH
16169: DOUBLE
16170: LD_INT 1
16172: DEC
16173: ST_TO_ADDR
16174: LD_VAR 0 5
16178: PUSH
16179: FOR_TO
16180: IFFALSE 16344
// begin wait ( 0 0$5 ) ;
16182: LD_INT 175
16184: PPUSH
16185: CALL_OW 67
// for j = 1 to 3 do
16189: LD_ADDR_VAR 0 2
16193: PUSH
16194: DOUBLE
16195: LD_INT 1
16197: DEC
16198: ST_TO_ADDR
16199: LD_INT 3
16201: PUSH
16202: FOR_TO
16203: IFFALSE 16340
// begin uc_side := 4 ;
16205: LD_ADDR_OWVAR 20
16209: PUSH
16210: LD_INT 4
16212: ST_TO_ADDR
// uc_nation := 1 ;
16213: LD_ADDR_OWVAR 21
16217: PUSH
16218: LD_INT 1
16220: ST_TO_ADDR
// PrepareVehicle ( [ us_medium_tracked , us_morphling ] [ rand ( 1 , 2 ) ] , engine_siberite , control_computer , [ us_laser , us_double_gun , us_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
16221: LD_INT 3
16223: PUSH
16224: LD_INT 5
16226: PUSH
16227: EMPTY
16228: LIST
16229: LIST
16230: PUSH
16231: LD_INT 1
16233: PPUSH
16234: LD_INT 2
16236: PPUSH
16237: CALL_OW 12
16241: ARRAY
16242: PPUSH
16243: LD_INT 3
16245: PPUSH
16246: LD_INT 3
16248: PPUSH
16249: LD_INT 9
16251: PUSH
16252: LD_INT 5
16254: PUSH
16255: LD_INT 7
16257: PUSH
16258: EMPTY
16259: LIST
16260: LIST
16261: LIST
16262: PUSH
16263: LD_INT 1
16265: PPUSH
16266: LD_INT 3
16268: PPUSH
16269: CALL_OW 12
16273: ARRAY
16274: PPUSH
16275: LD_INT 100
16277: PPUSH
16278: CALL 24736 0 5
// veh := CreateVehicle ;
16282: LD_ADDR_VAR 0 3
16286: PUSH
16287: CALL_OW 45
16291: ST_TO_ADDR
// tmp := tmp ^ veh ;
16292: LD_ADDR_VAR 0 4
16296: PUSH
16297: LD_VAR 0 4
16301: PUSH
16302: LD_VAR 0 3
16306: ADD
16307: ST_TO_ADDR
// PlaceUnitArea ( veh , westSpawn , false ) ;
16308: LD_VAR 0 3
16312: PPUSH
16313: LD_INT 22
16315: PPUSH
16316: LD_INT 0
16318: PPUSH
16319: CALL_OW 49
// ComMoveXY ( veh , 119 , 215 ) ;
16323: LD_VAR 0 3
16327: PPUSH
16328: LD_INT 119
16330: PPUSH
16331: LD_INT 215
16333: PPUSH
16334: CALL_OW 111
// end ;
16338: GO 16202
16340: POP
16341: POP
// end ;
16342: GO 16179
16344: POP
16345: POP
// wait ( 0 0$3 ) ;
16346: LD_INT 105
16348: PPUSH
16349: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
16353: LD_INT 35
16355: PPUSH
16356: CALL_OW 67
// for i in tmp do
16360: LD_ADDR_VAR 0 1
16364: PUSH
16365: LD_VAR 0 4
16369: PUSH
16370: FOR_IN
16371: IFFALSE 16438
// if IsDead ( i ) then
16373: LD_VAR 0 1
16377: PPUSH
16378: CALL_OW 301
16382: IFFALSE 16402
// tmp := tmp diff i else
16384: LD_ADDR_VAR 0 4
16388: PUSH
16389: LD_VAR 0 4
16393: PUSH
16394: LD_VAR 0 1
16398: DIFF
16399: ST_TO_ADDR
16400: GO 16436
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 4 ] ) , i ) ) ;
16402: LD_VAR 0 1
16406: PPUSH
16407: LD_INT 81
16409: PUSH
16410: LD_INT 4
16412: PUSH
16413: EMPTY
16414: LIST
16415: LIST
16416: PPUSH
16417: CALL_OW 69
16421: PPUSH
16422: LD_VAR 0 1
16426: PPUSH
16427: CALL_OW 74
16431: PPUSH
16432: CALL_OW 115
16436: GO 16370
16438: POP
16439: POP
// until tmp = [ ] ;
16440: LD_VAR 0 4
16444: PUSH
16445: EMPTY
16446: EQUAL
16447: IFFALSE 16353
// end ;
16449: PPOPN 5
16451: END
// every 0 0$1 trigger GameType = 1 and game do var i , tmp ;
16452: LD_EXP 2
16456: PUSH
16457: LD_INT 1
16459: EQUAL
16460: PUSH
16461: LD_EXP 3
16465: AND
16466: IFFALSE 16567
16468: GO 16470
16470: DISABLE
16471: LD_INT 0
16473: PPUSH
16474: PPUSH
// begin enable ;
16475: ENABLE
// tmp := FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) ;
16476: LD_ADDR_VAR 0 2
16480: PUSH
16481: LD_INT 3
16483: PUSH
16484: LD_INT 22
16486: PUSH
16487: LD_INT 1
16489: PUSH
16490: EMPTY
16491: LIST
16492: LIST
16493: PUSH
16494: EMPTY
16495: LIST
16496: LIST
16497: PUSH
16498: LD_INT 32
16500: PUSH
16501: LD_INT 1
16503: PUSH
16504: EMPTY
16505: LIST
16506: LIST
16507: PUSH
16508: EMPTY
16509: LIST
16510: LIST
16511: PPUSH
16512: CALL_OW 69
16516: ST_TO_ADDR
// if tmp then
16517: LD_VAR 0 2
16521: IFFALSE 16567
// for i in tmp do
16523: LD_ADDR_VAR 0 1
16527: PUSH
16528: LD_VAR 0 2
16532: PUSH
16533: FOR_IN
16534: IFFALSE 16565
// if GetFuel ( i ) < 3 then
16536: LD_VAR 0 1
16540: PPUSH
16541: CALL_OW 261
16545: PUSH
16546: LD_INT 3
16548: LESS
16549: IFFALSE 16563
// SetFuel ( i , 3 ) ;
16551: LD_VAR 0 1
16555: PPUSH
16556: LD_INT 3
16558: PPUSH
16559: CALL_OW 240
16563: GO 16533
16565: POP
16566: POP
// end ;
16567: PPOPN 2
16569: END
// every 15 15$00 trigger game and GetAttitude ( 8 , 4 ) = att_enemy do var i , un , tmp ;
16570: LD_EXP 3
16574: PUSH
16575: LD_INT 8
16577: PPUSH
16578: LD_INT 4
16580: PPUSH
16581: CALL_OW 81
16585: PUSH
16586: LD_INT 2
16588: EQUAL
16589: AND
16590: IFFALSE 16800
16592: GO 16594
16594: DISABLE
16595: LD_INT 0
16597: PPUSH
16598: PPUSH
16599: PPUSH
// begin enable ;
16600: ENABLE
// tmp := [ ] ;
16601: LD_ADDR_VAR 0 3
16605: PUSH
16606: EMPTY
16607: ST_TO_ADDR
// for i = 1 to 4 do
16608: LD_ADDR_VAR 0 1
16612: PUSH
16613: DOUBLE
16614: LD_INT 1
16616: DEC
16617: ST_TO_ADDR
16618: LD_INT 4
16620: PUSH
16621: FOR_TO
16622: IFFALSE 16766
// begin uc_side := 8 ;
16624: LD_ADDR_OWVAR 20
16628: PUSH
16629: LD_INT 8
16631: ST_TO_ADDR
// uc_nation := nation_arabian ;
16632: LD_ADDR_OWVAR 21
16636: PUSH
16637: LD_INT 2
16639: ST_TO_ADDR
// PrepareVehicle ( ar_hovercraft , engine_combustion , control_apeman , [ ar_double_machine_gun , ar_light_gun ] [ rand ( 1 , 2 ) ] , rand ( 60 , 80 ) ) ;
16640: LD_INT 11
16642: PPUSH
16643: LD_INT 1
16645: PPUSH
16646: LD_INT 5
16648: PPUSH
16649: LD_INT 24
16651: PUSH
16652: LD_INT 23
16654: PUSH
16655: EMPTY
16656: LIST
16657: LIST
16658: PUSH
16659: LD_INT 1
16661: PPUSH
16662: LD_INT 2
16664: PPUSH
16665: CALL_OW 12
16669: ARRAY
16670: PPUSH
16671: LD_INT 60
16673: PPUSH
16674: LD_INT 80
16676: PPUSH
16677: CALL_OW 12
16681: PPUSH
16682: CALL 24736 0 5
// un := CreateVehicle ;
16686: LD_ADDR_VAR 0 2
16690: PUSH
16691: CALL_OW 45
16695: ST_TO_ADDR
// SetDir ( un , 2 ) ;
16696: LD_VAR 0 2
16700: PPUSH
16701: LD_INT 2
16703: PPUSH
16704: CALL_OW 233
// tmp := tmp ^ un ;
16708: LD_ADDR_VAR 0 3
16712: PUSH
16713: LD_VAR 0 3
16717: PUSH
16718: LD_VAR 0 2
16722: ADD
16723: ST_TO_ADDR
// PlaceUnitXY ( un , 88 , 2 , false ) ;
16724: LD_VAR 0 2
16728: PPUSH
16729: LD_INT 88
16731: PPUSH
16732: LD_INT 2
16734: PPUSH
16735: LD_INT 0
16737: PPUSH
16738: CALL_OW 48
// ComMoveXY ( un , 93 , 13 ) ;
16742: LD_VAR 0 2
16746: PPUSH
16747: LD_INT 93
16749: PPUSH
16750: LD_INT 13
16752: PPUSH
16753: CALL_OW 111
// wait ( 0 0$2 ) ;
16757: LD_INT 70
16759: PPUSH
16760: CALL_OW 67
// end ;
16764: GO 16621
16766: POP
16767: POP
// for i in tmp do
16768: LD_ADDR_VAR 0 1
16772: PUSH
16773: LD_VAR 0 3
16777: PUSH
16778: FOR_IN
16779: IFFALSE 16798
// AddComMoveXY ( i , 136 , 19 ) ;
16781: LD_VAR 0 1
16785: PPUSH
16786: LD_INT 136
16788: PPUSH
16789: LD_INT 19
16791: PPUSH
16792: CALL_OW 171
16796: GO 16778
16798: POP
16799: POP
// end ;
16800: PPOPN 3
16802: END
// every 7 7$30 + 7 7$30 trigger game do var i , base , tmp , target ;
16803: LD_EXP 3
16807: IFFALSE 17726
16809: GO 16811
16811: DISABLE
16812: LD_INT 0
16814: PPUSH
16815: PPUSH
16816: PPUSH
16817: PPUSH
// begin enable ;
16818: ENABLE
// base := mc_leg ;
16819: LD_ADDR_VAR 0 2
16823: PUSH
16824: LD_EXP 6
16828: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 8 ] , [ f_nation , 2 ] , [ f_btype , b_factory ] ] ) then
16829: LD_INT 22
16831: PUSH
16832: LD_INT 8
16834: PUSH
16835: EMPTY
16836: LIST
16837: LIST
16838: PUSH
16839: LD_INT 23
16841: PUSH
16842: LD_INT 2
16844: PUSH
16845: EMPTY
16846: LIST
16847: LIST
16848: PUSH
16849: LD_INT 30
16851: PUSH
16852: LD_INT 3
16854: PUSH
16855: EMPTY
16856: LIST
16857: LIST
16858: PUSH
16859: EMPTY
16860: LIST
16861: LIST
16862: LIST
16863: PPUSH
16864: CALL_OW 69
16868: NOT
16869: IFFALSE 16873
// exit ;
16871: GO 17726
// if Prob ( 40 ) then
16873: LD_INT 40
16875: PPUSH
16876: CALL_OW 13
16880: IFFALSE 17009
// begin MC_InsertProduceList ( base , [ [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_flame_thrower ] , ] ) ;
16882: LD_VAR 0 2
16886: PPUSH
16887: LD_INT 13
16889: PUSH
16890: LD_INT 1
16892: PUSH
16893: LD_INT 2
16895: PUSH
16896: LD_INT 28
16898: PUSH
16899: EMPTY
16900: LIST
16901: LIST
16902: LIST
16903: LIST
16904: PUSH
16905: LD_INT 13
16907: PUSH
16908: LD_INT 1
16910: PUSH
16911: LD_INT 2
16913: PUSH
16914: LD_INT 28
16916: PUSH
16917: EMPTY
16918: LIST
16919: LIST
16920: LIST
16921: LIST
16922: PUSH
16923: LD_INT 13
16925: PUSH
16926: LD_INT 1
16928: PUSH
16929: LD_INT 2
16931: PUSH
16932: LD_INT 28
16934: PUSH
16935: EMPTY
16936: LIST
16937: LIST
16938: LIST
16939: LIST
16940: PUSH
16941: LD_INT 13
16943: PUSH
16944: LD_INT 1
16946: PUSH
16947: LD_INT 2
16949: PUSH
16950: LD_INT 28
16952: PUSH
16953: EMPTY
16954: LIST
16955: LIST
16956: LIST
16957: LIST
16958: PUSH
16959: LD_INT 13
16961: PUSH
16962: LD_INT 1
16964: PUSH
16965: LD_INT 2
16967: PUSH
16968: LD_INT 28
16970: PUSH
16971: EMPTY
16972: LIST
16973: LIST
16974: LIST
16975: LIST
16976: PUSH
16977: LD_INT 13
16979: PUSH
16980: LD_INT 1
16982: PUSH
16983: LD_INT 2
16985: PUSH
16986: LD_INT 26
16988: PUSH
16989: EMPTY
16990: LIST
16991: LIST
16992: LIST
16993: LIST
16994: PUSH
16995: EMPTY
16996: LIST
16997: LIST
16998: LIST
16999: LIST
17000: LIST
17001: LIST
17002: PPUSH
17003: CALL 82987 0 2
// end else
17007: GO 17226
// begin MC_InsertProduceList ( base , [ [ ar_medium_trike , engine_combustion , control_remote , [ ar_gun , ar_flame_thrower , ar_flame_thrower ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_gun , ar_flame_thrower , ar_flame_thrower ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_flame_thrower , ar_flame_thrower , ar_selfpropelled_bomb ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_flame_thrower , ar_selfpropelled_bomb , ar_selfpropelled_bomb ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , ar_selfpropelled_bomb ] , [ ar_medium_trike , engine_combustion , control_remote , ar_flame_thrower ] , ] ) ;
17009: LD_VAR 0 2
17013: PPUSH
17014: LD_INT 13
17016: PUSH
17017: LD_INT 1
17019: PUSH
17020: LD_INT 2
17022: PUSH
17023: LD_INT 27
17025: PUSH
17026: LD_INT 26
17028: PUSH
17029: LD_INT 26
17031: PUSH
17032: EMPTY
17033: LIST
17034: LIST
17035: LIST
17036: PUSH
17037: LD_INT 1
17039: PPUSH
17040: LD_INT 3
17042: PPUSH
17043: CALL_OW 12
17047: ARRAY
17048: PUSH
17049: EMPTY
17050: LIST
17051: LIST
17052: LIST
17053: LIST
17054: PUSH
17055: LD_INT 13
17057: PUSH
17058: LD_INT 1
17060: PUSH
17061: LD_INT 2
17063: PUSH
17064: LD_INT 27
17066: PUSH
17067: LD_INT 26
17069: PUSH
17070: LD_INT 26
17072: PUSH
17073: EMPTY
17074: LIST
17075: LIST
17076: LIST
17077: PUSH
17078: LD_INT 1
17080: PPUSH
17081: LD_INT 3
17083: PPUSH
17084: CALL_OW 12
17088: ARRAY
17089: PUSH
17090: EMPTY
17091: LIST
17092: LIST
17093: LIST
17094: LIST
17095: PUSH
17096: LD_INT 13
17098: PUSH
17099: LD_INT 1
17101: PUSH
17102: LD_INT 2
17104: PUSH
17105: LD_INT 26
17107: PUSH
17108: LD_INT 26
17110: PUSH
17111: LD_INT 29
17113: PUSH
17114: EMPTY
17115: LIST
17116: LIST
17117: LIST
17118: PUSH
17119: LD_INT 1
17121: PPUSH
17122: LD_INT 3
17124: PPUSH
17125: CALL_OW 12
17129: ARRAY
17130: PUSH
17131: EMPTY
17132: LIST
17133: LIST
17134: LIST
17135: LIST
17136: PUSH
17137: LD_INT 13
17139: PUSH
17140: LD_INT 1
17142: PUSH
17143: LD_INT 2
17145: PUSH
17146: LD_INT 26
17148: PUSH
17149: LD_INT 29
17151: PUSH
17152: LD_INT 29
17154: PUSH
17155: EMPTY
17156: LIST
17157: LIST
17158: LIST
17159: PUSH
17160: LD_INT 1
17162: PPUSH
17163: LD_INT 3
17165: PPUSH
17166: CALL_OW 12
17170: ARRAY
17171: PUSH
17172: EMPTY
17173: LIST
17174: LIST
17175: LIST
17176: LIST
17177: PUSH
17178: LD_INT 13
17180: PUSH
17181: LD_INT 1
17183: PUSH
17184: LD_INT 2
17186: PUSH
17187: LD_INT 29
17189: PUSH
17190: EMPTY
17191: LIST
17192: LIST
17193: LIST
17194: LIST
17195: PUSH
17196: LD_INT 13
17198: PUSH
17199: LD_INT 1
17201: PUSH
17202: LD_INT 2
17204: PUSH
17205: LD_INT 26
17207: PUSH
17208: EMPTY
17209: LIST
17210: LIST
17211: LIST
17212: LIST
17213: PUSH
17214: EMPTY
17215: LIST
17216: LIST
17217: LIST
17218: LIST
17219: LIST
17220: LIST
17221: PPUSH
17222: CALL 82987 0 2
// end ; repeat wait ( 0 0$1 ) ;
17226: LD_INT 35
17228: PPUSH
17229: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= 6 or tick mod 10 10$00 = 0 ;
17233: LD_VAR 0 2
17237: PPUSH
17238: LD_INT 1
17240: PPUSH
17241: CALL 84405 0 2
17245: PUSH
17246: LD_INT 6
17248: GREATEREQUAL
17249: PUSH
17250: LD_OWVAR 1
17254: PUSH
17255: LD_INT 21000
17257: MOD
17258: PUSH
17259: LD_INT 0
17261: EQUAL
17262: OR
17263: IFFALSE 17226
// wait ( 0 0$30 ) ;
17265: LD_INT 1050
17267: PPUSH
17268: CALL_OW 67
// tmp := MC_GetVehicles ( base , true ) ;
17272: LD_ADDR_VAR 0 3
17276: PUSH
17277: LD_VAR 0 2
17281: PPUSH
17282: LD_INT 1
17284: PPUSH
17285: CALL 84405 0 2
17289: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff tmp ) ;
17290: LD_ADDR_EXP 69
17294: PUSH
17295: LD_EXP 69
17299: PPUSH
17300: LD_VAR 0 2
17304: PPUSH
17305: LD_EXP 69
17309: PUSH
17310: LD_VAR 0 2
17314: ARRAY
17315: PUSH
17316: LD_VAR 0 3
17320: DIFF
17321: PPUSH
17322: CALL_OW 1
17326: ST_TO_ADDR
// target := rand ( 0 , 2 ) ;
17327: LD_ADDR_VAR 0 4
17331: PUSH
17332: LD_INT 0
17334: PPUSH
17335: LD_INT 2
17337: PPUSH
17338: CALL_OW 12
17342: ST_TO_ADDR
// if legChangeSide then
17343: LD_EXP 21
17347: IFFALSE 17357
// target := 2 ;
17349: LD_ADDR_VAR 0 4
17353: PUSH
17354: LD_INT 2
17356: ST_TO_ADDR
// if target = 2 then
17357: LD_VAR 0 4
17361: PUSH
17362: LD_INT 2
17364: EQUAL
17365: IFFALSE 17493
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
17367: LD_ADDR_VAR 0 3
17371: PUSH
17372: LD_VAR 0 3
17376: PPUSH
17377: LD_INT 24
17379: PUSH
17380: LD_INT 250
17382: PUSH
17383: EMPTY
17384: LIST
17385: LIST
17386: PPUSH
17387: CALL_OW 72
17391: ST_TO_ADDR
// for i in tmp do
17392: LD_ADDR_VAR 0 1
17396: PUSH
17397: LD_VAR 0 3
17401: PUSH
17402: FOR_IN
17403: IFFALSE 17443
// if GetDistUnitXY ( i , 112 , 64 ) > 9 then
17405: LD_VAR 0 1
17409: PPUSH
17410: LD_INT 112
17412: PPUSH
17413: LD_INT 64
17415: PPUSH
17416: CALL_OW 297
17420: PUSH
17421: LD_INT 9
17423: GREATER
17424: IFFALSE 17441
// ComMoveXY ( i , 112 , 64 ) ;
17426: LD_VAR 0 1
17430: PPUSH
17431: LD_INT 112
17433: PPUSH
17434: LD_INT 64
17436: PPUSH
17437: CALL_OW 111
17441: GO 17402
17443: POP
17444: POP
// wait ( 0 0$1 ) ;
17445: LD_INT 35
17447: PPUSH
17448: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 112 , 64 , 9 ] ) >= ( tmp - 1 ) ;
17452: LD_VAR 0 3
17456: PPUSH
17457: LD_INT 92
17459: PUSH
17460: LD_INT 112
17462: PUSH
17463: LD_INT 64
17465: PUSH
17466: LD_INT 9
17468: PUSH
17469: EMPTY
17470: LIST
17471: LIST
17472: LIST
17473: LIST
17474: PPUSH
17475: CALL_OW 72
17479: PUSH
17480: LD_VAR 0 3
17484: PUSH
17485: LD_INT 1
17487: MINUS
17488: GREATEREQUAL
17489: IFFALSE 17367
// end else
17491: GO 17617
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
17493: LD_ADDR_VAR 0 3
17497: PUSH
17498: LD_VAR 0 3
17502: PPUSH
17503: LD_INT 24
17505: PUSH
17506: LD_INT 250
17508: PUSH
17509: EMPTY
17510: LIST
17511: LIST
17512: PPUSH
17513: CALL_OW 72
17517: ST_TO_ADDR
// for i in tmp do
17518: LD_ADDR_VAR 0 1
17522: PUSH
17523: LD_VAR 0 3
17527: PUSH
17528: FOR_IN
17529: IFFALSE 17569
// if GetDistUnitXY ( i , 174 , 94 ) > 9 then
17531: LD_VAR 0 1
17535: PPUSH
17536: LD_INT 174
17538: PPUSH
17539: LD_INT 94
17541: PPUSH
17542: CALL_OW 297
17546: PUSH
17547: LD_INT 9
17549: GREATER
17550: IFFALSE 17567
// ComMoveXY ( i , 174 , 94 ) ;
17552: LD_VAR 0 1
17556: PPUSH
17557: LD_INT 174
17559: PPUSH
17560: LD_INT 94
17562: PPUSH
17563: CALL_OW 111
17567: GO 17528
17569: POP
17570: POP
// wait ( 0 0$1 ) ;
17571: LD_INT 35
17573: PPUSH
17574: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 174 , 94 , 9 ] ) >= ( tmp - 1 ) ;
17578: LD_VAR 0 3
17582: PPUSH
17583: LD_INT 92
17585: PUSH
17586: LD_INT 174
17588: PUSH
17589: LD_INT 94
17591: PUSH
17592: LD_INT 9
17594: PUSH
17595: EMPTY
17596: LIST
17597: LIST
17598: LIST
17599: LIST
17600: PPUSH
17601: CALL_OW 72
17605: PUSH
17606: LD_VAR 0 3
17610: PUSH
17611: LD_INT 1
17613: MINUS
17614: GREATEREQUAL
17615: IFFALSE 17493
// end ; repeat wait ( 0 0$1 ) ;
17617: LD_INT 35
17619: PPUSH
17620: CALL_OW 67
// for i in tmp do
17624: LD_ADDR_VAR 0 1
17628: PUSH
17629: LD_VAR 0 3
17633: PUSH
17634: FOR_IN
17635: IFFALSE 17717
// begin if GetLives ( i ) > 251 then
17637: LD_VAR 0 1
17641: PPUSH
17642: CALL_OW 256
17646: PUSH
17647: LD_INT 251
17649: GREATER
17650: IFFALSE 17688
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 8 ] ) , i ) ) else
17652: LD_VAR 0 1
17656: PPUSH
17657: LD_INT 81
17659: PUSH
17660: LD_INT 8
17662: PUSH
17663: EMPTY
17664: LIST
17665: LIST
17666: PPUSH
17667: CALL_OW 69
17671: PPUSH
17672: LD_VAR 0 1
17676: PPUSH
17677: CALL_OW 74
17681: PPUSH
17682: CALL_OW 115
17686: GO 17715
// if IsDead ( i ) then
17688: LD_VAR 0 1
17692: PPUSH
17693: CALL_OW 301
17697: IFFALSE 17715
// tmp := tmp diff i ;
17699: LD_ADDR_VAR 0 3
17703: PUSH
17704: LD_VAR 0 3
17708: PUSH
17709: LD_VAR 0 1
17713: DIFF
17714: ST_TO_ADDR
// end ;
17715: GO 17634
17717: POP
17718: POP
// until not tmp ;
17719: LD_VAR 0 3
17723: NOT
17724: IFFALSE 17617
// end ;
17726: PPOPN 4
17728: END
// every 7 7$30 trigger game do var i , base , tmp , target , teleport ;
17729: LD_EXP 3
17733: IFFALSE 18721
17735: GO 17737
17737: DISABLE
17738: LD_INT 0
17740: PPUSH
17741: PPUSH
17742: PPUSH
17743: PPUSH
17744: PPUSH
// begin enable ;
17745: ENABLE
// if not UnitFilter ( mc_bases [ mc_rus_2 ] , [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) then
17746: LD_EXP 50
17750: PUSH
17751: LD_EXP 8
17755: ARRAY
17756: PPUSH
17757: LD_INT 22
17759: PUSH
17760: LD_INT 3
17762: PUSH
17763: EMPTY
17764: LIST
17765: LIST
17766: PUSH
17767: LD_INT 30
17769: PUSH
17770: LD_INT 3
17772: PUSH
17773: EMPTY
17774: LIST
17775: LIST
17776: PUSH
17777: EMPTY
17778: LIST
17779: LIST
17780: PPUSH
17781: CALL_OW 72
17785: NOT
17786: IFFALSE 17790
// exit ;
17788: GO 18721
// base := mc_rus_2 ;
17790: LD_ADDR_VAR 0 2
17794: PUSH
17795: LD_EXP 8
17799: ST_TO_ADDR
// teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) ;
17800: LD_ADDR_VAR 0 5
17804: PUSH
17805: LD_INT 22
17807: PUSH
17808: LD_INT 3
17810: PUSH
17811: EMPTY
17812: LIST
17813: LIST
17814: PUSH
17815: LD_INT 30
17817: PUSH
17818: LD_INT 34
17820: PUSH
17821: EMPTY
17822: LIST
17823: LIST
17824: PUSH
17825: EMPTY
17826: LIST
17827: LIST
17828: PPUSH
17829: CALL_OW 69
17833: ST_TO_ADDR
// if Prob ( 40 ) then
17834: LD_INT 40
17836: PPUSH
17837: CALL_OW 13
17841: IFFALSE 17970
// begin MC_InsertProduceList ( base , [ [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] ] ) ;
17843: LD_VAR 0 2
17847: PPUSH
17848: LD_INT 22
17850: PUSH
17851: LD_INT 3
17853: PUSH
17854: LD_INT 3
17856: PUSH
17857: LD_INT 49
17859: PUSH
17860: EMPTY
17861: LIST
17862: LIST
17863: LIST
17864: LIST
17865: PUSH
17866: LD_INT 22
17868: PUSH
17869: LD_INT 3
17871: PUSH
17872: LD_INT 3
17874: PUSH
17875: LD_INT 49
17877: PUSH
17878: EMPTY
17879: LIST
17880: LIST
17881: LIST
17882: LIST
17883: PUSH
17884: LD_INT 22
17886: PUSH
17887: LD_INT 3
17889: PUSH
17890: LD_INT 3
17892: PUSH
17893: LD_INT 49
17895: PUSH
17896: EMPTY
17897: LIST
17898: LIST
17899: LIST
17900: LIST
17901: PUSH
17902: LD_INT 24
17904: PUSH
17905: LD_INT 3
17907: PUSH
17908: LD_INT 3
17910: PUSH
17911: LD_INT 46
17913: PUSH
17914: EMPTY
17915: LIST
17916: LIST
17917: LIST
17918: LIST
17919: PUSH
17920: LD_INT 24
17922: PUSH
17923: LD_INT 3
17925: PUSH
17926: LD_INT 3
17928: PUSH
17929: LD_INT 46
17931: PUSH
17932: EMPTY
17933: LIST
17934: LIST
17935: LIST
17936: LIST
17937: PUSH
17938: LD_INT 24
17940: PUSH
17941: LD_INT 3
17943: PUSH
17944: LD_INT 3
17946: PUSH
17947: LD_INT 46
17949: PUSH
17950: EMPTY
17951: LIST
17952: LIST
17953: LIST
17954: LIST
17955: PUSH
17956: EMPTY
17957: LIST
17958: LIST
17959: LIST
17960: LIST
17961: LIST
17962: LIST
17963: PPUSH
17964: CALL 82987 0 2
// end else
17968: GO 18095
// begin MC_InsertProduceList ( base , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] ] ) ;
17970: LD_VAR 0 2
17974: PPUSH
17975: LD_INT 24
17977: PUSH
17978: LD_INT 3
17980: PUSH
17981: LD_INT 3
17983: PUSH
17984: LD_INT 47
17986: PUSH
17987: EMPTY
17988: LIST
17989: LIST
17990: LIST
17991: LIST
17992: PUSH
17993: LD_INT 24
17995: PUSH
17996: LD_INT 3
17998: PUSH
17999: LD_INT 3
18001: PUSH
18002: LD_INT 47
18004: PUSH
18005: EMPTY
18006: LIST
18007: LIST
18008: LIST
18009: LIST
18010: PUSH
18011: LD_INT 24
18013: PUSH
18014: LD_INT 3
18016: PUSH
18017: LD_INT 3
18019: PUSH
18020: LD_INT 47
18022: PUSH
18023: EMPTY
18024: LIST
18025: LIST
18026: LIST
18027: LIST
18028: PUSH
18029: LD_INT 24
18031: PUSH
18032: LD_INT 3
18034: PUSH
18035: LD_INT 3
18037: PUSH
18038: LD_INT 46
18040: PUSH
18041: EMPTY
18042: LIST
18043: LIST
18044: LIST
18045: LIST
18046: PUSH
18047: LD_INT 24
18049: PUSH
18050: LD_INT 3
18052: PUSH
18053: LD_INT 3
18055: PUSH
18056: LD_INT 46
18058: PUSH
18059: EMPTY
18060: LIST
18061: LIST
18062: LIST
18063: LIST
18064: PUSH
18065: LD_INT 24
18067: PUSH
18068: LD_INT 3
18070: PUSH
18071: LD_INT 3
18073: PUSH
18074: LD_INT 46
18076: PUSH
18077: EMPTY
18078: LIST
18079: LIST
18080: LIST
18081: LIST
18082: PUSH
18083: EMPTY
18084: LIST
18085: LIST
18086: LIST
18087: LIST
18088: LIST
18089: LIST
18090: PPUSH
18091: CALL 82987 0 2
// end ; if Difficulty > 1 then
18095: LD_OWVAR 67
18099: PUSH
18100: LD_INT 1
18102: GREATER
18103: IFFALSE 18135
// MC_InsertProduceList ( base , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] ] ) ;
18105: LD_VAR 0 2
18109: PPUSH
18110: LD_INT 24
18112: PUSH
18113: LD_INT 3
18115: PUSH
18116: LD_INT 3
18118: PUSH
18119: LD_INT 47
18121: PUSH
18122: EMPTY
18123: LIST
18124: LIST
18125: LIST
18126: LIST
18127: PUSH
18128: EMPTY
18129: LIST
18130: PPUSH
18131: CALL 82987 0 2
// repeat wait ( 0 0$1 ) ;
18135: LD_INT 35
18137: PPUSH
18138: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= [ 6 , 7 , 7 ] [ Difficulty ] or tick mod 10 10$00 = 0 ;
18142: LD_VAR 0 2
18146: PPUSH
18147: LD_INT 1
18149: PPUSH
18150: CALL 84405 0 2
18154: PUSH
18155: LD_INT 6
18157: PUSH
18158: LD_INT 7
18160: PUSH
18161: LD_INT 7
18163: PUSH
18164: EMPTY
18165: LIST
18166: LIST
18167: LIST
18168: PUSH
18169: LD_OWVAR 67
18173: ARRAY
18174: GREATEREQUAL
18175: PUSH
18176: LD_OWVAR 1
18180: PUSH
18181: LD_INT 21000
18183: MOD
18184: PUSH
18185: LD_INT 0
18187: EQUAL
18188: OR
18189: IFFALSE 18135
// wait ( 0 0$45 ) ;
18191: LD_INT 1575
18193: PPUSH
18194: CALL_OW 67
// tmp := MC_GetVehicles ( base , true ) ;
18198: LD_ADDR_VAR 0 3
18202: PUSH
18203: LD_VAR 0 2
18207: PPUSH
18208: LD_INT 1
18210: PPUSH
18211: CALL 84405 0 2
18215: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff tmp ) ;
18216: LD_ADDR_EXP 69
18220: PUSH
18221: LD_EXP 69
18225: PPUSH
18226: LD_VAR 0 2
18230: PPUSH
18231: LD_EXP 69
18235: PUSH
18236: LD_VAR 0 2
18240: ARRAY
18241: PUSH
18242: LD_VAR 0 3
18246: DIFF
18247: PPUSH
18248: CALL_OW 1
18252: ST_TO_ADDR
// target := rand ( 0 , 1 ) ;
18253: LD_ADDR_VAR 0 4
18257: PUSH
18258: LD_INT 0
18260: PPUSH
18261: LD_INT 1
18263: PPUSH
18264: CALL_OW 12
18268: ST_TO_ADDR
// if target then
18269: LD_VAR 0 4
18273: IFFALSE 18401
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
18275: LD_ADDR_VAR 0 3
18279: PUSH
18280: LD_VAR 0 3
18284: PPUSH
18285: LD_INT 24
18287: PUSH
18288: LD_INT 250
18290: PUSH
18291: EMPTY
18292: LIST
18293: LIST
18294: PPUSH
18295: CALL_OW 72
18299: ST_TO_ADDR
// for i in tmp do
18300: LD_ADDR_VAR 0 1
18304: PUSH
18305: LD_VAR 0 3
18309: PUSH
18310: FOR_IN
18311: IFFALSE 18351
// if GetDistUnitXY ( i , 84 , 32 ) > 9 then
18313: LD_VAR 0 1
18317: PPUSH
18318: LD_INT 84
18320: PPUSH
18321: LD_INT 32
18323: PPUSH
18324: CALL_OW 297
18328: PUSH
18329: LD_INT 9
18331: GREATER
18332: IFFALSE 18349
// ComMoveXY ( i , 84 , 32 ) ;
18334: LD_VAR 0 1
18338: PPUSH
18339: LD_INT 84
18341: PPUSH
18342: LD_INT 32
18344: PPUSH
18345: CALL_OW 111
18349: GO 18310
18351: POP
18352: POP
// wait ( 0 0$1 ) ;
18353: LD_INT 35
18355: PPUSH
18356: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 84 , 32 , 9 ] ) >= ( tmp - 1 ) ;
18360: LD_VAR 0 3
18364: PPUSH
18365: LD_INT 92
18367: PUSH
18368: LD_INT 84
18370: PUSH
18371: LD_INT 32
18373: PUSH
18374: LD_INT 9
18376: PUSH
18377: EMPTY
18378: LIST
18379: LIST
18380: LIST
18381: LIST
18382: PPUSH
18383: CALL_OW 72
18387: PUSH
18388: LD_VAR 0 3
18392: PUSH
18393: LD_INT 1
18395: MINUS
18396: GREATEREQUAL
18397: IFFALSE 18275
// end else
18399: GO 18561
// begin if teleport then
18401: LD_VAR 0 5
18405: IFFALSE 18425
// ComEnterUnit ( tmp , teleport [ 1 ] ) ;
18407: LD_VAR 0 3
18411: PPUSH
18412: LD_VAR 0 5
18416: PUSH
18417: LD_INT 1
18419: ARRAY
18420: PPUSH
18421: CALL_OW 120
// repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
18425: LD_ADDR_VAR 0 3
18429: PUSH
18430: LD_VAR 0 3
18434: PPUSH
18435: LD_INT 24
18437: PUSH
18438: LD_INT 250
18440: PUSH
18441: EMPTY
18442: LIST
18443: LIST
18444: PPUSH
18445: CALL_OW 72
18449: ST_TO_ADDR
// for i in tmp do
18450: LD_ADDR_VAR 0 1
18454: PUSH
18455: LD_VAR 0 3
18459: PUSH
18460: FOR_IN
18461: IFFALSE 18513
// if GetDistUnitXY ( i , 140 , 219 ) > 9 and not HasTask ( i ) then
18463: LD_VAR 0 1
18467: PPUSH
18468: LD_INT 140
18470: PPUSH
18471: LD_INT 219
18473: PPUSH
18474: CALL_OW 297
18478: PUSH
18479: LD_INT 9
18481: GREATER
18482: PUSH
18483: LD_VAR 0 1
18487: PPUSH
18488: CALL_OW 314
18492: NOT
18493: AND
18494: IFFALSE 18511
// AddComMoveXY ( i , 140 , 219 ) ;
18496: LD_VAR 0 1
18500: PPUSH
18501: LD_INT 140
18503: PPUSH
18504: LD_INT 219
18506: PPUSH
18507: CALL_OW 171
18511: GO 18460
18513: POP
18514: POP
// wait ( 0 0$1 ) ;
18515: LD_INT 35
18517: PPUSH
18518: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 140 , 219 , 9 ] ) >= ( tmp - 1 ) ;
18522: LD_VAR 0 3
18526: PPUSH
18527: LD_INT 92
18529: PUSH
18530: LD_INT 140
18532: PUSH
18533: LD_INT 219
18535: PUSH
18536: LD_INT 9
18538: PUSH
18539: EMPTY
18540: LIST
18541: LIST
18542: LIST
18543: LIST
18544: PPUSH
18545: CALL_OW 72
18549: PUSH
18550: LD_VAR 0 3
18554: PUSH
18555: LD_INT 1
18557: MINUS
18558: GREATEREQUAL
18559: IFFALSE 18425
// end ; repeat wait ( 0 0$1 ) ;
18561: LD_INT 35
18563: PPUSH
18564: CALL_OW 67
// for i in tmp do
18568: LD_ADDR_VAR 0 1
18572: PUSH
18573: LD_VAR 0 3
18577: PUSH
18578: FOR_IN
18579: IFFALSE 18712
// begin if GetLives ( i ) > 251 then
18581: LD_VAR 0 1
18585: PPUSH
18586: CALL_OW 256
18590: PUSH
18591: LD_INT 251
18593: GREATER
18594: IFFALSE 18683
// begin if GetWeapon ( i ) = ru_time_lapser then
18596: LD_VAR 0 1
18600: PPUSH
18601: CALL_OW 264
18605: PUSH
18606: LD_INT 49
18608: EQUAL
18609: IFFALSE 18647
// ComMoveUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) else
18611: LD_VAR 0 1
18615: PPUSH
18616: LD_INT 81
18618: PUSH
18619: LD_INT 3
18621: PUSH
18622: EMPTY
18623: LIST
18624: LIST
18625: PPUSH
18626: CALL_OW 69
18630: PPUSH
18631: LD_VAR 0 1
18635: PPUSH
18636: CALL_OW 74
18640: PPUSH
18641: CALL_OW 112
18645: GO 18681
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
18647: LD_VAR 0 1
18651: PPUSH
18652: LD_INT 81
18654: PUSH
18655: LD_INT 3
18657: PUSH
18658: EMPTY
18659: LIST
18660: LIST
18661: PPUSH
18662: CALL_OW 69
18666: PPUSH
18667: LD_VAR 0 1
18671: PPUSH
18672: CALL_OW 74
18676: PPUSH
18677: CALL_OW 115
// end else
18681: GO 18710
// if IsDead ( i ) then
18683: LD_VAR 0 1
18687: PPUSH
18688: CALL_OW 301
18692: IFFALSE 18710
// tmp := tmp diff i ;
18694: LD_ADDR_VAR 0 3
18698: PUSH
18699: LD_VAR 0 3
18703: PUSH
18704: LD_VAR 0 1
18708: DIFF
18709: ST_TO_ADDR
// end ;
18710: GO 18578
18712: POP
18713: POP
// until not tmp ;
18714: LD_VAR 0 3
18718: NOT
18719: IFFALSE 18561
// end ;
18721: PPOPN 5
18723: END
// every 12 12$30 + 11 11$30 trigger game do var i , base , tmp , target ;
18724: LD_EXP 3
18728: IFFALSE 19110
18730: GO 18732
18732: DISABLE
18733: LD_INT 0
18735: PPUSH
18736: PPUSH
18737: PPUSH
18738: PPUSH
// begin enable ;
18739: ENABLE
// base := mc_amer ;
18740: LD_ADDR_VAR 0 2
18744: PUSH
18745: LD_EXP 5
18749: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 4 ] , [ f_nation , 1 ] , [ f_btype , b_factory ] ] ) then
18750: LD_INT 22
18752: PUSH
18753: LD_INT 4
18755: PUSH
18756: EMPTY
18757: LIST
18758: LIST
18759: PUSH
18760: LD_INT 23
18762: PUSH
18763: LD_INT 1
18765: PUSH
18766: EMPTY
18767: LIST
18768: LIST
18769: PUSH
18770: LD_INT 30
18772: PUSH
18773: LD_INT 3
18775: PUSH
18776: EMPTY
18777: LIST
18778: LIST
18779: PUSH
18780: EMPTY
18781: LIST
18782: LIST
18783: LIST
18784: PPUSH
18785: CALL_OW 69
18789: NOT
18790: IFFALSE 18794
// exit ;
18792: GO 19110
// MC_InsertProduceList ( base , [ [ us_medium_tracked , engine_combustion , control_remote , us_double_gun ] , [ us_medium_tracked , engine_combustion , control_remote , us_laser ] , [ us_medium_tracked , engine_combustion , control_remote , us_rocket_launcher ] , [ us_medium_tracked , engine_combustion , control_remote , us_rocket_launcher ] , [ us_medium_tracked , engine_combustion , control_remote , us_rocket_launcher ] ] ) ;
18794: LD_VAR 0 2
18798: PPUSH
18799: LD_INT 3
18801: PUSH
18802: LD_INT 1
18804: PUSH
18805: LD_INT 2
18807: PUSH
18808: LD_INT 5
18810: PUSH
18811: EMPTY
18812: LIST
18813: LIST
18814: LIST
18815: LIST
18816: PUSH
18817: LD_INT 3
18819: PUSH
18820: LD_INT 1
18822: PUSH
18823: LD_INT 2
18825: PUSH
18826: LD_INT 9
18828: PUSH
18829: EMPTY
18830: LIST
18831: LIST
18832: LIST
18833: LIST
18834: PUSH
18835: LD_INT 3
18837: PUSH
18838: LD_INT 1
18840: PUSH
18841: LD_INT 2
18843: PUSH
18844: LD_INT 7
18846: PUSH
18847: EMPTY
18848: LIST
18849: LIST
18850: LIST
18851: LIST
18852: PUSH
18853: LD_INT 3
18855: PUSH
18856: LD_INT 1
18858: PUSH
18859: LD_INT 2
18861: PUSH
18862: LD_INT 7
18864: PUSH
18865: EMPTY
18866: LIST
18867: LIST
18868: LIST
18869: LIST
18870: PUSH
18871: LD_INT 3
18873: PUSH
18874: LD_INT 1
18876: PUSH
18877: LD_INT 2
18879: PUSH
18880: LD_INT 7
18882: PUSH
18883: EMPTY
18884: LIST
18885: LIST
18886: LIST
18887: LIST
18888: PUSH
18889: EMPTY
18890: LIST
18891: LIST
18892: LIST
18893: LIST
18894: LIST
18895: PPUSH
18896: CALL 82987 0 2
// repeat wait ( 0 0$1 ) ;
18900: LD_INT 35
18902: PPUSH
18903: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= 5 or tick mod 10 10$00 = 0 ;
18907: LD_VAR 0 2
18911: PPUSH
18912: LD_INT 1
18914: PPUSH
18915: CALL 84405 0 2
18919: PUSH
18920: LD_INT 5
18922: GREATEREQUAL
18923: PUSH
18924: LD_OWVAR 1
18928: PUSH
18929: LD_INT 21000
18931: MOD
18932: PUSH
18933: LD_INT 0
18935: EQUAL
18936: OR
18937: IFFALSE 18900
// wait ( 0 0$30 ) ;
18939: LD_INT 1050
18941: PPUSH
18942: CALL_OW 67
// tmp := MC_GetVehicles ( base , true ) ;
18946: LD_ADDR_VAR 0 3
18950: PUSH
18951: LD_VAR 0 2
18955: PPUSH
18956: LD_INT 1
18958: PPUSH
18959: CALL 84405 0 2
18963: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff tmp ) ;
18964: LD_ADDR_EXP 69
18968: PUSH
18969: LD_EXP 69
18973: PPUSH
18974: LD_VAR 0 2
18978: PPUSH
18979: LD_EXP 69
18983: PUSH
18984: LD_VAR 0 2
18988: ARRAY
18989: PUSH
18990: LD_VAR 0 3
18994: DIFF
18995: PPUSH
18996: CALL_OW 1
19000: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19001: LD_INT 35
19003: PPUSH
19004: CALL_OW 67
// for i in tmp do
19008: LD_ADDR_VAR 0 1
19012: PUSH
19013: LD_VAR 0 3
19017: PUSH
19018: FOR_IN
19019: IFFALSE 19101
// begin if GetLives ( i ) > 251 then
19021: LD_VAR 0 1
19025: PPUSH
19026: CALL_OW 256
19030: PUSH
19031: LD_INT 251
19033: GREATER
19034: IFFALSE 19072
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 4 ] ) , i ) ) else
19036: LD_VAR 0 1
19040: PPUSH
19041: LD_INT 81
19043: PUSH
19044: LD_INT 4
19046: PUSH
19047: EMPTY
19048: LIST
19049: LIST
19050: PPUSH
19051: CALL_OW 69
19055: PPUSH
19056: LD_VAR 0 1
19060: PPUSH
19061: CALL_OW 74
19065: PPUSH
19066: CALL_OW 115
19070: GO 19099
// if IsDead ( i ) then
19072: LD_VAR 0 1
19076: PPUSH
19077: CALL_OW 301
19081: IFFALSE 19099
// tmp := tmp diff i ;
19083: LD_ADDR_VAR 0 3
19087: PUSH
19088: LD_VAR 0 3
19092: PUSH
19093: LD_VAR 0 1
19097: DIFF
19098: ST_TO_ADDR
// end ;
19099: GO 19018
19101: POP
19102: POP
// until not tmp ;
19103: LD_VAR 0 3
19107: NOT
19108: IFFALSE 19001
// end ; end_of_file
19110: PPOPN 4
19112: END
// export function CustomEvent ( event ) ; begin
19113: LD_INT 0
19115: PPUSH
// end ;
19116: LD_VAR 0 2
19120: RET
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 = 4 then
19121: LD_VAR 0 1
19125: PUSH
19126: LD_INT 1
19128: EQUAL
19129: PUSH
19130: LD_VAR 0 2
19134: PUSH
19135: LD_INT 4
19137: EQUAL
19138: AND
19139: IFFALSE 19167
// begin SayRadio ( Powell , DP-Lost ) ;
19141: LD_EXP 12
19145: PPUSH
19146: LD_STRING DP-Lost
19148: PPUSH
19149: CALL_OW 94
// wait ( 0 0$2 ) ;
19153: LD_INT 70
19155: PPUSH
19156: CALL_OW 67
// YouLost ( FriendlyFire ) ;
19160: LD_STRING FriendlyFire
19162: PPUSH
19163: CALL_OW 104
// end ; end ;
19167: PPOPN 2
19169: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
19170: LD_VAR 0 1
19174: PPUSH
19175: CALL 102565 0 1
// if GameType = 1 then
19179: LD_EXP 2
19183: PUSH
19184: LD_INT 1
19186: EQUAL
19187: IFFALSE 19422
// begin if un = playerCommander then
19189: LD_VAR 0 1
19193: PUSH
19194: LD_EXP 9
19198: EQUAL
19199: IFFALSE 19208
// YouLost ( commanderDied ) ;
19201: LD_STRING commanderDied
19203: PPUSH
19204: CALL_OW 104
// if un = allyCommander then
19208: LD_VAR 0 1
19212: PUSH
19213: LD_EXP 11
19217: EQUAL
19218: IFFALSE 19227
// YouLost ( Theta ) ;
19220: LD_STRING Theta
19222: PPUSH
19223: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_building ] ] ] ) then
19227: LD_VAR 0 1
19231: PUSH
19232: LD_INT 22
19234: PUSH
19235: LD_INT 8
19237: PUSH
19238: EMPTY
19239: LIST
19240: LIST
19241: PUSH
19242: LD_INT 2
19244: PUSH
19245: LD_INT 21
19247: PUSH
19248: LD_INT 1
19250: PUSH
19251: EMPTY
19252: LIST
19253: LIST
19254: PUSH
19255: LD_INT 21
19257: PUSH
19258: LD_INT 3
19260: PUSH
19261: EMPTY
19262: LIST
19263: LIST
19264: PUSH
19265: EMPTY
19266: LIST
19267: LIST
19268: LIST
19269: PUSH
19270: EMPTY
19271: LIST
19272: LIST
19273: PPUSH
19274: CALL_OW 69
19278: IN
19279: IFFALSE 19295
// legDestCounter := legDestCounter + 1 ;
19281: LD_ADDR_EXP 18
19285: PUSH
19286: LD_EXP 18
19290: PUSH
19291: LD_INT 1
19293: PLUS
19294: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_building ] ] ] ) then
19295: LD_VAR 0 1
19299: PUSH
19300: LD_INT 22
19302: PUSH
19303: LD_INT 4
19305: PUSH
19306: EMPTY
19307: LIST
19308: LIST
19309: PUSH
19310: LD_INT 2
19312: PUSH
19313: LD_INT 21
19315: PUSH
19316: LD_INT 1
19318: PUSH
19319: EMPTY
19320: LIST
19321: LIST
19322: PUSH
19323: LD_INT 21
19325: PUSH
19326: LD_INT 3
19328: PUSH
19329: EMPTY
19330: LIST
19331: LIST
19332: PUSH
19333: EMPTY
19334: LIST
19335: LIST
19336: LIST
19337: PUSH
19338: EMPTY
19339: LIST
19340: LIST
19341: PPUSH
19342: CALL_OW 69
19346: IN
19347: IFFALSE 19363
// allyDestCounter := allyDestCounter + 1 ;
19349: LD_ADDR_EXP 22
19353: PUSH
19354: LD_EXP 22
19358: PUSH
19359: LD_INT 1
19361: PLUS
19362: ST_TO_ADDR
// if un in ruOutpost then
19363: LD_VAR 0 1
19367: PUSH
19368: LD_EXP 14
19372: IN
19373: IFFALSE 19422
// begin ruOutpost := ruOutpost diff un ;
19375: LD_ADDR_EXP 14
19379: PUSH
19380: LD_EXP 14
19384: PUSH
19385: LD_VAR 0 1
19389: DIFF
19390: ST_TO_ADDR
// ruEscape := Replace ( ruEscape , 1 , ruEscape [ 1 ] + 1 ) ;
19391: LD_ADDR_EXP 15
19395: PUSH
19396: LD_EXP 15
19400: PPUSH
19401: LD_INT 1
19403: PPUSH
19404: LD_EXP 15
19408: PUSH
19409: LD_INT 1
19411: ARRAY
19412: PUSH
19413: LD_INT 1
19415: PLUS
19416: PPUSH
19417: CALL_OW 1
19421: ST_TO_ADDR
// end ; end ; MCE_UnitDestroyed ( un ) ;
19422: LD_VAR 0 1
19426: PPUSH
19427: CALL 86407 0 1
// end ;
19431: PPOPN 1
19433: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
19434: LD_VAR 0 1
19438: PPUSH
19439: LD_VAR 0 2
19443: PPUSH
19444: CALL 88741 0 2
// end ;
19448: PPOPN 2
19450: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
19451: LD_VAR 0 1
19455: PPUSH
19456: CALL 87809 0 1
// end ;
19460: PPOPN 1
19462: END
// on BuildingComplete ( building ) do begin MCE_BuildingComplete ( building ) ;
19463: LD_VAR 0 1
19467: PPUSH
19468: CALL 88050 0 1
// end ;
19472: PPOPN 1
19474: END
// on ResearchComplete ( tech , lab ) do begin if tech = tech_LasDouble and GetSide ( lab ) = 1 then
19475: LD_VAR 0 1
19479: PUSH
19480: LD_INT 14
19482: EQUAL
19483: PUSH
19484: LD_VAR 0 2
19488: PPUSH
19489: CALL_OW 255
19493: PUSH
19494: LD_INT 1
19496: EQUAL
19497: AND
19498: IFFALSE 19539
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Laser ) ;
19500: LD_EXP 9
19504: PPUSH
19505: LD_STRING D
19507: PUSH
19508: LD_STRING I
19510: PUSH
19511: LD_STRING J
19513: PUSH
19514: LD_STRING S
19516: PUSH
19517: EMPTY
19518: LIST
19519: LIST
19520: LIST
19521: PUSH
19522: LD_EXP 25
19526: ARRAY
19527: STR
19528: PUSH
19529: LD_STRING -1-Laser
19531: STR
19532: PPUSH
19533: CALL_OW 88
// exit ;
19537: GO 19681
// end ; if tech = tech_MatDet and GetSide ( lab ) = 1 then
19539: LD_VAR 0 1
19543: PUSH
19544: LD_INT 7
19546: EQUAL
19547: PUSH
19548: LD_VAR 0 2
19552: PPUSH
19553: CALL_OW 255
19557: PUSH
19558: LD_INT 1
19560: EQUAL
19561: AND
19562: IFFALSE 19603
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Materialization ) ;
19564: LD_EXP 9
19568: PPUSH
19569: LD_STRING D
19571: PUSH
19572: LD_STRING I
19574: PUSH
19575: LD_STRING J
19577: PUSH
19578: LD_STRING S
19580: PUSH
19581: EMPTY
19582: LIST
19583: LIST
19584: LIST
19585: PUSH
19586: LD_EXP 25
19590: ARRAY
19591: STR
19592: PUSH
19593: LD_STRING -1-Materialization
19595: STR
19596: PPUSH
19597: CALL_OW 88
// exit ;
19601: GO 19681
// end ; if tech = tech_SibFiss and GetSide ( lab ) = 1 then
19603: LD_VAR 0 1
19607: PUSH
19608: LD_INT 25
19610: EQUAL
19611: PUSH
19612: LD_VAR 0 2
19616: PPUSH
19617: CALL_OW 255
19621: PUSH
19622: LD_INT 1
19624: EQUAL
19625: AND
19626: IFFALSE 19667
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Rocket ) ;
19628: LD_EXP 9
19632: PPUSH
19633: LD_STRING D
19635: PUSH
19636: LD_STRING I
19638: PUSH
19639: LD_STRING J
19641: PUSH
19642: LD_STRING S
19644: PUSH
19645: EMPTY
19646: LIST
19647: LIST
19648: LIST
19649: PUSH
19650: LD_EXP 25
19654: ARRAY
19655: STR
19656: PUSH
19657: LD_STRING -1-Rocket
19659: STR
19660: PPUSH
19661: CALL_OW 88
// exit ;
19665: GO 19681
// end ; MCE_ResearchComplete ( tech , lab ) ;
19667: LD_VAR 0 1
19671: PPUSH
19672: LD_VAR 0 2
19676: PPUSH
19677: CALL 86103 0 2
// end ;
19681: PPOPN 2
19683: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
19684: LD_VAR 0 1
19688: PPUSH
19689: LD_VAR 0 2
19693: PPUSH
19694: LD_VAR 0 3
19698: PPUSH
19699: LD_VAR 0 4
19703: PPUSH
19704: LD_VAR 0 5
19708: PPUSH
19709: CALL 85723 0 5
// end ;
19713: PPOPN 5
19715: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
19716: LD_VAR 0 1
19720: PPUSH
19721: LD_VAR 0 2
19725: PPUSH
19726: CALL 85304 0 2
// end ;
19730: PPOPN 2
19732: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
19733: LD_VAR 0 1
19737: PPUSH
19738: LD_VAR 0 2
19742: PPUSH
19743: LD_VAR 0 3
19747: PPUSH
19748: LD_VAR 0 4
19752: PPUSH
19753: CALL 85142 0 4
// end ;
19757: PPOPN 4
19759: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
19760: LD_VAR 0 1
19764: PPUSH
19765: LD_VAR 0 2
19769: PPUSH
19770: LD_VAR 0 3
19774: PPUSH
19775: CALL 84917 0 3
// end ;
19779: PPOPN 3
19781: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
19782: LD_VAR 0 1
19786: PPUSH
19787: LD_VAR 0 2
19791: PPUSH
19792: CALL 84802 0 2
// end ;
19796: PPOPN 2
19798: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
19799: LD_VAR 0 1
19803: PPUSH
19804: LD_VAR 0 2
19808: PPUSH
19809: CALL 89036 0 2
// end ;
19813: PPOPN 2
19815: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
19816: LD_VAR 0 1
19820: PPUSH
19821: LD_VAR 0 2
19825: PPUSH
19826: LD_VAR 0 3
19830: PPUSH
19831: LD_VAR 0 4
19835: PPUSH
19836: CALL 89252 0 4
// end ;
19840: PPOPN 4
19842: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
19843: LD_VAR 0 1
19847: PPUSH
19848: LD_VAR 0 2
19852: PPUSH
19853: CALL 84611 0 2
// end ;
19857: PPOPN 2
19859: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
19860: LD_VAR 0 1
19864: PPUSH
19865: CALL 102671 0 1
// end ; end_of_file
19869: PPOPN 1
19871: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
19872: LD_INT 0
19874: PPUSH
19875: PPUSH
// if exist_mode then
19876: LD_VAR 0 2
19880: IFFALSE 19905
// unit := CreateCharacter ( prefix & ident ) else
19882: LD_ADDR_VAR 0 5
19886: PUSH
19887: LD_VAR 0 3
19891: PUSH
19892: LD_VAR 0 1
19896: STR
19897: PPUSH
19898: CALL_OW 34
19902: ST_TO_ADDR
19903: GO 19920
// unit := NewCharacter ( ident ) ;
19905: LD_ADDR_VAR 0 5
19909: PUSH
19910: LD_VAR 0 1
19914: PPUSH
19915: CALL_OW 25
19919: ST_TO_ADDR
// result := unit ;
19920: LD_ADDR_VAR 0 4
19924: PUSH
19925: LD_VAR 0 5
19929: ST_TO_ADDR
// end ;
19930: LD_VAR 0 4
19934: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
19935: LD_INT 0
19937: PPUSH
19938: PPUSH
// if not side or not nation then
19939: LD_VAR 0 1
19943: NOT
19944: PUSH
19945: LD_VAR 0 2
19949: NOT
19950: OR
19951: IFFALSE 19955
// exit ;
19953: GO 20723
// case nation of nation_american :
19955: LD_VAR 0 2
19959: PUSH
19960: LD_INT 1
19962: DOUBLE
19963: EQUAL
19964: IFTRUE 19968
19966: GO 20182
19968: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
19969: LD_ADDR_VAR 0 4
19973: PUSH
19974: LD_INT 35
19976: PUSH
19977: LD_INT 45
19979: PUSH
19980: LD_INT 46
19982: PUSH
19983: LD_INT 47
19985: PUSH
19986: LD_INT 82
19988: PUSH
19989: LD_INT 83
19991: PUSH
19992: LD_INT 84
19994: PUSH
19995: LD_INT 85
19997: PUSH
19998: LD_INT 86
20000: PUSH
20001: LD_INT 1
20003: PUSH
20004: LD_INT 2
20006: PUSH
20007: LD_INT 6
20009: PUSH
20010: LD_INT 15
20012: PUSH
20013: LD_INT 16
20015: PUSH
20016: LD_INT 7
20018: PUSH
20019: LD_INT 12
20021: PUSH
20022: LD_INT 13
20024: PUSH
20025: LD_INT 10
20027: PUSH
20028: LD_INT 14
20030: PUSH
20031: LD_INT 20
20033: PUSH
20034: LD_INT 21
20036: PUSH
20037: LD_INT 22
20039: PUSH
20040: LD_INT 25
20042: PUSH
20043: LD_INT 32
20045: PUSH
20046: LD_INT 27
20048: PUSH
20049: LD_INT 36
20051: PUSH
20052: LD_INT 69
20054: PUSH
20055: LD_INT 39
20057: PUSH
20058: LD_INT 34
20060: PUSH
20061: LD_INT 40
20063: PUSH
20064: LD_INT 48
20066: PUSH
20067: LD_INT 49
20069: PUSH
20070: LD_INT 50
20072: PUSH
20073: LD_INT 51
20075: PUSH
20076: LD_INT 52
20078: PUSH
20079: LD_INT 53
20081: PUSH
20082: LD_INT 54
20084: PUSH
20085: LD_INT 55
20087: PUSH
20088: LD_INT 56
20090: PUSH
20091: LD_INT 57
20093: PUSH
20094: LD_INT 58
20096: PUSH
20097: LD_INT 59
20099: PUSH
20100: LD_INT 60
20102: PUSH
20103: LD_INT 61
20105: PUSH
20106: LD_INT 62
20108: PUSH
20109: LD_INT 80
20111: PUSH
20112: LD_INT 82
20114: PUSH
20115: LD_INT 83
20117: PUSH
20118: LD_INT 84
20120: PUSH
20121: LD_INT 85
20123: PUSH
20124: LD_INT 86
20126: PUSH
20127: EMPTY
20128: LIST
20129: LIST
20130: LIST
20131: LIST
20132: LIST
20133: LIST
20134: LIST
20135: LIST
20136: LIST
20137: LIST
20138: LIST
20139: LIST
20140: LIST
20141: LIST
20142: LIST
20143: LIST
20144: LIST
20145: LIST
20146: LIST
20147: LIST
20148: LIST
20149: LIST
20150: LIST
20151: LIST
20152: LIST
20153: LIST
20154: LIST
20155: LIST
20156: LIST
20157: LIST
20158: LIST
20159: LIST
20160: LIST
20161: LIST
20162: LIST
20163: LIST
20164: LIST
20165: LIST
20166: LIST
20167: LIST
20168: LIST
20169: LIST
20170: LIST
20171: LIST
20172: LIST
20173: LIST
20174: LIST
20175: LIST
20176: LIST
20177: LIST
20178: LIST
20179: ST_TO_ADDR
20180: GO 20647
20182: LD_INT 2
20184: DOUBLE
20185: EQUAL
20186: IFTRUE 20190
20188: GO 20416
20190: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
20191: LD_ADDR_VAR 0 4
20195: PUSH
20196: LD_INT 35
20198: PUSH
20199: LD_INT 45
20201: PUSH
20202: LD_INT 46
20204: PUSH
20205: LD_INT 47
20207: PUSH
20208: LD_INT 82
20210: PUSH
20211: LD_INT 83
20213: PUSH
20214: LD_INT 84
20216: PUSH
20217: LD_INT 85
20219: PUSH
20220: LD_INT 87
20222: PUSH
20223: LD_INT 70
20225: PUSH
20226: LD_INT 1
20228: PUSH
20229: LD_INT 11
20231: PUSH
20232: LD_INT 3
20234: PUSH
20235: LD_INT 4
20237: PUSH
20238: LD_INT 5
20240: PUSH
20241: LD_INT 6
20243: PUSH
20244: LD_INT 15
20246: PUSH
20247: LD_INT 18
20249: PUSH
20250: LD_INT 7
20252: PUSH
20253: LD_INT 17
20255: PUSH
20256: LD_INT 8
20258: PUSH
20259: LD_INT 20
20261: PUSH
20262: LD_INT 21
20264: PUSH
20265: LD_INT 22
20267: PUSH
20268: LD_INT 72
20270: PUSH
20271: LD_INT 26
20273: PUSH
20274: LD_INT 69
20276: PUSH
20277: LD_INT 39
20279: PUSH
20280: LD_INT 40
20282: PUSH
20283: LD_INT 41
20285: PUSH
20286: LD_INT 42
20288: PUSH
20289: LD_INT 43
20291: PUSH
20292: LD_INT 48
20294: PUSH
20295: LD_INT 49
20297: PUSH
20298: LD_INT 50
20300: PUSH
20301: LD_INT 51
20303: PUSH
20304: LD_INT 52
20306: PUSH
20307: LD_INT 53
20309: PUSH
20310: LD_INT 54
20312: PUSH
20313: LD_INT 55
20315: PUSH
20316: LD_INT 56
20318: PUSH
20319: LD_INT 60
20321: PUSH
20322: LD_INT 61
20324: PUSH
20325: LD_INT 62
20327: PUSH
20328: LD_INT 66
20330: PUSH
20331: LD_INT 67
20333: PUSH
20334: LD_INT 68
20336: PUSH
20337: LD_INT 81
20339: PUSH
20340: LD_INT 82
20342: PUSH
20343: LD_INT 83
20345: PUSH
20346: LD_INT 84
20348: PUSH
20349: LD_INT 85
20351: PUSH
20352: LD_INT 87
20354: PUSH
20355: LD_INT 88
20357: PUSH
20358: EMPTY
20359: LIST
20360: LIST
20361: LIST
20362: LIST
20363: LIST
20364: LIST
20365: LIST
20366: LIST
20367: LIST
20368: LIST
20369: LIST
20370: LIST
20371: LIST
20372: LIST
20373: LIST
20374: LIST
20375: LIST
20376: LIST
20377: LIST
20378: LIST
20379: LIST
20380: LIST
20381: LIST
20382: LIST
20383: LIST
20384: LIST
20385: LIST
20386: LIST
20387: LIST
20388: LIST
20389: LIST
20390: LIST
20391: LIST
20392: LIST
20393: LIST
20394: LIST
20395: LIST
20396: LIST
20397: LIST
20398: LIST
20399: LIST
20400: LIST
20401: LIST
20402: LIST
20403: LIST
20404: LIST
20405: LIST
20406: LIST
20407: LIST
20408: LIST
20409: LIST
20410: LIST
20411: LIST
20412: LIST
20413: ST_TO_ADDR
20414: GO 20647
20416: LD_INT 3
20418: DOUBLE
20419: EQUAL
20420: IFTRUE 20424
20422: GO 20646
20424: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
20425: LD_ADDR_VAR 0 4
20429: PUSH
20430: LD_INT 46
20432: PUSH
20433: LD_INT 47
20435: PUSH
20436: LD_INT 1
20438: PUSH
20439: LD_INT 2
20441: PUSH
20442: LD_INT 82
20444: PUSH
20445: LD_INT 83
20447: PUSH
20448: LD_INT 84
20450: PUSH
20451: LD_INT 85
20453: PUSH
20454: LD_INT 86
20456: PUSH
20457: LD_INT 11
20459: PUSH
20460: LD_INT 9
20462: PUSH
20463: LD_INT 20
20465: PUSH
20466: LD_INT 19
20468: PUSH
20469: LD_INT 21
20471: PUSH
20472: LD_INT 24
20474: PUSH
20475: LD_INT 22
20477: PUSH
20478: LD_INT 25
20480: PUSH
20481: LD_INT 28
20483: PUSH
20484: LD_INT 29
20486: PUSH
20487: LD_INT 30
20489: PUSH
20490: LD_INT 31
20492: PUSH
20493: LD_INT 37
20495: PUSH
20496: LD_INT 38
20498: PUSH
20499: LD_INT 32
20501: PUSH
20502: LD_INT 27
20504: PUSH
20505: LD_INT 33
20507: PUSH
20508: LD_INT 69
20510: PUSH
20511: LD_INT 39
20513: PUSH
20514: LD_INT 34
20516: PUSH
20517: LD_INT 40
20519: PUSH
20520: LD_INT 71
20522: PUSH
20523: LD_INT 23
20525: PUSH
20526: LD_INT 44
20528: PUSH
20529: LD_INT 48
20531: PUSH
20532: LD_INT 49
20534: PUSH
20535: LD_INT 50
20537: PUSH
20538: LD_INT 51
20540: PUSH
20541: LD_INT 52
20543: PUSH
20544: LD_INT 53
20546: PUSH
20547: LD_INT 54
20549: PUSH
20550: LD_INT 55
20552: PUSH
20553: LD_INT 56
20555: PUSH
20556: LD_INT 57
20558: PUSH
20559: LD_INT 58
20561: PUSH
20562: LD_INT 59
20564: PUSH
20565: LD_INT 63
20567: PUSH
20568: LD_INT 64
20570: PUSH
20571: LD_INT 65
20573: PUSH
20574: LD_INT 82
20576: PUSH
20577: LD_INT 83
20579: PUSH
20580: LD_INT 84
20582: PUSH
20583: LD_INT 85
20585: PUSH
20586: LD_INT 86
20588: PUSH
20589: EMPTY
20590: LIST
20591: LIST
20592: LIST
20593: LIST
20594: LIST
20595: LIST
20596: LIST
20597: LIST
20598: LIST
20599: LIST
20600: LIST
20601: LIST
20602: LIST
20603: LIST
20604: LIST
20605: LIST
20606: LIST
20607: LIST
20608: LIST
20609: LIST
20610: LIST
20611: LIST
20612: LIST
20613: LIST
20614: LIST
20615: LIST
20616: LIST
20617: LIST
20618: LIST
20619: LIST
20620: LIST
20621: LIST
20622: LIST
20623: LIST
20624: LIST
20625: LIST
20626: LIST
20627: LIST
20628: LIST
20629: LIST
20630: LIST
20631: LIST
20632: LIST
20633: LIST
20634: LIST
20635: LIST
20636: LIST
20637: LIST
20638: LIST
20639: LIST
20640: LIST
20641: LIST
20642: LIST
20643: ST_TO_ADDR
20644: GO 20647
20646: POP
// if state > - 1 and state < 3 then
20647: LD_VAR 0 3
20651: PUSH
20652: LD_INT 1
20654: NEG
20655: GREATER
20656: PUSH
20657: LD_VAR 0 3
20661: PUSH
20662: LD_INT 3
20664: LESS
20665: AND
20666: IFFALSE 20723
// for i in result do
20668: LD_ADDR_VAR 0 5
20672: PUSH
20673: LD_VAR 0 4
20677: PUSH
20678: FOR_IN
20679: IFFALSE 20721
// if GetTech ( i , side ) <> state then
20681: LD_VAR 0 5
20685: PPUSH
20686: LD_VAR 0 1
20690: PPUSH
20691: CALL_OW 321
20695: PUSH
20696: LD_VAR 0 3
20700: NONEQUAL
20701: IFFALSE 20719
// result := result diff i ;
20703: LD_ADDR_VAR 0 4
20707: PUSH
20708: LD_VAR 0 4
20712: PUSH
20713: LD_VAR 0 5
20717: DIFF
20718: ST_TO_ADDR
20719: GO 20678
20721: POP
20722: POP
// end ;
20723: LD_VAR 0 4
20727: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
20728: LD_INT 0
20730: PPUSH
20731: PPUSH
20732: PPUSH
// result := true ;
20733: LD_ADDR_VAR 0 3
20737: PUSH
20738: LD_INT 1
20740: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
20741: LD_ADDR_VAR 0 5
20745: PUSH
20746: LD_VAR 0 2
20750: PPUSH
20751: CALL_OW 480
20755: ST_TO_ADDR
// if not tmp then
20756: LD_VAR 0 5
20760: NOT
20761: IFFALSE 20765
// exit ;
20763: GO 20814
// for i in tmp do
20765: LD_ADDR_VAR 0 4
20769: PUSH
20770: LD_VAR 0 5
20774: PUSH
20775: FOR_IN
20776: IFFALSE 20812
// if GetTech ( i , side ) <> state_researched then
20778: LD_VAR 0 4
20782: PPUSH
20783: LD_VAR 0 1
20787: PPUSH
20788: CALL_OW 321
20792: PUSH
20793: LD_INT 2
20795: NONEQUAL
20796: IFFALSE 20810
// begin result := false ;
20798: LD_ADDR_VAR 0 3
20802: PUSH
20803: LD_INT 0
20805: ST_TO_ADDR
// exit ;
20806: POP
20807: POP
20808: GO 20814
// end ;
20810: GO 20775
20812: POP
20813: POP
// end ;
20814: LD_VAR 0 3
20818: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
20819: LD_INT 0
20821: PPUSH
20822: PPUSH
20823: PPUSH
20824: PPUSH
20825: PPUSH
20826: PPUSH
20827: PPUSH
20828: PPUSH
20829: PPUSH
20830: PPUSH
20831: PPUSH
20832: PPUSH
20833: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
20834: LD_VAR 0 1
20838: NOT
20839: PUSH
20840: LD_VAR 0 1
20844: PPUSH
20845: CALL_OW 257
20849: PUSH
20850: LD_INT 9
20852: NONEQUAL
20853: OR
20854: IFFALSE 20858
// exit ;
20856: GO 21431
// side := GetSide ( unit ) ;
20858: LD_ADDR_VAR 0 9
20862: PUSH
20863: LD_VAR 0 1
20867: PPUSH
20868: CALL_OW 255
20872: ST_TO_ADDR
// tech_space := tech_spacanom ;
20873: LD_ADDR_VAR 0 12
20877: PUSH
20878: LD_INT 29
20880: ST_TO_ADDR
// tech_time := tech_taurad ;
20881: LD_ADDR_VAR 0 13
20885: PUSH
20886: LD_INT 28
20888: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
20889: LD_ADDR_VAR 0 11
20893: PUSH
20894: LD_VAR 0 1
20898: PPUSH
20899: CALL_OW 310
20903: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
20904: LD_VAR 0 11
20908: PPUSH
20909: CALL_OW 247
20913: PUSH
20914: LD_INT 2
20916: EQUAL
20917: IFFALSE 20921
// exit ;
20919: GO 21431
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
20921: LD_ADDR_VAR 0 8
20925: PUSH
20926: LD_INT 81
20928: PUSH
20929: LD_VAR 0 9
20933: PUSH
20934: EMPTY
20935: LIST
20936: LIST
20937: PUSH
20938: LD_INT 3
20940: PUSH
20941: LD_INT 21
20943: PUSH
20944: LD_INT 3
20946: PUSH
20947: EMPTY
20948: LIST
20949: LIST
20950: PUSH
20951: EMPTY
20952: LIST
20953: LIST
20954: PUSH
20955: EMPTY
20956: LIST
20957: LIST
20958: PPUSH
20959: CALL_OW 69
20963: ST_TO_ADDR
// if not tmp then
20964: LD_VAR 0 8
20968: NOT
20969: IFFALSE 20973
// exit ;
20971: GO 21431
// if in_unit then
20973: LD_VAR 0 11
20977: IFFALSE 21001
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
20979: LD_ADDR_VAR 0 10
20983: PUSH
20984: LD_VAR 0 8
20988: PPUSH
20989: LD_VAR 0 11
20993: PPUSH
20994: CALL_OW 74
20998: ST_TO_ADDR
20999: GO 21021
// enemy := NearestUnitToUnit ( tmp , unit ) ;
21001: LD_ADDR_VAR 0 10
21005: PUSH
21006: LD_VAR 0 8
21010: PPUSH
21011: LD_VAR 0 1
21015: PPUSH
21016: CALL_OW 74
21020: ST_TO_ADDR
// if not enemy then
21021: LD_VAR 0 10
21025: NOT
21026: IFFALSE 21030
// exit ;
21028: GO 21431
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
21030: LD_VAR 0 11
21034: PUSH
21035: LD_VAR 0 11
21039: PPUSH
21040: LD_VAR 0 10
21044: PPUSH
21045: CALL_OW 296
21049: PUSH
21050: LD_INT 13
21052: GREATER
21053: AND
21054: PUSH
21055: LD_VAR 0 1
21059: PPUSH
21060: LD_VAR 0 10
21064: PPUSH
21065: CALL_OW 296
21069: PUSH
21070: LD_INT 12
21072: GREATER
21073: OR
21074: IFFALSE 21078
// exit ;
21076: GO 21431
// missile := [ 1 ] ;
21078: LD_ADDR_VAR 0 14
21082: PUSH
21083: LD_INT 1
21085: PUSH
21086: EMPTY
21087: LIST
21088: ST_TO_ADDR
// if Researched ( side , tech_space ) then
21089: LD_VAR 0 9
21093: PPUSH
21094: LD_VAR 0 12
21098: PPUSH
21099: CALL_OW 325
21103: IFFALSE 21132
// missile := Insert ( missile , missile + 1 , 2 ) ;
21105: LD_ADDR_VAR 0 14
21109: PUSH
21110: LD_VAR 0 14
21114: PPUSH
21115: LD_VAR 0 14
21119: PUSH
21120: LD_INT 1
21122: PLUS
21123: PPUSH
21124: LD_INT 2
21126: PPUSH
21127: CALL_OW 2
21131: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
21132: LD_VAR 0 9
21136: PPUSH
21137: LD_VAR 0 13
21141: PPUSH
21142: CALL_OW 325
21146: PUSH
21147: LD_VAR 0 10
21151: PPUSH
21152: CALL_OW 255
21156: PPUSH
21157: LD_VAR 0 13
21161: PPUSH
21162: CALL_OW 325
21166: NOT
21167: AND
21168: IFFALSE 21197
// missile := Insert ( missile , missile + 1 , 3 ) ;
21170: LD_ADDR_VAR 0 14
21174: PUSH
21175: LD_VAR 0 14
21179: PPUSH
21180: LD_VAR 0 14
21184: PUSH
21185: LD_INT 1
21187: PLUS
21188: PPUSH
21189: LD_INT 3
21191: PPUSH
21192: CALL_OW 2
21196: ST_TO_ADDR
// if missile < 2 then
21197: LD_VAR 0 14
21201: PUSH
21202: LD_INT 2
21204: LESS
21205: IFFALSE 21209
// exit ;
21207: GO 21431
// x := GetX ( enemy ) ;
21209: LD_ADDR_VAR 0 4
21213: PUSH
21214: LD_VAR 0 10
21218: PPUSH
21219: CALL_OW 250
21223: ST_TO_ADDR
// y := GetY ( enemy ) ;
21224: LD_ADDR_VAR 0 5
21228: PUSH
21229: LD_VAR 0 10
21233: PPUSH
21234: CALL_OW 251
21238: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
21239: LD_ADDR_VAR 0 6
21243: PUSH
21244: LD_VAR 0 4
21248: PUSH
21249: LD_INT 1
21251: NEG
21252: PPUSH
21253: LD_INT 1
21255: PPUSH
21256: CALL_OW 12
21260: PLUS
21261: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
21262: LD_ADDR_VAR 0 7
21266: PUSH
21267: LD_VAR 0 5
21271: PUSH
21272: LD_INT 1
21274: NEG
21275: PPUSH
21276: LD_INT 1
21278: PPUSH
21279: CALL_OW 12
21283: PLUS
21284: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21285: LD_VAR 0 6
21289: PPUSH
21290: LD_VAR 0 7
21294: PPUSH
21295: CALL_OW 488
21299: NOT
21300: IFFALSE 21322
// begin _x := x ;
21302: LD_ADDR_VAR 0 6
21306: PUSH
21307: LD_VAR 0 4
21311: ST_TO_ADDR
// _y := y ;
21312: LD_ADDR_VAR 0 7
21316: PUSH
21317: LD_VAR 0 5
21321: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
21322: LD_ADDR_VAR 0 3
21326: PUSH
21327: LD_INT 1
21329: PPUSH
21330: LD_VAR 0 14
21334: PPUSH
21335: CALL_OW 12
21339: ST_TO_ADDR
// case i of 1 :
21340: LD_VAR 0 3
21344: PUSH
21345: LD_INT 1
21347: DOUBLE
21348: EQUAL
21349: IFTRUE 21353
21351: GO 21370
21353: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
21354: LD_VAR 0 1
21358: PPUSH
21359: LD_VAR 0 10
21363: PPUSH
21364: CALL_OW 115
21368: GO 21431
21370: LD_INT 2
21372: DOUBLE
21373: EQUAL
21374: IFTRUE 21378
21376: GO 21400
21378: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
21379: LD_VAR 0 1
21383: PPUSH
21384: LD_VAR 0 6
21388: PPUSH
21389: LD_VAR 0 7
21393: PPUSH
21394: CALL_OW 153
21398: GO 21431
21400: LD_INT 3
21402: DOUBLE
21403: EQUAL
21404: IFTRUE 21408
21406: GO 21430
21408: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
21409: LD_VAR 0 1
21413: PPUSH
21414: LD_VAR 0 6
21418: PPUSH
21419: LD_VAR 0 7
21423: PPUSH
21424: CALL_OW 154
21428: GO 21431
21430: POP
// end ;
21431: LD_VAR 0 2
21435: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
21436: LD_INT 0
21438: PPUSH
21439: PPUSH
21440: PPUSH
21441: PPUSH
21442: PPUSH
21443: PPUSH
// if not unit or not building then
21444: LD_VAR 0 1
21448: NOT
21449: PUSH
21450: LD_VAR 0 2
21454: NOT
21455: OR
21456: IFFALSE 21460
// exit ;
21458: GO 21618
// x := GetX ( building ) ;
21460: LD_ADDR_VAR 0 5
21464: PUSH
21465: LD_VAR 0 2
21469: PPUSH
21470: CALL_OW 250
21474: ST_TO_ADDR
// y := GetY ( building ) ;
21475: LD_ADDR_VAR 0 6
21479: PUSH
21480: LD_VAR 0 2
21484: PPUSH
21485: CALL_OW 251
21489: ST_TO_ADDR
// for i = 0 to 5 do
21490: LD_ADDR_VAR 0 4
21494: PUSH
21495: DOUBLE
21496: LD_INT 0
21498: DEC
21499: ST_TO_ADDR
21500: LD_INT 5
21502: PUSH
21503: FOR_TO
21504: IFFALSE 21616
// begin _x := ShiftX ( x , i , 3 ) ;
21506: LD_ADDR_VAR 0 7
21510: PUSH
21511: LD_VAR 0 5
21515: PPUSH
21516: LD_VAR 0 4
21520: PPUSH
21521: LD_INT 3
21523: PPUSH
21524: CALL_OW 272
21528: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
21529: LD_ADDR_VAR 0 8
21533: PUSH
21534: LD_VAR 0 6
21538: PPUSH
21539: LD_VAR 0 4
21543: PPUSH
21544: LD_INT 3
21546: PPUSH
21547: CALL_OW 273
21551: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21552: LD_VAR 0 7
21556: PPUSH
21557: LD_VAR 0 8
21561: PPUSH
21562: CALL_OW 488
21566: NOT
21567: IFFALSE 21571
// continue ;
21569: GO 21503
// if HexInfo ( _x , _y ) = 0 then
21571: LD_VAR 0 7
21575: PPUSH
21576: LD_VAR 0 8
21580: PPUSH
21581: CALL_OW 428
21585: PUSH
21586: LD_INT 0
21588: EQUAL
21589: IFFALSE 21614
// begin ComMoveXY ( unit , _x , _y ) ;
21591: LD_VAR 0 1
21595: PPUSH
21596: LD_VAR 0 7
21600: PPUSH
21601: LD_VAR 0 8
21605: PPUSH
21606: CALL_OW 111
// exit ;
21610: POP
21611: POP
21612: GO 21618
// end ; end ;
21614: GO 21503
21616: POP
21617: POP
// end ;
21618: LD_VAR 0 3
21622: RET
// export function ScanBase ( side , base_area ) ; begin
21623: LD_INT 0
21625: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
21626: LD_ADDR_VAR 0 3
21630: PUSH
21631: LD_VAR 0 2
21635: PPUSH
21636: LD_INT 81
21638: PUSH
21639: LD_VAR 0 1
21643: PUSH
21644: EMPTY
21645: LIST
21646: LIST
21647: PPUSH
21648: CALL_OW 70
21652: ST_TO_ADDR
// end ;
21653: LD_VAR 0 3
21657: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
21658: LD_INT 0
21660: PPUSH
21661: PPUSH
21662: PPUSH
21663: PPUSH
// result := false ;
21664: LD_ADDR_VAR 0 2
21668: PUSH
21669: LD_INT 0
21671: ST_TO_ADDR
// side := GetSide ( unit ) ;
21672: LD_ADDR_VAR 0 3
21676: PUSH
21677: LD_VAR 0 1
21681: PPUSH
21682: CALL_OW 255
21686: ST_TO_ADDR
// nat := GetNation ( unit ) ;
21687: LD_ADDR_VAR 0 4
21691: PUSH
21692: LD_VAR 0 1
21696: PPUSH
21697: CALL_OW 248
21701: ST_TO_ADDR
// case nat of 1 :
21702: LD_VAR 0 4
21706: PUSH
21707: LD_INT 1
21709: DOUBLE
21710: EQUAL
21711: IFTRUE 21715
21713: GO 21726
21715: POP
// tech := tech_lassight ; 2 :
21716: LD_ADDR_VAR 0 5
21720: PUSH
21721: LD_INT 12
21723: ST_TO_ADDR
21724: GO 21765
21726: LD_INT 2
21728: DOUBLE
21729: EQUAL
21730: IFTRUE 21734
21732: GO 21745
21734: POP
// tech := tech_mortar ; 3 :
21735: LD_ADDR_VAR 0 5
21739: PUSH
21740: LD_INT 41
21742: ST_TO_ADDR
21743: GO 21765
21745: LD_INT 3
21747: DOUBLE
21748: EQUAL
21749: IFTRUE 21753
21751: GO 21764
21753: POP
// tech := tech_bazooka ; end ;
21754: LD_ADDR_VAR 0 5
21758: PUSH
21759: LD_INT 44
21761: ST_TO_ADDR
21762: GO 21765
21764: POP
// if Researched ( side , tech ) then
21765: LD_VAR 0 3
21769: PPUSH
21770: LD_VAR 0 5
21774: PPUSH
21775: CALL_OW 325
21779: IFFALSE 21806
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
21781: LD_ADDR_VAR 0 2
21785: PUSH
21786: LD_INT 5
21788: PUSH
21789: LD_INT 8
21791: PUSH
21792: LD_INT 9
21794: PUSH
21795: EMPTY
21796: LIST
21797: LIST
21798: LIST
21799: PUSH
21800: LD_VAR 0 4
21804: ARRAY
21805: ST_TO_ADDR
// end ;
21806: LD_VAR 0 2
21810: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
21811: LD_INT 0
21813: PPUSH
21814: PPUSH
21815: PPUSH
// if not mines then
21816: LD_VAR 0 2
21820: NOT
21821: IFFALSE 21825
// exit ;
21823: GO 21969
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21825: LD_ADDR_VAR 0 5
21829: PUSH
21830: LD_INT 81
21832: PUSH
21833: LD_VAR 0 1
21837: PUSH
21838: EMPTY
21839: LIST
21840: LIST
21841: PUSH
21842: LD_INT 3
21844: PUSH
21845: LD_INT 21
21847: PUSH
21848: LD_INT 3
21850: PUSH
21851: EMPTY
21852: LIST
21853: LIST
21854: PUSH
21855: EMPTY
21856: LIST
21857: LIST
21858: PUSH
21859: EMPTY
21860: LIST
21861: LIST
21862: PPUSH
21863: CALL_OW 69
21867: ST_TO_ADDR
// for i in mines do
21868: LD_ADDR_VAR 0 4
21872: PUSH
21873: LD_VAR 0 2
21877: PUSH
21878: FOR_IN
21879: IFFALSE 21967
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
21881: LD_VAR 0 4
21885: PUSH
21886: LD_INT 1
21888: ARRAY
21889: PPUSH
21890: LD_VAR 0 4
21894: PUSH
21895: LD_INT 2
21897: ARRAY
21898: PPUSH
21899: CALL_OW 458
21903: NOT
21904: IFFALSE 21908
// continue ;
21906: GO 21878
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
21908: LD_VAR 0 4
21912: PUSH
21913: LD_INT 1
21915: ARRAY
21916: PPUSH
21917: LD_VAR 0 4
21921: PUSH
21922: LD_INT 2
21924: ARRAY
21925: PPUSH
21926: CALL_OW 428
21930: PUSH
21931: LD_VAR 0 5
21935: IN
21936: IFFALSE 21965
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
21938: LD_VAR 0 4
21942: PUSH
21943: LD_INT 1
21945: ARRAY
21946: PPUSH
21947: LD_VAR 0 4
21951: PUSH
21952: LD_INT 2
21954: ARRAY
21955: PPUSH
21956: LD_VAR 0 1
21960: PPUSH
21961: CALL_OW 456
// end ;
21965: GO 21878
21967: POP
21968: POP
// end ;
21969: LD_VAR 0 3
21973: RET
// export function Count ( array ) ; var i ; begin
21974: LD_INT 0
21976: PPUSH
21977: PPUSH
// result := 0 ;
21978: LD_ADDR_VAR 0 2
21982: PUSH
21983: LD_INT 0
21985: ST_TO_ADDR
// for i in array do
21986: LD_ADDR_VAR 0 3
21990: PUSH
21991: LD_VAR 0 1
21995: PUSH
21996: FOR_IN
21997: IFFALSE 22021
// if i then
21999: LD_VAR 0 3
22003: IFFALSE 22019
// result := result + 1 ;
22005: LD_ADDR_VAR 0 2
22009: PUSH
22010: LD_VAR 0 2
22014: PUSH
22015: LD_INT 1
22017: PLUS
22018: ST_TO_ADDR
22019: GO 21996
22021: POP
22022: POP
// end ;
22023: LD_VAR 0 2
22027: RET
// export function IsEmpty ( building ) ; begin
22028: LD_INT 0
22030: PPUSH
// if not building then
22031: LD_VAR 0 1
22035: NOT
22036: IFFALSE 22040
// exit ;
22038: GO 22083
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
22040: LD_ADDR_VAR 0 2
22044: PUSH
22045: LD_VAR 0 1
22049: PUSH
22050: LD_INT 22
22052: PUSH
22053: LD_VAR 0 1
22057: PPUSH
22058: CALL_OW 255
22062: PUSH
22063: EMPTY
22064: LIST
22065: LIST
22066: PUSH
22067: LD_INT 58
22069: PUSH
22070: EMPTY
22071: LIST
22072: PUSH
22073: EMPTY
22074: LIST
22075: LIST
22076: PPUSH
22077: CALL_OW 69
22081: IN
22082: ST_TO_ADDR
// end ;
22083: LD_VAR 0 2
22087: RET
// export function IsNotFull ( building ) ; begin
22088: LD_INT 0
22090: PPUSH
// if not building then
22091: LD_VAR 0 1
22095: NOT
22096: IFFALSE 22100
// exit ;
22098: GO 22119
// result := UnitsInside ( building ) < 6 ;
22100: LD_ADDR_VAR 0 2
22104: PUSH
22105: LD_VAR 0 1
22109: PPUSH
22110: CALL_OW 313
22114: PUSH
22115: LD_INT 6
22117: LESS
22118: ST_TO_ADDR
// end ;
22119: LD_VAR 0 2
22123: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
22124: LD_INT 0
22126: PPUSH
22127: PPUSH
22128: PPUSH
22129: PPUSH
// tmp := [ ] ;
22130: LD_ADDR_VAR 0 3
22134: PUSH
22135: EMPTY
22136: ST_TO_ADDR
// list := [ ] ;
22137: LD_ADDR_VAR 0 5
22141: PUSH
22142: EMPTY
22143: ST_TO_ADDR
// for i = 16 to 25 do
22144: LD_ADDR_VAR 0 4
22148: PUSH
22149: DOUBLE
22150: LD_INT 16
22152: DEC
22153: ST_TO_ADDR
22154: LD_INT 25
22156: PUSH
22157: FOR_TO
22158: IFFALSE 22231
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
22160: LD_ADDR_VAR 0 3
22164: PUSH
22165: LD_VAR 0 3
22169: PUSH
22170: LD_INT 22
22172: PUSH
22173: LD_VAR 0 1
22177: PPUSH
22178: CALL_OW 255
22182: PUSH
22183: EMPTY
22184: LIST
22185: LIST
22186: PUSH
22187: LD_INT 91
22189: PUSH
22190: LD_VAR 0 1
22194: PUSH
22195: LD_INT 6
22197: PUSH
22198: EMPTY
22199: LIST
22200: LIST
22201: LIST
22202: PUSH
22203: LD_INT 30
22205: PUSH
22206: LD_VAR 0 4
22210: PUSH
22211: EMPTY
22212: LIST
22213: LIST
22214: PUSH
22215: EMPTY
22216: LIST
22217: LIST
22218: LIST
22219: PUSH
22220: EMPTY
22221: LIST
22222: PPUSH
22223: CALL_OW 69
22227: ADD
22228: ST_TO_ADDR
22229: GO 22157
22231: POP
22232: POP
// for i = 1 to tmp do
22233: LD_ADDR_VAR 0 4
22237: PUSH
22238: DOUBLE
22239: LD_INT 1
22241: DEC
22242: ST_TO_ADDR
22243: LD_VAR 0 3
22247: PUSH
22248: FOR_TO
22249: IFFALSE 22337
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
22251: LD_ADDR_VAR 0 5
22255: PUSH
22256: LD_VAR 0 5
22260: PUSH
22261: LD_VAR 0 3
22265: PUSH
22266: LD_VAR 0 4
22270: ARRAY
22271: PPUSH
22272: CALL_OW 266
22276: PUSH
22277: LD_VAR 0 3
22281: PUSH
22282: LD_VAR 0 4
22286: ARRAY
22287: PPUSH
22288: CALL_OW 250
22292: PUSH
22293: LD_VAR 0 3
22297: PUSH
22298: LD_VAR 0 4
22302: ARRAY
22303: PPUSH
22304: CALL_OW 251
22308: PUSH
22309: LD_VAR 0 3
22313: PUSH
22314: LD_VAR 0 4
22318: ARRAY
22319: PPUSH
22320: CALL_OW 254
22324: PUSH
22325: EMPTY
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: PUSH
22331: EMPTY
22332: LIST
22333: ADD
22334: ST_TO_ADDR
22335: GO 22248
22337: POP
22338: POP
// result := list ;
22339: LD_ADDR_VAR 0 2
22343: PUSH
22344: LD_VAR 0 5
22348: ST_TO_ADDR
// end ;
22349: LD_VAR 0 2
22353: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
22354: LD_INT 0
22356: PPUSH
22357: PPUSH
22358: PPUSH
22359: PPUSH
22360: PPUSH
22361: PPUSH
22362: PPUSH
// if not factory then
22363: LD_VAR 0 1
22367: NOT
22368: IFFALSE 22372
// exit ;
22370: GO 22965
// if control = control_apeman then
22372: LD_VAR 0 4
22376: PUSH
22377: LD_INT 5
22379: EQUAL
22380: IFFALSE 22489
// begin tmp := UnitsInside ( factory ) ;
22382: LD_ADDR_VAR 0 8
22386: PUSH
22387: LD_VAR 0 1
22391: PPUSH
22392: CALL_OW 313
22396: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
22397: LD_VAR 0 8
22401: PPUSH
22402: LD_INT 25
22404: PUSH
22405: LD_INT 12
22407: PUSH
22408: EMPTY
22409: LIST
22410: LIST
22411: PPUSH
22412: CALL_OW 72
22416: NOT
22417: IFFALSE 22427
// control := control_manual ;
22419: LD_ADDR_VAR 0 4
22423: PUSH
22424: LD_INT 1
22426: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
22427: LD_ADDR_VAR 0 8
22431: PUSH
22432: LD_VAR 0 1
22436: PPUSH
22437: CALL 22124 0 1
22441: ST_TO_ADDR
// if tmp then
22442: LD_VAR 0 8
22446: IFFALSE 22489
// begin for i in tmp do
22448: LD_ADDR_VAR 0 7
22452: PUSH
22453: LD_VAR 0 8
22457: PUSH
22458: FOR_IN
22459: IFFALSE 22487
// if i [ 1 ] = b_ext_radio then
22461: LD_VAR 0 7
22465: PUSH
22466: LD_INT 1
22468: ARRAY
22469: PUSH
22470: LD_INT 22
22472: EQUAL
22473: IFFALSE 22485
// begin control := control_remote ;
22475: LD_ADDR_VAR 0 4
22479: PUSH
22480: LD_INT 2
22482: ST_TO_ADDR
// break ;
22483: GO 22487
// end ;
22485: GO 22458
22487: POP
22488: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
22489: LD_VAR 0 1
22493: PPUSH
22494: LD_VAR 0 2
22498: PPUSH
22499: LD_VAR 0 3
22503: PPUSH
22504: LD_VAR 0 4
22508: PPUSH
22509: LD_VAR 0 5
22513: PPUSH
22514: CALL_OW 448
22518: IFFALSE 22553
// begin result := [ chassis , engine , control , weapon ] ;
22520: LD_ADDR_VAR 0 6
22524: PUSH
22525: LD_VAR 0 2
22529: PUSH
22530: LD_VAR 0 3
22534: PUSH
22535: LD_VAR 0 4
22539: PUSH
22540: LD_VAR 0 5
22544: PUSH
22545: EMPTY
22546: LIST
22547: LIST
22548: LIST
22549: LIST
22550: ST_TO_ADDR
// exit ;
22551: GO 22965
// end ; _chassis := AvailableChassisList ( factory ) ;
22553: LD_ADDR_VAR 0 9
22557: PUSH
22558: LD_VAR 0 1
22562: PPUSH
22563: CALL_OW 475
22567: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
22568: LD_ADDR_VAR 0 11
22572: PUSH
22573: LD_VAR 0 1
22577: PPUSH
22578: CALL_OW 476
22582: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
22583: LD_ADDR_VAR 0 12
22587: PUSH
22588: LD_VAR 0 1
22592: PPUSH
22593: CALL_OW 477
22597: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
22598: LD_ADDR_VAR 0 10
22602: PUSH
22603: LD_VAR 0 1
22607: PPUSH
22608: CALL_OW 478
22612: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
22613: LD_VAR 0 9
22617: NOT
22618: PUSH
22619: LD_VAR 0 11
22623: NOT
22624: OR
22625: PUSH
22626: LD_VAR 0 12
22630: NOT
22631: OR
22632: PUSH
22633: LD_VAR 0 10
22637: NOT
22638: OR
22639: IFFALSE 22674
// begin result := [ chassis , engine , control , weapon ] ;
22641: LD_ADDR_VAR 0 6
22645: PUSH
22646: LD_VAR 0 2
22650: PUSH
22651: LD_VAR 0 3
22655: PUSH
22656: LD_VAR 0 4
22660: PUSH
22661: LD_VAR 0 5
22665: PUSH
22666: EMPTY
22667: LIST
22668: LIST
22669: LIST
22670: LIST
22671: ST_TO_ADDR
// exit ;
22672: GO 22965
// end ; if not chassis in _chassis then
22674: LD_VAR 0 2
22678: PUSH
22679: LD_VAR 0 9
22683: IN
22684: NOT
22685: IFFALSE 22711
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
22687: LD_ADDR_VAR 0 2
22691: PUSH
22692: LD_VAR 0 9
22696: PUSH
22697: LD_INT 1
22699: PPUSH
22700: LD_VAR 0 9
22704: PPUSH
22705: CALL_OW 12
22709: ARRAY
22710: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
22711: LD_VAR 0 2
22715: PPUSH
22716: LD_VAR 0 3
22720: PPUSH
22721: CALL 22970 0 2
22725: NOT
22726: IFFALSE 22785
// repeat engine := _engine [ 1 ] ;
22728: LD_ADDR_VAR 0 3
22732: PUSH
22733: LD_VAR 0 11
22737: PUSH
22738: LD_INT 1
22740: ARRAY
22741: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
22742: LD_ADDR_VAR 0 11
22746: PUSH
22747: LD_VAR 0 11
22751: PPUSH
22752: LD_INT 1
22754: PPUSH
22755: CALL_OW 3
22759: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
22760: LD_VAR 0 2
22764: PPUSH
22765: LD_VAR 0 3
22769: PPUSH
22770: CALL 22970 0 2
22774: PUSH
22775: LD_VAR 0 11
22779: PUSH
22780: EMPTY
22781: EQUAL
22782: OR
22783: IFFALSE 22728
// if not control in _control then
22785: LD_VAR 0 4
22789: PUSH
22790: LD_VAR 0 12
22794: IN
22795: NOT
22796: IFFALSE 22822
// control := _control [ rand ( 1 , _control ) ] ;
22798: LD_ADDR_VAR 0 4
22802: PUSH
22803: LD_VAR 0 12
22807: PUSH
22808: LD_INT 1
22810: PPUSH
22811: LD_VAR 0 12
22815: PPUSH
22816: CALL_OW 12
22820: ARRAY
22821: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
22822: LD_VAR 0 2
22826: PPUSH
22827: LD_VAR 0 5
22831: PPUSH
22832: CALL 23190 0 2
22836: NOT
22837: IFFALSE 22896
// repeat weapon := _weapon [ 1 ] ;
22839: LD_ADDR_VAR 0 5
22843: PUSH
22844: LD_VAR 0 10
22848: PUSH
22849: LD_INT 1
22851: ARRAY
22852: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
22853: LD_ADDR_VAR 0 10
22857: PUSH
22858: LD_VAR 0 10
22862: PPUSH
22863: LD_INT 1
22865: PPUSH
22866: CALL_OW 3
22870: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
22871: LD_VAR 0 2
22875: PPUSH
22876: LD_VAR 0 5
22880: PPUSH
22881: CALL 23190 0 2
22885: PUSH
22886: LD_VAR 0 10
22890: PUSH
22891: EMPTY
22892: EQUAL
22893: OR
22894: IFFALSE 22839
// result := [ ] ;
22896: LD_ADDR_VAR 0 6
22900: PUSH
22901: EMPTY
22902: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
22903: LD_VAR 0 1
22907: PPUSH
22908: LD_VAR 0 2
22912: PPUSH
22913: LD_VAR 0 3
22917: PPUSH
22918: LD_VAR 0 4
22922: PPUSH
22923: LD_VAR 0 5
22927: PPUSH
22928: CALL_OW 448
22932: IFFALSE 22965
// result := [ chassis , engine , control , weapon ] ;
22934: LD_ADDR_VAR 0 6
22938: PUSH
22939: LD_VAR 0 2
22943: PUSH
22944: LD_VAR 0 3
22948: PUSH
22949: LD_VAR 0 4
22953: PUSH
22954: LD_VAR 0 5
22958: PUSH
22959: EMPTY
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: ST_TO_ADDR
// end ;
22965: LD_VAR 0 6
22969: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
22970: LD_INT 0
22972: PPUSH
// if not chassis or not engine then
22973: LD_VAR 0 1
22977: NOT
22978: PUSH
22979: LD_VAR 0 2
22983: NOT
22984: OR
22985: IFFALSE 22989
// exit ;
22987: GO 23185
// case engine of engine_solar :
22989: LD_VAR 0 2
22993: PUSH
22994: LD_INT 2
22996: DOUBLE
22997: EQUAL
22998: IFTRUE 23002
23000: GO 23040
23002: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
23003: LD_ADDR_VAR 0 3
23007: PUSH
23008: LD_INT 11
23010: PUSH
23011: LD_INT 12
23013: PUSH
23014: LD_INT 13
23016: PUSH
23017: LD_INT 14
23019: PUSH
23020: LD_INT 1
23022: PUSH
23023: LD_INT 2
23025: PUSH
23026: LD_INT 3
23028: PUSH
23029: EMPTY
23030: LIST
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: LIST
23036: LIST
23037: ST_TO_ADDR
23038: GO 23169
23040: LD_INT 1
23042: DOUBLE
23043: EQUAL
23044: IFTRUE 23048
23046: GO 23110
23048: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
23049: LD_ADDR_VAR 0 3
23053: PUSH
23054: LD_INT 11
23056: PUSH
23057: LD_INT 12
23059: PUSH
23060: LD_INT 13
23062: PUSH
23063: LD_INT 14
23065: PUSH
23066: LD_INT 1
23068: PUSH
23069: LD_INT 2
23071: PUSH
23072: LD_INT 3
23074: PUSH
23075: LD_INT 4
23077: PUSH
23078: LD_INT 5
23080: PUSH
23081: LD_INT 21
23083: PUSH
23084: LD_INT 23
23086: PUSH
23087: LD_INT 22
23089: PUSH
23090: LD_INT 24
23092: PUSH
23093: EMPTY
23094: LIST
23095: LIST
23096: LIST
23097: LIST
23098: LIST
23099: LIST
23100: LIST
23101: LIST
23102: LIST
23103: LIST
23104: LIST
23105: LIST
23106: LIST
23107: ST_TO_ADDR
23108: GO 23169
23110: LD_INT 3
23112: DOUBLE
23113: EQUAL
23114: IFTRUE 23118
23116: GO 23168
23118: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
23119: LD_ADDR_VAR 0 3
23123: PUSH
23124: LD_INT 13
23126: PUSH
23127: LD_INT 14
23129: PUSH
23130: LD_INT 2
23132: PUSH
23133: LD_INT 3
23135: PUSH
23136: LD_INT 4
23138: PUSH
23139: LD_INT 5
23141: PUSH
23142: LD_INT 21
23144: PUSH
23145: LD_INT 22
23147: PUSH
23148: LD_INT 23
23150: PUSH
23151: LD_INT 24
23153: PUSH
23154: EMPTY
23155: LIST
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: LIST
23161: LIST
23162: LIST
23163: LIST
23164: LIST
23165: ST_TO_ADDR
23166: GO 23169
23168: POP
// result := ( chassis in result ) ;
23169: LD_ADDR_VAR 0 3
23173: PUSH
23174: LD_VAR 0 1
23178: PUSH
23179: LD_VAR 0 3
23183: IN
23184: ST_TO_ADDR
// end ;
23185: LD_VAR 0 3
23189: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
23190: LD_INT 0
23192: PPUSH
// if not chassis or not weapon then
23193: LD_VAR 0 1
23197: NOT
23198: PUSH
23199: LD_VAR 0 2
23203: NOT
23204: OR
23205: IFFALSE 23209
// exit ;
23207: GO 24271
// case weapon of us_machine_gun :
23209: LD_VAR 0 2
23213: PUSH
23214: LD_INT 2
23216: DOUBLE
23217: EQUAL
23218: IFTRUE 23222
23220: GO 23252
23222: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
23223: LD_ADDR_VAR 0 3
23227: PUSH
23228: LD_INT 1
23230: PUSH
23231: LD_INT 2
23233: PUSH
23234: LD_INT 3
23236: PUSH
23237: LD_INT 4
23239: PUSH
23240: LD_INT 5
23242: PUSH
23243: EMPTY
23244: LIST
23245: LIST
23246: LIST
23247: LIST
23248: LIST
23249: ST_TO_ADDR
23250: GO 24255
23252: LD_INT 3
23254: DOUBLE
23255: EQUAL
23256: IFTRUE 23260
23258: GO 23290
23260: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
23261: LD_ADDR_VAR 0 3
23265: PUSH
23266: LD_INT 1
23268: PUSH
23269: LD_INT 2
23271: PUSH
23272: LD_INT 3
23274: PUSH
23275: LD_INT 4
23277: PUSH
23278: LD_INT 5
23280: PUSH
23281: EMPTY
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: ST_TO_ADDR
23288: GO 24255
23290: LD_INT 11
23292: DOUBLE
23293: EQUAL
23294: IFTRUE 23298
23296: GO 23328
23298: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
23299: LD_ADDR_VAR 0 3
23303: PUSH
23304: LD_INT 1
23306: PUSH
23307: LD_INT 2
23309: PUSH
23310: LD_INT 3
23312: PUSH
23313: LD_INT 4
23315: PUSH
23316: LD_INT 5
23318: PUSH
23319: EMPTY
23320: LIST
23321: LIST
23322: LIST
23323: LIST
23324: LIST
23325: ST_TO_ADDR
23326: GO 24255
23328: LD_INT 4
23330: DOUBLE
23331: EQUAL
23332: IFTRUE 23336
23334: GO 23362
23336: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
23337: LD_ADDR_VAR 0 3
23341: PUSH
23342: LD_INT 2
23344: PUSH
23345: LD_INT 3
23347: PUSH
23348: LD_INT 4
23350: PUSH
23351: LD_INT 5
23353: PUSH
23354: EMPTY
23355: LIST
23356: LIST
23357: LIST
23358: LIST
23359: ST_TO_ADDR
23360: GO 24255
23362: LD_INT 5
23364: DOUBLE
23365: EQUAL
23366: IFTRUE 23370
23368: GO 23396
23370: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
23371: LD_ADDR_VAR 0 3
23375: PUSH
23376: LD_INT 2
23378: PUSH
23379: LD_INT 3
23381: PUSH
23382: LD_INT 4
23384: PUSH
23385: LD_INT 5
23387: PUSH
23388: EMPTY
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: ST_TO_ADDR
23394: GO 24255
23396: LD_INT 9
23398: DOUBLE
23399: EQUAL
23400: IFTRUE 23404
23402: GO 23430
23404: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
23405: LD_ADDR_VAR 0 3
23409: PUSH
23410: LD_INT 2
23412: PUSH
23413: LD_INT 3
23415: PUSH
23416: LD_INT 4
23418: PUSH
23419: LD_INT 5
23421: PUSH
23422: EMPTY
23423: LIST
23424: LIST
23425: LIST
23426: LIST
23427: ST_TO_ADDR
23428: GO 24255
23430: LD_INT 7
23432: DOUBLE
23433: EQUAL
23434: IFTRUE 23438
23436: GO 23464
23438: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
23439: LD_ADDR_VAR 0 3
23443: PUSH
23444: LD_INT 2
23446: PUSH
23447: LD_INT 3
23449: PUSH
23450: LD_INT 4
23452: PUSH
23453: LD_INT 5
23455: PUSH
23456: EMPTY
23457: LIST
23458: LIST
23459: LIST
23460: LIST
23461: ST_TO_ADDR
23462: GO 24255
23464: LD_INT 12
23466: DOUBLE
23467: EQUAL
23468: IFTRUE 23472
23470: GO 23498
23472: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
23473: LD_ADDR_VAR 0 3
23477: PUSH
23478: LD_INT 2
23480: PUSH
23481: LD_INT 3
23483: PUSH
23484: LD_INT 4
23486: PUSH
23487: LD_INT 5
23489: PUSH
23490: EMPTY
23491: LIST
23492: LIST
23493: LIST
23494: LIST
23495: ST_TO_ADDR
23496: GO 24255
23498: LD_INT 13
23500: DOUBLE
23501: EQUAL
23502: IFTRUE 23506
23504: GO 23532
23506: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
23507: LD_ADDR_VAR 0 3
23511: PUSH
23512: LD_INT 2
23514: PUSH
23515: LD_INT 3
23517: PUSH
23518: LD_INT 4
23520: PUSH
23521: LD_INT 5
23523: PUSH
23524: EMPTY
23525: LIST
23526: LIST
23527: LIST
23528: LIST
23529: ST_TO_ADDR
23530: GO 24255
23532: LD_INT 14
23534: DOUBLE
23535: EQUAL
23536: IFTRUE 23540
23538: GO 23558
23540: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
23541: LD_ADDR_VAR 0 3
23545: PUSH
23546: LD_INT 4
23548: PUSH
23549: LD_INT 5
23551: PUSH
23552: EMPTY
23553: LIST
23554: LIST
23555: ST_TO_ADDR
23556: GO 24255
23558: LD_INT 6
23560: DOUBLE
23561: EQUAL
23562: IFTRUE 23566
23564: GO 23584
23566: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
23567: LD_ADDR_VAR 0 3
23571: PUSH
23572: LD_INT 4
23574: PUSH
23575: LD_INT 5
23577: PUSH
23578: EMPTY
23579: LIST
23580: LIST
23581: ST_TO_ADDR
23582: GO 24255
23584: LD_INT 10
23586: DOUBLE
23587: EQUAL
23588: IFTRUE 23592
23590: GO 23610
23592: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
23593: LD_ADDR_VAR 0 3
23597: PUSH
23598: LD_INT 4
23600: PUSH
23601: LD_INT 5
23603: PUSH
23604: EMPTY
23605: LIST
23606: LIST
23607: ST_TO_ADDR
23608: GO 24255
23610: LD_INT 22
23612: DOUBLE
23613: EQUAL
23614: IFTRUE 23618
23616: GO 23644
23618: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
23619: LD_ADDR_VAR 0 3
23623: PUSH
23624: LD_INT 11
23626: PUSH
23627: LD_INT 12
23629: PUSH
23630: LD_INT 13
23632: PUSH
23633: LD_INT 14
23635: PUSH
23636: EMPTY
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: ST_TO_ADDR
23642: GO 24255
23644: LD_INT 23
23646: DOUBLE
23647: EQUAL
23648: IFTRUE 23652
23650: GO 23678
23652: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
23653: LD_ADDR_VAR 0 3
23657: PUSH
23658: LD_INT 11
23660: PUSH
23661: LD_INT 12
23663: PUSH
23664: LD_INT 13
23666: PUSH
23667: LD_INT 14
23669: PUSH
23670: EMPTY
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: ST_TO_ADDR
23676: GO 24255
23678: LD_INT 24
23680: DOUBLE
23681: EQUAL
23682: IFTRUE 23686
23684: GO 23712
23686: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
23687: LD_ADDR_VAR 0 3
23691: PUSH
23692: LD_INT 11
23694: PUSH
23695: LD_INT 12
23697: PUSH
23698: LD_INT 13
23700: PUSH
23701: LD_INT 14
23703: PUSH
23704: EMPTY
23705: LIST
23706: LIST
23707: LIST
23708: LIST
23709: ST_TO_ADDR
23710: GO 24255
23712: LD_INT 30
23714: DOUBLE
23715: EQUAL
23716: IFTRUE 23720
23718: GO 23746
23720: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
23721: LD_ADDR_VAR 0 3
23725: PUSH
23726: LD_INT 11
23728: PUSH
23729: LD_INT 12
23731: PUSH
23732: LD_INT 13
23734: PUSH
23735: LD_INT 14
23737: PUSH
23738: EMPTY
23739: LIST
23740: LIST
23741: LIST
23742: LIST
23743: ST_TO_ADDR
23744: GO 24255
23746: LD_INT 25
23748: DOUBLE
23749: EQUAL
23750: IFTRUE 23754
23752: GO 23772
23754: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
23755: LD_ADDR_VAR 0 3
23759: PUSH
23760: LD_INT 13
23762: PUSH
23763: LD_INT 14
23765: PUSH
23766: EMPTY
23767: LIST
23768: LIST
23769: ST_TO_ADDR
23770: GO 24255
23772: LD_INT 27
23774: DOUBLE
23775: EQUAL
23776: IFTRUE 23780
23778: GO 23798
23780: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
23781: LD_ADDR_VAR 0 3
23785: PUSH
23786: LD_INT 13
23788: PUSH
23789: LD_INT 14
23791: PUSH
23792: EMPTY
23793: LIST
23794: LIST
23795: ST_TO_ADDR
23796: GO 24255
23798: LD_EXP 34
23802: DOUBLE
23803: EQUAL
23804: IFTRUE 23808
23806: GO 23834
23808: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
23809: LD_ADDR_VAR 0 3
23813: PUSH
23814: LD_INT 11
23816: PUSH
23817: LD_INT 12
23819: PUSH
23820: LD_INT 13
23822: PUSH
23823: LD_INT 14
23825: PUSH
23826: EMPTY
23827: LIST
23828: LIST
23829: LIST
23830: LIST
23831: ST_TO_ADDR
23832: GO 24255
23834: LD_INT 28
23836: DOUBLE
23837: EQUAL
23838: IFTRUE 23842
23840: GO 23860
23842: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
23843: LD_ADDR_VAR 0 3
23847: PUSH
23848: LD_INT 13
23850: PUSH
23851: LD_INT 14
23853: PUSH
23854: EMPTY
23855: LIST
23856: LIST
23857: ST_TO_ADDR
23858: GO 24255
23860: LD_INT 29
23862: DOUBLE
23863: EQUAL
23864: IFTRUE 23868
23866: GO 23886
23868: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
23869: LD_ADDR_VAR 0 3
23873: PUSH
23874: LD_INT 13
23876: PUSH
23877: LD_INT 14
23879: PUSH
23880: EMPTY
23881: LIST
23882: LIST
23883: ST_TO_ADDR
23884: GO 24255
23886: LD_INT 31
23888: DOUBLE
23889: EQUAL
23890: IFTRUE 23894
23892: GO 23912
23894: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
23895: LD_ADDR_VAR 0 3
23899: PUSH
23900: LD_INT 13
23902: PUSH
23903: LD_INT 14
23905: PUSH
23906: EMPTY
23907: LIST
23908: LIST
23909: ST_TO_ADDR
23910: GO 24255
23912: LD_INT 26
23914: DOUBLE
23915: EQUAL
23916: IFTRUE 23920
23918: GO 23938
23920: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
23921: LD_ADDR_VAR 0 3
23925: PUSH
23926: LD_INT 13
23928: PUSH
23929: LD_INT 14
23931: PUSH
23932: EMPTY
23933: LIST
23934: LIST
23935: ST_TO_ADDR
23936: GO 24255
23938: LD_INT 42
23940: DOUBLE
23941: EQUAL
23942: IFTRUE 23946
23944: GO 23972
23946: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
23947: LD_ADDR_VAR 0 3
23951: PUSH
23952: LD_INT 21
23954: PUSH
23955: LD_INT 22
23957: PUSH
23958: LD_INT 23
23960: PUSH
23961: LD_INT 24
23963: PUSH
23964: EMPTY
23965: LIST
23966: LIST
23967: LIST
23968: LIST
23969: ST_TO_ADDR
23970: GO 24255
23972: LD_INT 43
23974: DOUBLE
23975: EQUAL
23976: IFTRUE 23980
23978: GO 24006
23980: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
23981: LD_ADDR_VAR 0 3
23985: PUSH
23986: LD_INT 21
23988: PUSH
23989: LD_INT 22
23991: PUSH
23992: LD_INT 23
23994: PUSH
23995: LD_INT 24
23997: PUSH
23998: EMPTY
23999: LIST
24000: LIST
24001: LIST
24002: LIST
24003: ST_TO_ADDR
24004: GO 24255
24006: LD_INT 44
24008: DOUBLE
24009: EQUAL
24010: IFTRUE 24014
24012: GO 24040
24014: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
24015: LD_ADDR_VAR 0 3
24019: PUSH
24020: LD_INT 21
24022: PUSH
24023: LD_INT 22
24025: PUSH
24026: LD_INT 23
24028: PUSH
24029: LD_INT 24
24031: PUSH
24032: EMPTY
24033: LIST
24034: LIST
24035: LIST
24036: LIST
24037: ST_TO_ADDR
24038: GO 24255
24040: LD_INT 45
24042: DOUBLE
24043: EQUAL
24044: IFTRUE 24048
24046: GO 24074
24048: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
24049: LD_ADDR_VAR 0 3
24053: PUSH
24054: LD_INT 21
24056: PUSH
24057: LD_INT 22
24059: PUSH
24060: LD_INT 23
24062: PUSH
24063: LD_INT 24
24065: PUSH
24066: EMPTY
24067: LIST
24068: LIST
24069: LIST
24070: LIST
24071: ST_TO_ADDR
24072: GO 24255
24074: LD_INT 49
24076: DOUBLE
24077: EQUAL
24078: IFTRUE 24082
24080: GO 24108
24082: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
24083: LD_ADDR_VAR 0 3
24087: PUSH
24088: LD_INT 21
24090: PUSH
24091: LD_INT 22
24093: PUSH
24094: LD_INT 23
24096: PUSH
24097: LD_INT 24
24099: PUSH
24100: EMPTY
24101: LIST
24102: LIST
24103: LIST
24104: LIST
24105: ST_TO_ADDR
24106: GO 24255
24108: LD_INT 51
24110: DOUBLE
24111: EQUAL
24112: IFTRUE 24116
24114: GO 24142
24116: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
24117: LD_ADDR_VAR 0 3
24121: PUSH
24122: LD_INT 21
24124: PUSH
24125: LD_INT 22
24127: PUSH
24128: LD_INT 23
24130: PUSH
24131: LD_INT 24
24133: PUSH
24134: EMPTY
24135: LIST
24136: LIST
24137: LIST
24138: LIST
24139: ST_TO_ADDR
24140: GO 24255
24142: LD_INT 52
24144: DOUBLE
24145: EQUAL
24146: IFTRUE 24150
24148: GO 24176
24150: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
24151: LD_ADDR_VAR 0 3
24155: PUSH
24156: LD_INT 21
24158: PUSH
24159: LD_INT 22
24161: PUSH
24162: LD_INT 23
24164: PUSH
24165: LD_INT 24
24167: PUSH
24168: EMPTY
24169: LIST
24170: LIST
24171: LIST
24172: LIST
24173: ST_TO_ADDR
24174: GO 24255
24176: LD_INT 53
24178: DOUBLE
24179: EQUAL
24180: IFTRUE 24184
24182: GO 24202
24184: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
24185: LD_ADDR_VAR 0 3
24189: PUSH
24190: LD_INT 23
24192: PUSH
24193: LD_INT 24
24195: PUSH
24196: EMPTY
24197: LIST
24198: LIST
24199: ST_TO_ADDR
24200: GO 24255
24202: LD_INT 46
24204: DOUBLE
24205: EQUAL
24206: IFTRUE 24210
24208: GO 24228
24210: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
24211: LD_ADDR_VAR 0 3
24215: PUSH
24216: LD_INT 23
24218: PUSH
24219: LD_INT 24
24221: PUSH
24222: EMPTY
24223: LIST
24224: LIST
24225: ST_TO_ADDR
24226: GO 24255
24228: LD_INT 47
24230: DOUBLE
24231: EQUAL
24232: IFTRUE 24236
24234: GO 24254
24236: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24237: LD_ADDR_VAR 0 3
24241: PUSH
24242: LD_INT 23
24244: PUSH
24245: LD_INT 24
24247: PUSH
24248: EMPTY
24249: LIST
24250: LIST
24251: ST_TO_ADDR
24252: GO 24255
24254: POP
// result := ( chassis in result ) ;
24255: LD_ADDR_VAR 0 3
24259: PUSH
24260: LD_VAR 0 1
24264: PUSH
24265: LD_VAR 0 3
24269: IN
24270: ST_TO_ADDR
// end ;
24271: LD_VAR 0 3
24275: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
24276: LD_INT 0
24278: PPUSH
24279: PPUSH
24280: PPUSH
24281: PPUSH
24282: PPUSH
24283: PPUSH
24284: PPUSH
// result := array ;
24285: LD_ADDR_VAR 0 5
24289: PUSH
24290: LD_VAR 0 1
24294: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
24295: LD_VAR 0 1
24299: NOT
24300: PUSH
24301: LD_VAR 0 2
24305: NOT
24306: OR
24307: PUSH
24308: LD_VAR 0 3
24312: NOT
24313: OR
24314: PUSH
24315: LD_VAR 0 2
24319: PUSH
24320: LD_VAR 0 1
24324: GREATER
24325: OR
24326: PUSH
24327: LD_VAR 0 3
24331: PUSH
24332: LD_VAR 0 1
24336: GREATER
24337: OR
24338: IFFALSE 24342
// exit ;
24340: GO 24638
// if direction then
24342: LD_VAR 0 4
24346: IFFALSE 24410
// begin d := 1 ;
24348: LD_ADDR_VAR 0 9
24352: PUSH
24353: LD_INT 1
24355: ST_TO_ADDR
// if i_from > i_to then
24356: LD_VAR 0 2
24360: PUSH
24361: LD_VAR 0 3
24365: GREATER
24366: IFFALSE 24392
// length := ( array - i_from ) + i_to else
24368: LD_ADDR_VAR 0 11
24372: PUSH
24373: LD_VAR 0 1
24377: PUSH
24378: LD_VAR 0 2
24382: MINUS
24383: PUSH
24384: LD_VAR 0 3
24388: PLUS
24389: ST_TO_ADDR
24390: GO 24408
// length := i_to - i_from ;
24392: LD_ADDR_VAR 0 11
24396: PUSH
24397: LD_VAR 0 3
24401: PUSH
24402: LD_VAR 0 2
24406: MINUS
24407: ST_TO_ADDR
// end else
24408: GO 24471
// begin d := - 1 ;
24410: LD_ADDR_VAR 0 9
24414: PUSH
24415: LD_INT 1
24417: NEG
24418: ST_TO_ADDR
// if i_from > i_to then
24419: LD_VAR 0 2
24423: PUSH
24424: LD_VAR 0 3
24428: GREATER
24429: IFFALSE 24449
// length := i_from - i_to else
24431: LD_ADDR_VAR 0 11
24435: PUSH
24436: LD_VAR 0 2
24440: PUSH
24441: LD_VAR 0 3
24445: MINUS
24446: ST_TO_ADDR
24447: GO 24471
// length := ( array - i_to ) + i_from ;
24449: LD_ADDR_VAR 0 11
24453: PUSH
24454: LD_VAR 0 1
24458: PUSH
24459: LD_VAR 0 3
24463: MINUS
24464: PUSH
24465: LD_VAR 0 2
24469: PLUS
24470: ST_TO_ADDR
// end ; if not length then
24471: LD_VAR 0 11
24475: NOT
24476: IFFALSE 24480
// exit ;
24478: GO 24638
// tmp := array ;
24480: LD_ADDR_VAR 0 10
24484: PUSH
24485: LD_VAR 0 1
24489: ST_TO_ADDR
// for i = 1 to length do
24490: LD_ADDR_VAR 0 6
24494: PUSH
24495: DOUBLE
24496: LD_INT 1
24498: DEC
24499: ST_TO_ADDR
24500: LD_VAR 0 11
24504: PUSH
24505: FOR_TO
24506: IFFALSE 24626
// begin for j = 1 to array do
24508: LD_ADDR_VAR 0 7
24512: PUSH
24513: DOUBLE
24514: LD_INT 1
24516: DEC
24517: ST_TO_ADDR
24518: LD_VAR 0 1
24522: PUSH
24523: FOR_TO
24524: IFFALSE 24612
// begin k := j + d ;
24526: LD_ADDR_VAR 0 8
24530: PUSH
24531: LD_VAR 0 7
24535: PUSH
24536: LD_VAR 0 9
24540: PLUS
24541: ST_TO_ADDR
// if k > array then
24542: LD_VAR 0 8
24546: PUSH
24547: LD_VAR 0 1
24551: GREATER
24552: IFFALSE 24562
// k := 1 ;
24554: LD_ADDR_VAR 0 8
24558: PUSH
24559: LD_INT 1
24561: ST_TO_ADDR
// if not k then
24562: LD_VAR 0 8
24566: NOT
24567: IFFALSE 24579
// k := array ;
24569: LD_ADDR_VAR 0 8
24573: PUSH
24574: LD_VAR 0 1
24578: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
24579: LD_ADDR_VAR 0 10
24583: PUSH
24584: LD_VAR 0 10
24588: PPUSH
24589: LD_VAR 0 8
24593: PPUSH
24594: LD_VAR 0 1
24598: PUSH
24599: LD_VAR 0 7
24603: ARRAY
24604: PPUSH
24605: CALL_OW 1
24609: ST_TO_ADDR
// end ;
24610: GO 24523
24612: POP
24613: POP
// array := tmp ;
24614: LD_ADDR_VAR 0 1
24618: PUSH
24619: LD_VAR 0 10
24623: ST_TO_ADDR
// end ;
24624: GO 24505
24626: POP
24627: POP
// result := array ;
24628: LD_ADDR_VAR 0 5
24632: PUSH
24633: LD_VAR 0 1
24637: ST_TO_ADDR
// end ;
24638: LD_VAR 0 5
24642: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
24643: LD_INT 0
24645: PPUSH
24646: PPUSH
// result := 0 ;
24647: LD_ADDR_VAR 0 3
24651: PUSH
24652: LD_INT 0
24654: ST_TO_ADDR
// if not array or not value in array then
24655: LD_VAR 0 1
24659: NOT
24660: PUSH
24661: LD_VAR 0 2
24665: PUSH
24666: LD_VAR 0 1
24670: IN
24671: NOT
24672: OR
24673: IFFALSE 24677
// exit ;
24675: GO 24731
// for i = 1 to array do
24677: LD_ADDR_VAR 0 4
24681: PUSH
24682: DOUBLE
24683: LD_INT 1
24685: DEC
24686: ST_TO_ADDR
24687: LD_VAR 0 1
24691: PUSH
24692: FOR_TO
24693: IFFALSE 24729
// if value = array [ i ] then
24695: LD_VAR 0 2
24699: PUSH
24700: LD_VAR 0 1
24704: PUSH
24705: LD_VAR 0 4
24709: ARRAY
24710: EQUAL
24711: IFFALSE 24727
// begin result := i ;
24713: LD_ADDR_VAR 0 3
24717: PUSH
24718: LD_VAR 0 4
24722: ST_TO_ADDR
// exit ;
24723: POP
24724: POP
24725: GO 24731
// end ;
24727: GO 24692
24729: POP
24730: POP
// end ;
24731: LD_VAR 0 3
24735: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
24736: LD_INT 0
24738: PPUSH
// vc_chassis := chassis ;
24739: LD_ADDR_OWVAR 37
24743: PUSH
24744: LD_VAR 0 1
24748: ST_TO_ADDR
// vc_engine := engine ;
24749: LD_ADDR_OWVAR 39
24753: PUSH
24754: LD_VAR 0 2
24758: ST_TO_ADDR
// vc_control := control ;
24759: LD_ADDR_OWVAR 38
24763: PUSH
24764: LD_VAR 0 3
24768: ST_TO_ADDR
// vc_weapon := weapon ;
24769: LD_ADDR_OWVAR 40
24773: PUSH
24774: LD_VAR 0 4
24778: ST_TO_ADDR
// vc_fuel_battery := fuel ;
24779: LD_ADDR_OWVAR 41
24783: PUSH
24784: LD_VAR 0 5
24788: ST_TO_ADDR
// end ;
24789: LD_VAR 0 6
24793: RET
// export function WantPlant ( unit ) ; var task ; begin
24794: LD_INT 0
24796: PPUSH
24797: PPUSH
// result := false ;
24798: LD_ADDR_VAR 0 2
24802: PUSH
24803: LD_INT 0
24805: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
24806: LD_ADDR_VAR 0 3
24810: PUSH
24811: LD_VAR 0 1
24815: PPUSH
24816: CALL_OW 437
24820: ST_TO_ADDR
// if task then
24821: LD_VAR 0 3
24825: IFFALSE 24853
// if task [ 1 ] [ 1 ] = p then
24827: LD_VAR 0 3
24831: PUSH
24832: LD_INT 1
24834: ARRAY
24835: PUSH
24836: LD_INT 1
24838: ARRAY
24839: PUSH
24840: LD_STRING p
24842: EQUAL
24843: IFFALSE 24853
// result := true ;
24845: LD_ADDR_VAR 0 2
24849: PUSH
24850: LD_INT 1
24852: ST_TO_ADDR
// end ;
24853: LD_VAR 0 2
24857: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
24858: LD_INT 0
24860: PPUSH
24861: PPUSH
24862: PPUSH
24863: PPUSH
// if pos < 1 then
24864: LD_VAR 0 2
24868: PUSH
24869: LD_INT 1
24871: LESS
24872: IFFALSE 24876
// exit ;
24874: GO 25179
// if pos = 1 then
24876: LD_VAR 0 2
24880: PUSH
24881: LD_INT 1
24883: EQUAL
24884: IFFALSE 24917
// result := Replace ( arr , pos [ 1 ] , value ) else
24886: LD_ADDR_VAR 0 4
24890: PUSH
24891: LD_VAR 0 1
24895: PPUSH
24896: LD_VAR 0 2
24900: PUSH
24901: LD_INT 1
24903: ARRAY
24904: PPUSH
24905: LD_VAR 0 3
24909: PPUSH
24910: CALL_OW 1
24914: ST_TO_ADDR
24915: GO 25179
// begin tmp := arr ;
24917: LD_ADDR_VAR 0 6
24921: PUSH
24922: LD_VAR 0 1
24926: ST_TO_ADDR
// s_arr := [ tmp ] ;
24927: LD_ADDR_VAR 0 7
24931: PUSH
24932: LD_VAR 0 6
24936: PUSH
24937: EMPTY
24938: LIST
24939: ST_TO_ADDR
// for i = 1 to pos - 1 do
24940: LD_ADDR_VAR 0 5
24944: PUSH
24945: DOUBLE
24946: LD_INT 1
24948: DEC
24949: ST_TO_ADDR
24950: LD_VAR 0 2
24954: PUSH
24955: LD_INT 1
24957: MINUS
24958: PUSH
24959: FOR_TO
24960: IFFALSE 25005
// begin tmp := tmp [ pos [ i ] ] ;
24962: LD_ADDR_VAR 0 6
24966: PUSH
24967: LD_VAR 0 6
24971: PUSH
24972: LD_VAR 0 2
24976: PUSH
24977: LD_VAR 0 5
24981: ARRAY
24982: ARRAY
24983: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
24984: LD_ADDR_VAR 0 7
24988: PUSH
24989: LD_VAR 0 7
24993: PUSH
24994: LD_VAR 0 6
24998: PUSH
24999: EMPTY
25000: LIST
25001: ADD
25002: ST_TO_ADDR
// end ;
25003: GO 24959
25005: POP
25006: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
25007: LD_ADDR_VAR 0 6
25011: PUSH
25012: LD_VAR 0 6
25016: PPUSH
25017: LD_VAR 0 2
25021: PUSH
25022: LD_VAR 0 2
25026: ARRAY
25027: PPUSH
25028: LD_VAR 0 3
25032: PPUSH
25033: CALL_OW 1
25037: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
25038: LD_ADDR_VAR 0 7
25042: PUSH
25043: LD_VAR 0 7
25047: PPUSH
25048: LD_VAR 0 7
25052: PPUSH
25053: LD_VAR 0 6
25057: PPUSH
25058: CALL_OW 1
25062: ST_TO_ADDR
// for i = s_arr downto 2 do
25063: LD_ADDR_VAR 0 5
25067: PUSH
25068: DOUBLE
25069: LD_VAR 0 7
25073: INC
25074: ST_TO_ADDR
25075: LD_INT 2
25077: PUSH
25078: FOR_DOWNTO
25079: IFFALSE 25163
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
25081: LD_ADDR_VAR 0 6
25085: PUSH
25086: LD_VAR 0 7
25090: PUSH
25091: LD_VAR 0 5
25095: PUSH
25096: LD_INT 1
25098: MINUS
25099: ARRAY
25100: PPUSH
25101: LD_VAR 0 2
25105: PUSH
25106: LD_VAR 0 5
25110: PUSH
25111: LD_INT 1
25113: MINUS
25114: ARRAY
25115: PPUSH
25116: LD_VAR 0 7
25120: PUSH
25121: LD_VAR 0 5
25125: ARRAY
25126: PPUSH
25127: CALL_OW 1
25131: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
25132: LD_ADDR_VAR 0 7
25136: PUSH
25137: LD_VAR 0 7
25141: PPUSH
25142: LD_VAR 0 5
25146: PUSH
25147: LD_INT 1
25149: MINUS
25150: PPUSH
25151: LD_VAR 0 6
25155: PPUSH
25156: CALL_OW 1
25160: ST_TO_ADDR
// end ;
25161: GO 25078
25163: POP
25164: POP
// result := s_arr [ 1 ] ;
25165: LD_ADDR_VAR 0 4
25169: PUSH
25170: LD_VAR 0 7
25174: PUSH
25175: LD_INT 1
25177: ARRAY
25178: ST_TO_ADDR
// end ; end ;
25179: LD_VAR 0 4
25183: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
25184: LD_INT 0
25186: PPUSH
25187: PPUSH
// if not list then
25188: LD_VAR 0 1
25192: NOT
25193: IFFALSE 25197
// exit ;
25195: GO 25288
// i := list [ pos1 ] ;
25197: LD_ADDR_VAR 0 5
25201: PUSH
25202: LD_VAR 0 1
25206: PUSH
25207: LD_VAR 0 2
25211: ARRAY
25212: ST_TO_ADDR
// if not i then
25213: LD_VAR 0 5
25217: NOT
25218: IFFALSE 25222
// exit ;
25220: GO 25288
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
25222: LD_ADDR_VAR 0 1
25226: PUSH
25227: LD_VAR 0 1
25231: PPUSH
25232: LD_VAR 0 2
25236: PPUSH
25237: LD_VAR 0 1
25241: PUSH
25242: LD_VAR 0 3
25246: ARRAY
25247: PPUSH
25248: CALL_OW 1
25252: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
25253: LD_ADDR_VAR 0 1
25257: PUSH
25258: LD_VAR 0 1
25262: PPUSH
25263: LD_VAR 0 3
25267: PPUSH
25268: LD_VAR 0 5
25272: PPUSH
25273: CALL_OW 1
25277: ST_TO_ADDR
// result := list ;
25278: LD_ADDR_VAR 0 4
25282: PUSH
25283: LD_VAR 0 1
25287: ST_TO_ADDR
// end ;
25288: LD_VAR 0 4
25292: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
25293: LD_INT 0
25295: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
25296: LD_ADDR_VAR 0 5
25300: PUSH
25301: LD_VAR 0 1
25305: PPUSH
25306: CALL_OW 250
25310: PPUSH
25311: LD_VAR 0 1
25315: PPUSH
25316: CALL_OW 251
25320: PPUSH
25321: LD_VAR 0 2
25325: PPUSH
25326: LD_VAR 0 3
25330: PPUSH
25331: LD_VAR 0 4
25335: PPUSH
25336: CALL 25346 0 5
25340: ST_TO_ADDR
// end ;
25341: LD_VAR 0 5
25345: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
25346: LD_INT 0
25348: PPUSH
25349: PPUSH
25350: PPUSH
25351: PPUSH
// if not list then
25352: LD_VAR 0 3
25356: NOT
25357: IFFALSE 25361
// exit ;
25359: GO 25749
// result := [ ] ;
25361: LD_ADDR_VAR 0 6
25365: PUSH
25366: EMPTY
25367: ST_TO_ADDR
// for i in list do
25368: LD_ADDR_VAR 0 7
25372: PUSH
25373: LD_VAR 0 3
25377: PUSH
25378: FOR_IN
25379: IFFALSE 25581
// begin tmp := GetDistUnitXY ( i , x , y ) ;
25381: LD_ADDR_VAR 0 9
25385: PUSH
25386: LD_VAR 0 7
25390: PPUSH
25391: LD_VAR 0 1
25395: PPUSH
25396: LD_VAR 0 2
25400: PPUSH
25401: CALL_OW 297
25405: ST_TO_ADDR
// if not result then
25406: LD_VAR 0 6
25410: NOT
25411: IFFALSE 25437
// result := [ [ i , tmp ] ] else
25413: LD_ADDR_VAR 0 6
25417: PUSH
25418: LD_VAR 0 7
25422: PUSH
25423: LD_VAR 0 9
25427: PUSH
25428: EMPTY
25429: LIST
25430: LIST
25431: PUSH
25432: EMPTY
25433: LIST
25434: ST_TO_ADDR
25435: GO 25579
// begin if result [ result ] [ 2 ] < tmp then
25437: LD_VAR 0 6
25441: PUSH
25442: LD_VAR 0 6
25446: ARRAY
25447: PUSH
25448: LD_INT 2
25450: ARRAY
25451: PUSH
25452: LD_VAR 0 9
25456: LESS
25457: IFFALSE 25499
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
25459: LD_ADDR_VAR 0 6
25463: PUSH
25464: LD_VAR 0 6
25468: PPUSH
25469: LD_VAR 0 6
25473: PUSH
25474: LD_INT 1
25476: PLUS
25477: PPUSH
25478: LD_VAR 0 7
25482: PUSH
25483: LD_VAR 0 9
25487: PUSH
25488: EMPTY
25489: LIST
25490: LIST
25491: PPUSH
25492: CALL_OW 2
25496: ST_TO_ADDR
25497: GO 25579
// for j = 1 to result do
25499: LD_ADDR_VAR 0 8
25503: PUSH
25504: DOUBLE
25505: LD_INT 1
25507: DEC
25508: ST_TO_ADDR
25509: LD_VAR 0 6
25513: PUSH
25514: FOR_TO
25515: IFFALSE 25577
// begin if tmp < result [ j ] [ 2 ] then
25517: LD_VAR 0 9
25521: PUSH
25522: LD_VAR 0 6
25526: PUSH
25527: LD_VAR 0 8
25531: ARRAY
25532: PUSH
25533: LD_INT 2
25535: ARRAY
25536: LESS
25537: IFFALSE 25575
// begin result := Insert ( result , j , [ i , tmp ] ) ;
25539: LD_ADDR_VAR 0 6
25543: PUSH
25544: LD_VAR 0 6
25548: PPUSH
25549: LD_VAR 0 8
25553: PPUSH
25554: LD_VAR 0 7
25558: PUSH
25559: LD_VAR 0 9
25563: PUSH
25564: EMPTY
25565: LIST
25566: LIST
25567: PPUSH
25568: CALL_OW 2
25572: ST_TO_ADDR
// break ;
25573: GO 25577
// end ; end ;
25575: GO 25514
25577: POP
25578: POP
// end ; end ;
25579: GO 25378
25581: POP
25582: POP
// if result and not asc then
25583: LD_VAR 0 6
25587: PUSH
25588: LD_VAR 0 4
25592: NOT
25593: AND
25594: IFFALSE 25669
// begin tmp := result ;
25596: LD_ADDR_VAR 0 9
25600: PUSH
25601: LD_VAR 0 6
25605: ST_TO_ADDR
// for i = tmp downto 1 do
25606: LD_ADDR_VAR 0 7
25610: PUSH
25611: DOUBLE
25612: LD_VAR 0 9
25616: INC
25617: ST_TO_ADDR
25618: LD_INT 1
25620: PUSH
25621: FOR_DOWNTO
25622: IFFALSE 25667
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
25624: LD_ADDR_VAR 0 6
25628: PUSH
25629: LD_VAR 0 6
25633: PPUSH
25634: LD_VAR 0 9
25638: PUSH
25639: LD_VAR 0 7
25643: MINUS
25644: PUSH
25645: LD_INT 1
25647: PLUS
25648: PPUSH
25649: LD_VAR 0 9
25653: PUSH
25654: LD_VAR 0 7
25658: ARRAY
25659: PPUSH
25660: CALL_OW 1
25664: ST_TO_ADDR
25665: GO 25621
25667: POP
25668: POP
// end ; tmp := [ ] ;
25669: LD_ADDR_VAR 0 9
25673: PUSH
25674: EMPTY
25675: ST_TO_ADDR
// if mode then
25676: LD_VAR 0 5
25680: IFFALSE 25749
// begin for i = 1 to result do
25682: LD_ADDR_VAR 0 7
25686: PUSH
25687: DOUBLE
25688: LD_INT 1
25690: DEC
25691: ST_TO_ADDR
25692: LD_VAR 0 6
25696: PUSH
25697: FOR_TO
25698: IFFALSE 25737
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
25700: LD_ADDR_VAR 0 9
25704: PUSH
25705: LD_VAR 0 9
25709: PPUSH
25710: LD_VAR 0 7
25714: PPUSH
25715: LD_VAR 0 6
25719: PUSH
25720: LD_VAR 0 7
25724: ARRAY
25725: PUSH
25726: LD_INT 1
25728: ARRAY
25729: PPUSH
25730: CALL_OW 1
25734: ST_TO_ADDR
25735: GO 25697
25737: POP
25738: POP
// result := tmp ;
25739: LD_ADDR_VAR 0 6
25743: PUSH
25744: LD_VAR 0 9
25748: ST_TO_ADDR
// end ; end ;
25749: LD_VAR 0 6
25753: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
25754: LD_INT 0
25756: PPUSH
25757: PPUSH
25758: PPUSH
25759: PPUSH
25760: PPUSH
25761: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
25762: LD_ADDR_VAR 0 5
25766: PUSH
25767: LD_INT 0
25769: PUSH
25770: LD_INT 0
25772: PUSH
25773: LD_INT 0
25775: PUSH
25776: EMPTY
25777: PUSH
25778: EMPTY
25779: LIST
25780: LIST
25781: LIST
25782: LIST
25783: ST_TO_ADDR
// if not x or not y then
25784: LD_VAR 0 2
25788: NOT
25789: PUSH
25790: LD_VAR 0 3
25794: NOT
25795: OR
25796: IFFALSE 25800
// exit ;
25798: GO 27452
// if not range then
25800: LD_VAR 0 4
25804: NOT
25805: IFFALSE 25815
// range := 10 ;
25807: LD_ADDR_VAR 0 4
25811: PUSH
25812: LD_INT 10
25814: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25815: LD_ADDR_VAR 0 8
25819: PUSH
25820: LD_INT 81
25822: PUSH
25823: LD_VAR 0 1
25827: PUSH
25828: EMPTY
25829: LIST
25830: LIST
25831: PUSH
25832: LD_INT 92
25834: PUSH
25835: LD_VAR 0 2
25839: PUSH
25840: LD_VAR 0 3
25844: PUSH
25845: LD_VAR 0 4
25849: PUSH
25850: EMPTY
25851: LIST
25852: LIST
25853: LIST
25854: LIST
25855: PUSH
25856: LD_INT 3
25858: PUSH
25859: LD_INT 21
25861: PUSH
25862: LD_INT 3
25864: PUSH
25865: EMPTY
25866: LIST
25867: LIST
25868: PUSH
25869: EMPTY
25870: LIST
25871: LIST
25872: PUSH
25873: EMPTY
25874: LIST
25875: LIST
25876: LIST
25877: PPUSH
25878: CALL_OW 69
25882: ST_TO_ADDR
// if not tmp then
25883: LD_VAR 0 8
25887: NOT
25888: IFFALSE 25892
// exit ;
25890: GO 27452
// for i in tmp do
25892: LD_ADDR_VAR 0 6
25896: PUSH
25897: LD_VAR 0 8
25901: PUSH
25902: FOR_IN
25903: IFFALSE 27427
// begin points := [ 0 , 0 , 0 ] ;
25905: LD_ADDR_VAR 0 9
25909: PUSH
25910: LD_INT 0
25912: PUSH
25913: LD_INT 0
25915: PUSH
25916: LD_INT 0
25918: PUSH
25919: EMPTY
25920: LIST
25921: LIST
25922: LIST
25923: ST_TO_ADDR
// bpoints := 1 ;
25924: LD_ADDR_VAR 0 10
25928: PUSH
25929: LD_INT 1
25931: ST_TO_ADDR
// case GetType ( i ) of unit_human :
25932: LD_VAR 0 6
25936: PPUSH
25937: CALL_OW 247
25941: PUSH
25942: LD_INT 1
25944: DOUBLE
25945: EQUAL
25946: IFTRUE 25950
25948: GO 26528
25950: POP
// begin if GetClass ( i ) = 1 then
25951: LD_VAR 0 6
25955: PPUSH
25956: CALL_OW 257
25960: PUSH
25961: LD_INT 1
25963: EQUAL
25964: IFFALSE 25985
// points := [ 10 , 5 , 3 ] ;
25966: LD_ADDR_VAR 0 9
25970: PUSH
25971: LD_INT 10
25973: PUSH
25974: LD_INT 5
25976: PUSH
25977: LD_INT 3
25979: PUSH
25980: EMPTY
25981: LIST
25982: LIST
25983: LIST
25984: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
25985: LD_VAR 0 6
25989: PPUSH
25990: CALL_OW 257
25994: PUSH
25995: LD_INT 2
25997: PUSH
25998: LD_INT 3
26000: PUSH
26001: LD_INT 4
26003: PUSH
26004: EMPTY
26005: LIST
26006: LIST
26007: LIST
26008: IN
26009: IFFALSE 26030
// points := [ 3 , 2 , 1 ] ;
26011: LD_ADDR_VAR 0 9
26015: PUSH
26016: LD_INT 3
26018: PUSH
26019: LD_INT 2
26021: PUSH
26022: LD_INT 1
26024: PUSH
26025: EMPTY
26026: LIST
26027: LIST
26028: LIST
26029: ST_TO_ADDR
// if GetClass ( i ) = 5 then
26030: LD_VAR 0 6
26034: PPUSH
26035: CALL_OW 257
26039: PUSH
26040: LD_INT 5
26042: EQUAL
26043: IFFALSE 26064
// points := [ 130 , 5 , 2 ] ;
26045: LD_ADDR_VAR 0 9
26049: PUSH
26050: LD_INT 130
26052: PUSH
26053: LD_INT 5
26055: PUSH
26056: LD_INT 2
26058: PUSH
26059: EMPTY
26060: LIST
26061: LIST
26062: LIST
26063: ST_TO_ADDR
// if GetClass ( i ) = 8 then
26064: LD_VAR 0 6
26068: PPUSH
26069: CALL_OW 257
26073: PUSH
26074: LD_INT 8
26076: EQUAL
26077: IFFALSE 26098
// points := [ 35 , 35 , 30 ] ;
26079: LD_ADDR_VAR 0 9
26083: PUSH
26084: LD_INT 35
26086: PUSH
26087: LD_INT 35
26089: PUSH
26090: LD_INT 30
26092: PUSH
26093: EMPTY
26094: LIST
26095: LIST
26096: LIST
26097: ST_TO_ADDR
// if GetClass ( i ) = 9 then
26098: LD_VAR 0 6
26102: PPUSH
26103: CALL_OW 257
26107: PUSH
26108: LD_INT 9
26110: EQUAL
26111: IFFALSE 26132
// points := [ 20 , 55 , 40 ] ;
26113: LD_ADDR_VAR 0 9
26117: PUSH
26118: LD_INT 20
26120: PUSH
26121: LD_INT 55
26123: PUSH
26124: LD_INT 40
26126: PUSH
26127: EMPTY
26128: LIST
26129: LIST
26130: LIST
26131: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
26132: LD_VAR 0 6
26136: PPUSH
26137: CALL_OW 257
26141: PUSH
26142: LD_INT 12
26144: PUSH
26145: LD_INT 16
26147: PUSH
26148: EMPTY
26149: LIST
26150: LIST
26151: IN
26152: IFFALSE 26173
// points := [ 5 , 3 , 2 ] ;
26154: LD_ADDR_VAR 0 9
26158: PUSH
26159: LD_INT 5
26161: PUSH
26162: LD_INT 3
26164: PUSH
26165: LD_INT 2
26167: PUSH
26168: EMPTY
26169: LIST
26170: LIST
26171: LIST
26172: ST_TO_ADDR
// if GetClass ( i ) = 17 then
26173: LD_VAR 0 6
26177: PPUSH
26178: CALL_OW 257
26182: PUSH
26183: LD_INT 17
26185: EQUAL
26186: IFFALSE 26207
// points := [ 100 , 50 , 75 ] ;
26188: LD_ADDR_VAR 0 9
26192: PUSH
26193: LD_INT 100
26195: PUSH
26196: LD_INT 50
26198: PUSH
26199: LD_INT 75
26201: PUSH
26202: EMPTY
26203: LIST
26204: LIST
26205: LIST
26206: ST_TO_ADDR
// if GetClass ( i ) = 15 then
26207: LD_VAR 0 6
26211: PPUSH
26212: CALL_OW 257
26216: PUSH
26217: LD_INT 15
26219: EQUAL
26220: IFFALSE 26241
// points := [ 10 , 5 , 3 ] ;
26222: LD_ADDR_VAR 0 9
26226: PUSH
26227: LD_INT 10
26229: PUSH
26230: LD_INT 5
26232: PUSH
26233: LD_INT 3
26235: PUSH
26236: EMPTY
26237: LIST
26238: LIST
26239: LIST
26240: ST_TO_ADDR
// if GetClass ( i ) = 14 then
26241: LD_VAR 0 6
26245: PPUSH
26246: CALL_OW 257
26250: PUSH
26251: LD_INT 14
26253: EQUAL
26254: IFFALSE 26275
// points := [ 10 , 0 , 0 ] ;
26256: LD_ADDR_VAR 0 9
26260: PUSH
26261: LD_INT 10
26263: PUSH
26264: LD_INT 0
26266: PUSH
26267: LD_INT 0
26269: PUSH
26270: EMPTY
26271: LIST
26272: LIST
26273: LIST
26274: ST_TO_ADDR
// if GetClass ( i ) = 11 then
26275: LD_VAR 0 6
26279: PPUSH
26280: CALL_OW 257
26284: PUSH
26285: LD_INT 11
26287: EQUAL
26288: IFFALSE 26309
// points := [ 30 , 10 , 5 ] ;
26290: LD_ADDR_VAR 0 9
26294: PUSH
26295: LD_INT 30
26297: PUSH
26298: LD_INT 10
26300: PUSH
26301: LD_INT 5
26303: PUSH
26304: EMPTY
26305: LIST
26306: LIST
26307: LIST
26308: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
26309: LD_VAR 0 1
26313: PPUSH
26314: LD_INT 5
26316: PPUSH
26317: CALL_OW 321
26321: PUSH
26322: LD_INT 2
26324: EQUAL
26325: IFFALSE 26342
// bpoints := bpoints * 1.8 ;
26327: LD_ADDR_VAR 0 10
26331: PUSH
26332: LD_VAR 0 10
26336: PUSH
26337: LD_REAL  1.80000000000000E+0000
26340: MUL
26341: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
26342: LD_VAR 0 6
26346: PPUSH
26347: CALL_OW 257
26351: PUSH
26352: LD_INT 1
26354: PUSH
26355: LD_INT 2
26357: PUSH
26358: LD_INT 3
26360: PUSH
26361: LD_INT 4
26363: PUSH
26364: EMPTY
26365: LIST
26366: LIST
26367: LIST
26368: LIST
26369: IN
26370: PUSH
26371: LD_VAR 0 1
26375: PPUSH
26376: LD_INT 51
26378: PPUSH
26379: CALL_OW 321
26383: PUSH
26384: LD_INT 2
26386: EQUAL
26387: AND
26388: IFFALSE 26405
// bpoints := bpoints * 1.2 ;
26390: LD_ADDR_VAR 0 10
26394: PUSH
26395: LD_VAR 0 10
26399: PUSH
26400: LD_REAL  1.20000000000000E+0000
26403: MUL
26404: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
26405: LD_VAR 0 6
26409: PPUSH
26410: CALL_OW 257
26414: PUSH
26415: LD_INT 5
26417: PUSH
26418: LD_INT 7
26420: PUSH
26421: LD_INT 9
26423: PUSH
26424: EMPTY
26425: LIST
26426: LIST
26427: LIST
26428: IN
26429: PUSH
26430: LD_VAR 0 1
26434: PPUSH
26435: LD_INT 52
26437: PPUSH
26438: CALL_OW 321
26442: PUSH
26443: LD_INT 2
26445: EQUAL
26446: AND
26447: IFFALSE 26464
// bpoints := bpoints * 1.5 ;
26449: LD_ADDR_VAR 0 10
26453: PUSH
26454: LD_VAR 0 10
26458: PUSH
26459: LD_REAL  1.50000000000000E+0000
26462: MUL
26463: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
26464: LD_VAR 0 1
26468: PPUSH
26469: LD_INT 66
26471: PPUSH
26472: CALL_OW 321
26476: PUSH
26477: LD_INT 2
26479: EQUAL
26480: IFFALSE 26497
// bpoints := bpoints * 1.1 ;
26482: LD_ADDR_VAR 0 10
26486: PUSH
26487: LD_VAR 0 10
26491: PUSH
26492: LD_REAL  1.10000000000000E+0000
26495: MUL
26496: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
26497: LD_ADDR_VAR 0 10
26501: PUSH
26502: LD_VAR 0 10
26506: PUSH
26507: LD_VAR 0 6
26511: PPUSH
26512: LD_INT 1
26514: PPUSH
26515: CALL_OW 259
26519: PUSH
26520: LD_REAL  1.15000000000000E+0000
26523: MUL
26524: MUL
26525: ST_TO_ADDR
// end ; unit_vehicle :
26526: GO 27356
26528: LD_INT 2
26530: DOUBLE
26531: EQUAL
26532: IFTRUE 26536
26534: GO 27344
26536: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
26537: LD_VAR 0 6
26541: PPUSH
26542: CALL_OW 264
26546: PUSH
26547: LD_INT 2
26549: PUSH
26550: LD_INT 42
26552: PUSH
26553: LD_INT 24
26555: PUSH
26556: EMPTY
26557: LIST
26558: LIST
26559: LIST
26560: IN
26561: IFFALSE 26582
// points := [ 25 , 5 , 3 ] ;
26563: LD_ADDR_VAR 0 9
26567: PUSH
26568: LD_INT 25
26570: PUSH
26571: LD_INT 5
26573: PUSH
26574: LD_INT 3
26576: PUSH
26577: EMPTY
26578: LIST
26579: LIST
26580: LIST
26581: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
26582: LD_VAR 0 6
26586: PPUSH
26587: CALL_OW 264
26591: PUSH
26592: LD_INT 4
26594: PUSH
26595: LD_INT 43
26597: PUSH
26598: LD_INT 25
26600: PUSH
26601: EMPTY
26602: LIST
26603: LIST
26604: LIST
26605: IN
26606: IFFALSE 26627
// points := [ 40 , 15 , 5 ] ;
26608: LD_ADDR_VAR 0 9
26612: PUSH
26613: LD_INT 40
26615: PUSH
26616: LD_INT 15
26618: PUSH
26619: LD_INT 5
26621: PUSH
26622: EMPTY
26623: LIST
26624: LIST
26625: LIST
26626: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
26627: LD_VAR 0 6
26631: PPUSH
26632: CALL_OW 264
26636: PUSH
26637: LD_INT 3
26639: PUSH
26640: LD_INT 23
26642: PUSH
26643: EMPTY
26644: LIST
26645: LIST
26646: IN
26647: IFFALSE 26668
// points := [ 7 , 25 , 8 ] ;
26649: LD_ADDR_VAR 0 9
26653: PUSH
26654: LD_INT 7
26656: PUSH
26657: LD_INT 25
26659: PUSH
26660: LD_INT 8
26662: PUSH
26663: EMPTY
26664: LIST
26665: LIST
26666: LIST
26667: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
26668: LD_VAR 0 6
26672: PPUSH
26673: CALL_OW 264
26677: PUSH
26678: LD_INT 5
26680: PUSH
26681: LD_INT 27
26683: PUSH
26684: LD_INT 44
26686: PUSH
26687: EMPTY
26688: LIST
26689: LIST
26690: LIST
26691: IN
26692: IFFALSE 26713
// points := [ 14 , 50 , 16 ] ;
26694: LD_ADDR_VAR 0 9
26698: PUSH
26699: LD_INT 14
26701: PUSH
26702: LD_INT 50
26704: PUSH
26705: LD_INT 16
26707: PUSH
26708: EMPTY
26709: LIST
26710: LIST
26711: LIST
26712: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
26713: LD_VAR 0 6
26717: PPUSH
26718: CALL_OW 264
26722: PUSH
26723: LD_INT 6
26725: PUSH
26726: LD_INT 46
26728: PUSH
26729: EMPTY
26730: LIST
26731: LIST
26732: IN
26733: IFFALSE 26754
// points := [ 32 , 120 , 70 ] ;
26735: LD_ADDR_VAR 0 9
26739: PUSH
26740: LD_INT 32
26742: PUSH
26743: LD_INT 120
26745: PUSH
26746: LD_INT 70
26748: PUSH
26749: EMPTY
26750: LIST
26751: LIST
26752: LIST
26753: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
26754: LD_VAR 0 6
26758: PPUSH
26759: CALL_OW 264
26763: PUSH
26764: LD_INT 7
26766: PUSH
26767: LD_INT 28
26769: PUSH
26770: LD_INT 45
26772: PUSH
26773: LD_EXP 34
26777: PUSH
26778: EMPTY
26779: LIST
26780: LIST
26781: LIST
26782: LIST
26783: IN
26784: IFFALSE 26805
// points := [ 35 , 20 , 45 ] ;
26786: LD_ADDR_VAR 0 9
26790: PUSH
26791: LD_INT 35
26793: PUSH
26794: LD_INT 20
26796: PUSH
26797: LD_INT 45
26799: PUSH
26800: EMPTY
26801: LIST
26802: LIST
26803: LIST
26804: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
26805: LD_VAR 0 6
26809: PPUSH
26810: CALL_OW 264
26814: PUSH
26815: LD_INT 47
26817: PUSH
26818: EMPTY
26819: LIST
26820: IN
26821: IFFALSE 26842
// points := [ 67 , 45 , 75 ] ;
26823: LD_ADDR_VAR 0 9
26827: PUSH
26828: LD_INT 67
26830: PUSH
26831: LD_INT 45
26833: PUSH
26834: LD_INT 75
26836: PUSH
26837: EMPTY
26838: LIST
26839: LIST
26840: LIST
26841: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
26842: LD_VAR 0 6
26846: PPUSH
26847: CALL_OW 264
26851: PUSH
26852: LD_INT 26
26854: PUSH
26855: EMPTY
26856: LIST
26857: IN
26858: IFFALSE 26879
// points := [ 120 , 30 , 80 ] ;
26860: LD_ADDR_VAR 0 9
26864: PUSH
26865: LD_INT 120
26867: PUSH
26868: LD_INT 30
26870: PUSH
26871: LD_INT 80
26873: PUSH
26874: EMPTY
26875: LIST
26876: LIST
26877: LIST
26878: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
26879: LD_VAR 0 6
26883: PPUSH
26884: CALL_OW 264
26888: PUSH
26889: LD_INT 22
26891: PUSH
26892: EMPTY
26893: LIST
26894: IN
26895: IFFALSE 26916
// points := [ 40 , 1 , 1 ] ;
26897: LD_ADDR_VAR 0 9
26901: PUSH
26902: LD_INT 40
26904: PUSH
26905: LD_INT 1
26907: PUSH
26908: LD_INT 1
26910: PUSH
26911: EMPTY
26912: LIST
26913: LIST
26914: LIST
26915: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
26916: LD_VAR 0 6
26920: PPUSH
26921: CALL_OW 264
26925: PUSH
26926: LD_INT 29
26928: PUSH
26929: EMPTY
26930: LIST
26931: IN
26932: IFFALSE 26953
// points := [ 70 , 200 , 400 ] ;
26934: LD_ADDR_VAR 0 9
26938: PUSH
26939: LD_INT 70
26941: PUSH
26942: LD_INT 200
26944: PUSH
26945: LD_INT 400
26947: PUSH
26948: EMPTY
26949: LIST
26950: LIST
26951: LIST
26952: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
26953: LD_VAR 0 6
26957: PPUSH
26958: CALL_OW 264
26962: PUSH
26963: LD_INT 14
26965: PUSH
26966: LD_INT 53
26968: PUSH
26969: EMPTY
26970: LIST
26971: LIST
26972: IN
26973: IFFALSE 26994
// points := [ 40 , 10 , 20 ] ;
26975: LD_ADDR_VAR 0 9
26979: PUSH
26980: LD_INT 40
26982: PUSH
26983: LD_INT 10
26985: PUSH
26986: LD_INT 20
26988: PUSH
26989: EMPTY
26990: LIST
26991: LIST
26992: LIST
26993: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
26994: LD_VAR 0 6
26998: PPUSH
26999: CALL_OW 264
27003: PUSH
27004: LD_INT 9
27006: PUSH
27007: EMPTY
27008: LIST
27009: IN
27010: IFFALSE 27031
// points := [ 5 , 70 , 20 ] ;
27012: LD_ADDR_VAR 0 9
27016: PUSH
27017: LD_INT 5
27019: PUSH
27020: LD_INT 70
27022: PUSH
27023: LD_INT 20
27025: PUSH
27026: EMPTY
27027: LIST
27028: LIST
27029: LIST
27030: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
27031: LD_VAR 0 6
27035: PPUSH
27036: CALL_OW 264
27040: PUSH
27041: LD_INT 10
27043: PUSH
27044: EMPTY
27045: LIST
27046: IN
27047: IFFALSE 27068
// points := [ 35 , 110 , 70 ] ;
27049: LD_ADDR_VAR 0 9
27053: PUSH
27054: LD_INT 35
27056: PUSH
27057: LD_INT 110
27059: PUSH
27060: LD_INT 70
27062: PUSH
27063: EMPTY
27064: LIST
27065: LIST
27066: LIST
27067: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
27068: LD_VAR 0 6
27072: PPUSH
27073: CALL_OW 265
27077: PUSH
27078: LD_INT 25
27080: EQUAL
27081: IFFALSE 27102
// points := [ 80 , 65 , 100 ] ;
27083: LD_ADDR_VAR 0 9
27087: PUSH
27088: LD_INT 80
27090: PUSH
27091: LD_INT 65
27093: PUSH
27094: LD_INT 100
27096: PUSH
27097: EMPTY
27098: LIST
27099: LIST
27100: LIST
27101: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
27102: LD_VAR 0 6
27106: PPUSH
27107: CALL_OW 263
27111: PUSH
27112: LD_INT 1
27114: EQUAL
27115: IFFALSE 27150
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
27117: LD_ADDR_VAR 0 10
27121: PUSH
27122: LD_VAR 0 10
27126: PUSH
27127: LD_VAR 0 6
27131: PPUSH
27132: CALL_OW 311
27136: PPUSH
27137: LD_INT 3
27139: PPUSH
27140: CALL_OW 259
27144: PUSH
27145: LD_INT 4
27147: MUL
27148: MUL
27149: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
27150: LD_VAR 0 6
27154: PPUSH
27155: CALL_OW 263
27159: PUSH
27160: LD_INT 2
27162: EQUAL
27163: IFFALSE 27214
// begin j := IsControledBy ( i ) ;
27165: LD_ADDR_VAR 0 7
27169: PUSH
27170: LD_VAR 0 6
27174: PPUSH
27175: CALL_OW 312
27179: ST_TO_ADDR
// if j then
27180: LD_VAR 0 7
27184: IFFALSE 27214
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
27186: LD_ADDR_VAR 0 10
27190: PUSH
27191: LD_VAR 0 10
27195: PUSH
27196: LD_VAR 0 7
27200: PPUSH
27201: LD_INT 3
27203: PPUSH
27204: CALL_OW 259
27208: PUSH
27209: LD_INT 3
27211: MUL
27212: MUL
27213: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
27214: LD_VAR 0 6
27218: PPUSH
27219: CALL_OW 264
27223: PUSH
27224: LD_INT 5
27226: PUSH
27227: LD_INT 6
27229: PUSH
27230: LD_INT 46
27232: PUSH
27233: LD_INT 44
27235: PUSH
27236: LD_INT 47
27238: PUSH
27239: LD_INT 45
27241: PUSH
27242: LD_INT 28
27244: PUSH
27245: LD_INT 7
27247: PUSH
27248: LD_INT 27
27250: PUSH
27251: LD_INT 29
27253: PUSH
27254: EMPTY
27255: LIST
27256: LIST
27257: LIST
27258: LIST
27259: LIST
27260: LIST
27261: LIST
27262: LIST
27263: LIST
27264: LIST
27265: IN
27266: PUSH
27267: LD_VAR 0 1
27271: PPUSH
27272: LD_INT 52
27274: PPUSH
27275: CALL_OW 321
27279: PUSH
27280: LD_INT 2
27282: EQUAL
27283: AND
27284: IFFALSE 27301
// bpoints := bpoints * 1.2 ;
27286: LD_ADDR_VAR 0 10
27290: PUSH
27291: LD_VAR 0 10
27295: PUSH
27296: LD_REAL  1.20000000000000E+0000
27299: MUL
27300: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
27301: LD_VAR 0 6
27305: PPUSH
27306: CALL_OW 264
27310: PUSH
27311: LD_INT 6
27313: PUSH
27314: LD_INT 46
27316: PUSH
27317: LD_INT 47
27319: PUSH
27320: EMPTY
27321: LIST
27322: LIST
27323: LIST
27324: IN
27325: IFFALSE 27342
// bpoints := bpoints * 1.2 ;
27327: LD_ADDR_VAR 0 10
27331: PUSH
27332: LD_VAR 0 10
27336: PUSH
27337: LD_REAL  1.20000000000000E+0000
27340: MUL
27341: ST_TO_ADDR
// end ; unit_building :
27342: GO 27356
27344: LD_INT 3
27346: DOUBLE
27347: EQUAL
27348: IFTRUE 27352
27350: GO 27355
27352: POP
// ; end ;
27353: GO 27356
27355: POP
// for j = 1 to 3 do
27356: LD_ADDR_VAR 0 7
27360: PUSH
27361: DOUBLE
27362: LD_INT 1
27364: DEC
27365: ST_TO_ADDR
27366: LD_INT 3
27368: PUSH
27369: FOR_TO
27370: IFFALSE 27423
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
27372: LD_ADDR_VAR 0 5
27376: PUSH
27377: LD_VAR 0 5
27381: PPUSH
27382: LD_VAR 0 7
27386: PPUSH
27387: LD_VAR 0 5
27391: PUSH
27392: LD_VAR 0 7
27396: ARRAY
27397: PUSH
27398: LD_VAR 0 9
27402: PUSH
27403: LD_VAR 0 7
27407: ARRAY
27408: PUSH
27409: LD_VAR 0 10
27413: MUL
27414: PLUS
27415: PPUSH
27416: CALL_OW 1
27420: ST_TO_ADDR
27421: GO 27369
27423: POP
27424: POP
// end ;
27425: GO 25902
27427: POP
27428: POP
// result := Replace ( result , 4 , tmp ) ;
27429: LD_ADDR_VAR 0 5
27433: PUSH
27434: LD_VAR 0 5
27438: PPUSH
27439: LD_INT 4
27441: PPUSH
27442: LD_VAR 0 8
27446: PPUSH
27447: CALL_OW 1
27451: ST_TO_ADDR
// end ;
27452: LD_VAR 0 5
27456: RET
// export function DangerAtRange ( unit , range ) ; begin
27457: LD_INT 0
27459: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
27460: LD_ADDR_VAR 0 3
27464: PUSH
27465: LD_VAR 0 1
27469: PPUSH
27470: CALL_OW 255
27474: PPUSH
27475: LD_VAR 0 1
27479: PPUSH
27480: CALL_OW 250
27484: PPUSH
27485: LD_VAR 0 1
27489: PPUSH
27490: CALL_OW 251
27494: PPUSH
27495: LD_VAR 0 2
27499: PPUSH
27500: CALL 25754 0 4
27504: ST_TO_ADDR
// end ;
27505: LD_VAR 0 3
27509: RET
// export function DangerInArea ( side , area ) ; begin
27510: LD_INT 0
27512: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
27513: LD_ADDR_VAR 0 3
27517: PUSH
27518: LD_VAR 0 2
27522: PPUSH
27523: LD_INT 81
27525: PUSH
27526: LD_VAR 0 1
27530: PUSH
27531: EMPTY
27532: LIST
27533: LIST
27534: PPUSH
27535: CALL_OW 70
27539: ST_TO_ADDR
// end ;
27540: LD_VAR 0 3
27544: RET
// export function IsExtension ( b ) ; begin
27545: LD_INT 0
27547: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
27548: LD_ADDR_VAR 0 2
27552: PUSH
27553: LD_VAR 0 1
27557: PUSH
27558: LD_INT 23
27560: PUSH
27561: LD_INT 20
27563: PUSH
27564: LD_INT 22
27566: PUSH
27567: LD_INT 17
27569: PUSH
27570: LD_INT 24
27572: PUSH
27573: LD_INT 21
27575: PUSH
27576: LD_INT 19
27578: PUSH
27579: LD_INT 16
27581: PUSH
27582: LD_INT 25
27584: PUSH
27585: LD_INT 18
27587: PUSH
27588: EMPTY
27589: LIST
27590: LIST
27591: LIST
27592: LIST
27593: LIST
27594: LIST
27595: LIST
27596: LIST
27597: LIST
27598: LIST
27599: IN
27600: ST_TO_ADDR
// end ;
27601: LD_VAR 0 2
27605: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
27606: LD_INT 0
27608: PPUSH
27609: PPUSH
27610: PPUSH
// result := [ ] ;
27611: LD_ADDR_VAR 0 4
27615: PUSH
27616: EMPTY
27617: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
27618: LD_ADDR_VAR 0 5
27622: PUSH
27623: LD_VAR 0 2
27627: PPUSH
27628: LD_INT 21
27630: PUSH
27631: LD_INT 3
27633: PUSH
27634: EMPTY
27635: LIST
27636: LIST
27637: PPUSH
27638: CALL_OW 70
27642: ST_TO_ADDR
// if not tmp then
27643: LD_VAR 0 5
27647: NOT
27648: IFFALSE 27652
// exit ;
27650: GO 27716
// if checkLink then
27652: LD_VAR 0 3
27656: IFFALSE 27706
// begin for i in tmp do
27658: LD_ADDR_VAR 0 6
27662: PUSH
27663: LD_VAR 0 5
27667: PUSH
27668: FOR_IN
27669: IFFALSE 27704
// if GetBase ( i ) <> base then
27671: LD_VAR 0 6
27675: PPUSH
27676: CALL_OW 274
27680: PUSH
27681: LD_VAR 0 1
27685: NONEQUAL
27686: IFFALSE 27702
// ComLinkToBase ( base , i ) ;
27688: LD_VAR 0 1
27692: PPUSH
27693: LD_VAR 0 6
27697: PPUSH
27698: CALL_OW 169
27702: GO 27668
27704: POP
27705: POP
// end ; result := tmp ;
27706: LD_ADDR_VAR 0 4
27710: PUSH
27711: LD_VAR 0 5
27715: ST_TO_ADDR
// end ;
27716: LD_VAR 0 4
27720: RET
// export function ComComplete ( units , b ) ; var i ; begin
27721: LD_INT 0
27723: PPUSH
27724: PPUSH
// if not units then
27725: LD_VAR 0 1
27729: NOT
27730: IFFALSE 27734
// exit ;
27732: GO 27824
// for i in units do
27734: LD_ADDR_VAR 0 4
27738: PUSH
27739: LD_VAR 0 1
27743: PUSH
27744: FOR_IN
27745: IFFALSE 27822
// if BuildingStatus ( b ) = bs_build then
27747: LD_VAR 0 2
27751: PPUSH
27752: CALL_OW 461
27756: PUSH
27757: LD_INT 1
27759: EQUAL
27760: IFFALSE 27820
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
27762: LD_VAR 0 4
27766: PPUSH
27767: LD_STRING h
27769: PUSH
27770: LD_VAR 0 2
27774: PPUSH
27775: CALL_OW 250
27779: PUSH
27780: LD_VAR 0 2
27784: PPUSH
27785: CALL_OW 251
27789: PUSH
27790: LD_VAR 0 2
27794: PUSH
27795: LD_INT 0
27797: PUSH
27798: LD_INT 0
27800: PUSH
27801: LD_INT 0
27803: PUSH
27804: EMPTY
27805: LIST
27806: LIST
27807: LIST
27808: LIST
27809: LIST
27810: LIST
27811: LIST
27812: PUSH
27813: EMPTY
27814: LIST
27815: PPUSH
27816: CALL_OW 446
27820: GO 27744
27822: POP
27823: POP
// end ;
27824: LD_VAR 0 3
27828: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
27829: LD_INT 0
27831: PPUSH
27832: PPUSH
27833: PPUSH
27834: PPUSH
27835: PPUSH
27836: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
27837: LD_VAR 0 1
27841: NOT
27842: PUSH
27843: LD_VAR 0 1
27847: PPUSH
27848: CALL_OW 263
27852: PUSH
27853: LD_INT 2
27855: NONEQUAL
27856: OR
27857: IFFALSE 27861
// exit ;
27859: GO 28177
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
27861: LD_ADDR_VAR 0 6
27865: PUSH
27866: LD_INT 22
27868: PUSH
27869: LD_VAR 0 1
27873: PPUSH
27874: CALL_OW 255
27878: PUSH
27879: EMPTY
27880: LIST
27881: LIST
27882: PUSH
27883: LD_INT 2
27885: PUSH
27886: LD_INT 30
27888: PUSH
27889: LD_INT 36
27891: PUSH
27892: EMPTY
27893: LIST
27894: LIST
27895: PUSH
27896: LD_INT 34
27898: PUSH
27899: LD_INT 31
27901: PUSH
27902: EMPTY
27903: LIST
27904: LIST
27905: PUSH
27906: EMPTY
27907: LIST
27908: LIST
27909: LIST
27910: PUSH
27911: EMPTY
27912: LIST
27913: LIST
27914: PPUSH
27915: CALL_OW 69
27919: ST_TO_ADDR
// if not tmp then
27920: LD_VAR 0 6
27924: NOT
27925: IFFALSE 27929
// exit ;
27927: GO 28177
// result := [ ] ;
27929: LD_ADDR_VAR 0 2
27933: PUSH
27934: EMPTY
27935: ST_TO_ADDR
// for i in tmp do
27936: LD_ADDR_VAR 0 3
27940: PUSH
27941: LD_VAR 0 6
27945: PUSH
27946: FOR_IN
27947: IFFALSE 28018
// begin t := UnitsInside ( i ) ;
27949: LD_ADDR_VAR 0 4
27953: PUSH
27954: LD_VAR 0 3
27958: PPUSH
27959: CALL_OW 313
27963: ST_TO_ADDR
// if t then
27964: LD_VAR 0 4
27968: IFFALSE 28016
// for j in t do
27970: LD_ADDR_VAR 0 7
27974: PUSH
27975: LD_VAR 0 4
27979: PUSH
27980: FOR_IN
27981: IFFALSE 28014
// result := Replace ( result , result + 1 , j ) ;
27983: LD_ADDR_VAR 0 2
27987: PUSH
27988: LD_VAR 0 2
27992: PPUSH
27993: LD_VAR 0 2
27997: PUSH
27998: LD_INT 1
28000: PLUS
28001: PPUSH
28002: LD_VAR 0 7
28006: PPUSH
28007: CALL_OW 1
28011: ST_TO_ADDR
28012: GO 27980
28014: POP
28015: POP
// end ;
28016: GO 27946
28018: POP
28019: POP
// if not result then
28020: LD_VAR 0 2
28024: NOT
28025: IFFALSE 28029
// exit ;
28027: GO 28177
// mech := result [ 1 ] ;
28029: LD_ADDR_VAR 0 5
28033: PUSH
28034: LD_VAR 0 2
28038: PUSH
28039: LD_INT 1
28041: ARRAY
28042: ST_TO_ADDR
// if result > 1 then
28043: LD_VAR 0 2
28047: PUSH
28048: LD_INT 1
28050: GREATER
28051: IFFALSE 28163
// begin for i = 2 to result do
28053: LD_ADDR_VAR 0 3
28057: PUSH
28058: DOUBLE
28059: LD_INT 2
28061: DEC
28062: ST_TO_ADDR
28063: LD_VAR 0 2
28067: PUSH
28068: FOR_TO
28069: IFFALSE 28161
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
28071: LD_ADDR_VAR 0 4
28075: PUSH
28076: LD_VAR 0 2
28080: PUSH
28081: LD_VAR 0 3
28085: ARRAY
28086: PPUSH
28087: LD_INT 3
28089: PPUSH
28090: CALL_OW 259
28094: PUSH
28095: LD_VAR 0 2
28099: PUSH
28100: LD_VAR 0 3
28104: ARRAY
28105: PPUSH
28106: CALL_OW 432
28110: MINUS
28111: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
28112: LD_VAR 0 4
28116: PUSH
28117: LD_VAR 0 5
28121: PPUSH
28122: LD_INT 3
28124: PPUSH
28125: CALL_OW 259
28129: PUSH
28130: LD_VAR 0 5
28134: PPUSH
28135: CALL_OW 432
28139: MINUS
28140: GREATEREQUAL
28141: IFFALSE 28159
// mech := result [ i ] ;
28143: LD_ADDR_VAR 0 5
28147: PUSH
28148: LD_VAR 0 2
28152: PUSH
28153: LD_VAR 0 3
28157: ARRAY
28158: ST_TO_ADDR
// end ;
28159: GO 28068
28161: POP
28162: POP
// end ; ComLinkTo ( vehicle , mech ) ;
28163: LD_VAR 0 1
28167: PPUSH
28168: LD_VAR 0 5
28172: PPUSH
28173: CALL_OW 135
// end ;
28177: LD_VAR 0 2
28181: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
28182: LD_INT 0
28184: PPUSH
28185: PPUSH
28186: PPUSH
28187: PPUSH
28188: PPUSH
28189: PPUSH
28190: PPUSH
28191: PPUSH
28192: PPUSH
28193: PPUSH
28194: PPUSH
28195: PPUSH
28196: PPUSH
// result := [ ] ;
28197: LD_ADDR_VAR 0 7
28201: PUSH
28202: EMPTY
28203: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
28204: LD_VAR 0 1
28208: PPUSH
28209: CALL_OW 266
28213: PUSH
28214: LD_INT 0
28216: PUSH
28217: LD_INT 1
28219: PUSH
28220: EMPTY
28221: LIST
28222: LIST
28223: IN
28224: NOT
28225: IFFALSE 28229
// exit ;
28227: GO 29863
// if name then
28229: LD_VAR 0 3
28233: IFFALSE 28249
// SetBName ( base_dep , name ) ;
28235: LD_VAR 0 1
28239: PPUSH
28240: LD_VAR 0 3
28244: PPUSH
28245: CALL_OW 500
// base := GetBase ( base_dep ) ;
28249: LD_ADDR_VAR 0 15
28253: PUSH
28254: LD_VAR 0 1
28258: PPUSH
28259: CALL_OW 274
28263: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
28264: LD_ADDR_VAR 0 16
28268: PUSH
28269: LD_VAR 0 1
28273: PPUSH
28274: CALL_OW 255
28278: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
28279: LD_ADDR_VAR 0 17
28283: PUSH
28284: LD_VAR 0 1
28288: PPUSH
28289: CALL_OW 248
28293: ST_TO_ADDR
// if sources then
28294: LD_VAR 0 5
28298: IFFALSE 28345
// for i = 1 to 3 do
28300: LD_ADDR_VAR 0 8
28304: PUSH
28305: DOUBLE
28306: LD_INT 1
28308: DEC
28309: ST_TO_ADDR
28310: LD_INT 3
28312: PUSH
28313: FOR_TO
28314: IFFALSE 28343
// AddResourceType ( base , i , sources [ i ] ) ;
28316: LD_VAR 0 15
28320: PPUSH
28321: LD_VAR 0 8
28325: PPUSH
28326: LD_VAR 0 5
28330: PUSH
28331: LD_VAR 0 8
28335: ARRAY
28336: PPUSH
28337: CALL_OW 276
28341: GO 28313
28343: POP
28344: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
28345: LD_ADDR_VAR 0 18
28349: PUSH
28350: LD_VAR 0 15
28354: PPUSH
28355: LD_VAR 0 2
28359: PPUSH
28360: LD_INT 1
28362: PPUSH
28363: CALL 27606 0 3
28367: ST_TO_ADDR
// InitHc ;
28368: CALL_OW 19
// InitUc ;
28372: CALL_OW 18
// uc_side := side ;
28376: LD_ADDR_OWVAR 20
28380: PUSH
28381: LD_VAR 0 16
28385: ST_TO_ADDR
// uc_nation := nation ;
28386: LD_ADDR_OWVAR 21
28390: PUSH
28391: LD_VAR 0 17
28395: ST_TO_ADDR
// if buildings then
28396: LD_VAR 0 18
28400: IFFALSE 29722
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
28402: LD_ADDR_VAR 0 19
28406: PUSH
28407: LD_VAR 0 18
28411: PPUSH
28412: LD_INT 2
28414: PUSH
28415: LD_INT 30
28417: PUSH
28418: LD_INT 29
28420: PUSH
28421: EMPTY
28422: LIST
28423: LIST
28424: PUSH
28425: LD_INT 30
28427: PUSH
28428: LD_INT 30
28430: PUSH
28431: EMPTY
28432: LIST
28433: LIST
28434: PUSH
28435: EMPTY
28436: LIST
28437: LIST
28438: LIST
28439: PPUSH
28440: CALL_OW 72
28444: ST_TO_ADDR
// if tmp then
28445: LD_VAR 0 19
28449: IFFALSE 28497
// for i in tmp do
28451: LD_ADDR_VAR 0 8
28455: PUSH
28456: LD_VAR 0 19
28460: PUSH
28461: FOR_IN
28462: IFFALSE 28495
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
28464: LD_VAR 0 8
28468: PPUSH
28469: CALL_OW 250
28473: PPUSH
28474: LD_VAR 0 8
28478: PPUSH
28479: CALL_OW 251
28483: PPUSH
28484: LD_VAR 0 16
28488: PPUSH
28489: CALL_OW 441
28493: GO 28461
28495: POP
28496: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
28497: LD_VAR 0 18
28501: PPUSH
28502: LD_INT 2
28504: PUSH
28505: LD_INT 30
28507: PUSH
28508: LD_INT 32
28510: PUSH
28511: EMPTY
28512: LIST
28513: LIST
28514: PUSH
28515: LD_INT 30
28517: PUSH
28518: LD_INT 33
28520: PUSH
28521: EMPTY
28522: LIST
28523: LIST
28524: PUSH
28525: EMPTY
28526: LIST
28527: LIST
28528: LIST
28529: PPUSH
28530: CALL_OW 72
28534: IFFALSE 28622
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
28536: LD_ADDR_VAR 0 8
28540: PUSH
28541: LD_VAR 0 18
28545: PPUSH
28546: LD_INT 2
28548: PUSH
28549: LD_INT 30
28551: PUSH
28552: LD_INT 32
28554: PUSH
28555: EMPTY
28556: LIST
28557: LIST
28558: PUSH
28559: LD_INT 30
28561: PUSH
28562: LD_INT 33
28564: PUSH
28565: EMPTY
28566: LIST
28567: LIST
28568: PUSH
28569: EMPTY
28570: LIST
28571: LIST
28572: LIST
28573: PPUSH
28574: CALL_OW 72
28578: PUSH
28579: FOR_IN
28580: IFFALSE 28620
// begin if not GetBWeapon ( i ) then
28582: LD_VAR 0 8
28586: PPUSH
28587: CALL_OW 269
28591: NOT
28592: IFFALSE 28618
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
28594: LD_VAR 0 8
28598: PPUSH
28599: LD_VAR 0 8
28603: PPUSH
28604: LD_VAR 0 2
28608: PPUSH
28609: CALL 29868 0 2
28613: PPUSH
28614: CALL_OW 431
// end ;
28618: GO 28579
28620: POP
28621: POP
// end ; for i = 1 to personel do
28622: LD_ADDR_VAR 0 8
28626: PUSH
28627: DOUBLE
28628: LD_INT 1
28630: DEC
28631: ST_TO_ADDR
28632: LD_VAR 0 6
28636: PUSH
28637: FOR_TO
28638: IFFALSE 29702
// begin if i > 4 then
28640: LD_VAR 0 8
28644: PUSH
28645: LD_INT 4
28647: GREATER
28648: IFFALSE 28652
// break ;
28650: GO 29702
// case i of 1 :
28652: LD_VAR 0 8
28656: PUSH
28657: LD_INT 1
28659: DOUBLE
28660: EQUAL
28661: IFTRUE 28665
28663: GO 28745
28665: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
28666: LD_ADDR_VAR 0 12
28670: PUSH
28671: LD_VAR 0 18
28675: PPUSH
28676: LD_INT 22
28678: PUSH
28679: LD_VAR 0 16
28683: PUSH
28684: EMPTY
28685: LIST
28686: LIST
28687: PUSH
28688: LD_INT 58
28690: PUSH
28691: EMPTY
28692: LIST
28693: PUSH
28694: LD_INT 2
28696: PUSH
28697: LD_INT 30
28699: PUSH
28700: LD_INT 32
28702: PUSH
28703: EMPTY
28704: LIST
28705: LIST
28706: PUSH
28707: LD_INT 30
28709: PUSH
28710: LD_INT 4
28712: PUSH
28713: EMPTY
28714: LIST
28715: LIST
28716: PUSH
28717: LD_INT 30
28719: PUSH
28720: LD_INT 5
28722: PUSH
28723: EMPTY
28724: LIST
28725: LIST
28726: PUSH
28727: EMPTY
28728: LIST
28729: LIST
28730: LIST
28731: LIST
28732: PUSH
28733: EMPTY
28734: LIST
28735: LIST
28736: LIST
28737: PPUSH
28738: CALL_OW 72
28742: ST_TO_ADDR
28743: GO 28967
28745: LD_INT 2
28747: DOUBLE
28748: EQUAL
28749: IFTRUE 28753
28751: GO 28815
28753: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
28754: LD_ADDR_VAR 0 12
28758: PUSH
28759: LD_VAR 0 18
28763: PPUSH
28764: LD_INT 22
28766: PUSH
28767: LD_VAR 0 16
28771: PUSH
28772: EMPTY
28773: LIST
28774: LIST
28775: PUSH
28776: LD_INT 2
28778: PUSH
28779: LD_INT 30
28781: PUSH
28782: LD_INT 0
28784: PUSH
28785: EMPTY
28786: LIST
28787: LIST
28788: PUSH
28789: LD_INT 30
28791: PUSH
28792: LD_INT 1
28794: PUSH
28795: EMPTY
28796: LIST
28797: LIST
28798: PUSH
28799: EMPTY
28800: LIST
28801: LIST
28802: LIST
28803: PUSH
28804: EMPTY
28805: LIST
28806: LIST
28807: PPUSH
28808: CALL_OW 72
28812: ST_TO_ADDR
28813: GO 28967
28815: LD_INT 3
28817: DOUBLE
28818: EQUAL
28819: IFTRUE 28823
28821: GO 28885
28823: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
28824: LD_ADDR_VAR 0 12
28828: PUSH
28829: LD_VAR 0 18
28833: PPUSH
28834: LD_INT 22
28836: PUSH
28837: LD_VAR 0 16
28841: PUSH
28842: EMPTY
28843: LIST
28844: LIST
28845: PUSH
28846: LD_INT 2
28848: PUSH
28849: LD_INT 30
28851: PUSH
28852: LD_INT 2
28854: PUSH
28855: EMPTY
28856: LIST
28857: LIST
28858: PUSH
28859: LD_INT 30
28861: PUSH
28862: LD_INT 3
28864: PUSH
28865: EMPTY
28866: LIST
28867: LIST
28868: PUSH
28869: EMPTY
28870: LIST
28871: LIST
28872: LIST
28873: PUSH
28874: EMPTY
28875: LIST
28876: LIST
28877: PPUSH
28878: CALL_OW 72
28882: ST_TO_ADDR
28883: GO 28967
28885: LD_INT 4
28887: DOUBLE
28888: EQUAL
28889: IFTRUE 28893
28891: GO 28966
28893: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
28894: LD_ADDR_VAR 0 12
28898: PUSH
28899: LD_VAR 0 18
28903: PPUSH
28904: LD_INT 22
28906: PUSH
28907: LD_VAR 0 16
28911: PUSH
28912: EMPTY
28913: LIST
28914: LIST
28915: PUSH
28916: LD_INT 2
28918: PUSH
28919: LD_INT 30
28921: PUSH
28922: LD_INT 6
28924: PUSH
28925: EMPTY
28926: LIST
28927: LIST
28928: PUSH
28929: LD_INT 30
28931: PUSH
28932: LD_INT 7
28934: PUSH
28935: EMPTY
28936: LIST
28937: LIST
28938: PUSH
28939: LD_INT 30
28941: PUSH
28942: LD_INT 8
28944: PUSH
28945: EMPTY
28946: LIST
28947: LIST
28948: PUSH
28949: EMPTY
28950: LIST
28951: LIST
28952: LIST
28953: LIST
28954: PUSH
28955: EMPTY
28956: LIST
28957: LIST
28958: PPUSH
28959: CALL_OW 72
28963: ST_TO_ADDR
28964: GO 28967
28966: POP
// if i = 1 then
28967: LD_VAR 0 8
28971: PUSH
28972: LD_INT 1
28974: EQUAL
28975: IFFALSE 29086
// begin tmp := [ ] ;
28977: LD_ADDR_VAR 0 19
28981: PUSH
28982: EMPTY
28983: ST_TO_ADDR
// for j in f do
28984: LD_ADDR_VAR 0 9
28988: PUSH
28989: LD_VAR 0 12
28993: PUSH
28994: FOR_IN
28995: IFFALSE 29068
// if GetBType ( j ) = b_bunker then
28997: LD_VAR 0 9
29001: PPUSH
29002: CALL_OW 266
29006: PUSH
29007: LD_INT 32
29009: EQUAL
29010: IFFALSE 29037
// tmp := Insert ( tmp , 1 , j ) else
29012: LD_ADDR_VAR 0 19
29016: PUSH
29017: LD_VAR 0 19
29021: PPUSH
29022: LD_INT 1
29024: PPUSH
29025: LD_VAR 0 9
29029: PPUSH
29030: CALL_OW 2
29034: ST_TO_ADDR
29035: GO 29066
// tmp := Insert ( tmp , tmp + 1 , j ) ;
29037: LD_ADDR_VAR 0 19
29041: PUSH
29042: LD_VAR 0 19
29046: PPUSH
29047: LD_VAR 0 19
29051: PUSH
29052: LD_INT 1
29054: PLUS
29055: PPUSH
29056: LD_VAR 0 9
29060: PPUSH
29061: CALL_OW 2
29065: ST_TO_ADDR
29066: GO 28994
29068: POP
29069: POP
// if tmp then
29070: LD_VAR 0 19
29074: IFFALSE 29086
// f := tmp ;
29076: LD_ADDR_VAR 0 12
29080: PUSH
29081: LD_VAR 0 19
29085: ST_TO_ADDR
// end ; x := personel [ i ] ;
29086: LD_ADDR_VAR 0 13
29090: PUSH
29091: LD_VAR 0 6
29095: PUSH
29096: LD_VAR 0 8
29100: ARRAY
29101: ST_TO_ADDR
// if x = - 1 then
29102: LD_VAR 0 13
29106: PUSH
29107: LD_INT 1
29109: NEG
29110: EQUAL
29111: IFFALSE 29320
// begin for j in f do
29113: LD_ADDR_VAR 0 9
29117: PUSH
29118: LD_VAR 0 12
29122: PUSH
29123: FOR_IN
29124: IFFALSE 29316
// repeat InitHc ;
29126: CALL_OW 19
// if GetBType ( j ) = b_barracks then
29130: LD_VAR 0 9
29134: PPUSH
29135: CALL_OW 266
29139: PUSH
29140: LD_INT 5
29142: EQUAL
29143: IFFALSE 29213
// begin if UnitsInside ( j ) < 3 then
29145: LD_VAR 0 9
29149: PPUSH
29150: CALL_OW 313
29154: PUSH
29155: LD_INT 3
29157: LESS
29158: IFFALSE 29194
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
29160: LD_INT 0
29162: PPUSH
29163: LD_INT 5
29165: PUSH
29166: LD_INT 8
29168: PUSH
29169: LD_INT 9
29171: PUSH
29172: EMPTY
29173: LIST
29174: LIST
29175: LIST
29176: PUSH
29177: LD_VAR 0 17
29181: ARRAY
29182: PPUSH
29183: LD_VAR 0 4
29187: PPUSH
29188: CALL_OW 380
29192: GO 29211
// PrepareHuman ( false , i , skill ) ;
29194: LD_INT 0
29196: PPUSH
29197: LD_VAR 0 8
29201: PPUSH
29202: LD_VAR 0 4
29206: PPUSH
29207: CALL_OW 380
// end else
29211: GO 29230
// PrepareHuman ( false , i , skill ) ;
29213: LD_INT 0
29215: PPUSH
29216: LD_VAR 0 8
29220: PPUSH
29221: LD_VAR 0 4
29225: PPUSH
29226: CALL_OW 380
// un := CreateHuman ;
29230: LD_ADDR_VAR 0 14
29234: PUSH
29235: CALL_OW 44
29239: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29240: LD_ADDR_VAR 0 7
29244: PUSH
29245: LD_VAR 0 7
29249: PPUSH
29250: LD_INT 1
29252: PPUSH
29253: LD_VAR 0 14
29257: PPUSH
29258: CALL_OW 2
29262: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
29263: LD_VAR 0 14
29267: PPUSH
29268: LD_VAR 0 9
29272: PPUSH
29273: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
29277: LD_VAR 0 9
29281: PPUSH
29282: CALL_OW 313
29286: PUSH
29287: LD_INT 6
29289: EQUAL
29290: PUSH
29291: LD_VAR 0 9
29295: PPUSH
29296: CALL_OW 266
29300: PUSH
29301: LD_INT 32
29303: PUSH
29304: LD_INT 31
29306: PUSH
29307: EMPTY
29308: LIST
29309: LIST
29310: IN
29311: OR
29312: IFFALSE 29126
29314: GO 29123
29316: POP
29317: POP
// end else
29318: GO 29700
// for j = 1 to x do
29320: LD_ADDR_VAR 0 9
29324: PUSH
29325: DOUBLE
29326: LD_INT 1
29328: DEC
29329: ST_TO_ADDR
29330: LD_VAR 0 13
29334: PUSH
29335: FOR_TO
29336: IFFALSE 29698
// begin InitHc ;
29338: CALL_OW 19
// if not f then
29342: LD_VAR 0 12
29346: NOT
29347: IFFALSE 29436
// begin PrepareHuman ( false , i , skill ) ;
29349: LD_INT 0
29351: PPUSH
29352: LD_VAR 0 8
29356: PPUSH
29357: LD_VAR 0 4
29361: PPUSH
29362: CALL_OW 380
// un := CreateHuman ;
29366: LD_ADDR_VAR 0 14
29370: PUSH
29371: CALL_OW 44
29375: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29376: LD_ADDR_VAR 0 7
29380: PUSH
29381: LD_VAR 0 7
29385: PPUSH
29386: LD_INT 1
29388: PPUSH
29389: LD_VAR 0 14
29393: PPUSH
29394: CALL_OW 2
29398: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
29399: LD_VAR 0 14
29403: PPUSH
29404: LD_VAR 0 1
29408: PPUSH
29409: CALL_OW 250
29413: PPUSH
29414: LD_VAR 0 1
29418: PPUSH
29419: CALL_OW 251
29423: PPUSH
29424: LD_INT 10
29426: PPUSH
29427: LD_INT 0
29429: PPUSH
29430: CALL_OW 50
// continue ;
29434: GO 29335
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
29436: LD_VAR 0 12
29440: PUSH
29441: LD_INT 1
29443: ARRAY
29444: PPUSH
29445: CALL_OW 313
29449: PUSH
29450: LD_VAR 0 12
29454: PUSH
29455: LD_INT 1
29457: ARRAY
29458: PPUSH
29459: CALL_OW 266
29463: PUSH
29464: LD_INT 32
29466: PUSH
29467: LD_INT 31
29469: PUSH
29470: EMPTY
29471: LIST
29472: LIST
29473: IN
29474: AND
29475: PUSH
29476: LD_VAR 0 12
29480: PUSH
29481: LD_INT 1
29483: ARRAY
29484: PPUSH
29485: CALL_OW 313
29489: PUSH
29490: LD_INT 6
29492: EQUAL
29493: OR
29494: IFFALSE 29514
// f := Delete ( f , 1 ) ;
29496: LD_ADDR_VAR 0 12
29500: PUSH
29501: LD_VAR 0 12
29505: PPUSH
29506: LD_INT 1
29508: PPUSH
29509: CALL_OW 3
29513: ST_TO_ADDR
// if not f then
29514: LD_VAR 0 12
29518: NOT
29519: IFFALSE 29537
// begin x := x + 2 ;
29521: LD_ADDR_VAR 0 13
29525: PUSH
29526: LD_VAR 0 13
29530: PUSH
29531: LD_INT 2
29533: PLUS
29534: ST_TO_ADDR
// continue ;
29535: GO 29335
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
29537: LD_VAR 0 12
29541: PUSH
29542: LD_INT 1
29544: ARRAY
29545: PPUSH
29546: CALL_OW 266
29550: PUSH
29551: LD_INT 5
29553: EQUAL
29554: IFFALSE 29628
// begin if UnitsInside ( f [ 1 ] ) < 3 then
29556: LD_VAR 0 12
29560: PUSH
29561: LD_INT 1
29563: ARRAY
29564: PPUSH
29565: CALL_OW 313
29569: PUSH
29570: LD_INT 3
29572: LESS
29573: IFFALSE 29609
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
29575: LD_INT 0
29577: PPUSH
29578: LD_INT 5
29580: PUSH
29581: LD_INT 8
29583: PUSH
29584: LD_INT 9
29586: PUSH
29587: EMPTY
29588: LIST
29589: LIST
29590: LIST
29591: PUSH
29592: LD_VAR 0 17
29596: ARRAY
29597: PPUSH
29598: LD_VAR 0 4
29602: PPUSH
29603: CALL_OW 380
29607: GO 29626
// PrepareHuman ( false , i , skill ) ;
29609: LD_INT 0
29611: PPUSH
29612: LD_VAR 0 8
29616: PPUSH
29617: LD_VAR 0 4
29621: PPUSH
29622: CALL_OW 380
// end else
29626: GO 29645
// PrepareHuman ( false , i , skill ) ;
29628: LD_INT 0
29630: PPUSH
29631: LD_VAR 0 8
29635: PPUSH
29636: LD_VAR 0 4
29640: PPUSH
29641: CALL_OW 380
// un := CreateHuman ;
29645: LD_ADDR_VAR 0 14
29649: PUSH
29650: CALL_OW 44
29654: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29655: LD_ADDR_VAR 0 7
29659: PUSH
29660: LD_VAR 0 7
29664: PPUSH
29665: LD_INT 1
29667: PPUSH
29668: LD_VAR 0 14
29672: PPUSH
29673: CALL_OW 2
29677: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
29678: LD_VAR 0 14
29682: PPUSH
29683: LD_VAR 0 12
29687: PUSH
29688: LD_INT 1
29690: ARRAY
29691: PPUSH
29692: CALL_OW 52
// end ;
29696: GO 29335
29698: POP
29699: POP
// end ;
29700: GO 28637
29702: POP
29703: POP
// result := result ^ buildings ;
29704: LD_ADDR_VAR 0 7
29708: PUSH
29709: LD_VAR 0 7
29713: PUSH
29714: LD_VAR 0 18
29718: ADD
29719: ST_TO_ADDR
// end else
29720: GO 29863
// begin for i = 1 to personel do
29722: LD_ADDR_VAR 0 8
29726: PUSH
29727: DOUBLE
29728: LD_INT 1
29730: DEC
29731: ST_TO_ADDR
29732: LD_VAR 0 6
29736: PUSH
29737: FOR_TO
29738: IFFALSE 29861
// begin if i > 4 then
29740: LD_VAR 0 8
29744: PUSH
29745: LD_INT 4
29747: GREATER
29748: IFFALSE 29752
// break ;
29750: GO 29861
// x := personel [ i ] ;
29752: LD_ADDR_VAR 0 13
29756: PUSH
29757: LD_VAR 0 6
29761: PUSH
29762: LD_VAR 0 8
29766: ARRAY
29767: ST_TO_ADDR
// if x = - 1 then
29768: LD_VAR 0 13
29772: PUSH
29773: LD_INT 1
29775: NEG
29776: EQUAL
29777: IFFALSE 29781
// continue ;
29779: GO 29737
// PrepareHuman ( false , i , skill ) ;
29781: LD_INT 0
29783: PPUSH
29784: LD_VAR 0 8
29788: PPUSH
29789: LD_VAR 0 4
29793: PPUSH
29794: CALL_OW 380
// un := CreateHuman ;
29798: LD_ADDR_VAR 0 14
29802: PUSH
29803: CALL_OW 44
29807: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
29808: LD_VAR 0 14
29812: PPUSH
29813: LD_VAR 0 1
29817: PPUSH
29818: CALL_OW 250
29822: PPUSH
29823: LD_VAR 0 1
29827: PPUSH
29828: CALL_OW 251
29832: PPUSH
29833: LD_INT 10
29835: PPUSH
29836: LD_INT 0
29838: PPUSH
29839: CALL_OW 50
// result := result ^ un ;
29843: LD_ADDR_VAR 0 7
29847: PUSH
29848: LD_VAR 0 7
29852: PUSH
29853: LD_VAR 0 14
29857: ADD
29858: ST_TO_ADDR
// end ;
29859: GO 29737
29861: POP
29862: POP
// end ; end ;
29863: LD_VAR 0 7
29867: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
29868: LD_INT 0
29870: PPUSH
29871: PPUSH
29872: PPUSH
29873: PPUSH
29874: PPUSH
29875: PPUSH
29876: PPUSH
29877: PPUSH
29878: PPUSH
29879: PPUSH
29880: PPUSH
29881: PPUSH
29882: PPUSH
29883: PPUSH
29884: PPUSH
29885: PPUSH
// result := false ;
29886: LD_ADDR_VAR 0 3
29890: PUSH
29891: LD_INT 0
29893: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
29894: LD_VAR 0 1
29898: NOT
29899: PUSH
29900: LD_VAR 0 1
29904: PPUSH
29905: CALL_OW 266
29909: PUSH
29910: LD_INT 32
29912: PUSH
29913: LD_INT 33
29915: PUSH
29916: EMPTY
29917: LIST
29918: LIST
29919: IN
29920: NOT
29921: OR
29922: IFFALSE 29926
// exit ;
29924: GO 31035
// nat := GetNation ( tower ) ;
29926: LD_ADDR_VAR 0 12
29930: PUSH
29931: LD_VAR 0 1
29935: PPUSH
29936: CALL_OW 248
29940: ST_TO_ADDR
// side := GetSide ( tower ) ;
29941: LD_ADDR_VAR 0 16
29945: PUSH
29946: LD_VAR 0 1
29950: PPUSH
29951: CALL_OW 255
29955: ST_TO_ADDR
// x := GetX ( tower ) ;
29956: LD_ADDR_VAR 0 10
29960: PUSH
29961: LD_VAR 0 1
29965: PPUSH
29966: CALL_OW 250
29970: ST_TO_ADDR
// y := GetY ( tower ) ;
29971: LD_ADDR_VAR 0 11
29975: PUSH
29976: LD_VAR 0 1
29980: PPUSH
29981: CALL_OW 251
29985: ST_TO_ADDR
// if not x or not y then
29986: LD_VAR 0 10
29990: NOT
29991: PUSH
29992: LD_VAR 0 11
29996: NOT
29997: OR
29998: IFFALSE 30002
// exit ;
30000: GO 31035
// weapon := 0 ;
30002: LD_ADDR_VAR 0 18
30006: PUSH
30007: LD_INT 0
30009: ST_TO_ADDR
// fac_list := [ ] ;
30010: LD_ADDR_VAR 0 17
30014: PUSH
30015: EMPTY
30016: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
30017: LD_ADDR_VAR 0 6
30021: PUSH
30022: LD_VAR 0 1
30026: PPUSH
30027: CALL_OW 274
30031: PPUSH
30032: LD_VAR 0 2
30036: PPUSH
30037: LD_INT 0
30039: PPUSH
30040: CALL 27606 0 3
30044: PPUSH
30045: LD_INT 30
30047: PUSH
30048: LD_INT 3
30050: PUSH
30051: EMPTY
30052: LIST
30053: LIST
30054: PPUSH
30055: CALL_OW 72
30059: ST_TO_ADDR
// if not factories then
30060: LD_VAR 0 6
30064: NOT
30065: IFFALSE 30069
// exit ;
30067: GO 31035
// for i in factories do
30069: LD_ADDR_VAR 0 8
30073: PUSH
30074: LD_VAR 0 6
30078: PUSH
30079: FOR_IN
30080: IFFALSE 30105
// fac_list := fac_list union AvailableWeaponList ( i ) ;
30082: LD_ADDR_VAR 0 17
30086: PUSH
30087: LD_VAR 0 17
30091: PUSH
30092: LD_VAR 0 8
30096: PPUSH
30097: CALL_OW 478
30101: UNION
30102: ST_TO_ADDR
30103: GO 30079
30105: POP
30106: POP
// if not fac_list then
30107: LD_VAR 0 17
30111: NOT
30112: IFFALSE 30116
// exit ;
30114: GO 31035
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
30116: LD_ADDR_VAR 0 5
30120: PUSH
30121: LD_INT 4
30123: PUSH
30124: LD_INT 5
30126: PUSH
30127: LD_INT 9
30129: PUSH
30130: LD_INT 10
30132: PUSH
30133: LD_INT 6
30135: PUSH
30136: LD_INT 7
30138: PUSH
30139: LD_INT 11
30141: PUSH
30142: EMPTY
30143: LIST
30144: LIST
30145: LIST
30146: LIST
30147: LIST
30148: LIST
30149: LIST
30150: PUSH
30151: LD_INT 27
30153: PUSH
30154: LD_INT 28
30156: PUSH
30157: LD_INT 26
30159: PUSH
30160: LD_INT 30
30162: PUSH
30163: EMPTY
30164: LIST
30165: LIST
30166: LIST
30167: LIST
30168: PUSH
30169: LD_INT 43
30171: PUSH
30172: LD_INT 44
30174: PUSH
30175: LD_INT 46
30177: PUSH
30178: LD_INT 45
30180: PUSH
30181: LD_INT 47
30183: PUSH
30184: LD_INT 49
30186: PUSH
30187: EMPTY
30188: LIST
30189: LIST
30190: LIST
30191: LIST
30192: LIST
30193: LIST
30194: PUSH
30195: EMPTY
30196: LIST
30197: LIST
30198: LIST
30199: PUSH
30200: LD_VAR 0 12
30204: ARRAY
30205: ST_TO_ADDR
// list := list isect fac_list ;
30206: LD_ADDR_VAR 0 5
30210: PUSH
30211: LD_VAR 0 5
30215: PUSH
30216: LD_VAR 0 17
30220: ISECT
30221: ST_TO_ADDR
// if not list then
30222: LD_VAR 0 5
30226: NOT
30227: IFFALSE 30231
// exit ;
30229: GO 31035
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
30231: LD_VAR 0 12
30235: PUSH
30236: LD_INT 3
30238: EQUAL
30239: PUSH
30240: LD_INT 49
30242: PUSH
30243: LD_VAR 0 5
30247: IN
30248: AND
30249: PUSH
30250: LD_INT 31
30252: PPUSH
30253: LD_VAR 0 16
30257: PPUSH
30258: CALL_OW 321
30262: PUSH
30263: LD_INT 2
30265: EQUAL
30266: AND
30267: IFFALSE 30327
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
30269: LD_INT 22
30271: PUSH
30272: LD_VAR 0 16
30276: PUSH
30277: EMPTY
30278: LIST
30279: LIST
30280: PUSH
30281: LD_INT 35
30283: PUSH
30284: LD_INT 49
30286: PUSH
30287: EMPTY
30288: LIST
30289: LIST
30290: PUSH
30291: LD_INT 91
30293: PUSH
30294: LD_VAR 0 1
30298: PUSH
30299: LD_INT 10
30301: PUSH
30302: EMPTY
30303: LIST
30304: LIST
30305: LIST
30306: PUSH
30307: EMPTY
30308: LIST
30309: LIST
30310: LIST
30311: PPUSH
30312: CALL_OW 69
30316: NOT
30317: IFFALSE 30327
// weapon := ru_time_lapser ;
30319: LD_ADDR_VAR 0 18
30323: PUSH
30324: LD_INT 49
30326: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
30327: LD_VAR 0 12
30331: PUSH
30332: LD_INT 1
30334: PUSH
30335: LD_INT 2
30337: PUSH
30338: EMPTY
30339: LIST
30340: LIST
30341: IN
30342: PUSH
30343: LD_INT 11
30345: PUSH
30346: LD_VAR 0 5
30350: IN
30351: PUSH
30352: LD_INT 30
30354: PUSH
30355: LD_VAR 0 5
30359: IN
30360: OR
30361: AND
30362: PUSH
30363: LD_INT 6
30365: PPUSH
30366: LD_VAR 0 16
30370: PPUSH
30371: CALL_OW 321
30375: PUSH
30376: LD_INT 2
30378: EQUAL
30379: AND
30380: IFFALSE 30545
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
30382: LD_INT 22
30384: PUSH
30385: LD_VAR 0 16
30389: PUSH
30390: EMPTY
30391: LIST
30392: LIST
30393: PUSH
30394: LD_INT 2
30396: PUSH
30397: LD_INT 35
30399: PUSH
30400: LD_INT 11
30402: PUSH
30403: EMPTY
30404: LIST
30405: LIST
30406: PUSH
30407: LD_INT 35
30409: PUSH
30410: LD_INT 30
30412: PUSH
30413: EMPTY
30414: LIST
30415: LIST
30416: PUSH
30417: EMPTY
30418: LIST
30419: LIST
30420: LIST
30421: PUSH
30422: LD_INT 91
30424: PUSH
30425: LD_VAR 0 1
30429: PUSH
30430: LD_INT 18
30432: PUSH
30433: EMPTY
30434: LIST
30435: LIST
30436: LIST
30437: PUSH
30438: EMPTY
30439: LIST
30440: LIST
30441: LIST
30442: PPUSH
30443: CALL_OW 69
30447: NOT
30448: PUSH
30449: LD_INT 22
30451: PUSH
30452: LD_VAR 0 16
30456: PUSH
30457: EMPTY
30458: LIST
30459: LIST
30460: PUSH
30461: LD_INT 2
30463: PUSH
30464: LD_INT 30
30466: PUSH
30467: LD_INT 32
30469: PUSH
30470: EMPTY
30471: LIST
30472: LIST
30473: PUSH
30474: LD_INT 30
30476: PUSH
30477: LD_INT 33
30479: PUSH
30480: EMPTY
30481: LIST
30482: LIST
30483: PUSH
30484: EMPTY
30485: LIST
30486: LIST
30487: LIST
30488: PUSH
30489: LD_INT 91
30491: PUSH
30492: LD_VAR 0 1
30496: PUSH
30497: LD_INT 12
30499: PUSH
30500: EMPTY
30501: LIST
30502: LIST
30503: LIST
30504: PUSH
30505: EMPTY
30506: LIST
30507: LIST
30508: LIST
30509: PUSH
30510: EMPTY
30511: LIST
30512: PPUSH
30513: CALL_OW 69
30517: PUSH
30518: LD_INT 2
30520: GREATER
30521: AND
30522: IFFALSE 30545
// weapon := [ us_radar , ar_radar ] [ nat ] ;
30524: LD_ADDR_VAR 0 18
30528: PUSH
30529: LD_INT 11
30531: PUSH
30532: LD_INT 30
30534: PUSH
30535: EMPTY
30536: LIST
30537: LIST
30538: PUSH
30539: LD_VAR 0 12
30543: ARRAY
30544: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
30545: LD_VAR 0 18
30549: NOT
30550: PUSH
30551: LD_INT 40
30553: PPUSH
30554: LD_VAR 0 16
30558: PPUSH
30559: CALL_OW 321
30563: PUSH
30564: LD_INT 2
30566: EQUAL
30567: AND
30568: PUSH
30569: LD_INT 7
30571: PUSH
30572: LD_VAR 0 5
30576: IN
30577: PUSH
30578: LD_INT 28
30580: PUSH
30581: LD_VAR 0 5
30585: IN
30586: OR
30587: PUSH
30588: LD_INT 45
30590: PUSH
30591: LD_VAR 0 5
30595: IN
30596: OR
30597: AND
30598: IFFALSE 30852
// begin hex := GetHexInfo ( x , y ) ;
30600: LD_ADDR_VAR 0 4
30604: PUSH
30605: LD_VAR 0 10
30609: PPUSH
30610: LD_VAR 0 11
30614: PPUSH
30615: CALL_OW 546
30619: ST_TO_ADDR
// if hex [ 1 ] then
30620: LD_VAR 0 4
30624: PUSH
30625: LD_INT 1
30627: ARRAY
30628: IFFALSE 30632
// exit ;
30630: GO 31035
// height := hex [ 2 ] ;
30632: LD_ADDR_VAR 0 15
30636: PUSH
30637: LD_VAR 0 4
30641: PUSH
30642: LD_INT 2
30644: ARRAY
30645: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
30646: LD_ADDR_VAR 0 14
30650: PUSH
30651: LD_INT 0
30653: PUSH
30654: LD_INT 2
30656: PUSH
30657: LD_INT 3
30659: PUSH
30660: LD_INT 5
30662: PUSH
30663: EMPTY
30664: LIST
30665: LIST
30666: LIST
30667: LIST
30668: ST_TO_ADDR
// for i in tmp do
30669: LD_ADDR_VAR 0 8
30673: PUSH
30674: LD_VAR 0 14
30678: PUSH
30679: FOR_IN
30680: IFFALSE 30850
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
30682: LD_ADDR_VAR 0 9
30686: PUSH
30687: LD_VAR 0 10
30691: PPUSH
30692: LD_VAR 0 8
30696: PPUSH
30697: LD_INT 5
30699: PPUSH
30700: CALL_OW 272
30704: PUSH
30705: LD_VAR 0 11
30709: PPUSH
30710: LD_VAR 0 8
30714: PPUSH
30715: LD_INT 5
30717: PPUSH
30718: CALL_OW 273
30722: PUSH
30723: EMPTY
30724: LIST
30725: LIST
30726: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
30727: LD_VAR 0 9
30731: PUSH
30732: LD_INT 1
30734: ARRAY
30735: PPUSH
30736: LD_VAR 0 9
30740: PUSH
30741: LD_INT 2
30743: ARRAY
30744: PPUSH
30745: CALL_OW 488
30749: IFFALSE 30848
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
30751: LD_ADDR_VAR 0 4
30755: PUSH
30756: LD_VAR 0 9
30760: PUSH
30761: LD_INT 1
30763: ARRAY
30764: PPUSH
30765: LD_VAR 0 9
30769: PUSH
30770: LD_INT 2
30772: ARRAY
30773: PPUSH
30774: CALL_OW 546
30778: ST_TO_ADDR
// if hex [ 1 ] then
30779: LD_VAR 0 4
30783: PUSH
30784: LD_INT 1
30786: ARRAY
30787: IFFALSE 30791
// continue ;
30789: GO 30679
// h := hex [ 2 ] ;
30791: LD_ADDR_VAR 0 13
30795: PUSH
30796: LD_VAR 0 4
30800: PUSH
30801: LD_INT 2
30803: ARRAY
30804: ST_TO_ADDR
// if h + 7 < height then
30805: LD_VAR 0 13
30809: PUSH
30810: LD_INT 7
30812: PLUS
30813: PUSH
30814: LD_VAR 0 15
30818: LESS
30819: IFFALSE 30848
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
30821: LD_ADDR_VAR 0 18
30825: PUSH
30826: LD_INT 7
30828: PUSH
30829: LD_INT 28
30831: PUSH
30832: LD_INT 45
30834: PUSH
30835: EMPTY
30836: LIST
30837: LIST
30838: LIST
30839: PUSH
30840: LD_VAR 0 12
30844: ARRAY
30845: ST_TO_ADDR
// break ;
30846: GO 30850
// end ; end ; end ;
30848: GO 30679
30850: POP
30851: POP
// end ; if not weapon then
30852: LD_VAR 0 18
30856: NOT
30857: IFFALSE 30917
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
30859: LD_ADDR_VAR 0 5
30863: PUSH
30864: LD_VAR 0 5
30868: PUSH
30869: LD_INT 11
30871: PUSH
30872: LD_INT 30
30874: PUSH
30875: LD_INT 49
30877: PUSH
30878: EMPTY
30879: LIST
30880: LIST
30881: LIST
30882: DIFF
30883: ST_TO_ADDR
// if not list then
30884: LD_VAR 0 5
30888: NOT
30889: IFFALSE 30893
// exit ;
30891: GO 31035
// weapon := list [ rand ( 1 , list ) ] ;
30893: LD_ADDR_VAR 0 18
30897: PUSH
30898: LD_VAR 0 5
30902: PUSH
30903: LD_INT 1
30905: PPUSH
30906: LD_VAR 0 5
30910: PPUSH
30911: CALL_OW 12
30915: ARRAY
30916: ST_TO_ADDR
// end ; if weapon then
30917: LD_VAR 0 18
30921: IFFALSE 31035
// begin tmp := CostOfWeapon ( weapon ) ;
30923: LD_ADDR_VAR 0 14
30927: PUSH
30928: LD_VAR 0 18
30932: PPUSH
30933: CALL_OW 451
30937: ST_TO_ADDR
// j := GetBase ( tower ) ;
30938: LD_ADDR_VAR 0 9
30942: PUSH
30943: LD_VAR 0 1
30947: PPUSH
30948: CALL_OW 274
30952: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
30953: LD_VAR 0 9
30957: PPUSH
30958: LD_INT 1
30960: PPUSH
30961: CALL_OW 275
30965: PUSH
30966: LD_VAR 0 14
30970: PUSH
30971: LD_INT 1
30973: ARRAY
30974: GREATEREQUAL
30975: PUSH
30976: LD_VAR 0 9
30980: PPUSH
30981: LD_INT 2
30983: PPUSH
30984: CALL_OW 275
30988: PUSH
30989: LD_VAR 0 14
30993: PUSH
30994: LD_INT 2
30996: ARRAY
30997: GREATEREQUAL
30998: AND
30999: PUSH
31000: LD_VAR 0 9
31004: PPUSH
31005: LD_INT 3
31007: PPUSH
31008: CALL_OW 275
31012: PUSH
31013: LD_VAR 0 14
31017: PUSH
31018: LD_INT 3
31020: ARRAY
31021: GREATEREQUAL
31022: AND
31023: IFFALSE 31035
// result := weapon ;
31025: LD_ADDR_VAR 0 3
31029: PUSH
31030: LD_VAR 0 18
31034: ST_TO_ADDR
// end ; end ;
31035: LD_VAR 0 3
31039: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
31040: LD_INT 0
31042: PPUSH
31043: PPUSH
// result := true ;
31044: LD_ADDR_VAR 0 3
31048: PUSH
31049: LD_INT 1
31051: ST_TO_ADDR
// if array1 = array2 then
31052: LD_VAR 0 1
31056: PUSH
31057: LD_VAR 0 2
31061: EQUAL
31062: IFFALSE 31122
// begin for i = 1 to array1 do
31064: LD_ADDR_VAR 0 4
31068: PUSH
31069: DOUBLE
31070: LD_INT 1
31072: DEC
31073: ST_TO_ADDR
31074: LD_VAR 0 1
31078: PUSH
31079: FOR_TO
31080: IFFALSE 31118
// if array1 [ i ] <> array2 [ i ] then
31082: LD_VAR 0 1
31086: PUSH
31087: LD_VAR 0 4
31091: ARRAY
31092: PUSH
31093: LD_VAR 0 2
31097: PUSH
31098: LD_VAR 0 4
31102: ARRAY
31103: NONEQUAL
31104: IFFALSE 31116
// begin result := false ;
31106: LD_ADDR_VAR 0 3
31110: PUSH
31111: LD_INT 0
31113: ST_TO_ADDR
// break ;
31114: GO 31118
// end ;
31116: GO 31079
31118: POP
31119: POP
// end else
31120: GO 31130
// result := false ;
31122: LD_ADDR_VAR 0 3
31126: PUSH
31127: LD_INT 0
31129: ST_TO_ADDR
// end ;
31130: LD_VAR 0 3
31134: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
31135: LD_INT 0
31137: PPUSH
31138: PPUSH
// if not array1 or not array2 then
31139: LD_VAR 0 1
31143: NOT
31144: PUSH
31145: LD_VAR 0 2
31149: NOT
31150: OR
31151: IFFALSE 31155
// exit ;
31153: GO 31219
// result := true ;
31155: LD_ADDR_VAR 0 3
31159: PUSH
31160: LD_INT 1
31162: ST_TO_ADDR
// for i = 1 to array1 do
31163: LD_ADDR_VAR 0 4
31167: PUSH
31168: DOUBLE
31169: LD_INT 1
31171: DEC
31172: ST_TO_ADDR
31173: LD_VAR 0 1
31177: PUSH
31178: FOR_TO
31179: IFFALSE 31217
// if array1 [ i ] <> array2 [ i ] then
31181: LD_VAR 0 1
31185: PUSH
31186: LD_VAR 0 4
31190: ARRAY
31191: PUSH
31192: LD_VAR 0 2
31196: PUSH
31197: LD_VAR 0 4
31201: ARRAY
31202: NONEQUAL
31203: IFFALSE 31215
// begin result := false ;
31205: LD_ADDR_VAR 0 3
31209: PUSH
31210: LD_INT 0
31212: ST_TO_ADDR
// break ;
31213: GO 31217
// end ;
31215: GO 31178
31217: POP
31218: POP
// end ;
31219: LD_VAR 0 3
31223: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
31224: LD_INT 0
31226: PPUSH
31227: PPUSH
31228: PPUSH
// pom := GetBase ( fac ) ;
31229: LD_ADDR_VAR 0 5
31233: PUSH
31234: LD_VAR 0 1
31238: PPUSH
31239: CALL_OW 274
31243: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
31244: LD_ADDR_VAR 0 4
31248: PUSH
31249: LD_VAR 0 2
31253: PUSH
31254: LD_INT 1
31256: ARRAY
31257: PPUSH
31258: LD_VAR 0 2
31262: PUSH
31263: LD_INT 2
31265: ARRAY
31266: PPUSH
31267: LD_VAR 0 2
31271: PUSH
31272: LD_INT 3
31274: ARRAY
31275: PPUSH
31276: LD_VAR 0 2
31280: PUSH
31281: LD_INT 4
31283: ARRAY
31284: PPUSH
31285: CALL_OW 449
31289: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31290: LD_ADDR_VAR 0 3
31294: PUSH
31295: LD_VAR 0 5
31299: PPUSH
31300: LD_INT 1
31302: PPUSH
31303: CALL_OW 275
31307: PUSH
31308: LD_VAR 0 4
31312: PUSH
31313: LD_INT 1
31315: ARRAY
31316: GREATEREQUAL
31317: PUSH
31318: LD_VAR 0 5
31322: PPUSH
31323: LD_INT 2
31325: PPUSH
31326: CALL_OW 275
31330: PUSH
31331: LD_VAR 0 4
31335: PUSH
31336: LD_INT 2
31338: ARRAY
31339: GREATEREQUAL
31340: AND
31341: PUSH
31342: LD_VAR 0 5
31346: PPUSH
31347: LD_INT 3
31349: PPUSH
31350: CALL_OW 275
31354: PUSH
31355: LD_VAR 0 4
31359: PUSH
31360: LD_INT 3
31362: ARRAY
31363: GREATEREQUAL
31364: AND
31365: ST_TO_ADDR
// end ;
31366: LD_VAR 0 3
31370: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
31371: LD_INT 0
31373: PPUSH
31374: PPUSH
31375: PPUSH
31376: PPUSH
// pom := GetBase ( building ) ;
31377: LD_ADDR_VAR 0 3
31381: PUSH
31382: LD_VAR 0 1
31386: PPUSH
31387: CALL_OW 274
31391: ST_TO_ADDR
// if not pom then
31392: LD_VAR 0 3
31396: NOT
31397: IFFALSE 31401
// exit ;
31399: GO 31571
// btype := GetBType ( building ) ;
31401: LD_ADDR_VAR 0 5
31405: PUSH
31406: LD_VAR 0 1
31410: PPUSH
31411: CALL_OW 266
31415: ST_TO_ADDR
// if btype = b_armoury then
31416: LD_VAR 0 5
31420: PUSH
31421: LD_INT 4
31423: EQUAL
31424: IFFALSE 31434
// btype := b_barracks ;
31426: LD_ADDR_VAR 0 5
31430: PUSH
31431: LD_INT 5
31433: ST_TO_ADDR
// if btype = b_depot then
31434: LD_VAR 0 5
31438: PUSH
31439: LD_INT 0
31441: EQUAL
31442: IFFALSE 31452
// btype := b_warehouse ;
31444: LD_ADDR_VAR 0 5
31448: PUSH
31449: LD_INT 1
31451: ST_TO_ADDR
// if btype = b_workshop then
31452: LD_VAR 0 5
31456: PUSH
31457: LD_INT 2
31459: EQUAL
31460: IFFALSE 31470
// btype := b_factory ;
31462: LD_ADDR_VAR 0 5
31466: PUSH
31467: LD_INT 3
31469: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
31470: LD_ADDR_VAR 0 4
31474: PUSH
31475: LD_VAR 0 5
31479: PPUSH
31480: LD_VAR 0 1
31484: PPUSH
31485: CALL_OW 248
31489: PPUSH
31490: CALL_OW 450
31494: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31495: LD_ADDR_VAR 0 2
31499: PUSH
31500: LD_VAR 0 3
31504: PPUSH
31505: LD_INT 1
31507: PPUSH
31508: CALL_OW 275
31512: PUSH
31513: LD_VAR 0 4
31517: PUSH
31518: LD_INT 1
31520: ARRAY
31521: GREATEREQUAL
31522: PUSH
31523: LD_VAR 0 3
31527: PPUSH
31528: LD_INT 2
31530: PPUSH
31531: CALL_OW 275
31535: PUSH
31536: LD_VAR 0 4
31540: PUSH
31541: LD_INT 2
31543: ARRAY
31544: GREATEREQUAL
31545: AND
31546: PUSH
31547: LD_VAR 0 3
31551: PPUSH
31552: LD_INT 3
31554: PPUSH
31555: CALL_OW 275
31559: PUSH
31560: LD_VAR 0 4
31564: PUSH
31565: LD_INT 3
31567: ARRAY
31568: GREATEREQUAL
31569: AND
31570: ST_TO_ADDR
// end ;
31571: LD_VAR 0 2
31575: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
31576: LD_INT 0
31578: PPUSH
31579: PPUSH
31580: PPUSH
// pom := GetBase ( building ) ;
31581: LD_ADDR_VAR 0 4
31585: PUSH
31586: LD_VAR 0 1
31590: PPUSH
31591: CALL_OW 274
31595: ST_TO_ADDR
// if not pom then
31596: LD_VAR 0 4
31600: NOT
31601: IFFALSE 31605
// exit ;
31603: GO 31706
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
31605: LD_ADDR_VAR 0 5
31609: PUSH
31610: LD_VAR 0 2
31614: PPUSH
31615: LD_VAR 0 1
31619: PPUSH
31620: CALL_OW 248
31624: PPUSH
31625: CALL_OW 450
31629: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31630: LD_ADDR_VAR 0 3
31634: PUSH
31635: LD_VAR 0 4
31639: PPUSH
31640: LD_INT 1
31642: PPUSH
31643: CALL_OW 275
31647: PUSH
31648: LD_VAR 0 5
31652: PUSH
31653: LD_INT 1
31655: ARRAY
31656: GREATEREQUAL
31657: PUSH
31658: LD_VAR 0 4
31662: PPUSH
31663: LD_INT 2
31665: PPUSH
31666: CALL_OW 275
31670: PUSH
31671: LD_VAR 0 5
31675: PUSH
31676: LD_INT 2
31678: ARRAY
31679: GREATEREQUAL
31680: AND
31681: PUSH
31682: LD_VAR 0 4
31686: PPUSH
31687: LD_INT 3
31689: PPUSH
31690: CALL_OW 275
31694: PUSH
31695: LD_VAR 0 5
31699: PUSH
31700: LD_INT 3
31702: ARRAY
31703: GREATEREQUAL
31704: AND
31705: ST_TO_ADDR
// end ;
31706: LD_VAR 0 3
31710: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
31711: LD_INT 0
31713: PPUSH
31714: PPUSH
31715: PPUSH
31716: PPUSH
31717: PPUSH
31718: PPUSH
31719: PPUSH
31720: PPUSH
31721: PPUSH
31722: PPUSH
31723: PPUSH
// result := false ;
31724: LD_ADDR_VAR 0 8
31728: PUSH
31729: LD_INT 0
31731: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
31732: LD_VAR 0 5
31736: NOT
31737: PUSH
31738: LD_VAR 0 1
31742: NOT
31743: OR
31744: PUSH
31745: LD_VAR 0 2
31749: NOT
31750: OR
31751: PUSH
31752: LD_VAR 0 3
31756: NOT
31757: OR
31758: IFFALSE 31762
// exit ;
31760: GO 32576
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
31762: LD_ADDR_VAR 0 14
31766: PUSH
31767: LD_VAR 0 1
31771: PPUSH
31772: LD_VAR 0 2
31776: PPUSH
31777: LD_VAR 0 3
31781: PPUSH
31782: LD_VAR 0 4
31786: PPUSH
31787: LD_VAR 0 5
31791: PUSH
31792: LD_INT 1
31794: ARRAY
31795: PPUSH
31796: CALL_OW 248
31800: PPUSH
31801: LD_INT 0
31803: PPUSH
31804: CALL 33813 0 6
31808: ST_TO_ADDR
// if not hexes then
31809: LD_VAR 0 14
31813: NOT
31814: IFFALSE 31818
// exit ;
31816: GO 32576
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31818: LD_ADDR_VAR 0 17
31822: PUSH
31823: LD_VAR 0 5
31827: PPUSH
31828: LD_INT 22
31830: PUSH
31831: LD_VAR 0 13
31835: PPUSH
31836: CALL_OW 255
31840: PUSH
31841: EMPTY
31842: LIST
31843: LIST
31844: PUSH
31845: LD_INT 2
31847: PUSH
31848: LD_INT 30
31850: PUSH
31851: LD_INT 0
31853: PUSH
31854: EMPTY
31855: LIST
31856: LIST
31857: PUSH
31858: LD_INT 30
31860: PUSH
31861: LD_INT 1
31863: PUSH
31864: EMPTY
31865: LIST
31866: LIST
31867: PUSH
31868: EMPTY
31869: LIST
31870: LIST
31871: LIST
31872: PUSH
31873: EMPTY
31874: LIST
31875: LIST
31876: PPUSH
31877: CALL_OW 72
31881: ST_TO_ADDR
// for i = 1 to hexes do
31882: LD_ADDR_VAR 0 9
31886: PUSH
31887: DOUBLE
31888: LD_INT 1
31890: DEC
31891: ST_TO_ADDR
31892: LD_VAR 0 14
31896: PUSH
31897: FOR_TO
31898: IFFALSE 32574
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
31900: LD_ADDR_VAR 0 13
31904: PUSH
31905: LD_VAR 0 14
31909: PUSH
31910: LD_VAR 0 9
31914: ARRAY
31915: PUSH
31916: LD_INT 1
31918: ARRAY
31919: PPUSH
31920: LD_VAR 0 14
31924: PUSH
31925: LD_VAR 0 9
31929: ARRAY
31930: PUSH
31931: LD_INT 2
31933: ARRAY
31934: PPUSH
31935: CALL_OW 428
31939: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
31940: LD_VAR 0 14
31944: PUSH
31945: LD_VAR 0 9
31949: ARRAY
31950: PUSH
31951: LD_INT 1
31953: ARRAY
31954: PPUSH
31955: LD_VAR 0 14
31959: PUSH
31960: LD_VAR 0 9
31964: ARRAY
31965: PUSH
31966: LD_INT 2
31968: ARRAY
31969: PPUSH
31970: CALL_OW 351
31974: PUSH
31975: LD_VAR 0 14
31979: PUSH
31980: LD_VAR 0 9
31984: ARRAY
31985: PUSH
31986: LD_INT 1
31988: ARRAY
31989: PPUSH
31990: LD_VAR 0 14
31994: PUSH
31995: LD_VAR 0 9
31999: ARRAY
32000: PUSH
32001: LD_INT 2
32003: ARRAY
32004: PPUSH
32005: CALL_OW 488
32009: NOT
32010: OR
32011: PUSH
32012: LD_VAR 0 13
32016: PPUSH
32017: CALL_OW 247
32021: PUSH
32022: LD_INT 3
32024: EQUAL
32025: OR
32026: IFFALSE 32032
// exit ;
32028: POP
32029: POP
32030: GO 32576
// if not tmp then
32032: LD_VAR 0 13
32036: NOT
32037: IFFALSE 32041
// continue ;
32039: GO 31897
// result := true ;
32041: LD_ADDR_VAR 0 8
32045: PUSH
32046: LD_INT 1
32048: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
32049: LD_VAR 0 6
32053: PUSH
32054: LD_VAR 0 13
32058: PPUSH
32059: CALL_OW 247
32063: PUSH
32064: LD_INT 2
32066: EQUAL
32067: AND
32068: PUSH
32069: LD_VAR 0 13
32073: PPUSH
32074: CALL_OW 263
32078: PUSH
32079: LD_INT 1
32081: EQUAL
32082: AND
32083: IFFALSE 32247
// begin if IsDrivenBy ( tmp ) then
32085: LD_VAR 0 13
32089: PPUSH
32090: CALL_OW 311
32094: IFFALSE 32098
// continue ;
32096: GO 31897
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
32098: LD_VAR 0 6
32102: PPUSH
32103: LD_INT 3
32105: PUSH
32106: LD_INT 60
32108: PUSH
32109: EMPTY
32110: LIST
32111: PUSH
32112: EMPTY
32113: LIST
32114: LIST
32115: PUSH
32116: LD_INT 3
32118: PUSH
32119: LD_INT 55
32121: PUSH
32122: EMPTY
32123: LIST
32124: PUSH
32125: EMPTY
32126: LIST
32127: LIST
32128: PUSH
32129: EMPTY
32130: LIST
32131: LIST
32132: PPUSH
32133: CALL_OW 72
32137: IFFALSE 32245
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
32139: LD_ADDR_VAR 0 18
32143: PUSH
32144: LD_VAR 0 6
32148: PPUSH
32149: LD_INT 3
32151: PUSH
32152: LD_INT 60
32154: PUSH
32155: EMPTY
32156: LIST
32157: PUSH
32158: EMPTY
32159: LIST
32160: LIST
32161: PUSH
32162: LD_INT 3
32164: PUSH
32165: LD_INT 55
32167: PUSH
32168: EMPTY
32169: LIST
32170: PUSH
32171: EMPTY
32172: LIST
32173: LIST
32174: PUSH
32175: EMPTY
32176: LIST
32177: LIST
32178: PPUSH
32179: CALL_OW 72
32183: PUSH
32184: LD_INT 1
32186: ARRAY
32187: ST_TO_ADDR
// if IsInUnit ( driver ) then
32188: LD_VAR 0 18
32192: PPUSH
32193: CALL_OW 310
32197: IFFALSE 32208
// ComExit ( driver ) ;
32199: LD_VAR 0 18
32203: PPUSH
32204: CALL 56997 0 1
// AddComEnterUnit ( driver , tmp ) ;
32208: LD_VAR 0 18
32212: PPUSH
32213: LD_VAR 0 13
32217: PPUSH
32218: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
32222: LD_VAR 0 18
32226: PPUSH
32227: LD_VAR 0 7
32231: PPUSH
32232: CALL_OW 173
// AddComExitVehicle ( driver ) ;
32236: LD_VAR 0 18
32240: PPUSH
32241: CALL_OW 181
// end ; continue ;
32245: GO 31897
// end ; if not cleaners or not tmp in cleaners then
32247: LD_VAR 0 6
32251: NOT
32252: PUSH
32253: LD_VAR 0 13
32257: PUSH
32258: LD_VAR 0 6
32262: IN
32263: NOT
32264: OR
32265: IFFALSE 32572
// begin if dep then
32267: LD_VAR 0 17
32271: IFFALSE 32407
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
32273: LD_ADDR_VAR 0 16
32277: PUSH
32278: LD_VAR 0 17
32282: PUSH
32283: LD_INT 1
32285: ARRAY
32286: PPUSH
32287: CALL_OW 250
32291: PPUSH
32292: LD_VAR 0 17
32296: PUSH
32297: LD_INT 1
32299: ARRAY
32300: PPUSH
32301: CALL_OW 254
32305: PPUSH
32306: LD_INT 5
32308: PPUSH
32309: CALL_OW 272
32313: PUSH
32314: LD_VAR 0 17
32318: PUSH
32319: LD_INT 1
32321: ARRAY
32322: PPUSH
32323: CALL_OW 251
32327: PPUSH
32328: LD_VAR 0 17
32332: PUSH
32333: LD_INT 1
32335: ARRAY
32336: PPUSH
32337: CALL_OW 254
32341: PPUSH
32342: LD_INT 5
32344: PPUSH
32345: CALL_OW 273
32349: PUSH
32350: EMPTY
32351: LIST
32352: LIST
32353: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
32354: LD_VAR 0 16
32358: PUSH
32359: LD_INT 1
32361: ARRAY
32362: PPUSH
32363: LD_VAR 0 16
32367: PUSH
32368: LD_INT 2
32370: ARRAY
32371: PPUSH
32372: CALL_OW 488
32376: IFFALSE 32407
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
32378: LD_VAR 0 13
32382: PPUSH
32383: LD_VAR 0 16
32387: PUSH
32388: LD_INT 1
32390: ARRAY
32391: PPUSH
32392: LD_VAR 0 16
32396: PUSH
32397: LD_INT 2
32399: ARRAY
32400: PPUSH
32401: CALL_OW 111
// continue ;
32405: GO 31897
// end ; end ; r := GetDir ( tmp ) ;
32407: LD_ADDR_VAR 0 15
32411: PUSH
32412: LD_VAR 0 13
32416: PPUSH
32417: CALL_OW 254
32421: ST_TO_ADDR
// if r = 5 then
32422: LD_VAR 0 15
32426: PUSH
32427: LD_INT 5
32429: EQUAL
32430: IFFALSE 32440
// r := 0 ;
32432: LD_ADDR_VAR 0 15
32436: PUSH
32437: LD_INT 0
32439: ST_TO_ADDR
// for j = r to 5 do
32440: LD_ADDR_VAR 0 10
32444: PUSH
32445: DOUBLE
32446: LD_VAR 0 15
32450: DEC
32451: ST_TO_ADDR
32452: LD_INT 5
32454: PUSH
32455: FOR_TO
32456: IFFALSE 32570
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
32458: LD_ADDR_VAR 0 11
32462: PUSH
32463: LD_VAR 0 13
32467: PPUSH
32468: CALL_OW 250
32472: PPUSH
32473: LD_VAR 0 10
32477: PPUSH
32478: LD_INT 2
32480: PPUSH
32481: CALL_OW 272
32485: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
32486: LD_ADDR_VAR 0 12
32490: PUSH
32491: LD_VAR 0 13
32495: PPUSH
32496: CALL_OW 251
32500: PPUSH
32501: LD_VAR 0 10
32505: PPUSH
32506: LD_INT 2
32508: PPUSH
32509: CALL_OW 273
32513: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
32514: LD_VAR 0 11
32518: PPUSH
32519: LD_VAR 0 12
32523: PPUSH
32524: CALL_OW 488
32528: PUSH
32529: LD_VAR 0 11
32533: PPUSH
32534: LD_VAR 0 12
32538: PPUSH
32539: CALL_OW 428
32543: NOT
32544: AND
32545: IFFALSE 32568
// begin ComMoveXY ( tmp , _x , _y ) ;
32547: LD_VAR 0 13
32551: PPUSH
32552: LD_VAR 0 11
32556: PPUSH
32557: LD_VAR 0 12
32561: PPUSH
32562: CALL_OW 111
// break ;
32566: GO 32570
// end ; end ;
32568: GO 32455
32570: POP
32571: POP
// end ; end ;
32572: GO 31897
32574: POP
32575: POP
// end ;
32576: LD_VAR 0 8
32580: RET
// export function BuildingTechInvented ( side , btype ) ; begin
32581: LD_INT 0
32583: PPUSH
// result := true ;
32584: LD_ADDR_VAR 0 3
32588: PUSH
32589: LD_INT 1
32591: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
32592: LD_VAR 0 2
32596: PUSH
32597: LD_INT 24
32599: DOUBLE
32600: EQUAL
32601: IFTRUE 32611
32603: LD_INT 33
32605: DOUBLE
32606: EQUAL
32607: IFTRUE 32611
32609: GO 32636
32611: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
32612: LD_ADDR_VAR 0 3
32616: PUSH
32617: LD_INT 32
32619: PPUSH
32620: LD_VAR 0 1
32624: PPUSH
32625: CALL_OW 321
32629: PUSH
32630: LD_INT 2
32632: EQUAL
32633: ST_TO_ADDR
32634: GO 32956
32636: LD_INT 20
32638: DOUBLE
32639: EQUAL
32640: IFTRUE 32644
32642: GO 32669
32644: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
32645: LD_ADDR_VAR 0 3
32649: PUSH
32650: LD_INT 6
32652: PPUSH
32653: LD_VAR 0 1
32657: PPUSH
32658: CALL_OW 321
32662: PUSH
32663: LD_INT 2
32665: EQUAL
32666: ST_TO_ADDR
32667: GO 32956
32669: LD_INT 22
32671: DOUBLE
32672: EQUAL
32673: IFTRUE 32683
32675: LD_INT 36
32677: DOUBLE
32678: EQUAL
32679: IFTRUE 32683
32681: GO 32708
32683: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
32684: LD_ADDR_VAR 0 3
32688: PUSH
32689: LD_INT 15
32691: PPUSH
32692: LD_VAR 0 1
32696: PPUSH
32697: CALL_OW 321
32701: PUSH
32702: LD_INT 2
32704: EQUAL
32705: ST_TO_ADDR
32706: GO 32956
32708: LD_INT 30
32710: DOUBLE
32711: EQUAL
32712: IFTRUE 32716
32714: GO 32741
32716: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
32717: LD_ADDR_VAR 0 3
32721: PUSH
32722: LD_INT 20
32724: PPUSH
32725: LD_VAR 0 1
32729: PPUSH
32730: CALL_OW 321
32734: PUSH
32735: LD_INT 2
32737: EQUAL
32738: ST_TO_ADDR
32739: GO 32956
32741: LD_INT 28
32743: DOUBLE
32744: EQUAL
32745: IFTRUE 32755
32747: LD_INT 21
32749: DOUBLE
32750: EQUAL
32751: IFTRUE 32755
32753: GO 32780
32755: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
32756: LD_ADDR_VAR 0 3
32760: PUSH
32761: LD_INT 21
32763: PPUSH
32764: LD_VAR 0 1
32768: PPUSH
32769: CALL_OW 321
32773: PUSH
32774: LD_INT 2
32776: EQUAL
32777: ST_TO_ADDR
32778: GO 32956
32780: LD_INT 16
32782: DOUBLE
32783: EQUAL
32784: IFTRUE 32788
32786: GO 32815
32788: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
32789: LD_ADDR_VAR 0 3
32793: PUSH
32794: LD_EXP 41
32798: PPUSH
32799: LD_VAR 0 1
32803: PPUSH
32804: CALL_OW 321
32808: PUSH
32809: LD_INT 2
32811: EQUAL
32812: ST_TO_ADDR
32813: GO 32956
32815: LD_INT 19
32817: DOUBLE
32818: EQUAL
32819: IFTRUE 32829
32821: LD_INT 23
32823: DOUBLE
32824: EQUAL
32825: IFTRUE 32829
32827: GO 32856
32829: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
32830: LD_ADDR_VAR 0 3
32834: PUSH
32835: LD_EXP 40
32839: PPUSH
32840: LD_VAR 0 1
32844: PPUSH
32845: CALL_OW 321
32849: PUSH
32850: LD_INT 2
32852: EQUAL
32853: ST_TO_ADDR
32854: GO 32956
32856: LD_INT 17
32858: DOUBLE
32859: EQUAL
32860: IFTRUE 32864
32862: GO 32889
32864: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
32865: LD_ADDR_VAR 0 3
32869: PUSH
32870: LD_INT 39
32872: PPUSH
32873: LD_VAR 0 1
32877: PPUSH
32878: CALL_OW 321
32882: PUSH
32883: LD_INT 2
32885: EQUAL
32886: ST_TO_ADDR
32887: GO 32956
32889: LD_INT 18
32891: DOUBLE
32892: EQUAL
32893: IFTRUE 32897
32895: GO 32922
32897: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
32898: LD_ADDR_VAR 0 3
32902: PUSH
32903: LD_INT 40
32905: PPUSH
32906: LD_VAR 0 1
32910: PPUSH
32911: CALL_OW 321
32915: PUSH
32916: LD_INT 2
32918: EQUAL
32919: ST_TO_ADDR
32920: GO 32956
32922: LD_INT 27
32924: DOUBLE
32925: EQUAL
32926: IFTRUE 32930
32928: GO 32955
32930: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
32931: LD_ADDR_VAR 0 3
32935: PUSH
32936: LD_INT 35
32938: PPUSH
32939: LD_VAR 0 1
32943: PPUSH
32944: CALL_OW 321
32948: PUSH
32949: LD_INT 2
32951: EQUAL
32952: ST_TO_ADDR
32953: GO 32956
32955: POP
// end ;
32956: LD_VAR 0 3
32960: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
32961: LD_INT 0
32963: PPUSH
32964: PPUSH
32965: PPUSH
32966: PPUSH
32967: PPUSH
32968: PPUSH
32969: PPUSH
32970: PPUSH
32971: PPUSH
32972: PPUSH
32973: PPUSH
// result := false ;
32974: LD_ADDR_VAR 0 6
32978: PUSH
32979: LD_INT 0
32981: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
32982: LD_VAR 0 1
32986: NOT
32987: PUSH
32988: LD_VAR 0 1
32992: PPUSH
32993: CALL_OW 266
32997: PUSH
32998: LD_INT 0
33000: PUSH
33001: LD_INT 1
33003: PUSH
33004: EMPTY
33005: LIST
33006: LIST
33007: IN
33008: NOT
33009: OR
33010: PUSH
33011: LD_VAR 0 2
33015: NOT
33016: OR
33017: PUSH
33018: LD_VAR 0 5
33022: PUSH
33023: LD_INT 0
33025: PUSH
33026: LD_INT 1
33028: PUSH
33029: LD_INT 2
33031: PUSH
33032: LD_INT 3
33034: PUSH
33035: LD_INT 4
33037: PUSH
33038: LD_INT 5
33040: PUSH
33041: EMPTY
33042: LIST
33043: LIST
33044: LIST
33045: LIST
33046: LIST
33047: LIST
33048: IN
33049: NOT
33050: OR
33051: PUSH
33052: LD_VAR 0 3
33056: PPUSH
33057: LD_VAR 0 4
33061: PPUSH
33062: CALL_OW 488
33066: NOT
33067: OR
33068: IFFALSE 33072
// exit ;
33070: GO 33808
// side := GetSide ( depot ) ;
33072: LD_ADDR_VAR 0 9
33076: PUSH
33077: LD_VAR 0 1
33081: PPUSH
33082: CALL_OW 255
33086: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
33087: LD_VAR 0 9
33091: PPUSH
33092: LD_VAR 0 2
33096: PPUSH
33097: CALL 32581 0 2
33101: NOT
33102: IFFALSE 33106
// exit ;
33104: GO 33808
// pom := GetBase ( depot ) ;
33106: LD_ADDR_VAR 0 10
33110: PUSH
33111: LD_VAR 0 1
33115: PPUSH
33116: CALL_OW 274
33120: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
33121: LD_ADDR_VAR 0 11
33125: PUSH
33126: LD_VAR 0 2
33130: PPUSH
33131: LD_VAR 0 1
33135: PPUSH
33136: CALL_OW 248
33140: PPUSH
33141: CALL_OW 450
33145: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
33146: LD_VAR 0 10
33150: PPUSH
33151: LD_INT 1
33153: PPUSH
33154: CALL_OW 275
33158: PUSH
33159: LD_VAR 0 11
33163: PUSH
33164: LD_INT 1
33166: ARRAY
33167: GREATEREQUAL
33168: PUSH
33169: LD_VAR 0 10
33173: PPUSH
33174: LD_INT 2
33176: PPUSH
33177: CALL_OW 275
33181: PUSH
33182: LD_VAR 0 11
33186: PUSH
33187: LD_INT 2
33189: ARRAY
33190: GREATEREQUAL
33191: AND
33192: PUSH
33193: LD_VAR 0 10
33197: PPUSH
33198: LD_INT 3
33200: PPUSH
33201: CALL_OW 275
33205: PUSH
33206: LD_VAR 0 11
33210: PUSH
33211: LD_INT 3
33213: ARRAY
33214: GREATEREQUAL
33215: AND
33216: NOT
33217: IFFALSE 33221
// exit ;
33219: GO 33808
// if GetBType ( depot ) = b_depot then
33221: LD_VAR 0 1
33225: PPUSH
33226: CALL_OW 266
33230: PUSH
33231: LD_INT 0
33233: EQUAL
33234: IFFALSE 33246
// dist := 28 else
33236: LD_ADDR_VAR 0 14
33240: PUSH
33241: LD_INT 28
33243: ST_TO_ADDR
33244: GO 33254
// dist := 36 ;
33246: LD_ADDR_VAR 0 14
33250: PUSH
33251: LD_INT 36
33253: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
33254: LD_VAR 0 1
33258: PPUSH
33259: LD_VAR 0 3
33263: PPUSH
33264: LD_VAR 0 4
33268: PPUSH
33269: CALL_OW 297
33273: PUSH
33274: LD_VAR 0 14
33278: GREATER
33279: IFFALSE 33283
// exit ;
33281: GO 33808
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
33283: LD_ADDR_VAR 0 12
33287: PUSH
33288: LD_VAR 0 2
33292: PPUSH
33293: LD_VAR 0 3
33297: PPUSH
33298: LD_VAR 0 4
33302: PPUSH
33303: LD_VAR 0 5
33307: PPUSH
33308: LD_VAR 0 1
33312: PPUSH
33313: CALL_OW 248
33317: PPUSH
33318: LD_INT 0
33320: PPUSH
33321: CALL 33813 0 6
33325: ST_TO_ADDR
// if not hexes then
33326: LD_VAR 0 12
33330: NOT
33331: IFFALSE 33335
// exit ;
33333: GO 33808
// hex := GetHexInfo ( x , y ) ;
33335: LD_ADDR_VAR 0 15
33339: PUSH
33340: LD_VAR 0 3
33344: PPUSH
33345: LD_VAR 0 4
33349: PPUSH
33350: CALL_OW 546
33354: ST_TO_ADDR
// if hex [ 1 ] then
33355: LD_VAR 0 15
33359: PUSH
33360: LD_INT 1
33362: ARRAY
33363: IFFALSE 33367
// exit ;
33365: GO 33808
// height := hex [ 2 ] ;
33367: LD_ADDR_VAR 0 13
33371: PUSH
33372: LD_VAR 0 15
33376: PUSH
33377: LD_INT 2
33379: ARRAY
33380: ST_TO_ADDR
// for i = 1 to hexes do
33381: LD_ADDR_VAR 0 7
33385: PUSH
33386: DOUBLE
33387: LD_INT 1
33389: DEC
33390: ST_TO_ADDR
33391: LD_VAR 0 12
33395: PUSH
33396: FOR_TO
33397: IFFALSE 33727
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
33399: LD_VAR 0 12
33403: PUSH
33404: LD_VAR 0 7
33408: ARRAY
33409: PUSH
33410: LD_INT 1
33412: ARRAY
33413: PPUSH
33414: LD_VAR 0 12
33418: PUSH
33419: LD_VAR 0 7
33423: ARRAY
33424: PUSH
33425: LD_INT 2
33427: ARRAY
33428: PPUSH
33429: CALL_OW 488
33433: NOT
33434: PUSH
33435: LD_VAR 0 12
33439: PUSH
33440: LD_VAR 0 7
33444: ARRAY
33445: PUSH
33446: LD_INT 1
33448: ARRAY
33449: PPUSH
33450: LD_VAR 0 12
33454: PUSH
33455: LD_VAR 0 7
33459: ARRAY
33460: PUSH
33461: LD_INT 2
33463: ARRAY
33464: PPUSH
33465: CALL_OW 428
33469: PUSH
33470: LD_INT 0
33472: GREATER
33473: OR
33474: PUSH
33475: LD_VAR 0 12
33479: PUSH
33480: LD_VAR 0 7
33484: ARRAY
33485: PUSH
33486: LD_INT 1
33488: ARRAY
33489: PPUSH
33490: LD_VAR 0 12
33494: PUSH
33495: LD_VAR 0 7
33499: ARRAY
33500: PUSH
33501: LD_INT 2
33503: ARRAY
33504: PPUSH
33505: CALL_OW 351
33509: OR
33510: IFFALSE 33516
// exit ;
33512: POP
33513: POP
33514: GO 33808
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33516: LD_ADDR_VAR 0 8
33520: PUSH
33521: LD_VAR 0 12
33525: PUSH
33526: LD_VAR 0 7
33530: ARRAY
33531: PUSH
33532: LD_INT 1
33534: ARRAY
33535: PPUSH
33536: LD_VAR 0 12
33540: PUSH
33541: LD_VAR 0 7
33545: ARRAY
33546: PUSH
33547: LD_INT 2
33549: ARRAY
33550: PPUSH
33551: CALL_OW 546
33555: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
33556: LD_VAR 0 8
33560: PUSH
33561: LD_INT 1
33563: ARRAY
33564: PUSH
33565: LD_VAR 0 8
33569: PUSH
33570: LD_INT 2
33572: ARRAY
33573: PUSH
33574: LD_VAR 0 13
33578: PUSH
33579: LD_INT 2
33581: PLUS
33582: GREATER
33583: OR
33584: PUSH
33585: LD_VAR 0 8
33589: PUSH
33590: LD_INT 2
33592: ARRAY
33593: PUSH
33594: LD_VAR 0 13
33598: PUSH
33599: LD_INT 2
33601: MINUS
33602: LESS
33603: OR
33604: PUSH
33605: LD_VAR 0 8
33609: PUSH
33610: LD_INT 3
33612: ARRAY
33613: PUSH
33614: LD_INT 0
33616: PUSH
33617: LD_INT 8
33619: PUSH
33620: LD_INT 9
33622: PUSH
33623: LD_INT 10
33625: PUSH
33626: LD_INT 11
33628: PUSH
33629: LD_INT 12
33631: PUSH
33632: LD_INT 13
33634: PUSH
33635: LD_INT 16
33637: PUSH
33638: LD_INT 17
33640: PUSH
33641: LD_INT 18
33643: PUSH
33644: LD_INT 19
33646: PUSH
33647: LD_INT 20
33649: PUSH
33650: LD_INT 21
33652: PUSH
33653: EMPTY
33654: LIST
33655: LIST
33656: LIST
33657: LIST
33658: LIST
33659: LIST
33660: LIST
33661: LIST
33662: LIST
33663: LIST
33664: LIST
33665: LIST
33666: LIST
33667: IN
33668: NOT
33669: OR
33670: PUSH
33671: LD_VAR 0 8
33675: PUSH
33676: LD_INT 5
33678: ARRAY
33679: NOT
33680: OR
33681: PUSH
33682: LD_VAR 0 8
33686: PUSH
33687: LD_INT 6
33689: ARRAY
33690: PUSH
33691: LD_INT 1
33693: PUSH
33694: LD_INT 2
33696: PUSH
33697: LD_INT 7
33699: PUSH
33700: LD_INT 9
33702: PUSH
33703: LD_INT 10
33705: PUSH
33706: LD_INT 11
33708: PUSH
33709: EMPTY
33710: LIST
33711: LIST
33712: LIST
33713: LIST
33714: LIST
33715: LIST
33716: IN
33717: NOT
33718: OR
33719: IFFALSE 33725
// exit ;
33721: POP
33722: POP
33723: GO 33808
// end ;
33725: GO 33396
33727: POP
33728: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
33729: LD_VAR 0 9
33733: PPUSH
33734: LD_VAR 0 3
33738: PPUSH
33739: LD_VAR 0 4
33743: PPUSH
33744: LD_INT 20
33746: PPUSH
33747: CALL 25754 0 4
33751: PUSH
33752: LD_INT 4
33754: ARRAY
33755: IFFALSE 33759
// exit ;
33757: GO 33808
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
33759: LD_VAR 0 2
33763: PUSH
33764: LD_INT 29
33766: PUSH
33767: LD_INT 30
33769: PUSH
33770: EMPTY
33771: LIST
33772: LIST
33773: IN
33774: PUSH
33775: LD_VAR 0 3
33779: PPUSH
33780: LD_VAR 0 4
33784: PPUSH
33785: LD_VAR 0 9
33789: PPUSH
33790: CALL_OW 440
33794: NOT
33795: AND
33796: IFFALSE 33800
// exit ;
33798: GO 33808
// result := true ;
33800: LD_ADDR_VAR 0 6
33804: PUSH
33805: LD_INT 1
33807: ST_TO_ADDR
// end ;
33808: LD_VAR 0 6
33812: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
33813: LD_INT 0
33815: PPUSH
33816: PPUSH
33817: PPUSH
33818: PPUSH
33819: PPUSH
33820: PPUSH
33821: PPUSH
33822: PPUSH
33823: PPUSH
33824: PPUSH
33825: PPUSH
33826: PPUSH
33827: PPUSH
33828: PPUSH
33829: PPUSH
33830: PPUSH
33831: PPUSH
33832: PPUSH
33833: PPUSH
33834: PPUSH
33835: PPUSH
33836: PPUSH
33837: PPUSH
33838: PPUSH
33839: PPUSH
33840: PPUSH
33841: PPUSH
33842: PPUSH
33843: PPUSH
33844: PPUSH
33845: PPUSH
33846: PPUSH
33847: PPUSH
33848: PPUSH
33849: PPUSH
33850: PPUSH
33851: PPUSH
33852: PPUSH
33853: PPUSH
33854: PPUSH
33855: PPUSH
33856: PPUSH
33857: PPUSH
33858: PPUSH
33859: PPUSH
33860: PPUSH
33861: PPUSH
33862: PPUSH
33863: PPUSH
33864: PPUSH
33865: PPUSH
33866: PPUSH
33867: PPUSH
33868: PPUSH
33869: PPUSH
33870: PPUSH
33871: PPUSH
33872: PPUSH
// result = [ ] ;
33873: LD_ADDR_VAR 0 7
33877: PUSH
33878: EMPTY
33879: ST_TO_ADDR
// temp_list = [ ] ;
33880: LD_ADDR_VAR 0 9
33884: PUSH
33885: EMPTY
33886: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
33887: LD_VAR 0 4
33891: PUSH
33892: LD_INT 0
33894: PUSH
33895: LD_INT 1
33897: PUSH
33898: LD_INT 2
33900: PUSH
33901: LD_INT 3
33903: PUSH
33904: LD_INT 4
33906: PUSH
33907: LD_INT 5
33909: PUSH
33910: EMPTY
33911: LIST
33912: LIST
33913: LIST
33914: LIST
33915: LIST
33916: LIST
33917: IN
33918: NOT
33919: PUSH
33920: LD_VAR 0 1
33924: PUSH
33925: LD_INT 0
33927: PUSH
33928: LD_INT 1
33930: PUSH
33931: EMPTY
33932: LIST
33933: LIST
33934: IN
33935: PUSH
33936: LD_VAR 0 5
33940: PUSH
33941: LD_INT 1
33943: PUSH
33944: LD_INT 2
33946: PUSH
33947: LD_INT 3
33949: PUSH
33950: EMPTY
33951: LIST
33952: LIST
33953: LIST
33954: IN
33955: NOT
33956: AND
33957: OR
33958: IFFALSE 33962
// exit ;
33960: GO 52353
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
33962: LD_VAR 0 1
33966: PUSH
33967: LD_INT 6
33969: PUSH
33970: LD_INT 7
33972: PUSH
33973: LD_INT 8
33975: PUSH
33976: LD_INT 13
33978: PUSH
33979: LD_INT 12
33981: PUSH
33982: LD_INT 15
33984: PUSH
33985: LD_INT 11
33987: PUSH
33988: LD_INT 14
33990: PUSH
33991: LD_INT 10
33993: PUSH
33994: EMPTY
33995: LIST
33996: LIST
33997: LIST
33998: LIST
33999: LIST
34000: LIST
34001: LIST
34002: LIST
34003: LIST
34004: IN
34005: IFFALSE 34015
// btype = b_lab ;
34007: LD_ADDR_VAR 0 1
34011: PUSH
34012: LD_INT 6
34014: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
34015: LD_VAR 0 6
34019: PUSH
34020: LD_INT 0
34022: PUSH
34023: LD_INT 1
34025: PUSH
34026: LD_INT 2
34028: PUSH
34029: EMPTY
34030: LIST
34031: LIST
34032: LIST
34033: IN
34034: NOT
34035: PUSH
34036: LD_VAR 0 1
34040: PUSH
34041: LD_INT 0
34043: PUSH
34044: LD_INT 1
34046: PUSH
34047: LD_INT 2
34049: PUSH
34050: LD_INT 3
34052: PUSH
34053: LD_INT 6
34055: PUSH
34056: LD_INT 36
34058: PUSH
34059: LD_INT 4
34061: PUSH
34062: LD_INT 5
34064: PUSH
34065: LD_INT 31
34067: PUSH
34068: LD_INT 32
34070: PUSH
34071: LD_INT 33
34073: PUSH
34074: EMPTY
34075: LIST
34076: LIST
34077: LIST
34078: LIST
34079: LIST
34080: LIST
34081: LIST
34082: LIST
34083: LIST
34084: LIST
34085: LIST
34086: IN
34087: NOT
34088: PUSH
34089: LD_VAR 0 6
34093: PUSH
34094: LD_INT 1
34096: EQUAL
34097: AND
34098: OR
34099: PUSH
34100: LD_VAR 0 1
34104: PUSH
34105: LD_INT 2
34107: PUSH
34108: LD_INT 3
34110: PUSH
34111: EMPTY
34112: LIST
34113: LIST
34114: IN
34115: NOT
34116: PUSH
34117: LD_VAR 0 6
34121: PUSH
34122: LD_INT 2
34124: EQUAL
34125: AND
34126: OR
34127: IFFALSE 34137
// mode = 0 ;
34129: LD_ADDR_VAR 0 6
34133: PUSH
34134: LD_INT 0
34136: ST_TO_ADDR
// case mode of 0 :
34137: LD_VAR 0 6
34141: PUSH
34142: LD_INT 0
34144: DOUBLE
34145: EQUAL
34146: IFTRUE 34150
34148: GO 45603
34150: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
34151: LD_ADDR_VAR 0 11
34155: PUSH
34156: LD_INT 0
34158: PUSH
34159: LD_INT 0
34161: PUSH
34162: EMPTY
34163: LIST
34164: LIST
34165: PUSH
34166: LD_INT 0
34168: PUSH
34169: LD_INT 1
34171: NEG
34172: PUSH
34173: EMPTY
34174: LIST
34175: LIST
34176: PUSH
34177: LD_INT 1
34179: PUSH
34180: LD_INT 0
34182: PUSH
34183: EMPTY
34184: LIST
34185: LIST
34186: PUSH
34187: LD_INT 1
34189: PUSH
34190: LD_INT 1
34192: PUSH
34193: EMPTY
34194: LIST
34195: LIST
34196: PUSH
34197: LD_INT 0
34199: PUSH
34200: LD_INT 1
34202: PUSH
34203: EMPTY
34204: LIST
34205: LIST
34206: PUSH
34207: LD_INT 1
34209: NEG
34210: PUSH
34211: LD_INT 0
34213: PUSH
34214: EMPTY
34215: LIST
34216: LIST
34217: PUSH
34218: LD_INT 1
34220: NEG
34221: PUSH
34222: LD_INT 1
34224: NEG
34225: PUSH
34226: EMPTY
34227: LIST
34228: LIST
34229: PUSH
34230: LD_INT 1
34232: NEG
34233: PUSH
34234: LD_INT 2
34236: NEG
34237: PUSH
34238: EMPTY
34239: LIST
34240: LIST
34241: PUSH
34242: LD_INT 0
34244: PUSH
34245: LD_INT 2
34247: NEG
34248: PUSH
34249: EMPTY
34250: LIST
34251: LIST
34252: PUSH
34253: LD_INT 1
34255: PUSH
34256: LD_INT 1
34258: NEG
34259: PUSH
34260: EMPTY
34261: LIST
34262: LIST
34263: PUSH
34264: LD_INT 1
34266: PUSH
34267: LD_INT 2
34269: PUSH
34270: EMPTY
34271: LIST
34272: LIST
34273: PUSH
34274: LD_INT 0
34276: PUSH
34277: LD_INT 2
34279: PUSH
34280: EMPTY
34281: LIST
34282: LIST
34283: PUSH
34284: LD_INT 1
34286: NEG
34287: PUSH
34288: LD_INT 1
34290: PUSH
34291: EMPTY
34292: LIST
34293: LIST
34294: PUSH
34295: LD_INT 1
34297: PUSH
34298: LD_INT 3
34300: PUSH
34301: EMPTY
34302: LIST
34303: LIST
34304: PUSH
34305: LD_INT 0
34307: PUSH
34308: LD_INT 3
34310: PUSH
34311: EMPTY
34312: LIST
34313: LIST
34314: PUSH
34315: LD_INT 1
34317: NEG
34318: PUSH
34319: LD_INT 2
34321: PUSH
34322: EMPTY
34323: LIST
34324: LIST
34325: PUSH
34326: EMPTY
34327: LIST
34328: LIST
34329: LIST
34330: LIST
34331: LIST
34332: LIST
34333: LIST
34334: LIST
34335: LIST
34336: LIST
34337: LIST
34338: LIST
34339: LIST
34340: LIST
34341: LIST
34342: LIST
34343: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34344: LD_ADDR_VAR 0 12
34348: PUSH
34349: LD_INT 0
34351: PUSH
34352: LD_INT 0
34354: PUSH
34355: EMPTY
34356: LIST
34357: LIST
34358: PUSH
34359: LD_INT 0
34361: PUSH
34362: LD_INT 1
34364: NEG
34365: PUSH
34366: EMPTY
34367: LIST
34368: LIST
34369: PUSH
34370: LD_INT 1
34372: PUSH
34373: LD_INT 0
34375: PUSH
34376: EMPTY
34377: LIST
34378: LIST
34379: PUSH
34380: LD_INT 1
34382: PUSH
34383: LD_INT 1
34385: PUSH
34386: EMPTY
34387: LIST
34388: LIST
34389: PUSH
34390: LD_INT 0
34392: PUSH
34393: LD_INT 1
34395: PUSH
34396: EMPTY
34397: LIST
34398: LIST
34399: PUSH
34400: LD_INT 1
34402: NEG
34403: PUSH
34404: LD_INT 0
34406: PUSH
34407: EMPTY
34408: LIST
34409: LIST
34410: PUSH
34411: LD_INT 1
34413: NEG
34414: PUSH
34415: LD_INT 1
34417: NEG
34418: PUSH
34419: EMPTY
34420: LIST
34421: LIST
34422: PUSH
34423: LD_INT 1
34425: PUSH
34426: LD_INT 1
34428: NEG
34429: PUSH
34430: EMPTY
34431: LIST
34432: LIST
34433: PUSH
34434: LD_INT 2
34436: PUSH
34437: LD_INT 0
34439: PUSH
34440: EMPTY
34441: LIST
34442: LIST
34443: PUSH
34444: LD_INT 2
34446: PUSH
34447: LD_INT 1
34449: PUSH
34450: EMPTY
34451: LIST
34452: LIST
34453: PUSH
34454: LD_INT 1
34456: NEG
34457: PUSH
34458: LD_INT 1
34460: PUSH
34461: EMPTY
34462: LIST
34463: LIST
34464: PUSH
34465: LD_INT 2
34467: NEG
34468: PUSH
34469: LD_INT 0
34471: PUSH
34472: EMPTY
34473: LIST
34474: LIST
34475: PUSH
34476: LD_INT 2
34478: NEG
34479: PUSH
34480: LD_INT 1
34482: NEG
34483: PUSH
34484: EMPTY
34485: LIST
34486: LIST
34487: PUSH
34488: LD_INT 2
34490: NEG
34491: PUSH
34492: LD_INT 1
34494: PUSH
34495: EMPTY
34496: LIST
34497: LIST
34498: PUSH
34499: LD_INT 3
34501: NEG
34502: PUSH
34503: LD_INT 0
34505: PUSH
34506: EMPTY
34507: LIST
34508: LIST
34509: PUSH
34510: LD_INT 3
34512: NEG
34513: PUSH
34514: LD_INT 1
34516: NEG
34517: PUSH
34518: EMPTY
34519: LIST
34520: LIST
34521: PUSH
34522: EMPTY
34523: LIST
34524: LIST
34525: LIST
34526: LIST
34527: LIST
34528: LIST
34529: LIST
34530: LIST
34531: LIST
34532: LIST
34533: LIST
34534: LIST
34535: LIST
34536: LIST
34537: LIST
34538: LIST
34539: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34540: LD_ADDR_VAR 0 13
34544: PUSH
34545: LD_INT 0
34547: PUSH
34548: LD_INT 0
34550: PUSH
34551: EMPTY
34552: LIST
34553: LIST
34554: PUSH
34555: LD_INT 0
34557: PUSH
34558: LD_INT 1
34560: NEG
34561: PUSH
34562: EMPTY
34563: LIST
34564: LIST
34565: PUSH
34566: LD_INT 1
34568: PUSH
34569: LD_INT 0
34571: PUSH
34572: EMPTY
34573: LIST
34574: LIST
34575: PUSH
34576: LD_INT 1
34578: PUSH
34579: LD_INT 1
34581: PUSH
34582: EMPTY
34583: LIST
34584: LIST
34585: PUSH
34586: LD_INT 0
34588: PUSH
34589: LD_INT 1
34591: PUSH
34592: EMPTY
34593: LIST
34594: LIST
34595: PUSH
34596: LD_INT 1
34598: NEG
34599: PUSH
34600: LD_INT 0
34602: PUSH
34603: EMPTY
34604: LIST
34605: LIST
34606: PUSH
34607: LD_INT 1
34609: NEG
34610: PUSH
34611: LD_INT 1
34613: NEG
34614: PUSH
34615: EMPTY
34616: LIST
34617: LIST
34618: PUSH
34619: LD_INT 1
34621: NEG
34622: PUSH
34623: LD_INT 2
34625: NEG
34626: PUSH
34627: EMPTY
34628: LIST
34629: LIST
34630: PUSH
34631: LD_INT 2
34633: PUSH
34634: LD_INT 1
34636: PUSH
34637: EMPTY
34638: LIST
34639: LIST
34640: PUSH
34641: LD_INT 2
34643: PUSH
34644: LD_INT 2
34646: PUSH
34647: EMPTY
34648: LIST
34649: LIST
34650: PUSH
34651: LD_INT 1
34653: PUSH
34654: LD_INT 2
34656: PUSH
34657: EMPTY
34658: LIST
34659: LIST
34660: PUSH
34661: LD_INT 2
34663: NEG
34664: PUSH
34665: LD_INT 1
34667: NEG
34668: PUSH
34669: EMPTY
34670: LIST
34671: LIST
34672: PUSH
34673: LD_INT 2
34675: NEG
34676: PUSH
34677: LD_INT 2
34679: NEG
34680: PUSH
34681: EMPTY
34682: LIST
34683: LIST
34684: PUSH
34685: LD_INT 2
34687: NEG
34688: PUSH
34689: LD_INT 3
34691: NEG
34692: PUSH
34693: EMPTY
34694: LIST
34695: LIST
34696: PUSH
34697: LD_INT 3
34699: NEG
34700: PUSH
34701: LD_INT 2
34703: NEG
34704: PUSH
34705: EMPTY
34706: LIST
34707: LIST
34708: PUSH
34709: LD_INT 3
34711: NEG
34712: PUSH
34713: LD_INT 3
34715: NEG
34716: PUSH
34717: EMPTY
34718: LIST
34719: LIST
34720: PUSH
34721: EMPTY
34722: LIST
34723: LIST
34724: LIST
34725: LIST
34726: LIST
34727: LIST
34728: LIST
34729: LIST
34730: LIST
34731: LIST
34732: LIST
34733: LIST
34734: LIST
34735: LIST
34736: LIST
34737: LIST
34738: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
34739: LD_ADDR_VAR 0 14
34743: PUSH
34744: LD_INT 0
34746: PUSH
34747: LD_INT 0
34749: PUSH
34750: EMPTY
34751: LIST
34752: LIST
34753: PUSH
34754: LD_INT 0
34756: PUSH
34757: LD_INT 1
34759: NEG
34760: PUSH
34761: EMPTY
34762: LIST
34763: LIST
34764: PUSH
34765: LD_INT 1
34767: PUSH
34768: LD_INT 0
34770: PUSH
34771: EMPTY
34772: LIST
34773: LIST
34774: PUSH
34775: LD_INT 1
34777: PUSH
34778: LD_INT 1
34780: PUSH
34781: EMPTY
34782: LIST
34783: LIST
34784: PUSH
34785: LD_INT 0
34787: PUSH
34788: LD_INT 1
34790: PUSH
34791: EMPTY
34792: LIST
34793: LIST
34794: PUSH
34795: LD_INT 1
34797: NEG
34798: PUSH
34799: LD_INT 0
34801: PUSH
34802: EMPTY
34803: LIST
34804: LIST
34805: PUSH
34806: LD_INT 1
34808: NEG
34809: PUSH
34810: LD_INT 1
34812: NEG
34813: PUSH
34814: EMPTY
34815: LIST
34816: LIST
34817: PUSH
34818: LD_INT 1
34820: NEG
34821: PUSH
34822: LD_INT 2
34824: NEG
34825: PUSH
34826: EMPTY
34827: LIST
34828: LIST
34829: PUSH
34830: LD_INT 0
34832: PUSH
34833: LD_INT 2
34835: NEG
34836: PUSH
34837: EMPTY
34838: LIST
34839: LIST
34840: PUSH
34841: LD_INT 1
34843: PUSH
34844: LD_INT 1
34846: NEG
34847: PUSH
34848: EMPTY
34849: LIST
34850: LIST
34851: PUSH
34852: LD_INT 1
34854: PUSH
34855: LD_INT 2
34857: PUSH
34858: EMPTY
34859: LIST
34860: LIST
34861: PUSH
34862: LD_INT 0
34864: PUSH
34865: LD_INT 2
34867: PUSH
34868: EMPTY
34869: LIST
34870: LIST
34871: PUSH
34872: LD_INT 1
34874: NEG
34875: PUSH
34876: LD_INT 1
34878: PUSH
34879: EMPTY
34880: LIST
34881: LIST
34882: PUSH
34883: LD_INT 1
34885: NEG
34886: PUSH
34887: LD_INT 3
34889: NEG
34890: PUSH
34891: EMPTY
34892: LIST
34893: LIST
34894: PUSH
34895: LD_INT 0
34897: PUSH
34898: LD_INT 3
34900: NEG
34901: PUSH
34902: EMPTY
34903: LIST
34904: LIST
34905: PUSH
34906: LD_INT 1
34908: PUSH
34909: LD_INT 2
34911: NEG
34912: PUSH
34913: EMPTY
34914: LIST
34915: LIST
34916: PUSH
34917: EMPTY
34918: LIST
34919: LIST
34920: LIST
34921: LIST
34922: LIST
34923: LIST
34924: LIST
34925: LIST
34926: LIST
34927: LIST
34928: LIST
34929: LIST
34930: LIST
34931: LIST
34932: LIST
34933: LIST
34934: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
34935: LD_ADDR_VAR 0 15
34939: PUSH
34940: LD_INT 0
34942: PUSH
34943: LD_INT 0
34945: PUSH
34946: EMPTY
34947: LIST
34948: LIST
34949: PUSH
34950: LD_INT 0
34952: PUSH
34953: LD_INT 1
34955: NEG
34956: PUSH
34957: EMPTY
34958: LIST
34959: LIST
34960: PUSH
34961: LD_INT 1
34963: PUSH
34964: LD_INT 0
34966: PUSH
34967: EMPTY
34968: LIST
34969: LIST
34970: PUSH
34971: LD_INT 1
34973: PUSH
34974: LD_INT 1
34976: PUSH
34977: EMPTY
34978: LIST
34979: LIST
34980: PUSH
34981: LD_INT 0
34983: PUSH
34984: LD_INT 1
34986: PUSH
34987: EMPTY
34988: LIST
34989: LIST
34990: PUSH
34991: LD_INT 1
34993: NEG
34994: PUSH
34995: LD_INT 0
34997: PUSH
34998: EMPTY
34999: LIST
35000: LIST
35001: PUSH
35002: LD_INT 1
35004: NEG
35005: PUSH
35006: LD_INT 1
35008: NEG
35009: PUSH
35010: EMPTY
35011: LIST
35012: LIST
35013: PUSH
35014: LD_INT 1
35016: PUSH
35017: LD_INT 1
35019: NEG
35020: PUSH
35021: EMPTY
35022: LIST
35023: LIST
35024: PUSH
35025: LD_INT 2
35027: PUSH
35028: LD_INT 0
35030: PUSH
35031: EMPTY
35032: LIST
35033: LIST
35034: PUSH
35035: LD_INT 2
35037: PUSH
35038: LD_INT 1
35040: PUSH
35041: EMPTY
35042: LIST
35043: LIST
35044: PUSH
35045: LD_INT 1
35047: NEG
35048: PUSH
35049: LD_INT 1
35051: PUSH
35052: EMPTY
35053: LIST
35054: LIST
35055: PUSH
35056: LD_INT 2
35058: NEG
35059: PUSH
35060: LD_INT 0
35062: PUSH
35063: EMPTY
35064: LIST
35065: LIST
35066: PUSH
35067: LD_INT 2
35069: NEG
35070: PUSH
35071: LD_INT 1
35073: NEG
35074: PUSH
35075: EMPTY
35076: LIST
35077: LIST
35078: PUSH
35079: LD_INT 2
35081: PUSH
35082: LD_INT 1
35084: NEG
35085: PUSH
35086: EMPTY
35087: LIST
35088: LIST
35089: PUSH
35090: LD_INT 3
35092: PUSH
35093: LD_INT 0
35095: PUSH
35096: EMPTY
35097: LIST
35098: LIST
35099: PUSH
35100: LD_INT 3
35102: PUSH
35103: LD_INT 1
35105: PUSH
35106: EMPTY
35107: LIST
35108: LIST
35109: PUSH
35110: EMPTY
35111: LIST
35112: LIST
35113: LIST
35114: LIST
35115: LIST
35116: LIST
35117: LIST
35118: LIST
35119: LIST
35120: LIST
35121: LIST
35122: LIST
35123: LIST
35124: LIST
35125: LIST
35126: LIST
35127: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35128: LD_ADDR_VAR 0 16
35132: PUSH
35133: LD_INT 0
35135: PUSH
35136: LD_INT 0
35138: PUSH
35139: EMPTY
35140: LIST
35141: LIST
35142: PUSH
35143: LD_INT 0
35145: PUSH
35146: LD_INT 1
35148: NEG
35149: PUSH
35150: EMPTY
35151: LIST
35152: LIST
35153: PUSH
35154: LD_INT 1
35156: PUSH
35157: LD_INT 0
35159: PUSH
35160: EMPTY
35161: LIST
35162: LIST
35163: PUSH
35164: LD_INT 1
35166: PUSH
35167: LD_INT 1
35169: PUSH
35170: EMPTY
35171: LIST
35172: LIST
35173: PUSH
35174: LD_INT 0
35176: PUSH
35177: LD_INT 1
35179: PUSH
35180: EMPTY
35181: LIST
35182: LIST
35183: PUSH
35184: LD_INT 1
35186: NEG
35187: PUSH
35188: LD_INT 0
35190: PUSH
35191: EMPTY
35192: LIST
35193: LIST
35194: PUSH
35195: LD_INT 1
35197: NEG
35198: PUSH
35199: LD_INT 1
35201: NEG
35202: PUSH
35203: EMPTY
35204: LIST
35205: LIST
35206: PUSH
35207: LD_INT 1
35209: NEG
35210: PUSH
35211: LD_INT 2
35213: NEG
35214: PUSH
35215: EMPTY
35216: LIST
35217: LIST
35218: PUSH
35219: LD_INT 2
35221: PUSH
35222: LD_INT 1
35224: PUSH
35225: EMPTY
35226: LIST
35227: LIST
35228: PUSH
35229: LD_INT 2
35231: PUSH
35232: LD_INT 2
35234: PUSH
35235: EMPTY
35236: LIST
35237: LIST
35238: PUSH
35239: LD_INT 1
35241: PUSH
35242: LD_INT 2
35244: PUSH
35245: EMPTY
35246: LIST
35247: LIST
35248: PUSH
35249: LD_INT 2
35251: NEG
35252: PUSH
35253: LD_INT 1
35255: NEG
35256: PUSH
35257: EMPTY
35258: LIST
35259: LIST
35260: PUSH
35261: LD_INT 2
35263: NEG
35264: PUSH
35265: LD_INT 2
35267: NEG
35268: PUSH
35269: EMPTY
35270: LIST
35271: LIST
35272: PUSH
35273: LD_INT 3
35275: PUSH
35276: LD_INT 2
35278: PUSH
35279: EMPTY
35280: LIST
35281: LIST
35282: PUSH
35283: LD_INT 3
35285: PUSH
35286: LD_INT 3
35288: PUSH
35289: EMPTY
35290: LIST
35291: LIST
35292: PUSH
35293: LD_INT 2
35295: PUSH
35296: LD_INT 3
35298: PUSH
35299: EMPTY
35300: LIST
35301: LIST
35302: PUSH
35303: EMPTY
35304: LIST
35305: LIST
35306: LIST
35307: LIST
35308: LIST
35309: LIST
35310: LIST
35311: LIST
35312: LIST
35313: LIST
35314: LIST
35315: LIST
35316: LIST
35317: LIST
35318: LIST
35319: LIST
35320: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35321: LD_ADDR_VAR 0 17
35325: PUSH
35326: LD_INT 0
35328: PUSH
35329: LD_INT 0
35331: PUSH
35332: EMPTY
35333: LIST
35334: LIST
35335: PUSH
35336: LD_INT 0
35338: PUSH
35339: LD_INT 1
35341: NEG
35342: PUSH
35343: EMPTY
35344: LIST
35345: LIST
35346: PUSH
35347: LD_INT 1
35349: PUSH
35350: LD_INT 0
35352: PUSH
35353: EMPTY
35354: LIST
35355: LIST
35356: PUSH
35357: LD_INT 1
35359: PUSH
35360: LD_INT 1
35362: PUSH
35363: EMPTY
35364: LIST
35365: LIST
35366: PUSH
35367: LD_INT 0
35369: PUSH
35370: LD_INT 1
35372: PUSH
35373: EMPTY
35374: LIST
35375: LIST
35376: PUSH
35377: LD_INT 1
35379: NEG
35380: PUSH
35381: LD_INT 0
35383: PUSH
35384: EMPTY
35385: LIST
35386: LIST
35387: PUSH
35388: LD_INT 1
35390: NEG
35391: PUSH
35392: LD_INT 1
35394: NEG
35395: PUSH
35396: EMPTY
35397: LIST
35398: LIST
35399: PUSH
35400: LD_INT 1
35402: NEG
35403: PUSH
35404: LD_INT 2
35406: NEG
35407: PUSH
35408: EMPTY
35409: LIST
35410: LIST
35411: PUSH
35412: LD_INT 0
35414: PUSH
35415: LD_INT 2
35417: NEG
35418: PUSH
35419: EMPTY
35420: LIST
35421: LIST
35422: PUSH
35423: LD_INT 1
35425: PUSH
35426: LD_INT 1
35428: NEG
35429: PUSH
35430: EMPTY
35431: LIST
35432: LIST
35433: PUSH
35434: LD_INT 2
35436: PUSH
35437: LD_INT 0
35439: PUSH
35440: EMPTY
35441: LIST
35442: LIST
35443: PUSH
35444: LD_INT 2
35446: PUSH
35447: LD_INT 1
35449: PUSH
35450: EMPTY
35451: LIST
35452: LIST
35453: PUSH
35454: LD_INT 2
35456: PUSH
35457: LD_INT 2
35459: PUSH
35460: EMPTY
35461: LIST
35462: LIST
35463: PUSH
35464: LD_INT 1
35466: PUSH
35467: LD_INT 2
35469: PUSH
35470: EMPTY
35471: LIST
35472: LIST
35473: PUSH
35474: LD_INT 0
35476: PUSH
35477: LD_INT 2
35479: PUSH
35480: EMPTY
35481: LIST
35482: LIST
35483: PUSH
35484: LD_INT 1
35486: NEG
35487: PUSH
35488: LD_INT 1
35490: PUSH
35491: EMPTY
35492: LIST
35493: LIST
35494: PUSH
35495: LD_INT 2
35497: NEG
35498: PUSH
35499: LD_INT 0
35501: PUSH
35502: EMPTY
35503: LIST
35504: LIST
35505: PUSH
35506: LD_INT 2
35508: NEG
35509: PUSH
35510: LD_INT 1
35512: NEG
35513: PUSH
35514: EMPTY
35515: LIST
35516: LIST
35517: PUSH
35518: LD_INT 2
35520: NEG
35521: PUSH
35522: LD_INT 2
35524: NEG
35525: PUSH
35526: EMPTY
35527: LIST
35528: LIST
35529: PUSH
35530: EMPTY
35531: LIST
35532: LIST
35533: LIST
35534: LIST
35535: LIST
35536: LIST
35537: LIST
35538: LIST
35539: LIST
35540: LIST
35541: LIST
35542: LIST
35543: LIST
35544: LIST
35545: LIST
35546: LIST
35547: LIST
35548: LIST
35549: LIST
35550: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35551: LD_ADDR_VAR 0 18
35555: PUSH
35556: LD_INT 0
35558: PUSH
35559: LD_INT 0
35561: PUSH
35562: EMPTY
35563: LIST
35564: LIST
35565: PUSH
35566: LD_INT 0
35568: PUSH
35569: LD_INT 1
35571: NEG
35572: PUSH
35573: EMPTY
35574: LIST
35575: LIST
35576: PUSH
35577: LD_INT 1
35579: PUSH
35580: LD_INT 0
35582: PUSH
35583: EMPTY
35584: LIST
35585: LIST
35586: PUSH
35587: LD_INT 1
35589: PUSH
35590: LD_INT 1
35592: PUSH
35593: EMPTY
35594: LIST
35595: LIST
35596: PUSH
35597: LD_INT 0
35599: PUSH
35600: LD_INT 1
35602: PUSH
35603: EMPTY
35604: LIST
35605: LIST
35606: PUSH
35607: LD_INT 1
35609: NEG
35610: PUSH
35611: LD_INT 0
35613: PUSH
35614: EMPTY
35615: LIST
35616: LIST
35617: PUSH
35618: LD_INT 1
35620: NEG
35621: PUSH
35622: LD_INT 1
35624: NEG
35625: PUSH
35626: EMPTY
35627: LIST
35628: LIST
35629: PUSH
35630: LD_INT 1
35632: NEG
35633: PUSH
35634: LD_INT 2
35636: NEG
35637: PUSH
35638: EMPTY
35639: LIST
35640: LIST
35641: PUSH
35642: LD_INT 0
35644: PUSH
35645: LD_INT 2
35647: NEG
35648: PUSH
35649: EMPTY
35650: LIST
35651: LIST
35652: PUSH
35653: LD_INT 1
35655: PUSH
35656: LD_INT 1
35658: NEG
35659: PUSH
35660: EMPTY
35661: LIST
35662: LIST
35663: PUSH
35664: LD_INT 2
35666: PUSH
35667: LD_INT 0
35669: PUSH
35670: EMPTY
35671: LIST
35672: LIST
35673: PUSH
35674: LD_INT 2
35676: PUSH
35677: LD_INT 1
35679: PUSH
35680: EMPTY
35681: LIST
35682: LIST
35683: PUSH
35684: LD_INT 2
35686: PUSH
35687: LD_INT 2
35689: PUSH
35690: EMPTY
35691: LIST
35692: LIST
35693: PUSH
35694: LD_INT 1
35696: PUSH
35697: LD_INT 2
35699: PUSH
35700: EMPTY
35701: LIST
35702: LIST
35703: PUSH
35704: LD_INT 0
35706: PUSH
35707: LD_INT 2
35709: PUSH
35710: EMPTY
35711: LIST
35712: LIST
35713: PUSH
35714: LD_INT 1
35716: NEG
35717: PUSH
35718: LD_INT 1
35720: PUSH
35721: EMPTY
35722: LIST
35723: LIST
35724: PUSH
35725: LD_INT 2
35727: NEG
35728: PUSH
35729: LD_INT 0
35731: PUSH
35732: EMPTY
35733: LIST
35734: LIST
35735: PUSH
35736: LD_INT 2
35738: NEG
35739: PUSH
35740: LD_INT 1
35742: NEG
35743: PUSH
35744: EMPTY
35745: LIST
35746: LIST
35747: PUSH
35748: LD_INT 2
35750: NEG
35751: PUSH
35752: LD_INT 2
35754: NEG
35755: PUSH
35756: EMPTY
35757: LIST
35758: LIST
35759: PUSH
35760: EMPTY
35761: LIST
35762: LIST
35763: LIST
35764: LIST
35765: LIST
35766: LIST
35767: LIST
35768: LIST
35769: LIST
35770: LIST
35771: LIST
35772: LIST
35773: LIST
35774: LIST
35775: LIST
35776: LIST
35777: LIST
35778: LIST
35779: LIST
35780: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35781: LD_ADDR_VAR 0 19
35785: PUSH
35786: LD_INT 0
35788: PUSH
35789: LD_INT 0
35791: PUSH
35792: EMPTY
35793: LIST
35794: LIST
35795: PUSH
35796: LD_INT 0
35798: PUSH
35799: LD_INT 1
35801: NEG
35802: PUSH
35803: EMPTY
35804: LIST
35805: LIST
35806: PUSH
35807: LD_INT 1
35809: PUSH
35810: LD_INT 0
35812: PUSH
35813: EMPTY
35814: LIST
35815: LIST
35816: PUSH
35817: LD_INT 1
35819: PUSH
35820: LD_INT 1
35822: PUSH
35823: EMPTY
35824: LIST
35825: LIST
35826: PUSH
35827: LD_INT 0
35829: PUSH
35830: LD_INT 1
35832: PUSH
35833: EMPTY
35834: LIST
35835: LIST
35836: PUSH
35837: LD_INT 1
35839: NEG
35840: PUSH
35841: LD_INT 0
35843: PUSH
35844: EMPTY
35845: LIST
35846: LIST
35847: PUSH
35848: LD_INT 1
35850: NEG
35851: PUSH
35852: LD_INT 1
35854: NEG
35855: PUSH
35856: EMPTY
35857: LIST
35858: LIST
35859: PUSH
35860: LD_INT 1
35862: NEG
35863: PUSH
35864: LD_INT 2
35866: NEG
35867: PUSH
35868: EMPTY
35869: LIST
35870: LIST
35871: PUSH
35872: LD_INT 0
35874: PUSH
35875: LD_INT 2
35877: NEG
35878: PUSH
35879: EMPTY
35880: LIST
35881: LIST
35882: PUSH
35883: LD_INT 1
35885: PUSH
35886: LD_INT 1
35888: NEG
35889: PUSH
35890: EMPTY
35891: LIST
35892: LIST
35893: PUSH
35894: LD_INT 2
35896: PUSH
35897: LD_INT 0
35899: PUSH
35900: EMPTY
35901: LIST
35902: LIST
35903: PUSH
35904: LD_INT 2
35906: PUSH
35907: LD_INT 1
35909: PUSH
35910: EMPTY
35911: LIST
35912: LIST
35913: PUSH
35914: LD_INT 2
35916: PUSH
35917: LD_INT 2
35919: PUSH
35920: EMPTY
35921: LIST
35922: LIST
35923: PUSH
35924: LD_INT 1
35926: PUSH
35927: LD_INT 2
35929: PUSH
35930: EMPTY
35931: LIST
35932: LIST
35933: PUSH
35934: LD_INT 0
35936: PUSH
35937: LD_INT 2
35939: PUSH
35940: EMPTY
35941: LIST
35942: LIST
35943: PUSH
35944: LD_INT 1
35946: NEG
35947: PUSH
35948: LD_INT 1
35950: PUSH
35951: EMPTY
35952: LIST
35953: LIST
35954: PUSH
35955: LD_INT 2
35957: NEG
35958: PUSH
35959: LD_INT 0
35961: PUSH
35962: EMPTY
35963: LIST
35964: LIST
35965: PUSH
35966: LD_INT 2
35968: NEG
35969: PUSH
35970: LD_INT 1
35972: NEG
35973: PUSH
35974: EMPTY
35975: LIST
35976: LIST
35977: PUSH
35978: LD_INT 2
35980: NEG
35981: PUSH
35982: LD_INT 2
35984: NEG
35985: PUSH
35986: EMPTY
35987: LIST
35988: LIST
35989: PUSH
35990: EMPTY
35991: LIST
35992: LIST
35993: LIST
35994: LIST
35995: LIST
35996: LIST
35997: LIST
35998: LIST
35999: LIST
36000: LIST
36001: LIST
36002: LIST
36003: LIST
36004: LIST
36005: LIST
36006: LIST
36007: LIST
36008: LIST
36009: LIST
36010: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36011: LD_ADDR_VAR 0 20
36015: PUSH
36016: LD_INT 0
36018: PUSH
36019: LD_INT 0
36021: PUSH
36022: EMPTY
36023: LIST
36024: LIST
36025: PUSH
36026: LD_INT 0
36028: PUSH
36029: LD_INT 1
36031: NEG
36032: PUSH
36033: EMPTY
36034: LIST
36035: LIST
36036: PUSH
36037: LD_INT 1
36039: PUSH
36040: LD_INT 0
36042: PUSH
36043: EMPTY
36044: LIST
36045: LIST
36046: PUSH
36047: LD_INT 1
36049: PUSH
36050: LD_INT 1
36052: PUSH
36053: EMPTY
36054: LIST
36055: LIST
36056: PUSH
36057: LD_INT 0
36059: PUSH
36060: LD_INT 1
36062: PUSH
36063: EMPTY
36064: LIST
36065: LIST
36066: PUSH
36067: LD_INT 1
36069: NEG
36070: PUSH
36071: LD_INT 0
36073: PUSH
36074: EMPTY
36075: LIST
36076: LIST
36077: PUSH
36078: LD_INT 1
36080: NEG
36081: PUSH
36082: LD_INT 1
36084: NEG
36085: PUSH
36086: EMPTY
36087: LIST
36088: LIST
36089: PUSH
36090: LD_INT 1
36092: NEG
36093: PUSH
36094: LD_INT 2
36096: NEG
36097: PUSH
36098: EMPTY
36099: LIST
36100: LIST
36101: PUSH
36102: LD_INT 0
36104: PUSH
36105: LD_INT 2
36107: NEG
36108: PUSH
36109: EMPTY
36110: LIST
36111: LIST
36112: PUSH
36113: LD_INT 1
36115: PUSH
36116: LD_INT 1
36118: NEG
36119: PUSH
36120: EMPTY
36121: LIST
36122: LIST
36123: PUSH
36124: LD_INT 2
36126: PUSH
36127: LD_INT 0
36129: PUSH
36130: EMPTY
36131: LIST
36132: LIST
36133: PUSH
36134: LD_INT 2
36136: PUSH
36137: LD_INT 1
36139: PUSH
36140: EMPTY
36141: LIST
36142: LIST
36143: PUSH
36144: LD_INT 2
36146: PUSH
36147: LD_INT 2
36149: PUSH
36150: EMPTY
36151: LIST
36152: LIST
36153: PUSH
36154: LD_INT 1
36156: PUSH
36157: LD_INT 2
36159: PUSH
36160: EMPTY
36161: LIST
36162: LIST
36163: PUSH
36164: LD_INT 0
36166: PUSH
36167: LD_INT 2
36169: PUSH
36170: EMPTY
36171: LIST
36172: LIST
36173: PUSH
36174: LD_INT 1
36176: NEG
36177: PUSH
36178: LD_INT 1
36180: PUSH
36181: EMPTY
36182: LIST
36183: LIST
36184: PUSH
36185: LD_INT 2
36187: NEG
36188: PUSH
36189: LD_INT 0
36191: PUSH
36192: EMPTY
36193: LIST
36194: LIST
36195: PUSH
36196: LD_INT 2
36198: NEG
36199: PUSH
36200: LD_INT 1
36202: NEG
36203: PUSH
36204: EMPTY
36205: LIST
36206: LIST
36207: PUSH
36208: LD_INT 2
36210: NEG
36211: PUSH
36212: LD_INT 2
36214: NEG
36215: PUSH
36216: EMPTY
36217: LIST
36218: LIST
36219: PUSH
36220: EMPTY
36221: LIST
36222: LIST
36223: LIST
36224: LIST
36225: LIST
36226: LIST
36227: LIST
36228: LIST
36229: LIST
36230: LIST
36231: LIST
36232: LIST
36233: LIST
36234: LIST
36235: LIST
36236: LIST
36237: LIST
36238: LIST
36239: LIST
36240: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36241: LD_ADDR_VAR 0 21
36245: PUSH
36246: LD_INT 0
36248: PUSH
36249: LD_INT 0
36251: PUSH
36252: EMPTY
36253: LIST
36254: LIST
36255: PUSH
36256: LD_INT 0
36258: PUSH
36259: LD_INT 1
36261: NEG
36262: PUSH
36263: EMPTY
36264: LIST
36265: LIST
36266: PUSH
36267: LD_INT 1
36269: PUSH
36270: LD_INT 0
36272: PUSH
36273: EMPTY
36274: LIST
36275: LIST
36276: PUSH
36277: LD_INT 1
36279: PUSH
36280: LD_INT 1
36282: PUSH
36283: EMPTY
36284: LIST
36285: LIST
36286: PUSH
36287: LD_INT 0
36289: PUSH
36290: LD_INT 1
36292: PUSH
36293: EMPTY
36294: LIST
36295: LIST
36296: PUSH
36297: LD_INT 1
36299: NEG
36300: PUSH
36301: LD_INT 0
36303: PUSH
36304: EMPTY
36305: LIST
36306: LIST
36307: PUSH
36308: LD_INT 1
36310: NEG
36311: PUSH
36312: LD_INT 1
36314: NEG
36315: PUSH
36316: EMPTY
36317: LIST
36318: LIST
36319: PUSH
36320: LD_INT 1
36322: NEG
36323: PUSH
36324: LD_INT 2
36326: NEG
36327: PUSH
36328: EMPTY
36329: LIST
36330: LIST
36331: PUSH
36332: LD_INT 0
36334: PUSH
36335: LD_INT 2
36337: NEG
36338: PUSH
36339: EMPTY
36340: LIST
36341: LIST
36342: PUSH
36343: LD_INT 1
36345: PUSH
36346: LD_INT 1
36348: NEG
36349: PUSH
36350: EMPTY
36351: LIST
36352: LIST
36353: PUSH
36354: LD_INT 2
36356: PUSH
36357: LD_INT 0
36359: PUSH
36360: EMPTY
36361: LIST
36362: LIST
36363: PUSH
36364: LD_INT 2
36366: PUSH
36367: LD_INT 1
36369: PUSH
36370: EMPTY
36371: LIST
36372: LIST
36373: PUSH
36374: LD_INT 2
36376: PUSH
36377: LD_INT 2
36379: PUSH
36380: EMPTY
36381: LIST
36382: LIST
36383: PUSH
36384: LD_INT 1
36386: PUSH
36387: LD_INT 2
36389: PUSH
36390: EMPTY
36391: LIST
36392: LIST
36393: PUSH
36394: LD_INT 0
36396: PUSH
36397: LD_INT 2
36399: PUSH
36400: EMPTY
36401: LIST
36402: LIST
36403: PUSH
36404: LD_INT 1
36406: NEG
36407: PUSH
36408: LD_INT 1
36410: PUSH
36411: EMPTY
36412: LIST
36413: LIST
36414: PUSH
36415: LD_INT 2
36417: NEG
36418: PUSH
36419: LD_INT 0
36421: PUSH
36422: EMPTY
36423: LIST
36424: LIST
36425: PUSH
36426: LD_INT 2
36428: NEG
36429: PUSH
36430: LD_INT 1
36432: NEG
36433: PUSH
36434: EMPTY
36435: LIST
36436: LIST
36437: PUSH
36438: LD_INT 2
36440: NEG
36441: PUSH
36442: LD_INT 2
36444: NEG
36445: PUSH
36446: EMPTY
36447: LIST
36448: LIST
36449: PUSH
36450: EMPTY
36451: LIST
36452: LIST
36453: LIST
36454: LIST
36455: LIST
36456: LIST
36457: LIST
36458: LIST
36459: LIST
36460: LIST
36461: LIST
36462: LIST
36463: LIST
36464: LIST
36465: LIST
36466: LIST
36467: LIST
36468: LIST
36469: LIST
36470: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36471: LD_ADDR_VAR 0 22
36475: PUSH
36476: LD_INT 0
36478: PUSH
36479: LD_INT 0
36481: PUSH
36482: EMPTY
36483: LIST
36484: LIST
36485: PUSH
36486: LD_INT 0
36488: PUSH
36489: LD_INT 1
36491: NEG
36492: PUSH
36493: EMPTY
36494: LIST
36495: LIST
36496: PUSH
36497: LD_INT 1
36499: PUSH
36500: LD_INT 0
36502: PUSH
36503: EMPTY
36504: LIST
36505: LIST
36506: PUSH
36507: LD_INT 1
36509: PUSH
36510: LD_INT 1
36512: PUSH
36513: EMPTY
36514: LIST
36515: LIST
36516: PUSH
36517: LD_INT 0
36519: PUSH
36520: LD_INT 1
36522: PUSH
36523: EMPTY
36524: LIST
36525: LIST
36526: PUSH
36527: LD_INT 1
36529: NEG
36530: PUSH
36531: LD_INT 0
36533: PUSH
36534: EMPTY
36535: LIST
36536: LIST
36537: PUSH
36538: LD_INT 1
36540: NEG
36541: PUSH
36542: LD_INT 1
36544: NEG
36545: PUSH
36546: EMPTY
36547: LIST
36548: LIST
36549: PUSH
36550: LD_INT 1
36552: NEG
36553: PUSH
36554: LD_INT 2
36556: NEG
36557: PUSH
36558: EMPTY
36559: LIST
36560: LIST
36561: PUSH
36562: LD_INT 0
36564: PUSH
36565: LD_INT 2
36567: NEG
36568: PUSH
36569: EMPTY
36570: LIST
36571: LIST
36572: PUSH
36573: LD_INT 1
36575: PUSH
36576: LD_INT 1
36578: NEG
36579: PUSH
36580: EMPTY
36581: LIST
36582: LIST
36583: PUSH
36584: LD_INT 2
36586: PUSH
36587: LD_INT 0
36589: PUSH
36590: EMPTY
36591: LIST
36592: LIST
36593: PUSH
36594: LD_INT 2
36596: PUSH
36597: LD_INT 1
36599: PUSH
36600: EMPTY
36601: LIST
36602: LIST
36603: PUSH
36604: LD_INT 2
36606: PUSH
36607: LD_INT 2
36609: PUSH
36610: EMPTY
36611: LIST
36612: LIST
36613: PUSH
36614: LD_INT 1
36616: PUSH
36617: LD_INT 2
36619: PUSH
36620: EMPTY
36621: LIST
36622: LIST
36623: PUSH
36624: LD_INT 0
36626: PUSH
36627: LD_INT 2
36629: PUSH
36630: EMPTY
36631: LIST
36632: LIST
36633: PUSH
36634: LD_INT 1
36636: NEG
36637: PUSH
36638: LD_INT 1
36640: PUSH
36641: EMPTY
36642: LIST
36643: LIST
36644: PUSH
36645: LD_INT 2
36647: NEG
36648: PUSH
36649: LD_INT 0
36651: PUSH
36652: EMPTY
36653: LIST
36654: LIST
36655: PUSH
36656: LD_INT 2
36658: NEG
36659: PUSH
36660: LD_INT 1
36662: NEG
36663: PUSH
36664: EMPTY
36665: LIST
36666: LIST
36667: PUSH
36668: LD_INT 2
36670: NEG
36671: PUSH
36672: LD_INT 2
36674: NEG
36675: PUSH
36676: EMPTY
36677: LIST
36678: LIST
36679: PUSH
36680: EMPTY
36681: LIST
36682: LIST
36683: LIST
36684: LIST
36685: LIST
36686: LIST
36687: LIST
36688: LIST
36689: LIST
36690: LIST
36691: LIST
36692: LIST
36693: LIST
36694: LIST
36695: LIST
36696: LIST
36697: LIST
36698: LIST
36699: LIST
36700: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
36701: LD_ADDR_VAR 0 23
36705: PUSH
36706: LD_INT 0
36708: PUSH
36709: LD_INT 0
36711: PUSH
36712: EMPTY
36713: LIST
36714: LIST
36715: PUSH
36716: LD_INT 0
36718: PUSH
36719: LD_INT 1
36721: NEG
36722: PUSH
36723: EMPTY
36724: LIST
36725: LIST
36726: PUSH
36727: LD_INT 1
36729: PUSH
36730: LD_INT 0
36732: PUSH
36733: EMPTY
36734: LIST
36735: LIST
36736: PUSH
36737: LD_INT 1
36739: PUSH
36740: LD_INT 1
36742: PUSH
36743: EMPTY
36744: LIST
36745: LIST
36746: PUSH
36747: LD_INT 0
36749: PUSH
36750: LD_INT 1
36752: PUSH
36753: EMPTY
36754: LIST
36755: LIST
36756: PUSH
36757: LD_INT 1
36759: NEG
36760: PUSH
36761: LD_INT 0
36763: PUSH
36764: EMPTY
36765: LIST
36766: LIST
36767: PUSH
36768: LD_INT 1
36770: NEG
36771: PUSH
36772: LD_INT 1
36774: NEG
36775: PUSH
36776: EMPTY
36777: LIST
36778: LIST
36779: PUSH
36780: LD_INT 1
36782: NEG
36783: PUSH
36784: LD_INT 2
36786: NEG
36787: PUSH
36788: EMPTY
36789: LIST
36790: LIST
36791: PUSH
36792: LD_INT 0
36794: PUSH
36795: LD_INT 2
36797: NEG
36798: PUSH
36799: EMPTY
36800: LIST
36801: LIST
36802: PUSH
36803: LD_INT 1
36805: PUSH
36806: LD_INT 1
36808: NEG
36809: PUSH
36810: EMPTY
36811: LIST
36812: LIST
36813: PUSH
36814: LD_INT 2
36816: PUSH
36817: LD_INT 0
36819: PUSH
36820: EMPTY
36821: LIST
36822: LIST
36823: PUSH
36824: LD_INT 2
36826: PUSH
36827: LD_INT 1
36829: PUSH
36830: EMPTY
36831: LIST
36832: LIST
36833: PUSH
36834: LD_INT 2
36836: PUSH
36837: LD_INT 2
36839: PUSH
36840: EMPTY
36841: LIST
36842: LIST
36843: PUSH
36844: LD_INT 1
36846: PUSH
36847: LD_INT 2
36849: PUSH
36850: EMPTY
36851: LIST
36852: LIST
36853: PUSH
36854: LD_INT 0
36856: PUSH
36857: LD_INT 2
36859: PUSH
36860: EMPTY
36861: LIST
36862: LIST
36863: PUSH
36864: LD_INT 1
36866: NEG
36867: PUSH
36868: LD_INT 1
36870: PUSH
36871: EMPTY
36872: LIST
36873: LIST
36874: PUSH
36875: LD_INT 2
36877: NEG
36878: PUSH
36879: LD_INT 0
36881: PUSH
36882: EMPTY
36883: LIST
36884: LIST
36885: PUSH
36886: LD_INT 2
36888: NEG
36889: PUSH
36890: LD_INT 1
36892: NEG
36893: PUSH
36894: EMPTY
36895: LIST
36896: LIST
36897: PUSH
36898: LD_INT 2
36900: NEG
36901: PUSH
36902: LD_INT 2
36904: NEG
36905: PUSH
36906: EMPTY
36907: LIST
36908: LIST
36909: PUSH
36910: LD_INT 2
36912: NEG
36913: PUSH
36914: LD_INT 3
36916: NEG
36917: PUSH
36918: EMPTY
36919: LIST
36920: LIST
36921: PUSH
36922: LD_INT 1
36924: NEG
36925: PUSH
36926: LD_INT 3
36928: NEG
36929: PUSH
36930: EMPTY
36931: LIST
36932: LIST
36933: PUSH
36934: LD_INT 1
36936: PUSH
36937: LD_INT 2
36939: NEG
36940: PUSH
36941: EMPTY
36942: LIST
36943: LIST
36944: PUSH
36945: LD_INT 2
36947: PUSH
36948: LD_INT 1
36950: NEG
36951: PUSH
36952: EMPTY
36953: LIST
36954: LIST
36955: PUSH
36956: EMPTY
36957: LIST
36958: LIST
36959: LIST
36960: LIST
36961: LIST
36962: LIST
36963: LIST
36964: LIST
36965: LIST
36966: LIST
36967: LIST
36968: LIST
36969: LIST
36970: LIST
36971: LIST
36972: LIST
36973: LIST
36974: LIST
36975: LIST
36976: LIST
36977: LIST
36978: LIST
36979: LIST
36980: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
36981: LD_ADDR_VAR 0 24
36985: PUSH
36986: LD_INT 0
36988: PUSH
36989: LD_INT 0
36991: PUSH
36992: EMPTY
36993: LIST
36994: LIST
36995: PUSH
36996: LD_INT 0
36998: PUSH
36999: LD_INT 1
37001: NEG
37002: PUSH
37003: EMPTY
37004: LIST
37005: LIST
37006: PUSH
37007: LD_INT 1
37009: PUSH
37010: LD_INT 0
37012: PUSH
37013: EMPTY
37014: LIST
37015: LIST
37016: PUSH
37017: LD_INT 1
37019: PUSH
37020: LD_INT 1
37022: PUSH
37023: EMPTY
37024: LIST
37025: LIST
37026: PUSH
37027: LD_INT 0
37029: PUSH
37030: LD_INT 1
37032: PUSH
37033: EMPTY
37034: LIST
37035: LIST
37036: PUSH
37037: LD_INT 1
37039: NEG
37040: PUSH
37041: LD_INT 0
37043: PUSH
37044: EMPTY
37045: LIST
37046: LIST
37047: PUSH
37048: LD_INT 1
37050: NEG
37051: PUSH
37052: LD_INT 1
37054: NEG
37055: PUSH
37056: EMPTY
37057: LIST
37058: LIST
37059: PUSH
37060: LD_INT 1
37062: NEG
37063: PUSH
37064: LD_INT 2
37066: NEG
37067: PUSH
37068: EMPTY
37069: LIST
37070: LIST
37071: PUSH
37072: LD_INT 0
37074: PUSH
37075: LD_INT 2
37077: NEG
37078: PUSH
37079: EMPTY
37080: LIST
37081: LIST
37082: PUSH
37083: LD_INT 1
37085: PUSH
37086: LD_INT 1
37088: NEG
37089: PUSH
37090: EMPTY
37091: LIST
37092: LIST
37093: PUSH
37094: LD_INT 2
37096: PUSH
37097: LD_INT 0
37099: PUSH
37100: EMPTY
37101: LIST
37102: LIST
37103: PUSH
37104: LD_INT 2
37106: PUSH
37107: LD_INT 1
37109: PUSH
37110: EMPTY
37111: LIST
37112: LIST
37113: PUSH
37114: LD_INT 2
37116: PUSH
37117: LD_INT 2
37119: PUSH
37120: EMPTY
37121: LIST
37122: LIST
37123: PUSH
37124: LD_INT 1
37126: PUSH
37127: LD_INT 2
37129: PUSH
37130: EMPTY
37131: LIST
37132: LIST
37133: PUSH
37134: LD_INT 0
37136: PUSH
37137: LD_INT 2
37139: PUSH
37140: EMPTY
37141: LIST
37142: LIST
37143: PUSH
37144: LD_INT 1
37146: NEG
37147: PUSH
37148: LD_INT 1
37150: PUSH
37151: EMPTY
37152: LIST
37153: LIST
37154: PUSH
37155: LD_INT 2
37157: NEG
37158: PUSH
37159: LD_INT 0
37161: PUSH
37162: EMPTY
37163: LIST
37164: LIST
37165: PUSH
37166: LD_INT 2
37168: NEG
37169: PUSH
37170: LD_INT 1
37172: NEG
37173: PUSH
37174: EMPTY
37175: LIST
37176: LIST
37177: PUSH
37178: LD_INT 2
37180: NEG
37181: PUSH
37182: LD_INT 2
37184: NEG
37185: PUSH
37186: EMPTY
37187: LIST
37188: LIST
37189: PUSH
37190: LD_INT 1
37192: PUSH
37193: LD_INT 2
37195: NEG
37196: PUSH
37197: EMPTY
37198: LIST
37199: LIST
37200: PUSH
37201: LD_INT 2
37203: PUSH
37204: LD_INT 1
37206: NEG
37207: PUSH
37208: EMPTY
37209: LIST
37210: LIST
37211: PUSH
37212: LD_INT 3
37214: PUSH
37215: LD_INT 1
37217: PUSH
37218: EMPTY
37219: LIST
37220: LIST
37221: PUSH
37222: LD_INT 3
37224: PUSH
37225: LD_INT 2
37227: PUSH
37228: EMPTY
37229: LIST
37230: LIST
37231: PUSH
37232: EMPTY
37233: LIST
37234: LIST
37235: LIST
37236: LIST
37237: LIST
37238: LIST
37239: LIST
37240: LIST
37241: LIST
37242: LIST
37243: LIST
37244: LIST
37245: LIST
37246: LIST
37247: LIST
37248: LIST
37249: LIST
37250: LIST
37251: LIST
37252: LIST
37253: LIST
37254: LIST
37255: LIST
37256: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
37257: LD_ADDR_VAR 0 25
37261: PUSH
37262: LD_INT 0
37264: PUSH
37265: LD_INT 0
37267: PUSH
37268: EMPTY
37269: LIST
37270: LIST
37271: PUSH
37272: LD_INT 0
37274: PUSH
37275: LD_INT 1
37277: NEG
37278: PUSH
37279: EMPTY
37280: LIST
37281: LIST
37282: PUSH
37283: LD_INT 1
37285: PUSH
37286: LD_INT 0
37288: PUSH
37289: EMPTY
37290: LIST
37291: LIST
37292: PUSH
37293: LD_INT 1
37295: PUSH
37296: LD_INT 1
37298: PUSH
37299: EMPTY
37300: LIST
37301: LIST
37302: PUSH
37303: LD_INT 0
37305: PUSH
37306: LD_INT 1
37308: PUSH
37309: EMPTY
37310: LIST
37311: LIST
37312: PUSH
37313: LD_INT 1
37315: NEG
37316: PUSH
37317: LD_INT 0
37319: PUSH
37320: EMPTY
37321: LIST
37322: LIST
37323: PUSH
37324: LD_INT 1
37326: NEG
37327: PUSH
37328: LD_INT 1
37330: NEG
37331: PUSH
37332: EMPTY
37333: LIST
37334: LIST
37335: PUSH
37336: LD_INT 1
37338: NEG
37339: PUSH
37340: LD_INT 2
37342: NEG
37343: PUSH
37344: EMPTY
37345: LIST
37346: LIST
37347: PUSH
37348: LD_INT 0
37350: PUSH
37351: LD_INT 2
37353: NEG
37354: PUSH
37355: EMPTY
37356: LIST
37357: LIST
37358: PUSH
37359: LD_INT 1
37361: PUSH
37362: LD_INT 1
37364: NEG
37365: PUSH
37366: EMPTY
37367: LIST
37368: LIST
37369: PUSH
37370: LD_INT 2
37372: PUSH
37373: LD_INT 0
37375: PUSH
37376: EMPTY
37377: LIST
37378: LIST
37379: PUSH
37380: LD_INT 2
37382: PUSH
37383: LD_INT 1
37385: PUSH
37386: EMPTY
37387: LIST
37388: LIST
37389: PUSH
37390: LD_INT 2
37392: PUSH
37393: LD_INT 2
37395: PUSH
37396: EMPTY
37397: LIST
37398: LIST
37399: PUSH
37400: LD_INT 1
37402: PUSH
37403: LD_INT 2
37405: PUSH
37406: EMPTY
37407: LIST
37408: LIST
37409: PUSH
37410: LD_INT 0
37412: PUSH
37413: LD_INT 2
37415: PUSH
37416: EMPTY
37417: LIST
37418: LIST
37419: PUSH
37420: LD_INT 1
37422: NEG
37423: PUSH
37424: LD_INT 1
37426: PUSH
37427: EMPTY
37428: LIST
37429: LIST
37430: PUSH
37431: LD_INT 2
37433: NEG
37434: PUSH
37435: LD_INT 0
37437: PUSH
37438: EMPTY
37439: LIST
37440: LIST
37441: PUSH
37442: LD_INT 2
37444: NEG
37445: PUSH
37446: LD_INT 1
37448: NEG
37449: PUSH
37450: EMPTY
37451: LIST
37452: LIST
37453: PUSH
37454: LD_INT 2
37456: NEG
37457: PUSH
37458: LD_INT 2
37460: NEG
37461: PUSH
37462: EMPTY
37463: LIST
37464: LIST
37465: PUSH
37466: LD_INT 3
37468: PUSH
37469: LD_INT 1
37471: PUSH
37472: EMPTY
37473: LIST
37474: LIST
37475: PUSH
37476: LD_INT 3
37478: PUSH
37479: LD_INT 2
37481: PUSH
37482: EMPTY
37483: LIST
37484: LIST
37485: PUSH
37486: LD_INT 2
37488: PUSH
37489: LD_INT 3
37491: PUSH
37492: EMPTY
37493: LIST
37494: LIST
37495: PUSH
37496: LD_INT 1
37498: PUSH
37499: LD_INT 3
37501: PUSH
37502: EMPTY
37503: LIST
37504: LIST
37505: PUSH
37506: EMPTY
37507: LIST
37508: LIST
37509: LIST
37510: LIST
37511: LIST
37512: LIST
37513: LIST
37514: LIST
37515: LIST
37516: LIST
37517: LIST
37518: LIST
37519: LIST
37520: LIST
37521: LIST
37522: LIST
37523: LIST
37524: LIST
37525: LIST
37526: LIST
37527: LIST
37528: LIST
37529: LIST
37530: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
37531: LD_ADDR_VAR 0 26
37535: PUSH
37536: LD_INT 0
37538: PUSH
37539: LD_INT 0
37541: PUSH
37542: EMPTY
37543: LIST
37544: LIST
37545: PUSH
37546: LD_INT 0
37548: PUSH
37549: LD_INT 1
37551: NEG
37552: PUSH
37553: EMPTY
37554: LIST
37555: LIST
37556: PUSH
37557: LD_INT 1
37559: PUSH
37560: LD_INT 0
37562: PUSH
37563: EMPTY
37564: LIST
37565: LIST
37566: PUSH
37567: LD_INT 1
37569: PUSH
37570: LD_INT 1
37572: PUSH
37573: EMPTY
37574: LIST
37575: LIST
37576: PUSH
37577: LD_INT 0
37579: PUSH
37580: LD_INT 1
37582: PUSH
37583: EMPTY
37584: LIST
37585: LIST
37586: PUSH
37587: LD_INT 1
37589: NEG
37590: PUSH
37591: LD_INT 0
37593: PUSH
37594: EMPTY
37595: LIST
37596: LIST
37597: PUSH
37598: LD_INT 1
37600: NEG
37601: PUSH
37602: LD_INT 1
37604: NEG
37605: PUSH
37606: EMPTY
37607: LIST
37608: LIST
37609: PUSH
37610: LD_INT 1
37612: NEG
37613: PUSH
37614: LD_INT 2
37616: NEG
37617: PUSH
37618: EMPTY
37619: LIST
37620: LIST
37621: PUSH
37622: LD_INT 0
37624: PUSH
37625: LD_INT 2
37627: NEG
37628: PUSH
37629: EMPTY
37630: LIST
37631: LIST
37632: PUSH
37633: LD_INT 1
37635: PUSH
37636: LD_INT 1
37638: NEG
37639: PUSH
37640: EMPTY
37641: LIST
37642: LIST
37643: PUSH
37644: LD_INT 2
37646: PUSH
37647: LD_INT 0
37649: PUSH
37650: EMPTY
37651: LIST
37652: LIST
37653: PUSH
37654: LD_INT 2
37656: PUSH
37657: LD_INT 1
37659: PUSH
37660: EMPTY
37661: LIST
37662: LIST
37663: PUSH
37664: LD_INT 2
37666: PUSH
37667: LD_INT 2
37669: PUSH
37670: EMPTY
37671: LIST
37672: LIST
37673: PUSH
37674: LD_INT 1
37676: PUSH
37677: LD_INT 2
37679: PUSH
37680: EMPTY
37681: LIST
37682: LIST
37683: PUSH
37684: LD_INT 0
37686: PUSH
37687: LD_INT 2
37689: PUSH
37690: EMPTY
37691: LIST
37692: LIST
37693: PUSH
37694: LD_INT 1
37696: NEG
37697: PUSH
37698: LD_INT 1
37700: PUSH
37701: EMPTY
37702: LIST
37703: LIST
37704: PUSH
37705: LD_INT 2
37707: NEG
37708: PUSH
37709: LD_INT 0
37711: PUSH
37712: EMPTY
37713: LIST
37714: LIST
37715: PUSH
37716: LD_INT 2
37718: NEG
37719: PUSH
37720: LD_INT 1
37722: NEG
37723: PUSH
37724: EMPTY
37725: LIST
37726: LIST
37727: PUSH
37728: LD_INT 2
37730: NEG
37731: PUSH
37732: LD_INT 2
37734: NEG
37735: PUSH
37736: EMPTY
37737: LIST
37738: LIST
37739: PUSH
37740: LD_INT 2
37742: PUSH
37743: LD_INT 3
37745: PUSH
37746: EMPTY
37747: LIST
37748: LIST
37749: PUSH
37750: LD_INT 1
37752: PUSH
37753: LD_INT 3
37755: PUSH
37756: EMPTY
37757: LIST
37758: LIST
37759: PUSH
37760: LD_INT 1
37762: NEG
37763: PUSH
37764: LD_INT 2
37766: PUSH
37767: EMPTY
37768: LIST
37769: LIST
37770: PUSH
37771: LD_INT 2
37773: NEG
37774: PUSH
37775: LD_INT 1
37777: PUSH
37778: EMPTY
37779: LIST
37780: LIST
37781: PUSH
37782: EMPTY
37783: LIST
37784: LIST
37785: LIST
37786: LIST
37787: LIST
37788: LIST
37789: LIST
37790: LIST
37791: LIST
37792: LIST
37793: LIST
37794: LIST
37795: LIST
37796: LIST
37797: LIST
37798: LIST
37799: LIST
37800: LIST
37801: LIST
37802: LIST
37803: LIST
37804: LIST
37805: LIST
37806: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
37807: LD_ADDR_VAR 0 27
37811: PUSH
37812: LD_INT 0
37814: PUSH
37815: LD_INT 0
37817: PUSH
37818: EMPTY
37819: LIST
37820: LIST
37821: PUSH
37822: LD_INT 0
37824: PUSH
37825: LD_INT 1
37827: NEG
37828: PUSH
37829: EMPTY
37830: LIST
37831: LIST
37832: PUSH
37833: LD_INT 1
37835: PUSH
37836: LD_INT 0
37838: PUSH
37839: EMPTY
37840: LIST
37841: LIST
37842: PUSH
37843: LD_INT 1
37845: PUSH
37846: LD_INT 1
37848: PUSH
37849: EMPTY
37850: LIST
37851: LIST
37852: PUSH
37853: LD_INT 0
37855: PUSH
37856: LD_INT 1
37858: PUSH
37859: EMPTY
37860: LIST
37861: LIST
37862: PUSH
37863: LD_INT 1
37865: NEG
37866: PUSH
37867: LD_INT 0
37869: PUSH
37870: EMPTY
37871: LIST
37872: LIST
37873: PUSH
37874: LD_INT 1
37876: NEG
37877: PUSH
37878: LD_INT 1
37880: NEG
37881: PUSH
37882: EMPTY
37883: LIST
37884: LIST
37885: PUSH
37886: LD_INT 1
37888: NEG
37889: PUSH
37890: LD_INT 2
37892: NEG
37893: PUSH
37894: EMPTY
37895: LIST
37896: LIST
37897: PUSH
37898: LD_INT 0
37900: PUSH
37901: LD_INT 2
37903: NEG
37904: PUSH
37905: EMPTY
37906: LIST
37907: LIST
37908: PUSH
37909: LD_INT 1
37911: PUSH
37912: LD_INT 1
37914: NEG
37915: PUSH
37916: EMPTY
37917: LIST
37918: LIST
37919: PUSH
37920: LD_INT 2
37922: PUSH
37923: LD_INT 0
37925: PUSH
37926: EMPTY
37927: LIST
37928: LIST
37929: PUSH
37930: LD_INT 2
37932: PUSH
37933: LD_INT 1
37935: PUSH
37936: EMPTY
37937: LIST
37938: LIST
37939: PUSH
37940: LD_INT 2
37942: PUSH
37943: LD_INT 2
37945: PUSH
37946: EMPTY
37947: LIST
37948: LIST
37949: PUSH
37950: LD_INT 1
37952: PUSH
37953: LD_INT 2
37955: PUSH
37956: EMPTY
37957: LIST
37958: LIST
37959: PUSH
37960: LD_INT 0
37962: PUSH
37963: LD_INT 2
37965: PUSH
37966: EMPTY
37967: LIST
37968: LIST
37969: PUSH
37970: LD_INT 1
37972: NEG
37973: PUSH
37974: LD_INT 1
37976: PUSH
37977: EMPTY
37978: LIST
37979: LIST
37980: PUSH
37981: LD_INT 2
37983: NEG
37984: PUSH
37985: LD_INT 0
37987: PUSH
37988: EMPTY
37989: LIST
37990: LIST
37991: PUSH
37992: LD_INT 2
37994: NEG
37995: PUSH
37996: LD_INT 1
37998: NEG
37999: PUSH
38000: EMPTY
38001: LIST
38002: LIST
38003: PUSH
38004: LD_INT 2
38006: NEG
38007: PUSH
38008: LD_INT 2
38010: NEG
38011: PUSH
38012: EMPTY
38013: LIST
38014: LIST
38015: PUSH
38016: LD_INT 1
38018: NEG
38019: PUSH
38020: LD_INT 2
38022: PUSH
38023: EMPTY
38024: LIST
38025: LIST
38026: PUSH
38027: LD_INT 2
38029: NEG
38030: PUSH
38031: LD_INT 1
38033: PUSH
38034: EMPTY
38035: LIST
38036: LIST
38037: PUSH
38038: LD_INT 3
38040: NEG
38041: PUSH
38042: LD_INT 1
38044: NEG
38045: PUSH
38046: EMPTY
38047: LIST
38048: LIST
38049: PUSH
38050: LD_INT 3
38052: NEG
38053: PUSH
38054: LD_INT 2
38056: NEG
38057: PUSH
38058: EMPTY
38059: LIST
38060: LIST
38061: PUSH
38062: EMPTY
38063: LIST
38064: LIST
38065: LIST
38066: LIST
38067: LIST
38068: LIST
38069: LIST
38070: LIST
38071: LIST
38072: LIST
38073: LIST
38074: LIST
38075: LIST
38076: LIST
38077: LIST
38078: LIST
38079: LIST
38080: LIST
38081: LIST
38082: LIST
38083: LIST
38084: LIST
38085: LIST
38086: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38087: LD_ADDR_VAR 0 28
38091: PUSH
38092: LD_INT 0
38094: PUSH
38095: LD_INT 0
38097: PUSH
38098: EMPTY
38099: LIST
38100: LIST
38101: PUSH
38102: LD_INT 0
38104: PUSH
38105: LD_INT 1
38107: NEG
38108: PUSH
38109: EMPTY
38110: LIST
38111: LIST
38112: PUSH
38113: LD_INT 1
38115: PUSH
38116: LD_INT 0
38118: PUSH
38119: EMPTY
38120: LIST
38121: LIST
38122: PUSH
38123: LD_INT 1
38125: PUSH
38126: LD_INT 1
38128: PUSH
38129: EMPTY
38130: LIST
38131: LIST
38132: PUSH
38133: LD_INT 0
38135: PUSH
38136: LD_INT 1
38138: PUSH
38139: EMPTY
38140: LIST
38141: LIST
38142: PUSH
38143: LD_INT 1
38145: NEG
38146: PUSH
38147: LD_INT 0
38149: PUSH
38150: EMPTY
38151: LIST
38152: LIST
38153: PUSH
38154: LD_INT 1
38156: NEG
38157: PUSH
38158: LD_INT 1
38160: NEG
38161: PUSH
38162: EMPTY
38163: LIST
38164: LIST
38165: PUSH
38166: LD_INT 1
38168: NEG
38169: PUSH
38170: LD_INT 2
38172: NEG
38173: PUSH
38174: EMPTY
38175: LIST
38176: LIST
38177: PUSH
38178: LD_INT 0
38180: PUSH
38181: LD_INT 2
38183: NEG
38184: PUSH
38185: EMPTY
38186: LIST
38187: LIST
38188: PUSH
38189: LD_INT 1
38191: PUSH
38192: LD_INT 1
38194: NEG
38195: PUSH
38196: EMPTY
38197: LIST
38198: LIST
38199: PUSH
38200: LD_INT 2
38202: PUSH
38203: LD_INT 0
38205: PUSH
38206: EMPTY
38207: LIST
38208: LIST
38209: PUSH
38210: LD_INT 2
38212: PUSH
38213: LD_INT 1
38215: PUSH
38216: EMPTY
38217: LIST
38218: LIST
38219: PUSH
38220: LD_INT 2
38222: PUSH
38223: LD_INT 2
38225: PUSH
38226: EMPTY
38227: LIST
38228: LIST
38229: PUSH
38230: LD_INT 1
38232: PUSH
38233: LD_INT 2
38235: PUSH
38236: EMPTY
38237: LIST
38238: LIST
38239: PUSH
38240: LD_INT 0
38242: PUSH
38243: LD_INT 2
38245: PUSH
38246: EMPTY
38247: LIST
38248: LIST
38249: PUSH
38250: LD_INT 1
38252: NEG
38253: PUSH
38254: LD_INT 1
38256: PUSH
38257: EMPTY
38258: LIST
38259: LIST
38260: PUSH
38261: LD_INT 2
38263: NEG
38264: PUSH
38265: LD_INT 0
38267: PUSH
38268: EMPTY
38269: LIST
38270: LIST
38271: PUSH
38272: LD_INT 2
38274: NEG
38275: PUSH
38276: LD_INT 1
38278: NEG
38279: PUSH
38280: EMPTY
38281: LIST
38282: LIST
38283: PUSH
38284: LD_INT 2
38286: NEG
38287: PUSH
38288: LD_INT 2
38290: NEG
38291: PUSH
38292: EMPTY
38293: LIST
38294: LIST
38295: PUSH
38296: LD_INT 2
38298: NEG
38299: PUSH
38300: LD_INT 3
38302: NEG
38303: PUSH
38304: EMPTY
38305: LIST
38306: LIST
38307: PUSH
38308: LD_INT 1
38310: NEG
38311: PUSH
38312: LD_INT 3
38314: NEG
38315: PUSH
38316: EMPTY
38317: LIST
38318: LIST
38319: PUSH
38320: LD_INT 3
38322: NEG
38323: PUSH
38324: LD_INT 1
38326: NEG
38327: PUSH
38328: EMPTY
38329: LIST
38330: LIST
38331: PUSH
38332: LD_INT 3
38334: NEG
38335: PUSH
38336: LD_INT 2
38338: NEG
38339: PUSH
38340: EMPTY
38341: LIST
38342: LIST
38343: PUSH
38344: EMPTY
38345: LIST
38346: LIST
38347: LIST
38348: LIST
38349: LIST
38350: LIST
38351: LIST
38352: LIST
38353: LIST
38354: LIST
38355: LIST
38356: LIST
38357: LIST
38358: LIST
38359: LIST
38360: LIST
38361: LIST
38362: LIST
38363: LIST
38364: LIST
38365: LIST
38366: LIST
38367: LIST
38368: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38369: LD_ADDR_VAR 0 29
38373: PUSH
38374: LD_INT 0
38376: PUSH
38377: LD_INT 0
38379: PUSH
38380: EMPTY
38381: LIST
38382: LIST
38383: PUSH
38384: LD_INT 0
38386: PUSH
38387: LD_INT 1
38389: NEG
38390: PUSH
38391: EMPTY
38392: LIST
38393: LIST
38394: PUSH
38395: LD_INT 1
38397: PUSH
38398: LD_INT 0
38400: PUSH
38401: EMPTY
38402: LIST
38403: LIST
38404: PUSH
38405: LD_INT 1
38407: PUSH
38408: LD_INT 1
38410: PUSH
38411: EMPTY
38412: LIST
38413: LIST
38414: PUSH
38415: LD_INT 0
38417: PUSH
38418: LD_INT 1
38420: PUSH
38421: EMPTY
38422: LIST
38423: LIST
38424: PUSH
38425: LD_INT 1
38427: NEG
38428: PUSH
38429: LD_INT 0
38431: PUSH
38432: EMPTY
38433: LIST
38434: LIST
38435: PUSH
38436: LD_INT 1
38438: NEG
38439: PUSH
38440: LD_INT 1
38442: NEG
38443: PUSH
38444: EMPTY
38445: LIST
38446: LIST
38447: PUSH
38448: LD_INT 1
38450: NEG
38451: PUSH
38452: LD_INT 2
38454: NEG
38455: PUSH
38456: EMPTY
38457: LIST
38458: LIST
38459: PUSH
38460: LD_INT 0
38462: PUSH
38463: LD_INT 2
38465: NEG
38466: PUSH
38467: EMPTY
38468: LIST
38469: LIST
38470: PUSH
38471: LD_INT 1
38473: PUSH
38474: LD_INT 1
38476: NEG
38477: PUSH
38478: EMPTY
38479: LIST
38480: LIST
38481: PUSH
38482: LD_INT 2
38484: PUSH
38485: LD_INT 0
38487: PUSH
38488: EMPTY
38489: LIST
38490: LIST
38491: PUSH
38492: LD_INT 2
38494: PUSH
38495: LD_INT 1
38497: PUSH
38498: EMPTY
38499: LIST
38500: LIST
38501: PUSH
38502: LD_INT 1
38504: PUSH
38505: LD_INT 2
38507: PUSH
38508: EMPTY
38509: LIST
38510: LIST
38511: PUSH
38512: LD_INT 0
38514: PUSH
38515: LD_INT 2
38517: PUSH
38518: EMPTY
38519: LIST
38520: LIST
38521: PUSH
38522: LD_INT 1
38524: NEG
38525: PUSH
38526: LD_INT 1
38528: PUSH
38529: EMPTY
38530: LIST
38531: LIST
38532: PUSH
38533: LD_INT 2
38535: NEG
38536: PUSH
38537: LD_INT 1
38539: NEG
38540: PUSH
38541: EMPTY
38542: LIST
38543: LIST
38544: PUSH
38545: LD_INT 2
38547: NEG
38548: PUSH
38549: LD_INT 2
38551: NEG
38552: PUSH
38553: EMPTY
38554: LIST
38555: LIST
38556: PUSH
38557: LD_INT 2
38559: NEG
38560: PUSH
38561: LD_INT 3
38563: NEG
38564: PUSH
38565: EMPTY
38566: LIST
38567: LIST
38568: PUSH
38569: LD_INT 2
38571: PUSH
38572: LD_INT 1
38574: NEG
38575: PUSH
38576: EMPTY
38577: LIST
38578: LIST
38579: PUSH
38580: LD_INT 3
38582: PUSH
38583: LD_INT 1
38585: PUSH
38586: EMPTY
38587: LIST
38588: LIST
38589: PUSH
38590: LD_INT 1
38592: PUSH
38593: LD_INT 3
38595: PUSH
38596: EMPTY
38597: LIST
38598: LIST
38599: PUSH
38600: LD_INT 1
38602: NEG
38603: PUSH
38604: LD_INT 2
38606: PUSH
38607: EMPTY
38608: LIST
38609: LIST
38610: PUSH
38611: LD_INT 3
38613: NEG
38614: PUSH
38615: LD_INT 2
38617: NEG
38618: PUSH
38619: EMPTY
38620: LIST
38621: LIST
38622: PUSH
38623: EMPTY
38624: LIST
38625: LIST
38626: LIST
38627: LIST
38628: LIST
38629: LIST
38630: LIST
38631: LIST
38632: LIST
38633: LIST
38634: LIST
38635: LIST
38636: LIST
38637: LIST
38638: LIST
38639: LIST
38640: LIST
38641: LIST
38642: LIST
38643: LIST
38644: LIST
38645: LIST
38646: LIST
38647: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38648: LD_ADDR_VAR 0 30
38652: PUSH
38653: LD_INT 0
38655: PUSH
38656: LD_INT 0
38658: PUSH
38659: EMPTY
38660: LIST
38661: LIST
38662: PUSH
38663: LD_INT 0
38665: PUSH
38666: LD_INT 1
38668: NEG
38669: PUSH
38670: EMPTY
38671: LIST
38672: LIST
38673: PUSH
38674: LD_INT 1
38676: PUSH
38677: LD_INT 0
38679: PUSH
38680: EMPTY
38681: LIST
38682: LIST
38683: PUSH
38684: LD_INT 1
38686: PUSH
38687: LD_INT 1
38689: PUSH
38690: EMPTY
38691: LIST
38692: LIST
38693: PUSH
38694: LD_INT 0
38696: PUSH
38697: LD_INT 1
38699: PUSH
38700: EMPTY
38701: LIST
38702: LIST
38703: PUSH
38704: LD_INT 1
38706: NEG
38707: PUSH
38708: LD_INT 0
38710: PUSH
38711: EMPTY
38712: LIST
38713: LIST
38714: PUSH
38715: LD_INT 1
38717: NEG
38718: PUSH
38719: LD_INT 1
38721: NEG
38722: PUSH
38723: EMPTY
38724: LIST
38725: LIST
38726: PUSH
38727: LD_INT 1
38729: NEG
38730: PUSH
38731: LD_INT 2
38733: NEG
38734: PUSH
38735: EMPTY
38736: LIST
38737: LIST
38738: PUSH
38739: LD_INT 0
38741: PUSH
38742: LD_INT 2
38744: NEG
38745: PUSH
38746: EMPTY
38747: LIST
38748: LIST
38749: PUSH
38750: LD_INT 1
38752: PUSH
38753: LD_INT 1
38755: NEG
38756: PUSH
38757: EMPTY
38758: LIST
38759: LIST
38760: PUSH
38761: LD_INT 2
38763: PUSH
38764: LD_INT 0
38766: PUSH
38767: EMPTY
38768: LIST
38769: LIST
38770: PUSH
38771: LD_INT 2
38773: PUSH
38774: LD_INT 1
38776: PUSH
38777: EMPTY
38778: LIST
38779: LIST
38780: PUSH
38781: LD_INT 2
38783: PUSH
38784: LD_INT 2
38786: PUSH
38787: EMPTY
38788: LIST
38789: LIST
38790: PUSH
38791: LD_INT 1
38793: PUSH
38794: LD_INT 2
38796: PUSH
38797: EMPTY
38798: LIST
38799: LIST
38800: PUSH
38801: LD_INT 1
38803: NEG
38804: PUSH
38805: LD_INT 1
38807: PUSH
38808: EMPTY
38809: LIST
38810: LIST
38811: PUSH
38812: LD_INT 2
38814: NEG
38815: PUSH
38816: LD_INT 0
38818: PUSH
38819: EMPTY
38820: LIST
38821: LIST
38822: PUSH
38823: LD_INT 2
38825: NEG
38826: PUSH
38827: LD_INT 1
38829: NEG
38830: PUSH
38831: EMPTY
38832: LIST
38833: LIST
38834: PUSH
38835: LD_INT 1
38837: NEG
38838: PUSH
38839: LD_INT 3
38841: NEG
38842: PUSH
38843: EMPTY
38844: LIST
38845: LIST
38846: PUSH
38847: LD_INT 1
38849: PUSH
38850: LD_INT 2
38852: NEG
38853: PUSH
38854: EMPTY
38855: LIST
38856: LIST
38857: PUSH
38858: LD_INT 3
38860: PUSH
38861: LD_INT 2
38863: PUSH
38864: EMPTY
38865: LIST
38866: LIST
38867: PUSH
38868: LD_INT 2
38870: PUSH
38871: LD_INT 3
38873: PUSH
38874: EMPTY
38875: LIST
38876: LIST
38877: PUSH
38878: LD_INT 2
38880: NEG
38881: PUSH
38882: LD_INT 1
38884: PUSH
38885: EMPTY
38886: LIST
38887: LIST
38888: PUSH
38889: LD_INT 3
38891: NEG
38892: PUSH
38893: LD_INT 1
38895: NEG
38896: PUSH
38897: EMPTY
38898: LIST
38899: LIST
38900: PUSH
38901: EMPTY
38902: LIST
38903: LIST
38904: LIST
38905: LIST
38906: LIST
38907: LIST
38908: LIST
38909: LIST
38910: LIST
38911: LIST
38912: LIST
38913: LIST
38914: LIST
38915: LIST
38916: LIST
38917: LIST
38918: LIST
38919: LIST
38920: LIST
38921: LIST
38922: LIST
38923: LIST
38924: LIST
38925: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38926: LD_ADDR_VAR 0 31
38930: PUSH
38931: LD_INT 0
38933: PUSH
38934: LD_INT 0
38936: PUSH
38937: EMPTY
38938: LIST
38939: LIST
38940: PUSH
38941: LD_INT 0
38943: PUSH
38944: LD_INT 1
38946: NEG
38947: PUSH
38948: EMPTY
38949: LIST
38950: LIST
38951: PUSH
38952: LD_INT 1
38954: PUSH
38955: LD_INT 0
38957: PUSH
38958: EMPTY
38959: LIST
38960: LIST
38961: PUSH
38962: LD_INT 1
38964: PUSH
38965: LD_INT 1
38967: PUSH
38968: EMPTY
38969: LIST
38970: LIST
38971: PUSH
38972: LD_INT 0
38974: PUSH
38975: LD_INT 1
38977: PUSH
38978: EMPTY
38979: LIST
38980: LIST
38981: PUSH
38982: LD_INT 1
38984: NEG
38985: PUSH
38986: LD_INT 0
38988: PUSH
38989: EMPTY
38990: LIST
38991: LIST
38992: PUSH
38993: LD_INT 1
38995: NEG
38996: PUSH
38997: LD_INT 1
38999: NEG
39000: PUSH
39001: EMPTY
39002: LIST
39003: LIST
39004: PUSH
39005: LD_INT 1
39007: NEG
39008: PUSH
39009: LD_INT 2
39011: NEG
39012: PUSH
39013: EMPTY
39014: LIST
39015: LIST
39016: PUSH
39017: LD_INT 1
39019: PUSH
39020: LD_INT 1
39022: NEG
39023: PUSH
39024: EMPTY
39025: LIST
39026: LIST
39027: PUSH
39028: LD_INT 2
39030: PUSH
39031: LD_INT 0
39033: PUSH
39034: EMPTY
39035: LIST
39036: LIST
39037: PUSH
39038: LD_INT 2
39040: PUSH
39041: LD_INT 1
39043: PUSH
39044: EMPTY
39045: LIST
39046: LIST
39047: PUSH
39048: LD_INT 2
39050: PUSH
39051: LD_INT 2
39053: PUSH
39054: EMPTY
39055: LIST
39056: LIST
39057: PUSH
39058: LD_INT 1
39060: PUSH
39061: LD_INT 2
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: PUSH
39068: LD_INT 0
39070: PUSH
39071: LD_INT 2
39073: PUSH
39074: EMPTY
39075: LIST
39076: LIST
39077: PUSH
39078: LD_INT 1
39080: NEG
39081: PUSH
39082: LD_INT 1
39084: PUSH
39085: EMPTY
39086: LIST
39087: LIST
39088: PUSH
39089: LD_INT 2
39091: NEG
39092: PUSH
39093: LD_INT 1
39095: NEG
39096: PUSH
39097: EMPTY
39098: LIST
39099: LIST
39100: PUSH
39101: LD_INT 2
39103: NEG
39104: PUSH
39105: LD_INT 2
39107: NEG
39108: PUSH
39109: EMPTY
39110: LIST
39111: LIST
39112: PUSH
39113: LD_INT 2
39115: NEG
39116: PUSH
39117: LD_INT 3
39119: NEG
39120: PUSH
39121: EMPTY
39122: LIST
39123: LIST
39124: PUSH
39125: LD_INT 2
39127: PUSH
39128: LD_INT 1
39130: NEG
39131: PUSH
39132: EMPTY
39133: LIST
39134: LIST
39135: PUSH
39136: LD_INT 3
39138: PUSH
39139: LD_INT 1
39141: PUSH
39142: EMPTY
39143: LIST
39144: LIST
39145: PUSH
39146: LD_INT 1
39148: PUSH
39149: LD_INT 3
39151: PUSH
39152: EMPTY
39153: LIST
39154: LIST
39155: PUSH
39156: LD_INT 1
39158: NEG
39159: PUSH
39160: LD_INT 2
39162: PUSH
39163: EMPTY
39164: LIST
39165: LIST
39166: PUSH
39167: LD_INT 3
39169: NEG
39170: PUSH
39171: LD_INT 2
39173: NEG
39174: PUSH
39175: EMPTY
39176: LIST
39177: LIST
39178: PUSH
39179: EMPTY
39180: LIST
39181: LIST
39182: LIST
39183: LIST
39184: LIST
39185: LIST
39186: LIST
39187: LIST
39188: LIST
39189: LIST
39190: LIST
39191: LIST
39192: LIST
39193: LIST
39194: LIST
39195: LIST
39196: LIST
39197: LIST
39198: LIST
39199: LIST
39200: LIST
39201: LIST
39202: LIST
39203: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39204: LD_ADDR_VAR 0 32
39208: PUSH
39209: LD_INT 0
39211: PUSH
39212: LD_INT 0
39214: PUSH
39215: EMPTY
39216: LIST
39217: LIST
39218: PUSH
39219: LD_INT 0
39221: PUSH
39222: LD_INT 1
39224: NEG
39225: PUSH
39226: EMPTY
39227: LIST
39228: LIST
39229: PUSH
39230: LD_INT 1
39232: PUSH
39233: LD_INT 0
39235: PUSH
39236: EMPTY
39237: LIST
39238: LIST
39239: PUSH
39240: LD_INT 1
39242: PUSH
39243: LD_INT 1
39245: PUSH
39246: EMPTY
39247: LIST
39248: LIST
39249: PUSH
39250: LD_INT 0
39252: PUSH
39253: LD_INT 1
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: PUSH
39260: LD_INT 1
39262: NEG
39263: PUSH
39264: LD_INT 0
39266: PUSH
39267: EMPTY
39268: LIST
39269: LIST
39270: PUSH
39271: LD_INT 1
39273: NEG
39274: PUSH
39275: LD_INT 1
39277: NEG
39278: PUSH
39279: EMPTY
39280: LIST
39281: LIST
39282: PUSH
39283: LD_INT 1
39285: NEG
39286: PUSH
39287: LD_INT 2
39289: NEG
39290: PUSH
39291: EMPTY
39292: LIST
39293: LIST
39294: PUSH
39295: LD_INT 0
39297: PUSH
39298: LD_INT 2
39300: NEG
39301: PUSH
39302: EMPTY
39303: LIST
39304: LIST
39305: PUSH
39306: LD_INT 1
39308: PUSH
39309: LD_INT 1
39311: NEG
39312: PUSH
39313: EMPTY
39314: LIST
39315: LIST
39316: PUSH
39317: LD_INT 2
39319: PUSH
39320: LD_INT 1
39322: PUSH
39323: EMPTY
39324: LIST
39325: LIST
39326: PUSH
39327: LD_INT 2
39329: PUSH
39330: LD_INT 2
39332: PUSH
39333: EMPTY
39334: LIST
39335: LIST
39336: PUSH
39337: LD_INT 1
39339: PUSH
39340: LD_INT 2
39342: PUSH
39343: EMPTY
39344: LIST
39345: LIST
39346: PUSH
39347: LD_INT 0
39349: PUSH
39350: LD_INT 2
39352: PUSH
39353: EMPTY
39354: LIST
39355: LIST
39356: PUSH
39357: LD_INT 1
39359: NEG
39360: PUSH
39361: LD_INT 1
39363: PUSH
39364: EMPTY
39365: LIST
39366: LIST
39367: PUSH
39368: LD_INT 2
39370: NEG
39371: PUSH
39372: LD_INT 0
39374: PUSH
39375: EMPTY
39376: LIST
39377: LIST
39378: PUSH
39379: LD_INT 2
39381: NEG
39382: PUSH
39383: LD_INT 1
39385: NEG
39386: PUSH
39387: EMPTY
39388: LIST
39389: LIST
39390: PUSH
39391: LD_INT 1
39393: NEG
39394: PUSH
39395: LD_INT 3
39397: NEG
39398: PUSH
39399: EMPTY
39400: LIST
39401: LIST
39402: PUSH
39403: LD_INT 1
39405: PUSH
39406: LD_INT 2
39408: NEG
39409: PUSH
39410: EMPTY
39411: LIST
39412: LIST
39413: PUSH
39414: LD_INT 3
39416: PUSH
39417: LD_INT 2
39419: PUSH
39420: EMPTY
39421: LIST
39422: LIST
39423: PUSH
39424: LD_INT 2
39426: PUSH
39427: LD_INT 3
39429: PUSH
39430: EMPTY
39431: LIST
39432: LIST
39433: PUSH
39434: LD_INT 2
39436: NEG
39437: PUSH
39438: LD_INT 1
39440: PUSH
39441: EMPTY
39442: LIST
39443: LIST
39444: PUSH
39445: LD_INT 3
39447: NEG
39448: PUSH
39449: LD_INT 1
39451: NEG
39452: PUSH
39453: EMPTY
39454: LIST
39455: LIST
39456: PUSH
39457: EMPTY
39458: LIST
39459: LIST
39460: LIST
39461: LIST
39462: LIST
39463: LIST
39464: LIST
39465: LIST
39466: LIST
39467: LIST
39468: LIST
39469: LIST
39470: LIST
39471: LIST
39472: LIST
39473: LIST
39474: LIST
39475: LIST
39476: LIST
39477: LIST
39478: LIST
39479: LIST
39480: LIST
39481: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39482: LD_ADDR_VAR 0 33
39486: PUSH
39487: LD_INT 0
39489: PUSH
39490: LD_INT 0
39492: PUSH
39493: EMPTY
39494: LIST
39495: LIST
39496: PUSH
39497: LD_INT 0
39499: PUSH
39500: LD_INT 1
39502: NEG
39503: PUSH
39504: EMPTY
39505: LIST
39506: LIST
39507: PUSH
39508: LD_INT 1
39510: PUSH
39511: LD_INT 0
39513: PUSH
39514: EMPTY
39515: LIST
39516: LIST
39517: PUSH
39518: LD_INT 1
39520: PUSH
39521: LD_INT 1
39523: PUSH
39524: EMPTY
39525: LIST
39526: LIST
39527: PUSH
39528: LD_INT 0
39530: PUSH
39531: LD_INT 1
39533: PUSH
39534: EMPTY
39535: LIST
39536: LIST
39537: PUSH
39538: LD_INT 1
39540: NEG
39541: PUSH
39542: LD_INT 0
39544: PUSH
39545: EMPTY
39546: LIST
39547: LIST
39548: PUSH
39549: LD_INT 1
39551: NEG
39552: PUSH
39553: LD_INT 1
39555: NEG
39556: PUSH
39557: EMPTY
39558: LIST
39559: LIST
39560: PUSH
39561: LD_INT 1
39563: NEG
39564: PUSH
39565: LD_INT 2
39567: NEG
39568: PUSH
39569: EMPTY
39570: LIST
39571: LIST
39572: PUSH
39573: LD_INT 1
39575: PUSH
39576: LD_INT 1
39578: NEG
39579: PUSH
39580: EMPTY
39581: LIST
39582: LIST
39583: PUSH
39584: LD_INT 2
39586: PUSH
39587: LD_INT 0
39589: PUSH
39590: EMPTY
39591: LIST
39592: LIST
39593: PUSH
39594: LD_INT 2
39596: PUSH
39597: LD_INT 1
39599: PUSH
39600: EMPTY
39601: LIST
39602: LIST
39603: PUSH
39604: LD_INT 1
39606: PUSH
39607: LD_INT 2
39609: PUSH
39610: EMPTY
39611: LIST
39612: LIST
39613: PUSH
39614: LD_INT 0
39616: PUSH
39617: LD_INT 2
39619: PUSH
39620: EMPTY
39621: LIST
39622: LIST
39623: PUSH
39624: LD_INT 1
39626: NEG
39627: PUSH
39628: LD_INT 1
39630: PUSH
39631: EMPTY
39632: LIST
39633: LIST
39634: PUSH
39635: LD_INT 2
39637: NEG
39638: PUSH
39639: LD_INT 0
39641: PUSH
39642: EMPTY
39643: LIST
39644: LIST
39645: PUSH
39646: LD_INT 2
39648: NEG
39649: PUSH
39650: LD_INT 1
39652: NEG
39653: PUSH
39654: EMPTY
39655: LIST
39656: LIST
39657: PUSH
39658: LD_INT 2
39660: NEG
39661: PUSH
39662: LD_INT 2
39664: NEG
39665: PUSH
39666: EMPTY
39667: LIST
39668: LIST
39669: PUSH
39670: LD_INT 2
39672: NEG
39673: PUSH
39674: LD_INT 3
39676: NEG
39677: PUSH
39678: EMPTY
39679: LIST
39680: LIST
39681: PUSH
39682: LD_INT 2
39684: PUSH
39685: LD_INT 1
39687: NEG
39688: PUSH
39689: EMPTY
39690: LIST
39691: LIST
39692: PUSH
39693: LD_INT 3
39695: PUSH
39696: LD_INT 1
39698: PUSH
39699: EMPTY
39700: LIST
39701: LIST
39702: PUSH
39703: LD_INT 1
39705: PUSH
39706: LD_INT 3
39708: PUSH
39709: EMPTY
39710: LIST
39711: LIST
39712: PUSH
39713: LD_INT 1
39715: NEG
39716: PUSH
39717: LD_INT 2
39719: PUSH
39720: EMPTY
39721: LIST
39722: LIST
39723: PUSH
39724: LD_INT 3
39726: NEG
39727: PUSH
39728: LD_INT 2
39730: NEG
39731: PUSH
39732: EMPTY
39733: LIST
39734: LIST
39735: PUSH
39736: EMPTY
39737: LIST
39738: LIST
39739: LIST
39740: LIST
39741: LIST
39742: LIST
39743: LIST
39744: LIST
39745: LIST
39746: LIST
39747: LIST
39748: LIST
39749: LIST
39750: LIST
39751: LIST
39752: LIST
39753: LIST
39754: LIST
39755: LIST
39756: LIST
39757: LIST
39758: LIST
39759: LIST
39760: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39761: LD_ADDR_VAR 0 34
39765: PUSH
39766: LD_INT 0
39768: PUSH
39769: LD_INT 0
39771: PUSH
39772: EMPTY
39773: LIST
39774: LIST
39775: PUSH
39776: LD_INT 0
39778: PUSH
39779: LD_INT 1
39781: NEG
39782: PUSH
39783: EMPTY
39784: LIST
39785: LIST
39786: PUSH
39787: LD_INT 1
39789: PUSH
39790: LD_INT 0
39792: PUSH
39793: EMPTY
39794: LIST
39795: LIST
39796: PUSH
39797: LD_INT 1
39799: PUSH
39800: LD_INT 1
39802: PUSH
39803: EMPTY
39804: LIST
39805: LIST
39806: PUSH
39807: LD_INT 0
39809: PUSH
39810: LD_INT 1
39812: PUSH
39813: EMPTY
39814: LIST
39815: LIST
39816: PUSH
39817: LD_INT 1
39819: NEG
39820: PUSH
39821: LD_INT 0
39823: PUSH
39824: EMPTY
39825: LIST
39826: LIST
39827: PUSH
39828: LD_INT 1
39830: NEG
39831: PUSH
39832: LD_INT 1
39834: NEG
39835: PUSH
39836: EMPTY
39837: LIST
39838: LIST
39839: PUSH
39840: LD_INT 1
39842: NEG
39843: PUSH
39844: LD_INT 2
39846: NEG
39847: PUSH
39848: EMPTY
39849: LIST
39850: LIST
39851: PUSH
39852: LD_INT 0
39854: PUSH
39855: LD_INT 2
39857: NEG
39858: PUSH
39859: EMPTY
39860: LIST
39861: LIST
39862: PUSH
39863: LD_INT 1
39865: PUSH
39866: LD_INT 1
39868: NEG
39869: PUSH
39870: EMPTY
39871: LIST
39872: LIST
39873: PUSH
39874: LD_INT 2
39876: PUSH
39877: LD_INT 1
39879: PUSH
39880: EMPTY
39881: LIST
39882: LIST
39883: PUSH
39884: LD_INT 2
39886: PUSH
39887: LD_INT 2
39889: PUSH
39890: EMPTY
39891: LIST
39892: LIST
39893: PUSH
39894: LD_INT 1
39896: PUSH
39897: LD_INT 2
39899: PUSH
39900: EMPTY
39901: LIST
39902: LIST
39903: PUSH
39904: LD_INT 1
39906: NEG
39907: PUSH
39908: LD_INT 1
39910: PUSH
39911: EMPTY
39912: LIST
39913: LIST
39914: PUSH
39915: LD_INT 2
39917: NEG
39918: PUSH
39919: LD_INT 0
39921: PUSH
39922: EMPTY
39923: LIST
39924: LIST
39925: PUSH
39926: LD_INT 2
39928: NEG
39929: PUSH
39930: LD_INT 1
39932: NEG
39933: PUSH
39934: EMPTY
39935: LIST
39936: LIST
39937: PUSH
39938: LD_INT 2
39940: NEG
39941: PUSH
39942: LD_INT 2
39944: NEG
39945: PUSH
39946: EMPTY
39947: LIST
39948: LIST
39949: PUSH
39950: LD_INT 1
39952: NEG
39953: PUSH
39954: LD_INT 3
39956: NEG
39957: PUSH
39958: EMPTY
39959: LIST
39960: LIST
39961: PUSH
39962: LD_INT 1
39964: PUSH
39965: LD_INT 2
39967: NEG
39968: PUSH
39969: EMPTY
39970: LIST
39971: LIST
39972: PUSH
39973: LD_INT 3
39975: PUSH
39976: LD_INT 2
39978: PUSH
39979: EMPTY
39980: LIST
39981: LIST
39982: PUSH
39983: LD_INT 2
39985: PUSH
39986: LD_INT 3
39988: PUSH
39989: EMPTY
39990: LIST
39991: LIST
39992: PUSH
39993: LD_INT 2
39995: NEG
39996: PUSH
39997: LD_INT 1
39999: PUSH
40000: EMPTY
40001: LIST
40002: LIST
40003: PUSH
40004: LD_INT 3
40006: NEG
40007: PUSH
40008: LD_INT 1
40010: NEG
40011: PUSH
40012: EMPTY
40013: LIST
40014: LIST
40015: PUSH
40016: EMPTY
40017: LIST
40018: LIST
40019: LIST
40020: LIST
40021: LIST
40022: LIST
40023: LIST
40024: LIST
40025: LIST
40026: LIST
40027: LIST
40028: LIST
40029: LIST
40030: LIST
40031: LIST
40032: LIST
40033: LIST
40034: LIST
40035: LIST
40036: LIST
40037: LIST
40038: LIST
40039: LIST
40040: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40041: LD_ADDR_VAR 0 35
40045: PUSH
40046: LD_INT 0
40048: PUSH
40049: LD_INT 0
40051: PUSH
40052: EMPTY
40053: LIST
40054: LIST
40055: PUSH
40056: LD_INT 0
40058: PUSH
40059: LD_INT 1
40061: NEG
40062: PUSH
40063: EMPTY
40064: LIST
40065: LIST
40066: PUSH
40067: LD_INT 1
40069: PUSH
40070: LD_INT 0
40072: PUSH
40073: EMPTY
40074: LIST
40075: LIST
40076: PUSH
40077: LD_INT 1
40079: PUSH
40080: LD_INT 1
40082: PUSH
40083: EMPTY
40084: LIST
40085: LIST
40086: PUSH
40087: LD_INT 0
40089: PUSH
40090: LD_INT 1
40092: PUSH
40093: EMPTY
40094: LIST
40095: LIST
40096: PUSH
40097: LD_INT 1
40099: NEG
40100: PUSH
40101: LD_INT 0
40103: PUSH
40104: EMPTY
40105: LIST
40106: LIST
40107: PUSH
40108: LD_INT 1
40110: NEG
40111: PUSH
40112: LD_INT 1
40114: NEG
40115: PUSH
40116: EMPTY
40117: LIST
40118: LIST
40119: PUSH
40120: LD_INT 2
40122: PUSH
40123: LD_INT 1
40125: PUSH
40126: EMPTY
40127: LIST
40128: LIST
40129: PUSH
40130: LD_INT 2
40132: NEG
40133: PUSH
40134: LD_INT 1
40136: NEG
40137: PUSH
40138: EMPTY
40139: LIST
40140: LIST
40141: PUSH
40142: EMPTY
40143: LIST
40144: LIST
40145: LIST
40146: LIST
40147: LIST
40148: LIST
40149: LIST
40150: LIST
40151: LIST
40152: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
40153: LD_ADDR_VAR 0 36
40157: PUSH
40158: LD_INT 0
40160: PUSH
40161: LD_INT 0
40163: PUSH
40164: EMPTY
40165: LIST
40166: LIST
40167: PUSH
40168: LD_INT 0
40170: PUSH
40171: LD_INT 1
40173: NEG
40174: PUSH
40175: EMPTY
40176: LIST
40177: LIST
40178: PUSH
40179: LD_INT 1
40181: PUSH
40182: LD_INT 0
40184: PUSH
40185: EMPTY
40186: LIST
40187: LIST
40188: PUSH
40189: LD_INT 1
40191: PUSH
40192: LD_INT 1
40194: PUSH
40195: EMPTY
40196: LIST
40197: LIST
40198: PUSH
40199: LD_INT 0
40201: PUSH
40202: LD_INT 1
40204: PUSH
40205: EMPTY
40206: LIST
40207: LIST
40208: PUSH
40209: LD_INT 1
40211: NEG
40212: PUSH
40213: LD_INT 0
40215: PUSH
40216: EMPTY
40217: LIST
40218: LIST
40219: PUSH
40220: LD_INT 1
40222: NEG
40223: PUSH
40224: LD_INT 1
40226: NEG
40227: PUSH
40228: EMPTY
40229: LIST
40230: LIST
40231: PUSH
40232: LD_INT 1
40234: NEG
40235: PUSH
40236: LD_INT 2
40238: NEG
40239: PUSH
40240: EMPTY
40241: LIST
40242: LIST
40243: PUSH
40244: LD_INT 1
40246: PUSH
40247: LD_INT 2
40249: PUSH
40250: EMPTY
40251: LIST
40252: LIST
40253: PUSH
40254: EMPTY
40255: LIST
40256: LIST
40257: LIST
40258: LIST
40259: LIST
40260: LIST
40261: LIST
40262: LIST
40263: LIST
40264: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
40265: LD_ADDR_VAR 0 37
40269: PUSH
40270: LD_INT 0
40272: PUSH
40273: LD_INT 0
40275: PUSH
40276: EMPTY
40277: LIST
40278: LIST
40279: PUSH
40280: LD_INT 0
40282: PUSH
40283: LD_INT 1
40285: NEG
40286: PUSH
40287: EMPTY
40288: LIST
40289: LIST
40290: PUSH
40291: LD_INT 1
40293: PUSH
40294: LD_INT 0
40296: PUSH
40297: EMPTY
40298: LIST
40299: LIST
40300: PUSH
40301: LD_INT 1
40303: PUSH
40304: LD_INT 1
40306: PUSH
40307: EMPTY
40308: LIST
40309: LIST
40310: PUSH
40311: LD_INT 0
40313: PUSH
40314: LD_INT 1
40316: PUSH
40317: EMPTY
40318: LIST
40319: LIST
40320: PUSH
40321: LD_INT 1
40323: NEG
40324: PUSH
40325: LD_INT 0
40327: PUSH
40328: EMPTY
40329: LIST
40330: LIST
40331: PUSH
40332: LD_INT 1
40334: NEG
40335: PUSH
40336: LD_INT 1
40338: NEG
40339: PUSH
40340: EMPTY
40341: LIST
40342: LIST
40343: PUSH
40344: LD_INT 1
40346: PUSH
40347: LD_INT 1
40349: NEG
40350: PUSH
40351: EMPTY
40352: LIST
40353: LIST
40354: PUSH
40355: LD_INT 1
40357: NEG
40358: PUSH
40359: LD_INT 1
40361: PUSH
40362: EMPTY
40363: LIST
40364: LIST
40365: PUSH
40366: EMPTY
40367: LIST
40368: LIST
40369: LIST
40370: LIST
40371: LIST
40372: LIST
40373: LIST
40374: LIST
40375: LIST
40376: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40377: LD_ADDR_VAR 0 38
40381: PUSH
40382: LD_INT 0
40384: PUSH
40385: LD_INT 0
40387: PUSH
40388: EMPTY
40389: LIST
40390: LIST
40391: PUSH
40392: LD_INT 0
40394: PUSH
40395: LD_INT 1
40397: NEG
40398: PUSH
40399: EMPTY
40400: LIST
40401: LIST
40402: PUSH
40403: LD_INT 1
40405: PUSH
40406: LD_INT 0
40408: PUSH
40409: EMPTY
40410: LIST
40411: LIST
40412: PUSH
40413: LD_INT 1
40415: PUSH
40416: LD_INT 1
40418: PUSH
40419: EMPTY
40420: LIST
40421: LIST
40422: PUSH
40423: LD_INT 0
40425: PUSH
40426: LD_INT 1
40428: PUSH
40429: EMPTY
40430: LIST
40431: LIST
40432: PUSH
40433: LD_INT 1
40435: NEG
40436: PUSH
40437: LD_INT 0
40439: PUSH
40440: EMPTY
40441: LIST
40442: LIST
40443: PUSH
40444: LD_INT 1
40446: NEG
40447: PUSH
40448: LD_INT 1
40450: NEG
40451: PUSH
40452: EMPTY
40453: LIST
40454: LIST
40455: PUSH
40456: LD_INT 2
40458: PUSH
40459: LD_INT 1
40461: PUSH
40462: EMPTY
40463: LIST
40464: LIST
40465: PUSH
40466: LD_INT 2
40468: NEG
40469: PUSH
40470: LD_INT 1
40472: NEG
40473: PUSH
40474: EMPTY
40475: LIST
40476: LIST
40477: PUSH
40478: EMPTY
40479: LIST
40480: LIST
40481: LIST
40482: LIST
40483: LIST
40484: LIST
40485: LIST
40486: LIST
40487: LIST
40488: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
40489: LD_ADDR_VAR 0 39
40493: PUSH
40494: LD_INT 0
40496: PUSH
40497: LD_INT 0
40499: PUSH
40500: EMPTY
40501: LIST
40502: LIST
40503: PUSH
40504: LD_INT 0
40506: PUSH
40507: LD_INT 1
40509: NEG
40510: PUSH
40511: EMPTY
40512: LIST
40513: LIST
40514: PUSH
40515: LD_INT 1
40517: PUSH
40518: LD_INT 0
40520: PUSH
40521: EMPTY
40522: LIST
40523: LIST
40524: PUSH
40525: LD_INT 1
40527: PUSH
40528: LD_INT 1
40530: PUSH
40531: EMPTY
40532: LIST
40533: LIST
40534: PUSH
40535: LD_INT 0
40537: PUSH
40538: LD_INT 1
40540: PUSH
40541: EMPTY
40542: LIST
40543: LIST
40544: PUSH
40545: LD_INT 1
40547: NEG
40548: PUSH
40549: LD_INT 0
40551: PUSH
40552: EMPTY
40553: LIST
40554: LIST
40555: PUSH
40556: LD_INT 1
40558: NEG
40559: PUSH
40560: LD_INT 1
40562: NEG
40563: PUSH
40564: EMPTY
40565: LIST
40566: LIST
40567: PUSH
40568: LD_INT 1
40570: NEG
40571: PUSH
40572: LD_INT 2
40574: NEG
40575: PUSH
40576: EMPTY
40577: LIST
40578: LIST
40579: PUSH
40580: LD_INT 1
40582: PUSH
40583: LD_INT 2
40585: PUSH
40586: EMPTY
40587: LIST
40588: LIST
40589: PUSH
40590: EMPTY
40591: LIST
40592: LIST
40593: LIST
40594: LIST
40595: LIST
40596: LIST
40597: LIST
40598: LIST
40599: LIST
40600: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
40601: LD_ADDR_VAR 0 40
40605: PUSH
40606: LD_INT 0
40608: PUSH
40609: LD_INT 0
40611: PUSH
40612: EMPTY
40613: LIST
40614: LIST
40615: PUSH
40616: LD_INT 0
40618: PUSH
40619: LD_INT 1
40621: NEG
40622: PUSH
40623: EMPTY
40624: LIST
40625: LIST
40626: PUSH
40627: LD_INT 1
40629: PUSH
40630: LD_INT 0
40632: PUSH
40633: EMPTY
40634: LIST
40635: LIST
40636: PUSH
40637: LD_INT 1
40639: PUSH
40640: LD_INT 1
40642: PUSH
40643: EMPTY
40644: LIST
40645: LIST
40646: PUSH
40647: LD_INT 0
40649: PUSH
40650: LD_INT 1
40652: PUSH
40653: EMPTY
40654: LIST
40655: LIST
40656: PUSH
40657: LD_INT 1
40659: NEG
40660: PUSH
40661: LD_INT 0
40663: PUSH
40664: EMPTY
40665: LIST
40666: LIST
40667: PUSH
40668: LD_INT 1
40670: NEG
40671: PUSH
40672: LD_INT 1
40674: NEG
40675: PUSH
40676: EMPTY
40677: LIST
40678: LIST
40679: PUSH
40680: LD_INT 1
40682: PUSH
40683: LD_INT 1
40685: NEG
40686: PUSH
40687: EMPTY
40688: LIST
40689: LIST
40690: PUSH
40691: LD_INT 1
40693: NEG
40694: PUSH
40695: LD_INT 1
40697: PUSH
40698: EMPTY
40699: LIST
40700: LIST
40701: PUSH
40702: EMPTY
40703: LIST
40704: LIST
40705: LIST
40706: LIST
40707: LIST
40708: LIST
40709: LIST
40710: LIST
40711: LIST
40712: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40713: LD_ADDR_VAR 0 41
40717: PUSH
40718: LD_INT 0
40720: PUSH
40721: LD_INT 0
40723: PUSH
40724: EMPTY
40725: LIST
40726: LIST
40727: PUSH
40728: LD_INT 0
40730: PUSH
40731: LD_INT 1
40733: NEG
40734: PUSH
40735: EMPTY
40736: LIST
40737: LIST
40738: PUSH
40739: LD_INT 1
40741: PUSH
40742: LD_INT 0
40744: PUSH
40745: EMPTY
40746: LIST
40747: LIST
40748: PUSH
40749: LD_INT 1
40751: PUSH
40752: LD_INT 1
40754: PUSH
40755: EMPTY
40756: LIST
40757: LIST
40758: PUSH
40759: LD_INT 0
40761: PUSH
40762: LD_INT 1
40764: PUSH
40765: EMPTY
40766: LIST
40767: LIST
40768: PUSH
40769: LD_INT 1
40771: NEG
40772: PUSH
40773: LD_INT 0
40775: PUSH
40776: EMPTY
40777: LIST
40778: LIST
40779: PUSH
40780: LD_INT 1
40782: NEG
40783: PUSH
40784: LD_INT 1
40786: NEG
40787: PUSH
40788: EMPTY
40789: LIST
40790: LIST
40791: PUSH
40792: LD_INT 1
40794: NEG
40795: PUSH
40796: LD_INT 2
40798: NEG
40799: PUSH
40800: EMPTY
40801: LIST
40802: LIST
40803: PUSH
40804: LD_INT 1
40806: PUSH
40807: LD_INT 1
40809: NEG
40810: PUSH
40811: EMPTY
40812: LIST
40813: LIST
40814: PUSH
40815: LD_INT 2
40817: PUSH
40818: LD_INT 0
40820: PUSH
40821: EMPTY
40822: LIST
40823: LIST
40824: PUSH
40825: LD_INT 2
40827: PUSH
40828: LD_INT 1
40830: PUSH
40831: EMPTY
40832: LIST
40833: LIST
40834: PUSH
40835: LD_INT 2
40837: PUSH
40838: LD_INT 2
40840: PUSH
40841: EMPTY
40842: LIST
40843: LIST
40844: PUSH
40845: LD_INT 1
40847: PUSH
40848: LD_INT 2
40850: PUSH
40851: EMPTY
40852: LIST
40853: LIST
40854: PUSH
40855: LD_INT 1
40857: NEG
40858: PUSH
40859: LD_INT 1
40861: PUSH
40862: EMPTY
40863: LIST
40864: LIST
40865: PUSH
40866: LD_INT 2
40868: NEG
40869: PUSH
40870: LD_INT 0
40872: PUSH
40873: EMPTY
40874: LIST
40875: LIST
40876: PUSH
40877: LD_INT 2
40879: NEG
40880: PUSH
40881: LD_INT 1
40883: NEG
40884: PUSH
40885: EMPTY
40886: LIST
40887: LIST
40888: PUSH
40889: LD_INT 2
40891: NEG
40892: PUSH
40893: LD_INT 2
40895: NEG
40896: PUSH
40897: EMPTY
40898: LIST
40899: LIST
40900: PUSH
40901: LD_INT 2
40903: NEG
40904: PUSH
40905: LD_INT 3
40907: NEG
40908: PUSH
40909: EMPTY
40910: LIST
40911: LIST
40912: PUSH
40913: LD_INT 2
40915: PUSH
40916: LD_INT 1
40918: NEG
40919: PUSH
40920: EMPTY
40921: LIST
40922: LIST
40923: PUSH
40924: LD_INT 3
40926: PUSH
40927: LD_INT 0
40929: PUSH
40930: EMPTY
40931: LIST
40932: LIST
40933: PUSH
40934: LD_INT 3
40936: PUSH
40937: LD_INT 1
40939: PUSH
40940: EMPTY
40941: LIST
40942: LIST
40943: PUSH
40944: LD_INT 3
40946: PUSH
40947: LD_INT 2
40949: PUSH
40950: EMPTY
40951: LIST
40952: LIST
40953: PUSH
40954: LD_INT 3
40956: PUSH
40957: LD_INT 3
40959: PUSH
40960: EMPTY
40961: LIST
40962: LIST
40963: PUSH
40964: LD_INT 2
40966: PUSH
40967: LD_INT 3
40969: PUSH
40970: EMPTY
40971: LIST
40972: LIST
40973: PUSH
40974: LD_INT 2
40976: NEG
40977: PUSH
40978: LD_INT 1
40980: PUSH
40981: EMPTY
40982: LIST
40983: LIST
40984: PUSH
40985: LD_INT 3
40987: NEG
40988: PUSH
40989: LD_INT 0
40991: PUSH
40992: EMPTY
40993: LIST
40994: LIST
40995: PUSH
40996: LD_INT 3
40998: NEG
40999: PUSH
41000: LD_INT 1
41002: NEG
41003: PUSH
41004: EMPTY
41005: LIST
41006: LIST
41007: PUSH
41008: LD_INT 3
41010: NEG
41011: PUSH
41012: LD_INT 2
41014: NEG
41015: PUSH
41016: EMPTY
41017: LIST
41018: LIST
41019: PUSH
41020: LD_INT 3
41022: NEG
41023: PUSH
41024: LD_INT 3
41026: NEG
41027: PUSH
41028: EMPTY
41029: LIST
41030: LIST
41031: PUSH
41032: EMPTY
41033: LIST
41034: LIST
41035: LIST
41036: LIST
41037: LIST
41038: LIST
41039: LIST
41040: LIST
41041: LIST
41042: LIST
41043: LIST
41044: LIST
41045: LIST
41046: LIST
41047: LIST
41048: LIST
41049: LIST
41050: LIST
41051: LIST
41052: LIST
41053: LIST
41054: LIST
41055: LIST
41056: LIST
41057: LIST
41058: LIST
41059: LIST
41060: LIST
41061: LIST
41062: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41063: LD_ADDR_VAR 0 42
41067: PUSH
41068: LD_INT 0
41070: PUSH
41071: LD_INT 0
41073: PUSH
41074: EMPTY
41075: LIST
41076: LIST
41077: PUSH
41078: LD_INT 0
41080: PUSH
41081: LD_INT 1
41083: NEG
41084: PUSH
41085: EMPTY
41086: LIST
41087: LIST
41088: PUSH
41089: LD_INT 1
41091: PUSH
41092: LD_INT 0
41094: PUSH
41095: EMPTY
41096: LIST
41097: LIST
41098: PUSH
41099: LD_INT 1
41101: PUSH
41102: LD_INT 1
41104: PUSH
41105: EMPTY
41106: LIST
41107: LIST
41108: PUSH
41109: LD_INT 0
41111: PUSH
41112: LD_INT 1
41114: PUSH
41115: EMPTY
41116: LIST
41117: LIST
41118: PUSH
41119: LD_INT 1
41121: NEG
41122: PUSH
41123: LD_INT 0
41125: PUSH
41126: EMPTY
41127: LIST
41128: LIST
41129: PUSH
41130: LD_INT 1
41132: NEG
41133: PUSH
41134: LD_INT 1
41136: NEG
41137: PUSH
41138: EMPTY
41139: LIST
41140: LIST
41141: PUSH
41142: LD_INT 1
41144: NEG
41145: PUSH
41146: LD_INT 2
41148: NEG
41149: PUSH
41150: EMPTY
41151: LIST
41152: LIST
41153: PUSH
41154: LD_INT 0
41156: PUSH
41157: LD_INT 2
41159: NEG
41160: PUSH
41161: EMPTY
41162: LIST
41163: LIST
41164: PUSH
41165: LD_INT 1
41167: PUSH
41168: LD_INT 1
41170: NEG
41171: PUSH
41172: EMPTY
41173: LIST
41174: LIST
41175: PUSH
41176: LD_INT 2
41178: PUSH
41179: LD_INT 1
41181: PUSH
41182: EMPTY
41183: LIST
41184: LIST
41185: PUSH
41186: LD_INT 2
41188: PUSH
41189: LD_INT 2
41191: PUSH
41192: EMPTY
41193: LIST
41194: LIST
41195: PUSH
41196: LD_INT 1
41198: PUSH
41199: LD_INT 2
41201: PUSH
41202: EMPTY
41203: LIST
41204: LIST
41205: PUSH
41206: LD_INT 0
41208: PUSH
41209: LD_INT 2
41211: PUSH
41212: EMPTY
41213: LIST
41214: LIST
41215: PUSH
41216: LD_INT 1
41218: NEG
41219: PUSH
41220: LD_INT 1
41222: PUSH
41223: EMPTY
41224: LIST
41225: LIST
41226: PUSH
41227: LD_INT 2
41229: NEG
41230: PUSH
41231: LD_INT 1
41233: NEG
41234: PUSH
41235: EMPTY
41236: LIST
41237: LIST
41238: PUSH
41239: LD_INT 2
41241: NEG
41242: PUSH
41243: LD_INT 2
41245: NEG
41246: PUSH
41247: EMPTY
41248: LIST
41249: LIST
41250: PUSH
41251: LD_INT 2
41253: NEG
41254: PUSH
41255: LD_INT 3
41257: NEG
41258: PUSH
41259: EMPTY
41260: LIST
41261: LIST
41262: PUSH
41263: LD_INT 1
41265: NEG
41266: PUSH
41267: LD_INT 3
41269: NEG
41270: PUSH
41271: EMPTY
41272: LIST
41273: LIST
41274: PUSH
41275: LD_INT 0
41277: PUSH
41278: LD_INT 3
41280: NEG
41281: PUSH
41282: EMPTY
41283: LIST
41284: LIST
41285: PUSH
41286: LD_INT 1
41288: PUSH
41289: LD_INT 2
41291: NEG
41292: PUSH
41293: EMPTY
41294: LIST
41295: LIST
41296: PUSH
41297: LD_INT 3
41299: PUSH
41300: LD_INT 2
41302: PUSH
41303: EMPTY
41304: LIST
41305: LIST
41306: PUSH
41307: LD_INT 3
41309: PUSH
41310: LD_INT 3
41312: PUSH
41313: EMPTY
41314: LIST
41315: LIST
41316: PUSH
41317: LD_INT 2
41319: PUSH
41320: LD_INT 3
41322: PUSH
41323: EMPTY
41324: LIST
41325: LIST
41326: PUSH
41327: LD_INT 1
41329: PUSH
41330: LD_INT 3
41332: PUSH
41333: EMPTY
41334: LIST
41335: LIST
41336: PUSH
41337: LD_INT 0
41339: PUSH
41340: LD_INT 3
41342: PUSH
41343: EMPTY
41344: LIST
41345: LIST
41346: PUSH
41347: LD_INT 1
41349: NEG
41350: PUSH
41351: LD_INT 2
41353: PUSH
41354: EMPTY
41355: LIST
41356: LIST
41357: PUSH
41358: LD_INT 3
41360: NEG
41361: PUSH
41362: LD_INT 2
41364: NEG
41365: PUSH
41366: EMPTY
41367: LIST
41368: LIST
41369: PUSH
41370: LD_INT 3
41372: NEG
41373: PUSH
41374: LD_INT 3
41376: NEG
41377: PUSH
41378: EMPTY
41379: LIST
41380: LIST
41381: PUSH
41382: EMPTY
41383: LIST
41384: LIST
41385: LIST
41386: LIST
41387: LIST
41388: LIST
41389: LIST
41390: LIST
41391: LIST
41392: LIST
41393: LIST
41394: LIST
41395: LIST
41396: LIST
41397: LIST
41398: LIST
41399: LIST
41400: LIST
41401: LIST
41402: LIST
41403: LIST
41404: LIST
41405: LIST
41406: LIST
41407: LIST
41408: LIST
41409: LIST
41410: LIST
41411: LIST
41412: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41413: LD_ADDR_VAR 0 43
41417: PUSH
41418: LD_INT 0
41420: PUSH
41421: LD_INT 0
41423: PUSH
41424: EMPTY
41425: LIST
41426: LIST
41427: PUSH
41428: LD_INT 0
41430: PUSH
41431: LD_INT 1
41433: NEG
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: PUSH
41439: LD_INT 1
41441: PUSH
41442: LD_INT 0
41444: PUSH
41445: EMPTY
41446: LIST
41447: LIST
41448: PUSH
41449: LD_INT 1
41451: PUSH
41452: LD_INT 1
41454: PUSH
41455: EMPTY
41456: LIST
41457: LIST
41458: PUSH
41459: LD_INT 0
41461: PUSH
41462: LD_INT 1
41464: PUSH
41465: EMPTY
41466: LIST
41467: LIST
41468: PUSH
41469: LD_INT 1
41471: NEG
41472: PUSH
41473: LD_INT 0
41475: PUSH
41476: EMPTY
41477: LIST
41478: LIST
41479: PUSH
41480: LD_INT 1
41482: NEG
41483: PUSH
41484: LD_INT 1
41486: NEG
41487: PUSH
41488: EMPTY
41489: LIST
41490: LIST
41491: PUSH
41492: LD_INT 1
41494: NEG
41495: PUSH
41496: LD_INT 2
41498: NEG
41499: PUSH
41500: EMPTY
41501: LIST
41502: LIST
41503: PUSH
41504: LD_INT 0
41506: PUSH
41507: LD_INT 2
41509: NEG
41510: PUSH
41511: EMPTY
41512: LIST
41513: LIST
41514: PUSH
41515: LD_INT 1
41517: PUSH
41518: LD_INT 1
41520: NEG
41521: PUSH
41522: EMPTY
41523: LIST
41524: LIST
41525: PUSH
41526: LD_INT 2
41528: PUSH
41529: LD_INT 0
41531: PUSH
41532: EMPTY
41533: LIST
41534: LIST
41535: PUSH
41536: LD_INT 2
41538: PUSH
41539: LD_INT 1
41541: PUSH
41542: EMPTY
41543: LIST
41544: LIST
41545: PUSH
41546: LD_INT 1
41548: PUSH
41549: LD_INT 2
41551: PUSH
41552: EMPTY
41553: LIST
41554: LIST
41555: PUSH
41556: LD_INT 0
41558: PUSH
41559: LD_INT 2
41561: PUSH
41562: EMPTY
41563: LIST
41564: LIST
41565: PUSH
41566: LD_INT 1
41568: NEG
41569: PUSH
41570: LD_INT 1
41572: PUSH
41573: EMPTY
41574: LIST
41575: LIST
41576: PUSH
41577: LD_INT 2
41579: NEG
41580: PUSH
41581: LD_INT 0
41583: PUSH
41584: EMPTY
41585: LIST
41586: LIST
41587: PUSH
41588: LD_INT 2
41590: NEG
41591: PUSH
41592: LD_INT 1
41594: NEG
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: PUSH
41600: LD_INT 1
41602: NEG
41603: PUSH
41604: LD_INT 3
41606: NEG
41607: PUSH
41608: EMPTY
41609: LIST
41610: LIST
41611: PUSH
41612: LD_INT 0
41614: PUSH
41615: LD_INT 3
41617: NEG
41618: PUSH
41619: EMPTY
41620: LIST
41621: LIST
41622: PUSH
41623: LD_INT 1
41625: PUSH
41626: LD_INT 2
41628: NEG
41629: PUSH
41630: EMPTY
41631: LIST
41632: LIST
41633: PUSH
41634: LD_INT 2
41636: PUSH
41637: LD_INT 1
41639: NEG
41640: PUSH
41641: EMPTY
41642: LIST
41643: LIST
41644: PUSH
41645: LD_INT 3
41647: PUSH
41648: LD_INT 0
41650: PUSH
41651: EMPTY
41652: LIST
41653: LIST
41654: PUSH
41655: LD_INT 3
41657: PUSH
41658: LD_INT 1
41660: PUSH
41661: EMPTY
41662: LIST
41663: LIST
41664: PUSH
41665: LD_INT 1
41667: PUSH
41668: LD_INT 3
41670: PUSH
41671: EMPTY
41672: LIST
41673: LIST
41674: PUSH
41675: LD_INT 0
41677: PUSH
41678: LD_INT 3
41680: PUSH
41681: EMPTY
41682: LIST
41683: LIST
41684: PUSH
41685: LD_INT 1
41687: NEG
41688: PUSH
41689: LD_INT 2
41691: PUSH
41692: EMPTY
41693: LIST
41694: LIST
41695: PUSH
41696: LD_INT 2
41698: NEG
41699: PUSH
41700: LD_INT 1
41702: PUSH
41703: EMPTY
41704: LIST
41705: LIST
41706: PUSH
41707: LD_INT 3
41709: NEG
41710: PUSH
41711: LD_INT 0
41713: PUSH
41714: EMPTY
41715: LIST
41716: LIST
41717: PUSH
41718: LD_INT 3
41720: NEG
41721: PUSH
41722: LD_INT 1
41724: NEG
41725: PUSH
41726: EMPTY
41727: LIST
41728: LIST
41729: PUSH
41730: EMPTY
41731: LIST
41732: LIST
41733: LIST
41734: LIST
41735: LIST
41736: LIST
41737: LIST
41738: LIST
41739: LIST
41740: LIST
41741: LIST
41742: LIST
41743: LIST
41744: LIST
41745: LIST
41746: LIST
41747: LIST
41748: LIST
41749: LIST
41750: LIST
41751: LIST
41752: LIST
41753: LIST
41754: LIST
41755: LIST
41756: LIST
41757: LIST
41758: LIST
41759: LIST
41760: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41761: LD_ADDR_VAR 0 44
41765: PUSH
41766: LD_INT 0
41768: PUSH
41769: LD_INT 0
41771: PUSH
41772: EMPTY
41773: LIST
41774: LIST
41775: PUSH
41776: LD_INT 0
41778: PUSH
41779: LD_INT 1
41781: NEG
41782: PUSH
41783: EMPTY
41784: LIST
41785: LIST
41786: PUSH
41787: LD_INT 1
41789: PUSH
41790: LD_INT 0
41792: PUSH
41793: EMPTY
41794: LIST
41795: LIST
41796: PUSH
41797: LD_INT 1
41799: PUSH
41800: LD_INT 1
41802: PUSH
41803: EMPTY
41804: LIST
41805: LIST
41806: PUSH
41807: LD_INT 0
41809: PUSH
41810: LD_INT 1
41812: PUSH
41813: EMPTY
41814: LIST
41815: LIST
41816: PUSH
41817: LD_INT 1
41819: NEG
41820: PUSH
41821: LD_INT 0
41823: PUSH
41824: EMPTY
41825: LIST
41826: LIST
41827: PUSH
41828: LD_INT 1
41830: NEG
41831: PUSH
41832: LD_INT 1
41834: NEG
41835: PUSH
41836: EMPTY
41837: LIST
41838: LIST
41839: PUSH
41840: LD_INT 1
41842: NEG
41843: PUSH
41844: LD_INT 2
41846: NEG
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: PUSH
41852: LD_INT 1
41854: PUSH
41855: LD_INT 1
41857: NEG
41858: PUSH
41859: EMPTY
41860: LIST
41861: LIST
41862: PUSH
41863: LD_INT 2
41865: PUSH
41866: LD_INT 0
41868: PUSH
41869: EMPTY
41870: LIST
41871: LIST
41872: PUSH
41873: LD_INT 2
41875: PUSH
41876: LD_INT 1
41878: PUSH
41879: EMPTY
41880: LIST
41881: LIST
41882: PUSH
41883: LD_INT 2
41885: PUSH
41886: LD_INT 2
41888: PUSH
41889: EMPTY
41890: LIST
41891: LIST
41892: PUSH
41893: LD_INT 1
41895: PUSH
41896: LD_INT 2
41898: PUSH
41899: EMPTY
41900: LIST
41901: LIST
41902: PUSH
41903: LD_INT 1
41905: NEG
41906: PUSH
41907: LD_INT 1
41909: PUSH
41910: EMPTY
41911: LIST
41912: LIST
41913: PUSH
41914: LD_INT 2
41916: NEG
41917: PUSH
41918: LD_INT 0
41920: PUSH
41921: EMPTY
41922: LIST
41923: LIST
41924: PUSH
41925: LD_INT 2
41927: NEG
41928: PUSH
41929: LD_INT 1
41931: NEG
41932: PUSH
41933: EMPTY
41934: LIST
41935: LIST
41936: PUSH
41937: LD_INT 2
41939: NEG
41940: PUSH
41941: LD_INT 2
41943: NEG
41944: PUSH
41945: EMPTY
41946: LIST
41947: LIST
41948: PUSH
41949: LD_INT 2
41951: NEG
41952: PUSH
41953: LD_INT 3
41955: NEG
41956: PUSH
41957: EMPTY
41958: LIST
41959: LIST
41960: PUSH
41961: LD_INT 2
41963: PUSH
41964: LD_INT 1
41966: NEG
41967: PUSH
41968: EMPTY
41969: LIST
41970: LIST
41971: PUSH
41972: LD_INT 3
41974: PUSH
41975: LD_INT 0
41977: PUSH
41978: EMPTY
41979: LIST
41980: LIST
41981: PUSH
41982: LD_INT 3
41984: PUSH
41985: LD_INT 1
41987: PUSH
41988: EMPTY
41989: LIST
41990: LIST
41991: PUSH
41992: LD_INT 3
41994: PUSH
41995: LD_INT 2
41997: PUSH
41998: EMPTY
41999: LIST
42000: LIST
42001: PUSH
42002: LD_INT 3
42004: PUSH
42005: LD_INT 3
42007: PUSH
42008: EMPTY
42009: LIST
42010: LIST
42011: PUSH
42012: LD_INT 2
42014: PUSH
42015: LD_INT 3
42017: PUSH
42018: EMPTY
42019: LIST
42020: LIST
42021: PUSH
42022: LD_INT 2
42024: NEG
42025: PUSH
42026: LD_INT 1
42028: PUSH
42029: EMPTY
42030: LIST
42031: LIST
42032: PUSH
42033: LD_INT 3
42035: NEG
42036: PUSH
42037: LD_INT 0
42039: PUSH
42040: EMPTY
42041: LIST
42042: LIST
42043: PUSH
42044: LD_INT 3
42046: NEG
42047: PUSH
42048: LD_INT 1
42050: NEG
42051: PUSH
42052: EMPTY
42053: LIST
42054: LIST
42055: PUSH
42056: LD_INT 3
42058: NEG
42059: PUSH
42060: LD_INT 2
42062: NEG
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: PUSH
42068: LD_INT 3
42070: NEG
42071: PUSH
42072: LD_INT 3
42074: NEG
42075: PUSH
42076: EMPTY
42077: LIST
42078: LIST
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: LIST
42084: LIST
42085: LIST
42086: LIST
42087: LIST
42088: LIST
42089: LIST
42090: LIST
42091: LIST
42092: LIST
42093: LIST
42094: LIST
42095: LIST
42096: LIST
42097: LIST
42098: LIST
42099: LIST
42100: LIST
42101: LIST
42102: LIST
42103: LIST
42104: LIST
42105: LIST
42106: LIST
42107: LIST
42108: LIST
42109: LIST
42110: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42111: LD_ADDR_VAR 0 45
42115: PUSH
42116: LD_INT 0
42118: PUSH
42119: LD_INT 0
42121: PUSH
42122: EMPTY
42123: LIST
42124: LIST
42125: PUSH
42126: LD_INT 0
42128: PUSH
42129: LD_INT 1
42131: NEG
42132: PUSH
42133: EMPTY
42134: LIST
42135: LIST
42136: PUSH
42137: LD_INT 1
42139: PUSH
42140: LD_INT 0
42142: PUSH
42143: EMPTY
42144: LIST
42145: LIST
42146: PUSH
42147: LD_INT 1
42149: PUSH
42150: LD_INT 1
42152: PUSH
42153: EMPTY
42154: LIST
42155: LIST
42156: PUSH
42157: LD_INT 0
42159: PUSH
42160: LD_INT 1
42162: PUSH
42163: EMPTY
42164: LIST
42165: LIST
42166: PUSH
42167: LD_INT 1
42169: NEG
42170: PUSH
42171: LD_INT 0
42173: PUSH
42174: EMPTY
42175: LIST
42176: LIST
42177: PUSH
42178: LD_INT 1
42180: NEG
42181: PUSH
42182: LD_INT 1
42184: NEG
42185: PUSH
42186: EMPTY
42187: LIST
42188: LIST
42189: PUSH
42190: LD_INT 1
42192: NEG
42193: PUSH
42194: LD_INT 2
42196: NEG
42197: PUSH
42198: EMPTY
42199: LIST
42200: LIST
42201: PUSH
42202: LD_INT 0
42204: PUSH
42205: LD_INT 2
42207: NEG
42208: PUSH
42209: EMPTY
42210: LIST
42211: LIST
42212: PUSH
42213: LD_INT 1
42215: PUSH
42216: LD_INT 1
42218: NEG
42219: PUSH
42220: EMPTY
42221: LIST
42222: LIST
42223: PUSH
42224: LD_INT 2
42226: PUSH
42227: LD_INT 1
42229: PUSH
42230: EMPTY
42231: LIST
42232: LIST
42233: PUSH
42234: LD_INT 2
42236: PUSH
42237: LD_INT 2
42239: PUSH
42240: EMPTY
42241: LIST
42242: LIST
42243: PUSH
42244: LD_INT 1
42246: PUSH
42247: LD_INT 2
42249: PUSH
42250: EMPTY
42251: LIST
42252: LIST
42253: PUSH
42254: LD_INT 0
42256: PUSH
42257: LD_INT 2
42259: PUSH
42260: EMPTY
42261: LIST
42262: LIST
42263: PUSH
42264: LD_INT 1
42266: NEG
42267: PUSH
42268: LD_INT 1
42270: PUSH
42271: EMPTY
42272: LIST
42273: LIST
42274: PUSH
42275: LD_INT 2
42277: NEG
42278: PUSH
42279: LD_INT 1
42281: NEG
42282: PUSH
42283: EMPTY
42284: LIST
42285: LIST
42286: PUSH
42287: LD_INT 2
42289: NEG
42290: PUSH
42291: LD_INT 2
42293: NEG
42294: PUSH
42295: EMPTY
42296: LIST
42297: LIST
42298: PUSH
42299: LD_INT 2
42301: NEG
42302: PUSH
42303: LD_INT 3
42305: NEG
42306: PUSH
42307: EMPTY
42308: LIST
42309: LIST
42310: PUSH
42311: LD_INT 1
42313: NEG
42314: PUSH
42315: LD_INT 3
42317: NEG
42318: PUSH
42319: EMPTY
42320: LIST
42321: LIST
42322: PUSH
42323: LD_INT 0
42325: PUSH
42326: LD_INT 3
42328: NEG
42329: PUSH
42330: EMPTY
42331: LIST
42332: LIST
42333: PUSH
42334: LD_INT 1
42336: PUSH
42337: LD_INT 2
42339: NEG
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: PUSH
42345: LD_INT 3
42347: PUSH
42348: LD_INT 2
42350: PUSH
42351: EMPTY
42352: LIST
42353: LIST
42354: PUSH
42355: LD_INT 3
42357: PUSH
42358: LD_INT 3
42360: PUSH
42361: EMPTY
42362: LIST
42363: LIST
42364: PUSH
42365: LD_INT 2
42367: PUSH
42368: LD_INT 3
42370: PUSH
42371: EMPTY
42372: LIST
42373: LIST
42374: PUSH
42375: LD_INT 1
42377: PUSH
42378: LD_INT 3
42380: PUSH
42381: EMPTY
42382: LIST
42383: LIST
42384: PUSH
42385: LD_INT 0
42387: PUSH
42388: LD_INT 3
42390: PUSH
42391: EMPTY
42392: LIST
42393: LIST
42394: PUSH
42395: LD_INT 1
42397: NEG
42398: PUSH
42399: LD_INT 2
42401: PUSH
42402: EMPTY
42403: LIST
42404: LIST
42405: PUSH
42406: LD_INT 3
42408: NEG
42409: PUSH
42410: LD_INT 2
42412: NEG
42413: PUSH
42414: EMPTY
42415: LIST
42416: LIST
42417: PUSH
42418: LD_INT 3
42420: NEG
42421: PUSH
42422: LD_INT 3
42424: NEG
42425: PUSH
42426: EMPTY
42427: LIST
42428: LIST
42429: PUSH
42430: EMPTY
42431: LIST
42432: LIST
42433: LIST
42434: LIST
42435: LIST
42436: LIST
42437: LIST
42438: LIST
42439: LIST
42440: LIST
42441: LIST
42442: LIST
42443: LIST
42444: LIST
42445: LIST
42446: LIST
42447: LIST
42448: LIST
42449: LIST
42450: LIST
42451: LIST
42452: LIST
42453: LIST
42454: LIST
42455: LIST
42456: LIST
42457: LIST
42458: LIST
42459: LIST
42460: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42461: LD_ADDR_VAR 0 46
42465: PUSH
42466: LD_INT 0
42468: PUSH
42469: LD_INT 0
42471: PUSH
42472: EMPTY
42473: LIST
42474: LIST
42475: PUSH
42476: LD_INT 0
42478: PUSH
42479: LD_INT 1
42481: NEG
42482: PUSH
42483: EMPTY
42484: LIST
42485: LIST
42486: PUSH
42487: LD_INT 1
42489: PUSH
42490: LD_INT 0
42492: PUSH
42493: EMPTY
42494: LIST
42495: LIST
42496: PUSH
42497: LD_INT 1
42499: PUSH
42500: LD_INT 1
42502: PUSH
42503: EMPTY
42504: LIST
42505: LIST
42506: PUSH
42507: LD_INT 0
42509: PUSH
42510: LD_INT 1
42512: PUSH
42513: EMPTY
42514: LIST
42515: LIST
42516: PUSH
42517: LD_INT 1
42519: NEG
42520: PUSH
42521: LD_INT 0
42523: PUSH
42524: EMPTY
42525: LIST
42526: LIST
42527: PUSH
42528: LD_INT 1
42530: NEG
42531: PUSH
42532: LD_INT 1
42534: NEG
42535: PUSH
42536: EMPTY
42537: LIST
42538: LIST
42539: PUSH
42540: LD_INT 1
42542: NEG
42543: PUSH
42544: LD_INT 2
42546: NEG
42547: PUSH
42548: EMPTY
42549: LIST
42550: LIST
42551: PUSH
42552: LD_INT 0
42554: PUSH
42555: LD_INT 2
42557: NEG
42558: PUSH
42559: EMPTY
42560: LIST
42561: LIST
42562: PUSH
42563: LD_INT 1
42565: PUSH
42566: LD_INT 1
42568: NEG
42569: PUSH
42570: EMPTY
42571: LIST
42572: LIST
42573: PUSH
42574: LD_INT 2
42576: PUSH
42577: LD_INT 0
42579: PUSH
42580: EMPTY
42581: LIST
42582: LIST
42583: PUSH
42584: LD_INT 2
42586: PUSH
42587: LD_INT 1
42589: PUSH
42590: EMPTY
42591: LIST
42592: LIST
42593: PUSH
42594: LD_INT 1
42596: PUSH
42597: LD_INT 2
42599: PUSH
42600: EMPTY
42601: LIST
42602: LIST
42603: PUSH
42604: LD_INT 0
42606: PUSH
42607: LD_INT 2
42609: PUSH
42610: EMPTY
42611: LIST
42612: LIST
42613: PUSH
42614: LD_INT 1
42616: NEG
42617: PUSH
42618: LD_INT 1
42620: PUSH
42621: EMPTY
42622: LIST
42623: LIST
42624: PUSH
42625: LD_INT 2
42627: NEG
42628: PUSH
42629: LD_INT 0
42631: PUSH
42632: EMPTY
42633: LIST
42634: LIST
42635: PUSH
42636: LD_INT 2
42638: NEG
42639: PUSH
42640: LD_INT 1
42642: NEG
42643: PUSH
42644: EMPTY
42645: LIST
42646: LIST
42647: PUSH
42648: LD_INT 1
42650: NEG
42651: PUSH
42652: LD_INT 3
42654: NEG
42655: PUSH
42656: EMPTY
42657: LIST
42658: LIST
42659: PUSH
42660: LD_INT 0
42662: PUSH
42663: LD_INT 3
42665: NEG
42666: PUSH
42667: EMPTY
42668: LIST
42669: LIST
42670: PUSH
42671: LD_INT 1
42673: PUSH
42674: LD_INT 2
42676: NEG
42677: PUSH
42678: EMPTY
42679: LIST
42680: LIST
42681: PUSH
42682: LD_INT 2
42684: PUSH
42685: LD_INT 1
42687: NEG
42688: PUSH
42689: EMPTY
42690: LIST
42691: LIST
42692: PUSH
42693: LD_INT 3
42695: PUSH
42696: LD_INT 0
42698: PUSH
42699: EMPTY
42700: LIST
42701: LIST
42702: PUSH
42703: LD_INT 3
42705: PUSH
42706: LD_INT 1
42708: PUSH
42709: EMPTY
42710: LIST
42711: LIST
42712: PUSH
42713: LD_INT 1
42715: PUSH
42716: LD_INT 3
42718: PUSH
42719: EMPTY
42720: LIST
42721: LIST
42722: PUSH
42723: LD_INT 0
42725: PUSH
42726: LD_INT 3
42728: PUSH
42729: EMPTY
42730: LIST
42731: LIST
42732: PUSH
42733: LD_INT 1
42735: NEG
42736: PUSH
42737: LD_INT 2
42739: PUSH
42740: EMPTY
42741: LIST
42742: LIST
42743: PUSH
42744: LD_INT 2
42746: NEG
42747: PUSH
42748: LD_INT 1
42750: PUSH
42751: EMPTY
42752: LIST
42753: LIST
42754: PUSH
42755: LD_INT 3
42757: NEG
42758: PUSH
42759: LD_INT 0
42761: PUSH
42762: EMPTY
42763: LIST
42764: LIST
42765: PUSH
42766: LD_INT 3
42768: NEG
42769: PUSH
42770: LD_INT 1
42772: NEG
42773: PUSH
42774: EMPTY
42775: LIST
42776: LIST
42777: PUSH
42778: EMPTY
42779: LIST
42780: LIST
42781: LIST
42782: LIST
42783: LIST
42784: LIST
42785: LIST
42786: LIST
42787: LIST
42788: LIST
42789: LIST
42790: LIST
42791: LIST
42792: LIST
42793: LIST
42794: LIST
42795: LIST
42796: LIST
42797: LIST
42798: LIST
42799: LIST
42800: LIST
42801: LIST
42802: LIST
42803: LIST
42804: LIST
42805: LIST
42806: LIST
42807: LIST
42808: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42809: LD_ADDR_VAR 0 47
42813: PUSH
42814: LD_INT 0
42816: PUSH
42817: LD_INT 0
42819: PUSH
42820: EMPTY
42821: LIST
42822: LIST
42823: PUSH
42824: LD_INT 0
42826: PUSH
42827: LD_INT 1
42829: NEG
42830: PUSH
42831: EMPTY
42832: LIST
42833: LIST
42834: PUSH
42835: LD_INT 1
42837: PUSH
42838: LD_INT 0
42840: PUSH
42841: EMPTY
42842: LIST
42843: LIST
42844: PUSH
42845: LD_INT 1
42847: PUSH
42848: LD_INT 1
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: PUSH
42855: LD_INT 0
42857: PUSH
42858: LD_INT 1
42860: PUSH
42861: EMPTY
42862: LIST
42863: LIST
42864: PUSH
42865: LD_INT 1
42867: NEG
42868: PUSH
42869: LD_INT 0
42871: PUSH
42872: EMPTY
42873: LIST
42874: LIST
42875: PUSH
42876: LD_INT 1
42878: NEG
42879: PUSH
42880: LD_INT 1
42882: NEG
42883: PUSH
42884: EMPTY
42885: LIST
42886: LIST
42887: PUSH
42888: LD_INT 1
42890: NEG
42891: PUSH
42892: LD_INT 2
42894: NEG
42895: PUSH
42896: EMPTY
42897: LIST
42898: LIST
42899: PUSH
42900: LD_INT 0
42902: PUSH
42903: LD_INT 2
42905: NEG
42906: PUSH
42907: EMPTY
42908: LIST
42909: LIST
42910: PUSH
42911: LD_INT 1
42913: PUSH
42914: LD_INT 1
42916: NEG
42917: PUSH
42918: EMPTY
42919: LIST
42920: LIST
42921: PUSH
42922: LD_INT 2
42924: NEG
42925: PUSH
42926: LD_INT 1
42928: NEG
42929: PUSH
42930: EMPTY
42931: LIST
42932: LIST
42933: PUSH
42934: LD_INT 2
42936: NEG
42937: PUSH
42938: LD_INT 2
42940: NEG
42941: PUSH
42942: EMPTY
42943: LIST
42944: LIST
42945: PUSH
42946: EMPTY
42947: LIST
42948: LIST
42949: LIST
42950: LIST
42951: LIST
42952: LIST
42953: LIST
42954: LIST
42955: LIST
42956: LIST
42957: LIST
42958: LIST
42959: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
42960: LD_ADDR_VAR 0 48
42964: PUSH
42965: LD_INT 0
42967: PUSH
42968: LD_INT 0
42970: PUSH
42971: EMPTY
42972: LIST
42973: LIST
42974: PUSH
42975: LD_INT 0
42977: PUSH
42978: LD_INT 1
42980: NEG
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: PUSH
42986: LD_INT 1
42988: PUSH
42989: LD_INT 0
42991: PUSH
42992: EMPTY
42993: LIST
42994: LIST
42995: PUSH
42996: LD_INT 1
42998: PUSH
42999: LD_INT 1
43001: PUSH
43002: EMPTY
43003: LIST
43004: LIST
43005: PUSH
43006: LD_INT 0
43008: PUSH
43009: LD_INT 1
43011: PUSH
43012: EMPTY
43013: LIST
43014: LIST
43015: PUSH
43016: LD_INT 1
43018: NEG
43019: PUSH
43020: LD_INT 0
43022: PUSH
43023: EMPTY
43024: LIST
43025: LIST
43026: PUSH
43027: LD_INT 1
43029: NEG
43030: PUSH
43031: LD_INT 1
43033: NEG
43034: PUSH
43035: EMPTY
43036: LIST
43037: LIST
43038: PUSH
43039: LD_INT 1
43041: NEG
43042: PUSH
43043: LD_INT 2
43045: NEG
43046: PUSH
43047: EMPTY
43048: LIST
43049: LIST
43050: PUSH
43051: LD_INT 0
43053: PUSH
43054: LD_INT 2
43056: NEG
43057: PUSH
43058: EMPTY
43059: LIST
43060: LIST
43061: PUSH
43062: LD_INT 1
43064: PUSH
43065: LD_INT 1
43067: NEG
43068: PUSH
43069: EMPTY
43070: LIST
43071: LIST
43072: PUSH
43073: LD_INT 2
43075: PUSH
43076: LD_INT 0
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: PUSH
43083: LD_INT 2
43085: PUSH
43086: LD_INT 1
43088: PUSH
43089: EMPTY
43090: LIST
43091: LIST
43092: PUSH
43093: EMPTY
43094: LIST
43095: LIST
43096: LIST
43097: LIST
43098: LIST
43099: LIST
43100: LIST
43101: LIST
43102: LIST
43103: LIST
43104: LIST
43105: LIST
43106: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
43107: LD_ADDR_VAR 0 49
43111: PUSH
43112: LD_INT 0
43114: PUSH
43115: LD_INT 0
43117: PUSH
43118: EMPTY
43119: LIST
43120: LIST
43121: PUSH
43122: LD_INT 0
43124: PUSH
43125: LD_INT 1
43127: NEG
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: PUSH
43133: LD_INT 1
43135: PUSH
43136: LD_INT 0
43138: PUSH
43139: EMPTY
43140: LIST
43141: LIST
43142: PUSH
43143: LD_INT 1
43145: PUSH
43146: LD_INT 1
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: PUSH
43153: LD_INT 0
43155: PUSH
43156: LD_INT 1
43158: PUSH
43159: EMPTY
43160: LIST
43161: LIST
43162: PUSH
43163: LD_INT 1
43165: NEG
43166: PUSH
43167: LD_INT 0
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: PUSH
43174: LD_INT 1
43176: NEG
43177: PUSH
43178: LD_INT 1
43180: NEG
43181: PUSH
43182: EMPTY
43183: LIST
43184: LIST
43185: PUSH
43186: LD_INT 1
43188: PUSH
43189: LD_INT 1
43191: NEG
43192: PUSH
43193: EMPTY
43194: LIST
43195: LIST
43196: PUSH
43197: LD_INT 2
43199: PUSH
43200: LD_INT 0
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: PUSH
43207: LD_INT 2
43209: PUSH
43210: LD_INT 1
43212: PUSH
43213: EMPTY
43214: LIST
43215: LIST
43216: PUSH
43217: LD_INT 2
43219: PUSH
43220: LD_INT 2
43222: PUSH
43223: EMPTY
43224: LIST
43225: LIST
43226: PUSH
43227: LD_INT 1
43229: PUSH
43230: LD_INT 2
43232: PUSH
43233: EMPTY
43234: LIST
43235: LIST
43236: PUSH
43237: EMPTY
43238: LIST
43239: LIST
43240: LIST
43241: LIST
43242: LIST
43243: LIST
43244: LIST
43245: LIST
43246: LIST
43247: LIST
43248: LIST
43249: LIST
43250: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
43251: LD_ADDR_VAR 0 50
43255: PUSH
43256: LD_INT 0
43258: PUSH
43259: LD_INT 0
43261: PUSH
43262: EMPTY
43263: LIST
43264: LIST
43265: PUSH
43266: LD_INT 0
43268: PUSH
43269: LD_INT 1
43271: NEG
43272: PUSH
43273: EMPTY
43274: LIST
43275: LIST
43276: PUSH
43277: LD_INT 1
43279: PUSH
43280: LD_INT 0
43282: PUSH
43283: EMPTY
43284: LIST
43285: LIST
43286: PUSH
43287: LD_INT 1
43289: PUSH
43290: LD_INT 1
43292: PUSH
43293: EMPTY
43294: LIST
43295: LIST
43296: PUSH
43297: LD_INT 0
43299: PUSH
43300: LD_INT 1
43302: PUSH
43303: EMPTY
43304: LIST
43305: LIST
43306: PUSH
43307: LD_INT 1
43309: NEG
43310: PUSH
43311: LD_INT 0
43313: PUSH
43314: EMPTY
43315: LIST
43316: LIST
43317: PUSH
43318: LD_INT 1
43320: NEG
43321: PUSH
43322: LD_INT 1
43324: NEG
43325: PUSH
43326: EMPTY
43327: LIST
43328: LIST
43329: PUSH
43330: LD_INT 2
43332: PUSH
43333: LD_INT 1
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: PUSH
43340: LD_INT 2
43342: PUSH
43343: LD_INT 2
43345: PUSH
43346: EMPTY
43347: LIST
43348: LIST
43349: PUSH
43350: LD_INT 1
43352: PUSH
43353: LD_INT 2
43355: PUSH
43356: EMPTY
43357: LIST
43358: LIST
43359: PUSH
43360: LD_INT 0
43362: PUSH
43363: LD_INT 2
43365: PUSH
43366: EMPTY
43367: LIST
43368: LIST
43369: PUSH
43370: LD_INT 1
43372: NEG
43373: PUSH
43374: LD_INT 1
43376: PUSH
43377: EMPTY
43378: LIST
43379: LIST
43380: PUSH
43381: EMPTY
43382: LIST
43383: LIST
43384: LIST
43385: LIST
43386: LIST
43387: LIST
43388: LIST
43389: LIST
43390: LIST
43391: LIST
43392: LIST
43393: LIST
43394: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
43395: LD_ADDR_VAR 0 51
43399: PUSH
43400: LD_INT 0
43402: PUSH
43403: LD_INT 0
43405: PUSH
43406: EMPTY
43407: LIST
43408: LIST
43409: PUSH
43410: LD_INT 0
43412: PUSH
43413: LD_INT 1
43415: NEG
43416: PUSH
43417: EMPTY
43418: LIST
43419: LIST
43420: PUSH
43421: LD_INT 1
43423: PUSH
43424: LD_INT 0
43426: PUSH
43427: EMPTY
43428: LIST
43429: LIST
43430: PUSH
43431: LD_INT 1
43433: PUSH
43434: LD_INT 1
43436: PUSH
43437: EMPTY
43438: LIST
43439: LIST
43440: PUSH
43441: LD_INT 0
43443: PUSH
43444: LD_INT 1
43446: PUSH
43447: EMPTY
43448: LIST
43449: LIST
43450: PUSH
43451: LD_INT 1
43453: NEG
43454: PUSH
43455: LD_INT 0
43457: PUSH
43458: EMPTY
43459: LIST
43460: LIST
43461: PUSH
43462: LD_INT 1
43464: NEG
43465: PUSH
43466: LD_INT 1
43468: NEG
43469: PUSH
43470: EMPTY
43471: LIST
43472: LIST
43473: PUSH
43474: LD_INT 1
43476: PUSH
43477: LD_INT 2
43479: PUSH
43480: EMPTY
43481: LIST
43482: LIST
43483: PUSH
43484: LD_INT 0
43486: PUSH
43487: LD_INT 2
43489: PUSH
43490: EMPTY
43491: LIST
43492: LIST
43493: PUSH
43494: LD_INT 1
43496: NEG
43497: PUSH
43498: LD_INT 1
43500: PUSH
43501: EMPTY
43502: LIST
43503: LIST
43504: PUSH
43505: LD_INT 2
43507: NEG
43508: PUSH
43509: LD_INT 0
43511: PUSH
43512: EMPTY
43513: LIST
43514: LIST
43515: PUSH
43516: LD_INT 2
43518: NEG
43519: PUSH
43520: LD_INT 1
43522: NEG
43523: PUSH
43524: EMPTY
43525: LIST
43526: LIST
43527: PUSH
43528: EMPTY
43529: LIST
43530: LIST
43531: LIST
43532: LIST
43533: LIST
43534: LIST
43535: LIST
43536: LIST
43537: LIST
43538: LIST
43539: LIST
43540: LIST
43541: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43542: LD_ADDR_VAR 0 52
43546: PUSH
43547: LD_INT 0
43549: PUSH
43550: LD_INT 0
43552: PUSH
43553: EMPTY
43554: LIST
43555: LIST
43556: PUSH
43557: LD_INT 0
43559: PUSH
43560: LD_INT 1
43562: NEG
43563: PUSH
43564: EMPTY
43565: LIST
43566: LIST
43567: PUSH
43568: LD_INT 1
43570: PUSH
43571: LD_INT 0
43573: PUSH
43574: EMPTY
43575: LIST
43576: LIST
43577: PUSH
43578: LD_INT 1
43580: PUSH
43581: LD_INT 1
43583: PUSH
43584: EMPTY
43585: LIST
43586: LIST
43587: PUSH
43588: LD_INT 0
43590: PUSH
43591: LD_INT 1
43593: PUSH
43594: EMPTY
43595: LIST
43596: LIST
43597: PUSH
43598: LD_INT 1
43600: NEG
43601: PUSH
43602: LD_INT 0
43604: PUSH
43605: EMPTY
43606: LIST
43607: LIST
43608: PUSH
43609: LD_INT 1
43611: NEG
43612: PUSH
43613: LD_INT 1
43615: NEG
43616: PUSH
43617: EMPTY
43618: LIST
43619: LIST
43620: PUSH
43621: LD_INT 1
43623: NEG
43624: PUSH
43625: LD_INT 2
43627: NEG
43628: PUSH
43629: EMPTY
43630: LIST
43631: LIST
43632: PUSH
43633: LD_INT 1
43635: NEG
43636: PUSH
43637: LD_INT 1
43639: PUSH
43640: EMPTY
43641: LIST
43642: LIST
43643: PUSH
43644: LD_INT 2
43646: NEG
43647: PUSH
43648: LD_INT 0
43650: PUSH
43651: EMPTY
43652: LIST
43653: LIST
43654: PUSH
43655: LD_INT 2
43657: NEG
43658: PUSH
43659: LD_INT 1
43661: NEG
43662: PUSH
43663: EMPTY
43664: LIST
43665: LIST
43666: PUSH
43667: LD_INT 2
43669: NEG
43670: PUSH
43671: LD_INT 2
43673: NEG
43674: PUSH
43675: EMPTY
43676: LIST
43677: LIST
43678: PUSH
43679: EMPTY
43680: LIST
43681: LIST
43682: LIST
43683: LIST
43684: LIST
43685: LIST
43686: LIST
43687: LIST
43688: LIST
43689: LIST
43690: LIST
43691: LIST
43692: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43693: LD_ADDR_VAR 0 53
43697: PUSH
43698: LD_INT 0
43700: PUSH
43701: LD_INT 0
43703: PUSH
43704: EMPTY
43705: LIST
43706: LIST
43707: PUSH
43708: LD_INT 0
43710: PUSH
43711: LD_INT 1
43713: NEG
43714: PUSH
43715: EMPTY
43716: LIST
43717: LIST
43718: PUSH
43719: LD_INT 1
43721: PUSH
43722: LD_INT 0
43724: PUSH
43725: EMPTY
43726: LIST
43727: LIST
43728: PUSH
43729: LD_INT 1
43731: PUSH
43732: LD_INT 1
43734: PUSH
43735: EMPTY
43736: LIST
43737: LIST
43738: PUSH
43739: LD_INT 0
43741: PUSH
43742: LD_INT 1
43744: PUSH
43745: EMPTY
43746: LIST
43747: LIST
43748: PUSH
43749: LD_INT 1
43751: NEG
43752: PUSH
43753: LD_INT 0
43755: PUSH
43756: EMPTY
43757: LIST
43758: LIST
43759: PUSH
43760: LD_INT 1
43762: NEG
43763: PUSH
43764: LD_INT 1
43766: NEG
43767: PUSH
43768: EMPTY
43769: LIST
43770: LIST
43771: PUSH
43772: LD_INT 1
43774: NEG
43775: PUSH
43776: LD_INT 2
43778: NEG
43779: PUSH
43780: EMPTY
43781: LIST
43782: LIST
43783: PUSH
43784: LD_INT 0
43786: PUSH
43787: LD_INT 2
43789: NEG
43790: PUSH
43791: EMPTY
43792: LIST
43793: LIST
43794: PUSH
43795: LD_INT 1
43797: PUSH
43798: LD_INT 1
43800: NEG
43801: PUSH
43802: EMPTY
43803: LIST
43804: LIST
43805: PUSH
43806: LD_INT 2
43808: PUSH
43809: LD_INT 0
43811: PUSH
43812: EMPTY
43813: LIST
43814: LIST
43815: PUSH
43816: LD_INT 2
43818: PUSH
43819: LD_INT 1
43821: PUSH
43822: EMPTY
43823: LIST
43824: LIST
43825: PUSH
43826: LD_INT 2
43828: PUSH
43829: LD_INT 2
43831: PUSH
43832: EMPTY
43833: LIST
43834: LIST
43835: PUSH
43836: LD_INT 1
43838: PUSH
43839: LD_INT 2
43841: PUSH
43842: EMPTY
43843: LIST
43844: LIST
43845: PUSH
43846: LD_INT 0
43848: PUSH
43849: LD_INT 2
43851: PUSH
43852: EMPTY
43853: LIST
43854: LIST
43855: PUSH
43856: LD_INT 1
43858: NEG
43859: PUSH
43860: LD_INT 1
43862: PUSH
43863: EMPTY
43864: LIST
43865: LIST
43866: PUSH
43867: LD_INT 2
43869: NEG
43870: PUSH
43871: LD_INT 0
43873: PUSH
43874: EMPTY
43875: LIST
43876: LIST
43877: PUSH
43878: LD_INT 2
43880: NEG
43881: PUSH
43882: LD_INT 1
43884: NEG
43885: PUSH
43886: EMPTY
43887: LIST
43888: LIST
43889: PUSH
43890: LD_INT 2
43892: NEG
43893: PUSH
43894: LD_INT 2
43896: NEG
43897: PUSH
43898: EMPTY
43899: LIST
43900: LIST
43901: PUSH
43902: EMPTY
43903: LIST
43904: LIST
43905: LIST
43906: LIST
43907: LIST
43908: LIST
43909: LIST
43910: LIST
43911: LIST
43912: LIST
43913: LIST
43914: LIST
43915: LIST
43916: LIST
43917: LIST
43918: LIST
43919: LIST
43920: LIST
43921: LIST
43922: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43923: LD_ADDR_VAR 0 54
43927: PUSH
43928: LD_INT 0
43930: PUSH
43931: LD_INT 0
43933: PUSH
43934: EMPTY
43935: LIST
43936: LIST
43937: PUSH
43938: LD_INT 0
43940: PUSH
43941: LD_INT 1
43943: NEG
43944: PUSH
43945: EMPTY
43946: LIST
43947: LIST
43948: PUSH
43949: LD_INT 1
43951: PUSH
43952: LD_INT 0
43954: PUSH
43955: EMPTY
43956: LIST
43957: LIST
43958: PUSH
43959: LD_INT 1
43961: PUSH
43962: LD_INT 1
43964: PUSH
43965: EMPTY
43966: LIST
43967: LIST
43968: PUSH
43969: LD_INT 0
43971: PUSH
43972: LD_INT 1
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: PUSH
43979: LD_INT 1
43981: NEG
43982: PUSH
43983: LD_INT 0
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: LD_INT 1
43992: NEG
43993: PUSH
43994: LD_INT 1
43996: NEG
43997: PUSH
43998: EMPTY
43999: LIST
44000: LIST
44001: PUSH
44002: LD_INT 1
44004: NEG
44005: PUSH
44006: LD_INT 2
44008: NEG
44009: PUSH
44010: EMPTY
44011: LIST
44012: LIST
44013: PUSH
44014: LD_INT 0
44016: PUSH
44017: LD_INT 2
44019: NEG
44020: PUSH
44021: EMPTY
44022: LIST
44023: LIST
44024: PUSH
44025: LD_INT 1
44027: PUSH
44028: LD_INT 1
44030: NEG
44031: PUSH
44032: EMPTY
44033: LIST
44034: LIST
44035: PUSH
44036: LD_INT 2
44038: PUSH
44039: LD_INT 0
44041: PUSH
44042: EMPTY
44043: LIST
44044: LIST
44045: PUSH
44046: LD_INT 2
44048: PUSH
44049: LD_INT 1
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: LD_INT 2
44058: PUSH
44059: LD_INT 2
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: PUSH
44066: LD_INT 1
44068: PUSH
44069: LD_INT 2
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: PUSH
44076: LD_INT 0
44078: PUSH
44079: LD_INT 2
44081: PUSH
44082: EMPTY
44083: LIST
44084: LIST
44085: PUSH
44086: LD_INT 1
44088: NEG
44089: PUSH
44090: LD_INT 1
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: PUSH
44097: LD_INT 2
44099: NEG
44100: PUSH
44101: LD_INT 0
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: PUSH
44108: LD_INT 2
44110: NEG
44111: PUSH
44112: LD_INT 1
44114: NEG
44115: PUSH
44116: EMPTY
44117: LIST
44118: LIST
44119: PUSH
44120: LD_INT 2
44122: NEG
44123: PUSH
44124: LD_INT 2
44126: NEG
44127: PUSH
44128: EMPTY
44129: LIST
44130: LIST
44131: PUSH
44132: EMPTY
44133: LIST
44134: LIST
44135: LIST
44136: LIST
44137: LIST
44138: LIST
44139: LIST
44140: LIST
44141: LIST
44142: LIST
44143: LIST
44144: LIST
44145: LIST
44146: LIST
44147: LIST
44148: LIST
44149: LIST
44150: LIST
44151: LIST
44152: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44153: LD_ADDR_VAR 0 55
44157: PUSH
44158: LD_INT 0
44160: PUSH
44161: LD_INT 0
44163: PUSH
44164: EMPTY
44165: LIST
44166: LIST
44167: PUSH
44168: LD_INT 0
44170: PUSH
44171: LD_INT 1
44173: NEG
44174: PUSH
44175: EMPTY
44176: LIST
44177: LIST
44178: PUSH
44179: LD_INT 1
44181: PUSH
44182: LD_INT 0
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: PUSH
44189: LD_INT 1
44191: PUSH
44192: LD_INT 1
44194: PUSH
44195: EMPTY
44196: LIST
44197: LIST
44198: PUSH
44199: LD_INT 0
44201: PUSH
44202: LD_INT 1
44204: PUSH
44205: EMPTY
44206: LIST
44207: LIST
44208: PUSH
44209: LD_INT 1
44211: NEG
44212: PUSH
44213: LD_INT 0
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: PUSH
44220: LD_INT 1
44222: NEG
44223: PUSH
44224: LD_INT 1
44226: NEG
44227: PUSH
44228: EMPTY
44229: LIST
44230: LIST
44231: PUSH
44232: LD_INT 1
44234: NEG
44235: PUSH
44236: LD_INT 2
44238: NEG
44239: PUSH
44240: EMPTY
44241: LIST
44242: LIST
44243: PUSH
44244: LD_INT 0
44246: PUSH
44247: LD_INT 2
44249: NEG
44250: PUSH
44251: EMPTY
44252: LIST
44253: LIST
44254: PUSH
44255: LD_INT 1
44257: PUSH
44258: LD_INT 1
44260: NEG
44261: PUSH
44262: EMPTY
44263: LIST
44264: LIST
44265: PUSH
44266: LD_INT 2
44268: PUSH
44269: LD_INT 0
44271: PUSH
44272: EMPTY
44273: LIST
44274: LIST
44275: PUSH
44276: LD_INT 2
44278: PUSH
44279: LD_INT 1
44281: PUSH
44282: EMPTY
44283: LIST
44284: LIST
44285: PUSH
44286: LD_INT 2
44288: PUSH
44289: LD_INT 2
44291: PUSH
44292: EMPTY
44293: LIST
44294: LIST
44295: PUSH
44296: LD_INT 1
44298: PUSH
44299: LD_INT 2
44301: PUSH
44302: EMPTY
44303: LIST
44304: LIST
44305: PUSH
44306: LD_INT 0
44308: PUSH
44309: LD_INT 2
44311: PUSH
44312: EMPTY
44313: LIST
44314: LIST
44315: PUSH
44316: LD_INT 1
44318: NEG
44319: PUSH
44320: LD_INT 1
44322: PUSH
44323: EMPTY
44324: LIST
44325: LIST
44326: PUSH
44327: LD_INT 2
44329: NEG
44330: PUSH
44331: LD_INT 0
44333: PUSH
44334: EMPTY
44335: LIST
44336: LIST
44337: PUSH
44338: LD_INT 2
44340: NEG
44341: PUSH
44342: LD_INT 1
44344: NEG
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: PUSH
44350: LD_INT 2
44352: NEG
44353: PUSH
44354: LD_INT 2
44356: NEG
44357: PUSH
44358: EMPTY
44359: LIST
44360: LIST
44361: PUSH
44362: EMPTY
44363: LIST
44364: LIST
44365: LIST
44366: LIST
44367: LIST
44368: LIST
44369: LIST
44370: LIST
44371: LIST
44372: LIST
44373: LIST
44374: LIST
44375: LIST
44376: LIST
44377: LIST
44378: LIST
44379: LIST
44380: LIST
44381: LIST
44382: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44383: LD_ADDR_VAR 0 56
44387: PUSH
44388: LD_INT 0
44390: PUSH
44391: LD_INT 0
44393: PUSH
44394: EMPTY
44395: LIST
44396: LIST
44397: PUSH
44398: LD_INT 0
44400: PUSH
44401: LD_INT 1
44403: NEG
44404: PUSH
44405: EMPTY
44406: LIST
44407: LIST
44408: PUSH
44409: LD_INT 1
44411: PUSH
44412: LD_INT 0
44414: PUSH
44415: EMPTY
44416: LIST
44417: LIST
44418: PUSH
44419: LD_INT 1
44421: PUSH
44422: LD_INT 1
44424: PUSH
44425: EMPTY
44426: LIST
44427: LIST
44428: PUSH
44429: LD_INT 0
44431: PUSH
44432: LD_INT 1
44434: PUSH
44435: EMPTY
44436: LIST
44437: LIST
44438: PUSH
44439: LD_INT 1
44441: NEG
44442: PUSH
44443: LD_INT 0
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: PUSH
44450: LD_INT 1
44452: NEG
44453: PUSH
44454: LD_INT 1
44456: NEG
44457: PUSH
44458: EMPTY
44459: LIST
44460: LIST
44461: PUSH
44462: LD_INT 1
44464: NEG
44465: PUSH
44466: LD_INT 2
44468: NEG
44469: PUSH
44470: EMPTY
44471: LIST
44472: LIST
44473: PUSH
44474: LD_INT 0
44476: PUSH
44477: LD_INT 2
44479: NEG
44480: PUSH
44481: EMPTY
44482: LIST
44483: LIST
44484: PUSH
44485: LD_INT 1
44487: PUSH
44488: LD_INT 1
44490: NEG
44491: PUSH
44492: EMPTY
44493: LIST
44494: LIST
44495: PUSH
44496: LD_INT 2
44498: PUSH
44499: LD_INT 0
44501: PUSH
44502: EMPTY
44503: LIST
44504: LIST
44505: PUSH
44506: LD_INT 2
44508: PUSH
44509: LD_INT 1
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: PUSH
44516: LD_INT 2
44518: PUSH
44519: LD_INT 2
44521: PUSH
44522: EMPTY
44523: LIST
44524: LIST
44525: PUSH
44526: LD_INT 1
44528: PUSH
44529: LD_INT 2
44531: PUSH
44532: EMPTY
44533: LIST
44534: LIST
44535: PUSH
44536: LD_INT 0
44538: PUSH
44539: LD_INT 2
44541: PUSH
44542: EMPTY
44543: LIST
44544: LIST
44545: PUSH
44546: LD_INT 1
44548: NEG
44549: PUSH
44550: LD_INT 1
44552: PUSH
44553: EMPTY
44554: LIST
44555: LIST
44556: PUSH
44557: LD_INT 2
44559: NEG
44560: PUSH
44561: LD_INT 0
44563: PUSH
44564: EMPTY
44565: LIST
44566: LIST
44567: PUSH
44568: LD_INT 2
44570: NEG
44571: PUSH
44572: LD_INT 1
44574: NEG
44575: PUSH
44576: EMPTY
44577: LIST
44578: LIST
44579: PUSH
44580: LD_INT 2
44582: NEG
44583: PUSH
44584: LD_INT 2
44586: NEG
44587: PUSH
44588: EMPTY
44589: LIST
44590: LIST
44591: PUSH
44592: EMPTY
44593: LIST
44594: LIST
44595: LIST
44596: LIST
44597: LIST
44598: LIST
44599: LIST
44600: LIST
44601: LIST
44602: LIST
44603: LIST
44604: LIST
44605: LIST
44606: LIST
44607: LIST
44608: LIST
44609: LIST
44610: LIST
44611: LIST
44612: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44613: LD_ADDR_VAR 0 57
44617: PUSH
44618: LD_INT 0
44620: PUSH
44621: LD_INT 0
44623: PUSH
44624: EMPTY
44625: LIST
44626: LIST
44627: PUSH
44628: LD_INT 0
44630: PUSH
44631: LD_INT 1
44633: NEG
44634: PUSH
44635: EMPTY
44636: LIST
44637: LIST
44638: PUSH
44639: LD_INT 1
44641: PUSH
44642: LD_INT 0
44644: PUSH
44645: EMPTY
44646: LIST
44647: LIST
44648: PUSH
44649: LD_INT 1
44651: PUSH
44652: LD_INT 1
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: PUSH
44659: LD_INT 0
44661: PUSH
44662: LD_INT 1
44664: PUSH
44665: EMPTY
44666: LIST
44667: LIST
44668: PUSH
44669: LD_INT 1
44671: NEG
44672: PUSH
44673: LD_INT 0
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: PUSH
44680: LD_INT 1
44682: NEG
44683: PUSH
44684: LD_INT 1
44686: NEG
44687: PUSH
44688: EMPTY
44689: LIST
44690: LIST
44691: PUSH
44692: LD_INT 1
44694: NEG
44695: PUSH
44696: LD_INT 2
44698: NEG
44699: PUSH
44700: EMPTY
44701: LIST
44702: LIST
44703: PUSH
44704: LD_INT 0
44706: PUSH
44707: LD_INT 2
44709: NEG
44710: PUSH
44711: EMPTY
44712: LIST
44713: LIST
44714: PUSH
44715: LD_INT 1
44717: PUSH
44718: LD_INT 1
44720: NEG
44721: PUSH
44722: EMPTY
44723: LIST
44724: LIST
44725: PUSH
44726: LD_INT 2
44728: PUSH
44729: LD_INT 0
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: PUSH
44736: LD_INT 2
44738: PUSH
44739: LD_INT 1
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PUSH
44746: LD_INT 2
44748: PUSH
44749: LD_INT 2
44751: PUSH
44752: EMPTY
44753: LIST
44754: LIST
44755: PUSH
44756: LD_INT 1
44758: PUSH
44759: LD_INT 2
44761: PUSH
44762: EMPTY
44763: LIST
44764: LIST
44765: PUSH
44766: LD_INT 0
44768: PUSH
44769: LD_INT 2
44771: PUSH
44772: EMPTY
44773: LIST
44774: LIST
44775: PUSH
44776: LD_INT 1
44778: NEG
44779: PUSH
44780: LD_INT 1
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: PUSH
44787: LD_INT 2
44789: NEG
44790: PUSH
44791: LD_INT 0
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: PUSH
44798: LD_INT 2
44800: NEG
44801: PUSH
44802: LD_INT 1
44804: NEG
44805: PUSH
44806: EMPTY
44807: LIST
44808: LIST
44809: PUSH
44810: LD_INT 2
44812: NEG
44813: PUSH
44814: LD_INT 2
44816: NEG
44817: PUSH
44818: EMPTY
44819: LIST
44820: LIST
44821: PUSH
44822: EMPTY
44823: LIST
44824: LIST
44825: LIST
44826: LIST
44827: LIST
44828: LIST
44829: LIST
44830: LIST
44831: LIST
44832: LIST
44833: LIST
44834: LIST
44835: LIST
44836: LIST
44837: LIST
44838: LIST
44839: LIST
44840: LIST
44841: LIST
44842: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44843: LD_ADDR_VAR 0 58
44847: PUSH
44848: LD_INT 0
44850: PUSH
44851: LD_INT 0
44853: PUSH
44854: EMPTY
44855: LIST
44856: LIST
44857: PUSH
44858: LD_INT 0
44860: PUSH
44861: LD_INT 1
44863: NEG
44864: PUSH
44865: EMPTY
44866: LIST
44867: LIST
44868: PUSH
44869: LD_INT 1
44871: PUSH
44872: LD_INT 0
44874: PUSH
44875: EMPTY
44876: LIST
44877: LIST
44878: PUSH
44879: LD_INT 1
44881: PUSH
44882: LD_INT 1
44884: PUSH
44885: EMPTY
44886: LIST
44887: LIST
44888: PUSH
44889: LD_INT 0
44891: PUSH
44892: LD_INT 1
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: PUSH
44899: LD_INT 1
44901: NEG
44902: PUSH
44903: LD_INT 0
44905: PUSH
44906: EMPTY
44907: LIST
44908: LIST
44909: PUSH
44910: LD_INT 1
44912: NEG
44913: PUSH
44914: LD_INT 1
44916: NEG
44917: PUSH
44918: EMPTY
44919: LIST
44920: LIST
44921: PUSH
44922: LD_INT 1
44924: NEG
44925: PUSH
44926: LD_INT 2
44928: NEG
44929: PUSH
44930: EMPTY
44931: LIST
44932: LIST
44933: PUSH
44934: LD_INT 0
44936: PUSH
44937: LD_INT 2
44939: NEG
44940: PUSH
44941: EMPTY
44942: LIST
44943: LIST
44944: PUSH
44945: LD_INT 1
44947: PUSH
44948: LD_INT 1
44950: NEG
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: PUSH
44956: LD_INT 2
44958: PUSH
44959: LD_INT 0
44961: PUSH
44962: EMPTY
44963: LIST
44964: LIST
44965: PUSH
44966: LD_INT 2
44968: PUSH
44969: LD_INT 1
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: PUSH
44976: LD_INT 2
44978: PUSH
44979: LD_INT 2
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: PUSH
44986: LD_INT 1
44988: PUSH
44989: LD_INT 2
44991: PUSH
44992: EMPTY
44993: LIST
44994: LIST
44995: PUSH
44996: LD_INT 0
44998: PUSH
44999: LD_INT 2
45001: PUSH
45002: EMPTY
45003: LIST
45004: LIST
45005: PUSH
45006: LD_INT 1
45008: NEG
45009: PUSH
45010: LD_INT 1
45012: PUSH
45013: EMPTY
45014: LIST
45015: LIST
45016: PUSH
45017: LD_INT 2
45019: NEG
45020: PUSH
45021: LD_INT 0
45023: PUSH
45024: EMPTY
45025: LIST
45026: LIST
45027: PUSH
45028: LD_INT 2
45030: NEG
45031: PUSH
45032: LD_INT 1
45034: NEG
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: PUSH
45040: LD_INT 2
45042: NEG
45043: PUSH
45044: LD_INT 2
45046: NEG
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: EMPTY
45053: LIST
45054: LIST
45055: LIST
45056: LIST
45057: LIST
45058: LIST
45059: LIST
45060: LIST
45061: LIST
45062: LIST
45063: LIST
45064: LIST
45065: LIST
45066: LIST
45067: LIST
45068: LIST
45069: LIST
45070: LIST
45071: LIST
45072: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45073: LD_ADDR_VAR 0 59
45077: PUSH
45078: LD_INT 0
45080: PUSH
45081: LD_INT 0
45083: PUSH
45084: EMPTY
45085: LIST
45086: LIST
45087: PUSH
45088: LD_INT 0
45090: PUSH
45091: LD_INT 1
45093: NEG
45094: PUSH
45095: EMPTY
45096: LIST
45097: LIST
45098: PUSH
45099: LD_INT 1
45101: PUSH
45102: LD_INT 0
45104: PUSH
45105: EMPTY
45106: LIST
45107: LIST
45108: PUSH
45109: LD_INT 1
45111: PUSH
45112: LD_INT 1
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: PUSH
45119: LD_INT 0
45121: PUSH
45122: LD_INT 1
45124: PUSH
45125: EMPTY
45126: LIST
45127: LIST
45128: PUSH
45129: LD_INT 1
45131: NEG
45132: PUSH
45133: LD_INT 0
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: PUSH
45140: LD_INT 1
45142: NEG
45143: PUSH
45144: LD_INT 1
45146: NEG
45147: PUSH
45148: EMPTY
45149: LIST
45150: LIST
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: LIST
45156: LIST
45157: LIST
45158: LIST
45159: LIST
45160: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45161: LD_ADDR_VAR 0 60
45165: PUSH
45166: LD_INT 0
45168: PUSH
45169: LD_INT 0
45171: PUSH
45172: EMPTY
45173: LIST
45174: LIST
45175: PUSH
45176: LD_INT 0
45178: PUSH
45179: LD_INT 1
45181: NEG
45182: PUSH
45183: EMPTY
45184: LIST
45185: LIST
45186: PUSH
45187: LD_INT 1
45189: PUSH
45190: LD_INT 0
45192: PUSH
45193: EMPTY
45194: LIST
45195: LIST
45196: PUSH
45197: LD_INT 1
45199: PUSH
45200: LD_INT 1
45202: PUSH
45203: EMPTY
45204: LIST
45205: LIST
45206: PUSH
45207: LD_INT 0
45209: PUSH
45210: LD_INT 1
45212: PUSH
45213: EMPTY
45214: LIST
45215: LIST
45216: PUSH
45217: LD_INT 1
45219: NEG
45220: PUSH
45221: LD_INT 0
45223: PUSH
45224: EMPTY
45225: LIST
45226: LIST
45227: PUSH
45228: LD_INT 1
45230: NEG
45231: PUSH
45232: LD_INT 1
45234: NEG
45235: PUSH
45236: EMPTY
45237: LIST
45238: LIST
45239: PUSH
45240: EMPTY
45241: LIST
45242: LIST
45243: LIST
45244: LIST
45245: LIST
45246: LIST
45247: LIST
45248: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45249: LD_ADDR_VAR 0 61
45253: PUSH
45254: LD_INT 0
45256: PUSH
45257: LD_INT 0
45259: PUSH
45260: EMPTY
45261: LIST
45262: LIST
45263: PUSH
45264: LD_INT 0
45266: PUSH
45267: LD_INT 1
45269: NEG
45270: PUSH
45271: EMPTY
45272: LIST
45273: LIST
45274: PUSH
45275: LD_INT 1
45277: PUSH
45278: LD_INT 0
45280: PUSH
45281: EMPTY
45282: LIST
45283: LIST
45284: PUSH
45285: LD_INT 1
45287: PUSH
45288: LD_INT 1
45290: PUSH
45291: EMPTY
45292: LIST
45293: LIST
45294: PUSH
45295: LD_INT 0
45297: PUSH
45298: LD_INT 1
45300: PUSH
45301: EMPTY
45302: LIST
45303: LIST
45304: PUSH
45305: LD_INT 1
45307: NEG
45308: PUSH
45309: LD_INT 0
45311: PUSH
45312: EMPTY
45313: LIST
45314: LIST
45315: PUSH
45316: LD_INT 1
45318: NEG
45319: PUSH
45320: LD_INT 1
45322: NEG
45323: PUSH
45324: EMPTY
45325: LIST
45326: LIST
45327: PUSH
45328: EMPTY
45329: LIST
45330: LIST
45331: LIST
45332: LIST
45333: LIST
45334: LIST
45335: LIST
45336: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45337: LD_ADDR_VAR 0 62
45341: PUSH
45342: LD_INT 0
45344: PUSH
45345: LD_INT 0
45347: PUSH
45348: EMPTY
45349: LIST
45350: LIST
45351: PUSH
45352: LD_INT 0
45354: PUSH
45355: LD_INT 1
45357: NEG
45358: PUSH
45359: EMPTY
45360: LIST
45361: LIST
45362: PUSH
45363: LD_INT 1
45365: PUSH
45366: LD_INT 0
45368: PUSH
45369: EMPTY
45370: LIST
45371: LIST
45372: PUSH
45373: LD_INT 1
45375: PUSH
45376: LD_INT 1
45378: PUSH
45379: EMPTY
45380: LIST
45381: LIST
45382: PUSH
45383: LD_INT 0
45385: PUSH
45386: LD_INT 1
45388: PUSH
45389: EMPTY
45390: LIST
45391: LIST
45392: PUSH
45393: LD_INT 1
45395: NEG
45396: PUSH
45397: LD_INT 0
45399: PUSH
45400: EMPTY
45401: LIST
45402: LIST
45403: PUSH
45404: LD_INT 1
45406: NEG
45407: PUSH
45408: LD_INT 1
45410: NEG
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: LIST
45420: LIST
45421: LIST
45422: LIST
45423: LIST
45424: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45425: LD_ADDR_VAR 0 63
45429: PUSH
45430: LD_INT 0
45432: PUSH
45433: LD_INT 0
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: PUSH
45440: LD_INT 0
45442: PUSH
45443: LD_INT 1
45445: NEG
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: LD_INT 1
45453: PUSH
45454: LD_INT 0
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: LD_INT 1
45463: PUSH
45464: LD_INT 1
45466: PUSH
45467: EMPTY
45468: LIST
45469: LIST
45470: PUSH
45471: LD_INT 0
45473: PUSH
45474: LD_INT 1
45476: PUSH
45477: EMPTY
45478: LIST
45479: LIST
45480: PUSH
45481: LD_INT 1
45483: NEG
45484: PUSH
45485: LD_INT 0
45487: PUSH
45488: EMPTY
45489: LIST
45490: LIST
45491: PUSH
45492: LD_INT 1
45494: NEG
45495: PUSH
45496: LD_INT 1
45498: NEG
45499: PUSH
45500: EMPTY
45501: LIST
45502: LIST
45503: PUSH
45504: EMPTY
45505: LIST
45506: LIST
45507: LIST
45508: LIST
45509: LIST
45510: LIST
45511: LIST
45512: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45513: LD_ADDR_VAR 0 64
45517: PUSH
45518: LD_INT 0
45520: PUSH
45521: LD_INT 0
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: PUSH
45528: LD_INT 0
45530: PUSH
45531: LD_INT 1
45533: NEG
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 1
45541: PUSH
45542: LD_INT 0
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 1
45551: PUSH
45552: LD_INT 1
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: PUSH
45559: LD_INT 0
45561: PUSH
45562: LD_INT 1
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: PUSH
45569: LD_INT 1
45571: NEG
45572: PUSH
45573: LD_INT 0
45575: PUSH
45576: EMPTY
45577: LIST
45578: LIST
45579: PUSH
45580: LD_INT 1
45582: NEG
45583: PUSH
45584: LD_INT 1
45586: NEG
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: LIST
45596: LIST
45597: LIST
45598: LIST
45599: LIST
45600: ST_TO_ADDR
// end ; 1 :
45601: GO 51498
45603: LD_INT 1
45605: DOUBLE
45606: EQUAL
45607: IFTRUE 45611
45609: GO 48234
45611: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45612: LD_ADDR_VAR 0 11
45616: PUSH
45617: LD_INT 1
45619: NEG
45620: PUSH
45621: LD_INT 3
45623: NEG
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: PUSH
45629: LD_INT 0
45631: PUSH
45632: LD_INT 3
45634: NEG
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: PUSH
45640: LD_INT 1
45642: PUSH
45643: LD_INT 2
45645: NEG
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: PUSH
45651: EMPTY
45652: LIST
45653: LIST
45654: LIST
45655: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45656: LD_ADDR_VAR 0 12
45660: PUSH
45661: LD_INT 2
45663: PUSH
45664: LD_INT 1
45666: NEG
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: PUSH
45672: LD_INT 3
45674: PUSH
45675: LD_INT 0
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: PUSH
45682: LD_INT 3
45684: PUSH
45685: LD_INT 1
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: PUSH
45692: EMPTY
45693: LIST
45694: LIST
45695: LIST
45696: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45697: LD_ADDR_VAR 0 13
45701: PUSH
45702: LD_INT 3
45704: PUSH
45705: LD_INT 2
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: PUSH
45712: LD_INT 3
45714: PUSH
45715: LD_INT 3
45717: PUSH
45718: EMPTY
45719: LIST
45720: LIST
45721: PUSH
45722: LD_INT 2
45724: PUSH
45725: LD_INT 3
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: PUSH
45732: EMPTY
45733: LIST
45734: LIST
45735: LIST
45736: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45737: LD_ADDR_VAR 0 14
45741: PUSH
45742: LD_INT 1
45744: PUSH
45745: LD_INT 3
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: PUSH
45752: LD_INT 0
45754: PUSH
45755: LD_INT 3
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: PUSH
45762: LD_INT 1
45764: NEG
45765: PUSH
45766: LD_INT 2
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: PUSH
45773: EMPTY
45774: LIST
45775: LIST
45776: LIST
45777: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45778: LD_ADDR_VAR 0 15
45782: PUSH
45783: LD_INT 2
45785: NEG
45786: PUSH
45787: LD_INT 1
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: PUSH
45794: LD_INT 3
45796: NEG
45797: PUSH
45798: LD_INT 0
45800: PUSH
45801: EMPTY
45802: LIST
45803: LIST
45804: PUSH
45805: LD_INT 3
45807: NEG
45808: PUSH
45809: LD_INT 1
45811: NEG
45812: PUSH
45813: EMPTY
45814: LIST
45815: LIST
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: LIST
45821: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45822: LD_ADDR_VAR 0 16
45826: PUSH
45827: LD_INT 2
45829: NEG
45830: PUSH
45831: LD_INT 3
45833: NEG
45834: PUSH
45835: EMPTY
45836: LIST
45837: LIST
45838: PUSH
45839: LD_INT 3
45841: NEG
45842: PUSH
45843: LD_INT 2
45845: NEG
45846: PUSH
45847: EMPTY
45848: LIST
45849: LIST
45850: PUSH
45851: LD_INT 3
45853: NEG
45854: PUSH
45855: LD_INT 3
45857: NEG
45858: PUSH
45859: EMPTY
45860: LIST
45861: LIST
45862: PUSH
45863: EMPTY
45864: LIST
45865: LIST
45866: LIST
45867: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45868: LD_ADDR_VAR 0 17
45872: PUSH
45873: LD_INT 1
45875: NEG
45876: PUSH
45877: LD_INT 3
45879: NEG
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: PUSH
45885: LD_INT 0
45887: PUSH
45888: LD_INT 3
45890: NEG
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: PUSH
45896: LD_INT 1
45898: PUSH
45899: LD_INT 2
45901: NEG
45902: PUSH
45903: EMPTY
45904: LIST
45905: LIST
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: LIST
45911: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45912: LD_ADDR_VAR 0 18
45916: PUSH
45917: LD_INT 2
45919: PUSH
45920: LD_INT 1
45922: NEG
45923: PUSH
45924: EMPTY
45925: LIST
45926: LIST
45927: PUSH
45928: LD_INT 3
45930: PUSH
45931: LD_INT 0
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: PUSH
45938: LD_INT 3
45940: PUSH
45941: LD_INT 1
45943: PUSH
45944: EMPTY
45945: LIST
45946: LIST
45947: PUSH
45948: EMPTY
45949: LIST
45950: LIST
45951: LIST
45952: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45953: LD_ADDR_VAR 0 19
45957: PUSH
45958: LD_INT 3
45960: PUSH
45961: LD_INT 2
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PUSH
45968: LD_INT 3
45970: PUSH
45971: LD_INT 3
45973: PUSH
45974: EMPTY
45975: LIST
45976: LIST
45977: PUSH
45978: LD_INT 2
45980: PUSH
45981: LD_INT 3
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: PUSH
45988: EMPTY
45989: LIST
45990: LIST
45991: LIST
45992: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45993: LD_ADDR_VAR 0 20
45997: PUSH
45998: LD_INT 1
46000: PUSH
46001: LD_INT 3
46003: PUSH
46004: EMPTY
46005: LIST
46006: LIST
46007: PUSH
46008: LD_INT 0
46010: PUSH
46011: LD_INT 3
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: LD_INT 1
46020: NEG
46021: PUSH
46022: LD_INT 2
46024: PUSH
46025: EMPTY
46026: LIST
46027: LIST
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: LIST
46033: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46034: LD_ADDR_VAR 0 21
46038: PUSH
46039: LD_INT 2
46041: NEG
46042: PUSH
46043: LD_INT 1
46045: PUSH
46046: EMPTY
46047: LIST
46048: LIST
46049: PUSH
46050: LD_INT 3
46052: NEG
46053: PUSH
46054: LD_INT 0
46056: PUSH
46057: EMPTY
46058: LIST
46059: LIST
46060: PUSH
46061: LD_INT 3
46063: NEG
46064: PUSH
46065: LD_INT 1
46067: NEG
46068: PUSH
46069: EMPTY
46070: LIST
46071: LIST
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: LIST
46077: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46078: LD_ADDR_VAR 0 22
46082: PUSH
46083: LD_INT 2
46085: NEG
46086: PUSH
46087: LD_INT 3
46089: NEG
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: PUSH
46095: LD_INT 3
46097: NEG
46098: PUSH
46099: LD_INT 2
46101: NEG
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: PUSH
46107: LD_INT 3
46109: NEG
46110: PUSH
46111: LD_INT 3
46113: NEG
46114: PUSH
46115: EMPTY
46116: LIST
46117: LIST
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: LIST
46123: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
46124: LD_ADDR_VAR 0 23
46128: PUSH
46129: LD_INT 0
46131: PUSH
46132: LD_INT 3
46134: NEG
46135: PUSH
46136: EMPTY
46137: LIST
46138: LIST
46139: PUSH
46140: LD_INT 1
46142: NEG
46143: PUSH
46144: LD_INT 4
46146: NEG
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: PUSH
46152: LD_INT 1
46154: PUSH
46155: LD_INT 3
46157: NEG
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: PUSH
46163: EMPTY
46164: LIST
46165: LIST
46166: LIST
46167: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
46168: LD_ADDR_VAR 0 24
46172: PUSH
46173: LD_INT 3
46175: PUSH
46176: LD_INT 0
46178: PUSH
46179: EMPTY
46180: LIST
46181: LIST
46182: PUSH
46183: LD_INT 3
46185: PUSH
46186: LD_INT 1
46188: NEG
46189: PUSH
46190: EMPTY
46191: LIST
46192: LIST
46193: PUSH
46194: LD_INT 4
46196: PUSH
46197: LD_INT 1
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: LIST
46208: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
46209: LD_ADDR_VAR 0 25
46213: PUSH
46214: LD_INT 3
46216: PUSH
46217: LD_INT 3
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: PUSH
46224: LD_INT 4
46226: PUSH
46227: LD_INT 3
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: PUSH
46234: LD_INT 3
46236: PUSH
46237: LD_INT 4
46239: PUSH
46240: EMPTY
46241: LIST
46242: LIST
46243: PUSH
46244: EMPTY
46245: LIST
46246: LIST
46247: LIST
46248: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
46249: LD_ADDR_VAR 0 26
46253: PUSH
46254: LD_INT 0
46256: PUSH
46257: LD_INT 3
46259: PUSH
46260: EMPTY
46261: LIST
46262: LIST
46263: PUSH
46264: LD_INT 1
46266: PUSH
46267: LD_INT 4
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: PUSH
46274: LD_INT 1
46276: NEG
46277: PUSH
46278: LD_INT 3
46280: PUSH
46281: EMPTY
46282: LIST
46283: LIST
46284: PUSH
46285: EMPTY
46286: LIST
46287: LIST
46288: LIST
46289: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
46290: LD_ADDR_VAR 0 27
46294: PUSH
46295: LD_INT 3
46297: NEG
46298: PUSH
46299: LD_INT 0
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: LD_INT 3
46308: NEG
46309: PUSH
46310: LD_INT 1
46312: PUSH
46313: EMPTY
46314: LIST
46315: LIST
46316: PUSH
46317: LD_INT 4
46319: NEG
46320: PUSH
46321: LD_INT 1
46323: NEG
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: LIST
46333: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
46334: LD_ADDR_VAR 0 28
46338: PUSH
46339: LD_INT 3
46341: NEG
46342: PUSH
46343: LD_INT 3
46345: NEG
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: PUSH
46351: LD_INT 3
46353: NEG
46354: PUSH
46355: LD_INT 4
46357: NEG
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: PUSH
46363: LD_INT 4
46365: NEG
46366: PUSH
46367: LD_INT 3
46369: NEG
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: LIST
46379: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
46380: LD_ADDR_VAR 0 29
46384: PUSH
46385: LD_INT 1
46387: NEG
46388: PUSH
46389: LD_INT 3
46391: NEG
46392: PUSH
46393: EMPTY
46394: LIST
46395: LIST
46396: PUSH
46397: LD_INT 0
46399: PUSH
46400: LD_INT 3
46402: NEG
46403: PUSH
46404: EMPTY
46405: LIST
46406: LIST
46407: PUSH
46408: LD_INT 1
46410: PUSH
46411: LD_INT 2
46413: NEG
46414: PUSH
46415: EMPTY
46416: LIST
46417: LIST
46418: PUSH
46419: LD_INT 1
46421: NEG
46422: PUSH
46423: LD_INT 4
46425: NEG
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: PUSH
46431: LD_INT 0
46433: PUSH
46434: LD_INT 4
46436: NEG
46437: PUSH
46438: EMPTY
46439: LIST
46440: LIST
46441: PUSH
46442: LD_INT 1
46444: PUSH
46445: LD_INT 3
46447: NEG
46448: PUSH
46449: EMPTY
46450: LIST
46451: LIST
46452: PUSH
46453: LD_INT 1
46455: NEG
46456: PUSH
46457: LD_INT 5
46459: NEG
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: PUSH
46465: LD_INT 0
46467: PUSH
46468: LD_INT 5
46470: NEG
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: PUSH
46476: LD_INT 1
46478: PUSH
46479: LD_INT 4
46481: NEG
46482: PUSH
46483: EMPTY
46484: LIST
46485: LIST
46486: PUSH
46487: LD_INT 1
46489: NEG
46490: PUSH
46491: LD_INT 6
46493: NEG
46494: PUSH
46495: EMPTY
46496: LIST
46497: LIST
46498: PUSH
46499: LD_INT 0
46501: PUSH
46502: LD_INT 6
46504: NEG
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: PUSH
46510: LD_INT 1
46512: PUSH
46513: LD_INT 5
46515: NEG
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: EMPTY
46522: LIST
46523: LIST
46524: LIST
46525: LIST
46526: LIST
46527: LIST
46528: LIST
46529: LIST
46530: LIST
46531: LIST
46532: LIST
46533: LIST
46534: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
46535: LD_ADDR_VAR 0 30
46539: PUSH
46540: LD_INT 2
46542: PUSH
46543: LD_INT 1
46545: NEG
46546: PUSH
46547: EMPTY
46548: LIST
46549: LIST
46550: PUSH
46551: LD_INT 3
46553: PUSH
46554: LD_INT 0
46556: PUSH
46557: EMPTY
46558: LIST
46559: LIST
46560: PUSH
46561: LD_INT 3
46563: PUSH
46564: LD_INT 1
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: PUSH
46571: LD_INT 3
46573: PUSH
46574: LD_INT 1
46576: NEG
46577: PUSH
46578: EMPTY
46579: LIST
46580: LIST
46581: PUSH
46582: LD_INT 4
46584: PUSH
46585: LD_INT 0
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: PUSH
46592: LD_INT 4
46594: PUSH
46595: LD_INT 1
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: PUSH
46602: LD_INT 4
46604: PUSH
46605: LD_INT 1
46607: NEG
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: PUSH
46613: LD_INT 5
46615: PUSH
46616: LD_INT 0
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: LD_INT 5
46625: PUSH
46626: LD_INT 1
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: LD_INT 5
46635: PUSH
46636: LD_INT 1
46638: NEG
46639: PUSH
46640: EMPTY
46641: LIST
46642: LIST
46643: PUSH
46644: LD_INT 6
46646: PUSH
46647: LD_INT 0
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: LD_INT 6
46656: PUSH
46657: LD_INT 1
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: LIST
46668: LIST
46669: LIST
46670: LIST
46671: LIST
46672: LIST
46673: LIST
46674: LIST
46675: LIST
46676: LIST
46677: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
46678: LD_ADDR_VAR 0 31
46682: PUSH
46683: LD_INT 3
46685: PUSH
46686: LD_INT 2
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: PUSH
46693: LD_INT 3
46695: PUSH
46696: LD_INT 3
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: PUSH
46703: LD_INT 2
46705: PUSH
46706: LD_INT 3
46708: PUSH
46709: EMPTY
46710: LIST
46711: LIST
46712: PUSH
46713: LD_INT 4
46715: PUSH
46716: LD_INT 3
46718: PUSH
46719: EMPTY
46720: LIST
46721: LIST
46722: PUSH
46723: LD_INT 4
46725: PUSH
46726: LD_INT 4
46728: PUSH
46729: EMPTY
46730: LIST
46731: LIST
46732: PUSH
46733: LD_INT 3
46735: PUSH
46736: LD_INT 4
46738: PUSH
46739: EMPTY
46740: LIST
46741: LIST
46742: PUSH
46743: LD_INT 5
46745: PUSH
46746: LD_INT 4
46748: PUSH
46749: EMPTY
46750: LIST
46751: LIST
46752: PUSH
46753: LD_INT 5
46755: PUSH
46756: LD_INT 5
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: PUSH
46763: LD_INT 4
46765: PUSH
46766: LD_INT 5
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: PUSH
46773: LD_INT 6
46775: PUSH
46776: LD_INT 5
46778: PUSH
46779: EMPTY
46780: LIST
46781: LIST
46782: PUSH
46783: LD_INT 6
46785: PUSH
46786: LD_INT 6
46788: PUSH
46789: EMPTY
46790: LIST
46791: LIST
46792: PUSH
46793: LD_INT 5
46795: PUSH
46796: LD_INT 6
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: PUSH
46803: EMPTY
46804: LIST
46805: LIST
46806: LIST
46807: LIST
46808: LIST
46809: LIST
46810: LIST
46811: LIST
46812: LIST
46813: LIST
46814: LIST
46815: LIST
46816: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
46817: LD_ADDR_VAR 0 32
46821: PUSH
46822: LD_INT 1
46824: PUSH
46825: LD_INT 3
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: PUSH
46832: LD_INT 0
46834: PUSH
46835: LD_INT 3
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: PUSH
46842: LD_INT 1
46844: NEG
46845: PUSH
46846: LD_INT 2
46848: PUSH
46849: EMPTY
46850: LIST
46851: LIST
46852: PUSH
46853: LD_INT 1
46855: PUSH
46856: LD_INT 4
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: PUSH
46863: LD_INT 0
46865: PUSH
46866: LD_INT 4
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: PUSH
46873: LD_INT 1
46875: NEG
46876: PUSH
46877: LD_INT 3
46879: PUSH
46880: EMPTY
46881: LIST
46882: LIST
46883: PUSH
46884: LD_INT 1
46886: PUSH
46887: LD_INT 5
46889: PUSH
46890: EMPTY
46891: LIST
46892: LIST
46893: PUSH
46894: LD_INT 0
46896: PUSH
46897: LD_INT 5
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: PUSH
46904: LD_INT 1
46906: NEG
46907: PUSH
46908: LD_INT 4
46910: PUSH
46911: EMPTY
46912: LIST
46913: LIST
46914: PUSH
46915: LD_INT 1
46917: PUSH
46918: LD_INT 6
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: PUSH
46925: LD_INT 0
46927: PUSH
46928: LD_INT 6
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: PUSH
46935: LD_INT 1
46937: NEG
46938: PUSH
46939: LD_INT 5
46941: PUSH
46942: EMPTY
46943: LIST
46944: LIST
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: LIST
46950: LIST
46951: LIST
46952: LIST
46953: LIST
46954: LIST
46955: LIST
46956: LIST
46957: LIST
46958: LIST
46959: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
46960: LD_ADDR_VAR 0 33
46964: PUSH
46965: LD_INT 2
46967: NEG
46968: PUSH
46969: LD_INT 1
46971: PUSH
46972: EMPTY
46973: LIST
46974: LIST
46975: PUSH
46976: LD_INT 3
46978: NEG
46979: PUSH
46980: LD_INT 0
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: PUSH
46987: LD_INT 3
46989: NEG
46990: PUSH
46991: LD_INT 1
46993: NEG
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: PUSH
46999: LD_INT 3
47001: NEG
47002: PUSH
47003: LD_INT 1
47005: PUSH
47006: EMPTY
47007: LIST
47008: LIST
47009: PUSH
47010: LD_INT 4
47012: NEG
47013: PUSH
47014: LD_INT 0
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: PUSH
47021: LD_INT 4
47023: NEG
47024: PUSH
47025: LD_INT 1
47027: NEG
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: PUSH
47033: LD_INT 4
47035: NEG
47036: PUSH
47037: LD_INT 1
47039: PUSH
47040: EMPTY
47041: LIST
47042: LIST
47043: PUSH
47044: LD_INT 5
47046: NEG
47047: PUSH
47048: LD_INT 0
47050: PUSH
47051: EMPTY
47052: LIST
47053: LIST
47054: PUSH
47055: LD_INT 5
47057: NEG
47058: PUSH
47059: LD_INT 1
47061: NEG
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PUSH
47067: LD_INT 5
47069: NEG
47070: PUSH
47071: LD_INT 1
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: LD_INT 6
47080: NEG
47081: PUSH
47082: LD_INT 0
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: PUSH
47089: LD_INT 6
47091: NEG
47092: PUSH
47093: LD_INT 1
47095: NEG
47096: PUSH
47097: EMPTY
47098: LIST
47099: LIST
47100: PUSH
47101: EMPTY
47102: LIST
47103: LIST
47104: LIST
47105: LIST
47106: LIST
47107: LIST
47108: LIST
47109: LIST
47110: LIST
47111: LIST
47112: LIST
47113: LIST
47114: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
47115: LD_ADDR_VAR 0 34
47119: PUSH
47120: LD_INT 2
47122: NEG
47123: PUSH
47124: LD_INT 3
47126: NEG
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: PUSH
47132: LD_INT 3
47134: NEG
47135: PUSH
47136: LD_INT 2
47138: NEG
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: PUSH
47144: LD_INT 3
47146: NEG
47147: PUSH
47148: LD_INT 3
47150: NEG
47151: PUSH
47152: EMPTY
47153: LIST
47154: LIST
47155: PUSH
47156: LD_INT 3
47158: NEG
47159: PUSH
47160: LD_INT 4
47162: NEG
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: PUSH
47168: LD_INT 4
47170: NEG
47171: PUSH
47172: LD_INT 3
47174: NEG
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: PUSH
47180: LD_INT 4
47182: NEG
47183: PUSH
47184: LD_INT 4
47186: NEG
47187: PUSH
47188: EMPTY
47189: LIST
47190: LIST
47191: PUSH
47192: LD_INT 4
47194: NEG
47195: PUSH
47196: LD_INT 5
47198: NEG
47199: PUSH
47200: EMPTY
47201: LIST
47202: LIST
47203: PUSH
47204: LD_INT 5
47206: NEG
47207: PUSH
47208: LD_INT 4
47210: NEG
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: PUSH
47216: LD_INT 5
47218: NEG
47219: PUSH
47220: LD_INT 5
47222: NEG
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: PUSH
47228: LD_INT 5
47230: NEG
47231: PUSH
47232: LD_INT 6
47234: NEG
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: PUSH
47240: LD_INT 6
47242: NEG
47243: PUSH
47244: LD_INT 5
47246: NEG
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: PUSH
47252: LD_INT 6
47254: NEG
47255: PUSH
47256: LD_INT 6
47258: NEG
47259: PUSH
47260: EMPTY
47261: LIST
47262: LIST
47263: PUSH
47264: EMPTY
47265: LIST
47266: LIST
47267: LIST
47268: LIST
47269: LIST
47270: LIST
47271: LIST
47272: LIST
47273: LIST
47274: LIST
47275: LIST
47276: LIST
47277: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
47278: LD_ADDR_VAR 0 41
47282: PUSH
47283: LD_INT 0
47285: PUSH
47286: LD_INT 2
47288: NEG
47289: PUSH
47290: EMPTY
47291: LIST
47292: LIST
47293: PUSH
47294: LD_INT 1
47296: NEG
47297: PUSH
47298: LD_INT 3
47300: NEG
47301: PUSH
47302: EMPTY
47303: LIST
47304: LIST
47305: PUSH
47306: LD_INT 1
47308: PUSH
47309: LD_INT 2
47311: NEG
47312: PUSH
47313: EMPTY
47314: LIST
47315: LIST
47316: PUSH
47317: EMPTY
47318: LIST
47319: LIST
47320: LIST
47321: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
47322: LD_ADDR_VAR 0 42
47326: PUSH
47327: LD_INT 2
47329: PUSH
47330: LD_INT 0
47332: PUSH
47333: EMPTY
47334: LIST
47335: LIST
47336: PUSH
47337: LD_INT 2
47339: PUSH
47340: LD_INT 1
47342: NEG
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: PUSH
47348: LD_INT 3
47350: PUSH
47351: LD_INT 1
47353: PUSH
47354: EMPTY
47355: LIST
47356: LIST
47357: PUSH
47358: EMPTY
47359: LIST
47360: LIST
47361: LIST
47362: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
47363: LD_ADDR_VAR 0 43
47367: PUSH
47368: LD_INT 2
47370: PUSH
47371: LD_INT 2
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: PUSH
47378: LD_INT 3
47380: PUSH
47381: LD_INT 2
47383: PUSH
47384: EMPTY
47385: LIST
47386: LIST
47387: PUSH
47388: LD_INT 2
47390: PUSH
47391: LD_INT 3
47393: PUSH
47394: EMPTY
47395: LIST
47396: LIST
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: LIST
47402: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
47403: LD_ADDR_VAR 0 44
47407: PUSH
47408: LD_INT 0
47410: PUSH
47411: LD_INT 2
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: PUSH
47418: LD_INT 1
47420: PUSH
47421: LD_INT 3
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: PUSH
47428: LD_INT 1
47430: NEG
47431: PUSH
47432: LD_INT 2
47434: PUSH
47435: EMPTY
47436: LIST
47437: LIST
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: LIST
47443: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47444: LD_ADDR_VAR 0 45
47448: PUSH
47449: LD_INT 2
47451: NEG
47452: PUSH
47453: LD_INT 0
47455: PUSH
47456: EMPTY
47457: LIST
47458: LIST
47459: PUSH
47460: LD_INT 2
47462: NEG
47463: PUSH
47464: LD_INT 1
47466: PUSH
47467: EMPTY
47468: LIST
47469: LIST
47470: PUSH
47471: LD_INT 3
47473: NEG
47474: PUSH
47475: LD_INT 1
47477: NEG
47478: PUSH
47479: EMPTY
47480: LIST
47481: LIST
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: LIST
47487: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
47488: LD_ADDR_VAR 0 46
47492: PUSH
47493: LD_INT 2
47495: NEG
47496: PUSH
47497: LD_INT 2
47499: NEG
47500: PUSH
47501: EMPTY
47502: LIST
47503: LIST
47504: PUSH
47505: LD_INT 2
47507: NEG
47508: PUSH
47509: LD_INT 3
47511: NEG
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: PUSH
47517: LD_INT 3
47519: NEG
47520: PUSH
47521: LD_INT 2
47523: NEG
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: EMPTY
47530: LIST
47531: LIST
47532: LIST
47533: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
47534: LD_ADDR_VAR 0 47
47538: PUSH
47539: LD_INT 2
47541: NEG
47542: PUSH
47543: LD_INT 3
47545: NEG
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: PUSH
47551: LD_INT 1
47553: NEG
47554: PUSH
47555: LD_INT 3
47557: NEG
47558: PUSH
47559: EMPTY
47560: LIST
47561: LIST
47562: PUSH
47563: EMPTY
47564: LIST
47565: LIST
47566: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47567: LD_ADDR_VAR 0 48
47571: PUSH
47572: LD_INT 1
47574: PUSH
47575: LD_INT 2
47577: NEG
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: PUSH
47583: LD_INT 2
47585: PUSH
47586: LD_INT 1
47588: NEG
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
47598: LD_ADDR_VAR 0 49
47602: PUSH
47603: LD_INT 3
47605: PUSH
47606: LD_INT 1
47608: PUSH
47609: EMPTY
47610: LIST
47611: LIST
47612: PUSH
47613: LD_INT 3
47615: PUSH
47616: LD_INT 2
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: PUSH
47623: EMPTY
47624: LIST
47625: LIST
47626: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
47627: LD_ADDR_VAR 0 50
47631: PUSH
47632: LD_INT 2
47634: PUSH
47635: LD_INT 3
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: PUSH
47642: LD_INT 1
47644: PUSH
47645: LD_INT 3
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47656: LD_ADDR_VAR 0 51
47660: PUSH
47661: LD_INT 1
47663: NEG
47664: PUSH
47665: LD_INT 2
47667: PUSH
47668: EMPTY
47669: LIST
47670: LIST
47671: PUSH
47672: LD_INT 2
47674: NEG
47675: PUSH
47676: LD_INT 1
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: EMPTY
47684: LIST
47685: LIST
47686: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47687: LD_ADDR_VAR 0 52
47691: PUSH
47692: LD_INT 3
47694: NEG
47695: PUSH
47696: LD_INT 1
47698: NEG
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: LD_INT 3
47706: NEG
47707: PUSH
47708: LD_INT 2
47710: NEG
47711: PUSH
47712: EMPTY
47713: LIST
47714: LIST
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47720: LD_ADDR_VAR 0 53
47724: PUSH
47725: LD_INT 1
47727: NEG
47728: PUSH
47729: LD_INT 3
47731: NEG
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: PUSH
47737: LD_INT 0
47739: PUSH
47740: LD_INT 3
47742: NEG
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: PUSH
47748: LD_INT 1
47750: PUSH
47751: LD_INT 2
47753: NEG
47754: PUSH
47755: EMPTY
47756: LIST
47757: LIST
47758: PUSH
47759: EMPTY
47760: LIST
47761: LIST
47762: LIST
47763: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47764: LD_ADDR_VAR 0 54
47768: PUSH
47769: LD_INT 2
47771: PUSH
47772: LD_INT 1
47774: NEG
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: PUSH
47780: LD_INT 3
47782: PUSH
47783: LD_INT 0
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: PUSH
47790: LD_INT 3
47792: PUSH
47793: LD_INT 1
47795: PUSH
47796: EMPTY
47797: LIST
47798: LIST
47799: PUSH
47800: EMPTY
47801: LIST
47802: LIST
47803: LIST
47804: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47805: LD_ADDR_VAR 0 55
47809: PUSH
47810: LD_INT 3
47812: PUSH
47813: LD_INT 2
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: LD_INT 3
47822: PUSH
47823: LD_INT 3
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: PUSH
47830: LD_INT 2
47832: PUSH
47833: LD_INT 3
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: EMPTY
47841: LIST
47842: LIST
47843: LIST
47844: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47845: LD_ADDR_VAR 0 56
47849: PUSH
47850: LD_INT 1
47852: PUSH
47853: LD_INT 3
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: PUSH
47860: LD_INT 0
47862: PUSH
47863: LD_INT 3
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: PUSH
47870: LD_INT 1
47872: NEG
47873: PUSH
47874: LD_INT 2
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: LIST
47885: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47886: LD_ADDR_VAR 0 57
47890: PUSH
47891: LD_INT 2
47893: NEG
47894: PUSH
47895: LD_INT 1
47897: PUSH
47898: EMPTY
47899: LIST
47900: LIST
47901: PUSH
47902: LD_INT 3
47904: NEG
47905: PUSH
47906: LD_INT 0
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: PUSH
47913: LD_INT 3
47915: NEG
47916: PUSH
47917: LD_INT 1
47919: NEG
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: LIST
47929: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47930: LD_ADDR_VAR 0 58
47934: PUSH
47935: LD_INT 2
47937: NEG
47938: PUSH
47939: LD_INT 3
47941: NEG
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: PUSH
47947: LD_INT 3
47949: NEG
47950: PUSH
47951: LD_INT 2
47953: NEG
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: PUSH
47959: LD_INT 3
47961: NEG
47962: PUSH
47963: LD_INT 3
47965: NEG
47966: PUSH
47967: EMPTY
47968: LIST
47969: LIST
47970: PUSH
47971: EMPTY
47972: LIST
47973: LIST
47974: LIST
47975: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
47976: LD_ADDR_VAR 0 59
47980: PUSH
47981: LD_INT 1
47983: NEG
47984: PUSH
47985: LD_INT 2
47987: NEG
47988: PUSH
47989: EMPTY
47990: LIST
47991: LIST
47992: PUSH
47993: LD_INT 0
47995: PUSH
47996: LD_INT 2
47998: NEG
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: PUSH
48004: LD_INT 1
48006: PUSH
48007: LD_INT 1
48009: NEG
48010: PUSH
48011: EMPTY
48012: LIST
48013: LIST
48014: PUSH
48015: EMPTY
48016: LIST
48017: LIST
48018: LIST
48019: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48020: LD_ADDR_VAR 0 60
48024: PUSH
48025: LD_INT 1
48027: PUSH
48028: LD_INT 1
48030: NEG
48031: PUSH
48032: EMPTY
48033: LIST
48034: LIST
48035: PUSH
48036: LD_INT 2
48038: PUSH
48039: LD_INT 0
48041: PUSH
48042: EMPTY
48043: LIST
48044: LIST
48045: PUSH
48046: LD_INT 2
48048: PUSH
48049: LD_INT 1
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: PUSH
48056: EMPTY
48057: LIST
48058: LIST
48059: LIST
48060: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48061: LD_ADDR_VAR 0 61
48065: PUSH
48066: LD_INT 2
48068: PUSH
48069: LD_INT 1
48071: PUSH
48072: EMPTY
48073: LIST
48074: LIST
48075: PUSH
48076: LD_INT 2
48078: PUSH
48079: LD_INT 2
48081: PUSH
48082: EMPTY
48083: LIST
48084: LIST
48085: PUSH
48086: LD_INT 1
48088: PUSH
48089: LD_INT 2
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: LIST
48100: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48101: LD_ADDR_VAR 0 62
48105: PUSH
48106: LD_INT 1
48108: PUSH
48109: LD_INT 2
48111: PUSH
48112: EMPTY
48113: LIST
48114: LIST
48115: PUSH
48116: LD_INT 0
48118: PUSH
48119: LD_INT 2
48121: PUSH
48122: EMPTY
48123: LIST
48124: LIST
48125: PUSH
48126: LD_INT 1
48128: NEG
48129: PUSH
48130: LD_INT 1
48132: PUSH
48133: EMPTY
48134: LIST
48135: LIST
48136: PUSH
48137: EMPTY
48138: LIST
48139: LIST
48140: LIST
48141: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48142: LD_ADDR_VAR 0 63
48146: PUSH
48147: LD_INT 1
48149: NEG
48150: PUSH
48151: LD_INT 1
48153: PUSH
48154: EMPTY
48155: LIST
48156: LIST
48157: PUSH
48158: LD_INT 2
48160: NEG
48161: PUSH
48162: LD_INT 0
48164: PUSH
48165: EMPTY
48166: LIST
48167: LIST
48168: PUSH
48169: LD_INT 2
48171: NEG
48172: PUSH
48173: LD_INT 1
48175: NEG
48176: PUSH
48177: EMPTY
48178: LIST
48179: LIST
48180: PUSH
48181: EMPTY
48182: LIST
48183: LIST
48184: LIST
48185: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48186: LD_ADDR_VAR 0 64
48190: PUSH
48191: LD_INT 1
48193: NEG
48194: PUSH
48195: LD_INT 2
48197: NEG
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: PUSH
48203: LD_INT 2
48205: NEG
48206: PUSH
48207: LD_INT 1
48209: NEG
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: PUSH
48215: LD_INT 2
48217: NEG
48218: PUSH
48219: LD_INT 2
48221: NEG
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: LIST
48231: ST_TO_ADDR
// end ; 2 :
48232: GO 51498
48234: LD_INT 2
48236: DOUBLE
48237: EQUAL
48238: IFTRUE 48242
48240: GO 51497
48242: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
48243: LD_ADDR_VAR 0 29
48247: PUSH
48248: LD_INT 4
48250: PUSH
48251: LD_INT 0
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: LD_INT 4
48260: PUSH
48261: LD_INT 1
48263: NEG
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: PUSH
48269: LD_INT 5
48271: PUSH
48272: LD_INT 0
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: PUSH
48279: LD_INT 5
48281: PUSH
48282: LD_INT 1
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: PUSH
48289: LD_INT 4
48291: PUSH
48292: LD_INT 1
48294: PUSH
48295: EMPTY
48296: LIST
48297: LIST
48298: PUSH
48299: LD_INT 3
48301: PUSH
48302: LD_INT 0
48304: PUSH
48305: EMPTY
48306: LIST
48307: LIST
48308: PUSH
48309: LD_INT 3
48311: PUSH
48312: LD_INT 1
48314: NEG
48315: PUSH
48316: EMPTY
48317: LIST
48318: LIST
48319: PUSH
48320: LD_INT 3
48322: PUSH
48323: LD_INT 2
48325: NEG
48326: PUSH
48327: EMPTY
48328: LIST
48329: LIST
48330: PUSH
48331: LD_INT 5
48333: PUSH
48334: LD_INT 2
48336: PUSH
48337: EMPTY
48338: LIST
48339: LIST
48340: PUSH
48341: LD_INT 3
48343: PUSH
48344: LD_INT 3
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: PUSH
48351: LD_INT 3
48353: PUSH
48354: LD_INT 2
48356: PUSH
48357: EMPTY
48358: LIST
48359: LIST
48360: PUSH
48361: LD_INT 4
48363: PUSH
48364: LD_INT 3
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: PUSH
48371: LD_INT 4
48373: PUSH
48374: LD_INT 4
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: LD_INT 3
48383: PUSH
48384: LD_INT 4
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: PUSH
48391: LD_INT 2
48393: PUSH
48394: LD_INT 3
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: PUSH
48401: LD_INT 2
48403: PUSH
48404: LD_INT 2
48406: PUSH
48407: EMPTY
48408: LIST
48409: LIST
48410: PUSH
48411: LD_INT 4
48413: PUSH
48414: LD_INT 2
48416: PUSH
48417: EMPTY
48418: LIST
48419: LIST
48420: PUSH
48421: LD_INT 2
48423: PUSH
48424: LD_INT 4
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: PUSH
48431: LD_INT 0
48433: PUSH
48434: LD_INT 4
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: PUSH
48441: LD_INT 0
48443: PUSH
48444: LD_INT 3
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: PUSH
48451: LD_INT 1
48453: PUSH
48454: LD_INT 4
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: PUSH
48461: LD_INT 1
48463: PUSH
48464: LD_INT 5
48466: PUSH
48467: EMPTY
48468: LIST
48469: LIST
48470: PUSH
48471: LD_INT 0
48473: PUSH
48474: LD_INT 5
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: PUSH
48481: LD_INT 1
48483: NEG
48484: PUSH
48485: LD_INT 4
48487: PUSH
48488: EMPTY
48489: LIST
48490: LIST
48491: PUSH
48492: LD_INT 1
48494: NEG
48495: PUSH
48496: LD_INT 3
48498: PUSH
48499: EMPTY
48500: LIST
48501: LIST
48502: PUSH
48503: LD_INT 2
48505: PUSH
48506: LD_INT 5
48508: PUSH
48509: EMPTY
48510: LIST
48511: LIST
48512: PUSH
48513: LD_INT 2
48515: NEG
48516: PUSH
48517: LD_INT 3
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: PUSH
48524: LD_INT 3
48526: NEG
48527: PUSH
48528: LD_INT 0
48530: PUSH
48531: EMPTY
48532: LIST
48533: LIST
48534: PUSH
48535: LD_INT 3
48537: NEG
48538: PUSH
48539: LD_INT 1
48541: NEG
48542: PUSH
48543: EMPTY
48544: LIST
48545: LIST
48546: PUSH
48547: LD_INT 2
48549: NEG
48550: PUSH
48551: LD_INT 0
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: PUSH
48558: LD_INT 2
48560: NEG
48561: PUSH
48562: LD_INT 1
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: PUSH
48569: LD_INT 3
48571: NEG
48572: PUSH
48573: LD_INT 1
48575: PUSH
48576: EMPTY
48577: LIST
48578: LIST
48579: PUSH
48580: LD_INT 4
48582: NEG
48583: PUSH
48584: LD_INT 0
48586: PUSH
48587: EMPTY
48588: LIST
48589: LIST
48590: PUSH
48591: LD_INT 4
48593: NEG
48594: PUSH
48595: LD_INT 1
48597: NEG
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 4
48605: NEG
48606: PUSH
48607: LD_INT 2
48609: NEG
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: PUSH
48615: LD_INT 2
48617: NEG
48618: PUSH
48619: LD_INT 2
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: PUSH
48626: LD_INT 4
48628: NEG
48629: PUSH
48630: LD_INT 4
48632: NEG
48633: PUSH
48634: EMPTY
48635: LIST
48636: LIST
48637: PUSH
48638: LD_INT 4
48640: NEG
48641: PUSH
48642: LD_INT 5
48644: NEG
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 3
48652: NEG
48653: PUSH
48654: LD_INT 4
48656: NEG
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: PUSH
48662: LD_INT 3
48664: NEG
48665: PUSH
48666: LD_INT 3
48668: NEG
48669: PUSH
48670: EMPTY
48671: LIST
48672: LIST
48673: PUSH
48674: LD_INT 4
48676: NEG
48677: PUSH
48678: LD_INT 3
48680: NEG
48681: PUSH
48682: EMPTY
48683: LIST
48684: LIST
48685: PUSH
48686: LD_INT 5
48688: NEG
48689: PUSH
48690: LD_INT 4
48692: NEG
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: PUSH
48698: LD_INT 5
48700: NEG
48701: PUSH
48702: LD_INT 5
48704: NEG
48705: PUSH
48706: EMPTY
48707: LIST
48708: LIST
48709: PUSH
48710: LD_INT 3
48712: NEG
48713: PUSH
48714: LD_INT 5
48716: NEG
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: PUSH
48722: LD_INT 5
48724: NEG
48725: PUSH
48726: LD_INT 3
48728: NEG
48729: PUSH
48730: EMPTY
48731: LIST
48732: LIST
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: LIST
48738: LIST
48739: LIST
48740: LIST
48741: LIST
48742: LIST
48743: LIST
48744: LIST
48745: LIST
48746: LIST
48747: LIST
48748: LIST
48749: LIST
48750: LIST
48751: LIST
48752: LIST
48753: LIST
48754: LIST
48755: LIST
48756: LIST
48757: LIST
48758: LIST
48759: LIST
48760: LIST
48761: LIST
48762: LIST
48763: LIST
48764: LIST
48765: LIST
48766: LIST
48767: LIST
48768: LIST
48769: LIST
48770: LIST
48771: LIST
48772: LIST
48773: LIST
48774: LIST
48775: LIST
48776: LIST
48777: LIST
48778: LIST
48779: LIST
48780: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
48781: LD_ADDR_VAR 0 30
48785: PUSH
48786: LD_INT 4
48788: PUSH
48789: LD_INT 4
48791: PUSH
48792: EMPTY
48793: LIST
48794: LIST
48795: PUSH
48796: LD_INT 4
48798: PUSH
48799: LD_INT 3
48801: PUSH
48802: EMPTY
48803: LIST
48804: LIST
48805: PUSH
48806: LD_INT 5
48808: PUSH
48809: LD_INT 4
48811: PUSH
48812: EMPTY
48813: LIST
48814: LIST
48815: PUSH
48816: LD_INT 5
48818: PUSH
48819: LD_INT 5
48821: PUSH
48822: EMPTY
48823: LIST
48824: LIST
48825: PUSH
48826: LD_INT 4
48828: PUSH
48829: LD_INT 5
48831: PUSH
48832: EMPTY
48833: LIST
48834: LIST
48835: PUSH
48836: LD_INT 3
48838: PUSH
48839: LD_INT 4
48841: PUSH
48842: EMPTY
48843: LIST
48844: LIST
48845: PUSH
48846: LD_INT 3
48848: PUSH
48849: LD_INT 3
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: PUSH
48856: LD_INT 5
48858: PUSH
48859: LD_INT 3
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: PUSH
48866: LD_INT 3
48868: PUSH
48869: LD_INT 5
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: LD_INT 0
48878: PUSH
48879: LD_INT 3
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: PUSH
48886: LD_INT 0
48888: PUSH
48889: LD_INT 2
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: LD_INT 1
48898: PUSH
48899: LD_INT 3
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: PUSH
48906: LD_INT 1
48908: PUSH
48909: LD_INT 4
48911: PUSH
48912: EMPTY
48913: LIST
48914: LIST
48915: PUSH
48916: LD_INT 0
48918: PUSH
48919: LD_INT 4
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: LD_INT 1
48928: NEG
48929: PUSH
48930: LD_INT 3
48932: PUSH
48933: EMPTY
48934: LIST
48935: LIST
48936: PUSH
48937: LD_INT 1
48939: NEG
48940: PUSH
48941: LD_INT 2
48943: PUSH
48944: EMPTY
48945: LIST
48946: LIST
48947: PUSH
48948: LD_INT 2
48950: PUSH
48951: LD_INT 4
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: PUSH
48958: LD_INT 2
48960: NEG
48961: PUSH
48962: LD_INT 2
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: PUSH
48969: LD_INT 4
48971: NEG
48972: PUSH
48973: LD_INT 0
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: PUSH
48980: LD_INT 4
48982: NEG
48983: PUSH
48984: LD_INT 1
48986: NEG
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: PUSH
48992: LD_INT 3
48994: NEG
48995: PUSH
48996: LD_INT 0
48998: PUSH
48999: EMPTY
49000: LIST
49001: LIST
49002: PUSH
49003: LD_INT 3
49005: NEG
49006: PUSH
49007: LD_INT 1
49009: PUSH
49010: EMPTY
49011: LIST
49012: LIST
49013: PUSH
49014: LD_INT 4
49016: NEG
49017: PUSH
49018: LD_INT 1
49020: PUSH
49021: EMPTY
49022: LIST
49023: LIST
49024: PUSH
49025: LD_INT 5
49027: NEG
49028: PUSH
49029: LD_INT 0
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: LD_INT 5
49038: NEG
49039: PUSH
49040: LD_INT 1
49042: NEG
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: PUSH
49048: LD_INT 5
49050: NEG
49051: PUSH
49052: LD_INT 2
49054: NEG
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: PUSH
49060: LD_INT 3
49062: NEG
49063: PUSH
49064: LD_INT 2
49066: PUSH
49067: EMPTY
49068: LIST
49069: LIST
49070: PUSH
49071: LD_INT 3
49073: NEG
49074: PUSH
49075: LD_INT 3
49077: NEG
49078: PUSH
49079: EMPTY
49080: LIST
49081: LIST
49082: PUSH
49083: LD_INT 3
49085: NEG
49086: PUSH
49087: LD_INT 4
49089: NEG
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: PUSH
49095: LD_INT 2
49097: NEG
49098: PUSH
49099: LD_INT 3
49101: NEG
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: PUSH
49107: LD_INT 2
49109: NEG
49110: PUSH
49111: LD_INT 2
49113: NEG
49114: PUSH
49115: EMPTY
49116: LIST
49117: LIST
49118: PUSH
49119: LD_INT 3
49121: NEG
49122: PUSH
49123: LD_INT 2
49125: NEG
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: PUSH
49131: LD_INT 4
49133: NEG
49134: PUSH
49135: LD_INT 3
49137: NEG
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: PUSH
49143: LD_INT 4
49145: NEG
49146: PUSH
49147: LD_INT 4
49149: NEG
49150: PUSH
49151: EMPTY
49152: LIST
49153: LIST
49154: PUSH
49155: LD_INT 2
49157: NEG
49158: PUSH
49159: LD_INT 4
49161: NEG
49162: PUSH
49163: EMPTY
49164: LIST
49165: LIST
49166: PUSH
49167: LD_INT 4
49169: NEG
49170: PUSH
49171: LD_INT 2
49173: NEG
49174: PUSH
49175: EMPTY
49176: LIST
49177: LIST
49178: PUSH
49179: LD_INT 0
49181: PUSH
49182: LD_INT 4
49184: NEG
49185: PUSH
49186: EMPTY
49187: LIST
49188: LIST
49189: PUSH
49190: LD_INT 0
49192: PUSH
49193: LD_INT 5
49195: NEG
49196: PUSH
49197: EMPTY
49198: LIST
49199: LIST
49200: PUSH
49201: LD_INT 1
49203: PUSH
49204: LD_INT 4
49206: NEG
49207: PUSH
49208: EMPTY
49209: LIST
49210: LIST
49211: PUSH
49212: LD_INT 1
49214: PUSH
49215: LD_INT 3
49217: NEG
49218: PUSH
49219: EMPTY
49220: LIST
49221: LIST
49222: PUSH
49223: LD_INT 0
49225: PUSH
49226: LD_INT 3
49228: NEG
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: PUSH
49234: LD_INT 1
49236: NEG
49237: PUSH
49238: LD_INT 4
49240: NEG
49241: PUSH
49242: EMPTY
49243: LIST
49244: LIST
49245: PUSH
49246: LD_INT 1
49248: NEG
49249: PUSH
49250: LD_INT 5
49252: NEG
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: PUSH
49258: LD_INT 2
49260: PUSH
49261: LD_INT 3
49263: NEG
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: PUSH
49269: LD_INT 2
49271: NEG
49272: PUSH
49273: LD_INT 5
49275: NEG
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: PUSH
49281: EMPTY
49282: LIST
49283: LIST
49284: LIST
49285: LIST
49286: LIST
49287: LIST
49288: LIST
49289: LIST
49290: LIST
49291: LIST
49292: LIST
49293: LIST
49294: LIST
49295: LIST
49296: LIST
49297: LIST
49298: LIST
49299: LIST
49300: LIST
49301: LIST
49302: LIST
49303: LIST
49304: LIST
49305: LIST
49306: LIST
49307: LIST
49308: LIST
49309: LIST
49310: LIST
49311: LIST
49312: LIST
49313: LIST
49314: LIST
49315: LIST
49316: LIST
49317: LIST
49318: LIST
49319: LIST
49320: LIST
49321: LIST
49322: LIST
49323: LIST
49324: LIST
49325: LIST
49326: LIST
49327: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
49328: LD_ADDR_VAR 0 31
49332: PUSH
49333: LD_INT 0
49335: PUSH
49336: LD_INT 4
49338: PUSH
49339: EMPTY
49340: LIST
49341: LIST
49342: PUSH
49343: LD_INT 0
49345: PUSH
49346: LD_INT 3
49348: PUSH
49349: EMPTY
49350: LIST
49351: LIST
49352: PUSH
49353: LD_INT 1
49355: PUSH
49356: LD_INT 4
49358: PUSH
49359: EMPTY
49360: LIST
49361: LIST
49362: PUSH
49363: LD_INT 1
49365: PUSH
49366: LD_INT 5
49368: PUSH
49369: EMPTY
49370: LIST
49371: LIST
49372: PUSH
49373: LD_INT 0
49375: PUSH
49376: LD_INT 5
49378: PUSH
49379: EMPTY
49380: LIST
49381: LIST
49382: PUSH
49383: LD_INT 1
49385: NEG
49386: PUSH
49387: LD_INT 4
49389: PUSH
49390: EMPTY
49391: LIST
49392: LIST
49393: PUSH
49394: LD_INT 1
49396: NEG
49397: PUSH
49398: LD_INT 3
49400: PUSH
49401: EMPTY
49402: LIST
49403: LIST
49404: PUSH
49405: LD_INT 2
49407: PUSH
49408: LD_INT 5
49410: PUSH
49411: EMPTY
49412: LIST
49413: LIST
49414: PUSH
49415: LD_INT 2
49417: NEG
49418: PUSH
49419: LD_INT 3
49421: PUSH
49422: EMPTY
49423: LIST
49424: LIST
49425: PUSH
49426: LD_INT 3
49428: NEG
49429: PUSH
49430: LD_INT 0
49432: PUSH
49433: EMPTY
49434: LIST
49435: LIST
49436: PUSH
49437: LD_INT 3
49439: NEG
49440: PUSH
49441: LD_INT 1
49443: NEG
49444: PUSH
49445: EMPTY
49446: LIST
49447: LIST
49448: PUSH
49449: LD_INT 2
49451: NEG
49452: PUSH
49453: LD_INT 0
49455: PUSH
49456: EMPTY
49457: LIST
49458: LIST
49459: PUSH
49460: LD_INT 2
49462: NEG
49463: PUSH
49464: LD_INT 1
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: PUSH
49471: LD_INT 3
49473: NEG
49474: PUSH
49475: LD_INT 1
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: PUSH
49482: LD_INT 4
49484: NEG
49485: PUSH
49486: LD_INT 0
49488: PUSH
49489: EMPTY
49490: LIST
49491: LIST
49492: PUSH
49493: LD_INT 4
49495: NEG
49496: PUSH
49497: LD_INT 1
49499: NEG
49500: PUSH
49501: EMPTY
49502: LIST
49503: LIST
49504: PUSH
49505: LD_INT 4
49507: NEG
49508: PUSH
49509: LD_INT 2
49511: NEG
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: PUSH
49517: LD_INT 2
49519: NEG
49520: PUSH
49521: LD_INT 2
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: PUSH
49528: LD_INT 4
49530: NEG
49531: PUSH
49532: LD_INT 4
49534: NEG
49535: PUSH
49536: EMPTY
49537: LIST
49538: LIST
49539: PUSH
49540: LD_INT 4
49542: NEG
49543: PUSH
49544: LD_INT 5
49546: NEG
49547: PUSH
49548: EMPTY
49549: LIST
49550: LIST
49551: PUSH
49552: LD_INT 3
49554: NEG
49555: PUSH
49556: LD_INT 4
49558: NEG
49559: PUSH
49560: EMPTY
49561: LIST
49562: LIST
49563: PUSH
49564: LD_INT 3
49566: NEG
49567: PUSH
49568: LD_INT 3
49570: NEG
49571: PUSH
49572: EMPTY
49573: LIST
49574: LIST
49575: PUSH
49576: LD_INT 4
49578: NEG
49579: PUSH
49580: LD_INT 3
49582: NEG
49583: PUSH
49584: EMPTY
49585: LIST
49586: LIST
49587: PUSH
49588: LD_INT 5
49590: NEG
49591: PUSH
49592: LD_INT 4
49594: NEG
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PUSH
49600: LD_INT 5
49602: NEG
49603: PUSH
49604: LD_INT 5
49606: NEG
49607: PUSH
49608: EMPTY
49609: LIST
49610: LIST
49611: PUSH
49612: LD_INT 3
49614: NEG
49615: PUSH
49616: LD_INT 5
49618: NEG
49619: PUSH
49620: EMPTY
49621: LIST
49622: LIST
49623: PUSH
49624: LD_INT 5
49626: NEG
49627: PUSH
49628: LD_INT 3
49630: NEG
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: PUSH
49636: LD_INT 0
49638: PUSH
49639: LD_INT 3
49641: NEG
49642: PUSH
49643: EMPTY
49644: LIST
49645: LIST
49646: PUSH
49647: LD_INT 0
49649: PUSH
49650: LD_INT 4
49652: NEG
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: PUSH
49658: LD_INT 1
49660: PUSH
49661: LD_INT 3
49663: NEG
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: PUSH
49669: LD_INT 1
49671: PUSH
49672: LD_INT 2
49674: NEG
49675: PUSH
49676: EMPTY
49677: LIST
49678: LIST
49679: PUSH
49680: LD_INT 0
49682: PUSH
49683: LD_INT 2
49685: NEG
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: PUSH
49691: LD_INT 1
49693: NEG
49694: PUSH
49695: LD_INT 3
49697: NEG
49698: PUSH
49699: EMPTY
49700: LIST
49701: LIST
49702: PUSH
49703: LD_INT 1
49705: NEG
49706: PUSH
49707: LD_INT 4
49709: NEG
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: PUSH
49715: LD_INT 2
49717: PUSH
49718: LD_INT 2
49720: NEG
49721: PUSH
49722: EMPTY
49723: LIST
49724: LIST
49725: PUSH
49726: LD_INT 2
49728: NEG
49729: PUSH
49730: LD_INT 4
49732: NEG
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: PUSH
49738: LD_INT 4
49740: PUSH
49741: LD_INT 0
49743: PUSH
49744: EMPTY
49745: LIST
49746: LIST
49747: PUSH
49748: LD_INT 4
49750: PUSH
49751: LD_INT 1
49753: NEG
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: PUSH
49759: LD_INT 5
49761: PUSH
49762: LD_INT 0
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: PUSH
49769: LD_INT 5
49771: PUSH
49772: LD_INT 1
49774: PUSH
49775: EMPTY
49776: LIST
49777: LIST
49778: PUSH
49779: LD_INT 4
49781: PUSH
49782: LD_INT 1
49784: PUSH
49785: EMPTY
49786: LIST
49787: LIST
49788: PUSH
49789: LD_INT 3
49791: PUSH
49792: LD_INT 0
49794: PUSH
49795: EMPTY
49796: LIST
49797: LIST
49798: PUSH
49799: LD_INT 3
49801: PUSH
49802: LD_INT 1
49804: NEG
49805: PUSH
49806: EMPTY
49807: LIST
49808: LIST
49809: PUSH
49810: LD_INT 3
49812: PUSH
49813: LD_INT 2
49815: NEG
49816: PUSH
49817: EMPTY
49818: LIST
49819: LIST
49820: PUSH
49821: LD_INT 5
49823: PUSH
49824: LD_INT 2
49826: PUSH
49827: EMPTY
49828: LIST
49829: LIST
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: LIST
49835: LIST
49836: LIST
49837: LIST
49838: LIST
49839: LIST
49840: LIST
49841: LIST
49842: LIST
49843: LIST
49844: LIST
49845: LIST
49846: LIST
49847: LIST
49848: LIST
49849: LIST
49850: LIST
49851: LIST
49852: LIST
49853: LIST
49854: LIST
49855: LIST
49856: LIST
49857: LIST
49858: LIST
49859: LIST
49860: LIST
49861: LIST
49862: LIST
49863: LIST
49864: LIST
49865: LIST
49866: LIST
49867: LIST
49868: LIST
49869: LIST
49870: LIST
49871: LIST
49872: LIST
49873: LIST
49874: LIST
49875: LIST
49876: LIST
49877: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
49878: LD_ADDR_VAR 0 32
49882: PUSH
49883: LD_INT 4
49885: NEG
49886: PUSH
49887: LD_INT 0
49889: PUSH
49890: EMPTY
49891: LIST
49892: LIST
49893: PUSH
49894: LD_INT 4
49896: NEG
49897: PUSH
49898: LD_INT 1
49900: NEG
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PUSH
49906: LD_INT 3
49908: NEG
49909: PUSH
49910: LD_INT 0
49912: PUSH
49913: EMPTY
49914: LIST
49915: LIST
49916: PUSH
49917: LD_INT 3
49919: NEG
49920: PUSH
49921: LD_INT 1
49923: PUSH
49924: EMPTY
49925: LIST
49926: LIST
49927: PUSH
49928: LD_INT 4
49930: NEG
49931: PUSH
49932: LD_INT 1
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: PUSH
49939: LD_INT 5
49941: NEG
49942: PUSH
49943: LD_INT 0
49945: PUSH
49946: EMPTY
49947: LIST
49948: LIST
49949: PUSH
49950: LD_INT 5
49952: NEG
49953: PUSH
49954: LD_INT 1
49956: NEG
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: PUSH
49962: LD_INT 5
49964: NEG
49965: PUSH
49966: LD_INT 2
49968: NEG
49969: PUSH
49970: EMPTY
49971: LIST
49972: LIST
49973: PUSH
49974: LD_INT 3
49976: NEG
49977: PUSH
49978: LD_INT 2
49980: PUSH
49981: EMPTY
49982: LIST
49983: LIST
49984: PUSH
49985: LD_INT 3
49987: NEG
49988: PUSH
49989: LD_INT 3
49991: NEG
49992: PUSH
49993: EMPTY
49994: LIST
49995: LIST
49996: PUSH
49997: LD_INT 3
49999: NEG
50000: PUSH
50001: LD_INT 4
50003: NEG
50004: PUSH
50005: EMPTY
50006: LIST
50007: LIST
50008: PUSH
50009: LD_INT 2
50011: NEG
50012: PUSH
50013: LD_INT 3
50015: NEG
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: PUSH
50021: LD_INT 2
50023: NEG
50024: PUSH
50025: LD_INT 2
50027: NEG
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: LD_INT 3
50035: NEG
50036: PUSH
50037: LD_INT 2
50039: NEG
50040: PUSH
50041: EMPTY
50042: LIST
50043: LIST
50044: PUSH
50045: LD_INT 4
50047: NEG
50048: PUSH
50049: LD_INT 3
50051: NEG
50052: PUSH
50053: EMPTY
50054: LIST
50055: LIST
50056: PUSH
50057: LD_INT 4
50059: NEG
50060: PUSH
50061: LD_INT 4
50063: NEG
50064: PUSH
50065: EMPTY
50066: LIST
50067: LIST
50068: PUSH
50069: LD_INT 2
50071: NEG
50072: PUSH
50073: LD_INT 4
50075: NEG
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: PUSH
50081: LD_INT 4
50083: NEG
50084: PUSH
50085: LD_INT 2
50087: NEG
50088: PUSH
50089: EMPTY
50090: LIST
50091: LIST
50092: PUSH
50093: LD_INT 0
50095: PUSH
50096: LD_INT 4
50098: NEG
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: PUSH
50104: LD_INT 0
50106: PUSH
50107: LD_INT 5
50109: NEG
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: PUSH
50115: LD_INT 1
50117: PUSH
50118: LD_INT 4
50120: NEG
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: PUSH
50126: LD_INT 1
50128: PUSH
50129: LD_INT 3
50131: NEG
50132: PUSH
50133: EMPTY
50134: LIST
50135: LIST
50136: PUSH
50137: LD_INT 0
50139: PUSH
50140: LD_INT 3
50142: NEG
50143: PUSH
50144: EMPTY
50145: LIST
50146: LIST
50147: PUSH
50148: LD_INT 1
50150: NEG
50151: PUSH
50152: LD_INT 4
50154: NEG
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: LD_INT 1
50162: NEG
50163: PUSH
50164: LD_INT 5
50166: NEG
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: LD_INT 2
50174: PUSH
50175: LD_INT 3
50177: NEG
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: PUSH
50183: LD_INT 2
50185: NEG
50186: PUSH
50187: LD_INT 5
50189: NEG
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: PUSH
50195: LD_INT 3
50197: PUSH
50198: LD_INT 0
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: PUSH
50205: LD_INT 3
50207: PUSH
50208: LD_INT 1
50210: NEG
50211: PUSH
50212: EMPTY
50213: LIST
50214: LIST
50215: PUSH
50216: LD_INT 4
50218: PUSH
50219: LD_INT 0
50221: PUSH
50222: EMPTY
50223: LIST
50224: LIST
50225: PUSH
50226: LD_INT 4
50228: PUSH
50229: LD_INT 1
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: PUSH
50236: LD_INT 3
50238: PUSH
50239: LD_INT 1
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: PUSH
50246: LD_INT 2
50248: PUSH
50249: LD_INT 0
50251: PUSH
50252: EMPTY
50253: LIST
50254: LIST
50255: PUSH
50256: LD_INT 2
50258: PUSH
50259: LD_INT 1
50261: NEG
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: PUSH
50267: LD_INT 2
50269: PUSH
50270: LD_INT 2
50272: NEG
50273: PUSH
50274: EMPTY
50275: LIST
50276: LIST
50277: PUSH
50278: LD_INT 4
50280: PUSH
50281: LD_INT 2
50283: PUSH
50284: EMPTY
50285: LIST
50286: LIST
50287: PUSH
50288: LD_INT 4
50290: PUSH
50291: LD_INT 4
50293: PUSH
50294: EMPTY
50295: LIST
50296: LIST
50297: PUSH
50298: LD_INT 4
50300: PUSH
50301: LD_INT 3
50303: PUSH
50304: EMPTY
50305: LIST
50306: LIST
50307: PUSH
50308: LD_INT 5
50310: PUSH
50311: LD_INT 4
50313: PUSH
50314: EMPTY
50315: LIST
50316: LIST
50317: PUSH
50318: LD_INT 5
50320: PUSH
50321: LD_INT 5
50323: PUSH
50324: EMPTY
50325: LIST
50326: LIST
50327: PUSH
50328: LD_INT 4
50330: PUSH
50331: LD_INT 5
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: LD_INT 3
50340: PUSH
50341: LD_INT 4
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: LD_INT 3
50350: PUSH
50351: LD_INT 3
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: PUSH
50358: LD_INT 5
50360: PUSH
50361: LD_INT 3
50363: PUSH
50364: EMPTY
50365: LIST
50366: LIST
50367: PUSH
50368: LD_INT 3
50370: PUSH
50371: LD_INT 5
50373: PUSH
50374: EMPTY
50375: LIST
50376: LIST
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: LIST
50382: LIST
50383: LIST
50384: LIST
50385: LIST
50386: LIST
50387: LIST
50388: LIST
50389: LIST
50390: LIST
50391: LIST
50392: LIST
50393: LIST
50394: LIST
50395: LIST
50396: LIST
50397: LIST
50398: LIST
50399: LIST
50400: LIST
50401: LIST
50402: LIST
50403: LIST
50404: LIST
50405: LIST
50406: LIST
50407: LIST
50408: LIST
50409: LIST
50410: LIST
50411: LIST
50412: LIST
50413: LIST
50414: LIST
50415: LIST
50416: LIST
50417: LIST
50418: LIST
50419: LIST
50420: LIST
50421: LIST
50422: LIST
50423: LIST
50424: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
50425: LD_ADDR_VAR 0 33
50429: PUSH
50430: LD_INT 4
50432: NEG
50433: PUSH
50434: LD_INT 4
50436: NEG
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: PUSH
50442: LD_INT 4
50444: NEG
50445: PUSH
50446: LD_INT 5
50448: NEG
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: PUSH
50454: LD_INT 3
50456: NEG
50457: PUSH
50458: LD_INT 4
50460: NEG
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: LD_INT 3
50468: NEG
50469: PUSH
50470: LD_INT 3
50472: NEG
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: PUSH
50478: LD_INT 4
50480: NEG
50481: PUSH
50482: LD_INT 3
50484: NEG
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: PUSH
50490: LD_INT 5
50492: NEG
50493: PUSH
50494: LD_INT 4
50496: NEG
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: PUSH
50502: LD_INT 5
50504: NEG
50505: PUSH
50506: LD_INT 5
50508: NEG
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: PUSH
50514: LD_INT 3
50516: NEG
50517: PUSH
50518: LD_INT 5
50520: NEG
50521: PUSH
50522: EMPTY
50523: LIST
50524: LIST
50525: PUSH
50526: LD_INT 5
50528: NEG
50529: PUSH
50530: LD_INT 3
50532: NEG
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: PUSH
50538: LD_INT 0
50540: PUSH
50541: LD_INT 3
50543: NEG
50544: PUSH
50545: EMPTY
50546: LIST
50547: LIST
50548: PUSH
50549: LD_INT 0
50551: PUSH
50552: LD_INT 4
50554: NEG
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: LD_INT 1
50562: PUSH
50563: LD_INT 3
50565: NEG
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: LD_INT 1
50573: PUSH
50574: LD_INT 2
50576: NEG
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: PUSH
50582: LD_INT 0
50584: PUSH
50585: LD_INT 2
50587: NEG
50588: PUSH
50589: EMPTY
50590: LIST
50591: LIST
50592: PUSH
50593: LD_INT 1
50595: NEG
50596: PUSH
50597: LD_INT 3
50599: NEG
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: PUSH
50605: LD_INT 1
50607: NEG
50608: PUSH
50609: LD_INT 4
50611: NEG
50612: PUSH
50613: EMPTY
50614: LIST
50615: LIST
50616: PUSH
50617: LD_INT 2
50619: PUSH
50620: LD_INT 2
50622: NEG
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: PUSH
50628: LD_INT 2
50630: NEG
50631: PUSH
50632: LD_INT 4
50634: NEG
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: PUSH
50640: LD_INT 4
50642: PUSH
50643: LD_INT 0
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 4
50652: PUSH
50653: LD_INT 1
50655: NEG
50656: PUSH
50657: EMPTY
50658: LIST
50659: LIST
50660: PUSH
50661: LD_INT 5
50663: PUSH
50664: LD_INT 0
50666: PUSH
50667: EMPTY
50668: LIST
50669: LIST
50670: PUSH
50671: LD_INT 5
50673: PUSH
50674: LD_INT 1
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: PUSH
50681: LD_INT 4
50683: PUSH
50684: LD_INT 1
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: PUSH
50691: LD_INT 3
50693: PUSH
50694: LD_INT 0
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: PUSH
50701: LD_INT 3
50703: PUSH
50704: LD_INT 1
50706: NEG
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: PUSH
50712: LD_INT 3
50714: PUSH
50715: LD_INT 2
50717: NEG
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: PUSH
50723: LD_INT 5
50725: PUSH
50726: LD_INT 2
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: LD_INT 3
50735: PUSH
50736: LD_INT 3
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: LD_INT 3
50745: PUSH
50746: LD_INT 2
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: LD_INT 4
50755: PUSH
50756: LD_INT 3
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: LD_INT 4
50765: PUSH
50766: LD_INT 4
50768: PUSH
50769: EMPTY
50770: LIST
50771: LIST
50772: PUSH
50773: LD_INT 3
50775: PUSH
50776: LD_INT 4
50778: PUSH
50779: EMPTY
50780: LIST
50781: LIST
50782: PUSH
50783: LD_INT 2
50785: PUSH
50786: LD_INT 3
50788: PUSH
50789: EMPTY
50790: LIST
50791: LIST
50792: PUSH
50793: LD_INT 2
50795: PUSH
50796: LD_INT 2
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: PUSH
50803: LD_INT 4
50805: PUSH
50806: LD_INT 2
50808: PUSH
50809: EMPTY
50810: LIST
50811: LIST
50812: PUSH
50813: LD_INT 2
50815: PUSH
50816: LD_INT 4
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: PUSH
50823: LD_INT 0
50825: PUSH
50826: LD_INT 4
50828: PUSH
50829: EMPTY
50830: LIST
50831: LIST
50832: PUSH
50833: LD_INT 0
50835: PUSH
50836: LD_INT 3
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: PUSH
50843: LD_INT 1
50845: PUSH
50846: LD_INT 4
50848: PUSH
50849: EMPTY
50850: LIST
50851: LIST
50852: PUSH
50853: LD_INT 1
50855: PUSH
50856: LD_INT 5
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: PUSH
50863: LD_INT 0
50865: PUSH
50866: LD_INT 5
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: PUSH
50873: LD_INT 1
50875: NEG
50876: PUSH
50877: LD_INT 4
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: LD_INT 1
50886: NEG
50887: PUSH
50888: LD_INT 3
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: PUSH
50895: LD_INT 2
50897: PUSH
50898: LD_INT 5
50900: PUSH
50901: EMPTY
50902: LIST
50903: LIST
50904: PUSH
50905: LD_INT 2
50907: NEG
50908: PUSH
50909: LD_INT 3
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: PUSH
50916: EMPTY
50917: LIST
50918: LIST
50919: LIST
50920: LIST
50921: LIST
50922: LIST
50923: LIST
50924: LIST
50925: LIST
50926: LIST
50927: LIST
50928: LIST
50929: LIST
50930: LIST
50931: LIST
50932: LIST
50933: LIST
50934: LIST
50935: LIST
50936: LIST
50937: LIST
50938: LIST
50939: LIST
50940: LIST
50941: LIST
50942: LIST
50943: LIST
50944: LIST
50945: LIST
50946: LIST
50947: LIST
50948: LIST
50949: LIST
50950: LIST
50951: LIST
50952: LIST
50953: LIST
50954: LIST
50955: LIST
50956: LIST
50957: LIST
50958: LIST
50959: LIST
50960: LIST
50961: LIST
50962: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
50963: LD_ADDR_VAR 0 34
50967: PUSH
50968: LD_INT 0
50970: PUSH
50971: LD_INT 4
50973: NEG
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: PUSH
50979: LD_INT 0
50981: PUSH
50982: LD_INT 5
50984: NEG
50985: PUSH
50986: EMPTY
50987: LIST
50988: LIST
50989: PUSH
50990: LD_INT 1
50992: PUSH
50993: LD_INT 4
50995: NEG
50996: PUSH
50997: EMPTY
50998: LIST
50999: LIST
51000: PUSH
51001: LD_INT 1
51003: PUSH
51004: LD_INT 3
51006: NEG
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: PUSH
51012: LD_INT 0
51014: PUSH
51015: LD_INT 3
51017: NEG
51018: PUSH
51019: EMPTY
51020: LIST
51021: LIST
51022: PUSH
51023: LD_INT 1
51025: NEG
51026: PUSH
51027: LD_INT 4
51029: NEG
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: PUSH
51035: LD_INT 1
51037: NEG
51038: PUSH
51039: LD_INT 5
51041: NEG
51042: PUSH
51043: EMPTY
51044: LIST
51045: LIST
51046: PUSH
51047: LD_INT 2
51049: PUSH
51050: LD_INT 3
51052: NEG
51053: PUSH
51054: EMPTY
51055: LIST
51056: LIST
51057: PUSH
51058: LD_INT 2
51060: NEG
51061: PUSH
51062: LD_INT 5
51064: NEG
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: PUSH
51070: LD_INT 3
51072: PUSH
51073: LD_INT 0
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: PUSH
51080: LD_INT 3
51082: PUSH
51083: LD_INT 1
51085: NEG
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: PUSH
51091: LD_INT 4
51093: PUSH
51094: LD_INT 0
51096: PUSH
51097: EMPTY
51098: LIST
51099: LIST
51100: PUSH
51101: LD_INT 4
51103: PUSH
51104: LD_INT 1
51106: PUSH
51107: EMPTY
51108: LIST
51109: LIST
51110: PUSH
51111: LD_INT 3
51113: PUSH
51114: LD_INT 1
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: PUSH
51121: LD_INT 2
51123: PUSH
51124: LD_INT 0
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: PUSH
51131: LD_INT 2
51133: PUSH
51134: LD_INT 1
51136: NEG
51137: PUSH
51138: EMPTY
51139: LIST
51140: LIST
51141: PUSH
51142: LD_INT 2
51144: PUSH
51145: LD_INT 2
51147: NEG
51148: PUSH
51149: EMPTY
51150: LIST
51151: LIST
51152: PUSH
51153: LD_INT 4
51155: PUSH
51156: LD_INT 2
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: LD_INT 4
51165: PUSH
51166: LD_INT 4
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: LD_INT 4
51175: PUSH
51176: LD_INT 3
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: LD_INT 5
51185: PUSH
51186: LD_INT 4
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: LD_INT 5
51195: PUSH
51196: LD_INT 5
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: LD_INT 4
51205: PUSH
51206: LD_INT 5
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: PUSH
51213: LD_INT 3
51215: PUSH
51216: LD_INT 4
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: PUSH
51223: LD_INT 3
51225: PUSH
51226: LD_INT 3
51228: PUSH
51229: EMPTY
51230: LIST
51231: LIST
51232: PUSH
51233: LD_INT 5
51235: PUSH
51236: LD_INT 3
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: PUSH
51243: LD_INT 3
51245: PUSH
51246: LD_INT 5
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 0
51255: PUSH
51256: LD_INT 3
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PUSH
51263: LD_INT 0
51265: PUSH
51266: LD_INT 2
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: LD_INT 1
51275: PUSH
51276: LD_INT 3
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: PUSH
51283: LD_INT 1
51285: PUSH
51286: LD_INT 4
51288: PUSH
51289: EMPTY
51290: LIST
51291: LIST
51292: PUSH
51293: LD_INT 0
51295: PUSH
51296: LD_INT 4
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PUSH
51303: LD_INT 1
51305: NEG
51306: PUSH
51307: LD_INT 3
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: LD_INT 1
51316: NEG
51317: PUSH
51318: LD_INT 2
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: LD_INT 2
51327: PUSH
51328: LD_INT 4
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: LD_INT 2
51337: NEG
51338: PUSH
51339: LD_INT 2
51341: PUSH
51342: EMPTY
51343: LIST
51344: LIST
51345: PUSH
51346: LD_INT 4
51348: NEG
51349: PUSH
51350: LD_INT 0
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: PUSH
51357: LD_INT 4
51359: NEG
51360: PUSH
51361: LD_INT 1
51363: NEG
51364: PUSH
51365: EMPTY
51366: LIST
51367: LIST
51368: PUSH
51369: LD_INT 3
51371: NEG
51372: PUSH
51373: LD_INT 0
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: PUSH
51380: LD_INT 3
51382: NEG
51383: PUSH
51384: LD_INT 1
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: LD_INT 4
51393: NEG
51394: PUSH
51395: LD_INT 1
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: PUSH
51402: LD_INT 5
51404: NEG
51405: PUSH
51406: LD_INT 0
51408: PUSH
51409: EMPTY
51410: LIST
51411: LIST
51412: PUSH
51413: LD_INT 5
51415: NEG
51416: PUSH
51417: LD_INT 1
51419: NEG
51420: PUSH
51421: EMPTY
51422: LIST
51423: LIST
51424: PUSH
51425: LD_INT 5
51427: NEG
51428: PUSH
51429: LD_INT 2
51431: NEG
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: PUSH
51437: LD_INT 3
51439: NEG
51440: PUSH
51441: LD_INT 2
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: PUSH
51448: EMPTY
51449: LIST
51450: LIST
51451: LIST
51452: LIST
51453: LIST
51454: LIST
51455: LIST
51456: LIST
51457: LIST
51458: LIST
51459: LIST
51460: LIST
51461: LIST
51462: LIST
51463: LIST
51464: LIST
51465: LIST
51466: LIST
51467: LIST
51468: LIST
51469: LIST
51470: LIST
51471: LIST
51472: LIST
51473: LIST
51474: LIST
51475: LIST
51476: LIST
51477: LIST
51478: LIST
51479: LIST
51480: LIST
51481: LIST
51482: LIST
51483: LIST
51484: LIST
51485: LIST
51486: LIST
51487: LIST
51488: LIST
51489: LIST
51490: LIST
51491: LIST
51492: LIST
51493: LIST
51494: ST_TO_ADDR
// end ; end ;
51495: GO 51498
51497: POP
// case btype of b_depot , b_warehouse :
51498: LD_VAR 0 1
51502: PUSH
51503: LD_INT 0
51505: DOUBLE
51506: EQUAL
51507: IFTRUE 51517
51509: LD_INT 1
51511: DOUBLE
51512: EQUAL
51513: IFTRUE 51517
51515: GO 51718
51517: POP
// case nation of nation_american :
51518: LD_VAR 0 5
51522: PUSH
51523: LD_INT 1
51525: DOUBLE
51526: EQUAL
51527: IFTRUE 51531
51529: GO 51587
51531: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
51532: LD_ADDR_VAR 0 9
51536: PUSH
51537: LD_VAR 0 11
51541: PUSH
51542: LD_VAR 0 12
51546: PUSH
51547: LD_VAR 0 13
51551: PUSH
51552: LD_VAR 0 14
51556: PUSH
51557: LD_VAR 0 15
51561: PUSH
51562: LD_VAR 0 16
51566: PUSH
51567: EMPTY
51568: LIST
51569: LIST
51570: LIST
51571: LIST
51572: LIST
51573: LIST
51574: PUSH
51575: LD_VAR 0 4
51579: PUSH
51580: LD_INT 1
51582: PLUS
51583: ARRAY
51584: ST_TO_ADDR
51585: GO 51716
51587: LD_INT 2
51589: DOUBLE
51590: EQUAL
51591: IFTRUE 51595
51593: GO 51651
51595: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
51596: LD_ADDR_VAR 0 9
51600: PUSH
51601: LD_VAR 0 17
51605: PUSH
51606: LD_VAR 0 18
51610: PUSH
51611: LD_VAR 0 19
51615: PUSH
51616: LD_VAR 0 20
51620: PUSH
51621: LD_VAR 0 21
51625: PUSH
51626: LD_VAR 0 22
51630: PUSH
51631: EMPTY
51632: LIST
51633: LIST
51634: LIST
51635: LIST
51636: LIST
51637: LIST
51638: PUSH
51639: LD_VAR 0 4
51643: PUSH
51644: LD_INT 1
51646: PLUS
51647: ARRAY
51648: ST_TO_ADDR
51649: GO 51716
51651: LD_INT 3
51653: DOUBLE
51654: EQUAL
51655: IFTRUE 51659
51657: GO 51715
51659: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
51660: LD_ADDR_VAR 0 9
51664: PUSH
51665: LD_VAR 0 23
51669: PUSH
51670: LD_VAR 0 24
51674: PUSH
51675: LD_VAR 0 25
51679: PUSH
51680: LD_VAR 0 26
51684: PUSH
51685: LD_VAR 0 27
51689: PUSH
51690: LD_VAR 0 28
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: LIST
51699: LIST
51700: LIST
51701: LIST
51702: PUSH
51703: LD_VAR 0 4
51707: PUSH
51708: LD_INT 1
51710: PLUS
51711: ARRAY
51712: ST_TO_ADDR
51713: GO 51716
51715: POP
51716: GO 52271
51718: LD_INT 2
51720: DOUBLE
51721: EQUAL
51722: IFTRUE 51732
51724: LD_INT 3
51726: DOUBLE
51727: EQUAL
51728: IFTRUE 51732
51730: GO 51788
51732: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
51733: LD_ADDR_VAR 0 9
51737: PUSH
51738: LD_VAR 0 29
51742: PUSH
51743: LD_VAR 0 30
51747: PUSH
51748: LD_VAR 0 31
51752: PUSH
51753: LD_VAR 0 32
51757: PUSH
51758: LD_VAR 0 33
51762: PUSH
51763: LD_VAR 0 34
51767: PUSH
51768: EMPTY
51769: LIST
51770: LIST
51771: LIST
51772: LIST
51773: LIST
51774: LIST
51775: PUSH
51776: LD_VAR 0 4
51780: PUSH
51781: LD_INT 1
51783: PLUS
51784: ARRAY
51785: ST_TO_ADDR
51786: GO 52271
51788: LD_INT 16
51790: DOUBLE
51791: EQUAL
51792: IFTRUE 51850
51794: LD_INT 17
51796: DOUBLE
51797: EQUAL
51798: IFTRUE 51850
51800: LD_INT 18
51802: DOUBLE
51803: EQUAL
51804: IFTRUE 51850
51806: LD_INT 19
51808: DOUBLE
51809: EQUAL
51810: IFTRUE 51850
51812: LD_INT 22
51814: DOUBLE
51815: EQUAL
51816: IFTRUE 51850
51818: LD_INT 20
51820: DOUBLE
51821: EQUAL
51822: IFTRUE 51850
51824: LD_INT 21
51826: DOUBLE
51827: EQUAL
51828: IFTRUE 51850
51830: LD_INT 23
51832: DOUBLE
51833: EQUAL
51834: IFTRUE 51850
51836: LD_INT 24
51838: DOUBLE
51839: EQUAL
51840: IFTRUE 51850
51842: LD_INT 25
51844: DOUBLE
51845: EQUAL
51846: IFTRUE 51850
51848: GO 51906
51850: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
51851: LD_ADDR_VAR 0 9
51855: PUSH
51856: LD_VAR 0 35
51860: PUSH
51861: LD_VAR 0 36
51865: PUSH
51866: LD_VAR 0 37
51870: PUSH
51871: LD_VAR 0 38
51875: PUSH
51876: LD_VAR 0 39
51880: PUSH
51881: LD_VAR 0 40
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: LIST
51890: LIST
51891: LIST
51892: LIST
51893: PUSH
51894: LD_VAR 0 4
51898: PUSH
51899: LD_INT 1
51901: PLUS
51902: ARRAY
51903: ST_TO_ADDR
51904: GO 52271
51906: LD_INT 6
51908: DOUBLE
51909: EQUAL
51910: IFTRUE 51962
51912: LD_INT 7
51914: DOUBLE
51915: EQUAL
51916: IFTRUE 51962
51918: LD_INT 8
51920: DOUBLE
51921: EQUAL
51922: IFTRUE 51962
51924: LD_INT 13
51926: DOUBLE
51927: EQUAL
51928: IFTRUE 51962
51930: LD_INT 12
51932: DOUBLE
51933: EQUAL
51934: IFTRUE 51962
51936: LD_INT 15
51938: DOUBLE
51939: EQUAL
51940: IFTRUE 51962
51942: LD_INT 11
51944: DOUBLE
51945: EQUAL
51946: IFTRUE 51962
51948: LD_INT 14
51950: DOUBLE
51951: EQUAL
51952: IFTRUE 51962
51954: LD_INT 10
51956: DOUBLE
51957: EQUAL
51958: IFTRUE 51962
51960: GO 52018
51962: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
51963: LD_ADDR_VAR 0 9
51967: PUSH
51968: LD_VAR 0 41
51972: PUSH
51973: LD_VAR 0 42
51977: PUSH
51978: LD_VAR 0 43
51982: PUSH
51983: LD_VAR 0 44
51987: PUSH
51988: LD_VAR 0 45
51992: PUSH
51993: LD_VAR 0 46
51997: PUSH
51998: EMPTY
51999: LIST
52000: LIST
52001: LIST
52002: LIST
52003: LIST
52004: LIST
52005: PUSH
52006: LD_VAR 0 4
52010: PUSH
52011: LD_INT 1
52013: PLUS
52014: ARRAY
52015: ST_TO_ADDR
52016: GO 52271
52018: LD_INT 36
52020: DOUBLE
52021: EQUAL
52022: IFTRUE 52026
52024: GO 52082
52026: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
52027: LD_ADDR_VAR 0 9
52031: PUSH
52032: LD_VAR 0 47
52036: PUSH
52037: LD_VAR 0 48
52041: PUSH
52042: LD_VAR 0 49
52046: PUSH
52047: LD_VAR 0 50
52051: PUSH
52052: LD_VAR 0 51
52056: PUSH
52057: LD_VAR 0 52
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: LIST
52066: LIST
52067: LIST
52068: LIST
52069: PUSH
52070: LD_VAR 0 4
52074: PUSH
52075: LD_INT 1
52077: PLUS
52078: ARRAY
52079: ST_TO_ADDR
52080: GO 52271
52082: LD_INT 4
52084: DOUBLE
52085: EQUAL
52086: IFTRUE 52108
52088: LD_INT 5
52090: DOUBLE
52091: EQUAL
52092: IFTRUE 52108
52094: LD_INT 34
52096: DOUBLE
52097: EQUAL
52098: IFTRUE 52108
52100: LD_INT 37
52102: DOUBLE
52103: EQUAL
52104: IFTRUE 52108
52106: GO 52164
52108: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
52109: LD_ADDR_VAR 0 9
52113: PUSH
52114: LD_VAR 0 53
52118: PUSH
52119: LD_VAR 0 54
52123: PUSH
52124: LD_VAR 0 55
52128: PUSH
52129: LD_VAR 0 56
52133: PUSH
52134: LD_VAR 0 57
52138: PUSH
52139: LD_VAR 0 58
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: LIST
52148: LIST
52149: LIST
52150: LIST
52151: PUSH
52152: LD_VAR 0 4
52156: PUSH
52157: LD_INT 1
52159: PLUS
52160: ARRAY
52161: ST_TO_ADDR
52162: GO 52271
52164: LD_INT 31
52166: DOUBLE
52167: EQUAL
52168: IFTRUE 52214
52170: LD_INT 32
52172: DOUBLE
52173: EQUAL
52174: IFTRUE 52214
52176: LD_INT 33
52178: DOUBLE
52179: EQUAL
52180: IFTRUE 52214
52182: LD_INT 27
52184: DOUBLE
52185: EQUAL
52186: IFTRUE 52214
52188: LD_INT 26
52190: DOUBLE
52191: EQUAL
52192: IFTRUE 52214
52194: LD_INT 28
52196: DOUBLE
52197: EQUAL
52198: IFTRUE 52214
52200: LD_INT 29
52202: DOUBLE
52203: EQUAL
52204: IFTRUE 52214
52206: LD_INT 30
52208: DOUBLE
52209: EQUAL
52210: IFTRUE 52214
52212: GO 52270
52214: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
52215: LD_ADDR_VAR 0 9
52219: PUSH
52220: LD_VAR 0 59
52224: PUSH
52225: LD_VAR 0 60
52229: PUSH
52230: LD_VAR 0 61
52234: PUSH
52235: LD_VAR 0 62
52239: PUSH
52240: LD_VAR 0 63
52244: PUSH
52245: LD_VAR 0 64
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: LIST
52254: LIST
52255: LIST
52256: LIST
52257: PUSH
52258: LD_VAR 0 4
52262: PUSH
52263: LD_INT 1
52265: PLUS
52266: ARRAY
52267: ST_TO_ADDR
52268: GO 52271
52270: POP
// temp_list2 = [ ] ;
52271: LD_ADDR_VAR 0 10
52275: PUSH
52276: EMPTY
52277: ST_TO_ADDR
// for i in temp_list do
52278: LD_ADDR_VAR 0 8
52282: PUSH
52283: LD_VAR 0 9
52287: PUSH
52288: FOR_IN
52289: IFFALSE 52341
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
52291: LD_ADDR_VAR 0 10
52295: PUSH
52296: LD_VAR 0 10
52300: PUSH
52301: LD_VAR 0 8
52305: PUSH
52306: LD_INT 1
52308: ARRAY
52309: PUSH
52310: LD_VAR 0 2
52314: PLUS
52315: PUSH
52316: LD_VAR 0 8
52320: PUSH
52321: LD_INT 2
52323: ARRAY
52324: PUSH
52325: LD_VAR 0 3
52329: PLUS
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: PUSH
52335: EMPTY
52336: LIST
52337: ADD
52338: ST_TO_ADDR
52339: GO 52288
52341: POP
52342: POP
// result = temp_list2 ;
52343: LD_ADDR_VAR 0 7
52347: PUSH
52348: LD_VAR 0 10
52352: ST_TO_ADDR
// end ;
52353: LD_VAR 0 7
52357: RET
// export function EnemyInRange ( unit , dist ) ; begin
52358: LD_INT 0
52360: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
52361: LD_ADDR_VAR 0 3
52365: PUSH
52366: LD_VAR 0 1
52370: PPUSH
52371: CALL_OW 255
52375: PPUSH
52376: LD_VAR 0 1
52380: PPUSH
52381: CALL_OW 250
52385: PPUSH
52386: LD_VAR 0 1
52390: PPUSH
52391: CALL_OW 251
52395: PPUSH
52396: LD_VAR 0 2
52400: PPUSH
52401: CALL 25754 0 4
52405: PUSH
52406: LD_INT 4
52408: ARRAY
52409: ST_TO_ADDR
// end ;
52410: LD_VAR 0 3
52414: RET
// export function PlayerSeeMe ( unit ) ; begin
52415: LD_INT 0
52417: PPUSH
// result := See ( your_side , unit ) ;
52418: LD_ADDR_VAR 0 2
52422: PUSH
52423: LD_OWVAR 2
52427: PPUSH
52428: LD_VAR 0 1
52432: PPUSH
52433: CALL_OW 292
52437: ST_TO_ADDR
// end ;
52438: LD_VAR 0 2
52442: RET
// export function ReverseDir ( unit ) ; begin
52443: LD_INT 0
52445: PPUSH
// if not unit then
52446: LD_VAR 0 1
52450: NOT
52451: IFFALSE 52455
// exit ;
52453: GO 52478
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
52455: LD_ADDR_VAR 0 2
52459: PUSH
52460: LD_VAR 0 1
52464: PPUSH
52465: CALL_OW 254
52469: PUSH
52470: LD_INT 3
52472: PLUS
52473: PUSH
52474: LD_INT 6
52476: MOD
52477: ST_TO_ADDR
// end ;
52478: LD_VAR 0 2
52482: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
52483: LD_INT 0
52485: PPUSH
52486: PPUSH
52487: PPUSH
52488: PPUSH
52489: PPUSH
// if not hexes then
52490: LD_VAR 0 2
52494: NOT
52495: IFFALSE 52499
// exit ;
52497: GO 52647
// dist := 9999 ;
52499: LD_ADDR_VAR 0 5
52503: PUSH
52504: LD_INT 9999
52506: ST_TO_ADDR
// for i = 1 to hexes do
52507: LD_ADDR_VAR 0 4
52511: PUSH
52512: DOUBLE
52513: LD_INT 1
52515: DEC
52516: ST_TO_ADDR
52517: LD_VAR 0 2
52521: PUSH
52522: FOR_TO
52523: IFFALSE 52635
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
52525: LD_VAR 0 1
52529: PPUSH
52530: LD_VAR 0 2
52534: PUSH
52535: LD_VAR 0 4
52539: ARRAY
52540: PUSH
52541: LD_INT 1
52543: ARRAY
52544: PPUSH
52545: LD_VAR 0 2
52549: PUSH
52550: LD_VAR 0 4
52554: ARRAY
52555: PUSH
52556: LD_INT 2
52558: ARRAY
52559: PPUSH
52560: CALL_OW 297
52564: PUSH
52565: LD_VAR 0 5
52569: LESS
52570: IFFALSE 52633
// begin hex := hexes [ i ] ;
52572: LD_ADDR_VAR 0 7
52576: PUSH
52577: LD_VAR 0 2
52581: PUSH
52582: LD_VAR 0 4
52586: ARRAY
52587: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52588: LD_ADDR_VAR 0 5
52592: PUSH
52593: LD_VAR 0 1
52597: PPUSH
52598: LD_VAR 0 2
52602: PUSH
52603: LD_VAR 0 4
52607: ARRAY
52608: PUSH
52609: LD_INT 1
52611: ARRAY
52612: PPUSH
52613: LD_VAR 0 2
52617: PUSH
52618: LD_VAR 0 4
52622: ARRAY
52623: PUSH
52624: LD_INT 2
52626: ARRAY
52627: PPUSH
52628: CALL_OW 297
52632: ST_TO_ADDR
// end ; end ;
52633: GO 52522
52635: POP
52636: POP
// result := hex ;
52637: LD_ADDR_VAR 0 3
52641: PUSH
52642: LD_VAR 0 7
52646: ST_TO_ADDR
// end ;
52647: LD_VAR 0 3
52651: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
52652: LD_INT 0
52654: PPUSH
52655: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
52656: LD_VAR 0 1
52660: NOT
52661: PUSH
52662: LD_VAR 0 1
52666: PUSH
52667: LD_INT 21
52669: PUSH
52670: LD_INT 2
52672: PUSH
52673: EMPTY
52674: LIST
52675: LIST
52676: PUSH
52677: LD_INT 23
52679: PUSH
52680: LD_INT 2
52682: PUSH
52683: EMPTY
52684: LIST
52685: LIST
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PPUSH
52691: CALL_OW 69
52695: IN
52696: NOT
52697: OR
52698: IFFALSE 52702
// exit ;
52700: GO 52749
// for i = 1 to 3 do
52702: LD_ADDR_VAR 0 3
52706: PUSH
52707: DOUBLE
52708: LD_INT 1
52710: DEC
52711: ST_TO_ADDR
52712: LD_INT 3
52714: PUSH
52715: FOR_TO
52716: IFFALSE 52747
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
52718: LD_VAR 0 1
52722: PPUSH
52723: CALL_OW 250
52727: PPUSH
52728: LD_VAR 0 1
52732: PPUSH
52733: CALL_OW 251
52737: PPUSH
52738: LD_INT 1
52740: PPUSH
52741: CALL_OW 453
52745: GO 52715
52747: POP
52748: POP
// end ;
52749: LD_VAR 0 2
52753: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
52754: LD_INT 0
52756: PPUSH
52757: PPUSH
52758: PPUSH
52759: PPUSH
52760: PPUSH
52761: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
52762: LD_VAR 0 1
52766: NOT
52767: PUSH
52768: LD_VAR 0 2
52772: NOT
52773: OR
52774: PUSH
52775: LD_VAR 0 1
52779: PPUSH
52780: CALL_OW 314
52784: OR
52785: IFFALSE 52789
// exit ;
52787: GO 53230
// x := GetX ( enemy_unit ) ;
52789: LD_ADDR_VAR 0 7
52793: PUSH
52794: LD_VAR 0 2
52798: PPUSH
52799: CALL_OW 250
52803: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
52804: LD_ADDR_VAR 0 8
52808: PUSH
52809: LD_VAR 0 2
52813: PPUSH
52814: CALL_OW 251
52818: ST_TO_ADDR
// if not x or not y then
52819: LD_VAR 0 7
52823: NOT
52824: PUSH
52825: LD_VAR 0 8
52829: NOT
52830: OR
52831: IFFALSE 52835
// exit ;
52833: GO 53230
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
52835: LD_ADDR_VAR 0 6
52839: PUSH
52840: LD_VAR 0 7
52844: PPUSH
52845: LD_INT 0
52847: PPUSH
52848: LD_INT 4
52850: PPUSH
52851: CALL_OW 272
52855: PUSH
52856: LD_VAR 0 8
52860: PPUSH
52861: LD_INT 0
52863: PPUSH
52864: LD_INT 4
52866: PPUSH
52867: CALL_OW 273
52871: PUSH
52872: EMPTY
52873: LIST
52874: LIST
52875: PUSH
52876: LD_VAR 0 7
52880: PPUSH
52881: LD_INT 1
52883: PPUSH
52884: LD_INT 4
52886: PPUSH
52887: CALL_OW 272
52891: PUSH
52892: LD_VAR 0 8
52896: PPUSH
52897: LD_INT 1
52899: PPUSH
52900: LD_INT 4
52902: PPUSH
52903: CALL_OW 273
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: PUSH
52912: LD_VAR 0 7
52916: PPUSH
52917: LD_INT 2
52919: PPUSH
52920: LD_INT 4
52922: PPUSH
52923: CALL_OW 272
52927: PUSH
52928: LD_VAR 0 8
52932: PPUSH
52933: LD_INT 2
52935: PPUSH
52936: LD_INT 4
52938: PPUSH
52939: CALL_OW 273
52943: PUSH
52944: EMPTY
52945: LIST
52946: LIST
52947: PUSH
52948: LD_VAR 0 7
52952: PPUSH
52953: LD_INT 3
52955: PPUSH
52956: LD_INT 4
52958: PPUSH
52959: CALL_OW 272
52963: PUSH
52964: LD_VAR 0 8
52968: PPUSH
52969: LD_INT 3
52971: PPUSH
52972: LD_INT 4
52974: PPUSH
52975: CALL_OW 273
52979: PUSH
52980: EMPTY
52981: LIST
52982: LIST
52983: PUSH
52984: LD_VAR 0 7
52988: PPUSH
52989: LD_INT 4
52991: PPUSH
52992: LD_INT 4
52994: PPUSH
52995: CALL_OW 272
52999: PUSH
53000: LD_VAR 0 8
53004: PPUSH
53005: LD_INT 4
53007: PPUSH
53008: LD_INT 4
53010: PPUSH
53011: CALL_OW 273
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: PUSH
53020: LD_VAR 0 7
53024: PPUSH
53025: LD_INT 5
53027: PPUSH
53028: LD_INT 4
53030: PPUSH
53031: CALL_OW 272
53035: PUSH
53036: LD_VAR 0 8
53040: PPUSH
53041: LD_INT 5
53043: PPUSH
53044: LD_INT 4
53046: PPUSH
53047: CALL_OW 273
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: LIST
53060: LIST
53061: LIST
53062: LIST
53063: ST_TO_ADDR
// for i = tmp downto 1 do
53064: LD_ADDR_VAR 0 4
53068: PUSH
53069: DOUBLE
53070: LD_VAR 0 6
53074: INC
53075: ST_TO_ADDR
53076: LD_INT 1
53078: PUSH
53079: FOR_DOWNTO
53080: IFFALSE 53181
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
53082: LD_VAR 0 6
53086: PUSH
53087: LD_VAR 0 4
53091: ARRAY
53092: PUSH
53093: LD_INT 1
53095: ARRAY
53096: PPUSH
53097: LD_VAR 0 6
53101: PUSH
53102: LD_VAR 0 4
53106: ARRAY
53107: PUSH
53108: LD_INT 2
53110: ARRAY
53111: PPUSH
53112: CALL_OW 488
53116: NOT
53117: PUSH
53118: LD_VAR 0 6
53122: PUSH
53123: LD_VAR 0 4
53127: ARRAY
53128: PUSH
53129: LD_INT 1
53131: ARRAY
53132: PPUSH
53133: LD_VAR 0 6
53137: PUSH
53138: LD_VAR 0 4
53142: ARRAY
53143: PUSH
53144: LD_INT 2
53146: ARRAY
53147: PPUSH
53148: CALL_OW 428
53152: PUSH
53153: LD_INT 0
53155: NONEQUAL
53156: OR
53157: IFFALSE 53179
// tmp := Delete ( tmp , i ) ;
53159: LD_ADDR_VAR 0 6
53163: PUSH
53164: LD_VAR 0 6
53168: PPUSH
53169: LD_VAR 0 4
53173: PPUSH
53174: CALL_OW 3
53178: ST_TO_ADDR
53179: GO 53079
53181: POP
53182: POP
// j := GetClosestHex ( unit , tmp ) ;
53183: LD_ADDR_VAR 0 5
53187: PUSH
53188: LD_VAR 0 1
53192: PPUSH
53193: LD_VAR 0 6
53197: PPUSH
53198: CALL 52483 0 2
53202: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
53203: LD_VAR 0 1
53207: PPUSH
53208: LD_VAR 0 5
53212: PUSH
53213: LD_INT 1
53215: ARRAY
53216: PPUSH
53217: LD_VAR 0 5
53221: PUSH
53222: LD_INT 2
53224: ARRAY
53225: PPUSH
53226: CALL_OW 111
// end ;
53230: LD_VAR 0 3
53234: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
53235: LD_INT 0
53237: PPUSH
53238: PPUSH
53239: PPUSH
// uc_side = 0 ;
53240: LD_ADDR_OWVAR 20
53244: PUSH
53245: LD_INT 0
53247: ST_TO_ADDR
// uc_nation = 0 ;
53248: LD_ADDR_OWVAR 21
53252: PUSH
53253: LD_INT 0
53255: ST_TO_ADDR
// InitHc_All ( ) ;
53256: CALL_OW 584
// InitVc ;
53260: CALL_OW 20
// if mastodonts then
53264: LD_VAR 0 6
53268: IFFALSE 53335
// for i = 1 to mastodonts do
53270: LD_ADDR_VAR 0 11
53274: PUSH
53275: DOUBLE
53276: LD_INT 1
53278: DEC
53279: ST_TO_ADDR
53280: LD_VAR 0 6
53284: PUSH
53285: FOR_TO
53286: IFFALSE 53333
// begin vc_chassis := 31 ;
53288: LD_ADDR_OWVAR 37
53292: PUSH
53293: LD_INT 31
53295: ST_TO_ADDR
// vc_control := control_rider ;
53296: LD_ADDR_OWVAR 38
53300: PUSH
53301: LD_INT 4
53303: ST_TO_ADDR
// animal := CreateVehicle ;
53304: LD_ADDR_VAR 0 12
53308: PUSH
53309: CALL_OW 45
53313: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53314: LD_VAR 0 12
53318: PPUSH
53319: LD_VAR 0 8
53323: PPUSH
53324: LD_INT 0
53326: PPUSH
53327: CALL 55523 0 3
// end ;
53331: GO 53285
53333: POP
53334: POP
// if horses then
53335: LD_VAR 0 5
53339: IFFALSE 53406
// for i = 1 to horses do
53341: LD_ADDR_VAR 0 11
53345: PUSH
53346: DOUBLE
53347: LD_INT 1
53349: DEC
53350: ST_TO_ADDR
53351: LD_VAR 0 5
53355: PUSH
53356: FOR_TO
53357: IFFALSE 53404
// begin hc_class := 21 ;
53359: LD_ADDR_OWVAR 28
53363: PUSH
53364: LD_INT 21
53366: ST_TO_ADDR
// hc_gallery :=  ;
53367: LD_ADDR_OWVAR 33
53371: PUSH
53372: LD_STRING 
53374: ST_TO_ADDR
// animal := CreateHuman ;
53375: LD_ADDR_VAR 0 12
53379: PUSH
53380: CALL_OW 44
53384: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53385: LD_VAR 0 12
53389: PPUSH
53390: LD_VAR 0 8
53394: PPUSH
53395: LD_INT 0
53397: PPUSH
53398: CALL 55523 0 3
// end ;
53402: GO 53356
53404: POP
53405: POP
// if birds then
53406: LD_VAR 0 1
53410: IFFALSE 53477
// for i = 1 to birds do
53412: LD_ADDR_VAR 0 11
53416: PUSH
53417: DOUBLE
53418: LD_INT 1
53420: DEC
53421: ST_TO_ADDR
53422: LD_VAR 0 1
53426: PUSH
53427: FOR_TO
53428: IFFALSE 53475
// begin hc_class = 18 ;
53430: LD_ADDR_OWVAR 28
53434: PUSH
53435: LD_INT 18
53437: ST_TO_ADDR
// hc_gallery =  ;
53438: LD_ADDR_OWVAR 33
53442: PUSH
53443: LD_STRING 
53445: ST_TO_ADDR
// animal := CreateHuman ;
53446: LD_ADDR_VAR 0 12
53450: PUSH
53451: CALL_OW 44
53455: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53456: LD_VAR 0 12
53460: PPUSH
53461: LD_VAR 0 8
53465: PPUSH
53466: LD_INT 0
53468: PPUSH
53469: CALL 55523 0 3
// end ;
53473: GO 53427
53475: POP
53476: POP
// if tigers then
53477: LD_VAR 0 2
53481: IFFALSE 53565
// for i = 1 to tigers do
53483: LD_ADDR_VAR 0 11
53487: PUSH
53488: DOUBLE
53489: LD_INT 1
53491: DEC
53492: ST_TO_ADDR
53493: LD_VAR 0 2
53497: PUSH
53498: FOR_TO
53499: IFFALSE 53563
// begin hc_class = class_tiger ;
53501: LD_ADDR_OWVAR 28
53505: PUSH
53506: LD_INT 14
53508: ST_TO_ADDR
// hc_gallery =  ;
53509: LD_ADDR_OWVAR 33
53513: PUSH
53514: LD_STRING 
53516: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
53517: LD_ADDR_OWVAR 35
53521: PUSH
53522: LD_INT 7
53524: NEG
53525: PPUSH
53526: LD_INT 7
53528: PPUSH
53529: CALL_OW 12
53533: ST_TO_ADDR
// animal := CreateHuman ;
53534: LD_ADDR_VAR 0 12
53538: PUSH
53539: CALL_OW 44
53543: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53544: LD_VAR 0 12
53548: PPUSH
53549: LD_VAR 0 8
53553: PPUSH
53554: LD_INT 0
53556: PPUSH
53557: CALL 55523 0 3
// end ;
53561: GO 53498
53563: POP
53564: POP
// if apemans then
53565: LD_VAR 0 3
53569: IFFALSE 53692
// for i = 1 to apemans do
53571: LD_ADDR_VAR 0 11
53575: PUSH
53576: DOUBLE
53577: LD_INT 1
53579: DEC
53580: ST_TO_ADDR
53581: LD_VAR 0 3
53585: PUSH
53586: FOR_TO
53587: IFFALSE 53690
// begin hc_class = class_apeman ;
53589: LD_ADDR_OWVAR 28
53593: PUSH
53594: LD_INT 12
53596: ST_TO_ADDR
// hc_gallery =  ;
53597: LD_ADDR_OWVAR 33
53601: PUSH
53602: LD_STRING 
53604: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
53605: LD_ADDR_OWVAR 35
53609: PUSH
53610: LD_INT 2
53612: NEG
53613: PPUSH
53614: LD_INT 2
53616: PPUSH
53617: CALL_OW 12
53621: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
53622: LD_ADDR_OWVAR 31
53626: PUSH
53627: LD_INT 1
53629: PPUSH
53630: LD_INT 3
53632: PPUSH
53633: CALL_OW 12
53637: PUSH
53638: LD_INT 1
53640: PPUSH
53641: LD_INT 3
53643: PPUSH
53644: CALL_OW 12
53648: PUSH
53649: LD_INT 0
53651: PUSH
53652: LD_INT 0
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: LIST
53659: LIST
53660: ST_TO_ADDR
// animal := CreateHuman ;
53661: LD_ADDR_VAR 0 12
53665: PUSH
53666: CALL_OW 44
53670: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53671: LD_VAR 0 12
53675: PPUSH
53676: LD_VAR 0 8
53680: PPUSH
53681: LD_INT 0
53683: PPUSH
53684: CALL 55523 0 3
// end ;
53688: GO 53586
53690: POP
53691: POP
// if enchidnas then
53692: LD_VAR 0 4
53696: IFFALSE 53763
// for i = 1 to enchidnas do
53698: LD_ADDR_VAR 0 11
53702: PUSH
53703: DOUBLE
53704: LD_INT 1
53706: DEC
53707: ST_TO_ADDR
53708: LD_VAR 0 4
53712: PUSH
53713: FOR_TO
53714: IFFALSE 53761
// begin hc_class = 13 ;
53716: LD_ADDR_OWVAR 28
53720: PUSH
53721: LD_INT 13
53723: ST_TO_ADDR
// hc_gallery =  ;
53724: LD_ADDR_OWVAR 33
53728: PUSH
53729: LD_STRING 
53731: ST_TO_ADDR
// animal := CreateHuman ;
53732: LD_ADDR_VAR 0 12
53736: PUSH
53737: CALL_OW 44
53741: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53742: LD_VAR 0 12
53746: PPUSH
53747: LD_VAR 0 8
53751: PPUSH
53752: LD_INT 0
53754: PPUSH
53755: CALL 55523 0 3
// end ;
53759: GO 53713
53761: POP
53762: POP
// if fishes then
53763: LD_VAR 0 7
53767: IFFALSE 53834
// for i = 1 to fishes do
53769: LD_ADDR_VAR 0 11
53773: PUSH
53774: DOUBLE
53775: LD_INT 1
53777: DEC
53778: ST_TO_ADDR
53779: LD_VAR 0 7
53783: PUSH
53784: FOR_TO
53785: IFFALSE 53832
// begin hc_class = 20 ;
53787: LD_ADDR_OWVAR 28
53791: PUSH
53792: LD_INT 20
53794: ST_TO_ADDR
// hc_gallery =  ;
53795: LD_ADDR_OWVAR 33
53799: PUSH
53800: LD_STRING 
53802: ST_TO_ADDR
// animal := CreateHuman ;
53803: LD_ADDR_VAR 0 12
53807: PUSH
53808: CALL_OW 44
53812: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
53813: LD_VAR 0 12
53817: PPUSH
53818: LD_VAR 0 9
53822: PPUSH
53823: LD_INT 0
53825: PPUSH
53826: CALL 55523 0 3
// end ;
53830: GO 53784
53832: POP
53833: POP
// end ;
53834: LD_VAR 0 10
53838: RET
// export function WantHeal ( sci , unit ) ; begin
53839: LD_INT 0
53841: PPUSH
// if GetTaskList ( sci ) > 0 then
53842: LD_VAR 0 1
53846: PPUSH
53847: CALL_OW 437
53851: PUSH
53852: LD_INT 0
53854: GREATER
53855: IFFALSE 53925
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
53857: LD_VAR 0 1
53861: PPUSH
53862: CALL_OW 437
53866: PUSH
53867: LD_INT 1
53869: ARRAY
53870: PUSH
53871: LD_INT 1
53873: ARRAY
53874: PUSH
53875: LD_STRING l
53877: EQUAL
53878: PUSH
53879: LD_VAR 0 1
53883: PPUSH
53884: CALL_OW 437
53888: PUSH
53889: LD_INT 1
53891: ARRAY
53892: PUSH
53893: LD_INT 4
53895: ARRAY
53896: PUSH
53897: LD_VAR 0 2
53901: EQUAL
53902: AND
53903: IFFALSE 53915
// result := true else
53905: LD_ADDR_VAR 0 3
53909: PUSH
53910: LD_INT 1
53912: ST_TO_ADDR
53913: GO 53923
// result := false ;
53915: LD_ADDR_VAR 0 3
53919: PUSH
53920: LD_INT 0
53922: ST_TO_ADDR
// end else
53923: GO 53933
// result := false ;
53925: LD_ADDR_VAR 0 3
53929: PUSH
53930: LD_INT 0
53932: ST_TO_ADDR
// end ;
53933: LD_VAR 0 3
53937: RET
// export function HealTarget ( sci ) ; begin
53938: LD_INT 0
53940: PPUSH
// if not sci then
53941: LD_VAR 0 1
53945: NOT
53946: IFFALSE 53950
// exit ;
53948: GO 54015
// result := 0 ;
53950: LD_ADDR_VAR 0 2
53954: PUSH
53955: LD_INT 0
53957: ST_TO_ADDR
// if GetTaskList ( sci ) then
53958: LD_VAR 0 1
53962: PPUSH
53963: CALL_OW 437
53967: IFFALSE 54015
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
53969: LD_VAR 0 1
53973: PPUSH
53974: CALL_OW 437
53978: PUSH
53979: LD_INT 1
53981: ARRAY
53982: PUSH
53983: LD_INT 1
53985: ARRAY
53986: PUSH
53987: LD_STRING l
53989: EQUAL
53990: IFFALSE 54015
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
53992: LD_ADDR_VAR 0 2
53996: PUSH
53997: LD_VAR 0 1
54001: PPUSH
54002: CALL_OW 437
54006: PUSH
54007: LD_INT 1
54009: ARRAY
54010: PUSH
54011: LD_INT 4
54013: ARRAY
54014: ST_TO_ADDR
// end ;
54015: LD_VAR 0 2
54019: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
54020: LD_INT 0
54022: PPUSH
54023: PPUSH
54024: PPUSH
54025: PPUSH
// if not base_units then
54026: LD_VAR 0 1
54030: NOT
54031: IFFALSE 54035
// exit ;
54033: GO 54122
// result := false ;
54035: LD_ADDR_VAR 0 2
54039: PUSH
54040: LD_INT 0
54042: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
54043: LD_ADDR_VAR 0 5
54047: PUSH
54048: LD_VAR 0 1
54052: PPUSH
54053: LD_INT 21
54055: PUSH
54056: LD_INT 3
54058: PUSH
54059: EMPTY
54060: LIST
54061: LIST
54062: PPUSH
54063: CALL_OW 72
54067: ST_TO_ADDR
// if not tmp then
54068: LD_VAR 0 5
54072: NOT
54073: IFFALSE 54077
// exit ;
54075: GO 54122
// for i in tmp do
54077: LD_ADDR_VAR 0 3
54081: PUSH
54082: LD_VAR 0 5
54086: PUSH
54087: FOR_IN
54088: IFFALSE 54120
// begin result := EnemyInRange ( i , 22 ) ;
54090: LD_ADDR_VAR 0 2
54094: PUSH
54095: LD_VAR 0 3
54099: PPUSH
54100: LD_INT 22
54102: PPUSH
54103: CALL 52358 0 2
54107: ST_TO_ADDR
// if result then
54108: LD_VAR 0 2
54112: IFFALSE 54118
// exit ;
54114: POP
54115: POP
54116: GO 54122
// end ;
54118: GO 54087
54120: POP
54121: POP
// end ;
54122: LD_VAR 0 2
54126: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
54127: LD_INT 0
54129: PPUSH
54130: PPUSH
// if not units then
54131: LD_VAR 0 1
54135: NOT
54136: IFFALSE 54140
// exit ;
54138: GO 54210
// result := [ ] ;
54140: LD_ADDR_VAR 0 3
54144: PUSH
54145: EMPTY
54146: ST_TO_ADDR
// for i in units do
54147: LD_ADDR_VAR 0 4
54151: PUSH
54152: LD_VAR 0 1
54156: PUSH
54157: FOR_IN
54158: IFFALSE 54208
// if GetTag ( i ) = tag then
54160: LD_VAR 0 4
54164: PPUSH
54165: CALL_OW 110
54169: PUSH
54170: LD_VAR 0 2
54174: EQUAL
54175: IFFALSE 54206
// result := Replace ( result , result + 1 , i ) ;
54177: LD_ADDR_VAR 0 3
54181: PUSH
54182: LD_VAR 0 3
54186: PPUSH
54187: LD_VAR 0 3
54191: PUSH
54192: LD_INT 1
54194: PLUS
54195: PPUSH
54196: LD_VAR 0 4
54200: PPUSH
54201: CALL_OW 1
54205: ST_TO_ADDR
54206: GO 54157
54208: POP
54209: POP
// end ;
54210: LD_VAR 0 3
54214: RET
// export function IsDriver ( un ) ; begin
54215: LD_INT 0
54217: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
54218: LD_ADDR_VAR 0 2
54222: PUSH
54223: LD_VAR 0 1
54227: PUSH
54228: LD_INT 55
54230: PUSH
54231: EMPTY
54232: LIST
54233: PPUSH
54234: CALL_OW 69
54238: IN
54239: ST_TO_ADDR
// end ;
54240: LD_VAR 0 2
54244: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
54245: LD_INT 0
54247: PPUSH
54248: PPUSH
// list := [ ] ;
54249: LD_ADDR_VAR 0 5
54253: PUSH
54254: EMPTY
54255: ST_TO_ADDR
// case d of 0 :
54256: LD_VAR 0 3
54260: PUSH
54261: LD_INT 0
54263: DOUBLE
54264: EQUAL
54265: IFTRUE 54269
54267: GO 54402
54269: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
54270: LD_ADDR_VAR 0 5
54274: PUSH
54275: LD_VAR 0 1
54279: PUSH
54280: LD_INT 4
54282: MINUS
54283: PUSH
54284: LD_VAR 0 2
54288: PUSH
54289: LD_INT 4
54291: MINUS
54292: PUSH
54293: LD_INT 2
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: LIST
54300: PUSH
54301: LD_VAR 0 1
54305: PUSH
54306: LD_INT 3
54308: MINUS
54309: PUSH
54310: LD_VAR 0 2
54314: PUSH
54315: LD_INT 1
54317: PUSH
54318: EMPTY
54319: LIST
54320: LIST
54321: LIST
54322: PUSH
54323: LD_VAR 0 1
54327: PUSH
54328: LD_INT 4
54330: PLUS
54331: PUSH
54332: LD_VAR 0 2
54336: PUSH
54337: LD_INT 4
54339: PUSH
54340: EMPTY
54341: LIST
54342: LIST
54343: LIST
54344: PUSH
54345: LD_VAR 0 1
54349: PUSH
54350: LD_INT 3
54352: PLUS
54353: PUSH
54354: LD_VAR 0 2
54358: PUSH
54359: LD_INT 3
54361: PLUS
54362: PUSH
54363: LD_INT 5
54365: PUSH
54366: EMPTY
54367: LIST
54368: LIST
54369: LIST
54370: PUSH
54371: LD_VAR 0 1
54375: PUSH
54376: LD_VAR 0 2
54380: PUSH
54381: LD_INT 4
54383: PLUS
54384: PUSH
54385: LD_INT 0
54387: PUSH
54388: EMPTY
54389: LIST
54390: LIST
54391: LIST
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: LIST
54397: LIST
54398: LIST
54399: ST_TO_ADDR
// end ; 1 :
54400: GO 55100
54402: LD_INT 1
54404: DOUBLE
54405: EQUAL
54406: IFTRUE 54410
54408: GO 54543
54410: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
54411: LD_ADDR_VAR 0 5
54415: PUSH
54416: LD_VAR 0 1
54420: PUSH
54421: LD_VAR 0 2
54425: PUSH
54426: LD_INT 4
54428: MINUS
54429: PUSH
54430: LD_INT 3
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: LIST
54437: PUSH
54438: LD_VAR 0 1
54442: PUSH
54443: LD_INT 3
54445: MINUS
54446: PUSH
54447: LD_VAR 0 2
54451: PUSH
54452: LD_INT 3
54454: MINUS
54455: PUSH
54456: LD_INT 2
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: LIST
54463: PUSH
54464: LD_VAR 0 1
54468: PUSH
54469: LD_INT 4
54471: MINUS
54472: PUSH
54473: LD_VAR 0 2
54477: PUSH
54478: LD_INT 1
54480: PUSH
54481: EMPTY
54482: LIST
54483: LIST
54484: LIST
54485: PUSH
54486: LD_VAR 0 1
54490: PUSH
54491: LD_VAR 0 2
54495: PUSH
54496: LD_INT 3
54498: PLUS
54499: PUSH
54500: LD_INT 0
54502: PUSH
54503: EMPTY
54504: LIST
54505: LIST
54506: LIST
54507: PUSH
54508: LD_VAR 0 1
54512: PUSH
54513: LD_INT 4
54515: PLUS
54516: PUSH
54517: LD_VAR 0 2
54521: PUSH
54522: LD_INT 4
54524: PLUS
54525: PUSH
54526: LD_INT 5
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: LIST
54533: PUSH
54534: EMPTY
54535: LIST
54536: LIST
54537: LIST
54538: LIST
54539: LIST
54540: ST_TO_ADDR
// end ; 2 :
54541: GO 55100
54543: LD_INT 2
54545: DOUBLE
54546: EQUAL
54547: IFTRUE 54551
54549: GO 54680
54551: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
54552: LD_ADDR_VAR 0 5
54556: PUSH
54557: LD_VAR 0 1
54561: PUSH
54562: LD_VAR 0 2
54566: PUSH
54567: LD_INT 3
54569: MINUS
54570: PUSH
54571: LD_INT 3
54573: PUSH
54574: EMPTY
54575: LIST
54576: LIST
54577: LIST
54578: PUSH
54579: LD_VAR 0 1
54583: PUSH
54584: LD_INT 4
54586: PLUS
54587: PUSH
54588: LD_VAR 0 2
54592: PUSH
54593: LD_INT 4
54595: PUSH
54596: EMPTY
54597: LIST
54598: LIST
54599: LIST
54600: PUSH
54601: LD_VAR 0 1
54605: PUSH
54606: LD_VAR 0 2
54610: PUSH
54611: LD_INT 4
54613: PLUS
54614: PUSH
54615: LD_INT 0
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: LIST
54622: PUSH
54623: LD_VAR 0 1
54627: PUSH
54628: LD_INT 3
54630: MINUS
54631: PUSH
54632: LD_VAR 0 2
54636: PUSH
54637: LD_INT 1
54639: PUSH
54640: EMPTY
54641: LIST
54642: LIST
54643: LIST
54644: PUSH
54645: LD_VAR 0 1
54649: PUSH
54650: LD_INT 4
54652: MINUS
54653: PUSH
54654: LD_VAR 0 2
54658: PUSH
54659: LD_INT 4
54661: MINUS
54662: PUSH
54663: LD_INT 2
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: LIST
54670: PUSH
54671: EMPTY
54672: LIST
54673: LIST
54674: LIST
54675: LIST
54676: LIST
54677: ST_TO_ADDR
// end ; 3 :
54678: GO 55100
54680: LD_INT 3
54682: DOUBLE
54683: EQUAL
54684: IFTRUE 54688
54686: GO 54821
54688: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
54689: LD_ADDR_VAR 0 5
54693: PUSH
54694: LD_VAR 0 1
54698: PUSH
54699: LD_INT 3
54701: PLUS
54702: PUSH
54703: LD_VAR 0 2
54707: PUSH
54708: LD_INT 4
54710: PUSH
54711: EMPTY
54712: LIST
54713: LIST
54714: LIST
54715: PUSH
54716: LD_VAR 0 1
54720: PUSH
54721: LD_INT 4
54723: PLUS
54724: PUSH
54725: LD_VAR 0 2
54729: PUSH
54730: LD_INT 4
54732: PLUS
54733: PUSH
54734: LD_INT 5
54736: PUSH
54737: EMPTY
54738: LIST
54739: LIST
54740: LIST
54741: PUSH
54742: LD_VAR 0 1
54746: PUSH
54747: LD_INT 4
54749: MINUS
54750: PUSH
54751: LD_VAR 0 2
54755: PUSH
54756: LD_INT 1
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: LIST
54763: PUSH
54764: LD_VAR 0 1
54768: PUSH
54769: LD_VAR 0 2
54773: PUSH
54774: LD_INT 4
54776: MINUS
54777: PUSH
54778: LD_INT 3
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: LIST
54785: PUSH
54786: LD_VAR 0 1
54790: PUSH
54791: LD_INT 3
54793: MINUS
54794: PUSH
54795: LD_VAR 0 2
54799: PUSH
54800: LD_INT 3
54802: MINUS
54803: PUSH
54804: LD_INT 2
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: LIST
54811: PUSH
54812: EMPTY
54813: LIST
54814: LIST
54815: LIST
54816: LIST
54817: LIST
54818: ST_TO_ADDR
// end ; 4 :
54819: GO 55100
54821: LD_INT 4
54823: DOUBLE
54824: EQUAL
54825: IFTRUE 54829
54827: GO 54962
54829: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
54830: LD_ADDR_VAR 0 5
54834: PUSH
54835: LD_VAR 0 1
54839: PUSH
54840: LD_VAR 0 2
54844: PUSH
54845: LD_INT 4
54847: PLUS
54848: PUSH
54849: LD_INT 0
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: LIST
54856: PUSH
54857: LD_VAR 0 1
54861: PUSH
54862: LD_INT 3
54864: PLUS
54865: PUSH
54866: LD_VAR 0 2
54870: PUSH
54871: LD_INT 3
54873: PLUS
54874: PUSH
54875: LD_INT 5
54877: PUSH
54878: EMPTY
54879: LIST
54880: LIST
54881: LIST
54882: PUSH
54883: LD_VAR 0 1
54887: PUSH
54888: LD_INT 4
54890: PLUS
54891: PUSH
54892: LD_VAR 0 2
54896: PUSH
54897: LD_INT 4
54899: PUSH
54900: EMPTY
54901: LIST
54902: LIST
54903: LIST
54904: PUSH
54905: LD_VAR 0 1
54909: PUSH
54910: LD_VAR 0 2
54914: PUSH
54915: LD_INT 3
54917: MINUS
54918: PUSH
54919: LD_INT 3
54921: PUSH
54922: EMPTY
54923: LIST
54924: LIST
54925: LIST
54926: PUSH
54927: LD_VAR 0 1
54931: PUSH
54932: LD_INT 4
54934: MINUS
54935: PUSH
54936: LD_VAR 0 2
54940: PUSH
54941: LD_INT 4
54943: MINUS
54944: PUSH
54945: LD_INT 2
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: LIST
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: LIST
54957: LIST
54958: LIST
54959: ST_TO_ADDR
// end ; 5 :
54960: GO 55100
54962: LD_INT 5
54964: DOUBLE
54965: EQUAL
54966: IFTRUE 54970
54968: GO 55099
54970: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
54971: LD_ADDR_VAR 0 5
54975: PUSH
54976: LD_VAR 0 1
54980: PUSH
54981: LD_INT 4
54983: MINUS
54984: PUSH
54985: LD_VAR 0 2
54989: PUSH
54990: LD_INT 1
54992: PUSH
54993: EMPTY
54994: LIST
54995: LIST
54996: LIST
54997: PUSH
54998: LD_VAR 0 1
55002: PUSH
55003: LD_VAR 0 2
55007: PUSH
55008: LD_INT 4
55010: MINUS
55011: PUSH
55012: LD_INT 3
55014: PUSH
55015: EMPTY
55016: LIST
55017: LIST
55018: LIST
55019: PUSH
55020: LD_VAR 0 1
55024: PUSH
55025: LD_INT 4
55027: PLUS
55028: PUSH
55029: LD_VAR 0 2
55033: PUSH
55034: LD_INT 4
55036: PLUS
55037: PUSH
55038: LD_INT 5
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: LIST
55045: PUSH
55046: LD_VAR 0 1
55050: PUSH
55051: LD_INT 3
55053: PLUS
55054: PUSH
55055: LD_VAR 0 2
55059: PUSH
55060: LD_INT 4
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: LIST
55067: PUSH
55068: LD_VAR 0 1
55072: PUSH
55073: LD_VAR 0 2
55077: PUSH
55078: LD_INT 3
55080: PLUS
55081: PUSH
55082: LD_INT 0
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: LIST
55089: PUSH
55090: EMPTY
55091: LIST
55092: LIST
55093: LIST
55094: LIST
55095: LIST
55096: ST_TO_ADDR
// end ; end ;
55097: GO 55100
55099: POP
// result := list ;
55100: LD_ADDR_VAR 0 4
55104: PUSH
55105: LD_VAR 0 5
55109: ST_TO_ADDR
// end ;
55110: LD_VAR 0 4
55114: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
55115: LD_INT 0
55117: PPUSH
55118: PPUSH
55119: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
55120: LD_VAR 0 1
55124: NOT
55125: PUSH
55126: LD_VAR 0 2
55130: PUSH
55131: LD_INT 1
55133: PUSH
55134: LD_INT 2
55136: PUSH
55137: LD_INT 3
55139: PUSH
55140: LD_INT 4
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: LIST
55147: LIST
55148: IN
55149: NOT
55150: OR
55151: IFFALSE 55155
// exit ;
55153: GO 55247
// tmp := [ ] ;
55155: LD_ADDR_VAR 0 5
55159: PUSH
55160: EMPTY
55161: ST_TO_ADDR
// for i in units do
55162: LD_ADDR_VAR 0 4
55166: PUSH
55167: LD_VAR 0 1
55171: PUSH
55172: FOR_IN
55173: IFFALSE 55216
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
55175: LD_ADDR_VAR 0 5
55179: PUSH
55180: LD_VAR 0 5
55184: PPUSH
55185: LD_VAR 0 5
55189: PUSH
55190: LD_INT 1
55192: PLUS
55193: PPUSH
55194: LD_VAR 0 4
55198: PPUSH
55199: LD_VAR 0 2
55203: PPUSH
55204: CALL_OW 259
55208: PPUSH
55209: CALL_OW 2
55213: ST_TO_ADDR
55214: GO 55172
55216: POP
55217: POP
// if not tmp then
55218: LD_VAR 0 5
55222: NOT
55223: IFFALSE 55227
// exit ;
55225: GO 55247
// result := SortListByListDesc ( units , tmp ) ;
55227: LD_ADDR_VAR 0 3
55231: PUSH
55232: LD_VAR 0 1
55236: PPUSH
55237: LD_VAR 0 5
55241: PPUSH
55242: CALL_OW 77
55246: ST_TO_ADDR
// end ;
55247: LD_VAR 0 3
55251: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
55252: LD_INT 0
55254: PPUSH
55255: PPUSH
55256: PPUSH
// result := false ;
55257: LD_ADDR_VAR 0 3
55261: PUSH
55262: LD_INT 0
55264: ST_TO_ADDR
// x := GetX ( building ) ;
55265: LD_ADDR_VAR 0 4
55269: PUSH
55270: LD_VAR 0 2
55274: PPUSH
55275: CALL_OW 250
55279: ST_TO_ADDR
// y := GetY ( building ) ;
55280: LD_ADDR_VAR 0 5
55284: PUSH
55285: LD_VAR 0 2
55289: PPUSH
55290: CALL_OW 251
55294: ST_TO_ADDR
// if not building or not x or not y then
55295: LD_VAR 0 2
55299: NOT
55300: PUSH
55301: LD_VAR 0 4
55305: NOT
55306: OR
55307: PUSH
55308: LD_VAR 0 5
55312: NOT
55313: OR
55314: IFFALSE 55318
// exit ;
55316: GO 55410
// if GetTaskList ( unit ) then
55318: LD_VAR 0 1
55322: PPUSH
55323: CALL_OW 437
55327: IFFALSE 55410
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
55329: LD_STRING e
55331: PUSH
55332: LD_VAR 0 1
55336: PPUSH
55337: CALL_OW 437
55341: PUSH
55342: LD_INT 1
55344: ARRAY
55345: PUSH
55346: LD_INT 1
55348: ARRAY
55349: EQUAL
55350: PUSH
55351: LD_VAR 0 4
55355: PUSH
55356: LD_VAR 0 1
55360: PPUSH
55361: CALL_OW 437
55365: PUSH
55366: LD_INT 1
55368: ARRAY
55369: PUSH
55370: LD_INT 2
55372: ARRAY
55373: EQUAL
55374: AND
55375: PUSH
55376: LD_VAR 0 5
55380: PUSH
55381: LD_VAR 0 1
55385: PPUSH
55386: CALL_OW 437
55390: PUSH
55391: LD_INT 1
55393: ARRAY
55394: PUSH
55395: LD_INT 3
55397: ARRAY
55398: EQUAL
55399: AND
55400: IFFALSE 55410
// result := true end ;
55402: LD_ADDR_VAR 0 3
55406: PUSH
55407: LD_INT 1
55409: ST_TO_ADDR
// end ;
55410: LD_VAR 0 3
55414: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
55415: LD_INT 0
55417: PPUSH
// result := false ;
55418: LD_ADDR_VAR 0 4
55422: PUSH
55423: LD_INT 0
55425: ST_TO_ADDR
// if GetTaskList ( unit ) then
55426: LD_VAR 0 1
55430: PPUSH
55431: CALL_OW 437
55435: IFFALSE 55518
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
55437: LD_STRING M
55439: PUSH
55440: LD_VAR 0 1
55444: PPUSH
55445: CALL_OW 437
55449: PUSH
55450: LD_INT 1
55452: ARRAY
55453: PUSH
55454: LD_INT 1
55456: ARRAY
55457: EQUAL
55458: PUSH
55459: LD_VAR 0 2
55463: PUSH
55464: LD_VAR 0 1
55468: PPUSH
55469: CALL_OW 437
55473: PUSH
55474: LD_INT 1
55476: ARRAY
55477: PUSH
55478: LD_INT 2
55480: ARRAY
55481: EQUAL
55482: AND
55483: PUSH
55484: LD_VAR 0 3
55488: PUSH
55489: LD_VAR 0 1
55493: PPUSH
55494: CALL_OW 437
55498: PUSH
55499: LD_INT 1
55501: ARRAY
55502: PUSH
55503: LD_INT 3
55505: ARRAY
55506: EQUAL
55507: AND
55508: IFFALSE 55518
// result := true ;
55510: LD_ADDR_VAR 0 4
55514: PUSH
55515: LD_INT 1
55517: ST_TO_ADDR
// end ; end ;
55518: LD_VAR 0 4
55522: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
55523: LD_INT 0
55525: PPUSH
55526: PPUSH
55527: PPUSH
55528: PPUSH
// if not unit or not area then
55529: LD_VAR 0 1
55533: NOT
55534: PUSH
55535: LD_VAR 0 2
55539: NOT
55540: OR
55541: IFFALSE 55545
// exit ;
55543: GO 55709
// tmp := AreaToList ( area , i ) ;
55545: LD_ADDR_VAR 0 6
55549: PUSH
55550: LD_VAR 0 2
55554: PPUSH
55555: LD_VAR 0 5
55559: PPUSH
55560: CALL_OW 517
55564: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
55565: LD_ADDR_VAR 0 5
55569: PUSH
55570: DOUBLE
55571: LD_INT 1
55573: DEC
55574: ST_TO_ADDR
55575: LD_VAR 0 6
55579: PUSH
55580: LD_INT 1
55582: ARRAY
55583: PUSH
55584: FOR_TO
55585: IFFALSE 55707
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
55587: LD_ADDR_VAR 0 7
55591: PUSH
55592: LD_VAR 0 6
55596: PUSH
55597: LD_INT 1
55599: ARRAY
55600: PUSH
55601: LD_VAR 0 5
55605: ARRAY
55606: PUSH
55607: LD_VAR 0 6
55611: PUSH
55612: LD_INT 2
55614: ARRAY
55615: PUSH
55616: LD_VAR 0 5
55620: ARRAY
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
55626: LD_VAR 0 7
55630: PUSH
55631: LD_INT 1
55633: ARRAY
55634: PPUSH
55635: LD_VAR 0 7
55639: PUSH
55640: LD_INT 2
55642: ARRAY
55643: PPUSH
55644: CALL_OW 428
55648: PUSH
55649: LD_INT 0
55651: EQUAL
55652: IFFALSE 55705
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
55654: LD_VAR 0 1
55658: PPUSH
55659: LD_VAR 0 7
55663: PUSH
55664: LD_INT 1
55666: ARRAY
55667: PPUSH
55668: LD_VAR 0 7
55672: PUSH
55673: LD_INT 2
55675: ARRAY
55676: PPUSH
55677: LD_VAR 0 3
55681: PPUSH
55682: CALL_OW 48
// result := IsPlaced ( unit ) ;
55686: LD_ADDR_VAR 0 4
55690: PUSH
55691: LD_VAR 0 1
55695: PPUSH
55696: CALL_OW 305
55700: ST_TO_ADDR
// exit ;
55701: POP
55702: POP
55703: GO 55709
// end ; end ;
55705: GO 55584
55707: POP
55708: POP
// end ;
55709: LD_VAR 0 4
55713: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
55714: LD_INT 0
55716: PPUSH
55717: PPUSH
55718: PPUSH
// if not side or side > 8 then
55719: LD_VAR 0 1
55723: NOT
55724: PUSH
55725: LD_VAR 0 1
55729: PUSH
55730: LD_INT 8
55732: GREATER
55733: OR
55734: IFFALSE 55738
// exit ;
55736: GO 55925
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
55738: LD_ADDR_VAR 0 4
55742: PUSH
55743: LD_INT 22
55745: PUSH
55746: LD_VAR 0 1
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: PUSH
55755: LD_INT 21
55757: PUSH
55758: LD_INT 3
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: PPUSH
55769: CALL_OW 69
55773: ST_TO_ADDR
// if not tmp then
55774: LD_VAR 0 4
55778: NOT
55779: IFFALSE 55783
// exit ;
55781: GO 55925
// enable_addtolog := true ;
55783: LD_ADDR_OWVAR 81
55787: PUSH
55788: LD_INT 1
55790: ST_TO_ADDR
// AddToLog ( [ ) ;
55791: LD_STRING [
55793: PPUSH
55794: CALL_OW 561
// for i in tmp do
55798: LD_ADDR_VAR 0 3
55802: PUSH
55803: LD_VAR 0 4
55807: PUSH
55808: FOR_IN
55809: IFFALSE 55916
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
55811: LD_STRING [
55813: PUSH
55814: LD_VAR 0 3
55818: PPUSH
55819: CALL_OW 266
55823: STR
55824: PUSH
55825: LD_STRING , 
55827: STR
55828: PUSH
55829: LD_VAR 0 3
55833: PPUSH
55834: CALL_OW 250
55838: STR
55839: PUSH
55840: LD_STRING , 
55842: STR
55843: PUSH
55844: LD_VAR 0 3
55848: PPUSH
55849: CALL_OW 251
55853: STR
55854: PUSH
55855: LD_STRING , 
55857: STR
55858: PUSH
55859: LD_VAR 0 3
55863: PPUSH
55864: CALL_OW 254
55868: STR
55869: PUSH
55870: LD_STRING , 
55872: STR
55873: PUSH
55874: LD_VAR 0 3
55878: PPUSH
55879: LD_INT 1
55881: PPUSH
55882: CALL_OW 268
55886: STR
55887: PUSH
55888: LD_STRING , 
55890: STR
55891: PUSH
55892: LD_VAR 0 3
55896: PPUSH
55897: LD_INT 2
55899: PPUSH
55900: CALL_OW 268
55904: STR
55905: PUSH
55906: LD_STRING ],
55908: STR
55909: PPUSH
55910: CALL_OW 561
// end ;
55914: GO 55808
55916: POP
55917: POP
// AddToLog ( ]; ) ;
55918: LD_STRING ];
55920: PPUSH
55921: CALL_OW 561
// end ;
55925: LD_VAR 0 2
55929: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
55930: LD_INT 0
55932: PPUSH
55933: PPUSH
55934: PPUSH
55935: PPUSH
55936: PPUSH
// if not area or not rate or not max then
55937: LD_VAR 0 1
55941: NOT
55942: PUSH
55943: LD_VAR 0 2
55947: NOT
55948: OR
55949: PUSH
55950: LD_VAR 0 4
55954: NOT
55955: OR
55956: IFFALSE 55960
// exit ;
55958: GO 56152
// while 1 do
55960: LD_INT 1
55962: IFFALSE 56152
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
55964: LD_ADDR_VAR 0 9
55968: PUSH
55969: LD_VAR 0 1
55973: PPUSH
55974: LD_INT 1
55976: PPUSH
55977: CALL_OW 287
55981: PUSH
55982: LD_INT 10
55984: MUL
55985: ST_TO_ADDR
// r := rate / 10 ;
55986: LD_ADDR_VAR 0 7
55990: PUSH
55991: LD_VAR 0 2
55995: PUSH
55996: LD_INT 10
55998: DIVREAL
55999: ST_TO_ADDR
// time := 1 1$00 ;
56000: LD_ADDR_VAR 0 8
56004: PUSH
56005: LD_INT 2100
56007: ST_TO_ADDR
// if amount < min then
56008: LD_VAR 0 9
56012: PUSH
56013: LD_VAR 0 3
56017: LESS
56018: IFFALSE 56036
// r := r * 2 else
56020: LD_ADDR_VAR 0 7
56024: PUSH
56025: LD_VAR 0 7
56029: PUSH
56030: LD_INT 2
56032: MUL
56033: ST_TO_ADDR
56034: GO 56062
// if amount > max then
56036: LD_VAR 0 9
56040: PUSH
56041: LD_VAR 0 4
56045: GREATER
56046: IFFALSE 56062
// r := r / 2 ;
56048: LD_ADDR_VAR 0 7
56052: PUSH
56053: LD_VAR 0 7
56057: PUSH
56058: LD_INT 2
56060: DIVREAL
56061: ST_TO_ADDR
// time := time / r ;
56062: LD_ADDR_VAR 0 8
56066: PUSH
56067: LD_VAR 0 8
56071: PUSH
56072: LD_VAR 0 7
56076: DIVREAL
56077: ST_TO_ADDR
// if time < 0 then
56078: LD_VAR 0 8
56082: PUSH
56083: LD_INT 0
56085: LESS
56086: IFFALSE 56103
// time := time * - 1 ;
56088: LD_ADDR_VAR 0 8
56092: PUSH
56093: LD_VAR 0 8
56097: PUSH
56098: LD_INT 1
56100: NEG
56101: MUL
56102: ST_TO_ADDR
// wait ( time ) ;
56103: LD_VAR 0 8
56107: PPUSH
56108: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
56112: LD_INT 35
56114: PPUSH
56115: LD_INT 875
56117: PPUSH
56118: CALL_OW 12
56122: PPUSH
56123: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
56127: LD_INT 1
56129: PPUSH
56130: LD_INT 5
56132: PPUSH
56133: CALL_OW 12
56137: PPUSH
56138: LD_VAR 0 1
56142: PPUSH
56143: LD_INT 1
56145: PPUSH
56146: CALL_OW 55
// end ;
56150: GO 55960
// end ;
56152: LD_VAR 0 5
56156: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
56157: LD_INT 0
56159: PPUSH
56160: PPUSH
56161: PPUSH
56162: PPUSH
56163: PPUSH
56164: PPUSH
56165: PPUSH
56166: PPUSH
// if not turrets or not factories then
56167: LD_VAR 0 1
56171: NOT
56172: PUSH
56173: LD_VAR 0 2
56177: NOT
56178: OR
56179: IFFALSE 56183
// exit ;
56181: GO 56490
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
56183: LD_ADDR_VAR 0 10
56187: PUSH
56188: LD_INT 5
56190: PUSH
56191: LD_INT 6
56193: PUSH
56194: EMPTY
56195: LIST
56196: LIST
56197: PUSH
56198: LD_INT 2
56200: PUSH
56201: LD_INT 4
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: PUSH
56208: LD_INT 3
56210: PUSH
56211: LD_INT 5
56213: PUSH
56214: EMPTY
56215: LIST
56216: LIST
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: LIST
56222: PUSH
56223: LD_INT 24
56225: PUSH
56226: LD_INT 25
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: LD_INT 23
56235: PUSH
56236: LD_INT 27
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PUSH
56243: EMPTY
56244: LIST
56245: LIST
56246: PUSH
56247: LD_INT 42
56249: PUSH
56250: LD_INT 43
56252: PUSH
56253: EMPTY
56254: LIST
56255: LIST
56256: PUSH
56257: LD_INT 44
56259: PUSH
56260: LD_INT 46
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: PUSH
56267: LD_INT 45
56269: PUSH
56270: LD_INT 47
56272: PUSH
56273: EMPTY
56274: LIST
56275: LIST
56276: PUSH
56277: EMPTY
56278: LIST
56279: LIST
56280: LIST
56281: PUSH
56282: EMPTY
56283: LIST
56284: LIST
56285: LIST
56286: ST_TO_ADDR
// result := [ ] ;
56287: LD_ADDR_VAR 0 3
56291: PUSH
56292: EMPTY
56293: ST_TO_ADDR
// for i in turrets do
56294: LD_ADDR_VAR 0 4
56298: PUSH
56299: LD_VAR 0 1
56303: PUSH
56304: FOR_IN
56305: IFFALSE 56488
// begin nat := GetNation ( i ) ;
56307: LD_ADDR_VAR 0 7
56311: PUSH
56312: LD_VAR 0 4
56316: PPUSH
56317: CALL_OW 248
56321: ST_TO_ADDR
// weapon := 0 ;
56322: LD_ADDR_VAR 0 8
56326: PUSH
56327: LD_INT 0
56329: ST_TO_ADDR
// if not nat then
56330: LD_VAR 0 7
56334: NOT
56335: IFFALSE 56339
// continue ;
56337: GO 56304
// for j in list [ nat ] do
56339: LD_ADDR_VAR 0 5
56343: PUSH
56344: LD_VAR 0 10
56348: PUSH
56349: LD_VAR 0 7
56353: ARRAY
56354: PUSH
56355: FOR_IN
56356: IFFALSE 56397
// if GetBWeapon ( i ) = j [ 1 ] then
56358: LD_VAR 0 4
56362: PPUSH
56363: CALL_OW 269
56367: PUSH
56368: LD_VAR 0 5
56372: PUSH
56373: LD_INT 1
56375: ARRAY
56376: EQUAL
56377: IFFALSE 56395
// begin weapon := j [ 2 ] ;
56379: LD_ADDR_VAR 0 8
56383: PUSH
56384: LD_VAR 0 5
56388: PUSH
56389: LD_INT 2
56391: ARRAY
56392: ST_TO_ADDR
// break ;
56393: GO 56397
// end ;
56395: GO 56355
56397: POP
56398: POP
// if not weapon then
56399: LD_VAR 0 8
56403: NOT
56404: IFFALSE 56408
// continue ;
56406: GO 56304
// for k in factories do
56408: LD_ADDR_VAR 0 6
56412: PUSH
56413: LD_VAR 0 2
56417: PUSH
56418: FOR_IN
56419: IFFALSE 56484
// begin weapons := AvailableWeaponList ( k ) ;
56421: LD_ADDR_VAR 0 9
56425: PUSH
56426: LD_VAR 0 6
56430: PPUSH
56431: CALL_OW 478
56435: ST_TO_ADDR
// if not weapons then
56436: LD_VAR 0 9
56440: NOT
56441: IFFALSE 56445
// continue ;
56443: GO 56418
// if weapon in weapons then
56445: LD_VAR 0 8
56449: PUSH
56450: LD_VAR 0 9
56454: IN
56455: IFFALSE 56482
// begin result := [ i , weapon ] ;
56457: LD_ADDR_VAR 0 3
56461: PUSH
56462: LD_VAR 0 4
56466: PUSH
56467: LD_VAR 0 8
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: ST_TO_ADDR
// exit ;
56476: POP
56477: POP
56478: POP
56479: POP
56480: GO 56490
// end ; end ;
56482: GO 56418
56484: POP
56485: POP
// end ;
56486: GO 56304
56488: POP
56489: POP
// end ;
56490: LD_VAR 0 3
56494: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
56495: LD_INT 0
56497: PPUSH
// if not side or side > 8 then
56498: LD_VAR 0 3
56502: NOT
56503: PUSH
56504: LD_VAR 0 3
56508: PUSH
56509: LD_INT 8
56511: GREATER
56512: OR
56513: IFFALSE 56517
// exit ;
56515: GO 56576
// if not range then
56517: LD_VAR 0 4
56521: NOT
56522: IFFALSE 56533
// range := - 12 ;
56524: LD_ADDR_VAR 0 4
56528: PUSH
56529: LD_INT 12
56531: NEG
56532: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
56533: LD_VAR 0 1
56537: PPUSH
56538: LD_VAR 0 2
56542: PPUSH
56543: LD_VAR 0 3
56547: PPUSH
56548: LD_VAR 0 4
56552: PPUSH
56553: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
56557: LD_VAR 0 1
56561: PPUSH
56562: LD_VAR 0 2
56566: PPUSH
56567: LD_VAR 0 3
56571: PPUSH
56572: CALL_OW 331
// end ;
56576: LD_VAR 0 5
56580: RET
// export function Video ( mode ) ; begin
56581: LD_INT 0
56583: PPUSH
// ingame_video = mode ;
56584: LD_ADDR_OWVAR 52
56588: PUSH
56589: LD_VAR 0 1
56593: ST_TO_ADDR
// interface_hidden = mode ;
56594: LD_ADDR_OWVAR 54
56598: PUSH
56599: LD_VAR 0 1
56603: ST_TO_ADDR
// end ;
56604: LD_VAR 0 2
56608: RET
// export function Join ( array , element ) ; begin
56609: LD_INT 0
56611: PPUSH
// result := Replace ( array , array + 1 , element ) ;
56612: LD_ADDR_VAR 0 3
56616: PUSH
56617: LD_VAR 0 1
56621: PPUSH
56622: LD_VAR 0 1
56626: PUSH
56627: LD_INT 1
56629: PLUS
56630: PPUSH
56631: LD_VAR 0 2
56635: PPUSH
56636: CALL_OW 1
56640: ST_TO_ADDR
// end ;
56641: LD_VAR 0 3
56645: RET
// export function JoinUnion ( array , element ) ; begin
56646: LD_INT 0
56648: PPUSH
// result := array union element ;
56649: LD_ADDR_VAR 0 3
56653: PUSH
56654: LD_VAR 0 1
56658: PUSH
56659: LD_VAR 0 2
56663: UNION
56664: ST_TO_ADDR
// end ;
56665: LD_VAR 0 3
56669: RET
// export function GetBehemoths ( side ) ; begin
56670: LD_INT 0
56672: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
56673: LD_ADDR_VAR 0 2
56677: PUSH
56678: LD_INT 22
56680: PUSH
56681: LD_VAR 0 1
56685: PUSH
56686: EMPTY
56687: LIST
56688: LIST
56689: PUSH
56690: LD_INT 31
56692: PUSH
56693: LD_INT 25
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: PPUSH
56704: CALL_OW 69
56708: ST_TO_ADDR
// end ;
56709: LD_VAR 0 2
56713: RET
// export function Shuffle ( array ) ; var i , index ; begin
56714: LD_INT 0
56716: PPUSH
56717: PPUSH
56718: PPUSH
// result := [ ] ;
56719: LD_ADDR_VAR 0 2
56723: PUSH
56724: EMPTY
56725: ST_TO_ADDR
// if not array then
56726: LD_VAR 0 1
56730: NOT
56731: IFFALSE 56735
// exit ;
56733: GO 56834
// Randomize ;
56735: CALL_OW 10
// for i = array downto 1 do
56739: LD_ADDR_VAR 0 3
56743: PUSH
56744: DOUBLE
56745: LD_VAR 0 1
56749: INC
56750: ST_TO_ADDR
56751: LD_INT 1
56753: PUSH
56754: FOR_DOWNTO
56755: IFFALSE 56832
// begin index := rand ( 1 , array ) ;
56757: LD_ADDR_VAR 0 4
56761: PUSH
56762: LD_INT 1
56764: PPUSH
56765: LD_VAR 0 1
56769: PPUSH
56770: CALL_OW 12
56774: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
56775: LD_ADDR_VAR 0 2
56779: PUSH
56780: LD_VAR 0 2
56784: PPUSH
56785: LD_VAR 0 2
56789: PUSH
56790: LD_INT 1
56792: PLUS
56793: PPUSH
56794: LD_VAR 0 1
56798: PUSH
56799: LD_VAR 0 4
56803: ARRAY
56804: PPUSH
56805: CALL_OW 2
56809: ST_TO_ADDR
// array := Delete ( array , index ) ;
56810: LD_ADDR_VAR 0 1
56814: PUSH
56815: LD_VAR 0 1
56819: PPUSH
56820: LD_VAR 0 4
56824: PPUSH
56825: CALL_OW 3
56829: ST_TO_ADDR
// end ;
56830: GO 56754
56832: POP
56833: POP
// end ;
56834: LD_VAR 0 2
56838: RET
// export function GetBaseMaterials ( base ) ; begin
56839: LD_INT 0
56841: PPUSH
// result := [ 0 , 0 , 0 ] ;
56842: LD_ADDR_VAR 0 2
56846: PUSH
56847: LD_INT 0
56849: PUSH
56850: LD_INT 0
56852: PUSH
56853: LD_INT 0
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: LIST
56860: ST_TO_ADDR
// if not base then
56861: LD_VAR 0 1
56865: NOT
56866: IFFALSE 56870
// exit ;
56868: GO 56919
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
56870: LD_ADDR_VAR 0 2
56874: PUSH
56875: LD_VAR 0 1
56879: PPUSH
56880: LD_INT 1
56882: PPUSH
56883: CALL_OW 275
56887: PUSH
56888: LD_VAR 0 1
56892: PPUSH
56893: LD_INT 2
56895: PPUSH
56896: CALL_OW 275
56900: PUSH
56901: LD_VAR 0 1
56905: PPUSH
56906: LD_INT 3
56908: PPUSH
56909: CALL_OW 275
56913: PUSH
56914: EMPTY
56915: LIST
56916: LIST
56917: LIST
56918: ST_TO_ADDR
// end ;
56919: LD_VAR 0 2
56923: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
56924: LD_INT 0
56926: PPUSH
56927: PPUSH
// result := array ;
56928: LD_ADDR_VAR 0 3
56932: PUSH
56933: LD_VAR 0 1
56937: ST_TO_ADDR
// if size > 0 then
56938: LD_VAR 0 2
56942: PUSH
56943: LD_INT 0
56945: GREATER
56946: IFFALSE 56992
// for i := array downto size do
56948: LD_ADDR_VAR 0 4
56952: PUSH
56953: DOUBLE
56954: LD_VAR 0 1
56958: INC
56959: ST_TO_ADDR
56960: LD_VAR 0 2
56964: PUSH
56965: FOR_DOWNTO
56966: IFFALSE 56990
// result := Delete ( result , result ) ;
56968: LD_ADDR_VAR 0 3
56972: PUSH
56973: LD_VAR 0 3
56977: PPUSH
56978: LD_VAR 0 3
56982: PPUSH
56983: CALL_OW 3
56987: ST_TO_ADDR
56988: GO 56965
56990: POP
56991: POP
// end ;
56992: LD_VAR 0 3
56996: RET
// export function ComExit ( unit ) ; var tmp ; begin
56997: LD_INT 0
56999: PPUSH
57000: PPUSH
// if not IsInUnit ( unit ) then
57001: LD_VAR 0 1
57005: PPUSH
57006: CALL_OW 310
57010: NOT
57011: IFFALSE 57015
// exit ;
57013: GO 57075
// tmp := IsInUnit ( unit ) ;
57015: LD_ADDR_VAR 0 3
57019: PUSH
57020: LD_VAR 0 1
57024: PPUSH
57025: CALL_OW 310
57029: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
57030: LD_VAR 0 3
57034: PPUSH
57035: CALL_OW 247
57039: PUSH
57040: LD_INT 2
57042: EQUAL
57043: IFFALSE 57056
// ComExitVehicle ( unit ) else
57045: LD_VAR 0 1
57049: PPUSH
57050: CALL_OW 121
57054: GO 57065
// ComExitBuilding ( unit ) ;
57056: LD_VAR 0 1
57060: PPUSH
57061: CALL_OW 122
// result := tmp ;
57065: LD_ADDR_VAR 0 2
57069: PUSH
57070: LD_VAR 0 3
57074: ST_TO_ADDR
// end ;
57075: LD_VAR 0 2
57079: RET
// export function ComExitAll ( units ) ; var i ; begin
57080: LD_INT 0
57082: PPUSH
57083: PPUSH
// if not units then
57084: LD_VAR 0 1
57088: NOT
57089: IFFALSE 57093
// exit ;
57091: GO 57119
// for i in units do
57093: LD_ADDR_VAR 0 3
57097: PUSH
57098: LD_VAR 0 1
57102: PUSH
57103: FOR_IN
57104: IFFALSE 57117
// ComExit ( i ) ;
57106: LD_VAR 0 3
57110: PPUSH
57111: CALL 56997 0 1
57115: GO 57103
57117: POP
57118: POP
// end ;
57119: LD_VAR 0 2
57123: RET
// export function ResetHc ; begin
57124: LD_INT 0
57126: PPUSH
// InitHc ;
57127: CALL_OW 19
// hc_importance := 0 ;
57131: LD_ADDR_OWVAR 32
57135: PUSH
57136: LD_INT 0
57138: ST_TO_ADDR
// end ;
57139: LD_VAR 0 1
57143: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
57144: LD_INT 0
57146: PPUSH
57147: PPUSH
57148: PPUSH
// _x := ( x1 + x2 ) div 2 ;
57149: LD_ADDR_VAR 0 6
57153: PUSH
57154: LD_VAR 0 1
57158: PUSH
57159: LD_VAR 0 3
57163: PLUS
57164: PUSH
57165: LD_INT 2
57167: DIV
57168: ST_TO_ADDR
// if _x < 0 then
57169: LD_VAR 0 6
57173: PUSH
57174: LD_INT 0
57176: LESS
57177: IFFALSE 57194
// _x := _x * - 1 ;
57179: LD_ADDR_VAR 0 6
57183: PUSH
57184: LD_VAR 0 6
57188: PUSH
57189: LD_INT 1
57191: NEG
57192: MUL
57193: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
57194: LD_ADDR_VAR 0 7
57198: PUSH
57199: LD_VAR 0 2
57203: PUSH
57204: LD_VAR 0 4
57208: PLUS
57209: PUSH
57210: LD_INT 2
57212: DIV
57213: ST_TO_ADDR
// if _y < 0 then
57214: LD_VAR 0 7
57218: PUSH
57219: LD_INT 0
57221: LESS
57222: IFFALSE 57239
// _y := _y * - 1 ;
57224: LD_ADDR_VAR 0 7
57228: PUSH
57229: LD_VAR 0 7
57233: PUSH
57234: LD_INT 1
57236: NEG
57237: MUL
57238: ST_TO_ADDR
// result := [ _x , _y ] ;
57239: LD_ADDR_VAR 0 5
57243: PUSH
57244: LD_VAR 0 6
57248: PUSH
57249: LD_VAR 0 7
57253: PUSH
57254: EMPTY
57255: LIST
57256: LIST
57257: ST_TO_ADDR
// end ;
57258: LD_VAR 0 5
57262: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
57263: LD_INT 0
57265: PPUSH
57266: PPUSH
57267: PPUSH
57268: PPUSH
// task := GetTaskList ( unit ) ;
57269: LD_ADDR_VAR 0 7
57273: PUSH
57274: LD_VAR 0 1
57278: PPUSH
57279: CALL_OW 437
57283: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
57284: LD_VAR 0 7
57288: NOT
57289: PUSH
57290: LD_VAR 0 1
57294: PPUSH
57295: LD_VAR 0 2
57299: PPUSH
57300: CALL_OW 308
57304: NOT
57305: AND
57306: IFFALSE 57310
// exit ;
57308: GO 57428
// if IsInArea ( unit , area ) then
57310: LD_VAR 0 1
57314: PPUSH
57315: LD_VAR 0 2
57319: PPUSH
57320: CALL_OW 308
57324: IFFALSE 57342
// begin ComMoveToArea ( unit , goAway ) ;
57326: LD_VAR 0 1
57330: PPUSH
57331: LD_VAR 0 3
57335: PPUSH
57336: CALL_OW 113
// exit ;
57340: GO 57428
// end ; if task [ 1 ] [ 1 ] <> M then
57342: LD_VAR 0 7
57346: PUSH
57347: LD_INT 1
57349: ARRAY
57350: PUSH
57351: LD_INT 1
57353: ARRAY
57354: PUSH
57355: LD_STRING M
57357: NONEQUAL
57358: IFFALSE 57362
// exit ;
57360: GO 57428
// x := task [ 1 ] [ 2 ] ;
57362: LD_ADDR_VAR 0 5
57366: PUSH
57367: LD_VAR 0 7
57371: PUSH
57372: LD_INT 1
57374: ARRAY
57375: PUSH
57376: LD_INT 2
57378: ARRAY
57379: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
57380: LD_ADDR_VAR 0 6
57384: PUSH
57385: LD_VAR 0 7
57389: PUSH
57390: LD_INT 1
57392: ARRAY
57393: PUSH
57394: LD_INT 3
57396: ARRAY
57397: ST_TO_ADDR
// if InArea ( x , y , area ) then
57398: LD_VAR 0 5
57402: PPUSH
57403: LD_VAR 0 6
57407: PPUSH
57408: LD_VAR 0 2
57412: PPUSH
57413: CALL_OW 309
57417: IFFALSE 57428
// ComStop ( unit ) ;
57419: LD_VAR 0 1
57423: PPUSH
57424: CALL_OW 141
// end ;
57428: LD_VAR 0 4
57432: RET
// export function Abs ( value ) ; begin
57433: LD_INT 0
57435: PPUSH
// result := value ;
57436: LD_ADDR_VAR 0 2
57440: PUSH
57441: LD_VAR 0 1
57445: ST_TO_ADDR
// if value < 0 then
57446: LD_VAR 0 1
57450: PUSH
57451: LD_INT 0
57453: LESS
57454: IFFALSE 57471
// result := value * - 1 ;
57456: LD_ADDR_VAR 0 2
57460: PUSH
57461: LD_VAR 0 1
57465: PUSH
57466: LD_INT 1
57468: NEG
57469: MUL
57470: ST_TO_ADDR
// end ;
57471: LD_VAR 0 2
57475: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
57476: LD_INT 0
57478: PPUSH
57479: PPUSH
57480: PPUSH
57481: PPUSH
57482: PPUSH
57483: PPUSH
57484: PPUSH
57485: PPUSH
// if not unit or not building then
57486: LD_VAR 0 1
57490: NOT
57491: PUSH
57492: LD_VAR 0 2
57496: NOT
57497: OR
57498: IFFALSE 57502
// exit ;
57500: GO 57728
// x := GetX ( building ) ;
57502: LD_ADDR_VAR 0 4
57506: PUSH
57507: LD_VAR 0 2
57511: PPUSH
57512: CALL_OW 250
57516: ST_TO_ADDR
// y := GetY ( building ) ;
57517: LD_ADDR_VAR 0 6
57521: PUSH
57522: LD_VAR 0 2
57526: PPUSH
57527: CALL_OW 251
57531: ST_TO_ADDR
// d := GetDir ( building ) ;
57532: LD_ADDR_VAR 0 8
57536: PUSH
57537: LD_VAR 0 2
57541: PPUSH
57542: CALL_OW 254
57546: ST_TO_ADDR
// r := 4 ;
57547: LD_ADDR_VAR 0 9
57551: PUSH
57552: LD_INT 4
57554: ST_TO_ADDR
// for i := 1 to 5 do
57555: LD_ADDR_VAR 0 10
57559: PUSH
57560: DOUBLE
57561: LD_INT 1
57563: DEC
57564: ST_TO_ADDR
57565: LD_INT 5
57567: PUSH
57568: FOR_TO
57569: IFFALSE 57726
// begin _x := ShiftX ( x , d , r + i ) ;
57571: LD_ADDR_VAR 0 5
57575: PUSH
57576: LD_VAR 0 4
57580: PPUSH
57581: LD_VAR 0 8
57585: PPUSH
57586: LD_VAR 0 9
57590: PUSH
57591: LD_VAR 0 10
57595: PLUS
57596: PPUSH
57597: CALL_OW 272
57601: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
57602: LD_ADDR_VAR 0 7
57606: PUSH
57607: LD_VAR 0 6
57611: PPUSH
57612: LD_VAR 0 8
57616: PPUSH
57617: LD_VAR 0 9
57621: PUSH
57622: LD_VAR 0 10
57626: PLUS
57627: PPUSH
57628: CALL_OW 273
57632: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
57633: LD_VAR 0 5
57637: PPUSH
57638: LD_VAR 0 7
57642: PPUSH
57643: CALL_OW 488
57647: PUSH
57648: LD_VAR 0 5
57652: PPUSH
57653: LD_VAR 0 7
57657: PPUSH
57658: CALL_OW 428
57662: PPUSH
57663: CALL_OW 247
57667: PUSH
57668: LD_INT 3
57670: PUSH
57671: LD_INT 2
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: IN
57678: NOT
57679: AND
57680: IFFALSE 57724
// begin ComMoveXY ( unit , _x , _y ) ;
57682: LD_VAR 0 1
57686: PPUSH
57687: LD_VAR 0 5
57691: PPUSH
57692: LD_VAR 0 7
57696: PPUSH
57697: CALL_OW 111
// result := [ _x , _y ] ;
57701: LD_ADDR_VAR 0 3
57705: PUSH
57706: LD_VAR 0 5
57710: PUSH
57711: LD_VAR 0 7
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: ST_TO_ADDR
// exit ;
57720: POP
57721: POP
57722: GO 57728
// end ; end ;
57724: GO 57568
57726: POP
57727: POP
// end ;
57728: LD_VAR 0 3
57732: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
57733: LD_INT 0
57735: PPUSH
57736: PPUSH
57737: PPUSH
// result := 0 ;
57738: LD_ADDR_VAR 0 3
57742: PUSH
57743: LD_INT 0
57745: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
57746: LD_VAR 0 1
57750: PUSH
57751: LD_INT 0
57753: LESS
57754: PUSH
57755: LD_VAR 0 1
57759: PUSH
57760: LD_INT 8
57762: GREATER
57763: OR
57764: PUSH
57765: LD_VAR 0 2
57769: PUSH
57770: LD_INT 0
57772: LESS
57773: OR
57774: PUSH
57775: LD_VAR 0 2
57779: PUSH
57780: LD_INT 8
57782: GREATER
57783: OR
57784: IFFALSE 57788
// exit ;
57786: GO 57863
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
57788: LD_ADDR_VAR 0 4
57792: PUSH
57793: LD_INT 22
57795: PUSH
57796: LD_VAR 0 2
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: PPUSH
57805: CALL_OW 69
57809: PUSH
57810: FOR_IN
57811: IFFALSE 57861
// begin un := UnitShoot ( i ) ;
57813: LD_ADDR_VAR 0 5
57817: PUSH
57818: LD_VAR 0 4
57822: PPUSH
57823: CALL_OW 504
57827: ST_TO_ADDR
// if GetSide ( un ) = side1 then
57828: LD_VAR 0 5
57832: PPUSH
57833: CALL_OW 255
57837: PUSH
57838: LD_VAR 0 1
57842: EQUAL
57843: IFFALSE 57859
// begin result := un ;
57845: LD_ADDR_VAR 0 3
57849: PUSH
57850: LD_VAR 0 5
57854: ST_TO_ADDR
// exit ;
57855: POP
57856: POP
57857: GO 57863
// end ; end ;
57859: GO 57810
57861: POP
57862: POP
// end ;
57863: LD_VAR 0 3
57867: RET
// export function GetCargoBay ( units ) ; begin
57868: LD_INT 0
57870: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
57871: LD_ADDR_VAR 0 2
57875: PUSH
57876: LD_VAR 0 1
57880: PPUSH
57881: LD_INT 2
57883: PUSH
57884: LD_INT 34
57886: PUSH
57887: LD_INT 12
57889: PUSH
57890: EMPTY
57891: LIST
57892: LIST
57893: PUSH
57894: LD_INT 34
57896: PUSH
57897: LD_INT 51
57899: PUSH
57900: EMPTY
57901: LIST
57902: LIST
57903: PUSH
57904: LD_INT 34
57906: PUSH
57907: LD_INT 32
57909: PUSH
57910: EMPTY
57911: LIST
57912: LIST
57913: PUSH
57914: LD_INT 34
57916: PUSH
57917: LD_EXP 30
57921: PUSH
57922: EMPTY
57923: LIST
57924: LIST
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: LIST
57930: LIST
57931: LIST
57932: PPUSH
57933: CALL_OW 72
57937: ST_TO_ADDR
// end ;
57938: LD_VAR 0 2
57942: RET
// export function Negate ( value ) ; begin
57943: LD_INT 0
57945: PPUSH
// result := not value ;
57946: LD_ADDR_VAR 0 2
57950: PUSH
57951: LD_VAR 0 1
57955: NOT
57956: ST_TO_ADDR
// end ;
57957: LD_VAR 0 2
57961: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
57962: LD_INT 0
57964: PPUSH
// if x1 = x2 then
57965: LD_VAR 0 1
57969: PUSH
57970: LD_VAR 0 3
57974: EQUAL
57975: IFFALSE 58009
// begin if y1 > y2 then
57977: LD_VAR 0 2
57981: PUSH
57982: LD_VAR 0 4
57986: GREATER
57987: IFFALSE 57999
// result := 0 else
57989: LD_ADDR_VAR 0 5
57993: PUSH
57994: LD_INT 0
57996: ST_TO_ADDR
57997: GO 58007
// result := 3 ;
57999: LD_ADDR_VAR 0 5
58003: PUSH
58004: LD_INT 3
58006: ST_TO_ADDR
// exit ;
58007: GO 58095
// end ; if y1 = y2 then
58009: LD_VAR 0 2
58013: PUSH
58014: LD_VAR 0 4
58018: EQUAL
58019: IFFALSE 58053
// begin if x1 > x2 then
58021: LD_VAR 0 1
58025: PUSH
58026: LD_VAR 0 3
58030: GREATER
58031: IFFALSE 58043
// result := 1 else
58033: LD_ADDR_VAR 0 5
58037: PUSH
58038: LD_INT 1
58040: ST_TO_ADDR
58041: GO 58051
// result := 4 ;
58043: LD_ADDR_VAR 0 5
58047: PUSH
58048: LD_INT 4
58050: ST_TO_ADDR
// exit ;
58051: GO 58095
// end ; if x1 > x2 and y1 > y2 then
58053: LD_VAR 0 1
58057: PUSH
58058: LD_VAR 0 3
58062: GREATER
58063: PUSH
58064: LD_VAR 0 2
58068: PUSH
58069: LD_VAR 0 4
58073: GREATER
58074: AND
58075: IFFALSE 58087
// result := 2 else
58077: LD_ADDR_VAR 0 5
58081: PUSH
58082: LD_INT 2
58084: ST_TO_ADDR
58085: GO 58095
// result := 5 ;
58087: LD_ADDR_VAR 0 5
58091: PUSH
58092: LD_INT 5
58094: ST_TO_ADDR
// end ;
58095: LD_VAR 0 5
58099: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
58100: LD_INT 0
58102: PPUSH
58103: PPUSH
// if not driver or not IsInUnit ( driver ) then
58104: LD_VAR 0 1
58108: NOT
58109: PUSH
58110: LD_VAR 0 1
58114: PPUSH
58115: CALL_OW 310
58119: NOT
58120: OR
58121: IFFALSE 58125
// exit ;
58123: GO 58215
// vehicle := IsInUnit ( driver ) ;
58125: LD_ADDR_VAR 0 3
58129: PUSH
58130: LD_VAR 0 1
58134: PPUSH
58135: CALL_OW 310
58139: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
58140: LD_VAR 0 1
58144: PPUSH
58145: LD_STRING \
58147: PUSH
58148: LD_INT 0
58150: PUSH
58151: LD_INT 0
58153: PUSH
58154: LD_INT 0
58156: PUSH
58157: LD_INT 0
58159: PUSH
58160: LD_INT 0
58162: PUSH
58163: LD_INT 0
58165: PUSH
58166: EMPTY
58167: LIST
58168: LIST
58169: LIST
58170: LIST
58171: LIST
58172: LIST
58173: LIST
58174: PUSH
58175: LD_STRING E
58177: PUSH
58178: LD_INT 0
58180: PUSH
58181: LD_INT 0
58183: PUSH
58184: LD_VAR 0 3
58188: PUSH
58189: LD_INT 0
58191: PUSH
58192: LD_INT 0
58194: PUSH
58195: LD_INT 0
58197: PUSH
58198: EMPTY
58199: LIST
58200: LIST
58201: LIST
58202: LIST
58203: LIST
58204: LIST
58205: LIST
58206: PUSH
58207: EMPTY
58208: LIST
58209: LIST
58210: PPUSH
58211: CALL_OW 446
// end ;
58215: LD_VAR 0 2
58219: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
58220: LD_INT 0
58222: PPUSH
58223: PPUSH
// if not driver or not IsInUnit ( driver ) then
58224: LD_VAR 0 1
58228: NOT
58229: PUSH
58230: LD_VAR 0 1
58234: PPUSH
58235: CALL_OW 310
58239: NOT
58240: OR
58241: IFFALSE 58245
// exit ;
58243: GO 58335
// vehicle := IsInUnit ( driver ) ;
58245: LD_ADDR_VAR 0 3
58249: PUSH
58250: LD_VAR 0 1
58254: PPUSH
58255: CALL_OW 310
58259: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
58260: LD_VAR 0 1
58264: PPUSH
58265: LD_STRING \
58267: PUSH
58268: LD_INT 0
58270: PUSH
58271: LD_INT 0
58273: PUSH
58274: LD_INT 0
58276: PUSH
58277: LD_INT 0
58279: PUSH
58280: LD_INT 0
58282: PUSH
58283: LD_INT 0
58285: PUSH
58286: EMPTY
58287: LIST
58288: LIST
58289: LIST
58290: LIST
58291: LIST
58292: LIST
58293: LIST
58294: PUSH
58295: LD_STRING E
58297: PUSH
58298: LD_INT 0
58300: PUSH
58301: LD_INT 0
58303: PUSH
58304: LD_VAR 0 3
58308: PUSH
58309: LD_INT 0
58311: PUSH
58312: LD_INT 0
58314: PUSH
58315: LD_INT 0
58317: PUSH
58318: EMPTY
58319: LIST
58320: LIST
58321: LIST
58322: LIST
58323: LIST
58324: LIST
58325: LIST
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PPUSH
58331: CALL_OW 447
// end ;
58335: LD_VAR 0 2
58339: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
58340: LD_INT 0
58342: PPUSH
58343: PPUSH
58344: PPUSH
// tmp := [ ] ;
58345: LD_ADDR_VAR 0 5
58349: PUSH
58350: EMPTY
58351: ST_TO_ADDR
// for i in units do
58352: LD_ADDR_VAR 0 4
58356: PUSH
58357: LD_VAR 0 1
58361: PUSH
58362: FOR_IN
58363: IFFALSE 58401
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
58365: LD_ADDR_VAR 0 5
58369: PUSH
58370: LD_VAR 0 5
58374: PPUSH
58375: LD_VAR 0 5
58379: PUSH
58380: LD_INT 1
58382: PLUS
58383: PPUSH
58384: LD_VAR 0 4
58388: PPUSH
58389: CALL_OW 256
58393: PPUSH
58394: CALL_OW 2
58398: ST_TO_ADDR
58399: GO 58362
58401: POP
58402: POP
// if not tmp then
58403: LD_VAR 0 5
58407: NOT
58408: IFFALSE 58412
// exit ;
58410: GO 58460
// if asc then
58412: LD_VAR 0 2
58416: IFFALSE 58440
// result := SortListByListAsc ( units , tmp ) else
58418: LD_ADDR_VAR 0 3
58422: PUSH
58423: LD_VAR 0 1
58427: PPUSH
58428: LD_VAR 0 5
58432: PPUSH
58433: CALL_OW 76
58437: ST_TO_ADDR
58438: GO 58460
// result := SortListByListDesc ( units , tmp ) ;
58440: LD_ADDR_VAR 0 3
58444: PUSH
58445: LD_VAR 0 1
58449: PPUSH
58450: LD_VAR 0 5
58454: PPUSH
58455: CALL_OW 77
58459: ST_TO_ADDR
// end ;
58460: LD_VAR 0 3
58464: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
58465: LD_INT 0
58467: PPUSH
58468: PPUSH
// task := GetTaskList ( mech ) ;
58469: LD_ADDR_VAR 0 4
58473: PUSH
58474: LD_VAR 0 1
58478: PPUSH
58479: CALL_OW 437
58483: ST_TO_ADDR
// if not task then
58484: LD_VAR 0 4
58488: NOT
58489: IFFALSE 58493
// exit ;
58491: GO 58535
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
58493: LD_ADDR_VAR 0 3
58497: PUSH
58498: LD_VAR 0 4
58502: PUSH
58503: LD_INT 1
58505: ARRAY
58506: PUSH
58507: LD_INT 1
58509: ARRAY
58510: PUSH
58511: LD_STRING r
58513: EQUAL
58514: PUSH
58515: LD_VAR 0 4
58519: PUSH
58520: LD_INT 1
58522: ARRAY
58523: PUSH
58524: LD_INT 4
58526: ARRAY
58527: PUSH
58528: LD_VAR 0 2
58532: EQUAL
58533: AND
58534: ST_TO_ADDR
// end ;
58535: LD_VAR 0 3
58539: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
58540: LD_INT 0
58542: PPUSH
// SetDir ( unit , d ) ;
58543: LD_VAR 0 1
58547: PPUSH
58548: LD_VAR 0 4
58552: PPUSH
58553: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
58557: LD_VAR 0 1
58561: PPUSH
58562: LD_VAR 0 2
58566: PPUSH
58567: LD_VAR 0 3
58571: PPUSH
58572: LD_VAR 0 5
58576: PPUSH
58577: CALL_OW 48
// end ;
58581: LD_VAR 0 6
58585: RET
// export function ToNaturalNumber ( number ) ; begin
58586: LD_INT 0
58588: PPUSH
// result := number div 1 ;
58589: LD_ADDR_VAR 0 2
58593: PUSH
58594: LD_VAR 0 1
58598: PUSH
58599: LD_INT 1
58601: DIV
58602: ST_TO_ADDR
// if number < 0 then
58603: LD_VAR 0 1
58607: PUSH
58608: LD_INT 0
58610: LESS
58611: IFFALSE 58621
// result := 0 ;
58613: LD_ADDR_VAR 0 2
58617: PUSH
58618: LD_INT 0
58620: ST_TO_ADDR
// end ;
58621: LD_VAR 0 2
58625: RET
// export function SortByClass ( units , class ) ; var un ; begin
58626: LD_INT 0
58628: PPUSH
58629: PPUSH
// if not units or not class then
58630: LD_VAR 0 1
58634: NOT
58635: PUSH
58636: LD_VAR 0 2
58640: NOT
58641: OR
58642: IFFALSE 58646
// exit ;
58644: GO 58741
// result := [ ] ;
58646: LD_ADDR_VAR 0 3
58650: PUSH
58651: EMPTY
58652: ST_TO_ADDR
// for un in units do
58653: LD_ADDR_VAR 0 4
58657: PUSH
58658: LD_VAR 0 1
58662: PUSH
58663: FOR_IN
58664: IFFALSE 58739
// if GetClass ( un ) = class then
58666: LD_VAR 0 4
58670: PPUSH
58671: CALL_OW 257
58675: PUSH
58676: LD_VAR 0 2
58680: EQUAL
58681: IFFALSE 58708
// result := Insert ( result , 1 , un ) else
58683: LD_ADDR_VAR 0 3
58687: PUSH
58688: LD_VAR 0 3
58692: PPUSH
58693: LD_INT 1
58695: PPUSH
58696: LD_VAR 0 4
58700: PPUSH
58701: CALL_OW 2
58705: ST_TO_ADDR
58706: GO 58737
// result := Replace ( result , result + 1 , un ) ;
58708: LD_ADDR_VAR 0 3
58712: PUSH
58713: LD_VAR 0 3
58717: PPUSH
58718: LD_VAR 0 3
58722: PUSH
58723: LD_INT 1
58725: PLUS
58726: PPUSH
58727: LD_VAR 0 4
58731: PPUSH
58732: CALL_OW 1
58736: ST_TO_ADDR
58737: GO 58663
58739: POP
58740: POP
// end ; end_of_file
58741: LD_VAR 0 3
58745: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
58746: LD_INT 0
58748: PPUSH
// ar_miner := 81 ;
58749: LD_ADDR_EXP 36
58753: PUSH
58754: LD_INT 81
58756: ST_TO_ADDR
// ar_crane := 88 ;
58757: LD_ADDR_EXP 35
58761: PUSH
58762: LD_INT 88
58764: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
58765: LD_ADDR_EXP 30
58769: PUSH
58770: LD_INT 89
58772: ST_TO_ADDR
// us_hack := 99 ;
58773: LD_ADDR_EXP 31
58777: PUSH
58778: LD_INT 99
58780: ST_TO_ADDR
// us_artillery := 97 ;
58781: LD_ADDR_EXP 32
58785: PUSH
58786: LD_INT 97
58788: ST_TO_ADDR
// ar_bio_bomb := 91 ;
58789: LD_ADDR_EXP 33
58793: PUSH
58794: LD_INT 91
58796: ST_TO_ADDR
// ar_mortar := 92 ;
58797: LD_ADDR_EXP 34
58801: PUSH
58802: LD_INT 92
58804: ST_TO_ADDR
// ru_radar := 98 ;
58805: LD_ADDR_EXP 29
58809: PUSH
58810: LD_INT 98
58812: ST_TO_ADDR
// tech_Artillery := 80 ;
58813: LD_ADDR_EXP 37
58817: PUSH
58818: LD_INT 80
58820: ST_TO_ADDR
// tech_RadMat := 81 ;
58821: LD_ADDR_EXP 38
58825: PUSH
58826: LD_INT 81
58828: ST_TO_ADDR
// tech_BasicTools := 82 ;
58829: LD_ADDR_EXP 39
58833: PUSH
58834: LD_INT 82
58836: ST_TO_ADDR
// tech_Cargo := 83 ;
58837: LD_ADDR_EXP 40
58841: PUSH
58842: LD_INT 83
58844: ST_TO_ADDR
// tech_Track := 84 ;
58845: LD_ADDR_EXP 41
58849: PUSH
58850: LD_INT 84
58852: ST_TO_ADDR
// tech_Crane := 85 ;
58853: LD_ADDR_EXP 42
58857: PUSH
58858: LD_INT 85
58860: ST_TO_ADDR
// tech_Bulldozer := 86 ;
58861: LD_ADDR_EXP 43
58865: PUSH
58866: LD_INT 86
58868: ST_TO_ADDR
// tech_Hovercraft := 87 ;
58869: LD_ADDR_EXP 44
58873: PUSH
58874: LD_INT 87
58876: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
58877: LD_ADDR_EXP 45
58881: PUSH
58882: LD_INT 88
58884: ST_TO_ADDR
// class_mastodont := 31 ;
58885: LD_ADDR_EXP 46
58889: PUSH
58890: LD_INT 31
58892: ST_TO_ADDR
// class_horse := 21 ;
58893: LD_ADDR_EXP 47
58897: PUSH
58898: LD_INT 21
58900: ST_TO_ADDR
// end ;
58901: LD_VAR 0 1
58905: RET
// every 1 do
58906: GO 58908
58908: DISABLE
// InitGlobalVariables ; end_of_file
58909: CALL 58746 0 0
58913: END
// export skirmish , debug_mc ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_teleport_exit_set , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver , mc_class , mc_class_case_use , mc_is_defending ; export function InitMacro ; var i ; begin
58914: LD_INT 0
58916: PPUSH
58917: PPUSH
// skirmish := false ;
58918: LD_ADDR_EXP 48
58922: PUSH
58923: LD_INT 0
58925: ST_TO_ADDR
// debug_mc := false ;
58926: LD_ADDR_EXP 49
58930: PUSH
58931: LD_INT 0
58933: ST_TO_ADDR
// mc_bases := [ ] ;
58934: LD_ADDR_EXP 50
58938: PUSH
58939: EMPTY
58940: ST_TO_ADDR
// mc_sides := [ ] ;
58941: LD_ADDR_EXP 76
58945: PUSH
58946: EMPTY
58947: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
58948: LD_ADDR_EXP 51
58952: PUSH
58953: EMPTY
58954: ST_TO_ADDR
// mc_building_repairs := [ ] ;
58955: LD_ADDR_EXP 52
58959: PUSH
58960: EMPTY
58961: ST_TO_ADDR
// mc_need_heal := [ ] ;
58962: LD_ADDR_EXP 53
58966: PUSH
58967: EMPTY
58968: ST_TO_ADDR
// mc_healers := [ ] ;
58969: LD_ADDR_EXP 54
58973: PUSH
58974: EMPTY
58975: ST_TO_ADDR
// mc_build_list := [ ] ;
58976: LD_ADDR_EXP 55
58980: PUSH
58981: EMPTY
58982: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
58983: LD_ADDR_EXP 82
58987: PUSH
58988: EMPTY
58989: ST_TO_ADDR
// mc_builders := [ ] ;
58990: LD_ADDR_EXP 56
58994: PUSH
58995: EMPTY
58996: ST_TO_ADDR
// mc_construct_list := [ ] ;
58997: LD_ADDR_EXP 57
59001: PUSH
59002: EMPTY
59003: ST_TO_ADDR
// mc_turret_list := [ ] ;
59004: LD_ADDR_EXP 58
59008: PUSH
59009: EMPTY
59010: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
59011: LD_ADDR_EXP 59
59015: PUSH
59016: EMPTY
59017: ST_TO_ADDR
// mc_miners := [ ] ;
59018: LD_ADDR_EXP 64
59022: PUSH
59023: EMPTY
59024: ST_TO_ADDR
// mc_mines := [ ] ;
59025: LD_ADDR_EXP 63
59029: PUSH
59030: EMPTY
59031: ST_TO_ADDR
// mc_minefields := [ ] ;
59032: LD_ADDR_EXP 65
59036: PUSH
59037: EMPTY
59038: ST_TO_ADDR
// mc_crates := [ ] ;
59039: LD_ADDR_EXP 66
59043: PUSH
59044: EMPTY
59045: ST_TO_ADDR
// mc_crates_collector := [ ] ;
59046: LD_ADDR_EXP 67
59050: PUSH
59051: EMPTY
59052: ST_TO_ADDR
// mc_crates_area := [ ] ;
59053: LD_ADDR_EXP 68
59057: PUSH
59058: EMPTY
59059: ST_TO_ADDR
// mc_vehicles := [ ] ;
59060: LD_ADDR_EXP 69
59064: PUSH
59065: EMPTY
59066: ST_TO_ADDR
// mc_attack := [ ] ;
59067: LD_ADDR_EXP 70
59071: PUSH
59072: EMPTY
59073: ST_TO_ADDR
// mc_produce := [ ] ;
59074: LD_ADDR_EXP 71
59078: PUSH
59079: EMPTY
59080: ST_TO_ADDR
// mc_defender := [ ] ;
59081: LD_ADDR_EXP 72
59085: PUSH
59086: EMPTY
59087: ST_TO_ADDR
// mc_parking := [ ] ;
59088: LD_ADDR_EXP 74
59092: PUSH
59093: EMPTY
59094: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
59095: LD_ADDR_EXP 60
59099: PUSH
59100: EMPTY
59101: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
59102: LD_ADDR_EXP 62
59106: PUSH
59107: EMPTY
59108: ST_TO_ADDR
// mc_scan := [ ] ;
59109: LD_ADDR_EXP 73
59113: PUSH
59114: EMPTY
59115: ST_TO_ADDR
// mc_scan_area := [ ] ;
59116: LD_ADDR_EXP 75
59120: PUSH
59121: EMPTY
59122: ST_TO_ADDR
// mc_tech := [ ] ;
59123: LD_ADDR_EXP 77
59127: PUSH
59128: EMPTY
59129: ST_TO_ADDR
// mc_class := [ ] ;
59130: LD_ADDR_EXP 91
59134: PUSH
59135: EMPTY
59136: ST_TO_ADDR
// mc_class_case_use := [ ] ;
59137: LD_ADDR_EXP 92
59141: PUSH
59142: EMPTY
59143: ST_TO_ADDR
// mc_is_defending := [ ] ;
59144: LD_ADDR_EXP 93
59148: PUSH
59149: EMPTY
59150: ST_TO_ADDR
// end ;
59151: LD_VAR 0 1
59155: RET
// export function MC_Kill ( base ) ; begin
59156: LD_INT 0
59158: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
59159: LD_ADDR_EXP 50
59163: PUSH
59164: LD_EXP 50
59168: PPUSH
59169: LD_VAR 0 1
59173: PPUSH
59174: EMPTY
59175: PPUSH
59176: CALL_OW 1
59180: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
59181: LD_ADDR_EXP 51
59185: PUSH
59186: LD_EXP 51
59190: PPUSH
59191: LD_VAR 0 1
59195: PPUSH
59196: EMPTY
59197: PPUSH
59198: CALL_OW 1
59202: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
59203: LD_ADDR_EXP 52
59207: PUSH
59208: LD_EXP 52
59212: PPUSH
59213: LD_VAR 0 1
59217: PPUSH
59218: EMPTY
59219: PPUSH
59220: CALL_OW 1
59224: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
59225: LD_ADDR_EXP 53
59229: PUSH
59230: LD_EXP 53
59234: PPUSH
59235: LD_VAR 0 1
59239: PPUSH
59240: EMPTY
59241: PPUSH
59242: CALL_OW 1
59246: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
59247: LD_ADDR_EXP 54
59251: PUSH
59252: LD_EXP 54
59256: PPUSH
59257: LD_VAR 0 1
59261: PPUSH
59262: EMPTY
59263: PPUSH
59264: CALL_OW 1
59268: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
59269: LD_ADDR_EXP 55
59273: PUSH
59274: LD_EXP 55
59278: PPUSH
59279: LD_VAR 0 1
59283: PPUSH
59284: EMPTY
59285: PPUSH
59286: CALL_OW 1
59290: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
59291: LD_ADDR_EXP 56
59295: PUSH
59296: LD_EXP 56
59300: PPUSH
59301: LD_VAR 0 1
59305: PPUSH
59306: EMPTY
59307: PPUSH
59308: CALL_OW 1
59312: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
59313: LD_ADDR_EXP 57
59317: PUSH
59318: LD_EXP 57
59322: PPUSH
59323: LD_VAR 0 1
59327: PPUSH
59328: EMPTY
59329: PPUSH
59330: CALL_OW 1
59334: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
59335: LD_ADDR_EXP 58
59339: PUSH
59340: LD_EXP 58
59344: PPUSH
59345: LD_VAR 0 1
59349: PPUSH
59350: EMPTY
59351: PPUSH
59352: CALL_OW 1
59356: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
59357: LD_ADDR_EXP 59
59361: PUSH
59362: LD_EXP 59
59366: PPUSH
59367: LD_VAR 0 1
59371: PPUSH
59372: EMPTY
59373: PPUSH
59374: CALL_OW 1
59378: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
59379: LD_ADDR_EXP 60
59383: PUSH
59384: LD_EXP 60
59388: PPUSH
59389: LD_VAR 0 1
59393: PPUSH
59394: EMPTY
59395: PPUSH
59396: CALL_OW 1
59400: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
59401: LD_ADDR_EXP 61
59405: PUSH
59406: LD_EXP 61
59410: PPUSH
59411: LD_VAR 0 1
59415: PPUSH
59416: LD_INT 0
59418: PPUSH
59419: CALL_OW 1
59423: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
59424: LD_ADDR_EXP 62
59428: PUSH
59429: LD_EXP 62
59433: PPUSH
59434: LD_VAR 0 1
59438: PPUSH
59439: EMPTY
59440: PPUSH
59441: CALL_OW 1
59445: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
59446: LD_ADDR_EXP 63
59450: PUSH
59451: LD_EXP 63
59455: PPUSH
59456: LD_VAR 0 1
59460: PPUSH
59461: EMPTY
59462: PPUSH
59463: CALL_OW 1
59467: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
59468: LD_ADDR_EXP 64
59472: PUSH
59473: LD_EXP 64
59477: PPUSH
59478: LD_VAR 0 1
59482: PPUSH
59483: EMPTY
59484: PPUSH
59485: CALL_OW 1
59489: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
59490: LD_ADDR_EXP 65
59494: PUSH
59495: LD_EXP 65
59499: PPUSH
59500: LD_VAR 0 1
59504: PPUSH
59505: EMPTY
59506: PPUSH
59507: CALL_OW 1
59511: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
59512: LD_ADDR_EXP 66
59516: PUSH
59517: LD_EXP 66
59521: PPUSH
59522: LD_VAR 0 1
59526: PPUSH
59527: EMPTY
59528: PPUSH
59529: CALL_OW 1
59533: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
59534: LD_ADDR_EXP 67
59538: PUSH
59539: LD_EXP 67
59543: PPUSH
59544: LD_VAR 0 1
59548: PPUSH
59549: EMPTY
59550: PPUSH
59551: CALL_OW 1
59555: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
59556: LD_ADDR_EXP 68
59560: PUSH
59561: LD_EXP 68
59565: PPUSH
59566: LD_VAR 0 1
59570: PPUSH
59571: EMPTY
59572: PPUSH
59573: CALL_OW 1
59577: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
59578: LD_ADDR_EXP 69
59582: PUSH
59583: LD_EXP 69
59587: PPUSH
59588: LD_VAR 0 1
59592: PPUSH
59593: EMPTY
59594: PPUSH
59595: CALL_OW 1
59599: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
59600: LD_ADDR_EXP 70
59604: PUSH
59605: LD_EXP 70
59609: PPUSH
59610: LD_VAR 0 1
59614: PPUSH
59615: EMPTY
59616: PPUSH
59617: CALL_OW 1
59621: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
59622: LD_ADDR_EXP 71
59626: PUSH
59627: LD_EXP 71
59631: PPUSH
59632: LD_VAR 0 1
59636: PPUSH
59637: EMPTY
59638: PPUSH
59639: CALL_OW 1
59643: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
59644: LD_ADDR_EXP 72
59648: PUSH
59649: LD_EXP 72
59653: PPUSH
59654: LD_VAR 0 1
59658: PPUSH
59659: EMPTY
59660: PPUSH
59661: CALL_OW 1
59665: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
59666: LD_ADDR_EXP 73
59670: PUSH
59671: LD_EXP 73
59675: PPUSH
59676: LD_VAR 0 1
59680: PPUSH
59681: EMPTY
59682: PPUSH
59683: CALL_OW 1
59687: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
59688: LD_ADDR_EXP 74
59692: PUSH
59693: LD_EXP 74
59697: PPUSH
59698: LD_VAR 0 1
59702: PPUSH
59703: EMPTY
59704: PPUSH
59705: CALL_OW 1
59709: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
59710: LD_ADDR_EXP 75
59714: PUSH
59715: LD_EXP 75
59719: PPUSH
59720: LD_VAR 0 1
59724: PPUSH
59725: EMPTY
59726: PPUSH
59727: CALL_OW 1
59731: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
59732: LD_ADDR_EXP 77
59736: PUSH
59737: LD_EXP 77
59741: PPUSH
59742: LD_VAR 0 1
59746: PPUSH
59747: EMPTY
59748: PPUSH
59749: CALL_OW 1
59753: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
59754: LD_ADDR_EXP 79
59758: PUSH
59759: LD_EXP 79
59763: PPUSH
59764: LD_VAR 0 1
59768: PPUSH
59769: EMPTY
59770: PPUSH
59771: CALL_OW 1
59775: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
59776: LD_ADDR_EXP 80
59780: PUSH
59781: LD_EXP 80
59785: PPUSH
59786: LD_VAR 0 1
59790: PPUSH
59791: EMPTY
59792: PPUSH
59793: CALL_OW 1
59797: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
59798: LD_ADDR_EXP 81
59802: PUSH
59803: LD_EXP 81
59807: PPUSH
59808: LD_VAR 0 1
59812: PPUSH
59813: EMPTY
59814: PPUSH
59815: CALL_OW 1
59819: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
59820: LD_ADDR_EXP 82
59824: PUSH
59825: LD_EXP 82
59829: PPUSH
59830: LD_VAR 0 1
59834: PPUSH
59835: EMPTY
59836: PPUSH
59837: CALL_OW 1
59841: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
59842: LD_ADDR_EXP 83
59846: PUSH
59847: LD_EXP 83
59851: PPUSH
59852: LD_VAR 0 1
59856: PPUSH
59857: EMPTY
59858: PPUSH
59859: CALL_OW 1
59863: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
59864: LD_ADDR_EXP 84
59868: PUSH
59869: LD_EXP 84
59873: PPUSH
59874: LD_VAR 0 1
59878: PPUSH
59879: EMPTY
59880: PPUSH
59881: CALL_OW 1
59885: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
59886: LD_ADDR_EXP 85
59890: PUSH
59891: LD_EXP 85
59895: PPUSH
59896: LD_VAR 0 1
59900: PPUSH
59901: EMPTY
59902: PPUSH
59903: CALL_OW 1
59907: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
59908: LD_ADDR_EXP 86
59912: PUSH
59913: LD_EXP 86
59917: PPUSH
59918: LD_VAR 0 1
59922: PPUSH
59923: EMPTY
59924: PPUSH
59925: CALL_OW 1
59929: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
59930: LD_ADDR_EXP 87
59934: PUSH
59935: LD_EXP 87
59939: PPUSH
59940: LD_VAR 0 1
59944: PPUSH
59945: EMPTY
59946: PPUSH
59947: CALL_OW 1
59951: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
59952: LD_ADDR_EXP 88
59956: PUSH
59957: LD_EXP 88
59961: PPUSH
59962: LD_VAR 0 1
59966: PPUSH
59967: EMPTY
59968: PPUSH
59969: CALL_OW 1
59973: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
59974: LD_ADDR_EXP 89
59978: PUSH
59979: LD_EXP 89
59983: PPUSH
59984: LD_VAR 0 1
59988: PPUSH
59989: EMPTY
59990: PPUSH
59991: CALL_OW 1
59995: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
59996: LD_ADDR_EXP 90
60000: PUSH
60001: LD_EXP 90
60005: PPUSH
60006: LD_VAR 0 1
60010: PPUSH
60011: EMPTY
60012: PPUSH
60013: CALL_OW 1
60017: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
60018: LD_ADDR_EXP 91
60022: PUSH
60023: LD_EXP 91
60027: PPUSH
60028: LD_VAR 0 1
60032: PPUSH
60033: EMPTY
60034: PPUSH
60035: CALL_OW 1
60039: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
60040: LD_ADDR_EXP 92
60044: PUSH
60045: LD_EXP 92
60049: PPUSH
60050: LD_VAR 0 1
60054: PPUSH
60055: LD_INT 0
60057: PPUSH
60058: CALL_OW 1
60062: ST_TO_ADDR
// mc_is_defending := Replace ( mc_is_defending , base , false ) ;
60063: LD_ADDR_EXP 93
60067: PUSH
60068: LD_EXP 93
60072: PPUSH
60073: LD_VAR 0 1
60077: PPUSH
60078: LD_INT 0
60080: PPUSH
60081: CALL_OW 1
60085: ST_TO_ADDR
// end ;
60086: LD_VAR 0 2
60090: RET
// export function MC_Add ( side , units ) ; var base ; begin
60091: LD_INT 0
60093: PPUSH
60094: PPUSH
// base := mc_bases + 1 ;
60095: LD_ADDR_VAR 0 4
60099: PUSH
60100: LD_EXP 50
60104: PUSH
60105: LD_INT 1
60107: PLUS
60108: ST_TO_ADDR
// mc_sides := Replace ( mc_sides , base , side ) ;
60109: LD_ADDR_EXP 76
60113: PUSH
60114: LD_EXP 76
60118: PPUSH
60119: LD_VAR 0 4
60123: PPUSH
60124: LD_VAR 0 1
60128: PPUSH
60129: CALL_OW 1
60133: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , base , units ) ;
60134: LD_ADDR_EXP 50
60138: PUSH
60139: LD_EXP 50
60143: PPUSH
60144: LD_VAR 0 4
60148: PPUSH
60149: LD_VAR 0 2
60153: PPUSH
60154: CALL_OW 1
60158: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
60159: LD_ADDR_EXP 51
60163: PUSH
60164: LD_EXP 51
60168: PPUSH
60169: LD_VAR 0 4
60173: PPUSH
60174: EMPTY
60175: PPUSH
60176: CALL_OW 1
60180: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
60181: LD_ADDR_EXP 52
60185: PUSH
60186: LD_EXP 52
60190: PPUSH
60191: LD_VAR 0 4
60195: PPUSH
60196: EMPTY
60197: PPUSH
60198: CALL_OW 1
60202: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
60203: LD_ADDR_EXP 53
60207: PUSH
60208: LD_EXP 53
60212: PPUSH
60213: LD_VAR 0 4
60217: PPUSH
60218: EMPTY
60219: PPUSH
60220: CALL_OW 1
60224: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
60225: LD_ADDR_EXP 54
60229: PUSH
60230: LD_EXP 54
60234: PPUSH
60235: LD_VAR 0 4
60239: PPUSH
60240: EMPTY
60241: PPUSH
60242: CALL_OW 1
60246: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
60247: LD_ADDR_EXP 55
60251: PUSH
60252: LD_EXP 55
60256: PPUSH
60257: LD_VAR 0 4
60261: PPUSH
60262: EMPTY
60263: PPUSH
60264: CALL_OW 1
60268: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
60269: LD_ADDR_EXP 56
60273: PUSH
60274: LD_EXP 56
60278: PPUSH
60279: LD_VAR 0 4
60283: PPUSH
60284: EMPTY
60285: PPUSH
60286: CALL_OW 1
60290: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
60291: LD_ADDR_EXP 57
60295: PUSH
60296: LD_EXP 57
60300: PPUSH
60301: LD_VAR 0 4
60305: PPUSH
60306: EMPTY
60307: PPUSH
60308: CALL_OW 1
60312: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
60313: LD_ADDR_EXP 58
60317: PUSH
60318: LD_EXP 58
60322: PPUSH
60323: LD_VAR 0 4
60327: PPUSH
60328: EMPTY
60329: PPUSH
60330: CALL_OW 1
60334: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
60335: LD_ADDR_EXP 59
60339: PUSH
60340: LD_EXP 59
60344: PPUSH
60345: LD_VAR 0 4
60349: PPUSH
60350: EMPTY
60351: PPUSH
60352: CALL_OW 1
60356: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
60357: LD_ADDR_EXP 60
60361: PUSH
60362: LD_EXP 60
60366: PPUSH
60367: LD_VAR 0 4
60371: PPUSH
60372: EMPTY
60373: PPUSH
60374: CALL_OW 1
60378: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
60379: LD_ADDR_EXP 61
60383: PUSH
60384: LD_EXP 61
60388: PPUSH
60389: LD_VAR 0 4
60393: PPUSH
60394: LD_INT 0
60396: PPUSH
60397: CALL_OW 1
60401: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
60402: LD_ADDR_EXP 62
60406: PUSH
60407: LD_EXP 62
60411: PPUSH
60412: LD_VAR 0 4
60416: PPUSH
60417: EMPTY
60418: PPUSH
60419: CALL_OW 1
60423: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
60424: LD_ADDR_EXP 63
60428: PUSH
60429: LD_EXP 63
60433: PPUSH
60434: LD_VAR 0 4
60438: PPUSH
60439: EMPTY
60440: PPUSH
60441: CALL_OW 1
60445: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
60446: LD_ADDR_EXP 64
60450: PUSH
60451: LD_EXP 64
60455: PPUSH
60456: LD_VAR 0 4
60460: PPUSH
60461: EMPTY
60462: PPUSH
60463: CALL_OW 1
60467: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
60468: LD_ADDR_EXP 65
60472: PUSH
60473: LD_EXP 65
60477: PPUSH
60478: LD_VAR 0 4
60482: PPUSH
60483: EMPTY
60484: PPUSH
60485: CALL_OW 1
60489: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
60490: LD_ADDR_EXP 66
60494: PUSH
60495: LD_EXP 66
60499: PPUSH
60500: LD_VAR 0 4
60504: PPUSH
60505: EMPTY
60506: PPUSH
60507: CALL_OW 1
60511: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
60512: LD_ADDR_EXP 67
60516: PUSH
60517: LD_EXP 67
60521: PPUSH
60522: LD_VAR 0 4
60526: PPUSH
60527: EMPTY
60528: PPUSH
60529: CALL_OW 1
60533: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
60534: LD_ADDR_EXP 68
60538: PUSH
60539: LD_EXP 68
60543: PPUSH
60544: LD_VAR 0 4
60548: PPUSH
60549: EMPTY
60550: PPUSH
60551: CALL_OW 1
60555: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
60556: LD_ADDR_EXP 69
60560: PUSH
60561: LD_EXP 69
60565: PPUSH
60566: LD_VAR 0 4
60570: PPUSH
60571: EMPTY
60572: PPUSH
60573: CALL_OW 1
60577: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
60578: LD_ADDR_EXP 70
60582: PUSH
60583: LD_EXP 70
60587: PPUSH
60588: LD_VAR 0 4
60592: PPUSH
60593: EMPTY
60594: PPUSH
60595: CALL_OW 1
60599: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
60600: LD_ADDR_EXP 71
60604: PUSH
60605: LD_EXP 71
60609: PPUSH
60610: LD_VAR 0 4
60614: PPUSH
60615: EMPTY
60616: PPUSH
60617: CALL_OW 1
60621: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
60622: LD_ADDR_EXP 72
60626: PUSH
60627: LD_EXP 72
60631: PPUSH
60632: LD_VAR 0 4
60636: PPUSH
60637: EMPTY
60638: PPUSH
60639: CALL_OW 1
60643: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
60644: LD_ADDR_EXP 73
60648: PUSH
60649: LD_EXP 73
60653: PPUSH
60654: LD_VAR 0 4
60658: PPUSH
60659: EMPTY
60660: PPUSH
60661: CALL_OW 1
60665: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
60666: LD_ADDR_EXP 74
60670: PUSH
60671: LD_EXP 74
60675: PPUSH
60676: LD_VAR 0 4
60680: PPUSH
60681: EMPTY
60682: PPUSH
60683: CALL_OW 1
60687: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
60688: LD_ADDR_EXP 75
60692: PUSH
60693: LD_EXP 75
60697: PPUSH
60698: LD_VAR 0 4
60702: PPUSH
60703: EMPTY
60704: PPUSH
60705: CALL_OW 1
60709: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
60710: LD_ADDR_EXP 77
60714: PUSH
60715: LD_EXP 77
60719: PPUSH
60720: LD_VAR 0 4
60724: PPUSH
60725: EMPTY
60726: PPUSH
60727: CALL_OW 1
60731: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
60732: LD_ADDR_EXP 79
60736: PUSH
60737: LD_EXP 79
60741: PPUSH
60742: LD_VAR 0 4
60746: PPUSH
60747: EMPTY
60748: PPUSH
60749: CALL_OW 1
60753: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
60754: LD_ADDR_EXP 80
60758: PUSH
60759: LD_EXP 80
60763: PPUSH
60764: LD_VAR 0 4
60768: PPUSH
60769: EMPTY
60770: PPUSH
60771: CALL_OW 1
60775: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
60776: LD_ADDR_EXP 81
60780: PUSH
60781: LD_EXP 81
60785: PPUSH
60786: LD_VAR 0 4
60790: PPUSH
60791: EMPTY
60792: PPUSH
60793: CALL_OW 1
60797: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
60798: LD_ADDR_EXP 82
60802: PUSH
60803: LD_EXP 82
60807: PPUSH
60808: LD_VAR 0 4
60812: PPUSH
60813: EMPTY
60814: PPUSH
60815: CALL_OW 1
60819: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
60820: LD_ADDR_EXP 83
60824: PUSH
60825: LD_EXP 83
60829: PPUSH
60830: LD_VAR 0 4
60834: PPUSH
60835: EMPTY
60836: PPUSH
60837: CALL_OW 1
60841: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
60842: LD_ADDR_EXP 84
60846: PUSH
60847: LD_EXP 84
60851: PPUSH
60852: LD_VAR 0 4
60856: PPUSH
60857: EMPTY
60858: PPUSH
60859: CALL_OW 1
60863: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
60864: LD_ADDR_EXP 85
60868: PUSH
60869: LD_EXP 85
60873: PPUSH
60874: LD_VAR 0 4
60878: PPUSH
60879: EMPTY
60880: PPUSH
60881: CALL_OW 1
60885: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
60886: LD_ADDR_EXP 86
60890: PUSH
60891: LD_EXP 86
60895: PPUSH
60896: LD_VAR 0 4
60900: PPUSH
60901: EMPTY
60902: PPUSH
60903: CALL_OW 1
60907: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
60908: LD_ADDR_EXP 87
60912: PUSH
60913: LD_EXP 87
60917: PPUSH
60918: LD_VAR 0 4
60922: PPUSH
60923: EMPTY
60924: PPUSH
60925: CALL_OW 1
60929: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
60930: LD_ADDR_EXP 88
60934: PUSH
60935: LD_EXP 88
60939: PPUSH
60940: LD_VAR 0 4
60944: PPUSH
60945: EMPTY
60946: PPUSH
60947: CALL_OW 1
60951: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
60952: LD_ADDR_EXP 89
60956: PUSH
60957: LD_EXP 89
60961: PPUSH
60962: LD_VAR 0 4
60966: PPUSH
60967: EMPTY
60968: PPUSH
60969: CALL_OW 1
60973: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
60974: LD_ADDR_EXP 90
60978: PUSH
60979: LD_EXP 90
60983: PPUSH
60984: LD_VAR 0 4
60988: PPUSH
60989: EMPTY
60990: PPUSH
60991: CALL_OW 1
60995: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
60996: LD_ADDR_EXP 91
61000: PUSH
61001: LD_EXP 91
61005: PPUSH
61006: LD_VAR 0 4
61010: PPUSH
61011: EMPTY
61012: PPUSH
61013: CALL_OW 1
61017: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
61018: LD_ADDR_EXP 92
61022: PUSH
61023: LD_EXP 92
61027: PPUSH
61028: LD_VAR 0 4
61032: PPUSH
61033: LD_INT 0
61035: PPUSH
61036: CALL_OW 1
61040: ST_TO_ADDR
// mc_is_defending := Replace ( mc_is_defending , base , false ) ;
61041: LD_ADDR_EXP 93
61045: PUSH
61046: LD_EXP 93
61050: PPUSH
61051: LD_VAR 0 4
61055: PPUSH
61056: LD_INT 0
61058: PPUSH
61059: CALL_OW 1
61063: ST_TO_ADDR
// result := base ;
61064: LD_ADDR_VAR 0 3
61068: PUSH
61069: LD_VAR 0 4
61073: ST_TO_ADDR
// end ;
61074: LD_VAR 0 3
61078: RET
// export function MC_Start ( ) ; var i ; begin
61079: LD_INT 0
61081: PPUSH
61082: PPUSH
// for i = 1 to mc_bases do
61083: LD_ADDR_VAR 0 2
61087: PUSH
61088: DOUBLE
61089: LD_INT 1
61091: DEC
61092: ST_TO_ADDR
61093: LD_EXP 50
61097: PUSH
61098: FOR_TO
61099: IFFALSE 62199
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff 0 ) ;
61101: LD_ADDR_EXP 50
61105: PUSH
61106: LD_EXP 50
61110: PPUSH
61111: LD_VAR 0 2
61115: PPUSH
61116: LD_EXP 50
61120: PUSH
61121: LD_VAR 0 2
61125: ARRAY
61126: PUSH
61127: LD_INT 0
61129: DIFF
61130: PPUSH
61131: CALL_OW 1
61135: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
61136: LD_ADDR_EXP 51
61140: PUSH
61141: LD_EXP 51
61145: PPUSH
61146: LD_VAR 0 2
61150: PPUSH
61151: EMPTY
61152: PPUSH
61153: CALL_OW 1
61157: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
61158: LD_ADDR_EXP 52
61162: PUSH
61163: LD_EXP 52
61167: PPUSH
61168: LD_VAR 0 2
61172: PPUSH
61173: EMPTY
61174: PPUSH
61175: CALL_OW 1
61179: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
61180: LD_ADDR_EXP 53
61184: PUSH
61185: LD_EXP 53
61189: PPUSH
61190: LD_VAR 0 2
61194: PPUSH
61195: EMPTY
61196: PPUSH
61197: CALL_OW 1
61201: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
61202: LD_ADDR_EXP 54
61206: PUSH
61207: LD_EXP 54
61211: PPUSH
61212: LD_VAR 0 2
61216: PPUSH
61217: EMPTY
61218: PUSH
61219: EMPTY
61220: PUSH
61221: EMPTY
61222: LIST
61223: LIST
61224: PPUSH
61225: CALL_OW 1
61229: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
61230: LD_ADDR_EXP 55
61234: PUSH
61235: LD_EXP 55
61239: PPUSH
61240: LD_VAR 0 2
61244: PPUSH
61245: EMPTY
61246: PPUSH
61247: CALL_OW 1
61251: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
61252: LD_ADDR_EXP 82
61256: PUSH
61257: LD_EXP 82
61261: PPUSH
61262: LD_VAR 0 2
61266: PPUSH
61267: EMPTY
61268: PPUSH
61269: CALL_OW 1
61273: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
61274: LD_ADDR_EXP 56
61278: PUSH
61279: LD_EXP 56
61283: PPUSH
61284: LD_VAR 0 2
61288: PPUSH
61289: EMPTY
61290: PPUSH
61291: CALL_OW 1
61295: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
61296: LD_ADDR_EXP 57
61300: PUSH
61301: LD_EXP 57
61305: PPUSH
61306: LD_VAR 0 2
61310: PPUSH
61311: EMPTY
61312: PPUSH
61313: CALL_OW 1
61317: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ) ;
61318: LD_ADDR_EXP 58
61322: PUSH
61323: LD_EXP 58
61327: PPUSH
61328: LD_VAR 0 2
61332: PPUSH
61333: LD_EXP 50
61337: PUSH
61338: LD_VAR 0 2
61342: ARRAY
61343: PPUSH
61344: LD_INT 2
61346: PUSH
61347: LD_INT 30
61349: PUSH
61350: LD_INT 32
61352: PUSH
61353: EMPTY
61354: LIST
61355: LIST
61356: PUSH
61357: LD_INT 30
61359: PUSH
61360: LD_INT 33
61362: PUSH
61363: EMPTY
61364: LIST
61365: LIST
61366: PUSH
61367: EMPTY
61368: LIST
61369: LIST
61370: LIST
61371: PPUSH
61372: CALL_OW 72
61376: PPUSH
61377: CALL_OW 1
61381: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
61382: LD_ADDR_EXP 59
61386: PUSH
61387: LD_EXP 59
61391: PPUSH
61392: LD_VAR 0 2
61396: PPUSH
61397: LD_EXP 50
61401: PUSH
61402: LD_VAR 0 2
61406: ARRAY
61407: PPUSH
61408: LD_INT 2
61410: PUSH
61411: LD_INT 30
61413: PUSH
61414: LD_INT 32
61416: PUSH
61417: EMPTY
61418: LIST
61419: LIST
61420: PUSH
61421: LD_INT 30
61423: PUSH
61424: LD_INT 31
61426: PUSH
61427: EMPTY
61428: LIST
61429: LIST
61430: PUSH
61431: EMPTY
61432: LIST
61433: LIST
61434: LIST
61435: PUSH
61436: LD_INT 58
61438: PUSH
61439: EMPTY
61440: LIST
61441: PUSH
61442: EMPTY
61443: LIST
61444: LIST
61445: PPUSH
61446: CALL_OW 72
61450: PPUSH
61451: CALL_OW 1
61455: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
61456: LD_ADDR_EXP 60
61460: PUSH
61461: LD_EXP 60
61465: PPUSH
61466: LD_VAR 0 2
61470: PPUSH
61471: EMPTY
61472: PPUSH
61473: CALL_OW 1
61477: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
61478: LD_ADDR_EXP 64
61482: PUSH
61483: LD_EXP 64
61487: PPUSH
61488: LD_VAR 0 2
61492: PPUSH
61493: EMPTY
61494: PPUSH
61495: CALL_OW 1
61499: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
61500: LD_ADDR_EXP 63
61504: PUSH
61505: LD_EXP 63
61509: PPUSH
61510: LD_VAR 0 2
61514: PPUSH
61515: EMPTY
61516: PPUSH
61517: CALL_OW 1
61521: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
61522: LD_ADDR_EXP 65
61526: PUSH
61527: LD_EXP 65
61531: PPUSH
61532: LD_VAR 0 2
61536: PPUSH
61537: EMPTY
61538: PPUSH
61539: CALL_OW 1
61543: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
61544: LD_ADDR_EXP 66
61548: PUSH
61549: LD_EXP 66
61553: PPUSH
61554: LD_VAR 0 2
61558: PPUSH
61559: EMPTY
61560: PPUSH
61561: CALL_OW 1
61565: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
61566: LD_ADDR_EXP 67
61570: PUSH
61571: LD_EXP 67
61575: PPUSH
61576: LD_VAR 0 2
61580: PPUSH
61581: EMPTY
61582: PPUSH
61583: CALL_OW 1
61587: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
61588: LD_ADDR_EXP 68
61592: PUSH
61593: LD_EXP 68
61597: PPUSH
61598: LD_VAR 0 2
61602: PPUSH
61603: EMPTY
61604: PPUSH
61605: CALL_OW 1
61609: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
61610: LD_ADDR_EXP 69
61614: PUSH
61615: LD_EXP 69
61619: PPUSH
61620: LD_VAR 0 2
61624: PPUSH
61625: EMPTY
61626: PPUSH
61627: CALL_OW 1
61631: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
61632: LD_ADDR_EXP 70
61636: PUSH
61637: LD_EXP 70
61641: PPUSH
61642: LD_VAR 0 2
61646: PPUSH
61647: EMPTY
61648: PPUSH
61649: CALL_OW 1
61653: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
61654: LD_ADDR_EXP 71
61658: PUSH
61659: LD_EXP 71
61663: PPUSH
61664: LD_VAR 0 2
61668: PPUSH
61669: EMPTY
61670: PPUSH
61671: CALL_OW 1
61675: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
61676: LD_ADDR_EXP 72
61680: PUSH
61681: LD_EXP 72
61685: PPUSH
61686: LD_VAR 0 2
61690: PPUSH
61691: EMPTY
61692: PPUSH
61693: CALL_OW 1
61697: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
61698: LD_ADDR_EXP 61
61702: PUSH
61703: LD_EXP 61
61707: PPUSH
61708: LD_VAR 0 2
61712: PPUSH
61713: LD_INT 0
61715: PPUSH
61716: CALL_OW 1
61720: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
61721: LD_ADDR_EXP 74
61725: PUSH
61726: LD_EXP 74
61730: PPUSH
61731: LD_VAR 0 2
61735: PPUSH
61736: LD_INT 0
61738: PPUSH
61739: CALL_OW 1
61743: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
61744: LD_ADDR_EXP 62
61748: PUSH
61749: LD_EXP 62
61753: PPUSH
61754: LD_VAR 0 2
61758: PPUSH
61759: EMPTY
61760: PPUSH
61761: CALL_OW 1
61765: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
61766: LD_ADDR_EXP 73
61770: PUSH
61771: LD_EXP 73
61775: PPUSH
61776: LD_VAR 0 2
61780: PPUSH
61781: LD_INT 0
61783: PPUSH
61784: CALL_OW 1
61788: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
61789: LD_ADDR_EXP 75
61793: PUSH
61794: LD_EXP 75
61798: PPUSH
61799: LD_VAR 0 2
61803: PPUSH
61804: EMPTY
61805: PPUSH
61806: CALL_OW 1
61810: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
61811: LD_ADDR_EXP 78
61815: PUSH
61816: LD_EXP 78
61820: PPUSH
61821: LD_VAR 0 2
61825: PPUSH
61826: LD_INT 0
61828: PPUSH
61829: CALL_OW 1
61833: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
61834: LD_ADDR_EXP 79
61838: PUSH
61839: LD_EXP 79
61843: PPUSH
61844: LD_VAR 0 2
61848: PPUSH
61849: EMPTY
61850: PPUSH
61851: CALL_OW 1
61855: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
61856: LD_ADDR_EXP 80
61860: PUSH
61861: LD_EXP 80
61865: PPUSH
61866: LD_VAR 0 2
61870: PPUSH
61871: EMPTY
61872: PPUSH
61873: CALL_OW 1
61877: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
61878: LD_ADDR_EXP 81
61882: PUSH
61883: LD_EXP 81
61887: PPUSH
61888: LD_VAR 0 2
61892: PPUSH
61893: EMPTY
61894: PPUSH
61895: CALL_OW 1
61899: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
61900: LD_ADDR_EXP 83
61904: PUSH
61905: LD_EXP 83
61909: PPUSH
61910: LD_VAR 0 2
61914: PPUSH
61915: LD_EXP 50
61919: PUSH
61920: LD_VAR 0 2
61924: ARRAY
61925: PPUSH
61926: LD_INT 2
61928: PUSH
61929: LD_INT 30
61931: PUSH
61932: LD_INT 6
61934: PUSH
61935: EMPTY
61936: LIST
61937: LIST
61938: PUSH
61939: LD_INT 30
61941: PUSH
61942: LD_INT 7
61944: PUSH
61945: EMPTY
61946: LIST
61947: LIST
61948: PUSH
61949: LD_INT 30
61951: PUSH
61952: LD_INT 8
61954: PUSH
61955: EMPTY
61956: LIST
61957: LIST
61958: PUSH
61959: EMPTY
61960: LIST
61961: LIST
61962: LIST
61963: LIST
61964: PPUSH
61965: CALL_OW 72
61969: PPUSH
61970: CALL_OW 1
61974: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
61975: LD_ADDR_EXP 84
61979: PUSH
61980: LD_EXP 84
61984: PPUSH
61985: LD_VAR 0 2
61989: PPUSH
61990: EMPTY
61991: PPUSH
61992: CALL_OW 1
61996: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
61997: LD_ADDR_EXP 85
62001: PUSH
62002: LD_EXP 85
62006: PPUSH
62007: LD_VAR 0 2
62011: PPUSH
62012: EMPTY
62013: PPUSH
62014: CALL_OW 1
62018: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , i , [ ] ) ;
62019: LD_ADDR_EXP 86
62023: PUSH
62024: LD_EXP 86
62028: PPUSH
62029: LD_VAR 0 2
62033: PPUSH
62034: EMPTY
62035: PPUSH
62036: CALL_OW 1
62040: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
62041: LD_ADDR_EXP 87
62045: PUSH
62046: LD_EXP 87
62050: PPUSH
62051: LD_VAR 0 2
62055: PPUSH
62056: EMPTY
62057: PPUSH
62058: CALL_OW 1
62062: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
62063: LD_ADDR_EXP 88
62067: PUSH
62068: LD_EXP 88
62072: PPUSH
62073: LD_VAR 0 2
62077: PPUSH
62078: EMPTY
62079: PPUSH
62080: CALL_OW 1
62084: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
62085: LD_ADDR_EXP 89
62089: PUSH
62090: LD_EXP 89
62094: PPUSH
62095: LD_VAR 0 2
62099: PPUSH
62100: EMPTY
62101: PPUSH
62102: CALL_OW 1
62106: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
62107: LD_ADDR_EXP 90
62111: PUSH
62112: LD_EXP 90
62116: PPUSH
62117: LD_VAR 0 2
62121: PPUSH
62122: EMPTY
62123: PPUSH
62124: CALL_OW 1
62128: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , [ ] ) ;
62129: LD_ADDR_EXP 91
62133: PUSH
62134: LD_EXP 91
62138: PPUSH
62139: LD_VAR 0 2
62143: PPUSH
62144: EMPTY
62145: PPUSH
62146: CALL_OW 1
62150: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , i , 0 ) ;
62151: LD_ADDR_EXP 92
62155: PUSH
62156: LD_EXP 92
62160: PPUSH
62161: LD_VAR 0 2
62165: PPUSH
62166: LD_INT 0
62168: PPUSH
62169: CALL_OW 1
62173: ST_TO_ADDR
// mc_is_defending := Replace ( mc_is_defending , i , false ) ;
62174: LD_ADDR_EXP 93
62178: PUSH
62179: LD_EXP 93
62183: PPUSH
62184: LD_VAR 0 2
62188: PPUSH
62189: LD_INT 0
62191: PPUSH
62192: CALL_OW 1
62196: ST_TO_ADDR
// end ;
62197: GO 61098
62199: POP
62200: POP
// MC_InitSides ( ) ;
62201: CALL 62487 0 0
// MC_InitResearch ( ) ;
62205: CALL 62226 0 0
// CustomInitMacro ( ) ;
62209: CALL 1411 0 0
// skirmish := true ;
62213: LD_ADDR_EXP 48
62217: PUSH
62218: LD_INT 1
62220: ST_TO_ADDR
// end ;
62221: LD_VAR 0 1
62225: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
62226: LD_INT 0
62228: PPUSH
62229: PPUSH
62230: PPUSH
62231: PPUSH
62232: PPUSH
62233: PPUSH
// if not mc_bases then
62234: LD_EXP 50
62238: NOT
62239: IFFALSE 62243
// exit ;
62241: GO 62482
// for i = 1 to 8 do
62243: LD_ADDR_VAR 0 2
62247: PUSH
62248: DOUBLE
62249: LD_INT 1
62251: DEC
62252: ST_TO_ADDR
62253: LD_INT 8
62255: PUSH
62256: FOR_TO
62257: IFFALSE 62283
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
62259: LD_ADDR_EXP 77
62263: PUSH
62264: LD_EXP 77
62268: PPUSH
62269: LD_VAR 0 2
62273: PPUSH
62274: EMPTY
62275: PPUSH
62276: CALL_OW 1
62280: ST_TO_ADDR
62281: GO 62256
62283: POP
62284: POP
// tmp := [ ] ;
62285: LD_ADDR_VAR 0 5
62289: PUSH
62290: EMPTY
62291: ST_TO_ADDR
// for i = 1 to mc_sides do
62292: LD_ADDR_VAR 0 2
62296: PUSH
62297: DOUBLE
62298: LD_INT 1
62300: DEC
62301: ST_TO_ADDR
62302: LD_EXP 76
62306: PUSH
62307: FOR_TO
62308: IFFALSE 62366
// if not mc_sides [ i ] in tmp then
62310: LD_EXP 76
62314: PUSH
62315: LD_VAR 0 2
62319: ARRAY
62320: PUSH
62321: LD_VAR 0 5
62325: IN
62326: NOT
62327: IFFALSE 62364
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
62329: LD_ADDR_VAR 0 5
62333: PUSH
62334: LD_VAR 0 5
62338: PPUSH
62339: LD_VAR 0 5
62343: PUSH
62344: LD_INT 1
62346: PLUS
62347: PPUSH
62348: LD_EXP 76
62352: PUSH
62353: LD_VAR 0 2
62357: ARRAY
62358: PPUSH
62359: CALL_OW 2
62363: ST_TO_ADDR
62364: GO 62307
62366: POP
62367: POP
// if not tmp then
62368: LD_VAR 0 5
62372: NOT
62373: IFFALSE 62377
// exit ;
62375: GO 62482
// for j in tmp do
62377: LD_ADDR_VAR 0 3
62381: PUSH
62382: LD_VAR 0 5
62386: PUSH
62387: FOR_IN
62388: IFFALSE 62480
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
62390: LD_ADDR_VAR 0 6
62394: PUSH
62395: LD_INT 22
62397: PUSH
62398: LD_VAR 0 3
62402: PUSH
62403: EMPTY
62404: LIST
62405: LIST
62406: PPUSH
62407: CALL_OW 69
62411: ST_TO_ADDR
// if not un then
62412: LD_VAR 0 6
62416: NOT
62417: IFFALSE 62421
// continue ;
62419: GO 62387
// nation := GetNation ( un [ 1 ] ) ;
62421: LD_ADDR_VAR 0 4
62425: PUSH
62426: LD_VAR 0 6
62430: PUSH
62431: LD_INT 1
62433: ARRAY
62434: PPUSH
62435: CALL_OW 248
62439: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
62440: LD_ADDR_EXP 77
62444: PUSH
62445: LD_EXP 77
62449: PPUSH
62450: LD_VAR 0 3
62454: PPUSH
62455: LD_VAR 0 3
62459: PPUSH
62460: LD_VAR 0 4
62464: PPUSH
62465: LD_INT 1
62467: PPUSH
62468: CALL 19935 0 3
62472: PPUSH
62473: CALL_OW 1
62477: ST_TO_ADDR
// end ;
62478: GO 62387
62480: POP
62481: POP
// end ;
62482: LD_VAR 0 1
62486: RET
// export function MC_InitSides ( ) ; var i ; begin
62487: LD_INT 0
62489: PPUSH
62490: PPUSH
// if not mc_bases then
62491: LD_EXP 50
62495: NOT
62496: IFFALSE 62500
// exit ;
62498: GO 62574
// for i = 1 to mc_bases do
62500: LD_ADDR_VAR 0 2
62504: PUSH
62505: DOUBLE
62506: LD_INT 1
62508: DEC
62509: ST_TO_ADDR
62510: LD_EXP 50
62514: PUSH
62515: FOR_TO
62516: IFFALSE 62572
// if mc_bases [ i ] then
62518: LD_EXP 50
62522: PUSH
62523: LD_VAR 0 2
62527: ARRAY
62528: IFFALSE 62570
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
62530: LD_ADDR_EXP 76
62534: PUSH
62535: LD_EXP 76
62539: PPUSH
62540: LD_VAR 0 2
62544: PPUSH
62545: LD_EXP 50
62549: PUSH
62550: LD_VAR 0 2
62554: ARRAY
62555: PUSH
62556: LD_INT 1
62558: ARRAY
62559: PPUSH
62560: CALL_OW 255
62564: PPUSH
62565: CALL_OW 1
62569: ST_TO_ADDR
62570: GO 62515
62572: POP
62573: POP
// end ;
62574: LD_VAR 0 1
62578: RET
// every 0 0$03 trigger skirmish do
62579: LD_EXP 48
62583: IFFALSE 62737
62585: GO 62587
62587: DISABLE
// begin enable ;
62588: ENABLE
// MC_CheckBuildings ( ) ;
62589: CALL 67235 0 0
// MC_CheckPeopleLife ( ) ;
62593: CALL 67396 0 0
// RaiseSailEvent ( 100 ) ;
62597: LD_INT 100
62599: PPUSH
62600: CALL_OW 427
// RaiseSailEvent ( 103 ) ;
62604: LD_INT 103
62606: PPUSH
62607: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
62611: LD_INT 104
62613: PPUSH
62614: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
62618: LD_INT 105
62620: PPUSH
62621: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
62625: LD_INT 106
62627: PPUSH
62628: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
62632: LD_INT 107
62634: PPUSH
62635: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
62639: LD_INT 108
62641: PPUSH
62642: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
62646: LD_INT 109
62648: PPUSH
62649: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
62653: LD_INT 110
62655: PPUSH
62656: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
62660: LD_INT 111
62662: PPUSH
62663: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
62667: LD_INT 112
62669: PPUSH
62670: CALL_OW 427
// RaiseSailEvent ( 113 ) ;
62674: LD_INT 113
62676: PPUSH
62677: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
62681: LD_INT 120
62683: PPUSH
62684: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
62688: LD_INT 121
62690: PPUSH
62691: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
62695: LD_INT 122
62697: PPUSH
62698: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
62702: LD_INT 123
62704: PPUSH
62705: CALL_OW 427
// RaiseSailEvent ( 124 ) ;
62709: LD_INT 124
62711: PPUSH
62712: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
62716: LD_INT 125
62718: PPUSH
62719: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
62723: LD_INT 126
62725: PPUSH
62726: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
62730: LD_INT 200
62732: PPUSH
62733: CALL_OW 427
// end ;
62737: END
// on SailEvent ( event ) do begin if event < 100 then
62738: LD_VAR 0 1
62742: PUSH
62743: LD_INT 100
62745: LESS
62746: IFFALSE 62757
// CustomEvent ( event ) ;
62748: LD_VAR 0 1
62752: PPUSH
62753: CALL 19113 0 1
// if event = 100 then
62757: LD_VAR 0 1
62761: PUSH
62762: LD_INT 100
62764: EQUAL
62765: IFFALSE 62771
// MC_ClassManager ( ) ;
62767: CALL 63163 0 0
// if event = 101 then
62771: LD_VAR 0 1
62775: PUSH
62776: LD_INT 101
62778: EQUAL
62779: IFFALSE 62785
// MC_RepairBuildings ( ) ;
62781: CALL 67981 0 0
// if event = 102 then
62785: LD_VAR 0 1
62789: PUSH
62790: LD_INT 102
62792: EQUAL
62793: IFFALSE 62799
// MC_Heal ( ) ;
62795: CALL 68888 0 0
// if event = 103 then
62799: LD_VAR 0 1
62803: PUSH
62804: LD_INT 103
62806: EQUAL
62807: IFFALSE 62813
// MC_Build ( ) ;
62809: CALL 69310 0 0
// if event = 104 then
62813: LD_VAR 0 1
62817: PUSH
62818: LD_INT 104
62820: EQUAL
62821: IFFALSE 62827
// MC_TurretWeapon ( ) ;
62823: CALL 70951 0 0
// if event = 105 then
62827: LD_VAR 0 1
62831: PUSH
62832: LD_INT 105
62834: EQUAL
62835: IFFALSE 62841
// MC_BuildUpgrade ( ) ;
62837: CALL 70502 0 0
// if event = 106 then
62841: LD_VAR 0 1
62845: PUSH
62846: LD_INT 106
62848: EQUAL
62849: IFFALSE 62855
// MC_PlantMines ( ) ;
62851: CALL 71381 0 0
// if event = 107 then
62855: LD_VAR 0 1
62859: PUSH
62860: LD_INT 107
62862: EQUAL
62863: IFFALSE 62869
// MC_CollectCrates ( ) ;
62865: CALL 72172 0 0
// if event = 108 then
62869: LD_VAR 0 1
62873: PUSH
62874: LD_INT 108
62876: EQUAL
62877: IFFALSE 62883
// MC_LinkRemoteControl ( ) ;
62879: CALL 74022 0 0
// if event = 109 then
62883: LD_VAR 0 1
62887: PUSH
62888: LD_INT 109
62890: EQUAL
62891: IFFALSE 62897
// MC_ProduceVehicle ( ) ;
62893: CALL 74203 0 0
// if event = 110 then
62897: LD_VAR 0 1
62901: PUSH
62902: LD_INT 110
62904: EQUAL
62905: IFFALSE 62911
// MC_SendAttack ( ) ;
62907: CALL 74669 0 0
// if event = 111 then
62911: LD_VAR 0 1
62915: PUSH
62916: LD_INT 111
62918: EQUAL
62919: IFFALSE 62925
// MC_Defend ( ) ;
62921: CALL 74777 0 0
// if event = 112 then
62925: LD_VAR 0 1
62929: PUSH
62930: LD_INT 112
62932: EQUAL
62933: IFFALSE 62939
// MC_Research ( ) ;
62935: CALL 75510 0 0
// if event = 113 then
62939: LD_VAR 0 1
62943: PUSH
62944: LD_INT 113
62946: EQUAL
62947: IFFALSE 62953
// MC_MinesTrigger ( ) ;
62949: CALL 76624 0 0
// if event = 120 then
62953: LD_VAR 0 1
62957: PUSH
62958: LD_INT 120
62960: EQUAL
62961: IFFALSE 62967
// MC_RepairVehicle ( ) ;
62963: CALL 76723 0 0
// if event = 121 then
62967: LD_VAR 0 1
62971: PUSH
62972: LD_INT 121
62974: EQUAL
62975: IFFALSE 62981
// MC_TameApe ( ) ;
62977: CALL 77464 0 0
// if event = 122 then
62981: LD_VAR 0 1
62985: PUSH
62986: LD_INT 122
62988: EQUAL
62989: IFFALSE 62995
// MC_ChangeApeClass ( ) ;
62991: CALL 78293 0 0
// if event = 123 then
62995: LD_VAR 0 1
62999: PUSH
63000: LD_INT 123
63002: EQUAL
63003: IFFALSE 63009
// MC_Bazooka ( ) ;
63005: CALL 78943 0 0
// if event = 124 then
63009: LD_VAR 0 1
63013: PUSH
63014: LD_INT 124
63016: EQUAL
63017: IFFALSE 63023
// MC_TeleportExit ( ) ;
63019: CALL 79141 0 0
// if event = 125 then
63023: LD_VAR 0 1
63027: PUSH
63028: LD_INT 125
63030: EQUAL
63031: IFFALSE 63037
// MC_Deposits ( ) ;
63033: CALL 79788 0 0
// if event = 126 then
63037: LD_VAR 0 1
63041: PUSH
63042: LD_INT 126
63044: EQUAL
63045: IFFALSE 63051
// MC_RemoteDriver ( ) ;
63047: CALL 80413 0 0
// if event = 200 then
63051: LD_VAR 0 1
63055: PUSH
63056: LD_INT 200
63058: EQUAL
63059: IFFALSE 63065
// MC_Idle ( ) ;
63061: CALL 82362 0 0
// end ;
63065: PPOPN 1
63067: END
// export function MC_Reset ( base , tag ) ; var i ; begin
63068: LD_INT 0
63070: PPUSH
63071: PPUSH
// if not mc_bases [ base ] or not tag then
63072: LD_EXP 50
63076: PUSH
63077: LD_VAR 0 1
63081: ARRAY
63082: NOT
63083: PUSH
63084: LD_VAR 0 2
63088: NOT
63089: OR
63090: IFFALSE 63094
// exit ;
63092: GO 63158
// for i in mc_bases [ base ] union mc_ape [ base ] do
63094: LD_ADDR_VAR 0 4
63098: PUSH
63099: LD_EXP 50
63103: PUSH
63104: LD_VAR 0 1
63108: ARRAY
63109: PUSH
63110: LD_EXP 79
63114: PUSH
63115: LD_VAR 0 1
63119: ARRAY
63120: UNION
63121: PUSH
63122: FOR_IN
63123: IFFALSE 63156
// if GetTag ( i ) = tag then
63125: LD_VAR 0 4
63129: PPUSH
63130: CALL_OW 110
63134: PUSH
63135: LD_VAR 0 2
63139: EQUAL
63140: IFFALSE 63154
// SetTag ( i , 0 ) ;
63142: LD_VAR 0 4
63146: PPUSH
63147: LD_INT 0
63149: PPUSH
63150: CALL_OW 109
63154: GO 63122
63156: POP
63157: POP
// end ;
63158: LD_VAR 0 3
63162: RET
// export function MC_ClassManager ( ) ; var i , j , tmp , p , b , e , k ; begin
63163: LD_INT 0
63165: PPUSH
63166: PPUSH
63167: PPUSH
63168: PPUSH
63169: PPUSH
63170: PPUSH
63171: PPUSH
63172: PPUSH
// if not mc_bases then
63173: LD_EXP 50
63177: NOT
63178: IFFALSE 63182
// exit ;
63180: GO 63640
// for i = 1 to mc_bases do
63182: LD_ADDR_VAR 0 2
63186: PUSH
63187: DOUBLE
63188: LD_INT 1
63190: DEC
63191: ST_TO_ADDR
63192: LD_EXP 50
63196: PUSH
63197: FOR_TO
63198: IFFALSE 63638
// begin tmp := MC_ClassCheckReq ( i ) ;
63200: LD_ADDR_VAR 0 4
63204: PUSH
63205: LD_VAR 0 2
63209: PPUSH
63210: CALL 63645 0 1
63214: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , tmp ) ;
63215: LD_ADDR_EXP 91
63219: PUSH
63220: LD_EXP 91
63224: PPUSH
63225: LD_VAR 0 2
63229: PPUSH
63230: LD_VAR 0 4
63234: PPUSH
63235: CALL_OW 1
63239: ST_TO_ADDR
// if not tmp then
63240: LD_VAR 0 4
63244: NOT
63245: IFFALSE 63249
// continue ;
63247: GO 63197
// b := [ UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ] ;
63249: LD_ADDR_VAR 0 6
63253: PUSH
63254: LD_EXP 50
63258: PUSH
63259: LD_VAR 0 2
63263: ARRAY
63264: PPUSH
63265: LD_INT 2
63267: PUSH
63268: LD_INT 30
63270: PUSH
63271: LD_INT 4
63273: PUSH
63274: EMPTY
63275: LIST
63276: LIST
63277: PUSH
63278: LD_INT 30
63280: PUSH
63281: LD_INT 5
63283: PUSH
63284: EMPTY
63285: LIST
63286: LIST
63287: PUSH
63288: EMPTY
63289: LIST
63290: LIST
63291: LIST
63292: PPUSH
63293: CALL_OW 72
63297: PUSH
63298: LD_EXP 50
63302: PUSH
63303: LD_VAR 0 2
63307: ARRAY
63308: PPUSH
63309: LD_INT 2
63311: PUSH
63312: LD_INT 30
63314: PUSH
63315: LD_INT 0
63317: PUSH
63318: EMPTY
63319: LIST
63320: LIST
63321: PUSH
63322: LD_INT 30
63324: PUSH
63325: LD_INT 1
63327: PUSH
63328: EMPTY
63329: LIST
63330: LIST
63331: PUSH
63332: EMPTY
63333: LIST
63334: LIST
63335: LIST
63336: PPUSH
63337: CALL_OW 72
63341: PUSH
63342: LD_EXP 50
63346: PUSH
63347: LD_VAR 0 2
63351: ARRAY
63352: PPUSH
63353: LD_INT 30
63355: PUSH
63356: LD_INT 3
63358: PUSH
63359: EMPTY
63360: LIST
63361: LIST
63362: PPUSH
63363: CALL_OW 72
63367: PUSH
63368: LD_EXP 50
63372: PUSH
63373: LD_VAR 0 2
63377: ARRAY
63378: PPUSH
63379: LD_INT 2
63381: PUSH
63382: LD_INT 30
63384: PUSH
63385: LD_INT 6
63387: PUSH
63388: EMPTY
63389: LIST
63390: LIST
63391: PUSH
63392: LD_INT 30
63394: PUSH
63395: LD_INT 7
63397: PUSH
63398: EMPTY
63399: LIST
63400: LIST
63401: PUSH
63402: LD_INT 30
63404: PUSH
63405: LD_INT 8
63407: PUSH
63408: EMPTY
63409: LIST
63410: LIST
63411: PUSH
63412: EMPTY
63413: LIST
63414: LIST
63415: LIST
63416: LIST
63417: PPUSH
63418: CALL_OW 72
63422: PUSH
63423: EMPTY
63424: LIST
63425: LIST
63426: LIST
63427: LIST
63428: ST_TO_ADDR
// for j = 1 to 4 do
63429: LD_ADDR_VAR 0 3
63433: PUSH
63434: DOUBLE
63435: LD_INT 1
63437: DEC
63438: ST_TO_ADDR
63439: LD_INT 4
63441: PUSH
63442: FOR_TO
63443: IFFALSE 63634
// begin if not tmp [ j ] then
63445: LD_VAR 0 4
63449: PUSH
63450: LD_VAR 0 3
63454: ARRAY
63455: NOT
63456: IFFALSE 63460
// continue ;
63458: GO 63442
// for p in tmp [ j ] do
63460: LD_ADDR_VAR 0 5
63464: PUSH
63465: LD_VAR 0 4
63469: PUSH
63470: LD_VAR 0 3
63474: ARRAY
63475: PUSH
63476: FOR_IN
63477: IFFALSE 63630
// begin if not b [ j ] then
63479: LD_VAR 0 6
63483: PUSH
63484: LD_VAR 0 3
63488: ARRAY
63489: NOT
63490: IFFALSE 63494
// break ;
63492: GO 63630
// e := 0 ;
63494: LD_ADDR_VAR 0 7
63498: PUSH
63499: LD_INT 0
63501: ST_TO_ADDR
// for k in b [ j ] do
63502: LD_ADDR_VAR 0 8
63506: PUSH
63507: LD_VAR 0 6
63511: PUSH
63512: LD_VAR 0 3
63516: ARRAY
63517: PUSH
63518: FOR_IN
63519: IFFALSE 63546
// if IsNotFull ( k ) then
63521: LD_VAR 0 8
63525: PPUSH
63526: CALL 22088 0 1
63530: IFFALSE 63544
// begin e := k ;
63532: LD_ADDR_VAR 0 7
63536: PUSH
63537: LD_VAR 0 8
63541: ST_TO_ADDR
// break ;
63542: GO 63546
// end ;
63544: GO 63518
63546: POP
63547: POP
// if e and not UnitGoingToBuilding ( p , e ) then
63548: LD_VAR 0 7
63552: PUSH
63553: LD_VAR 0 5
63557: PPUSH
63558: LD_VAR 0 7
63562: PPUSH
63563: CALL 55252 0 2
63567: NOT
63568: AND
63569: IFFALSE 63628
// begin if IsInUnit ( p ) then
63571: LD_VAR 0 5
63575: PPUSH
63576: CALL_OW 310
63580: IFFALSE 63591
// ComExitBuilding ( p ) ;
63582: LD_VAR 0 5
63586: PPUSH
63587: CALL_OW 122
// ComEnterUnit ( p , e ) ;
63591: LD_VAR 0 5
63595: PPUSH
63596: LD_VAR 0 7
63600: PPUSH
63601: CALL_OW 120
// AddComChangeProfession ( p , j ) ;
63605: LD_VAR 0 5
63609: PPUSH
63610: LD_VAR 0 3
63614: PPUSH
63615: CALL_OW 183
// AddComExitBuilding ( p ) ;
63619: LD_VAR 0 5
63623: PPUSH
63624: CALL_OW 182
// end ; end ;
63628: GO 63476
63630: POP
63631: POP
// end ;
63632: GO 63442
63634: POP
63635: POP
// end ;
63636: GO 63197
63638: POP
63639: POP
// end ;
63640: LD_VAR 0 1
63644: RET
// export function MC_ClassCheckReq ( base ) ; var i , tmp , sol , eng , mech , sci , sort , j , p , b , bcount ; begin
63645: LD_INT 0
63647: PPUSH
63648: PPUSH
63649: PPUSH
63650: PPUSH
63651: PPUSH
63652: PPUSH
63653: PPUSH
63654: PPUSH
63655: PPUSH
63656: PPUSH
63657: PPUSH
63658: PPUSH
// if not base or not mc_bases [ base ] or not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
63659: LD_VAR 0 1
63663: NOT
63664: PUSH
63665: LD_EXP 50
63669: PUSH
63670: LD_VAR 0 1
63674: ARRAY
63675: NOT
63676: OR
63677: PUSH
63678: LD_EXP 50
63682: PUSH
63683: LD_VAR 0 1
63687: ARRAY
63688: PPUSH
63689: LD_INT 2
63691: PUSH
63692: LD_INT 30
63694: PUSH
63695: LD_INT 0
63697: PUSH
63698: EMPTY
63699: LIST
63700: LIST
63701: PUSH
63702: LD_INT 30
63704: PUSH
63705: LD_INT 1
63707: PUSH
63708: EMPTY
63709: LIST
63710: LIST
63711: PUSH
63712: EMPTY
63713: LIST
63714: LIST
63715: LIST
63716: PPUSH
63717: CALL_OW 72
63721: NOT
63722: OR
63723: IFFALSE 63727
// exit ;
63725: GO 67230
// tmp := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
63727: LD_ADDR_VAR 0 4
63731: PUSH
63732: LD_EXP 50
63736: PUSH
63737: LD_VAR 0 1
63741: ARRAY
63742: PPUSH
63743: LD_INT 2
63745: PUSH
63746: LD_INT 25
63748: PUSH
63749: LD_INT 1
63751: PUSH
63752: EMPTY
63753: LIST
63754: LIST
63755: PUSH
63756: LD_INT 25
63758: PUSH
63759: LD_INT 2
63761: PUSH
63762: EMPTY
63763: LIST
63764: LIST
63765: PUSH
63766: LD_INT 25
63768: PUSH
63769: LD_INT 3
63771: PUSH
63772: EMPTY
63773: LIST
63774: LIST
63775: PUSH
63776: LD_INT 25
63778: PUSH
63779: LD_INT 4
63781: PUSH
63782: EMPTY
63783: LIST
63784: LIST
63785: PUSH
63786: LD_INT 25
63788: PUSH
63789: LD_INT 5
63791: PUSH
63792: EMPTY
63793: LIST
63794: LIST
63795: PUSH
63796: LD_INT 25
63798: PUSH
63799: LD_INT 8
63801: PUSH
63802: EMPTY
63803: LIST
63804: LIST
63805: PUSH
63806: LD_INT 25
63808: PUSH
63809: LD_INT 9
63811: PUSH
63812: EMPTY
63813: LIST
63814: LIST
63815: PUSH
63816: EMPTY
63817: LIST
63818: LIST
63819: LIST
63820: LIST
63821: LIST
63822: LIST
63823: LIST
63824: LIST
63825: PPUSH
63826: CALL_OW 72
63830: ST_TO_ADDR
// if not tmp then
63831: LD_VAR 0 4
63835: NOT
63836: IFFALSE 63840
// exit ;
63838: GO 67230
// for i in tmp do
63840: LD_ADDR_VAR 0 3
63844: PUSH
63845: LD_VAR 0 4
63849: PUSH
63850: FOR_IN
63851: IFFALSE 63882
// if GetTag ( i ) then
63853: LD_VAR 0 3
63857: PPUSH
63858: CALL_OW 110
63862: IFFALSE 63880
// tmp := tmp diff i ;
63864: LD_ADDR_VAR 0 4
63868: PUSH
63869: LD_VAR 0 4
63873: PUSH
63874: LD_VAR 0 3
63878: DIFF
63879: ST_TO_ADDR
63880: GO 63850
63882: POP
63883: POP
// if not tmp then
63884: LD_VAR 0 4
63888: NOT
63889: IFFALSE 63893
// exit ;
63891: GO 67230
// sol := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
63893: LD_ADDR_VAR 0 5
63897: PUSH
63898: LD_EXP 50
63902: PUSH
63903: LD_VAR 0 1
63907: ARRAY
63908: PPUSH
63909: LD_INT 2
63911: PUSH
63912: LD_INT 25
63914: PUSH
63915: LD_INT 1
63917: PUSH
63918: EMPTY
63919: LIST
63920: LIST
63921: PUSH
63922: LD_INT 25
63924: PUSH
63925: LD_INT 5
63927: PUSH
63928: EMPTY
63929: LIST
63930: LIST
63931: PUSH
63932: LD_INT 25
63934: PUSH
63935: LD_INT 8
63937: PUSH
63938: EMPTY
63939: LIST
63940: LIST
63941: PUSH
63942: LD_INT 25
63944: PUSH
63945: LD_INT 9
63947: PUSH
63948: EMPTY
63949: LIST
63950: LIST
63951: PUSH
63952: EMPTY
63953: LIST
63954: LIST
63955: LIST
63956: LIST
63957: LIST
63958: PPUSH
63959: CALL_OW 72
63963: ST_TO_ADDR
// eng := UnitFilter ( mc_bases [ base ] , [ f_class , 2 ] ) ;
63964: LD_ADDR_VAR 0 6
63968: PUSH
63969: LD_EXP 50
63973: PUSH
63974: LD_VAR 0 1
63978: ARRAY
63979: PPUSH
63980: LD_INT 25
63982: PUSH
63983: LD_INT 2
63985: PUSH
63986: EMPTY
63987: LIST
63988: LIST
63989: PPUSH
63990: CALL_OW 72
63994: ST_TO_ADDR
// mech := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
63995: LD_ADDR_VAR 0 7
63999: PUSH
64000: LD_EXP 50
64004: PUSH
64005: LD_VAR 0 1
64009: ARRAY
64010: PPUSH
64011: LD_INT 25
64013: PUSH
64014: LD_INT 3
64016: PUSH
64017: EMPTY
64018: LIST
64019: LIST
64020: PPUSH
64021: CALL_OW 72
64025: ST_TO_ADDR
// sci := UnitFilter ( mc_bases [ base ] , [ [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
64026: LD_ADDR_VAR 0 8
64030: PUSH
64031: LD_EXP 50
64035: PUSH
64036: LD_VAR 0 1
64040: ARRAY
64041: PPUSH
64042: LD_INT 25
64044: PUSH
64045: LD_INT 4
64047: PUSH
64048: EMPTY
64049: LIST
64050: LIST
64051: PUSH
64052: LD_INT 24
64054: PUSH
64055: LD_INT 251
64057: PUSH
64058: EMPTY
64059: LIST
64060: LIST
64061: PUSH
64062: EMPTY
64063: LIST
64064: LIST
64065: PPUSH
64066: CALL_OW 72
64070: ST_TO_ADDR
// if mc_is_defending [ base ] then
64071: LD_EXP 93
64075: PUSH
64076: LD_VAR 0 1
64080: ARRAY
64081: IFFALSE 64542
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 4 ) ;
64083: LD_ADDR_EXP 92
64087: PUSH
64088: LD_EXP 92
64092: PPUSH
64093: LD_VAR 0 1
64097: PPUSH
64098: LD_INT 4
64100: PPUSH
64101: CALL_OW 1
64105: ST_TO_ADDR
// b := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
64106: LD_ADDR_VAR 0 12
64110: PUSH
64111: LD_EXP 50
64115: PUSH
64116: LD_VAR 0 1
64120: ARRAY
64121: PPUSH
64122: LD_INT 2
64124: PUSH
64125: LD_INT 30
64127: PUSH
64128: LD_INT 4
64130: PUSH
64131: EMPTY
64132: LIST
64133: LIST
64134: PUSH
64135: LD_INT 30
64137: PUSH
64138: LD_INT 5
64140: PUSH
64141: EMPTY
64142: LIST
64143: LIST
64144: PUSH
64145: EMPTY
64146: LIST
64147: LIST
64148: LIST
64149: PPUSH
64150: CALL_OW 72
64154: ST_TO_ADDR
// if not b then
64155: LD_VAR 0 12
64159: NOT
64160: IFFALSE 64164
// exit ;
64162: GO 67230
// p := [ ] ;
64164: LD_ADDR_VAR 0 11
64168: PUSH
64169: EMPTY
64170: ST_TO_ADDR
// if sci >= 2 then
64171: LD_VAR 0 8
64175: PUSH
64176: LD_INT 2
64178: GREATEREQUAL
64179: IFFALSE 64210
// sci := [ sci [ 1 ] , sci [ 2 ] ] else
64181: LD_ADDR_VAR 0 8
64185: PUSH
64186: LD_VAR 0 8
64190: PUSH
64191: LD_INT 1
64193: ARRAY
64194: PUSH
64195: LD_VAR 0 8
64199: PUSH
64200: LD_INT 2
64202: ARRAY
64203: PUSH
64204: EMPTY
64205: LIST
64206: LIST
64207: ST_TO_ADDR
64208: GO 64271
// if sci = 1 then
64210: LD_VAR 0 8
64214: PUSH
64215: LD_INT 1
64217: EQUAL
64218: IFFALSE 64239
// sci := [ sci [ 1 ] ] else
64220: LD_ADDR_VAR 0 8
64224: PUSH
64225: LD_VAR 0 8
64229: PUSH
64230: LD_INT 1
64232: ARRAY
64233: PUSH
64234: EMPTY
64235: LIST
64236: ST_TO_ADDR
64237: GO 64271
// if sci = 0 then
64239: LD_VAR 0 8
64243: PUSH
64244: LD_INT 0
64246: EQUAL
64247: IFFALSE 64271
// p := SortBySkill ( tmp , 4 ) [ 1 ] ;
64249: LD_ADDR_VAR 0 11
64253: PUSH
64254: LD_VAR 0 4
64258: PPUSH
64259: LD_INT 4
64261: PPUSH
64262: CALL 55115 0 2
64266: PUSH
64267: LD_INT 1
64269: ARRAY
64270: ST_TO_ADDR
// if eng > 4 then
64271: LD_VAR 0 6
64275: PUSH
64276: LD_INT 4
64278: GREATER
64279: IFFALSE 64325
// for i = eng downto 4 do
64281: LD_ADDR_VAR 0 3
64285: PUSH
64286: DOUBLE
64287: LD_VAR 0 6
64291: INC
64292: ST_TO_ADDR
64293: LD_INT 4
64295: PUSH
64296: FOR_DOWNTO
64297: IFFALSE 64323
// eng := eng diff eng [ i ] ;
64299: LD_ADDR_VAR 0 6
64303: PUSH
64304: LD_VAR 0 6
64308: PUSH
64309: LD_VAR 0 6
64313: PUSH
64314: LD_VAR 0 3
64318: ARRAY
64319: DIFF
64320: ST_TO_ADDR
64321: GO 64296
64323: POP
64324: POP
// tmp := tmp diff ( sol union eng union mech union sci ) ;
64325: LD_ADDR_VAR 0 4
64329: PUSH
64330: LD_VAR 0 4
64334: PUSH
64335: LD_VAR 0 5
64339: PUSH
64340: LD_VAR 0 6
64344: UNION
64345: PUSH
64346: LD_VAR 0 7
64350: UNION
64351: PUSH
64352: LD_VAR 0 8
64356: UNION
64357: DIFF
64358: ST_TO_ADDR
// bcount := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) + UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) * 6 ;
64359: LD_ADDR_VAR 0 13
64363: PUSH
64364: LD_EXP 50
64368: PUSH
64369: LD_VAR 0 1
64373: ARRAY
64374: PPUSH
64375: LD_INT 2
64377: PUSH
64378: LD_INT 30
64380: PUSH
64381: LD_INT 32
64383: PUSH
64384: EMPTY
64385: LIST
64386: LIST
64387: PUSH
64388: LD_INT 30
64390: PUSH
64391: LD_INT 31
64393: PUSH
64394: EMPTY
64395: LIST
64396: LIST
64397: PUSH
64398: EMPTY
64399: LIST
64400: LIST
64401: LIST
64402: PPUSH
64403: CALL_OW 72
64407: PUSH
64408: LD_EXP 50
64412: PUSH
64413: LD_VAR 0 1
64417: ARRAY
64418: PPUSH
64419: LD_INT 2
64421: PUSH
64422: LD_INT 30
64424: PUSH
64425: LD_INT 4
64427: PUSH
64428: EMPTY
64429: LIST
64430: LIST
64431: PUSH
64432: LD_INT 30
64434: PUSH
64435: LD_INT 5
64437: PUSH
64438: EMPTY
64439: LIST
64440: LIST
64441: PUSH
64442: EMPTY
64443: LIST
64444: LIST
64445: LIST
64446: PPUSH
64447: CALL_OW 72
64451: PUSH
64452: LD_INT 6
64454: MUL
64455: PLUS
64456: ST_TO_ADDR
// if bcount < tmp then
64457: LD_VAR 0 13
64461: PUSH
64462: LD_VAR 0 4
64466: LESS
64467: IFFALSE 64513
// for i = tmp downto bcount do
64469: LD_ADDR_VAR 0 3
64473: PUSH
64474: DOUBLE
64475: LD_VAR 0 4
64479: INC
64480: ST_TO_ADDR
64481: LD_VAR 0 13
64485: PUSH
64486: FOR_DOWNTO
64487: IFFALSE 64511
// tmp := Delete ( tmp , tmp ) ;
64489: LD_ADDR_VAR 0 4
64493: PUSH
64494: LD_VAR 0 4
64498: PPUSH
64499: LD_VAR 0 4
64503: PPUSH
64504: CALL_OW 3
64508: ST_TO_ADDR
64509: GO 64486
64511: POP
64512: POP
// result := [ tmp , 0 , 0 , p ] ;
64513: LD_ADDR_VAR 0 2
64517: PUSH
64518: LD_VAR 0 4
64522: PUSH
64523: LD_INT 0
64525: PUSH
64526: LD_INT 0
64528: PUSH
64529: LD_VAR 0 11
64533: PUSH
64534: EMPTY
64535: LIST
64536: LIST
64537: LIST
64538: LIST
64539: ST_TO_ADDR
// exit ;
64540: GO 67230
// end ; if not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
64542: LD_EXP 50
64546: PUSH
64547: LD_VAR 0 1
64551: ARRAY
64552: PPUSH
64553: LD_INT 2
64555: PUSH
64556: LD_INT 30
64558: PUSH
64559: LD_INT 6
64561: PUSH
64562: EMPTY
64563: LIST
64564: LIST
64565: PUSH
64566: LD_INT 30
64568: PUSH
64569: LD_INT 7
64571: PUSH
64572: EMPTY
64573: LIST
64574: LIST
64575: PUSH
64576: LD_INT 30
64578: PUSH
64579: LD_INT 8
64581: PUSH
64582: EMPTY
64583: LIST
64584: LIST
64585: PUSH
64586: EMPTY
64587: LIST
64588: LIST
64589: LIST
64590: LIST
64591: PPUSH
64592: CALL_OW 72
64596: NOT
64597: PUSH
64598: LD_EXP 50
64602: PUSH
64603: LD_VAR 0 1
64607: ARRAY
64608: PPUSH
64609: LD_INT 30
64611: PUSH
64612: LD_INT 3
64614: PUSH
64615: EMPTY
64616: LIST
64617: LIST
64618: PPUSH
64619: CALL_OW 72
64623: NOT
64624: AND
64625: IFFALSE 64697
// begin if eng = tmp then
64627: LD_VAR 0 6
64631: PUSH
64632: LD_VAR 0 4
64636: EQUAL
64637: IFFALSE 64641
// exit ;
64639: GO 67230
// mc_class_case_use := Replace ( mc_class_case_use , base , 1 ) ;
64641: LD_ADDR_EXP 92
64645: PUSH
64646: LD_EXP 92
64650: PPUSH
64651: LD_VAR 0 1
64655: PPUSH
64656: LD_INT 1
64658: PPUSH
64659: CALL_OW 1
64663: ST_TO_ADDR
// result := [ 0 , tmp diff eng , 0 , 0 ] ;
64664: LD_ADDR_VAR 0 2
64668: PUSH
64669: LD_INT 0
64671: PUSH
64672: LD_VAR 0 4
64676: PUSH
64677: LD_VAR 0 6
64681: DIFF
64682: PUSH
64683: LD_INT 0
64685: PUSH
64686: LD_INT 0
64688: PUSH
64689: EMPTY
64690: LIST
64691: LIST
64692: LIST
64693: LIST
64694: ST_TO_ADDR
// exit ;
64695: GO 67230
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
64697: LD_EXP 77
64701: PUSH
64702: LD_EXP 76
64706: PUSH
64707: LD_VAR 0 1
64711: ARRAY
64712: ARRAY
64713: PUSH
64714: LD_EXP 50
64718: PUSH
64719: LD_VAR 0 1
64723: ARRAY
64724: PPUSH
64725: LD_INT 2
64727: PUSH
64728: LD_INT 30
64730: PUSH
64731: LD_INT 6
64733: PUSH
64734: EMPTY
64735: LIST
64736: LIST
64737: PUSH
64738: LD_INT 30
64740: PUSH
64741: LD_INT 7
64743: PUSH
64744: EMPTY
64745: LIST
64746: LIST
64747: PUSH
64748: LD_INT 30
64750: PUSH
64751: LD_INT 8
64753: PUSH
64754: EMPTY
64755: LIST
64756: LIST
64757: PUSH
64758: EMPTY
64759: LIST
64760: LIST
64761: LIST
64762: LIST
64763: PPUSH
64764: CALL_OW 72
64768: AND
64769: PUSH
64770: LD_EXP 50
64774: PUSH
64775: LD_VAR 0 1
64779: ARRAY
64780: PPUSH
64781: LD_INT 30
64783: PUSH
64784: LD_INT 3
64786: PUSH
64787: EMPTY
64788: LIST
64789: LIST
64790: PPUSH
64791: CALL_OW 72
64795: NOT
64796: AND
64797: IFFALSE 65011
// begin if sci >= 6 then
64799: LD_VAR 0 8
64803: PUSH
64804: LD_INT 6
64806: GREATEREQUAL
64807: IFFALSE 64811
// exit ;
64809: GO 67230
// mc_class_case_use := Replace ( mc_class_case_use , base , 2 ) ;
64811: LD_ADDR_EXP 92
64815: PUSH
64816: LD_EXP 92
64820: PPUSH
64821: LD_VAR 0 1
64825: PPUSH
64826: LD_INT 2
64828: PPUSH
64829: CALL_OW 1
64833: ST_TO_ADDR
// sort := SortBySkill ( tmp diff sci , 4 ) ;
64834: LD_ADDR_VAR 0 9
64838: PUSH
64839: LD_VAR 0 4
64843: PUSH
64844: LD_VAR 0 8
64848: DIFF
64849: PPUSH
64850: LD_INT 4
64852: PPUSH
64853: CALL 55115 0 2
64857: ST_TO_ADDR
// p := [ ] ;
64858: LD_ADDR_VAR 0 11
64862: PUSH
64863: EMPTY
64864: ST_TO_ADDR
// if sci < 6 and sort > 6 then
64865: LD_VAR 0 8
64869: PUSH
64870: LD_INT 6
64872: LESS
64873: PUSH
64874: LD_VAR 0 9
64878: PUSH
64879: LD_INT 6
64881: GREATER
64882: AND
64883: IFFALSE 64964
// begin for i = 1 to 6 - sci do
64885: LD_ADDR_VAR 0 3
64889: PUSH
64890: DOUBLE
64891: LD_INT 1
64893: DEC
64894: ST_TO_ADDR
64895: LD_INT 6
64897: PUSH
64898: LD_VAR 0 8
64902: MINUS
64903: PUSH
64904: FOR_TO
64905: IFFALSE 64960
// begin p := Insert ( p , p + 1 , sort [ 1 ] ) ;
64907: LD_ADDR_VAR 0 11
64911: PUSH
64912: LD_VAR 0 11
64916: PPUSH
64917: LD_VAR 0 11
64921: PUSH
64922: LD_INT 1
64924: PLUS
64925: PPUSH
64926: LD_VAR 0 9
64930: PUSH
64931: LD_INT 1
64933: ARRAY
64934: PPUSH
64935: CALL_OW 2
64939: ST_TO_ADDR
// sort := Delete ( sort , 1 ) ;
64940: LD_ADDR_VAR 0 9
64944: PUSH
64945: LD_VAR 0 9
64949: PPUSH
64950: LD_INT 1
64952: PPUSH
64953: CALL_OW 3
64957: ST_TO_ADDR
// end ;
64958: GO 64904
64960: POP
64961: POP
// end else
64962: GO 64984
// if sort then
64964: LD_VAR 0 9
64968: IFFALSE 64984
// p := sort [ 1 ] ;
64970: LD_ADDR_VAR 0 11
64974: PUSH
64975: LD_VAR 0 9
64979: PUSH
64980: LD_INT 1
64982: ARRAY
64983: ST_TO_ADDR
// result := [ 0 , 0 , 0 , p ] ;
64984: LD_ADDR_VAR 0 2
64988: PUSH
64989: LD_INT 0
64991: PUSH
64992: LD_INT 0
64994: PUSH
64995: LD_INT 0
64997: PUSH
64998: LD_VAR 0 11
65002: PUSH
65003: EMPTY
65004: LIST
65005: LIST
65006: LIST
65007: LIST
65008: ST_TO_ADDR
// exit ;
65009: GO 67230
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
65011: LD_EXP 77
65015: PUSH
65016: LD_EXP 76
65020: PUSH
65021: LD_VAR 0 1
65025: ARRAY
65026: ARRAY
65027: PUSH
65028: LD_EXP 50
65032: PUSH
65033: LD_VAR 0 1
65037: ARRAY
65038: PPUSH
65039: LD_INT 2
65041: PUSH
65042: LD_INT 30
65044: PUSH
65045: LD_INT 6
65047: PUSH
65048: EMPTY
65049: LIST
65050: LIST
65051: PUSH
65052: LD_INT 30
65054: PUSH
65055: LD_INT 7
65057: PUSH
65058: EMPTY
65059: LIST
65060: LIST
65061: PUSH
65062: LD_INT 30
65064: PUSH
65065: LD_INT 8
65067: PUSH
65068: EMPTY
65069: LIST
65070: LIST
65071: PUSH
65072: EMPTY
65073: LIST
65074: LIST
65075: LIST
65076: LIST
65077: PPUSH
65078: CALL_OW 72
65082: AND
65083: PUSH
65084: LD_EXP 50
65088: PUSH
65089: LD_VAR 0 1
65093: ARRAY
65094: PPUSH
65095: LD_INT 30
65097: PUSH
65098: LD_INT 3
65100: PUSH
65101: EMPTY
65102: LIST
65103: LIST
65104: PPUSH
65105: CALL_OW 72
65109: AND
65110: IFFALSE 65844
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 3 ) ;
65112: LD_ADDR_EXP 92
65116: PUSH
65117: LD_EXP 92
65121: PPUSH
65122: LD_VAR 0 1
65126: PPUSH
65127: LD_INT 3
65129: PPUSH
65130: CALL_OW 1
65134: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
65135: LD_ADDR_VAR 0 2
65139: PUSH
65140: LD_INT 0
65142: PUSH
65143: LD_INT 0
65145: PUSH
65146: LD_INT 0
65148: PUSH
65149: LD_INT 0
65151: PUSH
65152: EMPTY
65153: LIST
65154: LIST
65155: LIST
65156: LIST
65157: ST_TO_ADDR
// if not eng then
65158: LD_VAR 0 6
65162: NOT
65163: IFFALSE 65226
// begin p := SortBySkill ( tmp , 2 ) [ 1 ] ;
65165: LD_ADDR_VAR 0 11
65169: PUSH
65170: LD_VAR 0 4
65174: PPUSH
65175: LD_INT 2
65177: PPUSH
65178: CALL 55115 0 2
65182: PUSH
65183: LD_INT 1
65185: ARRAY
65186: ST_TO_ADDR
// result := Replace ( result , 2 , p ) ;
65187: LD_ADDR_VAR 0 2
65191: PUSH
65192: LD_VAR 0 2
65196: PPUSH
65197: LD_INT 2
65199: PPUSH
65200: LD_VAR 0 11
65204: PPUSH
65205: CALL_OW 1
65209: ST_TO_ADDR
// tmp := tmp diff p ;
65210: LD_ADDR_VAR 0 4
65214: PUSH
65215: LD_VAR 0 4
65219: PUSH
65220: LD_VAR 0 11
65224: DIFF
65225: ST_TO_ADDR
// end ; if tmp and sci < 6 then
65226: LD_VAR 0 4
65230: PUSH
65231: LD_VAR 0 8
65235: PUSH
65236: LD_INT 6
65238: LESS
65239: AND
65240: IFFALSE 65428
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 4 ) ;
65242: LD_ADDR_VAR 0 9
65246: PUSH
65247: LD_VAR 0 4
65251: PUSH
65252: LD_VAR 0 8
65256: PUSH
65257: LD_VAR 0 7
65261: UNION
65262: DIFF
65263: PPUSH
65264: LD_INT 4
65266: PPUSH
65267: CALL 55115 0 2
65271: ST_TO_ADDR
// p := [ ] ;
65272: LD_ADDR_VAR 0 11
65276: PUSH
65277: EMPTY
65278: ST_TO_ADDR
// if sort then
65279: LD_VAR 0 9
65283: IFFALSE 65399
// for i = 1 to 6 - sci do
65285: LD_ADDR_VAR 0 3
65289: PUSH
65290: DOUBLE
65291: LD_INT 1
65293: DEC
65294: ST_TO_ADDR
65295: LD_INT 6
65297: PUSH
65298: LD_VAR 0 8
65302: MINUS
65303: PUSH
65304: FOR_TO
65305: IFFALSE 65397
// begin if i = sort then
65307: LD_VAR 0 3
65311: PUSH
65312: LD_VAR 0 9
65316: EQUAL
65317: IFFALSE 65321
// break ;
65319: GO 65397
// if GetClass ( i ) = 4 then
65321: LD_VAR 0 3
65325: PPUSH
65326: CALL_OW 257
65330: PUSH
65331: LD_INT 4
65333: EQUAL
65334: IFFALSE 65338
// continue ;
65336: GO 65304
// p := Insert ( p , p + 1 , sort [ i ] ) ;
65338: LD_ADDR_VAR 0 11
65342: PUSH
65343: LD_VAR 0 11
65347: PPUSH
65348: LD_VAR 0 11
65352: PUSH
65353: LD_INT 1
65355: PLUS
65356: PPUSH
65357: LD_VAR 0 9
65361: PUSH
65362: LD_VAR 0 3
65366: ARRAY
65367: PPUSH
65368: CALL_OW 2
65372: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
65373: LD_ADDR_VAR 0 4
65377: PUSH
65378: LD_VAR 0 4
65382: PUSH
65383: LD_VAR 0 9
65387: PUSH
65388: LD_VAR 0 3
65392: ARRAY
65393: DIFF
65394: ST_TO_ADDR
// end ;
65395: GO 65304
65397: POP
65398: POP
// if p then
65399: LD_VAR 0 11
65403: IFFALSE 65428
// result := Replace ( result , 4 , p ) ;
65405: LD_ADDR_VAR 0 2
65409: PUSH
65410: LD_VAR 0 2
65414: PPUSH
65415: LD_INT 4
65417: PPUSH
65418: LD_VAR 0 11
65422: PPUSH
65423: CALL_OW 1
65427: ST_TO_ADDR
// end ; if tmp and mech < 6 then
65428: LD_VAR 0 4
65432: PUSH
65433: LD_VAR 0 7
65437: PUSH
65438: LD_INT 6
65440: LESS
65441: AND
65442: IFFALSE 65630
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
65444: LD_ADDR_VAR 0 9
65448: PUSH
65449: LD_VAR 0 4
65453: PUSH
65454: LD_VAR 0 8
65458: PUSH
65459: LD_VAR 0 7
65463: UNION
65464: DIFF
65465: PPUSH
65466: LD_INT 3
65468: PPUSH
65469: CALL 55115 0 2
65473: ST_TO_ADDR
// p := [ ] ;
65474: LD_ADDR_VAR 0 11
65478: PUSH
65479: EMPTY
65480: ST_TO_ADDR
// if sort then
65481: LD_VAR 0 9
65485: IFFALSE 65601
// for i = 1 to 6 - mech do
65487: LD_ADDR_VAR 0 3
65491: PUSH
65492: DOUBLE
65493: LD_INT 1
65495: DEC
65496: ST_TO_ADDR
65497: LD_INT 6
65499: PUSH
65500: LD_VAR 0 7
65504: MINUS
65505: PUSH
65506: FOR_TO
65507: IFFALSE 65599
// begin if i = sort then
65509: LD_VAR 0 3
65513: PUSH
65514: LD_VAR 0 9
65518: EQUAL
65519: IFFALSE 65523
// break ;
65521: GO 65599
// if GetClass ( i ) = 3 then
65523: LD_VAR 0 3
65527: PPUSH
65528: CALL_OW 257
65532: PUSH
65533: LD_INT 3
65535: EQUAL
65536: IFFALSE 65540
// continue ;
65538: GO 65506
// p := Insert ( p , p + 1 , sort [ i ] ) ;
65540: LD_ADDR_VAR 0 11
65544: PUSH
65545: LD_VAR 0 11
65549: PPUSH
65550: LD_VAR 0 11
65554: PUSH
65555: LD_INT 1
65557: PLUS
65558: PPUSH
65559: LD_VAR 0 9
65563: PUSH
65564: LD_VAR 0 3
65568: ARRAY
65569: PPUSH
65570: CALL_OW 2
65574: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
65575: LD_ADDR_VAR 0 4
65579: PUSH
65580: LD_VAR 0 4
65584: PUSH
65585: LD_VAR 0 9
65589: PUSH
65590: LD_VAR 0 3
65594: ARRAY
65595: DIFF
65596: ST_TO_ADDR
// end ;
65597: GO 65506
65599: POP
65600: POP
// if p then
65601: LD_VAR 0 11
65605: IFFALSE 65630
// result := Replace ( result , 3 , p ) ;
65607: LD_ADDR_VAR 0 2
65611: PUSH
65612: LD_VAR 0 2
65616: PPUSH
65617: LD_INT 3
65619: PPUSH
65620: LD_VAR 0 11
65624: PPUSH
65625: CALL_OW 1
65629: ST_TO_ADDR
// end ; if tmp > 6 and eng < 6 then
65630: LD_VAR 0 4
65634: PUSH
65635: LD_INT 6
65637: GREATER
65638: PUSH
65639: LD_VAR 0 6
65643: PUSH
65644: LD_INT 6
65646: LESS
65647: AND
65648: IFFALSE 65842
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
65650: LD_ADDR_VAR 0 9
65654: PUSH
65655: LD_VAR 0 4
65659: PUSH
65660: LD_VAR 0 8
65664: PUSH
65665: LD_VAR 0 7
65669: UNION
65670: PUSH
65671: LD_VAR 0 6
65675: UNION
65676: DIFF
65677: PPUSH
65678: LD_INT 2
65680: PPUSH
65681: CALL 55115 0 2
65685: ST_TO_ADDR
// p := [ ] ;
65686: LD_ADDR_VAR 0 11
65690: PUSH
65691: EMPTY
65692: ST_TO_ADDR
// if sort then
65693: LD_VAR 0 9
65697: IFFALSE 65813
// for i = 1 to 6 - eng do
65699: LD_ADDR_VAR 0 3
65703: PUSH
65704: DOUBLE
65705: LD_INT 1
65707: DEC
65708: ST_TO_ADDR
65709: LD_INT 6
65711: PUSH
65712: LD_VAR 0 6
65716: MINUS
65717: PUSH
65718: FOR_TO
65719: IFFALSE 65811
// begin if i = sort then
65721: LD_VAR 0 3
65725: PUSH
65726: LD_VAR 0 9
65730: EQUAL
65731: IFFALSE 65735
// break ;
65733: GO 65811
// if GetClass ( i ) = 2 then
65735: LD_VAR 0 3
65739: PPUSH
65740: CALL_OW 257
65744: PUSH
65745: LD_INT 2
65747: EQUAL
65748: IFFALSE 65752
// continue ;
65750: GO 65718
// p := Insert ( p , p + 1 , sort [ i ] ) ;
65752: LD_ADDR_VAR 0 11
65756: PUSH
65757: LD_VAR 0 11
65761: PPUSH
65762: LD_VAR 0 11
65766: PUSH
65767: LD_INT 1
65769: PLUS
65770: PPUSH
65771: LD_VAR 0 9
65775: PUSH
65776: LD_VAR 0 3
65780: ARRAY
65781: PPUSH
65782: CALL_OW 2
65786: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
65787: LD_ADDR_VAR 0 4
65791: PUSH
65792: LD_VAR 0 4
65796: PUSH
65797: LD_VAR 0 9
65801: PUSH
65802: LD_VAR 0 3
65806: ARRAY
65807: DIFF
65808: ST_TO_ADDR
// end ;
65809: GO 65718
65811: POP
65812: POP
// if p then
65813: LD_VAR 0 11
65817: IFFALSE 65842
// result := Replace ( result , 2 , p ) ;
65819: LD_ADDR_VAR 0 2
65823: PUSH
65824: LD_VAR 0 2
65828: PPUSH
65829: LD_INT 2
65831: PPUSH
65832: LD_VAR 0 11
65836: PPUSH
65837: CALL_OW 1
65841: ST_TO_ADDR
// end ; exit ;
65842: GO 67230
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and mc_build_list [ base ] then
65844: LD_EXP 77
65848: PUSH
65849: LD_EXP 76
65853: PUSH
65854: LD_VAR 0 1
65858: ARRAY
65859: ARRAY
65860: NOT
65861: PUSH
65862: LD_EXP 50
65866: PUSH
65867: LD_VAR 0 1
65871: ARRAY
65872: PPUSH
65873: LD_INT 30
65875: PUSH
65876: LD_INT 3
65878: PUSH
65879: EMPTY
65880: LIST
65881: LIST
65882: PPUSH
65883: CALL_OW 72
65887: AND
65888: PUSH
65889: LD_EXP 55
65893: PUSH
65894: LD_VAR 0 1
65898: ARRAY
65899: AND
65900: IFFALSE 66508
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 5 ) ;
65902: LD_ADDR_EXP 92
65906: PUSH
65907: LD_EXP 92
65911: PPUSH
65912: LD_VAR 0 1
65916: PPUSH
65917: LD_INT 5
65919: PPUSH
65920: CALL_OW 1
65924: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
65925: LD_ADDR_VAR 0 2
65929: PUSH
65930: LD_INT 0
65932: PUSH
65933: LD_INT 0
65935: PUSH
65936: LD_INT 0
65938: PUSH
65939: LD_INT 0
65941: PUSH
65942: EMPTY
65943: LIST
65944: LIST
65945: LIST
65946: LIST
65947: ST_TO_ADDR
// if sci > 1 then
65948: LD_VAR 0 8
65952: PUSH
65953: LD_INT 1
65955: GREATER
65956: IFFALSE 65984
// tmp := tmp diff ( sci diff sci [ 1 ] ) ;
65958: LD_ADDR_VAR 0 4
65962: PUSH
65963: LD_VAR 0 4
65967: PUSH
65968: LD_VAR 0 8
65972: PUSH
65973: LD_VAR 0 8
65977: PUSH
65978: LD_INT 1
65980: ARRAY
65981: DIFF
65982: DIFF
65983: ST_TO_ADDR
// if tmp and not sci then
65984: LD_VAR 0 4
65988: PUSH
65989: LD_VAR 0 8
65993: NOT
65994: AND
65995: IFFALSE 66064
// begin sort := SortBySkill ( tmp , 4 ) ;
65997: LD_ADDR_VAR 0 9
66001: PUSH
66002: LD_VAR 0 4
66006: PPUSH
66007: LD_INT 4
66009: PPUSH
66010: CALL 55115 0 2
66014: ST_TO_ADDR
// if sort then
66015: LD_VAR 0 9
66019: IFFALSE 66035
// p := sort [ 1 ] ;
66021: LD_ADDR_VAR 0 11
66025: PUSH
66026: LD_VAR 0 9
66030: PUSH
66031: LD_INT 1
66033: ARRAY
66034: ST_TO_ADDR
// if p then
66035: LD_VAR 0 11
66039: IFFALSE 66064
// result := Replace ( result , 4 , p ) ;
66041: LD_ADDR_VAR 0 2
66045: PUSH
66046: LD_VAR 0 2
66050: PPUSH
66051: LD_INT 4
66053: PPUSH
66054: LD_VAR 0 11
66058: PPUSH
66059: CALL_OW 1
66063: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
66064: LD_ADDR_VAR 0 4
66068: PUSH
66069: LD_VAR 0 4
66073: PUSH
66074: LD_VAR 0 7
66078: DIFF
66079: ST_TO_ADDR
// if tmp and mech < 6 then
66080: LD_VAR 0 4
66084: PUSH
66085: LD_VAR 0 7
66089: PUSH
66090: LD_INT 6
66092: LESS
66093: AND
66094: IFFALSE 66282
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
66096: LD_ADDR_VAR 0 9
66100: PUSH
66101: LD_VAR 0 4
66105: PUSH
66106: LD_VAR 0 8
66110: PUSH
66111: LD_VAR 0 7
66115: UNION
66116: DIFF
66117: PPUSH
66118: LD_INT 3
66120: PPUSH
66121: CALL 55115 0 2
66125: ST_TO_ADDR
// p := [ ] ;
66126: LD_ADDR_VAR 0 11
66130: PUSH
66131: EMPTY
66132: ST_TO_ADDR
// if sort then
66133: LD_VAR 0 9
66137: IFFALSE 66253
// for i = 1 to 6 - mech do
66139: LD_ADDR_VAR 0 3
66143: PUSH
66144: DOUBLE
66145: LD_INT 1
66147: DEC
66148: ST_TO_ADDR
66149: LD_INT 6
66151: PUSH
66152: LD_VAR 0 7
66156: MINUS
66157: PUSH
66158: FOR_TO
66159: IFFALSE 66251
// begin if i = sort then
66161: LD_VAR 0 3
66165: PUSH
66166: LD_VAR 0 9
66170: EQUAL
66171: IFFALSE 66175
// break ;
66173: GO 66251
// if GetClass ( i ) = 3 then
66175: LD_VAR 0 3
66179: PPUSH
66180: CALL_OW 257
66184: PUSH
66185: LD_INT 3
66187: EQUAL
66188: IFFALSE 66192
// continue ;
66190: GO 66158
// p := Insert ( p , p + 1 , sort [ i ] ) ;
66192: LD_ADDR_VAR 0 11
66196: PUSH
66197: LD_VAR 0 11
66201: PPUSH
66202: LD_VAR 0 11
66206: PUSH
66207: LD_INT 1
66209: PLUS
66210: PPUSH
66211: LD_VAR 0 9
66215: PUSH
66216: LD_VAR 0 3
66220: ARRAY
66221: PPUSH
66222: CALL_OW 2
66226: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
66227: LD_ADDR_VAR 0 4
66231: PUSH
66232: LD_VAR 0 4
66236: PUSH
66237: LD_VAR 0 9
66241: PUSH
66242: LD_VAR 0 3
66246: ARRAY
66247: DIFF
66248: ST_TO_ADDR
// end ;
66249: GO 66158
66251: POP
66252: POP
// if p then
66253: LD_VAR 0 11
66257: IFFALSE 66282
// result := Replace ( result , 3 , p ) ;
66259: LD_ADDR_VAR 0 2
66263: PUSH
66264: LD_VAR 0 2
66268: PPUSH
66269: LD_INT 3
66271: PPUSH
66272: LD_VAR 0 11
66276: PPUSH
66277: CALL_OW 1
66281: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
66282: LD_ADDR_VAR 0 4
66286: PUSH
66287: LD_VAR 0 4
66291: PUSH
66292: LD_VAR 0 6
66296: DIFF
66297: ST_TO_ADDR
// if tmp and eng < 6 then
66298: LD_VAR 0 4
66302: PUSH
66303: LD_VAR 0 6
66307: PUSH
66308: LD_INT 6
66310: LESS
66311: AND
66312: IFFALSE 66506
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
66314: LD_ADDR_VAR 0 9
66318: PUSH
66319: LD_VAR 0 4
66323: PUSH
66324: LD_VAR 0 8
66328: PUSH
66329: LD_VAR 0 7
66333: UNION
66334: PUSH
66335: LD_VAR 0 6
66339: UNION
66340: DIFF
66341: PPUSH
66342: LD_INT 2
66344: PPUSH
66345: CALL 55115 0 2
66349: ST_TO_ADDR
// p := [ ] ;
66350: LD_ADDR_VAR 0 11
66354: PUSH
66355: EMPTY
66356: ST_TO_ADDR
// if sort then
66357: LD_VAR 0 9
66361: IFFALSE 66477
// for i = 1 to 6 - eng do
66363: LD_ADDR_VAR 0 3
66367: PUSH
66368: DOUBLE
66369: LD_INT 1
66371: DEC
66372: ST_TO_ADDR
66373: LD_INT 6
66375: PUSH
66376: LD_VAR 0 6
66380: MINUS
66381: PUSH
66382: FOR_TO
66383: IFFALSE 66475
// begin if i = sort then
66385: LD_VAR 0 3
66389: PUSH
66390: LD_VAR 0 9
66394: EQUAL
66395: IFFALSE 66399
// break ;
66397: GO 66475
// if GetClass ( i ) = 2 then
66399: LD_VAR 0 3
66403: PPUSH
66404: CALL_OW 257
66408: PUSH
66409: LD_INT 2
66411: EQUAL
66412: IFFALSE 66416
// continue ;
66414: GO 66382
// p := Insert ( p , p + 1 , sort [ i ] ) ;
66416: LD_ADDR_VAR 0 11
66420: PUSH
66421: LD_VAR 0 11
66425: PPUSH
66426: LD_VAR 0 11
66430: PUSH
66431: LD_INT 1
66433: PLUS
66434: PPUSH
66435: LD_VAR 0 9
66439: PUSH
66440: LD_VAR 0 3
66444: ARRAY
66445: PPUSH
66446: CALL_OW 2
66450: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
66451: LD_ADDR_VAR 0 4
66455: PUSH
66456: LD_VAR 0 4
66460: PUSH
66461: LD_VAR 0 9
66465: PUSH
66466: LD_VAR 0 3
66470: ARRAY
66471: DIFF
66472: ST_TO_ADDR
// end ;
66473: GO 66382
66475: POP
66476: POP
// if p then
66477: LD_VAR 0 11
66481: IFFALSE 66506
// result := Replace ( result , 2 , p ) ;
66483: LD_ADDR_VAR 0 2
66487: PUSH
66488: LD_VAR 0 2
66492: PPUSH
66493: LD_INT 2
66495: PPUSH
66496: LD_VAR 0 11
66500: PPUSH
66501: CALL_OW 1
66505: ST_TO_ADDR
// end ; exit ;
66506: GO 67230
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and not mc_build_list [ base ] then
66508: LD_EXP 77
66512: PUSH
66513: LD_EXP 76
66517: PUSH
66518: LD_VAR 0 1
66522: ARRAY
66523: ARRAY
66524: NOT
66525: PUSH
66526: LD_EXP 50
66530: PUSH
66531: LD_VAR 0 1
66535: ARRAY
66536: PPUSH
66537: LD_INT 30
66539: PUSH
66540: LD_INT 3
66542: PUSH
66543: EMPTY
66544: LIST
66545: LIST
66546: PPUSH
66547: CALL_OW 72
66551: AND
66552: PUSH
66553: LD_EXP 55
66557: PUSH
66558: LD_VAR 0 1
66562: ARRAY
66563: NOT
66564: AND
66565: IFFALSE 67230
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 6 ) ;
66567: LD_ADDR_EXP 92
66571: PUSH
66572: LD_EXP 92
66576: PPUSH
66577: LD_VAR 0 1
66581: PPUSH
66582: LD_INT 6
66584: PPUSH
66585: CALL_OW 1
66589: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
66590: LD_ADDR_VAR 0 2
66594: PUSH
66595: LD_INT 0
66597: PUSH
66598: LD_INT 0
66600: PUSH
66601: LD_INT 0
66603: PUSH
66604: LD_INT 0
66606: PUSH
66607: EMPTY
66608: LIST
66609: LIST
66610: LIST
66611: LIST
66612: ST_TO_ADDR
// if sci >= 1 then
66613: LD_VAR 0 8
66617: PUSH
66618: LD_INT 1
66620: GREATEREQUAL
66621: IFFALSE 66643
// tmp := tmp diff sci [ 1 ] ;
66623: LD_ADDR_VAR 0 4
66627: PUSH
66628: LD_VAR 0 4
66632: PUSH
66633: LD_VAR 0 8
66637: PUSH
66638: LD_INT 1
66640: ARRAY
66641: DIFF
66642: ST_TO_ADDR
// if tmp and not sci then
66643: LD_VAR 0 4
66647: PUSH
66648: LD_VAR 0 8
66652: NOT
66653: AND
66654: IFFALSE 66723
// begin sort := SortBySkill ( tmp , 4 ) ;
66656: LD_ADDR_VAR 0 9
66660: PUSH
66661: LD_VAR 0 4
66665: PPUSH
66666: LD_INT 4
66668: PPUSH
66669: CALL 55115 0 2
66673: ST_TO_ADDR
// if sort then
66674: LD_VAR 0 9
66678: IFFALSE 66694
// p := sort [ 1 ] ;
66680: LD_ADDR_VAR 0 11
66684: PUSH
66685: LD_VAR 0 9
66689: PUSH
66690: LD_INT 1
66692: ARRAY
66693: ST_TO_ADDR
// if p then
66694: LD_VAR 0 11
66698: IFFALSE 66723
// result := Replace ( result , 4 , p ) ;
66700: LD_ADDR_VAR 0 2
66704: PUSH
66705: LD_VAR 0 2
66709: PPUSH
66710: LD_INT 4
66712: PPUSH
66713: LD_VAR 0 11
66717: PPUSH
66718: CALL_OW 1
66722: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
66723: LD_ADDR_VAR 0 4
66727: PUSH
66728: LD_VAR 0 4
66732: PUSH
66733: LD_VAR 0 7
66737: DIFF
66738: ST_TO_ADDR
// if tmp and mech < 6 then
66739: LD_VAR 0 4
66743: PUSH
66744: LD_VAR 0 7
66748: PUSH
66749: LD_INT 6
66751: LESS
66752: AND
66753: IFFALSE 66935
// begin sort := SortBySkill ( tmp diff mech , 3 ) ;
66755: LD_ADDR_VAR 0 9
66759: PUSH
66760: LD_VAR 0 4
66764: PUSH
66765: LD_VAR 0 7
66769: DIFF
66770: PPUSH
66771: LD_INT 3
66773: PPUSH
66774: CALL 55115 0 2
66778: ST_TO_ADDR
// p := [ ] ;
66779: LD_ADDR_VAR 0 11
66783: PUSH
66784: EMPTY
66785: ST_TO_ADDR
// if sort then
66786: LD_VAR 0 9
66790: IFFALSE 66906
// for i = 1 to 6 - mech do
66792: LD_ADDR_VAR 0 3
66796: PUSH
66797: DOUBLE
66798: LD_INT 1
66800: DEC
66801: ST_TO_ADDR
66802: LD_INT 6
66804: PUSH
66805: LD_VAR 0 7
66809: MINUS
66810: PUSH
66811: FOR_TO
66812: IFFALSE 66904
// begin if i = sort then
66814: LD_VAR 0 3
66818: PUSH
66819: LD_VAR 0 9
66823: EQUAL
66824: IFFALSE 66828
// break ;
66826: GO 66904
// if GetClass ( i ) = 3 then
66828: LD_VAR 0 3
66832: PPUSH
66833: CALL_OW 257
66837: PUSH
66838: LD_INT 3
66840: EQUAL
66841: IFFALSE 66845
// continue ;
66843: GO 66811
// p := Insert ( p , p + 1 , sort [ i ] ) ;
66845: LD_ADDR_VAR 0 11
66849: PUSH
66850: LD_VAR 0 11
66854: PPUSH
66855: LD_VAR 0 11
66859: PUSH
66860: LD_INT 1
66862: PLUS
66863: PPUSH
66864: LD_VAR 0 9
66868: PUSH
66869: LD_VAR 0 3
66873: ARRAY
66874: PPUSH
66875: CALL_OW 2
66879: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
66880: LD_ADDR_VAR 0 4
66884: PUSH
66885: LD_VAR 0 4
66889: PUSH
66890: LD_VAR 0 9
66894: PUSH
66895: LD_VAR 0 3
66899: ARRAY
66900: DIFF
66901: ST_TO_ADDR
// end ;
66902: GO 66811
66904: POP
66905: POP
// if p then
66906: LD_VAR 0 11
66910: IFFALSE 66935
// result := Replace ( result , 3 , p ) ;
66912: LD_ADDR_VAR 0 2
66916: PUSH
66917: LD_VAR 0 2
66921: PPUSH
66922: LD_INT 3
66924: PPUSH
66925: LD_VAR 0 11
66929: PPUSH
66930: CALL_OW 1
66934: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
66935: LD_ADDR_VAR 0 4
66939: PUSH
66940: LD_VAR 0 4
66944: PUSH
66945: LD_VAR 0 6
66949: DIFF
66950: ST_TO_ADDR
// if tmp and eng < 4 then
66951: LD_VAR 0 4
66955: PUSH
66956: LD_VAR 0 6
66960: PUSH
66961: LD_INT 4
66963: LESS
66964: AND
66965: IFFALSE 67155
// begin sort := SortBySkill ( tmp diff ( mech union eng ) , 2 ) ;
66967: LD_ADDR_VAR 0 9
66971: PUSH
66972: LD_VAR 0 4
66976: PUSH
66977: LD_VAR 0 7
66981: PUSH
66982: LD_VAR 0 6
66986: UNION
66987: DIFF
66988: PPUSH
66989: LD_INT 2
66991: PPUSH
66992: CALL 55115 0 2
66996: ST_TO_ADDR
// p := [ ] ;
66997: LD_ADDR_VAR 0 11
67001: PUSH
67002: EMPTY
67003: ST_TO_ADDR
// if sort then
67004: LD_VAR 0 9
67008: IFFALSE 67124
// for i = 1 to 4 - eng do
67010: LD_ADDR_VAR 0 3
67014: PUSH
67015: DOUBLE
67016: LD_INT 1
67018: DEC
67019: ST_TO_ADDR
67020: LD_INT 4
67022: PUSH
67023: LD_VAR 0 6
67027: MINUS
67028: PUSH
67029: FOR_TO
67030: IFFALSE 67122
// begin if i = sort then
67032: LD_VAR 0 3
67036: PUSH
67037: LD_VAR 0 9
67041: EQUAL
67042: IFFALSE 67046
// break ;
67044: GO 67122
// if GetClass ( i ) = 2 then
67046: LD_VAR 0 3
67050: PPUSH
67051: CALL_OW 257
67055: PUSH
67056: LD_INT 2
67058: EQUAL
67059: IFFALSE 67063
// continue ;
67061: GO 67029
// p := Insert ( p , p + 1 , sort [ i ] ) ;
67063: LD_ADDR_VAR 0 11
67067: PUSH
67068: LD_VAR 0 11
67072: PPUSH
67073: LD_VAR 0 11
67077: PUSH
67078: LD_INT 1
67080: PLUS
67081: PPUSH
67082: LD_VAR 0 9
67086: PUSH
67087: LD_VAR 0 3
67091: ARRAY
67092: PPUSH
67093: CALL_OW 2
67097: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
67098: LD_ADDR_VAR 0 4
67102: PUSH
67103: LD_VAR 0 4
67107: PUSH
67108: LD_VAR 0 9
67112: PUSH
67113: LD_VAR 0 3
67117: ARRAY
67118: DIFF
67119: ST_TO_ADDR
// end ;
67120: GO 67029
67122: POP
67123: POP
// if p then
67124: LD_VAR 0 11
67128: IFFALSE 67153
// result := Replace ( result , 2 , p ) ;
67130: LD_ADDR_VAR 0 2
67134: PUSH
67135: LD_VAR 0 2
67139: PPUSH
67140: LD_INT 2
67142: PPUSH
67143: LD_VAR 0 11
67147: PPUSH
67148: CALL_OW 1
67152: ST_TO_ADDR
// end else
67153: GO 67199
// for i = eng downto 5 do
67155: LD_ADDR_VAR 0 3
67159: PUSH
67160: DOUBLE
67161: LD_VAR 0 6
67165: INC
67166: ST_TO_ADDR
67167: LD_INT 5
67169: PUSH
67170: FOR_DOWNTO
67171: IFFALSE 67197
// tmp := tmp union eng [ i ] ;
67173: LD_ADDR_VAR 0 4
67177: PUSH
67178: LD_VAR 0 4
67182: PUSH
67183: LD_VAR 0 6
67187: PUSH
67188: LD_VAR 0 3
67192: ARRAY
67193: UNION
67194: ST_TO_ADDR
67195: GO 67170
67197: POP
67198: POP
// result := Replace ( result , 1 , tmp diff sol ) ;
67199: LD_ADDR_VAR 0 2
67203: PUSH
67204: LD_VAR 0 2
67208: PPUSH
67209: LD_INT 1
67211: PPUSH
67212: LD_VAR 0 4
67216: PUSH
67217: LD_VAR 0 5
67221: DIFF
67222: PPUSH
67223: CALL_OW 1
67227: ST_TO_ADDR
// exit ;
67228: GO 67230
// end ; end ;
67230: LD_VAR 0 2
67234: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
67235: LD_INT 0
67237: PPUSH
67238: PPUSH
67239: PPUSH
// if not mc_bases then
67240: LD_EXP 50
67244: NOT
67245: IFFALSE 67249
// exit ;
67247: GO 67391
// for i = 1 to mc_bases do
67249: LD_ADDR_VAR 0 2
67253: PUSH
67254: DOUBLE
67255: LD_INT 1
67257: DEC
67258: ST_TO_ADDR
67259: LD_EXP 50
67263: PUSH
67264: FOR_TO
67265: IFFALSE 67382
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
67267: LD_ADDR_VAR 0 3
67271: PUSH
67272: LD_EXP 50
67276: PUSH
67277: LD_VAR 0 2
67281: ARRAY
67282: PPUSH
67283: LD_INT 21
67285: PUSH
67286: LD_INT 3
67288: PUSH
67289: EMPTY
67290: LIST
67291: LIST
67292: PUSH
67293: LD_INT 3
67295: PUSH
67296: LD_INT 2
67298: PUSH
67299: LD_INT 30
67301: PUSH
67302: LD_INT 29
67304: PUSH
67305: EMPTY
67306: LIST
67307: LIST
67308: PUSH
67309: LD_INT 30
67311: PUSH
67312: LD_INT 30
67314: PUSH
67315: EMPTY
67316: LIST
67317: LIST
67318: PUSH
67319: EMPTY
67320: LIST
67321: LIST
67322: LIST
67323: PUSH
67324: EMPTY
67325: LIST
67326: LIST
67327: PUSH
67328: LD_INT 3
67330: PUSH
67331: LD_INT 24
67333: PUSH
67334: LD_INT 1000
67336: PUSH
67337: EMPTY
67338: LIST
67339: LIST
67340: PUSH
67341: EMPTY
67342: LIST
67343: LIST
67344: PUSH
67345: EMPTY
67346: LIST
67347: LIST
67348: LIST
67349: PPUSH
67350: CALL_OW 72
67354: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
67355: LD_ADDR_EXP 51
67359: PUSH
67360: LD_EXP 51
67364: PPUSH
67365: LD_VAR 0 2
67369: PPUSH
67370: LD_VAR 0 3
67374: PPUSH
67375: CALL_OW 1
67379: ST_TO_ADDR
// end ;
67380: GO 67264
67382: POP
67383: POP
// RaiseSailEvent ( 101 ) ;
67384: LD_INT 101
67386: PPUSH
67387: CALL_OW 427
// end ;
67391: LD_VAR 0 1
67395: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
67396: LD_INT 0
67398: PPUSH
67399: PPUSH
67400: PPUSH
67401: PPUSH
67402: PPUSH
67403: PPUSH
67404: PPUSH
// if not mc_bases then
67405: LD_EXP 50
67409: NOT
67410: IFFALSE 67414
// exit ;
67412: GO 67976
// for i = 1 to mc_bases do
67414: LD_ADDR_VAR 0 2
67418: PUSH
67419: DOUBLE
67420: LD_INT 1
67422: DEC
67423: ST_TO_ADDR
67424: LD_EXP 50
67428: PUSH
67429: FOR_TO
67430: IFFALSE 67967
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
67432: LD_ADDR_VAR 0 5
67436: PUSH
67437: LD_EXP 50
67441: PUSH
67442: LD_VAR 0 2
67446: ARRAY
67447: PUSH
67448: LD_EXP 79
67452: PUSH
67453: LD_VAR 0 2
67457: ARRAY
67458: UNION
67459: PPUSH
67460: LD_INT 21
67462: PUSH
67463: LD_INT 1
67465: PUSH
67466: EMPTY
67467: LIST
67468: LIST
67469: PUSH
67470: LD_INT 1
67472: PUSH
67473: LD_INT 3
67475: PUSH
67476: LD_INT 54
67478: PUSH
67479: EMPTY
67480: LIST
67481: PUSH
67482: EMPTY
67483: LIST
67484: LIST
67485: PUSH
67486: LD_INT 3
67488: PUSH
67489: LD_INT 24
67491: PUSH
67492: LD_INT 1000
67494: PUSH
67495: EMPTY
67496: LIST
67497: LIST
67498: PUSH
67499: EMPTY
67500: LIST
67501: LIST
67502: PUSH
67503: EMPTY
67504: LIST
67505: LIST
67506: LIST
67507: PUSH
67508: EMPTY
67509: LIST
67510: LIST
67511: PPUSH
67512: CALL_OW 72
67516: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
67517: LD_ADDR_VAR 0 6
67521: PUSH
67522: LD_EXP 50
67526: PUSH
67527: LD_VAR 0 2
67531: ARRAY
67532: PPUSH
67533: LD_INT 21
67535: PUSH
67536: LD_INT 1
67538: PUSH
67539: EMPTY
67540: LIST
67541: LIST
67542: PUSH
67543: LD_INT 1
67545: PUSH
67546: LD_INT 3
67548: PUSH
67549: LD_INT 54
67551: PUSH
67552: EMPTY
67553: LIST
67554: PUSH
67555: EMPTY
67556: LIST
67557: LIST
67558: PUSH
67559: LD_INT 3
67561: PUSH
67562: LD_INT 24
67564: PUSH
67565: LD_INT 250
67567: PUSH
67568: EMPTY
67569: LIST
67570: LIST
67571: PUSH
67572: EMPTY
67573: LIST
67574: LIST
67575: PUSH
67576: EMPTY
67577: LIST
67578: LIST
67579: LIST
67580: PUSH
67581: EMPTY
67582: LIST
67583: LIST
67584: PPUSH
67585: CALL_OW 72
67589: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
67590: LD_ADDR_VAR 0 7
67594: PUSH
67595: LD_VAR 0 5
67599: PUSH
67600: LD_VAR 0 6
67604: DIFF
67605: ST_TO_ADDR
// if not need_heal_1 then
67606: LD_VAR 0 6
67610: NOT
67611: IFFALSE 67644
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , [ ] ) else
67613: LD_ADDR_EXP 53
67617: PUSH
67618: LD_EXP 53
67622: PPUSH
67623: LD_VAR 0 2
67627: PUSH
67628: LD_INT 1
67630: PUSH
67631: EMPTY
67632: LIST
67633: LIST
67634: PPUSH
67635: EMPTY
67636: PPUSH
67637: CALL 24858 0 3
67641: ST_TO_ADDR
67642: GO 67714
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , UnitFilter ( mc_need_heal [ i ] [ 1 ] , [ f_not , [ f_lives , 1000 ] ] ) union need_heal_1 ) ;
67644: LD_ADDR_EXP 53
67648: PUSH
67649: LD_EXP 53
67653: PPUSH
67654: LD_VAR 0 2
67658: PUSH
67659: LD_INT 1
67661: PUSH
67662: EMPTY
67663: LIST
67664: LIST
67665: PPUSH
67666: LD_EXP 53
67670: PUSH
67671: LD_VAR 0 2
67675: ARRAY
67676: PUSH
67677: LD_INT 1
67679: ARRAY
67680: PPUSH
67681: LD_INT 3
67683: PUSH
67684: LD_INT 24
67686: PUSH
67687: LD_INT 1000
67689: PUSH
67690: EMPTY
67691: LIST
67692: LIST
67693: PUSH
67694: EMPTY
67695: LIST
67696: LIST
67697: PPUSH
67698: CALL_OW 72
67702: PUSH
67703: LD_VAR 0 6
67707: UNION
67708: PPUSH
67709: CALL 24858 0 3
67713: ST_TO_ADDR
// if not need_heal_2 then
67714: LD_VAR 0 7
67718: NOT
67719: IFFALSE 67752
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , [ ] ) else
67721: LD_ADDR_EXP 53
67725: PUSH
67726: LD_EXP 53
67730: PPUSH
67731: LD_VAR 0 2
67735: PUSH
67736: LD_INT 2
67738: PUSH
67739: EMPTY
67740: LIST
67741: LIST
67742: PPUSH
67743: EMPTY
67744: PPUSH
67745: CALL 24858 0 3
67749: ST_TO_ADDR
67750: GO 67784
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
67752: LD_ADDR_EXP 53
67756: PUSH
67757: LD_EXP 53
67761: PPUSH
67762: LD_VAR 0 2
67766: PUSH
67767: LD_INT 2
67769: PUSH
67770: EMPTY
67771: LIST
67772: LIST
67773: PPUSH
67774: LD_VAR 0 7
67778: PPUSH
67779: CALL 24858 0 3
67783: ST_TO_ADDR
// if need_heal_2 then
67784: LD_VAR 0 7
67788: IFFALSE 67949
// for j in need_heal_2 do
67790: LD_ADDR_VAR 0 3
67794: PUSH
67795: LD_VAR 0 7
67799: PUSH
67800: FOR_IN
67801: IFFALSE 67947
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
67803: LD_ADDR_VAR 0 5
67807: PUSH
67808: LD_EXP 50
67812: PUSH
67813: LD_VAR 0 2
67817: ARRAY
67818: PPUSH
67819: LD_INT 2
67821: PUSH
67822: LD_INT 30
67824: PUSH
67825: LD_INT 6
67827: PUSH
67828: EMPTY
67829: LIST
67830: LIST
67831: PUSH
67832: LD_INT 30
67834: PUSH
67835: LD_INT 7
67837: PUSH
67838: EMPTY
67839: LIST
67840: LIST
67841: PUSH
67842: LD_INT 30
67844: PUSH
67845: LD_INT 8
67847: PUSH
67848: EMPTY
67849: LIST
67850: LIST
67851: PUSH
67852: LD_INT 30
67854: PUSH
67855: LD_INT 0
67857: PUSH
67858: EMPTY
67859: LIST
67860: LIST
67861: PUSH
67862: LD_INT 30
67864: PUSH
67865: LD_INT 1
67867: PUSH
67868: EMPTY
67869: LIST
67870: LIST
67871: PUSH
67872: EMPTY
67873: LIST
67874: LIST
67875: LIST
67876: LIST
67877: LIST
67878: LIST
67879: PPUSH
67880: CALL_OW 72
67884: ST_TO_ADDR
// if tmp then
67885: LD_VAR 0 5
67889: IFFALSE 67945
// begin k := NearestUnitToUnit ( tmp , j ) ;
67891: LD_ADDR_VAR 0 4
67895: PUSH
67896: LD_VAR 0 5
67900: PPUSH
67901: LD_VAR 0 3
67905: PPUSH
67906: CALL_OW 74
67910: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 5 then
67911: LD_VAR 0 3
67915: PPUSH
67916: LD_VAR 0 4
67920: PPUSH
67921: CALL_OW 296
67925: PUSH
67926: LD_INT 5
67928: GREATER
67929: IFFALSE 67945
// ComMoveToNearbyEntrance ( j , k ) ;
67931: LD_VAR 0 3
67935: PPUSH
67936: LD_VAR 0 4
67940: PPUSH
67941: CALL 57476 0 2
// end ; end ;
67945: GO 67800
67947: POP
67948: POP
// if not need_heal_1 and not need_heal_2 then
67949: LD_VAR 0 6
67953: NOT
67954: PUSH
67955: LD_VAR 0 7
67959: NOT
67960: AND
67961: IFFALSE 67965
// continue ;
67963: GO 67429
// end ;
67965: GO 67429
67967: POP
67968: POP
// RaiseSailEvent ( 102 ) ;
67969: LD_INT 102
67971: PPUSH
67972: CALL_OW 427
// end ;
67976: LD_VAR 0 1
67980: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp , cranes , to_repair_tmp , to_repair ; begin
67981: LD_INT 0
67983: PPUSH
67984: PPUSH
67985: PPUSH
67986: PPUSH
67987: PPUSH
67988: PPUSH
67989: PPUSH
67990: PPUSH
// if not mc_bases then
67991: LD_EXP 50
67995: NOT
67996: IFFALSE 68000
// exit ;
67998: GO 68883
// for i = 1 to mc_bases do
68000: LD_ADDR_VAR 0 2
68004: PUSH
68005: DOUBLE
68006: LD_INT 1
68008: DEC
68009: ST_TO_ADDR
68010: LD_EXP 50
68014: PUSH
68015: FOR_TO
68016: IFFALSE 68881
// begin if not mc_building_need_repair [ i ] then
68018: LD_EXP 51
68022: PUSH
68023: LD_VAR 0 2
68027: ARRAY
68028: NOT
68029: IFFALSE 68216
// begin cranes := UnitFilter ( mc_vehicles [ i ] , [ [ f_not , [ f_lives , 1000 ] ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , ar_crane ] ] ] ) ;
68031: LD_ADDR_VAR 0 6
68035: PUSH
68036: LD_EXP 69
68040: PUSH
68041: LD_VAR 0 2
68045: ARRAY
68046: PPUSH
68047: LD_INT 3
68049: PUSH
68050: LD_INT 24
68052: PUSH
68053: LD_INT 1000
68055: PUSH
68056: EMPTY
68057: LIST
68058: LIST
68059: PUSH
68060: EMPTY
68061: LIST
68062: LIST
68063: PUSH
68064: LD_INT 2
68066: PUSH
68067: LD_INT 34
68069: PUSH
68070: LD_INT 13
68072: PUSH
68073: EMPTY
68074: LIST
68075: LIST
68076: PUSH
68077: LD_INT 34
68079: PUSH
68080: LD_INT 52
68082: PUSH
68083: EMPTY
68084: LIST
68085: LIST
68086: PUSH
68087: LD_INT 34
68089: PUSH
68090: LD_EXP 35
68094: PUSH
68095: EMPTY
68096: LIST
68097: LIST
68098: PUSH
68099: EMPTY
68100: LIST
68101: LIST
68102: LIST
68103: LIST
68104: PUSH
68105: EMPTY
68106: LIST
68107: LIST
68108: PPUSH
68109: CALL_OW 72
68113: ST_TO_ADDR
// if cranes then
68114: LD_VAR 0 6
68118: IFFALSE 68180
// for j in cranes do
68120: LD_ADDR_VAR 0 3
68124: PUSH
68125: LD_VAR 0 6
68129: PUSH
68130: FOR_IN
68131: IFFALSE 68178
// if not IsInArea ( j , mc_parking [ i ] ) then
68133: LD_VAR 0 3
68137: PPUSH
68138: LD_EXP 74
68142: PUSH
68143: LD_VAR 0 2
68147: ARRAY
68148: PPUSH
68149: CALL_OW 308
68153: NOT
68154: IFFALSE 68176
// ComMoveToArea ( j , mc_parking [ i ] ) ;
68156: LD_VAR 0 3
68160: PPUSH
68161: LD_EXP 74
68165: PUSH
68166: LD_VAR 0 2
68170: ARRAY
68171: PPUSH
68172: CALL_OW 113
68176: GO 68130
68178: POP
68179: POP
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
68180: LD_ADDR_EXP 52
68184: PUSH
68185: LD_EXP 52
68189: PPUSH
68190: LD_VAR 0 2
68194: PPUSH
68195: EMPTY
68196: PPUSH
68197: CALL_OW 1
68201: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
68202: LD_VAR 0 2
68206: PPUSH
68207: LD_INT 101
68209: PPUSH
68210: CALL 63068 0 2
// continue ;
68214: GO 68015
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
68216: LD_ADDR_EXP 56
68220: PUSH
68221: LD_EXP 56
68225: PPUSH
68226: LD_VAR 0 2
68230: PPUSH
68231: EMPTY
68232: PPUSH
68233: CALL_OW 1
68237: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
68238: LD_VAR 0 2
68242: PPUSH
68243: LD_INT 103
68245: PPUSH
68246: CALL 63068 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
68250: LD_ADDR_VAR 0 5
68254: PUSH
68255: LD_EXP 50
68259: PUSH
68260: LD_VAR 0 2
68264: ARRAY
68265: PUSH
68266: LD_EXP 79
68270: PUSH
68271: LD_VAR 0 2
68275: ARRAY
68276: UNION
68277: PPUSH
68278: LD_INT 2
68280: PUSH
68281: LD_INT 25
68283: PUSH
68284: LD_INT 2
68286: PUSH
68287: EMPTY
68288: LIST
68289: LIST
68290: PUSH
68291: LD_INT 25
68293: PUSH
68294: LD_INT 16
68296: PUSH
68297: EMPTY
68298: LIST
68299: LIST
68300: PUSH
68301: EMPTY
68302: LIST
68303: LIST
68304: LIST
68305: PUSH
68306: EMPTY
68307: LIST
68308: PPUSH
68309: CALL_OW 72
68313: ST_TO_ADDR
// if mc_need_heal [ i ] then
68314: LD_EXP 53
68318: PUSH
68319: LD_VAR 0 2
68323: ARRAY
68324: IFFALSE 68368
// tmp := tmp diff ( mc_need_heal [ i ] [ 1 ] union mc_need_heal [ i ] [ 2 ] ) ;
68326: LD_ADDR_VAR 0 5
68330: PUSH
68331: LD_VAR 0 5
68335: PUSH
68336: LD_EXP 53
68340: PUSH
68341: LD_VAR 0 2
68345: ARRAY
68346: PUSH
68347: LD_INT 1
68349: ARRAY
68350: PUSH
68351: LD_EXP 53
68355: PUSH
68356: LD_VAR 0 2
68360: ARRAY
68361: PUSH
68362: LD_INT 2
68364: ARRAY
68365: UNION
68366: DIFF
68367: ST_TO_ADDR
// cranes := UnitFilter ( mc_vehicles [ i ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , ar_crane ] ] ) ;
68368: LD_ADDR_VAR 0 6
68372: PUSH
68373: LD_EXP 69
68377: PUSH
68378: LD_VAR 0 2
68382: ARRAY
68383: PPUSH
68384: LD_INT 2
68386: PUSH
68387: LD_INT 34
68389: PUSH
68390: LD_INT 13
68392: PUSH
68393: EMPTY
68394: LIST
68395: LIST
68396: PUSH
68397: LD_INT 34
68399: PUSH
68400: LD_INT 52
68402: PUSH
68403: EMPTY
68404: LIST
68405: LIST
68406: PUSH
68407: LD_INT 34
68409: PUSH
68410: LD_EXP 35
68414: PUSH
68415: EMPTY
68416: LIST
68417: LIST
68418: PUSH
68419: EMPTY
68420: LIST
68421: LIST
68422: LIST
68423: LIST
68424: PPUSH
68425: CALL_OW 72
68429: ST_TO_ADDR
// if cranes then
68430: LD_VAR 0 6
68434: IFFALSE 68570
// begin for j in cranes do
68436: LD_ADDR_VAR 0 3
68440: PUSH
68441: LD_VAR 0 6
68445: PUSH
68446: FOR_IN
68447: IFFALSE 68568
// begin if GetLives ( j ) = 1000 and not HasTask ( j ) then
68449: LD_VAR 0 3
68453: PPUSH
68454: CALL_OW 256
68458: PUSH
68459: LD_INT 1000
68461: EQUAL
68462: PUSH
68463: LD_VAR 0 3
68467: PPUSH
68468: CALL_OW 314
68472: NOT
68473: AND
68474: IFFALSE 68508
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) else
68476: LD_VAR 0 3
68480: PPUSH
68481: LD_EXP 51
68485: PUSH
68486: LD_VAR 0 2
68490: ARRAY
68491: PPUSH
68492: LD_VAR 0 3
68496: PPUSH
68497: CALL_OW 74
68501: PPUSH
68502: CALL_OW 130
68506: GO 68566
// if GetLives ( j ) < 500 and not IsInArea ( j , mc_parking [ i ] ) then
68508: LD_VAR 0 3
68512: PPUSH
68513: CALL_OW 256
68517: PUSH
68518: LD_INT 500
68520: LESS
68521: PUSH
68522: LD_VAR 0 3
68526: PPUSH
68527: LD_EXP 74
68531: PUSH
68532: LD_VAR 0 2
68536: ARRAY
68537: PPUSH
68538: CALL_OW 308
68542: NOT
68543: AND
68544: IFFALSE 68566
// ComMoveToArea ( j , mc_parking [ i ] ) ;
68546: LD_VAR 0 3
68550: PPUSH
68551: LD_EXP 74
68555: PUSH
68556: LD_VAR 0 2
68560: ARRAY
68561: PPUSH
68562: CALL_OW 113
// end ;
68566: GO 68446
68568: POP
68569: POP
// end ; if tmp > 3 then
68570: LD_VAR 0 5
68574: PUSH
68575: LD_INT 3
68577: GREATER
68578: IFFALSE 68598
// tmp := ShrinkArray ( tmp , 4 ) ;
68580: LD_ADDR_VAR 0 5
68584: PUSH
68585: LD_VAR 0 5
68589: PPUSH
68590: LD_INT 4
68592: PPUSH
68593: CALL 56924 0 2
68597: ST_TO_ADDR
// if not tmp then
68598: LD_VAR 0 5
68602: NOT
68603: IFFALSE 68607
// continue ;
68605: GO 68015
// for j in tmp do
68607: LD_ADDR_VAR 0 3
68611: PUSH
68612: LD_VAR 0 5
68616: PUSH
68617: FOR_IN
68618: IFFALSE 68877
// begin if IsInUnit ( j ) then
68620: LD_VAR 0 3
68624: PPUSH
68625: CALL_OW 310
68629: IFFALSE 68640
// ComExitBuilding ( j ) ;
68631: LD_VAR 0 3
68635: PPUSH
68636: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
68640: LD_VAR 0 3
68644: PUSH
68645: LD_EXP 52
68649: PUSH
68650: LD_VAR 0 2
68654: ARRAY
68655: IN
68656: NOT
68657: IFFALSE 68715
// begin SetTag ( j , 101 ) ;
68659: LD_VAR 0 3
68663: PPUSH
68664: LD_INT 101
68666: PPUSH
68667: CALL_OW 109
// mc_building_repairs := ReplaceIn ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
68671: LD_ADDR_EXP 52
68675: PUSH
68676: LD_EXP 52
68680: PPUSH
68681: LD_VAR 0 2
68685: PUSH
68686: LD_EXP 52
68690: PUSH
68691: LD_VAR 0 2
68695: ARRAY
68696: PUSH
68697: LD_INT 1
68699: PLUS
68700: PUSH
68701: EMPTY
68702: LIST
68703: LIST
68704: PPUSH
68705: LD_VAR 0 3
68709: PPUSH
68710: CALL 24858 0 3
68714: ST_TO_ADDR
// end ; wait ( 1 ) ;
68715: LD_INT 1
68717: PPUSH
68718: CALL_OW 67
// to_repair_tmp := mc_building_need_repair [ i ] ;
68722: LD_ADDR_VAR 0 7
68726: PUSH
68727: LD_EXP 51
68731: PUSH
68732: LD_VAR 0 2
68736: ARRAY
68737: ST_TO_ADDR
// if mc_scan [ i ] then
68738: LD_EXP 73
68742: PUSH
68743: LD_VAR 0 2
68747: ARRAY
68748: IFFALSE 68810
// to_repair_tmp := UnitFilter ( mc_building_need_repair [ i ] , [ f_not , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_breastwork ] ] ) ;
68750: LD_ADDR_VAR 0 7
68754: PUSH
68755: LD_EXP 51
68759: PUSH
68760: LD_VAR 0 2
68764: ARRAY
68765: PPUSH
68766: LD_INT 3
68768: PUSH
68769: LD_INT 30
68771: PUSH
68772: LD_INT 32
68774: PUSH
68775: EMPTY
68776: LIST
68777: LIST
68778: PUSH
68779: LD_INT 30
68781: PUSH
68782: LD_INT 33
68784: PUSH
68785: EMPTY
68786: LIST
68787: LIST
68788: PUSH
68789: LD_INT 30
68791: PUSH
68792: LD_INT 31
68794: PUSH
68795: EMPTY
68796: LIST
68797: LIST
68798: PUSH
68799: EMPTY
68800: LIST
68801: LIST
68802: LIST
68803: LIST
68804: PPUSH
68805: CALL_OW 72
68809: ST_TO_ADDR
// if not to_repair_tmp then
68810: LD_VAR 0 7
68814: NOT
68815: IFFALSE 68819
// continue ;
68817: GO 68617
// to_repair := NearestUnitToUnit ( to_repair_tmp , j ) ;
68819: LD_ADDR_VAR 0 8
68823: PUSH
68824: LD_VAR 0 7
68828: PPUSH
68829: LD_VAR 0 3
68833: PPUSH
68834: CALL_OW 74
68838: ST_TO_ADDR
// if DangerAtRange ( to_repair , 16 ) [ 4 ] < 10 then
68839: LD_VAR 0 8
68843: PPUSH
68844: LD_INT 16
68846: PPUSH
68847: CALL 27457 0 2
68851: PUSH
68852: LD_INT 4
68854: ARRAY
68855: PUSH
68856: LD_INT 10
68858: LESS
68859: IFFALSE 68875
// ComRepairBuilding ( j , to_repair ) ;
68861: LD_VAR 0 3
68865: PPUSH
68866: LD_VAR 0 8
68870: PPUSH
68871: CALL_OW 130
// end ;
68875: GO 68617
68877: POP
68878: POP
// end ;
68879: GO 68015
68881: POP
68882: POP
// end ;
68883: LD_VAR 0 1
68887: RET
// export function MC_Heal ; var i , j , tmp ; begin
68888: LD_INT 0
68890: PPUSH
68891: PPUSH
68892: PPUSH
68893: PPUSH
// if not mc_bases then
68894: LD_EXP 50
68898: NOT
68899: IFFALSE 68903
// exit ;
68901: GO 69305
// for i = 1 to mc_bases do
68903: LD_ADDR_VAR 0 2
68907: PUSH
68908: DOUBLE
68909: LD_INT 1
68911: DEC
68912: ST_TO_ADDR
68913: LD_EXP 50
68917: PUSH
68918: FOR_TO
68919: IFFALSE 69303
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
68921: LD_EXP 53
68925: PUSH
68926: LD_VAR 0 2
68930: ARRAY
68931: PUSH
68932: LD_INT 1
68934: ARRAY
68935: NOT
68936: PUSH
68937: LD_EXP 53
68941: PUSH
68942: LD_VAR 0 2
68946: ARRAY
68947: PUSH
68948: LD_INT 2
68950: ARRAY
68951: NOT
68952: AND
68953: IFFALSE 68991
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
68955: LD_ADDR_EXP 54
68959: PUSH
68960: LD_EXP 54
68964: PPUSH
68965: LD_VAR 0 2
68969: PPUSH
68970: EMPTY
68971: PPUSH
68972: CALL_OW 1
68976: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
68977: LD_VAR 0 2
68981: PPUSH
68982: LD_INT 102
68984: PPUSH
68985: CALL 63068 0 2
// continue ;
68989: GO 68918
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
68991: LD_ADDR_VAR 0 4
68995: PUSH
68996: LD_EXP 50
69000: PUSH
69001: LD_VAR 0 2
69005: ARRAY
69006: PPUSH
69007: LD_INT 25
69009: PUSH
69010: LD_INT 4
69012: PUSH
69013: EMPTY
69014: LIST
69015: LIST
69016: PPUSH
69017: CALL_OW 72
69021: ST_TO_ADDR
// if not tmp then
69022: LD_VAR 0 4
69026: NOT
69027: IFFALSE 69031
// continue ;
69029: GO 68918
// if mc_taming [ i ] then
69031: LD_EXP 81
69035: PUSH
69036: LD_VAR 0 2
69040: ARRAY
69041: IFFALSE 69065
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
69043: LD_ADDR_EXP 81
69047: PUSH
69048: LD_EXP 81
69052: PPUSH
69053: LD_VAR 0 2
69057: PPUSH
69058: EMPTY
69059: PPUSH
69060: CALL_OW 1
69064: ST_TO_ADDR
// for j in tmp do
69065: LD_ADDR_VAR 0 3
69069: PUSH
69070: LD_VAR 0 4
69074: PUSH
69075: FOR_IN
69076: IFFALSE 69299
// begin if IsInUnit ( j ) then
69078: LD_VAR 0 3
69082: PPUSH
69083: CALL_OW 310
69087: IFFALSE 69098
// ComExitBuilding ( j ) ;
69089: LD_VAR 0 3
69093: PPUSH
69094: CALL_OW 122
// if not j in mc_healers [ i ] then
69098: LD_VAR 0 3
69102: PUSH
69103: LD_EXP 54
69107: PUSH
69108: LD_VAR 0 2
69112: ARRAY
69113: IN
69114: NOT
69115: IFFALSE 69161
// mc_healers := ReplaceIn ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
69117: LD_ADDR_EXP 54
69121: PUSH
69122: LD_EXP 54
69126: PPUSH
69127: LD_VAR 0 2
69131: PUSH
69132: LD_EXP 54
69136: PUSH
69137: LD_VAR 0 2
69141: ARRAY
69142: PUSH
69143: LD_INT 1
69145: PLUS
69146: PUSH
69147: EMPTY
69148: LIST
69149: LIST
69150: PPUSH
69151: LD_VAR 0 3
69155: PPUSH
69156: CALL 24858 0 3
69160: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
69161: LD_VAR 0 3
69165: PPUSH
69166: CALL_OW 110
69170: PUSH
69171: LD_INT 102
69173: NONEQUAL
69174: IFFALSE 69188
// SetTag ( j , 102 ) ;
69176: LD_VAR 0 3
69180: PPUSH
69181: LD_INT 102
69183: PPUSH
69184: CALL_OW 109
// Wait ( 3 ) ;
69188: LD_INT 3
69190: PPUSH
69191: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
69195: LD_EXP 53
69199: PUSH
69200: LD_VAR 0 2
69204: ARRAY
69205: PUSH
69206: LD_INT 1
69208: ARRAY
69209: IFFALSE 69241
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
69211: LD_VAR 0 3
69215: PPUSH
69216: LD_EXP 53
69220: PUSH
69221: LD_VAR 0 2
69225: ARRAY
69226: PUSH
69227: LD_INT 1
69229: ARRAY
69230: PUSH
69231: LD_INT 1
69233: ARRAY
69234: PPUSH
69235: CALL_OW 128
69239: GO 69297
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
69241: LD_VAR 0 3
69245: PPUSH
69246: CALL_OW 314
69250: NOT
69251: PUSH
69252: LD_EXP 53
69256: PUSH
69257: LD_VAR 0 2
69261: ARRAY
69262: PUSH
69263: LD_INT 2
69265: ARRAY
69266: AND
69267: IFFALSE 69297
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
69269: LD_VAR 0 3
69273: PPUSH
69274: LD_EXP 53
69278: PUSH
69279: LD_VAR 0 2
69283: ARRAY
69284: PUSH
69285: LD_INT 2
69287: ARRAY
69288: PUSH
69289: LD_INT 1
69291: ARRAY
69292: PPUSH
69293: CALL_OW 128
// end ;
69297: GO 69075
69299: POP
69300: POP
// end ;
69301: GO 68918
69303: POP
69304: POP
// end ;
69305: LD_VAR 0 1
69309: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
69310: LD_INT 0
69312: PPUSH
69313: PPUSH
69314: PPUSH
69315: PPUSH
69316: PPUSH
// if not mc_bases then
69317: LD_EXP 50
69321: NOT
69322: IFFALSE 69326
// exit ;
69324: GO 70497
// for i = 1 to mc_bases do
69326: LD_ADDR_VAR 0 2
69330: PUSH
69331: DOUBLE
69332: LD_INT 1
69334: DEC
69335: ST_TO_ADDR
69336: LD_EXP 50
69340: PUSH
69341: FOR_TO
69342: IFFALSE 70495
// begin if mc_scan [ i ] then
69344: LD_EXP 73
69348: PUSH
69349: LD_VAR 0 2
69353: ARRAY
69354: IFFALSE 69358
// continue ;
69356: GO 69341
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
69358: LD_EXP 55
69362: PUSH
69363: LD_VAR 0 2
69367: ARRAY
69368: NOT
69369: PUSH
69370: LD_EXP 57
69374: PUSH
69375: LD_VAR 0 2
69379: ARRAY
69380: NOT
69381: AND
69382: PUSH
69383: LD_EXP 56
69387: PUSH
69388: LD_VAR 0 2
69392: ARRAY
69393: AND
69394: IFFALSE 69432
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
69396: LD_ADDR_EXP 56
69400: PUSH
69401: LD_EXP 56
69405: PPUSH
69406: LD_VAR 0 2
69410: PPUSH
69411: EMPTY
69412: PPUSH
69413: CALL_OW 1
69417: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
69418: LD_VAR 0 2
69422: PPUSH
69423: LD_INT 103
69425: PPUSH
69426: CALL 63068 0 2
// continue ;
69430: GO 69341
// end ; if mc_construct_list [ i ] then
69432: LD_EXP 57
69436: PUSH
69437: LD_VAR 0 2
69441: ARRAY
69442: IFFALSE 69662
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
69444: LD_ADDR_VAR 0 4
69448: PUSH
69449: LD_EXP 50
69453: PUSH
69454: LD_VAR 0 2
69458: ARRAY
69459: PPUSH
69460: LD_INT 25
69462: PUSH
69463: LD_INT 2
69465: PUSH
69466: EMPTY
69467: LIST
69468: LIST
69469: PPUSH
69470: CALL_OW 72
69474: PUSH
69475: LD_EXP 52
69479: PUSH
69480: LD_VAR 0 2
69484: ARRAY
69485: DIFF
69486: ST_TO_ADDR
// if not tmp then
69487: LD_VAR 0 4
69491: NOT
69492: IFFALSE 69496
// continue ;
69494: GO 69341
// for j in tmp do
69496: LD_ADDR_VAR 0 3
69500: PUSH
69501: LD_VAR 0 4
69505: PUSH
69506: FOR_IN
69507: IFFALSE 69658
// begin if not mc_builders [ i ] then
69509: LD_EXP 56
69513: PUSH
69514: LD_VAR 0 2
69518: ARRAY
69519: NOT
69520: IFFALSE 69578
// begin SetTag ( j , 103 ) ;
69522: LD_VAR 0 3
69526: PPUSH
69527: LD_INT 103
69529: PPUSH
69530: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
69534: LD_ADDR_EXP 56
69538: PUSH
69539: LD_EXP 56
69543: PPUSH
69544: LD_VAR 0 2
69548: PUSH
69549: LD_EXP 56
69553: PUSH
69554: LD_VAR 0 2
69558: ARRAY
69559: PUSH
69560: LD_INT 1
69562: PLUS
69563: PUSH
69564: EMPTY
69565: LIST
69566: LIST
69567: PPUSH
69568: LD_VAR 0 3
69572: PPUSH
69573: CALL 24858 0 3
69577: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
69578: LD_VAR 0 3
69582: PPUSH
69583: CALL_OW 310
69587: IFFALSE 69598
// ComExitBuilding ( j ) ;
69589: LD_VAR 0 3
69593: PPUSH
69594: CALL_OW 122
// wait ( 3 ) ;
69598: LD_INT 3
69600: PPUSH
69601: CALL_OW 67
// if not mc_construct_list [ i ] then
69605: LD_EXP 57
69609: PUSH
69610: LD_VAR 0 2
69614: ARRAY
69615: NOT
69616: IFFALSE 69620
// break ;
69618: GO 69658
// if not HasTask ( j ) then
69620: LD_VAR 0 3
69624: PPUSH
69625: CALL_OW 314
69629: NOT
69630: IFFALSE 69656
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
69632: LD_VAR 0 3
69636: PPUSH
69637: LD_EXP 57
69641: PUSH
69642: LD_VAR 0 2
69646: ARRAY
69647: PUSH
69648: LD_INT 1
69650: ARRAY
69651: PPUSH
69652: CALL 27721 0 2
// end ;
69656: GO 69506
69658: POP
69659: POP
// end else
69660: GO 70493
// if mc_build_list [ i ] then
69662: LD_EXP 55
69666: PUSH
69667: LD_VAR 0 2
69671: ARRAY
69672: IFFALSE 70493
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
69674: LD_ADDR_VAR 0 5
69678: PUSH
69679: LD_EXP 50
69683: PUSH
69684: LD_VAR 0 2
69688: ARRAY
69689: PPUSH
69690: LD_INT 2
69692: PUSH
69693: LD_INT 30
69695: PUSH
69696: LD_INT 0
69698: PUSH
69699: EMPTY
69700: LIST
69701: LIST
69702: PUSH
69703: LD_INT 30
69705: PUSH
69706: LD_INT 1
69708: PUSH
69709: EMPTY
69710: LIST
69711: LIST
69712: PUSH
69713: EMPTY
69714: LIST
69715: LIST
69716: LIST
69717: PPUSH
69718: CALL_OW 72
69722: ST_TO_ADDR
// if depot then
69723: LD_VAR 0 5
69727: IFFALSE 69745
// depot := depot [ 1 ] else
69729: LD_ADDR_VAR 0 5
69733: PUSH
69734: LD_VAR 0 5
69738: PUSH
69739: LD_INT 1
69741: ARRAY
69742: ST_TO_ADDR
69743: GO 69753
// depot := 0 ;
69745: LD_ADDR_VAR 0 5
69749: PUSH
69750: LD_INT 0
69752: ST_TO_ADDR
// if IsExtension ( mc_build_list [ i ] [ 1 ] [ 1 ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) then
69753: LD_EXP 55
69757: PUSH
69758: LD_VAR 0 2
69762: ARRAY
69763: PUSH
69764: LD_INT 1
69766: ARRAY
69767: PUSH
69768: LD_INT 1
69770: ARRAY
69771: PPUSH
69772: CALL 27545 0 1
69776: PUSH
69777: LD_EXP 50
69781: PUSH
69782: LD_VAR 0 2
69786: ARRAY
69787: PPUSH
69788: LD_INT 2
69790: PUSH
69791: LD_INT 30
69793: PUSH
69794: LD_INT 2
69796: PUSH
69797: EMPTY
69798: LIST
69799: LIST
69800: PUSH
69801: LD_INT 30
69803: PUSH
69804: LD_INT 3
69806: PUSH
69807: EMPTY
69808: LIST
69809: LIST
69810: PUSH
69811: EMPTY
69812: LIST
69813: LIST
69814: LIST
69815: PPUSH
69816: CALL_OW 72
69820: NOT
69821: AND
69822: IFFALSE 69927
// begin for j = 1 to mc_build_list [ i ] do
69824: LD_ADDR_VAR 0 3
69828: PUSH
69829: DOUBLE
69830: LD_INT 1
69832: DEC
69833: ST_TO_ADDR
69834: LD_EXP 55
69838: PUSH
69839: LD_VAR 0 2
69843: ARRAY
69844: PUSH
69845: FOR_TO
69846: IFFALSE 69925
// if mc_build_list [ i ] [ j ] [ 1 ] = b_workshop then
69848: LD_EXP 55
69852: PUSH
69853: LD_VAR 0 2
69857: ARRAY
69858: PUSH
69859: LD_VAR 0 3
69863: ARRAY
69864: PUSH
69865: LD_INT 1
69867: ARRAY
69868: PUSH
69869: LD_INT 2
69871: EQUAL
69872: IFFALSE 69923
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , j , 1 , false ) ) ;
69874: LD_ADDR_EXP 55
69878: PUSH
69879: LD_EXP 55
69883: PPUSH
69884: LD_VAR 0 2
69888: PPUSH
69889: LD_EXP 55
69893: PUSH
69894: LD_VAR 0 2
69898: ARRAY
69899: PPUSH
69900: LD_VAR 0 3
69904: PPUSH
69905: LD_INT 1
69907: PPUSH
69908: LD_INT 0
69910: PPUSH
69911: CALL 24276 0 4
69915: PPUSH
69916: CALL_OW 1
69920: ST_TO_ADDR
// break ;
69921: GO 69925
// end ;
69923: GO 69845
69925: POP
69926: POP
// end ; if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilt ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
69927: LD_EXP 55
69931: PUSH
69932: LD_VAR 0 2
69936: ARRAY
69937: PUSH
69938: LD_INT 1
69940: ARRAY
69941: PUSH
69942: LD_INT 1
69944: ARRAY
69945: PUSH
69946: LD_INT 0
69948: EQUAL
69949: PUSH
69950: LD_VAR 0 5
69954: PUSH
69955: LD_VAR 0 5
69959: PPUSH
69960: LD_EXP 55
69964: PUSH
69965: LD_VAR 0 2
69969: ARRAY
69970: PUSH
69971: LD_INT 1
69973: ARRAY
69974: PUSH
69975: LD_INT 1
69977: ARRAY
69978: PPUSH
69979: LD_EXP 55
69983: PUSH
69984: LD_VAR 0 2
69988: ARRAY
69989: PUSH
69990: LD_INT 1
69992: ARRAY
69993: PUSH
69994: LD_INT 2
69996: ARRAY
69997: PPUSH
69998: LD_EXP 55
70002: PUSH
70003: LD_VAR 0 2
70007: ARRAY
70008: PUSH
70009: LD_INT 1
70011: ARRAY
70012: PUSH
70013: LD_INT 3
70015: ARRAY
70016: PPUSH
70017: LD_EXP 55
70021: PUSH
70022: LD_VAR 0 2
70026: ARRAY
70027: PUSH
70028: LD_INT 1
70030: ARRAY
70031: PUSH
70032: LD_INT 4
70034: ARRAY
70035: PPUSH
70036: CALL 32961 0 5
70040: AND
70041: OR
70042: IFFALSE 70323
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
70044: LD_ADDR_VAR 0 4
70048: PUSH
70049: LD_EXP 50
70053: PUSH
70054: LD_VAR 0 2
70058: ARRAY
70059: PPUSH
70060: LD_INT 25
70062: PUSH
70063: LD_INT 2
70065: PUSH
70066: EMPTY
70067: LIST
70068: LIST
70069: PPUSH
70070: CALL_OW 72
70074: PUSH
70075: LD_EXP 52
70079: PUSH
70080: LD_VAR 0 2
70084: ARRAY
70085: DIFF
70086: ST_TO_ADDR
// if not tmp then
70087: LD_VAR 0 4
70091: NOT
70092: IFFALSE 70096
// continue ;
70094: GO 69341
// for j in tmp do
70096: LD_ADDR_VAR 0 3
70100: PUSH
70101: LD_VAR 0 4
70105: PUSH
70106: FOR_IN
70107: IFFALSE 70319
// begin if not mc_builders [ i ] then
70109: LD_EXP 56
70113: PUSH
70114: LD_VAR 0 2
70118: ARRAY
70119: NOT
70120: IFFALSE 70178
// begin SetTag ( j , 103 ) ;
70122: LD_VAR 0 3
70126: PPUSH
70127: LD_INT 103
70129: PPUSH
70130: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
70134: LD_ADDR_EXP 56
70138: PUSH
70139: LD_EXP 56
70143: PPUSH
70144: LD_VAR 0 2
70148: PUSH
70149: LD_EXP 56
70153: PUSH
70154: LD_VAR 0 2
70158: ARRAY
70159: PUSH
70160: LD_INT 1
70162: PLUS
70163: PUSH
70164: EMPTY
70165: LIST
70166: LIST
70167: PPUSH
70168: LD_VAR 0 3
70172: PPUSH
70173: CALL 24858 0 3
70177: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
70178: LD_VAR 0 3
70182: PPUSH
70183: CALL_OW 310
70187: IFFALSE 70198
// ComExitBuilding ( j ) ;
70189: LD_VAR 0 3
70193: PPUSH
70194: CALL_OW 122
// wait ( 3 ) ;
70198: LD_INT 3
70200: PPUSH
70201: CALL_OW 67
// if not mc_build_list [ i ] then
70205: LD_EXP 55
70209: PUSH
70210: LD_VAR 0 2
70214: ARRAY
70215: NOT
70216: IFFALSE 70220
// break ;
70218: GO 70319
// if not HasTask ( j ) then
70220: LD_VAR 0 3
70224: PPUSH
70225: CALL_OW 314
70229: NOT
70230: IFFALSE 70317
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
70232: LD_VAR 0 3
70236: PPUSH
70237: LD_EXP 55
70241: PUSH
70242: LD_VAR 0 2
70246: ARRAY
70247: PUSH
70248: LD_INT 1
70250: ARRAY
70251: PUSH
70252: LD_INT 1
70254: ARRAY
70255: PPUSH
70256: LD_EXP 55
70260: PUSH
70261: LD_VAR 0 2
70265: ARRAY
70266: PUSH
70267: LD_INT 1
70269: ARRAY
70270: PUSH
70271: LD_INT 2
70273: ARRAY
70274: PPUSH
70275: LD_EXP 55
70279: PUSH
70280: LD_VAR 0 2
70284: ARRAY
70285: PUSH
70286: LD_INT 1
70288: ARRAY
70289: PUSH
70290: LD_INT 3
70292: ARRAY
70293: PPUSH
70294: LD_EXP 55
70298: PUSH
70299: LD_VAR 0 2
70303: ARRAY
70304: PUSH
70305: LD_INT 1
70307: ARRAY
70308: PUSH
70309: LD_INT 4
70311: ARRAY
70312: PPUSH
70313: CALL_OW 145
// end ;
70317: GO 70106
70319: POP
70320: POP
// end else
70321: GO 70493
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] , UnitFilter ( mc_bases [ i ] , [ f_type , unit_building ] ) , [ ] ) then
70323: LD_EXP 50
70327: PUSH
70328: LD_VAR 0 2
70332: ARRAY
70333: PPUSH
70334: LD_EXP 55
70338: PUSH
70339: LD_VAR 0 2
70343: ARRAY
70344: PUSH
70345: LD_INT 1
70347: ARRAY
70348: PUSH
70349: LD_INT 1
70351: ARRAY
70352: PPUSH
70353: LD_EXP 55
70357: PUSH
70358: LD_VAR 0 2
70362: ARRAY
70363: PUSH
70364: LD_INT 1
70366: ARRAY
70367: PUSH
70368: LD_INT 2
70370: ARRAY
70371: PPUSH
70372: LD_EXP 55
70376: PUSH
70377: LD_VAR 0 2
70381: ARRAY
70382: PUSH
70383: LD_INT 1
70385: ARRAY
70386: PUSH
70387: LD_INT 3
70389: ARRAY
70390: PPUSH
70391: LD_EXP 55
70395: PUSH
70396: LD_VAR 0 2
70400: ARRAY
70401: PUSH
70402: LD_INT 1
70404: ARRAY
70405: PUSH
70406: LD_INT 4
70408: ARRAY
70409: PPUSH
70410: LD_EXP 50
70414: PUSH
70415: LD_VAR 0 2
70419: ARRAY
70420: PPUSH
70421: LD_INT 21
70423: PUSH
70424: LD_INT 3
70426: PUSH
70427: EMPTY
70428: LIST
70429: LIST
70430: PPUSH
70431: CALL_OW 72
70435: PPUSH
70436: EMPTY
70437: PPUSH
70438: CALL 31711 0 7
70442: NOT
70443: IFFALSE 70493
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
70445: LD_ADDR_EXP 55
70449: PUSH
70450: LD_EXP 55
70454: PPUSH
70455: LD_VAR 0 2
70459: PPUSH
70460: LD_EXP 55
70464: PUSH
70465: LD_VAR 0 2
70469: ARRAY
70470: PPUSH
70471: LD_INT 1
70473: PPUSH
70474: LD_INT 1
70476: NEG
70477: PPUSH
70478: LD_INT 0
70480: PPUSH
70481: CALL 24276 0 4
70485: PPUSH
70486: CALL_OW 1
70490: ST_TO_ADDR
// continue ;
70491: GO 69341
// end ; end ; end ;
70493: GO 69341
70495: POP
70496: POP
// end ;
70497: LD_VAR 0 1
70501: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
70502: LD_INT 0
70504: PPUSH
70505: PPUSH
70506: PPUSH
70507: PPUSH
70508: PPUSH
70509: PPUSH
// if not mc_bases then
70510: LD_EXP 50
70514: NOT
70515: IFFALSE 70519
// exit ;
70517: GO 70946
// for i = 1 to mc_bases do
70519: LD_ADDR_VAR 0 2
70523: PUSH
70524: DOUBLE
70525: LD_INT 1
70527: DEC
70528: ST_TO_ADDR
70529: LD_EXP 50
70533: PUSH
70534: FOR_TO
70535: IFFALSE 70944
// begin tmp := mc_build_upgrade [ i ] ;
70537: LD_ADDR_VAR 0 4
70541: PUSH
70542: LD_EXP 82
70546: PUSH
70547: LD_VAR 0 2
70551: ARRAY
70552: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
70553: LD_ADDR_VAR 0 6
70557: PUSH
70558: LD_EXP 83
70562: PUSH
70563: LD_VAR 0 2
70567: ARRAY
70568: PPUSH
70569: LD_INT 2
70571: PUSH
70572: LD_INT 30
70574: PUSH
70575: LD_INT 6
70577: PUSH
70578: EMPTY
70579: LIST
70580: LIST
70581: PUSH
70582: LD_INT 30
70584: PUSH
70585: LD_INT 7
70587: PUSH
70588: EMPTY
70589: LIST
70590: LIST
70591: PUSH
70592: EMPTY
70593: LIST
70594: LIST
70595: LIST
70596: PPUSH
70597: CALL_OW 72
70601: ST_TO_ADDR
// if not tmp and not lab then
70602: LD_VAR 0 4
70606: NOT
70607: PUSH
70608: LD_VAR 0 6
70612: NOT
70613: AND
70614: IFFALSE 70618
// continue ;
70616: GO 70534
// if tmp then
70618: LD_VAR 0 4
70622: IFFALSE 70742
// for j in tmp do
70624: LD_ADDR_VAR 0 3
70628: PUSH
70629: LD_VAR 0 4
70633: PUSH
70634: FOR_IN
70635: IFFALSE 70740
// begin if UpgradeCost ( j ) then
70637: LD_VAR 0 3
70641: PPUSH
70642: CALL 31371 0 1
70646: IFFALSE 70738
// begin ComUpgrade ( j ) ;
70648: LD_VAR 0 3
70652: PPUSH
70653: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
70657: LD_ADDR_EXP 82
70661: PUSH
70662: LD_EXP 82
70666: PPUSH
70667: LD_VAR 0 2
70671: PPUSH
70672: LD_EXP 82
70676: PUSH
70677: LD_VAR 0 2
70681: ARRAY
70682: PUSH
70683: LD_VAR 0 3
70687: DIFF
70688: PPUSH
70689: CALL_OW 1
70693: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
70694: LD_ADDR_EXP 57
70698: PUSH
70699: LD_EXP 57
70703: PPUSH
70704: LD_VAR 0 2
70708: PUSH
70709: LD_EXP 57
70713: PUSH
70714: LD_VAR 0 2
70718: ARRAY
70719: PUSH
70720: LD_INT 1
70722: PLUS
70723: PUSH
70724: EMPTY
70725: LIST
70726: LIST
70727: PPUSH
70728: LD_VAR 0 3
70732: PPUSH
70733: CALL 24858 0 3
70737: ST_TO_ADDR
// end ; end ;
70738: GO 70634
70740: POP
70741: POP
// if not lab or not mc_lab_upgrade [ i ] then
70742: LD_VAR 0 6
70746: NOT
70747: PUSH
70748: LD_EXP 84
70752: PUSH
70753: LD_VAR 0 2
70757: ARRAY
70758: NOT
70759: OR
70760: IFFALSE 70764
// continue ;
70762: GO 70534
// for j in lab do
70764: LD_ADDR_VAR 0 3
70768: PUSH
70769: LD_VAR 0 6
70773: PUSH
70774: FOR_IN
70775: IFFALSE 70940
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
70777: LD_VAR 0 3
70781: PPUSH
70782: CALL_OW 266
70786: PUSH
70787: LD_INT 6
70789: PUSH
70790: LD_INT 7
70792: PUSH
70793: EMPTY
70794: LIST
70795: LIST
70796: IN
70797: PUSH
70798: LD_VAR 0 3
70802: PPUSH
70803: CALL_OW 461
70807: PUSH
70808: LD_INT 1
70810: NONEQUAL
70811: AND
70812: IFFALSE 70938
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
70814: LD_VAR 0 3
70818: PPUSH
70819: LD_EXP 84
70823: PUSH
70824: LD_VAR 0 2
70828: ARRAY
70829: PUSH
70830: LD_INT 1
70832: ARRAY
70833: PPUSH
70834: CALL 31576 0 2
70838: IFFALSE 70938
// begin ComCancel ( j ) ;
70840: LD_VAR 0 3
70844: PPUSH
70845: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
70849: LD_VAR 0 3
70853: PPUSH
70854: LD_EXP 84
70858: PUSH
70859: LD_VAR 0 2
70863: ARRAY
70864: PUSH
70865: LD_INT 1
70867: ARRAY
70868: PPUSH
70869: CALL_OW 207
// if not j in mc_construct_list [ i ] then
70873: LD_VAR 0 3
70877: PUSH
70878: LD_EXP 57
70882: PUSH
70883: LD_VAR 0 2
70887: ARRAY
70888: IN
70889: NOT
70890: IFFALSE 70936
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
70892: LD_ADDR_EXP 57
70896: PUSH
70897: LD_EXP 57
70901: PPUSH
70902: LD_VAR 0 2
70906: PUSH
70907: LD_EXP 57
70911: PUSH
70912: LD_VAR 0 2
70916: ARRAY
70917: PUSH
70918: LD_INT 1
70920: PLUS
70921: PUSH
70922: EMPTY
70923: LIST
70924: LIST
70925: PPUSH
70926: LD_VAR 0 3
70930: PPUSH
70931: CALL 24858 0 3
70935: ST_TO_ADDR
// break ;
70936: GO 70940
// end ; end ; end ;
70938: GO 70774
70940: POP
70941: POP
// end ;
70942: GO 70534
70944: POP
70945: POP
// end ;
70946: LD_VAR 0 1
70950: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , tmp2 , t , tw , busy , weapon ; begin
70951: LD_INT 0
70953: PPUSH
70954: PPUSH
70955: PPUSH
70956: PPUSH
70957: PPUSH
70958: PPUSH
70959: PPUSH
70960: PPUSH
70961: PPUSH
// if not mc_bases then
70962: LD_EXP 50
70966: NOT
70967: IFFALSE 70971
// exit ;
70969: GO 71376
// for i = 1 to mc_bases do
70971: LD_ADDR_VAR 0 2
70975: PUSH
70976: DOUBLE
70977: LD_INT 1
70979: DEC
70980: ST_TO_ADDR
70981: LD_EXP 50
70985: PUSH
70986: FOR_TO
70987: IFFALSE 71374
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
70989: LD_EXP 58
70993: PUSH
70994: LD_VAR 0 2
70998: ARRAY
70999: NOT
71000: PUSH
71001: LD_EXP 50
71005: PUSH
71006: LD_VAR 0 2
71010: ARRAY
71011: PPUSH
71012: LD_INT 30
71014: PUSH
71015: LD_INT 3
71017: PUSH
71018: EMPTY
71019: LIST
71020: LIST
71021: PPUSH
71022: CALL_OW 72
71026: NOT
71027: OR
71028: IFFALSE 71032
// continue ;
71030: GO 70986
// busy := false ;
71032: LD_ADDR_VAR 0 8
71036: PUSH
71037: LD_INT 0
71039: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
71040: LD_ADDR_VAR 0 4
71044: PUSH
71045: LD_EXP 50
71049: PUSH
71050: LD_VAR 0 2
71054: ARRAY
71055: PPUSH
71056: LD_INT 30
71058: PUSH
71059: LD_INT 3
71061: PUSH
71062: EMPTY
71063: LIST
71064: LIST
71065: PPUSH
71066: CALL_OW 72
71070: ST_TO_ADDR
// t := UnitFilter ( mc_turret_list [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ;
71071: LD_ADDR_VAR 0 6
71075: PUSH
71076: LD_EXP 58
71080: PUSH
71081: LD_VAR 0 2
71085: ARRAY
71086: PPUSH
71087: LD_INT 2
71089: PUSH
71090: LD_INT 30
71092: PUSH
71093: LD_INT 32
71095: PUSH
71096: EMPTY
71097: LIST
71098: LIST
71099: PUSH
71100: LD_INT 30
71102: PUSH
71103: LD_INT 33
71105: PUSH
71106: EMPTY
71107: LIST
71108: LIST
71109: PUSH
71110: EMPTY
71111: LIST
71112: LIST
71113: LIST
71114: PPUSH
71115: CALL_OW 72
71119: ST_TO_ADDR
// if not t then
71120: LD_VAR 0 6
71124: NOT
71125: IFFALSE 71129
// continue ;
71127: GO 70986
// for j in tmp do
71129: LD_ADDR_VAR 0 3
71133: PUSH
71134: LD_VAR 0 4
71138: PUSH
71139: FOR_IN
71140: IFFALSE 71170
// if not BuildingStatus ( j ) = bs_idle then
71142: LD_VAR 0 3
71146: PPUSH
71147: CALL_OW 461
71151: PUSH
71152: LD_INT 2
71154: EQUAL
71155: NOT
71156: IFFALSE 71168
// begin busy := true ;
71158: LD_ADDR_VAR 0 8
71162: PUSH
71163: LD_INT 1
71165: ST_TO_ADDR
// break ;
71166: GO 71170
// end ;
71168: GO 71139
71170: POP
71171: POP
// if busy then
71172: LD_VAR 0 8
71176: IFFALSE 71180
// continue ;
71178: GO 70986
// tw := UnitFilter ( t , [ f_bweapon , 0 ] ) ;
71180: LD_ADDR_VAR 0 7
71184: PUSH
71185: LD_VAR 0 6
71189: PPUSH
71190: LD_INT 35
71192: PUSH
71193: LD_INT 0
71195: PUSH
71196: EMPTY
71197: LIST
71198: LIST
71199: PPUSH
71200: CALL_OW 72
71204: ST_TO_ADDR
// if tw then
71205: LD_VAR 0 7
71209: IFFALSE 71286
// begin tw := tw [ 1 ] ;
71211: LD_ADDR_VAR 0 7
71215: PUSH
71216: LD_VAR 0 7
71220: PUSH
71221: LD_INT 1
71223: ARRAY
71224: ST_TO_ADDR
// weapon := GetTurretWeapon ( tw , mc_scan_area [ i ] ) ;
71225: LD_ADDR_VAR 0 9
71229: PUSH
71230: LD_VAR 0 7
71234: PPUSH
71235: LD_EXP 75
71239: PUSH
71240: LD_VAR 0 2
71244: ARRAY
71245: PPUSH
71246: CALL 29868 0 2
71250: ST_TO_ADDR
// if mc_allowed_tower_weapons [ i ] then
71251: LD_EXP 89
71255: PUSH
71256: LD_VAR 0 2
71260: ARRAY
71261: IFFALSE 71284
// if not weapon in mc_allowed_tower_weapons [ i ] then
71263: LD_VAR 0 9
71267: PUSH
71268: LD_EXP 89
71272: PUSH
71273: LD_VAR 0 2
71277: ARRAY
71278: IN
71279: NOT
71280: IFFALSE 71284
// continue ;
71282: GO 70986
// end else
71284: GO 71349
// begin tmp2 := UpgradeTurretsWeapon ( mc_turret_list [ i ] , tmp ) ;
71286: LD_ADDR_VAR 0 5
71290: PUSH
71291: LD_EXP 58
71295: PUSH
71296: LD_VAR 0 2
71300: ARRAY
71301: PPUSH
71302: LD_VAR 0 4
71306: PPUSH
71307: CALL 56157 0 2
71311: ST_TO_ADDR
// if not tmp2 then
71312: LD_VAR 0 5
71316: NOT
71317: IFFALSE 71321
// continue ;
71319: GO 70986
// tw := tmp2 [ 1 ] ;
71321: LD_ADDR_VAR 0 7
71325: PUSH
71326: LD_VAR 0 5
71330: PUSH
71331: LD_INT 1
71333: ARRAY
71334: ST_TO_ADDR
// weapon := tmp2 [ 2 ] ;
71335: LD_ADDR_VAR 0 9
71339: PUSH
71340: LD_VAR 0 5
71344: PUSH
71345: LD_INT 2
71347: ARRAY
71348: ST_TO_ADDR
// end ; if not weapon then
71349: LD_VAR 0 9
71353: NOT
71354: IFFALSE 71358
// continue ;
71356: GO 70986
// ComPlaceWeapon ( tw , weapon ) ;
71358: LD_VAR 0 7
71362: PPUSH
71363: LD_VAR 0 9
71367: PPUSH
71368: CALL_OW 148
// end ;
71372: GO 70986
71374: POP
71375: POP
// end ;
71376: LD_VAR 0 1
71380: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list , r ; begin
71381: LD_INT 0
71383: PPUSH
71384: PPUSH
71385: PPUSH
71386: PPUSH
71387: PPUSH
71388: PPUSH
71389: PPUSH
// if not mc_bases then
71390: LD_EXP 50
71394: NOT
71395: IFFALSE 71399
// exit ;
71397: GO 72167
// for i = 1 to mc_bases do
71399: LD_ADDR_VAR 0 2
71403: PUSH
71404: DOUBLE
71405: LD_INT 1
71407: DEC
71408: ST_TO_ADDR
71409: LD_EXP 50
71413: PUSH
71414: FOR_TO
71415: IFFALSE 72165
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] or mc_scan [ i ] then
71417: LD_EXP 63
71421: PUSH
71422: LD_VAR 0 2
71426: ARRAY
71427: NOT
71428: PUSH
71429: LD_EXP 63
71433: PUSH
71434: LD_VAR 0 2
71438: ARRAY
71439: PUSH
71440: LD_EXP 64
71444: PUSH
71445: LD_VAR 0 2
71449: ARRAY
71450: EQUAL
71451: OR
71452: PUSH
71453: LD_EXP 73
71457: PUSH
71458: LD_VAR 0 2
71462: ARRAY
71463: OR
71464: IFFALSE 71468
// continue ;
71466: GO 71414
// if mc_miners [ i ] then
71468: LD_EXP 64
71472: PUSH
71473: LD_VAR 0 2
71477: ARRAY
71478: IFFALSE 71852
// begin for j = mc_miners [ i ] downto 1 do
71480: LD_ADDR_VAR 0 3
71484: PUSH
71485: DOUBLE
71486: LD_EXP 64
71490: PUSH
71491: LD_VAR 0 2
71495: ARRAY
71496: INC
71497: ST_TO_ADDR
71498: LD_INT 1
71500: PUSH
71501: FOR_DOWNTO
71502: IFFALSE 71850
// begin if IsDead ( mc_miners [ i ] [ j ] ) or GetClass ( mc_miners [ i ] [ j ] ) <> 1 then
71504: LD_EXP 64
71508: PUSH
71509: LD_VAR 0 2
71513: ARRAY
71514: PUSH
71515: LD_VAR 0 3
71519: ARRAY
71520: PPUSH
71521: CALL_OW 301
71525: PUSH
71526: LD_EXP 64
71530: PUSH
71531: LD_VAR 0 2
71535: ARRAY
71536: PUSH
71537: LD_VAR 0 3
71541: ARRAY
71542: PPUSH
71543: CALL_OW 257
71547: PUSH
71548: LD_INT 1
71550: NONEQUAL
71551: OR
71552: IFFALSE 71615
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
71554: LD_ADDR_VAR 0 5
71558: PUSH
71559: LD_EXP 64
71563: PUSH
71564: LD_VAR 0 2
71568: ARRAY
71569: PUSH
71570: LD_EXP 64
71574: PUSH
71575: LD_VAR 0 2
71579: ARRAY
71580: PUSH
71581: LD_VAR 0 3
71585: ARRAY
71586: DIFF
71587: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
71588: LD_ADDR_EXP 64
71592: PUSH
71593: LD_EXP 64
71597: PPUSH
71598: LD_VAR 0 2
71602: PPUSH
71603: LD_VAR 0 5
71607: PPUSH
71608: CALL_OW 1
71612: ST_TO_ADDR
// continue ;
71613: GO 71501
// end ; if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and not HasTask ( mc_miners [ i ] [ j ] ) then
71615: LD_EXP 64
71619: PUSH
71620: LD_VAR 0 2
71624: ARRAY
71625: PUSH
71626: LD_VAR 0 3
71630: ARRAY
71631: PPUSH
71632: CALL_OW 257
71636: PUSH
71637: LD_INT 1
71639: EQUAL
71640: PUSH
71641: LD_EXP 64
71645: PUSH
71646: LD_VAR 0 2
71650: ARRAY
71651: PUSH
71652: LD_VAR 0 3
71656: ARRAY
71657: PPUSH
71658: CALL_OW 459
71662: NOT
71663: AND
71664: PUSH
71665: LD_EXP 64
71669: PUSH
71670: LD_VAR 0 2
71674: ARRAY
71675: PUSH
71676: LD_VAR 0 3
71680: ARRAY
71681: PPUSH
71682: CALL_OW 314
71686: NOT
71687: AND
71688: IFFALSE 71848
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
71690: LD_EXP 64
71694: PUSH
71695: LD_VAR 0 2
71699: ARRAY
71700: PUSH
71701: LD_VAR 0 3
71705: ARRAY
71706: PPUSH
71707: CALL_OW 310
71711: IFFALSE 71734
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
71713: LD_EXP 64
71717: PUSH
71718: LD_VAR 0 2
71722: ARRAY
71723: PUSH
71724: LD_VAR 0 3
71728: ARRAY
71729: PPUSH
71730: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
71734: LD_EXP 64
71738: PUSH
71739: LD_VAR 0 2
71743: ARRAY
71744: PUSH
71745: LD_VAR 0 3
71749: ARRAY
71750: PPUSH
71751: CALL_OW 314
71755: NOT
71756: IFFALSE 71848
// begin r := rand ( 1 , mc_mines [ i ] ) ;
71758: LD_ADDR_VAR 0 7
71762: PUSH
71763: LD_INT 1
71765: PPUSH
71766: LD_EXP 63
71770: PUSH
71771: LD_VAR 0 2
71775: ARRAY
71776: PPUSH
71777: CALL_OW 12
71781: ST_TO_ADDR
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ r ] [ 1 ] , mc_mines [ i ] [ r ] [ 2 ] , 0 ) ;
71782: LD_EXP 64
71786: PUSH
71787: LD_VAR 0 2
71791: ARRAY
71792: PUSH
71793: LD_VAR 0 3
71797: ARRAY
71798: PPUSH
71799: LD_EXP 63
71803: PUSH
71804: LD_VAR 0 2
71808: ARRAY
71809: PUSH
71810: LD_VAR 0 7
71814: ARRAY
71815: PUSH
71816: LD_INT 1
71818: ARRAY
71819: PPUSH
71820: LD_EXP 63
71824: PUSH
71825: LD_VAR 0 2
71829: ARRAY
71830: PUSH
71831: LD_VAR 0 7
71835: ARRAY
71836: PUSH
71837: LD_INT 2
71839: ARRAY
71840: PPUSH
71841: LD_INT 0
71843: PPUSH
71844: CALL_OW 193
// end ; end ; end ;
71848: GO 71501
71850: POP
71851: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
71852: LD_ADDR_VAR 0 5
71856: PUSH
71857: LD_EXP 50
71861: PUSH
71862: LD_VAR 0 2
71866: ARRAY
71867: PPUSH
71868: LD_INT 2
71870: PUSH
71871: LD_INT 30
71873: PUSH
71874: LD_INT 4
71876: PUSH
71877: EMPTY
71878: LIST
71879: LIST
71880: PUSH
71881: LD_INT 30
71883: PUSH
71884: LD_INT 5
71886: PUSH
71887: EMPTY
71888: LIST
71889: LIST
71890: PUSH
71891: LD_INT 30
71893: PUSH
71894: LD_INT 32
71896: PUSH
71897: EMPTY
71898: LIST
71899: LIST
71900: PUSH
71901: EMPTY
71902: LIST
71903: LIST
71904: LIST
71905: LIST
71906: PPUSH
71907: CALL_OW 72
71911: ST_TO_ADDR
// if not tmp then
71912: LD_VAR 0 5
71916: NOT
71917: IFFALSE 71921
// continue ;
71919: GO 71414
// list := [ ] ;
71921: LD_ADDR_VAR 0 6
71925: PUSH
71926: EMPTY
71927: ST_TO_ADDR
// for j in tmp do
71928: LD_ADDR_VAR 0 3
71932: PUSH
71933: LD_VAR 0 5
71937: PUSH
71938: FOR_IN
71939: IFFALSE 72008
// begin for k in UnitsInside ( j ) do
71941: LD_ADDR_VAR 0 4
71945: PUSH
71946: LD_VAR 0 3
71950: PPUSH
71951: CALL_OW 313
71955: PUSH
71956: FOR_IN
71957: IFFALSE 72004
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
71959: LD_VAR 0 4
71963: PPUSH
71964: CALL_OW 257
71968: PUSH
71969: LD_INT 1
71971: EQUAL
71972: PUSH
71973: LD_VAR 0 4
71977: PPUSH
71978: CALL_OW 459
71982: NOT
71983: AND
71984: IFFALSE 72002
// list := list ^ k ;
71986: LD_ADDR_VAR 0 6
71990: PUSH
71991: LD_VAR 0 6
71995: PUSH
71996: LD_VAR 0 4
72000: ADD
72001: ST_TO_ADDR
72002: GO 71956
72004: POP
72005: POP
// end ;
72006: GO 71938
72008: POP
72009: POP
// list := list diff mc_miners [ i ] ;
72010: LD_ADDR_VAR 0 6
72014: PUSH
72015: LD_VAR 0 6
72019: PUSH
72020: LD_EXP 64
72024: PUSH
72025: LD_VAR 0 2
72029: ARRAY
72030: DIFF
72031: ST_TO_ADDR
// if not list then
72032: LD_VAR 0 6
72036: NOT
72037: IFFALSE 72041
// continue ;
72039: GO 71414
// k := mc_mines [ i ] - mc_miners [ i ] ;
72041: LD_ADDR_VAR 0 4
72045: PUSH
72046: LD_EXP 63
72050: PUSH
72051: LD_VAR 0 2
72055: ARRAY
72056: PUSH
72057: LD_EXP 64
72061: PUSH
72062: LD_VAR 0 2
72066: ARRAY
72067: MINUS
72068: ST_TO_ADDR
// if k > list then
72069: LD_VAR 0 4
72073: PUSH
72074: LD_VAR 0 6
72078: GREATER
72079: IFFALSE 72091
// k := list ;
72081: LD_ADDR_VAR 0 4
72085: PUSH
72086: LD_VAR 0 6
72090: ST_TO_ADDR
// for j = 1 to k do
72091: LD_ADDR_VAR 0 3
72095: PUSH
72096: DOUBLE
72097: LD_INT 1
72099: DEC
72100: ST_TO_ADDR
72101: LD_VAR 0 4
72105: PUSH
72106: FOR_TO
72107: IFFALSE 72161
// mc_miners := ReplaceIn ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
72109: LD_ADDR_EXP 64
72113: PUSH
72114: LD_EXP 64
72118: PPUSH
72119: LD_VAR 0 2
72123: PUSH
72124: LD_EXP 64
72128: PUSH
72129: LD_VAR 0 2
72133: ARRAY
72134: PUSH
72135: LD_INT 1
72137: PLUS
72138: PUSH
72139: EMPTY
72140: LIST
72141: LIST
72142: PPUSH
72143: LD_VAR 0 6
72147: PUSH
72148: LD_VAR 0 3
72152: ARRAY
72153: PPUSH
72154: CALL 24858 0 3
72158: ST_TO_ADDR
72159: GO 72106
72161: POP
72162: POP
// end ;
72163: GO 71414
72165: POP
72166: POP
// end ;
72167: LD_VAR 0 1
72171: RET
// export function MC_CollectCrates ( ) ; var i , j , k , tmp , side , target , cargo , depot , fac , components ; begin
72172: LD_INT 0
72174: PPUSH
72175: PPUSH
72176: PPUSH
72177: PPUSH
72178: PPUSH
72179: PPUSH
72180: PPUSH
72181: PPUSH
72182: PPUSH
72183: PPUSH
72184: PPUSH
// if not mc_bases then
72185: LD_EXP 50
72189: NOT
72190: IFFALSE 72194
// exit ;
72192: GO 74017
// for i = 1 to mc_bases do
72194: LD_ADDR_VAR 0 2
72198: PUSH
72199: DOUBLE
72200: LD_INT 1
72202: DEC
72203: ST_TO_ADDR
72204: LD_EXP 50
72208: PUSH
72209: FOR_TO
72210: IFFALSE 74015
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
72212: LD_EXP 50
72216: PUSH
72217: LD_VAR 0 2
72221: ARRAY
72222: NOT
72223: PUSH
72224: LD_EXP 57
72228: PUSH
72229: LD_VAR 0 2
72233: ARRAY
72234: OR
72235: IFFALSE 72239
// continue ;
72237: GO 72209
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
72239: LD_EXP 66
72243: PUSH
72244: LD_VAR 0 2
72248: ARRAY
72249: NOT
72250: PUSH
72251: LD_EXP 67
72255: PUSH
72256: LD_VAR 0 2
72260: ARRAY
72261: AND
72262: IFFALSE 72300
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
72264: LD_ADDR_EXP 67
72268: PUSH
72269: LD_EXP 67
72273: PPUSH
72274: LD_VAR 0 2
72278: PPUSH
72279: EMPTY
72280: PPUSH
72281: CALL_OW 1
72285: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
72286: LD_VAR 0 2
72290: PPUSH
72291: LD_INT 107
72293: PPUSH
72294: CALL 63068 0 2
// continue ;
72298: GO 72209
// end ; target := [ ] ;
72300: LD_ADDR_VAR 0 7
72304: PUSH
72305: EMPTY
72306: ST_TO_ADDR
// side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
72307: LD_ADDR_VAR 0 6
72311: PUSH
72312: LD_EXP 50
72316: PUSH
72317: LD_VAR 0 2
72321: ARRAY
72322: PUSH
72323: LD_INT 1
72325: ARRAY
72326: PPUSH
72327: CALL_OW 255
72331: ST_TO_ADDR
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
72332: LD_ADDR_VAR 0 9
72336: PUSH
72337: LD_EXP 50
72341: PUSH
72342: LD_VAR 0 2
72346: ARRAY
72347: PPUSH
72348: LD_INT 2
72350: PUSH
72351: LD_INT 30
72353: PUSH
72354: LD_INT 0
72356: PUSH
72357: EMPTY
72358: LIST
72359: LIST
72360: PUSH
72361: LD_INT 30
72363: PUSH
72364: LD_INT 1
72366: PUSH
72367: EMPTY
72368: LIST
72369: LIST
72370: PUSH
72371: EMPTY
72372: LIST
72373: LIST
72374: LIST
72375: PPUSH
72376: CALL_OW 72
72380: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
72381: LD_ADDR_VAR 0 3
72385: PUSH
72386: DOUBLE
72387: LD_EXP 66
72391: PUSH
72392: LD_VAR 0 2
72396: ARRAY
72397: INC
72398: ST_TO_ADDR
72399: LD_INT 1
72401: PUSH
72402: FOR_DOWNTO
72403: IFFALSE 72648
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
72405: LD_EXP 66
72409: PUSH
72410: LD_VAR 0 2
72414: ARRAY
72415: PUSH
72416: LD_VAR 0 3
72420: ARRAY
72421: PUSH
72422: LD_INT 2
72424: ARRAY
72425: PPUSH
72426: LD_EXP 66
72430: PUSH
72431: LD_VAR 0 2
72435: ARRAY
72436: PUSH
72437: LD_VAR 0 3
72441: ARRAY
72442: PUSH
72443: LD_INT 3
72445: ARRAY
72446: PPUSH
72447: CALL_OW 488
72451: PUSH
72452: LD_EXP 66
72456: PUSH
72457: LD_VAR 0 2
72461: ARRAY
72462: PUSH
72463: LD_VAR 0 3
72467: ARRAY
72468: PUSH
72469: LD_INT 2
72471: ARRAY
72472: PPUSH
72473: LD_EXP 66
72477: PUSH
72478: LD_VAR 0 2
72482: ARRAY
72483: PUSH
72484: LD_VAR 0 3
72488: ARRAY
72489: PUSH
72490: LD_INT 3
72492: ARRAY
72493: PPUSH
72494: CALL_OW 284
72498: PUSH
72499: LD_INT 0
72501: EQUAL
72502: AND
72503: IFFALSE 72558
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
72505: LD_ADDR_VAR 0 5
72509: PUSH
72510: LD_EXP 66
72514: PUSH
72515: LD_VAR 0 2
72519: ARRAY
72520: PPUSH
72521: LD_VAR 0 3
72525: PPUSH
72526: CALL_OW 3
72530: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
72531: LD_ADDR_EXP 66
72535: PUSH
72536: LD_EXP 66
72540: PPUSH
72541: LD_VAR 0 2
72545: PPUSH
72546: LD_VAR 0 5
72550: PPUSH
72551: CALL_OW 1
72555: ST_TO_ADDR
// continue ;
72556: GO 72402
// end ; if DangerAtRangeXY ( side , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 30 ) [ 4 ] = 0 then
72558: LD_VAR 0 6
72562: PPUSH
72563: LD_EXP 66
72567: PUSH
72568: LD_VAR 0 2
72572: ARRAY
72573: PUSH
72574: LD_VAR 0 3
72578: ARRAY
72579: PUSH
72580: LD_INT 2
72582: ARRAY
72583: PPUSH
72584: LD_EXP 66
72588: PUSH
72589: LD_VAR 0 2
72593: ARRAY
72594: PUSH
72595: LD_VAR 0 3
72599: ARRAY
72600: PUSH
72601: LD_INT 3
72603: ARRAY
72604: PPUSH
72605: LD_INT 30
72607: PPUSH
72608: CALL 25754 0 4
72612: PUSH
72613: LD_INT 4
72615: ARRAY
72616: PUSH
72617: LD_INT 0
72619: EQUAL
72620: IFFALSE 72646
// begin target := mc_crates [ i ] [ j ] ;
72622: LD_ADDR_VAR 0 7
72626: PUSH
72627: LD_EXP 66
72631: PUSH
72632: LD_VAR 0 2
72636: ARRAY
72637: PUSH
72638: LD_VAR 0 3
72642: ARRAY
72643: ST_TO_ADDR
// break ;
72644: GO 72648
// end ; end ;
72646: GO 72402
72648: POP
72649: POP
// if not target then
72650: LD_VAR 0 7
72654: NOT
72655: IFFALSE 72659
// continue ;
72657: GO 72209
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
72659: LD_ADDR_VAR 0 8
72663: PUSH
72664: LD_EXP 69
72668: PUSH
72669: LD_VAR 0 2
72673: ARRAY
72674: PPUSH
72675: LD_INT 2
72677: PUSH
72678: LD_INT 3
72680: PUSH
72681: LD_INT 58
72683: PUSH
72684: EMPTY
72685: LIST
72686: PUSH
72687: EMPTY
72688: LIST
72689: LIST
72690: PUSH
72691: LD_INT 61
72693: PUSH
72694: EMPTY
72695: LIST
72696: PUSH
72697: LD_INT 33
72699: PUSH
72700: LD_INT 5
72702: PUSH
72703: EMPTY
72704: LIST
72705: LIST
72706: PUSH
72707: LD_INT 33
72709: PUSH
72710: LD_INT 3
72712: PUSH
72713: EMPTY
72714: LIST
72715: LIST
72716: PUSH
72717: EMPTY
72718: LIST
72719: LIST
72720: LIST
72721: LIST
72722: LIST
72723: PUSH
72724: LD_INT 2
72726: PUSH
72727: LD_INT 34
72729: PUSH
72730: LD_INT 32
72732: PUSH
72733: EMPTY
72734: LIST
72735: LIST
72736: PUSH
72737: LD_INT 34
72739: PUSH
72740: LD_INT 51
72742: PUSH
72743: EMPTY
72744: LIST
72745: LIST
72746: PUSH
72747: LD_INT 34
72749: PUSH
72750: LD_INT 12
72752: PUSH
72753: EMPTY
72754: LIST
72755: LIST
72756: PUSH
72757: EMPTY
72758: LIST
72759: LIST
72760: LIST
72761: LIST
72762: PUSH
72763: EMPTY
72764: LIST
72765: LIST
72766: PPUSH
72767: CALL_OW 72
72771: ST_TO_ADDR
// if not cargo then
72772: LD_VAR 0 8
72776: NOT
72777: IFFALSE 73483
// begin if mc_crates_collector [ i ] < 5 then
72779: LD_EXP 67
72783: PUSH
72784: LD_VAR 0 2
72788: ARRAY
72789: PUSH
72790: LD_INT 5
72792: LESS
72793: IFFALSE 73159
// begin if mc_ape [ i ] then
72795: LD_EXP 79
72799: PUSH
72800: LD_VAR 0 2
72804: ARRAY
72805: IFFALSE 72852
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
72807: LD_ADDR_VAR 0 5
72811: PUSH
72812: LD_EXP 79
72816: PUSH
72817: LD_VAR 0 2
72821: ARRAY
72822: PPUSH
72823: LD_INT 25
72825: PUSH
72826: LD_INT 16
72828: PUSH
72829: EMPTY
72830: LIST
72831: LIST
72832: PUSH
72833: LD_INT 24
72835: PUSH
72836: LD_INT 750
72838: PUSH
72839: EMPTY
72840: LIST
72841: LIST
72842: PUSH
72843: EMPTY
72844: LIST
72845: LIST
72846: PPUSH
72847: CALL_OW 72
72851: ST_TO_ADDR
// if not tmp then
72852: LD_VAR 0 5
72856: NOT
72857: IFFALSE 72904
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
72859: LD_ADDR_VAR 0 5
72863: PUSH
72864: LD_EXP 50
72868: PUSH
72869: LD_VAR 0 2
72873: ARRAY
72874: PPUSH
72875: LD_INT 25
72877: PUSH
72878: LD_INT 2
72880: PUSH
72881: EMPTY
72882: LIST
72883: LIST
72884: PUSH
72885: LD_INT 24
72887: PUSH
72888: LD_INT 750
72890: PUSH
72891: EMPTY
72892: LIST
72893: LIST
72894: PUSH
72895: EMPTY
72896: LIST
72897: LIST
72898: PPUSH
72899: CALL_OW 72
72903: ST_TO_ADDR
// if mc_ape [ i ] and UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) and tmp < 5 then
72904: LD_EXP 79
72908: PUSH
72909: LD_VAR 0 2
72913: ARRAY
72914: PUSH
72915: LD_EXP 50
72919: PUSH
72920: LD_VAR 0 2
72924: ARRAY
72925: PPUSH
72926: LD_INT 25
72928: PUSH
72929: LD_INT 2
72931: PUSH
72932: EMPTY
72933: LIST
72934: LIST
72935: PUSH
72936: LD_INT 24
72938: PUSH
72939: LD_INT 750
72941: PUSH
72942: EMPTY
72943: LIST
72944: LIST
72945: PUSH
72946: EMPTY
72947: LIST
72948: LIST
72949: PPUSH
72950: CALL_OW 72
72954: AND
72955: PUSH
72956: LD_VAR 0 5
72960: PUSH
72961: LD_INT 5
72963: LESS
72964: AND
72965: IFFALSE 73047
// begin for j in UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) do
72967: LD_ADDR_VAR 0 3
72971: PUSH
72972: LD_EXP 50
72976: PUSH
72977: LD_VAR 0 2
72981: ARRAY
72982: PPUSH
72983: LD_INT 25
72985: PUSH
72986: LD_INT 2
72988: PUSH
72989: EMPTY
72990: LIST
72991: LIST
72992: PUSH
72993: LD_INT 24
72995: PUSH
72996: LD_INT 750
72998: PUSH
72999: EMPTY
73000: LIST
73001: LIST
73002: PUSH
73003: EMPTY
73004: LIST
73005: LIST
73006: PPUSH
73007: CALL_OW 72
73011: PUSH
73012: FOR_IN
73013: IFFALSE 73045
// begin tmp := tmp union j ;
73015: LD_ADDR_VAR 0 5
73019: PUSH
73020: LD_VAR 0 5
73024: PUSH
73025: LD_VAR 0 3
73029: UNION
73030: ST_TO_ADDR
// if tmp >= 5 then
73031: LD_VAR 0 5
73035: PUSH
73036: LD_INT 5
73038: GREATEREQUAL
73039: IFFALSE 73043
// break ;
73041: GO 73045
// end ;
73043: GO 73012
73045: POP
73046: POP
// end ; if not tmp then
73047: LD_VAR 0 5
73051: NOT
73052: IFFALSE 73056
// continue ;
73054: GO 72209
// for j in tmp do
73056: LD_ADDR_VAR 0 3
73060: PUSH
73061: LD_VAR 0 5
73065: PUSH
73066: FOR_IN
73067: IFFALSE 73157
// if not GetTag ( j ) then
73069: LD_VAR 0 3
73073: PPUSH
73074: CALL_OW 110
73078: NOT
73079: IFFALSE 73155
// begin mc_crates_collector := ReplaceIn ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
73081: LD_ADDR_EXP 67
73085: PUSH
73086: LD_EXP 67
73090: PPUSH
73091: LD_VAR 0 2
73095: PUSH
73096: LD_EXP 67
73100: PUSH
73101: LD_VAR 0 2
73105: ARRAY
73106: PUSH
73107: LD_INT 1
73109: PLUS
73110: PUSH
73111: EMPTY
73112: LIST
73113: LIST
73114: PPUSH
73115: LD_VAR 0 3
73119: PPUSH
73120: CALL 24858 0 3
73124: ST_TO_ADDR
// SetTag ( j , 107 ) ;
73125: LD_VAR 0 3
73129: PPUSH
73130: LD_INT 107
73132: PPUSH
73133: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
73137: LD_EXP 67
73141: PUSH
73142: LD_VAR 0 2
73146: ARRAY
73147: PUSH
73148: LD_INT 5
73150: GREATEREQUAL
73151: IFFALSE 73155
// break ;
73153: GO 73157
// end ;
73155: GO 73066
73157: POP
73158: POP
// end ; if mc_crates_collector [ i ] and target then
73159: LD_EXP 67
73163: PUSH
73164: LD_VAR 0 2
73168: ARRAY
73169: PUSH
73170: LD_VAR 0 7
73174: AND
73175: IFFALSE 73481
// begin if mc_crates_collector [ i ] < target [ 1 ] then
73177: LD_EXP 67
73181: PUSH
73182: LD_VAR 0 2
73186: ARRAY
73187: PUSH
73188: LD_VAR 0 7
73192: PUSH
73193: LD_INT 1
73195: ARRAY
73196: LESS
73197: IFFALSE 73217
// tmp := mc_crates_collector [ i ] else
73199: LD_ADDR_VAR 0 5
73203: PUSH
73204: LD_EXP 67
73208: PUSH
73209: LD_VAR 0 2
73213: ARRAY
73214: ST_TO_ADDR
73215: GO 73231
// tmp := target [ 1 ] ;
73217: LD_ADDR_VAR 0 5
73221: PUSH
73222: LD_VAR 0 7
73226: PUSH
73227: LD_INT 1
73229: ARRAY
73230: ST_TO_ADDR
// k := 0 ;
73231: LD_ADDR_VAR 0 4
73235: PUSH
73236: LD_INT 0
73238: ST_TO_ADDR
// for j in mc_crates_collector [ i ] do
73239: LD_ADDR_VAR 0 3
73243: PUSH
73244: LD_EXP 67
73248: PUSH
73249: LD_VAR 0 2
73253: ARRAY
73254: PUSH
73255: FOR_IN
73256: IFFALSE 73479
// begin k := k + 1 ;
73258: LD_ADDR_VAR 0 4
73262: PUSH
73263: LD_VAR 0 4
73267: PUSH
73268: LD_INT 1
73270: PLUS
73271: ST_TO_ADDR
// if k > tmp then
73272: LD_VAR 0 4
73276: PUSH
73277: LD_VAR 0 5
73281: GREATER
73282: IFFALSE 73286
// break ;
73284: GO 73479
// if not GetClass ( j ) in [ 2 , 16 ] then
73286: LD_VAR 0 3
73290: PPUSH
73291: CALL_OW 257
73295: PUSH
73296: LD_INT 2
73298: PUSH
73299: LD_INT 16
73301: PUSH
73302: EMPTY
73303: LIST
73304: LIST
73305: IN
73306: NOT
73307: IFFALSE 73360
// begin mc_crates_collector := Replace ( mc_crates_collector , i , mc_crates_collector [ i ] diff j ) ;
73309: LD_ADDR_EXP 67
73313: PUSH
73314: LD_EXP 67
73318: PPUSH
73319: LD_VAR 0 2
73323: PPUSH
73324: LD_EXP 67
73328: PUSH
73329: LD_VAR 0 2
73333: ARRAY
73334: PUSH
73335: LD_VAR 0 3
73339: DIFF
73340: PPUSH
73341: CALL_OW 1
73345: ST_TO_ADDR
// SetTag ( j , 0 ) ;
73346: LD_VAR 0 3
73350: PPUSH
73351: LD_INT 0
73353: PPUSH
73354: CALL_OW 109
// continue ;
73358: GO 73255
// end ; if IsInUnit ( j ) then
73360: LD_VAR 0 3
73364: PPUSH
73365: CALL_OW 310
73369: IFFALSE 73380
// ComExitBuilding ( j ) ;
73371: LD_VAR 0 3
73375: PPUSH
73376: CALL_OW 122
// wait ( 3 ) ;
73380: LD_INT 3
73382: PPUSH
73383: CALL_OW 67
// if HasTask ( j ) and DangerAtRangeXY ( side , target [ 2 ] , target [ 3 ] , 30 ) [ 4 ] then
73387: LD_VAR 0 3
73391: PPUSH
73392: CALL_OW 314
73396: PUSH
73397: LD_VAR 0 6
73401: PPUSH
73402: LD_VAR 0 7
73406: PUSH
73407: LD_INT 2
73409: ARRAY
73410: PPUSH
73411: LD_VAR 0 7
73415: PUSH
73416: LD_INT 3
73418: ARRAY
73419: PPUSH
73420: LD_INT 30
73422: PPUSH
73423: CALL 25754 0 4
73427: PUSH
73428: LD_INT 4
73430: ARRAY
73431: AND
73432: IFFALSE 73450
// ComStandNearbyBuilding ( j , depot ) else
73434: LD_VAR 0 3
73438: PPUSH
73439: LD_VAR 0 9
73443: PPUSH
73444: CALL 21436 0 2
73448: GO 73477
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
73450: LD_VAR 0 3
73454: PPUSH
73455: LD_VAR 0 7
73459: PUSH
73460: LD_INT 2
73462: ARRAY
73463: PPUSH
73464: LD_VAR 0 7
73468: PUSH
73469: LD_INT 3
73471: ARRAY
73472: PPUSH
73473: CALL_OW 117
// end ;
73477: GO 73255
73479: POP
73480: POP
// end ; end else
73481: GO 74013
// begin for j in cargo do
73483: LD_ADDR_VAR 0 3
73487: PUSH
73488: LD_VAR 0 8
73492: PUSH
73493: FOR_IN
73494: IFFALSE 74011
// begin if GetTag ( j ) <> 0 then
73496: LD_VAR 0 3
73500: PPUSH
73501: CALL_OW 110
73505: PUSH
73506: LD_INT 0
73508: NONEQUAL
73509: IFFALSE 73513
// continue ;
73511: GO 73493
// if GetLives ( j ) < 1000 and not IsInArea ( j , mc_parking [ i ] ) then
73513: LD_VAR 0 3
73517: PPUSH
73518: CALL_OW 256
73522: PUSH
73523: LD_INT 1000
73525: LESS
73526: PUSH
73527: LD_VAR 0 3
73531: PPUSH
73532: LD_EXP 74
73536: PUSH
73537: LD_VAR 0 2
73541: ARRAY
73542: PPUSH
73543: CALL_OW 308
73547: NOT
73548: AND
73549: IFFALSE 73571
// ComMoveToArea ( j , mc_parking [ i ] ) ;
73551: LD_VAR 0 3
73555: PPUSH
73556: LD_EXP 74
73560: PUSH
73561: LD_VAR 0 2
73565: ARRAY
73566: PPUSH
73567: CALL_OW 113
// if GetLives ( j ) < 1000 and IsInArea ( j , mc_parking [ i ] ) then
73571: LD_VAR 0 3
73575: PPUSH
73576: CALL_OW 256
73580: PUSH
73581: LD_INT 1000
73583: LESS
73584: PUSH
73585: LD_VAR 0 3
73589: PPUSH
73590: LD_EXP 74
73594: PUSH
73595: LD_VAR 0 2
73599: ARRAY
73600: PPUSH
73601: CALL_OW 308
73605: AND
73606: IFFALSE 73610
// continue ;
73608: GO 73493
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
73610: LD_VAR 0 3
73614: PPUSH
73615: CALL_OW 262
73619: PUSH
73620: LD_INT 2
73622: EQUAL
73623: PUSH
73624: LD_VAR 0 3
73628: PPUSH
73629: CALL_OW 261
73633: PUSH
73634: LD_INT 15
73636: LESS
73637: AND
73638: IFFALSE 73642
// continue ;
73640: GO 73493
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
73642: LD_VAR 0 3
73646: PPUSH
73647: CALL_OW 262
73651: PUSH
73652: LD_INT 1
73654: EQUAL
73655: PUSH
73656: LD_VAR 0 3
73660: PPUSH
73661: CALL_OW 261
73665: PUSH
73666: LD_INT 10
73668: LESS
73669: AND
73670: IFFALSE 73950
// begin if not depot then
73672: LD_VAR 0 9
73676: NOT
73677: IFFALSE 73681
// continue ;
73679: GO 73493
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
73681: LD_VAR 0 3
73685: PPUSH
73686: LD_VAR 0 9
73690: PPUSH
73691: LD_VAR 0 3
73695: PPUSH
73696: CALL_OW 74
73700: PPUSH
73701: CALL_OW 296
73705: PUSH
73706: LD_INT 6
73708: LESS
73709: IFFALSE 73725
// SetFuel ( j , 100 ) else
73711: LD_VAR 0 3
73715: PPUSH
73716: LD_INT 100
73718: PPUSH
73719: CALL_OW 240
73723: GO 73950
// if GetFuel ( j ) = 0 then
73725: LD_VAR 0 3
73729: PPUSH
73730: CALL_OW 261
73734: PUSH
73735: LD_INT 0
73737: EQUAL
73738: IFFALSE 73950
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
73740: LD_ADDR_EXP 69
73744: PUSH
73745: LD_EXP 69
73749: PPUSH
73750: LD_VAR 0 2
73754: PPUSH
73755: LD_EXP 69
73759: PUSH
73760: LD_VAR 0 2
73764: ARRAY
73765: PUSH
73766: LD_VAR 0 3
73770: DIFF
73771: PPUSH
73772: CALL_OW 1
73776: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
73777: LD_VAR 0 3
73781: PPUSH
73782: CALL_OW 263
73786: PUSH
73787: LD_INT 1
73789: EQUAL
73790: IFFALSE 73806
// ComExitVehicle ( IsInUnit ( j ) ) ;
73792: LD_VAR 0 3
73796: PPUSH
73797: CALL_OW 310
73801: PPUSH
73802: CALL_OW 121
// if GetControl ( j ) = control_remote then
73806: LD_VAR 0 3
73810: PPUSH
73811: CALL_OW 263
73815: PUSH
73816: LD_INT 2
73818: EQUAL
73819: IFFALSE 73830
// ComUnlink ( j ) ;
73821: LD_VAR 0 3
73825: PPUSH
73826: CALL_OW 136
// fac := MC_GetBuildings ( i , b_factory ) ;
73830: LD_ADDR_VAR 0 10
73834: PUSH
73835: LD_VAR 0 2
73839: PPUSH
73840: LD_INT 3
73842: PPUSH
73843: CALL 83442 0 2
73847: ST_TO_ADDR
// if fac then
73848: LD_VAR 0 10
73852: IFFALSE 73948
// begin for k in fac do
73854: LD_ADDR_VAR 0 4
73858: PUSH
73859: LD_VAR 0 10
73863: PUSH
73864: FOR_IN
73865: IFFALSE 73946
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
73867: LD_ADDR_VAR 0 11
73871: PUSH
73872: LD_VAR 0 10
73876: PPUSH
73877: LD_VAR 0 3
73881: PPUSH
73882: CALL_OW 265
73886: PPUSH
73887: LD_VAR 0 3
73891: PPUSH
73892: CALL_OW 262
73896: PPUSH
73897: LD_VAR 0 3
73901: PPUSH
73902: CALL_OW 263
73906: PPUSH
73907: LD_VAR 0 3
73911: PPUSH
73912: CALL_OW 264
73916: PPUSH
73917: CALL 22354 0 5
73921: ST_TO_ADDR
// if components then
73922: LD_VAR 0 11
73926: IFFALSE 73944
// begin MC_InsertProduceList ( i , components ) ;
73928: LD_VAR 0 2
73932: PPUSH
73933: LD_VAR 0 11
73937: PPUSH
73938: CALL 82987 0 2
// break ;
73942: GO 73946
// end ; end ;
73944: GO 73864
73946: POP
73947: POP
// end ; continue ;
73948: GO 73493
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
73950: LD_VAR 0 3
73954: PPUSH
73955: LD_INT 1
73957: PPUSH
73958: CALL_OW 289
73962: PUSH
73963: LD_INT 100
73965: LESS
73966: PUSH
73967: LD_VAR 0 3
73971: PPUSH
73972: CALL_OW 314
73976: NOT
73977: AND
73978: IFFALSE 74007
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
73980: LD_VAR 0 3
73984: PPUSH
73985: LD_VAR 0 7
73989: PUSH
73990: LD_INT 2
73992: ARRAY
73993: PPUSH
73994: LD_VAR 0 7
73998: PUSH
73999: LD_INT 3
74001: ARRAY
74002: PPUSH
74003: CALL_OW 117
// break ;
74007: GO 74011
// end ;
74009: GO 73493
74011: POP
74012: POP
// end ; end ;
74013: GO 72209
74015: POP
74016: POP
// end ;
74017: LD_VAR 0 1
74021: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
74022: LD_INT 0
74024: PPUSH
74025: PPUSH
74026: PPUSH
74027: PPUSH
// if not mc_bases then
74028: LD_EXP 50
74032: NOT
74033: IFFALSE 74037
// exit ;
74035: GO 74198
// for i = 1 to mc_bases do
74037: LD_ADDR_VAR 0 2
74041: PUSH
74042: DOUBLE
74043: LD_INT 1
74045: DEC
74046: ST_TO_ADDR
74047: LD_EXP 50
74051: PUSH
74052: FOR_TO
74053: IFFALSE 74196
// begin tmp := UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) ;
74055: LD_ADDR_VAR 0 4
74059: PUSH
74060: LD_EXP 69
74064: PUSH
74065: LD_VAR 0 2
74069: ARRAY
74070: PUSH
74071: LD_EXP 72
74075: PUSH
74076: LD_VAR 0 2
74080: ARRAY
74081: UNION
74082: PPUSH
74083: LD_INT 33
74085: PUSH
74086: LD_INT 2
74088: PUSH
74089: EMPTY
74090: LIST
74091: LIST
74092: PPUSH
74093: CALL_OW 72
74097: ST_TO_ADDR
// if tmp then
74098: LD_VAR 0 4
74102: IFFALSE 74194
// for j in tmp do
74104: LD_ADDR_VAR 0 3
74108: PUSH
74109: LD_VAR 0 4
74113: PUSH
74114: FOR_IN
74115: IFFALSE 74192
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
74117: LD_VAR 0 3
74121: PPUSH
74122: CALL_OW 312
74126: NOT
74127: PUSH
74128: LD_VAR 0 3
74132: PPUSH
74133: CALL_OW 256
74137: PUSH
74138: LD_INT 250
74140: GREATEREQUAL
74141: AND
74142: IFFALSE 74155
// Connect ( j ) else
74144: LD_VAR 0 3
74148: PPUSH
74149: CALL 27829 0 1
74153: GO 74190
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
74155: LD_VAR 0 3
74159: PPUSH
74160: CALL_OW 256
74164: PUSH
74165: LD_INT 250
74167: LESS
74168: PUSH
74169: LD_VAR 0 3
74173: PPUSH
74174: CALL_OW 312
74178: AND
74179: IFFALSE 74190
// ComUnlink ( j ) ;
74181: LD_VAR 0 3
74185: PPUSH
74186: CALL_OW 136
74190: GO 74114
74192: POP
74193: POP
// end ;
74194: GO 74052
74196: POP
74197: POP
// end ;
74198: LD_VAR 0 1
74202: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
74203: LD_INT 0
74205: PPUSH
74206: PPUSH
74207: PPUSH
74208: PPUSH
74209: PPUSH
// if not mc_bases then
74210: LD_EXP 50
74214: NOT
74215: IFFALSE 74219
// exit ;
74217: GO 74664
// for i = 1 to mc_bases do
74219: LD_ADDR_VAR 0 2
74223: PUSH
74224: DOUBLE
74225: LD_INT 1
74227: DEC
74228: ST_TO_ADDR
74229: LD_EXP 50
74233: PUSH
74234: FOR_TO
74235: IFFALSE 74662
// begin if not mc_produce [ i ] then
74237: LD_EXP 71
74241: PUSH
74242: LD_VAR 0 2
74246: ARRAY
74247: NOT
74248: IFFALSE 74252
// continue ;
74250: GO 74234
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
74252: LD_ADDR_VAR 0 5
74256: PUSH
74257: LD_EXP 50
74261: PUSH
74262: LD_VAR 0 2
74266: ARRAY
74267: PPUSH
74268: LD_INT 30
74270: PUSH
74271: LD_INT 3
74273: PUSH
74274: EMPTY
74275: LIST
74276: LIST
74277: PPUSH
74278: CALL_OW 72
74282: ST_TO_ADDR
// if not fac then
74283: LD_VAR 0 5
74287: NOT
74288: IFFALSE 74292
// continue ;
74290: GO 74234
// for j in fac do
74292: LD_ADDR_VAR 0 3
74296: PUSH
74297: LD_VAR 0 5
74301: PUSH
74302: FOR_IN
74303: IFFALSE 74658
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] then
74305: LD_VAR 0 3
74309: PPUSH
74310: CALL_OW 461
74314: PUSH
74315: LD_INT 2
74317: NONEQUAL
74318: PUSH
74319: LD_VAR 0 3
74323: PPUSH
74324: LD_INT 15
74326: PPUSH
74327: CALL 27457 0 2
74331: PUSH
74332: LD_INT 4
74334: ARRAY
74335: OR
74336: IFFALSE 74340
// continue ;
74338: GO 74302
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
74340: LD_VAR 0 3
74344: PPUSH
74345: LD_EXP 71
74349: PUSH
74350: LD_VAR 0 2
74354: ARRAY
74355: PUSH
74356: LD_INT 1
74358: ARRAY
74359: PUSH
74360: LD_INT 1
74362: ARRAY
74363: PPUSH
74364: LD_EXP 71
74368: PUSH
74369: LD_VAR 0 2
74373: ARRAY
74374: PUSH
74375: LD_INT 1
74377: ARRAY
74378: PUSH
74379: LD_INT 2
74381: ARRAY
74382: PPUSH
74383: LD_EXP 71
74387: PUSH
74388: LD_VAR 0 2
74392: ARRAY
74393: PUSH
74394: LD_INT 1
74396: ARRAY
74397: PUSH
74398: LD_INT 3
74400: ARRAY
74401: PPUSH
74402: LD_EXP 71
74406: PUSH
74407: LD_VAR 0 2
74411: ARRAY
74412: PUSH
74413: LD_INT 1
74415: ARRAY
74416: PUSH
74417: LD_INT 4
74419: ARRAY
74420: PPUSH
74421: CALL_OW 448
74425: PUSH
74426: LD_VAR 0 3
74430: PPUSH
74431: LD_EXP 71
74435: PUSH
74436: LD_VAR 0 2
74440: ARRAY
74441: PUSH
74442: LD_INT 1
74444: ARRAY
74445: PUSH
74446: LD_INT 1
74448: ARRAY
74449: PUSH
74450: LD_EXP 71
74454: PUSH
74455: LD_VAR 0 2
74459: ARRAY
74460: PUSH
74461: LD_INT 1
74463: ARRAY
74464: PUSH
74465: LD_INT 2
74467: ARRAY
74468: PUSH
74469: LD_EXP 71
74473: PUSH
74474: LD_VAR 0 2
74478: ARRAY
74479: PUSH
74480: LD_INT 1
74482: ARRAY
74483: PUSH
74484: LD_INT 3
74486: ARRAY
74487: PUSH
74488: LD_EXP 71
74492: PUSH
74493: LD_VAR 0 2
74497: ARRAY
74498: PUSH
74499: LD_INT 1
74501: ARRAY
74502: PUSH
74503: LD_INT 4
74505: ARRAY
74506: PUSH
74507: EMPTY
74508: LIST
74509: LIST
74510: LIST
74511: LIST
74512: PPUSH
74513: CALL 31224 0 2
74517: AND
74518: IFFALSE 74656
// begin AddComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
74520: LD_VAR 0 3
74524: PPUSH
74525: LD_EXP 71
74529: PUSH
74530: LD_VAR 0 2
74534: ARRAY
74535: PUSH
74536: LD_INT 1
74538: ARRAY
74539: PUSH
74540: LD_INT 1
74542: ARRAY
74543: PPUSH
74544: LD_EXP 71
74548: PUSH
74549: LD_VAR 0 2
74553: ARRAY
74554: PUSH
74555: LD_INT 1
74557: ARRAY
74558: PUSH
74559: LD_INT 2
74561: ARRAY
74562: PPUSH
74563: LD_EXP 71
74567: PUSH
74568: LD_VAR 0 2
74572: ARRAY
74573: PUSH
74574: LD_INT 1
74576: ARRAY
74577: PUSH
74578: LD_INT 3
74580: ARRAY
74581: PPUSH
74582: LD_EXP 71
74586: PUSH
74587: LD_VAR 0 2
74591: ARRAY
74592: PUSH
74593: LD_INT 1
74595: ARRAY
74596: PUSH
74597: LD_INT 4
74599: ARRAY
74600: PPUSH
74601: CALL_OW 185
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
74605: LD_ADDR_VAR 0 4
74609: PUSH
74610: LD_EXP 71
74614: PUSH
74615: LD_VAR 0 2
74619: ARRAY
74620: PPUSH
74621: LD_INT 1
74623: PPUSH
74624: CALL_OW 3
74628: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
74629: LD_ADDR_EXP 71
74633: PUSH
74634: LD_EXP 71
74638: PPUSH
74639: LD_VAR 0 2
74643: PPUSH
74644: LD_VAR 0 4
74648: PPUSH
74649: CALL_OW 1
74653: ST_TO_ADDR
// break ;
74654: GO 74658
// end ; end ;
74656: GO 74302
74658: POP
74659: POP
// end ;
74660: GO 74234
74662: POP
74663: POP
// end ;
74664: LD_VAR 0 1
74668: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
74669: LD_INT 0
74671: PPUSH
74672: PPUSH
74673: PPUSH
// if not mc_bases then
74674: LD_EXP 50
74678: NOT
74679: IFFALSE 74683
// exit ;
74681: GO 74772
// for i = 1 to mc_bases do
74683: LD_ADDR_VAR 0 2
74687: PUSH
74688: DOUBLE
74689: LD_INT 1
74691: DEC
74692: ST_TO_ADDR
74693: LD_EXP 50
74697: PUSH
74698: FOR_TO
74699: IFFALSE 74770
// begin if mc_attack [ i ] then
74701: LD_EXP 70
74705: PUSH
74706: LD_VAR 0 2
74710: ARRAY
74711: IFFALSE 74768
// begin tmp := mc_attack [ i ] [ 1 ] ;
74713: LD_ADDR_VAR 0 3
74717: PUSH
74718: LD_EXP 70
74722: PUSH
74723: LD_VAR 0 2
74727: ARRAY
74728: PUSH
74729: LD_INT 1
74731: ARRAY
74732: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
74733: LD_ADDR_EXP 70
74737: PUSH
74738: LD_EXP 70
74742: PPUSH
74743: LD_VAR 0 2
74747: PPUSH
74748: EMPTY
74749: PPUSH
74750: CALL_OW 1
74754: ST_TO_ADDR
// Attack ( tmp ) ;
74755: LD_VAR 0 3
74759: PPUSH
74760: CALL 106580 0 1
// exit ;
74764: POP
74765: POP
74766: GO 74772
// end ; end ;
74768: GO 74698
74770: POP
74771: POP
// end ;
74772: LD_VAR 0 1
74776: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
74777: LD_INT 0
74779: PPUSH
74780: PPUSH
74781: PPUSH
74782: PPUSH
74783: PPUSH
74784: PPUSH
74785: PPUSH
// if not mc_bases then
74786: LD_EXP 50
74790: NOT
74791: IFFALSE 74795
// exit ;
74793: GO 75505
// for i = 1 to mc_bases do
74795: LD_ADDR_VAR 0 2
74799: PUSH
74800: DOUBLE
74801: LD_INT 1
74803: DEC
74804: ST_TO_ADDR
74805: LD_EXP 50
74809: PUSH
74810: FOR_TO
74811: IFFALSE 75503
// begin if not mc_bases [ i ] then
74813: LD_EXP 50
74817: PUSH
74818: LD_VAR 0 2
74822: ARRAY
74823: NOT
74824: IFFALSE 74828
// continue ;
74826: GO 74810
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
74828: LD_ADDR_VAR 0 7
74832: PUSH
74833: LD_EXP 50
74837: PUSH
74838: LD_VAR 0 2
74842: ARRAY
74843: PUSH
74844: LD_INT 1
74846: ARRAY
74847: PPUSH
74848: CALL 21658 0 1
74852: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
74853: LD_ADDR_EXP 73
74857: PUSH
74858: LD_EXP 73
74862: PPUSH
74863: LD_VAR 0 2
74867: PPUSH
74868: LD_EXP 50
74872: PUSH
74873: LD_VAR 0 2
74877: ARRAY
74878: PUSH
74879: LD_INT 1
74881: ARRAY
74882: PPUSH
74883: CALL_OW 255
74887: PPUSH
74888: LD_EXP 75
74892: PUSH
74893: LD_VAR 0 2
74897: ARRAY
74898: PPUSH
74899: CALL 21623 0 2
74903: PPUSH
74904: CALL_OW 1
74908: ST_TO_ADDR
// if not mc_scan [ i ] then
74909: LD_EXP 73
74913: PUSH
74914: LD_VAR 0 2
74918: ARRAY
74919: NOT
74920: IFFALSE 75098
// begin mc_is_defending := Replace ( mc_is_defending , i , false ) ;
74922: LD_ADDR_EXP 93
74926: PUSH
74927: LD_EXP 93
74931: PPUSH
74932: LD_VAR 0 2
74936: PPUSH
74937: LD_INT 0
74939: PPUSH
74940: CALL_OW 1
74944: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
74945: LD_ADDR_VAR 0 4
74949: PUSH
74950: LD_EXP 50
74954: PUSH
74955: LD_VAR 0 2
74959: ARRAY
74960: PPUSH
74961: LD_INT 2
74963: PUSH
74964: LD_INT 25
74966: PUSH
74967: LD_INT 5
74969: PUSH
74970: EMPTY
74971: LIST
74972: LIST
74973: PUSH
74974: LD_INT 25
74976: PUSH
74977: LD_INT 8
74979: PUSH
74980: EMPTY
74981: LIST
74982: LIST
74983: PUSH
74984: LD_INT 25
74986: PUSH
74987: LD_INT 9
74989: PUSH
74990: EMPTY
74991: LIST
74992: LIST
74993: PUSH
74994: EMPTY
74995: LIST
74996: LIST
74997: LIST
74998: LIST
74999: PPUSH
75000: CALL_OW 72
75004: ST_TO_ADDR
// if not tmp then
75005: LD_VAR 0 4
75009: NOT
75010: IFFALSE 75014
// continue ;
75012: GO 74810
// for j in tmp do
75014: LD_ADDR_VAR 0 3
75018: PUSH
75019: LD_VAR 0 4
75023: PUSH
75024: FOR_IN
75025: IFFALSE 75096
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
75027: LD_VAR 0 3
75031: PPUSH
75032: CALL_OW 310
75036: PPUSH
75037: CALL_OW 266
75041: PUSH
75042: LD_INT 5
75044: EQUAL
75045: PUSH
75046: LD_VAR 0 3
75050: PPUSH
75051: CALL_OW 257
75055: PUSH
75056: LD_INT 1
75058: EQUAL
75059: AND
75060: PUSH
75061: LD_VAR 0 3
75065: PPUSH
75066: CALL_OW 459
75070: NOT
75071: AND
75072: PUSH
75073: LD_VAR 0 7
75077: AND
75078: IFFALSE 75094
// ComChangeProfession ( j , class ) ;
75080: LD_VAR 0 3
75084: PPUSH
75085: LD_VAR 0 7
75089: PPUSH
75090: CALL_OW 123
75094: GO 75024
75096: POP
75097: POP
// end ; if mc_scan [ i ] and not mc_is_defending [ i ] and not mc_defender [ i ] then
75098: LD_EXP 73
75102: PUSH
75103: LD_VAR 0 2
75107: ARRAY
75108: PUSH
75109: LD_EXP 93
75113: PUSH
75114: LD_VAR 0 2
75118: ARRAY
75119: NOT
75120: AND
75121: PUSH
75122: LD_EXP 72
75126: PUSH
75127: LD_VAR 0 2
75131: ARRAY
75132: NOT
75133: AND
75134: IFFALSE 75385
// begin mc_is_defending := Replace ( mc_is_defending , i , true ) ;
75136: LD_ADDR_EXP 93
75140: PUSH
75141: LD_EXP 93
75145: PPUSH
75146: LD_VAR 0 2
75150: PPUSH
75151: LD_INT 1
75153: PPUSH
75154: CALL_OW 1
75158: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
75159: LD_ADDR_VAR 0 4
75163: PUSH
75164: LD_EXP 50
75168: PUSH
75169: LD_VAR 0 2
75173: ARRAY
75174: PPUSH
75175: LD_INT 2
75177: PUSH
75178: LD_INT 25
75180: PUSH
75181: LD_INT 1
75183: PUSH
75184: EMPTY
75185: LIST
75186: LIST
75187: PUSH
75188: LD_INT 25
75190: PUSH
75191: LD_INT 5
75193: PUSH
75194: EMPTY
75195: LIST
75196: LIST
75197: PUSH
75198: LD_INT 25
75200: PUSH
75201: LD_INT 8
75203: PUSH
75204: EMPTY
75205: LIST
75206: LIST
75207: PUSH
75208: LD_INT 25
75210: PUSH
75211: LD_INT 9
75213: PUSH
75214: EMPTY
75215: LIST
75216: LIST
75217: PUSH
75218: EMPTY
75219: LIST
75220: LIST
75221: LIST
75222: LIST
75223: LIST
75224: PPUSH
75225: CALL_OW 72
75229: ST_TO_ADDR
// tmp := tmp diff FilterByTag ( tmp , 18 ) ;
75230: LD_ADDR_VAR 0 4
75234: PUSH
75235: LD_VAR 0 4
75239: PUSH
75240: LD_VAR 0 4
75244: PPUSH
75245: LD_INT 18
75247: PPUSH
75248: CALL 54127 0 2
75252: DIFF
75253: ST_TO_ADDR
// if not tmp and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) then
75254: LD_VAR 0 4
75258: NOT
75259: PUSH
75260: LD_EXP 50
75264: PUSH
75265: LD_VAR 0 2
75269: ARRAY
75270: PPUSH
75271: LD_INT 2
75273: PUSH
75274: LD_INT 30
75276: PUSH
75277: LD_INT 4
75279: PUSH
75280: EMPTY
75281: LIST
75282: LIST
75283: PUSH
75284: LD_INT 30
75286: PUSH
75287: LD_INT 5
75289: PUSH
75290: EMPTY
75291: LIST
75292: LIST
75293: PUSH
75294: EMPTY
75295: LIST
75296: LIST
75297: LIST
75298: PPUSH
75299: CALL_OW 72
75303: NOT
75304: AND
75305: IFFALSE 75367
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ) ;
75307: LD_ADDR_VAR 0 4
75311: PUSH
75312: LD_EXP 50
75316: PUSH
75317: LD_VAR 0 2
75321: ARRAY
75322: PPUSH
75323: LD_INT 2
75325: PUSH
75326: LD_INT 25
75328: PUSH
75329: LD_INT 2
75331: PUSH
75332: EMPTY
75333: LIST
75334: LIST
75335: PUSH
75336: LD_INT 25
75338: PUSH
75339: LD_INT 3
75341: PUSH
75342: EMPTY
75343: LIST
75344: LIST
75345: PUSH
75346: LD_INT 25
75348: PUSH
75349: LD_INT 4
75351: PUSH
75352: EMPTY
75353: LIST
75354: LIST
75355: PUSH
75356: EMPTY
75357: LIST
75358: LIST
75359: LIST
75360: LIST
75361: PPUSH
75362: CALL_OW 72
75366: ST_TO_ADDR
// BasicDefend ( i , tmp ) ;
75367: LD_VAR 0 2
75371: PPUSH
75372: LD_VAR 0 4
75376: PPUSH
75377: CALL 111289 0 2
// exit ;
75381: POP
75382: POP
75383: GO 75505
// end ; if mc_scan [ i ] and not mc_is_defending [ i ] and mc_defender [ i ] then
75385: LD_EXP 73
75389: PUSH
75390: LD_VAR 0 2
75394: ARRAY
75395: PUSH
75396: LD_EXP 93
75400: PUSH
75401: LD_VAR 0 2
75405: ARRAY
75406: NOT
75407: AND
75408: PUSH
75409: LD_EXP 72
75413: PUSH
75414: LD_VAR 0 2
75418: ARRAY
75419: AND
75420: IFFALSE 75501
// begin mc_is_defending := Replace ( mc_is_defending , i , true ) ;
75422: LD_ADDR_EXP 93
75426: PUSH
75427: LD_EXP 93
75431: PPUSH
75432: LD_VAR 0 2
75436: PPUSH
75437: LD_INT 1
75439: PPUSH
75440: CALL_OW 1
75444: ST_TO_ADDR
// tmp := mc_defender [ i ] ;
75445: LD_ADDR_VAR 0 4
75449: PUSH
75450: LD_EXP 72
75454: PUSH
75455: LD_VAR 0 2
75459: ARRAY
75460: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
75461: LD_ADDR_EXP 72
75465: PUSH
75466: LD_EXP 72
75470: PPUSH
75471: LD_VAR 0 2
75475: PPUSH
75476: EMPTY
75477: PPUSH
75478: CALL_OW 1
75482: ST_TO_ADDR
// Defend ( i , tmp ) ;
75483: LD_VAR 0 2
75487: PPUSH
75488: LD_VAR 0 4
75492: PPUSH
75493: CALL 111859 0 2
// exit ;
75497: POP
75498: POP
75499: GO 75505
// end ; end ;
75501: GO 74810
75503: POP
75504: POP
// end ;
75505: LD_VAR 0 1
75509: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 , researching , idle_lab ; begin
75510: LD_INT 0
75512: PPUSH
75513: PPUSH
75514: PPUSH
75515: PPUSH
75516: PPUSH
75517: PPUSH
75518: PPUSH
75519: PPUSH
75520: PPUSH
75521: PPUSH
75522: PPUSH
// if not mc_bases then
75523: LD_EXP 50
75527: NOT
75528: IFFALSE 75532
// exit ;
75530: GO 76619
// for i = 1 to mc_bases do
75532: LD_ADDR_VAR 0 2
75536: PUSH
75537: DOUBLE
75538: LD_INT 1
75540: DEC
75541: ST_TO_ADDR
75542: LD_EXP 50
75546: PUSH
75547: FOR_TO
75548: IFFALSE 76617
// begin tmp := mc_lab [ i ] ;
75550: LD_ADDR_VAR 0 6
75554: PUSH
75555: LD_EXP 83
75559: PUSH
75560: LD_VAR 0 2
75564: ARRAY
75565: ST_TO_ADDR
// if not tmp then
75566: LD_VAR 0 6
75570: NOT
75571: IFFALSE 75575
// continue ;
75573: GO 75547
// idle_lab := 0 ;
75575: LD_ADDR_VAR 0 11
75579: PUSH
75580: LD_INT 0
75582: ST_TO_ADDR
// for j in tmp do
75583: LD_ADDR_VAR 0 3
75587: PUSH
75588: LD_VAR 0 6
75592: PUSH
75593: FOR_IN
75594: IFFALSE 76613
// begin researching := false ;
75596: LD_ADDR_VAR 0 10
75600: PUSH
75601: LD_INT 0
75603: ST_TO_ADDR
// side := GetSide ( j ) ;
75604: LD_ADDR_VAR 0 4
75608: PUSH
75609: LD_VAR 0 3
75613: PPUSH
75614: CALL_OW 255
75618: ST_TO_ADDR
// if not mc_tech [ side ] then
75619: LD_EXP 77
75623: PUSH
75624: LD_VAR 0 4
75628: ARRAY
75629: NOT
75630: IFFALSE 75634
// continue ;
75632: GO 75593
// if BuildingStatus ( j ) = bs_idle then
75634: LD_VAR 0 3
75638: PPUSH
75639: CALL_OW 461
75643: PUSH
75644: LD_INT 2
75646: EQUAL
75647: IFFALSE 75835
// begin if idle_lab and UnitsInside ( j ) < 6 then
75649: LD_VAR 0 11
75653: PUSH
75654: LD_VAR 0 3
75658: PPUSH
75659: CALL_OW 313
75663: PUSH
75664: LD_INT 6
75666: LESS
75667: AND
75668: IFFALSE 75739
// begin tmp2 := UnitsInside ( idle_lab ) ;
75670: LD_ADDR_VAR 0 9
75674: PUSH
75675: LD_VAR 0 11
75679: PPUSH
75680: CALL_OW 313
75684: ST_TO_ADDR
// if tmp2 then
75685: LD_VAR 0 9
75689: IFFALSE 75731
// for x in tmp2 do
75691: LD_ADDR_VAR 0 7
75695: PUSH
75696: LD_VAR 0 9
75700: PUSH
75701: FOR_IN
75702: IFFALSE 75729
// begin ComExitBuilding ( x ) ;
75704: LD_VAR 0 7
75708: PPUSH
75709: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
75713: LD_VAR 0 7
75717: PPUSH
75718: LD_VAR 0 3
75722: PPUSH
75723: CALL_OW 180
// end ;
75727: GO 75701
75729: POP
75730: POP
// idle_lab := 0 ;
75731: LD_ADDR_VAR 0 11
75735: PUSH
75736: LD_INT 0
75738: ST_TO_ADDR
// end ; for t in mc_tech [ side ] do
75739: LD_ADDR_VAR 0 5
75743: PUSH
75744: LD_EXP 77
75748: PUSH
75749: LD_VAR 0 4
75753: ARRAY
75754: PUSH
75755: FOR_IN
75756: IFFALSE 75816
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
75758: LD_VAR 0 3
75762: PPUSH
75763: LD_VAR 0 5
75767: PPUSH
75768: CALL_OW 430
75772: PUSH
75773: LD_VAR 0 4
75777: PPUSH
75778: LD_VAR 0 5
75782: PPUSH
75783: CALL 20728 0 2
75787: AND
75788: IFFALSE 75814
// begin researching := true ;
75790: LD_ADDR_VAR 0 10
75794: PUSH
75795: LD_INT 1
75797: ST_TO_ADDR
// ComResearch ( j , t ) ;
75798: LD_VAR 0 3
75802: PPUSH
75803: LD_VAR 0 5
75807: PPUSH
75808: CALL_OW 124
// break ;
75812: GO 75816
// end ;
75814: GO 75755
75816: POP
75817: POP
// if not researching then
75818: LD_VAR 0 10
75822: NOT
75823: IFFALSE 75835
// idle_lab := j ;
75825: LD_ADDR_VAR 0 11
75829: PUSH
75830: LD_VAR 0 3
75834: ST_TO_ADDR
// end ; if BuildingStatus ( j ) = bs_need_ape then
75835: LD_VAR 0 3
75839: PPUSH
75840: CALL_OW 461
75844: PUSH
75845: LD_INT 10
75847: EQUAL
75848: IFFALSE 76436
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
75850: LD_EXP 79
75854: PUSH
75855: LD_VAR 0 2
75859: ARRAY
75860: NOT
75861: PUSH
75862: LD_EXP 80
75866: PUSH
75867: LD_VAR 0 2
75871: ARRAY
75872: NOT
75873: AND
75874: PUSH
75875: LD_EXP 77
75879: PUSH
75880: LD_VAR 0 4
75884: ARRAY
75885: PUSH
75886: LD_INT 1
75888: GREATER
75889: AND
75890: IFFALSE 76021
// begin ComCancel ( j ) ;
75892: LD_VAR 0 3
75896: PPUSH
75897: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
75901: LD_ADDR_EXP 77
75905: PUSH
75906: LD_EXP 77
75910: PPUSH
75911: LD_VAR 0 4
75915: PPUSH
75916: LD_EXP 77
75920: PUSH
75921: LD_VAR 0 4
75925: ARRAY
75926: PPUSH
75927: LD_EXP 77
75931: PUSH
75932: LD_VAR 0 4
75936: ARRAY
75937: PUSH
75938: LD_INT 1
75940: MINUS
75941: PPUSH
75942: LD_EXP 77
75946: PUSH
75947: LD_VAR 0 4
75951: ARRAY
75952: PPUSH
75953: LD_INT 0
75955: PPUSH
75956: CALL 24276 0 4
75960: PPUSH
75961: CALL_OW 1
75965: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
75966: LD_ADDR_EXP 77
75970: PUSH
75971: LD_EXP 77
75975: PPUSH
75976: LD_VAR 0 4
75980: PPUSH
75981: LD_EXP 77
75985: PUSH
75986: LD_VAR 0 4
75990: ARRAY
75991: PPUSH
75992: LD_EXP 77
75996: PUSH
75997: LD_VAR 0 4
76001: ARRAY
76002: PPUSH
76003: LD_INT 1
76005: PPUSH
76006: LD_INT 0
76008: PPUSH
76009: CALL 24276 0 4
76013: PPUSH
76014: CALL_OW 1
76018: ST_TO_ADDR
// continue ;
76019: GO 75593
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
76021: LD_EXP 79
76025: PUSH
76026: LD_VAR 0 2
76030: ARRAY
76031: PUSH
76032: LD_EXP 80
76036: PUSH
76037: LD_VAR 0 2
76041: ARRAY
76042: NOT
76043: AND
76044: IFFALSE 76171
// begin mc_ape_in_lab := ReplaceIn ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
76046: LD_ADDR_EXP 80
76050: PUSH
76051: LD_EXP 80
76055: PPUSH
76056: LD_VAR 0 2
76060: PUSH
76061: LD_EXP 80
76065: PUSH
76066: LD_VAR 0 2
76070: ARRAY
76071: PUSH
76072: LD_INT 1
76074: PLUS
76075: PUSH
76076: EMPTY
76077: LIST
76078: LIST
76079: PPUSH
76080: LD_EXP 79
76084: PUSH
76085: LD_VAR 0 2
76089: ARRAY
76090: PUSH
76091: LD_INT 1
76093: ARRAY
76094: PPUSH
76095: CALL 24858 0 3
76099: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
76100: LD_EXP 79
76104: PUSH
76105: LD_VAR 0 2
76109: ARRAY
76110: PUSH
76111: LD_INT 1
76113: ARRAY
76114: PPUSH
76115: LD_INT 112
76117: PPUSH
76118: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
76122: LD_ADDR_VAR 0 9
76126: PUSH
76127: LD_EXP 79
76131: PUSH
76132: LD_VAR 0 2
76136: ARRAY
76137: PPUSH
76138: LD_INT 1
76140: PPUSH
76141: CALL_OW 3
76145: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
76146: LD_ADDR_EXP 79
76150: PUSH
76151: LD_EXP 79
76155: PPUSH
76156: LD_VAR 0 2
76160: PPUSH
76161: LD_VAR 0 9
76165: PPUSH
76166: CALL_OW 1
76170: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
76171: LD_EXP 79
76175: PUSH
76176: LD_VAR 0 2
76180: ARRAY
76181: PUSH
76182: LD_EXP 80
76186: PUSH
76187: LD_VAR 0 2
76191: ARRAY
76192: AND
76193: PUSH
76194: LD_EXP 80
76198: PUSH
76199: LD_VAR 0 2
76203: ARRAY
76204: PUSH
76205: LD_INT 1
76207: ARRAY
76208: PPUSH
76209: CALL_OW 310
76213: NOT
76214: AND
76215: PUSH
76216: LD_VAR 0 3
76220: PPUSH
76221: CALL_OW 313
76225: PUSH
76226: LD_INT 6
76228: EQUAL
76229: AND
76230: IFFALSE 76286
// begin tmp2 := UnitsInside ( j ) ;
76232: LD_ADDR_VAR 0 9
76236: PUSH
76237: LD_VAR 0 3
76241: PPUSH
76242: CALL_OW 313
76246: ST_TO_ADDR
// if tmp2 = 6 then
76247: LD_VAR 0 9
76251: PUSH
76252: LD_INT 6
76254: EQUAL
76255: IFFALSE 76286
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
76257: LD_VAR 0 9
76261: PUSH
76262: LD_INT 1
76264: ARRAY
76265: PPUSH
76266: LD_INT 112
76268: PPUSH
76269: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
76273: LD_VAR 0 9
76277: PUSH
76278: LD_INT 1
76280: ARRAY
76281: PPUSH
76282: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
76286: LD_EXP 80
76290: PUSH
76291: LD_VAR 0 2
76295: ARRAY
76296: PUSH
76297: LD_EXP 80
76301: PUSH
76302: LD_VAR 0 2
76306: ARRAY
76307: PUSH
76308: LD_INT 1
76310: ARRAY
76311: PPUSH
76312: CALL_OW 314
76316: NOT
76317: AND
76318: PUSH
76319: LD_EXP 80
76323: PUSH
76324: LD_VAR 0 2
76328: ARRAY
76329: PUSH
76330: LD_INT 1
76332: ARRAY
76333: PPUSH
76334: CALL_OW 310
76338: NOT
76339: AND
76340: IFFALSE 76366
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
76342: LD_EXP 80
76346: PUSH
76347: LD_VAR 0 2
76351: ARRAY
76352: PUSH
76353: LD_INT 1
76355: ARRAY
76356: PPUSH
76357: LD_VAR 0 3
76361: PPUSH
76362: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
76366: LD_EXP 80
76370: PUSH
76371: LD_VAR 0 2
76375: ARRAY
76376: PUSH
76377: LD_INT 1
76379: ARRAY
76380: PPUSH
76381: CALL_OW 310
76385: PUSH
76386: LD_EXP 80
76390: PUSH
76391: LD_VAR 0 2
76395: ARRAY
76396: PUSH
76397: LD_INT 1
76399: ARRAY
76400: PPUSH
76401: CALL_OW 310
76405: PPUSH
76406: CALL_OW 461
76410: PUSH
76411: LD_INT 3
76413: NONEQUAL
76414: AND
76415: IFFALSE 76436
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
76417: LD_EXP 80
76421: PUSH
76422: LD_VAR 0 2
76426: ARRAY
76427: PUSH
76428: LD_INT 1
76430: ARRAY
76431: PPUSH
76432: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
76436: LD_VAR 0 3
76440: PPUSH
76441: CALL_OW 461
76445: PUSH
76446: LD_INT 6
76448: EQUAL
76449: PUSH
76450: LD_VAR 0 6
76454: PUSH
76455: LD_INT 1
76457: GREATER
76458: AND
76459: IFFALSE 76611
// begin sci := [ ] ;
76461: LD_ADDR_VAR 0 8
76465: PUSH
76466: EMPTY
76467: ST_TO_ADDR
// for x in ( tmp diff j ) do
76468: LD_ADDR_VAR 0 7
76472: PUSH
76473: LD_VAR 0 6
76477: PUSH
76478: LD_VAR 0 3
76482: DIFF
76483: PUSH
76484: FOR_IN
76485: IFFALSE 76537
// begin if sci = 6 then
76487: LD_VAR 0 8
76491: PUSH
76492: LD_INT 6
76494: EQUAL
76495: IFFALSE 76499
// break ;
76497: GO 76537
// if BuildingStatus ( x ) = bs_idle then
76499: LD_VAR 0 7
76503: PPUSH
76504: CALL_OW 461
76508: PUSH
76509: LD_INT 2
76511: EQUAL
76512: IFFALSE 76535
// sci := sci ^ UnitsInside ( x ) ;
76514: LD_ADDR_VAR 0 8
76518: PUSH
76519: LD_VAR 0 8
76523: PUSH
76524: LD_VAR 0 7
76528: PPUSH
76529: CALL_OW 313
76533: ADD
76534: ST_TO_ADDR
// end ;
76535: GO 76484
76537: POP
76538: POP
// if not sci then
76539: LD_VAR 0 8
76543: NOT
76544: IFFALSE 76548
// continue ;
76546: GO 75593
// for x in sci do
76548: LD_ADDR_VAR 0 7
76552: PUSH
76553: LD_VAR 0 8
76557: PUSH
76558: FOR_IN
76559: IFFALSE 76609
// if IsInUnit ( x ) and not HasTask ( x ) then
76561: LD_VAR 0 7
76565: PPUSH
76566: CALL_OW 310
76570: PUSH
76571: LD_VAR 0 7
76575: PPUSH
76576: CALL_OW 314
76580: NOT
76581: AND
76582: IFFALSE 76607
// begin ComExitBuilding ( x ) ;
76584: LD_VAR 0 7
76588: PPUSH
76589: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
76593: LD_VAR 0 7
76597: PPUSH
76598: LD_VAR 0 3
76602: PPUSH
76603: CALL_OW 180
// end ;
76607: GO 76558
76609: POP
76610: POP
// end ; end ;
76611: GO 75593
76613: POP
76614: POP
// end ;
76615: GO 75547
76617: POP
76618: POP
// end ;
76619: LD_VAR 0 1
76623: RET
// export function MC_MinesTrigger ( ) ; var i ; begin
76624: LD_INT 0
76626: PPUSH
76627: PPUSH
// if not mc_bases then
76628: LD_EXP 50
76632: NOT
76633: IFFALSE 76637
// exit ;
76635: GO 76718
// for i = 1 to mc_bases do
76637: LD_ADDR_VAR 0 2
76641: PUSH
76642: DOUBLE
76643: LD_INT 1
76645: DEC
76646: ST_TO_ADDR
76647: LD_EXP 50
76651: PUSH
76652: FOR_TO
76653: IFFALSE 76716
// if mc_mines [ i ] and mc_miners [ i ] then
76655: LD_EXP 63
76659: PUSH
76660: LD_VAR 0 2
76664: ARRAY
76665: PUSH
76666: LD_EXP 64
76670: PUSH
76671: LD_VAR 0 2
76675: ARRAY
76676: AND
76677: IFFALSE 76714
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
76679: LD_EXP 64
76683: PUSH
76684: LD_VAR 0 2
76688: ARRAY
76689: PUSH
76690: LD_INT 1
76692: ARRAY
76693: PPUSH
76694: CALL_OW 255
76698: PPUSH
76699: LD_EXP 63
76703: PUSH
76704: LD_VAR 0 2
76708: ARRAY
76709: PPUSH
76710: CALL 21811 0 2
76714: GO 76652
76716: POP
76717: POP
// end ;
76718: LD_VAR 0 1
76722: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
76723: LD_INT 0
76725: PPUSH
76726: PPUSH
76727: PPUSH
76728: PPUSH
76729: PPUSH
76730: PPUSH
76731: PPUSH
76732: PPUSH
// if not mc_bases or not mc_parking then
76733: LD_EXP 50
76737: NOT
76738: PUSH
76739: LD_EXP 74
76743: NOT
76744: OR
76745: IFFALSE 76749
// exit ;
76747: GO 77459
// for i = 1 to mc_bases do
76749: LD_ADDR_VAR 0 2
76753: PUSH
76754: DOUBLE
76755: LD_INT 1
76757: DEC
76758: ST_TO_ADDR
76759: LD_EXP 50
76763: PUSH
76764: FOR_TO
76765: IFFALSE 77457
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
76767: LD_EXP 50
76771: PUSH
76772: LD_VAR 0 2
76776: ARRAY
76777: NOT
76778: PUSH
76779: LD_EXP 74
76783: PUSH
76784: LD_VAR 0 2
76788: ARRAY
76789: NOT
76790: OR
76791: IFFALSE 76795
// continue ;
76793: GO 76764
// side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
76795: LD_ADDR_VAR 0 5
76799: PUSH
76800: LD_EXP 50
76804: PUSH
76805: LD_VAR 0 2
76809: ARRAY
76810: PUSH
76811: LD_INT 1
76813: ARRAY
76814: PPUSH
76815: CALL_OW 255
76819: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
76820: LD_ADDR_VAR 0 6
76824: PUSH
76825: LD_EXP 50
76829: PUSH
76830: LD_VAR 0 2
76834: ARRAY
76835: PPUSH
76836: LD_INT 30
76838: PUSH
76839: LD_INT 3
76841: PUSH
76842: EMPTY
76843: LIST
76844: LIST
76845: PPUSH
76846: CALL_OW 72
76850: ST_TO_ADDR
// if not fac then
76851: LD_VAR 0 6
76855: NOT
76856: IFFALSE 76907
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
76858: LD_ADDR_VAR 0 6
76862: PUSH
76863: LD_EXP 50
76867: PUSH
76868: LD_VAR 0 2
76872: ARRAY
76873: PPUSH
76874: LD_INT 2
76876: PUSH
76877: LD_INT 30
76879: PUSH
76880: LD_INT 0
76882: PUSH
76883: EMPTY
76884: LIST
76885: LIST
76886: PUSH
76887: LD_INT 30
76889: PUSH
76890: LD_INT 1
76892: PUSH
76893: EMPTY
76894: LIST
76895: LIST
76896: PUSH
76897: EMPTY
76898: LIST
76899: LIST
76900: LIST
76901: PPUSH
76902: CALL_OW 72
76906: ST_TO_ADDR
// if not fac then
76907: LD_VAR 0 6
76911: NOT
76912: IFFALSE 76916
// continue ;
76914: GO 76764
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
76916: LD_ADDR_VAR 0 7
76920: PUSH
76921: LD_EXP 74
76925: PUSH
76926: LD_VAR 0 2
76930: ARRAY
76931: PPUSH
76932: LD_INT 22
76934: PUSH
76935: LD_VAR 0 5
76939: PUSH
76940: EMPTY
76941: LIST
76942: LIST
76943: PUSH
76944: LD_INT 21
76946: PUSH
76947: LD_INT 2
76949: PUSH
76950: EMPTY
76951: LIST
76952: LIST
76953: PUSH
76954: LD_INT 3
76956: PUSH
76957: LD_INT 24
76959: PUSH
76960: LD_INT 1000
76962: PUSH
76963: EMPTY
76964: LIST
76965: LIST
76966: PUSH
76967: EMPTY
76968: LIST
76969: LIST
76970: PUSH
76971: EMPTY
76972: LIST
76973: LIST
76974: LIST
76975: PPUSH
76976: CALL_OW 70
76980: ST_TO_ADDR
// for j in fac do
76981: LD_ADDR_VAR 0 3
76985: PUSH
76986: LD_VAR 0 6
76990: PUSH
76991: FOR_IN
76992: IFFALSE 77073
// vehs := vehs union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , j , 15 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
76994: LD_ADDR_VAR 0 7
76998: PUSH
76999: LD_VAR 0 7
77003: PUSH
77004: LD_INT 22
77006: PUSH
77007: LD_VAR 0 5
77011: PUSH
77012: EMPTY
77013: LIST
77014: LIST
77015: PUSH
77016: LD_INT 91
77018: PUSH
77019: LD_VAR 0 3
77023: PUSH
77024: LD_INT 15
77026: PUSH
77027: EMPTY
77028: LIST
77029: LIST
77030: LIST
77031: PUSH
77032: LD_INT 21
77034: PUSH
77035: LD_INT 2
77037: PUSH
77038: EMPTY
77039: LIST
77040: LIST
77041: PUSH
77042: LD_INT 3
77044: PUSH
77045: LD_INT 24
77047: PUSH
77048: LD_INT 1000
77050: PUSH
77051: EMPTY
77052: LIST
77053: LIST
77054: PUSH
77055: EMPTY
77056: LIST
77057: LIST
77058: PUSH
77059: EMPTY
77060: LIST
77061: LIST
77062: LIST
77063: LIST
77064: PPUSH
77065: CALL_OW 69
77069: UNION
77070: ST_TO_ADDR
77071: GO 76991
77073: POP
77074: POP
// if not vehs then
77075: LD_VAR 0 7
77079: NOT
77080: IFFALSE 77106
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
77082: LD_ADDR_EXP 62
77086: PUSH
77087: LD_EXP 62
77091: PPUSH
77092: LD_VAR 0 2
77096: PPUSH
77097: EMPTY
77098: PPUSH
77099: CALL_OW 1
77103: ST_TO_ADDR
// continue ;
77104: GO 76764
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
77106: LD_ADDR_VAR 0 8
77110: PUSH
77111: LD_EXP 50
77115: PUSH
77116: LD_VAR 0 2
77120: ARRAY
77121: PPUSH
77122: LD_INT 30
77124: PUSH
77125: LD_INT 3
77127: PUSH
77128: EMPTY
77129: LIST
77130: LIST
77131: PPUSH
77132: CALL_OW 72
77136: ST_TO_ADDR
// if tmp then
77137: LD_VAR 0 8
77141: IFFALSE 77244
// begin for j in tmp do
77143: LD_ADDR_VAR 0 3
77147: PUSH
77148: LD_VAR 0 8
77152: PUSH
77153: FOR_IN
77154: IFFALSE 77242
// for k in UnitsInside ( j ) do
77156: LD_ADDR_VAR 0 4
77160: PUSH
77161: LD_VAR 0 3
77165: PPUSH
77166: CALL_OW 313
77170: PUSH
77171: FOR_IN
77172: IFFALSE 77238
// if k then
77174: LD_VAR 0 4
77178: IFFALSE 77236
// if not k in mc_repair_vehicle [ i ] then
77180: LD_VAR 0 4
77184: PUSH
77185: LD_EXP 62
77189: PUSH
77190: LD_VAR 0 2
77194: ARRAY
77195: IN
77196: NOT
77197: IFFALSE 77236
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
77199: LD_ADDR_EXP 62
77203: PUSH
77204: LD_EXP 62
77208: PPUSH
77209: LD_VAR 0 2
77213: PPUSH
77214: LD_EXP 62
77218: PUSH
77219: LD_VAR 0 2
77223: ARRAY
77224: PUSH
77225: LD_VAR 0 4
77229: UNION
77230: PPUSH
77231: CALL_OW 1
77235: ST_TO_ADDR
77236: GO 77171
77238: POP
77239: POP
77240: GO 77153
77242: POP
77243: POP
// end ; if not mc_repair_vehicle [ i ] then
77244: LD_EXP 62
77248: PUSH
77249: LD_VAR 0 2
77253: ARRAY
77254: NOT
77255: IFFALSE 77259
// continue ;
77257: GO 76764
// for j in mc_repair_vehicle [ i ] do
77259: LD_ADDR_VAR 0 3
77263: PUSH
77264: LD_EXP 62
77268: PUSH
77269: LD_VAR 0 2
77273: ARRAY
77274: PUSH
77275: FOR_IN
77276: IFFALSE 77453
// begin if GetClass ( j ) <> 3 then
77278: LD_VAR 0 3
77282: PPUSH
77283: CALL_OW 257
77287: PUSH
77288: LD_INT 3
77290: NONEQUAL
77291: IFFALSE 77332
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] diff j ) ;
77293: LD_ADDR_EXP 62
77297: PUSH
77298: LD_EXP 62
77302: PPUSH
77303: LD_VAR 0 2
77307: PPUSH
77308: LD_EXP 62
77312: PUSH
77313: LD_VAR 0 2
77317: ARRAY
77318: PUSH
77319: LD_VAR 0 3
77323: DIFF
77324: PPUSH
77325: CALL_OW 1
77329: ST_TO_ADDR
// continue ;
77330: GO 77275
// end ; if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
77332: LD_VAR 0 3
77336: PPUSH
77337: CALL_OW 311
77341: NOT
77342: PUSH
77343: LD_VAR 0 3
77347: PUSH
77348: LD_EXP 53
77352: PUSH
77353: LD_VAR 0 2
77357: ARRAY
77358: PUSH
77359: LD_INT 1
77361: ARRAY
77362: IN
77363: NOT
77364: AND
77365: PUSH
77366: LD_VAR 0 3
77370: PUSH
77371: LD_EXP 53
77375: PUSH
77376: LD_VAR 0 2
77380: ARRAY
77381: PUSH
77382: LD_INT 2
77384: ARRAY
77385: IN
77386: NOT
77387: AND
77388: IFFALSE 77451
// begin if IsInUnit ( j ) then
77390: LD_VAR 0 3
77394: PPUSH
77395: CALL_OW 310
77399: IFFALSE 77412
// ComExitBuilding ( j ) else
77401: LD_VAR 0 3
77405: PPUSH
77406: CALL_OW 122
77410: GO 77451
// if not WantToRepairVehicle ( j , vehs [ 1 ] ) then
77412: LD_VAR 0 3
77416: PPUSH
77417: LD_VAR 0 7
77421: PUSH
77422: LD_INT 1
77424: ARRAY
77425: PPUSH
77426: CALL 58465 0 2
77430: NOT
77431: IFFALSE 77451
// ComRepairVehicle ( j , vehs [ 1 ] ) ;
77433: LD_VAR 0 3
77437: PPUSH
77438: LD_VAR 0 7
77442: PUSH
77443: LD_INT 1
77445: ARRAY
77446: PPUSH
77447: CALL_OW 129
// end ; end ;
77451: GO 77275
77453: POP
77454: POP
// end ;
77455: GO 76764
77457: POP
77458: POP
// end ;
77459: LD_VAR 0 1
77463: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
77464: LD_INT 0
77466: PPUSH
77467: PPUSH
77468: PPUSH
77469: PPUSH
77470: PPUSH
77471: PPUSH
77472: PPUSH
77473: PPUSH
77474: PPUSH
77475: PPUSH
77476: PPUSH
// if not mc_bases then
77477: LD_EXP 50
77481: NOT
77482: IFFALSE 77486
// exit ;
77484: GO 78288
// for i = 1 to mc_bases do
77486: LD_ADDR_VAR 0 2
77490: PUSH
77491: DOUBLE
77492: LD_INT 1
77494: DEC
77495: ST_TO_ADDR
77496: LD_EXP 50
77500: PUSH
77501: FOR_TO
77502: IFFALSE 78286
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
77504: LD_EXP 78
77508: PUSH
77509: LD_VAR 0 2
77513: ARRAY
77514: NOT
77515: PUSH
77516: LD_EXP 53
77520: PUSH
77521: LD_VAR 0 2
77525: ARRAY
77526: PUSH
77527: LD_INT 1
77529: ARRAY
77530: OR
77531: PUSH
77532: LD_EXP 53
77536: PUSH
77537: LD_VAR 0 2
77541: ARRAY
77542: PUSH
77543: LD_INT 2
77545: ARRAY
77546: OR
77547: PUSH
77548: LD_EXP 76
77552: PUSH
77553: LD_VAR 0 2
77557: ARRAY
77558: PPUSH
77559: LD_INT 1
77561: PPUSH
77562: CALL_OW 325
77566: NOT
77567: OR
77568: PUSH
77569: LD_EXP 73
77573: PUSH
77574: LD_VAR 0 2
77578: ARRAY
77579: OR
77580: IFFALSE 77584
// continue ;
77582: GO 77501
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
77584: LD_ADDR_VAR 0 8
77588: PUSH
77589: LD_EXP 50
77593: PUSH
77594: LD_VAR 0 2
77598: ARRAY
77599: PPUSH
77600: LD_INT 25
77602: PUSH
77603: LD_INT 4
77605: PUSH
77606: EMPTY
77607: LIST
77608: LIST
77609: PUSH
77610: LD_INT 50
77612: PUSH
77613: EMPTY
77614: LIST
77615: PUSH
77616: LD_INT 3
77618: PUSH
77619: LD_INT 60
77621: PUSH
77622: EMPTY
77623: LIST
77624: PUSH
77625: EMPTY
77626: LIST
77627: LIST
77628: PUSH
77629: EMPTY
77630: LIST
77631: LIST
77632: LIST
77633: PPUSH
77634: CALL_OW 72
77638: PUSH
77639: LD_EXP 54
77643: PUSH
77644: LD_VAR 0 2
77648: ARRAY
77649: DIFF
77650: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
77651: LD_ADDR_VAR 0 9
77655: PUSH
77656: LD_EXP 50
77660: PUSH
77661: LD_VAR 0 2
77665: ARRAY
77666: PPUSH
77667: LD_INT 2
77669: PUSH
77670: LD_INT 30
77672: PUSH
77673: LD_INT 0
77675: PUSH
77676: EMPTY
77677: LIST
77678: LIST
77679: PUSH
77680: LD_INT 30
77682: PUSH
77683: LD_INT 1
77685: PUSH
77686: EMPTY
77687: LIST
77688: LIST
77689: PUSH
77690: EMPTY
77691: LIST
77692: LIST
77693: LIST
77694: PPUSH
77695: CALL_OW 72
77699: ST_TO_ADDR
// if not tmp or not dep then
77700: LD_VAR 0 8
77704: NOT
77705: PUSH
77706: LD_VAR 0 9
77710: NOT
77711: OR
77712: IFFALSE 77716
// continue ;
77714: GO 77501
// side := GetSide ( tmp [ 1 ] ) ;
77716: LD_ADDR_VAR 0 11
77720: PUSH
77721: LD_VAR 0 8
77725: PUSH
77726: LD_INT 1
77728: ARRAY
77729: PPUSH
77730: CALL_OW 255
77734: ST_TO_ADDR
// dep := dep [ 1 ] ;
77735: LD_ADDR_VAR 0 9
77739: PUSH
77740: LD_VAR 0 9
77744: PUSH
77745: LD_INT 1
77747: ARRAY
77748: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
77749: LD_ADDR_VAR 0 7
77753: PUSH
77754: LD_EXP 78
77758: PUSH
77759: LD_VAR 0 2
77763: ARRAY
77764: PPUSH
77765: LD_INT 22
77767: PUSH
77768: LD_INT 0
77770: PUSH
77771: EMPTY
77772: LIST
77773: LIST
77774: PUSH
77775: LD_INT 25
77777: PUSH
77778: LD_INT 12
77780: PUSH
77781: EMPTY
77782: LIST
77783: LIST
77784: PUSH
77785: EMPTY
77786: LIST
77787: LIST
77788: PPUSH
77789: CALL_OW 70
77793: PUSH
77794: LD_INT 22
77796: PUSH
77797: LD_INT 0
77799: PUSH
77800: EMPTY
77801: LIST
77802: LIST
77803: PUSH
77804: LD_INT 25
77806: PUSH
77807: LD_INT 12
77809: PUSH
77810: EMPTY
77811: LIST
77812: LIST
77813: PUSH
77814: LD_INT 91
77816: PUSH
77817: LD_VAR 0 9
77821: PUSH
77822: LD_INT 20
77824: PUSH
77825: EMPTY
77826: LIST
77827: LIST
77828: LIST
77829: PUSH
77830: EMPTY
77831: LIST
77832: LIST
77833: LIST
77834: PPUSH
77835: CALL_OW 69
77839: UNION
77840: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
77841: LD_ADDR_VAR 0 10
77845: PUSH
77846: LD_EXP 78
77850: PUSH
77851: LD_VAR 0 2
77855: ARRAY
77856: PPUSH
77857: LD_INT 81
77859: PUSH
77860: LD_VAR 0 11
77864: PUSH
77865: EMPTY
77866: LIST
77867: LIST
77868: PPUSH
77869: CALL_OW 70
77873: ST_TO_ADDR
// if not apes or danger_at_area then
77874: LD_VAR 0 7
77878: NOT
77879: PUSH
77880: LD_VAR 0 10
77884: OR
77885: IFFALSE 77935
// begin if mc_taming [ i ] then
77887: LD_EXP 81
77891: PUSH
77892: LD_VAR 0 2
77896: ARRAY
77897: IFFALSE 77933
// begin MC_Reset ( i , 121 ) ;
77899: LD_VAR 0 2
77903: PPUSH
77904: LD_INT 121
77906: PPUSH
77907: CALL 63068 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
77911: LD_ADDR_EXP 81
77915: PUSH
77916: LD_EXP 81
77920: PPUSH
77921: LD_VAR 0 2
77925: PPUSH
77926: EMPTY
77927: PPUSH
77928: CALL_OW 1
77932: ST_TO_ADDR
// end ; continue ;
77933: GO 77501
// end ; for j in tmp do
77935: LD_ADDR_VAR 0 3
77939: PUSH
77940: LD_VAR 0 8
77944: PUSH
77945: FOR_IN
77946: IFFALSE 78282
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
77948: LD_VAR 0 3
77952: PUSH
77953: LD_EXP 81
77957: PUSH
77958: LD_VAR 0 2
77962: ARRAY
77963: IN
77964: NOT
77965: PUSH
77966: LD_EXP 81
77970: PUSH
77971: LD_VAR 0 2
77975: ARRAY
77976: PUSH
77977: LD_INT 3
77979: LESS
77980: AND
77981: IFFALSE 78039
// begin SetTag ( j , 121 ) ;
77983: LD_VAR 0 3
77987: PPUSH
77988: LD_INT 121
77990: PPUSH
77991: CALL_OW 109
// mc_taming := ReplaceIn ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
77995: LD_ADDR_EXP 81
77999: PUSH
78000: LD_EXP 81
78004: PPUSH
78005: LD_VAR 0 2
78009: PUSH
78010: LD_EXP 81
78014: PUSH
78015: LD_VAR 0 2
78019: ARRAY
78020: PUSH
78021: LD_INT 1
78023: PLUS
78024: PUSH
78025: EMPTY
78026: LIST
78027: LIST
78028: PPUSH
78029: LD_VAR 0 3
78033: PPUSH
78034: CALL 24858 0 3
78038: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
78039: LD_VAR 0 3
78043: PUSH
78044: LD_EXP 81
78048: PUSH
78049: LD_VAR 0 2
78053: ARRAY
78054: IN
78055: IFFALSE 78280
// begin if GetClass ( j ) <> 4 then
78057: LD_VAR 0 3
78061: PPUSH
78062: CALL_OW 257
78066: PUSH
78067: LD_INT 4
78069: NONEQUAL
78070: IFFALSE 78123
// begin mc_taming := Replace ( mc_taming , i , mc_taming [ i ] diff j ) ;
78072: LD_ADDR_EXP 81
78076: PUSH
78077: LD_EXP 81
78081: PPUSH
78082: LD_VAR 0 2
78086: PPUSH
78087: LD_EXP 81
78091: PUSH
78092: LD_VAR 0 2
78096: ARRAY
78097: PUSH
78098: LD_VAR 0 3
78102: DIFF
78103: PPUSH
78104: CALL_OW 1
78108: ST_TO_ADDR
// SetTag ( j , 0 ) ;
78109: LD_VAR 0 3
78113: PPUSH
78114: LD_INT 0
78116: PPUSH
78117: CALL_OW 109
// continue ;
78121: GO 77945
// end ; if IsInUnit ( j ) then
78123: LD_VAR 0 3
78127: PPUSH
78128: CALL_OW 310
78132: IFFALSE 78143
// ComExitBuilding ( j ) ;
78134: LD_VAR 0 3
78138: PPUSH
78139: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
78143: LD_ADDR_VAR 0 6
78147: PUSH
78148: LD_VAR 0 7
78152: PPUSH
78153: LD_VAR 0 3
78157: PPUSH
78158: CALL_OW 74
78162: ST_TO_ADDR
// if not ape then
78163: LD_VAR 0 6
78167: NOT
78168: IFFALSE 78172
// break ;
78170: GO 78282
// x := GetX ( ape ) ;
78172: LD_ADDR_VAR 0 4
78176: PUSH
78177: LD_VAR 0 6
78181: PPUSH
78182: CALL_OW 250
78186: ST_TO_ADDR
// y := GetY ( ape ) ;
78187: LD_ADDR_VAR 0 5
78191: PUSH
78192: LD_VAR 0 6
78196: PPUSH
78197: CALL_OW 251
78201: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
78202: LD_VAR 0 4
78206: PPUSH
78207: LD_VAR 0 5
78211: PPUSH
78212: CALL_OW 488
78216: NOT
78217: PUSH
78218: LD_VAR 0 11
78222: PPUSH
78223: LD_VAR 0 4
78227: PPUSH
78228: LD_VAR 0 5
78232: PPUSH
78233: LD_INT 20
78235: PPUSH
78236: CALL 25754 0 4
78240: PUSH
78241: LD_INT 4
78243: ARRAY
78244: OR
78245: IFFALSE 78249
// break ;
78247: GO 78282
// if not HasTask ( j ) then
78249: LD_VAR 0 3
78253: PPUSH
78254: CALL_OW 314
78258: NOT
78259: IFFALSE 78280
// ComTameXY ( j , x , y ) ;
78261: LD_VAR 0 3
78265: PPUSH
78266: LD_VAR 0 4
78270: PPUSH
78271: LD_VAR 0 5
78275: PPUSH
78276: CALL_OW 131
// end ; end ;
78280: GO 77945
78282: POP
78283: POP
// end ;
78284: GO 77501
78286: POP
78287: POP
// end ;
78288: LD_VAR 0 1
78292: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
78293: LD_INT 0
78295: PPUSH
78296: PPUSH
78297: PPUSH
78298: PPUSH
78299: PPUSH
78300: PPUSH
78301: PPUSH
78302: PPUSH
// if not mc_bases then
78303: LD_EXP 50
78307: NOT
78308: IFFALSE 78312
// exit ;
78310: GO 78938
// for i = 1 to mc_bases do
78312: LD_ADDR_VAR 0 2
78316: PUSH
78317: DOUBLE
78318: LD_INT 1
78320: DEC
78321: ST_TO_ADDR
78322: LD_EXP 50
78326: PUSH
78327: FOR_TO
78328: IFFALSE 78936
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
78330: LD_EXP 79
78334: PUSH
78335: LD_VAR 0 2
78339: ARRAY
78340: NOT
78341: PUSH
78342: LD_EXP 79
78346: PUSH
78347: LD_VAR 0 2
78351: ARRAY
78352: PPUSH
78353: LD_INT 25
78355: PUSH
78356: LD_INT 12
78358: PUSH
78359: EMPTY
78360: LIST
78361: LIST
78362: PPUSH
78363: CALL_OW 72
78367: NOT
78368: OR
78369: IFFALSE 78373
// continue ;
78371: GO 78327
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
78373: LD_ADDR_VAR 0 5
78377: PUSH
78378: LD_EXP 79
78382: PUSH
78383: LD_VAR 0 2
78387: ARRAY
78388: PUSH
78389: LD_INT 1
78391: ARRAY
78392: PPUSH
78393: CALL_OW 255
78397: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
78398: LD_VAR 0 5
78402: PPUSH
78403: LD_INT 2
78405: PPUSH
78406: CALL_OW 325
78410: IFFALSE 78663
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
78412: LD_ADDR_VAR 0 4
78416: PUSH
78417: LD_EXP 79
78421: PUSH
78422: LD_VAR 0 2
78426: ARRAY
78427: PPUSH
78428: LD_INT 25
78430: PUSH
78431: LD_INT 16
78433: PUSH
78434: EMPTY
78435: LIST
78436: LIST
78437: PPUSH
78438: CALL_OW 72
78442: ST_TO_ADDR
// if tmp < 6 then
78443: LD_VAR 0 4
78447: PUSH
78448: LD_INT 6
78450: LESS
78451: IFFALSE 78663
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
78453: LD_ADDR_VAR 0 6
78457: PUSH
78458: LD_EXP 50
78462: PUSH
78463: LD_VAR 0 2
78467: ARRAY
78468: PPUSH
78469: LD_INT 2
78471: PUSH
78472: LD_INT 30
78474: PUSH
78475: LD_INT 0
78477: PUSH
78478: EMPTY
78479: LIST
78480: LIST
78481: PUSH
78482: LD_INT 30
78484: PUSH
78485: LD_INT 1
78487: PUSH
78488: EMPTY
78489: LIST
78490: LIST
78491: PUSH
78492: EMPTY
78493: LIST
78494: LIST
78495: LIST
78496: PPUSH
78497: CALL_OW 72
78501: ST_TO_ADDR
// if depot then
78502: LD_VAR 0 6
78506: IFFALSE 78663
// begin selected := 0 ;
78508: LD_ADDR_VAR 0 7
78512: PUSH
78513: LD_INT 0
78515: ST_TO_ADDR
// for j in depot do
78516: LD_ADDR_VAR 0 3
78520: PUSH
78521: LD_VAR 0 6
78525: PUSH
78526: FOR_IN
78527: IFFALSE 78558
// begin if UnitsInside ( j ) < 6 then
78529: LD_VAR 0 3
78533: PPUSH
78534: CALL_OW 313
78538: PUSH
78539: LD_INT 6
78541: LESS
78542: IFFALSE 78556
// begin selected := j ;
78544: LD_ADDR_VAR 0 7
78548: PUSH
78549: LD_VAR 0 3
78553: ST_TO_ADDR
// break ;
78554: GO 78558
// end ; end ;
78556: GO 78526
78558: POP
78559: POP
// if selected then
78560: LD_VAR 0 7
78564: IFFALSE 78663
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
78566: LD_ADDR_VAR 0 3
78570: PUSH
78571: LD_EXP 79
78575: PUSH
78576: LD_VAR 0 2
78580: ARRAY
78581: PPUSH
78582: LD_INT 25
78584: PUSH
78585: LD_INT 12
78587: PUSH
78588: EMPTY
78589: LIST
78590: LIST
78591: PPUSH
78592: CALL_OW 72
78596: PUSH
78597: FOR_IN
78598: IFFALSE 78661
// if not HasTask ( j ) then
78600: LD_VAR 0 3
78604: PPUSH
78605: CALL_OW 314
78609: NOT
78610: IFFALSE 78659
// begin if not IsInUnit ( j ) then
78612: LD_VAR 0 3
78616: PPUSH
78617: CALL_OW 310
78621: NOT
78622: IFFALSE 78638
// ComEnterUnit ( j , selected ) ;
78624: LD_VAR 0 3
78628: PPUSH
78629: LD_VAR 0 7
78633: PPUSH
78634: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
78638: LD_VAR 0 3
78642: PPUSH
78643: LD_INT 16
78645: PPUSH
78646: CALL_OW 183
// AddComExitBuilding ( j ) ;
78650: LD_VAR 0 3
78654: PPUSH
78655: CALL_OW 182
// end ;
78659: GO 78597
78661: POP
78662: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
78663: LD_VAR 0 5
78667: PPUSH
78668: LD_INT 11
78670: PPUSH
78671: CALL_OW 325
78675: IFFALSE 78934
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
78677: LD_ADDR_VAR 0 4
78681: PUSH
78682: LD_EXP 79
78686: PUSH
78687: LD_VAR 0 2
78691: ARRAY
78692: PPUSH
78693: LD_INT 25
78695: PUSH
78696: LD_INT 16
78698: PUSH
78699: EMPTY
78700: LIST
78701: LIST
78702: PPUSH
78703: CALL_OW 72
78707: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
78708: LD_VAR 0 4
78712: PUSH
78713: LD_INT 6
78715: GREATEREQUAL
78716: PUSH
78717: LD_VAR 0 5
78721: PPUSH
78722: LD_INT 2
78724: PPUSH
78725: CALL_OW 325
78729: NOT
78730: OR
78731: IFFALSE 78934
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
78733: LD_ADDR_VAR 0 8
78737: PUSH
78738: LD_EXP 50
78742: PUSH
78743: LD_VAR 0 2
78747: ARRAY
78748: PPUSH
78749: LD_INT 2
78751: PUSH
78752: LD_INT 30
78754: PUSH
78755: LD_INT 4
78757: PUSH
78758: EMPTY
78759: LIST
78760: LIST
78761: PUSH
78762: LD_INT 30
78764: PUSH
78765: LD_INT 5
78767: PUSH
78768: EMPTY
78769: LIST
78770: LIST
78771: PUSH
78772: EMPTY
78773: LIST
78774: LIST
78775: LIST
78776: PPUSH
78777: CALL_OW 72
78781: ST_TO_ADDR
// if barracks then
78782: LD_VAR 0 8
78786: IFFALSE 78934
// begin selected := 0 ;
78788: LD_ADDR_VAR 0 7
78792: PUSH
78793: LD_INT 0
78795: ST_TO_ADDR
// for j in barracks do
78796: LD_ADDR_VAR 0 3
78800: PUSH
78801: LD_VAR 0 8
78805: PUSH
78806: FOR_IN
78807: IFFALSE 78838
// begin if UnitsInside ( j ) < 6 then
78809: LD_VAR 0 3
78813: PPUSH
78814: CALL_OW 313
78818: PUSH
78819: LD_INT 6
78821: LESS
78822: IFFALSE 78836
// begin selected := j ;
78824: LD_ADDR_VAR 0 7
78828: PUSH
78829: LD_VAR 0 3
78833: ST_TO_ADDR
// break ;
78834: GO 78838
// end ; end ;
78836: GO 78806
78838: POP
78839: POP
// if selected then
78840: LD_VAR 0 7
78844: IFFALSE 78934
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
78846: LD_ADDR_VAR 0 3
78850: PUSH
78851: LD_EXP 79
78855: PUSH
78856: LD_VAR 0 2
78860: ARRAY
78861: PPUSH
78862: LD_INT 25
78864: PUSH
78865: LD_INT 12
78867: PUSH
78868: EMPTY
78869: LIST
78870: LIST
78871: PPUSH
78872: CALL_OW 72
78876: PUSH
78877: FOR_IN
78878: IFFALSE 78932
// if not IsInUnit ( j ) and not HasTask ( j ) then
78880: LD_VAR 0 3
78884: PPUSH
78885: CALL_OW 310
78889: NOT
78890: PUSH
78891: LD_VAR 0 3
78895: PPUSH
78896: CALL_OW 314
78900: NOT
78901: AND
78902: IFFALSE 78930
// begin ComEnterUnit ( j , selected ) ;
78904: LD_VAR 0 3
78908: PPUSH
78909: LD_VAR 0 7
78913: PPUSH
78914: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
78918: LD_VAR 0 3
78922: PPUSH
78923: LD_INT 15
78925: PPUSH
78926: CALL_OW 183
// end ;
78930: GO 78877
78932: POP
78933: POP
// end ; end ; end ; end ; end ;
78934: GO 78327
78936: POP
78937: POP
// end ;
78938: LD_VAR 0 1
78942: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
78943: LD_INT 0
78945: PPUSH
78946: PPUSH
78947: PPUSH
78948: PPUSH
// if not mc_bases then
78949: LD_EXP 50
78953: NOT
78954: IFFALSE 78958
// exit ;
78956: GO 79136
// for i = 1 to mc_bases do
78958: LD_ADDR_VAR 0 2
78962: PUSH
78963: DOUBLE
78964: LD_INT 1
78966: DEC
78967: ST_TO_ADDR
78968: LD_EXP 50
78972: PUSH
78973: FOR_TO
78974: IFFALSE 79134
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
78976: LD_ADDR_VAR 0 4
78980: PUSH
78981: LD_EXP 50
78985: PUSH
78986: LD_VAR 0 2
78990: ARRAY
78991: PPUSH
78992: LD_INT 25
78994: PUSH
78995: LD_INT 9
78997: PUSH
78998: EMPTY
78999: LIST
79000: LIST
79001: PPUSH
79002: CALL_OW 72
79006: ST_TO_ADDR
// if not tmp then
79007: LD_VAR 0 4
79011: NOT
79012: IFFALSE 79016
// continue ;
79014: GO 78973
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
79016: LD_EXP 76
79020: PUSH
79021: LD_VAR 0 2
79025: ARRAY
79026: PPUSH
79027: LD_INT 29
79029: PPUSH
79030: CALL_OW 325
79034: NOT
79035: PUSH
79036: LD_EXP 76
79040: PUSH
79041: LD_VAR 0 2
79045: ARRAY
79046: PPUSH
79047: LD_INT 28
79049: PPUSH
79050: CALL_OW 325
79054: NOT
79055: AND
79056: IFFALSE 79060
// continue ;
79058: GO 78973
// for j in tmp do
79060: LD_ADDR_VAR 0 3
79064: PUSH
79065: LD_VAR 0 4
79069: PUSH
79070: FOR_IN
79071: IFFALSE 79130
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
79073: LD_VAR 0 3
79077: PUSH
79078: LD_EXP 53
79082: PUSH
79083: LD_VAR 0 2
79087: ARRAY
79088: PUSH
79089: LD_INT 1
79091: ARRAY
79092: IN
79093: NOT
79094: PUSH
79095: LD_VAR 0 3
79099: PUSH
79100: LD_EXP 53
79104: PUSH
79105: LD_VAR 0 2
79109: ARRAY
79110: PUSH
79111: LD_INT 2
79113: ARRAY
79114: IN
79115: NOT
79116: AND
79117: IFFALSE 79128
// ComSpaceTimeShoot ( j ) ;
79119: LD_VAR 0 3
79123: PPUSH
79124: CALL 20819 0 1
79128: GO 79070
79130: POP
79131: POP
// end ;
79132: GO 78973
79134: POP
79135: POP
// end ;
79136: LD_VAR 0 1
79140: RET
// export function MC_TeleportExit ( ) ; var i , j , x , y , save_point , tmp , teleports , sci ; begin
79141: LD_INT 0
79143: PPUSH
79144: PPUSH
79145: PPUSH
79146: PPUSH
79147: PPUSH
79148: PPUSH
79149: PPUSH
79150: PPUSH
79151: PPUSH
// if not mc_bases then
79152: LD_EXP 50
79156: NOT
79157: IFFALSE 79161
// exit ;
79159: GO 79783
// for i = 1 to mc_bases do
79161: LD_ADDR_VAR 0 2
79165: PUSH
79166: DOUBLE
79167: LD_INT 1
79169: DEC
79170: ST_TO_ADDR
79171: LD_EXP 50
79175: PUSH
79176: FOR_TO
79177: IFFALSE 79781
// begin if not mc_teleport_exit [ i ] or GetTech ( tech_targTeleport , mc_sides [ i ] ) <> state_researched then
79179: LD_EXP 85
79183: PUSH
79184: LD_VAR 0 2
79188: ARRAY
79189: NOT
79190: PUSH
79191: LD_INT 38
79193: PPUSH
79194: LD_EXP 76
79198: PUSH
79199: LD_VAR 0 2
79203: ARRAY
79204: PPUSH
79205: CALL_OW 321
79209: PUSH
79210: LD_INT 2
79212: NONEQUAL
79213: OR
79214: IFFALSE 79218
// continue ;
79216: GO 79176
// teleports := UnitFilter ( mc_bases [ i ] , [ f_btype , b_teleport ] ) ;
79218: LD_ADDR_VAR 0 8
79222: PUSH
79223: LD_EXP 50
79227: PUSH
79228: LD_VAR 0 2
79232: ARRAY
79233: PPUSH
79234: LD_INT 30
79236: PUSH
79237: LD_INT 34
79239: PUSH
79240: EMPTY
79241: LIST
79242: LIST
79243: PPUSH
79244: CALL_OW 72
79248: ST_TO_ADDR
// sci := FilterByTag ( UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) , 0 ) ;
79249: LD_ADDR_VAR 0 9
79253: PUSH
79254: LD_EXP 50
79258: PUSH
79259: LD_VAR 0 2
79263: ARRAY
79264: PPUSH
79265: LD_INT 25
79267: PUSH
79268: LD_INT 4
79270: PUSH
79271: EMPTY
79272: LIST
79273: LIST
79274: PPUSH
79275: CALL_OW 72
79279: PPUSH
79280: LD_INT 0
79282: PPUSH
79283: CALL 54127 0 2
79287: ST_TO_ADDR
// if not sci or not teleports or FilterByTag ( mc_bases [ i ] , 124 ) then
79288: LD_VAR 0 9
79292: NOT
79293: PUSH
79294: LD_VAR 0 8
79298: NOT
79299: OR
79300: PUSH
79301: LD_EXP 50
79305: PUSH
79306: LD_VAR 0 2
79310: ARRAY
79311: PPUSH
79312: LD_INT 124
79314: PPUSH
79315: CALL 54127 0 2
79319: OR
79320: IFFALSE 79324
// continue ;
79322: GO 79176
// if mc_teleport_exit_set [ i ] < mc_teleport_exit [ i ] and mc_teleport_exit_set [ i ] < teleports then
79324: LD_EXP 86
79328: PUSH
79329: LD_VAR 0 2
79333: ARRAY
79334: PUSH
79335: LD_EXP 85
79339: PUSH
79340: LD_VAR 0 2
79344: ARRAY
79345: LESS
79346: PUSH
79347: LD_EXP 86
79351: PUSH
79352: LD_VAR 0 2
79356: ARRAY
79357: PUSH
79358: LD_VAR 0 8
79362: LESS
79363: AND
79364: IFFALSE 79779
// begin tmp := sci [ 1 ] ;
79366: LD_ADDR_VAR 0 7
79370: PUSH
79371: LD_VAR 0 9
79375: PUSH
79376: LD_INT 1
79378: ARRAY
79379: ST_TO_ADDR
// SetTag ( tmp , 124 ) ;
79380: LD_VAR 0 7
79384: PPUSH
79385: LD_INT 124
79387: PPUSH
79388: CALL_OW 109
// for j = mc_teleport_exit [ i ] downto mc_teleport_exit [ i ] do
79392: LD_ADDR_VAR 0 3
79396: PUSH
79397: DOUBLE
79398: LD_EXP 85
79402: PUSH
79403: LD_VAR 0 2
79407: ARRAY
79408: INC
79409: ST_TO_ADDR
79410: LD_EXP 85
79414: PUSH
79415: LD_VAR 0 2
79419: ARRAY
79420: PUSH
79421: FOR_DOWNTO
79422: IFFALSE 79765
// begin if IsInUnit ( tmp ) then
79424: LD_VAR 0 7
79428: PPUSH
79429: CALL_OW 310
79433: IFFALSE 79444
// ComExitBuilding ( tmp ) ;
79435: LD_VAR 0 7
79439: PPUSH
79440: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
79444: LD_INT 35
79446: PPUSH
79447: CALL_OW 67
// until not IsInUnit ( tmp ) and not HasTask ( tmp ) ;
79451: LD_VAR 0 7
79455: PPUSH
79456: CALL_OW 310
79460: NOT
79461: PUSH
79462: LD_VAR 0 7
79466: PPUSH
79467: CALL_OW 314
79471: NOT
79472: AND
79473: IFFALSE 79444
// save_point := [ GetX ( tmp ) , GetY ( tmp ) ] ;
79475: LD_ADDR_VAR 0 6
79479: PUSH
79480: LD_VAR 0 7
79484: PPUSH
79485: CALL_OW 250
79489: PUSH
79490: LD_VAR 0 7
79494: PPUSH
79495: CALL_OW 251
79499: PUSH
79500: EMPTY
79501: LIST
79502: LIST
79503: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
79504: LD_INT 35
79506: PPUSH
79507: CALL_OW 67
// x := mc_teleport_exit [ i ] [ j ] [ 1 ] ;
79511: LD_ADDR_VAR 0 4
79515: PUSH
79516: LD_EXP 85
79520: PUSH
79521: LD_VAR 0 2
79525: ARRAY
79526: PUSH
79527: LD_VAR 0 3
79531: ARRAY
79532: PUSH
79533: LD_INT 1
79535: ARRAY
79536: ST_TO_ADDR
// y := mc_teleport_exit [ i ] [ j ] [ 2 ] ;
79537: LD_ADDR_VAR 0 5
79541: PUSH
79542: LD_EXP 85
79546: PUSH
79547: LD_VAR 0 2
79551: ARRAY
79552: PUSH
79553: LD_VAR 0 3
79557: ARRAY
79558: PUSH
79559: LD_INT 2
79561: ARRAY
79562: ST_TO_ADDR
// if DangerAtRange ( tmp , 10 ) [ 4 ] then
79563: LD_VAR 0 7
79567: PPUSH
79568: LD_INT 10
79570: PPUSH
79571: CALL 27457 0 2
79575: PUSH
79576: LD_INT 4
79578: ARRAY
79579: IFFALSE 79617
// begin ComMoveXY ( tmp , save_point [ 1 ] , save_point [ 2 ] ) ;
79581: LD_VAR 0 7
79585: PPUSH
79586: LD_VAR 0 6
79590: PUSH
79591: LD_INT 1
79593: ARRAY
79594: PPUSH
79595: LD_VAR 0 6
79599: PUSH
79600: LD_INT 2
79602: ARRAY
79603: PPUSH
79604: CALL_OW 111
// wait ( 0 0$10 ) ;
79608: LD_INT 350
79610: PPUSH
79611: CALL_OW 67
// end else
79615: GO 79643
// begin ComMoveXY ( tmp , x , y ) ;
79617: LD_VAR 0 7
79621: PPUSH
79622: LD_VAR 0 4
79626: PPUSH
79627: LD_VAR 0 5
79631: PPUSH
79632: CALL_OW 111
// wait ( 0 0$3 ) ;
79636: LD_INT 105
79638: PPUSH
79639: CALL_OW 67
// end ; until IsAt ( tmp , x , y ) ;
79643: LD_VAR 0 7
79647: PPUSH
79648: LD_VAR 0 4
79652: PPUSH
79653: LD_VAR 0 5
79657: PPUSH
79658: CALL_OW 307
79662: IFFALSE 79504
// ComTeleportExit ( tmp , x , y , teleports [ j ] ) ;
79664: LD_VAR 0 7
79668: PPUSH
79669: LD_VAR 0 4
79673: PPUSH
79674: LD_VAR 0 5
79678: PPUSH
79679: LD_VAR 0 8
79683: PUSH
79684: LD_VAR 0 3
79688: ARRAY
79689: PPUSH
79690: CALL_OW 156
// repeat wait ( 0 0$1 ) ;
79694: LD_INT 35
79696: PPUSH
79697: CALL_OW 67
// until not HasTask ( tmp ) ;
79701: LD_VAR 0 7
79705: PPUSH
79706: CALL_OW 314
79710: NOT
79711: IFFALSE 79694
// mc_teleport_exit_set := ReplaceIn ( mc_teleport_exit_set , [ i , mc_teleport_exit_set [ i ] + 1 ] , teleports [ j ] ) ;
79713: LD_ADDR_EXP 86
79717: PUSH
79718: LD_EXP 86
79722: PPUSH
79723: LD_VAR 0 2
79727: PUSH
79728: LD_EXP 86
79732: PUSH
79733: LD_VAR 0 2
79737: ARRAY
79738: PUSH
79739: LD_INT 1
79741: PLUS
79742: PUSH
79743: EMPTY
79744: LIST
79745: LIST
79746: PPUSH
79747: LD_VAR 0 8
79751: PUSH
79752: LD_VAR 0 3
79756: ARRAY
79757: PPUSH
79758: CALL 24858 0 3
79762: ST_TO_ADDR
// end ;
79763: GO 79421
79765: POP
79766: POP
// MC_Reset ( i , 124 ) ;
79767: LD_VAR 0 2
79771: PPUSH
79772: LD_INT 124
79774: PPUSH
79775: CALL 63068 0 2
// end ; end ;
79779: GO 79176
79781: POP
79782: POP
// end ;
79783: LD_VAR 0 1
79787: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
79788: LD_INT 0
79790: PPUSH
79791: PPUSH
79792: PPUSH
// if not mc_bases then
79793: LD_EXP 50
79797: NOT
79798: IFFALSE 79802
// exit ;
79800: GO 80408
// for i = 1 to mc_bases do
79802: LD_ADDR_VAR 0 2
79806: PUSH
79807: DOUBLE
79808: LD_INT 1
79810: DEC
79811: ST_TO_ADDR
79812: LD_EXP 50
79816: PUSH
79817: FOR_TO
79818: IFFALSE 80406
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
79820: LD_ADDR_VAR 0 3
79824: PUSH
79825: LD_EXP 50
79829: PUSH
79830: LD_VAR 0 2
79834: ARRAY
79835: PPUSH
79836: LD_INT 25
79838: PUSH
79839: LD_INT 4
79841: PUSH
79842: EMPTY
79843: LIST
79844: LIST
79845: PPUSH
79846: CALL_OW 72
79850: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
79851: LD_VAR 0 3
79855: NOT
79856: PUSH
79857: LD_EXP 87
79861: PUSH
79862: LD_VAR 0 2
79866: ARRAY
79867: NOT
79868: OR
79869: PUSH
79870: LD_EXP 50
79874: PUSH
79875: LD_VAR 0 2
79879: ARRAY
79880: PPUSH
79881: LD_INT 2
79883: PUSH
79884: LD_INT 30
79886: PUSH
79887: LD_INT 0
79889: PUSH
79890: EMPTY
79891: LIST
79892: LIST
79893: PUSH
79894: LD_INT 30
79896: PUSH
79897: LD_INT 1
79899: PUSH
79900: EMPTY
79901: LIST
79902: LIST
79903: PUSH
79904: EMPTY
79905: LIST
79906: LIST
79907: LIST
79908: PPUSH
79909: CALL_OW 72
79913: NOT
79914: OR
79915: IFFALSE 79965
// begin if mc_deposits_finder [ i ] then
79917: LD_EXP 88
79921: PUSH
79922: LD_VAR 0 2
79926: ARRAY
79927: IFFALSE 79963
// begin MC_Reset ( i , 125 ) ;
79929: LD_VAR 0 2
79933: PPUSH
79934: LD_INT 125
79936: PPUSH
79937: CALL 63068 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
79941: LD_ADDR_EXP 88
79945: PUSH
79946: LD_EXP 88
79950: PPUSH
79951: LD_VAR 0 2
79955: PPUSH
79956: EMPTY
79957: PPUSH
79958: CALL_OW 1
79962: ST_TO_ADDR
// end ; continue ;
79963: GO 79817
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
79965: LD_EXP 87
79969: PUSH
79970: LD_VAR 0 2
79974: ARRAY
79975: PUSH
79976: LD_INT 1
79978: ARRAY
79979: PUSH
79980: LD_INT 3
79982: ARRAY
79983: PUSH
79984: LD_INT 1
79986: EQUAL
79987: PUSH
79988: LD_INT 20
79990: PPUSH
79991: LD_EXP 76
79995: PUSH
79996: LD_VAR 0 2
80000: ARRAY
80001: PPUSH
80002: CALL_OW 321
80006: PUSH
80007: LD_INT 2
80009: NONEQUAL
80010: AND
80011: IFFALSE 80061
// begin if mc_deposits_finder [ i ] then
80013: LD_EXP 88
80017: PUSH
80018: LD_VAR 0 2
80022: ARRAY
80023: IFFALSE 80059
// begin MC_Reset ( i , 125 ) ;
80025: LD_VAR 0 2
80029: PPUSH
80030: LD_INT 125
80032: PPUSH
80033: CALL 63068 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
80037: LD_ADDR_EXP 88
80041: PUSH
80042: LD_EXP 88
80046: PPUSH
80047: LD_VAR 0 2
80051: PPUSH
80052: EMPTY
80053: PPUSH
80054: CALL_OW 1
80058: ST_TO_ADDR
// end ; continue ;
80059: GO 79817
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
80061: LD_EXP 87
80065: PUSH
80066: LD_VAR 0 2
80070: ARRAY
80071: PUSH
80072: LD_INT 1
80074: ARRAY
80075: PUSH
80076: LD_INT 1
80078: ARRAY
80079: PPUSH
80080: LD_EXP 87
80084: PUSH
80085: LD_VAR 0 2
80089: ARRAY
80090: PUSH
80091: LD_INT 1
80093: ARRAY
80094: PUSH
80095: LD_INT 2
80097: ARRAY
80098: PPUSH
80099: LD_EXP 76
80103: PUSH
80104: LD_VAR 0 2
80108: ARRAY
80109: PPUSH
80110: CALL_OW 440
80114: IFFALSE 80157
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
80116: LD_ADDR_EXP 87
80120: PUSH
80121: LD_EXP 87
80125: PPUSH
80126: LD_VAR 0 2
80130: PPUSH
80131: LD_EXP 87
80135: PUSH
80136: LD_VAR 0 2
80140: ARRAY
80141: PPUSH
80142: LD_INT 1
80144: PPUSH
80145: CALL_OW 3
80149: PPUSH
80150: CALL_OW 1
80154: ST_TO_ADDR
80155: GO 80404
// begin if not mc_deposits_finder [ i ] then
80157: LD_EXP 88
80161: PUSH
80162: LD_VAR 0 2
80166: ARRAY
80167: NOT
80168: IFFALSE 80220
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
80170: LD_ADDR_EXP 88
80174: PUSH
80175: LD_EXP 88
80179: PPUSH
80180: LD_VAR 0 2
80184: PPUSH
80185: LD_VAR 0 3
80189: PUSH
80190: LD_INT 1
80192: ARRAY
80193: PUSH
80194: EMPTY
80195: LIST
80196: PPUSH
80197: CALL_OW 1
80201: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
80202: LD_VAR 0 3
80206: PUSH
80207: LD_INT 1
80209: ARRAY
80210: PPUSH
80211: LD_INT 125
80213: PPUSH
80214: CALL_OW 109
// end else
80218: GO 80404
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
80220: LD_EXP 88
80224: PUSH
80225: LD_VAR 0 2
80229: ARRAY
80230: PUSH
80231: LD_INT 1
80233: ARRAY
80234: PPUSH
80235: CALL_OW 310
80239: IFFALSE 80262
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
80241: LD_EXP 88
80245: PUSH
80246: LD_VAR 0 2
80250: ARRAY
80251: PUSH
80252: LD_INT 1
80254: ARRAY
80255: PPUSH
80256: CALL_OW 122
80260: GO 80404
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
80262: LD_EXP 88
80266: PUSH
80267: LD_VAR 0 2
80271: ARRAY
80272: PUSH
80273: LD_INT 1
80275: ARRAY
80276: PPUSH
80277: CALL_OW 314
80281: NOT
80282: PUSH
80283: LD_EXP 88
80287: PUSH
80288: LD_VAR 0 2
80292: ARRAY
80293: PUSH
80294: LD_INT 1
80296: ARRAY
80297: PPUSH
80298: LD_EXP 87
80302: PUSH
80303: LD_VAR 0 2
80307: ARRAY
80308: PUSH
80309: LD_INT 1
80311: ARRAY
80312: PUSH
80313: LD_INT 1
80315: ARRAY
80316: PPUSH
80317: LD_EXP 87
80321: PUSH
80322: LD_VAR 0 2
80326: ARRAY
80327: PUSH
80328: LD_INT 1
80330: ARRAY
80331: PUSH
80332: LD_INT 2
80334: ARRAY
80335: PPUSH
80336: CALL_OW 297
80340: PUSH
80341: LD_INT 6
80343: GREATER
80344: AND
80345: IFFALSE 80404
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
80347: LD_EXP 88
80351: PUSH
80352: LD_VAR 0 2
80356: ARRAY
80357: PUSH
80358: LD_INT 1
80360: ARRAY
80361: PPUSH
80362: LD_EXP 87
80366: PUSH
80367: LD_VAR 0 2
80371: ARRAY
80372: PUSH
80373: LD_INT 1
80375: ARRAY
80376: PUSH
80377: LD_INT 1
80379: ARRAY
80380: PPUSH
80381: LD_EXP 87
80385: PUSH
80386: LD_VAR 0 2
80390: ARRAY
80391: PUSH
80392: LD_INT 1
80394: ARRAY
80395: PUSH
80396: LD_INT 2
80398: ARRAY
80399: PPUSH
80400: CALL_OW 111
// end ; end ; end ;
80404: GO 79817
80406: POP
80407: POP
// end ;
80408: LD_VAR 0 1
80412: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts , mcts , x ; begin
80413: LD_INT 0
80415: PPUSH
80416: PPUSH
80417: PPUSH
80418: PPUSH
80419: PPUSH
80420: PPUSH
80421: PPUSH
80422: PPUSH
80423: PPUSH
80424: PPUSH
80425: PPUSH
// if not mc_bases then
80426: LD_EXP 50
80430: NOT
80431: IFFALSE 80435
// exit ;
80433: GO 81375
// for i = 1 to mc_bases do
80435: LD_ADDR_VAR 0 2
80439: PUSH
80440: DOUBLE
80441: LD_INT 1
80443: DEC
80444: ST_TO_ADDR
80445: LD_EXP 50
80449: PUSH
80450: FOR_TO
80451: IFFALSE 81373
// begin if not mc_bases [ i ] or mc_scan [ i ] then
80453: LD_EXP 50
80457: PUSH
80458: LD_VAR 0 2
80462: ARRAY
80463: NOT
80464: PUSH
80465: LD_EXP 73
80469: PUSH
80470: LD_VAR 0 2
80474: ARRAY
80475: OR
80476: IFFALSE 80480
// continue ;
80478: GO 80450
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
80480: LD_ADDR_VAR 0 7
80484: PUSH
80485: LD_EXP 50
80489: PUSH
80490: LD_VAR 0 2
80494: ARRAY
80495: PUSH
80496: LD_INT 1
80498: ARRAY
80499: PPUSH
80500: CALL_OW 248
80504: ST_TO_ADDR
// if nation = 3 or not UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) then
80505: LD_VAR 0 7
80509: PUSH
80510: LD_INT 3
80512: EQUAL
80513: PUSH
80514: LD_EXP 69
80518: PUSH
80519: LD_VAR 0 2
80523: ARRAY
80524: PUSH
80525: LD_EXP 72
80529: PUSH
80530: LD_VAR 0 2
80534: ARRAY
80535: UNION
80536: PPUSH
80537: LD_INT 33
80539: PUSH
80540: LD_INT 2
80542: PUSH
80543: EMPTY
80544: LIST
80545: LIST
80546: PPUSH
80547: CALL_OW 72
80551: NOT
80552: OR
80553: IFFALSE 80557
// continue ;
80555: GO 80450
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
80557: LD_ADDR_VAR 0 9
80561: PUSH
80562: LD_EXP 50
80566: PUSH
80567: LD_VAR 0 2
80571: ARRAY
80572: PPUSH
80573: LD_INT 30
80575: PUSH
80576: LD_INT 36
80578: PUSH
80579: EMPTY
80580: LIST
80581: LIST
80582: PPUSH
80583: CALL_OW 72
80587: ST_TO_ADDR
// mcts := UnitFilter ( mc_vehicles [ i ] , [ f_weapon , ar_control_tower ] ) ;
80588: LD_ADDR_VAR 0 10
80592: PUSH
80593: LD_EXP 69
80597: PUSH
80598: LD_VAR 0 2
80602: ARRAY
80603: PPUSH
80604: LD_INT 34
80606: PUSH
80607: LD_INT 31
80609: PUSH
80610: EMPTY
80611: LIST
80612: LIST
80613: PPUSH
80614: CALL_OW 72
80618: ST_TO_ADDR
// if not cts and not mcts then
80619: LD_VAR 0 9
80623: NOT
80624: PUSH
80625: LD_VAR 0 10
80629: NOT
80630: AND
80631: IFFALSE 80635
// continue ;
80633: GO 80450
// x := cts ;
80635: LD_ADDR_VAR 0 11
80639: PUSH
80640: LD_VAR 0 9
80644: ST_TO_ADDR
// if not x then
80645: LD_VAR 0 11
80649: NOT
80650: IFFALSE 80662
// x := mcts ;
80652: LD_ADDR_VAR 0 11
80656: PUSH
80657: LD_VAR 0 10
80661: ST_TO_ADDR
// if not x then
80662: LD_VAR 0 11
80666: NOT
80667: IFFALSE 80671
// continue ;
80669: GO 80450
// if mc_remote_driver [ i ] then
80671: LD_EXP 90
80675: PUSH
80676: LD_VAR 0 2
80680: ARRAY
80681: IFFALSE 81068
// for j in mc_remote_driver [ i ] do
80683: LD_ADDR_VAR 0 3
80687: PUSH
80688: LD_EXP 90
80692: PUSH
80693: LD_VAR 0 2
80697: ARRAY
80698: PUSH
80699: FOR_IN
80700: IFFALSE 81066
// begin if GetClass ( j ) <> 3 then
80702: LD_VAR 0 3
80706: PPUSH
80707: CALL_OW 257
80711: PUSH
80712: LD_INT 3
80714: NONEQUAL
80715: IFFALSE 80768
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff j ) ;
80717: LD_ADDR_EXP 90
80721: PUSH
80722: LD_EXP 90
80726: PPUSH
80727: LD_VAR 0 2
80731: PPUSH
80732: LD_EXP 90
80736: PUSH
80737: LD_VAR 0 2
80741: ARRAY
80742: PUSH
80743: LD_VAR 0 3
80747: DIFF
80748: PPUSH
80749: CALL_OW 1
80753: ST_TO_ADDR
// SetTag ( j , 0 ) ;
80754: LD_VAR 0 3
80758: PPUSH
80759: LD_INT 0
80761: PPUSH
80762: CALL_OW 109
// continue ;
80766: GO 80699
// end ; if UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) and not IsDriver ( j ) then
80768: LD_EXP 69
80772: PUSH
80773: LD_VAR 0 2
80777: ARRAY
80778: PPUSH
80779: LD_INT 34
80781: PUSH
80782: LD_INT 31
80784: PUSH
80785: EMPTY
80786: LIST
80787: LIST
80788: PUSH
80789: LD_INT 58
80791: PUSH
80792: EMPTY
80793: LIST
80794: PUSH
80795: EMPTY
80796: LIST
80797: LIST
80798: PPUSH
80799: CALL_OW 72
80803: PUSH
80804: LD_VAR 0 3
80808: PPUSH
80809: CALL 54215 0 1
80813: NOT
80814: AND
80815: IFFALSE 80886
// begin if IsInUnit ( j ) then
80817: LD_VAR 0 3
80821: PPUSH
80822: CALL_OW 310
80826: IFFALSE 80837
// ComExitBuilding ( j ) ;
80828: LD_VAR 0 3
80832: PPUSH
80833: CALL_OW 122
// AddComEnterUnit ( j , UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) [ 1 ] ) ;
80837: LD_VAR 0 3
80841: PPUSH
80842: LD_EXP 69
80846: PUSH
80847: LD_VAR 0 2
80851: ARRAY
80852: PPUSH
80853: LD_INT 34
80855: PUSH
80856: LD_INT 31
80858: PUSH
80859: EMPTY
80860: LIST
80861: LIST
80862: PUSH
80863: LD_INT 58
80865: PUSH
80866: EMPTY
80867: LIST
80868: PUSH
80869: EMPTY
80870: LIST
80871: LIST
80872: PPUSH
80873: CALL_OW 72
80877: PUSH
80878: LD_INT 1
80880: ARRAY
80881: PPUSH
80882: CALL_OW 180
// end ; if not IsInUnit ( j ) or ( GetBType ( IsInUnit ( j ) ) <> b_control_tower and not IsDriver ( j ) ) then
80886: LD_VAR 0 3
80890: PPUSH
80891: CALL_OW 310
80895: NOT
80896: PUSH
80897: LD_VAR 0 3
80901: PPUSH
80902: CALL_OW 310
80906: PPUSH
80907: CALL_OW 266
80911: PUSH
80912: LD_INT 36
80914: NONEQUAL
80915: PUSH
80916: LD_VAR 0 3
80920: PPUSH
80921: CALL 54215 0 1
80925: NOT
80926: AND
80927: OR
80928: IFFALSE 81064
// begin if IsInUnit ( j ) then
80930: LD_VAR 0 3
80934: PPUSH
80935: CALL_OW 310
80939: IFFALSE 80950
// ComExitBuilding ( j ) ;
80941: LD_VAR 0 3
80945: PPUSH
80946: CALL_OW 122
// ct := 0 ;
80950: LD_ADDR_VAR 0 8
80954: PUSH
80955: LD_INT 0
80957: ST_TO_ADDR
// for k in x do
80958: LD_ADDR_VAR 0 4
80962: PUSH
80963: LD_VAR 0 11
80967: PUSH
80968: FOR_IN
80969: IFFALSE 81042
// if ( GetWeapon ( k ) = ar_control_tower and not IsDrivenBy ( k ) ) or ( GetBType ( k ) = b_control_tower and UnitsInside ( k ) < 3 ) then
80971: LD_VAR 0 4
80975: PPUSH
80976: CALL_OW 264
80980: PUSH
80981: LD_INT 31
80983: EQUAL
80984: PUSH
80985: LD_VAR 0 4
80989: PPUSH
80990: CALL_OW 311
80994: NOT
80995: AND
80996: PUSH
80997: LD_VAR 0 4
81001: PPUSH
81002: CALL_OW 266
81006: PUSH
81007: LD_INT 36
81009: EQUAL
81010: PUSH
81011: LD_VAR 0 4
81015: PPUSH
81016: CALL_OW 313
81020: PUSH
81021: LD_INT 3
81023: LESS
81024: AND
81025: OR
81026: IFFALSE 81040
// begin ct := k ;
81028: LD_ADDR_VAR 0 8
81032: PUSH
81033: LD_VAR 0 4
81037: ST_TO_ADDR
// break ;
81038: GO 81042
// end ;
81040: GO 80968
81042: POP
81043: POP
// if ct then
81044: LD_VAR 0 8
81048: IFFALSE 81064
// ComEnterUnit ( j , ct ) ;
81050: LD_VAR 0 3
81054: PPUSH
81055: LD_VAR 0 8
81059: PPUSH
81060: CALL_OW 120
// end ; end ;
81064: GO 80699
81066: POP
81067: POP
// places := 0 ;
81068: LD_ADDR_VAR 0 5
81072: PUSH
81073: LD_INT 0
81075: ST_TO_ADDR
// for j = 1 to x do
81076: LD_ADDR_VAR 0 3
81080: PUSH
81081: DOUBLE
81082: LD_INT 1
81084: DEC
81085: ST_TO_ADDR
81086: LD_VAR 0 11
81090: PUSH
81091: FOR_TO
81092: IFFALSE 81168
// if GetWeapon ( x [ j ] ) = ar_control_tower then
81094: LD_VAR 0 11
81098: PUSH
81099: LD_VAR 0 3
81103: ARRAY
81104: PPUSH
81105: CALL_OW 264
81109: PUSH
81110: LD_INT 31
81112: EQUAL
81113: IFFALSE 81131
// places := places + 1 else
81115: LD_ADDR_VAR 0 5
81119: PUSH
81120: LD_VAR 0 5
81124: PUSH
81125: LD_INT 1
81127: PLUS
81128: ST_TO_ADDR
81129: GO 81166
// if GetBType ( x [ j ] ) = b_control_tower then
81131: LD_VAR 0 11
81135: PUSH
81136: LD_VAR 0 3
81140: ARRAY
81141: PPUSH
81142: CALL_OW 266
81146: PUSH
81147: LD_INT 36
81149: EQUAL
81150: IFFALSE 81166
// places := places + 3 ;
81152: LD_ADDR_VAR 0 5
81156: PUSH
81157: LD_VAR 0 5
81161: PUSH
81162: LD_INT 3
81164: PLUS
81165: ST_TO_ADDR
81166: GO 81091
81168: POP
81169: POP
// if places = 0 or places <= mc_remote_driver [ i ] then
81170: LD_VAR 0 5
81174: PUSH
81175: LD_INT 0
81177: EQUAL
81178: PUSH
81179: LD_VAR 0 5
81183: PUSH
81184: LD_EXP 90
81188: PUSH
81189: LD_VAR 0 2
81193: ARRAY
81194: LESSEQUAL
81195: OR
81196: IFFALSE 81200
// continue ;
81198: GO 80450
// tmp := SortBySkill ( UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] , 3 ) ;
81200: LD_ADDR_VAR 0 6
81204: PUSH
81205: LD_EXP 50
81209: PUSH
81210: LD_VAR 0 2
81214: ARRAY
81215: PPUSH
81216: LD_INT 25
81218: PUSH
81219: LD_INT 3
81221: PUSH
81222: EMPTY
81223: LIST
81224: LIST
81225: PPUSH
81226: CALL_OW 72
81230: PUSH
81231: LD_EXP 90
81235: PUSH
81236: LD_VAR 0 2
81240: ARRAY
81241: DIFF
81242: PPUSH
81243: LD_INT 3
81245: PPUSH
81246: CALL 55115 0 2
81250: ST_TO_ADDR
// for j in tmp do
81251: LD_ADDR_VAR 0 3
81255: PUSH
81256: LD_VAR 0 6
81260: PUSH
81261: FOR_IN
81262: IFFALSE 81297
// if GetTag ( j ) > 0 then
81264: LD_VAR 0 3
81268: PPUSH
81269: CALL_OW 110
81273: PUSH
81274: LD_INT 0
81276: GREATER
81277: IFFALSE 81295
// tmp := tmp diff j ;
81279: LD_ADDR_VAR 0 6
81283: PUSH
81284: LD_VAR 0 6
81288: PUSH
81289: LD_VAR 0 3
81293: DIFF
81294: ST_TO_ADDR
81295: GO 81261
81297: POP
81298: POP
// if not tmp then
81299: LD_VAR 0 6
81303: NOT
81304: IFFALSE 81308
// continue ;
81306: GO 80450
// if places then
81308: LD_VAR 0 5
81312: IFFALSE 81371
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
81314: LD_ADDR_EXP 90
81318: PUSH
81319: LD_EXP 90
81323: PPUSH
81324: LD_VAR 0 2
81328: PPUSH
81329: LD_EXP 90
81333: PUSH
81334: LD_VAR 0 2
81338: ARRAY
81339: PUSH
81340: LD_VAR 0 6
81344: PUSH
81345: LD_INT 1
81347: ARRAY
81348: UNION
81349: PPUSH
81350: CALL_OW 1
81354: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
81355: LD_VAR 0 6
81359: PUSH
81360: LD_INT 1
81362: ARRAY
81363: PPUSH
81364: LD_INT 126
81366: PPUSH
81367: CALL_OW 109
// end ; end ;
81371: GO 80450
81373: POP
81374: POP
// end ;
81375: LD_VAR 0 1
81379: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
81380: LD_INT 0
81382: PPUSH
81383: PPUSH
81384: PPUSH
81385: PPUSH
81386: PPUSH
81387: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
81388: LD_VAR 0 1
81392: NOT
81393: PUSH
81394: LD_VAR 0 2
81398: NOT
81399: OR
81400: PUSH
81401: LD_VAR 0 3
81405: NOT
81406: OR
81407: PUSH
81408: LD_VAR 0 4
81412: PUSH
81413: LD_INT 1
81415: PUSH
81416: LD_INT 2
81418: PUSH
81419: LD_INT 3
81421: PUSH
81422: LD_INT 4
81424: PUSH
81425: LD_INT 5
81427: PUSH
81428: LD_INT 8
81430: PUSH
81431: LD_INT 9
81433: PUSH
81434: LD_INT 15
81436: PUSH
81437: LD_INT 16
81439: PUSH
81440: EMPTY
81441: LIST
81442: LIST
81443: LIST
81444: LIST
81445: LIST
81446: LIST
81447: LIST
81448: LIST
81449: LIST
81450: IN
81451: NOT
81452: OR
81453: IFFALSE 81457
// exit ;
81455: GO 82357
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
81457: LD_ADDR_VAR 0 2
81461: PUSH
81462: LD_VAR 0 2
81466: PPUSH
81467: LD_INT 21
81469: PUSH
81470: LD_INT 3
81472: PUSH
81473: EMPTY
81474: LIST
81475: LIST
81476: PUSH
81477: LD_INT 24
81479: PUSH
81480: LD_INT 250
81482: PUSH
81483: EMPTY
81484: LIST
81485: LIST
81486: PUSH
81487: EMPTY
81488: LIST
81489: LIST
81490: PPUSH
81491: CALL_OW 72
81495: ST_TO_ADDR
// case class of 1 , 15 :
81496: LD_VAR 0 4
81500: PUSH
81501: LD_INT 1
81503: DOUBLE
81504: EQUAL
81505: IFTRUE 81515
81507: LD_INT 15
81509: DOUBLE
81510: EQUAL
81511: IFTRUE 81515
81513: GO 81600
81515: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
81516: LD_ADDR_VAR 0 8
81520: PUSH
81521: LD_VAR 0 2
81525: PPUSH
81526: LD_INT 2
81528: PUSH
81529: LD_INT 30
81531: PUSH
81532: LD_INT 32
81534: PUSH
81535: EMPTY
81536: LIST
81537: LIST
81538: PUSH
81539: LD_INT 30
81541: PUSH
81542: LD_INT 31
81544: PUSH
81545: EMPTY
81546: LIST
81547: LIST
81548: PUSH
81549: EMPTY
81550: LIST
81551: LIST
81552: LIST
81553: PPUSH
81554: CALL_OW 72
81558: PUSH
81559: LD_VAR 0 2
81563: PPUSH
81564: LD_INT 2
81566: PUSH
81567: LD_INT 30
81569: PUSH
81570: LD_INT 4
81572: PUSH
81573: EMPTY
81574: LIST
81575: LIST
81576: PUSH
81577: LD_INT 30
81579: PUSH
81580: LD_INT 5
81582: PUSH
81583: EMPTY
81584: LIST
81585: LIST
81586: PUSH
81587: EMPTY
81588: LIST
81589: LIST
81590: LIST
81591: PPUSH
81592: CALL_OW 72
81596: ADD
81597: ST_TO_ADDR
81598: GO 81846
81600: LD_INT 2
81602: DOUBLE
81603: EQUAL
81604: IFTRUE 81614
81606: LD_INT 16
81608: DOUBLE
81609: EQUAL
81610: IFTRUE 81614
81612: GO 81660
81614: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
81615: LD_ADDR_VAR 0 8
81619: PUSH
81620: LD_VAR 0 2
81624: PPUSH
81625: LD_INT 2
81627: PUSH
81628: LD_INT 30
81630: PUSH
81631: LD_INT 0
81633: PUSH
81634: EMPTY
81635: LIST
81636: LIST
81637: PUSH
81638: LD_INT 30
81640: PUSH
81641: LD_INT 1
81643: PUSH
81644: EMPTY
81645: LIST
81646: LIST
81647: PUSH
81648: EMPTY
81649: LIST
81650: LIST
81651: LIST
81652: PPUSH
81653: CALL_OW 72
81657: ST_TO_ADDR
81658: GO 81846
81660: LD_INT 3
81662: DOUBLE
81663: EQUAL
81664: IFTRUE 81668
81666: GO 81714
81668: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
81669: LD_ADDR_VAR 0 8
81673: PUSH
81674: LD_VAR 0 2
81678: PPUSH
81679: LD_INT 2
81681: PUSH
81682: LD_INT 30
81684: PUSH
81685: LD_INT 2
81687: PUSH
81688: EMPTY
81689: LIST
81690: LIST
81691: PUSH
81692: LD_INT 30
81694: PUSH
81695: LD_INT 3
81697: PUSH
81698: EMPTY
81699: LIST
81700: LIST
81701: PUSH
81702: EMPTY
81703: LIST
81704: LIST
81705: LIST
81706: PPUSH
81707: CALL_OW 72
81711: ST_TO_ADDR
81712: GO 81846
81714: LD_INT 4
81716: DOUBLE
81717: EQUAL
81718: IFTRUE 81722
81720: GO 81779
81722: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
81723: LD_ADDR_VAR 0 8
81727: PUSH
81728: LD_VAR 0 2
81732: PPUSH
81733: LD_INT 2
81735: PUSH
81736: LD_INT 30
81738: PUSH
81739: LD_INT 6
81741: PUSH
81742: EMPTY
81743: LIST
81744: LIST
81745: PUSH
81746: LD_INT 30
81748: PUSH
81749: LD_INT 7
81751: PUSH
81752: EMPTY
81753: LIST
81754: LIST
81755: PUSH
81756: LD_INT 30
81758: PUSH
81759: LD_INT 8
81761: PUSH
81762: EMPTY
81763: LIST
81764: LIST
81765: PUSH
81766: EMPTY
81767: LIST
81768: LIST
81769: LIST
81770: LIST
81771: PPUSH
81772: CALL_OW 72
81776: ST_TO_ADDR
81777: GO 81846
81779: LD_INT 5
81781: DOUBLE
81782: EQUAL
81783: IFTRUE 81799
81785: LD_INT 8
81787: DOUBLE
81788: EQUAL
81789: IFTRUE 81799
81791: LD_INT 9
81793: DOUBLE
81794: EQUAL
81795: IFTRUE 81799
81797: GO 81845
81799: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
81800: LD_ADDR_VAR 0 8
81804: PUSH
81805: LD_VAR 0 2
81809: PPUSH
81810: LD_INT 2
81812: PUSH
81813: LD_INT 30
81815: PUSH
81816: LD_INT 4
81818: PUSH
81819: EMPTY
81820: LIST
81821: LIST
81822: PUSH
81823: LD_INT 30
81825: PUSH
81826: LD_INT 5
81828: PUSH
81829: EMPTY
81830: LIST
81831: LIST
81832: PUSH
81833: EMPTY
81834: LIST
81835: LIST
81836: LIST
81837: PPUSH
81838: CALL_OW 72
81842: ST_TO_ADDR
81843: GO 81846
81845: POP
// if not tmp then
81846: LD_VAR 0 8
81850: NOT
81851: IFFALSE 81855
// exit ;
81853: GO 82357
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
81855: LD_VAR 0 4
81859: PUSH
81860: LD_INT 1
81862: PUSH
81863: LD_INT 15
81865: PUSH
81866: EMPTY
81867: LIST
81868: LIST
81869: IN
81870: PUSH
81871: LD_EXP 59
81875: PUSH
81876: LD_VAR 0 1
81880: ARRAY
81881: AND
81882: IFFALSE 82038
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
81884: LD_ADDR_VAR 0 9
81888: PUSH
81889: LD_EXP 59
81893: PUSH
81894: LD_VAR 0 1
81898: ARRAY
81899: PUSH
81900: LD_INT 1
81902: ARRAY
81903: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
81904: LD_VAR 0 9
81908: PUSH
81909: LD_EXP 60
81913: PUSH
81914: LD_VAR 0 1
81918: ARRAY
81919: IN
81920: NOT
81921: IFFALSE 82036
// begin mc_busy_turret_list := ReplaceIn ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
81923: LD_ADDR_EXP 60
81927: PUSH
81928: LD_EXP 60
81932: PPUSH
81933: LD_VAR 0 1
81937: PUSH
81938: LD_EXP 60
81942: PUSH
81943: LD_VAR 0 1
81947: ARRAY
81948: PUSH
81949: LD_INT 1
81951: PLUS
81952: PUSH
81953: EMPTY
81954: LIST
81955: LIST
81956: PPUSH
81957: LD_VAR 0 9
81961: PPUSH
81962: CALL 24858 0 3
81966: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
81967: LD_ADDR_EXP 59
81971: PUSH
81972: LD_EXP 59
81976: PPUSH
81977: LD_VAR 0 1
81981: PPUSH
81982: LD_EXP 59
81986: PUSH
81987: LD_VAR 0 1
81991: ARRAY
81992: PUSH
81993: LD_VAR 0 9
81997: DIFF
81998: PPUSH
81999: CALL_OW 1
82003: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
82004: LD_VAR 0 3
82008: PPUSH
82009: LD_EXP 60
82013: PUSH
82014: LD_VAR 0 1
82018: ARRAY
82019: PUSH
82020: LD_EXP 60
82024: PUSH
82025: LD_VAR 0 1
82029: ARRAY
82030: ARRAY
82031: PPUSH
82032: CALL_OW 120
// end ; exit ;
82036: GO 82357
// end ; if tmp > 1 then
82038: LD_VAR 0 8
82042: PUSH
82043: LD_INT 1
82045: GREATER
82046: IFFALSE 82150
// for i = 2 to tmp do
82048: LD_ADDR_VAR 0 6
82052: PUSH
82053: DOUBLE
82054: LD_INT 2
82056: DEC
82057: ST_TO_ADDR
82058: LD_VAR 0 8
82062: PUSH
82063: FOR_TO
82064: IFFALSE 82148
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
82066: LD_VAR 0 8
82070: PUSH
82071: LD_VAR 0 6
82075: ARRAY
82076: PPUSH
82077: CALL_OW 461
82081: PUSH
82082: LD_INT 6
82084: EQUAL
82085: IFFALSE 82146
// begin x := tmp [ i ] ;
82087: LD_ADDR_VAR 0 9
82091: PUSH
82092: LD_VAR 0 8
82096: PUSH
82097: LD_VAR 0 6
82101: ARRAY
82102: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
82103: LD_ADDR_VAR 0 8
82107: PUSH
82108: LD_VAR 0 8
82112: PPUSH
82113: LD_VAR 0 6
82117: PPUSH
82118: CALL_OW 3
82122: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
82123: LD_ADDR_VAR 0 8
82127: PUSH
82128: LD_VAR 0 8
82132: PPUSH
82133: LD_INT 1
82135: PPUSH
82136: LD_VAR 0 9
82140: PPUSH
82141: CALL_OW 2
82145: ST_TO_ADDR
// end ;
82146: GO 82063
82148: POP
82149: POP
// for i in tmp do
82150: LD_ADDR_VAR 0 6
82154: PUSH
82155: LD_VAR 0 8
82159: PUSH
82160: FOR_IN
82161: IFFALSE 82230
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
82163: LD_VAR 0 6
82167: PPUSH
82168: CALL_OW 313
82172: PUSH
82173: LD_INT 6
82175: LESS
82176: PUSH
82177: LD_VAR 0 6
82181: PPUSH
82182: CALL_OW 266
82186: PUSH
82187: LD_INT 31
82189: PUSH
82190: LD_INT 32
82192: PUSH
82193: EMPTY
82194: LIST
82195: LIST
82196: IN
82197: NOT
82198: AND
82199: PUSH
82200: LD_VAR 0 6
82204: PPUSH
82205: CALL_OW 313
82209: PUSH
82210: LD_INT 0
82212: EQUAL
82213: OR
82214: IFFALSE 82228
// begin j := i ;
82216: LD_ADDR_VAR 0 7
82220: PUSH
82221: LD_VAR 0 6
82225: ST_TO_ADDR
// break ;
82226: GO 82230
// end ; end ;
82228: GO 82160
82230: POP
82231: POP
// if j then
82232: LD_VAR 0 7
82236: IFFALSE 82254
// ComEnterUnit ( unit , j ) else
82238: LD_VAR 0 3
82242: PPUSH
82243: LD_VAR 0 7
82247: PPUSH
82248: CALL_OW 120
82252: GO 82357
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
82254: LD_ADDR_VAR 0 10
82258: PUSH
82259: LD_VAR 0 2
82263: PPUSH
82264: LD_INT 2
82266: PUSH
82267: LD_INT 30
82269: PUSH
82270: LD_INT 0
82272: PUSH
82273: EMPTY
82274: LIST
82275: LIST
82276: PUSH
82277: LD_INT 30
82279: PUSH
82280: LD_INT 1
82282: PUSH
82283: EMPTY
82284: LIST
82285: LIST
82286: PUSH
82287: EMPTY
82288: LIST
82289: LIST
82290: LIST
82291: PPUSH
82292: CALL_OW 72
82296: ST_TO_ADDR
// if depot then
82297: LD_VAR 0 10
82301: IFFALSE 82357
// begin depot := NearestUnitToUnit ( depot , unit ) ;
82303: LD_ADDR_VAR 0 10
82307: PUSH
82308: LD_VAR 0 10
82312: PPUSH
82313: LD_VAR 0 3
82317: PPUSH
82318: CALL_OW 74
82322: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
82323: LD_VAR 0 3
82327: PPUSH
82328: LD_VAR 0 10
82332: PPUSH
82333: CALL_OW 296
82337: PUSH
82338: LD_INT 10
82340: GREATER
82341: IFFALSE 82357
// ComStandNearbyBuilding ( unit , depot ) ;
82343: LD_VAR 0 3
82347: PPUSH
82348: LD_VAR 0 10
82352: PPUSH
82353: CALL 21436 0 2
// end ; end ; end ;
82357: LD_VAR 0 5
82361: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
82362: LD_INT 0
82364: PPUSH
82365: PPUSH
82366: PPUSH
82367: PPUSH
// if not mc_bases then
82368: LD_EXP 50
82372: NOT
82373: IFFALSE 82377
// exit ;
82375: GO 82616
// for i = 1 to mc_bases do
82377: LD_ADDR_VAR 0 2
82381: PUSH
82382: DOUBLE
82383: LD_INT 1
82385: DEC
82386: ST_TO_ADDR
82387: LD_EXP 50
82391: PUSH
82392: FOR_TO
82393: IFFALSE 82614
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
82395: LD_ADDR_VAR 0 4
82399: PUSH
82400: LD_EXP 50
82404: PUSH
82405: LD_VAR 0 2
82409: ARRAY
82410: PPUSH
82411: LD_INT 21
82413: PUSH
82414: LD_INT 1
82416: PUSH
82417: EMPTY
82418: LIST
82419: LIST
82420: PPUSH
82421: CALL_OW 72
82425: PUSH
82426: LD_EXP 79
82430: PUSH
82431: LD_VAR 0 2
82435: ARRAY
82436: UNION
82437: ST_TO_ADDR
// if not tmp then
82438: LD_VAR 0 4
82442: NOT
82443: IFFALSE 82447
// continue ;
82445: GO 82392
// for j in tmp do
82447: LD_ADDR_VAR 0 3
82451: PUSH
82452: LD_VAR 0 4
82456: PUSH
82457: FOR_IN
82458: IFFALSE 82610
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
82460: LD_VAR 0 3
82464: PPUSH
82465: CALL_OW 110
82469: NOT
82470: PUSH
82471: LD_VAR 0 3
82475: PPUSH
82476: CALL_OW 314
82480: NOT
82481: AND
82482: PUSH
82483: LD_VAR 0 3
82487: PPUSH
82488: CALL_OW 311
82492: NOT
82493: AND
82494: PUSH
82495: LD_VAR 0 3
82499: PPUSH
82500: CALL_OW 310
82504: NOT
82505: AND
82506: PUSH
82507: LD_VAR 0 3
82511: PUSH
82512: LD_EXP 53
82516: PUSH
82517: LD_VAR 0 2
82521: ARRAY
82522: PUSH
82523: LD_INT 1
82525: ARRAY
82526: IN
82527: NOT
82528: AND
82529: PUSH
82530: LD_VAR 0 3
82534: PUSH
82535: LD_EXP 53
82539: PUSH
82540: LD_VAR 0 2
82544: ARRAY
82545: PUSH
82546: LD_INT 2
82548: ARRAY
82549: IN
82550: NOT
82551: AND
82552: PUSH
82553: LD_VAR 0 3
82557: PUSH
82558: LD_EXP 62
82562: PUSH
82563: LD_VAR 0 2
82567: ARRAY
82568: IN
82569: NOT
82570: AND
82571: IFFALSE 82608
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
82573: LD_VAR 0 2
82577: PPUSH
82578: LD_EXP 50
82582: PUSH
82583: LD_VAR 0 2
82587: ARRAY
82588: PPUSH
82589: LD_VAR 0 3
82593: PPUSH
82594: LD_VAR 0 3
82598: PPUSH
82599: CALL_OW 257
82603: PPUSH
82604: CALL 81380 0 4
// end ;
82608: GO 82457
82610: POP
82611: POP
// end ;
82612: GO 82392
82614: POP
82615: POP
// end ;
82616: LD_VAR 0 1
82620: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
82621: LD_INT 0
82623: PPUSH
82624: PPUSH
82625: PPUSH
82626: PPUSH
82627: PPUSH
82628: PPUSH
// if not mc_bases [ base ] then
82629: LD_EXP 50
82633: PUSH
82634: LD_VAR 0 1
82638: ARRAY
82639: NOT
82640: IFFALSE 82644
// exit ;
82642: GO 82826
// tmp := [ ] ;
82644: LD_ADDR_VAR 0 6
82648: PUSH
82649: EMPTY
82650: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
82651: LD_ADDR_VAR 0 7
82655: PUSH
82656: LD_VAR 0 3
82660: PPUSH
82661: LD_INT 0
82663: PPUSH
82664: CALL_OW 517
82668: ST_TO_ADDR
// if not list then
82669: LD_VAR 0 7
82673: NOT
82674: IFFALSE 82678
// exit ;
82676: GO 82826
// for i = 1 to amount do
82678: LD_ADDR_VAR 0 5
82682: PUSH
82683: DOUBLE
82684: LD_INT 1
82686: DEC
82687: ST_TO_ADDR
82688: LD_VAR 0 2
82692: PUSH
82693: FOR_TO
82694: IFFALSE 82774
// begin x := rand ( 1 , list [ 1 ] ) ;
82696: LD_ADDR_VAR 0 8
82700: PUSH
82701: LD_INT 1
82703: PPUSH
82704: LD_VAR 0 7
82708: PUSH
82709: LD_INT 1
82711: ARRAY
82712: PPUSH
82713: CALL_OW 12
82717: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
82718: LD_ADDR_VAR 0 6
82722: PUSH
82723: LD_VAR 0 6
82727: PPUSH
82728: LD_VAR 0 5
82732: PPUSH
82733: LD_VAR 0 7
82737: PUSH
82738: LD_INT 1
82740: ARRAY
82741: PUSH
82742: LD_VAR 0 8
82746: ARRAY
82747: PUSH
82748: LD_VAR 0 7
82752: PUSH
82753: LD_INT 2
82755: ARRAY
82756: PUSH
82757: LD_VAR 0 8
82761: ARRAY
82762: PUSH
82763: EMPTY
82764: LIST
82765: LIST
82766: PPUSH
82767: CALL_OW 1
82771: ST_TO_ADDR
// end ;
82772: GO 82693
82774: POP
82775: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
82776: LD_ADDR_EXP 63
82780: PUSH
82781: LD_EXP 63
82785: PPUSH
82786: LD_VAR 0 1
82790: PPUSH
82791: LD_VAR 0 6
82795: PPUSH
82796: CALL_OW 1
82800: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
82801: LD_ADDR_EXP 65
82805: PUSH
82806: LD_EXP 65
82810: PPUSH
82811: LD_VAR 0 1
82815: PPUSH
82816: LD_VAR 0 3
82820: PPUSH
82821: CALL_OW 1
82825: ST_TO_ADDR
// end ;
82826: LD_VAR 0 4
82830: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
82831: LD_INT 0
82833: PPUSH
// if not mc_bases [ base ] then
82834: LD_EXP 50
82838: PUSH
82839: LD_VAR 0 1
82843: ARRAY
82844: NOT
82845: IFFALSE 82849
// exit ;
82847: GO 82874
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
82849: LD_ADDR_EXP 55
82853: PUSH
82854: LD_EXP 55
82858: PPUSH
82859: LD_VAR 0 1
82863: PPUSH
82864: LD_VAR 0 2
82868: PPUSH
82869: CALL_OW 1
82873: ST_TO_ADDR
// end ;
82874: LD_VAR 0 3
82878: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
82879: LD_INT 0
82881: PPUSH
// if not mc_bases [ base ] then
82882: LD_EXP 50
82886: PUSH
82887: LD_VAR 0 1
82891: ARRAY
82892: NOT
82893: IFFALSE 82897
// exit ;
82895: GO 82934
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union list ) ;
82897: LD_ADDR_EXP 55
82901: PUSH
82902: LD_EXP 55
82906: PPUSH
82907: LD_VAR 0 1
82911: PPUSH
82912: LD_EXP 55
82916: PUSH
82917: LD_VAR 0 1
82921: ARRAY
82922: PUSH
82923: LD_VAR 0 2
82927: UNION
82928: PPUSH
82929: CALL_OW 1
82933: ST_TO_ADDR
// end ;
82934: LD_VAR 0 3
82938: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
82939: LD_INT 0
82941: PPUSH
// if not mc_bases [ base ] then
82942: LD_EXP 50
82946: PUSH
82947: LD_VAR 0 1
82951: ARRAY
82952: NOT
82953: IFFALSE 82957
// exit ;
82955: GO 82982
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
82957: LD_ADDR_EXP 71
82961: PUSH
82962: LD_EXP 71
82966: PPUSH
82967: LD_VAR 0 1
82971: PPUSH
82972: LD_VAR 0 2
82976: PPUSH
82977: CALL_OW 1
82981: ST_TO_ADDR
// end ;
82982: LD_VAR 0 3
82986: RET
// export function MC_InsertProduceList ( base , components ) ; begin
82987: LD_INT 0
82989: PPUSH
// if not mc_bases [ base ] then
82990: LD_EXP 50
82994: PUSH
82995: LD_VAR 0 1
82999: ARRAY
83000: NOT
83001: IFFALSE 83005
// exit ;
83003: GO 83042
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ components ) ;
83005: LD_ADDR_EXP 71
83009: PUSH
83010: LD_EXP 71
83014: PPUSH
83015: LD_VAR 0 1
83019: PPUSH
83020: LD_EXP 71
83024: PUSH
83025: LD_VAR 0 1
83029: ARRAY
83030: PUSH
83031: LD_VAR 0 2
83035: ADD
83036: PPUSH
83037: CALL_OW 1
83041: ST_TO_ADDR
// end ;
83042: LD_VAR 0 3
83046: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
83047: LD_INT 0
83049: PPUSH
// if not mc_bases [ base ] then
83050: LD_EXP 50
83054: PUSH
83055: LD_VAR 0 1
83059: ARRAY
83060: NOT
83061: IFFALSE 83065
// exit ;
83063: GO 83119
// mc_defender := Replace ( mc_defender , base , deflist ) ;
83065: LD_ADDR_EXP 72
83069: PUSH
83070: LD_EXP 72
83074: PPUSH
83075: LD_VAR 0 1
83079: PPUSH
83080: LD_VAR 0 2
83084: PPUSH
83085: CALL_OW 1
83089: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
83090: LD_ADDR_EXP 61
83094: PUSH
83095: LD_EXP 61
83099: PPUSH
83100: LD_VAR 0 1
83104: PPUSH
83105: LD_VAR 0 2
83109: PUSH
83110: LD_INT 0
83112: PLUS
83113: PPUSH
83114: CALL_OW 1
83118: ST_TO_ADDR
// end ;
83119: LD_VAR 0 3
83123: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
83124: LD_INT 0
83126: PPUSH
// if not mc_bases [ base ] then
83127: LD_EXP 50
83131: PUSH
83132: LD_VAR 0 1
83136: ARRAY
83137: NOT
83138: IFFALSE 83142
// exit ;
83140: GO 83167
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
83142: LD_ADDR_EXP 61
83146: PUSH
83147: LD_EXP 61
83151: PPUSH
83152: LD_VAR 0 1
83156: PPUSH
83157: LD_VAR 0 2
83161: PPUSH
83162: CALL_OW 1
83166: ST_TO_ADDR
// end ;
83167: LD_VAR 0 3
83171: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
83172: LD_INT 0
83174: PPUSH
83175: PPUSH
83176: PPUSH
83177: PPUSH
// if not mc_bases [ base ] then
83178: LD_EXP 50
83182: PUSH
83183: LD_VAR 0 1
83187: ARRAY
83188: NOT
83189: IFFALSE 83193
// exit ;
83191: GO 83258
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
83193: LD_ADDR_EXP 70
83197: PUSH
83198: LD_EXP 70
83202: PPUSH
83203: LD_VAR 0 1
83207: PUSH
83208: LD_EXP 70
83212: PUSH
83213: LD_VAR 0 1
83217: ARRAY
83218: PUSH
83219: LD_INT 1
83221: PLUS
83222: PUSH
83223: EMPTY
83224: LIST
83225: LIST
83226: PPUSH
83227: LD_VAR 0 1
83231: PUSH
83232: LD_VAR 0 2
83236: PUSH
83237: LD_VAR 0 3
83241: PUSH
83242: LD_VAR 0 4
83246: PUSH
83247: EMPTY
83248: LIST
83249: LIST
83250: LIST
83251: LIST
83252: PPUSH
83253: CALL 24858 0 3
83257: ST_TO_ADDR
// end ;
83258: LD_VAR 0 5
83262: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
83263: LD_INT 0
83265: PPUSH
// if not mc_bases [ base ] then
83266: LD_EXP 50
83270: PUSH
83271: LD_VAR 0 1
83275: ARRAY
83276: NOT
83277: IFFALSE 83281
// exit ;
83279: GO 83306
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
83281: LD_ADDR_EXP 87
83285: PUSH
83286: LD_EXP 87
83290: PPUSH
83291: LD_VAR 0 1
83295: PPUSH
83296: LD_VAR 0 2
83300: PPUSH
83301: CALL_OW 1
83305: ST_TO_ADDR
// end ;
83306: LD_VAR 0 3
83310: RET
// export function MC_GetMinesField ( base ) ; begin
83311: LD_INT 0
83313: PPUSH
// result := mc_mines [ base ] ;
83314: LD_ADDR_VAR 0 2
83318: PUSH
83319: LD_EXP 63
83323: PUSH
83324: LD_VAR 0 1
83328: ARRAY
83329: ST_TO_ADDR
// end ;
83330: LD_VAR 0 2
83334: RET
// export function MC_GetProduceList ( base ) ; begin
83335: LD_INT 0
83337: PPUSH
// result := mc_produce [ base ] ;
83338: LD_ADDR_VAR 0 2
83342: PUSH
83343: LD_EXP 71
83347: PUSH
83348: LD_VAR 0 1
83352: ARRAY
83353: ST_TO_ADDR
// end ;
83354: LD_VAR 0 2
83358: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
83359: LD_INT 0
83361: PPUSH
83362: PPUSH
// if not mc_bases then
83363: LD_EXP 50
83367: NOT
83368: IFFALSE 83372
// exit ;
83370: GO 83437
// if mc_bases [ base ] then
83372: LD_EXP 50
83376: PUSH
83377: LD_VAR 0 1
83381: ARRAY
83382: IFFALSE 83437
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
83384: LD_ADDR_VAR 0 3
83388: PUSH
83389: LD_EXP 50
83393: PUSH
83394: LD_VAR 0 1
83398: ARRAY
83399: PPUSH
83400: LD_INT 30
83402: PUSH
83403: LD_VAR 0 2
83407: PUSH
83408: EMPTY
83409: LIST
83410: LIST
83411: PPUSH
83412: CALL_OW 72
83416: ST_TO_ADDR
// if result then
83417: LD_VAR 0 3
83421: IFFALSE 83437
// result := result [ 1 ] ;
83423: LD_ADDR_VAR 0 3
83427: PUSH
83428: LD_VAR 0 3
83432: PUSH
83433: LD_INT 1
83435: ARRAY
83436: ST_TO_ADDR
// end ; end ;
83437: LD_VAR 0 3
83441: RET
// export function MC_GetBuildings ( base , btype ) ; var i ; begin
83442: LD_INT 0
83444: PPUSH
83445: PPUSH
// if not mc_bases then
83446: LD_EXP 50
83450: NOT
83451: IFFALSE 83455
// exit ;
83453: GO 83500
// if mc_bases [ base ] then
83455: LD_EXP 50
83459: PUSH
83460: LD_VAR 0 1
83464: ARRAY
83465: IFFALSE 83500
// result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
83467: LD_ADDR_VAR 0 3
83471: PUSH
83472: LD_EXP 50
83476: PUSH
83477: LD_VAR 0 1
83481: ARRAY
83482: PPUSH
83483: LD_INT 30
83485: PUSH
83486: LD_VAR 0 2
83490: PUSH
83491: EMPTY
83492: LIST
83493: LIST
83494: PPUSH
83495: CALL_OW 72
83499: ST_TO_ADDR
// end ;
83500: LD_VAR 0 3
83504: RET
// export function MC_SetTame ( base , area ) ; begin
83505: LD_INT 0
83507: PPUSH
// if not mc_bases or not base then
83508: LD_EXP 50
83512: NOT
83513: PUSH
83514: LD_VAR 0 1
83518: NOT
83519: OR
83520: IFFALSE 83524
// exit ;
83522: GO 83549
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
83524: LD_ADDR_EXP 78
83528: PUSH
83529: LD_EXP 78
83533: PPUSH
83534: LD_VAR 0 1
83538: PPUSH
83539: LD_VAR 0 2
83543: PPUSH
83544: CALL_OW 1
83548: ST_TO_ADDR
// end ;
83549: LD_VAR 0 3
83553: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
83554: LD_INT 0
83556: PPUSH
83557: PPUSH
// if not mc_bases or not base then
83558: LD_EXP 50
83562: NOT
83563: PUSH
83564: LD_VAR 0 1
83568: NOT
83569: OR
83570: IFFALSE 83574
// exit ;
83572: GO 83676
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
83574: LD_ADDR_VAR 0 4
83578: PUSH
83579: LD_EXP 50
83583: PUSH
83584: LD_VAR 0 1
83588: ARRAY
83589: PPUSH
83590: LD_INT 30
83592: PUSH
83593: LD_VAR 0 2
83597: PUSH
83598: EMPTY
83599: LIST
83600: LIST
83601: PPUSH
83602: CALL_OW 72
83606: ST_TO_ADDR
// if not tmp then
83607: LD_VAR 0 4
83611: NOT
83612: IFFALSE 83616
// exit ;
83614: GO 83676
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
83616: LD_ADDR_EXP 82
83620: PUSH
83621: LD_EXP 82
83625: PPUSH
83626: LD_VAR 0 1
83630: PPUSH
83631: LD_EXP 82
83635: PUSH
83636: LD_VAR 0 1
83640: ARRAY
83641: PPUSH
83642: LD_EXP 82
83646: PUSH
83647: LD_VAR 0 1
83651: ARRAY
83652: PUSH
83653: LD_INT 1
83655: PLUS
83656: PPUSH
83657: LD_VAR 0 4
83661: PUSH
83662: LD_INT 1
83664: ARRAY
83665: PPUSH
83666: CALL_OW 2
83670: PPUSH
83671: CALL_OW 1
83675: ST_TO_ADDR
// end ;
83676: LD_VAR 0 3
83680: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
83681: LD_INT 0
83683: PPUSH
83684: PPUSH
// if not mc_bases or not base or not kinds then
83685: LD_EXP 50
83689: NOT
83690: PUSH
83691: LD_VAR 0 1
83695: NOT
83696: OR
83697: PUSH
83698: LD_VAR 0 2
83702: NOT
83703: OR
83704: IFFALSE 83708
// exit ;
83706: GO 83769
// for i in kinds do
83708: LD_ADDR_VAR 0 4
83712: PUSH
83713: LD_VAR 0 2
83717: PUSH
83718: FOR_IN
83719: IFFALSE 83767
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
83721: LD_ADDR_EXP 84
83725: PUSH
83726: LD_EXP 84
83730: PPUSH
83731: LD_VAR 0 1
83735: PUSH
83736: LD_EXP 84
83740: PUSH
83741: LD_VAR 0 1
83745: ARRAY
83746: PUSH
83747: LD_INT 1
83749: PLUS
83750: PUSH
83751: EMPTY
83752: LIST
83753: LIST
83754: PPUSH
83755: LD_VAR 0 4
83759: PPUSH
83760: CALL 24858 0 3
83764: ST_TO_ADDR
83765: GO 83718
83767: POP
83768: POP
// end ;
83769: LD_VAR 0 3
83773: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
83774: LD_INT 0
83776: PPUSH
// if not mc_bases or not base or not areas then
83777: LD_EXP 50
83781: NOT
83782: PUSH
83783: LD_VAR 0 1
83787: NOT
83788: OR
83789: PUSH
83790: LD_VAR 0 2
83794: NOT
83795: OR
83796: IFFALSE 83800
// exit ;
83798: GO 83825
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
83800: LD_ADDR_EXP 68
83804: PUSH
83805: LD_EXP 68
83809: PPUSH
83810: LD_VAR 0 1
83814: PPUSH
83815: LD_VAR 0 2
83819: PPUSH
83820: CALL_OW 1
83824: ST_TO_ADDR
// end ;
83825: LD_VAR 0 3
83829: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
83830: LD_INT 0
83832: PPUSH
// if not mc_bases or not base or not teleports_exit then
83833: LD_EXP 50
83837: NOT
83838: PUSH
83839: LD_VAR 0 1
83843: NOT
83844: OR
83845: PUSH
83846: LD_VAR 0 2
83850: NOT
83851: OR
83852: IFFALSE 83856
// exit ;
83854: GO 83881
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
83856: LD_ADDR_EXP 85
83860: PUSH
83861: LD_EXP 85
83865: PPUSH
83866: LD_VAR 0 1
83870: PPUSH
83871: LD_VAR 0 2
83875: PPUSH
83876: CALL_OW 1
83880: ST_TO_ADDR
// end ;
83881: LD_VAR 0 3
83885: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
83886: LD_INT 0
83888: PPUSH
83889: PPUSH
83890: PPUSH
// if not mc_bases or not base or not ext_list then
83891: LD_EXP 50
83895: NOT
83896: PUSH
83897: LD_VAR 0 1
83901: NOT
83902: OR
83903: PUSH
83904: LD_VAR 0 5
83908: NOT
83909: OR
83910: IFFALSE 83914
// exit ;
83912: GO 84087
// tmp := GetFacExtXYD ( x , y , d ) ;
83914: LD_ADDR_VAR 0 8
83918: PUSH
83919: LD_VAR 0 2
83923: PPUSH
83924: LD_VAR 0 3
83928: PPUSH
83929: LD_VAR 0 4
83933: PPUSH
83934: CALL 54245 0 3
83938: ST_TO_ADDR
// if not tmp then
83939: LD_VAR 0 8
83943: NOT
83944: IFFALSE 83948
// exit ;
83946: GO 84087
// for i in tmp do
83948: LD_ADDR_VAR 0 7
83952: PUSH
83953: LD_VAR 0 8
83957: PUSH
83958: FOR_IN
83959: IFFALSE 84085
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
83961: LD_ADDR_EXP 55
83965: PUSH
83966: LD_EXP 55
83970: PPUSH
83971: LD_VAR 0 1
83975: PPUSH
83976: LD_EXP 55
83980: PUSH
83981: LD_VAR 0 1
83985: ARRAY
83986: PPUSH
83987: LD_EXP 55
83991: PUSH
83992: LD_VAR 0 1
83996: ARRAY
83997: PUSH
83998: LD_INT 1
84000: PLUS
84001: PPUSH
84002: LD_VAR 0 5
84006: PUSH
84007: LD_INT 1
84009: ARRAY
84010: PUSH
84011: LD_VAR 0 7
84015: PUSH
84016: LD_INT 1
84018: ARRAY
84019: PUSH
84020: LD_VAR 0 7
84024: PUSH
84025: LD_INT 2
84027: ARRAY
84028: PUSH
84029: LD_VAR 0 7
84033: PUSH
84034: LD_INT 3
84036: ARRAY
84037: PUSH
84038: EMPTY
84039: LIST
84040: LIST
84041: LIST
84042: LIST
84043: PPUSH
84044: CALL_OW 2
84048: PPUSH
84049: CALL_OW 1
84053: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
84054: LD_ADDR_VAR 0 5
84058: PUSH
84059: LD_VAR 0 5
84063: PPUSH
84064: LD_INT 1
84066: PPUSH
84067: CALL_OW 3
84071: ST_TO_ADDR
// if not ext_list then
84072: LD_VAR 0 5
84076: NOT
84077: IFFALSE 84083
// exit ;
84079: POP
84080: POP
84081: GO 84087
// end ;
84083: GO 83958
84085: POP
84086: POP
// end ;
84087: LD_VAR 0 6
84091: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
84092: LD_INT 0
84094: PPUSH
// if not mc_bases or not base or not weapon_list then
84095: LD_EXP 50
84099: NOT
84100: PUSH
84101: LD_VAR 0 1
84105: NOT
84106: OR
84107: PUSH
84108: LD_VAR 0 2
84112: NOT
84113: OR
84114: IFFALSE 84118
// exit ;
84116: GO 84143
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
84118: LD_ADDR_EXP 89
84122: PUSH
84123: LD_EXP 89
84127: PPUSH
84128: LD_VAR 0 1
84132: PPUSH
84133: LD_VAR 0 2
84137: PPUSH
84138: CALL_OW 1
84142: ST_TO_ADDR
// end ;
84143: LD_VAR 0 3
84147: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
84148: LD_INT 0
84150: PPUSH
// if not mc_bases or not base or not tech_list then
84151: LD_EXP 50
84155: NOT
84156: PUSH
84157: LD_VAR 0 1
84161: NOT
84162: OR
84163: PUSH
84164: LD_VAR 0 2
84168: NOT
84169: OR
84170: IFFALSE 84174
// exit ;
84172: GO 84199
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
84174: LD_ADDR_EXP 77
84178: PUSH
84179: LD_EXP 77
84183: PPUSH
84184: LD_VAR 0 1
84188: PPUSH
84189: LD_VAR 0 2
84193: PPUSH
84194: CALL_OW 1
84198: ST_TO_ADDR
// end ;
84199: LD_VAR 0 3
84203: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
84204: LD_INT 0
84206: PPUSH
// if not mc_bases or not parking_area or not base then
84207: LD_EXP 50
84211: NOT
84212: PUSH
84213: LD_VAR 0 2
84217: NOT
84218: OR
84219: PUSH
84220: LD_VAR 0 1
84224: NOT
84225: OR
84226: IFFALSE 84230
// exit ;
84228: GO 84255
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
84230: LD_ADDR_EXP 74
84234: PUSH
84235: LD_EXP 74
84239: PPUSH
84240: LD_VAR 0 1
84244: PPUSH
84245: LD_VAR 0 2
84249: PPUSH
84250: CALL_OW 1
84254: ST_TO_ADDR
// end ;
84255: LD_VAR 0 3
84259: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
84260: LD_INT 0
84262: PPUSH
// if not mc_bases or not base or not scan_area then
84263: LD_EXP 50
84267: NOT
84268: PUSH
84269: LD_VAR 0 1
84273: NOT
84274: OR
84275: PUSH
84276: LD_VAR 0 2
84280: NOT
84281: OR
84282: IFFALSE 84286
// exit ;
84284: GO 84311
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
84286: LD_ADDR_EXP 75
84290: PUSH
84291: LD_EXP 75
84295: PPUSH
84296: LD_VAR 0 1
84300: PPUSH
84301: LD_VAR 0 2
84305: PPUSH
84306: CALL_OW 1
84310: ST_TO_ADDR
// end ;
84311: LD_VAR 0 3
84315: RET
// export function MC_NotTameApeman ( base ) ; var ape_techs ; begin
84316: LD_INT 0
84318: PPUSH
84319: PPUSH
// if not mc_bases or not base then
84320: LD_EXP 50
84324: NOT
84325: PUSH
84326: LD_VAR 0 1
84330: NOT
84331: OR
84332: IFFALSE 84336
// exit ;
84334: GO 84400
// ape_techs := [ 1 , 2 , 3 , 4 , 11 ] ;
84336: LD_ADDR_VAR 0 3
84340: PUSH
84341: LD_INT 1
84343: PUSH
84344: LD_INT 2
84346: PUSH
84347: LD_INT 3
84349: PUSH
84350: LD_INT 4
84352: PUSH
84353: LD_INT 11
84355: PUSH
84356: EMPTY
84357: LIST
84358: LIST
84359: LIST
84360: LIST
84361: LIST
84362: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , mc_tech [ base ] diff ape_techs ) ;
84363: LD_ADDR_EXP 77
84367: PUSH
84368: LD_EXP 77
84372: PPUSH
84373: LD_VAR 0 1
84377: PPUSH
84378: LD_EXP 77
84382: PUSH
84383: LD_VAR 0 1
84387: ARRAY
84388: PUSH
84389: LD_VAR 0 3
84393: DIFF
84394: PPUSH
84395: CALL_OW 1
84399: ST_TO_ADDR
// end ;
84400: LD_VAR 0 2
84404: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
84405: LD_INT 0
84407: PPUSH
// result := mc_vehicles [ base ] ;
84408: LD_ADDR_VAR 0 3
84412: PUSH
84413: LD_EXP 69
84417: PUSH
84418: LD_VAR 0 1
84422: ARRAY
84423: ST_TO_ADDR
// if onlyCombat then
84424: LD_VAR 0 2
84428: IFFALSE 84606
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , ar_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] , [ f_weapon , ru_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ) ;
84430: LD_ADDR_VAR 0 3
84434: PUSH
84435: LD_VAR 0 3
84439: PUSH
84440: LD_VAR 0 3
84444: PPUSH
84445: LD_INT 2
84447: PUSH
84448: LD_INT 34
84450: PUSH
84451: LD_INT 12
84453: PUSH
84454: EMPTY
84455: LIST
84456: LIST
84457: PUSH
84458: LD_INT 34
84460: PUSH
84461: LD_INT 51
84463: PUSH
84464: EMPTY
84465: LIST
84466: LIST
84467: PUSH
84468: LD_INT 34
84470: PUSH
84471: LD_EXP 30
84475: PUSH
84476: EMPTY
84477: LIST
84478: LIST
84479: PUSH
84480: LD_INT 34
84482: PUSH
84483: LD_INT 32
84485: PUSH
84486: EMPTY
84487: LIST
84488: LIST
84489: PUSH
84490: LD_INT 34
84492: PUSH
84493: LD_INT 13
84495: PUSH
84496: EMPTY
84497: LIST
84498: LIST
84499: PUSH
84500: LD_INT 34
84502: PUSH
84503: LD_INT 52
84505: PUSH
84506: EMPTY
84507: LIST
84508: LIST
84509: PUSH
84510: LD_INT 34
84512: PUSH
84513: LD_EXP 35
84517: PUSH
84518: EMPTY
84519: LIST
84520: LIST
84521: PUSH
84522: LD_INT 34
84524: PUSH
84525: LD_INT 14
84527: PUSH
84528: EMPTY
84529: LIST
84530: LIST
84531: PUSH
84532: LD_INT 34
84534: PUSH
84535: LD_INT 53
84537: PUSH
84538: EMPTY
84539: LIST
84540: LIST
84541: PUSH
84542: LD_INT 34
84544: PUSH
84545: LD_EXP 29
84549: PUSH
84550: EMPTY
84551: LIST
84552: LIST
84553: PUSH
84554: LD_INT 34
84556: PUSH
84557: LD_INT 31
84559: PUSH
84560: EMPTY
84561: LIST
84562: LIST
84563: PUSH
84564: LD_INT 34
84566: PUSH
84567: LD_INT 48
84569: PUSH
84570: EMPTY
84571: LIST
84572: LIST
84573: PUSH
84574: LD_INT 34
84576: PUSH
84577: LD_INT 8
84579: PUSH
84580: EMPTY
84581: LIST
84582: LIST
84583: PUSH
84584: EMPTY
84585: LIST
84586: LIST
84587: LIST
84588: LIST
84589: LIST
84590: LIST
84591: LIST
84592: LIST
84593: LIST
84594: LIST
84595: LIST
84596: LIST
84597: LIST
84598: LIST
84599: PPUSH
84600: CALL_OW 72
84604: DIFF
84605: ST_TO_ADDR
// end ; end_of_file
84606: LD_VAR 0 3
84610: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
84611: LD_INT 0
84613: PPUSH
84614: PPUSH
84615: PPUSH
// if not mc_bases or not skirmish then
84616: LD_EXP 50
84620: NOT
84621: PUSH
84622: LD_EXP 48
84626: NOT
84627: OR
84628: IFFALSE 84632
// exit ;
84630: GO 84797
// for i = 1 to mc_bases do
84632: LD_ADDR_VAR 0 4
84636: PUSH
84637: DOUBLE
84638: LD_INT 1
84640: DEC
84641: ST_TO_ADDR
84642: LD_EXP 50
84646: PUSH
84647: FOR_TO
84648: IFFALSE 84795
// begin if sci in mc_bases [ i ] then
84650: LD_VAR 0 2
84654: PUSH
84655: LD_EXP 50
84659: PUSH
84660: LD_VAR 0 4
84664: ARRAY
84665: IN
84666: IFFALSE 84793
// begin mc_ape := ReplaceIn ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
84668: LD_ADDR_EXP 79
84672: PUSH
84673: LD_EXP 79
84677: PPUSH
84678: LD_VAR 0 4
84682: PUSH
84683: LD_EXP 79
84687: PUSH
84688: LD_VAR 0 4
84692: ARRAY
84693: PUSH
84694: LD_INT 1
84696: PLUS
84697: PUSH
84698: EMPTY
84699: LIST
84700: LIST
84701: PPUSH
84702: LD_VAR 0 1
84706: PPUSH
84707: CALL 24858 0 3
84711: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
84712: LD_ADDR_VAR 0 5
84716: PUSH
84717: LD_EXP 50
84721: PUSH
84722: LD_VAR 0 4
84726: ARRAY
84727: PPUSH
84728: LD_INT 2
84730: PUSH
84731: LD_INT 30
84733: PUSH
84734: LD_INT 0
84736: PUSH
84737: EMPTY
84738: LIST
84739: LIST
84740: PUSH
84741: LD_INT 30
84743: PUSH
84744: LD_INT 1
84746: PUSH
84747: EMPTY
84748: LIST
84749: LIST
84750: PUSH
84751: EMPTY
84752: LIST
84753: LIST
84754: LIST
84755: PPUSH
84756: CALL_OW 72
84760: PPUSH
84761: LD_VAR 0 1
84765: PPUSH
84766: CALL_OW 74
84770: ST_TO_ADDR
// if tmp then
84771: LD_VAR 0 5
84775: IFFALSE 84791
// ComStandNearbyBuilding ( ape , tmp ) ;
84777: LD_VAR 0 1
84781: PPUSH
84782: LD_VAR 0 5
84786: PPUSH
84787: CALL 21436 0 2
// break ;
84791: GO 84795
// end ; end ;
84793: GO 84647
84795: POP
84796: POP
// end ;
84797: LD_VAR 0 3
84801: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
84802: LD_INT 0
84804: PPUSH
84805: PPUSH
84806: PPUSH
// if not mc_bases or not skirmish then
84807: LD_EXP 50
84811: NOT
84812: PUSH
84813: LD_EXP 48
84817: NOT
84818: OR
84819: IFFALSE 84823
// exit ;
84821: GO 84912
// for i = 1 to mc_bases do
84823: LD_ADDR_VAR 0 4
84827: PUSH
84828: DOUBLE
84829: LD_INT 1
84831: DEC
84832: ST_TO_ADDR
84833: LD_EXP 50
84837: PUSH
84838: FOR_TO
84839: IFFALSE 84910
// begin if building in mc_busy_turret_list [ i ] then
84841: LD_VAR 0 1
84845: PUSH
84846: LD_EXP 60
84850: PUSH
84851: LD_VAR 0 4
84855: ARRAY
84856: IN
84857: IFFALSE 84908
// begin tmp := mc_busy_turret_list [ i ] diff building ;
84859: LD_ADDR_VAR 0 5
84863: PUSH
84864: LD_EXP 60
84868: PUSH
84869: LD_VAR 0 4
84873: ARRAY
84874: PUSH
84875: LD_VAR 0 1
84879: DIFF
84880: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
84881: LD_ADDR_EXP 60
84885: PUSH
84886: LD_EXP 60
84890: PPUSH
84891: LD_VAR 0 4
84895: PPUSH
84896: LD_VAR 0 5
84900: PPUSH
84901: CALL_OW 1
84905: ST_TO_ADDR
// break ;
84906: GO 84910
// end ; end ;
84908: GO 84838
84910: POP
84911: POP
// end ;
84912: LD_VAR 0 3
84916: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
84917: LD_INT 0
84919: PPUSH
84920: PPUSH
84921: PPUSH
// if not mc_bases or not skirmish then
84922: LD_EXP 50
84926: NOT
84927: PUSH
84928: LD_EXP 48
84932: NOT
84933: OR
84934: IFFALSE 84938
// exit ;
84936: GO 85137
// for i = 1 to mc_bases do
84938: LD_ADDR_VAR 0 5
84942: PUSH
84943: DOUBLE
84944: LD_INT 1
84946: DEC
84947: ST_TO_ADDR
84948: LD_EXP 50
84952: PUSH
84953: FOR_TO
84954: IFFALSE 85135
// if building in mc_bases [ i ] then
84956: LD_VAR 0 1
84960: PUSH
84961: LD_EXP 50
84965: PUSH
84966: LD_VAR 0 5
84970: ARRAY
84971: IN
84972: IFFALSE 85133
// begin tmp := mc_bases [ i ] diff building ;
84974: LD_ADDR_VAR 0 6
84978: PUSH
84979: LD_EXP 50
84983: PUSH
84984: LD_VAR 0 5
84988: ARRAY
84989: PUSH
84990: LD_VAR 0 1
84994: DIFF
84995: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
84996: LD_ADDR_EXP 50
85000: PUSH
85001: LD_EXP 50
85005: PPUSH
85006: LD_VAR 0 5
85010: PPUSH
85011: LD_VAR 0 6
85015: PPUSH
85016: CALL_OW 1
85020: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
85021: LD_VAR 0 1
85025: PUSH
85026: LD_EXP 58
85030: PUSH
85031: LD_VAR 0 5
85035: ARRAY
85036: IN
85037: IFFALSE 85076
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
85039: LD_ADDR_EXP 58
85043: PUSH
85044: LD_EXP 58
85048: PPUSH
85049: LD_VAR 0 5
85053: PPUSH
85054: LD_EXP 58
85058: PUSH
85059: LD_VAR 0 5
85063: ARRAY
85064: PUSH
85065: LD_VAR 0 1
85069: DIFF
85070: PPUSH
85071: CALL_OW 1
85075: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
85076: LD_VAR 0 1
85080: PUSH
85081: LD_EXP 59
85085: PUSH
85086: LD_VAR 0 5
85090: ARRAY
85091: IN
85092: IFFALSE 85131
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
85094: LD_ADDR_EXP 59
85098: PUSH
85099: LD_EXP 59
85103: PPUSH
85104: LD_VAR 0 5
85108: PPUSH
85109: LD_EXP 59
85113: PUSH
85114: LD_VAR 0 5
85118: ARRAY
85119: PUSH
85120: LD_VAR 0 1
85124: DIFF
85125: PPUSH
85126: CALL_OW 1
85130: ST_TO_ADDR
// break ;
85131: GO 85135
// end ;
85133: GO 84953
85135: POP
85136: POP
// end ;
85137: LD_VAR 0 4
85141: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
85142: LD_INT 0
85144: PPUSH
85145: PPUSH
85146: PPUSH
// if not mc_bases or not skirmish or not side in mc_sides then
85147: LD_EXP 50
85151: NOT
85152: PUSH
85153: LD_EXP 48
85157: NOT
85158: OR
85159: PUSH
85160: LD_VAR 0 3
85164: PUSH
85165: LD_EXP 76
85169: IN
85170: NOT
85171: OR
85172: IFFALSE 85176
// exit ;
85174: GO 85299
// for i = 1 to mc_vehicles do
85176: LD_ADDR_VAR 0 6
85180: PUSH
85181: DOUBLE
85182: LD_INT 1
85184: DEC
85185: ST_TO_ADDR
85186: LD_EXP 69
85190: PUSH
85191: FOR_TO
85192: IFFALSE 85297
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
85194: LD_VAR 0 2
85198: PUSH
85199: LD_EXP 69
85203: PUSH
85204: LD_VAR 0 6
85208: ARRAY
85209: IN
85210: PUSH
85211: LD_VAR 0 1
85215: PUSH
85216: LD_EXP 69
85220: PUSH
85221: LD_VAR 0 6
85225: ARRAY
85226: IN
85227: OR
85228: IFFALSE 85295
// begin tmp := mc_vehicles [ i ] diff old ;
85230: LD_ADDR_VAR 0 7
85234: PUSH
85235: LD_EXP 69
85239: PUSH
85240: LD_VAR 0 6
85244: ARRAY
85245: PUSH
85246: LD_VAR 0 2
85250: DIFF
85251: ST_TO_ADDR
// tmp := tmp diff new ;
85252: LD_ADDR_VAR 0 7
85256: PUSH
85257: LD_VAR 0 7
85261: PUSH
85262: LD_VAR 0 1
85266: DIFF
85267: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
85268: LD_ADDR_EXP 69
85272: PUSH
85273: LD_EXP 69
85277: PPUSH
85278: LD_VAR 0 6
85282: PPUSH
85283: LD_VAR 0 7
85287: PPUSH
85288: CALL_OW 1
85292: ST_TO_ADDR
// break ;
85293: GO 85297
// end ;
85295: GO 85191
85297: POP
85298: POP
// end ;
85299: LD_VAR 0 5
85303: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
85304: LD_INT 0
85306: PPUSH
85307: PPUSH
85308: PPUSH
85309: PPUSH
// if not mc_bases or not skirmish then
85310: LD_EXP 50
85314: NOT
85315: PUSH
85316: LD_EXP 48
85320: NOT
85321: OR
85322: IFFALSE 85326
// exit ;
85324: GO 85718
// side := GetSide ( vehicle ) ;
85326: LD_ADDR_VAR 0 5
85330: PUSH
85331: LD_VAR 0 1
85335: PPUSH
85336: CALL_OW 255
85340: ST_TO_ADDR
// for i = 1 to mc_bases do
85341: LD_ADDR_VAR 0 4
85345: PUSH
85346: DOUBLE
85347: LD_INT 1
85349: DEC
85350: ST_TO_ADDR
85351: LD_EXP 50
85355: PUSH
85356: FOR_TO
85357: IFFALSE 85716
// begin if factory in mc_bases [ i ] then
85359: LD_VAR 0 2
85363: PUSH
85364: LD_EXP 50
85368: PUSH
85369: LD_VAR 0 4
85373: ARRAY
85374: IN
85375: IFFALSE 85714
// begin if mc_defender [ i ] < mc_defender_limit [ i ] and not GetWeapon ( vehicle ) in [ ar_control_tower , ar_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , us_cargo_bay , ar_radar , ru_radar , us_radar , ru_bulldozer , us_bulldozer , ar_bio_bomb , ar_selfpropelled_bomb , us_hack , us_crane , ru_crane , ar_crane , ru_siberium_rocket , us_siberium_rocket ] then
85377: LD_EXP 72
85381: PUSH
85382: LD_VAR 0 4
85386: ARRAY
85387: PUSH
85388: LD_EXP 61
85392: PUSH
85393: LD_VAR 0 4
85397: ARRAY
85398: LESS
85399: PUSH
85400: LD_VAR 0 1
85404: PPUSH
85405: CALL_OW 264
85409: PUSH
85410: LD_INT 31
85412: PUSH
85413: LD_INT 32
85415: PUSH
85416: LD_INT 51
85418: PUSH
85419: LD_EXP 30
85423: PUSH
85424: LD_INT 12
85426: PUSH
85427: LD_INT 30
85429: PUSH
85430: LD_EXP 29
85434: PUSH
85435: LD_INT 11
85437: PUSH
85438: LD_INT 53
85440: PUSH
85441: LD_INT 14
85443: PUSH
85444: LD_EXP 33
85448: PUSH
85449: LD_INT 29
85451: PUSH
85452: LD_EXP 31
85456: PUSH
85457: LD_INT 13
85459: PUSH
85460: LD_INT 52
85462: PUSH
85463: LD_EXP 35
85467: PUSH
85468: LD_INT 48
85470: PUSH
85471: LD_INT 8
85473: PUSH
85474: EMPTY
85475: LIST
85476: LIST
85477: LIST
85478: LIST
85479: LIST
85480: LIST
85481: LIST
85482: LIST
85483: LIST
85484: LIST
85485: LIST
85486: LIST
85487: LIST
85488: LIST
85489: LIST
85490: LIST
85491: LIST
85492: LIST
85493: IN
85494: NOT
85495: AND
85496: IFFALSE 85544
// mc_defender := ReplaceIn ( mc_defender , [ i , mc_defender [ i ] + 1 ] , vehicle ) else
85498: LD_ADDR_EXP 72
85502: PUSH
85503: LD_EXP 72
85507: PPUSH
85508: LD_VAR 0 4
85512: PUSH
85513: LD_EXP 72
85517: PUSH
85518: LD_VAR 0 4
85522: ARRAY
85523: PUSH
85524: LD_INT 1
85526: PLUS
85527: PUSH
85528: EMPTY
85529: LIST
85530: LIST
85531: PPUSH
85532: LD_VAR 0 1
85536: PPUSH
85537: CALL 24858 0 3
85541: ST_TO_ADDR
85542: GO 85588
// mc_vehicles := ReplaceIn ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
85544: LD_ADDR_EXP 69
85548: PUSH
85549: LD_EXP 69
85553: PPUSH
85554: LD_VAR 0 4
85558: PUSH
85559: LD_EXP 69
85563: PUSH
85564: LD_VAR 0 4
85568: ARRAY
85569: PUSH
85570: LD_INT 1
85572: PLUS
85573: PUSH
85574: EMPTY
85575: LIST
85576: LIST
85577: PPUSH
85578: LD_VAR 0 1
85582: PPUSH
85583: CALL 24858 0 3
85587: ST_TO_ADDR
// if GetControl ( vehicle ) = control_remote then
85588: LD_VAR 0 1
85592: PPUSH
85593: CALL_OW 263
85597: PUSH
85598: LD_INT 2
85600: EQUAL
85601: IFFALSE 85630
// begin repeat wait ( 0 0$3 ) ;
85603: LD_INT 105
85605: PPUSH
85606: CALL_OW 67
// Connect ( vehicle ) ;
85610: LD_VAR 0 1
85614: PPUSH
85615: CALL 27829 0 1
// until IsControledBy ( vehicle ) ;
85619: LD_VAR 0 1
85623: PPUSH
85624: CALL_OW 312
85628: IFFALSE 85603
// end ; ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
85630: LD_VAR 0 1
85634: PPUSH
85635: LD_EXP 74
85639: PUSH
85640: LD_VAR 0 4
85644: ARRAY
85645: PPUSH
85646: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
85650: LD_VAR 0 1
85654: PPUSH
85655: CALL_OW 263
85659: PUSH
85660: LD_INT 1
85662: NONEQUAL
85663: IFFALSE 85667
// break ;
85665: GO 85716
// repeat wait ( 0 0$1 ) ;
85667: LD_INT 35
85669: PPUSH
85670: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
85674: LD_VAR 0 1
85678: PPUSH
85679: LD_EXP 74
85683: PUSH
85684: LD_VAR 0 4
85688: ARRAY
85689: PPUSH
85690: CALL_OW 308
85694: IFFALSE 85667
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
85696: LD_VAR 0 1
85700: PPUSH
85701: CALL_OW 311
85705: PPUSH
85706: CALL_OW 121
// exit ;
85710: POP
85711: POP
85712: GO 85718
// end ; end ;
85714: GO 85356
85716: POP
85717: POP
// end ;
85718: LD_VAR 0 3
85722: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
85723: LD_INT 0
85725: PPUSH
85726: PPUSH
85727: PPUSH
85728: PPUSH
// if not mc_bases or not skirmish then
85729: LD_EXP 50
85733: NOT
85734: PUSH
85735: LD_EXP 48
85739: NOT
85740: OR
85741: IFFALSE 85745
// exit ;
85743: GO 86098
// repeat wait ( 0 0$1 ) ;
85745: LD_INT 35
85747: PPUSH
85748: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
85752: LD_VAR 0 2
85756: PPUSH
85757: LD_VAR 0 3
85761: PPUSH
85762: CALL_OW 284
85766: IFFALSE 85745
// if GetResourceTypeXY ( x , y ) = mat_artefact then
85768: LD_VAR 0 2
85772: PPUSH
85773: LD_VAR 0 3
85777: PPUSH
85778: CALL_OW 283
85782: PUSH
85783: LD_INT 4
85785: EQUAL
85786: IFFALSE 85790
// exit ;
85788: GO 86098
// for i = 1 to mc_bases do
85790: LD_ADDR_VAR 0 7
85794: PUSH
85795: DOUBLE
85796: LD_INT 1
85798: DEC
85799: ST_TO_ADDR
85800: LD_EXP 50
85804: PUSH
85805: FOR_TO
85806: IFFALSE 86096
// begin if mc_crates_area [ i ] then
85808: LD_EXP 68
85812: PUSH
85813: LD_VAR 0 7
85817: ARRAY
85818: IFFALSE 85929
// for j in mc_crates_area [ i ] do
85820: LD_ADDR_VAR 0 8
85824: PUSH
85825: LD_EXP 68
85829: PUSH
85830: LD_VAR 0 7
85834: ARRAY
85835: PUSH
85836: FOR_IN
85837: IFFALSE 85927
// if InArea ( x , y , j ) then
85839: LD_VAR 0 2
85843: PPUSH
85844: LD_VAR 0 3
85848: PPUSH
85849: LD_VAR 0 8
85853: PPUSH
85854: CALL_OW 309
85858: IFFALSE 85925
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
85860: LD_ADDR_EXP 66
85864: PUSH
85865: LD_EXP 66
85869: PPUSH
85870: LD_VAR 0 7
85874: PUSH
85875: LD_EXP 66
85879: PUSH
85880: LD_VAR 0 7
85884: ARRAY
85885: PUSH
85886: LD_INT 1
85888: PLUS
85889: PUSH
85890: EMPTY
85891: LIST
85892: LIST
85893: PPUSH
85894: LD_VAR 0 4
85898: PUSH
85899: LD_VAR 0 2
85903: PUSH
85904: LD_VAR 0 3
85908: PUSH
85909: EMPTY
85910: LIST
85911: LIST
85912: LIST
85913: PPUSH
85914: CALL 24858 0 3
85918: ST_TO_ADDR
// exit ;
85919: POP
85920: POP
85921: POP
85922: POP
85923: GO 86098
// end ;
85925: GO 85836
85927: POP
85928: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
85929: LD_ADDR_VAR 0 9
85933: PUSH
85934: LD_EXP 50
85938: PUSH
85939: LD_VAR 0 7
85943: ARRAY
85944: PPUSH
85945: LD_INT 2
85947: PUSH
85948: LD_INT 30
85950: PUSH
85951: LD_INT 0
85953: PUSH
85954: EMPTY
85955: LIST
85956: LIST
85957: PUSH
85958: LD_INT 30
85960: PUSH
85961: LD_INT 1
85963: PUSH
85964: EMPTY
85965: LIST
85966: LIST
85967: PUSH
85968: EMPTY
85969: LIST
85970: LIST
85971: LIST
85972: PPUSH
85973: CALL_OW 72
85977: ST_TO_ADDR
// if not depot then
85978: LD_VAR 0 9
85982: NOT
85983: IFFALSE 85987
// continue ;
85985: GO 85805
// for j in depot do
85987: LD_ADDR_VAR 0 8
85991: PUSH
85992: LD_VAR 0 9
85996: PUSH
85997: FOR_IN
85998: IFFALSE 86092
// if GetDistUnitXY ( j , x , y ) < 30 then
86000: LD_VAR 0 8
86004: PPUSH
86005: LD_VAR 0 2
86009: PPUSH
86010: LD_VAR 0 3
86014: PPUSH
86015: CALL_OW 297
86019: PUSH
86020: LD_INT 30
86022: LESS
86023: IFFALSE 86090
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
86025: LD_ADDR_EXP 66
86029: PUSH
86030: LD_EXP 66
86034: PPUSH
86035: LD_VAR 0 7
86039: PUSH
86040: LD_EXP 66
86044: PUSH
86045: LD_VAR 0 7
86049: ARRAY
86050: PUSH
86051: LD_INT 1
86053: PLUS
86054: PUSH
86055: EMPTY
86056: LIST
86057: LIST
86058: PPUSH
86059: LD_VAR 0 4
86063: PUSH
86064: LD_VAR 0 2
86068: PUSH
86069: LD_VAR 0 3
86073: PUSH
86074: EMPTY
86075: LIST
86076: LIST
86077: LIST
86078: PPUSH
86079: CALL 24858 0 3
86083: ST_TO_ADDR
// exit ;
86084: POP
86085: POP
86086: POP
86087: POP
86088: GO 86098
// end ;
86090: GO 85997
86092: POP
86093: POP
// end ;
86094: GO 85805
86096: POP
86097: POP
// end ;
86098: LD_VAR 0 6
86102: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
86103: LD_INT 0
86105: PPUSH
86106: PPUSH
86107: PPUSH
86108: PPUSH
// if not mc_bases or not skirmish then
86109: LD_EXP 50
86113: NOT
86114: PUSH
86115: LD_EXP 48
86119: NOT
86120: OR
86121: IFFALSE 86125
// exit ;
86123: GO 86402
// side := GetSide ( lab ) ;
86125: LD_ADDR_VAR 0 4
86129: PUSH
86130: LD_VAR 0 2
86134: PPUSH
86135: CALL_OW 255
86139: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
86140: LD_VAR 0 4
86144: PUSH
86145: LD_EXP 76
86149: IN
86150: NOT
86151: PUSH
86152: LD_EXP 77
86156: NOT
86157: OR
86158: PUSH
86159: LD_EXP 50
86163: NOT
86164: OR
86165: IFFALSE 86169
// exit ;
86167: GO 86402
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
86169: LD_ADDR_EXP 77
86173: PUSH
86174: LD_EXP 77
86178: PPUSH
86179: LD_VAR 0 4
86183: PPUSH
86184: LD_EXP 77
86188: PUSH
86189: LD_VAR 0 4
86193: ARRAY
86194: PUSH
86195: LD_VAR 0 1
86199: DIFF
86200: PPUSH
86201: CALL_OW 1
86205: ST_TO_ADDR
// for i = 1 to mc_bases do
86206: LD_ADDR_VAR 0 5
86210: PUSH
86211: DOUBLE
86212: LD_INT 1
86214: DEC
86215: ST_TO_ADDR
86216: LD_EXP 50
86220: PUSH
86221: FOR_TO
86222: IFFALSE 86400
// begin if lab in mc_bases [ i ] then
86224: LD_VAR 0 2
86228: PUSH
86229: LD_EXP 50
86233: PUSH
86234: LD_VAR 0 5
86238: ARRAY
86239: IN
86240: IFFALSE 86398
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
86242: LD_VAR 0 1
86246: PUSH
86247: LD_INT 11
86249: PUSH
86250: LD_INT 4
86252: PUSH
86253: LD_INT 3
86255: PUSH
86256: LD_INT 2
86258: PUSH
86259: EMPTY
86260: LIST
86261: LIST
86262: LIST
86263: LIST
86264: IN
86265: PUSH
86266: LD_EXP 80
86270: PUSH
86271: LD_VAR 0 5
86275: ARRAY
86276: AND
86277: IFFALSE 86398
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
86279: LD_ADDR_VAR 0 6
86283: PUSH
86284: LD_EXP 80
86288: PUSH
86289: LD_VAR 0 5
86293: ARRAY
86294: PUSH
86295: LD_INT 1
86297: ARRAY
86298: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
86299: LD_ADDR_EXP 80
86303: PUSH
86304: LD_EXP 80
86308: PPUSH
86309: LD_VAR 0 5
86313: PPUSH
86314: EMPTY
86315: PPUSH
86316: CALL_OW 1
86320: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
86321: LD_VAR 0 6
86325: PPUSH
86326: LD_INT 0
86328: PPUSH
86329: CALL_OW 109
// ComExitBuilding ( tmp ) ;
86333: LD_VAR 0 6
86337: PPUSH
86338: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
86342: LD_ADDR_EXP 79
86346: PUSH
86347: LD_EXP 79
86351: PPUSH
86352: LD_VAR 0 5
86356: PPUSH
86357: LD_EXP 79
86361: PUSH
86362: LD_VAR 0 5
86366: ARRAY
86367: PPUSH
86368: LD_INT 1
86370: PPUSH
86371: LD_VAR 0 6
86375: PPUSH
86376: CALL_OW 2
86380: PPUSH
86381: CALL_OW 1
86385: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
86386: LD_VAR 0 5
86390: PPUSH
86391: LD_INT 112
86393: PPUSH
86394: CALL 63068 0 2
// end ; end ; end ;
86398: GO 86221
86400: POP
86401: POP
// end ;
86402: LD_VAR 0 3
86406: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
86407: LD_INT 0
86409: PPUSH
86410: PPUSH
86411: PPUSH
86412: PPUSH
86413: PPUSH
86414: PPUSH
86415: PPUSH
86416: PPUSH
// if not mc_bases or not skirmish then
86417: LD_EXP 50
86421: NOT
86422: PUSH
86423: LD_EXP 48
86427: NOT
86428: OR
86429: IFFALSE 86433
// exit ;
86431: GO 87804
// for i = 1 to mc_bases do
86433: LD_ADDR_VAR 0 3
86437: PUSH
86438: DOUBLE
86439: LD_INT 1
86441: DEC
86442: ST_TO_ADDR
86443: LD_EXP 50
86447: PUSH
86448: FOR_TO
86449: IFFALSE 87802
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_defender [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
86451: LD_VAR 0 1
86455: PUSH
86456: LD_EXP 50
86460: PUSH
86461: LD_VAR 0 3
86465: ARRAY
86466: IN
86467: PUSH
86468: LD_VAR 0 1
86472: PUSH
86473: LD_EXP 57
86477: PUSH
86478: LD_VAR 0 3
86482: ARRAY
86483: IN
86484: OR
86485: PUSH
86486: LD_VAR 0 1
86490: PUSH
86491: LD_EXP 72
86495: PUSH
86496: LD_VAR 0 3
86500: ARRAY
86501: IN
86502: OR
86503: PUSH
86504: LD_VAR 0 1
86508: PUSH
86509: LD_EXP 69
86513: PUSH
86514: LD_VAR 0 3
86518: ARRAY
86519: IN
86520: OR
86521: PUSH
86522: LD_VAR 0 1
86526: PUSH
86527: LD_EXP 79
86531: PUSH
86532: LD_VAR 0 3
86536: ARRAY
86537: IN
86538: OR
86539: PUSH
86540: LD_VAR 0 1
86544: PUSH
86545: LD_EXP 80
86549: PUSH
86550: LD_VAR 0 3
86554: ARRAY
86555: IN
86556: OR
86557: IFFALSE 87800
// begin if un in mc_ape [ i ] then
86559: LD_VAR 0 1
86563: PUSH
86564: LD_EXP 79
86568: PUSH
86569: LD_VAR 0 3
86573: ARRAY
86574: IN
86575: IFFALSE 86614
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
86577: LD_ADDR_EXP 79
86581: PUSH
86582: LD_EXP 79
86586: PPUSH
86587: LD_VAR 0 3
86591: PPUSH
86592: LD_EXP 79
86596: PUSH
86597: LD_VAR 0 3
86601: ARRAY
86602: PUSH
86603: LD_VAR 0 1
86607: DIFF
86608: PPUSH
86609: CALL_OW 1
86613: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
86614: LD_VAR 0 1
86618: PUSH
86619: LD_EXP 80
86623: PUSH
86624: LD_VAR 0 3
86628: ARRAY
86629: IN
86630: IFFALSE 86654
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
86632: LD_ADDR_EXP 80
86636: PUSH
86637: LD_EXP 80
86641: PPUSH
86642: LD_VAR 0 3
86646: PPUSH
86647: EMPTY
86648: PPUSH
86649: CALL_OW 1
86653: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and ( GetTag ( un ) = 20 or un in mc_defender [ i ] or GetWeapon ( un ) in [ us_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , ar_cargo_bay , us_crane , ru_crane , ar_control_tower ] ) then
86654: LD_VAR 0 1
86658: PPUSH
86659: CALL_OW 247
86663: PUSH
86664: LD_INT 2
86666: EQUAL
86667: PUSH
86668: LD_VAR 0 1
86672: PPUSH
86673: CALL_OW 110
86677: PUSH
86678: LD_INT 20
86680: EQUAL
86681: PUSH
86682: LD_VAR 0 1
86686: PUSH
86687: LD_EXP 72
86691: PUSH
86692: LD_VAR 0 3
86696: ARRAY
86697: IN
86698: OR
86699: PUSH
86700: LD_VAR 0 1
86704: PPUSH
86705: CALL_OW 264
86709: PUSH
86710: LD_INT 12
86712: PUSH
86713: LD_INT 51
86715: PUSH
86716: LD_EXP 30
86720: PUSH
86721: LD_INT 32
86723: PUSH
86724: LD_INT 13
86726: PUSH
86727: LD_INT 52
86729: PUSH
86730: LD_INT 31
86732: PUSH
86733: EMPTY
86734: LIST
86735: LIST
86736: LIST
86737: LIST
86738: LIST
86739: LIST
86740: LIST
86741: IN
86742: OR
86743: AND
86744: IFFALSE 87052
// begin if un in mc_defender [ i ] then
86746: LD_VAR 0 1
86750: PUSH
86751: LD_EXP 72
86755: PUSH
86756: LD_VAR 0 3
86760: ARRAY
86761: IN
86762: IFFALSE 86801
// mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
86764: LD_ADDR_EXP 72
86768: PUSH
86769: LD_EXP 72
86773: PPUSH
86774: LD_VAR 0 3
86778: PPUSH
86779: LD_EXP 72
86783: PUSH
86784: LD_VAR 0 3
86788: ARRAY
86789: PUSH
86790: LD_VAR 0 1
86794: DIFF
86795: PPUSH
86796: CALL_OW 1
86800: ST_TO_ADDR
// fac := MC_GetBuildings ( i , b_factory ) ;
86801: LD_ADDR_VAR 0 8
86805: PUSH
86806: LD_VAR 0 3
86810: PPUSH
86811: LD_INT 3
86813: PPUSH
86814: CALL 83442 0 2
86818: ST_TO_ADDR
// if fac then
86819: LD_VAR 0 8
86823: IFFALSE 87052
// begin for j in fac do
86825: LD_ADDR_VAR 0 4
86829: PUSH
86830: LD_VAR 0 8
86834: PUSH
86835: FOR_IN
86836: IFFALSE 87050
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
86838: LD_ADDR_VAR 0 9
86842: PUSH
86843: LD_VAR 0 8
86847: PPUSH
86848: LD_VAR 0 1
86852: PPUSH
86853: CALL_OW 265
86857: PPUSH
86858: LD_VAR 0 1
86862: PPUSH
86863: CALL_OW 262
86867: PPUSH
86868: LD_VAR 0 1
86872: PPUSH
86873: CALL_OW 263
86877: PPUSH
86878: LD_VAR 0 1
86882: PPUSH
86883: CALL_OW 264
86887: PPUSH
86888: CALL 22354 0 5
86892: ST_TO_ADDR
// if components then
86893: LD_VAR 0 9
86897: IFFALSE 87048
// begin if GetWeapon ( un ) = ar_control_tower then
86899: LD_VAR 0 1
86903: PPUSH
86904: CALL_OW 264
86908: PUSH
86909: LD_INT 31
86911: EQUAL
86912: IFFALSE 87029
// begin SetTag ( IsDrivenBy ( un ) , 0 ) ;
86914: LD_VAR 0 1
86918: PPUSH
86919: CALL_OW 311
86923: PPUSH
86924: LD_INT 0
86926: PPUSH
86927: CALL_OW 109
// mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff IsDrivenBy ( un ) ) ;
86931: LD_ADDR_EXP 90
86935: PUSH
86936: LD_EXP 90
86940: PPUSH
86941: LD_VAR 0 3
86945: PPUSH
86946: LD_EXP 90
86950: PUSH
86951: LD_VAR 0 3
86955: ARRAY
86956: PUSH
86957: LD_VAR 0 1
86961: PPUSH
86962: CALL_OW 311
86966: DIFF
86967: PPUSH
86968: CALL_OW 1
86972: ST_TO_ADDR
// tmp := Insert ( mc_produce [ i ] , 1 , components ) ;
86973: LD_ADDR_VAR 0 7
86977: PUSH
86978: LD_EXP 71
86982: PUSH
86983: LD_VAR 0 3
86987: ARRAY
86988: PPUSH
86989: LD_INT 1
86991: PPUSH
86992: LD_VAR 0 9
86996: PPUSH
86997: CALL_OW 2
87001: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
87002: LD_ADDR_EXP 71
87006: PUSH
87007: LD_EXP 71
87011: PPUSH
87012: LD_VAR 0 3
87016: PPUSH
87017: LD_VAR 0 7
87021: PPUSH
87022: CALL_OW 1
87026: ST_TO_ADDR
// end else
87027: GO 87046
// MC_InsertProduceList ( i , [ components ] ) ;
87029: LD_VAR 0 3
87033: PPUSH
87034: LD_VAR 0 9
87038: PUSH
87039: EMPTY
87040: LIST
87041: PPUSH
87042: CALL 82987 0 2
// break ;
87046: GO 87050
// end ; end ;
87048: GO 86835
87050: POP
87051: POP
// end ; end ; if GetType ( un ) = unit_building then
87052: LD_VAR 0 1
87056: PPUSH
87057: CALL_OW 247
87061: PUSH
87062: LD_INT 3
87064: EQUAL
87065: IFFALSE 87468
// begin btype := GetBType ( un ) ;
87067: LD_ADDR_VAR 0 5
87071: PUSH
87072: LD_VAR 0 1
87076: PPUSH
87077: CALL_OW 266
87081: ST_TO_ADDR
// if btype in [ b_oil_mine , b_siberite_mine ] then
87082: LD_VAR 0 5
87086: PUSH
87087: LD_INT 29
87089: PUSH
87090: LD_INT 30
87092: PUSH
87093: EMPTY
87094: LIST
87095: LIST
87096: IN
87097: IFFALSE 87170
// begin if not GetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) then
87099: LD_VAR 0 1
87103: PPUSH
87104: CALL_OW 250
87108: PPUSH
87109: LD_VAR 0 1
87113: PPUSH
87114: CALL_OW 251
87118: PPUSH
87119: LD_VAR 0 1
87123: PPUSH
87124: CALL_OW 255
87128: PPUSH
87129: CALL_OW 440
87133: NOT
87134: IFFALSE 87170
// SetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) ;
87136: LD_VAR 0 1
87140: PPUSH
87141: CALL_OW 250
87145: PPUSH
87146: LD_VAR 0 1
87150: PPUSH
87151: CALL_OW 251
87155: PPUSH
87156: LD_VAR 0 1
87160: PPUSH
87161: CALL_OW 255
87165: PPUSH
87166: CALL_OW 441
// end ; if btype = b_warehouse then
87170: LD_VAR 0 5
87174: PUSH
87175: LD_INT 1
87177: EQUAL
87178: IFFALSE 87196
// begin btype := b_depot ;
87180: LD_ADDR_VAR 0 5
87184: PUSH
87185: LD_INT 0
87187: ST_TO_ADDR
// pos := 1 ;
87188: LD_ADDR_VAR 0 6
87192: PUSH
87193: LD_INT 1
87195: ST_TO_ADDR
// end ; if btype = b_factory then
87196: LD_VAR 0 5
87200: PUSH
87201: LD_INT 3
87203: EQUAL
87204: IFFALSE 87222
// begin btype := b_workshop ;
87206: LD_ADDR_VAR 0 5
87210: PUSH
87211: LD_INT 2
87213: ST_TO_ADDR
// pos := 1 ;
87214: LD_ADDR_VAR 0 6
87218: PUSH
87219: LD_INT 1
87221: ST_TO_ADDR
// end ; if btype = b_barracks then
87222: LD_VAR 0 5
87226: PUSH
87227: LD_INT 5
87229: EQUAL
87230: IFFALSE 87240
// btype := b_armoury ;
87232: LD_ADDR_VAR 0 5
87236: PUSH
87237: LD_INT 4
87239: ST_TO_ADDR
// if btype in [ b_lab_half , b_lab_full ] then
87240: LD_VAR 0 5
87244: PUSH
87245: LD_INT 7
87247: PUSH
87248: LD_INT 8
87250: PUSH
87251: EMPTY
87252: LIST
87253: LIST
87254: IN
87255: IFFALSE 87265
// btype := b_lab ;
87257: LD_ADDR_VAR 0 5
87261: PUSH
87262: LD_INT 6
87264: ST_TO_ADDR
// mc_build_list := ReplaceIn ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
87265: LD_ADDR_EXP 55
87269: PUSH
87270: LD_EXP 55
87274: PPUSH
87275: LD_VAR 0 3
87279: PUSH
87280: LD_EXP 55
87284: PUSH
87285: LD_VAR 0 3
87289: ARRAY
87290: PUSH
87291: LD_INT 1
87293: PLUS
87294: PUSH
87295: EMPTY
87296: LIST
87297: LIST
87298: PPUSH
87299: LD_VAR 0 5
87303: PUSH
87304: LD_VAR 0 1
87308: PPUSH
87309: CALL_OW 250
87313: PUSH
87314: LD_VAR 0 1
87318: PPUSH
87319: CALL_OW 251
87323: PUSH
87324: LD_VAR 0 1
87328: PPUSH
87329: CALL_OW 254
87333: PUSH
87334: EMPTY
87335: LIST
87336: LIST
87337: LIST
87338: LIST
87339: PPUSH
87340: CALL 24858 0 3
87344: ST_TO_ADDR
// if pos = 1 then
87345: LD_VAR 0 6
87349: PUSH
87350: LD_INT 1
87352: EQUAL
87353: IFFALSE 87468
// begin tmp := mc_build_list [ i ] ;
87355: LD_ADDR_VAR 0 7
87359: PUSH
87360: LD_EXP 55
87364: PUSH
87365: LD_VAR 0 3
87369: ARRAY
87370: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
87371: LD_VAR 0 7
87375: PPUSH
87376: LD_INT 2
87378: PUSH
87379: LD_INT 30
87381: PUSH
87382: LD_INT 0
87384: PUSH
87385: EMPTY
87386: LIST
87387: LIST
87388: PUSH
87389: LD_INT 30
87391: PUSH
87392: LD_INT 1
87394: PUSH
87395: EMPTY
87396: LIST
87397: LIST
87398: PUSH
87399: EMPTY
87400: LIST
87401: LIST
87402: LIST
87403: PPUSH
87404: CALL_OW 72
87408: IFFALSE 87418
// pos := 2 ;
87410: LD_ADDR_VAR 0 6
87414: PUSH
87415: LD_INT 2
87417: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
87418: LD_ADDR_VAR 0 7
87422: PUSH
87423: LD_VAR 0 7
87427: PPUSH
87428: LD_VAR 0 6
87432: PPUSH
87433: LD_VAR 0 7
87437: PPUSH
87438: CALL 25184 0 3
87442: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
87443: LD_ADDR_EXP 55
87447: PUSH
87448: LD_EXP 55
87452: PPUSH
87453: LD_VAR 0 3
87457: PPUSH
87458: LD_VAR 0 7
87462: PPUSH
87463: CALL_OW 1
87467: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
87468: LD_VAR 0 1
87472: PUSH
87473: LD_EXP 50
87477: PUSH
87478: LD_VAR 0 3
87482: ARRAY
87483: IN
87484: IFFALSE 87523
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
87486: LD_ADDR_EXP 50
87490: PUSH
87491: LD_EXP 50
87495: PPUSH
87496: LD_VAR 0 3
87500: PPUSH
87501: LD_EXP 50
87505: PUSH
87506: LD_VAR 0 3
87510: ARRAY
87511: PUSH
87512: LD_VAR 0 1
87516: DIFF
87517: PPUSH
87518: CALL_OW 1
87522: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
87523: LD_VAR 0 1
87527: PUSH
87528: LD_EXP 57
87532: PUSH
87533: LD_VAR 0 3
87537: ARRAY
87538: IN
87539: IFFALSE 87578
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
87541: LD_ADDR_EXP 57
87545: PUSH
87546: LD_EXP 57
87550: PPUSH
87551: LD_VAR 0 3
87555: PPUSH
87556: LD_EXP 57
87560: PUSH
87561: LD_VAR 0 3
87565: ARRAY
87566: PUSH
87567: LD_VAR 0 1
87571: DIFF
87572: PPUSH
87573: CALL_OW 1
87577: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
87578: LD_VAR 0 1
87582: PUSH
87583: LD_EXP 69
87587: PUSH
87588: LD_VAR 0 3
87592: ARRAY
87593: IN
87594: IFFALSE 87633
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
87596: LD_ADDR_EXP 69
87600: PUSH
87601: LD_EXP 69
87605: PPUSH
87606: LD_VAR 0 3
87610: PPUSH
87611: LD_EXP 69
87615: PUSH
87616: LD_VAR 0 3
87620: ARRAY
87621: PUSH
87622: LD_VAR 0 1
87626: DIFF
87627: PPUSH
87628: CALL_OW 1
87632: ST_TO_ADDR
// end ; if un in mc_defender [ i ] then
87633: LD_VAR 0 1
87637: PUSH
87638: LD_EXP 72
87642: PUSH
87643: LD_VAR 0 3
87647: ARRAY
87648: IN
87649: IFFALSE 87688
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
87651: LD_ADDR_EXP 72
87655: PUSH
87656: LD_EXP 72
87660: PPUSH
87661: LD_VAR 0 3
87665: PPUSH
87666: LD_EXP 72
87670: PUSH
87671: LD_VAR 0 3
87675: ARRAY
87676: PUSH
87677: LD_VAR 0 1
87681: DIFF
87682: PPUSH
87683: CALL_OW 1
87687: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
87688: LD_VAR 0 1
87692: PUSH
87693: LD_EXP 59
87697: PUSH
87698: LD_VAR 0 3
87702: ARRAY
87703: IN
87704: IFFALSE 87743
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
87706: LD_ADDR_EXP 59
87710: PUSH
87711: LD_EXP 59
87715: PPUSH
87716: LD_VAR 0 3
87720: PPUSH
87721: LD_EXP 59
87725: PUSH
87726: LD_VAR 0 3
87730: ARRAY
87731: PUSH
87732: LD_VAR 0 1
87736: DIFF
87737: PPUSH
87738: CALL_OW 1
87742: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
87743: LD_VAR 0 1
87747: PUSH
87748: LD_EXP 58
87752: PUSH
87753: LD_VAR 0 3
87757: ARRAY
87758: IN
87759: IFFALSE 87798
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
87761: LD_ADDR_EXP 58
87765: PUSH
87766: LD_EXP 58
87770: PPUSH
87771: LD_VAR 0 3
87775: PPUSH
87776: LD_EXP 58
87780: PUSH
87781: LD_VAR 0 3
87785: ARRAY
87786: PUSH
87787: LD_VAR 0 1
87791: DIFF
87792: PPUSH
87793: CALL_OW 1
87797: ST_TO_ADDR
// end ; break ;
87798: GO 87802
// end ;
87800: GO 86448
87802: POP
87803: POP
// end ;
87804: LD_VAR 0 2
87808: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
87809: LD_INT 0
87811: PPUSH
87812: PPUSH
87813: PPUSH
// if not mc_bases or not skirmish then
87814: LD_EXP 50
87818: NOT
87819: PUSH
87820: LD_EXP 48
87824: NOT
87825: OR
87826: IFFALSE 87830
// exit ;
87828: GO 88045
// for i = 1 to mc_bases do
87830: LD_ADDR_VAR 0 3
87834: PUSH
87835: DOUBLE
87836: LD_INT 1
87838: DEC
87839: ST_TO_ADDR
87840: LD_EXP 50
87844: PUSH
87845: FOR_TO
87846: IFFALSE 88043
// begin if building in mc_construct_list [ i ] then
87848: LD_VAR 0 1
87852: PUSH
87853: LD_EXP 57
87857: PUSH
87858: LD_VAR 0 3
87862: ARRAY
87863: IN
87864: IFFALSE 88041
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
87866: LD_ADDR_EXP 57
87870: PUSH
87871: LD_EXP 57
87875: PPUSH
87876: LD_VAR 0 3
87880: PPUSH
87881: LD_EXP 57
87885: PUSH
87886: LD_VAR 0 3
87890: ARRAY
87891: PUSH
87892: LD_VAR 0 1
87896: DIFF
87897: PPUSH
87898: CALL_OW 1
87902: ST_TO_ADDR
// if building in mc_lab [ i ] then
87903: LD_VAR 0 1
87907: PUSH
87908: LD_EXP 83
87912: PUSH
87913: LD_VAR 0 3
87917: ARRAY
87918: IN
87919: IFFALSE 87974
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
87921: LD_ADDR_EXP 84
87925: PUSH
87926: LD_EXP 84
87930: PPUSH
87931: LD_VAR 0 3
87935: PPUSH
87936: LD_EXP 84
87940: PUSH
87941: LD_VAR 0 3
87945: ARRAY
87946: PPUSH
87947: LD_INT 1
87949: PPUSH
87950: LD_EXP 84
87954: PUSH
87955: LD_VAR 0 3
87959: ARRAY
87960: PPUSH
87961: LD_INT 0
87963: PPUSH
87964: CALL 24276 0 4
87968: PPUSH
87969: CALL_OW 1
87973: ST_TO_ADDR
// if not building in mc_bases [ i ] then
87974: LD_VAR 0 1
87978: PUSH
87979: LD_EXP 50
87983: PUSH
87984: LD_VAR 0 3
87988: ARRAY
87989: IN
87990: NOT
87991: IFFALSE 88037
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
87993: LD_ADDR_EXP 50
87997: PUSH
87998: LD_EXP 50
88002: PPUSH
88003: LD_VAR 0 3
88007: PUSH
88008: LD_EXP 50
88012: PUSH
88013: LD_VAR 0 3
88017: ARRAY
88018: PUSH
88019: LD_INT 1
88021: PLUS
88022: PUSH
88023: EMPTY
88024: LIST
88025: LIST
88026: PPUSH
88027: LD_VAR 0 1
88031: PPUSH
88032: CALL 24858 0 3
88036: ST_TO_ADDR
// exit ;
88037: POP
88038: POP
88039: GO 88045
// end ; end ;
88041: GO 87845
88043: POP
88044: POP
// end ;
88045: LD_VAR 0 2
88049: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
88050: LD_INT 0
88052: PPUSH
88053: PPUSH
88054: PPUSH
88055: PPUSH
88056: PPUSH
88057: PPUSH
88058: PPUSH
// if not mc_bases or not skirmish then
88059: LD_EXP 50
88063: NOT
88064: PUSH
88065: LD_EXP 48
88069: NOT
88070: OR
88071: IFFALSE 88075
// exit ;
88073: GO 88736
// for i = 1 to mc_bases do
88075: LD_ADDR_VAR 0 3
88079: PUSH
88080: DOUBLE
88081: LD_INT 1
88083: DEC
88084: ST_TO_ADDR
88085: LD_EXP 50
88089: PUSH
88090: FOR_TO
88091: IFFALSE 88734
// begin if building in mc_construct_list [ i ] then
88093: LD_VAR 0 1
88097: PUSH
88098: LD_EXP 57
88102: PUSH
88103: LD_VAR 0 3
88107: ARRAY
88108: IN
88109: IFFALSE 88732
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
88111: LD_ADDR_EXP 57
88115: PUSH
88116: LD_EXP 57
88120: PPUSH
88121: LD_VAR 0 3
88125: PPUSH
88126: LD_EXP 57
88130: PUSH
88131: LD_VAR 0 3
88135: ARRAY
88136: PUSH
88137: LD_VAR 0 1
88141: DIFF
88142: PPUSH
88143: CALL_OW 1
88147: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
88148: LD_ADDR_EXP 50
88152: PUSH
88153: LD_EXP 50
88157: PPUSH
88158: LD_VAR 0 3
88162: PUSH
88163: LD_EXP 50
88167: PUSH
88168: LD_VAR 0 3
88172: ARRAY
88173: PUSH
88174: LD_INT 1
88176: PLUS
88177: PUSH
88178: EMPTY
88179: LIST
88180: LIST
88181: PPUSH
88182: LD_VAR 0 1
88186: PPUSH
88187: CALL 24858 0 3
88191: ST_TO_ADDR
// btype := GetBType ( building ) ;
88192: LD_ADDR_VAR 0 5
88196: PUSH
88197: LD_VAR 0 1
88201: PPUSH
88202: CALL_OW 266
88206: ST_TO_ADDR
// side := GetSide ( building ) ;
88207: LD_ADDR_VAR 0 8
88211: PUSH
88212: LD_VAR 0 1
88216: PPUSH
88217: CALL_OW 255
88221: ST_TO_ADDR
// if btype = b_lab then
88222: LD_VAR 0 5
88226: PUSH
88227: LD_INT 6
88229: EQUAL
88230: IFFALSE 88280
// begin mc_lab := ReplaceIn ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
88232: LD_ADDR_EXP 83
88236: PUSH
88237: LD_EXP 83
88241: PPUSH
88242: LD_VAR 0 3
88246: PUSH
88247: LD_EXP 83
88251: PUSH
88252: LD_VAR 0 3
88256: ARRAY
88257: PUSH
88258: LD_INT 1
88260: PLUS
88261: PUSH
88262: EMPTY
88263: LIST
88264: LIST
88265: PPUSH
88266: LD_VAR 0 1
88270: PPUSH
88271: CALL 24858 0 3
88275: ST_TO_ADDR
// exit ;
88276: POP
88277: POP
88278: GO 88736
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
88280: LD_VAR 0 5
88284: PUSH
88285: LD_INT 0
88287: PUSH
88288: LD_INT 2
88290: PUSH
88291: LD_INT 4
88293: PUSH
88294: EMPTY
88295: LIST
88296: LIST
88297: LIST
88298: IN
88299: IFFALSE 88423
// begin if btype = b_armoury then
88301: LD_VAR 0 5
88305: PUSH
88306: LD_INT 4
88308: EQUAL
88309: IFFALSE 88319
// btype := b_barracks ;
88311: LD_ADDR_VAR 0 5
88315: PUSH
88316: LD_INT 5
88318: ST_TO_ADDR
// if btype = b_depot then
88319: LD_VAR 0 5
88323: PUSH
88324: LD_INT 0
88326: EQUAL
88327: IFFALSE 88337
// btype := b_warehouse ;
88329: LD_ADDR_VAR 0 5
88333: PUSH
88334: LD_INT 1
88336: ST_TO_ADDR
// if btype = b_workshop then
88337: LD_VAR 0 5
88341: PUSH
88342: LD_INT 2
88344: EQUAL
88345: IFFALSE 88355
// btype := b_factory ;
88347: LD_ADDR_VAR 0 5
88351: PUSH
88352: LD_INT 3
88354: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
88355: LD_VAR 0 5
88359: PPUSH
88360: LD_VAR 0 8
88364: PPUSH
88365: CALL_OW 323
88369: PUSH
88370: LD_INT 1
88372: EQUAL
88373: IFFALSE 88419
// mc_build_upgrade := ReplaceIn ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
88375: LD_ADDR_EXP 82
88379: PUSH
88380: LD_EXP 82
88384: PPUSH
88385: LD_VAR 0 3
88389: PUSH
88390: LD_EXP 82
88394: PUSH
88395: LD_VAR 0 3
88399: ARRAY
88400: PUSH
88401: LD_INT 1
88403: PLUS
88404: PUSH
88405: EMPTY
88406: LIST
88407: LIST
88408: PPUSH
88409: LD_VAR 0 1
88413: PPUSH
88414: CALL 24858 0 3
88418: ST_TO_ADDR
// exit ;
88419: POP
88420: POP
88421: GO 88736
// end ; if btype in [ b_bunker , b_turret ] then
88423: LD_VAR 0 5
88427: PUSH
88428: LD_INT 32
88430: PUSH
88431: LD_INT 33
88433: PUSH
88434: EMPTY
88435: LIST
88436: LIST
88437: IN
88438: IFFALSE 88728
// begin mc_turret_list := ReplaceIn ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
88440: LD_ADDR_EXP 58
88444: PUSH
88445: LD_EXP 58
88449: PPUSH
88450: LD_VAR 0 3
88454: PUSH
88455: LD_EXP 58
88459: PUSH
88460: LD_VAR 0 3
88464: ARRAY
88465: PUSH
88466: LD_INT 1
88468: PLUS
88469: PUSH
88470: EMPTY
88471: LIST
88472: LIST
88473: PPUSH
88474: LD_VAR 0 1
88478: PPUSH
88479: CALL 24858 0 3
88483: ST_TO_ADDR
// if btype = b_bunker then
88484: LD_VAR 0 5
88488: PUSH
88489: LD_INT 32
88491: EQUAL
88492: IFFALSE 88728
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
88494: LD_ADDR_EXP 59
88498: PUSH
88499: LD_EXP 59
88503: PPUSH
88504: LD_VAR 0 3
88508: PUSH
88509: LD_EXP 59
88513: PUSH
88514: LD_VAR 0 3
88518: ARRAY
88519: PUSH
88520: LD_INT 1
88522: PLUS
88523: PUSH
88524: EMPTY
88525: LIST
88526: LIST
88527: PPUSH
88528: LD_VAR 0 1
88532: PPUSH
88533: CALL 24858 0 3
88537: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
88538: LD_ADDR_VAR 0 6
88542: PUSH
88543: LD_EXP 50
88547: PUSH
88548: LD_VAR 0 3
88552: ARRAY
88553: PPUSH
88554: LD_INT 25
88556: PUSH
88557: LD_INT 1
88559: PUSH
88560: EMPTY
88561: LIST
88562: LIST
88563: PUSH
88564: LD_INT 3
88566: PUSH
88567: LD_INT 54
88569: PUSH
88570: EMPTY
88571: LIST
88572: PUSH
88573: EMPTY
88574: LIST
88575: LIST
88576: PUSH
88577: EMPTY
88578: LIST
88579: LIST
88580: PPUSH
88581: CALL_OW 72
88585: ST_TO_ADDR
// if tmp then
88586: LD_VAR 0 6
88590: IFFALSE 88596
// exit ;
88592: POP
88593: POP
88594: GO 88736
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
88596: LD_ADDR_VAR 0 6
88600: PUSH
88601: LD_EXP 50
88605: PUSH
88606: LD_VAR 0 3
88610: ARRAY
88611: PPUSH
88612: LD_INT 2
88614: PUSH
88615: LD_INT 30
88617: PUSH
88618: LD_INT 4
88620: PUSH
88621: EMPTY
88622: LIST
88623: LIST
88624: PUSH
88625: LD_INT 30
88627: PUSH
88628: LD_INT 5
88630: PUSH
88631: EMPTY
88632: LIST
88633: LIST
88634: PUSH
88635: EMPTY
88636: LIST
88637: LIST
88638: LIST
88639: PPUSH
88640: CALL_OW 72
88644: ST_TO_ADDR
// if not tmp then
88645: LD_VAR 0 6
88649: NOT
88650: IFFALSE 88656
// exit ;
88652: POP
88653: POP
88654: GO 88736
// for j in tmp do
88656: LD_ADDR_VAR 0 4
88660: PUSH
88661: LD_VAR 0 6
88665: PUSH
88666: FOR_IN
88667: IFFALSE 88726
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
88669: LD_ADDR_VAR 0 7
88673: PUSH
88674: LD_VAR 0 4
88678: PPUSH
88679: CALL_OW 313
88683: PPUSH
88684: LD_INT 25
88686: PUSH
88687: LD_INT 1
88689: PUSH
88690: EMPTY
88691: LIST
88692: LIST
88693: PPUSH
88694: CALL_OW 72
88698: ST_TO_ADDR
// if units then
88699: LD_VAR 0 7
88703: IFFALSE 88724
// begin ComExitBuilding ( units [ 1 ] ) ;
88705: LD_VAR 0 7
88709: PUSH
88710: LD_INT 1
88712: ARRAY
88713: PPUSH
88714: CALL_OW 122
// exit ;
88718: POP
88719: POP
88720: POP
88721: POP
88722: GO 88736
// end ; end ;
88724: GO 88666
88726: POP
88727: POP
// end ; end ; exit ;
88728: POP
88729: POP
88730: GO 88736
// end ; end ;
88732: GO 88090
88734: POP
88735: POP
// end ;
88736: LD_VAR 0 2
88740: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
88741: LD_INT 0
88743: PPUSH
88744: PPUSH
88745: PPUSH
88746: PPUSH
88747: PPUSH
88748: PPUSH
88749: PPUSH
// if not mc_bases or not skirmish then
88750: LD_EXP 50
88754: NOT
88755: PUSH
88756: LD_EXP 48
88760: NOT
88761: OR
88762: IFFALSE 88766
// exit ;
88764: GO 89031
// btype := GetBType ( building ) ;
88766: LD_ADDR_VAR 0 6
88770: PUSH
88771: LD_VAR 0 1
88775: PPUSH
88776: CALL_OW 266
88780: ST_TO_ADDR
// x := GetX ( building ) ;
88781: LD_ADDR_VAR 0 7
88785: PUSH
88786: LD_VAR 0 1
88790: PPUSH
88791: CALL_OW 250
88795: ST_TO_ADDR
// y := GetY ( building ) ;
88796: LD_ADDR_VAR 0 8
88800: PUSH
88801: LD_VAR 0 1
88805: PPUSH
88806: CALL_OW 251
88810: ST_TO_ADDR
// d := GetDir ( building ) ;
88811: LD_ADDR_VAR 0 9
88815: PUSH
88816: LD_VAR 0 1
88820: PPUSH
88821: CALL_OW 254
88825: ST_TO_ADDR
// for i = 1 to mc_bases do
88826: LD_ADDR_VAR 0 4
88830: PUSH
88831: DOUBLE
88832: LD_INT 1
88834: DEC
88835: ST_TO_ADDR
88836: LD_EXP 50
88840: PUSH
88841: FOR_TO
88842: IFFALSE 89029
// begin if not mc_build_list [ i ] then
88844: LD_EXP 55
88848: PUSH
88849: LD_VAR 0 4
88853: ARRAY
88854: NOT
88855: IFFALSE 88859
// continue ;
88857: GO 88841
// for j := 1 to mc_build_list [ i ] do
88859: LD_ADDR_VAR 0 5
88863: PUSH
88864: DOUBLE
88865: LD_INT 1
88867: DEC
88868: ST_TO_ADDR
88869: LD_EXP 55
88873: PUSH
88874: LD_VAR 0 4
88878: ARRAY
88879: PUSH
88880: FOR_TO
88881: IFFALSE 89025
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ j ] ) then
88883: LD_VAR 0 6
88887: PUSH
88888: LD_VAR 0 7
88892: PUSH
88893: LD_VAR 0 8
88897: PUSH
88898: LD_VAR 0 9
88902: PUSH
88903: EMPTY
88904: LIST
88905: LIST
88906: LIST
88907: LIST
88908: PPUSH
88909: LD_EXP 55
88913: PUSH
88914: LD_VAR 0 4
88918: ARRAY
88919: PUSH
88920: LD_VAR 0 5
88924: ARRAY
88925: PPUSH
88926: CALL 31040 0 2
88930: IFFALSE 89023
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , j ) ) ;
88932: LD_ADDR_EXP 55
88936: PUSH
88937: LD_EXP 55
88941: PPUSH
88942: LD_VAR 0 4
88946: PPUSH
88947: LD_EXP 55
88951: PUSH
88952: LD_VAR 0 4
88956: ARRAY
88957: PPUSH
88958: LD_VAR 0 5
88962: PPUSH
88963: CALL_OW 3
88967: PPUSH
88968: CALL_OW 1
88972: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
88973: LD_ADDR_EXP 57
88977: PUSH
88978: LD_EXP 57
88982: PPUSH
88983: LD_VAR 0 4
88987: PUSH
88988: LD_EXP 57
88992: PUSH
88993: LD_VAR 0 4
88997: ARRAY
88998: PUSH
88999: LD_INT 1
89001: PLUS
89002: PUSH
89003: EMPTY
89004: LIST
89005: LIST
89006: PPUSH
89007: LD_VAR 0 1
89011: PPUSH
89012: CALL 24858 0 3
89016: ST_TO_ADDR
// exit ;
89017: POP
89018: POP
89019: POP
89020: POP
89021: GO 89031
// end ;
89023: GO 88880
89025: POP
89026: POP
// end ;
89027: GO 88841
89029: POP
89030: POP
// end ;
89031: LD_VAR 0 3
89035: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
89036: LD_INT 0
89038: PPUSH
89039: PPUSH
89040: PPUSH
// if not mc_bases or not skirmish then
89041: LD_EXP 50
89045: NOT
89046: PUSH
89047: LD_EXP 48
89051: NOT
89052: OR
89053: IFFALSE 89057
// exit ;
89055: GO 89247
// for i = 1 to mc_bases do
89057: LD_ADDR_VAR 0 4
89061: PUSH
89062: DOUBLE
89063: LD_INT 1
89065: DEC
89066: ST_TO_ADDR
89067: LD_EXP 50
89071: PUSH
89072: FOR_TO
89073: IFFALSE 89160
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
89075: LD_VAR 0 1
89079: PUSH
89080: LD_EXP 58
89084: PUSH
89085: LD_VAR 0 4
89089: ARRAY
89090: IN
89091: PUSH
89092: LD_VAR 0 1
89096: PUSH
89097: LD_EXP 59
89101: PUSH
89102: LD_VAR 0 4
89106: ARRAY
89107: IN
89108: NOT
89109: AND
89110: IFFALSE 89158
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
89112: LD_ADDR_EXP 59
89116: PUSH
89117: LD_EXP 59
89121: PPUSH
89122: LD_VAR 0 4
89126: PUSH
89127: LD_EXP 59
89131: PUSH
89132: LD_VAR 0 4
89136: ARRAY
89137: PUSH
89138: LD_INT 1
89140: PLUS
89141: PUSH
89142: EMPTY
89143: LIST
89144: LIST
89145: PPUSH
89146: LD_VAR 0 1
89150: PPUSH
89151: CALL 24858 0 3
89155: ST_TO_ADDR
// break ;
89156: GO 89160
// end ; end ;
89158: GO 89072
89160: POP
89161: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
89162: LD_VAR 0 1
89166: PPUSH
89167: CALL_OW 257
89171: PUSH
89172: LD_EXP 76
89176: IN
89177: PUSH
89178: LD_VAR 0 1
89182: PPUSH
89183: CALL_OW 266
89187: PUSH
89188: LD_INT 5
89190: EQUAL
89191: AND
89192: PUSH
89193: LD_VAR 0 2
89197: PPUSH
89198: CALL_OW 110
89202: PUSH
89203: LD_INT 18
89205: NONEQUAL
89206: AND
89207: IFFALSE 89247
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
89209: LD_VAR 0 2
89213: PPUSH
89214: CALL_OW 257
89218: PUSH
89219: LD_INT 5
89221: PUSH
89222: LD_INT 8
89224: PUSH
89225: LD_INT 9
89227: PUSH
89228: EMPTY
89229: LIST
89230: LIST
89231: LIST
89232: IN
89233: IFFALSE 89247
// SetClass ( unit , 1 ) ;
89235: LD_VAR 0 2
89239: PPUSH
89240: LD_INT 1
89242: PPUSH
89243: CALL_OW 336
// end ;
89247: LD_VAR 0 3
89251: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
89252: LD_INT 0
89254: PPUSH
89255: PPUSH
// if not mc_bases or not skirmish then
89256: LD_EXP 50
89260: NOT
89261: PUSH
89262: LD_EXP 48
89266: NOT
89267: OR
89268: IFFALSE 89272
// exit ;
89270: GO 89388
// if GetLives ( abandoned_vehicle ) > 250 then
89272: LD_VAR 0 2
89276: PPUSH
89277: CALL_OW 256
89281: PUSH
89282: LD_INT 250
89284: GREATER
89285: IFFALSE 89289
// exit ;
89287: GO 89388
// for i = 1 to mc_bases do
89289: LD_ADDR_VAR 0 6
89293: PUSH
89294: DOUBLE
89295: LD_INT 1
89297: DEC
89298: ST_TO_ADDR
89299: LD_EXP 50
89303: PUSH
89304: FOR_TO
89305: IFFALSE 89386
// begin if driver in mc_bases [ i ] then
89307: LD_VAR 0 1
89311: PUSH
89312: LD_EXP 50
89316: PUSH
89317: LD_VAR 0 6
89321: ARRAY
89322: IN
89323: IFFALSE 89384
// begin ComMoveToNearbyEntrance ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
89325: LD_VAR 0 1
89329: PPUSH
89330: LD_EXP 50
89334: PUSH
89335: LD_VAR 0 6
89339: ARRAY
89340: PPUSH
89341: LD_INT 2
89343: PUSH
89344: LD_INT 30
89346: PUSH
89347: LD_INT 0
89349: PUSH
89350: EMPTY
89351: LIST
89352: LIST
89353: PUSH
89354: LD_INT 30
89356: PUSH
89357: LD_INT 1
89359: PUSH
89360: EMPTY
89361: LIST
89362: LIST
89363: PUSH
89364: EMPTY
89365: LIST
89366: LIST
89367: LIST
89368: PPUSH
89369: CALL_OW 72
89373: PUSH
89374: LD_INT 1
89376: ARRAY
89377: PPUSH
89378: CALL 57476 0 2
// break ;
89382: GO 89386
// end ; end ;
89384: GO 89304
89386: POP
89387: POP
// end ; end_of_file end_of_file
89388: LD_VAR 0 5
89392: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
89393: LD_INT 0
89395: PPUSH
// if p2 = 100 then
89396: LD_VAR 0 2
89400: PUSH
89401: LD_INT 100
89403: EQUAL
89404: IFFALSE 90353
// begin if not StreamModeActive then
89406: LD_EXP 94
89410: NOT
89411: IFFALSE 89421
// StreamModeActive := true ;
89413: LD_ADDR_EXP 94
89417: PUSH
89418: LD_INT 1
89420: ST_TO_ADDR
// if p3 = 0 then
89421: LD_VAR 0 3
89425: PUSH
89426: LD_INT 0
89428: EQUAL
89429: IFFALSE 89435
// InitStreamMode ;
89431: CALL 90513 0 0
// if p3 = 1 then
89435: LD_VAR 0 3
89439: PUSH
89440: LD_INT 1
89442: EQUAL
89443: IFFALSE 89453
// sRocket := true ;
89445: LD_ADDR_EXP 99
89449: PUSH
89450: LD_INT 1
89452: ST_TO_ADDR
// if p3 = 2 then
89453: LD_VAR 0 3
89457: PUSH
89458: LD_INT 2
89460: EQUAL
89461: IFFALSE 89471
// sSpeed := true ;
89463: LD_ADDR_EXP 98
89467: PUSH
89468: LD_INT 1
89470: ST_TO_ADDR
// if p3 = 3 then
89471: LD_VAR 0 3
89475: PUSH
89476: LD_INT 3
89478: EQUAL
89479: IFFALSE 89489
// sEngine := true ;
89481: LD_ADDR_EXP 100
89485: PUSH
89486: LD_INT 1
89488: ST_TO_ADDR
// if p3 = 4 then
89489: LD_VAR 0 3
89493: PUSH
89494: LD_INT 4
89496: EQUAL
89497: IFFALSE 89507
// sSpec := true ;
89499: LD_ADDR_EXP 97
89503: PUSH
89504: LD_INT 1
89506: ST_TO_ADDR
// if p3 = 5 then
89507: LD_VAR 0 3
89511: PUSH
89512: LD_INT 5
89514: EQUAL
89515: IFFALSE 89525
// sLevel := true ;
89517: LD_ADDR_EXP 101
89521: PUSH
89522: LD_INT 1
89524: ST_TO_ADDR
// if p3 = 6 then
89525: LD_VAR 0 3
89529: PUSH
89530: LD_INT 6
89532: EQUAL
89533: IFFALSE 89543
// sArmoury := true ;
89535: LD_ADDR_EXP 102
89539: PUSH
89540: LD_INT 1
89542: ST_TO_ADDR
// if p3 = 7 then
89543: LD_VAR 0 3
89547: PUSH
89548: LD_INT 7
89550: EQUAL
89551: IFFALSE 89561
// sRadar := true ;
89553: LD_ADDR_EXP 103
89557: PUSH
89558: LD_INT 1
89560: ST_TO_ADDR
// if p3 = 8 then
89561: LD_VAR 0 3
89565: PUSH
89566: LD_INT 8
89568: EQUAL
89569: IFFALSE 89579
// sBunker := true ;
89571: LD_ADDR_EXP 104
89575: PUSH
89576: LD_INT 1
89578: ST_TO_ADDR
// if p3 = 9 then
89579: LD_VAR 0 3
89583: PUSH
89584: LD_INT 9
89586: EQUAL
89587: IFFALSE 89597
// sHack := true ;
89589: LD_ADDR_EXP 105
89593: PUSH
89594: LD_INT 1
89596: ST_TO_ADDR
// if p3 = 10 then
89597: LD_VAR 0 3
89601: PUSH
89602: LD_INT 10
89604: EQUAL
89605: IFFALSE 89615
// sFire := true ;
89607: LD_ADDR_EXP 106
89611: PUSH
89612: LD_INT 1
89614: ST_TO_ADDR
// if p3 = 11 then
89615: LD_VAR 0 3
89619: PUSH
89620: LD_INT 11
89622: EQUAL
89623: IFFALSE 89633
// sRefresh := true ;
89625: LD_ADDR_EXP 107
89629: PUSH
89630: LD_INT 1
89632: ST_TO_ADDR
// if p3 = 12 then
89633: LD_VAR 0 3
89637: PUSH
89638: LD_INT 12
89640: EQUAL
89641: IFFALSE 89651
// sExp := true ;
89643: LD_ADDR_EXP 108
89647: PUSH
89648: LD_INT 1
89650: ST_TO_ADDR
// if p3 = 13 then
89651: LD_VAR 0 3
89655: PUSH
89656: LD_INT 13
89658: EQUAL
89659: IFFALSE 89669
// sDepot := true ;
89661: LD_ADDR_EXP 109
89665: PUSH
89666: LD_INT 1
89668: ST_TO_ADDR
// if p3 = 14 then
89669: LD_VAR 0 3
89673: PUSH
89674: LD_INT 14
89676: EQUAL
89677: IFFALSE 89687
// sFlag := true ;
89679: LD_ADDR_EXP 110
89683: PUSH
89684: LD_INT 1
89686: ST_TO_ADDR
// if p3 = 15 then
89687: LD_VAR 0 3
89691: PUSH
89692: LD_INT 15
89694: EQUAL
89695: IFFALSE 89705
// sKamikadze := true ;
89697: LD_ADDR_EXP 118
89701: PUSH
89702: LD_INT 1
89704: ST_TO_ADDR
// if p3 = 16 then
89705: LD_VAR 0 3
89709: PUSH
89710: LD_INT 16
89712: EQUAL
89713: IFFALSE 89723
// sTroll := true ;
89715: LD_ADDR_EXP 119
89719: PUSH
89720: LD_INT 1
89722: ST_TO_ADDR
// if p3 = 17 then
89723: LD_VAR 0 3
89727: PUSH
89728: LD_INT 17
89730: EQUAL
89731: IFFALSE 89741
// sSlow := true ;
89733: LD_ADDR_EXP 120
89737: PUSH
89738: LD_INT 1
89740: ST_TO_ADDR
// if p3 = 18 then
89741: LD_VAR 0 3
89745: PUSH
89746: LD_INT 18
89748: EQUAL
89749: IFFALSE 89759
// sLack := true ;
89751: LD_ADDR_EXP 121
89755: PUSH
89756: LD_INT 1
89758: ST_TO_ADDR
// if p3 = 19 then
89759: LD_VAR 0 3
89763: PUSH
89764: LD_INT 19
89766: EQUAL
89767: IFFALSE 89777
// sTank := true ;
89769: LD_ADDR_EXP 123
89773: PUSH
89774: LD_INT 1
89776: ST_TO_ADDR
// if p3 = 20 then
89777: LD_VAR 0 3
89781: PUSH
89782: LD_INT 20
89784: EQUAL
89785: IFFALSE 89795
// sRemote := true ;
89787: LD_ADDR_EXP 124
89791: PUSH
89792: LD_INT 1
89794: ST_TO_ADDR
// if p3 = 21 then
89795: LD_VAR 0 3
89799: PUSH
89800: LD_INT 21
89802: EQUAL
89803: IFFALSE 89813
// sPowell := true ;
89805: LD_ADDR_EXP 125
89809: PUSH
89810: LD_INT 1
89812: ST_TO_ADDR
// if p3 = 22 then
89813: LD_VAR 0 3
89817: PUSH
89818: LD_INT 22
89820: EQUAL
89821: IFFALSE 89831
// sTeleport := true ;
89823: LD_ADDR_EXP 128
89827: PUSH
89828: LD_INT 1
89830: ST_TO_ADDR
// if p3 = 23 then
89831: LD_VAR 0 3
89835: PUSH
89836: LD_INT 23
89838: EQUAL
89839: IFFALSE 89849
// sOilTower := true ;
89841: LD_ADDR_EXP 130
89845: PUSH
89846: LD_INT 1
89848: ST_TO_ADDR
// if p3 = 24 then
89849: LD_VAR 0 3
89853: PUSH
89854: LD_INT 24
89856: EQUAL
89857: IFFALSE 89867
// sShovel := true ;
89859: LD_ADDR_EXP 131
89863: PUSH
89864: LD_INT 1
89866: ST_TO_ADDR
// if p3 = 25 then
89867: LD_VAR 0 3
89871: PUSH
89872: LD_INT 25
89874: EQUAL
89875: IFFALSE 89885
// sSheik := true ;
89877: LD_ADDR_EXP 132
89881: PUSH
89882: LD_INT 1
89884: ST_TO_ADDR
// if p3 = 26 then
89885: LD_VAR 0 3
89889: PUSH
89890: LD_INT 26
89892: EQUAL
89893: IFFALSE 89903
// sEarthquake := true ;
89895: LD_ADDR_EXP 134
89899: PUSH
89900: LD_INT 1
89902: ST_TO_ADDR
// if p3 = 27 then
89903: LD_VAR 0 3
89907: PUSH
89908: LD_INT 27
89910: EQUAL
89911: IFFALSE 89921
// sAI := true ;
89913: LD_ADDR_EXP 135
89917: PUSH
89918: LD_INT 1
89920: ST_TO_ADDR
// if p3 = 28 then
89921: LD_VAR 0 3
89925: PUSH
89926: LD_INT 28
89928: EQUAL
89929: IFFALSE 89939
// sCargo := true ;
89931: LD_ADDR_EXP 138
89935: PUSH
89936: LD_INT 1
89938: ST_TO_ADDR
// if p3 = 29 then
89939: LD_VAR 0 3
89943: PUSH
89944: LD_INT 29
89946: EQUAL
89947: IFFALSE 89957
// sDLaser := true ;
89949: LD_ADDR_EXP 139
89953: PUSH
89954: LD_INT 1
89956: ST_TO_ADDR
// if p3 = 30 then
89957: LD_VAR 0 3
89961: PUSH
89962: LD_INT 30
89964: EQUAL
89965: IFFALSE 89975
// sExchange := true ;
89967: LD_ADDR_EXP 140
89971: PUSH
89972: LD_INT 1
89974: ST_TO_ADDR
// if p3 = 31 then
89975: LD_VAR 0 3
89979: PUSH
89980: LD_INT 31
89982: EQUAL
89983: IFFALSE 89993
// sFac := true ;
89985: LD_ADDR_EXP 141
89989: PUSH
89990: LD_INT 1
89992: ST_TO_ADDR
// if p3 = 32 then
89993: LD_VAR 0 3
89997: PUSH
89998: LD_INT 32
90000: EQUAL
90001: IFFALSE 90011
// sPower := true ;
90003: LD_ADDR_EXP 142
90007: PUSH
90008: LD_INT 1
90010: ST_TO_ADDR
// if p3 = 33 then
90011: LD_VAR 0 3
90015: PUSH
90016: LD_INT 33
90018: EQUAL
90019: IFFALSE 90029
// sRandom := true ;
90021: LD_ADDR_EXP 143
90025: PUSH
90026: LD_INT 1
90028: ST_TO_ADDR
// if p3 = 34 then
90029: LD_VAR 0 3
90033: PUSH
90034: LD_INT 34
90036: EQUAL
90037: IFFALSE 90047
// sShield := true ;
90039: LD_ADDR_EXP 144
90043: PUSH
90044: LD_INT 1
90046: ST_TO_ADDR
// if p3 = 35 then
90047: LD_VAR 0 3
90051: PUSH
90052: LD_INT 35
90054: EQUAL
90055: IFFALSE 90065
// sTime := true ;
90057: LD_ADDR_EXP 145
90061: PUSH
90062: LD_INT 1
90064: ST_TO_ADDR
// if p3 = 36 then
90065: LD_VAR 0 3
90069: PUSH
90070: LD_INT 36
90072: EQUAL
90073: IFFALSE 90083
// sTools := true ;
90075: LD_ADDR_EXP 146
90079: PUSH
90080: LD_INT 1
90082: ST_TO_ADDR
// if p3 = 101 then
90083: LD_VAR 0 3
90087: PUSH
90088: LD_INT 101
90090: EQUAL
90091: IFFALSE 90101
// sSold := true ;
90093: LD_ADDR_EXP 111
90097: PUSH
90098: LD_INT 1
90100: ST_TO_ADDR
// if p3 = 102 then
90101: LD_VAR 0 3
90105: PUSH
90106: LD_INT 102
90108: EQUAL
90109: IFFALSE 90119
// sDiff := true ;
90111: LD_ADDR_EXP 112
90115: PUSH
90116: LD_INT 1
90118: ST_TO_ADDR
// if p3 = 103 then
90119: LD_VAR 0 3
90123: PUSH
90124: LD_INT 103
90126: EQUAL
90127: IFFALSE 90137
// sFog := true ;
90129: LD_ADDR_EXP 115
90133: PUSH
90134: LD_INT 1
90136: ST_TO_ADDR
// if p3 = 104 then
90137: LD_VAR 0 3
90141: PUSH
90142: LD_INT 104
90144: EQUAL
90145: IFFALSE 90155
// sReset := true ;
90147: LD_ADDR_EXP 116
90151: PUSH
90152: LD_INT 1
90154: ST_TO_ADDR
// if p3 = 105 then
90155: LD_VAR 0 3
90159: PUSH
90160: LD_INT 105
90162: EQUAL
90163: IFFALSE 90173
// sSun := true ;
90165: LD_ADDR_EXP 117
90169: PUSH
90170: LD_INT 1
90172: ST_TO_ADDR
// if p3 = 106 then
90173: LD_VAR 0 3
90177: PUSH
90178: LD_INT 106
90180: EQUAL
90181: IFFALSE 90191
// sTiger := true ;
90183: LD_ADDR_EXP 113
90187: PUSH
90188: LD_INT 1
90190: ST_TO_ADDR
// if p3 = 107 then
90191: LD_VAR 0 3
90195: PUSH
90196: LD_INT 107
90198: EQUAL
90199: IFFALSE 90209
// sBomb := true ;
90201: LD_ADDR_EXP 114
90205: PUSH
90206: LD_INT 1
90208: ST_TO_ADDR
// if p3 = 108 then
90209: LD_VAR 0 3
90213: PUSH
90214: LD_INT 108
90216: EQUAL
90217: IFFALSE 90227
// sWound := true ;
90219: LD_ADDR_EXP 122
90223: PUSH
90224: LD_INT 1
90226: ST_TO_ADDR
// if p3 = 109 then
90227: LD_VAR 0 3
90231: PUSH
90232: LD_INT 109
90234: EQUAL
90235: IFFALSE 90245
// sBetray := true ;
90237: LD_ADDR_EXP 126
90241: PUSH
90242: LD_INT 1
90244: ST_TO_ADDR
// if p3 = 110 then
90245: LD_VAR 0 3
90249: PUSH
90250: LD_INT 110
90252: EQUAL
90253: IFFALSE 90263
// sContamin := true ;
90255: LD_ADDR_EXP 127
90259: PUSH
90260: LD_INT 1
90262: ST_TO_ADDR
// if p3 = 111 then
90263: LD_VAR 0 3
90267: PUSH
90268: LD_INT 111
90270: EQUAL
90271: IFFALSE 90281
// sOil := true ;
90273: LD_ADDR_EXP 129
90277: PUSH
90278: LD_INT 1
90280: ST_TO_ADDR
// if p3 = 112 then
90281: LD_VAR 0 3
90285: PUSH
90286: LD_INT 112
90288: EQUAL
90289: IFFALSE 90299
// sStu := true ;
90291: LD_ADDR_EXP 133
90295: PUSH
90296: LD_INT 1
90298: ST_TO_ADDR
// if p3 = 113 then
90299: LD_VAR 0 3
90303: PUSH
90304: LD_INT 113
90306: EQUAL
90307: IFFALSE 90317
// sBazooka := true ;
90309: LD_ADDR_EXP 136
90313: PUSH
90314: LD_INT 1
90316: ST_TO_ADDR
// if p3 = 114 then
90317: LD_VAR 0 3
90321: PUSH
90322: LD_INT 114
90324: EQUAL
90325: IFFALSE 90335
// sMortar := true ;
90327: LD_ADDR_EXP 137
90331: PUSH
90332: LD_INT 1
90334: ST_TO_ADDR
// if p3 = 115 then
90335: LD_VAR 0 3
90339: PUSH
90340: LD_INT 115
90342: EQUAL
90343: IFFALSE 90353
// sRanger := true ;
90345: LD_ADDR_EXP 147
90349: PUSH
90350: LD_INT 1
90352: ST_TO_ADDR
// end ; if p2 = 101 then
90353: LD_VAR 0 2
90357: PUSH
90358: LD_INT 101
90360: EQUAL
90361: IFFALSE 90489
// begin case p3 of 1 :
90363: LD_VAR 0 3
90367: PUSH
90368: LD_INT 1
90370: DOUBLE
90371: EQUAL
90372: IFTRUE 90376
90374: GO 90383
90376: POP
// hHackUnlimitedResources ; 2 :
90377: CALL 101526 0 0
90381: GO 90489
90383: LD_INT 2
90385: DOUBLE
90386: EQUAL
90387: IFTRUE 90391
90389: GO 90398
90391: POP
// hHackSetLevel10 ; 3 :
90392: CALL 101659 0 0
90396: GO 90489
90398: LD_INT 3
90400: DOUBLE
90401: EQUAL
90402: IFTRUE 90406
90404: GO 90413
90406: POP
// hHackSetLevel10YourUnits ; 4 :
90407: CALL 101744 0 0
90411: GO 90489
90413: LD_INT 4
90415: DOUBLE
90416: EQUAL
90417: IFTRUE 90421
90419: GO 90428
90421: POP
// hHackInvincible ; 5 :
90422: CALL 102192 0 0
90426: GO 90489
90428: LD_INT 5
90430: DOUBLE
90431: EQUAL
90432: IFTRUE 90436
90434: GO 90443
90436: POP
// hHackInvisible ; 6 :
90437: CALL 102303 0 0
90441: GO 90489
90443: LD_INT 6
90445: DOUBLE
90446: EQUAL
90447: IFTRUE 90451
90449: GO 90458
90451: POP
// hHackChangeYourSide ; 7 :
90452: CALL 102360 0 0
90456: GO 90489
90458: LD_INT 7
90460: DOUBLE
90461: EQUAL
90462: IFTRUE 90466
90464: GO 90473
90466: POP
// hHackChangeUnitSide ; 8 :
90467: CALL 102402 0 0
90471: GO 90489
90473: LD_INT 8
90475: DOUBLE
90476: EQUAL
90477: IFTRUE 90481
90479: GO 90488
90481: POP
// hHackFog ; end ;
90482: CALL 102503 0 0
90486: GO 90489
90488: POP
// end ; end ;
90489: LD_VAR 0 7
90493: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
90494: GO 90496
90496: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
90497: LD_STRING initStreamRollete();
90499: PPUSH
90500: CALL_OW 559
// InitStreamMode ;
90504: CALL 90513 0 0
// DefineStreamItems ( ) ;
90508: CALL 90953 0 0
// end ;
90512: END
// function InitStreamMode ; begin
90513: LD_INT 0
90515: PPUSH
// streamModeActive := false ;
90516: LD_ADDR_EXP 94
90520: PUSH
90521: LD_INT 0
90523: ST_TO_ADDR
// normalCounter := 36 ;
90524: LD_ADDR_EXP 95
90528: PUSH
90529: LD_INT 36
90531: ST_TO_ADDR
// hardcoreCounter := 16 ;
90532: LD_ADDR_EXP 96
90536: PUSH
90537: LD_INT 16
90539: ST_TO_ADDR
// sRocket := false ;
90540: LD_ADDR_EXP 99
90544: PUSH
90545: LD_INT 0
90547: ST_TO_ADDR
// sSpeed := false ;
90548: LD_ADDR_EXP 98
90552: PUSH
90553: LD_INT 0
90555: ST_TO_ADDR
// sEngine := false ;
90556: LD_ADDR_EXP 100
90560: PUSH
90561: LD_INT 0
90563: ST_TO_ADDR
// sSpec := false ;
90564: LD_ADDR_EXP 97
90568: PUSH
90569: LD_INT 0
90571: ST_TO_ADDR
// sLevel := false ;
90572: LD_ADDR_EXP 101
90576: PUSH
90577: LD_INT 0
90579: ST_TO_ADDR
// sArmoury := false ;
90580: LD_ADDR_EXP 102
90584: PUSH
90585: LD_INT 0
90587: ST_TO_ADDR
// sRadar := false ;
90588: LD_ADDR_EXP 103
90592: PUSH
90593: LD_INT 0
90595: ST_TO_ADDR
// sBunker := false ;
90596: LD_ADDR_EXP 104
90600: PUSH
90601: LD_INT 0
90603: ST_TO_ADDR
// sHack := false ;
90604: LD_ADDR_EXP 105
90608: PUSH
90609: LD_INT 0
90611: ST_TO_ADDR
// sFire := false ;
90612: LD_ADDR_EXP 106
90616: PUSH
90617: LD_INT 0
90619: ST_TO_ADDR
// sRefresh := false ;
90620: LD_ADDR_EXP 107
90624: PUSH
90625: LD_INT 0
90627: ST_TO_ADDR
// sExp := false ;
90628: LD_ADDR_EXP 108
90632: PUSH
90633: LD_INT 0
90635: ST_TO_ADDR
// sDepot := false ;
90636: LD_ADDR_EXP 109
90640: PUSH
90641: LD_INT 0
90643: ST_TO_ADDR
// sFlag := false ;
90644: LD_ADDR_EXP 110
90648: PUSH
90649: LD_INT 0
90651: ST_TO_ADDR
// sKamikadze := false ;
90652: LD_ADDR_EXP 118
90656: PUSH
90657: LD_INT 0
90659: ST_TO_ADDR
// sTroll := false ;
90660: LD_ADDR_EXP 119
90664: PUSH
90665: LD_INT 0
90667: ST_TO_ADDR
// sSlow := false ;
90668: LD_ADDR_EXP 120
90672: PUSH
90673: LD_INT 0
90675: ST_TO_ADDR
// sLack := false ;
90676: LD_ADDR_EXP 121
90680: PUSH
90681: LD_INT 0
90683: ST_TO_ADDR
// sTank := false ;
90684: LD_ADDR_EXP 123
90688: PUSH
90689: LD_INT 0
90691: ST_TO_ADDR
// sRemote := false ;
90692: LD_ADDR_EXP 124
90696: PUSH
90697: LD_INT 0
90699: ST_TO_ADDR
// sPowell := false ;
90700: LD_ADDR_EXP 125
90704: PUSH
90705: LD_INT 0
90707: ST_TO_ADDR
// sTeleport := false ;
90708: LD_ADDR_EXP 128
90712: PUSH
90713: LD_INT 0
90715: ST_TO_ADDR
// sOilTower := false ;
90716: LD_ADDR_EXP 130
90720: PUSH
90721: LD_INT 0
90723: ST_TO_ADDR
// sShovel := false ;
90724: LD_ADDR_EXP 131
90728: PUSH
90729: LD_INT 0
90731: ST_TO_ADDR
// sSheik := false ;
90732: LD_ADDR_EXP 132
90736: PUSH
90737: LD_INT 0
90739: ST_TO_ADDR
// sEarthquake := false ;
90740: LD_ADDR_EXP 134
90744: PUSH
90745: LD_INT 0
90747: ST_TO_ADDR
// sAI := false ;
90748: LD_ADDR_EXP 135
90752: PUSH
90753: LD_INT 0
90755: ST_TO_ADDR
// sCargo := false ;
90756: LD_ADDR_EXP 138
90760: PUSH
90761: LD_INT 0
90763: ST_TO_ADDR
// sDLaser := false ;
90764: LD_ADDR_EXP 139
90768: PUSH
90769: LD_INT 0
90771: ST_TO_ADDR
// sExchange := false ;
90772: LD_ADDR_EXP 140
90776: PUSH
90777: LD_INT 0
90779: ST_TO_ADDR
// sFac := false ;
90780: LD_ADDR_EXP 141
90784: PUSH
90785: LD_INT 0
90787: ST_TO_ADDR
// sPower := false ;
90788: LD_ADDR_EXP 142
90792: PUSH
90793: LD_INT 0
90795: ST_TO_ADDR
// sRandom := false ;
90796: LD_ADDR_EXP 143
90800: PUSH
90801: LD_INT 0
90803: ST_TO_ADDR
// sShield := false ;
90804: LD_ADDR_EXP 144
90808: PUSH
90809: LD_INT 0
90811: ST_TO_ADDR
// sTime := false ;
90812: LD_ADDR_EXP 145
90816: PUSH
90817: LD_INT 0
90819: ST_TO_ADDR
// sTools := false ;
90820: LD_ADDR_EXP 146
90824: PUSH
90825: LD_INT 0
90827: ST_TO_ADDR
// sSold := false ;
90828: LD_ADDR_EXP 111
90832: PUSH
90833: LD_INT 0
90835: ST_TO_ADDR
// sDiff := false ;
90836: LD_ADDR_EXP 112
90840: PUSH
90841: LD_INT 0
90843: ST_TO_ADDR
// sFog := false ;
90844: LD_ADDR_EXP 115
90848: PUSH
90849: LD_INT 0
90851: ST_TO_ADDR
// sReset := false ;
90852: LD_ADDR_EXP 116
90856: PUSH
90857: LD_INT 0
90859: ST_TO_ADDR
// sSun := false ;
90860: LD_ADDR_EXP 117
90864: PUSH
90865: LD_INT 0
90867: ST_TO_ADDR
// sTiger := false ;
90868: LD_ADDR_EXP 113
90872: PUSH
90873: LD_INT 0
90875: ST_TO_ADDR
// sBomb := false ;
90876: LD_ADDR_EXP 114
90880: PUSH
90881: LD_INT 0
90883: ST_TO_ADDR
// sWound := false ;
90884: LD_ADDR_EXP 122
90888: PUSH
90889: LD_INT 0
90891: ST_TO_ADDR
// sBetray := false ;
90892: LD_ADDR_EXP 126
90896: PUSH
90897: LD_INT 0
90899: ST_TO_ADDR
// sContamin := false ;
90900: LD_ADDR_EXP 127
90904: PUSH
90905: LD_INT 0
90907: ST_TO_ADDR
// sOil := false ;
90908: LD_ADDR_EXP 129
90912: PUSH
90913: LD_INT 0
90915: ST_TO_ADDR
// sStu := false ;
90916: LD_ADDR_EXP 133
90920: PUSH
90921: LD_INT 0
90923: ST_TO_ADDR
// sBazooka := false ;
90924: LD_ADDR_EXP 136
90928: PUSH
90929: LD_INT 0
90931: ST_TO_ADDR
// sMortar := false ;
90932: LD_ADDR_EXP 137
90936: PUSH
90937: LD_INT 0
90939: ST_TO_ADDR
// sRanger := false ;
90940: LD_ADDR_EXP 147
90944: PUSH
90945: LD_INT 0
90947: ST_TO_ADDR
// end ;
90948: LD_VAR 0 1
90952: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
90953: LD_INT 0
90955: PPUSH
90956: PPUSH
90957: PPUSH
90958: PPUSH
90959: PPUSH
// result := [ ] ;
90960: LD_ADDR_VAR 0 1
90964: PUSH
90965: EMPTY
90966: ST_TO_ADDR
// if campaign_id = 1 then
90967: LD_OWVAR 69
90971: PUSH
90972: LD_INT 1
90974: EQUAL
90975: IFFALSE 93913
// begin case mission_number of 1 :
90977: LD_OWVAR 70
90981: PUSH
90982: LD_INT 1
90984: DOUBLE
90985: EQUAL
90986: IFTRUE 90990
90988: GO 91054
90990: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
90991: LD_ADDR_VAR 0 1
90995: PUSH
90996: LD_INT 2
90998: PUSH
90999: LD_INT 4
91001: PUSH
91002: LD_INT 11
91004: PUSH
91005: LD_INT 12
91007: PUSH
91008: LD_INT 15
91010: PUSH
91011: LD_INT 16
91013: PUSH
91014: LD_INT 22
91016: PUSH
91017: LD_INT 23
91019: PUSH
91020: LD_INT 26
91022: PUSH
91023: EMPTY
91024: LIST
91025: LIST
91026: LIST
91027: LIST
91028: LIST
91029: LIST
91030: LIST
91031: LIST
91032: LIST
91033: PUSH
91034: LD_INT 101
91036: PUSH
91037: LD_INT 102
91039: PUSH
91040: LD_INT 106
91042: PUSH
91043: EMPTY
91044: LIST
91045: LIST
91046: LIST
91047: PUSH
91048: EMPTY
91049: LIST
91050: LIST
91051: ST_TO_ADDR
91052: GO 93911
91054: LD_INT 2
91056: DOUBLE
91057: EQUAL
91058: IFTRUE 91062
91060: GO 91134
91062: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
91063: LD_ADDR_VAR 0 1
91067: PUSH
91068: LD_INT 2
91070: PUSH
91071: LD_INT 4
91073: PUSH
91074: LD_INT 11
91076: PUSH
91077: LD_INT 12
91079: PUSH
91080: LD_INT 15
91082: PUSH
91083: LD_INT 16
91085: PUSH
91086: LD_INT 22
91088: PUSH
91089: LD_INT 23
91091: PUSH
91092: LD_INT 26
91094: PUSH
91095: EMPTY
91096: LIST
91097: LIST
91098: LIST
91099: LIST
91100: LIST
91101: LIST
91102: LIST
91103: LIST
91104: LIST
91105: PUSH
91106: LD_INT 101
91108: PUSH
91109: LD_INT 102
91111: PUSH
91112: LD_INT 105
91114: PUSH
91115: LD_INT 106
91117: PUSH
91118: LD_INT 108
91120: PUSH
91121: EMPTY
91122: LIST
91123: LIST
91124: LIST
91125: LIST
91126: LIST
91127: PUSH
91128: EMPTY
91129: LIST
91130: LIST
91131: ST_TO_ADDR
91132: GO 93911
91134: LD_INT 3
91136: DOUBLE
91137: EQUAL
91138: IFTRUE 91142
91140: GO 91218
91142: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
91143: LD_ADDR_VAR 0 1
91147: PUSH
91148: LD_INT 2
91150: PUSH
91151: LD_INT 4
91153: PUSH
91154: LD_INT 5
91156: PUSH
91157: LD_INT 11
91159: PUSH
91160: LD_INT 12
91162: PUSH
91163: LD_INT 15
91165: PUSH
91166: LD_INT 16
91168: PUSH
91169: LD_INT 22
91171: PUSH
91172: LD_INT 26
91174: PUSH
91175: LD_INT 36
91177: PUSH
91178: EMPTY
91179: LIST
91180: LIST
91181: LIST
91182: LIST
91183: LIST
91184: LIST
91185: LIST
91186: LIST
91187: LIST
91188: LIST
91189: PUSH
91190: LD_INT 101
91192: PUSH
91193: LD_INT 102
91195: PUSH
91196: LD_INT 105
91198: PUSH
91199: LD_INT 106
91201: PUSH
91202: LD_INT 108
91204: PUSH
91205: EMPTY
91206: LIST
91207: LIST
91208: LIST
91209: LIST
91210: LIST
91211: PUSH
91212: EMPTY
91213: LIST
91214: LIST
91215: ST_TO_ADDR
91216: GO 93911
91218: LD_INT 4
91220: DOUBLE
91221: EQUAL
91222: IFTRUE 91226
91224: GO 91310
91226: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
91227: LD_ADDR_VAR 0 1
91231: PUSH
91232: LD_INT 2
91234: PUSH
91235: LD_INT 4
91237: PUSH
91238: LD_INT 5
91240: PUSH
91241: LD_INT 8
91243: PUSH
91244: LD_INT 11
91246: PUSH
91247: LD_INT 12
91249: PUSH
91250: LD_INT 15
91252: PUSH
91253: LD_INT 16
91255: PUSH
91256: LD_INT 22
91258: PUSH
91259: LD_INT 23
91261: PUSH
91262: LD_INT 26
91264: PUSH
91265: LD_INT 36
91267: PUSH
91268: EMPTY
91269: LIST
91270: LIST
91271: LIST
91272: LIST
91273: LIST
91274: LIST
91275: LIST
91276: LIST
91277: LIST
91278: LIST
91279: LIST
91280: LIST
91281: PUSH
91282: LD_INT 101
91284: PUSH
91285: LD_INT 102
91287: PUSH
91288: LD_INT 105
91290: PUSH
91291: LD_INT 106
91293: PUSH
91294: LD_INT 108
91296: PUSH
91297: EMPTY
91298: LIST
91299: LIST
91300: LIST
91301: LIST
91302: LIST
91303: PUSH
91304: EMPTY
91305: LIST
91306: LIST
91307: ST_TO_ADDR
91308: GO 93911
91310: LD_INT 5
91312: DOUBLE
91313: EQUAL
91314: IFTRUE 91318
91316: GO 91418
91318: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
91319: LD_ADDR_VAR 0 1
91323: PUSH
91324: LD_INT 2
91326: PUSH
91327: LD_INT 4
91329: PUSH
91330: LD_INT 5
91332: PUSH
91333: LD_INT 6
91335: PUSH
91336: LD_INT 8
91338: PUSH
91339: LD_INT 11
91341: PUSH
91342: LD_INT 12
91344: PUSH
91345: LD_INT 15
91347: PUSH
91348: LD_INT 16
91350: PUSH
91351: LD_INT 22
91353: PUSH
91354: LD_INT 23
91356: PUSH
91357: LD_INT 25
91359: PUSH
91360: LD_INT 26
91362: PUSH
91363: LD_INT 36
91365: PUSH
91366: EMPTY
91367: LIST
91368: LIST
91369: LIST
91370: LIST
91371: LIST
91372: LIST
91373: LIST
91374: LIST
91375: LIST
91376: LIST
91377: LIST
91378: LIST
91379: LIST
91380: LIST
91381: PUSH
91382: LD_INT 101
91384: PUSH
91385: LD_INT 102
91387: PUSH
91388: LD_INT 105
91390: PUSH
91391: LD_INT 106
91393: PUSH
91394: LD_INT 108
91396: PUSH
91397: LD_INT 109
91399: PUSH
91400: LD_INT 112
91402: PUSH
91403: EMPTY
91404: LIST
91405: LIST
91406: LIST
91407: LIST
91408: LIST
91409: LIST
91410: LIST
91411: PUSH
91412: EMPTY
91413: LIST
91414: LIST
91415: ST_TO_ADDR
91416: GO 93911
91418: LD_INT 6
91420: DOUBLE
91421: EQUAL
91422: IFTRUE 91426
91424: GO 91546
91426: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
91427: LD_ADDR_VAR 0 1
91431: PUSH
91432: LD_INT 2
91434: PUSH
91435: LD_INT 4
91437: PUSH
91438: LD_INT 5
91440: PUSH
91441: LD_INT 6
91443: PUSH
91444: LD_INT 8
91446: PUSH
91447: LD_INT 11
91449: PUSH
91450: LD_INT 12
91452: PUSH
91453: LD_INT 15
91455: PUSH
91456: LD_INT 16
91458: PUSH
91459: LD_INT 20
91461: PUSH
91462: LD_INT 21
91464: PUSH
91465: LD_INT 22
91467: PUSH
91468: LD_INT 23
91470: PUSH
91471: LD_INT 25
91473: PUSH
91474: LD_INT 26
91476: PUSH
91477: LD_INT 30
91479: PUSH
91480: LD_INT 31
91482: PUSH
91483: LD_INT 32
91485: PUSH
91486: LD_INT 36
91488: PUSH
91489: EMPTY
91490: LIST
91491: LIST
91492: LIST
91493: LIST
91494: LIST
91495: LIST
91496: LIST
91497: LIST
91498: LIST
91499: LIST
91500: LIST
91501: LIST
91502: LIST
91503: LIST
91504: LIST
91505: LIST
91506: LIST
91507: LIST
91508: LIST
91509: PUSH
91510: LD_INT 101
91512: PUSH
91513: LD_INT 102
91515: PUSH
91516: LD_INT 105
91518: PUSH
91519: LD_INT 106
91521: PUSH
91522: LD_INT 108
91524: PUSH
91525: LD_INT 109
91527: PUSH
91528: LD_INT 112
91530: PUSH
91531: EMPTY
91532: LIST
91533: LIST
91534: LIST
91535: LIST
91536: LIST
91537: LIST
91538: LIST
91539: PUSH
91540: EMPTY
91541: LIST
91542: LIST
91543: ST_TO_ADDR
91544: GO 93911
91546: LD_INT 7
91548: DOUBLE
91549: EQUAL
91550: IFTRUE 91554
91552: GO 91654
91554: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
91555: LD_ADDR_VAR 0 1
91559: PUSH
91560: LD_INT 2
91562: PUSH
91563: LD_INT 4
91565: PUSH
91566: LD_INT 5
91568: PUSH
91569: LD_INT 7
91571: PUSH
91572: LD_INT 11
91574: PUSH
91575: LD_INT 12
91577: PUSH
91578: LD_INT 15
91580: PUSH
91581: LD_INT 16
91583: PUSH
91584: LD_INT 20
91586: PUSH
91587: LD_INT 21
91589: PUSH
91590: LD_INT 22
91592: PUSH
91593: LD_INT 23
91595: PUSH
91596: LD_INT 25
91598: PUSH
91599: LD_INT 26
91601: PUSH
91602: EMPTY
91603: LIST
91604: LIST
91605: LIST
91606: LIST
91607: LIST
91608: LIST
91609: LIST
91610: LIST
91611: LIST
91612: LIST
91613: LIST
91614: LIST
91615: LIST
91616: LIST
91617: PUSH
91618: LD_INT 101
91620: PUSH
91621: LD_INT 102
91623: PUSH
91624: LD_INT 103
91626: PUSH
91627: LD_INT 105
91629: PUSH
91630: LD_INT 106
91632: PUSH
91633: LD_INT 108
91635: PUSH
91636: LD_INT 112
91638: PUSH
91639: EMPTY
91640: LIST
91641: LIST
91642: LIST
91643: LIST
91644: LIST
91645: LIST
91646: LIST
91647: PUSH
91648: EMPTY
91649: LIST
91650: LIST
91651: ST_TO_ADDR
91652: GO 93911
91654: LD_INT 8
91656: DOUBLE
91657: EQUAL
91658: IFTRUE 91662
91660: GO 91790
91662: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
91663: LD_ADDR_VAR 0 1
91667: PUSH
91668: LD_INT 2
91670: PUSH
91671: LD_INT 4
91673: PUSH
91674: LD_INT 5
91676: PUSH
91677: LD_INT 6
91679: PUSH
91680: LD_INT 7
91682: PUSH
91683: LD_INT 8
91685: PUSH
91686: LD_INT 11
91688: PUSH
91689: LD_INT 12
91691: PUSH
91692: LD_INT 15
91694: PUSH
91695: LD_INT 16
91697: PUSH
91698: LD_INT 20
91700: PUSH
91701: LD_INT 21
91703: PUSH
91704: LD_INT 22
91706: PUSH
91707: LD_INT 23
91709: PUSH
91710: LD_INT 25
91712: PUSH
91713: LD_INT 26
91715: PUSH
91716: LD_INT 30
91718: PUSH
91719: LD_INT 31
91721: PUSH
91722: LD_INT 32
91724: PUSH
91725: LD_INT 36
91727: PUSH
91728: EMPTY
91729: LIST
91730: LIST
91731: LIST
91732: LIST
91733: LIST
91734: LIST
91735: LIST
91736: LIST
91737: LIST
91738: LIST
91739: LIST
91740: LIST
91741: LIST
91742: LIST
91743: LIST
91744: LIST
91745: LIST
91746: LIST
91747: LIST
91748: LIST
91749: PUSH
91750: LD_INT 101
91752: PUSH
91753: LD_INT 102
91755: PUSH
91756: LD_INT 103
91758: PUSH
91759: LD_INT 105
91761: PUSH
91762: LD_INT 106
91764: PUSH
91765: LD_INT 108
91767: PUSH
91768: LD_INT 109
91770: PUSH
91771: LD_INT 112
91773: PUSH
91774: EMPTY
91775: LIST
91776: LIST
91777: LIST
91778: LIST
91779: LIST
91780: LIST
91781: LIST
91782: LIST
91783: PUSH
91784: EMPTY
91785: LIST
91786: LIST
91787: ST_TO_ADDR
91788: GO 93911
91790: LD_INT 9
91792: DOUBLE
91793: EQUAL
91794: IFTRUE 91798
91796: GO 91934
91798: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
91799: LD_ADDR_VAR 0 1
91803: PUSH
91804: LD_INT 2
91806: PUSH
91807: LD_INT 4
91809: PUSH
91810: LD_INT 5
91812: PUSH
91813: LD_INT 6
91815: PUSH
91816: LD_INT 7
91818: PUSH
91819: LD_INT 8
91821: PUSH
91822: LD_INT 11
91824: PUSH
91825: LD_INT 12
91827: PUSH
91828: LD_INT 15
91830: PUSH
91831: LD_INT 16
91833: PUSH
91834: LD_INT 20
91836: PUSH
91837: LD_INT 21
91839: PUSH
91840: LD_INT 22
91842: PUSH
91843: LD_INT 23
91845: PUSH
91846: LD_INT 25
91848: PUSH
91849: LD_INT 26
91851: PUSH
91852: LD_INT 28
91854: PUSH
91855: LD_INT 30
91857: PUSH
91858: LD_INT 31
91860: PUSH
91861: LD_INT 32
91863: PUSH
91864: LD_INT 36
91866: PUSH
91867: EMPTY
91868: LIST
91869: LIST
91870: LIST
91871: LIST
91872: LIST
91873: LIST
91874: LIST
91875: LIST
91876: LIST
91877: LIST
91878: LIST
91879: LIST
91880: LIST
91881: LIST
91882: LIST
91883: LIST
91884: LIST
91885: LIST
91886: LIST
91887: LIST
91888: LIST
91889: PUSH
91890: LD_INT 101
91892: PUSH
91893: LD_INT 102
91895: PUSH
91896: LD_INT 103
91898: PUSH
91899: LD_INT 105
91901: PUSH
91902: LD_INT 106
91904: PUSH
91905: LD_INT 108
91907: PUSH
91908: LD_INT 109
91910: PUSH
91911: LD_INT 112
91913: PUSH
91914: LD_INT 114
91916: PUSH
91917: EMPTY
91918: LIST
91919: LIST
91920: LIST
91921: LIST
91922: LIST
91923: LIST
91924: LIST
91925: LIST
91926: LIST
91927: PUSH
91928: EMPTY
91929: LIST
91930: LIST
91931: ST_TO_ADDR
91932: GO 93911
91934: LD_INT 10
91936: DOUBLE
91937: EQUAL
91938: IFTRUE 91942
91940: GO 92126
91942: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
91943: LD_ADDR_VAR 0 1
91947: PUSH
91948: LD_INT 2
91950: PUSH
91951: LD_INT 4
91953: PUSH
91954: LD_INT 5
91956: PUSH
91957: LD_INT 6
91959: PUSH
91960: LD_INT 7
91962: PUSH
91963: LD_INT 8
91965: PUSH
91966: LD_INT 9
91968: PUSH
91969: LD_INT 10
91971: PUSH
91972: LD_INT 11
91974: PUSH
91975: LD_INT 12
91977: PUSH
91978: LD_INT 13
91980: PUSH
91981: LD_INT 14
91983: PUSH
91984: LD_INT 15
91986: PUSH
91987: LD_INT 16
91989: PUSH
91990: LD_INT 17
91992: PUSH
91993: LD_INT 18
91995: PUSH
91996: LD_INT 19
91998: PUSH
91999: LD_INT 20
92001: PUSH
92002: LD_INT 21
92004: PUSH
92005: LD_INT 22
92007: PUSH
92008: LD_INT 23
92010: PUSH
92011: LD_INT 24
92013: PUSH
92014: LD_INT 25
92016: PUSH
92017: LD_INT 26
92019: PUSH
92020: LD_INT 28
92022: PUSH
92023: LD_INT 30
92025: PUSH
92026: LD_INT 31
92028: PUSH
92029: LD_INT 32
92031: PUSH
92032: LD_INT 36
92034: PUSH
92035: EMPTY
92036: LIST
92037: LIST
92038: LIST
92039: LIST
92040: LIST
92041: LIST
92042: LIST
92043: LIST
92044: LIST
92045: LIST
92046: LIST
92047: LIST
92048: LIST
92049: LIST
92050: LIST
92051: LIST
92052: LIST
92053: LIST
92054: LIST
92055: LIST
92056: LIST
92057: LIST
92058: LIST
92059: LIST
92060: LIST
92061: LIST
92062: LIST
92063: LIST
92064: LIST
92065: PUSH
92066: LD_INT 101
92068: PUSH
92069: LD_INT 102
92071: PUSH
92072: LD_INT 103
92074: PUSH
92075: LD_INT 104
92077: PUSH
92078: LD_INT 105
92080: PUSH
92081: LD_INT 106
92083: PUSH
92084: LD_INT 107
92086: PUSH
92087: LD_INT 108
92089: PUSH
92090: LD_INT 109
92092: PUSH
92093: LD_INT 110
92095: PUSH
92096: LD_INT 111
92098: PUSH
92099: LD_INT 112
92101: PUSH
92102: LD_INT 114
92104: PUSH
92105: EMPTY
92106: LIST
92107: LIST
92108: LIST
92109: LIST
92110: LIST
92111: LIST
92112: LIST
92113: LIST
92114: LIST
92115: LIST
92116: LIST
92117: LIST
92118: LIST
92119: PUSH
92120: EMPTY
92121: LIST
92122: LIST
92123: ST_TO_ADDR
92124: GO 93911
92126: LD_INT 11
92128: DOUBLE
92129: EQUAL
92130: IFTRUE 92134
92132: GO 92326
92134: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
92135: LD_ADDR_VAR 0 1
92139: PUSH
92140: LD_INT 2
92142: PUSH
92143: LD_INT 3
92145: PUSH
92146: LD_INT 4
92148: PUSH
92149: LD_INT 5
92151: PUSH
92152: LD_INT 6
92154: PUSH
92155: LD_INT 7
92157: PUSH
92158: LD_INT 8
92160: PUSH
92161: LD_INT 9
92163: PUSH
92164: LD_INT 10
92166: PUSH
92167: LD_INT 11
92169: PUSH
92170: LD_INT 12
92172: PUSH
92173: LD_INT 13
92175: PUSH
92176: LD_INT 14
92178: PUSH
92179: LD_INT 15
92181: PUSH
92182: LD_INT 16
92184: PUSH
92185: LD_INT 17
92187: PUSH
92188: LD_INT 18
92190: PUSH
92191: LD_INT 19
92193: PUSH
92194: LD_INT 20
92196: PUSH
92197: LD_INT 21
92199: PUSH
92200: LD_INT 22
92202: PUSH
92203: LD_INT 23
92205: PUSH
92206: LD_INT 24
92208: PUSH
92209: LD_INT 25
92211: PUSH
92212: LD_INT 26
92214: PUSH
92215: LD_INT 28
92217: PUSH
92218: LD_INT 30
92220: PUSH
92221: LD_INT 31
92223: PUSH
92224: LD_INT 32
92226: PUSH
92227: LD_INT 34
92229: PUSH
92230: LD_INT 36
92232: PUSH
92233: EMPTY
92234: LIST
92235: LIST
92236: LIST
92237: LIST
92238: LIST
92239: LIST
92240: LIST
92241: LIST
92242: LIST
92243: LIST
92244: LIST
92245: LIST
92246: LIST
92247: LIST
92248: LIST
92249: LIST
92250: LIST
92251: LIST
92252: LIST
92253: LIST
92254: LIST
92255: LIST
92256: LIST
92257: LIST
92258: LIST
92259: LIST
92260: LIST
92261: LIST
92262: LIST
92263: LIST
92264: LIST
92265: PUSH
92266: LD_INT 101
92268: PUSH
92269: LD_INT 102
92271: PUSH
92272: LD_INT 103
92274: PUSH
92275: LD_INT 104
92277: PUSH
92278: LD_INT 105
92280: PUSH
92281: LD_INT 106
92283: PUSH
92284: LD_INT 107
92286: PUSH
92287: LD_INT 108
92289: PUSH
92290: LD_INT 109
92292: PUSH
92293: LD_INT 110
92295: PUSH
92296: LD_INT 111
92298: PUSH
92299: LD_INT 112
92301: PUSH
92302: LD_INT 114
92304: PUSH
92305: EMPTY
92306: LIST
92307: LIST
92308: LIST
92309: LIST
92310: LIST
92311: LIST
92312: LIST
92313: LIST
92314: LIST
92315: LIST
92316: LIST
92317: LIST
92318: LIST
92319: PUSH
92320: EMPTY
92321: LIST
92322: LIST
92323: ST_TO_ADDR
92324: GO 93911
92326: LD_INT 12
92328: DOUBLE
92329: EQUAL
92330: IFTRUE 92334
92332: GO 92542
92334: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
92335: LD_ADDR_VAR 0 1
92339: PUSH
92340: LD_INT 1
92342: PUSH
92343: LD_INT 2
92345: PUSH
92346: LD_INT 3
92348: PUSH
92349: LD_INT 4
92351: PUSH
92352: LD_INT 5
92354: PUSH
92355: LD_INT 6
92357: PUSH
92358: LD_INT 7
92360: PUSH
92361: LD_INT 8
92363: PUSH
92364: LD_INT 9
92366: PUSH
92367: LD_INT 10
92369: PUSH
92370: LD_INT 11
92372: PUSH
92373: LD_INT 12
92375: PUSH
92376: LD_INT 13
92378: PUSH
92379: LD_INT 14
92381: PUSH
92382: LD_INT 15
92384: PUSH
92385: LD_INT 16
92387: PUSH
92388: LD_INT 17
92390: PUSH
92391: LD_INT 18
92393: PUSH
92394: LD_INT 19
92396: PUSH
92397: LD_INT 20
92399: PUSH
92400: LD_INT 21
92402: PUSH
92403: LD_INT 22
92405: PUSH
92406: LD_INT 23
92408: PUSH
92409: LD_INT 24
92411: PUSH
92412: LD_INT 25
92414: PUSH
92415: LD_INT 26
92417: PUSH
92418: LD_INT 27
92420: PUSH
92421: LD_INT 28
92423: PUSH
92424: LD_INT 30
92426: PUSH
92427: LD_INT 31
92429: PUSH
92430: LD_INT 32
92432: PUSH
92433: LD_INT 33
92435: PUSH
92436: LD_INT 34
92438: PUSH
92439: LD_INT 36
92441: PUSH
92442: EMPTY
92443: LIST
92444: LIST
92445: LIST
92446: LIST
92447: LIST
92448: LIST
92449: LIST
92450: LIST
92451: LIST
92452: LIST
92453: LIST
92454: LIST
92455: LIST
92456: LIST
92457: LIST
92458: LIST
92459: LIST
92460: LIST
92461: LIST
92462: LIST
92463: LIST
92464: LIST
92465: LIST
92466: LIST
92467: LIST
92468: LIST
92469: LIST
92470: LIST
92471: LIST
92472: LIST
92473: LIST
92474: LIST
92475: LIST
92476: LIST
92477: PUSH
92478: LD_INT 101
92480: PUSH
92481: LD_INT 102
92483: PUSH
92484: LD_INT 103
92486: PUSH
92487: LD_INT 104
92489: PUSH
92490: LD_INT 105
92492: PUSH
92493: LD_INT 106
92495: PUSH
92496: LD_INT 107
92498: PUSH
92499: LD_INT 108
92501: PUSH
92502: LD_INT 109
92504: PUSH
92505: LD_INT 110
92507: PUSH
92508: LD_INT 111
92510: PUSH
92511: LD_INT 112
92513: PUSH
92514: LD_INT 113
92516: PUSH
92517: LD_INT 114
92519: PUSH
92520: EMPTY
92521: LIST
92522: LIST
92523: LIST
92524: LIST
92525: LIST
92526: LIST
92527: LIST
92528: LIST
92529: LIST
92530: LIST
92531: LIST
92532: LIST
92533: LIST
92534: LIST
92535: PUSH
92536: EMPTY
92537: LIST
92538: LIST
92539: ST_TO_ADDR
92540: GO 93911
92542: LD_INT 13
92544: DOUBLE
92545: EQUAL
92546: IFTRUE 92550
92548: GO 92746
92550: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
92551: LD_ADDR_VAR 0 1
92555: PUSH
92556: LD_INT 1
92558: PUSH
92559: LD_INT 2
92561: PUSH
92562: LD_INT 3
92564: PUSH
92565: LD_INT 4
92567: PUSH
92568: LD_INT 5
92570: PUSH
92571: LD_INT 8
92573: PUSH
92574: LD_INT 9
92576: PUSH
92577: LD_INT 10
92579: PUSH
92580: LD_INT 11
92582: PUSH
92583: LD_INT 12
92585: PUSH
92586: LD_INT 14
92588: PUSH
92589: LD_INT 15
92591: PUSH
92592: LD_INT 16
92594: PUSH
92595: LD_INT 17
92597: PUSH
92598: LD_INT 18
92600: PUSH
92601: LD_INT 19
92603: PUSH
92604: LD_INT 20
92606: PUSH
92607: LD_INT 21
92609: PUSH
92610: LD_INT 22
92612: PUSH
92613: LD_INT 23
92615: PUSH
92616: LD_INT 24
92618: PUSH
92619: LD_INT 25
92621: PUSH
92622: LD_INT 26
92624: PUSH
92625: LD_INT 27
92627: PUSH
92628: LD_INT 28
92630: PUSH
92631: LD_INT 30
92633: PUSH
92634: LD_INT 31
92636: PUSH
92637: LD_INT 32
92639: PUSH
92640: LD_INT 33
92642: PUSH
92643: LD_INT 34
92645: PUSH
92646: LD_INT 36
92648: PUSH
92649: EMPTY
92650: LIST
92651: LIST
92652: LIST
92653: LIST
92654: LIST
92655: LIST
92656: LIST
92657: LIST
92658: LIST
92659: LIST
92660: LIST
92661: LIST
92662: LIST
92663: LIST
92664: LIST
92665: LIST
92666: LIST
92667: LIST
92668: LIST
92669: LIST
92670: LIST
92671: LIST
92672: LIST
92673: LIST
92674: LIST
92675: LIST
92676: LIST
92677: LIST
92678: LIST
92679: LIST
92680: LIST
92681: PUSH
92682: LD_INT 101
92684: PUSH
92685: LD_INT 102
92687: PUSH
92688: LD_INT 103
92690: PUSH
92691: LD_INT 104
92693: PUSH
92694: LD_INT 105
92696: PUSH
92697: LD_INT 106
92699: PUSH
92700: LD_INT 107
92702: PUSH
92703: LD_INT 108
92705: PUSH
92706: LD_INT 109
92708: PUSH
92709: LD_INT 110
92711: PUSH
92712: LD_INT 111
92714: PUSH
92715: LD_INT 112
92717: PUSH
92718: LD_INT 113
92720: PUSH
92721: LD_INT 114
92723: PUSH
92724: EMPTY
92725: LIST
92726: LIST
92727: LIST
92728: LIST
92729: LIST
92730: LIST
92731: LIST
92732: LIST
92733: LIST
92734: LIST
92735: LIST
92736: LIST
92737: LIST
92738: LIST
92739: PUSH
92740: EMPTY
92741: LIST
92742: LIST
92743: ST_TO_ADDR
92744: GO 93911
92746: LD_INT 14
92748: DOUBLE
92749: EQUAL
92750: IFTRUE 92754
92752: GO 92966
92754: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
92755: LD_ADDR_VAR 0 1
92759: PUSH
92760: LD_INT 1
92762: PUSH
92763: LD_INT 2
92765: PUSH
92766: LD_INT 3
92768: PUSH
92769: LD_INT 4
92771: PUSH
92772: LD_INT 5
92774: PUSH
92775: LD_INT 6
92777: PUSH
92778: LD_INT 7
92780: PUSH
92781: LD_INT 8
92783: PUSH
92784: LD_INT 9
92786: PUSH
92787: LD_INT 10
92789: PUSH
92790: LD_INT 11
92792: PUSH
92793: LD_INT 12
92795: PUSH
92796: LD_INT 13
92798: PUSH
92799: LD_INT 14
92801: PUSH
92802: LD_INT 15
92804: PUSH
92805: LD_INT 16
92807: PUSH
92808: LD_INT 17
92810: PUSH
92811: LD_INT 18
92813: PUSH
92814: LD_INT 19
92816: PUSH
92817: LD_INT 20
92819: PUSH
92820: LD_INT 21
92822: PUSH
92823: LD_INT 22
92825: PUSH
92826: LD_INT 23
92828: PUSH
92829: LD_INT 24
92831: PUSH
92832: LD_INT 25
92834: PUSH
92835: LD_INT 26
92837: PUSH
92838: LD_INT 27
92840: PUSH
92841: LD_INT 28
92843: PUSH
92844: LD_INT 29
92846: PUSH
92847: LD_INT 30
92849: PUSH
92850: LD_INT 31
92852: PUSH
92853: LD_INT 32
92855: PUSH
92856: LD_INT 33
92858: PUSH
92859: LD_INT 34
92861: PUSH
92862: LD_INT 36
92864: PUSH
92865: EMPTY
92866: LIST
92867: LIST
92868: LIST
92869: LIST
92870: LIST
92871: LIST
92872: LIST
92873: LIST
92874: LIST
92875: LIST
92876: LIST
92877: LIST
92878: LIST
92879: LIST
92880: LIST
92881: LIST
92882: LIST
92883: LIST
92884: LIST
92885: LIST
92886: LIST
92887: LIST
92888: LIST
92889: LIST
92890: LIST
92891: LIST
92892: LIST
92893: LIST
92894: LIST
92895: LIST
92896: LIST
92897: LIST
92898: LIST
92899: LIST
92900: LIST
92901: PUSH
92902: LD_INT 101
92904: PUSH
92905: LD_INT 102
92907: PUSH
92908: LD_INT 103
92910: PUSH
92911: LD_INT 104
92913: PUSH
92914: LD_INT 105
92916: PUSH
92917: LD_INT 106
92919: PUSH
92920: LD_INT 107
92922: PUSH
92923: LD_INT 108
92925: PUSH
92926: LD_INT 109
92928: PUSH
92929: LD_INT 110
92931: PUSH
92932: LD_INT 111
92934: PUSH
92935: LD_INT 112
92937: PUSH
92938: LD_INT 113
92940: PUSH
92941: LD_INT 114
92943: PUSH
92944: EMPTY
92945: LIST
92946: LIST
92947: LIST
92948: LIST
92949: LIST
92950: LIST
92951: LIST
92952: LIST
92953: LIST
92954: LIST
92955: LIST
92956: LIST
92957: LIST
92958: LIST
92959: PUSH
92960: EMPTY
92961: LIST
92962: LIST
92963: ST_TO_ADDR
92964: GO 93911
92966: LD_INT 15
92968: DOUBLE
92969: EQUAL
92970: IFTRUE 92974
92972: GO 93186
92974: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
92975: LD_ADDR_VAR 0 1
92979: PUSH
92980: LD_INT 1
92982: PUSH
92983: LD_INT 2
92985: PUSH
92986: LD_INT 3
92988: PUSH
92989: LD_INT 4
92991: PUSH
92992: LD_INT 5
92994: PUSH
92995: LD_INT 6
92997: PUSH
92998: LD_INT 7
93000: PUSH
93001: LD_INT 8
93003: PUSH
93004: LD_INT 9
93006: PUSH
93007: LD_INT 10
93009: PUSH
93010: LD_INT 11
93012: PUSH
93013: LD_INT 12
93015: PUSH
93016: LD_INT 13
93018: PUSH
93019: LD_INT 14
93021: PUSH
93022: LD_INT 15
93024: PUSH
93025: LD_INT 16
93027: PUSH
93028: LD_INT 17
93030: PUSH
93031: LD_INT 18
93033: PUSH
93034: LD_INT 19
93036: PUSH
93037: LD_INT 20
93039: PUSH
93040: LD_INT 21
93042: PUSH
93043: LD_INT 22
93045: PUSH
93046: LD_INT 23
93048: PUSH
93049: LD_INT 24
93051: PUSH
93052: LD_INT 25
93054: PUSH
93055: LD_INT 26
93057: PUSH
93058: LD_INT 27
93060: PUSH
93061: LD_INT 28
93063: PUSH
93064: LD_INT 29
93066: PUSH
93067: LD_INT 30
93069: PUSH
93070: LD_INT 31
93072: PUSH
93073: LD_INT 32
93075: PUSH
93076: LD_INT 33
93078: PUSH
93079: LD_INT 34
93081: PUSH
93082: LD_INT 36
93084: PUSH
93085: EMPTY
93086: LIST
93087: LIST
93088: LIST
93089: LIST
93090: LIST
93091: LIST
93092: LIST
93093: LIST
93094: LIST
93095: LIST
93096: LIST
93097: LIST
93098: LIST
93099: LIST
93100: LIST
93101: LIST
93102: LIST
93103: LIST
93104: LIST
93105: LIST
93106: LIST
93107: LIST
93108: LIST
93109: LIST
93110: LIST
93111: LIST
93112: LIST
93113: LIST
93114: LIST
93115: LIST
93116: LIST
93117: LIST
93118: LIST
93119: LIST
93120: LIST
93121: PUSH
93122: LD_INT 101
93124: PUSH
93125: LD_INT 102
93127: PUSH
93128: LD_INT 103
93130: PUSH
93131: LD_INT 104
93133: PUSH
93134: LD_INT 105
93136: PUSH
93137: LD_INT 106
93139: PUSH
93140: LD_INT 107
93142: PUSH
93143: LD_INT 108
93145: PUSH
93146: LD_INT 109
93148: PUSH
93149: LD_INT 110
93151: PUSH
93152: LD_INT 111
93154: PUSH
93155: LD_INT 112
93157: PUSH
93158: LD_INT 113
93160: PUSH
93161: LD_INT 114
93163: PUSH
93164: EMPTY
93165: LIST
93166: LIST
93167: LIST
93168: LIST
93169: LIST
93170: LIST
93171: LIST
93172: LIST
93173: LIST
93174: LIST
93175: LIST
93176: LIST
93177: LIST
93178: LIST
93179: PUSH
93180: EMPTY
93181: LIST
93182: LIST
93183: ST_TO_ADDR
93184: GO 93911
93186: LD_INT 16
93188: DOUBLE
93189: EQUAL
93190: IFTRUE 93194
93192: GO 93318
93194: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
93195: LD_ADDR_VAR 0 1
93199: PUSH
93200: LD_INT 2
93202: PUSH
93203: LD_INT 4
93205: PUSH
93206: LD_INT 5
93208: PUSH
93209: LD_INT 7
93211: PUSH
93212: LD_INT 11
93214: PUSH
93215: LD_INT 12
93217: PUSH
93218: LD_INT 15
93220: PUSH
93221: LD_INT 16
93223: PUSH
93224: LD_INT 20
93226: PUSH
93227: LD_INT 21
93229: PUSH
93230: LD_INT 22
93232: PUSH
93233: LD_INT 23
93235: PUSH
93236: LD_INT 25
93238: PUSH
93239: LD_INT 26
93241: PUSH
93242: LD_INT 30
93244: PUSH
93245: LD_INT 31
93247: PUSH
93248: LD_INT 32
93250: PUSH
93251: LD_INT 33
93253: PUSH
93254: LD_INT 34
93256: PUSH
93257: EMPTY
93258: LIST
93259: LIST
93260: LIST
93261: LIST
93262: LIST
93263: LIST
93264: LIST
93265: LIST
93266: LIST
93267: LIST
93268: LIST
93269: LIST
93270: LIST
93271: LIST
93272: LIST
93273: LIST
93274: LIST
93275: LIST
93276: LIST
93277: PUSH
93278: LD_INT 101
93280: PUSH
93281: LD_INT 102
93283: PUSH
93284: LD_INT 103
93286: PUSH
93287: LD_INT 106
93289: PUSH
93290: LD_INT 108
93292: PUSH
93293: LD_INT 112
93295: PUSH
93296: LD_INT 113
93298: PUSH
93299: LD_INT 114
93301: PUSH
93302: EMPTY
93303: LIST
93304: LIST
93305: LIST
93306: LIST
93307: LIST
93308: LIST
93309: LIST
93310: LIST
93311: PUSH
93312: EMPTY
93313: LIST
93314: LIST
93315: ST_TO_ADDR
93316: GO 93911
93318: LD_INT 17
93320: DOUBLE
93321: EQUAL
93322: IFTRUE 93326
93324: GO 93538
93326: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
93327: LD_ADDR_VAR 0 1
93331: PUSH
93332: LD_INT 1
93334: PUSH
93335: LD_INT 2
93337: PUSH
93338: LD_INT 3
93340: PUSH
93341: LD_INT 4
93343: PUSH
93344: LD_INT 5
93346: PUSH
93347: LD_INT 6
93349: PUSH
93350: LD_INT 7
93352: PUSH
93353: LD_INT 8
93355: PUSH
93356: LD_INT 9
93358: PUSH
93359: LD_INT 10
93361: PUSH
93362: LD_INT 11
93364: PUSH
93365: LD_INT 12
93367: PUSH
93368: LD_INT 13
93370: PUSH
93371: LD_INT 14
93373: PUSH
93374: LD_INT 15
93376: PUSH
93377: LD_INT 16
93379: PUSH
93380: LD_INT 17
93382: PUSH
93383: LD_INT 18
93385: PUSH
93386: LD_INT 19
93388: PUSH
93389: LD_INT 20
93391: PUSH
93392: LD_INT 21
93394: PUSH
93395: LD_INT 22
93397: PUSH
93398: LD_INT 23
93400: PUSH
93401: LD_INT 24
93403: PUSH
93404: LD_INT 25
93406: PUSH
93407: LD_INT 26
93409: PUSH
93410: LD_INT 27
93412: PUSH
93413: LD_INT 28
93415: PUSH
93416: LD_INT 29
93418: PUSH
93419: LD_INT 30
93421: PUSH
93422: LD_INT 31
93424: PUSH
93425: LD_INT 32
93427: PUSH
93428: LD_INT 33
93430: PUSH
93431: LD_INT 34
93433: PUSH
93434: LD_INT 36
93436: PUSH
93437: EMPTY
93438: LIST
93439: LIST
93440: LIST
93441: LIST
93442: LIST
93443: LIST
93444: LIST
93445: LIST
93446: LIST
93447: LIST
93448: LIST
93449: LIST
93450: LIST
93451: LIST
93452: LIST
93453: LIST
93454: LIST
93455: LIST
93456: LIST
93457: LIST
93458: LIST
93459: LIST
93460: LIST
93461: LIST
93462: LIST
93463: LIST
93464: LIST
93465: LIST
93466: LIST
93467: LIST
93468: LIST
93469: LIST
93470: LIST
93471: LIST
93472: LIST
93473: PUSH
93474: LD_INT 101
93476: PUSH
93477: LD_INT 102
93479: PUSH
93480: LD_INT 103
93482: PUSH
93483: LD_INT 104
93485: PUSH
93486: LD_INT 105
93488: PUSH
93489: LD_INT 106
93491: PUSH
93492: LD_INT 107
93494: PUSH
93495: LD_INT 108
93497: PUSH
93498: LD_INT 109
93500: PUSH
93501: LD_INT 110
93503: PUSH
93504: LD_INT 111
93506: PUSH
93507: LD_INT 112
93509: PUSH
93510: LD_INT 113
93512: PUSH
93513: LD_INT 114
93515: PUSH
93516: EMPTY
93517: LIST
93518: LIST
93519: LIST
93520: LIST
93521: LIST
93522: LIST
93523: LIST
93524: LIST
93525: LIST
93526: LIST
93527: LIST
93528: LIST
93529: LIST
93530: LIST
93531: PUSH
93532: EMPTY
93533: LIST
93534: LIST
93535: ST_TO_ADDR
93536: GO 93911
93538: LD_INT 18
93540: DOUBLE
93541: EQUAL
93542: IFTRUE 93546
93544: GO 93682
93546: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
93547: LD_ADDR_VAR 0 1
93551: PUSH
93552: LD_INT 2
93554: PUSH
93555: LD_INT 4
93557: PUSH
93558: LD_INT 5
93560: PUSH
93561: LD_INT 7
93563: PUSH
93564: LD_INT 11
93566: PUSH
93567: LD_INT 12
93569: PUSH
93570: LD_INT 15
93572: PUSH
93573: LD_INT 16
93575: PUSH
93576: LD_INT 20
93578: PUSH
93579: LD_INT 21
93581: PUSH
93582: LD_INT 22
93584: PUSH
93585: LD_INT 23
93587: PUSH
93588: LD_INT 25
93590: PUSH
93591: LD_INT 26
93593: PUSH
93594: LD_INT 30
93596: PUSH
93597: LD_INT 31
93599: PUSH
93600: LD_INT 32
93602: PUSH
93603: LD_INT 33
93605: PUSH
93606: LD_INT 34
93608: PUSH
93609: LD_INT 35
93611: PUSH
93612: LD_INT 36
93614: PUSH
93615: EMPTY
93616: LIST
93617: LIST
93618: LIST
93619: LIST
93620: LIST
93621: LIST
93622: LIST
93623: LIST
93624: LIST
93625: LIST
93626: LIST
93627: LIST
93628: LIST
93629: LIST
93630: LIST
93631: LIST
93632: LIST
93633: LIST
93634: LIST
93635: LIST
93636: LIST
93637: PUSH
93638: LD_INT 101
93640: PUSH
93641: LD_INT 102
93643: PUSH
93644: LD_INT 103
93646: PUSH
93647: LD_INT 106
93649: PUSH
93650: LD_INT 108
93652: PUSH
93653: LD_INT 112
93655: PUSH
93656: LD_INT 113
93658: PUSH
93659: LD_INT 114
93661: PUSH
93662: LD_INT 115
93664: PUSH
93665: EMPTY
93666: LIST
93667: LIST
93668: LIST
93669: LIST
93670: LIST
93671: LIST
93672: LIST
93673: LIST
93674: LIST
93675: PUSH
93676: EMPTY
93677: LIST
93678: LIST
93679: ST_TO_ADDR
93680: GO 93911
93682: LD_INT 19
93684: DOUBLE
93685: EQUAL
93686: IFTRUE 93690
93688: GO 93910
93690: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
93691: LD_ADDR_VAR 0 1
93695: PUSH
93696: LD_INT 1
93698: PUSH
93699: LD_INT 2
93701: PUSH
93702: LD_INT 3
93704: PUSH
93705: LD_INT 4
93707: PUSH
93708: LD_INT 5
93710: PUSH
93711: LD_INT 6
93713: PUSH
93714: LD_INT 7
93716: PUSH
93717: LD_INT 8
93719: PUSH
93720: LD_INT 9
93722: PUSH
93723: LD_INT 10
93725: PUSH
93726: LD_INT 11
93728: PUSH
93729: LD_INT 12
93731: PUSH
93732: LD_INT 13
93734: PUSH
93735: LD_INT 14
93737: PUSH
93738: LD_INT 15
93740: PUSH
93741: LD_INT 16
93743: PUSH
93744: LD_INT 17
93746: PUSH
93747: LD_INT 18
93749: PUSH
93750: LD_INT 19
93752: PUSH
93753: LD_INT 20
93755: PUSH
93756: LD_INT 21
93758: PUSH
93759: LD_INT 22
93761: PUSH
93762: LD_INT 23
93764: PUSH
93765: LD_INT 24
93767: PUSH
93768: LD_INT 25
93770: PUSH
93771: LD_INT 26
93773: PUSH
93774: LD_INT 27
93776: PUSH
93777: LD_INT 28
93779: PUSH
93780: LD_INT 29
93782: PUSH
93783: LD_INT 30
93785: PUSH
93786: LD_INT 31
93788: PUSH
93789: LD_INT 32
93791: PUSH
93792: LD_INT 33
93794: PUSH
93795: LD_INT 34
93797: PUSH
93798: LD_INT 35
93800: PUSH
93801: LD_INT 36
93803: PUSH
93804: EMPTY
93805: LIST
93806: LIST
93807: LIST
93808: LIST
93809: LIST
93810: LIST
93811: LIST
93812: LIST
93813: LIST
93814: LIST
93815: LIST
93816: LIST
93817: LIST
93818: LIST
93819: LIST
93820: LIST
93821: LIST
93822: LIST
93823: LIST
93824: LIST
93825: LIST
93826: LIST
93827: LIST
93828: LIST
93829: LIST
93830: LIST
93831: LIST
93832: LIST
93833: LIST
93834: LIST
93835: LIST
93836: LIST
93837: LIST
93838: LIST
93839: LIST
93840: LIST
93841: PUSH
93842: LD_INT 101
93844: PUSH
93845: LD_INT 102
93847: PUSH
93848: LD_INT 103
93850: PUSH
93851: LD_INT 104
93853: PUSH
93854: LD_INT 105
93856: PUSH
93857: LD_INT 106
93859: PUSH
93860: LD_INT 107
93862: PUSH
93863: LD_INT 108
93865: PUSH
93866: LD_INT 109
93868: PUSH
93869: LD_INT 110
93871: PUSH
93872: LD_INT 111
93874: PUSH
93875: LD_INT 112
93877: PUSH
93878: LD_INT 113
93880: PUSH
93881: LD_INT 114
93883: PUSH
93884: LD_INT 115
93886: PUSH
93887: EMPTY
93888: LIST
93889: LIST
93890: LIST
93891: LIST
93892: LIST
93893: LIST
93894: LIST
93895: LIST
93896: LIST
93897: LIST
93898: LIST
93899: LIST
93900: LIST
93901: LIST
93902: LIST
93903: PUSH
93904: EMPTY
93905: LIST
93906: LIST
93907: ST_TO_ADDR
93908: GO 93911
93910: POP
// end else
93911: GO 94130
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
93913: LD_ADDR_VAR 0 1
93917: PUSH
93918: LD_INT 1
93920: PUSH
93921: LD_INT 2
93923: PUSH
93924: LD_INT 3
93926: PUSH
93927: LD_INT 4
93929: PUSH
93930: LD_INT 5
93932: PUSH
93933: LD_INT 6
93935: PUSH
93936: LD_INT 7
93938: PUSH
93939: LD_INT 8
93941: PUSH
93942: LD_INT 9
93944: PUSH
93945: LD_INT 10
93947: PUSH
93948: LD_INT 11
93950: PUSH
93951: LD_INT 12
93953: PUSH
93954: LD_INT 13
93956: PUSH
93957: LD_INT 14
93959: PUSH
93960: LD_INT 15
93962: PUSH
93963: LD_INT 16
93965: PUSH
93966: LD_INT 17
93968: PUSH
93969: LD_INT 18
93971: PUSH
93972: LD_INT 19
93974: PUSH
93975: LD_INT 20
93977: PUSH
93978: LD_INT 21
93980: PUSH
93981: LD_INT 22
93983: PUSH
93984: LD_INT 23
93986: PUSH
93987: LD_INT 24
93989: PUSH
93990: LD_INT 25
93992: PUSH
93993: LD_INT 26
93995: PUSH
93996: LD_INT 27
93998: PUSH
93999: LD_INT 28
94001: PUSH
94002: LD_INT 29
94004: PUSH
94005: LD_INT 30
94007: PUSH
94008: LD_INT 31
94010: PUSH
94011: LD_INT 32
94013: PUSH
94014: LD_INT 33
94016: PUSH
94017: LD_INT 34
94019: PUSH
94020: LD_INT 35
94022: PUSH
94023: LD_INT 36
94025: PUSH
94026: EMPTY
94027: LIST
94028: LIST
94029: LIST
94030: LIST
94031: LIST
94032: LIST
94033: LIST
94034: LIST
94035: LIST
94036: LIST
94037: LIST
94038: LIST
94039: LIST
94040: LIST
94041: LIST
94042: LIST
94043: LIST
94044: LIST
94045: LIST
94046: LIST
94047: LIST
94048: LIST
94049: LIST
94050: LIST
94051: LIST
94052: LIST
94053: LIST
94054: LIST
94055: LIST
94056: LIST
94057: LIST
94058: LIST
94059: LIST
94060: LIST
94061: LIST
94062: LIST
94063: PUSH
94064: LD_INT 101
94066: PUSH
94067: LD_INT 102
94069: PUSH
94070: LD_INT 103
94072: PUSH
94073: LD_INT 104
94075: PUSH
94076: LD_INT 105
94078: PUSH
94079: LD_INT 106
94081: PUSH
94082: LD_INT 107
94084: PUSH
94085: LD_INT 108
94087: PUSH
94088: LD_INT 109
94090: PUSH
94091: LD_INT 110
94093: PUSH
94094: LD_INT 111
94096: PUSH
94097: LD_INT 112
94099: PUSH
94100: LD_INT 113
94102: PUSH
94103: LD_INT 114
94105: PUSH
94106: LD_INT 115
94108: PUSH
94109: EMPTY
94110: LIST
94111: LIST
94112: LIST
94113: LIST
94114: LIST
94115: LIST
94116: LIST
94117: LIST
94118: LIST
94119: LIST
94120: LIST
94121: LIST
94122: LIST
94123: LIST
94124: LIST
94125: PUSH
94126: EMPTY
94127: LIST
94128: LIST
94129: ST_TO_ADDR
// if result then
94130: LD_VAR 0 1
94134: IFFALSE 94423
// begin normal :=  ;
94136: LD_ADDR_VAR 0 3
94140: PUSH
94141: LD_STRING 
94143: ST_TO_ADDR
// hardcore :=  ;
94144: LD_ADDR_VAR 0 4
94148: PUSH
94149: LD_STRING 
94151: ST_TO_ADDR
// for i = 1 to normalCounter do
94152: LD_ADDR_VAR 0 5
94156: PUSH
94157: DOUBLE
94158: LD_INT 1
94160: DEC
94161: ST_TO_ADDR
94162: LD_EXP 95
94166: PUSH
94167: FOR_TO
94168: IFFALSE 94269
// begin tmp := 0 ;
94170: LD_ADDR_VAR 0 2
94174: PUSH
94175: LD_STRING 0
94177: ST_TO_ADDR
// if result [ 1 ] then
94178: LD_VAR 0 1
94182: PUSH
94183: LD_INT 1
94185: ARRAY
94186: IFFALSE 94251
// if result [ 1 ] [ 1 ] = i then
94188: LD_VAR 0 1
94192: PUSH
94193: LD_INT 1
94195: ARRAY
94196: PUSH
94197: LD_INT 1
94199: ARRAY
94200: PUSH
94201: LD_VAR 0 5
94205: EQUAL
94206: IFFALSE 94251
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
94208: LD_ADDR_VAR 0 1
94212: PUSH
94213: LD_VAR 0 1
94217: PPUSH
94218: LD_INT 1
94220: PPUSH
94221: LD_VAR 0 1
94225: PUSH
94226: LD_INT 1
94228: ARRAY
94229: PPUSH
94230: LD_INT 1
94232: PPUSH
94233: CALL_OW 3
94237: PPUSH
94238: CALL_OW 1
94242: ST_TO_ADDR
// tmp := 1 ;
94243: LD_ADDR_VAR 0 2
94247: PUSH
94248: LD_STRING 1
94250: ST_TO_ADDR
// end ; normal := normal & tmp ;
94251: LD_ADDR_VAR 0 3
94255: PUSH
94256: LD_VAR 0 3
94260: PUSH
94261: LD_VAR 0 2
94265: STR
94266: ST_TO_ADDR
// end ;
94267: GO 94167
94269: POP
94270: POP
// for i = 1 to hardcoreCounter do
94271: LD_ADDR_VAR 0 5
94275: PUSH
94276: DOUBLE
94277: LD_INT 1
94279: DEC
94280: ST_TO_ADDR
94281: LD_EXP 96
94285: PUSH
94286: FOR_TO
94287: IFFALSE 94392
// begin tmp := 0 ;
94289: LD_ADDR_VAR 0 2
94293: PUSH
94294: LD_STRING 0
94296: ST_TO_ADDR
// if result [ 2 ] then
94297: LD_VAR 0 1
94301: PUSH
94302: LD_INT 2
94304: ARRAY
94305: IFFALSE 94374
// if result [ 2 ] [ 1 ] = 100 + i then
94307: LD_VAR 0 1
94311: PUSH
94312: LD_INT 2
94314: ARRAY
94315: PUSH
94316: LD_INT 1
94318: ARRAY
94319: PUSH
94320: LD_INT 100
94322: PUSH
94323: LD_VAR 0 5
94327: PLUS
94328: EQUAL
94329: IFFALSE 94374
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
94331: LD_ADDR_VAR 0 1
94335: PUSH
94336: LD_VAR 0 1
94340: PPUSH
94341: LD_INT 2
94343: PPUSH
94344: LD_VAR 0 1
94348: PUSH
94349: LD_INT 2
94351: ARRAY
94352: PPUSH
94353: LD_INT 1
94355: PPUSH
94356: CALL_OW 3
94360: PPUSH
94361: CALL_OW 1
94365: ST_TO_ADDR
// tmp := 1 ;
94366: LD_ADDR_VAR 0 2
94370: PUSH
94371: LD_STRING 1
94373: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
94374: LD_ADDR_VAR 0 4
94378: PUSH
94379: LD_VAR 0 4
94383: PUSH
94384: LD_VAR 0 2
94388: STR
94389: ST_TO_ADDR
// end ;
94390: GO 94286
94392: POP
94393: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
94394: LD_STRING getStreamItemsFromMission("
94396: PUSH
94397: LD_VAR 0 3
94401: STR
94402: PUSH
94403: LD_STRING ","
94405: STR
94406: PUSH
94407: LD_VAR 0 4
94411: STR
94412: PUSH
94413: LD_STRING ")
94415: STR
94416: PPUSH
94417: CALL_OW 559
// end else
94421: GO 94430
// ToLua ( getStreamItemsFromMission("","") ) ;
94423: LD_STRING getStreamItemsFromMission("","")
94425: PPUSH
94426: CALL_OW 559
// end ;
94430: LD_VAR 0 1
94434: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
94435: LD_EXP 94
94439: PUSH
94440: LD_EXP 99
94444: AND
94445: IFFALSE 94569
94447: GO 94449
94449: DISABLE
94450: LD_INT 0
94452: PPUSH
94453: PPUSH
// begin enable ;
94454: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
94455: LD_ADDR_VAR 0 2
94459: PUSH
94460: LD_INT 22
94462: PUSH
94463: LD_OWVAR 2
94467: PUSH
94468: EMPTY
94469: LIST
94470: LIST
94471: PUSH
94472: LD_INT 2
94474: PUSH
94475: LD_INT 34
94477: PUSH
94478: LD_INT 7
94480: PUSH
94481: EMPTY
94482: LIST
94483: LIST
94484: PUSH
94485: LD_INT 34
94487: PUSH
94488: LD_INT 45
94490: PUSH
94491: EMPTY
94492: LIST
94493: LIST
94494: PUSH
94495: LD_INT 34
94497: PUSH
94498: LD_INT 28
94500: PUSH
94501: EMPTY
94502: LIST
94503: LIST
94504: PUSH
94505: LD_INT 34
94507: PUSH
94508: LD_INT 47
94510: PUSH
94511: EMPTY
94512: LIST
94513: LIST
94514: PUSH
94515: EMPTY
94516: LIST
94517: LIST
94518: LIST
94519: LIST
94520: LIST
94521: PUSH
94522: EMPTY
94523: LIST
94524: LIST
94525: PPUSH
94526: CALL_OW 69
94530: ST_TO_ADDR
// if not tmp then
94531: LD_VAR 0 2
94535: NOT
94536: IFFALSE 94540
// exit ;
94538: GO 94569
// for i in tmp do
94540: LD_ADDR_VAR 0 1
94544: PUSH
94545: LD_VAR 0 2
94549: PUSH
94550: FOR_IN
94551: IFFALSE 94567
// begin SetLives ( i , 0 ) ;
94553: LD_VAR 0 1
94557: PPUSH
94558: LD_INT 0
94560: PPUSH
94561: CALL_OW 234
// end ;
94565: GO 94550
94567: POP
94568: POP
// end ;
94569: PPOPN 2
94571: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
94572: LD_EXP 94
94576: PUSH
94577: LD_EXP 100
94581: AND
94582: IFFALSE 94666
94584: GO 94586
94586: DISABLE
94587: LD_INT 0
94589: PPUSH
94590: PPUSH
// begin enable ;
94591: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
94592: LD_ADDR_VAR 0 2
94596: PUSH
94597: LD_INT 22
94599: PUSH
94600: LD_OWVAR 2
94604: PUSH
94605: EMPTY
94606: LIST
94607: LIST
94608: PUSH
94609: LD_INT 32
94611: PUSH
94612: LD_INT 3
94614: PUSH
94615: EMPTY
94616: LIST
94617: LIST
94618: PUSH
94619: EMPTY
94620: LIST
94621: LIST
94622: PPUSH
94623: CALL_OW 69
94627: ST_TO_ADDR
// if not tmp then
94628: LD_VAR 0 2
94632: NOT
94633: IFFALSE 94637
// exit ;
94635: GO 94666
// for i in tmp do
94637: LD_ADDR_VAR 0 1
94641: PUSH
94642: LD_VAR 0 2
94646: PUSH
94647: FOR_IN
94648: IFFALSE 94664
// begin SetLives ( i , 0 ) ;
94650: LD_VAR 0 1
94654: PPUSH
94655: LD_INT 0
94657: PPUSH
94658: CALL_OW 234
// end ;
94662: GO 94647
94664: POP
94665: POP
// end ;
94666: PPOPN 2
94668: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
94669: LD_EXP 94
94673: PUSH
94674: LD_EXP 97
94678: AND
94679: IFFALSE 94772
94681: GO 94683
94683: DISABLE
94684: LD_INT 0
94686: PPUSH
// begin enable ;
94687: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
94688: LD_ADDR_VAR 0 1
94692: PUSH
94693: LD_INT 22
94695: PUSH
94696: LD_OWVAR 2
94700: PUSH
94701: EMPTY
94702: LIST
94703: LIST
94704: PUSH
94705: LD_INT 2
94707: PUSH
94708: LD_INT 25
94710: PUSH
94711: LD_INT 5
94713: PUSH
94714: EMPTY
94715: LIST
94716: LIST
94717: PUSH
94718: LD_INT 25
94720: PUSH
94721: LD_INT 9
94723: PUSH
94724: EMPTY
94725: LIST
94726: LIST
94727: PUSH
94728: LD_INT 25
94730: PUSH
94731: LD_INT 8
94733: PUSH
94734: EMPTY
94735: LIST
94736: LIST
94737: PUSH
94738: EMPTY
94739: LIST
94740: LIST
94741: LIST
94742: LIST
94743: PUSH
94744: EMPTY
94745: LIST
94746: LIST
94747: PPUSH
94748: CALL_OW 69
94752: PUSH
94753: FOR_IN
94754: IFFALSE 94770
// begin SetClass ( i , 1 ) ;
94756: LD_VAR 0 1
94760: PPUSH
94761: LD_INT 1
94763: PPUSH
94764: CALL_OW 336
// end ;
94768: GO 94753
94770: POP
94771: POP
// end ;
94772: PPOPN 1
94774: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
94775: LD_EXP 94
94779: PUSH
94780: LD_EXP 98
94784: AND
94785: PUSH
94786: LD_OWVAR 65
94790: PUSH
94791: LD_INT 7
94793: LESS
94794: AND
94795: IFFALSE 94809
94797: GO 94799
94799: DISABLE
// begin enable ;
94800: ENABLE
// game_speed := 7 ;
94801: LD_ADDR_OWVAR 65
94805: PUSH
94806: LD_INT 7
94808: ST_TO_ADDR
// end ;
94809: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
94810: LD_EXP 94
94814: PUSH
94815: LD_EXP 101
94819: AND
94820: IFFALSE 95022
94822: GO 94824
94824: DISABLE
94825: LD_INT 0
94827: PPUSH
94828: PPUSH
94829: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
94830: LD_ADDR_VAR 0 3
94834: PUSH
94835: LD_INT 81
94837: PUSH
94838: LD_OWVAR 2
94842: PUSH
94843: EMPTY
94844: LIST
94845: LIST
94846: PUSH
94847: LD_INT 21
94849: PUSH
94850: LD_INT 1
94852: PUSH
94853: EMPTY
94854: LIST
94855: LIST
94856: PUSH
94857: EMPTY
94858: LIST
94859: LIST
94860: PPUSH
94861: CALL_OW 69
94865: ST_TO_ADDR
// if not tmp then
94866: LD_VAR 0 3
94870: NOT
94871: IFFALSE 94875
// exit ;
94873: GO 95022
// if tmp > 5 then
94875: LD_VAR 0 3
94879: PUSH
94880: LD_INT 5
94882: GREATER
94883: IFFALSE 94895
// k := 5 else
94885: LD_ADDR_VAR 0 2
94889: PUSH
94890: LD_INT 5
94892: ST_TO_ADDR
94893: GO 94905
// k := tmp ;
94895: LD_ADDR_VAR 0 2
94899: PUSH
94900: LD_VAR 0 3
94904: ST_TO_ADDR
// for i := 1 to k do
94905: LD_ADDR_VAR 0 1
94909: PUSH
94910: DOUBLE
94911: LD_INT 1
94913: DEC
94914: ST_TO_ADDR
94915: LD_VAR 0 2
94919: PUSH
94920: FOR_TO
94921: IFFALSE 95020
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
94923: LD_VAR 0 3
94927: PUSH
94928: LD_VAR 0 1
94932: ARRAY
94933: PPUSH
94934: LD_VAR 0 1
94938: PUSH
94939: LD_INT 4
94941: MOD
94942: PUSH
94943: LD_INT 1
94945: PLUS
94946: PPUSH
94947: CALL_OW 259
94951: PUSH
94952: LD_INT 10
94954: LESS
94955: IFFALSE 95018
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
94957: LD_VAR 0 3
94961: PUSH
94962: LD_VAR 0 1
94966: ARRAY
94967: PPUSH
94968: LD_VAR 0 1
94972: PUSH
94973: LD_INT 4
94975: MOD
94976: PUSH
94977: LD_INT 1
94979: PLUS
94980: PPUSH
94981: LD_VAR 0 3
94985: PUSH
94986: LD_VAR 0 1
94990: ARRAY
94991: PPUSH
94992: LD_VAR 0 1
94996: PUSH
94997: LD_INT 4
94999: MOD
95000: PUSH
95001: LD_INT 1
95003: PLUS
95004: PPUSH
95005: CALL_OW 259
95009: PUSH
95010: LD_INT 1
95012: PLUS
95013: PPUSH
95014: CALL_OW 237
95018: GO 94920
95020: POP
95021: POP
// end ;
95022: PPOPN 3
95024: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
95025: LD_EXP 94
95029: PUSH
95030: LD_EXP 102
95034: AND
95035: IFFALSE 95055
95037: GO 95039
95039: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
95040: LD_INT 4
95042: PPUSH
95043: LD_OWVAR 2
95047: PPUSH
95048: LD_INT 0
95050: PPUSH
95051: CALL_OW 324
95055: END
// every 0 0$1 trigger StreamModeActive and sShovel do
95056: LD_EXP 94
95060: PUSH
95061: LD_EXP 131
95065: AND
95066: IFFALSE 95086
95068: GO 95070
95070: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
95071: LD_INT 19
95073: PPUSH
95074: LD_OWVAR 2
95078: PPUSH
95079: LD_INT 0
95081: PPUSH
95082: CALL_OW 324
95086: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
95087: LD_EXP 94
95091: PUSH
95092: LD_EXP 103
95096: AND
95097: IFFALSE 95199
95099: GO 95101
95101: DISABLE
95102: LD_INT 0
95104: PPUSH
95105: PPUSH
// begin enable ;
95106: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
95107: LD_ADDR_VAR 0 2
95111: PUSH
95112: LD_INT 22
95114: PUSH
95115: LD_OWVAR 2
95119: PUSH
95120: EMPTY
95121: LIST
95122: LIST
95123: PUSH
95124: LD_INT 2
95126: PUSH
95127: LD_INT 34
95129: PUSH
95130: LD_INT 11
95132: PUSH
95133: EMPTY
95134: LIST
95135: LIST
95136: PUSH
95137: LD_INT 34
95139: PUSH
95140: LD_INT 30
95142: PUSH
95143: EMPTY
95144: LIST
95145: LIST
95146: PUSH
95147: EMPTY
95148: LIST
95149: LIST
95150: LIST
95151: PUSH
95152: EMPTY
95153: LIST
95154: LIST
95155: PPUSH
95156: CALL_OW 69
95160: ST_TO_ADDR
// if not tmp then
95161: LD_VAR 0 2
95165: NOT
95166: IFFALSE 95170
// exit ;
95168: GO 95199
// for i in tmp do
95170: LD_ADDR_VAR 0 1
95174: PUSH
95175: LD_VAR 0 2
95179: PUSH
95180: FOR_IN
95181: IFFALSE 95197
// begin SetLives ( i , 0 ) ;
95183: LD_VAR 0 1
95187: PPUSH
95188: LD_INT 0
95190: PPUSH
95191: CALL_OW 234
// end ;
95195: GO 95180
95197: POP
95198: POP
// end ;
95199: PPOPN 2
95201: END
// every 0 0$1 trigger StreamModeActive and sBunker do
95202: LD_EXP 94
95206: PUSH
95207: LD_EXP 104
95211: AND
95212: IFFALSE 95232
95214: GO 95216
95216: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
95217: LD_INT 32
95219: PPUSH
95220: LD_OWVAR 2
95224: PPUSH
95225: LD_INT 0
95227: PPUSH
95228: CALL_OW 324
95232: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
95233: LD_EXP 94
95237: PUSH
95238: LD_EXP 105
95242: AND
95243: IFFALSE 95424
95245: GO 95247
95247: DISABLE
95248: LD_INT 0
95250: PPUSH
95251: PPUSH
95252: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
95253: LD_ADDR_VAR 0 2
95257: PUSH
95258: LD_INT 22
95260: PUSH
95261: LD_OWVAR 2
95265: PUSH
95266: EMPTY
95267: LIST
95268: LIST
95269: PUSH
95270: LD_INT 33
95272: PUSH
95273: LD_INT 3
95275: PUSH
95276: EMPTY
95277: LIST
95278: LIST
95279: PUSH
95280: EMPTY
95281: LIST
95282: LIST
95283: PPUSH
95284: CALL_OW 69
95288: ST_TO_ADDR
// if not tmp then
95289: LD_VAR 0 2
95293: NOT
95294: IFFALSE 95298
// exit ;
95296: GO 95424
// side := 0 ;
95298: LD_ADDR_VAR 0 3
95302: PUSH
95303: LD_INT 0
95305: ST_TO_ADDR
// for i := 1 to 8 do
95306: LD_ADDR_VAR 0 1
95310: PUSH
95311: DOUBLE
95312: LD_INT 1
95314: DEC
95315: ST_TO_ADDR
95316: LD_INT 8
95318: PUSH
95319: FOR_TO
95320: IFFALSE 95368
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
95322: LD_OWVAR 2
95326: PUSH
95327: LD_VAR 0 1
95331: NONEQUAL
95332: PUSH
95333: LD_OWVAR 2
95337: PPUSH
95338: LD_VAR 0 1
95342: PPUSH
95343: CALL_OW 81
95347: PUSH
95348: LD_INT 2
95350: EQUAL
95351: AND
95352: IFFALSE 95366
// begin side := i ;
95354: LD_ADDR_VAR 0 3
95358: PUSH
95359: LD_VAR 0 1
95363: ST_TO_ADDR
// break ;
95364: GO 95368
// end ;
95366: GO 95319
95368: POP
95369: POP
// if not side then
95370: LD_VAR 0 3
95374: NOT
95375: IFFALSE 95379
// exit ;
95377: GO 95424
// for i := 1 to tmp do
95379: LD_ADDR_VAR 0 1
95383: PUSH
95384: DOUBLE
95385: LD_INT 1
95387: DEC
95388: ST_TO_ADDR
95389: LD_VAR 0 2
95393: PUSH
95394: FOR_TO
95395: IFFALSE 95422
// if Prob ( 60 ) then
95397: LD_INT 60
95399: PPUSH
95400: CALL_OW 13
95404: IFFALSE 95420
// SetSide ( i , side ) ;
95406: LD_VAR 0 1
95410: PPUSH
95411: LD_VAR 0 3
95415: PPUSH
95416: CALL_OW 235
95420: GO 95394
95422: POP
95423: POP
// end ;
95424: PPOPN 3
95426: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
95427: LD_EXP 94
95431: PUSH
95432: LD_EXP 107
95436: AND
95437: IFFALSE 95556
95439: GO 95441
95441: DISABLE
95442: LD_INT 0
95444: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
95445: LD_ADDR_VAR 0 1
95449: PUSH
95450: LD_INT 22
95452: PUSH
95453: LD_OWVAR 2
95457: PUSH
95458: EMPTY
95459: LIST
95460: LIST
95461: PUSH
95462: LD_INT 21
95464: PUSH
95465: LD_INT 1
95467: PUSH
95468: EMPTY
95469: LIST
95470: LIST
95471: PUSH
95472: LD_INT 3
95474: PUSH
95475: LD_INT 23
95477: PUSH
95478: LD_INT 0
95480: PUSH
95481: EMPTY
95482: LIST
95483: LIST
95484: PUSH
95485: EMPTY
95486: LIST
95487: LIST
95488: PUSH
95489: EMPTY
95490: LIST
95491: LIST
95492: LIST
95493: PPUSH
95494: CALL_OW 69
95498: PUSH
95499: FOR_IN
95500: IFFALSE 95554
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
95502: LD_VAR 0 1
95506: PPUSH
95507: CALL_OW 257
95511: PUSH
95512: LD_INT 1
95514: PUSH
95515: LD_INT 2
95517: PUSH
95518: LD_INT 3
95520: PUSH
95521: LD_INT 4
95523: PUSH
95524: EMPTY
95525: LIST
95526: LIST
95527: LIST
95528: LIST
95529: IN
95530: IFFALSE 95552
// SetClass ( un , rand ( 1 , 4 ) ) ;
95532: LD_VAR 0 1
95536: PPUSH
95537: LD_INT 1
95539: PPUSH
95540: LD_INT 4
95542: PPUSH
95543: CALL_OW 12
95547: PPUSH
95548: CALL_OW 336
95552: GO 95499
95554: POP
95555: POP
// end ;
95556: PPOPN 1
95558: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
95559: LD_EXP 94
95563: PUSH
95564: LD_EXP 106
95568: AND
95569: IFFALSE 95648
95571: GO 95573
95573: DISABLE
95574: LD_INT 0
95576: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
95577: LD_ADDR_VAR 0 1
95581: PUSH
95582: LD_INT 22
95584: PUSH
95585: LD_OWVAR 2
95589: PUSH
95590: EMPTY
95591: LIST
95592: LIST
95593: PUSH
95594: LD_INT 21
95596: PUSH
95597: LD_INT 3
95599: PUSH
95600: EMPTY
95601: LIST
95602: LIST
95603: PUSH
95604: EMPTY
95605: LIST
95606: LIST
95607: PPUSH
95608: CALL_OW 69
95612: ST_TO_ADDR
// if not tmp then
95613: LD_VAR 0 1
95617: NOT
95618: IFFALSE 95622
// exit ;
95620: GO 95648
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
95622: LD_VAR 0 1
95626: PUSH
95627: LD_INT 1
95629: PPUSH
95630: LD_VAR 0 1
95634: PPUSH
95635: CALL_OW 12
95639: ARRAY
95640: PPUSH
95641: LD_INT 100
95643: PPUSH
95644: CALL_OW 234
// end ;
95648: PPOPN 1
95650: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
95651: LD_EXP 94
95655: PUSH
95656: LD_EXP 108
95660: AND
95661: IFFALSE 95759
95663: GO 95665
95665: DISABLE
95666: LD_INT 0
95668: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
95669: LD_ADDR_VAR 0 1
95673: PUSH
95674: LD_INT 22
95676: PUSH
95677: LD_OWVAR 2
95681: PUSH
95682: EMPTY
95683: LIST
95684: LIST
95685: PUSH
95686: LD_INT 21
95688: PUSH
95689: LD_INT 1
95691: PUSH
95692: EMPTY
95693: LIST
95694: LIST
95695: PUSH
95696: EMPTY
95697: LIST
95698: LIST
95699: PPUSH
95700: CALL_OW 69
95704: ST_TO_ADDR
// if not tmp then
95705: LD_VAR 0 1
95709: NOT
95710: IFFALSE 95714
// exit ;
95712: GO 95759
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
95714: LD_VAR 0 1
95718: PUSH
95719: LD_INT 1
95721: PPUSH
95722: LD_VAR 0 1
95726: PPUSH
95727: CALL_OW 12
95731: ARRAY
95732: PPUSH
95733: LD_INT 1
95735: PPUSH
95736: LD_INT 4
95738: PPUSH
95739: CALL_OW 12
95743: PPUSH
95744: LD_INT 3000
95746: PPUSH
95747: LD_INT 9000
95749: PPUSH
95750: CALL_OW 12
95754: PPUSH
95755: CALL_OW 492
// end ;
95759: PPOPN 1
95761: END
// every 0 0$1 trigger StreamModeActive and sDepot do
95762: LD_EXP 94
95766: PUSH
95767: LD_EXP 109
95771: AND
95772: IFFALSE 95792
95774: GO 95776
95776: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
95777: LD_INT 1
95779: PPUSH
95780: LD_OWVAR 2
95784: PPUSH
95785: LD_INT 0
95787: PPUSH
95788: CALL_OW 324
95792: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
95793: LD_EXP 94
95797: PUSH
95798: LD_EXP 110
95802: AND
95803: IFFALSE 95886
95805: GO 95807
95807: DISABLE
95808: LD_INT 0
95810: PPUSH
95811: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
95812: LD_ADDR_VAR 0 2
95816: PUSH
95817: LD_INT 22
95819: PUSH
95820: LD_OWVAR 2
95824: PUSH
95825: EMPTY
95826: LIST
95827: LIST
95828: PUSH
95829: LD_INT 21
95831: PUSH
95832: LD_INT 3
95834: PUSH
95835: EMPTY
95836: LIST
95837: LIST
95838: PUSH
95839: EMPTY
95840: LIST
95841: LIST
95842: PPUSH
95843: CALL_OW 69
95847: ST_TO_ADDR
// if not tmp then
95848: LD_VAR 0 2
95852: NOT
95853: IFFALSE 95857
// exit ;
95855: GO 95886
// for i in tmp do
95857: LD_ADDR_VAR 0 1
95861: PUSH
95862: LD_VAR 0 2
95866: PUSH
95867: FOR_IN
95868: IFFALSE 95884
// SetBLevel ( i , 10 ) ;
95870: LD_VAR 0 1
95874: PPUSH
95875: LD_INT 10
95877: PPUSH
95878: CALL_OW 241
95882: GO 95867
95884: POP
95885: POP
// end ;
95886: PPOPN 2
95888: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
95889: LD_EXP 94
95893: PUSH
95894: LD_EXP 111
95898: AND
95899: IFFALSE 96010
95901: GO 95903
95903: DISABLE
95904: LD_INT 0
95906: PPUSH
95907: PPUSH
95908: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
95909: LD_ADDR_VAR 0 3
95913: PUSH
95914: LD_INT 22
95916: PUSH
95917: LD_OWVAR 2
95921: PUSH
95922: EMPTY
95923: LIST
95924: LIST
95925: PUSH
95926: LD_INT 25
95928: PUSH
95929: LD_INT 1
95931: PUSH
95932: EMPTY
95933: LIST
95934: LIST
95935: PUSH
95936: EMPTY
95937: LIST
95938: LIST
95939: PPUSH
95940: CALL_OW 69
95944: ST_TO_ADDR
// if not tmp then
95945: LD_VAR 0 3
95949: NOT
95950: IFFALSE 95954
// exit ;
95952: GO 96010
// un := tmp [ rand ( 1 , tmp ) ] ;
95954: LD_ADDR_VAR 0 2
95958: PUSH
95959: LD_VAR 0 3
95963: PUSH
95964: LD_INT 1
95966: PPUSH
95967: LD_VAR 0 3
95971: PPUSH
95972: CALL_OW 12
95976: ARRAY
95977: ST_TO_ADDR
// if Crawls ( un ) then
95978: LD_VAR 0 2
95982: PPUSH
95983: CALL_OW 318
95987: IFFALSE 95998
// ComWalk ( un ) ;
95989: LD_VAR 0 2
95993: PPUSH
95994: CALL_OW 138
// SetClass ( un , class_sniper ) ;
95998: LD_VAR 0 2
96002: PPUSH
96003: LD_INT 5
96005: PPUSH
96006: CALL_OW 336
// end ;
96010: PPOPN 3
96012: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
96013: LD_EXP 94
96017: PUSH
96018: LD_EXP 112
96022: AND
96023: PUSH
96024: LD_OWVAR 67
96028: PUSH
96029: LD_INT 3
96031: LESS
96032: AND
96033: IFFALSE 96052
96035: GO 96037
96037: DISABLE
// Difficulty := Difficulty + 1 ;
96038: LD_ADDR_OWVAR 67
96042: PUSH
96043: LD_OWVAR 67
96047: PUSH
96048: LD_INT 1
96050: PLUS
96051: ST_TO_ADDR
96052: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
96053: LD_EXP 94
96057: PUSH
96058: LD_EXP 113
96062: AND
96063: IFFALSE 96166
96065: GO 96067
96067: DISABLE
96068: LD_INT 0
96070: PPUSH
// begin for i := 1 to 5 do
96071: LD_ADDR_VAR 0 1
96075: PUSH
96076: DOUBLE
96077: LD_INT 1
96079: DEC
96080: ST_TO_ADDR
96081: LD_INT 5
96083: PUSH
96084: FOR_TO
96085: IFFALSE 96164
// begin uc_nation := nation_nature ;
96087: LD_ADDR_OWVAR 21
96091: PUSH
96092: LD_INT 0
96094: ST_TO_ADDR
// uc_side := 0 ;
96095: LD_ADDR_OWVAR 20
96099: PUSH
96100: LD_INT 0
96102: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
96103: LD_ADDR_OWVAR 29
96107: PUSH
96108: LD_INT 12
96110: PUSH
96111: LD_INT 12
96113: PUSH
96114: EMPTY
96115: LIST
96116: LIST
96117: ST_TO_ADDR
// hc_agressivity := 20 ;
96118: LD_ADDR_OWVAR 35
96122: PUSH
96123: LD_INT 20
96125: ST_TO_ADDR
// hc_class := class_tiger ;
96126: LD_ADDR_OWVAR 28
96130: PUSH
96131: LD_INT 14
96133: ST_TO_ADDR
// hc_gallery :=  ;
96134: LD_ADDR_OWVAR 33
96138: PUSH
96139: LD_STRING 
96141: ST_TO_ADDR
// hc_name :=  ;
96142: LD_ADDR_OWVAR 26
96146: PUSH
96147: LD_STRING 
96149: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
96150: CALL_OW 44
96154: PPUSH
96155: LD_INT 0
96157: PPUSH
96158: CALL_OW 51
// end ;
96162: GO 96084
96164: POP
96165: POP
// end ;
96166: PPOPN 1
96168: END
// every 0 0$1 trigger StreamModeActive and sBomb do
96169: LD_EXP 94
96173: PUSH
96174: LD_EXP 114
96178: AND
96179: IFFALSE 96188
96181: GO 96183
96183: DISABLE
// StreamSibBomb ;
96184: CALL 96189 0 0
96188: END
// export function StreamSibBomb ; var i , x , y ; begin
96189: LD_INT 0
96191: PPUSH
96192: PPUSH
96193: PPUSH
96194: PPUSH
// result := false ;
96195: LD_ADDR_VAR 0 1
96199: PUSH
96200: LD_INT 0
96202: ST_TO_ADDR
// for i := 1 to 16 do
96203: LD_ADDR_VAR 0 2
96207: PUSH
96208: DOUBLE
96209: LD_INT 1
96211: DEC
96212: ST_TO_ADDR
96213: LD_INT 16
96215: PUSH
96216: FOR_TO
96217: IFFALSE 96416
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
96219: LD_ADDR_VAR 0 3
96223: PUSH
96224: LD_INT 10
96226: PUSH
96227: LD_INT 20
96229: PUSH
96230: LD_INT 30
96232: PUSH
96233: LD_INT 40
96235: PUSH
96236: LD_INT 50
96238: PUSH
96239: LD_INT 60
96241: PUSH
96242: LD_INT 70
96244: PUSH
96245: LD_INT 80
96247: PUSH
96248: LD_INT 90
96250: PUSH
96251: LD_INT 100
96253: PUSH
96254: LD_INT 110
96256: PUSH
96257: LD_INT 120
96259: PUSH
96260: LD_INT 130
96262: PUSH
96263: LD_INT 140
96265: PUSH
96266: LD_INT 150
96268: PUSH
96269: EMPTY
96270: LIST
96271: LIST
96272: LIST
96273: LIST
96274: LIST
96275: LIST
96276: LIST
96277: LIST
96278: LIST
96279: LIST
96280: LIST
96281: LIST
96282: LIST
96283: LIST
96284: LIST
96285: PUSH
96286: LD_INT 1
96288: PPUSH
96289: LD_INT 15
96291: PPUSH
96292: CALL_OW 12
96296: ARRAY
96297: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
96298: LD_ADDR_VAR 0 4
96302: PUSH
96303: LD_INT 10
96305: PUSH
96306: LD_INT 20
96308: PUSH
96309: LD_INT 30
96311: PUSH
96312: LD_INT 40
96314: PUSH
96315: LD_INT 50
96317: PUSH
96318: LD_INT 60
96320: PUSH
96321: LD_INT 70
96323: PUSH
96324: LD_INT 80
96326: PUSH
96327: LD_INT 90
96329: PUSH
96330: LD_INT 100
96332: PUSH
96333: LD_INT 110
96335: PUSH
96336: LD_INT 120
96338: PUSH
96339: LD_INT 130
96341: PUSH
96342: LD_INT 140
96344: PUSH
96345: LD_INT 150
96347: PUSH
96348: EMPTY
96349: LIST
96350: LIST
96351: LIST
96352: LIST
96353: LIST
96354: LIST
96355: LIST
96356: LIST
96357: LIST
96358: LIST
96359: LIST
96360: LIST
96361: LIST
96362: LIST
96363: LIST
96364: PUSH
96365: LD_INT 1
96367: PPUSH
96368: LD_INT 15
96370: PPUSH
96371: CALL_OW 12
96375: ARRAY
96376: ST_TO_ADDR
// if ValidHex ( x , y ) then
96377: LD_VAR 0 3
96381: PPUSH
96382: LD_VAR 0 4
96386: PPUSH
96387: CALL_OW 488
96391: IFFALSE 96414
// begin result := [ x , y ] ;
96393: LD_ADDR_VAR 0 1
96397: PUSH
96398: LD_VAR 0 3
96402: PUSH
96403: LD_VAR 0 4
96407: PUSH
96408: EMPTY
96409: LIST
96410: LIST
96411: ST_TO_ADDR
// break ;
96412: GO 96416
// end ; end ;
96414: GO 96216
96416: POP
96417: POP
// if result then
96418: LD_VAR 0 1
96422: IFFALSE 96482
// begin ToLua ( playSibBomb() ) ;
96424: LD_STRING playSibBomb()
96426: PPUSH
96427: CALL_OW 559
// wait ( 0 0$14 ) ;
96431: LD_INT 490
96433: PPUSH
96434: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
96438: LD_VAR 0 1
96442: PUSH
96443: LD_INT 1
96445: ARRAY
96446: PPUSH
96447: LD_VAR 0 1
96451: PUSH
96452: LD_INT 2
96454: ARRAY
96455: PPUSH
96456: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
96460: LD_VAR 0 1
96464: PUSH
96465: LD_INT 1
96467: ARRAY
96468: PPUSH
96469: LD_VAR 0 1
96473: PUSH
96474: LD_INT 2
96476: ARRAY
96477: PPUSH
96478: CALL_OW 429
// end ; end ;
96482: LD_VAR 0 1
96486: RET
// every 0 0$1 trigger StreamModeActive and sReset do
96487: LD_EXP 94
96491: PUSH
96492: LD_EXP 116
96496: AND
96497: IFFALSE 96509
96499: GO 96501
96501: DISABLE
// YouLost (  ) ;
96502: LD_STRING 
96504: PPUSH
96505: CALL_OW 104
96509: END
// every 0 0$1 trigger StreamModeActive and sFog do
96510: LD_EXP 94
96514: PUSH
96515: LD_EXP 115
96519: AND
96520: IFFALSE 96534
96522: GO 96524
96524: DISABLE
// FogOff ( your_side ) ;
96525: LD_OWVAR 2
96529: PPUSH
96530: CALL_OW 344
96534: END
// every 0 0$1 trigger StreamModeActive and sSun do
96535: LD_EXP 94
96539: PUSH
96540: LD_EXP 117
96544: AND
96545: IFFALSE 96573
96547: GO 96549
96549: DISABLE
// begin solar_recharge_percent := 0 ;
96550: LD_ADDR_OWVAR 79
96554: PUSH
96555: LD_INT 0
96557: ST_TO_ADDR
// wait ( 5 5$00 ) ;
96558: LD_INT 10500
96560: PPUSH
96561: CALL_OW 67
// solar_recharge_percent := 100 ;
96565: LD_ADDR_OWVAR 79
96569: PUSH
96570: LD_INT 100
96572: ST_TO_ADDR
// end ;
96573: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
96574: LD_EXP 94
96578: PUSH
96579: LD_EXP 118
96583: AND
96584: IFFALSE 96823
96586: GO 96588
96588: DISABLE
96589: LD_INT 0
96591: PPUSH
96592: PPUSH
96593: PPUSH
// begin tmp := [ ] ;
96594: LD_ADDR_VAR 0 3
96598: PUSH
96599: EMPTY
96600: ST_TO_ADDR
// for i := 1 to 6 do
96601: LD_ADDR_VAR 0 1
96605: PUSH
96606: DOUBLE
96607: LD_INT 1
96609: DEC
96610: ST_TO_ADDR
96611: LD_INT 6
96613: PUSH
96614: FOR_TO
96615: IFFALSE 96720
// begin uc_nation := nation_nature ;
96617: LD_ADDR_OWVAR 21
96621: PUSH
96622: LD_INT 0
96624: ST_TO_ADDR
// uc_side := 0 ;
96625: LD_ADDR_OWVAR 20
96629: PUSH
96630: LD_INT 0
96632: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
96633: LD_ADDR_OWVAR 29
96637: PUSH
96638: LD_INT 12
96640: PUSH
96641: LD_INT 12
96643: PUSH
96644: EMPTY
96645: LIST
96646: LIST
96647: ST_TO_ADDR
// hc_agressivity := 20 ;
96648: LD_ADDR_OWVAR 35
96652: PUSH
96653: LD_INT 20
96655: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
96656: LD_ADDR_OWVAR 28
96660: PUSH
96661: LD_INT 17
96663: ST_TO_ADDR
// hc_gallery :=  ;
96664: LD_ADDR_OWVAR 33
96668: PUSH
96669: LD_STRING 
96671: ST_TO_ADDR
// hc_name :=  ;
96672: LD_ADDR_OWVAR 26
96676: PUSH
96677: LD_STRING 
96679: ST_TO_ADDR
// un := CreateHuman ;
96680: LD_ADDR_VAR 0 2
96684: PUSH
96685: CALL_OW 44
96689: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
96690: LD_VAR 0 2
96694: PPUSH
96695: LD_INT 1
96697: PPUSH
96698: CALL_OW 51
// tmp := tmp ^ un ;
96702: LD_ADDR_VAR 0 3
96706: PUSH
96707: LD_VAR 0 3
96711: PUSH
96712: LD_VAR 0 2
96716: ADD
96717: ST_TO_ADDR
// end ;
96718: GO 96614
96720: POP
96721: POP
// repeat wait ( 0 0$1 ) ;
96722: LD_INT 35
96724: PPUSH
96725: CALL_OW 67
// for un in tmp do
96729: LD_ADDR_VAR 0 2
96733: PUSH
96734: LD_VAR 0 3
96738: PUSH
96739: FOR_IN
96740: IFFALSE 96814
// begin if IsDead ( un ) then
96742: LD_VAR 0 2
96746: PPUSH
96747: CALL_OW 301
96751: IFFALSE 96771
// begin tmp := tmp diff un ;
96753: LD_ADDR_VAR 0 3
96757: PUSH
96758: LD_VAR 0 3
96762: PUSH
96763: LD_VAR 0 2
96767: DIFF
96768: ST_TO_ADDR
// continue ;
96769: GO 96739
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
96771: LD_VAR 0 2
96775: PPUSH
96776: LD_INT 3
96778: PUSH
96779: LD_INT 22
96781: PUSH
96782: LD_INT 0
96784: PUSH
96785: EMPTY
96786: LIST
96787: LIST
96788: PUSH
96789: EMPTY
96790: LIST
96791: LIST
96792: PPUSH
96793: CALL_OW 69
96797: PPUSH
96798: LD_VAR 0 2
96802: PPUSH
96803: CALL_OW 74
96807: PPUSH
96808: CALL_OW 115
// end ;
96812: GO 96739
96814: POP
96815: POP
// until not tmp ;
96816: LD_VAR 0 3
96820: NOT
96821: IFFALSE 96722
// end ;
96823: PPOPN 3
96825: END
// every 0 0$1 trigger StreamModeActive and sTroll do
96826: LD_EXP 94
96830: PUSH
96831: LD_EXP 119
96835: AND
96836: IFFALSE 96890
96838: GO 96840
96840: DISABLE
// begin ToLua ( displayTroll(); ) ;
96841: LD_STRING displayTroll();
96843: PPUSH
96844: CALL_OW 559
// wait ( 3 3$00 ) ;
96848: LD_INT 6300
96850: PPUSH
96851: CALL_OW 67
// ToLua ( hideTroll(); ) ;
96855: LD_STRING hideTroll();
96857: PPUSH
96858: CALL_OW 559
// wait ( 1 1$00 ) ;
96862: LD_INT 2100
96864: PPUSH
96865: CALL_OW 67
// ToLua ( displayTroll(); ) ;
96869: LD_STRING displayTroll();
96871: PPUSH
96872: CALL_OW 559
// wait ( 1 1$00 ) ;
96876: LD_INT 2100
96878: PPUSH
96879: CALL_OW 67
// ToLua ( hideTroll(); ) ;
96883: LD_STRING hideTroll();
96885: PPUSH
96886: CALL_OW 559
// end ;
96890: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
96891: LD_EXP 94
96895: PUSH
96896: LD_EXP 120
96900: AND
96901: IFFALSE 96964
96903: GO 96905
96905: DISABLE
96906: LD_INT 0
96908: PPUSH
// begin p := 0 ;
96909: LD_ADDR_VAR 0 1
96913: PUSH
96914: LD_INT 0
96916: ST_TO_ADDR
// repeat game_speed := 1 ;
96917: LD_ADDR_OWVAR 65
96921: PUSH
96922: LD_INT 1
96924: ST_TO_ADDR
// wait ( 0 0$1 ) ;
96925: LD_INT 35
96927: PPUSH
96928: CALL_OW 67
// p := p + 1 ;
96932: LD_ADDR_VAR 0 1
96936: PUSH
96937: LD_VAR 0 1
96941: PUSH
96942: LD_INT 1
96944: PLUS
96945: ST_TO_ADDR
// until p >= 60 ;
96946: LD_VAR 0 1
96950: PUSH
96951: LD_INT 60
96953: GREATEREQUAL
96954: IFFALSE 96917
// game_speed := 4 ;
96956: LD_ADDR_OWVAR 65
96960: PUSH
96961: LD_INT 4
96963: ST_TO_ADDR
// end ;
96964: PPOPN 1
96966: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
96967: LD_EXP 94
96971: PUSH
96972: LD_EXP 121
96976: AND
96977: IFFALSE 97123
96979: GO 96981
96981: DISABLE
96982: LD_INT 0
96984: PPUSH
96985: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
96986: LD_ADDR_VAR 0 1
96990: PUSH
96991: LD_INT 22
96993: PUSH
96994: LD_OWVAR 2
96998: PUSH
96999: EMPTY
97000: LIST
97001: LIST
97002: PUSH
97003: LD_INT 2
97005: PUSH
97006: LD_INT 30
97008: PUSH
97009: LD_INT 0
97011: PUSH
97012: EMPTY
97013: LIST
97014: LIST
97015: PUSH
97016: LD_INT 30
97018: PUSH
97019: LD_INT 1
97021: PUSH
97022: EMPTY
97023: LIST
97024: LIST
97025: PUSH
97026: EMPTY
97027: LIST
97028: LIST
97029: LIST
97030: PUSH
97031: EMPTY
97032: LIST
97033: LIST
97034: PPUSH
97035: CALL_OW 69
97039: ST_TO_ADDR
// if not depot then
97040: LD_VAR 0 1
97044: NOT
97045: IFFALSE 97049
// exit ;
97047: GO 97123
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
97049: LD_ADDR_VAR 0 2
97053: PUSH
97054: LD_VAR 0 1
97058: PUSH
97059: LD_INT 1
97061: PPUSH
97062: LD_VAR 0 1
97066: PPUSH
97067: CALL_OW 12
97071: ARRAY
97072: PPUSH
97073: CALL_OW 274
97077: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
97078: LD_VAR 0 2
97082: PPUSH
97083: LD_INT 1
97085: PPUSH
97086: LD_INT 0
97088: PPUSH
97089: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
97093: LD_VAR 0 2
97097: PPUSH
97098: LD_INT 2
97100: PPUSH
97101: LD_INT 0
97103: PPUSH
97104: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
97108: LD_VAR 0 2
97112: PPUSH
97113: LD_INT 3
97115: PPUSH
97116: LD_INT 0
97118: PPUSH
97119: CALL_OW 277
// end ;
97123: PPOPN 2
97125: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
97126: LD_EXP 94
97130: PUSH
97131: LD_EXP 122
97135: AND
97136: IFFALSE 97233
97138: GO 97140
97140: DISABLE
97141: LD_INT 0
97143: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
97144: LD_ADDR_VAR 0 1
97148: PUSH
97149: LD_INT 22
97151: PUSH
97152: LD_OWVAR 2
97156: PUSH
97157: EMPTY
97158: LIST
97159: LIST
97160: PUSH
97161: LD_INT 21
97163: PUSH
97164: LD_INT 1
97166: PUSH
97167: EMPTY
97168: LIST
97169: LIST
97170: PUSH
97171: LD_INT 3
97173: PUSH
97174: LD_INT 23
97176: PUSH
97177: LD_INT 0
97179: PUSH
97180: EMPTY
97181: LIST
97182: LIST
97183: PUSH
97184: EMPTY
97185: LIST
97186: LIST
97187: PUSH
97188: EMPTY
97189: LIST
97190: LIST
97191: LIST
97192: PPUSH
97193: CALL_OW 69
97197: ST_TO_ADDR
// if not tmp then
97198: LD_VAR 0 1
97202: NOT
97203: IFFALSE 97207
// exit ;
97205: GO 97233
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
97207: LD_VAR 0 1
97211: PUSH
97212: LD_INT 1
97214: PPUSH
97215: LD_VAR 0 1
97219: PPUSH
97220: CALL_OW 12
97224: ARRAY
97225: PPUSH
97226: LD_INT 200
97228: PPUSH
97229: CALL_OW 234
// end ;
97233: PPOPN 1
97235: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
97236: LD_EXP 94
97240: PUSH
97241: LD_EXP 123
97245: AND
97246: IFFALSE 97325
97248: GO 97250
97250: DISABLE
97251: LD_INT 0
97253: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
97254: LD_ADDR_VAR 0 1
97258: PUSH
97259: LD_INT 22
97261: PUSH
97262: LD_OWVAR 2
97266: PUSH
97267: EMPTY
97268: LIST
97269: LIST
97270: PUSH
97271: LD_INT 21
97273: PUSH
97274: LD_INT 2
97276: PUSH
97277: EMPTY
97278: LIST
97279: LIST
97280: PUSH
97281: EMPTY
97282: LIST
97283: LIST
97284: PPUSH
97285: CALL_OW 69
97289: ST_TO_ADDR
// if not tmp then
97290: LD_VAR 0 1
97294: NOT
97295: IFFALSE 97299
// exit ;
97297: GO 97325
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
97299: LD_VAR 0 1
97303: PUSH
97304: LD_INT 1
97306: PPUSH
97307: LD_VAR 0 1
97311: PPUSH
97312: CALL_OW 12
97316: ARRAY
97317: PPUSH
97318: LD_INT 60
97320: PPUSH
97321: CALL_OW 234
// end ;
97325: PPOPN 1
97327: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
97328: LD_EXP 94
97332: PUSH
97333: LD_EXP 124
97337: AND
97338: IFFALSE 97437
97340: GO 97342
97342: DISABLE
97343: LD_INT 0
97345: PPUSH
97346: PPUSH
// begin enable ;
97347: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
97348: LD_ADDR_VAR 0 1
97352: PUSH
97353: LD_INT 22
97355: PUSH
97356: LD_OWVAR 2
97360: PUSH
97361: EMPTY
97362: LIST
97363: LIST
97364: PUSH
97365: LD_INT 61
97367: PUSH
97368: EMPTY
97369: LIST
97370: PUSH
97371: LD_INT 33
97373: PUSH
97374: LD_INT 2
97376: PUSH
97377: EMPTY
97378: LIST
97379: LIST
97380: PUSH
97381: EMPTY
97382: LIST
97383: LIST
97384: LIST
97385: PPUSH
97386: CALL_OW 69
97390: ST_TO_ADDR
// if not tmp then
97391: LD_VAR 0 1
97395: NOT
97396: IFFALSE 97400
// exit ;
97398: GO 97437
// for i in tmp do
97400: LD_ADDR_VAR 0 2
97404: PUSH
97405: LD_VAR 0 1
97409: PUSH
97410: FOR_IN
97411: IFFALSE 97435
// if IsControledBy ( i ) then
97413: LD_VAR 0 2
97417: PPUSH
97418: CALL_OW 312
97422: IFFALSE 97433
// ComUnlink ( i ) ;
97424: LD_VAR 0 2
97428: PPUSH
97429: CALL_OW 136
97433: GO 97410
97435: POP
97436: POP
// end ;
97437: PPOPN 2
97439: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
97440: LD_EXP 94
97444: PUSH
97445: LD_EXP 125
97449: AND
97450: IFFALSE 97590
97452: GO 97454
97454: DISABLE
97455: LD_INT 0
97457: PPUSH
97458: PPUSH
// begin ToLua ( displayPowell(); ) ;
97459: LD_STRING displayPowell();
97461: PPUSH
97462: CALL_OW 559
// uc_side := 0 ;
97466: LD_ADDR_OWVAR 20
97470: PUSH
97471: LD_INT 0
97473: ST_TO_ADDR
// uc_nation := 2 ;
97474: LD_ADDR_OWVAR 21
97478: PUSH
97479: LD_INT 2
97481: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
97482: LD_ADDR_OWVAR 37
97486: PUSH
97487: LD_INT 14
97489: ST_TO_ADDR
// vc_engine := engine_siberite ;
97490: LD_ADDR_OWVAR 39
97494: PUSH
97495: LD_INT 3
97497: ST_TO_ADDR
// vc_control := control_apeman ;
97498: LD_ADDR_OWVAR 38
97502: PUSH
97503: LD_INT 5
97505: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
97506: LD_ADDR_OWVAR 40
97510: PUSH
97511: LD_INT 29
97513: ST_TO_ADDR
// un := CreateVehicle ;
97514: LD_ADDR_VAR 0 2
97518: PUSH
97519: CALL_OW 45
97523: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
97524: LD_VAR 0 2
97528: PPUSH
97529: LD_INT 1
97531: PPUSH
97532: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
97536: LD_INT 35
97538: PPUSH
97539: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
97543: LD_VAR 0 2
97547: PPUSH
97548: LD_INT 22
97550: PUSH
97551: LD_OWVAR 2
97555: PUSH
97556: EMPTY
97557: LIST
97558: LIST
97559: PPUSH
97560: CALL_OW 69
97564: PPUSH
97565: LD_VAR 0 2
97569: PPUSH
97570: CALL_OW 74
97574: PPUSH
97575: CALL_OW 115
// until IsDead ( un ) ;
97579: LD_VAR 0 2
97583: PPUSH
97584: CALL_OW 301
97588: IFFALSE 97536
// end ;
97590: PPOPN 2
97592: END
// every 0 0$1 trigger StreamModeActive and sStu do
97593: LD_EXP 94
97597: PUSH
97598: LD_EXP 133
97602: AND
97603: IFFALSE 97619
97605: GO 97607
97607: DISABLE
// begin ToLua ( displayStucuk(); ) ;
97608: LD_STRING displayStucuk();
97610: PPUSH
97611: CALL_OW 559
// ResetFog ;
97615: CALL_OW 335
// end ;
97619: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
97620: LD_EXP 94
97624: PUSH
97625: LD_EXP 126
97629: AND
97630: IFFALSE 97771
97632: GO 97634
97634: DISABLE
97635: LD_INT 0
97637: PPUSH
97638: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
97639: LD_ADDR_VAR 0 2
97643: PUSH
97644: LD_INT 22
97646: PUSH
97647: LD_OWVAR 2
97651: PUSH
97652: EMPTY
97653: LIST
97654: LIST
97655: PUSH
97656: LD_INT 21
97658: PUSH
97659: LD_INT 1
97661: PUSH
97662: EMPTY
97663: LIST
97664: LIST
97665: PUSH
97666: EMPTY
97667: LIST
97668: LIST
97669: PPUSH
97670: CALL_OW 69
97674: ST_TO_ADDR
// if not tmp then
97675: LD_VAR 0 2
97679: NOT
97680: IFFALSE 97684
// exit ;
97682: GO 97771
// un := tmp [ rand ( 1 , tmp ) ] ;
97684: LD_ADDR_VAR 0 1
97688: PUSH
97689: LD_VAR 0 2
97693: PUSH
97694: LD_INT 1
97696: PPUSH
97697: LD_VAR 0 2
97701: PPUSH
97702: CALL_OW 12
97706: ARRAY
97707: ST_TO_ADDR
// SetSide ( un , 0 ) ;
97708: LD_VAR 0 1
97712: PPUSH
97713: LD_INT 0
97715: PPUSH
97716: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
97720: LD_VAR 0 1
97724: PPUSH
97725: LD_OWVAR 3
97729: PUSH
97730: LD_VAR 0 1
97734: DIFF
97735: PPUSH
97736: LD_VAR 0 1
97740: PPUSH
97741: CALL_OW 74
97745: PPUSH
97746: CALL_OW 115
// wait ( 0 0$20 ) ;
97750: LD_INT 700
97752: PPUSH
97753: CALL_OW 67
// SetSide ( un , your_side ) ;
97757: LD_VAR 0 1
97761: PPUSH
97762: LD_OWVAR 2
97766: PPUSH
97767: CALL_OW 235
// end ;
97771: PPOPN 2
97773: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
97774: LD_EXP 94
97778: PUSH
97779: LD_EXP 127
97783: AND
97784: IFFALSE 97890
97786: GO 97788
97788: DISABLE
97789: LD_INT 0
97791: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
97792: LD_ADDR_VAR 0 1
97796: PUSH
97797: LD_INT 22
97799: PUSH
97800: LD_OWVAR 2
97804: PUSH
97805: EMPTY
97806: LIST
97807: LIST
97808: PUSH
97809: LD_INT 2
97811: PUSH
97812: LD_INT 30
97814: PUSH
97815: LD_INT 0
97817: PUSH
97818: EMPTY
97819: LIST
97820: LIST
97821: PUSH
97822: LD_INT 30
97824: PUSH
97825: LD_INT 1
97827: PUSH
97828: EMPTY
97829: LIST
97830: LIST
97831: PUSH
97832: EMPTY
97833: LIST
97834: LIST
97835: LIST
97836: PUSH
97837: EMPTY
97838: LIST
97839: LIST
97840: PPUSH
97841: CALL_OW 69
97845: ST_TO_ADDR
// if not depot then
97846: LD_VAR 0 1
97850: NOT
97851: IFFALSE 97855
// exit ;
97853: GO 97890
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
97855: LD_VAR 0 1
97859: PUSH
97860: LD_INT 1
97862: ARRAY
97863: PPUSH
97864: CALL_OW 250
97868: PPUSH
97869: LD_VAR 0 1
97873: PUSH
97874: LD_INT 1
97876: ARRAY
97877: PPUSH
97878: CALL_OW 251
97882: PPUSH
97883: LD_INT 70
97885: PPUSH
97886: CALL_OW 495
// end ;
97890: PPOPN 1
97892: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
97893: LD_EXP 94
97897: PUSH
97898: LD_EXP 128
97902: AND
97903: IFFALSE 98114
97905: GO 97907
97907: DISABLE
97908: LD_INT 0
97910: PPUSH
97911: PPUSH
97912: PPUSH
97913: PPUSH
97914: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
97915: LD_ADDR_VAR 0 5
97919: PUSH
97920: LD_INT 22
97922: PUSH
97923: LD_OWVAR 2
97927: PUSH
97928: EMPTY
97929: LIST
97930: LIST
97931: PUSH
97932: LD_INT 21
97934: PUSH
97935: LD_INT 1
97937: PUSH
97938: EMPTY
97939: LIST
97940: LIST
97941: PUSH
97942: EMPTY
97943: LIST
97944: LIST
97945: PPUSH
97946: CALL_OW 69
97950: ST_TO_ADDR
// if not tmp then
97951: LD_VAR 0 5
97955: NOT
97956: IFFALSE 97960
// exit ;
97958: GO 98114
// for i in tmp do
97960: LD_ADDR_VAR 0 1
97964: PUSH
97965: LD_VAR 0 5
97969: PUSH
97970: FOR_IN
97971: IFFALSE 98112
// begin d := rand ( 0 , 5 ) ;
97973: LD_ADDR_VAR 0 4
97977: PUSH
97978: LD_INT 0
97980: PPUSH
97981: LD_INT 5
97983: PPUSH
97984: CALL_OW 12
97988: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
97989: LD_ADDR_VAR 0 2
97993: PUSH
97994: LD_VAR 0 1
97998: PPUSH
97999: CALL_OW 250
98003: PPUSH
98004: LD_VAR 0 4
98008: PPUSH
98009: LD_INT 3
98011: PPUSH
98012: LD_INT 12
98014: PPUSH
98015: CALL_OW 12
98019: PPUSH
98020: CALL_OW 272
98024: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
98025: LD_ADDR_VAR 0 3
98029: PUSH
98030: LD_VAR 0 1
98034: PPUSH
98035: CALL_OW 251
98039: PPUSH
98040: LD_VAR 0 4
98044: PPUSH
98045: LD_INT 3
98047: PPUSH
98048: LD_INT 12
98050: PPUSH
98051: CALL_OW 12
98055: PPUSH
98056: CALL_OW 273
98060: ST_TO_ADDR
// if ValidHex ( x , y ) then
98061: LD_VAR 0 2
98065: PPUSH
98066: LD_VAR 0 3
98070: PPUSH
98071: CALL_OW 488
98075: IFFALSE 98110
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
98077: LD_VAR 0 1
98081: PPUSH
98082: LD_VAR 0 2
98086: PPUSH
98087: LD_VAR 0 3
98091: PPUSH
98092: LD_INT 3
98094: PPUSH
98095: LD_INT 6
98097: PPUSH
98098: CALL_OW 12
98102: PPUSH
98103: LD_INT 1
98105: PPUSH
98106: CALL_OW 483
// end ;
98110: GO 97970
98112: POP
98113: POP
// end ;
98114: PPOPN 5
98116: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
98117: LD_EXP 94
98121: PUSH
98122: LD_EXP 129
98126: AND
98127: IFFALSE 98221
98129: GO 98131
98131: DISABLE
98132: LD_INT 0
98134: PPUSH
98135: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
98136: LD_ADDR_VAR 0 2
98140: PUSH
98141: LD_INT 22
98143: PUSH
98144: LD_OWVAR 2
98148: PUSH
98149: EMPTY
98150: LIST
98151: LIST
98152: PUSH
98153: LD_INT 32
98155: PUSH
98156: LD_INT 1
98158: PUSH
98159: EMPTY
98160: LIST
98161: LIST
98162: PUSH
98163: LD_INT 21
98165: PUSH
98166: LD_INT 2
98168: PUSH
98169: EMPTY
98170: LIST
98171: LIST
98172: PUSH
98173: EMPTY
98174: LIST
98175: LIST
98176: LIST
98177: PPUSH
98178: CALL_OW 69
98182: ST_TO_ADDR
// if not tmp then
98183: LD_VAR 0 2
98187: NOT
98188: IFFALSE 98192
// exit ;
98190: GO 98221
// for i in tmp do
98192: LD_ADDR_VAR 0 1
98196: PUSH
98197: LD_VAR 0 2
98201: PUSH
98202: FOR_IN
98203: IFFALSE 98219
// SetFuel ( i , 0 ) ;
98205: LD_VAR 0 1
98209: PPUSH
98210: LD_INT 0
98212: PPUSH
98213: CALL_OW 240
98217: GO 98202
98219: POP
98220: POP
// end ;
98221: PPOPN 2
98223: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
98224: LD_EXP 94
98228: PUSH
98229: LD_EXP 130
98233: AND
98234: IFFALSE 98300
98236: GO 98238
98238: DISABLE
98239: LD_INT 0
98241: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
98242: LD_ADDR_VAR 0 1
98246: PUSH
98247: LD_INT 22
98249: PUSH
98250: LD_OWVAR 2
98254: PUSH
98255: EMPTY
98256: LIST
98257: LIST
98258: PUSH
98259: LD_INT 30
98261: PUSH
98262: LD_INT 29
98264: PUSH
98265: EMPTY
98266: LIST
98267: LIST
98268: PUSH
98269: EMPTY
98270: LIST
98271: LIST
98272: PPUSH
98273: CALL_OW 69
98277: ST_TO_ADDR
// if not tmp then
98278: LD_VAR 0 1
98282: NOT
98283: IFFALSE 98287
// exit ;
98285: GO 98300
// DestroyUnit ( tmp [ 1 ] ) ;
98287: LD_VAR 0 1
98291: PUSH
98292: LD_INT 1
98294: ARRAY
98295: PPUSH
98296: CALL_OW 65
// end ;
98300: PPOPN 1
98302: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
98303: LD_EXP 94
98307: PUSH
98308: LD_EXP 132
98312: AND
98313: IFFALSE 98442
98315: GO 98317
98317: DISABLE
98318: LD_INT 0
98320: PPUSH
// begin uc_side := 0 ;
98321: LD_ADDR_OWVAR 20
98325: PUSH
98326: LD_INT 0
98328: ST_TO_ADDR
// uc_nation := nation_arabian ;
98329: LD_ADDR_OWVAR 21
98333: PUSH
98334: LD_INT 2
98336: ST_TO_ADDR
// hc_gallery :=  ;
98337: LD_ADDR_OWVAR 33
98341: PUSH
98342: LD_STRING 
98344: ST_TO_ADDR
// hc_name :=  ;
98345: LD_ADDR_OWVAR 26
98349: PUSH
98350: LD_STRING 
98352: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
98353: LD_INT 1
98355: PPUSH
98356: LD_INT 11
98358: PPUSH
98359: LD_INT 10
98361: PPUSH
98362: CALL_OW 380
// un := CreateHuman ;
98366: LD_ADDR_VAR 0 1
98370: PUSH
98371: CALL_OW 44
98375: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
98376: LD_VAR 0 1
98380: PPUSH
98381: LD_INT 1
98383: PPUSH
98384: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
98388: LD_INT 35
98390: PPUSH
98391: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
98395: LD_VAR 0 1
98399: PPUSH
98400: LD_INT 22
98402: PUSH
98403: LD_OWVAR 2
98407: PUSH
98408: EMPTY
98409: LIST
98410: LIST
98411: PPUSH
98412: CALL_OW 69
98416: PPUSH
98417: LD_VAR 0 1
98421: PPUSH
98422: CALL_OW 74
98426: PPUSH
98427: CALL_OW 115
// until IsDead ( un ) ;
98431: LD_VAR 0 1
98435: PPUSH
98436: CALL_OW 301
98440: IFFALSE 98388
// end ;
98442: PPOPN 1
98444: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
98445: LD_EXP 94
98449: PUSH
98450: LD_EXP 134
98454: AND
98455: IFFALSE 98467
98457: GO 98459
98459: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
98460: LD_STRING earthquake(getX(game), 0, 32)
98462: PPUSH
98463: CALL_OW 559
98467: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
98468: LD_EXP 94
98472: PUSH
98473: LD_EXP 135
98477: AND
98478: IFFALSE 98569
98480: GO 98482
98482: DISABLE
98483: LD_INT 0
98485: PPUSH
// begin enable ;
98486: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
98487: LD_ADDR_VAR 0 1
98491: PUSH
98492: LD_INT 22
98494: PUSH
98495: LD_OWVAR 2
98499: PUSH
98500: EMPTY
98501: LIST
98502: LIST
98503: PUSH
98504: LD_INT 21
98506: PUSH
98507: LD_INT 2
98509: PUSH
98510: EMPTY
98511: LIST
98512: LIST
98513: PUSH
98514: LD_INT 33
98516: PUSH
98517: LD_INT 3
98519: PUSH
98520: EMPTY
98521: LIST
98522: LIST
98523: PUSH
98524: EMPTY
98525: LIST
98526: LIST
98527: LIST
98528: PPUSH
98529: CALL_OW 69
98533: ST_TO_ADDR
// if not tmp then
98534: LD_VAR 0 1
98538: NOT
98539: IFFALSE 98543
// exit ;
98541: GO 98569
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
98543: LD_VAR 0 1
98547: PUSH
98548: LD_INT 1
98550: PPUSH
98551: LD_VAR 0 1
98555: PPUSH
98556: CALL_OW 12
98560: ARRAY
98561: PPUSH
98562: LD_INT 1
98564: PPUSH
98565: CALL_OW 234
// end ;
98569: PPOPN 1
98571: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
98572: LD_EXP 94
98576: PUSH
98577: LD_EXP 136
98581: AND
98582: IFFALSE 98723
98584: GO 98586
98586: DISABLE
98587: LD_INT 0
98589: PPUSH
98590: PPUSH
98591: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
98592: LD_ADDR_VAR 0 3
98596: PUSH
98597: LD_INT 22
98599: PUSH
98600: LD_OWVAR 2
98604: PUSH
98605: EMPTY
98606: LIST
98607: LIST
98608: PUSH
98609: LD_INT 25
98611: PUSH
98612: LD_INT 1
98614: PUSH
98615: EMPTY
98616: LIST
98617: LIST
98618: PUSH
98619: EMPTY
98620: LIST
98621: LIST
98622: PPUSH
98623: CALL_OW 69
98627: ST_TO_ADDR
// if not tmp then
98628: LD_VAR 0 3
98632: NOT
98633: IFFALSE 98637
// exit ;
98635: GO 98723
// un := tmp [ rand ( 1 , tmp ) ] ;
98637: LD_ADDR_VAR 0 2
98641: PUSH
98642: LD_VAR 0 3
98646: PUSH
98647: LD_INT 1
98649: PPUSH
98650: LD_VAR 0 3
98654: PPUSH
98655: CALL_OW 12
98659: ARRAY
98660: ST_TO_ADDR
// if Crawls ( un ) then
98661: LD_VAR 0 2
98665: PPUSH
98666: CALL_OW 318
98670: IFFALSE 98681
// ComWalk ( un ) ;
98672: LD_VAR 0 2
98676: PPUSH
98677: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
98681: LD_VAR 0 2
98685: PPUSH
98686: LD_INT 9
98688: PPUSH
98689: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
98693: LD_INT 28
98695: PPUSH
98696: LD_OWVAR 2
98700: PPUSH
98701: LD_INT 2
98703: PPUSH
98704: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
98708: LD_INT 29
98710: PPUSH
98711: LD_OWVAR 2
98715: PPUSH
98716: LD_INT 2
98718: PPUSH
98719: CALL_OW 322
// end ;
98723: PPOPN 3
98725: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
98726: LD_EXP 94
98730: PUSH
98731: LD_EXP 137
98735: AND
98736: IFFALSE 98847
98738: GO 98740
98740: DISABLE
98741: LD_INT 0
98743: PPUSH
98744: PPUSH
98745: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
98746: LD_ADDR_VAR 0 3
98750: PUSH
98751: LD_INT 22
98753: PUSH
98754: LD_OWVAR 2
98758: PUSH
98759: EMPTY
98760: LIST
98761: LIST
98762: PUSH
98763: LD_INT 25
98765: PUSH
98766: LD_INT 1
98768: PUSH
98769: EMPTY
98770: LIST
98771: LIST
98772: PUSH
98773: EMPTY
98774: LIST
98775: LIST
98776: PPUSH
98777: CALL_OW 69
98781: ST_TO_ADDR
// if not tmp then
98782: LD_VAR 0 3
98786: NOT
98787: IFFALSE 98791
// exit ;
98789: GO 98847
// un := tmp [ rand ( 1 , tmp ) ] ;
98791: LD_ADDR_VAR 0 2
98795: PUSH
98796: LD_VAR 0 3
98800: PUSH
98801: LD_INT 1
98803: PPUSH
98804: LD_VAR 0 3
98808: PPUSH
98809: CALL_OW 12
98813: ARRAY
98814: ST_TO_ADDR
// if Crawls ( un ) then
98815: LD_VAR 0 2
98819: PPUSH
98820: CALL_OW 318
98824: IFFALSE 98835
// ComWalk ( un ) ;
98826: LD_VAR 0 2
98830: PPUSH
98831: CALL_OW 138
// SetClass ( un , class_mortar ) ;
98835: LD_VAR 0 2
98839: PPUSH
98840: LD_INT 8
98842: PPUSH
98843: CALL_OW 336
// end ;
98847: PPOPN 3
98849: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
98850: LD_EXP 94
98854: PUSH
98855: LD_EXP 138
98859: AND
98860: IFFALSE 99004
98862: GO 98864
98864: DISABLE
98865: LD_INT 0
98867: PPUSH
98868: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
98869: LD_ADDR_VAR 0 2
98873: PUSH
98874: LD_INT 22
98876: PUSH
98877: LD_OWVAR 2
98881: PUSH
98882: EMPTY
98883: LIST
98884: LIST
98885: PUSH
98886: LD_INT 21
98888: PUSH
98889: LD_INT 2
98891: PUSH
98892: EMPTY
98893: LIST
98894: LIST
98895: PUSH
98896: LD_INT 2
98898: PUSH
98899: LD_INT 34
98901: PUSH
98902: LD_INT 12
98904: PUSH
98905: EMPTY
98906: LIST
98907: LIST
98908: PUSH
98909: LD_INT 34
98911: PUSH
98912: LD_INT 51
98914: PUSH
98915: EMPTY
98916: LIST
98917: LIST
98918: PUSH
98919: LD_INT 34
98921: PUSH
98922: LD_INT 32
98924: PUSH
98925: EMPTY
98926: LIST
98927: LIST
98928: PUSH
98929: EMPTY
98930: LIST
98931: LIST
98932: LIST
98933: LIST
98934: PUSH
98935: EMPTY
98936: LIST
98937: LIST
98938: LIST
98939: PPUSH
98940: CALL_OW 69
98944: ST_TO_ADDR
// if not tmp then
98945: LD_VAR 0 2
98949: NOT
98950: IFFALSE 98954
// exit ;
98952: GO 99004
// for i in tmp do
98954: LD_ADDR_VAR 0 1
98958: PUSH
98959: LD_VAR 0 2
98963: PUSH
98964: FOR_IN
98965: IFFALSE 99002
// if GetCargo ( i , mat_artifact ) = 0 then
98967: LD_VAR 0 1
98971: PPUSH
98972: LD_INT 4
98974: PPUSH
98975: CALL_OW 289
98979: PUSH
98980: LD_INT 0
98982: EQUAL
98983: IFFALSE 99000
// SetCargo ( i , mat_siberit , 100 ) ;
98985: LD_VAR 0 1
98989: PPUSH
98990: LD_INT 3
98992: PPUSH
98993: LD_INT 100
98995: PPUSH
98996: CALL_OW 290
99000: GO 98964
99002: POP
99003: POP
// end ;
99004: PPOPN 2
99006: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
99007: LD_EXP 94
99011: PUSH
99012: LD_EXP 139
99016: AND
99017: IFFALSE 99200
99019: GO 99021
99021: DISABLE
99022: LD_INT 0
99024: PPUSH
99025: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
99026: LD_ADDR_VAR 0 2
99030: PUSH
99031: LD_INT 22
99033: PUSH
99034: LD_OWVAR 2
99038: PUSH
99039: EMPTY
99040: LIST
99041: LIST
99042: PPUSH
99043: CALL_OW 69
99047: ST_TO_ADDR
// if not tmp then
99048: LD_VAR 0 2
99052: NOT
99053: IFFALSE 99057
// exit ;
99055: GO 99200
// for i := 1 to 2 do
99057: LD_ADDR_VAR 0 1
99061: PUSH
99062: DOUBLE
99063: LD_INT 1
99065: DEC
99066: ST_TO_ADDR
99067: LD_INT 2
99069: PUSH
99070: FOR_TO
99071: IFFALSE 99198
// begin uc_side := your_side ;
99073: LD_ADDR_OWVAR 20
99077: PUSH
99078: LD_OWVAR 2
99082: ST_TO_ADDR
// uc_nation := nation_american ;
99083: LD_ADDR_OWVAR 21
99087: PUSH
99088: LD_INT 1
99090: ST_TO_ADDR
// vc_chassis := us_morphling ;
99091: LD_ADDR_OWVAR 37
99095: PUSH
99096: LD_INT 5
99098: ST_TO_ADDR
// vc_engine := engine_siberite ;
99099: LD_ADDR_OWVAR 39
99103: PUSH
99104: LD_INT 3
99106: ST_TO_ADDR
// vc_control := control_computer ;
99107: LD_ADDR_OWVAR 38
99111: PUSH
99112: LD_INT 3
99114: ST_TO_ADDR
// vc_weapon := us_double_laser ;
99115: LD_ADDR_OWVAR 40
99119: PUSH
99120: LD_INT 10
99122: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
99123: LD_VAR 0 2
99127: PUSH
99128: LD_INT 1
99130: ARRAY
99131: PPUSH
99132: CALL_OW 310
99136: NOT
99137: IFFALSE 99184
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
99139: CALL_OW 45
99143: PPUSH
99144: LD_VAR 0 2
99148: PUSH
99149: LD_INT 1
99151: ARRAY
99152: PPUSH
99153: CALL_OW 250
99157: PPUSH
99158: LD_VAR 0 2
99162: PUSH
99163: LD_INT 1
99165: ARRAY
99166: PPUSH
99167: CALL_OW 251
99171: PPUSH
99172: LD_INT 12
99174: PPUSH
99175: LD_INT 1
99177: PPUSH
99178: CALL_OW 50
99182: GO 99196
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
99184: CALL_OW 45
99188: PPUSH
99189: LD_INT 1
99191: PPUSH
99192: CALL_OW 51
// end ;
99196: GO 99070
99198: POP
99199: POP
// end ;
99200: PPOPN 2
99202: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
99203: LD_EXP 94
99207: PUSH
99208: LD_EXP 140
99212: AND
99213: IFFALSE 99435
99215: GO 99217
99217: DISABLE
99218: LD_INT 0
99220: PPUSH
99221: PPUSH
99222: PPUSH
99223: PPUSH
99224: PPUSH
99225: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
99226: LD_ADDR_VAR 0 6
99230: PUSH
99231: LD_INT 22
99233: PUSH
99234: LD_OWVAR 2
99238: PUSH
99239: EMPTY
99240: LIST
99241: LIST
99242: PUSH
99243: LD_INT 21
99245: PUSH
99246: LD_INT 1
99248: PUSH
99249: EMPTY
99250: LIST
99251: LIST
99252: PUSH
99253: LD_INT 3
99255: PUSH
99256: LD_INT 23
99258: PUSH
99259: LD_INT 0
99261: PUSH
99262: EMPTY
99263: LIST
99264: LIST
99265: PUSH
99266: EMPTY
99267: LIST
99268: LIST
99269: PUSH
99270: EMPTY
99271: LIST
99272: LIST
99273: LIST
99274: PPUSH
99275: CALL_OW 69
99279: ST_TO_ADDR
// if not tmp then
99280: LD_VAR 0 6
99284: NOT
99285: IFFALSE 99289
// exit ;
99287: GO 99435
// s1 := rand ( 1 , 4 ) ;
99289: LD_ADDR_VAR 0 2
99293: PUSH
99294: LD_INT 1
99296: PPUSH
99297: LD_INT 4
99299: PPUSH
99300: CALL_OW 12
99304: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
99305: LD_ADDR_VAR 0 4
99309: PUSH
99310: LD_VAR 0 6
99314: PUSH
99315: LD_INT 1
99317: ARRAY
99318: PPUSH
99319: LD_VAR 0 2
99323: PPUSH
99324: CALL_OW 259
99328: ST_TO_ADDR
// if s1 = 1 then
99329: LD_VAR 0 2
99333: PUSH
99334: LD_INT 1
99336: EQUAL
99337: IFFALSE 99357
// s2 := rand ( 2 , 4 ) else
99339: LD_ADDR_VAR 0 3
99343: PUSH
99344: LD_INT 2
99346: PPUSH
99347: LD_INT 4
99349: PPUSH
99350: CALL_OW 12
99354: ST_TO_ADDR
99355: GO 99365
// s2 := 1 ;
99357: LD_ADDR_VAR 0 3
99361: PUSH
99362: LD_INT 1
99364: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
99365: LD_ADDR_VAR 0 5
99369: PUSH
99370: LD_VAR 0 6
99374: PUSH
99375: LD_INT 1
99377: ARRAY
99378: PPUSH
99379: LD_VAR 0 3
99383: PPUSH
99384: CALL_OW 259
99388: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
99389: LD_VAR 0 6
99393: PUSH
99394: LD_INT 1
99396: ARRAY
99397: PPUSH
99398: LD_VAR 0 2
99402: PPUSH
99403: LD_VAR 0 5
99407: PPUSH
99408: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
99412: LD_VAR 0 6
99416: PUSH
99417: LD_INT 1
99419: ARRAY
99420: PPUSH
99421: LD_VAR 0 3
99425: PPUSH
99426: LD_VAR 0 4
99430: PPUSH
99431: CALL_OW 237
// end ;
99435: PPOPN 6
99437: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
99438: LD_EXP 94
99442: PUSH
99443: LD_EXP 141
99447: AND
99448: IFFALSE 99527
99450: GO 99452
99452: DISABLE
99453: LD_INT 0
99455: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
99456: LD_ADDR_VAR 0 1
99460: PUSH
99461: LD_INT 22
99463: PUSH
99464: LD_OWVAR 2
99468: PUSH
99469: EMPTY
99470: LIST
99471: LIST
99472: PUSH
99473: LD_INT 30
99475: PUSH
99476: LD_INT 3
99478: PUSH
99479: EMPTY
99480: LIST
99481: LIST
99482: PUSH
99483: EMPTY
99484: LIST
99485: LIST
99486: PPUSH
99487: CALL_OW 69
99491: ST_TO_ADDR
// if not tmp then
99492: LD_VAR 0 1
99496: NOT
99497: IFFALSE 99501
// exit ;
99499: GO 99527
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
99501: LD_VAR 0 1
99505: PUSH
99506: LD_INT 1
99508: PPUSH
99509: LD_VAR 0 1
99513: PPUSH
99514: CALL_OW 12
99518: ARRAY
99519: PPUSH
99520: LD_INT 1
99522: PPUSH
99523: CALL_OW 234
// end ;
99527: PPOPN 1
99529: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
99530: LD_EXP 94
99534: PUSH
99535: LD_EXP 142
99539: AND
99540: IFFALSE 99652
99542: GO 99544
99544: DISABLE
99545: LD_INT 0
99547: PPUSH
99548: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
99549: LD_ADDR_VAR 0 2
99553: PUSH
99554: LD_INT 22
99556: PUSH
99557: LD_OWVAR 2
99561: PUSH
99562: EMPTY
99563: LIST
99564: LIST
99565: PUSH
99566: LD_INT 2
99568: PUSH
99569: LD_INT 30
99571: PUSH
99572: LD_INT 27
99574: PUSH
99575: EMPTY
99576: LIST
99577: LIST
99578: PUSH
99579: LD_INT 30
99581: PUSH
99582: LD_INT 26
99584: PUSH
99585: EMPTY
99586: LIST
99587: LIST
99588: PUSH
99589: LD_INT 30
99591: PUSH
99592: LD_INT 28
99594: PUSH
99595: EMPTY
99596: LIST
99597: LIST
99598: PUSH
99599: EMPTY
99600: LIST
99601: LIST
99602: LIST
99603: LIST
99604: PUSH
99605: EMPTY
99606: LIST
99607: LIST
99608: PPUSH
99609: CALL_OW 69
99613: ST_TO_ADDR
// if not tmp then
99614: LD_VAR 0 2
99618: NOT
99619: IFFALSE 99623
// exit ;
99621: GO 99652
// for i in tmp do
99623: LD_ADDR_VAR 0 1
99627: PUSH
99628: LD_VAR 0 2
99632: PUSH
99633: FOR_IN
99634: IFFALSE 99650
// SetLives ( i , 1 ) ;
99636: LD_VAR 0 1
99640: PPUSH
99641: LD_INT 1
99643: PPUSH
99644: CALL_OW 234
99648: GO 99633
99650: POP
99651: POP
// end ;
99652: PPOPN 2
99654: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
99655: LD_EXP 94
99659: PUSH
99660: LD_EXP 143
99664: AND
99665: IFFALSE 99939
99667: GO 99669
99669: DISABLE
99670: LD_INT 0
99672: PPUSH
99673: PPUSH
99674: PPUSH
// begin i := rand ( 1 , 7 ) ;
99675: LD_ADDR_VAR 0 1
99679: PUSH
99680: LD_INT 1
99682: PPUSH
99683: LD_INT 7
99685: PPUSH
99686: CALL_OW 12
99690: ST_TO_ADDR
// case i of 1 :
99691: LD_VAR 0 1
99695: PUSH
99696: LD_INT 1
99698: DOUBLE
99699: EQUAL
99700: IFTRUE 99704
99702: GO 99714
99704: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
99705: LD_STRING earthquake(getX(game), 0, 32)
99707: PPUSH
99708: CALL_OW 559
99712: GO 99939
99714: LD_INT 2
99716: DOUBLE
99717: EQUAL
99718: IFTRUE 99722
99720: GO 99736
99722: POP
// begin ToLua ( displayStucuk(); ) ;
99723: LD_STRING displayStucuk();
99725: PPUSH
99726: CALL_OW 559
// ResetFog ;
99730: CALL_OW 335
// end ; 3 :
99734: GO 99939
99736: LD_INT 3
99738: DOUBLE
99739: EQUAL
99740: IFTRUE 99744
99742: GO 99848
99744: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
99745: LD_ADDR_VAR 0 2
99749: PUSH
99750: LD_INT 22
99752: PUSH
99753: LD_OWVAR 2
99757: PUSH
99758: EMPTY
99759: LIST
99760: LIST
99761: PUSH
99762: LD_INT 25
99764: PUSH
99765: LD_INT 1
99767: PUSH
99768: EMPTY
99769: LIST
99770: LIST
99771: PUSH
99772: EMPTY
99773: LIST
99774: LIST
99775: PPUSH
99776: CALL_OW 69
99780: ST_TO_ADDR
// if not tmp then
99781: LD_VAR 0 2
99785: NOT
99786: IFFALSE 99790
// exit ;
99788: GO 99939
// un := tmp [ rand ( 1 , tmp ) ] ;
99790: LD_ADDR_VAR 0 3
99794: PUSH
99795: LD_VAR 0 2
99799: PUSH
99800: LD_INT 1
99802: PPUSH
99803: LD_VAR 0 2
99807: PPUSH
99808: CALL_OW 12
99812: ARRAY
99813: ST_TO_ADDR
// if Crawls ( un ) then
99814: LD_VAR 0 3
99818: PPUSH
99819: CALL_OW 318
99823: IFFALSE 99834
// ComWalk ( un ) ;
99825: LD_VAR 0 3
99829: PPUSH
99830: CALL_OW 138
// SetClass ( un , class_mortar ) ;
99834: LD_VAR 0 3
99838: PPUSH
99839: LD_INT 8
99841: PPUSH
99842: CALL_OW 336
// end ; 4 :
99846: GO 99939
99848: LD_INT 4
99850: DOUBLE
99851: EQUAL
99852: IFTRUE 99856
99854: GO 99917
99856: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
99857: LD_ADDR_VAR 0 2
99861: PUSH
99862: LD_INT 22
99864: PUSH
99865: LD_OWVAR 2
99869: PUSH
99870: EMPTY
99871: LIST
99872: LIST
99873: PUSH
99874: LD_INT 30
99876: PUSH
99877: LD_INT 29
99879: PUSH
99880: EMPTY
99881: LIST
99882: LIST
99883: PUSH
99884: EMPTY
99885: LIST
99886: LIST
99887: PPUSH
99888: CALL_OW 69
99892: ST_TO_ADDR
// if not tmp then
99893: LD_VAR 0 2
99897: NOT
99898: IFFALSE 99902
// exit ;
99900: GO 99939
// DestroyUnit ( tmp [ 1 ] ) ;
99902: LD_VAR 0 2
99906: PUSH
99907: LD_INT 1
99909: ARRAY
99910: PPUSH
99911: CALL_OW 65
// end ; 5 .. 7 :
99915: GO 99939
99917: LD_INT 5
99919: DOUBLE
99920: GREATEREQUAL
99921: IFFALSE 99929
99923: LD_INT 7
99925: DOUBLE
99926: LESSEQUAL
99927: IFTRUE 99931
99929: GO 99938
99931: POP
// StreamSibBomb ; end ;
99932: CALL 96189 0 0
99936: GO 99939
99938: POP
// end ;
99939: PPOPN 3
99941: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
99942: LD_EXP 94
99946: PUSH
99947: LD_EXP 144
99951: AND
99952: IFFALSE 100108
99954: GO 99956
99956: DISABLE
99957: LD_INT 0
99959: PPUSH
99960: PPUSH
99961: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
99962: LD_ADDR_VAR 0 2
99966: PUSH
99967: LD_INT 81
99969: PUSH
99970: LD_OWVAR 2
99974: PUSH
99975: EMPTY
99976: LIST
99977: LIST
99978: PUSH
99979: LD_INT 2
99981: PUSH
99982: LD_INT 21
99984: PUSH
99985: LD_INT 1
99987: PUSH
99988: EMPTY
99989: LIST
99990: LIST
99991: PUSH
99992: LD_INT 21
99994: PUSH
99995: LD_INT 2
99997: PUSH
99998: EMPTY
99999: LIST
100000: LIST
100001: PUSH
100002: EMPTY
100003: LIST
100004: LIST
100005: LIST
100006: PUSH
100007: EMPTY
100008: LIST
100009: LIST
100010: PPUSH
100011: CALL_OW 69
100015: ST_TO_ADDR
// if not tmp then
100016: LD_VAR 0 2
100020: NOT
100021: IFFALSE 100025
// exit ;
100023: GO 100108
// p := 0 ;
100025: LD_ADDR_VAR 0 3
100029: PUSH
100030: LD_INT 0
100032: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
100033: LD_INT 35
100035: PPUSH
100036: CALL_OW 67
// p := p + 1 ;
100040: LD_ADDR_VAR 0 3
100044: PUSH
100045: LD_VAR 0 3
100049: PUSH
100050: LD_INT 1
100052: PLUS
100053: ST_TO_ADDR
// for i in tmp do
100054: LD_ADDR_VAR 0 1
100058: PUSH
100059: LD_VAR 0 2
100063: PUSH
100064: FOR_IN
100065: IFFALSE 100096
// if GetLives ( i ) < 1000 then
100067: LD_VAR 0 1
100071: PPUSH
100072: CALL_OW 256
100076: PUSH
100077: LD_INT 1000
100079: LESS
100080: IFFALSE 100094
// SetLives ( i , 1000 ) ;
100082: LD_VAR 0 1
100086: PPUSH
100087: LD_INT 1000
100089: PPUSH
100090: CALL_OW 234
100094: GO 100064
100096: POP
100097: POP
// until p > 20 ;
100098: LD_VAR 0 3
100102: PUSH
100103: LD_INT 20
100105: GREATER
100106: IFFALSE 100033
// end ;
100108: PPOPN 3
100110: END
// every 0 0$1 trigger StreamModeActive and sTime do
100111: LD_EXP 94
100115: PUSH
100116: LD_EXP 145
100120: AND
100121: IFFALSE 100156
100123: GO 100125
100125: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
100126: LD_INT 28
100128: PPUSH
100129: LD_OWVAR 2
100133: PPUSH
100134: LD_INT 2
100136: PPUSH
100137: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
100141: LD_INT 30
100143: PPUSH
100144: LD_OWVAR 2
100148: PPUSH
100149: LD_INT 2
100151: PPUSH
100152: CALL_OW 322
// end ;
100156: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
100157: LD_EXP 94
100161: PUSH
100162: LD_EXP 146
100166: AND
100167: IFFALSE 100288
100169: GO 100171
100171: DISABLE
100172: LD_INT 0
100174: PPUSH
100175: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
100176: LD_ADDR_VAR 0 2
100180: PUSH
100181: LD_INT 22
100183: PUSH
100184: LD_OWVAR 2
100188: PUSH
100189: EMPTY
100190: LIST
100191: LIST
100192: PUSH
100193: LD_INT 21
100195: PUSH
100196: LD_INT 1
100198: PUSH
100199: EMPTY
100200: LIST
100201: LIST
100202: PUSH
100203: LD_INT 3
100205: PUSH
100206: LD_INT 23
100208: PUSH
100209: LD_INT 0
100211: PUSH
100212: EMPTY
100213: LIST
100214: LIST
100215: PUSH
100216: EMPTY
100217: LIST
100218: LIST
100219: PUSH
100220: EMPTY
100221: LIST
100222: LIST
100223: LIST
100224: PPUSH
100225: CALL_OW 69
100229: ST_TO_ADDR
// if not tmp then
100230: LD_VAR 0 2
100234: NOT
100235: IFFALSE 100239
// exit ;
100237: GO 100288
// for i in tmp do
100239: LD_ADDR_VAR 0 1
100243: PUSH
100244: LD_VAR 0 2
100248: PUSH
100249: FOR_IN
100250: IFFALSE 100286
// begin if Crawls ( i ) then
100252: LD_VAR 0 1
100256: PPUSH
100257: CALL_OW 318
100261: IFFALSE 100272
// ComWalk ( i ) ;
100263: LD_VAR 0 1
100267: PPUSH
100268: CALL_OW 138
// SetClass ( i , 2 ) ;
100272: LD_VAR 0 1
100276: PPUSH
100277: LD_INT 2
100279: PPUSH
100280: CALL_OW 336
// end ;
100284: GO 100249
100286: POP
100287: POP
// end ;
100288: PPOPN 2
100290: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
100291: LD_EXP 94
100295: PUSH
100296: LD_EXP 147
100300: AND
100301: IFFALSE 100582
100303: GO 100305
100305: DISABLE
100306: LD_INT 0
100308: PPUSH
100309: PPUSH
100310: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
100311: LD_OWVAR 2
100315: PPUSH
100316: LD_INT 9
100318: PPUSH
100319: LD_INT 1
100321: PPUSH
100322: LD_INT 1
100324: PPUSH
100325: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
100329: LD_INT 9
100331: PPUSH
100332: LD_OWVAR 2
100336: PPUSH
100337: CALL_OW 343
// uc_side := 9 ;
100341: LD_ADDR_OWVAR 20
100345: PUSH
100346: LD_INT 9
100348: ST_TO_ADDR
// uc_nation := 2 ;
100349: LD_ADDR_OWVAR 21
100353: PUSH
100354: LD_INT 2
100356: ST_TO_ADDR
// hc_name := Dark Warrior ;
100357: LD_ADDR_OWVAR 26
100361: PUSH
100362: LD_STRING Dark Warrior
100364: ST_TO_ADDR
// hc_gallery :=  ;
100365: LD_ADDR_OWVAR 33
100369: PUSH
100370: LD_STRING 
100372: ST_TO_ADDR
// hc_noskilllimit := true ;
100373: LD_ADDR_OWVAR 76
100377: PUSH
100378: LD_INT 1
100380: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
100381: LD_ADDR_OWVAR 31
100385: PUSH
100386: LD_INT 30
100388: PUSH
100389: LD_INT 30
100391: PUSH
100392: LD_INT 30
100394: PUSH
100395: LD_INT 30
100397: PUSH
100398: EMPTY
100399: LIST
100400: LIST
100401: LIST
100402: LIST
100403: ST_TO_ADDR
// un := CreateHuman ;
100404: LD_ADDR_VAR 0 3
100408: PUSH
100409: CALL_OW 44
100413: ST_TO_ADDR
// hc_noskilllimit := false ;
100414: LD_ADDR_OWVAR 76
100418: PUSH
100419: LD_INT 0
100421: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
100422: LD_VAR 0 3
100426: PPUSH
100427: LD_INT 1
100429: PPUSH
100430: CALL_OW 51
// p := 0 ;
100434: LD_ADDR_VAR 0 2
100438: PUSH
100439: LD_INT 0
100441: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
100442: LD_INT 35
100444: PPUSH
100445: CALL_OW 67
// p := p + 1 ;
100449: LD_ADDR_VAR 0 2
100453: PUSH
100454: LD_VAR 0 2
100458: PUSH
100459: LD_INT 1
100461: PLUS
100462: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
100463: LD_VAR 0 3
100467: PPUSH
100468: CALL_OW 256
100472: PUSH
100473: LD_INT 1000
100475: LESS
100476: IFFALSE 100490
// SetLives ( un , 1000 ) ;
100478: LD_VAR 0 3
100482: PPUSH
100483: LD_INT 1000
100485: PPUSH
100486: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
100490: LD_VAR 0 3
100494: PPUSH
100495: LD_INT 81
100497: PUSH
100498: LD_OWVAR 2
100502: PUSH
100503: EMPTY
100504: LIST
100505: LIST
100506: PUSH
100507: LD_INT 91
100509: PUSH
100510: LD_VAR 0 3
100514: PUSH
100515: LD_INT 30
100517: PUSH
100518: EMPTY
100519: LIST
100520: LIST
100521: LIST
100522: PUSH
100523: EMPTY
100524: LIST
100525: LIST
100526: PPUSH
100527: CALL_OW 69
100531: PPUSH
100532: LD_VAR 0 3
100536: PPUSH
100537: CALL_OW 74
100541: PPUSH
100542: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
100546: LD_VAR 0 2
100550: PUSH
100551: LD_INT 60
100553: GREATER
100554: PUSH
100555: LD_VAR 0 3
100559: PPUSH
100560: CALL_OW 301
100564: OR
100565: IFFALSE 100442
// if un then
100567: LD_VAR 0 3
100571: IFFALSE 100582
// RemoveUnit ( un ) ;
100573: LD_VAR 0 3
100577: PPUSH
100578: CALL_OW 64
// end ;
100582: PPOPN 3
100584: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
100585: LD_INT 0
100587: PPUSH
// case cmd of 301 :
100588: LD_VAR 0 1
100592: PUSH
100593: LD_INT 301
100595: DOUBLE
100596: EQUAL
100597: IFTRUE 100601
100599: GO 100633
100601: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
100602: LD_VAR 0 6
100606: PPUSH
100607: LD_VAR 0 7
100611: PPUSH
100612: LD_VAR 0 8
100616: PPUSH
100617: LD_VAR 0 4
100621: PPUSH
100622: LD_VAR 0 5
100626: PPUSH
100627: CALL 101834 0 5
100631: GO 100754
100633: LD_INT 302
100635: DOUBLE
100636: EQUAL
100637: IFTRUE 100641
100639: GO 100678
100641: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
100642: LD_VAR 0 6
100646: PPUSH
100647: LD_VAR 0 7
100651: PPUSH
100652: LD_VAR 0 8
100656: PPUSH
100657: LD_VAR 0 9
100661: PPUSH
100662: LD_VAR 0 4
100666: PPUSH
100667: LD_VAR 0 5
100671: PPUSH
100672: CALL 101925 0 6
100676: GO 100754
100678: LD_INT 303
100680: DOUBLE
100681: EQUAL
100682: IFTRUE 100686
100684: GO 100723
100686: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
100687: LD_VAR 0 6
100691: PPUSH
100692: LD_VAR 0 7
100696: PPUSH
100697: LD_VAR 0 8
100701: PPUSH
100702: LD_VAR 0 9
100706: PPUSH
100707: LD_VAR 0 4
100711: PPUSH
100712: LD_VAR 0 5
100716: PPUSH
100717: CALL 100759 0 6
100721: GO 100754
100723: LD_INT 304
100725: DOUBLE
100726: EQUAL
100727: IFTRUE 100731
100729: GO 100753
100731: POP
// hHackTeleport ( unit , x , y ) ; end ;
100732: LD_VAR 0 2
100736: PPUSH
100737: LD_VAR 0 4
100741: PPUSH
100742: LD_VAR 0 5
100746: PPUSH
100747: CALL 102518 0 3
100751: GO 100754
100753: POP
// end ;
100754: LD_VAR 0 12
100758: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
100759: LD_INT 0
100761: PPUSH
100762: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
100763: LD_VAR 0 1
100767: PUSH
100768: LD_INT 1
100770: LESS
100771: PUSH
100772: LD_VAR 0 1
100776: PUSH
100777: LD_INT 3
100779: GREATER
100780: OR
100781: PUSH
100782: LD_VAR 0 5
100786: PPUSH
100787: LD_VAR 0 6
100791: PPUSH
100792: CALL_OW 428
100796: OR
100797: IFFALSE 100801
// exit ;
100799: GO 101521
// uc_side := your_side ;
100801: LD_ADDR_OWVAR 20
100805: PUSH
100806: LD_OWVAR 2
100810: ST_TO_ADDR
// uc_nation := nation ;
100811: LD_ADDR_OWVAR 21
100815: PUSH
100816: LD_VAR 0 1
100820: ST_TO_ADDR
// bc_level = 1 ;
100821: LD_ADDR_OWVAR 43
100825: PUSH
100826: LD_INT 1
100828: ST_TO_ADDR
// case btype of 1 :
100829: LD_VAR 0 2
100833: PUSH
100834: LD_INT 1
100836: DOUBLE
100837: EQUAL
100838: IFTRUE 100842
100840: GO 100853
100842: POP
// bc_type := b_depot ; 2 :
100843: LD_ADDR_OWVAR 42
100847: PUSH
100848: LD_INT 0
100850: ST_TO_ADDR
100851: GO 101465
100853: LD_INT 2
100855: DOUBLE
100856: EQUAL
100857: IFTRUE 100861
100859: GO 100872
100861: POP
// bc_type := b_warehouse ; 3 :
100862: LD_ADDR_OWVAR 42
100866: PUSH
100867: LD_INT 1
100869: ST_TO_ADDR
100870: GO 101465
100872: LD_INT 3
100874: DOUBLE
100875: EQUAL
100876: IFTRUE 100880
100878: GO 100891
100880: POP
// bc_type := b_lab ; 4 .. 9 :
100881: LD_ADDR_OWVAR 42
100885: PUSH
100886: LD_INT 6
100888: ST_TO_ADDR
100889: GO 101465
100891: LD_INT 4
100893: DOUBLE
100894: GREATEREQUAL
100895: IFFALSE 100903
100897: LD_INT 9
100899: DOUBLE
100900: LESSEQUAL
100901: IFTRUE 100905
100903: GO 100957
100905: POP
// begin bc_type := b_lab_half ;
100906: LD_ADDR_OWVAR 42
100910: PUSH
100911: LD_INT 7
100913: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
100914: LD_ADDR_OWVAR 44
100918: PUSH
100919: LD_INT 10
100921: PUSH
100922: LD_INT 11
100924: PUSH
100925: LD_INT 12
100927: PUSH
100928: LD_INT 15
100930: PUSH
100931: LD_INT 14
100933: PUSH
100934: LD_INT 13
100936: PUSH
100937: EMPTY
100938: LIST
100939: LIST
100940: LIST
100941: LIST
100942: LIST
100943: LIST
100944: PUSH
100945: LD_VAR 0 2
100949: PUSH
100950: LD_INT 3
100952: MINUS
100953: ARRAY
100954: ST_TO_ADDR
// end ; 10 .. 13 :
100955: GO 101465
100957: LD_INT 10
100959: DOUBLE
100960: GREATEREQUAL
100961: IFFALSE 100969
100963: LD_INT 13
100965: DOUBLE
100966: LESSEQUAL
100967: IFTRUE 100971
100969: GO 101048
100971: POP
// begin bc_type := b_lab_full ;
100972: LD_ADDR_OWVAR 42
100976: PUSH
100977: LD_INT 8
100979: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
100980: LD_ADDR_OWVAR 44
100984: PUSH
100985: LD_INT 10
100987: PUSH
100988: LD_INT 12
100990: PUSH
100991: LD_INT 14
100993: PUSH
100994: LD_INT 13
100996: PUSH
100997: EMPTY
100998: LIST
100999: LIST
101000: LIST
101001: LIST
101002: PUSH
101003: LD_VAR 0 2
101007: PUSH
101008: LD_INT 9
101010: MINUS
101011: ARRAY
101012: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
101013: LD_ADDR_OWVAR 45
101017: PUSH
101018: LD_INT 11
101020: PUSH
101021: LD_INT 15
101023: PUSH
101024: LD_INT 12
101026: PUSH
101027: LD_INT 15
101029: PUSH
101030: EMPTY
101031: LIST
101032: LIST
101033: LIST
101034: LIST
101035: PUSH
101036: LD_VAR 0 2
101040: PUSH
101041: LD_INT 9
101043: MINUS
101044: ARRAY
101045: ST_TO_ADDR
// end ; 14 :
101046: GO 101465
101048: LD_INT 14
101050: DOUBLE
101051: EQUAL
101052: IFTRUE 101056
101054: GO 101067
101056: POP
// bc_type := b_workshop ; 15 :
101057: LD_ADDR_OWVAR 42
101061: PUSH
101062: LD_INT 2
101064: ST_TO_ADDR
101065: GO 101465
101067: LD_INT 15
101069: DOUBLE
101070: EQUAL
101071: IFTRUE 101075
101073: GO 101086
101075: POP
// bc_type := b_factory ; 16 :
101076: LD_ADDR_OWVAR 42
101080: PUSH
101081: LD_INT 3
101083: ST_TO_ADDR
101084: GO 101465
101086: LD_INT 16
101088: DOUBLE
101089: EQUAL
101090: IFTRUE 101094
101092: GO 101105
101094: POP
// bc_type := b_ext_gun ; 17 :
101095: LD_ADDR_OWVAR 42
101099: PUSH
101100: LD_INT 17
101102: ST_TO_ADDR
101103: GO 101465
101105: LD_INT 17
101107: DOUBLE
101108: EQUAL
101109: IFTRUE 101113
101111: GO 101141
101113: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
101114: LD_ADDR_OWVAR 42
101118: PUSH
101119: LD_INT 19
101121: PUSH
101122: LD_INT 23
101124: PUSH
101125: LD_INT 19
101127: PUSH
101128: EMPTY
101129: LIST
101130: LIST
101131: LIST
101132: PUSH
101133: LD_VAR 0 1
101137: ARRAY
101138: ST_TO_ADDR
101139: GO 101465
101141: LD_INT 18
101143: DOUBLE
101144: EQUAL
101145: IFTRUE 101149
101147: GO 101160
101149: POP
// bc_type := b_ext_radar ; 19 :
101150: LD_ADDR_OWVAR 42
101154: PUSH
101155: LD_INT 20
101157: ST_TO_ADDR
101158: GO 101465
101160: LD_INT 19
101162: DOUBLE
101163: EQUAL
101164: IFTRUE 101168
101166: GO 101179
101168: POP
// bc_type := b_ext_radio ; 20 :
101169: LD_ADDR_OWVAR 42
101173: PUSH
101174: LD_INT 22
101176: ST_TO_ADDR
101177: GO 101465
101179: LD_INT 20
101181: DOUBLE
101182: EQUAL
101183: IFTRUE 101187
101185: GO 101198
101187: POP
// bc_type := b_ext_siberium ; 21 :
101188: LD_ADDR_OWVAR 42
101192: PUSH
101193: LD_INT 21
101195: ST_TO_ADDR
101196: GO 101465
101198: LD_INT 21
101200: DOUBLE
101201: EQUAL
101202: IFTRUE 101206
101204: GO 101217
101206: POP
// bc_type := b_ext_computer ; 22 :
101207: LD_ADDR_OWVAR 42
101211: PUSH
101212: LD_INT 24
101214: ST_TO_ADDR
101215: GO 101465
101217: LD_INT 22
101219: DOUBLE
101220: EQUAL
101221: IFTRUE 101225
101223: GO 101236
101225: POP
// bc_type := b_ext_track ; 23 :
101226: LD_ADDR_OWVAR 42
101230: PUSH
101231: LD_INT 16
101233: ST_TO_ADDR
101234: GO 101465
101236: LD_INT 23
101238: DOUBLE
101239: EQUAL
101240: IFTRUE 101244
101242: GO 101255
101244: POP
// bc_type := b_ext_laser ; 24 :
101245: LD_ADDR_OWVAR 42
101249: PUSH
101250: LD_INT 25
101252: ST_TO_ADDR
101253: GO 101465
101255: LD_INT 24
101257: DOUBLE
101258: EQUAL
101259: IFTRUE 101263
101261: GO 101274
101263: POP
// bc_type := b_control_tower ; 25 :
101264: LD_ADDR_OWVAR 42
101268: PUSH
101269: LD_INT 36
101271: ST_TO_ADDR
101272: GO 101465
101274: LD_INT 25
101276: DOUBLE
101277: EQUAL
101278: IFTRUE 101282
101280: GO 101293
101282: POP
// bc_type := b_breastwork ; 26 :
101283: LD_ADDR_OWVAR 42
101287: PUSH
101288: LD_INT 31
101290: ST_TO_ADDR
101291: GO 101465
101293: LD_INT 26
101295: DOUBLE
101296: EQUAL
101297: IFTRUE 101301
101299: GO 101312
101301: POP
// bc_type := b_bunker ; 27 :
101302: LD_ADDR_OWVAR 42
101306: PUSH
101307: LD_INT 32
101309: ST_TO_ADDR
101310: GO 101465
101312: LD_INT 27
101314: DOUBLE
101315: EQUAL
101316: IFTRUE 101320
101318: GO 101331
101320: POP
// bc_type := b_turret ; 28 :
101321: LD_ADDR_OWVAR 42
101325: PUSH
101326: LD_INT 33
101328: ST_TO_ADDR
101329: GO 101465
101331: LD_INT 28
101333: DOUBLE
101334: EQUAL
101335: IFTRUE 101339
101337: GO 101350
101339: POP
// bc_type := b_armoury ; 29 :
101340: LD_ADDR_OWVAR 42
101344: PUSH
101345: LD_INT 4
101347: ST_TO_ADDR
101348: GO 101465
101350: LD_INT 29
101352: DOUBLE
101353: EQUAL
101354: IFTRUE 101358
101356: GO 101369
101358: POP
// bc_type := b_barracks ; 30 :
101359: LD_ADDR_OWVAR 42
101363: PUSH
101364: LD_INT 5
101366: ST_TO_ADDR
101367: GO 101465
101369: LD_INT 30
101371: DOUBLE
101372: EQUAL
101373: IFTRUE 101377
101375: GO 101388
101377: POP
// bc_type := b_solar_power ; 31 :
101378: LD_ADDR_OWVAR 42
101382: PUSH
101383: LD_INT 27
101385: ST_TO_ADDR
101386: GO 101465
101388: LD_INT 31
101390: DOUBLE
101391: EQUAL
101392: IFTRUE 101396
101394: GO 101407
101396: POP
// bc_type := b_oil_power ; 32 :
101397: LD_ADDR_OWVAR 42
101401: PUSH
101402: LD_INT 26
101404: ST_TO_ADDR
101405: GO 101465
101407: LD_INT 32
101409: DOUBLE
101410: EQUAL
101411: IFTRUE 101415
101413: GO 101426
101415: POP
// bc_type := b_siberite_power ; 33 :
101416: LD_ADDR_OWVAR 42
101420: PUSH
101421: LD_INT 28
101423: ST_TO_ADDR
101424: GO 101465
101426: LD_INT 33
101428: DOUBLE
101429: EQUAL
101430: IFTRUE 101434
101432: GO 101445
101434: POP
// bc_type := b_oil_mine ; 34 :
101435: LD_ADDR_OWVAR 42
101439: PUSH
101440: LD_INT 29
101442: ST_TO_ADDR
101443: GO 101465
101445: LD_INT 34
101447: DOUBLE
101448: EQUAL
101449: IFTRUE 101453
101451: GO 101464
101453: POP
// bc_type := b_siberite_mine ; end ;
101454: LD_ADDR_OWVAR 42
101458: PUSH
101459: LD_INT 30
101461: ST_TO_ADDR
101462: GO 101465
101464: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
101465: LD_ADDR_VAR 0 8
101469: PUSH
101470: LD_VAR 0 5
101474: PPUSH
101475: LD_VAR 0 6
101479: PPUSH
101480: LD_VAR 0 3
101484: PPUSH
101485: CALL_OW 47
101489: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
101490: LD_OWVAR 42
101494: PUSH
101495: LD_INT 32
101497: PUSH
101498: LD_INT 33
101500: PUSH
101501: EMPTY
101502: LIST
101503: LIST
101504: IN
101505: IFFALSE 101521
// PlaceWeaponTurret ( b , weapon ) ;
101507: LD_VAR 0 8
101511: PPUSH
101512: LD_VAR 0 4
101516: PPUSH
101517: CALL_OW 431
// end ;
101521: LD_VAR 0 7
101525: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
101526: LD_INT 0
101528: PPUSH
101529: PPUSH
101530: PPUSH
101531: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
101532: LD_ADDR_VAR 0 4
101536: PUSH
101537: LD_INT 22
101539: PUSH
101540: LD_OWVAR 2
101544: PUSH
101545: EMPTY
101546: LIST
101547: LIST
101548: PUSH
101549: LD_INT 2
101551: PUSH
101552: LD_INT 30
101554: PUSH
101555: LD_INT 0
101557: PUSH
101558: EMPTY
101559: LIST
101560: LIST
101561: PUSH
101562: LD_INT 30
101564: PUSH
101565: LD_INT 1
101567: PUSH
101568: EMPTY
101569: LIST
101570: LIST
101571: PUSH
101572: EMPTY
101573: LIST
101574: LIST
101575: LIST
101576: PUSH
101577: EMPTY
101578: LIST
101579: LIST
101580: PPUSH
101581: CALL_OW 69
101585: ST_TO_ADDR
// if not tmp then
101586: LD_VAR 0 4
101590: NOT
101591: IFFALSE 101595
// exit ;
101593: GO 101654
// for i in tmp do
101595: LD_ADDR_VAR 0 2
101599: PUSH
101600: LD_VAR 0 4
101604: PUSH
101605: FOR_IN
101606: IFFALSE 101652
// for j = 1 to 3 do
101608: LD_ADDR_VAR 0 3
101612: PUSH
101613: DOUBLE
101614: LD_INT 1
101616: DEC
101617: ST_TO_ADDR
101618: LD_INT 3
101620: PUSH
101621: FOR_TO
101622: IFFALSE 101648
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
101624: LD_VAR 0 2
101628: PPUSH
101629: CALL_OW 274
101633: PPUSH
101634: LD_VAR 0 3
101638: PPUSH
101639: LD_INT 99999
101641: PPUSH
101642: CALL_OW 277
101646: GO 101621
101648: POP
101649: POP
101650: GO 101605
101652: POP
101653: POP
// end ;
101654: LD_VAR 0 1
101658: RET
// export function hHackSetLevel10 ; var i , j ; begin
101659: LD_INT 0
101661: PPUSH
101662: PPUSH
101663: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
101664: LD_ADDR_VAR 0 2
101668: PUSH
101669: LD_INT 21
101671: PUSH
101672: LD_INT 1
101674: PUSH
101675: EMPTY
101676: LIST
101677: LIST
101678: PPUSH
101679: CALL_OW 69
101683: PUSH
101684: FOR_IN
101685: IFFALSE 101737
// if IsSelected ( i ) then
101687: LD_VAR 0 2
101691: PPUSH
101692: CALL_OW 306
101696: IFFALSE 101735
// begin for j := 1 to 4 do
101698: LD_ADDR_VAR 0 3
101702: PUSH
101703: DOUBLE
101704: LD_INT 1
101706: DEC
101707: ST_TO_ADDR
101708: LD_INT 4
101710: PUSH
101711: FOR_TO
101712: IFFALSE 101733
// SetSkill ( i , j , 10 ) ;
101714: LD_VAR 0 2
101718: PPUSH
101719: LD_VAR 0 3
101723: PPUSH
101724: LD_INT 10
101726: PPUSH
101727: CALL_OW 237
101731: GO 101711
101733: POP
101734: POP
// end ;
101735: GO 101684
101737: POP
101738: POP
// end ;
101739: LD_VAR 0 1
101743: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
101744: LD_INT 0
101746: PPUSH
101747: PPUSH
101748: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
101749: LD_ADDR_VAR 0 2
101753: PUSH
101754: LD_INT 22
101756: PUSH
101757: LD_OWVAR 2
101761: PUSH
101762: EMPTY
101763: LIST
101764: LIST
101765: PUSH
101766: LD_INT 21
101768: PUSH
101769: LD_INT 1
101771: PUSH
101772: EMPTY
101773: LIST
101774: LIST
101775: PUSH
101776: EMPTY
101777: LIST
101778: LIST
101779: PPUSH
101780: CALL_OW 69
101784: PUSH
101785: FOR_IN
101786: IFFALSE 101827
// begin for j := 1 to 4 do
101788: LD_ADDR_VAR 0 3
101792: PUSH
101793: DOUBLE
101794: LD_INT 1
101796: DEC
101797: ST_TO_ADDR
101798: LD_INT 4
101800: PUSH
101801: FOR_TO
101802: IFFALSE 101823
// SetSkill ( i , j , 10 ) ;
101804: LD_VAR 0 2
101808: PPUSH
101809: LD_VAR 0 3
101813: PPUSH
101814: LD_INT 10
101816: PPUSH
101817: CALL_OW 237
101821: GO 101801
101823: POP
101824: POP
// end ;
101825: GO 101785
101827: POP
101828: POP
// end ;
101829: LD_VAR 0 1
101833: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
101834: LD_INT 0
101836: PPUSH
// uc_side := your_side ;
101837: LD_ADDR_OWVAR 20
101841: PUSH
101842: LD_OWVAR 2
101846: ST_TO_ADDR
// uc_nation := nation ;
101847: LD_ADDR_OWVAR 21
101851: PUSH
101852: LD_VAR 0 1
101856: ST_TO_ADDR
// InitHc ;
101857: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
101861: LD_INT 0
101863: PPUSH
101864: LD_VAR 0 2
101868: PPUSH
101869: LD_VAR 0 3
101873: PPUSH
101874: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
101878: LD_VAR 0 4
101882: PPUSH
101883: LD_VAR 0 5
101887: PPUSH
101888: CALL_OW 428
101892: PUSH
101893: LD_INT 0
101895: EQUAL
101896: IFFALSE 101920
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
101898: CALL_OW 44
101902: PPUSH
101903: LD_VAR 0 4
101907: PPUSH
101908: LD_VAR 0 5
101912: PPUSH
101913: LD_INT 1
101915: PPUSH
101916: CALL_OW 48
// end ;
101920: LD_VAR 0 6
101924: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
101925: LD_INT 0
101927: PPUSH
101928: PPUSH
// uc_side := your_side ;
101929: LD_ADDR_OWVAR 20
101933: PUSH
101934: LD_OWVAR 2
101938: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
101939: LD_VAR 0 1
101943: PUSH
101944: LD_INT 1
101946: PUSH
101947: LD_INT 2
101949: PUSH
101950: LD_INT 3
101952: PUSH
101953: LD_INT 4
101955: PUSH
101956: LD_INT 5
101958: PUSH
101959: EMPTY
101960: LIST
101961: LIST
101962: LIST
101963: LIST
101964: LIST
101965: IN
101966: IFFALSE 101978
// uc_nation := nation_american else
101968: LD_ADDR_OWVAR 21
101972: PUSH
101973: LD_INT 1
101975: ST_TO_ADDR
101976: GO 102021
// if chassis in [ 11 , 12 , 13 , 14 ] then
101978: LD_VAR 0 1
101982: PUSH
101983: LD_INT 11
101985: PUSH
101986: LD_INT 12
101988: PUSH
101989: LD_INT 13
101991: PUSH
101992: LD_INT 14
101994: PUSH
101995: EMPTY
101996: LIST
101997: LIST
101998: LIST
101999: LIST
102000: IN
102001: IFFALSE 102013
// uc_nation := nation_arabian else
102003: LD_ADDR_OWVAR 21
102007: PUSH
102008: LD_INT 2
102010: ST_TO_ADDR
102011: GO 102021
// uc_nation := nation_russian ;
102013: LD_ADDR_OWVAR 21
102017: PUSH
102018: LD_INT 3
102020: ST_TO_ADDR
// vc_chassis := chassis ;
102021: LD_ADDR_OWVAR 37
102025: PUSH
102026: LD_VAR 0 1
102030: ST_TO_ADDR
// vc_engine := engine ;
102031: LD_ADDR_OWVAR 39
102035: PUSH
102036: LD_VAR 0 2
102040: ST_TO_ADDR
// vc_control := control ;
102041: LD_ADDR_OWVAR 38
102045: PUSH
102046: LD_VAR 0 3
102050: ST_TO_ADDR
// vc_weapon := weapon ;
102051: LD_ADDR_OWVAR 40
102055: PUSH
102056: LD_VAR 0 4
102060: ST_TO_ADDR
// un := CreateVehicle ;
102061: LD_ADDR_VAR 0 8
102065: PUSH
102066: CALL_OW 45
102070: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
102071: LD_VAR 0 8
102075: PPUSH
102076: LD_INT 0
102078: PPUSH
102079: LD_INT 5
102081: PPUSH
102082: CALL_OW 12
102086: PPUSH
102087: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
102091: LD_VAR 0 8
102095: PPUSH
102096: LD_VAR 0 5
102100: PPUSH
102101: LD_VAR 0 6
102105: PPUSH
102106: LD_INT 1
102108: PPUSH
102109: CALL_OW 48
// end ;
102113: LD_VAR 0 7
102117: RET
// export hInvincible ; every 1 do
102118: GO 102120
102120: DISABLE
// hInvincible := [ ] ;
102121: LD_ADDR_EXP 148
102125: PUSH
102126: EMPTY
102127: ST_TO_ADDR
102128: END
// every 10 do var i ;
102129: GO 102131
102131: DISABLE
102132: LD_INT 0
102134: PPUSH
// begin enable ;
102135: ENABLE
// if not hInvincible then
102136: LD_EXP 148
102140: NOT
102141: IFFALSE 102145
// exit ;
102143: GO 102189
// for i in hInvincible do
102145: LD_ADDR_VAR 0 1
102149: PUSH
102150: LD_EXP 148
102154: PUSH
102155: FOR_IN
102156: IFFALSE 102187
// if GetLives ( i ) < 1000 then
102158: LD_VAR 0 1
102162: PPUSH
102163: CALL_OW 256
102167: PUSH
102168: LD_INT 1000
102170: LESS
102171: IFFALSE 102185
// SetLives ( i , 1000 ) ;
102173: LD_VAR 0 1
102177: PPUSH
102178: LD_INT 1000
102180: PPUSH
102181: CALL_OW 234
102185: GO 102155
102187: POP
102188: POP
// end ;
102189: PPOPN 1
102191: END
// export function hHackInvincible ; var i ; begin
102192: LD_INT 0
102194: PPUSH
102195: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
102196: LD_ADDR_VAR 0 2
102200: PUSH
102201: LD_INT 2
102203: PUSH
102204: LD_INT 21
102206: PUSH
102207: LD_INT 1
102209: PUSH
102210: EMPTY
102211: LIST
102212: LIST
102213: PUSH
102214: LD_INT 21
102216: PUSH
102217: LD_INT 2
102219: PUSH
102220: EMPTY
102221: LIST
102222: LIST
102223: PUSH
102224: EMPTY
102225: LIST
102226: LIST
102227: LIST
102228: PPUSH
102229: CALL_OW 69
102233: PUSH
102234: FOR_IN
102235: IFFALSE 102296
// if IsSelected ( i ) then
102237: LD_VAR 0 2
102241: PPUSH
102242: CALL_OW 306
102246: IFFALSE 102294
// begin if i in hInvincible then
102248: LD_VAR 0 2
102252: PUSH
102253: LD_EXP 148
102257: IN
102258: IFFALSE 102278
// hInvincible := hInvincible diff i else
102260: LD_ADDR_EXP 148
102264: PUSH
102265: LD_EXP 148
102269: PUSH
102270: LD_VAR 0 2
102274: DIFF
102275: ST_TO_ADDR
102276: GO 102294
// hInvincible := hInvincible union i ;
102278: LD_ADDR_EXP 148
102282: PUSH
102283: LD_EXP 148
102287: PUSH
102288: LD_VAR 0 2
102292: UNION
102293: ST_TO_ADDR
// end ;
102294: GO 102234
102296: POP
102297: POP
// end ;
102298: LD_VAR 0 1
102302: RET
// export function hHackInvisible ; var i , j ; begin
102303: LD_INT 0
102305: PPUSH
102306: PPUSH
102307: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
102308: LD_ADDR_VAR 0 2
102312: PUSH
102313: LD_INT 21
102315: PUSH
102316: LD_INT 1
102318: PUSH
102319: EMPTY
102320: LIST
102321: LIST
102322: PPUSH
102323: CALL_OW 69
102327: PUSH
102328: FOR_IN
102329: IFFALSE 102353
// if IsSelected ( i ) then
102331: LD_VAR 0 2
102335: PPUSH
102336: CALL_OW 306
102340: IFFALSE 102351
// ComForceInvisible ( i ) ;
102342: LD_VAR 0 2
102346: PPUSH
102347: CALL_OW 496
102351: GO 102328
102353: POP
102354: POP
// end ;
102355: LD_VAR 0 1
102359: RET
// export function hHackChangeYourSide ; begin
102360: LD_INT 0
102362: PPUSH
// if your_side = 8 then
102363: LD_OWVAR 2
102367: PUSH
102368: LD_INT 8
102370: EQUAL
102371: IFFALSE 102383
// your_side := 0 else
102373: LD_ADDR_OWVAR 2
102377: PUSH
102378: LD_INT 0
102380: ST_TO_ADDR
102381: GO 102397
// your_side := your_side + 1 ;
102383: LD_ADDR_OWVAR 2
102387: PUSH
102388: LD_OWVAR 2
102392: PUSH
102393: LD_INT 1
102395: PLUS
102396: ST_TO_ADDR
// end ;
102397: LD_VAR 0 1
102401: RET
// export function hHackChangeUnitSide ; var i , j ; begin
102402: LD_INT 0
102404: PPUSH
102405: PPUSH
102406: PPUSH
// for i in all_units do
102407: LD_ADDR_VAR 0 2
102411: PUSH
102412: LD_OWVAR 3
102416: PUSH
102417: FOR_IN
102418: IFFALSE 102496
// if IsSelected ( i ) then
102420: LD_VAR 0 2
102424: PPUSH
102425: CALL_OW 306
102429: IFFALSE 102494
// begin j := GetSide ( i ) ;
102431: LD_ADDR_VAR 0 3
102435: PUSH
102436: LD_VAR 0 2
102440: PPUSH
102441: CALL_OW 255
102445: ST_TO_ADDR
// if j = 8 then
102446: LD_VAR 0 3
102450: PUSH
102451: LD_INT 8
102453: EQUAL
102454: IFFALSE 102466
// j := 0 else
102456: LD_ADDR_VAR 0 3
102460: PUSH
102461: LD_INT 0
102463: ST_TO_ADDR
102464: GO 102480
// j := j + 1 ;
102466: LD_ADDR_VAR 0 3
102470: PUSH
102471: LD_VAR 0 3
102475: PUSH
102476: LD_INT 1
102478: PLUS
102479: ST_TO_ADDR
// SetSide ( i , j ) ;
102480: LD_VAR 0 2
102484: PPUSH
102485: LD_VAR 0 3
102489: PPUSH
102490: CALL_OW 235
// end ;
102494: GO 102417
102496: POP
102497: POP
// end ;
102498: LD_VAR 0 1
102502: RET
// export function hHackFog ; begin
102503: LD_INT 0
102505: PPUSH
// FogOff ( true ) ;
102506: LD_INT 1
102508: PPUSH
102509: CALL_OW 344
// end ;
102513: LD_VAR 0 1
102517: RET
// export function hHackTeleport ( unit , x , y ) ; begin
102518: LD_INT 0
102520: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
102521: LD_VAR 0 1
102525: PPUSH
102526: LD_VAR 0 2
102530: PPUSH
102531: LD_VAR 0 3
102535: PPUSH
102536: LD_INT 1
102538: PPUSH
102539: LD_INT 1
102541: PPUSH
102542: CALL_OW 483
// CenterOnXY ( x , y ) ;
102546: LD_VAR 0 2
102550: PPUSH
102551: LD_VAR 0 3
102555: PPUSH
102556: CALL_OW 84
// end ; end_of_file
102560: LD_VAR 0 4
102564: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
102565: LD_INT 0
102567: PPUSH
102568: PPUSH
102569: PPUSH
102570: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
102571: LD_VAR 0 1
102575: PPUSH
102576: CALL_OW 264
102580: PUSH
102581: LD_EXP 33
102585: EQUAL
102586: IFFALSE 102658
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
102588: LD_INT 68
102590: PPUSH
102591: LD_VAR 0 1
102595: PPUSH
102596: CALL_OW 255
102600: PPUSH
102601: CALL_OW 321
102605: PUSH
102606: LD_INT 2
102608: EQUAL
102609: IFFALSE 102621
// eff := 70 else
102611: LD_ADDR_VAR 0 4
102615: PUSH
102616: LD_INT 70
102618: ST_TO_ADDR
102619: GO 102629
// eff := 30 ;
102621: LD_ADDR_VAR 0 4
102625: PUSH
102626: LD_INT 30
102628: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
102629: LD_VAR 0 1
102633: PPUSH
102634: CALL_OW 250
102638: PPUSH
102639: LD_VAR 0 1
102643: PPUSH
102644: CALL_OW 251
102648: PPUSH
102649: LD_VAR 0 4
102653: PPUSH
102654: CALL_OW 495
// end ; end ;
102658: LD_VAR 0 2
102662: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
102663: LD_INT 0
102665: PPUSH
// end ;
102666: LD_VAR 0 4
102670: RET
// export function SOS_Command ( cmd ) ; begin
102671: LD_INT 0
102673: PPUSH
// end ;
102674: LD_VAR 0 2
102678: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
102679: LD_INT 0
102681: PPUSH
// if cmd = 121 then
102682: LD_VAR 0 1
102686: PUSH
102687: LD_INT 121
102689: EQUAL
102690: IFFALSE 102692
// end ;
102692: LD_VAR 0 6
102696: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
102697: LD_INT 0
102699: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
102700: LD_VAR 0 1
102704: PUSH
102705: LD_INT 250
102707: EQUAL
102708: PUSH
102709: LD_VAR 0 2
102713: PPUSH
102714: CALL_OW 264
102718: PUSH
102719: LD_EXP 36
102723: EQUAL
102724: AND
102725: IFFALSE 102746
// MinerPlaceMine ( unit , x , y ) ;
102727: LD_VAR 0 2
102731: PPUSH
102732: LD_VAR 0 4
102736: PPUSH
102737: LD_VAR 0 5
102741: PPUSH
102742: CALL 105095 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
102746: LD_VAR 0 1
102750: PUSH
102751: LD_INT 251
102753: EQUAL
102754: PUSH
102755: LD_VAR 0 2
102759: PPUSH
102760: CALL_OW 264
102764: PUSH
102765: LD_EXP 36
102769: EQUAL
102770: AND
102771: IFFALSE 102792
// MinerDetonateMine ( unit , x , y ) ;
102773: LD_VAR 0 2
102777: PPUSH
102778: LD_VAR 0 4
102782: PPUSH
102783: LD_VAR 0 5
102787: PPUSH
102788: CALL 105372 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
102792: LD_VAR 0 1
102796: PUSH
102797: LD_INT 252
102799: EQUAL
102800: PUSH
102801: LD_VAR 0 2
102805: PPUSH
102806: CALL_OW 264
102810: PUSH
102811: LD_EXP 36
102815: EQUAL
102816: AND
102817: IFFALSE 102838
// MinerCreateMinefield ( unit , x , y ) ;
102819: LD_VAR 0 2
102823: PPUSH
102824: LD_VAR 0 4
102828: PPUSH
102829: LD_VAR 0 5
102833: PPUSH
102834: CALL 105789 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
102838: LD_VAR 0 1
102842: PUSH
102843: LD_INT 253
102845: EQUAL
102846: PUSH
102847: LD_VAR 0 2
102851: PPUSH
102852: CALL_OW 257
102856: PUSH
102857: LD_INT 5
102859: EQUAL
102860: AND
102861: IFFALSE 102882
// ComBinocular ( unit , x , y ) ;
102863: LD_VAR 0 2
102867: PPUSH
102868: LD_VAR 0 4
102872: PPUSH
102873: LD_VAR 0 5
102877: PPUSH
102878: CALL 106160 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
102882: LD_VAR 0 1
102886: PUSH
102887: LD_INT 254
102889: EQUAL
102890: PUSH
102891: LD_VAR 0 2
102895: PPUSH
102896: CALL_OW 264
102900: PUSH
102901: LD_EXP 31
102905: EQUAL
102906: AND
102907: PUSH
102908: LD_VAR 0 3
102912: PPUSH
102913: CALL_OW 263
102917: PUSH
102918: LD_INT 3
102920: EQUAL
102921: AND
102922: IFFALSE 102938
// HackDestroyVehicle ( unit , selectedUnit ) ;
102924: LD_VAR 0 2
102928: PPUSH
102929: LD_VAR 0 3
102933: PPUSH
102934: CALL 104455 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
102938: LD_VAR 0 1
102942: PUSH
102943: LD_INT 255
102945: EQUAL
102946: PUSH
102947: LD_VAR 0 2
102951: PPUSH
102952: CALL_OW 264
102956: PUSH
102957: LD_INT 14
102959: PUSH
102960: LD_INT 53
102962: PUSH
102963: EMPTY
102964: LIST
102965: LIST
102966: IN
102967: AND
102968: PUSH
102969: LD_VAR 0 4
102973: PPUSH
102974: LD_VAR 0 5
102978: PPUSH
102979: CALL_OW 488
102983: AND
102984: IFFALSE 103008
// CutTreeXYR ( unit , x , y , 12 ) ;
102986: LD_VAR 0 2
102990: PPUSH
102991: LD_VAR 0 4
102995: PPUSH
102996: LD_VAR 0 5
103000: PPUSH
103001: LD_INT 12
103003: PPUSH
103004: CALL 103021 0 4
// end ;
103008: LD_VAR 0 6
103012: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
103013: LD_INT 0
103015: PPUSH
// end ;
103016: LD_VAR 0 4
103020: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
103021: LD_INT 0
103023: PPUSH
103024: PPUSH
103025: PPUSH
103026: PPUSH
103027: PPUSH
103028: PPUSH
103029: PPUSH
103030: PPUSH
103031: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
103032: LD_VAR 0 1
103036: NOT
103037: PUSH
103038: LD_VAR 0 2
103042: PPUSH
103043: LD_VAR 0 3
103047: PPUSH
103048: CALL_OW 488
103052: NOT
103053: OR
103054: PUSH
103055: LD_VAR 0 4
103059: NOT
103060: OR
103061: IFFALSE 103065
// exit ;
103063: GO 103405
// list := [ ] ;
103065: LD_ADDR_VAR 0 13
103069: PUSH
103070: EMPTY
103071: ST_TO_ADDR
// if x - r < 0 then
103072: LD_VAR 0 2
103076: PUSH
103077: LD_VAR 0 4
103081: MINUS
103082: PUSH
103083: LD_INT 0
103085: LESS
103086: IFFALSE 103098
// min_x := 0 else
103088: LD_ADDR_VAR 0 7
103092: PUSH
103093: LD_INT 0
103095: ST_TO_ADDR
103096: GO 103114
// min_x := x - r ;
103098: LD_ADDR_VAR 0 7
103102: PUSH
103103: LD_VAR 0 2
103107: PUSH
103108: LD_VAR 0 4
103112: MINUS
103113: ST_TO_ADDR
// if y - r < 0 then
103114: LD_VAR 0 3
103118: PUSH
103119: LD_VAR 0 4
103123: MINUS
103124: PUSH
103125: LD_INT 0
103127: LESS
103128: IFFALSE 103140
// min_y := 0 else
103130: LD_ADDR_VAR 0 8
103134: PUSH
103135: LD_INT 0
103137: ST_TO_ADDR
103138: GO 103156
// min_y := y - r ;
103140: LD_ADDR_VAR 0 8
103144: PUSH
103145: LD_VAR 0 3
103149: PUSH
103150: LD_VAR 0 4
103154: MINUS
103155: ST_TO_ADDR
// max_x := x + r ;
103156: LD_ADDR_VAR 0 9
103160: PUSH
103161: LD_VAR 0 2
103165: PUSH
103166: LD_VAR 0 4
103170: PLUS
103171: ST_TO_ADDR
// max_y := y + r ;
103172: LD_ADDR_VAR 0 10
103176: PUSH
103177: LD_VAR 0 3
103181: PUSH
103182: LD_VAR 0 4
103186: PLUS
103187: ST_TO_ADDR
// for _x = min_x to max_x do
103188: LD_ADDR_VAR 0 11
103192: PUSH
103193: DOUBLE
103194: LD_VAR 0 7
103198: DEC
103199: ST_TO_ADDR
103200: LD_VAR 0 9
103204: PUSH
103205: FOR_TO
103206: IFFALSE 103323
// for _y = min_y to max_y do
103208: LD_ADDR_VAR 0 12
103212: PUSH
103213: DOUBLE
103214: LD_VAR 0 8
103218: DEC
103219: ST_TO_ADDR
103220: LD_VAR 0 10
103224: PUSH
103225: FOR_TO
103226: IFFALSE 103319
// begin if not ValidHex ( _x , _y ) then
103228: LD_VAR 0 11
103232: PPUSH
103233: LD_VAR 0 12
103237: PPUSH
103238: CALL_OW 488
103242: NOT
103243: IFFALSE 103247
// continue ;
103245: GO 103225
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
103247: LD_VAR 0 11
103251: PPUSH
103252: LD_VAR 0 12
103256: PPUSH
103257: CALL_OW 351
103261: PUSH
103262: LD_VAR 0 11
103266: PPUSH
103267: LD_VAR 0 12
103271: PPUSH
103272: CALL_OW 554
103276: AND
103277: IFFALSE 103317
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
103279: LD_ADDR_VAR 0 13
103283: PUSH
103284: LD_VAR 0 13
103288: PPUSH
103289: LD_VAR 0 13
103293: PUSH
103294: LD_INT 1
103296: PLUS
103297: PPUSH
103298: LD_VAR 0 11
103302: PUSH
103303: LD_VAR 0 12
103307: PUSH
103308: EMPTY
103309: LIST
103310: LIST
103311: PPUSH
103312: CALL_OW 2
103316: ST_TO_ADDR
// end ;
103317: GO 103225
103319: POP
103320: POP
103321: GO 103205
103323: POP
103324: POP
// if not list then
103325: LD_VAR 0 13
103329: NOT
103330: IFFALSE 103334
// exit ;
103332: GO 103405
// for i in list do
103334: LD_ADDR_VAR 0 6
103338: PUSH
103339: LD_VAR 0 13
103343: PUSH
103344: FOR_IN
103345: IFFALSE 103403
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
103347: LD_VAR 0 1
103351: PPUSH
103352: LD_STRING M
103354: PUSH
103355: LD_VAR 0 6
103359: PUSH
103360: LD_INT 1
103362: ARRAY
103363: PUSH
103364: LD_VAR 0 6
103368: PUSH
103369: LD_INT 2
103371: ARRAY
103372: PUSH
103373: LD_INT 0
103375: PUSH
103376: LD_INT 0
103378: PUSH
103379: LD_INT 0
103381: PUSH
103382: LD_INT 0
103384: PUSH
103385: EMPTY
103386: LIST
103387: LIST
103388: LIST
103389: LIST
103390: LIST
103391: LIST
103392: LIST
103393: PUSH
103394: EMPTY
103395: LIST
103396: PPUSH
103397: CALL_OW 447
103401: GO 103344
103403: POP
103404: POP
// end ;
103405: LD_VAR 0 5
103409: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
103410: LD_EXP 151
103414: NOT
103415: IFFALSE 103465
103417: GO 103419
103419: DISABLE
// begin initHack := true ;
103420: LD_ADDR_EXP 151
103424: PUSH
103425: LD_INT 1
103427: ST_TO_ADDR
// hackTanks := [ ] ;
103428: LD_ADDR_EXP 152
103432: PUSH
103433: EMPTY
103434: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
103435: LD_ADDR_EXP 153
103439: PUSH
103440: EMPTY
103441: ST_TO_ADDR
// hackLimit := 3 ;
103442: LD_ADDR_EXP 154
103446: PUSH
103447: LD_INT 3
103449: ST_TO_ADDR
// hackDist := 12 ;
103450: LD_ADDR_EXP 155
103454: PUSH
103455: LD_INT 12
103457: ST_TO_ADDR
// hackCounter := [ ] ;
103458: LD_ADDR_EXP 156
103462: PUSH
103463: EMPTY
103464: ST_TO_ADDR
// end ;
103465: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
103466: LD_EXP 151
103470: PUSH
103471: LD_INT 34
103473: PUSH
103474: LD_EXP 31
103478: PUSH
103479: EMPTY
103480: LIST
103481: LIST
103482: PPUSH
103483: CALL_OW 69
103487: AND
103488: IFFALSE 103743
103490: GO 103492
103492: DISABLE
103493: LD_INT 0
103495: PPUSH
103496: PPUSH
// begin enable ;
103497: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
103498: LD_ADDR_VAR 0 1
103502: PUSH
103503: LD_INT 34
103505: PUSH
103506: LD_EXP 31
103510: PUSH
103511: EMPTY
103512: LIST
103513: LIST
103514: PPUSH
103515: CALL_OW 69
103519: PUSH
103520: FOR_IN
103521: IFFALSE 103741
// begin if not i in hackTanks then
103523: LD_VAR 0 1
103527: PUSH
103528: LD_EXP 152
103532: IN
103533: NOT
103534: IFFALSE 103617
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
103536: LD_ADDR_EXP 152
103540: PUSH
103541: LD_EXP 152
103545: PPUSH
103546: LD_EXP 152
103550: PUSH
103551: LD_INT 1
103553: PLUS
103554: PPUSH
103555: LD_VAR 0 1
103559: PPUSH
103560: CALL_OW 1
103564: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
103565: LD_ADDR_EXP 153
103569: PUSH
103570: LD_EXP 153
103574: PPUSH
103575: LD_EXP 153
103579: PUSH
103580: LD_INT 1
103582: PLUS
103583: PPUSH
103584: EMPTY
103585: PPUSH
103586: CALL_OW 1
103590: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
103591: LD_ADDR_EXP 156
103595: PUSH
103596: LD_EXP 156
103600: PPUSH
103601: LD_EXP 156
103605: PUSH
103606: LD_INT 1
103608: PLUS
103609: PPUSH
103610: EMPTY
103611: PPUSH
103612: CALL_OW 1
103616: ST_TO_ADDR
// end ; if not IsOk ( i ) then
103617: LD_VAR 0 1
103621: PPUSH
103622: CALL_OW 302
103626: NOT
103627: IFFALSE 103640
// begin HackUnlinkAll ( i ) ;
103629: LD_VAR 0 1
103633: PPUSH
103634: CALL 103746 0 1
// continue ;
103638: GO 103520
// end ; HackCheckCapturedStatus ( i ) ;
103640: LD_VAR 0 1
103644: PPUSH
103645: CALL 104189 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
103649: LD_ADDR_VAR 0 2
103653: PUSH
103654: LD_INT 81
103656: PUSH
103657: LD_VAR 0 1
103661: PPUSH
103662: CALL_OW 255
103666: PUSH
103667: EMPTY
103668: LIST
103669: LIST
103670: PUSH
103671: LD_INT 33
103673: PUSH
103674: LD_INT 3
103676: PUSH
103677: EMPTY
103678: LIST
103679: LIST
103680: PUSH
103681: LD_INT 91
103683: PUSH
103684: LD_VAR 0 1
103688: PUSH
103689: LD_EXP 155
103693: PUSH
103694: EMPTY
103695: LIST
103696: LIST
103697: LIST
103698: PUSH
103699: LD_INT 50
103701: PUSH
103702: EMPTY
103703: LIST
103704: PUSH
103705: EMPTY
103706: LIST
103707: LIST
103708: LIST
103709: LIST
103710: PPUSH
103711: CALL_OW 69
103715: ST_TO_ADDR
// if not tmp then
103716: LD_VAR 0 2
103720: NOT
103721: IFFALSE 103725
// continue ;
103723: GO 103520
// HackLink ( i , tmp ) ;
103725: LD_VAR 0 1
103729: PPUSH
103730: LD_VAR 0 2
103734: PPUSH
103735: CALL 103882 0 2
// end ;
103739: GO 103520
103741: POP
103742: POP
// end ;
103743: PPOPN 2
103745: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
103746: LD_INT 0
103748: PPUSH
103749: PPUSH
103750: PPUSH
// if not hack in hackTanks then
103751: LD_VAR 0 1
103755: PUSH
103756: LD_EXP 152
103760: IN
103761: NOT
103762: IFFALSE 103766
// exit ;
103764: GO 103877
// index := GetElementIndex ( hackTanks , hack ) ;
103766: LD_ADDR_VAR 0 4
103770: PUSH
103771: LD_EXP 152
103775: PPUSH
103776: LD_VAR 0 1
103780: PPUSH
103781: CALL 24643 0 2
103785: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
103786: LD_EXP 153
103790: PUSH
103791: LD_VAR 0 4
103795: ARRAY
103796: IFFALSE 103877
// begin for i in hackTanksCaptured [ index ] do
103798: LD_ADDR_VAR 0 3
103802: PUSH
103803: LD_EXP 153
103807: PUSH
103808: LD_VAR 0 4
103812: ARRAY
103813: PUSH
103814: FOR_IN
103815: IFFALSE 103841
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
103817: LD_VAR 0 3
103821: PUSH
103822: LD_INT 1
103824: ARRAY
103825: PPUSH
103826: LD_VAR 0 3
103830: PUSH
103831: LD_INT 2
103833: ARRAY
103834: PPUSH
103835: CALL_OW 235
103839: GO 103814
103841: POP
103842: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
103843: LD_ADDR_EXP 153
103847: PUSH
103848: LD_EXP 153
103852: PPUSH
103853: LD_VAR 0 4
103857: PPUSH
103858: EMPTY
103859: PPUSH
103860: CALL_OW 1
103864: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
103865: LD_VAR 0 1
103869: PPUSH
103870: LD_INT 0
103872: PPUSH
103873: CALL_OW 505
// end ; end ;
103877: LD_VAR 0 2
103881: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
103882: LD_INT 0
103884: PPUSH
103885: PPUSH
103886: PPUSH
// if not hack in hackTanks or not vehicles then
103887: LD_VAR 0 1
103891: PUSH
103892: LD_EXP 152
103896: IN
103897: NOT
103898: PUSH
103899: LD_VAR 0 2
103903: NOT
103904: OR
103905: IFFALSE 103909
// exit ;
103907: GO 104184
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
103909: LD_ADDR_VAR 0 2
103913: PUSH
103914: LD_VAR 0 1
103918: PPUSH
103919: LD_VAR 0 2
103923: PPUSH
103924: LD_INT 1
103926: PPUSH
103927: LD_INT 1
103929: PPUSH
103930: CALL 25293 0 4
103934: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
103935: LD_ADDR_VAR 0 5
103939: PUSH
103940: LD_EXP 152
103944: PPUSH
103945: LD_VAR 0 1
103949: PPUSH
103950: CALL 24643 0 2
103954: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
103955: LD_EXP 153
103959: PUSH
103960: LD_VAR 0 5
103964: ARRAY
103965: PUSH
103966: LD_EXP 154
103970: LESS
103971: IFFALSE 104160
// begin for i := 1 to vehicles do
103973: LD_ADDR_VAR 0 4
103977: PUSH
103978: DOUBLE
103979: LD_INT 1
103981: DEC
103982: ST_TO_ADDR
103983: LD_VAR 0 2
103987: PUSH
103988: FOR_TO
103989: IFFALSE 104158
// begin if hackTanksCaptured [ index ] = hackLimit then
103991: LD_EXP 153
103995: PUSH
103996: LD_VAR 0 5
104000: ARRAY
104001: PUSH
104002: LD_EXP 154
104006: EQUAL
104007: IFFALSE 104011
// break ;
104009: GO 104158
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
104011: LD_ADDR_EXP 156
104015: PUSH
104016: LD_EXP 156
104020: PPUSH
104021: LD_VAR 0 5
104025: PPUSH
104026: LD_EXP 156
104030: PUSH
104031: LD_VAR 0 5
104035: ARRAY
104036: PUSH
104037: LD_INT 1
104039: PLUS
104040: PPUSH
104041: CALL_OW 1
104045: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
104046: LD_ADDR_EXP 153
104050: PUSH
104051: LD_EXP 153
104055: PPUSH
104056: LD_VAR 0 5
104060: PUSH
104061: LD_EXP 153
104065: PUSH
104066: LD_VAR 0 5
104070: ARRAY
104071: PUSH
104072: LD_INT 1
104074: PLUS
104075: PUSH
104076: EMPTY
104077: LIST
104078: LIST
104079: PPUSH
104080: LD_VAR 0 2
104084: PUSH
104085: LD_VAR 0 4
104089: ARRAY
104090: PUSH
104091: LD_VAR 0 2
104095: PUSH
104096: LD_VAR 0 4
104100: ARRAY
104101: PPUSH
104102: CALL_OW 255
104106: PUSH
104107: EMPTY
104108: LIST
104109: LIST
104110: PPUSH
104111: CALL 24858 0 3
104115: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
104116: LD_VAR 0 2
104120: PUSH
104121: LD_VAR 0 4
104125: ARRAY
104126: PPUSH
104127: LD_VAR 0 1
104131: PPUSH
104132: CALL_OW 255
104136: PPUSH
104137: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
104141: LD_VAR 0 2
104145: PUSH
104146: LD_VAR 0 4
104150: ARRAY
104151: PPUSH
104152: CALL_OW 141
// end ;
104156: GO 103988
104158: POP
104159: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
104160: LD_VAR 0 1
104164: PPUSH
104165: LD_EXP 153
104169: PUSH
104170: LD_VAR 0 5
104174: ARRAY
104175: PUSH
104176: LD_INT 0
104178: PLUS
104179: PPUSH
104180: CALL_OW 505
// end ;
104184: LD_VAR 0 3
104188: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
104189: LD_INT 0
104191: PPUSH
104192: PPUSH
104193: PPUSH
104194: PPUSH
// if not hack in hackTanks then
104195: LD_VAR 0 1
104199: PUSH
104200: LD_EXP 152
104204: IN
104205: NOT
104206: IFFALSE 104210
// exit ;
104208: GO 104450
// index := GetElementIndex ( hackTanks , hack ) ;
104210: LD_ADDR_VAR 0 4
104214: PUSH
104215: LD_EXP 152
104219: PPUSH
104220: LD_VAR 0 1
104224: PPUSH
104225: CALL 24643 0 2
104229: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
104230: LD_ADDR_VAR 0 3
104234: PUSH
104235: DOUBLE
104236: LD_EXP 153
104240: PUSH
104241: LD_VAR 0 4
104245: ARRAY
104246: INC
104247: ST_TO_ADDR
104248: LD_INT 1
104250: PUSH
104251: FOR_DOWNTO
104252: IFFALSE 104424
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
104254: LD_ADDR_VAR 0 5
104258: PUSH
104259: LD_EXP 153
104263: PUSH
104264: LD_VAR 0 4
104268: ARRAY
104269: PUSH
104270: LD_VAR 0 3
104274: ARRAY
104275: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
104276: LD_VAR 0 5
104280: PUSH
104281: LD_INT 1
104283: ARRAY
104284: PPUSH
104285: CALL_OW 302
104289: NOT
104290: PUSH
104291: LD_VAR 0 5
104295: PUSH
104296: LD_INT 1
104298: ARRAY
104299: PPUSH
104300: CALL_OW 255
104304: PUSH
104305: LD_VAR 0 1
104309: PPUSH
104310: CALL_OW 255
104314: NONEQUAL
104315: OR
104316: IFFALSE 104422
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
104318: LD_VAR 0 5
104322: PUSH
104323: LD_INT 1
104325: ARRAY
104326: PPUSH
104327: CALL_OW 305
104331: PUSH
104332: LD_VAR 0 5
104336: PUSH
104337: LD_INT 1
104339: ARRAY
104340: PPUSH
104341: CALL_OW 255
104345: PUSH
104346: LD_VAR 0 1
104350: PPUSH
104351: CALL_OW 255
104355: EQUAL
104356: AND
104357: IFFALSE 104381
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
104359: LD_VAR 0 5
104363: PUSH
104364: LD_INT 1
104366: ARRAY
104367: PPUSH
104368: LD_VAR 0 5
104372: PUSH
104373: LD_INT 2
104375: ARRAY
104376: PPUSH
104377: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
104381: LD_ADDR_EXP 153
104385: PUSH
104386: LD_EXP 153
104390: PPUSH
104391: LD_VAR 0 4
104395: PPUSH
104396: LD_EXP 153
104400: PUSH
104401: LD_VAR 0 4
104405: ARRAY
104406: PPUSH
104407: LD_VAR 0 3
104411: PPUSH
104412: CALL_OW 3
104416: PPUSH
104417: CALL_OW 1
104421: ST_TO_ADDR
// end ; end ;
104422: GO 104251
104424: POP
104425: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
104426: LD_VAR 0 1
104430: PPUSH
104431: LD_EXP 153
104435: PUSH
104436: LD_VAR 0 4
104440: ARRAY
104441: PUSH
104442: LD_INT 0
104444: PLUS
104445: PPUSH
104446: CALL_OW 505
// end ;
104450: LD_VAR 0 2
104454: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
104455: LD_INT 0
104457: PPUSH
104458: PPUSH
104459: PPUSH
104460: PPUSH
// if not hack in hackTanks then
104461: LD_VAR 0 1
104465: PUSH
104466: LD_EXP 152
104470: IN
104471: NOT
104472: IFFALSE 104476
// exit ;
104474: GO 104561
// index := GetElementIndex ( hackTanks , hack ) ;
104476: LD_ADDR_VAR 0 5
104480: PUSH
104481: LD_EXP 152
104485: PPUSH
104486: LD_VAR 0 1
104490: PPUSH
104491: CALL 24643 0 2
104495: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
104496: LD_ADDR_VAR 0 4
104500: PUSH
104501: DOUBLE
104502: LD_INT 1
104504: DEC
104505: ST_TO_ADDR
104506: LD_EXP 153
104510: PUSH
104511: LD_VAR 0 5
104515: ARRAY
104516: PUSH
104517: FOR_TO
104518: IFFALSE 104559
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
104520: LD_EXP 153
104524: PUSH
104525: LD_VAR 0 5
104529: ARRAY
104530: PUSH
104531: LD_VAR 0 4
104535: ARRAY
104536: PUSH
104537: LD_INT 1
104539: ARRAY
104540: PUSH
104541: LD_VAR 0 2
104545: EQUAL
104546: IFFALSE 104557
// KillUnit ( vehicle ) ;
104548: LD_VAR 0 2
104552: PPUSH
104553: CALL_OW 66
104557: GO 104517
104559: POP
104560: POP
// end ;
104561: LD_VAR 0 3
104565: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
104566: LD_EXP 157
104570: NOT
104571: IFFALSE 104606
104573: GO 104575
104575: DISABLE
// begin initMiner := true ;
104576: LD_ADDR_EXP 157
104580: PUSH
104581: LD_INT 1
104583: ST_TO_ADDR
// minersList := [ ] ;
104584: LD_ADDR_EXP 158
104588: PUSH
104589: EMPTY
104590: ST_TO_ADDR
// minerMinesList := [ ] ;
104591: LD_ADDR_EXP 159
104595: PUSH
104596: EMPTY
104597: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
104598: LD_ADDR_EXP 160
104602: PUSH
104603: LD_INT 5
104605: ST_TO_ADDR
// end ;
104606: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
104607: LD_EXP 157
104611: PUSH
104612: LD_INT 34
104614: PUSH
104615: LD_EXP 36
104619: PUSH
104620: EMPTY
104621: LIST
104622: LIST
104623: PPUSH
104624: CALL_OW 69
104628: AND
104629: IFFALSE 105092
104631: GO 104633
104633: DISABLE
104634: LD_INT 0
104636: PPUSH
104637: PPUSH
104638: PPUSH
104639: PPUSH
// begin enable ;
104640: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
104641: LD_ADDR_VAR 0 1
104645: PUSH
104646: LD_INT 34
104648: PUSH
104649: LD_EXP 36
104653: PUSH
104654: EMPTY
104655: LIST
104656: LIST
104657: PPUSH
104658: CALL_OW 69
104662: PUSH
104663: FOR_IN
104664: IFFALSE 104736
// begin if not i in minersList then
104666: LD_VAR 0 1
104670: PUSH
104671: LD_EXP 158
104675: IN
104676: NOT
104677: IFFALSE 104734
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
104679: LD_ADDR_EXP 158
104683: PUSH
104684: LD_EXP 158
104688: PPUSH
104689: LD_EXP 158
104693: PUSH
104694: LD_INT 1
104696: PLUS
104697: PPUSH
104698: LD_VAR 0 1
104702: PPUSH
104703: CALL_OW 1
104707: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
104708: LD_ADDR_EXP 159
104712: PUSH
104713: LD_EXP 159
104717: PPUSH
104718: LD_EXP 159
104722: PUSH
104723: LD_INT 1
104725: PLUS
104726: PPUSH
104727: EMPTY
104728: PPUSH
104729: CALL_OW 1
104733: ST_TO_ADDR
// end end ;
104734: GO 104663
104736: POP
104737: POP
// for i := minerMinesList downto 1 do
104738: LD_ADDR_VAR 0 1
104742: PUSH
104743: DOUBLE
104744: LD_EXP 159
104748: INC
104749: ST_TO_ADDR
104750: LD_INT 1
104752: PUSH
104753: FOR_DOWNTO
104754: IFFALSE 105090
// begin if IsLive ( minersList [ i ] ) then
104756: LD_EXP 158
104760: PUSH
104761: LD_VAR 0 1
104765: ARRAY
104766: PPUSH
104767: CALL_OW 300
104771: IFFALSE 104799
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
104773: LD_EXP 158
104777: PUSH
104778: LD_VAR 0 1
104782: ARRAY
104783: PPUSH
104784: LD_EXP 159
104788: PUSH
104789: LD_VAR 0 1
104793: ARRAY
104794: PPUSH
104795: CALL_OW 505
// if not minerMinesList [ i ] then
104799: LD_EXP 159
104803: PUSH
104804: LD_VAR 0 1
104808: ARRAY
104809: NOT
104810: IFFALSE 104814
// continue ;
104812: GO 104753
// for j := minerMinesList [ i ] downto 1 do
104814: LD_ADDR_VAR 0 2
104818: PUSH
104819: DOUBLE
104820: LD_EXP 159
104824: PUSH
104825: LD_VAR 0 1
104829: ARRAY
104830: INC
104831: ST_TO_ADDR
104832: LD_INT 1
104834: PUSH
104835: FOR_DOWNTO
104836: IFFALSE 105086
// begin side := GetSide ( minersList [ i ] ) ;
104838: LD_ADDR_VAR 0 3
104842: PUSH
104843: LD_EXP 158
104847: PUSH
104848: LD_VAR 0 1
104852: ARRAY
104853: PPUSH
104854: CALL_OW 255
104858: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
104859: LD_ADDR_VAR 0 4
104863: PUSH
104864: LD_EXP 159
104868: PUSH
104869: LD_VAR 0 1
104873: ARRAY
104874: PUSH
104875: LD_VAR 0 2
104879: ARRAY
104880: PUSH
104881: LD_INT 1
104883: ARRAY
104884: PPUSH
104885: LD_EXP 159
104889: PUSH
104890: LD_VAR 0 1
104894: ARRAY
104895: PUSH
104896: LD_VAR 0 2
104900: ARRAY
104901: PUSH
104902: LD_INT 2
104904: ARRAY
104905: PPUSH
104906: CALL_OW 428
104910: ST_TO_ADDR
// if not tmp then
104911: LD_VAR 0 4
104915: NOT
104916: IFFALSE 104920
// continue ;
104918: GO 104835
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
104920: LD_VAR 0 4
104924: PUSH
104925: LD_INT 81
104927: PUSH
104928: LD_VAR 0 3
104932: PUSH
104933: EMPTY
104934: LIST
104935: LIST
104936: PPUSH
104937: CALL_OW 69
104941: IN
104942: PUSH
104943: LD_EXP 159
104947: PUSH
104948: LD_VAR 0 1
104952: ARRAY
104953: PUSH
104954: LD_VAR 0 2
104958: ARRAY
104959: PUSH
104960: LD_INT 1
104962: ARRAY
104963: PPUSH
104964: LD_EXP 159
104968: PUSH
104969: LD_VAR 0 1
104973: ARRAY
104974: PUSH
104975: LD_VAR 0 2
104979: ARRAY
104980: PUSH
104981: LD_INT 2
104983: ARRAY
104984: PPUSH
104985: CALL_OW 458
104989: AND
104990: IFFALSE 105084
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
104992: LD_EXP 159
104996: PUSH
104997: LD_VAR 0 1
105001: ARRAY
105002: PUSH
105003: LD_VAR 0 2
105007: ARRAY
105008: PUSH
105009: LD_INT 1
105011: ARRAY
105012: PPUSH
105013: LD_EXP 159
105017: PUSH
105018: LD_VAR 0 1
105022: ARRAY
105023: PUSH
105024: LD_VAR 0 2
105028: ARRAY
105029: PUSH
105030: LD_INT 2
105032: ARRAY
105033: PPUSH
105034: LD_VAR 0 3
105038: PPUSH
105039: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
105043: LD_ADDR_EXP 159
105047: PUSH
105048: LD_EXP 159
105052: PPUSH
105053: LD_VAR 0 1
105057: PPUSH
105058: LD_EXP 159
105062: PUSH
105063: LD_VAR 0 1
105067: ARRAY
105068: PPUSH
105069: LD_VAR 0 2
105073: PPUSH
105074: CALL_OW 3
105078: PPUSH
105079: CALL_OW 1
105083: ST_TO_ADDR
// end ; end ;
105084: GO 104835
105086: POP
105087: POP
// end ;
105088: GO 104753
105090: POP
105091: POP
// end ;
105092: PPOPN 4
105094: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
105095: LD_INT 0
105097: PPUSH
105098: PPUSH
// result := false ;
105099: LD_ADDR_VAR 0 4
105103: PUSH
105104: LD_INT 0
105106: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
105107: LD_VAR 0 1
105111: PPUSH
105112: CALL_OW 264
105116: PUSH
105117: LD_EXP 36
105121: EQUAL
105122: NOT
105123: IFFALSE 105127
// exit ;
105125: GO 105367
// index := GetElementIndex ( minersList , unit ) ;
105127: LD_ADDR_VAR 0 5
105131: PUSH
105132: LD_EXP 158
105136: PPUSH
105137: LD_VAR 0 1
105141: PPUSH
105142: CALL 24643 0 2
105146: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
105147: LD_EXP 159
105151: PUSH
105152: LD_VAR 0 5
105156: ARRAY
105157: PUSH
105158: LD_EXP 160
105162: GREATEREQUAL
105163: IFFALSE 105167
// exit ;
105165: GO 105367
// ComMoveXY ( unit , x , y ) ;
105167: LD_VAR 0 1
105171: PPUSH
105172: LD_VAR 0 2
105176: PPUSH
105177: LD_VAR 0 3
105181: PPUSH
105182: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
105186: LD_INT 35
105188: PPUSH
105189: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
105193: LD_VAR 0 1
105197: PPUSH
105198: LD_VAR 0 2
105202: PPUSH
105203: LD_VAR 0 3
105207: PPUSH
105208: CALL 55415 0 3
105212: NOT
105213: PUSH
105214: LD_VAR 0 1
105218: PPUSH
105219: CALL_OW 314
105223: AND
105224: IFFALSE 105228
// exit ;
105226: GO 105367
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
105228: LD_VAR 0 2
105232: PPUSH
105233: LD_VAR 0 3
105237: PPUSH
105238: CALL_OW 428
105242: PUSH
105243: LD_VAR 0 1
105247: EQUAL
105248: PUSH
105249: LD_VAR 0 1
105253: PPUSH
105254: CALL_OW 314
105258: NOT
105259: AND
105260: IFFALSE 105186
// PlaySoundXY ( x , y , PlantMine ) ;
105262: LD_VAR 0 2
105266: PPUSH
105267: LD_VAR 0 3
105271: PPUSH
105272: LD_STRING PlantMine
105274: PPUSH
105275: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
105279: LD_VAR 0 2
105283: PPUSH
105284: LD_VAR 0 3
105288: PPUSH
105289: LD_VAR 0 1
105293: PPUSH
105294: CALL_OW 255
105298: PPUSH
105299: LD_INT 0
105301: PPUSH
105302: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
105306: LD_ADDR_EXP 159
105310: PUSH
105311: LD_EXP 159
105315: PPUSH
105316: LD_VAR 0 5
105320: PUSH
105321: LD_EXP 159
105325: PUSH
105326: LD_VAR 0 5
105330: ARRAY
105331: PUSH
105332: LD_INT 1
105334: PLUS
105335: PUSH
105336: EMPTY
105337: LIST
105338: LIST
105339: PPUSH
105340: LD_VAR 0 2
105344: PUSH
105345: LD_VAR 0 3
105349: PUSH
105350: EMPTY
105351: LIST
105352: LIST
105353: PPUSH
105354: CALL 24858 0 3
105358: ST_TO_ADDR
// result := true ;
105359: LD_ADDR_VAR 0 4
105363: PUSH
105364: LD_INT 1
105366: ST_TO_ADDR
// end ;
105367: LD_VAR 0 4
105371: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
105372: LD_INT 0
105374: PPUSH
105375: PPUSH
105376: PPUSH
// if not unit in minersList then
105377: LD_VAR 0 1
105381: PUSH
105382: LD_EXP 158
105386: IN
105387: NOT
105388: IFFALSE 105392
// exit ;
105390: GO 105784
// index := GetElementIndex ( minersList , unit ) ;
105392: LD_ADDR_VAR 0 6
105396: PUSH
105397: LD_EXP 158
105401: PPUSH
105402: LD_VAR 0 1
105406: PPUSH
105407: CALL 24643 0 2
105411: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
105412: LD_ADDR_VAR 0 5
105416: PUSH
105417: DOUBLE
105418: LD_EXP 159
105422: PUSH
105423: LD_VAR 0 6
105427: ARRAY
105428: INC
105429: ST_TO_ADDR
105430: LD_INT 1
105432: PUSH
105433: FOR_DOWNTO
105434: IFFALSE 105595
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
105436: LD_EXP 159
105440: PUSH
105441: LD_VAR 0 6
105445: ARRAY
105446: PUSH
105447: LD_VAR 0 5
105451: ARRAY
105452: PUSH
105453: LD_INT 1
105455: ARRAY
105456: PUSH
105457: LD_VAR 0 2
105461: EQUAL
105462: PUSH
105463: LD_EXP 159
105467: PUSH
105468: LD_VAR 0 6
105472: ARRAY
105473: PUSH
105474: LD_VAR 0 5
105478: ARRAY
105479: PUSH
105480: LD_INT 2
105482: ARRAY
105483: PUSH
105484: LD_VAR 0 3
105488: EQUAL
105489: AND
105490: IFFALSE 105593
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
105492: LD_EXP 159
105496: PUSH
105497: LD_VAR 0 6
105501: ARRAY
105502: PUSH
105503: LD_VAR 0 5
105507: ARRAY
105508: PUSH
105509: LD_INT 1
105511: ARRAY
105512: PPUSH
105513: LD_EXP 159
105517: PUSH
105518: LD_VAR 0 6
105522: ARRAY
105523: PUSH
105524: LD_VAR 0 5
105528: ARRAY
105529: PUSH
105530: LD_INT 2
105532: ARRAY
105533: PPUSH
105534: LD_VAR 0 1
105538: PPUSH
105539: CALL_OW 255
105543: PPUSH
105544: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
105548: LD_ADDR_EXP 159
105552: PUSH
105553: LD_EXP 159
105557: PPUSH
105558: LD_VAR 0 6
105562: PPUSH
105563: LD_EXP 159
105567: PUSH
105568: LD_VAR 0 6
105572: ARRAY
105573: PPUSH
105574: LD_VAR 0 5
105578: PPUSH
105579: CALL_OW 3
105583: PPUSH
105584: CALL_OW 1
105588: ST_TO_ADDR
// exit ;
105589: POP
105590: POP
105591: GO 105784
// end ; end ;
105593: GO 105433
105595: POP
105596: POP
// for i := minerMinesList [ index ] downto 1 do
105597: LD_ADDR_VAR 0 5
105601: PUSH
105602: DOUBLE
105603: LD_EXP 159
105607: PUSH
105608: LD_VAR 0 6
105612: ARRAY
105613: INC
105614: ST_TO_ADDR
105615: LD_INT 1
105617: PUSH
105618: FOR_DOWNTO
105619: IFFALSE 105782
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
105621: LD_EXP 159
105625: PUSH
105626: LD_VAR 0 6
105630: ARRAY
105631: PUSH
105632: LD_VAR 0 5
105636: ARRAY
105637: PUSH
105638: LD_INT 1
105640: ARRAY
105641: PPUSH
105642: LD_EXP 159
105646: PUSH
105647: LD_VAR 0 6
105651: ARRAY
105652: PUSH
105653: LD_VAR 0 5
105657: ARRAY
105658: PUSH
105659: LD_INT 2
105661: ARRAY
105662: PPUSH
105663: LD_VAR 0 2
105667: PPUSH
105668: LD_VAR 0 3
105672: PPUSH
105673: CALL_OW 298
105677: PUSH
105678: LD_INT 6
105680: LESS
105681: IFFALSE 105780
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
105683: LD_EXP 159
105687: PUSH
105688: LD_VAR 0 6
105692: ARRAY
105693: PUSH
105694: LD_VAR 0 5
105698: ARRAY
105699: PUSH
105700: LD_INT 1
105702: ARRAY
105703: PPUSH
105704: LD_EXP 159
105708: PUSH
105709: LD_VAR 0 6
105713: ARRAY
105714: PUSH
105715: LD_VAR 0 5
105719: ARRAY
105720: PUSH
105721: LD_INT 2
105723: ARRAY
105724: PPUSH
105725: LD_VAR 0 1
105729: PPUSH
105730: CALL_OW 255
105734: PPUSH
105735: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
105739: LD_ADDR_EXP 159
105743: PUSH
105744: LD_EXP 159
105748: PPUSH
105749: LD_VAR 0 6
105753: PPUSH
105754: LD_EXP 159
105758: PUSH
105759: LD_VAR 0 6
105763: ARRAY
105764: PPUSH
105765: LD_VAR 0 5
105769: PPUSH
105770: CALL_OW 3
105774: PPUSH
105775: CALL_OW 1
105779: ST_TO_ADDR
// end ; end ;
105780: GO 105618
105782: POP
105783: POP
// end ;
105784: LD_VAR 0 4
105788: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
105789: LD_INT 0
105791: PPUSH
105792: PPUSH
105793: PPUSH
105794: PPUSH
105795: PPUSH
105796: PPUSH
105797: PPUSH
105798: PPUSH
105799: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
105800: LD_VAR 0 1
105804: PPUSH
105805: CALL_OW 264
105809: PUSH
105810: LD_EXP 36
105814: EQUAL
105815: NOT
105816: PUSH
105817: LD_VAR 0 1
105821: PUSH
105822: LD_EXP 158
105826: IN
105827: NOT
105828: OR
105829: IFFALSE 105833
// exit ;
105831: GO 106155
// index := GetElementIndex ( minersList , unit ) ;
105833: LD_ADDR_VAR 0 6
105837: PUSH
105838: LD_EXP 158
105842: PPUSH
105843: LD_VAR 0 1
105847: PPUSH
105848: CALL 24643 0 2
105852: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
105853: LD_ADDR_VAR 0 8
105857: PUSH
105858: LD_EXP 160
105862: PUSH
105863: LD_EXP 159
105867: PUSH
105868: LD_VAR 0 6
105872: ARRAY
105873: MINUS
105874: ST_TO_ADDR
// if not minesFreeAmount then
105875: LD_VAR 0 8
105879: NOT
105880: IFFALSE 105884
// exit ;
105882: GO 106155
// tmp := [ ] ;
105884: LD_ADDR_VAR 0 7
105888: PUSH
105889: EMPTY
105890: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
105891: LD_ADDR_VAR 0 5
105895: PUSH
105896: DOUBLE
105897: LD_INT 1
105899: DEC
105900: ST_TO_ADDR
105901: LD_VAR 0 8
105905: PUSH
105906: FOR_TO
105907: IFFALSE 106102
// begin _d := rand ( 0 , 5 ) ;
105909: LD_ADDR_VAR 0 11
105913: PUSH
105914: LD_INT 0
105916: PPUSH
105917: LD_INT 5
105919: PPUSH
105920: CALL_OW 12
105924: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
105925: LD_ADDR_VAR 0 12
105929: PUSH
105930: LD_INT 2
105932: PPUSH
105933: LD_INT 6
105935: PPUSH
105936: CALL_OW 12
105940: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
105941: LD_ADDR_VAR 0 9
105945: PUSH
105946: LD_VAR 0 2
105950: PPUSH
105951: LD_VAR 0 11
105955: PPUSH
105956: LD_VAR 0 12
105960: PPUSH
105961: CALL_OW 272
105965: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
105966: LD_ADDR_VAR 0 10
105970: PUSH
105971: LD_VAR 0 3
105975: PPUSH
105976: LD_VAR 0 11
105980: PPUSH
105981: LD_VAR 0 12
105985: PPUSH
105986: CALL_OW 273
105990: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
105991: LD_VAR 0 9
105995: PPUSH
105996: LD_VAR 0 10
106000: PPUSH
106001: CALL_OW 488
106005: PUSH
106006: LD_VAR 0 9
106010: PUSH
106011: LD_VAR 0 10
106015: PUSH
106016: EMPTY
106017: LIST
106018: LIST
106019: PUSH
106020: LD_VAR 0 7
106024: IN
106025: NOT
106026: AND
106027: PUSH
106028: LD_VAR 0 9
106032: PPUSH
106033: LD_VAR 0 10
106037: PPUSH
106038: CALL_OW 458
106042: NOT
106043: AND
106044: IFFALSE 106086
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
106046: LD_ADDR_VAR 0 7
106050: PUSH
106051: LD_VAR 0 7
106055: PPUSH
106056: LD_VAR 0 7
106060: PUSH
106061: LD_INT 1
106063: PLUS
106064: PPUSH
106065: LD_VAR 0 9
106069: PUSH
106070: LD_VAR 0 10
106074: PUSH
106075: EMPTY
106076: LIST
106077: LIST
106078: PPUSH
106079: CALL_OW 1
106083: ST_TO_ADDR
106084: GO 106100
// i := i - 1 ;
106086: LD_ADDR_VAR 0 5
106090: PUSH
106091: LD_VAR 0 5
106095: PUSH
106096: LD_INT 1
106098: MINUS
106099: ST_TO_ADDR
// end ;
106100: GO 105906
106102: POP
106103: POP
// for i in tmp do
106104: LD_ADDR_VAR 0 5
106108: PUSH
106109: LD_VAR 0 7
106113: PUSH
106114: FOR_IN
106115: IFFALSE 106153
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
106117: LD_VAR 0 1
106121: PPUSH
106122: LD_VAR 0 5
106126: PUSH
106127: LD_INT 1
106129: ARRAY
106130: PPUSH
106131: LD_VAR 0 5
106135: PUSH
106136: LD_INT 2
106138: ARRAY
106139: PPUSH
106140: CALL 105095 0 3
106144: NOT
106145: IFFALSE 106151
// exit ;
106147: POP
106148: POP
106149: GO 106155
106151: GO 106114
106153: POP
106154: POP
// end ;
106155: LD_VAR 0 4
106159: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
106160: LD_INT 0
106162: PPUSH
106163: PPUSH
106164: PPUSH
106165: PPUSH
106166: PPUSH
106167: PPUSH
106168: PPUSH
// if not GetClass ( unit ) = class_sniper then
106169: LD_VAR 0 1
106173: PPUSH
106174: CALL_OW 257
106178: PUSH
106179: LD_INT 5
106181: EQUAL
106182: NOT
106183: IFFALSE 106187
// exit ;
106185: GO 106575
// dist := 8 ;
106187: LD_ADDR_VAR 0 5
106191: PUSH
106192: LD_INT 8
106194: ST_TO_ADDR
// viewRange := 12 ;
106195: LD_ADDR_VAR 0 7
106199: PUSH
106200: LD_INT 12
106202: ST_TO_ADDR
// side := GetSide ( unit ) ;
106203: LD_ADDR_VAR 0 6
106207: PUSH
106208: LD_VAR 0 1
106212: PPUSH
106213: CALL_OW 255
106217: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
106218: LD_INT 61
106220: PPUSH
106221: LD_VAR 0 6
106225: PPUSH
106226: CALL_OW 321
106230: PUSH
106231: LD_INT 2
106233: EQUAL
106234: IFFALSE 106244
// viewRange := 16 ;
106236: LD_ADDR_VAR 0 7
106240: PUSH
106241: LD_INT 16
106243: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
106244: LD_VAR 0 1
106248: PPUSH
106249: LD_VAR 0 2
106253: PPUSH
106254: LD_VAR 0 3
106258: PPUSH
106259: CALL_OW 297
106263: PUSH
106264: LD_VAR 0 5
106268: GREATER
106269: IFFALSE 106348
// begin ComMoveXY ( unit , x , y ) ;
106271: LD_VAR 0 1
106275: PPUSH
106276: LD_VAR 0 2
106280: PPUSH
106281: LD_VAR 0 3
106285: PPUSH
106286: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
106290: LD_INT 35
106292: PPUSH
106293: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
106297: LD_VAR 0 1
106301: PPUSH
106302: LD_VAR 0 2
106306: PPUSH
106307: LD_VAR 0 3
106311: PPUSH
106312: CALL 55415 0 3
106316: NOT
106317: IFFALSE 106321
// exit ;
106319: GO 106575
// until GetDistUnitXY ( unit , x , y ) < dist ;
106321: LD_VAR 0 1
106325: PPUSH
106326: LD_VAR 0 2
106330: PPUSH
106331: LD_VAR 0 3
106335: PPUSH
106336: CALL_OW 297
106340: PUSH
106341: LD_VAR 0 5
106345: LESS
106346: IFFALSE 106290
// end ; ComTurnXY ( unit , x , y ) ;
106348: LD_VAR 0 1
106352: PPUSH
106353: LD_VAR 0 2
106357: PPUSH
106358: LD_VAR 0 3
106362: PPUSH
106363: CALL_OW 118
// wait ( 5 ) ;
106367: LD_INT 5
106369: PPUSH
106370: CALL_OW 67
// _d := GetDir ( unit ) ;
106374: LD_ADDR_VAR 0 10
106378: PUSH
106379: LD_VAR 0 1
106383: PPUSH
106384: CALL_OW 254
106388: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
106389: LD_ADDR_VAR 0 8
106393: PUSH
106394: LD_VAR 0 1
106398: PPUSH
106399: CALL_OW 250
106403: PPUSH
106404: LD_VAR 0 10
106408: PPUSH
106409: LD_VAR 0 5
106413: PPUSH
106414: CALL_OW 272
106418: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
106419: LD_ADDR_VAR 0 9
106423: PUSH
106424: LD_VAR 0 1
106428: PPUSH
106429: CALL_OW 251
106433: PPUSH
106434: LD_VAR 0 10
106438: PPUSH
106439: LD_VAR 0 5
106443: PPUSH
106444: CALL_OW 273
106448: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
106449: LD_VAR 0 8
106453: PPUSH
106454: LD_VAR 0 9
106458: PPUSH
106459: CALL_OW 488
106463: NOT
106464: IFFALSE 106468
// exit ;
106466: GO 106575
// ComAnimCustom ( unit , 1 ) ;
106468: LD_VAR 0 1
106472: PPUSH
106473: LD_INT 1
106475: PPUSH
106476: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
106480: LD_VAR 0 8
106484: PPUSH
106485: LD_VAR 0 9
106489: PPUSH
106490: LD_VAR 0 6
106494: PPUSH
106495: LD_VAR 0 7
106499: PPUSH
106500: CALL_OW 330
// repeat wait ( 1 ) ;
106504: LD_INT 1
106506: PPUSH
106507: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
106511: LD_VAR 0 1
106515: PPUSH
106516: CALL_OW 316
106520: PUSH
106521: LD_VAR 0 1
106525: PPUSH
106526: CALL_OW 314
106530: OR
106531: PUSH
106532: LD_VAR 0 1
106536: PPUSH
106537: CALL_OW 302
106541: NOT
106542: OR
106543: PUSH
106544: LD_VAR 0 1
106548: PPUSH
106549: CALL_OW 301
106553: OR
106554: IFFALSE 106504
// RemoveSeeing ( _x , _y , side ) ;
106556: LD_VAR 0 8
106560: PPUSH
106561: LD_VAR 0 9
106565: PPUSH
106566: LD_VAR 0 6
106570: PPUSH
106571: CALL_OW 331
// end ; end_of_file
106575: LD_VAR 0 4
106579: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking , to_heal , healers , to_repair , repairs , empty_vehs , side ; begin
106580: LD_INT 0
106582: PPUSH
106583: PPUSH
106584: PPUSH
106585: PPUSH
106586: PPUSH
106587: PPUSH
106588: PPUSH
106589: PPUSH
106590: PPUSH
106591: PPUSH
106592: PPUSH
106593: PPUSH
106594: PPUSH
106595: PPUSH
106596: PPUSH
106597: PPUSH
106598: PPUSH
106599: PPUSH
106600: PPUSH
106601: PPUSH
106602: PPUSH
106603: PPUSH
106604: PPUSH
106605: PPUSH
106606: PPUSH
106607: PPUSH
106608: PPUSH
106609: PPUSH
106610: PPUSH
106611: PPUSH
106612: PPUSH
106613: PPUSH
106614: PPUSH
106615: PPUSH
// if not list then
106616: LD_VAR 0 1
106620: NOT
106621: IFFALSE 106625
// exit ;
106623: GO 111284
// base := list [ 1 ] ;
106625: LD_ADDR_VAR 0 3
106629: PUSH
106630: LD_VAR 0 1
106634: PUSH
106635: LD_INT 1
106637: ARRAY
106638: ST_TO_ADDR
// group := list [ 2 ] ;
106639: LD_ADDR_VAR 0 4
106643: PUSH
106644: LD_VAR 0 1
106648: PUSH
106649: LD_INT 2
106651: ARRAY
106652: ST_TO_ADDR
// path := list [ 3 ] ;
106653: LD_ADDR_VAR 0 5
106657: PUSH
106658: LD_VAR 0 1
106662: PUSH
106663: LD_INT 3
106665: ARRAY
106666: ST_TO_ADDR
// flags := list [ 4 ] ;
106667: LD_ADDR_VAR 0 6
106671: PUSH
106672: LD_VAR 0 1
106676: PUSH
106677: LD_INT 4
106679: ARRAY
106680: ST_TO_ADDR
// mined := [ ] ;
106681: LD_ADDR_VAR 0 27
106685: PUSH
106686: EMPTY
106687: ST_TO_ADDR
// bombed := [ ] ;
106688: LD_ADDR_VAR 0 28
106692: PUSH
106693: EMPTY
106694: ST_TO_ADDR
// healers := [ ] ;
106695: LD_ADDR_VAR 0 31
106699: PUSH
106700: EMPTY
106701: ST_TO_ADDR
// to_heal := [ ] ;
106702: LD_ADDR_VAR 0 30
106706: PUSH
106707: EMPTY
106708: ST_TO_ADDR
// repairs := [ ] ;
106709: LD_ADDR_VAR 0 33
106713: PUSH
106714: EMPTY
106715: ST_TO_ADDR
// to_repair := [ ] ;
106716: LD_ADDR_VAR 0 32
106720: PUSH
106721: EMPTY
106722: ST_TO_ADDR
// if not group or not path then
106723: LD_VAR 0 4
106727: NOT
106728: PUSH
106729: LD_VAR 0 5
106733: NOT
106734: OR
106735: IFFALSE 106739
// exit ;
106737: GO 111284
// side := GetSide ( group [ 1 ] ) ;
106739: LD_ADDR_VAR 0 35
106743: PUSH
106744: LD_VAR 0 4
106748: PUSH
106749: LD_INT 1
106751: ARRAY
106752: PPUSH
106753: CALL_OW 255
106757: ST_TO_ADDR
// if flags then
106758: LD_VAR 0 6
106762: IFFALSE 106906
// begin f_ignore_area := flags [ 1 ] ;
106764: LD_ADDR_VAR 0 17
106768: PUSH
106769: LD_VAR 0 6
106773: PUSH
106774: LD_INT 1
106776: ARRAY
106777: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
106778: LD_ADDR_VAR 0 18
106782: PUSH
106783: LD_VAR 0 6
106787: PUSH
106788: LD_INT 2
106790: ARRAY
106791: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
106792: LD_ADDR_VAR 0 19
106796: PUSH
106797: LD_VAR 0 6
106801: PUSH
106802: LD_INT 3
106804: ARRAY
106805: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
106806: LD_ADDR_VAR 0 20
106810: PUSH
106811: LD_VAR 0 6
106815: PUSH
106816: LD_INT 4
106818: ARRAY
106819: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
106820: LD_ADDR_VAR 0 21
106824: PUSH
106825: LD_VAR 0 6
106829: PUSH
106830: LD_INT 5
106832: ARRAY
106833: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
106834: LD_ADDR_VAR 0 22
106838: PUSH
106839: LD_VAR 0 6
106843: PUSH
106844: LD_INT 6
106846: ARRAY
106847: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
106848: LD_ADDR_VAR 0 23
106852: PUSH
106853: LD_VAR 0 6
106857: PUSH
106858: LD_INT 7
106860: ARRAY
106861: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
106862: LD_ADDR_VAR 0 24
106866: PUSH
106867: LD_VAR 0 6
106871: PUSH
106872: LD_INT 8
106874: ARRAY
106875: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
106876: LD_ADDR_VAR 0 25
106880: PUSH
106881: LD_VAR 0 6
106885: PUSH
106886: LD_INT 9
106888: ARRAY
106889: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
106890: LD_ADDR_VAR 0 26
106894: PUSH
106895: LD_VAR 0 6
106899: PUSH
106900: LD_INT 10
106902: ARRAY
106903: ST_TO_ADDR
// end else
106904: GO 106986
// begin f_ignore_area := false ;
106906: LD_ADDR_VAR 0 17
106910: PUSH
106911: LD_INT 0
106913: ST_TO_ADDR
// f_capture := false ;
106914: LD_ADDR_VAR 0 18
106918: PUSH
106919: LD_INT 0
106921: ST_TO_ADDR
// f_ignore_civ := false ;
106922: LD_ADDR_VAR 0 19
106926: PUSH
106927: LD_INT 0
106929: ST_TO_ADDR
// f_murder := false ;
106930: LD_ADDR_VAR 0 20
106934: PUSH
106935: LD_INT 0
106937: ST_TO_ADDR
// f_mines := false ;
106938: LD_ADDR_VAR 0 21
106942: PUSH
106943: LD_INT 0
106945: ST_TO_ADDR
// f_repair := false ;
106946: LD_ADDR_VAR 0 22
106950: PUSH
106951: LD_INT 0
106953: ST_TO_ADDR
// f_heal := false ;
106954: LD_ADDR_VAR 0 23
106958: PUSH
106959: LD_INT 0
106961: ST_TO_ADDR
// f_spacetime := false ;
106962: LD_ADDR_VAR 0 24
106966: PUSH
106967: LD_INT 0
106969: ST_TO_ADDR
// f_attack_depot := false ;
106970: LD_ADDR_VAR 0 25
106974: PUSH
106975: LD_INT 0
106977: ST_TO_ADDR
// f_crawl := false ;
106978: LD_ADDR_VAR 0 26
106982: PUSH
106983: LD_INT 0
106985: ST_TO_ADDR
// end ; if f_heal then
106986: LD_VAR 0 23
106990: IFFALSE 107017
// healers := UnitFilter ( group , [ f_class , 4 ] ) ;
106992: LD_ADDR_VAR 0 31
106996: PUSH
106997: LD_VAR 0 4
107001: PPUSH
107002: LD_INT 25
107004: PUSH
107005: LD_INT 4
107007: PUSH
107008: EMPTY
107009: LIST
107010: LIST
107011: PPUSH
107012: CALL_OW 72
107016: ST_TO_ADDR
// if f_repair then
107017: LD_VAR 0 22
107021: IFFALSE 107048
// repairs := UnitFilter ( group , [ f_class , 3 ] ) ;
107023: LD_ADDR_VAR 0 33
107027: PUSH
107028: LD_VAR 0 4
107032: PPUSH
107033: LD_INT 25
107035: PUSH
107036: LD_INT 3
107038: PUSH
107039: EMPTY
107040: LIST
107041: LIST
107042: PPUSH
107043: CALL_OW 72
107047: ST_TO_ADDR
// units_path := [ ] ;
107048: LD_ADDR_VAR 0 16
107052: PUSH
107053: EMPTY
107054: ST_TO_ADDR
// for i = 1 to group do
107055: LD_ADDR_VAR 0 7
107059: PUSH
107060: DOUBLE
107061: LD_INT 1
107063: DEC
107064: ST_TO_ADDR
107065: LD_VAR 0 4
107069: PUSH
107070: FOR_TO
107071: IFFALSE 107100
// units_path := Replace ( units_path , i , path ) ;
107073: LD_ADDR_VAR 0 16
107077: PUSH
107078: LD_VAR 0 16
107082: PPUSH
107083: LD_VAR 0 7
107087: PPUSH
107088: LD_VAR 0 5
107092: PPUSH
107093: CALL_OW 1
107097: ST_TO_ADDR
107098: GO 107070
107100: POP
107101: POP
// repeat for i = group downto 1 do
107102: LD_ADDR_VAR 0 7
107106: PUSH
107107: DOUBLE
107108: LD_VAR 0 4
107112: INC
107113: ST_TO_ADDR
107114: LD_INT 1
107116: PUSH
107117: FOR_DOWNTO
107118: IFFALSE 111240
// begin wait ( 5 ) ;
107120: LD_INT 5
107122: PPUSH
107123: CALL_OW 67
// tmp := [ ] ;
107127: LD_ADDR_VAR 0 14
107131: PUSH
107132: EMPTY
107133: ST_TO_ADDR
// attacking := false ;
107134: LD_ADDR_VAR 0 29
107138: PUSH
107139: LD_INT 0
107141: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
107142: LD_VAR 0 4
107146: PUSH
107147: LD_VAR 0 7
107151: ARRAY
107152: PPUSH
107153: CALL_OW 301
107157: PUSH
107158: LD_VAR 0 4
107162: PUSH
107163: LD_VAR 0 7
107167: ARRAY
107168: NOT
107169: OR
107170: IFFALSE 107279
// begin if GetType ( group [ i ] ) = unit_human then
107172: LD_VAR 0 4
107176: PUSH
107177: LD_VAR 0 7
107181: ARRAY
107182: PPUSH
107183: CALL_OW 247
107187: PUSH
107188: LD_INT 1
107190: EQUAL
107191: IFFALSE 107237
// begin to_heal := to_heal diff group [ i ] ;
107193: LD_ADDR_VAR 0 30
107197: PUSH
107198: LD_VAR 0 30
107202: PUSH
107203: LD_VAR 0 4
107207: PUSH
107208: LD_VAR 0 7
107212: ARRAY
107213: DIFF
107214: ST_TO_ADDR
// healers := healers diff group [ i ] ;
107215: LD_ADDR_VAR 0 31
107219: PUSH
107220: LD_VAR 0 31
107224: PUSH
107225: LD_VAR 0 4
107229: PUSH
107230: LD_VAR 0 7
107234: ARRAY
107235: DIFF
107236: ST_TO_ADDR
// end ; group := Delete ( group , i ) ;
107237: LD_ADDR_VAR 0 4
107241: PUSH
107242: LD_VAR 0 4
107246: PPUSH
107247: LD_VAR 0 7
107251: PPUSH
107252: CALL_OW 3
107256: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
107257: LD_ADDR_VAR 0 16
107261: PUSH
107262: LD_VAR 0 16
107266: PPUSH
107267: LD_VAR 0 7
107271: PPUSH
107272: CALL_OW 3
107276: ST_TO_ADDR
// continue ;
107277: GO 107117
// end ; if f_repair then
107279: LD_VAR 0 22
107283: IFFALSE 107772
// begin if GetType ( group [ i ] ) = unit_vehicle then
107285: LD_VAR 0 4
107289: PUSH
107290: LD_VAR 0 7
107294: ARRAY
107295: PPUSH
107296: CALL_OW 247
107300: PUSH
107301: LD_INT 2
107303: EQUAL
107304: IFFALSE 107494
// begin if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_repair then
107306: LD_VAR 0 4
107310: PUSH
107311: LD_VAR 0 7
107315: ARRAY
107316: PPUSH
107317: CALL_OW 256
107321: PUSH
107322: LD_INT 700
107324: LESS
107325: PUSH
107326: LD_VAR 0 4
107330: PUSH
107331: LD_VAR 0 7
107335: ARRAY
107336: PUSH
107337: LD_VAR 0 32
107341: IN
107342: NOT
107343: AND
107344: IFFALSE 107368
// to_repair := to_repair union group [ i ] ;
107346: LD_ADDR_VAR 0 32
107350: PUSH
107351: LD_VAR 0 32
107355: PUSH
107356: LD_VAR 0 4
107360: PUSH
107361: LD_VAR 0 7
107365: ARRAY
107366: UNION
107367: ST_TO_ADDR
// if GetLives ( group [ i ] ) = 1000 and group [ i ] in to_repair then
107368: LD_VAR 0 4
107372: PUSH
107373: LD_VAR 0 7
107377: ARRAY
107378: PPUSH
107379: CALL_OW 256
107383: PUSH
107384: LD_INT 1000
107386: EQUAL
107387: PUSH
107388: LD_VAR 0 4
107392: PUSH
107393: LD_VAR 0 7
107397: ARRAY
107398: PUSH
107399: LD_VAR 0 32
107403: IN
107404: AND
107405: IFFALSE 107429
// to_repair := to_repair diff group [ i ] ;
107407: LD_ADDR_VAR 0 32
107411: PUSH
107412: LD_VAR 0 32
107416: PUSH
107417: LD_VAR 0 4
107421: PUSH
107422: LD_VAR 0 7
107426: ARRAY
107427: DIFF
107428: ST_TO_ADDR
// if group [ i ] in to_repair then
107429: LD_VAR 0 4
107433: PUSH
107434: LD_VAR 0 7
107438: ARRAY
107439: PUSH
107440: LD_VAR 0 32
107444: IN
107445: IFFALSE 107492
// begin if not IsInArea ( group [ i ] , f_repair ) then
107447: LD_VAR 0 4
107451: PUSH
107452: LD_VAR 0 7
107456: ARRAY
107457: PPUSH
107458: LD_VAR 0 22
107462: PPUSH
107463: CALL_OW 308
107467: NOT
107468: IFFALSE 107490
// ComMoveToArea ( group [ i ] , f_repair ) ;
107470: LD_VAR 0 4
107474: PUSH
107475: LD_VAR 0 7
107479: ARRAY
107480: PPUSH
107481: LD_VAR 0 22
107485: PPUSH
107486: CALL_OW 113
// continue ;
107490: GO 107117
// end ; end else
107492: GO 107772
// if group [ i ] in repairs then
107494: LD_VAR 0 4
107498: PUSH
107499: LD_VAR 0 7
107503: ARRAY
107504: PUSH
107505: LD_VAR 0 33
107509: IN
107510: IFFALSE 107772
// begin if IsInUnit ( group [ i ] ) then
107512: LD_VAR 0 4
107516: PUSH
107517: LD_VAR 0 7
107521: ARRAY
107522: PPUSH
107523: CALL_OW 310
107527: IFFALSE 107595
// begin z := IsInUnit ( group [ i ] ) ;
107529: LD_ADDR_VAR 0 13
107533: PUSH
107534: LD_VAR 0 4
107538: PUSH
107539: LD_VAR 0 7
107543: ARRAY
107544: PPUSH
107545: CALL_OW 310
107549: ST_TO_ADDR
// if z in to_repair and IsInArea ( z , f_repair ) then
107550: LD_VAR 0 13
107554: PUSH
107555: LD_VAR 0 32
107559: IN
107560: PUSH
107561: LD_VAR 0 13
107565: PPUSH
107566: LD_VAR 0 22
107570: PPUSH
107571: CALL_OW 308
107575: AND
107576: IFFALSE 107593
// ComExitVehicle ( group [ i ] ) ;
107578: LD_VAR 0 4
107582: PUSH
107583: LD_VAR 0 7
107587: ARRAY
107588: PPUSH
107589: CALL_OW 121
// end else
107593: GO 107772
// begin z := UnitFilter ( group , [ [ f_inarea , f_repair ] , [ f_empty ] ] ) ;
107595: LD_ADDR_VAR 0 13
107599: PUSH
107600: LD_VAR 0 4
107604: PPUSH
107605: LD_INT 95
107607: PUSH
107608: LD_VAR 0 22
107612: PUSH
107613: EMPTY
107614: LIST
107615: LIST
107616: PUSH
107617: LD_INT 58
107619: PUSH
107620: EMPTY
107621: LIST
107622: PUSH
107623: EMPTY
107624: LIST
107625: LIST
107626: PPUSH
107627: CALL_OW 72
107631: ST_TO_ADDR
// if not HasTask ( group [ i ] ) then
107632: LD_VAR 0 4
107636: PUSH
107637: LD_VAR 0 7
107641: ARRAY
107642: PPUSH
107643: CALL_OW 314
107647: NOT
107648: IFFALSE 107770
// begin x := NearestUnitToUnit ( z , group [ i ] ) ;
107650: LD_ADDR_VAR 0 10
107654: PUSH
107655: LD_VAR 0 13
107659: PPUSH
107660: LD_VAR 0 4
107664: PUSH
107665: LD_VAR 0 7
107669: ARRAY
107670: PPUSH
107671: CALL_OW 74
107675: ST_TO_ADDR
// if not x then
107676: LD_VAR 0 10
107680: NOT
107681: IFFALSE 107685
// continue ;
107683: GO 107117
// if GetLives ( x ) < 1000 then
107685: LD_VAR 0 10
107689: PPUSH
107690: CALL_OW 256
107694: PUSH
107695: LD_INT 1000
107697: LESS
107698: IFFALSE 107722
// ComRepairVehicle ( group [ i ] , x ) else
107700: LD_VAR 0 4
107704: PUSH
107705: LD_VAR 0 7
107709: ARRAY
107710: PPUSH
107711: LD_VAR 0 10
107715: PPUSH
107716: CALL_OW 129
107720: GO 107770
// if not ( f_heal and GetLives ( group [ i ] ) < 1000 ) then
107722: LD_VAR 0 23
107726: PUSH
107727: LD_VAR 0 4
107731: PUSH
107732: LD_VAR 0 7
107736: ARRAY
107737: PPUSH
107738: CALL_OW 256
107742: PUSH
107743: LD_INT 1000
107745: LESS
107746: AND
107747: NOT
107748: IFFALSE 107770
// ComEnterUnit ( group [ i ] , x ) ;
107750: LD_VAR 0 4
107754: PUSH
107755: LD_VAR 0 7
107759: ARRAY
107760: PPUSH
107761: LD_VAR 0 10
107765: PPUSH
107766: CALL_OW 120
// end ; continue ;
107770: GO 107117
// end ; end ; end ; if f_heal and GetType ( group [ i ] ) = unit_human then
107772: LD_VAR 0 23
107776: PUSH
107777: LD_VAR 0 4
107781: PUSH
107782: LD_VAR 0 7
107786: ARRAY
107787: PPUSH
107788: CALL_OW 247
107792: PUSH
107793: LD_INT 1
107795: EQUAL
107796: AND
107797: IFFALSE 108275
// begin if group [ i ] in healers then
107799: LD_VAR 0 4
107803: PUSH
107804: LD_VAR 0 7
107808: ARRAY
107809: PUSH
107810: LD_VAR 0 31
107814: IN
107815: IFFALSE 108088
// begin if not IsInArea ( group [ i ] , f_heal ) and not HasTask ( group [ i ] ) then
107817: LD_VAR 0 4
107821: PUSH
107822: LD_VAR 0 7
107826: ARRAY
107827: PPUSH
107828: LD_VAR 0 23
107832: PPUSH
107833: CALL_OW 308
107837: NOT
107838: PUSH
107839: LD_VAR 0 4
107843: PUSH
107844: LD_VAR 0 7
107848: ARRAY
107849: PPUSH
107850: CALL_OW 314
107854: NOT
107855: AND
107856: IFFALSE 107880
// ComMoveToArea ( group [ i ] , f_heal ) else
107858: LD_VAR 0 4
107862: PUSH
107863: LD_VAR 0 7
107867: ARRAY
107868: PPUSH
107869: LD_VAR 0 23
107873: PPUSH
107874: CALL_OW 113
107878: GO 108086
// if GetLives ( HealTarget ( group [ i ] ) ) = 1000 then
107880: LD_VAR 0 4
107884: PUSH
107885: LD_VAR 0 7
107889: ARRAY
107890: PPUSH
107891: CALL 53938 0 1
107895: PPUSH
107896: CALL_OW 256
107900: PUSH
107901: LD_INT 1000
107903: EQUAL
107904: IFFALSE 107923
// ComStop ( group [ i ] ) else
107906: LD_VAR 0 4
107910: PUSH
107911: LD_VAR 0 7
107915: ARRAY
107916: PPUSH
107917: CALL_OW 141
107921: GO 108086
// if not HasTask ( group [ i ] ) and to_heal then
107923: LD_VAR 0 4
107927: PUSH
107928: LD_VAR 0 7
107932: ARRAY
107933: PPUSH
107934: CALL_OW 314
107938: NOT
107939: PUSH
107940: LD_VAR 0 30
107944: AND
107945: IFFALSE 108086
// begin z := NearestUnitToUnit ( UnitFilter ( to_heal , [ f_not , [ f_inside ] ] ) , group [ i ] ) ;
107947: LD_ADDR_VAR 0 13
107951: PUSH
107952: LD_VAR 0 30
107956: PPUSH
107957: LD_INT 3
107959: PUSH
107960: LD_INT 54
107962: PUSH
107963: EMPTY
107964: LIST
107965: PUSH
107966: EMPTY
107967: LIST
107968: LIST
107969: PPUSH
107970: CALL_OW 72
107974: PPUSH
107975: LD_VAR 0 4
107979: PUSH
107980: LD_VAR 0 7
107984: ARRAY
107985: PPUSH
107986: CALL_OW 74
107990: ST_TO_ADDR
// if z then
107991: LD_VAR 0 13
107995: IFFALSE 108086
// if FilterAllUnits ( [ [ f_dist , z , 10 ] , [ f_enemy , GetSide ( z ) ] ] ) = 0 then
107997: LD_INT 91
107999: PUSH
108000: LD_VAR 0 13
108004: PUSH
108005: LD_INT 10
108007: PUSH
108008: EMPTY
108009: LIST
108010: LIST
108011: LIST
108012: PUSH
108013: LD_INT 81
108015: PUSH
108016: LD_VAR 0 13
108020: PPUSH
108021: CALL_OW 255
108025: PUSH
108026: EMPTY
108027: LIST
108028: LIST
108029: PUSH
108030: EMPTY
108031: LIST
108032: LIST
108033: PPUSH
108034: CALL_OW 69
108038: PUSH
108039: LD_INT 0
108041: EQUAL
108042: IFFALSE 108066
// ComHeal ( group [ i ] , z ) else
108044: LD_VAR 0 4
108048: PUSH
108049: LD_VAR 0 7
108053: ARRAY
108054: PPUSH
108055: LD_VAR 0 13
108059: PPUSH
108060: CALL_OW 128
108064: GO 108086
// ComMoveToArea ( group [ i ] , f_heal ) ;
108066: LD_VAR 0 4
108070: PUSH
108071: LD_VAR 0 7
108075: ARRAY
108076: PPUSH
108077: LD_VAR 0 23
108081: PPUSH
108082: CALL_OW 113
// end ; continue ;
108086: GO 107117
// end ; if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_heal then
108088: LD_VAR 0 4
108092: PUSH
108093: LD_VAR 0 7
108097: ARRAY
108098: PPUSH
108099: CALL_OW 256
108103: PUSH
108104: LD_INT 700
108106: LESS
108107: PUSH
108108: LD_VAR 0 4
108112: PUSH
108113: LD_VAR 0 7
108117: ARRAY
108118: PUSH
108119: LD_VAR 0 30
108123: IN
108124: NOT
108125: AND
108126: IFFALSE 108150
// to_heal := to_heal union group [ i ] ;
108128: LD_ADDR_VAR 0 30
108132: PUSH
108133: LD_VAR 0 30
108137: PUSH
108138: LD_VAR 0 4
108142: PUSH
108143: LD_VAR 0 7
108147: ARRAY
108148: UNION
108149: ST_TO_ADDR
// if group [ i ] in to_heal then
108150: LD_VAR 0 4
108154: PUSH
108155: LD_VAR 0 7
108159: ARRAY
108160: PUSH
108161: LD_VAR 0 30
108165: IN
108166: IFFALSE 108275
// begin if GetLives ( group [ i ] ) = 1000 then
108168: LD_VAR 0 4
108172: PUSH
108173: LD_VAR 0 7
108177: ARRAY
108178: PPUSH
108179: CALL_OW 256
108183: PUSH
108184: LD_INT 1000
108186: EQUAL
108187: IFFALSE 108213
// to_heal := to_heal diff group [ i ] else
108189: LD_ADDR_VAR 0 30
108193: PUSH
108194: LD_VAR 0 30
108198: PUSH
108199: LD_VAR 0 4
108203: PUSH
108204: LD_VAR 0 7
108208: ARRAY
108209: DIFF
108210: ST_TO_ADDR
108211: GO 108275
// begin if not IsInArea ( group [ i ] , to_heal ) then
108213: LD_VAR 0 4
108217: PUSH
108218: LD_VAR 0 7
108222: ARRAY
108223: PPUSH
108224: LD_VAR 0 30
108228: PPUSH
108229: CALL_OW 308
108233: NOT
108234: IFFALSE 108258
// ComMoveToArea ( group [ i ] , f_heal ) else
108236: LD_VAR 0 4
108240: PUSH
108241: LD_VAR 0 7
108245: ARRAY
108246: PPUSH
108247: LD_VAR 0 23
108251: PPUSH
108252: CALL_OW 113
108256: GO 108273
// ComHold ( group [ i ] ) ;
108258: LD_VAR 0 4
108262: PUSH
108263: LD_VAR 0 7
108267: ARRAY
108268: PPUSH
108269: CALL_OW 140
// continue ;
108273: GO 107117
// end ; end ; end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
108275: LD_VAR 0 4
108279: PUSH
108280: LD_VAR 0 7
108284: ARRAY
108285: PPUSH
108286: LD_INT 10
108288: PPUSH
108289: CALL 52358 0 2
108293: NOT
108294: PUSH
108295: LD_VAR 0 16
108299: PUSH
108300: LD_VAR 0 7
108304: ARRAY
108305: PUSH
108306: EMPTY
108307: EQUAL
108308: NOT
108309: AND
108310: IFFALSE 108576
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
108312: LD_VAR 0 4
108316: PUSH
108317: LD_VAR 0 7
108321: ARRAY
108322: PPUSH
108323: CALL_OW 262
108327: PUSH
108328: LD_INT 1
108330: PUSH
108331: LD_INT 2
108333: PUSH
108334: EMPTY
108335: LIST
108336: LIST
108337: IN
108338: IFFALSE 108379
// if GetFuel ( group [ i ] ) < 10 then
108340: LD_VAR 0 4
108344: PUSH
108345: LD_VAR 0 7
108349: ARRAY
108350: PPUSH
108351: CALL_OW 261
108355: PUSH
108356: LD_INT 10
108358: LESS
108359: IFFALSE 108379
// SetFuel ( group [ i ] , 12 ) ;
108361: LD_VAR 0 4
108365: PUSH
108366: LD_VAR 0 7
108370: ARRAY
108371: PPUSH
108372: LD_INT 12
108374: PPUSH
108375: CALL_OW 240
// if units_path [ i ] then
108379: LD_VAR 0 16
108383: PUSH
108384: LD_VAR 0 7
108388: ARRAY
108389: IFFALSE 108574
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
108391: LD_VAR 0 4
108395: PUSH
108396: LD_VAR 0 7
108400: ARRAY
108401: PPUSH
108402: LD_VAR 0 16
108406: PUSH
108407: LD_VAR 0 7
108411: ARRAY
108412: PUSH
108413: LD_INT 1
108415: ARRAY
108416: PUSH
108417: LD_INT 1
108419: ARRAY
108420: PPUSH
108421: LD_VAR 0 16
108425: PUSH
108426: LD_VAR 0 7
108430: ARRAY
108431: PUSH
108432: LD_INT 1
108434: ARRAY
108435: PUSH
108436: LD_INT 2
108438: ARRAY
108439: PPUSH
108440: CALL_OW 297
108444: PUSH
108445: LD_INT 6
108447: GREATER
108448: IFFALSE 108523
// begin if not HasTask ( group [ i ] ) then
108450: LD_VAR 0 4
108454: PUSH
108455: LD_VAR 0 7
108459: ARRAY
108460: PPUSH
108461: CALL_OW 314
108465: NOT
108466: IFFALSE 108521
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
108468: LD_VAR 0 4
108472: PUSH
108473: LD_VAR 0 7
108477: ARRAY
108478: PPUSH
108479: LD_VAR 0 16
108483: PUSH
108484: LD_VAR 0 7
108488: ARRAY
108489: PUSH
108490: LD_INT 1
108492: ARRAY
108493: PUSH
108494: LD_INT 1
108496: ARRAY
108497: PPUSH
108498: LD_VAR 0 16
108502: PUSH
108503: LD_VAR 0 7
108507: ARRAY
108508: PUSH
108509: LD_INT 1
108511: ARRAY
108512: PUSH
108513: LD_INT 2
108515: ARRAY
108516: PPUSH
108517: CALL_OW 114
// end else
108521: GO 108574
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
108523: LD_ADDR_VAR 0 15
108527: PUSH
108528: LD_VAR 0 16
108532: PUSH
108533: LD_VAR 0 7
108537: ARRAY
108538: PPUSH
108539: LD_INT 1
108541: PPUSH
108542: CALL_OW 3
108546: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
108547: LD_ADDR_VAR 0 16
108551: PUSH
108552: LD_VAR 0 16
108556: PPUSH
108557: LD_VAR 0 7
108561: PPUSH
108562: LD_VAR 0 15
108566: PPUSH
108567: CALL_OW 1
108571: ST_TO_ADDR
// continue ;
108572: GO 107117
// end ; end ; end else
108574: GO 111238
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
108576: LD_ADDR_VAR 0 14
108580: PUSH
108581: LD_INT 81
108583: PUSH
108584: LD_VAR 0 4
108588: PUSH
108589: LD_VAR 0 7
108593: ARRAY
108594: PPUSH
108595: CALL_OW 255
108599: PUSH
108600: EMPTY
108601: LIST
108602: LIST
108603: PPUSH
108604: CALL_OW 69
108608: ST_TO_ADDR
// if not tmp then
108609: LD_VAR 0 14
108613: NOT
108614: IFFALSE 108618
// continue ;
108616: GO 107117
// if f_ignore_area then
108618: LD_VAR 0 17
108622: IFFALSE 108710
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
108624: LD_ADDR_VAR 0 15
108628: PUSH
108629: LD_VAR 0 14
108633: PPUSH
108634: LD_INT 3
108636: PUSH
108637: LD_INT 92
108639: PUSH
108640: LD_VAR 0 17
108644: PUSH
108645: LD_INT 1
108647: ARRAY
108648: PUSH
108649: LD_VAR 0 17
108653: PUSH
108654: LD_INT 2
108656: ARRAY
108657: PUSH
108658: LD_VAR 0 17
108662: PUSH
108663: LD_INT 3
108665: ARRAY
108666: PUSH
108667: EMPTY
108668: LIST
108669: LIST
108670: LIST
108671: LIST
108672: PUSH
108673: EMPTY
108674: LIST
108675: LIST
108676: PPUSH
108677: CALL_OW 72
108681: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
108682: LD_VAR 0 14
108686: PUSH
108687: LD_VAR 0 15
108691: DIFF
108692: IFFALSE 108710
// tmp := tmp diff tmp2 ;
108694: LD_ADDR_VAR 0 14
108698: PUSH
108699: LD_VAR 0 14
108703: PUSH
108704: LD_VAR 0 15
108708: DIFF
108709: ST_TO_ADDR
// end ; if not f_murder then
108710: LD_VAR 0 20
108714: NOT
108715: IFFALSE 108773
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
108717: LD_ADDR_VAR 0 15
108721: PUSH
108722: LD_VAR 0 14
108726: PPUSH
108727: LD_INT 3
108729: PUSH
108730: LD_INT 50
108732: PUSH
108733: EMPTY
108734: LIST
108735: PUSH
108736: EMPTY
108737: LIST
108738: LIST
108739: PPUSH
108740: CALL_OW 72
108744: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
108745: LD_VAR 0 14
108749: PUSH
108750: LD_VAR 0 15
108754: DIFF
108755: IFFALSE 108773
// tmp := tmp diff tmp2 ;
108757: LD_ADDR_VAR 0 14
108761: PUSH
108762: LD_VAR 0 14
108766: PUSH
108767: LD_VAR 0 15
108771: DIFF
108772: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
108773: LD_ADDR_VAR 0 14
108777: PUSH
108778: LD_VAR 0 4
108782: PUSH
108783: LD_VAR 0 7
108787: ARRAY
108788: PPUSH
108789: LD_VAR 0 14
108793: PPUSH
108794: LD_INT 1
108796: PPUSH
108797: LD_INT 1
108799: PPUSH
108800: CALL 25293 0 4
108804: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
108805: LD_VAR 0 4
108809: PUSH
108810: LD_VAR 0 7
108814: ARRAY
108815: PPUSH
108816: CALL_OW 257
108820: PUSH
108821: LD_INT 1
108823: EQUAL
108824: IFFALSE 109272
// begin if WantPlant ( group [ i ] ) then
108826: LD_VAR 0 4
108830: PUSH
108831: LD_VAR 0 7
108835: ARRAY
108836: PPUSH
108837: CALL 24794 0 1
108841: IFFALSE 108845
// continue ;
108843: GO 107117
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
108845: LD_VAR 0 18
108849: PUSH
108850: LD_VAR 0 4
108854: PUSH
108855: LD_VAR 0 7
108859: ARRAY
108860: PPUSH
108861: CALL_OW 310
108865: NOT
108866: AND
108867: PUSH
108868: LD_VAR 0 14
108872: PUSH
108873: LD_INT 1
108875: ARRAY
108876: PUSH
108877: LD_VAR 0 14
108881: PPUSH
108882: LD_INT 21
108884: PUSH
108885: LD_INT 2
108887: PUSH
108888: EMPTY
108889: LIST
108890: LIST
108891: PUSH
108892: LD_INT 58
108894: PUSH
108895: EMPTY
108896: LIST
108897: PUSH
108898: EMPTY
108899: LIST
108900: LIST
108901: PPUSH
108902: CALL_OW 72
108906: IN
108907: AND
108908: IFFALSE 108944
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
108910: LD_VAR 0 4
108914: PUSH
108915: LD_VAR 0 7
108919: ARRAY
108920: PPUSH
108921: LD_VAR 0 14
108925: PUSH
108926: LD_INT 1
108928: ARRAY
108929: PPUSH
108930: CALL_OW 120
// attacking := true ;
108934: LD_ADDR_VAR 0 29
108938: PUSH
108939: LD_INT 1
108941: ST_TO_ADDR
// continue ;
108942: GO 107117
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
108944: LD_VAR 0 26
108948: PUSH
108949: LD_VAR 0 4
108953: PUSH
108954: LD_VAR 0 7
108958: ARRAY
108959: PPUSH
108960: CALL_OW 257
108964: PUSH
108965: LD_INT 1
108967: EQUAL
108968: AND
108969: PUSH
108970: LD_VAR 0 4
108974: PUSH
108975: LD_VAR 0 7
108979: ARRAY
108980: PPUSH
108981: CALL_OW 256
108985: PUSH
108986: LD_INT 800
108988: LESS
108989: AND
108990: PUSH
108991: LD_VAR 0 4
108995: PUSH
108996: LD_VAR 0 7
109000: ARRAY
109001: PPUSH
109002: CALL_OW 318
109006: NOT
109007: AND
109008: IFFALSE 109025
// ComCrawl ( group [ i ] ) ;
109010: LD_VAR 0 4
109014: PUSH
109015: LD_VAR 0 7
109019: ARRAY
109020: PPUSH
109021: CALL_OW 137
// if f_mines then
109025: LD_VAR 0 21
109029: IFFALSE 109272
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
109031: LD_VAR 0 14
109035: PUSH
109036: LD_INT 1
109038: ARRAY
109039: PPUSH
109040: CALL_OW 247
109044: PUSH
109045: LD_INT 3
109047: EQUAL
109048: PUSH
109049: LD_VAR 0 14
109053: PUSH
109054: LD_INT 1
109056: ARRAY
109057: PUSH
109058: LD_VAR 0 27
109062: IN
109063: NOT
109064: AND
109065: IFFALSE 109272
// begin x := GetX ( tmp [ 1 ] ) ;
109067: LD_ADDR_VAR 0 10
109071: PUSH
109072: LD_VAR 0 14
109076: PUSH
109077: LD_INT 1
109079: ARRAY
109080: PPUSH
109081: CALL_OW 250
109085: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
109086: LD_ADDR_VAR 0 11
109090: PUSH
109091: LD_VAR 0 14
109095: PUSH
109096: LD_INT 1
109098: ARRAY
109099: PPUSH
109100: CALL_OW 251
109104: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
109105: LD_ADDR_VAR 0 12
109109: PUSH
109110: LD_VAR 0 4
109114: PUSH
109115: LD_VAR 0 7
109119: ARRAY
109120: PPUSH
109121: CALL 52443 0 1
109125: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
109126: LD_VAR 0 4
109130: PUSH
109131: LD_VAR 0 7
109135: ARRAY
109136: PPUSH
109137: LD_VAR 0 10
109141: PPUSH
109142: LD_VAR 0 11
109146: PPUSH
109147: LD_VAR 0 14
109151: PUSH
109152: LD_INT 1
109154: ARRAY
109155: PPUSH
109156: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
109160: LD_VAR 0 4
109164: PUSH
109165: LD_VAR 0 7
109169: ARRAY
109170: PPUSH
109171: LD_VAR 0 10
109175: PPUSH
109176: LD_VAR 0 12
109180: PPUSH
109181: LD_INT 7
109183: PPUSH
109184: CALL_OW 272
109188: PPUSH
109189: LD_VAR 0 11
109193: PPUSH
109194: LD_VAR 0 12
109198: PPUSH
109199: LD_INT 7
109201: PPUSH
109202: CALL_OW 273
109206: PPUSH
109207: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
109211: LD_VAR 0 4
109215: PUSH
109216: LD_VAR 0 7
109220: ARRAY
109221: PPUSH
109222: LD_INT 71
109224: PPUSH
109225: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
109229: LD_ADDR_VAR 0 27
109233: PUSH
109234: LD_VAR 0 27
109238: PPUSH
109239: LD_VAR 0 27
109243: PUSH
109244: LD_INT 1
109246: PLUS
109247: PPUSH
109248: LD_VAR 0 14
109252: PUSH
109253: LD_INT 1
109255: ARRAY
109256: PPUSH
109257: CALL_OW 1
109261: ST_TO_ADDR
// attacking := true ;
109262: LD_ADDR_VAR 0 29
109266: PUSH
109267: LD_INT 1
109269: ST_TO_ADDR
// continue ;
109270: GO 107117
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
109272: LD_VAR 0 4
109276: PUSH
109277: LD_VAR 0 7
109281: ARRAY
109282: PPUSH
109283: CALL_OW 257
109287: PUSH
109288: LD_INT 17
109290: EQUAL
109291: PUSH
109292: LD_VAR 0 4
109296: PUSH
109297: LD_VAR 0 7
109301: ARRAY
109302: PPUSH
109303: CALL_OW 110
109307: PUSH
109308: LD_INT 71
109310: EQUAL
109311: NOT
109312: AND
109313: IFFALSE 109459
// begin attacking := false ;
109315: LD_ADDR_VAR 0 29
109319: PUSH
109320: LD_INT 0
109322: ST_TO_ADDR
// k := 5 ;
109323: LD_ADDR_VAR 0 9
109327: PUSH
109328: LD_INT 5
109330: ST_TO_ADDR
// if tmp < k then
109331: LD_VAR 0 14
109335: PUSH
109336: LD_VAR 0 9
109340: LESS
109341: IFFALSE 109353
// k := tmp ;
109343: LD_ADDR_VAR 0 9
109347: PUSH
109348: LD_VAR 0 14
109352: ST_TO_ADDR
// for j = 1 to k do
109353: LD_ADDR_VAR 0 8
109357: PUSH
109358: DOUBLE
109359: LD_INT 1
109361: DEC
109362: ST_TO_ADDR
109363: LD_VAR 0 9
109367: PUSH
109368: FOR_TO
109369: IFFALSE 109457
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
109371: LD_VAR 0 14
109375: PUSH
109376: LD_VAR 0 8
109380: ARRAY
109381: PUSH
109382: LD_VAR 0 14
109386: PPUSH
109387: LD_INT 58
109389: PUSH
109390: EMPTY
109391: LIST
109392: PPUSH
109393: CALL_OW 72
109397: IN
109398: NOT
109399: IFFALSE 109455
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
109401: LD_VAR 0 4
109405: PUSH
109406: LD_VAR 0 7
109410: ARRAY
109411: PPUSH
109412: LD_VAR 0 14
109416: PUSH
109417: LD_VAR 0 8
109421: ARRAY
109422: PPUSH
109423: CALL_OW 115
// attacking := true ;
109427: LD_ADDR_VAR 0 29
109431: PUSH
109432: LD_INT 1
109434: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
109435: LD_VAR 0 4
109439: PUSH
109440: LD_VAR 0 7
109444: ARRAY
109445: PPUSH
109446: LD_INT 71
109448: PPUSH
109449: CALL_OW 109
// continue ;
109453: GO 109368
// end ; end ;
109455: GO 109368
109457: POP
109458: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
109459: LD_VAR 0 4
109463: PUSH
109464: LD_VAR 0 7
109468: ARRAY
109469: PPUSH
109470: CALL_OW 257
109474: PUSH
109475: LD_INT 8
109477: EQUAL
109478: PUSH
109479: LD_VAR 0 4
109483: PUSH
109484: LD_VAR 0 7
109488: ARRAY
109489: PPUSH
109490: CALL_OW 264
109494: PUSH
109495: LD_INT 28
109497: PUSH
109498: LD_INT 45
109500: PUSH
109501: LD_INT 7
109503: PUSH
109504: LD_INT 47
109506: PUSH
109507: EMPTY
109508: LIST
109509: LIST
109510: LIST
109511: LIST
109512: IN
109513: OR
109514: IFFALSE 109770
// begin attacking := false ;
109516: LD_ADDR_VAR 0 29
109520: PUSH
109521: LD_INT 0
109523: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
109524: LD_VAR 0 14
109528: PUSH
109529: LD_INT 1
109531: ARRAY
109532: PPUSH
109533: CALL_OW 266
109537: PUSH
109538: LD_INT 32
109540: PUSH
109541: LD_INT 31
109543: PUSH
109544: LD_INT 33
109546: PUSH
109547: LD_INT 4
109549: PUSH
109550: LD_INT 5
109552: PUSH
109553: EMPTY
109554: LIST
109555: LIST
109556: LIST
109557: LIST
109558: LIST
109559: IN
109560: IFFALSE 109746
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
109562: LD_ADDR_VAR 0 9
109566: PUSH
109567: LD_VAR 0 14
109571: PUSH
109572: LD_INT 1
109574: ARRAY
109575: PPUSH
109576: CALL_OW 266
109580: PPUSH
109581: LD_VAR 0 14
109585: PUSH
109586: LD_INT 1
109588: ARRAY
109589: PPUSH
109590: CALL_OW 250
109594: PPUSH
109595: LD_VAR 0 14
109599: PUSH
109600: LD_INT 1
109602: ARRAY
109603: PPUSH
109604: CALL_OW 251
109608: PPUSH
109609: LD_VAR 0 14
109613: PUSH
109614: LD_INT 1
109616: ARRAY
109617: PPUSH
109618: CALL_OW 254
109622: PPUSH
109623: LD_VAR 0 14
109627: PUSH
109628: LD_INT 1
109630: ARRAY
109631: PPUSH
109632: CALL_OW 248
109636: PPUSH
109637: LD_INT 0
109639: PPUSH
109640: CALL 33813 0 6
109644: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
109645: LD_ADDR_VAR 0 8
109649: PUSH
109650: LD_VAR 0 4
109654: PUSH
109655: LD_VAR 0 7
109659: ARRAY
109660: PPUSH
109661: LD_VAR 0 9
109665: PPUSH
109666: CALL 52483 0 2
109670: ST_TO_ADDR
// if j then
109671: LD_VAR 0 8
109675: IFFALSE 109744
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
109677: LD_VAR 0 8
109681: PUSH
109682: LD_INT 1
109684: ARRAY
109685: PPUSH
109686: LD_VAR 0 8
109690: PUSH
109691: LD_INT 2
109693: ARRAY
109694: PPUSH
109695: CALL_OW 488
109699: IFFALSE 109744
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
109701: LD_VAR 0 4
109705: PUSH
109706: LD_VAR 0 7
109710: ARRAY
109711: PPUSH
109712: LD_VAR 0 8
109716: PUSH
109717: LD_INT 1
109719: ARRAY
109720: PPUSH
109721: LD_VAR 0 8
109725: PUSH
109726: LD_INT 2
109728: ARRAY
109729: PPUSH
109730: CALL_OW 116
// attacking := true ;
109734: LD_ADDR_VAR 0 29
109738: PUSH
109739: LD_INT 1
109741: ST_TO_ADDR
// continue ;
109742: GO 107117
// end ; end else
109744: GO 109770
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
109746: LD_VAR 0 4
109750: PUSH
109751: LD_VAR 0 7
109755: ARRAY
109756: PPUSH
109757: LD_VAR 0 14
109761: PUSH
109762: LD_INT 1
109764: ARRAY
109765: PPUSH
109766: CALL_OW 115
// end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
109770: LD_VAR 0 4
109774: PUSH
109775: LD_VAR 0 7
109779: ARRAY
109780: PPUSH
109781: CALL_OW 265
109785: PUSH
109786: LD_INT 11
109788: EQUAL
109789: IFFALSE 110067
// begin k := 10 ;
109791: LD_ADDR_VAR 0 9
109795: PUSH
109796: LD_INT 10
109798: ST_TO_ADDR
// x := 0 ;
109799: LD_ADDR_VAR 0 10
109803: PUSH
109804: LD_INT 0
109806: ST_TO_ADDR
// if tmp < k then
109807: LD_VAR 0 14
109811: PUSH
109812: LD_VAR 0 9
109816: LESS
109817: IFFALSE 109829
// k := tmp ;
109819: LD_ADDR_VAR 0 9
109823: PUSH
109824: LD_VAR 0 14
109828: ST_TO_ADDR
// for j = k downto 1 do
109829: LD_ADDR_VAR 0 8
109833: PUSH
109834: DOUBLE
109835: LD_VAR 0 9
109839: INC
109840: ST_TO_ADDR
109841: LD_INT 1
109843: PUSH
109844: FOR_DOWNTO
109845: IFFALSE 109920
// begin if GetType ( tmp [ j ] ) = unit_human then
109847: LD_VAR 0 14
109851: PUSH
109852: LD_VAR 0 8
109856: ARRAY
109857: PPUSH
109858: CALL_OW 247
109862: PUSH
109863: LD_INT 1
109865: EQUAL
109866: IFFALSE 109918
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
109868: LD_VAR 0 4
109872: PUSH
109873: LD_VAR 0 7
109877: ARRAY
109878: PPUSH
109879: LD_VAR 0 14
109883: PUSH
109884: LD_VAR 0 8
109888: ARRAY
109889: PPUSH
109890: CALL 52754 0 2
// x := tmp [ j ] ;
109894: LD_ADDR_VAR 0 10
109898: PUSH
109899: LD_VAR 0 14
109903: PUSH
109904: LD_VAR 0 8
109908: ARRAY
109909: ST_TO_ADDR
// attacking := true ;
109910: LD_ADDR_VAR 0 29
109914: PUSH
109915: LD_INT 1
109917: ST_TO_ADDR
// end ; end ;
109918: GO 109844
109920: POP
109921: POP
// if not x then
109922: LD_VAR 0 10
109926: NOT
109927: IFFALSE 110067
// begin attacking := true ;
109929: LD_ADDR_VAR 0 29
109933: PUSH
109934: LD_INT 1
109936: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
109937: LD_VAR 0 4
109941: PUSH
109942: LD_VAR 0 7
109946: ARRAY
109947: PPUSH
109948: CALL_OW 250
109952: PPUSH
109953: LD_VAR 0 4
109957: PUSH
109958: LD_VAR 0 7
109962: ARRAY
109963: PPUSH
109964: CALL_OW 251
109968: PPUSH
109969: CALL_OW 546
109973: PUSH
109974: LD_INT 2
109976: ARRAY
109977: PUSH
109978: LD_VAR 0 14
109982: PUSH
109983: LD_INT 1
109985: ARRAY
109986: PPUSH
109987: CALL_OW 250
109991: PPUSH
109992: LD_VAR 0 14
109996: PUSH
109997: LD_INT 1
109999: ARRAY
110000: PPUSH
110001: CALL_OW 251
110005: PPUSH
110006: CALL_OW 546
110010: PUSH
110011: LD_INT 2
110013: ARRAY
110014: EQUAL
110015: IFFALSE 110043
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
110017: LD_VAR 0 4
110021: PUSH
110022: LD_VAR 0 7
110026: ARRAY
110027: PPUSH
110028: LD_VAR 0 14
110032: PUSH
110033: LD_INT 1
110035: ARRAY
110036: PPUSH
110037: CALL 52754 0 2
110041: GO 110067
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
110043: LD_VAR 0 4
110047: PUSH
110048: LD_VAR 0 7
110052: ARRAY
110053: PPUSH
110054: LD_VAR 0 14
110058: PUSH
110059: LD_INT 1
110061: ARRAY
110062: PPUSH
110063: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
110067: LD_VAR 0 4
110071: PUSH
110072: LD_VAR 0 7
110076: ARRAY
110077: PPUSH
110078: CALL_OW 264
110082: PUSH
110083: LD_INT 29
110085: EQUAL
110086: IFFALSE 110452
// begin if WantsToAttack ( group [ i ] ) in bombed then
110088: LD_VAR 0 4
110092: PUSH
110093: LD_VAR 0 7
110097: ARRAY
110098: PPUSH
110099: CALL_OW 319
110103: PUSH
110104: LD_VAR 0 28
110108: IN
110109: IFFALSE 110113
// continue ;
110111: GO 107117
// k := 8 ;
110113: LD_ADDR_VAR 0 9
110117: PUSH
110118: LD_INT 8
110120: ST_TO_ADDR
// x := 0 ;
110121: LD_ADDR_VAR 0 10
110125: PUSH
110126: LD_INT 0
110128: ST_TO_ADDR
// if tmp < k then
110129: LD_VAR 0 14
110133: PUSH
110134: LD_VAR 0 9
110138: LESS
110139: IFFALSE 110151
// k := tmp ;
110141: LD_ADDR_VAR 0 9
110145: PUSH
110146: LD_VAR 0 14
110150: ST_TO_ADDR
// for j = 1 to k do
110151: LD_ADDR_VAR 0 8
110155: PUSH
110156: DOUBLE
110157: LD_INT 1
110159: DEC
110160: ST_TO_ADDR
110161: LD_VAR 0 9
110165: PUSH
110166: FOR_TO
110167: IFFALSE 110299
// begin if GetType ( tmp [ j ] ) = unit_building then
110169: LD_VAR 0 14
110173: PUSH
110174: LD_VAR 0 8
110178: ARRAY
110179: PPUSH
110180: CALL_OW 247
110184: PUSH
110185: LD_INT 3
110187: EQUAL
110188: IFFALSE 110297
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
110190: LD_VAR 0 14
110194: PUSH
110195: LD_VAR 0 8
110199: ARRAY
110200: PUSH
110201: LD_VAR 0 28
110205: IN
110206: NOT
110207: PUSH
110208: LD_VAR 0 14
110212: PUSH
110213: LD_VAR 0 8
110217: ARRAY
110218: PPUSH
110219: CALL_OW 313
110223: AND
110224: IFFALSE 110297
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
110226: LD_VAR 0 4
110230: PUSH
110231: LD_VAR 0 7
110235: ARRAY
110236: PPUSH
110237: LD_VAR 0 14
110241: PUSH
110242: LD_VAR 0 8
110246: ARRAY
110247: PPUSH
110248: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
110252: LD_ADDR_VAR 0 28
110256: PUSH
110257: LD_VAR 0 28
110261: PPUSH
110262: LD_VAR 0 28
110266: PUSH
110267: LD_INT 1
110269: PLUS
110270: PPUSH
110271: LD_VAR 0 14
110275: PUSH
110276: LD_VAR 0 8
110280: ARRAY
110281: PPUSH
110282: CALL_OW 1
110286: ST_TO_ADDR
// attacking := true ;
110287: LD_ADDR_VAR 0 29
110291: PUSH
110292: LD_INT 1
110294: ST_TO_ADDR
// break ;
110295: GO 110299
// end ; end ;
110297: GO 110166
110299: POP
110300: POP
// if not attacking and f_attack_depot then
110301: LD_VAR 0 29
110305: NOT
110306: PUSH
110307: LD_VAR 0 25
110311: AND
110312: IFFALSE 110407
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
110314: LD_ADDR_VAR 0 13
110318: PUSH
110319: LD_VAR 0 14
110323: PPUSH
110324: LD_INT 2
110326: PUSH
110327: LD_INT 30
110329: PUSH
110330: LD_INT 0
110332: PUSH
110333: EMPTY
110334: LIST
110335: LIST
110336: PUSH
110337: LD_INT 30
110339: PUSH
110340: LD_INT 1
110342: PUSH
110343: EMPTY
110344: LIST
110345: LIST
110346: PUSH
110347: EMPTY
110348: LIST
110349: LIST
110350: LIST
110351: PPUSH
110352: CALL_OW 72
110356: ST_TO_ADDR
// if z then
110357: LD_VAR 0 13
110361: IFFALSE 110407
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
110363: LD_VAR 0 4
110367: PUSH
110368: LD_VAR 0 7
110372: ARRAY
110373: PPUSH
110374: LD_VAR 0 13
110378: PPUSH
110379: LD_VAR 0 4
110383: PUSH
110384: LD_VAR 0 7
110388: ARRAY
110389: PPUSH
110390: CALL_OW 74
110394: PPUSH
110395: CALL_OW 115
// attacking := true ;
110399: LD_ADDR_VAR 0 29
110403: PUSH
110404: LD_INT 1
110406: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
110407: LD_VAR 0 4
110411: PUSH
110412: LD_VAR 0 7
110416: ARRAY
110417: PPUSH
110418: CALL_OW 256
110422: PUSH
110423: LD_INT 500
110425: LESS
110426: IFFALSE 110452
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
110428: LD_VAR 0 4
110432: PUSH
110433: LD_VAR 0 7
110437: ARRAY
110438: PPUSH
110439: LD_VAR 0 14
110443: PUSH
110444: LD_INT 1
110446: ARRAY
110447: PPUSH
110448: CALL_OW 115
// end ; if GetWeapon ( group [ i ] ) = ru_time_lapser then
110452: LD_VAR 0 4
110456: PUSH
110457: LD_VAR 0 7
110461: ARRAY
110462: PPUSH
110463: CALL_OW 264
110467: PUSH
110468: LD_INT 49
110470: EQUAL
110471: IFFALSE 110592
// begin if not HasTask ( group [ i ] ) then
110473: LD_VAR 0 4
110477: PUSH
110478: LD_VAR 0 7
110482: ARRAY
110483: PPUSH
110484: CALL_OW 314
110488: NOT
110489: IFFALSE 110592
// begin k := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) , group [ i ] ) ;
110491: LD_ADDR_VAR 0 9
110495: PUSH
110496: LD_INT 81
110498: PUSH
110499: LD_VAR 0 4
110503: PUSH
110504: LD_VAR 0 7
110508: ARRAY
110509: PPUSH
110510: CALL_OW 255
110514: PUSH
110515: EMPTY
110516: LIST
110517: LIST
110518: PPUSH
110519: CALL_OW 69
110523: PPUSH
110524: LD_VAR 0 4
110528: PUSH
110529: LD_VAR 0 7
110533: ARRAY
110534: PPUSH
110535: CALL_OW 74
110539: ST_TO_ADDR
// if k then
110540: LD_VAR 0 9
110544: IFFALSE 110592
// if GetDistUnits ( group [ i ] , k ) > 10 then
110546: LD_VAR 0 4
110550: PUSH
110551: LD_VAR 0 7
110555: ARRAY
110556: PPUSH
110557: LD_VAR 0 9
110561: PPUSH
110562: CALL_OW 296
110566: PUSH
110567: LD_INT 10
110569: GREATER
110570: IFFALSE 110592
// ComMoveUnit ( group [ i ] , k ) ;
110572: LD_VAR 0 4
110576: PUSH
110577: LD_VAR 0 7
110581: ARRAY
110582: PPUSH
110583: LD_VAR 0 9
110587: PPUSH
110588: CALL_OW 112
// end ; end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
110592: LD_VAR 0 4
110596: PUSH
110597: LD_VAR 0 7
110601: ARRAY
110602: PPUSH
110603: CALL_OW 256
110607: PUSH
110608: LD_INT 250
110610: LESS
110611: PUSH
110612: LD_VAR 0 4
110616: PUSH
110617: LD_VAR 0 7
110621: ARRAY
110622: PUSH
110623: LD_INT 21
110625: PUSH
110626: LD_INT 2
110628: PUSH
110629: EMPTY
110630: LIST
110631: LIST
110632: PUSH
110633: LD_INT 23
110635: PUSH
110636: LD_INT 2
110638: PUSH
110639: EMPTY
110640: LIST
110641: LIST
110642: PUSH
110643: EMPTY
110644: LIST
110645: LIST
110646: PPUSH
110647: CALL_OW 69
110651: IN
110652: AND
110653: IFFALSE 110778
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
110655: LD_ADDR_VAR 0 9
110659: PUSH
110660: LD_OWVAR 3
110664: PUSH
110665: LD_VAR 0 4
110669: PUSH
110670: LD_VAR 0 7
110674: ARRAY
110675: DIFF
110676: PPUSH
110677: LD_VAR 0 4
110681: PUSH
110682: LD_VAR 0 7
110686: ARRAY
110687: PPUSH
110688: CALL_OW 74
110692: ST_TO_ADDR
// if not k then
110693: LD_VAR 0 9
110697: NOT
110698: IFFALSE 110702
// continue ;
110700: GO 107117
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
110702: LD_VAR 0 9
110706: PUSH
110707: LD_INT 81
110709: PUSH
110710: LD_VAR 0 4
110714: PUSH
110715: LD_VAR 0 7
110719: ARRAY
110720: PPUSH
110721: CALL_OW 255
110725: PUSH
110726: EMPTY
110727: LIST
110728: LIST
110729: PPUSH
110730: CALL_OW 69
110734: IN
110735: PUSH
110736: LD_VAR 0 9
110740: PPUSH
110741: LD_VAR 0 4
110745: PUSH
110746: LD_VAR 0 7
110750: ARRAY
110751: PPUSH
110752: CALL_OW 296
110756: PUSH
110757: LD_INT 5
110759: LESS
110760: AND
110761: IFFALSE 110778
// ComAutodestruct ( group [ i ] ) ;
110763: LD_VAR 0 4
110767: PUSH
110768: LD_VAR 0 7
110772: ARRAY
110773: PPUSH
110774: CALL 52652 0 1
// end ; if f_attack_depot then
110778: LD_VAR 0 25
110782: IFFALSE 110894
// begin k := 6 ;
110784: LD_ADDR_VAR 0 9
110788: PUSH
110789: LD_INT 6
110791: ST_TO_ADDR
// if tmp < k then
110792: LD_VAR 0 14
110796: PUSH
110797: LD_VAR 0 9
110801: LESS
110802: IFFALSE 110814
// k := tmp ;
110804: LD_ADDR_VAR 0 9
110808: PUSH
110809: LD_VAR 0 14
110813: ST_TO_ADDR
// for j = 1 to k do
110814: LD_ADDR_VAR 0 8
110818: PUSH
110819: DOUBLE
110820: LD_INT 1
110822: DEC
110823: ST_TO_ADDR
110824: LD_VAR 0 9
110828: PUSH
110829: FOR_TO
110830: IFFALSE 110892
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
110832: LD_VAR 0 8
110836: PPUSH
110837: CALL_OW 266
110841: PUSH
110842: LD_INT 0
110844: PUSH
110845: LD_INT 1
110847: PUSH
110848: EMPTY
110849: LIST
110850: LIST
110851: IN
110852: IFFALSE 110890
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
110854: LD_VAR 0 4
110858: PUSH
110859: LD_VAR 0 7
110863: ARRAY
110864: PPUSH
110865: LD_VAR 0 14
110869: PUSH
110870: LD_VAR 0 8
110874: ARRAY
110875: PPUSH
110876: CALL_OW 115
// attacking := true ;
110880: LD_ADDR_VAR 0 29
110884: PUSH
110885: LD_INT 1
110887: ST_TO_ADDR
// break ;
110888: GO 110892
// end ;
110890: GO 110829
110892: POP
110893: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
110894: LD_VAR 0 4
110898: PUSH
110899: LD_VAR 0 7
110903: ARRAY
110904: PPUSH
110905: CALL_OW 302
110909: PUSH
110910: LD_VAR 0 29
110914: NOT
110915: AND
110916: IFFALSE 111238
// begin if GetTag ( group [ i ] ) = 71 then
110918: LD_VAR 0 4
110922: PUSH
110923: LD_VAR 0 7
110927: ARRAY
110928: PPUSH
110929: CALL_OW 110
110933: PUSH
110934: LD_INT 71
110936: EQUAL
110937: IFFALSE 110978
// begin if HasTask ( group [ i ] ) then
110939: LD_VAR 0 4
110943: PUSH
110944: LD_VAR 0 7
110948: ARRAY
110949: PPUSH
110950: CALL_OW 314
110954: IFFALSE 110960
// continue else
110956: GO 107117
110958: GO 110978
// SetTag ( group [ i ] , 0 ) ;
110960: LD_VAR 0 4
110964: PUSH
110965: LD_VAR 0 7
110969: ARRAY
110970: PPUSH
110971: LD_INT 0
110973: PPUSH
110974: CALL_OW 109
// end ; k := 8 ;
110978: LD_ADDR_VAR 0 9
110982: PUSH
110983: LD_INT 8
110985: ST_TO_ADDR
// x := 0 ;
110986: LD_ADDR_VAR 0 10
110990: PUSH
110991: LD_INT 0
110993: ST_TO_ADDR
// if tmp < k then
110994: LD_VAR 0 14
110998: PUSH
110999: LD_VAR 0 9
111003: LESS
111004: IFFALSE 111016
// k := tmp ;
111006: LD_ADDR_VAR 0 9
111010: PUSH
111011: LD_VAR 0 14
111015: ST_TO_ADDR
// for j = 1 to k do
111016: LD_ADDR_VAR 0 8
111020: PUSH
111021: DOUBLE
111022: LD_INT 1
111024: DEC
111025: ST_TO_ADDR
111026: LD_VAR 0 9
111030: PUSH
111031: FOR_TO
111032: IFFALSE 111130
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
111034: LD_VAR 0 14
111038: PUSH
111039: LD_VAR 0 8
111043: ARRAY
111044: PPUSH
111045: CALL_OW 247
111049: PUSH
111050: LD_INT 1
111052: EQUAL
111053: PUSH
111054: LD_VAR 0 14
111058: PUSH
111059: LD_VAR 0 8
111063: ARRAY
111064: PPUSH
111065: CALL_OW 256
111069: PUSH
111070: LD_INT 250
111072: LESS
111073: PUSH
111074: LD_VAR 0 20
111078: AND
111079: PUSH
111080: LD_VAR 0 20
111084: NOT
111085: PUSH
111086: LD_VAR 0 14
111090: PUSH
111091: LD_VAR 0 8
111095: ARRAY
111096: PPUSH
111097: CALL_OW 256
111101: PUSH
111102: LD_INT 250
111104: GREATEREQUAL
111105: AND
111106: OR
111107: AND
111108: IFFALSE 111128
// begin x := tmp [ j ] ;
111110: LD_ADDR_VAR 0 10
111114: PUSH
111115: LD_VAR 0 14
111119: PUSH
111120: LD_VAR 0 8
111124: ARRAY
111125: ST_TO_ADDR
// break ;
111126: GO 111130
// end ;
111128: GO 111031
111130: POP
111131: POP
// if x then
111132: LD_VAR 0 10
111136: IFFALSE 111160
// ComAttackUnit ( group [ i ] , x ) else
111138: LD_VAR 0 4
111142: PUSH
111143: LD_VAR 0 7
111147: ARRAY
111148: PPUSH
111149: LD_VAR 0 10
111153: PPUSH
111154: CALL_OW 115
111158: GO 111184
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
111160: LD_VAR 0 4
111164: PUSH
111165: LD_VAR 0 7
111169: ARRAY
111170: PPUSH
111171: LD_VAR 0 14
111175: PUSH
111176: LD_INT 1
111178: ARRAY
111179: PPUSH
111180: CALL_OW 115
// if not HasTask ( group [ i ] ) then
111184: LD_VAR 0 4
111188: PUSH
111189: LD_VAR 0 7
111193: ARRAY
111194: PPUSH
111195: CALL_OW 314
111199: NOT
111200: IFFALSE 111238
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
111202: LD_VAR 0 4
111206: PUSH
111207: LD_VAR 0 7
111211: ARRAY
111212: PPUSH
111213: LD_VAR 0 14
111217: PPUSH
111218: LD_VAR 0 4
111222: PUSH
111223: LD_VAR 0 7
111227: ARRAY
111228: PPUSH
111229: CALL_OW 74
111233: PPUSH
111234: CALL_OW 115
// end ; end ; end ;
111238: GO 107117
111240: POP
111241: POP
// wait ( 0 0$2 ) ;
111242: LD_INT 70
111244: PPUSH
111245: CALL_OW 67
// until not group or group = [ ] or not FilterAllUnits ( [ f_enemy , side ] ) ;
111249: LD_VAR 0 4
111253: NOT
111254: PUSH
111255: LD_VAR 0 4
111259: PUSH
111260: EMPTY
111261: EQUAL
111262: OR
111263: PUSH
111264: LD_INT 81
111266: PUSH
111267: LD_VAR 0 35
111271: PUSH
111272: EMPTY
111273: LIST
111274: LIST
111275: PPUSH
111276: CALL_OW 69
111280: NOT
111281: OR
111282: IFFALSE 107102
// end ;
111284: LD_VAR 0 2
111288: RET
// export function BasicDefend ( base , solds ) ; var enemy , side , i , hex ; begin
111289: LD_INT 0
111291: PPUSH
111292: PPUSH
111293: PPUSH
111294: PPUSH
111295: PPUSH
// if not base or not mc_bases [ base ] or not solds then
111296: LD_VAR 0 1
111300: NOT
111301: PUSH
111302: LD_EXP 50
111306: PUSH
111307: LD_VAR 0 1
111311: ARRAY
111312: NOT
111313: OR
111314: PUSH
111315: LD_VAR 0 2
111319: NOT
111320: OR
111321: IFFALSE 111325
// exit ;
111323: GO 111854
// side := mc_sides [ base ] ;
111325: LD_ADDR_VAR 0 5
111329: PUSH
111330: LD_EXP 76
111334: PUSH
111335: LD_VAR 0 1
111339: ARRAY
111340: ST_TO_ADDR
// if not side then
111341: LD_VAR 0 5
111345: NOT
111346: IFFALSE 111350
// exit ;
111348: GO 111854
// for i in solds do
111350: LD_ADDR_VAR 0 6
111354: PUSH
111355: LD_VAR 0 2
111359: PUSH
111360: FOR_IN
111361: IFFALSE 111422
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
111363: LD_VAR 0 6
111367: PPUSH
111368: CALL_OW 310
111372: PPUSH
111373: CALL_OW 266
111377: PUSH
111378: LD_INT 32
111380: PUSH
111381: LD_INT 31
111383: PUSH
111384: EMPTY
111385: LIST
111386: LIST
111387: IN
111388: IFFALSE 111408
// solds := solds diff i else
111390: LD_ADDR_VAR 0 2
111394: PUSH
111395: LD_VAR 0 2
111399: PUSH
111400: LD_VAR 0 6
111404: DIFF
111405: ST_TO_ADDR
111406: GO 111420
// SetTag ( i , 18 ) ;
111408: LD_VAR 0 6
111412: PPUSH
111413: LD_INT 18
111415: PPUSH
111416: CALL_OW 109
111420: GO 111360
111422: POP
111423: POP
// if not solds then
111424: LD_VAR 0 2
111428: NOT
111429: IFFALSE 111433
// exit ;
111431: GO 111854
// repeat wait ( 0 0$2 ) ;
111433: LD_INT 70
111435: PPUSH
111436: CALL_OW 67
// enemy := mc_scan [ base ] ;
111440: LD_ADDR_VAR 0 4
111444: PUSH
111445: LD_EXP 73
111449: PUSH
111450: LD_VAR 0 1
111454: ARRAY
111455: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
111456: LD_EXP 50
111460: PUSH
111461: LD_VAR 0 1
111465: ARRAY
111466: NOT
111467: PUSH
111468: LD_EXP 50
111472: PUSH
111473: LD_VAR 0 1
111477: ARRAY
111478: PUSH
111479: EMPTY
111480: EQUAL
111481: OR
111482: IFFALSE 111519
// begin for i in solds do
111484: LD_ADDR_VAR 0 6
111488: PUSH
111489: LD_VAR 0 2
111493: PUSH
111494: FOR_IN
111495: IFFALSE 111508
// ComStop ( i ) ;
111497: LD_VAR 0 6
111501: PPUSH
111502: CALL_OW 141
111506: GO 111494
111508: POP
111509: POP
// solds := [ ] ;
111510: LD_ADDR_VAR 0 2
111514: PUSH
111515: EMPTY
111516: ST_TO_ADDR
// exit ;
111517: GO 111854
// end ; for i in solds do
111519: LD_ADDR_VAR 0 6
111523: PUSH
111524: LD_VAR 0 2
111528: PUSH
111529: FOR_IN
111530: IFFALSE 111826
// begin if IsInUnit ( i ) then
111532: LD_VAR 0 6
111536: PPUSH
111537: CALL_OW 310
111541: IFFALSE 111552
// ComExitBuilding ( i ) ;
111543: LD_VAR 0 6
111547: PPUSH
111548: CALL_OW 122
// if GetLives ( i ) > 333 then
111552: LD_VAR 0 6
111556: PPUSH
111557: CALL_OW 256
111561: PUSH
111562: LD_INT 333
111564: GREATER
111565: IFFALSE 111593
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
111567: LD_VAR 0 6
111571: PPUSH
111572: LD_VAR 0 4
111576: PPUSH
111577: LD_VAR 0 6
111581: PPUSH
111582: CALL_OW 74
111586: PPUSH
111587: CALL_OW 115
111591: GO 111824
// if GetDistUnits ( i , NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ) > 10 then
111593: LD_VAR 0 6
111597: PPUSH
111598: LD_EXP 50
111602: PUSH
111603: LD_VAR 0 1
111607: ARRAY
111608: PPUSH
111609: LD_INT 2
111611: PUSH
111612: LD_INT 30
111614: PUSH
111615: LD_INT 0
111617: PUSH
111618: EMPTY
111619: LIST
111620: LIST
111621: PUSH
111622: LD_INT 30
111624: PUSH
111625: LD_INT 1
111627: PUSH
111628: EMPTY
111629: LIST
111630: LIST
111631: PUSH
111632: LD_INT 30
111634: PUSH
111635: LD_INT 6
111637: PUSH
111638: EMPTY
111639: LIST
111640: LIST
111641: PUSH
111642: EMPTY
111643: LIST
111644: LIST
111645: LIST
111646: LIST
111647: PPUSH
111648: CALL_OW 72
111652: PPUSH
111653: LD_VAR 0 6
111657: PPUSH
111658: CALL_OW 74
111662: PPUSH
111663: CALL_OW 296
111667: PUSH
111668: LD_INT 10
111670: GREATER
111671: IFFALSE 111824
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
111673: LD_ADDR_VAR 0 7
111677: PUSH
111678: LD_EXP 50
111682: PUSH
111683: LD_VAR 0 1
111687: ARRAY
111688: PPUSH
111689: LD_INT 2
111691: PUSH
111692: LD_INT 30
111694: PUSH
111695: LD_INT 0
111697: PUSH
111698: EMPTY
111699: LIST
111700: LIST
111701: PUSH
111702: LD_INT 30
111704: PUSH
111705: LD_INT 1
111707: PUSH
111708: EMPTY
111709: LIST
111710: LIST
111711: PUSH
111712: LD_INT 30
111714: PUSH
111715: LD_INT 6
111717: PUSH
111718: EMPTY
111719: LIST
111720: LIST
111721: PUSH
111722: EMPTY
111723: LIST
111724: LIST
111725: LIST
111726: LIST
111727: PPUSH
111728: CALL_OW 72
111732: PPUSH
111733: LD_VAR 0 6
111737: PPUSH
111738: CALL_OW 74
111742: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
111743: LD_VAR 0 6
111747: PPUSH
111748: LD_VAR 0 7
111752: PPUSH
111753: CALL_OW 250
111757: PPUSH
111758: LD_INT 3
111760: PPUSH
111761: LD_INT 5
111763: PPUSH
111764: CALL_OW 272
111768: PPUSH
111769: LD_VAR 0 7
111773: PPUSH
111774: CALL_OW 251
111778: PPUSH
111779: LD_INT 3
111781: PPUSH
111782: LD_INT 5
111784: PPUSH
111785: CALL_OW 273
111789: PPUSH
111790: CALL_OW 111
// SetTag ( i , 0 ) ;
111794: LD_VAR 0 6
111798: PPUSH
111799: LD_INT 0
111801: PPUSH
111802: CALL_OW 109
// solds := solds diff i ;
111806: LD_ADDR_VAR 0 2
111810: PUSH
111811: LD_VAR 0 2
111815: PUSH
111816: LD_VAR 0 6
111820: DIFF
111821: ST_TO_ADDR
// continue ;
111822: GO 111529
// end ; end ;
111824: GO 111529
111826: POP
111827: POP
// until not solds or not enemy ;
111828: LD_VAR 0 2
111832: NOT
111833: PUSH
111834: LD_VAR 0 4
111838: NOT
111839: OR
111840: IFFALSE 111433
// MC_Reset ( base , 18 ) ;
111842: LD_VAR 0 1
111846: PPUSH
111847: LD_INT 18
111849: PPUSH
111850: CALL 63068 0 2
// end ;
111854: LD_VAR 0 3
111858: RET
// export function Defend ( base , defenders ) ; var i , j , x , depot , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend , class , enemy ; begin
111859: LD_INT 0
111861: PPUSH
111862: PPUSH
111863: PPUSH
111864: PPUSH
111865: PPUSH
111866: PPUSH
111867: PPUSH
111868: PPUSH
111869: PPUSH
111870: PPUSH
111871: PPUSH
111872: PPUSH
111873: PPUSH
111874: PPUSH
111875: PPUSH
111876: PPUSH
111877: PPUSH
111878: PPUSH
111879: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
111880: LD_ADDR_VAR 0 12
111884: PUSH
111885: LD_EXP 50
111889: PUSH
111890: LD_VAR 0 1
111894: ARRAY
111895: PPUSH
111896: LD_INT 25
111898: PUSH
111899: LD_INT 3
111901: PUSH
111902: EMPTY
111903: LIST
111904: LIST
111905: PPUSH
111906: CALL_OW 72
111910: ST_TO_ADDR
// if mc_remote_driver [ base ] then
111911: LD_EXP 90
111915: PUSH
111916: LD_VAR 0 1
111920: ARRAY
111921: IFFALSE 111945
// mechs := mechs diff mc_remote_driver [ base ] ;
111923: LD_ADDR_VAR 0 12
111927: PUSH
111928: LD_VAR 0 12
111932: PUSH
111933: LD_EXP 90
111937: PUSH
111938: LD_VAR 0 1
111942: ARRAY
111943: DIFF
111944: ST_TO_ADDR
// for i in mechs do
111945: LD_ADDR_VAR 0 4
111949: PUSH
111950: LD_VAR 0 12
111954: PUSH
111955: FOR_IN
111956: IFFALSE 111991
// if GetTag ( i ) > 0 then
111958: LD_VAR 0 4
111962: PPUSH
111963: CALL_OW 110
111967: PUSH
111968: LD_INT 0
111970: GREATER
111971: IFFALSE 111989
// mechs := mechs diff i ;
111973: LD_ADDR_VAR 0 12
111977: PUSH
111978: LD_VAR 0 12
111982: PUSH
111983: LD_VAR 0 4
111987: DIFF
111988: ST_TO_ADDR
111989: GO 111955
111991: POP
111992: POP
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
111993: LD_ADDR_VAR 0 8
111997: PUSH
111998: LD_EXP 50
112002: PUSH
112003: LD_VAR 0 1
112007: ARRAY
112008: PPUSH
112009: LD_INT 2
112011: PUSH
112012: LD_INT 25
112014: PUSH
112015: LD_INT 1
112017: PUSH
112018: EMPTY
112019: LIST
112020: LIST
112021: PUSH
112022: LD_INT 25
112024: PUSH
112025: LD_INT 5
112027: PUSH
112028: EMPTY
112029: LIST
112030: LIST
112031: PUSH
112032: LD_INT 25
112034: PUSH
112035: LD_INT 8
112037: PUSH
112038: EMPTY
112039: LIST
112040: LIST
112041: PUSH
112042: LD_INT 25
112044: PUSH
112045: LD_INT 9
112047: PUSH
112048: EMPTY
112049: LIST
112050: LIST
112051: PUSH
112052: EMPTY
112053: LIST
112054: LIST
112055: LIST
112056: LIST
112057: LIST
112058: PPUSH
112059: CALL_OW 72
112063: ST_TO_ADDR
// if not defenders and not solds then
112064: LD_VAR 0 2
112068: NOT
112069: PUSH
112070: LD_VAR 0 8
112074: NOT
112075: AND
112076: IFFALSE 112080
// exit ;
112078: GO 113850
// depot_under_attack := false ;
112080: LD_ADDR_VAR 0 16
112084: PUSH
112085: LD_INT 0
112087: ST_TO_ADDR
// sold_defenders := [ ] ;
112088: LD_ADDR_VAR 0 17
112092: PUSH
112093: EMPTY
112094: ST_TO_ADDR
// if mechs then
112095: LD_VAR 0 12
112099: IFFALSE 112252
// for i in UnitFilter ( defenders , [ f_type , unit_vehicle ] ) do
112101: LD_ADDR_VAR 0 4
112105: PUSH
112106: LD_VAR 0 2
112110: PPUSH
112111: LD_INT 21
112113: PUSH
112114: LD_INT 2
112116: PUSH
112117: EMPTY
112118: LIST
112119: LIST
112120: PPUSH
112121: CALL_OW 72
112125: PUSH
112126: FOR_IN
112127: IFFALSE 112250
// begin if GetTag ( i ) <> 20 then
112129: LD_VAR 0 4
112133: PPUSH
112134: CALL_OW 110
112138: PUSH
112139: LD_INT 20
112141: NONEQUAL
112142: IFFALSE 112156
// SetTag ( i , 20 ) ;
112144: LD_VAR 0 4
112148: PPUSH
112149: LD_INT 20
112151: PPUSH
112152: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) then
112156: LD_VAR 0 4
112160: PPUSH
112161: CALL_OW 263
112165: PUSH
112166: LD_INT 1
112168: EQUAL
112169: PUSH
112170: LD_VAR 0 4
112174: PPUSH
112175: CALL_OW 311
112179: NOT
112180: AND
112181: IFFALSE 112248
// begin un := mechs [ 1 ] ;
112183: LD_ADDR_VAR 0 10
112187: PUSH
112188: LD_VAR 0 12
112192: PUSH
112193: LD_INT 1
112195: ARRAY
112196: ST_TO_ADDR
// ComExit ( un ) ;
112197: LD_VAR 0 10
112201: PPUSH
112202: CALL 56997 0 1
// AddComEnterUnit ( un , i ) ;
112206: LD_VAR 0 10
112210: PPUSH
112211: LD_VAR 0 4
112215: PPUSH
112216: CALL_OW 180
// SetTag ( un , 19 ) ;
112220: LD_VAR 0 10
112224: PPUSH
112225: LD_INT 19
112227: PPUSH
112228: CALL_OW 109
// mechs := mechs diff un ;
112232: LD_ADDR_VAR 0 12
112236: PUSH
112237: LD_VAR 0 12
112241: PUSH
112242: LD_VAR 0 10
112246: DIFF
112247: ST_TO_ADDR
// end ; end ;
112248: GO 112126
112250: POP
112251: POP
// if solds then
112252: LD_VAR 0 8
112256: IFFALSE 112315
// for i in solds do
112258: LD_ADDR_VAR 0 4
112262: PUSH
112263: LD_VAR 0 8
112267: PUSH
112268: FOR_IN
112269: IFFALSE 112313
// if not GetTag ( i ) then
112271: LD_VAR 0 4
112275: PPUSH
112276: CALL_OW 110
112280: NOT
112281: IFFALSE 112311
// begin defenders := defenders union i ;
112283: LD_ADDR_VAR 0 2
112287: PUSH
112288: LD_VAR 0 2
112292: PUSH
112293: LD_VAR 0 4
112297: UNION
112298: ST_TO_ADDR
// SetTag ( i , 18 ) ;
112299: LD_VAR 0 4
112303: PPUSH
112304: LD_INT 18
112306: PPUSH
112307: CALL_OW 109
// end ;
112311: GO 112268
112313: POP
112314: POP
// repeat wait ( 0 0$2 ) ;
112315: LD_INT 70
112317: PPUSH
112318: CALL_OW 67
// enemy := mc_scan [ base ] ;
112322: LD_ADDR_VAR 0 21
112326: PUSH
112327: LD_EXP 73
112331: PUSH
112332: LD_VAR 0 1
112336: ARRAY
112337: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
112338: LD_EXP 50
112342: PUSH
112343: LD_VAR 0 1
112347: ARRAY
112348: NOT
112349: PUSH
112350: LD_EXP 50
112354: PUSH
112355: LD_VAR 0 1
112359: ARRAY
112360: PUSH
112361: EMPTY
112362: EQUAL
112363: OR
112364: IFFALSE 112401
// begin for i in defenders do
112366: LD_ADDR_VAR 0 4
112370: PUSH
112371: LD_VAR 0 2
112375: PUSH
112376: FOR_IN
112377: IFFALSE 112390
// ComStop ( i ) ;
112379: LD_VAR 0 4
112383: PPUSH
112384: CALL_OW 141
112388: GO 112376
112390: POP
112391: POP
// defenders := [ ] ;
112392: LD_ADDR_VAR 0 2
112396: PUSH
112397: EMPTY
112398: ST_TO_ADDR
// exit ;
112399: GO 113850
// end ; for i in defenders do
112401: LD_ADDR_VAR 0 4
112405: PUSH
112406: LD_VAR 0 2
112410: PUSH
112411: FOR_IN
112412: IFFALSE 113310
// begin e := NearestUnitToUnit ( enemy , i ) ;
112414: LD_ADDR_VAR 0 13
112418: PUSH
112419: LD_VAR 0 21
112423: PPUSH
112424: LD_VAR 0 4
112428: PPUSH
112429: CALL_OW 74
112433: ST_TO_ADDR
// depot := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
112434: LD_ADDR_VAR 0 7
112438: PUSH
112439: LD_EXP 50
112443: PUSH
112444: LD_VAR 0 1
112448: ARRAY
112449: PPUSH
112450: LD_INT 2
112452: PUSH
112453: LD_INT 30
112455: PUSH
112456: LD_INT 0
112458: PUSH
112459: EMPTY
112460: LIST
112461: LIST
112462: PUSH
112463: LD_INT 30
112465: PUSH
112466: LD_INT 1
112468: PUSH
112469: EMPTY
112470: LIST
112471: LIST
112472: PUSH
112473: EMPTY
112474: LIST
112475: LIST
112476: LIST
112477: PPUSH
112478: CALL_OW 72
112482: ST_TO_ADDR
// depot_under_attack := ( not depot or UnitFilter ( depot , [ f_not , [ f_lives , 600 ] ] ) ) ;
112483: LD_ADDR_VAR 0 16
112487: PUSH
112488: LD_VAR 0 7
112492: NOT
112493: PUSH
112494: LD_VAR 0 7
112498: PPUSH
112499: LD_INT 3
112501: PUSH
112502: LD_INT 24
112504: PUSH
112505: LD_INT 600
112507: PUSH
112508: EMPTY
112509: LIST
112510: LIST
112511: PUSH
112512: EMPTY
112513: LIST
112514: LIST
112515: PPUSH
112516: CALL_OW 72
112520: OR
112521: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
112522: LD_VAR 0 4
112526: PPUSH
112527: CALL_OW 247
112531: PUSH
112532: LD_INT 2
112534: DOUBLE
112535: EQUAL
112536: IFTRUE 112540
112538: GO 112936
112540: POP
// begin if GetLives ( i ) = 1000 and ( GetDistUnits ( i , e ) < 40 or IsInArea ( e , mc_scan_area [ base ] ) ) then
112541: LD_VAR 0 4
112545: PPUSH
112546: CALL_OW 256
112550: PUSH
112551: LD_INT 1000
112553: EQUAL
112554: PUSH
112555: LD_VAR 0 4
112559: PPUSH
112560: LD_VAR 0 13
112564: PPUSH
112565: CALL_OW 296
112569: PUSH
112570: LD_INT 40
112572: LESS
112573: PUSH
112574: LD_VAR 0 13
112578: PPUSH
112579: LD_EXP 75
112583: PUSH
112584: LD_VAR 0 1
112588: ARRAY
112589: PPUSH
112590: CALL_OW 308
112594: OR
112595: AND
112596: IFFALSE 112718
// begin if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 30 and depot then
112598: LD_VAR 0 4
112602: PPUSH
112603: CALL_OW 262
112607: PUSH
112608: LD_INT 1
112610: EQUAL
112611: PUSH
112612: LD_VAR 0 4
112616: PPUSH
112617: CALL_OW 261
112621: PUSH
112622: LD_INT 30
112624: LESS
112625: AND
112626: PUSH
112627: LD_VAR 0 7
112631: AND
112632: IFFALSE 112702
// begin ComMoveUnit ( i , NearestUnitToUnit ( depot , i ) ) ;
112634: LD_VAR 0 4
112638: PPUSH
112639: LD_VAR 0 7
112643: PPUSH
112644: LD_VAR 0 4
112648: PPUSH
112649: CALL_OW 74
112653: PPUSH
112654: CALL_OW 112
// if GetDistUnits ( i , NearestUnitToUnit ( depot , i ) ) < 6 then
112658: LD_VAR 0 4
112662: PPUSH
112663: LD_VAR 0 7
112667: PPUSH
112668: LD_VAR 0 4
112672: PPUSH
112673: CALL_OW 74
112677: PPUSH
112678: CALL_OW 296
112682: PUSH
112683: LD_INT 6
112685: LESS
112686: IFFALSE 112700
// SetFuel ( i , 100 ) ;
112688: LD_VAR 0 4
112692: PPUSH
112693: LD_INT 100
112695: PPUSH
112696: CALL_OW 240
// end else
112700: GO 112716
// ComAttackUnit ( i , e ) ;
112702: LD_VAR 0 4
112706: PPUSH
112707: LD_VAR 0 13
112711: PPUSH
112712: CALL_OW 115
// end else
112716: GO 112819
// if ( ( not IsInArea ( e , mc_scan_area [ base ] ) and GetDistUnits ( i , e ) >= 40 ) or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
112718: LD_VAR 0 13
112722: PPUSH
112723: LD_EXP 75
112727: PUSH
112728: LD_VAR 0 1
112732: ARRAY
112733: PPUSH
112734: CALL_OW 308
112738: NOT
112739: PUSH
112740: LD_VAR 0 4
112744: PPUSH
112745: LD_VAR 0 13
112749: PPUSH
112750: CALL_OW 296
112754: PUSH
112755: LD_INT 40
112757: GREATEREQUAL
112758: AND
112759: PUSH
112760: LD_VAR 0 4
112764: PPUSH
112765: CALL_OW 256
112769: PUSH
112770: LD_INT 650
112772: LESSEQUAL
112773: OR
112774: PUSH
112775: LD_VAR 0 4
112779: PPUSH
112780: LD_EXP 74
112784: PUSH
112785: LD_VAR 0 1
112789: ARRAY
112790: PPUSH
112791: CALL_OW 308
112795: NOT
112796: AND
112797: IFFALSE 112819
// ComMoveToArea ( i , mc_parking [ base ] ) ;
112799: LD_VAR 0 4
112803: PPUSH
112804: LD_EXP 74
112808: PUSH
112809: LD_VAR 0 1
112813: ARRAY
112814: PPUSH
112815: CALL_OW 113
// if GetLives ( i ) < 1000 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
112819: LD_VAR 0 4
112823: PPUSH
112824: CALL_OW 256
112828: PUSH
112829: LD_INT 1000
112831: LESS
112832: PUSH
112833: LD_VAR 0 4
112837: PPUSH
112838: CALL_OW 263
112842: PUSH
112843: LD_INT 1
112845: EQUAL
112846: AND
112847: PUSH
112848: LD_VAR 0 4
112852: PPUSH
112853: CALL_OW 311
112857: AND
112858: PUSH
112859: LD_VAR 0 4
112863: PPUSH
112864: LD_EXP 74
112868: PUSH
112869: LD_VAR 0 1
112873: ARRAY
112874: PPUSH
112875: CALL_OW 308
112879: AND
112880: IFFALSE 112934
// begin mech := IsDrivenBy ( i ) ;
112882: LD_ADDR_VAR 0 9
112886: PUSH
112887: LD_VAR 0 4
112891: PPUSH
112892: CALL_OW 311
112896: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
112897: LD_VAR 0 9
112901: PPUSH
112902: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
112906: LD_VAR 0 9
112910: PPUSH
112911: LD_VAR 0 4
112915: PPUSH
112916: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
112920: LD_VAR 0 9
112924: PPUSH
112925: LD_VAR 0 4
112929: PPUSH
112930: CALL_OW 180
// end ; end ; unit_human :
112934: GO 113281
112936: LD_INT 1
112938: DOUBLE
112939: EQUAL
112940: IFTRUE 112944
112942: GO 113280
112944: POP
// begin b := IsInUnit ( i ) ;
112945: LD_ADDR_VAR 0 18
112949: PUSH
112950: LD_VAR 0 4
112954: PPUSH
112955: CALL_OW 310
112959: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
112960: LD_ADDR_VAR 0 19
112964: PUSH
112965: LD_VAR 0 18
112969: NOT
112970: PUSH
112971: LD_VAR 0 18
112975: PPUSH
112976: CALL_OW 266
112980: PUSH
112981: LD_INT 32
112983: PUSH
112984: LD_INT 31
112986: PUSH
112987: EMPTY
112988: LIST
112989: LIST
112990: IN
112991: OR
112992: ST_TO_ADDR
// if GetBType ( b ) = b_barracks and GetClass ( i ) in [ 1 , 2 , 3 , 4 ] then
112993: LD_VAR 0 18
112997: PPUSH
112998: CALL_OW 266
113002: PUSH
113003: LD_INT 5
113005: EQUAL
113006: PUSH
113007: LD_VAR 0 4
113011: PPUSH
113012: CALL_OW 257
113016: PUSH
113017: LD_INT 1
113019: PUSH
113020: LD_INT 2
113022: PUSH
113023: LD_INT 3
113025: PUSH
113026: LD_INT 4
113028: PUSH
113029: EMPTY
113030: LIST
113031: LIST
113032: LIST
113033: LIST
113034: IN
113035: AND
113036: IFFALSE 113073
// begin class := AllowSpecClass ( i ) ;
113038: LD_ADDR_VAR 0 20
113042: PUSH
113043: LD_VAR 0 4
113047: PPUSH
113048: CALL 21658 0 1
113052: ST_TO_ADDR
// if class then
113053: LD_VAR 0 20
113057: IFFALSE 113073
// ComChangeProfession ( i , class ) ;
113059: LD_VAR 0 4
113063: PPUSH
113064: LD_VAR 0 20
113068: PPUSH
113069: CALL_OW 123
// end ; if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
113073: LD_VAR 0 16
113077: PUSH
113078: LD_VAR 0 2
113082: PPUSH
113083: LD_INT 21
113085: PUSH
113086: LD_INT 2
113088: PUSH
113089: EMPTY
113090: LIST
113091: LIST
113092: PPUSH
113093: CALL_OW 72
113097: PUSH
113098: LD_INT 1
113100: LESSEQUAL
113101: OR
113102: PUSH
113103: LD_VAR 0 19
113107: AND
113108: PUSH
113109: LD_VAR 0 4
113113: PUSH
113114: LD_VAR 0 17
113118: IN
113119: NOT
113120: AND
113121: IFFALSE 113214
// begin if b then
113123: LD_VAR 0 18
113127: IFFALSE 113176
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
113129: LD_VAR 0 18
113133: PPUSH
113134: LD_VAR 0 21
113138: PPUSH
113139: LD_VAR 0 18
113143: PPUSH
113144: CALL_OW 74
113148: PPUSH
113149: CALL_OW 296
113153: PUSH
113154: LD_INT 10
113156: LESS
113157: PUSH
113158: LD_VAR 0 18
113162: PPUSH
113163: CALL_OW 461
113167: PUSH
113168: LD_INT 7
113170: NONEQUAL
113171: AND
113172: IFFALSE 113176
// continue ;
113174: GO 112411
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
113176: LD_ADDR_VAR 0 17
113180: PUSH
113181: LD_VAR 0 17
113185: PPUSH
113186: LD_VAR 0 17
113190: PUSH
113191: LD_INT 1
113193: PLUS
113194: PPUSH
113195: LD_VAR 0 4
113199: PPUSH
113200: CALL_OW 1
113204: ST_TO_ADDR
// ComExitBuilding ( i ) ;
113205: LD_VAR 0 4
113209: PPUSH
113210: CALL_OW 122
// end ; if sold_defenders then
113214: LD_VAR 0 17
113218: IFFALSE 113278
// if i in sold_defenders then
113220: LD_VAR 0 4
113224: PUSH
113225: LD_VAR 0 17
113229: IN
113230: IFFALSE 113278
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
113232: LD_VAR 0 4
113236: PPUSH
113237: CALL_OW 314
113241: NOT
113242: PUSH
113243: LD_VAR 0 4
113247: PPUSH
113248: LD_VAR 0 13
113252: PPUSH
113253: CALL_OW 296
113257: PUSH
113258: LD_INT 30
113260: LESS
113261: AND
113262: IFFALSE 113278
// ComAttackUnit ( i , e ) ;
113264: LD_VAR 0 4
113268: PPUSH
113269: LD_VAR 0 13
113273: PPUSH
113274: CALL_OW 115
// end ; end ; end ;
113278: GO 113281
113280: POP
// if IsDead ( i ) then
113281: LD_VAR 0 4
113285: PPUSH
113286: CALL_OW 301
113290: IFFALSE 113308
// defenders := defenders diff i ;
113292: LD_ADDR_VAR 0 2
113296: PUSH
113297: LD_VAR 0 2
113301: PUSH
113302: LD_VAR 0 4
113306: DIFF
113307: ST_TO_ADDR
// end ;
113308: GO 112411
113310: POP
113311: POP
// until not enemy or not defenders or not mc_bases [ base ] ;
113312: LD_VAR 0 21
113316: NOT
113317: PUSH
113318: LD_VAR 0 2
113322: NOT
113323: OR
113324: PUSH
113325: LD_EXP 50
113329: PUSH
113330: LD_VAR 0 1
113334: ARRAY
113335: NOT
113336: OR
113337: IFFALSE 112315
// MC_Reset ( base , 18 ) ;
113339: LD_VAR 0 1
113343: PPUSH
113344: LD_INT 18
113346: PPUSH
113347: CALL 63068 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
113351: LD_ADDR_VAR 0 2
113355: PUSH
113356: LD_VAR 0 2
113360: PUSH
113361: LD_VAR 0 2
113365: PPUSH
113366: LD_INT 2
113368: PUSH
113369: LD_INT 25
113371: PUSH
113372: LD_INT 1
113374: PUSH
113375: EMPTY
113376: LIST
113377: LIST
113378: PUSH
113379: LD_INT 25
113381: PUSH
113382: LD_INT 5
113384: PUSH
113385: EMPTY
113386: LIST
113387: LIST
113388: PUSH
113389: LD_INT 25
113391: PUSH
113392: LD_INT 8
113394: PUSH
113395: EMPTY
113396: LIST
113397: LIST
113398: PUSH
113399: LD_INT 25
113401: PUSH
113402: LD_INT 9
113404: PUSH
113405: EMPTY
113406: LIST
113407: LIST
113408: PUSH
113409: EMPTY
113410: LIST
113411: LIST
113412: LIST
113413: LIST
113414: LIST
113415: PPUSH
113416: CALL_OW 72
113420: DIFF
113421: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
113422: LD_VAR 0 21
113426: NOT
113427: PUSH
113428: LD_VAR 0 2
113432: PPUSH
113433: LD_INT 21
113435: PUSH
113436: LD_INT 2
113438: PUSH
113439: EMPTY
113440: LIST
113441: LIST
113442: PPUSH
113443: CALL_OW 72
113447: AND
113448: IFFALSE 113786
// begin tmp := FilterByTag ( defenders , 19 ) ;
113450: LD_ADDR_VAR 0 11
113454: PUSH
113455: LD_VAR 0 2
113459: PPUSH
113460: LD_INT 19
113462: PPUSH
113463: CALL 54127 0 2
113467: ST_TO_ADDR
// if tmp then
113468: LD_VAR 0 11
113472: IFFALSE 113542
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
113474: LD_ADDR_VAR 0 11
113478: PUSH
113479: LD_VAR 0 11
113483: PPUSH
113484: LD_INT 25
113486: PUSH
113487: LD_INT 3
113489: PUSH
113490: EMPTY
113491: LIST
113492: LIST
113493: PPUSH
113494: CALL_OW 72
113498: ST_TO_ADDR
// if tmp then
113499: LD_VAR 0 11
113503: IFFALSE 113542
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
113505: LD_ADDR_EXP 62
113509: PUSH
113510: LD_EXP 62
113514: PPUSH
113515: LD_VAR 0 1
113519: PPUSH
113520: LD_EXP 62
113524: PUSH
113525: LD_VAR 0 1
113529: ARRAY
113530: PUSH
113531: LD_VAR 0 11
113535: UNION
113536: PPUSH
113537: CALL_OW 1
113541: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
113542: LD_VAR 0 1
113546: PPUSH
113547: LD_INT 19
113549: PPUSH
113550: CALL 63068 0 2
// repeat wait ( 0 0$1 ) ;
113554: LD_INT 35
113556: PPUSH
113557: CALL_OW 67
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
113561: LD_EXP 50
113565: PUSH
113566: LD_VAR 0 1
113570: ARRAY
113571: NOT
113572: PUSH
113573: LD_EXP 50
113577: PUSH
113578: LD_VAR 0 1
113582: ARRAY
113583: PUSH
113584: EMPTY
113585: EQUAL
113586: OR
113587: IFFALSE 113624
// begin for i in defenders do
113589: LD_ADDR_VAR 0 4
113593: PUSH
113594: LD_VAR 0 2
113598: PUSH
113599: FOR_IN
113600: IFFALSE 113613
// ComStop ( i ) ;
113602: LD_VAR 0 4
113606: PPUSH
113607: CALL_OW 141
113611: GO 113599
113613: POP
113614: POP
// defenders := [ ] ;
113615: LD_ADDR_VAR 0 2
113619: PUSH
113620: EMPTY
113621: ST_TO_ADDR
// exit ;
113622: GO 113850
// end ; for i in defenders do
113624: LD_ADDR_VAR 0 4
113628: PUSH
113629: LD_VAR 0 2
113633: PUSH
113634: FOR_IN
113635: IFFALSE 113724
// begin if not IsInArea ( i , mc_parking [ base ] ) then
113637: LD_VAR 0 4
113641: PPUSH
113642: LD_EXP 74
113646: PUSH
113647: LD_VAR 0 1
113651: ARRAY
113652: PPUSH
113653: CALL_OW 308
113657: NOT
113658: IFFALSE 113682
// ComMoveToArea ( i , mc_parking [ base ] ) else
113660: LD_VAR 0 4
113664: PPUSH
113665: LD_EXP 74
113669: PUSH
113670: LD_VAR 0 1
113674: ARRAY
113675: PPUSH
113676: CALL_OW 113
113680: GO 113722
// if GetControl ( i ) = control_manual then
113682: LD_VAR 0 4
113686: PPUSH
113687: CALL_OW 263
113691: PUSH
113692: LD_INT 1
113694: EQUAL
113695: IFFALSE 113722
// if IsDrivenBy ( i ) then
113697: LD_VAR 0 4
113701: PPUSH
113702: CALL_OW 311
113706: IFFALSE 113722
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
113708: LD_VAR 0 4
113712: PPUSH
113713: CALL_OW 311
113717: PPUSH
113718: CALL_OW 121
// end ;
113722: GO 113634
113724: POP
113725: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] or not mc_bases [ base ] ;
113726: LD_VAR 0 2
113730: PPUSH
113731: LD_INT 95
113733: PUSH
113734: LD_EXP 74
113738: PUSH
113739: LD_VAR 0 1
113743: ARRAY
113744: PUSH
113745: EMPTY
113746: LIST
113747: LIST
113748: PPUSH
113749: CALL_OW 72
113753: PUSH
113754: LD_VAR 0 2
113758: EQUAL
113759: PUSH
113760: LD_EXP 73
113764: PUSH
113765: LD_VAR 0 1
113769: ARRAY
113770: OR
113771: PUSH
113772: LD_EXP 50
113776: PUSH
113777: LD_VAR 0 1
113781: ARRAY
113782: NOT
113783: OR
113784: IFFALSE 113554
// end ; mc_defender := Replace ( mc_defender , base , UnitFilter ( defenders , [ f_type , unit_vehicle ] ) ) ;
113786: LD_ADDR_EXP 72
113790: PUSH
113791: LD_EXP 72
113795: PPUSH
113796: LD_VAR 0 1
113800: PPUSH
113801: LD_VAR 0 2
113805: PPUSH
113806: LD_INT 21
113808: PUSH
113809: LD_INT 2
113811: PUSH
113812: EMPTY
113813: LIST
113814: LIST
113815: PPUSH
113816: CALL_OW 72
113820: PPUSH
113821: CALL_OW 1
113825: ST_TO_ADDR
// MC_Reset ( base , 19 ) ;
113826: LD_VAR 0 1
113830: PPUSH
113831: LD_INT 19
113833: PPUSH
113834: CALL 63068 0 2
// MC_Reset ( base , 20 ) ;
113838: LD_VAR 0 1
113842: PPUSH
113843: LD_INT 20
113845: PPUSH
113846: CALL 63068 0 2
// end ; end_of_file
113850: LD_VAR 0 3
113854: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
113855: LD_VAR 0 1
113859: PUSH
113860: LD_INT 200
113862: DOUBLE
113863: GREATEREQUAL
113864: IFFALSE 113872
113866: LD_INT 299
113868: DOUBLE
113869: LESSEQUAL
113870: IFTRUE 113874
113872: GO 113906
113874: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
113875: LD_VAR 0 1
113879: PPUSH
113880: LD_VAR 0 2
113884: PPUSH
113885: LD_VAR 0 3
113889: PPUSH
113890: LD_VAR 0 4
113894: PPUSH
113895: LD_VAR 0 5
113899: PPUSH
113900: CALL 102697 0 5
113904: GO 113983
113906: LD_INT 300
113908: DOUBLE
113909: GREATEREQUAL
113910: IFFALSE 113918
113912: LD_INT 399
113914: DOUBLE
113915: LESSEQUAL
113916: IFTRUE 113920
113918: GO 113982
113920: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
113921: LD_VAR 0 1
113925: PPUSH
113926: LD_VAR 0 2
113930: PPUSH
113931: LD_VAR 0 3
113935: PPUSH
113936: LD_VAR 0 4
113940: PPUSH
113941: LD_VAR 0 5
113945: PPUSH
113946: LD_VAR 0 6
113950: PPUSH
113951: LD_VAR 0 7
113955: PPUSH
113956: LD_VAR 0 8
113960: PPUSH
113961: LD_VAR 0 9
113965: PPUSH
113966: LD_VAR 0 10
113970: PPUSH
113971: LD_VAR 0 11
113975: PPUSH
113976: CALL 100585 0 11
113980: GO 113983
113982: POP
// end ;
113983: PPOPN 11
113985: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
113986: LD_VAR 0 1
113990: PPUSH
113991: LD_VAR 0 2
113995: PPUSH
113996: LD_VAR 0 3
114000: PPUSH
114001: LD_VAR 0 4
114005: PPUSH
114006: LD_VAR 0 5
114010: PPUSH
114011: CALL 102679 0 5
// end ; end_of_file
114015: PPOPN 5
114017: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
114018: LD_VAR 0 1
114022: PPUSH
114023: LD_VAR 0 2
114027: PPUSH
114028: LD_VAR 0 3
114032: PPUSH
114033: LD_VAR 0 4
114037: PPUSH
114038: LD_VAR 0 5
114042: PPUSH
114043: LD_VAR 0 6
114047: PPUSH
114048: CALL 89393 0 6
// end ;
114052: PPOPN 6
114054: END
