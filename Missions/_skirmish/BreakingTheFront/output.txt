// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// InitSettings ;
  11: CALL 51 0 0
// if debug then
  15: LD_EXP 1
  19: IFFALSE 38
// begin PlaceSeeing ( 1 , 1 , 1 , - 372963 ) ;
  21: LD_INT 1
  23: PPUSH
  24: LD_INT 1
  26: PPUSH
  27: LD_INT 1
  29: PPUSH
  30: LD_INT 372963
  32: NEG
  33: PPUSH
  34: CALL_OW 330
// end ; SetTechnologies ;
  38: CALL 602 0 0
// SetDiplomacy ;
  42: CALL 814 0 0
// PrepareGame ;
  46: CALL 896 0 0
// end ;
  50: END
// export debug , GameType , game , disableGlobalTimer ; export mc_amer , mc_leg , mc_rus_1 , mc_rus_2 ; export playerCommander , playerForces , allyCommander , Powell , Farmer , ruOutpost , ruEscape , staticMines , baseCaptured , legDestCounter , cratesSpawns , legOfferAccepted , legChangeSide , allyDestCounter , sibBombAllowed , reinforceAllowed , commander , cratesSpawn , outpostEscape , dialogueMineDetected ; end_of_file export function InitSettings ; begin
  51: LD_INT 0
  53: PPUSH
// debug := false ;
  54: LD_ADDR_EXP 1
  58: PUSH
  59: LD_INT 0
  61: ST_TO_ADDR
// GameType := 1 ;
  62: LD_ADDR_EXP 2
  66: PUSH
  67: LD_INT 1
  69: ST_TO_ADDR
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  70: LD_ADDR_OWVAR 67
  74: PUSH
  75: LD_INT 0
  77: PPUSH
  78: CALL_OW 426
  82: ST_TO_ADDR
// sibBombAllowed := GetMultiPlayerSetting ( 1 ) - 1 ;
  83: LD_ADDR_EXP 23
  87: PUSH
  88: LD_INT 1
  90: PPUSH
  91: CALL_OW 426
  95: PUSH
  96: LD_INT 1
  98: MINUS
  99: ST_TO_ADDR
// reinforceAllowed := GetMultiPlayerSetting ( 2 ) - 1 ;
 100: LD_ADDR_EXP 24
 104: PUSH
 105: LD_INT 2
 107: PPUSH
 108: CALL_OW 426
 112: PUSH
 113: LD_INT 1
 115: MINUS
 116: ST_TO_ADDR
// cratesSpawn := GetMultiPlayerSetting ( 3 ) ;
 117: LD_ADDR_EXP 26
 121: PUSH
 122: LD_INT 3
 124: PPUSH
 125: CALL_OW 426
 129: ST_TO_ADDR
// commander := GetMultiPlayerSetting ( 4 ) ;
 130: LD_ADDR_EXP 25
 134: PUSH
 135: LD_INT 4
 137: PPUSH
 138: CALL_OW 426
 142: ST_TO_ADDR
// if not commander then
 143: LD_EXP 25
 147: NOT
 148: IFFALSE 158
// commander := 3 ;
 150: LD_ADDR_EXP 25
 154: PUSH
 155: LD_INT 3
 157: ST_TO_ADDR
// if not debug then
 158: LD_EXP 1
 162: NOT
 163: IFFALSE 167
// exit ;
 165: GO 224
// display_strings := [ Difficulty:  & Difficulty , sibBomb:  & sibBombAllowed , reinforceAllowed:  & reinforceAllowed , cratesSpawn:  & cratesSpawn , commander:  & commander ] ;
 167: LD_ADDR_OWVAR 47
 171: PUSH
 172: LD_STRING Difficulty: 
 174: PUSH
 175: LD_OWVAR 67
 179: STR
 180: PUSH
 181: LD_STRING sibBomb: 
 183: PUSH
 184: LD_EXP 23
 188: STR
 189: PUSH
 190: LD_STRING reinforceAllowed: 
 192: PUSH
 193: LD_EXP 24
 197: STR
 198: PUSH
 199: LD_STRING cratesSpawn: 
 201: PUSH
 202: LD_EXP 26
 206: STR
 207: PUSH
 208: LD_STRING commander: 
 210: PUSH
 211: LD_EXP 25
 215: STR
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: LIST
 223: ST_TO_ADDR
// end ;
 224: LD_VAR 0 1
 228: RET
// every 0 0$1 trigger game and GameType = 1 and not disableGlobalTimer do
 229: LD_EXP 3
 233: PUSH
 234: LD_EXP 2
 238: PUSH
 239: LD_INT 1
 241: EQUAL
 242: AND
 243: PUSH
 244: LD_EXP 4
 248: NOT
 249: AND
 250: IFFALSE 273
 252: GO 254
 254: DISABLE
// begin enable ;
 255: ENABLE
// display_strings := [ #SkrTime , tick ] ;
 256: LD_ADDR_OWVAR 47
 260: PUSH
 261: LD_STRING #SkrTime
 263: PUSH
 264: LD_OWVAR 1
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: ST_TO_ADDR
// end ;
 273: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 274: LD_EXP 19
 278: PUSH
 279: LD_EXP 3
 283: AND
 284: PUSH
 285: LD_EXP 2
 289: PUSH
 290: LD_INT 1
 292: EQUAL
 293: AND
 294: IFFALSE 355
 296: GO 298
 298: DISABLE
// Crates ( cratesSpawns [ 1 ] [ 1 ] , cratesSpawns [ 1 ] [ 2 ] , cratesSpawns [ 1 ] [ 3 ] , cratesSpawns [ 1 ] [ 4 ] ) ;
 299: LD_EXP 19
 303: PUSH
 304: LD_INT 1
 306: ARRAY
 307: PUSH
 308: LD_INT 1
 310: ARRAY
 311: PPUSH
 312: LD_EXP 19
 316: PUSH
 317: LD_INT 1
 319: ARRAY
 320: PUSH
 321: LD_INT 2
 323: ARRAY
 324: PPUSH
 325: LD_EXP 19
 329: PUSH
 330: LD_INT 1
 332: ARRAY
 333: PUSH
 334: LD_INT 3
 336: ARRAY
 337: PPUSH
 338: LD_EXP 19
 342: PUSH
 343: LD_INT 1
 345: ARRAY
 346: PUSH
 347: LD_INT 4
 349: ARRAY
 350: PPUSH
 351: CALL 61155 0 4
 355: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 356: LD_EXP 19
 360: PUSH
 361: LD_EXP 3
 365: AND
 366: PUSH
 367: LD_EXP 2
 371: PUSH
 372: LD_INT 1
 374: EQUAL
 375: AND
 376: IFFALSE 437
 378: GO 380
 380: DISABLE
// Crates ( cratesSpawns [ 2 ] [ 1 ] , cratesSpawns [ 2 ] [ 2 ] , cratesSpawns [ 2 ] [ 3 ] , cratesSpawns [ 2 ] [ 4 ] ) ;
 381: LD_EXP 19
 385: PUSH
 386: LD_INT 2
 388: ARRAY
 389: PUSH
 390: LD_INT 1
 392: ARRAY
 393: PPUSH
 394: LD_EXP 19
 398: PUSH
 399: LD_INT 2
 401: ARRAY
 402: PUSH
 403: LD_INT 2
 405: ARRAY
 406: PPUSH
 407: LD_EXP 19
 411: PUSH
 412: LD_INT 2
 414: ARRAY
 415: PUSH
 416: LD_INT 3
 418: ARRAY
 419: PPUSH
 420: LD_EXP 19
 424: PUSH
 425: LD_INT 2
 427: ARRAY
 428: PUSH
 429: LD_INT 4
 431: ARRAY
 432: PPUSH
 433: CALL 61155 0 4
 437: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 438: LD_EXP 19
 442: PUSH
 443: LD_EXP 3
 447: AND
 448: PUSH
 449: LD_EXP 2
 453: PUSH
 454: LD_INT 1
 456: EQUAL
 457: AND
 458: IFFALSE 519
 460: GO 462
 462: DISABLE
// Crates ( cratesSpawns [ 3 ] [ 1 ] , cratesSpawns [ 3 ] [ 2 ] , cratesSpawns [ 3 ] [ 3 ] , cratesSpawns [ 3 ] [ 4 ] ) ;
 463: LD_EXP 19
 467: PUSH
 468: LD_INT 3
 470: ARRAY
 471: PUSH
 472: LD_INT 1
 474: ARRAY
 475: PPUSH
 476: LD_EXP 19
 480: PUSH
 481: LD_INT 3
 483: ARRAY
 484: PUSH
 485: LD_INT 2
 487: ARRAY
 488: PPUSH
 489: LD_EXP 19
 493: PUSH
 494: LD_INT 3
 496: ARRAY
 497: PUSH
 498: LD_INT 3
 500: ARRAY
 501: PPUSH
 502: LD_EXP 19
 506: PUSH
 507: LD_INT 3
 509: ARRAY
 510: PUSH
 511: LD_INT 4
 513: ARRAY
 514: PPUSH
 515: CALL 61155 0 4
 519: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 520: LD_EXP 19
 524: PUSH
 525: LD_EXP 3
 529: AND
 530: PUSH
 531: LD_EXP 2
 535: PUSH
 536: LD_INT 1
 538: EQUAL
 539: AND
 540: IFFALSE 601
 542: GO 544
 544: DISABLE
// Crates ( cratesSpawns [ 4 ] [ 1 ] , cratesSpawns [ 4 ] [ 2 ] , cratesSpawns [ 4 ] [ 3 ] , cratesSpawns [ 4 ] [ 4 ] ) ;
 545: LD_EXP 19
 549: PUSH
 550: LD_INT 4
 552: ARRAY
 553: PUSH
 554: LD_INT 1
 556: ARRAY
 557: PPUSH
 558: LD_EXP 19
 562: PUSH
 563: LD_INT 4
 565: ARRAY
 566: PUSH
 567: LD_INT 2
 569: ARRAY
 570: PPUSH
 571: LD_EXP 19
 575: PUSH
 576: LD_INT 4
 578: ARRAY
 579: PUSH
 580: LD_INT 3
 582: ARRAY
 583: PPUSH
 584: LD_EXP 19
 588: PUSH
 589: LD_INT 4
 591: ARRAY
 592: PUSH
 593: LD_INT 4
 595: ARRAY
 596: PPUSH
 597: CALL 61155 0 4
 601: END
// export function SetTechnologies ; var i , j , ban_techs , res_techs ; begin
 602: LD_INT 0
 604: PPUSH
 605: PPUSH
 606: PPUSH
 607: PPUSH
 608: PPUSH
// if GameType = 1 then
 609: LD_EXP 2
 613: PUSH
 614: LD_INT 1
 616: EQUAL
 617: IFFALSE 686
// begin ban_techs := [ ] ;
 619: LD_ADDR_VAR 0 4
 623: PUSH
 624: EMPTY
 625: ST_TO_ADDR
// if sibBombAllowed < 2 then
 626: LD_EXP 23
 630: PUSH
 631: LD_INT 2
 633: LESS
 634: IFFALSE 647
// ban_techs := [ tech_sibFiss ] ;
 636: LD_ADDR_VAR 0 4
 640: PUSH
 641: LD_INT 25
 643: PUSH
 644: EMPTY
 645: LIST
 646: ST_TO_ADDR
// res_techs := [ tech_oilPow , tech_oilEng , tech_tech1 , tech_tech2 , tech_tech3 , tech_gun , tech_gatling , tech_rocket ] ;
 647: LD_ADDR_VAR 0 5
 651: PUSH
 652: LD_INT 46
 654: PUSH
 655: LD_INT 47
 657: PUSH
 658: LD_INT 48
 660: PUSH
 661: LD_INT 49
 663: PUSH
 664: LD_INT 50
 666: PUSH
 667: LD_INT 39
 669: PUSH
 670: LD_INT 69
 672: PUSH
 673: LD_INT 40
 675: PUSH
 676: EMPTY
 677: LIST
 678: LIST
 679: LIST
 680: LIST
 681: LIST
 682: LIST
 683: LIST
 684: LIST
 685: ST_TO_ADDR
// end ; for i = 1 to 8 do
 686: LD_ADDR_VAR 0 2
 690: PUSH
 691: DOUBLE
 692: LD_INT 1
 694: DEC
 695: ST_TO_ADDR
 696: LD_INT 8
 698: PUSH
 699: FOR_TO
 700: IFFALSE 784
// begin if res_techs then
 702: LD_VAR 0 5
 706: IFFALSE 742
// for j in res_techs do
 708: LD_ADDR_VAR 0 3
 712: PUSH
 713: LD_VAR 0 5
 717: PUSH
 718: FOR_IN
 719: IFFALSE 740
// SetTech ( j , i , state_researched ) ;
 721: LD_VAR 0 3
 725: PPUSH
 726: LD_VAR 0 2
 730: PPUSH
 731: LD_INT 2
 733: PPUSH
 734: CALL_OW 322
 738: GO 718
 740: POP
 741: POP
// if ban_techs then
 742: LD_VAR 0 4
 746: IFFALSE 782
// for j in ban_techs do
 748: LD_ADDR_VAR 0 3
 752: PUSH
 753: LD_VAR 0 4
 757: PUSH
 758: FOR_IN
 759: IFFALSE 780
// SetTech ( j , i , state_disabled ) ;
 761: LD_VAR 0 3
 765: PPUSH
 766: LD_VAR 0 2
 770: PPUSH
 771: LD_INT 0
 773: PPUSH
 774: CALL_OW 322
 778: GO 758
 780: POP
 781: POP
// end ;
 782: GO 699
 784: POP
 785: POP
// if sibBombAllowed = 1 then
 786: LD_EXP 23
 790: PUSH
 791: LD_INT 1
 793: EQUAL
 794: IFFALSE 809
// SetTech ( tech_sibFiss , 3 , state_enabled ) ;
 796: LD_INT 25
 798: PPUSH
 799: LD_INT 3
 801: PPUSH
 802: LD_INT 1
 804: PPUSH
 805: CALL_OW 322
// end ;
 809: LD_VAR 0 1
 813: RET
// export function SetDiplomacy ; begin
 814: LD_INT 0
 816: PPUSH
// if GameType = 1 then
 817: LD_EXP 2
 821: PUSH
 822: LD_INT 1
 824: EQUAL
 825: IFFALSE 891
// begin SetAttitude ( 1 , 4 , att_friend , true ) ;
 827: LD_INT 1
 829: PPUSH
 830: LD_INT 4
 832: PPUSH
 833: LD_INT 1
 835: PPUSH
 836: LD_INT 1
 838: PPUSH
 839: CALL_OW 80
// SetAttitude ( 3 , 6 , att_friend , true ) ;
 843: LD_INT 3
 845: PPUSH
 846: LD_INT 6
 848: PPUSH
 849: LD_INT 1
 851: PPUSH
 852: LD_INT 1
 854: PPUSH
 855: CALL_OW 80
// SetAttitude ( 3 , 8 , att_friend , true ) ;
 859: LD_INT 3
 861: PPUSH
 862: LD_INT 8
 864: PPUSH
 865: LD_INT 1
 867: PPUSH
 868: LD_INT 1
 870: PPUSH
 871: CALL_OW 80
// SetAttitude ( 6 , 8 , att_friend , true ) ;
 875: LD_INT 6
 877: PPUSH
 878: LD_INT 8
 880: PPUSH
 881: LD_INT 1
 883: PPUSH
 884: LD_INT 1
 886: PPUSH
 887: CALL_OW 80
// end ; end ;
 891: LD_VAR 0 1
 895: RET
// export function PrepareGame ; var i , tmp , sources ; begin
 896: LD_INT 0
 898: PPUSH
 899: PPUSH
 900: PPUSH
 901: PPUSH
// if GameType = 1 then
 902: LD_EXP 2
 906: PUSH
 907: LD_INT 1
 909: EQUAL
 910: IFFALSE 1402
// begin game := false ;
 912: LD_ADDR_EXP 3
 916: PUSH
 917: LD_INT 0
 919: ST_TO_ADDR
// your_side := 1 ;
 920: LD_ADDR_OWVAR 2
 924: PUSH
 925: LD_INT 1
 927: ST_TO_ADDR
// mc_amer := 1 ;
 928: LD_ADDR_EXP 5
 932: PUSH
 933: LD_INT 1
 935: ST_TO_ADDR
// mc_leg := 2 ;
 936: LD_ADDR_EXP 6
 940: PUSH
 941: LD_INT 2
 943: ST_TO_ADDR
// mc_rus_1 := 3 ;
 944: LD_ADDR_EXP 7
 948: PUSH
 949: LD_INT 3
 951: ST_TO_ADDR
// mc_rus_2 := 4 ;
 952: LD_ADDR_EXP 8
 956: PUSH
 957: LD_INT 4
 959: ST_TO_ADDR
// cratesSpawns := [ [ amerCrates , 1 , 0 , [ 200 , 250 , 300 ] [ cratesSpawn ] ] , [ rusCrates , 8 , 50 , 500 ] , [ legCrates , 5 , 50 , 300 ] , [ playerCrates , [ 4 , 5 , 6 ] [ cratesSpawn ] , 30 , [ 300 , 450 , 500 ] [ cratesSpawn ] ] ] ;
 960: LD_ADDR_EXP 19
 964: PUSH
 965: LD_INT 5
 967: PUSH
 968: LD_INT 1
 970: PUSH
 971: LD_INT 0
 973: PUSH
 974: LD_INT 200
 976: PUSH
 977: LD_INT 250
 979: PUSH
 980: LD_INT 300
 982: PUSH
 983: EMPTY
 984: LIST
 985: LIST
 986: LIST
 987: PUSH
 988: LD_EXP 26
 992: ARRAY
 993: PUSH
 994: EMPTY
 995: LIST
 996: LIST
 997: LIST
 998: LIST
 999: PUSH
1000: LD_INT 13
1002: PUSH
1003: LD_INT 8
1005: PUSH
1006: LD_INT 50
1008: PUSH
1009: LD_INT 500
1011: PUSH
1012: EMPTY
1013: LIST
1014: LIST
1015: LIST
1016: LIST
1017: PUSH
1018: LD_INT 17
1020: PUSH
1021: LD_INT 5
1023: PUSH
1024: LD_INT 50
1026: PUSH
1027: LD_INT 300
1029: PUSH
1030: EMPTY
1031: LIST
1032: LIST
1033: LIST
1034: LIST
1035: PUSH
1036: LD_INT 18
1038: PUSH
1039: LD_INT 4
1041: PUSH
1042: LD_INT 5
1044: PUSH
1045: LD_INT 6
1047: PUSH
1048: EMPTY
1049: LIST
1050: LIST
1051: LIST
1052: PUSH
1053: LD_EXP 26
1057: ARRAY
1058: PUSH
1059: LD_INT 30
1061: PUSH
1062: LD_INT 300
1064: PUSH
1065: LD_INT 450
1067: PUSH
1068: LD_INT 500
1070: PUSH
1071: EMPTY
1072: LIST
1073: LIST
1074: LIST
1075: PUSH
1076: LD_EXP 26
1080: ARRAY
1081: PUSH
1082: EMPTY
1083: LIST
1084: LIST
1085: LIST
1086: LIST
1087: PUSH
1088: EMPTY
1089: LIST
1090: LIST
1091: LIST
1092: LIST
1093: ST_TO_ADDR
// sources := [ [ 190 , 193 , mat_siberit ] , [ 182 , 117 , mat_siberit ] , [ 43 , 2 , mat_siberit ] , [ 114 , 152 , mat_oil ] , [ 85 , 38 , mat_oil ] ] ;
1094: LD_ADDR_VAR 0 4
1098: PUSH
1099: LD_INT 190
1101: PUSH
1102: LD_INT 193
1104: PUSH
1105: LD_INT 3
1107: PUSH
1108: EMPTY
1109: LIST
1110: LIST
1111: LIST
1112: PUSH
1113: LD_INT 182
1115: PUSH
1116: LD_INT 117
1118: PUSH
1119: LD_INT 3
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: LIST
1126: PUSH
1127: LD_INT 43
1129: PUSH
1130: LD_INT 2
1132: PUSH
1133: LD_INT 3
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: LIST
1140: PUSH
1141: LD_INT 114
1143: PUSH
1144: LD_INT 152
1146: PUSH
1147: LD_INT 2
1149: PUSH
1150: EMPTY
1151: LIST
1152: LIST
1153: LIST
1154: PUSH
1155: LD_INT 85
1157: PUSH
1158: LD_INT 38
1160: PUSH
1161: LD_INT 2
1163: PUSH
1164: EMPTY
1165: LIST
1166: LIST
1167: LIST
1168: PUSH
1169: EMPTY
1170: LIST
1171: LIST
1172: LIST
1173: LIST
1174: LIST
1175: ST_TO_ADDR
// for i in sources do
1176: LD_ADDR_VAR 0 2
1180: PUSH
1181: LD_VAR 0 4
1185: PUSH
1186: FOR_IN
1187: IFFALSE 1222
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
1189: LD_VAR 0 2
1193: PUSH
1194: LD_INT 1
1196: ARRAY
1197: PPUSH
1198: LD_VAR 0 2
1202: PUSH
1203: LD_INT 2
1205: ARRAY
1206: PPUSH
1207: LD_VAR 0 2
1211: PUSH
1212: LD_INT 3
1214: ARRAY
1215: PPUSH
1216: CALL_OW 62
1220: GO 1186
1222: POP
1223: POP
// disableGlobalTimer := false ;
1224: LD_ADDR_EXP 4
1228: PUSH
1229: LD_INT 0
1231: ST_TO_ADDR
// ruEscape := [ 0 , [ 5 , 6 , 7 ] [ Difficulty ] ] ;
1232: LD_ADDR_EXP 15
1236: PUSH
1237: LD_INT 0
1239: PUSH
1240: LD_INT 5
1242: PUSH
1243: LD_INT 6
1245: PUSH
1246: LD_INT 7
1248: PUSH
1249: EMPTY
1250: LIST
1251: LIST
1252: LIST
1253: PUSH
1254: LD_OWVAR 67
1258: ARRAY
1259: PUSH
1260: EMPTY
1261: LIST
1262: LIST
1263: ST_TO_ADDR
// ruOutpost := [ ] ;
1264: LD_ADDR_EXP 14
1268: PUSH
1269: EMPTY
1270: ST_TO_ADDR
// staticMines := [ ] ;
1271: LD_ADDR_EXP 16
1275: PUSH
1276: EMPTY
1277: ST_TO_ADDR
// baseCaptured := false ;
1278: LD_ADDR_EXP 17
1282: PUSH
1283: LD_INT 0
1285: ST_TO_ADDR
// legDestCounter := 0 ;
1286: LD_ADDR_EXP 18
1290: PUSH
1291: LD_INT 0
1293: ST_TO_ADDR
// legOfferAccepted := false ;
1294: LD_ADDR_EXP 20
1298: PUSH
1299: LD_INT 0
1301: ST_TO_ADDR
// legChangeSide := false ;
1302: LD_ADDR_EXP 21
1306: PUSH
1307: LD_INT 0
1309: ST_TO_ADDR
// allyDestCounter := 0 ;
1310: LD_ADDR_EXP 22
1314: PUSH
1315: LD_INT 0
1317: ST_TO_ADDR
// outpostEscape := false ;
1318: LD_ADDR_EXP 27
1322: PUSH
1323: LD_INT 0
1325: ST_TO_ADDR
// dialogueMineDetected := false ;
1326: LD_ADDR_EXP 28
1330: PUSH
1331: LD_INT 0
1333: ST_TO_ADDR
// PrepareAmericans ;
1334: CALL 7218 0 0
// PrepareLegion ;
1338: CALL 5483 0 0
// PrepareRussians ;
1342: CALL 2449 0 0
// playerForces := PreparePlayer ;
1346: LD_ADDR_EXP 10
1350: PUSH
1351: CALL 8461 0 0
1355: ST_TO_ADDR
// AnimateTrees ( true ) ;
1356: LD_INT 1
1358: PPUSH
1359: CALL_OW 573
// PrepareNature ( 4 , 3 , 8 , 5 , 3 , 1 , 8 , natureGroundArea , natureWaterArea ) ;
1363: LD_INT 4
1365: PPUSH
1366: LD_INT 3
1368: PPUSH
1369: LD_INT 8
1371: PPUSH
1372: LD_INT 5
1374: PPUSH
1375: LD_INT 3
1377: PPUSH
1378: LD_INT 1
1380: PPUSH
1381: LD_INT 8
1383: PPUSH
1384: LD_INT 2
1386: PPUSH
1387: LD_INT 1
1389: PPUSH
1390: CALL 53903 0 9
// MC_Start ;
1394: CALL 64207 0 0
// Action ;
1398: CALL 10657 0 0
// end ; end ;
1402: LD_VAR 0 1
1406: RET
// export function CustomInitMacro ; begin
1407: LD_INT 0
1409: PPUSH
// if GameType <> 1 then
1410: LD_EXP 2
1414: PUSH
1415: LD_INT 1
1417: NONEQUAL
1418: IFFALSE 1422
// exit ;
1420: GO 2444
// MC_SetScanArea ( mc_amer , amerBase ) ;
1422: LD_EXP 5
1426: PPUSH
1427: LD_INT 3
1429: PPUSH
1430: CALL 86951 0 2
// MC_SetParkingArea ( mc_amer , amerParking ) ;
1434: LD_EXP 5
1438: PPUSH
1439: LD_INT 4
1441: PPUSH
1442: CALL 86895 0 2
// MC_SetAllowedTurretWeapons ( mc_amer , [ us_radar , us_heavy_gun , us_rocket_launcher , us_laser , us_double_laser ] ) ;
1446: LD_EXP 5
1450: PPUSH
1451: LD_INT 11
1453: PUSH
1454: LD_INT 6
1456: PUSH
1457: LD_INT 7
1459: PUSH
1460: LD_INT 9
1462: PUSH
1463: LD_INT 10
1465: PUSH
1466: EMPTY
1467: LIST
1468: LIST
1469: LIST
1470: LIST
1471: LIST
1472: PPUSH
1473: CALL 86783 0 2
// MC_SetCratesArea ( mc_amer , amerCrates ) ;
1477: LD_EXP 5
1481: PPUSH
1482: LD_INT 5
1484: PPUSH
1485: CALL 86465 0 2
// MC_SetTame ( mc_amer , amerBase ) ;
1489: LD_EXP 5
1493: PPUSH
1494: LD_INT 3
1496: PPUSH
1497: CALL 86196 0 2
// MC_SetDefenderLimit ( mc_amer , 4 ) ;
1501: LD_EXP 5
1505: PPUSH
1506: LD_INT 4
1508: PPUSH
1509: CALL 85815 0 2
// MC_SetProduceList ( mc_amer , [ [ us_medium_tracked , engine_combustion , control_remote , us_double_gun ] , [ us_medium_tracked , engine_solar , control_remote , us_laser ] , [ us_heavy_tracked , engine_combustion , control_remote , us_rocket_launcher ] , [ us_heavy_tracked , engine_combustion , control_remote , us_heavy_gun ] , ] ) ;
1513: LD_EXP 5
1517: PPUSH
1518: LD_INT 3
1520: PUSH
1521: LD_INT 1
1523: PUSH
1524: LD_INT 2
1526: PUSH
1527: LD_INT 5
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: LIST
1534: LIST
1535: PUSH
1536: LD_INT 3
1538: PUSH
1539: LD_INT 2
1541: PUSH
1542: LD_INT 2
1544: PUSH
1545: LD_INT 9
1547: PUSH
1548: EMPTY
1549: LIST
1550: LIST
1551: LIST
1552: LIST
1553: PUSH
1554: LD_INT 4
1556: PUSH
1557: LD_INT 1
1559: PUSH
1560: LD_INT 2
1562: PUSH
1563: LD_INT 7
1565: PUSH
1566: EMPTY
1567: LIST
1568: LIST
1569: LIST
1570: LIST
1571: PUSH
1572: LD_INT 4
1574: PUSH
1575: LD_INT 1
1577: PUSH
1578: LD_INT 2
1580: PUSH
1581: LD_INT 6
1583: PUSH
1584: EMPTY
1585: LIST
1586: LIST
1587: LIST
1588: LIST
1589: PUSH
1590: EMPTY
1591: LIST
1592: LIST
1593: LIST
1594: LIST
1595: PPUSH
1596: CALL 85630 0 2
// MC_SetBuildingList ( mc_amer , [ [ b_turret , 114 , 16 , 0 ] , [ b_bunker , 110 , 12 , 0 ] ] ) ;
1600: LD_EXP 5
1604: PPUSH
1605: LD_INT 33
1607: PUSH
1608: LD_INT 114
1610: PUSH
1611: LD_INT 16
1613: PUSH
1614: LD_INT 0
1616: PUSH
1617: EMPTY
1618: LIST
1619: LIST
1620: LIST
1621: LIST
1622: PUSH
1623: LD_INT 32
1625: PUSH
1626: LD_INT 110
1628: PUSH
1629: LD_INT 12
1631: PUSH
1632: LD_INT 0
1634: PUSH
1635: EMPTY
1636: LIST
1637: LIST
1638: LIST
1639: LIST
1640: PUSH
1641: EMPTY
1642: LIST
1643: LIST
1644: PPUSH
1645: CALL 85522 0 2
// MC_SetLabKind ( mc_amer , [ b_lab_weapon , b_lab_opto , b_lab_computer , b_lab_siberium ] ) ;
1649: LD_EXP 5
1653: PPUSH
1654: LD_INT 10
1656: PUSH
1657: LD_INT 15
1659: PUSH
1660: LD_INT 12
1662: PUSH
1663: LD_INT 11
1665: PUSH
1666: EMPTY
1667: LIST
1668: LIST
1669: LIST
1670: LIST
1671: PPUSH
1672: CALL 86372 0 2
// MC_SetScanArea ( mc_leg , legBase ) ;
1676: LD_EXP 6
1680: PPUSH
1681: LD_INT 6
1683: PPUSH
1684: CALL 86951 0 2
// MC_SetParkingArea ( mc_leg , legParking ) ;
1688: LD_EXP 6
1692: PPUSH
1693: LD_INT 7
1695: PPUSH
1696: CALL 86895 0 2
// MC_SetAllowedTurretWeapons ( mc_leg , [ ar_radar , ar_gun , ar_rocket_launcher , ar_gatling_gun ] ) ;
1700: LD_EXP 6
1704: PPUSH
1705: LD_INT 30
1707: PUSH
1708: LD_INT 27
1710: PUSH
1711: LD_INT 28
1713: PUSH
1714: LD_INT 25
1716: PUSH
1717: EMPTY
1718: LIST
1719: LIST
1720: LIST
1721: LIST
1722: PPUSH
1723: CALL 86783 0 2
// MC_SetCratesArea ( mc_leg , legCrates ) ;
1727: LD_EXP 6
1731: PPUSH
1732: LD_INT 17
1734: PPUSH
1735: CALL 86465 0 2
// MC_SetTame ( mc_leg , legBase ) ;
1739: LD_EXP 6
1743: PPUSH
1744: LD_INT 6
1746: PPUSH
1747: CALL 86196 0 2
// MC_SetDefenderLimit ( mc_leg , 5 ) ;
1751: LD_EXP 6
1755: PPUSH
1756: LD_INT 5
1758: PPUSH
1759: CALL 85815 0 2
// MC_SetMinesField ( mc_leg , 10 , legMines ) ;
1763: LD_EXP 6
1767: PPUSH
1768: LD_INT 10
1770: PPUSH
1771: LD_INT 9
1773: PPUSH
1774: CALL 85312 0 3
// MC_SetBuildingList ( mc_leg , [ [ b_armoury , 157 , 144 , 0 ] , [ b_bunker , 151 , 142 , 0 ] , [ b_bunker , 161 , 145 , 0 ] , [ b_bunker , 140 , 133 , 0 ] ] ) ;
1778: LD_EXP 6
1782: PPUSH
1783: LD_INT 4
1785: PUSH
1786: LD_INT 157
1788: PUSH
1789: LD_INT 144
1791: PUSH
1792: LD_INT 0
1794: PUSH
1795: EMPTY
1796: LIST
1797: LIST
1798: LIST
1799: LIST
1800: PUSH
1801: LD_INT 32
1803: PUSH
1804: LD_INT 151
1806: PUSH
1807: LD_INT 142
1809: PUSH
1810: LD_INT 0
1812: PUSH
1813: EMPTY
1814: LIST
1815: LIST
1816: LIST
1817: LIST
1818: PUSH
1819: LD_INT 32
1821: PUSH
1822: LD_INT 161
1824: PUSH
1825: LD_INT 145
1827: PUSH
1828: LD_INT 0
1830: PUSH
1831: EMPTY
1832: LIST
1833: LIST
1834: LIST
1835: LIST
1836: PUSH
1837: LD_INT 32
1839: PUSH
1840: LD_INT 140
1842: PUSH
1843: LD_INT 133
1845: PUSH
1846: LD_INT 0
1848: PUSH
1849: EMPTY
1850: LIST
1851: LIST
1852: LIST
1853: LIST
1854: PUSH
1855: EMPTY
1856: LIST
1857: LIST
1858: LIST
1859: LIST
1860: PPUSH
1861: CALL 85522 0 2
// MC_SetProduceList ( mc_leg , [ [ ar_medium_trike , engine_solar , control_manual , ar_control_tower ] , [ ar_medium_trike , engine_solar , control_manual , ar_control_tower ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_cargo_bay ] ] ) ;
1865: LD_EXP 6
1869: PPUSH
1870: LD_INT 13
1872: PUSH
1873: LD_INT 2
1875: PUSH
1876: LD_INT 1
1878: PUSH
1879: LD_INT 31
1881: PUSH
1882: EMPTY
1883: LIST
1884: LIST
1885: LIST
1886: LIST
1887: PUSH
1888: LD_INT 13
1890: PUSH
1891: LD_INT 2
1893: PUSH
1894: LD_INT 1
1896: PUSH
1897: LD_INT 31
1899: PUSH
1900: EMPTY
1901: LIST
1902: LIST
1903: LIST
1904: LIST
1905: PUSH
1906: LD_INT 13
1908: PUSH
1909: LD_INT 1
1911: PUSH
1912: LD_INT 1
1914: PUSH
1915: LD_INT 27
1917: PUSH
1918: EMPTY
1919: LIST
1920: LIST
1921: LIST
1922: LIST
1923: PUSH
1924: LD_INT 13
1926: PUSH
1927: LD_INT 1
1929: PUSH
1930: LD_INT 2
1932: PUSH
1933: LD_INT 27
1935: PUSH
1936: EMPTY
1937: LIST
1938: LIST
1939: LIST
1940: LIST
1941: PUSH
1942: LD_INT 13
1944: PUSH
1945: LD_INT 1
1947: PUSH
1948: LD_INT 2
1950: PUSH
1951: LD_INT 27
1953: PUSH
1954: EMPTY
1955: LIST
1956: LIST
1957: LIST
1958: LIST
1959: PUSH
1960: LD_INT 13
1962: PUSH
1963: LD_INT 1
1965: PUSH
1966: LD_INT 2
1968: PUSH
1969: LD_INT 28
1971: PUSH
1972: EMPTY
1973: LIST
1974: LIST
1975: LIST
1976: LIST
1977: PUSH
1978: LD_INT 13
1980: PUSH
1981: LD_INT 1
1983: PUSH
1984: LD_INT 2
1986: PUSH
1987: LD_INT 28
1989: PUSH
1990: EMPTY
1991: LIST
1992: LIST
1993: LIST
1994: LIST
1995: PUSH
1996: LD_INT 13
1998: PUSH
1999: LD_INT 1
2001: PUSH
2002: LD_INT 2
2004: PUSH
2005: LD_INT 32
2007: PUSH
2008: EMPTY
2009: LIST
2010: LIST
2011: LIST
2012: LIST
2013: PUSH
2014: EMPTY
2015: LIST
2016: LIST
2017: LIST
2018: LIST
2019: LIST
2020: LIST
2021: LIST
2022: LIST
2023: PPUSH
2024: CALL 85630 0 2
// MC_SetScanArea ( mc_rus_1 , rus1Base ) ;
2028: LD_EXP 7
2032: PPUSH
2033: LD_INT 15
2035: PPUSH
2036: CALL 86951 0 2
// MC_SetParkingArea ( mc_rus_1 , rus1Parking ) ;
2040: LD_EXP 7
2044: PPUSH
2045: LD_INT 16
2047: PPUSH
2048: CALL 86895 0 2
// MC_SetAllowedTurretWeapons ( mc_rus_1 , [ ru_gatling_gun , ru_rocket , ru_rocket_launcher , ru_time_lapser , ru_heavy_gun ] ) ;
2052: LD_EXP 7
2056: PPUSH
2057: LD_INT 43
2059: PUSH
2060: LD_INT 47
2062: PUSH
2063: LD_INT 45
2065: PUSH
2066: LD_INT 49
2068: PUSH
2069: LD_INT 46
2071: PUSH
2072: EMPTY
2073: LIST
2074: LIST
2075: LIST
2076: LIST
2077: LIST
2078: PPUSH
2079: CALL 86783 0 2
// MC_SetCratesArea ( mc_rus_1 , rusCrates ) ;
2083: LD_EXP 7
2087: PPUSH
2088: LD_INT 13
2090: PPUSH
2091: CALL 86465 0 2
// MC_SetTame ( mc_rus_1 , rus1Base ) ;
2095: LD_EXP 7
2099: PPUSH
2100: LD_INT 15
2102: PPUSH
2103: CALL 86196 0 2
// MC_SetDefenderLimit ( mc_rus_1 , 5 ) ;
2107: LD_EXP 7
2111: PPUSH
2112: LD_INT 5
2114: PPUSH
2115: CALL 85815 0 2
// MC_SetProduceList ( mc_rus_1 , [ [ ru_heavy_wheeled , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_wheeled , engine_combustion , control_manual , ru_heavy_gun ] , [ ru_heavy_wheeled , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_heavy_wheeled , engine_combustion , control_manual , ru_rocket ] , [ ru_medium_wheeled , engine_combustion , control_computer , ru_cargo_bay ] ] ) ;
2119: LD_EXP 7
2123: PPUSH
2124: LD_INT 23
2126: PUSH
2127: LD_INT 1
2129: PUSH
2130: LD_INT 3
2132: PUSH
2133: LD_INT 46
2135: PUSH
2136: EMPTY
2137: LIST
2138: LIST
2139: LIST
2140: LIST
2141: PUSH
2142: LD_INT 23
2144: PUSH
2145: LD_INT 1
2147: PUSH
2148: LD_INT 1
2150: PUSH
2151: LD_INT 46
2153: PUSH
2154: EMPTY
2155: LIST
2156: LIST
2157: LIST
2158: LIST
2159: PUSH
2160: LD_INT 23
2162: PUSH
2163: LD_INT 1
2165: PUSH
2166: LD_INT 3
2168: PUSH
2169: LD_INT 45
2171: PUSH
2172: EMPTY
2173: LIST
2174: LIST
2175: LIST
2176: LIST
2177: PUSH
2178: LD_INT 23
2180: PUSH
2181: LD_INT 1
2183: PUSH
2184: LD_INT 1
2186: PUSH
2187: LD_INT 47
2189: PUSH
2190: EMPTY
2191: LIST
2192: LIST
2193: LIST
2194: LIST
2195: PUSH
2196: LD_INT 21
2198: PUSH
2199: LD_INT 1
2201: PUSH
2202: LD_INT 3
2204: PUSH
2205: LD_INT 51
2207: PUSH
2208: EMPTY
2209: LIST
2210: LIST
2211: LIST
2212: LIST
2213: PUSH
2214: EMPTY
2215: LIST
2216: LIST
2217: LIST
2218: LIST
2219: LIST
2220: PPUSH
2221: CALL 85630 0 2
// MC_SetScanArea ( mc_rus_2 , rus2Base ) ;
2225: LD_EXP 8
2229: PPUSH
2230: LD_INT 11
2232: PPUSH
2233: CALL 86951 0 2
// MC_SetParkingArea ( mc_rus_2 , rus2Parking ) ;
2237: LD_EXP 8
2241: PPUSH
2242: LD_INT 12
2244: PPUSH
2245: CALL 86895 0 2
// MC_SetAllowedTurretWeapons ( mc_rus_2 , [ ru_gatling_gun , ru_rocket , ru_rocket_launcher , ru_time_lapser , ru_heavy_gun ] ) ;
2249: LD_EXP 8
2253: PPUSH
2254: LD_INT 43
2256: PUSH
2257: LD_INT 47
2259: PUSH
2260: LD_INT 45
2262: PUSH
2263: LD_INT 49
2265: PUSH
2266: LD_INT 46
2268: PUSH
2269: EMPTY
2270: LIST
2271: LIST
2272: LIST
2273: LIST
2274: LIST
2275: PPUSH
2276: CALL 86783 0 2
// MC_SetCratesArea ( mc_rus_2 , rusCrates ) ;
2280: LD_EXP 8
2284: PPUSH
2285: LD_INT 13
2287: PPUSH
2288: CALL 86465 0 2
// MC_SetTame ( mc_rus_2 , rus2Base ) ;
2292: LD_EXP 8
2296: PPUSH
2297: LD_INT 11
2299: PPUSH
2300: CALL 86196 0 2
// MC_SetDefenderLimit ( mc_rus_2 , 4 ) ;
2304: LD_EXP 8
2308: PPUSH
2309: LD_INT 4
2311: PPUSH
2312: CALL 85815 0 2
// MC_SetTeleportExit ( mc_rus_2 , [ [ 115 , 201 ] ] ) ;
2316: LD_EXP 8
2320: PPUSH
2321: LD_INT 115
2323: PUSH
2324: LD_INT 201
2326: PUSH
2327: EMPTY
2328: LIST
2329: LIST
2330: PUSH
2331: EMPTY
2332: LIST
2333: PPUSH
2334: CALL 86521 0 2
// MC_SetProduceList ( mc_rus_2 , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , ] ) ;
2338: LD_EXP 8
2342: PPUSH
2343: LD_INT 24
2345: PUSH
2346: LD_INT 3
2348: PUSH
2349: LD_INT 3
2351: PUSH
2352: LD_INT 46
2354: PUSH
2355: EMPTY
2356: LIST
2357: LIST
2358: LIST
2359: LIST
2360: PUSH
2361: LD_INT 24
2363: PUSH
2364: LD_INT 3
2366: PUSH
2367: LD_INT 3
2369: PUSH
2370: LD_INT 46
2372: PUSH
2373: EMPTY
2374: LIST
2375: LIST
2376: LIST
2377: LIST
2378: PUSH
2379: LD_INT 24
2381: PUSH
2382: LD_INT 3
2384: PUSH
2385: LD_INT 3
2387: PUSH
2388: LD_INT 46
2390: PUSH
2391: EMPTY
2392: LIST
2393: LIST
2394: LIST
2395: LIST
2396: PUSH
2397: LD_INT 24
2399: PUSH
2400: LD_INT 3
2402: PUSH
2403: LD_INT 3
2405: PUSH
2406: LD_INT 46
2408: PUSH
2409: EMPTY
2410: LIST
2411: LIST
2412: LIST
2413: LIST
2414: PUSH
2415: LD_INT 24
2417: PUSH
2418: LD_INT 3
2420: PUSH
2421: LD_INT 3
2423: PUSH
2424: LD_INT 46
2426: PUSH
2427: EMPTY
2428: LIST
2429: LIST
2430: LIST
2431: LIST
2432: PUSH
2433: EMPTY
2434: LIST
2435: LIST
2436: LIST
2437: LIST
2438: LIST
2439: PPUSH
2440: CALL 85630 0 2
// end ;
2444: LD_VAR 0 1
2448: RET
// export function PrepareRussians ; var i , b , tmp , side , sr , depot , base ; begin
2449: LD_INT 0
2451: PPUSH
2452: PPUSH
2453: PPUSH
2454: PPUSH
2455: PPUSH
2456: PPUSH
2457: PPUSH
2458: PPUSH
// PrepareNature ( 0 , 0 , 3 , 0 , 0 , 0 , 0 , rusApe , 0 ) ;
2459: LD_INT 0
2461: PPUSH
2462: LD_INT 0
2464: PPUSH
2465: LD_INT 3
2467: PPUSH
2468: LD_INT 0
2470: PPUSH
2471: LD_INT 0
2473: PPUSH
2474: LD_INT 0
2476: PPUSH
2477: LD_INT 0
2479: PPUSH
2480: LD_INT 14
2482: PPUSH
2483: LD_INT 0
2485: PPUSH
2486: CALL 53903 0 9
// side := 3 ;
2490: LD_ADDR_VAR 0 5
2494: PUSH
2495: LD_INT 3
2497: ST_TO_ADDR
// SetTech ( tech_targTeleport , side , state_researched ) ;
2498: LD_INT 38
2500: PPUSH
2501: LD_VAR 0 5
2505: PPUSH
2506: LD_INT 2
2508: PPUSH
2509: CALL_OW 322
// SetTech ( tech_gun , side , state_researched ) ;
2513: LD_INT 39
2515: PPUSH
2516: LD_VAR 0 5
2520: PPUSH
2521: LD_INT 2
2523: PPUSH
2524: CALL_OW 322
// SetTech ( tech_advMet , side , state_researched ) ;
2528: LD_INT 34
2530: PPUSH
2531: LD_VAR 0 5
2535: PPUSH
2536: LD_INT 2
2538: PPUSH
2539: CALL_OW 322
// tmp := [ [ 0 , 208 , 163 , 4 , 0 , 0 ] , [ 3 , 194 , 161 , 1 , 0 , 0 ] , [ 17 , 190 , 161 , 1 , 0 , 0 ] , [ 5 , 200 , 145 , 3 , 0 , 0 ] , [ 32 , 192 , 144 , 3 , 0 , 0 ] , [ 26 , 216 , 172 , 3 , 0 , 0 ] , [ 26 , 218 , 176 , 3 , 0 , 0 ] , [ 29 , 182 , 149 , 3 , 0 , 0 ] , [ 8 , 201 , 171 , 0 , 10 , 11 ] , [ 32 , 188 , 167 , 0 , 0 , 0 ] , [ 32 , 202 , 179 , 0 , 0 , 0 ] , [ 32 , 209 , 182 , 0 , 0 , 0 ] , [ 32 , 220 , 183 , 5 , 0 , 0 ] , [ 32 , 225 , 181 , 5 , 0 , 0 ] , [ 26 , 220 , 174 , 5 , 0 , 0 ] , [ 1 , 84 , 128 , 4 , 0 , 0 ] , [ 3 , 68 , 121 , 1 , 0 , 0 ] , [ 19 , 72 , 125 , 5 , 0 , 0 ] , [ 18 , 68 , 124 , 0 , 0 , 0 ] , [ 24 , 64 , 121 , 1 , 0 , 0 ] , [ 17 , 65 , 118 , 2 , 0 , 0 ] , [ 21 , 68 , 117 , 3 , 0 , 0 ] , [ 8 , 68 , 130 , 1 , 14 , 10 ] , [ 8 , 67 , 110 , 2 , 11 , 12 ] , [ 28 , 85 , 108 , 2 , 0 , 0 ] , [ 28 , 85 , 124 , 2 , 0 , 0 ] , [ 30 , 97 , 119 , 2 , 0 , 0 ] , [ 5 , 111 , 138 , 4 , 0 , 0 ] , [ 33 , 104 , 130 , 3 , 0 , 0 ] , [ 33 , 110 , 142 , 5 , 0 , 0 ] , [ 33 , 91 , 131 , 5 , 0 , 0 ] , [ 33 , 107 , 157 , 5 , 0 , 0 ] , [ 33 , 104 , 160 , 5 , 0 , 0 ] , [ 33 , 101 , 162 , 5 , 0 , 0 ] , [ 32 , 87 , 157 , 5 , 0 , 0 ] , [ 32 , 105 , 158 , 5 , 0 , 0 ] , [ 33 , 91 , 118 , 4 , 0 , 0 ] , [ 33 , 89 , 107 , 4 , 0 , 0 ] , [ 5 , 86 , 96 , 3 , 0 , 0 ] , [ 33 , 91 , 102 , 4 , 0 , 0 ] , [ 32 , 80 , 95 , 3 , 0 , 0 ] , [ 28 , 77 , 105 , 3 , 0 , 0 ] , [ 28 , 85 , 113 , 3 , 0 , 0 ] , [ 28 , 55 , 97 , 3 , 0 , 0 ] , [ 28 , 88 , 128 , 3 , 0 , 0 ] , [ 32 , 69 , 101 , 2 , 0 , 0 ] , [ 1 , 34 , 23 , 4 , 0 , 0 ] , [ 8 , 25 , 4 , 3 , 11 , 10 ] , [ 8 , 15 , 4 , 2 , 14 , 12 ] , [ 29 , 55 , 35 , 2 , 0 , 0 ] , [ 29 , 24 , 44 , 2 , 0 , 0 ] , [ 34 , 34 , 32 , 4 , 0 , 0 ] , [ 3 , 14 , 16 , 1 , 0 , 0 ] , [ 24 , 10 , 16 , 1 , 0 , 0 ] , [ 21 , 11 , 13 , 2 , 0 , 0 ] , [ 18 , 14 , 12 , 3 , 0 , 0 ] , [ 16 , 14 , 19 , 0 , 0 , 0 ] , [ 17 , 18 , 20 , 5 , 0 , 0 ] , [ 28 , 10 , 5 , 1 , 0 , 0 ] , [ 28 , 8 , 8 , 1 , 0 , 0 ] , [ 26 , 19 , 2 , 1 , 0 , 0 ] , [ 26 , 30 , 2 , 1 , 0 , 0 ] , [ 5 , 59 , 20 , 4 , 0 , 0 ] , [ 32 , 60 , 24 , 4 , 0 , 0 ] , [ 32 , 61 , 45 , 5 , 0 , 0 ] , [ 32 , 52 , 51 , 5 , 0 , 0 ] , [ 33 , 56 , 51 , 5 , 0 , 0 ] , [ 33 , 62 , 49 , 5 , 0 , 0 ] , [ 33 , 41 , 47 , 5 , 0 , 0 ] , [ 33 , 33 , 52 , 5 , 0 , 0 ] , [ 5 , 31 , 40 , 0 , 0 , 0 ] , [ 33 , 65 , 37 , 5 , 0 , 0 ] , [ 33 , 63 , 29 , 4 , 0 , 0 ] , [ 33 , 54 , 11 , 4 , 0 , 0 ] , [ 33 , 56 , 15 , 4 , 0 , 0 ] , [ 33 , 51 , 6 , 4 , 0 , 0 ] , [ 26 , 39 , 25 , 0 , 0 , 0 ] , [ 26 , 37 , 21 , 0 , 0 , 0 ] , [ 32 , 35 , 17 , 4 , 0 , 0 ] , [ 33 , 35 , 28 , 4 , 0 , 0 ] , [ 33 , 28 , 46 , 5 , 0 , 0 ] , [ 33 , 31 , 6 , 4 , 0 , 0 ] , [ 26 , 54 , 38 , 4 , 0 , 0 ] , [ 33 , 207 , 167 , 3 , 0 , 0 ] , [ 30 , 43 , 2 , 4 , 0 , 0 ] ] ;
2543: LD_ADDR_VAR 0 4
2547: PUSH
2548: LD_INT 0
2550: PUSH
2551: LD_INT 208
2553: PUSH
2554: LD_INT 163
2556: PUSH
2557: LD_INT 4
2559: PUSH
2560: LD_INT 0
2562: PUSH
2563: LD_INT 0
2565: PUSH
2566: EMPTY
2567: LIST
2568: LIST
2569: LIST
2570: LIST
2571: LIST
2572: LIST
2573: PUSH
2574: LD_INT 3
2576: PUSH
2577: LD_INT 194
2579: PUSH
2580: LD_INT 161
2582: PUSH
2583: LD_INT 1
2585: PUSH
2586: LD_INT 0
2588: PUSH
2589: LD_INT 0
2591: PUSH
2592: EMPTY
2593: LIST
2594: LIST
2595: LIST
2596: LIST
2597: LIST
2598: LIST
2599: PUSH
2600: LD_INT 17
2602: PUSH
2603: LD_INT 190
2605: PUSH
2606: LD_INT 161
2608: PUSH
2609: LD_INT 1
2611: PUSH
2612: LD_INT 0
2614: PUSH
2615: LD_INT 0
2617: PUSH
2618: EMPTY
2619: LIST
2620: LIST
2621: LIST
2622: LIST
2623: LIST
2624: LIST
2625: PUSH
2626: LD_INT 5
2628: PUSH
2629: LD_INT 200
2631: PUSH
2632: LD_INT 145
2634: PUSH
2635: LD_INT 3
2637: PUSH
2638: LD_INT 0
2640: PUSH
2641: LD_INT 0
2643: PUSH
2644: EMPTY
2645: LIST
2646: LIST
2647: LIST
2648: LIST
2649: LIST
2650: LIST
2651: PUSH
2652: LD_INT 32
2654: PUSH
2655: LD_INT 192
2657: PUSH
2658: LD_INT 144
2660: PUSH
2661: LD_INT 3
2663: PUSH
2664: LD_INT 0
2666: PUSH
2667: LD_INT 0
2669: PUSH
2670: EMPTY
2671: LIST
2672: LIST
2673: LIST
2674: LIST
2675: LIST
2676: LIST
2677: PUSH
2678: LD_INT 26
2680: PUSH
2681: LD_INT 216
2683: PUSH
2684: LD_INT 172
2686: PUSH
2687: LD_INT 3
2689: PUSH
2690: LD_INT 0
2692: PUSH
2693: LD_INT 0
2695: PUSH
2696: EMPTY
2697: LIST
2698: LIST
2699: LIST
2700: LIST
2701: LIST
2702: LIST
2703: PUSH
2704: LD_INT 26
2706: PUSH
2707: LD_INT 218
2709: PUSH
2710: LD_INT 176
2712: PUSH
2713: LD_INT 3
2715: PUSH
2716: LD_INT 0
2718: PUSH
2719: LD_INT 0
2721: PUSH
2722: EMPTY
2723: LIST
2724: LIST
2725: LIST
2726: LIST
2727: LIST
2728: LIST
2729: PUSH
2730: LD_INT 29
2732: PUSH
2733: LD_INT 182
2735: PUSH
2736: LD_INT 149
2738: PUSH
2739: LD_INT 3
2741: PUSH
2742: LD_INT 0
2744: PUSH
2745: LD_INT 0
2747: PUSH
2748: EMPTY
2749: LIST
2750: LIST
2751: LIST
2752: LIST
2753: LIST
2754: LIST
2755: PUSH
2756: LD_INT 8
2758: PUSH
2759: LD_INT 201
2761: PUSH
2762: LD_INT 171
2764: PUSH
2765: LD_INT 0
2767: PUSH
2768: LD_INT 10
2770: PUSH
2771: LD_INT 11
2773: PUSH
2774: EMPTY
2775: LIST
2776: LIST
2777: LIST
2778: LIST
2779: LIST
2780: LIST
2781: PUSH
2782: LD_INT 32
2784: PUSH
2785: LD_INT 188
2787: PUSH
2788: LD_INT 167
2790: PUSH
2791: LD_INT 0
2793: PUSH
2794: LD_INT 0
2796: PUSH
2797: LD_INT 0
2799: PUSH
2800: EMPTY
2801: LIST
2802: LIST
2803: LIST
2804: LIST
2805: LIST
2806: LIST
2807: PUSH
2808: LD_INT 32
2810: PUSH
2811: LD_INT 202
2813: PUSH
2814: LD_INT 179
2816: PUSH
2817: LD_INT 0
2819: PUSH
2820: LD_INT 0
2822: PUSH
2823: LD_INT 0
2825: PUSH
2826: EMPTY
2827: LIST
2828: LIST
2829: LIST
2830: LIST
2831: LIST
2832: LIST
2833: PUSH
2834: LD_INT 32
2836: PUSH
2837: LD_INT 209
2839: PUSH
2840: LD_INT 182
2842: PUSH
2843: LD_INT 0
2845: PUSH
2846: LD_INT 0
2848: PUSH
2849: LD_INT 0
2851: PUSH
2852: EMPTY
2853: LIST
2854: LIST
2855: LIST
2856: LIST
2857: LIST
2858: LIST
2859: PUSH
2860: LD_INT 32
2862: PUSH
2863: LD_INT 220
2865: PUSH
2866: LD_INT 183
2868: PUSH
2869: LD_INT 5
2871: PUSH
2872: LD_INT 0
2874: PUSH
2875: LD_INT 0
2877: PUSH
2878: EMPTY
2879: LIST
2880: LIST
2881: LIST
2882: LIST
2883: LIST
2884: LIST
2885: PUSH
2886: LD_INT 32
2888: PUSH
2889: LD_INT 225
2891: PUSH
2892: LD_INT 181
2894: PUSH
2895: LD_INT 5
2897: PUSH
2898: LD_INT 0
2900: PUSH
2901: LD_INT 0
2903: PUSH
2904: EMPTY
2905: LIST
2906: LIST
2907: LIST
2908: LIST
2909: LIST
2910: LIST
2911: PUSH
2912: LD_INT 26
2914: PUSH
2915: LD_INT 220
2917: PUSH
2918: LD_INT 174
2920: PUSH
2921: LD_INT 5
2923: PUSH
2924: LD_INT 0
2926: PUSH
2927: LD_INT 0
2929: PUSH
2930: EMPTY
2931: LIST
2932: LIST
2933: LIST
2934: LIST
2935: LIST
2936: LIST
2937: PUSH
2938: LD_INT 1
2940: PUSH
2941: LD_INT 84
2943: PUSH
2944: LD_INT 128
2946: PUSH
2947: LD_INT 4
2949: PUSH
2950: LD_INT 0
2952: PUSH
2953: LD_INT 0
2955: PUSH
2956: EMPTY
2957: LIST
2958: LIST
2959: LIST
2960: LIST
2961: LIST
2962: LIST
2963: PUSH
2964: LD_INT 3
2966: PUSH
2967: LD_INT 68
2969: PUSH
2970: LD_INT 121
2972: PUSH
2973: LD_INT 1
2975: PUSH
2976: LD_INT 0
2978: PUSH
2979: LD_INT 0
2981: PUSH
2982: EMPTY
2983: LIST
2984: LIST
2985: LIST
2986: LIST
2987: LIST
2988: LIST
2989: PUSH
2990: LD_INT 19
2992: PUSH
2993: LD_INT 72
2995: PUSH
2996: LD_INT 125
2998: PUSH
2999: LD_INT 5
3001: PUSH
3002: LD_INT 0
3004: PUSH
3005: LD_INT 0
3007: PUSH
3008: EMPTY
3009: LIST
3010: LIST
3011: LIST
3012: LIST
3013: LIST
3014: LIST
3015: PUSH
3016: LD_INT 18
3018: PUSH
3019: LD_INT 68
3021: PUSH
3022: LD_INT 124
3024: PUSH
3025: LD_INT 0
3027: PUSH
3028: LD_INT 0
3030: PUSH
3031: LD_INT 0
3033: PUSH
3034: EMPTY
3035: LIST
3036: LIST
3037: LIST
3038: LIST
3039: LIST
3040: LIST
3041: PUSH
3042: LD_INT 24
3044: PUSH
3045: LD_INT 64
3047: PUSH
3048: LD_INT 121
3050: PUSH
3051: LD_INT 1
3053: PUSH
3054: LD_INT 0
3056: PUSH
3057: LD_INT 0
3059: PUSH
3060: EMPTY
3061: LIST
3062: LIST
3063: LIST
3064: LIST
3065: LIST
3066: LIST
3067: PUSH
3068: LD_INT 17
3070: PUSH
3071: LD_INT 65
3073: PUSH
3074: LD_INT 118
3076: PUSH
3077: LD_INT 2
3079: PUSH
3080: LD_INT 0
3082: PUSH
3083: LD_INT 0
3085: PUSH
3086: EMPTY
3087: LIST
3088: LIST
3089: LIST
3090: LIST
3091: LIST
3092: LIST
3093: PUSH
3094: LD_INT 21
3096: PUSH
3097: LD_INT 68
3099: PUSH
3100: LD_INT 117
3102: PUSH
3103: LD_INT 3
3105: PUSH
3106: LD_INT 0
3108: PUSH
3109: LD_INT 0
3111: PUSH
3112: EMPTY
3113: LIST
3114: LIST
3115: LIST
3116: LIST
3117: LIST
3118: LIST
3119: PUSH
3120: LD_INT 8
3122: PUSH
3123: LD_INT 68
3125: PUSH
3126: LD_INT 130
3128: PUSH
3129: LD_INT 1
3131: PUSH
3132: LD_INT 14
3134: PUSH
3135: LD_INT 10
3137: PUSH
3138: EMPTY
3139: LIST
3140: LIST
3141: LIST
3142: LIST
3143: LIST
3144: LIST
3145: PUSH
3146: LD_INT 8
3148: PUSH
3149: LD_INT 67
3151: PUSH
3152: LD_INT 110
3154: PUSH
3155: LD_INT 2
3157: PUSH
3158: LD_INT 11
3160: PUSH
3161: LD_INT 12
3163: PUSH
3164: EMPTY
3165: LIST
3166: LIST
3167: LIST
3168: LIST
3169: LIST
3170: LIST
3171: PUSH
3172: LD_INT 28
3174: PUSH
3175: LD_INT 85
3177: PUSH
3178: LD_INT 108
3180: PUSH
3181: LD_INT 2
3183: PUSH
3184: LD_INT 0
3186: PUSH
3187: LD_INT 0
3189: PUSH
3190: EMPTY
3191: LIST
3192: LIST
3193: LIST
3194: LIST
3195: LIST
3196: LIST
3197: PUSH
3198: LD_INT 28
3200: PUSH
3201: LD_INT 85
3203: PUSH
3204: LD_INT 124
3206: PUSH
3207: LD_INT 2
3209: PUSH
3210: LD_INT 0
3212: PUSH
3213: LD_INT 0
3215: PUSH
3216: EMPTY
3217: LIST
3218: LIST
3219: LIST
3220: LIST
3221: LIST
3222: LIST
3223: PUSH
3224: LD_INT 30
3226: PUSH
3227: LD_INT 97
3229: PUSH
3230: LD_INT 119
3232: PUSH
3233: LD_INT 2
3235: PUSH
3236: LD_INT 0
3238: PUSH
3239: LD_INT 0
3241: PUSH
3242: EMPTY
3243: LIST
3244: LIST
3245: LIST
3246: LIST
3247: LIST
3248: LIST
3249: PUSH
3250: LD_INT 5
3252: PUSH
3253: LD_INT 111
3255: PUSH
3256: LD_INT 138
3258: PUSH
3259: LD_INT 4
3261: PUSH
3262: LD_INT 0
3264: PUSH
3265: LD_INT 0
3267: PUSH
3268: EMPTY
3269: LIST
3270: LIST
3271: LIST
3272: LIST
3273: LIST
3274: LIST
3275: PUSH
3276: LD_INT 33
3278: PUSH
3279: LD_INT 104
3281: PUSH
3282: LD_INT 130
3284: PUSH
3285: LD_INT 3
3287: PUSH
3288: LD_INT 0
3290: PUSH
3291: LD_INT 0
3293: PUSH
3294: EMPTY
3295: LIST
3296: LIST
3297: LIST
3298: LIST
3299: LIST
3300: LIST
3301: PUSH
3302: LD_INT 33
3304: PUSH
3305: LD_INT 110
3307: PUSH
3308: LD_INT 142
3310: PUSH
3311: LD_INT 5
3313: PUSH
3314: LD_INT 0
3316: PUSH
3317: LD_INT 0
3319: PUSH
3320: EMPTY
3321: LIST
3322: LIST
3323: LIST
3324: LIST
3325: LIST
3326: LIST
3327: PUSH
3328: LD_INT 33
3330: PUSH
3331: LD_INT 91
3333: PUSH
3334: LD_INT 131
3336: PUSH
3337: LD_INT 5
3339: PUSH
3340: LD_INT 0
3342: PUSH
3343: LD_INT 0
3345: PUSH
3346: EMPTY
3347: LIST
3348: LIST
3349: LIST
3350: LIST
3351: LIST
3352: LIST
3353: PUSH
3354: LD_INT 33
3356: PUSH
3357: LD_INT 107
3359: PUSH
3360: LD_INT 157
3362: PUSH
3363: LD_INT 5
3365: PUSH
3366: LD_INT 0
3368: PUSH
3369: LD_INT 0
3371: PUSH
3372: EMPTY
3373: LIST
3374: LIST
3375: LIST
3376: LIST
3377: LIST
3378: LIST
3379: PUSH
3380: LD_INT 33
3382: PUSH
3383: LD_INT 104
3385: PUSH
3386: LD_INT 160
3388: PUSH
3389: LD_INT 5
3391: PUSH
3392: LD_INT 0
3394: PUSH
3395: LD_INT 0
3397: PUSH
3398: EMPTY
3399: LIST
3400: LIST
3401: LIST
3402: LIST
3403: LIST
3404: LIST
3405: PUSH
3406: LD_INT 33
3408: PUSH
3409: LD_INT 101
3411: PUSH
3412: LD_INT 162
3414: PUSH
3415: LD_INT 5
3417: PUSH
3418: LD_INT 0
3420: PUSH
3421: LD_INT 0
3423: PUSH
3424: EMPTY
3425: LIST
3426: LIST
3427: LIST
3428: LIST
3429: LIST
3430: LIST
3431: PUSH
3432: LD_INT 32
3434: PUSH
3435: LD_INT 87
3437: PUSH
3438: LD_INT 157
3440: PUSH
3441: LD_INT 5
3443: PUSH
3444: LD_INT 0
3446: PUSH
3447: LD_INT 0
3449: PUSH
3450: EMPTY
3451: LIST
3452: LIST
3453: LIST
3454: LIST
3455: LIST
3456: LIST
3457: PUSH
3458: LD_INT 32
3460: PUSH
3461: LD_INT 105
3463: PUSH
3464: LD_INT 158
3466: PUSH
3467: LD_INT 5
3469: PUSH
3470: LD_INT 0
3472: PUSH
3473: LD_INT 0
3475: PUSH
3476: EMPTY
3477: LIST
3478: LIST
3479: LIST
3480: LIST
3481: LIST
3482: LIST
3483: PUSH
3484: LD_INT 33
3486: PUSH
3487: LD_INT 91
3489: PUSH
3490: LD_INT 118
3492: PUSH
3493: LD_INT 4
3495: PUSH
3496: LD_INT 0
3498: PUSH
3499: LD_INT 0
3501: PUSH
3502: EMPTY
3503: LIST
3504: LIST
3505: LIST
3506: LIST
3507: LIST
3508: LIST
3509: PUSH
3510: LD_INT 33
3512: PUSH
3513: LD_INT 89
3515: PUSH
3516: LD_INT 107
3518: PUSH
3519: LD_INT 4
3521: PUSH
3522: LD_INT 0
3524: PUSH
3525: LD_INT 0
3527: PUSH
3528: EMPTY
3529: LIST
3530: LIST
3531: LIST
3532: LIST
3533: LIST
3534: LIST
3535: PUSH
3536: LD_INT 5
3538: PUSH
3539: LD_INT 86
3541: PUSH
3542: LD_INT 96
3544: PUSH
3545: LD_INT 3
3547: PUSH
3548: LD_INT 0
3550: PUSH
3551: LD_INT 0
3553: PUSH
3554: EMPTY
3555: LIST
3556: LIST
3557: LIST
3558: LIST
3559: LIST
3560: LIST
3561: PUSH
3562: LD_INT 33
3564: PUSH
3565: LD_INT 91
3567: PUSH
3568: LD_INT 102
3570: PUSH
3571: LD_INT 4
3573: PUSH
3574: LD_INT 0
3576: PUSH
3577: LD_INT 0
3579: PUSH
3580: EMPTY
3581: LIST
3582: LIST
3583: LIST
3584: LIST
3585: LIST
3586: LIST
3587: PUSH
3588: LD_INT 32
3590: PUSH
3591: LD_INT 80
3593: PUSH
3594: LD_INT 95
3596: PUSH
3597: LD_INT 3
3599: PUSH
3600: LD_INT 0
3602: PUSH
3603: LD_INT 0
3605: PUSH
3606: EMPTY
3607: LIST
3608: LIST
3609: LIST
3610: LIST
3611: LIST
3612: LIST
3613: PUSH
3614: LD_INT 28
3616: PUSH
3617: LD_INT 77
3619: PUSH
3620: LD_INT 105
3622: PUSH
3623: LD_INT 3
3625: PUSH
3626: LD_INT 0
3628: PUSH
3629: LD_INT 0
3631: PUSH
3632: EMPTY
3633: LIST
3634: LIST
3635: LIST
3636: LIST
3637: LIST
3638: LIST
3639: PUSH
3640: LD_INT 28
3642: PUSH
3643: LD_INT 85
3645: PUSH
3646: LD_INT 113
3648: PUSH
3649: LD_INT 3
3651: PUSH
3652: LD_INT 0
3654: PUSH
3655: LD_INT 0
3657: PUSH
3658: EMPTY
3659: LIST
3660: LIST
3661: LIST
3662: LIST
3663: LIST
3664: LIST
3665: PUSH
3666: LD_INT 28
3668: PUSH
3669: LD_INT 55
3671: PUSH
3672: LD_INT 97
3674: PUSH
3675: LD_INT 3
3677: PUSH
3678: LD_INT 0
3680: PUSH
3681: LD_INT 0
3683: PUSH
3684: EMPTY
3685: LIST
3686: LIST
3687: LIST
3688: LIST
3689: LIST
3690: LIST
3691: PUSH
3692: LD_INT 28
3694: PUSH
3695: LD_INT 88
3697: PUSH
3698: LD_INT 128
3700: PUSH
3701: LD_INT 3
3703: PUSH
3704: LD_INT 0
3706: PUSH
3707: LD_INT 0
3709: PUSH
3710: EMPTY
3711: LIST
3712: LIST
3713: LIST
3714: LIST
3715: LIST
3716: LIST
3717: PUSH
3718: LD_INT 32
3720: PUSH
3721: LD_INT 69
3723: PUSH
3724: LD_INT 101
3726: PUSH
3727: LD_INT 2
3729: PUSH
3730: LD_INT 0
3732: PUSH
3733: LD_INT 0
3735: PUSH
3736: EMPTY
3737: LIST
3738: LIST
3739: LIST
3740: LIST
3741: LIST
3742: LIST
3743: PUSH
3744: LD_INT 1
3746: PUSH
3747: LD_INT 34
3749: PUSH
3750: LD_INT 23
3752: PUSH
3753: LD_INT 4
3755: PUSH
3756: LD_INT 0
3758: PUSH
3759: LD_INT 0
3761: PUSH
3762: EMPTY
3763: LIST
3764: LIST
3765: LIST
3766: LIST
3767: LIST
3768: LIST
3769: PUSH
3770: LD_INT 8
3772: PUSH
3773: LD_INT 25
3775: PUSH
3776: LD_INT 4
3778: PUSH
3779: LD_INT 3
3781: PUSH
3782: LD_INT 11
3784: PUSH
3785: LD_INT 10
3787: PUSH
3788: EMPTY
3789: LIST
3790: LIST
3791: LIST
3792: LIST
3793: LIST
3794: LIST
3795: PUSH
3796: LD_INT 8
3798: PUSH
3799: LD_INT 15
3801: PUSH
3802: LD_INT 4
3804: PUSH
3805: LD_INT 2
3807: PUSH
3808: LD_INT 14
3810: PUSH
3811: LD_INT 12
3813: PUSH
3814: EMPTY
3815: LIST
3816: LIST
3817: LIST
3818: LIST
3819: LIST
3820: LIST
3821: PUSH
3822: LD_INT 29
3824: PUSH
3825: LD_INT 55
3827: PUSH
3828: LD_INT 35
3830: PUSH
3831: LD_INT 2
3833: PUSH
3834: LD_INT 0
3836: PUSH
3837: LD_INT 0
3839: PUSH
3840: EMPTY
3841: LIST
3842: LIST
3843: LIST
3844: LIST
3845: LIST
3846: LIST
3847: PUSH
3848: LD_INT 29
3850: PUSH
3851: LD_INT 24
3853: PUSH
3854: LD_INT 44
3856: PUSH
3857: LD_INT 2
3859: PUSH
3860: LD_INT 0
3862: PUSH
3863: LD_INT 0
3865: PUSH
3866: EMPTY
3867: LIST
3868: LIST
3869: LIST
3870: LIST
3871: LIST
3872: LIST
3873: PUSH
3874: LD_INT 34
3876: PUSH
3877: LD_INT 34
3879: PUSH
3880: LD_INT 32
3882: PUSH
3883: LD_INT 4
3885: PUSH
3886: LD_INT 0
3888: PUSH
3889: LD_INT 0
3891: PUSH
3892: EMPTY
3893: LIST
3894: LIST
3895: LIST
3896: LIST
3897: LIST
3898: LIST
3899: PUSH
3900: LD_INT 3
3902: PUSH
3903: LD_INT 14
3905: PUSH
3906: LD_INT 16
3908: PUSH
3909: LD_INT 1
3911: PUSH
3912: LD_INT 0
3914: PUSH
3915: LD_INT 0
3917: PUSH
3918: EMPTY
3919: LIST
3920: LIST
3921: LIST
3922: LIST
3923: LIST
3924: LIST
3925: PUSH
3926: LD_INT 24
3928: PUSH
3929: LD_INT 10
3931: PUSH
3932: LD_INT 16
3934: PUSH
3935: LD_INT 1
3937: PUSH
3938: LD_INT 0
3940: PUSH
3941: LD_INT 0
3943: PUSH
3944: EMPTY
3945: LIST
3946: LIST
3947: LIST
3948: LIST
3949: LIST
3950: LIST
3951: PUSH
3952: LD_INT 21
3954: PUSH
3955: LD_INT 11
3957: PUSH
3958: LD_INT 13
3960: PUSH
3961: LD_INT 2
3963: PUSH
3964: LD_INT 0
3966: PUSH
3967: LD_INT 0
3969: PUSH
3970: EMPTY
3971: LIST
3972: LIST
3973: LIST
3974: LIST
3975: LIST
3976: LIST
3977: PUSH
3978: LD_INT 18
3980: PUSH
3981: LD_INT 14
3983: PUSH
3984: LD_INT 12
3986: PUSH
3987: LD_INT 3
3989: PUSH
3990: LD_INT 0
3992: PUSH
3993: LD_INT 0
3995: PUSH
3996: EMPTY
3997: LIST
3998: LIST
3999: LIST
4000: LIST
4001: LIST
4002: LIST
4003: PUSH
4004: LD_INT 16
4006: PUSH
4007: LD_INT 14
4009: PUSH
4010: LD_INT 19
4012: PUSH
4013: LD_INT 0
4015: PUSH
4016: LD_INT 0
4018: PUSH
4019: LD_INT 0
4021: PUSH
4022: EMPTY
4023: LIST
4024: LIST
4025: LIST
4026: LIST
4027: LIST
4028: LIST
4029: PUSH
4030: LD_INT 17
4032: PUSH
4033: LD_INT 18
4035: PUSH
4036: LD_INT 20
4038: PUSH
4039: LD_INT 5
4041: PUSH
4042: LD_INT 0
4044: PUSH
4045: LD_INT 0
4047: PUSH
4048: EMPTY
4049: LIST
4050: LIST
4051: LIST
4052: LIST
4053: LIST
4054: LIST
4055: PUSH
4056: LD_INT 28
4058: PUSH
4059: LD_INT 10
4061: PUSH
4062: LD_INT 5
4064: PUSH
4065: LD_INT 1
4067: PUSH
4068: LD_INT 0
4070: PUSH
4071: LD_INT 0
4073: PUSH
4074: EMPTY
4075: LIST
4076: LIST
4077: LIST
4078: LIST
4079: LIST
4080: LIST
4081: PUSH
4082: LD_INT 28
4084: PUSH
4085: LD_INT 8
4087: PUSH
4088: LD_INT 8
4090: PUSH
4091: LD_INT 1
4093: PUSH
4094: LD_INT 0
4096: PUSH
4097: LD_INT 0
4099: PUSH
4100: EMPTY
4101: LIST
4102: LIST
4103: LIST
4104: LIST
4105: LIST
4106: LIST
4107: PUSH
4108: LD_INT 26
4110: PUSH
4111: LD_INT 19
4113: PUSH
4114: LD_INT 2
4116: PUSH
4117: LD_INT 1
4119: PUSH
4120: LD_INT 0
4122: PUSH
4123: LD_INT 0
4125: PUSH
4126: EMPTY
4127: LIST
4128: LIST
4129: LIST
4130: LIST
4131: LIST
4132: LIST
4133: PUSH
4134: LD_INT 26
4136: PUSH
4137: LD_INT 30
4139: PUSH
4140: LD_INT 2
4142: PUSH
4143: LD_INT 1
4145: PUSH
4146: LD_INT 0
4148: PUSH
4149: LD_INT 0
4151: PUSH
4152: EMPTY
4153: LIST
4154: LIST
4155: LIST
4156: LIST
4157: LIST
4158: LIST
4159: PUSH
4160: LD_INT 5
4162: PUSH
4163: LD_INT 59
4165: PUSH
4166: LD_INT 20
4168: PUSH
4169: LD_INT 4
4171: PUSH
4172: LD_INT 0
4174: PUSH
4175: LD_INT 0
4177: PUSH
4178: EMPTY
4179: LIST
4180: LIST
4181: LIST
4182: LIST
4183: LIST
4184: LIST
4185: PUSH
4186: LD_INT 32
4188: PUSH
4189: LD_INT 60
4191: PUSH
4192: LD_INT 24
4194: PUSH
4195: LD_INT 4
4197: PUSH
4198: LD_INT 0
4200: PUSH
4201: LD_INT 0
4203: PUSH
4204: EMPTY
4205: LIST
4206: LIST
4207: LIST
4208: LIST
4209: LIST
4210: LIST
4211: PUSH
4212: LD_INT 32
4214: PUSH
4215: LD_INT 61
4217: PUSH
4218: LD_INT 45
4220: PUSH
4221: LD_INT 5
4223: PUSH
4224: LD_INT 0
4226: PUSH
4227: LD_INT 0
4229: PUSH
4230: EMPTY
4231: LIST
4232: LIST
4233: LIST
4234: LIST
4235: LIST
4236: LIST
4237: PUSH
4238: LD_INT 32
4240: PUSH
4241: LD_INT 52
4243: PUSH
4244: LD_INT 51
4246: PUSH
4247: LD_INT 5
4249: PUSH
4250: LD_INT 0
4252: PUSH
4253: LD_INT 0
4255: PUSH
4256: EMPTY
4257: LIST
4258: LIST
4259: LIST
4260: LIST
4261: LIST
4262: LIST
4263: PUSH
4264: LD_INT 33
4266: PUSH
4267: LD_INT 56
4269: PUSH
4270: LD_INT 51
4272: PUSH
4273: LD_INT 5
4275: PUSH
4276: LD_INT 0
4278: PUSH
4279: LD_INT 0
4281: PUSH
4282: EMPTY
4283: LIST
4284: LIST
4285: LIST
4286: LIST
4287: LIST
4288: LIST
4289: PUSH
4290: LD_INT 33
4292: PUSH
4293: LD_INT 62
4295: PUSH
4296: LD_INT 49
4298: PUSH
4299: LD_INT 5
4301: PUSH
4302: LD_INT 0
4304: PUSH
4305: LD_INT 0
4307: PUSH
4308: EMPTY
4309: LIST
4310: LIST
4311: LIST
4312: LIST
4313: LIST
4314: LIST
4315: PUSH
4316: LD_INT 33
4318: PUSH
4319: LD_INT 41
4321: PUSH
4322: LD_INT 47
4324: PUSH
4325: LD_INT 5
4327: PUSH
4328: LD_INT 0
4330: PUSH
4331: LD_INT 0
4333: PUSH
4334: EMPTY
4335: LIST
4336: LIST
4337: LIST
4338: LIST
4339: LIST
4340: LIST
4341: PUSH
4342: LD_INT 33
4344: PUSH
4345: LD_INT 33
4347: PUSH
4348: LD_INT 52
4350: PUSH
4351: LD_INT 5
4353: PUSH
4354: LD_INT 0
4356: PUSH
4357: LD_INT 0
4359: PUSH
4360: EMPTY
4361: LIST
4362: LIST
4363: LIST
4364: LIST
4365: LIST
4366: LIST
4367: PUSH
4368: LD_INT 5
4370: PUSH
4371: LD_INT 31
4373: PUSH
4374: LD_INT 40
4376: PUSH
4377: LD_INT 0
4379: PUSH
4380: LD_INT 0
4382: PUSH
4383: LD_INT 0
4385: PUSH
4386: EMPTY
4387: LIST
4388: LIST
4389: LIST
4390: LIST
4391: LIST
4392: LIST
4393: PUSH
4394: LD_INT 33
4396: PUSH
4397: LD_INT 65
4399: PUSH
4400: LD_INT 37
4402: PUSH
4403: LD_INT 5
4405: PUSH
4406: LD_INT 0
4408: PUSH
4409: LD_INT 0
4411: PUSH
4412: EMPTY
4413: LIST
4414: LIST
4415: LIST
4416: LIST
4417: LIST
4418: LIST
4419: PUSH
4420: LD_INT 33
4422: PUSH
4423: LD_INT 63
4425: PUSH
4426: LD_INT 29
4428: PUSH
4429: LD_INT 4
4431: PUSH
4432: LD_INT 0
4434: PUSH
4435: LD_INT 0
4437: PUSH
4438: EMPTY
4439: LIST
4440: LIST
4441: LIST
4442: LIST
4443: LIST
4444: LIST
4445: PUSH
4446: LD_INT 33
4448: PUSH
4449: LD_INT 54
4451: PUSH
4452: LD_INT 11
4454: PUSH
4455: LD_INT 4
4457: PUSH
4458: LD_INT 0
4460: PUSH
4461: LD_INT 0
4463: PUSH
4464: EMPTY
4465: LIST
4466: LIST
4467: LIST
4468: LIST
4469: LIST
4470: LIST
4471: PUSH
4472: LD_INT 33
4474: PUSH
4475: LD_INT 56
4477: PUSH
4478: LD_INT 15
4480: PUSH
4481: LD_INT 4
4483: PUSH
4484: LD_INT 0
4486: PUSH
4487: LD_INT 0
4489: PUSH
4490: EMPTY
4491: LIST
4492: LIST
4493: LIST
4494: LIST
4495: LIST
4496: LIST
4497: PUSH
4498: LD_INT 33
4500: PUSH
4501: LD_INT 51
4503: PUSH
4504: LD_INT 6
4506: PUSH
4507: LD_INT 4
4509: PUSH
4510: LD_INT 0
4512: PUSH
4513: LD_INT 0
4515: PUSH
4516: EMPTY
4517: LIST
4518: LIST
4519: LIST
4520: LIST
4521: LIST
4522: LIST
4523: PUSH
4524: LD_INT 26
4526: PUSH
4527: LD_INT 39
4529: PUSH
4530: LD_INT 25
4532: PUSH
4533: LD_INT 0
4535: PUSH
4536: LD_INT 0
4538: PUSH
4539: LD_INT 0
4541: PUSH
4542: EMPTY
4543: LIST
4544: LIST
4545: LIST
4546: LIST
4547: LIST
4548: LIST
4549: PUSH
4550: LD_INT 26
4552: PUSH
4553: LD_INT 37
4555: PUSH
4556: LD_INT 21
4558: PUSH
4559: LD_INT 0
4561: PUSH
4562: LD_INT 0
4564: PUSH
4565: LD_INT 0
4567: PUSH
4568: EMPTY
4569: LIST
4570: LIST
4571: LIST
4572: LIST
4573: LIST
4574: LIST
4575: PUSH
4576: LD_INT 32
4578: PUSH
4579: LD_INT 35
4581: PUSH
4582: LD_INT 17
4584: PUSH
4585: LD_INT 4
4587: PUSH
4588: LD_INT 0
4590: PUSH
4591: LD_INT 0
4593: PUSH
4594: EMPTY
4595: LIST
4596: LIST
4597: LIST
4598: LIST
4599: LIST
4600: LIST
4601: PUSH
4602: LD_INT 33
4604: PUSH
4605: LD_INT 35
4607: PUSH
4608: LD_INT 28
4610: PUSH
4611: LD_INT 4
4613: PUSH
4614: LD_INT 0
4616: PUSH
4617: LD_INT 0
4619: PUSH
4620: EMPTY
4621: LIST
4622: LIST
4623: LIST
4624: LIST
4625: LIST
4626: LIST
4627: PUSH
4628: LD_INT 33
4630: PUSH
4631: LD_INT 28
4633: PUSH
4634: LD_INT 46
4636: PUSH
4637: LD_INT 5
4639: PUSH
4640: LD_INT 0
4642: PUSH
4643: LD_INT 0
4645: PUSH
4646: EMPTY
4647: LIST
4648: LIST
4649: LIST
4650: LIST
4651: LIST
4652: LIST
4653: PUSH
4654: LD_INT 33
4656: PUSH
4657: LD_INT 31
4659: PUSH
4660: LD_INT 6
4662: PUSH
4663: LD_INT 4
4665: PUSH
4666: LD_INT 0
4668: PUSH
4669: LD_INT 0
4671: PUSH
4672: EMPTY
4673: LIST
4674: LIST
4675: LIST
4676: LIST
4677: LIST
4678: LIST
4679: PUSH
4680: LD_INT 26
4682: PUSH
4683: LD_INT 54
4685: PUSH
4686: LD_INT 38
4688: PUSH
4689: LD_INT 4
4691: PUSH
4692: LD_INT 0
4694: PUSH
4695: LD_INT 0
4697: PUSH
4698: EMPTY
4699: LIST
4700: LIST
4701: LIST
4702: LIST
4703: LIST
4704: LIST
4705: PUSH
4706: LD_INT 33
4708: PUSH
4709: LD_INT 207
4711: PUSH
4712: LD_INT 167
4714: PUSH
4715: LD_INT 3
4717: PUSH
4718: LD_INT 0
4720: PUSH
4721: LD_INT 0
4723: PUSH
4724: EMPTY
4725: LIST
4726: LIST
4727: LIST
4728: LIST
4729: LIST
4730: LIST
4731: PUSH
4732: LD_INT 30
4734: PUSH
4735: LD_INT 43
4737: PUSH
4738: LD_INT 2
4740: PUSH
4741: LD_INT 4
4743: PUSH
4744: LD_INT 0
4746: PUSH
4747: LD_INT 0
4749: PUSH
4750: EMPTY
4751: LIST
4752: LIST
4753: LIST
4754: LIST
4755: LIST
4756: LIST
4757: PUSH
4758: EMPTY
4759: LIST
4760: LIST
4761: LIST
4762: LIST
4763: LIST
4764: LIST
4765: LIST
4766: LIST
4767: LIST
4768: LIST
4769: LIST
4770: LIST
4771: LIST
4772: LIST
4773: LIST
4774: LIST
4775: LIST
4776: LIST
4777: LIST
4778: LIST
4779: LIST
4780: LIST
4781: LIST
4782: LIST
4783: LIST
4784: LIST
4785: LIST
4786: LIST
4787: LIST
4788: LIST
4789: LIST
4790: LIST
4791: LIST
4792: LIST
4793: LIST
4794: LIST
4795: LIST
4796: LIST
4797: LIST
4798: LIST
4799: LIST
4800: LIST
4801: LIST
4802: LIST
4803: LIST
4804: LIST
4805: LIST
4806: LIST
4807: LIST
4808: LIST
4809: LIST
4810: LIST
4811: LIST
4812: LIST
4813: LIST
4814: LIST
4815: LIST
4816: LIST
4817: LIST
4818: LIST
4819: LIST
4820: LIST
4821: LIST
4822: LIST
4823: LIST
4824: LIST
4825: LIST
4826: LIST
4827: LIST
4828: LIST
4829: LIST
4830: LIST
4831: LIST
4832: LIST
4833: LIST
4834: LIST
4835: LIST
4836: LIST
4837: LIST
4838: LIST
4839: LIST
4840: LIST
4841: LIST
4842: LIST
4843: LIST
4844: ST_TO_ADDR
// for i in tmp do
4845: LD_ADDR_VAR 0 2
4849: PUSH
4850: LD_VAR 0 4
4854: PUSH
4855: FOR_IN
4856: IFFALSE 5087
// begin uc_side := side ;
4858: LD_ADDR_OWVAR 20
4862: PUSH
4863: LD_VAR 0 5
4867: ST_TO_ADDR
// uc_nation := nation_russian ;
4868: LD_ADDR_OWVAR 21
4872: PUSH
4873: LD_INT 3
4875: ST_TO_ADDR
// bc_type := i [ 1 ] ;
4876: LD_ADDR_OWVAR 42
4880: PUSH
4881: LD_VAR 0 2
4885: PUSH
4886: LD_INT 1
4888: ARRAY
4889: ST_TO_ADDR
// bc_level := rand ( 5 , 6 ) ;
4890: LD_ADDR_OWVAR 43
4894: PUSH
4895: LD_INT 5
4897: PPUSH
4898: LD_INT 6
4900: PPUSH
4901: CALL_OW 12
4905: ST_TO_ADDR
// bc_kind1 := i [ 5 ] ;
4906: LD_ADDR_OWVAR 44
4910: PUSH
4911: LD_VAR 0 2
4915: PUSH
4916: LD_INT 5
4918: ARRAY
4919: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
4920: LD_ADDR_OWVAR 45
4924: PUSH
4925: LD_VAR 0 2
4929: PUSH
4930: LD_INT 6
4932: ARRAY
4933: ST_TO_ADDR
// sr := 0 ;
4934: LD_ADDR_VAR 0 6
4938: PUSH
4939: LD_INT 0
4941: ST_TO_ADDR
// if i [ 1 ] = b_oil_mine then
4942: LD_VAR 0 2
4946: PUSH
4947: LD_INT 1
4949: ARRAY
4950: PUSH
4951: LD_INT 29
4953: EQUAL
4954: IFFALSE 4966
// sr := mat_oil else
4956: LD_ADDR_VAR 0 6
4960: PUSH
4961: LD_INT 2
4963: ST_TO_ADDR
4964: GO 4988
// if i [ 1 ] = b_siberite_mine then
4966: LD_VAR 0 2
4970: PUSH
4971: LD_INT 1
4973: ARRAY
4974: PUSH
4975: LD_INT 30
4977: EQUAL
4978: IFFALSE 4988
// sr := mat_siberit ;
4980: LD_ADDR_VAR 0 6
4984: PUSH
4985: LD_INT 3
4987: ST_TO_ADDR
// if sr then
4988: LD_VAR 0 6
4992: IFFALSE 5048
// begin CreateDepositXY ( i [ 2 ] , i [ 3 ] , sr ) ;
4994: LD_VAR 0 2
4998: PUSH
4999: LD_INT 2
5001: ARRAY
5002: PPUSH
5003: LD_VAR 0 2
5007: PUSH
5008: LD_INT 3
5010: ARRAY
5011: PPUSH
5012: LD_VAR 0 6
5016: PPUSH
5017: CALL_OW 62
// SetResourceVisibility ( i [ 2 ] , i [ 3 ] , side ) ;
5021: LD_VAR 0 2
5025: PUSH
5026: LD_INT 2
5028: ARRAY
5029: PPUSH
5030: LD_VAR 0 2
5034: PUSH
5035: LD_INT 3
5037: ARRAY
5038: PPUSH
5039: LD_VAR 0 5
5043: PPUSH
5044: CALL_OW 441
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
5048: LD_ADDR_VAR 0 3
5052: PUSH
5053: LD_VAR 0 2
5057: PUSH
5058: LD_INT 2
5060: ARRAY
5061: PPUSH
5062: LD_VAR 0 2
5066: PUSH
5067: LD_INT 3
5069: ARRAY
5070: PPUSH
5071: LD_VAR 0 2
5075: PUSH
5076: LD_INT 4
5078: ARRAY
5079: PPUSH
5080: CALL_OW 47
5084: ST_TO_ADDR
// end ;
5085: GO 4855
5087: POP
5088: POP
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
5089: LD_ADDR_VAR 0 7
5093: PUSH
5094: LD_INT 22
5096: PUSH
5097: LD_VAR 0 5
5101: PUSH
5102: EMPTY
5103: LIST
5104: LIST
5105: PUSH
5106: LD_INT 30
5108: PUSH
5109: LD_INT 1
5111: PUSH
5112: EMPTY
5113: LIST
5114: LIST
5115: PUSH
5116: EMPTY
5117: LIST
5118: LIST
5119: PPUSH
5120: CALL_OW 69
5124: ST_TO_ADDR
// if not depot then
5125: LD_VAR 0 7
5129: NOT
5130: IFFALSE 5134
// exit ;
5132: GO 5478
// base := PrepareBase ( HexInfo ( 84 , 128 ) , rus1Base , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 3000 , 300 , 100 ] , [ 12 , 6 , 6 , 4 ] ) ;
5134: LD_ADDR_VAR 0 8
5138: PUSH
5139: LD_INT 84
5141: PPUSH
5142: LD_INT 128
5144: PPUSH
5145: CALL_OW 428
5149: PPUSH
5150: LD_INT 15
5152: PPUSH
5153: LD_INT 0
5155: PPUSH
5156: LD_INT 6
5158: PUSH
5159: LD_INT 7
5161: PUSH
5162: LD_INT 8
5164: PUSH
5165: EMPTY
5166: LIST
5167: LIST
5168: LIST
5169: PUSH
5170: LD_OWVAR 67
5174: ARRAY
5175: PPUSH
5176: LD_INT 3000
5178: PUSH
5179: LD_INT 300
5181: PUSH
5182: LD_INT 100
5184: PUSH
5185: EMPTY
5186: LIST
5187: LIST
5188: LIST
5189: PPUSH
5190: LD_INT 12
5192: PUSH
5193: LD_INT 6
5195: PUSH
5196: LD_INT 6
5198: PUSH
5199: LD_INT 4
5201: PUSH
5202: EMPTY
5203: LIST
5204: LIST
5205: LIST
5206: LIST
5207: PPUSH
5208: CALL 29498 0 6
5212: ST_TO_ADDR
// if not base then
5213: LD_VAR 0 8
5217: NOT
5218: IFFALSE 5222
// exit ;
5220: GO 5478
// mc_bases := Replace ( mc_bases , mc_rus_1 , base ) ;
5222: LD_ADDR_EXP 36
5226: PUSH
5227: LD_EXP 36
5231: PPUSH
5232: LD_EXP 7
5236: PPUSH
5237: LD_VAR 0 8
5241: PPUSH
5242: CALL_OW 1
5246: ST_TO_ADDR
// base := PrepareBase ( HexInfo ( 34 , 23 ) , rus2Base , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 20000 , 3000 , 1000 ] , [ 12 , 6 , 6 , 4 ] ) ;
5247: LD_ADDR_VAR 0 8
5251: PUSH
5252: LD_INT 34
5254: PPUSH
5255: LD_INT 23
5257: PPUSH
5258: CALL_OW 428
5262: PPUSH
5263: LD_INT 11
5265: PPUSH
5266: LD_INT 0
5268: PPUSH
5269: LD_INT 6
5271: PUSH
5272: LD_INT 7
5274: PUSH
5275: LD_INT 8
5277: PUSH
5278: EMPTY
5279: LIST
5280: LIST
5281: LIST
5282: PUSH
5283: LD_OWVAR 67
5287: ARRAY
5288: PPUSH
5289: LD_INT 20000
5291: PUSH
5292: LD_INT 3000
5294: PUSH
5295: LD_INT 1000
5297: PUSH
5298: EMPTY
5299: LIST
5300: LIST
5301: LIST
5302: PPUSH
5303: LD_INT 12
5305: PUSH
5306: LD_INT 6
5308: PUSH
5309: LD_INT 6
5311: PUSH
5312: LD_INT 4
5314: PUSH
5315: EMPTY
5316: LIST
5317: LIST
5318: LIST
5319: LIST
5320: PPUSH
5321: CALL 29498 0 6
5325: ST_TO_ADDR
// if not base then
5326: LD_VAR 0 8
5330: NOT
5331: IFFALSE 5335
// exit ;
5333: GO 5478
// mc_bases := Replace ( mc_bases , mc_rus_2 , base ) ;
5335: LD_ADDR_EXP 36
5339: PUSH
5340: LD_EXP 36
5344: PPUSH
5345: LD_EXP 8
5349: PPUSH
5350: LD_VAR 0 8
5354: PPUSH
5355: CALL_OW 1
5359: ST_TO_ADDR
// ruOutpost := PrepareBase ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_depot ] ] ) [ 1 ] , ruOutpostArea , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 500 , 100 , 10 ] , [ [ 6 , 7 , 8 ] [ Difficulty ] , 2 , 0 , 1 ] ) ;
5360: LD_ADDR_EXP 14
5364: PUSH
5365: LD_INT 22
5367: PUSH
5368: LD_INT 3
5370: PUSH
5371: EMPTY
5372: LIST
5373: LIST
5374: PUSH
5375: LD_INT 30
5377: PUSH
5378: LD_INT 0
5380: PUSH
5381: EMPTY
5382: LIST
5383: LIST
5384: PUSH
5385: EMPTY
5386: LIST
5387: LIST
5388: PPUSH
5389: CALL_OW 69
5393: PUSH
5394: LD_INT 1
5396: ARRAY
5397: PPUSH
5398: LD_INT 25
5400: PPUSH
5401: LD_INT 0
5403: PPUSH
5404: LD_INT 6
5406: PUSH
5407: LD_INT 7
5409: PUSH
5410: LD_INT 8
5412: PUSH
5413: EMPTY
5414: LIST
5415: LIST
5416: LIST
5417: PUSH
5418: LD_OWVAR 67
5422: ARRAY
5423: PPUSH
5424: LD_INT 500
5426: PUSH
5427: LD_INT 100
5429: PUSH
5430: LD_INT 10
5432: PUSH
5433: EMPTY
5434: LIST
5435: LIST
5436: LIST
5437: PPUSH
5438: LD_INT 6
5440: PUSH
5441: LD_INT 7
5443: PUSH
5444: LD_INT 8
5446: PUSH
5447: EMPTY
5448: LIST
5449: LIST
5450: LIST
5451: PUSH
5452: LD_OWVAR 67
5456: ARRAY
5457: PUSH
5458: LD_INT 2
5460: PUSH
5461: LD_INT 0
5463: PUSH
5464: LD_INT 1
5466: PUSH
5467: EMPTY
5468: LIST
5469: LIST
5470: LIST
5471: LIST
5472: PPUSH
5473: CALL 29498 0 6
5477: ST_TO_ADDR
// end ;
5478: LD_VAR 0 1
5482: RET
// export function PrepareLegion ; var i , b , veh , tmp , tmp2 , cameras , side , sr , depot , base ; begin
5483: LD_INT 0
5485: PPUSH
5486: PPUSH
5487: PPUSH
5488: PPUSH
5489: PPUSH
5490: PPUSH
5491: PPUSH
5492: PPUSH
5493: PPUSH
5494: PPUSH
5495: PPUSH
// PrepareNature ( 0 , 0 , 6 , 0 , 0 , 0 , 0 , legApe , 0 ) ;
5496: LD_INT 0
5498: PPUSH
5499: LD_INT 0
5501: PPUSH
5502: LD_INT 6
5504: PPUSH
5505: LD_INT 0
5507: PPUSH
5508: LD_INT 0
5510: PPUSH
5511: LD_INT 0
5513: PPUSH
5514: LD_INT 0
5516: PPUSH
5517: LD_INT 8
5519: PPUSH
5520: LD_INT 0
5522: PPUSH
5523: CALL 53903 0 9
// side := 8 ;
5527: LD_ADDR_VAR 0 8
5531: PUSH
5532: LD_INT 8
5534: ST_TO_ADDR
// tmp := AreaToList ( minesArea , 0 ) ;
5535: LD_ADDR_VAR 0 5
5539: PUSH
5540: LD_INT 20
5542: PPUSH
5543: LD_INT 0
5545: PPUSH
5546: CALL_OW 517
5550: ST_TO_ADDR
// if Difficulty > 2 then
5551: LD_OWVAR 67
5555: PUSH
5556: LD_INT 2
5558: GREATER
5559: IFFALSE 5703
// begin tmp2 := AreaToList ( minesArea2 , 0 ) ;
5561: LD_ADDR_VAR 0 6
5565: PUSH
5566: LD_INT 27
5568: PPUSH
5569: LD_INT 0
5571: PPUSH
5572: CALL_OW 517
5576: ST_TO_ADDR
// for i = 1 to tmp2 [ 1 ] do
5577: LD_ADDR_VAR 0 2
5581: PUSH
5582: DOUBLE
5583: LD_INT 1
5585: DEC
5586: ST_TO_ADDR
5587: LD_VAR 0 6
5591: PUSH
5592: LD_INT 1
5594: ARRAY
5595: PUSH
5596: FOR_TO
5597: IFFALSE 5701
// begin tmp := ReplaceIn ( tmp , [ 1 , tmp [ 1 ] + 1 ] , tmp2 [ 1 ] [ i ] ) ;
5599: LD_ADDR_VAR 0 5
5603: PUSH
5604: LD_VAR 0 5
5608: PPUSH
5609: LD_INT 1
5611: PUSH
5612: LD_VAR 0 5
5616: PUSH
5617: LD_INT 1
5619: ARRAY
5620: PUSH
5621: LD_INT 1
5623: PLUS
5624: PUSH
5625: EMPTY
5626: LIST
5627: LIST
5628: PPUSH
5629: LD_VAR 0 6
5633: PUSH
5634: LD_INT 1
5636: ARRAY
5637: PUSH
5638: LD_VAR 0 2
5642: ARRAY
5643: PPUSH
5644: CALL 26211 0 3
5648: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 2 , tmp [ 2 ] + 1 ] , tmp2 [ 2 ] [ i ] ) ;
5649: LD_ADDR_VAR 0 5
5653: PUSH
5654: LD_VAR 0 5
5658: PPUSH
5659: LD_INT 2
5661: PUSH
5662: LD_VAR 0 5
5666: PUSH
5667: LD_INT 2
5669: ARRAY
5670: PUSH
5671: LD_INT 1
5673: PLUS
5674: PUSH
5675: EMPTY
5676: LIST
5677: LIST
5678: PPUSH
5679: LD_VAR 0 6
5683: PUSH
5684: LD_INT 2
5686: ARRAY
5687: PUSH
5688: LD_VAR 0 2
5692: ARRAY
5693: PPUSH
5694: CALL 26211 0 3
5698: ST_TO_ADDR
// end ;
5699: GO 5596
5701: POP
5702: POP
// end ; if tmp then
5703: LD_VAR 0 5
5707: IFFALSE 5835
// begin for i = 1 to tmp [ 1 ] do
5709: LD_ADDR_VAR 0 2
5713: PUSH
5714: DOUBLE
5715: LD_INT 1
5717: DEC
5718: ST_TO_ADDR
5719: LD_VAR 0 5
5723: PUSH
5724: LD_INT 1
5726: ARRAY
5727: PUSH
5728: FOR_TO
5729: IFFALSE 5833
// begin PlaceMine ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side , 0 ) ;
5731: LD_VAR 0 5
5735: PUSH
5736: LD_INT 1
5738: ARRAY
5739: PUSH
5740: LD_VAR 0 2
5744: ARRAY
5745: PPUSH
5746: LD_VAR 0 5
5750: PUSH
5751: LD_INT 2
5753: ARRAY
5754: PUSH
5755: LD_VAR 0 2
5759: ARRAY
5760: PPUSH
5761: LD_VAR 0 8
5765: PPUSH
5766: LD_INT 0
5768: PPUSH
5769: CALL_OW 454
// staticMines := Insert ( staticMines , staticMines + 1 , [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ) ;
5773: LD_ADDR_EXP 16
5777: PUSH
5778: LD_EXP 16
5782: PPUSH
5783: LD_EXP 16
5787: PUSH
5788: LD_INT 1
5790: PLUS
5791: PPUSH
5792: LD_VAR 0 5
5796: PUSH
5797: LD_INT 1
5799: ARRAY
5800: PUSH
5801: LD_VAR 0 2
5805: ARRAY
5806: PUSH
5807: LD_VAR 0 5
5811: PUSH
5812: LD_INT 2
5814: ARRAY
5815: PUSH
5816: LD_VAR 0 2
5820: ARRAY
5821: PUSH
5822: EMPTY
5823: LIST
5824: LIST
5825: PPUSH
5826: CALL_OW 2
5830: ST_TO_ADDR
// end ;
5831: GO 5728
5833: POP
5834: POP
// end ; cameras := [ [ 165 , 156 ] , [ 143 , 145 ] , [ 152 , 165 ] , [ 123 , 153 ] , [ 161 , 215 ] , [ 172 , 100 ] , [ 148 , 83 ] , [ 122 , 68 ] , [ 105 , 74 ] , [ 113 , 97 ] ] ;
5835: LD_ADDR_VAR 0 7
5839: PUSH
5840: LD_INT 165
5842: PUSH
5843: LD_INT 156
5845: PUSH
5846: EMPTY
5847: LIST
5848: LIST
5849: PUSH
5850: LD_INT 143
5852: PUSH
5853: LD_INT 145
5855: PUSH
5856: EMPTY
5857: LIST
5858: LIST
5859: PUSH
5860: LD_INT 152
5862: PUSH
5863: LD_INT 165
5865: PUSH
5866: EMPTY
5867: LIST
5868: LIST
5869: PUSH
5870: LD_INT 123
5872: PUSH
5873: LD_INT 153
5875: PUSH
5876: EMPTY
5877: LIST
5878: LIST
5879: PUSH
5880: LD_INT 161
5882: PUSH
5883: LD_INT 215
5885: PUSH
5886: EMPTY
5887: LIST
5888: LIST
5889: PUSH
5890: LD_INT 172
5892: PUSH
5893: LD_INT 100
5895: PUSH
5896: EMPTY
5897: LIST
5898: LIST
5899: PUSH
5900: LD_INT 148
5902: PUSH
5903: LD_INT 83
5905: PUSH
5906: EMPTY
5907: LIST
5908: LIST
5909: PUSH
5910: LD_INT 122
5912: PUSH
5913: LD_INT 68
5915: PUSH
5916: EMPTY
5917: LIST
5918: LIST
5919: PUSH
5920: LD_INT 105
5922: PUSH
5923: LD_INT 74
5925: PUSH
5926: EMPTY
5927: LIST
5928: LIST
5929: PUSH
5930: LD_INT 113
5932: PUSH
5933: LD_INT 97
5935: PUSH
5936: EMPTY
5937: LIST
5938: LIST
5939: PUSH
5940: EMPTY
5941: LIST
5942: LIST
5943: LIST
5944: LIST
5945: LIST
5946: LIST
5947: LIST
5948: LIST
5949: LIST
5950: LIST
5951: ST_TO_ADDR
// for i in cameras do
5952: LD_ADDR_VAR 0 2
5956: PUSH
5957: LD_VAR 0 7
5961: PUSH
5962: FOR_IN
5963: IFFALSE 5994
// HiddenCamera ( i [ 1 ] , i [ 2 ] , side ) ;
5965: LD_VAR 0 2
5969: PUSH
5970: LD_INT 1
5972: ARRAY
5973: PPUSH
5974: LD_VAR 0 2
5978: PUSH
5979: LD_INT 2
5981: ARRAY
5982: PPUSH
5983: LD_VAR 0 8
5987: PPUSH
5988: CALL_OW 244
5992: GO 5962
5994: POP
5995: POP
// tmp := [ [ 1 , 144 , 110 , 1 , 0 , 0 ] , [ 3 , 151 , 118 , 0 , 0 , 0 ] , [ 8 , 158 , 110 , 4 , 10 , 15 ] , [ 23 , 154 , 121 , 5 , 0 , 0 ] , [ 22 , 155 , 118 , 4 , 0 , 0 ] , [ 21 , 151 , 122 , 0 , 0 , 0 ] , [ 18 , 148 , 118 , 1 , 0 , 0 ] , [ 17 , 147 , 114 , 2 , 0 , 0 ] , [ 29 , 163 , 120 , 5 , 0 , 0 ] , [ 27 , 137 , 116 , 3 , 0 , 0 ] , [ 27 , 133 , 111 , 1 , 0 , 0 ] , [ 27 , 132 , 106 , 4 , 0 , 0 ] , [ 26 , 137 , 111 , 0 , 0 , 0 ] , [ 8 , 141 , 117 , 1 , 13 , 11 ] , [ 30 , 140 , 128 , 1 , 0 , 0 ] , [ 5 , 146 , 96 , 3 , 0 , 0 ] , [ 32 , 150 , 98 , 3 , 0 , 0 ] , [ 32 , 142 , 95 , 3 , 0 , 0 ] , [ 32 , 159 , 104 , 3 , 0 , 0 ] , [ 32 , 133 , 95 , 3 , 0 , 0 ] , [ 32 , 131 , 102 , 2 , 0 , 0 ] , [ 32 , 164 , 144 , 0 , 0 , 0 ] , [ 32 , 146 , 139 , 0 , 0 , 0 ] , [ 26 , 143 , 122 , 4 , 0 , 0 ] , [ 26 , 164 , 116 , 2 , 0 , 0 ] , ] ;
5996: LD_ADDR_VAR 0 5
6000: PUSH
6001: LD_INT 1
6003: PUSH
6004: LD_INT 144
6006: PUSH
6007: LD_INT 110
6009: PUSH
6010: LD_INT 1
6012: PUSH
6013: LD_INT 0
6015: PUSH
6016: LD_INT 0
6018: PUSH
6019: EMPTY
6020: LIST
6021: LIST
6022: LIST
6023: LIST
6024: LIST
6025: LIST
6026: PUSH
6027: LD_INT 3
6029: PUSH
6030: LD_INT 151
6032: PUSH
6033: LD_INT 118
6035: PUSH
6036: LD_INT 0
6038: PUSH
6039: LD_INT 0
6041: PUSH
6042: LD_INT 0
6044: PUSH
6045: EMPTY
6046: LIST
6047: LIST
6048: LIST
6049: LIST
6050: LIST
6051: LIST
6052: PUSH
6053: LD_INT 8
6055: PUSH
6056: LD_INT 158
6058: PUSH
6059: LD_INT 110
6061: PUSH
6062: LD_INT 4
6064: PUSH
6065: LD_INT 10
6067: PUSH
6068: LD_INT 15
6070: PUSH
6071: EMPTY
6072: LIST
6073: LIST
6074: LIST
6075: LIST
6076: LIST
6077: LIST
6078: PUSH
6079: LD_INT 23
6081: PUSH
6082: LD_INT 154
6084: PUSH
6085: LD_INT 121
6087: PUSH
6088: LD_INT 5
6090: PUSH
6091: LD_INT 0
6093: PUSH
6094: LD_INT 0
6096: PUSH
6097: EMPTY
6098: LIST
6099: LIST
6100: LIST
6101: LIST
6102: LIST
6103: LIST
6104: PUSH
6105: LD_INT 22
6107: PUSH
6108: LD_INT 155
6110: PUSH
6111: LD_INT 118
6113: PUSH
6114: LD_INT 4
6116: PUSH
6117: LD_INT 0
6119: PUSH
6120: LD_INT 0
6122: PUSH
6123: EMPTY
6124: LIST
6125: LIST
6126: LIST
6127: LIST
6128: LIST
6129: LIST
6130: PUSH
6131: LD_INT 21
6133: PUSH
6134: LD_INT 151
6136: PUSH
6137: LD_INT 122
6139: PUSH
6140: LD_INT 0
6142: PUSH
6143: LD_INT 0
6145: PUSH
6146: LD_INT 0
6148: PUSH
6149: EMPTY
6150: LIST
6151: LIST
6152: LIST
6153: LIST
6154: LIST
6155: LIST
6156: PUSH
6157: LD_INT 18
6159: PUSH
6160: LD_INT 148
6162: PUSH
6163: LD_INT 118
6165: PUSH
6166: LD_INT 1
6168: PUSH
6169: LD_INT 0
6171: PUSH
6172: LD_INT 0
6174: PUSH
6175: EMPTY
6176: LIST
6177: LIST
6178: LIST
6179: LIST
6180: LIST
6181: LIST
6182: PUSH
6183: LD_INT 17
6185: PUSH
6186: LD_INT 147
6188: PUSH
6189: LD_INT 114
6191: PUSH
6192: LD_INT 2
6194: PUSH
6195: LD_INT 0
6197: PUSH
6198: LD_INT 0
6200: PUSH
6201: EMPTY
6202: LIST
6203: LIST
6204: LIST
6205: LIST
6206: LIST
6207: LIST
6208: PUSH
6209: LD_INT 29
6211: PUSH
6212: LD_INT 163
6214: PUSH
6215: LD_INT 120
6217: PUSH
6218: LD_INT 5
6220: PUSH
6221: LD_INT 0
6223: PUSH
6224: LD_INT 0
6226: PUSH
6227: EMPTY
6228: LIST
6229: LIST
6230: LIST
6231: LIST
6232: LIST
6233: LIST
6234: PUSH
6235: LD_INT 27
6237: PUSH
6238: LD_INT 137
6240: PUSH
6241: LD_INT 116
6243: PUSH
6244: LD_INT 3
6246: PUSH
6247: LD_INT 0
6249: PUSH
6250: LD_INT 0
6252: PUSH
6253: EMPTY
6254: LIST
6255: LIST
6256: LIST
6257: LIST
6258: LIST
6259: LIST
6260: PUSH
6261: LD_INT 27
6263: PUSH
6264: LD_INT 133
6266: PUSH
6267: LD_INT 111
6269: PUSH
6270: LD_INT 1
6272: PUSH
6273: LD_INT 0
6275: PUSH
6276: LD_INT 0
6278: PUSH
6279: EMPTY
6280: LIST
6281: LIST
6282: LIST
6283: LIST
6284: LIST
6285: LIST
6286: PUSH
6287: LD_INT 27
6289: PUSH
6290: LD_INT 132
6292: PUSH
6293: LD_INT 106
6295: PUSH
6296: LD_INT 4
6298: PUSH
6299: LD_INT 0
6301: PUSH
6302: LD_INT 0
6304: PUSH
6305: EMPTY
6306: LIST
6307: LIST
6308: LIST
6309: LIST
6310: LIST
6311: LIST
6312: PUSH
6313: LD_INT 26
6315: PUSH
6316: LD_INT 137
6318: PUSH
6319: LD_INT 111
6321: PUSH
6322: LD_INT 0
6324: PUSH
6325: LD_INT 0
6327: PUSH
6328: LD_INT 0
6330: PUSH
6331: EMPTY
6332: LIST
6333: LIST
6334: LIST
6335: LIST
6336: LIST
6337: LIST
6338: PUSH
6339: LD_INT 8
6341: PUSH
6342: LD_INT 141
6344: PUSH
6345: LD_INT 117
6347: PUSH
6348: LD_INT 1
6350: PUSH
6351: LD_INT 13
6353: PUSH
6354: LD_INT 11
6356: PUSH
6357: EMPTY
6358: LIST
6359: LIST
6360: LIST
6361: LIST
6362: LIST
6363: LIST
6364: PUSH
6365: LD_INT 30
6367: PUSH
6368: LD_INT 140
6370: PUSH
6371: LD_INT 128
6373: PUSH
6374: LD_INT 1
6376: PUSH
6377: LD_INT 0
6379: PUSH
6380: LD_INT 0
6382: PUSH
6383: EMPTY
6384: LIST
6385: LIST
6386: LIST
6387: LIST
6388: LIST
6389: LIST
6390: PUSH
6391: LD_INT 5
6393: PUSH
6394: LD_INT 146
6396: PUSH
6397: LD_INT 96
6399: PUSH
6400: LD_INT 3
6402: PUSH
6403: LD_INT 0
6405: PUSH
6406: LD_INT 0
6408: PUSH
6409: EMPTY
6410: LIST
6411: LIST
6412: LIST
6413: LIST
6414: LIST
6415: LIST
6416: PUSH
6417: LD_INT 32
6419: PUSH
6420: LD_INT 150
6422: PUSH
6423: LD_INT 98
6425: PUSH
6426: LD_INT 3
6428: PUSH
6429: LD_INT 0
6431: PUSH
6432: LD_INT 0
6434: PUSH
6435: EMPTY
6436: LIST
6437: LIST
6438: LIST
6439: LIST
6440: LIST
6441: LIST
6442: PUSH
6443: LD_INT 32
6445: PUSH
6446: LD_INT 142
6448: PUSH
6449: LD_INT 95
6451: PUSH
6452: LD_INT 3
6454: PUSH
6455: LD_INT 0
6457: PUSH
6458: LD_INT 0
6460: PUSH
6461: EMPTY
6462: LIST
6463: LIST
6464: LIST
6465: LIST
6466: LIST
6467: LIST
6468: PUSH
6469: LD_INT 32
6471: PUSH
6472: LD_INT 159
6474: PUSH
6475: LD_INT 104
6477: PUSH
6478: LD_INT 3
6480: PUSH
6481: LD_INT 0
6483: PUSH
6484: LD_INT 0
6486: PUSH
6487: EMPTY
6488: LIST
6489: LIST
6490: LIST
6491: LIST
6492: LIST
6493: LIST
6494: PUSH
6495: LD_INT 32
6497: PUSH
6498: LD_INT 133
6500: PUSH
6501: LD_INT 95
6503: PUSH
6504: LD_INT 3
6506: PUSH
6507: LD_INT 0
6509: PUSH
6510: LD_INT 0
6512: PUSH
6513: EMPTY
6514: LIST
6515: LIST
6516: LIST
6517: LIST
6518: LIST
6519: LIST
6520: PUSH
6521: LD_INT 32
6523: PUSH
6524: LD_INT 131
6526: PUSH
6527: LD_INT 102
6529: PUSH
6530: LD_INT 2
6532: PUSH
6533: LD_INT 0
6535: PUSH
6536: LD_INT 0
6538: PUSH
6539: EMPTY
6540: LIST
6541: LIST
6542: LIST
6543: LIST
6544: LIST
6545: LIST
6546: PUSH
6547: LD_INT 32
6549: PUSH
6550: LD_INT 164
6552: PUSH
6553: LD_INT 144
6555: PUSH
6556: LD_INT 0
6558: PUSH
6559: LD_INT 0
6561: PUSH
6562: LD_INT 0
6564: PUSH
6565: EMPTY
6566: LIST
6567: LIST
6568: LIST
6569: LIST
6570: LIST
6571: LIST
6572: PUSH
6573: LD_INT 32
6575: PUSH
6576: LD_INT 146
6578: PUSH
6579: LD_INT 139
6581: PUSH
6582: LD_INT 0
6584: PUSH
6585: LD_INT 0
6587: PUSH
6588: LD_INT 0
6590: PUSH
6591: EMPTY
6592: LIST
6593: LIST
6594: LIST
6595: LIST
6596: LIST
6597: LIST
6598: PUSH
6599: LD_INT 26
6601: PUSH
6602: LD_INT 143
6604: PUSH
6605: LD_INT 122
6607: PUSH
6608: LD_INT 4
6610: PUSH
6611: LD_INT 0
6613: PUSH
6614: LD_INT 0
6616: PUSH
6617: EMPTY
6618: LIST
6619: LIST
6620: LIST
6621: LIST
6622: LIST
6623: LIST
6624: PUSH
6625: LD_INT 26
6627: PUSH
6628: LD_INT 164
6630: PUSH
6631: LD_INT 116
6633: PUSH
6634: LD_INT 2
6636: PUSH
6637: LD_INT 0
6639: PUSH
6640: LD_INT 0
6642: PUSH
6643: EMPTY
6644: LIST
6645: LIST
6646: LIST
6647: LIST
6648: LIST
6649: LIST
6650: PUSH
6651: EMPTY
6652: LIST
6653: LIST
6654: LIST
6655: LIST
6656: LIST
6657: LIST
6658: LIST
6659: LIST
6660: LIST
6661: LIST
6662: LIST
6663: LIST
6664: LIST
6665: LIST
6666: LIST
6667: LIST
6668: LIST
6669: LIST
6670: LIST
6671: LIST
6672: LIST
6673: LIST
6674: LIST
6675: LIST
6676: LIST
6677: ST_TO_ADDR
// for i in tmp do
6678: LD_ADDR_VAR 0 2
6682: PUSH
6683: LD_VAR 0 5
6687: PUSH
6688: FOR_IN
6689: IFFALSE 6920
// begin uc_side := side ;
6691: LD_ADDR_OWVAR 20
6695: PUSH
6696: LD_VAR 0 8
6700: ST_TO_ADDR
// uc_nation := nation_arabian ;
6701: LD_ADDR_OWVAR 21
6705: PUSH
6706: LD_INT 2
6708: ST_TO_ADDR
// bc_type := i [ 1 ] ;
6709: LD_ADDR_OWVAR 42
6713: PUSH
6714: LD_VAR 0 2
6718: PUSH
6719: LD_INT 1
6721: ARRAY
6722: ST_TO_ADDR
// bc_level := rand ( 5 , 6 ) ;
6723: LD_ADDR_OWVAR 43
6727: PUSH
6728: LD_INT 5
6730: PPUSH
6731: LD_INT 6
6733: PPUSH
6734: CALL_OW 12
6738: ST_TO_ADDR
// bc_kind1 := i [ 5 ] ;
6739: LD_ADDR_OWVAR 44
6743: PUSH
6744: LD_VAR 0 2
6748: PUSH
6749: LD_INT 5
6751: ARRAY
6752: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
6753: LD_ADDR_OWVAR 45
6757: PUSH
6758: LD_VAR 0 2
6762: PUSH
6763: LD_INT 6
6765: ARRAY
6766: ST_TO_ADDR
// sr := 0 ;
6767: LD_ADDR_VAR 0 9
6771: PUSH
6772: LD_INT 0
6774: ST_TO_ADDR
// if i [ 1 ] = b_oil_mine then
6775: LD_VAR 0 2
6779: PUSH
6780: LD_INT 1
6782: ARRAY
6783: PUSH
6784: LD_INT 29
6786: EQUAL
6787: IFFALSE 6799
// sr := mat_oil else
6789: LD_ADDR_VAR 0 9
6793: PUSH
6794: LD_INT 2
6796: ST_TO_ADDR
6797: GO 6821
// if i [ 1 ] = b_siberite_mine then
6799: LD_VAR 0 2
6803: PUSH
6804: LD_INT 1
6806: ARRAY
6807: PUSH
6808: LD_INT 30
6810: EQUAL
6811: IFFALSE 6821
// sr := mat_siberit ;
6813: LD_ADDR_VAR 0 9
6817: PUSH
6818: LD_INT 3
6820: ST_TO_ADDR
// if sr then
6821: LD_VAR 0 9
6825: IFFALSE 6881
// begin CreateDepositXY ( i [ 2 ] , i [ 3 ] , sr ) ;
6827: LD_VAR 0 2
6831: PUSH
6832: LD_INT 2
6834: ARRAY
6835: PPUSH
6836: LD_VAR 0 2
6840: PUSH
6841: LD_INT 3
6843: ARRAY
6844: PPUSH
6845: LD_VAR 0 9
6849: PPUSH
6850: CALL_OW 62
// SetResourceVisibility ( i [ 2 ] , i [ 3 ] , side ) ;
6854: LD_VAR 0 2
6858: PUSH
6859: LD_INT 2
6861: ARRAY
6862: PPUSH
6863: LD_VAR 0 2
6867: PUSH
6868: LD_INT 3
6870: ARRAY
6871: PPUSH
6872: LD_VAR 0 8
6876: PPUSH
6877: CALL_OW 441
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
6881: LD_ADDR_VAR 0 3
6885: PUSH
6886: LD_VAR 0 2
6890: PUSH
6891: LD_INT 2
6893: ARRAY
6894: PPUSH
6895: LD_VAR 0 2
6899: PUSH
6900: LD_INT 3
6902: ARRAY
6903: PPUSH
6904: LD_VAR 0 2
6908: PUSH
6909: LD_INT 4
6911: ARRAY
6912: PPUSH
6913: CALL_OW 47
6917: ST_TO_ADDR
// end ;
6918: GO 6688
6920: POP
6921: POP
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
6922: LD_ADDR_VAR 0 10
6926: PUSH
6927: LD_INT 22
6929: PUSH
6930: LD_VAR 0 8
6934: PUSH
6935: EMPTY
6936: LIST
6937: LIST
6938: PUSH
6939: LD_INT 30
6941: PUSH
6942: LD_INT 1
6944: PUSH
6945: EMPTY
6946: LIST
6947: LIST
6948: PUSH
6949: EMPTY
6950: LIST
6951: LIST
6952: PPUSH
6953: CALL_OW 69
6957: ST_TO_ADDR
// if not depot then
6958: LD_VAR 0 10
6962: NOT
6963: IFFALSE 6967
// exit ;
6965: GO 7213
// base := PrepareBase ( depot [ 1 ] , legBase , 0 , [ 7 , 8 , 10 ] [ Difficulty ] , [ 3000 , 300 , 100 ] , [ 14 , 6 , 6 , 5 ] ) ;
6967: LD_ADDR_VAR 0 11
6971: PUSH
6972: LD_VAR 0 10
6976: PUSH
6977: LD_INT 1
6979: ARRAY
6980: PPUSH
6981: LD_INT 6
6983: PPUSH
6984: LD_INT 0
6986: PPUSH
6987: LD_INT 7
6989: PUSH
6990: LD_INT 8
6992: PUSH
6993: LD_INT 10
6995: PUSH
6996: EMPTY
6997: LIST
6998: LIST
6999: LIST
7000: PUSH
7001: LD_OWVAR 67
7005: ARRAY
7006: PPUSH
7007: LD_INT 3000
7009: PUSH
7010: LD_INT 300
7012: PUSH
7013: LD_INT 100
7015: PUSH
7016: EMPTY
7017: LIST
7018: LIST
7019: LIST
7020: PPUSH
7021: LD_INT 14
7023: PUSH
7024: LD_INT 6
7026: PUSH
7027: LD_INT 6
7029: PUSH
7030: LD_INT 5
7032: PUSH
7033: EMPTY
7034: LIST
7035: LIST
7036: LIST
7037: LIST
7038: PPUSH
7039: CALL 29498 0 6
7043: ST_TO_ADDR
// if not base then
7044: LD_VAR 0 11
7048: NOT
7049: IFFALSE 7053
// exit ;
7051: GO 7213
// if Difficulty > 1 then
7053: LD_OWVAR 67
7057: PUSH
7058: LD_INT 1
7060: GREATER
7061: IFFALSE 7134
// begin InitHc ;
7063: CALL_OW 19
// PrepareHuman ( sex_male , class_sniper , [ 5 , 8 ] [ Difficulty - 1 ] ) ;
7067: LD_INT 1
7069: PPUSH
7070: LD_INT 5
7072: PPUSH
7073: LD_INT 5
7075: PUSH
7076: LD_INT 8
7078: PUSH
7079: EMPTY
7080: LIST
7081: LIST
7082: PUSH
7083: LD_OWVAR 67
7087: PUSH
7088: LD_INT 1
7090: MINUS
7091: ARRAY
7092: PPUSH
7093: CALL_OW 380
// for i = 1 to Difficulty do
7097: LD_ADDR_VAR 0 2
7101: PUSH
7102: DOUBLE
7103: LD_INT 1
7105: DEC
7106: ST_TO_ADDR
7107: LD_OWVAR 67
7111: PUSH
7112: FOR_TO
7113: IFFALSE 7132
// PlaceUnitArea ( CreateHuman , sniperGuardArea , false ) ;
7115: CALL_OW 44
7119: PPUSH
7120: LD_INT 24
7122: PPUSH
7123: LD_INT 0
7125: PPUSH
7126: CALL_OW 49
7130: GO 7112
7132: POP
7133: POP
// end ; mc_bases := Replace ( mc_bases , mc_leg , base ) ;
7134: LD_ADDR_EXP 36
7138: PUSH
7139: LD_EXP 36
7143: PPUSH
7144: LD_EXP 6
7148: PPUSH
7149: LD_VAR 0 11
7153: PPUSH
7154: CALL_OW 1
7158: ST_TO_ADDR
// hc_gallery := ru ;
7159: LD_ADDR_OWVAR 33
7163: PUSH
7164: LD_STRING ru
7166: ST_TO_ADDR
// hc_face_number := 44 ;
7167: LD_ADDR_OWVAR 34
7171: PUSH
7172: LD_INT 44
7174: ST_TO_ADDR
// hc_name := Robert Farmer ;
7175: LD_ADDR_OWVAR 26
7179: PUSH
7180: LD_STRING Robert Farmer
7182: ST_TO_ADDR
// hc_sex := sex_male ;
7183: LD_ADDR_OWVAR 27
7187: PUSH
7188: LD_INT 1
7190: ST_TO_ADDR
// hc_class := 1 ;
7191: LD_ADDR_OWVAR 28
7195: PUSH
7196: LD_INT 1
7198: ST_TO_ADDR
// Farmer := CreateHuman ;
7199: LD_ADDR_EXP 13
7203: PUSH
7204: CALL_OW 44
7208: ST_TO_ADDR
// InitHc ;
7209: CALL_OW 19
// end ;
7213: LD_VAR 0 1
7217: RET
// export function PrepareAmericans ; var i , b , tmp , side , sr , base , depot ; begin
7218: LD_INT 0
7220: PPUSH
7221: PPUSH
7222: PPUSH
7223: PPUSH
7224: PPUSH
7225: PPUSH
7226: PPUSH
7227: PPUSH
// PrepareNature ( 0 , 0 , 4 , 0 , 0 , 0 , 0 , amerApe , 0 ) ;
7228: LD_INT 0
7230: PPUSH
7231: LD_INT 0
7233: PPUSH
7234: LD_INT 4
7236: PPUSH
7237: LD_INT 0
7239: PPUSH
7240: LD_INT 0
7242: PPUSH
7243: LD_INT 0
7245: PPUSH
7246: LD_INT 0
7248: PPUSH
7249: LD_INT 10
7251: PPUSH
7252: LD_INT 0
7254: PPUSH
7255: CALL 53903 0 9
// side := 4 ;
7259: LD_ADDR_VAR 0 5
7263: PUSH
7264: LD_INT 4
7266: ST_TO_ADDR
// tmp := [ [ 1 , 144 , 18 , 4 , 0 , 0 ] , [ 3 , 137 , 8 , 4 , 0 , 0 ] , [ 22 , 141 , 8 , 4 , 0 , 0 ] , [ 25 , 137 , 5 , 3 , 0 , 0 ] , [ 18 , 137 , 12 , 0 , 0 , 0 ] , [ 17 , 133 , 4 , 2 , 0 , 0 ] , [ 16 , 140 , 11 , 5 , 0 , 0 ] , [ 8 , 149 , 26 , 4 , 10 , 15 ] , [ 8 , 142 , 26 , 1 , 11 , 12 ] , [ 27 , 153 , 32 , 5 , 0 , 0 ] , [ 27 , 145 , 32 , 3 , 0 , 0 ] , [ 27 , 138 , 2 , 4 , 0 , 0 ] , [ 27 , 144 , 13 , 0 , 0 , 0 ] , [ 26 , 124 , 2 , 4 , 0 , 0 ] , [ 26 , 121 , 2 , 2 , 0 , 0 ] , [ 26 , 118 , 2 , 1 , 0 , 0 ] , [ 29 , 159 , 47 , 2 , 0 , 0 ] , [ 32 , 146 , 41 , 0 , 0 , 0 ] , [ 33 , 136 , 37 , 0 , 0 , 0 ] , [ 33 , 132 , 34 , 0 , 0 , 0 ] , [ 36 , 124 , 7 , 1 , 0 , 0 ] , [ 5 , 124 , 19 , 0 , 0 , 0 ] , [ 32 , 127 , 23 , 0 , 0 , 0 ] ] ;
7267: LD_ADDR_VAR 0 4
7271: PUSH
7272: LD_INT 1
7274: PUSH
7275: LD_INT 144
7277: PUSH
7278: LD_INT 18
7280: PUSH
7281: LD_INT 4
7283: PUSH
7284: LD_INT 0
7286: PUSH
7287: LD_INT 0
7289: PUSH
7290: EMPTY
7291: LIST
7292: LIST
7293: LIST
7294: LIST
7295: LIST
7296: LIST
7297: PUSH
7298: LD_INT 3
7300: PUSH
7301: LD_INT 137
7303: PUSH
7304: LD_INT 8
7306: PUSH
7307: LD_INT 4
7309: PUSH
7310: LD_INT 0
7312: PUSH
7313: LD_INT 0
7315: PUSH
7316: EMPTY
7317: LIST
7318: LIST
7319: LIST
7320: LIST
7321: LIST
7322: LIST
7323: PUSH
7324: LD_INT 22
7326: PUSH
7327: LD_INT 141
7329: PUSH
7330: LD_INT 8
7332: PUSH
7333: LD_INT 4
7335: PUSH
7336: LD_INT 0
7338: PUSH
7339: LD_INT 0
7341: PUSH
7342: EMPTY
7343: LIST
7344: LIST
7345: LIST
7346: LIST
7347: LIST
7348: LIST
7349: PUSH
7350: LD_INT 25
7352: PUSH
7353: LD_INT 137
7355: PUSH
7356: LD_INT 5
7358: PUSH
7359: LD_INT 3
7361: PUSH
7362: LD_INT 0
7364: PUSH
7365: LD_INT 0
7367: PUSH
7368: EMPTY
7369: LIST
7370: LIST
7371: LIST
7372: LIST
7373: LIST
7374: LIST
7375: PUSH
7376: LD_INT 18
7378: PUSH
7379: LD_INT 137
7381: PUSH
7382: LD_INT 12
7384: PUSH
7385: LD_INT 0
7387: PUSH
7388: LD_INT 0
7390: PUSH
7391: LD_INT 0
7393: PUSH
7394: EMPTY
7395: LIST
7396: LIST
7397: LIST
7398: LIST
7399: LIST
7400: LIST
7401: PUSH
7402: LD_INT 17
7404: PUSH
7405: LD_INT 133
7407: PUSH
7408: LD_INT 4
7410: PUSH
7411: LD_INT 2
7413: PUSH
7414: LD_INT 0
7416: PUSH
7417: LD_INT 0
7419: PUSH
7420: EMPTY
7421: LIST
7422: LIST
7423: LIST
7424: LIST
7425: LIST
7426: LIST
7427: PUSH
7428: LD_INT 16
7430: PUSH
7431: LD_INT 140
7433: PUSH
7434: LD_INT 11
7436: PUSH
7437: LD_INT 5
7439: PUSH
7440: LD_INT 0
7442: PUSH
7443: LD_INT 0
7445: PUSH
7446: EMPTY
7447: LIST
7448: LIST
7449: LIST
7450: LIST
7451: LIST
7452: LIST
7453: PUSH
7454: LD_INT 8
7456: PUSH
7457: LD_INT 149
7459: PUSH
7460: LD_INT 26
7462: PUSH
7463: LD_INT 4
7465: PUSH
7466: LD_INT 10
7468: PUSH
7469: LD_INT 15
7471: PUSH
7472: EMPTY
7473: LIST
7474: LIST
7475: LIST
7476: LIST
7477: LIST
7478: LIST
7479: PUSH
7480: LD_INT 8
7482: PUSH
7483: LD_INT 142
7485: PUSH
7486: LD_INT 26
7488: PUSH
7489: LD_INT 1
7491: PUSH
7492: LD_INT 11
7494: PUSH
7495: LD_INT 12
7497: PUSH
7498: EMPTY
7499: LIST
7500: LIST
7501: LIST
7502: LIST
7503: LIST
7504: LIST
7505: PUSH
7506: LD_INT 27
7508: PUSH
7509: LD_INT 153
7511: PUSH
7512: LD_INT 32
7514: PUSH
7515: LD_INT 5
7517: PUSH
7518: LD_INT 0
7520: PUSH
7521: LD_INT 0
7523: PUSH
7524: EMPTY
7525: LIST
7526: LIST
7527: LIST
7528: LIST
7529: LIST
7530: LIST
7531: PUSH
7532: LD_INT 27
7534: PUSH
7535: LD_INT 145
7537: PUSH
7538: LD_INT 32
7540: PUSH
7541: LD_INT 3
7543: PUSH
7544: LD_INT 0
7546: PUSH
7547: LD_INT 0
7549: PUSH
7550: EMPTY
7551: LIST
7552: LIST
7553: LIST
7554: LIST
7555: LIST
7556: LIST
7557: PUSH
7558: LD_INT 27
7560: PUSH
7561: LD_INT 138
7563: PUSH
7564: LD_INT 2
7566: PUSH
7567: LD_INT 4
7569: PUSH
7570: LD_INT 0
7572: PUSH
7573: LD_INT 0
7575: PUSH
7576: EMPTY
7577: LIST
7578: LIST
7579: LIST
7580: LIST
7581: LIST
7582: LIST
7583: PUSH
7584: LD_INT 27
7586: PUSH
7587: LD_INT 144
7589: PUSH
7590: LD_INT 13
7592: PUSH
7593: LD_INT 0
7595: PUSH
7596: LD_INT 0
7598: PUSH
7599: LD_INT 0
7601: PUSH
7602: EMPTY
7603: LIST
7604: LIST
7605: LIST
7606: LIST
7607: LIST
7608: LIST
7609: PUSH
7610: LD_INT 26
7612: PUSH
7613: LD_INT 124
7615: PUSH
7616: LD_INT 2
7618: PUSH
7619: LD_INT 4
7621: PUSH
7622: LD_INT 0
7624: PUSH
7625: LD_INT 0
7627: PUSH
7628: EMPTY
7629: LIST
7630: LIST
7631: LIST
7632: LIST
7633: LIST
7634: LIST
7635: PUSH
7636: LD_INT 26
7638: PUSH
7639: LD_INT 121
7641: PUSH
7642: LD_INT 2
7644: PUSH
7645: LD_INT 2
7647: PUSH
7648: LD_INT 0
7650: PUSH
7651: LD_INT 0
7653: PUSH
7654: EMPTY
7655: LIST
7656: LIST
7657: LIST
7658: LIST
7659: LIST
7660: LIST
7661: PUSH
7662: LD_INT 26
7664: PUSH
7665: LD_INT 118
7667: PUSH
7668: LD_INT 2
7670: PUSH
7671: LD_INT 1
7673: PUSH
7674: LD_INT 0
7676: PUSH
7677: LD_INT 0
7679: PUSH
7680: EMPTY
7681: LIST
7682: LIST
7683: LIST
7684: LIST
7685: LIST
7686: LIST
7687: PUSH
7688: LD_INT 29
7690: PUSH
7691: LD_INT 159
7693: PUSH
7694: LD_INT 47
7696: PUSH
7697: LD_INT 2
7699: PUSH
7700: LD_INT 0
7702: PUSH
7703: LD_INT 0
7705: PUSH
7706: EMPTY
7707: LIST
7708: LIST
7709: LIST
7710: LIST
7711: LIST
7712: LIST
7713: PUSH
7714: LD_INT 32
7716: PUSH
7717: LD_INT 146
7719: PUSH
7720: LD_INT 41
7722: PUSH
7723: LD_INT 0
7725: PUSH
7726: LD_INT 0
7728: PUSH
7729: LD_INT 0
7731: PUSH
7732: EMPTY
7733: LIST
7734: LIST
7735: LIST
7736: LIST
7737: LIST
7738: LIST
7739: PUSH
7740: LD_INT 33
7742: PUSH
7743: LD_INT 136
7745: PUSH
7746: LD_INT 37
7748: PUSH
7749: LD_INT 0
7751: PUSH
7752: LD_INT 0
7754: PUSH
7755: LD_INT 0
7757: PUSH
7758: EMPTY
7759: LIST
7760: LIST
7761: LIST
7762: LIST
7763: LIST
7764: LIST
7765: PUSH
7766: LD_INT 33
7768: PUSH
7769: LD_INT 132
7771: PUSH
7772: LD_INT 34
7774: PUSH
7775: LD_INT 0
7777: PUSH
7778: LD_INT 0
7780: PUSH
7781: LD_INT 0
7783: PUSH
7784: EMPTY
7785: LIST
7786: LIST
7787: LIST
7788: LIST
7789: LIST
7790: LIST
7791: PUSH
7792: LD_INT 36
7794: PUSH
7795: LD_INT 124
7797: PUSH
7798: LD_INT 7
7800: PUSH
7801: LD_INT 1
7803: PUSH
7804: LD_INT 0
7806: PUSH
7807: LD_INT 0
7809: PUSH
7810: EMPTY
7811: LIST
7812: LIST
7813: LIST
7814: LIST
7815: LIST
7816: LIST
7817: PUSH
7818: LD_INT 5
7820: PUSH
7821: LD_INT 124
7823: PUSH
7824: LD_INT 19
7826: PUSH
7827: LD_INT 0
7829: PUSH
7830: LD_INT 0
7832: PUSH
7833: LD_INT 0
7835: PUSH
7836: EMPTY
7837: LIST
7838: LIST
7839: LIST
7840: LIST
7841: LIST
7842: LIST
7843: PUSH
7844: LD_INT 32
7846: PUSH
7847: LD_INT 127
7849: PUSH
7850: LD_INT 23
7852: PUSH
7853: LD_INT 0
7855: PUSH
7856: LD_INT 0
7858: PUSH
7859: LD_INT 0
7861: PUSH
7862: EMPTY
7863: LIST
7864: LIST
7865: LIST
7866: LIST
7867: LIST
7868: LIST
7869: PUSH
7870: EMPTY
7871: LIST
7872: LIST
7873: LIST
7874: LIST
7875: LIST
7876: LIST
7877: LIST
7878: LIST
7879: LIST
7880: LIST
7881: LIST
7882: LIST
7883: LIST
7884: LIST
7885: LIST
7886: LIST
7887: LIST
7888: LIST
7889: LIST
7890: LIST
7891: LIST
7892: LIST
7893: LIST
7894: ST_TO_ADDR
// for i in tmp do
7895: LD_ADDR_VAR 0 2
7899: PUSH
7900: LD_VAR 0 4
7904: PUSH
7905: FOR_IN
7906: IFFALSE 8137
// begin uc_side := side ;
7908: LD_ADDR_OWVAR 20
7912: PUSH
7913: LD_VAR 0 5
7917: ST_TO_ADDR
// uc_nation := nation_american ;
7918: LD_ADDR_OWVAR 21
7922: PUSH
7923: LD_INT 1
7925: ST_TO_ADDR
// bc_type := i [ 1 ] ;
7926: LD_ADDR_OWVAR 42
7930: PUSH
7931: LD_VAR 0 2
7935: PUSH
7936: LD_INT 1
7938: ARRAY
7939: ST_TO_ADDR
// bc_level := rand ( 5 , 6 ) ;
7940: LD_ADDR_OWVAR 43
7944: PUSH
7945: LD_INT 5
7947: PPUSH
7948: LD_INT 6
7950: PPUSH
7951: CALL_OW 12
7955: ST_TO_ADDR
// bc_kind1 := i [ 5 ] ;
7956: LD_ADDR_OWVAR 44
7960: PUSH
7961: LD_VAR 0 2
7965: PUSH
7966: LD_INT 5
7968: ARRAY
7969: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
7970: LD_ADDR_OWVAR 45
7974: PUSH
7975: LD_VAR 0 2
7979: PUSH
7980: LD_INT 6
7982: ARRAY
7983: ST_TO_ADDR
// sr := 0 ;
7984: LD_ADDR_VAR 0 6
7988: PUSH
7989: LD_INT 0
7991: ST_TO_ADDR
// if i [ 1 ] = b_oil_mine then
7992: LD_VAR 0 2
7996: PUSH
7997: LD_INT 1
7999: ARRAY
8000: PUSH
8001: LD_INT 29
8003: EQUAL
8004: IFFALSE 8016
// sr := mat_oil else
8006: LD_ADDR_VAR 0 6
8010: PUSH
8011: LD_INT 2
8013: ST_TO_ADDR
8014: GO 8038
// if i [ 1 ] = b_siberite_mine then
8016: LD_VAR 0 2
8020: PUSH
8021: LD_INT 1
8023: ARRAY
8024: PUSH
8025: LD_INT 30
8027: EQUAL
8028: IFFALSE 8038
// sr := mat_siberit ;
8030: LD_ADDR_VAR 0 6
8034: PUSH
8035: LD_INT 3
8037: ST_TO_ADDR
// if sr then
8038: LD_VAR 0 6
8042: IFFALSE 8098
// begin CreateDepositXY ( i [ 2 ] , i [ 3 ] , sr ) ;
8044: LD_VAR 0 2
8048: PUSH
8049: LD_INT 2
8051: ARRAY
8052: PPUSH
8053: LD_VAR 0 2
8057: PUSH
8058: LD_INT 3
8060: ARRAY
8061: PPUSH
8062: LD_VAR 0 6
8066: PPUSH
8067: CALL_OW 62
// SetResourceVisibility ( i [ 2 ] , i [ 3 ] , side ) ;
8071: LD_VAR 0 2
8075: PUSH
8076: LD_INT 2
8078: ARRAY
8079: PPUSH
8080: LD_VAR 0 2
8084: PUSH
8085: LD_INT 3
8087: ARRAY
8088: PPUSH
8089: LD_VAR 0 5
8093: PPUSH
8094: CALL_OW 441
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
8098: LD_ADDR_VAR 0 3
8102: PUSH
8103: LD_VAR 0 2
8107: PUSH
8108: LD_INT 2
8110: ARRAY
8111: PPUSH
8112: LD_VAR 0 2
8116: PUSH
8117: LD_INT 3
8119: ARRAY
8120: PPUSH
8121: LD_VAR 0 2
8125: PUSH
8126: LD_INT 4
8128: ARRAY
8129: PPUSH
8130: CALL_OW 47
8134: ST_TO_ADDR
// end ;
8135: GO 7905
8137: POP
8138: POP
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
8139: LD_ADDR_VAR 0 8
8143: PUSH
8144: LD_INT 22
8146: PUSH
8147: LD_VAR 0 5
8151: PUSH
8152: EMPTY
8153: LIST
8154: LIST
8155: PUSH
8156: LD_INT 30
8158: PUSH
8159: LD_INT 1
8161: PUSH
8162: EMPTY
8163: LIST
8164: LIST
8165: PUSH
8166: EMPTY
8167: LIST
8168: LIST
8169: PPUSH
8170: CALL_OW 69
8174: ST_TO_ADDR
// if not depot then
8175: LD_VAR 0 8
8179: NOT
8180: IFFALSE 8184
// exit ;
8182: GO 8456
// base := PrepareBase ( depot [ 1 ] , amerBase , theta3 , [ 8 , 7 , 6 ] [ Difficulty ] , [ [ 2500 , 2000 , 1750 ] [ Difficulty ] , [ 300 , 250 , 200 ] [ Difficulty ] , [ 80 , 60 , 50 ] [ Difficulty ] ] , [ 7 , 6 , 5 , 5 ] ) ;
8184: LD_ADDR_VAR 0 7
8188: PUSH
8189: LD_VAR 0 8
8193: PUSH
8194: LD_INT 1
8196: ARRAY
8197: PPUSH
8198: LD_INT 3
8200: PPUSH
8201: LD_STRING theta3
8203: PPUSH
8204: LD_INT 8
8206: PUSH
8207: LD_INT 7
8209: PUSH
8210: LD_INT 6
8212: PUSH
8213: EMPTY
8214: LIST
8215: LIST
8216: LIST
8217: PUSH
8218: LD_OWVAR 67
8222: ARRAY
8223: PPUSH
8224: LD_INT 2500
8226: PUSH
8227: LD_INT 2000
8229: PUSH
8230: LD_INT 1750
8232: PUSH
8233: EMPTY
8234: LIST
8235: LIST
8236: LIST
8237: PUSH
8238: LD_OWVAR 67
8242: ARRAY
8243: PUSH
8244: LD_INT 300
8246: PUSH
8247: LD_INT 250
8249: PUSH
8250: LD_INT 200
8252: PUSH
8253: EMPTY
8254: LIST
8255: LIST
8256: LIST
8257: PUSH
8258: LD_OWVAR 67
8262: ARRAY
8263: PUSH
8264: LD_INT 80
8266: PUSH
8267: LD_INT 60
8269: PUSH
8270: LD_INT 50
8272: PUSH
8273: EMPTY
8274: LIST
8275: LIST
8276: LIST
8277: PUSH
8278: LD_OWVAR 67
8282: ARRAY
8283: PUSH
8284: EMPTY
8285: LIST
8286: LIST
8287: LIST
8288: PPUSH
8289: LD_INT 7
8291: PUSH
8292: LD_INT 6
8294: PUSH
8295: LD_INT 5
8297: PUSH
8298: LD_INT 5
8300: PUSH
8301: EMPTY
8302: LIST
8303: LIST
8304: LIST
8305: LIST
8306: PPUSH
8307: CALL 29498 0 6
8311: ST_TO_ADDR
// if not base then
8312: LD_VAR 0 7
8316: NOT
8317: IFFALSE 8321
// exit ;
8319: GO 8456
// mc_bases := Replace ( mc_bases , mc_amer , base ) ;
8321: LD_ADDR_EXP 36
8325: PUSH
8326: LD_EXP 36
8330: PPUSH
8331: LD_EXP 5
8335: PPUSH
8336: LD_VAR 0 7
8340: PPUSH
8341: CALL_OW 1
8345: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 7 ) ;
8346: LD_INT 1
8348: PPUSH
8349: LD_INT 1
8351: PPUSH
8352: LD_INT 7
8354: PPUSH
8355: CALL_OW 380
// allyCommander := CreateHuman ;
8359: LD_ADDR_EXP 11
8363: PUSH
8364: CALL_OW 44
8368: ST_TO_ADDR
// PlaceUnitXY ( allyCommander , 139 , 15 , false ) ;
8369: LD_EXP 11
8373: PPUSH
8374: LD_INT 139
8376: PPUSH
8377: LD_INT 15
8379: PPUSH
8380: LD_INT 0
8382: PPUSH
8383: CALL_OW 48
// ComTurnXY ( allyCommander , 137 , 15 ) ;
8387: LD_EXP 11
8391: PPUSH
8392: LD_INT 137
8394: PPUSH
8395: LD_INT 15
8397: PPUSH
8398: CALL_OW 118
// hc_gallery := us ;
8402: LD_ADDR_OWVAR 33
8406: PUSH
8407: LD_STRING us
8409: ST_TO_ADDR
// hc_face_number := 7 ;
8410: LD_ADDR_OWVAR 34
8414: PUSH
8415: LD_INT 7
8417: ST_TO_ADDR
// hc_name := Arthur Powell ;
8418: LD_ADDR_OWVAR 26
8422: PUSH
8423: LD_STRING Arthur Powell
8425: ST_TO_ADDR
// hc_sex := sex_male ;
8426: LD_ADDR_OWVAR 27
8430: PUSH
8431: LD_INT 1
8433: ST_TO_ADDR
// hc_class := 1 ;
8434: LD_ADDR_OWVAR 28
8438: PUSH
8439: LD_INT 1
8441: ST_TO_ADDR
// Powell := CreateHuman ;
8442: LD_ADDR_EXP 12
8446: PUSH
8447: CALL_OW 44
8451: ST_TO_ADDR
// InitHc ;
8452: CALL_OW 19
// end ;
8456: LD_VAR 0 1
8460: RET
// export function PreparePlayer ; var i , side , techs , tanks , cl , chassis , engines , weapons ; begin
8461: LD_INT 0
8463: PPUSH
8464: PPUSH
8465: PPUSH
8466: PPUSH
8467: PPUSH
8468: PPUSH
8469: PPUSH
8470: PPUSH
8471: PPUSH
// side := 1 ;
8472: LD_ADDR_VAR 0 3
8476: PUSH
8477: LD_INT 1
8479: ST_TO_ADDR
// result := [ [ ] , [ ] ] ;
8480: LD_ADDR_VAR 0 1
8484: PUSH
8485: EMPTY
8486: PUSH
8487: EMPTY
8488: PUSH
8489: EMPTY
8490: LIST
8491: LIST
8492: ST_TO_ADDR
// uc_side := side ;
8493: LD_ADDR_OWVAR 20
8497: PUSH
8498: LD_VAR 0 3
8502: ST_TO_ADDR
// uc_nation := nation_american ;
8503: LD_ADDR_OWVAR 21
8507: PUSH
8508: LD_INT 1
8510: ST_TO_ADDR
// InitHc ;
8511: CALL_OW 19
// InitVc ;
8515: CALL_OW 20
// hc_importance := 0 ;
8519: LD_ADDR_OWVAR 32
8523: PUSH
8524: LD_INT 0
8526: ST_TO_ADDR
// chassis := [ us_medium_wheeled , us_medium_tracked , us_medium_tracked ] ;
8527: LD_ADDR_VAR 0 7
8531: PUSH
8532: LD_INT 2
8534: PUSH
8535: LD_INT 3
8537: PUSH
8538: LD_INT 3
8540: PUSH
8541: EMPTY
8542: LIST
8543: LIST
8544: LIST
8545: ST_TO_ADDR
// if commander = 2 then
8546: LD_EXP 25
8550: PUSH
8551: LD_INT 2
8553: EQUAL
8554: IFFALSE 8575
// chassis := [ us_medium_tracked , us_heavy_tracked , us_heavy_tracked ] ;
8556: LD_ADDR_VAR 0 7
8560: PUSH
8561: LD_INT 3
8563: PUSH
8564: LD_INT 4
8566: PUSH
8567: LD_INT 4
8569: PUSH
8570: EMPTY
8571: LIST
8572: LIST
8573: LIST
8574: ST_TO_ADDR
// if commander = 3 then
8575: LD_EXP 25
8579: PUSH
8580: LD_INT 3
8582: EQUAL
8583: IFFALSE 8604
// chassis := [ us_medium_wheeled , us_morphling , us_morphling ] ;
8585: LD_ADDR_VAR 0 7
8589: PUSH
8590: LD_INT 2
8592: PUSH
8593: LD_INT 5
8595: PUSH
8596: LD_INT 5
8598: PUSH
8599: EMPTY
8600: LIST
8601: LIST
8602: LIST
8603: ST_TO_ADDR
// engines := [ engine_solar , engine_solar , engine_combustion ] ;
8604: LD_ADDR_VAR 0 8
8608: PUSH
8609: LD_INT 2
8611: PUSH
8612: LD_INT 2
8614: PUSH
8615: LD_INT 1
8617: PUSH
8618: EMPTY
8619: LIST
8620: LIST
8621: LIST
8622: ST_TO_ADDR
// if commander = 2 then
8623: LD_EXP 25
8627: PUSH
8628: LD_INT 2
8630: EQUAL
8631: IFFALSE 8652
// engines := [ engine_combustion , engine_combustion , engine_siberite ] ;
8633: LD_ADDR_VAR 0 8
8637: PUSH
8638: LD_INT 1
8640: PUSH
8641: LD_INT 1
8643: PUSH
8644: LD_INT 3
8646: PUSH
8647: EMPTY
8648: LIST
8649: LIST
8650: LIST
8651: ST_TO_ADDR
// if commander = 3 then
8652: LD_EXP 25
8656: PUSH
8657: LD_INT 3
8659: EQUAL
8660: IFFALSE 8681
// engines := [ engine_siberite , engine_siberite , engine_combustion ] ;
8662: LD_ADDR_VAR 0 8
8666: PUSH
8667: LD_INT 3
8669: PUSH
8670: LD_INT 3
8672: PUSH
8673: LD_INT 1
8675: PUSH
8676: EMPTY
8677: LIST
8678: LIST
8679: LIST
8680: ST_TO_ADDR
// weapons := [ us_double_gun , us_light_gun , us_gatling_gun ] ;
8681: LD_ADDR_VAR 0 9
8685: PUSH
8686: LD_INT 5
8688: PUSH
8689: LD_INT 3
8691: PUSH
8692: LD_INT 4
8694: PUSH
8695: EMPTY
8696: LIST
8697: LIST
8698: LIST
8699: ST_TO_ADDR
// if commander = 2 then
8700: LD_EXP 25
8704: PUSH
8705: LD_INT 2
8707: EQUAL
8708: IFFALSE 8729
// weapons := [ us_rocket_launcher , us_double_gun , us_heavy_gun ] ;
8710: LD_ADDR_VAR 0 9
8714: PUSH
8715: LD_INT 7
8717: PUSH
8718: LD_INT 5
8720: PUSH
8721: LD_INT 6
8723: PUSH
8724: EMPTY
8725: LIST
8726: LIST
8727: LIST
8728: ST_TO_ADDR
// if commander = 3 then
8729: LD_EXP 25
8733: PUSH
8734: LD_INT 3
8736: EQUAL
8737: IFFALSE 8758
// weapons := [ us_laser , us_double_laser , us_rocket_launcher ] ;
8739: LD_ADDR_VAR 0 9
8743: PUSH
8744: LD_INT 9
8746: PUSH
8747: LD_INT 10
8749: PUSH
8750: LD_INT 7
8752: PUSH
8753: EMPTY
8754: LIST
8755: LIST
8756: LIST
8757: ST_TO_ADDR
// tanks := [ 5 , 5 , 4 ] [ Difficulty ] ;
8758: LD_ADDR_VAR 0 5
8762: PUSH
8763: LD_INT 5
8765: PUSH
8766: LD_INT 5
8768: PUSH
8769: LD_INT 4
8771: PUSH
8772: EMPTY
8773: LIST
8774: LIST
8775: LIST
8776: PUSH
8777: LD_OWVAR 67
8781: ARRAY
8782: ST_TO_ADDR
// if commander = 2 then
8783: LD_EXP 25
8787: PUSH
8788: LD_INT 2
8790: EQUAL
8791: IFFALSE 8807
// tanks := tanks + 3 ;
8793: LD_ADDR_VAR 0 5
8797: PUSH
8798: LD_VAR 0 5
8802: PUSH
8803: LD_INT 3
8805: PLUS
8806: ST_TO_ADDR
// for i = 1 to tanks do
8807: LD_ADDR_VAR 0 2
8811: PUSH
8812: DOUBLE
8813: LD_INT 1
8815: DEC
8816: ST_TO_ADDR
8817: LD_VAR 0 5
8821: PUSH
8822: FOR_TO
8823: IFFALSE 8933
// begin PrepareVehicle ( chassis [ i mod 3 + 1 ] , engines [ rand ( 1 , 3 ) ] , control_manual , weapons [ i mod 3 + 1 ] , rand ( 60 , 70 ) ) ;
8825: LD_VAR 0 7
8829: PUSH
8830: LD_VAR 0 2
8834: PUSH
8835: LD_INT 3
8837: MOD
8838: PUSH
8839: LD_INT 1
8841: PLUS
8842: ARRAY
8843: PPUSH
8844: LD_VAR 0 8
8848: PUSH
8849: LD_INT 1
8851: PPUSH
8852: LD_INT 3
8854: PPUSH
8855: CALL_OW 12
8859: ARRAY
8860: PPUSH
8861: LD_INT 1
8863: PPUSH
8864: LD_VAR 0 9
8868: PUSH
8869: LD_VAR 0 2
8873: PUSH
8874: LD_INT 3
8876: MOD
8877: PUSH
8878: LD_INT 1
8880: PLUS
8881: ARRAY
8882: PPUSH
8883: LD_INT 60
8885: PPUSH
8886: LD_INT 70
8888: PPUSH
8889: CALL_OW 12
8893: PPUSH
8894: CALL 26089 0 5
// result := Replace ( result , 1 , result [ 1 ] ^ CreateVehicle ) ;
8898: LD_ADDR_VAR 0 1
8902: PUSH
8903: LD_VAR 0 1
8907: PPUSH
8908: LD_INT 1
8910: PPUSH
8911: LD_VAR 0 1
8915: PUSH
8916: LD_INT 1
8918: ARRAY
8919: PUSH
8920: CALL_OW 45
8924: ADD
8925: PPUSH
8926: CALL_OW 1
8930: ST_TO_ADDR
// end ;
8931: GO 8822
8933: POP
8934: POP
// cl := 1 ;
8935: LD_ADDR_VAR 0 6
8939: PUSH
8940: LD_INT 1
8942: ST_TO_ADDR
// for i = 1 to 10 do
8943: LD_ADDR_VAR 0 2
8947: PUSH
8948: DOUBLE
8949: LD_INT 1
8951: DEC
8952: ST_TO_ADDR
8953: LD_INT 10
8955: PUSH
8956: FOR_TO
8957: IFFALSE 9072
// begin if i mod 4 = 0 then
8959: LD_VAR 0 2
8963: PUSH
8964: LD_INT 4
8966: MOD
8967: PUSH
8968: LD_INT 0
8970: EQUAL
8971: IFFALSE 8987
// cl := cl + 1 ;
8973: LD_ADDR_VAR 0 6
8977: PUSH
8978: LD_VAR 0 6
8982: PUSH
8983: LD_INT 1
8985: PLUS
8986: ST_TO_ADDR
// if cl = 2 then
8987: LD_VAR 0 6
8991: PUSH
8992: LD_INT 2
8994: EQUAL
8995: IFFALSE 9005
// cl := 3 ;
8997: LD_ADDR_VAR 0 6
9001: PUSH
9002: LD_INT 3
9004: ST_TO_ADDR
// PrepareHuman ( false , cl , [ 6 , 6 , 5 ] [ Difficulty ] ) ;
9005: LD_INT 0
9007: PPUSH
9008: LD_VAR 0 6
9012: PPUSH
9013: LD_INT 6
9015: PUSH
9016: LD_INT 6
9018: PUSH
9019: LD_INT 5
9021: PUSH
9022: EMPTY
9023: LIST
9024: LIST
9025: LIST
9026: PUSH
9027: LD_OWVAR 67
9031: ARRAY
9032: PPUSH
9033: CALL_OW 380
// result := Replace ( result , 2 , result [ 2 ] ^ CreateHuman ) ;
9037: LD_ADDR_VAR 0 1
9041: PUSH
9042: LD_VAR 0 1
9046: PPUSH
9047: LD_INT 2
9049: PPUSH
9050: LD_VAR 0 1
9054: PUSH
9055: LD_INT 2
9057: ARRAY
9058: PUSH
9059: CALL_OW 44
9063: ADD
9064: PPUSH
9065: CALL_OW 1
9069: ST_TO_ADDR
// end ;
9070: GO 8956
9072: POP
9073: POP
// if commander = 1 then
9074: LD_EXP 25
9078: PUSH
9079: LD_INT 1
9081: EQUAL
9082: IFFALSE 9150
// for i = 1 to 4 do
9084: LD_ADDR_VAR 0 2
9088: PUSH
9089: DOUBLE
9090: LD_INT 1
9092: DEC
9093: ST_TO_ADDR
9094: LD_INT 4
9096: PUSH
9097: FOR_TO
9098: IFFALSE 9148
// begin PrepareHuman ( false , class_soldier , 8 ) ;
9100: LD_INT 0
9102: PPUSH
9103: LD_INT 1
9105: PPUSH
9106: LD_INT 8
9108: PPUSH
9109: CALL_OW 380
// result := Replace ( result , 2 , result [ 2 ] ^ CreateHuman ) ;
9113: LD_ADDR_VAR 0 1
9117: PUSH
9118: LD_VAR 0 1
9122: PPUSH
9123: LD_INT 2
9125: PPUSH
9126: LD_VAR 0 1
9130: PUSH
9131: LD_INT 2
9133: ARRAY
9134: PUSH
9135: CALL_OW 44
9139: ADD
9140: PPUSH
9141: CALL_OW 1
9145: ST_TO_ADDR
// end ;
9146: GO 9097
9148: POP
9149: POP
// techs := [ ] ;
9150: LD_ADDR_VAR 0 4
9154: PUSH
9155: EMPTY
9156: ST_TO_ADDR
// if commander = 1 then
9157: LD_EXP 25
9161: PUSH
9162: LD_INT 1
9164: EQUAL
9165: IFFALSE 9190
// techs := [ tech_weap1 , tech_weap2 , tech_weap3 , tech_lasSight ] ;
9167: LD_ADDR_VAR 0 4
9171: PUSH
9172: LD_INT 51
9174: PUSH
9175: LD_INT 52
9177: PUSH
9178: LD_INT 53
9180: PUSH
9181: LD_INT 12
9183: PUSH
9184: EMPTY
9185: LIST
9186: LIST
9187: LIST
9188: LIST
9189: ST_TO_ADDR
// if commander = 2 then
9190: LD_EXP 25
9194: PUSH
9195: LD_INT 2
9197: EQUAL
9198: IFFALSE 9235
// techs := [ tech_tech1 , tech_oilEng , tech_oilPow , tech_solEng , tech_solPow , tech_opto1 , tech_radar ] ;
9200: LD_ADDR_VAR 0 4
9204: PUSH
9205: LD_INT 48
9207: PUSH
9208: LD_INT 47
9210: PUSH
9211: LD_INT 46
9213: PUSH
9214: LD_INT 45
9216: PUSH
9217: LD_INT 35
9219: PUSH
9220: LD_INT 60
9222: PUSH
9223: LD_INT 6
9225: PUSH
9226: EMPTY
9227: LIST
9228: LIST
9229: LIST
9230: LIST
9231: LIST
9232: LIST
9233: LIST
9234: ST_TO_ADDR
// if commander = 3 then
9235: LD_EXP 25
9239: PUSH
9240: LD_INT 3
9242: EQUAL
9243: IFFALSE 9292
// techs := [ tech_advAI , tech_advchassis , tech_ai , tech_comp1 , tech_comp2 , tech_oilEng , tech_oilPow , tech_weap1 , tech_gatling , tech_gun ] ;
9245: LD_ADDR_VAR 0 4
9249: PUSH
9250: LD_INT 27
9252: PUSH
9253: LD_INT 36
9255: PUSH
9256: LD_INT 32
9258: PUSH
9259: LD_INT 57
9261: PUSH
9262: LD_INT 58
9264: PUSH
9265: LD_INT 47
9267: PUSH
9268: LD_INT 46
9270: PUSH
9271: LD_INT 51
9273: PUSH
9274: LD_INT 69
9276: PUSH
9277: LD_INT 39
9279: PUSH
9280: EMPTY
9281: LIST
9282: LIST
9283: LIST
9284: LIST
9285: LIST
9286: LIST
9287: LIST
9288: LIST
9289: LIST
9290: LIST
9291: ST_TO_ADDR
// if techs then
9292: LD_VAR 0 4
9296: IFFALSE 9330
// for i in techs do
9298: LD_ADDR_VAR 0 2
9302: PUSH
9303: LD_VAR 0 4
9307: PUSH
9308: FOR_IN
9309: IFFALSE 9328
// SetTech ( i , 1 , state_researched ) ;
9311: LD_VAR 0 2
9315: PPUSH
9316: LD_INT 1
9318: PPUSH
9319: LD_INT 2
9321: PPUSH
9322: CALL_OW 322
9326: GO 9308
9328: POP
9329: POP
// hc_gallery := skirmish ;
9330: LD_ADDR_OWVAR 33
9334: PUSH
9335: LD_STRING skirmish
9337: ST_TO_ADDR
// hc_face_number := commander ;
9338: LD_ADDR_OWVAR 34
9342: PUSH
9343: LD_EXP 25
9347: ST_TO_ADDR
// hc_importance := 100 ;
9348: LD_ADDR_OWVAR 32
9352: PUSH
9353: LD_INT 100
9355: ST_TO_ADDR
// case commander of 1 :
9356: LD_EXP 25
9360: PUSH
9361: LD_INT 1
9363: DOUBLE
9364: EQUAL
9365: IFTRUE 9369
9367: GO 9393
9369: POP
// begin hc_name := Jeff Ironside ;
9370: LD_ADDR_OWVAR 26
9374: PUSH
9375: LD_STRING Jeff Ironside
9377: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 7 ) ;
9378: LD_INT 1
9380: PPUSH
9381: LD_INT 1
9383: PPUSH
9384: LD_INT 7
9386: PPUSH
9387: CALL_OW 380
// end ; 2 :
9391: GO 9458
9393: LD_INT 2
9395: DOUBLE
9396: EQUAL
9397: IFTRUE 9401
9399: GO 9425
9401: POP
// begin hc_name := Paul Johnson ;
9402: LD_ADDR_OWVAR 26
9406: PUSH
9407: LD_STRING Paul Johnson
9409: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 7 ) ;
9410: LD_INT 1
9412: PPUSH
9413: LD_INT 3
9415: PPUSH
9416: LD_INT 7
9418: PPUSH
9419: CALL_OW 380
// end ; 3 :
9423: GO 9458
9425: LD_INT 3
9427: DOUBLE
9428: EQUAL
9429: IFTRUE 9433
9431: GO 9457
9433: POP
// begin hc_name := Lisa Stuart ;
9434: LD_ADDR_OWVAR 26
9438: PUSH
9439: LD_STRING Lisa Stuart
9441: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , 7 ) ;
9442: LD_INT 2
9444: PPUSH
9445: LD_INT 4
9447: PPUSH
9448: LD_INT 7
9450: PPUSH
9451: CALL_OW 380
// end ; end ;
9455: GO 9458
9457: POP
// playerCommander := CreateHuman ;
9458: LD_ADDR_EXP 9
9462: PUSH
9463: CALL_OW 44
9467: ST_TO_ADDR
// hc_importance := 0 ;
9468: LD_ADDR_OWVAR 32
9472: PUSH
9473: LD_INT 0
9475: ST_TO_ADDR
// hc_gallery :=  ;
9476: LD_ADDR_OWVAR 33
9480: PUSH
9481: LD_STRING 
9483: ST_TO_ADDR
// result := Replace ( result , 2 , result [ 2 ] ^ playerCommander ) ;
9484: LD_ADDR_VAR 0 1
9488: PUSH
9489: LD_VAR 0 1
9493: PPUSH
9494: LD_INT 2
9496: PPUSH
9497: LD_VAR 0 1
9501: PUSH
9502: LD_INT 2
9504: ARRAY
9505: PUSH
9506: LD_EXP 9
9510: ADD
9511: PPUSH
9512: CALL_OW 1
9516: ST_TO_ADDR
// end ;
9517: LD_VAR 0 1
9521: RET
// export function PrepareReinforcements ; var i , peopleAmount , tmp , un , veh ; begin
9522: LD_INT 0
9524: PPUSH
9525: PPUSH
9526: PPUSH
9527: PPUSH
9528: PPUSH
9529: PPUSH
// uc_side := 1 ;
9530: LD_ADDR_OWVAR 20
9534: PUSH
9535: LD_INT 1
9537: ST_TO_ADDR
// uc_nation := 1 ;
9538: LD_ADDR_OWVAR 21
9542: PUSH
9543: LD_INT 1
9545: ST_TO_ADDR
// InitHc ;
9546: CALL_OW 19
// peopleAmount := [ 3 , 3 , 2 ] [ Difficulty ] ;
9550: LD_ADDR_VAR 0 3
9554: PUSH
9555: LD_INT 3
9557: PUSH
9558: LD_INT 3
9560: PUSH
9561: LD_INT 2
9563: PUSH
9564: EMPTY
9565: LIST
9566: LIST
9567: LIST
9568: PUSH
9569: LD_OWVAR 67
9573: ARRAY
9574: ST_TO_ADDR
// for i = 1 to peopleAmount do
9575: LD_ADDR_VAR 0 2
9579: PUSH
9580: DOUBLE
9581: LD_INT 1
9583: DEC
9584: ST_TO_ADDR
9585: LD_VAR 0 3
9589: PUSH
9590: FOR_TO
9591: IFFALSE 9640
// begin PrepareHuman ( false , 2 , [ 7 , 6 , 5 ] [ Difficulty ] ) ;
9593: LD_INT 0
9595: PPUSH
9596: LD_INT 2
9598: PPUSH
9599: LD_INT 7
9601: PUSH
9602: LD_INT 6
9604: PUSH
9605: LD_INT 5
9607: PUSH
9608: EMPTY
9609: LIST
9610: LIST
9611: LIST
9612: PUSH
9613: LD_OWVAR 67
9617: ARRAY
9618: PPUSH
9619: CALL_OW 380
// PlaceUnitInArea ( CreateHuman , startArea , false ) ;
9623: CALL_OW 44
9627: PPUSH
9628: LD_INT 19
9630: PPUSH
9631: LD_INT 0
9633: PPUSH
9634: CALL 60748 0 3
// end ;
9638: GO 9590
9640: POP
9641: POP
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_computer , us_crane , 58 ) ;
9642: LD_INT 2
9644: PPUSH
9645: LD_INT 1
9647: PPUSH
9648: LD_INT 3
9650: PPUSH
9651: LD_INT 13
9653: PPUSH
9654: LD_INT 58
9656: PPUSH
9657: CALL 26089 0 5
// PlaceUnitInArea ( CreateVehicle , startArea , false ) ;
9661: CALL_OW 45
9665: PPUSH
9666: LD_INT 19
9668: PPUSH
9669: LD_INT 0
9671: PPUSH
9672: CALL 60748 0 3
// if commander = 1 then
9676: LD_EXP 25
9680: PUSH
9681: LD_INT 1
9683: EQUAL
9684: IFFALSE 9695
// wait ( 6 6$00 ) else
9686: LD_INT 12600
9688: PPUSH
9689: CALL_OW 67
9693: GO 9702
// wait ( 8 8$00 ) ;
9695: LD_INT 16800
9697: PPUSH
9698: CALL_OW 67
// uc_side := 1 ;
9702: LD_ADDR_OWVAR 20
9706: PUSH
9707: LD_INT 1
9709: ST_TO_ADDR
// uc_nation := 1 ;
9710: LD_ADDR_OWVAR 21
9714: PUSH
9715: LD_INT 1
9717: ST_TO_ADDR
// InitVc ;
9718: CALL_OW 20
// InitHc ;
9722: CALL_OW 19
// for i = 1 to 5 do
9726: LD_ADDR_VAR 0 2
9730: PUSH
9731: DOUBLE
9732: LD_INT 1
9734: DEC
9735: ST_TO_ADDR
9736: LD_INT 5
9738: PUSH
9739: FOR_TO
9740: IFFALSE 9984
// begin PrepareVehicle ( [ us_heavy_tracked , us_medium_tracked , us_light_wheeled ] [ i mod 3 + 1 ] , engine_combustion , [ control_manual , control_computer , control_computer ] [ i mod 3 + 1 ] , [ us_heavy_gun , us_cargo_bay , us_radar ] [ i mod 3 + 1 ] , rand ( 40 , 55 ) ) ;
9742: LD_INT 4
9744: PUSH
9745: LD_INT 3
9747: PUSH
9748: LD_INT 1
9750: PUSH
9751: EMPTY
9752: LIST
9753: LIST
9754: LIST
9755: PUSH
9756: LD_VAR 0 2
9760: PUSH
9761: LD_INT 3
9763: MOD
9764: PUSH
9765: LD_INT 1
9767: PLUS
9768: ARRAY
9769: PPUSH
9770: LD_INT 1
9772: PPUSH
9773: LD_INT 1
9775: PUSH
9776: LD_INT 3
9778: PUSH
9779: LD_INT 3
9781: PUSH
9782: EMPTY
9783: LIST
9784: LIST
9785: LIST
9786: PUSH
9787: LD_VAR 0 2
9791: PUSH
9792: LD_INT 3
9794: MOD
9795: PUSH
9796: LD_INT 1
9798: PLUS
9799: ARRAY
9800: PPUSH
9801: LD_INT 6
9803: PUSH
9804: LD_INT 12
9806: PUSH
9807: LD_INT 11
9809: PUSH
9810: EMPTY
9811: LIST
9812: LIST
9813: LIST
9814: PUSH
9815: LD_VAR 0 2
9819: PUSH
9820: LD_INT 3
9822: MOD
9823: PUSH
9824: LD_INT 1
9826: PLUS
9827: ARRAY
9828: PPUSH
9829: LD_INT 40
9831: PPUSH
9832: LD_INT 55
9834: PPUSH
9835: CALL_OW 12
9839: PPUSH
9840: CALL 26089 0 5
// veh := CreateVehicle ;
9844: LD_ADDR_VAR 0 6
9848: PUSH
9849: CALL_OW 45
9853: ST_TO_ADDR
// PlaceUnitInArea ( veh , startArea , false ) ;
9854: LD_VAR 0 6
9858: PPUSH
9859: LD_INT 19
9861: PPUSH
9862: LD_INT 0
9864: PPUSH
9865: CALL 60748 0 3
// if GetWeapon ( veh ) = us_cargo_bay then
9869: LD_VAR 0 6
9873: PPUSH
9874: CALL_OW 264
9878: PUSH
9879: LD_INT 12
9881: EQUAL
9882: IFFALSE 9914
// begin AddCargo ( veh , mat_cans , 70 ) ;
9884: LD_VAR 0 6
9888: PPUSH
9889: LD_INT 1
9891: PPUSH
9892: LD_INT 70
9894: PPUSH
9895: CALL_OW 291
// AddCargo ( veh , mat_siberit , 30 ) ;
9899: LD_VAR 0 6
9903: PPUSH
9904: LD_INT 3
9906: PPUSH
9907: LD_INT 30
9909: PPUSH
9910: CALL_OW 291
// end ; if GetControl ( veh ) = control_manual then
9914: LD_VAR 0 6
9918: PPUSH
9919: CALL_OW 263
9923: PUSH
9924: LD_INT 1
9926: EQUAL
9927: IFFALSE 9982
// begin PrepareHuman ( sex_male , 3 , 6 ) ;
9929: LD_INT 1
9931: PPUSH
9932: LD_INT 3
9934: PPUSH
9935: LD_INT 6
9937: PPUSH
9938: CALL_OW 380
// un := CreateHuman ;
9942: LD_ADDR_VAR 0 5
9946: PUSH
9947: CALL_OW 44
9951: ST_TO_ADDR
// tmp := tmp ^ un ;
9952: LD_ADDR_VAR 0 4
9956: PUSH
9957: LD_VAR 0 4
9961: PUSH
9962: LD_VAR 0 5
9966: ADD
9967: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9968: LD_VAR 0 5
9972: PPUSH
9973: LD_VAR 0 6
9977: PPUSH
9978: CALL_OW 52
// end ; end ;
9982: GO 9739
9984: POP
9985: POP
// if tmp then
9986: LD_VAR 0 4
9990: IFFALSE 10054
// begin CenterNowOnUnits ( tmp ) ;
9992: LD_VAR 0 4
9996: PPUSH
9997: CALL_OW 87
// Say ( tmp [ 1 ] , DAR-1 ) ;
10001: LD_VAR 0 4
10005: PUSH
10006: LD_INT 1
10008: ARRAY
10009: PPUSH
10010: LD_STRING DAR-1
10012: PPUSH
10013: CALL_OW 88
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-DAR ) ;
10017: LD_EXP 9
10021: PPUSH
10022: LD_STRING D
10024: PUSH
10025: LD_STRING I
10027: PUSH
10028: LD_STRING J
10030: PUSH
10031: LD_STRING S
10033: PUSH
10034: EMPTY
10035: LIST
10036: LIST
10037: LIST
10038: PUSH
10039: LD_EXP 25
10043: ARRAY
10044: STR
10045: PUSH
10046: LD_STRING -1-DAR
10048: STR
10049: PPUSH
10050: CALL_OW 88
// end ; if not reinforceAllowed then
10054: LD_EXP 24
10058: NOT
10059: IFFALSE 10063
// exit ;
10061: GO 10217
// wait ( 25 25$00 ) ;
10063: LD_INT 52500
10065: PPUSH
10066: CALL_OW 67
// uc_side := 1 ;
10070: LD_ADDR_OWVAR 20
10074: PUSH
10075: LD_INT 1
10077: ST_TO_ADDR
// uc_nation := 1 ;
10078: LD_ADDR_OWVAR 21
10082: PUSH
10083: LD_INT 1
10085: ST_TO_ADDR
// InitVc ;
10086: CALL_OW 20
// InitHc ;
10090: CALL_OW 19
// for i = 1 to 4 do
10094: LD_ADDR_VAR 0 2
10098: PUSH
10099: DOUBLE
10100: LD_INT 1
10102: DEC
10103: ST_TO_ADDR
10104: LD_INT 4
10106: PUSH
10107: FOR_TO
10108: IFFALSE 10215
// begin PrepareVehicle ( us_morphling , engine_siberite , control_manual , us_heavy_gun , 1 ) ;
10110: LD_INT 5
10112: PPUSH
10113: LD_INT 3
10115: PPUSH
10116: LD_INT 1
10118: PPUSH
10119: LD_INT 6
10121: PPUSH
10122: LD_INT 1
10124: PPUSH
10125: CALL 26089 0 5
// veh := CreateVehicle ;
10129: LD_ADDR_VAR 0 6
10133: PUSH
10134: CALL_OW 45
10138: ST_TO_ADDR
// PlaceUnitInArea ( veh , startArea , false ) ;
10139: LD_VAR 0 6
10143: PPUSH
10144: LD_INT 19
10146: PPUSH
10147: LD_INT 0
10149: PPUSH
10150: CALL 60748 0 3
// if GetControl ( veh ) = control_manual then
10154: LD_VAR 0 6
10158: PPUSH
10159: CALL_OW 263
10163: PUSH
10164: LD_INT 1
10166: EQUAL
10167: IFFALSE 10213
// begin PrepareHuman ( false , 3 , [ 7 , 6 , 5 ] [ Difficulty ] ) ;
10169: LD_INT 0
10171: PPUSH
10172: LD_INT 3
10174: PPUSH
10175: LD_INT 7
10177: PUSH
10178: LD_INT 6
10180: PUSH
10181: LD_INT 5
10183: PUSH
10184: EMPTY
10185: LIST
10186: LIST
10187: LIST
10188: PUSH
10189: LD_OWVAR 67
10193: ARRAY
10194: PPUSH
10195: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
10199: CALL_OW 44
10203: PPUSH
10204: LD_VAR 0 6
10208: PPUSH
10209: CALL_OW 52
// end ; end ;
10213: GO 10107
10215: POP
10216: POP
// end ;
10217: LD_VAR 0 1
10221: RET
// export function PrepareLegionReinforcements ; var i , un , j , tmp ; begin
10222: LD_INT 0
10224: PPUSH
10225: PPUSH
10226: PPUSH
10227: PPUSH
10228: PPUSH
// uc_side := 8 ;
10229: LD_ADDR_OWVAR 20
10233: PUSH
10234: LD_INT 8
10236: ST_TO_ADDR
// uc_nation := nation_arabian ;
10237: LD_ADDR_OWVAR 21
10241: PUSH
10242: LD_INT 2
10244: ST_TO_ADDR
// for i = 1 to 2 do
10245: LD_ADDR_VAR 0 2
10249: PUSH
10250: DOUBLE
10251: LD_INT 1
10253: DEC
10254: ST_TO_ADDR
10255: LD_INT 2
10257: PUSH
10258: FOR_TO
10259: IFFALSE 10339
// for j = 1 to 4 do
10261: LD_ADDR_VAR 0 4
10265: PUSH
10266: DOUBLE
10267: LD_INT 1
10269: DEC
10270: ST_TO_ADDR
10271: LD_INT 4
10273: PUSH
10274: FOR_TO
10275: IFFALSE 10335
// begin PrepareHuman ( false , j , 8 ) ;
10277: LD_INT 0
10279: PPUSH
10280: LD_VAR 0 4
10284: PPUSH
10285: LD_INT 8
10287: PPUSH
10288: CALL_OW 380
// un := CreateHuman ;
10292: LD_ADDR_VAR 0 3
10296: PUSH
10297: CALL_OW 44
10301: ST_TO_ADDR
// PlaceUnitArea ( un , legionSpawn , false ) ;
10302: LD_VAR 0 3
10306: PPUSH
10307: LD_INT 23
10309: PPUSH
10310: LD_INT 0
10312: PPUSH
10313: CALL_OW 49
// tmp := tmp union un ;
10317: LD_ADDR_VAR 0 5
10321: PUSH
10322: LD_VAR 0 5
10326: PUSH
10327: LD_VAR 0 3
10331: UNION
10332: ST_TO_ADDR
// end ;
10333: GO 10274
10335: POP
10336: POP
10337: GO 10258
10339: POP
10340: POP
// for i in tmp do
10341: LD_ADDR_VAR 0 2
10345: PUSH
10346: LD_VAR 0 5
10350: PUSH
10351: FOR_IN
10352: IFFALSE 10371
// ComMoveXY ( i , 150 , 136 ) ;
10354: LD_VAR 0 2
10358: PPUSH
10359: LD_INT 150
10361: PPUSH
10362: LD_INT 136
10364: PPUSH
10365: CALL_OW 111
10369: GO 10351
10371: POP
10372: POP
// mc_bases := Replace ( mc_bases , mc_leg , mc_bases [ mc_leg ] union tmp ) ;
10373: LD_ADDR_EXP 36
10377: PUSH
10378: LD_EXP 36
10382: PPUSH
10383: LD_EXP 6
10387: PPUSH
10388: LD_EXP 36
10392: PUSH
10393: LD_EXP 6
10397: ARRAY
10398: PUSH
10399: LD_VAR 0 5
10403: UNION
10404: PPUSH
10405: CALL_OW 1
10409: ST_TO_ADDR
// end ;
10410: LD_VAR 0 1
10414: RET
// every 0 0$10 trigger Difficulty > 1 and GetTech ( tech_lapser , 3 ) = state_researched do
10415: LD_OWVAR 67
10419: PUSH
10420: LD_INT 1
10422: GREATER
10423: PUSH
10424: LD_INT 31
10426: PPUSH
10427: LD_INT 3
10429: PPUSH
10430: CALL_OW 321
10434: PUSH
10435: LD_INT 2
10437: EQUAL
10438: AND
10439: IFFALSE 10656
10441: GO 10443
10443: DISABLE
// begin MC_InsertBuildingList ( mc_rus_1 , [ [ b_turret , 101 , 159 , 5 ] , [ b_turret , 105 , 158 , 5 ] , [ b_turret , 96 , 136 , 5 ] , [ b_turret , 94 , 133 , 4 ] , [ b_turret , 84 , 102 , 4 ] ] ) ;
10444: LD_EXP 7
10448: PPUSH
10449: LD_INT 33
10451: PUSH
10452: LD_INT 101
10454: PUSH
10455: LD_INT 159
10457: PUSH
10458: LD_INT 5
10460: PUSH
10461: EMPTY
10462: LIST
10463: LIST
10464: LIST
10465: LIST
10466: PUSH
10467: LD_INT 33
10469: PUSH
10470: LD_INT 105
10472: PUSH
10473: LD_INT 158
10475: PUSH
10476: LD_INT 5
10478: PUSH
10479: EMPTY
10480: LIST
10481: LIST
10482: LIST
10483: LIST
10484: PUSH
10485: LD_INT 33
10487: PUSH
10488: LD_INT 96
10490: PUSH
10491: LD_INT 136
10493: PUSH
10494: LD_INT 5
10496: PUSH
10497: EMPTY
10498: LIST
10499: LIST
10500: LIST
10501: LIST
10502: PUSH
10503: LD_INT 33
10505: PUSH
10506: LD_INT 94
10508: PUSH
10509: LD_INT 133
10511: PUSH
10512: LD_INT 4
10514: PUSH
10515: EMPTY
10516: LIST
10517: LIST
10518: LIST
10519: LIST
10520: PUSH
10521: LD_INT 33
10523: PUSH
10524: LD_INT 84
10526: PUSH
10527: LD_INT 102
10529: PUSH
10530: LD_INT 4
10532: PUSH
10533: EMPTY
10534: LIST
10535: LIST
10536: LIST
10537: LIST
10538: PUSH
10539: EMPTY
10540: LIST
10541: LIST
10542: LIST
10543: LIST
10544: LIST
10545: PPUSH
10546: CALL 85570 0 2
// MC_InsertBuildingList ( mc_rus_2 , [ [ b_turret , 50 , 17 , 4 ] , [ b_turret , 52 , 20 , 4 ] , [ b_turret , 53 , 23 , 4 ] , [ b_turret , 45 , 32 , 4 ] , [ b_turret , 45 , 39 , 4 ] ] ) ;
10550: LD_EXP 8
10554: PPUSH
10555: LD_INT 33
10557: PUSH
10558: LD_INT 50
10560: PUSH
10561: LD_INT 17
10563: PUSH
10564: LD_INT 4
10566: PUSH
10567: EMPTY
10568: LIST
10569: LIST
10570: LIST
10571: LIST
10572: PUSH
10573: LD_INT 33
10575: PUSH
10576: LD_INT 52
10578: PUSH
10579: LD_INT 20
10581: PUSH
10582: LD_INT 4
10584: PUSH
10585: EMPTY
10586: LIST
10587: LIST
10588: LIST
10589: LIST
10590: PUSH
10591: LD_INT 33
10593: PUSH
10594: LD_INT 53
10596: PUSH
10597: LD_INT 23
10599: PUSH
10600: LD_INT 4
10602: PUSH
10603: EMPTY
10604: LIST
10605: LIST
10606: LIST
10607: LIST
10608: PUSH
10609: LD_INT 33
10611: PUSH
10612: LD_INT 45
10614: PUSH
10615: LD_INT 32
10617: PUSH
10618: LD_INT 4
10620: PUSH
10621: EMPTY
10622: LIST
10623: LIST
10624: LIST
10625: LIST
10626: PUSH
10627: LD_INT 33
10629: PUSH
10630: LD_INT 45
10632: PUSH
10633: LD_INT 39
10635: PUSH
10636: LD_INT 4
10638: PUSH
10639: EMPTY
10640: LIST
10641: LIST
10642: LIST
10643: LIST
10644: PUSH
10645: EMPTY
10646: LIST
10647: LIST
10648: LIST
10649: LIST
10650: LIST
10651: PPUSH
10652: CALL 85570 0 2
// end ; end_of_file
10656: END
// export function Action ; var i , tmp ; begin
10657: LD_INT 0
10659: PPUSH
10660: PPUSH
10661: PPUSH
// InGameOn ;
10662: CALL_OW 8
// CenterNowOnXY ( 225 , 217 ) ;
10666: LD_INT 225
10668: PPUSH
10669: LD_INT 217
10671: PPUSH
10672: CALL_OW 86
// for i in playerForces [ 2 ] do
10676: LD_ADDR_VAR 0 2
10680: PUSH
10681: LD_EXP 10
10685: PUSH
10686: LD_INT 2
10688: ARRAY
10689: PUSH
10690: FOR_IN
10691: IFFALSE 10824
// begin if playerForces [ 1 ] and GetClass ( i ) in [ 3 , 4 ] then
10693: LD_EXP 10
10697: PUSH
10698: LD_INT 1
10700: ARRAY
10701: PUSH
10702: LD_VAR 0 2
10706: PPUSH
10707: CALL_OW 257
10711: PUSH
10712: LD_INT 3
10714: PUSH
10715: LD_INT 4
10717: PUSH
10718: EMPTY
10719: LIST
10720: LIST
10721: IN
10722: AND
10723: IFFALSE 10807
// begin PlaceUnitInArea ( playerForces [ 1 ] [ 1 ] , startArea , false ) ;
10725: LD_EXP 10
10729: PUSH
10730: LD_INT 1
10732: ARRAY
10733: PUSH
10734: LD_INT 1
10736: ARRAY
10737: PPUSH
10738: LD_INT 19
10740: PPUSH
10741: LD_INT 0
10743: PPUSH
10744: CALL 60748 0 3
// PlaceHumanInUnit ( i , playerForces [ 1 ] [ 1 ] ) ;
10748: LD_VAR 0 2
10752: PPUSH
10753: LD_EXP 10
10757: PUSH
10758: LD_INT 1
10760: ARRAY
10761: PUSH
10762: LD_INT 1
10764: ARRAY
10765: PPUSH
10766: CALL_OW 52
// playerForces := Replace ( playerForces , 1 , Delete ( playerForces [ 1 ] , 1 ) ) ;
10770: LD_ADDR_EXP 10
10774: PUSH
10775: LD_EXP 10
10779: PPUSH
10780: LD_INT 1
10782: PPUSH
10783: LD_EXP 10
10787: PUSH
10788: LD_INT 1
10790: ARRAY
10791: PPUSH
10792: LD_INT 1
10794: PPUSH
10795: CALL_OW 3
10799: PPUSH
10800: CALL_OW 1
10804: ST_TO_ADDR
// end else
10805: GO 10822
// PlaceUnitInArea ( i , startArea , false ) ;
10807: LD_VAR 0 2
10811: PPUSH
10812: LD_INT 19
10814: PPUSH
10815: LD_INT 0
10817: PPUSH
10818: CALL 60748 0 3
// end ;
10822: GO 10690
10824: POP
10825: POP
// wait ( 0 0$2 ) ;
10826: LD_INT 70
10828: PPUSH
10829: CALL_OW 67
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1 ) ;
10833: LD_EXP 9
10837: PPUSH
10838: LD_STRING D
10840: PUSH
10841: LD_STRING I
10843: PUSH
10844: LD_STRING J
10846: PUSH
10847: LD_STRING S
10849: PUSH
10850: EMPTY
10851: LIST
10852: LIST
10853: LIST
10854: PUSH
10855: LD_EXP 25
10859: ARRAY
10860: STR
10861: PUSH
10862: LD_STRING -1
10864: STR
10865: PPUSH
10866: CALL_OW 88
// SayRadio ( Powell , DP-1 ) ;
10870: LD_EXP 12
10874: PPUSH
10875: LD_STRING DP-1
10877: PPUSH
10878: CALL_OW 94
// SayRadio ( Powell , DP-2 ) ;
10882: LD_EXP 12
10886: PPUSH
10887: LD_STRING DP-2
10889: PPUSH
10890: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -2 ) ;
10894: LD_EXP 9
10898: PPUSH
10899: LD_STRING D
10901: PUSH
10902: LD_STRING I
10904: PUSH
10905: LD_STRING J
10907: PUSH
10908: LD_STRING S
10910: PUSH
10911: EMPTY
10912: LIST
10913: LIST
10914: LIST
10915: PUSH
10916: LD_EXP 25
10920: ARRAY
10921: STR
10922: PUSH
10923: LD_STRING -2
10925: STR
10926: PPUSH
10927: CALL_OW 88
// InGameOff ;
10931: CALL_OW 9
// ChangeMissionObjectives ( O1 ) ;
10935: LD_STRING O1
10937: PPUSH
10938: CALL_OW 337
// game := true ;
10942: LD_ADDR_EXP 3
10946: PUSH
10947: LD_INT 1
10949: ST_TO_ADDR
// SaveForQuickRestart ;
10950: CALL_OW 22
// wait ( 0 0$5 ) ;
10954: LD_INT 175
10956: PPUSH
10957: CALL_OW 67
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -3 ) ;
10961: LD_EXP 9
10965: PPUSH
10966: LD_STRING D
10968: PUSH
10969: LD_STRING I
10971: PUSH
10972: LD_STRING J
10974: PUSH
10975: LD_STRING S
10977: PUSH
10978: EMPTY
10979: LIST
10980: LIST
10981: LIST
10982: PUSH
10983: LD_EXP 25
10987: ARRAY
10988: STR
10989: PUSH
10990: LD_STRING -3
10992: STR
10993: PPUSH
10994: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
10998: LD_INT 35
11000: PPUSH
11001: CALL_OW 67
// until ruEscape [ 1 ] >= ruEscape [ 2 ] ;
11005: LD_EXP 15
11009: PUSH
11010: LD_INT 1
11012: ARRAY
11013: PUSH
11014: LD_EXP 15
11018: PUSH
11019: LD_INT 2
11021: ARRAY
11022: GREATEREQUAL
11023: IFFALSE 10998
// outpostEscape := true ;
11025: LD_ADDR_EXP 27
11029: PUSH
11030: LD_INT 1
11032: ST_TO_ADDR
// tmp := UnitFilter ( ruOutpost , [ f_sex , sex_male ] ) ;
11033: LD_ADDR_VAR 0 3
11037: PUSH
11038: LD_EXP 14
11042: PPUSH
11043: LD_INT 26
11045: PUSH
11046: LD_INT 1
11048: PUSH
11049: EMPTY
11050: LIST
11051: LIST
11052: PPUSH
11053: CALL_OW 72
11057: ST_TO_ADDR
// if tmp then
11058: LD_VAR 0 3
11062: IFFALSE 11080
// Say ( tmp [ 1 ] , DR-1-Escape ) ;
11064: LD_VAR 0 3
11068: PUSH
11069: LD_INT 1
11071: ARRAY
11072: PPUSH
11073: LD_STRING DR-1-Escape
11075: PPUSH
11076: CALL_OW 88
// wait ( 0 0$1 ) ;
11080: LD_INT 35
11082: PPUSH
11083: CALL_OW 67
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Escape ) ;
11087: LD_EXP 9
11091: PPUSH
11092: LD_STRING D
11094: PUSH
11095: LD_STRING I
11097: PUSH
11098: LD_STRING J
11100: PUSH
11101: LD_STRING S
11103: PUSH
11104: EMPTY
11105: LIST
11106: LIST
11107: LIST
11108: PUSH
11109: LD_EXP 25
11113: ARRAY
11114: STR
11115: PUSH
11116: LD_STRING -1-Escape
11118: STR
11119: PPUSH
11120: CALL_OW 88
// for i in ruOutpost do
11124: LD_ADDR_VAR 0 2
11128: PUSH
11129: LD_EXP 14
11133: PUSH
11134: FOR_IN
11135: IFFALSE 11189
// begin if IsInUnit ( i ) then
11137: LD_VAR 0 2
11141: PPUSH
11142: CALL_OW 310
11146: IFFALSE 11157
// ComExitBuilding ( i ) ;
11148: LD_VAR 0 2
11152: PPUSH
11153: CALL_OW 122
// AddComMoveXY ( i , 179 , 102 ) ;
11157: LD_VAR 0 2
11161: PPUSH
11162: LD_INT 179
11164: PPUSH
11165: LD_INT 102
11167: PPUSH
11168: CALL_OW 171
// AddComMoveXY ( i , 28 , 20 ) ;
11172: LD_VAR 0 2
11176: PPUSH
11177: LD_INT 28
11179: PPUSH
11180: LD_INT 20
11182: PPUSH
11183: CALL_OW 171
// end ;
11187: GO 11134
11189: POP
11190: POP
// tmp := [ ] ;
11191: LD_ADDR_VAR 0 3
11195: PUSH
11196: EMPTY
11197: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11198: LD_INT 35
11200: PPUSH
11201: CALL_OW 67
// tmp := UnitFilter ( ruOutpost , [ f_inarea , rus2Base ] ) ;
11205: LD_ADDR_VAR 0 3
11209: PUSH
11210: LD_EXP 14
11214: PPUSH
11215: LD_INT 95
11217: PUSH
11218: LD_INT 11
11220: PUSH
11221: EMPTY
11222: LIST
11223: LIST
11224: PPUSH
11225: CALL_OW 72
11229: ST_TO_ADDR
// if tmp then
11230: LD_VAR 0 3
11234: IFFALSE 11313
// for i in tmp do
11236: LD_ADDR_VAR 0 2
11240: PUSH
11241: LD_VAR 0 3
11245: PUSH
11246: FOR_IN
11247: IFFALSE 11311
// begin ruOutpost := ruOutpost diff i ;
11249: LD_ADDR_EXP 14
11253: PUSH
11254: LD_EXP 14
11258: PUSH
11259: LD_VAR 0 2
11263: DIFF
11264: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ mc_rus_2 , mc_bases [ mc_rus_2 ] + 1 ] , i ) ;
11265: LD_ADDR_EXP 36
11269: PUSH
11270: LD_EXP 36
11274: PPUSH
11275: LD_EXP 8
11279: PUSH
11280: LD_EXP 36
11284: PUSH
11285: LD_EXP 8
11289: ARRAY
11290: PUSH
11291: LD_INT 1
11293: PLUS
11294: PUSH
11295: EMPTY
11296: LIST
11297: LIST
11298: PPUSH
11299: LD_VAR 0 2
11303: PPUSH
11304: CALL 26211 0 3
11308: ST_TO_ADDR
// end ;
11309: GO 11246
11311: POP
11312: POP
// until not UnitFilter ( ruOutpost , [ f_type , unit_human ] ) ;
11313: LD_EXP 14
11317: PPUSH
11318: LD_INT 21
11320: PUSH
11321: LD_INT 1
11323: PUSH
11324: EMPTY
11325: LIST
11326: LIST
11327: PPUSH
11328: CALL_OW 72
11332: NOT
11333: IFFALSE 11198
// ruOutpost := [ ] ;
11335: LD_ADDR_EXP 14
11339: PUSH
11340: EMPTY
11341: ST_TO_ADDR
// end ;
11342: LD_VAR 0 1
11346: RET
// every 0 0$1 trigger outpostEscape do var i , tmp ;
11347: LD_EXP 27
11351: IFFALSE 11540
11353: GO 11355
11355: DISABLE
11356: LD_INT 0
11358: PPUSH
11359: PPUSH
// begin wait ( rand ( 0 0$25 , 0 0$35 ) ) ;
11360: LD_INT 875
11362: PPUSH
11363: LD_INT 1225
11365: PPUSH
11366: CALL_OW 12
11370: PPUSH
11371: CALL_OW 67
// tmp := [ [ 208 , 166 ] , [ 218 , 174 ] , [ 201 , 173 ] , [ 189 , 167 ] , [ 191 , 160 ] , [ 209 , 181 ] , [ 192 , 162 ] , [ 197 , 166 ] ] ;
11375: LD_ADDR_VAR 0 2
11379: PUSH
11380: LD_INT 208
11382: PUSH
11383: LD_INT 166
11385: PUSH
11386: EMPTY
11387: LIST
11388: LIST
11389: PUSH
11390: LD_INT 218
11392: PUSH
11393: LD_INT 174
11395: PUSH
11396: EMPTY
11397: LIST
11398: LIST
11399: PUSH
11400: LD_INT 201
11402: PUSH
11403: LD_INT 173
11405: PUSH
11406: EMPTY
11407: LIST
11408: LIST
11409: PUSH
11410: LD_INT 189
11412: PUSH
11413: LD_INT 167
11415: PUSH
11416: EMPTY
11417: LIST
11418: LIST
11419: PUSH
11420: LD_INT 191
11422: PUSH
11423: LD_INT 160
11425: PUSH
11426: EMPTY
11427: LIST
11428: LIST
11429: PUSH
11430: LD_INT 209
11432: PUSH
11433: LD_INT 181
11435: PUSH
11436: EMPTY
11437: LIST
11438: LIST
11439: PUSH
11440: LD_INT 192
11442: PUSH
11443: LD_INT 162
11445: PUSH
11446: EMPTY
11447: LIST
11448: LIST
11449: PUSH
11450: LD_INT 197
11452: PUSH
11453: LD_INT 166
11455: PUSH
11456: EMPTY
11457: LIST
11458: LIST
11459: PUSH
11460: EMPTY
11461: LIST
11462: LIST
11463: LIST
11464: LIST
11465: LIST
11466: LIST
11467: LIST
11468: LIST
11469: ST_TO_ADDR
// for i = 1 to 5 + Difficulty do
11470: LD_ADDR_VAR 0 1
11474: PUSH
11475: DOUBLE
11476: LD_INT 1
11478: DEC
11479: ST_TO_ADDR
11480: LD_INT 5
11482: PUSH
11483: LD_OWVAR 67
11487: PLUS
11488: PUSH
11489: FOR_TO
11490: IFFALSE 11538
// begin MineExplosion ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , 1 ) ;
11492: LD_VAR 0 2
11496: PUSH
11497: LD_VAR 0 1
11501: ARRAY
11502: PUSH
11503: LD_INT 1
11505: ARRAY
11506: PPUSH
11507: LD_VAR 0 2
11511: PUSH
11512: LD_VAR 0 1
11516: ARRAY
11517: PUSH
11518: LD_INT 2
11520: ARRAY
11521: PPUSH
11522: LD_INT 1
11524: PPUSH
11525: CALL_OW 453
// wait ( 0 0$0.8 ) ;
11529: LD_INT 28
11531: PPUSH
11532: CALL_OW 67
// end ;
11536: GO 11489
11538: POP
11539: POP
// end ;
11540: PPOPN 2
11542: END
// every 0 0$3 trigger not outpostEscape do var tmp , engs , buildings , empty , i , j , k ;
11543: LD_EXP 27
11547: NOT
11548: IFFALSE 12202
11550: GO 11552
11552: DISABLE
11553: LD_INT 0
11555: PPUSH
11556: PPUSH
11557: PPUSH
11558: PPUSH
11559: PPUSH
11560: PPUSH
11561: PPUSH
// begin enable ;
11562: ENABLE
// tmp := UnitFilter ( ruOutpost , [ [ f_side , 3 ] , [ f_class , 1 ] ] ) ;
11563: LD_ADDR_VAR 0 1
11567: PUSH
11568: LD_EXP 14
11572: PPUSH
11573: LD_INT 22
11575: PUSH
11576: LD_INT 3
11578: PUSH
11579: EMPTY
11580: LIST
11581: LIST
11582: PUSH
11583: LD_INT 25
11585: PUSH
11586: LD_INT 1
11588: PUSH
11589: EMPTY
11590: LIST
11591: LIST
11592: PUSH
11593: EMPTY
11594: LIST
11595: LIST
11596: PPUSH
11597: CALL_OW 72
11601: ST_TO_ADDR
// engs := UnitFilter ( ruOutpost , [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
11602: LD_ADDR_VAR 0 2
11606: PUSH
11607: LD_EXP 14
11611: PPUSH
11612: LD_INT 22
11614: PUSH
11615: LD_INT 3
11617: PUSH
11618: EMPTY
11619: LIST
11620: LIST
11621: PUSH
11622: LD_INT 25
11624: PUSH
11625: LD_INT 2
11627: PUSH
11628: EMPTY
11629: LIST
11630: LIST
11631: PUSH
11632: EMPTY
11633: LIST
11634: LIST
11635: PPUSH
11636: CALL_OW 72
11640: ST_TO_ADDR
// buildings := UnitFilter ( ruOutpost , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
11641: LD_ADDR_VAR 0 3
11645: PUSH
11646: LD_EXP 14
11650: PPUSH
11651: LD_INT 22
11653: PUSH
11654: LD_INT 3
11656: PUSH
11657: EMPTY
11658: LIST
11659: LIST
11660: PUSH
11661: LD_INT 21
11663: PUSH
11664: LD_INT 3
11666: PUSH
11667: EMPTY
11668: LIST
11669: LIST
11670: PUSH
11671: LD_INT 3
11673: PUSH
11674: LD_INT 24
11676: PUSH
11677: LD_INT 1000
11679: PUSH
11680: EMPTY
11681: LIST
11682: LIST
11683: PUSH
11684: EMPTY
11685: LIST
11686: LIST
11687: PUSH
11688: EMPTY
11689: LIST
11690: LIST
11691: LIST
11692: PPUSH
11693: CALL_OW 72
11697: ST_TO_ADDR
// if engs and buildings then
11698: LD_VAR 0 2
11702: PUSH
11703: LD_VAR 0 3
11707: AND
11708: IFFALSE 11781
// begin for i in engs do
11710: LD_ADDR_VAR 0 5
11714: PUSH
11715: LD_VAR 0 2
11719: PUSH
11720: FOR_IN
11721: IFFALSE 11777
// if IsInUnit ( i ) then
11723: LD_VAR 0 5
11727: PPUSH
11728: CALL_OW 310
11732: IFFALSE 11745
// ComExitBuilding ( i ) else
11734: LD_VAR 0 5
11738: PPUSH
11739: CALL_OW 122
11743: GO 11775
// if not HasTask ( i ) then
11745: LD_VAR 0 5
11749: PPUSH
11750: CALL_OW 314
11754: NOT
11755: IFFALSE 11775
// ComRepairBuilding ( i , buildings [ 1 ] ) ;
11757: LD_VAR 0 5
11761: PPUSH
11762: LD_VAR 0 3
11766: PUSH
11767: LD_INT 1
11769: ARRAY
11770: PPUSH
11771: CALL_OW 130
11775: GO 11720
11777: POP
11778: POP
// end else
11779: GO 11884
// if not buildings and UnitFilter ( ruOutpost , [ f_btype , b_depot ] ) and UnitFilter ( engs , [ f_not , [ f_inside ] ] ) then
11781: LD_VAR 0 3
11785: NOT
11786: PUSH
11787: LD_EXP 14
11791: PPUSH
11792: LD_INT 30
11794: PUSH
11795: LD_INT 0
11797: PUSH
11798: EMPTY
11799: LIST
11800: LIST
11801: PPUSH
11802: CALL_OW 72
11806: AND
11807: PUSH
11808: LD_VAR 0 2
11812: PPUSH
11813: LD_INT 3
11815: PUSH
11816: LD_INT 54
11818: PUSH
11819: EMPTY
11820: LIST
11821: PUSH
11822: EMPTY
11823: LIST
11824: LIST
11825: PPUSH
11826: CALL_OW 72
11830: AND
11831: IFFALSE 11884
// ComEnterUnit ( UnitFilter ( engs , [ f_not , [ f_inside ] ] ) , UnitFilter ( ruOutpost , [ f_btype , b_depot ] ) [ 1 ] ) ;
11833: LD_VAR 0 2
11837: PPUSH
11838: LD_INT 3
11840: PUSH
11841: LD_INT 54
11843: PUSH
11844: EMPTY
11845: LIST
11846: PUSH
11847: EMPTY
11848: LIST
11849: LIST
11850: PPUSH
11851: CALL_OW 72
11855: PPUSH
11856: LD_EXP 14
11860: PPUSH
11861: LD_INT 30
11863: PUSH
11864: LD_INT 0
11866: PUSH
11867: EMPTY
11868: LIST
11869: LIST
11870: PPUSH
11871: CALL_OW 72
11875: PUSH
11876: LD_INT 1
11878: ARRAY
11879: PPUSH
11880: CALL_OW 120
// if not tmp then
11884: LD_VAR 0 1
11888: NOT
11889: IFFALSE 11893
// exit ;
11891: GO 12202
// if FilterUnitsInArea ( ruOutpostCenterArea , [ f_enemy , 3 ] ) > 1 then
11893: LD_INT 26
11895: PPUSH
11896: LD_INT 81
11898: PUSH
11899: LD_INT 3
11901: PUSH
11902: EMPTY
11903: LIST
11904: LIST
11905: PPUSH
11906: CALL_OW 70
11910: PUSH
11911: LD_INT 1
11913: GREATER
11914: IFFALSE 11970
// begin for i in tmp do
11916: LD_ADDR_VAR 0 5
11920: PUSH
11921: LD_VAR 0 1
11925: PUSH
11926: FOR_IN
11927: IFFALSE 11966
// begin if IsInUnit ( i ) then
11929: LD_VAR 0 5
11933: PPUSH
11934: CALL_OW 310
11938: IFFALSE 11949
// ComExitBuilding ( i ) ;
11940: LD_VAR 0 5
11944: PPUSH
11945: CALL_OW 122
// AddComAgressiveMove ( i , 204 , 164 ) ;
11949: LD_VAR 0 5
11953: PPUSH
11954: LD_INT 204
11956: PPUSH
11957: LD_INT 164
11959: PPUSH
11960: CALL_OW 174
// end ;
11964: GO 11926
11966: POP
11967: POP
// end else
11968: GO 12202
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
11970: LD_VAR 0 1
11974: PPUSH
11975: LD_INT 3
11977: PUSH
11978: LD_INT 54
11980: PUSH
11981: EMPTY
11982: LIST
11983: PUSH
11984: EMPTY
11985: LIST
11986: LIST
11987: PPUSH
11988: CALL_OW 72
11992: IFFALSE 12202
// begin empty := UnitFilter ( ruOutpost , [ [ f_btype , b_bunker ] , [ f_empty ] ] ) ;
11994: LD_ADDR_VAR 0 4
11998: PUSH
11999: LD_EXP 14
12003: PPUSH
12004: LD_INT 30
12006: PUSH
12007: LD_INT 32
12009: PUSH
12010: EMPTY
12011: LIST
12012: LIST
12013: PUSH
12014: LD_INT 58
12016: PUSH
12017: EMPTY
12018: LIST
12019: PUSH
12020: EMPTY
12021: LIST
12022: LIST
12023: PPUSH
12024: CALL_OW 72
12028: ST_TO_ADDR
// if not empty and UnitFilter ( ruOutpost , [ f_btype , b_barracks ] ) then
12029: LD_VAR 0 4
12033: NOT
12034: PUSH
12035: LD_EXP 14
12039: PPUSH
12040: LD_INT 30
12042: PUSH
12043: LD_INT 5
12045: PUSH
12046: EMPTY
12047: LIST
12048: LIST
12049: PPUSH
12050: CALL_OW 72
12054: AND
12055: IFFALSE 12092
// begin ComEnterUnit ( tmp , UnitFilter ( ruOutpost , [ f_btype , b_barracks ] ) [ 1 ] ) ;
12057: LD_VAR 0 1
12061: PPUSH
12062: LD_EXP 14
12066: PPUSH
12067: LD_INT 30
12069: PUSH
12070: LD_INT 5
12072: PUSH
12073: EMPTY
12074: LIST
12075: LIST
12076: PPUSH
12077: CALL_OW 72
12081: PUSH
12082: LD_INT 1
12084: ARRAY
12085: PPUSH
12086: CALL_OW 120
// exit ;
12090: GO 12202
// end ; j := UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) ;
12092: LD_ADDR_VAR 0 6
12096: PUSH
12097: LD_VAR 0 1
12101: PPUSH
12102: LD_INT 3
12104: PUSH
12105: LD_INT 54
12107: PUSH
12108: EMPTY
12109: LIST
12110: PUSH
12111: EMPTY
12112: LIST
12113: LIST
12114: PPUSH
12115: CALL_OW 72
12119: ST_TO_ADDR
// if j < empty then
12120: LD_VAR 0 6
12124: PUSH
12125: LD_VAR 0 4
12129: LESS
12130: IFFALSE 12144
// k := j else
12132: LD_ADDR_VAR 0 7
12136: PUSH
12137: LD_VAR 0 6
12141: ST_TO_ADDR
12142: GO 12154
// k := empty ;
12144: LD_ADDR_VAR 0 7
12148: PUSH
12149: LD_VAR 0 4
12153: ST_TO_ADDR
// for i = 1 to k do
12154: LD_ADDR_VAR 0 5
12158: PUSH
12159: DOUBLE
12160: LD_INT 1
12162: DEC
12163: ST_TO_ADDR
12164: LD_VAR 0 7
12168: PUSH
12169: FOR_TO
12170: IFFALSE 12200
// ComEnterUnit ( j [ i ] , empty [ i ] ) ;
12172: LD_VAR 0 6
12176: PUSH
12177: LD_VAR 0 5
12181: ARRAY
12182: PPUSH
12183: LD_VAR 0 4
12187: PUSH
12188: LD_VAR 0 5
12192: ARRAY
12193: PPUSH
12194: CALL_OW 120
12198: GO 12169
12200: POP
12201: POP
// end ; end ;
12202: PPOPN 7
12204: END
// every 0 0$2 trigger GameType = 1 and outpostEscape and FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , 208 , 163 , 8 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_distxy , 208 , 163 , 14 ] ] ) do var i ;
12205: LD_EXP 2
12209: PUSH
12210: LD_INT 1
12212: EQUAL
12213: PUSH
12214: LD_EXP 27
12218: AND
12219: PUSH
12220: LD_INT 22
12222: PUSH
12223: LD_INT 1
12225: PUSH
12226: EMPTY
12227: LIST
12228: LIST
12229: PUSH
12230: LD_INT 92
12232: PUSH
12233: LD_INT 208
12235: PUSH
12236: LD_INT 163
12238: PUSH
12239: LD_INT 8
12241: PUSH
12242: EMPTY
12243: LIST
12244: LIST
12245: LIST
12246: LIST
12247: PUSH
12248: EMPTY
12249: LIST
12250: LIST
12251: PPUSH
12252: CALL_OW 69
12256: AND
12257: PUSH
12258: LD_INT 22
12260: PUSH
12261: LD_INT 3
12263: PUSH
12264: EMPTY
12265: LIST
12266: LIST
12267: PUSH
12268: LD_INT 21
12270: PUSH
12271: LD_INT 1
12273: PUSH
12274: EMPTY
12275: LIST
12276: LIST
12277: PUSH
12278: LD_INT 92
12280: PUSH
12281: LD_INT 208
12283: PUSH
12284: LD_INT 163
12286: PUSH
12287: LD_INT 14
12289: PUSH
12290: EMPTY
12291: LIST
12292: LIST
12293: LIST
12294: LIST
12295: PUSH
12296: EMPTY
12297: LIST
12298: LIST
12299: LIST
12300: PPUSH
12301: CALL_OW 69
12305: NOT
12306: AND
12307: IFFALSE 12612
12309: GO 12311
12311: DISABLE
12312: LD_INT 0
12314: PPUSH
// begin InGameOn ;
12315: CALL_OW 8
// CenterNowOnUnits ( playerCommander ) ;
12319: LD_EXP 9
12323: PPUSH
12324: CALL_OW 87
// wait ( 0 0$1 ) ;
12328: LD_INT 35
12330: PPUSH
12331: CALL_OW 67
// DialogueOn ;
12335: CALL_OW 6
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-BaseCaptured ) ;
12339: LD_EXP 9
12343: PPUSH
12344: LD_STRING D
12346: PUSH
12347: LD_STRING I
12349: PUSH
12350: LD_STRING J
12352: PUSH
12353: LD_STRING S
12355: PUSH
12356: EMPTY
12357: LIST
12358: LIST
12359: LIST
12360: PUSH
12361: LD_EXP 25
12365: ARRAY
12366: STR
12367: PUSH
12368: LD_STRING -1-BaseCaptured
12370: STR
12371: PPUSH
12372: CALL_OW 88
// SayRadio ( Powell , DP-1-BaseCaptured ) ;
12376: LD_EXP 12
12380: PPUSH
12381: LD_STRING DP-1-BaseCaptured
12383: PPUSH
12384: CALL_OW 94
// if sibBombAllowed then
12388: LD_EXP 23
12392: IFFALSE 12534
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -2-BaseCaptured ) ;
12394: LD_EXP 9
12398: PPUSH
12399: LD_STRING D
12401: PUSH
12402: LD_STRING I
12404: PUSH
12405: LD_STRING J
12407: PUSH
12408: LD_STRING S
12410: PUSH
12411: EMPTY
12412: LIST
12413: LIST
12414: LIST
12415: PUSH
12416: LD_EXP 25
12420: ARRAY
12421: STR
12422: PUSH
12423: LD_STRING -2-BaseCaptured
12425: STR
12426: PPUSH
12427: CALL_OW 88
// if commander = 1 then
12431: LD_EXP 25
12435: PUSH
12436: LD_INT 1
12438: EQUAL
12439: IFFALSE 12453
// SayRadio ( Powell , DP-2b-BaseCaptured ) ;
12441: LD_EXP 12
12445: PPUSH
12446: LD_STRING DP-2b-BaseCaptured
12448: PPUSH
12449: CALL_OW 94
// if commander = 2 then
12453: LD_EXP 25
12457: PUSH
12458: LD_INT 2
12460: EQUAL
12461: IFFALSE 12475
// SayRadio ( Powell , DP-2-BaseCaptured ) ;
12463: LD_EXP 12
12467: PPUSH
12468: LD_STRING DP-2-BaseCaptured
12470: PPUSH
12471: CALL_OW 94
// if commander = 3 then
12475: LD_EXP 25
12479: PUSH
12480: LD_INT 3
12482: EQUAL
12483: IFFALSE 12497
// SayRadio ( Powell , DP-2a-BaseCaptured ) ;
12485: LD_EXP 12
12489: PPUSH
12490: LD_STRING DP-2a-BaseCaptured
12492: PPUSH
12493: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -3-BaseCaptured ) ;
12497: LD_EXP 9
12501: PPUSH
12502: LD_STRING D
12504: PUSH
12505: LD_STRING I
12507: PUSH
12508: LD_STRING J
12510: PUSH
12511: LD_STRING S
12513: PUSH
12514: EMPTY
12515: LIST
12516: LIST
12517: LIST
12518: PUSH
12519: LD_EXP 25
12523: ARRAY
12524: STR
12525: PUSH
12526: LD_STRING -3-BaseCaptured
12528: STR
12529: PPUSH
12530: CALL_OW 88
// end ; DialogueOff ;
12534: CALL_OW 7
// InGameOff ;
12538: CALL_OW 9
// ChangeMissionObjectives ( O2 ) ;
12542: LD_STRING O2
12544: PPUSH
12545: CALL_OW 337
// for i in UnitFilter ( ruOutpost , [ f_type , unit_building ] ) do
12549: LD_ADDR_VAR 0 1
12553: PUSH
12554: LD_EXP 14
12558: PPUSH
12559: LD_INT 21
12561: PUSH
12562: LD_INT 3
12564: PUSH
12565: EMPTY
12566: LIST
12567: LIST
12568: PPUSH
12569: CALL_OW 72
12573: PUSH
12574: FOR_IN
12575: IFFALSE 12591
// SetSide ( i , 1 ) ;
12577: LD_VAR 0 1
12581: PPUSH
12582: LD_INT 1
12584: PPUSH
12585: CALL_OW 235
12589: GO 12574
12591: POP
12592: POP
// baseCaptured := true ;
12593: LD_ADDR_EXP 17
12597: PUSH
12598: LD_INT 1
12600: ST_TO_ADDR
// wait ( 0 0$35 ) ;
12601: LD_INT 1225
12603: PPUSH
12604: CALL_OW 67
// PrepareReinforcements ;
12608: CALL 9522 0 0
// end ;
12612: PPOPN 1
12614: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 167 , 197 , 20 ] ] ) > 3 do
12615: LD_INT 22
12617: PUSH
12618: LD_INT 3
12620: PUSH
12621: EMPTY
12622: LIST
12623: LIST
12624: PUSH
12625: LD_INT 92
12627: PUSH
12628: LD_INT 167
12630: PUSH
12631: LD_INT 197
12633: PUSH
12634: LD_INT 20
12636: PUSH
12637: EMPTY
12638: LIST
12639: LIST
12640: LIST
12641: LIST
12642: PUSH
12643: EMPTY
12644: LIST
12645: LIST
12646: PPUSH
12647: CALL_OW 69
12651: PUSH
12652: LD_INT 3
12654: GREATER
12655: IFFALSE 12672
12657: GO 12659
12659: DISABLE
// SayRadio ( Powell , DP-RuAttack ) ;
12660: LD_EXP 12
12664: PPUSH
12665: LD_STRING DP-RuAttack
12667: PPUSH
12668: CALL_OW 94
12672: END
// every 0 0$2 trigger not debug and SeeXY ( 1 , 168 , 74 ) and GetEnvironmentType ( 168 , 72 ) do
12673: LD_EXP 1
12677: NOT
12678: PUSH
12679: LD_INT 1
12681: PPUSH
12682: LD_INT 168
12684: PPUSH
12685: LD_INT 74
12687: PPUSH
12688: CALL_OW 293
12692: AND
12693: PUSH
12694: LD_INT 168
12696: PPUSH
12697: LD_INT 72
12699: PPUSH
12700: CALL_OW 553
12704: AND
12705: IFFALSE 12757
12707: GO 12709
12709: DISABLE
// begin CenterOnXY ( 168 , 72 ) ;
12710: LD_INT 168
12712: PPUSH
12713: LD_INT 72
12715: PPUSH
12716: CALL_OW 84
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Blockade ) ;
12720: LD_EXP 9
12724: PPUSH
12725: LD_STRING D
12727: PUSH
12728: LD_STRING I
12730: PUSH
12731: LD_STRING J
12733: PUSH
12734: LD_STRING S
12736: PUSH
12737: EMPTY
12738: LIST
12739: LIST
12740: LIST
12741: PUSH
12742: LD_EXP 25
12746: ARRAY
12747: STR
12748: PUSH
12749: LD_STRING -1-Blockade
12751: STR
12752: PPUSH
12753: CALL_OW 88
// end ;
12757: END
// every 0 0$2 trigger GameType = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_see , 4 ] ] ) do
12758: LD_EXP 2
12762: PUSH
12763: LD_INT 1
12765: EQUAL
12766: PUSH
12767: LD_INT 22
12769: PUSH
12770: LD_INT 1
12772: PUSH
12773: EMPTY
12774: LIST
12775: LIST
12776: PUSH
12777: LD_INT 101
12779: PUSH
12780: LD_INT 4
12782: PUSH
12783: EMPTY
12784: LIST
12785: LIST
12786: PUSH
12787: EMPTY
12788: LIST
12789: LIST
12790: PPUSH
12791: CALL_OW 69
12795: AND
12796: IFFALSE 13328
12798: GO 12800
12800: DISABLE
// begin ChangeSideFog ( 4 , 1 ) ;
12801: LD_INT 4
12803: PPUSH
12804: LD_INT 1
12806: PPUSH
12807: CALL_OW 343
// DialogueOn ;
12811: CALL_OW 6
// CenterNowOnUnits ( allyCommander ) ;
12815: LD_EXP 11
12819: PPUSH
12820: CALL_OW 87
// SayRadio ( allyCommander , DM-1-Contact ) ;
12824: LD_EXP 11
12828: PPUSH
12829: LD_STRING DM-1-Contact
12831: PPUSH
12832: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Contact ) ;
12836: LD_EXP 9
12840: PPUSH
12841: LD_STRING D
12843: PUSH
12844: LD_STRING I
12846: PUSH
12847: LD_STRING J
12849: PUSH
12850: LD_STRING S
12852: PUSH
12853: EMPTY
12854: LIST
12855: LIST
12856: LIST
12857: PUSH
12858: LD_EXP 25
12862: ARRAY
12863: STR
12864: PUSH
12865: LD_STRING -1-Contact
12867: STR
12868: PPUSH
12869: CALL_OW 88
// if commander = 1 then
12873: LD_EXP 25
12877: PUSH
12878: LD_INT 1
12880: EQUAL
12881: IFFALSE 13013
// begin SayRadio ( allyCommander , DM-2-Contact ) ;
12883: LD_EXP 11
12887: PPUSH
12888: LD_STRING DM-2-Contact
12890: PPUSH
12891: CALL_OW 94
// Say ( playerCommander , DI-2-Contact ) ;
12895: LD_EXP 9
12899: PPUSH
12900: LD_STRING DI-2-Contact
12902: PPUSH
12903: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) and GetAttitude ( 8 , 1 ) = att_enemy then
12907: LD_INT 22
12909: PUSH
12910: LD_INT 8
12912: PUSH
12913: EMPTY
12914: LIST
12915: LIST
12916: PUSH
12917: LD_INT 21
12919: PUSH
12920: LD_INT 1
12922: PUSH
12923: EMPTY
12924: LIST
12925: LIST
12926: PUSH
12927: EMPTY
12928: LIST
12929: LIST
12930: PPUSH
12931: CALL_OW 69
12935: PUSH
12936: LD_INT 8
12938: PPUSH
12939: LD_INT 1
12941: PPUSH
12942: CALL_OW 81
12946: PUSH
12947: LD_INT 2
12949: EQUAL
12950: AND
12951: IFFALSE 12977
// begin SayRadio ( allyCommander , DM-3-Contact ) ;
12953: LD_EXP 11
12957: PPUSH
12958: LD_STRING DM-3-Contact
12960: PPUSH
12961: CALL_OW 94
// Say ( playerCommander , DI-3-Contact ) ;
12965: LD_EXP 9
12969: PPUSH
12970: LD_STRING DI-3-Contact
12972: PPUSH
12973: CALL_OW 88
// end ; SayRadio ( allyCommander , DM-4-Contact ) ;
12977: LD_EXP 11
12981: PPUSH
12982: LD_STRING DM-4-Contact
12984: PPUSH
12985: CALL_OW 94
// Say ( playerCommander , DI-4-Contact ) ;
12989: LD_EXP 9
12993: PPUSH
12994: LD_STRING DI-4-Contact
12996: PPUSH
12997: CALL_OW 88
// SayRadio ( allyCommander , DM-5-Contact ) ;
13001: LD_EXP 11
13005: PPUSH
13006: LD_STRING DM-5-Contact
13008: PPUSH
13009: CALL_OW 94
// end ; if commander = 2 then
13013: LD_EXP 25
13017: PUSH
13018: LD_INT 2
13020: EQUAL
13021: IFFALSE 13153
// begin SayRadio ( allyCommander , DM-2c-Contact ) ;
13023: LD_EXP 11
13027: PPUSH
13028: LD_STRING DM-2c-Contact
13030: PPUSH
13031: CALL_OW 94
// Say ( playerCommander , DJ-2-Contact ) ;
13035: LD_EXP 9
13039: PPUSH
13040: LD_STRING DJ-2-Contact
13042: PPUSH
13043: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) and GetAttitude ( 8 , 1 ) = att_enemy then
13047: LD_INT 22
13049: PUSH
13050: LD_INT 8
13052: PUSH
13053: EMPTY
13054: LIST
13055: LIST
13056: PUSH
13057: LD_INT 21
13059: PUSH
13060: LD_INT 1
13062: PUSH
13063: EMPTY
13064: LIST
13065: LIST
13066: PUSH
13067: EMPTY
13068: LIST
13069: LIST
13070: PPUSH
13071: CALL_OW 69
13075: PUSH
13076: LD_INT 8
13078: PPUSH
13079: LD_INT 1
13081: PPUSH
13082: CALL_OW 81
13086: PUSH
13087: LD_INT 2
13089: EQUAL
13090: AND
13091: IFFALSE 13117
// begin SayRadio ( allyCommander , DM-3-Contact ) ;
13093: LD_EXP 11
13097: PPUSH
13098: LD_STRING DM-3-Contact
13100: PPUSH
13101: CALL_OW 94
// Say ( playerCommander , DJ-3-Contact ) ;
13105: LD_EXP 9
13109: PPUSH
13110: LD_STRING DJ-3-Contact
13112: PPUSH
13113: CALL_OW 88
// end ; SayRadio ( allyCommander , DM-4-Contact ) ;
13117: LD_EXP 11
13121: PPUSH
13122: LD_STRING DM-4-Contact
13124: PPUSH
13125: CALL_OW 94
// Say ( playerCommander , DJ-4-Contact ) ;
13129: LD_EXP 9
13133: PPUSH
13134: LD_STRING DJ-4-Contact
13136: PPUSH
13137: CALL_OW 88
// SayRadio ( allyCommander , DM-5a-Contact ) ;
13141: LD_EXP 11
13145: PPUSH
13146: LD_STRING DM-5a-Contact
13148: PPUSH
13149: CALL_OW 94
// end ; if commander = 3 then
13153: LD_EXP 25
13157: PUSH
13158: LD_INT 3
13160: EQUAL
13161: IFFALSE 13317
// begin SayRadio ( allyCommander , DM-2a-Contact ) ;
13163: LD_EXP 11
13167: PPUSH
13168: LD_STRING DM-2a-Contact
13170: PPUSH
13171: CALL_OW 94
// Say ( playerCommander , DS-2a-Contact ) ;
13175: LD_EXP 9
13179: PPUSH
13180: LD_STRING DS-2a-Contact
13182: PPUSH
13183: CALL_OW 88
// SayRadio ( allyCommander , DM-2b-Contact ) ;
13187: LD_EXP 11
13191: PPUSH
13192: LD_STRING DM-2b-Contact
13194: PPUSH
13195: CALL_OW 94
// Say ( playerCommander , DS-2b-Contact ) ;
13199: LD_EXP 9
13203: PPUSH
13204: LD_STRING DS-2b-Contact
13206: PPUSH
13207: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) and GetAttitude ( 8 , 1 ) = att_enemy then
13211: LD_INT 22
13213: PUSH
13214: LD_INT 8
13216: PUSH
13217: EMPTY
13218: LIST
13219: LIST
13220: PUSH
13221: LD_INT 21
13223: PUSH
13224: LD_INT 1
13226: PUSH
13227: EMPTY
13228: LIST
13229: LIST
13230: PUSH
13231: EMPTY
13232: LIST
13233: LIST
13234: PPUSH
13235: CALL_OW 69
13239: PUSH
13240: LD_INT 8
13242: PPUSH
13243: LD_INT 1
13245: PPUSH
13246: CALL_OW 81
13250: PUSH
13251: LD_INT 2
13253: EQUAL
13254: AND
13255: IFFALSE 13281
// begin SayRadio ( allyCommander , DM-3-Contact ) ;
13257: LD_EXP 11
13261: PPUSH
13262: LD_STRING DM-3-Contact
13264: PPUSH
13265: CALL_OW 94
// Say ( playerCommander , DS-3-Contact ) ;
13269: LD_EXP 9
13273: PPUSH
13274: LD_STRING DS-3-Contact
13276: PPUSH
13277: CALL_OW 88
// end ; SayRadio ( allyCommander , DM-4-Contact ) ;
13281: LD_EXP 11
13285: PPUSH
13286: LD_STRING DM-4-Contact
13288: PPUSH
13289: CALL_OW 94
// Say ( playerCommander , DS-4-Contact ) ;
13293: LD_EXP 9
13297: PPUSH
13298: LD_STRING DS-4-Contact
13300: PPUSH
13301: CALL_OW 88
// SayRadio ( allyCommander , DM-5-Contact ) ;
13305: LD_EXP 11
13309: PPUSH
13310: LD_STRING DM-5-Contact
13312: PPUSH
13313: CALL_OW 94
// end ; DialogueOff ;
13317: CALL_OW 7
// ChangeMissionObjectives ( O3 ) ;
13321: LD_STRING O3
13323: PPUSH
13324: CALL_OW 337
// end ;
13328: END
// every 0 0$10 trigger GameType = 1 and legDestCounter >= [ 15 , 20 , 25 ] [ Difficulty ] and FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_warehouse ] ] ) and FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] ] ) >= 5 do var time , sib , sources , i ;
13329: LD_EXP 2
13333: PUSH
13334: LD_INT 1
13336: EQUAL
13337: PUSH
13338: LD_EXP 18
13342: PUSH
13343: LD_INT 15
13345: PUSH
13346: LD_INT 20
13348: PUSH
13349: LD_INT 25
13351: PUSH
13352: EMPTY
13353: LIST
13354: LIST
13355: LIST
13356: PUSH
13357: LD_OWVAR 67
13361: ARRAY
13362: GREATEREQUAL
13363: AND
13364: PUSH
13365: LD_INT 22
13367: PUSH
13368: LD_INT 8
13370: PUSH
13371: EMPTY
13372: LIST
13373: LIST
13374: PUSH
13375: LD_INT 30
13377: PUSH
13378: LD_INT 1
13380: PUSH
13381: EMPTY
13382: LIST
13383: LIST
13384: PUSH
13385: EMPTY
13386: LIST
13387: LIST
13388: PPUSH
13389: CALL_OW 69
13393: AND
13394: PUSH
13395: LD_INT 22
13397: PUSH
13398: LD_INT 8
13400: PUSH
13401: EMPTY
13402: LIST
13403: LIST
13404: PUSH
13405: LD_INT 21
13407: PUSH
13408: LD_INT 3
13410: PUSH
13411: EMPTY
13412: LIST
13413: LIST
13414: PUSH
13415: EMPTY
13416: LIST
13417: LIST
13418: PPUSH
13419: CALL_OW 69
13423: PUSH
13424: LD_INT 5
13426: GREATEREQUAL
13427: AND
13428: IFFALSE 13951
13430: GO 13432
13432: DISABLE
13433: LD_INT 0
13435: PPUSH
13436: PPUSH
13437: PPUSH
13438: PPUSH
// begin DialogueOn ;
13439: CALL_OW 6
// SayRadio ( Farmer , DF-1-Leg ) ;
13443: LD_EXP 13
13447: PPUSH
13448: LD_STRING DF-1-Leg
13450: PPUSH
13451: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Leg ) ;
13455: LD_EXP 9
13459: PPUSH
13460: LD_STRING D
13462: PUSH
13463: LD_STRING I
13465: PUSH
13466: LD_STRING J
13468: PUSH
13469: LD_STRING S
13471: PUSH
13472: EMPTY
13473: LIST
13474: LIST
13475: LIST
13476: PUSH
13477: LD_EXP 25
13481: ARRAY
13482: STR
13483: PUSH
13484: LD_STRING -1-Leg
13486: STR
13487: PPUSH
13488: CALL_OW 88
// SayRadio ( Farmer , DF-2-Leg ) ;
13492: LD_EXP 13
13496: PPUSH
13497: LD_STRING DF-2-Leg
13499: PPUSH
13500: CALL_OW 94
// DialogueOff ;
13504: CALL_OW 7
// case Query ( QLegionOffer ) of 1 :
13508: LD_STRING QLegionOffer
13510: PPUSH
13511: CALL_OW 97
13515: PUSH
13516: LD_INT 1
13518: DOUBLE
13519: EQUAL
13520: IFTRUE 13524
13522: GO 13527
13524: POP
// ; 2 :
13525: GO 13541
13527: LD_INT 2
13529: DOUBLE
13530: EQUAL
13531: IFTRUE 13535
13533: GO 13540
13535: POP
// exit ; end ;
13536: GO 13951
13538: GO 13541
13540: POP
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -2-Leg ) ;
13541: LD_EXP 9
13545: PPUSH
13546: LD_STRING D
13548: PUSH
13549: LD_STRING I
13551: PUSH
13552: LD_STRING J
13554: PUSH
13555: LD_STRING S
13557: PUSH
13558: EMPTY
13559: LIST
13560: LIST
13561: LIST
13562: PUSH
13563: LD_EXP 25
13567: ARRAY
13568: STR
13569: PUSH
13570: LD_STRING -2-Leg
13572: STR
13573: PPUSH
13574: CALL_OW 88
// legOfferAccepted := true ;
13578: LD_ADDR_EXP 20
13582: PUSH
13583: LD_INT 1
13585: ST_TO_ADDR
// SetAreaMapShow ( legOfferArea , 1 ) ;
13586: LD_INT 21
13588: PPUSH
13589: LD_INT 1
13591: PPUSH
13592: CALL_OW 424
// CenterOnXY ( 190 , 227 ) ;
13596: LD_INT 190
13598: PPUSH
13599: LD_INT 227
13601: PPUSH
13602: CALL_OW 84
// time := [ 8 8$00 , 7 7$00 , 6 6$00 ] [ Difficulty ] ;
13606: LD_ADDR_VAR 0 1
13610: PUSH
13611: LD_INT 16800
13613: PUSH
13614: LD_INT 14700
13616: PUSH
13617: LD_INT 12600
13619: PUSH
13620: EMPTY
13621: LIST
13622: LIST
13623: LIST
13624: PUSH
13625: LD_OWVAR 67
13629: ARRAY
13630: ST_TO_ADDR
// sib := 100 ;
13631: LD_ADDR_VAR 0 2
13635: PUSH
13636: LD_INT 100
13638: ST_TO_ADDR
// disableGlobalTimer := true ;
13639: LD_ADDR_EXP 4
13643: PUSH
13644: LD_INT 1
13646: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13647: LD_INT 35
13649: PPUSH
13650: CALL_OW 67
// time := time - 0 0$1 ;
13654: LD_ADDR_VAR 0 1
13658: PUSH
13659: LD_VAR 0 1
13663: PUSH
13664: LD_INT 35
13666: MINUS
13667: ST_TO_ADDR
// sources := GetResourceArea ( legOfferArea , mat_siberit ) ;
13668: LD_ADDR_VAR 0 3
13672: PUSH
13673: LD_INT 21
13675: PPUSH
13676: LD_INT 3
13678: PPUSH
13679: CALL_OW 287
13683: ST_TO_ADDR
// display_strings := [ #SkrTime , tick , #Skr-LegOffer , sib , time ] ;
13684: LD_ADDR_OWVAR 47
13688: PUSH
13689: LD_STRING #SkrTime
13691: PUSH
13692: LD_OWVAR 1
13696: PUSH
13697: LD_STRING #Skr-LegOffer
13699: PUSH
13700: LD_VAR 0 2
13704: PUSH
13705: LD_VAR 0 1
13709: PUSH
13710: EMPTY
13711: LIST
13712: LIST
13713: LIST
13714: LIST
13715: LIST
13716: ST_TO_ADDR
// if sources then
13717: LD_VAR 0 3
13721: IFFALSE 13753
// begin sib := sib - sources * 10 ;
13723: LD_ADDR_VAR 0 2
13727: PUSH
13728: LD_VAR 0 2
13732: PUSH
13733: LD_VAR 0 3
13737: PUSH
13738: LD_INT 10
13740: MUL
13741: MINUS
13742: ST_TO_ADDR
// EraseResourceArea ( legOfferArea , mat_siberit ) ;
13743: LD_INT 21
13745: PPUSH
13746: LD_INT 3
13748: PPUSH
13749: CALL_OW 286
// end ; until time = 0 0$00 or sib <= 0 or not FilterAllUnits ( [ f_side , 8 ] ) ;
13753: LD_VAR 0 1
13757: PUSH
13758: LD_INT 0
13760: EQUAL
13761: PUSH
13762: LD_VAR 0 2
13766: PUSH
13767: LD_INT 0
13769: LESSEQUAL
13770: OR
13771: PUSH
13772: LD_INT 22
13774: PUSH
13775: LD_INT 8
13777: PUSH
13778: EMPTY
13779: LIST
13780: LIST
13781: PPUSH
13782: CALL_OW 69
13786: NOT
13787: OR
13788: IFFALSE 13647
// SetAreaMapShow ( legOfferArea , 0 ) ;
13790: LD_INT 21
13792: PPUSH
13793: LD_INT 0
13795: PPUSH
13796: CALL_OW 424
// disableGlobalTimer := false ;
13800: LD_ADDR_EXP 4
13804: PUSH
13805: LD_INT 0
13807: ST_TO_ADDR
// if sib <= 0 then
13808: LD_VAR 0 2
13812: PUSH
13813: LD_INT 0
13815: LESSEQUAL
13816: IFFALSE 13932
// begin legChangeSide := true ;
13818: LD_ADDR_EXP 21
13822: PUSH
13823: LD_INT 1
13825: ST_TO_ADDR
// SayRadio ( Farmer , DF-4y-Leg ) ;
13826: LD_EXP 13
13830: PPUSH
13831: LD_STRING DF-4y-Leg
13833: PPUSH
13834: CALL_OW 94
// ChangeMissionObjectives ( O3a ) ;
13838: LD_STRING O3a
13840: PPUSH
13841: CALL_OW 337
// ChangeSideFog ( 8 , 1 ) ;
13845: LD_INT 8
13847: PPUSH
13848: LD_INT 1
13850: PPUSH
13851: CALL_OW 343
// SetAttitude ( 8 , 1 , att_friend , true ) ;
13855: LD_INT 8
13857: PPUSH
13858: LD_INT 1
13860: PPUSH
13861: LD_INT 1
13863: PPUSH
13864: LD_INT 1
13866: PPUSH
13867: CALL_OW 80
// SetAttitude ( 8 , 4 , att_friend , true ) ;
13871: LD_INT 8
13873: PPUSH
13874: LD_INT 4
13876: PPUSH
13877: LD_INT 1
13879: PPUSH
13880: LD_INT 1
13882: PPUSH
13883: CALL_OW 80
// SetAttitude ( 8 , 6 , att_enemy , true ) ;
13887: LD_INT 8
13889: PPUSH
13890: LD_INT 6
13892: PPUSH
13893: LD_INT 2
13895: PPUSH
13896: LD_INT 1
13898: PPUSH
13899: CALL_OW 80
// SetAttitude ( 8 , 3 , att_enemy , true ) ;
13903: LD_INT 8
13905: PPUSH
13906: LD_INT 3
13908: PPUSH
13909: LD_INT 2
13911: PPUSH
13912: LD_INT 1
13914: PPUSH
13915: CALL_OW 80
// wait ( 0 0$30 ) ;
13919: LD_INT 1050
13921: PPUSH
13922: CALL_OW 67
// PrepareLegionReinforcements ;
13926: CALL 10222 0 0
// end else
13930: GO 13951
// begin ChangeMissionObjectives ( O3 ) ;
13932: LD_STRING O3
13934: PPUSH
13935: CALL_OW 337
// SayRadio ( Farmer , DF-4n-Leg ) ;
13939: LD_EXP 13
13943: PPUSH
13944: LD_STRING DF-4n-Leg
13946: PPUSH
13947: CALL_OW 94
// end ; end ;
13951: PPOPN 4
13953: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) = 0 and GetAttitude ( 8 , 1 ) = att_enemy do
13954: LD_INT 22
13956: PUSH
13957: LD_INT 8
13959: PUSH
13960: EMPTY
13961: LIST
13962: LIST
13963: PUSH
13964: LD_INT 21
13966: PUSH
13967: LD_INT 1
13969: PUSH
13970: EMPTY
13971: LIST
13972: LIST
13973: PUSH
13974: EMPTY
13975: LIST
13976: LIST
13977: PPUSH
13978: CALL_OW 69
13982: PUSH
13983: LD_INT 0
13985: EQUAL
13986: PUSH
13987: LD_INT 8
13989: PPUSH
13990: LD_INT 1
13992: PPUSH
13993: CALL_OW 81
13997: PUSH
13998: LD_INT 2
14000: EQUAL
14001: AND
14002: IFFALSE 14014
14004: GO 14006
14006: DISABLE
// ChangeMissionObjectives ( O3a ) ;
14007: LD_STRING O3a
14009: PPUSH
14010: CALL_OW 337
14014: END
// every 0 0$1 trigger GameType = 1 and game and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) = 0 do
14015: LD_EXP 2
14019: PUSH
14020: LD_INT 1
14022: EQUAL
14023: PUSH
14024: LD_EXP 3
14028: AND
14029: PUSH
14030: LD_INT 22
14032: PUSH
14033: LD_INT 3
14035: PUSH
14036: EMPTY
14037: LIST
14038: LIST
14039: PUSH
14040: LD_INT 21
14042: PUSH
14043: LD_INT 1
14045: PUSH
14046: EMPTY
14047: LIST
14048: LIST
14049: PUSH
14050: EMPTY
14051: LIST
14052: LIST
14053: PPUSH
14054: CALL_OW 69
14058: PUSH
14059: LD_INT 0
14061: EQUAL
14062: AND
14063: PUSH
14064: LD_INT 22
14066: PUSH
14067: LD_INT 3
14069: PUSH
14070: EMPTY
14071: LIST
14072: LIST
14073: PUSH
14074: LD_INT 30
14076: PUSH
14077: LD_INT 1
14079: PUSH
14080: EMPTY
14081: LIST
14082: LIST
14083: PUSH
14084: EMPTY
14085: LIST
14086: LIST
14087: PPUSH
14088: CALL_OW 69
14092: PUSH
14093: LD_INT 0
14095: EQUAL
14096: AND
14097: IFFALSE 14335
14099: GO 14101
14101: DISABLE
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Win ) ;
14102: LD_EXP 9
14106: PPUSH
14107: LD_STRING D
14109: PUSH
14110: LD_STRING I
14112: PUSH
14113: LD_STRING J
14115: PUSH
14116: LD_STRING S
14118: PUSH
14119: EMPTY
14120: LIST
14121: LIST
14122: LIST
14123: PUSH
14124: LD_EXP 25
14128: ARRAY
14129: STR
14130: PUSH
14131: LD_STRING -1-Win
14133: STR
14134: PPUSH
14135: CALL_OW 88
// if tick >= [ 150 150$0 , 130 130$0 , 110 110$0 ] [ Difficulty ] then
14139: LD_OWVAR 1
14143: PUSH
14144: LD_INT 315000
14146: PUSH
14147: LD_INT 273000
14149: PUSH
14150: LD_INT 231000
14152: PUSH
14153: EMPTY
14154: LIST
14155: LIST
14156: LIST
14157: PUSH
14158: LD_OWVAR 67
14162: ARRAY
14163: GREATEREQUAL
14164: IFFALSE 14179
// AddMedal ( med1 , - 1 ) else
14166: LD_STRING med1
14168: PPUSH
14169: LD_INT 1
14171: NEG
14172: PPUSH
14173: CALL_OW 101
14177: GO 14189
// AddMedal ( med1 , 1 ) ;
14179: LD_STRING med1
14181: PPUSH
14182: LD_INT 1
14184: PPUSH
14185: CALL_OW 101
// if allyDestCounter >= [ 20 , 15 , 10 ] [ Difficulty ] then
14189: LD_EXP 22
14193: PUSH
14194: LD_INT 20
14196: PUSH
14197: LD_INT 15
14199: PUSH
14200: LD_INT 10
14202: PUSH
14203: EMPTY
14204: LIST
14205: LIST
14206: LIST
14207: PUSH
14208: LD_OWVAR 67
14212: ARRAY
14213: GREATEREQUAL
14214: IFFALSE 14229
// AddMedal ( med2 , - 1 ) else
14216: LD_STRING med2
14218: PPUSH
14219: LD_INT 1
14221: NEG
14222: PPUSH
14223: CALL_OW 101
14227: GO 14239
// AddMedal ( med2 , 1 ) ;
14229: LD_STRING med2
14231: PPUSH
14232: LD_INT 1
14234: PPUSH
14235: CALL_OW 101
// if GetAttitude ( 8 , 1 ) = att_friend then
14239: LD_INT 8
14241: PPUSH
14242: LD_INT 1
14244: PPUSH
14245: CALL_OW 81
14249: PUSH
14250: LD_INT 1
14252: EQUAL
14253: IFFALSE 14267
// AddMedal ( med3 , 1 ) else
14255: LD_STRING med3
14257: PPUSH
14258: LD_INT 1
14260: PPUSH
14261: CALL_OW 101
14265: GO 14324
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) = 0 then
14267: LD_INT 22
14269: PUSH
14270: LD_INT 8
14272: PUSH
14273: EMPTY
14274: LIST
14275: LIST
14276: PUSH
14277: LD_INT 21
14279: PUSH
14280: LD_INT 1
14282: PUSH
14283: EMPTY
14284: LIST
14285: LIST
14286: PUSH
14287: EMPTY
14288: LIST
14289: LIST
14290: PPUSH
14291: CALL_OW 69
14295: PUSH
14296: LD_INT 0
14298: EQUAL
14299: IFFALSE 14313
// AddMedal ( med3 , 2 ) else
14301: LD_STRING med3
14303: PPUSH
14304: LD_INT 2
14306: PPUSH
14307: CALL_OW 101
14311: GO 14324
// AddMedal ( med3 , - 1 ) ;
14313: LD_STRING med3
14315: PPUSH
14316: LD_INT 1
14318: NEG
14319: PPUSH
14320: CALL_OW 101
// GiveMedals ( MAIN ) ;
14324: LD_STRING MAIN
14326: PPUSH
14327: CALL_OW 102
// YouWin ;
14331: CALL_OW 103
// end ;
14335: END
// every 10 trigger GameType = 1 and staticMines and FilterUnitsInArea ( minesArea , [ f_enemy , 8 ] ) do var i , j , tmp , x , y ;
14336: LD_EXP 2
14340: PUSH
14341: LD_INT 1
14343: EQUAL
14344: PUSH
14345: LD_EXP 16
14349: AND
14350: PUSH
14351: LD_INT 20
14353: PPUSH
14354: LD_INT 81
14356: PUSH
14357: LD_INT 8
14359: PUSH
14360: EMPTY
14361: LIST
14362: LIST
14363: PPUSH
14364: CALL_OW 70
14368: AND
14369: IFFALSE 14648
14371: GO 14373
14373: DISABLE
14374: LD_INT 0
14376: PPUSH
14377: PPUSH
14378: PPUSH
14379: PPUSH
14380: PPUSH
// begin enable ;
14381: ENABLE
// tmp := FilterUnitsInArea ( minesArea , [ f_enemy , 8 ] ) ;
14382: LD_ADDR_VAR 0 3
14386: PUSH
14387: LD_INT 20
14389: PPUSH
14390: LD_INT 81
14392: PUSH
14393: LD_INT 8
14395: PUSH
14396: EMPTY
14397: LIST
14398: LIST
14399: PPUSH
14400: CALL_OW 70
14404: ST_TO_ADDR
// if not tmp then
14405: LD_VAR 0 3
14409: NOT
14410: IFFALSE 14414
// exit ;
14412: GO 14648
// for i in tmp do
14414: LD_ADDR_VAR 0 1
14418: PUSH
14419: LD_VAR 0 3
14423: PUSH
14424: FOR_IN
14425: IFFALSE 14646
// begin x := GetX ( i ) ;
14427: LD_ADDR_VAR 0 4
14431: PUSH
14432: LD_VAR 0 1
14436: PPUSH
14437: CALL_OW 250
14441: ST_TO_ADDR
// y := GetY ( i ) ;
14442: LD_ADDR_VAR 0 5
14446: PUSH
14447: LD_VAR 0 1
14451: PPUSH
14452: CALL_OW 251
14456: ST_TO_ADDR
// if MineAtPos ( x , y ) then
14457: LD_VAR 0 4
14461: PPUSH
14462: LD_VAR 0 5
14466: PPUSH
14467: CALL_OW 458
14471: IFFALSE 14644
// begin LaunchMineAtPos ( x , y , 8 ) ;
14473: LD_VAR 0 4
14477: PPUSH
14478: LD_VAR 0 5
14482: PPUSH
14483: LD_INT 8
14485: PPUSH
14486: CALL_OW 456
// if not dialogueMineDetected then
14490: LD_EXP 28
14494: NOT
14495: IFFALSE 14556
// begin CenterNowOnXY ( x , y ) ;
14497: LD_VAR 0 4
14501: PPUSH
14502: LD_VAR 0 5
14506: PPUSH
14507: CALL_OW 86
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Mine ) ;
14511: LD_EXP 9
14515: PPUSH
14516: LD_STRING D
14518: PUSH
14519: LD_STRING I
14521: PUSH
14522: LD_STRING J
14524: PUSH
14525: LD_STRING S
14527: PUSH
14528: EMPTY
14529: LIST
14530: LIST
14531: LIST
14532: PUSH
14533: LD_EXP 25
14537: ARRAY
14538: STR
14539: PUSH
14540: LD_STRING -1-Mine
14542: STR
14543: PPUSH
14544: CALL_OW 88
// dialogueMineDetected := true ;
14548: LD_ADDR_EXP 28
14552: PUSH
14553: LD_INT 1
14555: ST_TO_ADDR
// end ; for j = 1 to staticMines do
14556: LD_ADDR_VAR 0 2
14560: PUSH
14561: DOUBLE
14562: LD_INT 1
14564: DEC
14565: ST_TO_ADDR
14566: LD_EXP 16
14570: PUSH
14571: FOR_TO
14572: IFFALSE 14642
// if staticMines [ j ] [ 1 ] = x and staticMines [ j ] [ 2 ] = y then
14574: LD_EXP 16
14578: PUSH
14579: LD_VAR 0 2
14583: ARRAY
14584: PUSH
14585: LD_INT 1
14587: ARRAY
14588: PUSH
14589: LD_VAR 0 4
14593: EQUAL
14594: PUSH
14595: LD_EXP 16
14599: PUSH
14600: LD_VAR 0 2
14604: ARRAY
14605: PUSH
14606: LD_INT 2
14608: ARRAY
14609: PUSH
14610: LD_VAR 0 5
14614: EQUAL
14615: AND
14616: IFFALSE 14640
// begin staticMines := Delete ( staticMines , j ) ;
14618: LD_ADDR_EXP 16
14622: PUSH
14623: LD_EXP 16
14627: PPUSH
14628: LD_VAR 0 2
14632: PPUSH
14633: CALL_OW 3
14637: ST_TO_ADDR
// break ;
14638: GO 14642
// end ;
14640: GO 14571
14642: POP
14643: POP
// end ; end ;
14644: GO 14424
14646: POP
14647: POP
// end ;
14648: PPOPN 5
14650: END
// every 30 30$00 + 50 50$00 trigger GameType = 1 and game and sibBombAllowed and UnitFilter ( mc_bases [ mc_rus_1 ] , [ f_btype , b_factory ] ) do var bomb , e ;
14651: LD_EXP 2
14655: PUSH
14656: LD_INT 1
14658: EQUAL
14659: PUSH
14660: LD_EXP 3
14664: AND
14665: PUSH
14666: LD_EXP 23
14670: AND
14671: PUSH
14672: LD_EXP 36
14676: PUSH
14677: LD_EXP 7
14681: ARRAY
14682: PPUSH
14683: LD_INT 30
14685: PUSH
14686: LD_INT 3
14688: PUSH
14689: EMPTY
14690: LIST
14691: LIST
14692: PPUSH
14693: CALL_OW 72
14697: AND
14698: IFFALSE 14902
14700: GO 14702
14702: DISABLE
14703: LD_INT 0
14705: PPUSH
14706: PPUSH
// begin enable ;
14707: ENABLE
// MC_InsertProduceList ( mc_rus_1 , [ [ ru_heavy_wheeled , engine_siberite , control_computer , ru_siberium_rocket ] ] ) ;
14708: LD_EXP 7
14712: PPUSH
14713: LD_INT 23
14715: PUSH
14716: LD_INT 3
14718: PUSH
14719: LD_INT 3
14721: PUSH
14722: LD_INT 48
14724: PUSH
14725: EMPTY
14726: LIST
14727: LIST
14728: LIST
14729: LIST
14730: PUSH
14731: EMPTY
14732: LIST
14733: PPUSH
14734: CALL 85678 0 2
// repeat wait ( 0 0$1 ) ;
14738: LD_INT 35
14740: PPUSH
14741: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) ;
14745: LD_INT 22
14747: PUSH
14748: LD_INT 3
14750: PUSH
14751: EMPTY
14752: LIST
14753: LIST
14754: PUSH
14755: LD_INT 34
14757: PUSH
14758: LD_INT 48
14760: PUSH
14761: EMPTY
14762: LIST
14763: LIST
14764: PUSH
14765: EMPTY
14766: LIST
14767: LIST
14768: PPUSH
14769: CALL_OW 69
14773: IFFALSE 14738
// bomb := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) ;
14775: LD_ADDR_VAR 0 1
14779: PUSH
14780: LD_INT 22
14782: PUSH
14783: LD_INT 3
14785: PUSH
14786: EMPTY
14787: LIST
14788: LIST
14789: PUSH
14790: LD_INT 34
14792: PUSH
14793: LD_INT 48
14795: PUSH
14796: EMPTY
14797: LIST
14798: LIST
14799: PUSH
14800: EMPTY
14801: LIST
14802: LIST
14803: PPUSH
14804: CALL_OW 69
14808: ST_TO_ADDR
// e := FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_type , unit_building ] ] ) ;
14809: LD_ADDR_VAR 0 2
14813: PUSH
14814: LD_INT 81
14816: PUSH
14817: LD_INT 3
14819: PUSH
14820: EMPTY
14821: LIST
14822: LIST
14823: PUSH
14824: LD_INT 21
14826: PUSH
14827: LD_INT 3
14829: PUSH
14830: EMPTY
14831: LIST
14832: LIST
14833: PUSH
14834: EMPTY
14835: LIST
14836: LIST
14837: PPUSH
14838: CALL_OW 69
14842: ST_TO_ADDR
// if e then
14843: LD_VAR 0 2
14847: IFFALSE 14873
// e := NearestUnitToUnit ( e , bomb [ 1 ] ) ;
14849: LD_ADDR_VAR 0 2
14853: PUSH
14854: LD_VAR 0 2
14858: PPUSH
14859: LD_VAR 0 1
14863: PUSH
14864: LD_INT 1
14866: ARRAY
14867: PPUSH
14868: CALL_OW 74
14872: ST_TO_ADDR
// ComAttackPlace ( bomb , GetX ( e ) , GetY ( e ) ) ;
14873: LD_VAR 0 1
14877: PPUSH
14878: LD_VAR 0 2
14882: PPUSH
14883: CALL_OW 250
14887: PPUSH
14888: LD_VAR 0 2
14892: PPUSH
14893: CALL_OW 251
14897: PPUSH
14898: CALL_OW 116
// end ;
14902: PPOPN 2
14904: END
// every 0 0$2 trigger Difficulty > 1 and UnitFilter ( mc_bases [ mc_rus_1 ] , [ f_class , 3 ] ) and GameType = 1 and game and GetTech ( tech_Behemoth , 3 ) = state_researched do var tmp , i ;
14905: LD_OWVAR 67
14909: PUSH
14910: LD_INT 1
14912: GREATER
14913: PUSH
14914: LD_EXP 36
14918: PUSH
14919: LD_EXP 7
14923: ARRAY
14924: PPUSH
14925: LD_INT 25
14927: PUSH
14928: LD_INT 3
14930: PUSH
14931: EMPTY
14932: LIST
14933: LIST
14934: PPUSH
14935: CALL_OW 72
14939: AND
14940: PUSH
14941: LD_EXP 2
14945: PUSH
14946: LD_INT 1
14948: EQUAL
14949: AND
14950: PUSH
14951: LD_EXP 3
14955: AND
14956: PUSH
14957: LD_INT 23
14959: PPUSH
14960: LD_INT 3
14962: PPUSH
14963: CALL_OW 321
14967: PUSH
14968: LD_INT 2
14970: EQUAL
14971: AND
14972: IFFALSE 15099
14974: GO 14976
14976: DISABLE
14977: LD_INT 0
14979: PPUSH
14980: PPUSH
// begin tmp := UnitFilter ( mc_bases [ mc_rus_1 ] , [ f_class , 3 ] ) ;
14981: LD_ADDR_VAR 0 1
14985: PUSH
14986: LD_EXP 36
14990: PUSH
14991: LD_EXP 7
14995: ARRAY
14996: PPUSH
14997: LD_INT 25
14999: PUSH
15000: LD_INT 3
15002: PUSH
15003: EMPTY
15004: LIST
15005: LIST
15006: PPUSH
15007: CALL_OW 72
15011: ST_TO_ADDR
// if not tmp then
15012: LD_VAR 0 1
15016: NOT
15017: IFFALSE 15021
// exit ;
15019: GO 15099
// for i in tmp do
15021: LD_ADDR_VAR 0 2
15025: PUSH
15026: LD_VAR 0 1
15030: PUSH
15031: FOR_IN
15032: IFFALSE 15078
// begin SetTag ( i , 29 ) ;
15034: LD_VAR 0 2
15038: PPUSH
15039: LD_INT 29
15041: PPUSH
15042: CALL_OW 109
// ComExitBuilding ( i ) ;
15046: LD_VAR 0 2
15050: PPUSH
15051: CALL_OW 122
// AddComBuildBehemoth ( i , b_behemoth , 97 , 133 , 0 ) ;
15055: LD_VAR 0 2
15059: PPUSH
15060: LD_INT 37
15062: PPUSH
15063: LD_INT 97
15065: PPUSH
15066: LD_INT 133
15068: PPUSH
15069: LD_INT 0
15071: PPUSH
15072: CALL_OW 230
// end ;
15076: GO 15031
15078: POP
15079: POP
// wait ( 1 1$00 ) ;
15080: LD_INT 2100
15082: PPUSH
15083: CALL_OW 67
// MC_Reset ( mc_rus_1 , 29 ) ;
15087: LD_EXP 7
15091: PPUSH
15092: LD_INT 29
15094: PPUSH
15095: CALL 66173 0 2
// end ;
15099: PPOPN 2
15101: END
// every 7 7$00 trigger GameType = 1 and GetBType ( HexInfo ( 84 , 128 ) ) = b_warehouse do var veh , depot ;
15102: LD_EXP 2
15106: PUSH
15107: LD_INT 1
15109: EQUAL
15110: PUSH
15111: LD_INT 84
15113: PPUSH
15114: LD_INT 128
15116: PPUSH
15117: CALL_OW 428
15121: PPUSH
15122: CALL_OW 266
15126: PUSH
15127: LD_INT 1
15129: EQUAL
15130: AND
15131: IFFALSE 15304
15133: GO 15135
15135: DISABLE
15136: LD_INT 0
15138: PPUSH
15139: PPUSH
// begin enable ;
15140: ENABLE
// depot := HexInfo ( 84 , 128 ) ;
15141: LD_ADDR_VAR 0 2
15145: PUSH
15146: LD_INT 84
15148: PPUSH
15149: LD_INT 128
15151: PPUSH
15152: CALL_OW 428
15156: ST_TO_ADDR
// uc_side := 3 ;
15157: LD_ADDR_OWVAR 20
15161: PUSH
15162: LD_INT 3
15164: ST_TO_ADDR
// uc_nation := 3 ;
15165: LD_ADDR_OWVAR 21
15169: PUSH
15170: LD_INT 3
15172: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_siberite , control_computer , ru_cargo_bay , 0 ) ;
15173: LD_INT 21
15175: PPUSH
15176: LD_INT 3
15178: PPUSH
15179: LD_INT 3
15181: PPUSH
15182: LD_INT 51
15184: PPUSH
15185: LD_INT 0
15187: PPUSH
15188: CALL 26089 0 5
// veh := CreateVehicle ;
15192: LD_ADDR_VAR 0 1
15196: PUSH
15197: CALL_OW 45
15201: ST_TO_ADDR
// PlaceUnitXY ( veh , 126 , 227 , false ) ;
15202: LD_VAR 0 1
15206: PPUSH
15207: LD_INT 126
15209: PPUSH
15210: LD_INT 227
15212: PPUSH
15213: LD_INT 0
15215: PPUSH
15216: CALL_OW 48
// SetCargo ( veh , mat_oil , 100 ) ;
15220: LD_VAR 0 1
15224: PPUSH
15225: LD_INT 2
15227: PPUSH
15228: LD_INT 100
15230: PPUSH
15231: CALL_OW 290
// ComGive ( veh , depot ) ;
15235: LD_VAR 0 1
15239: PPUSH
15240: LD_VAR 0 2
15244: PPUSH
15245: CALL_OW 161
// AddComMoveXY ( veh , 126 , 227 ) ;
15249: LD_VAR 0 1
15253: PPUSH
15254: LD_INT 126
15256: PPUSH
15257: LD_INT 227
15259: PPUSH
15260: CALL_OW 171
// wait ( 0 0$10 ) ;
15264: LD_INT 350
15266: PPUSH
15267: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
15271: LD_INT 35
15273: PPUSH
15274: CALL_OW 67
// until IsAt ( veh , 126 , 227 ) ;
15278: LD_VAR 0 1
15282: PPUSH
15283: LD_INT 126
15285: PPUSH
15286: LD_INT 227
15288: PPUSH
15289: CALL_OW 307
15293: IFFALSE 15271
// RemoveUnit ( veh ) ;
15295: LD_VAR 0 1
15299: PPUSH
15300: CALL_OW 64
// end ;
15304: PPOPN 2
15306: END
// every 9 9$00 trigger GameType = 1 and outpostEscape and commander = 2 do var veh , depot ;
15307: LD_EXP 2
15311: PUSH
15312: LD_INT 1
15314: EQUAL
15315: PUSH
15316: LD_EXP 27
15320: AND
15321: PUSH
15322: LD_EXP 25
15326: PUSH
15327: LD_INT 2
15329: EQUAL
15330: AND
15331: IFFALSE 15523
15333: GO 15335
15335: DISABLE
15336: LD_INT 0
15338: PPUSH
15339: PPUSH
// begin enable ;
15340: ENABLE
// if tick >= [ 50 50$00 , 40 40$00 , 30 30$00 ] [ Difficulty ] then
15341: LD_OWVAR 1
15345: PUSH
15346: LD_INT 105000
15348: PUSH
15349: LD_INT 84000
15351: PUSH
15352: LD_INT 63000
15354: PUSH
15355: EMPTY
15356: LIST
15357: LIST
15358: LIST
15359: PUSH
15360: LD_OWVAR 67
15364: ARRAY
15365: GREATEREQUAL
15366: IFFALSE 15369
// disable ;
15368: DISABLE
// uc_side := 4 ;
15369: LD_ADDR_OWVAR 20
15373: PUSH
15374: LD_INT 4
15376: ST_TO_ADDR
// uc_nation := 1 ;
15377: LD_ADDR_OWVAR 21
15381: PUSH
15382: LD_INT 1
15384: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_cargo_bay , 0 ) ;
15385: LD_INT 2
15387: PPUSH
15388: LD_INT 3
15390: PPUSH
15391: LD_INT 3
15393: PPUSH
15394: LD_INT 12
15396: PPUSH
15397: LD_INT 0
15399: PPUSH
15400: CALL 26089 0 5
// veh := CreateVehicle ;
15404: LD_ADDR_VAR 0 1
15408: PUSH
15409: CALL_OW 45
15413: ST_TO_ADDR
// PlaceUnitXY ( veh , 229 , 226 , false ) ;
15414: LD_VAR 0 1
15418: PPUSH
15419: LD_INT 229
15421: PPUSH
15422: LD_INT 226
15424: PPUSH
15425: LD_INT 0
15427: PPUSH
15428: CALL_OW 48
// SetCargo ( veh , mat_cans , 100 ) ;
15432: LD_VAR 0 1
15436: PPUSH
15437: LD_INT 1
15439: PPUSH
15440: LD_INT 100
15442: PPUSH
15443: CALL_OW 290
// AddComMoveToArea ( veh , ruOutpostArea ) ;
15447: LD_VAR 0 1
15451: PPUSH
15452: LD_INT 25
15454: PPUSH
15455: CALL_OW 173
// AddComUnload ( veh ) ;
15459: LD_VAR 0 1
15463: PPUSH
15464: CALL_OW 219
// AddComMoveXY ( veh , 229 , 226 ) ;
15468: LD_VAR 0 1
15472: PPUSH
15473: LD_INT 229
15475: PPUSH
15476: LD_INT 226
15478: PPUSH
15479: CALL_OW 171
// wait ( 0 0$10 ) ;
15483: LD_INT 350
15485: PPUSH
15486: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
15490: LD_INT 35
15492: PPUSH
15493: CALL_OW 67
// until IsAt ( veh , 229 , 226 ) ;
15497: LD_VAR 0 1
15501: PPUSH
15502: LD_INT 229
15504: PPUSH
15505: LD_INT 226
15507: PPUSH
15508: CALL_OW 307
15512: IFFALSE 15490
// RemoveUnit ( veh ) ;
15514: LD_VAR 0 1
15518: PPUSH
15519: CALL_OW 64
// end ;
15523: PPOPN 2
15525: END
// every 15 15$00 trigger GameType = 1 and game and reinforceAllowed do var i , j , veh , tmp , amount ;
15526: LD_EXP 2
15530: PUSH
15531: LD_INT 1
15533: EQUAL
15534: PUSH
15535: LD_EXP 3
15539: AND
15540: PUSH
15541: LD_EXP 24
15545: AND
15546: IFFALSE 15879
15548: GO 15550
15550: DISABLE
15551: LD_INT 0
15553: PPUSH
15554: PPUSH
15555: PPUSH
15556: PPUSH
15557: PPUSH
// begin enable ;
15558: ENABLE
// tmp := [ ] ;
15559: LD_ADDR_VAR 0 4
15563: PUSH
15564: EMPTY
15565: ST_TO_ADDR
// if commander = 1 then
15566: LD_EXP 25
15570: PUSH
15571: LD_INT 1
15573: EQUAL
15574: IFFALSE 15586
// amount := 3 else
15576: LD_ADDR_VAR 0 5
15580: PUSH
15581: LD_INT 3
15583: ST_TO_ADDR
15584: GO 15594
// amount := 2 ;
15586: LD_ADDR_VAR 0 5
15590: PUSH
15591: LD_INT 2
15593: ST_TO_ADDR
// for i = 1 to amount do
15594: LD_ADDR_VAR 0 1
15598: PUSH
15599: DOUBLE
15600: LD_INT 1
15602: DEC
15603: ST_TO_ADDR
15604: LD_VAR 0 5
15608: PUSH
15609: FOR_TO
15610: IFFALSE 15774
// begin wait ( 0 0$5 ) ;
15612: LD_INT 175
15614: PPUSH
15615: CALL_OW 67
// for j = 1 to 3 do
15619: LD_ADDR_VAR 0 2
15623: PUSH
15624: DOUBLE
15625: LD_INT 1
15627: DEC
15628: ST_TO_ADDR
15629: LD_INT 3
15631: PUSH
15632: FOR_TO
15633: IFFALSE 15770
// begin uc_side := 4 ;
15635: LD_ADDR_OWVAR 20
15639: PUSH
15640: LD_INT 4
15642: ST_TO_ADDR
// uc_nation := 1 ;
15643: LD_ADDR_OWVAR 21
15647: PUSH
15648: LD_INT 1
15650: ST_TO_ADDR
// PrepareVehicle ( [ us_medium_tracked , us_morphling ] [ rand ( 1 , 2 ) ] , engine_siberite , control_computer , [ us_laser , us_double_gun , us_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
15651: LD_INT 3
15653: PUSH
15654: LD_INT 5
15656: PUSH
15657: EMPTY
15658: LIST
15659: LIST
15660: PUSH
15661: LD_INT 1
15663: PPUSH
15664: LD_INT 2
15666: PPUSH
15667: CALL_OW 12
15671: ARRAY
15672: PPUSH
15673: LD_INT 3
15675: PPUSH
15676: LD_INT 3
15678: PPUSH
15679: LD_INT 9
15681: PUSH
15682: LD_INT 5
15684: PUSH
15685: LD_INT 7
15687: PUSH
15688: EMPTY
15689: LIST
15690: LIST
15691: LIST
15692: PUSH
15693: LD_INT 1
15695: PPUSH
15696: LD_INT 3
15698: PPUSH
15699: CALL_OW 12
15703: ARRAY
15704: PPUSH
15705: LD_INT 100
15707: PPUSH
15708: CALL 26089 0 5
// veh := CreateVehicle ;
15712: LD_ADDR_VAR 0 3
15716: PUSH
15717: CALL_OW 45
15721: ST_TO_ADDR
// tmp := tmp ^ veh ;
15722: LD_ADDR_VAR 0 4
15726: PUSH
15727: LD_VAR 0 4
15731: PUSH
15732: LD_VAR 0 3
15736: ADD
15737: ST_TO_ADDR
// PlaceUnitArea ( veh , westSpawn , false ) ;
15738: LD_VAR 0 3
15742: PPUSH
15743: LD_INT 22
15745: PPUSH
15746: LD_INT 0
15748: PPUSH
15749: CALL_OW 49
// ComMoveXY ( veh , 119 , 215 ) ;
15753: LD_VAR 0 3
15757: PPUSH
15758: LD_INT 119
15760: PPUSH
15761: LD_INT 215
15763: PPUSH
15764: CALL_OW 111
// end ;
15768: GO 15632
15770: POP
15771: POP
// end ;
15772: GO 15609
15774: POP
15775: POP
// wait ( 0 0$3 ) ;
15776: LD_INT 105
15778: PPUSH
15779: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
15783: LD_INT 35
15785: PPUSH
15786: CALL_OW 67
// for i in tmp do
15790: LD_ADDR_VAR 0 1
15794: PUSH
15795: LD_VAR 0 4
15799: PUSH
15800: FOR_IN
15801: IFFALSE 15868
// if IsDead ( i ) then
15803: LD_VAR 0 1
15807: PPUSH
15808: CALL_OW 301
15812: IFFALSE 15832
// tmp := tmp diff i else
15814: LD_ADDR_VAR 0 4
15818: PUSH
15819: LD_VAR 0 4
15823: PUSH
15824: LD_VAR 0 1
15828: DIFF
15829: ST_TO_ADDR
15830: GO 15866
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 4 ] ) , i ) ) ;
15832: LD_VAR 0 1
15836: PPUSH
15837: LD_INT 81
15839: PUSH
15840: LD_INT 4
15842: PUSH
15843: EMPTY
15844: LIST
15845: LIST
15846: PPUSH
15847: CALL_OW 69
15851: PPUSH
15852: LD_VAR 0 1
15856: PPUSH
15857: CALL_OW 74
15861: PPUSH
15862: CALL_OW 115
15866: GO 15800
15868: POP
15869: POP
// until tmp = [ ] ;
15870: LD_VAR 0 4
15874: PUSH
15875: EMPTY
15876: EQUAL
15877: IFFALSE 15783
// end ;
15879: PPOPN 5
15881: END
// every 0 0$1 trigger GameType = 1 and game do var i , tmp ;
15882: LD_EXP 2
15886: PUSH
15887: LD_INT 1
15889: EQUAL
15890: PUSH
15891: LD_EXP 3
15895: AND
15896: IFFALSE 15997
15898: GO 15900
15900: DISABLE
15901: LD_INT 0
15903: PPUSH
15904: PPUSH
// begin enable ;
15905: ENABLE
// tmp := FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) ;
15906: LD_ADDR_VAR 0 2
15910: PUSH
15911: LD_INT 3
15913: PUSH
15914: LD_INT 22
15916: PUSH
15917: LD_INT 1
15919: PUSH
15920: EMPTY
15921: LIST
15922: LIST
15923: PUSH
15924: EMPTY
15925: LIST
15926: LIST
15927: PUSH
15928: LD_INT 32
15930: PUSH
15931: LD_INT 1
15933: PUSH
15934: EMPTY
15935: LIST
15936: LIST
15937: PUSH
15938: EMPTY
15939: LIST
15940: LIST
15941: PPUSH
15942: CALL_OW 69
15946: ST_TO_ADDR
// if tmp then
15947: LD_VAR 0 2
15951: IFFALSE 15997
// for i in tmp do
15953: LD_ADDR_VAR 0 1
15957: PUSH
15958: LD_VAR 0 2
15962: PUSH
15963: FOR_IN
15964: IFFALSE 15995
// if GetFuel ( i ) < 3 then
15966: LD_VAR 0 1
15970: PPUSH
15971: CALL_OW 261
15975: PUSH
15976: LD_INT 3
15978: LESS
15979: IFFALSE 15993
// SetFuel ( i , 3 ) ;
15981: LD_VAR 0 1
15985: PPUSH
15986: LD_INT 3
15988: PPUSH
15989: CALL_OW 240
15993: GO 15963
15995: POP
15996: POP
// end ;
15997: PPOPN 2
15999: END
// every 15 15$00 trigger game and GetAttitude ( 8 , 4 ) = att_enemy do var i , un , tmp ;
16000: LD_EXP 3
16004: PUSH
16005: LD_INT 8
16007: PPUSH
16008: LD_INT 4
16010: PPUSH
16011: CALL_OW 81
16015: PUSH
16016: LD_INT 2
16018: EQUAL
16019: AND
16020: IFFALSE 16230
16022: GO 16024
16024: DISABLE
16025: LD_INT 0
16027: PPUSH
16028: PPUSH
16029: PPUSH
// begin enable ;
16030: ENABLE
// tmp := [ ] ;
16031: LD_ADDR_VAR 0 3
16035: PUSH
16036: EMPTY
16037: ST_TO_ADDR
// for i = 1 to 4 do
16038: LD_ADDR_VAR 0 1
16042: PUSH
16043: DOUBLE
16044: LD_INT 1
16046: DEC
16047: ST_TO_ADDR
16048: LD_INT 4
16050: PUSH
16051: FOR_TO
16052: IFFALSE 16196
// begin uc_side := 8 ;
16054: LD_ADDR_OWVAR 20
16058: PUSH
16059: LD_INT 8
16061: ST_TO_ADDR
// uc_nation := nation_arabian ;
16062: LD_ADDR_OWVAR 21
16066: PUSH
16067: LD_INT 2
16069: ST_TO_ADDR
// PrepareVehicle ( ar_hovercraft , engine_combustion , control_apeman , [ ar_double_machine_gun , ar_light_gun ] [ rand ( 1 , 2 ) ] , rand ( 60 , 80 ) ) ;
16070: LD_INT 11
16072: PPUSH
16073: LD_INT 1
16075: PPUSH
16076: LD_INT 5
16078: PPUSH
16079: LD_INT 24
16081: PUSH
16082: LD_INT 23
16084: PUSH
16085: EMPTY
16086: LIST
16087: LIST
16088: PUSH
16089: LD_INT 1
16091: PPUSH
16092: LD_INT 2
16094: PPUSH
16095: CALL_OW 12
16099: ARRAY
16100: PPUSH
16101: LD_INT 60
16103: PPUSH
16104: LD_INT 80
16106: PPUSH
16107: CALL_OW 12
16111: PPUSH
16112: CALL 26089 0 5
// un := CreateVehicle ;
16116: LD_ADDR_VAR 0 2
16120: PUSH
16121: CALL_OW 45
16125: ST_TO_ADDR
// SetDir ( un , 2 ) ;
16126: LD_VAR 0 2
16130: PPUSH
16131: LD_INT 2
16133: PPUSH
16134: CALL_OW 233
// tmp := tmp ^ un ;
16138: LD_ADDR_VAR 0 3
16142: PUSH
16143: LD_VAR 0 3
16147: PUSH
16148: LD_VAR 0 2
16152: ADD
16153: ST_TO_ADDR
// PlaceUnitXY ( un , 88 , 2 , false ) ;
16154: LD_VAR 0 2
16158: PPUSH
16159: LD_INT 88
16161: PPUSH
16162: LD_INT 2
16164: PPUSH
16165: LD_INT 0
16167: PPUSH
16168: CALL_OW 48
// ComMoveXY ( un , 93 , 13 ) ;
16172: LD_VAR 0 2
16176: PPUSH
16177: LD_INT 93
16179: PPUSH
16180: LD_INT 13
16182: PPUSH
16183: CALL_OW 111
// wait ( 0 0$2 ) ;
16187: LD_INT 70
16189: PPUSH
16190: CALL_OW 67
// end ;
16194: GO 16051
16196: POP
16197: POP
// for i in tmp do
16198: LD_ADDR_VAR 0 1
16202: PUSH
16203: LD_VAR 0 3
16207: PUSH
16208: FOR_IN
16209: IFFALSE 16228
// AddComMoveXY ( i , 136 , 19 ) ;
16211: LD_VAR 0 1
16215: PPUSH
16216: LD_INT 136
16218: PPUSH
16219: LD_INT 19
16221: PPUSH
16222: CALL_OW 171
16226: GO 16208
16228: POP
16229: POP
// end ;
16230: PPOPN 3
16232: END
// every 7 7$30 + 7 7$30 trigger game and not MC_GetVehicles ( mc_leg , true ) do var i , base , tmp , target ;
16233: LD_EXP 3
16237: PUSH
16238: LD_EXP 6
16242: PPUSH
16243: LD_INT 1
16245: PPUSH
16246: CALL 87096 0 2
16250: NOT
16251: AND
16252: IFFALSE 17171
16254: GO 16256
16256: DISABLE
16257: LD_INT 0
16259: PPUSH
16260: PPUSH
16261: PPUSH
16262: PPUSH
// begin enable ;
16263: ENABLE
// base := mc_leg ;
16264: LD_ADDR_VAR 0 2
16268: PUSH
16269: LD_EXP 6
16273: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 8 ] , [ f_nation , 2 ] , [ f_btype , b_factory ] ] ) then
16274: LD_INT 22
16276: PUSH
16277: LD_INT 8
16279: PUSH
16280: EMPTY
16281: LIST
16282: LIST
16283: PUSH
16284: LD_INT 23
16286: PUSH
16287: LD_INT 2
16289: PUSH
16290: EMPTY
16291: LIST
16292: LIST
16293: PUSH
16294: LD_INT 30
16296: PUSH
16297: LD_INT 3
16299: PUSH
16300: EMPTY
16301: LIST
16302: LIST
16303: PUSH
16304: EMPTY
16305: LIST
16306: LIST
16307: LIST
16308: PPUSH
16309: CALL_OW 69
16313: NOT
16314: IFFALSE 16318
// exit ;
16316: GO 17171
// if Prob ( 40 ) then
16318: LD_INT 40
16320: PPUSH
16321: CALL_OW 13
16325: IFFALSE 16454
// begin MC_InsertProduceList ( base , [ [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_flame_thrower ] , ] ) ;
16327: LD_VAR 0 2
16331: PPUSH
16332: LD_INT 13
16334: PUSH
16335: LD_INT 1
16337: PUSH
16338: LD_INT 2
16340: PUSH
16341: LD_INT 28
16343: PUSH
16344: EMPTY
16345: LIST
16346: LIST
16347: LIST
16348: LIST
16349: PUSH
16350: LD_INT 13
16352: PUSH
16353: LD_INT 1
16355: PUSH
16356: LD_INT 2
16358: PUSH
16359: LD_INT 28
16361: PUSH
16362: EMPTY
16363: LIST
16364: LIST
16365: LIST
16366: LIST
16367: PUSH
16368: LD_INT 13
16370: PUSH
16371: LD_INT 1
16373: PUSH
16374: LD_INT 2
16376: PUSH
16377: LD_INT 28
16379: PUSH
16380: EMPTY
16381: LIST
16382: LIST
16383: LIST
16384: LIST
16385: PUSH
16386: LD_INT 13
16388: PUSH
16389: LD_INT 1
16391: PUSH
16392: LD_INT 2
16394: PUSH
16395: LD_INT 28
16397: PUSH
16398: EMPTY
16399: LIST
16400: LIST
16401: LIST
16402: LIST
16403: PUSH
16404: LD_INT 13
16406: PUSH
16407: LD_INT 1
16409: PUSH
16410: LD_INT 2
16412: PUSH
16413: LD_INT 28
16415: PUSH
16416: EMPTY
16417: LIST
16418: LIST
16419: LIST
16420: LIST
16421: PUSH
16422: LD_INT 13
16424: PUSH
16425: LD_INT 1
16427: PUSH
16428: LD_INT 2
16430: PUSH
16431: LD_INT 26
16433: PUSH
16434: EMPTY
16435: LIST
16436: LIST
16437: LIST
16438: LIST
16439: PUSH
16440: EMPTY
16441: LIST
16442: LIST
16443: LIST
16444: LIST
16445: LIST
16446: LIST
16447: PPUSH
16448: CALL 85678 0 2
// end else
16452: GO 16671
// begin MC_InsertProduceList ( base , [ [ ar_medium_trike , engine_combustion , control_remote , [ ar_gun , ar_flame_thrower , ar_flame_thrower ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_gun , ar_flame_thrower , ar_flame_thrower ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_flame_thrower , ar_flame_thrower , ar_selfpropelled_bomb ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_flame_thrower , ar_selfpropelled_bomb , ar_selfpropelled_bomb ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , ar_selfpropelled_bomb ] , [ ar_medium_trike , engine_combustion , control_remote , ar_flame_thrower ] , ] ) ;
16454: LD_VAR 0 2
16458: PPUSH
16459: LD_INT 13
16461: PUSH
16462: LD_INT 1
16464: PUSH
16465: LD_INT 2
16467: PUSH
16468: LD_INT 27
16470: PUSH
16471: LD_INT 26
16473: PUSH
16474: LD_INT 26
16476: PUSH
16477: EMPTY
16478: LIST
16479: LIST
16480: LIST
16481: PUSH
16482: LD_INT 1
16484: PPUSH
16485: LD_INT 3
16487: PPUSH
16488: CALL_OW 12
16492: ARRAY
16493: PUSH
16494: EMPTY
16495: LIST
16496: LIST
16497: LIST
16498: LIST
16499: PUSH
16500: LD_INT 13
16502: PUSH
16503: LD_INT 1
16505: PUSH
16506: LD_INT 2
16508: PUSH
16509: LD_INT 27
16511: PUSH
16512: LD_INT 26
16514: PUSH
16515: LD_INT 26
16517: PUSH
16518: EMPTY
16519: LIST
16520: LIST
16521: LIST
16522: PUSH
16523: LD_INT 1
16525: PPUSH
16526: LD_INT 3
16528: PPUSH
16529: CALL_OW 12
16533: ARRAY
16534: PUSH
16535: EMPTY
16536: LIST
16537: LIST
16538: LIST
16539: LIST
16540: PUSH
16541: LD_INT 13
16543: PUSH
16544: LD_INT 1
16546: PUSH
16547: LD_INT 2
16549: PUSH
16550: LD_INT 26
16552: PUSH
16553: LD_INT 26
16555: PUSH
16556: LD_INT 29
16558: PUSH
16559: EMPTY
16560: LIST
16561: LIST
16562: LIST
16563: PUSH
16564: LD_INT 1
16566: PPUSH
16567: LD_INT 3
16569: PPUSH
16570: CALL_OW 12
16574: ARRAY
16575: PUSH
16576: EMPTY
16577: LIST
16578: LIST
16579: LIST
16580: LIST
16581: PUSH
16582: LD_INT 13
16584: PUSH
16585: LD_INT 1
16587: PUSH
16588: LD_INT 2
16590: PUSH
16591: LD_INT 26
16593: PUSH
16594: LD_INT 29
16596: PUSH
16597: LD_INT 29
16599: PUSH
16600: EMPTY
16601: LIST
16602: LIST
16603: LIST
16604: PUSH
16605: LD_INT 1
16607: PPUSH
16608: LD_INT 3
16610: PPUSH
16611: CALL_OW 12
16615: ARRAY
16616: PUSH
16617: EMPTY
16618: LIST
16619: LIST
16620: LIST
16621: LIST
16622: PUSH
16623: LD_INT 13
16625: PUSH
16626: LD_INT 1
16628: PUSH
16629: LD_INT 2
16631: PUSH
16632: LD_INT 29
16634: PUSH
16635: EMPTY
16636: LIST
16637: LIST
16638: LIST
16639: LIST
16640: PUSH
16641: LD_INT 13
16643: PUSH
16644: LD_INT 1
16646: PUSH
16647: LD_INT 2
16649: PUSH
16650: LD_INT 26
16652: PUSH
16653: EMPTY
16654: LIST
16655: LIST
16656: LIST
16657: LIST
16658: PUSH
16659: EMPTY
16660: LIST
16661: LIST
16662: LIST
16663: LIST
16664: LIST
16665: LIST
16666: PPUSH
16667: CALL 85678 0 2
// end ; repeat wait ( 0 0$1 ) ;
16671: LD_INT 35
16673: PPUSH
16674: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= 6 or tick mod 10 10$00 = 0 ;
16678: LD_VAR 0 2
16682: PPUSH
16683: LD_INT 1
16685: PPUSH
16686: CALL 87096 0 2
16690: PUSH
16691: LD_INT 6
16693: GREATEREQUAL
16694: PUSH
16695: LD_OWVAR 1
16699: PUSH
16700: LD_INT 21000
16702: MOD
16703: PUSH
16704: LD_INT 0
16706: EQUAL
16707: OR
16708: IFFALSE 16671
// wait ( 0 0$30 ) ;
16710: LD_INT 1050
16712: PPUSH
16713: CALL_OW 67
// tmp := MC_GetVehicles ( base , true ) ;
16717: LD_ADDR_VAR 0 3
16721: PUSH
16722: LD_VAR 0 2
16726: PPUSH
16727: LD_INT 1
16729: PPUSH
16730: CALL 87096 0 2
16734: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff tmp ) ;
16735: LD_ADDR_EXP 55
16739: PUSH
16740: LD_EXP 55
16744: PPUSH
16745: LD_VAR 0 2
16749: PPUSH
16750: LD_EXP 55
16754: PUSH
16755: LD_VAR 0 2
16759: ARRAY
16760: PUSH
16761: LD_VAR 0 3
16765: DIFF
16766: PPUSH
16767: CALL_OW 1
16771: ST_TO_ADDR
// target := rand ( 0 , 2 ) ;
16772: LD_ADDR_VAR 0 4
16776: PUSH
16777: LD_INT 0
16779: PPUSH
16780: LD_INT 2
16782: PPUSH
16783: CALL_OW 12
16787: ST_TO_ADDR
// if legChangeSide then
16788: LD_EXP 21
16792: IFFALSE 16802
// target := 2 ;
16794: LD_ADDR_VAR 0 4
16798: PUSH
16799: LD_INT 2
16801: ST_TO_ADDR
// if target = 2 then
16802: LD_VAR 0 4
16806: PUSH
16807: LD_INT 2
16809: EQUAL
16810: IFFALSE 16938
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
16812: LD_ADDR_VAR 0 3
16816: PUSH
16817: LD_VAR 0 3
16821: PPUSH
16822: LD_INT 24
16824: PUSH
16825: LD_INT 250
16827: PUSH
16828: EMPTY
16829: LIST
16830: LIST
16831: PPUSH
16832: CALL_OW 72
16836: ST_TO_ADDR
// for i in tmp do
16837: LD_ADDR_VAR 0 1
16841: PUSH
16842: LD_VAR 0 3
16846: PUSH
16847: FOR_IN
16848: IFFALSE 16888
// if GetDistUnitXY ( i , 112 , 64 ) > 9 then
16850: LD_VAR 0 1
16854: PPUSH
16855: LD_INT 112
16857: PPUSH
16858: LD_INT 64
16860: PPUSH
16861: CALL_OW 297
16865: PUSH
16866: LD_INT 9
16868: GREATER
16869: IFFALSE 16886
// ComMoveXY ( i , 112 , 64 ) ;
16871: LD_VAR 0 1
16875: PPUSH
16876: LD_INT 112
16878: PPUSH
16879: LD_INT 64
16881: PPUSH
16882: CALL_OW 111
16886: GO 16847
16888: POP
16889: POP
// wait ( 0 0$1 ) ;
16890: LD_INT 35
16892: PPUSH
16893: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 112 , 64 , 9 ] ) >= ( tmp - 1 ) ;
16897: LD_VAR 0 3
16901: PPUSH
16902: LD_INT 92
16904: PUSH
16905: LD_INT 112
16907: PUSH
16908: LD_INT 64
16910: PUSH
16911: LD_INT 9
16913: PUSH
16914: EMPTY
16915: LIST
16916: LIST
16917: LIST
16918: LIST
16919: PPUSH
16920: CALL_OW 72
16924: PUSH
16925: LD_VAR 0 3
16929: PUSH
16930: LD_INT 1
16932: MINUS
16933: GREATEREQUAL
16934: IFFALSE 16812
// end else
16936: GO 17062
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
16938: LD_ADDR_VAR 0 3
16942: PUSH
16943: LD_VAR 0 3
16947: PPUSH
16948: LD_INT 24
16950: PUSH
16951: LD_INT 250
16953: PUSH
16954: EMPTY
16955: LIST
16956: LIST
16957: PPUSH
16958: CALL_OW 72
16962: ST_TO_ADDR
// for i in tmp do
16963: LD_ADDR_VAR 0 1
16967: PUSH
16968: LD_VAR 0 3
16972: PUSH
16973: FOR_IN
16974: IFFALSE 17014
// if GetDistUnitXY ( i , 174 , 94 ) > 9 then
16976: LD_VAR 0 1
16980: PPUSH
16981: LD_INT 174
16983: PPUSH
16984: LD_INT 94
16986: PPUSH
16987: CALL_OW 297
16991: PUSH
16992: LD_INT 9
16994: GREATER
16995: IFFALSE 17012
// ComMoveXY ( i , 174 , 94 ) ;
16997: LD_VAR 0 1
17001: PPUSH
17002: LD_INT 174
17004: PPUSH
17005: LD_INT 94
17007: PPUSH
17008: CALL_OW 111
17012: GO 16973
17014: POP
17015: POP
// wait ( 0 0$1 ) ;
17016: LD_INT 35
17018: PPUSH
17019: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 174 , 94 , 9 ] ) >= ( tmp - 1 ) ;
17023: LD_VAR 0 3
17027: PPUSH
17028: LD_INT 92
17030: PUSH
17031: LD_INT 174
17033: PUSH
17034: LD_INT 94
17036: PUSH
17037: LD_INT 9
17039: PUSH
17040: EMPTY
17041: LIST
17042: LIST
17043: LIST
17044: LIST
17045: PPUSH
17046: CALL_OW 72
17050: PUSH
17051: LD_VAR 0 3
17055: PUSH
17056: LD_INT 1
17058: MINUS
17059: GREATEREQUAL
17060: IFFALSE 16938
// end ; repeat wait ( 0 0$1 ) ;
17062: LD_INT 35
17064: PPUSH
17065: CALL_OW 67
// for i in tmp do
17069: LD_ADDR_VAR 0 1
17073: PUSH
17074: LD_VAR 0 3
17078: PUSH
17079: FOR_IN
17080: IFFALSE 17162
// begin if GetLives ( i ) > 251 then
17082: LD_VAR 0 1
17086: PPUSH
17087: CALL_OW 256
17091: PUSH
17092: LD_INT 251
17094: GREATER
17095: IFFALSE 17133
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 8 ] ) , i ) ) else
17097: LD_VAR 0 1
17101: PPUSH
17102: LD_INT 81
17104: PUSH
17105: LD_INT 8
17107: PUSH
17108: EMPTY
17109: LIST
17110: LIST
17111: PPUSH
17112: CALL_OW 69
17116: PPUSH
17117: LD_VAR 0 1
17121: PPUSH
17122: CALL_OW 74
17126: PPUSH
17127: CALL_OW 115
17131: GO 17160
// if IsDead ( i ) then
17133: LD_VAR 0 1
17137: PPUSH
17138: CALL_OW 301
17142: IFFALSE 17160
// tmp := tmp diff i ;
17144: LD_ADDR_VAR 0 3
17148: PUSH
17149: LD_VAR 0 3
17153: PUSH
17154: LD_VAR 0 1
17158: DIFF
17159: ST_TO_ADDR
// end ;
17160: GO 17079
17162: POP
17163: POP
// until not tmp ;
17164: LD_VAR 0 3
17168: NOT
17169: IFFALSE 17062
// end ;
17171: PPOPN 4
17173: END
// every 7 7$30 trigger game and not MC_GetVehicles ( mc_rus_2 , true ) do var i , base , tmp , target , teleport ;
17174: LD_EXP 3
17178: PUSH
17179: LD_EXP 8
17183: PPUSH
17184: LD_INT 1
17186: PPUSH
17187: CALL 87096 0 2
17191: NOT
17192: AND
17193: IFFALSE 18181
17195: GO 17197
17197: DISABLE
17198: LD_INT 0
17200: PPUSH
17201: PPUSH
17202: PPUSH
17203: PPUSH
17204: PPUSH
// begin enable ;
17205: ENABLE
// if not UnitFilter ( mc_bases [ mc_rus_2 ] , [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) then
17206: LD_EXP 36
17210: PUSH
17211: LD_EXP 8
17215: ARRAY
17216: PPUSH
17217: LD_INT 22
17219: PUSH
17220: LD_INT 3
17222: PUSH
17223: EMPTY
17224: LIST
17225: LIST
17226: PUSH
17227: LD_INT 30
17229: PUSH
17230: LD_INT 3
17232: PUSH
17233: EMPTY
17234: LIST
17235: LIST
17236: PUSH
17237: EMPTY
17238: LIST
17239: LIST
17240: PPUSH
17241: CALL_OW 72
17245: NOT
17246: IFFALSE 17250
// exit ;
17248: GO 18181
// base := mc_rus_2 ;
17250: LD_ADDR_VAR 0 2
17254: PUSH
17255: LD_EXP 8
17259: ST_TO_ADDR
// teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) ;
17260: LD_ADDR_VAR 0 5
17264: PUSH
17265: LD_INT 22
17267: PUSH
17268: LD_INT 3
17270: PUSH
17271: EMPTY
17272: LIST
17273: LIST
17274: PUSH
17275: LD_INT 30
17277: PUSH
17278: LD_INT 34
17280: PUSH
17281: EMPTY
17282: LIST
17283: LIST
17284: PUSH
17285: EMPTY
17286: LIST
17287: LIST
17288: PPUSH
17289: CALL_OW 69
17293: ST_TO_ADDR
// if Prob ( 40 ) then
17294: LD_INT 40
17296: PPUSH
17297: CALL_OW 13
17301: IFFALSE 17430
// begin MC_InsertProduceList ( base , [ [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] ] ) ;
17303: LD_VAR 0 2
17307: PPUSH
17308: LD_INT 22
17310: PUSH
17311: LD_INT 3
17313: PUSH
17314: LD_INT 3
17316: PUSH
17317: LD_INT 49
17319: PUSH
17320: EMPTY
17321: LIST
17322: LIST
17323: LIST
17324: LIST
17325: PUSH
17326: LD_INT 22
17328: PUSH
17329: LD_INT 3
17331: PUSH
17332: LD_INT 3
17334: PUSH
17335: LD_INT 49
17337: PUSH
17338: EMPTY
17339: LIST
17340: LIST
17341: LIST
17342: LIST
17343: PUSH
17344: LD_INT 22
17346: PUSH
17347: LD_INT 3
17349: PUSH
17350: LD_INT 3
17352: PUSH
17353: LD_INT 49
17355: PUSH
17356: EMPTY
17357: LIST
17358: LIST
17359: LIST
17360: LIST
17361: PUSH
17362: LD_INT 24
17364: PUSH
17365: LD_INT 3
17367: PUSH
17368: LD_INT 3
17370: PUSH
17371: LD_INT 46
17373: PUSH
17374: EMPTY
17375: LIST
17376: LIST
17377: LIST
17378: LIST
17379: PUSH
17380: LD_INT 24
17382: PUSH
17383: LD_INT 3
17385: PUSH
17386: LD_INT 3
17388: PUSH
17389: LD_INT 46
17391: PUSH
17392: EMPTY
17393: LIST
17394: LIST
17395: LIST
17396: LIST
17397: PUSH
17398: LD_INT 24
17400: PUSH
17401: LD_INT 3
17403: PUSH
17404: LD_INT 3
17406: PUSH
17407: LD_INT 46
17409: PUSH
17410: EMPTY
17411: LIST
17412: LIST
17413: LIST
17414: LIST
17415: PUSH
17416: EMPTY
17417: LIST
17418: LIST
17419: LIST
17420: LIST
17421: LIST
17422: LIST
17423: PPUSH
17424: CALL 85678 0 2
// end else
17428: GO 17555
// begin MC_InsertProduceList ( base , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] ] ) ;
17430: LD_VAR 0 2
17434: PPUSH
17435: LD_INT 24
17437: PUSH
17438: LD_INT 3
17440: PUSH
17441: LD_INT 3
17443: PUSH
17444: LD_INT 47
17446: PUSH
17447: EMPTY
17448: LIST
17449: LIST
17450: LIST
17451: LIST
17452: PUSH
17453: LD_INT 24
17455: PUSH
17456: LD_INT 3
17458: PUSH
17459: LD_INT 3
17461: PUSH
17462: LD_INT 47
17464: PUSH
17465: EMPTY
17466: LIST
17467: LIST
17468: LIST
17469: LIST
17470: PUSH
17471: LD_INT 24
17473: PUSH
17474: LD_INT 3
17476: PUSH
17477: LD_INT 3
17479: PUSH
17480: LD_INT 47
17482: PUSH
17483: EMPTY
17484: LIST
17485: LIST
17486: LIST
17487: LIST
17488: PUSH
17489: LD_INT 24
17491: PUSH
17492: LD_INT 3
17494: PUSH
17495: LD_INT 3
17497: PUSH
17498: LD_INT 46
17500: PUSH
17501: EMPTY
17502: LIST
17503: LIST
17504: LIST
17505: LIST
17506: PUSH
17507: LD_INT 24
17509: PUSH
17510: LD_INT 3
17512: PUSH
17513: LD_INT 3
17515: PUSH
17516: LD_INT 46
17518: PUSH
17519: EMPTY
17520: LIST
17521: LIST
17522: LIST
17523: LIST
17524: PUSH
17525: LD_INT 24
17527: PUSH
17528: LD_INT 3
17530: PUSH
17531: LD_INT 3
17533: PUSH
17534: LD_INT 46
17536: PUSH
17537: EMPTY
17538: LIST
17539: LIST
17540: LIST
17541: LIST
17542: PUSH
17543: EMPTY
17544: LIST
17545: LIST
17546: LIST
17547: LIST
17548: LIST
17549: LIST
17550: PPUSH
17551: CALL 85678 0 2
// end ; if Difficulty > 1 then
17555: LD_OWVAR 67
17559: PUSH
17560: LD_INT 1
17562: GREATER
17563: IFFALSE 17595
// MC_InsertProduceList ( base , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] ] ) ;
17565: LD_VAR 0 2
17569: PPUSH
17570: LD_INT 24
17572: PUSH
17573: LD_INT 3
17575: PUSH
17576: LD_INT 3
17578: PUSH
17579: LD_INT 47
17581: PUSH
17582: EMPTY
17583: LIST
17584: LIST
17585: LIST
17586: LIST
17587: PUSH
17588: EMPTY
17589: LIST
17590: PPUSH
17591: CALL 85678 0 2
// repeat wait ( 0 0$1 ) ;
17595: LD_INT 35
17597: PPUSH
17598: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= [ 6 , 7 , 7 ] [ Difficulty ] or tick mod 10 10$00 = 0 ;
17602: LD_VAR 0 2
17606: PPUSH
17607: LD_INT 1
17609: PPUSH
17610: CALL 87096 0 2
17614: PUSH
17615: LD_INT 6
17617: PUSH
17618: LD_INT 7
17620: PUSH
17621: LD_INT 7
17623: PUSH
17624: EMPTY
17625: LIST
17626: LIST
17627: LIST
17628: PUSH
17629: LD_OWVAR 67
17633: ARRAY
17634: GREATEREQUAL
17635: PUSH
17636: LD_OWVAR 1
17640: PUSH
17641: LD_INT 21000
17643: MOD
17644: PUSH
17645: LD_INT 0
17647: EQUAL
17648: OR
17649: IFFALSE 17595
// wait ( 0 0$45 ) ;
17651: LD_INT 1575
17653: PPUSH
17654: CALL_OW 67
// tmp := MC_GetVehicles ( base , true ) ;
17658: LD_ADDR_VAR 0 3
17662: PUSH
17663: LD_VAR 0 2
17667: PPUSH
17668: LD_INT 1
17670: PPUSH
17671: CALL 87096 0 2
17675: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff tmp ) ;
17676: LD_ADDR_EXP 55
17680: PUSH
17681: LD_EXP 55
17685: PPUSH
17686: LD_VAR 0 2
17690: PPUSH
17691: LD_EXP 55
17695: PUSH
17696: LD_VAR 0 2
17700: ARRAY
17701: PUSH
17702: LD_VAR 0 3
17706: DIFF
17707: PPUSH
17708: CALL_OW 1
17712: ST_TO_ADDR
// target := rand ( 0 , 1 ) ;
17713: LD_ADDR_VAR 0 4
17717: PUSH
17718: LD_INT 0
17720: PPUSH
17721: LD_INT 1
17723: PPUSH
17724: CALL_OW 12
17728: ST_TO_ADDR
// if target then
17729: LD_VAR 0 4
17733: IFFALSE 17861
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
17735: LD_ADDR_VAR 0 3
17739: PUSH
17740: LD_VAR 0 3
17744: PPUSH
17745: LD_INT 24
17747: PUSH
17748: LD_INT 250
17750: PUSH
17751: EMPTY
17752: LIST
17753: LIST
17754: PPUSH
17755: CALL_OW 72
17759: ST_TO_ADDR
// for i in tmp do
17760: LD_ADDR_VAR 0 1
17764: PUSH
17765: LD_VAR 0 3
17769: PUSH
17770: FOR_IN
17771: IFFALSE 17811
// if GetDistUnitXY ( i , 84 , 32 ) > 9 then
17773: LD_VAR 0 1
17777: PPUSH
17778: LD_INT 84
17780: PPUSH
17781: LD_INT 32
17783: PPUSH
17784: CALL_OW 297
17788: PUSH
17789: LD_INT 9
17791: GREATER
17792: IFFALSE 17809
// ComMoveXY ( i , 84 , 32 ) ;
17794: LD_VAR 0 1
17798: PPUSH
17799: LD_INT 84
17801: PPUSH
17802: LD_INT 32
17804: PPUSH
17805: CALL_OW 111
17809: GO 17770
17811: POP
17812: POP
// wait ( 0 0$1 ) ;
17813: LD_INT 35
17815: PPUSH
17816: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 84 , 32 , 9 ] ) >= ( tmp - 1 ) ;
17820: LD_VAR 0 3
17824: PPUSH
17825: LD_INT 92
17827: PUSH
17828: LD_INT 84
17830: PUSH
17831: LD_INT 32
17833: PUSH
17834: LD_INT 9
17836: PUSH
17837: EMPTY
17838: LIST
17839: LIST
17840: LIST
17841: LIST
17842: PPUSH
17843: CALL_OW 72
17847: PUSH
17848: LD_VAR 0 3
17852: PUSH
17853: LD_INT 1
17855: MINUS
17856: GREATEREQUAL
17857: IFFALSE 17735
// end else
17859: GO 18021
// begin if teleport then
17861: LD_VAR 0 5
17865: IFFALSE 17885
// ComEnterUnit ( tmp , teleport [ 1 ] ) ;
17867: LD_VAR 0 3
17871: PPUSH
17872: LD_VAR 0 5
17876: PUSH
17877: LD_INT 1
17879: ARRAY
17880: PPUSH
17881: CALL_OW 120
// repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
17885: LD_ADDR_VAR 0 3
17889: PUSH
17890: LD_VAR 0 3
17894: PPUSH
17895: LD_INT 24
17897: PUSH
17898: LD_INT 250
17900: PUSH
17901: EMPTY
17902: LIST
17903: LIST
17904: PPUSH
17905: CALL_OW 72
17909: ST_TO_ADDR
// for i in tmp do
17910: LD_ADDR_VAR 0 1
17914: PUSH
17915: LD_VAR 0 3
17919: PUSH
17920: FOR_IN
17921: IFFALSE 17973
// if GetDistUnitXY ( i , 140 , 219 ) > 9 and not HasTask ( i ) then
17923: LD_VAR 0 1
17927: PPUSH
17928: LD_INT 140
17930: PPUSH
17931: LD_INT 219
17933: PPUSH
17934: CALL_OW 297
17938: PUSH
17939: LD_INT 9
17941: GREATER
17942: PUSH
17943: LD_VAR 0 1
17947: PPUSH
17948: CALL_OW 314
17952: NOT
17953: AND
17954: IFFALSE 17971
// AddComMoveXY ( i , 140 , 219 ) ;
17956: LD_VAR 0 1
17960: PPUSH
17961: LD_INT 140
17963: PPUSH
17964: LD_INT 219
17966: PPUSH
17967: CALL_OW 171
17971: GO 17920
17973: POP
17974: POP
// wait ( 0 0$1 ) ;
17975: LD_INT 35
17977: PPUSH
17978: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 140 , 219 , 9 ] ) >= ( tmp - 1 ) ;
17982: LD_VAR 0 3
17986: PPUSH
17987: LD_INT 92
17989: PUSH
17990: LD_INT 140
17992: PUSH
17993: LD_INT 219
17995: PUSH
17996: LD_INT 9
17998: PUSH
17999: EMPTY
18000: LIST
18001: LIST
18002: LIST
18003: LIST
18004: PPUSH
18005: CALL_OW 72
18009: PUSH
18010: LD_VAR 0 3
18014: PUSH
18015: LD_INT 1
18017: MINUS
18018: GREATEREQUAL
18019: IFFALSE 17885
// end ; repeat wait ( 0 0$1 ) ;
18021: LD_INT 35
18023: PPUSH
18024: CALL_OW 67
// for i in tmp do
18028: LD_ADDR_VAR 0 1
18032: PUSH
18033: LD_VAR 0 3
18037: PUSH
18038: FOR_IN
18039: IFFALSE 18172
// begin if GetLives ( i ) > 251 then
18041: LD_VAR 0 1
18045: PPUSH
18046: CALL_OW 256
18050: PUSH
18051: LD_INT 251
18053: GREATER
18054: IFFALSE 18143
// begin if GetWeapon ( i ) = ru_time_lapser then
18056: LD_VAR 0 1
18060: PPUSH
18061: CALL_OW 264
18065: PUSH
18066: LD_INT 49
18068: EQUAL
18069: IFFALSE 18107
// ComMoveUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) else
18071: LD_VAR 0 1
18075: PPUSH
18076: LD_INT 81
18078: PUSH
18079: LD_INT 3
18081: PUSH
18082: EMPTY
18083: LIST
18084: LIST
18085: PPUSH
18086: CALL_OW 69
18090: PPUSH
18091: LD_VAR 0 1
18095: PPUSH
18096: CALL_OW 74
18100: PPUSH
18101: CALL_OW 112
18105: GO 18141
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
18107: LD_VAR 0 1
18111: PPUSH
18112: LD_INT 81
18114: PUSH
18115: LD_INT 3
18117: PUSH
18118: EMPTY
18119: LIST
18120: LIST
18121: PPUSH
18122: CALL_OW 69
18126: PPUSH
18127: LD_VAR 0 1
18131: PPUSH
18132: CALL_OW 74
18136: PPUSH
18137: CALL_OW 115
// end else
18141: GO 18170
// if IsDead ( i ) then
18143: LD_VAR 0 1
18147: PPUSH
18148: CALL_OW 301
18152: IFFALSE 18170
// tmp := tmp diff i ;
18154: LD_ADDR_VAR 0 3
18158: PUSH
18159: LD_VAR 0 3
18163: PUSH
18164: LD_VAR 0 1
18168: DIFF
18169: ST_TO_ADDR
// end ;
18170: GO 18038
18172: POP
18173: POP
// until not tmp ;
18174: LD_VAR 0 3
18178: NOT
18179: IFFALSE 18021
// end ;
18181: PPOPN 5
18183: END
// every 12 12$30 + 11 11$30 trigger game and not MC_GetVehicles ( mc_amer , true ) do var i , base , tmp , target ;
18184: LD_EXP 3
18188: PUSH
18189: LD_EXP 5
18193: PPUSH
18194: LD_INT 1
18196: PPUSH
18197: CALL 87096 0 2
18201: NOT
18202: AND
18203: IFFALSE 18585
18205: GO 18207
18207: DISABLE
18208: LD_INT 0
18210: PPUSH
18211: PPUSH
18212: PPUSH
18213: PPUSH
// begin enable ;
18214: ENABLE
// base := mc_amer ;
18215: LD_ADDR_VAR 0 2
18219: PUSH
18220: LD_EXP 5
18224: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 4 ] , [ f_nation , 1 ] , [ f_btype , b_factory ] ] ) then
18225: LD_INT 22
18227: PUSH
18228: LD_INT 4
18230: PUSH
18231: EMPTY
18232: LIST
18233: LIST
18234: PUSH
18235: LD_INT 23
18237: PUSH
18238: LD_INT 1
18240: PUSH
18241: EMPTY
18242: LIST
18243: LIST
18244: PUSH
18245: LD_INT 30
18247: PUSH
18248: LD_INT 3
18250: PUSH
18251: EMPTY
18252: LIST
18253: LIST
18254: PUSH
18255: EMPTY
18256: LIST
18257: LIST
18258: LIST
18259: PPUSH
18260: CALL_OW 69
18264: NOT
18265: IFFALSE 18269
// exit ;
18267: GO 18585
// MC_InsertProduceList ( base , [ [ us_medium_tracked , engine_combustion , control_remote , us_double_gun ] , [ us_medium_tracked , engine_combustion , control_remote , us_laser ] , [ us_medium_tracked , engine_combustion , control_remote , us_rocket_launcher ] , [ us_medium_tracked , engine_combustion , control_remote , us_rocket_launcher ] , [ us_medium_tracked , engine_combustion , control_remote , us_rocket_launcher ] ] ) ;
18269: LD_VAR 0 2
18273: PPUSH
18274: LD_INT 3
18276: PUSH
18277: LD_INT 1
18279: PUSH
18280: LD_INT 2
18282: PUSH
18283: LD_INT 5
18285: PUSH
18286: EMPTY
18287: LIST
18288: LIST
18289: LIST
18290: LIST
18291: PUSH
18292: LD_INT 3
18294: PUSH
18295: LD_INT 1
18297: PUSH
18298: LD_INT 2
18300: PUSH
18301: LD_INT 9
18303: PUSH
18304: EMPTY
18305: LIST
18306: LIST
18307: LIST
18308: LIST
18309: PUSH
18310: LD_INT 3
18312: PUSH
18313: LD_INT 1
18315: PUSH
18316: LD_INT 2
18318: PUSH
18319: LD_INT 7
18321: PUSH
18322: EMPTY
18323: LIST
18324: LIST
18325: LIST
18326: LIST
18327: PUSH
18328: LD_INT 3
18330: PUSH
18331: LD_INT 1
18333: PUSH
18334: LD_INT 2
18336: PUSH
18337: LD_INT 7
18339: PUSH
18340: EMPTY
18341: LIST
18342: LIST
18343: LIST
18344: LIST
18345: PUSH
18346: LD_INT 3
18348: PUSH
18349: LD_INT 1
18351: PUSH
18352: LD_INT 2
18354: PUSH
18355: LD_INT 7
18357: PUSH
18358: EMPTY
18359: LIST
18360: LIST
18361: LIST
18362: LIST
18363: PUSH
18364: EMPTY
18365: LIST
18366: LIST
18367: LIST
18368: LIST
18369: LIST
18370: PPUSH
18371: CALL 85678 0 2
// repeat wait ( 0 0$1 ) ;
18375: LD_INT 35
18377: PPUSH
18378: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= 5 or tick mod 10 10$00 = 0 ;
18382: LD_VAR 0 2
18386: PPUSH
18387: LD_INT 1
18389: PPUSH
18390: CALL 87096 0 2
18394: PUSH
18395: LD_INT 5
18397: GREATEREQUAL
18398: PUSH
18399: LD_OWVAR 1
18403: PUSH
18404: LD_INT 21000
18406: MOD
18407: PUSH
18408: LD_INT 0
18410: EQUAL
18411: OR
18412: IFFALSE 18375
// wait ( 0 0$30 ) ;
18414: LD_INT 1050
18416: PPUSH
18417: CALL_OW 67
// tmp := MC_GetVehicles ( base , true ) ;
18421: LD_ADDR_VAR 0 3
18425: PUSH
18426: LD_VAR 0 2
18430: PPUSH
18431: LD_INT 1
18433: PPUSH
18434: CALL 87096 0 2
18438: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff tmp ) ;
18439: LD_ADDR_EXP 55
18443: PUSH
18444: LD_EXP 55
18448: PPUSH
18449: LD_VAR 0 2
18453: PPUSH
18454: LD_EXP 55
18458: PUSH
18459: LD_VAR 0 2
18463: ARRAY
18464: PUSH
18465: LD_VAR 0 3
18469: DIFF
18470: PPUSH
18471: CALL_OW 1
18475: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18476: LD_INT 35
18478: PPUSH
18479: CALL_OW 67
// for i in tmp do
18483: LD_ADDR_VAR 0 1
18487: PUSH
18488: LD_VAR 0 3
18492: PUSH
18493: FOR_IN
18494: IFFALSE 18576
// begin if GetLives ( i ) > 251 then
18496: LD_VAR 0 1
18500: PPUSH
18501: CALL_OW 256
18505: PUSH
18506: LD_INT 251
18508: GREATER
18509: IFFALSE 18547
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 4 ] ) , i ) ) else
18511: LD_VAR 0 1
18515: PPUSH
18516: LD_INT 81
18518: PUSH
18519: LD_INT 4
18521: PUSH
18522: EMPTY
18523: LIST
18524: LIST
18525: PPUSH
18526: CALL_OW 69
18530: PPUSH
18531: LD_VAR 0 1
18535: PPUSH
18536: CALL_OW 74
18540: PPUSH
18541: CALL_OW 115
18545: GO 18574
// if IsDead ( i ) then
18547: LD_VAR 0 1
18551: PPUSH
18552: CALL_OW 301
18556: IFFALSE 18574
// tmp := tmp diff i ;
18558: LD_ADDR_VAR 0 3
18562: PUSH
18563: LD_VAR 0 3
18567: PUSH
18568: LD_VAR 0 1
18572: DIFF
18573: ST_TO_ADDR
// end ;
18574: GO 18493
18576: POP
18577: POP
// until not tmp ;
18578: LD_VAR 0 3
18582: NOT
18583: IFFALSE 18476
// end ; end_of_file
18585: PPOPN 4
18587: END
// export function CustomEvent ( event ) ; begin
18588: LD_INT 0
18590: PPUSH
// end ;
18591: LD_VAR 0 2
18595: RET
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 = 4 then
18596: LD_VAR 0 1
18600: PUSH
18601: LD_INT 1
18603: EQUAL
18604: PUSH
18605: LD_VAR 0 2
18609: PUSH
18610: LD_INT 4
18612: EQUAL
18613: AND
18614: IFFALSE 18642
// begin SayRadio ( Powell , DP-Lost ) ;
18616: LD_EXP 12
18620: PPUSH
18621: LD_STRING DP-Lost
18623: PPUSH
18624: CALL_OW 94
// wait ( 0 0$2 ) ;
18628: LD_INT 70
18630: PPUSH
18631: CALL_OW 67
// YouLost ( FriendlyFire ) ;
18635: LD_STRING FriendlyFire
18637: PPUSH
18638: CALL_OW 104
// end ; end ;
18642: PPOPN 2
18644: END
// on UnitDestroyed ( un ) do begin if GameType = 1 then
18645: LD_EXP 2
18649: PUSH
18650: LD_INT 1
18652: EQUAL
18653: IFFALSE 18888
// begin if un = playerCommander then
18655: LD_VAR 0 1
18659: PUSH
18660: LD_EXP 9
18664: EQUAL
18665: IFFALSE 18674
// YouLost ( commanderDied ) ;
18667: LD_STRING commanderDied
18669: PPUSH
18670: CALL_OW 104
// if un = allyCommander then
18674: LD_VAR 0 1
18678: PUSH
18679: LD_EXP 11
18683: EQUAL
18684: IFFALSE 18693
// YouLost ( Theta ) ;
18686: LD_STRING Theta
18688: PPUSH
18689: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_building ] ] ] ) then
18693: LD_VAR 0 1
18697: PUSH
18698: LD_INT 22
18700: PUSH
18701: LD_INT 8
18703: PUSH
18704: EMPTY
18705: LIST
18706: LIST
18707: PUSH
18708: LD_INT 2
18710: PUSH
18711: LD_INT 21
18713: PUSH
18714: LD_INT 1
18716: PUSH
18717: EMPTY
18718: LIST
18719: LIST
18720: PUSH
18721: LD_INT 21
18723: PUSH
18724: LD_INT 3
18726: PUSH
18727: EMPTY
18728: LIST
18729: LIST
18730: PUSH
18731: EMPTY
18732: LIST
18733: LIST
18734: LIST
18735: PUSH
18736: EMPTY
18737: LIST
18738: LIST
18739: PPUSH
18740: CALL_OW 69
18744: IN
18745: IFFALSE 18761
// legDestCounter := legDestCounter + 1 ;
18747: LD_ADDR_EXP 18
18751: PUSH
18752: LD_EXP 18
18756: PUSH
18757: LD_INT 1
18759: PLUS
18760: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_building ] ] ] ) then
18761: LD_VAR 0 1
18765: PUSH
18766: LD_INT 22
18768: PUSH
18769: LD_INT 4
18771: PUSH
18772: EMPTY
18773: LIST
18774: LIST
18775: PUSH
18776: LD_INT 2
18778: PUSH
18779: LD_INT 21
18781: PUSH
18782: LD_INT 1
18784: PUSH
18785: EMPTY
18786: LIST
18787: LIST
18788: PUSH
18789: LD_INT 21
18791: PUSH
18792: LD_INT 3
18794: PUSH
18795: EMPTY
18796: LIST
18797: LIST
18798: PUSH
18799: EMPTY
18800: LIST
18801: LIST
18802: LIST
18803: PUSH
18804: EMPTY
18805: LIST
18806: LIST
18807: PPUSH
18808: CALL_OW 69
18812: IN
18813: IFFALSE 18829
// allyDestCounter := allyDestCounter + 1 ;
18815: LD_ADDR_EXP 22
18819: PUSH
18820: LD_EXP 22
18824: PUSH
18825: LD_INT 1
18827: PLUS
18828: ST_TO_ADDR
// if un in ruOutpost then
18829: LD_VAR 0 1
18833: PUSH
18834: LD_EXP 14
18838: IN
18839: IFFALSE 18888
// begin ruOutpost := ruOutpost diff un ;
18841: LD_ADDR_EXP 14
18845: PUSH
18846: LD_EXP 14
18850: PUSH
18851: LD_VAR 0 1
18855: DIFF
18856: ST_TO_ADDR
// ruEscape := Replace ( ruEscape , 1 , ruEscape [ 1 ] + 1 ) ;
18857: LD_ADDR_EXP 15
18861: PUSH
18862: LD_EXP 15
18866: PPUSH
18867: LD_INT 1
18869: PPUSH
18870: LD_EXP 15
18874: PUSH
18875: LD_INT 1
18877: ARRAY
18878: PUSH
18879: LD_INT 1
18881: PLUS
18882: PPUSH
18883: CALL_OW 1
18887: ST_TO_ADDR
// end ; end ; MCE_UnitDestroyed ( un ) ;
18888: LD_VAR 0 1
18892: PPUSH
18893: CALL 89070 0 1
// end ;
18897: PPOPN 1
18899: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
18900: LD_VAR 0 1
18904: PPUSH
18905: LD_VAR 0 2
18909: PPUSH
18910: CALL 91182 0 2
// end ;
18914: PPOPN 2
18916: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
18917: LD_VAR 0 1
18921: PPUSH
18922: CALL 90250 0 1
// end ;
18926: PPOPN 1
18928: END
// on BuildingComplete ( building ) do begin MCE_BuildingComplete ( building ) ;
18929: LD_VAR 0 1
18933: PPUSH
18934: CALL 90491 0 1
// end ;
18938: PPOPN 1
18940: END
// on ResearchComplete ( tech , lab ) do begin if tech = tech_LasDouble and GetSide ( lab ) = 1 then
18941: LD_VAR 0 1
18945: PUSH
18946: LD_INT 14
18948: EQUAL
18949: PUSH
18950: LD_VAR 0 2
18954: PPUSH
18955: CALL_OW 255
18959: PUSH
18960: LD_INT 1
18962: EQUAL
18963: AND
18964: IFFALSE 19005
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Laser ) ;
18966: LD_EXP 9
18970: PPUSH
18971: LD_STRING D
18973: PUSH
18974: LD_STRING I
18976: PUSH
18977: LD_STRING J
18979: PUSH
18980: LD_STRING S
18982: PUSH
18983: EMPTY
18984: LIST
18985: LIST
18986: LIST
18987: PUSH
18988: LD_EXP 25
18992: ARRAY
18993: STR
18994: PUSH
18995: LD_STRING -1-Laser
18997: STR
18998: PPUSH
18999: CALL_OW 88
// exit ;
19003: GO 19147
// end ; if tech = tech_MatDet and GetSide ( lab ) = 1 then
19005: LD_VAR 0 1
19009: PUSH
19010: LD_INT 7
19012: EQUAL
19013: PUSH
19014: LD_VAR 0 2
19018: PPUSH
19019: CALL_OW 255
19023: PUSH
19024: LD_INT 1
19026: EQUAL
19027: AND
19028: IFFALSE 19069
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Materialization ) ;
19030: LD_EXP 9
19034: PPUSH
19035: LD_STRING D
19037: PUSH
19038: LD_STRING I
19040: PUSH
19041: LD_STRING J
19043: PUSH
19044: LD_STRING S
19046: PUSH
19047: EMPTY
19048: LIST
19049: LIST
19050: LIST
19051: PUSH
19052: LD_EXP 25
19056: ARRAY
19057: STR
19058: PUSH
19059: LD_STRING -1-Materialization
19061: STR
19062: PPUSH
19063: CALL_OW 88
// exit ;
19067: GO 19147
// end ; if tech = tech_SibFiss and GetSide ( lab ) = 1 then
19069: LD_VAR 0 1
19073: PUSH
19074: LD_INT 25
19076: EQUAL
19077: PUSH
19078: LD_VAR 0 2
19082: PPUSH
19083: CALL_OW 255
19087: PUSH
19088: LD_INT 1
19090: EQUAL
19091: AND
19092: IFFALSE 19133
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Rocket ) ;
19094: LD_EXP 9
19098: PPUSH
19099: LD_STRING D
19101: PUSH
19102: LD_STRING I
19104: PUSH
19105: LD_STRING J
19107: PUSH
19108: LD_STRING S
19110: PUSH
19111: EMPTY
19112: LIST
19113: LIST
19114: LIST
19115: PUSH
19116: LD_EXP 25
19120: ARRAY
19121: STR
19122: PUSH
19123: LD_STRING -1-Rocket
19125: STR
19126: PPUSH
19127: CALL_OW 88
// exit ;
19131: GO 19147
// end ; MCE_ResearchComplete ( tech , lab ) ;
19133: LD_VAR 0 1
19137: PPUSH
19138: LD_VAR 0 2
19142: PPUSH
19143: CALL 88766 0 2
// end ;
19147: PPOPN 2
19149: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
19150: LD_VAR 0 1
19154: PPUSH
19155: LD_VAR 0 2
19159: PPUSH
19160: LD_VAR 0 3
19164: PPUSH
19165: LD_VAR 0 4
19169: PPUSH
19170: LD_VAR 0 5
19174: PPUSH
19175: CALL 88386 0 5
// end ;
19179: PPOPN 5
19181: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
19182: LD_VAR 0 1
19186: PPUSH
19187: LD_VAR 0 2
19191: PPUSH
19192: CALL 87982 0 2
// end ;
19196: PPOPN 2
19198: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
19199: LD_VAR 0 1
19203: PPUSH
19204: LD_VAR 0 2
19208: PPUSH
19209: LD_VAR 0 3
19213: PPUSH
19214: LD_VAR 0 4
19218: PPUSH
19219: CALL 87820 0 4
// end ;
19223: PPOPN 4
19225: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
19226: LD_VAR 0 1
19230: PPUSH
19231: LD_VAR 0 2
19235: PPUSH
19236: LD_VAR 0 3
19240: PPUSH
19241: CALL 87595 0 3
// end ;
19245: PPOPN 3
19247: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
19248: LD_VAR 0 1
19252: PPUSH
19253: LD_VAR 0 2
19257: PPUSH
19258: CALL 87480 0 2
// end ;
19262: PPOPN 2
19264: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
19265: LD_VAR 0 1
19269: PPUSH
19270: LD_VAR 0 2
19274: PPUSH
19275: CALL 91443 0 2
// end ;
19279: PPOPN 2
19281: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
19282: LD_VAR 0 1
19286: PPUSH
19287: LD_VAR 0 2
19291: PPUSH
19292: LD_VAR 0 3
19296: PPUSH
19297: LD_VAR 0 4
19301: PPUSH
19302: CALL 91659 0 4
// end ;
19306: PPOPN 4
19308: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
19309: LD_VAR 0 1
19313: PPUSH
19314: LD_VAR 0 2
19318: PPUSH
19319: CALL 87289 0 2
// end ;
19323: PPOPN 2
19325: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
19326: LD_VAR 0 1
19330: PPUSH
19331: CALL 91898 0 1
// end ; end_of_file
19335: PPOPN 1
19337: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
19338: LD_INT 0
19340: PPUSH
19341: PPUSH
// if exist_mode then
19342: LD_VAR 0 2
19346: IFFALSE 19371
// unit := CreateCharacter ( prefix & ident ) else
19348: LD_ADDR_VAR 0 5
19352: PUSH
19353: LD_VAR 0 3
19357: PUSH
19358: LD_VAR 0 1
19362: STR
19363: PPUSH
19364: CALL_OW 34
19368: ST_TO_ADDR
19369: GO 19386
// unit := NewCharacter ( ident ) ;
19371: LD_ADDR_VAR 0 5
19375: PUSH
19376: LD_VAR 0 1
19380: PPUSH
19381: CALL_OW 25
19385: ST_TO_ADDR
// result := unit ;
19386: LD_ADDR_VAR 0 4
19390: PUSH
19391: LD_VAR 0 5
19395: ST_TO_ADDR
// end ;
19396: LD_VAR 0 4
19400: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
19401: LD_INT 0
19403: PPUSH
19404: PPUSH
// if not side or not nation then
19405: LD_VAR 0 1
19409: NOT
19410: PUSH
19411: LD_VAR 0 2
19415: NOT
19416: OR
19417: IFFALSE 19421
// exit ;
19419: GO 20065
// case nation of nation_american :
19421: LD_VAR 0 2
19425: PUSH
19426: LD_INT 1
19428: DOUBLE
19429: EQUAL
19430: IFTRUE 19434
19432: GO 19608
19434: POP
// result := [ 35 , 45 , 46 , 47 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 ] ; nation_arabian :
19435: LD_ADDR_VAR 0 4
19439: PUSH
19440: LD_INT 35
19442: PUSH
19443: LD_INT 45
19445: PUSH
19446: LD_INT 46
19448: PUSH
19449: LD_INT 47
19451: PUSH
19452: LD_INT 1
19454: PUSH
19455: LD_INT 2
19457: PUSH
19458: LD_INT 6
19460: PUSH
19461: LD_INT 15
19463: PUSH
19464: LD_INT 16
19466: PUSH
19467: LD_INT 7
19469: PUSH
19470: LD_INT 12
19472: PUSH
19473: LD_INT 13
19475: PUSH
19476: LD_INT 10
19478: PUSH
19479: LD_INT 14
19481: PUSH
19482: LD_INT 20
19484: PUSH
19485: LD_INT 21
19487: PUSH
19488: LD_INT 22
19490: PUSH
19491: LD_INT 25
19493: PUSH
19494: LD_INT 32
19496: PUSH
19497: LD_INT 27
19499: PUSH
19500: LD_INT 36
19502: PUSH
19503: LD_INT 69
19505: PUSH
19506: LD_INT 39
19508: PUSH
19509: LD_INT 34
19511: PUSH
19512: LD_INT 40
19514: PUSH
19515: LD_INT 48
19517: PUSH
19518: LD_INT 49
19520: PUSH
19521: LD_INT 50
19523: PUSH
19524: LD_INT 51
19526: PUSH
19527: LD_INT 52
19529: PUSH
19530: LD_INT 53
19532: PUSH
19533: LD_INT 54
19535: PUSH
19536: LD_INT 55
19538: PUSH
19539: LD_INT 56
19541: PUSH
19542: LD_INT 57
19544: PUSH
19545: LD_INT 58
19547: PUSH
19548: LD_INT 59
19550: PUSH
19551: LD_INT 60
19553: PUSH
19554: LD_INT 61
19556: PUSH
19557: LD_INT 62
19559: PUSH
19560: LD_INT 80
19562: PUSH
19563: EMPTY
19564: LIST
19565: LIST
19566: LIST
19567: LIST
19568: LIST
19569: LIST
19570: LIST
19571: LIST
19572: LIST
19573: LIST
19574: LIST
19575: LIST
19576: LIST
19577: LIST
19578: LIST
19579: LIST
19580: LIST
19581: LIST
19582: LIST
19583: LIST
19584: LIST
19585: LIST
19586: LIST
19587: LIST
19588: LIST
19589: LIST
19590: LIST
19591: LIST
19592: LIST
19593: LIST
19594: LIST
19595: LIST
19596: LIST
19597: LIST
19598: LIST
19599: LIST
19600: LIST
19601: LIST
19602: LIST
19603: LIST
19604: LIST
19605: ST_TO_ADDR
19606: GO 19989
19608: LD_INT 2
19610: DOUBLE
19611: EQUAL
19612: IFTRUE 19616
19614: GO 19798
19616: POP
// result := [ 35 , 45 , 46 , 47 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 ] ; nation_russian :
19617: LD_ADDR_VAR 0 4
19621: PUSH
19622: LD_INT 35
19624: PUSH
19625: LD_INT 45
19627: PUSH
19628: LD_INT 46
19630: PUSH
19631: LD_INT 47
19633: PUSH
19634: LD_INT 70
19636: PUSH
19637: LD_INT 1
19639: PUSH
19640: LD_INT 11
19642: PUSH
19643: LD_INT 3
19645: PUSH
19646: LD_INT 4
19648: PUSH
19649: LD_INT 5
19651: PUSH
19652: LD_INT 6
19654: PUSH
19655: LD_INT 15
19657: PUSH
19658: LD_INT 18
19660: PUSH
19661: LD_INT 7
19663: PUSH
19664: LD_INT 17
19666: PUSH
19667: LD_INT 8
19669: PUSH
19670: LD_INT 20
19672: PUSH
19673: LD_INT 21
19675: PUSH
19676: LD_INT 22
19678: PUSH
19679: LD_INT 72
19681: PUSH
19682: LD_INT 26
19684: PUSH
19685: LD_INT 69
19687: PUSH
19688: LD_INT 39
19690: PUSH
19691: LD_INT 40
19693: PUSH
19694: LD_INT 41
19696: PUSH
19697: LD_INT 42
19699: PUSH
19700: LD_INT 43
19702: PUSH
19703: LD_INT 48
19705: PUSH
19706: LD_INT 49
19708: PUSH
19709: LD_INT 50
19711: PUSH
19712: LD_INT 51
19714: PUSH
19715: LD_INT 52
19717: PUSH
19718: LD_INT 53
19720: PUSH
19721: LD_INT 54
19723: PUSH
19724: LD_INT 55
19726: PUSH
19727: LD_INT 56
19729: PUSH
19730: LD_INT 60
19732: PUSH
19733: LD_INT 61
19735: PUSH
19736: LD_INT 62
19738: PUSH
19739: LD_INT 66
19741: PUSH
19742: LD_INT 67
19744: PUSH
19745: LD_INT 68
19747: PUSH
19748: LD_INT 81
19750: PUSH
19751: EMPTY
19752: LIST
19753: LIST
19754: LIST
19755: LIST
19756: LIST
19757: LIST
19758: LIST
19759: LIST
19760: LIST
19761: LIST
19762: LIST
19763: LIST
19764: LIST
19765: LIST
19766: LIST
19767: LIST
19768: LIST
19769: LIST
19770: LIST
19771: LIST
19772: LIST
19773: LIST
19774: LIST
19775: LIST
19776: LIST
19777: LIST
19778: LIST
19779: LIST
19780: LIST
19781: LIST
19782: LIST
19783: LIST
19784: LIST
19785: LIST
19786: LIST
19787: LIST
19788: LIST
19789: LIST
19790: LIST
19791: LIST
19792: LIST
19793: LIST
19794: LIST
19795: ST_TO_ADDR
19796: GO 19989
19798: LD_INT 3
19800: DOUBLE
19801: EQUAL
19802: IFTRUE 19806
19804: GO 19988
19806: POP
// result := [ 46 , 47 , 1 , 2 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 ] ; end ;
19807: LD_ADDR_VAR 0 4
19811: PUSH
19812: LD_INT 46
19814: PUSH
19815: LD_INT 47
19817: PUSH
19818: LD_INT 1
19820: PUSH
19821: LD_INT 2
19823: PUSH
19824: LD_INT 11
19826: PUSH
19827: LD_INT 9
19829: PUSH
19830: LD_INT 20
19832: PUSH
19833: LD_INT 19
19835: PUSH
19836: LD_INT 21
19838: PUSH
19839: LD_INT 24
19841: PUSH
19842: LD_INT 22
19844: PUSH
19845: LD_INT 25
19847: PUSH
19848: LD_INT 28
19850: PUSH
19851: LD_INT 29
19853: PUSH
19854: LD_INT 30
19856: PUSH
19857: LD_INT 31
19859: PUSH
19860: LD_INT 37
19862: PUSH
19863: LD_INT 38
19865: PUSH
19866: LD_INT 32
19868: PUSH
19869: LD_INT 27
19871: PUSH
19872: LD_INT 33
19874: PUSH
19875: LD_INT 69
19877: PUSH
19878: LD_INT 39
19880: PUSH
19881: LD_INT 34
19883: PUSH
19884: LD_INT 40
19886: PUSH
19887: LD_INT 71
19889: PUSH
19890: LD_INT 23
19892: PUSH
19893: LD_INT 44
19895: PUSH
19896: LD_INT 48
19898: PUSH
19899: LD_INT 49
19901: PUSH
19902: LD_INT 50
19904: PUSH
19905: LD_INT 51
19907: PUSH
19908: LD_INT 52
19910: PUSH
19911: LD_INT 53
19913: PUSH
19914: LD_INT 54
19916: PUSH
19917: LD_INT 55
19919: PUSH
19920: LD_INT 56
19922: PUSH
19923: LD_INT 57
19925: PUSH
19926: LD_INT 58
19928: PUSH
19929: LD_INT 59
19931: PUSH
19932: LD_INT 63
19934: PUSH
19935: LD_INT 64
19937: PUSH
19938: LD_INT 65
19940: PUSH
19941: EMPTY
19942: LIST
19943: LIST
19944: LIST
19945: LIST
19946: LIST
19947: LIST
19948: LIST
19949: LIST
19950: LIST
19951: LIST
19952: LIST
19953: LIST
19954: LIST
19955: LIST
19956: LIST
19957: LIST
19958: LIST
19959: LIST
19960: LIST
19961: LIST
19962: LIST
19963: LIST
19964: LIST
19965: LIST
19966: LIST
19967: LIST
19968: LIST
19969: LIST
19970: LIST
19971: LIST
19972: LIST
19973: LIST
19974: LIST
19975: LIST
19976: LIST
19977: LIST
19978: LIST
19979: LIST
19980: LIST
19981: LIST
19982: LIST
19983: LIST
19984: LIST
19985: ST_TO_ADDR
19986: GO 19989
19988: POP
// if state > - 1 and state < 3 then
19989: LD_VAR 0 3
19993: PUSH
19994: LD_INT 1
19996: NEG
19997: GREATER
19998: PUSH
19999: LD_VAR 0 3
20003: PUSH
20004: LD_INT 3
20006: LESS
20007: AND
20008: IFFALSE 20065
// for i in result do
20010: LD_ADDR_VAR 0 5
20014: PUSH
20015: LD_VAR 0 4
20019: PUSH
20020: FOR_IN
20021: IFFALSE 20063
// if GetTech ( i , side ) <> state then
20023: LD_VAR 0 5
20027: PPUSH
20028: LD_VAR 0 1
20032: PPUSH
20033: CALL_OW 321
20037: PUSH
20038: LD_VAR 0 3
20042: NONEQUAL
20043: IFFALSE 20061
// result := result diff i ;
20045: LD_ADDR_VAR 0 4
20049: PUSH
20050: LD_VAR 0 4
20054: PUSH
20055: LD_VAR 0 5
20059: DIFF
20060: ST_TO_ADDR
20061: GO 20020
20063: POP
20064: POP
// end ;
20065: LD_VAR 0 4
20069: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
20070: LD_INT 0
20072: PPUSH
20073: PPUSH
20074: PPUSH
// result := true ;
20075: LD_ADDR_VAR 0 3
20079: PUSH
20080: LD_INT 1
20082: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
20083: LD_ADDR_VAR 0 5
20087: PUSH
20088: LD_VAR 0 2
20092: PPUSH
20093: CALL_OW 480
20097: ST_TO_ADDR
// if not tmp then
20098: LD_VAR 0 5
20102: NOT
20103: IFFALSE 20107
// exit ;
20105: GO 20156
// for i in tmp do
20107: LD_ADDR_VAR 0 4
20111: PUSH
20112: LD_VAR 0 5
20116: PUSH
20117: FOR_IN
20118: IFFALSE 20154
// if GetTech ( i , side ) <> state_researched then
20120: LD_VAR 0 4
20124: PPUSH
20125: LD_VAR 0 1
20129: PPUSH
20130: CALL_OW 321
20134: PUSH
20135: LD_INT 2
20137: NONEQUAL
20138: IFFALSE 20152
// begin result := false ;
20140: LD_ADDR_VAR 0 3
20144: PUSH
20145: LD_INT 0
20147: ST_TO_ADDR
// exit ;
20148: POP
20149: POP
20150: GO 20156
// end ;
20152: GO 20117
20154: POP
20155: POP
// end ;
20156: LD_VAR 0 3
20160: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
20161: LD_INT 0
20163: PPUSH
20164: PPUSH
20165: PPUSH
20166: PPUSH
20167: PPUSH
20168: PPUSH
20169: PPUSH
20170: PPUSH
20171: PPUSH
20172: PPUSH
20173: PPUSH
20174: PPUSH
20175: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
20176: LD_VAR 0 1
20180: NOT
20181: PUSH
20182: LD_VAR 0 1
20186: PPUSH
20187: CALL_OW 257
20191: PUSH
20192: LD_INT 9
20194: NONEQUAL
20195: OR
20196: IFFALSE 20200
// exit ;
20198: GO 20773
// side := GetSide ( unit ) ;
20200: LD_ADDR_VAR 0 9
20204: PUSH
20205: LD_VAR 0 1
20209: PPUSH
20210: CALL_OW 255
20214: ST_TO_ADDR
// tech_space := tech_spacanom ;
20215: LD_ADDR_VAR 0 12
20219: PUSH
20220: LD_INT 29
20222: ST_TO_ADDR
// tech_time := tech_taurad ;
20223: LD_ADDR_VAR 0 13
20227: PUSH
20228: LD_INT 28
20230: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
20231: LD_ADDR_VAR 0 11
20235: PUSH
20236: LD_VAR 0 1
20240: PPUSH
20241: CALL_OW 310
20245: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
20246: LD_VAR 0 11
20250: PPUSH
20251: CALL_OW 247
20255: PUSH
20256: LD_INT 2
20258: EQUAL
20259: IFFALSE 20263
// exit ;
20261: GO 20773
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
20263: LD_ADDR_VAR 0 8
20267: PUSH
20268: LD_INT 81
20270: PUSH
20271: LD_VAR 0 9
20275: PUSH
20276: EMPTY
20277: LIST
20278: LIST
20279: PUSH
20280: LD_INT 3
20282: PUSH
20283: LD_INT 21
20285: PUSH
20286: LD_INT 3
20288: PUSH
20289: EMPTY
20290: LIST
20291: LIST
20292: PUSH
20293: EMPTY
20294: LIST
20295: LIST
20296: PUSH
20297: EMPTY
20298: LIST
20299: LIST
20300: PPUSH
20301: CALL_OW 69
20305: ST_TO_ADDR
// if not tmp then
20306: LD_VAR 0 8
20310: NOT
20311: IFFALSE 20315
// exit ;
20313: GO 20773
// if in_unit then
20315: LD_VAR 0 11
20319: IFFALSE 20343
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
20321: LD_ADDR_VAR 0 10
20325: PUSH
20326: LD_VAR 0 8
20330: PPUSH
20331: LD_VAR 0 11
20335: PPUSH
20336: CALL_OW 74
20340: ST_TO_ADDR
20341: GO 20363
// enemy := NearestUnitToUnit ( tmp , unit ) ;
20343: LD_ADDR_VAR 0 10
20347: PUSH
20348: LD_VAR 0 8
20352: PPUSH
20353: LD_VAR 0 1
20357: PPUSH
20358: CALL_OW 74
20362: ST_TO_ADDR
// if not enemy then
20363: LD_VAR 0 10
20367: NOT
20368: IFFALSE 20372
// exit ;
20370: GO 20773
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
20372: LD_VAR 0 11
20376: PUSH
20377: LD_VAR 0 11
20381: PPUSH
20382: LD_VAR 0 10
20386: PPUSH
20387: CALL_OW 296
20391: PUSH
20392: LD_INT 13
20394: GREATER
20395: AND
20396: PUSH
20397: LD_VAR 0 1
20401: PPUSH
20402: LD_VAR 0 10
20406: PPUSH
20407: CALL_OW 296
20411: PUSH
20412: LD_INT 12
20414: GREATER
20415: OR
20416: IFFALSE 20420
// exit ;
20418: GO 20773
// missile := [ 1 ] ;
20420: LD_ADDR_VAR 0 14
20424: PUSH
20425: LD_INT 1
20427: PUSH
20428: EMPTY
20429: LIST
20430: ST_TO_ADDR
// if Researched ( side , tech_space ) then
20431: LD_VAR 0 9
20435: PPUSH
20436: LD_VAR 0 12
20440: PPUSH
20441: CALL_OW 325
20445: IFFALSE 20474
// missile := Insert ( missile , missile + 1 , 2 ) ;
20447: LD_ADDR_VAR 0 14
20451: PUSH
20452: LD_VAR 0 14
20456: PPUSH
20457: LD_VAR 0 14
20461: PUSH
20462: LD_INT 1
20464: PLUS
20465: PPUSH
20466: LD_INT 2
20468: PPUSH
20469: CALL_OW 2
20473: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
20474: LD_VAR 0 9
20478: PPUSH
20479: LD_VAR 0 13
20483: PPUSH
20484: CALL_OW 325
20488: PUSH
20489: LD_VAR 0 10
20493: PPUSH
20494: CALL_OW 255
20498: PPUSH
20499: LD_VAR 0 13
20503: PPUSH
20504: CALL_OW 325
20508: NOT
20509: AND
20510: IFFALSE 20539
// missile := Insert ( missile , missile + 1 , 3 ) ;
20512: LD_ADDR_VAR 0 14
20516: PUSH
20517: LD_VAR 0 14
20521: PPUSH
20522: LD_VAR 0 14
20526: PUSH
20527: LD_INT 1
20529: PLUS
20530: PPUSH
20531: LD_INT 3
20533: PPUSH
20534: CALL_OW 2
20538: ST_TO_ADDR
// if missile < 2 then
20539: LD_VAR 0 14
20543: PUSH
20544: LD_INT 2
20546: LESS
20547: IFFALSE 20551
// exit ;
20549: GO 20773
// x := GetX ( enemy ) ;
20551: LD_ADDR_VAR 0 4
20555: PUSH
20556: LD_VAR 0 10
20560: PPUSH
20561: CALL_OW 250
20565: ST_TO_ADDR
// y := GetY ( enemy ) ;
20566: LD_ADDR_VAR 0 5
20570: PUSH
20571: LD_VAR 0 10
20575: PPUSH
20576: CALL_OW 251
20580: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
20581: LD_ADDR_VAR 0 6
20585: PUSH
20586: LD_VAR 0 4
20590: PUSH
20591: LD_INT 1
20593: NEG
20594: PPUSH
20595: LD_INT 1
20597: PPUSH
20598: CALL_OW 12
20602: PLUS
20603: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
20604: LD_ADDR_VAR 0 7
20608: PUSH
20609: LD_VAR 0 5
20613: PUSH
20614: LD_INT 1
20616: NEG
20617: PPUSH
20618: LD_INT 1
20620: PPUSH
20621: CALL_OW 12
20625: PLUS
20626: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
20627: LD_VAR 0 6
20631: PPUSH
20632: LD_VAR 0 7
20636: PPUSH
20637: CALL_OW 488
20641: NOT
20642: IFFALSE 20664
// begin _x := x ;
20644: LD_ADDR_VAR 0 6
20648: PUSH
20649: LD_VAR 0 4
20653: ST_TO_ADDR
// _y := y ;
20654: LD_ADDR_VAR 0 7
20658: PUSH
20659: LD_VAR 0 5
20663: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
20664: LD_ADDR_VAR 0 3
20668: PUSH
20669: LD_INT 1
20671: PPUSH
20672: LD_VAR 0 14
20676: PPUSH
20677: CALL_OW 12
20681: ST_TO_ADDR
// case i of 1 :
20682: LD_VAR 0 3
20686: PUSH
20687: LD_INT 1
20689: DOUBLE
20690: EQUAL
20691: IFTRUE 20695
20693: GO 20712
20695: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
20696: LD_VAR 0 1
20700: PPUSH
20701: LD_VAR 0 10
20705: PPUSH
20706: CALL_OW 115
20710: GO 20773
20712: LD_INT 2
20714: DOUBLE
20715: EQUAL
20716: IFTRUE 20720
20718: GO 20742
20720: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
20721: LD_VAR 0 1
20725: PPUSH
20726: LD_VAR 0 6
20730: PPUSH
20731: LD_VAR 0 7
20735: PPUSH
20736: CALL_OW 153
20740: GO 20773
20742: LD_INT 3
20744: DOUBLE
20745: EQUAL
20746: IFTRUE 20750
20748: GO 20772
20750: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
20751: LD_VAR 0 1
20755: PPUSH
20756: LD_VAR 0 6
20760: PPUSH
20761: LD_VAR 0 7
20765: PPUSH
20766: CALL_OW 154
20770: GO 20773
20772: POP
// end ;
20773: LD_VAR 0 2
20777: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
20778: LD_INT 0
20780: PPUSH
20781: PPUSH
20782: PPUSH
20783: PPUSH
20784: PPUSH
20785: PPUSH
// if not unit or not building then
20786: LD_VAR 0 1
20790: NOT
20791: PUSH
20792: LD_VAR 0 2
20796: NOT
20797: OR
20798: IFFALSE 20802
// exit ;
20800: GO 20960
// x := GetX ( building ) ;
20802: LD_ADDR_VAR 0 5
20806: PUSH
20807: LD_VAR 0 2
20811: PPUSH
20812: CALL_OW 250
20816: ST_TO_ADDR
// y := GetY ( building ) ;
20817: LD_ADDR_VAR 0 6
20821: PUSH
20822: LD_VAR 0 2
20826: PPUSH
20827: CALL_OW 251
20831: ST_TO_ADDR
// for i = 0 to 5 do
20832: LD_ADDR_VAR 0 4
20836: PUSH
20837: DOUBLE
20838: LD_INT 0
20840: DEC
20841: ST_TO_ADDR
20842: LD_INT 5
20844: PUSH
20845: FOR_TO
20846: IFFALSE 20958
// begin _x := ShiftX ( x , i , 3 ) ;
20848: LD_ADDR_VAR 0 7
20852: PUSH
20853: LD_VAR 0 5
20857: PPUSH
20858: LD_VAR 0 4
20862: PPUSH
20863: LD_INT 3
20865: PPUSH
20866: CALL_OW 272
20870: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
20871: LD_ADDR_VAR 0 8
20875: PUSH
20876: LD_VAR 0 6
20880: PPUSH
20881: LD_VAR 0 4
20885: PPUSH
20886: LD_INT 3
20888: PPUSH
20889: CALL_OW 273
20893: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
20894: LD_VAR 0 7
20898: PPUSH
20899: LD_VAR 0 8
20903: PPUSH
20904: CALL_OW 488
20908: NOT
20909: IFFALSE 20913
// continue ;
20911: GO 20845
// if HexInfo ( _x , _y ) = 0 then
20913: LD_VAR 0 7
20917: PPUSH
20918: LD_VAR 0 8
20922: PPUSH
20923: CALL_OW 428
20927: PUSH
20928: LD_INT 0
20930: EQUAL
20931: IFFALSE 20956
// begin ComMoveXY ( unit , _x , _y ) ;
20933: LD_VAR 0 1
20937: PPUSH
20938: LD_VAR 0 7
20942: PPUSH
20943: LD_VAR 0 8
20947: PPUSH
20948: CALL_OW 111
// exit ;
20952: POP
20953: POP
20954: GO 20960
// end ; end ;
20956: GO 20845
20958: POP
20959: POP
// end ;
20960: LD_VAR 0 3
20964: RET
// export function ScanBase ( side , base_area ) ; begin
20965: LD_INT 0
20967: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
20968: LD_ADDR_VAR 0 3
20972: PUSH
20973: LD_VAR 0 2
20977: PPUSH
20978: LD_INT 81
20980: PUSH
20981: LD_VAR 0 1
20985: PUSH
20986: EMPTY
20987: LIST
20988: LIST
20989: PPUSH
20990: CALL_OW 70
20994: ST_TO_ADDR
// end ;
20995: LD_VAR 0 3
20999: RET
// export function BasicDefend ( base , solds , area ) ; var enemy , side , i , hex ; begin
21000: LD_INT 0
21002: PPUSH
21003: PPUSH
21004: PPUSH
21005: PPUSH
21006: PPUSH
// if not base or not mc_bases [ base ] or not solds or not area then
21007: LD_VAR 0 1
21011: NOT
21012: PUSH
21013: LD_EXP 36
21017: PUSH
21018: LD_VAR 0 1
21022: ARRAY
21023: NOT
21024: OR
21025: PUSH
21026: LD_VAR 0 2
21030: NOT
21031: OR
21032: PUSH
21033: LD_VAR 0 3
21037: NOT
21038: OR
21039: IFFALSE 21043
// exit ;
21041: GO 21493
// side := mc_sides [ base ] ;
21043: LD_ADDR_VAR 0 6
21047: PUSH
21048: LD_EXP 62
21052: PUSH
21053: LD_VAR 0 1
21057: ARRAY
21058: ST_TO_ADDR
// if not side then
21059: LD_VAR 0 6
21063: NOT
21064: IFFALSE 21068
// exit ;
21066: GO 21493
// for i in solds do
21068: LD_ADDR_VAR 0 7
21072: PUSH
21073: LD_VAR 0 2
21077: PUSH
21078: FOR_IN
21079: IFFALSE 21140
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
21081: LD_VAR 0 7
21085: PPUSH
21086: CALL_OW 310
21090: PPUSH
21091: CALL_OW 266
21095: PUSH
21096: LD_INT 32
21098: PUSH
21099: LD_INT 31
21101: PUSH
21102: EMPTY
21103: LIST
21104: LIST
21105: IN
21106: IFFALSE 21126
// solds := solds diff i else
21108: LD_ADDR_VAR 0 2
21112: PUSH
21113: LD_VAR 0 2
21117: PUSH
21118: LD_VAR 0 7
21122: DIFF
21123: ST_TO_ADDR
21124: GO 21138
// SetTag ( i , 18 ) ;
21126: LD_VAR 0 7
21130: PPUSH
21131: LD_INT 18
21133: PPUSH
21134: CALL_OW 109
21138: GO 21078
21140: POP
21141: POP
// if not solds then
21142: LD_VAR 0 2
21146: NOT
21147: IFFALSE 21151
// exit ;
21149: GO 21493
// repeat wait ( 0 0$1 ) ;
21151: LD_INT 35
21153: PPUSH
21154: CALL_OW 67
// enemy := ScanBase ( side , area ) ;
21158: LD_ADDR_VAR 0 5
21162: PUSH
21163: LD_VAR 0 6
21167: PPUSH
21168: LD_VAR 0 3
21172: PPUSH
21173: CALL 20965 0 2
21177: ST_TO_ADDR
// if not enemy or enemy > 3 or mc_defender [ base ] then
21178: LD_VAR 0 5
21182: NOT
21183: PUSH
21184: LD_VAR 0 5
21188: PUSH
21189: LD_INT 3
21191: GREATER
21192: OR
21193: PUSH
21194: LD_EXP 58
21198: PUSH
21199: LD_VAR 0 1
21203: ARRAY
21204: OR
21205: IFFALSE 21246
// begin for i in solds do
21207: LD_ADDR_VAR 0 7
21211: PUSH
21212: LD_VAR 0 2
21216: PUSH
21217: FOR_IN
21218: IFFALSE 21242
// if HasTask ( i ) then
21220: LD_VAR 0 7
21224: PPUSH
21225: CALL_OW 314
21229: IFFALSE 21240
// ComStop ( i ) ;
21231: LD_VAR 0 7
21235: PPUSH
21236: CALL_OW 141
21240: GO 21217
21242: POP
21243: POP
// break ;
21244: GO 21481
// end ; for i in solds do
21246: LD_ADDR_VAR 0 7
21250: PUSH
21251: LD_VAR 0 2
21255: PUSH
21256: FOR_IN
21257: IFFALSE 21473
// begin if IsInUnit ( i ) then
21259: LD_VAR 0 7
21263: PPUSH
21264: CALL_OW 310
21268: IFFALSE 21279
// ComExitBuilding ( i ) ;
21270: LD_VAR 0 7
21274: PPUSH
21275: CALL_OW 122
// if GetLives ( i ) > 333 then
21279: LD_VAR 0 7
21283: PPUSH
21284: CALL_OW 256
21288: PUSH
21289: LD_INT 333
21291: GREATER
21292: IFFALSE 21320
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
21294: LD_VAR 0 7
21298: PPUSH
21299: LD_VAR 0 5
21303: PPUSH
21304: LD_VAR 0 7
21308: PPUSH
21309: CALL_OW 74
21313: PPUSH
21314: CALL_OW 115
21318: GO 21471
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
21320: LD_ADDR_VAR 0 8
21324: PUSH
21325: LD_EXP 36
21329: PUSH
21330: LD_VAR 0 1
21334: ARRAY
21335: PPUSH
21336: LD_INT 2
21338: PUSH
21339: LD_INT 30
21341: PUSH
21342: LD_INT 0
21344: PUSH
21345: EMPTY
21346: LIST
21347: LIST
21348: PUSH
21349: LD_INT 30
21351: PUSH
21352: LD_INT 1
21354: PUSH
21355: EMPTY
21356: LIST
21357: LIST
21358: PUSH
21359: LD_INT 30
21361: PUSH
21362: LD_INT 6
21364: PUSH
21365: EMPTY
21366: LIST
21367: LIST
21368: PUSH
21369: EMPTY
21370: LIST
21371: LIST
21372: LIST
21373: LIST
21374: PPUSH
21375: CALL_OW 72
21379: PPUSH
21380: LD_VAR 0 7
21384: PPUSH
21385: CALL_OW 74
21389: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
21390: LD_VAR 0 7
21394: PPUSH
21395: LD_VAR 0 8
21399: PPUSH
21400: CALL_OW 250
21404: PPUSH
21405: LD_INT 3
21407: PPUSH
21408: LD_INT 5
21410: PPUSH
21411: CALL_OW 272
21415: PPUSH
21416: LD_VAR 0 8
21420: PPUSH
21421: CALL_OW 251
21425: PPUSH
21426: LD_INT 3
21428: PPUSH
21429: LD_INT 5
21431: PPUSH
21432: CALL_OW 273
21436: PPUSH
21437: CALL_OW 111
// SetTag ( i , 0 ) ;
21441: LD_VAR 0 7
21445: PPUSH
21446: LD_INT 0
21448: PPUSH
21449: CALL_OW 109
// solds := solds diff i ;
21453: LD_ADDR_VAR 0 2
21457: PUSH
21458: LD_VAR 0 2
21462: PUSH
21463: LD_VAR 0 7
21467: DIFF
21468: ST_TO_ADDR
// continue ;
21469: GO 21256
// end ; end ;
21471: GO 21256
21473: POP
21474: POP
// until solds ;
21475: LD_VAR 0 2
21479: IFFALSE 21151
// MC_Reset ( base , 18 ) ;
21481: LD_VAR 0 1
21485: PPUSH
21486: LD_INT 18
21488: PPUSH
21489: CALL 66173 0 2
// end ;
21493: LD_VAR 0 4
21497: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
21498: LD_INT 0
21500: PPUSH
21501: PPUSH
21502: PPUSH
21503: PPUSH
21504: PPUSH
21505: PPUSH
21506: PPUSH
21507: PPUSH
21508: PPUSH
21509: PPUSH
21510: PPUSH
21511: PPUSH
21512: PPUSH
21513: PPUSH
21514: PPUSH
21515: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
21516: LD_ADDR_VAR 0 12
21520: PUSH
21521: LD_EXP 36
21525: PUSH
21526: LD_VAR 0 1
21530: ARRAY
21531: PPUSH
21532: LD_INT 25
21534: PUSH
21535: LD_INT 3
21537: PUSH
21538: EMPTY
21539: LIST
21540: LIST
21541: PPUSH
21542: CALL_OW 72
21546: ST_TO_ADDR
// if mc_remote_driver [ base ] then
21547: LD_EXP 76
21551: PUSH
21552: LD_VAR 0 1
21556: ARRAY
21557: IFFALSE 21581
// mechs := mechs diff mc_remote_driver [ base ] ;
21559: LD_ADDR_VAR 0 12
21563: PUSH
21564: LD_VAR 0 12
21568: PUSH
21569: LD_EXP 76
21573: PUSH
21574: LD_VAR 0 1
21578: ARRAY
21579: DIFF
21580: ST_TO_ADDR
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
21581: LD_ADDR_VAR 0 8
21585: PUSH
21586: LD_EXP 36
21590: PUSH
21591: LD_VAR 0 1
21595: ARRAY
21596: PPUSH
21597: LD_INT 2
21599: PUSH
21600: LD_INT 25
21602: PUSH
21603: LD_INT 1
21605: PUSH
21606: EMPTY
21607: LIST
21608: LIST
21609: PUSH
21610: LD_INT 25
21612: PUSH
21613: LD_INT 5
21615: PUSH
21616: EMPTY
21617: LIST
21618: LIST
21619: PUSH
21620: LD_INT 25
21622: PUSH
21623: LD_INT 8
21625: PUSH
21626: EMPTY
21627: LIST
21628: LIST
21629: PUSH
21630: LD_INT 25
21632: PUSH
21633: LD_INT 9
21635: PUSH
21636: EMPTY
21637: LIST
21638: LIST
21639: PUSH
21640: EMPTY
21641: LIST
21642: LIST
21643: LIST
21644: LIST
21645: LIST
21646: PPUSH
21647: CALL_OW 72
21651: ST_TO_ADDR
// if not defenders and not solds then
21652: LD_VAR 0 2
21656: NOT
21657: PUSH
21658: LD_VAR 0 8
21662: NOT
21663: AND
21664: IFFALSE 21668
// exit ;
21666: GO 23042
// depot_under_attack := false ;
21668: LD_ADDR_VAR 0 16
21672: PUSH
21673: LD_INT 0
21675: ST_TO_ADDR
// sold_defenders := [ ] ;
21676: LD_ADDR_VAR 0 17
21680: PUSH
21681: EMPTY
21682: ST_TO_ADDR
// if mechs then
21683: LD_VAR 0 12
21687: IFFALSE 21816
// for i in defenders do
21689: LD_ADDR_VAR 0 5
21693: PUSH
21694: LD_VAR 0 2
21698: PUSH
21699: FOR_IN
21700: IFFALSE 21814
// begin SetTag ( i , 20 ) ;
21702: LD_VAR 0 5
21706: PPUSH
21707: LD_INT 20
21709: PPUSH
21710: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
21714: LD_VAR 0 5
21718: PPUSH
21719: CALL_OW 263
21723: PUSH
21724: LD_INT 1
21726: EQUAL
21727: PUSH
21728: LD_VAR 0 5
21732: PPUSH
21733: CALL_OW 311
21737: NOT
21738: AND
21739: PUSH
21740: LD_VAR 0 12
21744: AND
21745: IFFALSE 21812
// begin un := mechs [ 1 ] ;
21747: LD_ADDR_VAR 0 10
21751: PUSH
21752: LD_VAR 0 12
21756: PUSH
21757: LD_INT 1
21759: ARRAY
21760: ST_TO_ADDR
// ComExitBuilding ( un ) ;
21761: LD_VAR 0 10
21765: PPUSH
21766: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
21770: LD_VAR 0 10
21774: PPUSH
21775: LD_VAR 0 5
21779: PPUSH
21780: CALL_OW 180
// SetTag ( un , 19 ) ;
21784: LD_VAR 0 10
21788: PPUSH
21789: LD_INT 19
21791: PPUSH
21792: CALL_OW 109
// mechs := mechs diff un ;
21796: LD_ADDR_VAR 0 12
21800: PUSH
21801: LD_VAR 0 12
21805: PUSH
21806: LD_VAR 0 10
21810: DIFF
21811: ST_TO_ADDR
// end ; end ;
21812: GO 21699
21814: POP
21815: POP
// if solds then
21816: LD_VAR 0 8
21820: IFFALSE 21879
// for i in solds do
21822: LD_ADDR_VAR 0 5
21826: PUSH
21827: LD_VAR 0 8
21831: PUSH
21832: FOR_IN
21833: IFFALSE 21877
// if not GetTag ( i ) then
21835: LD_VAR 0 5
21839: PPUSH
21840: CALL_OW 110
21844: NOT
21845: IFFALSE 21875
// begin defenders := defenders union i ;
21847: LD_ADDR_VAR 0 2
21851: PUSH
21852: LD_VAR 0 2
21856: PUSH
21857: LD_VAR 0 5
21861: UNION
21862: ST_TO_ADDR
// SetTag ( i , 18 ) ;
21863: LD_VAR 0 5
21867: PPUSH
21868: LD_INT 18
21870: PPUSH
21871: CALL_OW 109
// end ;
21875: GO 21832
21877: POP
21878: POP
// repeat wait ( 0 0$1 ) ;
21879: LD_INT 35
21881: PPUSH
21882: CALL_OW 67
// enemy := mc_scan [ base ] ;
21886: LD_ADDR_VAR 0 3
21890: PUSH
21891: LD_EXP 59
21895: PUSH
21896: LD_VAR 0 1
21900: ARRAY
21901: ST_TO_ADDR
// for i in defenders do
21902: LD_ADDR_VAR 0 5
21906: PUSH
21907: LD_VAR 0 2
21911: PUSH
21912: FOR_IN
21913: IFFALSE 22643
// begin e := NearestUnitToUnit ( enemy , i ) ;
21915: LD_ADDR_VAR 0 13
21919: PUSH
21920: LD_VAR 0 3
21924: PPUSH
21925: LD_VAR 0 5
21929: PPUSH
21930: CALL_OW 74
21934: ST_TO_ADDR
// depot_under_attack := ( not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) or GetLives ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ) < 600 ) ;
21935: LD_ADDR_VAR 0 16
21939: PUSH
21940: LD_EXP 36
21944: PUSH
21945: LD_VAR 0 1
21949: ARRAY
21950: PPUSH
21951: LD_INT 2
21953: PUSH
21954: LD_INT 30
21956: PUSH
21957: LD_INT 0
21959: PUSH
21960: EMPTY
21961: LIST
21962: LIST
21963: PUSH
21964: LD_INT 30
21966: PUSH
21967: LD_INT 1
21969: PUSH
21970: EMPTY
21971: LIST
21972: LIST
21973: PUSH
21974: EMPTY
21975: LIST
21976: LIST
21977: LIST
21978: PPUSH
21979: CALL_OW 72
21983: NOT
21984: PUSH
21985: LD_EXP 36
21989: PUSH
21990: LD_VAR 0 1
21994: ARRAY
21995: PPUSH
21996: LD_INT 2
21998: PUSH
21999: LD_INT 30
22001: PUSH
22002: LD_INT 0
22004: PUSH
22005: EMPTY
22006: LIST
22007: LIST
22008: PUSH
22009: LD_INT 30
22011: PUSH
22012: LD_INT 1
22014: PUSH
22015: EMPTY
22016: LIST
22017: LIST
22018: PUSH
22019: EMPTY
22020: LIST
22021: LIST
22022: LIST
22023: PPUSH
22024: CALL_OW 72
22028: PPUSH
22029: CALL_OW 256
22033: PUSH
22034: LD_INT 600
22036: LESS
22037: OR
22038: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
22039: LD_VAR 0 5
22043: PPUSH
22044: CALL_OW 247
22048: PUSH
22049: LD_INT 2
22051: DOUBLE
22052: EQUAL
22053: IFTRUE 22057
22055: GO 22349
22057: POP
// begin if GetLives ( i ) > 650 and ( GetDistUnits ( i , e ) < 40 or IsInArea ( e , mc_scan_area [ base ] ) ) then
22058: LD_VAR 0 5
22062: PPUSH
22063: CALL_OW 256
22067: PUSH
22068: LD_INT 650
22070: GREATER
22071: PUSH
22072: LD_VAR 0 5
22076: PPUSH
22077: LD_VAR 0 13
22081: PPUSH
22082: CALL_OW 296
22086: PUSH
22087: LD_INT 40
22089: LESS
22090: PUSH
22091: LD_VAR 0 13
22095: PPUSH
22096: LD_EXP 61
22100: PUSH
22101: LD_VAR 0 1
22105: ARRAY
22106: PPUSH
22107: CALL_OW 308
22111: OR
22112: AND
22113: IFFALSE 22131
// ComAttackUnit ( i , e ) else
22115: LD_VAR 0 5
22119: PPUSH
22120: LD_VAR 0 13
22124: PPUSH
22125: CALL_OW 115
22129: GO 22232
// if ( ( not IsInArea ( e , mc_scan_area [ base ] ) and GetDistUnits ( i , e ) >= 40 ) or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
22131: LD_VAR 0 13
22135: PPUSH
22136: LD_EXP 61
22140: PUSH
22141: LD_VAR 0 1
22145: ARRAY
22146: PPUSH
22147: CALL_OW 308
22151: NOT
22152: PUSH
22153: LD_VAR 0 5
22157: PPUSH
22158: LD_VAR 0 13
22162: PPUSH
22163: CALL_OW 296
22167: PUSH
22168: LD_INT 40
22170: GREATEREQUAL
22171: AND
22172: PUSH
22173: LD_VAR 0 5
22177: PPUSH
22178: CALL_OW 256
22182: PUSH
22183: LD_INT 650
22185: LESSEQUAL
22186: OR
22187: PUSH
22188: LD_VAR 0 5
22192: PPUSH
22193: LD_EXP 60
22197: PUSH
22198: LD_VAR 0 1
22202: ARRAY
22203: PPUSH
22204: CALL_OW 308
22208: NOT
22209: AND
22210: IFFALSE 22232
// ComMoveToArea ( i , mc_parking [ base ] ) ;
22212: LD_VAR 0 5
22216: PPUSH
22217: LD_EXP 60
22221: PUSH
22222: LD_VAR 0 1
22226: ARRAY
22227: PPUSH
22228: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
22232: LD_VAR 0 5
22236: PPUSH
22237: CALL_OW 256
22241: PUSH
22242: LD_INT 998
22244: LESS
22245: PUSH
22246: LD_VAR 0 5
22250: PPUSH
22251: CALL_OW 263
22255: PUSH
22256: LD_INT 1
22258: EQUAL
22259: AND
22260: PUSH
22261: LD_VAR 0 5
22265: PPUSH
22266: CALL_OW 311
22270: AND
22271: PUSH
22272: LD_VAR 0 5
22276: PPUSH
22277: LD_EXP 60
22281: PUSH
22282: LD_VAR 0 1
22286: ARRAY
22287: PPUSH
22288: CALL_OW 308
22292: AND
22293: IFFALSE 22347
// begin mech := IsDrivenBy ( i ) ;
22295: LD_ADDR_VAR 0 9
22299: PUSH
22300: LD_VAR 0 5
22304: PPUSH
22305: CALL_OW 311
22309: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
22310: LD_VAR 0 9
22314: PPUSH
22315: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
22319: LD_VAR 0 9
22323: PPUSH
22324: LD_VAR 0 5
22328: PPUSH
22329: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
22333: LD_VAR 0 9
22337: PPUSH
22338: LD_VAR 0 5
22342: PPUSH
22343: CALL_OW 180
// end ; end ; unit_human :
22347: GO 22614
22349: LD_INT 1
22351: DOUBLE
22352: EQUAL
22353: IFTRUE 22357
22355: GO 22613
22357: POP
// begin b := IsInUnit ( i ) ;
22358: LD_ADDR_VAR 0 18
22362: PUSH
22363: LD_VAR 0 5
22367: PPUSH
22368: CALL_OW 310
22372: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
22373: LD_ADDR_VAR 0 19
22377: PUSH
22378: LD_VAR 0 18
22382: NOT
22383: PUSH
22384: LD_VAR 0 18
22388: PPUSH
22389: CALL_OW 266
22393: PUSH
22394: LD_INT 32
22396: PUSH
22397: LD_INT 31
22399: PUSH
22400: EMPTY
22401: LIST
22402: LIST
22403: IN
22404: OR
22405: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
22406: LD_VAR 0 16
22410: PUSH
22411: LD_VAR 0 2
22415: PPUSH
22416: LD_INT 21
22418: PUSH
22419: LD_INT 2
22421: PUSH
22422: EMPTY
22423: LIST
22424: LIST
22425: PPUSH
22426: CALL_OW 72
22430: PUSH
22431: LD_INT 1
22433: LESSEQUAL
22434: OR
22435: PUSH
22436: LD_VAR 0 19
22440: AND
22441: PUSH
22442: LD_VAR 0 5
22446: PUSH
22447: LD_VAR 0 17
22451: IN
22452: NOT
22453: AND
22454: IFFALSE 22547
// begin if b then
22456: LD_VAR 0 18
22460: IFFALSE 22509
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
22462: LD_VAR 0 18
22466: PPUSH
22467: LD_VAR 0 3
22471: PPUSH
22472: LD_VAR 0 18
22476: PPUSH
22477: CALL_OW 74
22481: PPUSH
22482: CALL_OW 296
22486: PUSH
22487: LD_INT 10
22489: LESS
22490: PUSH
22491: LD_VAR 0 18
22495: PPUSH
22496: CALL_OW 461
22500: PUSH
22501: LD_INT 7
22503: NONEQUAL
22504: AND
22505: IFFALSE 22509
// continue ;
22507: GO 21912
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
22509: LD_ADDR_VAR 0 17
22513: PUSH
22514: LD_VAR 0 17
22518: PPUSH
22519: LD_VAR 0 17
22523: PUSH
22524: LD_INT 1
22526: PLUS
22527: PPUSH
22528: LD_VAR 0 5
22532: PPUSH
22533: CALL_OW 1
22537: ST_TO_ADDR
// ComExitBuilding ( i ) ;
22538: LD_VAR 0 5
22542: PPUSH
22543: CALL_OW 122
// end ; if sold_defenders then
22547: LD_VAR 0 17
22551: IFFALSE 22611
// if i in sold_defenders then
22553: LD_VAR 0 5
22557: PUSH
22558: LD_VAR 0 17
22562: IN
22563: IFFALSE 22611
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
22565: LD_VAR 0 5
22569: PPUSH
22570: CALL_OW 314
22574: NOT
22575: PUSH
22576: LD_VAR 0 5
22580: PPUSH
22581: LD_VAR 0 13
22585: PPUSH
22586: CALL_OW 296
22590: PUSH
22591: LD_INT 30
22593: LESS
22594: AND
22595: IFFALSE 22611
// ComAttackUnit ( i , e ) ;
22597: LD_VAR 0 5
22601: PPUSH
22602: LD_VAR 0 13
22606: PPUSH
22607: CALL_OW 115
// end ; end ; end ;
22611: GO 22614
22613: POP
// if IsDead ( i ) then
22614: LD_VAR 0 5
22618: PPUSH
22619: CALL_OW 301
22623: IFFALSE 22641
// defenders := defenders diff i ;
22625: LD_ADDR_VAR 0 2
22629: PUSH
22630: LD_VAR 0 2
22634: PUSH
22635: LD_VAR 0 5
22639: DIFF
22640: ST_TO_ADDR
// end ;
22641: GO 21912
22643: POP
22644: POP
// until not enemy or not defenders ;
22645: LD_VAR 0 3
22649: NOT
22650: PUSH
22651: LD_VAR 0 2
22655: NOT
22656: OR
22657: IFFALSE 21879
// MC_Reset ( base , 18 ) ;
22659: LD_VAR 0 1
22663: PPUSH
22664: LD_INT 18
22666: PPUSH
22667: CALL 66173 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
22671: LD_ADDR_VAR 0 2
22675: PUSH
22676: LD_VAR 0 2
22680: PUSH
22681: LD_VAR 0 2
22685: PPUSH
22686: LD_INT 2
22688: PUSH
22689: LD_INT 25
22691: PUSH
22692: LD_INT 1
22694: PUSH
22695: EMPTY
22696: LIST
22697: LIST
22698: PUSH
22699: LD_INT 25
22701: PUSH
22702: LD_INT 5
22704: PUSH
22705: EMPTY
22706: LIST
22707: LIST
22708: PUSH
22709: LD_INT 25
22711: PUSH
22712: LD_INT 8
22714: PUSH
22715: EMPTY
22716: LIST
22717: LIST
22718: PUSH
22719: LD_INT 25
22721: PUSH
22722: LD_INT 9
22724: PUSH
22725: EMPTY
22726: LIST
22727: LIST
22728: PUSH
22729: EMPTY
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: PPUSH
22736: CALL_OW 72
22740: DIFF
22741: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
22742: LD_VAR 0 3
22746: NOT
22747: PUSH
22748: LD_VAR 0 2
22752: PPUSH
22753: LD_INT 21
22755: PUSH
22756: LD_INT 2
22758: PUSH
22759: EMPTY
22760: LIST
22761: LIST
22762: PPUSH
22763: CALL_OW 72
22767: AND
22768: IFFALSE 23030
// begin tmp := FilterByTag ( defenders , 19 ) ;
22770: LD_ADDR_VAR 0 11
22774: PUSH
22775: LD_VAR 0 2
22779: PPUSH
22780: LD_INT 19
22782: PPUSH
22783: CALL 59471 0 2
22787: ST_TO_ADDR
// if tmp then
22788: LD_VAR 0 11
22792: IFFALSE 22862
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
22794: LD_ADDR_VAR 0 11
22798: PUSH
22799: LD_VAR 0 11
22803: PPUSH
22804: LD_INT 25
22806: PUSH
22807: LD_INT 3
22809: PUSH
22810: EMPTY
22811: LIST
22812: LIST
22813: PPUSH
22814: CALL_OW 72
22818: ST_TO_ADDR
// if tmp then
22819: LD_VAR 0 11
22823: IFFALSE 22862
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
22825: LD_ADDR_EXP 48
22829: PUSH
22830: LD_EXP 48
22834: PPUSH
22835: LD_VAR 0 1
22839: PPUSH
22840: LD_EXP 48
22844: PUSH
22845: LD_VAR 0 1
22849: ARRAY
22850: PUSH
22851: LD_VAR 0 11
22855: UNION
22856: PPUSH
22857: CALL_OW 1
22861: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
22862: LD_VAR 0 1
22866: PPUSH
22867: LD_INT 19
22869: PPUSH
22870: CALL 66173 0 2
// repeat wait ( 0 0$1 ) ;
22874: LD_INT 35
22876: PPUSH
22877: CALL_OW 67
// for i in defenders do
22881: LD_ADDR_VAR 0 5
22885: PUSH
22886: LD_VAR 0 2
22890: PUSH
22891: FOR_IN
22892: IFFALSE 22981
// begin if not IsInArea ( i , mc_parking [ base ] ) then
22894: LD_VAR 0 5
22898: PPUSH
22899: LD_EXP 60
22903: PUSH
22904: LD_VAR 0 1
22908: ARRAY
22909: PPUSH
22910: CALL_OW 308
22914: NOT
22915: IFFALSE 22939
// ComMoveToArea ( i , mc_parking [ base ] ) else
22917: LD_VAR 0 5
22921: PPUSH
22922: LD_EXP 60
22926: PUSH
22927: LD_VAR 0 1
22931: ARRAY
22932: PPUSH
22933: CALL_OW 113
22937: GO 22979
// if GetControl ( i ) = control_manual then
22939: LD_VAR 0 5
22943: PPUSH
22944: CALL_OW 263
22948: PUSH
22949: LD_INT 1
22951: EQUAL
22952: IFFALSE 22979
// if IsDrivenBy ( i ) then
22954: LD_VAR 0 5
22958: PPUSH
22959: CALL_OW 311
22963: IFFALSE 22979
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
22965: LD_VAR 0 5
22969: PPUSH
22970: CALL_OW 311
22974: PPUSH
22975: CALL_OW 121
// end ;
22979: GO 22891
22981: POP
22982: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] ;
22983: LD_VAR 0 2
22987: PPUSH
22988: LD_INT 95
22990: PUSH
22991: LD_EXP 60
22995: PUSH
22996: LD_VAR 0 1
23000: ARRAY
23001: PUSH
23002: EMPTY
23003: LIST
23004: LIST
23005: PPUSH
23006: CALL_OW 72
23010: PUSH
23011: LD_VAR 0 2
23015: EQUAL
23016: PUSH
23017: LD_EXP 59
23021: PUSH
23022: LD_VAR 0 1
23026: ARRAY
23027: OR
23028: IFFALSE 22874
// end ; MC_Reset ( base , 20 ) ;
23030: LD_VAR 0 1
23034: PPUSH
23035: LD_INT 20
23037: PPUSH
23038: CALL 66173 0 2
// end ;
23042: LD_VAR 0 4
23046: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
23047: LD_INT 0
23049: PPUSH
23050: PPUSH
23051: PPUSH
23052: PPUSH
// result := false ;
23053: LD_ADDR_VAR 0 2
23057: PUSH
23058: LD_INT 0
23060: ST_TO_ADDR
// side := GetSide ( unit ) ;
23061: LD_ADDR_VAR 0 3
23065: PUSH
23066: LD_VAR 0 1
23070: PPUSH
23071: CALL_OW 255
23075: ST_TO_ADDR
// nat := GetNation ( unit ) ;
23076: LD_ADDR_VAR 0 4
23080: PUSH
23081: LD_VAR 0 1
23085: PPUSH
23086: CALL_OW 248
23090: ST_TO_ADDR
// case nat of 1 :
23091: LD_VAR 0 4
23095: PUSH
23096: LD_INT 1
23098: DOUBLE
23099: EQUAL
23100: IFTRUE 23104
23102: GO 23115
23104: POP
// tech := tech_lassight ; 2 :
23105: LD_ADDR_VAR 0 5
23109: PUSH
23110: LD_INT 12
23112: ST_TO_ADDR
23113: GO 23154
23115: LD_INT 2
23117: DOUBLE
23118: EQUAL
23119: IFTRUE 23123
23121: GO 23134
23123: POP
// tech := tech_mortar ; 3 :
23124: LD_ADDR_VAR 0 5
23128: PUSH
23129: LD_INT 41
23131: ST_TO_ADDR
23132: GO 23154
23134: LD_INT 3
23136: DOUBLE
23137: EQUAL
23138: IFTRUE 23142
23140: GO 23153
23142: POP
// tech := tech_bazooka ; end ;
23143: LD_ADDR_VAR 0 5
23147: PUSH
23148: LD_INT 44
23150: ST_TO_ADDR
23151: GO 23154
23153: POP
// if Researched ( side , tech ) then
23154: LD_VAR 0 3
23158: PPUSH
23159: LD_VAR 0 5
23163: PPUSH
23164: CALL_OW 325
23168: IFFALSE 23195
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
23170: LD_ADDR_VAR 0 2
23174: PUSH
23175: LD_INT 5
23177: PUSH
23178: LD_INT 8
23180: PUSH
23181: LD_INT 9
23183: PUSH
23184: EMPTY
23185: LIST
23186: LIST
23187: LIST
23188: PUSH
23189: LD_VAR 0 4
23193: ARRAY
23194: ST_TO_ADDR
// end ;
23195: LD_VAR 0 2
23199: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
23200: LD_INT 0
23202: PPUSH
23203: PPUSH
23204: PPUSH
// if not mines then
23205: LD_VAR 0 2
23209: NOT
23210: IFFALSE 23214
// exit ;
23212: GO 23358
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23214: LD_ADDR_VAR 0 5
23218: PUSH
23219: LD_INT 81
23221: PUSH
23222: LD_VAR 0 1
23226: PUSH
23227: EMPTY
23228: LIST
23229: LIST
23230: PUSH
23231: LD_INT 3
23233: PUSH
23234: LD_INT 21
23236: PUSH
23237: LD_INT 3
23239: PUSH
23240: EMPTY
23241: LIST
23242: LIST
23243: PUSH
23244: EMPTY
23245: LIST
23246: LIST
23247: PUSH
23248: EMPTY
23249: LIST
23250: LIST
23251: PPUSH
23252: CALL_OW 69
23256: ST_TO_ADDR
// for i in mines do
23257: LD_ADDR_VAR 0 4
23261: PUSH
23262: LD_VAR 0 2
23266: PUSH
23267: FOR_IN
23268: IFFALSE 23356
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
23270: LD_VAR 0 4
23274: PUSH
23275: LD_INT 1
23277: ARRAY
23278: PPUSH
23279: LD_VAR 0 4
23283: PUSH
23284: LD_INT 2
23286: ARRAY
23287: PPUSH
23288: CALL_OW 458
23292: NOT
23293: IFFALSE 23297
// continue ;
23295: GO 23267
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
23297: LD_VAR 0 4
23301: PUSH
23302: LD_INT 1
23304: ARRAY
23305: PPUSH
23306: LD_VAR 0 4
23310: PUSH
23311: LD_INT 2
23313: ARRAY
23314: PPUSH
23315: CALL_OW 428
23319: PUSH
23320: LD_VAR 0 5
23324: IN
23325: IFFALSE 23354
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
23327: LD_VAR 0 4
23331: PUSH
23332: LD_INT 1
23334: ARRAY
23335: PPUSH
23336: LD_VAR 0 4
23340: PUSH
23341: LD_INT 2
23343: ARRAY
23344: PPUSH
23345: LD_VAR 0 1
23349: PPUSH
23350: CALL_OW 456
// end ;
23354: GO 23267
23356: POP
23357: POP
// end ;
23358: LD_VAR 0 3
23362: RET
// export function Count ( array ) ; var i ; begin
23363: LD_INT 0
23365: PPUSH
23366: PPUSH
// result := 0 ;
23367: LD_ADDR_VAR 0 2
23371: PUSH
23372: LD_INT 0
23374: ST_TO_ADDR
// for i in array do
23375: LD_ADDR_VAR 0 3
23379: PUSH
23380: LD_VAR 0 1
23384: PUSH
23385: FOR_IN
23386: IFFALSE 23410
// if i then
23388: LD_VAR 0 3
23392: IFFALSE 23408
// result := result + 1 ;
23394: LD_ADDR_VAR 0 2
23398: PUSH
23399: LD_VAR 0 2
23403: PUSH
23404: LD_INT 1
23406: PLUS
23407: ST_TO_ADDR
23408: GO 23385
23410: POP
23411: POP
// end ;
23412: LD_VAR 0 2
23416: RET
// export function IsEmpty ( building ) ; begin
23417: LD_INT 0
23419: PPUSH
// if not building then
23420: LD_VAR 0 1
23424: NOT
23425: IFFALSE 23429
// exit ;
23427: GO 23472
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
23429: LD_ADDR_VAR 0 2
23433: PUSH
23434: LD_VAR 0 1
23438: PUSH
23439: LD_INT 22
23441: PUSH
23442: LD_VAR 0 1
23446: PPUSH
23447: CALL_OW 255
23451: PUSH
23452: EMPTY
23453: LIST
23454: LIST
23455: PUSH
23456: LD_INT 58
23458: PUSH
23459: EMPTY
23460: LIST
23461: PUSH
23462: EMPTY
23463: LIST
23464: LIST
23465: PPUSH
23466: CALL_OW 69
23470: IN
23471: ST_TO_ADDR
// end ;
23472: LD_VAR 0 2
23476: RET
// export function IsNotFull ( building ) ; begin
23477: LD_INT 0
23479: PPUSH
// if not building then
23480: LD_VAR 0 1
23484: NOT
23485: IFFALSE 23489
// exit ;
23487: GO 23508
// result := UnitsInside ( building ) < 6 ;
23489: LD_ADDR_VAR 0 2
23493: PUSH
23494: LD_VAR 0 1
23498: PPUSH
23499: CALL_OW 313
23503: PUSH
23504: LD_INT 6
23506: LESS
23507: ST_TO_ADDR
// end ;
23508: LD_VAR 0 2
23512: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
23513: LD_INT 0
23515: PPUSH
23516: PPUSH
23517: PPUSH
23518: PPUSH
// tmp := [ ] ;
23519: LD_ADDR_VAR 0 3
23523: PUSH
23524: EMPTY
23525: ST_TO_ADDR
// list := [ ] ;
23526: LD_ADDR_VAR 0 5
23530: PUSH
23531: EMPTY
23532: ST_TO_ADDR
// for i = 16 to 25 do
23533: LD_ADDR_VAR 0 4
23537: PUSH
23538: DOUBLE
23539: LD_INT 16
23541: DEC
23542: ST_TO_ADDR
23543: LD_INT 25
23545: PUSH
23546: FOR_TO
23547: IFFALSE 23620
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
23549: LD_ADDR_VAR 0 3
23553: PUSH
23554: LD_VAR 0 3
23558: PUSH
23559: LD_INT 22
23561: PUSH
23562: LD_VAR 0 1
23566: PPUSH
23567: CALL_OW 255
23571: PUSH
23572: EMPTY
23573: LIST
23574: LIST
23575: PUSH
23576: LD_INT 91
23578: PUSH
23579: LD_VAR 0 1
23583: PUSH
23584: LD_INT 6
23586: PUSH
23587: EMPTY
23588: LIST
23589: LIST
23590: LIST
23591: PUSH
23592: LD_INT 30
23594: PUSH
23595: LD_VAR 0 4
23599: PUSH
23600: EMPTY
23601: LIST
23602: LIST
23603: PUSH
23604: EMPTY
23605: LIST
23606: LIST
23607: LIST
23608: PUSH
23609: EMPTY
23610: LIST
23611: PPUSH
23612: CALL_OW 69
23616: ADD
23617: ST_TO_ADDR
23618: GO 23546
23620: POP
23621: POP
// for i = 1 to tmp do
23622: LD_ADDR_VAR 0 4
23626: PUSH
23627: DOUBLE
23628: LD_INT 1
23630: DEC
23631: ST_TO_ADDR
23632: LD_VAR 0 3
23636: PUSH
23637: FOR_TO
23638: IFFALSE 23726
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
23640: LD_ADDR_VAR 0 5
23644: PUSH
23645: LD_VAR 0 5
23649: PUSH
23650: LD_VAR 0 3
23654: PUSH
23655: LD_VAR 0 4
23659: ARRAY
23660: PPUSH
23661: CALL_OW 266
23665: PUSH
23666: LD_VAR 0 3
23670: PUSH
23671: LD_VAR 0 4
23675: ARRAY
23676: PPUSH
23677: CALL_OW 250
23681: PUSH
23682: LD_VAR 0 3
23686: PUSH
23687: LD_VAR 0 4
23691: ARRAY
23692: PPUSH
23693: CALL_OW 251
23697: PUSH
23698: LD_VAR 0 3
23702: PUSH
23703: LD_VAR 0 4
23707: ARRAY
23708: PPUSH
23709: CALL_OW 254
23713: PUSH
23714: EMPTY
23715: LIST
23716: LIST
23717: LIST
23718: LIST
23719: PUSH
23720: EMPTY
23721: LIST
23722: ADD
23723: ST_TO_ADDR
23724: GO 23637
23726: POP
23727: POP
// result := list ;
23728: LD_ADDR_VAR 0 2
23732: PUSH
23733: LD_VAR 0 5
23737: ST_TO_ADDR
// end ;
23738: LD_VAR 0 2
23742: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
23743: LD_INT 0
23745: PPUSH
23746: PPUSH
23747: PPUSH
23748: PPUSH
23749: PPUSH
23750: PPUSH
23751: PPUSH
// if not factory then
23752: LD_VAR 0 1
23756: NOT
23757: IFFALSE 23761
// exit ;
23759: GO 24354
// if control = control_apeman then
23761: LD_VAR 0 4
23765: PUSH
23766: LD_INT 5
23768: EQUAL
23769: IFFALSE 23878
// begin tmp := UnitsInside ( factory ) ;
23771: LD_ADDR_VAR 0 8
23775: PUSH
23776: LD_VAR 0 1
23780: PPUSH
23781: CALL_OW 313
23785: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
23786: LD_VAR 0 8
23790: PPUSH
23791: LD_INT 25
23793: PUSH
23794: LD_INT 12
23796: PUSH
23797: EMPTY
23798: LIST
23799: LIST
23800: PPUSH
23801: CALL_OW 72
23805: NOT
23806: IFFALSE 23816
// control := control_manual ;
23808: LD_ADDR_VAR 0 4
23812: PUSH
23813: LD_INT 1
23815: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
23816: LD_ADDR_VAR 0 8
23820: PUSH
23821: LD_VAR 0 1
23825: PPUSH
23826: CALL 23513 0 1
23830: ST_TO_ADDR
// if tmp then
23831: LD_VAR 0 8
23835: IFFALSE 23878
// begin for i in tmp do
23837: LD_ADDR_VAR 0 7
23841: PUSH
23842: LD_VAR 0 8
23846: PUSH
23847: FOR_IN
23848: IFFALSE 23876
// if i [ 1 ] = b_ext_radio then
23850: LD_VAR 0 7
23854: PUSH
23855: LD_INT 1
23857: ARRAY
23858: PUSH
23859: LD_INT 22
23861: EQUAL
23862: IFFALSE 23874
// begin control := control_remote ;
23864: LD_ADDR_VAR 0 4
23868: PUSH
23869: LD_INT 2
23871: ST_TO_ADDR
// break ;
23872: GO 23876
// end ;
23874: GO 23847
23876: POP
23877: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23878: LD_VAR 0 1
23882: PPUSH
23883: LD_VAR 0 2
23887: PPUSH
23888: LD_VAR 0 3
23892: PPUSH
23893: LD_VAR 0 4
23897: PPUSH
23898: LD_VAR 0 5
23902: PPUSH
23903: CALL_OW 448
23907: IFFALSE 23942
// begin result := [ chassis , engine , control , weapon ] ;
23909: LD_ADDR_VAR 0 6
23913: PUSH
23914: LD_VAR 0 2
23918: PUSH
23919: LD_VAR 0 3
23923: PUSH
23924: LD_VAR 0 4
23928: PUSH
23929: LD_VAR 0 5
23933: PUSH
23934: EMPTY
23935: LIST
23936: LIST
23937: LIST
23938: LIST
23939: ST_TO_ADDR
// exit ;
23940: GO 24354
// end ; _chassis := AvailableChassisList ( factory ) ;
23942: LD_ADDR_VAR 0 9
23946: PUSH
23947: LD_VAR 0 1
23951: PPUSH
23952: CALL_OW 475
23956: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
23957: LD_ADDR_VAR 0 11
23961: PUSH
23962: LD_VAR 0 1
23966: PPUSH
23967: CALL_OW 476
23971: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
23972: LD_ADDR_VAR 0 12
23976: PUSH
23977: LD_VAR 0 1
23981: PPUSH
23982: CALL_OW 477
23986: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
23987: LD_ADDR_VAR 0 10
23991: PUSH
23992: LD_VAR 0 1
23996: PPUSH
23997: CALL_OW 478
24001: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
24002: LD_VAR 0 9
24006: NOT
24007: PUSH
24008: LD_VAR 0 11
24012: NOT
24013: OR
24014: PUSH
24015: LD_VAR 0 12
24019: NOT
24020: OR
24021: PUSH
24022: LD_VAR 0 10
24026: NOT
24027: OR
24028: IFFALSE 24063
// begin result := [ chassis , engine , control , weapon ] ;
24030: LD_ADDR_VAR 0 6
24034: PUSH
24035: LD_VAR 0 2
24039: PUSH
24040: LD_VAR 0 3
24044: PUSH
24045: LD_VAR 0 4
24049: PUSH
24050: LD_VAR 0 5
24054: PUSH
24055: EMPTY
24056: LIST
24057: LIST
24058: LIST
24059: LIST
24060: ST_TO_ADDR
// exit ;
24061: GO 24354
// end ; if not chassis in _chassis then
24063: LD_VAR 0 2
24067: PUSH
24068: LD_VAR 0 9
24072: IN
24073: NOT
24074: IFFALSE 24100
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
24076: LD_ADDR_VAR 0 2
24080: PUSH
24081: LD_VAR 0 9
24085: PUSH
24086: LD_INT 1
24088: PPUSH
24089: LD_VAR 0 9
24093: PPUSH
24094: CALL_OW 12
24098: ARRAY
24099: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
24100: LD_VAR 0 2
24104: PPUSH
24105: LD_VAR 0 3
24109: PPUSH
24110: CALL 24359 0 2
24114: NOT
24115: IFFALSE 24174
// repeat engine := _engine [ 1 ] ;
24117: LD_ADDR_VAR 0 3
24121: PUSH
24122: LD_VAR 0 11
24126: PUSH
24127: LD_INT 1
24129: ARRAY
24130: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
24131: LD_ADDR_VAR 0 11
24135: PUSH
24136: LD_VAR 0 11
24140: PPUSH
24141: LD_INT 1
24143: PPUSH
24144: CALL_OW 3
24148: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
24149: LD_VAR 0 2
24153: PPUSH
24154: LD_VAR 0 3
24158: PPUSH
24159: CALL 24359 0 2
24163: PUSH
24164: LD_VAR 0 11
24168: PUSH
24169: EMPTY
24170: EQUAL
24171: OR
24172: IFFALSE 24117
// if not control in _control then
24174: LD_VAR 0 4
24178: PUSH
24179: LD_VAR 0 12
24183: IN
24184: NOT
24185: IFFALSE 24211
// control := _control [ rand ( 1 , _control ) ] ;
24187: LD_ADDR_VAR 0 4
24191: PUSH
24192: LD_VAR 0 12
24196: PUSH
24197: LD_INT 1
24199: PPUSH
24200: LD_VAR 0 12
24204: PPUSH
24205: CALL_OW 12
24209: ARRAY
24210: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
24211: LD_VAR 0 2
24215: PPUSH
24216: LD_VAR 0 5
24220: PPUSH
24221: CALL 24579 0 2
24225: NOT
24226: IFFALSE 24285
// repeat weapon := _weapon [ 1 ] ;
24228: LD_ADDR_VAR 0 5
24232: PUSH
24233: LD_VAR 0 10
24237: PUSH
24238: LD_INT 1
24240: ARRAY
24241: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
24242: LD_ADDR_VAR 0 10
24246: PUSH
24247: LD_VAR 0 10
24251: PPUSH
24252: LD_INT 1
24254: PPUSH
24255: CALL_OW 3
24259: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
24260: LD_VAR 0 2
24264: PPUSH
24265: LD_VAR 0 5
24269: PPUSH
24270: CALL 24579 0 2
24274: PUSH
24275: LD_VAR 0 10
24279: PUSH
24280: EMPTY
24281: EQUAL
24282: OR
24283: IFFALSE 24228
// result := [ ] ;
24285: LD_ADDR_VAR 0 6
24289: PUSH
24290: EMPTY
24291: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24292: LD_VAR 0 1
24296: PPUSH
24297: LD_VAR 0 2
24301: PPUSH
24302: LD_VAR 0 3
24306: PPUSH
24307: LD_VAR 0 4
24311: PPUSH
24312: LD_VAR 0 5
24316: PPUSH
24317: CALL_OW 448
24321: IFFALSE 24354
// result := [ chassis , engine , control , weapon ] ;
24323: LD_ADDR_VAR 0 6
24327: PUSH
24328: LD_VAR 0 2
24332: PUSH
24333: LD_VAR 0 3
24337: PUSH
24338: LD_VAR 0 4
24342: PUSH
24343: LD_VAR 0 5
24347: PUSH
24348: EMPTY
24349: LIST
24350: LIST
24351: LIST
24352: LIST
24353: ST_TO_ADDR
// end ;
24354: LD_VAR 0 6
24358: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
24359: LD_INT 0
24361: PPUSH
// if not chassis or not engine then
24362: LD_VAR 0 1
24366: NOT
24367: PUSH
24368: LD_VAR 0 2
24372: NOT
24373: OR
24374: IFFALSE 24378
// exit ;
24376: GO 24574
// case engine of engine_solar :
24378: LD_VAR 0 2
24382: PUSH
24383: LD_INT 2
24385: DOUBLE
24386: EQUAL
24387: IFTRUE 24391
24389: GO 24429
24391: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
24392: LD_ADDR_VAR 0 3
24396: PUSH
24397: LD_INT 11
24399: PUSH
24400: LD_INT 12
24402: PUSH
24403: LD_INT 13
24405: PUSH
24406: LD_INT 14
24408: PUSH
24409: LD_INT 1
24411: PUSH
24412: LD_INT 2
24414: PUSH
24415: LD_INT 3
24417: PUSH
24418: EMPTY
24419: LIST
24420: LIST
24421: LIST
24422: LIST
24423: LIST
24424: LIST
24425: LIST
24426: ST_TO_ADDR
24427: GO 24558
24429: LD_INT 1
24431: DOUBLE
24432: EQUAL
24433: IFTRUE 24437
24435: GO 24499
24437: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
24438: LD_ADDR_VAR 0 3
24442: PUSH
24443: LD_INT 11
24445: PUSH
24446: LD_INT 12
24448: PUSH
24449: LD_INT 13
24451: PUSH
24452: LD_INT 14
24454: PUSH
24455: LD_INT 1
24457: PUSH
24458: LD_INT 2
24460: PUSH
24461: LD_INT 3
24463: PUSH
24464: LD_INT 4
24466: PUSH
24467: LD_INT 5
24469: PUSH
24470: LD_INT 21
24472: PUSH
24473: LD_INT 23
24475: PUSH
24476: LD_INT 22
24478: PUSH
24479: LD_INT 24
24481: PUSH
24482: EMPTY
24483: LIST
24484: LIST
24485: LIST
24486: LIST
24487: LIST
24488: LIST
24489: LIST
24490: LIST
24491: LIST
24492: LIST
24493: LIST
24494: LIST
24495: LIST
24496: ST_TO_ADDR
24497: GO 24558
24499: LD_INT 3
24501: DOUBLE
24502: EQUAL
24503: IFTRUE 24507
24505: GO 24557
24507: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24508: LD_ADDR_VAR 0 3
24512: PUSH
24513: LD_INT 13
24515: PUSH
24516: LD_INT 14
24518: PUSH
24519: LD_INT 2
24521: PUSH
24522: LD_INT 3
24524: PUSH
24525: LD_INT 4
24527: PUSH
24528: LD_INT 5
24530: PUSH
24531: LD_INT 21
24533: PUSH
24534: LD_INT 22
24536: PUSH
24537: LD_INT 23
24539: PUSH
24540: LD_INT 24
24542: PUSH
24543: EMPTY
24544: LIST
24545: LIST
24546: LIST
24547: LIST
24548: LIST
24549: LIST
24550: LIST
24551: LIST
24552: LIST
24553: LIST
24554: ST_TO_ADDR
24555: GO 24558
24557: POP
// result := ( chassis in result ) ;
24558: LD_ADDR_VAR 0 3
24562: PUSH
24563: LD_VAR 0 1
24567: PUSH
24568: LD_VAR 0 3
24572: IN
24573: ST_TO_ADDR
// end ;
24574: LD_VAR 0 3
24578: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
24579: LD_INT 0
24581: PPUSH
// if not chassis or not weapon then
24582: LD_VAR 0 1
24586: NOT
24587: PUSH
24588: LD_VAR 0 2
24592: NOT
24593: OR
24594: IFFALSE 24598
// exit ;
24596: GO 25624
// case weapon of us_machine_gun :
24598: LD_VAR 0 2
24602: PUSH
24603: LD_INT 2
24605: DOUBLE
24606: EQUAL
24607: IFTRUE 24611
24609: GO 24641
24611: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
24612: LD_ADDR_VAR 0 3
24616: PUSH
24617: LD_INT 1
24619: PUSH
24620: LD_INT 2
24622: PUSH
24623: LD_INT 3
24625: PUSH
24626: LD_INT 4
24628: PUSH
24629: LD_INT 5
24631: PUSH
24632: EMPTY
24633: LIST
24634: LIST
24635: LIST
24636: LIST
24637: LIST
24638: ST_TO_ADDR
24639: GO 25608
24641: LD_INT 3
24643: DOUBLE
24644: EQUAL
24645: IFTRUE 24649
24647: GO 24679
24649: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
24650: LD_ADDR_VAR 0 3
24654: PUSH
24655: LD_INT 1
24657: PUSH
24658: LD_INT 2
24660: PUSH
24661: LD_INT 3
24663: PUSH
24664: LD_INT 4
24666: PUSH
24667: LD_INT 5
24669: PUSH
24670: EMPTY
24671: LIST
24672: LIST
24673: LIST
24674: LIST
24675: LIST
24676: ST_TO_ADDR
24677: GO 25608
24679: LD_INT 11
24681: DOUBLE
24682: EQUAL
24683: IFTRUE 24687
24685: GO 24717
24687: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
24688: LD_ADDR_VAR 0 3
24692: PUSH
24693: LD_INT 1
24695: PUSH
24696: LD_INT 2
24698: PUSH
24699: LD_INT 3
24701: PUSH
24702: LD_INT 4
24704: PUSH
24705: LD_INT 5
24707: PUSH
24708: EMPTY
24709: LIST
24710: LIST
24711: LIST
24712: LIST
24713: LIST
24714: ST_TO_ADDR
24715: GO 25608
24717: LD_INT 4
24719: DOUBLE
24720: EQUAL
24721: IFTRUE 24725
24723: GO 24751
24725: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
24726: LD_ADDR_VAR 0 3
24730: PUSH
24731: LD_INT 2
24733: PUSH
24734: LD_INT 3
24736: PUSH
24737: LD_INT 4
24739: PUSH
24740: LD_INT 5
24742: PUSH
24743: EMPTY
24744: LIST
24745: LIST
24746: LIST
24747: LIST
24748: ST_TO_ADDR
24749: GO 25608
24751: LD_INT 5
24753: DOUBLE
24754: EQUAL
24755: IFTRUE 24759
24757: GO 24785
24759: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
24760: LD_ADDR_VAR 0 3
24764: PUSH
24765: LD_INT 2
24767: PUSH
24768: LD_INT 3
24770: PUSH
24771: LD_INT 4
24773: PUSH
24774: LD_INT 5
24776: PUSH
24777: EMPTY
24778: LIST
24779: LIST
24780: LIST
24781: LIST
24782: ST_TO_ADDR
24783: GO 25608
24785: LD_INT 9
24787: DOUBLE
24788: EQUAL
24789: IFTRUE 24793
24791: GO 24819
24793: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
24794: LD_ADDR_VAR 0 3
24798: PUSH
24799: LD_INT 2
24801: PUSH
24802: LD_INT 3
24804: PUSH
24805: LD_INT 4
24807: PUSH
24808: LD_INT 5
24810: PUSH
24811: EMPTY
24812: LIST
24813: LIST
24814: LIST
24815: LIST
24816: ST_TO_ADDR
24817: GO 25608
24819: LD_INT 7
24821: DOUBLE
24822: EQUAL
24823: IFTRUE 24827
24825: GO 24853
24827: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
24828: LD_ADDR_VAR 0 3
24832: PUSH
24833: LD_INT 2
24835: PUSH
24836: LD_INT 3
24838: PUSH
24839: LD_INT 4
24841: PUSH
24842: LD_INT 5
24844: PUSH
24845: EMPTY
24846: LIST
24847: LIST
24848: LIST
24849: LIST
24850: ST_TO_ADDR
24851: GO 25608
24853: LD_INT 12
24855: DOUBLE
24856: EQUAL
24857: IFTRUE 24861
24859: GO 24887
24861: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
24862: LD_ADDR_VAR 0 3
24866: PUSH
24867: LD_INT 2
24869: PUSH
24870: LD_INT 3
24872: PUSH
24873: LD_INT 4
24875: PUSH
24876: LD_INT 5
24878: PUSH
24879: EMPTY
24880: LIST
24881: LIST
24882: LIST
24883: LIST
24884: ST_TO_ADDR
24885: GO 25608
24887: LD_INT 13
24889: DOUBLE
24890: EQUAL
24891: IFTRUE 24895
24893: GO 24921
24895: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
24896: LD_ADDR_VAR 0 3
24900: PUSH
24901: LD_INT 2
24903: PUSH
24904: LD_INT 3
24906: PUSH
24907: LD_INT 4
24909: PUSH
24910: LD_INT 5
24912: PUSH
24913: EMPTY
24914: LIST
24915: LIST
24916: LIST
24917: LIST
24918: ST_TO_ADDR
24919: GO 25608
24921: LD_INT 14
24923: DOUBLE
24924: EQUAL
24925: IFTRUE 24929
24927: GO 24947
24929: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
24930: LD_ADDR_VAR 0 3
24934: PUSH
24935: LD_INT 4
24937: PUSH
24938: LD_INT 5
24940: PUSH
24941: EMPTY
24942: LIST
24943: LIST
24944: ST_TO_ADDR
24945: GO 25608
24947: LD_INT 6
24949: DOUBLE
24950: EQUAL
24951: IFTRUE 24955
24953: GO 24973
24955: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
24956: LD_ADDR_VAR 0 3
24960: PUSH
24961: LD_INT 4
24963: PUSH
24964: LD_INT 5
24966: PUSH
24967: EMPTY
24968: LIST
24969: LIST
24970: ST_TO_ADDR
24971: GO 25608
24973: LD_INT 10
24975: DOUBLE
24976: EQUAL
24977: IFTRUE 24981
24979: GO 24999
24981: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
24982: LD_ADDR_VAR 0 3
24986: PUSH
24987: LD_INT 4
24989: PUSH
24990: LD_INT 5
24992: PUSH
24993: EMPTY
24994: LIST
24995: LIST
24996: ST_TO_ADDR
24997: GO 25608
24999: LD_INT 22
25001: DOUBLE
25002: EQUAL
25003: IFTRUE 25007
25005: GO 25033
25007: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
25008: LD_ADDR_VAR 0 3
25012: PUSH
25013: LD_INT 11
25015: PUSH
25016: LD_INT 12
25018: PUSH
25019: LD_INT 13
25021: PUSH
25022: LD_INT 14
25024: PUSH
25025: EMPTY
25026: LIST
25027: LIST
25028: LIST
25029: LIST
25030: ST_TO_ADDR
25031: GO 25608
25033: LD_INT 23
25035: DOUBLE
25036: EQUAL
25037: IFTRUE 25041
25039: GO 25067
25041: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
25042: LD_ADDR_VAR 0 3
25046: PUSH
25047: LD_INT 11
25049: PUSH
25050: LD_INT 12
25052: PUSH
25053: LD_INT 13
25055: PUSH
25056: LD_INT 14
25058: PUSH
25059: EMPTY
25060: LIST
25061: LIST
25062: LIST
25063: LIST
25064: ST_TO_ADDR
25065: GO 25608
25067: LD_INT 24
25069: DOUBLE
25070: EQUAL
25071: IFTRUE 25075
25073: GO 25101
25075: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
25076: LD_ADDR_VAR 0 3
25080: PUSH
25081: LD_INT 11
25083: PUSH
25084: LD_INT 12
25086: PUSH
25087: LD_INT 13
25089: PUSH
25090: LD_INT 14
25092: PUSH
25093: EMPTY
25094: LIST
25095: LIST
25096: LIST
25097: LIST
25098: ST_TO_ADDR
25099: GO 25608
25101: LD_INT 30
25103: DOUBLE
25104: EQUAL
25105: IFTRUE 25109
25107: GO 25135
25109: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
25110: LD_ADDR_VAR 0 3
25114: PUSH
25115: LD_INT 11
25117: PUSH
25118: LD_INT 12
25120: PUSH
25121: LD_INT 13
25123: PUSH
25124: LD_INT 14
25126: PUSH
25127: EMPTY
25128: LIST
25129: LIST
25130: LIST
25131: LIST
25132: ST_TO_ADDR
25133: GO 25608
25135: LD_INT 25
25137: DOUBLE
25138: EQUAL
25139: IFTRUE 25143
25141: GO 25161
25143: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
25144: LD_ADDR_VAR 0 3
25148: PUSH
25149: LD_INT 13
25151: PUSH
25152: LD_INT 14
25154: PUSH
25155: EMPTY
25156: LIST
25157: LIST
25158: ST_TO_ADDR
25159: GO 25608
25161: LD_INT 27
25163: DOUBLE
25164: EQUAL
25165: IFTRUE 25169
25167: GO 25187
25169: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
25170: LD_ADDR_VAR 0 3
25174: PUSH
25175: LD_INT 13
25177: PUSH
25178: LD_INT 14
25180: PUSH
25181: EMPTY
25182: LIST
25183: LIST
25184: ST_TO_ADDR
25185: GO 25608
25187: LD_INT 28
25189: DOUBLE
25190: EQUAL
25191: IFTRUE 25195
25193: GO 25213
25195: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
25196: LD_ADDR_VAR 0 3
25200: PUSH
25201: LD_INT 13
25203: PUSH
25204: LD_INT 14
25206: PUSH
25207: EMPTY
25208: LIST
25209: LIST
25210: ST_TO_ADDR
25211: GO 25608
25213: LD_INT 29
25215: DOUBLE
25216: EQUAL
25217: IFTRUE 25221
25219: GO 25239
25221: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
25222: LD_ADDR_VAR 0 3
25226: PUSH
25227: LD_INT 13
25229: PUSH
25230: LD_INT 14
25232: PUSH
25233: EMPTY
25234: LIST
25235: LIST
25236: ST_TO_ADDR
25237: GO 25608
25239: LD_INT 31
25241: DOUBLE
25242: EQUAL
25243: IFTRUE 25247
25245: GO 25265
25247: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
25248: LD_ADDR_VAR 0 3
25252: PUSH
25253: LD_INT 13
25255: PUSH
25256: LD_INT 14
25258: PUSH
25259: EMPTY
25260: LIST
25261: LIST
25262: ST_TO_ADDR
25263: GO 25608
25265: LD_INT 26
25267: DOUBLE
25268: EQUAL
25269: IFTRUE 25273
25271: GO 25291
25273: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
25274: LD_ADDR_VAR 0 3
25278: PUSH
25279: LD_INT 13
25281: PUSH
25282: LD_INT 14
25284: PUSH
25285: EMPTY
25286: LIST
25287: LIST
25288: ST_TO_ADDR
25289: GO 25608
25291: LD_INT 42
25293: DOUBLE
25294: EQUAL
25295: IFTRUE 25299
25297: GO 25325
25299: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
25300: LD_ADDR_VAR 0 3
25304: PUSH
25305: LD_INT 21
25307: PUSH
25308: LD_INT 22
25310: PUSH
25311: LD_INT 23
25313: PUSH
25314: LD_INT 24
25316: PUSH
25317: EMPTY
25318: LIST
25319: LIST
25320: LIST
25321: LIST
25322: ST_TO_ADDR
25323: GO 25608
25325: LD_INT 43
25327: DOUBLE
25328: EQUAL
25329: IFTRUE 25333
25331: GO 25359
25333: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
25334: LD_ADDR_VAR 0 3
25338: PUSH
25339: LD_INT 21
25341: PUSH
25342: LD_INT 22
25344: PUSH
25345: LD_INT 23
25347: PUSH
25348: LD_INT 24
25350: PUSH
25351: EMPTY
25352: LIST
25353: LIST
25354: LIST
25355: LIST
25356: ST_TO_ADDR
25357: GO 25608
25359: LD_INT 44
25361: DOUBLE
25362: EQUAL
25363: IFTRUE 25367
25365: GO 25393
25367: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
25368: LD_ADDR_VAR 0 3
25372: PUSH
25373: LD_INT 21
25375: PUSH
25376: LD_INT 22
25378: PUSH
25379: LD_INT 23
25381: PUSH
25382: LD_INT 24
25384: PUSH
25385: EMPTY
25386: LIST
25387: LIST
25388: LIST
25389: LIST
25390: ST_TO_ADDR
25391: GO 25608
25393: LD_INT 45
25395: DOUBLE
25396: EQUAL
25397: IFTRUE 25401
25399: GO 25427
25401: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
25402: LD_ADDR_VAR 0 3
25406: PUSH
25407: LD_INT 21
25409: PUSH
25410: LD_INT 22
25412: PUSH
25413: LD_INT 23
25415: PUSH
25416: LD_INT 24
25418: PUSH
25419: EMPTY
25420: LIST
25421: LIST
25422: LIST
25423: LIST
25424: ST_TO_ADDR
25425: GO 25608
25427: LD_INT 49
25429: DOUBLE
25430: EQUAL
25431: IFTRUE 25435
25433: GO 25461
25435: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
25436: LD_ADDR_VAR 0 3
25440: PUSH
25441: LD_INT 21
25443: PUSH
25444: LD_INT 22
25446: PUSH
25447: LD_INT 23
25449: PUSH
25450: LD_INT 24
25452: PUSH
25453: EMPTY
25454: LIST
25455: LIST
25456: LIST
25457: LIST
25458: ST_TO_ADDR
25459: GO 25608
25461: LD_INT 51
25463: DOUBLE
25464: EQUAL
25465: IFTRUE 25469
25467: GO 25495
25469: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
25470: LD_ADDR_VAR 0 3
25474: PUSH
25475: LD_INT 21
25477: PUSH
25478: LD_INT 22
25480: PUSH
25481: LD_INT 23
25483: PUSH
25484: LD_INT 24
25486: PUSH
25487: EMPTY
25488: LIST
25489: LIST
25490: LIST
25491: LIST
25492: ST_TO_ADDR
25493: GO 25608
25495: LD_INT 52
25497: DOUBLE
25498: EQUAL
25499: IFTRUE 25503
25501: GO 25529
25503: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
25504: LD_ADDR_VAR 0 3
25508: PUSH
25509: LD_INT 21
25511: PUSH
25512: LD_INT 22
25514: PUSH
25515: LD_INT 23
25517: PUSH
25518: LD_INT 24
25520: PUSH
25521: EMPTY
25522: LIST
25523: LIST
25524: LIST
25525: LIST
25526: ST_TO_ADDR
25527: GO 25608
25529: LD_INT 53
25531: DOUBLE
25532: EQUAL
25533: IFTRUE 25537
25535: GO 25555
25537: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
25538: LD_ADDR_VAR 0 3
25542: PUSH
25543: LD_INT 23
25545: PUSH
25546: LD_INT 24
25548: PUSH
25549: EMPTY
25550: LIST
25551: LIST
25552: ST_TO_ADDR
25553: GO 25608
25555: LD_INT 46
25557: DOUBLE
25558: EQUAL
25559: IFTRUE 25563
25561: GO 25581
25563: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
25564: LD_ADDR_VAR 0 3
25568: PUSH
25569: LD_INT 23
25571: PUSH
25572: LD_INT 24
25574: PUSH
25575: EMPTY
25576: LIST
25577: LIST
25578: ST_TO_ADDR
25579: GO 25608
25581: LD_INT 47
25583: DOUBLE
25584: EQUAL
25585: IFTRUE 25589
25587: GO 25607
25589: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25590: LD_ADDR_VAR 0 3
25594: PUSH
25595: LD_INT 23
25597: PUSH
25598: LD_INT 24
25600: PUSH
25601: EMPTY
25602: LIST
25603: LIST
25604: ST_TO_ADDR
25605: GO 25608
25607: POP
// result := ( chassis in result ) ;
25608: LD_ADDR_VAR 0 3
25612: PUSH
25613: LD_VAR 0 1
25617: PUSH
25618: LD_VAR 0 3
25622: IN
25623: ST_TO_ADDR
// end ;
25624: LD_VAR 0 3
25628: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
25629: LD_INT 0
25631: PPUSH
25632: PPUSH
25633: PPUSH
25634: PPUSH
25635: PPUSH
25636: PPUSH
25637: PPUSH
// result := array ;
25638: LD_ADDR_VAR 0 5
25642: PUSH
25643: LD_VAR 0 1
25647: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
25648: LD_VAR 0 1
25652: NOT
25653: PUSH
25654: LD_VAR 0 2
25658: NOT
25659: OR
25660: PUSH
25661: LD_VAR 0 3
25665: NOT
25666: OR
25667: PUSH
25668: LD_VAR 0 2
25672: PUSH
25673: LD_VAR 0 1
25677: GREATER
25678: OR
25679: PUSH
25680: LD_VAR 0 3
25684: PUSH
25685: LD_VAR 0 1
25689: GREATER
25690: OR
25691: IFFALSE 25695
// exit ;
25693: GO 25991
// if direction then
25695: LD_VAR 0 4
25699: IFFALSE 25763
// begin d := 1 ;
25701: LD_ADDR_VAR 0 9
25705: PUSH
25706: LD_INT 1
25708: ST_TO_ADDR
// if i_from > i_to then
25709: LD_VAR 0 2
25713: PUSH
25714: LD_VAR 0 3
25718: GREATER
25719: IFFALSE 25745
// length := ( array - i_from ) + i_to else
25721: LD_ADDR_VAR 0 11
25725: PUSH
25726: LD_VAR 0 1
25730: PUSH
25731: LD_VAR 0 2
25735: MINUS
25736: PUSH
25737: LD_VAR 0 3
25741: PLUS
25742: ST_TO_ADDR
25743: GO 25761
// length := i_to - i_from ;
25745: LD_ADDR_VAR 0 11
25749: PUSH
25750: LD_VAR 0 3
25754: PUSH
25755: LD_VAR 0 2
25759: MINUS
25760: ST_TO_ADDR
// end else
25761: GO 25824
// begin d := - 1 ;
25763: LD_ADDR_VAR 0 9
25767: PUSH
25768: LD_INT 1
25770: NEG
25771: ST_TO_ADDR
// if i_from > i_to then
25772: LD_VAR 0 2
25776: PUSH
25777: LD_VAR 0 3
25781: GREATER
25782: IFFALSE 25802
// length := i_from - i_to else
25784: LD_ADDR_VAR 0 11
25788: PUSH
25789: LD_VAR 0 2
25793: PUSH
25794: LD_VAR 0 3
25798: MINUS
25799: ST_TO_ADDR
25800: GO 25824
// length := ( array - i_to ) + i_from ;
25802: LD_ADDR_VAR 0 11
25806: PUSH
25807: LD_VAR 0 1
25811: PUSH
25812: LD_VAR 0 3
25816: MINUS
25817: PUSH
25818: LD_VAR 0 2
25822: PLUS
25823: ST_TO_ADDR
// end ; if not length then
25824: LD_VAR 0 11
25828: NOT
25829: IFFALSE 25833
// exit ;
25831: GO 25991
// tmp := array ;
25833: LD_ADDR_VAR 0 10
25837: PUSH
25838: LD_VAR 0 1
25842: ST_TO_ADDR
// for i = 1 to length do
25843: LD_ADDR_VAR 0 6
25847: PUSH
25848: DOUBLE
25849: LD_INT 1
25851: DEC
25852: ST_TO_ADDR
25853: LD_VAR 0 11
25857: PUSH
25858: FOR_TO
25859: IFFALSE 25979
// begin for j = 1 to array do
25861: LD_ADDR_VAR 0 7
25865: PUSH
25866: DOUBLE
25867: LD_INT 1
25869: DEC
25870: ST_TO_ADDR
25871: LD_VAR 0 1
25875: PUSH
25876: FOR_TO
25877: IFFALSE 25965
// begin k := j + d ;
25879: LD_ADDR_VAR 0 8
25883: PUSH
25884: LD_VAR 0 7
25888: PUSH
25889: LD_VAR 0 9
25893: PLUS
25894: ST_TO_ADDR
// if k > array then
25895: LD_VAR 0 8
25899: PUSH
25900: LD_VAR 0 1
25904: GREATER
25905: IFFALSE 25915
// k := 1 ;
25907: LD_ADDR_VAR 0 8
25911: PUSH
25912: LD_INT 1
25914: ST_TO_ADDR
// if not k then
25915: LD_VAR 0 8
25919: NOT
25920: IFFALSE 25932
// k := array ;
25922: LD_ADDR_VAR 0 8
25926: PUSH
25927: LD_VAR 0 1
25931: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
25932: LD_ADDR_VAR 0 10
25936: PUSH
25937: LD_VAR 0 10
25941: PPUSH
25942: LD_VAR 0 8
25946: PPUSH
25947: LD_VAR 0 1
25951: PUSH
25952: LD_VAR 0 7
25956: ARRAY
25957: PPUSH
25958: CALL_OW 1
25962: ST_TO_ADDR
// end ;
25963: GO 25876
25965: POP
25966: POP
// array := tmp ;
25967: LD_ADDR_VAR 0 1
25971: PUSH
25972: LD_VAR 0 10
25976: ST_TO_ADDR
// end ;
25977: GO 25858
25979: POP
25980: POP
// result := array ;
25981: LD_ADDR_VAR 0 5
25985: PUSH
25986: LD_VAR 0 1
25990: ST_TO_ADDR
// end ;
25991: LD_VAR 0 5
25995: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
25996: LD_INT 0
25998: PPUSH
25999: PPUSH
// result := 0 ;
26000: LD_ADDR_VAR 0 3
26004: PUSH
26005: LD_INT 0
26007: ST_TO_ADDR
// if not array or not value in array then
26008: LD_VAR 0 1
26012: NOT
26013: PUSH
26014: LD_VAR 0 2
26018: PUSH
26019: LD_VAR 0 1
26023: IN
26024: NOT
26025: OR
26026: IFFALSE 26030
// exit ;
26028: GO 26084
// for i = 1 to array do
26030: LD_ADDR_VAR 0 4
26034: PUSH
26035: DOUBLE
26036: LD_INT 1
26038: DEC
26039: ST_TO_ADDR
26040: LD_VAR 0 1
26044: PUSH
26045: FOR_TO
26046: IFFALSE 26082
// if value = array [ i ] then
26048: LD_VAR 0 2
26052: PUSH
26053: LD_VAR 0 1
26057: PUSH
26058: LD_VAR 0 4
26062: ARRAY
26063: EQUAL
26064: IFFALSE 26080
// begin result := i ;
26066: LD_ADDR_VAR 0 3
26070: PUSH
26071: LD_VAR 0 4
26075: ST_TO_ADDR
// exit ;
26076: POP
26077: POP
26078: GO 26084
// end ;
26080: GO 26045
26082: POP
26083: POP
// end ;
26084: LD_VAR 0 3
26088: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
26089: LD_INT 0
26091: PPUSH
// vc_chassis := chassis ;
26092: LD_ADDR_OWVAR 37
26096: PUSH
26097: LD_VAR 0 1
26101: ST_TO_ADDR
// vc_engine := engine ;
26102: LD_ADDR_OWVAR 39
26106: PUSH
26107: LD_VAR 0 2
26111: ST_TO_ADDR
// vc_control := control ;
26112: LD_ADDR_OWVAR 38
26116: PUSH
26117: LD_VAR 0 3
26121: ST_TO_ADDR
// vc_weapon := weapon ;
26122: LD_ADDR_OWVAR 40
26126: PUSH
26127: LD_VAR 0 4
26131: ST_TO_ADDR
// vc_fuel_battery := fuel ;
26132: LD_ADDR_OWVAR 41
26136: PUSH
26137: LD_VAR 0 5
26141: ST_TO_ADDR
// end ;
26142: LD_VAR 0 6
26146: RET
// export function WantPlant ( unit ) ; var task ; begin
26147: LD_INT 0
26149: PPUSH
26150: PPUSH
// result := false ;
26151: LD_ADDR_VAR 0 2
26155: PUSH
26156: LD_INT 0
26158: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
26159: LD_ADDR_VAR 0 3
26163: PUSH
26164: LD_VAR 0 1
26168: PPUSH
26169: CALL_OW 437
26173: ST_TO_ADDR
// if task then
26174: LD_VAR 0 3
26178: IFFALSE 26206
// if task [ 1 ] [ 1 ] = p then
26180: LD_VAR 0 3
26184: PUSH
26185: LD_INT 1
26187: ARRAY
26188: PUSH
26189: LD_INT 1
26191: ARRAY
26192: PUSH
26193: LD_STRING p
26195: EQUAL
26196: IFFALSE 26206
// result := true ;
26198: LD_ADDR_VAR 0 2
26202: PUSH
26203: LD_INT 1
26205: ST_TO_ADDR
// end ;
26206: LD_VAR 0 2
26210: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
26211: LD_INT 0
26213: PPUSH
26214: PPUSH
26215: PPUSH
26216: PPUSH
// if pos < 1 then
26217: LD_VAR 0 2
26221: PUSH
26222: LD_INT 1
26224: LESS
26225: IFFALSE 26229
// exit ;
26227: GO 26532
// if pos = 1 then
26229: LD_VAR 0 2
26233: PUSH
26234: LD_INT 1
26236: EQUAL
26237: IFFALSE 26270
// result := Replace ( arr , pos [ 1 ] , value ) else
26239: LD_ADDR_VAR 0 4
26243: PUSH
26244: LD_VAR 0 1
26248: PPUSH
26249: LD_VAR 0 2
26253: PUSH
26254: LD_INT 1
26256: ARRAY
26257: PPUSH
26258: LD_VAR 0 3
26262: PPUSH
26263: CALL_OW 1
26267: ST_TO_ADDR
26268: GO 26532
// begin tmp := arr ;
26270: LD_ADDR_VAR 0 6
26274: PUSH
26275: LD_VAR 0 1
26279: ST_TO_ADDR
// s_arr := [ tmp ] ;
26280: LD_ADDR_VAR 0 7
26284: PUSH
26285: LD_VAR 0 6
26289: PUSH
26290: EMPTY
26291: LIST
26292: ST_TO_ADDR
// for i = 1 to pos - 1 do
26293: LD_ADDR_VAR 0 5
26297: PUSH
26298: DOUBLE
26299: LD_INT 1
26301: DEC
26302: ST_TO_ADDR
26303: LD_VAR 0 2
26307: PUSH
26308: LD_INT 1
26310: MINUS
26311: PUSH
26312: FOR_TO
26313: IFFALSE 26358
// begin tmp := tmp [ pos [ i ] ] ;
26315: LD_ADDR_VAR 0 6
26319: PUSH
26320: LD_VAR 0 6
26324: PUSH
26325: LD_VAR 0 2
26329: PUSH
26330: LD_VAR 0 5
26334: ARRAY
26335: ARRAY
26336: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
26337: LD_ADDR_VAR 0 7
26341: PUSH
26342: LD_VAR 0 7
26346: PUSH
26347: LD_VAR 0 6
26351: PUSH
26352: EMPTY
26353: LIST
26354: ADD
26355: ST_TO_ADDR
// end ;
26356: GO 26312
26358: POP
26359: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
26360: LD_ADDR_VAR 0 6
26364: PUSH
26365: LD_VAR 0 6
26369: PPUSH
26370: LD_VAR 0 2
26374: PUSH
26375: LD_VAR 0 2
26379: ARRAY
26380: PPUSH
26381: LD_VAR 0 3
26385: PPUSH
26386: CALL_OW 1
26390: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
26391: LD_ADDR_VAR 0 7
26395: PUSH
26396: LD_VAR 0 7
26400: PPUSH
26401: LD_VAR 0 7
26405: PPUSH
26406: LD_VAR 0 6
26410: PPUSH
26411: CALL_OW 1
26415: ST_TO_ADDR
// for i = s_arr downto 2 do
26416: LD_ADDR_VAR 0 5
26420: PUSH
26421: DOUBLE
26422: LD_VAR 0 7
26426: INC
26427: ST_TO_ADDR
26428: LD_INT 2
26430: PUSH
26431: FOR_DOWNTO
26432: IFFALSE 26516
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
26434: LD_ADDR_VAR 0 6
26438: PUSH
26439: LD_VAR 0 7
26443: PUSH
26444: LD_VAR 0 5
26448: PUSH
26449: LD_INT 1
26451: MINUS
26452: ARRAY
26453: PPUSH
26454: LD_VAR 0 2
26458: PUSH
26459: LD_VAR 0 5
26463: PUSH
26464: LD_INT 1
26466: MINUS
26467: ARRAY
26468: PPUSH
26469: LD_VAR 0 7
26473: PUSH
26474: LD_VAR 0 5
26478: ARRAY
26479: PPUSH
26480: CALL_OW 1
26484: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
26485: LD_ADDR_VAR 0 7
26489: PUSH
26490: LD_VAR 0 7
26494: PPUSH
26495: LD_VAR 0 5
26499: PUSH
26500: LD_INT 1
26502: MINUS
26503: PPUSH
26504: LD_VAR 0 6
26508: PPUSH
26509: CALL_OW 1
26513: ST_TO_ADDR
// end ;
26514: GO 26431
26516: POP
26517: POP
// result := s_arr [ 1 ] ;
26518: LD_ADDR_VAR 0 4
26522: PUSH
26523: LD_VAR 0 7
26527: PUSH
26528: LD_INT 1
26530: ARRAY
26531: ST_TO_ADDR
// end ; end ;
26532: LD_VAR 0 4
26536: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
26537: LD_INT 0
26539: PPUSH
26540: PPUSH
// if not list then
26541: LD_VAR 0 1
26545: NOT
26546: IFFALSE 26550
// exit ;
26548: GO 26641
// i := list [ pos1 ] ;
26550: LD_ADDR_VAR 0 5
26554: PUSH
26555: LD_VAR 0 1
26559: PUSH
26560: LD_VAR 0 2
26564: ARRAY
26565: ST_TO_ADDR
// if not i then
26566: LD_VAR 0 5
26570: NOT
26571: IFFALSE 26575
// exit ;
26573: GO 26641
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
26575: LD_ADDR_VAR 0 1
26579: PUSH
26580: LD_VAR 0 1
26584: PPUSH
26585: LD_VAR 0 2
26589: PPUSH
26590: LD_VAR 0 1
26594: PUSH
26595: LD_VAR 0 3
26599: ARRAY
26600: PPUSH
26601: CALL_OW 1
26605: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
26606: LD_ADDR_VAR 0 1
26610: PUSH
26611: LD_VAR 0 1
26615: PPUSH
26616: LD_VAR 0 3
26620: PPUSH
26621: LD_VAR 0 5
26625: PPUSH
26626: CALL_OW 1
26630: ST_TO_ADDR
// result := list ;
26631: LD_ADDR_VAR 0 4
26635: PUSH
26636: LD_VAR 0 1
26640: ST_TO_ADDR
// end ;
26641: LD_VAR 0 4
26645: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
26646: LD_INT 0
26648: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
26649: LD_ADDR_VAR 0 5
26653: PUSH
26654: LD_VAR 0 1
26658: PPUSH
26659: CALL_OW 250
26663: PPUSH
26664: LD_VAR 0 1
26668: PPUSH
26669: CALL_OW 251
26673: PPUSH
26674: LD_VAR 0 2
26678: PPUSH
26679: LD_VAR 0 3
26683: PPUSH
26684: LD_VAR 0 4
26688: PPUSH
26689: CALL 26699 0 5
26693: ST_TO_ADDR
// end ;
26694: LD_VAR 0 5
26698: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
26699: LD_INT 0
26701: PPUSH
26702: PPUSH
26703: PPUSH
26704: PPUSH
// if not list then
26705: LD_VAR 0 3
26709: NOT
26710: IFFALSE 26714
// exit ;
26712: GO 27102
// result := [ ] ;
26714: LD_ADDR_VAR 0 6
26718: PUSH
26719: EMPTY
26720: ST_TO_ADDR
// for i in list do
26721: LD_ADDR_VAR 0 7
26725: PUSH
26726: LD_VAR 0 3
26730: PUSH
26731: FOR_IN
26732: IFFALSE 26934
// begin tmp := GetDistUnitXY ( i , x , y ) ;
26734: LD_ADDR_VAR 0 9
26738: PUSH
26739: LD_VAR 0 7
26743: PPUSH
26744: LD_VAR 0 1
26748: PPUSH
26749: LD_VAR 0 2
26753: PPUSH
26754: CALL_OW 297
26758: ST_TO_ADDR
// if not result then
26759: LD_VAR 0 6
26763: NOT
26764: IFFALSE 26790
// result := [ [ i , tmp ] ] else
26766: LD_ADDR_VAR 0 6
26770: PUSH
26771: LD_VAR 0 7
26775: PUSH
26776: LD_VAR 0 9
26780: PUSH
26781: EMPTY
26782: LIST
26783: LIST
26784: PUSH
26785: EMPTY
26786: LIST
26787: ST_TO_ADDR
26788: GO 26932
// begin if result [ result ] [ 2 ] < tmp then
26790: LD_VAR 0 6
26794: PUSH
26795: LD_VAR 0 6
26799: ARRAY
26800: PUSH
26801: LD_INT 2
26803: ARRAY
26804: PUSH
26805: LD_VAR 0 9
26809: LESS
26810: IFFALSE 26852
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
26812: LD_ADDR_VAR 0 6
26816: PUSH
26817: LD_VAR 0 6
26821: PPUSH
26822: LD_VAR 0 6
26826: PUSH
26827: LD_INT 1
26829: PLUS
26830: PPUSH
26831: LD_VAR 0 7
26835: PUSH
26836: LD_VAR 0 9
26840: PUSH
26841: EMPTY
26842: LIST
26843: LIST
26844: PPUSH
26845: CALL_OW 2
26849: ST_TO_ADDR
26850: GO 26932
// for j = 1 to result do
26852: LD_ADDR_VAR 0 8
26856: PUSH
26857: DOUBLE
26858: LD_INT 1
26860: DEC
26861: ST_TO_ADDR
26862: LD_VAR 0 6
26866: PUSH
26867: FOR_TO
26868: IFFALSE 26930
// begin if tmp < result [ j ] [ 2 ] then
26870: LD_VAR 0 9
26874: PUSH
26875: LD_VAR 0 6
26879: PUSH
26880: LD_VAR 0 8
26884: ARRAY
26885: PUSH
26886: LD_INT 2
26888: ARRAY
26889: LESS
26890: IFFALSE 26928
// begin result := Insert ( result , j , [ i , tmp ] ) ;
26892: LD_ADDR_VAR 0 6
26896: PUSH
26897: LD_VAR 0 6
26901: PPUSH
26902: LD_VAR 0 8
26906: PPUSH
26907: LD_VAR 0 7
26911: PUSH
26912: LD_VAR 0 9
26916: PUSH
26917: EMPTY
26918: LIST
26919: LIST
26920: PPUSH
26921: CALL_OW 2
26925: ST_TO_ADDR
// break ;
26926: GO 26930
// end ; end ;
26928: GO 26867
26930: POP
26931: POP
// end ; end ;
26932: GO 26731
26934: POP
26935: POP
// if result and not asc then
26936: LD_VAR 0 6
26940: PUSH
26941: LD_VAR 0 4
26945: NOT
26946: AND
26947: IFFALSE 27022
// begin tmp := result ;
26949: LD_ADDR_VAR 0 9
26953: PUSH
26954: LD_VAR 0 6
26958: ST_TO_ADDR
// for i = tmp downto 1 do
26959: LD_ADDR_VAR 0 7
26963: PUSH
26964: DOUBLE
26965: LD_VAR 0 9
26969: INC
26970: ST_TO_ADDR
26971: LD_INT 1
26973: PUSH
26974: FOR_DOWNTO
26975: IFFALSE 27020
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
26977: LD_ADDR_VAR 0 6
26981: PUSH
26982: LD_VAR 0 6
26986: PPUSH
26987: LD_VAR 0 9
26991: PUSH
26992: LD_VAR 0 7
26996: MINUS
26997: PUSH
26998: LD_INT 1
27000: PLUS
27001: PPUSH
27002: LD_VAR 0 9
27006: PUSH
27007: LD_VAR 0 7
27011: ARRAY
27012: PPUSH
27013: CALL_OW 1
27017: ST_TO_ADDR
27018: GO 26974
27020: POP
27021: POP
// end ; tmp := [ ] ;
27022: LD_ADDR_VAR 0 9
27026: PUSH
27027: EMPTY
27028: ST_TO_ADDR
// if mode then
27029: LD_VAR 0 5
27033: IFFALSE 27102
// begin for i = 1 to result do
27035: LD_ADDR_VAR 0 7
27039: PUSH
27040: DOUBLE
27041: LD_INT 1
27043: DEC
27044: ST_TO_ADDR
27045: LD_VAR 0 6
27049: PUSH
27050: FOR_TO
27051: IFFALSE 27090
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
27053: LD_ADDR_VAR 0 9
27057: PUSH
27058: LD_VAR 0 9
27062: PPUSH
27063: LD_VAR 0 7
27067: PPUSH
27068: LD_VAR 0 6
27072: PUSH
27073: LD_VAR 0 7
27077: ARRAY
27078: PUSH
27079: LD_INT 1
27081: ARRAY
27082: PPUSH
27083: CALL_OW 1
27087: ST_TO_ADDR
27088: GO 27050
27090: POP
27091: POP
// result := tmp ;
27092: LD_ADDR_VAR 0 6
27096: PUSH
27097: LD_VAR 0 9
27101: ST_TO_ADDR
// end ; end ;
27102: LD_VAR 0 6
27106: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
27107: LD_INT 0
27109: PPUSH
27110: PPUSH
27111: PPUSH
27112: PPUSH
27113: PPUSH
27114: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
27115: LD_ADDR_VAR 0 5
27119: PUSH
27120: LD_INT 0
27122: PUSH
27123: LD_INT 0
27125: PUSH
27126: LD_INT 0
27128: PUSH
27129: EMPTY
27130: PUSH
27131: EMPTY
27132: LIST
27133: LIST
27134: LIST
27135: LIST
27136: ST_TO_ADDR
// if not x or not y then
27137: LD_VAR 0 2
27141: NOT
27142: PUSH
27143: LD_VAR 0 3
27147: NOT
27148: OR
27149: IFFALSE 27153
// exit ;
27151: GO 28799
// if not range then
27153: LD_VAR 0 4
27157: NOT
27158: IFFALSE 27168
// range := 10 ;
27160: LD_ADDR_VAR 0 4
27164: PUSH
27165: LD_INT 10
27167: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27168: LD_ADDR_VAR 0 8
27172: PUSH
27173: LD_INT 81
27175: PUSH
27176: LD_VAR 0 1
27180: PUSH
27181: EMPTY
27182: LIST
27183: LIST
27184: PUSH
27185: LD_INT 92
27187: PUSH
27188: LD_VAR 0 2
27192: PUSH
27193: LD_VAR 0 3
27197: PUSH
27198: LD_VAR 0 4
27202: PUSH
27203: EMPTY
27204: LIST
27205: LIST
27206: LIST
27207: LIST
27208: PUSH
27209: LD_INT 3
27211: PUSH
27212: LD_INT 21
27214: PUSH
27215: LD_INT 3
27217: PUSH
27218: EMPTY
27219: LIST
27220: LIST
27221: PUSH
27222: EMPTY
27223: LIST
27224: LIST
27225: PUSH
27226: EMPTY
27227: LIST
27228: LIST
27229: LIST
27230: PPUSH
27231: CALL_OW 69
27235: ST_TO_ADDR
// if not tmp then
27236: LD_VAR 0 8
27240: NOT
27241: IFFALSE 27245
// exit ;
27243: GO 28799
// for i in tmp do
27245: LD_ADDR_VAR 0 6
27249: PUSH
27250: LD_VAR 0 8
27254: PUSH
27255: FOR_IN
27256: IFFALSE 28774
// begin points := [ 0 , 0 , 0 ] ;
27258: LD_ADDR_VAR 0 9
27262: PUSH
27263: LD_INT 0
27265: PUSH
27266: LD_INT 0
27268: PUSH
27269: LD_INT 0
27271: PUSH
27272: EMPTY
27273: LIST
27274: LIST
27275: LIST
27276: ST_TO_ADDR
// bpoints := 1 ;
27277: LD_ADDR_VAR 0 10
27281: PUSH
27282: LD_INT 1
27284: ST_TO_ADDR
// case GetType ( i ) of unit_human :
27285: LD_VAR 0 6
27289: PPUSH
27290: CALL_OW 247
27294: PUSH
27295: LD_INT 1
27297: DOUBLE
27298: EQUAL
27299: IFTRUE 27303
27301: GO 27881
27303: POP
// begin if GetClass ( i ) = 1 then
27304: LD_VAR 0 6
27308: PPUSH
27309: CALL_OW 257
27313: PUSH
27314: LD_INT 1
27316: EQUAL
27317: IFFALSE 27338
// points := [ 10 , 5 , 3 ] ;
27319: LD_ADDR_VAR 0 9
27323: PUSH
27324: LD_INT 10
27326: PUSH
27327: LD_INT 5
27329: PUSH
27330: LD_INT 3
27332: PUSH
27333: EMPTY
27334: LIST
27335: LIST
27336: LIST
27337: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
27338: LD_VAR 0 6
27342: PPUSH
27343: CALL_OW 257
27347: PUSH
27348: LD_INT 2
27350: PUSH
27351: LD_INT 3
27353: PUSH
27354: LD_INT 4
27356: PUSH
27357: EMPTY
27358: LIST
27359: LIST
27360: LIST
27361: IN
27362: IFFALSE 27383
// points := [ 3 , 2 , 1 ] ;
27364: LD_ADDR_VAR 0 9
27368: PUSH
27369: LD_INT 3
27371: PUSH
27372: LD_INT 2
27374: PUSH
27375: LD_INT 1
27377: PUSH
27378: EMPTY
27379: LIST
27380: LIST
27381: LIST
27382: ST_TO_ADDR
// if GetClass ( i ) = 5 then
27383: LD_VAR 0 6
27387: PPUSH
27388: CALL_OW 257
27392: PUSH
27393: LD_INT 5
27395: EQUAL
27396: IFFALSE 27417
// points := [ 130 , 5 , 2 ] ;
27398: LD_ADDR_VAR 0 9
27402: PUSH
27403: LD_INT 130
27405: PUSH
27406: LD_INT 5
27408: PUSH
27409: LD_INT 2
27411: PUSH
27412: EMPTY
27413: LIST
27414: LIST
27415: LIST
27416: ST_TO_ADDR
// if GetClass ( i ) = 8 then
27417: LD_VAR 0 6
27421: PPUSH
27422: CALL_OW 257
27426: PUSH
27427: LD_INT 8
27429: EQUAL
27430: IFFALSE 27451
// points := [ 35 , 35 , 30 ] ;
27432: LD_ADDR_VAR 0 9
27436: PUSH
27437: LD_INT 35
27439: PUSH
27440: LD_INT 35
27442: PUSH
27443: LD_INT 30
27445: PUSH
27446: EMPTY
27447: LIST
27448: LIST
27449: LIST
27450: ST_TO_ADDR
// if GetClass ( i ) = 9 then
27451: LD_VAR 0 6
27455: PPUSH
27456: CALL_OW 257
27460: PUSH
27461: LD_INT 9
27463: EQUAL
27464: IFFALSE 27485
// points := [ 20 , 55 , 40 ] ;
27466: LD_ADDR_VAR 0 9
27470: PUSH
27471: LD_INT 20
27473: PUSH
27474: LD_INT 55
27476: PUSH
27477: LD_INT 40
27479: PUSH
27480: EMPTY
27481: LIST
27482: LIST
27483: LIST
27484: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
27485: LD_VAR 0 6
27489: PPUSH
27490: CALL_OW 257
27494: PUSH
27495: LD_INT 12
27497: PUSH
27498: LD_INT 16
27500: PUSH
27501: EMPTY
27502: LIST
27503: LIST
27504: IN
27505: IFFALSE 27526
// points := [ 5 , 3 , 2 ] ;
27507: LD_ADDR_VAR 0 9
27511: PUSH
27512: LD_INT 5
27514: PUSH
27515: LD_INT 3
27517: PUSH
27518: LD_INT 2
27520: PUSH
27521: EMPTY
27522: LIST
27523: LIST
27524: LIST
27525: ST_TO_ADDR
// if GetClass ( i ) = 17 then
27526: LD_VAR 0 6
27530: PPUSH
27531: CALL_OW 257
27535: PUSH
27536: LD_INT 17
27538: EQUAL
27539: IFFALSE 27560
// points := [ 100 , 50 , 75 ] ;
27541: LD_ADDR_VAR 0 9
27545: PUSH
27546: LD_INT 100
27548: PUSH
27549: LD_INT 50
27551: PUSH
27552: LD_INT 75
27554: PUSH
27555: EMPTY
27556: LIST
27557: LIST
27558: LIST
27559: ST_TO_ADDR
// if GetClass ( i ) = 15 then
27560: LD_VAR 0 6
27564: PPUSH
27565: CALL_OW 257
27569: PUSH
27570: LD_INT 15
27572: EQUAL
27573: IFFALSE 27594
// points := [ 10 , 5 , 3 ] ;
27575: LD_ADDR_VAR 0 9
27579: PUSH
27580: LD_INT 10
27582: PUSH
27583: LD_INT 5
27585: PUSH
27586: LD_INT 3
27588: PUSH
27589: EMPTY
27590: LIST
27591: LIST
27592: LIST
27593: ST_TO_ADDR
// if GetClass ( i ) = 14 then
27594: LD_VAR 0 6
27598: PPUSH
27599: CALL_OW 257
27603: PUSH
27604: LD_INT 14
27606: EQUAL
27607: IFFALSE 27628
// points := [ 10 , 0 , 0 ] ;
27609: LD_ADDR_VAR 0 9
27613: PUSH
27614: LD_INT 10
27616: PUSH
27617: LD_INT 0
27619: PUSH
27620: LD_INT 0
27622: PUSH
27623: EMPTY
27624: LIST
27625: LIST
27626: LIST
27627: ST_TO_ADDR
// if GetClass ( i ) = 11 then
27628: LD_VAR 0 6
27632: PPUSH
27633: CALL_OW 257
27637: PUSH
27638: LD_INT 11
27640: EQUAL
27641: IFFALSE 27662
// points := [ 30 , 10 , 5 ] ;
27643: LD_ADDR_VAR 0 9
27647: PUSH
27648: LD_INT 30
27650: PUSH
27651: LD_INT 10
27653: PUSH
27654: LD_INT 5
27656: PUSH
27657: EMPTY
27658: LIST
27659: LIST
27660: LIST
27661: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
27662: LD_VAR 0 1
27666: PPUSH
27667: LD_INT 5
27669: PPUSH
27670: CALL_OW 321
27674: PUSH
27675: LD_INT 2
27677: EQUAL
27678: IFFALSE 27695
// bpoints := bpoints * 1.8 ;
27680: LD_ADDR_VAR 0 10
27684: PUSH
27685: LD_VAR 0 10
27689: PUSH
27690: LD_REAL  1.80000000000000E+0000
27693: MUL
27694: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
27695: LD_VAR 0 6
27699: PPUSH
27700: CALL_OW 257
27704: PUSH
27705: LD_INT 1
27707: PUSH
27708: LD_INT 2
27710: PUSH
27711: LD_INT 3
27713: PUSH
27714: LD_INT 4
27716: PUSH
27717: EMPTY
27718: LIST
27719: LIST
27720: LIST
27721: LIST
27722: IN
27723: PUSH
27724: LD_VAR 0 1
27728: PPUSH
27729: LD_INT 51
27731: PPUSH
27732: CALL_OW 321
27736: PUSH
27737: LD_INT 2
27739: EQUAL
27740: AND
27741: IFFALSE 27758
// bpoints := bpoints * 1.2 ;
27743: LD_ADDR_VAR 0 10
27747: PUSH
27748: LD_VAR 0 10
27752: PUSH
27753: LD_REAL  1.20000000000000E+0000
27756: MUL
27757: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
27758: LD_VAR 0 6
27762: PPUSH
27763: CALL_OW 257
27767: PUSH
27768: LD_INT 5
27770: PUSH
27771: LD_INT 7
27773: PUSH
27774: LD_INT 9
27776: PUSH
27777: EMPTY
27778: LIST
27779: LIST
27780: LIST
27781: IN
27782: PUSH
27783: LD_VAR 0 1
27787: PPUSH
27788: LD_INT 52
27790: PPUSH
27791: CALL_OW 321
27795: PUSH
27796: LD_INT 2
27798: EQUAL
27799: AND
27800: IFFALSE 27817
// bpoints := bpoints * 1.5 ;
27802: LD_ADDR_VAR 0 10
27806: PUSH
27807: LD_VAR 0 10
27811: PUSH
27812: LD_REAL  1.50000000000000E+0000
27815: MUL
27816: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
27817: LD_VAR 0 1
27821: PPUSH
27822: LD_INT 66
27824: PPUSH
27825: CALL_OW 321
27829: PUSH
27830: LD_INT 2
27832: EQUAL
27833: IFFALSE 27850
// bpoints := bpoints * 1.1 ;
27835: LD_ADDR_VAR 0 10
27839: PUSH
27840: LD_VAR 0 10
27844: PUSH
27845: LD_REAL  1.10000000000000E+0000
27848: MUL
27849: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
27850: LD_ADDR_VAR 0 10
27854: PUSH
27855: LD_VAR 0 10
27859: PUSH
27860: LD_VAR 0 6
27864: PPUSH
27865: LD_INT 1
27867: PPUSH
27868: CALL_OW 259
27872: PUSH
27873: LD_REAL  1.15000000000000E+0000
27876: MUL
27877: MUL
27878: ST_TO_ADDR
// end ; unit_vehicle :
27879: GO 28703
27881: LD_INT 2
27883: DOUBLE
27884: EQUAL
27885: IFTRUE 27889
27887: GO 28691
27889: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
27890: LD_VAR 0 6
27894: PPUSH
27895: CALL_OW 264
27899: PUSH
27900: LD_INT 2
27902: PUSH
27903: LD_INT 42
27905: PUSH
27906: LD_INT 24
27908: PUSH
27909: EMPTY
27910: LIST
27911: LIST
27912: LIST
27913: IN
27914: IFFALSE 27935
// points := [ 25 , 5 , 3 ] ;
27916: LD_ADDR_VAR 0 9
27920: PUSH
27921: LD_INT 25
27923: PUSH
27924: LD_INT 5
27926: PUSH
27927: LD_INT 3
27929: PUSH
27930: EMPTY
27931: LIST
27932: LIST
27933: LIST
27934: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
27935: LD_VAR 0 6
27939: PPUSH
27940: CALL_OW 264
27944: PUSH
27945: LD_INT 4
27947: PUSH
27948: LD_INT 43
27950: PUSH
27951: LD_INT 25
27953: PUSH
27954: EMPTY
27955: LIST
27956: LIST
27957: LIST
27958: IN
27959: IFFALSE 27980
// points := [ 40 , 15 , 5 ] ;
27961: LD_ADDR_VAR 0 9
27965: PUSH
27966: LD_INT 40
27968: PUSH
27969: LD_INT 15
27971: PUSH
27972: LD_INT 5
27974: PUSH
27975: EMPTY
27976: LIST
27977: LIST
27978: LIST
27979: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
27980: LD_VAR 0 6
27984: PPUSH
27985: CALL_OW 264
27989: PUSH
27990: LD_INT 3
27992: PUSH
27993: LD_INT 23
27995: PUSH
27996: EMPTY
27997: LIST
27998: LIST
27999: IN
28000: IFFALSE 28021
// points := [ 7 , 25 , 8 ] ;
28002: LD_ADDR_VAR 0 9
28006: PUSH
28007: LD_INT 7
28009: PUSH
28010: LD_INT 25
28012: PUSH
28013: LD_INT 8
28015: PUSH
28016: EMPTY
28017: LIST
28018: LIST
28019: LIST
28020: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
28021: LD_VAR 0 6
28025: PPUSH
28026: CALL_OW 264
28030: PUSH
28031: LD_INT 5
28033: PUSH
28034: LD_INT 27
28036: PUSH
28037: LD_INT 44
28039: PUSH
28040: EMPTY
28041: LIST
28042: LIST
28043: LIST
28044: IN
28045: IFFALSE 28066
// points := [ 14 , 50 , 16 ] ;
28047: LD_ADDR_VAR 0 9
28051: PUSH
28052: LD_INT 14
28054: PUSH
28055: LD_INT 50
28057: PUSH
28058: LD_INT 16
28060: PUSH
28061: EMPTY
28062: LIST
28063: LIST
28064: LIST
28065: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
28066: LD_VAR 0 6
28070: PPUSH
28071: CALL_OW 264
28075: PUSH
28076: LD_INT 6
28078: PUSH
28079: LD_INT 46
28081: PUSH
28082: EMPTY
28083: LIST
28084: LIST
28085: IN
28086: IFFALSE 28107
// points := [ 32 , 120 , 70 ] ;
28088: LD_ADDR_VAR 0 9
28092: PUSH
28093: LD_INT 32
28095: PUSH
28096: LD_INT 120
28098: PUSH
28099: LD_INT 70
28101: PUSH
28102: EMPTY
28103: LIST
28104: LIST
28105: LIST
28106: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
28107: LD_VAR 0 6
28111: PPUSH
28112: CALL_OW 264
28116: PUSH
28117: LD_INT 7
28119: PUSH
28120: LD_INT 28
28122: PUSH
28123: LD_INT 45
28125: PUSH
28126: EMPTY
28127: LIST
28128: LIST
28129: LIST
28130: IN
28131: IFFALSE 28152
// points := [ 35 , 20 , 45 ] ;
28133: LD_ADDR_VAR 0 9
28137: PUSH
28138: LD_INT 35
28140: PUSH
28141: LD_INT 20
28143: PUSH
28144: LD_INT 45
28146: PUSH
28147: EMPTY
28148: LIST
28149: LIST
28150: LIST
28151: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
28152: LD_VAR 0 6
28156: PPUSH
28157: CALL_OW 264
28161: PUSH
28162: LD_INT 47
28164: PUSH
28165: EMPTY
28166: LIST
28167: IN
28168: IFFALSE 28189
// points := [ 67 , 45 , 75 ] ;
28170: LD_ADDR_VAR 0 9
28174: PUSH
28175: LD_INT 67
28177: PUSH
28178: LD_INT 45
28180: PUSH
28181: LD_INT 75
28183: PUSH
28184: EMPTY
28185: LIST
28186: LIST
28187: LIST
28188: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
28189: LD_VAR 0 6
28193: PPUSH
28194: CALL_OW 264
28198: PUSH
28199: LD_INT 26
28201: PUSH
28202: EMPTY
28203: LIST
28204: IN
28205: IFFALSE 28226
// points := [ 120 , 30 , 80 ] ;
28207: LD_ADDR_VAR 0 9
28211: PUSH
28212: LD_INT 120
28214: PUSH
28215: LD_INT 30
28217: PUSH
28218: LD_INT 80
28220: PUSH
28221: EMPTY
28222: LIST
28223: LIST
28224: LIST
28225: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
28226: LD_VAR 0 6
28230: PPUSH
28231: CALL_OW 264
28235: PUSH
28236: LD_INT 22
28238: PUSH
28239: EMPTY
28240: LIST
28241: IN
28242: IFFALSE 28263
// points := [ 40 , 1 , 1 ] ;
28244: LD_ADDR_VAR 0 9
28248: PUSH
28249: LD_INT 40
28251: PUSH
28252: LD_INT 1
28254: PUSH
28255: LD_INT 1
28257: PUSH
28258: EMPTY
28259: LIST
28260: LIST
28261: LIST
28262: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
28263: LD_VAR 0 6
28267: PPUSH
28268: CALL_OW 264
28272: PUSH
28273: LD_INT 29
28275: PUSH
28276: EMPTY
28277: LIST
28278: IN
28279: IFFALSE 28300
// points := [ 70 , 200 , 400 ] ;
28281: LD_ADDR_VAR 0 9
28285: PUSH
28286: LD_INT 70
28288: PUSH
28289: LD_INT 200
28291: PUSH
28292: LD_INT 400
28294: PUSH
28295: EMPTY
28296: LIST
28297: LIST
28298: LIST
28299: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
28300: LD_VAR 0 6
28304: PPUSH
28305: CALL_OW 264
28309: PUSH
28310: LD_INT 14
28312: PUSH
28313: LD_INT 53
28315: PUSH
28316: EMPTY
28317: LIST
28318: LIST
28319: IN
28320: IFFALSE 28341
// points := [ 40 , 10 , 20 ] ;
28322: LD_ADDR_VAR 0 9
28326: PUSH
28327: LD_INT 40
28329: PUSH
28330: LD_INT 10
28332: PUSH
28333: LD_INT 20
28335: PUSH
28336: EMPTY
28337: LIST
28338: LIST
28339: LIST
28340: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
28341: LD_VAR 0 6
28345: PPUSH
28346: CALL_OW 264
28350: PUSH
28351: LD_INT 9
28353: PUSH
28354: EMPTY
28355: LIST
28356: IN
28357: IFFALSE 28378
// points := [ 5 , 70 , 20 ] ;
28359: LD_ADDR_VAR 0 9
28363: PUSH
28364: LD_INT 5
28366: PUSH
28367: LD_INT 70
28369: PUSH
28370: LD_INT 20
28372: PUSH
28373: EMPTY
28374: LIST
28375: LIST
28376: LIST
28377: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
28378: LD_VAR 0 6
28382: PPUSH
28383: CALL_OW 264
28387: PUSH
28388: LD_INT 10
28390: PUSH
28391: EMPTY
28392: LIST
28393: IN
28394: IFFALSE 28415
// points := [ 35 , 110 , 70 ] ;
28396: LD_ADDR_VAR 0 9
28400: PUSH
28401: LD_INT 35
28403: PUSH
28404: LD_INT 110
28406: PUSH
28407: LD_INT 70
28409: PUSH
28410: EMPTY
28411: LIST
28412: LIST
28413: LIST
28414: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
28415: LD_VAR 0 6
28419: PPUSH
28420: CALL_OW 265
28424: PUSH
28425: LD_INT 25
28427: EQUAL
28428: IFFALSE 28449
// points := [ 80 , 65 , 100 ] ;
28430: LD_ADDR_VAR 0 9
28434: PUSH
28435: LD_INT 80
28437: PUSH
28438: LD_INT 65
28440: PUSH
28441: LD_INT 100
28443: PUSH
28444: EMPTY
28445: LIST
28446: LIST
28447: LIST
28448: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
28449: LD_VAR 0 6
28453: PPUSH
28454: CALL_OW 263
28458: PUSH
28459: LD_INT 1
28461: EQUAL
28462: IFFALSE 28497
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
28464: LD_ADDR_VAR 0 10
28468: PUSH
28469: LD_VAR 0 10
28473: PUSH
28474: LD_VAR 0 6
28478: PPUSH
28479: CALL_OW 311
28483: PPUSH
28484: LD_INT 3
28486: PPUSH
28487: CALL_OW 259
28491: PUSH
28492: LD_INT 4
28494: MUL
28495: MUL
28496: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
28497: LD_VAR 0 6
28501: PPUSH
28502: CALL_OW 263
28506: PUSH
28507: LD_INT 2
28509: EQUAL
28510: IFFALSE 28561
// begin j := IsControledBy ( i ) ;
28512: LD_ADDR_VAR 0 7
28516: PUSH
28517: LD_VAR 0 6
28521: PPUSH
28522: CALL_OW 312
28526: ST_TO_ADDR
// if j then
28527: LD_VAR 0 7
28531: IFFALSE 28561
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
28533: LD_ADDR_VAR 0 10
28537: PUSH
28538: LD_VAR 0 10
28542: PUSH
28543: LD_VAR 0 7
28547: PPUSH
28548: LD_INT 3
28550: PPUSH
28551: CALL_OW 259
28555: PUSH
28556: LD_INT 3
28558: MUL
28559: MUL
28560: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
28561: LD_VAR 0 6
28565: PPUSH
28566: CALL_OW 264
28570: PUSH
28571: LD_INT 5
28573: PUSH
28574: LD_INT 6
28576: PUSH
28577: LD_INT 46
28579: PUSH
28580: LD_INT 44
28582: PUSH
28583: LD_INT 47
28585: PUSH
28586: LD_INT 45
28588: PUSH
28589: LD_INT 28
28591: PUSH
28592: LD_INT 7
28594: PUSH
28595: LD_INT 27
28597: PUSH
28598: LD_INT 29
28600: PUSH
28601: EMPTY
28602: LIST
28603: LIST
28604: LIST
28605: LIST
28606: LIST
28607: LIST
28608: LIST
28609: LIST
28610: LIST
28611: LIST
28612: IN
28613: PUSH
28614: LD_VAR 0 1
28618: PPUSH
28619: LD_INT 52
28621: PPUSH
28622: CALL_OW 321
28626: PUSH
28627: LD_INT 2
28629: EQUAL
28630: AND
28631: IFFALSE 28648
// bpoints := bpoints * 1.2 ;
28633: LD_ADDR_VAR 0 10
28637: PUSH
28638: LD_VAR 0 10
28642: PUSH
28643: LD_REAL  1.20000000000000E+0000
28646: MUL
28647: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
28648: LD_VAR 0 6
28652: PPUSH
28653: CALL_OW 264
28657: PUSH
28658: LD_INT 6
28660: PUSH
28661: LD_INT 46
28663: PUSH
28664: LD_INT 47
28666: PUSH
28667: EMPTY
28668: LIST
28669: LIST
28670: LIST
28671: IN
28672: IFFALSE 28689
// bpoints := bpoints * 1.2 ;
28674: LD_ADDR_VAR 0 10
28678: PUSH
28679: LD_VAR 0 10
28683: PUSH
28684: LD_REAL  1.20000000000000E+0000
28687: MUL
28688: ST_TO_ADDR
// end ; unit_building :
28689: GO 28703
28691: LD_INT 3
28693: DOUBLE
28694: EQUAL
28695: IFTRUE 28699
28697: GO 28702
28699: POP
// ; end ;
28700: GO 28703
28702: POP
// for j = 1 to 3 do
28703: LD_ADDR_VAR 0 7
28707: PUSH
28708: DOUBLE
28709: LD_INT 1
28711: DEC
28712: ST_TO_ADDR
28713: LD_INT 3
28715: PUSH
28716: FOR_TO
28717: IFFALSE 28770
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
28719: LD_ADDR_VAR 0 5
28723: PUSH
28724: LD_VAR 0 5
28728: PPUSH
28729: LD_VAR 0 7
28733: PPUSH
28734: LD_VAR 0 5
28738: PUSH
28739: LD_VAR 0 7
28743: ARRAY
28744: PUSH
28745: LD_VAR 0 9
28749: PUSH
28750: LD_VAR 0 7
28754: ARRAY
28755: PUSH
28756: LD_VAR 0 10
28760: MUL
28761: PLUS
28762: PPUSH
28763: CALL_OW 1
28767: ST_TO_ADDR
28768: GO 28716
28770: POP
28771: POP
// end ;
28772: GO 27255
28774: POP
28775: POP
// result := Replace ( result , 4 , tmp ) ;
28776: LD_ADDR_VAR 0 5
28780: PUSH
28781: LD_VAR 0 5
28785: PPUSH
28786: LD_INT 4
28788: PPUSH
28789: LD_VAR 0 8
28793: PPUSH
28794: CALL_OW 1
28798: ST_TO_ADDR
// end ;
28799: LD_VAR 0 5
28803: RET
// export function DangerAtRange ( unit , range ) ; begin
28804: LD_INT 0
28806: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
28807: LD_ADDR_VAR 0 3
28811: PUSH
28812: LD_VAR 0 1
28816: PPUSH
28817: CALL_OW 255
28821: PPUSH
28822: LD_VAR 0 1
28826: PPUSH
28827: CALL_OW 250
28831: PPUSH
28832: LD_VAR 0 1
28836: PPUSH
28837: CALL_OW 251
28841: PPUSH
28842: LD_VAR 0 2
28846: PPUSH
28847: CALL 27107 0 4
28851: ST_TO_ADDR
// end ;
28852: LD_VAR 0 3
28856: RET
// export function DangerInArea ( side , area ) ; begin
28857: LD_INT 0
28859: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
28860: LD_ADDR_VAR 0 3
28864: PUSH
28865: LD_VAR 0 2
28869: PPUSH
28870: LD_INT 81
28872: PUSH
28873: LD_VAR 0 1
28877: PUSH
28878: EMPTY
28879: LIST
28880: LIST
28881: PPUSH
28882: CALL_OW 70
28886: ST_TO_ADDR
// end ;
28887: LD_VAR 0 3
28891: RET
// export function IsExtension ( b ) ; begin
28892: LD_INT 0
28894: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
28895: LD_ADDR_VAR 0 2
28899: PUSH
28900: LD_VAR 0 1
28904: PUSH
28905: LD_INT 23
28907: PUSH
28908: LD_INT 20
28910: PUSH
28911: LD_INT 22
28913: PUSH
28914: LD_INT 17
28916: PUSH
28917: LD_INT 24
28919: PUSH
28920: LD_INT 21
28922: PUSH
28923: LD_INT 19
28925: PUSH
28926: LD_INT 16
28928: PUSH
28929: LD_INT 25
28931: PUSH
28932: LD_INT 18
28934: PUSH
28935: EMPTY
28936: LIST
28937: LIST
28938: LIST
28939: LIST
28940: LIST
28941: LIST
28942: LIST
28943: LIST
28944: LIST
28945: LIST
28946: IN
28947: ST_TO_ADDR
// end ;
28948: LD_VAR 0 2
28952: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
28953: LD_INT 0
28955: PPUSH
28956: PPUSH
28957: PPUSH
// result := [ ] ;
28958: LD_ADDR_VAR 0 3
28962: PUSH
28963: EMPTY
28964: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
28965: LD_ADDR_VAR 0 4
28969: PUSH
28970: LD_VAR 0 2
28974: PPUSH
28975: LD_INT 21
28977: PUSH
28978: LD_INT 3
28980: PUSH
28981: EMPTY
28982: LIST
28983: LIST
28984: PPUSH
28985: CALL_OW 70
28989: ST_TO_ADDR
// if not tmp then
28990: LD_VAR 0 4
28994: NOT
28995: IFFALSE 28999
// exit ;
28997: GO 29057
// for i in tmp do
28999: LD_ADDR_VAR 0 5
29003: PUSH
29004: LD_VAR 0 4
29008: PUSH
29009: FOR_IN
29010: IFFALSE 29045
// if GetBase ( i ) <> base then
29012: LD_VAR 0 5
29016: PPUSH
29017: CALL_OW 274
29021: PUSH
29022: LD_VAR 0 1
29026: NONEQUAL
29027: IFFALSE 29043
// ComLinkToBase ( base , i ) ;
29029: LD_VAR 0 1
29033: PPUSH
29034: LD_VAR 0 5
29038: PPUSH
29039: CALL_OW 169
29043: GO 29009
29045: POP
29046: POP
// result := tmp ;
29047: LD_ADDR_VAR 0 3
29051: PUSH
29052: LD_VAR 0 4
29056: ST_TO_ADDR
// end ;
29057: LD_VAR 0 3
29061: RET
// export function ComComplete ( unit , b ) ; var i ; begin
29062: LD_INT 0
29064: PPUSH
29065: PPUSH
// if BuildingStatus ( b ) = bs_build then
29066: LD_VAR 0 2
29070: PPUSH
29071: CALL_OW 461
29075: PUSH
29076: LD_INT 1
29078: EQUAL
29079: IFFALSE 29139
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
29081: LD_VAR 0 1
29085: PPUSH
29086: LD_STRING h
29088: PUSH
29089: LD_VAR 0 2
29093: PPUSH
29094: CALL_OW 250
29098: PUSH
29099: LD_VAR 0 2
29103: PPUSH
29104: CALL_OW 251
29108: PUSH
29109: LD_VAR 0 2
29113: PUSH
29114: LD_INT 0
29116: PUSH
29117: LD_INT 0
29119: PUSH
29120: LD_INT 0
29122: PUSH
29123: EMPTY
29124: LIST
29125: LIST
29126: LIST
29127: LIST
29128: LIST
29129: LIST
29130: LIST
29131: PUSH
29132: EMPTY
29133: LIST
29134: PPUSH
29135: CALL_OW 446
// end ;
29139: LD_VAR 0 3
29143: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
29144: LD_INT 0
29146: PPUSH
29147: PPUSH
29148: PPUSH
29149: PPUSH
29150: PPUSH
29151: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
29152: LD_VAR 0 1
29156: NOT
29157: PUSH
29158: LD_VAR 0 1
29162: PPUSH
29163: CALL_OW 263
29167: PUSH
29168: LD_INT 2
29170: EQUAL
29171: NOT
29172: OR
29173: IFFALSE 29177
// exit ;
29175: GO 29493
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
29177: LD_ADDR_VAR 0 6
29181: PUSH
29182: LD_INT 22
29184: PUSH
29185: LD_VAR 0 1
29189: PPUSH
29190: CALL_OW 255
29194: PUSH
29195: EMPTY
29196: LIST
29197: LIST
29198: PUSH
29199: LD_INT 2
29201: PUSH
29202: LD_INT 30
29204: PUSH
29205: LD_INT 36
29207: PUSH
29208: EMPTY
29209: LIST
29210: LIST
29211: PUSH
29212: LD_INT 34
29214: PUSH
29215: LD_INT 31
29217: PUSH
29218: EMPTY
29219: LIST
29220: LIST
29221: PUSH
29222: EMPTY
29223: LIST
29224: LIST
29225: LIST
29226: PUSH
29227: EMPTY
29228: LIST
29229: LIST
29230: PPUSH
29231: CALL_OW 69
29235: ST_TO_ADDR
// if not tmp then
29236: LD_VAR 0 6
29240: NOT
29241: IFFALSE 29245
// exit ;
29243: GO 29493
// result := [ ] ;
29245: LD_ADDR_VAR 0 2
29249: PUSH
29250: EMPTY
29251: ST_TO_ADDR
// for i in tmp do
29252: LD_ADDR_VAR 0 3
29256: PUSH
29257: LD_VAR 0 6
29261: PUSH
29262: FOR_IN
29263: IFFALSE 29334
// begin t := UnitsInside ( i ) ;
29265: LD_ADDR_VAR 0 4
29269: PUSH
29270: LD_VAR 0 3
29274: PPUSH
29275: CALL_OW 313
29279: ST_TO_ADDR
// if t then
29280: LD_VAR 0 4
29284: IFFALSE 29332
// for j in t do
29286: LD_ADDR_VAR 0 7
29290: PUSH
29291: LD_VAR 0 4
29295: PUSH
29296: FOR_IN
29297: IFFALSE 29330
// result := Insert ( result , result + 1 , j ) ;
29299: LD_ADDR_VAR 0 2
29303: PUSH
29304: LD_VAR 0 2
29308: PPUSH
29309: LD_VAR 0 2
29313: PUSH
29314: LD_INT 1
29316: PLUS
29317: PPUSH
29318: LD_VAR 0 7
29322: PPUSH
29323: CALL_OW 2
29327: ST_TO_ADDR
29328: GO 29296
29330: POP
29331: POP
// end ;
29332: GO 29262
29334: POP
29335: POP
// if not result then
29336: LD_VAR 0 2
29340: NOT
29341: IFFALSE 29345
// exit ;
29343: GO 29493
// mech := result [ 1 ] ;
29345: LD_ADDR_VAR 0 5
29349: PUSH
29350: LD_VAR 0 2
29354: PUSH
29355: LD_INT 1
29357: ARRAY
29358: ST_TO_ADDR
// if result > 1 then
29359: LD_VAR 0 2
29363: PUSH
29364: LD_INT 1
29366: GREATER
29367: IFFALSE 29479
// for i = 2 to result do
29369: LD_ADDR_VAR 0 3
29373: PUSH
29374: DOUBLE
29375: LD_INT 2
29377: DEC
29378: ST_TO_ADDR
29379: LD_VAR 0 2
29383: PUSH
29384: FOR_TO
29385: IFFALSE 29477
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
29387: LD_ADDR_VAR 0 4
29391: PUSH
29392: LD_VAR 0 2
29396: PUSH
29397: LD_VAR 0 3
29401: ARRAY
29402: PPUSH
29403: LD_INT 3
29405: PPUSH
29406: CALL_OW 259
29410: PUSH
29411: LD_VAR 0 2
29415: PUSH
29416: LD_VAR 0 3
29420: ARRAY
29421: PPUSH
29422: CALL_OW 432
29426: MINUS
29427: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
29428: LD_VAR 0 4
29432: PUSH
29433: LD_VAR 0 5
29437: PPUSH
29438: LD_INT 3
29440: PPUSH
29441: CALL_OW 259
29445: PUSH
29446: LD_VAR 0 5
29450: PPUSH
29451: CALL_OW 432
29455: MINUS
29456: GREATEREQUAL
29457: IFFALSE 29475
// mech := result [ i ] ;
29459: LD_ADDR_VAR 0 5
29463: PUSH
29464: LD_VAR 0 2
29468: PUSH
29469: LD_VAR 0 3
29473: ARRAY
29474: ST_TO_ADDR
// end ;
29475: GO 29384
29477: POP
29478: POP
// ComLinkTo ( vehicle , mech ) ;
29479: LD_VAR 0 1
29483: PPUSH
29484: LD_VAR 0 5
29488: PPUSH
29489: CALL_OW 135
// end ;
29493: LD_VAR 0 2
29497: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
29498: LD_INT 0
29500: PPUSH
29501: PPUSH
29502: PPUSH
29503: PPUSH
29504: PPUSH
29505: PPUSH
29506: PPUSH
29507: PPUSH
29508: PPUSH
29509: PPUSH
29510: PPUSH
29511: PPUSH
29512: PPUSH
// result := [ ] ;
29513: LD_ADDR_VAR 0 7
29517: PUSH
29518: EMPTY
29519: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
29520: LD_VAR 0 1
29524: PPUSH
29525: CALL_OW 266
29529: PUSH
29530: LD_INT 0
29532: PUSH
29533: LD_INT 1
29535: PUSH
29536: EMPTY
29537: LIST
29538: LIST
29539: IN
29540: NOT
29541: IFFALSE 29545
// exit ;
29543: GO 31176
// if name then
29545: LD_VAR 0 3
29549: IFFALSE 29565
// SetBName ( base_dep , name ) ;
29551: LD_VAR 0 1
29555: PPUSH
29556: LD_VAR 0 3
29560: PPUSH
29561: CALL_OW 500
// base := GetBase ( base_dep ) ;
29565: LD_ADDR_VAR 0 15
29569: PUSH
29570: LD_VAR 0 1
29574: PPUSH
29575: CALL_OW 274
29579: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
29580: LD_ADDR_VAR 0 16
29584: PUSH
29585: LD_VAR 0 1
29589: PPUSH
29590: CALL_OW 255
29594: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
29595: LD_ADDR_VAR 0 17
29599: PUSH
29600: LD_VAR 0 1
29604: PPUSH
29605: CALL_OW 248
29609: ST_TO_ADDR
// if sources then
29610: LD_VAR 0 5
29614: IFFALSE 29661
// for i = 1 to 3 do
29616: LD_ADDR_VAR 0 8
29620: PUSH
29621: DOUBLE
29622: LD_INT 1
29624: DEC
29625: ST_TO_ADDR
29626: LD_INT 3
29628: PUSH
29629: FOR_TO
29630: IFFALSE 29659
// AddResourceType ( base , i , sources [ i ] ) ;
29632: LD_VAR 0 15
29636: PPUSH
29637: LD_VAR 0 8
29641: PPUSH
29642: LD_VAR 0 5
29646: PUSH
29647: LD_VAR 0 8
29651: ARRAY
29652: PPUSH
29653: CALL_OW 276
29657: GO 29629
29659: POP
29660: POP
// buildings := GetBaseBuildings ( base , area ) ;
29661: LD_ADDR_VAR 0 18
29665: PUSH
29666: LD_VAR 0 15
29670: PPUSH
29671: LD_VAR 0 2
29675: PPUSH
29676: CALL 28953 0 2
29680: ST_TO_ADDR
// InitHc ;
29681: CALL_OW 19
// InitUc ;
29685: CALL_OW 18
// uc_side := side ;
29689: LD_ADDR_OWVAR 20
29693: PUSH
29694: LD_VAR 0 16
29698: ST_TO_ADDR
// uc_nation := nation ;
29699: LD_ADDR_OWVAR 21
29703: PUSH
29704: LD_VAR 0 17
29708: ST_TO_ADDR
// if buildings then
29709: LD_VAR 0 18
29713: IFFALSE 31035
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
29715: LD_ADDR_VAR 0 19
29719: PUSH
29720: LD_VAR 0 18
29724: PPUSH
29725: LD_INT 2
29727: PUSH
29728: LD_INT 30
29730: PUSH
29731: LD_INT 29
29733: PUSH
29734: EMPTY
29735: LIST
29736: LIST
29737: PUSH
29738: LD_INT 30
29740: PUSH
29741: LD_INT 30
29743: PUSH
29744: EMPTY
29745: LIST
29746: LIST
29747: PUSH
29748: EMPTY
29749: LIST
29750: LIST
29751: LIST
29752: PPUSH
29753: CALL_OW 72
29757: ST_TO_ADDR
// if tmp then
29758: LD_VAR 0 19
29762: IFFALSE 29810
// for i in tmp do
29764: LD_ADDR_VAR 0 8
29768: PUSH
29769: LD_VAR 0 19
29773: PUSH
29774: FOR_IN
29775: IFFALSE 29808
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
29777: LD_VAR 0 8
29781: PPUSH
29782: CALL_OW 250
29786: PPUSH
29787: LD_VAR 0 8
29791: PPUSH
29792: CALL_OW 251
29796: PPUSH
29797: LD_VAR 0 16
29801: PPUSH
29802: CALL_OW 441
29806: GO 29774
29808: POP
29809: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
29810: LD_VAR 0 18
29814: PPUSH
29815: LD_INT 2
29817: PUSH
29818: LD_INT 30
29820: PUSH
29821: LD_INT 32
29823: PUSH
29824: EMPTY
29825: LIST
29826: LIST
29827: PUSH
29828: LD_INT 30
29830: PUSH
29831: LD_INT 33
29833: PUSH
29834: EMPTY
29835: LIST
29836: LIST
29837: PUSH
29838: EMPTY
29839: LIST
29840: LIST
29841: LIST
29842: PPUSH
29843: CALL_OW 72
29847: IFFALSE 29935
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
29849: LD_ADDR_VAR 0 8
29853: PUSH
29854: LD_VAR 0 18
29858: PPUSH
29859: LD_INT 2
29861: PUSH
29862: LD_INT 30
29864: PUSH
29865: LD_INT 32
29867: PUSH
29868: EMPTY
29869: LIST
29870: LIST
29871: PUSH
29872: LD_INT 30
29874: PUSH
29875: LD_INT 33
29877: PUSH
29878: EMPTY
29879: LIST
29880: LIST
29881: PUSH
29882: EMPTY
29883: LIST
29884: LIST
29885: LIST
29886: PPUSH
29887: CALL_OW 72
29891: PUSH
29892: FOR_IN
29893: IFFALSE 29933
// begin if not GetBWeapon ( i ) then
29895: LD_VAR 0 8
29899: PPUSH
29900: CALL_OW 269
29904: NOT
29905: IFFALSE 29931
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
29907: LD_VAR 0 8
29911: PPUSH
29912: LD_VAR 0 8
29916: PPUSH
29917: LD_VAR 0 2
29921: PPUSH
29922: CALL 31181 0 2
29926: PPUSH
29927: CALL_OW 431
// end ;
29931: GO 29892
29933: POP
29934: POP
// end ; for i = 1 to personel do
29935: LD_ADDR_VAR 0 8
29939: PUSH
29940: DOUBLE
29941: LD_INT 1
29943: DEC
29944: ST_TO_ADDR
29945: LD_VAR 0 6
29949: PUSH
29950: FOR_TO
29951: IFFALSE 31015
// begin if i > 4 then
29953: LD_VAR 0 8
29957: PUSH
29958: LD_INT 4
29960: GREATER
29961: IFFALSE 29965
// break ;
29963: GO 31015
// case i of 1 :
29965: LD_VAR 0 8
29969: PUSH
29970: LD_INT 1
29972: DOUBLE
29973: EQUAL
29974: IFTRUE 29978
29976: GO 30058
29978: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
29979: LD_ADDR_VAR 0 12
29983: PUSH
29984: LD_VAR 0 18
29988: PPUSH
29989: LD_INT 22
29991: PUSH
29992: LD_VAR 0 16
29996: PUSH
29997: EMPTY
29998: LIST
29999: LIST
30000: PUSH
30001: LD_INT 58
30003: PUSH
30004: EMPTY
30005: LIST
30006: PUSH
30007: LD_INT 2
30009: PUSH
30010: LD_INT 30
30012: PUSH
30013: LD_INT 32
30015: PUSH
30016: EMPTY
30017: LIST
30018: LIST
30019: PUSH
30020: LD_INT 30
30022: PUSH
30023: LD_INT 4
30025: PUSH
30026: EMPTY
30027: LIST
30028: LIST
30029: PUSH
30030: LD_INT 30
30032: PUSH
30033: LD_INT 5
30035: PUSH
30036: EMPTY
30037: LIST
30038: LIST
30039: PUSH
30040: EMPTY
30041: LIST
30042: LIST
30043: LIST
30044: LIST
30045: PUSH
30046: EMPTY
30047: LIST
30048: LIST
30049: LIST
30050: PPUSH
30051: CALL_OW 72
30055: ST_TO_ADDR
30056: GO 30280
30058: LD_INT 2
30060: DOUBLE
30061: EQUAL
30062: IFTRUE 30066
30064: GO 30128
30066: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
30067: LD_ADDR_VAR 0 12
30071: PUSH
30072: LD_VAR 0 18
30076: PPUSH
30077: LD_INT 22
30079: PUSH
30080: LD_VAR 0 16
30084: PUSH
30085: EMPTY
30086: LIST
30087: LIST
30088: PUSH
30089: LD_INT 2
30091: PUSH
30092: LD_INT 30
30094: PUSH
30095: LD_INT 0
30097: PUSH
30098: EMPTY
30099: LIST
30100: LIST
30101: PUSH
30102: LD_INT 30
30104: PUSH
30105: LD_INT 1
30107: PUSH
30108: EMPTY
30109: LIST
30110: LIST
30111: PUSH
30112: EMPTY
30113: LIST
30114: LIST
30115: LIST
30116: PUSH
30117: EMPTY
30118: LIST
30119: LIST
30120: PPUSH
30121: CALL_OW 72
30125: ST_TO_ADDR
30126: GO 30280
30128: LD_INT 3
30130: DOUBLE
30131: EQUAL
30132: IFTRUE 30136
30134: GO 30198
30136: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
30137: LD_ADDR_VAR 0 12
30141: PUSH
30142: LD_VAR 0 18
30146: PPUSH
30147: LD_INT 22
30149: PUSH
30150: LD_VAR 0 16
30154: PUSH
30155: EMPTY
30156: LIST
30157: LIST
30158: PUSH
30159: LD_INT 2
30161: PUSH
30162: LD_INT 30
30164: PUSH
30165: LD_INT 2
30167: PUSH
30168: EMPTY
30169: LIST
30170: LIST
30171: PUSH
30172: LD_INT 30
30174: PUSH
30175: LD_INT 3
30177: PUSH
30178: EMPTY
30179: LIST
30180: LIST
30181: PUSH
30182: EMPTY
30183: LIST
30184: LIST
30185: LIST
30186: PUSH
30187: EMPTY
30188: LIST
30189: LIST
30190: PPUSH
30191: CALL_OW 72
30195: ST_TO_ADDR
30196: GO 30280
30198: LD_INT 4
30200: DOUBLE
30201: EQUAL
30202: IFTRUE 30206
30204: GO 30279
30206: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
30207: LD_ADDR_VAR 0 12
30211: PUSH
30212: LD_VAR 0 18
30216: PPUSH
30217: LD_INT 22
30219: PUSH
30220: LD_VAR 0 16
30224: PUSH
30225: EMPTY
30226: LIST
30227: LIST
30228: PUSH
30229: LD_INT 2
30231: PUSH
30232: LD_INT 30
30234: PUSH
30235: LD_INT 6
30237: PUSH
30238: EMPTY
30239: LIST
30240: LIST
30241: PUSH
30242: LD_INT 30
30244: PUSH
30245: LD_INT 7
30247: PUSH
30248: EMPTY
30249: LIST
30250: LIST
30251: PUSH
30252: LD_INT 30
30254: PUSH
30255: LD_INT 8
30257: PUSH
30258: EMPTY
30259: LIST
30260: LIST
30261: PUSH
30262: EMPTY
30263: LIST
30264: LIST
30265: LIST
30266: LIST
30267: PUSH
30268: EMPTY
30269: LIST
30270: LIST
30271: PPUSH
30272: CALL_OW 72
30276: ST_TO_ADDR
30277: GO 30280
30279: POP
// if i = 1 then
30280: LD_VAR 0 8
30284: PUSH
30285: LD_INT 1
30287: EQUAL
30288: IFFALSE 30399
// begin tmp := [ ] ;
30290: LD_ADDR_VAR 0 19
30294: PUSH
30295: EMPTY
30296: ST_TO_ADDR
// for j in f do
30297: LD_ADDR_VAR 0 9
30301: PUSH
30302: LD_VAR 0 12
30306: PUSH
30307: FOR_IN
30308: IFFALSE 30381
// if GetBType ( j ) = b_bunker then
30310: LD_VAR 0 9
30314: PPUSH
30315: CALL_OW 266
30319: PUSH
30320: LD_INT 32
30322: EQUAL
30323: IFFALSE 30350
// tmp := Insert ( tmp , 1 , j ) else
30325: LD_ADDR_VAR 0 19
30329: PUSH
30330: LD_VAR 0 19
30334: PPUSH
30335: LD_INT 1
30337: PPUSH
30338: LD_VAR 0 9
30342: PPUSH
30343: CALL_OW 2
30347: ST_TO_ADDR
30348: GO 30379
// tmp := Insert ( tmp , tmp + 1 , j ) ;
30350: LD_ADDR_VAR 0 19
30354: PUSH
30355: LD_VAR 0 19
30359: PPUSH
30360: LD_VAR 0 19
30364: PUSH
30365: LD_INT 1
30367: PLUS
30368: PPUSH
30369: LD_VAR 0 9
30373: PPUSH
30374: CALL_OW 2
30378: ST_TO_ADDR
30379: GO 30307
30381: POP
30382: POP
// if tmp then
30383: LD_VAR 0 19
30387: IFFALSE 30399
// f := tmp ;
30389: LD_ADDR_VAR 0 12
30393: PUSH
30394: LD_VAR 0 19
30398: ST_TO_ADDR
// end ; x := personel [ i ] ;
30399: LD_ADDR_VAR 0 13
30403: PUSH
30404: LD_VAR 0 6
30408: PUSH
30409: LD_VAR 0 8
30413: ARRAY
30414: ST_TO_ADDR
// if x = - 1 then
30415: LD_VAR 0 13
30419: PUSH
30420: LD_INT 1
30422: NEG
30423: EQUAL
30424: IFFALSE 30633
// begin for j in f do
30426: LD_ADDR_VAR 0 9
30430: PUSH
30431: LD_VAR 0 12
30435: PUSH
30436: FOR_IN
30437: IFFALSE 30629
// repeat InitHc ;
30439: CALL_OW 19
// if GetBType ( j ) = b_barracks then
30443: LD_VAR 0 9
30447: PPUSH
30448: CALL_OW 266
30452: PUSH
30453: LD_INT 5
30455: EQUAL
30456: IFFALSE 30526
// begin if UnitsInside ( j ) < 3 then
30458: LD_VAR 0 9
30462: PPUSH
30463: CALL_OW 313
30467: PUSH
30468: LD_INT 3
30470: LESS
30471: IFFALSE 30507
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30473: LD_INT 0
30475: PPUSH
30476: LD_INT 5
30478: PUSH
30479: LD_INT 8
30481: PUSH
30482: LD_INT 9
30484: PUSH
30485: EMPTY
30486: LIST
30487: LIST
30488: LIST
30489: PUSH
30490: LD_VAR 0 17
30494: ARRAY
30495: PPUSH
30496: LD_VAR 0 4
30500: PPUSH
30501: CALL_OW 380
30505: GO 30524
// PrepareHuman ( false , i , skill ) ;
30507: LD_INT 0
30509: PPUSH
30510: LD_VAR 0 8
30514: PPUSH
30515: LD_VAR 0 4
30519: PPUSH
30520: CALL_OW 380
// end else
30524: GO 30543
// PrepareHuman ( false , i , skill ) ;
30526: LD_INT 0
30528: PPUSH
30529: LD_VAR 0 8
30533: PPUSH
30534: LD_VAR 0 4
30538: PPUSH
30539: CALL_OW 380
// un := CreateHuman ;
30543: LD_ADDR_VAR 0 14
30547: PUSH
30548: CALL_OW 44
30552: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30553: LD_ADDR_VAR 0 7
30557: PUSH
30558: LD_VAR 0 7
30562: PPUSH
30563: LD_INT 1
30565: PPUSH
30566: LD_VAR 0 14
30570: PPUSH
30571: CALL_OW 2
30575: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
30576: LD_VAR 0 14
30580: PPUSH
30581: LD_VAR 0 9
30585: PPUSH
30586: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
30590: LD_VAR 0 9
30594: PPUSH
30595: CALL_OW 313
30599: PUSH
30600: LD_INT 6
30602: EQUAL
30603: PUSH
30604: LD_VAR 0 9
30608: PPUSH
30609: CALL_OW 266
30613: PUSH
30614: LD_INT 32
30616: PUSH
30617: LD_INT 31
30619: PUSH
30620: EMPTY
30621: LIST
30622: LIST
30623: IN
30624: OR
30625: IFFALSE 30439
30627: GO 30436
30629: POP
30630: POP
// end else
30631: GO 31013
// for j = 1 to x do
30633: LD_ADDR_VAR 0 9
30637: PUSH
30638: DOUBLE
30639: LD_INT 1
30641: DEC
30642: ST_TO_ADDR
30643: LD_VAR 0 13
30647: PUSH
30648: FOR_TO
30649: IFFALSE 31011
// begin InitHc ;
30651: CALL_OW 19
// if not f then
30655: LD_VAR 0 12
30659: NOT
30660: IFFALSE 30749
// begin PrepareHuman ( false , i , skill ) ;
30662: LD_INT 0
30664: PPUSH
30665: LD_VAR 0 8
30669: PPUSH
30670: LD_VAR 0 4
30674: PPUSH
30675: CALL_OW 380
// un := CreateHuman ;
30679: LD_ADDR_VAR 0 14
30683: PUSH
30684: CALL_OW 44
30688: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30689: LD_ADDR_VAR 0 7
30693: PUSH
30694: LD_VAR 0 7
30698: PPUSH
30699: LD_INT 1
30701: PPUSH
30702: LD_VAR 0 14
30706: PPUSH
30707: CALL_OW 2
30711: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30712: LD_VAR 0 14
30716: PPUSH
30717: LD_VAR 0 1
30721: PPUSH
30722: CALL_OW 250
30726: PPUSH
30727: LD_VAR 0 1
30731: PPUSH
30732: CALL_OW 251
30736: PPUSH
30737: LD_INT 10
30739: PPUSH
30740: LD_INT 0
30742: PPUSH
30743: CALL_OW 50
// continue ;
30747: GO 30648
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
30749: LD_VAR 0 12
30753: PUSH
30754: LD_INT 1
30756: ARRAY
30757: PPUSH
30758: CALL_OW 313
30762: PUSH
30763: LD_VAR 0 12
30767: PUSH
30768: LD_INT 1
30770: ARRAY
30771: PPUSH
30772: CALL_OW 266
30776: PUSH
30777: LD_INT 32
30779: PUSH
30780: LD_INT 31
30782: PUSH
30783: EMPTY
30784: LIST
30785: LIST
30786: IN
30787: AND
30788: PUSH
30789: LD_VAR 0 12
30793: PUSH
30794: LD_INT 1
30796: ARRAY
30797: PPUSH
30798: CALL_OW 313
30802: PUSH
30803: LD_INT 6
30805: EQUAL
30806: OR
30807: IFFALSE 30827
// f := Delete ( f , 1 ) ;
30809: LD_ADDR_VAR 0 12
30813: PUSH
30814: LD_VAR 0 12
30818: PPUSH
30819: LD_INT 1
30821: PPUSH
30822: CALL_OW 3
30826: ST_TO_ADDR
// if not f then
30827: LD_VAR 0 12
30831: NOT
30832: IFFALSE 30850
// begin x := x + 2 ;
30834: LD_ADDR_VAR 0 13
30838: PUSH
30839: LD_VAR 0 13
30843: PUSH
30844: LD_INT 2
30846: PLUS
30847: ST_TO_ADDR
// continue ;
30848: GO 30648
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
30850: LD_VAR 0 12
30854: PUSH
30855: LD_INT 1
30857: ARRAY
30858: PPUSH
30859: CALL_OW 266
30863: PUSH
30864: LD_INT 5
30866: EQUAL
30867: IFFALSE 30941
// begin if UnitsInside ( f [ 1 ] ) < 3 then
30869: LD_VAR 0 12
30873: PUSH
30874: LD_INT 1
30876: ARRAY
30877: PPUSH
30878: CALL_OW 313
30882: PUSH
30883: LD_INT 3
30885: LESS
30886: IFFALSE 30922
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30888: LD_INT 0
30890: PPUSH
30891: LD_INT 5
30893: PUSH
30894: LD_INT 8
30896: PUSH
30897: LD_INT 9
30899: PUSH
30900: EMPTY
30901: LIST
30902: LIST
30903: LIST
30904: PUSH
30905: LD_VAR 0 17
30909: ARRAY
30910: PPUSH
30911: LD_VAR 0 4
30915: PPUSH
30916: CALL_OW 380
30920: GO 30939
// PrepareHuman ( false , i , skill ) ;
30922: LD_INT 0
30924: PPUSH
30925: LD_VAR 0 8
30929: PPUSH
30930: LD_VAR 0 4
30934: PPUSH
30935: CALL_OW 380
// end else
30939: GO 30958
// PrepareHuman ( false , i , skill ) ;
30941: LD_INT 0
30943: PPUSH
30944: LD_VAR 0 8
30948: PPUSH
30949: LD_VAR 0 4
30953: PPUSH
30954: CALL_OW 380
// un := CreateHuman ;
30958: LD_ADDR_VAR 0 14
30962: PUSH
30963: CALL_OW 44
30967: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30968: LD_ADDR_VAR 0 7
30972: PUSH
30973: LD_VAR 0 7
30977: PPUSH
30978: LD_INT 1
30980: PPUSH
30981: LD_VAR 0 14
30985: PPUSH
30986: CALL_OW 2
30990: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
30991: LD_VAR 0 14
30995: PPUSH
30996: LD_VAR 0 12
31000: PUSH
31001: LD_INT 1
31003: ARRAY
31004: PPUSH
31005: CALL_OW 52
// end ;
31009: GO 30648
31011: POP
31012: POP
// end ;
31013: GO 29950
31015: POP
31016: POP
// result := result ^ buildings ;
31017: LD_ADDR_VAR 0 7
31021: PUSH
31022: LD_VAR 0 7
31026: PUSH
31027: LD_VAR 0 18
31031: ADD
31032: ST_TO_ADDR
// end else
31033: GO 31176
// begin for i = 1 to personel do
31035: LD_ADDR_VAR 0 8
31039: PUSH
31040: DOUBLE
31041: LD_INT 1
31043: DEC
31044: ST_TO_ADDR
31045: LD_VAR 0 6
31049: PUSH
31050: FOR_TO
31051: IFFALSE 31174
// begin if i > 4 then
31053: LD_VAR 0 8
31057: PUSH
31058: LD_INT 4
31060: GREATER
31061: IFFALSE 31065
// break ;
31063: GO 31174
// x := personel [ i ] ;
31065: LD_ADDR_VAR 0 13
31069: PUSH
31070: LD_VAR 0 6
31074: PUSH
31075: LD_VAR 0 8
31079: ARRAY
31080: ST_TO_ADDR
// if x = - 1 then
31081: LD_VAR 0 13
31085: PUSH
31086: LD_INT 1
31088: NEG
31089: EQUAL
31090: IFFALSE 31094
// continue ;
31092: GO 31050
// PrepareHuman ( false , i , skill ) ;
31094: LD_INT 0
31096: PPUSH
31097: LD_VAR 0 8
31101: PPUSH
31102: LD_VAR 0 4
31106: PPUSH
31107: CALL_OW 380
// un := CreateHuman ;
31111: LD_ADDR_VAR 0 14
31115: PUSH
31116: CALL_OW 44
31120: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31121: LD_VAR 0 14
31125: PPUSH
31126: LD_VAR 0 1
31130: PPUSH
31131: CALL_OW 250
31135: PPUSH
31136: LD_VAR 0 1
31140: PPUSH
31141: CALL_OW 251
31145: PPUSH
31146: LD_INT 10
31148: PPUSH
31149: LD_INT 0
31151: PPUSH
31152: CALL_OW 50
// result := result ^ un ;
31156: LD_ADDR_VAR 0 7
31160: PUSH
31161: LD_VAR 0 7
31165: PUSH
31166: LD_VAR 0 14
31170: ADD
31171: ST_TO_ADDR
// end ;
31172: GO 31050
31174: POP
31175: POP
// end ; end ;
31176: LD_VAR 0 7
31180: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
31181: LD_INT 0
31183: PPUSH
31184: PPUSH
31185: PPUSH
31186: PPUSH
31187: PPUSH
31188: PPUSH
31189: PPUSH
31190: PPUSH
31191: PPUSH
31192: PPUSH
31193: PPUSH
31194: PPUSH
31195: PPUSH
31196: PPUSH
31197: PPUSH
31198: PPUSH
// result := false ;
31199: LD_ADDR_VAR 0 3
31203: PUSH
31204: LD_INT 0
31206: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
31207: LD_VAR 0 1
31211: NOT
31212: PUSH
31213: LD_VAR 0 1
31217: PPUSH
31218: CALL_OW 266
31222: PUSH
31223: LD_INT 32
31225: PUSH
31226: LD_INT 33
31228: PUSH
31229: EMPTY
31230: LIST
31231: LIST
31232: IN
31233: NOT
31234: OR
31235: IFFALSE 31239
// exit ;
31237: GO 32375
// nat := GetNation ( tower ) ;
31239: LD_ADDR_VAR 0 12
31243: PUSH
31244: LD_VAR 0 1
31248: PPUSH
31249: CALL_OW 248
31253: ST_TO_ADDR
// side := GetSide ( tower ) ;
31254: LD_ADDR_VAR 0 16
31258: PUSH
31259: LD_VAR 0 1
31263: PPUSH
31264: CALL_OW 255
31268: ST_TO_ADDR
// x := GetX ( tower ) ;
31269: LD_ADDR_VAR 0 10
31273: PUSH
31274: LD_VAR 0 1
31278: PPUSH
31279: CALL_OW 250
31283: ST_TO_ADDR
// y := GetY ( tower ) ;
31284: LD_ADDR_VAR 0 11
31288: PUSH
31289: LD_VAR 0 1
31293: PPUSH
31294: CALL_OW 251
31298: ST_TO_ADDR
// if not x or not y then
31299: LD_VAR 0 10
31303: NOT
31304: PUSH
31305: LD_VAR 0 11
31309: NOT
31310: OR
31311: IFFALSE 31315
// exit ;
31313: GO 32375
// weapon := 0 ;
31315: LD_ADDR_VAR 0 18
31319: PUSH
31320: LD_INT 0
31322: ST_TO_ADDR
// fac_list := [ ] ;
31323: LD_ADDR_VAR 0 17
31327: PUSH
31328: EMPTY
31329: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
31330: LD_ADDR_VAR 0 6
31334: PUSH
31335: LD_VAR 0 1
31339: PPUSH
31340: CALL_OW 274
31344: PPUSH
31345: LD_VAR 0 2
31349: PPUSH
31350: CALL 28953 0 2
31354: PPUSH
31355: LD_INT 30
31357: PUSH
31358: LD_INT 3
31360: PUSH
31361: EMPTY
31362: LIST
31363: LIST
31364: PPUSH
31365: CALL_OW 72
31369: ST_TO_ADDR
// if not factories then
31370: LD_VAR 0 6
31374: NOT
31375: IFFALSE 31379
// exit ;
31377: GO 32375
// for i in factories do
31379: LD_ADDR_VAR 0 8
31383: PUSH
31384: LD_VAR 0 6
31388: PUSH
31389: FOR_IN
31390: IFFALSE 31415
// fac_list := fac_list union AvailableWeaponList ( i ) ;
31392: LD_ADDR_VAR 0 17
31396: PUSH
31397: LD_VAR 0 17
31401: PUSH
31402: LD_VAR 0 8
31406: PPUSH
31407: CALL_OW 478
31411: UNION
31412: ST_TO_ADDR
31413: GO 31389
31415: POP
31416: POP
// if not fac_list then
31417: LD_VAR 0 17
31421: NOT
31422: IFFALSE 31426
// exit ;
31424: GO 32375
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
31426: LD_ADDR_VAR 0 5
31430: PUSH
31431: LD_INT 4
31433: PUSH
31434: LD_INT 5
31436: PUSH
31437: LD_INT 9
31439: PUSH
31440: LD_INT 10
31442: PUSH
31443: LD_INT 6
31445: PUSH
31446: LD_INT 7
31448: PUSH
31449: LD_INT 11
31451: PUSH
31452: EMPTY
31453: LIST
31454: LIST
31455: LIST
31456: LIST
31457: LIST
31458: LIST
31459: LIST
31460: PUSH
31461: LD_INT 27
31463: PUSH
31464: LD_INT 28
31466: PUSH
31467: LD_INT 26
31469: PUSH
31470: LD_INT 30
31472: PUSH
31473: EMPTY
31474: LIST
31475: LIST
31476: LIST
31477: LIST
31478: PUSH
31479: LD_INT 43
31481: PUSH
31482: LD_INT 44
31484: PUSH
31485: LD_INT 46
31487: PUSH
31488: LD_INT 45
31490: PUSH
31491: LD_INT 47
31493: PUSH
31494: LD_INT 49
31496: PUSH
31497: EMPTY
31498: LIST
31499: LIST
31500: LIST
31501: LIST
31502: LIST
31503: LIST
31504: PUSH
31505: EMPTY
31506: LIST
31507: LIST
31508: LIST
31509: PUSH
31510: LD_VAR 0 12
31514: ARRAY
31515: ST_TO_ADDR
// for i in list do
31516: LD_ADDR_VAR 0 8
31520: PUSH
31521: LD_VAR 0 5
31525: PUSH
31526: FOR_IN
31527: IFFALSE 31560
// if not i in fac_list then
31529: LD_VAR 0 8
31533: PUSH
31534: LD_VAR 0 17
31538: IN
31539: NOT
31540: IFFALSE 31558
// list := list diff i ;
31542: LD_ADDR_VAR 0 5
31546: PUSH
31547: LD_VAR 0 5
31551: PUSH
31552: LD_VAR 0 8
31556: DIFF
31557: ST_TO_ADDR
31558: GO 31526
31560: POP
31561: POP
// if not list then
31562: LD_VAR 0 5
31566: NOT
31567: IFFALSE 31571
// exit ;
31569: GO 32375
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
31571: LD_VAR 0 12
31575: PUSH
31576: LD_INT 3
31578: EQUAL
31579: PUSH
31580: LD_INT 49
31582: PUSH
31583: LD_VAR 0 5
31587: IN
31588: AND
31589: PUSH
31590: LD_INT 31
31592: PPUSH
31593: LD_VAR 0 16
31597: PPUSH
31598: CALL_OW 321
31602: PUSH
31603: LD_INT 2
31605: EQUAL
31606: AND
31607: IFFALSE 31667
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
31609: LD_INT 22
31611: PUSH
31612: LD_VAR 0 16
31616: PUSH
31617: EMPTY
31618: LIST
31619: LIST
31620: PUSH
31621: LD_INT 35
31623: PUSH
31624: LD_INT 49
31626: PUSH
31627: EMPTY
31628: LIST
31629: LIST
31630: PUSH
31631: LD_INT 91
31633: PUSH
31634: LD_VAR 0 1
31638: PUSH
31639: LD_INT 10
31641: PUSH
31642: EMPTY
31643: LIST
31644: LIST
31645: LIST
31646: PUSH
31647: EMPTY
31648: LIST
31649: LIST
31650: LIST
31651: PPUSH
31652: CALL_OW 69
31656: NOT
31657: IFFALSE 31667
// weapon := ru_time_lapser ;
31659: LD_ADDR_VAR 0 18
31663: PUSH
31664: LD_INT 49
31666: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
31667: LD_VAR 0 12
31671: PUSH
31672: LD_INT 1
31674: PUSH
31675: LD_INT 2
31677: PUSH
31678: EMPTY
31679: LIST
31680: LIST
31681: IN
31682: PUSH
31683: LD_INT 11
31685: PUSH
31686: LD_VAR 0 5
31690: IN
31691: PUSH
31692: LD_INT 30
31694: PUSH
31695: LD_VAR 0 5
31699: IN
31700: OR
31701: AND
31702: PUSH
31703: LD_INT 6
31705: PPUSH
31706: LD_VAR 0 16
31710: PPUSH
31711: CALL_OW 321
31715: PUSH
31716: LD_INT 2
31718: EQUAL
31719: AND
31720: IFFALSE 31885
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
31722: LD_INT 22
31724: PUSH
31725: LD_VAR 0 16
31729: PUSH
31730: EMPTY
31731: LIST
31732: LIST
31733: PUSH
31734: LD_INT 2
31736: PUSH
31737: LD_INT 35
31739: PUSH
31740: LD_INT 11
31742: PUSH
31743: EMPTY
31744: LIST
31745: LIST
31746: PUSH
31747: LD_INT 35
31749: PUSH
31750: LD_INT 30
31752: PUSH
31753: EMPTY
31754: LIST
31755: LIST
31756: PUSH
31757: EMPTY
31758: LIST
31759: LIST
31760: LIST
31761: PUSH
31762: LD_INT 91
31764: PUSH
31765: LD_VAR 0 1
31769: PUSH
31770: LD_INT 18
31772: PUSH
31773: EMPTY
31774: LIST
31775: LIST
31776: LIST
31777: PUSH
31778: EMPTY
31779: LIST
31780: LIST
31781: LIST
31782: PPUSH
31783: CALL_OW 69
31787: NOT
31788: PUSH
31789: LD_INT 22
31791: PUSH
31792: LD_VAR 0 16
31796: PUSH
31797: EMPTY
31798: LIST
31799: LIST
31800: PUSH
31801: LD_INT 2
31803: PUSH
31804: LD_INT 30
31806: PUSH
31807: LD_INT 32
31809: PUSH
31810: EMPTY
31811: LIST
31812: LIST
31813: PUSH
31814: LD_INT 30
31816: PUSH
31817: LD_INT 33
31819: PUSH
31820: EMPTY
31821: LIST
31822: LIST
31823: PUSH
31824: EMPTY
31825: LIST
31826: LIST
31827: LIST
31828: PUSH
31829: LD_INT 91
31831: PUSH
31832: LD_VAR 0 1
31836: PUSH
31837: LD_INT 12
31839: PUSH
31840: EMPTY
31841: LIST
31842: LIST
31843: LIST
31844: PUSH
31845: EMPTY
31846: LIST
31847: LIST
31848: LIST
31849: PUSH
31850: EMPTY
31851: LIST
31852: PPUSH
31853: CALL_OW 69
31857: PUSH
31858: LD_INT 2
31860: GREATER
31861: AND
31862: IFFALSE 31885
// weapon := [ us_radar , ar_radar ] [ nat ] ;
31864: LD_ADDR_VAR 0 18
31868: PUSH
31869: LD_INT 11
31871: PUSH
31872: LD_INT 30
31874: PUSH
31875: EMPTY
31876: LIST
31877: LIST
31878: PUSH
31879: LD_VAR 0 12
31883: ARRAY
31884: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
31885: LD_VAR 0 18
31889: NOT
31890: PUSH
31891: LD_INT 40
31893: PPUSH
31894: LD_VAR 0 16
31898: PPUSH
31899: CALL_OW 321
31903: PUSH
31904: LD_INT 2
31906: EQUAL
31907: AND
31908: PUSH
31909: LD_INT 7
31911: PUSH
31912: LD_VAR 0 5
31916: IN
31917: PUSH
31918: LD_INT 28
31920: PUSH
31921: LD_VAR 0 5
31925: IN
31926: OR
31927: PUSH
31928: LD_INT 45
31930: PUSH
31931: LD_VAR 0 5
31935: IN
31936: OR
31937: AND
31938: IFFALSE 32192
// begin hex := GetHexInfo ( x , y ) ;
31940: LD_ADDR_VAR 0 4
31944: PUSH
31945: LD_VAR 0 10
31949: PPUSH
31950: LD_VAR 0 11
31954: PPUSH
31955: CALL_OW 546
31959: ST_TO_ADDR
// if hex [ 1 ] then
31960: LD_VAR 0 4
31964: PUSH
31965: LD_INT 1
31967: ARRAY
31968: IFFALSE 31972
// exit ;
31970: GO 32375
// height := hex [ 2 ] ;
31972: LD_ADDR_VAR 0 15
31976: PUSH
31977: LD_VAR 0 4
31981: PUSH
31982: LD_INT 2
31984: ARRAY
31985: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
31986: LD_ADDR_VAR 0 14
31990: PUSH
31991: LD_INT 0
31993: PUSH
31994: LD_INT 2
31996: PUSH
31997: LD_INT 3
31999: PUSH
32000: LD_INT 5
32002: PUSH
32003: EMPTY
32004: LIST
32005: LIST
32006: LIST
32007: LIST
32008: ST_TO_ADDR
// for i in tmp do
32009: LD_ADDR_VAR 0 8
32013: PUSH
32014: LD_VAR 0 14
32018: PUSH
32019: FOR_IN
32020: IFFALSE 32190
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
32022: LD_ADDR_VAR 0 9
32026: PUSH
32027: LD_VAR 0 10
32031: PPUSH
32032: LD_VAR 0 8
32036: PPUSH
32037: LD_INT 5
32039: PPUSH
32040: CALL_OW 272
32044: PUSH
32045: LD_VAR 0 11
32049: PPUSH
32050: LD_VAR 0 8
32054: PPUSH
32055: LD_INT 5
32057: PPUSH
32058: CALL_OW 273
32062: PUSH
32063: EMPTY
32064: LIST
32065: LIST
32066: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
32067: LD_VAR 0 9
32071: PUSH
32072: LD_INT 1
32074: ARRAY
32075: PPUSH
32076: LD_VAR 0 9
32080: PUSH
32081: LD_INT 2
32083: ARRAY
32084: PPUSH
32085: CALL_OW 488
32089: IFFALSE 32188
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
32091: LD_ADDR_VAR 0 4
32095: PUSH
32096: LD_VAR 0 9
32100: PUSH
32101: LD_INT 1
32103: ARRAY
32104: PPUSH
32105: LD_VAR 0 9
32109: PUSH
32110: LD_INT 2
32112: ARRAY
32113: PPUSH
32114: CALL_OW 546
32118: ST_TO_ADDR
// if hex [ 1 ] then
32119: LD_VAR 0 4
32123: PUSH
32124: LD_INT 1
32126: ARRAY
32127: IFFALSE 32131
// continue ;
32129: GO 32019
// h := hex [ 2 ] ;
32131: LD_ADDR_VAR 0 13
32135: PUSH
32136: LD_VAR 0 4
32140: PUSH
32141: LD_INT 2
32143: ARRAY
32144: ST_TO_ADDR
// if h + 7 < height then
32145: LD_VAR 0 13
32149: PUSH
32150: LD_INT 7
32152: PLUS
32153: PUSH
32154: LD_VAR 0 15
32158: LESS
32159: IFFALSE 32188
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
32161: LD_ADDR_VAR 0 18
32165: PUSH
32166: LD_INT 7
32168: PUSH
32169: LD_INT 28
32171: PUSH
32172: LD_INT 45
32174: PUSH
32175: EMPTY
32176: LIST
32177: LIST
32178: LIST
32179: PUSH
32180: LD_VAR 0 12
32184: ARRAY
32185: ST_TO_ADDR
// break ;
32186: GO 32190
// end ; end ; end ;
32188: GO 32019
32190: POP
32191: POP
// end ; if not weapon then
32192: LD_VAR 0 18
32196: NOT
32197: IFFALSE 32257
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
32199: LD_ADDR_VAR 0 5
32203: PUSH
32204: LD_VAR 0 5
32208: PUSH
32209: LD_INT 11
32211: PUSH
32212: LD_INT 30
32214: PUSH
32215: LD_INT 49
32217: PUSH
32218: EMPTY
32219: LIST
32220: LIST
32221: LIST
32222: DIFF
32223: ST_TO_ADDR
// if not list then
32224: LD_VAR 0 5
32228: NOT
32229: IFFALSE 32233
// exit ;
32231: GO 32375
// weapon := list [ rand ( 1 , list ) ] ;
32233: LD_ADDR_VAR 0 18
32237: PUSH
32238: LD_VAR 0 5
32242: PUSH
32243: LD_INT 1
32245: PPUSH
32246: LD_VAR 0 5
32250: PPUSH
32251: CALL_OW 12
32255: ARRAY
32256: ST_TO_ADDR
// end ; if weapon then
32257: LD_VAR 0 18
32261: IFFALSE 32375
// begin tmp := CostOfWeapon ( weapon ) ;
32263: LD_ADDR_VAR 0 14
32267: PUSH
32268: LD_VAR 0 18
32272: PPUSH
32273: CALL_OW 451
32277: ST_TO_ADDR
// j := GetBase ( tower ) ;
32278: LD_ADDR_VAR 0 9
32282: PUSH
32283: LD_VAR 0 1
32287: PPUSH
32288: CALL_OW 274
32292: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
32293: LD_VAR 0 9
32297: PPUSH
32298: LD_INT 1
32300: PPUSH
32301: CALL_OW 275
32305: PUSH
32306: LD_VAR 0 14
32310: PUSH
32311: LD_INT 1
32313: ARRAY
32314: GREATEREQUAL
32315: PUSH
32316: LD_VAR 0 9
32320: PPUSH
32321: LD_INT 2
32323: PPUSH
32324: CALL_OW 275
32328: PUSH
32329: LD_VAR 0 14
32333: PUSH
32334: LD_INT 2
32336: ARRAY
32337: GREATEREQUAL
32338: AND
32339: PUSH
32340: LD_VAR 0 9
32344: PPUSH
32345: LD_INT 3
32347: PPUSH
32348: CALL_OW 275
32352: PUSH
32353: LD_VAR 0 14
32357: PUSH
32358: LD_INT 3
32360: ARRAY
32361: GREATEREQUAL
32362: AND
32363: IFFALSE 32375
// result := weapon ;
32365: LD_ADDR_VAR 0 3
32369: PUSH
32370: LD_VAR 0 18
32374: ST_TO_ADDR
// end ; end ;
32375: LD_VAR 0 3
32379: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
32380: LD_INT 0
32382: PPUSH
32383: PPUSH
// result := true ;
32384: LD_ADDR_VAR 0 3
32388: PUSH
32389: LD_INT 1
32391: ST_TO_ADDR
// if array1 = array2 then
32392: LD_VAR 0 1
32396: PUSH
32397: LD_VAR 0 2
32401: EQUAL
32402: IFFALSE 32462
// begin for i = 1 to array1 do
32404: LD_ADDR_VAR 0 4
32408: PUSH
32409: DOUBLE
32410: LD_INT 1
32412: DEC
32413: ST_TO_ADDR
32414: LD_VAR 0 1
32418: PUSH
32419: FOR_TO
32420: IFFALSE 32458
// if array1 [ i ] <> array2 [ i ] then
32422: LD_VAR 0 1
32426: PUSH
32427: LD_VAR 0 4
32431: ARRAY
32432: PUSH
32433: LD_VAR 0 2
32437: PUSH
32438: LD_VAR 0 4
32442: ARRAY
32443: NONEQUAL
32444: IFFALSE 32456
// begin result := false ;
32446: LD_ADDR_VAR 0 3
32450: PUSH
32451: LD_INT 0
32453: ST_TO_ADDR
// break ;
32454: GO 32458
// end ;
32456: GO 32419
32458: POP
32459: POP
// end else
32460: GO 32470
// result := false ;
32462: LD_ADDR_VAR 0 3
32466: PUSH
32467: LD_INT 0
32469: ST_TO_ADDR
// end ;
32470: LD_VAR 0 3
32474: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
32475: LD_INT 0
32477: PPUSH
32478: PPUSH
32479: PPUSH
// pom := GetBase ( fac ) ;
32480: LD_ADDR_VAR 0 5
32484: PUSH
32485: LD_VAR 0 1
32489: PPUSH
32490: CALL_OW 274
32494: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
32495: LD_ADDR_VAR 0 4
32499: PUSH
32500: LD_VAR 0 2
32504: PUSH
32505: LD_INT 1
32507: ARRAY
32508: PPUSH
32509: LD_VAR 0 2
32513: PUSH
32514: LD_INT 2
32516: ARRAY
32517: PPUSH
32518: LD_VAR 0 2
32522: PUSH
32523: LD_INT 3
32525: ARRAY
32526: PPUSH
32527: LD_VAR 0 2
32531: PUSH
32532: LD_INT 4
32534: ARRAY
32535: PPUSH
32536: CALL_OW 449
32540: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32541: LD_ADDR_VAR 0 3
32545: PUSH
32546: LD_VAR 0 5
32550: PPUSH
32551: LD_INT 1
32553: PPUSH
32554: CALL_OW 275
32558: PUSH
32559: LD_VAR 0 4
32563: PUSH
32564: LD_INT 1
32566: ARRAY
32567: GREATEREQUAL
32568: PUSH
32569: LD_VAR 0 5
32573: PPUSH
32574: LD_INT 2
32576: PPUSH
32577: CALL_OW 275
32581: PUSH
32582: LD_VAR 0 4
32586: PUSH
32587: LD_INT 2
32589: ARRAY
32590: GREATEREQUAL
32591: AND
32592: PUSH
32593: LD_VAR 0 5
32597: PPUSH
32598: LD_INT 3
32600: PPUSH
32601: CALL_OW 275
32605: PUSH
32606: LD_VAR 0 4
32610: PUSH
32611: LD_INT 3
32613: ARRAY
32614: GREATEREQUAL
32615: AND
32616: ST_TO_ADDR
// end ;
32617: LD_VAR 0 3
32621: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
32622: LD_INT 0
32624: PPUSH
32625: PPUSH
32626: PPUSH
32627: PPUSH
// pom := GetBase ( building ) ;
32628: LD_ADDR_VAR 0 3
32632: PUSH
32633: LD_VAR 0 1
32637: PPUSH
32638: CALL_OW 274
32642: ST_TO_ADDR
// if not pom then
32643: LD_VAR 0 3
32647: NOT
32648: IFFALSE 32652
// exit ;
32650: GO 32822
// btype := GetBType ( building ) ;
32652: LD_ADDR_VAR 0 5
32656: PUSH
32657: LD_VAR 0 1
32661: PPUSH
32662: CALL_OW 266
32666: ST_TO_ADDR
// if btype = b_armoury then
32667: LD_VAR 0 5
32671: PUSH
32672: LD_INT 4
32674: EQUAL
32675: IFFALSE 32685
// btype := b_barracks ;
32677: LD_ADDR_VAR 0 5
32681: PUSH
32682: LD_INT 5
32684: ST_TO_ADDR
// if btype = b_depot then
32685: LD_VAR 0 5
32689: PUSH
32690: LD_INT 0
32692: EQUAL
32693: IFFALSE 32703
// btype := b_warehouse ;
32695: LD_ADDR_VAR 0 5
32699: PUSH
32700: LD_INT 1
32702: ST_TO_ADDR
// if btype = b_workshop then
32703: LD_VAR 0 5
32707: PUSH
32708: LD_INT 2
32710: EQUAL
32711: IFFALSE 32721
// btype := b_factory ;
32713: LD_ADDR_VAR 0 5
32717: PUSH
32718: LD_INT 3
32720: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32721: LD_ADDR_VAR 0 4
32725: PUSH
32726: LD_VAR 0 5
32730: PPUSH
32731: LD_VAR 0 1
32735: PPUSH
32736: CALL_OW 248
32740: PPUSH
32741: CALL_OW 450
32745: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32746: LD_ADDR_VAR 0 2
32750: PUSH
32751: LD_VAR 0 3
32755: PPUSH
32756: LD_INT 1
32758: PPUSH
32759: CALL_OW 275
32763: PUSH
32764: LD_VAR 0 4
32768: PUSH
32769: LD_INT 1
32771: ARRAY
32772: GREATEREQUAL
32773: PUSH
32774: LD_VAR 0 3
32778: PPUSH
32779: LD_INT 2
32781: PPUSH
32782: CALL_OW 275
32786: PUSH
32787: LD_VAR 0 4
32791: PUSH
32792: LD_INT 2
32794: ARRAY
32795: GREATEREQUAL
32796: AND
32797: PUSH
32798: LD_VAR 0 3
32802: PPUSH
32803: LD_INT 3
32805: PPUSH
32806: CALL_OW 275
32810: PUSH
32811: LD_VAR 0 4
32815: PUSH
32816: LD_INT 3
32818: ARRAY
32819: GREATEREQUAL
32820: AND
32821: ST_TO_ADDR
// end ;
32822: LD_VAR 0 2
32826: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
32827: LD_INT 0
32829: PPUSH
32830: PPUSH
32831: PPUSH
// pom := GetBase ( building ) ;
32832: LD_ADDR_VAR 0 4
32836: PUSH
32837: LD_VAR 0 1
32841: PPUSH
32842: CALL_OW 274
32846: ST_TO_ADDR
// if not pom then
32847: LD_VAR 0 4
32851: NOT
32852: IFFALSE 32856
// exit ;
32854: GO 32957
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32856: LD_ADDR_VAR 0 5
32860: PUSH
32861: LD_VAR 0 2
32865: PPUSH
32866: LD_VAR 0 1
32870: PPUSH
32871: CALL_OW 248
32875: PPUSH
32876: CALL_OW 450
32880: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32881: LD_ADDR_VAR 0 3
32885: PUSH
32886: LD_VAR 0 4
32890: PPUSH
32891: LD_INT 1
32893: PPUSH
32894: CALL_OW 275
32898: PUSH
32899: LD_VAR 0 5
32903: PUSH
32904: LD_INT 1
32906: ARRAY
32907: GREATEREQUAL
32908: PUSH
32909: LD_VAR 0 4
32913: PPUSH
32914: LD_INT 2
32916: PPUSH
32917: CALL_OW 275
32921: PUSH
32922: LD_VAR 0 5
32926: PUSH
32927: LD_INT 2
32929: ARRAY
32930: GREATEREQUAL
32931: AND
32932: PUSH
32933: LD_VAR 0 4
32937: PPUSH
32938: LD_INT 3
32940: PPUSH
32941: CALL_OW 275
32945: PUSH
32946: LD_VAR 0 5
32950: PUSH
32951: LD_INT 3
32953: ARRAY
32954: GREATEREQUAL
32955: AND
32956: ST_TO_ADDR
// end ;
32957: LD_VAR 0 3
32961: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
32962: LD_INT 0
32964: PPUSH
32965: PPUSH
32966: PPUSH
32967: PPUSH
32968: PPUSH
32969: PPUSH
32970: PPUSH
32971: PPUSH
32972: PPUSH
32973: PPUSH
// result := false ;
32974: LD_ADDR_VAR 0 6
32978: PUSH
32979: LD_INT 0
32981: ST_TO_ADDR
// if not base or not btype or not x or not y then
32982: LD_VAR 0 1
32986: NOT
32987: PUSH
32988: LD_VAR 0 2
32992: NOT
32993: OR
32994: PUSH
32995: LD_VAR 0 3
32999: NOT
33000: OR
33001: PUSH
33002: LD_VAR 0 4
33006: NOT
33007: OR
33008: IFFALSE 33012
// exit ;
33010: GO 33621
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
33012: LD_ADDR_VAR 0 12
33016: PUSH
33017: LD_VAR 0 2
33021: PPUSH
33022: LD_VAR 0 3
33026: PPUSH
33027: LD_VAR 0 4
33031: PPUSH
33032: LD_VAR 0 5
33036: PPUSH
33037: LD_VAR 0 1
33041: PUSH
33042: LD_INT 1
33044: ARRAY
33045: PPUSH
33046: CALL_OW 248
33050: PPUSH
33051: LD_INT 0
33053: PPUSH
33054: CALL 34458 0 6
33058: ST_TO_ADDR
// if not hexes then
33059: LD_VAR 0 12
33063: NOT
33064: IFFALSE 33068
// exit ;
33066: GO 33621
// for i = 1 to hexes do
33068: LD_ADDR_VAR 0 7
33072: PUSH
33073: DOUBLE
33074: LD_INT 1
33076: DEC
33077: ST_TO_ADDR
33078: LD_VAR 0 12
33082: PUSH
33083: FOR_TO
33084: IFFALSE 33619
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33086: LD_ADDR_VAR 0 11
33090: PUSH
33091: LD_VAR 0 12
33095: PUSH
33096: LD_VAR 0 7
33100: ARRAY
33101: PUSH
33102: LD_INT 1
33104: ARRAY
33105: PPUSH
33106: LD_VAR 0 12
33110: PUSH
33111: LD_VAR 0 7
33115: ARRAY
33116: PUSH
33117: LD_INT 2
33119: ARRAY
33120: PPUSH
33121: CALL_OW 428
33125: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
33126: LD_VAR 0 12
33130: PUSH
33131: LD_VAR 0 7
33135: ARRAY
33136: PUSH
33137: LD_INT 1
33139: ARRAY
33140: PPUSH
33141: LD_VAR 0 12
33145: PUSH
33146: LD_VAR 0 7
33150: ARRAY
33151: PUSH
33152: LD_INT 2
33154: ARRAY
33155: PPUSH
33156: CALL_OW 351
33160: PUSH
33161: LD_VAR 0 12
33165: PUSH
33166: LD_VAR 0 7
33170: ARRAY
33171: PUSH
33172: LD_INT 1
33174: ARRAY
33175: PPUSH
33176: LD_VAR 0 12
33180: PUSH
33181: LD_VAR 0 7
33185: ARRAY
33186: PUSH
33187: LD_INT 2
33189: ARRAY
33190: PPUSH
33191: CALL_OW 488
33195: NOT
33196: OR
33197: PUSH
33198: LD_VAR 0 11
33202: PPUSH
33203: CALL_OW 247
33207: PUSH
33208: LD_INT 3
33210: EQUAL
33211: OR
33212: IFFALSE 33218
// exit ;
33214: POP
33215: POP
33216: GO 33621
// if not tmp or not tmp in base then
33218: LD_VAR 0 11
33222: NOT
33223: PUSH
33224: LD_VAR 0 11
33228: PUSH
33229: LD_VAR 0 1
33233: IN
33234: NOT
33235: OR
33236: IFFALSE 33240
// continue ;
33238: GO 33083
// result := true ;
33240: LD_ADDR_VAR 0 6
33244: PUSH
33245: LD_INT 1
33247: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33248: LD_ADDR_VAR 0 15
33252: PUSH
33253: LD_VAR 0 1
33257: PPUSH
33258: LD_INT 22
33260: PUSH
33261: LD_VAR 0 11
33265: PPUSH
33266: CALL_OW 255
33270: PUSH
33271: EMPTY
33272: LIST
33273: LIST
33274: PUSH
33275: LD_INT 2
33277: PUSH
33278: LD_INT 30
33280: PUSH
33281: LD_INT 0
33283: PUSH
33284: EMPTY
33285: LIST
33286: LIST
33287: PUSH
33288: LD_INT 30
33290: PUSH
33291: LD_INT 1
33293: PUSH
33294: EMPTY
33295: LIST
33296: LIST
33297: PUSH
33298: EMPTY
33299: LIST
33300: LIST
33301: LIST
33302: PUSH
33303: EMPTY
33304: LIST
33305: LIST
33306: PPUSH
33307: CALL_OW 72
33311: ST_TO_ADDR
// if dep then
33312: LD_VAR 0 15
33316: IFFALSE 33452
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
33318: LD_ADDR_VAR 0 14
33322: PUSH
33323: LD_VAR 0 15
33327: PUSH
33328: LD_INT 1
33330: ARRAY
33331: PPUSH
33332: CALL_OW 250
33336: PPUSH
33337: LD_VAR 0 15
33341: PUSH
33342: LD_INT 1
33344: ARRAY
33345: PPUSH
33346: CALL_OW 254
33350: PPUSH
33351: LD_INT 5
33353: PPUSH
33354: CALL_OW 272
33358: PUSH
33359: LD_VAR 0 15
33363: PUSH
33364: LD_INT 1
33366: ARRAY
33367: PPUSH
33368: CALL_OW 251
33372: PPUSH
33373: LD_VAR 0 15
33377: PUSH
33378: LD_INT 1
33380: ARRAY
33381: PPUSH
33382: CALL_OW 254
33386: PPUSH
33387: LD_INT 5
33389: PPUSH
33390: CALL_OW 273
33394: PUSH
33395: EMPTY
33396: LIST
33397: LIST
33398: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
33399: LD_VAR 0 14
33403: PUSH
33404: LD_INT 1
33406: ARRAY
33407: PPUSH
33408: LD_VAR 0 14
33412: PUSH
33413: LD_INT 2
33415: ARRAY
33416: PPUSH
33417: CALL_OW 488
33421: IFFALSE 33452
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
33423: LD_VAR 0 11
33427: PPUSH
33428: LD_VAR 0 14
33432: PUSH
33433: LD_INT 1
33435: ARRAY
33436: PPUSH
33437: LD_VAR 0 14
33441: PUSH
33442: LD_INT 2
33444: ARRAY
33445: PPUSH
33446: CALL_OW 111
// continue ;
33450: GO 33083
// end ; end ; r := GetDir ( tmp ) ;
33452: LD_ADDR_VAR 0 13
33456: PUSH
33457: LD_VAR 0 11
33461: PPUSH
33462: CALL_OW 254
33466: ST_TO_ADDR
// if r = 5 then
33467: LD_VAR 0 13
33471: PUSH
33472: LD_INT 5
33474: EQUAL
33475: IFFALSE 33485
// r := 0 ;
33477: LD_ADDR_VAR 0 13
33481: PUSH
33482: LD_INT 0
33484: ST_TO_ADDR
// for j = r to 5 do
33485: LD_ADDR_VAR 0 8
33489: PUSH
33490: DOUBLE
33491: LD_VAR 0 13
33495: DEC
33496: ST_TO_ADDR
33497: LD_INT 5
33499: PUSH
33500: FOR_TO
33501: IFFALSE 33615
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
33503: LD_ADDR_VAR 0 9
33507: PUSH
33508: LD_VAR 0 11
33512: PPUSH
33513: CALL_OW 250
33517: PPUSH
33518: LD_VAR 0 8
33522: PPUSH
33523: LD_INT 2
33525: PPUSH
33526: CALL_OW 272
33530: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
33531: LD_ADDR_VAR 0 10
33535: PUSH
33536: LD_VAR 0 11
33540: PPUSH
33541: CALL_OW 251
33545: PPUSH
33546: LD_VAR 0 8
33550: PPUSH
33551: LD_INT 2
33553: PPUSH
33554: CALL_OW 273
33558: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
33559: LD_VAR 0 9
33563: PPUSH
33564: LD_VAR 0 10
33568: PPUSH
33569: CALL_OW 488
33573: PUSH
33574: LD_VAR 0 9
33578: PPUSH
33579: LD_VAR 0 10
33583: PPUSH
33584: CALL_OW 428
33588: NOT
33589: AND
33590: IFFALSE 33613
// begin ComMoveXY ( tmp , _x , _y ) ;
33592: LD_VAR 0 11
33596: PPUSH
33597: LD_VAR 0 9
33601: PPUSH
33602: LD_VAR 0 10
33606: PPUSH
33607: CALL_OW 111
// break ;
33611: GO 33615
// end ; end ;
33613: GO 33500
33615: POP
33616: POP
// end ;
33617: GO 33083
33619: POP
33620: POP
// end ;
33621: LD_VAR 0 6
33625: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
33626: LD_INT 0
33628: PPUSH
33629: PPUSH
33630: PPUSH
33631: PPUSH
33632: PPUSH
33633: PPUSH
33634: PPUSH
33635: PPUSH
33636: PPUSH
33637: PPUSH
// result := false ;
33638: LD_ADDR_VAR 0 6
33642: PUSH
33643: LD_INT 0
33645: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
33646: LD_VAR 0 1
33650: NOT
33651: PUSH
33652: LD_VAR 0 1
33656: PPUSH
33657: CALL_OW 266
33661: PUSH
33662: LD_INT 0
33664: PUSH
33665: LD_INT 1
33667: PUSH
33668: EMPTY
33669: LIST
33670: LIST
33671: IN
33672: NOT
33673: OR
33674: PUSH
33675: LD_VAR 0 2
33679: NOT
33680: OR
33681: PUSH
33682: LD_VAR 0 5
33686: PUSH
33687: LD_INT 0
33689: PUSH
33690: LD_INT 1
33692: PUSH
33693: LD_INT 2
33695: PUSH
33696: LD_INT 3
33698: PUSH
33699: LD_INT 4
33701: PUSH
33702: LD_INT 5
33704: PUSH
33705: EMPTY
33706: LIST
33707: LIST
33708: LIST
33709: LIST
33710: LIST
33711: LIST
33712: IN
33713: NOT
33714: OR
33715: PUSH
33716: LD_VAR 0 3
33720: PPUSH
33721: LD_VAR 0 4
33725: PPUSH
33726: CALL_OW 488
33730: NOT
33731: OR
33732: IFFALSE 33736
// exit ;
33734: GO 34453
// pom := GetBase ( depot ) ;
33736: LD_ADDR_VAR 0 10
33740: PUSH
33741: LD_VAR 0 1
33745: PPUSH
33746: CALL_OW 274
33750: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
33751: LD_ADDR_VAR 0 11
33755: PUSH
33756: LD_VAR 0 2
33760: PPUSH
33761: LD_VAR 0 1
33765: PPUSH
33766: CALL_OW 248
33770: PPUSH
33771: CALL_OW 450
33775: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
33776: LD_VAR 0 10
33780: PPUSH
33781: LD_INT 1
33783: PPUSH
33784: CALL_OW 275
33788: PUSH
33789: LD_VAR 0 11
33793: PUSH
33794: LD_INT 1
33796: ARRAY
33797: GREATEREQUAL
33798: PUSH
33799: LD_VAR 0 10
33803: PPUSH
33804: LD_INT 2
33806: PPUSH
33807: CALL_OW 275
33811: PUSH
33812: LD_VAR 0 11
33816: PUSH
33817: LD_INT 2
33819: ARRAY
33820: GREATEREQUAL
33821: AND
33822: PUSH
33823: LD_VAR 0 10
33827: PPUSH
33828: LD_INT 3
33830: PPUSH
33831: CALL_OW 275
33835: PUSH
33836: LD_VAR 0 11
33840: PUSH
33841: LD_INT 3
33843: ARRAY
33844: GREATEREQUAL
33845: AND
33846: NOT
33847: IFFALSE 33851
// exit ;
33849: GO 34453
// if GetBType ( depot ) = b_depot then
33851: LD_VAR 0 1
33855: PPUSH
33856: CALL_OW 266
33860: PUSH
33861: LD_INT 0
33863: EQUAL
33864: IFFALSE 33876
// dist := 28 else
33866: LD_ADDR_VAR 0 14
33870: PUSH
33871: LD_INT 28
33873: ST_TO_ADDR
33874: GO 33884
// dist := 36 ;
33876: LD_ADDR_VAR 0 14
33880: PUSH
33881: LD_INT 36
33883: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
33884: LD_VAR 0 1
33888: PPUSH
33889: LD_VAR 0 3
33893: PPUSH
33894: LD_VAR 0 4
33898: PPUSH
33899: CALL_OW 297
33903: PUSH
33904: LD_VAR 0 14
33908: GREATER
33909: IFFALSE 33913
// exit ;
33911: GO 34453
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
33913: LD_ADDR_VAR 0 12
33917: PUSH
33918: LD_VAR 0 2
33922: PPUSH
33923: LD_VAR 0 3
33927: PPUSH
33928: LD_VAR 0 4
33932: PPUSH
33933: LD_VAR 0 5
33937: PPUSH
33938: LD_VAR 0 1
33942: PPUSH
33943: CALL_OW 248
33947: PPUSH
33948: LD_INT 0
33950: PPUSH
33951: CALL 34458 0 6
33955: ST_TO_ADDR
// if not hexes then
33956: LD_VAR 0 12
33960: NOT
33961: IFFALSE 33965
// exit ;
33963: GO 34453
// hex := GetHexInfo ( x , y ) ;
33965: LD_ADDR_VAR 0 15
33969: PUSH
33970: LD_VAR 0 3
33974: PPUSH
33975: LD_VAR 0 4
33979: PPUSH
33980: CALL_OW 546
33984: ST_TO_ADDR
// if hex [ 1 ] then
33985: LD_VAR 0 15
33989: PUSH
33990: LD_INT 1
33992: ARRAY
33993: IFFALSE 33997
// exit ;
33995: GO 34453
// height := hex [ 2 ] ;
33997: LD_ADDR_VAR 0 13
34001: PUSH
34002: LD_VAR 0 15
34006: PUSH
34007: LD_INT 2
34009: ARRAY
34010: ST_TO_ADDR
// for i = 1 to hexes do
34011: LD_ADDR_VAR 0 7
34015: PUSH
34016: DOUBLE
34017: LD_INT 1
34019: DEC
34020: ST_TO_ADDR
34021: LD_VAR 0 12
34025: PUSH
34026: FOR_TO
34027: IFFALSE 34357
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
34029: LD_VAR 0 12
34033: PUSH
34034: LD_VAR 0 7
34038: ARRAY
34039: PUSH
34040: LD_INT 1
34042: ARRAY
34043: PPUSH
34044: LD_VAR 0 12
34048: PUSH
34049: LD_VAR 0 7
34053: ARRAY
34054: PUSH
34055: LD_INT 2
34057: ARRAY
34058: PPUSH
34059: CALL_OW 488
34063: NOT
34064: PUSH
34065: LD_VAR 0 12
34069: PUSH
34070: LD_VAR 0 7
34074: ARRAY
34075: PUSH
34076: LD_INT 1
34078: ARRAY
34079: PPUSH
34080: LD_VAR 0 12
34084: PUSH
34085: LD_VAR 0 7
34089: ARRAY
34090: PUSH
34091: LD_INT 2
34093: ARRAY
34094: PPUSH
34095: CALL_OW 428
34099: PUSH
34100: LD_INT 0
34102: GREATER
34103: OR
34104: PUSH
34105: LD_VAR 0 12
34109: PUSH
34110: LD_VAR 0 7
34114: ARRAY
34115: PUSH
34116: LD_INT 1
34118: ARRAY
34119: PPUSH
34120: LD_VAR 0 12
34124: PUSH
34125: LD_VAR 0 7
34129: ARRAY
34130: PUSH
34131: LD_INT 2
34133: ARRAY
34134: PPUSH
34135: CALL_OW 351
34139: OR
34140: IFFALSE 34146
// exit ;
34142: POP
34143: POP
34144: GO 34453
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34146: LD_ADDR_VAR 0 8
34150: PUSH
34151: LD_VAR 0 12
34155: PUSH
34156: LD_VAR 0 7
34160: ARRAY
34161: PUSH
34162: LD_INT 1
34164: ARRAY
34165: PPUSH
34166: LD_VAR 0 12
34170: PUSH
34171: LD_VAR 0 7
34175: ARRAY
34176: PUSH
34177: LD_INT 2
34179: ARRAY
34180: PPUSH
34181: CALL_OW 546
34185: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
34186: LD_VAR 0 8
34190: PUSH
34191: LD_INT 1
34193: ARRAY
34194: PUSH
34195: LD_VAR 0 8
34199: PUSH
34200: LD_INT 2
34202: ARRAY
34203: PUSH
34204: LD_VAR 0 13
34208: PUSH
34209: LD_INT 2
34211: PLUS
34212: GREATER
34213: OR
34214: PUSH
34215: LD_VAR 0 8
34219: PUSH
34220: LD_INT 2
34222: ARRAY
34223: PUSH
34224: LD_VAR 0 13
34228: PUSH
34229: LD_INT 2
34231: MINUS
34232: LESS
34233: OR
34234: PUSH
34235: LD_VAR 0 8
34239: PUSH
34240: LD_INT 3
34242: ARRAY
34243: PUSH
34244: LD_INT 0
34246: PUSH
34247: LD_INT 8
34249: PUSH
34250: LD_INT 9
34252: PUSH
34253: LD_INT 10
34255: PUSH
34256: LD_INT 11
34258: PUSH
34259: LD_INT 12
34261: PUSH
34262: LD_INT 13
34264: PUSH
34265: LD_INT 16
34267: PUSH
34268: LD_INT 17
34270: PUSH
34271: LD_INT 18
34273: PUSH
34274: LD_INT 19
34276: PUSH
34277: LD_INT 20
34279: PUSH
34280: LD_INT 21
34282: PUSH
34283: EMPTY
34284: LIST
34285: LIST
34286: LIST
34287: LIST
34288: LIST
34289: LIST
34290: LIST
34291: LIST
34292: LIST
34293: LIST
34294: LIST
34295: LIST
34296: LIST
34297: IN
34298: NOT
34299: OR
34300: PUSH
34301: LD_VAR 0 8
34305: PUSH
34306: LD_INT 5
34308: ARRAY
34309: NOT
34310: OR
34311: PUSH
34312: LD_VAR 0 8
34316: PUSH
34317: LD_INT 6
34319: ARRAY
34320: PUSH
34321: LD_INT 1
34323: PUSH
34324: LD_INT 2
34326: PUSH
34327: LD_INT 7
34329: PUSH
34330: LD_INT 9
34332: PUSH
34333: LD_INT 10
34335: PUSH
34336: LD_INT 11
34338: PUSH
34339: EMPTY
34340: LIST
34341: LIST
34342: LIST
34343: LIST
34344: LIST
34345: LIST
34346: IN
34347: NOT
34348: OR
34349: IFFALSE 34355
// exit ;
34351: POP
34352: POP
34353: GO 34453
// end ;
34355: GO 34026
34357: POP
34358: POP
// side := GetSide ( depot ) ;
34359: LD_ADDR_VAR 0 9
34363: PUSH
34364: LD_VAR 0 1
34368: PPUSH
34369: CALL_OW 255
34373: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
34374: LD_VAR 0 9
34378: PPUSH
34379: LD_VAR 0 3
34383: PPUSH
34384: LD_VAR 0 4
34388: PPUSH
34389: LD_INT 20
34391: PPUSH
34392: CALL 27107 0 4
34396: PUSH
34397: LD_INT 4
34399: ARRAY
34400: IFFALSE 34404
// exit ;
34402: GO 34453
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
34404: LD_VAR 0 2
34408: PUSH
34409: LD_INT 29
34411: PUSH
34412: LD_INT 30
34414: PUSH
34415: EMPTY
34416: LIST
34417: LIST
34418: IN
34419: PUSH
34420: LD_VAR 0 3
34424: PPUSH
34425: LD_VAR 0 4
34429: PPUSH
34430: LD_VAR 0 9
34434: PPUSH
34435: CALL_OW 440
34439: NOT
34440: AND
34441: IFFALSE 34445
// exit ;
34443: GO 34453
// result := true ;
34445: LD_ADDR_VAR 0 6
34449: PUSH
34450: LD_INT 1
34452: ST_TO_ADDR
// end ;
34453: LD_VAR 0 6
34457: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
34458: LD_INT 0
34460: PPUSH
34461: PPUSH
34462: PPUSH
34463: PPUSH
34464: PPUSH
34465: PPUSH
34466: PPUSH
34467: PPUSH
34468: PPUSH
34469: PPUSH
34470: PPUSH
34471: PPUSH
34472: PPUSH
34473: PPUSH
34474: PPUSH
34475: PPUSH
34476: PPUSH
34477: PPUSH
34478: PPUSH
34479: PPUSH
34480: PPUSH
34481: PPUSH
34482: PPUSH
34483: PPUSH
34484: PPUSH
34485: PPUSH
34486: PPUSH
34487: PPUSH
34488: PPUSH
34489: PPUSH
34490: PPUSH
34491: PPUSH
34492: PPUSH
34493: PPUSH
34494: PPUSH
34495: PPUSH
34496: PPUSH
34497: PPUSH
34498: PPUSH
34499: PPUSH
34500: PPUSH
34501: PPUSH
34502: PPUSH
34503: PPUSH
34504: PPUSH
34505: PPUSH
34506: PPUSH
34507: PPUSH
34508: PPUSH
34509: PPUSH
34510: PPUSH
34511: PPUSH
34512: PPUSH
34513: PPUSH
34514: PPUSH
34515: PPUSH
34516: PPUSH
34517: PPUSH
// result = [ ] ;
34518: LD_ADDR_VAR 0 7
34522: PUSH
34523: EMPTY
34524: ST_TO_ADDR
// temp_list = [ ] ;
34525: LD_ADDR_VAR 0 9
34529: PUSH
34530: EMPTY
34531: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
34532: LD_VAR 0 4
34536: PUSH
34537: LD_INT 0
34539: PUSH
34540: LD_INT 1
34542: PUSH
34543: LD_INT 2
34545: PUSH
34546: LD_INT 3
34548: PUSH
34549: LD_INT 4
34551: PUSH
34552: LD_INT 5
34554: PUSH
34555: EMPTY
34556: LIST
34557: LIST
34558: LIST
34559: LIST
34560: LIST
34561: LIST
34562: IN
34563: NOT
34564: PUSH
34565: LD_VAR 0 1
34569: PUSH
34570: LD_INT 0
34572: PUSH
34573: LD_INT 1
34575: PUSH
34576: EMPTY
34577: LIST
34578: LIST
34579: IN
34580: PUSH
34581: LD_VAR 0 5
34585: PUSH
34586: LD_INT 1
34588: PUSH
34589: LD_INT 2
34591: PUSH
34592: LD_INT 3
34594: PUSH
34595: EMPTY
34596: LIST
34597: LIST
34598: LIST
34599: IN
34600: NOT
34601: AND
34602: OR
34603: IFFALSE 34607
// exit ;
34605: GO 52998
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
34607: LD_VAR 0 1
34611: PUSH
34612: LD_INT 6
34614: PUSH
34615: LD_INT 7
34617: PUSH
34618: LD_INT 8
34620: PUSH
34621: LD_INT 13
34623: PUSH
34624: LD_INT 12
34626: PUSH
34627: LD_INT 15
34629: PUSH
34630: LD_INT 11
34632: PUSH
34633: LD_INT 14
34635: PUSH
34636: LD_INT 10
34638: PUSH
34639: EMPTY
34640: LIST
34641: LIST
34642: LIST
34643: LIST
34644: LIST
34645: LIST
34646: LIST
34647: LIST
34648: LIST
34649: IN
34650: IFFALSE 34660
// btype = b_lab ;
34652: LD_ADDR_VAR 0 1
34656: PUSH
34657: LD_INT 6
34659: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
34660: LD_VAR 0 6
34664: PUSH
34665: LD_INT 0
34667: PUSH
34668: LD_INT 1
34670: PUSH
34671: LD_INT 2
34673: PUSH
34674: EMPTY
34675: LIST
34676: LIST
34677: LIST
34678: IN
34679: NOT
34680: PUSH
34681: LD_VAR 0 1
34685: PUSH
34686: LD_INT 0
34688: PUSH
34689: LD_INT 1
34691: PUSH
34692: LD_INT 2
34694: PUSH
34695: LD_INT 3
34697: PUSH
34698: LD_INT 6
34700: PUSH
34701: LD_INT 36
34703: PUSH
34704: LD_INT 4
34706: PUSH
34707: LD_INT 5
34709: PUSH
34710: LD_INT 31
34712: PUSH
34713: LD_INT 32
34715: PUSH
34716: LD_INT 33
34718: PUSH
34719: EMPTY
34720: LIST
34721: LIST
34722: LIST
34723: LIST
34724: LIST
34725: LIST
34726: LIST
34727: LIST
34728: LIST
34729: LIST
34730: LIST
34731: IN
34732: NOT
34733: PUSH
34734: LD_VAR 0 6
34738: PUSH
34739: LD_INT 1
34741: EQUAL
34742: AND
34743: OR
34744: PUSH
34745: LD_VAR 0 1
34749: PUSH
34750: LD_INT 2
34752: PUSH
34753: LD_INT 3
34755: PUSH
34756: EMPTY
34757: LIST
34758: LIST
34759: IN
34760: NOT
34761: PUSH
34762: LD_VAR 0 6
34766: PUSH
34767: LD_INT 2
34769: EQUAL
34770: AND
34771: OR
34772: IFFALSE 34782
// mode = 0 ;
34774: LD_ADDR_VAR 0 6
34778: PUSH
34779: LD_INT 0
34781: ST_TO_ADDR
// case mode of 0 :
34782: LD_VAR 0 6
34786: PUSH
34787: LD_INT 0
34789: DOUBLE
34790: EQUAL
34791: IFTRUE 34795
34793: GO 46248
34795: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
34796: LD_ADDR_VAR 0 11
34800: PUSH
34801: LD_INT 0
34803: PUSH
34804: LD_INT 0
34806: PUSH
34807: EMPTY
34808: LIST
34809: LIST
34810: PUSH
34811: LD_INT 0
34813: PUSH
34814: LD_INT 1
34816: NEG
34817: PUSH
34818: EMPTY
34819: LIST
34820: LIST
34821: PUSH
34822: LD_INT 1
34824: PUSH
34825: LD_INT 0
34827: PUSH
34828: EMPTY
34829: LIST
34830: LIST
34831: PUSH
34832: LD_INT 1
34834: PUSH
34835: LD_INT 1
34837: PUSH
34838: EMPTY
34839: LIST
34840: LIST
34841: PUSH
34842: LD_INT 0
34844: PUSH
34845: LD_INT 1
34847: PUSH
34848: EMPTY
34849: LIST
34850: LIST
34851: PUSH
34852: LD_INT 1
34854: NEG
34855: PUSH
34856: LD_INT 0
34858: PUSH
34859: EMPTY
34860: LIST
34861: LIST
34862: PUSH
34863: LD_INT 1
34865: NEG
34866: PUSH
34867: LD_INT 1
34869: NEG
34870: PUSH
34871: EMPTY
34872: LIST
34873: LIST
34874: PUSH
34875: LD_INT 1
34877: NEG
34878: PUSH
34879: LD_INT 2
34881: NEG
34882: PUSH
34883: EMPTY
34884: LIST
34885: LIST
34886: PUSH
34887: LD_INT 0
34889: PUSH
34890: LD_INT 2
34892: NEG
34893: PUSH
34894: EMPTY
34895: LIST
34896: LIST
34897: PUSH
34898: LD_INT 1
34900: PUSH
34901: LD_INT 1
34903: NEG
34904: PUSH
34905: EMPTY
34906: LIST
34907: LIST
34908: PUSH
34909: LD_INT 1
34911: PUSH
34912: LD_INT 2
34914: PUSH
34915: EMPTY
34916: LIST
34917: LIST
34918: PUSH
34919: LD_INT 0
34921: PUSH
34922: LD_INT 2
34924: PUSH
34925: EMPTY
34926: LIST
34927: LIST
34928: PUSH
34929: LD_INT 1
34931: NEG
34932: PUSH
34933: LD_INT 1
34935: PUSH
34936: EMPTY
34937: LIST
34938: LIST
34939: PUSH
34940: LD_INT 1
34942: PUSH
34943: LD_INT 3
34945: PUSH
34946: EMPTY
34947: LIST
34948: LIST
34949: PUSH
34950: LD_INT 0
34952: PUSH
34953: LD_INT 3
34955: PUSH
34956: EMPTY
34957: LIST
34958: LIST
34959: PUSH
34960: LD_INT 1
34962: NEG
34963: PUSH
34964: LD_INT 2
34966: PUSH
34967: EMPTY
34968: LIST
34969: LIST
34970: PUSH
34971: EMPTY
34972: LIST
34973: LIST
34974: LIST
34975: LIST
34976: LIST
34977: LIST
34978: LIST
34979: LIST
34980: LIST
34981: LIST
34982: LIST
34983: LIST
34984: LIST
34985: LIST
34986: LIST
34987: LIST
34988: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34989: LD_ADDR_VAR 0 12
34993: PUSH
34994: LD_INT 0
34996: PUSH
34997: LD_INT 0
34999: PUSH
35000: EMPTY
35001: LIST
35002: LIST
35003: PUSH
35004: LD_INT 0
35006: PUSH
35007: LD_INT 1
35009: NEG
35010: PUSH
35011: EMPTY
35012: LIST
35013: LIST
35014: PUSH
35015: LD_INT 1
35017: PUSH
35018: LD_INT 0
35020: PUSH
35021: EMPTY
35022: LIST
35023: LIST
35024: PUSH
35025: LD_INT 1
35027: PUSH
35028: LD_INT 1
35030: PUSH
35031: EMPTY
35032: LIST
35033: LIST
35034: PUSH
35035: LD_INT 0
35037: PUSH
35038: LD_INT 1
35040: PUSH
35041: EMPTY
35042: LIST
35043: LIST
35044: PUSH
35045: LD_INT 1
35047: NEG
35048: PUSH
35049: LD_INT 0
35051: PUSH
35052: EMPTY
35053: LIST
35054: LIST
35055: PUSH
35056: LD_INT 1
35058: NEG
35059: PUSH
35060: LD_INT 1
35062: NEG
35063: PUSH
35064: EMPTY
35065: LIST
35066: LIST
35067: PUSH
35068: LD_INT 1
35070: PUSH
35071: LD_INT 1
35073: NEG
35074: PUSH
35075: EMPTY
35076: LIST
35077: LIST
35078: PUSH
35079: LD_INT 2
35081: PUSH
35082: LD_INT 0
35084: PUSH
35085: EMPTY
35086: LIST
35087: LIST
35088: PUSH
35089: LD_INT 2
35091: PUSH
35092: LD_INT 1
35094: PUSH
35095: EMPTY
35096: LIST
35097: LIST
35098: PUSH
35099: LD_INT 1
35101: NEG
35102: PUSH
35103: LD_INT 1
35105: PUSH
35106: EMPTY
35107: LIST
35108: LIST
35109: PUSH
35110: LD_INT 2
35112: NEG
35113: PUSH
35114: LD_INT 0
35116: PUSH
35117: EMPTY
35118: LIST
35119: LIST
35120: PUSH
35121: LD_INT 2
35123: NEG
35124: PUSH
35125: LD_INT 1
35127: NEG
35128: PUSH
35129: EMPTY
35130: LIST
35131: LIST
35132: PUSH
35133: LD_INT 2
35135: NEG
35136: PUSH
35137: LD_INT 1
35139: PUSH
35140: EMPTY
35141: LIST
35142: LIST
35143: PUSH
35144: LD_INT 3
35146: NEG
35147: PUSH
35148: LD_INT 0
35150: PUSH
35151: EMPTY
35152: LIST
35153: LIST
35154: PUSH
35155: LD_INT 3
35157: NEG
35158: PUSH
35159: LD_INT 1
35161: NEG
35162: PUSH
35163: EMPTY
35164: LIST
35165: LIST
35166: PUSH
35167: EMPTY
35168: LIST
35169: LIST
35170: LIST
35171: LIST
35172: LIST
35173: LIST
35174: LIST
35175: LIST
35176: LIST
35177: LIST
35178: LIST
35179: LIST
35180: LIST
35181: LIST
35182: LIST
35183: LIST
35184: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35185: LD_ADDR_VAR 0 13
35189: PUSH
35190: LD_INT 0
35192: PUSH
35193: LD_INT 0
35195: PUSH
35196: EMPTY
35197: LIST
35198: LIST
35199: PUSH
35200: LD_INT 0
35202: PUSH
35203: LD_INT 1
35205: NEG
35206: PUSH
35207: EMPTY
35208: LIST
35209: LIST
35210: PUSH
35211: LD_INT 1
35213: PUSH
35214: LD_INT 0
35216: PUSH
35217: EMPTY
35218: LIST
35219: LIST
35220: PUSH
35221: LD_INT 1
35223: PUSH
35224: LD_INT 1
35226: PUSH
35227: EMPTY
35228: LIST
35229: LIST
35230: PUSH
35231: LD_INT 0
35233: PUSH
35234: LD_INT 1
35236: PUSH
35237: EMPTY
35238: LIST
35239: LIST
35240: PUSH
35241: LD_INT 1
35243: NEG
35244: PUSH
35245: LD_INT 0
35247: PUSH
35248: EMPTY
35249: LIST
35250: LIST
35251: PUSH
35252: LD_INT 1
35254: NEG
35255: PUSH
35256: LD_INT 1
35258: NEG
35259: PUSH
35260: EMPTY
35261: LIST
35262: LIST
35263: PUSH
35264: LD_INT 1
35266: NEG
35267: PUSH
35268: LD_INT 2
35270: NEG
35271: PUSH
35272: EMPTY
35273: LIST
35274: LIST
35275: PUSH
35276: LD_INT 2
35278: PUSH
35279: LD_INT 1
35281: PUSH
35282: EMPTY
35283: LIST
35284: LIST
35285: PUSH
35286: LD_INT 2
35288: PUSH
35289: LD_INT 2
35291: PUSH
35292: EMPTY
35293: LIST
35294: LIST
35295: PUSH
35296: LD_INT 1
35298: PUSH
35299: LD_INT 2
35301: PUSH
35302: EMPTY
35303: LIST
35304: LIST
35305: PUSH
35306: LD_INT 2
35308: NEG
35309: PUSH
35310: LD_INT 1
35312: NEG
35313: PUSH
35314: EMPTY
35315: LIST
35316: LIST
35317: PUSH
35318: LD_INT 2
35320: NEG
35321: PUSH
35322: LD_INT 2
35324: NEG
35325: PUSH
35326: EMPTY
35327: LIST
35328: LIST
35329: PUSH
35330: LD_INT 2
35332: NEG
35333: PUSH
35334: LD_INT 3
35336: NEG
35337: PUSH
35338: EMPTY
35339: LIST
35340: LIST
35341: PUSH
35342: LD_INT 3
35344: NEG
35345: PUSH
35346: LD_INT 2
35348: NEG
35349: PUSH
35350: EMPTY
35351: LIST
35352: LIST
35353: PUSH
35354: LD_INT 3
35356: NEG
35357: PUSH
35358: LD_INT 3
35360: NEG
35361: PUSH
35362: EMPTY
35363: LIST
35364: LIST
35365: PUSH
35366: EMPTY
35367: LIST
35368: LIST
35369: LIST
35370: LIST
35371: LIST
35372: LIST
35373: LIST
35374: LIST
35375: LIST
35376: LIST
35377: LIST
35378: LIST
35379: LIST
35380: LIST
35381: LIST
35382: LIST
35383: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35384: LD_ADDR_VAR 0 14
35388: PUSH
35389: LD_INT 0
35391: PUSH
35392: LD_INT 0
35394: PUSH
35395: EMPTY
35396: LIST
35397: LIST
35398: PUSH
35399: LD_INT 0
35401: PUSH
35402: LD_INT 1
35404: NEG
35405: PUSH
35406: EMPTY
35407: LIST
35408: LIST
35409: PUSH
35410: LD_INT 1
35412: PUSH
35413: LD_INT 0
35415: PUSH
35416: EMPTY
35417: LIST
35418: LIST
35419: PUSH
35420: LD_INT 1
35422: PUSH
35423: LD_INT 1
35425: PUSH
35426: EMPTY
35427: LIST
35428: LIST
35429: PUSH
35430: LD_INT 0
35432: PUSH
35433: LD_INT 1
35435: PUSH
35436: EMPTY
35437: LIST
35438: LIST
35439: PUSH
35440: LD_INT 1
35442: NEG
35443: PUSH
35444: LD_INT 0
35446: PUSH
35447: EMPTY
35448: LIST
35449: LIST
35450: PUSH
35451: LD_INT 1
35453: NEG
35454: PUSH
35455: LD_INT 1
35457: NEG
35458: PUSH
35459: EMPTY
35460: LIST
35461: LIST
35462: PUSH
35463: LD_INT 1
35465: NEG
35466: PUSH
35467: LD_INT 2
35469: NEG
35470: PUSH
35471: EMPTY
35472: LIST
35473: LIST
35474: PUSH
35475: LD_INT 0
35477: PUSH
35478: LD_INT 2
35480: NEG
35481: PUSH
35482: EMPTY
35483: LIST
35484: LIST
35485: PUSH
35486: LD_INT 1
35488: PUSH
35489: LD_INT 1
35491: NEG
35492: PUSH
35493: EMPTY
35494: LIST
35495: LIST
35496: PUSH
35497: LD_INT 1
35499: PUSH
35500: LD_INT 2
35502: PUSH
35503: EMPTY
35504: LIST
35505: LIST
35506: PUSH
35507: LD_INT 0
35509: PUSH
35510: LD_INT 2
35512: PUSH
35513: EMPTY
35514: LIST
35515: LIST
35516: PUSH
35517: LD_INT 1
35519: NEG
35520: PUSH
35521: LD_INT 1
35523: PUSH
35524: EMPTY
35525: LIST
35526: LIST
35527: PUSH
35528: LD_INT 1
35530: NEG
35531: PUSH
35532: LD_INT 3
35534: NEG
35535: PUSH
35536: EMPTY
35537: LIST
35538: LIST
35539: PUSH
35540: LD_INT 0
35542: PUSH
35543: LD_INT 3
35545: NEG
35546: PUSH
35547: EMPTY
35548: LIST
35549: LIST
35550: PUSH
35551: LD_INT 1
35553: PUSH
35554: LD_INT 2
35556: NEG
35557: PUSH
35558: EMPTY
35559: LIST
35560: LIST
35561: PUSH
35562: EMPTY
35563: LIST
35564: LIST
35565: LIST
35566: LIST
35567: LIST
35568: LIST
35569: LIST
35570: LIST
35571: LIST
35572: LIST
35573: LIST
35574: LIST
35575: LIST
35576: LIST
35577: LIST
35578: LIST
35579: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35580: LD_ADDR_VAR 0 15
35584: PUSH
35585: LD_INT 0
35587: PUSH
35588: LD_INT 0
35590: PUSH
35591: EMPTY
35592: LIST
35593: LIST
35594: PUSH
35595: LD_INT 0
35597: PUSH
35598: LD_INT 1
35600: NEG
35601: PUSH
35602: EMPTY
35603: LIST
35604: LIST
35605: PUSH
35606: LD_INT 1
35608: PUSH
35609: LD_INT 0
35611: PUSH
35612: EMPTY
35613: LIST
35614: LIST
35615: PUSH
35616: LD_INT 1
35618: PUSH
35619: LD_INT 1
35621: PUSH
35622: EMPTY
35623: LIST
35624: LIST
35625: PUSH
35626: LD_INT 0
35628: PUSH
35629: LD_INT 1
35631: PUSH
35632: EMPTY
35633: LIST
35634: LIST
35635: PUSH
35636: LD_INT 1
35638: NEG
35639: PUSH
35640: LD_INT 0
35642: PUSH
35643: EMPTY
35644: LIST
35645: LIST
35646: PUSH
35647: LD_INT 1
35649: NEG
35650: PUSH
35651: LD_INT 1
35653: NEG
35654: PUSH
35655: EMPTY
35656: LIST
35657: LIST
35658: PUSH
35659: LD_INT 1
35661: PUSH
35662: LD_INT 1
35664: NEG
35665: PUSH
35666: EMPTY
35667: LIST
35668: LIST
35669: PUSH
35670: LD_INT 2
35672: PUSH
35673: LD_INT 0
35675: PUSH
35676: EMPTY
35677: LIST
35678: LIST
35679: PUSH
35680: LD_INT 2
35682: PUSH
35683: LD_INT 1
35685: PUSH
35686: EMPTY
35687: LIST
35688: LIST
35689: PUSH
35690: LD_INT 1
35692: NEG
35693: PUSH
35694: LD_INT 1
35696: PUSH
35697: EMPTY
35698: LIST
35699: LIST
35700: PUSH
35701: LD_INT 2
35703: NEG
35704: PUSH
35705: LD_INT 0
35707: PUSH
35708: EMPTY
35709: LIST
35710: LIST
35711: PUSH
35712: LD_INT 2
35714: NEG
35715: PUSH
35716: LD_INT 1
35718: NEG
35719: PUSH
35720: EMPTY
35721: LIST
35722: LIST
35723: PUSH
35724: LD_INT 2
35726: PUSH
35727: LD_INT 1
35729: NEG
35730: PUSH
35731: EMPTY
35732: LIST
35733: LIST
35734: PUSH
35735: LD_INT 3
35737: PUSH
35738: LD_INT 0
35740: PUSH
35741: EMPTY
35742: LIST
35743: LIST
35744: PUSH
35745: LD_INT 3
35747: PUSH
35748: LD_INT 1
35750: PUSH
35751: EMPTY
35752: LIST
35753: LIST
35754: PUSH
35755: EMPTY
35756: LIST
35757: LIST
35758: LIST
35759: LIST
35760: LIST
35761: LIST
35762: LIST
35763: LIST
35764: LIST
35765: LIST
35766: LIST
35767: LIST
35768: LIST
35769: LIST
35770: LIST
35771: LIST
35772: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35773: LD_ADDR_VAR 0 16
35777: PUSH
35778: LD_INT 0
35780: PUSH
35781: LD_INT 0
35783: PUSH
35784: EMPTY
35785: LIST
35786: LIST
35787: PUSH
35788: LD_INT 0
35790: PUSH
35791: LD_INT 1
35793: NEG
35794: PUSH
35795: EMPTY
35796: LIST
35797: LIST
35798: PUSH
35799: LD_INT 1
35801: PUSH
35802: LD_INT 0
35804: PUSH
35805: EMPTY
35806: LIST
35807: LIST
35808: PUSH
35809: LD_INT 1
35811: PUSH
35812: LD_INT 1
35814: PUSH
35815: EMPTY
35816: LIST
35817: LIST
35818: PUSH
35819: LD_INT 0
35821: PUSH
35822: LD_INT 1
35824: PUSH
35825: EMPTY
35826: LIST
35827: LIST
35828: PUSH
35829: LD_INT 1
35831: NEG
35832: PUSH
35833: LD_INT 0
35835: PUSH
35836: EMPTY
35837: LIST
35838: LIST
35839: PUSH
35840: LD_INT 1
35842: NEG
35843: PUSH
35844: LD_INT 1
35846: NEG
35847: PUSH
35848: EMPTY
35849: LIST
35850: LIST
35851: PUSH
35852: LD_INT 1
35854: NEG
35855: PUSH
35856: LD_INT 2
35858: NEG
35859: PUSH
35860: EMPTY
35861: LIST
35862: LIST
35863: PUSH
35864: LD_INT 2
35866: PUSH
35867: LD_INT 1
35869: PUSH
35870: EMPTY
35871: LIST
35872: LIST
35873: PUSH
35874: LD_INT 2
35876: PUSH
35877: LD_INT 2
35879: PUSH
35880: EMPTY
35881: LIST
35882: LIST
35883: PUSH
35884: LD_INT 1
35886: PUSH
35887: LD_INT 2
35889: PUSH
35890: EMPTY
35891: LIST
35892: LIST
35893: PUSH
35894: LD_INT 2
35896: NEG
35897: PUSH
35898: LD_INT 1
35900: NEG
35901: PUSH
35902: EMPTY
35903: LIST
35904: LIST
35905: PUSH
35906: LD_INT 2
35908: NEG
35909: PUSH
35910: LD_INT 2
35912: NEG
35913: PUSH
35914: EMPTY
35915: LIST
35916: LIST
35917: PUSH
35918: LD_INT 3
35920: PUSH
35921: LD_INT 2
35923: PUSH
35924: EMPTY
35925: LIST
35926: LIST
35927: PUSH
35928: LD_INT 3
35930: PUSH
35931: LD_INT 3
35933: PUSH
35934: EMPTY
35935: LIST
35936: LIST
35937: PUSH
35938: LD_INT 2
35940: PUSH
35941: LD_INT 3
35943: PUSH
35944: EMPTY
35945: LIST
35946: LIST
35947: PUSH
35948: EMPTY
35949: LIST
35950: LIST
35951: LIST
35952: LIST
35953: LIST
35954: LIST
35955: LIST
35956: LIST
35957: LIST
35958: LIST
35959: LIST
35960: LIST
35961: LIST
35962: LIST
35963: LIST
35964: LIST
35965: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35966: LD_ADDR_VAR 0 17
35970: PUSH
35971: LD_INT 0
35973: PUSH
35974: LD_INT 0
35976: PUSH
35977: EMPTY
35978: LIST
35979: LIST
35980: PUSH
35981: LD_INT 0
35983: PUSH
35984: LD_INT 1
35986: NEG
35987: PUSH
35988: EMPTY
35989: LIST
35990: LIST
35991: PUSH
35992: LD_INT 1
35994: PUSH
35995: LD_INT 0
35997: PUSH
35998: EMPTY
35999: LIST
36000: LIST
36001: PUSH
36002: LD_INT 1
36004: PUSH
36005: LD_INT 1
36007: PUSH
36008: EMPTY
36009: LIST
36010: LIST
36011: PUSH
36012: LD_INT 0
36014: PUSH
36015: LD_INT 1
36017: PUSH
36018: EMPTY
36019: LIST
36020: LIST
36021: PUSH
36022: LD_INT 1
36024: NEG
36025: PUSH
36026: LD_INT 0
36028: PUSH
36029: EMPTY
36030: LIST
36031: LIST
36032: PUSH
36033: LD_INT 1
36035: NEG
36036: PUSH
36037: LD_INT 1
36039: NEG
36040: PUSH
36041: EMPTY
36042: LIST
36043: LIST
36044: PUSH
36045: LD_INT 1
36047: NEG
36048: PUSH
36049: LD_INT 2
36051: NEG
36052: PUSH
36053: EMPTY
36054: LIST
36055: LIST
36056: PUSH
36057: LD_INT 0
36059: PUSH
36060: LD_INT 2
36062: NEG
36063: PUSH
36064: EMPTY
36065: LIST
36066: LIST
36067: PUSH
36068: LD_INT 1
36070: PUSH
36071: LD_INT 1
36073: NEG
36074: PUSH
36075: EMPTY
36076: LIST
36077: LIST
36078: PUSH
36079: LD_INT 2
36081: PUSH
36082: LD_INT 0
36084: PUSH
36085: EMPTY
36086: LIST
36087: LIST
36088: PUSH
36089: LD_INT 2
36091: PUSH
36092: LD_INT 1
36094: PUSH
36095: EMPTY
36096: LIST
36097: LIST
36098: PUSH
36099: LD_INT 2
36101: PUSH
36102: LD_INT 2
36104: PUSH
36105: EMPTY
36106: LIST
36107: LIST
36108: PUSH
36109: LD_INT 1
36111: PUSH
36112: LD_INT 2
36114: PUSH
36115: EMPTY
36116: LIST
36117: LIST
36118: PUSH
36119: LD_INT 0
36121: PUSH
36122: LD_INT 2
36124: PUSH
36125: EMPTY
36126: LIST
36127: LIST
36128: PUSH
36129: LD_INT 1
36131: NEG
36132: PUSH
36133: LD_INT 1
36135: PUSH
36136: EMPTY
36137: LIST
36138: LIST
36139: PUSH
36140: LD_INT 2
36142: NEG
36143: PUSH
36144: LD_INT 0
36146: PUSH
36147: EMPTY
36148: LIST
36149: LIST
36150: PUSH
36151: LD_INT 2
36153: NEG
36154: PUSH
36155: LD_INT 1
36157: NEG
36158: PUSH
36159: EMPTY
36160: LIST
36161: LIST
36162: PUSH
36163: LD_INT 2
36165: NEG
36166: PUSH
36167: LD_INT 2
36169: NEG
36170: PUSH
36171: EMPTY
36172: LIST
36173: LIST
36174: PUSH
36175: EMPTY
36176: LIST
36177: LIST
36178: LIST
36179: LIST
36180: LIST
36181: LIST
36182: LIST
36183: LIST
36184: LIST
36185: LIST
36186: LIST
36187: LIST
36188: LIST
36189: LIST
36190: LIST
36191: LIST
36192: LIST
36193: LIST
36194: LIST
36195: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36196: LD_ADDR_VAR 0 18
36200: PUSH
36201: LD_INT 0
36203: PUSH
36204: LD_INT 0
36206: PUSH
36207: EMPTY
36208: LIST
36209: LIST
36210: PUSH
36211: LD_INT 0
36213: PUSH
36214: LD_INT 1
36216: NEG
36217: PUSH
36218: EMPTY
36219: LIST
36220: LIST
36221: PUSH
36222: LD_INT 1
36224: PUSH
36225: LD_INT 0
36227: PUSH
36228: EMPTY
36229: LIST
36230: LIST
36231: PUSH
36232: LD_INT 1
36234: PUSH
36235: LD_INT 1
36237: PUSH
36238: EMPTY
36239: LIST
36240: LIST
36241: PUSH
36242: LD_INT 0
36244: PUSH
36245: LD_INT 1
36247: PUSH
36248: EMPTY
36249: LIST
36250: LIST
36251: PUSH
36252: LD_INT 1
36254: NEG
36255: PUSH
36256: LD_INT 0
36258: PUSH
36259: EMPTY
36260: LIST
36261: LIST
36262: PUSH
36263: LD_INT 1
36265: NEG
36266: PUSH
36267: LD_INT 1
36269: NEG
36270: PUSH
36271: EMPTY
36272: LIST
36273: LIST
36274: PUSH
36275: LD_INT 1
36277: NEG
36278: PUSH
36279: LD_INT 2
36281: NEG
36282: PUSH
36283: EMPTY
36284: LIST
36285: LIST
36286: PUSH
36287: LD_INT 0
36289: PUSH
36290: LD_INT 2
36292: NEG
36293: PUSH
36294: EMPTY
36295: LIST
36296: LIST
36297: PUSH
36298: LD_INT 1
36300: PUSH
36301: LD_INT 1
36303: NEG
36304: PUSH
36305: EMPTY
36306: LIST
36307: LIST
36308: PUSH
36309: LD_INT 2
36311: PUSH
36312: LD_INT 0
36314: PUSH
36315: EMPTY
36316: LIST
36317: LIST
36318: PUSH
36319: LD_INT 2
36321: PUSH
36322: LD_INT 1
36324: PUSH
36325: EMPTY
36326: LIST
36327: LIST
36328: PUSH
36329: LD_INT 2
36331: PUSH
36332: LD_INT 2
36334: PUSH
36335: EMPTY
36336: LIST
36337: LIST
36338: PUSH
36339: LD_INT 1
36341: PUSH
36342: LD_INT 2
36344: PUSH
36345: EMPTY
36346: LIST
36347: LIST
36348: PUSH
36349: LD_INT 0
36351: PUSH
36352: LD_INT 2
36354: PUSH
36355: EMPTY
36356: LIST
36357: LIST
36358: PUSH
36359: LD_INT 1
36361: NEG
36362: PUSH
36363: LD_INT 1
36365: PUSH
36366: EMPTY
36367: LIST
36368: LIST
36369: PUSH
36370: LD_INT 2
36372: NEG
36373: PUSH
36374: LD_INT 0
36376: PUSH
36377: EMPTY
36378: LIST
36379: LIST
36380: PUSH
36381: LD_INT 2
36383: NEG
36384: PUSH
36385: LD_INT 1
36387: NEG
36388: PUSH
36389: EMPTY
36390: LIST
36391: LIST
36392: PUSH
36393: LD_INT 2
36395: NEG
36396: PUSH
36397: LD_INT 2
36399: NEG
36400: PUSH
36401: EMPTY
36402: LIST
36403: LIST
36404: PUSH
36405: EMPTY
36406: LIST
36407: LIST
36408: LIST
36409: LIST
36410: LIST
36411: LIST
36412: LIST
36413: LIST
36414: LIST
36415: LIST
36416: LIST
36417: LIST
36418: LIST
36419: LIST
36420: LIST
36421: LIST
36422: LIST
36423: LIST
36424: LIST
36425: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36426: LD_ADDR_VAR 0 19
36430: PUSH
36431: LD_INT 0
36433: PUSH
36434: LD_INT 0
36436: PUSH
36437: EMPTY
36438: LIST
36439: LIST
36440: PUSH
36441: LD_INT 0
36443: PUSH
36444: LD_INT 1
36446: NEG
36447: PUSH
36448: EMPTY
36449: LIST
36450: LIST
36451: PUSH
36452: LD_INT 1
36454: PUSH
36455: LD_INT 0
36457: PUSH
36458: EMPTY
36459: LIST
36460: LIST
36461: PUSH
36462: LD_INT 1
36464: PUSH
36465: LD_INT 1
36467: PUSH
36468: EMPTY
36469: LIST
36470: LIST
36471: PUSH
36472: LD_INT 0
36474: PUSH
36475: LD_INT 1
36477: PUSH
36478: EMPTY
36479: LIST
36480: LIST
36481: PUSH
36482: LD_INT 1
36484: NEG
36485: PUSH
36486: LD_INT 0
36488: PUSH
36489: EMPTY
36490: LIST
36491: LIST
36492: PUSH
36493: LD_INT 1
36495: NEG
36496: PUSH
36497: LD_INT 1
36499: NEG
36500: PUSH
36501: EMPTY
36502: LIST
36503: LIST
36504: PUSH
36505: LD_INT 1
36507: NEG
36508: PUSH
36509: LD_INT 2
36511: NEG
36512: PUSH
36513: EMPTY
36514: LIST
36515: LIST
36516: PUSH
36517: LD_INT 0
36519: PUSH
36520: LD_INT 2
36522: NEG
36523: PUSH
36524: EMPTY
36525: LIST
36526: LIST
36527: PUSH
36528: LD_INT 1
36530: PUSH
36531: LD_INT 1
36533: NEG
36534: PUSH
36535: EMPTY
36536: LIST
36537: LIST
36538: PUSH
36539: LD_INT 2
36541: PUSH
36542: LD_INT 0
36544: PUSH
36545: EMPTY
36546: LIST
36547: LIST
36548: PUSH
36549: LD_INT 2
36551: PUSH
36552: LD_INT 1
36554: PUSH
36555: EMPTY
36556: LIST
36557: LIST
36558: PUSH
36559: LD_INT 2
36561: PUSH
36562: LD_INT 2
36564: PUSH
36565: EMPTY
36566: LIST
36567: LIST
36568: PUSH
36569: LD_INT 1
36571: PUSH
36572: LD_INT 2
36574: PUSH
36575: EMPTY
36576: LIST
36577: LIST
36578: PUSH
36579: LD_INT 0
36581: PUSH
36582: LD_INT 2
36584: PUSH
36585: EMPTY
36586: LIST
36587: LIST
36588: PUSH
36589: LD_INT 1
36591: NEG
36592: PUSH
36593: LD_INT 1
36595: PUSH
36596: EMPTY
36597: LIST
36598: LIST
36599: PUSH
36600: LD_INT 2
36602: NEG
36603: PUSH
36604: LD_INT 0
36606: PUSH
36607: EMPTY
36608: LIST
36609: LIST
36610: PUSH
36611: LD_INT 2
36613: NEG
36614: PUSH
36615: LD_INT 1
36617: NEG
36618: PUSH
36619: EMPTY
36620: LIST
36621: LIST
36622: PUSH
36623: LD_INT 2
36625: NEG
36626: PUSH
36627: LD_INT 2
36629: NEG
36630: PUSH
36631: EMPTY
36632: LIST
36633: LIST
36634: PUSH
36635: EMPTY
36636: LIST
36637: LIST
36638: LIST
36639: LIST
36640: LIST
36641: LIST
36642: LIST
36643: LIST
36644: LIST
36645: LIST
36646: LIST
36647: LIST
36648: LIST
36649: LIST
36650: LIST
36651: LIST
36652: LIST
36653: LIST
36654: LIST
36655: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36656: LD_ADDR_VAR 0 20
36660: PUSH
36661: LD_INT 0
36663: PUSH
36664: LD_INT 0
36666: PUSH
36667: EMPTY
36668: LIST
36669: LIST
36670: PUSH
36671: LD_INT 0
36673: PUSH
36674: LD_INT 1
36676: NEG
36677: PUSH
36678: EMPTY
36679: LIST
36680: LIST
36681: PUSH
36682: LD_INT 1
36684: PUSH
36685: LD_INT 0
36687: PUSH
36688: EMPTY
36689: LIST
36690: LIST
36691: PUSH
36692: LD_INT 1
36694: PUSH
36695: LD_INT 1
36697: PUSH
36698: EMPTY
36699: LIST
36700: LIST
36701: PUSH
36702: LD_INT 0
36704: PUSH
36705: LD_INT 1
36707: PUSH
36708: EMPTY
36709: LIST
36710: LIST
36711: PUSH
36712: LD_INT 1
36714: NEG
36715: PUSH
36716: LD_INT 0
36718: PUSH
36719: EMPTY
36720: LIST
36721: LIST
36722: PUSH
36723: LD_INT 1
36725: NEG
36726: PUSH
36727: LD_INT 1
36729: NEG
36730: PUSH
36731: EMPTY
36732: LIST
36733: LIST
36734: PUSH
36735: LD_INT 1
36737: NEG
36738: PUSH
36739: LD_INT 2
36741: NEG
36742: PUSH
36743: EMPTY
36744: LIST
36745: LIST
36746: PUSH
36747: LD_INT 0
36749: PUSH
36750: LD_INT 2
36752: NEG
36753: PUSH
36754: EMPTY
36755: LIST
36756: LIST
36757: PUSH
36758: LD_INT 1
36760: PUSH
36761: LD_INT 1
36763: NEG
36764: PUSH
36765: EMPTY
36766: LIST
36767: LIST
36768: PUSH
36769: LD_INT 2
36771: PUSH
36772: LD_INT 0
36774: PUSH
36775: EMPTY
36776: LIST
36777: LIST
36778: PUSH
36779: LD_INT 2
36781: PUSH
36782: LD_INT 1
36784: PUSH
36785: EMPTY
36786: LIST
36787: LIST
36788: PUSH
36789: LD_INT 2
36791: PUSH
36792: LD_INT 2
36794: PUSH
36795: EMPTY
36796: LIST
36797: LIST
36798: PUSH
36799: LD_INT 1
36801: PUSH
36802: LD_INT 2
36804: PUSH
36805: EMPTY
36806: LIST
36807: LIST
36808: PUSH
36809: LD_INT 0
36811: PUSH
36812: LD_INT 2
36814: PUSH
36815: EMPTY
36816: LIST
36817: LIST
36818: PUSH
36819: LD_INT 1
36821: NEG
36822: PUSH
36823: LD_INT 1
36825: PUSH
36826: EMPTY
36827: LIST
36828: LIST
36829: PUSH
36830: LD_INT 2
36832: NEG
36833: PUSH
36834: LD_INT 0
36836: PUSH
36837: EMPTY
36838: LIST
36839: LIST
36840: PUSH
36841: LD_INT 2
36843: NEG
36844: PUSH
36845: LD_INT 1
36847: NEG
36848: PUSH
36849: EMPTY
36850: LIST
36851: LIST
36852: PUSH
36853: LD_INT 2
36855: NEG
36856: PUSH
36857: LD_INT 2
36859: NEG
36860: PUSH
36861: EMPTY
36862: LIST
36863: LIST
36864: PUSH
36865: EMPTY
36866: LIST
36867: LIST
36868: LIST
36869: LIST
36870: LIST
36871: LIST
36872: LIST
36873: LIST
36874: LIST
36875: LIST
36876: LIST
36877: LIST
36878: LIST
36879: LIST
36880: LIST
36881: LIST
36882: LIST
36883: LIST
36884: LIST
36885: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36886: LD_ADDR_VAR 0 21
36890: PUSH
36891: LD_INT 0
36893: PUSH
36894: LD_INT 0
36896: PUSH
36897: EMPTY
36898: LIST
36899: LIST
36900: PUSH
36901: LD_INT 0
36903: PUSH
36904: LD_INT 1
36906: NEG
36907: PUSH
36908: EMPTY
36909: LIST
36910: LIST
36911: PUSH
36912: LD_INT 1
36914: PUSH
36915: LD_INT 0
36917: PUSH
36918: EMPTY
36919: LIST
36920: LIST
36921: PUSH
36922: LD_INT 1
36924: PUSH
36925: LD_INT 1
36927: PUSH
36928: EMPTY
36929: LIST
36930: LIST
36931: PUSH
36932: LD_INT 0
36934: PUSH
36935: LD_INT 1
36937: PUSH
36938: EMPTY
36939: LIST
36940: LIST
36941: PUSH
36942: LD_INT 1
36944: NEG
36945: PUSH
36946: LD_INT 0
36948: PUSH
36949: EMPTY
36950: LIST
36951: LIST
36952: PUSH
36953: LD_INT 1
36955: NEG
36956: PUSH
36957: LD_INT 1
36959: NEG
36960: PUSH
36961: EMPTY
36962: LIST
36963: LIST
36964: PUSH
36965: LD_INT 1
36967: NEG
36968: PUSH
36969: LD_INT 2
36971: NEG
36972: PUSH
36973: EMPTY
36974: LIST
36975: LIST
36976: PUSH
36977: LD_INT 0
36979: PUSH
36980: LD_INT 2
36982: NEG
36983: PUSH
36984: EMPTY
36985: LIST
36986: LIST
36987: PUSH
36988: LD_INT 1
36990: PUSH
36991: LD_INT 1
36993: NEG
36994: PUSH
36995: EMPTY
36996: LIST
36997: LIST
36998: PUSH
36999: LD_INT 2
37001: PUSH
37002: LD_INT 0
37004: PUSH
37005: EMPTY
37006: LIST
37007: LIST
37008: PUSH
37009: LD_INT 2
37011: PUSH
37012: LD_INT 1
37014: PUSH
37015: EMPTY
37016: LIST
37017: LIST
37018: PUSH
37019: LD_INT 2
37021: PUSH
37022: LD_INT 2
37024: PUSH
37025: EMPTY
37026: LIST
37027: LIST
37028: PUSH
37029: LD_INT 1
37031: PUSH
37032: LD_INT 2
37034: PUSH
37035: EMPTY
37036: LIST
37037: LIST
37038: PUSH
37039: LD_INT 0
37041: PUSH
37042: LD_INT 2
37044: PUSH
37045: EMPTY
37046: LIST
37047: LIST
37048: PUSH
37049: LD_INT 1
37051: NEG
37052: PUSH
37053: LD_INT 1
37055: PUSH
37056: EMPTY
37057: LIST
37058: LIST
37059: PUSH
37060: LD_INT 2
37062: NEG
37063: PUSH
37064: LD_INT 0
37066: PUSH
37067: EMPTY
37068: LIST
37069: LIST
37070: PUSH
37071: LD_INT 2
37073: NEG
37074: PUSH
37075: LD_INT 1
37077: NEG
37078: PUSH
37079: EMPTY
37080: LIST
37081: LIST
37082: PUSH
37083: LD_INT 2
37085: NEG
37086: PUSH
37087: LD_INT 2
37089: NEG
37090: PUSH
37091: EMPTY
37092: LIST
37093: LIST
37094: PUSH
37095: EMPTY
37096: LIST
37097: LIST
37098: LIST
37099: LIST
37100: LIST
37101: LIST
37102: LIST
37103: LIST
37104: LIST
37105: LIST
37106: LIST
37107: LIST
37108: LIST
37109: LIST
37110: LIST
37111: LIST
37112: LIST
37113: LIST
37114: LIST
37115: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37116: LD_ADDR_VAR 0 22
37120: PUSH
37121: LD_INT 0
37123: PUSH
37124: LD_INT 0
37126: PUSH
37127: EMPTY
37128: LIST
37129: LIST
37130: PUSH
37131: LD_INT 0
37133: PUSH
37134: LD_INT 1
37136: NEG
37137: PUSH
37138: EMPTY
37139: LIST
37140: LIST
37141: PUSH
37142: LD_INT 1
37144: PUSH
37145: LD_INT 0
37147: PUSH
37148: EMPTY
37149: LIST
37150: LIST
37151: PUSH
37152: LD_INT 1
37154: PUSH
37155: LD_INT 1
37157: PUSH
37158: EMPTY
37159: LIST
37160: LIST
37161: PUSH
37162: LD_INT 0
37164: PUSH
37165: LD_INT 1
37167: PUSH
37168: EMPTY
37169: LIST
37170: LIST
37171: PUSH
37172: LD_INT 1
37174: NEG
37175: PUSH
37176: LD_INT 0
37178: PUSH
37179: EMPTY
37180: LIST
37181: LIST
37182: PUSH
37183: LD_INT 1
37185: NEG
37186: PUSH
37187: LD_INT 1
37189: NEG
37190: PUSH
37191: EMPTY
37192: LIST
37193: LIST
37194: PUSH
37195: LD_INT 1
37197: NEG
37198: PUSH
37199: LD_INT 2
37201: NEG
37202: PUSH
37203: EMPTY
37204: LIST
37205: LIST
37206: PUSH
37207: LD_INT 0
37209: PUSH
37210: LD_INT 2
37212: NEG
37213: PUSH
37214: EMPTY
37215: LIST
37216: LIST
37217: PUSH
37218: LD_INT 1
37220: PUSH
37221: LD_INT 1
37223: NEG
37224: PUSH
37225: EMPTY
37226: LIST
37227: LIST
37228: PUSH
37229: LD_INT 2
37231: PUSH
37232: LD_INT 0
37234: PUSH
37235: EMPTY
37236: LIST
37237: LIST
37238: PUSH
37239: LD_INT 2
37241: PUSH
37242: LD_INT 1
37244: PUSH
37245: EMPTY
37246: LIST
37247: LIST
37248: PUSH
37249: LD_INT 2
37251: PUSH
37252: LD_INT 2
37254: PUSH
37255: EMPTY
37256: LIST
37257: LIST
37258: PUSH
37259: LD_INT 1
37261: PUSH
37262: LD_INT 2
37264: PUSH
37265: EMPTY
37266: LIST
37267: LIST
37268: PUSH
37269: LD_INT 0
37271: PUSH
37272: LD_INT 2
37274: PUSH
37275: EMPTY
37276: LIST
37277: LIST
37278: PUSH
37279: LD_INT 1
37281: NEG
37282: PUSH
37283: LD_INT 1
37285: PUSH
37286: EMPTY
37287: LIST
37288: LIST
37289: PUSH
37290: LD_INT 2
37292: NEG
37293: PUSH
37294: LD_INT 0
37296: PUSH
37297: EMPTY
37298: LIST
37299: LIST
37300: PUSH
37301: LD_INT 2
37303: NEG
37304: PUSH
37305: LD_INT 1
37307: NEG
37308: PUSH
37309: EMPTY
37310: LIST
37311: LIST
37312: PUSH
37313: LD_INT 2
37315: NEG
37316: PUSH
37317: LD_INT 2
37319: NEG
37320: PUSH
37321: EMPTY
37322: LIST
37323: LIST
37324: PUSH
37325: EMPTY
37326: LIST
37327: LIST
37328: LIST
37329: LIST
37330: LIST
37331: LIST
37332: LIST
37333: LIST
37334: LIST
37335: LIST
37336: LIST
37337: LIST
37338: LIST
37339: LIST
37340: LIST
37341: LIST
37342: LIST
37343: LIST
37344: LIST
37345: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
37346: LD_ADDR_VAR 0 23
37350: PUSH
37351: LD_INT 0
37353: PUSH
37354: LD_INT 0
37356: PUSH
37357: EMPTY
37358: LIST
37359: LIST
37360: PUSH
37361: LD_INT 0
37363: PUSH
37364: LD_INT 1
37366: NEG
37367: PUSH
37368: EMPTY
37369: LIST
37370: LIST
37371: PUSH
37372: LD_INT 1
37374: PUSH
37375: LD_INT 0
37377: PUSH
37378: EMPTY
37379: LIST
37380: LIST
37381: PUSH
37382: LD_INT 1
37384: PUSH
37385: LD_INT 1
37387: PUSH
37388: EMPTY
37389: LIST
37390: LIST
37391: PUSH
37392: LD_INT 0
37394: PUSH
37395: LD_INT 1
37397: PUSH
37398: EMPTY
37399: LIST
37400: LIST
37401: PUSH
37402: LD_INT 1
37404: NEG
37405: PUSH
37406: LD_INT 0
37408: PUSH
37409: EMPTY
37410: LIST
37411: LIST
37412: PUSH
37413: LD_INT 1
37415: NEG
37416: PUSH
37417: LD_INT 1
37419: NEG
37420: PUSH
37421: EMPTY
37422: LIST
37423: LIST
37424: PUSH
37425: LD_INT 1
37427: NEG
37428: PUSH
37429: LD_INT 2
37431: NEG
37432: PUSH
37433: EMPTY
37434: LIST
37435: LIST
37436: PUSH
37437: LD_INT 0
37439: PUSH
37440: LD_INT 2
37442: NEG
37443: PUSH
37444: EMPTY
37445: LIST
37446: LIST
37447: PUSH
37448: LD_INT 1
37450: PUSH
37451: LD_INT 1
37453: NEG
37454: PUSH
37455: EMPTY
37456: LIST
37457: LIST
37458: PUSH
37459: LD_INT 2
37461: PUSH
37462: LD_INT 0
37464: PUSH
37465: EMPTY
37466: LIST
37467: LIST
37468: PUSH
37469: LD_INT 2
37471: PUSH
37472: LD_INT 1
37474: PUSH
37475: EMPTY
37476: LIST
37477: LIST
37478: PUSH
37479: LD_INT 2
37481: PUSH
37482: LD_INT 2
37484: PUSH
37485: EMPTY
37486: LIST
37487: LIST
37488: PUSH
37489: LD_INT 1
37491: PUSH
37492: LD_INT 2
37494: PUSH
37495: EMPTY
37496: LIST
37497: LIST
37498: PUSH
37499: LD_INT 0
37501: PUSH
37502: LD_INT 2
37504: PUSH
37505: EMPTY
37506: LIST
37507: LIST
37508: PUSH
37509: LD_INT 1
37511: NEG
37512: PUSH
37513: LD_INT 1
37515: PUSH
37516: EMPTY
37517: LIST
37518: LIST
37519: PUSH
37520: LD_INT 2
37522: NEG
37523: PUSH
37524: LD_INT 0
37526: PUSH
37527: EMPTY
37528: LIST
37529: LIST
37530: PUSH
37531: LD_INT 2
37533: NEG
37534: PUSH
37535: LD_INT 1
37537: NEG
37538: PUSH
37539: EMPTY
37540: LIST
37541: LIST
37542: PUSH
37543: LD_INT 2
37545: NEG
37546: PUSH
37547: LD_INT 2
37549: NEG
37550: PUSH
37551: EMPTY
37552: LIST
37553: LIST
37554: PUSH
37555: LD_INT 2
37557: NEG
37558: PUSH
37559: LD_INT 3
37561: NEG
37562: PUSH
37563: EMPTY
37564: LIST
37565: LIST
37566: PUSH
37567: LD_INT 1
37569: NEG
37570: PUSH
37571: LD_INT 3
37573: NEG
37574: PUSH
37575: EMPTY
37576: LIST
37577: LIST
37578: PUSH
37579: LD_INT 1
37581: PUSH
37582: LD_INT 2
37584: NEG
37585: PUSH
37586: EMPTY
37587: LIST
37588: LIST
37589: PUSH
37590: LD_INT 2
37592: PUSH
37593: LD_INT 1
37595: NEG
37596: PUSH
37597: EMPTY
37598: LIST
37599: LIST
37600: PUSH
37601: EMPTY
37602: LIST
37603: LIST
37604: LIST
37605: LIST
37606: LIST
37607: LIST
37608: LIST
37609: LIST
37610: LIST
37611: LIST
37612: LIST
37613: LIST
37614: LIST
37615: LIST
37616: LIST
37617: LIST
37618: LIST
37619: LIST
37620: LIST
37621: LIST
37622: LIST
37623: LIST
37624: LIST
37625: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
37626: LD_ADDR_VAR 0 24
37630: PUSH
37631: LD_INT 0
37633: PUSH
37634: LD_INT 0
37636: PUSH
37637: EMPTY
37638: LIST
37639: LIST
37640: PUSH
37641: LD_INT 0
37643: PUSH
37644: LD_INT 1
37646: NEG
37647: PUSH
37648: EMPTY
37649: LIST
37650: LIST
37651: PUSH
37652: LD_INT 1
37654: PUSH
37655: LD_INT 0
37657: PUSH
37658: EMPTY
37659: LIST
37660: LIST
37661: PUSH
37662: LD_INT 1
37664: PUSH
37665: LD_INT 1
37667: PUSH
37668: EMPTY
37669: LIST
37670: LIST
37671: PUSH
37672: LD_INT 0
37674: PUSH
37675: LD_INT 1
37677: PUSH
37678: EMPTY
37679: LIST
37680: LIST
37681: PUSH
37682: LD_INT 1
37684: NEG
37685: PUSH
37686: LD_INT 0
37688: PUSH
37689: EMPTY
37690: LIST
37691: LIST
37692: PUSH
37693: LD_INT 1
37695: NEG
37696: PUSH
37697: LD_INT 1
37699: NEG
37700: PUSH
37701: EMPTY
37702: LIST
37703: LIST
37704: PUSH
37705: LD_INT 1
37707: NEG
37708: PUSH
37709: LD_INT 2
37711: NEG
37712: PUSH
37713: EMPTY
37714: LIST
37715: LIST
37716: PUSH
37717: LD_INT 0
37719: PUSH
37720: LD_INT 2
37722: NEG
37723: PUSH
37724: EMPTY
37725: LIST
37726: LIST
37727: PUSH
37728: LD_INT 1
37730: PUSH
37731: LD_INT 1
37733: NEG
37734: PUSH
37735: EMPTY
37736: LIST
37737: LIST
37738: PUSH
37739: LD_INT 2
37741: PUSH
37742: LD_INT 0
37744: PUSH
37745: EMPTY
37746: LIST
37747: LIST
37748: PUSH
37749: LD_INT 2
37751: PUSH
37752: LD_INT 1
37754: PUSH
37755: EMPTY
37756: LIST
37757: LIST
37758: PUSH
37759: LD_INT 2
37761: PUSH
37762: LD_INT 2
37764: PUSH
37765: EMPTY
37766: LIST
37767: LIST
37768: PUSH
37769: LD_INT 1
37771: PUSH
37772: LD_INT 2
37774: PUSH
37775: EMPTY
37776: LIST
37777: LIST
37778: PUSH
37779: LD_INT 0
37781: PUSH
37782: LD_INT 2
37784: PUSH
37785: EMPTY
37786: LIST
37787: LIST
37788: PUSH
37789: LD_INT 1
37791: NEG
37792: PUSH
37793: LD_INT 1
37795: PUSH
37796: EMPTY
37797: LIST
37798: LIST
37799: PUSH
37800: LD_INT 2
37802: NEG
37803: PUSH
37804: LD_INT 0
37806: PUSH
37807: EMPTY
37808: LIST
37809: LIST
37810: PUSH
37811: LD_INT 2
37813: NEG
37814: PUSH
37815: LD_INT 1
37817: NEG
37818: PUSH
37819: EMPTY
37820: LIST
37821: LIST
37822: PUSH
37823: LD_INT 2
37825: NEG
37826: PUSH
37827: LD_INT 2
37829: NEG
37830: PUSH
37831: EMPTY
37832: LIST
37833: LIST
37834: PUSH
37835: LD_INT 1
37837: PUSH
37838: LD_INT 2
37840: NEG
37841: PUSH
37842: EMPTY
37843: LIST
37844: LIST
37845: PUSH
37846: LD_INT 2
37848: PUSH
37849: LD_INT 1
37851: NEG
37852: PUSH
37853: EMPTY
37854: LIST
37855: LIST
37856: PUSH
37857: LD_INT 3
37859: PUSH
37860: LD_INT 1
37862: PUSH
37863: EMPTY
37864: LIST
37865: LIST
37866: PUSH
37867: LD_INT 3
37869: PUSH
37870: LD_INT 2
37872: PUSH
37873: EMPTY
37874: LIST
37875: LIST
37876: PUSH
37877: EMPTY
37878: LIST
37879: LIST
37880: LIST
37881: LIST
37882: LIST
37883: LIST
37884: LIST
37885: LIST
37886: LIST
37887: LIST
37888: LIST
37889: LIST
37890: LIST
37891: LIST
37892: LIST
37893: LIST
37894: LIST
37895: LIST
37896: LIST
37897: LIST
37898: LIST
37899: LIST
37900: LIST
37901: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
37902: LD_ADDR_VAR 0 25
37906: PUSH
37907: LD_INT 0
37909: PUSH
37910: LD_INT 0
37912: PUSH
37913: EMPTY
37914: LIST
37915: LIST
37916: PUSH
37917: LD_INT 0
37919: PUSH
37920: LD_INT 1
37922: NEG
37923: PUSH
37924: EMPTY
37925: LIST
37926: LIST
37927: PUSH
37928: LD_INT 1
37930: PUSH
37931: LD_INT 0
37933: PUSH
37934: EMPTY
37935: LIST
37936: LIST
37937: PUSH
37938: LD_INT 1
37940: PUSH
37941: LD_INT 1
37943: PUSH
37944: EMPTY
37945: LIST
37946: LIST
37947: PUSH
37948: LD_INT 0
37950: PUSH
37951: LD_INT 1
37953: PUSH
37954: EMPTY
37955: LIST
37956: LIST
37957: PUSH
37958: LD_INT 1
37960: NEG
37961: PUSH
37962: LD_INT 0
37964: PUSH
37965: EMPTY
37966: LIST
37967: LIST
37968: PUSH
37969: LD_INT 1
37971: NEG
37972: PUSH
37973: LD_INT 1
37975: NEG
37976: PUSH
37977: EMPTY
37978: LIST
37979: LIST
37980: PUSH
37981: LD_INT 1
37983: NEG
37984: PUSH
37985: LD_INT 2
37987: NEG
37988: PUSH
37989: EMPTY
37990: LIST
37991: LIST
37992: PUSH
37993: LD_INT 0
37995: PUSH
37996: LD_INT 2
37998: NEG
37999: PUSH
38000: EMPTY
38001: LIST
38002: LIST
38003: PUSH
38004: LD_INT 1
38006: PUSH
38007: LD_INT 1
38009: NEG
38010: PUSH
38011: EMPTY
38012: LIST
38013: LIST
38014: PUSH
38015: LD_INT 2
38017: PUSH
38018: LD_INT 0
38020: PUSH
38021: EMPTY
38022: LIST
38023: LIST
38024: PUSH
38025: LD_INT 2
38027: PUSH
38028: LD_INT 1
38030: PUSH
38031: EMPTY
38032: LIST
38033: LIST
38034: PUSH
38035: LD_INT 2
38037: PUSH
38038: LD_INT 2
38040: PUSH
38041: EMPTY
38042: LIST
38043: LIST
38044: PUSH
38045: LD_INT 1
38047: PUSH
38048: LD_INT 2
38050: PUSH
38051: EMPTY
38052: LIST
38053: LIST
38054: PUSH
38055: LD_INT 0
38057: PUSH
38058: LD_INT 2
38060: PUSH
38061: EMPTY
38062: LIST
38063: LIST
38064: PUSH
38065: LD_INT 1
38067: NEG
38068: PUSH
38069: LD_INT 1
38071: PUSH
38072: EMPTY
38073: LIST
38074: LIST
38075: PUSH
38076: LD_INT 2
38078: NEG
38079: PUSH
38080: LD_INT 0
38082: PUSH
38083: EMPTY
38084: LIST
38085: LIST
38086: PUSH
38087: LD_INT 2
38089: NEG
38090: PUSH
38091: LD_INT 1
38093: NEG
38094: PUSH
38095: EMPTY
38096: LIST
38097: LIST
38098: PUSH
38099: LD_INT 2
38101: NEG
38102: PUSH
38103: LD_INT 2
38105: NEG
38106: PUSH
38107: EMPTY
38108: LIST
38109: LIST
38110: PUSH
38111: LD_INT 3
38113: PUSH
38114: LD_INT 1
38116: PUSH
38117: EMPTY
38118: LIST
38119: LIST
38120: PUSH
38121: LD_INT 3
38123: PUSH
38124: LD_INT 2
38126: PUSH
38127: EMPTY
38128: LIST
38129: LIST
38130: PUSH
38131: LD_INT 2
38133: PUSH
38134: LD_INT 3
38136: PUSH
38137: EMPTY
38138: LIST
38139: LIST
38140: PUSH
38141: LD_INT 1
38143: PUSH
38144: LD_INT 3
38146: PUSH
38147: EMPTY
38148: LIST
38149: LIST
38150: PUSH
38151: EMPTY
38152: LIST
38153: LIST
38154: LIST
38155: LIST
38156: LIST
38157: LIST
38158: LIST
38159: LIST
38160: LIST
38161: LIST
38162: LIST
38163: LIST
38164: LIST
38165: LIST
38166: LIST
38167: LIST
38168: LIST
38169: LIST
38170: LIST
38171: LIST
38172: LIST
38173: LIST
38174: LIST
38175: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
38176: LD_ADDR_VAR 0 26
38180: PUSH
38181: LD_INT 0
38183: PUSH
38184: LD_INT 0
38186: PUSH
38187: EMPTY
38188: LIST
38189: LIST
38190: PUSH
38191: LD_INT 0
38193: PUSH
38194: LD_INT 1
38196: NEG
38197: PUSH
38198: EMPTY
38199: LIST
38200: LIST
38201: PUSH
38202: LD_INT 1
38204: PUSH
38205: LD_INT 0
38207: PUSH
38208: EMPTY
38209: LIST
38210: LIST
38211: PUSH
38212: LD_INT 1
38214: PUSH
38215: LD_INT 1
38217: PUSH
38218: EMPTY
38219: LIST
38220: LIST
38221: PUSH
38222: LD_INT 0
38224: PUSH
38225: LD_INT 1
38227: PUSH
38228: EMPTY
38229: LIST
38230: LIST
38231: PUSH
38232: LD_INT 1
38234: NEG
38235: PUSH
38236: LD_INT 0
38238: PUSH
38239: EMPTY
38240: LIST
38241: LIST
38242: PUSH
38243: LD_INT 1
38245: NEG
38246: PUSH
38247: LD_INT 1
38249: NEG
38250: PUSH
38251: EMPTY
38252: LIST
38253: LIST
38254: PUSH
38255: LD_INT 1
38257: NEG
38258: PUSH
38259: LD_INT 2
38261: NEG
38262: PUSH
38263: EMPTY
38264: LIST
38265: LIST
38266: PUSH
38267: LD_INT 0
38269: PUSH
38270: LD_INT 2
38272: NEG
38273: PUSH
38274: EMPTY
38275: LIST
38276: LIST
38277: PUSH
38278: LD_INT 1
38280: PUSH
38281: LD_INT 1
38283: NEG
38284: PUSH
38285: EMPTY
38286: LIST
38287: LIST
38288: PUSH
38289: LD_INT 2
38291: PUSH
38292: LD_INT 0
38294: PUSH
38295: EMPTY
38296: LIST
38297: LIST
38298: PUSH
38299: LD_INT 2
38301: PUSH
38302: LD_INT 1
38304: PUSH
38305: EMPTY
38306: LIST
38307: LIST
38308: PUSH
38309: LD_INT 2
38311: PUSH
38312: LD_INT 2
38314: PUSH
38315: EMPTY
38316: LIST
38317: LIST
38318: PUSH
38319: LD_INT 1
38321: PUSH
38322: LD_INT 2
38324: PUSH
38325: EMPTY
38326: LIST
38327: LIST
38328: PUSH
38329: LD_INT 0
38331: PUSH
38332: LD_INT 2
38334: PUSH
38335: EMPTY
38336: LIST
38337: LIST
38338: PUSH
38339: LD_INT 1
38341: NEG
38342: PUSH
38343: LD_INT 1
38345: PUSH
38346: EMPTY
38347: LIST
38348: LIST
38349: PUSH
38350: LD_INT 2
38352: NEG
38353: PUSH
38354: LD_INT 0
38356: PUSH
38357: EMPTY
38358: LIST
38359: LIST
38360: PUSH
38361: LD_INT 2
38363: NEG
38364: PUSH
38365: LD_INT 1
38367: NEG
38368: PUSH
38369: EMPTY
38370: LIST
38371: LIST
38372: PUSH
38373: LD_INT 2
38375: NEG
38376: PUSH
38377: LD_INT 2
38379: NEG
38380: PUSH
38381: EMPTY
38382: LIST
38383: LIST
38384: PUSH
38385: LD_INT 2
38387: PUSH
38388: LD_INT 3
38390: PUSH
38391: EMPTY
38392: LIST
38393: LIST
38394: PUSH
38395: LD_INT 1
38397: PUSH
38398: LD_INT 3
38400: PUSH
38401: EMPTY
38402: LIST
38403: LIST
38404: PUSH
38405: LD_INT 1
38407: NEG
38408: PUSH
38409: LD_INT 2
38411: PUSH
38412: EMPTY
38413: LIST
38414: LIST
38415: PUSH
38416: LD_INT 2
38418: NEG
38419: PUSH
38420: LD_INT 1
38422: PUSH
38423: EMPTY
38424: LIST
38425: LIST
38426: PUSH
38427: EMPTY
38428: LIST
38429: LIST
38430: LIST
38431: LIST
38432: LIST
38433: LIST
38434: LIST
38435: LIST
38436: LIST
38437: LIST
38438: LIST
38439: LIST
38440: LIST
38441: LIST
38442: LIST
38443: LIST
38444: LIST
38445: LIST
38446: LIST
38447: LIST
38448: LIST
38449: LIST
38450: LIST
38451: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38452: LD_ADDR_VAR 0 27
38456: PUSH
38457: LD_INT 0
38459: PUSH
38460: LD_INT 0
38462: PUSH
38463: EMPTY
38464: LIST
38465: LIST
38466: PUSH
38467: LD_INT 0
38469: PUSH
38470: LD_INT 1
38472: NEG
38473: PUSH
38474: EMPTY
38475: LIST
38476: LIST
38477: PUSH
38478: LD_INT 1
38480: PUSH
38481: LD_INT 0
38483: PUSH
38484: EMPTY
38485: LIST
38486: LIST
38487: PUSH
38488: LD_INT 1
38490: PUSH
38491: LD_INT 1
38493: PUSH
38494: EMPTY
38495: LIST
38496: LIST
38497: PUSH
38498: LD_INT 0
38500: PUSH
38501: LD_INT 1
38503: PUSH
38504: EMPTY
38505: LIST
38506: LIST
38507: PUSH
38508: LD_INT 1
38510: NEG
38511: PUSH
38512: LD_INT 0
38514: PUSH
38515: EMPTY
38516: LIST
38517: LIST
38518: PUSH
38519: LD_INT 1
38521: NEG
38522: PUSH
38523: LD_INT 1
38525: NEG
38526: PUSH
38527: EMPTY
38528: LIST
38529: LIST
38530: PUSH
38531: LD_INT 1
38533: NEG
38534: PUSH
38535: LD_INT 2
38537: NEG
38538: PUSH
38539: EMPTY
38540: LIST
38541: LIST
38542: PUSH
38543: LD_INT 0
38545: PUSH
38546: LD_INT 2
38548: NEG
38549: PUSH
38550: EMPTY
38551: LIST
38552: LIST
38553: PUSH
38554: LD_INT 1
38556: PUSH
38557: LD_INT 1
38559: NEG
38560: PUSH
38561: EMPTY
38562: LIST
38563: LIST
38564: PUSH
38565: LD_INT 2
38567: PUSH
38568: LD_INT 0
38570: PUSH
38571: EMPTY
38572: LIST
38573: LIST
38574: PUSH
38575: LD_INT 2
38577: PUSH
38578: LD_INT 1
38580: PUSH
38581: EMPTY
38582: LIST
38583: LIST
38584: PUSH
38585: LD_INT 2
38587: PUSH
38588: LD_INT 2
38590: PUSH
38591: EMPTY
38592: LIST
38593: LIST
38594: PUSH
38595: LD_INT 1
38597: PUSH
38598: LD_INT 2
38600: PUSH
38601: EMPTY
38602: LIST
38603: LIST
38604: PUSH
38605: LD_INT 0
38607: PUSH
38608: LD_INT 2
38610: PUSH
38611: EMPTY
38612: LIST
38613: LIST
38614: PUSH
38615: LD_INT 1
38617: NEG
38618: PUSH
38619: LD_INT 1
38621: PUSH
38622: EMPTY
38623: LIST
38624: LIST
38625: PUSH
38626: LD_INT 2
38628: NEG
38629: PUSH
38630: LD_INT 0
38632: PUSH
38633: EMPTY
38634: LIST
38635: LIST
38636: PUSH
38637: LD_INT 2
38639: NEG
38640: PUSH
38641: LD_INT 1
38643: NEG
38644: PUSH
38645: EMPTY
38646: LIST
38647: LIST
38648: PUSH
38649: LD_INT 2
38651: NEG
38652: PUSH
38653: LD_INT 2
38655: NEG
38656: PUSH
38657: EMPTY
38658: LIST
38659: LIST
38660: PUSH
38661: LD_INT 1
38663: NEG
38664: PUSH
38665: LD_INT 2
38667: PUSH
38668: EMPTY
38669: LIST
38670: LIST
38671: PUSH
38672: LD_INT 2
38674: NEG
38675: PUSH
38676: LD_INT 1
38678: PUSH
38679: EMPTY
38680: LIST
38681: LIST
38682: PUSH
38683: LD_INT 3
38685: NEG
38686: PUSH
38687: LD_INT 1
38689: NEG
38690: PUSH
38691: EMPTY
38692: LIST
38693: LIST
38694: PUSH
38695: LD_INT 3
38697: NEG
38698: PUSH
38699: LD_INT 2
38701: NEG
38702: PUSH
38703: EMPTY
38704: LIST
38705: LIST
38706: PUSH
38707: EMPTY
38708: LIST
38709: LIST
38710: LIST
38711: LIST
38712: LIST
38713: LIST
38714: LIST
38715: LIST
38716: LIST
38717: LIST
38718: LIST
38719: LIST
38720: LIST
38721: LIST
38722: LIST
38723: LIST
38724: LIST
38725: LIST
38726: LIST
38727: LIST
38728: LIST
38729: LIST
38730: LIST
38731: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38732: LD_ADDR_VAR 0 28
38736: PUSH
38737: LD_INT 0
38739: PUSH
38740: LD_INT 0
38742: PUSH
38743: EMPTY
38744: LIST
38745: LIST
38746: PUSH
38747: LD_INT 0
38749: PUSH
38750: LD_INT 1
38752: NEG
38753: PUSH
38754: EMPTY
38755: LIST
38756: LIST
38757: PUSH
38758: LD_INT 1
38760: PUSH
38761: LD_INT 0
38763: PUSH
38764: EMPTY
38765: LIST
38766: LIST
38767: PUSH
38768: LD_INT 1
38770: PUSH
38771: LD_INT 1
38773: PUSH
38774: EMPTY
38775: LIST
38776: LIST
38777: PUSH
38778: LD_INT 0
38780: PUSH
38781: LD_INT 1
38783: PUSH
38784: EMPTY
38785: LIST
38786: LIST
38787: PUSH
38788: LD_INT 1
38790: NEG
38791: PUSH
38792: LD_INT 0
38794: PUSH
38795: EMPTY
38796: LIST
38797: LIST
38798: PUSH
38799: LD_INT 1
38801: NEG
38802: PUSH
38803: LD_INT 1
38805: NEG
38806: PUSH
38807: EMPTY
38808: LIST
38809: LIST
38810: PUSH
38811: LD_INT 1
38813: NEG
38814: PUSH
38815: LD_INT 2
38817: NEG
38818: PUSH
38819: EMPTY
38820: LIST
38821: LIST
38822: PUSH
38823: LD_INT 0
38825: PUSH
38826: LD_INT 2
38828: NEG
38829: PUSH
38830: EMPTY
38831: LIST
38832: LIST
38833: PUSH
38834: LD_INT 1
38836: PUSH
38837: LD_INT 1
38839: NEG
38840: PUSH
38841: EMPTY
38842: LIST
38843: LIST
38844: PUSH
38845: LD_INT 2
38847: PUSH
38848: LD_INT 0
38850: PUSH
38851: EMPTY
38852: LIST
38853: LIST
38854: PUSH
38855: LD_INT 2
38857: PUSH
38858: LD_INT 1
38860: PUSH
38861: EMPTY
38862: LIST
38863: LIST
38864: PUSH
38865: LD_INT 2
38867: PUSH
38868: LD_INT 2
38870: PUSH
38871: EMPTY
38872: LIST
38873: LIST
38874: PUSH
38875: LD_INT 1
38877: PUSH
38878: LD_INT 2
38880: PUSH
38881: EMPTY
38882: LIST
38883: LIST
38884: PUSH
38885: LD_INT 0
38887: PUSH
38888: LD_INT 2
38890: PUSH
38891: EMPTY
38892: LIST
38893: LIST
38894: PUSH
38895: LD_INT 1
38897: NEG
38898: PUSH
38899: LD_INT 1
38901: PUSH
38902: EMPTY
38903: LIST
38904: LIST
38905: PUSH
38906: LD_INT 2
38908: NEG
38909: PUSH
38910: LD_INT 0
38912: PUSH
38913: EMPTY
38914: LIST
38915: LIST
38916: PUSH
38917: LD_INT 2
38919: NEG
38920: PUSH
38921: LD_INT 1
38923: NEG
38924: PUSH
38925: EMPTY
38926: LIST
38927: LIST
38928: PUSH
38929: LD_INT 2
38931: NEG
38932: PUSH
38933: LD_INT 2
38935: NEG
38936: PUSH
38937: EMPTY
38938: LIST
38939: LIST
38940: PUSH
38941: LD_INT 2
38943: NEG
38944: PUSH
38945: LD_INT 3
38947: NEG
38948: PUSH
38949: EMPTY
38950: LIST
38951: LIST
38952: PUSH
38953: LD_INT 1
38955: NEG
38956: PUSH
38957: LD_INT 3
38959: NEG
38960: PUSH
38961: EMPTY
38962: LIST
38963: LIST
38964: PUSH
38965: LD_INT 3
38967: NEG
38968: PUSH
38969: LD_INT 1
38971: NEG
38972: PUSH
38973: EMPTY
38974: LIST
38975: LIST
38976: PUSH
38977: LD_INT 3
38979: NEG
38980: PUSH
38981: LD_INT 2
38983: NEG
38984: PUSH
38985: EMPTY
38986: LIST
38987: LIST
38988: PUSH
38989: EMPTY
38990: LIST
38991: LIST
38992: LIST
38993: LIST
38994: LIST
38995: LIST
38996: LIST
38997: LIST
38998: LIST
38999: LIST
39000: LIST
39001: LIST
39002: LIST
39003: LIST
39004: LIST
39005: LIST
39006: LIST
39007: LIST
39008: LIST
39009: LIST
39010: LIST
39011: LIST
39012: LIST
39013: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39014: LD_ADDR_VAR 0 29
39018: PUSH
39019: LD_INT 0
39021: PUSH
39022: LD_INT 0
39024: PUSH
39025: EMPTY
39026: LIST
39027: LIST
39028: PUSH
39029: LD_INT 0
39031: PUSH
39032: LD_INT 1
39034: NEG
39035: PUSH
39036: EMPTY
39037: LIST
39038: LIST
39039: PUSH
39040: LD_INT 1
39042: PUSH
39043: LD_INT 0
39045: PUSH
39046: EMPTY
39047: LIST
39048: LIST
39049: PUSH
39050: LD_INT 1
39052: PUSH
39053: LD_INT 1
39055: PUSH
39056: EMPTY
39057: LIST
39058: LIST
39059: PUSH
39060: LD_INT 0
39062: PUSH
39063: LD_INT 1
39065: PUSH
39066: EMPTY
39067: LIST
39068: LIST
39069: PUSH
39070: LD_INT 1
39072: NEG
39073: PUSH
39074: LD_INT 0
39076: PUSH
39077: EMPTY
39078: LIST
39079: LIST
39080: PUSH
39081: LD_INT 1
39083: NEG
39084: PUSH
39085: LD_INT 1
39087: NEG
39088: PUSH
39089: EMPTY
39090: LIST
39091: LIST
39092: PUSH
39093: LD_INT 1
39095: NEG
39096: PUSH
39097: LD_INT 2
39099: NEG
39100: PUSH
39101: EMPTY
39102: LIST
39103: LIST
39104: PUSH
39105: LD_INT 0
39107: PUSH
39108: LD_INT 2
39110: NEG
39111: PUSH
39112: EMPTY
39113: LIST
39114: LIST
39115: PUSH
39116: LD_INT 1
39118: PUSH
39119: LD_INT 1
39121: NEG
39122: PUSH
39123: EMPTY
39124: LIST
39125: LIST
39126: PUSH
39127: LD_INT 2
39129: PUSH
39130: LD_INT 0
39132: PUSH
39133: EMPTY
39134: LIST
39135: LIST
39136: PUSH
39137: LD_INT 2
39139: PUSH
39140: LD_INT 1
39142: PUSH
39143: EMPTY
39144: LIST
39145: LIST
39146: PUSH
39147: LD_INT 1
39149: PUSH
39150: LD_INT 2
39152: PUSH
39153: EMPTY
39154: LIST
39155: LIST
39156: PUSH
39157: LD_INT 0
39159: PUSH
39160: LD_INT 2
39162: PUSH
39163: EMPTY
39164: LIST
39165: LIST
39166: PUSH
39167: LD_INT 1
39169: NEG
39170: PUSH
39171: LD_INT 1
39173: PUSH
39174: EMPTY
39175: LIST
39176: LIST
39177: PUSH
39178: LD_INT 2
39180: NEG
39181: PUSH
39182: LD_INT 1
39184: NEG
39185: PUSH
39186: EMPTY
39187: LIST
39188: LIST
39189: PUSH
39190: LD_INT 2
39192: NEG
39193: PUSH
39194: LD_INT 2
39196: NEG
39197: PUSH
39198: EMPTY
39199: LIST
39200: LIST
39201: PUSH
39202: LD_INT 2
39204: NEG
39205: PUSH
39206: LD_INT 3
39208: NEG
39209: PUSH
39210: EMPTY
39211: LIST
39212: LIST
39213: PUSH
39214: LD_INT 2
39216: PUSH
39217: LD_INT 1
39219: NEG
39220: PUSH
39221: EMPTY
39222: LIST
39223: LIST
39224: PUSH
39225: LD_INT 3
39227: PUSH
39228: LD_INT 1
39230: PUSH
39231: EMPTY
39232: LIST
39233: LIST
39234: PUSH
39235: LD_INT 1
39237: PUSH
39238: LD_INT 3
39240: PUSH
39241: EMPTY
39242: LIST
39243: LIST
39244: PUSH
39245: LD_INT 1
39247: NEG
39248: PUSH
39249: LD_INT 2
39251: PUSH
39252: EMPTY
39253: LIST
39254: LIST
39255: PUSH
39256: LD_INT 3
39258: NEG
39259: PUSH
39260: LD_INT 2
39262: NEG
39263: PUSH
39264: EMPTY
39265: LIST
39266: LIST
39267: PUSH
39268: EMPTY
39269: LIST
39270: LIST
39271: LIST
39272: LIST
39273: LIST
39274: LIST
39275: LIST
39276: LIST
39277: LIST
39278: LIST
39279: LIST
39280: LIST
39281: LIST
39282: LIST
39283: LIST
39284: LIST
39285: LIST
39286: LIST
39287: LIST
39288: LIST
39289: LIST
39290: LIST
39291: LIST
39292: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39293: LD_ADDR_VAR 0 30
39297: PUSH
39298: LD_INT 0
39300: PUSH
39301: LD_INT 0
39303: PUSH
39304: EMPTY
39305: LIST
39306: LIST
39307: PUSH
39308: LD_INT 0
39310: PUSH
39311: LD_INT 1
39313: NEG
39314: PUSH
39315: EMPTY
39316: LIST
39317: LIST
39318: PUSH
39319: LD_INT 1
39321: PUSH
39322: LD_INT 0
39324: PUSH
39325: EMPTY
39326: LIST
39327: LIST
39328: PUSH
39329: LD_INT 1
39331: PUSH
39332: LD_INT 1
39334: PUSH
39335: EMPTY
39336: LIST
39337: LIST
39338: PUSH
39339: LD_INT 0
39341: PUSH
39342: LD_INT 1
39344: PUSH
39345: EMPTY
39346: LIST
39347: LIST
39348: PUSH
39349: LD_INT 1
39351: NEG
39352: PUSH
39353: LD_INT 0
39355: PUSH
39356: EMPTY
39357: LIST
39358: LIST
39359: PUSH
39360: LD_INT 1
39362: NEG
39363: PUSH
39364: LD_INT 1
39366: NEG
39367: PUSH
39368: EMPTY
39369: LIST
39370: LIST
39371: PUSH
39372: LD_INT 1
39374: NEG
39375: PUSH
39376: LD_INT 2
39378: NEG
39379: PUSH
39380: EMPTY
39381: LIST
39382: LIST
39383: PUSH
39384: LD_INT 0
39386: PUSH
39387: LD_INT 2
39389: NEG
39390: PUSH
39391: EMPTY
39392: LIST
39393: LIST
39394: PUSH
39395: LD_INT 1
39397: PUSH
39398: LD_INT 1
39400: NEG
39401: PUSH
39402: EMPTY
39403: LIST
39404: LIST
39405: PUSH
39406: LD_INT 2
39408: PUSH
39409: LD_INT 0
39411: PUSH
39412: EMPTY
39413: LIST
39414: LIST
39415: PUSH
39416: LD_INT 2
39418: PUSH
39419: LD_INT 1
39421: PUSH
39422: EMPTY
39423: LIST
39424: LIST
39425: PUSH
39426: LD_INT 2
39428: PUSH
39429: LD_INT 2
39431: PUSH
39432: EMPTY
39433: LIST
39434: LIST
39435: PUSH
39436: LD_INT 1
39438: PUSH
39439: LD_INT 2
39441: PUSH
39442: EMPTY
39443: LIST
39444: LIST
39445: PUSH
39446: LD_INT 1
39448: NEG
39449: PUSH
39450: LD_INT 1
39452: PUSH
39453: EMPTY
39454: LIST
39455: LIST
39456: PUSH
39457: LD_INT 2
39459: NEG
39460: PUSH
39461: LD_INT 0
39463: PUSH
39464: EMPTY
39465: LIST
39466: LIST
39467: PUSH
39468: LD_INT 2
39470: NEG
39471: PUSH
39472: LD_INT 1
39474: NEG
39475: PUSH
39476: EMPTY
39477: LIST
39478: LIST
39479: PUSH
39480: LD_INT 1
39482: NEG
39483: PUSH
39484: LD_INT 3
39486: NEG
39487: PUSH
39488: EMPTY
39489: LIST
39490: LIST
39491: PUSH
39492: LD_INT 1
39494: PUSH
39495: LD_INT 2
39497: NEG
39498: PUSH
39499: EMPTY
39500: LIST
39501: LIST
39502: PUSH
39503: LD_INT 3
39505: PUSH
39506: LD_INT 2
39508: PUSH
39509: EMPTY
39510: LIST
39511: LIST
39512: PUSH
39513: LD_INT 2
39515: PUSH
39516: LD_INT 3
39518: PUSH
39519: EMPTY
39520: LIST
39521: LIST
39522: PUSH
39523: LD_INT 2
39525: NEG
39526: PUSH
39527: LD_INT 1
39529: PUSH
39530: EMPTY
39531: LIST
39532: LIST
39533: PUSH
39534: LD_INT 3
39536: NEG
39537: PUSH
39538: LD_INT 1
39540: NEG
39541: PUSH
39542: EMPTY
39543: LIST
39544: LIST
39545: PUSH
39546: EMPTY
39547: LIST
39548: LIST
39549: LIST
39550: LIST
39551: LIST
39552: LIST
39553: LIST
39554: LIST
39555: LIST
39556: LIST
39557: LIST
39558: LIST
39559: LIST
39560: LIST
39561: LIST
39562: LIST
39563: LIST
39564: LIST
39565: LIST
39566: LIST
39567: LIST
39568: LIST
39569: LIST
39570: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39571: LD_ADDR_VAR 0 31
39575: PUSH
39576: LD_INT 0
39578: PUSH
39579: LD_INT 0
39581: PUSH
39582: EMPTY
39583: LIST
39584: LIST
39585: PUSH
39586: LD_INT 0
39588: PUSH
39589: LD_INT 1
39591: NEG
39592: PUSH
39593: EMPTY
39594: LIST
39595: LIST
39596: PUSH
39597: LD_INT 1
39599: PUSH
39600: LD_INT 0
39602: PUSH
39603: EMPTY
39604: LIST
39605: LIST
39606: PUSH
39607: LD_INT 1
39609: PUSH
39610: LD_INT 1
39612: PUSH
39613: EMPTY
39614: LIST
39615: LIST
39616: PUSH
39617: LD_INT 0
39619: PUSH
39620: LD_INT 1
39622: PUSH
39623: EMPTY
39624: LIST
39625: LIST
39626: PUSH
39627: LD_INT 1
39629: NEG
39630: PUSH
39631: LD_INT 0
39633: PUSH
39634: EMPTY
39635: LIST
39636: LIST
39637: PUSH
39638: LD_INT 1
39640: NEG
39641: PUSH
39642: LD_INT 1
39644: NEG
39645: PUSH
39646: EMPTY
39647: LIST
39648: LIST
39649: PUSH
39650: LD_INT 1
39652: NEG
39653: PUSH
39654: LD_INT 2
39656: NEG
39657: PUSH
39658: EMPTY
39659: LIST
39660: LIST
39661: PUSH
39662: LD_INT 1
39664: PUSH
39665: LD_INT 1
39667: NEG
39668: PUSH
39669: EMPTY
39670: LIST
39671: LIST
39672: PUSH
39673: LD_INT 2
39675: PUSH
39676: LD_INT 0
39678: PUSH
39679: EMPTY
39680: LIST
39681: LIST
39682: PUSH
39683: LD_INT 2
39685: PUSH
39686: LD_INT 1
39688: PUSH
39689: EMPTY
39690: LIST
39691: LIST
39692: PUSH
39693: LD_INT 2
39695: PUSH
39696: LD_INT 2
39698: PUSH
39699: EMPTY
39700: LIST
39701: LIST
39702: PUSH
39703: LD_INT 1
39705: PUSH
39706: LD_INT 2
39708: PUSH
39709: EMPTY
39710: LIST
39711: LIST
39712: PUSH
39713: LD_INT 0
39715: PUSH
39716: LD_INT 2
39718: PUSH
39719: EMPTY
39720: LIST
39721: LIST
39722: PUSH
39723: LD_INT 1
39725: NEG
39726: PUSH
39727: LD_INT 1
39729: PUSH
39730: EMPTY
39731: LIST
39732: LIST
39733: PUSH
39734: LD_INT 2
39736: NEG
39737: PUSH
39738: LD_INT 1
39740: NEG
39741: PUSH
39742: EMPTY
39743: LIST
39744: LIST
39745: PUSH
39746: LD_INT 2
39748: NEG
39749: PUSH
39750: LD_INT 2
39752: NEG
39753: PUSH
39754: EMPTY
39755: LIST
39756: LIST
39757: PUSH
39758: LD_INT 2
39760: NEG
39761: PUSH
39762: LD_INT 3
39764: NEG
39765: PUSH
39766: EMPTY
39767: LIST
39768: LIST
39769: PUSH
39770: LD_INT 2
39772: PUSH
39773: LD_INT 1
39775: NEG
39776: PUSH
39777: EMPTY
39778: LIST
39779: LIST
39780: PUSH
39781: LD_INT 3
39783: PUSH
39784: LD_INT 1
39786: PUSH
39787: EMPTY
39788: LIST
39789: LIST
39790: PUSH
39791: LD_INT 1
39793: PUSH
39794: LD_INT 3
39796: PUSH
39797: EMPTY
39798: LIST
39799: LIST
39800: PUSH
39801: LD_INT 1
39803: NEG
39804: PUSH
39805: LD_INT 2
39807: PUSH
39808: EMPTY
39809: LIST
39810: LIST
39811: PUSH
39812: LD_INT 3
39814: NEG
39815: PUSH
39816: LD_INT 2
39818: NEG
39819: PUSH
39820: EMPTY
39821: LIST
39822: LIST
39823: PUSH
39824: EMPTY
39825: LIST
39826: LIST
39827: LIST
39828: LIST
39829: LIST
39830: LIST
39831: LIST
39832: LIST
39833: LIST
39834: LIST
39835: LIST
39836: LIST
39837: LIST
39838: LIST
39839: LIST
39840: LIST
39841: LIST
39842: LIST
39843: LIST
39844: LIST
39845: LIST
39846: LIST
39847: LIST
39848: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39849: LD_ADDR_VAR 0 32
39853: PUSH
39854: LD_INT 0
39856: PUSH
39857: LD_INT 0
39859: PUSH
39860: EMPTY
39861: LIST
39862: LIST
39863: PUSH
39864: LD_INT 0
39866: PUSH
39867: LD_INT 1
39869: NEG
39870: PUSH
39871: EMPTY
39872: LIST
39873: LIST
39874: PUSH
39875: LD_INT 1
39877: PUSH
39878: LD_INT 0
39880: PUSH
39881: EMPTY
39882: LIST
39883: LIST
39884: PUSH
39885: LD_INT 1
39887: PUSH
39888: LD_INT 1
39890: PUSH
39891: EMPTY
39892: LIST
39893: LIST
39894: PUSH
39895: LD_INT 0
39897: PUSH
39898: LD_INT 1
39900: PUSH
39901: EMPTY
39902: LIST
39903: LIST
39904: PUSH
39905: LD_INT 1
39907: NEG
39908: PUSH
39909: LD_INT 0
39911: PUSH
39912: EMPTY
39913: LIST
39914: LIST
39915: PUSH
39916: LD_INT 1
39918: NEG
39919: PUSH
39920: LD_INT 1
39922: NEG
39923: PUSH
39924: EMPTY
39925: LIST
39926: LIST
39927: PUSH
39928: LD_INT 1
39930: NEG
39931: PUSH
39932: LD_INT 2
39934: NEG
39935: PUSH
39936: EMPTY
39937: LIST
39938: LIST
39939: PUSH
39940: LD_INT 0
39942: PUSH
39943: LD_INT 2
39945: NEG
39946: PUSH
39947: EMPTY
39948: LIST
39949: LIST
39950: PUSH
39951: LD_INT 1
39953: PUSH
39954: LD_INT 1
39956: NEG
39957: PUSH
39958: EMPTY
39959: LIST
39960: LIST
39961: PUSH
39962: LD_INT 2
39964: PUSH
39965: LD_INT 1
39967: PUSH
39968: EMPTY
39969: LIST
39970: LIST
39971: PUSH
39972: LD_INT 2
39974: PUSH
39975: LD_INT 2
39977: PUSH
39978: EMPTY
39979: LIST
39980: LIST
39981: PUSH
39982: LD_INT 1
39984: PUSH
39985: LD_INT 2
39987: PUSH
39988: EMPTY
39989: LIST
39990: LIST
39991: PUSH
39992: LD_INT 0
39994: PUSH
39995: LD_INT 2
39997: PUSH
39998: EMPTY
39999: LIST
40000: LIST
40001: PUSH
40002: LD_INT 1
40004: NEG
40005: PUSH
40006: LD_INT 1
40008: PUSH
40009: EMPTY
40010: LIST
40011: LIST
40012: PUSH
40013: LD_INT 2
40015: NEG
40016: PUSH
40017: LD_INT 0
40019: PUSH
40020: EMPTY
40021: LIST
40022: LIST
40023: PUSH
40024: LD_INT 2
40026: NEG
40027: PUSH
40028: LD_INT 1
40030: NEG
40031: PUSH
40032: EMPTY
40033: LIST
40034: LIST
40035: PUSH
40036: LD_INT 1
40038: NEG
40039: PUSH
40040: LD_INT 3
40042: NEG
40043: PUSH
40044: EMPTY
40045: LIST
40046: LIST
40047: PUSH
40048: LD_INT 1
40050: PUSH
40051: LD_INT 2
40053: NEG
40054: PUSH
40055: EMPTY
40056: LIST
40057: LIST
40058: PUSH
40059: LD_INT 3
40061: PUSH
40062: LD_INT 2
40064: PUSH
40065: EMPTY
40066: LIST
40067: LIST
40068: PUSH
40069: LD_INT 2
40071: PUSH
40072: LD_INT 3
40074: PUSH
40075: EMPTY
40076: LIST
40077: LIST
40078: PUSH
40079: LD_INT 2
40081: NEG
40082: PUSH
40083: LD_INT 1
40085: PUSH
40086: EMPTY
40087: LIST
40088: LIST
40089: PUSH
40090: LD_INT 3
40092: NEG
40093: PUSH
40094: LD_INT 1
40096: NEG
40097: PUSH
40098: EMPTY
40099: LIST
40100: LIST
40101: PUSH
40102: EMPTY
40103: LIST
40104: LIST
40105: LIST
40106: LIST
40107: LIST
40108: LIST
40109: LIST
40110: LIST
40111: LIST
40112: LIST
40113: LIST
40114: LIST
40115: LIST
40116: LIST
40117: LIST
40118: LIST
40119: LIST
40120: LIST
40121: LIST
40122: LIST
40123: LIST
40124: LIST
40125: LIST
40126: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40127: LD_ADDR_VAR 0 33
40131: PUSH
40132: LD_INT 0
40134: PUSH
40135: LD_INT 0
40137: PUSH
40138: EMPTY
40139: LIST
40140: LIST
40141: PUSH
40142: LD_INT 0
40144: PUSH
40145: LD_INT 1
40147: NEG
40148: PUSH
40149: EMPTY
40150: LIST
40151: LIST
40152: PUSH
40153: LD_INT 1
40155: PUSH
40156: LD_INT 0
40158: PUSH
40159: EMPTY
40160: LIST
40161: LIST
40162: PUSH
40163: LD_INT 1
40165: PUSH
40166: LD_INT 1
40168: PUSH
40169: EMPTY
40170: LIST
40171: LIST
40172: PUSH
40173: LD_INT 0
40175: PUSH
40176: LD_INT 1
40178: PUSH
40179: EMPTY
40180: LIST
40181: LIST
40182: PUSH
40183: LD_INT 1
40185: NEG
40186: PUSH
40187: LD_INT 0
40189: PUSH
40190: EMPTY
40191: LIST
40192: LIST
40193: PUSH
40194: LD_INT 1
40196: NEG
40197: PUSH
40198: LD_INT 1
40200: NEG
40201: PUSH
40202: EMPTY
40203: LIST
40204: LIST
40205: PUSH
40206: LD_INT 1
40208: NEG
40209: PUSH
40210: LD_INT 2
40212: NEG
40213: PUSH
40214: EMPTY
40215: LIST
40216: LIST
40217: PUSH
40218: LD_INT 1
40220: PUSH
40221: LD_INT 1
40223: NEG
40224: PUSH
40225: EMPTY
40226: LIST
40227: LIST
40228: PUSH
40229: LD_INT 2
40231: PUSH
40232: LD_INT 0
40234: PUSH
40235: EMPTY
40236: LIST
40237: LIST
40238: PUSH
40239: LD_INT 2
40241: PUSH
40242: LD_INT 1
40244: PUSH
40245: EMPTY
40246: LIST
40247: LIST
40248: PUSH
40249: LD_INT 1
40251: PUSH
40252: LD_INT 2
40254: PUSH
40255: EMPTY
40256: LIST
40257: LIST
40258: PUSH
40259: LD_INT 0
40261: PUSH
40262: LD_INT 2
40264: PUSH
40265: EMPTY
40266: LIST
40267: LIST
40268: PUSH
40269: LD_INT 1
40271: NEG
40272: PUSH
40273: LD_INT 1
40275: PUSH
40276: EMPTY
40277: LIST
40278: LIST
40279: PUSH
40280: LD_INT 2
40282: NEG
40283: PUSH
40284: LD_INT 0
40286: PUSH
40287: EMPTY
40288: LIST
40289: LIST
40290: PUSH
40291: LD_INT 2
40293: NEG
40294: PUSH
40295: LD_INT 1
40297: NEG
40298: PUSH
40299: EMPTY
40300: LIST
40301: LIST
40302: PUSH
40303: LD_INT 2
40305: NEG
40306: PUSH
40307: LD_INT 2
40309: NEG
40310: PUSH
40311: EMPTY
40312: LIST
40313: LIST
40314: PUSH
40315: LD_INT 2
40317: NEG
40318: PUSH
40319: LD_INT 3
40321: NEG
40322: PUSH
40323: EMPTY
40324: LIST
40325: LIST
40326: PUSH
40327: LD_INT 2
40329: PUSH
40330: LD_INT 1
40332: NEG
40333: PUSH
40334: EMPTY
40335: LIST
40336: LIST
40337: PUSH
40338: LD_INT 3
40340: PUSH
40341: LD_INT 1
40343: PUSH
40344: EMPTY
40345: LIST
40346: LIST
40347: PUSH
40348: LD_INT 1
40350: PUSH
40351: LD_INT 3
40353: PUSH
40354: EMPTY
40355: LIST
40356: LIST
40357: PUSH
40358: LD_INT 1
40360: NEG
40361: PUSH
40362: LD_INT 2
40364: PUSH
40365: EMPTY
40366: LIST
40367: LIST
40368: PUSH
40369: LD_INT 3
40371: NEG
40372: PUSH
40373: LD_INT 2
40375: NEG
40376: PUSH
40377: EMPTY
40378: LIST
40379: LIST
40380: PUSH
40381: EMPTY
40382: LIST
40383: LIST
40384: LIST
40385: LIST
40386: LIST
40387: LIST
40388: LIST
40389: LIST
40390: LIST
40391: LIST
40392: LIST
40393: LIST
40394: LIST
40395: LIST
40396: LIST
40397: LIST
40398: LIST
40399: LIST
40400: LIST
40401: LIST
40402: LIST
40403: LIST
40404: LIST
40405: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40406: LD_ADDR_VAR 0 34
40410: PUSH
40411: LD_INT 0
40413: PUSH
40414: LD_INT 0
40416: PUSH
40417: EMPTY
40418: LIST
40419: LIST
40420: PUSH
40421: LD_INT 0
40423: PUSH
40424: LD_INT 1
40426: NEG
40427: PUSH
40428: EMPTY
40429: LIST
40430: LIST
40431: PUSH
40432: LD_INT 1
40434: PUSH
40435: LD_INT 0
40437: PUSH
40438: EMPTY
40439: LIST
40440: LIST
40441: PUSH
40442: LD_INT 1
40444: PUSH
40445: LD_INT 1
40447: PUSH
40448: EMPTY
40449: LIST
40450: LIST
40451: PUSH
40452: LD_INT 0
40454: PUSH
40455: LD_INT 1
40457: PUSH
40458: EMPTY
40459: LIST
40460: LIST
40461: PUSH
40462: LD_INT 1
40464: NEG
40465: PUSH
40466: LD_INT 0
40468: PUSH
40469: EMPTY
40470: LIST
40471: LIST
40472: PUSH
40473: LD_INT 1
40475: NEG
40476: PUSH
40477: LD_INT 1
40479: NEG
40480: PUSH
40481: EMPTY
40482: LIST
40483: LIST
40484: PUSH
40485: LD_INT 1
40487: NEG
40488: PUSH
40489: LD_INT 2
40491: NEG
40492: PUSH
40493: EMPTY
40494: LIST
40495: LIST
40496: PUSH
40497: LD_INT 0
40499: PUSH
40500: LD_INT 2
40502: NEG
40503: PUSH
40504: EMPTY
40505: LIST
40506: LIST
40507: PUSH
40508: LD_INT 1
40510: PUSH
40511: LD_INT 1
40513: NEG
40514: PUSH
40515: EMPTY
40516: LIST
40517: LIST
40518: PUSH
40519: LD_INT 2
40521: PUSH
40522: LD_INT 1
40524: PUSH
40525: EMPTY
40526: LIST
40527: LIST
40528: PUSH
40529: LD_INT 2
40531: PUSH
40532: LD_INT 2
40534: PUSH
40535: EMPTY
40536: LIST
40537: LIST
40538: PUSH
40539: LD_INT 1
40541: PUSH
40542: LD_INT 2
40544: PUSH
40545: EMPTY
40546: LIST
40547: LIST
40548: PUSH
40549: LD_INT 1
40551: NEG
40552: PUSH
40553: LD_INT 1
40555: PUSH
40556: EMPTY
40557: LIST
40558: LIST
40559: PUSH
40560: LD_INT 2
40562: NEG
40563: PUSH
40564: LD_INT 0
40566: PUSH
40567: EMPTY
40568: LIST
40569: LIST
40570: PUSH
40571: LD_INT 2
40573: NEG
40574: PUSH
40575: LD_INT 1
40577: NEG
40578: PUSH
40579: EMPTY
40580: LIST
40581: LIST
40582: PUSH
40583: LD_INT 2
40585: NEG
40586: PUSH
40587: LD_INT 2
40589: NEG
40590: PUSH
40591: EMPTY
40592: LIST
40593: LIST
40594: PUSH
40595: LD_INT 1
40597: NEG
40598: PUSH
40599: LD_INT 3
40601: NEG
40602: PUSH
40603: EMPTY
40604: LIST
40605: LIST
40606: PUSH
40607: LD_INT 1
40609: PUSH
40610: LD_INT 2
40612: NEG
40613: PUSH
40614: EMPTY
40615: LIST
40616: LIST
40617: PUSH
40618: LD_INT 3
40620: PUSH
40621: LD_INT 2
40623: PUSH
40624: EMPTY
40625: LIST
40626: LIST
40627: PUSH
40628: LD_INT 2
40630: PUSH
40631: LD_INT 3
40633: PUSH
40634: EMPTY
40635: LIST
40636: LIST
40637: PUSH
40638: LD_INT 2
40640: NEG
40641: PUSH
40642: LD_INT 1
40644: PUSH
40645: EMPTY
40646: LIST
40647: LIST
40648: PUSH
40649: LD_INT 3
40651: NEG
40652: PUSH
40653: LD_INT 1
40655: NEG
40656: PUSH
40657: EMPTY
40658: LIST
40659: LIST
40660: PUSH
40661: EMPTY
40662: LIST
40663: LIST
40664: LIST
40665: LIST
40666: LIST
40667: LIST
40668: LIST
40669: LIST
40670: LIST
40671: LIST
40672: LIST
40673: LIST
40674: LIST
40675: LIST
40676: LIST
40677: LIST
40678: LIST
40679: LIST
40680: LIST
40681: LIST
40682: LIST
40683: LIST
40684: LIST
40685: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40686: LD_ADDR_VAR 0 35
40690: PUSH
40691: LD_INT 0
40693: PUSH
40694: LD_INT 0
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: PUSH
40701: LD_INT 0
40703: PUSH
40704: LD_INT 1
40706: NEG
40707: PUSH
40708: EMPTY
40709: LIST
40710: LIST
40711: PUSH
40712: LD_INT 1
40714: PUSH
40715: LD_INT 0
40717: PUSH
40718: EMPTY
40719: LIST
40720: LIST
40721: PUSH
40722: LD_INT 1
40724: PUSH
40725: LD_INT 1
40727: PUSH
40728: EMPTY
40729: LIST
40730: LIST
40731: PUSH
40732: LD_INT 0
40734: PUSH
40735: LD_INT 1
40737: PUSH
40738: EMPTY
40739: LIST
40740: LIST
40741: PUSH
40742: LD_INT 1
40744: NEG
40745: PUSH
40746: LD_INT 0
40748: PUSH
40749: EMPTY
40750: LIST
40751: LIST
40752: PUSH
40753: LD_INT 1
40755: NEG
40756: PUSH
40757: LD_INT 1
40759: NEG
40760: PUSH
40761: EMPTY
40762: LIST
40763: LIST
40764: PUSH
40765: LD_INT 2
40767: PUSH
40768: LD_INT 1
40770: PUSH
40771: EMPTY
40772: LIST
40773: LIST
40774: PUSH
40775: LD_INT 2
40777: NEG
40778: PUSH
40779: LD_INT 1
40781: NEG
40782: PUSH
40783: EMPTY
40784: LIST
40785: LIST
40786: PUSH
40787: EMPTY
40788: LIST
40789: LIST
40790: LIST
40791: LIST
40792: LIST
40793: LIST
40794: LIST
40795: LIST
40796: LIST
40797: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
40798: LD_ADDR_VAR 0 36
40802: PUSH
40803: LD_INT 0
40805: PUSH
40806: LD_INT 0
40808: PUSH
40809: EMPTY
40810: LIST
40811: LIST
40812: PUSH
40813: LD_INT 0
40815: PUSH
40816: LD_INT 1
40818: NEG
40819: PUSH
40820: EMPTY
40821: LIST
40822: LIST
40823: PUSH
40824: LD_INT 1
40826: PUSH
40827: LD_INT 0
40829: PUSH
40830: EMPTY
40831: LIST
40832: LIST
40833: PUSH
40834: LD_INT 1
40836: PUSH
40837: LD_INT 1
40839: PUSH
40840: EMPTY
40841: LIST
40842: LIST
40843: PUSH
40844: LD_INT 0
40846: PUSH
40847: LD_INT 1
40849: PUSH
40850: EMPTY
40851: LIST
40852: LIST
40853: PUSH
40854: LD_INT 1
40856: NEG
40857: PUSH
40858: LD_INT 0
40860: PUSH
40861: EMPTY
40862: LIST
40863: LIST
40864: PUSH
40865: LD_INT 1
40867: NEG
40868: PUSH
40869: LD_INT 1
40871: NEG
40872: PUSH
40873: EMPTY
40874: LIST
40875: LIST
40876: PUSH
40877: LD_INT 1
40879: NEG
40880: PUSH
40881: LD_INT 2
40883: NEG
40884: PUSH
40885: EMPTY
40886: LIST
40887: LIST
40888: PUSH
40889: LD_INT 1
40891: PUSH
40892: LD_INT 2
40894: PUSH
40895: EMPTY
40896: LIST
40897: LIST
40898: PUSH
40899: EMPTY
40900: LIST
40901: LIST
40902: LIST
40903: LIST
40904: LIST
40905: LIST
40906: LIST
40907: LIST
40908: LIST
40909: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
40910: LD_ADDR_VAR 0 37
40914: PUSH
40915: LD_INT 0
40917: PUSH
40918: LD_INT 0
40920: PUSH
40921: EMPTY
40922: LIST
40923: LIST
40924: PUSH
40925: LD_INT 0
40927: PUSH
40928: LD_INT 1
40930: NEG
40931: PUSH
40932: EMPTY
40933: LIST
40934: LIST
40935: PUSH
40936: LD_INT 1
40938: PUSH
40939: LD_INT 0
40941: PUSH
40942: EMPTY
40943: LIST
40944: LIST
40945: PUSH
40946: LD_INT 1
40948: PUSH
40949: LD_INT 1
40951: PUSH
40952: EMPTY
40953: LIST
40954: LIST
40955: PUSH
40956: LD_INT 0
40958: PUSH
40959: LD_INT 1
40961: PUSH
40962: EMPTY
40963: LIST
40964: LIST
40965: PUSH
40966: LD_INT 1
40968: NEG
40969: PUSH
40970: LD_INT 0
40972: PUSH
40973: EMPTY
40974: LIST
40975: LIST
40976: PUSH
40977: LD_INT 1
40979: NEG
40980: PUSH
40981: LD_INT 1
40983: NEG
40984: PUSH
40985: EMPTY
40986: LIST
40987: LIST
40988: PUSH
40989: LD_INT 1
40991: PUSH
40992: LD_INT 1
40994: NEG
40995: PUSH
40996: EMPTY
40997: LIST
40998: LIST
40999: PUSH
41000: LD_INT 1
41002: NEG
41003: PUSH
41004: LD_INT 1
41006: PUSH
41007: EMPTY
41008: LIST
41009: LIST
41010: PUSH
41011: EMPTY
41012: LIST
41013: LIST
41014: LIST
41015: LIST
41016: LIST
41017: LIST
41018: LIST
41019: LIST
41020: LIST
41021: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41022: LD_ADDR_VAR 0 38
41026: PUSH
41027: LD_INT 0
41029: PUSH
41030: LD_INT 0
41032: PUSH
41033: EMPTY
41034: LIST
41035: LIST
41036: PUSH
41037: LD_INT 0
41039: PUSH
41040: LD_INT 1
41042: NEG
41043: PUSH
41044: EMPTY
41045: LIST
41046: LIST
41047: PUSH
41048: LD_INT 1
41050: PUSH
41051: LD_INT 0
41053: PUSH
41054: EMPTY
41055: LIST
41056: LIST
41057: PUSH
41058: LD_INT 1
41060: PUSH
41061: LD_INT 1
41063: PUSH
41064: EMPTY
41065: LIST
41066: LIST
41067: PUSH
41068: LD_INT 0
41070: PUSH
41071: LD_INT 1
41073: PUSH
41074: EMPTY
41075: LIST
41076: LIST
41077: PUSH
41078: LD_INT 1
41080: NEG
41081: PUSH
41082: LD_INT 0
41084: PUSH
41085: EMPTY
41086: LIST
41087: LIST
41088: PUSH
41089: LD_INT 1
41091: NEG
41092: PUSH
41093: LD_INT 1
41095: NEG
41096: PUSH
41097: EMPTY
41098: LIST
41099: LIST
41100: PUSH
41101: LD_INT 2
41103: PUSH
41104: LD_INT 1
41106: PUSH
41107: EMPTY
41108: LIST
41109: LIST
41110: PUSH
41111: LD_INT 2
41113: NEG
41114: PUSH
41115: LD_INT 1
41117: NEG
41118: PUSH
41119: EMPTY
41120: LIST
41121: LIST
41122: PUSH
41123: EMPTY
41124: LIST
41125: LIST
41126: LIST
41127: LIST
41128: LIST
41129: LIST
41130: LIST
41131: LIST
41132: LIST
41133: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41134: LD_ADDR_VAR 0 39
41138: PUSH
41139: LD_INT 0
41141: PUSH
41142: LD_INT 0
41144: PUSH
41145: EMPTY
41146: LIST
41147: LIST
41148: PUSH
41149: LD_INT 0
41151: PUSH
41152: LD_INT 1
41154: NEG
41155: PUSH
41156: EMPTY
41157: LIST
41158: LIST
41159: PUSH
41160: LD_INT 1
41162: PUSH
41163: LD_INT 0
41165: PUSH
41166: EMPTY
41167: LIST
41168: LIST
41169: PUSH
41170: LD_INT 1
41172: PUSH
41173: LD_INT 1
41175: PUSH
41176: EMPTY
41177: LIST
41178: LIST
41179: PUSH
41180: LD_INT 0
41182: PUSH
41183: LD_INT 1
41185: PUSH
41186: EMPTY
41187: LIST
41188: LIST
41189: PUSH
41190: LD_INT 1
41192: NEG
41193: PUSH
41194: LD_INT 0
41196: PUSH
41197: EMPTY
41198: LIST
41199: LIST
41200: PUSH
41201: LD_INT 1
41203: NEG
41204: PUSH
41205: LD_INT 1
41207: NEG
41208: PUSH
41209: EMPTY
41210: LIST
41211: LIST
41212: PUSH
41213: LD_INT 1
41215: NEG
41216: PUSH
41217: LD_INT 2
41219: NEG
41220: PUSH
41221: EMPTY
41222: LIST
41223: LIST
41224: PUSH
41225: LD_INT 1
41227: PUSH
41228: LD_INT 2
41230: PUSH
41231: EMPTY
41232: LIST
41233: LIST
41234: PUSH
41235: EMPTY
41236: LIST
41237: LIST
41238: LIST
41239: LIST
41240: LIST
41241: LIST
41242: LIST
41243: LIST
41244: LIST
41245: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41246: LD_ADDR_VAR 0 40
41250: PUSH
41251: LD_INT 0
41253: PUSH
41254: LD_INT 0
41256: PUSH
41257: EMPTY
41258: LIST
41259: LIST
41260: PUSH
41261: LD_INT 0
41263: PUSH
41264: LD_INT 1
41266: NEG
41267: PUSH
41268: EMPTY
41269: LIST
41270: LIST
41271: PUSH
41272: LD_INT 1
41274: PUSH
41275: LD_INT 0
41277: PUSH
41278: EMPTY
41279: LIST
41280: LIST
41281: PUSH
41282: LD_INT 1
41284: PUSH
41285: LD_INT 1
41287: PUSH
41288: EMPTY
41289: LIST
41290: LIST
41291: PUSH
41292: LD_INT 0
41294: PUSH
41295: LD_INT 1
41297: PUSH
41298: EMPTY
41299: LIST
41300: LIST
41301: PUSH
41302: LD_INT 1
41304: NEG
41305: PUSH
41306: LD_INT 0
41308: PUSH
41309: EMPTY
41310: LIST
41311: LIST
41312: PUSH
41313: LD_INT 1
41315: NEG
41316: PUSH
41317: LD_INT 1
41319: NEG
41320: PUSH
41321: EMPTY
41322: LIST
41323: LIST
41324: PUSH
41325: LD_INT 1
41327: PUSH
41328: LD_INT 1
41330: NEG
41331: PUSH
41332: EMPTY
41333: LIST
41334: LIST
41335: PUSH
41336: LD_INT 1
41338: NEG
41339: PUSH
41340: LD_INT 1
41342: PUSH
41343: EMPTY
41344: LIST
41345: LIST
41346: PUSH
41347: EMPTY
41348: LIST
41349: LIST
41350: LIST
41351: LIST
41352: LIST
41353: LIST
41354: LIST
41355: LIST
41356: LIST
41357: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41358: LD_ADDR_VAR 0 41
41362: PUSH
41363: LD_INT 0
41365: PUSH
41366: LD_INT 0
41368: PUSH
41369: EMPTY
41370: LIST
41371: LIST
41372: PUSH
41373: LD_INT 0
41375: PUSH
41376: LD_INT 1
41378: NEG
41379: PUSH
41380: EMPTY
41381: LIST
41382: LIST
41383: PUSH
41384: LD_INT 1
41386: PUSH
41387: LD_INT 0
41389: PUSH
41390: EMPTY
41391: LIST
41392: LIST
41393: PUSH
41394: LD_INT 1
41396: PUSH
41397: LD_INT 1
41399: PUSH
41400: EMPTY
41401: LIST
41402: LIST
41403: PUSH
41404: LD_INT 0
41406: PUSH
41407: LD_INT 1
41409: PUSH
41410: EMPTY
41411: LIST
41412: LIST
41413: PUSH
41414: LD_INT 1
41416: NEG
41417: PUSH
41418: LD_INT 0
41420: PUSH
41421: EMPTY
41422: LIST
41423: LIST
41424: PUSH
41425: LD_INT 1
41427: NEG
41428: PUSH
41429: LD_INT 1
41431: NEG
41432: PUSH
41433: EMPTY
41434: LIST
41435: LIST
41436: PUSH
41437: LD_INT 1
41439: NEG
41440: PUSH
41441: LD_INT 2
41443: NEG
41444: PUSH
41445: EMPTY
41446: LIST
41447: LIST
41448: PUSH
41449: LD_INT 1
41451: PUSH
41452: LD_INT 1
41454: NEG
41455: PUSH
41456: EMPTY
41457: LIST
41458: LIST
41459: PUSH
41460: LD_INT 2
41462: PUSH
41463: LD_INT 0
41465: PUSH
41466: EMPTY
41467: LIST
41468: LIST
41469: PUSH
41470: LD_INT 2
41472: PUSH
41473: LD_INT 1
41475: PUSH
41476: EMPTY
41477: LIST
41478: LIST
41479: PUSH
41480: LD_INT 2
41482: PUSH
41483: LD_INT 2
41485: PUSH
41486: EMPTY
41487: LIST
41488: LIST
41489: PUSH
41490: LD_INT 1
41492: PUSH
41493: LD_INT 2
41495: PUSH
41496: EMPTY
41497: LIST
41498: LIST
41499: PUSH
41500: LD_INT 1
41502: NEG
41503: PUSH
41504: LD_INT 1
41506: PUSH
41507: EMPTY
41508: LIST
41509: LIST
41510: PUSH
41511: LD_INT 2
41513: NEG
41514: PUSH
41515: LD_INT 0
41517: PUSH
41518: EMPTY
41519: LIST
41520: LIST
41521: PUSH
41522: LD_INT 2
41524: NEG
41525: PUSH
41526: LD_INT 1
41528: NEG
41529: PUSH
41530: EMPTY
41531: LIST
41532: LIST
41533: PUSH
41534: LD_INT 2
41536: NEG
41537: PUSH
41538: LD_INT 2
41540: NEG
41541: PUSH
41542: EMPTY
41543: LIST
41544: LIST
41545: PUSH
41546: LD_INT 2
41548: NEG
41549: PUSH
41550: LD_INT 3
41552: NEG
41553: PUSH
41554: EMPTY
41555: LIST
41556: LIST
41557: PUSH
41558: LD_INT 2
41560: PUSH
41561: LD_INT 1
41563: NEG
41564: PUSH
41565: EMPTY
41566: LIST
41567: LIST
41568: PUSH
41569: LD_INT 3
41571: PUSH
41572: LD_INT 0
41574: PUSH
41575: EMPTY
41576: LIST
41577: LIST
41578: PUSH
41579: LD_INT 3
41581: PUSH
41582: LD_INT 1
41584: PUSH
41585: EMPTY
41586: LIST
41587: LIST
41588: PUSH
41589: LD_INT 3
41591: PUSH
41592: LD_INT 2
41594: PUSH
41595: EMPTY
41596: LIST
41597: LIST
41598: PUSH
41599: LD_INT 3
41601: PUSH
41602: LD_INT 3
41604: PUSH
41605: EMPTY
41606: LIST
41607: LIST
41608: PUSH
41609: LD_INT 2
41611: PUSH
41612: LD_INT 3
41614: PUSH
41615: EMPTY
41616: LIST
41617: LIST
41618: PUSH
41619: LD_INT 2
41621: NEG
41622: PUSH
41623: LD_INT 1
41625: PUSH
41626: EMPTY
41627: LIST
41628: LIST
41629: PUSH
41630: LD_INT 3
41632: NEG
41633: PUSH
41634: LD_INT 0
41636: PUSH
41637: EMPTY
41638: LIST
41639: LIST
41640: PUSH
41641: LD_INT 3
41643: NEG
41644: PUSH
41645: LD_INT 1
41647: NEG
41648: PUSH
41649: EMPTY
41650: LIST
41651: LIST
41652: PUSH
41653: LD_INT 3
41655: NEG
41656: PUSH
41657: LD_INT 2
41659: NEG
41660: PUSH
41661: EMPTY
41662: LIST
41663: LIST
41664: PUSH
41665: LD_INT 3
41667: NEG
41668: PUSH
41669: LD_INT 3
41671: NEG
41672: PUSH
41673: EMPTY
41674: LIST
41675: LIST
41676: PUSH
41677: EMPTY
41678: LIST
41679: LIST
41680: LIST
41681: LIST
41682: LIST
41683: LIST
41684: LIST
41685: LIST
41686: LIST
41687: LIST
41688: LIST
41689: LIST
41690: LIST
41691: LIST
41692: LIST
41693: LIST
41694: LIST
41695: LIST
41696: LIST
41697: LIST
41698: LIST
41699: LIST
41700: LIST
41701: LIST
41702: LIST
41703: LIST
41704: LIST
41705: LIST
41706: LIST
41707: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41708: LD_ADDR_VAR 0 42
41712: PUSH
41713: LD_INT 0
41715: PUSH
41716: LD_INT 0
41718: PUSH
41719: EMPTY
41720: LIST
41721: LIST
41722: PUSH
41723: LD_INT 0
41725: PUSH
41726: LD_INT 1
41728: NEG
41729: PUSH
41730: EMPTY
41731: LIST
41732: LIST
41733: PUSH
41734: LD_INT 1
41736: PUSH
41737: LD_INT 0
41739: PUSH
41740: EMPTY
41741: LIST
41742: LIST
41743: PUSH
41744: LD_INT 1
41746: PUSH
41747: LD_INT 1
41749: PUSH
41750: EMPTY
41751: LIST
41752: LIST
41753: PUSH
41754: LD_INT 0
41756: PUSH
41757: LD_INT 1
41759: PUSH
41760: EMPTY
41761: LIST
41762: LIST
41763: PUSH
41764: LD_INT 1
41766: NEG
41767: PUSH
41768: LD_INT 0
41770: PUSH
41771: EMPTY
41772: LIST
41773: LIST
41774: PUSH
41775: LD_INT 1
41777: NEG
41778: PUSH
41779: LD_INT 1
41781: NEG
41782: PUSH
41783: EMPTY
41784: LIST
41785: LIST
41786: PUSH
41787: LD_INT 1
41789: NEG
41790: PUSH
41791: LD_INT 2
41793: NEG
41794: PUSH
41795: EMPTY
41796: LIST
41797: LIST
41798: PUSH
41799: LD_INT 0
41801: PUSH
41802: LD_INT 2
41804: NEG
41805: PUSH
41806: EMPTY
41807: LIST
41808: LIST
41809: PUSH
41810: LD_INT 1
41812: PUSH
41813: LD_INT 1
41815: NEG
41816: PUSH
41817: EMPTY
41818: LIST
41819: LIST
41820: PUSH
41821: LD_INT 2
41823: PUSH
41824: LD_INT 1
41826: PUSH
41827: EMPTY
41828: LIST
41829: LIST
41830: PUSH
41831: LD_INT 2
41833: PUSH
41834: LD_INT 2
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: PUSH
41841: LD_INT 1
41843: PUSH
41844: LD_INT 2
41846: PUSH
41847: EMPTY
41848: LIST
41849: LIST
41850: PUSH
41851: LD_INT 0
41853: PUSH
41854: LD_INT 2
41856: PUSH
41857: EMPTY
41858: LIST
41859: LIST
41860: PUSH
41861: LD_INT 1
41863: NEG
41864: PUSH
41865: LD_INT 1
41867: PUSH
41868: EMPTY
41869: LIST
41870: LIST
41871: PUSH
41872: LD_INT 2
41874: NEG
41875: PUSH
41876: LD_INT 1
41878: NEG
41879: PUSH
41880: EMPTY
41881: LIST
41882: LIST
41883: PUSH
41884: LD_INT 2
41886: NEG
41887: PUSH
41888: LD_INT 2
41890: NEG
41891: PUSH
41892: EMPTY
41893: LIST
41894: LIST
41895: PUSH
41896: LD_INT 2
41898: NEG
41899: PUSH
41900: LD_INT 3
41902: NEG
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: PUSH
41908: LD_INT 1
41910: NEG
41911: PUSH
41912: LD_INT 3
41914: NEG
41915: PUSH
41916: EMPTY
41917: LIST
41918: LIST
41919: PUSH
41920: LD_INT 0
41922: PUSH
41923: LD_INT 3
41925: NEG
41926: PUSH
41927: EMPTY
41928: LIST
41929: LIST
41930: PUSH
41931: LD_INT 1
41933: PUSH
41934: LD_INT 2
41936: NEG
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: PUSH
41942: LD_INT 3
41944: PUSH
41945: LD_INT 2
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: PUSH
41952: LD_INT 3
41954: PUSH
41955: LD_INT 3
41957: PUSH
41958: EMPTY
41959: LIST
41960: LIST
41961: PUSH
41962: LD_INT 2
41964: PUSH
41965: LD_INT 3
41967: PUSH
41968: EMPTY
41969: LIST
41970: LIST
41971: PUSH
41972: LD_INT 1
41974: PUSH
41975: LD_INT 3
41977: PUSH
41978: EMPTY
41979: LIST
41980: LIST
41981: PUSH
41982: LD_INT 0
41984: PUSH
41985: LD_INT 3
41987: PUSH
41988: EMPTY
41989: LIST
41990: LIST
41991: PUSH
41992: LD_INT 1
41994: NEG
41995: PUSH
41996: LD_INT 2
41998: PUSH
41999: EMPTY
42000: LIST
42001: LIST
42002: PUSH
42003: LD_INT 3
42005: NEG
42006: PUSH
42007: LD_INT 2
42009: NEG
42010: PUSH
42011: EMPTY
42012: LIST
42013: LIST
42014: PUSH
42015: LD_INT 3
42017: NEG
42018: PUSH
42019: LD_INT 3
42021: NEG
42022: PUSH
42023: EMPTY
42024: LIST
42025: LIST
42026: PUSH
42027: EMPTY
42028: LIST
42029: LIST
42030: LIST
42031: LIST
42032: LIST
42033: LIST
42034: LIST
42035: LIST
42036: LIST
42037: LIST
42038: LIST
42039: LIST
42040: LIST
42041: LIST
42042: LIST
42043: LIST
42044: LIST
42045: LIST
42046: LIST
42047: LIST
42048: LIST
42049: LIST
42050: LIST
42051: LIST
42052: LIST
42053: LIST
42054: LIST
42055: LIST
42056: LIST
42057: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42058: LD_ADDR_VAR 0 43
42062: PUSH
42063: LD_INT 0
42065: PUSH
42066: LD_INT 0
42068: PUSH
42069: EMPTY
42070: LIST
42071: LIST
42072: PUSH
42073: LD_INT 0
42075: PUSH
42076: LD_INT 1
42078: NEG
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: PUSH
42084: LD_INT 1
42086: PUSH
42087: LD_INT 0
42089: PUSH
42090: EMPTY
42091: LIST
42092: LIST
42093: PUSH
42094: LD_INT 1
42096: PUSH
42097: LD_INT 1
42099: PUSH
42100: EMPTY
42101: LIST
42102: LIST
42103: PUSH
42104: LD_INT 0
42106: PUSH
42107: LD_INT 1
42109: PUSH
42110: EMPTY
42111: LIST
42112: LIST
42113: PUSH
42114: LD_INT 1
42116: NEG
42117: PUSH
42118: LD_INT 0
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: PUSH
42125: LD_INT 1
42127: NEG
42128: PUSH
42129: LD_INT 1
42131: NEG
42132: PUSH
42133: EMPTY
42134: LIST
42135: LIST
42136: PUSH
42137: LD_INT 1
42139: NEG
42140: PUSH
42141: LD_INT 2
42143: NEG
42144: PUSH
42145: EMPTY
42146: LIST
42147: LIST
42148: PUSH
42149: LD_INT 0
42151: PUSH
42152: LD_INT 2
42154: NEG
42155: PUSH
42156: EMPTY
42157: LIST
42158: LIST
42159: PUSH
42160: LD_INT 1
42162: PUSH
42163: LD_INT 1
42165: NEG
42166: PUSH
42167: EMPTY
42168: LIST
42169: LIST
42170: PUSH
42171: LD_INT 2
42173: PUSH
42174: LD_INT 0
42176: PUSH
42177: EMPTY
42178: LIST
42179: LIST
42180: PUSH
42181: LD_INT 2
42183: PUSH
42184: LD_INT 1
42186: PUSH
42187: EMPTY
42188: LIST
42189: LIST
42190: PUSH
42191: LD_INT 1
42193: PUSH
42194: LD_INT 2
42196: PUSH
42197: EMPTY
42198: LIST
42199: LIST
42200: PUSH
42201: LD_INT 0
42203: PUSH
42204: LD_INT 2
42206: PUSH
42207: EMPTY
42208: LIST
42209: LIST
42210: PUSH
42211: LD_INT 1
42213: NEG
42214: PUSH
42215: LD_INT 1
42217: PUSH
42218: EMPTY
42219: LIST
42220: LIST
42221: PUSH
42222: LD_INT 2
42224: NEG
42225: PUSH
42226: LD_INT 0
42228: PUSH
42229: EMPTY
42230: LIST
42231: LIST
42232: PUSH
42233: LD_INT 2
42235: NEG
42236: PUSH
42237: LD_INT 1
42239: NEG
42240: PUSH
42241: EMPTY
42242: LIST
42243: LIST
42244: PUSH
42245: LD_INT 1
42247: NEG
42248: PUSH
42249: LD_INT 3
42251: NEG
42252: PUSH
42253: EMPTY
42254: LIST
42255: LIST
42256: PUSH
42257: LD_INT 0
42259: PUSH
42260: LD_INT 3
42262: NEG
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: PUSH
42268: LD_INT 1
42270: PUSH
42271: LD_INT 2
42273: NEG
42274: PUSH
42275: EMPTY
42276: LIST
42277: LIST
42278: PUSH
42279: LD_INT 2
42281: PUSH
42282: LD_INT 1
42284: NEG
42285: PUSH
42286: EMPTY
42287: LIST
42288: LIST
42289: PUSH
42290: LD_INT 3
42292: PUSH
42293: LD_INT 0
42295: PUSH
42296: EMPTY
42297: LIST
42298: LIST
42299: PUSH
42300: LD_INT 3
42302: PUSH
42303: LD_INT 1
42305: PUSH
42306: EMPTY
42307: LIST
42308: LIST
42309: PUSH
42310: LD_INT 1
42312: PUSH
42313: LD_INT 3
42315: PUSH
42316: EMPTY
42317: LIST
42318: LIST
42319: PUSH
42320: LD_INT 0
42322: PUSH
42323: LD_INT 3
42325: PUSH
42326: EMPTY
42327: LIST
42328: LIST
42329: PUSH
42330: LD_INT 1
42332: NEG
42333: PUSH
42334: LD_INT 2
42336: PUSH
42337: EMPTY
42338: LIST
42339: LIST
42340: PUSH
42341: LD_INT 2
42343: NEG
42344: PUSH
42345: LD_INT 1
42347: PUSH
42348: EMPTY
42349: LIST
42350: LIST
42351: PUSH
42352: LD_INT 3
42354: NEG
42355: PUSH
42356: LD_INT 0
42358: PUSH
42359: EMPTY
42360: LIST
42361: LIST
42362: PUSH
42363: LD_INT 3
42365: NEG
42366: PUSH
42367: LD_INT 1
42369: NEG
42370: PUSH
42371: EMPTY
42372: LIST
42373: LIST
42374: PUSH
42375: EMPTY
42376: LIST
42377: LIST
42378: LIST
42379: LIST
42380: LIST
42381: LIST
42382: LIST
42383: LIST
42384: LIST
42385: LIST
42386: LIST
42387: LIST
42388: LIST
42389: LIST
42390: LIST
42391: LIST
42392: LIST
42393: LIST
42394: LIST
42395: LIST
42396: LIST
42397: LIST
42398: LIST
42399: LIST
42400: LIST
42401: LIST
42402: LIST
42403: LIST
42404: LIST
42405: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42406: LD_ADDR_VAR 0 44
42410: PUSH
42411: LD_INT 0
42413: PUSH
42414: LD_INT 0
42416: PUSH
42417: EMPTY
42418: LIST
42419: LIST
42420: PUSH
42421: LD_INT 0
42423: PUSH
42424: LD_INT 1
42426: NEG
42427: PUSH
42428: EMPTY
42429: LIST
42430: LIST
42431: PUSH
42432: LD_INT 1
42434: PUSH
42435: LD_INT 0
42437: PUSH
42438: EMPTY
42439: LIST
42440: LIST
42441: PUSH
42442: LD_INT 1
42444: PUSH
42445: LD_INT 1
42447: PUSH
42448: EMPTY
42449: LIST
42450: LIST
42451: PUSH
42452: LD_INT 0
42454: PUSH
42455: LD_INT 1
42457: PUSH
42458: EMPTY
42459: LIST
42460: LIST
42461: PUSH
42462: LD_INT 1
42464: NEG
42465: PUSH
42466: LD_INT 0
42468: PUSH
42469: EMPTY
42470: LIST
42471: LIST
42472: PUSH
42473: LD_INT 1
42475: NEG
42476: PUSH
42477: LD_INT 1
42479: NEG
42480: PUSH
42481: EMPTY
42482: LIST
42483: LIST
42484: PUSH
42485: LD_INT 1
42487: NEG
42488: PUSH
42489: LD_INT 2
42491: NEG
42492: PUSH
42493: EMPTY
42494: LIST
42495: LIST
42496: PUSH
42497: LD_INT 1
42499: PUSH
42500: LD_INT 1
42502: NEG
42503: PUSH
42504: EMPTY
42505: LIST
42506: LIST
42507: PUSH
42508: LD_INT 2
42510: PUSH
42511: LD_INT 0
42513: PUSH
42514: EMPTY
42515: LIST
42516: LIST
42517: PUSH
42518: LD_INT 2
42520: PUSH
42521: LD_INT 1
42523: PUSH
42524: EMPTY
42525: LIST
42526: LIST
42527: PUSH
42528: LD_INT 2
42530: PUSH
42531: LD_INT 2
42533: PUSH
42534: EMPTY
42535: LIST
42536: LIST
42537: PUSH
42538: LD_INT 1
42540: PUSH
42541: LD_INT 2
42543: PUSH
42544: EMPTY
42545: LIST
42546: LIST
42547: PUSH
42548: LD_INT 1
42550: NEG
42551: PUSH
42552: LD_INT 1
42554: PUSH
42555: EMPTY
42556: LIST
42557: LIST
42558: PUSH
42559: LD_INT 2
42561: NEG
42562: PUSH
42563: LD_INT 0
42565: PUSH
42566: EMPTY
42567: LIST
42568: LIST
42569: PUSH
42570: LD_INT 2
42572: NEG
42573: PUSH
42574: LD_INT 1
42576: NEG
42577: PUSH
42578: EMPTY
42579: LIST
42580: LIST
42581: PUSH
42582: LD_INT 2
42584: NEG
42585: PUSH
42586: LD_INT 2
42588: NEG
42589: PUSH
42590: EMPTY
42591: LIST
42592: LIST
42593: PUSH
42594: LD_INT 2
42596: NEG
42597: PUSH
42598: LD_INT 3
42600: NEG
42601: PUSH
42602: EMPTY
42603: LIST
42604: LIST
42605: PUSH
42606: LD_INT 2
42608: PUSH
42609: LD_INT 1
42611: NEG
42612: PUSH
42613: EMPTY
42614: LIST
42615: LIST
42616: PUSH
42617: LD_INT 3
42619: PUSH
42620: LD_INT 0
42622: PUSH
42623: EMPTY
42624: LIST
42625: LIST
42626: PUSH
42627: LD_INT 3
42629: PUSH
42630: LD_INT 1
42632: PUSH
42633: EMPTY
42634: LIST
42635: LIST
42636: PUSH
42637: LD_INT 3
42639: PUSH
42640: LD_INT 2
42642: PUSH
42643: EMPTY
42644: LIST
42645: LIST
42646: PUSH
42647: LD_INT 3
42649: PUSH
42650: LD_INT 3
42652: PUSH
42653: EMPTY
42654: LIST
42655: LIST
42656: PUSH
42657: LD_INT 2
42659: PUSH
42660: LD_INT 3
42662: PUSH
42663: EMPTY
42664: LIST
42665: LIST
42666: PUSH
42667: LD_INT 2
42669: NEG
42670: PUSH
42671: LD_INT 1
42673: PUSH
42674: EMPTY
42675: LIST
42676: LIST
42677: PUSH
42678: LD_INT 3
42680: NEG
42681: PUSH
42682: LD_INT 0
42684: PUSH
42685: EMPTY
42686: LIST
42687: LIST
42688: PUSH
42689: LD_INT 3
42691: NEG
42692: PUSH
42693: LD_INT 1
42695: NEG
42696: PUSH
42697: EMPTY
42698: LIST
42699: LIST
42700: PUSH
42701: LD_INT 3
42703: NEG
42704: PUSH
42705: LD_INT 2
42707: NEG
42708: PUSH
42709: EMPTY
42710: LIST
42711: LIST
42712: PUSH
42713: LD_INT 3
42715: NEG
42716: PUSH
42717: LD_INT 3
42719: NEG
42720: PUSH
42721: EMPTY
42722: LIST
42723: LIST
42724: PUSH
42725: EMPTY
42726: LIST
42727: LIST
42728: LIST
42729: LIST
42730: LIST
42731: LIST
42732: LIST
42733: LIST
42734: LIST
42735: LIST
42736: LIST
42737: LIST
42738: LIST
42739: LIST
42740: LIST
42741: LIST
42742: LIST
42743: LIST
42744: LIST
42745: LIST
42746: LIST
42747: LIST
42748: LIST
42749: LIST
42750: LIST
42751: LIST
42752: LIST
42753: LIST
42754: LIST
42755: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42756: LD_ADDR_VAR 0 45
42760: PUSH
42761: LD_INT 0
42763: PUSH
42764: LD_INT 0
42766: PUSH
42767: EMPTY
42768: LIST
42769: LIST
42770: PUSH
42771: LD_INT 0
42773: PUSH
42774: LD_INT 1
42776: NEG
42777: PUSH
42778: EMPTY
42779: LIST
42780: LIST
42781: PUSH
42782: LD_INT 1
42784: PUSH
42785: LD_INT 0
42787: PUSH
42788: EMPTY
42789: LIST
42790: LIST
42791: PUSH
42792: LD_INT 1
42794: PUSH
42795: LD_INT 1
42797: PUSH
42798: EMPTY
42799: LIST
42800: LIST
42801: PUSH
42802: LD_INT 0
42804: PUSH
42805: LD_INT 1
42807: PUSH
42808: EMPTY
42809: LIST
42810: LIST
42811: PUSH
42812: LD_INT 1
42814: NEG
42815: PUSH
42816: LD_INT 0
42818: PUSH
42819: EMPTY
42820: LIST
42821: LIST
42822: PUSH
42823: LD_INT 1
42825: NEG
42826: PUSH
42827: LD_INT 1
42829: NEG
42830: PUSH
42831: EMPTY
42832: LIST
42833: LIST
42834: PUSH
42835: LD_INT 1
42837: NEG
42838: PUSH
42839: LD_INT 2
42841: NEG
42842: PUSH
42843: EMPTY
42844: LIST
42845: LIST
42846: PUSH
42847: LD_INT 0
42849: PUSH
42850: LD_INT 2
42852: NEG
42853: PUSH
42854: EMPTY
42855: LIST
42856: LIST
42857: PUSH
42858: LD_INT 1
42860: PUSH
42861: LD_INT 1
42863: NEG
42864: PUSH
42865: EMPTY
42866: LIST
42867: LIST
42868: PUSH
42869: LD_INT 2
42871: PUSH
42872: LD_INT 1
42874: PUSH
42875: EMPTY
42876: LIST
42877: LIST
42878: PUSH
42879: LD_INT 2
42881: PUSH
42882: LD_INT 2
42884: PUSH
42885: EMPTY
42886: LIST
42887: LIST
42888: PUSH
42889: LD_INT 1
42891: PUSH
42892: LD_INT 2
42894: PUSH
42895: EMPTY
42896: LIST
42897: LIST
42898: PUSH
42899: LD_INT 0
42901: PUSH
42902: LD_INT 2
42904: PUSH
42905: EMPTY
42906: LIST
42907: LIST
42908: PUSH
42909: LD_INT 1
42911: NEG
42912: PUSH
42913: LD_INT 1
42915: PUSH
42916: EMPTY
42917: LIST
42918: LIST
42919: PUSH
42920: LD_INT 2
42922: NEG
42923: PUSH
42924: LD_INT 1
42926: NEG
42927: PUSH
42928: EMPTY
42929: LIST
42930: LIST
42931: PUSH
42932: LD_INT 2
42934: NEG
42935: PUSH
42936: LD_INT 2
42938: NEG
42939: PUSH
42940: EMPTY
42941: LIST
42942: LIST
42943: PUSH
42944: LD_INT 2
42946: NEG
42947: PUSH
42948: LD_INT 3
42950: NEG
42951: PUSH
42952: EMPTY
42953: LIST
42954: LIST
42955: PUSH
42956: LD_INT 1
42958: NEG
42959: PUSH
42960: LD_INT 3
42962: NEG
42963: PUSH
42964: EMPTY
42965: LIST
42966: LIST
42967: PUSH
42968: LD_INT 0
42970: PUSH
42971: LD_INT 3
42973: NEG
42974: PUSH
42975: EMPTY
42976: LIST
42977: LIST
42978: PUSH
42979: LD_INT 1
42981: PUSH
42982: LD_INT 2
42984: NEG
42985: PUSH
42986: EMPTY
42987: LIST
42988: LIST
42989: PUSH
42990: LD_INT 3
42992: PUSH
42993: LD_INT 2
42995: PUSH
42996: EMPTY
42997: LIST
42998: LIST
42999: PUSH
43000: LD_INT 3
43002: PUSH
43003: LD_INT 3
43005: PUSH
43006: EMPTY
43007: LIST
43008: LIST
43009: PUSH
43010: LD_INT 2
43012: PUSH
43013: LD_INT 3
43015: PUSH
43016: EMPTY
43017: LIST
43018: LIST
43019: PUSH
43020: LD_INT 1
43022: PUSH
43023: LD_INT 3
43025: PUSH
43026: EMPTY
43027: LIST
43028: LIST
43029: PUSH
43030: LD_INT 0
43032: PUSH
43033: LD_INT 3
43035: PUSH
43036: EMPTY
43037: LIST
43038: LIST
43039: PUSH
43040: LD_INT 1
43042: NEG
43043: PUSH
43044: LD_INT 2
43046: PUSH
43047: EMPTY
43048: LIST
43049: LIST
43050: PUSH
43051: LD_INT 3
43053: NEG
43054: PUSH
43055: LD_INT 2
43057: NEG
43058: PUSH
43059: EMPTY
43060: LIST
43061: LIST
43062: PUSH
43063: LD_INT 3
43065: NEG
43066: PUSH
43067: LD_INT 3
43069: NEG
43070: PUSH
43071: EMPTY
43072: LIST
43073: LIST
43074: PUSH
43075: EMPTY
43076: LIST
43077: LIST
43078: LIST
43079: LIST
43080: LIST
43081: LIST
43082: LIST
43083: LIST
43084: LIST
43085: LIST
43086: LIST
43087: LIST
43088: LIST
43089: LIST
43090: LIST
43091: LIST
43092: LIST
43093: LIST
43094: LIST
43095: LIST
43096: LIST
43097: LIST
43098: LIST
43099: LIST
43100: LIST
43101: LIST
43102: LIST
43103: LIST
43104: LIST
43105: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43106: LD_ADDR_VAR 0 46
43110: PUSH
43111: LD_INT 0
43113: PUSH
43114: LD_INT 0
43116: PUSH
43117: EMPTY
43118: LIST
43119: LIST
43120: PUSH
43121: LD_INT 0
43123: PUSH
43124: LD_INT 1
43126: NEG
43127: PUSH
43128: EMPTY
43129: LIST
43130: LIST
43131: PUSH
43132: LD_INT 1
43134: PUSH
43135: LD_INT 0
43137: PUSH
43138: EMPTY
43139: LIST
43140: LIST
43141: PUSH
43142: LD_INT 1
43144: PUSH
43145: LD_INT 1
43147: PUSH
43148: EMPTY
43149: LIST
43150: LIST
43151: PUSH
43152: LD_INT 0
43154: PUSH
43155: LD_INT 1
43157: PUSH
43158: EMPTY
43159: LIST
43160: LIST
43161: PUSH
43162: LD_INT 1
43164: NEG
43165: PUSH
43166: LD_INT 0
43168: PUSH
43169: EMPTY
43170: LIST
43171: LIST
43172: PUSH
43173: LD_INT 1
43175: NEG
43176: PUSH
43177: LD_INT 1
43179: NEG
43180: PUSH
43181: EMPTY
43182: LIST
43183: LIST
43184: PUSH
43185: LD_INT 1
43187: NEG
43188: PUSH
43189: LD_INT 2
43191: NEG
43192: PUSH
43193: EMPTY
43194: LIST
43195: LIST
43196: PUSH
43197: LD_INT 0
43199: PUSH
43200: LD_INT 2
43202: NEG
43203: PUSH
43204: EMPTY
43205: LIST
43206: LIST
43207: PUSH
43208: LD_INT 1
43210: PUSH
43211: LD_INT 1
43213: NEG
43214: PUSH
43215: EMPTY
43216: LIST
43217: LIST
43218: PUSH
43219: LD_INT 2
43221: PUSH
43222: LD_INT 0
43224: PUSH
43225: EMPTY
43226: LIST
43227: LIST
43228: PUSH
43229: LD_INT 2
43231: PUSH
43232: LD_INT 1
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: PUSH
43239: LD_INT 1
43241: PUSH
43242: LD_INT 2
43244: PUSH
43245: EMPTY
43246: LIST
43247: LIST
43248: PUSH
43249: LD_INT 0
43251: PUSH
43252: LD_INT 2
43254: PUSH
43255: EMPTY
43256: LIST
43257: LIST
43258: PUSH
43259: LD_INT 1
43261: NEG
43262: PUSH
43263: LD_INT 1
43265: PUSH
43266: EMPTY
43267: LIST
43268: LIST
43269: PUSH
43270: LD_INT 2
43272: NEG
43273: PUSH
43274: LD_INT 0
43276: PUSH
43277: EMPTY
43278: LIST
43279: LIST
43280: PUSH
43281: LD_INT 2
43283: NEG
43284: PUSH
43285: LD_INT 1
43287: NEG
43288: PUSH
43289: EMPTY
43290: LIST
43291: LIST
43292: PUSH
43293: LD_INT 1
43295: NEG
43296: PUSH
43297: LD_INT 3
43299: NEG
43300: PUSH
43301: EMPTY
43302: LIST
43303: LIST
43304: PUSH
43305: LD_INT 0
43307: PUSH
43308: LD_INT 3
43310: NEG
43311: PUSH
43312: EMPTY
43313: LIST
43314: LIST
43315: PUSH
43316: LD_INT 1
43318: PUSH
43319: LD_INT 2
43321: NEG
43322: PUSH
43323: EMPTY
43324: LIST
43325: LIST
43326: PUSH
43327: LD_INT 2
43329: PUSH
43330: LD_INT 1
43332: NEG
43333: PUSH
43334: EMPTY
43335: LIST
43336: LIST
43337: PUSH
43338: LD_INT 3
43340: PUSH
43341: LD_INT 0
43343: PUSH
43344: EMPTY
43345: LIST
43346: LIST
43347: PUSH
43348: LD_INT 3
43350: PUSH
43351: LD_INT 1
43353: PUSH
43354: EMPTY
43355: LIST
43356: LIST
43357: PUSH
43358: LD_INT 1
43360: PUSH
43361: LD_INT 3
43363: PUSH
43364: EMPTY
43365: LIST
43366: LIST
43367: PUSH
43368: LD_INT 0
43370: PUSH
43371: LD_INT 3
43373: PUSH
43374: EMPTY
43375: LIST
43376: LIST
43377: PUSH
43378: LD_INT 1
43380: NEG
43381: PUSH
43382: LD_INT 2
43384: PUSH
43385: EMPTY
43386: LIST
43387: LIST
43388: PUSH
43389: LD_INT 2
43391: NEG
43392: PUSH
43393: LD_INT 1
43395: PUSH
43396: EMPTY
43397: LIST
43398: LIST
43399: PUSH
43400: LD_INT 3
43402: NEG
43403: PUSH
43404: LD_INT 0
43406: PUSH
43407: EMPTY
43408: LIST
43409: LIST
43410: PUSH
43411: LD_INT 3
43413: NEG
43414: PUSH
43415: LD_INT 1
43417: NEG
43418: PUSH
43419: EMPTY
43420: LIST
43421: LIST
43422: PUSH
43423: EMPTY
43424: LIST
43425: LIST
43426: LIST
43427: LIST
43428: LIST
43429: LIST
43430: LIST
43431: LIST
43432: LIST
43433: LIST
43434: LIST
43435: LIST
43436: LIST
43437: LIST
43438: LIST
43439: LIST
43440: LIST
43441: LIST
43442: LIST
43443: LIST
43444: LIST
43445: LIST
43446: LIST
43447: LIST
43448: LIST
43449: LIST
43450: LIST
43451: LIST
43452: LIST
43453: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43454: LD_ADDR_VAR 0 47
43458: PUSH
43459: LD_INT 0
43461: PUSH
43462: LD_INT 0
43464: PUSH
43465: EMPTY
43466: LIST
43467: LIST
43468: PUSH
43469: LD_INT 0
43471: PUSH
43472: LD_INT 1
43474: NEG
43475: PUSH
43476: EMPTY
43477: LIST
43478: LIST
43479: PUSH
43480: LD_INT 1
43482: PUSH
43483: LD_INT 0
43485: PUSH
43486: EMPTY
43487: LIST
43488: LIST
43489: PUSH
43490: LD_INT 1
43492: PUSH
43493: LD_INT 1
43495: PUSH
43496: EMPTY
43497: LIST
43498: LIST
43499: PUSH
43500: LD_INT 0
43502: PUSH
43503: LD_INT 1
43505: PUSH
43506: EMPTY
43507: LIST
43508: LIST
43509: PUSH
43510: LD_INT 1
43512: NEG
43513: PUSH
43514: LD_INT 0
43516: PUSH
43517: EMPTY
43518: LIST
43519: LIST
43520: PUSH
43521: LD_INT 1
43523: NEG
43524: PUSH
43525: LD_INT 1
43527: NEG
43528: PUSH
43529: EMPTY
43530: LIST
43531: LIST
43532: PUSH
43533: LD_INT 1
43535: NEG
43536: PUSH
43537: LD_INT 2
43539: NEG
43540: PUSH
43541: EMPTY
43542: LIST
43543: LIST
43544: PUSH
43545: LD_INT 0
43547: PUSH
43548: LD_INT 2
43550: NEG
43551: PUSH
43552: EMPTY
43553: LIST
43554: LIST
43555: PUSH
43556: LD_INT 1
43558: PUSH
43559: LD_INT 1
43561: NEG
43562: PUSH
43563: EMPTY
43564: LIST
43565: LIST
43566: PUSH
43567: LD_INT 2
43569: NEG
43570: PUSH
43571: LD_INT 1
43573: NEG
43574: PUSH
43575: EMPTY
43576: LIST
43577: LIST
43578: PUSH
43579: LD_INT 2
43581: NEG
43582: PUSH
43583: LD_INT 2
43585: NEG
43586: PUSH
43587: EMPTY
43588: LIST
43589: LIST
43590: PUSH
43591: EMPTY
43592: LIST
43593: LIST
43594: LIST
43595: LIST
43596: LIST
43597: LIST
43598: LIST
43599: LIST
43600: LIST
43601: LIST
43602: LIST
43603: LIST
43604: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
43605: LD_ADDR_VAR 0 48
43609: PUSH
43610: LD_INT 0
43612: PUSH
43613: LD_INT 0
43615: PUSH
43616: EMPTY
43617: LIST
43618: LIST
43619: PUSH
43620: LD_INT 0
43622: PUSH
43623: LD_INT 1
43625: NEG
43626: PUSH
43627: EMPTY
43628: LIST
43629: LIST
43630: PUSH
43631: LD_INT 1
43633: PUSH
43634: LD_INT 0
43636: PUSH
43637: EMPTY
43638: LIST
43639: LIST
43640: PUSH
43641: LD_INT 1
43643: PUSH
43644: LD_INT 1
43646: PUSH
43647: EMPTY
43648: LIST
43649: LIST
43650: PUSH
43651: LD_INT 0
43653: PUSH
43654: LD_INT 1
43656: PUSH
43657: EMPTY
43658: LIST
43659: LIST
43660: PUSH
43661: LD_INT 1
43663: NEG
43664: PUSH
43665: LD_INT 0
43667: PUSH
43668: EMPTY
43669: LIST
43670: LIST
43671: PUSH
43672: LD_INT 1
43674: NEG
43675: PUSH
43676: LD_INT 1
43678: NEG
43679: PUSH
43680: EMPTY
43681: LIST
43682: LIST
43683: PUSH
43684: LD_INT 1
43686: NEG
43687: PUSH
43688: LD_INT 2
43690: NEG
43691: PUSH
43692: EMPTY
43693: LIST
43694: LIST
43695: PUSH
43696: LD_INT 0
43698: PUSH
43699: LD_INT 2
43701: NEG
43702: PUSH
43703: EMPTY
43704: LIST
43705: LIST
43706: PUSH
43707: LD_INT 1
43709: PUSH
43710: LD_INT 1
43712: NEG
43713: PUSH
43714: EMPTY
43715: LIST
43716: LIST
43717: PUSH
43718: LD_INT 2
43720: PUSH
43721: LD_INT 0
43723: PUSH
43724: EMPTY
43725: LIST
43726: LIST
43727: PUSH
43728: LD_INT 2
43730: PUSH
43731: LD_INT 1
43733: PUSH
43734: EMPTY
43735: LIST
43736: LIST
43737: PUSH
43738: EMPTY
43739: LIST
43740: LIST
43741: LIST
43742: LIST
43743: LIST
43744: LIST
43745: LIST
43746: LIST
43747: LIST
43748: LIST
43749: LIST
43750: LIST
43751: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
43752: LD_ADDR_VAR 0 49
43756: PUSH
43757: LD_INT 0
43759: PUSH
43760: LD_INT 0
43762: PUSH
43763: EMPTY
43764: LIST
43765: LIST
43766: PUSH
43767: LD_INT 0
43769: PUSH
43770: LD_INT 1
43772: NEG
43773: PUSH
43774: EMPTY
43775: LIST
43776: LIST
43777: PUSH
43778: LD_INT 1
43780: PUSH
43781: LD_INT 0
43783: PUSH
43784: EMPTY
43785: LIST
43786: LIST
43787: PUSH
43788: LD_INT 1
43790: PUSH
43791: LD_INT 1
43793: PUSH
43794: EMPTY
43795: LIST
43796: LIST
43797: PUSH
43798: LD_INT 0
43800: PUSH
43801: LD_INT 1
43803: PUSH
43804: EMPTY
43805: LIST
43806: LIST
43807: PUSH
43808: LD_INT 1
43810: NEG
43811: PUSH
43812: LD_INT 0
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: PUSH
43819: LD_INT 1
43821: NEG
43822: PUSH
43823: LD_INT 1
43825: NEG
43826: PUSH
43827: EMPTY
43828: LIST
43829: LIST
43830: PUSH
43831: LD_INT 1
43833: PUSH
43834: LD_INT 1
43836: NEG
43837: PUSH
43838: EMPTY
43839: LIST
43840: LIST
43841: PUSH
43842: LD_INT 2
43844: PUSH
43845: LD_INT 0
43847: PUSH
43848: EMPTY
43849: LIST
43850: LIST
43851: PUSH
43852: LD_INT 2
43854: PUSH
43855: LD_INT 1
43857: PUSH
43858: EMPTY
43859: LIST
43860: LIST
43861: PUSH
43862: LD_INT 2
43864: PUSH
43865: LD_INT 2
43867: PUSH
43868: EMPTY
43869: LIST
43870: LIST
43871: PUSH
43872: LD_INT 1
43874: PUSH
43875: LD_INT 2
43877: PUSH
43878: EMPTY
43879: LIST
43880: LIST
43881: PUSH
43882: EMPTY
43883: LIST
43884: LIST
43885: LIST
43886: LIST
43887: LIST
43888: LIST
43889: LIST
43890: LIST
43891: LIST
43892: LIST
43893: LIST
43894: LIST
43895: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
43896: LD_ADDR_VAR 0 50
43900: PUSH
43901: LD_INT 0
43903: PUSH
43904: LD_INT 0
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: PUSH
43911: LD_INT 0
43913: PUSH
43914: LD_INT 1
43916: NEG
43917: PUSH
43918: EMPTY
43919: LIST
43920: LIST
43921: PUSH
43922: LD_INT 1
43924: PUSH
43925: LD_INT 0
43927: PUSH
43928: EMPTY
43929: LIST
43930: LIST
43931: PUSH
43932: LD_INT 1
43934: PUSH
43935: LD_INT 1
43937: PUSH
43938: EMPTY
43939: LIST
43940: LIST
43941: PUSH
43942: LD_INT 0
43944: PUSH
43945: LD_INT 1
43947: PUSH
43948: EMPTY
43949: LIST
43950: LIST
43951: PUSH
43952: LD_INT 1
43954: NEG
43955: PUSH
43956: LD_INT 0
43958: PUSH
43959: EMPTY
43960: LIST
43961: LIST
43962: PUSH
43963: LD_INT 1
43965: NEG
43966: PUSH
43967: LD_INT 1
43969: NEG
43970: PUSH
43971: EMPTY
43972: LIST
43973: LIST
43974: PUSH
43975: LD_INT 2
43977: PUSH
43978: LD_INT 1
43980: PUSH
43981: EMPTY
43982: LIST
43983: LIST
43984: PUSH
43985: LD_INT 2
43987: PUSH
43988: LD_INT 2
43990: PUSH
43991: EMPTY
43992: LIST
43993: LIST
43994: PUSH
43995: LD_INT 1
43997: PUSH
43998: LD_INT 2
44000: PUSH
44001: EMPTY
44002: LIST
44003: LIST
44004: PUSH
44005: LD_INT 0
44007: PUSH
44008: LD_INT 2
44010: PUSH
44011: EMPTY
44012: LIST
44013: LIST
44014: PUSH
44015: LD_INT 1
44017: NEG
44018: PUSH
44019: LD_INT 1
44021: PUSH
44022: EMPTY
44023: LIST
44024: LIST
44025: PUSH
44026: EMPTY
44027: LIST
44028: LIST
44029: LIST
44030: LIST
44031: LIST
44032: LIST
44033: LIST
44034: LIST
44035: LIST
44036: LIST
44037: LIST
44038: LIST
44039: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44040: LD_ADDR_VAR 0 51
44044: PUSH
44045: LD_INT 0
44047: PUSH
44048: LD_INT 0
44050: PUSH
44051: EMPTY
44052: LIST
44053: LIST
44054: PUSH
44055: LD_INT 0
44057: PUSH
44058: LD_INT 1
44060: NEG
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: PUSH
44066: LD_INT 1
44068: PUSH
44069: LD_INT 0
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: PUSH
44076: LD_INT 1
44078: PUSH
44079: LD_INT 1
44081: PUSH
44082: EMPTY
44083: LIST
44084: LIST
44085: PUSH
44086: LD_INT 0
44088: PUSH
44089: LD_INT 1
44091: PUSH
44092: EMPTY
44093: LIST
44094: LIST
44095: PUSH
44096: LD_INT 1
44098: NEG
44099: PUSH
44100: LD_INT 0
44102: PUSH
44103: EMPTY
44104: LIST
44105: LIST
44106: PUSH
44107: LD_INT 1
44109: NEG
44110: PUSH
44111: LD_INT 1
44113: NEG
44114: PUSH
44115: EMPTY
44116: LIST
44117: LIST
44118: PUSH
44119: LD_INT 1
44121: PUSH
44122: LD_INT 2
44124: PUSH
44125: EMPTY
44126: LIST
44127: LIST
44128: PUSH
44129: LD_INT 0
44131: PUSH
44132: LD_INT 2
44134: PUSH
44135: EMPTY
44136: LIST
44137: LIST
44138: PUSH
44139: LD_INT 1
44141: NEG
44142: PUSH
44143: LD_INT 1
44145: PUSH
44146: EMPTY
44147: LIST
44148: LIST
44149: PUSH
44150: LD_INT 2
44152: NEG
44153: PUSH
44154: LD_INT 0
44156: PUSH
44157: EMPTY
44158: LIST
44159: LIST
44160: PUSH
44161: LD_INT 2
44163: NEG
44164: PUSH
44165: LD_INT 1
44167: NEG
44168: PUSH
44169: EMPTY
44170: LIST
44171: LIST
44172: PUSH
44173: EMPTY
44174: LIST
44175: LIST
44176: LIST
44177: LIST
44178: LIST
44179: LIST
44180: LIST
44181: LIST
44182: LIST
44183: LIST
44184: LIST
44185: LIST
44186: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44187: LD_ADDR_VAR 0 52
44191: PUSH
44192: LD_INT 0
44194: PUSH
44195: LD_INT 0
44197: PUSH
44198: EMPTY
44199: LIST
44200: LIST
44201: PUSH
44202: LD_INT 0
44204: PUSH
44205: LD_INT 1
44207: NEG
44208: PUSH
44209: EMPTY
44210: LIST
44211: LIST
44212: PUSH
44213: LD_INT 1
44215: PUSH
44216: LD_INT 0
44218: PUSH
44219: EMPTY
44220: LIST
44221: LIST
44222: PUSH
44223: LD_INT 1
44225: PUSH
44226: LD_INT 1
44228: PUSH
44229: EMPTY
44230: LIST
44231: LIST
44232: PUSH
44233: LD_INT 0
44235: PUSH
44236: LD_INT 1
44238: PUSH
44239: EMPTY
44240: LIST
44241: LIST
44242: PUSH
44243: LD_INT 1
44245: NEG
44246: PUSH
44247: LD_INT 0
44249: PUSH
44250: EMPTY
44251: LIST
44252: LIST
44253: PUSH
44254: LD_INT 1
44256: NEG
44257: PUSH
44258: LD_INT 1
44260: NEG
44261: PUSH
44262: EMPTY
44263: LIST
44264: LIST
44265: PUSH
44266: LD_INT 1
44268: NEG
44269: PUSH
44270: LD_INT 2
44272: NEG
44273: PUSH
44274: EMPTY
44275: LIST
44276: LIST
44277: PUSH
44278: LD_INT 1
44280: NEG
44281: PUSH
44282: LD_INT 1
44284: PUSH
44285: EMPTY
44286: LIST
44287: LIST
44288: PUSH
44289: LD_INT 2
44291: NEG
44292: PUSH
44293: LD_INT 0
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: PUSH
44300: LD_INT 2
44302: NEG
44303: PUSH
44304: LD_INT 1
44306: NEG
44307: PUSH
44308: EMPTY
44309: LIST
44310: LIST
44311: PUSH
44312: LD_INT 2
44314: NEG
44315: PUSH
44316: LD_INT 2
44318: NEG
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: PUSH
44324: EMPTY
44325: LIST
44326: LIST
44327: LIST
44328: LIST
44329: LIST
44330: LIST
44331: LIST
44332: LIST
44333: LIST
44334: LIST
44335: LIST
44336: LIST
44337: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44338: LD_ADDR_VAR 0 53
44342: PUSH
44343: LD_INT 0
44345: PUSH
44346: LD_INT 0
44348: PUSH
44349: EMPTY
44350: LIST
44351: LIST
44352: PUSH
44353: LD_INT 0
44355: PUSH
44356: LD_INT 1
44358: NEG
44359: PUSH
44360: EMPTY
44361: LIST
44362: LIST
44363: PUSH
44364: LD_INT 1
44366: PUSH
44367: LD_INT 0
44369: PUSH
44370: EMPTY
44371: LIST
44372: LIST
44373: PUSH
44374: LD_INT 1
44376: PUSH
44377: LD_INT 1
44379: PUSH
44380: EMPTY
44381: LIST
44382: LIST
44383: PUSH
44384: LD_INT 0
44386: PUSH
44387: LD_INT 1
44389: PUSH
44390: EMPTY
44391: LIST
44392: LIST
44393: PUSH
44394: LD_INT 1
44396: NEG
44397: PUSH
44398: LD_INT 0
44400: PUSH
44401: EMPTY
44402: LIST
44403: LIST
44404: PUSH
44405: LD_INT 1
44407: NEG
44408: PUSH
44409: LD_INT 1
44411: NEG
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: PUSH
44417: LD_INT 1
44419: NEG
44420: PUSH
44421: LD_INT 2
44423: NEG
44424: PUSH
44425: EMPTY
44426: LIST
44427: LIST
44428: PUSH
44429: LD_INT 0
44431: PUSH
44432: LD_INT 2
44434: NEG
44435: PUSH
44436: EMPTY
44437: LIST
44438: LIST
44439: PUSH
44440: LD_INT 1
44442: PUSH
44443: LD_INT 1
44445: NEG
44446: PUSH
44447: EMPTY
44448: LIST
44449: LIST
44450: PUSH
44451: LD_INT 2
44453: PUSH
44454: LD_INT 0
44456: PUSH
44457: EMPTY
44458: LIST
44459: LIST
44460: PUSH
44461: LD_INT 2
44463: PUSH
44464: LD_INT 1
44466: PUSH
44467: EMPTY
44468: LIST
44469: LIST
44470: PUSH
44471: LD_INT 2
44473: PUSH
44474: LD_INT 2
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: PUSH
44481: LD_INT 1
44483: PUSH
44484: LD_INT 2
44486: PUSH
44487: EMPTY
44488: LIST
44489: LIST
44490: PUSH
44491: LD_INT 0
44493: PUSH
44494: LD_INT 2
44496: PUSH
44497: EMPTY
44498: LIST
44499: LIST
44500: PUSH
44501: LD_INT 1
44503: NEG
44504: PUSH
44505: LD_INT 1
44507: PUSH
44508: EMPTY
44509: LIST
44510: LIST
44511: PUSH
44512: LD_INT 2
44514: NEG
44515: PUSH
44516: LD_INT 0
44518: PUSH
44519: EMPTY
44520: LIST
44521: LIST
44522: PUSH
44523: LD_INT 2
44525: NEG
44526: PUSH
44527: LD_INT 1
44529: NEG
44530: PUSH
44531: EMPTY
44532: LIST
44533: LIST
44534: PUSH
44535: LD_INT 2
44537: NEG
44538: PUSH
44539: LD_INT 2
44541: NEG
44542: PUSH
44543: EMPTY
44544: LIST
44545: LIST
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: LIST
44551: LIST
44552: LIST
44553: LIST
44554: LIST
44555: LIST
44556: LIST
44557: LIST
44558: LIST
44559: LIST
44560: LIST
44561: LIST
44562: LIST
44563: LIST
44564: LIST
44565: LIST
44566: LIST
44567: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44568: LD_ADDR_VAR 0 54
44572: PUSH
44573: LD_INT 0
44575: PUSH
44576: LD_INT 0
44578: PUSH
44579: EMPTY
44580: LIST
44581: LIST
44582: PUSH
44583: LD_INT 0
44585: PUSH
44586: LD_INT 1
44588: NEG
44589: PUSH
44590: EMPTY
44591: LIST
44592: LIST
44593: PUSH
44594: LD_INT 1
44596: PUSH
44597: LD_INT 0
44599: PUSH
44600: EMPTY
44601: LIST
44602: LIST
44603: PUSH
44604: LD_INT 1
44606: PUSH
44607: LD_INT 1
44609: PUSH
44610: EMPTY
44611: LIST
44612: LIST
44613: PUSH
44614: LD_INT 0
44616: PUSH
44617: LD_INT 1
44619: PUSH
44620: EMPTY
44621: LIST
44622: LIST
44623: PUSH
44624: LD_INT 1
44626: NEG
44627: PUSH
44628: LD_INT 0
44630: PUSH
44631: EMPTY
44632: LIST
44633: LIST
44634: PUSH
44635: LD_INT 1
44637: NEG
44638: PUSH
44639: LD_INT 1
44641: NEG
44642: PUSH
44643: EMPTY
44644: LIST
44645: LIST
44646: PUSH
44647: LD_INT 1
44649: NEG
44650: PUSH
44651: LD_INT 2
44653: NEG
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: PUSH
44659: LD_INT 0
44661: PUSH
44662: LD_INT 2
44664: NEG
44665: PUSH
44666: EMPTY
44667: LIST
44668: LIST
44669: PUSH
44670: LD_INT 1
44672: PUSH
44673: LD_INT 1
44675: NEG
44676: PUSH
44677: EMPTY
44678: LIST
44679: LIST
44680: PUSH
44681: LD_INT 2
44683: PUSH
44684: LD_INT 0
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: PUSH
44691: LD_INT 2
44693: PUSH
44694: LD_INT 1
44696: PUSH
44697: EMPTY
44698: LIST
44699: LIST
44700: PUSH
44701: LD_INT 2
44703: PUSH
44704: LD_INT 2
44706: PUSH
44707: EMPTY
44708: LIST
44709: LIST
44710: PUSH
44711: LD_INT 1
44713: PUSH
44714: LD_INT 2
44716: PUSH
44717: EMPTY
44718: LIST
44719: LIST
44720: PUSH
44721: LD_INT 0
44723: PUSH
44724: LD_INT 2
44726: PUSH
44727: EMPTY
44728: LIST
44729: LIST
44730: PUSH
44731: LD_INT 1
44733: NEG
44734: PUSH
44735: LD_INT 1
44737: PUSH
44738: EMPTY
44739: LIST
44740: LIST
44741: PUSH
44742: LD_INT 2
44744: NEG
44745: PUSH
44746: LD_INT 0
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: PUSH
44753: LD_INT 2
44755: NEG
44756: PUSH
44757: LD_INT 1
44759: NEG
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: PUSH
44765: LD_INT 2
44767: NEG
44768: PUSH
44769: LD_INT 2
44771: NEG
44772: PUSH
44773: EMPTY
44774: LIST
44775: LIST
44776: PUSH
44777: EMPTY
44778: LIST
44779: LIST
44780: LIST
44781: LIST
44782: LIST
44783: LIST
44784: LIST
44785: LIST
44786: LIST
44787: LIST
44788: LIST
44789: LIST
44790: LIST
44791: LIST
44792: LIST
44793: LIST
44794: LIST
44795: LIST
44796: LIST
44797: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44798: LD_ADDR_VAR 0 55
44802: PUSH
44803: LD_INT 0
44805: PUSH
44806: LD_INT 0
44808: PUSH
44809: EMPTY
44810: LIST
44811: LIST
44812: PUSH
44813: LD_INT 0
44815: PUSH
44816: LD_INT 1
44818: NEG
44819: PUSH
44820: EMPTY
44821: LIST
44822: LIST
44823: PUSH
44824: LD_INT 1
44826: PUSH
44827: LD_INT 0
44829: PUSH
44830: EMPTY
44831: LIST
44832: LIST
44833: PUSH
44834: LD_INT 1
44836: PUSH
44837: LD_INT 1
44839: PUSH
44840: EMPTY
44841: LIST
44842: LIST
44843: PUSH
44844: LD_INT 0
44846: PUSH
44847: LD_INT 1
44849: PUSH
44850: EMPTY
44851: LIST
44852: LIST
44853: PUSH
44854: LD_INT 1
44856: NEG
44857: PUSH
44858: LD_INT 0
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: PUSH
44865: LD_INT 1
44867: NEG
44868: PUSH
44869: LD_INT 1
44871: NEG
44872: PUSH
44873: EMPTY
44874: LIST
44875: LIST
44876: PUSH
44877: LD_INT 1
44879: NEG
44880: PUSH
44881: LD_INT 2
44883: NEG
44884: PUSH
44885: EMPTY
44886: LIST
44887: LIST
44888: PUSH
44889: LD_INT 0
44891: PUSH
44892: LD_INT 2
44894: NEG
44895: PUSH
44896: EMPTY
44897: LIST
44898: LIST
44899: PUSH
44900: LD_INT 1
44902: PUSH
44903: LD_INT 1
44905: NEG
44906: PUSH
44907: EMPTY
44908: LIST
44909: LIST
44910: PUSH
44911: LD_INT 2
44913: PUSH
44914: LD_INT 0
44916: PUSH
44917: EMPTY
44918: LIST
44919: LIST
44920: PUSH
44921: LD_INT 2
44923: PUSH
44924: LD_INT 1
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: PUSH
44931: LD_INT 2
44933: PUSH
44934: LD_INT 2
44936: PUSH
44937: EMPTY
44938: LIST
44939: LIST
44940: PUSH
44941: LD_INT 1
44943: PUSH
44944: LD_INT 2
44946: PUSH
44947: EMPTY
44948: LIST
44949: LIST
44950: PUSH
44951: LD_INT 0
44953: PUSH
44954: LD_INT 2
44956: PUSH
44957: EMPTY
44958: LIST
44959: LIST
44960: PUSH
44961: LD_INT 1
44963: NEG
44964: PUSH
44965: LD_INT 1
44967: PUSH
44968: EMPTY
44969: LIST
44970: LIST
44971: PUSH
44972: LD_INT 2
44974: NEG
44975: PUSH
44976: LD_INT 0
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: PUSH
44983: LD_INT 2
44985: NEG
44986: PUSH
44987: LD_INT 1
44989: NEG
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: PUSH
44995: LD_INT 2
44997: NEG
44998: PUSH
44999: LD_INT 2
45001: NEG
45002: PUSH
45003: EMPTY
45004: LIST
45005: LIST
45006: PUSH
45007: EMPTY
45008: LIST
45009: LIST
45010: LIST
45011: LIST
45012: LIST
45013: LIST
45014: LIST
45015: LIST
45016: LIST
45017: LIST
45018: LIST
45019: LIST
45020: LIST
45021: LIST
45022: LIST
45023: LIST
45024: LIST
45025: LIST
45026: LIST
45027: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45028: LD_ADDR_VAR 0 56
45032: PUSH
45033: LD_INT 0
45035: PUSH
45036: LD_INT 0
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: PUSH
45043: LD_INT 0
45045: PUSH
45046: LD_INT 1
45048: NEG
45049: PUSH
45050: EMPTY
45051: LIST
45052: LIST
45053: PUSH
45054: LD_INT 1
45056: PUSH
45057: LD_INT 0
45059: PUSH
45060: EMPTY
45061: LIST
45062: LIST
45063: PUSH
45064: LD_INT 1
45066: PUSH
45067: LD_INT 1
45069: PUSH
45070: EMPTY
45071: LIST
45072: LIST
45073: PUSH
45074: LD_INT 0
45076: PUSH
45077: LD_INT 1
45079: PUSH
45080: EMPTY
45081: LIST
45082: LIST
45083: PUSH
45084: LD_INT 1
45086: NEG
45087: PUSH
45088: LD_INT 0
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: PUSH
45095: LD_INT 1
45097: NEG
45098: PUSH
45099: LD_INT 1
45101: NEG
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: PUSH
45107: LD_INT 1
45109: NEG
45110: PUSH
45111: LD_INT 2
45113: NEG
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: PUSH
45119: LD_INT 0
45121: PUSH
45122: LD_INT 2
45124: NEG
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: PUSH
45130: LD_INT 1
45132: PUSH
45133: LD_INT 1
45135: NEG
45136: PUSH
45137: EMPTY
45138: LIST
45139: LIST
45140: PUSH
45141: LD_INT 2
45143: PUSH
45144: LD_INT 0
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: PUSH
45151: LD_INT 2
45153: PUSH
45154: LD_INT 1
45156: PUSH
45157: EMPTY
45158: LIST
45159: LIST
45160: PUSH
45161: LD_INT 2
45163: PUSH
45164: LD_INT 2
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: PUSH
45171: LD_INT 1
45173: PUSH
45174: LD_INT 2
45176: PUSH
45177: EMPTY
45178: LIST
45179: LIST
45180: PUSH
45181: LD_INT 0
45183: PUSH
45184: LD_INT 2
45186: PUSH
45187: EMPTY
45188: LIST
45189: LIST
45190: PUSH
45191: LD_INT 1
45193: NEG
45194: PUSH
45195: LD_INT 1
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: PUSH
45202: LD_INT 2
45204: NEG
45205: PUSH
45206: LD_INT 0
45208: PUSH
45209: EMPTY
45210: LIST
45211: LIST
45212: PUSH
45213: LD_INT 2
45215: NEG
45216: PUSH
45217: LD_INT 1
45219: NEG
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: PUSH
45225: LD_INT 2
45227: NEG
45228: PUSH
45229: LD_INT 2
45231: NEG
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: PUSH
45237: EMPTY
45238: LIST
45239: LIST
45240: LIST
45241: LIST
45242: LIST
45243: LIST
45244: LIST
45245: LIST
45246: LIST
45247: LIST
45248: LIST
45249: LIST
45250: LIST
45251: LIST
45252: LIST
45253: LIST
45254: LIST
45255: LIST
45256: LIST
45257: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45258: LD_ADDR_VAR 0 57
45262: PUSH
45263: LD_INT 0
45265: PUSH
45266: LD_INT 0
45268: PUSH
45269: EMPTY
45270: LIST
45271: LIST
45272: PUSH
45273: LD_INT 0
45275: PUSH
45276: LD_INT 1
45278: NEG
45279: PUSH
45280: EMPTY
45281: LIST
45282: LIST
45283: PUSH
45284: LD_INT 1
45286: PUSH
45287: LD_INT 0
45289: PUSH
45290: EMPTY
45291: LIST
45292: LIST
45293: PUSH
45294: LD_INT 1
45296: PUSH
45297: LD_INT 1
45299: PUSH
45300: EMPTY
45301: LIST
45302: LIST
45303: PUSH
45304: LD_INT 0
45306: PUSH
45307: LD_INT 1
45309: PUSH
45310: EMPTY
45311: LIST
45312: LIST
45313: PUSH
45314: LD_INT 1
45316: NEG
45317: PUSH
45318: LD_INT 0
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: PUSH
45325: LD_INT 1
45327: NEG
45328: PUSH
45329: LD_INT 1
45331: NEG
45332: PUSH
45333: EMPTY
45334: LIST
45335: LIST
45336: PUSH
45337: LD_INT 1
45339: NEG
45340: PUSH
45341: LD_INT 2
45343: NEG
45344: PUSH
45345: EMPTY
45346: LIST
45347: LIST
45348: PUSH
45349: LD_INT 0
45351: PUSH
45352: LD_INT 2
45354: NEG
45355: PUSH
45356: EMPTY
45357: LIST
45358: LIST
45359: PUSH
45360: LD_INT 1
45362: PUSH
45363: LD_INT 1
45365: NEG
45366: PUSH
45367: EMPTY
45368: LIST
45369: LIST
45370: PUSH
45371: LD_INT 2
45373: PUSH
45374: LD_INT 0
45376: PUSH
45377: EMPTY
45378: LIST
45379: LIST
45380: PUSH
45381: LD_INT 2
45383: PUSH
45384: LD_INT 1
45386: PUSH
45387: EMPTY
45388: LIST
45389: LIST
45390: PUSH
45391: LD_INT 2
45393: PUSH
45394: LD_INT 2
45396: PUSH
45397: EMPTY
45398: LIST
45399: LIST
45400: PUSH
45401: LD_INT 1
45403: PUSH
45404: LD_INT 2
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: PUSH
45411: LD_INT 0
45413: PUSH
45414: LD_INT 2
45416: PUSH
45417: EMPTY
45418: LIST
45419: LIST
45420: PUSH
45421: LD_INT 1
45423: NEG
45424: PUSH
45425: LD_INT 1
45427: PUSH
45428: EMPTY
45429: LIST
45430: LIST
45431: PUSH
45432: LD_INT 2
45434: NEG
45435: PUSH
45436: LD_INT 0
45438: PUSH
45439: EMPTY
45440: LIST
45441: LIST
45442: PUSH
45443: LD_INT 2
45445: NEG
45446: PUSH
45447: LD_INT 1
45449: NEG
45450: PUSH
45451: EMPTY
45452: LIST
45453: LIST
45454: PUSH
45455: LD_INT 2
45457: NEG
45458: PUSH
45459: LD_INT 2
45461: NEG
45462: PUSH
45463: EMPTY
45464: LIST
45465: LIST
45466: PUSH
45467: EMPTY
45468: LIST
45469: LIST
45470: LIST
45471: LIST
45472: LIST
45473: LIST
45474: LIST
45475: LIST
45476: LIST
45477: LIST
45478: LIST
45479: LIST
45480: LIST
45481: LIST
45482: LIST
45483: LIST
45484: LIST
45485: LIST
45486: LIST
45487: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45488: LD_ADDR_VAR 0 58
45492: PUSH
45493: LD_INT 0
45495: PUSH
45496: LD_INT 0
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: PUSH
45503: LD_INT 0
45505: PUSH
45506: LD_INT 1
45508: NEG
45509: PUSH
45510: EMPTY
45511: LIST
45512: LIST
45513: PUSH
45514: LD_INT 1
45516: PUSH
45517: LD_INT 0
45519: PUSH
45520: EMPTY
45521: LIST
45522: LIST
45523: PUSH
45524: LD_INT 1
45526: PUSH
45527: LD_INT 1
45529: PUSH
45530: EMPTY
45531: LIST
45532: LIST
45533: PUSH
45534: LD_INT 0
45536: PUSH
45537: LD_INT 1
45539: PUSH
45540: EMPTY
45541: LIST
45542: LIST
45543: PUSH
45544: LD_INT 1
45546: NEG
45547: PUSH
45548: LD_INT 0
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: PUSH
45555: LD_INT 1
45557: NEG
45558: PUSH
45559: LD_INT 1
45561: NEG
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: PUSH
45567: LD_INT 1
45569: NEG
45570: PUSH
45571: LD_INT 2
45573: NEG
45574: PUSH
45575: EMPTY
45576: LIST
45577: LIST
45578: PUSH
45579: LD_INT 0
45581: PUSH
45582: LD_INT 2
45584: NEG
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: PUSH
45590: LD_INT 1
45592: PUSH
45593: LD_INT 1
45595: NEG
45596: PUSH
45597: EMPTY
45598: LIST
45599: LIST
45600: PUSH
45601: LD_INT 2
45603: PUSH
45604: LD_INT 0
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: PUSH
45611: LD_INT 2
45613: PUSH
45614: LD_INT 1
45616: PUSH
45617: EMPTY
45618: LIST
45619: LIST
45620: PUSH
45621: LD_INT 2
45623: PUSH
45624: LD_INT 2
45626: PUSH
45627: EMPTY
45628: LIST
45629: LIST
45630: PUSH
45631: LD_INT 1
45633: PUSH
45634: LD_INT 2
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: PUSH
45641: LD_INT 0
45643: PUSH
45644: LD_INT 2
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: PUSH
45651: LD_INT 1
45653: NEG
45654: PUSH
45655: LD_INT 1
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: PUSH
45662: LD_INT 2
45664: NEG
45665: PUSH
45666: LD_INT 0
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: PUSH
45673: LD_INT 2
45675: NEG
45676: PUSH
45677: LD_INT 1
45679: NEG
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: PUSH
45685: LD_INT 2
45687: NEG
45688: PUSH
45689: LD_INT 2
45691: NEG
45692: PUSH
45693: EMPTY
45694: LIST
45695: LIST
45696: PUSH
45697: EMPTY
45698: LIST
45699: LIST
45700: LIST
45701: LIST
45702: LIST
45703: LIST
45704: LIST
45705: LIST
45706: LIST
45707: LIST
45708: LIST
45709: LIST
45710: LIST
45711: LIST
45712: LIST
45713: LIST
45714: LIST
45715: LIST
45716: LIST
45717: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45718: LD_ADDR_VAR 0 59
45722: PUSH
45723: LD_INT 0
45725: PUSH
45726: LD_INT 0
45728: PUSH
45729: EMPTY
45730: LIST
45731: LIST
45732: PUSH
45733: LD_INT 0
45735: PUSH
45736: LD_INT 1
45738: NEG
45739: PUSH
45740: EMPTY
45741: LIST
45742: LIST
45743: PUSH
45744: LD_INT 1
45746: PUSH
45747: LD_INT 0
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: PUSH
45754: LD_INT 1
45756: PUSH
45757: LD_INT 1
45759: PUSH
45760: EMPTY
45761: LIST
45762: LIST
45763: PUSH
45764: LD_INT 0
45766: PUSH
45767: LD_INT 1
45769: PUSH
45770: EMPTY
45771: LIST
45772: LIST
45773: PUSH
45774: LD_INT 1
45776: NEG
45777: PUSH
45778: LD_INT 0
45780: PUSH
45781: EMPTY
45782: LIST
45783: LIST
45784: PUSH
45785: LD_INT 1
45787: NEG
45788: PUSH
45789: LD_INT 1
45791: NEG
45792: PUSH
45793: EMPTY
45794: LIST
45795: LIST
45796: PUSH
45797: EMPTY
45798: LIST
45799: LIST
45800: LIST
45801: LIST
45802: LIST
45803: LIST
45804: LIST
45805: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45806: LD_ADDR_VAR 0 60
45810: PUSH
45811: LD_INT 0
45813: PUSH
45814: LD_INT 0
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: PUSH
45821: LD_INT 0
45823: PUSH
45824: LD_INT 1
45826: NEG
45827: PUSH
45828: EMPTY
45829: LIST
45830: LIST
45831: PUSH
45832: LD_INT 1
45834: PUSH
45835: LD_INT 0
45837: PUSH
45838: EMPTY
45839: LIST
45840: LIST
45841: PUSH
45842: LD_INT 1
45844: PUSH
45845: LD_INT 1
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: PUSH
45852: LD_INT 0
45854: PUSH
45855: LD_INT 1
45857: PUSH
45858: EMPTY
45859: LIST
45860: LIST
45861: PUSH
45862: LD_INT 1
45864: NEG
45865: PUSH
45866: LD_INT 0
45868: PUSH
45869: EMPTY
45870: LIST
45871: LIST
45872: PUSH
45873: LD_INT 1
45875: NEG
45876: PUSH
45877: LD_INT 1
45879: NEG
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: PUSH
45885: EMPTY
45886: LIST
45887: LIST
45888: LIST
45889: LIST
45890: LIST
45891: LIST
45892: LIST
45893: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45894: LD_ADDR_VAR 0 61
45898: PUSH
45899: LD_INT 0
45901: PUSH
45902: LD_INT 0
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: PUSH
45909: LD_INT 0
45911: PUSH
45912: LD_INT 1
45914: NEG
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: PUSH
45920: LD_INT 1
45922: PUSH
45923: LD_INT 0
45925: PUSH
45926: EMPTY
45927: LIST
45928: LIST
45929: PUSH
45930: LD_INT 1
45932: PUSH
45933: LD_INT 1
45935: PUSH
45936: EMPTY
45937: LIST
45938: LIST
45939: PUSH
45940: LD_INT 0
45942: PUSH
45943: LD_INT 1
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: PUSH
45950: LD_INT 1
45952: NEG
45953: PUSH
45954: LD_INT 0
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: PUSH
45961: LD_INT 1
45963: NEG
45964: PUSH
45965: LD_INT 1
45967: NEG
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: LIST
45977: LIST
45978: LIST
45979: LIST
45980: LIST
45981: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45982: LD_ADDR_VAR 0 62
45986: PUSH
45987: LD_INT 0
45989: PUSH
45990: LD_INT 0
45992: PUSH
45993: EMPTY
45994: LIST
45995: LIST
45996: PUSH
45997: LD_INT 0
45999: PUSH
46000: LD_INT 1
46002: NEG
46003: PUSH
46004: EMPTY
46005: LIST
46006: LIST
46007: PUSH
46008: LD_INT 1
46010: PUSH
46011: LD_INT 0
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: LD_INT 1
46020: PUSH
46021: LD_INT 1
46023: PUSH
46024: EMPTY
46025: LIST
46026: LIST
46027: PUSH
46028: LD_INT 0
46030: PUSH
46031: LD_INT 1
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: PUSH
46038: LD_INT 1
46040: NEG
46041: PUSH
46042: LD_INT 0
46044: PUSH
46045: EMPTY
46046: LIST
46047: LIST
46048: PUSH
46049: LD_INT 1
46051: NEG
46052: PUSH
46053: LD_INT 1
46055: NEG
46056: PUSH
46057: EMPTY
46058: LIST
46059: LIST
46060: PUSH
46061: EMPTY
46062: LIST
46063: LIST
46064: LIST
46065: LIST
46066: LIST
46067: LIST
46068: LIST
46069: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46070: LD_ADDR_VAR 0 63
46074: PUSH
46075: LD_INT 0
46077: PUSH
46078: LD_INT 0
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: PUSH
46085: LD_INT 0
46087: PUSH
46088: LD_INT 1
46090: NEG
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 1
46098: PUSH
46099: LD_INT 0
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: PUSH
46106: LD_INT 1
46108: PUSH
46109: LD_INT 1
46111: PUSH
46112: EMPTY
46113: LIST
46114: LIST
46115: PUSH
46116: LD_INT 0
46118: PUSH
46119: LD_INT 1
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: PUSH
46126: LD_INT 1
46128: NEG
46129: PUSH
46130: LD_INT 0
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: PUSH
46137: LD_INT 1
46139: NEG
46140: PUSH
46141: LD_INT 1
46143: NEG
46144: PUSH
46145: EMPTY
46146: LIST
46147: LIST
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: LIST
46153: LIST
46154: LIST
46155: LIST
46156: LIST
46157: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46158: LD_ADDR_VAR 0 64
46162: PUSH
46163: LD_INT 0
46165: PUSH
46166: LD_INT 0
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: PUSH
46173: LD_INT 0
46175: PUSH
46176: LD_INT 1
46178: NEG
46179: PUSH
46180: EMPTY
46181: LIST
46182: LIST
46183: PUSH
46184: LD_INT 1
46186: PUSH
46187: LD_INT 0
46189: PUSH
46190: EMPTY
46191: LIST
46192: LIST
46193: PUSH
46194: LD_INT 1
46196: PUSH
46197: LD_INT 1
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: PUSH
46204: LD_INT 0
46206: PUSH
46207: LD_INT 1
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: PUSH
46214: LD_INT 1
46216: NEG
46217: PUSH
46218: LD_INT 0
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: PUSH
46225: LD_INT 1
46227: NEG
46228: PUSH
46229: LD_INT 1
46231: NEG
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: PUSH
46237: EMPTY
46238: LIST
46239: LIST
46240: LIST
46241: LIST
46242: LIST
46243: LIST
46244: LIST
46245: ST_TO_ADDR
// end ; 1 :
46246: GO 52143
46248: LD_INT 1
46250: DOUBLE
46251: EQUAL
46252: IFTRUE 46256
46254: GO 48879
46256: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46257: LD_ADDR_VAR 0 11
46261: PUSH
46262: LD_INT 1
46264: NEG
46265: PUSH
46266: LD_INT 3
46268: NEG
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: PUSH
46274: LD_INT 0
46276: PUSH
46277: LD_INT 3
46279: NEG
46280: PUSH
46281: EMPTY
46282: LIST
46283: LIST
46284: PUSH
46285: LD_INT 1
46287: PUSH
46288: LD_INT 2
46290: NEG
46291: PUSH
46292: EMPTY
46293: LIST
46294: LIST
46295: PUSH
46296: EMPTY
46297: LIST
46298: LIST
46299: LIST
46300: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46301: LD_ADDR_VAR 0 12
46305: PUSH
46306: LD_INT 2
46308: PUSH
46309: LD_INT 1
46311: NEG
46312: PUSH
46313: EMPTY
46314: LIST
46315: LIST
46316: PUSH
46317: LD_INT 3
46319: PUSH
46320: LD_INT 0
46322: PUSH
46323: EMPTY
46324: LIST
46325: LIST
46326: PUSH
46327: LD_INT 3
46329: PUSH
46330: LD_INT 1
46332: PUSH
46333: EMPTY
46334: LIST
46335: LIST
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: LIST
46341: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46342: LD_ADDR_VAR 0 13
46346: PUSH
46347: LD_INT 3
46349: PUSH
46350: LD_INT 2
46352: PUSH
46353: EMPTY
46354: LIST
46355: LIST
46356: PUSH
46357: LD_INT 3
46359: PUSH
46360: LD_INT 3
46362: PUSH
46363: EMPTY
46364: LIST
46365: LIST
46366: PUSH
46367: LD_INT 2
46369: PUSH
46370: LD_INT 3
46372: PUSH
46373: EMPTY
46374: LIST
46375: LIST
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: LIST
46381: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46382: LD_ADDR_VAR 0 14
46386: PUSH
46387: LD_INT 1
46389: PUSH
46390: LD_INT 3
46392: PUSH
46393: EMPTY
46394: LIST
46395: LIST
46396: PUSH
46397: LD_INT 0
46399: PUSH
46400: LD_INT 3
46402: PUSH
46403: EMPTY
46404: LIST
46405: LIST
46406: PUSH
46407: LD_INT 1
46409: NEG
46410: PUSH
46411: LD_INT 2
46413: PUSH
46414: EMPTY
46415: LIST
46416: LIST
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: LIST
46422: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46423: LD_ADDR_VAR 0 15
46427: PUSH
46428: LD_INT 2
46430: NEG
46431: PUSH
46432: LD_INT 1
46434: PUSH
46435: EMPTY
46436: LIST
46437: LIST
46438: PUSH
46439: LD_INT 3
46441: NEG
46442: PUSH
46443: LD_INT 0
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: PUSH
46450: LD_INT 3
46452: NEG
46453: PUSH
46454: LD_INT 1
46456: NEG
46457: PUSH
46458: EMPTY
46459: LIST
46460: LIST
46461: PUSH
46462: EMPTY
46463: LIST
46464: LIST
46465: LIST
46466: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46467: LD_ADDR_VAR 0 16
46471: PUSH
46472: LD_INT 2
46474: NEG
46475: PUSH
46476: LD_INT 3
46478: NEG
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: PUSH
46484: LD_INT 3
46486: NEG
46487: PUSH
46488: LD_INT 2
46490: NEG
46491: PUSH
46492: EMPTY
46493: LIST
46494: LIST
46495: PUSH
46496: LD_INT 3
46498: NEG
46499: PUSH
46500: LD_INT 3
46502: NEG
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: PUSH
46508: EMPTY
46509: LIST
46510: LIST
46511: LIST
46512: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46513: LD_ADDR_VAR 0 17
46517: PUSH
46518: LD_INT 1
46520: NEG
46521: PUSH
46522: LD_INT 3
46524: NEG
46525: PUSH
46526: EMPTY
46527: LIST
46528: LIST
46529: PUSH
46530: LD_INT 0
46532: PUSH
46533: LD_INT 3
46535: NEG
46536: PUSH
46537: EMPTY
46538: LIST
46539: LIST
46540: PUSH
46541: LD_INT 1
46543: PUSH
46544: LD_INT 2
46546: NEG
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: LIST
46556: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46557: LD_ADDR_VAR 0 18
46561: PUSH
46562: LD_INT 2
46564: PUSH
46565: LD_INT 1
46567: NEG
46568: PUSH
46569: EMPTY
46570: LIST
46571: LIST
46572: PUSH
46573: LD_INT 3
46575: PUSH
46576: LD_INT 0
46578: PUSH
46579: EMPTY
46580: LIST
46581: LIST
46582: PUSH
46583: LD_INT 3
46585: PUSH
46586: LD_INT 1
46588: PUSH
46589: EMPTY
46590: LIST
46591: LIST
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: LIST
46597: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46598: LD_ADDR_VAR 0 19
46602: PUSH
46603: LD_INT 3
46605: PUSH
46606: LD_INT 2
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: PUSH
46613: LD_INT 3
46615: PUSH
46616: LD_INT 3
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: LD_INT 2
46625: PUSH
46626: LD_INT 3
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: LIST
46637: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46638: LD_ADDR_VAR 0 20
46642: PUSH
46643: LD_INT 1
46645: PUSH
46646: LD_INT 3
46648: PUSH
46649: EMPTY
46650: LIST
46651: LIST
46652: PUSH
46653: LD_INT 0
46655: PUSH
46656: LD_INT 3
46658: PUSH
46659: EMPTY
46660: LIST
46661: LIST
46662: PUSH
46663: LD_INT 1
46665: NEG
46666: PUSH
46667: LD_INT 2
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: LIST
46678: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46679: LD_ADDR_VAR 0 21
46683: PUSH
46684: LD_INT 2
46686: NEG
46687: PUSH
46688: LD_INT 1
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: PUSH
46695: LD_INT 3
46697: NEG
46698: PUSH
46699: LD_INT 0
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: PUSH
46706: LD_INT 3
46708: NEG
46709: PUSH
46710: LD_INT 1
46712: NEG
46713: PUSH
46714: EMPTY
46715: LIST
46716: LIST
46717: PUSH
46718: EMPTY
46719: LIST
46720: LIST
46721: LIST
46722: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46723: LD_ADDR_VAR 0 22
46727: PUSH
46728: LD_INT 2
46730: NEG
46731: PUSH
46732: LD_INT 3
46734: NEG
46735: PUSH
46736: EMPTY
46737: LIST
46738: LIST
46739: PUSH
46740: LD_INT 3
46742: NEG
46743: PUSH
46744: LD_INT 2
46746: NEG
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: PUSH
46752: LD_INT 3
46754: NEG
46755: PUSH
46756: LD_INT 3
46758: NEG
46759: PUSH
46760: EMPTY
46761: LIST
46762: LIST
46763: PUSH
46764: EMPTY
46765: LIST
46766: LIST
46767: LIST
46768: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
46769: LD_ADDR_VAR 0 23
46773: PUSH
46774: LD_INT 0
46776: PUSH
46777: LD_INT 3
46779: NEG
46780: PUSH
46781: EMPTY
46782: LIST
46783: LIST
46784: PUSH
46785: LD_INT 1
46787: NEG
46788: PUSH
46789: LD_INT 4
46791: NEG
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: PUSH
46797: LD_INT 1
46799: PUSH
46800: LD_INT 3
46802: NEG
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: LIST
46812: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
46813: LD_ADDR_VAR 0 24
46817: PUSH
46818: LD_INT 3
46820: PUSH
46821: LD_INT 0
46823: PUSH
46824: EMPTY
46825: LIST
46826: LIST
46827: PUSH
46828: LD_INT 3
46830: PUSH
46831: LD_INT 1
46833: NEG
46834: PUSH
46835: EMPTY
46836: LIST
46837: LIST
46838: PUSH
46839: LD_INT 4
46841: PUSH
46842: LD_INT 1
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: PUSH
46849: EMPTY
46850: LIST
46851: LIST
46852: LIST
46853: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
46854: LD_ADDR_VAR 0 25
46858: PUSH
46859: LD_INT 3
46861: PUSH
46862: LD_INT 3
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: PUSH
46869: LD_INT 4
46871: PUSH
46872: LD_INT 3
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: PUSH
46879: LD_INT 3
46881: PUSH
46882: LD_INT 4
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: LIST
46893: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
46894: LD_ADDR_VAR 0 26
46898: PUSH
46899: LD_INT 0
46901: PUSH
46902: LD_INT 3
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: PUSH
46909: LD_INT 1
46911: PUSH
46912: LD_INT 4
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: PUSH
46919: LD_INT 1
46921: NEG
46922: PUSH
46923: LD_INT 3
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: PUSH
46930: EMPTY
46931: LIST
46932: LIST
46933: LIST
46934: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
46935: LD_ADDR_VAR 0 27
46939: PUSH
46940: LD_INT 3
46942: NEG
46943: PUSH
46944: LD_INT 0
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: LD_INT 3
46953: NEG
46954: PUSH
46955: LD_INT 1
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: PUSH
46962: LD_INT 4
46964: NEG
46965: PUSH
46966: LD_INT 1
46968: NEG
46969: PUSH
46970: EMPTY
46971: LIST
46972: LIST
46973: PUSH
46974: EMPTY
46975: LIST
46976: LIST
46977: LIST
46978: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
46979: LD_ADDR_VAR 0 28
46983: PUSH
46984: LD_INT 3
46986: NEG
46987: PUSH
46988: LD_INT 3
46990: NEG
46991: PUSH
46992: EMPTY
46993: LIST
46994: LIST
46995: PUSH
46996: LD_INT 3
46998: NEG
46999: PUSH
47000: LD_INT 4
47002: NEG
47003: PUSH
47004: EMPTY
47005: LIST
47006: LIST
47007: PUSH
47008: LD_INT 4
47010: NEG
47011: PUSH
47012: LD_INT 3
47014: NEG
47015: PUSH
47016: EMPTY
47017: LIST
47018: LIST
47019: PUSH
47020: EMPTY
47021: LIST
47022: LIST
47023: LIST
47024: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
47025: LD_ADDR_VAR 0 29
47029: PUSH
47030: LD_INT 1
47032: NEG
47033: PUSH
47034: LD_INT 3
47036: NEG
47037: PUSH
47038: EMPTY
47039: LIST
47040: LIST
47041: PUSH
47042: LD_INT 0
47044: PUSH
47045: LD_INT 3
47047: NEG
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: PUSH
47053: LD_INT 1
47055: PUSH
47056: LD_INT 2
47058: NEG
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: PUSH
47064: LD_INT 1
47066: NEG
47067: PUSH
47068: LD_INT 4
47070: NEG
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: PUSH
47076: LD_INT 0
47078: PUSH
47079: LD_INT 4
47081: NEG
47082: PUSH
47083: EMPTY
47084: LIST
47085: LIST
47086: PUSH
47087: LD_INT 1
47089: PUSH
47090: LD_INT 3
47092: NEG
47093: PUSH
47094: EMPTY
47095: LIST
47096: LIST
47097: PUSH
47098: LD_INT 1
47100: NEG
47101: PUSH
47102: LD_INT 5
47104: NEG
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: PUSH
47110: LD_INT 0
47112: PUSH
47113: LD_INT 5
47115: NEG
47116: PUSH
47117: EMPTY
47118: LIST
47119: LIST
47120: PUSH
47121: LD_INT 1
47123: PUSH
47124: LD_INT 4
47126: NEG
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: PUSH
47132: LD_INT 1
47134: NEG
47135: PUSH
47136: LD_INT 6
47138: NEG
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: PUSH
47144: LD_INT 0
47146: PUSH
47147: LD_INT 6
47149: NEG
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: PUSH
47155: LD_INT 1
47157: PUSH
47158: LD_INT 5
47160: NEG
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PUSH
47166: EMPTY
47167: LIST
47168: LIST
47169: LIST
47170: LIST
47171: LIST
47172: LIST
47173: LIST
47174: LIST
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
47180: LD_ADDR_VAR 0 30
47184: PUSH
47185: LD_INT 2
47187: PUSH
47188: LD_INT 1
47190: NEG
47191: PUSH
47192: EMPTY
47193: LIST
47194: LIST
47195: PUSH
47196: LD_INT 3
47198: PUSH
47199: LD_INT 0
47201: PUSH
47202: EMPTY
47203: LIST
47204: LIST
47205: PUSH
47206: LD_INT 3
47208: PUSH
47209: LD_INT 1
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: PUSH
47216: LD_INT 3
47218: PUSH
47219: LD_INT 1
47221: NEG
47222: PUSH
47223: EMPTY
47224: LIST
47225: LIST
47226: PUSH
47227: LD_INT 4
47229: PUSH
47230: LD_INT 0
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: PUSH
47237: LD_INT 4
47239: PUSH
47240: LD_INT 1
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: PUSH
47247: LD_INT 4
47249: PUSH
47250: LD_INT 1
47252: NEG
47253: PUSH
47254: EMPTY
47255: LIST
47256: LIST
47257: PUSH
47258: LD_INT 5
47260: PUSH
47261: LD_INT 0
47263: PUSH
47264: EMPTY
47265: LIST
47266: LIST
47267: PUSH
47268: LD_INT 5
47270: PUSH
47271: LD_INT 1
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: PUSH
47278: LD_INT 5
47280: PUSH
47281: LD_INT 1
47283: NEG
47284: PUSH
47285: EMPTY
47286: LIST
47287: LIST
47288: PUSH
47289: LD_INT 6
47291: PUSH
47292: LD_INT 0
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: PUSH
47299: LD_INT 6
47301: PUSH
47302: LD_INT 1
47304: PUSH
47305: EMPTY
47306: LIST
47307: LIST
47308: PUSH
47309: EMPTY
47310: LIST
47311: LIST
47312: LIST
47313: LIST
47314: LIST
47315: LIST
47316: LIST
47317: LIST
47318: LIST
47319: LIST
47320: LIST
47321: LIST
47322: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
47323: LD_ADDR_VAR 0 31
47327: PUSH
47328: LD_INT 3
47330: PUSH
47331: LD_INT 2
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: PUSH
47338: LD_INT 3
47340: PUSH
47341: LD_INT 3
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: PUSH
47348: LD_INT 2
47350: PUSH
47351: LD_INT 3
47353: PUSH
47354: EMPTY
47355: LIST
47356: LIST
47357: PUSH
47358: LD_INT 4
47360: PUSH
47361: LD_INT 3
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: PUSH
47368: LD_INT 4
47370: PUSH
47371: LD_INT 4
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: PUSH
47378: LD_INT 3
47380: PUSH
47381: LD_INT 4
47383: PUSH
47384: EMPTY
47385: LIST
47386: LIST
47387: PUSH
47388: LD_INT 5
47390: PUSH
47391: LD_INT 4
47393: PUSH
47394: EMPTY
47395: LIST
47396: LIST
47397: PUSH
47398: LD_INT 5
47400: PUSH
47401: LD_INT 5
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: PUSH
47408: LD_INT 4
47410: PUSH
47411: LD_INT 5
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: PUSH
47418: LD_INT 6
47420: PUSH
47421: LD_INT 5
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: PUSH
47428: LD_INT 6
47430: PUSH
47431: LD_INT 6
47433: PUSH
47434: EMPTY
47435: LIST
47436: LIST
47437: PUSH
47438: LD_INT 5
47440: PUSH
47441: LD_INT 6
47443: PUSH
47444: EMPTY
47445: LIST
47446: LIST
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: LIST
47452: LIST
47453: LIST
47454: LIST
47455: LIST
47456: LIST
47457: LIST
47458: LIST
47459: LIST
47460: LIST
47461: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
47462: LD_ADDR_VAR 0 32
47466: PUSH
47467: LD_INT 1
47469: PUSH
47470: LD_INT 3
47472: PUSH
47473: EMPTY
47474: LIST
47475: LIST
47476: PUSH
47477: LD_INT 0
47479: PUSH
47480: LD_INT 3
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: PUSH
47487: LD_INT 1
47489: NEG
47490: PUSH
47491: LD_INT 2
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: PUSH
47498: LD_INT 1
47500: PUSH
47501: LD_INT 4
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PUSH
47508: LD_INT 0
47510: PUSH
47511: LD_INT 4
47513: PUSH
47514: EMPTY
47515: LIST
47516: LIST
47517: PUSH
47518: LD_INT 1
47520: NEG
47521: PUSH
47522: LD_INT 3
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: LD_INT 1
47531: PUSH
47532: LD_INT 5
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: LD_INT 0
47541: PUSH
47542: LD_INT 5
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: PUSH
47549: LD_INT 1
47551: NEG
47552: PUSH
47553: LD_INT 4
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: PUSH
47560: LD_INT 1
47562: PUSH
47563: LD_INT 6
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PUSH
47570: LD_INT 0
47572: PUSH
47573: LD_INT 6
47575: PUSH
47576: EMPTY
47577: LIST
47578: LIST
47579: PUSH
47580: LD_INT 1
47582: NEG
47583: PUSH
47584: LD_INT 5
47586: PUSH
47587: EMPTY
47588: LIST
47589: LIST
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: LIST
47595: LIST
47596: LIST
47597: LIST
47598: LIST
47599: LIST
47600: LIST
47601: LIST
47602: LIST
47603: LIST
47604: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
47605: LD_ADDR_VAR 0 33
47609: PUSH
47610: LD_INT 2
47612: NEG
47613: PUSH
47614: LD_INT 1
47616: PUSH
47617: EMPTY
47618: LIST
47619: LIST
47620: PUSH
47621: LD_INT 3
47623: NEG
47624: PUSH
47625: LD_INT 0
47627: PUSH
47628: EMPTY
47629: LIST
47630: LIST
47631: PUSH
47632: LD_INT 3
47634: NEG
47635: PUSH
47636: LD_INT 1
47638: NEG
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: PUSH
47644: LD_INT 3
47646: NEG
47647: PUSH
47648: LD_INT 1
47650: PUSH
47651: EMPTY
47652: LIST
47653: LIST
47654: PUSH
47655: LD_INT 4
47657: NEG
47658: PUSH
47659: LD_INT 0
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: PUSH
47666: LD_INT 4
47668: NEG
47669: PUSH
47670: LD_INT 1
47672: NEG
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: PUSH
47678: LD_INT 4
47680: NEG
47681: PUSH
47682: LD_INT 1
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: LD_INT 5
47691: NEG
47692: PUSH
47693: LD_INT 0
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: PUSH
47700: LD_INT 5
47702: NEG
47703: PUSH
47704: LD_INT 1
47706: NEG
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: PUSH
47712: LD_INT 5
47714: NEG
47715: PUSH
47716: LD_INT 1
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: PUSH
47723: LD_INT 6
47725: NEG
47726: PUSH
47727: LD_INT 0
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: PUSH
47734: LD_INT 6
47736: NEG
47737: PUSH
47738: LD_INT 1
47740: NEG
47741: PUSH
47742: EMPTY
47743: LIST
47744: LIST
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: LIST
47750: LIST
47751: LIST
47752: LIST
47753: LIST
47754: LIST
47755: LIST
47756: LIST
47757: LIST
47758: LIST
47759: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
47760: LD_ADDR_VAR 0 34
47764: PUSH
47765: LD_INT 2
47767: NEG
47768: PUSH
47769: LD_INT 3
47771: NEG
47772: PUSH
47773: EMPTY
47774: LIST
47775: LIST
47776: PUSH
47777: LD_INT 3
47779: NEG
47780: PUSH
47781: LD_INT 2
47783: NEG
47784: PUSH
47785: EMPTY
47786: LIST
47787: LIST
47788: PUSH
47789: LD_INT 3
47791: NEG
47792: PUSH
47793: LD_INT 3
47795: NEG
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: PUSH
47801: LD_INT 3
47803: NEG
47804: PUSH
47805: LD_INT 4
47807: NEG
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: PUSH
47813: LD_INT 4
47815: NEG
47816: PUSH
47817: LD_INT 3
47819: NEG
47820: PUSH
47821: EMPTY
47822: LIST
47823: LIST
47824: PUSH
47825: LD_INT 4
47827: NEG
47828: PUSH
47829: LD_INT 4
47831: NEG
47832: PUSH
47833: EMPTY
47834: LIST
47835: LIST
47836: PUSH
47837: LD_INT 4
47839: NEG
47840: PUSH
47841: LD_INT 5
47843: NEG
47844: PUSH
47845: EMPTY
47846: LIST
47847: LIST
47848: PUSH
47849: LD_INT 5
47851: NEG
47852: PUSH
47853: LD_INT 4
47855: NEG
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: PUSH
47861: LD_INT 5
47863: NEG
47864: PUSH
47865: LD_INT 5
47867: NEG
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: PUSH
47873: LD_INT 5
47875: NEG
47876: PUSH
47877: LD_INT 6
47879: NEG
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: LD_INT 6
47887: NEG
47888: PUSH
47889: LD_INT 5
47891: NEG
47892: PUSH
47893: EMPTY
47894: LIST
47895: LIST
47896: PUSH
47897: LD_INT 6
47899: NEG
47900: PUSH
47901: LD_INT 6
47903: NEG
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: LIST
47913: LIST
47914: LIST
47915: LIST
47916: LIST
47917: LIST
47918: LIST
47919: LIST
47920: LIST
47921: LIST
47922: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
47923: LD_ADDR_VAR 0 41
47927: PUSH
47928: LD_INT 0
47930: PUSH
47931: LD_INT 2
47933: NEG
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: PUSH
47939: LD_INT 1
47941: NEG
47942: PUSH
47943: LD_INT 3
47945: NEG
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: PUSH
47951: LD_INT 1
47953: PUSH
47954: LD_INT 2
47956: NEG
47957: PUSH
47958: EMPTY
47959: LIST
47960: LIST
47961: PUSH
47962: EMPTY
47963: LIST
47964: LIST
47965: LIST
47966: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
47967: LD_ADDR_VAR 0 42
47971: PUSH
47972: LD_INT 2
47974: PUSH
47975: LD_INT 0
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: PUSH
47982: LD_INT 2
47984: PUSH
47985: LD_INT 1
47987: NEG
47988: PUSH
47989: EMPTY
47990: LIST
47991: LIST
47992: PUSH
47993: LD_INT 3
47995: PUSH
47996: LD_INT 1
47998: PUSH
47999: EMPTY
48000: LIST
48001: LIST
48002: PUSH
48003: EMPTY
48004: LIST
48005: LIST
48006: LIST
48007: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
48008: LD_ADDR_VAR 0 43
48012: PUSH
48013: LD_INT 2
48015: PUSH
48016: LD_INT 2
48018: PUSH
48019: EMPTY
48020: LIST
48021: LIST
48022: PUSH
48023: LD_INT 3
48025: PUSH
48026: LD_INT 2
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: PUSH
48033: LD_INT 2
48035: PUSH
48036: LD_INT 3
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: PUSH
48043: EMPTY
48044: LIST
48045: LIST
48046: LIST
48047: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
48048: LD_ADDR_VAR 0 44
48052: PUSH
48053: LD_INT 0
48055: PUSH
48056: LD_INT 2
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: PUSH
48063: LD_INT 1
48065: PUSH
48066: LD_INT 3
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: LD_INT 1
48075: NEG
48076: PUSH
48077: LD_INT 2
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: LIST
48088: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48089: LD_ADDR_VAR 0 45
48093: PUSH
48094: LD_INT 2
48096: NEG
48097: PUSH
48098: LD_INT 0
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: PUSH
48105: LD_INT 2
48107: NEG
48108: PUSH
48109: LD_INT 1
48111: PUSH
48112: EMPTY
48113: LIST
48114: LIST
48115: PUSH
48116: LD_INT 3
48118: NEG
48119: PUSH
48120: LD_INT 1
48122: NEG
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: LIST
48132: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
48133: LD_ADDR_VAR 0 46
48137: PUSH
48138: LD_INT 2
48140: NEG
48141: PUSH
48142: LD_INT 2
48144: NEG
48145: PUSH
48146: EMPTY
48147: LIST
48148: LIST
48149: PUSH
48150: LD_INT 2
48152: NEG
48153: PUSH
48154: LD_INT 3
48156: NEG
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: PUSH
48162: LD_INT 3
48164: NEG
48165: PUSH
48166: LD_INT 2
48168: NEG
48169: PUSH
48170: EMPTY
48171: LIST
48172: LIST
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: LIST
48178: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
48179: LD_ADDR_VAR 0 47
48183: PUSH
48184: LD_INT 2
48186: NEG
48187: PUSH
48188: LD_INT 3
48190: NEG
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: PUSH
48196: LD_INT 1
48198: NEG
48199: PUSH
48200: LD_INT 3
48202: NEG
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: PUSH
48208: EMPTY
48209: LIST
48210: LIST
48211: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48212: LD_ADDR_VAR 0 48
48216: PUSH
48217: LD_INT 1
48219: PUSH
48220: LD_INT 2
48222: NEG
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: PUSH
48228: LD_INT 2
48230: PUSH
48231: LD_INT 1
48233: NEG
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
48243: LD_ADDR_VAR 0 49
48247: PUSH
48248: LD_INT 3
48250: PUSH
48251: LD_INT 1
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: LD_INT 3
48260: PUSH
48261: LD_INT 2
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
48272: LD_ADDR_VAR 0 50
48276: PUSH
48277: LD_INT 2
48279: PUSH
48280: LD_INT 3
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: PUSH
48287: LD_INT 1
48289: PUSH
48290: LD_INT 3
48292: PUSH
48293: EMPTY
48294: LIST
48295: LIST
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48301: LD_ADDR_VAR 0 51
48305: PUSH
48306: LD_INT 1
48308: NEG
48309: PUSH
48310: LD_INT 2
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: PUSH
48317: LD_INT 2
48319: NEG
48320: PUSH
48321: LD_INT 1
48323: PUSH
48324: EMPTY
48325: LIST
48326: LIST
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48332: LD_ADDR_VAR 0 52
48336: PUSH
48337: LD_INT 3
48339: NEG
48340: PUSH
48341: LD_INT 1
48343: NEG
48344: PUSH
48345: EMPTY
48346: LIST
48347: LIST
48348: PUSH
48349: LD_INT 3
48351: NEG
48352: PUSH
48353: LD_INT 2
48355: NEG
48356: PUSH
48357: EMPTY
48358: LIST
48359: LIST
48360: PUSH
48361: EMPTY
48362: LIST
48363: LIST
48364: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48365: LD_ADDR_VAR 0 53
48369: PUSH
48370: LD_INT 1
48372: NEG
48373: PUSH
48374: LD_INT 3
48376: NEG
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: PUSH
48382: LD_INT 0
48384: PUSH
48385: LD_INT 3
48387: NEG
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: PUSH
48393: LD_INT 1
48395: PUSH
48396: LD_INT 2
48398: NEG
48399: PUSH
48400: EMPTY
48401: LIST
48402: LIST
48403: PUSH
48404: EMPTY
48405: LIST
48406: LIST
48407: LIST
48408: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48409: LD_ADDR_VAR 0 54
48413: PUSH
48414: LD_INT 2
48416: PUSH
48417: LD_INT 1
48419: NEG
48420: PUSH
48421: EMPTY
48422: LIST
48423: LIST
48424: PUSH
48425: LD_INT 3
48427: PUSH
48428: LD_INT 0
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: LD_INT 3
48437: PUSH
48438: LD_INT 1
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: PUSH
48445: EMPTY
48446: LIST
48447: LIST
48448: LIST
48449: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48450: LD_ADDR_VAR 0 55
48454: PUSH
48455: LD_INT 3
48457: PUSH
48458: LD_INT 2
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PUSH
48465: LD_INT 3
48467: PUSH
48468: LD_INT 3
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: LD_INT 2
48477: PUSH
48478: LD_INT 3
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: PUSH
48485: EMPTY
48486: LIST
48487: LIST
48488: LIST
48489: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48490: LD_ADDR_VAR 0 56
48494: PUSH
48495: LD_INT 1
48497: PUSH
48498: LD_INT 3
48500: PUSH
48501: EMPTY
48502: LIST
48503: LIST
48504: PUSH
48505: LD_INT 0
48507: PUSH
48508: LD_INT 3
48510: PUSH
48511: EMPTY
48512: LIST
48513: LIST
48514: PUSH
48515: LD_INT 1
48517: NEG
48518: PUSH
48519: LD_INT 2
48521: PUSH
48522: EMPTY
48523: LIST
48524: LIST
48525: PUSH
48526: EMPTY
48527: LIST
48528: LIST
48529: LIST
48530: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48531: LD_ADDR_VAR 0 57
48535: PUSH
48536: LD_INT 2
48538: NEG
48539: PUSH
48540: LD_INT 1
48542: PUSH
48543: EMPTY
48544: LIST
48545: LIST
48546: PUSH
48547: LD_INT 3
48549: NEG
48550: PUSH
48551: LD_INT 0
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: PUSH
48558: LD_INT 3
48560: NEG
48561: PUSH
48562: LD_INT 1
48564: NEG
48565: PUSH
48566: EMPTY
48567: LIST
48568: LIST
48569: PUSH
48570: EMPTY
48571: LIST
48572: LIST
48573: LIST
48574: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48575: LD_ADDR_VAR 0 58
48579: PUSH
48580: LD_INT 2
48582: NEG
48583: PUSH
48584: LD_INT 3
48586: NEG
48587: PUSH
48588: EMPTY
48589: LIST
48590: LIST
48591: PUSH
48592: LD_INT 3
48594: NEG
48595: PUSH
48596: LD_INT 2
48598: NEG
48599: PUSH
48600: EMPTY
48601: LIST
48602: LIST
48603: PUSH
48604: LD_INT 3
48606: NEG
48607: PUSH
48608: LD_INT 3
48610: NEG
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: PUSH
48616: EMPTY
48617: LIST
48618: LIST
48619: LIST
48620: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
48621: LD_ADDR_VAR 0 59
48625: PUSH
48626: LD_INT 1
48628: NEG
48629: PUSH
48630: LD_INT 2
48632: NEG
48633: PUSH
48634: EMPTY
48635: LIST
48636: LIST
48637: PUSH
48638: LD_INT 0
48640: PUSH
48641: LD_INT 2
48643: NEG
48644: PUSH
48645: EMPTY
48646: LIST
48647: LIST
48648: PUSH
48649: LD_INT 1
48651: PUSH
48652: LD_INT 1
48654: NEG
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: PUSH
48660: EMPTY
48661: LIST
48662: LIST
48663: LIST
48664: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48665: LD_ADDR_VAR 0 60
48669: PUSH
48670: LD_INT 1
48672: PUSH
48673: LD_INT 1
48675: NEG
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: PUSH
48681: LD_INT 2
48683: PUSH
48684: LD_INT 0
48686: PUSH
48687: EMPTY
48688: LIST
48689: LIST
48690: PUSH
48691: LD_INT 2
48693: PUSH
48694: LD_INT 1
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: LIST
48705: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48706: LD_ADDR_VAR 0 61
48710: PUSH
48711: LD_INT 2
48713: PUSH
48714: LD_INT 1
48716: PUSH
48717: EMPTY
48718: LIST
48719: LIST
48720: PUSH
48721: LD_INT 2
48723: PUSH
48724: LD_INT 2
48726: PUSH
48727: EMPTY
48728: LIST
48729: LIST
48730: PUSH
48731: LD_INT 1
48733: PUSH
48734: LD_INT 2
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: PUSH
48741: EMPTY
48742: LIST
48743: LIST
48744: LIST
48745: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48746: LD_ADDR_VAR 0 62
48750: PUSH
48751: LD_INT 1
48753: PUSH
48754: LD_INT 2
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: PUSH
48761: LD_INT 0
48763: PUSH
48764: LD_INT 2
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: PUSH
48771: LD_INT 1
48773: NEG
48774: PUSH
48775: LD_INT 1
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: PUSH
48782: EMPTY
48783: LIST
48784: LIST
48785: LIST
48786: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48787: LD_ADDR_VAR 0 63
48791: PUSH
48792: LD_INT 1
48794: NEG
48795: PUSH
48796: LD_INT 1
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: PUSH
48803: LD_INT 2
48805: NEG
48806: PUSH
48807: LD_INT 0
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: PUSH
48814: LD_INT 2
48816: NEG
48817: PUSH
48818: LD_INT 1
48820: NEG
48821: PUSH
48822: EMPTY
48823: LIST
48824: LIST
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: LIST
48830: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48831: LD_ADDR_VAR 0 64
48835: PUSH
48836: LD_INT 1
48838: NEG
48839: PUSH
48840: LD_INT 2
48842: NEG
48843: PUSH
48844: EMPTY
48845: LIST
48846: LIST
48847: PUSH
48848: LD_INT 2
48850: NEG
48851: PUSH
48852: LD_INT 1
48854: NEG
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: PUSH
48860: LD_INT 2
48862: NEG
48863: PUSH
48864: LD_INT 2
48866: NEG
48867: PUSH
48868: EMPTY
48869: LIST
48870: LIST
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: LIST
48876: ST_TO_ADDR
// end ; 2 :
48877: GO 52143
48879: LD_INT 2
48881: DOUBLE
48882: EQUAL
48883: IFTRUE 48887
48885: GO 52142
48887: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
48888: LD_ADDR_VAR 0 29
48892: PUSH
48893: LD_INT 4
48895: PUSH
48896: LD_INT 0
48898: PUSH
48899: EMPTY
48900: LIST
48901: LIST
48902: PUSH
48903: LD_INT 4
48905: PUSH
48906: LD_INT 1
48908: NEG
48909: PUSH
48910: EMPTY
48911: LIST
48912: LIST
48913: PUSH
48914: LD_INT 5
48916: PUSH
48917: LD_INT 0
48919: PUSH
48920: EMPTY
48921: LIST
48922: LIST
48923: PUSH
48924: LD_INT 5
48926: PUSH
48927: LD_INT 1
48929: PUSH
48930: EMPTY
48931: LIST
48932: LIST
48933: PUSH
48934: LD_INT 4
48936: PUSH
48937: LD_INT 1
48939: PUSH
48940: EMPTY
48941: LIST
48942: LIST
48943: PUSH
48944: LD_INT 3
48946: PUSH
48947: LD_INT 0
48949: PUSH
48950: EMPTY
48951: LIST
48952: LIST
48953: PUSH
48954: LD_INT 3
48956: PUSH
48957: LD_INT 1
48959: NEG
48960: PUSH
48961: EMPTY
48962: LIST
48963: LIST
48964: PUSH
48965: LD_INT 3
48967: PUSH
48968: LD_INT 2
48970: NEG
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PUSH
48976: LD_INT 5
48978: PUSH
48979: LD_INT 2
48981: PUSH
48982: EMPTY
48983: LIST
48984: LIST
48985: PUSH
48986: LD_INT 3
48988: PUSH
48989: LD_INT 3
48991: PUSH
48992: EMPTY
48993: LIST
48994: LIST
48995: PUSH
48996: LD_INT 3
48998: PUSH
48999: LD_INT 2
49001: PUSH
49002: EMPTY
49003: LIST
49004: LIST
49005: PUSH
49006: LD_INT 4
49008: PUSH
49009: LD_INT 3
49011: PUSH
49012: EMPTY
49013: LIST
49014: LIST
49015: PUSH
49016: LD_INT 4
49018: PUSH
49019: LD_INT 4
49021: PUSH
49022: EMPTY
49023: LIST
49024: LIST
49025: PUSH
49026: LD_INT 3
49028: PUSH
49029: LD_INT 4
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: LD_INT 2
49038: PUSH
49039: LD_INT 3
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PUSH
49046: LD_INT 2
49048: PUSH
49049: LD_INT 2
49051: PUSH
49052: EMPTY
49053: LIST
49054: LIST
49055: PUSH
49056: LD_INT 4
49058: PUSH
49059: LD_INT 2
49061: PUSH
49062: EMPTY
49063: LIST
49064: LIST
49065: PUSH
49066: LD_INT 2
49068: PUSH
49069: LD_INT 4
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: LD_INT 0
49078: PUSH
49079: LD_INT 4
49081: PUSH
49082: EMPTY
49083: LIST
49084: LIST
49085: PUSH
49086: LD_INT 0
49088: PUSH
49089: LD_INT 3
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: PUSH
49096: LD_INT 1
49098: PUSH
49099: LD_INT 4
49101: PUSH
49102: EMPTY
49103: LIST
49104: LIST
49105: PUSH
49106: LD_INT 1
49108: PUSH
49109: LD_INT 5
49111: PUSH
49112: EMPTY
49113: LIST
49114: LIST
49115: PUSH
49116: LD_INT 0
49118: PUSH
49119: LD_INT 5
49121: PUSH
49122: EMPTY
49123: LIST
49124: LIST
49125: PUSH
49126: LD_INT 1
49128: NEG
49129: PUSH
49130: LD_INT 4
49132: PUSH
49133: EMPTY
49134: LIST
49135: LIST
49136: PUSH
49137: LD_INT 1
49139: NEG
49140: PUSH
49141: LD_INT 3
49143: PUSH
49144: EMPTY
49145: LIST
49146: LIST
49147: PUSH
49148: LD_INT 2
49150: PUSH
49151: LD_INT 5
49153: PUSH
49154: EMPTY
49155: LIST
49156: LIST
49157: PUSH
49158: LD_INT 2
49160: NEG
49161: PUSH
49162: LD_INT 3
49164: PUSH
49165: EMPTY
49166: LIST
49167: LIST
49168: PUSH
49169: LD_INT 3
49171: NEG
49172: PUSH
49173: LD_INT 0
49175: PUSH
49176: EMPTY
49177: LIST
49178: LIST
49179: PUSH
49180: LD_INT 3
49182: NEG
49183: PUSH
49184: LD_INT 1
49186: NEG
49187: PUSH
49188: EMPTY
49189: LIST
49190: LIST
49191: PUSH
49192: LD_INT 2
49194: NEG
49195: PUSH
49196: LD_INT 0
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: PUSH
49203: LD_INT 2
49205: NEG
49206: PUSH
49207: LD_INT 1
49209: PUSH
49210: EMPTY
49211: LIST
49212: LIST
49213: PUSH
49214: LD_INT 3
49216: NEG
49217: PUSH
49218: LD_INT 1
49220: PUSH
49221: EMPTY
49222: LIST
49223: LIST
49224: PUSH
49225: LD_INT 4
49227: NEG
49228: PUSH
49229: LD_INT 0
49231: PUSH
49232: EMPTY
49233: LIST
49234: LIST
49235: PUSH
49236: LD_INT 4
49238: NEG
49239: PUSH
49240: LD_INT 1
49242: NEG
49243: PUSH
49244: EMPTY
49245: LIST
49246: LIST
49247: PUSH
49248: LD_INT 4
49250: NEG
49251: PUSH
49252: LD_INT 2
49254: NEG
49255: PUSH
49256: EMPTY
49257: LIST
49258: LIST
49259: PUSH
49260: LD_INT 2
49262: NEG
49263: PUSH
49264: LD_INT 2
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: PUSH
49271: LD_INT 4
49273: NEG
49274: PUSH
49275: LD_INT 4
49277: NEG
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: PUSH
49283: LD_INT 4
49285: NEG
49286: PUSH
49287: LD_INT 5
49289: NEG
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: LD_INT 3
49297: NEG
49298: PUSH
49299: LD_INT 4
49301: NEG
49302: PUSH
49303: EMPTY
49304: LIST
49305: LIST
49306: PUSH
49307: LD_INT 3
49309: NEG
49310: PUSH
49311: LD_INT 3
49313: NEG
49314: PUSH
49315: EMPTY
49316: LIST
49317: LIST
49318: PUSH
49319: LD_INT 4
49321: NEG
49322: PUSH
49323: LD_INT 3
49325: NEG
49326: PUSH
49327: EMPTY
49328: LIST
49329: LIST
49330: PUSH
49331: LD_INT 5
49333: NEG
49334: PUSH
49335: LD_INT 4
49337: NEG
49338: PUSH
49339: EMPTY
49340: LIST
49341: LIST
49342: PUSH
49343: LD_INT 5
49345: NEG
49346: PUSH
49347: LD_INT 5
49349: NEG
49350: PUSH
49351: EMPTY
49352: LIST
49353: LIST
49354: PUSH
49355: LD_INT 3
49357: NEG
49358: PUSH
49359: LD_INT 5
49361: NEG
49362: PUSH
49363: EMPTY
49364: LIST
49365: LIST
49366: PUSH
49367: LD_INT 5
49369: NEG
49370: PUSH
49371: LD_INT 3
49373: NEG
49374: PUSH
49375: EMPTY
49376: LIST
49377: LIST
49378: PUSH
49379: EMPTY
49380: LIST
49381: LIST
49382: LIST
49383: LIST
49384: LIST
49385: LIST
49386: LIST
49387: LIST
49388: LIST
49389: LIST
49390: LIST
49391: LIST
49392: LIST
49393: LIST
49394: LIST
49395: LIST
49396: LIST
49397: LIST
49398: LIST
49399: LIST
49400: LIST
49401: LIST
49402: LIST
49403: LIST
49404: LIST
49405: LIST
49406: LIST
49407: LIST
49408: LIST
49409: LIST
49410: LIST
49411: LIST
49412: LIST
49413: LIST
49414: LIST
49415: LIST
49416: LIST
49417: LIST
49418: LIST
49419: LIST
49420: LIST
49421: LIST
49422: LIST
49423: LIST
49424: LIST
49425: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
49426: LD_ADDR_VAR 0 30
49430: PUSH
49431: LD_INT 4
49433: PUSH
49434: LD_INT 4
49436: PUSH
49437: EMPTY
49438: LIST
49439: LIST
49440: PUSH
49441: LD_INT 4
49443: PUSH
49444: LD_INT 3
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: LD_INT 5
49453: PUSH
49454: LD_INT 4
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: PUSH
49461: LD_INT 5
49463: PUSH
49464: LD_INT 5
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: PUSH
49471: LD_INT 4
49473: PUSH
49474: LD_INT 5
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: PUSH
49481: LD_INT 3
49483: PUSH
49484: LD_INT 4
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: PUSH
49491: LD_INT 3
49493: PUSH
49494: LD_INT 3
49496: PUSH
49497: EMPTY
49498: LIST
49499: LIST
49500: PUSH
49501: LD_INT 5
49503: PUSH
49504: LD_INT 3
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: PUSH
49511: LD_INT 3
49513: PUSH
49514: LD_INT 5
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: PUSH
49521: LD_INT 0
49523: PUSH
49524: LD_INT 3
49526: PUSH
49527: EMPTY
49528: LIST
49529: LIST
49530: PUSH
49531: LD_INT 0
49533: PUSH
49534: LD_INT 2
49536: PUSH
49537: EMPTY
49538: LIST
49539: LIST
49540: PUSH
49541: LD_INT 1
49543: PUSH
49544: LD_INT 3
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: PUSH
49551: LD_INT 1
49553: PUSH
49554: LD_INT 4
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: PUSH
49561: LD_INT 0
49563: PUSH
49564: LD_INT 4
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: PUSH
49571: LD_INT 1
49573: NEG
49574: PUSH
49575: LD_INT 3
49577: PUSH
49578: EMPTY
49579: LIST
49580: LIST
49581: PUSH
49582: LD_INT 1
49584: NEG
49585: PUSH
49586: LD_INT 2
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: PUSH
49593: LD_INT 2
49595: PUSH
49596: LD_INT 4
49598: PUSH
49599: EMPTY
49600: LIST
49601: LIST
49602: PUSH
49603: LD_INT 2
49605: NEG
49606: PUSH
49607: LD_INT 2
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: PUSH
49614: LD_INT 4
49616: NEG
49617: PUSH
49618: LD_INT 0
49620: PUSH
49621: EMPTY
49622: LIST
49623: LIST
49624: PUSH
49625: LD_INT 4
49627: NEG
49628: PUSH
49629: LD_INT 1
49631: NEG
49632: PUSH
49633: EMPTY
49634: LIST
49635: LIST
49636: PUSH
49637: LD_INT 3
49639: NEG
49640: PUSH
49641: LD_INT 0
49643: PUSH
49644: EMPTY
49645: LIST
49646: LIST
49647: PUSH
49648: LD_INT 3
49650: NEG
49651: PUSH
49652: LD_INT 1
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: PUSH
49659: LD_INT 4
49661: NEG
49662: PUSH
49663: LD_INT 1
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: PUSH
49670: LD_INT 5
49672: NEG
49673: PUSH
49674: LD_INT 0
49676: PUSH
49677: EMPTY
49678: LIST
49679: LIST
49680: PUSH
49681: LD_INT 5
49683: NEG
49684: PUSH
49685: LD_INT 1
49687: NEG
49688: PUSH
49689: EMPTY
49690: LIST
49691: LIST
49692: PUSH
49693: LD_INT 5
49695: NEG
49696: PUSH
49697: LD_INT 2
49699: NEG
49700: PUSH
49701: EMPTY
49702: LIST
49703: LIST
49704: PUSH
49705: LD_INT 3
49707: NEG
49708: PUSH
49709: LD_INT 2
49711: PUSH
49712: EMPTY
49713: LIST
49714: LIST
49715: PUSH
49716: LD_INT 3
49718: NEG
49719: PUSH
49720: LD_INT 3
49722: NEG
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: LD_INT 3
49730: NEG
49731: PUSH
49732: LD_INT 4
49734: NEG
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: PUSH
49740: LD_INT 2
49742: NEG
49743: PUSH
49744: LD_INT 3
49746: NEG
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: PUSH
49752: LD_INT 2
49754: NEG
49755: PUSH
49756: LD_INT 2
49758: NEG
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PUSH
49764: LD_INT 3
49766: NEG
49767: PUSH
49768: LD_INT 2
49770: NEG
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: PUSH
49776: LD_INT 4
49778: NEG
49779: PUSH
49780: LD_INT 3
49782: NEG
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: PUSH
49788: LD_INT 4
49790: NEG
49791: PUSH
49792: LD_INT 4
49794: NEG
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: PUSH
49800: LD_INT 2
49802: NEG
49803: PUSH
49804: LD_INT 4
49806: NEG
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: PUSH
49812: LD_INT 4
49814: NEG
49815: PUSH
49816: LD_INT 2
49818: NEG
49819: PUSH
49820: EMPTY
49821: LIST
49822: LIST
49823: PUSH
49824: LD_INT 0
49826: PUSH
49827: LD_INT 4
49829: NEG
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: PUSH
49835: LD_INT 0
49837: PUSH
49838: LD_INT 5
49840: NEG
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: PUSH
49846: LD_INT 1
49848: PUSH
49849: LD_INT 4
49851: NEG
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: PUSH
49857: LD_INT 1
49859: PUSH
49860: LD_INT 3
49862: NEG
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: PUSH
49868: LD_INT 0
49870: PUSH
49871: LD_INT 3
49873: NEG
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: PUSH
49879: LD_INT 1
49881: NEG
49882: PUSH
49883: LD_INT 4
49885: NEG
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: PUSH
49891: LD_INT 1
49893: NEG
49894: PUSH
49895: LD_INT 5
49897: NEG
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: LD_INT 2
49905: PUSH
49906: LD_INT 3
49908: NEG
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: PUSH
49914: LD_INT 2
49916: NEG
49917: PUSH
49918: LD_INT 5
49920: NEG
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: PUSH
49926: EMPTY
49927: LIST
49928: LIST
49929: LIST
49930: LIST
49931: LIST
49932: LIST
49933: LIST
49934: LIST
49935: LIST
49936: LIST
49937: LIST
49938: LIST
49939: LIST
49940: LIST
49941: LIST
49942: LIST
49943: LIST
49944: LIST
49945: LIST
49946: LIST
49947: LIST
49948: LIST
49949: LIST
49950: LIST
49951: LIST
49952: LIST
49953: LIST
49954: LIST
49955: LIST
49956: LIST
49957: LIST
49958: LIST
49959: LIST
49960: LIST
49961: LIST
49962: LIST
49963: LIST
49964: LIST
49965: LIST
49966: LIST
49967: LIST
49968: LIST
49969: LIST
49970: LIST
49971: LIST
49972: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
49973: LD_ADDR_VAR 0 31
49977: PUSH
49978: LD_INT 0
49980: PUSH
49981: LD_INT 4
49983: PUSH
49984: EMPTY
49985: LIST
49986: LIST
49987: PUSH
49988: LD_INT 0
49990: PUSH
49991: LD_INT 3
49993: PUSH
49994: EMPTY
49995: LIST
49996: LIST
49997: PUSH
49998: LD_INT 1
50000: PUSH
50001: LD_INT 4
50003: PUSH
50004: EMPTY
50005: LIST
50006: LIST
50007: PUSH
50008: LD_INT 1
50010: PUSH
50011: LD_INT 5
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: PUSH
50018: LD_INT 0
50020: PUSH
50021: LD_INT 5
50023: PUSH
50024: EMPTY
50025: LIST
50026: LIST
50027: PUSH
50028: LD_INT 1
50030: NEG
50031: PUSH
50032: LD_INT 4
50034: PUSH
50035: EMPTY
50036: LIST
50037: LIST
50038: PUSH
50039: LD_INT 1
50041: NEG
50042: PUSH
50043: LD_INT 3
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: PUSH
50050: LD_INT 2
50052: PUSH
50053: LD_INT 5
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 2
50062: NEG
50063: PUSH
50064: LD_INT 3
50066: PUSH
50067: EMPTY
50068: LIST
50069: LIST
50070: PUSH
50071: LD_INT 3
50073: NEG
50074: PUSH
50075: LD_INT 0
50077: PUSH
50078: EMPTY
50079: LIST
50080: LIST
50081: PUSH
50082: LD_INT 3
50084: NEG
50085: PUSH
50086: LD_INT 1
50088: NEG
50089: PUSH
50090: EMPTY
50091: LIST
50092: LIST
50093: PUSH
50094: LD_INT 2
50096: NEG
50097: PUSH
50098: LD_INT 0
50100: PUSH
50101: EMPTY
50102: LIST
50103: LIST
50104: PUSH
50105: LD_INT 2
50107: NEG
50108: PUSH
50109: LD_INT 1
50111: PUSH
50112: EMPTY
50113: LIST
50114: LIST
50115: PUSH
50116: LD_INT 3
50118: NEG
50119: PUSH
50120: LD_INT 1
50122: PUSH
50123: EMPTY
50124: LIST
50125: LIST
50126: PUSH
50127: LD_INT 4
50129: NEG
50130: PUSH
50131: LD_INT 0
50133: PUSH
50134: EMPTY
50135: LIST
50136: LIST
50137: PUSH
50138: LD_INT 4
50140: NEG
50141: PUSH
50142: LD_INT 1
50144: NEG
50145: PUSH
50146: EMPTY
50147: LIST
50148: LIST
50149: PUSH
50150: LD_INT 4
50152: NEG
50153: PUSH
50154: LD_INT 2
50156: NEG
50157: PUSH
50158: EMPTY
50159: LIST
50160: LIST
50161: PUSH
50162: LD_INT 2
50164: NEG
50165: PUSH
50166: LD_INT 2
50168: PUSH
50169: EMPTY
50170: LIST
50171: LIST
50172: PUSH
50173: LD_INT 4
50175: NEG
50176: PUSH
50177: LD_INT 4
50179: NEG
50180: PUSH
50181: EMPTY
50182: LIST
50183: LIST
50184: PUSH
50185: LD_INT 4
50187: NEG
50188: PUSH
50189: LD_INT 5
50191: NEG
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: PUSH
50197: LD_INT 3
50199: NEG
50200: PUSH
50201: LD_INT 4
50203: NEG
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: PUSH
50209: LD_INT 3
50211: NEG
50212: PUSH
50213: LD_INT 3
50215: NEG
50216: PUSH
50217: EMPTY
50218: LIST
50219: LIST
50220: PUSH
50221: LD_INT 4
50223: NEG
50224: PUSH
50225: LD_INT 3
50227: NEG
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: PUSH
50233: LD_INT 5
50235: NEG
50236: PUSH
50237: LD_INT 4
50239: NEG
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: PUSH
50245: LD_INT 5
50247: NEG
50248: PUSH
50249: LD_INT 5
50251: NEG
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: LD_INT 3
50259: NEG
50260: PUSH
50261: LD_INT 5
50263: NEG
50264: PUSH
50265: EMPTY
50266: LIST
50267: LIST
50268: PUSH
50269: LD_INT 5
50271: NEG
50272: PUSH
50273: LD_INT 3
50275: NEG
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 0
50283: PUSH
50284: LD_INT 3
50286: NEG
50287: PUSH
50288: EMPTY
50289: LIST
50290: LIST
50291: PUSH
50292: LD_INT 0
50294: PUSH
50295: LD_INT 4
50297: NEG
50298: PUSH
50299: EMPTY
50300: LIST
50301: LIST
50302: PUSH
50303: LD_INT 1
50305: PUSH
50306: LD_INT 3
50308: NEG
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: PUSH
50314: LD_INT 1
50316: PUSH
50317: LD_INT 2
50319: NEG
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PUSH
50325: LD_INT 0
50327: PUSH
50328: LD_INT 2
50330: NEG
50331: PUSH
50332: EMPTY
50333: LIST
50334: LIST
50335: PUSH
50336: LD_INT 1
50338: NEG
50339: PUSH
50340: LD_INT 3
50342: NEG
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: LD_INT 1
50350: NEG
50351: PUSH
50352: LD_INT 4
50354: NEG
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: PUSH
50360: LD_INT 2
50362: PUSH
50363: LD_INT 2
50365: NEG
50366: PUSH
50367: EMPTY
50368: LIST
50369: LIST
50370: PUSH
50371: LD_INT 2
50373: NEG
50374: PUSH
50375: LD_INT 4
50377: NEG
50378: PUSH
50379: EMPTY
50380: LIST
50381: LIST
50382: PUSH
50383: LD_INT 4
50385: PUSH
50386: LD_INT 0
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: PUSH
50393: LD_INT 4
50395: PUSH
50396: LD_INT 1
50398: NEG
50399: PUSH
50400: EMPTY
50401: LIST
50402: LIST
50403: PUSH
50404: LD_INT 5
50406: PUSH
50407: LD_INT 0
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: PUSH
50414: LD_INT 5
50416: PUSH
50417: LD_INT 1
50419: PUSH
50420: EMPTY
50421: LIST
50422: LIST
50423: PUSH
50424: LD_INT 4
50426: PUSH
50427: LD_INT 1
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: PUSH
50434: LD_INT 3
50436: PUSH
50437: LD_INT 0
50439: PUSH
50440: EMPTY
50441: LIST
50442: LIST
50443: PUSH
50444: LD_INT 3
50446: PUSH
50447: LD_INT 1
50449: NEG
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: PUSH
50455: LD_INT 3
50457: PUSH
50458: LD_INT 2
50460: NEG
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: LD_INT 5
50468: PUSH
50469: LD_INT 2
50471: PUSH
50472: EMPTY
50473: LIST
50474: LIST
50475: PUSH
50476: EMPTY
50477: LIST
50478: LIST
50479: LIST
50480: LIST
50481: LIST
50482: LIST
50483: LIST
50484: LIST
50485: LIST
50486: LIST
50487: LIST
50488: LIST
50489: LIST
50490: LIST
50491: LIST
50492: LIST
50493: LIST
50494: LIST
50495: LIST
50496: LIST
50497: LIST
50498: LIST
50499: LIST
50500: LIST
50501: LIST
50502: LIST
50503: LIST
50504: LIST
50505: LIST
50506: LIST
50507: LIST
50508: LIST
50509: LIST
50510: LIST
50511: LIST
50512: LIST
50513: LIST
50514: LIST
50515: LIST
50516: LIST
50517: LIST
50518: LIST
50519: LIST
50520: LIST
50521: LIST
50522: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
50523: LD_ADDR_VAR 0 32
50527: PUSH
50528: LD_INT 4
50530: NEG
50531: PUSH
50532: LD_INT 0
50534: PUSH
50535: EMPTY
50536: LIST
50537: LIST
50538: PUSH
50539: LD_INT 4
50541: NEG
50542: PUSH
50543: LD_INT 1
50545: NEG
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: PUSH
50551: LD_INT 3
50553: NEG
50554: PUSH
50555: LD_INT 0
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: PUSH
50562: LD_INT 3
50564: NEG
50565: PUSH
50566: LD_INT 1
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: PUSH
50573: LD_INT 4
50575: NEG
50576: PUSH
50577: LD_INT 1
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: PUSH
50584: LD_INT 5
50586: NEG
50587: PUSH
50588: LD_INT 0
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 5
50597: NEG
50598: PUSH
50599: LD_INT 1
50601: NEG
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: PUSH
50607: LD_INT 5
50609: NEG
50610: PUSH
50611: LD_INT 2
50613: NEG
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: PUSH
50619: LD_INT 3
50621: NEG
50622: PUSH
50623: LD_INT 2
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: PUSH
50630: LD_INT 3
50632: NEG
50633: PUSH
50634: LD_INT 3
50636: NEG
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: LD_INT 3
50644: NEG
50645: PUSH
50646: LD_INT 4
50648: NEG
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: PUSH
50654: LD_INT 2
50656: NEG
50657: PUSH
50658: LD_INT 3
50660: NEG
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PUSH
50666: LD_INT 2
50668: NEG
50669: PUSH
50670: LD_INT 2
50672: NEG
50673: PUSH
50674: EMPTY
50675: LIST
50676: LIST
50677: PUSH
50678: LD_INT 3
50680: NEG
50681: PUSH
50682: LD_INT 2
50684: NEG
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: LD_INT 4
50692: NEG
50693: PUSH
50694: LD_INT 3
50696: NEG
50697: PUSH
50698: EMPTY
50699: LIST
50700: LIST
50701: PUSH
50702: LD_INT 4
50704: NEG
50705: PUSH
50706: LD_INT 4
50708: NEG
50709: PUSH
50710: EMPTY
50711: LIST
50712: LIST
50713: PUSH
50714: LD_INT 2
50716: NEG
50717: PUSH
50718: LD_INT 4
50720: NEG
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: PUSH
50726: LD_INT 4
50728: NEG
50729: PUSH
50730: LD_INT 2
50732: NEG
50733: PUSH
50734: EMPTY
50735: LIST
50736: LIST
50737: PUSH
50738: LD_INT 0
50740: PUSH
50741: LD_INT 4
50743: NEG
50744: PUSH
50745: EMPTY
50746: LIST
50747: LIST
50748: PUSH
50749: LD_INT 0
50751: PUSH
50752: LD_INT 5
50754: NEG
50755: PUSH
50756: EMPTY
50757: LIST
50758: LIST
50759: PUSH
50760: LD_INT 1
50762: PUSH
50763: LD_INT 4
50765: NEG
50766: PUSH
50767: EMPTY
50768: LIST
50769: LIST
50770: PUSH
50771: LD_INT 1
50773: PUSH
50774: LD_INT 3
50776: NEG
50777: PUSH
50778: EMPTY
50779: LIST
50780: LIST
50781: PUSH
50782: LD_INT 0
50784: PUSH
50785: LD_INT 3
50787: NEG
50788: PUSH
50789: EMPTY
50790: LIST
50791: LIST
50792: PUSH
50793: LD_INT 1
50795: NEG
50796: PUSH
50797: LD_INT 4
50799: NEG
50800: PUSH
50801: EMPTY
50802: LIST
50803: LIST
50804: PUSH
50805: LD_INT 1
50807: NEG
50808: PUSH
50809: LD_INT 5
50811: NEG
50812: PUSH
50813: EMPTY
50814: LIST
50815: LIST
50816: PUSH
50817: LD_INT 2
50819: PUSH
50820: LD_INT 3
50822: NEG
50823: PUSH
50824: EMPTY
50825: LIST
50826: LIST
50827: PUSH
50828: LD_INT 2
50830: NEG
50831: PUSH
50832: LD_INT 5
50834: NEG
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: PUSH
50840: LD_INT 3
50842: PUSH
50843: LD_INT 0
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: LD_INT 3
50852: PUSH
50853: LD_INT 1
50855: NEG
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: PUSH
50861: LD_INT 4
50863: PUSH
50864: LD_INT 0
50866: PUSH
50867: EMPTY
50868: LIST
50869: LIST
50870: PUSH
50871: LD_INT 4
50873: PUSH
50874: LD_INT 1
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: PUSH
50881: LD_INT 3
50883: PUSH
50884: LD_INT 1
50886: PUSH
50887: EMPTY
50888: LIST
50889: LIST
50890: PUSH
50891: LD_INT 2
50893: PUSH
50894: LD_INT 0
50896: PUSH
50897: EMPTY
50898: LIST
50899: LIST
50900: PUSH
50901: LD_INT 2
50903: PUSH
50904: LD_INT 1
50906: NEG
50907: PUSH
50908: EMPTY
50909: LIST
50910: LIST
50911: PUSH
50912: LD_INT 2
50914: PUSH
50915: LD_INT 2
50917: NEG
50918: PUSH
50919: EMPTY
50920: LIST
50921: LIST
50922: PUSH
50923: LD_INT 4
50925: PUSH
50926: LD_INT 2
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: PUSH
50933: LD_INT 4
50935: PUSH
50936: LD_INT 4
50938: PUSH
50939: EMPTY
50940: LIST
50941: LIST
50942: PUSH
50943: LD_INT 4
50945: PUSH
50946: LD_INT 3
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: PUSH
50953: LD_INT 5
50955: PUSH
50956: LD_INT 4
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PUSH
50963: LD_INT 5
50965: PUSH
50966: LD_INT 5
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: PUSH
50973: LD_INT 4
50975: PUSH
50976: LD_INT 5
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PUSH
50983: LD_INT 3
50985: PUSH
50986: LD_INT 4
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: PUSH
50993: LD_INT 3
50995: PUSH
50996: LD_INT 3
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: PUSH
51003: LD_INT 5
51005: PUSH
51006: LD_INT 3
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: PUSH
51013: LD_INT 3
51015: PUSH
51016: LD_INT 5
51018: PUSH
51019: EMPTY
51020: LIST
51021: LIST
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: LIST
51027: LIST
51028: LIST
51029: LIST
51030: LIST
51031: LIST
51032: LIST
51033: LIST
51034: LIST
51035: LIST
51036: LIST
51037: LIST
51038: LIST
51039: LIST
51040: LIST
51041: LIST
51042: LIST
51043: LIST
51044: LIST
51045: LIST
51046: LIST
51047: LIST
51048: LIST
51049: LIST
51050: LIST
51051: LIST
51052: LIST
51053: LIST
51054: LIST
51055: LIST
51056: LIST
51057: LIST
51058: LIST
51059: LIST
51060: LIST
51061: LIST
51062: LIST
51063: LIST
51064: LIST
51065: LIST
51066: LIST
51067: LIST
51068: LIST
51069: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
51070: LD_ADDR_VAR 0 33
51074: PUSH
51075: LD_INT 4
51077: NEG
51078: PUSH
51079: LD_INT 4
51081: NEG
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: PUSH
51087: LD_INT 4
51089: NEG
51090: PUSH
51091: LD_INT 5
51093: NEG
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: PUSH
51099: LD_INT 3
51101: NEG
51102: PUSH
51103: LD_INT 4
51105: NEG
51106: PUSH
51107: EMPTY
51108: LIST
51109: LIST
51110: PUSH
51111: LD_INT 3
51113: NEG
51114: PUSH
51115: LD_INT 3
51117: NEG
51118: PUSH
51119: EMPTY
51120: LIST
51121: LIST
51122: PUSH
51123: LD_INT 4
51125: NEG
51126: PUSH
51127: LD_INT 3
51129: NEG
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: PUSH
51135: LD_INT 5
51137: NEG
51138: PUSH
51139: LD_INT 4
51141: NEG
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: PUSH
51147: LD_INT 5
51149: NEG
51150: PUSH
51151: LD_INT 5
51153: NEG
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: PUSH
51159: LD_INT 3
51161: NEG
51162: PUSH
51163: LD_INT 5
51165: NEG
51166: PUSH
51167: EMPTY
51168: LIST
51169: LIST
51170: PUSH
51171: LD_INT 5
51173: NEG
51174: PUSH
51175: LD_INT 3
51177: NEG
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: LD_INT 0
51185: PUSH
51186: LD_INT 3
51188: NEG
51189: PUSH
51190: EMPTY
51191: LIST
51192: LIST
51193: PUSH
51194: LD_INT 0
51196: PUSH
51197: LD_INT 4
51199: NEG
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: PUSH
51205: LD_INT 1
51207: PUSH
51208: LD_INT 3
51210: NEG
51211: PUSH
51212: EMPTY
51213: LIST
51214: LIST
51215: PUSH
51216: LD_INT 1
51218: PUSH
51219: LD_INT 2
51221: NEG
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: PUSH
51227: LD_INT 0
51229: PUSH
51230: LD_INT 2
51232: NEG
51233: PUSH
51234: EMPTY
51235: LIST
51236: LIST
51237: PUSH
51238: LD_INT 1
51240: NEG
51241: PUSH
51242: LD_INT 3
51244: NEG
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: PUSH
51250: LD_INT 1
51252: NEG
51253: PUSH
51254: LD_INT 4
51256: NEG
51257: PUSH
51258: EMPTY
51259: LIST
51260: LIST
51261: PUSH
51262: LD_INT 2
51264: PUSH
51265: LD_INT 2
51267: NEG
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: LD_INT 2
51275: NEG
51276: PUSH
51277: LD_INT 4
51279: NEG
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: PUSH
51285: LD_INT 4
51287: PUSH
51288: LD_INT 0
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: LD_INT 4
51297: PUSH
51298: LD_INT 1
51300: NEG
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: PUSH
51306: LD_INT 5
51308: PUSH
51309: LD_INT 0
51311: PUSH
51312: EMPTY
51313: LIST
51314: LIST
51315: PUSH
51316: LD_INT 5
51318: PUSH
51319: LD_INT 1
51321: PUSH
51322: EMPTY
51323: LIST
51324: LIST
51325: PUSH
51326: LD_INT 4
51328: PUSH
51329: LD_INT 1
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: PUSH
51336: LD_INT 3
51338: PUSH
51339: LD_INT 0
51341: PUSH
51342: EMPTY
51343: LIST
51344: LIST
51345: PUSH
51346: LD_INT 3
51348: PUSH
51349: LD_INT 1
51351: NEG
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: PUSH
51357: LD_INT 3
51359: PUSH
51360: LD_INT 2
51362: NEG
51363: PUSH
51364: EMPTY
51365: LIST
51366: LIST
51367: PUSH
51368: LD_INT 5
51370: PUSH
51371: LD_INT 2
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: PUSH
51378: LD_INT 3
51380: PUSH
51381: LD_INT 3
51383: PUSH
51384: EMPTY
51385: LIST
51386: LIST
51387: PUSH
51388: LD_INT 3
51390: PUSH
51391: LD_INT 2
51393: PUSH
51394: EMPTY
51395: LIST
51396: LIST
51397: PUSH
51398: LD_INT 4
51400: PUSH
51401: LD_INT 3
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: PUSH
51408: LD_INT 4
51410: PUSH
51411: LD_INT 4
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: PUSH
51418: LD_INT 3
51420: PUSH
51421: LD_INT 4
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: PUSH
51428: LD_INT 2
51430: PUSH
51431: LD_INT 3
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: PUSH
51438: LD_INT 2
51440: PUSH
51441: LD_INT 2
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: PUSH
51448: LD_INT 4
51450: PUSH
51451: LD_INT 2
51453: PUSH
51454: EMPTY
51455: LIST
51456: LIST
51457: PUSH
51458: LD_INT 2
51460: PUSH
51461: LD_INT 4
51463: PUSH
51464: EMPTY
51465: LIST
51466: LIST
51467: PUSH
51468: LD_INT 0
51470: PUSH
51471: LD_INT 4
51473: PUSH
51474: EMPTY
51475: LIST
51476: LIST
51477: PUSH
51478: LD_INT 0
51480: PUSH
51481: LD_INT 3
51483: PUSH
51484: EMPTY
51485: LIST
51486: LIST
51487: PUSH
51488: LD_INT 1
51490: PUSH
51491: LD_INT 4
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: PUSH
51498: LD_INT 1
51500: PUSH
51501: LD_INT 5
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: PUSH
51508: LD_INT 0
51510: PUSH
51511: LD_INT 5
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: PUSH
51518: LD_INT 1
51520: NEG
51521: PUSH
51522: LD_INT 4
51524: PUSH
51525: EMPTY
51526: LIST
51527: LIST
51528: PUSH
51529: LD_INT 1
51531: NEG
51532: PUSH
51533: LD_INT 3
51535: PUSH
51536: EMPTY
51537: LIST
51538: LIST
51539: PUSH
51540: LD_INT 2
51542: PUSH
51543: LD_INT 5
51545: PUSH
51546: EMPTY
51547: LIST
51548: LIST
51549: PUSH
51550: LD_INT 2
51552: NEG
51553: PUSH
51554: LD_INT 3
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: LIST
51565: LIST
51566: LIST
51567: LIST
51568: LIST
51569: LIST
51570: LIST
51571: LIST
51572: LIST
51573: LIST
51574: LIST
51575: LIST
51576: LIST
51577: LIST
51578: LIST
51579: LIST
51580: LIST
51581: LIST
51582: LIST
51583: LIST
51584: LIST
51585: LIST
51586: LIST
51587: LIST
51588: LIST
51589: LIST
51590: LIST
51591: LIST
51592: LIST
51593: LIST
51594: LIST
51595: LIST
51596: LIST
51597: LIST
51598: LIST
51599: LIST
51600: LIST
51601: LIST
51602: LIST
51603: LIST
51604: LIST
51605: LIST
51606: LIST
51607: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
51608: LD_ADDR_VAR 0 34
51612: PUSH
51613: LD_INT 0
51615: PUSH
51616: LD_INT 4
51618: NEG
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: PUSH
51624: LD_INT 0
51626: PUSH
51627: LD_INT 5
51629: NEG
51630: PUSH
51631: EMPTY
51632: LIST
51633: LIST
51634: PUSH
51635: LD_INT 1
51637: PUSH
51638: LD_INT 4
51640: NEG
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: PUSH
51646: LD_INT 1
51648: PUSH
51649: LD_INT 3
51651: NEG
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: PUSH
51657: LD_INT 0
51659: PUSH
51660: LD_INT 3
51662: NEG
51663: PUSH
51664: EMPTY
51665: LIST
51666: LIST
51667: PUSH
51668: LD_INT 1
51670: NEG
51671: PUSH
51672: LD_INT 4
51674: NEG
51675: PUSH
51676: EMPTY
51677: LIST
51678: LIST
51679: PUSH
51680: LD_INT 1
51682: NEG
51683: PUSH
51684: LD_INT 5
51686: NEG
51687: PUSH
51688: EMPTY
51689: LIST
51690: LIST
51691: PUSH
51692: LD_INT 2
51694: PUSH
51695: LD_INT 3
51697: NEG
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: PUSH
51703: LD_INT 2
51705: NEG
51706: PUSH
51707: LD_INT 5
51709: NEG
51710: PUSH
51711: EMPTY
51712: LIST
51713: LIST
51714: PUSH
51715: LD_INT 3
51717: PUSH
51718: LD_INT 0
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: PUSH
51725: LD_INT 3
51727: PUSH
51728: LD_INT 1
51730: NEG
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: PUSH
51736: LD_INT 4
51738: PUSH
51739: LD_INT 0
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: PUSH
51746: LD_INT 4
51748: PUSH
51749: LD_INT 1
51751: PUSH
51752: EMPTY
51753: LIST
51754: LIST
51755: PUSH
51756: LD_INT 3
51758: PUSH
51759: LD_INT 1
51761: PUSH
51762: EMPTY
51763: LIST
51764: LIST
51765: PUSH
51766: LD_INT 2
51768: PUSH
51769: LD_INT 0
51771: PUSH
51772: EMPTY
51773: LIST
51774: LIST
51775: PUSH
51776: LD_INT 2
51778: PUSH
51779: LD_INT 1
51781: NEG
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: PUSH
51787: LD_INT 2
51789: PUSH
51790: LD_INT 2
51792: NEG
51793: PUSH
51794: EMPTY
51795: LIST
51796: LIST
51797: PUSH
51798: LD_INT 4
51800: PUSH
51801: LD_INT 2
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: PUSH
51808: LD_INT 4
51810: PUSH
51811: LD_INT 4
51813: PUSH
51814: EMPTY
51815: LIST
51816: LIST
51817: PUSH
51818: LD_INT 4
51820: PUSH
51821: LD_INT 3
51823: PUSH
51824: EMPTY
51825: LIST
51826: LIST
51827: PUSH
51828: LD_INT 5
51830: PUSH
51831: LD_INT 4
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: PUSH
51838: LD_INT 5
51840: PUSH
51841: LD_INT 5
51843: PUSH
51844: EMPTY
51845: LIST
51846: LIST
51847: PUSH
51848: LD_INT 4
51850: PUSH
51851: LD_INT 5
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: PUSH
51858: LD_INT 3
51860: PUSH
51861: LD_INT 4
51863: PUSH
51864: EMPTY
51865: LIST
51866: LIST
51867: PUSH
51868: LD_INT 3
51870: PUSH
51871: LD_INT 3
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: PUSH
51878: LD_INT 5
51880: PUSH
51881: LD_INT 3
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: PUSH
51888: LD_INT 3
51890: PUSH
51891: LD_INT 5
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: PUSH
51898: LD_INT 0
51900: PUSH
51901: LD_INT 3
51903: PUSH
51904: EMPTY
51905: LIST
51906: LIST
51907: PUSH
51908: LD_INT 0
51910: PUSH
51911: LD_INT 2
51913: PUSH
51914: EMPTY
51915: LIST
51916: LIST
51917: PUSH
51918: LD_INT 1
51920: PUSH
51921: LD_INT 3
51923: PUSH
51924: EMPTY
51925: LIST
51926: LIST
51927: PUSH
51928: LD_INT 1
51930: PUSH
51931: LD_INT 4
51933: PUSH
51934: EMPTY
51935: LIST
51936: LIST
51937: PUSH
51938: LD_INT 0
51940: PUSH
51941: LD_INT 4
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: PUSH
51948: LD_INT 1
51950: NEG
51951: PUSH
51952: LD_INT 3
51954: PUSH
51955: EMPTY
51956: LIST
51957: LIST
51958: PUSH
51959: LD_INT 1
51961: NEG
51962: PUSH
51963: LD_INT 2
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: PUSH
51970: LD_INT 2
51972: PUSH
51973: LD_INT 4
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: PUSH
51980: LD_INT 2
51982: NEG
51983: PUSH
51984: LD_INT 2
51986: PUSH
51987: EMPTY
51988: LIST
51989: LIST
51990: PUSH
51991: LD_INT 4
51993: NEG
51994: PUSH
51995: LD_INT 0
51997: PUSH
51998: EMPTY
51999: LIST
52000: LIST
52001: PUSH
52002: LD_INT 4
52004: NEG
52005: PUSH
52006: LD_INT 1
52008: NEG
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: PUSH
52014: LD_INT 3
52016: NEG
52017: PUSH
52018: LD_INT 0
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 3
52027: NEG
52028: PUSH
52029: LD_INT 1
52031: PUSH
52032: EMPTY
52033: LIST
52034: LIST
52035: PUSH
52036: LD_INT 4
52038: NEG
52039: PUSH
52040: LD_INT 1
52042: PUSH
52043: EMPTY
52044: LIST
52045: LIST
52046: PUSH
52047: LD_INT 5
52049: NEG
52050: PUSH
52051: LD_INT 0
52053: PUSH
52054: EMPTY
52055: LIST
52056: LIST
52057: PUSH
52058: LD_INT 5
52060: NEG
52061: PUSH
52062: LD_INT 1
52064: NEG
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: PUSH
52070: LD_INT 5
52072: NEG
52073: PUSH
52074: LD_INT 2
52076: NEG
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: PUSH
52082: LD_INT 3
52084: NEG
52085: PUSH
52086: LD_INT 2
52088: PUSH
52089: EMPTY
52090: LIST
52091: LIST
52092: PUSH
52093: EMPTY
52094: LIST
52095: LIST
52096: LIST
52097: LIST
52098: LIST
52099: LIST
52100: LIST
52101: LIST
52102: LIST
52103: LIST
52104: LIST
52105: LIST
52106: LIST
52107: LIST
52108: LIST
52109: LIST
52110: LIST
52111: LIST
52112: LIST
52113: LIST
52114: LIST
52115: LIST
52116: LIST
52117: LIST
52118: LIST
52119: LIST
52120: LIST
52121: LIST
52122: LIST
52123: LIST
52124: LIST
52125: LIST
52126: LIST
52127: LIST
52128: LIST
52129: LIST
52130: LIST
52131: LIST
52132: LIST
52133: LIST
52134: LIST
52135: LIST
52136: LIST
52137: LIST
52138: LIST
52139: ST_TO_ADDR
// end ; end ;
52140: GO 52143
52142: POP
// case btype of b_depot , b_warehouse :
52143: LD_VAR 0 1
52147: PUSH
52148: LD_INT 0
52150: DOUBLE
52151: EQUAL
52152: IFTRUE 52162
52154: LD_INT 1
52156: DOUBLE
52157: EQUAL
52158: IFTRUE 52162
52160: GO 52363
52162: POP
// case nation of nation_american :
52163: LD_VAR 0 5
52167: PUSH
52168: LD_INT 1
52170: DOUBLE
52171: EQUAL
52172: IFTRUE 52176
52174: GO 52232
52176: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
52177: LD_ADDR_VAR 0 9
52181: PUSH
52182: LD_VAR 0 11
52186: PUSH
52187: LD_VAR 0 12
52191: PUSH
52192: LD_VAR 0 13
52196: PUSH
52197: LD_VAR 0 14
52201: PUSH
52202: LD_VAR 0 15
52206: PUSH
52207: LD_VAR 0 16
52211: PUSH
52212: EMPTY
52213: LIST
52214: LIST
52215: LIST
52216: LIST
52217: LIST
52218: LIST
52219: PUSH
52220: LD_VAR 0 4
52224: PUSH
52225: LD_INT 1
52227: PLUS
52228: ARRAY
52229: ST_TO_ADDR
52230: GO 52361
52232: LD_INT 2
52234: DOUBLE
52235: EQUAL
52236: IFTRUE 52240
52238: GO 52296
52240: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
52241: LD_ADDR_VAR 0 9
52245: PUSH
52246: LD_VAR 0 17
52250: PUSH
52251: LD_VAR 0 18
52255: PUSH
52256: LD_VAR 0 19
52260: PUSH
52261: LD_VAR 0 20
52265: PUSH
52266: LD_VAR 0 21
52270: PUSH
52271: LD_VAR 0 22
52275: PUSH
52276: EMPTY
52277: LIST
52278: LIST
52279: LIST
52280: LIST
52281: LIST
52282: LIST
52283: PUSH
52284: LD_VAR 0 4
52288: PUSH
52289: LD_INT 1
52291: PLUS
52292: ARRAY
52293: ST_TO_ADDR
52294: GO 52361
52296: LD_INT 3
52298: DOUBLE
52299: EQUAL
52300: IFTRUE 52304
52302: GO 52360
52304: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
52305: LD_ADDR_VAR 0 9
52309: PUSH
52310: LD_VAR 0 23
52314: PUSH
52315: LD_VAR 0 24
52319: PUSH
52320: LD_VAR 0 25
52324: PUSH
52325: LD_VAR 0 26
52329: PUSH
52330: LD_VAR 0 27
52334: PUSH
52335: LD_VAR 0 28
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: PUSH
52348: LD_VAR 0 4
52352: PUSH
52353: LD_INT 1
52355: PLUS
52356: ARRAY
52357: ST_TO_ADDR
52358: GO 52361
52360: POP
52361: GO 52916
52363: LD_INT 2
52365: DOUBLE
52366: EQUAL
52367: IFTRUE 52377
52369: LD_INT 3
52371: DOUBLE
52372: EQUAL
52373: IFTRUE 52377
52375: GO 52433
52377: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
52378: LD_ADDR_VAR 0 9
52382: PUSH
52383: LD_VAR 0 29
52387: PUSH
52388: LD_VAR 0 30
52392: PUSH
52393: LD_VAR 0 31
52397: PUSH
52398: LD_VAR 0 32
52402: PUSH
52403: LD_VAR 0 33
52407: PUSH
52408: LD_VAR 0 34
52412: PUSH
52413: EMPTY
52414: LIST
52415: LIST
52416: LIST
52417: LIST
52418: LIST
52419: LIST
52420: PUSH
52421: LD_VAR 0 4
52425: PUSH
52426: LD_INT 1
52428: PLUS
52429: ARRAY
52430: ST_TO_ADDR
52431: GO 52916
52433: LD_INT 16
52435: DOUBLE
52436: EQUAL
52437: IFTRUE 52495
52439: LD_INT 17
52441: DOUBLE
52442: EQUAL
52443: IFTRUE 52495
52445: LD_INT 18
52447: DOUBLE
52448: EQUAL
52449: IFTRUE 52495
52451: LD_INT 19
52453: DOUBLE
52454: EQUAL
52455: IFTRUE 52495
52457: LD_INT 22
52459: DOUBLE
52460: EQUAL
52461: IFTRUE 52495
52463: LD_INT 20
52465: DOUBLE
52466: EQUAL
52467: IFTRUE 52495
52469: LD_INT 21
52471: DOUBLE
52472: EQUAL
52473: IFTRUE 52495
52475: LD_INT 23
52477: DOUBLE
52478: EQUAL
52479: IFTRUE 52495
52481: LD_INT 24
52483: DOUBLE
52484: EQUAL
52485: IFTRUE 52495
52487: LD_INT 25
52489: DOUBLE
52490: EQUAL
52491: IFTRUE 52495
52493: GO 52551
52495: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
52496: LD_ADDR_VAR 0 9
52500: PUSH
52501: LD_VAR 0 35
52505: PUSH
52506: LD_VAR 0 36
52510: PUSH
52511: LD_VAR 0 37
52515: PUSH
52516: LD_VAR 0 38
52520: PUSH
52521: LD_VAR 0 39
52525: PUSH
52526: LD_VAR 0 40
52530: PUSH
52531: EMPTY
52532: LIST
52533: LIST
52534: LIST
52535: LIST
52536: LIST
52537: LIST
52538: PUSH
52539: LD_VAR 0 4
52543: PUSH
52544: LD_INT 1
52546: PLUS
52547: ARRAY
52548: ST_TO_ADDR
52549: GO 52916
52551: LD_INT 6
52553: DOUBLE
52554: EQUAL
52555: IFTRUE 52607
52557: LD_INT 7
52559: DOUBLE
52560: EQUAL
52561: IFTRUE 52607
52563: LD_INT 8
52565: DOUBLE
52566: EQUAL
52567: IFTRUE 52607
52569: LD_INT 13
52571: DOUBLE
52572: EQUAL
52573: IFTRUE 52607
52575: LD_INT 12
52577: DOUBLE
52578: EQUAL
52579: IFTRUE 52607
52581: LD_INT 15
52583: DOUBLE
52584: EQUAL
52585: IFTRUE 52607
52587: LD_INT 11
52589: DOUBLE
52590: EQUAL
52591: IFTRUE 52607
52593: LD_INT 14
52595: DOUBLE
52596: EQUAL
52597: IFTRUE 52607
52599: LD_INT 10
52601: DOUBLE
52602: EQUAL
52603: IFTRUE 52607
52605: GO 52663
52607: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
52608: LD_ADDR_VAR 0 9
52612: PUSH
52613: LD_VAR 0 41
52617: PUSH
52618: LD_VAR 0 42
52622: PUSH
52623: LD_VAR 0 43
52627: PUSH
52628: LD_VAR 0 44
52632: PUSH
52633: LD_VAR 0 45
52637: PUSH
52638: LD_VAR 0 46
52642: PUSH
52643: EMPTY
52644: LIST
52645: LIST
52646: LIST
52647: LIST
52648: LIST
52649: LIST
52650: PUSH
52651: LD_VAR 0 4
52655: PUSH
52656: LD_INT 1
52658: PLUS
52659: ARRAY
52660: ST_TO_ADDR
52661: GO 52916
52663: LD_INT 36
52665: DOUBLE
52666: EQUAL
52667: IFTRUE 52671
52669: GO 52727
52671: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
52672: LD_ADDR_VAR 0 9
52676: PUSH
52677: LD_VAR 0 47
52681: PUSH
52682: LD_VAR 0 48
52686: PUSH
52687: LD_VAR 0 49
52691: PUSH
52692: LD_VAR 0 50
52696: PUSH
52697: LD_VAR 0 51
52701: PUSH
52702: LD_VAR 0 52
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: LIST
52711: LIST
52712: LIST
52713: LIST
52714: PUSH
52715: LD_VAR 0 4
52719: PUSH
52720: LD_INT 1
52722: PLUS
52723: ARRAY
52724: ST_TO_ADDR
52725: GO 52916
52727: LD_INT 4
52729: DOUBLE
52730: EQUAL
52731: IFTRUE 52753
52733: LD_INT 5
52735: DOUBLE
52736: EQUAL
52737: IFTRUE 52753
52739: LD_INT 34
52741: DOUBLE
52742: EQUAL
52743: IFTRUE 52753
52745: LD_INT 37
52747: DOUBLE
52748: EQUAL
52749: IFTRUE 52753
52751: GO 52809
52753: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
52754: LD_ADDR_VAR 0 9
52758: PUSH
52759: LD_VAR 0 53
52763: PUSH
52764: LD_VAR 0 54
52768: PUSH
52769: LD_VAR 0 55
52773: PUSH
52774: LD_VAR 0 56
52778: PUSH
52779: LD_VAR 0 57
52783: PUSH
52784: LD_VAR 0 58
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: LIST
52793: LIST
52794: LIST
52795: LIST
52796: PUSH
52797: LD_VAR 0 4
52801: PUSH
52802: LD_INT 1
52804: PLUS
52805: ARRAY
52806: ST_TO_ADDR
52807: GO 52916
52809: LD_INT 31
52811: DOUBLE
52812: EQUAL
52813: IFTRUE 52859
52815: LD_INT 32
52817: DOUBLE
52818: EQUAL
52819: IFTRUE 52859
52821: LD_INT 33
52823: DOUBLE
52824: EQUAL
52825: IFTRUE 52859
52827: LD_INT 27
52829: DOUBLE
52830: EQUAL
52831: IFTRUE 52859
52833: LD_INT 26
52835: DOUBLE
52836: EQUAL
52837: IFTRUE 52859
52839: LD_INT 28
52841: DOUBLE
52842: EQUAL
52843: IFTRUE 52859
52845: LD_INT 29
52847: DOUBLE
52848: EQUAL
52849: IFTRUE 52859
52851: LD_INT 30
52853: DOUBLE
52854: EQUAL
52855: IFTRUE 52859
52857: GO 52915
52859: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
52860: LD_ADDR_VAR 0 9
52864: PUSH
52865: LD_VAR 0 59
52869: PUSH
52870: LD_VAR 0 60
52874: PUSH
52875: LD_VAR 0 61
52879: PUSH
52880: LD_VAR 0 62
52884: PUSH
52885: LD_VAR 0 63
52889: PUSH
52890: LD_VAR 0 64
52894: PUSH
52895: EMPTY
52896: LIST
52897: LIST
52898: LIST
52899: LIST
52900: LIST
52901: LIST
52902: PUSH
52903: LD_VAR 0 4
52907: PUSH
52908: LD_INT 1
52910: PLUS
52911: ARRAY
52912: ST_TO_ADDR
52913: GO 52916
52915: POP
// temp_list2 = [ ] ;
52916: LD_ADDR_VAR 0 10
52920: PUSH
52921: EMPTY
52922: ST_TO_ADDR
// for i in temp_list do
52923: LD_ADDR_VAR 0 8
52927: PUSH
52928: LD_VAR 0 9
52932: PUSH
52933: FOR_IN
52934: IFFALSE 52986
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
52936: LD_ADDR_VAR 0 10
52940: PUSH
52941: LD_VAR 0 10
52945: PUSH
52946: LD_VAR 0 8
52950: PUSH
52951: LD_INT 1
52953: ARRAY
52954: PUSH
52955: LD_VAR 0 2
52959: PLUS
52960: PUSH
52961: LD_VAR 0 8
52965: PUSH
52966: LD_INT 2
52968: ARRAY
52969: PUSH
52970: LD_VAR 0 3
52974: PLUS
52975: PUSH
52976: EMPTY
52977: LIST
52978: LIST
52979: PUSH
52980: EMPTY
52981: LIST
52982: ADD
52983: ST_TO_ADDR
52984: GO 52933
52986: POP
52987: POP
// result = temp_list2 ;
52988: LD_ADDR_VAR 0 7
52992: PUSH
52993: LD_VAR 0 10
52997: ST_TO_ADDR
// end ;
52998: LD_VAR 0 7
53002: RET
// export function EnemyInRange ( unit , dist ) ; begin
53003: LD_INT 0
53005: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
53006: LD_ADDR_VAR 0 3
53010: PUSH
53011: LD_VAR 0 1
53015: PPUSH
53016: CALL_OW 255
53020: PPUSH
53021: LD_VAR 0 1
53025: PPUSH
53026: CALL_OW 250
53030: PPUSH
53031: LD_VAR 0 1
53035: PPUSH
53036: CALL_OW 251
53040: PPUSH
53041: LD_VAR 0 2
53045: PPUSH
53046: CALL 27107 0 4
53050: PUSH
53051: LD_INT 4
53053: ARRAY
53054: ST_TO_ADDR
// end ;
53055: LD_VAR 0 3
53059: RET
// export function PlayerSeeMe ( unit ) ; begin
53060: LD_INT 0
53062: PPUSH
// result := See ( your_side , unit ) ;
53063: LD_ADDR_VAR 0 2
53067: PUSH
53068: LD_OWVAR 2
53072: PPUSH
53073: LD_VAR 0 1
53077: PPUSH
53078: CALL_OW 292
53082: ST_TO_ADDR
// end ;
53083: LD_VAR 0 2
53087: RET
// export function ReverseDir ( unit ) ; begin
53088: LD_INT 0
53090: PPUSH
// if not unit then
53091: LD_VAR 0 1
53095: NOT
53096: IFFALSE 53100
// exit ;
53098: GO 53146
// result := [ 3 , 4 , 5 , 0 , 1 , 2 ] [ GetDir ( unit ) + 1 ] ;
53100: LD_ADDR_VAR 0 2
53104: PUSH
53105: LD_INT 3
53107: PUSH
53108: LD_INT 4
53110: PUSH
53111: LD_INT 5
53113: PUSH
53114: LD_INT 0
53116: PUSH
53117: LD_INT 1
53119: PUSH
53120: LD_INT 2
53122: PUSH
53123: EMPTY
53124: LIST
53125: LIST
53126: LIST
53127: LIST
53128: LIST
53129: LIST
53130: PUSH
53131: LD_VAR 0 1
53135: PPUSH
53136: CALL_OW 254
53140: PUSH
53141: LD_INT 1
53143: PLUS
53144: ARRAY
53145: ST_TO_ADDR
// end ;
53146: LD_VAR 0 2
53150: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
53151: LD_INT 0
53153: PPUSH
53154: PPUSH
53155: PPUSH
53156: PPUSH
53157: PPUSH
// if not hexes then
53158: LD_VAR 0 2
53162: NOT
53163: IFFALSE 53167
// exit ;
53165: GO 53315
// dist := 9999 ;
53167: LD_ADDR_VAR 0 5
53171: PUSH
53172: LD_INT 9999
53174: ST_TO_ADDR
// for i = 1 to hexes do
53175: LD_ADDR_VAR 0 4
53179: PUSH
53180: DOUBLE
53181: LD_INT 1
53183: DEC
53184: ST_TO_ADDR
53185: LD_VAR 0 2
53189: PUSH
53190: FOR_TO
53191: IFFALSE 53303
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
53193: LD_VAR 0 1
53197: PPUSH
53198: LD_VAR 0 2
53202: PUSH
53203: LD_VAR 0 4
53207: ARRAY
53208: PUSH
53209: LD_INT 1
53211: ARRAY
53212: PPUSH
53213: LD_VAR 0 2
53217: PUSH
53218: LD_VAR 0 4
53222: ARRAY
53223: PUSH
53224: LD_INT 2
53226: ARRAY
53227: PPUSH
53228: CALL_OW 297
53232: PUSH
53233: LD_VAR 0 5
53237: LESS
53238: IFFALSE 53301
// begin hex := hexes [ i ] ;
53240: LD_ADDR_VAR 0 7
53244: PUSH
53245: LD_VAR 0 2
53249: PUSH
53250: LD_VAR 0 4
53254: ARRAY
53255: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53256: LD_ADDR_VAR 0 5
53260: PUSH
53261: LD_VAR 0 1
53265: PPUSH
53266: LD_VAR 0 2
53270: PUSH
53271: LD_VAR 0 4
53275: ARRAY
53276: PUSH
53277: LD_INT 1
53279: ARRAY
53280: PPUSH
53281: LD_VAR 0 2
53285: PUSH
53286: LD_VAR 0 4
53290: ARRAY
53291: PUSH
53292: LD_INT 2
53294: ARRAY
53295: PPUSH
53296: CALL_OW 297
53300: ST_TO_ADDR
// end ; end ;
53301: GO 53190
53303: POP
53304: POP
// result := hex ;
53305: LD_ADDR_VAR 0 3
53309: PUSH
53310: LD_VAR 0 7
53314: ST_TO_ADDR
// end ;
53315: LD_VAR 0 3
53319: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
53320: LD_INT 0
53322: PPUSH
53323: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
53324: LD_VAR 0 1
53328: NOT
53329: PUSH
53330: LD_VAR 0 1
53334: PUSH
53335: LD_INT 21
53337: PUSH
53338: LD_INT 2
53340: PUSH
53341: EMPTY
53342: LIST
53343: LIST
53344: PUSH
53345: LD_INT 23
53347: PUSH
53348: LD_INT 2
53350: PUSH
53351: EMPTY
53352: LIST
53353: LIST
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PPUSH
53359: CALL_OW 69
53363: IN
53364: NOT
53365: OR
53366: IFFALSE 53370
// exit ;
53368: GO 53417
// for i = 1 to 3 do
53370: LD_ADDR_VAR 0 3
53374: PUSH
53375: DOUBLE
53376: LD_INT 1
53378: DEC
53379: ST_TO_ADDR
53380: LD_INT 3
53382: PUSH
53383: FOR_TO
53384: IFFALSE 53415
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
53386: LD_VAR 0 1
53390: PPUSH
53391: CALL_OW 250
53395: PPUSH
53396: LD_VAR 0 1
53400: PPUSH
53401: CALL_OW 251
53405: PPUSH
53406: LD_INT 1
53408: PPUSH
53409: CALL_OW 453
53413: GO 53383
53415: POP
53416: POP
// end ;
53417: LD_VAR 0 2
53421: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
53422: LD_INT 0
53424: PPUSH
53425: PPUSH
53426: PPUSH
53427: PPUSH
53428: PPUSH
53429: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
53430: LD_VAR 0 1
53434: NOT
53435: PUSH
53436: LD_VAR 0 2
53440: NOT
53441: OR
53442: PUSH
53443: LD_VAR 0 1
53447: PPUSH
53448: CALL_OW 314
53452: OR
53453: IFFALSE 53457
// exit ;
53455: GO 53898
// x := GetX ( enemy_unit ) ;
53457: LD_ADDR_VAR 0 7
53461: PUSH
53462: LD_VAR 0 2
53466: PPUSH
53467: CALL_OW 250
53471: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
53472: LD_ADDR_VAR 0 8
53476: PUSH
53477: LD_VAR 0 2
53481: PPUSH
53482: CALL_OW 251
53486: ST_TO_ADDR
// if not x or not y then
53487: LD_VAR 0 7
53491: NOT
53492: PUSH
53493: LD_VAR 0 8
53497: NOT
53498: OR
53499: IFFALSE 53503
// exit ;
53501: GO 53898
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
53503: LD_ADDR_VAR 0 6
53507: PUSH
53508: LD_VAR 0 7
53512: PPUSH
53513: LD_INT 0
53515: PPUSH
53516: LD_INT 4
53518: PPUSH
53519: CALL_OW 272
53523: PUSH
53524: LD_VAR 0 8
53528: PPUSH
53529: LD_INT 0
53531: PPUSH
53532: LD_INT 4
53534: PPUSH
53535: CALL_OW 273
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: PUSH
53544: LD_VAR 0 7
53548: PPUSH
53549: LD_INT 1
53551: PPUSH
53552: LD_INT 4
53554: PPUSH
53555: CALL_OW 272
53559: PUSH
53560: LD_VAR 0 8
53564: PPUSH
53565: LD_INT 1
53567: PPUSH
53568: LD_INT 4
53570: PPUSH
53571: CALL_OW 273
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: PUSH
53580: LD_VAR 0 7
53584: PPUSH
53585: LD_INT 2
53587: PPUSH
53588: LD_INT 4
53590: PPUSH
53591: CALL_OW 272
53595: PUSH
53596: LD_VAR 0 8
53600: PPUSH
53601: LD_INT 2
53603: PPUSH
53604: LD_INT 4
53606: PPUSH
53607: CALL_OW 273
53611: PUSH
53612: EMPTY
53613: LIST
53614: LIST
53615: PUSH
53616: LD_VAR 0 7
53620: PPUSH
53621: LD_INT 3
53623: PPUSH
53624: LD_INT 4
53626: PPUSH
53627: CALL_OW 272
53631: PUSH
53632: LD_VAR 0 8
53636: PPUSH
53637: LD_INT 3
53639: PPUSH
53640: LD_INT 4
53642: PPUSH
53643: CALL_OW 273
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: PUSH
53652: LD_VAR 0 7
53656: PPUSH
53657: LD_INT 4
53659: PPUSH
53660: LD_INT 4
53662: PPUSH
53663: CALL_OW 272
53667: PUSH
53668: LD_VAR 0 8
53672: PPUSH
53673: LD_INT 4
53675: PPUSH
53676: LD_INT 4
53678: PPUSH
53679: CALL_OW 273
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: LD_VAR 0 7
53692: PPUSH
53693: LD_INT 5
53695: PPUSH
53696: LD_INT 4
53698: PPUSH
53699: CALL_OW 272
53703: PUSH
53704: LD_VAR 0 8
53708: PPUSH
53709: LD_INT 5
53711: PPUSH
53712: LD_INT 4
53714: PPUSH
53715: CALL_OW 273
53719: PUSH
53720: EMPTY
53721: LIST
53722: LIST
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: LIST
53728: LIST
53729: LIST
53730: LIST
53731: ST_TO_ADDR
// for i = tmp downto 1 do
53732: LD_ADDR_VAR 0 4
53736: PUSH
53737: DOUBLE
53738: LD_VAR 0 6
53742: INC
53743: ST_TO_ADDR
53744: LD_INT 1
53746: PUSH
53747: FOR_DOWNTO
53748: IFFALSE 53849
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
53750: LD_VAR 0 6
53754: PUSH
53755: LD_VAR 0 4
53759: ARRAY
53760: PUSH
53761: LD_INT 1
53763: ARRAY
53764: PPUSH
53765: LD_VAR 0 6
53769: PUSH
53770: LD_VAR 0 4
53774: ARRAY
53775: PUSH
53776: LD_INT 2
53778: ARRAY
53779: PPUSH
53780: CALL_OW 488
53784: NOT
53785: PUSH
53786: LD_VAR 0 6
53790: PUSH
53791: LD_VAR 0 4
53795: ARRAY
53796: PUSH
53797: LD_INT 1
53799: ARRAY
53800: PPUSH
53801: LD_VAR 0 6
53805: PUSH
53806: LD_VAR 0 4
53810: ARRAY
53811: PUSH
53812: LD_INT 2
53814: ARRAY
53815: PPUSH
53816: CALL_OW 428
53820: PUSH
53821: LD_INT 0
53823: NONEQUAL
53824: OR
53825: IFFALSE 53847
// tmp := Delete ( tmp , i ) ;
53827: LD_ADDR_VAR 0 6
53831: PUSH
53832: LD_VAR 0 6
53836: PPUSH
53837: LD_VAR 0 4
53841: PPUSH
53842: CALL_OW 3
53846: ST_TO_ADDR
53847: GO 53747
53849: POP
53850: POP
// j := GetClosestHex ( unit , tmp ) ;
53851: LD_ADDR_VAR 0 5
53855: PUSH
53856: LD_VAR 0 1
53860: PPUSH
53861: LD_VAR 0 6
53865: PPUSH
53866: CALL 53151 0 2
53870: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
53871: LD_VAR 0 1
53875: PPUSH
53876: LD_VAR 0 5
53880: PUSH
53881: LD_INT 1
53883: ARRAY
53884: PPUSH
53885: LD_VAR 0 5
53889: PUSH
53890: LD_INT 2
53892: ARRAY
53893: PPUSH
53894: CALL_OW 111
// end ;
53898: LD_VAR 0 3
53902: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
53903: LD_INT 0
53905: PPUSH
53906: PPUSH
53907: PPUSH
// uc_side = 0 ;
53908: LD_ADDR_OWVAR 20
53912: PUSH
53913: LD_INT 0
53915: ST_TO_ADDR
// uc_nation = 0 ;
53916: LD_ADDR_OWVAR 21
53920: PUSH
53921: LD_INT 0
53923: ST_TO_ADDR
// InitHc ;
53924: CALL_OW 19
// InitVc ;
53928: CALL_OW 20
// if mastodonts then
53932: LD_VAR 0 6
53936: IFFALSE 54003
// for i = 1 to mastodonts do
53938: LD_ADDR_VAR 0 11
53942: PUSH
53943: DOUBLE
53944: LD_INT 1
53946: DEC
53947: ST_TO_ADDR
53948: LD_VAR 0 6
53952: PUSH
53953: FOR_TO
53954: IFFALSE 54001
// begin vc_chassis := 31 ;
53956: LD_ADDR_OWVAR 37
53960: PUSH
53961: LD_INT 31
53963: ST_TO_ADDR
// vc_control := control_rider ;
53964: LD_ADDR_OWVAR 38
53968: PUSH
53969: LD_INT 4
53971: ST_TO_ADDR
// animal := CreateVehicle ;
53972: LD_ADDR_VAR 0 12
53976: PUSH
53977: CALL_OW 45
53981: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53982: LD_VAR 0 12
53986: PPUSH
53987: LD_VAR 0 8
53991: PPUSH
53992: LD_INT 0
53994: PPUSH
53995: CALL 60748 0 3
// end ;
53999: GO 53953
54001: POP
54002: POP
// if horses then
54003: LD_VAR 0 5
54007: IFFALSE 54074
// for i = 1 to horses do
54009: LD_ADDR_VAR 0 11
54013: PUSH
54014: DOUBLE
54015: LD_INT 1
54017: DEC
54018: ST_TO_ADDR
54019: LD_VAR 0 5
54023: PUSH
54024: FOR_TO
54025: IFFALSE 54072
// begin hc_class := 21 ;
54027: LD_ADDR_OWVAR 28
54031: PUSH
54032: LD_INT 21
54034: ST_TO_ADDR
// hc_gallery :=  ;
54035: LD_ADDR_OWVAR 33
54039: PUSH
54040: LD_STRING 
54042: ST_TO_ADDR
// animal := CreateHuman ;
54043: LD_ADDR_VAR 0 12
54047: PUSH
54048: CALL_OW 44
54052: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54053: LD_VAR 0 12
54057: PPUSH
54058: LD_VAR 0 8
54062: PPUSH
54063: LD_INT 0
54065: PPUSH
54066: CALL 60748 0 3
// end ;
54070: GO 54024
54072: POP
54073: POP
// if birds then
54074: LD_VAR 0 1
54078: IFFALSE 54145
// for i = 1 to birds do
54080: LD_ADDR_VAR 0 11
54084: PUSH
54085: DOUBLE
54086: LD_INT 1
54088: DEC
54089: ST_TO_ADDR
54090: LD_VAR 0 1
54094: PUSH
54095: FOR_TO
54096: IFFALSE 54143
// begin hc_class = 18 ;
54098: LD_ADDR_OWVAR 28
54102: PUSH
54103: LD_INT 18
54105: ST_TO_ADDR
// hc_gallery =  ;
54106: LD_ADDR_OWVAR 33
54110: PUSH
54111: LD_STRING 
54113: ST_TO_ADDR
// animal := CreateHuman ;
54114: LD_ADDR_VAR 0 12
54118: PUSH
54119: CALL_OW 44
54123: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54124: LD_VAR 0 12
54128: PPUSH
54129: LD_VAR 0 8
54133: PPUSH
54134: LD_INT 0
54136: PPUSH
54137: CALL 60748 0 3
// end ;
54141: GO 54095
54143: POP
54144: POP
// if tigers then
54145: LD_VAR 0 2
54149: IFFALSE 54233
// for i = 1 to tigers do
54151: LD_ADDR_VAR 0 11
54155: PUSH
54156: DOUBLE
54157: LD_INT 1
54159: DEC
54160: ST_TO_ADDR
54161: LD_VAR 0 2
54165: PUSH
54166: FOR_TO
54167: IFFALSE 54231
// begin hc_class = class_tiger ;
54169: LD_ADDR_OWVAR 28
54173: PUSH
54174: LD_INT 14
54176: ST_TO_ADDR
// hc_gallery =  ;
54177: LD_ADDR_OWVAR 33
54181: PUSH
54182: LD_STRING 
54184: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
54185: LD_ADDR_OWVAR 35
54189: PUSH
54190: LD_INT 7
54192: NEG
54193: PPUSH
54194: LD_INT 7
54196: PPUSH
54197: CALL_OW 12
54201: ST_TO_ADDR
// animal := CreateHuman ;
54202: LD_ADDR_VAR 0 12
54206: PUSH
54207: CALL_OW 44
54211: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54212: LD_VAR 0 12
54216: PPUSH
54217: LD_VAR 0 8
54221: PPUSH
54222: LD_INT 0
54224: PPUSH
54225: CALL 60748 0 3
// end ;
54229: GO 54166
54231: POP
54232: POP
// if apemans then
54233: LD_VAR 0 3
54237: IFFALSE 54360
// for i = 1 to apemans do
54239: LD_ADDR_VAR 0 11
54243: PUSH
54244: DOUBLE
54245: LD_INT 1
54247: DEC
54248: ST_TO_ADDR
54249: LD_VAR 0 3
54253: PUSH
54254: FOR_TO
54255: IFFALSE 54358
// begin hc_class = class_apeman ;
54257: LD_ADDR_OWVAR 28
54261: PUSH
54262: LD_INT 12
54264: ST_TO_ADDR
// hc_gallery =  ;
54265: LD_ADDR_OWVAR 33
54269: PUSH
54270: LD_STRING 
54272: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
54273: LD_ADDR_OWVAR 35
54277: PUSH
54278: LD_INT 5
54280: NEG
54281: PPUSH
54282: LD_INT 5
54284: PPUSH
54285: CALL_OW 12
54289: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
54290: LD_ADDR_OWVAR 31
54294: PUSH
54295: LD_INT 1
54297: PPUSH
54298: LD_INT 3
54300: PPUSH
54301: CALL_OW 12
54305: PUSH
54306: LD_INT 1
54308: PPUSH
54309: LD_INT 3
54311: PPUSH
54312: CALL_OW 12
54316: PUSH
54317: LD_INT 0
54319: PUSH
54320: LD_INT 0
54322: PUSH
54323: EMPTY
54324: LIST
54325: LIST
54326: LIST
54327: LIST
54328: ST_TO_ADDR
// animal := CreateHuman ;
54329: LD_ADDR_VAR 0 12
54333: PUSH
54334: CALL_OW 44
54338: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54339: LD_VAR 0 12
54343: PPUSH
54344: LD_VAR 0 8
54348: PPUSH
54349: LD_INT 0
54351: PPUSH
54352: CALL 60748 0 3
// end ;
54356: GO 54254
54358: POP
54359: POP
// if enchidnas then
54360: LD_VAR 0 4
54364: IFFALSE 54431
// for i = 1 to enchidnas do
54366: LD_ADDR_VAR 0 11
54370: PUSH
54371: DOUBLE
54372: LD_INT 1
54374: DEC
54375: ST_TO_ADDR
54376: LD_VAR 0 4
54380: PUSH
54381: FOR_TO
54382: IFFALSE 54429
// begin hc_class = 13 ;
54384: LD_ADDR_OWVAR 28
54388: PUSH
54389: LD_INT 13
54391: ST_TO_ADDR
// hc_gallery =  ;
54392: LD_ADDR_OWVAR 33
54396: PUSH
54397: LD_STRING 
54399: ST_TO_ADDR
// animal := CreateHuman ;
54400: LD_ADDR_VAR 0 12
54404: PUSH
54405: CALL_OW 44
54409: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54410: LD_VAR 0 12
54414: PPUSH
54415: LD_VAR 0 8
54419: PPUSH
54420: LD_INT 0
54422: PPUSH
54423: CALL 60748 0 3
// end ;
54427: GO 54381
54429: POP
54430: POP
// if fishes then
54431: LD_VAR 0 7
54435: IFFALSE 54502
// for i = 1 to fishes do
54437: LD_ADDR_VAR 0 11
54441: PUSH
54442: DOUBLE
54443: LD_INT 1
54445: DEC
54446: ST_TO_ADDR
54447: LD_VAR 0 7
54451: PUSH
54452: FOR_TO
54453: IFFALSE 54500
// begin hc_class = 20 ;
54455: LD_ADDR_OWVAR 28
54459: PUSH
54460: LD_INT 20
54462: ST_TO_ADDR
// hc_gallery =  ;
54463: LD_ADDR_OWVAR 33
54467: PUSH
54468: LD_STRING 
54470: ST_TO_ADDR
// animal := CreateHuman ;
54471: LD_ADDR_VAR 0 12
54475: PUSH
54476: CALL_OW 44
54480: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
54481: LD_VAR 0 12
54485: PPUSH
54486: LD_VAR 0 9
54490: PPUSH
54491: LD_INT 0
54493: PPUSH
54494: CALL 60748 0 3
// end ;
54498: GO 54452
54500: POP
54501: POP
// end ;
54502: LD_VAR 0 10
54506: RET
// export function WantHeal ( sci , unit ) ; begin
54507: LD_INT 0
54509: PPUSH
// if GetTaskList ( sci ) > 0 then
54510: LD_VAR 0 1
54514: PPUSH
54515: CALL_OW 437
54519: PUSH
54520: LD_INT 0
54522: GREATER
54523: IFFALSE 54593
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
54525: LD_VAR 0 1
54529: PPUSH
54530: CALL_OW 437
54534: PUSH
54535: LD_INT 1
54537: ARRAY
54538: PUSH
54539: LD_INT 1
54541: ARRAY
54542: PUSH
54543: LD_STRING l
54545: EQUAL
54546: PUSH
54547: LD_VAR 0 1
54551: PPUSH
54552: CALL_OW 437
54556: PUSH
54557: LD_INT 1
54559: ARRAY
54560: PUSH
54561: LD_INT 4
54563: ARRAY
54564: PUSH
54565: LD_VAR 0 2
54569: EQUAL
54570: AND
54571: IFFALSE 54583
// result := true else
54573: LD_ADDR_VAR 0 3
54577: PUSH
54578: LD_INT 1
54580: ST_TO_ADDR
54581: GO 54591
// result := false ;
54583: LD_ADDR_VAR 0 3
54587: PUSH
54588: LD_INT 0
54590: ST_TO_ADDR
// end else
54591: GO 54601
// result := false ;
54593: LD_ADDR_VAR 0 3
54597: PUSH
54598: LD_INT 0
54600: ST_TO_ADDR
// end ;
54601: LD_VAR 0 3
54605: RET
// export function HealTarget ( sci ) ; begin
54606: LD_INT 0
54608: PPUSH
// if not sci then
54609: LD_VAR 0 1
54613: NOT
54614: IFFALSE 54618
// exit ;
54616: GO 54683
// result := 0 ;
54618: LD_ADDR_VAR 0 2
54622: PUSH
54623: LD_INT 0
54625: ST_TO_ADDR
// if GetTaskList ( sci ) then
54626: LD_VAR 0 1
54630: PPUSH
54631: CALL_OW 437
54635: IFFALSE 54683
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
54637: LD_VAR 0 1
54641: PPUSH
54642: CALL_OW 437
54646: PUSH
54647: LD_INT 1
54649: ARRAY
54650: PUSH
54651: LD_INT 1
54653: ARRAY
54654: PUSH
54655: LD_STRING l
54657: EQUAL
54658: IFFALSE 54683
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
54660: LD_ADDR_VAR 0 2
54664: PUSH
54665: LD_VAR 0 1
54669: PPUSH
54670: CALL_OW 437
54674: PUSH
54675: LD_INT 1
54677: ARRAY
54678: PUSH
54679: LD_INT 4
54681: ARRAY
54682: ST_TO_ADDR
// end ;
54683: LD_VAR 0 2
54687: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking , to_heal , healers , to_repair , repairs , empty_vehs , side ; begin
54688: LD_INT 0
54690: PPUSH
54691: PPUSH
54692: PPUSH
54693: PPUSH
54694: PPUSH
54695: PPUSH
54696: PPUSH
54697: PPUSH
54698: PPUSH
54699: PPUSH
54700: PPUSH
54701: PPUSH
54702: PPUSH
54703: PPUSH
54704: PPUSH
54705: PPUSH
54706: PPUSH
54707: PPUSH
54708: PPUSH
54709: PPUSH
54710: PPUSH
54711: PPUSH
54712: PPUSH
54713: PPUSH
54714: PPUSH
54715: PPUSH
54716: PPUSH
54717: PPUSH
54718: PPUSH
54719: PPUSH
54720: PPUSH
54721: PPUSH
54722: PPUSH
54723: PPUSH
// if not list then
54724: LD_VAR 0 1
54728: NOT
54729: IFFALSE 54733
// exit ;
54731: GO 59359
// base := list [ 1 ] ;
54733: LD_ADDR_VAR 0 3
54737: PUSH
54738: LD_VAR 0 1
54742: PUSH
54743: LD_INT 1
54745: ARRAY
54746: ST_TO_ADDR
// group := list [ 2 ] ;
54747: LD_ADDR_VAR 0 4
54751: PUSH
54752: LD_VAR 0 1
54756: PUSH
54757: LD_INT 2
54759: ARRAY
54760: ST_TO_ADDR
// path := list [ 3 ] ;
54761: LD_ADDR_VAR 0 5
54765: PUSH
54766: LD_VAR 0 1
54770: PUSH
54771: LD_INT 3
54773: ARRAY
54774: ST_TO_ADDR
// flags := list [ 4 ] ;
54775: LD_ADDR_VAR 0 6
54779: PUSH
54780: LD_VAR 0 1
54784: PUSH
54785: LD_INT 4
54787: ARRAY
54788: ST_TO_ADDR
// mined := [ ] ;
54789: LD_ADDR_VAR 0 27
54793: PUSH
54794: EMPTY
54795: ST_TO_ADDR
// bombed := [ ] ;
54796: LD_ADDR_VAR 0 28
54800: PUSH
54801: EMPTY
54802: ST_TO_ADDR
// healers := [ ] ;
54803: LD_ADDR_VAR 0 31
54807: PUSH
54808: EMPTY
54809: ST_TO_ADDR
// to_heal := [ ] ;
54810: LD_ADDR_VAR 0 30
54814: PUSH
54815: EMPTY
54816: ST_TO_ADDR
// repairs := [ ] ;
54817: LD_ADDR_VAR 0 33
54821: PUSH
54822: EMPTY
54823: ST_TO_ADDR
// to_repair := [ ] ;
54824: LD_ADDR_VAR 0 32
54828: PUSH
54829: EMPTY
54830: ST_TO_ADDR
// if not group or not path then
54831: LD_VAR 0 4
54835: NOT
54836: PUSH
54837: LD_VAR 0 5
54841: NOT
54842: OR
54843: IFFALSE 54847
// exit ;
54845: GO 59359
// side := GetSide ( group [ 1 ] ) ;
54847: LD_ADDR_VAR 0 35
54851: PUSH
54852: LD_VAR 0 4
54856: PUSH
54857: LD_INT 1
54859: ARRAY
54860: PPUSH
54861: CALL_OW 255
54865: ST_TO_ADDR
// if flags then
54866: LD_VAR 0 6
54870: IFFALSE 55014
// begin f_ignore_area := flags [ 1 ] ;
54872: LD_ADDR_VAR 0 17
54876: PUSH
54877: LD_VAR 0 6
54881: PUSH
54882: LD_INT 1
54884: ARRAY
54885: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
54886: LD_ADDR_VAR 0 18
54890: PUSH
54891: LD_VAR 0 6
54895: PUSH
54896: LD_INT 2
54898: ARRAY
54899: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
54900: LD_ADDR_VAR 0 19
54904: PUSH
54905: LD_VAR 0 6
54909: PUSH
54910: LD_INT 3
54912: ARRAY
54913: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
54914: LD_ADDR_VAR 0 20
54918: PUSH
54919: LD_VAR 0 6
54923: PUSH
54924: LD_INT 4
54926: ARRAY
54927: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
54928: LD_ADDR_VAR 0 21
54932: PUSH
54933: LD_VAR 0 6
54937: PUSH
54938: LD_INT 5
54940: ARRAY
54941: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
54942: LD_ADDR_VAR 0 22
54946: PUSH
54947: LD_VAR 0 6
54951: PUSH
54952: LD_INT 6
54954: ARRAY
54955: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
54956: LD_ADDR_VAR 0 23
54960: PUSH
54961: LD_VAR 0 6
54965: PUSH
54966: LD_INT 7
54968: ARRAY
54969: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
54970: LD_ADDR_VAR 0 24
54974: PUSH
54975: LD_VAR 0 6
54979: PUSH
54980: LD_INT 8
54982: ARRAY
54983: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
54984: LD_ADDR_VAR 0 25
54988: PUSH
54989: LD_VAR 0 6
54993: PUSH
54994: LD_INT 9
54996: ARRAY
54997: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
54998: LD_ADDR_VAR 0 26
55002: PUSH
55003: LD_VAR 0 6
55007: PUSH
55008: LD_INT 10
55010: ARRAY
55011: ST_TO_ADDR
// end else
55012: GO 55094
// begin f_ignore_area := false ;
55014: LD_ADDR_VAR 0 17
55018: PUSH
55019: LD_INT 0
55021: ST_TO_ADDR
// f_capture := false ;
55022: LD_ADDR_VAR 0 18
55026: PUSH
55027: LD_INT 0
55029: ST_TO_ADDR
// f_ignore_civ := false ;
55030: LD_ADDR_VAR 0 19
55034: PUSH
55035: LD_INT 0
55037: ST_TO_ADDR
// f_murder := false ;
55038: LD_ADDR_VAR 0 20
55042: PUSH
55043: LD_INT 0
55045: ST_TO_ADDR
// f_mines := false ;
55046: LD_ADDR_VAR 0 21
55050: PUSH
55051: LD_INT 0
55053: ST_TO_ADDR
// f_repair := false ;
55054: LD_ADDR_VAR 0 22
55058: PUSH
55059: LD_INT 0
55061: ST_TO_ADDR
// f_heal := false ;
55062: LD_ADDR_VAR 0 23
55066: PUSH
55067: LD_INT 0
55069: ST_TO_ADDR
// f_spacetime := false ;
55070: LD_ADDR_VAR 0 24
55074: PUSH
55075: LD_INT 0
55077: ST_TO_ADDR
// f_attack_depot := false ;
55078: LD_ADDR_VAR 0 25
55082: PUSH
55083: LD_INT 0
55085: ST_TO_ADDR
// f_crawl := false ;
55086: LD_ADDR_VAR 0 26
55090: PUSH
55091: LD_INT 0
55093: ST_TO_ADDR
// end ; if f_heal then
55094: LD_VAR 0 23
55098: IFFALSE 55125
// healers := UnitFilter ( group , [ f_class , 4 ] ) ;
55100: LD_ADDR_VAR 0 31
55104: PUSH
55105: LD_VAR 0 4
55109: PPUSH
55110: LD_INT 25
55112: PUSH
55113: LD_INT 4
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PPUSH
55120: CALL_OW 72
55124: ST_TO_ADDR
// if f_repair then
55125: LD_VAR 0 22
55129: IFFALSE 55156
// repairs := UnitFilter ( group , [ f_class , 3 ] ) ;
55131: LD_ADDR_VAR 0 33
55135: PUSH
55136: LD_VAR 0 4
55140: PPUSH
55141: LD_INT 25
55143: PUSH
55144: LD_INT 3
55146: PUSH
55147: EMPTY
55148: LIST
55149: LIST
55150: PPUSH
55151: CALL_OW 72
55155: ST_TO_ADDR
// units_path := [ ] ;
55156: LD_ADDR_VAR 0 16
55160: PUSH
55161: EMPTY
55162: ST_TO_ADDR
// for i = 1 to group do
55163: LD_ADDR_VAR 0 7
55167: PUSH
55168: DOUBLE
55169: LD_INT 1
55171: DEC
55172: ST_TO_ADDR
55173: LD_VAR 0 4
55177: PUSH
55178: FOR_TO
55179: IFFALSE 55208
// units_path := Replace ( units_path , i , path ) ;
55181: LD_ADDR_VAR 0 16
55185: PUSH
55186: LD_VAR 0 16
55190: PPUSH
55191: LD_VAR 0 7
55195: PPUSH
55196: LD_VAR 0 5
55200: PPUSH
55201: CALL_OW 1
55205: ST_TO_ADDR
55206: GO 55178
55208: POP
55209: POP
// repeat for i = group downto 1 do
55210: LD_ADDR_VAR 0 7
55214: PUSH
55215: DOUBLE
55216: LD_VAR 0 4
55220: INC
55221: ST_TO_ADDR
55222: LD_INT 1
55224: PUSH
55225: FOR_DOWNTO
55226: IFFALSE 59322
// begin wait ( 5 ) ;
55228: LD_INT 5
55230: PPUSH
55231: CALL_OW 67
// tmp := [ ] ;
55235: LD_ADDR_VAR 0 14
55239: PUSH
55240: EMPTY
55241: ST_TO_ADDR
// attacking := false ;
55242: LD_ADDR_VAR 0 29
55246: PUSH
55247: LD_INT 0
55249: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
55250: LD_VAR 0 4
55254: PUSH
55255: LD_VAR 0 7
55259: ARRAY
55260: PPUSH
55261: CALL_OW 301
55265: PUSH
55266: LD_VAR 0 4
55270: PUSH
55271: LD_VAR 0 7
55275: ARRAY
55276: NOT
55277: OR
55278: IFFALSE 55387
// begin if GetType ( group [ i ] ) = unit_human then
55280: LD_VAR 0 4
55284: PUSH
55285: LD_VAR 0 7
55289: ARRAY
55290: PPUSH
55291: CALL_OW 247
55295: PUSH
55296: LD_INT 1
55298: EQUAL
55299: IFFALSE 55345
// begin to_heal := to_heal diff group [ i ] ;
55301: LD_ADDR_VAR 0 30
55305: PUSH
55306: LD_VAR 0 30
55310: PUSH
55311: LD_VAR 0 4
55315: PUSH
55316: LD_VAR 0 7
55320: ARRAY
55321: DIFF
55322: ST_TO_ADDR
// healers := healers diff group [ i ] ;
55323: LD_ADDR_VAR 0 31
55327: PUSH
55328: LD_VAR 0 31
55332: PUSH
55333: LD_VAR 0 4
55337: PUSH
55338: LD_VAR 0 7
55342: ARRAY
55343: DIFF
55344: ST_TO_ADDR
// end ; group := Delete ( group , i ) ;
55345: LD_ADDR_VAR 0 4
55349: PUSH
55350: LD_VAR 0 4
55354: PPUSH
55355: LD_VAR 0 7
55359: PPUSH
55360: CALL_OW 3
55364: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
55365: LD_ADDR_VAR 0 16
55369: PUSH
55370: LD_VAR 0 16
55374: PPUSH
55375: LD_VAR 0 7
55379: PPUSH
55380: CALL_OW 3
55384: ST_TO_ADDR
// continue ;
55385: GO 55225
// end ; if f_repair then
55387: LD_VAR 0 22
55391: IFFALSE 55880
// begin if GetType ( group [ i ] ) = unit_vehicle then
55393: LD_VAR 0 4
55397: PUSH
55398: LD_VAR 0 7
55402: ARRAY
55403: PPUSH
55404: CALL_OW 247
55408: PUSH
55409: LD_INT 2
55411: EQUAL
55412: IFFALSE 55602
// begin if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_repair then
55414: LD_VAR 0 4
55418: PUSH
55419: LD_VAR 0 7
55423: ARRAY
55424: PPUSH
55425: CALL_OW 256
55429: PUSH
55430: LD_INT 700
55432: LESS
55433: PUSH
55434: LD_VAR 0 4
55438: PUSH
55439: LD_VAR 0 7
55443: ARRAY
55444: PUSH
55445: LD_VAR 0 32
55449: IN
55450: NOT
55451: AND
55452: IFFALSE 55476
// to_repair := to_repair union group [ i ] ;
55454: LD_ADDR_VAR 0 32
55458: PUSH
55459: LD_VAR 0 32
55463: PUSH
55464: LD_VAR 0 4
55468: PUSH
55469: LD_VAR 0 7
55473: ARRAY
55474: UNION
55475: ST_TO_ADDR
// if GetLives ( group [ i ] ) = 1000 and group [ i ] in to_repair then
55476: LD_VAR 0 4
55480: PUSH
55481: LD_VAR 0 7
55485: ARRAY
55486: PPUSH
55487: CALL_OW 256
55491: PUSH
55492: LD_INT 1000
55494: EQUAL
55495: PUSH
55496: LD_VAR 0 4
55500: PUSH
55501: LD_VAR 0 7
55505: ARRAY
55506: PUSH
55507: LD_VAR 0 32
55511: IN
55512: AND
55513: IFFALSE 55537
// to_repair := to_repair diff group [ i ] ;
55515: LD_ADDR_VAR 0 32
55519: PUSH
55520: LD_VAR 0 32
55524: PUSH
55525: LD_VAR 0 4
55529: PUSH
55530: LD_VAR 0 7
55534: ARRAY
55535: DIFF
55536: ST_TO_ADDR
// if group [ i ] in to_repair then
55537: LD_VAR 0 4
55541: PUSH
55542: LD_VAR 0 7
55546: ARRAY
55547: PUSH
55548: LD_VAR 0 32
55552: IN
55553: IFFALSE 55600
// begin if not IsInArea ( group [ i ] , f_repair ) then
55555: LD_VAR 0 4
55559: PUSH
55560: LD_VAR 0 7
55564: ARRAY
55565: PPUSH
55566: LD_VAR 0 22
55570: PPUSH
55571: CALL_OW 308
55575: NOT
55576: IFFALSE 55598
// ComMoveToArea ( group [ i ] , f_repair ) ;
55578: LD_VAR 0 4
55582: PUSH
55583: LD_VAR 0 7
55587: ARRAY
55588: PPUSH
55589: LD_VAR 0 22
55593: PPUSH
55594: CALL_OW 113
// continue ;
55598: GO 55225
// end ; end else
55600: GO 55880
// if group [ i ] in repairs then
55602: LD_VAR 0 4
55606: PUSH
55607: LD_VAR 0 7
55611: ARRAY
55612: PUSH
55613: LD_VAR 0 33
55617: IN
55618: IFFALSE 55880
// begin if IsInUnit ( group [ i ] ) then
55620: LD_VAR 0 4
55624: PUSH
55625: LD_VAR 0 7
55629: ARRAY
55630: PPUSH
55631: CALL_OW 310
55635: IFFALSE 55703
// begin z := IsInUnit ( group [ i ] ) ;
55637: LD_ADDR_VAR 0 13
55641: PUSH
55642: LD_VAR 0 4
55646: PUSH
55647: LD_VAR 0 7
55651: ARRAY
55652: PPUSH
55653: CALL_OW 310
55657: ST_TO_ADDR
// if z in to_repair and IsInArea ( z , f_repair ) then
55658: LD_VAR 0 13
55662: PUSH
55663: LD_VAR 0 32
55667: IN
55668: PUSH
55669: LD_VAR 0 13
55673: PPUSH
55674: LD_VAR 0 22
55678: PPUSH
55679: CALL_OW 308
55683: AND
55684: IFFALSE 55701
// ComExitVehicle ( group [ i ] ) ;
55686: LD_VAR 0 4
55690: PUSH
55691: LD_VAR 0 7
55695: ARRAY
55696: PPUSH
55697: CALL_OW 121
// end else
55701: GO 55880
// begin z := UnitFilter ( group , [ [ f_inarea , f_repair ] , [ f_empty ] ] ) ;
55703: LD_ADDR_VAR 0 13
55707: PUSH
55708: LD_VAR 0 4
55712: PPUSH
55713: LD_INT 95
55715: PUSH
55716: LD_VAR 0 22
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PUSH
55725: LD_INT 58
55727: PUSH
55728: EMPTY
55729: LIST
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PPUSH
55735: CALL_OW 72
55739: ST_TO_ADDR
// if not HasTask ( group [ i ] ) then
55740: LD_VAR 0 4
55744: PUSH
55745: LD_VAR 0 7
55749: ARRAY
55750: PPUSH
55751: CALL_OW 314
55755: NOT
55756: IFFALSE 55878
// begin x := NearestUnitToUnit ( z , group [ i ] ) ;
55758: LD_ADDR_VAR 0 10
55762: PUSH
55763: LD_VAR 0 13
55767: PPUSH
55768: LD_VAR 0 4
55772: PUSH
55773: LD_VAR 0 7
55777: ARRAY
55778: PPUSH
55779: CALL_OW 74
55783: ST_TO_ADDR
// if not x then
55784: LD_VAR 0 10
55788: NOT
55789: IFFALSE 55793
// continue ;
55791: GO 55225
// if GetLives ( x ) < 1000 then
55793: LD_VAR 0 10
55797: PPUSH
55798: CALL_OW 256
55802: PUSH
55803: LD_INT 1000
55805: LESS
55806: IFFALSE 55830
// ComRepairVehicle ( group [ i ] , x ) else
55808: LD_VAR 0 4
55812: PUSH
55813: LD_VAR 0 7
55817: ARRAY
55818: PPUSH
55819: LD_VAR 0 10
55823: PPUSH
55824: CALL_OW 129
55828: GO 55878
// if not ( f_heal and GetLives ( group [ i ] ) < 1000 ) then
55830: LD_VAR 0 23
55834: PUSH
55835: LD_VAR 0 4
55839: PUSH
55840: LD_VAR 0 7
55844: ARRAY
55845: PPUSH
55846: CALL_OW 256
55850: PUSH
55851: LD_INT 1000
55853: LESS
55854: AND
55855: NOT
55856: IFFALSE 55878
// ComEnterUnit ( group [ i ] , x ) ;
55858: LD_VAR 0 4
55862: PUSH
55863: LD_VAR 0 7
55867: ARRAY
55868: PPUSH
55869: LD_VAR 0 10
55873: PPUSH
55874: CALL_OW 120
// end ; continue ;
55878: GO 55225
// end ; end ; end ; if f_heal and GetType ( group [ i ] ) = unit_human then
55880: LD_VAR 0 23
55884: PUSH
55885: LD_VAR 0 4
55889: PUSH
55890: LD_VAR 0 7
55894: ARRAY
55895: PPUSH
55896: CALL_OW 247
55900: PUSH
55901: LD_INT 1
55903: EQUAL
55904: AND
55905: IFFALSE 56383
// begin if group [ i ] in healers then
55907: LD_VAR 0 4
55911: PUSH
55912: LD_VAR 0 7
55916: ARRAY
55917: PUSH
55918: LD_VAR 0 31
55922: IN
55923: IFFALSE 56196
// begin if not IsInArea ( group [ i ] , f_heal ) and not HasTask ( group [ i ] ) then
55925: LD_VAR 0 4
55929: PUSH
55930: LD_VAR 0 7
55934: ARRAY
55935: PPUSH
55936: LD_VAR 0 23
55940: PPUSH
55941: CALL_OW 308
55945: NOT
55946: PUSH
55947: LD_VAR 0 4
55951: PUSH
55952: LD_VAR 0 7
55956: ARRAY
55957: PPUSH
55958: CALL_OW 314
55962: NOT
55963: AND
55964: IFFALSE 55988
// ComMoveToArea ( group [ i ] , f_heal ) else
55966: LD_VAR 0 4
55970: PUSH
55971: LD_VAR 0 7
55975: ARRAY
55976: PPUSH
55977: LD_VAR 0 23
55981: PPUSH
55982: CALL_OW 113
55986: GO 56194
// if GetLives ( HealTarget ( group [ i ] ) ) = 1000 then
55988: LD_VAR 0 4
55992: PUSH
55993: LD_VAR 0 7
55997: ARRAY
55998: PPUSH
55999: CALL 54606 0 1
56003: PPUSH
56004: CALL_OW 256
56008: PUSH
56009: LD_INT 1000
56011: EQUAL
56012: IFFALSE 56031
// ComStop ( group [ i ] ) else
56014: LD_VAR 0 4
56018: PUSH
56019: LD_VAR 0 7
56023: ARRAY
56024: PPUSH
56025: CALL_OW 141
56029: GO 56194
// if not HasTask ( group [ i ] ) and to_heal then
56031: LD_VAR 0 4
56035: PUSH
56036: LD_VAR 0 7
56040: ARRAY
56041: PPUSH
56042: CALL_OW 314
56046: NOT
56047: PUSH
56048: LD_VAR 0 30
56052: AND
56053: IFFALSE 56194
// begin z := NearestUnitToUnit ( UnitFilter ( to_heal , [ f_not , [ f_inside ] ] ) , group [ i ] ) ;
56055: LD_ADDR_VAR 0 13
56059: PUSH
56060: LD_VAR 0 30
56064: PPUSH
56065: LD_INT 3
56067: PUSH
56068: LD_INT 54
56070: PUSH
56071: EMPTY
56072: LIST
56073: PUSH
56074: EMPTY
56075: LIST
56076: LIST
56077: PPUSH
56078: CALL_OW 72
56082: PPUSH
56083: LD_VAR 0 4
56087: PUSH
56088: LD_VAR 0 7
56092: ARRAY
56093: PPUSH
56094: CALL_OW 74
56098: ST_TO_ADDR
// if z then
56099: LD_VAR 0 13
56103: IFFALSE 56194
// if FilterAllUnits ( [ [ f_dist , z , 10 ] , [ f_enemy , GetSide ( z ) ] ] ) = 0 then
56105: LD_INT 91
56107: PUSH
56108: LD_VAR 0 13
56112: PUSH
56113: LD_INT 10
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: LIST
56120: PUSH
56121: LD_INT 81
56123: PUSH
56124: LD_VAR 0 13
56128: PPUSH
56129: CALL_OW 255
56133: PUSH
56134: EMPTY
56135: LIST
56136: LIST
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: PPUSH
56142: CALL_OW 69
56146: PUSH
56147: LD_INT 0
56149: EQUAL
56150: IFFALSE 56174
// ComHeal ( group [ i ] , z ) else
56152: LD_VAR 0 4
56156: PUSH
56157: LD_VAR 0 7
56161: ARRAY
56162: PPUSH
56163: LD_VAR 0 13
56167: PPUSH
56168: CALL_OW 128
56172: GO 56194
// ComMoveToArea ( group [ i ] , f_heal ) ;
56174: LD_VAR 0 4
56178: PUSH
56179: LD_VAR 0 7
56183: ARRAY
56184: PPUSH
56185: LD_VAR 0 23
56189: PPUSH
56190: CALL_OW 113
// end ; continue ;
56194: GO 55225
// end ; if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_heal then
56196: LD_VAR 0 4
56200: PUSH
56201: LD_VAR 0 7
56205: ARRAY
56206: PPUSH
56207: CALL_OW 256
56211: PUSH
56212: LD_INT 700
56214: LESS
56215: PUSH
56216: LD_VAR 0 4
56220: PUSH
56221: LD_VAR 0 7
56225: ARRAY
56226: PUSH
56227: LD_VAR 0 30
56231: IN
56232: NOT
56233: AND
56234: IFFALSE 56258
// to_heal := to_heal union group [ i ] ;
56236: LD_ADDR_VAR 0 30
56240: PUSH
56241: LD_VAR 0 30
56245: PUSH
56246: LD_VAR 0 4
56250: PUSH
56251: LD_VAR 0 7
56255: ARRAY
56256: UNION
56257: ST_TO_ADDR
// if group [ i ] in to_heal then
56258: LD_VAR 0 4
56262: PUSH
56263: LD_VAR 0 7
56267: ARRAY
56268: PUSH
56269: LD_VAR 0 30
56273: IN
56274: IFFALSE 56383
// begin if GetLives ( group [ i ] ) = 1000 then
56276: LD_VAR 0 4
56280: PUSH
56281: LD_VAR 0 7
56285: ARRAY
56286: PPUSH
56287: CALL_OW 256
56291: PUSH
56292: LD_INT 1000
56294: EQUAL
56295: IFFALSE 56321
// to_heal := to_heal diff group [ i ] else
56297: LD_ADDR_VAR 0 30
56301: PUSH
56302: LD_VAR 0 30
56306: PUSH
56307: LD_VAR 0 4
56311: PUSH
56312: LD_VAR 0 7
56316: ARRAY
56317: DIFF
56318: ST_TO_ADDR
56319: GO 56383
// begin if not IsInArea ( group [ i ] , to_heal ) then
56321: LD_VAR 0 4
56325: PUSH
56326: LD_VAR 0 7
56330: ARRAY
56331: PPUSH
56332: LD_VAR 0 30
56336: PPUSH
56337: CALL_OW 308
56341: NOT
56342: IFFALSE 56366
// ComMoveToArea ( group [ i ] , f_heal ) else
56344: LD_VAR 0 4
56348: PUSH
56349: LD_VAR 0 7
56353: ARRAY
56354: PPUSH
56355: LD_VAR 0 23
56359: PPUSH
56360: CALL_OW 113
56364: GO 56381
// ComHold ( group [ i ] ) ;
56366: LD_VAR 0 4
56370: PUSH
56371: LD_VAR 0 7
56375: ARRAY
56376: PPUSH
56377: CALL_OW 140
// continue ;
56381: GO 55225
// end ; end ; end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
56383: LD_VAR 0 4
56387: PUSH
56388: LD_VAR 0 7
56392: ARRAY
56393: PPUSH
56394: LD_INT 10
56396: PPUSH
56397: CALL 53003 0 2
56401: NOT
56402: PUSH
56403: LD_VAR 0 16
56407: PUSH
56408: LD_VAR 0 7
56412: ARRAY
56413: PUSH
56414: EMPTY
56415: EQUAL
56416: NOT
56417: AND
56418: IFFALSE 56684
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
56420: LD_VAR 0 4
56424: PUSH
56425: LD_VAR 0 7
56429: ARRAY
56430: PPUSH
56431: CALL_OW 262
56435: PUSH
56436: LD_INT 1
56438: PUSH
56439: LD_INT 2
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: IN
56446: IFFALSE 56487
// if GetFuel ( group [ i ] ) < 10 then
56448: LD_VAR 0 4
56452: PUSH
56453: LD_VAR 0 7
56457: ARRAY
56458: PPUSH
56459: CALL_OW 261
56463: PUSH
56464: LD_INT 10
56466: LESS
56467: IFFALSE 56487
// SetFuel ( group [ i ] , 12 ) ;
56469: LD_VAR 0 4
56473: PUSH
56474: LD_VAR 0 7
56478: ARRAY
56479: PPUSH
56480: LD_INT 12
56482: PPUSH
56483: CALL_OW 240
// if units_path [ i ] then
56487: LD_VAR 0 16
56491: PUSH
56492: LD_VAR 0 7
56496: ARRAY
56497: IFFALSE 56682
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
56499: LD_VAR 0 4
56503: PUSH
56504: LD_VAR 0 7
56508: ARRAY
56509: PPUSH
56510: LD_VAR 0 16
56514: PUSH
56515: LD_VAR 0 7
56519: ARRAY
56520: PUSH
56521: LD_INT 1
56523: ARRAY
56524: PUSH
56525: LD_INT 1
56527: ARRAY
56528: PPUSH
56529: LD_VAR 0 16
56533: PUSH
56534: LD_VAR 0 7
56538: ARRAY
56539: PUSH
56540: LD_INT 1
56542: ARRAY
56543: PUSH
56544: LD_INT 2
56546: ARRAY
56547: PPUSH
56548: CALL_OW 297
56552: PUSH
56553: LD_INT 6
56555: GREATER
56556: IFFALSE 56631
// begin if not HasTask ( group [ i ] ) then
56558: LD_VAR 0 4
56562: PUSH
56563: LD_VAR 0 7
56567: ARRAY
56568: PPUSH
56569: CALL_OW 314
56573: NOT
56574: IFFALSE 56629
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
56576: LD_VAR 0 4
56580: PUSH
56581: LD_VAR 0 7
56585: ARRAY
56586: PPUSH
56587: LD_VAR 0 16
56591: PUSH
56592: LD_VAR 0 7
56596: ARRAY
56597: PUSH
56598: LD_INT 1
56600: ARRAY
56601: PUSH
56602: LD_INT 1
56604: ARRAY
56605: PPUSH
56606: LD_VAR 0 16
56610: PUSH
56611: LD_VAR 0 7
56615: ARRAY
56616: PUSH
56617: LD_INT 1
56619: ARRAY
56620: PUSH
56621: LD_INT 2
56623: ARRAY
56624: PPUSH
56625: CALL_OW 114
// end else
56629: GO 56682
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
56631: LD_ADDR_VAR 0 15
56635: PUSH
56636: LD_VAR 0 16
56640: PUSH
56641: LD_VAR 0 7
56645: ARRAY
56646: PPUSH
56647: LD_INT 1
56649: PPUSH
56650: CALL_OW 3
56654: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
56655: LD_ADDR_VAR 0 16
56659: PUSH
56660: LD_VAR 0 16
56664: PPUSH
56665: LD_VAR 0 7
56669: PPUSH
56670: LD_VAR 0 15
56674: PPUSH
56675: CALL_OW 1
56679: ST_TO_ADDR
// continue ;
56680: GO 55225
// end ; end ; end else
56682: GO 59320
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
56684: LD_ADDR_VAR 0 14
56688: PUSH
56689: LD_INT 81
56691: PUSH
56692: LD_VAR 0 4
56696: PUSH
56697: LD_VAR 0 7
56701: ARRAY
56702: PPUSH
56703: CALL_OW 255
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PPUSH
56712: CALL_OW 69
56716: ST_TO_ADDR
// if not tmp then
56717: LD_VAR 0 14
56721: NOT
56722: IFFALSE 56726
// continue ;
56724: GO 55225
// if f_ignore_area then
56726: LD_VAR 0 17
56730: IFFALSE 56818
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
56732: LD_ADDR_VAR 0 15
56736: PUSH
56737: LD_VAR 0 14
56741: PPUSH
56742: LD_INT 3
56744: PUSH
56745: LD_INT 92
56747: PUSH
56748: LD_VAR 0 17
56752: PUSH
56753: LD_INT 1
56755: ARRAY
56756: PUSH
56757: LD_VAR 0 17
56761: PUSH
56762: LD_INT 2
56764: ARRAY
56765: PUSH
56766: LD_VAR 0 17
56770: PUSH
56771: LD_INT 3
56773: ARRAY
56774: PUSH
56775: EMPTY
56776: LIST
56777: LIST
56778: LIST
56779: LIST
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: PPUSH
56785: CALL_OW 72
56789: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
56790: LD_VAR 0 14
56794: PUSH
56795: LD_VAR 0 15
56799: DIFF
56800: IFFALSE 56818
// tmp := tmp diff tmp2 ;
56802: LD_ADDR_VAR 0 14
56806: PUSH
56807: LD_VAR 0 14
56811: PUSH
56812: LD_VAR 0 15
56816: DIFF
56817: ST_TO_ADDR
// end ; if not f_murder then
56818: LD_VAR 0 20
56822: NOT
56823: IFFALSE 56881
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
56825: LD_ADDR_VAR 0 15
56829: PUSH
56830: LD_VAR 0 14
56834: PPUSH
56835: LD_INT 3
56837: PUSH
56838: LD_INT 50
56840: PUSH
56841: EMPTY
56842: LIST
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: PPUSH
56848: CALL_OW 72
56852: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
56853: LD_VAR 0 14
56857: PUSH
56858: LD_VAR 0 15
56862: DIFF
56863: IFFALSE 56881
// tmp := tmp diff tmp2 ;
56865: LD_ADDR_VAR 0 14
56869: PUSH
56870: LD_VAR 0 14
56874: PUSH
56875: LD_VAR 0 15
56879: DIFF
56880: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
56881: LD_ADDR_VAR 0 14
56885: PUSH
56886: LD_VAR 0 4
56890: PUSH
56891: LD_VAR 0 7
56895: ARRAY
56896: PPUSH
56897: LD_VAR 0 14
56901: PPUSH
56902: LD_INT 1
56904: PPUSH
56905: LD_INT 1
56907: PPUSH
56908: CALL 26646 0 4
56912: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
56913: LD_VAR 0 4
56917: PUSH
56918: LD_VAR 0 7
56922: ARRAY
56923: PPUSH
56924: CALL_OW 257
56928: PUSH
56929: LD_INT 1
56931: EQUAL
56932: IFFALSE 57380
// begin if WantPlant ( group [ i ] ) then
56934: LD_VAR 0 4
56938: PUSH
56939: LD_VAR 0 7
56943: ARRAY
56944: PPUSH
56945: CALL 26147 0 1
56949: IFFALSE 56953
// continue ;
56951: GO 55225
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
56953: LD_VAR 0 18
56957: PUSH
56958: LD_VAR 0 4
56962: PUSH
56963: LD_VAR 0 7
56967: ARRAY
56968: PPUSH
56969: CALL_OW 310
56973: NOT
56974: AND
56975: PUSH
56976: LD_VAR 0 14
56980: PUSH
56981: LD_INT 1
56983: ARRAY
56984: PUSH
56985: LD_VAR 0 14
56989: PPUSH
56990: LD_INT 21
56992: PUSH
56993: LD_INT 2
56995: PUSH
56996: EMPTY
56997: LIST
56998: LIST
56999: PUSH
57000: LD_INT 58
57002: PUSH
57003: EMPTY
57004: LIST
57005: PUSH
57006: EMPTY
57007: LIST
57008: LIST
57009: PPUSH
57010: CALL_OW 72
57014: IN
57015: AND
57016: IFFALSE 57052
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
57018: LD_VAR 0 4
57022: PUSH
57023: LD_VAR 0 7
57027: ARRAY
57028: PPUSH
57029: LD_VAR 0 14
57033: PUSH
57034: LD_INT 1
57036: ARRAY
57037: PPUSH
57038: CALL_OW 120
// attacking := true ;
57042: LD_ADDR_VAR 0 29
57046: PUSH
57047: LD_INT 1
57049: ST_TO_ADDR
// continue ;
57050: GO 55225
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
57052: LD_VAR 0 26
57056: PUSH
57057: LD_VAR 0 4
57061: PUSH
57062: LD_VAR 0 7
57066: ARRAY
57067: PPUSH
57068: CALL_OW 257
57072: PUSH
57073: LD_INT 1
57075: EQUAL
57076: AND
57077: PUSH
57078: LD_VAR 0 4
57082: PUSH
57083: LD_VAR 0 7
57087: ARRAY
57088: PPUSH
57089: CALL_OW 256
57093: PUSH
57094: LD_INT 800
57096: LESS
57097: AND
57098: PUSH
57099: LD_VAR 0 4
57103: PUSH
57104: LD_VAR 0 7
57108: ARRAY
57109: PPUSH
57110: CALL_OW 318
57114: NOT
57115: AND
57116: IFFALSE 57133
// ComCrawl ( group [ i ] ) ;
57118: LD_VAR 0 4
57122: PUSH
57123: LD_VAR 0 7
57127: ARRAY
57128: PPUSH
57129: CALL_OW 137
// if f_mines then
57133: LD_VAR 0 21
57137: IFFALSE 57380
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
57139: LD_VAR 0 14
57143: PUSH
57144: LD_INT 1
57146: ARRAY
57147: PPUSH
57148: CALL_OW 247
57152: PUSH
57153: LD_INT 3
57155: EQUAL
57156: PUSH
57157: LD_VAR 0 14
57161: PUSH
57162: LD_INT 1
57164: ARRAY
57165: PUSH
57166: LD_VAR 0 27
57170: IN
57171: NOT
57172: AND
57173: IFFALSE 57380
// begin x := GetX ( tmp [ 1 ] ) ;
57175: LD_ADDR_VAR 0 10
57179: PUSH
57180: LD_VAR 0 14
57184: PUSH
57185: LD_INT 1
57187: ARRAY
57188: PPUSH
57189: CALL_OW 250
57193: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
57194: LD_ADDR_VAR 0 11
57198: PUSH
57199: LD_VAR 0 14
57203: PUSH
57204: LD_INT 1
57206: ARRAY
57207: PPUSH
57208: CALL_OW 251
57212: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
57213: LD_ADDR_VAR 0 12
57217: PUSH
57218: LD_VAR 0 4
57222: PUSH
57223: LD_VAR 0 7
57227: ARRAY
57228: PPUSH
57229: CALL 53088 0 1
57233: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
57234: LD_VAR 0 4
57238: PUSH
57239: LD_VAR 0 7
57243: ARRAY
57244: PPUSH
57245: LD_VAR 0 10
57249: PPUSH
57250: LD_VAR 0 11
57254: PPUSH
57255: LD_VAR 0 14
57259: PUSH
57260: LD_INT 1
57262: ARRAY
57263: PPUSH
57264: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
57268: LD_VAR 0 4
57272: PUSH
57273: LD_VAR 0 7
57277: ARRAY
57278: PPUSH
57279: LD_VAR 0 10
57283: PPUSH
57284: LD_VAR 0 12
57288: PPUSH
57289: LD_INT 7
57291: PPUSH
57292: CALL_OW 272
57296: PPUSH
57297: LD_VAR 0 11
57301: PPUSH
57302: LD_VAR 0 12
57306: PPUSH
57307: LD_INT 7
57309: PPUSH
57310: CALL_OW 273
57314: PPUSH
57315: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
57319: LD_VAR 0 4
57323: PUSH
57324: LD_VAR 0 7
57328: ARRAY
57329: PPUSH
57330: LD_INT 71
57332: PPUSH
57333: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
57337: LD_ADDR_VAR 0 27
57341: PUSH
57342: LD_VAR 0 27
57346: PPUSH
57347: LD_VAR 0 27
57351: PUSH
57352: LD_INT 1
57354: PLUS
57355: PPUSH
57356: LD_VAR 0 14
57360: PUSH
57361: LD_INT 1
57363: ARRAY
57364: PPUSH
57365: CALL_OW 1
57369: ST_TO_ADDR
// attacking := true ;
57370: LD_ADDR_VAR 0 29
57374: PUSH
57375: LD_INT 1
57377: ST_TO_ADDR
// continue ;
57378: GO 55225
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
57380: LD_VAR 0 4
57384: PUSH
57385: LD_VAR 0 7
57389: ARRAY
57390: PPUSH
57391: CALL_OW 257
57395: PUSH
57396: LD_INT 17
57398: EQUAL
57399: PUSH
57400: LD_VAR 0 4
57404: PUSH
57405: LD_VAR 0 7
57409: ARRAY
57410: PPUSH
57411: CALL_OW 110
57415: PUSH
57416: LD_INT 71
57418: EQUAL
57419: NOT
57420: AND
57421: IFFALSE 57567
// begin attacking := false ;
57423: LD_ADDR_VAR 0 29
57427: PUSH
57428: LD_INT 0
57430: ST_TO_ADDR
// k := 5 ;
57431: LD_ADDR_VAR 0 9
57435: PUSH
57436: LD_INT 5
57438: ST_TO_ADDR
// if tmp < k then
57439: LD_VAR 0 14
57443: PUSH
57444: LD_VAR 0 9
57448: LESS
57449: IFFALSE 57461
// k := tmp ;
57451: LD_ADDR_VAR 0 9
57455: PUSH
57456: LD_VAR 0 14
57460: ST_TO_ADDR
// for j = 1 to k do
57461: LD_ADDR_VAR 0 8
57465: PUSH
57466: DOUBLE
57467: LD_INT 1
57469: DEC
57470: ST_TO_ADDR
57471: LD_VAR 0 9
57475: PUSH
57476: FOR_TO
57477: IFFALSE 57565
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
57479: LD_VAR 0 14
57483: PUSH
57484: LD_VAR 0 8
57488: ARRAY
57489: PUSH
57490: LD_VAR 0 14
57494: PPUSH
57495: LD_INT 58
57497: PUSH
57498: EMPTY
57499: LIST
57500: PPUSH
57501: CALL_OW 72
57505: IN
57506: NOT
57507: IFFALSE 57563
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
57509: LD_VAR 0 4
57513: PUSH
57514: LD_VAR 0 7
57518: ARRAY
57519: PPUSH
57520: LD_VAR 0 14
57524: PUSH
57525: LD_VAR 0 8
57529: ARRAY
57530: PPUSH
57531: CALL_OW 115
// attacking := true ;
57535: LD_ADDR_VAR 0 29
57539: PUSH
57540: LD_INT 1
57542: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
57543: LD_VAR 0 4
57547: PUSH
57548: LD_VAR 0 7
57552: ARRAY
57553: PPUSH
57554: LD_INT 71
57556: PPUSH
57557: CALL_OW 109
// continue ;
57561: GO 57476
// end ; end ;
57563: GO 57476
57565: POP
57566: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
57567: LD_VAR 0 4
57571: PUSH
57572: LD_VAR 0 7
57576: ARRAY
57577: PPUSH
57578: CALL_OW 257
57582: PUSH
57583: LD_INT 8
57585: EQUAL
57586: PUSH
57587: LD_VAR 0 4
57591: PUSH
57592: LD_VAR 0 7
57596: ARRAY
57597: PPUSH
57598: CALL_OW 264
57602: PUSH
57603: LD_INT 28
57605: PUSH
57606: LD_INT 45
57608: PUSH
57609: LD_INT 7
57611: PUSH
57612: LD_INT 47
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: LIST
57619: LIST
57620: IN
57621: OR
57622: IFFALSE 57852
// begin attacking := false ;
57624: LD_ADDR_VAR 0 29
57628: PUSH
57629: LD_INT 0
57631: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
57632: LD_VAR 0 14
57636: PUSH
57637: LD_INT 1
57639: ARRAY
57640: PPUSH
57641: CALL_OW 266
57645: PUSH
57646: LD_INT 32
57648: PUSH
57649: LD_INT 31
57651: PUSH
57652: LD_INT 33
57654: PUSH
57655: LD_INT 4
57657: PUSH
57658: LD_INT 5
57660: PUSH
57661: EMPTY
57662: LIST
57663: LIST
57664: LIST
57665: LIST
57666: LIST
57667: IN
57668: IFFALSE 57852
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
57670: LD_ADDR_VAR 0 9
57674: PUSH
57675: LD_VAR 0 14
57679: PUSH
57680: LD_INT 1
57682: ARRAY
57683: PPUSH
57684: CALL_OW 266
57688: PPUSH
57689: LD_VAR 0 14
57693: PUSH
57694: LD_INT 1
57696: ARRAY
57697: PPUSH
57698: CALL_OW 250
57702: PPUSH
57703: LD_VAR 0 14
57707: PUSH
57708: LD_INT 1
57710: ARRAY
57711: PPUSH
57712: CALL_OW 251
57716: PPUSH
57717: LD_VAR 0 14
57721: PUSH
57722: LD_INT 1
57724: ARRAY
57725: PPUSH
57726: CALL_OW 254
57730: PPUSH
57731: LD_VAR 0 14
57735: PUSH
57736: LD_INT 1
57738: ARRAY
57739: PPUSH
57740: CALL_OW 248
57744: PPUSH
57745: LD_INT 0
57747: PPUSH
57748: CALL 34458 0 6
57752: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
57753: LD_ADDR_VAR 0 8
57757: PUSH
57758: LD_VAR 0 4
57762: PUSH
57763: LD_VAR 0 7
57767: ARRAY
57768: PPUSH
57769: LD_VAR 0 9
57773: PPUSH
57774: CALL 53151 0 2
57778: ST_TO_ADDR
// if j then
57779: LD_VAR 0 8
57783: IFFALSE 57852
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
57785: LD_VAR 0 8
57789: PUSH
57790: LD_INT 1
57792: ARRAY
57793: PPUSH
57794: LD_VAR 0 8
57798: PUSH
57799: LD_INT 2
57801: ARRAY
57802: PPUSH
57803: CALL_OW 488
57807: IFFALSE 57852
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
57809: LD_VAR 0 4
57813: PUSH
57814: LD_VAR 0 7
57818: ARRAY
57819: PPUSH
57820: LD_VAR 0 8
57824: PUSH
57825: LD_INT 1
57827: ARRAY
57828: PPUSH
57829: LD_VAR 0 8
57833: PUSH
57834: LD_INT 2
57836: ARRAY
57837: PPUSH
57838: CALL_OW 116
// attacking := true ;
57842: LD_ADDR_VAR 0 29
57846: PUSH
57847: LD_INT 1
57849: ST_TO_ADDR
// continue ;
57850: GO 55225
// end ; end ; end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
57852: LD_VAR 0 4
57856: PUSH
57857: LD_VAR 0 7
57861: ARRAY
57862: PPUSH
57863: CALL_OW 265
57867: PUSH
57868: LD_INT 11
57870: EQUAL
57871: IFFALSE 58149
// begin k := 10 ;
57873: LD_ADDR_VAR 0 9
57877: PUSH
57878: LD_INT 10
57880: ST_TO_ADDR
// x := 0 ;
57881: LD_ADDR_VAR 0 10
57885: PUSH
57886: LD_INT 0
57888: ST_TO_ADDR
// if tmp < k then
57889: LD_VAR 0 14
57893: PUSH
57894: LD_VAR 0 9
57898: LESS
57899: IFFALSE 57911
// k := tmp ;
57901: LD_ADDR_VAR 0 9
57905: PUSH
57906: LD_VAR 0 14
57910: ST_TO_ADDR
// for j = k downto 1 do
57911: LD_ADDR_VAR 0 8
57915: PUSH
57916: DOUBLE
57917: LD_VAR 0 9
57921: INC
57922: ST_TO_ADDR
57923: LD_INT 1
57925: PUSH
57926: FOR_DOWNTO
57927: IFFALSE 58002
// begin if GetType ( tmp [ j ] ) = unit_human then
57929: LD_VAR 0 14
57933: PUSH
57934: LD_VAR 0 8
57938: ARRAY
57939: PPUSH
57940: CALL_OW 247
57944: PUSH
57945: LD_INT 1
57947: EQUAL
57948: IFFALSE 58000
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
57950: LD_VAR 0 4
57954: PUSH
57955: LD_VAR 0 7
57959: ARRAY
57960: PPUSH
57961: LD_VAR 0 14
57965: PUSH
57966: LD_VAR 0 8
57970: ARRAY
57971: PPUSH
57972: CALL 53422 0 2
// x := tmp [ j ] ;
57976: LD_ADDR_VAR 0 10
57980: PUSH
57981: LD_VAR 0 14
57985: PUSH
57986: LD_VAR 0 8
57990: ARRAY
57991: ST_TO_ADDR
// attacking := true ;
57992: LD_ADDR_VAR 0 29
57996: PUSH
57997: LD_INT 1
57999: ST_TO_ADDR
// end ; end ;
58000: GO 57926
58002: POP
58003: POP
// if not x then
58004: LD_VAR 0 10
58008: NOT
58009: IFFALSE 58149
// begin attacking := true ;
58011: LD_ADDR_VAR 0 29
58015: PUSH
58016: LD_INT 1
58018: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
58019: LD_VAR 0 4
58023: PUSH
58024: LD_VAR 0 7
58028: ARRAY
58029: PPUSH
58030: CALL_OW 250
58034: PPUSH
58035: LD_VAR 0 4
58039: PUSH
58040: LD_VAR 0 7
58044: ARRAY
58045: PPUSH
58046: CALL_OW 251
58050: PPUSH
58051: CALL_OW 546
58055: PUSH
58056: LD_INT 2
58058: ARRAY
58059: PUSH
58060: LD_VAR 0 14
58064: PUSH
58065: LD_INT 1
58067: ARRAY
58068: PPUSH
58069: CALL_OW 250
58073: PPUSH
58074: LD_VAR 0 14
58078: PUSH
58079: LD_INT 1
58081: ARRAY
58082: PPUSH
58083: CALL_OW 251
58087: PPUSH
58088: CALL_OW 546
58092: PUSH
58093: LD_INT 2
58095: ARRAY
58096: EQUAL
58097: IFFALSE 58125
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
58099: LD_VAR 0 4
58103: PUSH
58104: LD_VAR 0 7
58108: ARRAY
58109: PPUSH
58110: LD_VAR 0 14
58114: PUSH
58115: LD_INT 1
58117: ARRAY
58118: PPUSH
58119: CALL 53422 0 2
58123: GO 58149
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
58125: LD_VAR 0 4
58129: PUSH
58130: LD_VAR 0 7
58134: ARRAY
58135: PPUSH
58136: LD_VAR 0 14
58140: PUSH
58141: LD_INT 1
58143: ARRAY
58144: PPUSH
58145: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
58149: LD_VAR 0 4
58153: PUSH
58154: LD_VAR 0 7
58158: ARRAY
58159: PPUSH
58160: CALL_OW 264
58164: PUSH
58165: LD_INT 29
58167: EQUAL
58168: IFFALSE 58534
// begin if WantsToAttack ( group [ i ] ) in bombed then
58170: LD_VAR 0 4
58174: PUSH
58175: LD_VAR 0 7
58179: ARRAY
58180: PPUSH
58181: CALL_OW 319
58185: PUSH
58186: LD_VAR 0 28
58190: IN
58191: IFFALSE 58195
// continue ;
58193: GO 55225
// k := 8 ;
58195: LD_ADDR_VAR 0 9
58199: PUSH
58200: LD_INT 8
58202: ST_TO_ADDR
// x := 0 ;
58203: LD_ADDR_VAR 0 10
58207: PUSH
58208: LD_INT 0
58210: ST_TO_ADDR
// if tmp < k then
58211: LD_VAR 0 14
58215: PUSH
58216: LD_VAR 0 9
58220: LESS
58221: IFFALSE 58233
// k := tmp ;
58223: LD_ADDR_VAR 0 9
58227: PUSH
58228: LD_VAR 0 14
58232: ST_TO_ADDR
// for j = 1 to k do
58233: LD_ADDR_VAR 0 8
58237: PUSH
58238: DOUBLE
58239: LD_INT 1
58241: DEC
58242: ST_TO_ADDR
58243: LD_VAR 0 9
58247: PUSH
58248: FOR_TO
58249: IFFALSE 58381
// begin if GetType ( tmp [ j ] ) = unit_building then
58251: LD_VAR 0 14
58255: PUSH
58256: LD_VAR 0 8
58260: ARRAY
58261: PPUSH
58262: CALL_OW 247
58266: PUSH
58267: LD_INT 3
58269: EQUAL
58270: IFFALSE 58379
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
58272: LD_VAR 0 14
58276: PUSH
58277: LD_VAR 0 8
58281: ARRAY
58282: PUSH
58283: LD_VAR 0 28
58287: IN
58288: NOT
58289: PUSH
58290: LD_VAR 0 14
58294: PUSH
58295: LD_VAR 0 8
58299: ARRAY
58300: PPUSH
58301: CALL_OW 313
58305: AND
58306: IFFALSE 58379
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
58308: LD_VAR 0 4
58312: PUSH
58313: LD_VAR 0 7
58317: ARRAY
58318: PPUSH
58319: LD_VAR 0 14
58323: PUSH
58324: LD_VAR 0 8
58328: ARRAY
58329: PPUSH
58330: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
58334: LD_ADDR_VAR 0 28
58338: PUSH
58339: LD_VAR 0 28
58343: PPUSH
58344: LD_VAR 0 28
58348: PUSH
58349: LD_INT 1
58351: PLUS
58352: PPUSH
58353: LD_VAR 0 14
58357: PUSH
58358: LD_VAR 0 8
58362: ARRAY
58363: PPUSH
58364: CALL_OW 1
58368: ST_TO_ADDR
// attacking := true ;
58369: LD_ADDR_VAR 0 29
58373: PUSH
58374: LD_INT 1
58376: ST_TO_ADDR
// break ;
58377: GO 58381
// end ; end ;
58379: GO 58248
58381: POP
58382: POP
// if not attacking and f_attack_depot then
58383: LD_VAR 0 29
58387: NOT
58388: PUSH
58389: LD_VAR 0 25
58393: AND
58394: IFFALSE 58489
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
58396: LD_ADDR_VAR 0 13
58400: PUSH
58401: LD_VAR 0 14
58405: PPUSH
58406: LD_INT 2
58408: PUSH
58409: LD_INT 30
58411: PUSH
58412: LD_INT 0
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: LD_INT 30
58421: PUSH
58422: LD_INT 1
58424: PUSH
58425: EMPTY
58426: LIST
58427: LIST
58428: PUSH
58429: EMPTY
58430: LIST
58431: LIST
58432: LIST
58433: PPUSH
58434: CALL_OW 72
58438: ST_TO_ADDR
// if z then
58439: LD_VAR 0 13
58443: IFFALSE 58489
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
58445: LD_VAR 0 4
58449: PUSH
58450: LD_VAR 0 7
58454: ARRAY
58455: PPUSH
58456: LD_VAR 0 13
58460: PPUSH
58461: LD_VAR 0 4
58465: PUSH
58466: LD_VAR 0 7
58470: ARRAY
58471: PPUSH
58472: CALL_OW 74
58476: PPUSH
58477: CALL_OW 115
// attacking := true ;
58481: LD_ADDR_VAR 0 29
58485: PUSH
58486: LD_INT 1
58488: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
58489: LD_VAR 0 4
58493: PUSH
58494: LD_VAR 0 7
58498: ARRAY
58499: PPUSH
58500: CALL_OW 256
58504: PUSH
58505: LD_INT 500
58507: LESS
58508: IFFALSE 58534
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
58510: LD_VAR 0 4
58514: PUSH
58515: LD_VAR 0 7
58519: ARRAY
58520: PPUSH
58521: LD_VAR 0 14
58525: PUSH
58526: LD_INT 1
58528: ARRAY
58529: PPUSH
58530: CALL_OW 115
// end ; if GetWeapon ( group [ i ] ) = ru_time_lapser then
58534: LD_VAR 0 4
58538: PUSH
58539: LD_VAR 0 7
58543: ARRAY
58544: PPUSH
58545: CALL_OW 264
58549: PUSH
58550: LD_INT 49
58552: EQUAL
58553: IFFALSE 58674
// begin if not HasTask ( group [ i ] ) then
58555: LD_VAR 0 4
58559: PUSH
58560: LD_VAR 0 7
58564: ARRAY
58565: PPUSH
58566: CALL_OW 314
58570: NOT
58571: IFFALSE 58674
// begin k := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) , group [ i ] ) ;
58573: LD_ADDR_VAR 0 9
58577: PUSH
58578: LD_INT 81
58580: PUSH
58581: LD_VAR 0 4
58585: PUSH
58586: LD_VAR 0 7
58590: ARRAY
58591: PPUSH
58592: CALL_OW 255
58596: PUSH
58597: EMPTY
58598: LIST
58599: LIST
58600: PPUSH
58601: CALL_OW 69
58605: PPUSH
58606: LD_VAR 0 4
58610: PUSH
58611: LD_VAR 0 7
58615: ARRAY
58616: PPUSH
58617: CALL_OW 74
58621: ST_TO_ADDR
// if k then
58622: LD_VAR 0 9
58626: IFFALSE 58674
// if GetDistUnits ( group [ i ] , k ) > 10 then
58628: LD_VAR 0 4
58632: PUSH
58633: LD_VAR 0 7
58637: ARRAY
58638: PPUSH
58639: LD_VAR 0 9
58643: PPUSH
58644: CALL_OW 296
58648: PUSH
58649: LD_INT 10
58651: GREATER
58652: IFFALSE 58674
// ComMoveUnit ( group [ i ] , k ) ;
58654: LD_VAR 0 4
58658: PUSH
58659: LD_VAR 0 7
58663: ARRAY
58664: PPUSH
58665: LD_VAR 0 9
58669: PPUSH
58670: CALL_OW 112
// end ; end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
58674: LD_VAR 0 4
58678: PUSH
58679: LD_VAR 0 7
58683: ARRAY
58684: PPUSH
58685: CALL_OW 256
58689: PUSH
58690: LD_INT 250
58692: LESS
58693: PUSH
58694: LD_VAR 0 4
58698: PUSH
58699: LD_VAR 0 7
58703: ARRAY
58704: PUSH
58705: LD_INT 21
58707: PUSH
58708: LD_INT 2
58710: PUSH
58711: EMPTY
58712: LIST
58713: LIST
58714: PUSH
58715: LD_INT 23
58717: PUSH
58718: LD_INT 2
58720: PUSH
58721: EMPTY
58722: LIST
58723: LIST
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: PPUSH
58729: CALL_OW 69
58733: IN
58734: AND
58735: IFFALSE 58860
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
58737: LD_ADDR_VAR 0 9
58741: PUSH
58742: LD_OWVAR 3
58746: PUSH
58747: LD_VAR 0 4
58751: PUSH
58752: LD_VAR 0 7
58756: ARRAY
58757: DIFF
58758: PPUSH
58759: LD_VAR 0 4
58763: PUSH
58764: LD_VAR 0 7
58768: ARRAY
58769: PPUSH
58770: CALL_OW 74
58774: ST_TO_ADDR
// if not k then
58775: LD_VAR 0 9
58779: NOT
58780: IFFALSE 58784
// continue ;
58782: GO 55225
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
58784: LD_VAR 0 9
58788: PUSH
58789: LD_INT 81
58791: PUSH
58792: LD_VAR 0 4
58796: PUSH
58797: LD_VAR 0 7
58801: ARRAY
58802: PPUSH
58803: CALL_OW 255
58807: PUSH
58808: EMPTY
58809: LIST
58810: LIST
58811: PPUSH
58812: CALL_OW 69
58816: IN
58817: PUSH
58818: LD_VAR 0 9
58822: PPUSH
58823: LD_VAR 0 4
58827: PUSH
58828: LD_VAR 0 7
58832: ARRAY
58833: PPUSH
58834: CALL_OW 296
58838: PUSH
58839: LD_INT 5
58841: LESS
58842: AND
58843: IFFALSE 58860
// ComAutodestruct ( group [ i ] ) ;
58845: LD_VAR 0 4
58849: PUSH
58850: LD_VAR 0 7
58854: ARRAY
58855: PPUSH
58856: CALL 53320 0 1
// end ; if f_attack_depot then
58860: LD_VAR 0 25
58864: IFFALSE 58976
// begin k := 6 ;
58866: LD_ADDR_VAR 0 9
58870: PUSH
58871: LD_INT 6
58873: ST_TO_ADDR
// if tmp < k then
58874: LD_VAR 0 14
58878: PUSH
58879: LD_VAR 0 9
58883: LESS
58884: IFFALSE 58896
// k := tmp ;
58886: LD_ADDR_VAR 0 9
58890: PUSH
58891: LD_VAR 0 14
58895: ST_TO_ADDR
// for j = 1 to k do
58896: LD_ADDR_VAR 0 8
58900: PUSH
58901: DOUBLE
58902: LD_INT 1
58904: DEC
58905: ST_TO_ADDR
58906: LD_VAR 0 9
58910: PUSH
58911: FOR_TO
58912: IFFALSE 58974
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
58914: LD_VAR 0 8
58918: PPUSH
58919: CALL_OW 266
58923: PUSH
58924: LD_INT 0
58926: PUSH
58927: LD_INT 1
58929: PUSH
58930: EMPTY
58931: LIST
58932: LIST
58933: IN
58934: IFFALSE 58972
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
58936: LD_VAR 0 4
58940: PUSH
58941: LD_VAR 0 7
58945: ARRAY
58946: PPUSH
58947: LD_VAR 0 14
58951: PUSH
58952: LD_VAR 0 8
58956: ARRAY
58957: PPUSH
58958: CALL_OW 115
// attacking := true ;
58962: LD_ADDR_VAR 0 29
58966: PUSH
58967: LD_INT 1
58969: ST_TO_ADDR
// break ;
58970: GO 58974
// end ;
58972: GO 58911
58974: POP
58975: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
58976: LD_VAR 0 4
58980: PUSH
58981: LD_VAR 0 7
58985: ARRAY
58986: PPUSH
58987: CALL_OW 302
58991: PUSH
58992: LD_VAR 0 29
58996: NOT
58997: AND
58998: IFFALSE 59320
// begin if GetTag ( group [ i ] ) = 71 then
59000: LD_VAR 0 4
59004: PUSH
59005: LD_VAR 0 7
59009: ARRAY
59010: PPUSH
59011: CALL_OW 110
59015: PUSH
59016: LD_INT 71
59018: EQUAL
59019: IFFALSE 59060
// begin if HasTask ( group [ i ] ) then
59021: LD_VAR 0 4
59025: PUSH
59026: LD_VAR 0 7
59030: ARRAY
59031: PPUSH
59032: CALL_OW 314
59036: IFFALSE 59042
// continue else
59038: GO 55225
59040: GO 59060
// SetTag ( group [ i ] , 0 ) ;
59042: LD_VAR 0 4
59046: PUSH
59047: LD_VAR 0 7
59051: ARRAY
59052: PPUSH
59053: LD_INT 0
59055: PPUSH
59056: CALL_OW 109
// end ; k := 8 ;
59060: LD_ADDR_VAR 0 9
59064: PUSH
59065: LD_INT 8
59067: ST_TO_ADDR
// x := 0 ;
59068: LD_ADDR_VAR 0 10
59072: PUSH
59073: LD_INT 0
59075: ST_TO_ADDR
// if tmp < k then
59076: LD_VAR 0 14
59080: PUSH
59081: LD_VAR 0 9
59085: LESS
59086: IFFALSE 59098
// k := tmp ;
59088: LD_ADDR_VAR 0 9
59092: PUSH
59093: LD_VAR 0 14
59097: ST_TO_ADDR
// for j = 1 to k do
59098: LD_ADDR_VAR 0 8
59102: PUSH
59103: DOUBLE
59104: LD_INT 1
59106: DEC
59107: ST_TO_ADDR
59108: LD_VAR 0 9
59112: PUSH
59113: FOR_TO
59114: IFFALSE 59212
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
59116: LD_VAR 0 14
59120: PUSH
59121: LD_VAR 0 8
59125: ARRAY
59126: PPUSH
59127: CALL_OW 247
59131: PUSH
59132: LD_INT 1
59134: EQUAL
59135: PUSH
59136: LD_VAR 0 14
59140: PUSH
59141: LD_VAR 0 8
59145: ARRAY
59146: PPUSH
59147: CALL_OW 256
59151: PUSH
59152: LD_INT 250
59154: LESS
59155: PUSH
59156: LD_VAR 0 20
59160: AND
59161: PUSH
59162: LD_VAR 0 20
59166: NOT
59167: PUSH
59168: LD_VAR 0 14
59172: PUSH
59173: LD_VAR 0 8
59177: ARRAY
59178: PPUSH
59179: CALL_OW 256
59183: PUSH
59184: LD_INT 250
59186: GREATEREQUAL
59187: AND
59188: OR
59189: AND
59190: IFFALSE 59210
// begin x := tmp [ j ] ;
59192: LD_ADDR_VAR 0 10
59196: PUSH
59197: LD_VAR 0 14
59201: PUSH
59202: LD_VAR 0 8
59206: ARRAY
59207: ST_TO_ADDR
// break ;
59208: GO 59212
// end ;
59210: GO 59113
59212: POP
59213: POP
// if x then
59214: LD_VAR 0 10
59218: IFFALSE 59242
// ComAttackUnit ( group [ i ] , x ) else
59220: LD_VAR 0 4
59224: PUSH
59225: LD_VAR 0 7
59229: ARRAY
59230: PPUSH
59231: LD_VAR 0 10
59235: PPUSH
59236: CALL_OW 115
59240: GO 59266
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
59242: LD_VAR 0 4
59246: PUSH
59247: LD_VAR 0 7
59251: ARRAY
59252: PPUSH
59253: LD_VAR 0 14
59257: PUSH
59258: LD_INT 1
59260: ARRAY
59261: PPUSH
59262: CALL_OW 115
// if not HasTask ( group [ i ] ) then
59266: LD_VAR 0 4
59270: PUSH
59271: LD_VAR 0 7
59275: ARRAY
59276: PPUSH
59277: CALL_OW 314
59281: NOT
59282: IFFALSE 59320
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
59284: LD_VAR 0 4
59288: PUSH
59289: LD_VAR 0 7
59293: ARRAY
59294: PPUSH
59295: LD_VAR 0 14
59299: PPUSH
59300: LD_VAR 0 4
59304: PUSH
59305: LD_VAR 0 7
59309: ARRAY
59310: PPUSH
59311: CALL_OW 74
59315: PPUSH
59316: CALL_OW 115
// end ; end ; end ;
59320: GO 55225
59322: POP
59323: POP
// wait ( 0 0$1 ) ;
59324: LD_INT 35
59326: PPUSH
59327: CALL_OW 67
// until group = [ ] or not FilterAllUnits ( [ f_enemy , side ] ) ;
59331: LD_VAR 0 4
59335: PUSH
59336: EMPTY
59337: EQUAL
59338: PUSH
59339: LD_INT 81
59341: PUSH
59342: LD_VAR 0 35
59346: PUSH
59347: EMPTY
59348: LIST
59349: LIST
59350: PPUSH
59351: CALL_OW 69
59355: NOT
59356: OR
59357: IFFALSE 55210
// end ;
59359: LD_VAR 0 2
59363: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
59364: LD_INT 0
59366: PPUSH
59367: PPUSH
59368: PPUSH
59369: PPUSH
// if not base_units then
59370: LD_VAR 0 1
59374: NOT
59375: IFFALSE 59379
// exit ;
59377: GO 59466
// result := false ;
59379: LD_ADDR_VAR 0 2
59383: PUSH
59384: LD_INT 0
59386: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
59387: LD_ADDR_VAR 0 5
59391: PUSH
59392: LD_VAR 0 1
59396: PPUSH
59397: LD_INT 21
59399: PUSH
59400: LD_INT 3
59402: PUSH
59403: EMPTY
59404: LIST
59405: LIST
59406: PPUSH
59407: CALL_OW 72
59411: ST_TO_ADDR
// if not tmp then
59412: LD_VAR 0 5
59416: NOT
59417: IFFALSE 59421
// exit ;
59419: GO 59466
// for i in tmp do
59421: LD_ADDR_VAR 0 3
59425: PUSH
59426: LD_VAR 0 5
59430: PUSH
59431: FOR_IN
59432: IFFALSE 59464
// begin result := EnemyInRange ( i , 22 ) ;
59434: LD_ADDR_VAR 0 2
59438: PUSH
59439: LD_VAR 0 3
59443: PPUSH
59444: LD_INT 22
59446: PPUSH
59447: CALL 53003 0 2
59451: ST_TO_ADDR
// if result then
59452: LD_VAR 0 2
59456: IFFALSE 59462
// exit ;
59458: POP
59459: POP
59460: GO 59466
// end ;
59462: GO 59431
59464: POP
59465: POP
// end ;
59466: LD_VAR 0 2
59470: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
59471: LD_INT 0
59473: PPUSH
59474: PPUSH
// if not units then
59475: LD_VAR 0 1
59479: NOT
59480: IFFALSE 59484
// exit ;
59482: GO 59554
// result := [ ] ;
59484: LD_ADDR_VAR 0 3
59488: PUSH
59489: EMPTY
59490: ST_TO_ADDR
// for i in units do
59491: LD_ADDR_VAR 0 4
59495: PUSH
59496: LD_VAR 0 1
59500: PUSH
59501: FOR_IN
59502: IFFALSE 59552
// if GetTag ( i ) = tag then
59504: LD_VAR 0 4
59508: PPUSH
59509: CALL_OW 110
59513: PUSH
59514: LD_VAR 0 2
59518: EQUAL
59519: IFFALSE 59550
// result := Insert ( result , result + 1 , i ) ;
59521: LD_ADDR_VAR 0 3
59525: PUSH
59526: LD_VAR 0 3
59530: PPUSH
59531: LD_VAR 0 3
59535: PUSH
59536: LD_INT 1
59538: PLUS
59539: PPUSH
59540: LD_VAR 0 4
59544: PPUSH
59545: CALL_OW 2
59549: ST_TO_ADDR
59550: GO 59501
59552: POP
59553: POP
// end ;
59554: LD_VAR 0 3
59558: RET
// export function IsDriver ( un ) ; begin
59559: LD_INT 0
59561: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
59562: LD_ADDR_VAR 0 2
59566: PUSH
59567: LD_VAR 0 1
59571: PUSH
59572: LD_INT 55
59574: PUSH
59575: EMPTY
59576: LIST
59577: PPUSH
59578: CALL_OW 69
59582: IN
59583: ST_TO_ADDR
// end ;
59584: LD_VAR 0 2
59588: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
59589: LD_INT 0
59591: PPUSH
59592: PPUSH
// list := [ ] ;
59593: LD_ADDR_VAR 0 5
59597: PUSH
59598: EMPTY
59599: ST_TO_ADDR
// case d of 0 :
59600: LD_VAR 0 3
59604: PUSH
59605: LD_INT 0
59607: DOUBLE
59608: EQUAL
59609: IFTRUE 59613
59611: GO 59746
59613: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
59614: LD_ADDR_VAR 0 5
59618: PUSH
59619: LD_VAR 0 1
59623: PUSH
59624: LD_INT 4
59626: MINUS
59627: PUSH
59628: LD_VAR 0 2
59632: PUSH
59633: LD_INT 4
59635: MINUS
59636: PUSH
59637: LD_INT 2
59639: PUSH
59640: EMPTY
59641: LIST
59642: LIST
59643: LIST
59644: PUSH
59645: LD_VAR 0 1
59649: PUSH
59650: LD_INT 3
59652: MINUS
59653: PUSH
59654: LD_VAR 0 2
59658: PUSH
59659: LD_INT 1
59661: PUSH
59662: EMPTY
59663: LIST
59664: LIST
59665: LIST
59666: PUSH
59667: LD_VAR 0 1
59671: PUSH
59672: LD_INT 4
59674: PLUS
59675: PUSH
59676: LD_VAR 0 2
59680: PUSH
59681: LD_INT 4
59683: PUSH
59684: EMPTY
59685: LIST
59686: LIST
59687: LIST
59688: PUSH
59689: LD_VAR 0 1
59693: PUSH
59694: LD_INT 3
59696: PLUS
59697: PUSH
59698: LD_VAR 0 2
59702: PUSH
59703: LD_INT 3
59705: PLUS
59706: PUSH
59707: LD_INT 5
59709: PUSH
59710: EMPTY
59711: LIST
59712: LIST
59713: LIST
59714: PUSH
59715: LD_VAR 0 1
59719: PUSH
59720: LD_VAR 0 2
59724: PUSH
59725: LD_INT 4
59727: PLUS
59728: PUSH
59729: LD_INT 0
59731: PUSH
59732: EMPTY
59733: LIST
59734: LIST
59735: LIST
59736: PUSH
59737: EMPTY
59738: LIST
59739: LIST
59740: LIST
59741: LIST
59742: LIST
59743: ST_TO_ADDR
// end ; 1 :
59744: GO 60444
59746: LD_INT 1
59748: DOUBLE
59749: EQUAL
59750: IFTRUE 59754
59752: GO 59887
59754: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
59755: LD_ADDR_VAR 0 5
59759: PUSH
59760: LD_VAR 0 1
59764: PUSH
59765: LD_VAR 0 2
59769: PUSH
59770: LD_INT 4
59772: MINUS
59773: PUSH
59774: LD_INT 3
59776: PUSH
59777: EMPTY
59778: LIST
59779: LIST
59780: LIST
59781: PUSH
59782: LD_VAR 0 1
59786: PUSH
59787: LD_INT 3
59789: MINUS
59790: PUSH
59791: LD_VAR 0 2
59795: PUSH
59796: LD_INT 3
59798: MINUS
59799: PUSH
59800: LD_INT 2
59802: PUSH
59803: EMPTY
59804: LIST
59805: LIST
59806: LIST
59807: PUSH
59808: LD_VAR 0 1
59812: PUSH
59813: LD_INT 4
59815: MINUS
59816: PUSH
59817: LD_VAR 0 2
59821: PUSH
59822: LD_INT 1
59824: PUSH
59825: EMPTY
59826: LIST
59827: LIST
59828: LIST
59829: PUSH
59830: LD_VAR 0 1
59834: PUSH
59835: LD_VAR 0 2
59839: PUSH
59840: LD_INT 3
59842: PLUS
59843: PUSH
59844: LD_INT 0
59846: PUSH
59847: EMPTY
59848: LIST
59849: LIST
59850: LIST
59851: PUSH
59852: LD_VAR 0 1
59856: PUSH
59857: LD_INT 4
59859: PLUS
59860: PUSH
59861: LD_VAR 0 2
59865: PUSH
59866: LD_INT 4
59868: PLUS
59869: PUSH
59870: LD_INT 5
59872: PUSH
59873: EMPTY
59874: LIST
59875: LIST
59876: LIST
59877: PUSH
59878: EMPTY
59879: LIST
59880: LIST
59881: LIST
59882: LIST
59883: LIST
59884: ST_TO_ADDR
// end ; 2 :
59885: GO 60444
59887: LD_INT 2
59889: DOUBLE
59890: EQUAL
59891: IFTRUE 59895
59893: GO 60024
59895: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
59896: LD_ADDR_VAR 0 5
59900: PUSH
59901: LD_VAR 0 1
59905: PUSH
59906: LD_VAR 0 2
59910: PUSH
59911: LD_INT 3
59913: MINUS
59914: PUSH
59915: LD_INT 3
59917: PUSH
59918: EMPTY
59919: LIST
59920: LIST
59921: LIST
59922: PUSH
59923: LD_VAR 0 1
59927: PUSH
59928: LD_INT 4
59930: PLUS
59931: PUSH
59932: LD_VAR 0 2
59936: PUSH
59937: LD_INT 4
59939: PUSH
59940: EMPTY
59941: LIST
59942: LIST
59943: LIST
59944: PUSH
59945: LD_VAR 0 1
59949: PUSH
59950: LD_VAR 0 2
59954: PUSH
59955: LD_INT 4
59957: PLUS
59958: PUSH
59959: LD_INT 0
59961: PUSH
59962: EMPTY
59963: LIST
59964: LIST
59965: LIST
59966: PUSH
59967: LD_VAR 0 1
59971: PUSH
59972: LD_INT 3
59974: MINUS
59975: PUSH
59976: LD_VAR 0 2
59980: PUSH
59981: LD_INT 1
59983: PUSH
59984: EMPTY
59985: LIST
59986: LIST
59987: LIST
59988: PUSH
59989: LD_VAR 0 1
59993: PUSH
59994: LD_INT 4
59996: MINUS
59997: PUSH
59998: LD_VAR 0 2
60002: PUSH
60003: LD_INT 4
60005: MINUS
60006: PUSH
60007: LD_INT 2
60009: PUSH
60010: EMPTY
60011: LIST
60012: LIST
60013: LIST
60014: PUSH
60015: EMPTY
60016: LIST
60017: LIST
60018: LIST
60019: LIST
60020: LIST
60021: ST_TO_ADDR
// end ; 3 :
60022: GO 60444
60024: LD_INT 3
60026: DOUBLE
60027: EQUAL
60028: IFTRUE 60032
60030: GO 60165
60032: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
60033: LD_ADDR_VAR 0 5
60037: PUSH
60038: LD_VAR 0 1
60042: PUSH
60043: LD_INT 3
60045: PLUS
60046: PUSH
60047: LD_VAR 0 2
60051: PUSH
60052: LD_INT 4
60054: PUSH
60055: EMPTY
60056: LIST
60057: LIST
60058: LIST
60059: PUSH
60060: LD_VAR 0 1
60064: PUSH
60065: LD_INT 4
60067: PLUS
60068: PUSH
60069: LD_VAR 0 2
60073: PUSH
60074: LD_INT 4
60076: PLUS
60077: PUSH
60078: LD_INT 5
60080: PUSH
60081: EMPTY
60082: LIST
60083: LIST
60084: LIST
60085: PUSH
60086: LD_VAR 0 1
60090: PUSH
60091: LD_INT 4
60093: MINUS
60094: PUSH
60095: LD_VAR 0 2
60099: PUSH
60100: LD_INT 1
60102: PUSH
60103: EMPTY
60104: LIST
60105: LIST
60106: LIST
60107: PUSH
60108: LD_VAR 0 1
60112: PUSH
60113: LD_VAR 0 2
60117: PUSH
60118: LD_INT 4
60120: MINUS
60121: PUSH
60122: LD_INT 3
60124: PUSH
60125: EMPTY
60126: LIST
60127: LIST
60128: LIST
60129: PUSH
60130: LD_VAR 0 1
60134: PUSH
60135: LD_INT 3
60137: MINUS
60138: PUSH
60139: LD_VAR 0 2
60143: PUSH
60144: LD_INT 3
60146: MINUS
60147: PUSH
60148: LD_INT 2
60150: PUSH
60151: EMPTY
60152: LIST
60153: LIST
60154: LIST
60155: PUSH
60156: EMPTY
60157: LIST
60158: LIST
60159: LIST
60160: LIST
60161: LIST
60162: ST_TO_ADDR
// end ; 4 :
60163: GO 60444
60165: LD_INT 4
60167: DOUBLE
60168: EQUAL
60169: IFTRUE 60173
60171: GO 60306
60173: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
60174: LD_ADDR_VAR 0 5
60178: PUSH
60179: LD_VAR 0 1
60183: PUSH
60184: LD_VAR 0 2
60188: PUSH
60189: LD_INT 4
60191: PLUS
60192: PUSH
60193: LD_INT 0
60195: PUSH
60196: EMPTY
60197: LIST
60198: LIST
60199: LIST
60200: PUSH
60201: LD_VAR 0 1
60205: PUSH
60206: LD_INT 3
60208: PLUS
60209: PUSH
60210: LD_VAR 0 2
60214: PUSH
60215: LD_INT 3
60217: PLUS
60218: PUSH
60219: LD_INT 5
60221: PUSH
60222: EMPTY
60223: LIST
60224: LIST
60225: LIST
60226: PUSH
60227: LD_VAR 0 1
60231: PUSH
60232: LD_INT 4
60234: PLUS
60235: PUSH
60236: LD_VAR 0 2
60240: PUSH
60241: LD_INT 4
60243: PUSH
60244: EMPTY
60245: LIST
60246: LIST
60247: LIST
60248: PUSH
60249: LD_VAR 0 1
60253: PUSH
60254: LD_VAR 0 2
60258: PUSH
60259: LD_INT 3
60261: MINUS
60262: PUSH
60263: LD_INT 3
60265: PUSH
60266: EMPTY
60267: LIST
60268: LIST
60269: LIST
60270: PUSH
60271: LD_VAR 0 1
60275: PUSH
60276: LD_INT 4
60278: MINUS
60279: PUSH
60280: LD_VAR 0 2
60284: PUSH
60285: LD_INT 4
60287: MINUS
60288: PUSH
60289: LD_INT 2
60291: PUSH
60292: EMPTY
60293: LIST
60294: LIST
60295: LIST
60296: PUSH
60297: EMPTY
60298: LIST
60299: LIST
60300: LIST
60301: LIST
60302: LIST
60303: ST_TO_ADDR
// end ; 5 :
60304: GO 60444
60306: LD_INT 5
60308: DOUBLE
60309: EQUAL
60310: IFTRUE 60314
60312: GO 60443
60314: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
60315: LD_ADDR_VAR 0 5
60319: PUSH
60320: LD_VAR 0 1
60324: PUSH
60325: LD_INT 4
60327: MINUS
60328: PUSH
60329: LD_VAR 0 2
60333: PUSH
60334: LD_INT 1
60336: PUSH
60337: EMPTY
60338: LIST
60339: LIST
60340: LIST
60341: PUSH
60342: LD_VAR 0 1
60346: PUSH
60347: LD_VAR 0 2
60351: PUSH
60352: LD_INT 4
60354: MINUS
60355: PUSH
60356: LD_INT 3
60358: PUSH
60359: EMPTY
60360: LIST
60361: LIST
60362: LIST
60363: PUSH
60364: LD_VAR 0 1
60368: PUSH
60369: LD_INT 4
60371: PLUS
60372: PUSH
60373: LD_VAR 0 2
60377: PUSH
60378: LD_INT 4
60380: PLUS
60381: PUSH
60382: LD_INT 5
60384: PUSH
60385: EMPTY
60386: LIST
60387: LIST
60388: LIST
60389: PUSH
60390: LD_VAR 0 1
60394: PUSH
60395: LD_INT 3
60397: PLUS
60398: PUSH
60399: LD_VAR 0 2
60403: PUSH
60404: LD_INT 4
60406: PUSH
60407: EMPTY
60408: LIST
60409: LIST
60410: LIST
60411: PUSH
60412: LD_VAR 0 1
60416: PUSH
60417: LD_VAR 0 2
60421: PUSH
60422: LD_INT 3
60424: PLUS
60425: PUSH
60426: LD_INT 0
60428: PUSH
60429: EMPTY
60430: LIST
60431: LIST
60432: LIST
60433: PUSH
60434: EMPTY
60435: LIST
60436: LIST
60437: LIST
60438: LIST
60439: LIST
60440: ST_TO_ADDR
// end ; end ;
60441: GO 60444
60443: POP
// result := list ;
60444: LD_ADDR_VAR 0 4
60448: PUSH
60449: LD_VAR 0 5
60453: ST_TO_ADDR
// end ;
60454: LD_VAR 0 4
60458: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
60459: LD_INT 0
60461: PPUSH
60462: PPUSH
60463: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
60464: LD_VAR 0 1
60468: NOT
60469: PUSH
60470: LD_VAR 0 2
60474: PUSH
60475: LD_INT 1
60477: PUSH
60478: LD_INT 2
60480: PUSH
60481: LD_INT 3
60483: PUSH
60484: LD_INT 4
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: LIST
60491: LIST
60492: IN
60493: NOT
60494: OR
60495: IFFALSE 60499
// exit ;
60497: GO 60591
// tmp := [ ] ;
60499: LD_ADDR_VAR 0 5
60503: PUSH
60504: EMPTY
60505: ST_TO_ADDR
// for i in units do
60506: LD_ADDR_VAR 0 4
60510: PUSH
60511: LD_VAR 0 1
60515: PUSH
60516: FOR_IN
60517: IFFALSE 60560
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
60519: LD_ADDR_VAR 0 5
60523: PUSH
60524: LD_VAR 0 5
60528: PPUSH
60529: LD_VAR 0 5
60533: PUSH
60534: LD_INT 1
60536: PLUS
60537: PPUSH
60538: LD_VAR 0 4
60542: PPUSH
60543: LD_VAR 0 2
60547: PPUSH
60548: CALL_OW 259
60552: PPUSH
60553: CALL_OW 2
60557: ST_TO_ADDR
60558: GO 60516
60560: POP
60561: POP
// if not tmp then
60562: LD_VAR 0 5
60566: NOT
60567: IFFALSE 60571
// exit ;
60569: GO 60591
// result := SortListByListDesc ( units , tmp ) ;
60571: LD_ADDR_VAR 0 3
60575: PUSH
60576: LD_VAR 0 1
60580: PPUSH
60581: LD_VAR 0 5
60585: PPUSH
60586: CALL_OW 77
60590: ST_TO_ADDR
// end ;
60591: LD_VAR 0 3
60595: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
60596: LD_INT 0
60598: PPUSH
60599: PPUSH
60600: PPUSH
// x := GetX ( building ) ;
60601: LD_ADDR_VAR 0 4
60605: PUSH
60606: LD_VAR 0 2
60610: PPUSH
60611: CALL_OW 250
60615: ST_TO_ADDR
// y := GetY ( building ) ;
60616: LD_ADDR_VAR 0 5
60620: PUSH
60621: LD_VAR 0 2
60625: PPUSH
60626: CALL_OW 251
60630: ST_TO_ADDR
// if GetTaskList ( unit ) then
60631: LD_VAR 0 1
60635: PPUSH
60636: CALL_OW 437
60640: IFFALSE 60735
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60642: LD_STRING e
60644: PUSH
60645: LD_VAR 0 1
60649: PPUSH
60650: CALL_OW 437
60654: PUSH
60655: LD_INT 1
60657: ARRAY
60658: PUSH
60659: LD_INT 1
60661: ARRAY
60662: EQUAL
60663: PUSH
60664: LD_VAR 0 4
60668: PUSH
60669: LD_VAR 0 1
60673: PPUSH
60674: CALL_OW 437
60678: PUSH
60679: LD_INT 1
60681: ARRAY
60682: PUSH
60683: LD_INT 2
60685: ARRAY
60686: EQUAL
60687: AND
60688: PUSH
60689: LD_VAR 0 5
60693: PUSH
60694: LD_VAR 0 1
60698: PPUSH
60699: CALL_OW 437
60703: PUSH
60704: LD_INT 1
60706: ARRAY
60707: PUSH
60708: LD_INT 3
60710: ARRAY
60711: EQUAL
60712: AND
60713: IFFALSE 60725
// result := true else
60715: LD_ADDR_VAR 0 3
60719: PUSH
60720: LD_INT 1
60722: ST_TO_ADDR
60723: GO 60733
// result := false ;
60725: LD_ADDR_VAR 0 3
60729: PUSH
60730: LD_INT 0
60732: ST_TO_ADDR
// end else
60733: GO 60743
// result := false ;
60735: LD_ADDR_VAR 0 3
60739: PUSH
60740: LD_INT 0
60742: ST_TO_ADDR
// end ;
60743: LD_VAR 0 3
60747: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
60748: LD_INT 0
60750: PPUSH
60751: PPUSH
60752: PPUSH
60753: PPUSH
// if not unit or not area then
60754: LD_VAR 0 1
60758: NOT
60759: PUSH
60760: LD_VAR 0 2
60764: NOT
60765: OR
60766: IFFALSE 60770
// exit ;
60768: GO 60934
// tmp := AreaToList ( area , i ) ;
60770: LD_ADDR_VAR 0 6
60774: PUSH
60775: LD_VAR 0 2
60779: PPUSH
60780: LD_VAR 0 5
60784: PPUSH
60785: CALL_OW 517
60789: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
60790: LD_ADDR_VAR 0 5
60794: PUSH
60795: DOUBLE
60796: LD_INT 1
60798: DEC
60799: ST_TO_ADDR
60800: LD_VAR 0 6
60804: PUSH
60805: LD_INT 1
60807: ARRAY
60808: PUSH
60809: FOR_TO
60810: IFFALSE 60932
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
60812: LD_ADDR_VAR 0 7
60816: PUSH
60817: LD_VAR 0 6
60821: PUSH
60822: LD_INT 1
60824: ARRAY
60825: PUSH
60826: LD_VAR 0 5
60830: ARRAY
60831: PUSH
60832: LD_VAR 0 6
60836: PUSH
60837: LD_INT 2
60839: ARRAY
60840: PUSH
60841: LD_VAR 0 5
60845: ARRAY
60846: PUSH
60847: EMPTY
60848: LIST
60849: LIST
60850: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
60851: LD_VAR 0 7
60855: PUSH
60856: LD_INT 1
60858: ARRAY
60859: PPUSH
60860: LD_VAR 0 7
60864: PUSH
60865: LD_INT 2
60867: ARRAY
60868: PPUSH
60869: CALL_OW 428
60873: PUSH
60874: LD_INT 0
60876: EQUAL
60877: IFFALSE 60930
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
60879: LD_VAR 0 1
60883: PPUSH
60884: LD_VAR 0 7
60888: PUSH
60889: LD_INT 1
60891: ARRAY
60892: PPUSH
60893: LD_VAR 0 7
60897: PUSH
60898: LD_INT 2
60900: ARRAY
60901: PPUSH
60902: LD_VAR 0 3
60906: PPUSH
60907: CALL_OW 48
// result := IsPlaced ( unit ) ;
60911: LD_ADDR_VAR 0 4
60915: PUSH
60916: LD_VAR 0 1
60920: PPUSH
60921: CALL_OW 305
60925: ST_TO_ADDR
// exit ;
60926: POP
60927: POP
60928: GO 60934
// end ; end ;
60930: GO 60809
60932: POP
60933: POP
// end ;
60934: LD_VAR 0 4
60938: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
60939: LD_INT 0
60941: PPUSH
60942: PPUSH
60943: PPUSH
// if not side or side > 8 then
60944: LD_VAR 0 1
60948: NOT
60949: PUSH
60950: LD_VAR 0 1
60954: PUSH
60955: LD_INT 8
60957: GREATER
60958: OR
60959: IFFALSE 60963
// exit ;
60961: GO 61150
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
60963: LD_ADDR_VAR 0 4
60967: PUSH
60968: LD_INT 22
60970: PUSH
60971: LD_VAR 0 1
60975: PUSH
60976: EMPTY
60977: LIST
60978: LIST
60979: PUSH
60980: LD_INT 21
60982: PUSH
60983: LD_INT 3
60985: PUSH
60986: EMPTY
60987: LIST
60988: LIST
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: PPUSH
60994: CALL_OW 69
60998: ST_TO_ADDR
// if not tmp then
60999: LD_VAR 0 4
61003: NOT
61004: IFFALSE 61008
// exit ;
61006: GO 61150
// enable_addtolog := true ;
61008: LD_ADDR_OWVAR 81
61012: PUSH
61013: LD_INT 1
61015: ST_TO_ADDR
// AddToLog ( [ ) ;
61016: LD_STRING [
61018: PPUSH
61019: CALL_OW 561
// for i in tmp do
61023: LD_ADDR_VAR 0 3
61027: PUSH
61028: LD_VAR 0 4
61032: PUSH
61033: FOR_IN
61034: IFFALSE 61141
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
61036: LD_STRING [
61038: PUSH
61039: LD_VAR 0 3
61043: PPUSH
61044: CALL_OW 266
61048: STR
61049: PUSH
61050: LD_STRING , 
61052: STR
61053: PUSH
61054: LD_VAR 0 3
61058: PPUSH
61059: CALL_OW 250
61063: STR
61064: PUSH
61065: LD_STRING , 
61067: STR
61068: PUSH
61069: LD_VAR 0 3
61073: PPUSH
61074: CALL_OW 251
61078: STR
61079: PUSH
61080: LD_STRING , 
61082: STR
61083: PUSH
61084: LD_VAR 0 3
61088: PPUSH
61089: CALL_OW 254
61093: STR
61094: PUSH
61095: LD_STRING , 
61097: STR
61098: PUSH
61099: LD_VAR 0 3
61103: PPUSH
61104: LD_INT 1
61106: PPUSH
61107: CALL_OW 268
61111: STR
61112: PUSH
61113: LD_STRING , 
61115: STR
61116: PUSH
61117: LD_VAR 0 3
61121: PPUSH
61122: LD_INT 2
61124: PPUSH
61125: CALL_OW 268
61129: STR
61130: PUSH
61131: LD_STRING ],
61133: STR
61134: PPUSH
61135: CALL_OW 561
// end ;
61139: GO 61033
61141: POP
61142: POP
// AddToLog ( ]; ) ;
61143: LD_STRING ];
61145: PPUSH
61146: CALL_OW 561
// end ;
61150: LD_VAR 0 2
61154: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
61155: LD_INT 0
61157: PPUSH
61158: PPUSH
61159: PPUSH
61160: PPUSH
61161: PPUSH
// if not area or not rate or not max then
61162: LD_VAR 0 1
61166: NOT
61167: PUSH
61168: LD_VAR 0 2
61172: NOT
61173: OR
61174: PUSH
61175: LD_VAR 0 4
61179: NOT
61180: OR
61181: IFFALSE 61185
// exit ;
61183: GO 61377
// while 1 do
61185: LD_INT 1
61187: IFFALSE 61377
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
61189: LD_ADDR_VAR 0 9
61193: PUSH
61194: LD_VAR 0 1
61198: PPUSH
61199: LD_INT 1
61201: PPUSH
61202: CALL_OW 287
61206: PUSH
61207: LD_INT 10
61209: MUL
61210: ST_TO_ADDR
// r := rate / 10 ;
61211: LD_ADDR_VAR 0 7
61215: PUSH
61216: LD_VAR 0 2
61220: PUSH
61221: LD_INT 10
61223: DIVREAL
61224: ST_TO_ADDR
// time := 1 1$00 ;
61225: LD_ADDR_VAR 0 8
61229: PUSH
61230: LD_INT 2100
61232: ST_TO_ADDR
// if amount < min then
61233: LD_VAR 0 9
61237: PUSH
61238: LD_VAR 0 3
61242: LESS
61243: IFFALSE 61261
// r := r * 2 else
61245: LD_ADDR_VAR 0 7
61249: PUSH
61250: LD_VAR 0 7
61254: PUSH
61255: LD_INT 2
61257: MUL
61258: ST_TO_ADDR
61259: GO 61287
// if amount > max then
61261: LD_VAR 0 9
61265: PUSH
61266: LD_VAR 0 4
61270: GREATER
61271: IFFALSE 61287
// r := r / 2 ;
61273: LD_ADDR_VAR 0 7
61277: PUSH
61278: LD_VAR 0 7
61282: PUSH
61283: LD_INT 2
61285: DIVREAL
61286: ST_TO_ADDR
// time := time / r ;
61287: LD_ADDR_VAR 0 8
61291: PUSH
61292: LD_VAR 0 8
61296: PUSH
61297: LD_VAR 0 7
61301: DIVREAL
61302: ST_TO_ADDR
// if time < 0 then
61303: LD_VAR 0 8
61307: PUSH
61308: LD_INT 0
61310: LESS
61311: IFFALSE 61328
// time := time * - 1 ;
61313: LD_ADDR_VAR 0 8
61317: PUSH
61318: LD_VAR 0 8
61322: PUSH
61323: LD_INT 1
61325: NEG
61326: MUL
61327: ST_TO_ADDR
// wait ( time ) ;
61328: LD_VAR 0 8
61332: PPUSH
61333: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
61337: LD_INT 35
61339: PPUSH
61340: LD_INT 875
61342: PPUSH
61343: CALL_OW 12
61347: PPUSH
61348: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
61352: LD_INT 1
61354: PPUSH
61355: LD_INT 5
61357: PPUSH
61358: CALL_OW 12
61362: PPUSH
61363: LD_VAR 0 1
61367: PPUSH
61368: LD_INT 1
61370: PPUSH
61371: CALL_OW 55
// end ;
61375: GO 61185
// end ;
61377: LD_VAR 0 5
61381: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
61382: LD_INT 0
61384: PPUSH
61385: PPUSH
61386: PPUSH
61387: PPUSH
61388: PPUSH
61389: PPUSH
61390: PPUSH
61391: PPUSH
// if not turrets or not factories then
61392: LD_VAR 0 1
61396: NOT
61397: PUSH
61398: LD_VAR 0 2
61402: NOT
61403: OR
61404: IFFALSE 61408
// exit ;
61406: GO 61715
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
61408: LD_ADDR_VAR 0 10
61412: PUSH
61413: LD_INT 5
61415: PUSH
61416: LD_INT 6
61418: PUSH
61419: EMPTY
61420: LIST
61421: LIST
61422: PUSH
61423: LD_INT 2
61425: PUSH
61426: LD_INT 4
61428: PUSH
61429: EMPTY
61430: LIST
61431: LIST
61432: PUSH
61433: LD_INT 3
61435: PUSH
61436: LD_INT 5
61438: PUSH
61439: EMPTY
61440: LIST
61441: LIST
61442: PUSH
61443: EMPTY
61444: LIST
61445: LIST
61446: LIST
61447: PUSH
61448: LD_INT 24
61450: PUSH
61451: LD_INT 25
61453: PUSH
61454: EMPTY
61455: LIST
61456: LIST
61457: PUSH
61458: LD_INT 23
61460: PUSH
61461: LD_INT 27
61463: PUSH
61464: EMPTY
61465: LIST
61466: LIST
61467: PUSH
61468: EMPTY
61469: LIST
61470: LIST
61471: PUSH
61472: LD_INT 42
61474: PUSH
61475: LD_INT 43
61477: PUSH
61478: EMPTY
61479: LIST
61480: LIST
61481: PUSH
61482: LD_INT 44
61484: PUSH
61485: LD_INT 46
61487: PUSH
61488: EMPTY
61489: LIST
61490: LIST
61491: PUSH
61492: LD_INT 45
61494: PUSH
61495: LD_INT 47
61497: PUSH
61498: EMPTY
61499: LIST
61500: LIST
61501: PUSH
61502: EMPTY
61503: LIST
61504: LIST
61505: LIST
61506: PUSH
61507: EMPTY
61508: LIST
61509: LIST
61510: LIST
61511: ST_TO_ADDR
// result := [ ] ;
61512: LD_ADDR_VAR 0 3
61516: PUSH
61517: EMPTY
61518: ST_TO_ADDR
// for i in turrets do
61519: LD_ADDR_VAR 0 4
61523: PUSH
61524: LD_VAR 0 1
61528: PUSH
61529: FOR_IN
61530: IFFALSE 61713
// begin nat := GetNation ( i ) ;
61532: LD_ADDR_VAR 0 7
61536: PUSH
61537: LD_VAR 0 4
61541: PPUSH
61542: CALL_OW 248
61546: ST_TO_ADDR
// weapon := 0 ;
61547: LD_ADDR_VAR 0 8
61551: PUSH
61552: LD_INT 0
61554: ST_TO_ADDR
// if not nat then
61555: LD_VAR 0 7
61559: NOT
61560: IFFALSE 61564
// continue ;
61562: GO 61529
// for j in list [ nat ] do
61564: LD_ADDR_VAR 0 5
61568: PUSH
61569: LD_VAR 0 10
61573: PUSH
61574: LD_VAR 0 7
61578: ARRAY
61579: PUSH
61580: FOR_IN
61581: IFFALSE 61622
// if GetBWeapon ( i ) = j [ 1 ] then
61583: LD_VAR 0 4
61587: PPUSH
61588: CALL_OW 269
61592: PUSH
61593: LD_VAR 0 5
61597: PUSH
61598: LD_INT 1
61600: ARRAY
61601: EQUAL
61602: IFFALSE 61620
// begin weapon := j [ 2 ] ;
61604: LD_ADDR_VAR 0 8
61608: PUSH
61609: LD_VAR 0 5
61613: PUSH
61614: LD_INT 2
61616: ARRAY
61617: ST_TO_ADDR
// break ;
61618: GO 61622
// end ;
61620: GO 61580
61622: POP
61623: POP
// if not weapon then
61624: LD_VAR 0 8
61628: NOT
61629: IFFALSE 61633
// continue ;
61631: GO 61529
// for k in factories do
61633: LD_ADDR_VAR 0 6
61637: PUSH
61638: LD_VAR 0 2
61642: PUSH
61643: FOR_IN
61644: IFFALSE 61709
// begin weapons := AvailableWeaponList ( k ) ;
61646: LD_ADDR_VAR 0 9
61650: PUSH
61651: LD_VAR 0 6
61655: PPUSH
61656: CALL_OW 478
61660: ST_TO_ADDR
// if not weapons then
61661: LD_VAR 0 9
61665: NOT
61666: IFFALSE 61670
// continue ;
61668: GO 61643
// if weapon in weapons then
61670: LD_VAR 0 8
61674: PUSH
61675: LD_VAR 0 9
61679: IN
61680: IFFALSE 61707
// begin result := [ i , weapon ] ;
61682: LD_ADDR_VAR 0 3
61686: PUSH
61687: LD_VAR 0 4
61691: PUSH
61692: LD_VAR 0 8
61696: PUSH
61697: EMPTY
61698: LIST
61699: LIST
61700: ST_TO_ADDR
// exit ;
61701: POP
61702: POP
61703: POP
61704: POP
61705: GO 61715
// end ; end ;
61707: GO 61643
61709: POP
61710: POP
// end ;
61711: GO 61529
61713: POP
61714: POP
// end ;
61715: LD_VAR 0 3
61719: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
61720: LD_INT 0
61722: PPUSH
// if not side or side > 8 then
61723: LD_VAR 0 3
61727: NOT
61728: PUSH
61729: LD_VAR 0 3
61733: PUSH
61734: LD_INT 8
61736: GREATER
61737: OR
61738: IFFALSE 61742
// exit ;
61740: GO 61801
// if not range then
61742: LD_VAR 0 4
61746: NOT
61747: IFFALSE 61758
// range := - 12 ;
61749: LD_ADDR_VAR 0 4
61753: PUSH
61754: LD_INT 12
61756: NEG
61757: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
61758: LD_VAR 0 1
61762: PPUSH
61763: LD_VAR 0 2
61767: PPUSH
61768: LD_VAR 0 3
61772: PPUSH
61773: LD_VAR 0 4
61777: PPUSH
61778: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
61782: LD_VAR 0 1
61786: PPUSH
61787: LD_VAR 0 2
61791: PPUSH
61792: LD_VAR 0 3
61796: PPUSH
61797: CALL_OW 331
// end ;
61801: LD_VAR 0 5
61805: RET
// export function Video ( mode ) ; begin
61806: LD_INT 0
61808: PPUSH
// ingame_video = mode ;
61809: LD_ADDR_OWVAR 52
61813: PUSH
61814: LD_VAR 0 1
61818: ST_TO_ADDR
// interface_hidden = mode ;
61819: LD_ADDR_OWVAR 54
61823: PUSH
61824: LD_VAR 0 1
61828: ST_TO_ADDR
// end ;
61829: LD_VAR 0 2
61833: RET
// export function Join ( array , element ) ; begin
61834: LD_INT 0
61836: PPUSH
// result := array ^ element ;
61837: LD_ADDR_VAR 0 3
61841: PUSH
61842: LD_VAR 0 1
61846: PUSH
61847: LD_VAR 0 2
61851: ADD
61852: ST_TO_ADDR
// end ;
61853: LD_VAR 0 3
61857: RET
// export function JoinUnion ( array , element ) ; begin
61858: LD_INT 0
61860: PPUSH
// result := array union element ;
61861: LD_ADDR_VAR 0 3
61865: PUSH
61866: LD_VAR 0 1
61870: PUSH
61871: LD_VAR 0 2
61875: UNION
61876: ST_TO_ADDR
// end ;
61877: LD_VAR 0 3
61881: RET
// export function GetBehemoths ( side ) ; begin
61882: LD_INT 0
61884: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
61885: LD_ADDR_VAR 0 2
61889: PUSH
61890: LD_INT 22
61892: PUSH
61893: LD_VAR 0 1
61897: PUSH
61898: EMPTY
61899: LIST
61900: LIST
61901: PUSH
61902: LD_INT 31
61904: PUSH
61905: LD_INT 25
61907: PUSH
61908: EMPTY
61909: LIST
61910: LIST
61911: PUSH
61912: EMPTY
61913: LIST
61914: LIST
61915: PPUSH
61916: CALL_OW 69
61920: ST_TO_ADDR
// end ;
61921: LD_VAR 0 2
61925: RET
// export function Shuffle ( array ) ; var i , index ; begin
61926: LD_INT 0
61928: PPUSH
61929: PPUSH
61930: PPUSH
// result := [ ] ;
61931: LD_ADDR_VAR 0 2
61935: PUSH
61936: EMPTY
61937: ST_TO_ADDR
// if not array then
61938: LD_VAR 0 1
61942: NOT
61943: IFFALSE 61947
// exit ;
61945: GO 62046
// Randomize ;
61947: CALL_OW 10
// for i = array downto 1 do
61951: LD_ADDR_VAR 0 3
61955: PUSH
61956: DOUBLE
61957: LD_VAR 0 1
61961: INC
61962: ST_TO_ADDR
61963: LD_INT 1
61965: PUSH
61966: FOR_DOWNTO
61967: IFFALSE 62044
// begin index := rand ( 1 , array ) ;
61969: LD_ADDR_VAR 0 4
61973: PUSH
61974: LD_INT 1
61976: PPUSH
61977: LD_VAR 0 1
61981: PPUSH
61982: CALL_OW 12
61986: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
61987: LD_ADDR_VAR 0 2
61991: PUSH
61992: LD_VAR 0 2
61996: PPUSH
61997: LD_VAR 0 2
62001: PUSH
62002: LD_INT 1
62004: PLUS
62005: PPUSH
62006: LD_VAR 0 1
62010: PUSH
62011: LD_VAR 0 4
62015: ARRAY
62016: PPUSH
62017: CALL_OW 2
62021: ST_TO_ADDR
// array := Delete ( array , index ) ;
62022: LD_ADDR_VAR 0 1
62026: PUSH
62027: LD_VAR 0 1
62031: PPUSH
62032: LD_VAR 0 4
62036: PPUSH
62037: CALL_OW 3
62041: ST_TO_ADDR
// end ;
62042: GO 61966
62044: POP
62045: POP
// end ; end_of_file
62046: LD_VAR 0 2
62050: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
62051: GO 62053
62053: DISABLE
// begin ru_radar := 98 ;
62054: LD_ADDR_EXP 29
62058: PUSH
62059: LD_INT 98
62061: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
62062: LD_ADDR_EXP 30
62066: PUSH
62067: LD_INT 89
62069: ST_TO_ADDR
// us_hack := 99 ;
62070: LD_ADDR_EXP 31
62074: PUSH
62075: LD_INT 99
62077: ST_TO_ADDR
// us_artillery := 97 ;
62078: LD_ADDR_EXP 32
62082: PUSH
62083: LD_INT 97
62085: ST_TO_ADDR
// ar_bio_bomb := 91 ;
62086: LD_ADDR_EXP 33
62090: PUSH
62091: LD_INT 91
62093: ST_TO_ADDR
// end ; end_of_file
62094: END
// export skirmish , debug_mc ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_teleport_exit_set , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver , mc_class , mc_class_case_use ; export function InitMacro ; var i ; begin
62095: LD_INT 0
62097: PPUSH
62098: PPUSH
// skirmish := false ;
62099: LD_ADDR_EXP 34
62103: PUSH
62104: LD_INT 0
62106: ST_TO_ADDR
// debug_mc := false ;
62107: LD_ADDR_EXP 35
62111: PUSH
62112: LD_INT 0
62114: ST_TO_ADDR
// mc_bases := [ ] ;
62115: LD_ADDR_EXP 36
62119: PUSH
62120: EMPTY
62121: ST_TO_ADDR
// mc_sides := [ ] ;
62122: LD_ADDR_EXP 62
62126: PUSH
62127: EMPTY
62128: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
62129: LD_ADDR_EXP 37
62133: PUSH
62134: EMPTY
62135: ST_TO_ADDR
// mc_building_repairs := [ ] ;
62136: LD_ADDR_EXP 38
62140: PUSH
62141: EMPTY
62142: ST_TO_ADDR
// mc_need_heal := [ ] ;
62143: LD_ADDR_EXP 39
62147: PUSH
62148: EMPTY
62149: ST_TO_ADDR
// mc_healers := [ ] ;
62150: LD_ADDR_EXP 40
62154: PUSH
62155: EMPTY
62156: ST_TO_ADDR
// mc_build_list := [ ] ;
62157: LD_ADDR_EXP 41
62161: PUSH
62162: EMPTY
62163: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
62164: LD_ADDR_EXP 68
62168: PUSH
62169: EMPTY
62170: ST_TO_ADDR
// mc_builders := [ ] ;
62171: LD_ADDR_EXP 42
62175: PUSH
62176: EMPTY
62177: ST_TO_ADDR
// mc_construct_list := [ ] ;
62178: LD_ADDR_EXP 43
62182: PUSH
62183: EMPTY
62184: ST_TO_ADDR
// mc_turret_list := [ ] ;
62185: LD_ADDR_EXP 44
62189: PUSH
62190: EMPTY
62191: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
62192: LD_ADDR_EXP 45
62196: PUSH
62197: EMPTY
62198: ST_TO_ADDR
// mc_miners := [ ] ;
62199: LD_ADDR_EXP 50
62203: PUSH
62204: EMPTY
62205: ST_TO_ADDR
// mc_mines := [ ] ;
62206: LD_ADDR_EXP 49
62210: PUSH
62211: EMPTY
62212: ST_TO_ADDR
// mc_minefields := [ ] ;
62213: LD_ADDR_EXP 51
62217: PUSH
62218: EMPTY
62219: ST_TO_ADDR
// mc_crates := [ ] ;
62220: LD_ADDR_EXP 52
62224: PUSH
62225: EMPTY
62226: ST_TO_ADDR
// mc_crates_collector := [ ] ;
62227: LD_ADDR_EXP 53
62231: PUSH
62232: EMPTY
62233: ST_TO_ADDR
// mc_crates_area := [ ] ;
62234: LD_ADDR_EXP 54
62238: PUSH
62239: EMPTY
62240: ST_TO_ADDR
// mc_vehicles := [ ] ;
62241: LD_ADDR_EXP 55
62245: PUSH
62246: EMPTY
62247: ST_TO_ADDR
// mc_attack := [ ] ;
62248: LD_ADDR_EXP 56
62252: PUSH
62253: EMPTY
62254: ST_TO_ADDR
// mc_produce := [ ] ;
62255: LD_ADDR_EXP 57
62259: PUSH
62260: EMPTY
62261: ST_TO_ADDR
// mc_defender := [ ] ;
62262: LD_ADDR_EXP 58
62266: PUSH
62267: EMPTY
62268: ST_TO_ADDR
// mc_parking := [ ] ;
62269: LD_ADDR_EXP 60
62273: PUSH
62274: EMPTY
62275: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
62276: LD_ADDR_EXP 46
62280: PUSH
62281: EMPTY
62282: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
62283: LD_ADDR_EXP 48
62287: PUSH
62288: EMPTY
62289: ST_TO_ADDR
// mc_scan := [ ] ;
62290: LD_ADDR_EXP 59
62294: PUSH
62295: EMPTY
62296: ST_TO_ADDR
// mc_scan_area := [ ] ;
62297: LD_ADDR_EXP 61
62301: PUSH
62302: EMPTY
62303: ST_TO_ADDR
// mc_tech := [ ] ;
62304: LD_ADDR_EXP 63
62308: PUSH
62309: EMPTY
62310: ST_TO_ADDR
// mc_class := [ ] ;
62311: LD_ADDR_EXP 77
62315: PUSH
62316: EMPTY
62317: ST_TO_ADDR
// mc_class_case_use := [ ] ;
62318: LD_ADDR_EXP 78
62322: PUSH
62323: EMPTY
62324: ST_TO_ADDR
// end ;
62325: LD_VAR 0 1
62329: RET
// export function MC_Kill ( base ) ; begin
62330: LD_INT 0
62332: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
62333: LD_ADDR_EXP 36
62337: PUSH
62338: LD_EXP 36
62342: PPUSH
62343: LD_VAR 0 1
62347: PPUSH
62348: EMPTY
62349: PPUSH
62350: CALL_OW 1
62354: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
62355: LD_ADDR_EXP 37
62359: PUSH
62360: LD_EXP 37
62364: PPUSH
62365: LD_VAR 0 1
62369: PPUSH
62370: EMPTY
62371: PPUSH
62372: CALL_OW 1
62376: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
62377: LD_ADDR_EXP 38
62381: PUSH
62382: LD_EXP 38
62386: PPUSH
62387: LD_VAR 0 1
62391: PPUSH
62392: EMPTY
62393: PPUSH
62394: CALL_OW 1
62398: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
62399: LD_ADDR_EXP 39
62403: PUSH
62404: LD_EXP 39
62408: PPUSH
62409: LD_VAR 0 1
62413: PPUSH
62414: EMPTY
62415: PPUSH
62416: CALL_OW 1
62420: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
62421: LD_ADDR_EXP 40
62425: PUSH
62426: LD_EXP 40
62430: PPUSH
62431: LD_VAR 0 1
62435: PPUSH
62436: EMPTY
62437: PPUSH
62438: CALL_OW 1
62442: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
62443: LD_ADDR_EXP 41
62447: PUSH
62448: LD_EXP 41
62452: PPUSH
62453: LD_VAR 0 1
62457: PPUSH
62458: EMPTY
62459: PPUSH
62460: CALL_OW 1
62464: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
62465: LD_ADDR_EXP 42
62469: PUSH
62470: LD_EXP 42
62474: PPUSH
62475: LD_VAR 0 1
62479: PPUSH
62480: EMPTY
62481: PPUSH
62482: CALL_OW 1
62486: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
62487: LD_ADDR_EXP 43
62491: PUSH
62492: LD_EXP 43
62496: PPUSH
62497: LD_VAR 0 1
62501: PPUSH
62502: EMPTY
62503: PPUSH
62504: CALL_OW 1
62508: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
62509: LD_ADDR_EXP 44
62513: PUSH
62514: LD_EXP 44
62518: PPUSH
62519: LD_VAR 0 1
62523: PPUSH
62524: EMPTY
62525: PPUSH
62526: CALL_OW 1
62530: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
62531: LD_ADDR_EXP 45
62535: PUSH
62536: LD_EXP 45
62540: PPUSH
62541: LD_VAR 0 1
62545: PPUSH
62546: EMPTY
62547: PPUSH
62548: CALL_OW 1
62552: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
62553: LD_ADDR_EXP 46
62557: PUSH
62558: LD_EXP 46
62562: PPUSH
62563: LD_VAR 0 1
62567: PPUSH
62568: EMPTY
62569: PPUSH
62570: CALL_OW 1
62574: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
62575: LD_ADDR_EXP 47
62579: PUSH
62580: LD_EXP 47
62584: PPUSH
62585: LD_VAR 0 1
62589: PPUSH
62590: LD_INT 0
62592: PPUSH
62593: CALL_OW 1
62597: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
62598: LD_ADDR_EXP 48
62602: PUSH
62603: LD_EXP 48
62607: PPUSH
62608: LD_VAR 0 1
62612: PPUSH
62613: EMPTY
62614: PPUSH
62615: CALL_OW 1
62619: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
62620: LD_ADDR_EXP 49
62624: PUSH
62625: LD_EXP 49
62629: PPUSH
62630: LD_VAR 0 1
62634: PPUSH
62635: EMPTY
62636: PPUSH
62637: CALL_OW 1
62641: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
62642: LD_ADDR_EXP 50
62646: PUSH
62647: LD_EXP 50
62651: PPUSH
62652: LD_VAR 0 1
62656: PPUSH
62657: EMPTY
62658: PPUSH
62659: CALL_OW 1
62663: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
62664: LD_ADDR_EXP 51
62668: PUSH
62669: LD_EXP 51
62673: PPUSH
62674: LD_VAR 0 1
62678: PPUSH
62679: EMPTY
62680: PPUSH
62681: CALL_OW 1
62685: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
62686: LD_ADDR_EXP 52
62690: PUSH
62691: LD_EXP 52
62695: PPUSH
62696: LD_VAR 0 1
62700: PPUSH
62701: EMPTY
62702: PPUSH
62703: CALL_OW 1
62707: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
62708: LD_ADDR_EXP 53
62712: PUSH
62713: LD_EXP 53
62717: PPUSH
62718: LD_VAR 0 1
62722: PPUSH
62723: EMPTY
62724: PPUSH
62725: CALL_OW 1
62729: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
62730: LD_ADDR_EXP 54
62734: PUSH
62735: LD_EXP 54
62739: PPUSH
62740: LD_VAR 0 1
62744: PPUSH
62745: EMPTY
62746: PPUSH
62747: CALL_OW 1
62751: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
62752: LD_ADDR_EXP 55
62756: PUSH
62757: LD_EXP 55
62761: PPUSH
62762: LD_VAR 0 1
62766: PPUSH
62767: EMPTY
62768: PPUSH
62769: CALL_OW 1
62773: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
62774: LD_ADDR_EXP 56
62778: PUSH
62779: LD_EXP 56
62783: PPUSH
62784: LD_VAR 0 1
62788: PPUSH
62789: EMPTY
62790: PPUSH
62791: CALL_OW 1
62795: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
62796: LD_ADDR_EXP 57
62800: PUSH
62801: LD_EXP 57
62805: PPUSH
62806: LD_VAR 0 1
62810: PPUSH
62811: EMPTY
62812: PPUSH
62813: CALL_OW 1
62817: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
62818: LD_ADDR_EXP 58
62822: PUSH
62823: LD_EXP 58
62827: PPUSH
62828: LD_VAR 0 1
62832: PPUSH
62833: EMPTY
62834: PPUSH
62835: CALL_OW 1
62839: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
62840: LD_ADDR_EXP 59
62844: PUSH
62845: LD_EXP 59
62849: PPUSH
62850: LD_VAR 0 1
62854: PPUSH
62855: EMPTY
62856: PPUSH
62857: CALL_OW 1
62861: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
62862: LD_ADDR_EXP 60
62866: PUSH
62867: LD_EXP 60
62871: PPUSH
62872: LD_VAR 0 1
62876: PPUSH
62877: EMPTY
62878: PPUSH
62879: CALL_OW 1
62883: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
62884: LD_ADDR_EXP 61
62888: PUSH
62889: LD_EXP 61
62893: PPUSH
62894: LD_VAR 0 1
62898: PPUSH
62899: EMPTY
62900: PPUSH
62901: CALL_OW 1
62905: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
62906: LD_ADDR_EXP 63
62910: PUSH
62911: LD_EXP 63
62915: PPUSH
62916: LD_VAR 0 1
62920: PPUSH
62921: EMPTY
62922: PPUSH
62923: CALL_OW 1
62927: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
62928: LD_ADDR_EXP 65
62932: PUSH
62933: LD_EXP 65
62937: PPUSH
62938: LD_VAR 0 1
62942: PPUSH
62943: EMPTY
62944: PPUSH
62945: CALL_OW 1
62949: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
62950: LD_ADDR_EXP 66
62954: PUSH
62955: LD_EXP 66
62959: PPUSH
62960: LD_VAR 0 1
62964: PPUSH
62965: EMPTY
62966: PPUSH
62967: CALL_OW 1
62971: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
62972: LD_ADDR_EXP 67
62976: PUSH
62977: LD_EXP 67
62981: PPUSH
62982: LD_VAR 0 1
62986: PPUSH
62987: EMPTY
62988: PPUSH
62989: CALL_OW 1
62993: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
62994: LD_ADDR_EXP 68
62998: PUSH
62999: LD_EXP 68
63003: PPUSH
63004: LD_VAR 0 1
63008: PPUSH
63009: EMPTY
63010: PPUSH
63011: CALL_OW 1
63015: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
63016: LD_ADDR_EXP 69
63020: PUSH
63021: LD_EXP 69
63025: PPUSH
63026: LD_VAR 0 1
63030: PPUSH
63031: EMPTY
63032: PPUSH
63033: CALL_OW 1
63037: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
63038: LD_ADDR_EXP 70
63042: PUSH
63043: LD_EXP 70
63047: PPUSH
63048: LD_VAR 0 1
63052: PPUSH
63053: EMPTY
63054: PPUSH
63055: CALL_OW 1
63059: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
63060: LD_ADDR_EXP 71
63064: PUSH
63065: LD_EXP 71
63069: PPUSH
63070: LD_VAR 0 1
63074: PPUSH
63075: EMPTY
63076: PPUSH
63077: CALL_OW 1
63081: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
63082: LD_ADDR_EXP 72
63086: PUSH
63087: LD_EXP 72
63091: PPUSH
63092: LD_VAR 0 1
63096: PPUSH
63097: EMPTY
63098: PPUSH
63099: CALL_OW 1
63103: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
63104: LD_ADDR_EXP 73
63108: PUSH
63109: LD_EXP 73
63113: PPUSH
63114: LD_VAR 0 1
63118: PPUSH
63119: EMPTY
63120: PPUSH
63121: CALL_OW 1
63125: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
63126: LD_ADDR_EXP 74
63130: PUSH
63131: LD_EXP 74
63135: PPUSH
63136: LD_VAR 0 1
63140: PPUSH
63141: EMPTY
63142: PPUSH
63143: CALL_OW 1
63147: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
63148: LD_ADDR_EXP 75
63152: PUSH
63153: LD_EXP 75
63157: PPUSH
63158: LD_VAR 0 1
63162: PPUSH
63163: EMPTY
63164: PPUSH
63165: CALL_OW 1
63169: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
63170: LD_ADDR_EXP 76
63174: PUSH
63175: LD_EXP 76
63179: PPUSH
63180: LD_VAR 0 1
63184: PPUSH
63185: EMPTY
63186: PPUSH
63187: CALL_OW 1
63191: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
63192: LD_ADDR_EXP 77
63196: PUSH
63197: LD_EXP 77
63201: PPUSH
63202: LD_VAR 0 1
63206: PPUSH
63207: EMPTY
63208: PPUSH
63209: CALL_OW 1
63213: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
63214: LD_ADDR_EXP 78
63218: PUSH
63219: LD_EXP 78
63223: PPUSH
63224: LD_VAR 0 1
63228: PPUSH
63229: LD_INT 0
63231: PPUSH
63232: CALL_OW 1
63236: ST_TO_ADDR
// end ;
63237: LD_VAR 0 2
63241: RET
// export function MC_Add ( side , units ) ; var base ; begin
63242: LD_INT 0
63244: PPUSH
63245: PPUSH
// base := mc_bases + 1 ;
63246: LD_ADDR_VAR 0 4
63250: PUSH
63251: LD_EXP 36
63255: PUSH
63256: LD_INT 1
63258: PLUS
63259: ST_TO_ADDR
// mc_sides := Replace ( mc_sides , base , side ) ;
63260: LD_ADDR_EXP 62
63264: PUSH
63265: LD_EXP 62
63269: PPUSH
63270: LD_VAR 0 4
63274: PPUSH
63275: LD_VAR 0 1
63279: PPUSH
63280: CALL_OW 1
63284: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , base , units ) ;
63285: LD_ADDR_EXP 36
63289: PUSH
63290: LD_EXP 36
63294: PPUSH
63295: LD_VAR 0 4
63299: PPUSH
63300: LD_VAR 0 2
63304: PPUSH
63305: CALL_OW 1
63309: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
63310: LD_ADDR_EXP 37
63314: PUSH
63315: LD_EXP 37
63319: PPUSH
63320: LD_VAR 0 4
63324: PPUSH
63325: EMPTY
63326: PPUSH
63327: CALL_OW 1
63331: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
63332: LD_ADDR_EXP 38
63336: PUSH
63337: LD_EXP 38
63341: PPUSH
63342: LD_VAR 0 4
63346: PPUSH
63347: EMPTY
63348: PPUSH
63349: CALL_OW 1
63353: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
63354: LD_ADDR_EXP 39
63358: PUSH
63359: LD_EXP 39
63363: PPUSH
63364: LD_VAR 0 4
63368: PPUSH
63369: EMPTY
63370: PPUSH
63371: CALL_OW 1
63375: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
63376: LD_ADDR_EXP 40
63380: PUSH
63381: LD_EXP 40
63385: PPUSH
63386: LD_VAR 0 4
63390: PPUSH
63391: EMPTY
63392: PPUSH
63393: CALL_OW 1
63397: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
63398: LD_ADDR_EXP 41
63402: PUSH
63403: LD_EXP 41
63407: PPUSH
63408: LD_VAR 0 4
63412: PPUSH
63413: EMPTY
63414: PPUSH
63415: CALL_OW 1
63419: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
63420: LD_ADDR_EXP 42
63424: PUSH
63425: LD_EXP 42
63429: PPUSH
63430: LD_VAR 0 4
63434: PPUSH
63435: EMPTY
63436: PPUSH
63437: CALL_OW 1
63441: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
63442: LD_ADDR_EXP 43
63446: PUSH
63447: LD_EXP 43
63451: PPUSH
63452: LD_VAR 0 4
63456: PPUSH
63457: EMPTY
63458: PPUSH
63459: CALL_OW 1
63463: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
63464: LD_ADDR_EXP 44
63468: PUSH
63469: LD_EXP 44
63473: PPUSH
63474: LD_VAR 0 4
63478: PPUSH
63479: EMPTY
63480: PPUSH
63481: CALL_OW 1
63485: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
63486: LD_ADDR_EXP 45
63490: PUSH
63491: LD_EXP 45
63495: PPUSH
63496: LD_VAR 0 4
63500: PPUSH
63501: EMPTY
63502: PPUSH
63503: CALL_OW 1
63507: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
63508: LD_ADDR_EXP 46
63512: PUSH
63513: LD_EXP 46
63517: PPUSH
63518: LD_VAR 0 4
63522: PPUSH
63523: EMPTY
63524: PPUSH
63525: CALL_OW 1
63529: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
63530: LD_ADDR_EXP 47
63534: PUSH
63535: LD_EXP 47
63539: PPUSH
63540: LD_VAR 0 4
63544: PPUSH
63545: LD_INT 0
63547: PPUSH
63548: CALL_OW 1
63552: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
63553: LD_ADDR_EXP 48
63557: PUSH
63558: LD_EXP 48
63562: PPUSH
63563: LD_VAR 0 4
63567: PPUSH
63568: EMPTY
63569: PPUSH
63570: CALL_OW 1
63574: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
63575: LD_ADDR_EXP 49
63579: PUSH
63580: LD_EXP 49
63584: PPUSH
63585: LD_VAR 0 4
63589: PPUSH
63590: EMPTY
63591: PPUSH
63592: CALL_OW 1
63596: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
63597: LD_ADDR_EXP 50
63601: PUSH
63602: LD_EXP 50
63606: PPUSH
63607: LD_VAR 0 4
63611: PPUSH
63612: EMPTY
63613: PPUSH
63614: CALL_OW 1
63618: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
63619: LD_ADDR_EXP 51
63623: PUSH
63624: LD_EXP 51
63628: PPUSH
63629: LD_VAR 0 4
63633: PPUSH
63634: EMPTY
63635: PPUSH
63636: CALL_OW 1
63640: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
63641: LD_ADDR_EXP 52
63645: PUSH
63646: LD_EXP 52
63650: PPUSH
63651: LD_VAR 0 4
63655: PPUSH
63656: EMPTY
63657: PPUSH
63658: CALL_OW 1
63662: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
63663: LD_ADDR_EXP 53
63667: PUSH
63668: LD_EXP 53
63672: PPUSH
63673: LD_VAR 0 4
63677: PPUSH
63678: EMPTY
63679: PPUSH
63680: CALL_OW 1
63684: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
63685: LD_ADDR_EXP 54
63689: PUSH
63690: LD_EXP 54
63694: PPUSH
63695: LD_VAR 0 4
63699: PPUSH
63700: EMPTY
63701: PPUSH
63702: CALL_OW 1
63706: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
63707: LD_ADDR_EXP 55
63711: PUSH
63712: LD_EXP 55
63716: PPUSH
63717: LD_VAR 0 4
63721: PPUSH
63722: EMPTY
63723: PPUSH
63724: CALL_OW 1
63728: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
63729: LD_ADDR_EXP 56
63733: PUSH
63734: LD_EXP 56
63738: PPUSH
63739: LD_VAR 0 4
63743: PPUSH
63744: EMPTY
63745: PPUSH
63746: CALL_OW 1
63750: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
63751: LD_ADDR_EXP 57
63755: PUSH
63756: LD_EXP 57
63760: PPUSH
63761: LD_VAR 0 4
63765: PPUSH
63766: EMPTY
63767: PPUSH
63768: CALL_OW 1
63772: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
63773: LD_ADDR_EXP 58
63777: PUSH
63778: LD_EXP 58
63782: PPUSH
63783: LD_VAR 0 4
63787: PPUSH
63788: EMPTY
63789: PPUSH
63790: CALL_OW 1
63794: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
63795: LD_ADDR_EXP 59
63799: PUSH
63800: LD_EXP 59
63804: PPUSH
63805: LD_VAR 0 4
63809: PPUSH
63810: EMPTY
63811: PPUSH
63812: CALL_OW 1
63816: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
63817: LD_ADDR_EXP 60
63821: PUSH
63822: LD_EXP 60
63826: PPUSH
63827: LD_VAR 0 4
63831: PPUSH
63832: EMPTY
63833: PPUSH
63834: CALL_OW 1
63838: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
63839: LD_ADDR_EXP 61
63843: PUSH
63844: LD_EXP 61
63848: PPUSH
63849: LD_VAR 0 4
63853: PPUSH
63854: EMPTY
63855: PPUSH
63856: CALL_OW 1
63860: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
63861: LD_ADDR_EXP 63
63865: PUSH
63866: LD_EXP 63
63870: PPUSH
63871: LD_VAR 0 4
63875: PPUSH
63876: EMPTY
63877: PPUSH
63878: CALL_OW 1
63882: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
63883: LD_ADDR_EXP 65
63887: PUSH
63888: LD_EXP 65
63892: PPUSH
63893: LD_VAR 0 4
63897: PPUSH
63898: EMPTY
63899: PPUSH
63900: CALL_OW 1
63904: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
63905: LD_ADDR_EXP 66
63909: PUSH
63910: LD_EXP 66
63914: PPUSH
63915: LD_VAR 0 4
63919: PPUSH
63920: EMPTY
63921: PPUSH
63922: CALL_OW 1
63926: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
63927: LD_ADDR_EXP 67
63931: PUSH
63932: LD_EXP 67
63936: PPUSH
63937: LD_VAR 0 4
63941: PPUSH
63942: EMPTY
63943: PPUSH
63944: CALL_OW 1
63948: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
63949: LD_ADDR_EXP 68
63953: PUSH
63954: LD_EXP 68
63958: PPUSH
63959: LD_VAR 0 4
63963: PPUSH
63964: EMPTY
63965: PPUSH
63966: CALL_OW 1
63970: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
63971: LD_ADDR_EXP 69
63975: PUSH
63976: LD_EXP 69
63980: PPUSH
63981: LD_VAR 0 4
63985: PPUSH
63986: EMPTY
63987: PPUSH
63988: CALL_OW 1
63992: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
63993: LD_ADDR_EXP 70
63997: PUSH
63998: LD_EXP 70
64002: PPUSH
64003: LD_VAR 0 4
64007: PPUSH
64008: EMPTY
64009: PPUSH
64010: CALL_OW 1
64014: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
64015: LD_ADDR_EXP 71
64019: PUSH
64020: LD_EXP 71
64024: PPUSH
64025: LD_VAR 0 4
64029: PPUSH
64030: EMPTY
64031: PPUSH
64032: CALL_OW 1
64036: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
64037: LD_ADDR_EXP 72
64041: PUSH
64042: LD_EXP 72
64046: PPUSH
64047: LD_VAR 0 4
64051: PPUSH
64052: EMPTY
64053: PPUSH
64054: CALL_OW 1
64058: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
64059: LD_ADDR_EXP 73
64063: PUSH
64064: LD_EXP 73
64068: PPUSH
64069: LD_VAR 0 4
64073: PPUSH
64074: EMPTY
64075: PPUSH
64076: CALL_OW 1
64080: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
64081: LD_ADDR_EXP 74
64085: PUSH
64086: LD_EXP 74
64090: PPUSH
64091: LD_VAR 0 4
64095: PPUSH
64096: EMPTY
64097: PPUSH
64098: CALL_OW 1
64102: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
64103: LD_ADDR_EXP 75
64107: PUSH
64108: LD_EXP 75
64112: PPUSH
64113: LD_VAR 0 4
64117: PPUSH
64118: EMPTY
64119: PPUSH
64120: CALL_OW 1
64124: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
64125: LD_ADDR_EXP 76
64129: PUSH
64130: LD_EXP 76
64134: PPUSH
64135: LD_VAR 0 4
64139: PPUSH
64140: EMPTY
64141: PPUSH
64142: CALL_OW 1
64146: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
64147: LD_ADDR_EXP 77
64151: PUSH
64152: LD_EXP 77
64156: PPUSH
64157: LD_VAR 0 4
64161: PPUSH
64162: EMPTY
64163: PPUSH
64164: CALL_OW 1
64168: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
64169: LD_ADDR_EXP 78
64173: PUSH
64174: LD_EXP 78
64178: PPUSH
64179: LD_VAR 0 4
64183: PPUSH
64184: LD_INT 0
64186: PPUSH
64187: CALL_OW 1
64191: ST_TO_ADDR
// result := base ;
64192: LD_ADDR_VAR 0 3
64196: PUSH
64197: LD_VAR 0 4
64201: ST_TO_ADDR
// end ;
64202: LD_VAR 0 3
64206: RET
// export function MC_Start ( ) ; var i ; begin
64207: LD_INT 0
64209: PPUSH
64210: PPUSH
// for i = 1 to mc_bases do
64211: LD_ADDR_VAR 0 2
64215: PUSH
64216: DOUBLE
64217: LD_INT 1
64219: DEC
64220: ST_TO_ADDR
64221: LD_EXP 36
64225: PUSH
64226: FOR_TO
64227: IFFALSE 65304
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff 0 ) ;
64229: LD_ADDR_EXP 36
64233: PUSH
64234: LD_EXP 36
64238: PPUSH
64239: LD_VAR 0 2
64243: PPUSH
64244: LD_EXP 36
64248: PUSH
64249: LD_VAR 0 2
64253: ARRAY
64254: PUSH
64255: LD_INT 0
64257: DIFF
64258: PPUSH
64259: CALL_OW 1
64263: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
64264: LD_ADDR_EXP 37
64268: PUSH
64269: LD_EXP 37
64273: PPUSH
64274: LD_VAR 0 2
64278: PPUSH
64279: EMPTY
64280: PPUSH
64281: CALL_OW 1
64285: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
64286: LD_ADDR_EXP 38
64290: PUSH
64291: LD_EXP 38
64295: PPUSH
64296: LD_VAR 0 2
64300: PPUSH
64301: EMPTY
64302: PPUSH
64303: CALL_OW 1
64307: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
64308: LD_ADDR_EXP 39
64312: PUSH
64313: LD_EXP 39
64317: PPUSH
64318: LD_VAR 0 2
64322: PPUSH
64323: EMPTY
64324: PPUSH
64325: CALL_OW 1
64329: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
64330: LD_ADDR_EXP 40
64334: PUSH
64335: LD_EXP 40
64339: PPUSH
64340: LD_VAR 0 2
64344: PPUSH
64345: EMPTY
64346: PUSH
64347: EMPTY
64348: PUSH
64349: EMPTY
64350: LIST
64351: LIST
64352: PPUSH
64353: CALL_OW 1
64357: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
64358: LD_ADDR_EXP 41
64362: PUSH
64363: LD_EXP 41
64367: PPUSH
64368: LD_VAR 0 2
64372: PPUSH
64373: EMPTY
64374: PPUSH
64375: CALL_OW 1
64379: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
64380: LD_ADDR_EXP 68
64384: PUSH
64385: LD_EXP 68
64389: PPUSH
64390: LD_VAR 0 2
64394: PPUSH
64395: EMPTY
64396: PPUSH
64397: CALL_OW 1
64401: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
64402: LD_ADDR_EXP 42
64406: PUSH
64407: LD_EXP 42
64411: PPUSH
64412: LD_VAR 0 2
64416: PPUSH
64417: EMPTY
64418: PPUSH
64419: CALL_OW 1
64423: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
64424: LD_ADDR_EXP 43
64428: PUSH
64429: LD_EXP 43
64433: PPUSH
64434: LD_VAR 0 2
64438: PPUSH
64439: EMPTY
64440: PPUSH
64441: CALL_OW 1
64445: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ) ;
64446: LD_ADDR_EXP 44
64450: PUSH
64451: LD_EXP 44
64455: PPUSH
64456: LD_VAR 0 2
64460: PPUSH
64461: LD_EXP 36
64465: PUSH
64466: LD_VAR 0 2
64470: ARRAY
64471: PPUSH
64472: LD_INT 2
64474: PUSH
64475: LD_INT 30
64477: PUSH
64478: LD_INT 32
64480: PUSH
64481: EMPTY
64482: LIST
64483: LIST
64484: PUSH
64485: LD_INT 30
64487: PUSH
64488: LD_INT 33
64490: PUSH
64491: EMPTY
64492: LIST
64493: LIST
64494: PUSH
64495: EMPTY
64496: LIST
64497: LIST
64498: LIST
64499: PPUSH
64500: CALL_OW 72
64504: PPUSH
64505: CALL_OW 1
64509: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
64510: LD_ADDR_EXP 45
64514: PUSH
64515: LD_EXP 45
64519: PPUSH
64520: LD_VAR 0 2
64524: PPUSH
64525: LD_EXP 36
64529: PUSH
64530: LD_VAR 0 2
64534: ARRAY
64535: PPUSH
64536: LD_INT 2
64538: PUSH
64539: LD_INT 30
64541: PUSH
64542: LD_INT 32
64544: PUSH
64545: EMPTY
64546: LIST
64547: LIST
64548: PUSH
64549: LD_INT 30
64551: PUSH
64552: LD_INT 31
64554: PUSH
64555: EMPTY
64556: LIST
64557: LIST
64558: PUSH
64559: EMPTY
64560: LIST
64561: LIST
64562: LIST
64563: PUSH
64564: LD_INT 58
64566: PUSH
64567: EMPTY
64568: LIST
64569: PUSH
64570: EMPTY
64571: LIST
64572: LIST
64573: PPUSH
64574: CALL_OW 72
64578: PPUSH
64579: CALL_OW 1
64583: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
64584: LD_ADDR_EXP 46
64588: PUSH
64589: LD_EXP 46
64593: PPUSH
64594: LD_VAR 0 2
64598: PPUSH
64599: EMPTY
64600: PPUSH
64601: CALL_OW 1
64605: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
64606: LD_ADDR_EXP 50
64610: PUSH
64611: LD_EXP 50
64615: PPUSH
64616: LD_VAR 0 2
64620: PPUSH
64621: EMPTY
64622: PPUSH
64623: CALL_OW 1
64627: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
64628: LD_ADDR_EXP 49
64632: PUSH
64633: LD_EXP 49
64637: PPUSH
64638: LD_VAR 0 2
64642: PPUSH
64643: EMPTY
64644: PPUSH
64645: CALL_OW 1
64649: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
64650: LD_ADDR_EXP 51
64654: PUSH
64655: LD_EXP 51
64659: PPUSH
64660: LD_VAR 0 2
64664: PPUSH
64665: EMPTY
64666: PPUSH
64667: CALL_OW 1
64671: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
64672: LD_ADDR_EXP 52
64676: PUSH
64677: LD_EXP 52
64681: PPUSH
64682: LD_VAR 0 2
64686: PPUSH
64687: EMPTY
64688: PPUSH
64689: CALL_OW 1
64693: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
64694: LD_ADDR_EXP 53
64698: PUSH
64699: LD_EXP 53
64703: PPUSH
64704: LD_VAR 0 2
64708: PPUSH
64709: EMPTY
64710: PPUSH
64711: CALL_OW 1
64715: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
64716: LD_ADDR_EXP 54
64720: PUSH
64721: LD_EXP 54
64725: PPUSH
64726: LD_VAR 0 2
64730: PPUSH
64731: EMPTY
64732: PPUSH
64733: CALL_OW 1
64737: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
64738: LD_ADDR_EXP 55
64742: PUSH
64743: LD_EXP 55
64747: PPUSH
64748: LD_VAR 0 2
64752: PPUSH
64753: EMPTY
64754: PPUSH
64755: CALL_OW 1
64759: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
64760: LD_ADDR_EXP 56
64764: PUSH
64765: LD_EXP 56
64769: PPUSH
64770: LD_VAR 0 2
64774: PPUSH
64775: EMPTY
64776: PPUSH
64777: CALL_OW 1
64781: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
64782: LD_ADDR_EXP 57
64786: PUSH
64787: LD_EXP 57
64791: PPUSH
64792: LD_VAR 0 2
64796: PPUSH
64797: EMPTY
64798: PPUSH
64799: CALL_OW 1
64803: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
64804: LD_ADDR_EXP 58
64808: PUSH
64809: LD_EXP 58
64813: PPUSH
64814: LD_VAR 0 2
64818: PPUSH
64819: EMPTY
64820: PPUSH
64821: CALL_OW 1
64825: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
64826: LD_ADDR_EXP 47
64830: PUSH
64831: LD_EXP 47
64835: PPUSH
64836: LD_VAR 0 2
64840: PPUSH
64841: LD_INT 0
64843: PPUSH
64844: CALL_OW 1
64848: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
64849: LD_ADDR_EXP 60
64853: PUSH
64854: LD_EXP 60
64858: PPUSH
64859: LD_VAR 0 2
64863: PPUSH
64864: LD_INT 0
64866: PPUSH
64867: CALL_OW 1
64871: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
64872: LD_ADDR_EXP 48
64876: PUSH
64877: LD_EXP 48
64881: PPUSH
64882: LD_VAR 0 2
64886: PPUSH
64887: EMPTY
64888: PPUSH
64889: CALL_OW 1
64893: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
64894: LD_ADDR_EXP 59
64898: PUSH
64899: LD_EXP 59
64903: PPUSH
64904: LD_VAR 0 2
64908: PPUSH
64909: LD_INT 0
64911: PPUSH
64912: CALL_OW 1
64916: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
64917: LD_ADDR_EXP 61
64921: PUSH
64922: LD_EXP 61
64926: PPUSH
64927: LD_VAR 0 2
64931: PPUSH
64932: EMPTY
64933: PPUSH
64934: CALL_OW 1
64938: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
64939: LD_ADDR_EXP 64
64943: PUSH
64944: LD_EXP 64
64948: PPUSH
64949: LD_VAR 0 2
64953: PPUSH
64954: LD_INT 0
64956: PPUSH
64957: CALL_OW 1
64961: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
64962: LD_ADDR_EXP 65
64966: PUSH
64967: LD_EXP 65
64971: PPUSH
64972: LD_VAR 0 2
64976: PPUSH
64977: EMPTY
64978: PPUSH
64979: CALL_OW 1
64983: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
64984: LD_ADDR_EXP 66
64988: PUSH
64989: LD_EXP 66
64993: PPUSH
64994: LD_VAR 0 2
64998: PPUSH
64999: EMPTY
65000: PPUSH
65001: CALL_OW 1
65005: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
65006: LD_ADDR_EXP 67
65010: PUSH
65011: LD_EXP 67
65015: PPUSH
65016: LD_VAR 0 2
65020: PPUSH
65021: EMPTY
65022: PPUSH
65023: CALL_OW 1
65027: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
65028: LD_ADDR_EXP 69
65032: PUSH
65033: LD_EXP 69
65037: PPUSH
65038: LD_VAR 0 2
65042: PPUSH
65043: LD_EXP 36
65047: PUSH
65048: LD_VAR 0 2
65052: ARRAY
65053: PPUSH
65054: LD_INT 2
65056: PUSH
65057: LD_INT 30
65059: PUSH
65060: LD_INT 6
65062: PUSH
65063: EMPTY
65064: LIST
65065: LIST
65066: PUSH
65067: LD_INT 30
65069: PUSH
65070: LD_INT 7
65072: PUSH
65073: EMPTY
65074: LIST
65075: LIST
65076: PUSH
65077: LD_INT 30
65079: PUSH
65080: LD_INT 8
65082: PUSH
65083: EMPTY
65084: LIST
65085: LIST
65086: PUSH
65087: EMPTY
65088: LIST
65089: LIST
65090: LIST
65091: LIST
65092: PPUSH
65093: CALL_OW 72
65097: PPUSH
65098: CALL_OW 1
65102: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
65103: LD_ADDR_EXP 70
65107: PUSH
65108: LD_EXP 70
65112: PPUSH
65113: LD_VAR 0 2
65117: PPUSH
65118: EMPTY
65119: PPUSH
65120: CALL_OW 1
65124: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
65125: LD_ADDR_EXP 71
65129: PUSH
65130: LD_EXP 71
65134: PPUSH
65135: LD_VAR 0 2
65139: PPUSH
65140: EMPTY
65141: PPUSH
65142: CALL_OW 1
65146: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , i , [ ] ) ;
65147: LD_ADDR_EXP 72
65151: PUSH
65152: LD_EXP 72
65156: PPUSH
65157: LD_VAR 0 2
65161: PPUSH
65162: EMPTY
65163: PPUSH
65164: CALL_OW 1
65168: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
65169: LD_ADDR_EXP 73
65173: PUSH
65174: LD_EXP 73
65178: PPUSH
65179: LD_VAR 0 2
65183: PPUSH
65184: EMPTY
65185: PPUSH
65186: CALL_OW 1
65190: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
65191: LD_ADDR_EXP 74
65195: PUSH
65196: LD_EXP 74
65200: PPUSH
65201: LD_VAR 0 2
65205: PPUSH
65206: EMPTY
65207: PPUSH
65208: CALL_OW 1
65212: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
65213: LD_ADDR_EXP 75
65217: PUSH
65218: LD_EXP 75
65222: PPUSH
65223: LD_VAR 0 2
65227: PPUSH
65228: EMPTY
65229: PPUSH
65230: CALL_OW 1
65234: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
65235: LD_ADDR_EXP 76
65239: PUSH
65240: LD_EXP 76
65244: PPUSH
65245: LD_VAR 0 2
65249: PPUSH
65250: EMPTY
65251: PPUSH
65252: CALL_OW 1
65256: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , [ ] ) ;
65257: LD_ADDR_EXP 77
65261: PUSH
65262: LD_EXP 77
65266: PPUSH
65267: LD_VAR 0 2
65271: PPUSH
65272: EMPTY
65273: PPUSH
65274: CALL_OW 1
65278: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , i , 0 ) ;
65279: LD_ADDR_EXP 78
65283: PUSH
65284: LD_EXP 78
65288: PPUSH
65289: LD_VAR 0 2
65293: PPUSH
65294: LD_INT 0
65296: PPUSH
65297: CALL_OW 1
65301: ST_TO_ADDR
// end ;
65302: GO 64226
65304: POP
65305: POP
// MC_InitSides ( ) ;
65306: CALL 65592 0 0
// MC_InitResearch ( ) ;
65310: CALL 65331 0 0
// CustomInitMacro ( ) ;
65314: CALL 1407 0 0
// skirmish := true ;
65318: LD_ADDR_EXP 34
65322: PUSH
65323: LD_INT 1
65325: ST_TO_ADDR
// end ;
65326: LD_VAR 0 1
65330: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
65331: LD_INT 0
65333: PPUSH
65334: PPUSH
65335: PPUSH
65336: PPUSH
65337: PPUSH
65338: PPUSH
// if not mc_bases then
65339: LD_EXP 36
65343: NOT
65344: IFFALSE 65348
// exit ;
65346: GO 65587
// for i = 1 to 8 do
65348: LD_ADDR_VAR 0 2
65352: PUSH
65353: DOUBLE
65354: LD_INT 1
65356: DEC
65357: ST_TO_ADDR
65358: LD_INT 8
65360: PUSH
65361: FOR_TO
65362: IFFALSE 65388
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
65364: LD_ADDR_EXP 63
65368: PUSH
65369: LD_EXP 63
65373: PPUSH
65374: LD_VAR 0 2
65378: PPUSH
65379: EMPTY
65380: PPUSH
65381: CALL_OW 1
65385: ST_TO_ADDR
65386: GO 65361
65388: POP
65389: POP
// tmp := [ ] ;
65390: LD_ADDR_VAR 0 5
65394: PUSH
65395: EMPTY
65396: ST_TO_ADDR
// for i = 1 to mc_sides do
65397: LD_ADDR_VAR 0 2
65401: PUSH
65402: DOUBLE
65403: LD_INT 1
65405: DEC
65406: ST_TO_ADDR
65407: LD_EXP 62
65411: PUSH
65412: FOR_TO
65413: IFFALSE 65471
// if not mc_sides [ i ] in tmp then
65415: LD_EXP 62
65419: PUSH
65420: LD_VAR 0 2
65424: ARRAY
65425: PUSH
65426: LD_VAR 0 5
65430: IN
65431: NOT
65432: IFFALSE 65469
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
65434: LD_ADDR_VAR 0 5
65438: PUSH
65439: LD_VAR 0 5
65443: PPUSH
65444: LD_VAR 0 5
65448: PUSH
65449: LD_INT 1
65451: PLUS
65452: PPUSH
65453: LD_EXP 62
65457: PUSH
65458: LD_VAR 0 2
65462: ARRAY
65463: PPUSH
65464: CALL_OW 2
65468: ST_TO_ADDR
65469: GO 65412
65471: POP
65472: POP
// if not tmp then
65473: LD_VAR 0 5
65477: NOT
65478: IFFALSE 65482
// exit ;
65480: GO 65587
// for j in tmp do
65482: LD_ADDR_VAR 0 3
65486: PUSH
65487: LD_VAR 0 5
65491: PUSH
65492: FOR_IN
65493: IFFALSE 65585
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
65495: LD_ADDR_VAR 0 6
65499: PUSH
65500: LD_INT 22
65502: PUSH
65503: LD_VAR 0 3
65507: PUSH
65508: EMPTY
65509: LIST
65510: LIST
65511: PPUSH
65512: CALL_OW 69
65516: ST_TO_ADDR
// if not un then
65517: LD_VAR 0 6
65521: NOT
65522: IFFALSE 65526
// continue ;
65524: GO 65492
// nation := GetNation ( un [ 1 ] ) ;
65526: LD_ADDR_VAR 0 4
65530: PUSH
65531: LD_VAR 0 6
65535: PUSH
65536: LD_INT 1
65538: ARRAY
65539: PPUSH
65540: CALL_OW 248
65544: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
65545: LD_ADDR_EXP 63
65549: PUSH
65550: LD_EXP 63
65554: PPUSH
65555: LD_VAR 0 3
65559: PPUSH
65560: LD_VAR 0 3
65564: PPUSH
65565: LD_VAR 0 4
65569: PPUSH
65570: LD_INT 1
65572: PPUSH
65573: CALL 19401 0 3
65577: PPUSH
65578: CALL_OW 1
65582: ST_TO_ADDR
// end ;
65583: GO 65492
65585: POP
65586: POP
// end ;
65587: LD_VAR 0 1
65591: RET
// export function MC_InitSides ( ) ; var i ; begin
65592: LD_INT 0
65594: PPUSH
65595: PPUSH
// if not mc_bases then
65596: LD_EXP 36
65600: NOT
65601: IFFALSE 65605
// exit ;
65603: GO 65679
// for i = 1 to mc_bases do
65605: LD_ADDR_VAR 0 2
65609: PUSH
65610: DOUBLE
65611: LD_INT 1
65613: DEC
65614: ST_TO_ADDR
65615: LD_EXP 36
65619: PUSH
65620: FOR_TO
65621: IFFALSE 65677
// if mc_bases [ i ] then
65623: LD_EXP 36
65627: PUSH
65628: LD_VAR 0 2
65632: ARRAY
65633: IFFALSE 65675
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
65635: LD_ADDR_EXP 62
65639: PUSH
65640: LD_EXP 62
65644: PPUSH
65645: LD_VAR 0 2
65649: PPUSH
65650: LD_EXP 36
65654: PUSH
65655: LD_VAR 0 2
65659: ARRAY
65660: PUSH
65661: LD_INT 1
65663: ARRAY
65664: PPUSH
65665: CALL_OW 255
65669: PPUSH
65670: CALL_OW 1
65674: ST_TO_ADDR
65675: GO 65620
65677: POP
65678: POP
// end ;
65679: LD_VAR 0 1
65683: RET
// every 0 0$01 trigger skirmish do
65684: LD_EXP 34
65688: IFFALSE 65842
65690: GO 65692
65692: DISABLE
// begin enable ;
65693: ENABLE
// MC_CheckBuildings ( ) ;
65694: CALL 70340 0 0
// MC_CheckPeopleLife ( ) ;
65698: CALL 70465 0 0
// RaiseSailEvent ( 100 ) ;
65702: LD_INT 100
65704: PPUSH
65705: CALL_OW 427
// RaiseSailEvent ( 103 ) ;
65709: LD_INT 103
65711: PPUSH
65712: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
65716: LD_INT 104
65718: PPUSH
65719: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
65723: LD_INT 105
65725: PPUSH
65726: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
65730: LD_INT 106
65732: PPUSH
65733: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
65737: LD_INT 107
65739: PPUSH
65740: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
65744: LD_INT 108
65746: PPUSH
65747: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
65751: LD_INT 109
65753: PPUSH
65754: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
65758: LD_INT 110
65760: PPUSH
65761: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
65765: LD_INT 111
65767: PPUSH
65768: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
65772: LD_INT 112
65774: PPUSH
65775: CALL_OW 427
// RaiseSailEvent ( 113 ) ;
65779: LD_INT 113
65781: PPUSH
65782: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
65786: LD_INT 120
65788: PPUSH
65789: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
65793: LD_INT 121
65795: PPUSH
65796: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
65800: LD_INT 122
65802: PPUSH
65803: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
65807: LD_INT 123
65809: PPUSH
65810: CALL_OW 427
// RaiseSailEvent ( 124 ) ;
65814: LD_INT 124
65816: PPUSH
65817: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
65821: LD_INT 125
65823: PPUSH
65824: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
65828: LD_INT 126
65830: PPUSH
65831: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
65835: LD_INT 200
65837: PPUSH
65838: CALL_OW 427
// end ;
65842: END
// on SailEvent ( event ) do begin if event < 100 then
65843: LD_VAR 0 1
65847: PUSH
65848: LD_INT 100
65850: LESS
65851: IFFALSE 65862
// CustomEvent ( event ) ;
65853: LD_VAR 0 1
65857: PPUSH
65858: CALL 18588 0 1
// if event = 100 then
65862: LD_VAR 0 1
65866: PUSH
65867: LD_INT 100
65869: EQUAL
65870: IFFALSE 65876
// MC_ClassManager ( ) ;
65872: CALL 66268 0 0
// if event = 101 then
65876: LD_VAR 0 1
65880: PUSH
65881: LD_INT 101
65883: EQUAL
65884: IFFALSE 65890
// MC_RepairBuildings ( ) ;
65886: CALL 71061 0 0
// if event = 102 then
65890: LD_VAR 0 1
65894: PUSH
65895: LD_INT 102
65897: EQUAL
65898: IFFALSE 65904
// MC_Heal ( ) ;
65900: CALL 71793 0 0
// if event = 103 then
65904: LD_VAR 0 1
65908: PUSH
65909: LD_INT 103
65911: EQUAL
65912: IFFALSE 65918
// MC_Build ( ) ;
65914: CALL 72215 0 0
// if event = 104 then
65918: LD_VAR 0 1
65922: PUSH
65923: LD_INT 104
65925: EQUAL
65926: IFFALSE 65932
// MC_TurretWeapon ( ) ;
65928: CALL 73828 0 0
// if event = 105 then
65932: LD_VAR 0 1
65936: PUSH
65937: LD_INT 105
65939: EQUAL
65940: IFFALSE 65946
// MC_BuildUpgrade ( ) ;
65942: CALL 73379 0 0
// if event = 106 then
65946: LD_VAR 0 1
65950: PUSH
65951: LD_INT 106
65953: EQUAL
65954: IFFALSE 65960
// MC_PlantMines ( ) ;
65956: CALL 74258 0 0
// if event = 107 then
65960: LD_VAR 0 1
65964: PUSH
65965: LD_INT 107
65967: EQUAL
65968: IFFALSE 65974
// MC_CollectCrates ( ) ;
65970: CALL 75292 0 0
// if event = 108 then
65974: LD_VAR 0 1
65978: PUSH
65979: LD_INT 108
65981: EQUAL
65982: IFFALSE 65988
// MC_LinkRemoteControl ( ) ;
65984: CALL 77068 0 0
// if event = 109 then
65988: LD_VAR 0 1
65992: PUSH
65993: LD_INT 109
65995: EQUAL
65996: IFFALSE 66002
// MC_ProduceVehicle ( ) ;
65998: CALL 77249 0 0
// if event = 110 then
66002: LD_VAR 0 1
66006: PUSH
66007: LD_INT 110
66009: EQUAL
66010: IFFALSE 66016
// MC_SendAttack ( ) ;
66012: CALL 77715 0 0
// if event = 111 then
66016: LD_VAR 0 1
66020: PUSH
66021: LD_INT 111
66023: EQUAL
66024: IFFALSE 66030
// MC_Defend ( ) ;
66026: CALL 77823 0 0
// if event = 112 then
66030: LD_VAR 0 1
66034: PUSH
66035: LD_INT 112
66037: EQUAL
66038: IFFALSE 66044
// MC_Research ( ) ;
66040: CALL 78428 0 0
// if event = 113 then
66044: LD_VAR 0 1
66048: PUSH
66049: LD_INT 113
66051: EQUAL
66052: IFFALSE 66058
// MC_MinesTrigger ( ) ;
66054: CALL 79542 0 0
// if event = 120 then
66058: LD_VAR 0 1
66062: PUSH
66063: LD_INT 120
66065: EQUAL
66066: IFFALSE 66072
// MC_RepairVehicle ( ) ;
66068: CALL 79641 0 0
// if event = 121 then
66072: LD_VAR 0 1
66076: PUSH
66077: LD_INT 121
66079: EQUAL
66080: IFFALSE 66086
// MC_TameApe ( ) ;
66082: CALL 80371 0 0
// if event = 122 then
66086: LD_VAR 0 1
66090: PUSH
66091: LD_INT 122
66093: EQUAL
66094: IFFALSE 66100
// MC_ChangeApeClass ( ) ;
66096: CALL 81200 0 0
// if event = 123 then
66100: LD_VAR 0 1
66104: PUSH
66105: LD_INT 123
66107: EQUAL
66108: IFFALSE 66114
// MC_Bazooka ( ) ;
66110: CALL 81850 0 0
// if event = 124 then
66114: LD_VAR 0 1
66118: PUSH
66119: LD_INT 124
66121: EQUAL
66122: IFFALSE 66128
// MC_TeleportExit ( ) ;
66124: CALL 82048 0 0
// if event = 125 then
66128: LD_VAR 0 1
66132: PUSH
66133: LD_INT 125
66135: EQUAL
66136: IFFALSE 66142
// MC_Deposits ( ) ;
66138: CALL 82695 0 0
// if event = 126 then
66142: LD_VAR 0 1
66146: PUSH
66147: LD_INT 126
66149: EQUAL
66150: IFFALSE 66156
// MC_RemoteDriver ( ) ;
66152: CALL 83320 0 0
// if event = 200 then
66156: LD_VAR 0 1
66160: PUSH
66161: LD_INT 200
66163: EQUAL
66164: IFFALSE 66170
// MC_Idle ( ) ;
66166: CALL 85053 0 0
// end ;
66170: PPOPN 1
66172: END
// export function MC_Reset ( base , tag ) ; var i ; begin
66173: LD_INT 0
66175: PPUSH
66176: PPUSH
// if not mc_bases [ base ] or not tag then
66177: LD_EXP 36
66181: PUSH
66182: LD_VAR 0 1
66186: ARRAY
66187: NOT
66188: PUSH
66189: LD_VAR 0 2
66193: NOT
66194: OR
66195: IFFALSE 66199
// exit ;
66197: GO 66263
// for i in mc_bases [ base ] union mc_ape [ base ] do
66199: LD_ADDR_VAR 0 4
66203: PUSH
66204: LD_EXP 36
66208: PUSH
66209: LD_VAR 0 1
66213: ARRAY
66214: PUSH
66215: LD_EXP 65
66219: PUSH
66220: LD_VAR 0 1
66224: ARRAY
66225: UNION
66226: PUSH
66227: FOR_IN
66228: IFFALSE 66261
// if GetTag ( i ) = tag then
66230: LD_VAR 0 4
66234: PPUSH
66235: CALL_OW 110
66239: PUSH
66240: LD_VAR 0 2
66244: EQUAL
66245: IFFALSE 66259
// SetTag ( i , 0 ) ;
66247: LD_VAR 0 4
66251: PPUSH
66252: LD_INT 0
66254: PPUSH
66255: CALL_OW 109
66259: GO 66227
66261: POP
66262: POP
// end ;
66263: LD_VAR 0 3
66267: RET
// export function MC_ClassManager ( ) ; var i , j , tmp , p , b , e , k ; begin
66268: LD_INT 0
66270: PPUSH
66271: PPUSH
66272: PPUSH
66273: PPUSH
66274: PPUSH
66275: PPUSH
66276: PPUSH
66277: PPUSH
// if not mc_bases then
66278: LD_EXP 36
66282: NOT
66283: IFFALSE 66287
// exit ;
66285: GO 66745
// for i = 1 to mc_bases do
66287: LD_ADDR_VAR 0 2
66291: PUSH
66292: DOUBLE
66293: LD_INT 1
66295: DEC
66296: ST_TO_ADDR
66297: LD_EXP 36
66301: PUSH
66302: FOR_TO
66303: IFFALSE 66743
// begin tmp := MC_ClassCheckReq ( i ) ;
66305: LD_ADDR_VAR 0 4
66309: PUSH
66310: LD_VAR 0 2
66314: PPUSH
66315: CALL 66750 0 1
66319: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , tmp ) ;
66320: LD_ADDR_EXP 77
66324: PUSH
66325: LD_EXP 77
66329: PPUSH
66330: LD_VAR 0 2
66334: PPUSH
66335: LD_VAR 0 4
66339: PPUSH
66340: CALL_OW 1
66344: ST_TO_ADDR
// if not tmp then
66345: LD_VAR 0 4
66349: NOT
66350: IFFALSE 66354
// continue ;
66352: GO 66302
// b := [ UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ] ;
66354: LD_ADDR_VAR 0 6
66358: PUSH
66359: LD_EXP 36
66363: PUSH
66364: LD_VAR 0 2
66368: ARRAY
66369: PPUSH
66370: LD_INT 2
66372: PUSH
66373: LD_INT 30
66375: PUSH
66376: LD_INT 4
66378: PUSH
66379: EMPTY
66380: LIST
66381: LIST
66382: PUSH
66383: LD_INT 30
66385: PUSH
66386: LD_INT 5
66388: PUSH
66389: EMPTY
66390: LIST
66391: LIST
66392: PUSH
66393: EMPTY
66394: LIST
66395: LIST
66396: LIST
66397: PPUSH
66398: CALL_OW 72
66402: PUSH
66403: LD_EXP 36
66407: PUSH
66408: LD_VAR 0 2
66412: ARRAY
66413: PPUSH
66414: LD_INT 2
66416: PUSH
66417: LD_INT 30
66419: PUSH
66420: LD_INT 0
66422: PUSH
66423: EMPTY
66424: LIST
66425: LIST
66426: PUSH
66427: LD_INT 30
66429: PUSH
66430: LD_INT 1
66432: PUSH
66433: EMPTY
66434: LIST
66435: LIST
66436: PUSH
66437: EMPTY
66438: LIST
66439: LIST
66440: LIST
66441: PPUSH
66442: CALL_OW 72
66446: PUSH
66447: LD_EXP 36
66451: PUSH
66452: LD_VAR 0 2
66456: ARRAY
66457: PPUSH
66458: LD_INT 30
66460: PUSH
66461: LD_INT 3
66463: PUSH
66464: EMPTY
66465: LIST
66466: LIST
66467: PPUSH
66468: CALL_OW 72
66472: PUSH
66473: LD_EXP 36
66477: PUSH
66478: LD_VAR 0 2
66482: ARRAY
66483: PPUSH
66484: LD_INT 2
66486: PUSH
66487: LD_INT 30
66489: PUSH
66490: LD_INT 6
66492: PUSH
66493: EMPTY
66494: LIST
66495: LIST
66496: PUSH
66497: LD_INT 30
66499: PUSH
66500: LD_INT 7
66502: PUSH
66503: EMPTY
66504: LIST
66505: LIST
66506: PUSH
66507: LD_INT 30
66509: PUSH
66510: LD_INT 8
66512: PUSH
66513: EMPTY
66514: LIST
66515: LIST
66516: PUSH
66517: EMPTY
66518: LIST
66519: LIST
66520: LIST
66521: LIST
66522: PPUSH
66523: CALL_OW 72
66527: PUSH
66528: EMPTY
66529: LIST
66530: LIST
66531: LIST
66532: LIST
66533: ST_TO_ADDR
// for j = 1 to 4 do
66534: LD_ADDR_VAR 0 3
66538: PUSH
66539: DOUBLE
66540: LD_INT 1
66542: DEC
66543: ST_TO_ADDR
66544: LD_INT 4
66546: PUSH
66547: FOR_TO
66548: IFFALSE 66739
// begin if not tmp [ j ] then
66550: LD_VAR 0 4
66554: PUSH
66555: LD_VAR 0 3
66559: ARRAY
66560: NOT
66561: IFFALSE 66565
// continue ;
66563: GO 66547
// for p in tmp [ j ] do
66565: LD_ADDR_VAR 0 5
66569: PUSH
66570: LD_VAR 0 4
66574: PUSH
66575: LD_VAR 0 3
66579: ARRAY
66580: PUSH
66581: FOR_IN
66582: IFFALSE 66735
// begin if not b [ j ] then
66584: LD_VAR 0 6
66588: PUSH
66589: LD_VAR 0 3
66593: ARRAY
66594: NOT
66595: IFFALSE 66599
// break ;
66597: GO 66735
// e := 0 ;
66599: LD_ADDR_VAR 0 7
66603: PUSH
66604: LD_INT 0
66606: ST_TO_ADDR
// for k in b [ j ] do
66607: LD_ADDR_VAR 0 8
66611: PUSH
66612: LD_VAR 0 6
66616: PUSH
66617: LD_VAR 0 3
66621: ARRAY
66622: PUSH
66623: FOR_IN
66624: IFFALSE 66651
// if IsNotFull ( k ) then
66626: LD_VAR 0 8
66630: PPUSH
66631: CALL 23477 0 1
66635: IFFALSE 66649
// begin e := k ;
66637: LD_ADDR_VAR 0 7
66641: PUSH
66642: LD_VAR 0 8
66646: ST_TO_ADDR
// break ;
66647: GO 66651
// end ;
66649: GO 66623
66651: POP
66652: POP
// if e and not UnitGoingToBuilding ( p , e ) then
66653: LD_VAR 0 7
66657: PUSH
66658: LD_VAR 0 5
66662: PPUSH
66663: LD_VAR 0 7
66667: PPUSH
66668: CALL 60596 0 2
66672: NOT
66673: AND
66674: IFFALSE 66733
// begin if IsInUnit ( p ) then
66676: LD_VAR 0 5
66680: PPUSH
66681: CALL_OW 310
66685: IFFALSE 66696
// ComExitBuilding ( p ) ;
66687: LD_VAR 0 5
66691: PPUSH
66692: CALL_OW 122
// ComEnterUnit ( p , e ) ;
66696: LD_VAR 0 5
66700: PPUSH
66701: LD_VAR 0 7
66705: PPUSH
66706: CALL_OW 120
// AddComChangeProfession ( p , j ) ;
66710: LD_VAR 0 5
66714: PPUSH
66715: LD_VAR 0 3
66719: PPUSH
66720: CALL_OW 183
// AddComExitBuilding ( p ) ;
66724: LD_VAR 0 5
66728: PPUSH
66729: CALL_OW 182
// end ; end ;
66733: GO 66581
66735: POP
66736: POP
// end ;
66737: GO 66547
66739: POP
66740: POP
// end ;
66741: GO 66302
66743: POP
66744: POP
// end ;
66745: LD_VAR 0 1
66749: RET
// export function MC_ClassCheckReq ( base ) ; var i , tmp , sol , eng , mech , sci , sort , j , p , b , bcount ; begin
66750: LD_INT 0
66752: PPUSH
66753: PPUSH
66754: PPUSH
66755: PPUSH
66756: PPUSH
66757: PPUSH
66758: PPUSH
66759: PPUSH
66760: PPUSH
66761: PPUSH
66762: PPUSH
66763: PPUSH
// if not base or not mc_bases [ base ] or not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
66764: LD_VAR 0 1
66768: NOT
66769: PUSH
66770: LD_EXP 36
66774: PUSH
66775: LD_VAR 0 1
66779: ARRAY
66780: NOT
66781: OR
66782: PUSH
66783: LD_EXP 36
66787: PUSH
66788: LD_VAR 0 1
66792: ARRAY
66793: PPUSH
66794: LD_INT 2
66796: PUSH
66797: LD_INT 30
66799: PUSH
66800: LD_INT 0
66802: PUSH
66803: EMPTY
66804: LIST
66805: LIST
66806: PUSH
66807: LD_INT 30
66809: PUSH
66810: LD_INT 1
66812: PUSH
66813: EMPTY
66814: LIST
66815: LIST
66816: PUSH
66817: EMPTY
66818: LIST
66819: LIST
66820: LIST
66821: PPUSH
66822: CALL_OW 72
66826: NOT
66827: OR
66828: IFFALSE 66832
// exit ;
66830: GO 70335
// tmp := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
66832: LD_ADDR_VAR 0 4
66836: PUSH
66837: LD_EXP 36
66841: PUSH
66842: LD_VAR 0 1
66846: ARRAY
66847: PPUSH
66848: LD_INT 2
66850: PUSH
66851: LD_INT 25
66853: PUSH
66854: LD_INT 1
66856: PUSH
66857: EMPTY
66858: LIST
66859: LIST
66860: PUSH
66861: LD_INT 25
66863: PUSH
66864: LD_INT 2
66866: PUSH
66867: EMPTY
66868: LIST
66869: LIST
66870: PUSH
66871: LD_INT 25
66873: PUSH
66874: LD_INT 3
66876: PUSH
66877: EMPTY
66878: LIST
66879: LIST
66880: PUSH
66881: LD_INT 25
66883: PUSH
66884: LD_INT 4
66886: PUSH
66887: EMPTY
66888: LIST
66889: LIST
66890: PUSH
66891: LD_INT 25
66893: PUSH
66894: LD_INT 5
66896: PUSH
66897: EMPTY
66898: LIST
66899: LIST
66900: PUSH
66901: LD_INT 25
66903: PUSH
66904: LD_INT 8
66906: PUSH
66907: EMPTY
66908: LIST
66909: LIST
66910: PUSH
66911: LD_INT 25
66913: PUSH
66914: LD_INT 9
66916: PUSH
66917: EMPTY
66918: LIST
66919: LIST
66920: PUSH
66921: EMPTY
66922: LIST
66923: LIST
66924: LIST
66925: LIST
66926: LIST
66927: LIST
66928: LIST
66929: LIST
66930: PPUSH
66931: CALL_OW 72
66935: ST_TO_ADDR
// if not tmp then
66936: LD_VAR 0 4
66940: NOT
66941: IFFALSE 66945
// exit ;
66943: GO 70335
// for i in tmp do
66945: LD_ADDR_VAR 0 3
66949: PUSH
66950: LD_VAR 0 4
66954: PUSH
66955: FOR_IN
66956: IFFALSE 66987
// if GetTag ( i ) then
66958: LD_VAR 0 3
66962: PPUSH
66963: CALL_OW 110
66967: IFFALSE 66985
// tmp := tmp diff i ;
66969: LD_ADDR_VAR 0 4
66973: PUSH
66974: LD_VAR 0 4
66978: PUSH
66979: LD_VAR 0 3
66983: DIFF
66984: ST_TO_ADDR
66985: GO 66955
66987: POP
66988: POP
// if not tmp then
66989: LD_VAR 0 4
66993: NOT
66994: IFFALSE 66998
// exit ;
66996: GO 70335
// sol := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
66998: LD_ADDR_VAR 0 5
67002: PUSH
67003: LD_EXP 36
67007: PUSH
67008: LD_VAR 0 1
67012: ARRAY
67013: PPUSH
67014: LD_INT 2
67016: PUSH
67017: LD_INT 25
67019: PUSH
67020: LD_INT 1
67022: PUSH
67023: EMPTY
67024: LIST
67025: LIST
67026: PUSH
67027: LD_INT 25
67029: PUSH
67030: LD_INT 5
67032: PUSH
67033: EMPTY
67034: LIST
67035: LIST
67036: PUSH
67037: LD_INT 25
67039: PUSH
67040: LD_INT 8
67042: PUSH
67043: EMPTY
67044: LIST
67045: LIST
67046: PUSH
67047: LD_INT 25
67049: PUSH
67050: LD_INT 9
67052: PUSH
67053: EMPTY
67054: LIST
67055: LIST
67056: PUSH
67057: EMPTY
67058: LIST
67059: LIST
67060: LIST
67061: LIST
67062: LIST
67063: PPUSH
67064: CALL_OW 72
67068: ST_TO_ADDR
// eng := UnitFilter ( mc_bases [ base ] , [ f_class , 2 ] ) ;
67069: LD_ADDR_VAR 0 6
67073: PUSH
67074: LD_EXP 36
67078: PUSH
67079: LD_VAR 0 1
67083: ARRAY
67084: PPUSH
67085: LD_INT 25
67087: PUSH
67088: LD_INT 2
67090: PUSH
67091: EMPTY
67092: LIST
67093: LIST
67094: PPUSH
67095: CALL_OW 72
67099: ST_TO_ADDR
// mech := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
67100: LD_ADDR_VAR 0 7
67104: PUSH
67105: LD_EXP 36
67109: PUSH
67110: LD_VAR 0 1
67114: ARRAY
67115: PPUSH
67116: LD_INT 25
67118: PUSH
67119: LD_INT 3
67121: PUSH
67122: EMPTY
67123: LIST
67124: LIST
67125: PPUSH
67126: CALL_OW 72
67130: ST_TO_ADDR
// sci := UnitFilter ( mc_bases [ base ] , [ [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
67131: LD_ADDR_VAR 0 8
67135: PUSH
67136: LD_EXP 36
67140: PUSH
67141: LD_VAR 0 1
67145: ARRAY
67146: PPUSH
67147: LD_INT 25
67149: PUSH
67150: LD_INT 4
67152: PUSH
67153: EMPTY
67154: LIST
67155: LIST
67156: PUSH
67157: LD_INT 24
67159: PUSH
67160: LD_INT 251
67162: PUSH
67163: EMPTY
67164: LIST
67165: LIST
67166: PUSH
67167: EMPTY
67168: LIST
67169: LIST
67170: PPUSH
67171: CALL_OW 72
67175: ST_TO_ADDR
// if mc_scan [ base ] then
67176: LD_EXP 59
67180: PUSH
67181: LD_VAR 0 1
67185: ARRAY
67186: IFFALSE 67647
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 4 ) ;
67188: LD_ADDR_EXP 78
67192: PUSH
67193: LD_EXP 78
67197: PPUSH
67198: LD_VAR 0 1
67202: PPUSH
67203: LD_INT 4
67205: PPUSH
67206: CALL_OW 1
67210: ST_TO_ADDR
// b := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
67211: LD_ADDR_VAR 0 12
67215: PUSH
67216: LD_EXP 36
67220: PUSH
67221: LD_VAR 0 1
67225: ARRAY
67226: PPUSH
67227: LD_INT 2
67229: PUSH
67230: LD_INT 30
67232: PUSH
67233: LD_INT 4
67235: PUSH
67236: EMPTY
67237: LIST
67238: LIST
67239: PUSH
67240: LD_INT 30
67242: PUSH
67243: LD_INT 5
67245: PUSH
67246: EMPTY
67247: LIST
67248: LIST
67249: PUSH
67250: EMPTY
67251: LIST
67252: LIST
67253: LIST
67254: PPUSH
67255: CALL_OW 72
67259: ST_TO_ADDR
// if not b then
67260: LD_VAR 0 12
67264: NOT
67265: IFFALSE 67269
// exit ;
67267: GO 70335
// p := [ ] ;
67269: LD_ADDR_VAR 0 11
67273: PUSH
67274: EMPTY
67275: ST_TO_ADDR
// if sci >= 2 then
67276: LD_VAR 0 8
67280: PUSH
67281: LD_INT 2
67283: GREATEREQUAL
67284: IFFALSE 67315
// sci := [ sci [ 1 ] , sci [ 2 ] ] else
67286: LD_ADDR_VAR 0 8
67290: PUSH
67291: LD_VAR 0 8
67295: PUSH
67296: LD_INT 1
67298: ARRAY
67299: PUSH
67300: LD_VAR 0 8
67304: PUSH
67305: LD_INT 2
67307: ARRAY
67308: PUSH
67309: EMPTY
67310: LIST
67311: LIST
67312: ST_TO_ADDR
67313: GO 67376
// if sci = 1 then
67315: LD_VAR 0 8
67319: PUSH
67320: LD_INT 1
67322: EQUAL
67323: IFFALSE 67344
// sci := [ sci [ 1 ] ] else
67325: LD_ADDR_VAR 0 8
67329: PUSH
67330: LD_VAR 0 8
67334: PUSH
67335: LD_INT 1
67337: ARRAY
67338: PUSH
67339: EMPTY
67340: LIST
67341: ST_TO_ADDR
67342: GO 67376
// if sci = 0 then
67344: LD_VAR 0 8
67348: PUSH
67349: LD_INT 0
67351: EQUAL
67352: IFFALSE 67376
// p := SortBySkill ( tmp , 4 ) [ 1 ] ;
67354: LD_ADDR_VAR 0 11
67358: PUSH
67359: LD_VAR 0 4
67363: PPUSH
67364: LD_INT 4
67366: PPUSH
67367: CALL 60459 0 2
67371: PUSH
67372: LD_INT 1
67374: ARRAY
67375: ST_TO_ADDR
// if eng > 4 then
67376: LD_VAR 0 6
67380: PUSH
67381: LD_INT 4
67383: GREATER
67384: IFFALSE 67430
// for i = eng downto 4 do
67386: LD_ADDR_VAR 0 3
67390: PUSH
67391: DOUBLE
67392: LD_VAR 0 6
67396: INC
67397: ST_TO_ADDR
67398: LD_INT 4
67400: PUSH
67401: FOR_DOWNTO
67402: IFFALSE 67428
// eng := eng diff eng [ i ] ;
67404: LD_ADDR_VAR 0 6
67408: PUSH
67409: LD_VAR 0 6
67413: PUSH
67414: LD_VAR 0 6
67418: PUSH
67419: LD_VAR 0 3
67423: ARRAY
67424: DIFF
67425: ST_TO_ADDR
67426: GO 67401
67428: POP
67429: POP
// tmp := tmp diff ( sol union eng union mech union sci ) ;
67430: LD_ADDR_VAR 0 4
67434: PUSH
67435: LD_VAR 0 4
67439: PUSH
67440: LD_VAR 0 5
67444: PUSH
67445: LD_VAR 0 6
67449: UNION
67450: PUSH
67451: LD_VAR 0 7
67455: UNION
67456: PUSH
67457: LD_VAR 0 8
67461: UNION
67462: DIFF
67463: ST_TO_ADDR
// bcount := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) + UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) * 6 ;
67464: LD_ADDR_VAR 0 13
67468: PUSH
67469: LD_EXP 36
67473: PUSH
67474: LD_VAR 0 1
67478: ARRAY
67479: PPUSH
67480: LD_INT 2
67482: PUSH
67483: LD_INT 30
67485: PUSH
67486: LD_INT 32
67488: PUSH
67489: EMPTY
67490: LIST
67491: LIST
67492: PUSH
67493: LD_INT 30
67495: PUSH
67496: LD_INT 31
67498: PUSH
67499: EMPTY
67500: LIST
67501: LIST
67502: PUSH
67503: EMPTY
67504: LIST
67505: LIST
67506: LIST
67507: PPUSH
67508: CALL_OW 72
67512: PUSH
67513: LD_EXP 36
67517: PUSH
67518: LD_VAR 0 1
67522: ARRAY
67523: PPUSH
67524: LD_INT 2
67526: PUSH
67527: LD_INT 30
67529: PUSH
67530: LD_INT 4
67532: PUSH
67533: EMPTY
67534: LIST
67535: LIST
67536: PUSH
67537: LD_INT 30
67539: PUSH
67540: LD_INT 5
67542: PUSH
67543: EMPTY
67544: LIST
67545: LIST
67546: PUSH
67547: EMPTY
67548: LIST
67549: LIST
67550: LIST
67551: PPUSH
67552: CALL_OW 72
67556: PUSH
67557: LD_INT 6
67559: MUL
67560: PLUS
67561: ST_TO_ADDR
// if bcount < tmp then
67562: LD_VAR 0 13
67566: PUSH
67567: LD_VAR 0 4
67571: LESS
67572: IFFALSE 67618
// for i = tmp downto bcount do
67574: LD_ADDR_VAR 0 3
67578: PUSH
67579: DOUBLE
67580: LD_VAR 0 4
67584: INC
67585: ST_TO_ADDR
67586: LD_VAR 0 13
67590: PUSH
67591: FOR_DOWNTO
67592: IFFALSE 67616
// tmp := Delete ( tmp , tmp ) ;
67594: LD_ADDR_VAR 0 4
67598: PUSH
67599: LD_VAR 0 4
67603: PPUSH
67604: LD_VAR 0 4
67608: PPUSH
67609: CALL_OW 3
67613: ST_TO_ADDR
67614: GO 67591
67616: POP
67617: POP
// result := [ tmp , 0 , 0 , p ] ;
67618: LD_ADDR_VAR 0 2
67622: PUSH
67623: LD_VAR 0 4
67627: PUSH
67628: LD_INT 0
67630: PUSH
67631: LD_INT 0
67633: PUSH
67634: LD_VAR 0 11
67638: PUSH
67639: EMPTY
67640: LIST
67641: LIST
67642: LIST
67643: LIST
67644: ST_TO_ADDR
// exit ;
67645: GO 70335
// end ; if not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
67647: LD_EXP 36
67651: PUSH
67652: LD_VAR 0 1
67656: ARRAY
67657: PPUSH
67658: LD_INT 2
67660: PUSH
67661: LD_INT 30
67663: PUSH
67664: LD_INT 6
67666: PUSH
67667: EMPTY
67668: LIST
67669: LIST
67670: PUSH
67671: LD_INT 30
67673: PUSH
67674: LD_INT 7
67676: PUSH
67677: EMPTY
67678: LIST
67679: LIST
67680: PUSH
67681: LD_INT 30
67683: PUSH
67684: LD_INT 8
67686: PUSH
67687: EMPTY
67688: LIST
67689: LIST
67690: PUSH
67691: EMPTY
67692: LIST
67693: LIST
67694: LIST
67695: LIST
67696: PPUSH
67697: CALL_OW 72
67701: NOT
67702: PUSH
67703: LD_EXP 36
67707: PUSH
67708: LD_VAR 0 1
67712: ARRAY
67713: PPUSH
67714: LD_INT 30
67716: PUSH
67717: LD_INT 3
67719: PUSH
67720: EMPTY
67721: LIST
67722: LIST
67723: PPUSH
67724: CALL_OW 72
67728: NOT
67729: AND
67730: IFFALSE 67802
// begin if eng = tmp then
67732: LD_VAR 0 6
67736: PUSH
67737: LD_VAR 0 4
67741: EQUAL
67742: IFFALSE 67746
// exit ;
67744: GO 70335
// mc_class_case_use := Replace ( mc_class_case_use , base , 1 ) ;
67746: LD_ADDR_EXP 78
67750: PUSH
67751: LD_EXP 78
67755: PPUSH
67756: LD_VAR 0 1
67760: PPUSH
67761: LD_INT 1
67763: PPUSH
67764: CALL_OW 1
67768: ST_TO_ADDR
// result := [ 0 , tmp diff eng , 0 , 0 ] ;
67769: LD_ADDR_VAR 0 2
67773: PUSH
67774: LD_INT 0
67776: PUSH
67777: LD_VAR 0 4
67781: PUSH
67782: LD_VAR 0 6
67786: DIFF
67787: PUSH
67788: LD_INT 0
67790: PUSH
67791: LD_INT 0
67793: PUSH
67794: EMPTY
67795: LIST
67796: LIST
67797: LIST
67798: LIST
67799: ST_TO_ADDR
// exit ;
67800: GO 70335
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
67802: LD_EXP 63
67806: PUSH
67807: LD_EXP 62
67811: PUSH
67812: LD_VAR 0 1
67816: ARRAY
67817: ARRAY
67818: PUSH
67819: LD_EXP 36
67823: PUSH
67824: LD_VAR 0 1
67828: ARRAY
67829: PPUSH
67830: LD_INT 2
67832: PUSH
67833: LD_INT 30
67835: PUSH
67836: LD_INT 6
67838: PUSH
67839: EMPTY
67840: LIST
67841: LIST
67842: PUSH
67843: LD_INT 30
67845: PUSH
67846: LD_INT 7
67848: PUSH
67849: EMPTY
67850: LIST
67851: LIST
67852: PUSH
67853: LD_INT 30
67855: PUSH
67856: LD_INT 8
67858: PUSH
67859: EMPTY
67860: LIST
67861: LIST
67862: PUSH
67863: EMPTY
67864: LIST
67865: LIST
67866: LIST
67867: LIST
67868: PPUSH
67869: CALL_OW 72
67873: AND
67874: PUSH
67875: LD_EXP 36
67879: PUSH
67880: LD_VAR 0 1
67884: ARRAY
67885: PPUSH
67886: LD_INT 30
67888: PUSH
67889: LD_INT 3
67891: PUSH
67892: EMPTY
67893: LIST
67894: LIST
67895: PPUSH
67896: CALL_OW 72
67900: NOT
67901: AND
67902: IFFALSE 68116
// begin if sci >= 6 then
67904: LD_VAR 0 8
67908: PUSH
67909: LD_INT 6
67911: GREATEREQUAL
67912: IFFALSE 67916
// exit ;
67914: GO 70335
// mc_class_case_use := Replace ( mc_class_case_use , base , 2 ) ;
67916: LD_ADDR_EXP 78
67920: PUSH
67921: LD_EXP 78
67925: PPUSH
67926: LD_VAR 0 1
67930: PPUSH
67931: LD_INT 2
67933: PPUSH
67934: CALL_OW 1
67938: ST_TO_ADDR
// sort := SortBySkill ( tmp diff sci , 4 ) ;
67939: LD_ADDR_VAR 0 9
67943: PUSH
67944: LD_VAR 0 4
67948: PUSH
67949: LD_VAR 0 8
67953: DIFF
67954: PPUSH
67955: LD_INT 4
67957: PPUSH
67958: CALL 60459 0 2
67962: ST_TO_ADDR
// p := [ ] ;
67963: LD_ADDR_VAR 0 11
67967: PUSH
67968: EMPTY
67969: ST_TO_ADDR
// if sci < 6 and sort > 6 then
67970: LD_VAR 0 8
67974: PUSH
67975: LD_INT 6
67977: LESS
67978: PUSH
67979: LD_VAR 0 9
67983: PUSH
67984: LD_INT 6
67986: GREATER
67987: AND
67988: IFFALSE 68069
// begin for i = 1 to 6 - sci do
67990: LD_ADDR_VAR 0 3
67994: PUSH
67995: DOUBLE
67996: LD_INT 1
67998: DEC
67999: ST_TO_ADDR
68000: LD_INT 6
68002: PUSH
68003: LD_VAR 0 8
68007: MINUS
68008: PUSH
68009: FOR_TO
68010: IFFALSE 68065
// begin p := Insert ( p , p + 1 , sort [ 1 ] ) ;
68012: LD_ADDR_VAR 0 11
68016: PUSH
68017: LD_VAR 0 11
68021: PPUSH
68022: LD_VAR 0 11
68026: PUSH
68027: LD_INT 1
68029: PLUS
68030: PPUSH
68031: LD_VAR 0 9
68035: PUSH
68036: LD_INT 1
68038: ARRAY
68039: PPUSH
68040: CALL_OW 2
68044: ST_TO_ADDR
// sort := Delete ( sort , 1 ) ;
68045: LD_ADDR_VAR 0 9
68049: PUSH
68050: LD_VAR 0 9
68054: PPUSH
68055: LD_INT 1
68057: PPUSH
68058: CALL_OW 3
68062: ST_TO_ADDR
// end ;
68063: GO 68009
68065: POP
68066: POP
// end else
68067: GO 68089
// if sort then
68069: LD_VAR 0 9
68073: IFFALSE 68089
// p := sort [ 1 ] ;
68075: LD_ADDR_VAR 0 11
68079: PUSH
68080: LD_VAR 0 9
68084: PUSH
68085: LD_INT 1
68087: ARRAY
68088: ST_TO_ADDR
// result := [ 0 , 0 , 0 , p ] ;
68089: LD_ADDR_VAR 0 2
68093: PUSH
68094: LD_INT 0
68096: PUSH
68097: LD_INT 0
68099: PUSH
68100: LD_INT 0
68102: PUSH
68103: LD_VAR 0 11
68107: PUSH
68108: EMPTY
68109: LIST
68110: LIST
68111: LIST
68112: LIST
68113: ST_TO_ADDR
// exit ;
68114: GO 70335
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
68116: LD_EXP 63
68120: PUSH
68121: LD_EXP 62
68125: PUSH
68126: LD_VAR 0 1
68130: ARRAY
68131: ARRAY
68132: PUSH
68133: LD_EXP 36
68137: PUSH
68138: LD_VAR 0 1
68142: ARRAY
68143: PPUSH
68144: LD_INT 2
68146: PUSH
68147: LD_INT 30
68149: PUSH
68150: LD_INT 6
68152: PUSH
68153: EMPTY
68154: LIST
68155: LIST
68156: PUSH
68157: LD_INT 30
68159: PUSH
68160: LD_INT 7
68162: PUSH
68163: EMPTY
68164: LIST
68165: LIST
68166: PUSH
68167: LD_INT 30
68169: PUSH
68170: LD_INT 8
68172: PUSH
68173: EMPTY
68174: LIST
68175: LIST
68176: PUSH
68177: EMPTY
68178: LIST
68179: LIST
68180: LIST
68181: LIST
68182: PPUSH
68183: CALL_OW 72
68187: AND
68188: PUSH
68189: LD_EXP 36
68193: PUSH
68194: LD_VAR 0 1
68198: ARRAY
68199: PPUSH
68200: LD_INT 30
68202: PUSH
68203: LD_INT 3
68205: PUSH
68206: EMPTY
68207: LIST
68208: LIST
68209: PPUSH
68210: CALL_OW 72
68214: AND
68215: IFFALSE 68949
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 3 ) ;
68217: LD_ADDR_EXP 78
68221: PUSH
68222: LD_EXP 78
68226: PPUSH
68227: LD_VAR 0 1
68231: PPUSH
68232: LD_INT 3
68234: PPUSH
68235: CALL_OW 1
68239: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
68240: LD_ADDR_VAR 0 2
68244: PUSH
68245: LD_INT 0
68247: PUSH
68248: LD_INT 0
68250: PUSH
68251: LD_INT 0
68253: PUSH
68254: LD_INT 0
68256: PUSH
68257: EMPTY
68258: LIST
68259: LIST
68260: LIST
68261: LIST
68262: ST_TO_ADDR
// if not eng then
68263: LD_VAR 0 6
68267: NOT
68268: IFFALSE 68331
// begin p := SortBySkill ( tmp , 2 ) [ 1 ] ;
68270: LD_ADDR_VAR 0 11
68274: PUSH
68275: LD_VAR 0 4
68279: PPUSH
68280: LD_INT 2
68282: PPUSH
68283: CALL 60459 0 2
68287: PUSH
68288: LD_INT 1
68290: ARRAY
68291: ST_TO_ADDR
// result := Replace ( result , 2 , p ) ;
68292: LD_ADDR_VAR 0 2
68296: PUSH
68297: LD_VAR 0 2
68301: PPUSH
68302: LD_INT 2
68304: PPUSH
68305: LD_VAR 0 11
68309: PPUSH
68310: CALL_OW 1
68314: ST_TO_ADDR
// tmp := tmp diff p ;
68315: LD_ADDR_VAR 0 4
68319: PUSH
68320: LD_VAR 0 4
68324: PUSH
68325: LD_VAR 0 11
68329: DIFF
68330: ST_TO_ADDR
// end ; if tmp and sci < 6 then
68331: LD_VAR 0 4
68335: PUSH
68336: LD_VAR 0 8
68340: PUSH
68341: LD_INT 6
68343: LESS
68344: AND
68345: IFFALSE 68533
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 4 ) ;
68347: LD_ADDR_VAR 0 9
68351: PUSH
68352: LD_VAR 0 4
68356: PUSH
68357: LD_VAR 0 8
68361: PUSH
68362: LD_VAR 0 7
68366: UNION
68367: DIFF
68368: PPUSH
68369: LD_INT 4
68371: PPUSH
68372: CALL 60459 0 2
68376: ST_TO_ADDR
// p := [ ] ;
68377: LD_ADDR_VAR 0 11
68381: PUSH
68382: EMPTY
68383: ST_TO_ADDR
// if sort then
68384: LD_VAR 0 9
68388: IFFALSE 68504
// for i = 1 to 6 - sci do
68390: LD_ADDR_VAR 0 3
68394: PUSH
68395: DOUBLE
68396: LD_INT 1
68398: DEC
68399: ST_TO_ADDR
68400: LD_INT 6
68402: PUSH
68403: LD_VAR 0 8
68407: MINUS
68408: PUSH
68409: FOR_TO
68410: IFFALSE 68502
// begin if i = sort then
68412: LD_VAR 0 3
68416: PUSH
68417: LD_VAR 0 9
68421: EQUAL
68422: IFFALSE 68426
// break ;
68424: GO 68502
// if GetClass ( i ) = 4 then
68426: LD_VAR 0 3
68430: PPUSH
68431: CALL_OW 257
68435: PUSH
68436: LD_INT 4
68438: EQUAL
68439: IFFALSE 68443
// continue ;
68441: GO 68409
// p := Insert ( p , p + 1 , sort [ i ] ) ;
68443: LD_ADDR_VAR 0 11
68447: PUSH
68448: LD_VAR 0 11
68452: PPUSH
68453: LD_VAR 0 11
68457: PUSH
68458: LD_INT 1
68460: PLUS
68461: PPUSH
68462: LD_VAR 0 9
68466: PUSH
68467: LD_VAR 0 3
68471: ARRAY
68472: PPUSH
68473: CALL_OW 2
68477: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
68478: LD_ADDR_VAR 0 4
68482: PUSH
68483: LD_VAR 0 4
68487: PUSH
68488: LD_VAR 0 9
68492: PUSH
68493: LD_VAR 0 3
68497: ARRAY
68498: DIFF
68499: ST_TO_ADDR
// end ;
68500: GO 68409
68502: POP
68503: POP
// if p then
68504: LD_VAR 0 11
68508: IFFALSE 68533
// result := Replace ( result , 4 , p ) ;
68510: LD_ADDR_VAR 0 2
68514: PUSH
68515: LD_VAR 0 2
68519: PPUSH
68520: LD_INT 4
68522: PPUSH
68523: LD_VAR 0 11
68527: PPUSH
68528: CALL_OW 1
68532: ST_TO_ADDR
// end ; if tmp and mech < 6 then
68533: LD_VAR 0 4
68537: PUSH
68538: LD_VAR 0 7
68542: PUSH
68543: LD_INT 6
68545: LESS
68546: AND
68547: IFFALSE 68735
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
68549: LD_ADDR_VAR 0 9
68553: PUSH
68554: LD_VAR 0 4
68558: PUSH
68559: LD_VAR 0 8
68563: PUSH
68564: LD_VAR 0 7
68568: UNION
68569: DIFF
68570: PPUSH
68571: LD_INT 3
68573: PPUSH
68574: CALL 60459 0 2
68578: ST_TO_ADDR
// p := [ ] ;
68579: LD_ADDR_VAR 0 11
68583: PUSH
68584: EMPTY
68585: ST_TO_ADDR
// if sort then
68586: LD_VAR 0 9
68590: IFFALSE 68706
// for i = 1 to 6 - mech do
68592: LD_ADDR_VAR 0 3
68596: PUSH
68597: DOUBLE
68598: LD_INT 1
68600: DEC
68601: ST_TO_ADDR
68602: LD_INT 6
68604: PUSH
68605: LD_VAR 0 7
68609: MINUS
68610: PUSH
68611: FOR_TO
68612: IFFALSE 68704
// begin if i = sort then
68614: LD_VAR 0 3
68618: PUSH
68619: LD_VAR 0 9
68623: EQUAL
68624: IFFALSE 68628
// break ;
68626: GO 68704
// if GetClass ( i ) = 3 then
68628: LD_VAR 0 3
68632: PPUSH
68633: CALL_OW 257
68637: PUSH
68638: LD_INT 3
68640: EQUAL
68641: IFFALSE 68645
// continue ;
68643: GO 68611
// p := Insert ( p , p + 1 , sort [ i ] ) ;
68645: LD_ADDR_VAR 0 11
68649: PUSH
68650: LD_VAR 0 11
68654: PPUSH
68655: LD_VAR 0 11
68659: PUSH
68660: LD_INT 1
68662: PLUS
68663: PPUSH
68664: LD_VAR 0 9
68668: PUSH
68669: LD_VAR 0 3
68673: ARRAY
68674: PPUSH
68675: CALL_OW 2
68679: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
68680: LD_ADDR_VAR 0 4
68684: PUSH
68685: LD_VAR 0 4
68689: PUSH
68690: LD_VAR 0 9
68694: PUSH
68695: LD_VAR 0 3
68699: ARRAY
68700: DIFF
68701: ST_TO_ADDR
// end ;
68702: GO 68611
68704: POP
68705: POP
// if p then
68706: LD_VAR 0 11
68710: IFFALSE 68735
// result := Replace ( result , 3 , p ) ;
68712: LD_ADDR_VAR 0 2
68716: PUSH
68717: LD_VAR 0 2
68721: PPUSH
68722: LD_INT 3
68724: PPUSH
68725: LD_VAR 0 11
68729: PPUSH
68730: CALL_OW 1
68734: ST_TO_ADDR
// end ; if tmp > 6 and eng < 6 then
68735: LD_VAR 0 4
68739: PUSH
68740: LD_INT 6
68742: GREATER
68743: PUSH
68744: LD_VAR 0 6
68748: PUSH
68749: LD_INT 6
68751: LESS
68752: AND
68753: IFFALSE 68947
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
68755: LD_ADDR_VAR 0 9
68759: PUSH
68760: LD_VAR 0 4
68764: PUSH
68765: LD_VAR 0 8
68769: PUSH
68770: LD_VAR 0 7
68774: UNION
68775: PUSH
68776: LD_VAR 0 6
68780: UNION
68781: DIFF
68782: PPUSH
68783: LD_INT 2
68785: PPUSH
68786: CALL 60459 0 2
68790: ST_TO_ADDR
// p := [ ] ;
68791: LD_ADDR_VAR 0 11
68795: PUSH
68796: EMPTY
68797: ST_TO_ADDR
// if sort then
68798: LD_VAR 0 9
68802: IFFALSE 68918
// for i = 1 to 6 - eng do
68804: LD_ADDR_VAR 0 3
68808: PUSH
68809: DOUBLE
68810: LD_INT 1
68812: DEC
68813: ST_TO_ADDR
68814: LD_INT 6
68816: PUSH
68817: LD_VAR 0 6
68821: MINUS
68822: PUSH
68823: FOR_TO
68824: IFFALSE 68916
// begin if i = sort then
68826: LD_VAR 0 3
68830: PUSH
68831: LD_VAR 0 9
68835: EQUAL
68836: IFFALSE 68840
// break ;
68838: GO 68916
// if GetClass ( i ) = 2 then
68840: LD_VAR 0 3
68844: PPUSH
68845: CALL_OW 257
68849: PUSH
68850: LD_INT 2
68852: EQUAL
68853: IFFALSE 68857
// continue ;
68855: GO 68823
// p := Insert ( p , p + 1 , sort [ i ] ) ;
68857: LD_ADDR_VAR 0 11
68861: PUSH
68862: LD_VAR 0 11
68866: PPUSH
68867: LD_VAR 0 11
68871: PUSH
68872: LD_INT 1
68874: PLUS
68875: PPUSH
68876: LD_VAR 0 9
68880: PUSH
68881: LD_VAR 0 3
68885: ARRAY
68886: PPUSH
68887: CALL_OW 2
68891: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
68892: LD_ADDR_VAR 0 4
68896: PUSH
68897: LD_VAR 0 4
68901: PUSH
68902: LD_VAR 0 9
68906: PUSH
68907: LD_VAR 0 3
68911: ARRAY
68912: DIFF
68913: ST_TO_ADDR
// end ;
68914: GO 68823
68916: POP
68917: POP
// if p then
68918: LD_VAR 0 11
68922: IFFALSE 68947
// result := Replace ( result , 2 , p ) ;
68924: LD_ADDR_VAR 0 2
68928: PUSH
68929: LD_VAR 0 2
68933: PPUSH
68934: LD_INT 2
68936: PPUSH
68937: LD_VAR 0 11
68941: PPUSH
68942: CALL_OW 1
68946: ST_TO_ADDR
// end ; exit ;
68947: GO 70335
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and mc_build_list [ base ] then
68949: LD_EXP 63
68953: PUSH
68954: LD_EXP 62
68958: PUSH
68959: LD_VAR 0 1
68963: ARRAY
68964: ARRAY
68965: NOT
68966: PUSH
68967: LD_EXP 36
68971: PUSH
68972: LD_VAR 0 1
68976: ARRAY
68977: PPUSH
68978: LD_INT 30
68980: PUSH
68981: LD_INT 3
68983: PUSH
68984: EMPTY
68985: LIST
68986: LIST
68987: PPUSH
68988: CALL_OW 72
68992: AND
68993: PUSH
68994: LD_EXP 41
68998: PUSH
68999: LD_VAR 0 1
69003: ARRAY
69004: AND
69005: IFFALSE 69613
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 5 ) ;
69007: LD_ADDR_EXP 78
69011: PUSH
69012: LD_EXP 78
69016: PPUSH
69017: LD_VAR 0 1
69021: PPUSH
69022: LD_INT 5
69024: PPUSH
69025: CALL_OW 1
69029: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
69030: LD_ADDR_VAR 0 2
69034: PUSH
69035: LD_INT 0
69037: PUSH
69038: LD_INT 0
69040: PUSH
69041: LD_INT 0
69043: PUSH
69044: LD_INT 0
69046: PUSH
69047: EMPTY
69048: LIST
69049: LIST
69050: LIST
69051: LIST
69052: ST_TO_ADDR
// if sci > 1 then
69053: LD_VAR 0 8
69057: PUSH
69058: LD_INT 1
69060: GREATER
69061: IFFALSE 69089
// tmp := tmp diff ( sci diff sci [ 1 ] ) ;
69063: LD_ADDR_VAR 0 4
69067: PUSH
69068: LD_VAR 0 4
69072: PUSH
69073: LD_VAR 0 8
69077: PUSH
69078: LD_VAR 0 8
69082: PUSH
69083: LD_INT 1
69085: ARRAY
69086: DIFF
69087: DIFF
69088: ST_TO_ADDR
// if tmp and not sci then
69089: LD_VAR 0 4
69093: PUSH
69094: LD_VAR 0 8
69098: NOT
69099: AND
69100: IFFALSE 69169
// begin sort := SortBySkill ( tmp , 4 ) ;
69102: LD_ADDR_VAR 0 9
69106: PUSH
69107: LD_VAR 0 4
69111: PPUSH
69112: LD_INT 4
69114: PPUSH
69115: CALL 60459 0 2
69119: ST_TO_ADDR
// if sort then
69120: LD_VAR 0 9
69124: IFFALSE 69140
// p := sort [ 1 ] ;
69126: LD_ADDR_VAR 0 11
69130: PUSH
69131: LD_VAR 0 9
69135: PUSH
69136: LD_INT 1
69138: ARRAY
69139: ST_TO_ADDR
// if p then
69140: LD_VAR 0 11
69144: IFFALSE 69169
// result := Replace ( result , 4 , p ) ;
69146: LD_ADDR_VAR 0 2
69150: PUSH
69151: LD_VAR 0 2
69155: PPUSH
69156: LD_INT 4
69158: PPUSH
69159: LD_VAR 0 11
69163: PPUSH
69164: CALL_OW 1
69168: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
69169: LD_ADDR_VAR 0 4
69173: PUSH
69174: LD_VAR 0 4
69178: PUSH
69179: LD_VAR 0 7
69183: DIFF
69184: ST_TO_ADDR
// if tmp and mech < 6 then
69185: LD_VAR 0 4
69189: PUSH
69190: LD_VAR 0 7
69194: PUSH
69195: LD_INT 6
69197: LESS
69198: AND
69199: IFFALSE 69387
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
69201: LD_ADDR_VAR 0 9
69205: PUSH
69206: LD_VAR 0 4
69210: PUSH
69211: LD_VAR 0 8
69215: PUSH
69216: LD_VAR 0 7
69220: UNION
69221: DIFF
69222: PPUSH
69223: LD_INT 3
69225: PPUSH
69226: CALL 60459 0 2
69230: ST_TO_ADDR
// p := [ ] ;
69231: LD_ADDR_VAR 0 11
69235: PUSH
69236: EMPTY
69237: ST_TO_ADDR
// if sort then
69238: LD_VAR 0 9
69242: IFFALSE 69358
// for i = 1 to 6 - mech do
69244: LD_ADDR_VAR 0 3
69248: PUSH
69249: DOUBLE
69250: LD_INT 1
69252: DEC
69253: ST_TO_ADDR
69254: LD_INT 6
69256: PUSH
69257: LD_VAR 0 7
69261: MINUS
69262: PUSH
69263: FOR_TO
69264: IFFALSE 69356
// begin if i = sort then
69266: LD_VAR 0 3
69270: PUSH
69271: LD_VAR 0 9
69275: EQUAL
69276: IFFALSE 69280
// break ;
69278: GO 69356
// if GetClass ( i ) = 3 then
69280: LD_VAR 0 3
69284: PPUSH
69285: CALL_OW 257
69289: PUSH
69290: LD_INT 3
69292: EQUAL
69293: IFFALSE 69297
// continue ;
69295: GO 69263
// p := Insert ( p , p + 1 , sort [ i ] ) ;
69297: LD_ADDR_VAR 0 11
69301: PUSH
69302: LD_VAR 0 11
69306: PPUSH
69307: LD_VAR 0 11
69311: PUSH
69312: LD_INT 1
69314: PLUS
69315: PPUSH
69316: LD_VAR 0 9
69320: PUSH
69321: LD_VAR 0 3
69325: ARRAY
69326: PPUSH
69327: CALL_OW 2
69331: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
69332: LD_ADDR_VAR 0 4
69336: PUSH
69337: LD_VAR 0 4
69341: PUSH
69342: LD_VAR 0 9
69346: PUSH
69347: LD_VAR 0 3
69351: ARRAY
69352: DIFF
69353: ST_TO_ADDR
// end ;
69354: GO 69263
69356: POP
69357: POP
// if p then
69358: LD_VAR 0 11
69362: IFFALSE 69387
// result := Replace ( result , 3 , p ) ;
69364: LD_ADDR_VAR 0 2
69368: PUSH
69369: LD_VAR 0 2
69373: PPUSH
69374: LD_INT 3
69376: PPUSH
69377: LD_VAR 0 11
69381: PPUSH
69382: CALL_OW 1
69386: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
69387: LD_ADDR_VAR 0 4
69391: PUSH
69392: LD_VAR 0 4
69396: PUSH
69397: LD_VAR 0 6
69401: DIFF
69402: ST_TO_ADDR
// if tmp and eng < 6 then
69403: LD_VAR 0 4
69407: PUSH
69408: LD_VAR 0 6
69412: PUSH
69413: LD_INT 6
69415: LESS
69416: AND
69417: IFFALSE 69611
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
69419: LD_ADDR_VAR 0 9
69423: PUSH
69424: LD_VAR 0 4
69428: PUSH
69429: LD_VAR 0 8
69433: PUSH
69434: LD_VAR 0 7
69438: UNION
69439: PUSH
69440: LD_VAR 0 6
69444: UNION
69445: DIFF
69446: PPUSH
69447: LD_INT 2
69449: PPUSH
69450: CALL 60459 0 2
69454: ST_TO_ADDR
// p := [ ] ;
69455: LD_ADDR_VAR 0 11
69459: PUSH
69460: EMPTY
69461: ST_TO_ADDR
// if sort then
69462: LD_VAR 0 9
69466: IFFALSE 69582
// for i = 1 to 6 - eng do
69468: LD_ADDR_VAR 0 3
69472: PUSH
69473: DOUBLE
69474: LD_INT 1
69476: DEC
69477: ST_TO_ADDR
69478: LD_INT 6
69480: PUSH
69481: LD_VAR 0 6
69485: MINUS
69486: PUSH
69487: FOR_TO
69488: IFFALSE 69580
// begin if i = sort then
69490: LD_VAR 0 3
69494: PUSH
69495: LD_VAR 0 9
69499: EQUAL
69500: IFFALSE 69504
// break ;
69502: GO 69580
// if GetClass ( i ) = 2 then
69504: LD_VAR 0 3
69508: PPUSH
69509: CALL_OW 257
69513: PUSH
69514: LD_INT 2
69516: EQUAL
69517: IFFALSE 69521
// continue ;
69519: GO 69487
// p := Insert ( p , p + 1 , sort [ i ] ) ;
69521: LD_ADDR_VAR 0 11
69525: PUSH
69526: LD_VAR 0 11
69530: PPUSH
69531: LD_VAR 0 11
69535: PUSH
69536: LD_INT 1
69538: PLUS
69539: PPUSH
69540: LD_VAR 0 9
69544: PUSH
69545: LD_VAR 0 3
69549: ARRAY
69550: PPUSH
69551: CALL_OW 2
69555: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
69556: LD_ADDR_VAR 0 4
69560: PUSH
69561: LD_VAR 0 4
69565: PUSH
69566: LD_VAR 0 9
69570: PUSH
69571: LD_VAR 0 3
69575: ARRAY
69576: DIFF
69577: ST_TO_ADDR
// end ;
69578: GO 69487
69580: POP
69581: POP
// if p then
69582: LD_VAR 0 11
69586: IFFALSE 69611
// result := Replace ( result , 2 , p ) ;
69588: LD_ADDR_VAR 0 2
69592: PUSH
69593: LD_VAR 0 2
69597: PPUSH
69598: LD_INT 2
69600: PPUSH
69601: LD_VAR 0 11
69605: PPUSH
69606: CALL_OW 1
69610: ST_TO_ADDR
// end ; exit ;
69611: GO 70335
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and not mc_build_list [ base ] then
69613: LD_EXP 63
69617: PUSH
69618: LD_EXP 62
69622: PUSH
69623: LD_VAR 0 1
69627: ARRAY
69628: ARRAY
69629: NOT
69630: PUSH
69631: LD_EXP 36
69635: PUSH
69636: LD_VAR 0 1
69640: ARRAY
69641: PPUSH
69642: LD_INT 30
69644: PUSH
69645: LD_INT 3
69647: PUSH
69648: EMPTY
69649: LIST
69650: LIST
69651: PPUSH
69652: CALL_OW 72
69656: AND
69657: PUSH
69658: LD_EXP 41
69662: PUSH
69663: LD_VAR 0 1
69667: ARRAY
69668: NOT
69669: AND
69670: IFFALSE 70335
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 6 ) ;
69672: LD_ADDR_EXP 78
69676: PUSH
69677: LD_EXP 78
69681: PPUSH
69682: LD_VAR 0 1
69686: PPUSH
69687: LD_INT 6
69689: PPUSH
69690: CALL_OW 1
69694: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
69695: LD_ADDR_VAR 0 2
69699: PUSH
69700: LD_INT 0
69702: PUSH
69703: LD_INT 0
69705: PUSH
69706: LD_INT 0
69708: PUSH
69709: LD_INT 0
69711: PUSH
69712: EMPTY
69713: LIST
69714: LIST
69715: LIST
69716: LIST
69717: ST_TO_ADDR
// if sci >= 1 then
69718: LD_VAR 0 8
69722: PUSH
69723: LD_INT 1
69725: GREATEREQUAL
69726: IFFALSE 69748
// tmp := tmp diff sci [ 1 ] ;
69728: LD_ADDR_VAR 0 4
69732: PUSH
69733: LD_VAR 0 4
69737: PUSH
69738: LD_VAR 0 8
69742: PUSH
69743: LD_INT 1
69745: ARRAY
69746: DIFF
69747: ST_TO_ADDR
// if tmp and not sci then
69748: LD_VAR 0 4
69752: PUSH
69753: LD_VAR 0 8
69757: NOT
69758: AND
69759: IFFALSE 69828
// begin sort := SortBySkill ( tmp , 4 ) ;
69761: LD_ADDR_VAR 0 9
69765: PUSH
69766: LD_VAR 0 4
69770: PPUSH
69771: LD_INT 4
69773: PPUSH
69774: CALL 60459 0 2
69778: ST_TO_ADDR
// if sort then
69779: LD_VAR 0 9
69783: IFFALSE 69799
// p := sort [ 1 ] ;
69785: LD_ADDR_VAR 0 11
69789: PUSH
69790: LD_VAR 0 9
69794: PUSH
69795: LD_INT 1
69797: ARRAY
69798: ST_TO_ADDR
// if p then
69799: LD_VAR 0 11
69803: IFFALSE 69828
// result := Replace ( result , 4 , p ) ;
69805: LD_ADDR_VAR 0 2
69809: PUSH
69810: LD_VAR 0 2
69814: PPUSH
69815: LD_INT 4
69817: PPUSH
69818: LD_VAR 0 11
69822: PPUSH
69823: CALL_OW 1
69827: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
69828: LD_ADDR_VAR 0 4
69832: PUSH
69833: LD_VAR 0 4
69837: PUSH
69838: LD_VAR 0 7
69842: DIFF
69843: ST_TO_ADDR
// if tmp and mech < 6 then
69844: LD_VAR 0 4
69848: PUSH
69849: LD_VAR 0 7
69853: PUSH
69854: LD_INT 6
69856: LESS
69857: AND
69858: IFFALSE 70040
// begin sort := SortBySkill ( tmp diff mech , 3 ) ;
69860: LD_ADDR_VAR 0 9
69864: PUSH
69865: LD_VAR 0 4
69869: PUSH
69870: LD_VAR 0 7
69874: DIFF
69875: PPUSH
69876: LD_INT 3
69878: PPUSH
69879: CALL 60459 0 2
69883: ST_TO_ADDR
// p := [ ] ;
69884: LD_ADDR_VAR 0 11
69888: PUSH
69889: EMPTY
69890: ST_TO_ADDR
// if sort then
69891: LD_VAR 0 9
69895: IFFALSE 70011
// for i = 1 to 6 - mech do
69897: LD_ADDR_VAR 0 3
69901: PUSH
69902: DOUBLE
69903: LD_INT 1
69905: DEC
69906: ST_TO_ADDR
69907: LD_INT 6
69909: PUSH
69910: LD_VAR 0 7
69914: MINUS
69915: PUSH
69916: FOR_TO
69917: IFFALSE 70009
// begin if i = sort then
69919: LD_VAR 0 3
69923: PUSH
69924: LD_VAR 0 9
69928: EQUAL
69929: IFFALSE 69933
// break ;
69931: GO 70009
// if GetClass ( i ) = 3 then
69933: LD_VAR 0 3
69937: PPUSH
69938: CALL_OW 257
69942: PUSH
69943: LD_INT 3
69945: EQUAL
69946: IFFALSE 69950
// continue ;
69948: GO 69916
// p := Insert ( p , p + 1 , sort [ i ] ) ;
69950: LD_ADDR_VAR 0 11
69954: PUSH
69955: LD_VAR 0 11
69959: PPUSH
69960: LD_VAR 0 11
69964: PUSH
69965: LD_INT 1
69967: PLUS
69968: PPUSH
69969: LD_VAR 0 9
69973: PUSH
69974: LD_VAR 0 3
69978: ARRAY
69979: PPUSH
69980: CALL_OW 2
69984: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
69985: LD_ADDR_VAR 0 4
69989: PUSH
69990: LD_VAR 0 4
69994: PUSH
69995: LD_VAR 0 9
69999: PUSH
70000: LD_VAR 0 3
70004: ARRAY
70005: DIFF
70006: ST_TO_ADDR
// end ;
70007: GO 69916
70009: POP
70010: POP
// if p then
70011: LD_VAR 0 11
70015: IFFALSE 70040
// result := Replace ( result , 3 , p ) ;
70017: LD_ADDR_VAR 0 2
70021: PUSH
70022: LD_VAR 0 2
70026: PPUSH
70027: LD_INT 3
70029: PPUSH
70030: LD_VAR 0 11
70034: PPUSH
70035: CALL_OW 1
70039: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
70040: LD_ADDR_VAR 0 4
70044: PUSH
70045: LD_VAR 0 4
70049: PUSH
70050: LD_VAR 0 6
70054: DIFF
70055: ST_TO_ADDR
// if tmp and eng < 4 then
70056: LD_VAR 0 4
70060: PUSH
70061: LD_VAR 0 6
70065: PUSH
70066: LD_INT 4
70068: LESS
70069: AND
70070: IFFALSE 70260
// begin sort := SortBySkill ( tmp diff ( mech union eng ) , 2 ) ;
70072: LD_ADDR_VAR 0 9
70076: PUSH
70077: LD_VAR 0 4
70081: PUSH
70082: LD_VAR 0 7
70086: PUSH
70087: LD_VAR 0 6
70091: UNION
70092: DIFF
70093: PPUSH
70094: LD_INT 2
70096: PPUSH
70097: CALL 60459 0 2
70101: ST_TO_ADDR
// p := [ ] ;
70102: LD_ADDR_VAR 0 11
70106: PUSH
70107: EMPTY
70108: ST_TO_ADDR
// if sort then
70109: LD_VAR 0 9
70113: IFFALSE 70229
// for i = 1 to 4 - eng do
70115: LD_ADDR_VAR 0 3
70119: PUSH
70120: DOUBLE
70121: LD_INT 1
70123: DEC
70124: ST_TO_ADDR
70125: LD_INT 4
70127: PUSH
70128: LD_VAR 0 6
70132: MINUS
70133: PUSH
70134: FOR_TO
70135: IFFALSE 70227
// begin if i = sort then
70137: LD_VAR 0 3
70141: PUSH
70142: LD_VAR 0 9
70146: EQUAL
70147: IFFALSE 70151
// break ;
70149: GO 70227
// if GetClass ( i ) = 2 then
70151: LD_VAR 0 3
70155: PPUSH
70156: CALL_OW 257
70160: PUSH
70161: LD_INT 2
70163: EQUAL
70164: IFFALSE 70168
// continue ;
70166: GO 70134
// p := Insert ( p , p + 1 , sort [ i ] ) ;
70168: LD_ADDR_VAR 0 11
70172: PUSH
70173: LD_VAR 0 11
70177: PPUSH
70178: LD_VAR 0 11
70182: PUSH
70183: LD_INT 1
70185: PLUS
70186: PPUSH
70187: LD_VAR 0 9
70191: PUSH
70192: LD_VAR 0 3
70196: ARRAY
70197: PPUSH
70198: CALL_OW 2
70202: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
70203: LD_ADDR_VAR 0 4
70207: PUSH
70208: LD_VAR 0 4
70212: PUSH
70213: LD_VAR 0 9
70217: PUSH
70218: LD_VAR 0 3
70222: ARRAY
70223: DIFF
70224: ST_TO_ADDR
// end ;
70225: GO 70134
70227: POP
70228: POP
// if p then
70229: LD_VAR 0 11
70233: IFFALSE 70258
// result := Replace ( result , 2 , p ) ;
70235: LD_ADDR_VAR 0 2
70239: PUSH
70240: LD_VAR 0 2
70244: PPUSH
70245: LD_INT 2
70247: PPUSH
70248: LD_VAR 0 11
70252: PPUSH
70253: CALL_OW 1
70257: ST_TO_ADDR
// end else
70258: GO 70304
// for i = eng downto 5 do
70260: LD_ADDR_VAR 0 3
70264: PUSH
70265: DOUBLE
70266: LD_VAR 0 6
70270: INC
70271: ST_TO_ADDR
70272: LD_INT 5
70274: PUSH
70275: FOR_DOWNTO
70276: IFFALSE 70302
// tmp := tmp union eng [ i ] ;
70278: LD_ADDR_VAR 0 4
70282: PUSH
70283: LD_VAR 0 4
70287: PUSH
70288: LD_VAR 0 6
70292: PUSH
70293: LD_VAR 0 3
70297: ARRAY
70298: UNION
70299: ST_TO_ADDR
70300: GO 70275
70302: POP
70303: POP
// result := Replace ( result , 1 , tmp diff sol ) ;
70304: LD_ADDR_VAR 0 2
70308: PUSH
70309: LD_VAR 0 2
70313: PPUSH
70314: LD_INT 1
70316: PPUSH
70317: LD_VAR 0 4
70321: PUSH
70322: LD_VAR 0 5
70326: DIFF
70327: PPUSH
70328: CALL_OW 1
70332: ST_TO_ADDR
// exit ;
70333: GO 70335
// end ; end ;
70335: LD_VAR 0 2
70339: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
70340: LD_INT 0
70342: PPUSH
70343: PPUSH
70344: PPUSH
// if not mc_bases then
70345: LD_EXP 36
70349: NOT
70350: IFFALSE 70354
// exit ;
70352: GO 70460
// for i = 1 to mc_bases do
70354: LD_ADDR_VAR 0 2
70358: PUSH
70359: DOUBLE
70360: LD_INT 1
70362: DEC
70363: ST_TO_ADDR
70364: LD_EXP 36
70368: PUSH
70369: FOR_TO
70370: IFFALSE 70451
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
70372: LD_ADDR_VAR 0 3
70376: PUSH
70377: LD_EXP 36
70381: PUSH
70382: LD_VAR 0 2
70386: ARRAY
70387: PPUSH
70388: LD_INT 21
70390: PUSH
70391: LD_INT 3
70393: PUSH
70394: EMPTY
70395: LIST
70396: LIST
70397: PUSH
70398: LD_INT 3
70400: PUSH
70401: LD_INT 24
70403: PUSH
70404: LD_INT 1000
70406: PUSH
70407: EMPTY
70408: LIST
70409: LIST
70410: PUSH
70411: EMPTY
70412: LIST
70413: LIST
70414: PUSH
70415: EMPTY
70416: LIST
70417: LIST
70418: PPUSH
70419: CALL_OW 72
70423: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
70424: LD_ADDR_EXP 37
70428: PUSH
70429: LD_EXP 37
70433: PPUSH
70434: LD_VAR 0 2
70438: PPUSH
70439: LD_VAR 0 3
70443: PPUSH
70444: CALL_OW 1
70448: ST_TO_ADDR
// end ;
70449: GO 70369
70451: POP
70452: POP
// RaiseSailEvent ( 101 ) ;
70453: LD_INT 101
70455: PPUSH
70456: CALL_OW 427
// end ;
70460: LD_VAR 0 1
70464: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
70465: LD_INT 0
70467: PPUSH
70468: PPUSH
70469: PPUSH
70470: PPUSH
70471: PPUSH
70472: PPUSH
70473: PPUSH
// if not mc_bases then
70474: LD_EXP 36
70478: NOT
70479: IFFALSE 70483
// exit ;
70481: GO 71056
// for i = 1 to mc_bases do
70483: LD_ADDR_VAR 0 2
70487: PUSH
70488: DOUBLE
70489: LD_INT 1
70491: DEC
70492: ST_TO_ADDR
70493: LD_EXP 36
70497: PUSH
70498: FOR_TO
70499: IFFALSE 71047
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 800 ] ] ] ] ) ;
70501: LD_ADDR_VAR 0 5
70505: PUSH
70506: LD_EXP 36
70510: PUSH
70511: LD_VAR 0 2
70515: ARRAY
70516: PUSH
70517: LD_EXP 65
70521: PUSH
70522: LD_VAR 0 2
70526: ARRAY
70527: UNION
70528: PPUSH
70529: LD_INT 21
70531: PUSH
70532: LD_INT 1
70534: PUSH
70535: EMPTY
70536: LIST
70537: LIST
70538: PUSH
70539: LD_INT 1
70541: PUSH
70542: LD_INT 3
70544: PUSH
70545: LD_INT 54
70547: PUSH
70548: EMPTY
70549: LIST
70550: PUSH
70551: EMPTY
70552: LIST
70553: LIST
70554: PUSH
70555: LD_INT 3
70557: PUSH
70558: LD_INT 24
70560: PUSH
70561: LD_INT 800
70563: PUSH
70564: EMPTY
70565: LIST
70566: LIST
70567: PUSH
70568: EMPTY
70569: LIST
70570: LIST
70571: PUSH
70572: EMPTY
70573: LIST
70574: LIST
70575: LIST
70576: PUSH
70577: EMPTY
70578: LIST
70579: LIST
70580: PPUSH
70581: CALL_OW 72
70585: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
70586: LD_ADDR_VAR 0 6
70590: PUSH
70591: LD_EXP 36
70595: PUSH
70596: LD_VAR 0 2
70600: ARRAY
70601: PPUSH
70602: LD_INT 21
70604: PUSH
70605: LD_INT 1
70607: PUSH
70608: EMPTY
70609: LIST
70610: LIST
70611: PUSH
70612: LD_INT 1
70614: PUSH
70615: LD_INT 3
70617: PUSH
70618: LD_INT 54
70620: PUSH
70621: EMPTY
70622: LIST
70623: PUSH
70624: EMPTY
70625: LIST
70626: LIST
70627: PUSH
70628: LD_INT 3
70630: PUSH
70631: LD_INT 24
70633: PUSH
70634: LD_INT 250
70636: PUSH
70637: EMPTY
70638: LIST
70639: LIST
70640: PUSH
70641: EMPTY
70642: LIST
70643: LIST
70644: PUSH
70645: EMPTY
70646: LIST
70647: LIST
70648: LIST
70649: PUSH
70650: EMPTY
70651: LIST
70652: LIST
70653: PPUSH
70654: CALL_OW 72
70658: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
70659: LD_ADDR_VAR 0 7
70663: PUSH
70664: LD_VAR 0 5
70668: PUSH
70669: LD_VAR 0 6
70673: DIFF
70674: ST_TO_ADDR
// if not need_heal_1 then
70675: LD_VAR 0 6
70679: NOT
70680: IFFALSE 70713
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , [ ] ) else
70682: LD_ADDR_EXP 39
70686: PUSH
70687: LD_EXP 39
70691: PPUSH
70692: LD_VAR 0 2
70696: PUSH
70697: LD_INT 1
70699: PUSH
70700: EMPTY
70701: LIST
70702: LIST
70703: PPUSH
70704: EMPTY
70705: PPUSH
70706: CALL 26211 0 3
70710: ST_TO_ADDR
70711: GO 70783
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , UnitFilter ( mc_need_heal [ i ] [ 1 ] , [ f_not , [ f_lives , 1000 ] ] ) union need_heal_1 ) ;
70713: LD_ADDR_EXP 39
70717: PUSH
70718: LD_EXP 39
70722: PPUSH
70723: LD_VAR 0 2
70727: PUSH
70728: LD_INT 1
70730: PUSH
70731: EMPTY
70732: LIST
70733: LIST
70734: PPUSH
70735: LD_EXP 39
70739: PUSH
70740: LD_VAR 0 2
70744: ARRAY
70745: PUSH
70746: LD_INT 1
70748: ARRAY
70749: PPUSH
70750: LD_INT 3
70752: PUSH
70753: LD_INT 24
70755: PUSH
70756: LD_INT 1000
70758: PUSH
70759: EMPTY
70760: LIST
70761: LIST
70762: PUSH
70763: EMPTY
70764: LIST
70765: LIST
70766: PPUSH
70767: CALL_OW 72
70771: PUSH
70772: LD_VAR 0 6
70776: UNION
70777: PPUSH
70778: CALL 26211 0 3
70782: ST_TO_ADDR
// if not need_heal_2 then
70783: LD_VAR 0 7
70787: NOT
70788: IFFALSE 70821
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , [ ] ) else
70790: LD_ADDR_EXP 39
70794: PUSH
70795: LD_EXP 39
70799: PPUSH
70800: LD_VAR 0 2
70804: PUSH
70805: LD_INT 2
70807: PUSH
70808: EMPTY
70809: LIST
70810: LIST
70811: PPUSH
70812: EMPTY
70813: PPUSH
70814: CALL 26211 0 3
70818: ST_TO_ADDR
70819: GO 70853
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
70821: LD_ADDR_EXP 39
70825: PUSH
70826: LD_EXP 39
70830: PPUSH
70831: LD_VAR 0 2
70835: PUSH
70836: LD_INT 2
70838: PUSH
70839: EMPTY
70840: LIST
70841: LIST
70842: PPUSH
70843: LD_VAR 0 7
70847: PPUSH
70848: CALL 26211 0 3
70852: ST_TO_ADDR
// if need_heal_2 then
70853: LD_VAR 0 7
70857: IFFALSE 71029
// for j in need_heal_2 do
70859: LD_ADDR_VAR 0 3
70863: PUSH
70864: LD_VAR 0 7
70868: PUSH
70869: FOR_IN
70870: IFFALSE 71027
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
70872: LD_ADDR_VAR 0 5
70876: PUSH
70877: LD_EXP 36
70881: PUSH
70882: LD_VAR 0 2
70886: ARRAY
70887: PPUSH
70888: LD_INT 2
70890: PUSH
70891: LD_INT 30
70893: PUSH
70894: LD_INT 6
70896: PUSH
70897: EMPTY
70898: LIST
70899: LIST
70900: PUSH
70901: LD_INT 30
70903: PUSH
70904: LD_INT 7
70906: PUSH
70907: EMPTY
70908: LIST
70909: LIST
70910: PUSH
70911: LD_INT 30
70913: PUSH
70914: LD_INT 8
70916: PUSH
70917: EMPTY
70918: LIST
70919: LIST
70920: PUSH
70921: LD_INT 30
70923: PUSH
70924: LD_INT 0
70926: PUSH
70927: EMPTY
70928: LIST
70929: LIST
70930: PUSH
70931: LD_INT 30
70933: PUSH
70934: LD_INT 1
70936: PUSH
70937: EMPTY
70938: LIST
70939: LIST
70940: PUSH
70941: LD_INT 25
70943: PUSH
70944: LD_INT 4
70946: PUSH
70947: EMPTY
70948: LIST
70949: LIST
70950: PUSH
70951: EMPTY
70952: LIST
70953: LIST
70954: LIST
70955: LIST
70956: LIST
70957: LIST
70958: LIST
70959: PPUSH
70960: CALL_OW 72
70964: ST_TO_ADDR
// if tmp then
70965: LD_VAR 0 5
70969: IFFALSE 71025
// begin k := NearestUnitToUnit ( tmp , j ) ;
70971: LD_ADDR_VAR 0 4
70975: PUSH
70976: LD_VAR 0 5
70980: PPUSH
70981: LD_VAR 0 3
70985: PPUSH
70986: CALL_OW 74
70990: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
70991: LD_VAR 0 3
70995: PPUSH
70996: LD_VAR 0 4
71000: PPUSH
71001: CALL_OW 296
71005: PUSH
71006: LD_INT 7
71008: GREATER
71009: IFFALSE 71025
// ComMoveUnit ( j , k ) ;
71011: LD_VAR 0 3
71015: PPUSH
71016: LD_VAR 0 4
71020: PPUSH
71021: CALL_OW 112
// end ; end ;
71025: GO 70869
71027: POP
71028: POP
// if not need_heal_1 and not need_heal_2 then
71029: LD_VAR 0 6
71033: NOT
71034: PUSH
71035: LD_VAR 0 7
71039: NOT
71040: AND
71041: IFFALSE 71045
// continue ;
71043: GO 70498
// end ;
71045: GO 70498
71047: POP
71048: POP
// RaiseSailEvent ( 102 ) ;
71049: LD_INT 102
71051: PPUSH
71052: CALL_OW 427
// end ;
71056: LD_VAR 0 1
71060: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp , cranes ; begin
71061: LD_INT 0
71063: PPUSH
71064: PPUSH
71065: PPUSH
71066: PPUSH
71067: PPUSH
71068: PPUSH
// if not mc_bases then
71069: LD_EXP 36
71073: NOT
71074: IFFALSE 71078
// exit ;
71076: GO 71788
// for i = 1 to mc_bases do
71078: LD_ADDR_VAR 0 2
71082: PUSH
71083: DOUBLE
71084: LD_INT 1
71086: DEC
71087: ST_TO_ADDR
71088: LD_EXP 36
71092: PUSH
71093: FOR_TO
71094: IFFALSE 71786
// begin if not mc_building_need_repair [ i ] then
71096: LD_EXP 37
71100: PUSH
71101: LD_VAR 0 2
71105: ARRAY
71106: NOT
71107: IFFALSE 71281
// begin cranes := UnitFilter ( mc_vehicles [ i ] , [ [ f_not , [ f_lives , 1000 ] ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ] ) ;
71109: LD_ADDR_VAR 0 6
71113: PUSH
71114: LD_EXP 55
71118: PUSH
71119: LD_VAR 0 2
71123: ARRAY
71124: PPUSH
71125: LD_INT 3
71127: PUSH
71128: LD_INT 24
71130: PUSH
71131: LD_INT 1000
71133: PUSH
71134: EMPTY
71135: LIST
71136: LIST
71137: PUSH
71138: EMPTY
71139: LIST
71140: LIST
71141: PUSH
71142: LD_INT 2
71144: PUSH
71145: LD_INT 34
71147: PUSH
71148: LD_INT 13
71150: PUSH
71151: EMPTY
71152: LIST
71153: LIST
71154: PUSH
71155: LD_INT 34
71157: PUSH
71158: LD_INT 52
71160: PUSH
71161: EMPTY
71162: LIST
71163: LIST
71164: PUSH
71165: EMPTY
71166: LIST
71167: LIST
71168: LIST
71169: PUSH
71170: EMPTY
71171: LIST
71172: LIST
71173: PPUSH
71174: CALL_OW 72
71178: ST_TO_ADDR
// if cranes then
71179: LD_VAR 0 6
71183: IFFALSE 71245
// for j in cranes do
71185: LD_ADDR_VAR 0 3
71189: PUSH
71190: LD_VAR 0 6
71194: PUSH
71195: FOR_IN
71196: IFFALSE 71243
// if not IsInArea ( j , mc_parking [ i ] ) then
71198: LD_VAR 0 3
71202: PPUSH
71203: LD_EXP 60
71207: PUSH
71208: LD_VAR 0 2
71212: ARRAY
71213: PPUSH
71214: CALL_OW 308
71218: NOT
71219: IFFALSE 71241
// ComMoveToArea ( j , mc_parking [ i ] ) ;
71221: LD_VAR 0 3
71225: PPUSH
71226: LD_EXP 60
71230: PUSH
71231: LD_VAR 0 2
71235: ARRAY
71236: PPUSH
71237: CALL_OW 113
71241: GO 71195
71243: POP
71244: POP
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
71245: LD_ADDR_EXP 38
71249: PUSH
71250: LD_EXP 38
71254: PPUSH
71255: LD_VAR 0 2
71259: PPUSH
71260: EMPTY
71261: PPUSH
71262: CALL_OW 1
71266: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
71267: LD_VAR 0 2
71271: PPUSH
71272: LD_INT 101
71274: PPUSH
71275: CALL 66173 0 2
// continue ;
71279: GO 71093
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
71281: LD_ADDR_EXP 42
71285: PUSH
71286: LD_EXP 42
71290: PPUSH
71291: LD_VAR 0 2
71295: PPUSH
71296: EMPTY
71297: PPUSH
71298: CALL_OW 1
71302: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
71303: LD_VAR 0 2
71307: PPUSH
71308: LD_INT 103
71310: PPUSH
71311: CALL 66173 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
71315: LD_ADDR_VAR 0 5
71319: PUSH
71320: LD_EXP 36
71324: PUSH
71325: LD_VAR 0 2
71329: ARRAY
71330: PUSH
71331: LD_EXP 65
71335: PUSH
71336: LD_VAR 0 2
71340: ARRAY
71341: UNION
71342: PPUSH
71343: LD_INT 2
71345: PUSH
71346: LD_INT 25
71348: PUSH
71349: LD_INT 2
71351: PUSH
71352: EMPTY
71353: LIST
71354: LIST
71355: PUSH
71356: LD_INT 25
71358: PUSH
71359: LD_INT 16
71361: PUSH
71362: EMPTY
71363: LIST
71364: LIST
71365: PUSH
71366: EMPTY
71367: LIST
71368: LIST
71369: LIST
71370: PUSH
71371: EMPTY
71372: LIST
71373: PPUSH
71374: CALL_OW 72
71378: ST_TO_ADDR
// cranes := UnitFilter ( mc_vehicles [ i ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ) ;
71379: LD_ADDR_VAR 0 6
71383: PUSH
71384: LD_EXP 55
71388: PUSH
71389: LD_VAR 0 2
71393: ARRAY
71394: PPUSH
71395: LD_INT 2
71397: PUSH
71398: LD_INT 34
71400: PUSH
71401: LD_INT 13
71403: PUSH
71404: EMPTY
71405: LIST
71406: LIST
71407: PUSH
71408: LD_INT 34
71410: PUSH
71411: LD_INT 52
71413: PUSH
71414: EMPTY
71415: LIST
71416: LIST
71417: PUSH
71418: EMPTY
71419: LIST
71420: LIST
71421: LIST
71422: PPUSH
71423: CALL_OW 72
71427: ST_TO_ADDR
// if cranes then
71428: LD_VAR 0 6
71432: IFFALSE 71568
// begin for j in cranes do
71434: LD_ADDR_VAR 0 3
71438: PUSH
71439: LD_VAR 0 6
71443: PUSH
71444: FOR_IN
71445: IFFALSE 71566
// if GetLives ( j ) >= 500 and not HasTask ( j ) then
71447: LD_VAR 0 3
71451: PPUSH
71452: CALL_OW 256
71456: PUSH
71457: LD_INT 500
71459: GREATEREQUAL
71460: PUSH
71461: LD_VAR 0 3
71465: PPUSH
71466: CALL_OW 314
71470: NOT
71471: AND
71472: IFFALSE 71506
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) else
71474: LD_VAR 0 3
71478: PPUSH
71479: LD_EXP 37
71483: PUSH
71484: LD_VAR 0 2
71488: ARRAY
71489: PPUSH
71490: LD_VAR 0 3
71494: PPUSH
71495: CALL_OW 74
71499: PPUSH
71500: CALL_OW 130
71504: GO 71564
// if GetLives ( j ) < 500 and not IsInArea ( j , mc_parking [ i ] ) then
71506: LD_VAR 0 3
71510: PPUSH
71511: CALL_OW 256
71515: PUSH
71516: LD_INT 500
71518: LESS
71519: PUSH
71520: LD_VAR 0 3
71524: PPUSH
71525: LD_EXP 60
71529: PUSH
71530: LD_VAR 0 2
71534: ARRAY
71535: PPUSH
71536: CALL_OW 308
71540: NOT
71541: AND
71542: IFFALSE 71564
// ComMoveToArea ( j , mc_parking [ i ] ) ;
71544: LD_VAR 0 3
71548: PPUSH
71549: LD_EXP 60
71553: PUSH
71554: LD_VAR 0 2
71558: ARRAY
71559: PPUSH
71560: CALL_OW 113
71564: GO 71444
71566: POP
71567: POP
// end ; if not tmp then
71568: LD_VAR 0 5
71572: NOT
71573: IFFALSE 71577
// continue ;
71575: GO 71093
// for j in tmp do
71577: LD_ADDR_VAR 0 3
71581: PUSH
71582: LD_VAR 0 5
71586: PUSH
71587: FOR_IN
71588: IFFALSE 71782
// begin if mc_need_heal [ i ] then
71590: LD_EXP 39
71594: PUSH
71595: LD_VAR 0 2
71599: ARRAY
71600: IFFALSE 71648
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
71602: LD_VAR 0 3
71606: PUSH
71607: LD_EXP 39
71611: PUSH
71612: LD_VAR 0 2
71616: ARRAY
71617: PUSH
71618: LD_INT 1
71620: ARRAY
71621: IN
71622: PUSH
71623: LD_VAR 0 3
71627: PUSH
71628: LD_EXP 39
71632: PUSH
71633: LD_VAR 0 2
71637: ARRAY
71638: PUSH
71639: LD_INT 2
71641: ARRAY
71642: IN
71643: OR
71644: IFFALSE 71648
// continue ;
71646: GO 71587
// if IsInUnit ( j ) then
71648: LD_VAR 0 3
71652: PPUSH
71653: CALL_OW 310
71657: IFFALSE 71668
// ComExitBuilding ( j ) ;
71659: LD_VAR 0 3
71663: PPUSH
71664: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
71668: LD_VAR 0 3
71672: PUSH
71673: LD_EXP 38
71677: PUSH
71678: LD_VAR 0 2
71682: ARRAY
71683: IN
71684: NOT
71685: IFFALSE 71743
// begin SetTag ( j , 101 ) ;
71687: LD_VAR 0 3
71691: PPUSH
71692: LD_INT 101
71694: PPUSH
71695: CALL_OW 109
// mc_building_repairs := ReplaceIn ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
71699: LD_ADDR_EXP 38
71703: PUSH
71704: LD_EXP 38
71708: PPUSH
71709: LD_VAR 0 2
71713: PUSH
71714: LD_EXP 38
71718: PUSH
71719: LD_VAR 0 2
71723: ARRAY
71724: PUSH
71725: LD_INT 1
71727: PLUS
71728: PUSH
71729: EMPTY
71730: LIST
71731: LIST
71732: PPUSH
71733: LD_VAR 0 3
71737: PPUSH
71738: CALL 26211 0 3
71742: ST_TO_ADDR
// end ; wait ( 1 ) ;
71743: LD_INT 1
71745: PPUSH
71746: CALL_OW 67
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) ;
71750: LD_VAR 0 3
71754: PPUSH
71755: LD_EXP 37
71759: PUSH
71760: LD_VAR 0 2
71764: ARRAY
71765: PPUSH
71766: LD_VAR 0 3
71770: PPUSH
71771: CALL_OW 74
71775: PPUSH
71776: CALL_OW 130
// end ;
71780: GO 71587
71782: POP
71783: POP
// end ;
71784: GO 71093
71786: POP
71787: POP
// end ;
71788: LD_VAR 0 1
71792: RET
// export function MC_Heal ; var i , j , tmp ; begin
71793: LD_INT 0
71795: PPUSH
71796: PPUSH
71797: PPUSH
71798: PPUSH
// if not mc_bases then
71799: LD_EXP 36
71803: NOT
71804: IFFALSE 71808
// exit ;
71806: GO 72210
// for i = 1 to mc_bases do
71808: LD_ADDR_VAR 0 2
71812: PUSH
71813: DOUBLE
71814: LD_INT 1
71816: DEC
71817: ST_TO_ADDR
71818: LD_EXP 36
71822: PUSH
71823: FOR_TO
71824: IFFALSE 72208
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
71826: LD_EXP 39
71830: PUSH
71831: LD_VAR 0 2
71835: ARRAY
71836: PUSH
71837: LD_INT 1
71839: ARRAY
71840: NOT
71841: PUSH
71842: LD_EXP 39
71846: PUSH
71847: LD_VAR 0 2
71851: ARRAY
71852: PUSH
71853: LD_INT 2
71855: ARRAY
71856: NOT
71857: AND
71858: IFFALSE 71896
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
71860: LD_ADDR_EXP 40
71864: PUSH
71865: LD_EXP 40
71869: PPUSH
71870: LD_VAR 0 2
71874: PPUSH
71875: EMPTY
71876: PPUSH
71877: CALL_OW 1
71881: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
71882: LD_VAR 0 2
71886: PPUSH
71887: LD_INT 102
71889: PPUSH
71890: CALL 66173 0 2
// continue ;
71894: GO 71823
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
71896: LD_ADDR_VAR 0 4
71900: PUSH
71901: LD_EXP 36
71905: PUSH
71906: LD_VAR 0 2
71910: ARRAY
71911: PPUSH
71912: LD_INT 25
71914: PUSH
71915: LD_INT 4
71917: PUSH
71918: EMPTY
71919: LIST
71920: LIST
71921: PPUSH
71922: CALL_OW 72
71926: ST_TO_ADDR
// if not tmp then
71927: LD_VAR 0 4
71931: NOT
71932: IFFALSE 71936
// continue ;
71934: GO 71823
// if mc_taming [ i ] then
71936: LD_EXP 67
71940: PUSH
71941: LD_VAR 0 2
71945: ARRAY
71946: IFFALSE 71970
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
71948: LD_ADDR_EXP 67
71952: PUSH
71953: LD_EXP 67
71957: PPUSH
71958: LD_VAR 0 2
71962: PPUSH
71963: EMPTY
71964: PPUSH
71965: CALL_OW 1
71969: ST_TO_ADDR
// for j in tmp do
71970: LD_ADDR_VAR 0 3
71974: PUSH
71975: LD_VAR 0 4
71979: PUSH
71980: FOR_IN
71981: IFFALSE 72204
// begin if IsInUnit ( j ) then
71983: LD_VAR 0 3
71987: PPUSH
71988: CALL_OW 310
71992: IFFALSE 72003
// ComExitBuilding ( j ) ;
71994: LD_VAR 0 3
71998: PPUSH
71999: CALL_OW 122
// if not j in mc_healers [ i ] then
72003: LD_VAR 0 3
72007: PUSH
72008: LD_EXP 40
72012: PUSH
72013: LD_VAR 0 2
72017: ARRAY
72018: IN
72019: NOT
72020: IFFALSE 72066
// mc_healers := ReplaceIn ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
72022: LD_ADDR_EXP 40
72026: PUSH
72027: LD_EXP 40
72031: PPUSH
72032: LD_VAR 0 2
72036: PUSH
72037: LD_EXP 40
72041: PUSH
72042: LD_VAR 0 2
72046: ARRAY
72047: PUSH
72048: LD_INT 1
72050: PLUS
72051: PUSH
72052: EMPTY
72053: LIST
72054: LIST
72055: PPUSH
72056: LD_VAR 0 3
72060: PPUSH
72061: CALL 26211 0 3
72065: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
72066: LD_VAR 0 3
72070: PPUSH
72071: CALL_OW 110
72075: PUSH
72076: LD_INT 102
72078: NONEQUAL
72079: IFFALSE 72093
// SetTag ( j , 102 ) ;
72081: LD_VAR 0 3
72085: PPUSH
72086: LD_INT 102
72088: PPUSH
72089: CALL_OW 109
// Wait ( 3 ) ;
72093: LD_INT 3
72095: PPUSH
72096: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
72100: LD_EXP 39
72104: PUSH
72105: LD_VAR 0 2
72109: ARRAY
72110: PUSH
72111: LD_INT 1
72113: ARRAY
72114: IFFALSE 72146
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
72116: LD_VAR 0 3
72120: PPUSH
72121: LD_EXP 39
72125: PUSH
72126: LD_VAR 0 2
72130: ARRAY
72131: PUSH
72132: LD_INT 1
72134: ARRAY
72135: PUSH
72136: LD_INT 1
72138: ARRAY
72139: PPUSH
72140: CALL_OW 128
72144: GO 72202
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
72146: LD_VAR 0 3
72150: PPUSH
72151: CALL_OW 314
72155: NOT
72156: PUSH
72157: LD_EXP 39
72161: PUSH
72162: LD_VAR 0 2
72166: ARRAY
72167: PUSH
72168: LD_INT 2
72170: ARRAY
72171: AND
72172: IFFALSE 72202
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
72174: LD_VAR 0 3
72178: PPUSH
72179: LD_EXP 39
72183: PUSH
72184: LD_VAR 0 2
72188: ARRAY
72189: PUSH
72190: LD_INT 2
72192: ARRAY
72193: PUSH
72194: LD_INT 1
72196: ARRAY
72197: PPUSH
72198: CALL_OW 128
// end ;
72202: GO 71980
72204: POP
72205: POP
// end ;
72206: GO 71823
72208: POP
72209: POP
// end ;
72210: LD_VAR 0 1
72214: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
72215: LD_INT 0
72217: PPUSH
72218: PPUSH
72219: PPUSH
72220: PPUSH
72221: PPUSH
// if not mc_bases then
72222: LD_EXP 36
72226: NOT
72227: IFFALSE 72231
// exit ;
72229: GO 73374
// for i = 1 to mc_bases do
72231: LD_ADDR_VAR 0 2
72235: PUSH
72236: DOUBLE
72237: LD_INT 1
72239: DEC
72240: ST_TO_ADDR
72241: LD_EXP 36
72245: PUSH
72246: FOR_TO
72247: IFFALSE 73372
// begin if mc_scan [ i ] then
72249: LD_EXP 59
72253: PUSH
72254: LD_VAR 0 2
72258: ARRAY
72259: IFFALSE 72263
// continue ;
72261: GO 72246
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
72263: LD_EXP 41
72267: PUSH
72268: LD_VAR 0 2
72272: ARRAY
72273: NOT
72274: PUSH
72275: LD_EXP 43
72279: PUSH
72280: LD_VAR 0 2
72284: ARRAY
72285: NOT
72286: AND
72287: PUSH
72288: LD_EXP 42
72292: PUSH
72293: LD_VAR 0 2
72297: ARRAY
72298: AND
72299: IFFALSE 72337
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
72301: LD_ADDR_EXP 42
72305: PUSH
72306: LD_EXP 42
72310: PPUSH
72311: LD_VAR 0 2
72315: PPUSH
72316: EMPTY
72317: PPUSH
72318: CALL_OW 1
72322: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
72323: LD_VAR 0 2
72327: PPUSH
72328: LD_INT 103
72330: PPUSH
72331: CALL 66173 0 2
// continue ;
72335: GO 72246
// end ; if mc_construct_list [ i ] then
72337: LD_EXP 43
72341: PUSH
72342: LD_VAR 0 2
72346: ARRAY
72347: IFFALSE 72567
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
72349: LD_ADDR_VAR 0 4
72353: PUSH
72354: LD_EXP 36
72358: PUSH
72359: LD_VAR 0 2
72363: ARRAY
72364: PPUSH
72365: LD_INT 25
72367: PUSH
72368: LD_INT 2
72370: PUSH
72371: EMPTY
72372: LIST
72373: LIST
72374: PPUSH
72375: CALL_OW 72
72379: PUSH
72380: LD_EXP 38
72384: PUSH
72385: LD_VAR 0 2
72389: ARRAY
72390: DIFF
72391: ST_TO_ADDR
// if not tmp then
72392: LD_VAR 0 4
72396: NOT
72397: IFFALSE 72401
// continue ;
72399: GO 72246
// for j in tmp do
72401: LD_ADDR_VAR 0 3
72405: PUSH
72406: LD_VAR 0 4
72410: PUSH
72411: FOR_IN
72412: IFFALSE 72563
// begin if not mc_builders [ i ] then
72414: LD_EXP 42
72418: PUSH
72419: LD_VAR 0 2
72423: ARRAY
72424: NOT
72425: IFFALSE 72483
// begin SetTag ( j , 103 ) ;
72427: LD_VAR 0 3
72431: PPUSH
72432: LD_INT 103
72434: PPUSH
72435: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
72439: LD_ADDR_EXP 42
72443: PUSH
72444: LD_EXP 42
72448: PPUSH
72449: LD_VAR 0 2
72453: PUSH
72454: LD_EXP 42
72458: PUSH
72459: LD_VAR 0 2
72463: ARRAY
72464: PUSH
72465: LD_INT 1
72467: PLUS
72468: PUSH
72469: EMPTY
72470: LIST
72471: LIST
72472: PPUSH
72473: LD_VAR 0 3
72477: PPUSH
72478: CALL 26211 0 3
72482: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
72483: LD_VAR 0 3
72487: PPUSH
72488: CALL_OW 310
72492: IFFALSE 72503
// ComExitBuilding ( j ) ;
72494: LD_VAR 0 3
72498: PPUSH
72499: CALL_OW 122
// wait ( 3 ) ;
72503: LD_INT 3
72505: PPUSH
72506: CALL_OW 67
// if not mc_construct_list [ i ] then
72510: LD_EXP 43
72514: PUSH
72515: LD_VAR 0 2
72519: ARRAY
72520: NOT
72521: IFFALSE 72525
// break ;
72523: GO 72563
// if not HasTask ( j ) then
72525: LD_VAR 0 3
72529: PPUSH
72530: CALL_OW 314
72534: NOT
72535: IFFALSE 72561
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
72537: LD_VAR 0 3
72541: PPUSH
72542: LD_EXP 43
72546: PUSH
72547: LD_VAR 0 2
72551: ARRAY
72552: PUSH
72553: LD_INT 1
72555: ARRAY
72556: PPUSH
72557: CALL 29062 0 2
// end ;
72561: GO 72411
72563: POP
72564: POP
// end else
72565: GO 73370
// if mc_build_list [ i ] then
72567: LD_EXP 41
72571: PUSH
72572: LD_VAR 0 2
72576: ARRAY
72577: IFFALSE 73370
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
72579: LD_ADDR_VAR 0 5
72583: PUSH
72584: LD_EXP 36
72588: PUSH
72589: LD_VAR 0 2
72593: ARRAY
72594: PPUSH
72595: LD_INT 2
72597: PUSH
72598: LD_INT 30
72600: PUSH
72601: LD_INT 0
72603: PUSH
72604: EMPTY
72605: LIST
72606: LIST
72607: PUSH
72608: LD_INT 30
72610: PUSH
72611: LD_INT 1
72613: PUSH
72614: EMPTY
72615: LIST
72616: LIST
72617: PUSH
72618: EMPTY
72619: LIST
72620: LIST
72621: LIST
72622: PPUSH
72623: CALL_OW 72
72627: ST_TO_ADDR
// if depot then
72628: LD_VAR 0 5
72632: IFFALSE 72650
// depot := depot [ 1 ] else
72634: LD_ADDR_VAR 0 5
72638: PUSH
72639: LD_VAR 0 5
72643: PUSH
72644: LD_INT 1
72646: ARRAY
72647: ST_TO_ADDR
72648: GO 72658
// depot := 0 ;
72650: LD_ADDR_VAR 0 5
72654: PUSH
72655: LD_INT 0
72657: ST_TO_ADDR
// if IsExtension ( mc_build_list [ i ] [ 1 ] [ 1 ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) then
72658: LD_EXP 41
72662: PUSH
72663: LD_VAR 0 2
72667: ARRAY
72668: PUSH
72669: LD_INT 1
72671: ARRAY
72672: PUSH
72673: LD_INT 1
72675: ARRAY
72676: PPUSH
72677: CALL 28892 0 1
72681: PUSH
72682: LD_EXP 36
72686: PUSH
72687: LD_VAR 0 2
72691: ARRAY
72692: PPUSH
72693: LD_INT 2
72695: PUSH
72696: LD_INT 30
72698: PUSH
72699: LD_INT 2
72701: PUSH
72702: EMPTY
72703: LIST
72704: LIST
72705: PUSH
72706: LD_INT 30
72708: PUSH
72709: LD_INT 3
72711: PUSH
72712: EMPTY
72713: LIST
72714: LIST
72715: PUSH
72716: EMPTY
72717: LIST
72718: LIST
72719: LIST
72720: PPUSH
72721: CALL_OW 72
72725: NOT
72726: AND
72727: IFFALSE 72832
// begin for j = 1 to mc_build_list [ i ] do
72729: LD_ADDR_VAR 0 3
72733: PUSH
72734: DOUBLE
72735: LD_INT 1
72737: DEC
72738: ST_TO_ADDR
72739: LD_EXP 41
72743: PUSH
72744: LD_VAR 0 2
72748: ARRAY
72749: PUSH
72750: FOR_TO
72751: IFFALSE 72830
// if mc_build_list [ i ] [ j ] [ 1 ] = b_workshop then
72753: LD_EXP 41
72757: PUSH
72758: LD_VAR 0 2
72762: ARRAY
72763: PUSH
72764: LD_VAR 0 3
72768: ARRAY
72769: PUSH
72770: LD_INT 1
72772: ARRAY
72773: PUSH
72774: LD_INT 2
72776: EQUAL
72777: IFFALSE 72828
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , j , 1 , false ) ) ;
72779: LD_ADDR_EXP 41
72783: PUSH
72784: LD_EXP 41
72788: PPUSH
72789: LD_VAR 0 2
72793: PPUSH
72794: LD_EXP 41
72798: PUSH
72799: LD_VAR 0 2
72803: ARRAY
72804: PPUSH
72805: LD_VAR 0 3
72809: PPUSH
72810: LD_INT 1
72812: PPUSH
72813: LD_INT 0
72815: PPUSH
72816: CALL 25629 0 4
72820: PPUSH
72821: CALL_OW 1
72825: ST_TO_ADDR
// break ;
72826: GO 72830
// end ;
72828: GO 72750
72830: POP
72831: POP
// end ; if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilt ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
72832: LD_EXP 41
72836: PUSH
72837: LD_VAR 0 2
72841: ARRAY
72842: PUSH
72843: LD_INT 1
72845: ARRAY
72846: PUSH
72847: LD_INT 1
72849: ARRAY
72850: PUSH
72851: LD_INT 0
72853: EQUAL
72854: PUSH
72855: LD_VAR 0 5
72859: PUSH
72860: LD_VAR 0 5
72864: PPUSH
72865: LD_EXP 41
72869: PUSH
72870: LD_VAR 0 2
72874: ARRAY
72875: PUSH
72876: LD_INT 1
72878: ARRAY
72879: PUSH
72880: LD_INT 1
72882: ARRAY
72883: PPUSH
72884: LD_EXP 41
72888: PUSH
72889: LD_VAR 0 2
72893: ARRAY
72894: PUSH
72895: LD_INT 1
72897: ARRAY
72898: PUSH
72899: LD_INT 2
72901: ARRAY
72902: PPUSH
72903: LD_EXP 41
72907: PUSH
72908: LD_VAR 0 2
72912: ARRAY
72913: PUSH
72914: LD_INT 1
72916: ARRAY
72917: PUSH
72918: LD_INT 3
72920: ARRAY
72921: PPUSH
72922: LD_EXP 41
72926: PUSH
72927: LD_VAR 0 2
72931: ARRAY
72932: PUSH
72933: LD_INT 1
72935: ARRAY
72936: PUSH
72937: LD_INT 4
72939: ARRAY
72940: PPUSH
72941: CALL 33626 0 5
72945: AND
72946: OR
72947: IFFALSE 73228
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
72949: LD_ADDR_VAR 0 4
72953: PUSH
72954: LD_EXP 36
72958: PUSH
72959: LD_VAR 0 2
72963: ARRAY
72964: PPUSH
72965: LD_INT 25
72967: PUSH
72968: LD_INT 2
72970: PUSH
72971: EMPTY
72972: LIST
72973: LIST
72974: PPUSH
72975: CALL_OW 72
72979: PUSH
72980: LD_EXP 38
72984: PUSH
72985: LD_VAR 0 2
72989: ARRAY
72990: DIFF
72991: ST_TO_ADDR
// if not tmp then
72992: LD_VAR 0 4
72996: NOT
72997: IFFALSE 73001
// continue ;
72999: GO 72246
// for j in tmp do
73001: LD_ADDR_VAR 0 3
73005: PUSH
73006: LD_VAR 0 4
73010: PUSH
73011: FOR_IN
73012: IFFALSE 73224
// begin if not mc_builders [ i ] then
73014: LD_EXP 42
73018: PUSH
73019: LD_VAR 0 2
73023: ARRAY
73024: NOT
73025: IFFALSE 73083
// begin SetTag ( j , 103 ) ;
73027: LD_VAR 0 3
73031: PPUSH
73032: LD_INT 103
73034: PPUSH
73035: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
73039: LD_ADDR_EXP 42
73043: PUSH
73044: LD_EXP 42
73048: PPUSH
73049: LD_VAR 0 2
73053: PUSH
73054: LD_EXP 42
73058: PUSH
73059: LD_VAR 0 2
73063: ARRAY
73064: PUSH
73065: LD_INT 1
73067: PLUS
73068: PUSH
73069: EMPTY
73070: LIST
73071: LIST
73072: PPUSH
73073: LD_VAR 0 3
73077: PPUSH
73078: CALL 26211 0 3
73082: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
73083: LD_VAR 0 3
73087: PPUSH
73088: CALL_OW 310
73092: IFFALSE 73103
// ComExitBuilding ( j ) ;
73094: LD_VAR 0 3
73098: PPUSH
73099: CALL_OW 122
// wait ( 3 ) ;
73103: LD_INT 3
73105: PPUSH
73106: CALL_OW 67
// if not mc_build_list [ i ] then
73110: LD_EXP 41
73114: PUSH
73115: LD_VAR 0 2
73119: ARRAY
73120: NOT
73121: IFFALSE 73125
// break ;
73123: GO 73224
// if not HasTask ( j ) then
73125: LD_VAR 0 3
73129: PPUSH
73130: CALL_OW 314
73134: NOT
73135: IFFALSE 73222
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
73137: LD_VAR 0 3
73141: PPUSH
73142: LD_EXP 41
73146: PUSH
73147: LD_VAR 0 2
73151: ARRAY
73152: PUSH
73153: LD_INT 1
73155: ARRAY
73156: PUSH
73157: LD_INT 1
73159: ARRAY
73160: PPUSH
73161: LD_EXP 41
73165: PUSH
73166: LD_VAR 0 2
73170: ARRAY
73171: PUSH
73172: LD_INT 1
73174: ARRAY
73175: PUSH
73176: LD_INT 2
73178: ARRAY
73179: PPUSH
73180: LD_EXP 41
73184: PUSH
73185: LD_VAR 0 2
73189: ARRAY
73190: PUSH
73191: LD_INT 1
73193: ARRAY
73194: PUSH
73195: LD_INT 3
73197: ARRAY
73198: PPUSH
73199: LD_EXP 41
73203: PUSH
73204: LD_VAR 0 2
73208: ARRAY
73209: PUSH
73210: LD_INT 1
73212: ARRAY
73213: PUSH
73214: LD_INT 4
73216: ARRAY
73217: PPUSH
73218: CALL_OW 145
// end ;
73222: GO 73011
73224: POP
73225: POP
// end else
73226: GO 73370
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
73228: LD_EXP 36
73232: PUSH
73233: LD_VAR 0 2
73237: ARRAY
73238: PPUSH
73239: LD_EXP 41
73243: PUSH
73244: LD_VAR 0 2
73248: ARRAY
73249: PUSH
73250: LD_INT 1
73252: ARRAY
73253: PUSH
73254: LD_INT 1
73256: ARRAY
73257: PPUSH
73258: LD_EXP 41
73262: PUSH
73263: LD_VAR 0 2
73267: ARRAY
73268: PUSH
73269: LD_INT 1
73271: ARRAY
73272: PUSH
73273: LD_INT 2
73275: ARRAY
73276: PPUSH
73277: LD_EXP 41
73281: PUSH
73282: LD_VAR 0 2
73286: ARRAY
73287: PUSH
73288: LD_INT 1
73290: ARRAY
73291: PUSH
73292: LD_INT 3
73294: ARRAY
73295: PPUSH
73296: LD_EXP 41
73300: PUSH
73301: LD_VAR 0 2
73305: ARRAY
73306: PUSH
73307: LD_INT 1
73309: ARRAY
73310: PUSH
73311: LD_INT 4
73313: ARRAY
73314: PPUSH
73315: CALL 32962 0 5
73319: NOT
73320: IFFALSE 73370
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
73322: LD_ADDR_EXP 41
73326: PUSH
73327: LD_EXP 41
73331: PPUSH
73332: LD_VAR 0 2
73336: PPUSH
73337: LD_EXP 41
73341: PUSH
73342: LD_VAR 0 2
73346: ARRAY
73347: PPUSH
73348: LD_INT 1
73350: PPUSH
73351: LD_INT 1
73353: NEG
73354: PPUSH
73355: LD_INT 0
73357: PPUSH
73358: CALL 25629 0 4
73362: PPUSH
73363: CALL_OW 1
73367: ST_TO_ADDR
// continue ;
73368: GO 72246
// end ; end ; end ;
73370: GO 72246
73372: POP
73373: POP
// end ;
73374: LD_VAR 0 1
73378: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
73379: LD_INT 0
73381: PPUSH
73382: PPUSH
73383: PPUSH
73384: PPUSH
73385: PPUSH
73386: PPUSH
// if not mc_bases then
73387: LD_EXP 36
73391: NOT
73392: IFFALSE 73396
// exit ;
73394: GO 73823
// for i = 1 to mc_bases do
73396: LD_ADDR_VAR 0 2
73400: PUSH
73401: DOUBLE
73402: LD_INT 1
73404: DEC
73405: ST_TO_ADDR
73406: LD_EXP 36
73410: PUSH
73411: FOR_TO
73412: IFFALSE 73821
// begin tmp := mc_build_upgrade [ i ] ;
73414: LD_ADDR_VAR 0 4
73418: PUSH
73419: LD_EXP 68
73423: PUSH
73424: LD_VAR 0 2
73428: ARRAY
73429: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
73430: LD_ADDR_VAR 0 6
73434: PUSH
73435: LD_EXP 69
73439: PUSH
73440: LD_VAR 0 2
73444: ARRAY
73445: PPUSH
73446: LD_INT 2
73448: PUSH
73449: LD_INT 30
73451: PUSH
73452: LD_INT 6
73454: PUSH
73455: EMPTY
73456: LIST
73457: LIST
73458: PUSH
73459: LD_INT 30
73461: PUSH
73462: LD_INT 7
73464: PUSH
73465: EMPTY
73466: LIST
73467: LIST
73468: PUSH
73469: EMPTY
73470: LIST
73471: LIST
73472: LIST
73473: PPUSH
73474: CALL_OW 72
73478: ST_TO_ADDR
// if not tmp and not lab then
73479: LD_VAR 0 4
73483: NOT
73484: PUSH
73485: LD_VAR 0 6
73489: NOT
73490: AND
73491: IFFALSE 73495
// continue ;
73493: GO 73411
// if tmp then
73495: LD_VAR 0 4
73499: IFFALSE 73619
// for j in tmp do
73501: LD_ADDR_VAR 0 3
73505: PUSH
73506: LD_VAR 0 4
73510: PUSH
73511: FOR_IN
73512: IFFALSE 73617
// begin if UpgradeCost ( j ) then
73514: LD_VAR 0 3
73518: PPUSH
73519: CALL 32622 0 1
73523: IFFALSE 73615
// begin ComUpgrade ( j ) ;
73525: LD_VAR 0 3
73529: PPUSH
73530: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
73534: LD_ADDR_EXP 68
73538: PUSH
73539: LD_EXP 68
73543: PPUSH
73544: LD_VAR 0 2
73548: PPUSH
73549: LD_EXP 68
73553: PUSH
73554: LD_VAR 0 2
73558: ARRAY
73559: PUSH
73560: LD_VAR 0 3
73564: DIFF
73565: PPUSH
73566: CALL_OW 1
73570: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
73571: LD_ADDR_EXP 43
73575: PUSH
73576: LD_EXP 43
73580: PPUSH
73581: LD_VAR 0 2
73585: PUSH
73586: LD_EXP 43
73590: PUSH
73591: LD_VAR 0 2
73595: ARRAY
73596: PUSH
73597: LD_INT 1
73599: PLUS
73600: PUSH
73601: EMPTY
73602: LIST
73603: LIST
73604: PPUSH
73605: LD_VAR 0 3
73609: PPUSH
73610: CALL 26211 0 3
73614: ST_TO_ADDR
// end ; end ;
73615: GO 73511
73617: POP
73618: POP
// if not lab or not mc_lab_upgrade [ i ] then
73619: LD_VAR 0 6
73623: NOT
73624: PUSH
73625: LD_EXP 70
73629: PUSH
73630: LD_VAR 0 2
73634: ARRAY
73635: NOT
73636: OR
73637: IFFALSE 73641
// continue ;
73639: GO 73411
// for j in lab do
73641: LD_ADDR_VAR 0 3
73645: PUSH
73646: LD_VAR 0 6
73650: PUSH
73651: FOR_IN
73652: IFFALSE 73817
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
73654: LD_VAR 0 3
73658: PPUSH
73659: CALL_OW 266
73663: PUSH
73664: LD_INT 6
73666: PUSH
73667: LD_INT 7
73669: PUSH
73670: EMPTY
73671: LIST
73672: LIST
73673: IN
73674: PUSH
73675: LD_VAR 0 3
73679: PPUSH
73680: CALL_OW 461
73684: PUSH
73685: LD_INT 1
73687: NONEQUAL
73688: AND
73689: IFFALSE 73815
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
73691: LD_VAR 0 3
73695: PPUSH
73696: LD_EXP 70
73700: PUSH
73701: LD_VAR 0 2
73705: ARRAY
73706: PUSH
73707: LD_INT 1
73709: ARRAY
73710: PPUSH
73711: CALL 32827 0 2
73715: IFFALSE 73815
// begin ComCancel ( j ) ;
73717: LD_VAR 0 3
73721: PPUSH
73722: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
73726: LD_VAR 0 3
73730: PPUSH
73731: LD_EXP 70
73735: PUSH
73736: LD_VAR 0 2
73740: ARRAY
73741: PUSH
73742: LD_INT 1
73744: ARRAY
73745: PPUSH
73746: CALL_OW 207
// if not j in mc_construct_list [ i ] then
73750: LD_VAR 0 3
73754: PUSH
73755: LD_EXP 43
73759: PUSH
73760: LD_VAR 0 2
73764: ARRAY
73765: IN
73766: NOT
73767: IFFALSE 73813
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
73769: LD_ADDR_EXP 43
73773: PUSH
73774: LD_EXP 43
73778: PPUSH
73779: LD_VAR 0 2
73783: PUSH
73784: LD_EXP 43
73788: PUSH
73789: LD_VAR 0 2
73793: ARRAY
73794: PUSH
73795: LD_INT 1
73797: PLUS
73798: PUSH
73799: EMPTY
73800: LIST
73801: LIST
73802: PPUSH
73803: LD_VAR 0 3
73807: PPUSH
73808: CALL 26211 0 3
73812: ST_TO_ADDR
// break ;
73813: GO 73817
// end ; end ; end ;
73815: GO 73651
73817: POP
73818: POP
// end ;
73819: GO 73411
73821: POP
73822: POP
// end ;
73823: LD_VAR 0 1
73827: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , tmp2 , t , tw , busy , weapon ; begin
73828: LD_INT 0
73830: PPUSH
73831: PPUSH
73832: PPUSH
73833: PPUSH
73834: PPUSH
73835: PPUSH
73836: PPUSH
73837: PPUSH
73838: PPUSH
// if not mc_bases then
73839: LD_EXP 36
73843: NOT
73844: IFFALSE 73848
// exit ;
73846: GO 74253
// for i = 1 to mc_bases do
73848: LD_ADDR_VAR 0 2
73852: PUSH
73853: DOUBLE
73854: LD_INT 1
73856: DEC
73857: ST_TO_ADDR
73858: LD_EXP 36
73862: PUSH
73863: FOR_TO
73864: IFFALSE 74251
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
73866: LD_EXP 44
73870: PUSH
73871: LD_VAR 0 2
73875: ARRAY
73876: NOT
73877: PUSH
73878: LD_EXP 36
73882: PUSH
73883: LD_VAR 0 2
73887: ARRAY
73888: PPUSH
73889: LD_INT 30
73891: PUSH
73892: LD_INT 3
73894: PUSH
73895: EMPTY
73896: LIST
73897: LIST
73898: PPUSH
73899: CALL_OW 72
73903: NOT
73904: OR
73905: IFFALSE 73909
// continue ;
73907: GO 73863
// busy := false ;
73909: LD_ADDR_VAR 0 8
73913: PUSH
73914: LD_INT 0
73916: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
73917: LD_ADDR_VAR 0 4
73921: PUSH
73922: LD_EXP 36
73926: PUSH
73927: LD_VAR 0 2
73931: ARRAY
73932: PPUSH
73933: LD_INT 30
73935: PUSH
73936: LD_INT 3
73938: PUSH
73939: EMPTY
73940: LIST
73941: LIST
73942: PPUSH
73943: CALL_OW 72
73947: ST_TO_ADDR
// t := UnitFilter ( mc_turret_list [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ;
73948: LD_ADDR_VAR 0 6
73952: PUSH
73953: LD_EXP 44
73957: PUSH
73958: LD_VAR 0 2
73962: ARRAY
73963: PPUSH
73964: LD_INT 2
73966: PUSH
73967: LD_INT 30
73969: PUSH
73970: LD_INT 32
73972: PUSH
73973: EMPTY
73974: LIST
73975: LIST
73976: PUSH
73977: LD_INT 30
73979: PUSH
73980: LD_INT 33
73982: PUSH
73983: EMPTY
73984: LIST
73985: LIST
73986: PUSH
73987: EMPTY
73988: LIST
73989: LIST
73990: LIST
73991: PPUSH
73992: CALL_OW 72
73996: ST_TO_ADDR
// if not t then
73997: LD_VAR 0 6
74001: NOT
74002: IFFALSE 74006
// continue ;
74004: GO 73863
// for j in tmp do
74006: LD_ADDR_VAR 0 3
74010: PUSH
74011: LD_VAR 0 4
74015: PUSH
74016: FOR_IN
74017: IFFALSE 74047
// if not BuildingStatus ( j ) = bs_idle then
74019: LD_VAR 0 3
74023: PPUSH
74024: CALL_OW 461
74028: PUSH
74029: LD_INT 2
74031: EQUAL
74032: NOT
74033: IFFALSE 74045
// begin busy := true ;
74035: LD_ADDR_VAR 0 8
74039: PUSH
74040: LD_INT 1
74042: ST_TO_ADDR
// break ;
74043: GO 74047
// end ;
74045: GO 74016
74047: POP
74048: POP
// if busy then
74049: LD_VAR 0 8
74053: IFFALSE 74057
// continue ;
74055: GO 73863
// tw := UnitFilter ( t , [ f_bweapon , 0 ] ) ;
74057: LD_ADDR_VAR 0 7
74061: PUSH
74062: LD_VAR 0 6
74066: PPUSH
74067: LD_INT 35
74069: PUSH
74070: LD_INT 0
74072: PUSH
74073: EMPTY
74074: LIST
74075: LIST
74076: PPUSH
74077: CALL_OW 72
74081: ST_TO_ADDR
// if tw then
74082: LD_VAR 0 7
74086: IFFALSE 74163
// begin tw := tw [ 1 ] ;
74088: LD_ADDR_VAR 0 7
74092: PUSH
74093: LD_VAR 0 7
74097: PUSH
74098: LD_INT 1
74100: ARRAY
74101: ST_TO_ADDR
// weapon := GetTurretWeapon ( tw , mc_scan_area [ i ] ) ;
74102: LD_ADDR_VAR 0 9
74106: PUSH
74107: LD_VAR 0 7
74111: PPUSH
74112: LD_EXP 61
74116: PUSH
74117: LD_VAR 0 2
74121: ARRAY
74122: PPUSH
74123: CALL 31181 0 2
74127: ST_TO_ADDR
// if mc_allowed_tower_weapons [ i ] then
74128: LD_EXP 75
74132: PUSH
74133: LD_VAR 0 2
74137: ARRAY
74138: IFFALSE 74161
// if not weapon in mc_allowed_tower_weapons [ i ] then
74140: LD_VAR 0 9
74144: PUSH
74145: LD_EXP 75
74149: PUSH
74150: LD_VAR 0 2
74154: ARRAY
74155: IN
74156: NOT
74157: IFFALSE 74161
// continue ;
74159: GO 73863
// end else
74161: GO 74226
// begin tmp2 := UpgradeTurretsWeapon ( mc_turret_list [ i ] , tmp ) ;
74163: LD_ADDR_VAR 0 5
74167: PUSH
74168: LD_EXP 44
74172: PUSH
74173: LD_VAR 0 2
74177: ARRAY
74178: PPUSH
74179: LD_VAR 0 4
74183: PPUSH
74184: CALL 61382 0 2
74188: ST_TO_ADDR
// if not tmp2 then
74189: LD_VAR 0 5
74193: NOT
74194: IFFALSE 74198
// continue ;
74196: GO 73863
// tw := tmp2 [ 1 ] ;
74198: LD_ADDR_VAR 0 7
74202: PUSH
74203: LD_VAR 0 5
74207: PUSH
74208: LD_INT 1
74210: ARRAY
74211: ST_TO_ADDR
// weapon := tmp2 [ 2 ] ;
74212: LD_ADDR_VAR 0 9
74216: PUSH
74217: LD_VAR 0 5
74221: PUSH
74222: LD_INT 2
74224: ARRAY
74225: ST_TO_ADDR
// end ; if not weapon then
74226: LD_VAR 0 9
74230: NOT
74231: IFFALSE 74235
// continue ;
74233: GO 73863
// ComPlaceWeapon ( tw , weapon ) ;
74235: LD_VAR 0 7
74239: PPUSH
74240: LD_VAR 0 9
74244: PPUSH
74245: CALL_OW 148
// end ;
74249: GO 73863
74251: POP
74252: POP
// end ;
74253: LD_VAR 0 1
74257: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
74258: LD_INT 0
74260: PPUSH
74261: PPUSH
74262: PPUSH
74263: PPUSH
74264: PPUSH
74265: PPUSH
// if not mc_bases then
74266: LD_EXP 36
74270: NOT
74271: IFFALSE 74275
// exit ;
74273: GO 75287
// for i = 1 to mc_bases do
74275: LD_ADDR_VAR 0 2
74279: PUSH
74280: DOUBLE
74281: LD_INT 1
74283: DEC
74284: ST_TO_ADDR
74285: LD_EXP 36
74289: PUSH
74290: FOR_TO
74291: IFFALSE 75285
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] then
74293: LD_EXP 49
74297: PUSH
74298: LD_VAR 0 2
74302: ARRAY
74303: NOT
74304: PUSH
74305: LD_EXP 49
74309: PUSH
74310: LD_VAR 0 2
74314: ARRAY
74315: PUSH
74316: LD_EXP 50
74320: PUSH
74321: LD_VAR 0 2
74325: ARRAY
74326: EQUAL
74327: OR
74328: IFFALSE 74332
// continue ;
74330: GO 74290
// if mc_miners [ i ] then
74332: LD_EXP 50
74336: PUSH
74337: LD_VAR 0 2
74341: ARRAY
74342: IFFALSE 74972
// begin k := 1 ;
74344: LD_ADDR_VAR 0 4
74348: PUSH
74349: LD_INT 1
74351: ST_TO_ADDR
// for j = mc_miners [ i ] downto 1 do
74352: LD_ADDR_VAR 0 3
74356: PUSH
74357: DOUBLE
74358: LD_EXP 50
74362: PUSH
74363: LD_VAR 0 2
74367: ARRAY
74368: INC
74369: ST_TO_ADDR
74370: LD_INT 1
74372: PUSH
74373: FOR_DOWNTO
74374: IFFALSE 74970
// begin if IsDead ( mc_miners [ i ] [ j ] ) or GetClass ( mc_miners [ i ] [ j ] ) <> 1 then
74376: LD_EXP 50
74380: PUSH
74381: LD_VAR 0 2
74385: ARRAY
74386: PUSH
74387: LD_VAR 0 3
74391: ARRAY
74392: PPUSH
74393: CALL_OW 301
74397: PUSH
74398: LD_EXP 50
74402: PUSH
74403: LD_VAR 0 2
74407: ARRAY
74408: PUSH
74409: LD_VAR 0 3
74413: ARRAY
74414: PPUSH
74415: CALL_OW 257
74419: PUSH
74420: LD_INT 1
74422: NONEQUAL
74423: OR
74424: IFFALSE 74487
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
74426: LD_ADDR_VAR 0 5
74430: PUSH
74431: LD_EXP 50
74435: PUSH
74436: LD_VAR 0 2
74440: ARRAY
74441: PUSH
74442: LD_EXP 50
74446: PUSH
74447: LD_VAR 0 2
74451: ARRAY
74452: PUSH
74453: LD_VAR 0 3
74457: ARRAY
74458: DIFF
74459: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
74460: LD_ADDR_EXP 50
74464: PUSH
74465: LD_EXP 50
74469: PPUSH
74470: LD_VAR 0 2
74474: PPUSH
74475: LD_VAR 0 5
74479: PPUSH
74480: CALL_OW 1
74484: ST_TO_ADDR
// continue ;
74485: GO 74373
// end ; if WantPlant ( mc_miners [ i ] [ j ] ) and ( DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] or DangerAtRange ( mc_miners [ i ] [ j ] , 10 ) [ 4 ] ) then
74487: LD_EXP 50
74491: PUSH
74492: LD_VAR 0 2
74496: ARRAY
74497: PUSH
74498: LD_VAR 0 3
74502: ARRAY
74503: PPUSH
74504: CALL 26147 0 1
74508: PUSH
74509: LD_EXP 50
74513: PUSH
74514: LD_VAR 0 2
74518: ARRAY
74519: PUSH
74520: LD_VAR 0 3
74524: ARRAY
74525: PPUSH
74526: CALL_OW 255
74530: PPUSH
74531: LD_EXP 49
74535: PUSH
74536: LD_VAR 0 2
74540: ARRAY
74541: PUSH
74542: LD_VAR 0 4
74546: ARRAY
74547: PUSH
74548: LD_INT 1
74550: ARRAY
74551: PPUSH
74552: LD_EXP 49
74556: PUSH
74557: LD_VAR 0 2
74561: ARRAY
74562: PUSH
74563: LD_VAR 0 4
74567: ARRAY
74568: PUSH
74569: LD_INT 2
74571: ARRAY
74572: PPUSH
74573: LD_INT 15
74575: PPUSH
74576: CALL 27107 0 4
74580: PUSH
74581: LD_INT 4
74583: ARRAY
74584: PUSH
74585: LD_EXP 50
74589: PUSH
74590: LD_VAR 0 2
74594: ARRAY
74595: PUSH
74596: LD_VAR 0 3
74600: ARRAY
74601: PPUSH
74602: LD_INT 10
74604: PPUSH
74605: CALL 28804 0 2
74609: PUSH
74610: LD_INT 4
74612: ARRAY
74613: OR
74614: AND
74615: IFFALSE 74638
// ComStop ( mc_miners [ i ] [ j ] ) ;
74617: LD_EXP 50
74621: PUSH
74622: LD_VAR 0 2
74626: ARRAY
74627: PUSH
74628: LD_VAR 0 3
74632: ARRAY
74633: PPUSH
74634: CALL_OW 141
// if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] = 0 and not HasTask ( mc_miners [ i ] [ j ] ) then
74638: LD_EXP 50
74642: PUSH
74643: LD_VAR 0 2
74647: ARRAY
74648: PUSH
74649: LD_VAR 0 3
74653: ARRAY
74654: PPUSH
74655: CALL_OW 257
74659: PUSH
74660: LD_INT 1
74662: EQUAL
74663: PUSH
74664: LD_EXP 50
74668: PUSH
74669: LD_VAR 0 2
74673: ARRAY
74674: PUSH
74675: LD_VAR 0 3
74679: ARRAY
74680: PPUSH
74681: CALL_OW 459
74685: NOT
74686: AND
74687: PUSH
74688: LD_EXP 50
74692: PUSH
74693: LD_VAR 0 2
74697: ARRAY
74698: PUSH
74699: LD_VAR 0 3
74703: ARRAY
74704: PPUSH
74705: CALL_OW 255
74709: PPUSH
74710: LD_EXP 49
74714: PUSH
74715: LD_VAR 0 2
74719: ARRAY
74720: PUSH
74721: LD_VAR 0 4
74725: ARRAY
74726: PUSH
74727: LD_INT 1
74729: ARRAY
74730: PPUSH
74731: LD_EXP 49
74735: PUSH
74736: LD_VAR 0 2
74740: ARRAY
74741: PUSH
74742: LD_VAR 0 4
74746: ARRAY
74747: PUSH
74748: LD_INT 2
74750: ARRAY
74751: PPUSH
74752: LD_INT 15
74754: PPUSH
74755: CALL 27107 0 4
74759: PUSH
74760: LD_INT 4
74762: ARRAY
74763: PUSH
74764: LD_INT 0
74766: EQUAL
74767: AND
74768: PUSH
74769: LD_EXP 50
74773: PUSH
74774: LD_VAR 0 2
74778: ARRAY
74779: PUSH
74780: LD_VAR 0 3
74784: ARRAY
74785: PPUSH
74786: CALL_OW 314
74790: NOT
74791: AND
74792: IFFALSE 74968
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
74794: LD_EXP 50
74798: PUSH
74799: LD_VAR 0 2
74803: ARRAY
74804: PUSH
74805: LD_VAR 0 3
74809: ARRAY
74810: PPUSH
74811: CALL_OW 310
74815: IFFALSE 74838
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
74817: LD_EXP 50
74821: PUSH
74822: LD_VAR 0 2
74826: ARRAY
74827: PUSH
74828: LD_VAR 0 3
74832: ARRAY
74833: PPUSH
74834: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
74838: LD_EXP 50
74842: PUSH
74843: LD_VAR 0 2
74847: ARRAY
74848: PUSH
74849: LD_VAR 0 3
74853: ARRAY
74854: PPUSH
74855: CALL_OW 314
74859: NOT
74860: IFFALSE 74928
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 0 ) ;
74862: LD_EXP 50
74866: PUSH
74867: LD_VAR 0 2
74871: ARRAY
74872: PUSH
74873: LD_VAR 0 3
74877: ARRAY
74878: PPUSH
74879: LD_EXP 49
74883: PUSH
74884: LD_VAR 0 2
74888: ARRAY
74889: PUSH
74890: LD_VAR 0 4
74894: ARRAY
74895: PUSH
74896: LD_INT 1
74898: ARRAY
74899: PPUSH
74900: LD_EXP 49
74904: PUSH
74905: LD_VAR 0 2
74909: ARRAY
74910: PUSH
74911: LD_VAR 0 4
74915: ARRAY
74916: PUSH
74917: LD_INT 2
74919: ARRAY
74920: PPUSH
74921: LD_INT 0
74923: PPUSH
74924: CALL_OW 193
// k := k + 1 ;
74928: LD_ADDR_VAR 0 4
74932: PUSH
74933: LD_VAR 0 4
74937: PUSH
74938: LD_INT 1
74940: PLUS
74941: ST_TO_ADDR
// if k > mc_mines [ i ] then
74942: LD_VAR 0 4
74946: PUSH
74947: LD_EXP 49
74951: PUSH
74952: LD_VAR 0 2
74956: ARRAY
74957: GREATER
74958: IFFALSE 74968
// k := 1 ;
74960: LD_ADDR_VAR 0 4
74964: PUSH
74965: LD_INT 1
74967: ST_TO_ADDR
// end ; end ;
74968: GO 74373
74970: POP
74971: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
74972: LD_ADDR_VAR 0 5
74976: PUSH
74977: LD_EXP 36
74981: PUSH
74982: LD_VAR 0 2
74986: ARRAY
74987: PPUSH
74988: LD_INT 2
74990: PUSH
74991: LD_INT 30
74993: PUSH
74994: LD_INT 4
74996: PUSH
74997: EMPTY
74998: LIST
74999: LIST
75000: PUSH
75001: LD_INT 30
75003: PUSH
75004: LD_INT 5
75006: PUSH
75007: EMPTY
75008: LIST
75009: LIST
75010: PUSH
75011: LD_INT 30
75013: PUSH
75014: LD_INT 32
75016: PUSH
75017: EMPTY
75018: LIST
75019: LIST
75020: PUSH
75021: EMPTY
75022: LIST
75023: LIST
75024: LIST
75025: LIST
75026: PPUSH
75027: CALL_OW 72
75031: ST_TO_ADDR
// if not tmp then
75032: LD_VAR 0 5
75036: NOT
75037: IFFALSE 75041
// continue ;
75039: GO 74290
// list := [ ] ;
75041: LD_ADDR_VAR 0 6
75045: PUSH
75046: EMPTY
75047: ST_TO_ADDR
// for j in tmp do
75048: LD_ADDR_VAR 0 3
75052: PUSH
75053: LD_VAR 0 5
75057: PUSH
75058: FOR_IN
75059: IFFALSE 75128
// begin for k in UnitsInside ( j ) do
75061: LD_ADDR_VAR 0 4
75065: PUSH
75066: LD_VAR 0 3
75070: PPUSH
75071: CALL_OW 313
75075: PUSH
75076: FOR_IN
75077: IFFALSE 75124
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
75079: LD_VAR 0 4
75083: PPUSH
75084: CALL_OW 257
75088: PUSH
75089: LD_INT 1
75091: EQUAL
75092: PUSH
75093: LD_VAR 0 4
75097: PPUSH
75098: CALL_OW 459
75102: NOT
75103: AND
75104: IFFALSE 75122
// list := list ^ k ;
75106: LD_ADDR_VAR 0 6
75110: PUSH
75111: LD_VAR 0 6
75115: PUSH
75116: LD_VAR 0 4
75120: ADD
75121: ST_TO_ADDR
75122: GO 75076
75124: POP
75125: POP
// end ;
75126: GO 75058
75128: POP
75129: POP
// list := list diff mc_miners [ i ] ;
75130: LD_ADDR_VAR 0 6
75134: PUSH
75135: LD_VAR 0 6
75139: PUSH
75140: LD_EXP 50
75144: PUSH
75145: LD_VAR 0 2
75149: ARRAY
75150: DIFF
75151: ST_TO_ADDR
// if not list then
75152: LD_VAR 0 6
75156: NOT
75157: IFFALSE 75161
// continue ;
75159: GO 74290
// k := mc_mines [ i ] - mc_miners [ i ] ;
75161: LD_ADDR_VAR 0 4
75165: PUSH
75166: LD_EXP 49
75170: PUSH
75171: LD_VAR 0 2
75175: ARRAY
75176: PUSH
75177: LD_EXP 50
75181: PUSH
75182: LD_VAR 0 2
75186: ARRAY
75187: MINUS
75188: ST_TO_ADDR
// if k > list then
75189: LD_VAR 0 4
75193: PUSH
75194: LD_VAR 0 6
75198: GREATER
75199: IFFALSE 75211
// k := list ;
75201: LD_ADDR_VAR 0 4
75205: PUSH
75206: LD_VAR 0 6
75210: ST_TO_ADDR
// for j = 1 to k do
75211: LD_ADDR_VAR 0 3
75215: PUSH
75216: DOUBLE
75217: LD_INT 1
75219: DEC
75220: ST_TO_ADDR
75221: LD_VAR 0 4
75225: PUSH
75226: FOR_TO
75227: IFFALSE 75281
// mc_miners := ReplaceIn ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
75229: LD_ADDR_EXP 50
75233: PUSH
75234: LD_EXP 50
75238: PPUSH
75239: LD_VAR 0 2
75243: PUSH
75244: LD_EXP 50
75248: PUSH
75249: LD_VAR 0 2
75253: ARRAY
75254: PUSH
75255: LD_INT 1
75257: PLUS
75258: PUSH
75259: EMPTY
75260: LIST
75261: LIST
75262: PPUSH
75263: LD_VAR 0 6
75267: PUSH
75268: LD_VAR 0 3
75272: ARRAY
75273: PPUSH
75274: CALL 26211 0 3
75278: ST_TO_ADDR
75279: GO 75226
75281: POP
75282: POP
// end ;
75283: GO 74290
75285: POP
75286: POP
// end ;
75287: LD_VAR 0 1
75291: RET
// export function MC_CollectCrates ( ) ; var i , j , k , tmp , target , cargo , depot , fac , components ; begin
75292: LD_INT 0
75294: PPUSH
75295: PPUSH
75296: PPUSH
75297: PPUSH
75298: PPUSH
75299: PPUSH
75300: PPUSH
75301: PPUSH
75302: PPUSH
75303: PPUSH
// if not mc_bases then
75304: LD_EXP 36
75308: NOT
75309: IFFALSE 75313
// exit ;
75311: GO 77063
// for i = 1 to mc_bases do
75313: LD_ADDR_VAR 0 2
75317: PUSH
75318: DOUBLE
75319: LD_INT 1
75321: DEC
75322: ST_TO_ADDR
75323: LD_EXP 36
75327: PUSH
75328: FOR_TO
75329: IFFALSE 77061
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
75331: LD_EXP 36
75335: PUSH
75336: LD_VAR 0 2
75340: ARRAY
75341: NOT
75342: PUSH
75343: LD_EXP 43
75347: PUSH
75348: LD_VAR 0 2
75352: ARRAY
75353: OR
75354: IFFALSE 75358
// continue ;
75356: GO 75328
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
75358: LD_EXP 52
75362: PUSH
75363: LD_VAR 0 2
75367: ARRAY
75368: NOT
75369: PUSH
75370: LD_EXP 53
75374: PUSH
75375: LD_VAR 0 2
75379: ARRAY
75380: AND
75381: IFFALSE 75419
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
75383: LD_ADDR_EXP 53
75387: PUSH
75388: LD_EXP 53
75392: PPUSH
75393: LD_VAR 0 2
75397: PPUSH
75398: EMPTY
75399: PPUSH
75400: CALL_OW 1
75404: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
75405: LD_VAR 0 2
75409: PPUSH
75410: LD_INT 107
75412: PPUSH
75413: CALL 66173 0 2
// continue ;
75417: GO 75328
// end ; target := [ ] ;
75419: LD_ADDR_VAR 0 6
75423: PUSH
75424: EMPTY
75425: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
75426: LD_ADDR_VAR 0 3
75430: PUSH
75431: DOUBLE
75432: LD_EXP 52
75436: PUSH
75437: LD_VAR 0 2
75441: ARRAY
75442: INC
75443: ST_TO_ADDR
75444: LD_INT 1
75446: PUSH
75447: FOR_DOWNTO
75448: IFFALSE 75708
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
75450: LD_EXP 52
75454: PUSH
75455: LD_VAR 0 2
75459: ARRAY
75460: PUSH
75461: LD_VAR 0 3
75465: ARRAY
75466: PUSH
75467: LD_INT 2
75469: ARRAY
75470: PPUSH
75471: LD_EXP 52
75475: PUSH
75476: LD_VAR 0 2
75480: ARRAY
75481: PUSH
75482: LD_VAR 0 3
75486: ARRAY
75487: PUSH
75488: LD_INT 3
75490: ARRAY
75491: PPUSH
75492: CALL_OW 488
75496: PUSH
75497: LD_EXP 52
75501: PUSH
75502: LD_VAR 0 2
75506: ARRAY
75507: PUSH
75508: LD_VAR 0 3
75512: ARRAY
75513: PUSH
75514: LD_INT 2
75516: ARRAY
75517: PPUSH
75518: LD_EXP 52
75522: PUSH
75523: LD_VAR 0 2
75527: ARRAY
75528: PUSH
75529: LD_VAR 0 3
75533: ARRAY
75534: PUSH
75535: LD_INT 3
75537: ARRAY
75538: PPUSH
75539: CALL_OW 284
75543: PUSH
75544: LD_INT 0
75546: EQUAL
75547: AND
75548: IFFALSE 75603
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
75550: LD_ADDR_VAR 0 5
75554: PUSH
75555: LD_EXP 52
75559: PUSH
75560: LD_VAR 0 2
75564: ARRAY
75565: PPUSH
75566: LD_VAR 0 3
75570: PPUSH
75571: CALL_OW 3
75575: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
75576: LD_ADDR_EXP 52
75580: PUSH
75581: LD_EXP 52
75585: PPUSH
75586: LD_VAR 0 2
75590: PPUSH
75591: LD_VAR 0 5
75595: PPUSH
75596: CALL_OW 1
75600: ST_TO_ADDR
// continue ;
75601: GO 75447
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 30 ) [ 4 ] = 0 then
75603: LD_EXP 36
75607: PUSH
75608: LD_VAR 0 2
75612: ARRAY
75613: PUSH
75614: LD_INT 1
75616: ARRAY
75617: PPUSH
75618: CALL_OW 255
75622: PPUSH
75623: LD_EXP 52
75627: PUSH
75628: LD_VAR 0 2
75632: ARRAY
75633: PUSH
75634: LD_VAR 0 3
75638: ARRAY
75639: PUSH
75640: LD_INT 2
75642: ARRAY
75643: PPUSH
75644: LD_EXP 52
75648: PUSH
75649: LD_VAR 0 2
75653: ARRAY
75654: PUSH
75655: LD_VAR 0 3
75659: ARRAY
75660: PUSH
75661: LD_INT 3
75663: ARRAY
75664: PPUSH
75665: LD_INT 30
75667: PPUSH
75668: CALL 27107 0 4
75672: PUSH
75673: LD_INT 4
75675: ARRAY
75676: PUSH
75677: LD_INT 0
75679: EQUAL
75680: IFFALSE 75706
// begin target := mc_crates [ i ] [ j ] ;
75682: LD_ADDR_VAR 0 6
75686: PUSH
75687: LD_EXP 52
75691: PUSH
75692: LD_VAR 0 2
75696: ARRAY
75697: PUSH
75698: LD_VAR 0 3
75702: ARRAY
75703: ST_TO_ADDR
// break ;
75704: GO 75708
// end ; end ;
75706: GO 75447
75708: POP
75709: POP
// if not target then
75710: LD_VAR 0 6
75714: NOT
75715: IFFALSE 75719
// continue ;
75717: GO 75328
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
75719: LD_ADDR_VAR 0 7
75723: PUSH
75724: LD_EXP 55
75728: PUSH
75729: LD_VAR 0 2
75733: ARRAY
75734: PPUSH
75735: LD_INT 2
75737: PUSH
75738: LD_INT 3
75740: PUSH
75741: LD_INT 58
75743: PUSH
75744: EMPTY
75745: LIST
75746: PUSH
75747: EMPTY
75748: LIST
75749: LIST
75750: PUSH
75751: LD_INT 61
75753: PUSH
75754: EMPTY
75755: LIST
75756: PUSH
75757: LD_INT 33
75759: PUSH
75760: LD_INT 5
75762: PUSH
75763: EMPTY
75764: LIST
75765: LIST
75766: PUSH
75767: LD_INT 33
75769: PUSH
75770: LD_INT 3
75772: PUSH
75773: EMPTY
75774: LIST
75775: LIST
75776: PUSH
75777: EMPTY
75778: LIST
75779: LIST
75780: LIST
75781: LIST
75782: LIST
75783: PUSH
75784: LD_INT 2
75786: PUSH
75787: LD_INT 34
75789: PUSH
75790: LD_INT 32
75792: PUSH
75793: EMPTY
75794: LIST
75795: LIST
75796: PUSH
75797: LD_INT 34
75799: PUSH
75800: LD_INT 51
75802: PUSH
75803: EMPTY
75804: LIST
75805: LIST
75806: PUSH
75807: LD_INT 34
75809: PUSH
75810: LD_INT 12
75812: PUSH
75813: EMPTY
75814: LIST
75815: LIST
75816: PUSH
75817: EMPTY
75818: LIST
75819: LIST
75820: LIST
75821: LIST
75822: PUSH
75823: EMPTY
75824: LIST
75825: LIST
75826: PPUSH
75827: CALL_OW 72
75831: ST_TO_ADDR
// if not cargo then
75832: LD_VAR 0 7
75836: NOT
75837: IFFALSE 76480
// begin if mc_crates_collector [ i ] < 5 then
75839: LD_EXP 53
75843: PUSH
75844: LD_VAR 0 2
75848: ARRAY
75849: PUSH
75850: LD_INT 5
75852: LESS
75853: IFFALSE 76219
// begin if mc_ape [ i ] then
75855: LD_EXP 65
75859: PUSH
75860: LD_VAR 0 2
75864: ARRAY
75865: IFFALSE 75912
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
75867: LD_ADDR_VAR 0 5
75871: PUSH
75872: LD_EXP 65
75876: PUSH
75877: LD_VAR 0 2
75881: ARRAY
75882: PPUSH
75883: LD_INT 25
75885: PUSH
75886: LD_INT 16
75888: PUSH
75889: EMPTY
75890: LIST
75891: LIST
75892: PUSH
75893: LD_INT 24
75895: PUSH
75896: LD_INT 750
75898: PUSH
75899: EMPTY
75900: LIST
75901: LIST
75902: PUSH
75903: EMPTY
75904: LIST
75905: LIST
75906: PPUSH
75907: CALL_OW 72
75911: ST_TO_ADDR
// if not tmp then
75912: LD_VAR 0 5
75916: NOT
75917: IFFALSE 75964
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
75919: LD_ADDR_VAR 0 5
75923: PUSH
75924: LD_EXP 36
75928: PUSH
75929: LD_VAR 0 2
75933: ARRAY
75934: PPUSH
75935: LD_INT 25
75937: PUSH
75938: LD_INT 2
75940: PUSH
75941: EMPTY
75942: LIST
75943: LIST
75944: PUSH
75945: LD_INT 24
75947: PUSH
75948: LD_INT 750
75950: PUSH
75951: EMPTY
75952: LIST
75953: LIST
75954: PUSH
75955: EMPTY
75956: LIST
75957: LIST
75958: PPUSH
75959: CALL_OW 72
75963: ST_TO_ADDR
// if mc_ape [ i ] and UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) and tmp < 5 then
75964: LD_EXP 65
75968: PUSH
75969: LD_VAR 0 2
75973: ARRAY
75974: PUSH
75975: LD_EXP 36
75979: PUSH
75980: LD_VAR 0 2
75984: ARRAY
75985: PPUSH
75986: LD_INT 25
75988: PUSH
75989: LD_INT 2
75991: PUSH
75992: EMPTY
75993: LIST
75994: LIST
75995: PUSH
75996: LD_INT 24
75998: PUSH
75999: LD_INT 750
76001: PUSH
76002: EMPTY
76003: LIST
76004: LIST
76005: PUSH
76006: EMPTY
76007: LIST
76008: LIST
76009: PPUSH
76010: CALL_OW 72
76014: AND
76015: PUSH
76016: LD_VAR 0 5
76020: PUSH
76021: LD_INT 5
76023: LESS
76024: AND
76025: IFFALSE 76107
// begin for j in UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) do
76027: LD_ADDR_VAR 0 3
76031: PUSH
76032: LD_EXP 36
76036: PUSH
76037: LD_VAR 0 2
76041: ARRAY
76042: PPUSH
76043: LD_INT 25
76045: PUSH
76046: LD_INT 2
76048: PUSH
76049: EMPTY
76050: LIST
76051: LIST
76052: PUSH
76053: LD_INT 24
76055: PUSH
76056: LD_INT 750
76058: PUSH
76059: EMPTY
76060: LIST
76061: LIST
76062: PUSH
76063: EMPTY
76064: LIST
76065: LIST
76066: PPUSH
76067: CALL_OW 72
76071: PUSH
76072: FOR_IN
76073: IFFALSE 76105
// begin tmp := tmp union j ;
76075: LD_ADDR_VAR 0 5
76079: PUSH
76080: LD_VAR 0 5
76084: PUSH
76085: LD_VAR 0 3
76089: UNION
76090: ST_TO_ADDR
// if tmp >= 5 then
76091: LD_VAR 0 5
76095: PUSH
76096: LD_INT 5
76098: GREATEREQUAL
76099: IFFALSE 76103
// break ;
76101: GO 76105
// end ;
76103: GO 76072
76105: POP
76106: POP
// end ; if not tmp then
76107: LD_VAR 0 5
76111: NOT
76112: IFFALSE 76116
// continue ;
76114: GO 75328
// for j in tmp do
76116: LD_ADDR_VAR 0 3
76120: PUSH
76121: LD_VAR 0 5
76125: PUSH
76126: FOR_IN
76127: IFFALSE 76217
// if not GetTag ( j ) then
76129: LD_VAR 0 3
76133: PPUSH
76134: CALL_OW 110
76138: NOT
76139: IFFALSE 76215
// begin mc_crates_collector := ReplaceIn ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
76141: LD_ADDR_EXP 53
76145: PUSH
76146: LD_EXP 53
76150: PPUSH
76151: LD_VAR 0 2
76155: PUSH
76156: LD_EXP 53
76160: PUSH
76161: LD_VAR 0 2
76165: ARRAY
76166: PUSH
76167: LD_INT 1
76169: PLUS
76170: PUSH
76171: EMPTY
76172: LIST
76173: LIST
76174: PPUSH
76175: LD_VAR 0 3
76179: PPUSH
76180: CALL 26211 0 3
76184: ST_TO_ADDR
// SetTag ( j , 107 ) ;
76185: LD_VAR 0 3
76189: PPUSH
76190: LD_INT 107
76192: PPUSH
76193: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
76197: LD_EXP 53
76201: PUSH
76202: LD_VAR 0 2
76206: ARRAY
76207: PUSH
76208: LD_INT 5
76210: GREATEREQUAL
76211: IFFALSE 76215
// break ;
76213: GO 76217
// end ;
76215: GO 76126
76217: POP
76218: POP
// end ; if mc_crates_collector [ i ] and target then
76219: LD_EXP 53
76223: PUSH
76224: LD_VAR 0 2
76228: ARRAY
76229: PUSH
76230: LD_VAR 0 6
76234: AND
76235: IFFALSE 76478
// begin if mc_crates_collector [ i ] < target [ 1 ] then
76237: LD_EXP 53
76241: PUSH
76242: LD_VAR 0 2
76246: ARRAY
76247: PUSH
76248: LD_VAR 0 6
76252: PUSH
76253: LD_INT 1
76255: ARRAY
76256: LESS
76257: IFFALSE 76277
// tmp := mc_crates_collector [ i ] else
76259: LD_ADDR_VAR 0 5
76263: PUSH
76264: LD_EXP 53
76268: PUSH
76269: LD_VAR 0 2
76273: ARRAY
76274: ST_TO_ADDR
76275: GO 76291
// tmp := target [ 1 ] ;
76277: LD_ADDR_VAR 0 5
76281: PUSH
76282: LD_VAR 0 6
76286: PUSH
76287: LD_INT 1
76289: ARRAY
76290: ST_TO_ADDR
// k := 0 ;
76291: LD_ADDR_VAR 0 4
76295: PUSH
76296: LD_INT 0
76298: ST_TO_ADDR
// for j in mc_crates_collector [ i ] do
76299: LD_ADDR_VAR 0 3
76303: PUSH
76304: LD_EXP 53
76308: PUSH
76309: LD_VAR 0 2
76313: ARRAY
76314: PUSH
76315: FOR_IN
76316: IFFALSE 76476
// begin k := k + 1 ;
76318: LD_ADDR_VAR 0 4
76322: PUSH
76323: LD_VAR 0 4
76327: PUSH
76328: LD_INT 1
76330: PLUS
76331: ST_TO_ADDR
// if k > tmp then
76332: LD_VAR 0 4
76336: PUSH
76337: LD_VAR 0 5
76341: GREATER
76342: IFFALSE 76346
// break ;
76344: GO 76476
// if not GetClass ( j ) in [ 2 , 16 ] then
76346: LD_VAR 0 3
76350: PPUSH
76351: CALL_OW 257
76355: PUSH
76356: LD_INT 2
76358: PUSH
76359: LD_INT 16
76361: PUSH
76362: EMPTY
76363: LIST
76364: LIST
76365: IN
76366: NOT
76367: IFFALSE 76420
// begin mc_crates_collector := Replace ( mc_crates_collector , i , mc_crates_collector [ i ] diff j ) ;
76369: LD_ADDR_EXP 53
76373: PUSH
76374: LD_EXP 53
76378: PPUSH
76379: LD_VAR 0 2
76383: PPUSH
76384: LD_EXP 53
76388: PUSH
76389: LD_VAR 0 2
76393: ARRAY
76394: PUSH
76395: LD_VAR 0 3
76399: DIFF
76400: PPUSH
76401: CALL_OW 1
76405: ST_TO_ADDR
// SetTag ( j , 0 ) ;
76406: LD_VAR 0 3
76410: PPUSH
76411: LD_INT 0
76413: PPUSH
76414: CALL_OW 109
// continue ;
76418: GO 76315
// end ; if IsInUnit ( j ) then
76420: LD_VAR 0 3
76424: PPUSH
76425: CALL_OW 310
76429: IFFALSE 76440
// ComExitBuilding ( j ) ;
76431: LD_VAR 0 3
76435: PPUSH
76436: CALL_OW 122
// wait ( 3 ) ;
76440: LD_INT 3
76442: PPUSH
76443: CALL_OW 67
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
76447: LD_VAR 0 3
76451: PPUSH
76452: LD_VAR 0 6
76456: PUSH
76457: LD_INT 2
76459: ARRAY
76460: PPUSH
76461: LD_VAR 0 6
76465: PUSH
76466: LD_INT 3
76468: ARRAY
76469: PPUSH
76470: CALL_OW 117
// end ;
76474: GO 76315
76476: POP
76477: POP
// end ; end else
76478: GO 77059
// begin for j in cargo do
76480: LD_ADDR_VAR 0 3
76484: PUSH
76485: LD_VAR 0 7
76489: PUSH
76490: FOR_IN
76491: IFFALSE 77057
// begin if GetTag ( j ) <> 0 then
76493: LD_VAR 0 3
76497: PPUSH
76498: CALL_OW 110
76502: PUSH
76503: LD_INT 0
76505: NONEQUAL
76506: IFFALSE 76510
// continue ;
76508: GO 76490
// if GetLives ( j ) < 1000 and not IsInArea ( j , mc_parking [ i ] ) then
76510: LD_VAR 0 3
76514: PPUSH
76515: CALL_OW 256
76519: PUSH
76520: LD_INT 1000
76522: LESS
76523: PUSH
76524: LD_VAR 0 3
76528: PPUSH
76529: LD_EXP 60
76533: PUSH
76534: LD_VAR 0 2
76538: ARRAY
76539: PPUSH
76540: CALL_OW 308
76544: NOT
76545: AND
76546: IFFALSE 76568
// ComMoveToArea ( j , mc_parking [ i ] ) ;
76548: LD_VAR 0 3
76552: PPUSH
76553: LD_EXP 60
76557: PUSH
76558: LD_VAR 0 2
76562: ARRAY
76563: PPUSH
76564: CALL_OW 113
// if GetLives ( j ) < 1000 and IsInArea ( j , mc_parking [ i ] ) then
76568: LD_VAR 0 3
76572: PPUSH
76573: CALL_OW 256
76577: PUSH
76578: LD_INT 1000
76580: LESS
76581: PUSH
76582: LD_VAR 0 3
76586: PPUSH
76587: LD_EXP 60
76591: PUSH
76592: LD_VAR 0 2
76596: ARRAY
76597: PPUSH
76598: CALL_OW 308
76602: AND
76603: IFFALSE 76607
// continue ;
76605: GO 76490
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
76607: LD_VAR 0 3
76611: PPUSH
76612: CALL_OW 262
76616: PUSH
76617: LD_INT 2
76619: EQUAL
76620: PUSH
76621: LD_VAR 0 3
76625: PPUSH
76626: CALL_OW 261
76630: PUSH
76631: LD_INT 15
76633: LESS
76634: AND
76635: IFFALSE 76639
// continue ;
76637: GO 76490
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
76639: LD_VAR 0 3
76643: PPUSH
76644: CALL_OW 262
76648: PUSH
76649: LD_INT 1
76651: EQUAL
76652: PUSH
76653: LD_VAR 0 3
76657: PPUSH
76658: CALL_OW 261
76662: PUSH
76663: LD_INT 10
76665: LESS
76666: AND
76667: IFFALSE 76996
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
76669: LD_ADDR_VAR 0 8
76673: PUSH
76674: LD_EXP 36
76678: PUSH
76679: LD_VAR 0 2
76683: ARRAY
76684: PPUSH
76685: LD_INT 2
76687: PUSH
76688: LD_INT 30
76690: PUSH
76691: LD_INT 0
76693: PUSH
76694: EMPTY
76695: LIST
76696: LIST
76697: PUSH
76698: LD_INT 30
76700: PUSH
76701: LD_INT 1
76703: PUSH
76704: EMPTY
76705: LIST
76706: LIST
76707: PUSH
76708: EMPTY
76709: LIST
76710: LIST
76711: LIST
76712: PPUSH
76713: CALL_OW 72
76717: ST_TO_ADDR
// if not depot then
76718: LD_VAR 0 8
76722: NOT
76723: IFFALSE 76727
// continue ;
76725: GO 76490
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
76727: LD_VAR 0 3
76731: PPUSH
76732: LD_VAR 0 8
76736: PPUSH
76737: LD_VAR 0 3
76741: PPUSH
76742: CALL_OW 74
76746: PPUSH
76747: CALL_OW 296
76751: PUSH
76752: LD_INT 6
76754: LESS
76755: IFFALSE 76771
// SetFuel ( j , 100 ) else
76757: LD_VAR 0 3
76761: PPUSH
76762: LD_INT 100
76764: PPUSH
76765: CALL_OW 240
76769: GO 76996
// if GetFuel ( j ) = 0 then
76771: LD_VAR 0 3
76775: PPUSH
76776: CALL_OW 261
76780: PUSH
76781: LD_INT 0
76783: EQUAL
76784: IFFALSE 76996
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
76786: LD_ADDR_EXP 55
76790: PUSH
76791: LD_EXP 55
76795: PPUSH
76796: LD_VAR 0 2
76800: PPUSH
76801: LD_EXP 55
76805: PUSH
76806: LD_VAR 0 2
76810: ARRAY
76811: PUSH
76812: LD_VAR 0 3
76816: DIFF
76817: PPUSH
76818: CALL_OW 1
76822: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
76823: LD_VAR 0 3
76827: PPUSH
76828: CALL_OW 263
76832: PUSH
76833: LD_INT 1
76835: EQUAL
76836: IFFALSE 76852
// ComExitVehicle ( IsInUnit ( j ) ) ;
76838: LD_VAR 0 3
76842: PPUSH
76843: CALL_OW 310
76847: PPUSH
76848: CALL_OW 121
// if GetControl ( j ) = control_remote then
76852: LD_VAR 0 3
76856: PPUSH
76857: CALL_OW 263
76861: PUSH
76862: LD_INT 2
76864: EQUAL
76865: IFFALSE 76876
// ComUnlink ( j ) ;
76867: LD_VAR 0 3
76871: PPUSH
76872: CALL_OW 136
// fac := MC_GetBuildings ( i , b_factory ) ;
76876: LD_ADDR_VAR 0 9
76880: PUSH
76881: LD_VAR 0 2
76885: PPUSH
76886: LD_INT 3
76888: PPUSH
76889: CALL 86133 0 2
76893: ST_TO_ADDR
// if fac then
76894: LD_VAR 0 9
76898: IFFALSE 76994
// begin for k in fac do
76900: LD_ADDR_VAR 0 4
76904: PUSH
76905: LD_VAR 0 9
76909: PUSH
76910: FOR_IN
76911: IFFALSE 76992
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
76913: LD_ADDR_VAR 0 10
76917: PUSH
76918: LD_VAR 0 9
76922: PPUSH
76923: LD_VAR 0 3
76927: PPUSH
76928: CALL_OW 265
76932: PPUSH
76933: LD_VAR 0 3
76937: PPUSH
76938: CALL_OW 262
76942: PPUSH
76943: LD_VAR 0 3
76947: PPUSH
76948: CALL_OW 263
76952: PPUSH
76953: LD_VAR 0 3
76957: PPUSH
76958: CALL_OW 264
76962: PPUSH
76963: CALL 23743 0 5
76967: ST_TO_ADDR
// if components then
76968: LD_VAR 0 10
76972: IFFALSE 76990
// begin MC_InsertProduceList ( i , components ) ;
76974: LD_VAR 0 2
76978: PPUSH
76979: LD_VAR 0 10
76983: PPUSH
76984: CALL 85678 0 2
// break ;
76988: GO 76992
// end ; end ;
76990: GO 76910
76992: POP
76993: POP
// end ; continue ;
76994: GO 76490
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
76996: LD_VAR 0 3
77000: PPUSH
77001: LD_INT 1
77003: PPUSH
77004: CALL_OW 289
77008: PUSH
77009: LD_INT 100
77011: LESS
77012: PUSH
77013: LD_VAR 0 3
77017: PPUSH
77018: CALL_OW 314
77022: NOT
77023: AND
77024: IFFALSE 77053
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
77026: LD_VAR 0 3
77030: PPUSH
77031: LD_VAR 0 6
77035: PUSH
77036: LD_INT 2
77038: ARRAY
77039: PPUSH
77040: LD_VAR 0 6
77044: PUSH
77045: LD_INT 3
77047: ARRAY
77048: PPUSH
77049: CALL_OW 117
// break ;
77053: GO 77057
// end ;
77055: GO 76490
77057: POP
77058: POP
// end ; end ;
77059: GO 75328
77061: POP
77062: POP
// end ;
77063: LD_VAR 0 1
77067: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
77068: LD_INT 0
77070: PPUSH
77071: PPUSH
77072: PPUSH
77073: PPUSH
// if not mc_bases then
77074: LD_EXP 36
77078: NOT
77079: IFFALSE 77083
// exit ;
77081: GO 77244
// for i = 1 to mc_bases do
77083: LD_ADDR_VAR 0 2
77087: PUSH
77088: DOUBLE
77089: LD_INT 1
77091: DEC
77092: ST_TO_ADDR
77093: LD_EXP 36
77097: PUSH
77098: FOR_TO
77099: IFFALSE 77242
// begin tmp := UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) ;
77101: LD_ADDR_VAR 0 4
77105: PUSH
77106: LD_EXP 55
77110: PUSH
77111: LD_VAR 0 2
77115: ARRAY
77116: PUSH
77117: LD_EXP 58
77121: PUSH
77122: LD_VAR 0 2
77126: ARRAY
77127: UNION
77128: PPUSH
77129: LD_INT 33
77131: PUSH
77132: LD_INT 2
77134: PUSH
77135: EMPTY
77136: LIST
77137: LIST
77138: PPUSH
77139: CALL_OW 72
77143: ST_TO_ADDR
// if tmp then
77144: LD_VAR 0 4
77148: IFFALSE 77240
// for j in tmp do
77150: LD_ADDR_VAR 0 3
77154: PUSH
77155: LD_VAR 0 4
77159: PUSH
77160: FOR_IN
77161: IFFALSE 77238
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
77163: LD_VAR 0 3
77167: PPUSH
77168: CALL_OW 312
77172: NOT
77173: PUSH
77174: LD_VAR 0 3
77178: PPUSH
77179: CALL_OW 256
77183: PUSH
77184: LD_INT 250
77186: GREATEREQUAL
77187: AND
77188: IFFALSE 77201
// Connect ( j ) else
77190: LD_VAR 0 3
77194: PPUSH
77195: CALL 29144 0 1
77199: GO 77236
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
77201: LD_VAR 0 3
77205: PPUSH
77206: CALL_OW 256
77210: PUSH
77211: LD_INT 250
77213: LESS
77214: PUSH
77215: LD_VAR 0 3
77219: PPUSH
77220: CALL_OW 312
77224: AND
77225: IFFALSE 77236
// ComUnlink ( j ) ;
77227: LD_VAR 0 3
77231: PPUSH
77232: CALL_OW 136
77236: GO 77160
77238: POP
77239: POP
// end ;
77240: GO 77098
77242: POP
77243: POP
// end ;
77244: LD_VAR 0 1
77248: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
77249: LD_INT 0
77251: PPUSH
77252: PPUSH
77253: PPUSH
77254: PPUSH
77255: PPUSH
// if not mc_bases then
77256: LD_EXP 36
77260: NOT
77261: IFFALSE 77265
// exit ;
77263: GO 77710
// for i = 1 to mc_bases do
77265: LD_ADDR_VAR 0 2
77269: PUSH
77270: DOUBLE
77271: LD_INT 1
77273: DEC
77274: ST_TO_ADDR
77275: LD_EXP 36
77279: PUSH
77280: FOR_TO
77281: IFFALSE 77708
// begin if not mc_produce [ i ] then
77283: LD_EXP 57
77287: PUSH
77288: LD_VAR 0 2
77292: ARRAY
77293: NOT
77294: IFFALSE 77298
// continue ;
77296: GO 77280
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
77298: LD_ADDR_VAR 0 5
77302: PUSH
77303: LD_EXP 36
77307: PUSH
77308: LD_VAR 0 2
77312: ARRAY
77313: PPUSH
77314: LD_INT 30
77316: PUSH
77317: LD_INT 3
77319: PUSH
77320: EMPTY
77321: LIST
77322: LIST
77323: PPUSH
77324: CALL_OW 72
77328: ST_TO_ADDR
// if not fac then
77329: LD_VAR 0 5
77333: NOT
77334: IFFALSE 77338
// continue ;
77336: GO 77280
// for j in fac do
77338: LD_ADDR_VAR 0 3
77342: PUSH
77343: LD_VAR 0 5
77347: PUSH
77348: FOR_IN
77349: IFFALSE 77704
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] then
77351: LD_VAR 0 3
77355: PPUSH
77356: CALL_OW 461
77360: PUSH
77361: LD_INT 2
77363: NONEQUAL
77364: PUSH
77365: LD_VAR 0 3
77369: PPUSH
77370: LD_INT 15
77372: PPUSH
77373: CALL 28804 0 2
77377: PUSH
77378: LD_INT 4
77380: ARRAY
77381: OR
77382: IFFALSE 77386
// continue ;
77384: GO 77348
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
77386: LD_VAR 0 3
77390: PPUSH
77391: LD_EXP 57
77395: PUSH
77396: LD_VAR 0 2
77400: ARRAY
77401: PUSH
77402: LD_INT 1
77404: ARRAY
77405: PUSH
77406: LD_INT 1
77408: ARRAY
77409: PPUSH
77410: LD_EXP 57
77414: PUSH
77415: LD_VAR 0 2
77419: ARRAY
77420: PUSH
77421: LD_INT 1
77423: ARRAY
77424: PUSH
77425: LD_INT 2
77427: ARRAY
77428: PPUSH
77429: LD_EXP 57
77433: PUSH
77434: LD_VAR 0 2
77438: ARRAY
77439: PUSH
77440: LD_INT 1
77442: ARRAY
77443: PUSH
77444: LD_INT 3
77446: ARRAY
77447: PPUSH
77448: LD_EXP 57
77452: PUSH
77453: LD_VAR 0 2
77457: ARRAY
77458: PUSH
77459: LD_INT 1
77461: ARRAY
77462: PUSH
77463: LD_INT 4
77465: ARRAY
77466: PPUSH
77467: CALL_OW 448
77471: PUSH
77472: LD_VAR 0 3
77476: PPUSH
77477: LD_EXP 57
77481: PUSH
77482: LD_VAR 0 2
77486: ARRAY
77487: PUSH
77488: LD_INT 1
77490: ARRAY
77491: PUSH
77492: LD_INT 1
77494: ARRAY
77495: PUSH
77496: LD_EXP 57
77500: PUSH
77501: LD_VAR 0 2
77505: ARRAY
77506: PUSH
77507: LD_INT 1
77509: ARRAY
77510: PUSH
77511: LD_INT 2
77513: ARRAY
77514: PUSH
77515: LD_EXP 57
77519: PUSH
77520: LD_VAR 0 2
77524: ARRAY
77525: PUSH
77526: LD_INT 1
77528: ARRAY
77529: PUSH
77530: LD_INT 3
77532: ARRAY
77533: PUSH
77534: LD_EXP 57
77538: PUSH
77539: LD_VAR 0 2
77543: ARRAY
77544: PUSH
77545: LD_INT 1
77547: ARRAY
77548: PUSH
77549: LD_INT 4
77551: ARRAY
77552: PUSH
77553: EMPTY
77554: LIST
77555: LIST
77556: LIST
77557: LIST
77558: PPUSH
77559: CALL 32475 0 2
77563: AND
77564: IFFALSE 77702
// begin AddComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
77566: LD_VAR 0 3
77570: PPUSH
77571: LD_EXP 57
77575: PUSH
77576: LD_VAR 0 2
77580: ARRAY
77581: PUSH
77582: LD_INT 1
77584: ARRAY
77585: PUSH
77586: LD_INT 1
77588: ARRAY
77589: PPUSH
77590: LD_EXP 57
77594: PUSH
77595: LD_VAR 0 2
77599: ARRAY
77600: PUSH
77601: LD_INT 1
77603: ARRAY
77604: PUSH
77605: LD_INT 2
77607: ARRAY
77608: PPUSH
77609: LD_EXP 57
77613: PUSH
77614: LD_VAR 0 2
77618: ARRAY
77619: PUSH
77620: LD_INT 1
77622: ARRAY
77623: PUSH
77624: LD_INT 3
77626: ARRAY
77627: PPUSH
77628: LD_EXP 57
77632: PUSH
77633: LD_VAR 0 2
77637: ARRAY
77638: PUSH
77639: LD_INT 1
77641: ARRAY
77642: PUSH
77643: LD_INT 4
77645: ARRAY
77646: PPUSH
77647: CALL_OW 185
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
77651: LD_ADDR_VAR 0 4
77655: PUSH
77656: LD_EXP 57
77660: PUSH
77661: LD_VAR 0 2
77665: ARRAY
77666: PPUSH
77667: LD_INT 1
77669: PPUSH
77670: CALL_OW 3
77674: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
77675: LD_ADDR_EXP 57
77679: PUSH
77680: LD_EXP 57
77684: PPUSH
77685: LD_VAR 0 2
77689: PPUSH
77690: LD_VAR 0 4
77694: PPUSH
77695: CALL_OW 1
77699: ST_TO_ADDR
// break ;
77700: GO 77704
// end ; end ;
77702: GO 77348
77704: POP
77705: POP
// end ;
77706: GO 77280
77708: POP
77709: POP
// end ;
77710: LD_VAR 0 1
77714: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
77715: LD_INT 0
77717: PPUSH
77718: PPUSH
77719: PPUSH
// if not mc_bases then
77720: LD_EXP 36
77724: NOT
77725: IFFALSE 77729
// exit ;
77727: GO 77818
// for i = 1 to mc_bases do
77729: LD_ADDR_VAR 0 2
77733: PUSH
77734: DOUBLE
77735: LD_INT 1
77737: DEC
77738: ST_TO_ADDR
77739: LD_EXP 36
77743: PUSH
77744: FOR_TO
77745: IFFALSE 77816
// begin if mc_attack [ i ] then
77747: LD_EXP 56
77751: PUSH
77752: LD_VAR 0 2
77756: ARRAY
77757: IFFALSE 77814
// begin tmp := mc_attack [ i ] [ 1 ] ;
77759: LD_ADDR_VAR 0 3
77763: PUSH
77764: LD_EXP 56
77768: PUSH
77769: LD_VAR 0 2
77773: ARRAY
77774: PUSH
77775: LD_INT 1
77777: ARRAY
77778: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
77779: LD_ADDR_EXP 56
77783: PUSH
77784: LD_EXP 56
77788: PPUSH
77789: LD_VAR 0 2
77793: PPUSH
77794: EMPTY
77795: PPUSH
77796: CALL_OW 1
77800: ST_TO_ADDR
// Attack ( tmp ) ;
77801: LD_VAR 0 3
77805: PPUSH
77806: CALL 54688 0 1
// exit ;
77810: POP
77811: POP
77812: GO 77818
// end ; end ;
77814: GO 77744
77816: POP
77817: POP
// end ;
77818: LD_VAR 0 1
77822: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
77823: LD_INT 0
77825: PPUSH
77826: PPUSH
77827: PPUSH
77828: PPUSH
77829: PPUSH
77830: PPUSH
77831: PPUSH
// if not mc_bases then
77832: LD_EXP 36
77836: NOT
77837: IFFALSE 77841
// exit ;
77839: GO 78423
// for i = 1 to mc_bases do
77841: LD_ADDR_VAR 0 2
77845: PUSH
77846: DOUBLE
77847: LD_INT 1
77849: DEC
77850: ST_TO_ADDR
77851: LD_EXP 36
77855: PUSH
77856: FOR_TO
77857: IFFALSE 78421
// begin if not mc_bases [ i ] then
77859: LD_EXP 36
77863: PUSH
77864: LD_VAR 0 2
77868: ARRAY
77869: NOT
77870: IFFALSE 77874
// continue ;
77872: GO 77856
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
77874: LD_ADDR_VAR 0 7
77878: PUSH
77879: LD_EXP 36
77883: PUSH
77884: LD_VAR 0 2
77888: ARRAY
77889: PUSH
77890: LD_INT 1
77892: ARRAY
77893: PPUSH
77894: CALL 23047 0 1
77898: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
77899: LD_ADDR_EXP 59
77903: PUSH
77904: LD_EXP 59
77908: PPUSH
77909: LD_VAR 0 2
77913: PPUSH
77914: LD_EXP 36
77918: PUSH
77919: LD_VAR 0 2
77923: ARRAY
77924: PUSH
77925: LD_INT 1
77927: ARRAY
77928: PPUSH
77929: CALL_OW 255
77933: PPUSH
77934: LD_EXP 61
77938: PUSH
77939: LD_VAR 0 2
77943: ARRAY
77944: PPUSH
77945: CALL 20965 0 2
77949: PPUSH
77950: CALL_OW 1
77954: ST_TO_ADDR
// if not mc_scan [ i ] then
77955: LD_EXP 59
77959: PUSH
77960: LD_VAR 0 2
77964: ARRAY
77965: NOT
77966: IFFALSE 78121
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
77968: LD_ADDR_VAR 0 4
77972: PUSH
77973: LD_EXP 36
77977: PUSH
77978: LD_VAR 0 2
77982: ARRAY
77983: PPUSH
77984: LD_INT 2
77986: PUSH
77987: LD_INT 25
77989: PUSH
77990: LD_INT 5
77992: PUSH
77993: EMPTY
77994: LIST
77995: LIST
77996: PUSH
77997: LD_INT 25
77999: PUSH
78000: LD_INT 8
78002: PUSH
78003: EMPTY
78004: LIST
78005: LIST
78006: PUSH
78007: LD_INT 25
78009: PUSH
78010: LD_INT 9
78012: PUSH
78013: EMPTY
78014: LIST
78015: LIST
78016: PUSH
78017: EMPTY
78018: LIST
78019: LIST
78020: LIST
78021: LIST
78022: PPUSH
78023: CALL_OW 72
78027: ST_TO_ADDR
// if not tmp then
78028: LD_VAR 0 4
78032: NOT
78033: IFFALSE 78037
// continue ;
78035: GO 77856
// for j in tmp do
78037: LD_ADDR_VAR 0 3
78041: PUSH
78042: LD_VAR 0 4
78046: PUSH
78047: FOR_IN
78048: IFFALSE 78119
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
78050: LD_VAR 0 3
78054: PPUSH
78055: CALL_OW 310
78059: PPUSH
78060: CALL_OW 266
78064: PUSH
78065: LD_INT 5
78067: EQUAL
78068: PUSH
78069: LD_VAR 0 3
78073: PPUSH
78074: CALL_OW 257
78078: PUSH
78079: LD_INT 1
78081: EQUAL
78082: AND
78083: PUSH
78084: LD_VAR 0 3
78088: PPUSH
78089: CALL_OW 459
78093: NOT
78094: AND
78095: PUSH
78096: LD_VAR 0 7
78100: AND
78101: IFFALSE 78117
// ComChangeProfession ( j , class ) ;
78103: LD_VAR 0 3
78107: PPUSH
78108: LD_VAR 0 7
78112: PPUSH
78113: CALL_OW 123
78117: GO 78047
78119: POP
78120: POP
// end ; if mc_scan [ i ] and not mc_defender [ i ] and not UnitFilter ( mc_bases [ i ] , [ f_btype , b_bunker ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) then
78121: LD_EXP 59
78125: PUSH
78126: LD_VAR 0 2
78130: ARRAY
78131: PUSH
78132: LD_EXP 58
78136: PUSH
78137: LD_VAR 0 2
78141: ARRAY
78142: NOT
78143: AND
78144: PUSH
78145: LD_EXP 36
78149: PUSH
78150: LD_VAR 0 2
78154: ARRAY
78155: PPUSH
78156: LD_INT 30
78158: PUSH
78159: LD_INT 32
78161: PUSH
78162: EMPTY
78163: LIST
78164: LIST
78165: PPUSH
78166: CALL_OW 72
78170: NOT
78171: AND
78172: PUSH
78173: LD_EXP 36
78177: PUSH
78178: LD_VAR 0 2
78182: ARRAY
78183: PPUSH
78184: LD_INT 2
78186: PUSH
78187: LD_INT 30
78189: PUSH
78190: LD_INT 4
78192: PUSH
78193: EMPTY
78194: LIST
78195: LIST
78196: PUSH
78197: LD_INT 30
78199: PUSH
78200: LD_INT 5
78202: PUSH
78203: EMPTY
78204: LIST
78205: LIST
78206: PUSH
78207: EMPTY
78208: LIST
78209: LIST
78210: LIST
78211: PPUSH
78212: CALL_OW 72
78216: NOT
78217: AND
78218: IFFALSE 78350
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
78220: LD_ADDR_VAR 0 4
78224: PUSH
78225: LD_EXP 36
78229: PUSH
78230: LD_VAR 0 2
78234: ARRAY
78235: PPUSH
78236: LD_INT 2
78238: PUSH
78239: LD_INT 25
78241: PUSH
78242: LD_INT 1
78244: PUSH
78245: EMPTY
78246: LIST
78247: LIST
78248: PUSH
78249: LD_INT 25
78251: PUSH
78252: LD_INT 5
78254: PUSH
78255: EMPTY
78256: LIST
78257: LIST
78258: PUSH
78259: LD_INT 25
78261: PUSH
78262: LD_INT 8
78264: PUSH
78265: EMPTY
78266: LIST
78267: LIST
78268: PUSH
78269: LD_INT 25
78271: PUSH
78272: LD_INT 9
78274: PUSH
78275: EMPTY
78276: LIST
78277: LIST
78278: PUSH
78279: EMPTY
78280: LIST
78281: LIST
78282: LIST
78283: LIST
78284: LIST
78285: PPUSH
78286: CALL_OW 72
78290: ST_TO_ADDR
// tmp := tmp diff FilterByTag ( tmp , 18 ) ;
78291: LD_ADDR_VAR 0 4
78295: PUSH
78296: LD_VAR 0 4
78300: PUSH
78301: LD_VAR 0 4
78305: PPUSH
78306: LD_INT 18
78308: PPUSH
78309: CALL 59471 0 2
78313: DIFF
78314: ST_TO_ADDR
// if tmp then
78315: LD_VAR 0 4
78319: IFFALSE 78350
// begin BasicDefend ( i , tmp , mc_scan_area [ i ] ) ;
78321: LD_VAR 0 2
78325: PPUSH
78326: LD_VAR 0 4
78330: PPUSH
78331: LD_EXP 61
78335: PUSH
78336: LD_VAR 0 2
78340: ARRAY
78341: PPUSH
78342: CALL 21000 0 3
// exit ;
78346: POP
78347: POP
78348: GO 78423
// end ; end ; if mc_scan [ i ] and mc_defender [ i ] then
78350: LD_EXP 59
78354: PUSH
78355: LD_VAR 0 2
78359: ARRAY
78360: PUSH
78361: LD_EXP 58
78365: PUSH
78366: LD_VAR 0 2
78370: ARRAY
78371: AND
78372: IFFALSE 78419
// begin tmp := mc_defender [ i ] ;
78374: LD_ADDR_VAR 0 4
78378: PUSH
78379: LD_EXP 58
78383: PUSH
78384: LD_VAR 0 2
78388: ARRAY
78389: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
78390: LD_VAR 0 2
78394: PPUSH
78395: LD_VAR 0 4
78399: PPUSH
78400: LD_EXP 59
78404: PUSH
78405: LD_VAR 0 2
78409: ARRAY
78410: PPUSH
78411: CALL 21498 0 3
// exit ;
78415: POP
78416: POP
78417: GO 78423
// end ; end ;
78419: GO 77856
78421: POP
78422: POP
// end ;
78423: LD_VAR 0 1
78427: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 , researching , idle_lab ; begin
78428: LD_INT 0
78430: PPUSH
78431: PPUSH
78432: PPUSH
78433: PPUSH
78434: PPUSH
78435: PPUSH
78436: PPUSH
78437: PPUSH
78438: PPUSH
78439: PPUSH
78440: PPUSH
// if not mc_bases then
78441: LD_EXP 36
78445: NOT
78446: IFFALSE 78450
// exit ;
78448: GO 79537
// for i = 1 to mc_bases do
78450: LD_ADDR_VAR 0 2
78454: PUSH
78455: DOUBLE
78456: LD_INT 1
78458: DEC
78459: ST_TO_ADDR
78460: LD_EXP 36
78464: PUSH
78465: FOR_TO
78466: IFFALSE 79535
// begin tmp := mc_lab [ i ] ;
78468: LD_ADDR_VAR 0 6
78472: PUSH
78473: LD_EXP 69
78477: PUSH
78478: LD_VAR 0 2
78482: ARRAY
78483: ST_TO_ADDR
// if not tmp then
78484: LD_VAR 0 6
78488: NOT
78489: IFFALSE 78493
// continue ;
78491: GO 78465
// idle_lab := 0 ;
78493: LD_ADDR_VAR 0 11
78497: PUSH
78498: LD_INT 0
78500: ST_TO_ADDR
// for j in tmp do
78501: LD_ADDR_VAR 0 3
78505: PUSH
78506: LD_VAR 0 6
78510: PUSH
78511: FOR_IN
78512: IFFALSE 79531
// begin researching := false ;
78514: LD_ADDR_VAR 0 10
78518: PUSH
78519: LD_INT 0
78521: ST_TO_ADDR
// side := GetSide ( j ) ;
78522: LD_ADDR_VAR 0 4
78526: PUSH
78527: LD_VAR 0 3
78531: PPUSH
78532: CALL_OW 255
78536: ST_TO_ADDR
// if not mc_tech [ side ] then
78537: LD_EXP 63
78541: PUSH
78542: LD_VAR 0 4
78546: ARRAY
78547: NOT
78548: IFFALSE 78552
// continue ;
78550: GO 78511
// if BuildingStatus ( j ) = bs_idle then
78552: LD_VAR 0 3
78556: PPUSH
78557: CALL_OW 461
78561: PUSH
78562: LD_INT 2
78564: EQUAL
78565: IFFALSE 78753
// begin if idle_lab and UnitsInside ( j ) < 6 then
78567: LD_VAR 0 11
78571: PUSH
78572: LD_VAR 0 3
78576: PPUSH
78577: CALL_OW 313
78581: PUSH
78582: LD_INT 6
78584: LESS
78585: AND
78586: IFFALSE 78657
// begin tmp2 := UnitsInside ( idle_lab ) ;
78588: LD_ADDR_VAR 0 9
78592: PUSH
78593: LD_VAR 0 11
78597: PPUSH
78598: CALL_OW 313
78602: ST_TO_ADDR
// if tmp2 then
78603: LD_VAR 0 9
78607: IFFALSE 78649
// for x in tmp2 do
78609: LD_ADDR_VAR 0 7
78613: PUSH
78614: LD_VAR 0 9
78618: PUSH
78619: FOR_IN
78620: IFFALSE 78647
// begin ComExitBuilding ( x ) ;
78622: LD_VAR 0 7
78626: PPUSH
78627: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
78631: LD_VAR 0 7
78635: PPUSH
78636: LD_VAR 0 3
78640: PPUSH
78641: CALL_OW 180
// end ;
78645: GO 78619
78647: POP
78648: POP
// idle_lab := 0 ;
78649: LD_ADDR_VAR 0 11
78653: PUSH
78654: LD_INT 0
78656: ST_TO_ADDR
// end ; for t in mc_tech [ side ] do
78657: LD_ADDR_VAR 0 5
78661: PUSH
78662: LD_EXP 63
78666: PUSH
78667: LD_VAR 0 4
78671: ARRAY
78672: PUSH
78673: FOR_IN
78674: IFFALSE 78734
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
78676: LD_VAR 0 3
78680: PPUSH
78681: LD_VAR 0 5
78685: PPUSH
78686: CALL_OW 430
78690: PUSH
78691: LD_VAR 0 4
78695: PPUSH
78696: LD_VAR 0 5
78700: PPUSH
78701: CALL 20070 0 2
78705: AND
78706: IFFALSE 78732
// begin researching := true ;
78708: LD_ADDR_VAR 0 10
78712: PUSH
78713: LD_INT 1
78715: ST_TO_ADDR
// ComResearch ( j , t ) ;
78716: LD_VAR 0 3
78720: PPUSH
78721: LD_VAR 0 5
78725: PPUSH
78726: CALL_OW 124
// break ;
78730: GO 78734
// end ;
78732: GO 78673
78734: POP
78735: POP
// if not researching then
78736: LD_VAR 0 10
78740: NOT
78741: IFFALSE 78753
// idle_lab := j ;
78743: LD_ADDR_VAR 0 11
78747: PUSH
78748: LD_VAR 0 3
78752: ST_TO_ADDR
// end ; if BuildingStatus ( j ) = bs_need_ape then
78753: LD_VAR 0 3
78757: PPUSH
78758: CALL_OW 461
78762: PUSH
78763: LD_INT 10
78765: EQUAL
78766: IFFALSE 79354
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
78768: LD_EXP 65
78772: PUSH
78773: LD_VAR 0 2
78777: ARRAY
78778: NOT
78779: PUSH
78780: LD_EXP 66
78784: PUSH
78785: LD_VAR 0 2
78789: ARRAY
78790: NOT
78791: AND
78792: PUSH
78793: LD_EXP 63
78797: PUSH
78798: LD_VAR 0 4
78802: ARRAY
78803: PUSH
78804: LD_INT 1
78806: GREATER
78807: AND
78808: IFFALSE 78939
// begin ComCancel ( j ) ;
78810: LD_VAR 0 3
78814: PPUSH
78815: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
78819: LD_ADDR_EXP 63
78823: PUSH
78824: LD_EXP 63
78828: PPUSH
78829: LD_VAR 0 4
78833: PPUSH
78834: LD_EXP 63
78838: PUSH
78839: LD_VAR 0 4
78843: ARRAY
78844: PPUSH
78845: LD_EXP 63
78849: PUSH
78850: LD_VAR 0 4
78854: ARRAY
78855: PUSH
78856: LD_INT 1
78858: MINUS
78859: PPUSH
78860: LD_EXP 63
78864: PUSH
78865: LD_VAR 0 4
78869: ARRAY
78870: PPUSH
78871: LD_INT 0
78873: PPUSH
78874: CALL 25629 0 4
78878: PPUSH
78879: CALL_OW 1
78883: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
78884: LD_ADDR_EXP 63
78888: PUSH
78889: LD_EXP 63
78893: PPUSH
78894: LD_VAR 0 4
78898: PPUSH
78899: LD_EXP 63
78903: PUSH
78904: LD_VAR 0 4
78908: ARRAY
78909: PPUSH
78910: LD_EXP 63
78914: PUSH
78915: LD_VAR 0 4
78919: ARRAY
78920: PPUSH
78921: LD_INT 1
78923: PPUSH
78924: LD_INT 0
78926: PPUSH
78927: CALL 25629 0 4
78931: PPUSH
78932: CALL_OW 1
78936: ST_TO_ADDR
// continue ;
78937: GO 78511
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
78939: LD_EXP 65
78943: PUSH
78944: LD_VAR 0 2
78948: ARRAY
78949: PUSH
78950: LD_EXP 66
78954: PUSH
78955: LD_VAR 0 2
78959: ARRAY
78960: NOT
78961: AND
78962: IFFALSE 79089
// begin mc_ape_in_lab := ReplaceIn ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
78964: LD_ADDR_EXP 66
78968: PUSH
78969: LD_EXP 66
78973: PPUSH
78974: LD_VAR 0 2
78978: PUSH
78979: LD_EXP 66
78983: PUSH
78984: LD_VAR 0 2
78988: ARRAY
78989: PUSH
78990: LD_INT 1
78992: PLUS
78993: PUSH
78994: EMPTY
78995: LIST
78996: LIST
78997: PPUSH
78998: LD_EXP 65
79002: PUSH
79003: LD_VAR 0 2
79007: ARRAY
79008: PUSH
79009: LD_INT 1
79011: ARRAY
79012: PPUSH
79013: CALL 26211 0 3
79017: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
79018: LD_EXP 65
79022: PUSH
79023: LD_VAR 0 2
79027: ARRAY
79028: PUSH
79029: LD_INT 1
79031: ARRAY
79032: PPUSH
79033: LD_INT 112
79035: PPUSH
79036: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
79040: LD_ADDR_VAR 0 9
79044: PUSH
79045: LD_EXP 65
79049: PUSH
79050: LD_VAR 0 2
79054: ARRAY
79055: PPUSH
79056: LD_INT 1
79058: PPUSH
79059: CALL_OW 3
79063: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
79064: LD_ADDR_EXP 65
79068: PUSH
79069: LD_EXP 65
79073: PPUSH
79074: LD_VAR 0 2
79078: PPUSH
79079: LD_VAR 0 9
79083: PPUSH
79084: CALL_OW 1
79088: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
79089: LD_EXP 65
79093: PUSH
79094: LD_VAR 0 2
79098: ARRAY
79099: PUSH
79100: LD_EXP 66
79104: PUSH
79105: LD_VAR 0 2
79109: ARRAY
79110: AND
79111: PUSH
79112: LD_EXP 66
79116: PUSH
79117: LD_VAR 0 2
79121: ARRAY
79122: PUSH
79123: LD_INT 1
79125: ARRAY
79126: PPUSH
79127: CALL_OW 310
79131: NOT
79132: AND
79133: PUSH
79134: LD_VAR 0 3
79138: PPUSH
79139: CALL_OW 313
79143: PUSH
79144: LD_INT 6
79146: EQUAL
79147: AND
79148: IFFALSE 79204
// begin tmp2 := UnitsInside ( j ) ;
79150: LD_ADDR_VAR 0 9
79154: PUSH
79155: LD_VAR 0 3
79159: PPUSH
79160: CALL_OW 313
79164: ST_TO_ADDR
// if tmp2 = 6 then
79165: LD_VAR 0 9
79169: PUSH
79170: LD_INT 6
79172: EQUAL
79173: IFFALSE 79204
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
79175: LD_VAR 0 9
79179: PUSH
79180: LD_INT 1
79182: ARRAY
79183: PPUSH
79184: LD_INT 112
79186: PPUSH
79187: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
79191: LD_VAR 0 9
79195: PUSH
79196: LD_INT 1
79198: ARRAY
79199: PPUSH
79200: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
79204: LD_EXP 66
79208: PUSH
79209: LD_VAR 0 2
79213: ARRAY
79214: PUSH
79215: LD_EXP 66
79219: PUSH
79220: LD_VAR 0 2
79224: ARRAY
79225: PUSH
79226: LD_INT 1
79228: ARRAY
79229: PPUSH
79230: CALL_OW 314
79234: NOT
79235: AND
79236: PUSH
79237: LD_EXP 66
79241: PUSH
79242: LD_VAR 0 2
79246: ARRAY
79247: PUSH
79248: LD_INT 1
79250: ARRAY
79251: PPUSH
79252: CALL_OW 310
79256: NOT
79257: AND
79258: IFFALSE 79284
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
79260: LD_EXP 66
79264: PUSH
79265: LD_VAR 0 2
79269: ARRAY
79270: PUSH
79271: LD_INT 1
79273: ARRAY
79274: PPUSH
79275: LD_VAR 0 3
79279: PPUSH
79280: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
79284: LD_EXP 66
79288: PUSH
79289: LD_VAR 0 2
79293: ARRAY
79294: PUSH
79295: LD_INT 1
79297: ARRAY
79298: PPUSH
79299: CALL_OW 310
79303: PUSH
79304: LD_EXP 66
79308: PUSH
79309: LD_VAR 0 2
79313: ARRAY
79314: PUSH
79315: LD_INT 1
79317: ARRAY
79318: PPUSH
79319: CALL_OW 310
79323: PPUSH
79324: CALL_OW 461
79328: PUSH
79329: LD_INT 3
79331: NONEQUAL
79332: AND
79333: IFFALSE 79354
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
79335: LD_EXP 66
79339: PUSH
79340: LD_VAR 0 2
79344: ARRAY
79345: PUSH
79346: LD_INT 1
79348: ARRAY
79349: PPUSH
79350: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
79354: LD_VAR 0 3
79358: PPUSH
79359: CALL_OW 461
79363: PUSH
79364: LD_INT 6
79366: EQUAL
79367: PUSH
79368: LD_VAR 0 6
79372: PUSH
79373: LD_INT 1
79375: GREATER
79376: AND
79377: IFFALSE 79529
// begin sci := [ ] ;
79379: LD_ADDR_VAR 0 8
79383: PUSH
79384: EMPTY
79385: ST_TO_ADDR
// for x in ( tmp diff j ) do
79386: LD_ADDR_VAR 0 7
79390: PUSH
79391: LD_VAR 0 6
79395: PUSH
79396: LD_VAR 0 3
79400: DIFF
79401: PUSH
79402: FOR_IN
79403: IFFALSE 79455
// begin if sci = 6 then
79405: LD_VAR 0 8
79409: PUSH
79410: LD_INT 6
79412: EQUAL
79413: IFFALSE 79417
// break ;
79415: GO 79455
// if BuildingStatus ( x ) = bs_idle then
79417: LD_VAR 0 7
79421: PPUSH
79422: CALL_OW 461
79426: PUSH
79427: LD_INT 2
79429: EQUAL
79430: IFFALSE 79453
// sci := sci ^ UnitsInside ( x ) ;
79432: LD_ADDR_VAR 0 8
79436: PUSH
79437: LD_VAR 0 8
79441: PUSH
79442: LD_VAR 0 7
79446: PPUSH
79447: CALL_OW 313
79451: ADD
79452: ST_TO_ADDR
// end ;
79453: GO 79402
79455: POP
79456: POP
// if not sci then
79457: LD_VAR 0 8
79461: NOT
79462: IFFALSE 79466
// continue ;
79464: GO 78511
// for x in sci do
79466: LD_ADDR_VAR 0 7
79470: PUSH
79471: LD_VAR 0 8
79475: PUSH
79476: FOR_IN
79477: IFFALSE 79527
// if IsInUnit ( x ) and not HasTask ( x ) then
79479: LD_VAR 0 7
79483: PPUSH
79484: CALL_OW 310
79488: PUSH
79489: LD_VAR 0 7
79493: PPUSH
79494: CALL_OW 314
79498: NOT
79499: AND
79500: IFFALSE 79525
// begin ComExitBuilding ( x ) ;
79502: LD_VAR 0 7
79506: PPUSH
79507: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
79511: LD_VAR 0 7
79515: PPUSH
79516: LD_VAR 0 3
79520: PPUSH
79521: CALL_OW 180
// end ;
79525: GO 79476
79527: POP
79528: POP
// end ; end ;
79529: GO 78511
79531: POP
79532: POP
// end ;
79533: GO 78465
79535: POP
79536: POP
// end ;
79537: LD_VAR 0 1
79541: RET
// export function MC_MinesTrigger ( ) ; var i ; begin
79542: LD_INT 0
79544: PPUSH
79545: PPUSH
// if not mc_bases then
79546: LD_EXP 36
79550: NOT
79551: IFFALSE 79555
// exit ;
79553: GO 79636
// for i = 1 to mc_bases do
79555: LD_ADDR_VAR 0 2
79559: PUSH
79560: DOUBLE
79561: LD_INT 1
79563: DEC
79564: ST_TO_ADDR
79565: LD_EXP 36
79569: PUSH
79570: FOR_TO
79571: IFFALSE 79634
// if mc_mines [ i ] and mc_miners [ i ] then
79573: LD_EXP 49
79577: PUSH
79578: LD_VAR 0 2
79582: ARRAY
79583: PUSH
79584: LD_EXP 50
79588: PUSH
79589: LD_VAR 0 2
79593: ARRAY
79594: AND
79595: IFFALSE 79632
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
79597: LD_EXP 50
79601: PUSH
79602: LD_VAR 0 2
79606: ARRAY
79607: PUSH
79608: LD_INT 1
79610: ARRAY
79611: PPUSH
79612: CALL_OW 255
79616: PPUSH
79617: LD_EXP 49
79621: PUSH
79622: LD_VAR 0 2
79626: ARRAY
79627: PPUSH
79628: CALL 23200 0 2
79632: GO 79570
79634: POP
79635: POP
// end ;
79636: LD_VAR 0 1
79640: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
79641: LD_INT 0
79643: PPUSH
79644: PPUSH
79645: PPUSH
79646: PPUSH
79647: PPUSH
79648: PPUSH
79649: PPUSH
79650: PPUSH
// if not mc_bases or not mc_parking then
79651: LD_EXP 36
79655: NOT
79656: PUSH
79657: LD_EXP 60
79661: NOT
79662: OR
79663: IFFALSE 79667
// exit ;
79665: GO 80366
// for i = 1 to mc_bases do
79667: LD_ADDR_VAR 0 2
79671: PUSH
79672: DOUBLE
79673: LD_INT 1
79675: DEC
79676: ST_TO_ADDR
79677: LD_EXP 36
79681: PUSH
79682: FOR_TO
79683: IFFALSE 80364
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
79685: LD_EXP 36
79689: PUSH
79690: LD_VAR 0 2
79694: ARRAY
79695: NOT
79696: PUSH
79697: LD_EXP 60
79701: PUSH
79702: LD_VAR 0 2
79706: ARRAY
79707: NOT
79708: OR
79709: IFFALSE 79713
// continue ;
79711: GO 79682
// side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
79713: LD_ADDR_VAR 0 5
79717: PUSH
79718: LD_EXP 36
79722: PUSH
79723: LD_VAR 0 2
79727: ARRAY
79728: PUSH
79729: LD_INT 1
79731: ARRAY
79732: PPUSH
79733: CALL_OW 255
79737: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
79738: LD_ADDR_VAR 0 6
79742: PUSH
79743: LD_EXP 36
79747: PUSH
79748: LD_VAR 0 2
79752: ARRAY
79753: PPUSH
79754: LD_INT 30
79756: PUSH
79757: LD_INT 3
79759: PUSH
79760: EMPTY
79761: LIST
79762: LIST
79763: PPUSH
79764: CALL_OW 72
79768: ST_TO_ADDR
// if not fac then
79769: LD_VAR 0 6
79773: NOT
79774: IFFALSE 79825
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
79776: LD_ADDR_VAR 0 6
79780: PUSH
79781: LD_EXP 36
79785: PUSH
79786: LD_VAR 0 2
79790: ARRAY
79791: PPUSH
79792: LD_INT 2
79794: PUSH
79795: LD_INT 30
79797: PUSH
79798: LD_INT 0
79800: PUSH
79801: EMPTY
79802: LIST
79803: LIST
79804: PUSH
79805: LD_INT 30
79807: PUSH
79808: LD_INT 1
79810: PUSH
79811: EMPTY
79812: LIST
79813: LIST
79814: PUSH
79815: EMPTY
79816: LIST
79817: LIST
79818: LIST
79819: PPUSH
79820: CALL_OW 72
79824: ST_TO_ADDR
// if not fac then
79825: LD_VAR 0 6
79829: NOT
79830: IFFALSE 79834
// continue ;
79832: GO 79682
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
79834: LD_ADDR_VAR 0 7
79838: PUSH
79839: LD_EXP 60
79843: PUSH
79844: LD_VAR 0 2
79848: ARRAY
79849: PPUSH
79850: LD_INT 22
79852: PUSH
79853: LD_VAR 0 5
79857: PUSH
79858: EMPTY
79859: LIST
79860: LIST
79861: PUSH
79862: LD_INT 21
79864: PUSH
79865: LD_INT 2
79867: PUSH
79868: EMPTY
79869: LIST
79870: LIST
79871: PUSH
79872: LD_INT 3
79874: PUSH
79875: LD_INT 24
79877: PUSH
79878: LD_INT 1000
79880: PUSH
79881: EMPTY
79882: LIST
79883: LIST
79884: PUSH
79885: EMPTY
79886: LIST
79887: LIST
79888: PUSH
79889: EMPTY
79890: LIST
79891: LIST
79892: LIST
79893: PPUSH
79894: CALL_OW 70
79898: ST_TO_ADDR
// for j in fac do
79899: LD_ADDR_VAR 0 3
79903: PUSH
79904: LD_VAR 0 6
79908: PUSH
79909: FOR_IN
79910: IFFALSE 79991
// vehs := vehs union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , j , 15 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
79912: LD_ADDR_VAR 0 7
79916: PUSH
79917: LD_VAR 0 7
79921: PUSH
79922: LD_INT 22
79924: PUSH
79925: LD_VAR 0 5
79929: PUSH
79930: EMPTY
79931: LIST
79932: LIST
79933: PUSH
79934: LD_INT 91
79936: PUSH
79937: LD_VAR 0 3
79941: PUSH
79942: LD_INT 15
79944: PUSH
79945: EMPTY
79946: LIST
79947: LIST
79948: LIST
79949: PUSH
79950: LD_INT 21
79952: PUSH
79953: LD_INT 2
79955: PUSH
79956: EMPTY
79957: LIST
79958: LIST
79959: PUSH
79960: LD_INT 3
79962: PUSH
79963: LD_INT 24
79965: PUSH
79966: LD_INT 1000
79968: PUSH
79969: EMPTY
79970: LIST
79971: LIST
79972: PUSH
79973: EMPTY
79974: LIST
79975: LIST
79976: PUSH
79977: EMPTY
79978: LIST
79979: LIST
79980: LIST
79981: LIST
79982: PPUSH
79983: CALL_OW 69
79987: UNION
79988: ST_TO_ADDR
79989: GO 79909
79991: POP
79992: POP
// if not vehs then
79993: LD_VAR 0 7
79997: NOT
79998: IFFALSE 80024
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
80000: LD_ADDR_EXP 48
80004: PUSH
80005: LD_EXP 48
80009: PPUSH
80010: LD_VAR 0 2
80014: PPUSH
80015: EMPTY
80016: PPUSH
80017: CALL_OW 1
80021: ST_TO_ADDR
// continue ;
80022: GO 79682
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
80024: LD_ADDR_VAR 0 8
80028: PUSH
80029: LD_EXP 36
80033: PUSH
80034: LD_VAR 0 2
80038: ARRAY
80039: PPUSH
80040: LD_INT 30
80042: PUSH
80043: LD_INT 3
80045: PUSH
80046: EMPTY
80047: LIST
80048: LIST
80049: PPUSH
80050: CALL_OW 72
80054: ST_TO_ADDR
// if tmp then
80055: LD_VAR 0 8
80059: IFFALSE 80162
// begin for j in tmp do
80061: LD_ADDR_VAR 0 3
80065: PUSH
80066: LD_VAR 0 8
80070: PUSH
80071: FOR_IN
80072: IFFALSE 80160
// for k in UnitsInside ( j ) do
80074: LD_ADDR_VAR 0 4
80078: PUSH
80079: LD_VAR 0 3
80083: PPUSH
80084: CALL_OW 313
80088: PUSH
80089: FOR_IN
80090: IFFALSE 80156
// if k then
80092: LD_VAR 0 4
80096: IFFALSE 80154
// if not k in mc_repair_vehicle [ i ] then
80098: LD_VAR 0 4
80102: PUSH
80103: LD_EXP 48
80107: PUSH
80108: LD_VAR 0 2
80112: ARRAY
80113: IN
80114: NOT
80115: IFFALSE 80154
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
80117: LD_ADDR_EXP 48
80121: PUSH
80122: LD_EXP 48
80126: PPUSH
80127: LD_VAR 0 2
80131: PPUSH
80132: LD_EXP 48
80136: PUSH
80137: LD_VAR 0 2
80141: ARRAY
80142: PUSH
80143: LD_VAR 0 4
80147: UNION
80148: PPUSH
80149: CALL_OW 1
80153: ST_TO_ADDR
80154: GO 80089
80156: POP
80157: POP
80158: GO 80071
80160: POP
80161: POP
// end ; if not mc_repair_vehicle [ i ] then
80162: LD_EXP 48
80166: PUSH
80167: LD_VAR 0 2
80171: ARRAY
80172: NOT
80173: IFFALSE 80177
// continue ;
80175: GO 79682
// for j in mc_repair_vehicle [ i ] do
80177: LD_ADDR_VAR 0 3
80181: PUSH
80182: LD_EXP 48
80186: PUSH
80187: LD_VAR 0 2
80191: ARRAY
80192: PUSH
80193: FOR_IN
80194: IFFALSE 80360
// begin if GetClass ( j ) <> 3 then
80196: LD_VAR 0 3
80200: PPUSH
80201: CALL_OW 257
80205: PUSH
80206: LD_INT 3
80208: NONEQUAL
80209: IFFALSE 80250
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] diff j ) ;
80211: LD_ADDR_EXP 48
80215: PUSH
80216: LD_EXP 48
80220: PPUSH
80221: LD_VAR 0 2
80225: PPUSH
80226: LD_EXP 48
80230: PUSH
80231: LD_VAR 0 2
80235: ARRAY
80236: PUSH
80237: LD_VAR 0 3
80241: DIFF
80242: PPUSH
80243: CALL_OW 1
80247: ST_TO_ADDR
// continue ;
80248: GO 80193
// end ; if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
80250: LD_VAR 0 3
80254: PPUSH
80255: CALL_OW 311
80259: NOT
80260: PUSH
80261: LD_VAR 0 3
80265: PUSH
80266: LD_EXP 39
80270: PUSH
80271: LD_VAR 0 2
80275: ARRAY
80276: PUSH
80277: LD_INT 1
80279: ARRAY
80280: IN
80281: NOT
80282: AND
80283: PUSH
80284: LD_VAR 0 3
80288: PUSH
80289: LD_EXP 39
80293: PUSH
80294: LD_VAR 0 2
80298: ARRAY
80299: PUSH
80300: LD_INT 2
80302: ARRAY
80303: IN
80304: NOT
80305: AND
80306: IFFALSE 80358
// begin if IsInUnit ( j ) then
80308: LD_VAR 0 3
80312: PPUSH
80313: CALL_OW 310
80317: IFFALSE 80328
// ComExitBuilding ( j ) ;
80319: LD_VAR 0 3
80323: PPUSH
80324: CALL_OW 122
// if not HasTask ( j ) then
80328: LD_VAR 0 3
80332: PPUSH
80333: CALL_OW 314
80337: NOT
80338: IFFALSE 80358
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
80340: LD_VAR 0 3
80344: PPUSH
80345: LD_VAR 0 7
80349: PUSH
80350: LD_INT 1
80352: ARRAY
80353: PPUSH
80354: CALL_OW 189
// end ; end ;
80358: GO 80193
80360: POP
80361: POP
// end ;
80362: GO 79682
80364: POP
80365: POP
// end ;
80366: LD_VAR 0 1
80370: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
80371: LD_INT 0
80373: PPUSH
80374: PPUSH
80375: PPUSH
80376: PPUSH
80377: PPUSH
80378: PPUSH
80379: PPUSH
80380: PPUSH
80381: PPUSH
80382: PPUSH
80383: PPUSH
// if not mc_bases then
80384: LD_EXP 36
80388: NOT
80389: IFFALSE 80393
// exit ;
80391: GO 81195
// for i = 1 to mc_bases do
80393: LD_ADDR_VAR 0 2
80397: PUSH
80398: DOUBLE
80399: LD_INT 1
80401: DEC
80402: ST_TO_ADDR
80403: LD_EXP 36
80407: PUSH
80408: FOR_TO
80409: IFFALSE 81193
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
80411: LD_EXP 64
80415: PUSH
80416: LD_VAR 0 2
80420: ARRAY
80421: NOT
80422: PUSH
80423: LD_EXP 39
80427: PUSH
80428: LD_VAR 0 2
80432: ARRAY
80433: PUSH
80434: LD_INT 1
80436: ARRAY
80437: OR
80438: PUSH
80439: LD_EXP 39
80443: PUSH
80444: LD_VAR 0 2
80448: ARRAY
80449: PUSH
80450: LD_INT 2
80452: ARRAY
80453: OR
80454: PUSH
80455: LD_EXP 62
80459: PUSH
80460: LD_VAR 0 2
80464: ARRAY
80465: PPUSH
80466: LD_INT 1
80468: PPUSH
80469: CALL_OW 325
80473: NOT
80474: OR
80475: PUSH
80476: LD_EXP 59
80480: PUSH
80481: LD_VAR 0 2
80485: ARRAY
80486: OR
80487: IFFALSE 80491
// continue ;
80489: GO 80408
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
80491: LD_ADDR_VAR 0 8
80495: PUSH
80496: LD_EXP 36
80500: PUSH
80501: LD_VAR 0 2
80505: ARRAY
80506: PPUSH
80507: LD_INT 25
80509: PUSH
80510: LD_INT 4
80512: PUSH
80513: EMPTY
80514: LIST
80515: LIST
80516: PUSH
80517: LD_INT 50
80519: PUSH
80520: EMPTY
80521: LIST
80522: PUSH
80523: LD_INT 3
80525: PUSH
80526: LD_INT 60
80528: PUSH
80529: EMPTY
80530: LIST
80531: PUSH
80532: EMPTY
80533: LIST
80534: LIST
80535: PUSH
80536: EMPTY
80537: LIST
80538: LIST
80539: LIST
80540: PPUSH
80541: CALL_OW 72
80545: PUSH
80546: LD_EXP 40
80550: PUSH
80551: LD_VAR 0 2
80555: ARRAY
80556: DIFF
80557: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
80558: LD_ADDR_VAR 0 9
80562: PUSH
80563: LD_EXP 36
80567: PUSH
80568: LD_VAR 0 2
80572: ARRAY
80573: PPUSH
80574: LD_INT 2
80576: PUSH
80577: LD_INT 30
80579: PUSH
80580: LD_INT 0
80582: PUSH
80583: EMPTY
80584: LIST
80585: LIST
80586: PUSH
80587: LD_INT 30
80589: PUSH
80590: LD_INT 1
80592: PUSH
80593: EMPTY
80594: LIST
80595: LIST
80596: PUSH
80597: EMPTY
80598: LIST
80599: LIST
80600: LIST
80601: PPUSH
80602: CALL_OW 72
80606: ST_TO_ADDR
// if not tmp or not dep then
80607: LD_VAR 0 8
80611: NOT
80612: PUSH
80613: LD_VAR 0 9
80617: NOT
80618: OR
80619: IFFALSE 80623
// continue ;
80621: GO 80408
// side := GetSide ( tmp [ 1 ] ) ;
80623: LD_ADDR_VAR 0 11
80627: PUSH
80628: LD_VAR 0 8
80632: PUSH
80633: LD_INT 1
80635: ARRAY
80636: PPUSH
80637: CALL_OW 255
80641: ST_TO_ADDR
// dep := dep [ 1 ] ;
80642: LD_ADDR_VAR 0 9
80646: PUSH
80647: LD_VAR 0 9
80651: PUSH
80652: LD_INT 1
80654: ARRAY
80655: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
80656: LD_ADDR_VAR 0 7
80660: PUSH
80661: LD_EXP 64
80665: PUSH
80666: LD_VAR 0 2
80670: ARRAY
80671: PPUSH
80672: LD_INT 22
80674: PUSH
80675: LD_INT 0
80677: PUSH
80678: EMPTY
80679: LIST
80680: LIST
80681: PUSH
80682: LD_INT 25
80684: PUSH
80685: LD_INT 12
80687: PUSH
80688: EMPTY
80689: LIST
80690: LIST
80691: PUSH
80692: EMPTY
80693: LIST
80694: LIST
80695: PPUSH
80696: CALL_OW 70
80700: PUSH
80701: LD_INT 22
80703: PUSH
80704: LD_INT 0
80706: PUSH
80707: EMPTY
80708: LIST
80709: LIST
80710: PUSH
80711: LD_INT 25
80713: PUSH
80714: LD_INT 12
80716: PUSH
80717: EMPTY
80718: LIST
80719: LIST
80720: PUSH
80721: LD_INT 91
80723: PUSH
80724: LD_VAR 0 9
80728: PUSH
80729: LD_INT 20
80731: PUSH
80732: EMPTY
80733: LIST
80734: LIST
80735: LIST
80736: PUSH
80737: EMPTY
80738: LIST
80739: LIST
80740: LIST
80741: PPUSH
80742: CALL_OW 69
80746: UNION
80747: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
80748: LD_ADDR_VAR 0 10
80752: PUSH
80753: LD_EXP 64
80757: PUSH
80758: LD_VAR 0 2
80762: ARRAY
80763: PPUSH
80764: LD_INT 81
80766: PUSH
80767: LD_VAR 0 11
80771: PUSH
80772: EMPTY
80773: LIST
80774: LIST
80775: PPUSH
80776: CALL_OW 70
80780: ST_TO_ADDR
// if not apes or danger_at_area then
80781: LD_VAR 0 7
80785: NOT
80786: PUSH
80787: LD_VAR 0 10
80791: OR
80792: IFFALSE 80842
// begin if mc_taming [ i ] then
80794: LD_EXP 67
80798: PUSH
80799: LD_VAR 0 2
80803: ARRAY
80804: IFFALSE 80840
// begin MC_Reset ( i , 121 ) ;
80806: LD_VAR 0 2
80810: PPUSH
80811: LD_INT 121
80813: PPUSH
80814: CALL 66173 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
80818: LD_ADDR_EXP 67
80822: PUSH
80823: LD_EXP 67
80827: PPUSH
80828: LD_VAR 0 2
80832: PPUSH
80833: EMPTY
80834: PPUSH
80835: CALL_OW 1
80839: ST_TO_ADDR
// end ; continue ;
80840: GO 80408
// end ; for j in tmp do
80842: LD_ADDR_VAR 0 3
80846: PUSH
80847: LD_VAR 0 8
80851: PUSH
80852: FOR_IN
80853: IFFALSE 81189
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
80855: LD_VAR 0 3
80859: PUSH
80860: LD_EXP 67
80864: PUSH
80865: LD_VAR 0 2
80869: ARRAY
80870: IN
80871: NOT
80872: PUSH
80873: LD_EXP 67
80877: PUSH
80878: LD_VAR 0 2
80882: ARRAY
80883: PUSH
80884: LD_INT 3
80886: LESS
80887: AND
80888: IFFALSE 80946
// begin SetTag ( j , 121 ) ;
80890: LD_VAR 0 3
80894: PPUSH
80895: LD_INT 121
80897: PPUSH
80898: CALL_OW 109
// mc_taming := ReplaceIn ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
80902: LD_ADDR_EXP 67
80906: PUSH
80907: LD_EXP 67
80911: PPUSH
80912: LD_VAR 0 2
80916: PUSH
80917: LD_EXP 67
80921: PUSH
80922: LD_VAR 0 2
80926: ARRAY
80927: PUSH
80928: LD_INT 1
80930: PLUS
80931: PUSH
80932: EMPTY
80933: LIST
80934: LIST
80935: PPUSH
80936: LD_VAR 0 3
80940: PPUSH
80941: CALL 26211 0 3
80945: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
80946: LD_VAR 0 3
80950: PUSH
80951: LD_EXP 67
80955: PUSH
80956: LD_VAR 0 2
80960: ARRAY
80961: IN
80962: IFFALSE 81187
// begin if GetClass ( j ) <> 4 then
80964: LD_VAR 0 3
80968: PPUSH
80969: CALL_OW 257
80973: PUSH
80974: LD_INT 4
80976: NONEQUAL
80977: IFFALSE 81030
// begin mc_taming := Replace ( mc_taming , i , mc_taming [ i ] diff j ) ;
80979: LD_ADDR_EXP 67
80983: PUSH
80984: LD_EXP 67
80988: PPUSH
80989: LD_VAR 0 2
80993: PPUSH
80994: LD_EXP 67
80998: PUSH
80999: LD_VAR 0 2
81003: ARRAY
81004: PUSH
81005: LD_VAR 0 3
81009: DIFF
81010: PPUSH
81011: CALL_OW 1
81015: ST_TO_ADDR
// SetTag ( j , 0 ) ;
81016: LD_VAR 0 3
81020: PPUSH
81021: LD_INT 0
81023: PPUSH
81024: CALL_OW 109
// continue ;
81028: GO 80852
// end ; if IsInUnit ( j ) then
81030: LD_VAR 0 3
81034: PPUSH
81035: CALL_OW 310
81039: IFFALSE 81050
// ComExitBuilding ( j ) ;
81041: LD_VAR 0 3
81045: PPUSH
81046: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
81050: LD_ADDR_VAR 0 6
81054: PUSH
81055: LD_VAR 0 7
81059: PPUSH
81060: LD_VAR 0 3
81064: PPUSH
81065: CALL_OW 74
81069: ST_TO_ADDR
// if not ape then
81070: LD_VAR 0 6
81074: NOT
81075: IFFALSE 81079
// break ;
81077: GO 81189
// x := GetX ( ape ) ;
81079: LD_ADDR_VAR 0 4
81083: PUSH
81084: LD_VAR 0 6
81088: PPUSH
81089: CALL_OW 250
81093: ST_TO_ADDR
// y := GetY ( ape ) ;
81094: LD_ADDR_VAR 0 5
81098: PUSH
81099: LD_VAR 0 6
81103: PPUSH
81104: CALL_OW 251
81108: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
81109: LD_VAR 0 4
81113: PPUSH
81114: LD_VAR 0 5
81118: PPUSH
81119: CALL_OW 488
81123: NOT
81124: PUSH
81125: LD_VAR 0 11
81129: PPUSH
81130: LD_VAR 0 4
81134: PPUSH
81135: LD_VAR 0 5
81139: PPUSH
81140: LD_INT 20
81142: PPUSH
81143: CALL 27107 0 4
81147: PUSH
81148: LD_INT 4
81150: ARRAY
81151: OR
81152: IFFALSE 81156
// break ;
81154: GO 81189
// if not HasTask ( j ) then
81156: LD_VAR 0 3
81160: PPUSH
81161: CALL_OW 314
81165: NOT
81166: IFFALSE 81187
// ComTameXY ( j , x , y ) ;
81168: LD_VAR 0 3
81172: PPUSH
81173: LD_VAR 0 4
81177: PPUSH
81178: LD_VAR 0 5
81182: PPUSH
81183: CALL_OW 131
// end ; end ;
81187: GO 80852
81189: POP
81190: POP
// end ;
81191: GO 80408
81193: POP
81194: POP
// end ;
81195: LD_VAR 0 1
81199: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
81200: LD_INT 0
81202: PPUSH
81203: PPUSH
81204: PPUSH
81205: PPUSH
81206: PPUSH
81207: PPUSH
81208: PPUSH
81209: PPUSH
// if not mc_bases then
81210: LD_EXP 36
81214: NOT
81215: IFFALSE 81219
// exit ;
81217: GO 81845
// for i = 1 to mc_bases do
81219: LD_ADDR_VAR 0 2
81223: PUSH
81224: DOUBLE
81225: LD_INT 1
81227: DEC
81228: ST_TO_ADDR
81229: LD_EXP 36
81233: PUSH
81234: FOR_TO
81235: IFFALSE 81843
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
81237: LD_EXP 65
81241: PUSH
81242: LD_VAR 0 2
81246: ARRAY
81247: NOT
81248: PUSH
81249: LD_EXP 65
81253: PUSH
81254: LD_VAR 0 2
81258: ARRAY
81259: PPUSH
81260: LD_INT 25
81262: PUSH
81263: LD_INT 12
81265: PUSH
81266: EMPTY
81267: LIST
81268: LIST
81269: PPUSH
81270: CALL_OW 72
81274: NOT
81275: OR
81276: IFFALSE 81280
// continue ;
81278: GO 81234
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
81280: LD_ADDR_VAR 0 5
81284: PUSH
81285: LD_EXP 65
81289: PUSH
81290: LD_VAR 0 2
81294: ARRAY
81295: PUSH
81296: LD_INT 1
81298: ARRAY
81299: PPUSH
81300: CALL_OW 255
81304: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
81305: LD_VAR 0 5
81309: PPUSH
81310: LD_INT 2
81312: PPUSH
81313: CALL_OW 325
81317: IFFALSE 81570
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
81319: LD_ADDR_VAR 0 4
81323: PUSH
81324: LD_EXP 65
81328: PUSH
81329: LD_VAR 0 2
81333: ARRAY
81334: PPUSH
81335: LD_INT 25
81337: PUSH
81338: LD_INT 16
81340: PUSH
81341: EMPTY
81342: LIST
81343: LIST
81344: PPUSH
81345: CALL_OW 72
81349: ST_TO_ADDR
// if tmp < 6 then
81350: LD_VAR 0 4
81354: PUSH
81355: LD_INT 6
81357: LESS
81358: IFFALSE 81570
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
81360: LD_ADDR_VAR 0 6
81364: PUSH
81365: LD_EXP 36
81369: PUSH
81370: LD_VAR 0 2
81374: ARRAY
81375: PPUSH
81376: LD_INT 2
81378: PUSH
81379: LD_INT 30
81381: PUSH
81382: LD_INT 0
81384: PUSH
81385: EMPTY
81386: LIST
81387: LIST
81388: PUSH
81389: LD_INT 30
81391: PUSH
81392: LD_INT 1
81394: PUSH
81395: EMPTY
81396: LIST
81397: LIST
81398: PUSH
81399: EMPTY
81400: LIST
81401: LIST
81402: LIST
81403: PPUSH
81404: CALL_OW 72
81408: ST_TO_ADDR
// if depot then
81409: LD_VAR 0 6
81413: IFFALSE 81570
// begin selected := 0 ;
81415: LD_ADDR_VAR 0 7
81419: PUSH
81420: LD_INT 0
81422: ST_TO_ADDR
// for j in depot do
81423: LD_ADDR_VAR 0 3
81427: PUSH
81428: LD_VAR 0 6
81432: PUSH
81433: FOR_IN
81434: IFFALSE 81465
// begin if UnitsInside ( j ) < 6 then
81436: LD_VAR 0 3
81440: PPUSH
81441: CALL_OW 313
81445: PUSH
81446: LD_INT 6
81448: LESS
81449: IFFALSE 81463
// begin selected := j ;
81451: LD_ADDR_VAR 0 7
81455: PUSH
81456: LD_VAR 0 3
81460: ST_TO_ADDR
// break ;
81461: GO 81465
// end ; end ;
81463: GO 81433
81465: POP
81466: POP
// if selected then
81467: LD_VAR 0 7
81471: IFFALSE 81570
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
81473: LD_ADDR_VAR 0 3
81477: PUSH
81478: LD_EXP 65
81482: PUSH
81483: LD_VAR 0 2
81487: ARRAY
81488: PPUSH
81489: LD_INT 25
81491: PUSH
81492: LD_INT 12
81494: PUSH
81495: EMPTY
81496: LIST
81497: LIST
81498: PPUSH
81499: CALL_OW 72
81503: PUSH
81504: FOR_IN
81505: IFFALSE 81568
// if not HasTask ( j ) then
81507: LD_VAR 0 3
81511: PPUSH
81512: CALL_OW 314
81516: NOT
81517: IFFALSE 81566
// begin if not IsInUnit ( j ) then
81519: LD_VAR 0 3
81523: PPUSH
81524: CALL_OW 310
81528: NOT
81529: IFFALSE 81545
// ComEnterUnit ( j , selected ) ;
81531: LD_VAR 0 3
81535: PPUSH
81536: LD_VAR 0 7
81540: PPUSH
81541: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
81545: LD_VAR 0 3
81549: PPUSH
81550: LD_INT 16
81552: PPUSH
81553: CALL_OW 183
// AddComExitBuilding ( j ) ;
81557: LD_VAR 0 3
81561: PPUSH
81562: CALL_OW 182
// end ;
81566: GO 81504
81568: POP
81569: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
81570: LD_VAR 0 5
81574: PPUSH
81575: LD_INT 11
81577: PPUSH
81578: CALL_OW 325
81582: IFFALSE 81841
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
81584: LD_ADDR_VAR 0 4
81588: PUSH
81589: LD_EXP 65
81593: PUSH
81594: LD_VAR 0 2
81598: ARRAY
81599: PPUSH
81600: LD_INT 25
81602: PUSH
81603: LD_INT 16
81605: PUSH
81606: EMPTY
81607: LIST
81608: LIST
81609: PPUSH
81610: CALL_OW 72
81614: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
81615: LD_VAR 0 4
81619: PUSH
81620: LD_INT 6
81622: GREATEREQUAL
81623: PUSH
81624: LD_VAR 0 5
81628: PPUSH
81629: LD_INT 2
81631: PPUSH
81632: CALL_OW 325
81636: NOT
81637: OR
81638: IFFALSE 81841
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
81640: LD_ADDR_VAR 0 8
81644: PUSH
81645: LD_EXP 36
81649: PUSH
81650: LD_VAR 0 2
81654: ARRAY
81655: PPUSH
81656: LD_INT 2
81658: PUSH
81659: LD_INT 30
81661: PUSH
81662: LD_INT 4
81664: PUSH
81665: EMPTY
81666: LIST
81667: LIST
81668: PUSH
81669: LD_INT 30
81671: PUSH
81672: LD_INT 5
81674: PUSH
81675: EMPTY
81676: LIST
81677: LIST
81678: PUSH
81679: EMPTY
81680: LIST
81681: LIST
81682: LIST
81683: PPUSH
81684: CALL_OW 72
81688: ST_TO_ADDR
// if barracks then
81689: LD_VAR 0 8
81693: IFFALSE 81841
// begin selected := 0 ;
81695: LD_ADDR_VAR 0 7
81699: PUSH
81700: LD_INT 0
81702: ST_TO_ADDR
// for j in barracks do
81703: LD_ADDR_VAR 0 3
81707: PUSH
81708: LD_VAR 0 8
81712: PUSH
81713: FOR_IN
81714: IFFALSE 81745
// begin if UnitsInside ( j ) < 6 then
81716: LD_VAR 0 3
81720: PPUSH
81721: CALL_OW 313
81725: PUSH
81726: LD_INT 6
81728: LESS
81729: IFFALSE 81743
// begin selected := j ;
81731: LD_ADDR_VAR 0 7
81735: PUSH
81736: LD_VAR 0 3
81740: ST_TO_ADDR
// break ;
81741: GO 81745
// end ; end ;
81743: GO 81713
81745: POP
81746: POP
// if selected then
81747: LD_VAR 0 7
81751: IFFALSE 81841
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
81753: LD_ADDR_VAR 0 3
81757: PUSH
81758: LD_EXP 65
81762: PUSH
81763: LD_VAR 0 2
81767: ARRAY
81768: PPUSH
81769: LD_INT 25
81771: PUSH
81772: LD_INT 12
81774: PUSH
81775: EMPTY
81776: LIST
81777: LIST
81778: PPUSH
81779: CALL_OW 72
81783: PUSH
81784: FOR_IN
81785: IFFALSE 81839
// if not IsInUnit ( j ) and not HasTask ( j ) then
81787: LD_VAR 0 3
81791: PPUSH
81792: CALL_OW 310
81796: NOT
81797: PUSH
81798: LD_VAR 0 3
81802: PPUSH
81803: CALL_OW 314
81807: NOT
81808: AND
81809: IFFALSE 81837
// begin ComEnterUnit ( j , selected ) ;
81811: LD_VAR 0 3
81815: PPUSH
81816: LD_VAR 0 7
81820: PPUSH
81821: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
81825: LD_VAR 0 3
81829: PPUSH
81830: LD_INT 15
81832: PPUSH
81833: CALL_OW 183
// end ;
81837: GO 81784
81839: POP
81840: POP
// end ; end ; end ; end ; end ;
81841: GO 81234
81843: POP
81844: POP
// end ;
81845: LD_VAR 0 1
81849: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
81850: LD_INT 0
81852: PPUSH
81853: PPUSH
81854: PPUSH
81855: PPUSH
// if not mc_bases then
81856: LD_EXP 36
81860: NOT
81861: IFFALSE 81865
// exit ;
81863: GO 82043
// for i = 1 to mc_bases do
81865: LD_ADDR_VAR 0 2
81869: PUSH
81870: DOUBLE
81871: LD_INT 1
81873: DEC
81874: ST_TO_ADDR
81875: LD_EXP 36
81879: PUSH
81880: FOR_TO
81881: IFFALSE 82041
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
81883: LD_ADDR_VAR 0 4
81887: PUSH
81888: LD_EXP 36
81892: PUSH
81893: LD_VAR 0 2
81897: ARRAY
81898: PPUSH
81899: LD_INT 25
81901: PUSH
81902: LD_INT 9
81904: PUSH
81905: EMPTY
81906: LIST
81907: LIST
81908: PPUSH
81909: CALL_OW 72
81913: ST_TO_ADDR
// if not tmp then
81914: LD_VAR 0 4
81918: NOT
81919: IFFALSE 81923
// continue ;
81921: GO 81880
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
81923: LD_EXP 62
81927: PUSH
81928: LD_VAR 0 2
81932: ARRAY
81933: PPUSH
81934: LD_INT 29
81936: PPUSH
81937: CALL_OW 325
81941: NOT
81942: PUSH
81943: LD_EXP 62
81947: PUSH
81948: LD_VAR 0 2
81952: ARRAY
81953: PPUSH
81954: LD_INT 28
81956: PPUSH
81957: CALL_OW 325
81961: NOT
81962: AND
81963: IFFALSE 81967
// continue ;
81965: GO 81880
// for j in tmp do
81967: LD_ADDR_VAR 0 3
81971: PUSH
81972: LD_VAR 0 4
81976: PUSH
81977: FOR_IN
81978: IFFALSE 82037
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
81980: LD_VAR 0 3
81984: PUSH
81985: LD_EXP 39
81989: PUSH
81990: LD_VAR 0 2
81994: ARRAY
81995: PUSH
81996: LD_INT 1
81998: ARRAY
81999: IN
82000: NOT
82001: PUSH
82002: LD_VAR 0 3
82006: PUSH
82007: LD_EXP 39
82011: PUSH
82012: LD_VAR 0 2
82016: ARRAY
82017: PUSH
82018: LD_INT 2
82020: ARRAY
82021: IN
82022: NOT
82023: AND
82024: IFFALSE 82035
// ComSpaceTimeShoot ( j ) ;
82026: LD_VAR 0 3
82030: PPUSH
82031: CALL 20161 0 1
82035: GO 81977
82037: POP
82038: POP
// end ;
82039: GO 81880
82041: POP
82042: POP
// end ;
82043: LD_VAR 0 1
82047: RET
// export function MC_TeleportExit ( ) ; var i , j , x , y , save_point , tmp , teleports , sci ; begin
82048: LD_INT 0
82050: PPUSH
82051: PPUSH
82052: PPUSH
82053: PPUSH
82054: PPUSH
82055: PPUSH
82056: PPUSH
82057: PPUSH
82058: PPUSH
// if not mc_bases then
82059: LD_EXP 36
82063: NOT
82064: IFFALSE 82068
// exit ;
82066: GO 82690
// for i = 1 to mc_bases do
82068: LD_ADDR_VAR 0 2
82072: PUSH
82073: DOUBLE
82074: LD_INT 1
82076: DEC
82077: ST_TO_ADDR
82078: LD_EXP 36
82082: PUSH
82083: FOR_TO
82084: IFFALSE 82688
// begin if not mc_teleport_exit [ i ] or GetTech ( tech_targTeleport , mc_sides [ i ] ) <> state_researched then
82086: LD_EXP 71
82090: PUSH
82091: LD_VAR 0 2
82095: ARRAY
82096: NOT
82097: PUSH
82098: LD_INT 38
82100: PPUSH
82101: LD_EXP 62
82105: PUSH
82106: LD_VAR 0 2
82110: ARRAY
82111: PPUSH
82112: CALL_OW 321
82116: PUSH
82117: LD_INT 2
82119: NONEQUAL
82120: OR
82121: IFFALSE 82125
// continue ;
82123: GO 82083
// teleports := UnitFilter ( mc_bases [ i ] , [ f_btype , b_teleport ] ) ;
82125: LD_ADDR_VAR 0 8
82129: PUSH
82130: LD_EXP 36
82134: PUSH
82135: LD_VAR 0 2
82139: ARRAY
82140: PPUSH
82141: LD_INT 30
82143: PUSH
82144: LD_INT 34
82146: PUSH
82147: EMPTY
82148: LIST
82149: LIST
82150: PPUSH
82151: CALL_OW 72
82155: ST_TO_ADDR
// sci := FilterByTag ( UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) , 0 ) ;
82156: LD_ADDR_VAR 0 9
82160: PUSH
82161: LD_EXP 36
82165: PUSH
82166: LD_VAR 0 2
82170: ARRAY
82171: PPUSH
82172: LD_INT 25
82174: PUSH
82175: LD_INT 4
82177: PUSH
82178: EMPTY
82179: LIST
82180: LIST
82181: PPUSH
82182: CALL_OW 72
82186: PPUSH
82187: LD_INT 0
82189: PPUSH
82190: CALL 59471 0 2
82194: ST_TO_ADDR
// if not sci or not teleports or FilterByTag ( mc_bases [ i ] , 124 ) then
82195: LD_VAR 0 9
82199: NOT
82200: PUSH
82201: LD_VAR 0 8
82205: NOT
82206: OR
82207: PUSH
82208: LD_EXP 36
82212: PUSH
82213: LD_VAR 0 2
82217: ARRAY
82218: PPUSH
82219: LD_INT 124
82221: PPUSH
82222: CALL 59471 0 2
82226: OR
82227: IFFALSE 82231
// continue ;
82229: GO 82083
// if mc_teleport_exit_set [ i ] < mc_teleport_exit [ i ] and mc_teleport_exit_set [ i ] < teleports then
82231: LD_EXP 72
82235: PUSH
82236: LD_VAR 0 2
82240: ARRAY
82241: PUSH
82242: LD_EXP 71
82246: PUSH
82247: LD_VAR 0 2
82251: ARRAY
82252: LESS
82253: PUSH
82254: LD_EXP 72
82258: PUSH
82259: LD_VAR 0 2
82263: ARRAY
82264: PUSH
82265: LD_VAR 0 8
82269: LESS
82270: AND
82271: IFFALSE 82686
// begin tmp := sci [ 1 ] ;
82273: LD_ADDR_VAR 0 7
82277: PUSH
82278: LD_VAR 0 9
82282: PUSH
82283: LD_INT 1
82285: ARRAY
82286: ST_TO_ADDR
// SetTag ( tmp , 124 ) ;
82287: LD_VAR 0 7
82291: PPUSH
82292: LD_INT 124
82294: PPUSH
82295: CALL_OW 109
// for j = mc_teleport_exit [ i ] downto mc_teleport_exit [ i ] do
82299: LD_ADDR_VAR 0 3
82303: PUSH
82304: DOUBLE
82305: LD_EXP 71
82309: PUSH
82310: LD_VAR 0 2
82314: ARRAY
82315: INC
82316: ST_TO_ADDR
82317: LD_EXP 71
82321: PUSH
82322: LD_VAR 0 2
82326: ARRAY
82327: PUSH
82328: FOR_DOWNTO
82329: IFFALSE 82672
// begin if IsInUnit ( tmp ) then
82331: LD_VAR 0 7
82335: PPUSH
82336: CALL_OW 310
82340: IFFALSE 82351
// ComExitBuilding ( tmp ) ;
82342: LD_VAR 0 7
82346: PPUSH
82347: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
82351: LD_INT 35
82353: PPUSH
82354: CALL_OW 67
// until not IsInUnit ( tmp ) and not HasTask ( tmp ) ;
82358: LD_VAR 0 7
82362: PPUSH
82363: CALL_OW 310
82367: NOT
82368: PUSH
82369: LD_VAR 0 7
82373: PPUSH
82374: CALL_OW 314
82378: NOT
82379: AND
82380: IFFALSE 82351
// save_point := [ GetX ( tmp ) , GetY ( tmp ) ] ;
82382: LD_ADDR_VAR 0 6
82386: PUSH
82387: LD_VAR 0 7
82391: PPUSH
82392: CALL_OW 250
82396: PUSH
82397: LD_VAR 0 7
82401: PPUSH
82402: CALL_OW 251
82406: PUSH
82407: EMPTY
82408: LIST
82409: LIST
82410: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
82411: LD_INT 35
82413: PPUSH
82414: CALL_OW 67
// x := mc_teleport_exit [ i ] [ j ] [ 1 ] ;
82418: LD_ADDR_VAR 0 4
82422: PUSH
82423: LD_EXP 71
82427: PUSH
82428: LD_VAR 0 2
82432: ARRAY
82433: PUSH
82434: LD_VAR 0 3
82438: ARRAY
82439: PUSH
82440: LD_INT 1
82442: ARRAY
82443: ST_TO_ADDR
// y := mc_teleport_exit [ i ] [ j ] [ 2 ] ;
82444: LD_ADDR_VAR 0 5
82448: PUSH
82449: LD_EXP 71
82453: PUSH
82454: LD_VAR 0 2
82458: ARRAY
82459: PUSH
82460: LD_VAR 0 3
82464: ARRAY
82465: PUSH
82466: LD_INT 2
82468: ARRAY
82469: ST_TO_ADDR
// if DangerAtRange ( tmp , 10 ) [ 4 ] then
82470: LD_VAR 0 7
82474: PPUSH
82475: LD_INT 10
82477: PPUSH
82478: CALL 28804 0 2
82482: PUSH
82483: LD_INT 4
82485: ARRAY
82486: IFFALSE 82524
// begin ComMoveXY ( tmp , save_point [ 1 ] , save_point [ 2 ] ) ;
82488: LD_VAR 0 7
82492: PPUSH
82493: LD_VAR 0 6
82497: PUSH
82498: LD_INT 1
82500: ARRAY
82501: PPUSH
82502: LD_VAR 0 6
82506: PUSH
82507: LD_INT 2
82509: ARRAY
82510: PPUSH
82511: CALL_OW 111
// wait ( 0 0$10 ) ;
82515: LD_INT 350
82517: PPUSH
82518: CALL_OW 67
// end else
82522: GO 82550
// begin ComMoveXY ( tmp , x , y ) ;
82524: LD_VAR 0 7
82528: PPUSH
82529: LD_VAR 0 4
82533: PPUSH
82534: LD_VAR 0 5
82538: PPUSH
82539: CALL_OW 111
// wait ( 0 0$3 ) ;
82543: LD_INT 105
82545: PPUSH
82546: CALL_OW 67
// end ; until IsAt ( tmp , x , y ) ;
82550: LD_VAR 0 7
82554: PPUSH
82555: LD_VAR 0 4
82559: PPUSH
82560: LD_VAR 0 5
82564: PPUSH
82565: CALL_OW 307
82569: IFFALSE 82411
// ComTeleportExit ( tmp , x , y , teleports [ j ] ) ;
82571: LD_VAR 0 7
82575: PPUSH
82576: LD_VAR 0 4
82580: PPUSH
82581: LD_VAR 0 5
82585: PPUSH
82586: LD_VAR 0 8
82590: PUSH
82591: LD_VAR 0 3
82595: ARRAY
82596: PPUSH
82597: CALL_OW 156
// repeat wait ( 0 0$1 ) ;
82601: LD_INT 35
82603: PPUSH
82604: CALL_OW 67
// until not HasTask ( tmp ) ;
82608: LD_VAR 0 7
82612: PPUSH
82613: CALL_OW 314
82617: NOT
82618: IFFALSE 82601
// mc_teleport_exit_set := ReplaceIn ( mc_teleport_exit_set , [ i , mc_teleport_exit_set [ i ] + 1 ] , teleports [ j ] ) ;
82620: LD_ADDR_EXP 72
82624: PUSH
82625: LD_EXP 72
82629: PPUSH
82630: LD_VAR 0 2
82634: PUSH
82635: LD_EXP 72
82639: PUSH
82640: LD_VAR 0 2
82644: ARRAY
82645: PUSH
82646: LD_INT 1
82648: PLUS
82649: PUSH
82650: EMPTY
82651: LIST
82652: LIST
82653: PPUSH
82654: LD_VAR 0 8
82658: PUSH
82659: LD_VAR 0 3
82663: ARRAY
82664: PPUSH
82665: CALL 26211 0 3
82669: ST_TO_ADDR
// end ;
82670: GO 82328
82672: POP
82673: POP
// MC_Reset ( i , 124 ) ;
82674: LD_VAR 0 2
82678: PPUSH
82679: LD_INT 124
82681: PPUSH
82682: CALL 66173 0 2
// end ; end ;
82686: GO 82083
82688: POP
82689: POP
// end ;
82690: LD_VAR 0 1
82694: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
82695: LD_INT 0
82697: PPUSH
82698: PPUSH
82699: PPUSH
// if not mc_bases then
82700: LD_EXP 36
82704: NOT
82705: IFFALSE 82709
// exit ;
82707: GO 83315
// for i = 1 to mc_bases do
82709: LD_ADDR_VAR 0 2
82713: PUSH
82714: DOUBLE
82715: LD_INT 1
82717: DEC
82718: ST_TO_ADDR
82719: LD_EXP 36
82723: PUSH
82724: FOR_TO
82725: IFFALSE 83313
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
82727: LD_ADDR_VAR 0 3
82731: PUSH
82732: LD_EXP 36
82736: PUSH
82737: LD_VAR 0 2
82741: ARRAY
82742: PPUSH
82743: LD_INT 25
82745: PUSH
82746: LD_INT 4
82748: PUSH
82749: EMPTY
82750: LIST
82751: LIST
82752: PPUSH
82753: CALL_OW 72
82757: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
82758: LD_VAR 0 3
82762: NOT
82763: PUSH
82764: LD_EXP 73
82768: PUSH
82769: LD_VAR 0 2
82773: ARRAY
82774: NOT
82775: OR
82776: PUSH
82777: LD_EXP 36
82781: PUSH
82782: LD_VAR 0 2
82786: ARRAY
82787: PPUSH
82788: LD_INT 2
82790: PUSH
82791: LD_INT 30
82793: PUSH
82794: LD_INT 0
82796: PUSH
82797: EMPTY
82798: LIST
82799: LIST
82800: PUSH
82801: LD_INT 30
82803: PUSH
82804: LD_INT 1
82806: PUSH
82807: EMPTY
82808: LIST
82809: LIST
82810: PUSH
82811: EMPTY
82812: LIST
82813: LIST
82814: LIST
82815: PPUSH
82816: CALL_OW 72
82820: NOT
82821: OR
82822: IFFALSE 82872
// begin if mc_deposits_finder [ i ] then
82824: LD_EXP 74
82828: PUSH
82829: LD_VAR 0 2
82833: ARRAY
82834: IFFALSE 82870
// begin MC_Reset ( i , 125 ) ;
82836: LD_VAR 0 2
82840: PPUSH
82841: LD_INT 125
82843: PPUSH
82844: CALL 66173 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
82848: LD_ADDR_EXP 74
82852: PUSH
82853: LD_EXP 74
82857: PPUSH
82858: LD_VAR 0 2
82862: PPUSH
82863: EMPTY
82864: PPUSH
82865: CALL_OW 1
82869: ST_TO_ADDR
// end ; continue ;
82870: GO 82724
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
82872: LD_EXP 73
82876: PUSH
82877: LD_VAR 0 2
82881: ARRAY
82882: PUSH
82883: LD_INT 1
82885: ARRAY
82886: PUSH
82887: LD_INT 3
82889: ARRAY
82890: PUSH
82891: LD_INT 1
82893: EQUAL
82894: PUSH
82895: LD_INT 20
82897: PPUSH
82898: LD_EXP 62
82902: PUSH
82903: LD_VAR 0 2
82907: ARRAY
82908: PPUSH
82909: CALL_OW 321
82913: PUSH
82914: LD_INT 2
82916: NONEQUAL
82917: AND
82918: IFFALSE 82968
// begin if mc_deposits_finder [ i ] then
82920: LD_EXP 74
82924: PUSH
82925: LD_VAR 0 2
82929: ARRAY
82930: IFFALSE 82966
// begin MC_Reset ( i , 125 ) ;
82932: LD_VAR 0 2
82936: PPUSH
82937: LD_INT 125
82939: PPUSH
82940: CALL 66173 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
82944: LD_ADDR_EXP 74
82948: PUSH
82949: LD_EXP 74
82953: PPUSH
82954: LD_VAR 0 2
82958: PPUSH
82959: EMPTY
82960: PPUSH
82961: CALL_OW 1
82965: ST_TO_ADDR
// end ; continue ;
82966: GO 82724
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
82968: LD_EXP 73
82972: PUSH
82973: LD_VAR 0 2
82977: ARRAY
82978: PUSH
82979: LD_INT 1
82981: ARRAY
82982: PUSH
82983: LD_INT 1
82985: ARRAY
82986: PPUSH
82987: LD_EXP 73
82991: PUSH
82992: LD_VAR 0 2
82996: ARRAY
82997: PUSH
82998: LD_INT 1
83000: ARRAY
83001: PUSH
83002: LD_INT 2
83004: ARRAY
83005: PPUSH
83006: LD_EXP 62
83010: PUSH
83011: LD_VAR 0 2
83015: ARRAY
83016: PPUSH
83017: CALL_OW 440
83021: IFFALSE 83064
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
83023: LD_ADDR_EXP 73
83027: PUSH
83028: LD_EXP 73
83032: PPUSH
83033: LD_VAR 0 2
83037: PPUSH
83038: LD_EXP 73
83042: PUSH
83043: LD_VAR 0 2
83047: ARRAY
83048: PPUSH
83049: LD_INT 1
83051: PPUSH
83052: CALL_OW 3
83056: PPUSH
83057: CALL_OW 1
83061: ST_TO_ADDR
83062: GO 83311
// begin if not mc_deposits_finder [ i ] then
83064: LD_EXP 74
83068: PUSH
83069: LD_VAR 0 2
83073: ARRAY
83074: NOT
83075: IFFALSE 83127
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
83077: LD_ADDR_EXP 74
83081: PUSH
83082: LD_EXP 74
83086: PPUSH
83087: LD_VAR 0 2
83091: PPUSH
83092: LD_VAR 0 3
83096: PUSH
83097: LD_INT 1
83099: ARRAY
83100: PUSH
83101: EMPTY
83102: LIST
83103: PPUSH
83104: CALL_OW 1
83108: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
83109: LD_VAR 0 3
83113: PUSH
83114: LD_INT 1
83116: ARRAY
83117: PPUSH
83118: LD_INT 125
83120: PPUSH
83121: CALL_OW 109
// end else
83125: GO 83311
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
83127: LD_EXP 74
83131: PUSH
83132: LD_VAR 0 2
83136: ARRAY
83137: PUSH
83138: LD_INT 1
83140: ARRAY
83141: PPUSH
83142: CALL_OW 310
83146: IFFALSE 83169
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
83148: LD_EXP 74
83152: PUSH
83153: LD_VAR 0 2
83157: ARRAY
83158: PUSH
83159: LD_INT 1
83161: ARRAY
83162: PPUSH
83163: CALL_OW 122
83167: GO 83311
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
83169: LD_EXP 74
83173: PUSH
83174: LD_VAR 0 2
83178: ARRAY
83179: PUSH
83180: LD_INT 1
83182: ARRAY
83183: PPUSH
83184: CALL_OW 314
83188: NOT
83189: PUSH
83190: LD_EXP 74
83194: PUSH
83195: LD_VAR 0 2
83199: ARRAY
83200: PUSH
83201: LD_INT 1
83203: ARRAY
83204: PPUSH
83205: LD_EXP 73
83209: PUSH
83210: LD_VAR 0 2
83214: ARRAY
83215: PUSH
83216: LD_INT 1
83218: ARRAY
83219: PUSH
83220: LD_INT 1
83222: ARRAY
83223: PPUSH
83224: LD_EXP 73
83228: PUSH
83229: LD_VAR 0 2
83233: ARRAY
83234: PUSH
83235: LD_INT 1
83237: ARRAY
83238: PUSH
83239: LD_INT 2
83241: ARRAY
83242: PPUSH
83243: CALL_OW 297
83247: PUSH
83248: LD_INT 6
83250: GREATER
83251: AND
83252: IFFALSE 83311
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
83254: LD_EXP 74
83258: PUSH
83259: LD_VAR 0 2
83263: ARRAY
83264: PUSH
83265: LD_INT 1
83267: ARRAY
83268: PPUSH
83269: LD_EXP 73
83273: PUSH
83274: LD_VAR 0 2
83278: ARRAY
83279: PUSH
83280: LD_INT 1
83282: ARRAY
83283: PUSH
83284: LD_INT 1
83286: ARRAY
83287: PPUSH
83288: LD_EXP 73
83292: PUSH
83293: LD_VAR 0 2
83297: ARRAY
83298: PUSH
83299: LD_INT 1
83301: ARRAY
83302: PUSH
83303: LD_INT 2
83305: ARRAY
83306: PPUSH
83307: CALL_OW 111
// end ; end ; end ;
83311: GO 82724
83313: POP
83314: POP
// end ;
83315: LD_VAR 0 1
83319: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts , mcts , x ; begin
83320: LD_INT 0
83322: PPUSH
83323: PPUSH
83324: PPUSH
83325: PPUSH
83326: PPUSH
83327: PPUSH
83328: PPUSH
83329: PPUSH
83330: PPUSH
83331: PPUSH
83332: PPUSH
// if not mc_bases then
83333: LD_EXP 36
83337: NOT
83338: IFFALSE 83342
// exit ;
83340: GO 84066
// for i = 1 to mc_bases do
83342: LD_ADDR_VAR 0 2
83346: PUSH
83347: DOUBLE
83348: LD_INT 1
83350: DEC
83351: ST_TO_ADDR
83352: LD_EXP 36
83356: PUSH
83357: FOR_TO
83358: IFFALSE 84064
// begin if not mc_bases [ i ] then
83360: LD_EXP 36
83364: PUSH
83365: LD_VAR 0 2
83369: ARRAY
83370: NOT
83371: IFFALSE 83375
// continue ;
83373: GO 83357
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
83375: LD_ADDR_VAR 0 7
83379: PUSH
83380: LD_EXP 36
83384: PUSH
83385: LD_VAR 0 2
83389: ARRAY
83390: PUSH
83391: LD_INT 1
83393: ARRAY
83394: PPUSH
83395: CALL_OW 248
83399: ST_TO_ADDR
// if nation = 3 or not UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) then
83400: LD_VAR 0 7
83404: PUSH
83405: LD_INT 3
83407: EQUAL
83408: PUSH
83409: LD_EXP 55
83413: PUSH
83414: LD_VAR 0 2
83418: ARRAY
83419: PUSH
83420: LD_EXP 58
83424: PUSH
83425: LD_VAR 0 2
83429: ARRAY
83430: UNION
83431: PPUSH
83432: LD_INT 33
83434: PUSH
83435: LD_INT 2
83437: PUSH
83438: EMPTY
83439: LIST
83440: LIST
83441: PPUSH
83442: CALL_OW 72
83446: NOT
83447: OR
83448: IFFALSE 83452
// continue ;
83450: GO 83357
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
83452: LD_ADDR_VAR 0 9
83456: PUSH
83457: LD_EXP 36
83461: PUSH
83462: LD_VAR 0 2
83466: ARRAY
83467: PPUSH
83468: LD_INT 30
83470: PUSH
83471: LD_INT 36
83473: PUSH
83474: EMPTY
83475: LIST
83476: LIST
83477: PPUSH
83478: CALL_OW 72
83482: ST_TO_ADDR
// mcts := UnitFilter ( mc_vehicles [ i ] , [ f_weapon , ar_control_tower ] ) ;
83483: LD_ADDR_VAR 0 10
83487: PUSH
83488: LD_EXP 55
83492: PUSH
83493: LD_VAR 0 2
83497: ARRAY
83498: PPUSH
83499: LD_INT 34
83501: PUSH
83502: LD_INT 31
83504: PUSH
83505: EMPTY
83506: LIST
83507: LIST
83508: PPUSH
83509: CALL_OW 72
83513: ST_TO_ADDR
// if not cts and not mcts then
83514: LD_VAR 0 9
83518: NOT
83519: PUSH
83520: LD_VAR 0 10
83524: NOT
83525: AND
83526: IFFALSE 83530
// continue ;
83528: GO 83357
// x := cts ;
83530: LD_ADDR_VAR 0 11
83534: PUSH
83535: LD_VAR 0 9
83539: ST_TO_ADDR
// if not x then
83540: LD_VAR 0 11
83544: NOT
83545: IFFALSE 83557
// x := mcts ;
83547: LD_ADDR_VAR 0 11
83551: PUSH
83552: LD_VAR 0 10
83556: ST_TO_ADDR
// if mc_remote_driver [ i ] then
83557: LD_EXP 76
83561: PUSH
83562: LD_VAR 0 2
83566: ARRAY
83567: IFFALSE 83836
// for j in mc_remote_driver [ i ] do
83569: LD_ADDR_VAR 0 3
83573: PUSH
83574: LD_EXP 76
83578: PUSH
83579: LD_VAR 0 2
83583: ARRAY
83584: PUSH
83585: FOR_IN
83586: IFFALSE 83834
// begin if GetClass ( j ) <> 3 then
83588: LD_VAR 0 3
83592: PPUSH
83593: CALL_OW 257
83597: PUSH
83598: LD_INT 3
83600: NONEQUAL
83601: IFFALSE 83654
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff j ) ;
83603: LD_ADDR_EXP 76
83607: PUSH
83608: LD_EXP 76
83612: PPUSH
83613: LD_VAR 0 2
83617: PPUSH
83618: LD_EXP 76
83622: PUSH
83623: LD_VAR 0 2
83627: ARRAY
83628: PUSH
83629: LD_VAR 0 3
83633: DIFF
83634: PPUSH
83635: CALL_OW 1
83639: ST_TO_ADDR
// SetTag ( j , 0 ) ;
83640: LD_VAR 0 3
83644: PPUSH
83645: LD_INT 0
83647: PPUSH
83648: CALL_OW 109
// continue ;
83652: GO 83585
// end ; if not IsInUnit ( j ) or ( GetBType ( IsInUnit ( j ) ) <> b_control_tower and not IsDriver ( j ) ) then
83654: LD_VAR 0 3
83658: PPUSH
83659: CALL_OW 310
83663: NOT
83664: PUSH
83665: LD_VAR 0 3
83669: PPUSH
83670: CALL_OW 310
83674: PPUSH
83675: CALL_OW 266
83679: PUSH
83680: LD_INT 36
83682: NONEQUAL
83683: PUSH
83684: LD_VAR 0 3
83688: PPUSH
83689: CALL 59559 0 1
83693: NOT
83694: AND
83695: OR
83696: IFFALSE 83832
// begin if IsInUnit ( j ) then
83698: LD_VAR 0 3
83702: PPUSH
83703: CALL_OW 310
83707: IFFALSE 83718
// ComExitBuilding ( j ) ;
83709: LD_VAR 0 3
83713: PPUSH
83714: CALL_OW 122
// ct := 0 ;
83718: LD_ADDR_VAR 0 8
83722: PUSH
83723: LD_INT 0
83725: ST_TO_ADDR
// for k in x do
83726: LD_ADDR_VAR 0 4
83730: PUSH
83731: LD_VAR 0 11
83735: PUSH
83736: FOR_IN
83737: IFFALSE 83810
// if ( GetWeapon ( k ) = ar_control_tower and not IsDrivenBy ( k ) ) or ( GetBType ( k ) = b_control_tower and UnitsInside ( k ) < 3 ) then
83739: LD_VAR 0 4
83743: PPUSH
83744: CALL_OW 264
83748: PUSH
83749: LD_INT 31
83751: EQUAL
83752: PUSH
83753: LD_VAR 0 4
83757: PPUSH
83758: CALL_OW 311
83762: NOT
83763: AND
83764: PUSH
83765: LD_VAR 0 4
83769: PPUSH
83770: CALL_OW 266
83774: PUSH
83775: LD_INT 36
83777: EQUAL
83778: PUSH
83779: LD_VAR 0 4
83783: PPUSH
83784: CALL_OW 313
83788: PUSH
83789: LD_INT 3
83791: LESS
83792: AND
83793: OR
83794: IFFALSE 83808
// begin ct := k ;
83796: LD_ADDR_VAR 0 8
83800: PUSH
83801: LD_VAR 0 4
83805: ST_TO_ADDR
// break ;
83806: GO 83810
// end ;
83808: GO 83736
83810: POP
83811: POP
// if ct then
83812: LD_VAR 0 8
83816: IFFALSE 83832
// ComEnterUnit ( j , ct ) ;
83818: LD_VAR 0 3
83822: PPUSH
83823: LD_VAR 0 8
83827: PPUSH
83828: CALL_OW 120
// end ; end ;
83832: GO 83585
83834: POP
83835: POP
// places := 0 ;
83836: LD_ADDR_VAR 0 5
83840: PUSH
83841: LD_INT 0
83843: ST_TO_ADDR
// for j = 1 to x do
83844: LD_ADDR_VAR 0 3
83848: PUSH
83849: DOUBLE
83850: LD_INT 1
83852: DEC
83853: ST_TO_ADDR
83854: LD_VAR 0 11
83858: PUSH
83859: FOR_TO
83860: IFFALSE 83915
// if GetWeapon ( x [ j ] ) = ar_control_tower then
83862: LD_VAR 0 11
83866: PUSH
83867: LD_VAR 0 3
83871: ARRAY
83872: PPUSH
83873: CALL_OW 264
83877: PUSH
83878: LD_INT 31
83880: EQUAL
83881: IFFALSE 83899
// places := places + 1 else
83883: LD_ADDR_VAR 0 5
83887: PUSH
83888: LD_VAR 0 5
83892: PUSH
83893: LD_INT 1
83895: PLUS
83896: ST_TO_ADDR
83897: GO 83913
// places := places + 3 ;
83899: LD_ADDR_VAR 0 5
83903: PUSH
83904: LD_VAR 0 5
83908: PUSH
83909: LD_INT 3
83911: PLUS
83912: ST_TO_ADDR
83913: GO 83859
83915: POP
83916: POP
// tmp := SortBySkill ( UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] , 3 ) ;
83917: LD_ADDR_VAR 0 6
83921: PUSH
83922: LD_EXP 36
83926: PUSH
83927: LD_VAR 0 2
83931: ARRAY
83932: PPUSH
83933: LD_INT 25
83935: PUSH
83936: LD_INT 3
83938: PUSH
83939: EMPTY
83940: LIST
83941: LIST
83942: PPUSH
83943: CALL_OW 72
83947: PUSH
83948: LD_EXP 76
83952: PUSH
83953: LD_VAR 0 2
83957: ARRAY
83958: DIFF
83959: PPUSH
83960: LD_INT 3
83962: PPUSH
83963: CALL 60459 0 2
83967: ST_TO_ADDR
// if not tmp then
83968: LD_VAR 0 6
83972: NOT
83973: IFFALSE 83977
// continue ;
83975: GO 83357
// places := places - mc_remote_driver [ i ] ;
83977: LD_ADDR_VAR 0 5
83981: PUSH
83982: LD_VAR 0 5
83986: PUSH
83987: LD_EXP 76
83991: PUSH
83992: LD_VAR 0 2
83996: ARRAY
83997: MINUS
83998: ST_TO_ADDR
// if places then
83999: LD_VAR 0 5
84003: IFFALSE 84062
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
84005: LD_ADDR_EXP 76
84009: PUSH
84010: LD_EXP 76
84014: PPUSH
84015: LD_VAR 0 2
84019: PPUSH
84020: LD_EXP 76
84024: PUSH
84025: LD_VAR 0 2
84029: ARRAY
84030: PUSH
84031: LD_VAR 0 6
84035: PUSH
84036: LD_INT 1
84038: ARRAY
84039: UNION
84040: PPUSH
84041: CALL_OW 1
84045: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
84046: LD_VAR 0 6
84050: PUSH
84051: LD_INT 1
84053: ARRAY
84054: PPUSH
84055: LD_INT 126
84057: PPUSH
84058: CALL_OW 109
// end ; end ;
84062: GO 83357
84064: POP
84065: POP
// end ;
84066: LD_VAR 0 1
84070: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
84071: LD_INT 0
84073: PPUSH
84074: PPUSH
84075: PPUSH
84076: PPUSH
84077: PPUSH
84078: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
84079: LD_VAR 0 1
84083: NOT
84084: PUSH
84085: LD_VAR 0 2
84089: NOT
84090: OR
84091: PUSH
84092: LD_VAR 0 3
84096: NOT
84097: OR
84098: PUSH
84099: LD_VAR 0 4
84103: PUSH
84104: LD_INT 1
84106: PUSH
84107: LD_INT 2
84109: PUSH
84110: LD_INT 3
84112: PUSH
84113: LD_INT 4
84115: PUSH
84116: LD_INT 5
84118: PUSH
84119: LD_INT 8
84121: PUSH
84122: LD_INT 9
84124: PUSH
84125: LD_INT 15
84127: PUSH
84128: LD_INT 16
84130: PUSH
84131: EMPTY
84132: LIST
84133: LIST
84134: LIST
84135: LIST
84136: LIST
84137: LIST
84138: LIST
84139: LIST
84140: LIST
84141: IN
84142: NOT
84143: OR
84144: IFFALSE 84148
// exit ;
84146: GO 85048
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
84148: LD_ADDR_VAR 0 2
84152: PUSH
84153: LD_VAR 0 2
84157: PPUSH
84158: LD_INT 21
84160: PUSH
84161: LD_INT 3
84163: PUSH
84164: EMPTY
84165: LIST
84166: LIST
84167: PUSH
84168: LD_INT 24
84170: PUSH
84171: LD_INT 250
84173: PUSH
84174: EMPTY
84175: LIST
84176: LIST
84177: PUSH
84178: EMPTY
84179: LIST
84180: LIST
84181: PPUSH
84182: CALL_OW 72
84186: ST_TO_ADDR
// case class of 1 , 15 :
84187: LD_VAR 0 4
84191: PUSH
84192: LD_INT 1
84194: DOUBLE
84195: EQUAL
84196: IFTRUE 84206
84198: LD_INT 15
84200: DOUBLE
84201: EQUAL
84202: IFTRUE 84206
84204: GO 84291
84206: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
84207: LD_ADDR_VAR 0 8
84211: PUSH
84212: LD_VAR 0 2
84216: PPUSH
84217: LD_INT 2
84219: PUSH
84220: LD_INT 30
84222: PUSH
84223: LD_INT 32
84225: PUSH
84226: EMPTY
84227: LIST
84228: LIST
84229: PUSH
84230: LD_INT 30
84232: PUSH
84233: LD_INT 31
84235: PUSH
84236: EMPTY
84237: LIST
84238: LIST
84239: PUSH
84240: EMPTY
84241: LIST
84242: LIST
84243: LIST
84244: PPUSH
84245: CALL_OW 72
84249: PUSH
84250: LD_VAR 0 2
84254: PPUSH
84255: LD_INT 2
84257: PUSH
84258: LD_INT 30
84260: PUSH
84261: LD_INT 4
84263: PUSH
84264: EMPTY
84265: LIST
84266: LIST
84267: PUSH
84268: LD_INT 30
84270: PUSH
84271: LD_INT 5
84273: PUSH
84274: EMPTY
84275: LIST
84276: LIST
84277: PUSH
84278: EMPTY
84279: LIST
84280: LIST
84281: LIST
84282: PPUSH
84283: CALL_OW 72
84287: ADD
84288: ST_TO_ADDR
84289: GO 84537
84291: LD_INT 2
84293: DOUBLE
84294: EQUAL
84295: IFTRUE 84305
84297: LD_INT 16
84299: DOUBLE
84300: EQUAL
84301: IFTRUE 84305
84303: GO 84351
84305: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
84306: LD_ADDR_VAR 0 8
84310: PUSH
84311: LD_VAR 0 2
84315: PPUSH
84316: LD_INT 2
84318: PUSH
84319: LD_INT 30
84321: PUSH
84322: LD_INT 0
84324: PUSH
84325: EMPTY
84326: LIST
84327: LIST
84328: PUSH
84329: LD_INT 30
84331: PUSH
84332: LD_INT 1
84334: PUSH
84335: EMPTY
84336: LIST
84337: LIST
84338: PUSH
84339: EMPTY
84340: LIST
84341: LIST
84342: LIST
84343: PPUSH
84344: CALL_OW 72
84348: ST_TO_ADDR
84349: GO 84537
84351: LD_INT 3
84353: DOUBLE
84354: EQUAL
84355: IFTRUE 84359
84357: GO 84405
84359: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
84360: LD_ADDR_VAR 0 8
84364: PUSH
84365: LD_VAR 0 2
84369: PPUSH
84370: LD_INT 2
84372: PUSH
84373: LD_INT 30
84375: PUSH
84376: LD_INT 2
84378: PUSH
84379: EMPTY
84380: LIST
84381: LIST
84382: PUSH
84383: LD_INT 30
84385: PUSH
84386: LD_INT 3
84388: PUSH
84389: EMPTY
84390: LIST
84391: LIST
84392: PUSH
84393: EMPTY
84394: LIST
84395: LIST
84396: LIST
84397: PPUSH
84398: CALL_OW 72
84402: ST_TO_ADDR
84403: GO 84537
84405: LD_INT 4
84407: DOUBLE
84408: EQUAL
84409: IFTRUE 84413
84411: GO 84470
84413: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
84414: LD_ADDR_VAR 0 8
84418: PUSH
84419: LD_VAR 0 2
84423: PPUSH
84424: LD_INT 2
84426: PUSH
84427: LD_INT 30
84429: PUSH
84430: LD_INT 6
84432: PUSH
84433: EMPTY
84434: LIST
84435: LIST
84436: PUSH
84437: LD_INT 30
84439: PUSH
84440: LD_INT 7
84442: PUSH
84443: EMPTY
84444: LIST
84445: LIST
84446: PUSH
84447: LD_INT 30
84449: PUSH
84450: LD_INT 8
84452: PUSH
84453: EMPTY
84454: LIST
84455: LIST
84456: PUSH
84457: EMPTY
84458: LIST
84459: LIST
84460: LIST
84461: LIST
84462: PPUSH
84463: CALL_OW 72
84467: ST_TO_ADDR
84468: GO 84537
84470: LD_INT 5
84472: DOUBLE
84473: EQUAL
84474: IFTRUE 84490
84476: LD_INT 8
84478: DOUBLE
84479: EQUAL
84480: IFTRUE 84490
84482: LD_INT 9
84484: DOUBLE
84485: EQUAL
84486: IFTRUE 84490
84488: GO 84536
84490: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
84491: LD_ADDR_VAR 0 8
84495: PUSH
84496: LD_VAR 0 2
84500: PPUSH
84501: LD_INT 2
84503: PUSH
84504: LD_INT 30
84506: PUSH
84507: LD_INT 4
84509: PUSH
84510: EMPTY
84511: LIST
84512: LIST
84513: PUSH
84514: LD_INT 30
84516: PUSH
84517: LD_INT 5
84519: PUSH
84520: EMPTY
84521: LIST
84522: LIST
84523: PUSH
84524: EMPTY
84525: LIST
84526: LIST
84527: LIST
84528: PPUSH
84529: CALL_OW 72
84533: ST_TO_ADDR
84534: GO 84537
84536: POP
// if not tmp then
84537: LD_VAR 0 8
84541: NOT
84542: IFFALSE 84546
// exit ;
84544: GO 85048
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
84546: LD_VAR 0 4
84550: PUSH
84551: LD_INT 1
84553: PUSH
84554: LD_INT 15
84556: PUSH
84557: EMPTY
84558: LIST
84559: LIST
84560: IN
84561: PUSH
84562: LD_EXP 45
84566: PUSH
84567: LD_VAR 0 1
84571: ARRAY
84572: AND
84573: IFFALSE 84729
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
84575: LD_ADDR_VAR 0 9
84579: PUSH
84580: LD_EXP 45
84584: PUSH
84585: LD_VAR 0 1
84589: ARRAY
84590: PUSH
84591: LD_INT 1
84593: ARRAY
84594: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
84595: LD_VAR 0 9
84599: PUSH
84600: LD_EXP 46
84604: PUSH
84605: LD_VAR 0 1
84609: ARRAY
84610: IN
84611: NOT
84612: IFFALSE 84727
// begin mc_busy_turret_list := ReplaceIn ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
84614: LD_ADDR_EXP 46
84618: PUSH
84619: LD_EXP 46
84623: PPUSH
84624: LD_VAR 0 1
84628: PUSH
84629: LD_EXP 46
84633: PUSH
84634: LD_VAR 0 1
84638: ARRAY
84639: PUSH
84640: LD_INT 1
84642: PLUS
84643: PUSH
84644: EMPTY
84645: LIST
84646: LIST
84647: PPUSH
84648: LD_VAR 0 9
84652: PPUSH
84653: CALL 26211 0 3
84657: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
84658: LD_ADDR_EXP 45
84662: PUSH
84663: LD_EXP 45
84667: PPUSH
84668: LD_VAR 0 1
84672: PPUSH
84673: LD_EXP 45
84677: PUSH
84678: LD_VAR 0 1
84682: ARRAY
84683: PUSH
84684: LD_VAR 0 9
84688: DIFF
84689: PPUSH
84690: CALL_OW 1
84694: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
84695: LD_VAR 0 3
84699: PPUSH
84700: LD_EXP 46
84704: PUSH
84705: LD_VAR 0 1
84709: ARRAY
84710: PUSH
84711: LD_EXP 46
84715: PUSH
84716: LD_VAR 0 1
84720: ARRAY
84721: ARRAY
84722: PPUSH
84723: CALL_OW 120
// end ; exit ;
84727: GO 85048
// end ; if tmp > 1 then
84729: LD_VAR 0 8
84733: PUSH
84734: LD_INT 1
84736: GREATER
84737: IFFALSE 84841
// for i = 2 to tmp do
84739: LD_ADDR_VAR 0 6
84743: PUSH
84744: DOUBLE
84745: LD_INT 2
84747: DEC
84748: ST_TO_ADDR
84749: LD_VAR 0 8
84753: PUSH
84754: FOR_TO
84755: IFFALSE 84839
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
84757: LD_VAR 0 8
84761: PUSH
84762: LD_VAR 0 6
84766: ARRAY
84767: PPUSH
84768: CALL_OW 461
84772: PUSH
84773: LD_INT 6
84775: EQUAL
84776: IFFALSE 84837
// begin x := tmp [ i ] ;
84778: LD_ADDR_VAR 0 9
84782: PUSH
84783: LD_VAR 0 8
84787: PUSH
84788: LD_VAR 0 6
84792: ARRAY
84793: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
84794: LD_ADDR_VAR 0 8
84798: PUSH
84799: LD_VAR 0 8
84803: PPUSH
84804: LD_VAR 0 6
84808: PPUSH
84809: CALL_OW 3
84813: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
84814: LD_ADDR_VAR 0 8
84818: PUSH
84819: LD_VAR 0 8
84823: PPUSH
84824: LD_INT 1
84826: PPUSH
84827: LD_VAR 0 9
84831: PPUSH
84832: CALL_OW 2
84836: ST_TO_ADDR
// end ;
84837: GO 84754
84839: POP
84840: POP
// for i in tmp do
84841: LD_ADDR_VAR 0 6
84845: PUSH
84846: LD_VAR 0 8
84850: PUSH
84851: FOR_IN
84852: IFFALSE 84921
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
84854: LD_VAR 0 6
84858: PPUSH
84859: CALL_OW 313
84863: PUSH
84864: LD_INT 6
84866: LESS
84867: PUSH
84868: LD_VAR 0 6
84872: PPUSH
84873: CALL_OW 266
84877: PUSH
84878: LD_INT 31
84880: PUSH
84881: LD_INT 32
84883: PUSH
84884: EMPTY
84885: LIST
84886: LIST
84887: IN
84888: NOT
84889: AND
84890: PUSH
84891: LD_VAR 0 6
84895: PPUSH
84896: CALL_OW 313
84900: PUSH
84901: LD_INT 0
84903: EQUAL
84904: OR
84905: IFFALSE 84919
// begin j := i ;
84907: LD_ADDR_VAR 0 7
84911: PUSH
84912: LD_VAR 0 6
84916: ST_TO_ADDR
// break ;
84917: GO 84921
// end ; end ;
84919: GO 84851
84921: POP
84922: POP
// if j then
84923: LD_VAR 0 7
84927: IFFALSE 84945
// ComEnterUnit ( unit , j ) else
84929: LD_VAR 0 3
84933: PPUSH
84934: LD_VAR 0 7
84938: PPUSH
84939: CALL_OW 120
84943: GO 85048
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
84945: LD_ADDR_VAR 0 10
84949: PUSH
84950: LD_VAR 0 2
84954: PPUSH
84955: LD_INT 2
84957: PUSH
84958: LD_INT 30
84960: PUSH
84961: LD_INT 0
84963: PUSH
84964: EMPTY
84965: LIST
84966: LIST
84967: PUSH
84968: LD_INT 30
84970: PUSH
84971: LD_INT 1
84973: PUSH
84974: EMPTY
84975: LIST
84976: LIST
84977: PUSH
84978: EMPTY
84979: LIST
84980: LIST
84981: LIST
84982: PPUSH
84983: CALL_OW 72
84987: ST_TO_ADDR
// if depot then
84988: LD_VAR 0 10
84992: IFFALSE 85048
// begin depot := NearestUnitToUnit ( depot , unit ) ;
84994: LD_ADDR_VAR 0 10
84998: PUSH
84999: LD_VAR 0 10
85003: PPUSH
85004: LD_VAR 0 3
85008: PPUSH
85009: CALL_OW 74
85013: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
85014: LD_VAR 0 3
85018: PPUSH
85019: LD_VAR 0 10
85023: PPUSH
85024: CALL_OW 296
85028: PUSH
85029: LD_INT 10
85031: GREATER
85032: IFFALSE 85048
// ComStandNearbyBuilding ( unit , depot ) ;
85034: LD_VAR 0 3
85038: PPUSH
85039: LD_VAR 0 10
85043: PPUSH
85044: CALL 20778 0 2
// end ; end ; end ;
85048: LD_VAR 0 5
85052: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
85053: LD_INT 0
85055: PPUSH
85056: PPUSH
85057: PPUSH
85058: PPUSH
// if not mc_bases then
85059: LD_EXP 36
85063: NOT
85064: IFFALSE 85068
// exit ;
85066: GO 85307
// for i = 1 to mc_bases do
85068: LD_ADDR_VAR 0 2
85072: PUSH
85073: DOUBLE
85074: LD_INT 1
85076: DEC
85077: ST_TO_ADDR
85078: LD_EXP 36
85082: PUSH
85083: FOR_TO
85084: IFFALSE 85305
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
85086: LD_ADDR_VAR 0 4
85090: PUSH
85091: LD_EXP 36
85095: PUSH
85096: LD_VAR 0 2
85100: ARRAY
85101: PPUSH
85102: LD_INT 21
85104: PUSH
85105: LD_INT 1
85107: PUSH
85108: EMPTY
85109: LIST
85110: LIST
85111: PPUSH
85112: CALL_OW 72
85116: PUSH
85117: LD_EXP 65
85121: PUSH
85122: LD_VAR 0 2
85126: ARRAY
85127: UNION
85128: ST_TO_ADDR
// if not tmp then
85129: LD_VAR 0 4
85133: NOT
85134: IFFALSE 85138
// continue ;
85136: GO 85083
// for j in tmp do
85138: LD_ADDR_VAR 0 3
85142: PUSH
85143: LD_VAR 0 4
85147: PUSH
85148: FOR_IN
85149: IFFALSE 85301
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
85151: LD_VAR 0 3
85155: PPUSH
85156: CALL_OW 110
85160: NOT
85161: PUSH
85162: LD_VAR 0 3
85166: PPUSH
85167: CALL_OW 314
85171: NOT
85172: AND
85173: PUSH
85174: LD_VAR 0 3
85178: PPUSH
85179: CALL_OW 311
85183: NOT
85184: AND
85185: PUSH
85186: LD_VAR 0 3
85190: PPUSH
85191: CALL_OW 310
85195: NOT
85196: AND
85197: PUSH
85198: LD_VAR 0 3
85202: PUSH
85203: LD_EXP 39
85207: PUSH
85208: LD_VAR 0 2
85212: ARRAY
85213: PUSH
85214: LD_INT 1
85216: ARRAY
85217: IN
85218: NOT
85219: AND
85220: PUSH
85221: LD_VAR 0 3
85225: PUSH
85226: LD_EXP 39
85230: PUSH
85231: LD_VAR 0 2
85235: ARRAY
85236: PUSH
85237: LD_INT 2
85239: ARRAY
85240: IN
85241: NOT
85242: AND
85243: PUSH
85244: LD_VAR 0 3
85248: PUSH
85249: LD_EXP 48
85253: PUSH
85254: LD_VAR 0 2
85258: ARRAY
85259: IN
85260: NOT
85261: AND
85262: IFFALSE 85299
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
85264: LD_VAR 0 2
85268: PPUSH
85269: LD_EXP 36
85273: PUSH
85274: LD_VAR 0 2
85278: ARRAY
85279: PPUSH
85280: LD_VAR 0 3
85284: PPUSH
85285: LD_VAR 0 3
85289: PPUSH
85290: CALL_OW 257
85294: PPUSH
85295: CALL 84071 0 4
// end ;
85299: GO 85148
85301: POP
85302: POP
// end ;
85303: GO 85083
85305: POP
85306: POP
// end ;
85307: LD_VAR 0 1
85311: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
85312: LD_INT 0
85314: PPUSH
85315: PPUSH
85316: PPUSH
85317: PPUSH
85318: PPUSH
85319: PPUSH
// if not mc_bases [ base ] then
85320: LD_EXP 36
85324: PUSH
85325: LD_VAR 0 1
85329: ARRAY
85330: NOT
85331: IFFALSE 85335
// exit ;
85333: GO 85517
// tmp := [ ] ;
85335: LD_ADDR_VAR 0 6
85339: PUSH
85340: EMPTY
85341: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
85342: LD_ADDR_VAR 0 7
85346: PUSH
85347: LD_VAR 0 3
85351: PPUSH
85352: LD_INT 0
85354: PPUSH
85355: CALL_OW 517
85359: ST_TO_ADDR
// if not list then
85360: LD_VAR 0 7
85364: NOT
85365: IFFALSE 85369
// exit ;
85367: GO 85517
// for i = 1 to amount do
85369: LD_ADDR_VAR 0 5
85373: PUSH
85374: DOUBLE
85375: LD_INT 1
85377: DEC
85378: ST_TO_ADDR
85379: LD_VAR 0 2
85383: PUSH
85384: FOR_TO
85385: IFFALSE 85465
// begin x := rand ( 1 , list [ 1 ] ) ;
85387: LD_ADDR_VAR 0 8
85391: PUSH
85392: LD_INT 1
85394: PPUSH
85395: LD_VAR 0 7
85399: PUSH
85400: LD_INT 1
85402: ARRAY
85403: PPUSH
85404: CALL_OW 12
85408: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
85409: LD_ADDR_VAR 0 6
85413: PUSH
85414: LD_VAR 0 6
85418: PPUSH
85419: LD_VAR 0 5
85423: PPUSH
85424: LD_VAR 0 7
85428: PUSH
85429: LD_INT 1
85431: ARRAY
85432: PUSH
85433: LD_VAR 0 8
85437: ARRAY
85438: PUSH
85439: LD_VAR 0 7
85443: PUSH
85444: LD_INT 2
85446: ARRAY
85447: PUSH
85448: LD_VAR 0 8
85452: ARRAY
85453: PUSH
85454: EMPTY
85455: LIST
85456: LIST
85457: PPUSH
85458: CALL_OW 1
85462: ST_TO_ADDR
// end ;
85463: GO 85384
85465: POP
85466: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
85467: LD_ADDR_EXP 49
85471: PUSH
85472: LD_EXP 49
85476: PPUSH
85477: LD_VAR 0 1
85481: PPUSH
85482: LD_VAR 0 6
85486: PPUSH
85487: CALL_OW 1
85491: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
85492: LD_ADDR_EXP 51
85496: PUSH
85497: LD_EXP 51
85501: PPUSH
85502: LD_VAR 0 1
85506: PPUSH
85507: LD_VAR 0 3
85511: PPUSH
85512: CALL_OW 1
85516: ST_TO_ADDR
// end ;
85517: LD_VAR 0 4
85521: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
85522: LD_INT 0
85524: PPUSH
// if not mc_bases [ base ] then
85525: LD_EXP 36
85529: PUSH
85530: LD_VAR 0 1
85534: ARRAY
85535: NOT
85536: IFFALSE 85540
// exit ;
85538: GO 85565
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
85540: LD_ADDR_EXP 41
85544: PUSH
85545: LD_EXP 41
85549: PPUSH
85550: LD_VAR 0 1
85554: PPUSH
85555: LD_VAR 0 2
85559: PPUSH
85560: CALL_OW 1
85564: ST_TO_ADDR
// end ;
85565: LD_VAR 0 3
85569: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
85570: LD_INT 0
85572: PPUSH
// if not mc_bases [ base ] then
85573: LD_EXP 36
85577: PUSH
85578: LD_VAR 0 1
85582: ARRAY
85583: NOT
85584: IFFALSE 85588
// exit ;
85586: GO 85625
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union list ) ;
85588: LD_ADDR_EXP 41
85592: PUSH
85593: LD_EXP 41
85597: PPUSH
85598: LD_VAR 0 1
85602: PPUSH
85603: LD_EXP 41
85607: PUSH
85608: LD_VAR 0 1
85612: ARRAY
85613: PUSH
85614: LD_VAR 0 2
85618: UNION
85619: PPUSH
85620: CALL_OW 1
85624: ST_TO_ADDR
// end ;
85625: LD_VAR 0 3
85629: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
85630: LD_INT 0
85632: PPUSH
// if not mc_bases [ base ] then
85633: LD_EXP 36
85637: PUSH
85638: LD_VAR 0 1
85642: ARRAY
85643: NOT
85644: IFFALSE 85648
// exit ;
85646: GO 85673
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
85648: LD_ADDR_EXP 57
85652: PUSH
85653: LD_EXP 57
85657: PPUSH
85658: LD_VAR 0 1
85662: PPUSH
85663: LD_VAR 0 2
85667: PPUSH
85668: CALL_OW 1
85672: ST_TO_ADDR
// end ;
85673: LD_VAR 0 3
85677: RET
// export function MC_InsertProduceList ( base , components ) ; begin
85678: LD_INT 0
85680: PPUSH
// if not mc_bases [ base ] then
85681: LD_EXP 36
85685: PUSH
85686: LD_VAR 0 1
85690: ARRAY
85691: NOT
85692: IFFALSE 85696
// exit ;
85694: GO 85733
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ components ) ;
85696: LD_ADDR_EXP 57
85700: PUSH
85701: LD_EXP 57
85705: PPUSH
85706: LD_VAR 0 1
85710: PPUSH
85711: LD_EXP 57
85715: PUSH
85716: LD_VAR 0 1
85720: ARRAY
85721: PUSH
85722: LD_VAR 0 2
85726: ADD
85727: PPUSH
85728: CALL_OW 1
85732: ST_TO_ADDR
// end ;
85733: LD_VAR 0 3
85737: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
85738: LD_INT 0
85740: PPUSH
// if not mc_bases [ base ] then
85741: LD_EXP 36
85745: PUSH
85746: LD_VAR 0 1
85750: ARRAY
85751: NOT
85752: IFFALSE 85756
// exit ;
85754: GO 85810
// mc_defender := Replace ( mc_defender , base , deflist ) ;
85756: LD_ADDR_EXP 58
85760: PUSH
85761: LD_EXP 58
85765: PPUSH
85766: LD_VAR 0 1
85770: PPUSH
85771: LD_VAR 0 2
85775: PPUSH
85776: CALL_OW 1
85780: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
85781: LD_ADDR_EXP 47
85785: PUSH
85786: LD_EXP 47
85790: PPUSH
85791: LD_VAR 0 1
85795: PPUSH
85796: LD_VAR 0 2
85800: PUSH
85801: LD_INT 0
85803: PLUS
85804: PPUSH
85805: CALL_OW 1
85809: ST_TO_ADDR
// end ;
85810: LD_VAR 0 3
85814: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
85815: LD_INT 0
85817: PPUSH
// if not mc_bases [ base ] then
85818: LD_EXP 36
85822: PUSH
85823: LD_VAR 0 1
85827: ARRAY
85828: NOT
85829: IFFALSE 85833
// exit ;
85831: GO 85858
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
85833: LD_ADDR_EXP 47
85837: PUSH
85838: LD_EXP 47
85842: PPUSH
85843: LD_VAR 0 1
85847: PPUSH
85848: LD_VAR 0 2
85852: PPUSH
85853: CALL_OW 1
85857: ST_TO_ADDR
// end ;
85858: LD_VAR 0 3
85862: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
85863: LD_INT 0
85865: PPUSH
85866: PPUSH
85867: PPUSH
85868: PPUSH
// if not mc_bases [ base ] then
85869: LD_EXP 36
85873: PUSH
85874: LD_VAR 0 1
85878: ARRAY
85879: NOT
85880: IFFALSE 85884
// exit ;
85882: GO 85949
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
85884: LD_ADDR_EXP 56
85888: PUSH
85889: LD_EXP 56
85893: PPUSH
85894: LD_VAR 0 1
85898: PUSH
85899: LD_EXP 56
85903: PUSH
85904: LD_VAR 0 1
85908: ARRAY
85909: PUSH
85910: LD_INT 1
85912: PLUS
85913: PUSH
85914: EMPTY
85915: LIST
85916: LIST
85917: PPUSH
85918: LD_VAR 0 1
85922: PUSH
85923: LD_VAR 0 2
85927: PUSH
85928: LD_VAR 0 3
85932: PUSH
85933: LD_VAR 0 4
85937: PUSH
85938: EMPTY
85939: LIST
85940: LIST
85941: LIST
85942: LIST
85943: PPUSH
85944: CALL 26211 0 3
85948: ST_TO_ADDR
// end ;
85949: LD_VAR 0 5
85953: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
85954: LD_INT 0
85956: PPUSH
// if not mc_bases [ base ] then
85957: LD_EXP 36
85961: PUSH
85962: LD_VAR 0 1
85966: ARRAY
85967: NOT
85968: IFFALSE 85972
// exit ;
85970: GO 85997
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
85972: LD_ADDR_EXP 73
85976: PUSH
85977: LD_EXP 73
85981: PPUSH
85982: LD_VAR 0 1
85986: PPUSH
85987: LD_VAR 0 2
85991: PPUSH
85992: CALL_OW 1
85996: ST_TO_ADDR
// end ;
85997: LD_VAR 0 3
86001: RET
// export function MC_GetMinesField ( base ) ; begin
86002: LD_INT 0
86004: PPUSH
// result := mc_mines [ base ] ;
86005: LD_ADDR_VAR 0 2
86009: PUSH
86010: LD_EXP 49
86014: PUSH
86015: LD_VAR 0 1
86019: ARRAY
86020: ST_TO_ADDR
// end ;
86021: LD_VAR 0 2
86025: RET
// export function MC_GetProduceList ( base ) ; begin
86026: LD_INT 0
86028: PPUSH
// result := mc_produce [ base ] ;
86029: LD_ADDR_VAR 0 2
86033: PUSH
86034: LD_EXP 57
86038: PUSH
86039: LD_VAR 0 1
86043: ARRAY
86044: ST_TO_ADDR
// end ;
86045: LD_VAR 0 2
86049: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
86050: LD_INT 0
86052: PPUSH
86053: PPUSH
// if not mc_bases then
86054: LD_EXP 36
86058: NOT
86059: IFFALSE 86063
// exit ;
86061: GO 86128
// if mc_bases [ base ] then
86063: LD_EXP 36
86067: PUSH
86068: LD_VAR 0 1
86072: ARRAY
86073: IFFALSE 86128
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
86075: LD_ADDR_VAR 0 3
86079: PUSH
86080: LD_EXP 36
86084: PUSH
86085: LD_VAR 0 1
86089: ARRAY
86090: PPUSH
86091: LD_INT 30
86093: PUSH
86094: LD_VAR 0 2
86098: PUSH
86099: EMPTY
86100: LIST
86101: LIST
86102: PPUSH
86103: CALL_OW 72
86107: ST_TO_ADDR
// if result then
86108: LD_VAR 0 3
86112: IFFALSE 86128
// result := result [ 1 ] ;
86114: LD_ADDR_VAR 0 3
86118: PUSH
86119: LD_VAR 0 3
86123: PUSH
86124: LD_INT 1
86126: ARRAY
86127: ST_TO_ADDR
// end ; end ;
86128: LD_VAR 0 3
86132: RET
// export function MC_GetBuildings ( base , btype ) ; var i ; begin
86133: LD_INT 0
86135: PPUSH
86136: PPUSH
// if not mc_bases then
86137: LD_EXP 36
86141: NOT
86142: IFFALSE 86146
// exit ;
86144: GO 86191
// if mc_bases [ base ] then
86146: LD_EXP 36
86150: PUSH
86151: LD_VAR 0 1
86155: ARRAY
86156: IFFALSE 86191
// result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
86158: LD_ADDR_VAR 0 3
86162: PUSH
86163: LD_EXP 36
86167: PUSH
86168: LD_VAR 0 1
86172: ARRAY
86173: PPUSH
86174: LD_INT 30
86176: PUSH
86177: LD_VAR 0 2
86181: PUSH
86182: EMPTY
86183: LIST
86184: LIST
86185: PPUSH
86186: CALL_OW 72
86190: ST_TO_ADDR
// end ;
86191: LD_VAR 0 3
86195: RET
// export function MC_SetTame ( base , area ) ; begin
86196: LD_INT 0
86198: PPUSH
// if not mc_bases or not base then
86199: LD_EXP 36
86203: NOT
86204: PUSH
86205: LD_VAR 0 1
86209: NOT
86210: OR
86211: IFFALSE 86215
// exit ;
86213: GO 86240
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
86215: LD_ADDR_EXP 64
86219: PUSH
86220: LD_EXP 64
86224: PPUSH
86225: LD_VAR 0 1
86229: PPUSH
86230: LD_VAR 0 2
86234: PPUSH
86235: CALL_OW 1
86239: ST_TO_ADDR
// end ;
86240: LD_VAR 0 3
86244: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
86245: LD_INT 0
86247: PPUSH
86248: PPUSH
// if not mc_bases or not base then
86249: LD_EXP 36
86253: NOT
86254: PUSH
86255: LD_VAR 0 1
86259: NOT
86260: OR
86261: IFFALSE 86265
// exit ;
86263: GO 86367
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
86265: LD_ADDR_VAR 0 4
86269: PUSH
86270: LD_EXP 36
86274: PUSH
86275: LD_VAR 0 1
86279: ARRAY
86280: PPUSH
86281: LD_INT 30
86283: PUSH
86284: LD_VAR 0 2
86288: PUSH
86289: EMPTY
86290: LIST
86291: LIST
86292: PPUSH
86293: CALL_OW 72
86297: ST_TO_ADDR
// if not tmp then
86298: LD_VAR 0 4
86302: NOT
86303: IFFALSE 86307
// exit ;
86305: GO 86367
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
86307: LD_ADDR_EXP 68
86311: PUSH
86312: LD_EXP 68
86316: PPUSH
86317: LD_VAR 0 1
86321: PPUSH
86322: LD_EXP 68
86326: PUSH
86327: LD_VAR 0 1
86331: ARRAY
86332: PPUSH
86333: LD_EXP 68
86337: PUSH
86338: LD_VAR 0 1
86342: ARRAY
86343: PUSH
86344: LD_INT 1
86346: PLUS
86347: PPUSH
86348: LD_VAR 0 4
86352: PUSH
86353: LD_INT 1
86355: ARRAY
86356: PPUSH
86357: CALL_OW 2
86361: PPUSH
86362: CALL_OW 1
86366: ST_TO_ADDR
// end ;
86367: LD_VAR 0 3
86371: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
86372: LD_INT 0
86374: PPUSH
86375: PPUSH
// if not mc_bases or not base or not kinds then
86376: LD_EXP 36
86380: NOT
86381: PUSH
86382: LD_VAR 0 1
86386: NOT
86387: OR
86388: PUSH
86389: LD_VAR 0 2
86393: NOT
86394: OR
86395: IFFALSE 86399
// exit ;
86397: GO 86460
// for i in kinds do
86399: LD_ADDR_VAR 0 4
86403: PUSH
86404: LD_VAR 0 2
86408: PUSH
86409: FOR_IN
86410: IFFALSE 86458
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
86412: LD_ADDR_EXP 70
86416: PUSH
86417: LD_EXP 70
86421: PPUSH
86422: LD_VAR 0 1
86426: PUSH
86427: LD_EXP 70
86431: PUSH
86432: LD_VAR 0 1
86436: ARRAY
86437: PUSH
86438: LD_INT 1
86440: PLUS
86441: PUSH
86442: EMPTY
86443: LIST
86444: LIST
86445: PPUSH
86446: LD_VAR 0 4
86450: PPUSH
86451: CALL 26211 0 3
86455: ST_TO_ADDR
86456: GO 86409
86458: POP
86459: POP
// end ;
86460: LD_VAR 0 3
86464: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
86465: LD_INT 0
86467: PPUSH
// if not mc_bases or not base or not areas then
86468: LD_EXP 36
86472: NOT
86473: PUSH
86474: LD_VAR 0 1
86478: NOT
86479: OR
86480: PUSH
86481: LD_VAR 0 2
86485: NOT
86486: OR
86487: IFFALSE 86491
// exit ;
86489: GO 86516
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
86491: LD_ADDR_EXP 54
86495: PUSH
86496: LD_EXP 54
86500: PPUSH
86501: LD_VAR 0 1
86505: PPUSH
86506: LD_VAR 0 2
86510: PPUSH
86511: CALL_OW 1
86515: ST_TO_ADDR
// end ;
86516: LD_VAR 0 3
86520: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
86521: LD_INT 0
86523: PPUSH
// if not mc_bases or not base or not teleports_exit then
86524: LD_EXP 36
86528: NOT
86529: PUSH
86530: LD_VAR 0 1
86534: NOT
86535: OR
86536: PUSH
86537: LD_VAR 0 2
86541: NOT
86542: OR
86543: IFFALSE 86547
// exit ;
86545: GO 86572
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
86547: LD_ADDR_EXP 71
86551: PUSH
86552: LD_EXP 71
86556: PPUSH
86557: LD_VAR 0 1
86561: PPUSH
86562: LD_VAR 0 2
86566: PPUSH
86567: CALL_OW 1
86571: ST_TO_ADDR
// end ;
86572: LD_VAR 0 3
86576: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
86577: LD_INT 0
86579: PPUSH
86580: PPUSH
86581: PPUSH
// if not mc_bases or not base or not ext_list then
86582: LD_EXP 36
86586: NOT
86587: PUSH
86588: LD_VAR 0 1
86592: NOT
86593: OR
86594: PUSH
86595: LD_VAR 0 5
86599: NOT
86600: OR
86601: IFFALSE 86605
// exit ;
86603: GO 86778
// tmp := GetFacExtXYD ( x , y , d ) ;
86605: LD_ADDR_VAR 0 8
86609: PUSH
86610: LD_VAR 0 2
86614: PPUSH
86615: LD_VAR 0 3
86619: PPUSH
86620: LD_VAR 0 4
86624: PPUSH
86625: CALL 59589 0 3
86629: ST_TO_ADDR
// if not tmp then
86630: LD_VAR 0 8
86634: NOT
86635: IFFALSE 86639
// exit ;
86637: GO 86778
// for i in tmp do
86639: LD_ADDR_VAR 0 7
86643: PUSH
86644: LD_VAR 0 8
86648: PUSH
86649: FOR_IN
86650: IFFALSE 86776
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
86652: LD_ADDR_EXP 41
86656: PUSH
86657: LD_EXP 41
86661: PPUSH
86662: LD_VAR 0 1
86666: PPUSH
86667: LD_EXP 41
86671: PUSH
86672: LD_VAR 0 1
86676: ARRAY
86677: PPUSH
86678: LD_EXP 41
86682: PUSH
86683: LD_VAR 0 1
86687: ARRAY
86688: PUSH
86689: LD_INT 1
86691: PLUS
86692: PPUSH
86693: LD_VAR 0 5
86697: PUSH
86698: LD_INT 1
86700: ARRAY
86701: PUSH
86702: LD_VAR 0 7
86706: PUSH
86707: LD_INT 1
86709: ARRAY
86710: PUSH
86711: LD_VAR 0 7
86715: PUSH
86716: LD_INT 2
86718: ARRAY
86719: PUSH
86720: LD_VAR 0 7
86724: PUSH
86725: LD_INT 3
86727: ARRAY
86728: PUSH
86729: EMPTY
86730: LIST
86731: LIST
86732: LIST
86733: LIST
86734: PPUSH
86735: CALL_OW 2
86739: PPUSH
86740: CALL_OW 1
86744: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
86745: LD_ADDR_VAR 0 5
86749: PUSH
86750: LD_VAR 0 5
86754: PPUSH
86755: LD_INT 1
86757: PPUSH
86758: CALL_OW 3
86762: ST_TO_ADDR
// if not ext_list then
86763: LD_VAR 0 5
86767: NOT
86768: IFFALSE 86774
// exit ;
86770: POP
86771: POP
86772: GO 86778
// end ;
86774: GO 86649
86776: POP
86777: POP
// end ;
86778: LD_VAR 0 6
86782: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
86783: LD_INT 0
86785: PPUSH
// if not mc_bases or not base or not weapon_list then
86786: LD_EXP 36
86790: NOT
86791: PUSH
86792: LD_VAR 0 1
86796: NOT
86797: OR
86798: PUSH
86799: LD_VAR 0 2
86803: NOT
86804: OR
86805: IFFALSE 86809
// exit ;
86807: GO 86834
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
86809: LD_ADDR_EXP 75
86813: PUSH
86814: LD_EXP 75
86818: PPUSH
86819: LD_VAR 0 1
86823: PPUSH
86824: LD_VAR 0 2
86828: PPUSH
86829: CALL_OW 1
86833: ST_TO_ADDR
// end ;
86834: LD_VAR 0 3
86838: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
86839: LD_INT 0
86841: PPUSH
// if not mc_bases or not base or not tech_list then
86842: LD_EXP 36
86846: NOT
86847: PUSH
86848: LD_VAR 0 1
86852: NOT
86853: OR
86854: PUSH
86855: LD_VAR 0 2
86859: NOT
86860: OR
86861: IFFALSE 86865
// exit ;
86863: GO 86890
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
86865: LD_ADDR_EXP 63
86869: PUSH
86870: LD_EXP 63
86874: PPUSH
86875: LD_VAR 0 1
86879: PPUSH
86880: LD_VAR 0 2
86884: PPUSH
86885: CALL_OW 1
86889: ST_TO_ADDR
// end ;
86890: LD_VAR 0 3
86894: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
86895: LD_INT 0
86897: PPUSH
// if not mc_bases or not parking_area or not base then
86898: LD_EXP 36
86902: NOT
86903: PUSH
86904: LD_VAR 0 2
86908: NOT
86909: OR
86910: PUSH
86911: LD_VAR 0 1
86915: NOT
86916: OR
86917: IFFALSE 86921
// exit ;
86919: GO 86946
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
86921: LD_ADDR_EXP 60
86925: PUSH
86926: LD_EXP 60
86930: PPUSH
86931: LD_VAR 0 1
86935: PPUSH
86936: LD_VAR 0 2
86940: PPUSH
86941: CALL_OW 1
86945: ST_TO_ADDR
// end ;
86946: LD_VAR 0 3
86950: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
86951: LD_INT 0
86953: PPUSH
// if not mc_bases or not base or not scan_area then
86954: LD_EXP 36
86958: NOT
86959: PUSH
86960: LD_VAR 0 1
86964: NOT
86965: OR
86966: PUSH
86967: LD_VAR 0 2
86971: NOT
86972: OR
86973: IFFALSE 86977
// exit ;
86975: GO 87002
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
86977: LD_ADDR_EXP 61
86981: PUSH
86982: LD_EXP 61
86986: PPUSH
86987: LD_VAR 0 1
86991: PPUSH
86992: LD_VAR 0 2
86996: PPUSH
86997: CALL_OW 1
87001: ST_TO_ADDR
// end ;
87002: LD_VAR 0 3
87006: RET
// export function MC_NotTameApeman ( base ) ; var ape_techs ; begin
87007: LD_INT 0
87009: PPUSH
87010: PPUSH
// if not mc_bases or not base then
87011: LD_EXP 36
87015: NOT
87016: PUSH
87017: LD_VAR 0 1
87021: NOT
87022: OR
87023: IFFALSE 87027
// exit ;
87025: GO 87091
// ape_techs := [ 1 , 2 , 3 , 4 , 11 ] ;
87027: LD_ADDR_VAR 0 3
87031: PUSH
87032: LD_INT 1
87034: PUSH
87035: LD_INT 2
87037: PUSH
87038: LD_INT 3
87040: PUSH
87041: LD_INT 4
87043: PUSH
87044: LD_INT 11
87046: PUSH
87047: EMPTY
87048: LIST
87049: LIST
87050: LIST
87051: LIST
87052: LIST
87053: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , mc_tech [ base ] diff ape_techs ) ;
87054: LD_ADDR_EXP 63
87058: PUSH
87059: LD_EXP 63
87063: PPUSH
87064: LD_VAR 0 1
87068: PPUSH
87069: LD_EXP 63
87073: PUSH
87074: LD_VAR 0 1
87078: ARRAY
87079: PUSH
87080: LD_VAR 0 3
87084: DIFF
87085: PPUSH
87086: CALL_OW 1
87090: ST_TO_ADDR
// end ;
87091: LD_VAR 0 2
87095: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
87096: LD_INT 0
87098: PPUSH
// result := mc_vehicles [ base ] ;
87099: LD_ADDR_VAR 0 3
87103: PUSH
87104: LD_EXP 55
87108: PUSH
87109: LD_VAR 0 1
87113: ARRAY
87114: ST_TO_ADDR
// if onlyCombat then
87115: LD_VAR 0 2
87119: IFFALSE 87284
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] , [ f_weapon , ru_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ) ;
87121: LD_ADDR_VAR 0 3
87125: PUSH
87126: LD_VAR 0 3
87130: PUSH
87131: LD_VAR 0 3
87135: PPUSH
87136: LD_INT 2
87138: PUSH
87139: LD_INT 34
87141: PUSH
87142: LD_INT 12
87144: PUSH
87145: EMPTY
87146: LIST
87147: LIST
87148: PUSH
87149: LD_INT 34
87151: PUSH
87152: LD_INT 51
87154: PUSH
87155: EMPTY
87156: LIST
87157: LIST
87158: PUSH
87159: LD_INT 34
87161: PUSH
87162: LD_EXP 30
87166: PUSH
87167: EMPTY
87168: LIST
87169: LIST
87170: PUSH
87171: LD_INT 34
87173: PUSH
87174: LD_INT 32
87176: PUSH
87177: EMPTY
87178: LIST
87179: LIST
87180: PUSH
87181: LD_INT 34
87183: PUSH
87184: LD_INT 13
87186: PUSH
87187: EMPTY
87188: LIST
87189: LIST
87190: PUSH
87191: LD_INT 34
87193: PUSH
87194: LD_INT 52
87196: PUSH
87197: EMPTY
87198: LIST
87199: LIST
87200: PUSH
87201: LD_INT 34
87203: PUSH
87204: LD_INT 14
87206: PUSH
87207: EMPTY
87208: LIST
87209: LIST
87210: PUSH
87211: LD_INT 34
87213: PUSH
87214: LD_INT 53
87216: PUSH
87217: EMPTY
87218: LIST
87219: LIST
87220: PUSH
87221: LD_INT 34
87223: PUSH
87224: LD_EXP 29
87228: PUSH
87229: EMPTY
87230: LIST
87231: LIST
87232: PUSH
87233: LD_INT 34
87235: PUSH
87236: LD_INT 31
87238: PUSH
87239: EMPTY
87240: LIST
87241: LIST
87242: PUSH
87243: LD_INT 34
87245: PUSH
87246: LD_INT 48
87248: PUSH
87249: EMPTY
87250: LIST
87251: LIST
87252: PUSH
87253: LD_INT 34
87255: PUSH
87256: LD_INT 8
87258: PUSH
87259: EMPTY
87260: LIST
87261: LIST
87262: PUSH
87263: EMPTY
87264: LIST
87265: LIST
87266: LIST
87267: LIST
87268: LIST
87269: LIST
87270: LIST
87271: LIST
87272: LIST
87273: LIST
87274: LIST
87275: LIST
87276: LIST
87277: PPUSH
87278: CALL_OW 72
87282: DIFF
87283: ST_TO_ADDR
// end ; end_of_file
87284: LD_VAR 0 3
87288: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
87289: LD_INT 0
87291: PPUSH
87292: PPUSH
87293: PPUSH
// if not mc_bases or not skirmish then
87294: LD_EXP 36
87298: NOT
87299: PUSH
87300: LD_EXP 34
87304: NOT
87305: OR
87306: IFFALSE 87310
// exit ;
87308: GO 87475
// for i = 1 to mc_bases do
87310: LD_ADDR_VAR 0 4
87314: PUSH
87315: DOUBLE
87316: LD_INT 1
87318: DEC
87319: ST_TO_ADDR
87320: LD_EXP 36
87324: PUSH
87325: FOR_TO
87326: IFFALSE 87473
// begin if sci in mc_bases [ i ] then
87328: LD_VAR 0 2
87332: PUSH
87333: LD_EXP 36
87337: PUSH
87338: LD_VAR 0 4
87342: ARRAY
87343: IN
87344: IFFALSE 87471
// begin mc_ape := ReplaceIn ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
87346: LD_ADDR_EXP 65
87350: PUSH
87351: LD_EXP 65
87355: PPUSH
87356: LD_VAR 0 4
87360: PUSH
87361: LD_EXP 65
87365: PUSH
87366: LD_VAR 0 4
87370: ARRAY
87371: PUSH
87372: LD_INT 1
87374: PLUS
87375: PUSH
87376: EMPTY
87377: LIST
87378: LIST
87379: PPUSH
87380: LD_VAR 0 1
87384: PPUSH
87385: CALL 26211 0 3
87389: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
87390: LD_ADDR_VAR 0 5
87394: PUSH
87395: LD_EXP 36
87399: PUSH
87400: LD_VAR 0 4
87404: ARRAY
87405: PPUSH
87406: LD_INT 2
87408: PUSH
87409: LD_INT 30
87411: PUSH
87412: LD_INT 0
87414: PUSH
87415: EMPTY
87416: LIST
87417: LIST
87418: PUSH
87419: LD_INT 30
87421: PUSH
87422: LD_INT 1
87424: PUSH
87425: EMPTY
87426: LIST
87427: LIST
87428: PUSH
87429: EMPTY
87430: LIST
87431: LIST
87432: LIST
87433: PPUSH
87434: CALL_OW 72
87438: PPUSH
87439: LD_VAR 0 1
87443: PPUSH
87444: CALL_OW 74
87448: ST_TO_ADDR
// if tmp then
87449: LD_VAR 0 5
87453: IFFALSE 87469
// ComStandNearbyBuilding ( ape , tmp ) ;
87455: LD_VAR 0 1
87459: PPUSH
87460: LD_VAR 0 5
87464: PPUSH
87465: CALL 20778 0 2
// break ;
87469: GO 87473
// end ; end ;
87471: GO 87325
87473: POP
87474: POP
// end ;
87475: LD_VAR 0 3
87479: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
87480: LD_INT 0
87482: PPUSH
87483: PPUSH
87484: PPUSH
// if not mc_bases or not skirmish then
87485: LD_EXP 36
87489: NOT
87490: PUSH
87491: LD_EXP 34
87495: NOT
87496: OR
87497: IFFALSE 87501
// exit ;
87499: GO 87590
// for i = 1 to mc_bases do
87501: LD_ADDR_VAR 0 4
87505: PUSH
87506: DOUBLE
87507: LD_INT 1
87509: DEC
87510: ST_TO_ADDR
87511: LD_EXP 36
87515: PUSH
87516: FOR_TO
87517: IFFALSE 87588
// begin if building in mc_busy_turret_list [ i ] then
87519: LD_VAR 0 1
87523: PUSH
87524: LD_EXP 46
87528: PUSH
87529: LD_VAR 0 4
87533: ARRAY
87534: IN
87535: IFFALSE 87586
// begin tmp := mc_busy_turret_list [ i ] diff building ;
87537: LD_ADDR_VAR 0 5
87541: PUSH
87542: LD_EXP 46
87546: PUSH
87547: LD_VAR 0 4
87551: ARRAY
87552: PUSH
87553: LD_VAR 0 1
87557: DIFF
87558: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
87559: LD_ADDR_EXP 46
87563: PUSH
87564: LD_EXP 46
87568: PPUSH
87569: LD_VAR 0 4
87573: PPUSH
87574: LD_VAR 0 5
87578: PPUSH
87579: CALL_OW 1
87583: ST_TO_ADDR
// break ;
87584: GO 87588
// end ; end ;
87586: GO 87516
87588: POP
87589: POP
// end ;
87590: LD_VAR 0 3
87594: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
87595: LD_INT 0
87597: PPUSH
87598: PPUSH
87599: PPUSH
// if not mc_bases or not skirmish then
87600: LD_EXP 36
87604: NOT
87605: PUSH
87606: LD_EXP 34
87610: NOT
87611: OR
87612: IFFALSE 87616
// exit ;
87614: GO 87815
// for i = 1 to mc_bases do
87616: LD_ADDR_VAR 0 5
87620: PUSH
87621: DOUBLE
87622: LD_INT 1
87624: DEC
87625: ST_TO_ADDR
87626: LD_EXP 36
87630: PUSH
87631: FOR_TO
87632: IFFALSE 87813
// if building in mc_bases [ i ] then
87634: LD_VAR 0 1
87638: PUSH
87639: LD_EXP 36
87643: PUSH
87644: LD_VAR 0 5
87648: ARRAY
87649: IN
87650: IFFALSE 87811
// begin tmp := mc_bases [ i ] diff building ;
87652: LD_ADDR_VAR 0 6
87656: PUSH
87657: LD_EXP 36
87661: PUSH
87662: LD_VAR 0 5
87666: ARRAY
87667: PUSH
87668: LD_VAR 0 1
87672: DIFF
87673: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
87674: LD_ADDR_EXP 36
87678: PUSH
87679: LD_EXP 36
87683: PPUSH
87684: LD_VAR 0 5
87688: PPUSH
87689: LD_VAR 0 6
87693: PPUSH
87694: CALL_OW 1
87698: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
87699: LD_VAR 0 1
87703: PUSH
87704: LD_EXP 44
87708: PUSH
87709: LD_VAR 0 5
87713: ARRAY
87714: IN
87715: IFFALSE 87754
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
87717: LD_ADDR_EXP 44
87721: PUSH
87722: LD_EXP 44
87726: PPUSH
87727: LD_VAR 0 5
87731: PPUSH
87732: LD_EXP 44
87736: PUSH
87737: LD_VAR 0 5
87741: ARRAY
87742: PUSH
87743: LD_VAR 0 1
87747: DIFF
87748: PPUSH
87749: CALL_OW 1
87753: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
87754: LD_VAR 0 1
87758: PUSH
87759: LD_EXP 45
87763: PUSH
87764: LD_VAR 0 5
87768: ARRAY
87769: IN
87770: IFFALSE 87809
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
87772: LD_ADDR_EXP 45
87776: PUSH
87777: LD_EXP 45
87781: PPUSH
87782: LD_VAR 0 5
87786: PPUSH
87787: LD_EXP 45
87791: PUSH
87792: LD_VAR 0 5
87796: ARRAY
87797: PUSH
87798: LD_VAR 0 1
87802: DIFF
87803: PPUSH
87804: CALL_OW 1
87808: ST_TO_ADDR
// break ;
87809: GO 87813
// end ;
87811: GO 87631
87813: POP
87814: POP
// end ;
87815: LD_VAR 0 4
87819: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
87820: LD_INT 0
87822: PPUSH
87823: PPUSH
87824: PPUSH
// if not mc_bases or not skirmish or not side in mc_sides then
87825: LD_EXP 36
87829: NOT
87830: PUSH
87831: LD_EXP 34
87835: NOT
87836: OR
87837: PUSH
87838: LD_VAR 0 3
87842: PUSH
87843: LD_EXP 62
87847: IN
87848: NOT
87849: OR
87850: IFFALSE 87854
// exit ;
87852: GO 87977
// for i = 1 to mc_vehicles do
87854: LD_ADDR_VAR 0 6
87858: PUSH
87859: DOUBLE
87860: LD_INT 1
87862: DEC
87863: ST_TO_ADDR
87864: LD_EXP 55
87868: PUSH
87869: FOR_TO
87870: IFFALSE 87975
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
87872: LD_VAR 0 2
87876: PUSH
87877: LD_EXP 55
87881: PUSH
87882: LD_VAR 0 6
87886: ARRAY
87887: IN
87888: PUSH
87889: LD_VAR 0 1
87893: PUSH
87894: LD_EXP 55
87898: PUSH
87899: LD_VAR 0 6
87903: ARRAY
87904: IN
87905: OR
87906: IFFALSE 87973
// begin tmp := mc_vehicles [ i ] diff old ;
87908: LD_ADDR_VAR 0 7
87912: PUSH
87913: LD_EXP 55
87917: PUSH
87918: LD_VAR 0 6
87922: ARRAY
87923: PUSH
87924: LD_VAR 0 2
87928: DIFF
87929: ST_TO_ADDR
// tmp := tmp diff new ;
87930: LD_ADDR_VAR 0 7
87934: PUSH
87935: LD_VAR 0 7
87939: PUSH
87940: LD_VAR 0 1
87944: DIFF
87945: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
87946: LD_ADDR_EXP 55
87950: PUSH
87951: LD_EXP 55
87955: PPUSH
87956: LD_VAR 0 6
87960: PPUSH
87961: LD_VAR 0 7
87965: PPUSH
87966: CALL_OW 1
87970: ST_TO_ADDR
// break ;
87971: GO 87975
// end ;
87973: GO 87869
87975: POP
87976: POP
// end ;
87977: LD_VAR 0 5
87981: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
87982: LD_INT 0
87984: PPUSH
87985: PPUSH
87986: PPUSH
87987: PPUSH
// if not mc_bases or not skirmish then
87988: LD_EXP 36
87992: NOT
87993: PUSH
87994: LD_EXP 34
87998: NOT
87999: OR
88000: IFFALSE 88004
// exit ;
88002: GO 88381
// side := GetSide ( vehicle ) ;
88004: LD_ADDR_VAR 0 5
88008: PUSH
88009: LD_VAR 0 1
88013: PPUSH
88014: CALL_OW 255
88018: ST_TO_ADDR
// for i = 1 to mc_bases do
88019: LD_ADDR_VAR 0 4
88023: PUSH
88024: DOUBLE
88025: LD_INT 1
88027: DEC
88028: ST_TO_ADDR
88029: LD_EXP 36
88033: PUSH
88034: FOR_TO
88035: IFFALSE 88379
// begin if factory in mc_bases [ i ] then
88037: LD_VAR 0 2
88041: PUSH
88042: LD_EXP 36
88046: PUSH
88047: LD_VAR 0 4
88051: ARRAY
88052: IN
88053: IFFALSE 88377
// begin if mc_defender [ i ] < mc_defender_limit [ i ] and not GetWeapon ( vehicle ) in [ ar_control_tower , ar_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , us_cargo_bay , ar_radar , ru_radar , us_radar , ru_bulldozer , us_bulldozer , ar_bio_bomb , ar_selfpropelled_bomb , us_hack , us_crane , ru_crane , ru_siberium_rocket , us_siberium_rocket ] then
88055: LD_EXP 58
88059: PUSH
88060: LD_VAR 0 4
88064: ARRAY
88065: PUSH
88066: LD_EXP 47
88070: PUSH
88071: LD_VAR 0 4
88075: ARRAY
88076: LESS
88077: PUSH
88078: LD_VAR 0 1
88082: PPUSH
88083: CALL_OW 264
88087: PUSH
88088: LD_INT 31
88090: PUSH
88091: LD_INT 32
88093: PUSH
88094: LD_INT 51
88096: PUSH
88097: LD_EXP 30
88101: PUSH
88102: LD_INT 12
88104: PUSH
88105: LD_INT 30
88107: PUSH
88108: LD_EXP 29
88112: PUSH
88113: LD_INT 11
88115: PUSH
88116: LD_INT 53
88118: PUSH
88119: LD_INT 14
88121: PUSH
88122: LD_EXP 33
88126: PUSH
88127: LD_INT 29
88129: PUSH
88130: LD_EXP 31
88134: PUSH
88135: LD_INT 13
88137: PUSH
88138: LD_INT 52
88140: PUSH
88141: LD_INT 48
88143: PUSH
88144: LD_INT 8
88146: PUSH
88147: EMPTY
88148: LIST
88149: LIST
88150: LIST
88151: LIST
88152: LIST
88153: LIST
88154: LIST
88155: LIST
88156: LIST
88157: LIST
88158: LIST
88159: LIST
88160: LIST
88161: LIST
88162: LIST
88163: LIST
88164: LIST
88165: IN
88166: NOT
88167: AND
88168: IFFALSE 88216
// mc_defender := ReplaceIn ( mc_defender , [ i , mc_defender [ i ] + 1 ] , vehicle ) else
88170: LD_ADDR_EXP 58
88174: PUSH
88175: LD_EXP 58
88179: PPUSH
88180: LD_VAR 0 4
88184: PUSH
88185: LD_EXP 58
88189: PUSH
88190: LD_VAR 0 4
88194: ARRAY
88195: PUSH
88196: LD_INT 1
88198: PLUS
88199: PUSH
88200: EMPTY
88201: LIST
88202: LIST
88203: PPUSH
88204: LD_VAR 0 1
88208: PPUSH
88209: CALL 26211 0 3
88213: ST_TO_ADDR
88214: GO 88260
// mc_vehicles := ReplaceIn ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
88216: LD_ADDR_EXP 55
88220: PUSH
88221: LD_EXP 55
88225: PPUSH
88226: LD_VAR 0 4
88230: PUSH
88231: LD_EXP 55
88235: PUSH
88236: LD_VAR 0 4
88240: ARRAY
88241: PUSH
88242: LD_INT 1
88244: PLUS
88245: PUSH
88246: EMPTY
88247: LIST
88248: LIST
88249: PPUSH
88250: LD_VAR 0 1
88254: PPUSH
88255: CALL 26211 0 3
88259: ST_TO_ADDR
// if GetControl ( vehicle ) = control_remote then
88260: LD_VAR 0 1
88264: PPUSH
88265: CALL_OW 263
88269: PUSH
88270: LD_INT 2
88272: EQUAL
88273: IFFALSE 88293
// begin repeat wait ( 0 0$1 ) ;
88275: LD_INT 35
88277: PPUSH
88278: CALL_OW 67
// until IsControledBy ( vehicle ) ;
88282: LD_VAR 0 1
88286: PPUSH
88287: CALL_OW 312
88291: IFFALSE 88275
// end ; ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
88293: LD_VAR 0 1
88297: PPUSH
88298: LD_EXP 60
88302: PUSH
88303: LD_VAR 0 4
88307: ARRAY
88308: PPUSH
88309: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
88313: LD_VAR 0 1
88317: PPUSH
88318: CALL_OW 263
88322: PUSH
88323: LD_INT 1
88325: NONEQUAL
88326: IFFALSE 88330
// break ;
88328: GO 88379
// repeat wait ( 0 0$1 ) ;
88330: LD_INT 35
88332: PPUSH
88333: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
88337: LD_VAR 0 1
88341: PPUSH
88342: LD_EXP 60
88346: PUSH
88347: LD_VAR 0 4
88351: ARRAY
88352: PPUSH
88353: CALL_OW 308
88357: IFFALSE 88330
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
88359: LD_VAR 0 1
88363: PPUSH
88364: CALL_OW 311
88368: PPUSH
88369: CALL_OW 121
// exit ;
88373: POP
88374: POP
88375: GO 88381
// end ; end ;
88377: GO 88034
88379: POP
88380: POP
// end ;
88381: LD_VAR 0 3
88385: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
88386: LD_INT 0
88388: PPUSH
88389: PPUSH
88390: PPUSH
88391: PPUSH
// if not mc_bases or not skirmish then
88392: LD_EXP 36
88396: NOT
88397: PUSH
88398: LD_EXP 34
88402: NOT
88403: OR
88404: IFFALSE 88408
// exit ;
88406: GO 88761
// repeat wait ( 0 0$1 ) ;
88408: LD_INT 35
88410: PPUSH
88411: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
88415: LD_VAR 0 2
88419: PPUSH
88420: LD_VAR 0 3
88424: PPUSH
88425: CALL_OW 284
88429: IFFALSE 88408
// if GetResourceTypeXY ( x , y ) = mat_artefact then
88431: LD_VAR 0 2
88435: PPUSH
88436: LD_VAR 0 3
88440: PPUSH
88441: CALL_OW 283
88445: PUSH
88446: LD_INT 4
88448: EQUAL
88449: IFFALSE 88453
// exit ;
88451: GO 88761
// for i = 1 to mc_bases do
88453: LD_ADDR_VAR 0 7
88457: PUSH
88458: DOUBLE
88459: LD_INT 1
88461: DEC
88462: ST_TO_ADDR
88463: LD_EXP 36
88467: PUSH
88468: FOR_TO
88469: IFFALSE 88759
// begin if mc_crates_area [ i ] then
88471: LD_EXP 54
88475: PUSH
88476: LD_VAR 0 7
88480: ARRAY
88481: IFFALSE 88592
// for j in mc_crates_area [ i ] do
88483: LD_ADDR_VAR 0 8
88487: PUSH
88488: LD_EXP 54
88492: PUSH
88493: LD_VAR 0 7
88497: ARRAY
88498: PUSH
88499: FOR_IN
88500: IFFALSE 88590
// if InArea ( x , y , j ) then
88502: LD_VAR 0 2
88506: PPUSH
88507: LD_VAR 0 3
88511: PPUSH
88512: LD_VAR 0 8
88516: PPUSH
88517: CALL_OW 309
88521: IFFALSE 88588
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
88523: LD_ADDR_EXP 52
88527: PUSH
88528: LD_EXP 52
88532: PPUSH
88533: LD_VAR 0 7
88537: PUSH
88538: LD_EXP 52
88542: PUSH
88543: LD_VAR 0 7
88547: ARRAY
88548: PUSH
88549: LD_INT 1
88551: PLUS
88552: PUSH
88553: EMPTY
88554: LIST
88555: LIST
88556: PPUSH
88557: LD_VAR 0 4
88561: PUSH
88562: LD_VAR 0 2
88566: PUSH
88567: LD_VAR 0 3
88571: PUSH
88572: EMPTY
88573: LIST
88574: LIST
88575: LIST
88576: PPUSH
88577: CALL 26211 0 3
88581: ST_TO_ADDR
// exit ;
88582: POP
88583: POP
88584: POP
88585: POP
88586: GO 88761
// end ;
88588: GO 88499
88590: POP
88591: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
88592: LD_ADDR_VAR 0 9
88596: PUSH
88597: LD_EXP 36
88601: PUSH
88602: LD_VAR 0 7
88606: ARRAY
88607: PPUSH
88608: LD_INT 2
88610: PUSH
88611: LD_INT 30
88613: PUSH
88614: LD_INT 0
88616: PUSH
88617: EMPTY
88618: LIST
88619: LIST
88620: PUSH
88621: LD_INT 30
88623: PUSH
88624: LD_INT 1
88626: PUSH
88627: EMPTY
88628: LIST
88629: LIST
88630: PUSH
88631: EMPTY
88632: LIST
88633: LIST
88634: LIST
88635: PPUSH
88636: CALL_OW 72
88640: ST_TO_ADDR
// if not depot then
88641: LD_VAR 0 9
88645: NOT
88646: IFFALSE 88650
// continue ;
88648: GO 88468
// for j in depot do
88650: LD_ADDR_VAR 0 8
88654: PUSH
88655: LD_VAR 0 9
88659: PUSH
88660: FOR_IN
88661: IFFALSE 88755
// if GetDistUnitXY ( j , x , y ) < 30 then
88663: LD_VAR 0 8
88667: PPUSH
88668: LD_VAR 0 2
88672: PPUSH
88673: LD_VAR 0 3
88677: PPUSH
88678: CALL_OW 297
88682: PUSH
88683: LD_INT 30
88685: LESS
88686: IFFALSE 88753
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
88688: LD_ADDR_EXP 52
88692: PUSH
88693: LD_EXP 52
88697: PPUSH
88698: LD_VAR 0 7
88702: PUSH
88703: LD_EXP 52
88707: PUSH
88708: LD_VAR 0 7
88712: ARRAY
88713: PUSH
88714: LD_INT 1
88716: PLUS
88717: PUSH
88718: EMPTY
88719: LIST
88720: LIST
88721: PPUSH
88722: LD_VAR 0 4
88726: PUSH
88727: LD_VAR 0 2
88731: PUSH
88732: LD_VAR 0 3
88736: PUSH
88737: EMPTY
88738: LIST
88739: LIST
88740: LIST
88741: PPUSH
88742: CALL 26211 0 3
88746: ST_TO_ADDR
// exit ;
88747: POP
88748: POP
88749: POP
88750: POP
88751: GO 88761
// end ;
88753: GO 88660
88755: POP
88756: POP
// end ;
88757: GO 88468
88759: POP
88760: POP
// end ;
88761: LD_VAR 0 6
88765: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
88766: LD_INT 0
88768: PPUSH
88769: PPUSH
88770: PPUSH
88771: PPUSH
// if not mc_bases or not skirmish then
88772: LD_EXP 36
88776: NOT
88777: PUSH
88778: LD_EXP 34
88782: NOT
88783: OR
88784: IFFALSE 88788
// exit ;
88786: GO 89065
// side := GetSide ( lab ) ;
88788: LD_ADDR_VAR 0 4
88792: PUSH
88793: LD_VAR 0 2
88797: PPUSH
88798: CALL_OW 255
88802: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
88803: LD_VAR 0 4
88807: PUSH
88808: LD_EXP 62
88812: IN
88813: NOT
88814: PUSH
88815: LD_EXP 63
88819: NOT
88820: OR
88821: PUSH
88822: LD_EXP 36
88826: NOT
88827: OR
88828: IFFALSE 88832
// exit ;
88830: GO 89065
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
88832: LD_ADDR_EXP 63
88836: PUSH
88837: LD_EXP 63
88841: PPUSH
88842: LD_VAR 0 4
88846: PPUSH
88847: LD_EXP 63
88851: PUSH
88852: LD_VAR 0 4
88856: ARRAY
88857: PUSH
88858: LD_VAR 0 1
88862: DIFF
88863: PPUSH
88864: CALL_OW 1
88868: ST_TO_ADDR
// for i = 1 to mc_bases do
88869: LD_ADDR_VAR 0 5
88873: PUSH
88874: DOUBLE
88875: LD_INT 1
88877: DEC
88878: ST_TO_ADDR
88879: LD_EXP 36
88883: PUSH
88884: FOR_TO
88885: IFFALSE 89063
// begin if lab in mc_bases [ i ] then
88887: LD_VAR 0 2
88891: PUSH
88892: LD_EXP 36
88896: PUSH
88897: LD_VAR 0 5
88901: ARRAY
88902: IN
88903: IFFALSE 89061
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
88905: LD_VAR 0 1
88909: PUSH
88910: LD_INT 11
88912: PUSH
88913: LD_INT 4
88915: PUSH
88916: LD_INT 3
88918: PUSH
88919: LD_INT 2
88921: PUSH
88922: EMPTY
88923: LIST
88924: LIST
88925: LIST
88926: LIST
88927: IN
88928: PUSH
88929: LD_EXP 66
88933: PUSH
88934: LD_VAR 0 5
88938: ARRAY
88939: AND
88940: IFFALSE 89061
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
88942: LD_ADDR_VAR 0 6
88946: PUSH
88947: LD_EXP 66
88951: PUSH
88952: LD_VAR 0 5
88956: ARRAY
88957: PUSH
88958: LD_INT 1
88960: ARRAY
88961: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
88962: LD_ADDR_EXP 66
88966: PUSH
88967: LD_EXP 66
88971: PPUSH
88972: LD_VAR 0 5
88976: PPUSH
88977: EMPTY
88978: PPUSH
88979: CALL_OW 1
88983: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
88984: LD_VAR 0 6
88988: PPUSH
88989: LD_INT 0
88991: PPUSH
88992: CALL_OW 109
// ComExitBuilding ( tmp ) ;
88996: LD_VAR 0 6
89000: PPUSH
89001: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
89005: LD_ADDR_EXP 65
89009: PUSH
89010: LD_EXP 65
89014: PPUSH
89015: LD_VAR 0 5
89019: PPUSH
89020: LD_EXP 65
89024: PUSH
89025: LD_VAR 0 5
89029: ARRAY
89030: PPUSH
89031: LD_INT 1
89033: PPUSH
89034: LD_VAR 0 6
89038: PPUSH
89039: CALL_OW 2
89043: PPUSH
89044: CALL_OW 1
89048: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
89049: LD_VAR 0 5
89053: PPUSH
89054: LD_INT 112
89056: PPUSH
89057: CALL 66173 0 2
// end ; end ; end ;
89061: GO 88884
89063: POP
89064: POP
// end ;
89065: LD_VAR 0 3
89069: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
89070: LD_INT 0
89072: PPUSH
89073: PPUSH
89074: PPUSH
89075: PPUSH
89076: PPUSH
89077: PPUSH
89078: PPUSH
89079: PPUSH
// if not mc_bases or not skirmish then
89080: LD_EXP 36
89084: NOT
89085: PUSH
89086: LD_EXP 34
89090: NOT
89091: OR
89092: IFFALSE 89096
// exit ;
89094: GO 90245
// for i = 1 to mc_bases do
89096: LD_ADDR_VAR 0 3
89100: PUSH
89101: DOUBLE
89102: LD_INT 1
89104: DEC
89105: ST_TO_ADDR
89106: LD_EXP 36
89110: PUSH
89111: FOR_TO
89112: IFFALSE 90243
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_defender [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
89114: LD_VAR 0 1
89118: PUSH
89119: LD_EXP 36
89123: PUSH
89124: LD_VAR 0 3
89128: ARRAY
89129: IN
89130: PUSH
89131: LD_VAR 0 1
89135: PUSH
89136: LD_EXP 43
89140: PUSH
89141: LD_VAR 0 3
89145: ARRAY
89146: IN
89147: OR
89148: PUSH
89149: LD_VAR 0 1
89153: PUSH
89154: LD_EXP 58
89158: PUSH
89159: LD_VAR 0 3
89163: ARRAY
89164: IN
89165: OR
89166: PUSH
89167: LD_VAR 0 1
89171: PUSH
89172: LD_EXP 55
89176: PUSH
89177: LD_VAR 0 3
89181: ARRAY
89182: IN
89183: OR
89184: PUSH
89185: LD_VAR 0 1
89189: PUSH
89190: LD_EXP 65
89194: PUSH
89195: LD_VAR 0 3
89199: ARRAY
89200: IN
89201: OR
89202: PUSH
89203: LD_VAR 0 1
89207: PUSH
89208: LD_EXP 66
89212: PUSH
89213: LD_VAR 0 3
89217: ARRAY
89218: IN
89219: OR
89220: IFFALSE 90241
// begin if un in mc_ape [ i ] then
89222: LD_VAR 0 1
89226: PUSH
89227: LD_EXP 65
89231: PUSH
89232: LD_VAR 0 3
89236: ARRAY
89237: IN
89238: IFFALSE 89277
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
89240: LD_ADDR_EXP 65
89244: PUSH
89245: LD_EXP 65
89249: PPUSH
89250: LD_VAR 0 3
89254: PPUSH
89255: LD_EXP 65
89259: PUSH
89260: LD_VAR 0 3
89264: ARRAY
89265: PUSH
89266: LD_VAR 0 1
89270: DIFF
89271: PPUSH
89272: CALL_OW 1
89276: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
89277: LD_VAR 0 1
89281: PUSH
89282: LD_EXP 66
89286: PUSH
89287: LD_VAR 0 3
89291: ARRAY
89292: IN
89293: IFFALSE 89317
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
89295: LD_ADDR_EXP 66
89299: PUSH
89300: LD_EXP 66
89304: PPUSH
89305: LD_VAR 0 3
89309: PPUSH
89310: EMPTY
89311: PPUSH
89312: CALL_OW 1
89316: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and ( GetTag ( un ) = 20 or un in mc_defender [ i ] or GetWeapon ( un ) in [ us_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , ar_cargo_bay , us_crane , ru_crane ] ) then
89317: LD_VAR 0 1
89321: PPUSH
89322: CALL_OW 247
89326: PUSH
89327: LD_INT 2
89329: EQUAL
89330: PUSH
89331: LD_VAR 0 1
89335: PPUSH
89336: CALL_OW 110
89340: PUSH
89341: LD_INT 20
89343: EQUAL
89344: PUSH
89345: LD_VAR 0 1
89349: PUSH
89350: LD_EXP 58
89354: PUSH
89355: LD_VAR 0 3
89359: ARRAY
89360: IN
89361: OR
89362: PUSH
89363: LD_VAR 0 1
89367: PPUSH
89368: CALL_OW 264
89372: PUSH
89373: LD_INT 12
89375: PUSH
89376: LD_INT 51
89378: PUSH
89379: LD_EXP 30
89383: PUSH
89384: LD_INT 32
89386: PUSH
89387: LD_INT 13
89389: PUSH
89390: LD_INT 52
89392: PUSH
89393: EMPTY
89394: LIST
89395: LIST
89396: LIST
89397: LIST
89398: LIST
89399: LIST
89400: IN
89401: OR
89402: AND
89403: IFFALSE 89581
// begin if un in mc_defender [ i ] then
89405: LD_VAR 0 1
89409: PUSH
89410: LD_EXP 58
89414: PUSH
89415: LD_VAR 0 3
89419: ARRAY
89420: IN
89421: IFFALSE 89460
// mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
89423: LD_ADDR_EXP 58
89427: PUSH
89428: LD_EXP 58
89432: PPUSH
89433: LD_VAR 0 3
89437: PPUSH
89438: LD_EXP 58
89442: PUSH
89443: LD_VAR 0 3
89447: ARRAY
89448: PUSH
89449: LD_VAR 0 1
89453: DIFF
89454: PPUSH
89455: CALL_OW 1
89459: ST_TO_ADDR
// fac := MC_GetBuildings ( i , b_factory ) ;
89460: LD_ADDR_VAR 0 8
89464: PUSH
89465: LD_VAR 0 3
89469: PPUSH
89470: LD_INT 3
89472: PPUSH
89473: CALL 86133 0 2
89477: ST_TO_ADDR
// if fac then
89478: LD_VAR 0 8
89482: IFFALSE 89581
// begin for j in fac do
89484: LD_ADDR_VAR 0 4
89488: PUSH
89489: LD_VAR 0 8
89493: PUSH
89494: FOR_IN
89495: IFFALSE 89579
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
89497: LD_ADDR_VAR 0 9
89501: PUSH
89502: LD_VAR 0 8
89506: PPUSH
89507: LD_VAR 0 1
89511: PPUSH
89512: CALL_OW 265
89516: PPUSH
89517: LD_VAR 0 1
89521: PPUSH
89522: CALL_OW 262
89526: PPUSH
89527: LD_VAR 0 1
89531: PPUSH
89532: CALL_OW 263
89536: PPUSH
89537: LD_VAR 0 1
89541: PPUSH
89542: CALL_OW 264
89546: PPUSH
89547: CALL 23743 0 5
89551: ST_TO_ADDR
// if components then
89552: LD_VAR 0 9
89556: IFFALSE 89577
// begin MC_InsertProduceList ( i , [ components ] ) ;
89558: LD_VAR 0 3
89562: PPUSH
89563: LD_VAR 0 9
89567: PUSH
89568: EMPTY
89569: LIST
89570: PPUSH
89571: CALL 85678 0 2
// break ;
89575: GO 89579
// end ; end ;
89577: GO 89494
89579: POP
89580: POP
// end ; end ; if GetType ( un ) = unit_building then
89581: LD_VAR 0 1
89585: PPUSH
89586: CALL_OW 247
89590: PUSH
89591: LD_INT 3
89593: EQUAL
89594: IFFALSE 89909
// begin btype := GetBType ( un ) ;
89596: LD_ADDR_VAR 0 5
89600: PUSH
89601: LD_VAR 0 1
89605: PPUSH
89606: CALL_OW 266
89610: ST_TO_ADDR
// if btype = b_warehouse then
89611: LD_VAR 0 5
89615: PUSH
89616: LD_INT 1
89618: EQUAL
89619: IFFALSE 89637
// begin btype := b_depot ;
89621: LD_ADDR_VAR 0 5
89625: PUSH
89626: LD_INT 0
89628: ST_TO_ADDR
// pos := 1 ;
89629: LD_ADDR_VAR 0 6
89633: PUSH
89634: LD_INT 1
89636: ST_TO_ADDR
// end ; if btype = b_factory then
89637: LD_VAR 0 5
89641: PUSH
89642: LD_INT 3
89644: EQUAL
89645: IFFALSE 89663
// begin btype := b_workshop ;
89647: LD_ADDR_VAR 0 5
89651: PUSH
89652: LD_INT 2
89654: ST_TO_ADDR
// pos := 1 ;
89655: LD_ADDR_VAR 0 6
89659: PUSH
89660: LD_INT 1
89662: ST_TO_ADDR
// end ; if btype = b_barracks then
89663: LD_VAR 0 5
89667: PUSH
89668: LD_INT 5
89670: EQUAL
89671: IFFALSE 89681
// btype := b_armoury ;
89673: LD_ADDR_VAR 0 5
89677: PUSH
89678: LD_INT 4
89680: ST_TO_ADDR
// if btype in [ b_lab_half , b_lab_full ] then
89681: LD_VAR 0 5
89685: PUSH
89686: LD_INT 7
89688: PUSH
89689: LD_INT 8
89691: PUSH
89692: EMPTY
89693: LIST
89694: LIST
89695: IN
89696: IFFALSE 89706
// btype := b_lab ;
89698: LD_ADDR_VAR 0 5
89702: PUSH
89703: LD_INT 6
89705: ST_TO_ADDR
// mc_build_list := ReplaceIn ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
89706: LD_ADDR_EXP 41
89710: PUSH
89711: LD_EXP 41
89715: PPUSH
89716: LD_VAR 0 3
89720: PUSH
89721: LD_EXP 41
89725: PUSH
89726: LD_VAR 0 3
89730: ARRAY
89731: PUSH
89732: LD_INT 1
89734: PLUS
89735: PUSH
89736: EMPTY
89737: LIST
89738: LIST
89739: PPUSH
89740: LD_VAR 0 5
89744: PUSH
89745: LD_VAR 0 1
89749: PPUSH
89750: CALL_OW 250
89754: PUSH
89755: LD_VAR 0 1
89759: PPUSH
89760: CALL_OW 251
89764: PUSH
89765: LD_VAR 0 1
89769: PPUSH
89770: CALL_OW 254
89774: PUSH
89775: EMPTY
89776: LIST
89777: LIST
89778: LIST
89779: LIST
89780: PPUSH
89781: CALL 26211 0 3
89785: ST_TO_ADDR
// if pos = 1 then
89786: LD_VAR 0 6
89790: PUSH
89791: LD_INT 1
89793: EQUAL
89794: IFFALSE 89909
// begin tmp := mc_build_list [ i ] ;
89796: LD_ADDR_VAR 0 7
89800: PUSH
89801: LD_EXP 41
89805: PUSH
89806: LD_VAR 0 3
89810: ARRAY
89811: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
89812: LD_VAR 0 7
89816: PPUSH
89817: LD_INT 2
89819: PUSH
89820: LD_INT 30
89822: PUSH
89823: LD_INT 0
89825: PUSH
89826: EMPTY
89827: LIST
89828: LIST
89829: PUSH
89830: LD_INT 30
89832: PUSH
89833: LD_INT 1
89835: PUSH
89836: EMPTY
89837: LIST
89838: LIST
89839: PUSH
89840: EMPTY
89841: LIST
89842: LIST
89843: LIST
89844: PPUSH
89845: CALL_OW 72
89849: IFFALSE 89859
// pos := 2 ;
89851: LD_ADDR_VAR 0 6
89855: PUSH
89856: LD_INT 2
89858: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
89859: LD_ADDR_VAR 0 7
89863: PUSH
89864: LD_VAR 0 7
89868: PPUSH
89869: LD_VAR 0 6
89873: PPUSH
89874: LD_VAR 0 7
89878: PPUSH
89879: CALL 26537 0 3
89883: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
89884: LD_ADDR_EXP 41
89888: PUSH
89889: LD_EXP 41
89893: PPUSH
89894: LD_VAR 0 3
89898: PPUSH
89899: LD_VAR 0 7
89903: PPUSH
89904: CALL_OW 1
89908: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
89909: LD_VAR 0 1
89913: PUSH
89914: LD_EXP 36
89918: PUSH
89919: LD_VAR 0 3
89923: ARRAY
89924: IN
89925: IFFALSE 89964
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
89927: LD_ADDR_EXP 36
89931: PUSH
89932: LD_EXP 36
89936: PPUSH
89937: LD_VAR 0 3
89941: PPUSH
89942: LD_EXP 36
89946: PUSH
89947: LD_VAR 0 3
89951: ARRAY
89952: PUSH
89953: LD_VAR 0 1
89957: DIFF
89958: PPUSH
89959: CALL_OW 1
89963: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
89964: LD_VAR 0 1
89968: PUSH
89969: LD_EXP 43
89973: PUSH
89974: LD_VAR 0 3
89978: ARRAY
89979: IN
89980: IFFALSE 90019
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
89982: LD_ADDR_EXP 43
89986: PUSH
89987: LD_EXP 43
89991: PPUSH
89992: LD_VAR 0 3
89996: PPUSH
89997: LD_EXP 43
90001: PUSH
90002: LD_VAR 0 3
90006: ARRAY
90007: PUSH
90008: LD_VAR 0 1
90012: DIFF
90013: PPUSH
90014: CALL_OW 1
90018: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
90019: LD_VAR 0 1
90023: PUSH
90024: LD_EXP 55
90028: PUSH
90029: LD_VAR 0 3
90033: ARRAY
90034: IN
90035: IFFALSE 90074
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
90037: LD_ADDR_EXP 55
90041: PUSH
90042: LD_EXP 55
90046: PPUSH
90047: LD_VAR 0 3
90051: PPUSH
90052: LD_EXP 55
90056: PUSH
90057: LD_VAR 0 3
90061: ARRAY
90062: PUSH
90063: LD_VAR 0 1
90067: DIFF
90068: PPUSH
90069: CALL_OW 1
90073: ST_TO_ADDR
// end ; if un in mc_defender [ i ] then
90074: LD_VAR 0 1
90078: PUSH
90079: LD_EXP 58
90083: PUSH
90084: LD_VAR 0 3
90088: ARRAY
90089: IN
90090: IFFALSE 90129
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
90092: LD_ADDR_EXP 58
90096: PUSH
90097: LD_EXP 58
90101: PPUSH
90102: LD_VAR 0 3
90106: PPUSH
90107: LD_EXP 58
90111: PUSH
90112: LD_VAR 0 3
90116: ARRAY
90117: PUSH
90118: LD_VAR 0 1
90122: DIFF
90123: PPUSH
90124: CALL_OW 1
90128: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
90129: LD_VAR 0 1
90133: PUSH
90134: LD_EXP 45
90138: PUSH
90139: LD_VAR 0 3
90143: ARRAY
90144: IN
90145: IFFALSE 90184
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
90147: LD_ADDR_EXP 45
90151: PUSH
90152: LD_EXP 45
90156: PPUSH
90157: LD_VAR 0 3
90161: PPUSH
90162: LD_EXP 45
90166: PUSH
90167: LD_VAR 0 3
90171: ARRAY
90172: PUSH
90173: LD_VAR 0 1
90177: DIFF
90178: PPUSH
90179: CALL_OW 1
90183: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
90184: LD_VAR 0 1
90188: PUSH
90189: LD_EXP 44
90193: PUSH
90194: LD_VAR 0 3
90198: ARRAY
90199: IN
90200: IFFALSE 90239
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
90202: LD_ADDR_EXP 44
90206: PUSH
90207: LD_EXP 44
90211: PPUSH
90212: LD_VAR 0 3
90216: PPUSH
90217: LD_EXP 44
90221: PUSH
90222: LD_VAR 0 3
90226: ARRAY
90227: PUSH
90228: LD_VAR 0 1
90232: DIFF
90233: PPUSH
90234: CALL_OW 1
90238: ST_TO_ADDR
// end ; break ;
90239: GO 90243
// end ;
90241: GO 89111
90243: POP
90244: POP
// end ;
90245: LD_VAR 0 2
90249: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
90250: LD_INT 0
90252: PPUSH
90253: PPUSH
90254: PPUSH
// if not mc_bases or not skirmish then
90255: LD_EXP 36
90259: NOT
90260: PUSH
90261: LD_EXP 34
90265: NOT
90266: OR
90267: IFFALSE 90271
// exit ;
90269: GO 90486
// for i = 1 to mc_bases do
90271: LD_ADDR_VAR 0 3
90275: PUSH
90276: DOUBLE
90277: LD_INT 1
90279: DEC
90280: ST_TO_ADDR
90281: LD_EXP 36
90285: PUSH
90286: FOR_TO
90287: IFFALSE 90484
// begin if building in mc_construct_list [ i ] then
90289: LD_VAR 0 1
90293: PUSH
90294: LD_EXP 43
90298: PUSH
90299: LD_VAR 0 3
90303: ARRAY
90304: IN
90305: IFFALSE 90482
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
90307: LD_ADDR_EXP 43
90311: PUSH
90312: LD_EXP 43
90316: PPUSH
90317: LD_VAR 0 3
90321: PPUSH
90322: LD_EXP 43
90326: PUSH
90327: LD_VAR 0 3
90331: ARRAY
90332: PUSH
90333: LD_VAR 0 1
90337: DIFF
90338: PPUSH
90339: CALL_OW 1
90343: ST_TO_ADDR
// if building in mc_lab [ i ] then
90344: LD_VAR 0 1
90348: PUSH
90349: LD_EXP 69
90353: PUSH
90354: LD_VAR 0 3
90358: ARRAY
90359: IN
90360: IFFALSE 90415
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
90362: LD_ADDR_EXP 70
90366: PUSH
90367: LD_EXP 70
90371: PPUSH
90372: LD_VAR 0 3
90376: PPUSH
90377: LD_EXP 70
90381: PUSH
90382: LD_VAR 0 3
90386: ARRAY
90387: PPUSH
90388: LD_INT 1
90390: PPUSH
90391: LD_EXP 70
90395: PUSH
90396: LD_VAR 0 3
90400: ARRAY
90401: PPUSH
90402: LD_INT 0
90404: PPUSH
90405: CALL 25629 0 4
90409: PPUSH
90410: CALL_OW 1
90414: ST_TO_ADDR
// if not building in mc_bases [ i ] then
90415: LD_VAR 0 1
90419: PUSH
90420: LD_EXP 36
90424: PUSH
90425: LD_VAR 0 3
90429: ARRAY
90430: IN
90431: NOT
90432: IFFALSE 90478
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
90434: LD_ADDR_EXP 36
90438: PUSH
90439: LD_EXP 36
90443: PPUSH
90444: LD_VAR 0 3
90448: PUSH
90449: LD_EXP 36
90453: PUSH
90454: LD_VAR 0 3
90458: ARRAY
90459: PUSH
90460: LD_INT 1
90462: PLUS
90463: PUSH
90464: EMPTY
90465: LIST
90466: LIST
90467: PPUSH
90468: LD_VAR 0 1
90472: PPUSH
90473: CALL 26211 0 3
90477: ST_TO_ADDR
// exit ;
90478: POP
90479: POP
90480: GO 90486
// end ; end ;
90482: GO 90286
90484: POP
90485: POP
// end ;
90486: LD_VAR 0 2
90490: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
90491: LD_INT 0
90493: PPUSH
90494: PPUSH
90495: PPUSH
90496: PPUSH
90497: PPUSH
90498: PPUSH
90499: PPUSH
// if not mc_bases or not skirmish then
90500: LD_EXP 36
90504: NOT
90505: PUSH
90506: LD_EXP 34
90510: NOT
90511: OR
90512: IFFALSE 90516
// exit ;
90514: GO 91177
// for i = 1 to mc_bases do
90516: LD_ADDR_VAR 0 3
90520: PUSH
90521: DOUBLE
90522: LD_INT 1
90524: DEC
90525: ST_TO_ADDR
90526: LD_EXP 36
90530: PUSH
90531: FOR_TO
90532: IFFALSE 91175
// begin if building in mc_construct_list [ i ] then
90534: LD_VAR 0 1
90538: PUSH
90539: LD_EXP 43
90543: PUSH
90544: LD_VAR 0 3
90548: ARRAY
90549: IN
90550: IFFALSE 91173
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
90552: LD_ADDR_EXP 43
90556: PUSH
90557: LD_EXP 43
90561: PPUSH
90562: LD_VAR 0 3
90566: PPUSH
90567: LD_EXP 43
90571: PUSH
90572: LD_VAR 0 3
90576: ARRAY
90577: PUSH
90578: LD_VAR 0 1
90582: DIFF
90583: PPUSH
90584: CALL_OW 1
90588: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
90589: LD_ADDR_EXP 36
90593: PUSH
90594: LD_EXP 36
90598: PPUSH
90599: LD_VAR 0 3
90603: PUSH
90604: LD_EXP 36
90608: PUSH
90609: LD_VAR 0 3
90613: ARRAY
90614: PUSH
90615: LD_INT 1
90617: PLUS
90618: PUSH
90619: EMPTY
90620: LIST
90621: LIST
90622: PPUSH
90623: LD_VAR 0 1
90627: PPUSH
90628: CALL 26211 0 3
90632: ST_TO_ADDR
// btype := GetBType ( building ) ;
90633: LD_ADDR_VAR 0 5
90637: PUSH
90638: LD_VAR 0 1
90642: PPUSH
90643: CALL_OW 266
90647: ST_TO_ADDR
// side := GetSide ( building ) ;
90648: LD_ADDR_VAR 0 8
90652: PUSH
90653: LD_VAR 0 1
90657: PPUSH
90658: CALL_OW 255
90662: ST_TO_ADDR
// if btype = b_lab then
90663: LD_VAR 0 5
90667: PUSH
90668: LD_INT 6
90670: EQUAL
90671: IFFALSE 90721
// begin mc_lab := ReplaceIn ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
90673: LD_ADDR_EXP 69
90677: PUSH
90678: LD_EXP 69
90682: PPUSH
90683: LD_VAR 0 3
90687: PUSH
90688: LD_EXP 69
90692: PUSH
90693: LD_VAR 0 3
90697: ARRAY
90698: PUSH
90699: LD_INT 1
90701: PLUS
90702: PUSH
90703: EMPTY
90704: LIST
90705: LIST
90706: PPUSH
90707: LD_VAR 0 1
90711: PPUSH
90712: CALL 26211 0 3
90716: ST_TO_ADDR
// exit ;
90717: POP
90718: POP
90719: GO 91177
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
90721: LD_VAR 0 5
90725: PUSH
90726: LD_INT 0
90728: PUSH
90729: LD_INT 2
90731: PUSH
90732: LD_INT 4
90734: PUSH
90735: EMPTY
90736: LIST
90737: LIST
90738: LIST
90739: IN
90740: IFFALSE 90864
// begin if btype = b_armoury then
90742: LD_VAR 0 5
90746: PUSH
90747: LD_INT 4
90749: EQUAL
90750: IFFALSE 90760
// btype := b_barracks ;
90752: LD_ADDR_VAR 0 5
90756: PUSH
90757: LD_INT 5
90759: ST_TO_ADDR
// if btype = b_depot then
90760: LD_VAR 0 5
90764: PUSH
90765: LD_INT 0
90767: EQUAL
90768: IFFALSE 90778
// btype := b_warehouse ;
90770: LD_ADDR_VAR 0 5
90774: PUSH
90775: LD_INT 1
90777: ST_TO_ADDR
// if btype = b_workshop then
90778: LD_VAR 0 5
90782: PUSH
90783: LD_INT 2
90785: EQUAL
90786: IFFALSE 90796
// btype := b_factory ;
90788: LD_ADDR_VAR 0 5
90792: PUSH
90793: LD_INT 3
90795: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
90796: LD_VAR 0 5
90800: PPUSH
90801: LD_VAR 0 8
90805: PPUSH
90806: CALL_OW 323
90810: PUSH
90811: LD_INT 1
90813: EQUAL
90814: IFFALSE 90860
// mc_build_upgrade := ReplaceIn ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
90816: LD_ADDR_EXP 68
90820: PUSH
90821: LD_EXP 68
90825: PPUSH
90826: LD_VAR 0 3
90830: PUSH
90831: LD_EXP 68
90835: PUSH
90836: LD_VAR 0 3
90840: ARRAY
90841: PUSH
90842: LD_INT 1
90844: PLUS
90845: PUSH
90846: EMPTY
90847: LIST
90848: LIST
90849: PPUSH
90850: LD_VAR 0 1
90854: PPUSH
90855: CALL 26211 0 3
90859: ST_TO_ADDR
// exit ;
90860: POP
90861: POP
90862: GO 91177
// end ; if btype in [ b_bunker , b_turret ] then
90864: LD_VAR 0 5
90868: PUSH
90869: LD_INT 32
90871: PUSH
90872: LD_INT 33
90874: PUSH
90875: EMPTY
90876: LIST
90877: LIST
90878: IN
90879: IFFALSE 91169
// begin mc_turret_list := ReplaceIn ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
90881: LD_ADDR_EXP 44
90885: PUSH
90886: LD_EXP 44
90890: PPUSH
90891: LD_VAR 0 3
90895: PUSH
90896: LD_EXP 44
90900: PUSH
90901: LD_VAR 0 3
90905: ARRAY
90906: PUSH
90907: LD_INT 1
90909: PLUS
90910: PUSH
90911: EMPTY
90912: LIST
90913: LIST
90914: PPUSH
90915: LD_VAR 0 1
90919: PPUSH
90920: CALL 26211 0 3
90924: ST_TO_ADDR
// if btype = b_bunker then
90925: LD_VAR 0 5
90929: PUSH
90930: LD_INT 32
90932: EQUAL
90933: IFFALSE 91169
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
90935: LD_ADDR_EXP 45
90939: PUSH
90940: LD_EXP 45
90944: PPUSH
90945: LD_VAR 0 3
90949: PUSH
90950: LD_EXP 45
90954: PUSH
90955: LD_VAR 0 3
90959: ARRAY
90960: PUSH
90961: LD_INT 1
90963: PLUS
90964: PUSH
90965: EMPTY
90966: LIST
90967: LIST
90968: PPUSH
90969: LD_VAR 0 1
90973: PPUSH
90974: CALL 26211 0 3
90978: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
90979: LD_ADDR_VAR 0 6
90983: PUSH
90984: LD_EXP 36
90988: PUSH
90989: LD_VAR 0 3
90993: ARRAY
90994: PPUSH
90995: LD_INT 25
90997: PUSH
90998: LD_INT 1
91000: PUSH
91001: EMPTY
91002: LIST
91003: LIST
91004: PUSH
91005: LD_INT 3
91007: PUSH
91008: LD_INT 54
91010: PUSH
91011: EMPTY
91012: LIST
91013: PUSH
91014: EMPTY
91015: LIST
91016: LIST
91017: PUSH
91018: EMPTY
91019: LIST
91020: LIST
91021: PPUSH
91022: CALL_OW 72
91026: ST_TO_ADDR
// if tmp then
91027: LD_VAR 0 6
91031: IFFALSE 91037
// exit ;
91033: POP
91034: POP
91035: GO 91177
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
91037: LD_ADDR_VAR 0 6
91041: PUSH
91042: LD_EXP 36
91046: PUSH
91047: LD_VAR 0 3
91051: ARRAY
91052: PPUSH
91053: LD_INT 2
91055: PUSH
91056: LD_INT 30
91058: PUSH
91059: LD_INT 4
91061: PUSH
91062: EMPTY
91063: LIST
91064: LIST
91065: PUSH
91066: LD_INT 30
91068: PUSH
91069: LD_INT 5
91071: PUSH
91072: EMPTY
91073: LIST
91074: LIST
91075: PUSH
91076: EMPTY
91077: LIST
91078: LIST
91079: LIST
91080: PPUSH
91081: CALL_OW 72
91085: ST_TO_ADDR
// if not tmp then
91086: LD_VAR 0 6
91090: NOT
91091: IFFALSE 91097
// exit ;
91093: POP
91094: POP
91095: GO 91177
// for j in tmp do
91097: LD_ADDR_VAR 0 4
91101: PUSH
91102: LD_VAR 0 6
91106: PUSH
91107: FOR_IN
91108: IFFALSE 91167
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
91110: LD_ADDR_VAR 0 7
91114: PUSH
91115: LD_VAR 0 4
91119: PPUSH
91120: CALL_OW 313
91124: PPUSH
91125: LD_INT 25
91127: PUSH
91128: LD_INT 1
91130: PUSH
91131: EMPTY
91132: LIST
91133: LIST
91134: PPUSH
91135: CALL_OW 72
91139: ST_TO_ADDR
// if units then
91140: LD_VAR 0 7
91144: IFFALSE 91165
// begin ComExitBuilding ( units [ 1 ] ) ;
91146: LD_VAR 0 7
91150: PUSH
91151: LD_INT 1
91153: ARRAY
91154: PPUSH
91155: CALL_OW 122
// exit ;
91159: POP
91160: POP
91161: POP
91162: POP
91163: GO 91177
// end ; end ;
91165: GO 91107
91167: POP
91168: POP
// end ; end ; exit ;
91169: POP
91170: POP
91171: GO 91177
// end ; end ;
91173: GO 90531
91175: POP
91176: POP
// end ;
91177: LD_VAR 0 2
91181: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
91182: LD_INT 0
91184: PPUSH
91185: PPUSH
91186: PPUSH
91187: PPUSH
91188: PPUSH
91189: PPUSH
91190: PPUSH
// if not mc_bases or not skirmish then
91191: LD_EXP 36
91195: NOT
91196: PUSH
91197: LD_EXP 34
91201: NOT
91202: OR
91203: IFFALSE 91207
// exit ;
91205: GO 91438
// btype := GetBType ( building ) ;
91207: LD_ADDR_VAR 0 6
91211: PUSH
91212: LD_VAR 0 1
91216: PPUSH
91217: CALL_OW 266
91221: ST_TO_ADDR
// x := GetX ( building ) ;
91222: LD_ADDR_VAR 0 7
91226: PUSH
91227: LD_VAR 0 1
91231: PPUSH
91232: CALL_OW 250
91236: ST_TO_ADDR
// y := GetY ( building ) ;
91237: LD_ADDR_VAR 0 8
91241: PUSH
91242: LD_VAR 0 1
91246: PPUSH
91247: CALL_OW 251
91251: ST_TO_ADDR
// d := GetDir ( building ) ;
91252: LD_ADDR_VAR 0 9
91256: PUSH
91257: LD_VAR 0 1
91261: PPUSH
91262: CALL_OW 254
91266: ST_TO_ADDR
// for i = 1 to mc_bases do
91267: LD_ADDR_VAR 0 4
91271: PUSH
91272: DOUBLE
91273: LD_INT 1
91275: DEC
91276: ST_TO_ADDR
91277: LD_EXP 36
91281: PUSH
91282: FOR_TO
91283: IFFALSE 91436
// begin if not mc_build_list [ i ] then
91285: LD_EXP 41
91289: PUSH
91290: LD_VAR 0 4
91294: ARRAY
91295: NOT
91296: IFFALSE 91300
// continue ;
91298: GO 91282
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
91300: LD_VAR 0 6
91304: PUSH
91305: LD_VAR 0 7
91309: PUSH
91310: LD_VAR 0 8
91314: PUSH
91315: LD_VAR 0 9
91319: PUSH
91320: EMPTY
91321: LIST
91322: LIST
91323: LIST
91324: LIST
91325: PPUSH
91326: LD_EXP 41
91330: PUSH
91331: LD_VAR 0 4
91335: ARRAY
91336: PUSH
91337: LD_INT 1
91339: ARRAY
91340: PPUSH
91341: CALL 32380 0 2
91345: IFFALSE 91434
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
91347: LD_ADDR_EXP 41
91351: PUSH
91352: LD_EXP 41
91356: PPUSH
91357: LD_VAR 0 4
91361: PPUSH
91362: LD_EXP 41
91366: PUSH
91367: LD_VAR 0 4
91371: ARRAY
91372: PPUSH
91373: LD_INT 1
91375: PPUSH
91376: CALL_OW 3
91380: PPUSH
91381: CALL_OW 1
91385: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
91386: LD_ADDR_EXP 43
91390: PUSH
91391: LD_EXP 43
91395: PPUSH
91396: LD_VAR 0 4
91400: PUSH
91401: LD_EXP 43
91405: PUSH
91406: LD_VAR 0 4
91410: ARRAY
91411: PUSH
91412: LD_INT 1
91414: PLUS
91415: PUSH
91416: EMPTY
91417: LIST
91418: LIST
91419: PPUSH
91420: LD_VAR 0 1
91424: PPUSH
91425: CALL 26211 0 3
91429: ST_TO_ADDR
// exit ;
91430: POP
91431: POP
91432: GO 91438
// end ; end ;
91434: GO 91282
91436: POP
91437: POP
// end ;
91438: LD_VAR 0 3
91442: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
91443: LD_INT 0
91445: PPUSH
91446: PPUSH
91447: PPUSH
// if not mc_bases or not skirmish then
91448: LD_EXP 36
91452: NOT
91453: PUSH
91454: LD_EXP 34
91458: NOT
91459: OR
91460: IFFALSE 91464
// exit ;
91462: GO 91654
// for i = 1 to mc_bases do
91464: LD_ADDR_VAR 0 4
91468: PUSH
91469: DOUBLE
91470: LD_INT 1
91472: DEC
91473: ST_TO_ADDR
91474: LD_EXP 36
91478: PUSH
91479: FOR_TO
91480: IFFALSE 91567
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
91482: LD_VAR 0 1
91486: PUSH
91487: LD_EXP 44
91491: PUSH
91492: LD_VAR 0 4
91496: ARRAY
91497: IN
91498: PUSH
91499: LD_VAR 0 1
91503: PUSH
91504: LD_EXP 45
91508: PUSH
91509: LD_VAR 0 4
91513: ARRAY
91514: IN
91515: NOT
91516: AND
91517: IFFALSE 91565
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
91519: LD_ADDR_EXP 45
91523: PUSH
91524: LD_EXP 45
91528: PPUSH
91529: LD_VAR 0 4
91533: PUSH
91534: LD_EXP 45
91538: PUSH
91539: LD_VAR 0 4
91543: ARRAY
91544: PUSH
91545: LD_INT 1
91547: PLUS
91548: PUSH
91549: EMPTY
91550: LIST
91551: LIST
91552: PPUSH
91553: LD_VAR 0 1
91557: PPUSH
91558: CALL 26211 0 3
91562: ST_TO_ADDR
// break ;
91563: GO 91567
// end ; end ;
91565: GO 91479
91567: POP
91568: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
91569: LD_VAR 0 1
91573: PPUSH
91574: CALL_OW 257
91578: PUSH
91579: LD_EXP 62
91583: IN
91584: PUSH
91585: LD_VAR 0 1
91589: PPUSH
91590: CALL_OW 266
91594: PUSH
91595: LD_INT 5
91597: EQUAL
91598: AND
91599: PUSH
91600: LD_VAR 0 2
91604: PPUSH
91605: CALL_OW 110
91609: PUSH
91610: LD_INT 18
91612: NONEQUAL
91613: AND
91614: IFFALSE 91654
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
91616: LD_VAR 0 2
91620: PPUSH
91621: CALL_OW 257
91625: PUSH
91626: LD_INT 5
91628: PUSH
91629: LD_INT 8
91631: PUSH
91632: LD_INT 9
91634: PUSH
91635: EMPTY
91636: LIST
91637: LIST
91638: LIST
91639: IN
91640: IFFALSE 91654
// SetClass ( unit , 1 ) ;
91642: LD_VAR 0 2
91646: PPUSH
91647: LD_INT 1
91649: PPUSH
91650: CALL_OW 336
// end ;
91654: LD_VAR 0 3
91658: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
91659: LD_INT 0
91661: PPUSH
91662: PPUSH
// if not mc_bases or not skirmish then
91663: LD_EXP 36
91667: NOT
91668: PUSH
91669: LD_EXP 34
91673: NOT
91674: OR
91675: IFFALSE 91679
// exit ;
91677: GO 91795
// if GetLives ( abandoned_vehicle ) > 250 then
91679: LD_VAR 0 2
91683: PPUSH
91684: CALL_OW 256
91688: PUSH
91689: LD_INT 250
91691: GREATER
91692: IFFALSE 91696
// exit ;
91694: GO 91795
// for i = 1 to mc_bases do
91696: LD_ADDR_VAR 0 6
91700: PUSH
91701: DOUBLE
91702: LD_INT 1
91704: DEC
91705: ST_TO_ADDR
91706: LD_EXP 36
91710: PUSH
91711: FOR_TO
91712: IFFALSE 91793
// begin if driver in mc_bases [ i ] then
91714: LD_VAR 0 1
91718: PUSH
91719: LD_EXP 36
91723: PUSH
91724: LD_VAR 0 6
91728: ARRAY
91729: IN
91730: IFFALSE 91791
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
91732: LD_VAR 0 1
91736: PPUSH
91737: LD_EXP 36
91741: PUSH
91742: LD_VAR 0 6
91746: ARRAY
91747: PPUSH
91748: LD_INT 2
91750: PUSH
91751: LD_INT 30
91753: PUSH
91754: LD_INT 0
91756: PUSH
91757: EMPTY
91758: LIST
91759: LIST
91760: PUSH
91761: LD_INT 30
91763: PUSH
91764: LD_INT 1
91766: PUSH
91767: EMPTY
91768: LIST
91769: LIST
91770: PUSH
91771: EMPTY
91772: LIST
91773: LIST
91774: LIST
91775: PPUSH
91776: CALL_OW 72
91780: PUSH
91781: LD_INT 1
91783: ARRAY
91784: PPUSH
91785: CALL_OW 112
// break ;
91789: GO 91793
// end ; end ;
91791: GO 91711
91793: POP
91794: POP
// end ; end_of_file end_of_file end_of_file
91795: LD_VAR 0 5
91799: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; var i , eff , side ; begin
91800: LD_INT 0
91802: PPUSH
91803: PPUSH
91804: PPUSH
91805: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
91806: LD_VAR 0 1
91810: PPUSH
91811: CALL_OW 264
91815: PUSH
91816: LD_EXP 33
91820: EQUAL
91821: IFFALSE 91893
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
91823: LD_INT 68
91825: PPUSH
91826: LD_VAR 0 1
91830: PPUSH
91831: CALL_OW 255
91835: PPUSH
91836: CALL_OW 321
91840: PUSH
91841: LD_INT 2
91843: EQUAL
91844: IFFALSE 91856
// eff := 70 else
91846: LD_ADDR_VAR 0 6
91850: PUSH
91851: LD_INT 70
91853: ST_TO_ADDR
91854: GO 91864
// eff := 30 ;
91856: LD_ADDR_VAR 0 6
91860: PUSH
91861: LD_INT 30
91863: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
91864: LD_VAR 0 1
91868: PPUSH
91869: CALL_OW 250
91873: PPUSH
91874: LD_VAR 0 1
91878: PPUSH
91879: CALL_OW 251
91883: PPUSH
91884: LD_VAR 0 6
91888: PPUSH
91889: CALL_OW 495
// end ; end ;
91893: LD_VAR 0 4
91897: RET
// export function SOS_Command ( cmd ) ; var i , j , tmp , taskList , _taskList ; begin
91898: LD_INT 0
91900: PPUSH
91901: PPUSH
91902: PPUSH
91903: PPUSH
91904: PPUSH
91905: PPUSH
// if cmd = 124 then
91906: LD_VAR 0 1
91910: PUSH
91911: LD_INT 124
91913: EQUAL
91914: IFFALSE 92120
// begin tmp := FilterAllUnits ( [ f_or , [ f_weapon , ru_bulldozer ] , [ f_weapon , us_bulldozer ] ] ) ;
91916: LD_ADDR_VAR 0 5
91920: PUSH
91921: LD_INT 2
91923: PUSH
91924: LD_INT 34
91926: PUSH
91927: LD_INT 53
91929: PUSH
91930: EMPTY
91931: LIST
91932: LIST
91933: PUSH
91934: LD_INT 34
91936: PUSH
91937: LD_INT 14
91939: PUSH
91940: EMPTY
91941: LIST
91942: LIST
91943: PUSH
91944: EMPTY
91945: LIST
91946: LIST
91947: LIST
91948: PPUSH
91949: CALL_OW 69
91953: ST_TO_ADDR
// if not tmp then
91954: LD_VAR 0 5
91958: NOT
91959: IFFALSE 91963
// exit ;
91961: GO 92120
// for i in tmp do
91963: LD_ADDR_VAR 0 3
91967: PUSH
91968: LD_VAR 0 5
91972: PUSH
91973: FOR_IN
91974: IFFALSE 92118
// begin taskList := GetTaskList ( i ) ;
91976: LD_ADDR_VAR 0 6
91980: PUSH
91981: LD_VAR 0 3
91985: PPUSH
91986: CALL_OW 437
91990: ST_TO_ADDR
// if not taskList then
91991: LD_VAR 0 6
91995: NOT
91996: IFFALSE 92000
// continue ;
91998: GO 91973
// for j = 1 to taskList do
92000: LD_ADDR_VAR 0 4
92004: PUSH
92005: DOUBLE
92006: LD_INT 1
92008: DEC
92009: ST_TO_ADDR
92010: LD_VAR 0 6
92014: PUSH
92015: FOR_TO
92016: IFFALSE 92114
// if taskList [ j ] [ 1 ] = | then
92018: LD_VAR 0 6
92022: PUSH
92023: LD_VAR 0 4
92027: ARRAY
92028: PUSH
92029: LD_INT 1
92031: ARRAY
92032: PUSH
92033: LD_STRING |
92035: EQUAL
92036: IFFALSE 92112
// begin _taskList := Delete ( taskList , 1 ) ;
92038: LD_ADDR_VAR 0 7
92042: PUSH
92043: LD_VAR 0 6
92047: PPUSH
92048: LD_INT 1
92050: PPUSH
92051: CALL_OW 3
92055: ST_TO_ADDR
// SetTaskList ( i , _taskList ) ;
92056: LD_VAR 0 3
92060: PPUSH
92061: LD_VAR 0 7
92065: PPUSH
92066: CALL_OW 446
// CutTreeXYR ( i , taskList [ j ] [ 2 ] , taskList [ j ] [ 3 ] , 8 ) ;
92070: LD_VAR 0 3
92074: PPUSH
92075: LD_VAR 0 6
92079: PUSH
92080: LD_VAR 0 4
92084: ARRAY
92085: PUSH
92086: LD_INT 2
92088: ARRAY
92089: PPUSH
92090: LD_VAR 0 6
92094: PUSH
92095: LD_VAR 0 4
92099: ARRAY
92100: PUSH
92101: LD_INT 3
92103: ARRAY
92104: PPUSH
92105: LD_INT 8
92107: PPUSH
92108: CALL 92125 0 4
// end ;
92112: GO 92015
92114: POP
92115: POP
// end ;
92116: GO 91973
92118: POP
92119: POP
// end ; end ;
92120: LD_VAR 0 2
92124: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
92125: LD_INT 0
92127: PPUSH
92128: PPUSH
92129: PPUSH
92130: PPUSH
92131: PPUSH
92132: PPUSH
92133: PPUSH
92134: PPUSH
92135: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
92136: LD_VAR 0 1
92140: NOT
92141: PUSH
92142: LD_VAR 0 2
92146: PPUSH
92147: LD_VAR 0 3
92151: PPUSH
92152: CALL_OW 488
92156: NOT
92157: OR
92158: PUSH
92159: LD_VAR 0 4
92163: NOT
92164: OR
92165: IFFALSE 92169
// exit ;
92167: GO 92509
// list := [ ] ;
92169: LD_ADDR_VAR 0 13
92173: PUSH
92174: EMPTY
92175: ST_TO_ADDR
// if x - r < 0 then
92176: LD_VAR 0 2
92180: PUSH
92181: LD_VAR 0 4
92185: MINUS
92186: PUSH
92187: LD_INT 0
92189: LESS
92190: IFFALSE 92202
// min_x := 0 else
92192: LD_ADDR_VAR 0 7
92196: PUSH
92197: LD_INT 0
92199: ST_TO_ADDR
92200: GO 92218
// min_x := x - r ;
92202: LD_ADDR_VAR 0 7
92206: PUSH
92207: LD_VAR 0 2
92211: PUSH
92212: LD_VAR 0 4
92216: MINUS
92217: ST_TO_ADDR
// if y - r < 0 then
92218: LD_VAR 0 3
92222: PUSH
92223: LD_VAR 0 4
92227: MINUS
92228: PUSH
92229: LD_INT 0
92231: LESS
92232: IFFALSE 92244
// min_y := 0 else
92234: LD_ADDR_VAR 0 8
92238: PUSH
92239: LD_INT 0
92241: ST_TO_ADDR
92242: GO 92260
// min_y := y - r ;
92244: LD_ADDR_VAR 0 8
92248: PUSH
92249: LD_VAR 0 3
92253: PUSH
92254: LD_VAR 0 4
92258: MINUS
92259: ST_TO_ADDR
// max_x := x + r ;
92260: LD_ADDR_VAR 0 9
92264: PUSH
92265: LD_VAR 0 2
92269: PUSH
92270: LD_VAR 0 4
92274: PLUS
92275: ST_TO_ADDR
// max_y := y + r ;
92276: LD_ADDR_VAR 0 10
92280: PUSH
92281: LD_VAR 0 3
92285: PUSH
92286: LD_VAR 0 4
92290: PLUS
92291: ST_TO_ADDR
// for _x = min_x to max_x do
92292: LD_ADDR_VAR 0 11
92296: PUSH
92297: DOUBLE
92298: LD_VAR 0 7
92302: DEC
92303: ST_TO_ADDR
92304: LD_VAR 0 9
92308: PUSH
92309: FOR_TO
92310: IFFALSE 92427
// for _y = min_y to max_y do
92312: LD_ADDR_VAR 0 12
92316: PUSH
92317: DOUBLE
92318: LD_VAR 0 8
92322: DEC
92323: ST_TO_ADDR
92324: LD_VAR 0 10
92328: PUSH
92329: FOR_TO
92330: IFFALSE 92423
// begin if not ValidHex ( _x , _y ) then
92332: LD_VAR 0 11
92336: PPUSH
92337: LD_VAR 0 12
92341: PPUSH
92342: CALL_OW 488
92346: NOT
92347: IFFALSE 92351
// continue ;
92349: GO 92329
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
92351: LD_VAR 0 11
92355: PPUSH
92356: LD_VAR 0 12
92360: PPUSH
92361: CALL_OW 351
92365: PUSH
92366: LD_VAR 0 11
92370: PPUSH
92371: LD_VAR 0 12
92375: PPUSH
92376: CALL_OW 554
92380: AND
92381: IFFALSE 92421
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
92383: LD_ADDR_VAR 0 13
92387: PUSH
92388: LD_VAR 0 13
92392: PPUSH
92393: LD_VAR 0 13
92397: PUSH
92398: LD_INT 1
92400: PLUS
92401: PPUSH
92402: LD_VAR 0 11
92406: PUSH
92407: LD_VAR 0 12
92411: PUSH
92412: EMPTY
92413: LIST
92414: LIST
92415: PPUSH
92416: CALL_OW 2
92420: ST_TO_ADDR
// end ;
92421: GO 92329
92423: POP
92424: POP
92425: GO 92309
92427: POP
92428: POP
// if not list then
92429: LD_VAR 0 13
92433: NOT
92434: IFFALSE 92438
// exit ;
92436: GO 92509
// for i in list do
92438: LD_ADDR_VAR 0 6
92442: PUSH
92443: LD_VAR 0 13
92447: PUSH
92448: FOR_IN
92449: IFFALSE 92507
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
92451: LD_VAR 0 1
92455: PPUSH
92456: LD_STRING M
92458: PUSH
92459: LD_VAR 0 6
92463: PUSH
92464: LD_INT 1
92466: ARRAY
92467: PUSH
92468: LD_VAR 0 6
92472: PUSH
92473: LD_INT 2
92475: ARRAY
92476: PUSH
92477: LD_INT 0
92479: PUSH
92480: LD_INT 0
92482: PUSH
92483: LD_INT 0
92485: PUSH
92486: LD_INT 0
92488: PUSH
92489: EMPTY
92490: LIST
92491: LIST
92492: LIST
92493: LIST
92494: LIST
92495: LIST
92496: LIST
92497: PUSH
92498: EMPTY
92499: LIST
92500: PPUSH
92501: CALL_OW 447
92505: GO 92448
92507: POP
92508: POP
// end ;
92509: LD_VAR 0 5
92513: RET
