// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// InitSettings ;
  11: CALL 51 0 0
// if debug then
  15: LD_EXP 1
  19: IFFALSE 38
// begin PlaceSeeing ( 1 , 1 , 1 , - 372963 ) ;
  21: LD_INT 1
  23: PPUSH
  24: LD_INT 1
  26: PPUSH
  27: LD_INT 1
  29: PPUSH
  30: LD_INT 372963
  32: NEG
  33: PPUSH
  34: CALL_OW 330
// end ; SetTechnologies ;
  38: CALL 602 0 0
// SetDiplomacy ;
  42: CALL 814 0 0
// PrepareGame ;
  46: CALL 896 0 0
// end ;
  50: END
// export debug , GameType , game , disableGlobalTimer ; export mc_amer , mc_leg , mc_rus_1 , mc_rus_2 ; export playerCommander , playerForces , allyCommander , Powell , Farmer , ruOutpost , ruEscape , staticMines , baseCaptured , legDestCounter , cratesSpawns , legOfferAccepted , legChangeSide , allyDestCounter , sibBombAllowed , reinforceAllowed , commander , cratesSpawn , outpostEscape , dialogueMineDetected ; end_of_file export function InitSettings ; begin
  51: LD_INT 0
  53: PPUSH
// debug := 0 ;
  54: LD_ADDR_EXP 1
  58: PUSH
  59: LD_INT 0
  61: ST_TO_ADDR
// GameType := 1 ;
  62: LD_ADDR_EXP 2
  66: PUSH
  67: LD_INT 1
  69: ST_TO_ADDR
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  70: LD_ADDR_OWVAR 67
  74: PUSH
  75: LD_INT 0
  77: PPUSH
  78: CALL_OW 426
  82: ST_TO_ADDR
// sibBombAllowed := GetMultiPlayerSetting ( 1 ) - 1 ;
  83: LD_ADDR_EXP 23
  87: PUSH
  88: LD_INT 1
  90: PPUSH
  91: CALL_OW 426
  95: PUSH
  96: LD_INT 1
  98: MINUS
  99: ST_TO_ADDR
// reinforceAllowed := GetMultiPlayerSetting ( 2 ) - 1 ;
 100: LD_ADDR_EXP 24
 104: PUSH
 105: LD_INT 2
 107: PPUSH
 108: CALL_OW 426
 112: PUSH
 113: LD_INT 1
 115: MINUS
 116: ST_TO_ADDR
// cratesSpawn := GetMultiPlayerSetting ( 3 ) ;
 117: LD_ADDR_EXP 26
 121: PUSH
 122: LD_INT 3
 124: PPUSH
 125: CALL_OW 426
 129: ST_TO_ADDR
// commander := GetMultiPlayerSetting ( 4 ) ;
 130: LD_ADDR_EXP 25
 134: PUSH
 135: LD_INT 4
 137: PPUSH
 138: CALL_OW 426
 142: ST_TO_ADDR
// if not commander then
 143: LD_EXP 25
 147: NOT
 148: IFFALSE 158
// commander := 3 ;
 150: LD_ADDR_EXP 25
 154: PUSH
 155: LD_INT 3
 157: ST_TO_ADDR
// if not debug then
 158: LD_EXP 1
 162: NOT
 163: IFFALSE 167
// exit ;
 165: GO 224
// display_strings := [ Difficulty:  & Difficulty , sibBomb:  & sibBombAllowed , reinforceAllowed:  & reinforceAllowed , cratesSpawn:  & cratesSpawn , commander:  & commander ] ;
 167: LD_ADDR_OWVAR 47
 171: PUSH
 172: LD_STRING Difficulty: 
 174: PUSH
 175: LD_OWVAR 67
 179: STR
 180: PUSH
 181: LD_STRING sibBomb: 
 183: PUSH
 184: LD_EXP 23
 188: STR
 189: PUSH
 190: LD_STRING reinforceAllowed: 
 192: PUSH
 193: LD_EXP 24
 197: STR
 198: PUSH
 199: LD_STRING cratesSpawn: 
 201: PUSH
 202: LD_EXP 26
 206: STR
 207: PUSH
 208: LD_STRING commander: 
 210: PUSH
 211: LD_EXP 25
 215: STR
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: LIST
 223: ST_TO_ADDR
// end ;
 224: LD_VAR 0 1
 228: RET
// every 0 0$1 trigger game and GameType = 1 and not disableGlobalTimer do
 229: LD_EXP 3
 233: PUSH
 234: LD_EXP 2
 238: PUSH
 239: LD_INT 1
 241: EQUAL
 242: AND
 243: PUSH
 244: LD_EXP 4
 248: NOT
 249: AND
 250: IFFALSE 273
 252: GO 254
 254: DISABLE
// begin enable ;
 255: ENABLE
// display_strings := [ #SkrTime , tick ] ;
 256: LD_ADDR_OWVAR 47
 260: PUSH
 261: LD_STRING #SkrTime
 263: PUSH
 264: LD_OWVAR 1
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: ST_TO_ADDR
// end ;
 273: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 274: LD_EXP 19
 278: PUSH
 279: LD_EXP 3
 283: AND
 284: PUSH
 285: LD_EXP 2
 289: PUSH
 290: LD_INT 1
 292: EQUAL
 293: AND
 294: IFFALSE 355
 296: GO 298
 298: DISABLE
// Crates ( cratesSpawns [ 1 ] [ 1 ] , cratesSpawns [ 1 ] [ 2 ] , cratesSpawns [ 1 ] [ 3 ] , cratesSpawns [ 1 ] [ 4 ] ) ;
 299: LD_EXP 19
 303: PUSH
 304: LD_INT 1
 306: ARRAY
 307: PUSH
 308: LD_INT 1
 310: ARRAY
 311: PPUSH
 312: LD_EXP 19
 316: PUSH
 317: LD_INT 1
 319: ARRAY
 320: PUSH
 321: LD_INT 2
 323: ARRAY
 324: PPUSH
 325: LD_EXP 19
 329: PUSH
 330: LD_INT 1
 332: ARRAY
 333: PUSH
 334: LD_INT 3
 336: ARRAY
 337: PPUSH
 338: LD_EXP 19
 342: PUSH
 343: LD_INT 1
 345: ARRAY
 346: PUSH
 347: LD_INT 4
 349: ARRAY
 350: PPUSH
 351: CALL 61666 0 4
 355: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 356: LD_EXP 19
 360: PUSH
 361: LD_EXP 3
 365: AND
 366: PUSH
 367: LD_EXP 2
 371: PUSH
 372: LD_INT 1
 374: EQUAL
 375: AND
 376: IFFALSE 437
 378: GO 380
 380: DISABLE
// Crates ( cratesSpawns [ 2 ] [ 1 ] , cratesSpawns [ 2 ] [ 2 ] , cratesSpawns [ 2 ] [ 3 ] , cratesSpawns [ 2 ] [ 4 ] ) ;
 381: LD_EXP 19
 385: PUSH
 386: LD_INT 2
 388: ARRAY
 389: PUSH
 390: LD_INT 1
 392: ARRAY
 393: PPUSH
 394: LD_EXP 19
 398: PUSH
 399: LD_INT 2
 401: ARRAY
 402: PUSH
 403: LD_INT 2
 405: ARRAY
 406: PPUSH
 407: LD_EXP 19
 411: PUSH
 412: LD_INT 2
 414: ARRAY
 415: PUSH
 416: LD_INT 3
 418: ARRAY
 419: PPUSH
 420: LD_EXP 19
 424: PUSH
 425: LD_INT 2
 427: ARRAY
 428: PUSH
 429: LD_INT 4
 431: ARRAY
 432: PPUSH
 433: CALL 61666 0 4
 437: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 438: LD_EXP 19
 442: PUSH
 443: LD_EXP 3
 447: AND
 448: PUSH
 449: LD_EXP 2
 453: PUSH
 454: LD_INT 1
 456: EQUAL
 457: AND
 458: IFFALSE 519
 460: GO 462
 462: DISABLE
// Crates ( cratesSpawns [ 3 ] [ 1 ] , cratesSpawns [ 3 ] [ 2 ] , cratesSpawns [ 3 ] [ 3 ] , cratesSpawns [ 3 ] [ 4 ] ) ;
 463: LD_EXP 19
 467: PUSH
 468: LD_INT 3
 470: ARRAY
 471: PUSH
 472: LD_INT 1
 474: ARRAY
 475: PPUSH
 476: LD_EXP 19
 480: PUSH
 481: LD_INT 3
 483: ARRAY
 484: PUSH
 485: LD_INT 2
 487: ARRAY
 488: PPUSH
 489: LD_EXP 19
 493: PUSH
 494: LD_INT 3
 496: ARRAY
 497: PUSH
 498: LD_INT 3
 500: ARRAY
 501: PPUSH
 502: LD_EXP 19
 506: PUSH
 507: LD_INT 3
 509: ARRAY
 510: PUSH
 511: LD_INT 4
 513: ARRAY
 514: PPUSH
 515: CALL 61666 0 4
 519: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 520: LD_EXP 19
 524: PUSH
 525: LD_EXP 3
 529: AND
 530: PUSH
 531: LD_EXP 2
 535: PUSH
 536: LD_INT 1
 538: EQUAL
 539: AND
 540: IFFALSE 601
 542: GO 544
 544: DISABLE
// Crates ( cratesSpawns [ 4 ] [ 1 ] , cratesSpawns [ 4 ] [ 2 ] , cratesSpawns [ 4 ] [ 3 ] , cratesSpawns [ 4 ] [ 4 ] ) ;
 545: LD_EXP 19
 549: PUSH
 550: LD_INT 4
 552: ARRAY
 553: PUSH
 554: LD_INT 1
 556: ARRAY
 557: PPUSH
 558: LD_EXP 19
 562: PUSH
 563: LD_INT 4
 565: ARRAY
 566: PUSH
 567: LD_INT 2
 569: ARRAY
 570: PPUSH
 571: LD_EXP 19
 575: PUSH
 576: LD_INT 4
 578: ARRAY
 579: PUSH
 580: LD_INT 3
 582: ARRAY
 583: PPUSH
 584: LD_EXP 19
 588: PUSH
 589: LD_INT 4
 591: ARRAY
 592: PUSH
 593: LD_INT 4
 595: ARRAY
 596: PPUSH
 597: CALL 61666 0 4
 601: END
// export function SetTechnologies ; var i , j , ban_techs , res_techs ; begin
 602: LD_INT 0
 604: PPUSH
 605: PPUSH
 606: PPUSH
 607: PPUSH
 608: PPUSH
// if GameType = 1 then
 609: LD_EXP 2
 613: PUSH
 614: LD_INT 1
 616: EQUAL
 617: IFFALSE 686
// begin ban_techs := [ ] ;
 619: LD_ADDR_VAR 0 4
 623: PUSH
 624: EMPTY
 625: ST_TO_ADDR
// if sibBombAllowed < 2 then
 626: LD_EXP 23
 630: PUSH
 631: LD_INT 2
 633: LESS
 634: IFFALSE 647
// ban_techs := [ tech_sibFiss ] ;
 636: LD_ADDR_VAR 0 4
 640: PUSH
 641: LD_INT 25
 643: PUSH
 644: EMPTY
 645: LIST
 646: ST_TO_ADDR
// res_techs := [ tech_oilPow , tech_oilEng , tech_tech1 , tech_tech2 , tech_tech3 , tech_gun , tech_gatling , tech_rocket ] ;
 647: LD_ADDR_VAR 0 5
 651: PUSH
 652: LD_INT 46
 654: PUSH
 655: LD_INT 47
 657: PUSH
 658: LD_INT 48
 660: PUSH
 661: LD_INT 49
 663: PUSH
 664: LD_INT 50
 666: PUSH
 667: LD_INT 39
 669: PUSH
 670: LD_INT 69
 672: PUSH
 673: LD_INT 40
 675: PUSH
 676: EMPTY
 677: LIST
 678: LIST
 679: LIST
 680: LIST
 681: LIST
 682: LIST
 683: LIST
 684: LIST
 685: ST_TO_ADDR
// end ; for i = 1 to 8 do
 686: LD_ADDR_VAR 0 2
 690: PUSH
 691: DOUBLE
 692: LD_INT 1
 694: DEC
 695: ST_TO_ADDR
 696: LD_INT 8
 698: PUSH
 699: FOR_TO
 700: IFFALSE 784
// begin if res_techs then
 702: LD_VAR 0 5
 706: IFFALSE 742
// for j in res_techs do
 708: LD_ADDR_VAR 0 3
 712: PUSH
 713: LD_VAR 0 5
 717: PUSH
 718: FOR_IN
 719: IFFALSE 740
// SetTech ( j , i , state_researched ) ;
 721: LD_VAR 0 3
 725: PPUSH
 726: LD_VAR 0 2
 730: PPUSH
 731: LD_INT 2
 733: PPUSH
 734: CALL_OW 322
 738: GO 718
 740: POP
 741: POP
// if ban_techs then
 742: LD_VAR 0 4
 746: IFFALSE 782
// for j in ban_techs do
 748: LD_ADDR_VAR 0 3
 752: PUSH
 753: LD_VAR 0 4
 757: PUSH
 758: FOR_IN
 759: IFFALSE 780
// SetTech ( j , i , state_disabled ) ;
 761: LD_VAR 0 3
 765: PPUSH
 766: LD_VAR 0 2
 770: PPUSH
 771: LD_INT 0
 773: PPUSH
 774: CALL_OW 322
 778: GO 758
 780: POP
 781: POP
// end ;
 782: GO 699
 784: POP
 785: POP
// if sibBombAllowed = 1 then
 786: LD_EXP 23
 790: PUSH
 791: LD_INT 1
 793: EQUAL
 794: IFFALSE 809
// SetTech ( tech_sibFiss , 3 , state_enabled ) ;
 796: LD_INT 25
 798: PPUSH
 799: LD_INT 3
 801: PPUSH
 802: LD_INT 1
 804: PPUSH
 805: CALL_OW 322
// end ;
 809: LD_VAR 0 1
 813: RET
// export function SetDiplomacy ; begin
 814: LD_INT 0
 816: PPUSH
// if GameType = 1 then
 817: LD_EXP 2
 821: PUSH
 822: LD_INT 1
 824: EQUAL
 825: IFFALSE 891
// begin SetAttitude ( 1 , 4 , att_friend , true ) ;
 827: LD_INT 1
 829: PPUSH
 830: LD_INT 4
 832: PPUSH
 833: LD_INT 1
 835: PPUSH
 836: LD_INT 1
 838: PPUSH
 839: CALL_OW 80
// SetAttitude ( 3 , 6 , att_friend , true ) ;
 843: LD_INT 3
 845: PPUSH
 846: LD_INT 6
 848: PPUSH
 849: LD_INT 1
 851: PPUSH
 852: LD_INT 1
 854: PPUSH
 855: CALL_OW 80
// SetAttitude ( 3 , 8 , att_friend , true ) ;
 859: LD_INT 3
 861: PPUSH
 862: LD_INT 8
 864: PPUSH
 865: LD_INT 1
 867: PPUSH
 868: LD_INT 1
 870: PPUSH
 871: CALL_OW 80
// SetAttitude ( 6 , 8 , att_friend , true ) ;
 875: LD_INT 6
 877: PPUSH
 878: LD_INT 8
 880: PPUSH
 881: LD_INT 1
 883: PPUSH
 884: LD_INT 1
 886: PPUSH
 887: CALL_OW 80
// end ; end ;
 891: LD_VAR 0 1
 895: RET
// export function PrepareGame ; var i , tmp , sources ; begin
 896: LD_INT 0
 898: PPUSH
 899: PPUSH
 900: PPUSH
 901: PPUSH
// if GameType = 1 then
 902: LD_EXP 2
 906: PUSH
 907: LD_INT 1
 909: EQUAL
 910: IFFALSE 1402
// begin game := false ;
 912: LD_ADDR_EXP 3
 916: PUSH
 917: LD_INT 0
 919: ST_TO_ADDR
// your_side := 1 ;
 920: LD_ADDR_OWVAR 2
 924: PUSH
 925: LD_INT 1
 927: ST_TO_ADDR
// mc_amer := 1 ;
 928: LD_ADDR_EXP 5
 932: PUSH
 933: LD_INT 1
 935: ST_TO_ADDR
// mc_leg := 2 ;
 936: LD_ADDR_EXP 6
 940: PUSH
 941: LD_INT 2
 943: ST_TO_ADDR
// mc_rus_1 := 3 ;
 944: LD_ADDR_EXP 7
 948: PUSH
 949: LD_INT 3
 951: ST_TO_ADDR
// mc_rus_2 := 4 ;
 952: LD_ADDR_EXP 8
 956: PUSH
 957: LD_INT 4
 959: ST_TO_ADDR
// cratesSpawns := [ [ amerCrates , 1 , 0 , [ 200 , 250 , 300 ] [ cratesSpawn ] ] , [ rusCrates , 8 , 50 , 500 ] , [ legCrates , 5 , 50 , 300 ] , [ playerCrates , [ 4 , 5 , 6 ] [ cratesSpawn ] , 30 , [ 300 , 450 , 500 ] [ cratesSpawn ] ] ] ;
 960: LD_ADDR_EXP 19
 964: PUSH
 965: LD_INT 5
 967: PUSH
 968: LD_INT 1
 970: PUSH
 971: LD_INT 0
 973: PUSH
 974: LD_INT 200
 976: PUSH
 977: LD_INT 250
 979: PUSH
 980: LD_INT 300
 982: PUSH
 983: EMPTY
 984: LIST
 985: LIST
 986: LIST
 987: PUSH
 988: LD_EXP 26
 992: ARRAY
 993: PUSH
 994: EMPTY
 995: LIST
 996: LIST
 997: LIST
 998: LIST
 999: PUSH
1000: LD_INT 13
1002: PUSH
1003: LD_INT 8
1005: PUSH
1006: LD_INT 50
1008: PUSH
1009: LD_INT 500
1011: PUSH
1012: EMPTY
1013: LIST
1014: LIST
1015: LIST
1016: LIST
1017: PUSH
1018: LD_INT 17
1020: PUSH
1021: LD_INT 5
1023: PUSH
1024: LD_INT 50
1026: PUSH
1027: LD_INT 300
1029: PUSH
1030: EMPTY
1031: LIST
1032: LIST
1033: LIST
1034: LIST
1035: PUSH
1036: LD_INT 18
1038: PUSH
1039: LD_INT 4
1041: PUSH
1042: LD_INT 5
1044: PUSH
1045: LD_INT 6
1047: PUSH
1048: EMPTY
1049: LIST
1050: LIST
1051: LIST
1052: PUSH
1053: LD_EXP 26
1057: ARRAY
1058: PUSH
1059: LD_INT 30
1061: PUSH
1062: LD_INT 300
1064: PUSH
1065: LD_INT 450
1067: PUSH
1068: LD_INT 500
1070: PUSH
1071: EMPTY
1072: LIST
1073: LIST
1074: LIST
1075: PUSH
1076: LD_EXP 26
1080: ARRAY
1081: PUSH
1082: EMPTY
1083: LIST
1084: LIST
1085: LIST
1086: LIST
1087: PUSH
1088: EMPTY
1089: LIST
1090: LIST
1091: LIST
1092: LIST
1093: ST_TO_ADDR
// sources := [ [ 190 , 193 , mat_siberit ] , [ 182 , 117 , mat_siberit ] , [ 43 , 2 , mat_siberit ] , [ 114 , 152 , mat_oil ] , [ 85 , 38 , mat_oil ] ] ;
1094: LD_ADDR_VAR 0 4
1098: PUSH
1099: LD_INT 190
1101: PUSH
1102: LD_INT 193
1104: PUSH
1105: LD_INT 3
1107: PUSH
1108: EMPTY
1109: LIST
1110: LIST
1111: LIST
1112: PUSH
1113: LD_INT 182
1115: PUSH
1116: LD_INT 117
1118: PUSH
1119: LD_INT 3
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: LIST
1126: PUSH
1127: LD_INT 43
1129: PUSH
1130: LD_INT 2
1132: PUSH
1133: LD_INT 3
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: LIST
1140: PUSH
1141: LD_INT 114
1143: PUSH
1144: LD_INT 152
1146: PUSH
1147: LD_INT 2
1149: PUSH
1150: EMPTY
1151: LIST
1152: LIST
1153: LIST
1154: PUSH
1155: LD_INT 85
1157: PUSH
1158: LD_INT 38
1160: PUSH
1161: LD_INT 2
1163: PUSH
1164: EMPTY
1165: LIST
1166: LIST
1167: LIST
1168: PUSH
1169: EMPTY
1170: LIST
1171: LIST
1172: LIST
1173: LIST
1174: LIST
1175: ST_TO_ADDR
// for i in sources do
1176: LD_ADDR_VAR 0 2
1180: PUSH
1181: LD_VAR 0 4
1185: PUSH
1186: FOR_IN
1187: IFFALSE 1222
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
1189: LD_VAR 0 2
1193: PUSH
1194: LD_INT 1
1196: ARRAY
1197: PPUSH
1198: LD_VAR 0 2
1202: PUSH
1203: LD_INT 2
1205: ARRAY
1206: PPUSH
1207: LD_VAR 0 2
1211: PUSH
1212: LD_INT 3
1214: ARRAY
1215: PPUSH
1216: CALL_OW 62
1220: GO 1186
1222: POP
1223: POP
// disableGlobalTimer := false ;
1224: LD_ADDR_EXP 4
1228: PUSH
1229: LD_INT 0
1231: ST_TO_ADDR
// ruEscape := [ 0 , [ 5 , 6 , 7 ] [ Difficulty ] ] ;
1232: LD_ADDR_EXP 15
1236: PUSH
1237: LD_INT 0
1239: PUSH
1240: LD_INT 5
1242: PUSH
1243: LD_INT 6
1245: PUSH
1246: LD_INT 7
1248: PUSH
1249: EMPTY
1250: LIST
1251: LIST
1252: LIST
1253: PUSH
1254: LD_OWVAR 67
1258: ARRAY
1259: PUSH
1260: EMPTY
1261: LIST
1262: LIST
1263: ST_TO_ADDR
// ruOutpost := [ ] ;
1264: LD_ADDR_EXP 14
1268: PUSH
1269: EMPTY
1270: ST_TO_ADDR
// staticMines := [ ] ;
1271: LD_ADDR_EXP 16
1275: PUSH
1276: EMPTY
1277: ST_TO_ADDR
// baseCaptured := false ;
1278: LD_ADDR_EXP 17
1282: PUSH
1283: LD_INT 0
1285: ST_TO_ADDR
// legDestCounter := 0 ;
1286: LD_ADDR_EXP 18
1290: PUSH
1291: LD_INT 0
1293: ST_TO_ADDR
// legOfferAccepted := false ;
1294: LD_ADDR_EXP 20
1298: PUSH
1299: LD_INT 0
1301: ST_TO_ADDR
// legChangeSide := false ;
1302: LD_ADDR_EXP 21
1306: PUSH
1307: LD_INT 0
1309: ST_TO_ADDR
// allyDestCounter := 0 ;
1310: LD_ADDR_EXP 22
1314: PUSH
1315: LD_INT 0
1317: ST_TO_ADDR
// outpostEscape := false ;
1318: LD_ADDR_EXP 27
1322: PUSH
1323: LD_INT 0
1325: ST_TO_ADDR
// dialogueMineDetected := false ;
1326: LD_ADDR_EXP 28
1330: PUSH
1331: LD_INT 0
1333: ST_TO_ADDR
// PrepareAmericans ;
1334: CALL 7250 0 0
// PrepareLegion ;
1338: CALL 5515 0 0
// PrepareRussians ;
1342: CALL 2481 0 0
// playerForces := PreparePlayer ;
1346: LD_ADDR_EXP 10
1350: PUSH
1351: CALL 8493 0 0
1355: ST_TO_ADDR
// AnimateTrees ( true ) ;
1356: LD_INT 1
1358: PPUSH
1359: CALL_OW 573
// PrepareNature ( 4 , 3 , 8 , 5 , 3 , 1 , 8 , natureGroundArea , natureWaterArea ) ;
1363: LD_INT 4
1365: PPUSH
1366: LD_INT 3
1368: PPUSH
1369: LD_INT 8
1371: PPUSH
1372: LD_INT 5
1374: PPUSH
1375: LD_INT 3
1377: PPUSH
1378: LD_INT 1
1380: PPUSH
1381: LD_INT 8
1383: PPUSH
1384: LD_INT 2
1386: PPUSH
1387: LD_INT 1
1389: PPUSH
1390: CALL 54381 0 9
// MC_Start ;
1394: CALL 64867 0 0
// Action ;
1398: CALL 10689 0 0
// end ; end ;
1402: LD_VAR 0 1
1406: RET
// export function CustomInitMacro ; begin
1407: LD_INT 0
1409: PPUSH
// if GameType <> 1 then
1410: LD_EXP 2
1414: PUSH
1415: LD_INT 1
1417: NONEQUAL
1418: IFFALSE 1422
// exit ;
1420: GO 2476
// MC_SetScanArea ( mc_amer , amerBase ) ;
1422: LD_EXP 5
1426: PPUSH
1427: LD_INT 3
1429: PPUSH
1430: CALL 87723 0 2
// MC_SetParkingArea ( mc_amer , amerParking ) ;
1434: LD_EXP 5
1438: PPUSH
1439: LD_INT 4
1441: PPUSH
1442: CALL 87667 0 2
// MC_SetAllowedTurretWeapons ( mc_amer , [ us_radar , us_heavy_gun , us_rocket_launcher , us_laser , us_double_laser ] ) ;
1446: LD_EXP 5
1450: PPUSH
1451: LD_INT 11
1453: PUSH
1454: LD_INT 6
1456: PUSH
1457: LD_INT 7
1459: PUSH
1460: LD_INT 9
1462: PUSH
1463: LD_INT 10
1465: PUSH
1466: EMPTY
1467: LIST
1468: LIST
1469: LIST
1470: LIST
1471: LIST
1472: PPUSH
1473: CALL 87555 0 2
// MC_SetCratesArea ( mc_amer , amerCrates ) ;
1477: LD_EXP 5
1481: PPUSH
1482: LD_INT 5
1484: PPUSH
1485: CALL 87237 0 2
// MC_SetTame ( mc_amer , amerBase ) ;
1489: LD_EXP 5
1493: PPUSH
1494: LD_INT 3
1496: PPUSH
1497: CALL 86968 0 2
// MC_SetDefenderLimit ( mc_amer , 4 ) ;
1501: LD_EXP 5
1505: PPUSH
1506: LD_INT 4
1508: PPUSH
1509: CALL 86587 0 2
// MC_SetProduceList ( mc_amer , [ [ us_medium_tracked , engine_combustion , control_remote , us_double_gun ] , [ us_medium_tracked , engine_solar , control_remote , us_laser ] , [ us_heavy_tracked , engine_combustion , control_remote , us_rocket_launcher ] , [ us_heavy_tracked , engine_combustion , control_remote , us_heavy_gun ] , ] ) ;
1513: LD_EXP 5
1517: PPUSH
1518: LD_INT 3
1520: PUSH
1521: LD_INT 1
1523: PUSH
1524: LD_INT 2
1526: PUSH
1527: LD_INT 5
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: LIST
1534: LIST
1535: PUSH
1536: LD_INT 3
1538: PUSH
1539: LD_INT 2
1541: PUSH
1542: LD_INT 2
1544: PUSH
1545: LD_INT 9
1547: PUSH
1548: EMPTY
1549: LIST
1550: LIST
1551: LIST
1552: LIST
1553: PUSH
1554: LD_INT 4
1556: PUSH
1557: LD_INT 1
1559: PUSH
1560: LD_INT 2
1562: PUSH
1563: LD_INT 7
1565: PUSH
1566: EMPTY
1567: LIST
1568: LIST
1569: LIST
1570: LIST
1571: PUSH
1572: LD_INT 4
1574: PUSH
1575: LD_INT 1
1577: PUSH
1578: LD_INT 2
1580: PUSH
1581: LD_INT 6
1583: PUSH
1584: EMPTY
1585: LIST
1586: LIST
1587: LIST
1588: LIST
1589: PUSH
1590: EMPTY
1591: LIST
1592: LIST
1593: LIST
1594: LIST
1595: PPUSH
1596: CALL 86402 0 2
// MC_SetBuildingList ( mc_amer , [ [ b_turret , 114 , 16 , 0 ] , [ b_bunker , 110 , 12 , 0 ] ] ) ;
1600: LD_EXP 5
1604: PPUSH
1605: LD_INT 33
1607: PUSH
1608: LD_INT 114
1610: PUSH
1611: LD_INT 16
1613: PUSH
1614: LD_INT 0
1616: PUSH
1617: EMPTY
1618: LIST
1619: LIST
1620: LIST
1621: LIST
1622: PUSH
1623: LD_INT 32
1625: PUSH
1626: LD_INT 110
1628: PUSH
1629: LD_INT 12
1631: PUSH
1632: LD_INT 0
1634: PUSH
1635: EMPTY
1636: LIST
1637: LIST
1638: LIST
1639: LIST
1640: PUSH
1641: EMPTY
1642: LIST
1643: LIST
1644: PPUSH
1645: CALL 86294 0 2
// MC_SetLabKind ( mc_amer , [ b_lab_weapon , b_lab_opto , b_lab_computer , b_lab_siberium ] ) ;
1649: LD_EXP 5
1653: PPUSH
1654: LD_INT 10
1656: PUSH
1657: LD_INT 15
1659: PUSH
1660: LD_INT 12
1662: PUSH
1663: LD_INT 11
1665: PUSH
1666: EMPTY
1667: LIST
1668: LIST
1669: LIST
1670: LIST
1671: PPUSH
1672: CALL 87144 0 2
// MC_SetScanArea ( mc_leg , legBase ) ;
1676: LD_EXP 6
1680: PPUSH
1681: LD_INT 6
1683: PPUSH
1684: CALL 87723 0 2
// MC_SetParkingArea ( mc_leg , legParking ) ;
1688: LD_EXP 6
1692: PPUSH
1693: LD_INT 7
1695: PPUSH
1696: CALL 87667 0 2
// MC_SetAllowedTurretWeapons ( mc_leg , [ ar_radar , ar_gun , ar_rocket_launcher , ar_gatling_gun ] ) ;
1700: LD_EXP 6
1704: PPUSH
1705: LD_INT 30
1707: PUSH
1708: LD_INT 27
1710: PUSH
1711: LD_INT 28
1713: PUSH
1714: LD_INT 25
1716: PUSH
1717: EMPTY
1718: LIST
1719: LIST
1720: LIST
1721: LIST
1722: PPUSH
1723: CALL 87555 0 2
// MC_SetCratesArea ( mc_leg , legCrates ) ;
1727: LD_EXP 6
1731: PPUSH
1732: LD_INT 17
1734: PPUSH
1735: CALL 87237 0 2
// MC_SetTame ( mc_leg , legBase ) ;
1739: LD_EXP 6
1743: PPUSH
1744: LD_INT 6
1746: PPUSH
1747: CALL 86968 0 2
// MC_SetDefenderLimit ( mc_leg , 5 ) ;
1751: LD_EXP 6
1755: PPUSH
1756: LD_INT 5
1758: PPUSH
1759: CALL 86587 0 2
// MC_SetMinesField ( mc_leg , 10 , legMines ) ;
1763: LD_EXP 6
1767: PPUSH
1768: LD_INT 10
1770: PPUSH
1771: LD_INT 9
1773: PPUSH
1774: CALL 86084 0 3
// MC_SetBuildingList ( mc_leg , [ [ b_armoury , 157 , 144 , 0 ] , [ b_bunker , 151 , 142 , 0 ] , [ b_bunker , 161 , 144 , 0 ] , [ b_bunker , 140 , 133 , 0 ] ] ) ;
1778: LD_EXP 6
1782: PPUSH
1783: LD_INT 4
1785: PUSH
1786: LD_INT 157
1788: PUSH
1789: LD_INT 144
1791: PUSH
1792: LD_INT 0
1794: PUSH
1795: EMPTY
1796: LIST
1797: LIST
1798: LIST
1799: LIST
1800: PUSH
1801: LD_INT 32
1803: PUSH
1804: LD_INT 151
1806: PUSH
1807: LD_INT 142
1809: PUSH
1810: LD_INT 0
1812: PUSH
1813: EMPTY
1814: LIST
1815: LIST
1816: LIST
1817: LIST
1818: PUSH
1819: LD_INT 32
1821: PUSH
1822: LD_INT 161
1824: PUSH
1825: LD_INT 144
1827: PUSH
1828: LD_INT 0
1830: PUSH
1831: EMPTY
1832: LIST
1833: LIST
1834: LIST
1835: LIST
1836: PUSH
1837: LD_INT 32
1839: PUSH
1840: LD_INT 140
1842: PUSH
1843: LD_INT 133
1845: PUSH
1846: LD_INT 0
1848: PUSH
1849: EMPTY
1850: LIST
1851: LIST
1852: LIST
1853: LIST
1854: PUSH
1855: EMPTY
1856: LIST
1857: LIST
1858: LIST
1859: LIST
1860: PPUSH
1861: CALL 86294 0 2
// MC_SetProduceList ( mc_leg , [ [ ar_medium_trike , engine_solar , control_manual , ar_control_tower ] , [ ar_medium_trike , engine_solar , control_manual , ar_control_tower ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_cargo_bay ] ] ) ;
1865: LD_EXP 6
1869: PPUSH
1870: LD_INT 13
1872: PUSH
1873: LD_INT 2
1875: PUSH
1876: LD_INT 1
1878: PUSH
1879: LD_INT 31
1881: PUSH
1882: EMPTY
1883: LIST
1884: LIST
1885: LIST
1886: LIST
1887: PUSH
1888: LD_INT 13
1890: PUSH
1891: LD_INT 2
1893: PUSH
1894: LD_INT 1
1896: PUSH
1897: LD_INT 31
1899: PUSH
1900: EMPTY
1901: LIST
1902: LIST
1903: LIST
1904: LIST
1905: PUSH
1906: LD_INT 13
1908: PUSH
1909: LD_INT 1
1911: PUSH
1912: LD_INT 1
1914: PUSH
1915: LD_INT 27
1917: PUSH
1918: EMPTY
1919: LIST
1920: LIST
1921: LIST
1922: LIST
1923: PUSH
1924: LD_INT 13
1926: PUSH
1927: LD_INT 1
1929: PUSH
1930: LD_INT 2
1932: PUSH
1933: LD_INT 27
1935: PUSH
1936: EMPTY
1937: LIST
1938: LIST
1939: LIST
1940: LIST
1941: PUSH
1942: LD_INT 13
1944: PUSH
1945: LD_INT 1
1947: PUSH
1948: LD_INT 2
1950: PUSH
1951: LD_INT 27
1953: PUSH
1954: EMPTY
1955: LIST
1956: LIST
1957: LIST
1958: LIST
1959: PUSH
1960: LD_INT 13
1962: PUSH
1963: LD_INT 1
1965: PUSH
1966: LD_INT 2
1968: PUSH
1969: LD_INT 28
1971: PUSH
1972: EMPTY
1973: LIST
1974: LIST
1975: LIST
1976: LIST
1977: PUSH
1978: LD_INT 13
1980: PUSH
1981: LD_INT 1
1983: PUSH
1984: LD_INT 2
1986: PUSH
1987: LD_INT 28
1989: PUSH
1990: EMPTY
1991: LIST
1992: LIST
1993: LIST
1994: LIST
1995: PUSH
1996: LD_INT 13
1998: PUSH
1999: LD_INT 1
2001: PUSH
2002: LD_INT 2
2004: PUSH
2005: LD_INT 32
2007: PUSH
2008: EMPTY
2009: LIST
2010: LIST
2011: LIST
2012: LIST
2013: PUSH
2014: EMPTY
2015: LIST
2016: LIST
2017: LIST
2018: LIST
2019: LIST
2020: LIST
2021: LIST
2022: LIST
2023: PPUSH
2024: CALL 86402 0 2
// HiddenCamera ( 165 , 156 , 8 ) ;
2028: LD_INT 165
2030: PPUSH
2031: LD_INT 156
2033: PPUSH
2034: LD_INT 8
2036: PPUSH
2037: CALL_OW 244
// MC_SetScanArea ( mc_rus_1 , rus1Base ) ;
2041: LD_EXP 7
2045: PPUSH
2046: LD_INT 15
2048: PPUSH
2049: CALL 87723 0 2
// MC_SetParkingArea ( mc_rus_1 , rus1Parking ) ;
2053: LD_EXP 7
2057: PPUSH
2058: LD_INT 16
2060: PPUSH
2061: CALL 87667 0 2
// MC_SetAllowedTurretWeapons ( mc_rus_1 , [ ru_gatling_gun , ru_rocket , ru_rocket_launcher , ru_time_lapser , ru_heavy_gun ] ) ;
2065: LD_EXP 7
2069: PPUSH
2070: LD_INT 43
2072: PUSH
2073: LD_INT 47
2075: PUSH
2076: LD_INT 45
2078: PUSH
2079: LD_INT 49
2081: PUSH
2082: LD_INT 46
2084: PUSH
2085: EMPTY
2086: LIST
2087: LIST
2088: LIST
2089: LIST
2090: LIST
2091: PPUSH
2092: CALL 87555 0 2
// MC_SetCratesArea ( mc_rus_1 , rusCrates ) ;
2096: LD_EXP 7
2100: PPUSH
2101: LD_INT 13
2103: PPUSH
2104: CALL 87237 0 2
// MC_SetTame ( mc_rus_1 , rus1Base ) ;
2108: LD_EXP 7
2112: PPUSH
2113: LD_INT 15
2115: PPUSH
2116: CALL 86968 0 2
// MC_SetDefenderLimit ( mc_rus_1 , 5 ) ;
2120: LD_EXP 7
2124: PPUSH
2125: LD_INT 5
2127: PPUSH
2128: CALL 86587 0 2
// MC_SetProduceList ( mc_rus_1 , [ [ ru_heavy_wheeled , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_wheeled , engine_combustion , control_manual , ru_heavy_gun ] , [ ru_heavy_wheeled , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_heavy_wheeled , engine_combustion , control_manual , ru_rocket ] , [ ru_heavy_wheeled , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_wheeled , engine_combustion , control_computer , ru_cargo_bay ] , [ ru_medium_wheeled , engine_combustion , control_computer , ru_crane ] , ] ) ;
2132: LD_EXP 7
2136: PPUSH
2137: LD_INT 23
2139: PUSH
2140: LD_INT 1
2142: PUSH
2143: LD_INT 3
2145: PUSH
2146: LD_INT 46
2148: PUSH
2149: EMPTY
2150: LIST
2151: LIST
2152: LIST
2153: LIST
2154: PUSH
2155: LD_INT 23
2157: PUSH
2158: LD_INT 1
2160: PUSH
2161: LD_INT 1
2163: PUSH
2164: LD_INT 46
2166: PUSH
2167: EMPTY
2168: LIST
2169: LIST
2170: LIST
2171: LIST
2172: PUSH
2173: LD_INT 23
2175: PUSH
2176: LD_INT 1
2178: PUSH
2179: LD_INT 3
2181: PUSH
2182: LD_INT 45
2184: PUSH
2185: EMPTY
2186: LIST
2187: LIST
2188: LIST
2189: LIST
2190: PUSH
2191: LD_INT 23
2193: PUSH
2194: LD_INT 1
2196: PUSH
2197: LD_INT 1
2199: PUSH
2200: LD_INT 47
2202: PUSH
2203: EMPTY
2204: LIST
2205: LIST
2206: LIST
2207: LIST
2208: PUSH
2209: LD_INT 23
2211: PUSH
2212: LD_INT 1
2214: PUSH
2215: LD_INT 3
2217: PUSH
2218: LD_INT 46
2220: PUSH
2221: EMPTY
2222: LIST
2223: LIST
2224: LIST
2225: LIST
2226: PUSH
2227: LD_INT 21
2229: PUSH
2230: LD_INT 1
2232: PUSH
2233: LD_INT 3
2235: PUSH
2236: LD_INT 51
2238: PUSH
2239: EMPTY
2240: LIST
2241: LIST
2242: LIST
2243: LIST
2244: PUSH
2245: LD_INT 21
2247: PUSH
2248: LD_INT 1
2250: PUSH
2251: LD_INT 3
2253: PUSH
2254: LD_INT 52
2256: PUSH
2257: EMPTY
2258: LIST
2259: LIST
2260: LIST
2261: LIST
2262: PUSH
2263: EMPTY
2264: LIST
2265: LIST
2266: LIST
2267: LIST
2268: LIST
2269: LIST
2270: LIST
2271: PPUSH
2272: CALL 86402 0 2
// MC_SetScanArea ( mc_rus_2 , rus2Base ) ;
2276: LD_EXP 8
2280: PPUSH
2281: LD_INT 11
2283: PPUSH
2284: CALL 87723 0 2
// MC_SetParkingArea ( mc_rus_2 , rus2Parking ) ;
2288: LD_EXP 8
2292: PPUSH
2293: LD_INT 12
2295: PPUSH
2296: CALL 87667 0 2
// MC_SetAllowedTurretWeapons ( mc_rus_2 , [ ru_gatling_gun , ru_rocket , ru_rocket_launcher , ru_time_lapser , ru_heavy_gun ] ) ;
2300: LD_EXP 8
2304: PPUSH
2305: LD_INT 43
2307: PUSH
2308: LD_INT 47
2310: PUSH
2311: LD_INT 45
2313: PUSH
2314: LD_INT 49
2316: PUSH
2317: LD_INT 46
2319: PUSH
2320: EMPTY
2321: LIST
2322: LIST
2323: LIST
2324: LIST
2325: LIST
2326: PPUSH
2327: CALL 87555 0 2
// MC_SetCratesArea ( mc_rus_2 , rusCrates ) ;
2331: LD_EXP 8
2335: PPUSH
2336: LD_INT 13
2338: PPUSH
2339: CALL 87237 0 2
// MC_SetTame ( mc_rus_2 , rus2Base ) ;
2343: LD_EXP 8
2347: PPUSH
2348: LD_INT 11
2350: PPUSH
2351: CALL 86968 0 2
// MC_SetDefenderLimit ( mc_rus_2 , 4 ) ;
2355: LD_EXP 8
2359: PPUSH
2360: LD_INT 4
2362: PPUSH
2363: CALL 86587 0 2
// MC_SetTeleportExit ( mc_rus_2 , [ [ 115 , 201 ] ] ) ;
2367: LD_EXP 8
2371: PPUSH
2372: LD_INT 115
2374: PUSH
2375: LD_INT 201
2377: PUSH
2378: EMPTY
2379: LIST
2380: LIST
2381: PUSH
2382: EMPTY
2383: LIST
2384: PPUSH
2385: CALL 87293 0 2
// MC_SetProduceList ( mc_rus_2 , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] ] ) ;
2389: LD_EXP 8
2393: PPUSH
2394: LD_INT 24
2396: PUSH
2397: LD_INT 3
2399: PUSH
2400: LD_INT 3
2402: PUSH
2403: LD_INT 46
2405: PUSH
2406: EMPTY
2407: LIST
2408: LIST
2409: LIST
2410: LIST
2411: PUSH
2412: LD_INT 24
2414: PUSH
2415: LD_INT 3
2417: PUSH
2418: LD_INT 3
2420: PUSH
2421: LD_INT 46
2423: PUSH
2424: EMPTY
2425: LIST
2426: LIST
2427: LIST
2428: LIST
2429: PUSH
2430: LD_INT 24
2432: PUSH
2433: LD_INT 3
2435: PUSH
2436: LD_INT 3
2438: PUSH
2439: LD_INT 46
2441: PUSH
2442: EMPTY
2443: LIST
2444: LIST
2445: LIST
2446: LIST
2447: PUSH
2448: LD_INT 24
2450: PUSH
2451: LD_INT 3
2453: PUSH
2454: LD_INT 3
2456: PUSH
2457: LD_INT 46
2459: PUSH
2460: EMPTY
2461: LIST
2462: LIST
2463: LIST
2464: LIST
2465: PUSH
2466: EMPTY
2467: LIST
2468: LIST
2469: LIST
2470: LIST
2471: PPUSH
2472: CALL 86402 0 2
// end ;
2476: LD_VAR 0 1
2480: RET
// export function PrepareRussians ; var i , b , tmp , side , sr , depot , base ; begin
2481: LD_INT 0
2483: PPUSH
2484: PPUSH
2485: PPUSH
2486: PPUSH
2487: PPUSH
2488: PPUSH
2489: PPUSH
2490: PPUSH
// PrepareNature ( 0 , 0 , 3 , 0 , 0 , 0 , 0 , rusApe , 0 ) ;
2491: LD_INT 0
2493: PPUSH
2494: LD_INT 0
2496: PPUSH
2497: LD_INT 3
2499: PPUSH
2500: LD_INT 0
2502: PPUSH
2503: LD_INT 0
2505: PPUSH
2506: LD_INT 0
2508: PPUSH
2509: LD_INT 0
2511: PPUSH
2512: LD_INT 14
2514: PPUSH
2515: LD_INT 0
2517: PPUSH
2518: CALL 54381 0 9
// side := 3 ;
2522: LD_ADDR_VAR 0 5
2526: PUSH
2527: LD_INT 3
2529: ST_TO_ADDR
// SetTech ( tech_targTeleport , side , state_researched ) ;
2530: LD_INT 38
2532: PPUSH
2533: LD_VAR 0 5
2537: PPUSH
2538: LD_INT 2
2540: PPUSH
2541: CALL_OW 322
// SetTech ( tech_gun , side , state_researched ) ;
2545: LD_INT 39
2547: PPUSH
2548: LD_VAR 0 5
2552: PPUSH
2553: LD_INT 2
2555: PPUSH
2556: CALL_OW 322
// SetTech ( tech_advMet , side , state_researched ) ;
2560: LD_INT 34
2562: PPUSH
2563: LD_VAR 0 5
2567: PPUSH
2568: LD_INT 2
2570: PPUSH
2571: CALL_OW 322
// tmp := [ [ 0 , 208 , 163 , 4 , 0 , 0 ] , [ 3 , 194 , 161 , 1 , 0 , 0 ] , [ 17 , 190 , 161 , 1 , 0 , 0 ] , [ 5 , 200 , 145 , 3 , 0 , 0 ] , [ 32 , 192 , 144 , 3 , 0 , 0 ] , [ 26 , 216 , 172 , 3 , 0 , 0 ] , [ 26 , 218 , 176 , 3 , 0 , 0 ] , [ 29 , 182 , 149 , 3 , 0 , 0 ] , [ 8 , 201 , 171 , 0 , 10 , 11 ] , [ 32 , 188 , 167 , 0 , 0 , 0 ] , [ 32 , 202 , 179 , 0 , 0 , 0 ] , [ 32 , 209 , 182 , 0 , 0 , 0 ] , [ 32 , 220 , 183 , 5 , 0 , 0 ] , [ 32 , 225 , 181 , 5 , 0 , 0 ] , [ 26 , 220 , 174 , 5 , 0 , 0 ] , [ 1 , 84 , 128 , 4 , 0 , 0 ] , [ 3 , 68 , 121 , 1 , 0 , 0 ] , [ 19 , 72 , 125 , 5 , 0 , 0 ] , [ 18 , 68 , 124 , 0 , 0 , 0 ] , [ 24 , 64 , 121 , 1 , 0 , 0 ] , [ 17 , 65 , 118 , 2 , 0 , 0 ] , [ 21 , 68 , 117 , 3 , 0 , 0 ] , [ 8 , 68 , 130 , 1 , 14 , 10 ] , [ 8 , 67 , 110 , 2 , 11 , 12 ] , [ 28 , 85 , 108 , 2 , 0 , 0 ] , [ 28 , 85 , 124 , 2 , 0 , 0 ] , [ 30 , 97 , 119 , 2 , 0 , 0 ] , [ 5 , 111 , 138 , 4 , 0 , 0 ] , [ 33 , 104 , 130 , 3 , 0 , 0 ] , [ 33 , 110 , 142 , 5 , 0 , 0 ] , [ 33 , 91 , 131 , 5 , 0 , 0 ] , [ 33 , 107 , 157 , 5 , 0 , 0 ] , [ 33 , 104 , 160 , 5 , 0 , 0 ] , [ 33 , 101 , 162 , 5 , 0 , 0 ] , [ 32 , 87 , 157 , 5 , 0 , 0 ] , [ 32 , 105 , 158 , 5 , 0 , 0 ] , [ 33 , 91 , 118 , 4 , 0 , 0 ] , [ 33 , 89 , 107 , 4 , 0 , 0 ] , [ 5 , 86 , 96 , 3 , 0 , 0 ] , [ 33 , 91 , 102 , 4 , 0 , 0 ] , [ 32 , 80 , 95 , 3 , 0 , 0 ] , [ 28 , 77 , 105 , 3 , 0 , 0 ] , [ 28 , 85 , 113 , 3 , 0 , 0 ] , [ 28 , 55 , 97 , 3 , 0 , 0 ] , [ 28 , 88 , 128 , 3 , 0 , 0 ] , [ 32 , 69 , 101 , 2 , 0 , 0 ] , [ 1 , 34 , 23 , 4 , 0 , 0 ] , [ 8 , 25 , 4 , 3 , 11 , 10 ] , [ 8 , 15 , 4 , 2 , 14 , 12 ] , [ 29 , 55 , 35 , 2 , 0 , 0 ] , [ 29 , 24 , 44 , 2 , 0 , 0 ] , [ 34 , 34 , 32 , 4 , 0 , 0 ] , [ 3 , 14 , 16 , 1 , 0 , 0 ] , [ 24 , 10 , 16 , 1 , 0 , 0 ] , [ 21 , 11 , 13 , 2 , 0 , 0 ] , [ 18 , 14 , 12 , 3 , 0 , 0 ] , [ 16 , 14 , 19 , 0 , 0 , 0 ] , [ 17 , 18 , 20 , 5 , 0 , 0 ] , [ 28 , 10 , 5 , 1 , 0 , 0 ] , [ 28 , 8 , 8 , 1 , 0 , 0 ] , [ 26 , 19 , 2 , 1 , 0 , 0 ] , [ 26 , 30 , 2 , 1 , 0 , 0 ] , [ 5 , 59 , 20 , 4 , 0 , 0 ] , [ 32 , 60 , 24 , 4 , 0 , 0 ] , [ 32 , 61 , 45 , 5 , 0 , 0 ] , [ 32 , 52 , 51 , 5 , 0 , 0 ] , [ 33 , 56 , 51 , 5 , 0 , 0 ] , [ 33 , 62 , 49 , 5 , 0 , 0 ] , [ 33 , 41 , 47 , 5 , 0 , 0 ] , [ 33 , 33 , 52 , 5 , 0 , 0 ] , [ 5 , 31 , 40 , 0 , 0 , 0 ] , [ 33 , 65 , 37 , 5 , 0 , 0 ] , [ 33 , 63 , 29 , 4 , 0 , 0 ] , [ 33 , 54 , 11 , 4 , 0 , 0 ] , [ 33 , 56 , 15 , 4 , 0 , 0 ] , [ 33 , 51 , 6 , 4 , 0 , 0 ] , [ 26 , 39 , 25 , 0 , 0 , 0 ] , [ 26 , 37 , 21 , 0 , 0 , 0 ] , [ 32 , 35 , 17 , 4 , 0 , 0 ] , [ 33 , 35 , 28 , 4 , 0 , 0 ] , [ 33 , 28 , 46 , 5 , 0 , 0 ] , [ 33 , 31 , 6 , 4 , 0 , 0 ] , [ 26 , 54 , 38 , 4 , 0 , 0 ] , [ 33 , 207 , 167 , 3 , 0 , 0 ] , [ 30 , 43 , 2 , 4 , 0 , 0 ] ] ;
2575: LD_ADDR_VAR 0 4
2579: PUSH
2580: LD_INT 0
2582: PUSH
2583: LD_INT 208
2585: PUSH
2586: LD_INT 163
2588: PUSH
2589: LD_INT 4
2591: PUSH
2592: LD_INT 0
2594: PUSH
2595: LD_INT 0
2597: PUSH
2598: EMPTY
2599: LIST
2600: LIST
2601: LIST
2602: LIST
2603: LIST
2604: LIST
2605: PUSH
2606: LD_INT 3
2608: PUSH
2609: LD_INT 194
2611: PUSH
2612: LD_INT 161
2614: PUSH
2615: LD_INT 1
2617: PUSH
2618: LD_INT 0
2620: PUSH
2621: LD_INT 0
2623: PUSH
2624: EMPTY
2625: LIST
2626: LIST
2627: LIST
2628: LIST
2629: LIST
2630: LIST
2631: PUSH
2632: LD_INT 17
2634: PUSH
2635: LD_INT 190
2637: PUSH
2638: LD_INT 161
2640: PUSH
2641: LD_INT 1
2643: PUSH
2644: LD_INT 0
2646: PUSH
2647: LD_INT 0
2649: PUSH
2650: EMPTY
2651: LIST
2652: LIST
2653: LIST
2654: LIST
2655: LIST
2656: LIST
2657: PUSH
2658: LD_INT 5
2660: PUSH
2661: LD_INT 200
2663: PUSH
2664: LD_INT 145
2666: PUSH
2667: LD_INT 3
2669: PUSH
2670: LD_INT 0
2672: PUSH
2673: LD_INT 0
2675: PUSH
2676: EMPTY
2677: LIST
2678: LIST
2679: LIST
2680: LIST
2681: LIST
2682: LIST
2683: PUSH
2684: LD_INT 32
2686: PUSH
2687: LD_INT 192
2689: PUSH
2690: LD_INT 144
2692: PUSH
2693: LD_INT 3
2695: PUSH
2696: LD_INT 0
2698: PUSH
2699: LD_INT 0
2701: PUSH
2702: EMPTY
2703: LIST
2704: LIST
2705: LIST
2706: LIST
2707: LIST
2708: LIST
2709: PUSH
2710: LD_INT 26
2712: PUSH
2713: LD_INT 216
2715: PUSH
2716: LD_INT 172
2718: PUSH
2719: LD_INT 3
2721: PUSH
2722: LD_INT 0
2724: PUSH
2725: LD_INT 0
2727: PUSH
2728: EMPTY
2729: LIST
2730: LIST
2731: LIST
2732: LIST
2733: LIST
2734: LIST
2735: PUSH
2736: LD_INT 26
2738: PUSH
2739: LD_INT 218
2741: PUSH
2742: LD_INT 176
2744: PUSH
2745: LD_INT 3
2747: PUSH
2748: LD_INT 0
2750: PUSH
2751: LD_INT 0
2753: PUSH
2754: EMPTY
2755: LIST
2756: LIST
2757: LIST
2758: LIST
2759: LIST
2760: LIST
2761: PUSH
2762: LD_INT 29
2764: PUSH
2765: LD_INT 182
2767: PUSH
2768: LD_INT 149
2770: PUSH
2771: LD_INT 3
2773: PUSH
2774: LD_INT 0
2776: PUSH
2777: LD_INT 0
2779: PUSH
2780: EMPTY
2781: LIST
2782: LIST
2783: LIST
2784: LIST
2785: LIST
2786: LIST
2787: PUSH
2788: LD_INT 8
2790: PUSH
2791: LD_INT 201
2793: PUSH
2794: LD_INT 171
2796: PUSH
2797: LD_INT 0
2799: PUSH
2800: LD_INT 10
2802: PUSH
2803: LD_INT 11
2805: PUSH
2806: EMPTY
2807: LIST
2808: LIST
2809: LIST
2810: LIST
2811: LIST
2812: LIST
2813: PUSH
2814: LD_INT 32
2816: PUSH
2817: LD_INT 188
2819: PUSH
2820: LD_INT 167
2822: PUSH
2823: LD_INT 0
2825: PUSH
2826: LD_INT 0
2828: PUSH
2829: LD_INT 0
2831: PUSH
2832: EMPTY
2833: LIST
2834: LIST
2835: LIST
2836: LIST
2837: LIST
2838: LIST
2839: PUSH
2840: LD_INT 32
2842: PUSH
2843: LD_INT 202
2845: PUSH
2846: LD_INT 179
2848: PUSH
2849: LD_INT 0
2851: PUSH
2852: LD_INT 0
2854: PUSH
2855: LD_INT 0
2857: PUSH
2858: EMPTY
2859: LIST
2860: LIST
2861: LIST
2862: LIST
2863: LIST
2864: LIST
2865: PUSH
2866: LD_INT 32
2868: PUSH
2869: LD_INT 209
2871: PUSH
2872: LD_INT 182
2874: PUSH
2875: LD_INT 0
2877: PUSH
2878: LD_INT 0
2880: PUSH
2881: LD_INT 0
2883: PUSH
2884: EMPTY
2885: LIST
2886: LIST
2887: LIST
2888: LIST
2889: LIST
2890: LIST
2891: PUSH
2892: LD_INT 32
2894: PUSH
2895: LD_INT 220
2897: PUSH
2898: LD_INT 183
2900: PUSH
2901: LD_INT 5
2903: PUSH
2904: LD_INT 0
2906: PUSH
2907: LD_INT 0
2909: PUSH
2910: EMPTY
2911: LIST
2912: LIST
2913: LIST
2914: LIST
2915: LIST
2916: LIST
2917: PUSH
2918: LD_INT 32
2920: PUSH
2921: LD_INT 225
2923: PUSH
2924: LD_INT 181
2926: PUSH
2927: LD_INT 5
2929: PUSH
2930: LD_INT 0
2932: PUSH
2933: LD_INT 0
2935: PUSH
2936: EMPTY
2937: LIST
2938: LIST
2939: LIST
2940: LIST
2941: LIST
2942: LIST
2943: PUSH
2944: LD_INT 26
2946: PUSH
2947: LD_INT 220
2949: PUSH
2950: LD_INT 174
2952: PUSH
2953: LD_INT 5
2955: PUSH
2956: LD_INT 0
2958: PUSH
2959: LD_INT 0
2961: PUSH
2962: EMPTY
2963: LIST
2964: LIST
2965: LIST
2966: LIST
2967: LIST
2968: LIST
2969: PUSH
2970: LD_INT 1
2972: PUSH
2973: LD_INT 84
2975: PUSH
2976: LD_INT 128
2978: PUSH
2979: LD_INT 4
2981: PUSH
2982: LD_INT 0
2984: PUSH
2985: LD_INT 0
2987: PUSH
2988: EMPTY
2989: LIST
2990: LIST
2991: LIST
2992: LIST
2993: LIST
2994: LIST
2995: PUSH
2996: LD_INT 3
2998: PUSH
2999: LD_INT 68
3001: PUSH
3002: LD_INT 121
3004: PUSH
3005: LD_INT 1
3007: PUSH
3008: LD_INT 0
3010: PUSH
3011: LD_INT 0
3013: PUSH
3014: EMPTY
3015: LIST
3016: LIST
3017: LIST
3018: LIST
3019: LIST
3020: LIST
3021: PUSH
3022: LD_INT 19
3024: PUSH
3025: LD_INT 72
3027: PUSH
3028: LD_INT 125
3030: PUSH
3031: LD_INT 5
3033: PUSH
3034: LD_INT 0
3036: PUSH
3037: LD_INT 0
3039: PUSH
3040: EMPTY
3041: LIST
3042: LIST
3043: LIST
3044: LIST
3045: LIST
3046: LIST
3047: PUSH
3048: LD_INT 18
3050: PUSH
3051: LD_INT 68
3053: PUSH
3054: LD_INT 124
3056: PUSH
3057: LD_INT 0
3059: PUSH
3060: LD_INT 0
3062: PUSH
3063: LD_INT 0
3065: PUSH
3066: EMPTY
3067: LIST
3068: LIST
3069: LIST
3070: LIST
3071: LIST
3072: LIST
3073: PUSH
3074: LD_INT 24
3076: PUSH
3077: LD_INT 64
3079: PUSH
3080: LD_INT 121
3082: PUSH
3083: LD_INT 1
3085: PUSH
3086: LD_INT 0
3088: PUSH
3089: LD_INT 0
3091: PUSH
3092: EMPTY
3093: LIST
3094: LIST
3095: LIST
3096: LIST
3097: LIST
3098: LIST
3099: PUSH
3100: LD_INT 17
3102: PUSH
3103: LD_INT 65
3105: PUSH
3106: LD_INT 118
3108: PUSH
3109: LD_INT 2
3111: PUSH
3112: LD_INT 0
3114: PUSH
3115: LD_INT 0
3117: PUSH
3118: EMPTY
3119: LIST
3120: LIST
3121: LIST
3122: LIST
3123: LIST
3124: LIST
3125: PUSH
3126: LD_INT 21
3128: PUSH
3129: LD_INT 68
3131: PUSH
3132: LD_INT 117
3134: PUSH
3135: LD_INT 3
3137: PUSH
3138: LD_INT 0
3140: PUSH
3141: LD_INT 0
3143: PUSH
3144: EMPTY
3145: LIST
3146: LIST
3147: LIST
3148: LIST
3149: LIST
3150: LIST
3151: PUSH
3152: LD_INT 8
3154: PUSH
3155: LD_INT 68
3157: PUSH
3158: LD_INT 130
3160: PUSH
3161: LD_INT 1
3163: PUSH
3164: LD_INT 14
3166: PUSH
3167: LD_INT 10
3169: PUSH
3170: EMPTY
3171: LIST
3172: LIST
3173: LIST
3174: LIST
3175: LIST
3176: LIST
3177: PUSH
3178: LD_INT 8
3180: PUSH
3181: LD_INT 67
3183: PUSH
3184: LD_INT 110
3186: PUSH
3187: LD_INT 2
3189: PUSH
3190: LD_INT 11
3192: PUSH
3193: LD_INT 12
3195: PUSH
3196: EMPTY
3197: LIST
3198: LIST
3199: LIST
3200: LIST
3201: LIST
3202: LIST
3203: PUSH
3204: LD_INT 28
3206: PUSH
3207: LD_INT 85
3209: PUSH
3210: LD_INT 108
3212: PUSH
3213: LD_INT 2
3215: PUSH
3216: LD_INT 0
3218: PUSH
3219: LD_INT 0
3221: PUSH
3222: EMPTY
3223: LIST
3224: LIST
3225: LIST
3226: LIST
3227: LIST
3228: LIST
3229: PUSH
3230: LD_INT 28
3232: PUSH
3233: LD_INT 85
3235: PUSH
3236: LD_INT 124
3238: PUSH
3239: LD_INT 2
3241: PUSH
3242: LD_INT 0
3244: PUSH
3245: LD_INT 0
3247: PUSH
3248: EMPTY
3249: LIST
3250: LIST
3251: LIST
3252: LIST
3253: LIST
3254: LIST
3255: PUSH
3256: LD_INT 30
3258: PUSH
3259: LD_INT 97
3261: PUSH
3262: LD_INT 119
3264: PUSH
3265: LD_INT 2
3267: PUSH
3268: LD_INT 0
3270: PUSH
3271: LD_INT 0
3273: PUSH
3274: EMPTY
3275: LIST
3276: LIST
3277: LIST
3278: LIST
3279: LIST
3280: LIST
3281: PUSH
3282: LD_INT 5
3284: PUSH
3285: LD_INT 111
3287: PUSH
3288: LD_INT 138
3290: PUSH
3291: LD_INT 4
3293: PUSH
3294: LD_INT 0
3296: PUSH
3297: LD_INT 0
3299: PUSH
3300: EMPTY
3301: LIST
3302: LIST
3303: LIST
3304: LIST
3305: LIST
3306: LIST
3307: PUSH
3308: LD_INT 33
3310: PUSH
3311: LD_INT 104
3313: PUSH
3314: LD_INT 130
3316: PUSH
3317: LD_INT 3
3319: PUSH
3320: LD_INT 0
3322: PUSH
3323: LD_INT 0
3325: PUSH
3326: EMPTY
3327: LIST
3328: LIST
3329: LIST
3330: LIST
3331: LIST
3332: LIST
3333: PUSH
3334: LD_INT 33
3336: PUSH
3337: LD_INT 110
3339: PUSH
3340: LD_INT 142
3342: PUSH
3343: LD_INT 5
3345: PUSH
3346: LD_INT 0
3348: PUSH
3349: LD_INT 0
3351: PUSH
3352: EMPTY
3353: LIST
3354: LIST
3355: LIST
3356: LIST
3357: LIST
3358: LIST
3359: PUSH
3360: LD_INT 33
3362: PUSH
3363: LD_INT 91
3365: PUSH
3366: LD_INT 131
3368: PUSH
3369: LD_INT 5
3371: PUSH
3372: LD_INT 0
3374: PUSH
3375: LD_INT 0
3377: PUSH
3378: EMPTY
3379: LIST
3380: LIST
3381: LIST
3382: LIST
3383: LIST
3384: LIST
3385: PUSH
3386: LD_INT 33
3388: PUSH
3389: LD_INT 107
3391: PUSH
3392: LD_INT 157
3394: PUSH
3395: LD_INT 5
3397: PUSH
3398: LD_INT 0
3400: PUSH
3401: LD_INT 0
3403: PUSH
3404: EMPTY
3405: LIST
3406: LIST
3407: LIST
3408: LIST
3409: LIST
3410: LIST
3411: PUSH
3412: LD_INT 33
3414: PUSH
3415: LD_INT 104
3417: PUSH
3418: LD_INT 160
3420: PUSH
3421: LD_INT 5
3423: PUSH
3424: LD_INT 0
3426: PUSH
3427: LD_INT 0
3429: PUSH
3430: EMPTY
3431: LIST
3432: LIST
3433: LIST
3434: LIST
3435: LIST
3436: LIST
3437: PUSH
3438: LD_INT 33
3440: PUSH
3441: LD_INT 101
3443: PUSH
3444: LD_INT 162
3446: PUSH
3447: LD_INT 5
3449: PUSH
3450: LD_INT 0
3452: PUSH
3453: LD_INT 0
3455: PUSH
3456: EMPTY
3457: LIST
3458: LIST
3459: LIST
3460: LIST
3461: LIST
3462: LIST
3463: PUSH
3464: LD_INT 32
3466: PUSH
3467: LD_INT 87
3469: PUSH
3470: LD_INT 157
3472: PUSH
3473: LD_INT 5
3475: PUSH
3476: LD_INT 0
3478: PUSH
3479: LD_INT 0
3481: PUSH
3482: EMPTY
3483: LIST
3484: LIST
3485: LIST
3486: LIST
3487: LIST
3488: LIST
3489: PUSH
3490: LD_INT 32
3492: PUSH
3493: LD_INT 105
3495: PUSH
3496: LD_INT 158
3498: PUSH
3499: LD_INT 5
3501: PUSH
3502: LD_INT 0
3504: PUSH
3505: LD_INT 0
3507: PUSH
3508: EMPTY
3509: LIST
3510: LIST
3511: LIST
3512: LIST
3513: LIST
3514: LIST
3515: PUSH
3516: LD_INT 33
3518: PUSH
3519: LD_INT 91
3521: PUSH
3522: LD_INT 118
3524: PUSH
3525: LD_INT 4
3527: PUSH
3528: LD_INT 0
3530: PUSH
3531: LD_INT 0
3533: PUSH
3534: EMPTY
3535: LIST
3536: LIST
3537: LIST
3538: LIST
3539: LIST
3540: LIST
3541: PUSH
3542: LD_INT 33
3544: PUSH
3545: LD_INT 89
3547: PUSH
3548: LD_INT 107
3550: PUSH
3551: LD_INT 4
3553: PUSH
3554: LD_INT 0
3556: PUSH
3557: LD_INT 0
3559: PUSH
3560: EMPTY
3561: LIST
3562: LIST
3563: LIST
3564: LIST
3565: LIST
3566: LIST
3567: PUSH
3568: LD_INT 5
3570: PUSH
3571: LD_INT 86
3573: PUSH
3574: LD_INT 96
3576: PUSH
3577: LD_INT 3
3579: PUSH
3580: LD_INT 0
3582: PUSH
3583: LD_INT 0
3585: PUSH
3586: EMPTY
3587: LIST
3588: LIST
3589: LIST
3590: LIST
3591: LIST
3592: LIST
3593: PUSH
3594: LD_INT 33
3596: PUSH
3597: LD_INT 91
3599: PUSH
3600: LD_INT 102
3602: PUSH
3603: LD_INT 4
3605: PUSH
3606: LD_INT 0
3608: PUSH
3609: LD_INT 0
3611: PUSH
3612: EMPTY
3613: LIST
3614: LIST
3615: LIST
3616: LIST
3617: LIST
3618: LIST
3619: PUSH
3620: LD_INT 32
3622: PUSH
3623: LD_INT 80
3625: PUSH
3626: LD_INT 95
3628: PUSH
3629: LD_INT 3
3631: PUSH
3632: LD_INT 0
3634: PUSH
3635: LD_INT 0
3637: PUSH
3638: EMPTY
3639: LIST
3640: LIST
3641: LIST
3642: LIST
3643: LIST
3644: LIST
3645: PUSH
3646: LD_INT 28
3648: PUSH
3649: LD_INT 77
3651: PUSH
3652: LD_INT 105
3654: PUSH
3655: LD_INT 3
3657: PUSH
3658: LD_INT 0
3660: PUSH
3661: LD_INT 0
3663: PUSH
3664: EMPTY
3665: LIST
3666: LIST
3667: LIST
3668: LIST
3669: LIST
3670: LIST
3671: PUSH
3672: LD_INT 28
3674: PUSH
3675: LD_INT 85
3677: PUSH
3678: LD_INT 113
3680: PUSH
3681: LD_INT 3
3683: PUSH
3684: LD_INT 0
3686: PUSH
3687: LD_INT 0
3689: PUSH
3690: EMPTY
3691: LIST
3692: LIST
3693: LIST
3694: LIST
3695: LIST
3696: LIST
3697: PUSH
3698: LD_INT 28
3700: PUSH
3701: LD_INT 55
3703: PUSH
3704: LD_INT 97
3706: PUSH
3707: LD_INT 3
3709: PUSH
3710: LD_INT 0
3712: PUSH
3713: LD_INT 0
3715: PUSH
3716: EMPTY
3717: LIST
3718: LIST
3719: LIST
3720: LIST
3721: LIST
3722: LIST
3723: PUSH
3724: LD_INT 28
3726: PUSH
3727: LD_INT 88
3729: PUSH
3730: LD_INT 128
3732: PUSH
3733: LD_INT 3
3735: PUSH
3736: LD_INT 0
3738: PUSH
3739: LD_INT 0
3741: PUSH
3742: EMPTY
3743: LIST
3744: LIST
3745: LIST
3746: LIST
3747: LIST
3748: LIST
3749: PUSH
3750: LD_INT 32
3752: PUSH
3753: LD_INT 69
3755: PUSH
3756: LD_INT 101
3758: PUSH
3759: LD_INT 2
3761: PUSH
3762: LD_INT 0
3764: PUSH
3765: LD_INT 0
3767: PUSH
3768: EMPTY
3769: LIST
3770: LIST
3771: LIST
3772: LIST
3773: LIST
3774: LIST
3775: PUSH
3776: LD_INT 1
3778: PUSH
3779: LD_INT 34
3781: PUSH
3782: LD_INT 23
3784: PUSH
3785: LD_INT 4
3787: PUSH
3788: LD_INT 0
3790: PUSH
3791: LD_INT 0
3793: PUSH
3794: EMPTY
3795: LIST
3796: LIST
3797: LIST
3798: LIST
3799: LIST
3800: LIST
3801: PUSH
3802: LD_INT 8
3804: PUSH
3805: LD_INT 25
3807: PUSH
3808: LD_INT 4
3810: PUSH
3811: LD_INT 3
3813: PUSH
3814: LD_INT 11
3816: PUSH
3817: LD_INT 10
3819: PUSH
3820: EMPTY
3821: LIST
3822: LIST
3823: LIST
3824: LIST
3825: LIST
3826: LIST
3827: PUSH
3828: LD_INT 8
3830: PUSH
3831: LD_INT 15
3833: PUSH
3834: LD_INT 4
3836: PUSH
3837: LD_INT 2
3839: PUSH
3840: LD_INT 14
3842: PUSH
3843: LD_INT 12
3845: PUSH
3846: EMPTY
3847: LIST
3848: LIST
3849: LIST
3850: LIST
3851: LIST
3852: LIST
3853: PUSH
3854: LD_INT 29
3856: PUSH
3857: LD_INT 55
3859: PUSH
3860: LD_INT 35
3862: PUSH
3863: LD_INT 2
3865: PUSH
3866: LD_INT 0
3868: PUSH
3869: LD_INT 0
3871: PUSH
3872: EMPTY
3873: LIST
3874: LIST
3875: LIST
3876: LIST
3877: LIST
3878: LIST
3879: PUSH
3880: LD_INT 29
3882: PUSH
3883: LD_INT 24
3885: PUSH
3886: LD_INT 44
3888: PUSH
3889: LD_INT 2
3891: PUSH
3892: LD_INT 0
3894: PUSH
3895: LD_INT 0
3897: PUSH
3898: EMPTY
3899: LIST
3900: LIST
3901: LIST
3902: LIST
3903: LIST
3904: LIST
3905: PUSH
3906: LD_INT 34
3908: PUSH
3909: LD_INT 34
3911: PUSH
3912: LD_INT 32
3914: PUSH
3915: LD_INT 4
3917: PUSH
3918: LD_INT 0
3920: PUSH
3921: LD_INT 0
3923: PUSH
3924: EMPTY
3925: LIST
3926: LIST
3927: LIST
3928: LIST
3929: LIST
3930: LIST
3931: PUSH
3932: LD_INT 3
3934: PUSH
3935: LD_INT 14
3937: PUSH
3938: LD_INT 16
3940: PUSH
3941: LD_INT 1
3943: PUSH
3944: LD_INT 0
3946: PUSH
3947: LD_INT 0
3949: PUSH
3950: EMPTY
3951: LIST
3952: LIST
3953: LIST
3954: LIST
3955: LIST
3956: LIST
3957: PUSH
3958: LD_INT 24
3960: PUSH
3961: LD_INT 10
3963: PUSH
3964: LD_INT 16
3966: PUSH
3967: LD_INT 1
3969: PUSH
3970: LD_INT 0
3972: PUSH
3973: LD_INT 0
3975: PUSH
3976: EMPTY
3977: LIST
3978: LIST
3979: LIST
3980: LIST
3981: LIST
3982: LIST
3983: PUSH
3984: LD_INT 21
3986: PUSH
3987: LD_INT 11
3989: PUSH
3990: LD_INT 13
3992: PUSH
3993: LD_INT 2
3995: PUSH
3996: LD_INT 0
3998: PUSH
3999: LD_INT 0
4001: PUSH
4002: EMPTY
4003: LIST
4004: LIST
4005: LIST
4006: LIST
4007: LIST
4008: LIST
4009: PUSH
4010: LD_INT 18
4012: PUSH
4013: LD_INT 14
4015: PUSH
4016: LD_INT 12
4018: PUSH
4019: LD_INT 3
4021: PUSH
4022: LD_INT 0
4024: PUSH
4025: LD_INT 0
4027: PUSH
4028: EMPTY
4029: LIST
4030: LIST
4031: LIST
4032: LIST
4033: LIST
4034: LIST
4035: PUSH
4036: LD_INT 16
4038: PUSH
4039: LD_INT 14
4041: PUSH
4042: LD_INT 19
4044: PUSH
4045: LD_INT 0
4047: PUSH
4048: LD_INT 0
4050: PUSH
4051: LD_INT 0
4053: PUSH
4054: EMPTY
4055: LIST
4056: LIST
4057: LIST
4058: LIST
4059: LIST
4060: LIST
4061: PUSH
4062: LD_INT 17
4064: PUSH
4065: LD_INT 18
4067: PUSH
4068: LD_INT 20
4070: PUSH
4071: LD_INT 5
4073: PUSH
4074: LD_INT 0
4076: PUSH
4077: LD_INT 0
4079: PUSH
4080: EMPTY
4081: LIST
4082: LIST
4083: LIST
4084: LIST
4085: LIST
4086: LIST
4087: PUSH
4088: LD_INT 28
4090: PUSH
4091: LD_INT 10
4093: PUSH
4094: LD_INT 5
4096: PUSH
4097: LD_INT 1
4099: PUSH
4100: LD_INT 0
4102: PUSH
4103: LD_INT 0
4105: PUSH
4106: EMPTY
4107: LIST
4108: LIST
4109: LIST
4110: LIST
4111: LIST
4112: LIST
4113: PUSH
4114: LD_INT 28
4116: PUSH
4117: LD_INT 8
4119: PUSH
4120: LD_INT 8
4122: PUSH
4123: LD_INT 1
4125: PUSH
4126: LD_INT 0
4128: PUSH
4129: LD_INT 0
4131: PUSH
4132: EMPTY
4133: LIST
4134: LIST
4135: LIST
4136: LIST
4137: LIST
4138: LIST
4139: PUSH
4140: LD_INT 26
4142: PUSH
4143: LD_INT 19
4145: PUSH
4146: LD_INT 2
4148: PUSH
4149: LD_INT 1
4151: PUSH
4152: LD_INT 0
4154: PUSH
4155: LD_INT 0
4157: PUSH
4158: EMPTY
4159: LIST
4160: LIST
4161: LIST
4162: LIST
4163: LIST
4164: LIST
4165: PUSH
4166: LD_INT 26
4168: PUSH
4169: LD_INT 30
4171: PUSH
4172: LD_INT 2
4174: PUSH
4175: LD_INT 1
4177: PUSH
4178: LD_INT 0
4180: PUSH
4181: LD_INT 0
4183: PUSH
4184: EMPTY
4185: LIST
4186: LIST
4187: LIST
4188: LIST
4189: LIST
4190: LIST
4191: PUSH
4192: LD_INT 5
4194: PUSH
4195: LD_INT 59
4197: PUSH
4198: LD_INT 20
4200: PUSH
4201: LD_INT 4
4203: PUSH
4204: LD_INT 0
4206: PUSH
4207: LD_INT 0
4209: PUSH
4210: EMPTY
4211: LIST
4212: LIST
4213: LIST
4214: LIST
4215: LIST
4216: LIST
4217: PUSH
4218: LD_INT 32
4220: PUSH
4221: LD_INT 60
4223: PUSH
4224: LD_INT 24
4226: PUSH
4227: LD_INT 4
4229: PUSH
4230: LD_INT 0
4232: PUSH
4233: LD_INT 0
4235: PUSH
4236: EMPTY
4237: LIST
4238: LIST
4239: LIST
4240: LIST
4241: LIST
4242: LIST
4243: PUSH
4244: LD_INT 32
4246: PUSH
4247: LD_INT 61
4249: PUSH
4250: LD_INT 45
4252: PUSH
4253: LD_INT 5
4255: PUSH
4256: LD_INT 0
4258: PUSH
4259: LD_INT 0
4261: PUSH
4262: EMPTY
4263: LIST
4264: LIST
4265: LIST
4266: LIST
4267: LIST
4268: LIST
4269: PUSH
4270: LD_INT 32
4272: PUSH
4273: LD_INT 52
4275: PUSH
4276: LD_INT 51
4278: PUSH
4279: LD_INT 5
4281: PUSH
4282: LD_INT 0
4284: PUSH
4285: LD_INT 0
4287: PUSH
4288: EMPTY
4289: LIST
4290: LIST
4291: LIST
4292: LIST
4293: LIST
4294: LIST
4295: PUSH
4296: LD_INT 33
4298: PUSH
4299: LD_INT 56
4301: PUSH
4302: LD_INT 51
4304: PUSH
4305: LD_INT 5
4307: PUSH
4308: LD_INT 0
4310: PUSH
4311: LD_INT 0
4313: PUSH
4314: EMPTY
4315: LIST
4316: LIST
4317: LIST
4318: LIST
4319: LIST
4320: LIST
4321: PUSH
4322: LD_INT 33
4324: PUSH
4325: LD_INT 62
4327: PUSH
4328: LD_INT 49
4330: PUSH
4331: LD_INT 5
4333: PUSH
4334: LD_INT 0
4336: PUSH
4337: LD_INT 0
4339: PUSH
4340: EMPTY
4341: LIST
4342: LIST
4343: LIST
4344: LIST
4345: LIST
4346: LIST
4347: PUSH
4348: LD_INT 33
4350: PUSH
4351: LD_INT 41
4353: PUSH
4354: LD_INT 47
4356: PUSH
4357: LD_INT 5
4359: PUSH
4360: LD_INT 0
4362: PUSH
4363: LD_INT 0
4365: PUSH
4366: EMPTY
4367: LIST
4368: LIST
4369: LIST
4370: LIST
4371: LIST
4372: LIST
4373: PUSH
4374: LD_INT 33
4376: PUSH
4377: LD_INT 33
4379: PUSH
4380: LD_INT 52
4382: PUSH
4383: LD_INT 5
4385: PUSH
4386: LD_INT 0
4388: PUSH
4389: LD_INT 0
4391: PUSH
4392: EMPTY
4393: LIST
4394: LIST
4395: LIST
4396: LIST
4397: LIST
4398: LIST
4399: PUSH
4400: LD_INT 5
4402: PUSH
4403: LD_INT 31
4405: PUSH
4406: LD_INT 40
4408: PUSH
4409: LD_INT 0
4411: PUSH
4412: LD_INT 0
4414: PUSH
4415: LD_INT 0
4417: PUSH
4418: EMPTY
4419: LIST
4420: LIST
4421: LIST
4422: LIST
4423: LIST
4424: LIST
4425: PUSH
4426: LD_INT 33
4428: PUSH
4429: LD_INT 65
4431: PUSH
4432: LD_INT 37
4434: PUSH
4435: LD_INT 5
4437: PUSH
4438: LD_INT 0
4440: PUSH
4441: LD_INT 0
4443: PUSH
4444: EMPTY
4445: LIST
4446: LIST
4447: LIST
4448: LIST
4449: LIST
4450: LIST
4451: PUSH
4452: LD_INT 33
4454: PUSH
4455: LD_INT 63
4457: PUSH
4458: LD_INT 29
4460: PUSH
4461: LD_INT 4
4463: PUSH
4464: LD_INT 0
4466: PUSH
4467: LD_INT 0
4469: PUSH
4470: EMPTY
4471: LIST
4472: LIST
4473: LIST
4474: LIST
4475: LIST
4476: LIST
4477: PUSH
4478: LD_INT 33
4480: PUSH
4481: LD_INT 54
4483: PUSH
4484: LD_INT 11
4486: PUSH
4487: LD_INT 4
4489: PUSH
4490: LD_INT 0
4492: PUSH
4493: LD_INT 0
4495: PUSH
4496: EMPTY
4497: LIST
4498: LIST
4499: LIST
4500: LIST
4501: LIST
4502: LIST
4503: PUSH
4504: LD_INT 33
4506: PUSH
4507: LD_INT 56
4509: PUSH
4510: LD_INT 15
4512: PUSH
4513: LD_INT 4
4515: PUSH
4516: LD_INT 0
4518: PUSH
4519: LD_INT 0
4521: PUSH
4522: EMPTY
4523: LIST
4524: LIST
4525: LIST
4526: LIST
4527: LIST
4528: LIST
4529: PUSH
4530: LD_INT 33
4532: PUSH
4533: LD_INT 51
4535: PUSH
4536: LD_INT 6
4538: PUSH
4539: LD_INT 4
4541: PUSH
4542: LD_INT 0
4544: PUSH
4545: LD_INT 0
4547: PUSH
4548: EMPTY
4549: LIST
4550: LIST
4551: LIST
4552: LIST
4553: LIST
4554: LIST
4555: PUSH
4556: LD_INT 26
4558: PUSH
4559: LD_INT 39
4561: PUSH
4562: LD_INT 25
4564: PUSH
4565: LD_INT 0
4567: PUSH
4568: LD_INT 0
4570: PUSH
4571: LD_INT 0
4573: PUSH
4574: EMPTY
4575: LIST
4576: LIST
4577: LIST
4578: LIST
4579: LIST
4580: LIST
4581: PUSH
4582: LD_INT 26
4584: PUSH
4585: LD_INT 37
4587: PUSH
4588: LD_INT 21
4590: PUSH
4591: LD_INT 0
4593: PUSH
4594: LD_INT 0
4596: PUSH
4597: LD_INT 0
4599: PUSH
4600: EMPTY
4601: LIST
4602: LIST
4603: LIST
4604: LIST
4605: LIST
4606: LIST
4607: PUSH
4608: LD_INT 32
4610: PUSH
4611: LD_INT 35
4613: PUSH
4614: LD_INT 17
4616: PUSH
4617: LD_INT 4
4619: PUSH
4620: LD_INT 0
4622: PUSH
4623: LD_INT 0
4625: PUSH
4626: EMPTY
4627: LIST
4628: LIST
4629: LIST
4630: LIST
4631: LIST
4632: LIST
4633: PUSH
4634: LD_INT 33
4636: PUSH
4637: LD_INT 35
4639: PUSH
4640: LD_INT 28
4642: PUSH
4643: LD_INT 4
4645: PUSH
4646: LD_INT 0
4648: PUSH
4649: LD_INT 0
4651: PUSH
4652: EMPTY
4653: LIST
4654: LIST
4655: LIST
4656: LIST
4657: LIST
4658: LIST
4659: PUSH
4660: LD_INT 33
4662: PUSH
4663: LD_INT 28
4665: PUSH
4666: LD_INT 46
4668: PUSH
4669: LD_INT 5
4671: PUSH
4672: LD_INT 0
4674: PUSH
4675: LD_INT 0
4677: PUSH
4678: EMPTY
4679: LIST
4680: LIST
4681: LIST
4682: LIST
4683: LIST
4684: LIST
4685: PUSH
4686: LD_INT 33
4688: PUSH
4689: LD_INT 31
4691: PUSH
4692: LD_INT 6
4694: PUSH
4695: LD_INT 4
4697: PUSH
4698: LD_INT 0
4700: PUSH
4701: LD_INT 0
4703: PUSH
4704: EMPTY
4705: LIST
4706: LIST
4707: LIST
4708: LIST
4709: LIST
4710: LIST
4711: PUSH
4712: LD_INT 26
4714: PUSH
4715: LD_INT 54
4717: PUSH
4718: LD_INT 38
4720: PUSH
4721: LD_INT 4
4723: PUSH
4724: LD_INT 0
4726: PUSH
4727: LD_INT 0
4729: PUSH
4730: EMPTY
4731: LIST
4732: LIST
4733: LIST
4734: LIST
4735: LIST
4736: LIST
4737: PUSH
4738: LD_INT 33
4740: PUSH
4741: LD_INT 207
4743: PUSH
4744: LD_INT 167
4746: PUSH
4747: LD_INT 3
4749: PUSH
4750: LD_INT 0
4752: PUSH
4753: LD_INT 0
4755: PUSH
4756: EMPTY
4757: LIST
4758: LIST
4759: LIST
4760: LIST
4761: LIST
4762: LIST
4763: PUSH
4764: LD_INT 30
4766: PUSH
4767: LD_INT 43
4769: PUSH
4770: LD_INT 2
4772: PUSH
4773: LD_INT 4
4775: PUSH
4776: LD_INT 0
4778: PUSH
4779: LD_INT 0
4781: PUSH
4782: EMPTY
4783: LIST
4784: LIST
4785: LIST
4786: LIST
4787: LIST
4788: LIST
4789: PUSH
4790: EMPTY
4791: LIST
4792: LIST
4793: LIST
4794: LIST
4795: LIST
4796: LIST
4797: LIST
4798: LIST
4799: LIST
4800: LIST
4801: LIST
4802: LIST
4803: LIST
4804: LIST
4805: LIST
4806: LIST
4807: LIST
4808: LIST
4809: LIST
4810: LIST
4811: LIST
4812: LIST
4813: LIST
4814: LIST
4815: LIST
4816: LIST
4817: LIST
4818: LIST
4819: LIST
4820: LIST
4821: LIST
4822: LIST
4823: LIST
4824: LIST
4825: LIST
4826: LIST
4827: LIST
4828: LIST
4829: LIST
4830: LIST
4831: LIST
4832: LIST
4833: LIST
4834: LIST
4835: LIST
4836: LIST
4837: LIST
4838: LIST
4839: LIST
4840: LIST
4841: LIST
4842: LIST
4843: LIST
4844: LIST
4845: LIST
4846: LIST
4847: LIST
4848: LIST
4849: LIST
4850: LIST
4851: LIST
4852: LIST
4853: LIST
4854: LIST
4855: LIST
4856: LIST
4857: LIST
4858: LIST
4859: LIST
4860: LIST
4861: LIST
4862: LIST
4863: LIST
4864: LIST
4865: LIST
4866: LIST
4867: LIST
4868: LIST
4869: LIST
4870: LIST
4871: LIST
4872: LIST
4873: LIST
4874: LIST
4875: LIST
4876: ST_TO_ADDR
// for i in tmp do
4877: LD_ADDR_VAR 0 2
4881: PUSH
4882: LD_VAR 0 4
4886: PUSH
4887: FOR_IN
4888: IFFALSE 5119
// begin uc_side := side ;
4890: LD_ADDR_OWVAR 20
4894: PUSH
4895: LD_VAR 0 5
4899: ST_TO_ADDR
// uc_nation := nation_russian ;
4900: LD_ADDR_OWVAR 21
4904: PUSH
4905: LD_INT 3
4907: ST_TO_ADDR
// bc_type := i [ 1 ] ;
4908: LD_ADDR_OWVAR 42
4912: PUSH
4913: LD_VAR 0 2
4917: PUSH
4918: LD_INT 1
4920: ARRAY
4921: ST_TO_ADDR
// bc_level := rand ( 5 , 6 ) ;
4922: LD_ADDR_OWVAR 43
4926: PUSH
4927: LD_INT 5
4929: PPUSH
4930: LD_INT 6
4932: PPUSH
4933: CALL_OW 12
4937: ST_TO_ADDR
// bc_kind1 := i [ 5 ] ;
4938: LD_ADDR_OWVAR 44
4942: PUSH
4943: LD_VAR 0 2
4947: PUSH
4948: LD_INT 5
4950: ARRAY
4951: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
4952: LD_ADDR_OWVAR 45
4956: PUSH
4957: LD_VAR 0 2
4961: PUSH
4962: LD_INT 6
4964: ARRAY
4965: ST_TO_ADDR
// sr := 0 ;
4966: LD_ADDR_VAR 0 6
4970: PUSH
4971: LD_INT 0
4973: ST_TO_ADDR
// if i [ 1 ] = b_oil_mine then
4974: LD_VAR 0 2
4978: PUSH
4979: LD_INT 1
4981: ARRAY
4982: PUSH
4983: LD_INT 29
4985: EQUAL
4986: IFFALSE 4998
// sr := mat_oil else
4988: LD_ADDR_VAR 0 6
4992: PUSH
4993: LD_INT 2
4995: ST_TO_ADDR
4996: GO 5020
// if i [ 1 ] = b_siberite_mine then
4998: LD_VAR 0 2
5002: PUSH
5003: LD_INT 1
5005: ARRAY
5006: PUSH
5007: LD_INT 30
5009: EQUAL
5010: IFFALSE 5020
// sr := mat_siberit ;
5012: LD_ADDR_VAR 0 6
5016: PUSH
5017: LD_INT 3
5019: ST_TO_ADDR
// if sr then
5020: LD_VAR 0 6
5024: IFFALSE 5080
// begin CreateDepositXY ( i [ 2 ] , i [ 3 ] , sr ) ;
5026: LD_VAR 0 2
5030: PUSH
5031: LD_INT 2
5033: ARRAY
5034: PPUSH
5035: LD_VAR 0 2
5039: PUSH
5040: LD_INT 3
5042: ARRAY
5043: PPUSH
5044: LD_VAR 0 6
5048: PPUSH
5049: CALL_OW 62
// SetResourceVisibility ( i [ 2 ] , i [ 3 ] , side ) ;
5053: LD_VAR 0 2
5057: PUSH
5058: LD_INT 2
5060: ARRAY
5061: PPUSH
5062: LD_VAR 0 2
5066: PUSH
5067: LD_INT 3
5069: ARRAY
5070: PPUSH
5071: LD_VAR 0 5
5075: PPUSH
5076: CALL_OW 441
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
5080: LD_ADDR_VAR 0 3
5084: PUSH
5085: LD_VAR 0 2
5089: PUSH
5090: LD_INT 2
5092: ARRAY
5093: PPUSH
5094: LD_VAR 0 2
5098: PUSH
5099: LD_INT 3
5101: ARRAY
5102: PPUSH
5103: LD_VAR 0 2
5107: PUSH
5108: LD_INT 4
5110: ARRAY
5111: PPUSH
5112: CALL_OW 47
5116: ST_TO_ADDR
// end ;
5117: GO 4887
5119: POP
5120: POP
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
5121: LD_ADDR_VAR 0 7
5125: PUSH
5126: LD_INT 22
5128: PUSH
5129: LD_VAR 0 5
5133: PUSH
5134: EMPTY
5135: LIST
5136: LIST
5137: PUSH
5138: LD_INT 30
5140: PUSH
5141: LD_INT 1
5143: PUSH
5144: EMPTY
5145: LIST
5146: LIST
5147: PUSH
5148: EMPTY
5149: LIST
5150: LIST
5151: PPUSH
5152: CALL_OW 69
5156: ST_TO_ADDR
// if not depot then
5157: LD_VAR 0 7
5161: NOT
5162: IFFALSE 5166
// exit ;
5164: GO 5510
// base := PrepareBase ( HexInfo ( 84 , 128 ) , rus1Base , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 3000 , 300 , 100 ] , [ 12 , 6 , 6 , 4 ] ) ;
5166: LD_ADDR_VAR 0 8
5170: PUSH
5171: LD_INT 84
5173: PPUSH
5174: LD_INT 128
5176: PPUSH
5177: CALL_OW 428
5181: PPUSH
5182: LD_INT 15
5184: PPUSH
5185: LD_INT 0
5187: PPUSH
5188: LD_INT 6
5190: PUSH
5191: LD_INT 7
5193: PUSH
5194: LD_INT 8
5196: PUSH
5197: EMPTY
5198: LIST
5199: LIST
5200: LIST
5201: PUSH
5202: LD_OWVAR 67
5206: ARRAY
5207: PPUSH
5208: LD_INT 3000
5210: PUSH
5211: LD_INT 300
5213: PUSH
5214: LD_INT 100
5216: PUSH
5217: EMPTY
5218: LIST
5219: LIST
5220: LIST
5221: PPUSH
5222: LD_INT 12
5224: PUSH
5225: LD_INT 6
5227: PUSH
5228: LD_INT 6
5230: PUSH
5231: LD_INT 4
5233: PUSH
5234: EMPTY
5235: LIST
5236: LIST
5237: LIST
5238: LIST
5239: PPUSH
5240: CALL 29999 0 6
5244: ST_TO_ADDR
// if not base then
5245: LD_VAR 0 8
5249: NOT
5250: IFFALSE 5254
// exit ;
5252: GO 5510
// mc_bases := Replace ( mc_bases , mc_rus_1 , base ) ;
5254: LD_ADDR_EXP 44
5258: PUSH
5259: LD_EXP 44
5263: PPUSH
5264: LD_EXP 7
5268: PPUSH
5269: LD_VAR 0 8
5273: PPUSH
5274: CALL_OW 1
5278: ST_TO_ADDR
// base := PrepareBase ( HexInfo ( 34 , 23 ) , rus2Base , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 20000 , 3000 , 1000 ] , [ 12 , 6 , 6 , 4 ] ) ;
5279: LD_ADDR_VAR 0 8
5283: PUSH
5284: LD_INT 34
5286: PPUSH
5287: LD_INT 23
5289: PPUSH
5290: CALL_OW 428
5294: PPUSH
5295: LD_INT 11
5297: PPUSH
5298: LD_INT 0
5300: PPUSH
5301: LD_INT 6
5303: PUSH
5304: LD_INT 7
5306: PUSH
5307: LD_INT 8
5309: PUSH
5310: EMPTY
5311: LIST
5312: LIST
5313: LIST
5314: PUSH
5315: LD_OWVAR 67
5319: ARRAY
5320: PPUSH
5321: LD_INT 20000
5323: PUSH
5324: LD_INT 3000
5326: PUSH
5327: LD_INT 1000
5329: PUSH
5330: EMPTY
5331: LIST
5332: LIST
5333: LIST
5334: PPUSH
5335: LD_INT 12
5337: PUSH
5338: LD_INT 6
5340: PUSH
5341: LD_INT 6
5343: PUSH
5344: LD_INT 4
5346: PUSH
5347: EMPTY
5348: LIST
5349: LIST
5350: LIST
5351: LIST
5352: PPUSH
5353: CALL 29999 0 6
5357: ST_TO_ADDR
// if not base then
5358: LD_VAR 0 8
5362: NOT
5363: IFFALSE 5367
// exit ;
5365: GO 5510
// mc_bases := Replace ( mc_bases , mc_rus_2 , base ) ;
5367: LD_ADDR_EXP 44
5371: PUSH
5372: LD_EXP 44
5376: PPUSH
5377: LD_EXP 8
5381: PPUSH
5382: LD_VAR 0 8
5386: PPUSH
5387: CALL_OW 1
5391: ST_TO_ADDR
// ruOutpost := PrepareBase ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_depot ] ] ) [ 1 ] , ruOutpostArea , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 500 , 100 , 10 ] , [ [ 6 , 7 , 8 ] [ Difficulty ] , 2 , 0 , 1 ] ) ;
5392: LD_ADDR_EXP 14
5396: PUSH
5397: LD_INT 22
5399: PUSH
5400: LD_INT 3
5402: PUSH
5403: EMPTY
5404: LIST
5405: LIST
5406: PUSH
5407: LD_INT 30
5409: PUSH
5410: LD_INT 0
5412: PUSH
5413: EMPTY
5414: LIST
5415: LIST
5416: PUSH
5417: EMPTY
5418: LIST
5419: LIST
5420: PPUSH
5421: CALL_OW 69
5425: PUSH
5426: LD_INT 1
5428: ARRAY
5429: PPUSH
5430: LD_INT 25
5432: PPUSH
5433: LD_INT 0
5435: PPUSH
5436: LD_INT 6
5438: PUSH
5439: LD_INT 7
5441: PUSH
5442: LD_INT 8
5444: PUSH
5445: EMPTY
5446: LIST
5447: LIST
5448: LIST
5449: PUSH
5450: LD_OWVAR 67
5454: ARRAY
5455: PPUSH
5456: LD_INT 500
5458: PUSH
5459: LD_INT 100
5461: PUSH
5462: LD_INT 10
5464: PUSH
5465: EMPTY
5466: LIST
5467: LIST
5468: LIST
5469: PPUSH
5470: LD_INT 6
5472: PUSH
5473: LD_INT 7
5475: PUSH
5476: LD_INT 8
5478: PUSH
5479: EMPTY
5480: LIST
5481: LIST
5482: LIST
5483: PUSH
5484: LD_OWVAR 67
5488: ARRAY
5489: PUSH
5490: LD_INT 2
5492: PUSH
5493: LD_INT 0
5495: PUSH
5496: LD_INT 1
5498: PUSH
5499: EMPTY
5500: LIST
5501: LIST
5502: LIST
5503: LIST
5504: PPUSH
5505: CALL 29999 0 6
5509: ST_TO_ADDR
// end ;
5510: LD_VAR 0 1
5514: RET
// export function PrepareLegion ; var i , b , veh , tmp , tmp2 , cameras , side , sr , depot , base ; begin
5515: LD_INT 0
5517: PPUSH
5518: PPUSH
5519: PPUSH
5520: PPUSH
5521: PPUSH
5522: PPUSH
5523: PPUSH
5524: PPUSH
5525: PPUSH
5526: PPUSH
5527: PPUSH
// PrepareNature ( 0 , 0 , 6 , 0 , 0 , 0 , 0 , legApe , 0 ) ;
5528: LD_INT 0
5530: PPUSH
5531: LD_INT 0
5533: PPUSH
5534: LD_INT 6
5536: PPUSH
5537: LD_INT 0
5539: PPUSH
5540: LD_INT 0
5542: PPUSH
5543: LD_INT 0
5545: PPUSH
5546: LD_INT 0
5548: PPUSH
5549: LD_INT 8
5551: PPUSH
5552: LD_INT 0
5554: PPUSH
5555: CALL 54381 0 9
// side := 8 ;
5559: LD_ADDR_VAR 0 8
5563: PUSH
5564: LD_INT 8
5566: ST_TO_ADDR
// tmp := AreaToList ( minesArea , 0 ) ;
5567: LD_ADDR_VAR 0 5
5571: PUSH
5572: LD_INT 20
5574: PPUSH
5575: LD_INT 0
5577: PPUSH
5578: CALL_OW 517
5582: ST_TO_ADDR
// if Difficulty > 2 then
5583: LD_OWVAR 67
5587: PUSH
5588: LD_INT 2
5590: GREATER
5591: IFFALSE 5735
// begin tmp2 := AreaToList ( minesArea2 , 0 ) ;
5593: LD_ADDR_VAR 0 6
5597: PUSH
5598: LD_INT 27
5600: PPUSH
5601: LD_INT 0
5603: PPUSH
5604: CALL_OW 517
5608: ST_TO_ADDR
// for i = 1 to tmp2 [ 1 ] do
5609: LD_ADDR_VAR 0 2
5613: PUSH
5614: DOUBLE
5615: LD_INT 1
5617: DEC
5618: ST_TO_ADDR
5619: LD_VAR 0 6
5623: PUSH
5624: LD_INT 1
5626: ARRAY
5627: PUSH
5628: FOR_TO
5629: IFFALSE 5733
// begin tmp := ReplaceIn ( tmp , [ 1 , tmp [ 1 ] + 1 ] , tmp2 [ 1 ] [ i ] ) ;
5631: LD_ADDR_VAR 0 5
5635: PUSH
5636: LD_VAR 0 5
5640: PPUSH
5641: LD_INT 1
5643: PUSH
5644: LD_VAR 0 5
5648: PUSH
5649: LD_INT 1
5651: ARRAY
5652: PUSH
5653: LD_INT 1
5655: PLUS
5656: PUSH
5657: EMPTY
5658: LIST
5659: LIST
5660: PPUSH
5661: LD_VAR 0 6
5665: PUSH
5666: LD_INT 1
5668: ARRAY
5669: PUSH
5670: LD_VAR 0 2
5674: ARRAY
5675: PPUSH
5676: CALL 26712 0 3
5680: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 2 , tmp [ 2 ] + 1 ] , tmp2 [ 2 ] [ i ] ) ;
5681: LD_ADDR_VAR 0 5
5685: PUSH
5686: LD_VAR 0 5
5690: PPUSH
5691: LD_INT 2
5693: PUSH
5694: LD_VAR 0 5
5698: PUSH
5699: LD_INT 2
5701: ARRAY
5702: PUSH
5703: LD_INT 1
5705: PLUS
5706: PUSH
5707: EMPTY
5708: LIST
5709: LIST
5710: PPUSH
5711: LD_VAR 0 6
5715: PUSH
5716: LD_INT 2
5718: ARRAY
5719: PUSH
5720: LD_VAR 0 2
5724: ARRAY
5725: PPUSH
5726: CALL 26712 0 3
5730: ST_TO_ADDR
// end ;
5731: GO 5628
5733: POP
5734: POP
// end ; if tmp then
5735: LD_VAR 0 5
5739: IFFALSE 5867
// begin for i = 1 to tmp [ 1 ] do
5741: LD_ADDR_VAR 0 2
5745: PUSH
5746: DOUBLE
5747: LD_INT 1
5749: DEC
5750: ST_TO_ADDR
5751: LD_VAR 0 5
5755: PUSH
5756: LD_INT 1
5758: ARRAY
5759: PUSH
5760: FOR_TO
5761: IFFALSE 5865
// begin PlaceMine ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side , 0 ) ;
5763: LD_VAR 0 5
5767: PUSH
5768: LD_INT 1
5770: ARRAY
5771: PUSH
5772: LD_VAR 0 2
5776: ARRAY
5777: PPUSH
5778: LD_VAR 0 5
5782: PUSH
5783: LD_INT 2
5785: ARRAY
5786: PUSH
5787: LD_VAR 0 2
5791: ARRAY
5792: PPUSH
5793: LD_VAR 0 8
5797: PPUSH
5798: LD_INT 0
5800: PPUSH
5801: CALL_OW 454
// staticMines := Insert ( staticMines , staticMines + 1 , [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ) ;
5805: LD_ADDR_EXP 16
5809: PUSH
5810: LD_EXP 16
5814: PPUSH
5815: LD_EXP 16
5819: PUSH
5820: LD_INT 1
5822: PLUS
5823: PPUSH
5824: LD_VAR 0 5
5828: PUSH
5829: LD_INT 1
5831: ARRAY
5832: PUSH
5833: LD_VAR 0 2
5837: ARRAY
5838: PUSH
5839: LD_VAR 0 5
5843: PUSH
5844: LD_INT 2
5846: ARRAY
5847: PUSH
5848: LD_VAR 0 2
5852: ARRAY
5853: PUSH
5854: EMPTY
5855: LIST
5856: LIST
5857: PPUSH
5858: CALL_OW 2
5862: ST_TO_ADDR
// end ;
5863: GO 5760
5865: POP
5866: POP
// end ; cameras := [ [ 165 , 156 ] , [ 143 , 145 ] , [ 152 , 165 ] , [ 123 , 153 ] , [ 161 , 215 ] , [ 172 , 100 ] , [ 148 , 83 ] , [ 122 , 68 ] , [ 105 , 74 ] , [ 113 , 97 ] ] ;
5867: LD_ADDR_VAR 0 7
5871: PUSH
5872: LD_INT 165
5874: PUSH
5875: LD_INT 156
5877: PUSH
5878: EMPTY
5879: LIST
5880: LIST
5881: PUSH
5882: LD_INT 143
5884: PUSH
5885: LD_INT 145
5887: PUSH
5888: EMPTY
5889: LIST
5890: LIST
5891: PUSH
5892: LD_INT 152
5894: PUSH
5895: LD_INT 165
5897: PUSH
5898: EMPTY
5899: LIST
5900: LIST
5901: PUSH
5902: LD_INT 123
5904: PUSH
5905: LD_INT 153
5907: PUSH
5908: EMPTY
5909: LIST
5910: LIST
5911: PUSH
5912: LD_INT 161
5914: PUSH
5915: LD_INT 215
5917: PUSH
5918: EMPTY
5919: LIST
5920: LIST
5921: PUSH
5922: LD_INT 172
5924: PUSH
5925: LD_INT 100
5927: PUSH
5928: EMPTY
5929: LIST
5930: LIST
5931: PUSH
5932: LD_INT 148
5934: PUSH
5935: LD_INT 83
5937: PUSH
5938: EMPTY
5939: LIST
5940: LIST
5941: PUSH
5942: LD_INT 122
5944: PUSH
5945: LD_INT 68
5947: PUSH
5948: EMPTY
5949: LIST
5950: LIST
5951: PUSH
5952: LD_INT 105
5954: PUSH
5955: LD_INT 74
5957: PUSH
5958: EMPTY
5959: LIST
5960: LIST
5961: PUSH
5962: LD_INT 113
5964: PUSH
5965: LD_INT 97
5967: PUSH
5968: EMPTY
5969: LIST
5970: LIST
5971: PUSH
5972: EMPTY
5973: LIST
5974: LIST
5975: LIST
5976: LIST
5977: LIST
5978: LIST
5979: LIST
5980: LIST
5981: LIST
5982: LIST
5983: ST_TO_ADDR
// for i in cameras do
5984: LD_ADDR_VAR 0 2
5988: PUSH
5989: LD_VAR 0 7
5993: PUSH
5994: FOR_IN
5995: IFFALSE 6026
// HiddenCamera ( i [ 1 ] , i [ 2 ] , side ) ;
5997: LD_VAR 0 2
6001: PUSH
6002: LD_INT 1
6004: ARRAY
6005: PPUSH
6006: LD_VAR 0 2
6010: PUSH
6011: LD_INT 2
6013: ARRAY
6014: PPUSH
6015: LD_VAR 0 8
6019: PPUSH
6020: CALL_OW 244
6024: GO 5994
6026: POP
6027: POP
// tmp := [ [ 1 , 144 , 110 , 1 , 0 , 0 ] , [ 3 , 151 , 118 , 0 , 0 , 0 ] , [ 8 , 158 , 110 , 4 , 10 , 15 ] , [ 23 , 154 , 121 , 5 , 0 , 0 ] , [ 22 , 155 , 118 , 4 , 0 , 0 ] , [ 21 , 151 , 122 , 0 , 0 , 0 ] , [ 18 , 148 , 118 , 1 , 0 , 0 ] , [ 17 , 147 , 114 , 2 , 0 , 0 ] , [ 29 , 163 , 120 , 5 , 0 , 0 ] , [ 27 , 137 , 116 , 3 , 0 , 0 ] , [ 27 , 133 , 111 , 1 , 0 , 0 ] , [ 27 , 132 , 106 , 4 , 0 , 0 ] , [ 26 , 137 , 111 , 0 , 0 , 0 ] , [ 8 , 141 , 117 , 1 , 13 , 11 ] , [ 30 , 140 , 128 , 1 , 0 , 0 ] , [ 5 , 146 , 96 , 3 , 0 , 0 ] , [ 32 , 150 , 98 , 3 , 0 , 0 ] , [ 32 , 142 , 95 , 3 , 0 , 0 ] , [ 32 , 159 , 104 , 3 , 0 , 0 ] , [ 32 , 133 , 95 , 3 , 0 , 0 ] , [ 32 , 131 , 102 , 2 , 0 , 0 ] , [ 32 , 164 , 144 , 0 , 0 , 0 ] , [ 32 , 146 , 139 , 0 , 0 , 0 ] , [ 26 , 143 , 122 , 4 , 0 , 0 ] , [ 26 , 164 , 116 , 2 , 0 , 0 ] , ] ;
6028: LD_ADDR_VAR 0 5
6032: PUSH
6033: LD_INT 1
6035: PUSH
6036: LD_INT 144
6038: PUSH
6039: LD_INT 110
6041: PUSH
6042: LD_INT 1
6044: PUSH
6045: LD_INT 0
6047: PUSH
6048: LD_INT 0
6050: PUSH
6051: EMPTY
6052: LIST
6053: LIST
6054: LIST
6055: LIST
6056: LIST
6057: LIST
6058: PUSH
6059: LD_INT 3
6061: PUSH
6062: LD_INT 151
6064: PUSH
6065: LD_INT 118
6067: PUSH
6068: LD_INT 0
6070: PUSH
6071: LD_INT 0
6073: PUSH
6074: LD_INT 0
6076: PUSH
6077: EMPTY
6078: LIST
6079: LIST
6080: LIST
6081: LIST
6082: LIST
6083: LIST
6084: PUSH
6085: LD_INT 8
6087: PUSH
6088: LD_INT 158
6090: PUSH
6091: LD_INT 110
6093: PUSH
6094: LD_INT 4
6096: PUSH
6097: LD_INT 10
6099: PUSH
6100: LD_INT 15
6102: PUSH
6103: EMPTY
6104: LIST
6105: LIST
6106: LIST
6107: LIST
6108: LIST
6109: LIST
6110: PUSH
6111: LD_INT 23
6113: PUSH
6114: LD_INT 154
6116: PUSH
6117: LD_INT 121
6119: PUSH
6120: LD_INT 5
6122: PUSH
6123: LD_INT 0
6125: PUSH
6126: LD_INT 0
6128: PUSH
6129: EMPTY
6130: LIST
6131: LIST
6132: LIST
6133: LIST
6134: LIST
6135: LIST
6136: PUSH
6137: LD_INT 22
6139: PUSH
6140: LD_INT 155
6142: PUSH
6143: LD_INT 118
6145: PUSH
6146: LD_INT 4
6148: PUSH
6149: LD_INT 0
6151: PUSH
6152: LD_INT 0
6154: PUSH
6155: EMPTY
6156: LIST
6157: LIST
6158: LIST
6159: LIST
6160: LIST
6161: LIST
6162: PUSH
6163: LD_INT 21
6165: PUSH
6166: LD_INT 151
6168: PUSH
6169: LD_INT 122
6171: PUSH
6172: LD_INT 0
6174: PUSH
6175: LD_INT 0
6177: PUSH
6178: LD_INT 0
6180: PUSH
6181: EMPTY
6182: LIST
6183: LIST
6184: LIST
6185: LIST
6186: LIST
6187: LIST
6188: PUSH
6189: LD_INT 18
6191: PUSH
6192: LD_INT 148
6194: PUSH
6195: LD_INT 118
6197: PUSH
6198: LD_INT 1
6200: PUSH
6201: LD_INT 0
6203: PUSH
6204: LD_INT 0
6206: PUSH
6207: EMPTY
6208: LIST
6209: LIST
6210: LIST
6211: LIST
6212: LIST
6213: LIST
6214: PUSH
6215: LD_INT 17
6217: PUSH
6218: LD_INT 147
6220: PUSH
6221: LD_INT 114
6223: PUSH
6224: LD_INT 2
6226: PUSH
6227: LD_INT 0
6229: PUSH
6230: LD_INT 0
6232: PUSH
6233: EMPTY
6234: LIST
6235: LIST
6236: LIST
6237: LIST
6238: LIST
6239: LIST
6240: PUSH
6241: LD_INT 29
6243: PUSH
6244: LD_INT 163
6246: PUSH
6247: LD_INT 120
6249: PUSH
6250: LD_INT 5
6252: PUSH
6253: LD_INT 0
6255: PUSH
6256: LD_INT 0
6258: PUSH
6259: EMPTY
6260: LIST
6261: LIST
6262: LIST
6263: LIST
6264: LIST
6265: LIST
6266: PUSH
6267: LD_INT 27
6269: PUSH
6270: LD_INT 137
6272: PUSH
6273: LD_INT 116
6275: PUSH
6276: LD_INT 3
6278: PUSH
6279: LD_INT 0
6281: PUSH
6282: LD_INT 0
6284: PUSH
6285: EMPTY
6286: LIST
6287: LIST
6288: LIST
6289: LIST
6290: LIST
6291: LIST
6292: PUSH
6293: LD_INT 27
6295: PUSH
6296: LD_INT 133
6298: PUSH
6299: LD_INT 111
6301: PUSH
6302: LD_INT 1
6304: PUSH
6305: LD_INT 0
6307: PUSH
6308: LD_INT 0
6310: PUSH
6311: EMPTY
6312: LIST
6313: LIST
6314: LIST
6315: LIST
6316: LIST
6317: LIST
6318: PUSH
6319: LD_INT 27
6321: PUSH
6322: LD_INT 132
6324: PUSH
6325: LD_INT 106
6327: PUSH
6328: LD_INT 4
6330: PUSH
6331: LD_INT 0
6333: PUSH
6334: LD_INT 0
6336: PUSH
6337: EMPTY
6338: LIST
6339: LIST
6340: LIST
6341: LIST
6342: LIST
6343: LIST
6344: PUSH
6345: LD_INT 26
6347: PUSH
6348: LD_INT 137
6350: PUSH
6351: LD_INT 111
6353: PUSH
6354: LD_INT 0
6356: PUSH
6357: LD_INT 0
6359: PUSH
6360: LD_INT 0
6362: PUSH
6363: EMPTY
6364: LIST
6365: LIST
6366: LIST
6367: LIST
6368: LIST
6369: LIST
6370: PUSH
6371: LD_INT 8
6373: PUSH
6374: LD_INT 141
6376: PUSH
6377: LD_INT 117
6379: PUSH
6380: LD_INT 1
6382: PUSH
6383: LD_INT 13
6385: PUSH
6386: LD_INT 11
6388: PUSH
6389: EMPTY
6390: LIST
6391: LIST
6392: LIST
6393: LIST
6394: LIST
6395: LIST
6396: PUSH
6397: LD_INT 30
6399: PUSH
6400: LD_INT 140
6402: PUSH
6403: LD_INT 128
6405: PUSH
6406: LD_INT 1
6408: PUSH
6409: LD_INT 0
6411: PUSH
6412: LD_INT 0
6414: PUSH
6415: EMPTY
6416: LIST
6417: LIST
6418: LIST
6419: LIST
6420: LIST
6421: LIST
6422: PUSH
6423: LD_INT 5
6425: PUSH
6426: LD_INT 146
6428: PUSH
6429: LD_INT 96
6431: PUSH
6432: LD_INT 3
6434: PUSH
6435: LD_INT 0
6437: PUSH
6438: LD_INT 0
6440: PUSH
6441: EMPTY
6442: LIST
6443: LIST
6444: LIST
6445: LIST
6446: LIST
6447: LIST
6448: PUSH
6449: LD_INT 32
6451: PUSH
6452: LD_INT 150
6454: PUSH
6455: LD_INT 98
6457: PUSH
6458: LD_INT 3
6460: PUSH
6461: LD_INT 0
6463: PUSH
6464: LD_INT 0
6466: PUSH
6467: EMPTY
6468: LIST
6469: LIST
6470: LIST
6471: LIST
6472: LIST
6473: LIST
6474: PUSH
6475: LD_INT 32
6477: PUSH
6478: LD_INT 142
6480: PUSH
6481: LD_INT 95
6483: PUSH
6484: LD_INT 3
6486: PUSH
6487: LD_INT 0
6489: PUSH
6490: LD_INT 0
6492: PUSH
6493: EMPTY
6494: LIST
6495: LIST
6496: LIST
6497: LIST
6498: LIST
6499: LIST
6500: PUSH
6501: LD_INT 32
6503: PUSH
6504: LD_INT 159
6506: PUSH
6507: LD_INT 104
6509: PUSH
6510: LD_INT 3
6512: PUSH
6513: LD_INT 0
6515: PUSH
6516: LD_INT 0
6518: PUSH
6519: EMPTY
6520: LIST
6521: LIST
6522: LIST
6523: LIST
6524: LIST
6525: LIST
6526: PUSH
6527: LD_INT 32
6529: PUSH
6530: LD_INT 133
6532: PUSH
6533: LD_INT 95
6535: PUSH
6536: LD_INT 3
6538: PUSH
6539: LD_INT 0
6541: PUSH
6542: LD_INT 0
6544: PUSH
6545: EMPTY
6546: LIST
6547: LIST
6548: LIST
6549: LIST
6550: LIST
6551: LIST
6552: PUSH
6553: LD_INT 32
6555: PUSH
6556: LD_INT 131
6558: PUSH
6559: LD_INT 102
6561: PUSH
6562: LD_INT 2
6564: PUSH
6565: LD_INT 0
6567: PUSH
6568: LD_INT 0
6570: PUSH
6571: EMPTY
6572: LIST
6573: LIST
6574: LIST
6575: LIST
6576: LIST
6577: LIST
6578: PUSH
6579: LD_INT 32
6581: PUSH
6582: LD_INT 164
6584: PUSH
6585: LD_INT 144
6587: PUSH
6588: LD_INT 0
6590: PUSH
6591: LD_INT 0
6593: PUSH
6594: LD_INT 0
6596: PUSH
6597: EMPTY
6598: LIST
6599: LIST
6600: LIST
6601: LIST
6602: LIST
6603: LIST
6604: PUSH
6605: LD_INT 32
6607: PUSH
6608: LD_INT 146
6610: PUSH
6611: LD_INT 139
6613: PUSH
6614: LD_INT 0
6616: PUSH
6617: LD_INT 0
6619: PUSH
6620: LD_INT 0
6622: PUSH
6623: EMPTY
6624: LIST
6625: LIST
6626: LIST
6627: LIST
6628: LIST
6629: LIST
6630: PUSH
6631: LD_INT 26
6633: PUSH
6634: LD_INT 143
6636: PUSH
6637: LD_INT 122
6639: PUSH
6640: LD_INT 4
6642: PUSH
6643: LD_INT 0
6645: PUSH
6646: LD_INT 0
6648: PUSH
6649: EMPTY
6650: LIST
6651: LIST
6652: LIST
6653: LIST
6654: LIST
6655: LIST
6656: PUSH
6657: LD_INT 26
6659: PUSH
6660: LD_INT 164
6662: PUSH
6663: LD_INT 116
6665: PUSH
6666: LD_INT 2
6668: PUSH
6669: LD_INT 0
6671: PUSH
6672: LD_INT 0
6674: PUSH
6675: EMPTY
6676: LIST
6677: LIST
6678: LIST
6679: LIST
6680: LIST
6681: LIST
6682: PUSH
6683: EMPTY
6684: LIST
6685: LIST
6686: LIST
6687: LIST
6688: LIST
6689: LIST
6690: LIST
6691: LIST
6692: LIST
6693: LIST
6694: LIST
6695: LIST
6696: LIST
6697: LIST
6698: LIST
6699: LIST
6700: LIST
6701: LIST
6702: LIST
6703: LIST
6704: LIST
6705: LIST
6706: LIST
6707: LIST
6708: LIST
6709: ST_TO_ADDR
// for i in tmp do
6710: LD_ADDR_VAR 0 2
6714: PUSH
6715: LD_VAR 0 5
6719: PUSH
6720: FOR_IN
6721: IFFALSE 6952
// begin uc_side := side ;
6723: LD_ADDR_OWVAR 20
6727: PUSH
6728: LD_VAR 0 8
6732: ST_TO_ADDR
// uc_nation := nation_arabian ;
6733: LD_ADDR_OWVAR 21
6737: PUSH
6738: LD_INT 2
6740: ST_TO_ADDR
// bc_type := i [ 1 ] ;
6741: LD_ADDR_OWVAR 42
6745: PUSH
6746: LD_VAR 0 2
6750: PUSH
6751: LD_INT 1
6753: ARRAY
6754: ST_TO_ADDR
// bc_level := rand ( 5 , 6 ) ;
6755: LD_ADDR_OWVAR 43
6759: PUSH
6760: LD_INT 5
6762: PPUSH
6763: LD_INT 6
6765: PPUSH
6766: CALL_OW 12
6770: ST_TO_ADDR
// bc_kind1 := i [ 5 ] ;
6771: LD_ADDR_OWVAR 44
6775: PUSH
6776: LD_VAR 0 2
6780: PUSH
6781: LD_INT 5
6783: ARRAY
6784: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
6785: LD_ADDR_OWVAR 45
6789: PUSH
6790: LD_VAR 0 2
6794: PUSH
6795: LD_INT 6
6797: ARRAY
6798: ST_TO_ADDR
// sr := 0 ;
6799: LD_ADDR_VAR 0 9
6803: PUSH
6804: LD_INT 0
6806: ST_TO_ADDR
// if i [ 1 ] = b_oil_mine then
6807: LD_VAR 0 2
6811: PUSH
6812: LD_INT 1
6814: ARRAY
6815: PUSH
6816: LD_INT 29
6818: EQUAL
6819: IFFALSE 6831
// sr := mat_oil else
6821: LD_ADDR_VAR 0 9
6825: PUSH
6826: LD_INT 2
6828: ST_TO_ADDR
6829: GO 6853
// if i [ 1 ] = b_siberite_mine then
6831: LD_VAR 0 2
6835: PUSH
6836: LD_INT 1
6838: ARRAY
6839: PUSH
6840: LD_INT 30
6842: EQUAL
6843: IFFALSE 6853
// sr := mat_siberit ;
6845: LD_ADDR_VAR 0 9
6849: PUSH
6850: LD_INT 3
6852: ST_TO_ADDR
// if sr then
6853: LD_VAR 0 9
6857: IFFALSE 6913
// begin CreateDepositXY ( i [ 2 ] , i [ 3 ] , sr ) ;
6859: LD_VAR 0 2
6863: PUSH
6864: LD_INT 2
6866: ARRAY
6867: PPUSH
6868: LD_VAR 0 2
6872: PUSH
6873: LD_INT 3
6875: ARRAY
6876: PPUSH
6877: LD_VAR 0 9
6881: PPUSH
6882: CALL_OW 62
// SetResourceVisibility ( i [ 2 ] , i [ 3 ] , side ) ;
6886: LD_VAR 0 2
6890: PUSH
6891: LD_INT 2
6893: ARRAY
6894: PPUSH
6895: LD_VAR 0 2
6899: PUSH
6900: LD_INT 3
6902: ARRAY
6903: PPUSH
6904: LD_VAR 0 8
6908: PPUSH
6909: CALL_OW 441
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
6913: LD_ADDR_VAR 0 3
6917: PUSH
6918: LD_VAR 0 2
6922: PUSH
6923: LD_INT 2
6925: ARRAY
6926: PPUSH
6927: LD_VAR 0 2
6931: PUSH
6932: LD_INT 3
6934: ARRAY
6935: PPUSH
6936: LD_VAR 0 2
6940: PUSH
6941: LD_INT 4
6943: ARRAY
6944: PPUSH
6945: CALL_OW 47
6949: ST_TO_ADDR
// end ;
6950: GO 6720
6952: POP
6953: POP
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
6954: LD_ADDR_VAR 0 10
6958: PUSH
6959: LD_INT 22
6961: PUSH
6962: LD_VAR 0 8
6966: PUSH
6967: EMPTY
6968: LIST
6969: LIST
6970: PUSH
6971: LD_INT 30
6973: PUSH
6974: LD_INT 1
6976: PUSH
6977: EMPTY
6978: LIST
6979: LIST
6980: PUSH
6981: EMPTY
6982: LIST
6983: LIST
6984: PPUSH
6985: CALL_OW 69
6989: ST_TO_ADDR
// if not depot then
6990: LD_VAR 0 10
6994: NOT
6995: IFFALSE 6999
// exit ;
6997: GO 7245
// base := PrepareBase ( depot [ 1 ] , legBase , 0 , [ 7 , 8 , 10 ] [ Difficulty ] , [ 3000 , 300 , 100 ] , [ 14 , 6 , 6 , 5 ] ) ;
6999: LD_ADDR_VAR 0 11
7003: PUSH
7004: LD_VAR 0 10
7008: PUSH
7009: LD_INT 1
7011: ARRAY
7012: PPUSH
7013: LD_INT 6
7015: PPUSH
7016: LD_INT 0
7018: PPUSH
7019: LD_INT 7
7021: PUSH
7022: LD_INT 8
7024: PUSH
7025: LD_INT 10
7027: PUSH
7028: EMPTY
7029: LIST
7030: LIST
7031: LIST
7032: PUSH
7033: LD_OWVAR 67
7037: ARRAY
7038: PPUSH
7039: LD_INT 3000
7041: PUSH
7042: LD_INT 300
7044: PUSH
7045: LD_INT 100
7047: PUSH
7048: EMPTY
7049: LIST
7050: LIST
7051: LIST
7052: PPUSH
7053: LD_INT 14
7055: PUSH
7056: LD_INT 6
7058: PUSH
7059: LD_INT 6
7061: PUSH
7062: LD_INT 5
7064: PUSH
7065: EMPTY
7066: LIST
7067: LIST
7068: LIST
7069: LIST
7070: PPUSH
7071: CALL 29999 0 6
7075: ST_TO_ADDR
// if not base then
7076: LD_VAR 0 11
7080: NOT
7081: IFFALSE 7085
// exit ;
7083: GO 7245
// if Difficulty > 1 then
7085: LD_OWVAR 67
7089: PUSH
7090: LD_INT 1
7092: GREATER
7093: IFFALSE 7166
// begin InitHc ;
7095: CALL_OW 19
// PrepareHuman ( sex_male , class_sniper , [ 5 , 8 ] [ Difficulty - 1 ] ) ;
7099: LD_INT 1
7101: PPUSH
7102: LD_INT 5
7104: PPUSH
7105: LD_INT 5
7107: PUSH
7108: LD_INT 8
7110: PUSH
7111: EMPTY
7112: LIST
7113: LIST
7114: PUSH
7115: LD_OWVAR 67
7119: PUSH
7120: LD_INT 1
7122: MINUS
7123: ARRAY
7124: PPUSH
7125: CALL_OW 380
// for i = 1 to Difficulty do
7129: LD_ADDR_VAR 0 2
7133: PUSH
7134: DOUBLE
7135: LD_INT 1
7137: DEC
7138: ST_TO_ADDR
7139: LD_OWVAR 67
7143: PUSH
7144: FOR_TO
7145: IFFALSE 7164
// PlaceUnitArea ( CreateHuman , sniperGuardArea , false ) ;
7147: CALL_OW 44
7151: PPUSH
7152: LD_INT 24
7154: PPUSH
7155: LD_INT 0
7157: PPUSH
7158: CALL_OW 49
7162: GO 7144
7164: POP
7165: POP
// end ; mc_bases := Replace ( mc_bases , mc_leg , base ) ;
7166: LD_ADDR_EXP 44
7170: PUSH
7171: LD_EXP 44
7175: PPUSH
7176: LD_EXP 6
7180: PPUSH
7181: LD_VAR 0 11
7185: PPUSH
7186: CALL_OW 1
7190: ST_TO_ADDR
// hc_gallery := ru ;
7191: LD_ADDR_OWVAR 33
7195: PUSH
7196: LD_STRING ru
7198: ST_TO_ADDR
// hc_face_number := 44 ;
7199: LD_ADDR_OWVAR 34
7203: PUSH
7204: LD_INT 44
7206: ST_TO_ADDR
// hc_name := Robert Farmer ;
7207: LD_ADDR_OWVAR 26
7211: PUSH
7212: LD_STRING Robert Farmer
7214: ST_TO_ADDR
// hc_sex := sex_male ;
7215: LD_ADDR_OWVAR 27
7219: PUSH
7220: LD_INT 1
7222: ST_TO_ADDR
// hc_class := 1 ;
7223: LD_ADDR_OWVAR 28
7227: PUSH
7228: LD_INT 1
7230: ST_TO_ADDR
// Farmer := CreateHuman ;
7231: LD_ADDR_EXP 13
7235: PUSH
7236: CALL_OW 44
7240: ST_TO_ADDR
// InitHc ;
7241: CALL_OW 19
// end ;
7245: LD_VAR 0 1
7249: RET
// export function PrepareAmericans ; var i , b , tmp , side , sr , base , depot ; begin
7250: LD_INT 0
7252: PPUSH
7253: PPUSH
7254: PPUSH
7255: PPUSH
7256: PPUSH
7257: PPUSH
7258: PPUSH
7259: PPUSH
// PrepareNature ( 0 , 0 , 4 , 0 , 0 , 0 , 0 , amerApe , 0 ) ;
7260: LD_INT 0
7262: PPUSH
7263: LD_INT 0
7265: PPUSH
7266: LD_INT 4
7268: PPUSH
7269: LD_INT 0
7271: PPUSH
7272: LD_INT 0
7274: PPUSH
7275: LD_INT 0
7277: PPUSH
7278: LD_INT 0
7280: PPUSH
7281: LD_INT 10
7283: PPUSH
7284: LD_INT 0
7286: PPUSH
7287: CALL 54381 0 9
// side := 4 ;
7291: LD_ADDR_VAR 0 5
7295: PUSH
7296: LD_INT 4
7298: ST_TO_ADDR
// tmp := [ [ 1 , 144 , 18 , 4 , 0 , 0 ] , [ 3 , 137 , 8 , 4 , 0 , 0 ] , [ 22 , 141 , 8 , 4 , 0 , 0 ] , [ 25 , 137 , 5 , 3 , 0 , 0 ] , [ 18 , 137 , 12 , 0 , 0 , 0 ] , [ 17 , 133 , 4 , 2 , 0 , 0 ] , [ 16 , 140 , 11 , 5 , 0 , 0 ] , [ 8 , 149 , 26 , 4 , 10 , 15 ] , [ 8 , 142 , 26 , 1 , 11 , 12 ] , [ 27 , 153 , 32 , 5 , 0 , 0 ] , [ 27 , 145 , 32 , 3 , 0 , 0 ] , [ 27 , 138 , 2 , 4 , 0 , 0 ] , [ 27 , 144 , 13 , 0 , 0 , 0 ] , [ 26 , 124 , 2 , 4 , 0 , 0 ] , [ 26 , 121 , 2 , 2 , 0 , 0 ] , [ 26 , 118 , 2 , 1 , 0 , 0 ] , [ 29 , 159 , 47 , 2 , 0 , 0 ] , [ 32 , 146 , 41 , 0 , 0 , 0 ] , [ 33 , 136 , 37 , 0 , 0 , 0 ] , [ 33 , 132 , 34 , 0 , 0 , 0 ] , [ 36 , 124 , 7 , 1 , 0 , 0 ] , [ 5 , 124 , 19 , 0 , 0 , 0 ] , [ 32 , 127 , 23 , 0 , 0 , 0 ] ] ;
7299: LD_ADDR_VAR 0 4
7303: PUSH
7304: LD_INT 1
7306: PUSH
7307: LD_INT 144
7309: PUSH
7310: LD_INT 18
7312: PUSH
7313: LD_INT 4
7315: PUSH
7316: LD_INT 0
7318: PUSH
7319: LD_INT 0
7321: PUSH
7322: EMPTY
7323: LIST
7324: LIST
7325: LIST
7326: LIST
7327: LIST
7328: LIST
7329: PUSH
7330: LD_INT 3
7332: PUSH
7333: LD_INT 137
7335: PUSH
7336: LD_INT 8
7338: PUSH
7339: LD_INT 4
7341: PUSH
7342: LD_INT 0
7344: PUSH
7345: LD_INT 0
7347: PUSH
7348: EMPTY
7349: LIST
7350: LIST
7351: LIST
7352: LIST
7353: LIST
7354: LIST
7355: PUSH
7356: LD_INT 22
7358: PUSH
7359: LD_INT 141
7361: PUSH
7362: LD_INT 8
7364: PUSH
7365: LD_INT 4
7367: PUSH
7368: LD_INT 0
7370: PUSH
7371: LD_INT 0
7373: PUSH
7374: EMPTY
7375: LIST
7376: LIST
7377: LIST
7378: LIST
7379: LIST
7380: LIST
7381: PUSH
7382: LD_INT 25
7384: PUSH
7385: LD_INT 137
7387: PUSH
7388: LD_INT 5
7390: PUSH
7391: LD_INT 3
7393: PUSH
7394: LD_INT 0
7396: PUSH
7397: LD_INT 0
7399: PUSH
7400: EMPTY
7401: LIST
7402: LIST
7403: LIST
7404: LIST
7405: LIST
7406: LIST
7407: PUSH
7408: LD_INT 18
7410: PUSH
7411: LD_INT 137
7413: PUSH
7414: LD_INT 12
7416: PUSH
7417: LD_INT 0
7419: PUSH
7420: LD_INT 0
7422: PUSH
7423: LD_INT 0
7425: PUSH
7426: EMPTY
7427: LIST
7428: LIST
7429: LIST
7430: LIST
7431: LIST
7432: LIST
7433: PUSH
7434: LD_INT 17
7436: PUSH
7437: LD_INT 133
7439: PUSH
7440: LD_INT 4
7442: PUSH
7443: LD_INT 2
7445: PUSH
7446: LD_INT 0
7448: PUSH
7449: LD_INT 0
7451: PUSH
7452: EMPTY
7453: LIST
7454: LIST
7455: LIST
7456: LIST
7457: LIST
7458: LIST
7459: PUSH
7460: LD_INT 16
7462: PUSH
7463: LD_INT 140
7465: PUSH
7466: LD_INT 11
7468: PUSH
7469: LD_INT 5
7471: PUSH
7472: LD_INT 0
7474: PUSH
7475: LD_INT 0
7477: PUSH
7478: EMPTY
7479: LIST
7480: LIST
7481: LIST
7482: LIST
7483: LIST
7484: LIST
7485: PUSH
7486: LD_INT 8
7488: PUSH
7489: LD_INT 149
7491: PUSH
7492: LD_INT 26
7494: PUSH
7495: LD_INT 4
7497: PUSH
7498: LD_INT 10
7500: PUSH
7501: LD_INT 15
7503: PUSH
7504: EMPTY
7505: LIST
7506: LIST
7507: LIST
7508: LIST
7509: LIST
7510: LIST
7511: PUSH
7512: LD_INT 8
7514: PUSH
7515: LD_INT 142
7517: PUSH
7518: LD_INT 26
7520: PUSH
7521: LD_INT 1
7523: PUSH
7524: LD_INT 11
7526: PUSH
7527: LD_INT 12
7529: PUSH
7530: EMPTY
7531: LIST
7532: LIST
7533: LIST
7534: LIST
7535: LIST
7536: LIST
7537: PUSH
7538: LD_INT 27
7540: PUSH
7541: LD_INT 153
7543: PUSH
7544: LD_INT 32
7546: PUSH
7547: LD_INT 5
7549: PUSH
7550: LD_INT 0
7552: PUSH
7553: LD_INT 0
7555: PUSH
7556: EMPTY
7557: LIST
7558: LIST
7559: LIST
7560: LIST
7561: LIST
7562: LIST
7563: PUSH
7564: LD_INT 27
7566: PUSH
7567: LD_INT 145
7569: PUSH
7570: LD_INT 32
7572: PUSH
7573: LD_INT 3
7575: PUSH
7576: LD_INT 0
7578: PUSH
7579: LD_INT 0
7581: PUSH
7582: EMPTY
7583: LIST
7584: LIST
7585: LIST
7586: LIST
7587: LIST
7588: LIST
7589: PUSH
7590: LD_INT 27
7592: PUSH
7593: LD_INT 138
7595: PUSH
7596: LD_INT 2
7598: PUSH
7599: LD_INT 4
7601: PUSH
7602: LD_INT 0
7604: PUSH
7605: LD_INT 0
7607: PUSH
7608: EMPTY
7609: LIST
7610: LIST
7611: LIST
7612: LIST
7613: LIST
7614: LIST
7615: PUSH
7616: LD_INT 27
7618: PUSH
7619: LD_INT 144
7621: PUSH
7622: LD_INT 13
7624: PUSH
7625: LD_INT 0
7627: PUSH
7628: LD_INT 0
7630: PUSH
7631: LD_INT 0
7633: PUSH
7634: EMPTY
7635: LIST
7636: LIST
7637: LIST
7638: LIST
7639: LIST
7640: LIST
7641: PUSH
7642: LD_INT 26
7644: PUSH
7645: LD_INT 124
7647: PUSH
7648: LD_INT 2
7650: PUSH
7651: LD_INT 4
7653: PUSH
7654: LD_INT 0
7656: PUSH
7657: LD_INT 0
7659: PUSH
7660: EMPTY
7661: LIST
7662: LIST
7663: LIST
7664: LIST
7665: LIST
7666: LIST
7667: PUSH
7668: LD_INT 26
7670: PUSH
7671: LD_INT 121
7673: PUSH
7674: LD_INT 2
7676: PUSH
7677: LD_INT 2
7679: PUSH
7680: LD_INT 0
7682: PUSH
7683: LD_INT 0
7685: PUSH
7686: EMPTY
7687: LIST
7688: LIST
7689: LIST
7690: LIST
7691: LIST
7692: LIST
7693: PUSH
7694: LD_INT 26
7696: PUSH
7697: LD_INT 118
7699: PUSH
7700: LD_INT 2
7702: PUSH
7703: LD_INT 1
7705: PUSH
7706: LD_INT 0
7708: PUSH
7709: LD_INT 0
7711: PUSH
7712: EMPTY
7713: LIST
7714: LIST
7715: LIST
7716: LIST
7717: LIST
7718: LIST
7719: PUSH
7720: LD_INT 29
7722: PUSH
7723: LD_INT 159
7725: PUSH
7726: LD_INT 47
7728: PUSH
7729: LD_INT 2
7731: PUSH
7732: LD_INT 0
7734: PUSH
7735: LD_INT 0
7737: PUSH
7738: EMPTY
7739: LIST
7740: LIST
7741: LIST
7742: LIST
7743: LIST
7744: LIST
7745: PUSH
7746: LD_INT 32
7748: PUSH
7749: LD_INT 146
7751: PUSH
7752: LD_INT 41
7754: PUSH
7755: LD_INT 0
7757: PUSH
7758: LD_INT 0
7760: PUSH
7761: LD_INT 0
7763: PUSH
7764: EMPTY
7765: LIST
7766: LIST
7767: LIST
7768: LIST
7769: LIST
7770: LIST
7771: PUSH
7772: LD_INT 33
7774: PUSH
7775: LD_INT 136
7777: PUSH
7778: LD_INT 37
7780: PUSH
7781: LD_INT 0
7783: PUSH
7784: LD_INT 0
7786: PUSH
7787: LD_INT 0
7789: PUSH
7790: EMPTY
7791: LIST
7792: LIST
7793: LIST
7794: LIST
7795: LIST
7796: LIST
7797: PUSH
7798: LD_INT 33
7800: PUSH
7801: LD_INT 132
7803: PUSH
7804: LD_INT 34
7806: PUSH
7807: LD_INT 0
7809: PUSH
7810: LD_INT 0
7812: PUSH
7813: LD_INT 0
7815: PUSH
7816: EMPTY
7817: LIST
7818: LIST
7819: LIST
7820: LIST
7821: LIST
7822: LIST
7823: PUSH
7824: LD_INT 36
7826: PUSH
7827: LD_INT 124
7829: PUSH
7830: LD_INT 7
7832: PUSH
7833: LD_INT 1
7835: PUSH
7836: LD_INT 0
7838: PUSH
7839: LD_INT 0
7841: PUSH
7842: EMPTY
7843: LIST
7844: LIST
7845: LIST
7846: LIST
7847: LIST
7848: LIST
7849: PUSH
7850: LD_INT 5
7852: PUSH
7853: LD_INT 124
7855: PUSH
7856: LD_INT 19
7858: PUSH
7859: LD_INT 0
7861: PUSH
7862: LD_INT 0
7864: PUSH
7865: LD_INT 0
7867: PUSH
7868: EMPTY
7869: LIST
7870: LIST
7871: LIST
7872: LIST
7873: LIST
7874: LIST
7875: PUSH
7876: LD_INT 32
7878: PUSH
7879: LD_INT 127
7881: PUSH
7882: LD_INT 23
7884: PUSH
7885: LD_INT 0
7887: PUSH
7888: LD_INT 0
7890: PUSH
7891: LD_INT 0
7893: PUSH
7894: EMPTY
7895: LIST
7896: LIST
7897: LIST
7898: LIST
7899: LIST
7900: LIST
7901: PUSH
7902: EMPTY
7903: LIST
7904: LIST
7905: LIST
7906: LIST
7907: LIST
7908: LIST
7909: LIST
7910: LIST
7911: LIST
7912: LIST
7913: LIST
7914: LIST
7915: LIST
7916: LIST
7917: LIST
7918: LIST
7919: LIST
7920: LIST
7921: LIST
7922: LIST
7923: LIST
7924: LIST
7925: LIST
7926: ST_TO_ADDR
// for i in tmp do
7927: LD_ADDR_VAR 0 2
7931: PUSH
7932: LD_VAR 0 4
7936: PUSH
7937: FOR_IN
7938: IFFALSE 8169
// begin uc_side := side ;
7940: LD_ADDR_OWVAR 20
7944: PUSH
7945: LD_VAR 0 5
7949: ST_TO_ADDR
// uc_nation := nation_american ;
7950: LD_ADDR_OWVAR 21
7954: PUSH
7955: LD_INT 1
7957: ST_TO_ADDR
// bc_type := i [ 1 ] ;
7958: LD_ADDR_OWVAR 42
7962: PUSH
7963: LD_VAR 0 2
7967: PUSH
7968: LD_INT 1
7970: ARRAY
7971: ST_TO_ADDR
// bc_level := rand ( 5 , 6 ) ;
7972: LD_ADDR_OWVAR 43
7976: PUSH
7977: LD_INT 5
7979: PPUSH
7980: LD_INT 6
7982: PPUSH
7983: CALL_OW 12
7987: ST_TO_ADDR
// bc_kind1 := i [ 5 ] ;
7988: LD_ADDR_OWVAR 44
7992: PUSH
7993: LD_VAR 0 2
7997: PUSH
7998: LD_INT 5
8000: ARRAY
8001: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
8002: LD_ADDR_OWVAR 45
8006: PUSH
8007: LD_VAR 0 2
8011: PUSH
8012: LD_INT 6
8014: ARRAY
8015: ST_TO_ADDR
// sr := 0 ;
8016: LD_ADDR_VAR 0 6
8020: PUSH
8021: LD_INT 0
8023: ST_TO_ADDR
// if i [ 1 ] = b_oil_mine then
8024: LD_VAR 0 2
8028: PUSH
8029: LD_INT 1
8031: ARRAY
8032: PUSH
8033: LD_INT 29
8035: EQUAL
8036: IFFALSE 8048
// sr := mat_oil else
8038: LD_ADDR_VAR 0 6
8042: PUSH
8043: LD_INT 2
8045: ST_TO_ADDR
8046: GO 8070
// if i [ 1 ] = b_siberite_mine then
8048: LD_VAR 0 2
8052: PUSH
8053: LD_INT 1
8055: ARRAY
8056: PUSH
8057: LD_INT 30
8059: EQUAL
8060: IFFALSE 8070
// sr := mat_siberit ;
8062: LD_ADDR_VAR 0 6
8066: PUSH
8067: LD_INT 3
8069: ST_TO_ADDR
// if sr then
8070: LD_VAR 0 6
8074: IFFALSE 8130
// begin CreateDepositXY ( i [ 2 ] , i [ 3 ] , sr ) ;
8076: LD_VAR 0 2
8080: PUSH
8081: LD_INT 2
8083: ARRAY
8084: PPUSH
8085: LD_VAR 0 2
8089: PUSH
8090: LD_INT 3
8092: ARRAY
8093: PPUSH
8094: LD_VAR 0 6
8098: PPUSH
8099: CALL_OW 62
// SetResourceVisibility ( i [ 2 ] , i [ 3 ] , side ) ;
8103: LD_VAR 0 2
8107: PUSH
8108: LD_INT 2
8110: ARRAY
8111: PPUSH
8112: LD_VAR 0 2
8116: PUSH
8117: LD_INT 3
8119: ARRAY
8120: PPUSH
8121: LD_VAR 0 5
8125: PPUSH
8126: CALL_OW 441
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
8130: LD_ADDR_VAR 0 3
8134: PUSH
8135: LD_VAR 0 2
8139: PUSH
8140: LD_INT 2
8142: ARRAY
8143: PPUSH
8144: LD_VAR 0 2
8148: PUSH
8149: LD_INT 3
8151: ARRAY
8152: PPUSH
8153: LD_VAR 0 2
8157: PUSH
8158: LD_INT 4
8160: ARRAY
8161: PPUSH
8162: CALL_OW 47
8166: ST_TO_ADDR
// end ;
8167: GO 7937
8169: POP
8170: POP
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
8171: LD_ADDR_VAR 0 8
8175: PUSH
8176: LD_INT 22
8178: PUSH
8179: LD_VAR 0 5
8183: PUSH
8184: EMPTY
8185: LIST
8186: LIST
8187: PUSH
8188: LD_INT 30
8190: PUSH
8191: LD_INT 1
8193: PUSH
8194: EMPTY
8195: LIST
8196: LIST
8197: PUSH
8198: EMPTY
8199: LIST
8200: LIST
8201: PPUSH
8202: CALL_OW 69
8206: ST_TO_ADDR
// if not depot then
8207: LD_VAR 0 8
8211: NOT
8212: IFFALSE 8216
// exit ;
8214: GO 8488
// base := PrepareBase ( depot [ 1 ] , amerBase , theta3 , [ 8 , 7 , 6 ] [ Difficulty ] , [ [ 2500 , 2000 , 1750 ] [ Difficulty ] , [ 300 , 250 , 200 ] [ Difficulty ] , [ 80 , 60 , 50 ] [ Difficulty ] ] , [ 7 , 6 , 5 , 5 ] ) ;
8216: LD_ADDR_VAR 0 7
8220: PUSH
8221: LD_VAR 0 8
8225: PUSH
8226: LD_INT 1
8228: ARRAY
8229: PPUSH
8230: LD_INT 3
8232: PPUSH
8233: LD_STRING theta3
8235: PPUSH
8236: LD_INT 8
8238: PUSH
8239: LD_INT 7
8241: PUSH
8242: LD_INT 6
8244: PUSH
8245: EMPTY
8246: LIST
8247: LIST
8248: LIST
8249: PUSH
8250: LD_OWVAR 67
8254: ARRAY
8255: PPUSH
8256: LD_INT 2500
8258: PUSH
8259: LD_INT 2000
8261: PUSH
8262: LD_INT 1750
8264: PUSH
8265: EMPTY
8266: LIST
8267: LIST
8268: LIST
8269: PUSH
8270: LD_OWVAR 67
8274: ARRAY
8275: PUSH
8276: LD_INT 300
8278: PUSH
8279: LD_INT 250
8281: PUSH
8282: LD_INT 200
8284: PUSH
8285: EMPTY
8286: LIST
8287: LIST
8288: LIST
8289: PUSH
8290: LD_OWVAR 67
8294: ARRAY
8295: PUSH
8296: LD_INT 80
8298: PUSH
8299: LD_INT 60
8301: PUSH
8302: LD_INT 50
8304: PUSH
8305: EMPTY
8306: LIST
8307: LIST
8308: LIST
8309: PUSH
8310: LD_OWVAR 67
8314: ARRAY
8315: PUSH
8316: EMPTY
8317: LIST
8318: LIST
8319: LIST
8320: PPUSH
8321: LD_INT 7
8323: PUSH
8324: LD_INT 6
8326: PUSH
8327: LD_INT 5
8329: PUSH
8330: LD_INT 5
8332: PUSH
8333: EMPTY
8334: LIST
8335: LIST
8336: LIST
8337: LIST
8338: PPUSH
8339: CALL 29999 0 6
8343: ST_TO_ADDR
// if not base then
8344: LD_VAR 0 7
8348: NOT
8349: IFFALSE 8353
// exit ;
8351: GO 8488
// mc_bases := Replace ( mc_bases , mc_amer , base ) ;
8353: LD_ADDR_EXP 44
8357: PUSH
8358: LD_EXP 44
8362: PPUSH
8363: LD_EXP 5
8367: PPUSH
8368: LD_VAR 0 7
8372: PPUSH
8373: CALL_OW 1
8377: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 7 ) ;
8378: LD_INT 1
8380: PPUSH
8381: LD_INT 1
8383: PPUSH
8384: LD_INT 7
8386: PPUSH
8387: CALL_OW 380
// allyCommander := CreateHuman ;
8391: LD_ADDR_EXP 11
8395: PUSH
8396: CALL_OW 44
8400: ST_TO_ADDR
// PlaceUnitXY ( allyCommander , 139 , 15 , false ) ;
8401: LD_EXP 11
8405: PPUSH
8406: LD_INT 139
8408: PPUSH
8409: LD_INT 15
8411: PPUSH
8412: LD_INT 0
8414: PPUSH
8415: CALL_OW 48
// ComTurnXY ( allyCommander , 137 , 15 ) ;
8419: LD_EXP 11
8423: PPUSH
8424: LD_INT 137
8426: PPUSH
8427: LD_INT 15
8429: PPUSH
8430: CALL_OW 118
// hc_gallery := us ;
8434: LD_ADDR_OWVAR 33
8438: PUSH
8439: LD_STRING us
8441: ST_TO_ADDR
// hc_face_number := 7 ;
8442: LD_ADDR_OWVAR 34
8446: PUSH
8447: LD_INT 7
8449: ST_TO_ADDR
// hc_name := Arthur Powell ;
8450: LD_ADDR_OWVAR 26
8454: PUSH
8455: LD_STRING Arthur Powell
8457: ST_TO_ADDR
// hc_sex := sex_male ;
8458: LD_ADDR_OWVAR 27
8462: PUSH
8463: LD_INT 1
8465: ST_TO_ADDR
// hc_class := 1 ;
8466: LD_ADDR_OWVAR 28
8470: PUSH
8471: LD_INT 1
8473: ST_TO_ADDR
// Powell := CreateHuman ;
8474: LD_ADDR_EXP 12
8478: PUSH
8479: CALL_OW 44
8483: ST_TO_ADDR
// InitHc ;
8484: CALL_OW 19
// end ;
8488: LD_VAR 0 1
8492: RET
// export function PreparePlayer ; var i , side , techs , tanks , cl , chassis , engines , weapons ; begin
8493: LD_INT 0
8495: PPUSH
8496: PPUSH
8497: PPUSH
8498: PPUSH
8499: PPUSH
8500: PPUSH
8501: PPUSH
8502: PPUSH
8503: PPUSH
// side := 1 ;
8504: LD_ADDR_VAR 0 3
8508: PUSH
8509: LD_INT 1
8511: ST_TO_ADDR
// result := [ [ ] , [ ] ] ;
8512: LD_ADDR_VAR 0 1
8516: PUSH
8517: EMPTY
8518: PUSH
8519: EMPTY
8520: PUSH
8521: EMPTY
8522: LIST
8523: LIST
8524: ST_TO_ADDR
// uc_side := side ;
8525: LD_ADDR_OWVAR 20
8529: PUSH
8530: LD_VAR 0 3
8534: ST_TO_ADDR
// uc_nation := nation_american ;
8535: LD_ADDR_OWVAR 21
8539: PUSH
8540: LD_INT 1
8542: ST_TO_ADDR
// InitHc ;
8543: CALL_OW 19
// InitVc ;
8547: CALL_OW 20
// hc_importance := 0 ;
8551: LD_ADDR_OWVAR 32
8555: PUSH
8556: LD_INT 0
8558: ST_TO_ADDR
// chassis := [ us_medium_wheeled , us_medium_tracked , us_medium_tracked ] ;
8559: LD_ADDR_VAR 0 7
8563: PUSH
8564: LD_INT 2
8566: PUSH
8567: LD_INT 3
8569: PUSH
8570: LD_INT 3
8572: PUSH
8573: EMPTY
8574: LIST
8575: LIST
8576: LIST
8577: ST_TO_ADDR
// if commander = 2 then
8578: LD_EXP 25
8582: PUSH
8583: LD_INT 2
8585: EQUAL
8586: IFFALSE 8607
// chassis := [ us_medium_tracked , us_heavy_tracked , us_heavy_tracked ] ;
8588: LD_ADDR_VAR 0 7
8592: PUSH
8593: LD_INT 3
8595: PUSH
8596: LD_INT 4
8598: PUSH
8599: LD_INT 4
8601: PUSH
8602: EMPTY
8603: LIST
8604: LIST
8605: LIST
8606: ST_TO_ADDR
// if commander = 3 then
8607: LD_EXP 25
8611: PUSH
8612: LD_INT 3
8614: EQUAL
8615: IFFALSE 8636
// chassis := [ us_medium_wheeled , us_morphling , us_morphling ] ;
8617: LD_ADDR_VAR 0 7
8621: PUSH
8622: LD_INT 2
8624: PUSH
8625: LD_INT 5
8627: PUSH
8628: LD_INT 5
8630: PUSH
8631: EMPTY
8632: LIST
8633: LIST
8634: LIST
8635: ST_TO_ADDR
// engines := [ engine_solar , engine_solar , engine_combustion ] ;
8636: LD_ADDR_VAR 0 8
8640: PUSH
8641: LD_INT 2
8643: PUSH
8644: LD_INT 2
8646: PUSH
8647: LD_INT 1
8649: PUSH
8650: EMPTY
8651: LIST
8652: LIST
8653: LIST
8654: ST_TO_ADDR
// if commander = 2 then
8655: LD_EXP 25
8659: PUSH
8660: LD_INT 2
8662: EQUAL
8663: IFFALSE 8684
// engines := [ engine_combustion , engine_combustion , engine_siberite ] ;
8665: LD_ADDR_VAR 0 8
8669: PUSH
8670: LD_INT 1
8672: PUSH
8673: LD_INT 1
8675: PUSH
8676: LD_INT 3
8678: PUSH
8679: EMPTY
8680: LIST
8681: LIST
8682: LIST
8683: ST_TO_ADDR
// if commander = 3 then
8684: LD_EXP 25
8688: PUSH
8689: LD_INT 3
8691: EQUAL
8692: IFFALSE 8713
// engines := [ engine_siberite , engine_siberite , engine_combustion ] ;
8694: LD_ADDR_VAR 0 8
8698: PUSH
8699: LD_INT 3
8701: PUSH
8702: LD_INT 3
8704: PUSH
8705: LD_INT 1
8707: PUSH
8708: EMPTY
8709: LIST
8710: LIST
8711: LIST
8712: ST_TO_ADDR
// weapons := [ us_double_gun , us_light_gun , us_gatling_gun ] ;
8713: LD_ADDR_VAR 0 9
8717: PUSH
8718: LD_INT 5
8720: PUSH
8721: LD_INT 3
8723: PUSH
8724: LD_INT 4
8726: PUSH
8727: EMPTY
8728: LIST
8729: LIST
8730: LIST
8731: ST_TO_ADDR
// if commander = 2 then
8732: LD_EXP 25
8736: PUSH
8737: LD_INT 2
8739: EQUAL
8740: IFFALSE 8761
// weapons := [ us_rocket_launcher , us_double_gun , us_heavy_gun ] ;
8742: LD_ADDR_VAR 0 9
8746: PUSH
8747: LD_INT 7
8749: PUSH
8750: LD_INT 5
8752: PUSH
8753: LD_INT 6
8755: PUSH
8756: EMPTY
8757: LIST
8758: LIST
8759: LIST
8760: ST_TO_ADDR
// if commander = 3 then
8761: LD_EXP 25
8765: PUSH
8766: LD_INT 3
8768: EQUAL
8769: IFFALSE 8790
// weapons := [ us_laser , us_double_laser , us_rocket_launcher ] ;
8771: LD_ADDR_VAR 0 9
8775: PUSH
8776: LD_INT 9
8778: PUSH
8779: LD_INT 10
8781: PUSH
8782: LD_INT 7
8784: PUSH
8785: EMPTY
8786: LIST
8787: LIST
8788: LIST
8789: ST_TO_ADDR
// tanks := [ 5 , 5 , 4 ] [ Difficulty ] ;
8790: LD_ADDR_VAR 0 5
8794: PUSH
8795: LD_INT 5
8797: PUSH
8798: LD_INT 5
8800: PUSH
8801: LD_INT 4
8803: PUSH
8804: EMPTY
8805: LIST
8806: LIST
8807: LIST
8808: PUSH
8809: LD_OWVAR 67
8813: ARRAY
8814: ST_TO_ADDR
// if commander = 2 then
8815: LD_EXP 25
8819: PUSH
8820: LD_INT 2
8822: EQUAL
8823: IFFALSE 8839
// tanks := tanks + 3 ;
8825: LD_ADDR_VAR 0 5
8829: PUSH
8830: LD_VAR 0 5
8834: PUSH
8835: LD_INT 3
8837: PLUS
8838: ST_TO_ADDR
// for i = 1 to tanks do
8839: LD_ADDR_VAR 0 2
8843: PUSH
8844: DOUBLE
8845: LD_INT 1
8847: DEC
8848: ST_TO_ADDR
8849: LD_VAR 0 5
8853: PUSH
8854: FOR_TO
8855: IFFALSE 8965
// begin PrepareVehicle ( chassis [ i mod 3 + 1 ] , engines [ rand ( 1 , 3 ) ] , control_manual , weapons [ i mod 3 + 1 ] , rand ( 60 , 70 ) ) ;
8857: LD_VAR 0 7
8861: PUSH
8862: LD_VAR 0 2
8866: PUSH
8867: LD_INT 3
8869: MOD
8870: PUSH
8871: LD_INT 1
8873: PLUS
8874: ARRAY
8875: PPUSH
8876: LD_VAR 0 8
8880: PUSH
8881: LD_INT 1
8883: PPUSH
8884: LD_INT 3
8886: PPUSH
8887: CALL_OW 12
8891: ARRAY
8892: PPUSH
8893: LD_INT 1
8895: PPUSH
8896: LD_VAR 0 9
8900: PUSH
8901: LD_VAR 0 2
8905: PUSH
8906: LD_INT 3
8908: MOD
8909: PUSH
8910: LD_INT 1
8912: PLUS
8913: ARRAY
8914: PPUSH
8915: LD_INT 60
8917: PPUSH
8918: LD_INT 70
8920: PPUSH
8921: CALL_OW 12
8925: PPUSH
8926: CALL 26590 0 5
// result := Replace ( result , 1 , result [ 1 ] ^ CreateVehicle ) ;
8930: LD_ADDR_VAR 0 1
8934: PUSH
8935: LD_VAR 0 1
8939: PPUSH
8940: LD_INT 1
8942: PPUSH
8943: LD_VAR 0 1
8947: PUSH
8948: LD_INT 1
8950: ARRAY
8951: PUSH
8952: CALL_OW 45
8956: ADD
8957: PPUSH
8958: CALL_OW 1
8962: ST_TO_ADDR
// end ;
8963: GO 8854
8965: POP
8966: POP
// cl := 1 ;
8967: LD_ADDR_VAR 0 6
8971: PUSH
8972: LD_INT 1
8974: ST_TO_ADDR
// for i = 1 to 10 do
8975: LD_ADDR_VAR 0 2
8979: PUSH
8980: DOUBLE
8981: LD_INT 1
8983: DEC
8984: ST_TO_ADDR
8985: LD_INT 10
8987: PUSH
8988: FOR_TO
8989: IFFALSE 9104
// begin if i mod 4 = 0 then
8991: LD_VAR 0 2
8995: PUSH
8996: LD_INT 4
8998: MOD
8999: PUSH
9000: LD_INT 0
9002: EQUAL
9003: IFFALSE 9019
// cl := cl + 1 ;
9005: LD_ADDR_VAR 0 6
9009: PUSH
9010: LD_VAR 0 6
9014: PUSH
9015: LD_INT 1
9017: PLUS
9018: ST_TO_ADDR
// if cl = 2 then
9019: LD_VAR 0 6
9023: PUSH
9024: LD_INT 2
9026: EQUAL
9027: IFFALSE 9037
// cl := 3 ;
9029: LD_ADDR_VAR 0 6
9033: PUSH
9034: LD_INT 3
9036: ST_TO_ADDR
// PrepareHuman ( false , cl , [ 6 , 6 , 5 ] [ Difficulty ] ) ;
9037: LD_INT 0
9039: PPUSH
9040: LD_VAR 0 6
9044: PPUSH
9045: LD_INT 6
9047: PUSH
9048: LD_INT 6
9050: PUSH
9051: LD_INT 5
9053: PUSH
9054: EMPTY
9055: LIST
9056: LIST
9057: LIST
9058: PUSH
9059: LD_OWVAR 67
9063: ARRAY
9064: PPUSH
9065: CALL_OW 380
// result := Replace ( result , 2 , result [ 2 ] ^ CreateHuman ) ;
9069: LD_ADDR_VAR 0 1
9073: PUSH
9074: LD_VAR 0 1
9078: PPUSH
9079: LD_INT 2
9081: PPUSH
9082: LD_VAR 0 1
9086: PUSH
9087: LD_INT 2
9089: ARRAY
9090: PUSH
9091: CALL_OW 44
9095: ADD
9096: PPUSH
9097: CALL_OW 1
9101: ST_TO_ADDR
// end ;
9102: GO 8988
9104: POP
9105: POP
// if commander = 1 then
9106: LD_EXP 25
9110: PUSH
9111: LD_INT 1
9113: EQUAL
9114: IFFALSE 9182
// for i = 1 to 4 do
9116: LD_ADDR_VAR 0 2
9120: PUSH
9121: DOUBLE
9122: LD_INT 1
9124: DEC
9125: ST_TO_ADDR
9126: LD_INT 4
9128: PUSH
9129: FOR_TO
9130: IFFALSE 9180
// begin PrepareHuman ( false , class_soldier , 8 ) ;
9132: LD_INT 0
9134: PPUSH
9135: LD_INT 1
9137: PPUSH
9138: LD_INT 8
9140: PPUSH
9141: CALL_OW 380
// result := Replace ( result , 2 , result [ 2 ] ^ CreateHuman ) ;
9145: LD_ADDR_VAR 0 1
9149: PUSH
9150: LD_VAR 0 1
9154: PPUSH
9155: LD_INT 2
9157: PPUSH
9158: LD_VAR 0 1
9162: PUSH
9163: LD_INT 2
9165: ARRAY
9166: PUSH
9167: CALL_OW 44
9171: ADD
9172: PPUSH
9173: CALL_OW 1
9177: ST_TO_ADDR
// end ;
9178: GO 9129
9180: POP
9181: POP
// techs := [ ] ;
9182: LD_ADDR_VAR 0 4
9186: PUSH
9187: EMPTY
9188: ST_TO_ADDR
// if commander = 1 then
9189: LD_EXP 25
9193: PUSH
9194: LD_INT 1
9196: EQUAL
9197: IFFALSE 9222
// techs := [ tech_weap1 , tech_weap2 , tech_weap3 , tech_lasSight ] ;
9199: LD_ADDR_VAR 0 4
9203: PUSH
9204: LD_INT 51
9206: PUSH
9207: LD_INT 52
9209: PUSH
9210: LD_INT 53
9212: PUSH
9213: LD_INT 12
9215: PUSH
9216: EMPTY
9217: LIST
9218: LIST
9219: LIST
9220: LIST
9221: ST_TO_ADDR
// if commander = 2 then
9222: LD_EXP 25
9226: PUSH
9227: LD_INT 2
9229: EQUAL
9230: IFFALSE 9267
// techs := [ tech_tech1 , tech_oilEng , tech_oilPow , tech_solEng , tech_solPow , tech_opto1 , tech_radar ] ;
9232: LD_ADDR_VAR 0 4
9236: PUSH
9237: LD_INT 48
9239: PUSH
9240: LD_INT 47
9242: PUSH
9243: LD_INT 46
9245: PUSH
9246: LD_INT 45
9248: PUSH
9249: LD_INT 35
9251: PUSH
9252: LD_INT 60
9254: PUSH
9255: LD_INT 6
9257: PUSH
9258: EMPTY
9259: LIST
9260: LIST
9261: LIST
9262: LIST
9263: LIST
9264: LIST
9265: LIST
9266: ST_TO_ADDR
// if commander = 3 then
9267: LD_EXP 25
9271: PUSH
9272: LD_INT 3
9274: EQUAL
9275: IFFALSE 9324
// techs := [ tech_advAI , tech_advchassis , tech_ai , tech_comp1 , tech_comp2 , tech_oilEng , tech_oilPow , tech_weap1 , tech_gatling , tech_gun ] ;
9277: LD_ADDR_VAR 0 4
9281: PUSH
9282: LD_INT 27
9284: PUSH
9285: LD_INT 36
9287: PUSH
9288: LD_INT 32
9290: PUSH
9291: LD_INT 57
9293: PUSH
9294: LD_INT 58
9296: PUSH
9297: LD_INT 47
9299: PUSH
9300: LD_INT 46
9302: PUSH
9303: LD_INT 51
9305: PUSH
9306: LD_INT 69
9308: PUSH
9309: LD_INT 39
9311: PUSH
9312: EMPTY
9313: LIST
9314: LIST
9315: LIST
9316: LIST
9317: LIST
9318: LIST
9319: LIST
9320: LIST
9321: LIST
9322: LIST
9323: ST_TO_ADDR
// if techs then
9324: LD_VAR 0 4
9328: IFFALSE 9362
// for i in techs do
9330: LD_ADDR_VAR 0 2
9334: PUSH
9335: LD_VAR 0 4
9339: PUSH
9340: FOR_IN
9341: IFFALSE 9360
// SetTech ( i , 1 , state_researched ) ;
9343: LD_VAR 0 2
9347: PPUSH
9348: LD_INT 1
9350: PPUSH
9351: LD_INT 2
9353: PPUSH
9354: CALL_OW 322
9358: GO 9340
9360: POP
9361: POP
// hc_gallery := skirmish ;
9362: LD_ADDR_OWVAR 33
9366: PUSH
9367: LD_STRING skirmish
9369: ST_TO_ADDR
// hc_face_number := commander ;
9370: LD_ADDR_OWVAR 34
9374: PUSH
9375: LD_EXP 25
9379: ST_TO_ADDR
// hc_importance := 100 ;
9380: LD_ADDR_OWVAR 32
9384: PUSH
9385: LD_INT 100
9387: ST_TO_ADDR
// case commander of 1 :
9388: LD_EXP 25
9392: PUSH
9393: LD_INT 1
9395: DOUBLE
9396: EQUAL
9397: IFTRUE 9401
9399: GO 9425
9401: POP
// begin hc_name := Jeff Ironside ;
9402: LD_ADDR_OWVAR 26
9406: PUSH
9407: LD_STRING Jeff Ironside
9409: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 7 ) ;
9410: LD_INT 1
9412: PPUSH
9413: LD_INT 1
9415: PPUSH
9416: LD_INT 7
9418: PPUSH
9419: CALL_OW 380
// end ; 2 :
9423: GO 9490
9425: LD_INT 2
9427: DOUBLE
9428: EQUAL
9429: IFTRUE 9433
9431: GO 9457
9433: POP
// begin hc_name := Paul Johnson ;
9434: LD_ADDR_OWVAR 26
9438: PUSH
9439: LD_STRING Paul Johnson
9441: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 7 ) ;
9442: LD_INT 1
9444: PPUSH
9445: LD_INT 3
9447: PPUSH
9448: LD_INT 7
9450: PPUSH
9451: CALL_OW 380
// end ; 3 :
9455: GO 9490
9457: LD_INT 3
9459: DOUBLE
9460: EQUAL
9461: IFTRUE 9465
9463: GO 9489
9465: POP
// begin hc_name := Lisa Stuart ;
9466: LD_ADDR_OWVAR 26
9470: PUSH
9471: LD_STRING Lisa Stuart
9473: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , 7 ) ;
9474: LD_INT 2
9476: PPUSH
9477: LD_INT 4
9479: PPUSH
9480: LD_INT 7
9482: PPUSH
9483: CALL_OW 380
// end ; end ;
9487: GO 9490
9489: POP
// playerCommander := CreateHuman ;
9490: LD_ADDR_EXP 9
9494: PUSH
9495: CALL_OW 44
9499: ST_TO_ADDR
// hc_importance := 0 ;
9500: LD_ADDR_OWVAR 32
9504: PUSH
9505: LD_INT 0
9507: ST_TO_ADDR
// hc_gallery :=  ;
9508: LD_ADDR_OWVAR 33
9512: PUSH
9513: LD_STRING 
9515: ST_TO_ADDR
// result := Replace ( result , 2 , result [ 2 ] ^ playerCommander ) ;
9516: LD_ADDR_VAR 0 1
9520: PUSH
9521: LD_VAR 0 1
9525: PPUSH
9526: LD_INT 2
9528: PPUSH
9529: LD_VAR 0 1
9533: PUSH
9534: LD_INT 2
9536: ARRAY
9537: PUSH
9538: LD_EXP 9
9542: ADD
9543: PPUSH
9544: CALL_OW 1
9548: ST_TO_ADDR
// end ;
9549: LD_VAR 0 1
9553: RET
// export function PrepareReinforcements ; var i , peopleAmount , tmp , un , veh ; begin
9554: LD_INT 0
9556: PPUSH
9557: PPUSH
9558: PPUSH
9559: PPUSH
9560: PPUSH
9561: PPUSH
// uc_side := 1 ;
9562: LD_ADDR_OWVAR 20
9566: PUSH
9567: LD_INT 1
9569: ST_TO_ADDR
// uc_nation := 1 ;
9570: LD_ADDR_OWVAR 21
9574: PUSH
9575: LD_INT 1
9577: ST_TO_ADDR
// InitHc ;
9578: CALL_OW 19
// peopleAmount := [ 3 , 3 , 2 ] [ Difficulty ] ;
9582: LD_ADDR_VAR 0 3
9586: PUSH
9587: LD_INT 3
9589: PUSH
9590: LD_INT 3
9592: PUSH
9593: LD_INT 2
9595: PUSH
9596: EMPTY
9597: LIST
9598: LIST
9599: LIST
9600: PUSH
9601: LD_OWVAR 67
9605: ARRAY
9606: ST_TO_ADDR
// for i = 1 to peopleAmount do
9607: LD_ADDR_VAR 0 2
9611: PUSH
9612: DOUBLE
9613: LD_INT 1
9615: DEC
9616: ST_TO_ADDR
9617: LD_VAR 0 3
9621: PUSH
9622: FOR_TO
9623: IFFALSE 9672
// begin PrepareHuman ( false , 2 , [ 7 , 6 , 5 ] [ Difficulty ] ) ;
9625: LD_INT 0
9627: PPUSH
9628: LD_INT 2
9630: PPUSH
9631: LD_INT 7
9633: PUSH
9634: LD_INT 6
9636: PUSH
9637: LD_INT 5
9639: PUSH
9640: EMPTY
9641: LIST
9642: LIST
9643: LIST
9644: PUSH
9645: LD_OWVAR 67
9649: ARRAY
9650: PPUSH
9651: CALL_OW 380
// PlaceUnitInArea ( CreateHuman , startArea , false ) ;
9655: CALL_OW 44
9659: PPUSH
9660: LD_INT 19
9662: PPUSH
9663: LD_INT 0
9665: PPUSH
9666: CALL 61259 0 3
// end ;
9670: GO 9622
9672: POP
9673: POP
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_computer , us_crane , 58 ) ;
9674: LD_INT 2
9676: PPUSH
9677: LD_INT 1
9679: PPUSH
9680: LD_INT 3
9682: PPUSH
9683: LD_INT 13
9685: PPUSH
9686: LD_INT 58
9688: PPUSH
9689: CALL 26590 0 5
// PlaceUnitInArea ( CreateVehicle , startArea , false ) ;
9693: CALL_OW 45
9697: PPUSH
9698: LD_INT 19
9700: PPUSH
9701: LD_INT 0
9703: PPUSH
9704: CALL 61259 0 3
// if commander = 1 then
9708: LD_EXP 25
9712: PUSH
9713: LD_INT 1
9715: EQUAL
9716: IFFALSE 9727
// wait ( 6 6$00 ) else
9718: LD_INT 12600
9720: PPUSH
9721: CALL_OW 67
9725: GO 9734
// wait ( 8 8$00 ) ;
9727: LD_INT 16800
9729: PPUSH
9730: CALL_OW 67
// uc_side := 1 ;
9734: LD_ADDR_OWVAR 20
9738: PUSH
9739: LD_INT 1
9741: ST_TO_ADDR
// uc_nation := 1 ;
9742: LD_ADDR_OWVAR 21
9746: PUSH
9747: LD_INT 1
9749: ST_TO_ADDR
// InitVc ;
9750: CALL_OW 20
// InitHc ;
9754: CALL_OW 19
// for i = 1 to 5 do
9758: LD_ADDR_VAR 0 2
9762: PUSH
9763: DOUBLE
9764: LD_INT 1
9766: DEC
9767: ST_TO_ADDR
9768: LD_INT 5
9770: PUSH
9771: FOR_TO
9772: IFFALSE 10016
// begin PrepareVehicle ( [ us_heavy_tracked , us_medium_tracked , us_light_wheeled ] [ i mod 3 + 1 ] , engine_combustion , [ control_manual , control_computer , control_computer ] [ i mod 3 + 1 ] , [ us_heavy_gun , us_cargo_bay , us_radar ] [ i mod 3 + 1 ] , rand ( 40 , 55 ) ) ;
9774: LD_INT 4
9776: PUSH
9777: LD_INT 3
9779: PUSH
9780: LD_INT 1
9782: PUSH
9783: EMPTY
9784: LIST
9785: LIST
9786: LIST
9787: PUSH
9788: LD_VAR 0 2
9792: PUSH
9793: LD_INT 3
9795: MOD
9796: PUSH
9797: LD_INT 1
9799: PLUS
9800: ARRAY
9801: PPUSH
9802: LD_INT 1
9804: PPUSH
9805: LD_INT 1
9807: PUSH
9808: LD_INT 3
9810: PUSH
9811: LD_INT 3
9813: PUSH
9814: EMPTY
9815: LIST
9816: LIST
9817: LIST
9818: PUSH
9819: LD_VAR 0 2
9823: PUSH
9824: LD_INT 3
9826: MOD
9827: PUSH
9828: LD_INT 1
9830: PLUS
9831: ARRAY
9832: PPUSH
9833: LD_INT 6
9835: PUSH
9836: LD_INT 12
9838: PUSH
9839: LD_INT 11
9841: PUSH
9842: EMPTY
9843: LIST
9844: LIST
9845: LIST
9846: PUSH
9847: LD_VAR 0 2
9851: PUSH
9852: LD_INT 3
9854: MOD
9855: PUSH
9856: LD_INT 1
9858: PLUS
9859: ARRAY
9860: PPUSH
9861: LD_INT 40
9863: PPUSH
9864: LD_INT 55
9866: PPUSH
9867: CALL_OW 12
9871: PPUSH
9872: CALL 26590 0 5
// veh := CreateVehicle ;
9876: LD_ADDR_VAR 0 6
9880: PUSH
9881: CALL_OW 45
9885: ST_TO_ADDR
// PlaceUnitInArea ( veh , startArea , false ) ;
9886: LD_VAR 0 6
9890: PPUSH
9891: LD_INT 19
9893: PPUSH
9894: LD_INT 0
9896: PPUSH
9897: CALL 61259 0 3
// if GetWeapon ( veh ) = us_cargo_bay then
9901: LD_VAR 0 6
9905: PPUSH
9906: CALL_OW 264
9910: PUSH
9911: LD_INT 12
9913: EQUAL
9914: IFFALSE 9946
// begin AddCargo ( veh , mat_cans , 70 ) ;
9916: LD_VAR 0 6
9920: PPUSH
9921: LD_INT 1
9923: PPUSH
9924: LD_INT 70
9926: PPUSH
9927: CALL_OW 291
// AddCargo ( veh , mat_siberit , 30 ) ;
9931: LD_VAR 0 6
9935: PPUSH
9936: LD_INT 3
9938: PPUSH
9939: LD_INT 30
9941: PPUSH
9942: CALL_OW 291
// end ; if GetControl ( veh ) = control_manual then
9946: LD_VAR 0 6
9950: PPUSH
9951: CALL_OW 263
9955: PUSH
9956: LD_INT 1
9958: EQUAL
9959: IFFALSE 10014
// begin PrepareHuman ( sex_male , 3 , 6 ) ;
9961: LD_INT 1
9963: PPUSH
9964: LD_INT 3
9966: PPUSH
9967: LD_INT 6
9969: PPUSH
9970: CALL_OW 380
// un := CreateHuman ;
9974: LD_ADDR_VAR 0 5
9978: PUSH
9979: CALL_OW 44
9983: ST_TO_ADDR
// tmp := tmp ^ un ;
9984: LD_ADDR_VAR 0 4
9988: PUSH
9989: LD_VAR 0 4
9993: PUSH
9994: LD_VAR 0 5
9998: ADD
9999: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10000: LD_VAR 0 5
10004: PPUSH
10005: LD_VAR 0 6
10009: PPUSH
10010: CALL_OW 52
// end ; end ;
10014: GO 9771
10016: POP
10017: POP
// if tmp then
10018: LD_VAR 0 4
10022: IFFALSE 10086
// begin CenterNowOnUnits ( tmp ) ;
10024: LD_VAR 0 4
10028: PPUSH
10029: CALL_OW 87
// Say ( tmp [ 1 ] , DAR-1 ) ;
10033: LD_VAR 0 4
10037: PUSH
10038: LD_INT 1
10040: ARRAY
10041: PPUSH
10042: LD_STRING DAR-1
10044: PPUSH
10045: CALL_OW 88
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-DAR ) ;
10049: LD_EXP 9
10053: PPUSH
10054: LD_STRING D
10056: PUSH
10057: LD_STRING I
10059: PUSH
10060: LD_STRING J
10062: PUSH
10063: LD_STRING S
10065: PUSH
10066: EMPTY
10067: LIST
10068: LIST
10069: LIST
10070: PUSH
10071: LD_EXP 25
10075: ARRAY
10076: STR
10077: PUSH
10078: LD_STRING -1-DAR
10080: STR
10081: PPUSH
10082: CALL_OW 88
// end ; if not reinforceAllowed then
10086: LD_EXP 24
10090: NOT
10091: IFFALSE 10095
// exit ;
10093: GO 10249
// wait ( 25 25$00 ) ;
10095: LD_INT 52500
10097: PPUSH
10098: CALL_OW 67
// uc_side := 1 ;
10102: LD_ADDR_OWVAR 20
10106: PUSH
10107: LD_INT 1
10109: ST_TO_ADDR
// uc_nation := 1 ;
10110: LD_ADDR_OWVAR 21
10114: PUSH
10115: LD_INT 1
10117: ST_TO_ADDR
// InitVc ;
10118: CALL_OW 20
// InitHc ;
10122: CALL_OW 19
// for i = 1 to 4 do
10126: LD_ADDR_VAR 0 2
10130: PUSH
10131: DOUBLE
10132: LD_INT 1
10134: DEC
10135: ST_TO_ADDR
10136: LD_INT 4
10138: PUSH
10139: FOR_TO
10140: IFFALSE 10247
// begin PrepareVehicle ( us_morphling , engine_siberite , control_manual , us_heavy_gun , 1 ) ;
10142: LD_INT 5
10144: PPUSH
10145: LD_INT 3
10147: PPUSH
10148: LD_INT 1
10150: PPUSH
10151: LD_INT 6
10153: PPUSH
10154: LD_INT 1
10156: PPUSH
10157: CALL 26590 0 5
// veh := CreateVehicle ;
10161: LD_ADDR_VAR 0 6
10165: PUSH
10166: CALL_OW 45
10170: ST_TO_ADDR
// PlaceUnitInArea ( veh , startArea , false ) ;
10171: LD_VAR 0 6
10175: PPUSH
10176: LD_INT 19
10178: PPUSH
10179: LD_INT 0
10181: PPUSH
10182: CALL 61259 0 3
// if GetControl ( veh ) = control_manual then
10186: LD_VAR 0 6
10190: PPUSH
10191: CALL_OW 263
10195: PUSH
10196: LD_INT 1
10198: EQUAL
10199: IFFALSE 10245
// begin PrepareHuman ( false , 3 , [ 7 , 6 , 5 ] [ Difficulty ] ) ;
10201: LD_INT 0
10203: PPUSH
10204: LD_INT 3
10206: PPUSH
10207: LD_INT 7
10209: PUSH
10210: LD_INT 6
10212: PUSH
10213: LD_INT 5
10215: PUSH
10216: EMPTY
10217: LIST
10218: LIST
10219: LIST
10220: PUSH
10221: LD_OWVAR 67
10225: ARRAY
10226: PPUSH
10227: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
10231: CALL_OW 44
10235: PPUSH
10236: LD_VAR 0 6
10240: PPUSH
10241: CALL_OW 52
// end ; end ;
10245: GO 10139
10247: POP
10248: POP
// end ;
10249: LD_VAR 0 1
10253: RET
// export function PrepareLegionReinforcements ; var i , un , j , tmp ; begin
10254: LD_INT 0
10256: PPUSH
10257: PPUSH
10258: PPUSH
10259: PPUSH
10260: PPUSH
// uc_side := 8 ;
10261: LD_ADDR_OWVAR 20
10265: PUSH
10266: LD_INT 8
10268: ST_TO_ADDR
// uc_nation := nation_arabian ;
10269: LD_ADDR_OWVAR 21
10273: PUSH
10274: LD_INT 2
10276: ST_TO_ADDR
// for i = 1 to 2 do
10277: LD_ADDR_VAR 0 2
10281: PUSH
10282: DOUBLE
10283: LD_INT 1
10285: DEC
10286: ST_TO_ADDR
10287: LD_INT 2
10289: PUSH
10290: FOR_TO
10291: IFFALSE 10371
// for j = 1 to 4 do
10293: LD_ADDR_VAR 0 4
10297: PUSH
10298: DOUBLE
10299: LD_INT 1
10301: DEC
10302: ST_TO_ADDR
10303: LD_INT 4
10305: PUSH
10306: FOR_TO
10307: IFFALSE 10367
// begin PrepareHuman ( false , j , 8 ) ;
10309: LD_INT 0
10311: PPUSH
10312: LD_VAR 0 4
10316: PPUSH
10317: LD_INT 8
10319: PPUSH
10320: CALL_OW 380
// un := CreateHuman ;
10324: LD_ADDR_VAR 0 3
10328: PUSH
10329: CALL_OW 44
10333: ST_TO_ADDR
// PlaceUnitArea ( un , legionSpawn , false ) ;
10334: LD_VAR 0 3
10338: PPUSH
10339: LD_INT 23
10341: PPUSH
10342: LD_INT 0
10344: PPUSH
10345: CALL_OW 49
// tmp := tmp union un ;
10349: LD_ADDR_VAR 0 5
10353: PUSH
10354: LD_VAR 0 5
10358: PUSH
10359: LD_VAR 0 3
10363: UNION
10364: ST_TO_ADDR
// end ;
10365: GO 10306
10367: POP
10368: POP
10369: GO 10290
10371: POP
10372: POP
// for i in tmp do
10373: LD_ADDR_VAR 0 2
10377: PUSH
10378: LD_VAR 0 5
10382: PUSH
10383: FOR_IN
10384: IFFALSE 10403
// ComMoveXY ( i , 150 , 136 ) ;
10386: LD_VAR 0 2
10390: PPUSH
10391: LD_INT 150
10393: PPUSH
10394: LD_INT 136
10396: PPUSH
10397: CALL_OW 111
10401: GO 10383
10403: POP
10404: POP
// mc_bases := Replace ( mc_bases , mc_leg , mc_bases [ mc_leg ] union tmp ) ;
10405: LD_ADDR_EXP 44
10409: PUSH
10410: LD_EXP 44
10414: PPUSH
10415: LD_EXP 6
10419: PPUSH
10420: LD_EXP 44
10424: PUSH
10425: LD_EXP 6
10429: ARRAY
10430: PUSH
10431: LD_VAR 0 5
10435: UNION
10436: PPUSH
10437: CALL_OW 1
10441: ST_TO_ADDR
// end ;
10442: LD_VAR 0 1
10446: RET
// every 0 0$10 trigger Difficulty > 1 and GetTech ( tech_lapser , 3 ) = state_researched do
10447: LD_OWVAR 67
10451: PUSH
10452: LD_INT 1
10454: GREATER
10455: PUSH
10456: LD_INT 31
10458: PPUSH
10459: LD_INT 3
10461: PPUSH
10462: CALL_OW 321
10466: PUSH
10467: LD_INT 2
10469: EQUAL
10470: AND
10471: IFFALSE 10688
10473: GO 10475
10475: DISABLE
// begin MC_InsertBuildingList ( mc_rus_1 , [ [ b_turret , 101 , 159 , 5 ] , [ b_turret , 105 , 158 , 5 ] , [ b_turret , 96 , 136 , 5 ] , [ b_turret , 94 , 133 , 4 ] , [ b_turret , 84 , 102 , 4 ] ] ) ;
10476: LD_EXP 7
10480: PPUSH
10481: LD_INT 33
10483: PUSH
10484: LD_INT 101
10486: PUSH
10487: LD_INT 159
10489: PUSH
10490: LD_INT 5
10492: PUSH
10493: EMPTY
10494: LIST
10495: LIST
10496: LIST
10497: LIST
10498: PUSH
10499: LD_INT 33
10501: PUSH
10502: LD_INT 105
10504: PUSH
10505: LD_INT 158
10507: PUSH
10508: LD_INT 5
10510: PUSH
10511: EMPTY
10512: LIST
10513: LIST
10514: LIST
10515: LIST
10516: PUSH
10517: LD_INT 33
10519: PUSH
10520: LD_INT 96
10522: PUSH
10523: LD_INT 136
10525: PUSH
10526: LD_INT 5
10528: PUSH
10529: EMPTY
10530: LIST
10531: LIST
10532: LIST
10533: LIST
10534: PUSH
10535: LD_INT 33
10537: PUSH
10538: LD_INT 94
10540: PUSH
10541: LD_INT 133
10543: PUSH
10544: LD_INT 4
10546: PUSH
10547: EMPTY
10548: LIST
10549: LIST
10550: LIST
10551: LIST
10552: PUSH
10553: LD_INT 33
10555: PUSH
10556: LD_INT 84
10558: PUSH
10559: LD_INT 102
10561: PUSH
10562: LD_INT 4
10564: PUSH
10565: EMPTY
10566: LIST
10567: LIST
10568: LIST
10569: LIST
10570: PUSH
10571: EMPTY
10572: LIST
10573: LIST
10574: LIST
10575: LIST
10576: LIST
10577: PPUSH
10578: CALL 86342 0 2
// MC_InsertBuildingList ( mc_rus_2 , [ [ b_turret , 50 , 17 , 4 ] , [ b_turret , 52 , 20 , 4 ] , [ b_turret , 53 , 23 , 4 ] , [ b_turret , 45 , 32 , 4 ] , [ b_turret , 45 , 39 , 4 ] ] ) ;
10582: LD_EXP 8
10586: PPUSH
10587: LD_INT 33
10589: PUSH
10590: LD_INT 50
10592: PUSH
10593: LD_INT 17
10595: PUSH
10596: LD_INT 4
10598: PUSH
10599: EMPTY
10600: LIST
10601: LIST
10602: LIST
10603: LIST
10604: PUSH
10605: LD_INT 33
10607: PUSH
10608: LD_INT 52
10610: PUSH
10611: LD_INT 20
10613: PUSH
10614: LD_INT 4
10616: PUSH
10617: EMPTY
10618: LIST
10619: LIST
10620: LIST
10621: LIST
10622: PUSH
10623: LD_INT 33
10625: PUSH
10626: LD_INT 53
10628: PUSH
10629: LD_INT 23
10631: PUSH
10632: LD_INT 4
10634: PUSH
10635: EMPTY
10636: LIST
10637: LIST
10638: LIST
10639: LIST
10640: PUSH
10641: LD_INT 33
10643: PUSH
10644: LD_INT 45
10646: PUSH
10647: LD_INT 32
10649: PUSH
10650: LD_INT 4
10652: PUSH
10653: EMPTY
10654: LIST
10655: LIST
10656: LIST
10657: LIST
10658: PUSH
10659: LD_INT 33
10661: PUSH
10662: LD_INT 45
10664: PUSH
10665: LD_INT 39
10667: PUSH
10668: LD_INT 4
10670: PUSH
10671: EMPTY
10672: LIST
10673: LIST
10674: LIST
10675: LIST
10676: PUSH
10677: EMPTY
10678: LIST
10679: LIST
10680: LIST
10681: LIST
10682: LIST
10683: PPUSH
10684: CALL 86342 0 2
// end ; end_of_file
10688: END
// export function Action ; var i , tmp ; begin
10689: LD_INT 0
10691: PPUSH
10692: PPUSH
10693: PPUSH
// InGameOn ;
10694: CALL_OW 8
// CenterNowOnXY ( 225 , 217 ) ;
10698: LD_INT 225
10700: PPUSH
10701: LD_INT 217
10703: PPUSH
10704: CALL_OW 86
// for i in playerForces [ 2 ] do
10708: LD_ADDR_VAR 0 2
10712: PUSH
10713: LD_EXP 10
10717: PUSH
10718: LD_INT 2
10720: ARRAY
10721: PUSH
10722: FOR_IN
10723: IFFALSE 10856
// begin if playerForces [ 1 ] and GetClass ( i ) in [ 3 , 4 ] then
10725: LD_EXP 10
10729: PUSH
10730: LD_INT 1
10732: ARRAY
10733: PUSH
10734: LD_VAR 0 2
10738: PPUSH
10739: CALL_OW 257
10743: PUSH
10744: LD_INT 3
10746: PUSH
10747: LD_INT 4
10749: PUSH
10750: EMPTY
10751: LIST
10752: LIST
10753: IN
10754: AND
10755: IFFALSE 10839
// begin PlaceUnitInArea ( playerForces [ 1 ] [ 1 ] , startArea , false ) ;
10757: LD_EXP 10
10761: PUSH
10762: LD_INT 1
10764: ARRAY
10765: PUSH
10766: LD_INT 1
10768: ARRAY
10769: PPUSH
10770: LD_INT 19
10772: PPUSH
10773: LD_INT 0
10775: PPUSH
10776: CALL 61259 0 3
// PlaceHumanInUnit ( i , playerForces [ 1 ] [ 1 ] ) ;
10780: LD_VAR 0 2
10784: PPUSH
10785: LD_EXP 10
10789: PUSH
10790: LD_INT 1
10792: ARRAY
10793: PUSH
10794: LD_INT 1
10796: ARRAY
10797: PPUSH
10798: CALL_OW 52
// playerForces := Replace ( playerForces , 1 , Delete ( playerForces [ 1 ] , 1 ) ) ;
10802: LD_ADDR_EXP 10
10806: PUSH
10807: LD_EXP 10
10811: PPUSH
10812: LD_INT 1
10814: PPUSH
10815: LD_EXP 10
10819: PUSH
10820: LD_INT 1
10822: ARRAY
10823: PPUSH
10824: LD_INT 1
10826: PPUSH
10827: CALL_OW 3
10831: PPUSH
10832: CALL_OW 1
10836: ST_TO_ADDR
// end else
10837: GO 10854
// PlaceUnitInArea ( i , startArea , false ) ;
10839: LD_VAR 0 2
10843: PPUSH
10844: LD_INT 19
10846: PPUSH
10847: LD_INT 0
10849: PPUSH
10850: CALL 61259 0 3
// end ;
10854: GO 10722
10856: POP
10857: POP
// wait ( 0 0$2 ) ;
10858: LD_INT 70
10860: PPUSH
10861: CALL_OW 67
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1 ) ;
10865: LD_EXP 9
10869: PPUSH
10870: LD_STRING D
10872: PUSH
10873: LD_STRING I
10875: PUSH
10876: LD_STRING J
10878: PUSH
10879: LD_STRING S
10881: PUSH
10882: EMPTY
10883: LIST
10884: LIST
10885: LIST
10886: PUSH
10887: LD_EXP 25
10891: ARRAY
10892: STR
10893: PUSH
10894: LD_STRING -1
10896: STR
10897: PPUSH
10898: CALL_OW 88
// SayRadio ( Powell , DP-1 ) ;
10902: LD_EXP 12
10906: PPUSH
10907: LD_STRING DP-1
10909: PPUSH
10910: CALL_OW 94
// SayRadio ( Powell , DP-2 ) ;
10914: LD_EXP 12
10918: PPUSH
10919: LD_STRING DP-2
10921: PPUSH
10922: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -2 ) ;
10926: LD_EXP 9
10930: PPUSH
10931: LD_STRING D
10933: PUSH
10934: LD_STRING I
10936: PUSH
10937: LD_STRING J
10939: PUSH
10940: LD_STRING S
10942: PUSH
10943: EMPTY
10944: LIST
10945: LIST
10946: LIST
10947: PUSH
10948: LD_EXP 25
10952: ARRAY
10953: STR
10954: PUSH
10955: LD_STRING -2
10957: STR
10958: PPUSH
10959: CALL_OW 88
// InGameOff ;
10963: CALL_OW 9
// ChangeMissionObjectives ( O1 ) ;
10967: LD_STRING O1
10969: PPUSH
10970: CALL_OW 337
// game := true ;
10974: LD_ADDR_EXP 3
10978: PUSH
10979: LD_INT 1
10981: ST_TO_ADDR
// SaveForQuickRestart ;
10982: CALL_OW 22
// wait ( 0 0$5 ) ;
10986: LD_INT 175
10988: PPUSH
10989: CALL_OW 67
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -3 ) ;
10993: LD_EXP 9
10997: PPUSH
10998: LD_STRING D
11000: PUSH
11001: LD_STRING I
11003: PUSH
11004: LD_STRING J
11006: PUSH
11007: LD_STRING S
11009: PUSH
11010: EMPTY
11011: LIST
11012: LIST
11013: LIST
11014: PUSH
11015: LD_EXP 25
11019: ARRAY
11020: STR
11021: PUSH
11022: LD_STRING -3
11024: STR
11025: PPUSH
11026: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
11030: LD_INT 35
11032: PPUSH
11033: CALL_OW 67
// until ruEscape [ 1 ] >= ruEscape [ 2 ] ;
11037: LD_EXP 15
11041: PUSH
11042: LD_INT 1
11044: ARRAY
11045: PUSH
11046: LD_EXP 15
11050: PUSH
11051: LD_INT 2
11053: ARRAY
11054: GREATEREQUAL
11055: IFFALSE 11030
// outpostEscape := true ;
11057: LD_ADDR_EXP 27
11061: PUSH
11062: LD_INT 1
11064: ST_TO_ADDR
// tmp := UnitFilter ( ruOutpost , [ f_sex , sex_male ] ) ;
11065: LD_ADDR_VAR 0 3
11069: PUSH
11070: LD_EXP 14
11074: PPUSH
11075: LD_INT 26
11077: PUSH
11078: LD_INT 1
11080: PUSH
11081: EMPTY
11082: LIST
11083: LIST
11084: PPUSH
11085: CALL_OW 72
11089: ST_TO_ADDR
// if tmp then
11090: LD_VAR 0 3
11094: IFFALSE 11112
// Say ( tmp [ 1 ] , DR-1-Escape ) ;
11096: LD_VAR 0 3
11100: PUSH
11101: LD_INT 1
11103: ARRAY
11104: PPUSH
11105: LD_STRING DR-1-Escape
11107: PPUSH
11108: CALL_OW 88
// wait ( 0 0$1 ) ;
11112: LD_INT 35
11114: PPUSH
11115: CALL_OW 67
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Escape ) ;
11119: LD_EXP 9
11123: PPUSH
11124: LD_STRING D
11126: PUSH
11127: LD_STRING I
11129: PUSH
11130: LD_STRING J
11132: PUSH
11133: LD_STRING S
11135: PUSH
11136: EMPTY
11137: LIST
11138: LIST
11139: LIST
11140: PUSH
11141: LD_EXP 25
11145: ARRAY
11146: STR
11147: PUSH
11148: LD_STRING -1-Escape
11150: STR
11151: PPUSH
11152: CALL_OW 88
// for i in ruOutpost do
11156: LD_ADDR_VAR 0 2
11160: PUSH
11161: LD_EXP 14
11165: PUSH
11166: FOR_IN
11167: IFFALSE 11221
// begin if IsInUnit ( i ) then
11169: LD_VAR 0 2
11173: PPUSH
11174: CALL_OW 310
11178: IFFALSE 11189
// ComExitBuilding ( i ) ;
11180: LD_VAR 0 2
11184: PPUSH
11185: CALL_OW 122
// AddComMoveXY ( i , 179 , 102 ) ;
11189: LD_VAR 0 2
11193: PPUSH
11194: LD_INT 179
11196: PPUSH
11197: LD_INT 102
11199: PPUSH
11200: CALL_OW 171
// AddComMoveXY ( i , 28 , 20 ) ;
11204: LD_VAR 0 2
11208: PPUSH
11209: LD_INT 28
11211: PPUSH
11212: LD_INT 20
11214: PPUSH
11215: CALL_OW 171
// end ;
11219: GO 11166
11221: POP
11222: POP
// tmp := [ ] ;
11223: LD_ADDR_VAR 0 3
11227: PUSH
11228: EMPTY
11229: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11230: LD_INT 35
11232: PPUSH
11233: CALL_OW 67
// tmp := UnitFilter ( ruOutpost , [ f_inarea , rus2Base ] ) ;
11237: LD_ADDR_VAR 0 3
11241: PUSH
11242: LD_EXP 14
11246: PPUSH
11247: LD_INT 95
11249: PUSH
11250: LD_INT 11
11252: PUSH
11253: EMPTY
11254: LIST
11255: LIST
11256: PPUSH
11257: CALL_OW 72
11261: ST_TO_ADDR
// if tmp then
11262: LD_VAR 0 3
11266: IFFALSE 11345
// for i in tmp do
11268: LD_ADDR_VAR 0 2
11272: PUSH
11273: LD_VAR 0 3
11277: PUSH
11278: FOR_IN
11279: IFFALSE 11343
// begin ruOutpost := ruOutpost diff i ;
11281: LD_ADDR_EXP 14
11285: PUSH
11286: LD_EXP 14
11290: PUSH
11291: LD_VAR 0 2
11295: DIFF
11296: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ mc_rus_2 , mc_bases [ mc_rus_2 ] + 1 ] , i ) ;
11297: LD_ADDR_EXP 44
11301: PUSH
11302: LD_EXP 44
11306: PPUSH
11307: LD_EXP 8
11311: PUSH
11312: LD_EXP 44
11316: PUSH
11317: LD_EXP 8
11321: ARRAY
11322: PUSH
11323: LD_INT 1
11325: PLUS
11326: PUSH
11327: EMPTY
11328: LIST
11329: LIST
11330: PPUSH
11331: LD_VAR 0 2
11335: PPUSH
11336: CALL 26712 0 3
11340: ST_TO_ADDR
// end ;
11341: GO 11278
11343: POP
11344: POP
// until not UnitFilter ( ruOutpost , [ f_type , unit_human ] ) ;
11345: LD_EXP 14
11349: PPUSH
11350: LD_INT 21
11352: PUSH
11353: LD_INT 1
11355: PUSH
11356: EMPTY
11357: LIST
11358: LIST
11359: PPUSH
11360: CALL_OW 72
11364: NOT
11365: IFFALSE 11230
// ruOutpost := [ ] ;
11367: LD_ADDR_EXP 14
11371: PUSH
11372: EMPTY
11373: ST_TO_ADDR
// end ;
11374: LD_VAR 0 1
11378: RET
// every 0 0$1 trigger outpostEscape do var i , tmp ;
11379: LD_EXP 27
11383: IFFALSE 11572
11385: GO 11387
11387: DISABLE
11388: LD_INT 0
11390: PPUSH
11391: PPUSH
// begin wait ( rand ( 0 0$25 , 0 0$35 ) ) ;
11392: LD_INT 875
11394: PPUSH
11395: LD_INT 1225
11397: PPUSH
11398: CALL_OW 12
11402: PPUSH
11403: CALL_OW 67
// tmp := [ [ 208 , 166 ] , [ 218 , 174 ] , [ 201 , 173 ] , [ 189 , 167 ] , [ 191 , 160 ] , [ 209 , 181 ] , [ 192 , 162 ] , [ 197 , 166 ] ] ;
11407: LD_ADDR_VAR 0 2
11411: PUSH
11412: LD_INT 208
11414: PUSH
11415: LD_INT 166
11417: PUSH
11418: EMPTY
11419: LIST
11420: LIST
11421: PUSH
11422: LD_INT 218
11424: PUSH
11425: LD_INT 174
11427: PUSH
11428: EMPTY
11429: LIST
11430: LIST
11431: PUSH
11432: LD_INT 201
11434: PUSH
11435: LD_INT 173
11437: PUSH
11438: EMPTY
11439: LIST
11440: LIST
11441: PUSH
11442: LD_INT 189
11444: PUSH
11445: LD_INT 167
11447: PUSH
11448: EMPTY
11449: LIST
11450: LIST
11451: PUSH
11452: LD_INT 191
11454: PUSH
11455: LD_INT 160
11457: PUSH
11458: EMPTY
11459: LIST
11460: LIST
11461: PUSH
11462: LD_INT 209
11464: PUSH
11465: LD_INT 181
11467: PUSH
11468: EMPTY
11469: LIST
11470: LIST
11471: PUSH
11472: LD_INT 192
11474: PUSH
11475: LD_INT 162
11477: PUSH
11478: EMPTY
11479: LIST
11480: LIST
11481: PUSH
11482: LD_INT 197
11484: PUSH
11485: LD_INT 166
11487: PUSH
11488: EMPTY
11489: LIST
11490: LIST
11491: PUSH
11492: EMPTY
11493: LIST
11494: LIST
11495: LIST
11496: LIST
11497: LIST
11498: LIST
11499: LIST
11500: LIST
11501: ST_TO_ADDR
// for i = 1 to 5 + Difficulty do
11502: LD_ADDR_VAR 0 1
11506: PUSH
11507: DOUBLE
11508: LD_INT 1
11510: DEC
11511: ST_TO_ADDR
11512: LD_INT 5
11514: PUSH
11515: LD_OWVAR 67
11519: PLUS
11520: PUSH
11521: FOR_TO
11522: IFFALSE 11570
// begin MineExplosion ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , 1 ) ;
11524: LD_VAR 0 2
11528: PUSH
11529: LD_VAR 0 1
11533: ARRAY
11534: PUSH
11535: LD_INT 1
11537: ARRAY
11538: PPUSH
11539: LD_VAR 0 2
11543: PUSH
11544: LD_VAR 0 1
11548: ARRAY
11549: PUSH
11550: LD_INT 2
11552: ARRAY
11553: PPUSH
11554: LD_INT 1
11556: PPUSH
11557: CALL_OW 453
// wait ( 0 0$0.8 ) ;
11561: LD_INT 28
11563: PPUSH
11564: CALL_OW 67
// end ;
11568: GO 11521
11570: POP
11571: POP
// end ;
11572: PPOPN 2
11574: END
// every 0 0$3 trigger not outpostEscape do var tmp , engs , buildings , empty , i , j , k ;
11575: LD_EXP 27
11579: NOT
11580: IFFALSE 12234
11582: GO 11584
11584: DISABLE
11585: LD_INT 0
11587: PPUSH
11588: PPUSH
11589: PPUSH
11590: PPUSH
11591: PPUSH
11592: PPUSH
11593: PPUSH
// begin enable ;
11594: ENABLE
// tmp := UnitFilter ( ruOutpost , [ [ f_side , 3 ] , [ f_class , 1 ] ] ) ;
11595: LD_ADDR_VAR 0 1
11599: PUSH
11600: LD_EXP 14
11604: PPUSH
11605: LD_INT 22
11607: PUSH
11608: LD_INT 3
11610: PUSH
11611: EMPTY
11612: LIST
11613: LIST
11614: PUSH
11615: LD_INT 25
11617: PUSH
11618: LD_INT 1
11620: PUSH
11621: EMPTY
11622: LIST
11623: LIST
11624: PUSH
11625: EMPTY
11626: LIST
11627: LIST
11628: PPUSH
11629: CALL_OW 72
11633: ST_TO_ADDR
// engs := UnitFilter ( ruOutpost , [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
11634: LD_ADDR_VAR 0 2
11638: PUSH
11639: LD_EXP 14
11643: PPUSH
11644: LD_INT 22
11646: PUSH
11647: LD_INT 3
11649: PUSH
11650: EMPTY
11651: LIST
11652: LIST
11653: PUSH
11654: LD_INT 25
11656: PUSH
11657: LD_INT 2
11659: PUSH
11660: EMPTY
11661: LIST
11662: LIST
11663: PUSH
11664: EMPTY
11665: LIST
11666: LIST
11667: PPUSH
11668: CALL_OW 72
11672: ST_TO_ADDR
// buildings := UnitFilter ( ruOutpost , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
11673: LD_ADDR_VAR 0 3
11677: PUSH
11678: LD_EXP 14
11682: PPUSH
11683: LD_INT 22
11685: PUSH
11686: LD_INT 3
11688: PUSH
11689: EMPTY
11690: LIST
11691: LIST
11692: PUSH
11693: LD_INT 21
11695: PUSH
11696: LD_INT 3
11698: PUSH
11699: EMPTY
11700: LIST
11701: LIST
11702: PUSH
11703: LD_INT 3
11705: PUSH
11706: LD_INT 24
11708: PUSH
11709: LD_INT 1000
11711: PUSH
11712: EMPTY
11713: LIST
11714: LIST
11715: PUSH
11716: EMPTY
11717: LIST
11718: LIST
11719: PUSH
11720: EMPTY
11721: LIST
11722: LIST
11723: LIST
11724: PPUSH
11725: CALL_OW 72
11729: ST_TO_ADDR
// if engs and buildings then
11730: LD_VAR 0 2
11734: PUSH
11735: LD_VAR 0 3
11739: AND
11740: IFFALSE 11813
// begin for i in engs do
11742: LD_ADDR_VAR 0 5
11746: PUSH
11747: LD_VAR 0 2
11751: PUSH
11752: FOR_IN
11753: IFFALSE 11809
// if IsInUnit ( i ) then
11755: LD_VAR 0 5
11759: PPUSH
11760: CALL_OW 310
11764: IFFALSE 11777
// ComExitBuilding ( i ) else
11766: LD_VAR 0 5
11770: PPUSH
11771: CALL_OW 122
11775: GO 11807
// if not HasTask ( i ) then
11777: LD_VAR 0 5
11781: PPUSH
11782: CALL_OW 314
11786: NOT
11787: IFFALSE 11807
// ComRepairBuilding ( i , buildings [ 1 ] ) ;
11789: LD_VAR 0 5
11793: PPUSH
11794: LD_VAR 0 3
11798: PUSH
11799: LD_INT 1
11801: ARRAY
11802: PPUSH
11803: CALL_OW 130
11807: GO 11752
11809: POP
11810: POP
// end else
11811: GO 11916
// if not buildings and UnitFilter ( ruOutpost , [ f_btype , b_depot ] ) and UnitFilter ( engs , [ f_not , [ f_inside ] ] ) then
11813: LD_VAR 0 3
11817: NOT
11818: PUSH
11819: LD_EXP 14
11823: PPUSH
11824: LD_INT 30
11826: PUSH
11827: LD_INT 0
11829: PUSH
11830: EMPTY
11831: LIST
11832: LIST
11833: PPUSH
11834: CALL_OW 72
11838: AND
11839: PUSH
11840: LD_VAR 0 2
11844: PPUSH
11845: LD_INT 3
11847: PUSH
11848: LD_INT 54
11850: PUSH
11851: EMPTY
11852: LIST
11853: PUSH
11854: EMPTY
11855: LIST
11856: LIST
11857: PPUSH
11858: CALL_OW 72
11862: AND
11863: IFFALSE 11916
// ComEnterUnit ( UnitFilter ( engs , [ f_not , [ f_inside ] ] ) , UnitFilter ( ruOutpost , [ f_btype , b_depot ] ) [ 1 ] ) ;
11865: LD_VAR 0 2
11869: PPUSH
11870: LD_INT 3
11872: PUSH
11873: LD_INT 54
11875: PUSH
11876: EMPTY
11877: LIST
11878: PUSH
11879: EMPTY
11880: LIST
11881: LIST
11882: PPUSH
11883: CALL_OW 72
11887: PPUSH
11888: LD_EXP 14
11892: PPUSH
11893: LD_INT 30
11895: PUSH
11896: LD_INT 0
11898: PUSH
11899: EMPTY
11900: LIST
11901: LIST
11902: PPUSH
11903: CALL_OW 72
11907: PUSH
11908: LD_INT 1
11910: ARRAY
11911: PPUSH
11912: CALL_OW 120
// if not tmp then
11916: LD_VAR 0 1
11920: NOT
11921: IFFALSE 11925
// exit ;
11923: GO 12234
// if FilterUnitsInArea ( ruOutpostCenterArea , [ f_enemy , 3 ] ) > 1 then
11925: LD_INT 26
11927: PPUSH
11928: LD_INT 81
11930: PUSH
11931: LD_INT 3
11933: PUSH
11934: EMPTY
11935: LIST
11936: LIST
11937: PPUSH
11938: CALL_OW 70
11942: PUSH
11943: LD_INT 1
11945: GREATER
11946: IFFALSE 12002
// begin for i in tmp do
11948: LD_ADDR_VAR 0 5
11952: PUSH
11953: LD_VAR 0 1
11957: PUSH
11958: FOR_IN
11959: IFFALSE 11998
// begin if IsInUnit ( i ) then
11961: LD_VAR 0 5
11965: PPUSH
11966: CALL_OW 310
11970: IFFALSE 11981
// ComExitBuilding ( i ) ;
11972: LD_VAR 0 5
11976: PPUSH
11977: CALL_OW 122
// AddComAgressiveMove ( i , 204 , 164 ) ;
11981: LD_VAR 0 5
11985: PPUSH
11986: LD_INT 204
11988: PPUSH
11989: LD_INT 164
11991: PPUSH
11992: CALL_OW 174
// end ;
11996: GO 11958
11998: POP
11999: POP
// end else
12000: GO 12234
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
12002: LD_VAR 0 1
12006: PPUSH
12007: LD_INT 3
12009: PUSH
12010: LD_INT 54
12012: PUSH
12013: EMPTY
12014: LIST
12015: PUSH
12016: EMPTY
12017: LIST
12018: LIST
12019: PPUSH
12020: CALL_OW 72
12024: IFFALSE 12234
// begin empty := UnitFilter ( ruOutpost , [ [ f_btype , b_bunker ] , [ f_empty ] ] ) ;
12026: LD_ADDR_VAR 0 4
12030: PUSH
12031: LD_EXP 14
12035: PPUSH
12036: LD_INT 30
12038: PUSH
12039: LD_INT 32
12041: PUSH
12042: EMPTY
12043: LIST
12044: LIST
12045: PUSH
12046: LD_INT 58
12048: PUSH
12049: EMPTY
12050: LIST
12051: PUSH
12052: EMPTY
12053: LIST
12054: LIST
12055: PPUSH
12056: CALL_OW 72
12060: ST_TO_ADDR
// if not empty and UnitFilter ( ruOutpost , [ f_btype , b_barracks ] ) then
12061: LD_VAR 0 4
12065: NOT
12066: PUSH
12067: LD_EXP 14
12071: PPUSH
12072: LD_INT 30
12074: PUSH
12075: LD_INT 5
12077: PUSH
12078: EMPTY
12079: LIST
12080: LIST
12081: PPUSH
12082: CALL_OW 72
12086: AND
12087: IFFALSE 12124
// begin ComEnterUnit ( tmp , UnitFilter ( ruOutpost , [ f_btype , b_barracks ] ) [ 1 ] ) ;
12089: LD_VAR 0 1
12093: PPUSH
12094: LD_EXP 14
12098: PPUSH
12099: LD_INT 30
12101: PUSH
12102: LD_INT 5
12104: PUSH
12105: EMPTY
12106: LIST
12107: LIST
12108: PPUSH
12109: CALL_OW 72
12113: PUSH
12114: LD_INT 1
12116: ARRAY
12117: PPUSH
12118: CALL_OW 120
// exit ;
12122: GO 12234
// end ; j := UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) ;
12124: LD_ADDR_VAR 0 6
12128: PUSH
12129: LD_VAR 0 1
12133: PPUSH
12134: LD_INT 3
12136: PUSH
12137: LD_INT 54
12139: PUSH
12140: EMPTY
12141: LIST
12142: PUSH
12143: EMPTY
12144: LIST
12145: LIST
12146: PPUSH
12147: CALL_OW 72
12151: ST_TO_ADDR
// if j < empty then
12152: LD_VAR 0 6
12156: PUSH
12157: LD_VAR 0 4
12161: LESS
12162: IFFALSE 12176
// k := j else
12164: LD_ADDR_VAR 0 7
12168: PUSH
12169: LD_VAR 0 6
12173: ST_TO_ADDR
12174: GO 12186
// k := empty ;
12176: LD_ADDR_VAR 0 7
12180: PUSH
12181: LD_VAR 0 4
12185: ST_TO_ADDR
// for i = 1 to k do
12186: LD_ADDR_VAR 0 5
12190: PUSH
12191: DOUBLE
12192: LD_INT 1
12194: DEC
12195: ST_TO_ADDR
12196: LD_VAR 0 7
12200: PUSH
12201: FOR_TO
12202: IFFALSE 12232
// ComEnterUnit ( j [ i ] , empty [ i ] ) ;
12204: LD_VAR 0 6
12208: PUSH
12209: LD_VAR 0 5
12213: ARRAY
12214: PPUSH
12215: LD_VAR 0 4
12219: PUSH
12220: LD_VAR 0 5
12224: ARRAY
12225: PPUSH
12226: CALL_OW 120
12230: GO 12201
12232: POP
12233: POP
// end ; end ;
12234: PPOPN 7
12236: END
// every 0 0$2 trigger GameType = 1 and outpostEscape and FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , 208 , 163 , 8 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_distxy , 208 , 163 , 14 ] ] ) do var i ;
12237: LD_EXP 2
12241: PUSH
12242: LD_INT 1
12244: EQUAL
12245: PUSH
12246: LD_EXP 27
12250: AND
12251: PUSH
12252: LD_INT 22
12254: PUSH
12255: LD_INT 1
12257: PUSH
12258: EMPTY
12259: LIST
12260: LIST
12261: PUSH
12262: LD_INT 92
12264: PUSH
12265: LD_INT 208
12267: PUSH
12268: LD_INT 163
12270: PUSH
12271: LD_INT 8
12273: PUSH
12274: EMPTY
12275: LIST
12276: LIST
12277: LIST
12278: LIST
12279: PUSH
12280: EMPTY
12281: LIST
12282: LIST
12283: PPUSH
12284: CALL_OW 69
12288: AND
12289: PUSH
12290: LD_INT 22
12292: PUSH
12293: LD_INT 3
12295: PUSH
12296: EMPTY
12297: LIST
12298: LIST
12299: PUSH
12300: LD_INT 21
12302: PUSH
12303: LD_INT 1
12305: PUSH
12306: EMPTY
12307: LIST
12308: LIST
12309: PUSH
12310: LD_INT 92
12312: PUSH
12313: LD_INT 208
12315: PUSH
12316: LD_INT 163
12318: PUSH
12319: LD_INT 14
12321: PUSH
12322: EMPTY
12323: LIST
12324: LIST
12325: LIST
12326: LIST
12327: PUSH
12328: EMPTY
12329: LIST
12330: LIST
12331: LIST
12332: PPUSH
12333: CALL_OW 69
12337: NOT
12338: AND
12339: IFFALSE 12644
12341: GO 12343
12343: DISABLE
12344: LD_INT 0
12346: PPUSH
// begin InGameOn ;
12347: CALL_OW 8
// CenterNowOnUnits ( playerCommander ) ;
12351: LD_EXP 9
12355: PPUSH
12356: CALL_OW 87
// wait ( 0 0$1 ) ;
12360: LD_INT 35
12362: PPUSH
12363: CALL_OW 67
// DialogueOn ;
12367: CALL_OW 6
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-BaseCaptured ) ;
12371: LD_EXP 9
12375: PPUSH
12376: LD_STRING D
12378: PUSH
12379: LD_STRING I
12381: PUSH
12382: LD_STRING J
12384: PUSH
12385: LD_STRING S
12387: PUSH
12388: EMPTY
12389: LIST
12390: LIST
12391: LIST
12392: PUSH
12393: LD_EXP 25
12397: ARRAY
12398: STR
12399: PUSH
12400: LD_STRING -1-BaseCaptured
12402: STR
12403: PPUSH
12404: CALL_OW 88
// SayRadio ( Powell , DP-1-BaseCaptured ) ;
12408: LD_EXP 12
12412: PPUSH
12413: LD_STRING DP-1-BaseCaptured
12415: PPUSH
12416: CALL_OW 94
// if sibBombAllowed then
12420: LD_EXP 23
12424: IFFALSE 12566
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -2-BaseCaptured ) ;
12426: LD_EXP 9
12430: PPUSH
12431: LD_STRING D
12433: PUSH
12434: LD_STRING I
12436: PUSH
12437: LD_STRING J
12439: PUSH
12440: LD_STRING S
12442: PUSH
12443: EMPTY
12444: LIST
12445: LIST
12446: LIST
12447: PUSH
12448: LD_EXP 25
12452: ARRAY
12453: STR
12454: PUSH
12455: LD_STRING -2-BaseCaptured
12457: STR
12458: PPUSH
12459: CALL_OW 88
// if commander = 1 then
12463: LD_EXP 25
12467: PUSH
12468: LD_INT 1
12470: EQUAL
12471: IFFALSE 12485
// SayRadio ( Powell , DP-2b-BaseCaptured ) ;
12473: LD_EXP 12
12477: PPUSH
12478: LD_STRING DP-2b-BaseCaptured
12480: PPUSH
12481: CALL_OW 94
// if commander = 2 then
12485: LD_EXP 25
12489: PUSH
12490: LD_INT 2
12492: EQUAL
12493: IFFALSE 12507
// SayRadio ( Powell , DP-2-BaseCaptured ) ;
12495: LD_EXP 12
12499: PPUSH
12500: LD_STRING DP-2-BaseCaptured
12502: PPUSH
12503: CALL_OW 94
// if commander = 3 then
12507: LD_EXP 25
12511: PUSH
12512: LD_INT 3
12514: EQUAL
12515: IFFALSE 12529
// SayRadio ( Powell , DP-2a-BaseCaptured ) ;
12517: LD_EXP 12
12521: PPUSH
12522: LD_STRING DP-2a-BaseCaptured
12524: PPUSH
12525: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -3-BaseCaptured ) ;
12529: LD_EXP 9
12533: PPUSH
12534: LD_STRING D
12536: PUSH
12537: LD_STRING I
12539: PUSH
12540: LD_STRING J
12542: PUSH
12543: LD_STRING S
12545: PUSH
12546: EMPTY
12547: LIST
12548: LIST
12549: LIST
12550: PUSH
12551: LD_EXP 25
12555: ARRAY
12556: STR
12557: PUSH
12558: LD_STRING -3-BaseCaptured
12560: STR
12561: PPUSH
12562: CALL_OW 88
// end ; DialogueOff ;
12566: CALL_OW 7
// InGameOff ;
12570: CALL_OW 9
// ChangeMissionObjectives ( O2 ) ;
12574: LD_STRING O2
12576: PPUSH
12577: CALL_OW 337
// for i in UnitFilter ( ruOutpost , [ f_type , unit_building ] ) do
12581: LD_ADDR_VAR 0 1
12585: PUSH
12586: LD_EXP 14
12590: PPUSH
12591: LD_INT 21
12593: PUSH
12594: LD_INT 3
12596: PUSH
12597: EMPTY
12598: LIST
12599: LIST
12600: PPUSH
12601: CALL_OW 72
12605: PUSH
12606: FOR_IN
12607: IFFALSE 12623
// SetSide ( i , 1 ) ;
12609: LD_VAR 0 1
12613: PPUSH
12614: LD_INT 1
12616: PPUSH
12617: CALL_OW 235
12621: GO 12606
12623: POP
12624: POP
// baseCaptured := true ;
12625: LD_ADDR_EXP 17
12629: PUSH
12630: LD_INT 1
12632: ST_TO_ADDR
// wait ( 0 0$35 ) ;
12633: LD_INT 1225
12635: PPUSH
12636: CALL_OW 67
// PrepareReinforcements ;
12640: CALL 9554 0 0
// end ;
12644: PPOPN 1
12646: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 167 , 197 , 20 ] ] ) > 3 do
12647: LD_INT 22
12649: PUSH
12650: LD_INT 3
12652: PUSH
12653: EMPTY
12654: LIST
12655: LIST
12656: PUSH
12657: LD_INT 92
12659: PUSH
12660: LD_INT 167
12662: PUSH
12663: LD_INT 197
12665: PUSH
12666: LD_INT 20
12668: PUSH
12669: EMPTY
12670: LIST
12671: LIST
12672: LIST
12673: LIST
12674: PUSH
12675: EMPTY
12676: LIST
12677: LIST
12678: PPUSH
12679: CALL_OW 69
12683: PUSH
12684: LD_INT 3
12686: GREATER
12687: IFFALSE 12704
12689: GO 12691
12691: DISABLE
// SayRadio ( Powell , DP-RuAttack ) ;
12692: LD_EXP 12
12696: PPUSH
12697: LD_STRING DP-RuAttack
12699: PPUSH
12700: CALL_OW 94
12704: END
// every 0 0$2 trigger not debug and SeeXY ( 1 , 168 , 74 ) and GetEnvironmentType ( 168 , 72 ) do
12705: LD_EXP 1
12709: NOT
12710: PUSH
12711: LD_INT 1
12713: PPUSH
12714: LD_INT 168
12716: PPUSH
12717: LD_INT 74
12719: PPUSH
12720: CALL_OW 293
12724: AND
12725: PUSH
12726: LD_INT 168
12728: PPUSH
12729: LD_INT 72
12731: PPUSH
12732: CALL_OW 553
12736: AND
12737: IFFALSE 12789
12739: GO 12741
12741: DISABLE
// begin CenterOnXY ( 168 , 72 ) ;
12742: LD_INT 168
12744: PPUSH
12745: LD_INT 72
12747: PPUSH
12748: CALL_OW 84
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Blockade ) ;
12752: LD_EXP 9
12756: PPUSH
12757: LD_STRING D
12759: PUSH
12760: LD_STRING I
12762: PUSH
12763: LD_STRING J
12765: PUSH
12766: LD_STRING S
12768: PUSH
12769: EMPTY
12770: LIST
12771: LIST
12772: LIST
12773: PUSH
12774: LD_EXP 25
12778: ARRAY
12779: STR
12780: PUSH
12781: LD_STRING -1-Blockade
12783: STR
12784: PPUSH
12785: CALL_OW 88
// end ;
12789: END
// every 0 0$2 trigger GameType = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_see , 4 ] ] ) do
12790: LD_EXP 2
12794: PUSH
12795: LD_INT 1
12797: EQUAL
12798: PUSH
12799: LD_INT 22
12801: PUSH
12802: LD_INT 1
12804: PUSH
12805: EMPTY
12806: LIST
12807: LIST
12808: PUSH
12809: LD_INT 101
12811: PUSH
12812: LD_INT 4
12814: PUSH
12815: EMPTY
12816: LIST
12817: LIST
12818: PUSH
12819: EMPTY
12820: LIST
12821: LIST
12822: PPUSH
12823: CALL_OW 69
12827: AND
12828: IFFALSE 13360
12830: GO 12832
12832: DISABLE
// begin ChangeSideFog ( 4 , 1 ) ;
12833: LD_INT 4
12835: PPUSH
12836: LD_INT 1
12838: PPUSH
12839: CALL_OW 343
// DialogueOn ;
12843: CALL_OW 6
// CenterNowOnUnits ( allyCommander ) ;
12847: LD_EXP 11
12851: PPUSH
12852: CALL_OW 87
// SayRadio ( allyCommander , DM-1-Contact ) ;
12856: LD_EXP 11
12860: PPUSH
12861: LD_STRING DM-1-Contact
12863: PPUSH
12864: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Contact ) ;
12868: LD_EXP 9
12872: PPUSH
12873: LD_STRING D
12875: PUSH
12876: LD_STRING I
12878: PUSH
12879: LD_STRING J
12881: PUSH
12882: LD_STRING S
12884: PUSH
12885: EMPTY
12886: LIST
12887: LIST
12888: LIST
12889: PUSH
12890: LD_EXP 25
12894: ARRAY
12895: STR
12896: PUSH
12897: LD_STRING -1-Contact
12899: STR
12900: PPUSH
12901: CALL_OW 88
// if commander = 1 then
12905: LD_EXP 25
12909: PUSH
12910: LD_INT 1
12912: EQUAL
12913: IFFALSE 13045
// begin SayRadio ( allyCommander , DM-2-Contact ) ;
12915: LD_EXP 11
12919: PPUSH
12920: LD_STRING DM-2-Contact
12922: PPUSH
12923: CALL_OW 94
// Say ( playerCommander , DI-2-Contact ) ;
12927: LD_EXP 9
12931: PPUSH
12932: LD_STRING DI-2-Contact
12934: PPUSH
12935: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) and GetAttitude ( 8 , 1 ) = att_enemy then
12939: LD_INT 22
12941: PUSH
12942: LD_INT 8
12944: PUSH
12945: EMPTY
12946: LIST
12947: LIST
12948: PUSH
12949: LD_INT 21
12951: PUSH
12952: LD_INT 1
12954: PUSH
12955: EMPTY
12956: LIST
12957: LIST
12958: PUSH
12959: EMPTY
12960: LIST
12961: LIST
12962: PPUSH
12963: CALL_OW 69
12967: PUSH
12968: LD_INT 8
12970: PPUSH
12971: LD_INT 1
12973: PPUSH
12974: CALL_OW 81
12978: PUSH
12979: LD_INT 2
12981: EQUAL
12982: AND
12983: IFFALSE 13009
// begin SayRadio ( allyCommander , DM-3-Contact ) ;
12985: LD_EXP 11
12989: PPUSH
12990: LD_STRING DM-3-Contact
12992: PPUSH
12993: CALL_OW 94
// Say ( playerCommander , DI-3-Contact ) ;
12997: LD_EXP 9
13001: PPUSH
13002: LD_STRING DI-3-Contact
13004: PPUSH
13005: CALL_OW 88
// end ; SayRadio ( allyCommander , DM-4-Contact ) ;
13009: LD_EXP 11
13013: PPUSH
13014: LD_STRING DM-4-Contact
13016: PPUSH
13017: CALL_OW 94
// Say ( playerCommander , DI-4-Contact ) ;
13021: LD_EXP 9
13025: PPUSH
13026: LD_STRING DI-4-Contact
13028: PPUSH
13029: CALL_OW 88
// SayRadio ( allyCommander , DM-5-Contact ) ;
13033: LD_EXP 11
13037: PPUSH
13038: LD_STRING DM-5-Contact
13040: PPUSH
13041: CALL_OW 94
// end ; if commander = 2 then
13045: LD_EXP 25
13049: PUSH
13050: LD_INT 2
13052: EQUAL
13053: IFFALSE 13185
// begin SayRadio ( allyCommander , DM-2c-Contact ) ;
13055: LD_EXP 11
13059: PPUSH
13060: LD_STRING DM-2c-Contact
13062: PPUSH
13063: CALL_OW 94
// Say ( playerCommander , DJ-2-Contact ) ;
13067: LD_EXP 9
13071: PPUSH
13072: LD_STRING DJ-2-Contact
13074: PPUSH
13075: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) and GetAttitude ( 8 , 1 ) = att_enemy then
13079: LD_INT 22
13081: PUSH
13082: LD_INT 8
13084: PUSH
13085: EMPTY
13086: LIST
13087: LIST
13088: PUSH
13089: LD_INT 21
13091: PUSH
13092: LD_INT 1
13094: PUSH
13095: EMPTY
13096: LIST
13097: LIST
13098: PUSH
13099: EMPTY
13100: LIST
13101: LIST
13102: PPUSH
13103: CALL_OW 69
13107: PUSH
13108: LD_INT 8
13110: PPUSH
13111: LD_INT 1
13113: PPUSH
13114: CALL_OW 81
13118: PUSH
13119: LD_INT 2
13121: EQUAL
13122: AND
13123: IFFALSE 13149
// begin SayRadio ( allyCommander , DM-3-Contact ) ;
13125: LD_EXP 11
13129: PPUSH
13130: LD_STRING DM-3-Contact
13132: PPUSH
13133: CALL_OW 94
// Say ( playerCommander , DJ-3-Contact ) ;
13137: LD_EXP 9
13141: PPUSH
13142: LD_STRING DJ-3-Contact
13144: PPUSH
13145: CALL_OW 88
// end ; SayRadio ( allyCommander , DM-4-Contact ) ;
13149: LD_EXP 11
13153: PPUSH
13154: LD_STRING DM-4-Contact
13156: PPUSH
13157: CALL_OW 94
// Say ( playerCommander , DJ-4-Contact ) ;
13161: LD_EXP 9
13165: PPUSH
13166: LD_STRING DJ-4-Contact
13168: PPUSH
13169: CALL_OW 88
// SayRadio ( allyCommander , DM-5a-Contact ) ;
13173: LD_EXP 11
13177: PPUSH
13178: LD_STRING DM-5a-Contact
13180: PPUSH
13181: CALL_OW 94
// end ; if commander = 3 then
13185: LD_EXP 25
13189: PUSH
13190: LD_INT 3
13192: EQUAL
13193: IFFALSE 13349
// begin SayRadio ( allyCommander , DM-2a-Contact ) ;
13195: LD_EXP 11
13199: PPUSH
13200: LD_STRING DM-2a-Contact
13202: PPUSH
13203: CALL_OW 94
// Say ( playerCommander , DS-2a-Contact ) ;
13207: LD_EXP 9
13211: PPUSH
13212: LD_STRING DS-2a-Contact
13214: PPUSH
13215: CALL_OW 88
// SayRadio ( allyCommander , DM-2b-Contact ) ;
13219: LD_EXP 11
13223: PPUSH
13224: LD_STRING DM-2b-Contact
13226: PPUSH
13227: CALL_OW 94
// Say ( playerCommander , DS-2b-Contact ) ;
13231: LD_EXP 9
13235: PPUSH
13236: LD_STRING DS-2b-Contact
13238: PPUSH
13239: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) and GetAttitude ( 8 , 1 ) = att_enemy then
13243: LD_INT 22
13245: PUSH
13246: LD_INT 8
13248: PUSH
13249: EMPTY
13250: LIST
13251: LIST
13252: PUSH
13253: LD_INT 21
13255: PUSH
13256: LD_INT 1
13258: PUSH
13259: EMPTY
13260: LIST
13261: LIST
13262: PUSH
13263: EMPTY
13264: LIST
13265: LIST
13266: PPUSH
13267: CALL_OW 69
13271: PUSH
13272: LD_INT 8
13274: PPUSH
13275: LD_INT 1
13277: PPUSH
13278: CALL_OW 81
13282: PUSH
13283: LD_INT 2
13285: EQUAL
13286: AND
13287: IFFALSE 13313
// begin SayRadio ( allyCommander , DM-3-Contact ) ;
13289: LD_EXP 11
13293: PPUSH
13294: LD_STRING DM-3-Contact
13296: PPUSH
13297: CALL_OW 94
// Say ( playerCommander , DS-3-Contact ) ;
13301: LD_EXP 9
13305: PPUSH
13306: LD_STRING DS-3-Contact
13308: PPUSH
13309: CALL_OW 88
// end ; SayRadio ( allyCommander , DM-4-Contact ) ;
13313: LD_EXP 11
13317: PPUSH
13318: LD_STRING DM-4-Contact
13320: PPUSH
13321: CALL_OW 94
// Say ( playerCommander , DS-4-Contact ) ;
13325: LD_EXP 9
13329: PPUSH
13330: LD_STRING DS-4-Contact
13332: PPUSH
13333: CALL_OW 88
// SayRadio ( allyCommander , DM-5-Contact ) ;
13337: LD_EXP 11
13341: PPUSH
13342: LD_STRING DM-5-Contact
13344: PPUSH
13345: CALL_OW 94
// end ; DialogueOff ;
13349: CALL_OW 7
// ChangeMissionObjectives ( O3 ) ;
13353: LD_STRING O3
13355: PPUSH
13356: CALL_OW 337
// end ;
13360: END
// every 0 0$10 trigger GameType = 1 and legDestCounter >= [ 15 , 20 , 25 ] [ Difficulty ] and FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_warehouse ] ] ) and FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] ] ) >= 5 do var time , sib , sources , i ;
13361: LD_EXP 2
13365: PUSH
13366: LD_INT 1
13368: EQUAL
13369: PUSH
13370: LD_EXP 18
13374: PUSH
13375: LD_INT 15
13377: PUSH
13378: LD_INT 20
13380: PUSH
13381: LD_INT 25
13383: PUSH
13384: EMPTY
13385: LIST
13386: LIST
13387: LIST
13388: PUSH
13389: LD_OWVAR 67
13393: ARRAY
13394: GREATEREQUAL
13395: AND
13396: PUSH
13397: LD_INT 22
13399: PUSH
13400: LD_INT 8
13402: PUSH
13403: EMPTY
13404: LIST
13405: LIST
13406: PUSH
13407: LD_INT 30
13409: PUSH
13410: LD_INT 1
13412: PUSH
13413: EMPTY
13414: LIST
13415: LIST
13416: PUSH
13417: EMPTY
13418: LIST
13419: LIST
13420: PPUSH
13421: CALL_OW 69
13425: AND
13426: PUSH
13427: LD_INT 22
13429: PUSH
13430: LD_INT 8
13432: PUSH
13433: EMPTY
13434: LIST
13435: LIST
13436: PUSH
13437: LD_INT 21
13439: PUSH
13440: LD_INT 3
13442: PUSH
13443: EMPTY
13444: LIST
13445: LIST
13446: PUSH
13447: EMPTY
13448: LIST
13449: LIST
13450: PPUSH
13451: CALL_OW 69
13455: PUSH
13456: LD_INT 5
13458: GREATEREQUAL
13459: AND
13460: IFFALSE 13983
13462: GO 13464
13464: DISABLE
13465: LD_INT 0
13467: PPUSH
13468: PPUSH
13469: PPUSH
13470: PPUSH
// begin DialogueOn ;
13471: CALL_OW 6
// SayRadio ( Farmer , DF-1-Leg ) ;
13475: LD_EXP 13
13479: PPUSH
13480: LD_STRING DF-1-Leg
13482: PPUSH
13483: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Leg ) ;
13487: LD_EXP 9
13491: PPUSH
13492: LD_STRING D
13494: PUSH
13495: LD_STRING I
13497: PUSH
13498: LD_STRING J
13500: PUSH
13501: LD_STRING S
13503: PUSH
13504: EMPTY
13505: LIST
13506: LIST
13507: LIST
13508: PUSH
13509: LD_EXP 25
13513: ARRAY
13514: STR
13515: PUSH
13516: LD_STRING -1-Leg
13518: STR
13519: PPUSH
13520: CALL_OW 88
// SayRadio ( Farmer , DF-2-Leg ) ;
13524: LD_EXP 13
13528: PPUSH
13529: LD_STRING DF-2-Leg
13531: PPUSH
13532: CALL_OW 94
// DialogueOff ;
13536: CALL_OW 7
// case Query ( QLegionOffer ) of 1 :
13540: LD_STRING QLegionOffer
13542: PPUSH
13543: CALL_OW 97
13547: PUSH
13548: LD_INT 1
13550: DOUBLE
13551: EQUAL
13552: IFTRUE 13556
13554: GO 13559
13556: POP
// ; 2 :
13557: GO 13573
13559: LD_INT 2
13561: DOUBLE
13562: EQUAL
13563: IFTRUE 13567
13565: GO 13572
13567: POP
// exit ; end ;
13568: GO 13983
13570: GO 13573
13572: POP
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -2-Leg ) ;
13573: LD_EXP 9
13577: PPUSH
13578: LD_STRING D
13580: PUSH
13581: LD_STRING I
13583: PUSH
13584: LD_STRING J
13586: PUSH
13587: LD_STRING S
13589: PUSH
13590: EMPTY
13591: LIST
13592: LIST
13593: LIST
13594: PUSH
13595: LD_EXP 25
13599: ARRAY
13600: STR
13601: PUSH
13602: LD_STRING -2-Leg
13604: STR
13605: PPUSH
13606: CALL_OW 88
// legOfferAccepted := true ;
13610: LD_ADDR_EXP 20
13614: PUSH
13615: LD_INT 1
13617: ST_TO_ADDR
// SetAreaMapShow ( legOfferArea , 1 ) ;
13618: LD_INT 21
13620: PPUSH
13621: LD_INT 1
13623: PPUSH
13624: CALL_OW 424
// CenterOnXY ( 190 , 227 ) ;
13628: LD_INT 190
13630: PPUSH
13631: LD_INT 227
13633: PPUSH
13634: CALL_OW 84
// time := [ 8 8$00 , 7 7$00 , 6 6$00 ] [ Difficulty ] ;
13638: LD_ADDR_VAR 0 1
13642: PUSH
13643: LD_INT 16800
13645: PUSH
13646: LD_INT 14700
13648: PUSH
13649: LD_INT 12600
13651: PUSH
13652: EMPTY
13653: LIST
13654: LIST
13655: LIST
13656: PUSH
13657: LD_OWVAR 67
13661: ARRAY
13662: ST_TO_ADDR
// sib := 100 ;
13663: LD_ADDR_VAR 0 2
13667: PUSH
13668: LD_INT 100
13670: ST_TO_ADDR
// disableGlobalTimer := true ;
13671: LD_ADDR_EXP 4
13675: PUSH
13676: LD_INT 1
13678: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13679: LD_INT 35
13681: PPUSH
13682: CALL_OW 67
// time := time - 0 0$1 ;
13686: LD_ADDR_VAR 0 1
13690: PUSH
13691: LD_VAR 0 1
13695: PUSH
13696: LD_INT 35
13698: MINUS
13699: ST_TO_ADDR
// sources := GetResourceArea ( legOfferArea , mat_siberit ) ;
13700: LD_ADDR_VAR 0 3
13704: PUSH
13705: LD_INT 21
13707: PPUSH
13708: LD_INT 3
13710: PPUSH
13711: CALL_OW 287
13715: ST_TO_ADDR
// display_strings := [ #SkrTime , tick , #Skr-LegOffer , sib , time ] ;
13716: LD_ADDR_OWVAR 47
13720: PUSH
13721: LD_STRING #SkrTime
13723: PUSH
13724: LD_OWVAR 1
13728: PUSH
13729: LD_STRING #Skr-LegOffer
13731: PUSH
13732: LD_VAR 0 2
13736: PUSH
13737: LD_VAR 0 1
13741: PUSH
13742: EMPTY
13743: LIST
13744: LIST
13745: LIST
13746: LIST
13747: LIST
13748: ST_TO_ADDR
// if sources then
13749: LD_VAR 0 3
13753: IFFALSE 13785
// begin sib := sib - sources * 10 ;
13755: LD_ADDR_VAR 0 2
13759: PUSH
13760: LD_VAR 0 2
13764: PUSH
13765: LD_VAR 0 3
13769: PUSH
13770: LD_INT 10
13772: MUL
13773: MINUS
13774: ST_TO_ADDR
// EraseResourceArea ( legOfferArea , mat_siberit ) ;
13775: LD_INT 21
13777: PPUSH
13778: LD_INT 3
13780: PPUSH
13781: CALL_OW 286
// end ; until time = 0 0$00 or sib <= 0 or not FilterAllUnits ( [ f_side , 8 ] ) ;
13785: LD_VAR 0 1
13789: PUSH
13790: LD_INT 0
13792: EQUAL
13793: PUSH
13794: LD_VAR 0 2
13798: PUSH
13799: LD_INT 0
13801: LESSEQUAL
13802: OR
13803: PUSH
13804: LD_INT 22
13806: PUSH
13807: LD_INT 8
13809: PUSH
13810: EMPTY
13811: LIST
13812: LIST
13813: PPUSH
13814: CALL_OW 69
13818: NOT
13819: OR
13820: IFFALSE 13679
// SetAreaMapShow ( legOfferArea , 0 ) ;
13822: LD_INT 21
13824: PPUSH
13825: LD_INT 0
13827: PPUSH
13828: CALL_OW 424
// disableGlobalTimer := false ;
13832: LD_ADDR_EXP 4
13836: PUSH
13837: LD_INT 0
13839: ST_TO_ADDR
// if sib <= 0 then
13840: LD_VAR 0 2
13844: PUSH
13845: LD_INT 0
13847: LESSEQUAL
13848: IFFALSE 13964
// begin legChangeSide := true ;
13850: LD_ADDR_EXP 21
13854: PUSH
13855: LD_INT 1
13857: ST_TO_ADDR
// SayRadio ( Farmer , DF-4y-Leg ) ;
13858: LD_EXP 13
13862: PPUSH
13863: LD_STRING DF-4y-Leg
13865: PPUSH
13866: CALL_OW 94
// ChangeMissionObjectives ( O3a ) ;
13870: LD_STRING O3a
13872: PPUSH
13873: CALL_OW 337
// ChangeSideFog ( 8 , 1 ) ;
13877: LD_INT 8
13879: PPUSH
13880: LD_INT 1
13882: PPUSH
13883: CALL_OW 343
// SetAttitude ( 8 , 1 , att_friend , true ) ;
13887: LD_INT 8
13889: PPUSH
13890: LD_INT 1
13892: PPUSH
13893: LD_INT 1
13895: PPUSH
13896: LD_INT 1
13898: PPUSH
13899: CALL_OW 80
// SetAttitude ( 8 , 4 , att_friend , true ) ;
13903: LD_INT 8
13905: PPUSH
13906: LD_INT 4
13908: PPUSH
13909: LD_INT 1
13911: PPUSH
13912: LD_INT 1
13914: PPUSH
13915: CALL_OW 80
// SetAttitude ( 8 , 6 , att_enemy , true ) ;
13919: LD_INT 8
13921: PPUSH
13922: LD_INT 6
13924: PPUSH
13925: LD_INT 2
13927: PPUSH
13928: LD_INT 1
13930: PPUSH
13931: CALL_OW 80
// SetAttitude ( 8 , 3 , att_enemy , true ) ;
13935: LD_INT 8
13937: PPUSH
13938: LD_INT 3
13940: PPUSH
13941: LD_INT 2
13943: PPUSH
13944: LD_INT 1
13946: PPUSH
13947: CALL_OW 80
// wait ( 0 0$30 ) ;
13951: LD_INT 1050
13953: PPUSH
13954: CALL_OW 67
// PrepareLegionReinforcements ;
13958: CALL 10254 0 0
// end else
13962: GO 13983
// begin ChangeMissionObjectives ( O3a ) ;
13964: LD_STRING O3a
13966: PPUSH
13967: CALL_OW 337
// SayRadio ( Farmer , DF-4n-Leg ) ;
13971: LD_EXP 13
13975: PPUSH
13976: LD_STRING DF-4n-Leg
13978: PPUSH
13979: CALL_OW 94
// end ; end ;
13983: PPOPN 4
13985: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) = 0 and GetAttitude ( 8 , 1 ) = att_enemy do
13986: LD_INT 22
13988: PUSH
13989: LD_INT 8
13991: PUSH
13992: EMPTY
13993: LIST
13994: LIST
13995: PUSH
13996: LD_INT 21
13998: PUSH
13999: LD_INT 1
14001: PUSH
14002: EMPTY
14003: LIST
14004: LIST
14005: PUSH
14006: EMPTY
14007: LIST
14008: LIST
14009: PPUSH
14010: CALL_OW 69
14014: PUSH
14015: LD_INT 0
14017: EQUAL
14018: PUSH
14019: LD_INT 8
14021: PPUSH
14022: LD_INT 1
14024: PPUSH
14025: CALL_OW 81
14029: PUSH
14030: LD_INT 2
14032: EQUAL
14033: AND
14034: IFFALSE 14046
14036: GO 14038
14038: DISABLE
// ChangeMissionObjectives ( O3a ) ;
14039: LD_STRING O3a
14041: PPUSH
14042: CALL_OW 337
14046: END
// every 0 0$1 trigger GameType = 1 and game and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) = 0 do
14047: LD_EXP 2
14051: PUSH
14052: LD_INT 1
14054: EQUAL
14055: PUSH
14056: LD_EXP 3
14060: AND
14061: PUSH
14062: LD_INT 22
14064: PUSH
14065: LD_INT 3
14067: PUSH
14068: EMPTY
14069: LIST
14070: LIST
14071: PUSH
14072: LD_INT 21
14074: PUSH
14075: LD_INT 1
14077: PUSH
14078: EMPTY
14079: LIST
14080: LIST
14081: PUSH
14082: EMPTY
14083: LIST
14084: LIST
14085: PPUSH
14086: CALL_OW 69
14090: PUSH
14091: LD_INT 0
14093: EQUAL
14094: AND
14095: PUSH
14096: LD_INT 22
14098: PUSH
14099: LD_INT 3
14101: PUSH
14102: EMPTY
14103: LIST
14104: LIST
14105: PUSH
14106: LD_INT 30
14108: PUSH
14109: LD_INT 1
14111: PUSH
14112: EMPTY
14113: LIST
14114: LIST
14115: PUSH
14116: EMPTY
14117: LIST
14118: LIST
14119: PPUSH
14120: CALL_OW 69
14124: PUSH
14125: LD_INT 0
14127: EQUAL
14128: AND
14129: IFFALSE 14367
14131: GO 14133
14133: DISABLE
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Win ) ;
14134: LD_EXP 9
14138: PPUSH
14139: LD_STRING D
14141: PUSH
14142: LD_STRING I
14144: PUSH
14145: LD_STRING J
14147: PUSH
14148: LD_STRING S
14150: PUSH
14151: EMPTY
14152: LIST
14153: LIST
14154: LIST
14155: PUSH
14156: LD_EXP 25
14160: ARRAY
14161: STR
14162: PUSH
14163: LD_STRING -1-Win
14165: STR
14166: PPUSH
14167: CALL_OW 88
// if tick >= [ 150 150$0 , 130 130$0 , 110 110$0 ] [ Difficulty ] then
14171: LD_OWVAR 1
14175: PUSH
14176: LD_INT 315000
14178: PUSH
14179: LD_INT 273000
14181: PUSH
14182: LD_INT 231000
14184: PUSH
14185: EMPTY
14186: LIST
14187: LIST
14188: LIST
14189: PUSH
14190: LD_OWVAR 67
14194: ARRAY
14195: GREATEREQUAL
14196: IFFALSE 14211
// AddMedal ( med1 , - 1 ) else
14198: LD_STRING med1
14200: PPUSH
14201: LD_INT 1
14203: NEG
14204: PPUSH
14205: CALL_OW 101
14209: GO 14221
// AddMedal ( med1 , 1 ) ;
14211: LD_STRING med1
14213: PPUSH
14214: LD_INT 1
14216: PPUSH
14217: CALL_OW 101
// if allyDestCounter >= [ 20 , 15 , 10 ] [ Difficulty ] then
14221: LD_EXP 22
14225: PUSH
14226: LD_INT 20
14228: PUSH
14229: LD_INT 15
14231: PUSH
14232: LD_INT 10
14234: PUSH
14235: EMPTY
14236: LIST
14237: LIST
14238: LIST
14239: PUSH
14240: LD_OWVAR 67
14244: ARRAY
14245: GREATEREQUAL
14246: IFFALSE 14261
// AddMedal ( med2 , - 1 ) else
14248: LD_STRING med2
14250: PPUSH
14251: LD_INT 1
14253: NEG
14254: PPUSH
14255: CALL_OW 101
14259: GO 14271
// AddMedal ( med2 , 1 ) ;
14261: LD_STRING med2
14263: PPUSH
14264: LD_INT 1
14266: PPUSH
14267: CALL_OW 101
// if GetAttitude ( 8 , 1 ) = att_friend then
14271: LD_INT 8
14273: PPUSH
14274: LD_INT 1
14276: PPUSH
14277: CALL_OW 81
14281: PUSH
14282: LD_INT 1
14284: EQUAL
14285: IFFALSE 14299
// AddMedal ( med3 , 1 ) else
14287: LD_STRING med3
14289: PPUSH
14290: LD_INT 1
14292: PPUSH
14293: CALL_OW 101
14297: GO 14356
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) = 0 then
14299: LD_INT 22
14301: PUSH
14302: LD_INT 8
14304: PUSH
14305: EMPTY
14306: LIST
14307: LIST
14308: PUSH
14309: LD_INT 21
14311: PUSH
14312: LD_INT 1
14314: PUSH
14315: EMPTY
14316: LIST
14317: LIST
14318: PUSH
14319: EMPTY
14320: LIST
14321: LIST
14322: PPUSH
14323: CALL_OW 69
14327: PUSH
14328: LD_INT 0
14330: EQUAL
14331: IFFALSE 14345
// AddMedal ( med3 , 2 ) else
14333: LD_STRING med3
14335: PPUSH
14336: LD_INT 2
14338: PPUSH
14339: CALL_OW 101
14343: GO 14356
// AddMedal ( med3 , - 1 ) ;
14345: LD_STRING med3
14347: PPUSH
14348: LD_INT 1
14350: NEG
14351: PPUSH
14352: CALL_OW 101
// GiveMedals ( MAIN ) ;
14356: LD_STRING MAIN
14358: PPUSH
14359: CALL_OW 102
// YouWin ;
14363: CALL_OW 103
// end ;
14367: END
// every 10 trigger GameType = 1 and staticMines and FilterUnitsInArea ( minesArea , [ f_enemy , 8 ] ) do var i , j , tmp , x , y ;
14368: LD_EXP 2
14372: PUSH
14373: LD_INT 1
14375: EQUAL
14376: PUSH
14377: LD_EXP 16
14381: AND
14382: PUSH
14383: LD_INT 20
14385: PPUSH
14386: LD_INT 81
14388: PUSH
14389: LD_INT 8
14391: PUSH
14392: EMPTY
14393: LIST
14394: LIST
14395: PPUSH
14396: CALL_OW 70
14400: AND
14401: IFFALSE 14680
14403: GO 14405
14405: DISABLE
14406: LD_INT 0
14408: PPUSH
14409: PPUSH
14410: PPUSH
14411: PPUSH
14412: PPUSH
// begin enable ;
14413: ENABLE
// tmp := FilterUnitsInArea ( minesArea , [ f_enemy , 8 ] ) ;
14414: LD_ADDR_VAR 0 3
14418: PUSH
14419: LD_INT 20
14421: PPUSH
14422: LD_INT 81
14424: PUSH
14425: LD_INT 8
14427: PUSH
14428: EMPTY
14429: LIST
14430: LIST
14431: PPUSH
14432: CALL_OW 70
14436: ST_TO_ADDR
// if not tmp then
14437: LD_VAR 0 3
14441: NOT
14442: IFFALSE 14446
// exit ;
14444: GO 14680
// for i in tmp do
14446: LD_ADDR_VAR 0 1
14450: PUSH
14451: LD_VAR 0 3
14455: PUSH
14456: FOR_IN
14457: IFFALSE 14678
// begin x := GetX ( i ) ;
14459: LD_ADDR_VAR 0 4
14463: PUSH
14464: LD_VAR 0 1
14468: PPUSH
14469: CALL_OW 250
14473: ST_TO_ADDR
// y := GetY ( i ) ;
14474: LD_ADDR_VAR 0 5
14478: PUSH
14479: LD_VAR 0 1
14483: PPUSH
14484: CALL_OW 251
14488: ST_TO_ADDR
// if MineAtPos ( x , y ) then
14489: LD_VAR 0 4
14493: PPUSH
14494: LD_VAR 0 5
14498: PPUSH
14499: CALL_OW 458
14503: IFFALSE 14676
// begin LaunchMineAtPos ( x , y , 8 ) ;
14505: LD_VAR 0 4
14509: PPUSH
14510: LD_VAR 0 5
14514: PPUSH
14515: LD_INT 8
14517: PPUSH
14518: CALL_OW 456
// if not dialogueMineDetected then
14522: LD_EXP 28
14526: NOT
14527: IFFALSE 14588
// begin CenterNowOnXY ( x , y ) ;
14529: LD_VAR 0 4
14533: PPUSH
14534: LD_VAR 0 5
14538: PPUSH
14539: CALL_OW 86
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Mine ) ;
14543: LD_EXP 9
14547: PPUSH
14548: LD_STRING D
14550: PUSH
14551: LD_STRING I
14553: PUSH
14554: LD_STRING J
14556: PUSH
14557: LD_STRING S
14559: PUSH
14560: EMPTY
14561: LIST
14562: LIST
14563: LIST
14564: PUSH
14565: LD_EXP 25
14569: ARRAY
14570: STR
14571: PUSH
14572: LD_STRING -1-Mine
14574: STR
14575: PPUSH
14576: CALL_OW 88
// dialogueMineDetected := true ;
14580: LD_ADDR_EXP 28
14584: PUSH
14585: LD_INT 1
14587: ST_TO_ADDR
// end ; for j = 1 to staticMines do
14588: LD_ADDR_VAR 0 2
14592: PUSH
14593: DOUBLE
14594: LD_INT 1
14596: DEC
14597: ST_TO_ADDR
14598: LD_EXP 16
14602: PUSH
14603: FOR_TO
14604: IFFALSE 14674
// if staticMines [ j ] [ 1 ] = x and staticMines [ j ] [ 2 ] = y then
14606: LD_EXP 16
14610: PUSH
14611: LD_VAR 0 2
14615: ARRAY
14616: PUSH
14617: LD_INT 1
14619: ARRAY
14620: PUSH
14621: LD_VAR 0 4
14625: EQUAL
14626: PUSH
14627: LD_EXP 16
14631: PUSH
14632: LD_VAR 0 2
14636: ARRAY
14637: PUSH
14638: LD_INT 2
14640: ARRAY
14641: PUSH
14642: LD_VAR 0 5
14646: EQUAL
14647: AND
14648: IFFALSE 14672
// begin staticMines := Delete ( staticMines , j ) ;
14650: LD_ADDR_EXP 16
14654: PUSH
14655: LD_EXP 16
14659: PPUSH
14660: LD_VAR 0 2
14664: PPUSH
14665: CALL_OW 3
14669: ST_TO_ADDR
// break ;
14670: GO 14674
// end ;
14672: GO 14603
14674: POP
14675: POP
// end ; end ;
14676: GO 14456
14678: POP
14679: POP
// end ;
14680: PPOPN 5
14682: END
// every 30 30$00 + 50 50$00 trigger GameType = 1 and game and sibBombAllowed and UnitFilter ( mc_bases [ mc_rus_1 ] , [ f_btype , b_factory ] ) do var bomb , e ;
14683: LD_EXP 2
14687: PUSH
14688: LD_INT 1
14690: EQUAL
14691: PUSH
14692: LD_EXP 3
14696: AND
14697: PUSH
14698: LD_EXP 23
14702: AND
14703: PUSH
14704: LD_EXP 44
14708: PUSH
14709: LD_EXP 7
14713: ARRAY
14714: PPUSH
14715: LD_INT 30
14717: PUSH
14718: LD_INT 3
14720: PUSH
14721: EMPTY
14722: LIST
14723: LIST
14724: PPUSH
14725: CALL_OW 72
14729: AND
14730: IFFALSE 14934
14732: GO 14734
14734: DISABLE
14735: LD_INT 0
14737: PPUSH
14738: PPUSH
// begin enable ;
14739: ENABLE
// MC_InsertProduceList ( mc_rus_1 , [ [ ru_heavy_wheeled , engine_siberite , control_computer , ru_siberium_rocket ] ] ) ;
14740: LD_EXP 7
14744: PPUSH
14745: LD_INT 23
14747: PUSH
14748: LD_INT 3
14750: PUSH
14751: LD_INT 3
14753: PUSH
14754: LD_INT 48
14756: PUSH
14757: EMPTY
14758: LIST
14759: LIST
14760: LIST
14761: LIST
14762: PUSH
14763: EMPTY
14764: LIST
14765: PPUSH
14766: CALL 86450 0 2
// repeat wait ( 0 0$1 ) ;
14770: LD_INT 35
14772: PPUSH
14773: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) ;
14777: LD_INT 22
14779: PUSH
14780: LD_INT 3
14782: PUSH
14783: EMPTY
14784: LIST
14785: LIST
14786: PUSH
14787: LD_INT 34
14789: PUSH
14790: LD_INT 48
14792: PUSH
14793: EMPTY
14794: LIST
14795: LIST
14796: PUSH
14797: EMPTY
14798: LIST
14799: LIST
14800: PPUSH
14801: CALL_OW 69
14805: IFFALSE 14770
// bomb := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) ;
14807: LD_ADDR_VAR 0 1
14811: PUSH
14812: LD_INT 22
14814: PUSH
14815: LD_INT 3
14817: PUSH
14818: EMPTY
14819: LIST
14820: LIST
14821: PUSH
14822: LD_INT 34
14824: PUSH
14825: LD_INT 48
14827: PUSH
14828: EMPTY
14829: LIST
14830: LIST
14831: PUSH
14832: EMPTY
14833: LIST
14834: LIST
14835: PPUSH
14836: CALL_OW 69
14840: ST_TO_ADDR
// e := FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_type , unit_building ] ] ) ;
14841: LD_ADDR_VAR 0 2
14845: PUSH
14846: LD_INT 81
14848: PUSH
14849: LD_INT 3
14851: PUSH
14852: EMPTY
14853: LIST
14854: LIST
14855: PUSH
14856: LD_INT 21
14858: PUSH
14859: LD_INT 3
14861: PUSH
14862: EMPTY
14863: LIST
14864: LIST
14865: PUSH
14866: EMPTY
14867: LIST
14868: LIST
14869: PPUSH
14870: CALL_OW 69
14874: ST_TO_ADDR
// if e then
14875: LD_VAR 0 2
14879: IFFALSE 14905
// e := NearestUnitToUnit ( e , bomb [ 1 ] ) ;
14881: LD_ADDR_VAR 0 2
14885: PUSH
14886: LD_VAR 0 2
14890: PPUSH
14891: LD_VAR 0 1
14895: PUSH
14896: LD_INT 1
14898: ARRAY
14899: PPUSH
14900: CALL_OW 74
14904: ST_TO_ADDR
// ComAttackPlace ( bomb , GetX ( e ) , GetY ( e ) ) ;
14905: LD_VAR 0 1
14909: PPUSH
14910: LD_VAR 0 2
14914: PPUSH
14915: CALL_OW 250
14919: PPUSH
14920: LD_VAR 0 2
14924: PPUSH
14925: CALL_OW 251
14929: PPUSH
14930: CALL_OW 116
// end ;
14934: PPOPN 2
14936: END
// every 0 0$2 trigger Difficulty > 1 and UnitFilter ( mc_bases [ mc_rus_1 ] , [ f_class , 3 ] ) and GameType = 1 and game and GetTech ( tech_Behemoth , 3 ) = state_researched do var tmp , i ;
14937: LD_OWVAR 67
14941: PUSH
14942: LD_INT 1
14944: GREATER
14945: PUSH
14946: LD_EXP 44
14950: PUSH
14951: LD_EXP 7
14955: ARRAY
14956: PPUSH
14957: LD_INT 25
14959: PUSH
14960: LD_INT 3
14962: PUSH
14963: EMPTY
14964: LIST
14965: LIST
14966: PPUSH
14967: CALL_OW 72
14971: AND
14972: PUSH
14973: LD_EXP 2
14977: PUSH
14978: LD_INT 1
14980: EQUAL
14981: AND
14982: PUSH
14983: LD_EXP 3
14987: AND
14988: PUSH
14989: LD_INT 23
14991: PPUSH
14992: LD_INT 3
14994: PPUSH
14995: CALL_OW 321
14999: PUSH
15000: LD_INT 2
15002: EQUAL
15003: AND
15004: IFFALSE 15131
15006: GO 15008
15008: DISABLE
15009: LD_INT 0
15011: PPUSH
15012: PPUSH
// begin tmp := UnitFilter ( mc_bases [ mc_rus_1 ] , [ f_class , 3 ] ) ;
15013: LD_ADDR_VAR 0 1
15017: PUSH
15018: LD_EXP 44
15022: PUSH
15023: LD_EXP 7
15027: ARRAY
15028: PPUSH
15029: LD_INT 25
15031: PUSH
15032: LD_INT 3
15034: PUSH
15035: EMPTY
15036: LIST
15037: LIST
15038: PPUSH
15039: CALL_OW 72
15043: ST_TO_ADDR
// if not tmp then
15044: LD_VAR 0 1
15048: NOT
15049: IFFALSE 15053
// exit ;
15051: GO 15131
// for i in tmp do
15053: LD_ADDR_VAR 0 2
15057: PUSH
15058: LD_VAR 0 1
15062: PUSH
15063: FOR_IN
15064: IFFALSE 15110
// begin SetTag ( i , 29 ) ;
15066: LD_VAR 0 2
15070: PPUSH
15071: LD_INT 29
15073: PPUSH
15074: CALL_OW 109
// ComExitBuilding ( i ) ;
15078: LD_VAR 0 2
15082: PPUSH
15083: CALL_OW 122
// AddComBuildBehemoth ( i , b_behemoth , 97 , 133 , 0 ) ;
15087: LD_VAR 0 2
15091: PPUSH
15092: LD_INT 37
15094: PPUSH
15095: LD_INT 97
15097: PPUSH
15098: LD_INT 133
15100: PPUSH
15101: LD_INT 0
15103: PPUSH
15104: CALL_OW 230
// end ;
15108: GO 15063
15110: POP
15111: POP
// wait ( 1 1$00 ) ;
15112: LD_INT 2100
15114: PPUSH
15115: CALL_OW 67
// MC_Reset ( mc_rus_1 , 29 ) ;
15119: LD_EXP 7
15123: PPUSH
15124: LD_INT 29
15126: PPUSH
15127: CALL 66833 0 2
// end ;
15131: PPOPN 2
15133: END
// every 7 7$00 trigger GameType = 1 and GetBType ( HexInfo ( 84 , 128 ) ) = b_warehouse and GetSide ( HexInfo ( 84 , 128 ) ) = 3 do var veh , depot ;
15134: LD_EXP 2
15138: PUSH
15139: LD_INT 1
15141: EQUAL
15142: PUSH
15143: LD_INT 84
15145: PPUSH
15146: LD_INT 128
15148: PPUSH
15149: CALL_OW 428
15153: PPUSH
15154: CALL_OW 266
15158: PUSH
15159: LD_INT 1
15161: EQUAL
15162: AND
15163: PUSH
15164: LD_INT 84
15166: PPUSH
15167: LD_INT 128
15169: PPUSH
15170: CALL_OW 428
15174: PPUSH
15175: CALL_OW 255
15179: PUSH
15180: LD_INT 3
15182: EQUAL
15183: AND
15184: IFFALSE 15357
15186: GO 15188
15188: DISABLE
15189: LD_INT 0
15191: PPUSH
15192: PPUSH
// begin enable ;
15193: ENABLE
// depot := HexInfo ( 84 , 128 ) ;
15194: LD_ADDR_VAR 0 2
15198: PUSH
15199: LD_INT 84
15201: PPUSH
15202: LD_INT 128
15204: PPUSH
15205: CALL_OW 428
15209: ST_TO_ADDR
// uc_side := 3 ;
15210: LD_ADDR_OWVAR 20
15214: PUSH
15215: LD_INT 3
15217: ST_TO_ADDR
// uc_nation := 3 ;
15218: LD_ADDR_OWVAR 21
15222: PUSH
15223: LD_INT 3
15225: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_siberite , control_computer , ru_cargo_bay , 0 ) ;
15226: LD_INT 21
15228: PPUSH
15229: LD_INT 3
15231: PPUSH
15232: LD_INT 3
15234: PPUSH
15235: LD_INT 51
15237: PPUSH
15238: LD_INT 0
15240: PPUSH
15241: CALL 26590 0 5
// veh := CreateVehicle ;
15245: LD_ADDR_VAR 0 1
15249: PUSH
15250: CALL_OW 45
15254: ST_TO_ADDR
// PlaceUnitXY ( veh , 126 , 227 , false ) ;
15255: LD_VAR 0 1
15259: PPUSH
15260: LD_INT 126
15262: PPUSH
15263: LD_INT 227
15265: PPUSH
15266: LD_INT 0
15268: PPUSH
15269: CALL_OW 48
// SetCargo ( veh , mat_oil , 100 ) ;
15273: LD_VAR 0 1
15277: PPUSH
15278: LD_INT 2
15280: PPUSH
15281: LD_INT 100
15283: PPUSH
15284: CALL_OW 290
// ComGive ( veh , depot ) ;
15288: LD_VAR 0 1
15292: PPUSH
15293: LD_VAR 0 2
15297: PPUSH
15298: CALL_OW 161
// AddComMoveXY ( veh , 126 , 227 ) ;
15302: LD_VAR 0 1
15306: PPUSH
15307: LD_INT 126
15309: PPUSH
15310: LD_INT 227
15312: PPUSH
15313: CALL_OW 171
// wait ( 0 0$10 ) ;
15317: LD_INT 350
15319: PPUSH
15320: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
15324: LD_INT 35
15326: PPUSH
15327: CALL_OW 67
// until IsAt ( veh , 126 , 227 ) ;
15331: LD_VAR 0 1
15335: PPUSH
15336: LD_INT 126
15338: PPUSH
15339: LD_INT 227
15341: PPUSH
15342: CALL_OW 307
15346: IFFALSE 15324
// RemoveUnit ( veh ) ;
15348: LD_VAR 0 1
15352: PPUSH
15353: CALL_OW 64
// end ;
15357: PPOPN 2
15359: END
// every 9 9$00 trigger GameType = 1 and outpostEscape and commander = 2 do var veh , depot ;
15360: LD_EXP 2
15364: PUSH
15365: LD_INT 1
15367: EQUAL
15368: PUSH
15369: LD_EXP 27
15373: AND
15374: PUSH
15375: LD_EXP 25
15379: PUSH
15380: LD_INT 2
15382: EQUAL
15383: AND
15384: IFFALSE 15576
15386: GO 15388
15388: DISABLE
15389: LD_INT 0
15391: PPUSH
15392: PPUSH
// begin enable ;
15393: ENABLE
// if tick >= [ 50 50$00 , 40 40$00 , 30 30$00 ] [ Difficulty ] then
15394: LD_OWVAR 1
15398: PUSH
15399: LD_INT 105000
15401: PUSH
15402: LD_INT 84000
15404: PUSH
15405: LD_INT 63000
15407: PUSH
15408: EMPTY
15409: LIST
15410: LIST
15411: LIST
15412: PUSH
15413: LD_OWVAR 67
15417: ARRAY
15418: GREATEREQUAL
15419: IFFALSE 15422
// disable ;
15421: DISABLE
// uc_side := 4 ;
15422: LD_ADDR_OWVAR 20
15426: PUSH
15427: LD_INT 4
15429: ST_TO_ADDR
// uc_nation := 1 ;
15430: LD_ADDR_OWVAR 21
15434: PUSH
15435: LD_INT 1
15437: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_cargo_bay , 0 ) ;
15438: LD_INT 2
15440: PPUSH
15441: LD_INT 3
15443: PPUSH
15444: LD_INT 3
15446: PPUSH
15447: LD_INT 12
15449: PPUSH
15450: LD_INT 0
15452: PPUSH
15453: CALL 26590 0 5
// veh := CreateVehicle ;
15457: LD_ADDR_VAR 0 1
15461: PUSH
15462: CALL_OW 45
15466: ST_TO_ADDR
// PlaceUnitXY ( veh , 229 , 226 , false ) ;
15467: LD_VAR 0 1
15471: PPUSH
15472: LD_INT 229
15474: PPUSH
15475: LD_INT 226
15477: PPUSH
15478: LD_INT 0
15480: PPUSH
15481: CALL_OW 48
// SetCargo ( veh , mat_cans , 100 ) ;
15485: LD_VAR 0 1
15489: PPUSH
15490: LD_INT 1
15492: PPUSH
15493: LD_INT 100
15495: PPUSH
15496: CALL_OW 290
// AddComMoveToArea ( veh , ruOutpostArea ) ;
15500: LD_VAR 0 1
15504: PPUSH
15505: LD_INT 25
15507: PPUSH
15508: CALL_OW 173
// AddComUnload ( veh ) ;
15512: LD_VAR 0 1
15516: PPUSH
15517: CALL_OW 219
// AddComMoveXY ( veh , 229 , 226 ) ;
15521: LD_VAR 0 1
15525: PPUSH
15526: LD_INT 229
15528: PPUSH
15529: LD_INT 226
15531: PPUSH
15532: CALL_OW 171
// wait ( 0 0$10 ) ;
15536: LD_INT 350
15538: PPUSH
15539: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
15543: LD_INT 35
15545: PPUSH
15546: CALL_OW 67
// until IsAt ( veh , 229 , 226 ) ;
15550: LD_VAR 0 1
15554: PPUSH
15555: LD_INT 229
15557: PPUSH
15558: LD_INT 226
15560: PPUSH
15561: CALL_OW 307
15565: IFFALSE 15543
// RemoveUnit ( veh ) ;
15567: LD_VAR 0 1
15571: PPUSH
15572: CALL_OW 64
// end ;
15576: PPOPN 2
15578: END
// every 15 15$00 trigger GameType = 1 and game and reinforceAllowed do var i , j , veh , tmp , amount ;
15579: LD_EXP 2
15583: PUSH
15584: LD_INT 1
15586: EQUAL
15587: PUSH
15588: LD_EXP 3
15592: AND
15593: PUSH
15594: LD_EXP 24
15598: AND
15599: IFFALSE 15932
15601: GO 15603
15603: DISABLE
15604: LD_INT 0
15606: PPUSH
15607: PPUSH
15608: PPUSH
15609: PPUSH
15610: PPUSH
// begin enable ;
15611: ENABLE
// tmp := [ ] ;
15612: LD_ADDR_VAR 0 4
15616: PUSH
15617: EMPTY
15618: ST_TO_ADDR
// if commander = 1 then
15619: LD_EXP 25
15623: PUSH
15624: LD_INT 1
15626: EQUAL
15627: IFFALSE 15639
// amount := 3 else
15629: LD_ADDR_VAR 0 5
15633: PUSH
15634: LD_INT 3
15636: ST_TO_ADDR
15637: GO 15647
// amount := 2 ;
15639: LD_ADDR_VAR 0 5
15643: PUSH
15644: LD_INT 2
15646: ST_TO_ADDR
// for i = 1 to amount do
15647: LD_ADDR_VAR 0 1
15651: PUSH
15652: DOUBLE
15653: LD_INT 1
15655: DEC
15656: ST_TO_ADDR
15657: LD_VAR 0 5
15661: PUSH
15662: FOR_TO
15663: IFFALSE 15827
// begin wait ( 0 0$5 ) ;
15665: LD_INT 175
15667: PPUSH
15668: CALL_OW 67
// for j = 1 to 3 do
15672: LD_ADDR_VAR 0 2
15676: PUSH
15677: DOUBLE
15678: LD_INT 1
15680: DEC
15681: ST_TO_ADDR
15682: LD_INT 3
15684: PUSH
15685: FOR_TO
15686: IFFALSE 15823
// begin uc_side := 4 ;
15688: LD_ADDR_OWVAR 20
15692: PUSH
15693: LD_INT 4
15695: ST_TO_ADDR
// uc_nation := 1 ;
15696: LD_ADDR_OWVAR 21
15700: PUSH
15701: LD_INT 1
15703: ST_TO_ADDR
// PrepareVehicle ( [ us_medium_tracked , us_morphling ] [ rand ( 1 , 2 ) ] , engine_siberite , control_computer , [ us_laser , us_double_gun , us_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
15704: LD_INT 3
15706: PUSH
15707: LD_INT 5
15709: PUSH
15710: EMPTY
15711: LIST
15712: LIST
15713: PUSH
15714: LD_INT 1
15716: PPUSH
15717: LD_INT 2
15719: PPUSH
15720: CALL_OW 12
15724: ARRAY
15725: PPUSH
15726: LD_INT 3
15728: PPUSH
15729: LD_INT 3
15731: PPUSH
15732: LD_INT 9
15734: PUSH
15735: LD_INT 5
15737: PUSH
15738: LD_INT 7
15740: PUSH
15741: EMPTY
15742: LIST
15743: LIST
15744: LIST
15745: PUSH
15746: LD_INT 1
15748: PPUSH
15749: LD_INT 3
15751: PPUSH
15752: CALL_OW 12
15756: ARRAY
15757: PPUSH
15758: LD_INT 100
15760: PPUSH
15761: CALL 26590 0 5
// veh := CreateVehicle ;
15765: LD_ADDR_VAR 0 3
15769: PUSH
15770: CALL_OW 45
15774: ST_TO_ADDR
// tmp := tmp ^ veh ;
15775: LD_ADDR_VAR 0 4
15779: PUSH
15780: LD_VAR 0 4
15784: PUSH
15785: LD_VAR 0 3
15789: ADD
15790: ST_TO_ADDR
// PlaceUnitArea ( veh , westSpawn , false ) ;
15791: LD_VAR 0 3
15795: PPUSH
15796: LD_INT 22
15798: PPUSH
15799: LD_INT 0
15801: PPUSH
15802: CALL_OW 49
// ComMoveXY ( veh , 119 , 215 ) ;
15806: LD_VAR 0 3
15810: PPUSH
15811: LD_INT 119
15813: PPUSH
15814: LD_INT 215
15816: PPUSH
15817: CALL_OW 111
// end ;
15821: GO 15685
15823: POP
15824: POP
// end ;
15825: GO 15662
15827: POP
15828: POP
// wait ( 0 0$3 ) ;
15829: LD_INT 105
15831: PPUSH
15832: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
15836: LD_INT 35
15838: PPUSH
15839: CALL_OW 67
// for i in tmp do
15843: LD_ADDR_VAR 0 1
15847: PUSH
15848: LD_VAR 0 4
15852: PUSH
15853: FOR_IN
15854: IFFALSE 15921
// if IsDead ( i ) then
15856: LD_VAR 0 1
15860: PPUSH
15861: CALL_OW 301
15865: IFFALSE 15885
// tmp := tmp diff i else
15867: LD_ADDR_VAR 0 4
15871: PUSH
15872: LD_VAR 0 4
15876: PUSH
15877: LD_VAR 0 1
15881: DIFF
15882: ST_TO_ADDR
15883: GO 15919
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 4 ] ) , i ) ) ;
15885: LD_VAR 0 1
15889: PPUSH
15890: LD_INT 81
15892: PUSH
15893: LD_INT 4
15895: PUSH
15896: EMPTY
15897: LIST
15898: LIST
15899: PPUSH
15900: CALL_OW 69
15904: PPUSH
15905: LD_VAR 0 1
15909: PPUSH
15910: CALL_OW 74
15914: PPUSH
15915: CALL_OW 115
15919: GO 15853
15921: POP
15922: POP
// until tmp = [ ] ;
15923: LD_VAR 0 4
15927: PUSH
15928: EMPTY
15929: EQUAL
15930: IFFALSE 15836
// end ;
15932: PPOPN 5
15934: END
// every 0 0$1 trigger GameType = 1 and game do var i , tmp ;
15935: LD_EXP 2
15939: PUSH
15940: LD_INT 1
15942: EQUAL
15943: PUSH
15944: LD_EXP 3
15948: AND
15949: IFFALSE 16050
15951: GO 15953
15953: DISABLE
15954: LD_INT 0
15956: PPUSH
15957: PPUSH
// begin enable ;
15958: ENABLE
// tmp := FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) ;
15959: LD_ADDR_VAR 0 2
15963: PUSH
15964: LD_INT 3
15966: PUSH
15967: LD_INT 22
15969: PUSH
15970: LD_INT 1
15972: PUSH
15973: EMPTY
15974: LIST
15975: LIST
15976: PUSH
15977: EMPTY
15978: LIST
15979: LIST
15980: PUSH
15981: LD_INT 32
15983: PUSH
15984: LD_INT 1
15986: PUSH
15987: EMPTY
15988: LIST
15989: LIST
15990: PUSH
15991: EMPTY
15992: LIST
15993: LIST
15994: PPUSH
15995: CALL_OW 69
15999: ST_TO_ADDR
// if tmp then
16000: LD_VAR 0 2
16004: IFFALSE 16050
// for i in tmp do
16006: LD_ADDR_VAR 0 1
16010: PUSH
16011: LD_VAR 0 2
16015: PUSH
16016: FOR_IN
16017: IFFALSE 16048
// if GetFuel ( i ) < 3 then
16019: LD_VAR 0 1
16023: PPUSH
16024: CALL_OW 261
16028: PUSH
16029: LD_INT 3
16031: LESS
16032: IFFALSE 16046
// SetFuel ( i , 3 ) ;
16034: LD_VAR 0 1
16038: PPUSH
16039: LD_INT 3
16041: PPUSH
16042: CALL_OW 240
16046: GO 16016
16048: POP
16049: POP
// end ;
16050: PPOPN 2
16052: END
// every 15 15$00 trigger game and GetAttitude ( 8 , 4 ) = att_enemy do var i , un , tmp ;
16053: LD_EXP 3
16057: PUSH
16058: LD_INT 8
16060: PPUSH
16061: LD_INT 4
16063: PPUSH
16064: CALL_OW 81
16068: PUSH
16069: LD_INT 2
16071: EQUAL
16072: AND
16073: IFFALSE 16283
16075: GO 16077
16077: DISABLE
16078: LD_INT 0
16080: PPUSH
16081: PPUSH
16082: PPUSH
// begin enable ;
16083: ENABLE
// tmp := [ ] ;
16084: LD_ADDR_VAR 0 3
16088: PUSH
16089: EMPTY
16090: ST_TO_ADDR
// for i = 1 to 4 do
16091: LD_ADDR_VAR 0 1
16095: PUSH
16096: DOUBLE
16097: LD_INT 1
16099: DEC
16100: ST_TO_ADDR
16101: LD_INT 4
16103: PUSH
16104: FOR_TO
16105: IFFALSE 16249
// begin uc_side := 8 ;
16107: LD_ADDR_OWVAR 20
16111: PUSH
16112: LD_INT 8
16114: ST_TO_ADDR
// uc_nation := nation_arabian ;
16115: LD_ADDR_OWVAR 21
16119: PUSH
16120: LD_INT 2
16122: ST_TO_ADDR
// PrepareVehicle ( ar_hovercraft , engine_combustion , control_apeman , [ ar_double_machine_gun , ar_light_gun ] [ rand ( 1 , 2 ) ] , rand ( 60 , 80 ) ) ;
16123: LD_INT 11
16125: PPUSH
16126: LD_INT 1
16128: PPUSH
16129: LD_INT 5
16131: PPUSH
16132: LD_INT 24
16134: PUSH
16135: LD_INT 23
16137: PUSH
16138: EMPTY
16139: LIST
16140: LIST
16141: PUSH
16142: LD_INT 1
16144: PPUSH
16145: LD_INT 2
16147: PPUSH
16148: CALL_OW 12
16152: ARRAY
16153: PPUSH
16154: LD_INT 60
16156: PPUSH
16157: LD_INT 80
16159: PPUSH
16160: CALL_OW 12
16164: PPUSH
16165: CALL 26590 0 5
// un := CreateVehicle ;
16169: LD_ADDR_VAR 0 2
16173: PUSH
16174: CALL_OW 45
16178: ST_TO_ADDR
// SetDir ( un , 2 ) ;
16179: LD_VAR 0 2
16183: PPUSH
16184: LD_INT 2
16186: PPUSH
16187: CALL_OW 233
// tmp := tmp ^ un ;
16191: LD_ADDR_VAR 0 3
16195: PUSH
16196: LD_VAR 0 3
16200: PUSH
16201: LD_VAR 0 2
16205: ADD
16206: ST_TO_ADDR
// PlaceUnitXY ( un , 88 , 2 , false ) ;
16207: LD_VAR 0 2
16211: PPUSH
16212: LD_INT 88
16214: PPUSH
16215: LD_INT 2
16217: PPUSH
16218: LD_INT 0
16220: PPUSH
16221: CALL_OW 48
// ComMoveXY ( un , 93 , 13 ) ;
16225: LD_VAR 0 2
16229: PPUSH
16230: LD_INT 93
16232: PPUSH
16233: LD_INT 13
16235: PPUSH
16236: CALL_OW 111
// wait ( 0 0$2 ) ;
16240: LD_INT 70
16242: PPUSH
16243: CALL_OW 67
// end ;
16247: GO 16104
16249: POP
16250: POP
// for i in tmp do
16251: LD_ADDR_VAR 0 1
16255: PUSH
16256: LD_VAR 0 3
16260: PUSH
16261: FOR_IN
16262: IFFALSE 16281
// AddComMoveXY ( i , 136 , 19 ) ;
16264: LD_VAR 0 1
16268: PPUSH
16269: LD_INT 136
16271: PPUSH
16272: LD_INT 19
16274: PPUSH
16275: CALL_OW 171
16279: GO 16261
16281: POP
16282: POP
// end ;
16283: PPOPN 3
16285: END
// every 7 7$30 + 7 7$30 trigger game do var i , base , tmp , target ;
16286: LD_EXP 3
16290: IFFALSE 17209
16292: GO 16294
16294: DISABLE
16295: LD_INT 0
16297: PPUSH
16298: PPUSH
16299: PPUSH
16300: PPUSH
// begin enable ;
16301: ENABLE
// base := mc_leg ;
16302: LD_ADDR_VAR 0 2
16306: PUSH
16307: LD_EXP 6
16311: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 8 ] , [ f_nation , 2 ] , [ f_btype , b_factory ] ] ) then
16312: LD_INT 22
16314: PUSH
16315: LD_INT 8
16317: PUSH
16318: EMPTY
16319: LIST
16320: LIST
16321: PUSH
16322: LD_INT 23
16324: PUSH
16325: LD_INT 2
16327: PUSH
16328: EMPTY
16329: LIST
16330: LIST
16331: PUSH
16332: LD_INT 30
16334: PUSH
16335: LD_INT 3
16337: PUSH
16338: EMPTY
16339: LIST
16340: LIST
16341: PUSH
16342: EMPTY
16343: LIST
16344: LIST
16345: LIST
16346: PPUSH
16347: CALL_OW 69
16351: NOT
16352: IFFALSE 16356
// exit ;
16354: GO 17209
// if Prob ( 40 ) then
16356: LD_INT 40
16358: PPUSH
16359: CALL_OW 13
16363: IFFALSE 16492
// begin MC_InsertProduceList ( base , [ [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_flame_thrower ] , ] ) ;
16365: LD_VAR 0 2
16369: PPUSH
16370: LD_INT 13
16372: PUSH
16373: LD_INT 1
16375: PUSH
16376: LD_INT 2
16378: PUSH
16379: LD_INT 28
16381: PUSH
16382: EMPTY
16383: LIST
16384: LIST
16385: LIST
16386: LIST
16387: PUSH
16388: LD_INT 13
16390: PUSH
16391: LD_INT 1
16393: PUSH
16394: LD_INT 2
16396: PUSH
16397: LD_INT 28
16399: PUSH
16400: EMPTY
16401: LIST
16402: LIST
16403: LIST
16404: LIST
16405: PUSH
16406: LD_INT 13
16408: PUSH
16409: LD_INT 1
16411: PUSH
16412: LD_INT 2
16414: PUSH
16415: LD_INT 28
16417: PUSH
16418: EMPTY
16419: LIST
16420: LIST
16421: LIST
16422: LIST
16423: PUSH
16424: LD_INT 13
16426: PUSH
16427: LD_INT 1
16429: PUSH
16430: LD_INT 2
16432: PUSH
16433: LD_INT 28
16435: PUSH
16436: EMPTY
16437: LIST
16438: LIST
16439: LIST
16440: LIST
16441: PUSH
16442: LD_INT 13
16444: PUSH
16445: LD_INT 1
16447: PUSH
16448: LD_INT 2
16450: PUSH
16451: LD_INT 28
16453: PUSH
16454: EMPTY
16455: LIST
16456: LIST
16457: LIST
16458: LIST
16459: PUSH
16460: LD_INT 13
16462: PUSH
16463: LD_INT 1
16465: PUSH
16466: LD_INT 2
16468: PUSH
16469: LD_INT 26
16471: PUSH
16472: EMPTY
16473: LIST
16474: LIST
16475: LIST
16476: LIST
16477: PUSH
16478: EMPTY
16479: LIST
16480: LIST
16481: LIST
16482: LIST
16483: LIST
16484: LIST
16485: PPUSH
16486: CALL 86450 0 2
// end else
16490: GO 16709
// begin MC_InsertProduceList ( base , [ [ ar_medium_trike , engine_combustion , control_remote , [ ar_gun , ar_flame_thrower , ar_flame_thrower ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_gun , ar_flame_thrower , ar_flame_thrower ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_flame_thrower , ar_flame_thrower , ar_selfpropelled_bomb ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_flame_thrower , ar_selfpropelled_bomb , ar_selfpropelled_bomb ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , ar_selfpropelled_bomb ] , [ ar_medium_trike , engine_combustion , control_remote , ar_flame_thrower ] , ] ) ;
16492: LD_VAR 0 2
16496: PPUSH
16497: LD_INT 13
16499: PUSH
16500: LD_INT 1
16502: PUSH
16503: LD_INT 2
16505: PUSH
16506: LD_INT 27
16508: PUSH
16509: LD_INT 26
16511: PUSH
16512: LD_INT 26
16514: PUSH
16515: EMPTY
16516: LIST
16517: LIST
16518: LIST
16519: PUSH
16520: LD_INT 1
16522: PPUSH
16523: LD_INT 3
16525: PPUSH
16526: CALL_OW 12
16530: ARRAY
16531: PUSH
16532: EMPTY
16533: LIST
16534: LIST
16535: LIST
16536: LIST
16537: PUSH
16538: LD_INT 13
16540: PUSH
16541: LD_INT 1
16543: PUSH
16544: LD_INT 2
16546: PUSH
16547: LD_INT 27
16549: PUSH
16550: LD_INT 26
16552: PUSH
16553: LD_INT 26
16555: PUSH
16556: EMPTY
16557: LIST
16558: LIST
16559: LIST
16560: PUSH
16561: LD_INT 1
16563: PPUSH
16564: LD_INT 3
16566: PPUSH
16567: CALL_OW 12
16571: ARRAY
16572: PUSH
16573: EMPTY
16574: LIST
16575: LIST
16576: LIST
16577: LIST
16578: PUSH
16579: LD_INT 13
16581: PUSH
16582: LD_INT 1
16584: PUSH
16585: LD_INT 2
16587: PUSH
16588: LD_INT 26
16590: PUSH
16591: LD_INT 26
16593: PUSH
16594: LD_INT 29
16596: PUSH
16597: EMPTY
16598: LIST
16599: LIST
16600: LIST
16601: PUSH
16602: LD_INT 1
16604: PPUSH
16605: LD_INT 3
16607: PPUSH
16608: CALL_OW 12
16612: ARRAY
16613: PUSH
16614: EMPTY
16615: LIST
16616: LIST
16617: LIST
16618: LIST
16619: PUSH
16620: LD_INT 13
16622: PUSH
16623: LD_INT 1
16625: PUSH
16626: LD_INT 2
16628: PUSH
16629: LD_INT 26
16631: PUSH
16632: LD_INT 29
16634: PUSH
16635: LD_INT 29
16637: PUSH
16638: EMPTY
16639: LIST
16640: LIST
16641: LIST
16642: PUSH
16643: LD_INT 1
16645: PPUSH
16646: LD_INT 3
16648: PPUSH
16649: CALL_OW 12
16653: ARRAY
16654: PUSH
16655: EMPTY
16656: LIST
16657: LIST
16658: LIST
16659: LIST
16660: PUSH
16661: LD_INT 13
16663: PUSH
16664: LD_INT 1
16666: PUSH
16667: LD_INT 2
16669: PUSH
16670: LD_INT 29
16672: PUSH
16673: EMPTY
16674: LIST
16675: LIST
16676: LIST
16677: LIST
16678: PUSH
16679: LD_INT 13
16681: PUSH
16682: LD_INT 1
16684: PUSH
16685: LD_INT 2
16687: PUSH
16688: LD_INT 26
16690: PUSH
16691: EMPTY
16692: LIST
16693: LIST
16694: LIST
16695: LIST
16696: PUSH
16697: EMPTY
16698: LIST
16699: LIST
16700: LIST
16701: LIST
16702: LIST
16703: LIST
16704: PPUSH
16705: CALL 86450 0 2
// end ; repeat wait ( 0 0$1 ) ;
16709: LD_INT 35
16711: PPUSH
16712: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= 6 or tick mod 10 10$00 = 0 ;
16716: LD_VAR 0 2
16720: PPUSH
16721: LD_INT 1
16723: PPUSH
16724: CALL 87868 0 2
16728: PUSH
16729: LD_INT 6
16731: GREATEREQUAL
16732: PUSH
16733: LD_OWVAR 1
16737: PUSH
16738: LD_INT 21000
16740: MOD
16741: PUSH
16742: LD_INT 0
16744: EQUAL
16745: OR
16746: IFFALSE 16709
// wait ( 0 0$30 ) ;
16748: LD_INT 1050
16750: PPUSH
16751: CALL_OW 67
// tmp := MC_GetVehicles ( base , true ) ;
16755: LD_ADDR_VAR 0 3
16759: PUSH
16760: LD_VAR 0 2
16764: PPUSH
16765: LD_INT 1
16767: PPUSH
16768: CALL 87868 0 2
16772: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff tmp ) ;
16773: LD_ADDR_EXP 63
16777: PUSH
16778: LD_EXP 63
16782: PPUSH
16783: LD_VAR 0 2
16787: PPUSH
16788: LD_EXP 63
16792: PUSH
16793: LD_VAR 0 2
16797: ARRAY
16798: PUSH
16799: LD_VAR 0 3
16803: DIFF
16804: PPUSH
16805: CALL_OW 1
16809: ST_TO_ADDR
// target := rand ( 0 , 2 ) ;
16810: LD_ADDR_VAR 0 4
16814: PUSH
16815: LD_INT 0
16817: PPUSH
16818: LD_INT 2
16820: PPUSH
16821: CALL_OW 12
16825: ST_TO_ADDR
// if legChangeSide then
16826: LD_EXP 21
16830: IFFALSE 16840
// target := 2 ;
16832: LD_ADDR_VAR 0 4
16836: PUSH
16837: LD_INT 2
16839: ST_TO_ADDR
// if target = 2 then
16840: LD_VAR 0 4
16844: PUSH
16845: LD_INT 2
16847: EQUAL
16848: IFFALSE 16976
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
16850: LD_ADDR_VAR 0 3
16854: PUSH
16855: LD_VAR 0 3
16859: PPUSH
16860: LD_INT 24
16862: PUSH
16863: LD_INT 250
16865: PUSH
16866: EMPTY
16867: LIST
16868: LIST
16869: PPUSH
16870: CALL_OW 72
16874: ST_TO_ADDR
// for i in tmp do
16875: LD_ADDR_VAR 0 1
16879: PUSH
16880: LD_VAR 0 3
16884: PUSH
16885: FOR_IN
16886: IFFALSE 16926
// if GetDistUnitXY ( i , 112 , 64 ) > 9 then
16888: LD_VAR 0 1
16892: PPUSH
16893: LD_INT 112
16895: PPUSH
16896: LD_INT 64
16898: PPUSH
16899: CALL_OW 297
16903: PUSH
16904: LD_INT 9
16906: GREATER
16907: IFFALSE 16924
// ComMoveXY ( i , 112 , 64 ) ;
16909: LD_VAR 0 1
16913: PPUSH
16914: LD_INT 112
16916: PPUSH
16917: LD_INT 64
16919: PPUSH
16920: CALL_OW 111
16924: GO 16885
16926: POP
16927: POP
// wait ( 0 0$1 ) ;
16928: LD_INT 35
16930: PPUSH
16931: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 112 , 64 , 9 ] ) >= ( tmp - 1 ) ;
16935: LD_VAR 0 3
16939: PPUSH
16940: LD_INT 92
16942: PUSH
16943: LD_INT 112
16945: PUSH
16946: LD_INT 64
16948: PUSH
16949: LD_INT 9
16951: PUSH
16952: EMPTY
16953: LIST
16954: LIST
16955: LIST
16956: LIST
16957: PPUSH
16958: CALL_OW 72
16962: PUSH
16963: LD_VAR 0 3
16967: PUSH
16968: LD_INT 1
16970: MINUS
16971: GREATEREQUAL
16972: IFFALSE 16850
// end else
16974: GO 17100
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
16976: LD_ADDR_VAR 0 3
16980: PUSH
16981: LD_VAR 0 3
16985: PPUSH
16986: LD_INT 24
16988: PUSH
16989: LD_INT 250
16991: PUSH
16992: EMPTY
16993: LIST
16994: LIST
16995: PPUSH
16996: CALL_OW 72
17000: ST_TO_ADDR
// for i in tmp do
17001: LD_ADDR_VAR 0 1
17005: PUSH
17006: LD_VAR 0 3
17010: PUSH
17011: FOR_IN
17012: IFFALSE 17052
// if GetDistUnitXY ( i , 174 , 94 ) > 9 then
17014: LD_VAR 0 1
17018: PPUSH
17019: LD_INT 174
17021: PPUSH
17022: LD_INT 94
17024: PPUSH
17025: CALL_OW 297
17029: PUSH
17030: LD_INT 9
17032: GREATER
17033: IFFALSE 17050
// ComMoveXY ( i , 174 , 94 ) ;
17035: LD_VAR 0 1
17039: PPUSH
17040: LD_INT 174
17042: PPUSH
17043: LD_INT 94
17045: PPUSH
17046: CALL_OW 111
17050: GO 17011
17052: POP
17053: POP
// wait ( 0 0$1 ) ;
17054: LD_INT 35
17056: PPUSH
17057: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 174 , 94 , 9 ] ) >= ( tmp - 1 ) ;
17061: LD_VAR 0 3
17065: PPUSH
17066: LD_INT 92
17068: PUSH
17069: LD_INT 174
17071: PUSH
17072: LD_INT 94
17074: PUSH
17075: LD_INT 9
17077: PUSH
17078: EMPTY
17079: LIST
17080: LIST
17081: LIST
17082: LIST
17083: PPUSH
17084: CALL_OW 72
17088: PUSH
17089: LD_VAR 0 3
17093: PUSH
17094: LD_INT 1
17096: MINUS
17097: GREATEREQUAL
17098: IFFALSE 16976
// end ; repeat wait ( 0 0$1 ) ;
17100: LD_INT 35
17102: PPUSH
17103: CALL_OW 67
// for i in tmp do
17107: LD_ADDR_VAR 0 1
17111: PUSH
17112: LD_VAR 0 3
17116: PUSH
17117: FOR_IN
17118: IFFALSE 17200
// begin if GetLives ( i ) > 251 then
17120: LD_VAR 0 1
17124: PPUSH
17125: CALL_OW 256
17129: PUSH
17130: LD_INT 251
17132: GREATER
17133: IFFALSE 17171
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 8 ] ) , i ) ) else
17135: LD_VAR 0 1
17139: PPUSH
17140: LD_INT 81
17142: PUSH
17143: LD_INT 8
17145: PUSH
17146: EMPTY
17147: LIST
17148: LIST
17149: PPUSH
17150: CALL_OW 69
17154: PPUSH
17155: LD_VAR 0 1
17159: PPUSH
17160: CALL_OW 74
17164: PPUSH
17165: CALL_OW 115
17169: GO 17198
// if IsDead ( i ) then
17171: LD_VAR 0 1
17175: PPUSH
17176: CALL_OW 301
17180: IFFALSE 17198
// tmp := tmp diff i ;
17182: LD_ADDR_VAR 0 3
17186: PUSH
17187: LD_VAR 0 3
17191: PUSH
17192: LD_VAR 0 1
17196: DIFF
17197: ST_TO_ADDR
// end ;
17198: GO 17117
17200: POP
17201: POP
// until not tmp ;
17202: LD_VAR 0 3
17206: NOT
17207: IFFALSE 17100
// end ;
17209: PPOPN 4
17211: END
// every 7 7$30 trigger game do var i , base , tmp , target , teleport ;
17212: LD_EXP 3
17216: IFFALSE 18204
17218: GO 17220
17220: DISABLE
17221: LD_INT 0
17223: PPUSH
17224: PPUSH
17225: PPUSH
17226: PPUSH
17227: PPUSH
// begin enable ;
17228: ENABLE
// if not UnitFilter ( mc_bases [ mc_rus_2 ] , [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) then
17229: LD_EXP 44
17233: PUSH
17234: LD_EXP 8
17238: ARRAY
17239: PPUSH
17240: LD_INT 22
17242: PUSH
17243: LD_INT 3
17245: PUSH
17246: EMPTY
17247: LIST
17248: LIST
17249: PUSH
17250: LD_INT 30
17252: PUSH
17253: LD_INT 3
17255: PUSH
17256: EMPTY
17257: LIST
17258: LIST
17259: PUSH
17260: EMPTY
17261: LIST
17262: LIST
17263: PPUSH
17264: CALL_OW 72
17268: NOT
17269: IFFALSE 17273
// exit ;
17271: GO 18204
// base := mc_rus_2 ;
17273: LD_ADDR_VAR 0 2
17277: PUSH
17278: LD_EXP 8
17282: ST_TO_ADDR
// teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) ;
17283: LD_ADDR_VAR 0 5
17287: PUSH
17288: LD_INT 22
17290: PUSH
17291: LD_INT 3
17293: PUSH
17294: EMPTY
17295: LIST
17296: LIST
17297: PUSH
17298: LD_INT 30
17300: PUSH
17301: LD_INT 34
17303: PUSH
17304: EMPTY
17305: LIST
17306: LIST
17307: PUSH
17308: EMPTY
17309: LIST
17310: LIST
17311: PPUSH
17312: CALL_OW 69
17316: ST_TO_ADDR
// if Prob ( 40 ) then
17317: LD_INT 40
17319: PPUSH
17320: CALL_OW 13
17324: IFFALSE 17453
// begin MC_InsertProduceList ( base , [ [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] ] ) ;
17326: LD_VAR 0 2
17330: PPUSH
17331: LD_INT 22
17333: PUSH
17334: LD_INT 3
17336: PUSH
17337: LD_INT 3
17339: PUSH
17340: LD_INT 49
17342: PUSH
17343: EMPTY
17344: LIST
17345: LIST
17346: LIST
17347: LIST
17348: PUSH
17349: LD_INT 22
17351: PUSH
17352: LD_INT 3
17354: PUSH
17355: LD_INT 3
17357: PUSH
17358: LD_INT 49
17360: PUSH
17361: EMPTY
17362: LIST
17363: LIST
17364: LIST
17365: LIST
17366: PUSH
17367: LD_INT 22
17369: PUSH
17370: LD_INT 3
17372: PUSH
17373: LD_INT 3
17375: PUSH
17376: LD_INT 49
17378: PUSH
17379: EMPTY
17380: LIST
17381: LIST
17382: LIST
17383: LIST
17384: PUSH
17385: LD_INT 24
17387: PUSH
17388: LD_INT 3
17390: PUSH
17391: LD_INT 3
17393: PUSH
17394: LD_INT 46
17396: PUSH
17397: EMPTY
17398: LIST
17399: LIST
17400: LIST
17401: LIST
17402: PUSH
17403: LD_INT 24
17405: PUSH
17406: LD_INT 3
17408: PUSH
17409: LD_INT 3
17411: PUSH
17412: LD_INT 46
17414: PUSH
17415: EMPTY
17416: LIST
17417: LIST
17418: LIST
17419: LIST
17420: PUSH
17421: LD_INT 24
17423: PUSH
17424: LD_INT 3
17426: PUSH
17427: LD_INT 3
17429: PUSH
17430: LD_INT 46
17432: PUSH
17433: EMPTY
17434: LIST
17435: LIST
17436: LIST
17437: LIST
17438: PUSH
17439: EMPTY
17440: LIST
17441: LIST
17442: LIST
17443: LIST
17444: LIST
17445: LIST
17446: PPUSH
17447: CALL 86450 0 2
// end else
17451: GO 17578
// begin MC_InsertProduceList ( base , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] ] ) ;
17453: LD_VAR 0 2
17457: PPUSH
17458: LD_INT 24
17460: PUSH
17461: LD_INT 3
17463: PUSH
17464: LD_INT 3
17466: PUSH
17467: LD_INT 47
17469: PUSH
17470: EMPTY
17471: LIST
17472: LIST
17473: LIST
17474: LIST
17475: PUSH
17476: LD_INT 24
17478: PUSH
17479: LD_INT 3
17481: PUSH
17482: LD_INT 3
17484: PUSH
17485: LD_INT 47
17487: PUSH
17488: EMPTY
17489: LIST
17490: LIST
17491: LIST
17492: LIST
17493: PUSH
17494: LD_INT 24
17496: PUSH
17497: LD_INT 3
17499: PUSH
17500: LD_INT 3
17502: PUSH
17503: LD_INT 47
17505: PUSH
17506: EMPTY
17507: LIST
17508: LIST
17509: LIST
17510: LIST
17511: PUSH
17512: LD_INT 24
17514: PUSH
17515: LD_INT 3
17517: PUSH
17518: LD_INT 3
17520: PUSH
17521: LD_INT 46
17523: PUSH
17524: EMPTY
17525: LIST
17526: LIST
17527: LIST
17528: LIST
17529: PUSH
17530: LD_INT 24
17532: PUSH
17533: LD_INT 3
17535: PUSH
17536: LD_INT 3
17538: PUSH
17539: LD_INT 46
17541: PUSH
17542: EMPTY
17543: LIST
17544: LIST
17545: LIST
17546: LIST
17547: PUSH
17548: LD_INT 24
17550: PUSH
17551: LD_INT 3
17553: PUSH
17554: LD_INT 3
17556: PUSH
17557: LD_INT 46
17559: PUSH
17560: EMPTY
17561: LIST
17562: LIST
17563: LIST
17564: LIST
17565: PUSH
17566: EMPTY
17567: LIST
17568: LIST
17569: LIST
17570: LIST
17571: LIST
17572: LIST
17573: PPUSH
17574: CALL 86450 0 2
// end ; if Difficulty > 1 then
17578: LD_OWVAR 67
17582: PUSH
17583: LD_INT 1
17585: GREATER
17586: IFFALSE 17618
// MC_InsertProduceList ( base , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] ] ) ;
17588: LD_VAR 0 2
17592: PPUSH
17593: LD_INT 24
17595: PUSH
17596: LD_INT 3
17598: PUSH
17599: LD_INT 3
17601: PUSH
17602: LD_INT 47
17604: PUSH
17605: EMPTY
17606: LIST
17607: LIST
17608: LIST
17609: LIST
17610: PUSH
17611: EMPTY
17612: LIST
17613: PPUSH
17614: CALL 86450 0 2
// repeat wait ( 0 0$1 ) ;
17618: LD_INT 35
17620: PPUSH
17621: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= [ 6 , 7 , 7 ] [ Difficulty ] or tick mod 10 10$00 = 0 ;
17625: LD_VAR 0 2
17629: PPUSH
17630: LD_INT 1
17632: PPUSH
17633: CALL 87868 0 2
17637: PUSH
17638: LD_INT 6
17640: PUSH
17641: LD_INT 7
17643: PUSH
17644: LD_INT 7
17646: PUSH
17647: EMPTY
17648: LIST
17649: LIST
17650: LIST
17651: PUSH
17652: LD_OWVAR 67
17656: ARRAY
17657: GREATEREQUAL
17658: PUSH
17659: LD_OWVAR 1
17663: PUSH
17664: LD_INT 21000
17666: MOD
17667: PUSH
17668: LD_INT 0
17670: EQUAL
17671: OR
17672: IFFALSE 17618
// wait ( 0 0$45 ) ;
17674: LD_INT 1575
17676: PPUSH
17677: CALL_OW 67
// tmp := MC_GetVehicles ( base , true ) ;
17681: LD_ADDR_VAR 0 3
17685: PUSH
17686: LD_VAR 0 2
17690: PPUSH
17691: LD_INT 1
17693: PPUSH
17694: CALL 87868 0 2
17698: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff tmp ) ;
17699: LD_ADDR_EXP 63
17703: PUSH
17704: LD_EXP 63
17708: PPUSH
17709: LD_VAR 0 2
17713: PPUSH
17714: LD_EXP 63
17718: PUSH
17719: LD_VAR 0 2
17723: ARRAY
17724: PUSH
17725: LD_VAR 0 3
17729: DIFF
17730: PPUSH
17731: CALL_OW 1
17735: ST_TO_ADDR
// target := rand ( 0 , 1 ) ;
17736: LD_ADDR_VAR 0 4
17740: PUSH
17741: LD_INT 0
17743: PPUSH
17744: LD_INT 1
17746: PPUSH
17747: CALL_OW 12
17751: ST_TO_ADDR
// if target then
17752: LD_VAR 0 4
17756: IFFALSE 17884
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
17758: LD_ADDR_VAR 0 3
17762: PUSH
17763: LD_VAR 0 3
17767: PPUSH
17768: LD_INT 24
17770: PUSH
17771: LD_INT 250
17773: PUSH
17774: EMPTY
17775: LIST
17776: LIST
17777: PPUSH
17778: CALL_OW 72
17782: ST_TO_ADDR
// for i in tmp do
17783: LD_ADDR_VAR 0 1
17787: PUSH
17788: LD_VAR 0 3
17792: PUSH
17793: FOR_IN
17794: IFFALSE 17834
// if GetDistUnitXY ( i , 84 , 32 ) > 9 then
17796: LD_VAR 0 1
17800: PPUSH
17801: LD_INT 84
17803: PPUSH
17804: LD_INT 32
17806: PPUSH
17807: CALL_OW 297
17811: PUSH
17812: LD_INT 9
17814: GREATER
17815: IFFALSE 17832
// ComMoveXY ( i , 84 , 32 ) ;
17817: LD_VAR 0 1
17821: PPUSH
17822: LD_INT 84
17824: PPUSH
17825: LD_INT 32
17827: PPUSH
17828: CALL_OW 111
17832: GO 17793
17834: POP
17835: POP
// wait ( 0 0$1 ) ;
17836: LD_INT 35
17838: PPUSH
17839: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 84 , 32 , 9 ] ) >= ( tmp - 1 ) ;
17843: LD_VAR 0 3
17847: PPUSH
17848: LD_INT 92
17850: PUSH
17851: LD_INT 84
17853: PUSH
17854: LD_INT 32
17856: PUSH
17857: LD_INT 9
17859: PUSH
17860: EMPTY
17861: LIST
17862: LIST
17863: LIST
17864: LIST
17865: PPUSH
17866: CALL_OW 72
17870: PUSH
17871: LD_VAR 0 3
17875: PUSH
17876: LD_INT 1
17878: MINUS
17879: GREATEREQUAL
17880: IFFALSE 17758
// end else
17882: GO 18044
// begin if teleport then
17884: LD_VAR 0 5
17888: IFFALSE 17908
// ComEnterUnit ( tmp , teleport [ 1 ] ) ;
17890: LD_VAR 0 3
17894: PPUSH
17895: LD_VAR 0 5
17899: PUSH
17900: LD_INT 1
17902: ARRAY
17903: PPUSH
17904: CALL_OW 120
// repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
17908: LD_ADDR_VAR 0 3
17912: PUSH
17913: LD_VAR 0 3
17917: PPUSH
17918: LD_INT 24
17920: PUSH
17921: LD_INT 250
17923: PUSH
17924: EMPTY
17925: LIST
17926: LIST
17927: PPUSH
17928: CALL_OW 72
17932: ST_TO_ADDR
// for i in tmp do
17933: LD_ADDR_VAR 0 1
17937: PUSH
17938: LD_VAR 0 3
17942: PUSH
17943: FOR_IN
17944: IFFALSE 17996
// if GetDistUnitXY ( i , 140 , 219 ) > 9 and not HasTask ( i ) then
17946: LD_VAR 0 1
17950: PPUSH
17951: LD_INT 140
17953: PPUSH
17954: LD_INT 219
17956: PPUSH
17957: CALL_OW 297
17961: PUSH
17962: LD_INT 9
17964: GREATER
17965: PUSH
17966: LD_VAR 0 1
17970: PPUSH
17971: CALL_OW 314
17975: NOT
17976: AND
17977: IFFALSE 17994
// AddComMoveXY ( i , 140 , 219 ) ;
17979: LD_VAR 0 1
17983: PPUSH
17984: LD_INT 140
17986: PPUSH
17987: LD_INT 219
17989: PPUSH
17990: CALL_OW 171
17994: GO 17943
17996: POP
17997: POP
// wait ( 0 0$1 ) ;
17998: LD_INT 35
18000: PPUSH
18001: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 140 , 219 , 9 ] ) >= ( tmp - 1 ) ;
18005: LD_VAR 0 3
18009: PPUSH
18010: LD_INT 92
18012: PUSH
18013: LD_INT 140
18015: PUSH
18016: LD_INT 219
18018: PUSH
18019: LD_INT 9
18021: PUSH
18022: EMPTY
18023: LIST
18024: LIST
18025: LIST
18026: LIST
18027: PPUSH
18028: CALL_OW 72
18032: PUSH
18033: LD_VAR 0 3
18037: PUSH
18038: LD_INT 1
18040: MINUS
18041: GREATEREQUAL
18042: IFFALSE 17908
// end ; repeat wait ( 0 0$1 ) ;
18044: LD_INT 35
18046: PPUSH
18047: CALL_OW 67
// for i in tmp do
18051: LD_ADDR_VAR 0 1
18055: PUSH
18056: LD_VAR 0 3
18060: PUSH
18061: FOR_IN
18062: IFFALSE 18195
// begin if GetLives ( i ) > 251 then
18064: LD_VAR 0 1
18068: PPUSH
18069: CALL_OW 256
18073: PUSH
18074: LD_INT 251
18076: GREATER
18077: IFFALSE 18166
// begin if GetWeapon ( i ) = ru_time_lapser then
18079: LD_VAR 0 1
18083: PPUSH
18084: CALL_OW 264
18088: PUSH
18089: LD_INT 49
18091: EQUAL
18092: IFFALSE 18130
// ComMoveUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) else
18094: LD_VAR 0 1
18098: PPUSH
18099: LD_INT 81
18101: PUSH
18102: LD_INT 3
18104: PUSH
18105: EMPTY
18106: LIST
18107: LIST
18108: PPUSH
18109: CALL_OW 69
18113: PPUSH
18114: LD_VAR 0 1
18118: PPUSH
18119: CALL_OW 74
18123: PPUSH
18124: CALL_OW 112
18128: GO 18164
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
18130: LD_VAR 0 1
18134: PPUSH
18135: LD_INT 81
18137: PUSH
18138: LD_INT 3
18140: PUSH
18141: EMPTY
18142: LIST
18143: LIST
18144: PPUSH
18145: CALL_OW 69
18149: PPUSH
18150: LD_VAR 0 1
18154: PPUSH
18155: CALL_OW 74
18159: PPUSH
18160: CALL_OW 115
// end else
18164: GO 18193
// if IsDead ( i ) then
18166: LD_VAR 0 1
18170: PPUSH
18171: CALL_OW 301
18175: IFFALSE 18193
// tmp := tmp diff i ;
18177: LD_ADDR_VAR 0 3
18181: PUSH
18182: LD_VAR 0 3
18186: PUSH
18187: LD_VAR 0 1
18191: DIFF
18192: ST_TO_ADDR
// end ;
18193: GO 18061
18195: POP
18196: POP
// until not tmp ;
18197: LD_VAR 0 3
18201: NOT
18202: IFFALSE 18044
// end ;
18204: PPOPN 5
18206: END
// every 12 12$30 + 11 11$30 trigger game do var i , base , tmp , target ;
18207: LD_EXP 3
18211: IFFALSE 18593
18213: GO 18215
18215: DISABLE
18216: LD_INT 0
18218: PPUSH
18219: PPUSH
18220: PPUSH
18221: PPUSH
// begin enable ;
18222: ENABLE
// base := mc_amer ;
18223: LD_ADDR_VAR 0 2
18227: PUSH
18228: LD_EXP 5
18232: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 4 ] , [ f_nation , 1 ] , [ f_btype , b_factory ] ] ) then
18233: LD_INT 22
18235: PUSH
18236: LD_INT 4
18238: PUSH
18239: EMPTY
18240: LIST
18241: LIST
18242: PUSH
18243: LD_INT 23
18245: PUSH
18246: LD_INT 1
18248: PUSH
18249: EMPTY
18250: LIST
18251: LIST
18252: PUSH
18253: LD_INT 30
18255: PUSH
18256: LD_INT 3
18258: PUSH
18259: EMPTY
18260: LIST
18261: LIST
18262: PUSH
18263: EMPTY
18264: LIST
18265: LIST
18266: LIST
18267: PPUSH
18268: CALL_OW 69
18272: NOT
18273: IFFALSE 18277
// exit ;
18275: GO 18593
// MC_InsertProduceList ( base , [ [ us_medium_tracked , engine_combustion , control_remote , us_double_gun ] , [ us_medium_tracked , engine_combustion , control_remote , us_laser ] , [ us_medium_tracked , engine_combustion , control_remote , us_rocket_launcher ] , [ us_medium_tracked , engine_combustion , control_remote , us_rocket_launcher ] , [ us_medium_tracked , engine_combustion , control_remote , us_rocket_launcher ] ] ) ;
18277: LD_VAR 0 2
18281: PPUSH
18282: LD_INT 3
18284: PUSH
18285: LD_INT 1
18287: PUSH
18288: LD_INT 2
18290: PUSH
18291: LD_INT 5
18293: PUSH
18294: EMPTY
18295: LIST
18296: LIST
18297: LIST
18298: LIST
18299: PUSH
18300: LD_INT 3
18302: PUSH
18303: LD_INT 1
18305: PUSH
18306: LD_INT 2
18308: PUSH
18309: LD_INT 9
18311: PUSH
18312: EMPTY
18313: LIST
18314: LIST
18315: LIST
18316: LIST
18317: PUSH
18318: LD_INT 3
18320: PUSH
18321: LD_INT 1
18323: PUSH
18324: LD_INT 2
18326: PUSH
18327: LD_INT 7
18329: PUSH
18330: EMPTY
18331: LIST
18332: LIST
18333: LIST
18334: LIST
18335: PUSH
18336: LD_INT 3
18338: PUSH
18339: LD_INT 1
18341: PUSH
18342: LD_INT 2
18344: PUSH
18345: LD_INT 7
18347: PUSH
18348: EMPTY
18349: LIST
18350: LIST
18351: LIST
18352: LIST
18353: PUSH
18354: LD_INT 3
18356: PUSH
18357: LD_INT 1
18359: PUSH
18360: LD_INT 2
18362: PUSH
18363: LD_INT 7
18365: PUSH
18366: EMPTY
18367: LIST
18368: LIST
18369: LIST
18370: LIST
18371: PUSH
18372: EMPTY
18373: LIST
18374: LIST
18375: LIST
18376: LIST
18377: LIST
18378: PPUSH
18379: CALL 86450 0 2
// repeat wait ( 0 0$1 ) ;
18383: LD_INT 35
18385: PPUSH
18386: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= 5 or tick mod 10 10$00 = 0 ;
18390: LD_VAR 0 2
18394: PPUSH
18395: LD_INT 1
18397: PPUSH
18398: CALL 87868 0 2
18402: PUSH
18403: LD_INT 5
18405: GREATEREQUAL
18406: PUSH
18407: LD_OWVAR 1
18411: PUSH
18412: LD_INT 21000
18414: MOD
18415: PUSH
18416: LD_INT 0
18418: EQUAL
18419: OR
18420: IFFALSE 18383
// wait ( 0 0$30 ) ;
18422: LD_INT 1050
18424: PPUSH
18425: CALL_OW 67
// tmp := MC_GetVehicles ( base , true ) ;
18429: LD_ADDR_VAR 0 3
18433: PUSH
18434: LD_VAR 0 2
18438: PPUSH
18439: LD_INT 1
18441: PPUSH
18442: CALL 87868 0 2
18446: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff tmp ) ;
18447: LD_ADDR_EXP 63
18451: PUSH
18452: LD_EXP 63
18456: PPUSH
18457: LD_VAR 0 2
18461: PPUSH
18462: LD_EXP 63
18466: PUSH
18467: LD_VAR 0 2
18471: ARRAY
18472: PUSH
18473: LD_VAR 0 3
18477: DIFF
18478: PPUSH
18479: CALL_OW 1
18483: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18484: LD_INT 35
18486: PPUSH
18487: CALL_OW 67
// for i in tmp do
18491: LD_ADDR_VAR 0 1
18495: PUSH
18496: LD_VAR 0 3
18500: PUSH
18501: FOR_IN
18502: IFFALSE 18584
// begin if GetLives ( i ) > 251 then
18504: LD_VAR 0 1
18508: PPUSH
18509: CALL_OW 256
18513: PUSH
18514: LD_INT 251
18516: GREATER
18517: IFFALSE 18555
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 4 ] ) , i ) ) else
18519: LD_VAR 0 1
18523: PPUSH
18524: LD_INT 81
18526: PUSH
18527: LD_INT 4
18529: PUSH
18530: EMPTY
18531: LIST
18532: LIST
18533: PPUSH
18534: CALL_OW 69
18538: PPUSH
18539: LD_VAR 0 1
18543: PPUSH
18544: CALL_OW 74
18548: PPUSH
18549: CALL_OW 115
18553: GO 18582
// if IsDead ( i ) then
18555: LD_VAR 0 1
18559: PPUSH
18560: CALL_OW 301
18564: IFFALSE 18582
// tmp := tmp diff i ;
18566: LD_ADDR_VAR 0 3
18570: PUSH
18571: LD_VAR 0 3
18575: PUSH
18576: LD_VAR 0 1
18580: DIFF
18581: ST_TO_ADDR
// end ;
18582: GO 18501
18584: POP
18585: POP
// until not tmp ;
18586: LD_VAR 0 3
18590: NOT
18591: IFFALSE 18484
// end ; end_of_file
18593: PPOPN 4
18595: END
// export function CustomEvent ( event ) ; begin
18596: LD_INT 0
18598: PPUSH
// end ;
18599: LD_VAR 0 2
18603: RET
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 = 4 then
18604: LD_VAR 0 1
18608: PUSH
18609: LD_INT 1
18611: EQUAL
18612: PUSH
18613: LD_VAR 0 2
18617: PUSH
18618: LD_INT 4
18620: EQUAL
18621: AND
18622: IFFALSE 18650
// begin SayRadio ( Powell , DP-Lost ) ;
18624: LD_EXP 12
18628: PPUSH
18629: LD_STRING DP-Lost
18631: PPUSH
18632: CALL_OW 94
// wait ( 0 0$2 ) ;
18636: LD_INT 70
18638: PPUSH
18639: CALL_OW 67
// YouLost ( FriendlyFire ) ;
18643: LD_STRING FriendlyFire
18645: PPUSH
18646: CALL_OW 104
// end ; end ;
18650: PPOPN 2
18652: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
18653: LD_VAR 0 1
18657: PPUSH
18658: CALL 103633 0 1
// if GameType = 1 then
18662: LD_EXP 2
18666: PUSH
18667: LD_INT 1
18669: EQUAL
18670: IFFALSE 18905
// begin if un = playerCommander then
18672: LD_VAR 0 1
18676: PUSH
18677: LD_EXP 9
18681: EQUAL
18682: IFFALSE 18691
// YouLost ( commanderDied ) ;
18684: LD_STRING commanderDied
18686: PPUSH
18687: CALL_OW 104
// if un = allyCommander then
18691: LD_VAR 0 1
18695: PUSH
18696: LD_EXP 11
18700: EQUAL
18701: IFFALSE 18710
// YouLost ( Theta ) ;
18703: LD_STRING Theta
18705: PPUSH
18706: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_building ] ] ] ) then
18710: LD_VAR 0 1
18714: PUSH
18715: LD_INT 22
18717: PUSH
18718: LD_INT 8
18720: PUSH
18721: EMPTY
18722: LIST
18723: LIST
18724: PUSH
18725: LD_INT 2
18727: PUSH
18728: LD_INT 21
18730: PUSH
18731: LD_INT 1
18733: PUSH
18734: EMPTY
18735: LIST
18736: LIST
18737: PUSH
18738: LD_INT 21
18740: PUSH
18741: LD_INT 3
18743: PUSH
18744: EMPTY
18745: LIST
18746: LIST
18747: PUSH
18748: EMPTY
18749: LIST
18750: LIST
18751: LIST
18752: PUSH
18753: EMPTY
18754: LIST
18755: LIST
18756: PPUSH
18757: CALL_OW 69
18761: IN
18762: IFFALSE 18778
// legDestCounter := legDestCounter + 1 ;
18764: LD_ADDR_EXP 18
18768: PUSH
18769: LD_EXP 18
18773: PUSH
18774: LD_INT 1
18776: PLUS
18777: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_building ] ] ] ) then
18778: LD_VAR 0 1
18782: PUSH
18783: LD_INT 22
18785: PUSH
18786: LD_INT 4
18788: PUSH
18789: EMPTY
18790: LIST
18791: LIST
18792: PUSH
18793: LD_INT 2
18795: PUSH
18796: LD_INT 21
18798: PUSH
18799: LD_INT 1
18801: PUSH
18802: EMPTY
18803: LIST
18804: LIST
18805: PUSH
18806: LD_INT 21
18808: PUSH
18809: LD_INT 3
18811: PUSH
18812: EMPTY
18813: LIST
18814: LIST
18815: PUSH
18816: EMPTY
18817: LIST
18818: LIST
18819: LIST
18820: PUSH
18821: EMPTY
18822: LIST
18823: LIST
18824: PPUSH
18825: CALL_OW 69
18829: IN
18830: IFFALSE 18846
// allyDestCounter := allyDestCounter + 1 ;
18832: LD_ADDR_EXP 22
18836: PUSH
18837: LD_EXP 22
18841: PUSH
18842: LD_INT 1
18844: PLUS
18845: ST_TO_ADDR
// if un in ruOutpost then
18846: LD_VAR 0 1
18850: PUSH
18851: LD_EXP 14
18855: IN
18856: IFFALSE 18905
// begin ruOutpost := ruOutpost diff un ;
18858: LD_ADDR_EXP 14
18862: PUSH
18863: LD_EXP 14
18867: PUSH
18868: LD_VAR 0 1
18872: DIFF
18873: ST_TO_ADDR
// ruEscape := Replace ( ruEscape , 1 , ruEscape [ 1 ] + 1 ) ;
18874: LD_ADDR_EXP 15
18878: PUSH
18879: LD_EXP 15
18883: PPUSH
18884: LD_INT 1
18886: PPUSH
18887: LD_EXP 15
18891: PUSH
18892: LD_INT 1
18894: ARRAY
18895: PUSH
18896: LD_INT 1
18898: PLUS
18899: PPUSH
18900: CALL_OW 1
18904: ST_TO_ADDR
// end ; end ; MCE_UnitDestroyed ( un ) ;
18905: LD_VAR 0 1
18909: PPUSH
18910: CALL 89842 0 1
// end ;
18914: PPOPN 1
18916: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
18917: LD_VAR 0 1
18921: PPUSH
18922: LD_VAR 0 2
18926: PPUSH
18927: CALL 92176 0 2
// end ;
18931: PPOPN 2
18933: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
18934: LD_VAR 0 1
18938: PPUSH
18939: CALL 91244 0 1
// end ;
18943: PPOPN 1
18945: END
// on BuildingComplete ( building ) do begin MCE_BuildingComplete ( building ) ;
18946: LD_VAR 0 1
18950: PPUSH
18951: CALL 91485 0 1
// end ;
18955: PPOPN 1
18957: END
// on ResearchComplete ( tech , lab ) do begin if tech = tech_LasDouble and GetSide ( lab ) = 1 then
18958: LD_VAR 0 1
18962: PUSH
18963: LD_INT 14
18965: EQUAL
18966: PUSH
18967: LD_VAR 0 2
18971: PPUSH
18972: CALL_OW 255
18976: PUSH
18977: LD_INT 1
18979: EQUAL
18980: AND
18981: IFFALSE 19022
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Laser ) ;
18983: LD_EXP 9
18987: PPUSH
18988: LD_STRING D
18990: PUSH
18991: LD_STRING I
18993: PUSH
18994: LD_STRING J
18996: PUSH
18997: LD_STRING S
18999: PUSH
19000: EMPTY
19001: LIST
19002: LIST
19003: LIST
19004: PUSH
19005: LD_EXP 25
19009: ARRAY
19010: STR
19011: PUSH
19012: LD_STRING -1-Laser
19014: STR
19015: PPUSH
19016: CALL_OW 88
// exit ;
19020: GO 19164
// end ; if tech = tech_MatDet and GetSide ( lab ) = 1 then
19022: LD_VAR 0 1
19026: PUSH
19027: LD_INT 7
19029: EQUAL
19030: PUSH
19031: LD_VAR 0 2
19035: PPUSH
19036: CALL_OW 255
19040: PUSH
19041: LD_INT 1
19043: EQUAL
19044: AND
19045: IFFALSE 19086
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Materialization ) ;
19047: LD_EXP 9
19051: PPUSH
19052: LD_STRING D
19054: PUSH
19055: LD_STRING I
19057: PUSH
19058: LD_STRING J
19060: PUSH
19061: LD_STRING S
19063: PUSH
19064: EMPTY
19065: LIST
19066: LIST
19067: LIST
19068: PUSH
19069: LD_EXP 25
19073: ARRAY
19074: STR
19075: PUSH
19076: LD_STRING -1-Materialization
19078: STR
19079: PPUSH
19080: CALL_OW 88
// exit ;
19084: GO 19164
// end ; if tech = tech_SibFiss and GetSide ( lab ) = 1 then
19086: LD_VAR 0 1
19090: PUSH
19091: LD_INT 25
19093: EQUAL
19094: PUSH
19095: LD_VAR 0 2
19099: PPUSH
19100: CALL_OW 255
19104: PUSH
19105: LD_INT 1
19107: EQUAL
19108: AND
19109: IFFALSE 19150
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Rocket ) ;
19111: LD_EXP 9
19115: PPUSH
19116: LD_STRING D
19118: PUSH
19119: LD_STRING I
19121: PUSH
19122: LD_STRING J
19124: PUSH
19125: LD_STRING S
19127: PUSH
19128: EMPTY
19129: LIST
19130: LIST
19131: LIST
19132: PUSH
19133: LD_EXP 25
19137: ARRAY
19138: STR
19139: PUSH
19140: LD_STRING -1-Rocket
19142: STR
19143: PPUSH
19144: CALL_OW 88
// exit ;
19148: GO 19164
// end ; MCE_ResearchComplete ( tech , lab ) ;
19150: LD_VAR 0 1
19154: PPUSH
19155: LD_VAR 0 2
19159: PPUSH
19160: CALL 89538 0 2
// end ;
19164: PPOPN 2
19166: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
19167: LD_VAR 0 1
19171: PPUSH
19172: LD_VAR 0 2
19176: PPUSH
19177: LD_VAR 0 3
19181: PPUSH
19182: LD_VAR 0 4
19186: PPUSH
19187: LD_VAR 0 5
19191: PPUSH
19192: CALL 89158 0 5
// end ;
19196: PPOPN 5
19198: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
19199: LD_VAR 0 1
19203: PPUSH
19204: LD_VAR 0 2
19208: PPUSH
19209: CALL 88754 0 2
// end ;
19213: PPOPN 2
19215: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
19216: LD_VAR 0 1
19220: PPUSH
19221: LD_VAR 0 2
19225: PPUSH
19226: LD_VAR 0 3
19230: PPUSH
19231: LD_VAR 0 4
19235: PPUSH
19236: CALL 88592 0 4
// end ;
19240: PPOPN 4
19242: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
19243: LD_VAR 0 1
19247: PPUSH
19248: LD_VAR 0 2
19252: PPUSH
19253: LD_VAR 0 3
19257: PPUSH
19258: CALL 88367 0 3
// end ;
19262: PPOPN 3
19264: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
19265: LD_VAR 0 1
19269: PPUSH
19270: LD_VAR 0 2
19274: PPUSH
19275: CALL 88252 0 2
// end ;
19279: PPOPN 2
19281: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
19282: LD_VAR 0 1
19286: PPUSH
19287: LD_VAR 0 2
19291: PPUSH
19292: CALL 92437 0 2
// end ;
19296: PPOPN 2
19298: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
19299: LD_VAR 0 1
19303: PPUSH
19304: LD_VAR 0 2
19308: PPUSH
19309: LD_VAR 0 3
19313: PPUSH
19314: LD_VAR 0 4
19318: PPUSH
19319: CALL 92653 0 4
// end ;
19323: PPOPN 4
19325: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
19326: LD_VAR 0 1
19330: PPUSH
19331: LD_VAR 0 2
19335: PPUSH
19336: CALL 88061 0 2
// end ;
19340: PPOPN 2
19342: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
19343: LD_VAR 0 1
19347: PPUSH
19348: CALL 103739 0 1
// end ; end_of_file
19352: PPOPN 1
19354: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
19355: LD_INT 0
19357: PPUSH
19358: PPUSH
// if exist_mode then
19359: LD_VAR 0 2
19363: IFFALSE 19388
// unit := CreateCharacter ( prefix & ident ) else
19365: LD_ADDR_VAR 0 5
19369: PUSH
19370: LD_VAR 0 3
19374: PUSH
19375: LD_VAR 0 1
19379: STR
19380: PPUSH
19381: CALL_OW 34
19385: ST_TO_ADDR
19386: GO 19403
// unit := NewCharacter ( ident ) ;
19388: LD_ADDR_VAR 0 5
19392: PUSH
19393: LD_VAR 0 1
19397: PPUSH
19398: CALL_OW 25
19402: ST_TO_ADDR
// result := unit ;
19403: LD_ADDR_VAR 0 4
19407: PUSH
19408: LD_VAR 0 5
19412: ST_TO_ADDR
// end ;
19413: LD_VAR 0 4
19417: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
19418: LD_INT 0
19420: PPUSH
19421: PPUSH
// if not side or not nation then
19422: LD_VAR 0 1
19426: NOT
19427: PUSH
19428: LD_VAR 0 2
19432: NOT
19433: OR
19434: IFFALSE 19438
// exit ;
19436: GO 20202
// case nation of nation_american :
19438: LD_VAR 0 2
19442: PUSH
19443: LD_INT 1
19445: DOUBLE
19446: EQUAL
19447: IFTRUE 19451
19449: GO 19665
19451: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
19452: LD_ADDR_VAR 0 4
19456: PUSH
19457: LD_INT 35
19459: PUSH
19460: LD_INT 45
19462: PUSH
19463: LD_INT 46
19465: PUSH
19466: LD_INT 47
19468: PUSH
19469: LD_INT 82
19471: PUSH
19472: LD_INT 83
19474: PUSH
19475: LD_INT 84
19477: PUSH
19478: LD_INT 85
19480: PUSH
19481: LD_INT 86
19483: PUSH
19484: LD_INT 1
19486: PUSH
19487: LD_INT 2
19489: PUSH
19490: LD_INT 6
19492: PUSH
19493: LD_INT 15
19495: PUSH
19496: LD_INT 16
19498: PUSH
19499: LD_INT 7
19501: PUSH
19502: LD_INT 12
19504: PUSH
19505: LD_INT 13
19507: PUSH
19508: LD_INT 10
19510: PUSH
19511: LD_INT 14
19513: PUSH
19514: LD_INT 20
19516: PUSH
19517: LD_INT 21
19519: PUSH
19520: LD_INT 22
19522: PUSH
19523: LD_INT 25
19525: PUSH
19526: LD_INT 32
19528: PUSH
19529: LD_INT 27
19531: PUSH
19532: LD_INT 36
19534: PUSH
19535: LD_INT 69
19537: PUSH
19538: LD_INT 39
19540: PUSH
19541: LD_INT 34
19543: PUSH
19544: LD_INT 40
19546: PUSH
19547: LD_INT 48
19549: PUSH
19550: LD_INT 49
19552: PUSH
19553: LD_INT 50
19555: PUSH
19556: LD_INT 51
19558: PUSH
19559: LD_INT 52
19561: PUSH
19562: LD_INT 53
19564: PUSH
19565: LD_INT 54
19567: PUSH
19568: LD_INT 55
19570: PUSH
19571: LD_INT 56
19573: PUSH
19574: LD_INT 57
19576: PUSH
19577: LD_INT 58
19579: PUSH
19580: LD_INT 59
19582: PUSH
19583: LD_INT 60
19585: PUSH
19586: LD_INT 61
19588: PUSH
19589: LD_INT 62
19591: PUSH
19592: LD_INT 80
19594: PUSH
19595: LD_INT 82
19597: PUSH
19598: LD_INT 83
19600: PUSH
19601: LD_INT 84
19603: PUSH
19604: LD_INT 85
19606: PUSH
19607: LD_INT 86
19609: PUSH
19610: EMPTY
19611: LIST
19612: LIST
19613: LIST
19614: LIST
19615: LIST
19616: LIST
19617: LIST
19618: LIST
19619: LIST
19620: LIST
19621: LIST
19622: LIST
19623: LIST
19624: LIST
19625: LIST
19626: LIST
19627: LIST
19628: LIST
19629: LIST
19630: LIST
19631: LIST
19632: LIST
19633: LIST
19634: LIST
19635: LIST
19636: LIST
19637: LIST
19638: LIST
19639: LIST
19640: LIST
19641: LIST
19642: LIST
19643: LIST
19644: LIST
19645: LIST
19646: LIST
19647: LIST
19648: LIST
19649: LIST
19650: LIST
19651: LIST
19652: LIST
19653: LIST
19654: LIST
19655: LIST
19656: LIST
19657: LIST
19658: LIST
19659: LIST
19660: LIST
19661: LIST
19662: ST_TO_ADDR
19663: GO 20126
19665: LD_INT 2
19667: DOUBLE
19668: EQUAL
19669: IFTRUE 19673
19671: GO 19895
19673: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
19674: LD_ADDR_VAR 0 4
19678: PUSH
19679: LD_INT 35
19681: PUSH
19682: LD_INT 45
19684: PUSH
19685: LD_INT 46
19687: PUSH
19688: LD_INT 47
19690: PUSH
19691: LD_INT 82
19693: PUSH
19694: LD_INT 83
19696: PUSH
19697: LD_INT 84
19699: PUSH
19700: LD_INT 85
19702: PUSH
19703: LD_INT 87
19705: PUSH
19706: LD_INT 70
19708: PUSH
19709: LD_INT 1
19711: PUSH
19712: LD_INT 11
19714: PUSH
19715: LD_INT 3
19717: PUSH
19718: LD_INT 4
19720: PUSH
19721: LD_INT 5
19723: PUSH
19724: LD_INT 6
19726: PUSH
19727: LD_INT 15
19729: PUSH
19730: LD_INT 18
19732: PUSH
19733: LD_INT 7
19735: PUSH
19736: LD_INT 17
19738: PUSH
19739: LD_INT 8
19741: PUSH
19742: LD_INT 20
19744: PUSH
19745: LD_INT 21
19747: PUSH
19748: LD_INT 22
19750: PUSH
19751: LD_INT 72
19753: PUSH
19754: LD_INT 26
19756: PUSH
19757: LD_INT 69
19759: PUSH
19760: LD_INT 39
19762: PUSH
19763: LD_INT 40
19765: PUSH
19766: LD_INT 41
19768: PUSH
19769: LD_INT 42
19771: PUSH
19772: LD_INT 43
19774: PUSH
19775: LD_INT 48
19777: PUSH
19778: LD_INT 49
19780: PUSH
19781: LD_INT 50
19783: PUSH
19784: LD_INT 51
19786: PUSH
19787: LD_INT 52
19789: PUSH
19790: LD_INT 53
19792: PUSH
19793: LD_INT 54
19795: PUSH
19796: LD_INT 55
19798: PUSH
19799: LD_INT 56
19801: PUSH
19802: LD_INT 60
19804: PUSH
19805: LD_INT 61
19807: PUSH
19808: LD_INT 62
19810: PUSH
19811: LD_INT 66
19813: PUSH
19814: LD_INT 67
19816: PUSH
19817: LD_INT 68
19819: PUSH
19820: LD_INT 81
19822: PUSH
19823: LD_INT 82
19825: PUSH
19826: LD_INT 83
19828: PUSH
19829: LD_INT 84
19831: PUSH
19832: LD_INT 85
19834: PUSH
19835: LD_INT 87
19837: PUSH
19838: EMPTY
19839: LIST
19840: LIST
19841: LIST
19842: LIST
19843: LIST
19844: LIST
19845: LIST
19846: LIST
19847: LIST
19848: LIST
19849: LIST
19850: LIST
19851: LIST
19852: LIST
19853: LIST
19854: LIST
19855: LIST
19856: LIST
19857: LIST
19858: LIST
19859: LIST
19860: LIST
19861: LIST
19862: LIST
19863: LIST
19864: LIST
19865: LIST
19866: LIST
19867: LIST
19868: LIST
19869: LIST
19870: LIST
19871: LIST
19872: LIST
19873: LIST
19874: LIST
19875: LIST
19876: LIST
19877: LIST
19878: LIST
19879: LIST
19880: LIST
19881: LIST
19882: LIST
19883: LIST
19884: LIST
19885: LIST
19886: LIST
19887: LIST
19888: LIST
19889: LIST
19890: LIST
19891: LIST
19892: ST_TO_ADDR
19893: GO 20126
19895: LD_INT 3
19897: DOUBLE
19898: EQUAL
19899: IFTRUE 19903
19901: GO 20125
19903: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
19904: LD_ADDR_VAR 0 4
19908: PUSH
19909: LD_INT 46
19911: PUSH
19912: LD_INT 47
19914: PUSH
19915: LD_INT 1
19917: PUSH
19918: LD_INT 2
19920: PUSH
19921: LD_INT 82
19923: PUSH
19924: LD_INT 83
19926: PUSH
19927: LD_INT 84
19929: PUSH
19930: LD_INT 85
19932: PUSH
19933: LD_INT 86
19935: PUSH
19936: LD_INT 11
19938: PUSH
19939: LD_INT 9
19941: PUSH
19942: LD_INT 20
19944: PUSH
19945: LD_INT 19
19947: PUSH
19948: LD_INT 21
19950: PUSH
19951: LD_INT 24
19953: PUSH
19954: LD_INT 22
19956: PUSH
19957: LD_INT 25
19959: PUSH
19960: LD_INT 28
19962: PUSH
19963: LD_INT 29
19965: PUSH
19966: LD_INT 30
19968: PUSH
19969: LD_INT 31
19971: PUSH
19972: LD_INT 37
19974: PUSH
19975: LD_INT 38
19977: PUSH
19978: LD_INT 32
19980: PUSH
19981: LD_INT 27
19983: PUSH
19984: LD_INT 33
19986: PUSH
19987: LD_INT 69
19989: PUSH
19990: LD_INT 39
19992: PUSH
19993: LD_INT 34
19995: PUSH
19996: LD_INT 40
19998: PUSH
19999: LD_INT 71
20001: PUSH
20002: LD_INT 23
20004: PUSH
20005: LD_INT 44
20007: PUSH
20008: LD_INT 48
20010: PUSH
20011: LD_INT 49
20013: PUSH
20014: LD_INT 50
20016: PUSH
20017: LD_INT 51
20019: PUSH
20020: LD_INT 52
20022: PUSH
20023: LD_INT 53
20025: PUSH
20026: LD_INT 54
20028: PUSH
20029: LD_INT 55
20031: PUSH
20032: LD_INT 56
20034: PUSH
20035: LD_INT 57
20037: PUSH
20038: LD_INT 58
20040: PUSH
20041: LD_INT 59
20043: PUSH
20044: LD_INT 63
20046: PUSH
20047: LD_INT 64
20049: PUSH
20050: LD_INT 65
20052: PUSH
20053: LD_INT 82
20055: PUSH
20056: LD_INT 83
20058: PUSH
20059: LD_INT 84
20061: PUSH
20062: LD_INT 85
20064: PUSH
20065: LD_INT 86
20067: PUSH
20068: EMPTY
20069: LIST
20070: LIST
20071: LIST
20072: LIST
20073: LIST
20074: LIST
20075: LIST
20076: LIST
20077: LIST
20078: LIST
20079: LIST
20080: LIST
20081: LIST
20082: LIST
20083: LIST
20084: LIST
20085: LIST
20086: LIST
20087: LIST
20088: LIST
20089: LIST
20090: LIST
20091: LIST
20092: LIST
20093: LIST
20094: LIST
20095: LIST
20096: LIST
20097: LIST
20098: LIST
20099: LIST
20100: LIST
20101: LIST
20102: LIST
20103: LIST
20104: LIST
20105: LIST
20106: LIST
20107: LIST
20108: LIST
20109: LIST
20110: LIST
20111: LIST
20112: LIST
20113: LIST
20114: LIST
20115: LIST
20116: LIST
20117: LIST
20118: LIST
20119: LIST
20120: LIST
20121: LIST
20122: ST_TO_ADDR
20123: GO 20126
20125: POP
// if state > - 1 and state < 3 then
20126: LD_VAR 0 3
20130: PUSH
20131: LD_INT 1
20133: NEG
20134: GREATER
20135: PUSH
20136: LD_VAR 0 3
20140: PUSH
20141: LD_INT 3
20143: LESS
20144: AND
20145: IFFALSE 20202
// for i in result do
20147: LD_ADDR_VAR 0 5
20151: PUSH
20152: LD_VAR 0 4
20156: PUSH
20157: FOR_IN
20158: IFFALSE 20200
// if GetTech ( i , side ) <> state then
20160: LD_VAR 0 5
20164: PPUSH
20165: LD_VAR 0 1
20169: PPUSH
20170: CALL_OW 321
20174: PUSH
20175: LD_VAR 0 3
20179: NONEQUAL
20180: IFFALSE 20198
// result := result diff i ;
20182: LD_ADDR_VAR 0 4
20186: PUSH
20187: LD_VAR 0 4
20191: PUSH
20192: LD_VAR 0 5
20196: DIFF
20197: ST_TO_ADDR
20198: GO 20157
20200: POP
20201: POP
// end ;
20202: LD_VAR 0 4
20206: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
20207: LD_INT 0
20209: PPUSH
20210: PPUSH
20211: PPUSH
// result := true ;
20212: LD_ADDR_VAR 0 3
20216: PUSH
20217: LD_INT 1
20219: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
20220: LD_ADDR_VAR 0 5
20224: PUSH
20225: LD_VAR 0 2
20229: PPUSH
20230: CALL_OW 480
20234: ST_TO_ADDR
// if not tmp then
20235: LD_VAR 0 5
20239: NOT
20240: IFFALSE 20244
// exit ;
20242: GO 20293
// for i in tmp do
20244: LD_ADDR_VAR 0 4
20248: PUSH
20249: LD_VAR 0 5
20253: PUSH
20254: FOR_IN
20255: IFFALSE 20291
// if GetTech ( i , side ) <> state_researched then
20257: LD_VAR 0 4
20261: PPUSH
20262: LD_VAR 0 1
20266: PPUSH
20267: CALL_OW 321
20271: PUSH
20272: LD_INT 2
20274: NONEQUAL
20275: IFFALSE 20289
// begin result := false ;
20277: LD_ADDR_VAR 0 3
20281: PUSH
20282: LD_INT 0
20284: ST_TO_ADDR
// exit ;
20285: POP
20286: POP
20287: GO 20293
// end ;
20289: GO 20254
20291: POP
20292: POP
// end ;
20293: LD_VAR 0 3
20297: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
20298: LD_INT 0
20300: PPUSH
20301: PPUSH
20302: PPUSH
20303: PPUSH
20304: PPUSH
20305: PPUSH
20306: PPUSH
20307: PPUSH
20308: PPUSH
20309: PPUSH
20310: PPUSH
20311: PPUSH
20312: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
20313: LD_VAR 0 1
20317: NOT
20318: PUSH
20319: LD_VAR 0 1
20323: PPUSH
20324: CALL_OW 257
20328: PUSH
20329: LD_INT 9
20331: NONEQUAL
20332: OR
20333: IFFALSE 20337
// exit ;
20335: GO 20910
// side := GetSide ( unit ) ;
20337: LD_ADDR_VAR 0 9
20341: PUSH
20342: LD_VAR 0 1
20346: PPUSH
20347: CALL_OW 255
20351: ST_TO_ADDR
// tech_space := tech_spacanom ;
20352: LD_ADDR_VAR 0 12
20356: PUSH
20357: LD_INT 29
20359: ST_TO_ADDR
// tech_time := tech_taurad ;
20360: LD_ADDR_VAR 0 13
20364: PUSH
20365: LD_INT 28
20367: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
20368: LD_ADDR_VAR 0 11
20372: PUSH
20373: LD_VAR 0 1
20377: PPUSH
20378: CALL_OW 310
20382: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
20383: LD_VAR 0 11
20387: PPUSH
20388: CALL_OW 247
20392: PUSH
20393: LD_INT 2
20395: EQUAL
20396: IFFALSE 20400
// exit ;
20398: GO 20910
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
20400: LD_ADDR_VAR 0 8
20404: PUSH
20405: LD_INT 81
20407: PUSH
20408: LD_VAR 0 9
20412: PUSH
20413: EMPTY
20414: LIST
20415: LIST
20416: PUSH
20417: LD_INT 3
20419: PUSH
20420: LD_INT 21
20422: PUSH
20423: LD_INT 3
20425: PUSH
20426: EMPTY
20427: LIST
20428: LIST
20429: PUSH
20430: EMPTY
20431: LIST
20432: LIST
20433: PUSH
20434: EMPTY
20435: LIST
20436: LIST
20437: PPUSH
20438: CALL_OW 69
20442: ST_TO_ADDR
// if not tmp then
20443: LD_VAR 0 8
20447: NOT
20448: IFFALSE 20452
// exit ;
20450: GO 20910
// if in_unit then
20452: LD_VAR 0 11
20456: IFFALSE 20480
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
20458: LD_ADDR_VAR 0 10
20462: PUSH
20463: LD_VAR 0 8
20467: PPUSH
20468: LD_VAR 0 11
20472: PPUSH
20473: CALL_OW 74
20477: ST_TO_ADDR
20478: GO 20500
// enemy := NearestUnitToUnit ( tmp , unit ) ;
20480: LD_ADDR_VAR 0 10
20484: PUSH
20485: LD_VAR 0 8
20489: PPUSH
20490: LD_VAR 0 1
20494: PPUSH
20495: CALL_OW 74
20499: ST_TO_ADDR
// if not enemy then
20500: LD_VAR 0 10
20504: NOT
20505: IFFALSE 20509
// exit ;
20507: GO 20910
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
20509: LD_VAR 0 11
20513: PUSH
20514: LD_VAR 0 11
20518: PPUSH
20519: LD_VAR 0 10
20523: PPUSH
20524: CALL_OW 296
20528: PUSH
20529: LD_INT 13
20531: GREATER
20532: AND
20533: PUSH
20534: LD_VAR 0 1
20538: PPUSH
20539: LD_VAR 0 10
20543: PPUSH
20544: CALL_OW 296
20548: PUSH
20549: LD_INT 12
20551: GREATER
20552: OR
20553: IFFALSE 20557
// exit ;
20555: GO 20910
// missile := [ 1 ] ;
20557: LD_ADDR_VAR 0 14
20561: PUSH
20562: LD_INT 1
20564: PUSH
20565: EMPTY
20566: LIST
20567: ST_TO_ADDR
// if Researched ( side , tech_space ) then
20568: LD_VAR 0 9
20572: PPUSH
20573: LD_VAR 0 12
20577: PPUSH
20578: CALL_OW 325
20582: IFFALSE 20611
// missile := Insert ( missile , missile + 1 , 2 ) ;
20584: LD_ADDR_VAR 0 14
20588: PUSH
20589: LD_VAR 0 14
20593: PPUSH
20594: LD_VAR 0 14
20598: PUSH
20599: LD_INT 1
20601: PLUS
20602: PPUSH
20603: LD_INT 2
20605: PPUSH
20606: CALL_OW 2
20610: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
20611: LD_VAR 0 9
20615: PPUSH
20616: LD_VAR 0 13
20620: PPUSH
20621: CALL_OW 325
20625: PUSH
20626: LD_VAR 0 10
20630: PPUSH
20631: CALL_OW 255
20635: PPUSH
20636: LD_VAR 0 13
20640: PPUSH
20641: CALL_OW 325
20645: NOT
20646: AND
20647: IFFALSE 20676
// missile := Insert ( missile , missile + 1 , 3 ) ;
20649: LD_ADDR_VAR 0 14
20653: PUSH
20654: LD_VAR 0 14
20658: PPUSH
20659: LD_VAR 0 14
20663: PUSH
20664: LD_INT 1
20666: PLUS
20667: PPUSH
20668: LD_INT 3
20670: PPUSH
20671: CALL_OW 2
20675: ST_TO_ADDR
// if missile < 2 then
20676: LD_VAR 0 14
20680: PUSH
20681: LD_INT 2
20683: LESS
20684: IFFALSE 20688
// exit ;
20686: GO 20910
// x := GetX ( enemy ) ;
20688: LD_ADDR_VAR 0 4
20692: PUSH
20693: LD_VAR 0 10
20697: PPUSH
20698: CALL_OW 250
20702: ST_TO_ADDR
// y := GetY ( enemy ) ;
20703: LD_ADDR_VAR 0 5
20707: PUSH
20708: LD_VAR 0 10
20712: PPUSH
20713: CALL_OW 251
20717: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
20718: LD_ADDR_VAR 0 6
20722: PUSH
20723: LD_VAR 0 4
20727: PUSH
20728: LD_INT 1
20730: NEG
20731: PPUSH
20732: LD_INT 1
20734: PPUSH
20735: CALL_OW 12
20739: PLUS
20740: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
20741: LD_ADDR_VAR 0 7
20745: PUSH
20746: LD_VAR 0 5
20750: PUSH
20751: LD_INT 1
20753: NEG
20754: PPUSH
20755: LD_INT 1
20757: PPUSH
20758: CALL_OW 12
20762: PLUS
20763: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
20764: LD_VAR 0 6
20768: PPUSH
20769: LD_VAR 0 7
20773: PPUSH
20774: CALL_OW 488
20778: NOT
20779: IFFALSE 20801
// begin _x := x ;
20781: LD_ADDR_VAR 0 6
20785: PUSH
20786: LD_VAR 0 4
20790: ST_TO_ADDR
// _y := y ;
20791: LD_ADDR_VAR 0 7
20795: PUSH
20796: LD_VAR 0 5
20800: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
20801: LD_ADDR_VAR 0 3
20805: PUSH
20806: LD_INT 1
20808: PPUSH
20809: LD_VAR 0 14
20813: PPUSH
20814: CALL_OW 12
20818: ST_TO_ADDR
// case i of 1 :
20819: LD_VAR 0 3
20823: PUSH
20824: LD_INT 1
20826: DOUBLE
20827: EQUAL
20828: IFTRUE 20832
20830: GO 20849
20832: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
20833: LD_VAR 0 1
20837: PPUSH
20838: LD_VAR 0 10
20842: PPUSH
20843: CALL_OW 115
20847: GO 20910
20849: LD_INT 2
20851: DOUBLE
20852: EQUAL
20853: IFTRUE 20857
20855: GO 20879
20857: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
20858: LD_VAR 0 1
20862: PPUSH
20863: LD_VAR 0 6
20867: PPUSH
20868: LD_VAR 0 7
20872: PPUSH
20873: CALL_OW 153
20877: GO 20910
20879: LD_INT 3
20881: DOUBLE
20882: EQUAL
20883: IFTRUE 20887
20885: GO 20909
20887: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
20888: LD_VAR 0 1
20892: PPUSH
20893: LD_VAR 0 6
20897: PPUSH
20898: LD_VAR 0 7
20902: PPUSH
20903: CALL_OW 154
20907: GO 20910
20909: POP
// end ;
20910: LD_VAR 0 2
20914: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
20915: LD_INT 0
20917: PPUSH
20918: PPUSH
20919: PPUSH
20920: PPUSH
20921: PPUSH
20922: PPUSH
// if not unit or not building then
20923: LD_VAR 0 1
20927: NOT
20928: PUSH
20929: LD_VAR 0 2
20933: NOT
20934: OR
20935: IFFALSE 20939
// exit ;
20937: GO 21097
// x := GetX ( building ) ;
20939: LD_ADDR_VAR 0 5
20943: PUSH
20944: LD_VAR 0 2
20948: PPUSH
20949: CALL_OW 250
20953: ST_TO_ADDR
// y := GetY ( building ) ;
20954: LD_ADDR_VAR 0 6
20958: PUSH
20959: LD_VAR 0 2
20963: PPUSH
20964: CALL_OW 251
20968: ST_TO_ADDR
// for i = 0 to 5 do
20969: LD_ADDR_VAR 0 4
20973: PUSH
20974: DOUBLE
20975: LD_INT 0
20977: DEC
20978: ST_TO_ADDR
20979: LD_INT 5
20981: PUSH
20982: FOR_TO
20983: IFFALSE 21095
// begin _x := ShiftX ( x , i , 3 ) ;
20985: LD_ADDR_VAR 0 7
20989: PUSH
20990: LD_VAR 0 5
20994: PPUSH
20995: LD_VAR 0 4
20999: PPUSH
21000: LD_INT 3
21002: PPUSH
21003: CALL_OW 272
21007: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
21008: LD_ADDR_VAR 0 8
21012: PUSH
21013: LD_VAR 0 6
21017: PPUSH
21018: LD_VAR 0 4
21022: PPUSH
21023: LD_INT 3
21025: PPUSH
21026: CALL_OW 273
21030: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21031: LD_VAR 0 7
21035: PPUSH
21036: LD_VAR 0 8
21040: PPUSH
21041: CALL_OW 488
21045: NOT
21046: IFFALSE 21050
// continue ;
21048: GO 20982
// if HexInfo ( _x , _y ) = 0 then
21050: LD_VAR 0 7
21054: PPUSH
21055: LD_VAR 0 8
21059: PPUSH
21060: CALL_OW 428
21064: PUSH
21065: LD_INT 0
21067: EQUAL
21068: IFFALSE 21093
// begin ComMoveXY ( unit , _x , _y ) ;
21070: LD_VAR 0 1
21074: PPUSH
21075: LD_VAR 0 7
21079: PPUSH
21080: LD_VAR 0 8
21084: PPUSH
21085: CALL_OW 111
// exit ;
21089: POP
21090: POP
21091: GO 21097
// end ; end ;
21093: GO 20982
21095: POP
21096: POP
// end ;
21097: LD_VAR 0 3
21101: RET
// export function ScanBase ( side , base_area ) ; begin
21102: LD_INT 0
21104: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
21105: LD_ADDR_VAR 0 3
21109: PUSH
21110: LD_VAR 0 2
21114: PPUSH
21115: LD_INT 81
21117: PUSH
21118: LD_VAR 0 1
21122: PUSH
21123: EMPTY
21124: LIST
21125: LIST
21126: PPUSH
21127: CALL_OW 70
21131: ST_TO_ADDR
// end ;
21132: LD_VAR 0 3
21136: RET
// export function BasicDefend ( base , solds , area ) ; var enemy , side , i , hex ; begin
21137: LD_INT 0
21139: PPUSH
21140: PPUSH
21141: PPUSH
21142: PPUSH
21143: PPUSH
// if not base or not mc_bases [ base ] or not solds or not area then
21144: LD_VAR 0 1
21148: NOT
21149: PUSH
21150: LD_EXP 44
21154: PUSH
21155: LD_VAR 0 1
21159: ARRAY
21160: NOT
21161: OR
21162: PUSH
21163: LD_VAR 0 2
21167: NOT
21168: OR
21169: PUSH
21170: LD_VAR 0 3
21174: NOT
21175: OR
21176: IFFALSE 21180
// exit ;
21178: GO 21693
// side := mc_sides [ base ] ;
21180: LD_ADDR_VAR 0 6
21184: PUSH
21185: LD_EXP 70
21189: PUSH
21190: LD_VAR 0 1
21194: ARRAY
21195: ST_TO_ADDR
// if not side then
21196: LD_VAR 0 6
21200: NOT
21201: IFFALSE 21205
// exit ;
21203: GO 21693
// for i in solds do
21205: LD_ADDR_VAR 0 7
21209: PUSH
21210: LD_VAR 0 2
21214: PUSH
21215: FOR_IN
21216: IFFALSE 21277
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
21218: LD_VAR 0 7
21222: PPUSH
21223: CALL_OW 310
21227: PPUSH
21228: CALL_OW 266
21232: PUSH
21233: LD_INT 32
21235: PUSH
21236: LD_INT 31
21238: PUSH
21239: EMPTY
21240: LIST
21241: LIST
21242: IN
21243: IFFALSE 21263
// solds := solds diff i else
21245: LD_ADDR_VAR 0 2
21249: PUSH
21250: LD_VAR 0 2
21254: PUSH
21255: LD_VAR 0 7
21259: DIFF
21260: ST_TO_ADDR
21261: GO 21275
// SetTag ( i , 18 ) ;
21263: LD_VAR 0 7
21267: PPUSH
21268: LD_INT 18
21270: PPUSH
21271: CALL_OW 109
21275: GO 21215
21277: POP
21278: POP
// if not solds then
21279: LD_VAR 0 2
21283: NOT
21284: IFFALSE 21288
// exit ;
21286: GO 21693
// repeat wait ( 0 0$1 ) ;
21288: LD_INT 35
21290: PPUSH
21291: CALL_OW 67
// enemy := ScanBase ( side , area ) ;
21295: LD_ADDR_VAR 0 5
21299: PUSH
21300: LD_VAR 0 6
21304: PPUSH
21305: LD_VAR 0 3
21309: PPUSH
21310: CALL 21102 0 2
21314: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
21315: LD_EXP 44
21319: PUSH
21320: LD_VAR 0 1
21324: ARRAY
21325: NOT
21326: PUSH
21327: LD_EXP 44
21331: PUSH
21332: LD_VAR 0 1
21336: ARRAY
21337: PUSH
21338: EMPTY
21339: EQUAL
21340: OR
21341: IFFALSE 21378
// begin for i in solds do
21343: LD_ADDR_VAR 0 7
21347: PUSH
21348: LD_VAR 0 2
21352: PUSH
21353: FOR_IN
21354: IFFALSE 21367
// ComStop ( i ) ;
21356: LD_VAR 0 7
21360: PPUSH
21361: CALL_OW 141
21365: GO 21353
21367: POP
21368: POP
// solds := [ ] ;
21369: LD_ADDR_VAR 0 2
21373: PUSH
21374: EMPTY
21375: ST_TO_ADDR
// exit ;
21376: GO 21693
// end ; if not enemy or enemy > 3 or mc_defender [ base ] then
21378: LD_VAR 0 5
21382: NOT
21383: PUSH
21384: LD_VAR 0 5
21388: PUSH
21389: LD_INT 3
21391: GREATER
21392: OR
21393: PUSH
21394: LD_EXP 66
21398: PUSH
21399: LD_VAR 0 1
21403: ARRAY
21404: OR
21405: IFFALSE 21446
// begin for i in solds do
21407: LD_ADDR_VAR 0 7
21411: PUSH
21412: LD_VAR 0 2
21416: PUSH
21417: FOR_IN
21418: IFFALSE 21442
// if HasTask ( i ) then
21420: LD_VAR 0 7
21424: PPUSH
21425: CALL_OW 314
21429: IFFALSE 21440
// ComStop ( i ) ;
21431: LD_VAR 0 7
21435: PPUSH
21436: CALL_OW 141
21440: GO 21417
21442: POP
21443: POP
// break ;
21444: GO 21681
// end ; for i in solds do
21446: LD_ADDR_VAR 0 7
21450: PUSH
21451: LD_VAR 0 2
21455: PUSH
21456: FOR_IN
21457: IFFALSE 21673
// begin if IsInUnit ( i ) then
21459: LD_VAR 0 7
21463: PPUSH
21464: CALL_OW 310
21468: IFFALSE 21479
// ComExitBuilding ( i ) ;
21470: LD_VAR 0 7
21474: PPUSH
21475: CALL_OW 122
// if GetLives ( i ) > 333 then
21479: LD_VAR 0 7
21483: PPUSH
21484: CALL_OW 256
21488: PUSH
21489: LD_INT 333
21491: GREATER
21492: IFFALSE 21520
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
21494: LD_VAR 0 7
21498: PPUSH
21499: LD_VAR 0 5
21503: PPUSH
21504: LD_VAR 0 7
21508: PPUSH
21509: CALL_OW 74
21513: PPUSH
21514: CALL_OW 115
21518: GO 21671
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
21520: LD_ADDR_VAR 0 8
21524: PUSH
21525: LD_EXP 44
21529: PUSH
21530: LD_VAR 0 1
21534: ARRAY
21535: PPUSH
21536: LD_INT 2
21538: PUSH
21539: LD_INT 30
21541: PUSH
21542: LD_INT 0
21544: PUSH
21545: EMPTY
21546: LIST
21547: LIST
21548: PUSH
21549: LD_INT 30
21551: PUSH
21552: LD_INT 1
21554: PUSH
21555: EMPTY
21556: LIST
21557: LIST
21558: PUSH
21559: LD_INT 30
21561: PUSH
21562: LD_INT 6
21564: PUSH
21565: EMPTY
21566: LIST
21567: LIST
21568: PUSH
21569: EMPTY
21570: LIST
21571: LIST
21572: LIST
21573: LIST
21574: PPUSH
21575: CALL_OW 72
21579: PPUSH
21580: LD_VAR 0 7
21584: PPUSH
21585: CALL_OW 74
21589: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
21590: LD_VAR 0 7
21594: PPUSH
21595: LD_VAR 0 8
21599: PPUSH
21600: CALL_OW 250
21604: PPUSH
21605: LD_INT 3
21607: PPUSH
21608: LD_INT 5
21610: PPUSH
21611: CALL_OW 272
21615: PPUSH
21616: LD_VAR 0 8
21620: PPUSH
21621: CALL_OW 251
21625: PPUSH
21626: LD_INT 3
21628: PPUSH
21629: LD_INT 5
21631: PPUSH
21632: CALL_OW 273
21636: PPUSH
21637: CALL_OW 111
// SetTag ( i , 0 ) ;
21641: LD_VAR 0 7
21645: PPUSH
21646: LD_INT 0
21648: PPUSH
21649: CALL_OW 109
// solds := solds diff i ;
21653: LD_ADDR_VAR 0 2
21657: PUSH
21658: LD_VAR 0 2
21662: PUSH
21663: LD_VAR 0 7
21667: DIFF
21668: ST_TO_ADDR
// continue ;
21669: GO 21456
// end ; end ;
21671: GO 21456
21673: POP
21674: POP
// until solds ;
21675: LD_VAR 0 2
21679: IFFALSE 21288
// MC_Reset ( base , 18 ) ;
21681: LD_VAR 0 1
21685: PPUSH
21686: LD_INT 18
21688: PPUSH
21689: CALL 66833 0 2
// end ;
21693: LD_VAR 0 4
21697: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , depot , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
21698: LD_INT 0
21700: PPUSH
21701: PPUSH
21702: PPUSH
21703: PPUSH
21704: PPUSH
21705: PPUSH
21706: PPUSH
21707: PPUSH
21708: PPUSH
21709: PPUSH
21710: PPUSH
21711: PPUSH
21712: PPUSH
21713: PPUSH
21714: PPUSH
21715: PPUSH
21716: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
21717: LD_ADDR_VAR 0 13
21721: PUSH
21722: LD_EXP 44
21726: PUSH
21727: LD_VAR 0 1
21731: ARRAY
21732: PPUSH
21733: LD_INT 25
21735: PUSH
21736: LD_INT 3
21738: PUSH
21739: EMPTY
21740: LIST
21741: LIST
21742: PPUSH
21743: CALL_OW 72
21747: ST_TO_ADDR
// if mc_remote_driver [ base ] then
21748: LD_EXP 84
21752: PUSH
21753: LD_VAR 0 1
21757: ARRAY
21758: IFFALSE 21782
// mechs := mechs diff mc_remote_driver [ base ] ;
21760: LD_ADDR_VAR 0 13
21764: PUSH
21765: LD_VAR 0 13
21769: PUSH
21770: LD_EXP 84
21774: PUSH
21775: LD_VAR 0 1
21779: ARRAY
21780: DIFF
21781: ST_TO_ADDR
// for i in mechs do
21782: LD_ADDR_VAR 0 5
21786: PUSH
21787: LD_VAR 0 13
21791: PUSH
21792: FOR_IN
21793: IFFALSE 21828
// if GetTag ( i ) > 0 then
21795: LD_VAR 0 5
21799: PPUSH
21800: CALL_OW 110
21804: PUSH
21805: LD_INT 0
21807: GREATER
21808: IFFALSE 21826
// mechs := mechs diff i ;
21810: LD_ADDR_VAR 0 13
21814: PUSH
21815: LD_VAR 0 13
21819: PUSH
21820: LD_VAR 0 5
21824: DIFF
21825: ST_TO_ADDR
21826: GO 21792
21828: POP
21829: POP
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
21830: LD_ADDR_VAR 0 9
21834: PUSH
21835: LD_EXP 44
21839: PUSH
21840: LD_VAR 0 1
21844: ARRAY
21845: PPUSH
21846: LD_INT 2
21848: PUSH
21849: LD_INT 25
21851: PUSH
21852: LD_INT 1
21854: PUSH
21855: EMPTY
21856: LIST
21857: LIST
21858: PUSH
21859: LD_INT 25
21861: PUSH
21862: LD_INT 5
21864: PUSH
21865: EMPTY
21866: LIST
21867: LIST
21868: PUSH
21869: LD_INT 25
21871: PUSH
21872: LD_INT 8
21874: PUSH
21875: EMPTY
21876: LIST
21877: LIST
21878: PUSH
21879: LD_INT 25
21881: PUSH
21882: LD_INT 9
21884: PUSH
21885: EMPTY
21886: LIST
21887: LIST
21888: PUSH
21889: EMPTY
21890: LIST
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: PPUSH
21896: CALL_OW 72
21900: ST_TO_ADDR
// if not defenders and not solds then
21901: LD_VAR 0 2
21905: NOT
21906: PUSH
21907: LD_VAR 0 9
21911: NOT
21912: AND
21913: IFFALSE 21917
// exit ;
21915: GO 23543
// depot_under_attack := false ;
21917: LD_ADDR_VAR 0 17
21921: PUSH
21922: LD_INT 0
21924: ST_TO_ADDR
// sold_defenders := [ ] ;
21925: LD_ADDR_VAR 0 18
21929: PUSH
21930: EMPTY
21931: ST_TO_ADDR
// if mechs then
21932: LD_VAR 0 13
21936: IFFALSE 22065
// for i in defenders do
21938: LD_ADDR_VAR 0 5
21942: PUSH
21943: LD_VAR 0 2
21947: PUSH
21948: FOR_IN
21949: IFFALSE 22063
// begin SetTag ( i , 20 ) ;
21951: LD_VAR 0 5
21955: PPUSH
21956: LD_INT 20
21958: PPUSH
21959: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
21963: LD_VAR 0 5
21967: PPUSH
21968: CALL_OW 263
21972: PUSH
21973: LD_INT 1
21975: EQUAL
21976: PUSH
21977: LD_VAR 0 5
21981: PPUSH
21982: CALL_OW 311
21986: NOT
21987: AND
21988: PUSH
21989: LD_VAR 0 13
21993: AND
21994: IFFALSE 22061
// begin un := mechs [ 1 ] ;
21996: LD_ADDR_VAR 0 11
22000: PUSH
22001: LD_VAR 0 13
22005: PUSH
22006: LD_INT 1
22008: ARRAY
22009: ST_TO_ADDR
// ComExitBuilding ( un ) ;
22010: LD_VAR 0 11
22014: PPUSH
22015: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
22019: LD_VAR 0 11
22023: PPUSH
22024: LD_VAR 0 5
22028: PPUSH
22029: CALL_OW 180
// SetTag ( un , 19 ) ;
22033: LD_VAR 0 11
22037: PPUSH
22038: LD_INT 19
22040: PPUSH
22041: CALL_OW 109
// mechs := mechs diff un ;
22045: LD_ADDR_VAR 0 13
22049: PUSH
22050: LD_VAR 0 13
22054: PUSH
22055: LD_VAR 0 11
22059: DIFF
22060: ST_TO_ADDR
// end ; end ;
22061: GO 21948
22063: POP
22064: POP
// if solds then
22065: LD_VAR 0 9
22069: IFFALSE 22128
// for i in solds do
22071: LD_ADDR_VAR 0 5
22075: PUSH
22076: LD_VAR 0 9
22080: PUSH
22081: FOR_IN
22082: IFFALSE 22126
// if not GetTag ( i ) then
22084: LD_VAR 0 5
22088: PPUSH
22089: CALL_OW 110
22093: NOT
22094: IFFALSE 22124
// begin defenders := defenders union i ;
22096: LD_ADDR_VAR 0 2
22100: PUSH
22101: LD_VAR 0 2
22105: PUSH
22106: LD_VAR 0 5
22110: UNION
22111: ST_TO_ADDR
// SetTag ( i , 18 ) ;
22112: LD_VAR 0 5
22116: PPUSH
22117: LD_INT 18
22119: PPUSH
22120: CALL_OW 109
// end ;
22124: GO 22081
22126: POP
22127: POP
// repeat wait ( 0 0$1 ) ;
22128: LD_INT 35
22130: PPUSH
22131: CALL_OW 67
// enemy := mc_scan [ base ] ;
22135: LD_ADDR_VAR 0 3
22139: PUSH
22140: LD_EXP 67
22144: PUSH
22145: LD_VAR 0 1
22149: ARRAY
22150: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
22151: LD_EXP 44
22155: PUSH
22156: LD_VAR 0 1
22160: ARRAY
22161: NOT
22162: PUSH
22163: LD_EXP 44
22167: PUSH
22168: LD_VAR 0 1
22172: ARRAY
22173: PUSH
22174: EMPTY
22175: EQUAL
22176: OR
22177: IFFALSE 22214
// begin for i in defenders do
22179: LD_ADDR_VAR 0 5
22183: PUSH
22184: LD_VAR 0 2
22188: PUSH
22189: FOR_IN
22190: IFFALSE 22203
// ComStop ( i ) ;
22192: LD_VAR 0 5
22196: PPUSH
22197: CALL_OW 141
22201: GO 22189
22203: POP
22204: POP
// defenders := [ ] ;
22205: LD_ADDR_VAR 0 2
22209: PUSH
22210: EMPTY
22211: ST_TO_ADDR
// exit ;
22212: GO 23543
// end ; for i in defenders do
22214: LD_ADDR_VAR 0 5
22218: PUSH
22219: LD_VAR 0 2
22223: PUSH
22224: FOR_IN
22225: IFFALSE 23043
// begin e := NearestUnitToUnit ( enemy , i ) ;
22227: LD_ADDR_VAR 0 14
22231: PUSH
22232: LD_VAR 0 3
22236: PPUSH
22237: LD_VAR 0 5
22241: PPUSH
22242: CALL_OW 74
22246: ST_TO_ADDR
// depot := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
22247: LD_ADDR_VAR 0 8
22251: PUSH
22252: LD_EXP 44
22256: PUSH
22257: LD_VAR 0 1
22261: ARRAY
22262: PPUSH
22263: LD_INT 2
22265: PUSH
22266: LD_INT 30
22268: PUSH
22269: LD_INT 0
22271: PUSH
22272: EMPTY
22273: LIST
22274: LIST
22275: PUSH
22276: LD_INT 30
22278: PUSH
22279: LD_INT 1
22281: PUSH
22282: EMPTY
22283: LIST
22284: LIST
22285: PUSH
22286: EMPTY
22287: LIST
22288: LIST
22289: LIST
22290: PPUSH
22291: CALL_OW 72
22295: ST_TO_ADDR
// depot_under_attack := ( not depot or UnitFilter ( depot , [ f_not , [ f_lives , 600 ] ] ) ) ;
22296: LD_ADDR_VAR 0 17
22300: PUSH
22301: LD_VAR 0 8
22305: NOT
22306: PUSH
22307: LD_VAR 0 8
22311: PPUSH
22312: LD_INT 3
22314: PUSH
22315: LD_INT 24
22317: PUSH
22318: LD_INT 600
22320: PUSH
22321: EMPTY
22322: LIST
22323: LIST
22324: PUSH
22325: EMPTY
22326: LIST
22327: LIST
22328: PPUSH
22329: CALL_OW 72
22333: OR
22334: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
22335: LD_VAR 0 5
22339: PPUSH
22340: CALL_OW 247
22344: PUSH
22345: LD_INT 2
22347: DOUBLE
22348: EQUAL
22349: IFTRUE 22353
22351: GO 22749
22353: POP
// begin if GetLives ( i ) > 650 and ( GetDistUnits ( i , e ) < 40 or IsInArea ( e , mc_scan_area [ base ] ) ) then
22354: LD_VAR 0 5
22358: PPUSH
22359: CALL_OW 256
22363: PUSH
22364: LD_INT 650
22366: GREATER
22367: PUSH
22368: LD_VAR 0 5
22372: PPUSH
22373: LD_VAR 0 14
22377: PPUSH
22378: CALL_OW 296
22382: PUSH
22383: LD_INT 40
22385: LESS
22386: PUSH
22387: LD_VAR 0 14
22391: PPUSH
22392: LD_EXP 69
22396: PUSH
22397: LD_VAR 0 1
22401: ARRAY
22402: PPUSH
22403: CALL_OW 308
22407: OR
22408: AND
22409: IFFALSE 22531
// begin if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 30 and depot then
22411: LD_VAR 0 5
22415: PPUSH
22416: CALL_OW 262
22420: PUSH
22421: LD_INT 1
22423: EQUAL
22424: PUSH
22425: LD_VAR 0 5
22429: PPUSH
22430: CALL_OW 261
22434: PUSH
22435: LD_INT 30
22437: LESS
22438: AND
22439: PUSH
22440: LD_VAR 0 8
22444: AND
22445: IFFALSE 22515
// begin ComMoveUnit ( i , NearestUnitToUnit ( depot , i ) ) ;
22447: LD_VAR 0 5
22451: PPUSH
22452: LD_VAR 0 8
22456: PPUSH
22457: LD_VAR 0 5
22461: PPUSH
22462: CALL_OW 74
22466: PPUSH
22467: CALL_OW 112
// if GetDistUnits ( i , NearestUnitToUnit ( depot , i ) ) < 6 then
22471: LD_VAR 0 5
22475: PPUSH
22476: LD_VAR 0 8
22480: PPUSH
22481: LD_VAR 0 5
22485: PPUSH
22486: CALL_OW 74
22490: PPUSH
22491: CALL_OW 296
22495: PUSH
22496: LD_INT 6
22498: LESS
22499: IFFALSE 22513
// SetFuel ( i , 100 ) ;
22501: LD_VAR 0 5
22505: PPUSH
22506: LD_INT 100
22508: PPUSH
22509: CALL_OW 240
// end else
22513: GO 22529
// ComAttackUnit ( i , e ) ;
22515: LD_VAR 0 5
22519: PPUSH
22520: LD_VAR 0 14
22524: PPUSH
22525: CALL_OW 115
// end else
22529: GO 22632
// if ( ( not IsInArea ( e , mc_scan_area [ base ] ) and GetDistUnits ( i , e ) >= 40 ) or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
22531: LD_VAR 0 14
22535: PPUSH
22536: LD_EXP 69
22540: PUSH
22541: LD_VAR 0 1
22545: ARRAY
22546: PPUSH
22547: CALL_OW 308
22551: NOT
22552: PUSH
22553: LD_VAR 0 5
22557: PPUSH
22558: LD_VAR 0 14
22562: PPUSH
22563: CALL_OW 296
22567: PUSH
22568: LD_INT 40
22570: GREATEREQUAL
22571: AND
22572: PUSH
22573: LD_VAR 0 5
22577: PPUSH
22578: CALL_OW 256
22582: PUSH
22583: LD_INT 650
22585: LESSEQUAL
22586: OR
22587: PUSH
22588: LD_VAR 0 5
22592: PPUSH
22593: LD_EXP 68
22597: PUSH
22598: LD_VAR 0 1
22602: ARRAY
22603: PPUSH
22604: CALL_OW 308
22608: NOT
22609: AND
22610: IFFALSE 22632
// ComMoveToArea ( i , mc_parking [ base ] ) ;
22612: LD_VAR 0 5
22616: PPUSH
22617: LD_EXP 68
22621: PUSH
22622: LD_VAR 0 1
22626: ARRAY
22627: PPUSH
22628: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
22632: LD_VAR 0 5
22636: PPUSH
22637: CALL_OW 256
22641: PUSH
22642: LD_INT 998
22644: LESS
22645: PUSH
22646: LD_VAR 0 5
22650: PPUSH
22651: CALL_OW 263
22655: PUSH
22656: LD_INT 1
22658: EQUAL
22659: AND
22660: PUSH
22661: LD_VAR 0 5
22665: PPUSH
22666: CALL_OW 311
22670: AND
22671: PUSH
22672: LD_VAR 0 5
22676: PPUSH
22677: LD_EXP 68
22681: PUSH
22682: LD_VAR 0 1
22686: ARRAY
22687: PPUSH
22688: CALL_OW 308
22692: AND
22693: IFFALSE 22747
// begin mech := IsDrivenBy ( i ) ;
22695: LD_ADDR_VAR 0 10
22699: PUSH
22700: LD_VAR 0 5
22704: PPUSH
22705: CALL_OW 311
22709: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
22710: LD_VAR 0 10
22714: PPUSH
22715: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
22719: LD_VAR 0 10
22723: PPUSH
22724: LD_VAR 0 5
22728: PPUSH
22729: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
22733: LD_VAR 0 10
22737: PPUSH
22738: LD_VAR 0 5
22742: PPUSH
22743: CALL_OW 180
// end ; end ; unit_human :
22747: GO 23014
22749: LD_INT 1
22751: DOUBLE
22752: EQUAL
22753: IFTRUE 22757
22755: GO 23013
22757: POP
// begin b := IsInUnit ( i ) ;
22758: LD_ADDR_VAR 0 19
22762: PUSH
22763: LD_VAR 0 5
22767: PPUSH
22768: CALL_OW 310
22772: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
22773: LD_ADDR_VAR 0 20
22777: PUSH
22778: LD_VAR 0 19
22782: NOT
22783: PUSH
22784: LD_VAR 0 19
22788: PPUSH
22789: CALL_OW 266
22793: PUSH
22794: LD_INT 32
22796: PUSH
22797: LD_INT 31
22799: PUSH
22800: EMPTY
22801: LIST
22802: LIST
22803: IN
22804: OR
22805: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
22806: LD_VAR 0 17
22810: PUSH
22811: LD_VAR 0 2
22815: PPUSH
22816: LD_INT 21
22818: PUSH
22819: LD_INT 2
22821: PUSH
22822: EMPTY
22823: LIST
22824: LIST
22825: PPUSH
22826: CALL_OW 72
22830: PUSH
22831: LD_INT 1
22833: LESSEQUAL
22834: OR
22835: PUSH
22836: LD_VAR 0 20
22840: AND
22841: PUSH
22842: LD_VAR 0 5
22846: PUSH
22847: LD_VAR 0 18
22851: IN
22852: NOT
22853: AND
22854: IFFALSE 22947
// begin if b then
22856: LD_VAR 0 19
22860: IFFALSE 22909
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
22862: LD_VAR 0 19
22866: PPUSH
22867: LD_VAR 0 3
22871: PPUSH
22872: LD_VAR 0 19
22876: PPUSH
22877: CALL_OW 74
22881: PPUSH
22882: CALL_OW 296
22886: PUSH
22887: LD_INT 10
22889: LESS
22890: PUSH
22891: LD_VAR 0 19
22895: PPUSH
22896: CALL_OW 461
22900: PUSH
22901: LD_INT 7
22903: NONEQUAL
22904: AND
22905: IFFALSE 22909
// continue ;
22907: GO 22224
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
22909: LD_ADDR_VAR 0 18
22913: PUSH
22914: LD_VAR 0 18
22918: PPUSH
22919: LD_VAR 0 18
22923: PUSH
22924: LD_INT 1
22926: PLUS
22927: PPUSH
22928: LD_VAR 0 5
22932: PPUSH
22933: CALL_OW 1
22937: ST_TO_ADDR
// ComExitBuilding ( i ) ;
22938: LD_VAR 0 5
22942: PPUSH
22943: CALL_OW 122
// end ; if sold_defenders then
22947: LD_VAR 0 18
22951: IFFALSE 23011
// if i in sold_defenders then
22953: LD_VAR 0 5
22957: PUSH
22958: LD_VAR 0 18
22962: IN
22963: IFFALSE 23011
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
22965: LD_VAR 0 5
22969: PPUSH
22970: CALL_OW 314
22974: NOT
22975: PUSH
22976: LD_VAR 0 5
22980: PPUSH
22981: LD_VAR 0 14
22985: PPUSH
22986: CALL_OW 296
22990: PUSH
22991: LD_INT 30
22993: LESS
22994: AND
22995: IFFALSE 23011
// ComAttackUnit ( i , e ) ;
22997: LD_VAR 0 5
23001: PPUSH
23002: LD_VAR 0 14
23006: PPUSH
23007: CALL_OW 115
// end ; end ; end ;
23011: GO 23014
23013: POP
// if IsDead ( i ) then
23014: LD_VAR 0 5
23018: PPUSH
23019: CALL_OW 301
23023: IFFALSE 23041
// defenders := defenders diff i ;
23025: LD_ADDR_VAR 0 2
23029: PUSH
23030: LD_VAR 0 2
23034: PUSH
23035: LD_VAR 0 5
23039: DIFF
23040: ST_TO_ADDR
// end ;
23041: GO 22224
23043: POP
23044: POP
// until not enemy or not defenders or not mc_bases [ base ] ;
23045: LD_VAR 0 3
23049: NOT
23050: PUSH
23051: LD_VAR 0 2
23055: NOT
23056: OR
23057: PUSH
23058: LD_EXP 44
23062: PUSH
23063: LD_VAR 0 1
23067: ARRAY
23068: NOT
23069: OR
23070: IFFALSE 22128
// MC_Reset ( base , 18 ) ;
23072: LD_VAR 0 1
23076: PPUSH
23077: LD_INT 18
23079: PPUSH
23080: CALL 66833 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
23084: LD_ADDR_VAR 0 2
23088: PUSH
23089: LD_VAR 0 2
23093: PUSH
23094: LD_VAR 0 2
23098: PPUSH
23099: LD_INT 2
23101: PUSH
23102: LD_INT 25
23104: PUSH
23105: LD_INT 1
23107: PUSH
23108: EMPTY
23109: LIST
23110: LIST
23111: PUSH
23112: LD_INT 25
23114: PUSH
23115: LD_INT 5
23117: PUSH
23118: EMPTY
23119: LIST
23120: LIST
23121: PUSH
23122: LD_INT 25
23124: PUSH
23125: LD_INT 8
23127: PUSH
23128: EMPTY
23129: LIST
23130: LIST
23131: PUSH
23132: LD_INT 25
23134: PUSH
23135: LD_INT 9
23137: PUSH
23138: EMPTY
23139: LIST
23140: LIST
23141: PUSH
23142: EMPTY
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: PPUSH
23149: CALL_OW 72
23153: DIFF
23154: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
23155: LD_VAR 0 3
23159: NOT
23160: PUSH
23161: LD_VAR 0 2
23165: PPUSH
23166: LD_INT 21
23168: PUSH
23169: LD_INT 2
23171: PUSH
23172: EMPTY
23173: LIST
23174: LIST
23175: PPUSH
23176: CALL_OW 72
23180: AND
23181: IFFALSE 23519
// begin tmp := FilterByTag ( defenders , 19 ) ;
23183: LD_ADDR_VAR 0 12
23187: PUSH
23188: LD_VAR 0 2
23192: PPUSH
23193: LD_INT 19
23195: PPUSH
23196: CALL 59982 0 2
23200: ST_TO_ADDR
// if tmp then
23201: LD_VAR 0 12
23205: IFFALSE 23275
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
23207: LD_ADDR_VAR 0 12
23211: PUSH
23212: LD_VAR 0 12
23216: PPUSH
23217: LD_INT 25
23219: PUSH
23220: LD_INT 3
23222: PUSH
23223: EMPTY
23224: LIST
23225: LIST
23226: PPUSH
23227: CALL_OW 72
23231: ST_TO_ADDR
// if tmp then
23232: LD_VAR 0 12
23236: IFFALSE 23275
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
23238: LD_ADDR_EXP 56
23242: PUSH
23243: LD_EXP 56
23247: PPUSH
23248: LD_VAR 0 1
23252: PPUSH
23253: LD_EXP 56
23257: PUSH
23258: LD_VAR 0 1
23262: ARRAY
23263: PUSH
23264: LD_VAR 0 12
23268: UNION
23269: PPUSH
23270: CALL_OW 1
23274: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
23275: LD_VAR 0 1
23279: PPUSH
23280: LD_INT 19
23282: PPUSH
23283: CALL 66833 0 2
// repeat wait ( 0 0$1 ) ;
23287: LD_INT 35
23289: PPUSH
23290: CALL_OW 67
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
23294: LD_EXP 44
23298: PUSH
23299: LD_VAR 0 1
23303: ARRAY
23304: NOT
23305: PUSH
23306: LD_EXP 44
23310: PUSH
23311: LD_VAR 0 1
23315: ARRAY
23316: PUSH
23317: EMPTY
23318: EQUAL
23319: OR
23320: IFFALSE 23357
// begin for i in defenders do
23322: LD_ADDR_VAR 0 5
23326: PUSH
23327: LD_VAR 0 2
23331: PUSH
23332: FOR_IN
23333: IFFALSE 23346
// ComStop ( i ) ;
23335: LD_VAR 0 5
23339: PPUSH
23340: CALL_OW 141
23344: GO 23332
23346: POP
23347: POP
// defenders := [ ] ;
23348: LD_ADDR_VAR 0 2
23352: PUSH
23353: EMPTY
23354: ST_TO_ADDR
// exit ;
23355: GO 23543
// end ; for i in defenders do
23357: LD_ADDR_VAR 0 5
23361: PUSH
23362: LD_VAR 0 2
23366: PUSH
23367: FOR_IN
23368: IFFALSE 23457
// begin if not IsInArea ( i , mc_parking [ base ] ) then
23370: LD_VAR 0 5
23374: PPUSH
23375: LD_EXP 68
23379: PUSH
23380: LD_VAR 0 1
23384: ARRAY
23385: PPUSH
23386: CALL_OW 308
23390: NOT
23391: IFFALSE 23415
// ComMoveToArea ( i , mc_parking [ base ] ) else
23393: LD_VAR 0 5
23397: PPUSH
23398: LD_EXP 68
23402: PUSH
23403: LD_VAR 0 1
23407: ARRAY
23408: PPUSH
23409: CALL_OW 113
23413: GO 23455
// if GetControl ( i ) = control_manual then
23415: LD_VAR 0 5
23419: PPUSH
23420: CALL_OW 263
23424: PUSH
23425: LD_INT 1
23427: EQUAL
23428: IFFALSE 23455
// if IsDrivenBy ( i ) then
23430: LD_VAR 0 5
23434: PPUSH
23435: CALL_OW 311
23439: IFFALSE 23455
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
23441: LD_VAR 0 5
23445: PPUSH
23446: CALL_OW 311
23450: PPUSH
23451: CALL_OW 121
// end ;
23455: GO 23367
23457: POP
23458: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] or not mc_bases [ base ] ;
23459: LD_VAR 0 2
23463: PPUSH
23464: LD_INT 95
23466: PUSH
23467: LD_EXP 68
23471: PUSH
23472: LD_VAR 0 1
23476: ARRAY
23477: PUSH
23478: EMPTY
23479: LIST
23480: LIST
23481: PPUSH
23482: CALL_OW 72
23486: PUSH
23487: LD_VAR 0 2
23491: EQUAL
23492: PUSH
23493: LD_EXP 67
23497: PUSH
23498: LD_VAR 0 1
23502: ARRAY
23503: OR
23504: PUSH
23505: LD_EXP 44
23509: PUSH
23510: LD_VAR 0 1
23514: ARRAY
23515: NOT
23516: OR
23517: IFFALSE 23287
// end ; MC_Reset ( base , 19 ) ;
23519: LD_VAR 0 1
23523: PPUSH
23524: LD_INT 19
23526: PPUSH
23527: CALL 66833 0 2
// MC_Reset ( base , 20 ) ;
23531: LD_VAR 0 1
23535: PPUSH
23536: LD_INT 20
23538: PPUSH
23539: CALL 66833 0 2
// end ;
23543: LD_VAR 0 4
23547: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
23548: LD_INT 0
23550: PPUSH
23551: PPUSH
23552: PPUSH
23553: PPUSH
// result := false ;
23554: LD_ADDR_VAR 0 2
23558: PUSH
23559: LD_INT 0
23561: ST_TO_ADDR
// side := GetSide ( unit ) ;
23562: LD_ADDR_VAR 0 3
23566: PUSH
23567: LD_VAR 0 1
23571: PPUSH
23572: CALL_OW 255
23576: ST_TO_ADDR
// nat := GetNation ( unit ) ;
23577: LD_ADDR_VAR 0 4
23581: PUSH
23582: LD_VAR 0 1
23586: PPUSH
23587: CALL_OW 248
23591: ST_TO_ADDR
// case nat of 1 :
23592: LD_VAR 0 4
23596: PUSH
23597: LD_INT 1
23599: DOUBLE
23600: EQUAL
23601: IFTRUE 23605
23603: GO 23616
23605: POP
// tech := tech_lassight ; 2 :
23606: LD_ADDR_VAR 0 5
23610: PUSH
23611: LD_INT 12
23613: ST_TO_ADDR
23614: GO 23655
23616: LD_INT 2
23618: DOUBLE
23619: EQUAL
23620: IFTRUE 23624
23622: GO 23635
23624: POP
// tech := tech_mortar ; 3 :
23625: LD_ADDR_VAR 0 5
23629: PUSH
23630: LD_INT 41
23632: ST_TO_ADDR
23633: GO 23655
23635: LD_INT 3
23637: DOUBLE
23638: EQUAL
23639: IFTRUE 23643
23641: GO 23654
23643: POP
// tech := tech_bazooka ; end ;
23644: LD_ADDR_VAR 0 5
23648: PUSH
23649: LD_INT 44
23651: ST_TO_ADDR
23652: GO 23655
23654: POP
// if Researched ( side , tech ) then
23655: LD_VAR 0 3
23659: PPUSH
23660: LD_VAR 0 5
23664: PPUSH
23665: CALL_OW 325
23669: IFFALSE 23696
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
23671: LD_ADDR_VAR 0 2
23675: PUSH
23676: LD_INT 5
23678: PUSH
23679: LD_INT 8
23681: PUSH
23682: LD_INT 9
23684: PUSH
23685: EMPTY
23686: LIST
23687: LIST
23688: LIST
23689: PUSH
23690: LD_VAR 0 4
23694: ARRAY
23695: ST_TO_ADDR
// end ;
23696: LD_VAR 0 2
23700: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
23701: LD_INT 0
23703: PPUSH
23704: PPUSH
23705: PPUSH
// if not mines then
23706: LD_VAR 0 2
23710: NOT
23711: IFFALSE 23715
// exit ;
23713: GO 23859
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23715: LD_ADDR_VAR 0 5
23719: PUSH
23720: LD_INT 81
23722: PUSH
23723: LD_VAR 0 1
23727: PUSH
23728: EMPTY
23729: LIST
23730: LIST
23731: PUSH
23732: LD_INT 3
23734: PUSH
23735: LD_INT 21
23737: PUSH
23738: LD_INT 3
23740: PUSH
23741: EMPTY
23742: LIST
23743: LIST
23744: PUSH
23745: EMPTY
23746: LIST
23747: LIST
23748: PUSH
23749: EMPTY
23750: LIST
23751: LIST
23752: PPUSH
23753: CALL_OW 69
23757: ST_TO_ADDR
// for i in mines do
23758: LD_ADDR_VAR 0 4
23762: PUSH
23763: LD_VAR 0 2
23767: PUSH
23768: FOR_IN
23769: IFFALSE 23857
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
23771: LD_VAR 0 4
23775: PUSH
23776: LD_INT 1
23778: ARRAY
23779: PPUSH
23780: LD_VAR 0 4
23784: PUSH
23785: LD_INT 2
23787: ARRAY
23788: PPUSH
23789: CALL_OW 458
23793: NOT
23794: IFFALSE 23798
// continue ;
23796: GO 23768
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
23798: LD_VAR 0 4
23802: PUSH
23803: LD_INT 1
23805: ARRAY
23806: PPUSH
23807: LD_VAR 0 4
23811: PUSH
23812: LD_INT 2
23814: ARRAY
23815: PPUSH
23816: CALL_OW 428
23820: PUSH
23821: LD_VAR 0 5
23825: IN
23826: IFFALSE 23855
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
23828: LD_VAR 0 4
23832: PUSH
23833: LD_INT 1
23835: ARRAY
23836: PPUSH
23837: LD_VAR 0 4
23841: PUSH
23842: LD_INT 2
23844: ARRAY
23845: PPUSH
23846: LD_VAR 0 1
23850: PPUSH
23851: CALL_OW 456
// end ;
23855: GO 23768
23857: POP
23858: POP
// end ;
23859: LD_VAR 0 3
23863: RET
// export function Count ( array ) ; var i ; begin
23864: LD_INT 0
23866: PPUSH
23867: PPUSH
// result := 0 ;
23868: LD_ADDR_VAR 0 2
23872: PUSH
23873: LD_INT 0
23875: ST_TO_ADDR
// for i in array do
23876: LD_ADDR_VAR 0 3
23880: PUSH
23881: LD_VAR 0 1
23885: PUSH
23886: FOR_IN
23887: IFFALSE 23911
// if i then
23889: LD_VAR 0 3
23893: IFFALSE 23909
// result := result + 1 ;
23895: LD_ADDR_VAR 0 2
23899: PUSH
23900: LD_VAR 0 2
23904: PUSH
23905: LD_INT 1
23907: PLUS
23908: ST_TO_ADDR
23909: GO 23886
23911: POP
23912: POP
// end ;
23913: LD_VAR 0 2
23917: RET
// export function IsEmpty ( building ) ; begin
23918: LD_INT 0
23920: PPUSH
// if not building then
23921: LD_VAR 0 1
23925: NOT
23926: IFFALSE 23930
// exit ;
23928: GO 23973
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
23930: LD_ADDR_VAR 0 2
23934: PUSH
23935: LD_VAR 0 1
23939: PUSH
23940: LD_INT 22
23942: PUSH
23943: LD_VAR 0 1
23947: PPUSH
23948: CALL_OW 255
23952: PUSH
23953: EMPTY
23954: LIST
23955: LIST
23956: PUSH
23957: LD_INT 58
23959: PUSH
23960: EMPTY
23961: LIST
23962: PUSH
23963: EMPTY
23964: LIST
23965: LIST
23966: PPUSH
23967: CALL_OW 69
23971: IN
23972: ST_TO_ADDR
// end ;
23973: LD_VAR 0 2
23977: RET
// export function IsNotFull ( building ) ; begin
23978: LD_INT 0
23980: PPUSH
// if not building then
23981: LD_VAR 0 1
23985: NOT
23986: IFFALSE 23990
// exit ;
23988: GO 24009
// result := UnitsInside ( building ) < 6 ;
23990: LD_ADDR_VAR 0 2
23994: PUSH
23995: LD_VAR 0 1
23999: PPUSH
24000: CALL_OW 313
24004: PUSH
24005: LD_INT 6
24007: LESS
24008: ST_TO_ADDR
// end ;
24009: LD_VAR 0 2
24013: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
24014: LD_INT 0
24016: PPUSH
24017: PPUSH
24018: PPUSH
24019: PPUSH
// tmp := [ ] ;
24020: LD_ADDR_VAR 0 3
24024: PUSH
24025: EMPTY
24026: ST_TO_ADDR
// list := [ ] ;
24027: LD_ADDR_VAR 0 5
24031: PUSH
24032: EMPTY
24033: ST_TO_ADDR
// for i = 16 to 25 do
24034: LD_ADDR_VAR 0 4
24038: PUSH
24039: DOUBLE
24040: LD_INT 16
24042: DEC
24043: ST_TO_ADDR
24044: LD_INT 25
24046: PUSH
24047: FOR_TO
24048: IFFALSE 24121
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
24050: LD_ADDR_VAR 0 3
24054: PUSH
24055: LD_VAR 0 3
24059: PUSH
24060: LD_INT 22
24062: PUSH
24063: LD_VAR 0 1
24067: PPUSH
24068: CALL_OW 255
24072: PUSH
24073: EMPTY
24074: LIST
24075: LIST
24076: PUSH
24077: LD_INT 91
24079: PUSH
24080: LD_VAR 0 1
24084: PUSH
24085: LD_INT 6
24087: PUSH
24088: EMPTY
24089: LIST
24090: LIST
24091: LIST
24092: PUSH
24093: LD_INT 30
24095: PUSH
24096: LD_VAR 0 4
24100: PUSH
24101: EMPTY
24102: LIST
24103: LIST
24104: PUSH
24105: EMPTY
24106: LIST
24107: LIST
24108: LIST
24109: PUSH
24110: EMPTY
24111: LIST
24112: PPUSH
24113: CALL_OW 69
24117: ADD
24118: ST_TO_ADDR
24119: GO 24047
24121: POP
24122: POP
// for i = 1 to tmp do
24123: LD_ADDR_VAR 0 4
24127: PUSH
24128: DOUBLE
24129: LD_INT 1
24131: DEC
24132: ST_TO_ADDR
24133: LD_VAR 0 3
24137: PUSH
24138: FOR_TO
24139: IFFALSE 24227
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
24141: LD_ADDR_VAR 0 5
24145: PUSH
24146: LD_VAR 0 5
24150: PUSH
24151: LD_VAR 0 3
24155: PUSH
24156: LD_VAR 0 4
24160: ARRAY
24161: PPUSH
24162: CALL_OW 266
24166: PUSH
24167: LD_VAR 0 3
24171: PUSH
24172: LD_VAR 0 4
24176: ARRAY
24177: PPUSH
24178: CALL_OW 250
24182: PUSH
24183: LD_VAR 0 3
24187: PUSH
24188: LD_VAR 0 4
24192: ARRAY
24193: PPUSH
24194: CALL_OW 251
24198: PUSH
24199: LD_VAR 0 3
24203: PUSH
24204: LD_VAR 0 4
24208: ARRAY
24209: PPUSH
24210: CALL_OW 254
24214: PUSH
24215: EMPTY
24216: LIST
24217: LIST
24218: LIST
24219: LIST
24220: PUSH
24221: EMPTY
24222: LIST
24223: ADD
24224: ST_TO_ADDR
24225: GO 24138
24227: POP
24228: POP
// result := list ;
24229: LD_ADDR_VAR 0 2
24233: PUSH
24234: LD_VAR 0 5
24238: ST_TO_ADDR
// end ;
24239: LD_VAR 0 2
24243: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
24244: LD_INT 0
24246: PPUSH
24247: PPUSH
24248: PPUSH
24249: PPUSH
24250: PPUSH
24251: PPUSH
24252: PPUSH
// if not factory then
24253: LD_VAR 0 1
24257: NOT
24258: IFFALSE 24262
// exit ;
24260: GO 24855
// if control = control_apeman then
24262: LD_VAR 0 4
24266: PUSH
24267: LD_INT 5
24269: EQUAL
24270: IFFALSE 24379
// begin tmp := UnitsInside ( factory ) ;
24272: LD_ADDR_VAR 0 8
24276: PUSH
24277: LD_VAR 0 1
24281: PPUSH
24282: CALL_OW 313
24286: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
24287: LD_VAR 0 8
24291: PPUSH
24292: LD_INT 25
24294: PUSH
24295: LD_INT 12
24297: PUSH
24298: EMPTY
24299: LIST
24300: LIST
24301: PPUSH
24302: CALL_OW 72
24306: NOT
24307: IFFALSE 24317
// control := control_manual ;
24309: LD_ADDR_VAR 0 4
24313: PUSH
24314: LD_INT 1
24316: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
24317: LD_ADDR_VAR 0 8
24321: PUSH
24322: LD_VAR 0 1
24326: PPUSH
24327: CALL 24014 0 1
24331: ST_TO_ADDR
// if tmp then
24332: LD_VAR 0 8
24336: IFFALSE 24379
// begin for i in tmp do
24338: LD_ADDR_VAR 0 7
24342: PUSH
24343: LD_VAR 0 8
24347: PUSH
24348: FOR_IN
24349: IFFALSE 24377
// if i [ 1 ] = b_ext_radio then
24351: LD_VAR 0 7
24355: PUSH
24356: LD_INT 1
24358: ARRAY
24359: PUSH
24360: LD_INT 22
24362: EQUAL
24363: IFFALSE 24375
// begin control := control_remote ;
24365: LD_ADDR_VAR 0 4
24369: PUSH
24370: LD_INT 2
24372: ST_TO_ADDR
// break ;
24373: GO 24377
// end ;
24375: GO 24348
24377: POP
24378: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24379: LD_VAR 0 1
24383: PPUSH
24384: LD_VAR 0 2
24388: PPUSH
24389: LD_VAR 0 3
24393: PPUSH
24394: LD_VAR 0 4
24398: PPUSH
24399: LD_VAR 0 5
24403: PPUSH
24404: CALL_OW 448
24408: IFFALSE 24443
// begin result := [ chassis , engine , control , weapon ] ;
24410: LD_ADDR_VAR 0 6
24414: PUSH
24415: LD_VAR 0 2
24419: PUSH
24420: LD_VAR 0 3
24424: PUSH
24425: LD_VAR 0 4
24429: PUSH
24430: LD_VAR 0 5
24434: PUSH
24435: EMPTY
24436: LIST
24437: LIST
24438: LIST
24439: LIST
24440: ST_TO_ADDR
// exit ;
24441: GO 24855
// end ; _chassis := AvailableChassisList ( factory ) ;
24443: LD_ADDR_VAR 0 9
24447: PUSH
24448: LD_VAR 0 1
24452: PPUSH
24453: CALL_OW 475
24457: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
24458: LD_ADDR_VAR 0 11
24462: PUSH
24463: LD_VAR 0 1
24467: PPUSH
24468: CALL_OW 476
24472: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
24473: LD_ADDR_VAR 0 12
24477: PUSH
24478: LD_VAR 0 1
24482: PPUSH
24483: CALL_OW 477
24487: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
24488: LD_ADDR_VAR 0 10
24492: PUSH
24493: LD_VAR 0 1
24497: PPUSH
24498: CALL_OW 478
24502: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
24503: LD_VAR 0 9
24507: NOT
24508: PUSH
24509: LD_VAR 0 11
24513: NOT
24514: OR
24515: PUSH
24516: LD_VAR 0 12
24520: NOT
24521: OR
24522: PUSH
24523: LD_VAR 0 10
24527: NOT
24528: OR
24529: IFFALSE 24564
// begin result := [ chassis , engine , control , weapon ] ;
24531: LD_ADDR_VAR 0 6
24535: PUSH
24536: LD_VAR 0 2
24540: PUSH
24541: LD_VAR 0 3
24545: PUSH
24546: LD_VAR 0 4
24550: PUSH
24551: LD_VAR 0 5
24555: PUSH
24556: EMPTY
24557: LIST
24558: LIST
24559: LIST
24560: LIST
24561: ST_TO_ADDR
// exit ;
24562: GO 24855
// end ; if not chassis in _chassis then
24564: LD_VAR 0 2
24568: PUSH
24569: LD_VAR 0 9
24573: IN
24574: NOT
24575: IFFALSE 24601
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
24577: LD_ADDR_VAR 0 2
24581: PUSH
24582: LD_VAR 0 9
24586: PUSH
24587: LD_INT 1
24589: PPUSH
24590: LD_VAR 0 9
24594: PPUSH
24595: CALL_OW 12
24599: ARRAY
24600: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
24601: LD_VAR 0 2
24605: PPUSH
24606: LD_VAR 0 3
24610: PPUSH
24611: CALL 24860 0 2
24615: NOT
24616: IFFALSE 24675
// repeat engine := _engine [ 1 ] ;
24618: LD_ADDR_VAR 0 3
24622: PUSH
24623: LD_VAR 0 11
24627: PUSH
24628: LD_INT 1
24630: ARRAY
24631: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
24632: LD_ADDR_VAR 0 11
24636: PUSH
24637: LD_VAR 0 11
24641: PPUSH
24642: LD_INT 1
24644: PPUSH
24645: CALL_OW 3
24649: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
24650: LD_VAR 0 2
24654: PPUSH
24655: LD_VAR 0 3
24659: PPUSH
24660: CALL 24860 0 2
24664: PUSH
24665: LD_VAR 0 11
24669: PUSH
24670: EMPTY
24671: EQUAL
24672: OR
24673: IFFALSE 24618
// if not control in _control then
24675: LD_VAR 0 4
24679: PUSH
24680: LD_VAR 0 12
24684: IN
24685: NOT
24686: IFFALSE 24712
// control := _control [ rand ( 1 , _control ) ] ;
24688: LD_ADDR_VAR 0 4
24692: PUSH
24693: LD_VAR 0 12
24697: PUSH
24698: LD_INT 1
24700: PPUSH
24701: LD_VAR 0 12
24705: PPUSH
24706: CALL_OW 12
24710: ARRAY
24711: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
24712: LD_VAR 0 2
24716: PPUSH
24717: LD_VAR 0 5
24721: PPUSH
24722: CALL 25080 0 2
24726: NOT
24727: IFFALSE 24786
// repeat weapon := _weapon [ 1 ] ;
24729: LD_ADDR_VAR 0 5
24733: PUSH
24734: LD_VAR 0 10
24738: PUSH
24739: LD_INT 1
24741: ARRAY
24742: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
24743: LD_ADDR_VAR 0 10
24747: PUSH
24748: LD_VAR 0 10
24752: PPUSH
24753: LD_INT 1
24755: PPUSH
24756: CALL_OW 3
24760: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
24761: LD_VAR 0 2
24765: PPUSH
24766: LD_VAR 0 5
24770: PPUSH
24771: CALL 25080 0 2
24775: PUSH
24776: LD_VAR 0 10
24780: PUSH
24781: EMPTY
24782: EQUAL
24783: OR
24784: IFFALSE 24729
// result := [ ] ;
24786: LD_ADDR_VAR 0 6
24790: PUSH
24791: EMPTY
24792: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24793: LD_VAR 0 1
24797: PPUSH
24798: LD_VAR 0 2
24802: PPUSH
24803: LD_VAR 0 3
24807: PPUSH
24808: LD_VAR 0 4
24812: PPUSH
24813: LD_VAR 0 5
24817: PPUSH
24818: CALL_OW 448
24822: IFFALSE 24855
// result := [ chassis , engine , control , weapon ] ;
24824: LD_ADDR_VAR 0 6
24828: PUSH
24829: LD_VAR 0 2
24833: PUSH
24834: LD_VAR 0 3
24838: PUSH
24839: LD_VAR 0 4
24843: PUSH
24844: LD_VAR 0 5
24848: PUSH
24849: EMPTY
24850: LIST
24851: LIST
24852: LIST
24853: LIST
24854: ST_TO_ADDR
// end ;
24855: LD_VAR 0 6
24859: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
24860: LD_INT 0
24862: PPUSH
// if not chassis or not engine then
24863: LD_VAR 0 1
24867: NOT
24868: PUSH
24869: LD_VAR 0 2
24873: NOT
24874: OR
24875: IFFALSE 24879
// exit ;
24877: GO 25075
// case engine of engine_solar :
24879: LD_VAR 0 2
24883: PUSH
24884: LD_INT 2
24886: DOUBLE
24887: EQUAL
24888: IFTRUE 24892
24890: GO 24930
24892: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
24893: LD_ADDR_VAR 0 3
24897: PUSH
24898: LD_INT 11
24900: PUSH
24901: LD_INT 12
24903: PUSH
24904: LD_INT 13
24906: PUSH
24907: LD_INT 14
24909: PUSH
24910: LD_INT 1
24912: PUSH
24913: LD_INT 2
24915: PUSH
24916: LD_INT 3
24918: PUSH
24919: EMPTY
24920: LIST
24921: LIST
24922: LIST
24923: LIST
24924: LIST
24925: LIST
24926: LIST
24927: ST_TO_ADDR
24928: GO 25059
24930: LD_INT 1
24932: DOUBLE
24933: EQUAL
24934: IFTRUE 24938
24936: GO 25000
24938: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
24939: LD_ADDR_VAR 0 3
24943: PUSH
24944: LD_INT 11
24946: PUSH
24947: LD_INT 12
24949: PUSH
24950: LD_INT 13
24952: PUSH
24953: LD_INT 14
24955: PUSH
24956: LD_INT 1
24958: PUSH
24959: LD_INT 2
24961: PUSH
24962: LD_INT 3
24964: PUSH
24965: LD_INT 4
24967: PUSH
24968: LD_INT 5
24970: PUSH
24971: LD_INT 21
24973: PUSH
24974: LD_INT 23
24976: PUSH
24977: LD_INT 22
24979: PUSH
24980: LD_INT 24
24982: PUSH
24983: EMPTY
24984: LIST
24985: LIST
24986: LIST
24987: LIST
24988: LIST
24989: LIST
24990: LIST
24991: LIST
24992: LIST
24993: LIST
24994: LIST
24995: LIST
24996: LIST
24997: ST_TO_ADDR
24998: GO 25059
25000: LD_INT 3
25002: DOUBLE
25003: EQUAL
25004: IFTRUE 25008
25006: GO 25058
25008: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25009: LD_ADDR_VAR 0 3
25013: PUSH
25014: LD_INT 13
25016: PUSH
25017: LD_INT 14
25019: PUSH
25020: LD_INT 2
25022: PUSH
25023: LD_INT 3
25025: PUSH
25026: LD_INT 4
25028: PUSH
25029: LD_INT 5
25031: PUSH
25032: LD_INT 21
25034: PUSH
25035: LD_INT 22
25037: PUSH
25038: LD_INT 23
25040: PUSH
25041: LD_INT 24
25043: PUSH
25044: EMPTY
25045: LIST
25046: LIST
25047: LIST
25048: LIST
25049: LIST
25050: LIST
25051: LIST
25052: LIST
25053: LIST
25054: LIST
25055: ST_TO_ADDR
25056: GO 25059
25058: POP
// result := ( chassis in result ) ;
25059: LD_ADDR_VAR 0 3
25063: PUSH
25064: LD_VAR 0 1
25068: PUSH
25069: LD_VAR 0 3
25073: IN
25074: ST_TO_ADDR
// end ;
25075: LD_VAR 0 3
25079: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
25080: LD_INT 0
25082: PPUSH
// if not chassis or not weapon then
25083: LD_VAR 0 1
25087: NOT
25088: PUSH
25089: LD_VAR 0 2
25093: NOT
25094: OR
25095: IFFALSE 25099
// exit ;
25097: GO 26125
// case weapon of us_machine_gun :
25099: LD_VAR 0 2
25103: PUSH
25104: LD_INT 2
25106: DOUBLE
25107: EQUAL
25108: IFTRUE 25112
25110: GO 25142
25112: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
25113: LD_ADDR_VAR 0 3
25117: PUSH
25118: LD_INT 1
25120: PUSH
25121: LD_INT 2
25123: PUSH
25124: LD_INT 3
25126: PUSH
25127: LD_INT 4
25129: PUSH
25130: LD_INT 5
25132: PUSH
25133: EMPTY
25134: LIST
25135: LIST
25136: LIST
25137: LIST
25138: LIST
25139: ST_TO_ADDR
25140: GO 26109
25142: LD_INT 3
25144: DOUBLE
25145: EQUAL
25146: IFTRUE 25150
25148: GO 25180
25150: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
25151: LD_ADDR_VAR 0 3
25155: PUSH
25156: LD_INT 1
25158: PUSH
25159: LD_INT 2
25161: PUSH
25162: LD_INT 3
25164: PUSH
25165: LD_INT 4
25167: PUSH
25168: LD_INT 5
25170: PUSH
25171: EMPTY
25172: LIST
25173: LIST
25174: LIST
25175: LIST
25176: LIST
25177: ST_TO_ADDR
25178: GO 26109
25180: LD_INT 11
25182: DOUBLE
25183: EQUAL
25184: IFTRUE 25188
25186: GO 25218
25188: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
25189: LD_ADDR_VAR 0 3
25193: PUSH
25194: LD_INT 1
25196: PUSH
25197: LD_INT 2
25199: PUSH
25200: LD_INT 3
25202: PUSH
25203: LD_INT 4
25205: PUSH
25206: LD_INT 5
25208: PUSH
25209: EMPTY
25210: LIST
25211: LIST
25212: LIST
25213: LIST
25214: LIST
25215: ST_TO_ADDR
25216: GO 26109
25218: LD_INT 4
25220: DOUBLE
25221: EQUAL
25222: IFTRUE 25226
25224: GO 25252
25226: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
25227: LD_ADDR_VAR 0 3
25231: PUSH
25232: LD_INT 2
25234: PUSH
25235: LD_INT 3
25237: PUSH
25238: LD_INT 4
25240: PUSH
25241: LD_INT 5
25243: PUSH
25244: EMPTY
25245: LIST
25246: LIST
25247: LIST
25248: LIST
25249: ST_TO_ADDR
25250: GO 26109
25252: LD_INT 5
25254: DOUBLE
25255: EQUAL
25256: IFTRUE 25260
25258: GO 25286
25260: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
25261: LD_ADDR_VAR 0 3
25265: PUSH
25266: LD_INT 2
25268: PUSH
25269: LD_INT 3
25271: PUSH
25272: LD_INT 4
25274: PUSH
25275: LD_INT 5
25277: PUSH
25278: EMPTY
25279: LIST
25280: LIST
25281: LIST
25282: LIST
25283: ST_TO_ADDR
25284: GO 26109
25286: LD_INT 9
25288: DOUBLE
25289: EQUAL
25290: IFTRUE 25294
25292: GO 25320
25294: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
25295: LD_ADDR_VAR 0 3
25299: PUSH
25300: LD_INT 2
25302: PUSH
25303: LD_INT 3
25305: PUSH
25306: LD_INT 4
25308: PUSH
25309: LD_INT 5
25311: PUSH
25312: EMPTY
25313: LIST
25314: LIST
25315: LIST
25316: LIST
25317: ST_TO_ADDR
25318: GO 26109
25320: LD_INT 7
25322: DOUBLE
25323: EQUAL
25324: IFTRUE 25328
25326: GO 25354
25328: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
25329: LD_ADDR_VAR 0 3
25333: PUSH
25334: LD_INT 2
25336: PUSH
25337: LD_INT 3
25339: PUSH
25340: LD_INT 4
25342: PUSH
25343: LD_INT 5
25345: PUSH
25346: EMPTY
25347: LIST
25348: LIST
25349: LIST
25350: LIST
25351: ST_TO_ADDR
25352: GO 26109
25354: LD_INT 12
25356: DOUBLE
25357: EQUAL
25358: IFTRUE 25362
25360: GO 25388
25362: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
25363: LD_ADDR_VAR 0 3
25367: PUSH
25368: LD_INT 2
25370: PUSH
25371: LD_INT 3
25373: PUSH
25374: LD_INT 4
25376: PUSH
25377: LD_INT 5
25379: PUSH
25380: EMPTY
25381: LIST
25382: LIST
25383: LIST
25384: LIST
25385: ST_TO_ADDR
25386: GO 26109
25388: LD_INT 13
25390: DOUBLE
25391: EQUAL
25392: IFTRUE 25396
25394: GO 25422
25396: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
25397: LD_ADDR_VAR 0 3
25401: PUSH
25402: LD_INT 2
25404: PUSH
25405: LD_INT 3
25407: PUSH
25408: LD_INT 4
25410: PUSH
25411: LD_INT 5
25413: PUSH
25414: EMPTY
25415: LIST
25416: LIST
25417: LIST
25418: LIST
25419: ST_TO_ADDR
25420: GO 26109
25422: LD_INT 14
25424: DOUBLE
25425: EQUAL
25426: IFTRUE 25430
25428: GO 25448
25430: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
25431: LD_ADDR_VAR 0 3
25435: PUSH
25436: LD_INT 4
25438: PUSH
25439: LD_INT 5
25441: PUSH
25442: EMPTY
25443: LIST
25444: LIST
25445: ST_TO_ADDR
25446: GO 26109
25448: LD_INT 6
25450: DOUBLE
25451: EQUAL
25452: IFTRUE 25456
25454: GO 25474
25456: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
25457: LD_ADDR_VAR 0 3
25461: PUSH
25462: LD_INT 4
25464: PUSH
25465: LD_INT 5
25467: PUSH
25468: EMPTY
25469: LIST
25470: LIST
25471: ST_TO_ADDR
25472: GO 26109
25474: LD_INT 10
25476: DOUBLE
25477: EQUAL
25478: IFTRUE 25482
25480: GO 25500
25482: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
25483: LD_ADDR_VAR 0 3
25487: PUSH
25488: LD_INT 4
25490: PUSH
25491: LD_INT 5
25493: PUSH
25494: EMPTY
25495: LIST
25496: LIST
25497: ST_TO_ADDR
25498: GO 26109
25500: LD_INT 22
25502: DOUBLE
25503: EQUAL
25504: IFTRUE 25508
25506: GO 25534
25508: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
25509: LD_ADDR_VAR 0 3
25513: PUSH
25514: LD_INT 11
25516: PUSH
25517: LD_INT 12
25519: PUSH
25520: LD_INT 13
25522: PUSH
25523: LD_INT 14
25525: PUSH
25526: EMPTY
25527: LIST
25528: LIST
25529: LIST
25530: LIST
25531: ST_TO_ADDR
25532: GO 26109
25534: LD_INT 23
25536: DOUBLE
25537: EQUAL
25538: IFTRUE 25542
25540: GO 25568
25542: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
25543: LD_ADDR_VAR 0 3
25547: PUSH
25548: LD_INT 11
25550: PUSH
25551: LD_INT 12
25553: PUSH
25554: LD_INT 13
25556: PUSH
25557: LD_INT 14
25559: PUSH
25560: EMPTY
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: ST_TO_ADDR
25566: GO 26109
25568: LD_INT 24
25570: DOUBLE
25571: EQUAL
25572: IFTRUE 25576
25574: GO 25602
25576: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
25577: LD_ADDR_VAR 0 3
25581: PUSH
25582: LD_INT 11
25584: PUSH
25585: LD_INT 12
25587: PUSH
25588: LD_INT 13
25590: PUSH
25591: LD_INT 14
25593: PUSH
25594: EMPTY
25595: LIST
25596: LIST
25597: LIST
25598: LIST
25599: ST_TO_ADDR
25600: GO 26109
25602: LD_INT 30
25604: DOUBLE
25605: EQUAL
25606: IFTRUE 25610
25608: GO 25636
25610: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
25611: LD_ADDR_VAR 0 3
25615: PUSH
25616: LD_INT 11
25618: PUSH
25619: LD_INT 12
25621: PUSH
25622: LD_INT 13
25624: PUSH
25625: LD_INT 14
25627: PUSH
25628: EMPTY
25629: LIST
25630: LIST
25631: LIST
25632: LIST
25633: ST_TO_ADDR
25634: GO 26109
25636: LD_INT 25
25638: DOUBLE
25639: EQUAL
25640: IFTRUE 25644
25642: GO 25662
25644: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
25645: LD_ADDR_VAR 0 3
25649: PUSH
25650: LD_INT 13
25652: PUSH
25653: LD_INT 14
25655: PUSH
25656: EMPTY
25657: LIST
25658: LIST
25659: ST_TO_ADDR
25660: GO 26109
25662: LD_INT 27
25664: DOUBLE
25665: EQUAL
25666: IFTRUE 25670
25668: GO 25688
25670: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
25671: LD_ADDR_VAR 0 3
25675: PUSH
25676: LD_INT 13
25678: PUSH
25679: LD_INT 14
25681: PUSH
25682: EMPTY
25683: LIST
25684: LIST
25685: ST_TO_ADDR
25686: GO 26109
25688: LD_INT 28
25690: DOUBLE
25691: EQUAL
25692: IFTRUE 25696
25694: GO 25714
25696: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
25697: LD_ADDR_VAR 0 3
25701: PUSH
25702: LD_INT 13
25704: PUSH
25705: LD_INT 14
25707: PUSH
25708: EMPTY
25709: LIST
25710: LIST
25711: ST_TO_ADDR
25712: GO 26109
25714: LD_INT 29
25716: DOUBLE
25717: EQUAL
25718: IFTRUE 25722
25720: GO 25740
25722: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
25723: LD_ADDR_VAR 0 3
25727: PUSH
25728: LD_INT 13
25730: PUSH
25731: LD_INT 14
25733: PUSH
25734: EMPTY
25735: LIST
25736: LIST
25737: ST_TO_ADDR
25738: GO 26109
25740: LD_INT 31
25742: DOUBLE
25743: EQUAL
25744: IFTRUE 25748
25746: GO 25766
25748: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
25749: LD_ADDR_VAR 0 3
25753: PUSH
25754: LD_INT 13
25756: PUSH
25757: LD_INT 14
25759: PUSH
25760: EMPTY
25761: LIST
25762: LIST
25763: ST_TO_ADDR
25764: GO 26109
25766: LD_INT 26
25768: DOUBLE
25769: EQUAL
25770: IFTRUE 25774
25772: GO 25792
25774: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
25775: LD_ADDR_VAR 0 3
25779: PUSH
25780: LD_INT 13
25782: PUSH
25783: LD_INT 14
25785: PUSH
25786: EMPTY
25787: LIST
25788: LIST
25789: ST_TO_ADDR
25790: GO 26109
25792: LD_INT 42
25794: DOUBLE
25795: EQUAL
25796: IFTRUE 25800
25798: GO 25826
25800: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
25801: LD_ADDR_VAR 0 3
25805: PUSH
25806: LD_INT 21
25808: PUSH
25809: LD_INT 22
25811: PUSH
25812: LD_INT 23
25814: PUSH
25815: LD_INT 24
25817: PUSH
25818: EMPTY
25819: LIST
25820: LIST
25821: LIST
25822: LIST
25823: ST_TO_ADDR
25824: GO 26109
25826: LD_INT 43
25828: DOUBLE
25829: EQUAL
25830: IFTRUE 25834
25832: GO 25860
25834: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
25835: LD_ADDR_VAR 0 3
25839: PUSH
25840: LD_INT 21
25842: PUSH
25843: LD_INT 22
25845: PUSH
25846: LD_INT 23
25848: PUSH
25849: LD_INT 24
25851: PUSH
25852: EMPTY
25853: LIST
25854: LIST
25855: LIST
25856: LIST
25857: ST_TO_ADDR
25858: GO 26109
25860: LD_INT 44
25862: DOUBLE
25863: EQUAL
25864: IFTRUE 25868
25866: GO 25894
25868: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
25869: LD_ADDR_VAR 0 3
25873: PUSH
25874: LD_INT 21
25876: PUSH
25877: LD_INT 22
25879: PUSH
25880: LD_INT 23
25882: PUSH
25883: LD_INT 24
25885: PUSH
25886: EMPTY
25887: LIST
25888: LIST
25889: LIST
25890: LIST
25891: ST_TO_ADDR
25892: GO 26109
25894: LD_INT 45
25896: DOUBLE
25897: EQUAL
25898: IFTRUE 25902
25900: GO 25928
25902: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
25903: LD_ADDR_VAR 0 3
25907: PUSH
25908: LD_INT 21
25910: PUSH
25911: LD_INT 22
25913: PUSH
25914: LD_INT 23
25916: PUSH
25917: LD_INT 24
25919: PUSH
25920: EMPTY
25921: LIST
25922: LIST
25923: LIST
25924: LIST
25925: ST_TO_ADDR
25926: GO 26109
25928: LD_INT 49
25930: DOUBLE
25931: EQUAL
25932: IFTRUE 25936
25934: GO 25962
25936: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
25937: LD_ADDR_VAR 0 3
25941: PUSH
25942: LD_INT 21
25944: PUSH
25945: LD_INT 22
25947: PUSH
25948: LD_INT 23
25950: PUSH
25951: LD_INT 24
25953: PUSH
25954: EMPTY
25955: LIST
25956: LIST
25957: LIST
25958: LIST
25959: ST_TO_ADDR
25960: GO 26109
25962: LD_INT 51
25964: DOUBLE
25965: EQUAL
25966: IFTRUE 25970
25968: GO 25996
25970: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
25971: LD_ADDR_VAR 0 3
25975: PUSH
25976: LD_INT 21
25978: PUSH
25979: LD_INT 22
25981: PUSH
25982: LD_INT 23
25984: PUSH
25985: LD_INT 24
25987: PUSH
25988: EMPTY
25989: LIST
25990: LIST
25991: LIST
25992: LIST
25993: ST_TO_ADDR
25994: GO 26109
25996: LD_INT 52
25998: DOUBLE
25999: EQUAL
26000: IFTRUE 26004
26002: GO 26030
26004: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
26005: LD_ADDR_VAR 0 3
26009: PUSH
26010: LD_INT 21
26012: PUSH
26013: LD_INT 22
26015: PUSH
26016: LD_INT 23
26018: PUSH
26019: LD_INT 24
26021: PUSH
26022: EMPTY
26023: LIST
26024: LIST
26025: LIST
26026: LIST
26027: ST_TO_ADDR
26028: GO 26109
26030: LD_INT 53
26032: DOUBLE
26033: EQUAL
26034: IFTRUE 26038
26036: GO 26056
26038: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
26039: LD_ADDR_VAR 0 3
26043: PUSH
26044: LD_INT 23
26046: PUSH
26047: LD_INT 24
26049: PUSH
26050: EMPTY
26051: LIST
26052: LIST
26053: ST_TO_ADDR
26054: GO 26109
26056: LD_INT 46
26058: DOUBLE
26059: EQUAL
26060: IFTRUE 26064
26062: GO 26082
26064: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
26065: LD_ADDR_VAR 0 3
26069: PUSH
26070: LD_INT 23
26072: PUSH
26073: LD_INT 24
26075: PUSH
26076: EMPTY
26077: LIST
26078: LIST
26079: ST_TO_ADDR
26080: GO 26109
26082: LD_INT 47
26084: DOUBLE
26085: EQUAL
26086: IFTRUE 26090
26088: GO 26108
26090: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26091: LD_ADDR_VAR 0 3
26095: PUSH
26096: LD_INT 23
26098: PUSH
26099: LD_INT 24
26101: PUSH
26102: EMPTY
26103: LIST
26104: LIST
26105: ST_TO_ADDR
26106: GO 26109
26108: POP
// result := ( chassis in result ) ;
26109: LD_ADDR_VAR 0 3
26113: PUSH
26114: LD_VAR 0 1
26118: PUSH
26119: LD_VAR 0 3
26123: IN
26124: ST_TO_ADDR
// end ;
26125: LD_VAR 0 3
26129: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
26130: LD_INT 0
26132: PPUSH
26133: PPUSH
26134: PPUSH
26135: PPUSH
26136: PPUSH
26137: PPUSH
26138: PPUSH
// result := array ;
26139: LD_ADDR_VAR 0 5
26143: PUSH
26144: LD_VAR 0 1
26148: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
26149: LD_VAR 0 1
26153: NOT
26154: PUSH
26155: LD_VAR 0 2
26159: NOT
26160: OR
26161: PUSH
26162: LD_VAR 0 3
26166: NOT
26167: OR
26168: PUSH
26169: LD_VAR 0 2
26173: PUSH
26174: LD_VAR 0 1
26178: GREATER
26179: OR
26180: PUSH
26181: LD_VAR 0 3
26185: PUSH
26186: LD_VAR 0 1
26190: GREATER
26191: OR
26192: IFFALSE 26196
// exit ;
26194: GO 26492
// if direction then
26196: LD_VAR 0 4
26200: IFFALSE 26264
// begin d := 1 ;
26202: LD_ADDR_VAR 0 9
26206: PUSH
26207: LD_INT 1
26209: ST_TO_ADDR
// if i_from > i_to then
26210: LD_VAR 0 2
26214: PUSH
26215: LD_VAR 0 3
26219: GREATER
26220: IFFALSE 26246
// length := ( array - i_from ) + i_to else
26222: LD_ADDR_VAR 0 11
26226: PUSH
26227: LD_VAR 0 1
26231: PUSH
26232: LD_VAR 0 2
26236: MINUS
26237: PUSH
26238: LD_VAR 0 3
26242: PLUS
26243: ST_TO_ADDR
26244: GO 26262
// length := i_to - i_from ;
26246: LD_ADDR_VAR 0 11
26250: PUSH
26251: LD_VAR 0 3
26255: PUSH
26256: LD_VAR 0 2
26260: MINUS
26261: ST_TO_ADDR
// end else
26262: GO 26325
// begin d := - 1 ;
26264: LD_ADDR_VAR 0 9
26268: PUSH
26269: LD_INT 1
26271: NEG
26272: ST_TO_ADDR
// if i_from > i_to then
26273: LD_VAR 0 2
26277: PUSH
26278: LD_VAR 0 3
26282: GREATER
26283: IFFALSE 26303
// length := i_from - i_to else
26285: LD_ADDR_VAR 0 11
26289: PUSH
26290: LD_VAR 0 2
26294: PUSH
26295: LD_VAR 0 3
26299: MINUS
26300: ST_TO_ADDR
26301: GO 26325
// length := ( array - i_to ) + i_from ;
26303: LD_ADDR_VAR 0 11
26307: PUSH
26308: LD_VAR 0 1
26312: PUSH
26313: LD_VAR 0 3
26317: MINUS
26318: PUSH
26319: LD_VAR 0 2
26323: PLUS
26324: ST_TO_ADDR
// end ; if not length then
26325: LD_VAR 0 11
26329: NOT
26330: IFFALSE 26334
// exit ;
26332: GO 26492
// tmp := array ;
26334: LD_ADDR_VAR 0 10
26338: PUSH
26339: LD_VAR 0 1
26343: ST_TO_ADDR
// for i = 1 to length do
26344: LD_ADDR_VAR 0 6
26348: PUSH
26349: DOUBLE
26350: LD_INT 1
26352: DEC
26353: ST_TO_ADDR
26354: LD_VAR 0 11
26358: PUSH
26359: FOR_TO
26360: IFFALSE 26480
// begin for j = 1 to array do
26362: LD_ADDR_VAR 0 7
26366: PUSH
26367: DOUBLE
26368: LD_INT 1
26370: DEC
26371: ST_TO_ADDR
26372: LD_VAR 0 1
26376: PUSH
26377: FOR_TO
26378: IFFALSE 26466
// begin k := j + d ;
26380: LD_ADDR_VAR 0 8
26384: PUSH
26385: LD_VAR 0 7
26389: PUSH
26390: LD_VAR 0 9
26394: PLUS
26395: ST_TO_ADDR
// if k > array then
26396: LD_VAR 0 8
26400: PUSH
26401: LD_VAR 0 1
26405: GREATER
26406: IFFALSE 26416
// k := 1 ;
26408: LD_ADDR_VAR 0 8
26412: PUSH
26413: LD_INT 1
26415: ST_TO_ADDR
// if not k then
26416: LD_VAR 0 8
26420: NOT
26421: IFFALSE 26433
// k := array ;
26423: LD_ADDR_VAR 0 8
26427: PUSH
26428: LD_VAR 0 1
26432: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
26433: LD_ADDR_VAR 0 10
26437: PUSH
26438: LD_VAR 0 10
26442: PPUSH
26443: LD_VAR 0 8
26447: PPUSH
26448: LD_VAR 0 1
26452: PUSH
26453: LD_VAR 0 7
26457: ARRAY
26458: PPUSH
26459: CALL_OW 1
26463: ST_TO_ADDR
// end ;
26464: GO 26377
26466: POP
26467: POP
// array := tmp ;
26468: LD_ADDR_VAR 0 1
26472: PUSH
26473: LD_VAR 0 10
26477: ST_TO_ADDR
// end ;
26478: GO 26359
26480: POP
26481: POP
// result := array ;
26482: LD_ADDR_VAR 0 5
26486: PUSH
26487: LD_VAR 0 1
26491: ST_TO_ADDR
// end ;
26492: LD_VAR 0 5
26496: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
26497: LD_INT 0
26499: PPUSH
26500: PPUSH
// result := 0 ;
26501: LD_ADDR_VAR 0 3
26505: PUSH
26506: LD_INT 0
26508: ST_TO_ADDR
// if not array or not value in array then
26509: LD_VAR 0 1
26513: NOT
26514: PUSH
26515: LD_VAR 0 2
26519: PUSH
26520: LD_VAR 0 1
26524: IN
26525: NOT
26526: OR
26527: IFFALSE 26531
// exit ;
26529: GO 26585
// for i = 1 to array do
26531: LD_ADDR_VAR 0 4
26535: PUSH
26536: DOUBLE
26537: LD_INT 1
26539: DEC
26540: ST_TO_ADDR
26541: LD_VAR 0 1
26545: PUSH
26546: FOR_TO
26547: IFFALSE 26583
// if value = array [ i ] then
26549: LD_VAR 0 2
26553: PUSH
26554: LD_VAR 0 1
26558: PUSH
26559: LD_VAR 0 4
26563: ARRAY
26564: EQUAL
26565: IFFALSE 26581
// begin result := i ;
26567: LD_ADDR_VAR 0 3
26571: PUSH
26572: LD_VAR 0 4
26576: ST_TO_ADDR
// exit ;
26577: POP
26578: POP
26579: GO 26585
// end ;
26581: GO 26546
26583: POP
26584: POP
// end ;
26585: LD_VAR 0 3
26589: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
26590: LD_INT 0
26592: PPUSH
// vc_chassis := chassis ;
26593: LD_ADDR_OWVAR 37
26597: PUSH
26598: LD_VAR 0 1
26602: ST_TO_ADDR
// vc_engine := engine ;
26603: LD_ADDR_OWVAR 39
26607: PUSH
26608: LD_VAR 0 2
26612: ST_TO_ADDR
// vc_control := control ;
26613: LD_ADDR_OWVAR 38
26617: PUSH
26618: LD_VAR 0 3
26622: ST_TO_ADDR
// vc_weapon := weapon ;
26623: LD_ADDR_OWVAR 40
26627: PUSH
26628: LD_VAR 0 4
26632: ST_TO_ADDR
// vc_fuel_battery := fuel ;
26633: LD_ADDR_OWVAR 41
26637: PUSH
26638: LD_VAR 0 5
26642: ST_TO_ADDR
// end ;
26643: LD_VAR 0 6
26647: RET
// export function WantPlant ( unit ) ; var task ; begin
26648: LD_INT 0
26650: PPUSH
26651: PPUSH
// result := false ;
26652: LD_ADDR_VAR 0 2
26656: PUSH
26657: LD_INT 0
26659: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
26660: LD_ADDR_VAR 0 3
26664: PUSH
26665: LD_VAR 0 1
26669: PPUSH
26670: CALL_OW 437
26674: ST_TO_ADDR
// if task then
26675: LD_VAR 0 3
26679: IFFALSE 26707
// if task [ 1 ] [ 1 ] = p then
26681: LD_VAR 0 3
26685: PUSH
26686: LD_INT 1
26688: ARRAY
26689: PUSH
26690: LD_INT 1
26692: ARRAY
26693: PUSH
26694: LD_STRING p
26696: EQUAL
26697: IFFALSE 26707
// result := true ;
26699: LD_ADDR_VAR 0 2
26703: PUSH
26704: LD_INT 1
26706: ST_TO_ADDR
// end ;
26707: LD_VAR 0 2
26711: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
26712: LD_INT 0
26714: PPUSH
26715: PPUSH
26716: PPUSH
26717: PPUSH
// if pos < 1 then
26718: LD_VAR 0 2
26722: PUSH
26723: LD_INT 1
26725: LESS
26726: IFFALSE 26730
// exit ;
26728: GO 27033
// if pos = 1 then
26730: LD_VAR 0 2
26734: PUSH
26735: LD_INT 1
26737: EQUAL
26738: IFFALSE 26771
// result := Replace ( arr , pos [ 1 ] , value ) else
26740: LD_ADDR_VAR 0 4
26744: PUSH
26745: LD_VAR 0 1
26749: PPUSH
26750: LD_VAR 0 2
26754: PUSH
26755: LD_INT 1
26757: ARRAY
26758: PPUSH
26759: LD_VAR 0 3
26763: PPUSH
26764: CALL_OW 1
26768: ST_TO_ADDR
26769: GO 27033
// begin tmp := arr ;
26771: LD_ADDR_VAR 0 6
26775: PUSH
26776: LD_VAR 0 1
26780: ST_TO_ADDR
// s_arr := [ tmp ] ;
26781: LD_ADDR_VAR 0 7
26785: PUSH
26786: LD_VAR 0 6
26790: PUSH
26791: EMPTY
26792: LIST
26793: ST_TO_ADDR
// for i = 1 to pos - 1 do
26794: LD_ADDR_VAR 0 5
26798: PUSH
26799: DOUBLE
26800: LD_INT 1
26802: DEC
26803: ST_TO_ADDR
26804: LD_VAR 0 2
26808: PUSH
26809: LD_INT 1
26811: MINUS
26812: PUSH
26813: FOR_TO
26814: IFFALSE 26859
// begin tmp := tmp [ pos [ i ] ] ;
26816: LD_ADDR_VAR 0 6
26820: PUSH
26821: LD_VAR 0 6
26825: PUSH
26826: LD_VAR 0 2
26830: PUSH
26831: LD_VAR 0 5
26835: ARRAY
26836: ARRAY
26837: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
26838: LD_ADDR_VAR 0 7
26842: PUSH
26843: LD_VAR 0 7
26847: PUSH
26848: LD_VAR 0 6
26852: PUSH
26853: EMPTY
26854: LIST
26855: ADD
26856: ST_TO_ADDR
// end ;
26857: GO 26813
26859: POP
26860: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
26861: LD_ADDR_VAR 0 6
26865: PUSH
26866: LD_VAR 0 6
26870: PPUSH
26871: LD_VAR 0 2
26875: PUSH
26876: LD_VAR 0 2
26880: ARRAY
26881: PPUSH
26882: LD_VAR 0 3
26886: PPUSH
26887: CALL_OW 1
26891: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
26892: LD_ADDR_VAR 0 7
26896: PUSH
26897: LD_VAR 0 7
26901: PPUSH
26902: LD_VAR 0 7
26906: PPUSH
26907: LD_VAR 0 6
26911: PPUSH
26912: CALL_OW 1
26916: ST_TO_ADDR
// for i = s_arr downto 2 do
26917: LD_ADDR_VAR 0 5
26921: PUSH
26922: DOUBLE
26923: LD_VAR 0 7
26927: INC
26928: ST_TO_ADDR
26929: LD_INT 2
26931: PUSH
26932: FOR_DOWNTO
26933: IFFALSE 27017
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
26935: LD_ADDR_VAR 0 6
26939: PUSH
26940: LD_VAR 0 7
26944: PUSH
26945: LD_VAR 0 5
26949: PUSH
26950: LD_INT 1
26952: MINUS
26953: ARRAY
26954: PPUSH
26955: LD_VAR 0 2
26959: PUSH
26960: LD_VAR 0 5
26964: PUSH
26965: LD_INT 1
26967: MINUS
26968: ARRAY
26969: PPUSH
26970: LD_VAR 0 7
26974: PUSH
26975: LD_VAR 0 5
26979: ARRAY
26980: PPUSH
26981: CALL_OW 1
26985: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
26986: LD_ADDR_VAR 0 7
26990: PUSH
26991: LD_VAR 0 7
26995: PPUSH
26996: LD_VAR 0 5
27000: PUSH
27001: LD_INT 1
27003: MINUS
27004: PPUSH
27005: LD_VAR 0 6
27009: PPUSH
27010: CALL_OW 1
27014: ST_TO_ADDR
// end ;
27015: GO 26932
27017: POP
27018: POP
// result := s_arr [ 1 ] ;
27019: LD_ADDR_VAR 0 4
27023: PUSH
27024: LD_VAR 0 7
27028: PUSH
27029: LD_INT 1
27031: ARRAY
27032: ST_TO_ADDR
// end ; end ;
27033: LD_VAR 0 4
27037: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
27038: LD_INT 0
27040: PPUSH
27041: PPUSH
// if not list then
27042: LD_VAR 0 1
27046: NOT
27047: IFFALSE 27051
// exit ;
27049: GO 27142
// i := list [ pos1 ] ;
27051: LD_ADDR_VAR 0 5
27055: PUSH
27056: LD_VAR 0 1
27060: PUSH
27061: LD_VAR 0 2
27065: ARRAY
27066: ST_TO_ADDR
// if not i then
27067: LD_VAR 0 5
27071: NOT
27072: IFFALSE 27076
// exit ;
27074: GO 27142
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
27076: LD_ADDR_VAR 0 1
27080: PUSH
27081: LD_VAR 0 1
27085: PPUSH
27086: LD_VAR 0 2
27090: PPUSH
27091: LD_VAR 0 1
27095: PUSH
27096: LD_VAR 0 3
27100: ARRAY
27101: PPUSH
27102: CALL_OW 1
27106: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
27107: LD_ADDR_VAR 0 1
27111: PUSH
27112: LD_VAR 0 1
27116: PPUSH
27117: LD_VAR 0 3
27121: PPUSH
27122: LD_VAR 0 5
27126: PPUSH
27127: CALL_OW 1
27131: ST_TO_ADDR
// result := list ;
27132: LD_ADDR_VAR 0 4
27136: PUSH
27137: LD_VAR 0 1
27141: ST_TO_ADDR
// end ;
27142: LD_VAR 0 4
27146: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
27147: LD_INT 0
27149: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
27150: LD_ADDR_VAR 0 5
27154: PUSH
27155: LD_VAR 0 1
27159: PPUSH
27160: CALL_OW 250
27164: PPUSH
27165: LD_VAR 0 1
27169: PPUSH
27170: CALL_OW 251
27174: PPUSH
27175: LD_VAR 0 2
27179: PPUSH
27180: LD_VAR 0 3
27184: PPUSH
27185: LD_VAR 0 4
27189: PPUSH
27190: CALL 27200 0 5
27194: ST_TO_ADDR
// end ;
27195: LD_VAR 0 5
27199: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
27200: LD_INT 0
27202: PPUSH
27203: PPUSH
27204: PPUSH
27205: PPUSH
// if not list then
27206: LD_VAR 0 3
27210: NOT
27211: IFFALSE 27215
// exit ;
27213: GO 27603
// result := [ ] ;
27215: LD_ADDR_VAR 0 6
27219: PUSH
27220: EMPTY
27221: ST_TO_ADDR
// for i in list do
27222: LD_ADDR_VAR 0 7
27226: PUSH
27227: LD_VAR 0 3
27231: PUSH
27232: FOR_IN
27233: IFFALSE 27435
// begin tmp := GetDistUnitXY ( i , x , y ) ;
27235: LD_ADDR_VAR 0 9
27239: PUSH
27240: LD_VAR 0 7
27244: PPUSH
27245: LD_VAR 0 1
27249: PPUSH
27250: LD_VAR 0 2
27254: PPUSH
27255: CALL_OW 297
27259: ST_TO_ADDR
// if not result then
27260: LD_VAR 0 6
27264: NOT
27265: IFFALSE 27291
// result := [ [ i , tmp ] ] else
27267: LD_ADDR_VAR 0 6
27271: PUSH
27272: LD_VAR 0 7
27276: PUSH
27277: LD_VAR 0 9
27281: PUSH
27282: EMPTY
27283: LIST
27284: LIST
27285: PUSH
27286: EMPTY
27287: LIST
27288: ST_TO_ADDR
27289: GO 27433
// begin if result [ result ] [ 2 ] < tmp then
27291: LD_VAR 0 6
27295: PUSH
27296: LD_VAR 0 6
27300: ARRAY
27301: PUSH
27302: LD_INT 2
27304: ARRAY
27305: PUSH
27306: LD_VAR 0 9
27310: LESS
27311: IFFALSE 27353
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
27313: LD_ADDR_VAR 0 6
27317: PUSH
27318: LD_VAR 0 6
27322: PPUSH
27323: LD_VAR 0 6
27327: PUSH
27328: LD_INT 1
27330: PLUS
27331: PPUSH
27332: LD_VAR 0 7
27336: PUSH
27337: LD_VAR 0 9
27341: PUSH
27342: EMPTY
27343: LIST
27344: LIST
27345: PPUSH
27346: CALL_OW 2
27350: ST_TO_ADDR
27351: GO 27433
// for j = 1 to result do
27353: LD_ADDR_VAR 0 8
27357: PUSH
27358: DOUBLE
27359: LD_INT 1
27361: DEC
27362: ST_TO_ADDR
27363: LD_VAR 0 6
27367: PUSH
27368: FOR_TO
27369: IFFALSE 27431
// begin if tmp < result [ j ] [ 2 ] then
27371: LD_VAR 0 9
27375: PUSH
27376: LD_VAR 0 6
27380: PUSH
27381: LD_VAR 0 8
27385: ARRAY
27386: PUSH
27387: LD_INT 2
27389: ARRAY
27390: LESS
27391: IFFALSE 27429
// begin result := Insert ( result , j , [ i , tmp ] ) ;
27393: LD_ADDR_VAR 0 6
27397: PUSH
27398: LD_VAR 0 6
27402: PPUSH
27403: LD_VAR 0 8
27407: PPUSH
27408: LD_VAR 0 7
27412: PUSH
27413: LD_VAR 0 9
27417: PUSH
27418: EMPTY
27419: LIST
27420: LIST
27421: PPUSH
27422: CALL_OW 2
27426: ST_TO_ADDR
// break ;
27427: GO 27431
// end ; end ;
27429: GO 27368
27431: POP
27432: POP
// end ; end ;
27433: GO 27232
27435: POP
27436: POP
// if result and not asc then
27437: LD_VAR 0 6
27441: PUSH
27442: LD_VAR 0 4
27446: NOT
27447: AND
27448: IFFALSE 27523
// begin tmp := result ;
27450: LD_ADDR_VAR 0 9
27454: PUSH
27455: LD_VAR 0 6
27459: ST_TO_ADDR
// for i = tmp downto 1 do
27460: LD_ADDR_VAR 0 7
27464: PUSH
27465: DOUBLE
27466: LD_VAR 0 9
27470: INC
27471: ST_TO_ADDR
27472: LD_INT 1
27474: PUSH
27475: FOR_DOWNTO
27476: IFFALSE 27521
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
27478: LD_ADDR_VAR 0 6
27482: PUSH
27483: LD_VAR 0 6
27487: PPUSH
27488: LD_VAR 0 9
27492: PUSH
27493: LD_VAR 0 7
27497: MINUS
27498: PUSH
27499: LD_INT 1
27501: PLUS
27502: PPUSH
27503: LD_VAR 0 9
27507: PUSH
27508: LD_VAR 0 7
27512: ARRAY
27513: PPUSH
27514: CALL_OW 1
27518: ST_TO_ADDR
27519: GO 27475
27521: POP
27522: POP
// end ; tmp := [ ] ;
27523: LD_ADDR_VAR 0 9
27527: PUSH
27528: EMPTY
27529: ST_TO_ADDR
// if mode then
27530: LD_VAR 0 5
27534: IFFALSE 27603
// begin for i = 1 to result do
27536: LD_ADDR_VAR 0 7
27540: PUSH
27541: DOUBLE
27542: LD_INT 1
27544: DEC
27545: ST_TO_ADDR
27546: LD_VAR 0 6
27550: PUSH
27551: FOR_TO
27552: IFFALSE 27591
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
27554: LD_ADDR_VAR 0 9
27558: PUSH
27559: LD_VAR 0 9
27563: PPUSH
27564: LD_VAR 0 7
27568: PPUSH
27569: LD_VAR 0 6
27573: PUSH
27574: LD_VAR 0 7
27578: ARRAY
27579: PUSH
27580: LD_INT 1
27582: ARRAY
27583: PPUSH
27584: CALL_OW 1
27588: ST_TO_ADDR
27589: GO 27551
27591: POP
27592: POP
// result := tmp ;
27593: LD_ADDR_VAR 0 6
27597: PUSH
27598: LD_VAR 0 9
27602: ST_TO_ADDR
// end ; end ;
27603: LD_VAR 0 6
27607: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
27608: LD_INT 0
27610: PPUSH
27611: PPUSH
27612: PPUSH
27613: PPUSH
27614: PPUSH
27615: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
27616: LD_ADDR_VAR 0 5
27620: PUSH
27621: LD_INT 0
27623: PUSH
27624: LD_INT 0
27626: PUSH
27627: LD_INT 0
27629: PUSH
27630: EMPTY
27631: PUSH
27632: EMPTY
27633: LIST
27634: LIST
27635: LIST
27636: LIST
27637: ST_TO_ADDR
// if not x or not y then
27638: LD_VAR 0 2
27642: NOT
27643: PUSH
27644: LD_VAR 0 3
27648: NOT
27649: OR
27650: IFFALSE 27654
// exit ;
27652: GO 29300
// if not range then
27654: LD_VAR 0 4
27658: NOT
27659: IFFALSE 27669
// range := 10 ;
27661: LD_ADDR_VAR 0 4
27665: PUSH
27666: LD_INT 10
27668: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27669: LD_ADDR_VAR 0 8
27673: PUSH
27674: LD_INT 81
27676: PUSH
27677: LD_VAR 0 1
27681: PUSH
27682: EMPTY
27683: LIST
27684: LIST
27685: PUSH
27686: LD_INT 92
27688: PUSH
27689: LD_VAR 0 2
27693: PUSH
27694: LD_VAR 0 3
27698: PUSH
27699: LD_VAR 0 4
27703: PUSH
27704: EMPTY
27705: LIST
27706: LIST
27707: LIST
27708: LIST
27709: PUSH
27710: LD_INT 3
27712: PUSH
27713: LD_INT 21
27715: PUSH
27716: LD_INT 3
27718: PUSH
27719: EMPTY
27720: LIST
27721: LIST
27722: PUSH
27723: EMPTY
27724: LIST
27725: LIST
27726: PUSH
27727: EMPTY
27728: LIST
27729: LIST
27730: LIST
27731: PPUSH
27732: CALL_OW 69
27736: ST_TO_ADDR
// if not tmp then
27737: LD_VAR 0 8
27741: NOT
27742: IFFALSE 27746
// exit ;
27744: GO 29300
// for i in tmp do
27746: LD_ADDR_VAR 0 6
27750: PUSH
27751: LD_VAR 0 8
27755: PUSH
27756: FOR_IN
27757: IFFALSE 29275
// begin points := [ 0 , 0 , 0 ] ;
27759: LD_ADDR_VAR 0 9
27763: PUSH
27764: LD_INT 0
27766: PUSH
27767: LD_INT 0
27769: PUSH
27770: LD_INT 0
27772: PUSH
27773: EMPTY
27774: LIST
27775: LIST
27776: LIST
27777: ST_TO_ADDR
// bpoints := 1 ;
27778: LD_ADDR_VAR 0 10
27782: PUSH
27783: LD_INT 1
27785: ST_TO_ADDR
// case GetType ( i ) of unit_human :
27786: LD_VAR 0 6
27790: PPUSH
27791: CALL_OW 247
27795: PUSH
27796: LD_INT 1
27798: DOUBLE
27799: EQUAL
27800: IFTRUE 27804
27802: GO 28382
27804: POP
// begin if GetClass ( i ) = 1 then
27805: LD_VAR 0 6
27809: PPUSH
27810: CALL_OW 257
27814: PUSH
27815: LD_INT 1
27817: EQUAL
27818: IFFALSE 27839
// points := [ 10 , 5 , 3 ] ;
27820: LD_ADDR_VAR 0 9
27824: PUSH
27825: LD_INT 10
27827: PUSH
27828: LD_INT 5
27830: PUSH
27831: LD_INT 3
27833: PUSH
27834: EMPTY
27835: LIST
27836: LIST
27837: LIST
27838: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
27839: LD_VAR 0 6
27843: PPUSH
27844: CALL_OW 257
27848: PUSH
27849: LD_INT 2
27851: PUSH
27852: LD_INT 3
27854: PUSH
27855: LD_INT 4
27857: PUSH
27858: EMPTY
27859: LIST
27860: LIST
27861: LIST
27862: IN
27863: IFFALSE 27884
// points := [ 3 , 2 , 1 ] ;
27865: LD_ADDR_VAR 0 9
27869: PUSH
27870: LD_INT 3
27872: PUSH
27873: LD_INT 2
27875: PUSH
27876: LD_INT 1
27878: PUSH
27879: EMPTY
27880: LIST
27881: LIST
27882: LIST
27883: ST_TO_ADDR
// if GetClass ( i ) = 5 then
27884: LD_VAR 0 6
27888: PPUSH
27889: CALL_OW 257
27893: PUSH
27894: LD_INT 5
27896: EQUAL
27897: IFFALSE 27918
// points := [ 130 , 5 , 2 ] ;
27899: LD_ADDR_VAR 0 9
27903: PUSH
27904: LD_INT 130
27906: PUSH
27907: LD_INT 5
27909: PUSH
27910: LD_INT 2
27912: PUSH
27913: EMPTY
27914: LIST
27915: LIST
27916: LIST
27917: ST_TO_ADDR
// if GetClass ( i ) = 8 then
27918: LD_VAR 0 6
27922: PPUSH
27923: CALL_OW 257
27927: PUSH
27928: LD_INT 8
27930: EQUAL
27931: IFFALSE 27952
// points := [ 35 , 35 , 30 ] ;
27933: LD_ADDR_VAR 0 9
27937: PUSH
27938: LD_INT 35
27940: PUSH
27941: LD_INT 35
27943: PUSH
27944: LD_INT 30
27946: PUSH
27947: EMPTY
27948: LIST
27949: LIST
27950: LIST
27951: ST_TO_ADDR
// if GetClass ( i ) = 9 then
27952: LD_VAR 0 6
27956: PPUSH
27957: CALL_OW 257
27961: PUSH
27962: LD_INT 9
27964: EQUAL
27965: IFFALSE 27986
// points := [ 20 , 55 , 40 ] ;
27967: LD_ADDR_VAR 0 9
27971: PUSH
27972: LD_INT 20
27974: PUSH
27975: LD_INT 55
27977: PUSH
27978: LD_INT 40
27980: PUSH
27981: EMPTY
27982: LIST
27983: LIST
27984: LIST
27985: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
27986: LD_VAR 0 6
27990: PPUSH
27991: CALL_OW 257
27995: PUSH
27996: LD_INT 12
27998: PUSH
27999: LD_INT 16
28001: PUSH
28002: EMPTY
28003: LIST
28004: LIST
28005: IN
28006: IFFALSE 28027
// points := [ 5 , 3 , 2 ] ;
28008: LD_ADDR_VAR 0 9
28012: PUSH
28013: LD_INT 5
28015: PUSH
28016: LD_INT 3
28018: PUSH
28019: LD_INT 2
28021: PUSH
28022: EMPTY
28023: LIST
28024: LIST
28025: LIST
28026: ST_TO_ADDR
// if GetClass ( i ) = 17 then
28027: LD_VAR 0 6
28031: PPUSH
28032: CALL_OW 257
28036: PUSH
28037: LD_INT 17
28039: EQUAL
28040: IFFALSE 28061
// points := [ 100 , 50 , 75 ] ;
28042: LD_ADDR_VAR 0 9
28046: PUSH
28047: LD_INT 100
28049: PUSH
28050: LD_INT 50
28052: PUSH
28053: LD_INT 75
28055: PUSH
28056: EMPTY
28057: LIST
28058: LIST
28059: LIST
28060: ST_TO_ADDR
// if GetClass ( i ) = 15 then
28061: LD_VAR 0 6
28065: PPUSH
28066: CALL_OW 257
28070: PUSH
28071: LD_INT 15
28073: EQUAL
28074: IFFALSE 28095
// points := [ 10 , 5 , 3 ] ;
28076: LD_ADDR_VAR 0 9
28080: PUSH
28081: LD_INT 10
28083: PUSH
28084: LD_INT 5
28086: PUSH
28087: LD_INT 3
28089: PUSH
28090: EMPTY
28091: LIST
28092: LIST
28093: LIST
28094: ST_TO_ADDR
// if GetClass ( i ) = 14 then
28095: LD_VAR 0 6
28099: PPUSH
28100: CALL_OW 257
28104: PUSH
28105: LD_INT 14
28107: EQUAL
28108: IFFALSE 28129
// points := [ 10 , 0 , 0 ] ;
28110: LD_ADDR_VAR 0 9
28114: PUSH
28115: LD_INT 10
28117: PUSH
28118: LD_INT 0
28120: PUSH
28121: LD_INT 0
28123: PUSH
28124: EMPTY
28125: LIST
28126: LIST
28127: LIST
28128: ST_TO_ADDR
// if GetClass ( i ) = 11 then
28129: LD_VAR 0 6
28133: PPUSH
28134: CALL_OW 257
28138: PUSH
28139: LD_INT 11
28141: EQUAL
28142: IFFALSE 28163
// points := [ 30 , 10 , 5 ] ;
28144: LD_ADDR_VAR 0 9
28148: PUSH
28149: LD_INT 30
28151: PUSH
28152: LD_INT 10
28154: PUSH
28155: LD_INT 5
28157: PUSH
28158: EMPTY
28159: LIST
28160: LIST
28161: LIST
28162: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
28163: LD_VAR 0 1
28167: PPUSH
28168: LD_INT 5
28170: PPUSH
28171: CALL_OW 321
28175: PUSH
28176: LD_INT 2
28178: EQUAL
28179: IFFALSE 28196
// bpoints := bpoints * 1.8 ;
28181: LD_ADDR_VAR 0 10
28185: PUSH
28186: LD_VAR 0 10
28190: PUSH
28191: LD_REAL  1.80000000000000E+0000
28194: MUL
28195: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
28196: LD_VAR 0 6
28200: PPUSH
28201: CALL_OW 257
28205: PUSH
28206: LD_INT 1
28208: PUSH
28209: LD_INT 2
28211: PUSH
28212: LD_INT 3
28214: PUSH
28215: LD_INT 4
28217: PUSH
28218: EMPTY
28219: LIST
28220: LIST
28221: LIST
28222: LIST
28223: IN
28224: PUSH
28225: LD_VAR 0 1
28229: PPUSH
28230: LD_INT 51
28232: PPUSH
28233: CALL_OW 321
28237: PUSH
28238: LD_INT 2
28240: EQUAL
28241: AND
28242: IFFALSE 28259
// bpoints := bpoints * 1.2 ;
28244: LD_ADDR_VAR 0 10
28248: PUSH
28249: LD_VAR 0 10
28253: PUSH
28254: LD_REAL  1.20000000000000E+0000
28257: MUL
28258: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
28259: LD_VAR 0 6
28263: PPUSH
28264: CALL_OW 257
28268: PUSH
28269: LD_INT 5
28271: PUSH
28272: LD_INT 7
28274: PUSH
28275: LD_INT 9
28277: PUSH
28278: EMPTY
28279: LIST
28280: LIST
28281: LIST
28282: IN
28283: PUSH
28284: LD_VAR 0 1
28288: PPUSH
28289: LD_INT 52
28291: PPUSH
28292: CALL_OW 321
28296: PUSH
28297: LD_INT 2
28299: EQUAL
28300: AND
28301: IFFALSE 28318
// bpoints := bpoints * 1.5 ;
28303: LD_ADDR_VAR 0 10
28307: PUSH
28308: LD_VAR 0 10
28312: PUSH
28313: LD_REAL  1.50000000000000E+0000
28316: MUL
28317: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
28318: LD_VAR 0 1
28322: PPUSH
28323: LD_INT 66
28325: PPUSH
28326: CALL_OW 321
28330: PUSH
28331: LD_INT 2
28333: EQUAL
28334: IFFALSE 28351
// bpoints := bpoints * 1.1 ;
28336: LD_ADDR_VAR 0 10
28340: PUSH
28341: LD_VAR 0 10
28345: PUSH
28346: LD_REAL  1.10000000000000E+0000
28349: MUL
28350: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
28351: LD_ADDR_VAR 0 10
28355: PUSH
28356: LD_VAR 0 10
28360: PUSH
28361: LD_VAR 0 6
28365: PPUSH
28366: LD_INT 1
28368: PPUSH
28369: CALL_OW 259
28373: PUSH
28374: LD_REAL  1.15000000000000E+0000
28377: MUL
28378: MUL
28379: ST_TO_ADDR
// end ; unit_vehicle :
28380: GO 29204
28382: LD_INT 2
28384: DOUBLE
28385: EQUAL
28386: IFTRUE 28390
28388: GO 29192
28390: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
28391: LD_VAR 0 6
28395: PPUSH
28396: CALL_OW 264
28400: PUSH
28401: LD_INT 2
28403: PUSH
28404: LD_INT 42
28406: PUSH
28407: LD_INT 24
28409: PUSH
28410: EMPTY
28411: LIST
28412: LIST
28413: LIST
28414: IN
28415: IFFALSE 28436
// points := [ 25 , 5 , 3 ] ;
28417: LD_ADDR_VAR 0 9
28421: PUSH
28422: LD_INT 25
28424: PUSH
28425: LD_INT 5
28427: PUSH
28428: LD_INT 3
28430: PUSH
28431: EMPTY
28432: LIST
28433: LIST
28434: LIST
28435: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
28436: LD_VAR 0 6
28440: PPUSH
28441: CALL_OW 264
28445: PUSH
28446: LD_INT 4
28448: PUSH
28449: LD_INT 43
28451: PUSH
28452: LD_INT 25
28454: PUSH
28455: EMPTY
28456: LIST
28457: LIST
28458: LIST
28459: IN
28460: IFFALSE 28481
// points := [ 40 , 15 , 5 ] ;
28462: LD_ADDR_VAR 0 9
28466: PUSH
28467: LD_INT 40
28469: PUSH
28470: LD_INT 15
28472: PUSH
28473: LD_INT 5
28475: PUSH
28476: EMPTY
28477: LIST
28478: LIST
28479: LIST
28480: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
28481: LD_VAR 0 6
28485: PPUSH
28486: CALL_OW 264
28490: PUSH
28491: LD_INT 3
28493: PUSH
28494: LD_INT 23
28496: PUSH
28497: EMPTY
28498: LIST
28499: LIST
28500: IN
28501: IFFALSE 28522
// points := [ 7 , 25 , 8 ] ;
28503: LD_ADDR_VAR 0 9
28507: PUSH
28508: LD_INT 7
28510: PUSH
28511: LD_INT 25
28513: PUSH
28514: LD_INT 8
28516: PUSH
28517: EMPTY
28518: LIST
28519: LIST
28520: LIST
28521: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
28522: LD_VAR 0 6
28526: PPUSH
28527: CALL_OW 264
28531: PUSH
28532: LD_INT 5
28534: PUSH
28535: LD_INT 27
28537: PUSH
28538: LD_INT 44
28540: PUSH
28541: EMPTY
28542: LIST
28543: LIST
28544: LIST
28545: IN
28546: IFFALSE 28567
// points := [ 14 , 50 , 16 ] ;
28548: LD_ADDR_VAR 0 9
28552: PUSH
28553: LD_INT 14
28555: PUSH
28556: LD_INT 50
28558: PUSH
28559: LD_INT 16
28561: PUSH
28562: EMPTY
28563: LIST
28564: LIST
28565: LIST
28566: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
28567: LD_VAR 0 6
28571: PPUSH
28572: CALL_OW 264
28576: PUSH
28577: LD_INT 6
28579: PUSH
28580: LD_INT 46
28582: PUSH
28583: EMPTY
28584: LIST
28585: LIST
28586: IN
28587: IFFALSE 28608
// points := [ 32 , 120 , 70 ] ;
28589: LD_ADDR_VAR 0 9
28593: PUSH
28594: LD_INT 32
28596: PUSH
28597: LD_INT 120
28599: PUSH
28600: LD_INT 70
28602: PUSH
28603: EMPTY
28604: LIST
28605: LIST
28606: LIST
28607: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
28608: LD_VAR 0 6
28612: PPUSH
28613: CALL_OW 264
28617: PUSH
28618: LD_INT 7
28620: PUSH
28621: LD_INT 28
28623: PUSH
28624: LD_INT 45
28626: PUSH
28627: EMPTY
28628: LIST
28629: LIST
28630: LIST
28631: IN
28632: IFFALSE 28653
// points := [ 35 , 20 , 45 ] ;
28634: LD_ADDR_VAR 0 9
28638: PUSH
28639: LD_INT 35
28641: PUSH
28642: LD_INT 20
28644: PUSH
28645: LD_INT 45
28647: PUSH
28648: EMPTY
28649: LIST
28650: LIST
28651: LIST
28652: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
28653: LD_VAR 0 6
28657: PPUSH
28658: CALL_OW 264
28662: PUSH
28663: LD_INT 47
28665: PUSH
28666: EMPTY
28667: LIST
28668: IN
28669: IFFALSE 28690
// points := [ 67 , 45 , 75 ] ;
28671: LD_ADDR_VAR 0 9
28675: PUSH
28676: LD_INT 67
28678: PUSH
28679: LD_INT 45
28681: PUSH
28682: LD_INT 75
28684: PUSH
28685: EMPTY
28686: LIST
28687: LIST
28688: LIST
28689: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
28690: LD_VAR 0 6
28694: PPUSH
28695: CALL_OW 264
28699: PUSH
28700: LD_INT 26
28702: PUSH
28703: EMPTY
28704: LIST
28705: IN
28706: IFFALSE 28727
// points := [ 120 , 30 , 80 ] ;
28708: LD_ADDR_VAR 0 9
28712: PUSH
28713: LD_INT 120
28715: PUSH
28716: LD_INT 30
28718: PUSH
28719: LD_INT 80
28721: PUSH
28722: EMPTY
28723: LIST
28724: LIST
28725: LIST
28726: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
28727: LD_VAR 0 6
28731: PPUSH
28732: CALL_OW 264
28736: PUSH
28737: LD_INT 22
28739: PUSH
28740: EMPTY
28741: LIST
28742: IN
28743: IFFALSE 28764
// points := [ 40 , 1 , 1 ] ;
28745: LD_ADDR_VAR 0 9
28749: PUSH
28750: LD_INT 40
28752: PUSH
28753: LD_INT 1
28755: PUSH
28756: LD_INT 1
28758: PUSH
28759: EMPTY
28760: LIST
28761: LIST
28762: LIST
28763: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
28764: LD_VAR 0 6
28768: PPUSH
28769: CALL_OW 264
28773: PUSH
28774: LD_INT 29
28776: PUSH
28777: EMPTY
28778: LIST
28779: IN
28780: IFFALSE 28801
// points := [ 70 , 200 , 400 ] ;
28782: LD_ADDR_VAR 0 9
28786: PUSH
28787: LD_INT 70
28789: PUSH
28790: LD_INT 200
28792: PUSH
28793: LD_INT 400
28795: PUSH
28796: EMPTY
28797: LIST
28798: LIST
28799: LIST
28800: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
28801: LD_VAR 0 6
28805: PPUSH
28806: CALL_OW 264
28810: PUSH
28811: LD_INT 14
28813: PUSH
28814: LD_INT 53
28816: PUSH
28817: EMPTY
28818: LIST
28819: LIST
28820: IN
28821: IFFALSE 28842
// points := [ 40 , 10 , 20 ] ;
28823: LD_ADDR_VAR 0 9
28827: PUSH
28828: LD_INT 40
28830: PUSH
28831: LD_INT 10
28833: PUSH
28834: LD_INT 20
28836: PUSH
28837: EMPTY
28838: LIST
28839: LIST
28840: LIST
28841: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
28842: LD_VAR 0 6
28846: PPUSH
28847: CALL_OW 264
28851: PUSH
28852: LD_INT 9
28854: PUSH
28855: EMPTY
28856: LIST
28857: IN
28858: IFFALSE 28879
// points := [ 5 , 70 , 20 ] ;
28860: LD_ADDR_VAR 0 9
28864: PUSH
28865: LD_INT 5
28867: PUSH
28868: LD_INT 70
28870: PUSH
28871: LD_INT 20
28873: PUSH
28874: EMPTY
28875: LIST
28876: LIST
28877: LIST
28878: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
28879: LD_VAR 0 6
28883: PPUSH
28884: CALL_OW 264
28888: PUSH
28889: LD_INT 10
28891: PUSH
28892: EMPTY
28893: LIST
28894: IN
28895: IFFALSE 28916
// points := [ 35 , 110 , 70 ] ;
28897: LD_ADDR_VAR 0 9
28901: PUSH
28902: LD_INT 35
28904: PUSH
28905: LD_INT 110
28907: PUSH
28908: LD_INT 70
28910: PUSH
28911: EMPTY
28912: LIST
28913: LIST
28914: LIST
28915: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
28916: LD_VAR 0 6
28920: PPUSH
28921: CALL_OW 265
28925: PUSH
28926: LD_INT 25
28928: EQUAL
28929: IFFALSE 28950
// points := [ 80 , 65 , 100 ] ;
28931: LD_ADDR_VAR 0 9
28935: PUSH
28936: LD_INT 80
28938: PUSH
28939: LD_INT 65
28941: PUSH
28942: LD_INT 100
28944: PUSH
28945: EMPTY
28946: LIST
28947: LIST
28948: LIST
28949: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
28950: LD_VAR 0 6
28954: PPUSH
28955: CALL_OW 263
28959: PUSH
28960: LD_INT 1
28962: EQUAL
28963: IFFALSE 28998
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
28965: LD_ADDR_VAR 0 10
28969: PUSH
28970: LD_VAR 0 10
28974: PUSH
28975: LD_VAR 0 6
28979: PPUSH
28980: CALL_OW 311
28984: PPUSH
28985: LD_INT 3
28987: PPUSH
28988: CALL_OW 259
28992: PUSH
28993: LD_INT 4
28995: MUL
28996: MUL
28997: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
28998: LD_VAR 0 6
29002: PPUSH
29003: CALL_OW 263
29007: PUSH
29008: LD_INT 2
29010: EQUAL
29011: IFFALSE 29062
// begin j := IsControledBy ( i ) ;
29013: LD_ADDR_VAR 0 7
29017: PUSH
29018: LD_VAR 0 6
29022: PPUSH
29023: CALL_OW 312
29027: ST_TO_ADDR
// if j then
29028: LD_VAR 0 7
29032: IFFALSE 29062
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
29034: LD_ADDR_VAR 0 10
29038: PUSH
29039: LD_VAR 0 10
29043: PUSH
29044: LD_VAR 0 7
29048: PPUSH
29049: LD_INT 3
29051: PPUSH
29052: CALL_OW 259
29056: PUSH
29057: LD_INT 3
29059: MUL
29060: MUL
29061: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
29062: LD_VAR 0 6
29066: PPUSH
29067: CALL_OW 264
29071: PUSH
29072: LD_INT 5
29074: PUSH
29075: LD_INT 6
29077: PUSH
29078: LD_INT 46
29080: PUSH
29081: LD_INT 44
29083: PUSH
29084: LD_INT 47
29086: PUSH
29087: LD_INT 45
29089: PUSH
29090: LD_INT 28
29092: PUSH
29093: LD_INT 7
29095: PUSH
29096: LD_INT 27
29098: PUSH
29099: LD_INT 29
29101: PUSH
29102: EMPTY
29103: LIST
29104: LIST
29105: LIST
29106: LIST
29107: LIST
29108: LIST
29109: LIST
29110: LIST
29111: LIST
29112: LIST
29113: IN
29114: PUSH
29115: LD_VAR 0 1
29119: PPUSH
29120: LD_INT 52
29122: PPUSH
29123: CALL_OW 321
29127: PUSH
29128: LD_INT 2
29130: EQUAL
29131: AND
29132: IFFALSE 29149
// bpoints := bpoints * 1.2 ;
29134: LD_ADDR_VAR 0 10
29138: PUSH
29139: LD_VAR 0 10
29143: PUSH
29144: LD_REAL  1.20000000000000E+0000
29147: MUL
29148: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
29149: LD_VAR 0 6
29153: PPUSH
29154: CALL_OW 264
29158: PUSH
29159: LD_INT 6
29161: PUSH
29162: LD_INT 46
29164: PUSH
29165: LD_INT 47
29167: PUSH
29168: EMPTY
29169: LIST
29170: LIST
29171: LIST
29172: IN
29173: IFFALSE 29190
// bpoints := bpoints * 1.2 ;
29175: LD_ADDR_VAR 0 10
29179: PUSH
29180: LD_VAR 0 10
29184: PUSH
29185: LD_REAL  1.20000000000000E+0000
29188: MUL
29189: ST_TO_ADDR
// end ; unit_building :
29190: GO 29204
29192: LD_INT 3
29194: DOUBLE
29195: EQUAL
29196: IFTRUE 29200
29198: GO 29203
29200: POP
// ; end ;
29201: GO 29204
29203: POP
// for j = 1 to 3 do
29204: LD_ADDR_VAR 0 7
29208: PUSH
29209: DOUBLE
29210: LD_INT 1
29212: DEC
29213: ST_TO_ADDR
29214: LD_INT 3
29216: PUSH
29217: FOR_TO
29218: IFFALSE 29271
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
29220: LD_ADDR_VAR 0 5
29224: PUSH
29225: LD_VAR 0 5
29229: PPUSH
29230: LD_VAR 0 7
29234: PPUSH
29235: LD_VAR 0 5
29239: PUSH
29240: LD_VAR 0 7
29244: ARRAY
29245: PUSH
29246: LD_VAR 0 9
29250: PUSH
29251: LD_VAR 0 7
29255: ARRAY
29256: PUSH
29257: LD_VAR 0 10
29261: MUL
29262: PLUS
29263: PPUSH
29264: CALL_OW 1
29268: ST_TO_ADDR
29269: GO 29217
29271: POP
29272: POP
// end ;
29273: GO 27756
29275: POP
29276: POP
// result := Replace ( result , 4 , tmp ) ;
29277: LD_ADDR_VAR 0 5
29281: PUSH
29282: LD_VAR 0 5
29286: PPUSH
29287: LD_INT 4
29289: PPUSH
29290: LD_VAR 0 8
29294: PPUSH
29295: CALL_OW 1
29299: ST_TO_ADDR
// end ;
29300: LD_VAR 0 5
29304: RET
// export function DangerAtRange ( unit , range ) ; begin
29305: LD_INT 0
29307: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
29308: LD_ADDR_VAR 0 3
29312: PUSH
29313: LD_VAR 0 1
29317: PPUSH
29318: CALL_OW 255
29322: PPUSH
29323: LD_VAR 0 1
29327: PPUSH
29328: CALL_OW 250
29332: PPUSH
29333: LD_VAR 0 1
29337: PPUSH
29338: CALL_OW 251
29342: PPUSH
29343: LD_VAR 0 2
29347: PPUSH
29348: CALL 27608 0 4
29352: ST_TO_ADDR
// end ;
29353: LD_VAR 0 3
29357: RET
// export function DangerInArea ( side , area ) ; begin
29358: LD_INT 0
29360: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
29361: LD_ADDR_VAR 0 3
29365: PUSH
29366: LD_VAR 0 2
29370: PPUSH
29371: LD_INT 81
29373: PUSH
29374: LD_VAR 0 1
29378: PUSH
29379: EMPTY
29380: LIST
29381: LIST
29382: PPUSH
29383: CALL_OW 70
29387: ST_TO_ADDR
// end ;
29388: LD_VAR 0 3
29392: RET
// export function IsExtension ( b ) ; begin
29393: LD_INT 0
29395: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
29396: LD_ADDR_VAR 0 2
29400: PUSH
29401: LD_VAR 0 1
29405: PUSH
29406: LD_INT 23
29408: PUSH
29409: LD_INT 20
29411: PUSH
29412: LD_INT 22
29414: PUSH
29415: LD_INT 17
29417: PUSH
29418: LD_INT 24
29420: PUSH
29421: LD_INT 21
29423: PUSH
29424: LD_INT 19
29426: PUSH
29427: LD_INT 16
29429: PUSH
29430: LD_INT 25
29432: PUSH
29433: LD_INT 18
29435: PUSH
29436: EMPTY
29437: LIST
29438: LIST
29439: LIST
29440: LIST
29441: LIST
29442: LIST
29443: LIST
29444: LIST
29445: LIST
29446: LIST
29447: IN
29448: ST_TO_ADDR
// end ;
29449: LD_VAR 0 2
29453: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
29454: LD_INT 0
29456: PPUSH
29457: PPUSH
29458: PPUSH
// result := [ ] ;
29459: LD_ADDR_VAR 0 3
29463: PUSH
29464: EMPTY
29465: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
29466: LD_ADDR_VAR 0 4
29470: PUSH
29471: LD_VAR 0 2
29475: PPUSH
29476: LD_INT 21
29478: PUSH
29479: LD_INT 3
29481: PUSH
29482: EMPTY
29483: LIST
29484: LIST
29485: PPUSH
29486: CALL_OW 70
29490: ST_TO_ADDR
// if not tmp then
29491: LD_VAR 0 4
29495: NOT
29496: IFFALSE 29500
// exit ;
29498: GO 29558
// for i in tmp do
29500: LD_ADDR_VAR 0 5
29504: PUSH
29505: LD_VAR 0 4
29509: PUSH
29510: FOR_IN
29511: IFFALSE 29546
// if GetBase ( i ) <> base then
29513: LD_VAR 0 5
29517: PPUSH
29518: CALL_OW 274
29522: PUSH
29523: LD_VAR 0 1
29527: NONEQUAL
29528: IFFALSE 29544
// ComLinkToBase ( base , i ) ;
29530: LD_VAR 0 1
29534: PPUSH
29535: LD_VAR 0 5
29539: PPUSH
29540: CALL_OW 169
29544: GO 29510
29546: POP
29547: POP
// result := tmp ;
29548: LD_ADDR_VAR 0 3
29552: PUSH
29553: LD_VAR 0 4
29557: ST_TO_ADDR
// end ;
29558: LD_VAR 0 3
29562: RET
// export function ComComplete ( unit , b ) ; var i ; begin
29563: LD_INT 0
29565: PPUSH
29566: PPUSH
// if BuildingStatus ( b ) = bs_build then
29567: LD_VAR 0 2
29571: PPUSH
29572: CALL_OW 461
29576: PUSH
29577: LD_INT 1
29579: EQUAL
29580: IFFALSE 29640
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
29582: LD_VAR 0 1
29586: PPUSH
29587: LD_STRING h
29589: PUSH
29590: LD_VAR 0 2
29594: PPUSH
29595: CALL_OW 250
29599: PUSH
29600: LD_VAR 0 2
29604: PPUSH
29605: CALL_OW 251
29609: PUSH
29610: LD_VAR 0 2
29614: PUSH
29615: LD_INT 0
29617: PUSH
29618: LD_INT 0
29620: PUSH
29621: LD_INT 0
29623: PUSH
29624: EMPTY
29625: LIST
29626: LIST
29627: LIST
29628: LIST
29629: LIST
29630: LIST
29631: LIST
29632: PUSH
29633: EMPTY
29634: LIST
29635: PPUSH
29636: CALL_OW 446
// end ;
29640: LD_VAR 0 3
29644: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
29645: LD_INT 0
29647: PPUSH
29648: PPUSH
29649: PPUSH
29650: PPUSH
29651: PPUSH
29652: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
29653: LD_VAR 0 1
29657: NOT
29658: PUSH
29659: LD_VAR 0 1
29663: PPUSH
29664: CALL_OW 263
29668: PUSH
29669: LD_INT 2
29671: EQUAL
29672: NOT
29673: OR
29674: IFFALSE 29678
// exit ;
29676: GO 29994
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
29678: LD_ADDR_VAR 0 6
29682: PUSH
29683: LD_INT 22
29685: PUSH
29686: LD_VAR 0 1
29690: PPUSH
29691: CALL_OW 255
29695: PUSH
29696: EMPTY
29697: LIST
29698: LIST
29699: PUSH
29700: LD_INT 2
29702: PUSH
29703: LD_INT 30
29705: PUSH
29706: LD_INT 36
29708: PUSH
29709: EMPTY
29710: LIST
29711: LIST
29712: PUSH
29713: LD_INT 34
29715: PUSH
29716: LD_INT 31
29718: PUSH
29719: EMPTY
29720: LIST
29721: LIST
29722: PUSH
29723: EMPTY
29724: LIST
29725: LIST
29726: LIST
29727: PUSH
29728: EMPTY
29729: LIST
29730: LIST
29731: PPUSH
29732: CALL_OW 69
29736: ST_TO_ADDR
// if not tmp then
29737: LD_VAR 0 6
29741: NOT
29742: IFFALSE 29746
// exit ;
29744: GO 29994
// result := [ ] ;
29746: LD_ADDR_VAR 0 2
29750: PUSH
29751: EMPTY
29752: ST_TO_ADDR
// for i in tmp do
29753: LD_ADDR_VAR 0 3
29757: PUSH
29758: LD_VAR 0 6
29762: PUSH
29763: FOR_IN
29764: IFFALSE 29835
// begin t := UnitsInside ( i ) ;
29766: LD_ADDR_VAR 0 4
29770: PUSH
29771: LD_VAR 0 3
29775: PPUSH
29776: CALL_OW 313
29780: ST_TO_ADDR
// if t then
29781: LD_VAR 0 4
29785: IFFALSE 29833
// for j in t do
29787: LD_ADDR_VAR 0 7
29791: PUSH
29792: LD_VAR 0 4
29796: PUSH
29797: FOR_IN
29798: IFFALSE 29831
// result := Insert ( result , result + 1 , j ) ;
29800: LD_ADDR_VAR 0 2
29804: PUSH
29805: LD_VAR 0 2
29809: PPUSH
29810: LD_VAR 0 2
29814: PUSH
29815: LD_INT 1
29817: PLUS
29818: PPUSH
29819: LD_VAR 0 7
29823: PPUSH
29824: CALL_OW 2
29828: ST_TO_ADDR
29829: GO 29797
29831: POP
29832: POP
// end ;
29833: GO 29763
29835: POP
29836: POP
// if not result then
29837: LD_VAR 0 2
29841: NOT
29842: IFFALSE 29846
// exit ;
29844: GO 29994
// mech := result [ 1 ] ;
29846: LD_ADDR_VAR 0 5
29850: PUSH
29851: LD_VAR 0 2
29855: PUSH
29856: LD_INT 1
29858: ARRAY
29859: ST_TO_ADDR
// if result > 1 then
29860: LD_VAR 0 2
29864: PUSH
29865: LD_INT 1
29867: GREATER
29868: IFFALSE 29980
// for i = 2 to result do
29870: LD_ADDR_VAR 0 3
29874: PUSH
29875: DOUBLE
29876: LD_INT 2
29878: DEC
29879: ST_TO_ADDR
29880: LD_VAR 0 2
29884: PUSH
29885: FOR_TO
29886: IFFALSE 29978
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
29888: LD_ADDR_VAR 0 4
29892: PUSH
29893: LD_VAR 0 2
29897: PUSH
29898: LD_VAR 0 3
29902: ARRAY
29903: PPUSH
29904: LD_INT 3
29906: PPUSH
29907: CALL_OW 259
29911: PUSH
29912: LD_VAR 0 2
29916: PUSH
29917: LD_VAR 0 3
29921: ARRAY
29922: PPUSH
29923: CALL_OW 432
29927: MINUS
29928: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
29929: LD_VAR 0 4
29933: PUSH
29934: LD_VAR 0 5
29938: PPUSH
29939: LD_INT 3
29941: PPUSH
29942: CALL_OW 259
29946: PUSH
29947: LD_VAR 0 5
29951: PPUSH
29952: CALL_OW 432
29956: MINUS
29957: GREATEREQUAL
29958: IFFALSE 29976
// mech := result [ i ] ;
29960: LD_ADDR_VAR 0 5
29964: PUSH
29965: LD_VAR 0 2
29969: PUSH
29970: LD_VAR 0 3
29974: ARRAY
29975: ST_TO_ADDR
// end ;
29976: GO 29885
29978: POP
29979: POP
// ComLinkTo ( vehicle , mech ) ;
29980: LD_VAR 0 1
29984: PPUSH
29985: LD_VAR 0 5
29989: PPUSH
29990: CALL_OW 135
// end ;
29994: LD_VAR 0 2
29998: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
29999: LD_INT 0
30001: PPUSH
30002: PPUSH
30003: PPUSH
30004: PPUSH
30005: PPUSH
30006: PPUSH
30007: PPUSH
30008: PPUSH
30009: PPUSH
30010: PPUSH
30011: PPUSH
30012: PPUSH
30013: PPUSH
// result := [ ] ;
30014: LD_ADDR_VAR 0 7
30018: PUSH
30019: EMPTY
30020: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
30021: LD_VAR 0 1
30025: PPUSH
30026: CALL_OW 266
30030: PUSH
30031: LD_INT 0
30033: PUSH
30034: LD_INT 1
30036: PUSH
30037: EMPTY
30038: LIST
30039: LIST
30040: IN
30041: NOT
30042: IFFALSE 30046
// exit ;
30044: GO 31677
// if name then
30046: LD_VAR 0 3
30050: IFFALSE 30066
// SetBName ( base_dep , name ) ;
30052: LD_VAR 0 1
30056: PPUSH
30057: LD_VAR 0 3
30061: PPUSH
30062: CALL_OW 500
// base := GetBase ( base_dep ) ;
30066: LD_ADDR_VAR 0 15
30070: PUSH
30071: LD_VAR 0 1
30075: PPUSH
30076: CALL_OW 274
30080: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
30081: LD_ADDR_VAR 0 16
30085: PUSH
30086: LD_VAR 0 1
30090: PPUSH
30091: CALL_OW 255
30095: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
30096: LD_ADDR_VAR 0 17
30100: PUSH
30101: LD_VAR 0 1
30105: PPUSH
30106: CALL_OW 248
30110: ST_TO_ADDR
// if sources then
30111: LD_VAR 0 5
30115: IFFALSE 30162
// for i = 1 to 3 do
30117: LD_ADDR_VAR 0 8
30121: PUSH
30122: DOUBLE
30123: LD_INT 1
30125: DEC
30126: ST_TO_ADDR
30127: LD_INT 3
30129: PUSH
30130: FOR_TO
30131: IFFALSE 30160
// AddResourceType ( base , i , sources [ i ] ) ;
30133: LD_VAR 0 15
30137: PPUSH
30138: LD_VAR 0 8
30142: PPUSH
30143: LD_VAR 0 5
30147: PUSH
30148: LD_VAR 0 8
30152: ARRAY
30153: PPUSH
30154: CALL_OW 276
30158: GO 30130
30160: POP
30161: POP
// buildings := GetBaseBuildings ( base , area ) ;
30162: LD_ADDR_VAR 0 18
30166: PUSH
30167: LD_VAR 0 15
30171: PPUSH
30172: LD_VAR 0 2
30176: PPUSH
30177: CALL 29454 0 2
30181: ST_TO_ADDR
// InitHc ;
30182: CALL_OW 19
// InitUc ;
30186: CALL_OW 18
// uc_side := side ;
30190: LD_ADDR_OWVAR 20
30194: PUSH
30195: LD_VAR 0 16
30199: ST_TO_ADDR
// uc_nation := nation ;
30200: LD_ADDR_OWVAR 21
30204: PUSH
30205: LD_VAR 0 17
30209: ST_TO_ADDR
// if buildings then
30210: LD_VAR 0 18
30214: IFFALSE 31536
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
30216: LD_ADDR_VAR 0 19
30220: PUSH
30221: LD_VAR 0 18
30225: PPUSH
30226: LD_INT 2
30228: PUSH
30229: LD_INT 30
30231: PUSH
30232: LD_INT 29
30234: PUSH
30235: EMPTY
30236: LIST
30237: LIST
30238: PUSH
30239: LD_INT 30
30241: PUSH
30242: LD_INT 30
30244: PUSH
30245: EMPTY
30246: LIST
30247: LIST
30248: PUSH
30249: EMPTY
30250: LIST
30251: LIST
30252: LIST
30253: PPUSH
30254: CALL_OW 72
30258: ST_TO_ADDR
// if tmp then
30259: LD_VAR 0 19
30263: IFFALSE 30311
// for i in tmp do
30265: LD_ADDR_VAR 0 8
30269: PUSH
30270: LD_VAR 0 19
30274: PUSH
30275: FOR_IN
30276: IFFALSE 30309
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
30278: LD_VAR 0 8
30282: PPUSH
30283: CALL_OW 250
30287: PPUSH
30288: LD_VAR 0 8
30292: PPUSH
30293: CALL_OW 251
30297: PPUSH
30298: LD_VAR 0 16
30302: PPUSH
30303: CALL_OW 441
30307: GO 30275
30309: POP
30310: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
30311: LD_VAR 0 18
30315: PPUSH
30316: LD_INT 2
30318: PUSH
30319: LD_INT 30
30321: PUSH
30322: LD_INT 32
30324: PUSH
30325: EMPTY
30326: LIST
30327: LIST
30328: PUSH
30329: LD_INT 30
30331: PUSH
30332: LD_INT 33
30334: PUSH
30335: EMPTY
30336: LIST
30337: LIST
30338: PUSH
30339: EMPTY
30340: LIST
30341: LIST
30342: LIST
30343: PPUSH
30344: CALL_OW 72
30348: IFFALSE 30436
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
30350: LD_ADDR_VAR 0 8
30354: PUSH
30355: LD_VAR 0 18
30359: PPUSH
30360: LD_INT 2
30362: PUSH
30363: LD_INT 30
30365: PUSH
30366: LD_INT 32
30368: PUSH
30369: EMPTY
30370: LIST
30371: LIST
30372: PUSH
30373: LD_INT 30
30375: PUSH
30376: LD_INT 33
30378: PUSH
30379: EMPTY
30380: LIST
30381: LIST
30382: PUSH
30383: EMPTY
30384: LIST
30385: LIST
30386: LIST
30387: PPUSH
30388: CALL_OW 72
30392: PUSH
30393: FOR_IN
30394: IFFALSE 30434
// begin if not GetBWeapon ( i ) then
30396: LD_VAR 0 8
30400: PPUSH
30401: CALL_OW 269
30405: NOT
30406: IFFALSE 30432
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
30408: LD_VAR 0 8
30412: PPUSH
30413: LD_VAR 0 8
30417: PPUSH
30418: LD_VAR 0 2
30422: PPUSH
30423: CALL 31682 0 2
30427: PPUSH
30428: CALL_OW 431
// end ;
30432: GO 30393
30434: POP
30435: POP
// end ; for i = 1 to personel do
30436: LD_ADDR_VAR 0 8
30440: PUSH
30441: DOUBLE
30442: LD_INT 1
30444: DEC
30445: ST_TO_ADDR
30446: LD_VAR 0 6
30450: PUSH
30451: FOR_TO
30452: IFFALSE 31516
// begin if i > 4 then
30454: LD_VAR 0 8
30458: PUSH
30459: LD_INT 4
30461: GREATER
30462: IFFALSE 30466
// break ;
30464: GO 31516
// case i of 1 :
30466: LD_VAR 0 8
30470: PUSH
30471: LD_INT 1
30473: DOUBLE
30474: EQUAL
30475: IFTRUE 30479
30477: GO 30559
30479: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
30480: LD_ADDR_VAR 0 12
30484: PUSH
30485: LD_VAR 0 18
30489: PPUSH
30490: LD_INT 22
30492: PUSH
30493: LD_VAR 0 16
30497: PUSH
30498: EMPTY
30499: LIST
30500: LIST
30501: PUSH
30502: LD_INT 58
30504: PUSH
30505: EMPTY
30506: LIST
30507: PUSH
30508: LD_INT 2
30510: PUSH
30511: LD_INT 30
30513: PUSH
30514: LD_INT 32
30516: PUSH
30517: EMPTY
30518: LIST
30519: LIST
30520: PUSH
30521: LD_INT 30
30523: PUSH
30524: LD_INT 4
30526: PUSH
30527: EMPTY
30528: LIST
30529: LIST
30530: PUSH
30531: LD_INT 30
30533: PUSH
30534: LD_INT 5
30536: PUSH
30537: EMPTY
30538: LIST
30539: LIST
30540: PUSH
30541: EMPTY
30542: LIST
30543: LIST
30544: LIST
30545: LIST
30546: PUSH
30547: EMPTY
30548: LIST
30549: LIST
30550: LIST
30551: PPUSH
30552: CALL_OW 72
30556: ST_TO_ADDR
30557: GO 30781
30559: LD_INT 2
30561: DOUBLE
30562: EQUAL
30563: IFTRUE 30567
30565: GO 30629
30567: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
30568: LD_ADDR_VAR 0 12
30572: PUSH
30573: LD_VAR 0 18
30577: PPUSH
30578: LD_INT 22
30580: PUSH
30581: LD_VAR 0 16
30585: PUSH
30586: EMPTY
30587: LIST
30588: LIST
30589: PUSH
30590: LD_INT 2
30592: PUSH
30593: LD_INT 30
30595: PUSH
30596: LD_INT 0
30598: PUSH
30599: EMPTY
30600: LIST
30601: LIST
30602: PUSH
30603: LD_INT 30
30605: PUSH
30606: LD_INT 1
30608: PUSH
30609: EMPTY
30610: LIST
30611: LIST
30612: PUSH
30613: EMPTY
30614: LIST
30615: LIST
30616: LIST
30617: PUSH
30618: EMPTY
30619: LIST
30620: LIST
30621: PPUSH
30622: CALL_OW 72
30626: ST_TO_ADDR
30627: GO 30781
30629: LD_INT 3
30631: DOUBLE
30632: EQUAL
30633: IFTRUE 30637
30635: GO 30699
30637: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
30638: LD_ADDR_VAR 0 12
30642: PUSH
30643: LD_VAR 0 18
30647: PPUSH
30648: LD_INT 22
30650: PUSH
30651: LD_VAR 0 16
30655: PUSH
30656: EMPTY
30657: LIST
30658: LIST
30659: PUSH
30660: LD_INT 2
30662: PUSH
30663: LD_INT 30
30665: PUSH
30666: LD_INT 2
30668: PUSH
30669: EMPTY
30670: LIST
30671: LIST
30672: PUSH
30673: LD_INT 30
30675: PUSH
30676: LD_INT 3
30678: PUSH
30679: EMPTY
30680: LIST
30681: LIST
30682: PUSH
30683: EMPTY
30684: LIST
30685: LIST
30686: LIST
30687: PUSH
30688: EMPTY
30689: LIST
30690: LIST
30691: PPUSH
30692: CALL_OW 72
30696: ST_TO_ADDR
30697: GO 30781
30699: LD_INT 4
30701: DOUBLE
30702: EQUAL
30703: IFTRUE 30707
30705: GO 30780
30707: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
30708: LD_ADDR_VAR 0 12
30712: PUSH
30713: LD_VAR 0 18
30717: PPUSH
30718: LD_INT 22
30720: PUSH
30721: LD_VAR 0 16
30725: PUSH
30726: EMPTY
30727: LIST
30728: LIST
30729: PUSH
30730: LD_INT 2
30732: PUSH
30733: LD_INT 30
30735: PUSH
30736: LD_INT 6
30738: PUSH
30739: EMPTY
30740: LIST
30741: LIST
30742: PUSH
30743: LD_INT 30
30745: PUSH
30746: LD_INT 7
30748: PUSH
30749: EMPTY
30750: LIST
30751: LIST
30752: PUSH
30753: LD_INT 30
30755: PUSH
30756: LD_INT 8
30758: PUSH
30759: EMPTY
30760: LIST
30761: LIST
30762: PUSH
30763: EMPTY
30764: LIST
30765: LIST
30766: LIST
30767: LIST
30768: PUSH
30769: EMPTY
30770: LIST
30771: LIST
30772: PPUSH
30773: CALL_OW 72
30777: ST_TO_ADDR
30778: GO 30781
30780: POP
// if i = 1 then
30781: LD_VAR 0 8
30785: PUSH
30786: LD_INT 1
30788: EQUAL
30789: IFFALSE 30900
// begin tmp := [ ] ;
30791: LD_ADDR_VAR 0 19
30795: PUSH
30796: EMPTY
30797: ST_TO_ADDR
// for j in f do
30798: LD_ADDR_VAR 0 9
30802: PUSH
30803: LD_VAR 0 12
30807: PUSH
30808: FOR_IN
30809: IFFALSE 30882
// if GetBType ( j ) = b_bunker then
30811: LD_VAR 0 9
30815: PPUSH
30816: CALL_OW 266
30820: PUSH
30821: LD_INT 32
30823: EQUAL
30824: IFFALSE 30851
// tmp := Insert ( tmp , 1 , j ) else
30826: LD_ADDR_VAR 0 19
30830: PUSH
30831: LD_VAR 0 19
30835: PPUSH
30836: LD_INT 1
30838: PPUSH
30839: LD_VAR 0 9
30843: PPUSH
30844: CALL_OW 2
30848: ST_TO_ADDR
30849: GO 30880
// tmp := Insert ( tmp , tmp + 1 , j ) ;
30851: LD_ADDR_VAR 0 19
30855: PUSH
30856: LD_VAR 0 19
30860: PPUSH
30861: LD_VAR 0 19
30865: PUSH
30866: LD_INT 1
30868: PLUS
30869: PPUSH
30870: LD_VAR 0 9
30874: PPUSH
30875: CALL_OW 2
30879: ST_TO_ADDR
30880: GO 30808
30882: POP
30883: POP
// if tmp then
30884: LD_VAR 0 19
30888: IFFALSE 30900
// f := tmp ;
30890: LD_ADDR_VAR 0 12
30894: PUSH
30895: LD_VAR 0 19
30899: ST_TO_ADDR
// end ; x := personel [ i ] ;
30900: LD_ADDR_VAR 0 13
30904: PUSH
30905: LD_VAR 0 6
30909: PUSH
30910: LD_VAR 0 8
30914: ARRAY
30915: ST_TO_ADDR
// if x = - 1 then
30916: LD_VAR 0 13
30920: PUSH
30921: LD_INT 1
30923: NEG
30924: EQUAL
30925: IFFALSE 31134
// begin for j in f do
30927: LD_ADDR_VAR 0 9
30931: PUSH
30932: LD_VAR 0 12
30936: PUSH
30937: FOR_IN
30938: IFFALSE 31130
// repeat InitHc ;
30940: CALL_OW 19
// if GetBType ( j ) = b_barracks then
30944: LD_VAR 0 9
30948: PPUSH
30949: CALL_OW 266
30953: PUSH
30954: LD_INT 5
30956: EQUAL
30957: IFFALSE 31027
// begin if UnitsInside ( j ) < 3 then
30959: LD_VAR 0 9
30963: PPUSH
30964: CALL_OW 313
30968: PUSH
30969: LD_INT 3
30971: LESS
30972: IFFALSE 31008
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30974: LD_INT 0
30976: PPUSH
30977: LD_INT 5
30979: PUSH
30980: LD_INT 8
30982: PUSH
30983: LD_INT 9
30985: PUSH
30986: EMPTY
30987: LIST
30988: LIST
30989: LIST
30990: PUSH
30991: LD_VAR 0 17
30995: ARRAY
30996: PPUSH
30997: LD_VAR 0 4
31001: PPUSH
31002: CALL_OW 380
31006: GO 31025
// PrepareHuman ( false , i , skill ) ;
31008: LD_INT 0
31010: PPUSH
31011: LD_VAR 0 8
31015: PPUSH
31016: LD_VAR 0 4
31020: PPUSH
31021: CALL_OW 380
// end else
31025: GO 31044
// PrepareHuman ( false , i , skill ) ;
31027: LD_INT 0
31029: PPUSH
31030: LD_VAR 0 8
31034: PPUSH
31035: LD_VAR 0 4
31039: PPUSH
31040: CALL_OW 380
// un := CreateHuman ;
31044: LD_ADDR_VAR 0 14
31048: PUSH
31049: CALL_OW 44
31053: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31054: LD_ADDR_VAR 0 7
31058: PUSH
31059: LD_VAR 0 7
31063: PPUSH
31064: LD_INT 1
31066: PPUSH
31067: LD_VAR 0 14
31071: PPUSH
31072: CALL_OW 2
31076: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
31077: LD_VAR 0 14
31081: PPUSH
31082: LD_VAR 0 9
31086: PPUSH
31087: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
31091: LD_VAR 0 9
31095: PPUSH
31096: CALL_OW 313
31100: PUSH
31101: LD_INT 6
31103: EQUAL
31104: PUSH
31105: LD_VAR 0 9
31109: PPUSH
31110: CALL_OW 266
31114: PUSH
31115: LD_INT 32
31117: PUSH
31118: LD_INT 31
31120: PUSH
31121: EMPTY
31122: LIST
31123: LIST
31124: IN
31125: OR
31126: IFFALSE 30940
31128: GO 30937
31130: POP
31131: POP
// end else
31132: GO 31514
// for j = 1 to x do
31134: LD_ADDR_VAR 0 9
31138: PUSH
31139: DOUBLE
31140: LD_INT 1
31142: DEC
31143: ST_TO_ADDR
31144: LD_VAR 0 13
31148: PUSH
31149: FOR_TO
31150: IFFALSE 31512
// begin InitHc ;
31152: CALL_OW 19
// if not f then
31156: LD_VAR 0 12
31160: NOT
31161: IFFALSE 31250
// begin PrepareHuman ( false , i , skill ) ;
31163: LD_INT 0
31165: PPUSH
31166: LD_VAR 0 8
31170: PPUSH
31171: LD_VAR 0 4
31175: PPUSH
31176: CALL_OW 380
// un := CreateHuman ;
31180: LD_ADDR_VAR 0 14
31184: PUSH
31185: CALL_OW 44
31189: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31190: LD_ADDR_VAR 0 7
31194: PUSH
31195: LD_VAR 0 7
31199: PPUSH
31200: LD_INT 1
31202: PPUSH
31203: LD_VAR 0 14
31207: PPUSH
31208: CALL_OW 2
31212: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31213: LD_VAR 0 14
31217: PPUSH
31218: LD_VAR 0 1
31222: PPUSH
31223: CALL_OW 250
31227: PPUSH
31228: LD_VAR 0 1
31232: PPUSH
31233: CALL_OW 251
31237: PPUSH
31238: LD_INT 10
31240: PPUSH
31241: LD_INT 0
31243: PPUSH
31244: CALL_OW 50
// continue ;
31248: GO 31149
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
31250: LD_VAR 0 12
31254: PUSH
31255: LD_INT 1
31257: ARRAY
31258: PPUSH
31259: CALL_OW 313
31263: PUSH
31264: LD_VAR 0 12
31268: PUSH
31269: LD_INT 1
31271: ARRAY
31272: PPUSH
31273: CALL_OW 266
31277: PUSH
31278: LD_INT 32
31280: PUSH
31281: LD_INT 31
31283: PUSH
31284: EMPTY
31285: LIST
31286: LIST
31287: IN
31288: AND
31289: PUSH
31290: LD_VAR 0 12
31294: PUSH
31295: LD_INT 1
31297: ARRAY
31298: PPUSH
31299: CALL_OW 313
31303: PUSH
31304: LD_INT 6
31306: EQUAL
31307: OR
31308: IFFALSE 31328
// f := Delete ( f , 1 ) ;
31310: LD_ADDR_VAR 0 12
31314: PUSH
31315: LD_VAR 0 12
31319: PPUSH
31320: LD_INT 1
31322: PPUSH
31323: CALL_OW 3
31327: ST_TO_ADDR
// if not f then
31328: LD_VAR 0 12
31332: NOT
31333: IFFALSE 31351
// begin x := x + 2 ;
31335: LD_ADDR_VAR 0 13
31339: PUSH
31340: LD_VAR 0 13
31344: PUSH
31345: LD_INT 2
31347: PLUS
31348: ST_TO_ADDR
// continue ;
31349: GO 31149
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
31351: LD_VAR 0 12
31355: PUSH
31356: LD_INT 1
31358: ARRAY
31359: PPUSH
31360: CALL_OW 266
31364: PUSH
31365: LD_INT 5
31367: EQUAL
31368: IFFALSE 31442
// begin if UnitsInside ( f [ 1 ] ) < 3 then
31370: LD_VAR 0 12
31374: PUSH
31375: LD_INT 1
31377: ARRAY
31378: PPUSH
31379: CALL_OW 313
31383: PUSH
31384: LD_INT 3
31386: LESS
31387: IFFALSE 31423
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31389: LD_INT 0
31391: PPUSH
31392: LD_INT 5
31394: PUSH
31395: LD_INT 8
31397: PUSH
31398: LD_INT 9
31400: PUSH
31401: EMPTY
31402: LIST
31403: LIST
31404: LIST
31405: PUSH
31406: LD_VAR 0 17
31410: ARRAY
31411: PPUSH
31412: LD_VAR 0 4
31416: PPUSH
31417: CALL_OW 380
31421: GO 31440
// PrepareHuman ( false , i , skill ) ;
31423: LD_INT 0
31425: PPUSH
31426: LD_VAR 0 8
31430: PPUSH
31431: LD_VAR 0 4
31435: PPUSH
31436: CALL_OW 380
// end else
31440: GO 31459
// PrepareHuman ( false , i , skill ) ;
31442: LD_INT 0
31444: PPUSH
31445: LD_VAR 0 8
31449: PPUSH
31450: LD_VAR 0 4
31454: PPUSH
31455: CALL_OW 380
// un := CreateHuman ;
31459: LD_ADDR_VAR 0 14
31463: PUSH
31464: CALL_OW 44
31468: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31469: LD_ADDR_VAR 0 7
31473: PUSH
31474: LD_VAR 0 7
31478: PPUSH
31479: LD_INT 1
31481: PPUSH
31482: LD_VAR 0 14
31486: PPUSH
31487: CALL_OW 2
31491: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
31492: LD_VAR 0 14
31496: PPUSH
31497: LD_VAR 0 12
31501: PUSH
31502: LD_INT 1
31504: ARRAY
31505: PPUSH
31506: CALL_OW 52
// end ;
31510: GO 31149
31512: POP
31513: POP
// end ;
31514: GO 30451
31516: POP
31517: POP
// result := result ^ buildings ;
31518: LD_ADDR_VAR 0 7
31522: PUSH
31523: LD_VAR 0 7
31527: PUSH
31528: LD_VAR 0 18
31532: ADD
31533: ST_TO_ADDR
// end else
31534: GO 31677
// begin for i = 1 to personel do
31536: LD_ADDR_VAR 0 8
31540: PUSH
31541: DOUBLE
31542: LD_INT 1
31544: DEC
31545: ST_TO_ADDR
31546: LD_VAR 0 6
31550: PUSH
31551: FOR_TO
31552: IFFALSE 31675
// begin if i > 4 then
31554: LD_VAR 0 8
31558: PUSH
31559: LD_INT 4
31561: GREATER
31562: IFFALSE 31566
// break ;
31564: GO 31675
// x := personel [ i ] ;
31566: LD_ADDR_VAR 0 13
31570: PUSH
31571: LD_VAR 0 6
31575: PUSH
31576: LD_VAR 0 8
31580: ARRAY
31581: ST_TO_ADDR
// if x = - 1 then
31582: LD_VAR 0 13
31586: PUSH
31587: LD_INT 1
31589: NEG
31590: EQUAL
31591: IFFALSE 31595
// continue ;
31593: GO 31551
// PrepareHuman ( false , i , skill ) ;
31595: LD_INT 0
31597: PPUSH
31598: LD_VAR 0 8
31602: PPUSH
31603: LD_VAR 0 4
31607: PPUSH
31608: CALL_OW 380
// un := CreateHuman ;
31612: LD_ADDR_VAR 0 14
31616: PUSH
31617: CALL_OW 44
31621: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31622: LD_VAR 0 14
31626: PPUSH
31627: LD_VAR 0 1
31631: PPUSH
31632: CALL_OW 250
31636: PPUSH
31637: LD_VAR 0 1
31641: PPUSH
31642: CALL_OW 251
31646: PPUSH
31647: LD_INT 10
31649: PPUSH
31650: LD_INT 0
31652: PPUSH
31653: CALL_OW 50
// result := result ^ un ;
31657: LD_ADDR_VAR 0 7
31661: PUSH
31662: LD_VAR 0 7
31666: PUSH
31667: LD_VAR 0 14
31671: ADD
31672: ST_TO_ADDR
// end ;
31673: GO 31551
31675: POP
31676: POP
// end ; end ;
31677: LD_VAR 0 7
31681: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
31682: LD_INT 0
31684: PPUSH
31685: PPUSH
31686: PPUSH
31687: PPUSH
31688: PPUSH
31689: PPUSH
31690: PPUSH
31691: PPUSH
31692: PPUSH
31693: PPUSH
31694: PPUSH
31695: PPUSH
31696: PPUSH
31697: PPUSH
31698: PPUSH
31699: PPUSH
// result := false ;
31700: LD_ADDR_VAR 0 3
31704: PUSH
31705: LD_INT 0
31707: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
31708: LD_VAR 0 1
31712: NOT
31713: PUSH
31714: LD_VAR 0 1
31718: PPUSH
31719: CALL_OW 266
31723: PUSH
31724: LD_INT 32
31726: PUSH
31727: LD_INT 33
31729: PUSH
31730: EMPTY
31731: LIST
31732: LIST
31733: IN
31734: NOT
31735: OR
31736: IFFALSE 31740
// exit ;
31738: GO 32876
// nat := GetNation ( tower ) ;
31740: LD_ADDR_VAR 0 12
31744: PUSH
31745: LD_VAR 0 1
31749: PPUSH
31750: CALL_OW 248
31754: ST_TO_ADDR
// side := GetSide ( tower ) ;
31755: LD_ADDR_VAR 0 16
31759: PUSH
31760: LD_VAR 0 1
31764: PPUSH
31765: CALL_OW 255
31769: ST_TO_ADDR
// x := GetX ( tower ) ;
31770: LD_ADDR_VAR 0 10
31774: PUSH
31775: LD_VAR 0 1
31779: PPUSH
31780: CALL_OW 250
31784: ST_TO_ADDR
// y := GetY ( tower ) ;
31785: LD_ADDR_VAR 0 11
31789: PUSH
31790: LD_VAR 0 1
31794: PPUSH
31795: CALL_OW 251
31799: ST_TO_ADDR
// if not x or not y then
31800: LD_VAR 0 10
31804: NOT
31805: PUSH
31806: LD_VAR 0 11
31810: NOT
31811: OR
31812: IFFALSE 31816
// exit ;
31814: GO 32876
// weapon := 0 ;
31816: LD_ADDR_VAR 0 18
31820: PUSH
31821: LD_INT 0
31823: ST_TO_ADDR
// fac_list := [ ] ;
31824: LD_ADDR_VAR 0 17
31828: PUSH
31829: EMPTY
31830: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
31831: LD_ADDR_VAR 0 6
31835: PUSH
31836: LD_VAR 0 1
31840: PPUSH
31841: CALL_OW 274
31845: PPUSH
31846: LD_VAR 0 2
31850: PPUSH
31851: CALL 29454 0 2
31855: PPUSH
31856: LD_INT 30
31858: PUSH
31859: LD_INT 3
31861: PUSH
31862: EMPTY
31863: LIST
31864: LIST
31865: PPUSH
31866: CALL_OW 72
31870: ST_TO_ADDR
// if not factories then
31871: LD_VAR 0 6
31875: NOT
31876: IFFALSE 31880
// exit ;
31878: GO 32876
// for i in factories do
31880: LD_ADDR_VAR 0 8
31884: PUSH
31885: LD_VAR 0 6
31889: PUSH
31890: FOR_IN
31891: IFFALSE 31916
// fac_list := fac_list union AvailableWeaponList ( i ) ;
31893: LD_ADDR_VAR 0 17
31897: PUSH
31898: LD_VAR 0 17
31902: PUSH
31903: LD_VAR 0 8
31907: PPUSH
31908: CALL_OW 478
31912: UNION
31913: ST_TO_ADDR
31914: GO 31890
31916: POP
31917: POP
// if not fac_list then
31918: LD_VAR 0 17
31922: NOT
31923: IFFALSE 31927
// exit ;
31925: GO 32876
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
31927: LD_ADDR_VAR 0 5
31931: PUSH
31932: LD_INT 4
31934: PUSH
31935: LD_INT 5
31937: PUSH
31938: LD_INT 9
31940: PUSH
31941: LD_INT 10
31943: PUSH
31944: LD_INT 6
31946: PUSH
31947: LD_INT 7
31949: PUSH
31950: LD_INT 11
31952: PUSH
31953: EMPTY
31954: LIST
31955: LIST
31956: LIST
31957: LIST
31958: LIST
31959: LIST
31960: LIST
31961: PUSH
31962: LD_INT 27
31964: PUSH
31965: LD_INT 28
31967: PUSH
31968: LD_INT 26
31970: PUSH
31971: LD_INT 30
31973: PUSH
31974: EMPTY
31975: LIST
31976: LIST
31977: LIST
31978: LIST
31979: PUSH
31980: LD_INT 43
31982: PUSH
31983: LD_INT 44
31985: PUSH
31986: LD_INT 46
31988: PUSH
31989: LD_INT 45
31991: PUSH
31992: LD_INT 47
31994: PUSH
31995: LD_INT 49
31997: PUSH
31998: EMPTY
31999: LIST
32000: LIST
32001: LIST
32002: LIST
32003: LIST
32004: LIST
32005: PUSH
32006: EMPTY
32007: LIST
32008: LIST
32009: LIST
32010: PUSH
32011: LD_VAR 0 12
32015: ARRAY
32016: ST_TO_ADDR
// for i in list do
32017: LD_ADDR_VAR 0 8
32021: PUSH
32022: LD_VAR 0 5
32026: PUSH
32027: FOR_IN
32028: IFFALSE 32061
// if not i in fac_list then
32030: LD_VAR 0 8
32034: PUSH
32035: LD_VAR 0 17
32039: IN
32040: NOT
32041: IFFALSE 32059
// list := list diff i ;
32043: LD_ADDR_VAR 0 5
32047: PUSH
32048: LD_VAR 0 5
32052: PUSH
32053: LD_VAR 0 8
32057: DIFF
32058: ST_TO_ADDR
32059: GO 32027
32061: POP
32062: POP
// if not list then
32063: LD_VAR 0 5
32067: NOT
32068: IFFALSE 32072
// exit ;
32070: GO 32876
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
32072: LD_VAR 0 12
32076: PUSH
32077: LD_INT 3
32079: EQUAL
32080: PUSH
32081: LD_INT 49
32083: PUSH
32084: LD_VAR 0 5
32088: IN
32089: AND
32090: PUSH
32091: LD_INT 31
32093: PPUSH
32094: LD_VAR 0 16
32098: PPUSH
32099: CALL_OW 321
32103: PUSH
32104: LD_INT 2
32106: EQUAL
32107: AND
32108: IFFALSE 32168
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
32110: LD_INT 22
32112: PUSH
32113: LD_VAR 0 16
32117: PUSH
32118: EMPTY
32119: LIST
32120: LIST
32121: PUSH
32122: LD_INT 35
32124: PUSH
32125: LD_INT 49
32127: PUSH
32128: EMPTY
32129: LIST
32130: LIST
32131: PUSH
32132: LD_INT 91
32134: PUSH
32135: LD_VAR 0 1
32139: PUSH
32140: LD_INT 10
32142: PUSH
32143: EMPTY
32144: LIST
32145: LIST
32146: LIST
32147: PUSH
32148: EMPTY
32149: LIST
32150: LIST
32151: LIST
32152: PPUSH
32153: CALL_OW 69
32157: NOT
32158: IFFALSE 32168
// weapon := ru_time_lapser ;
32160: LD_ADDR_VAR 0 18
32164: PUSH
32165: LD_INT 49
32167: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
32168: LD_VAR 0 12
32172: PUSH
32173: LD_INT 1
32175: PUSH
32176: LD_INT 2
32178: PUSH
32179: EMPTY
32180: LIST
32181: LIST
32182: IN
32183: PUSH
32184: LD_INT 11
32186: PUSH
32187: LD_VAR 0 5
32191: IN
32192: PUSH
32193: LD_INT 30
32195: PUSH
32196: LD_VAR 0 5
32200: IN
32201: OR
32202: AND
32203: PUSH
32204: LD_INT 6
32206: PPUSH
32207: LD_VAR 0 16
32211: PPUSH
32212: CALL_OW 321
32216: PUSH
32217: LD_INT 2
32219: EQUAL
32220: AND
32221: IFFALSE 32386
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
32223: LD_INT 22
32225: PUSH
32226: LD_VAR 0 16
32230: PUSH
32231: EMPTY
32232: LIST
32233: LIST
32234: PUSH
32235: LD_INT 2
32237: PUSH
32238: LD_INT 35
32240: PUSH
32241: LD_INT 11
32243: PUSH
32244: EMPTY
32245: LIST
32246: LIST
32247: PUSH
32248: LD_INT 35
32250: PUSH
32251: LD_INT 30
32253: PUSH
32254: EMPTY
32255: LIST
32256: LIST
32257: PUSH
32258: EMPTY
32259: LIST
32260: LIST
32261: LIST
32262: PUSH
32263: LD_INT 91
32265: PUSH
32266: LD_VAR 0 1
32270: PUSH
32271: LD_INT 18
32273: PUSH
32274: EMPTY
32275: LIST
32276: LIST
32277: LIST
32278: PUSH
32279: EMPTY
32280: LIST
32281: LIST
32282: LIST
32283: PPUSH
32284: CALL_OW 69
32288: NOT
32289: PUSH
32290: LD_INT 22
32292: PUSH
32293: LD_VAR 0 16
32297: PUSH
32298: EMPTY
32299: LIST
32300: LIST
32301: PUSH
32302: LD_INT 2
32304: PUSH
32305: LD_INT 30
32307: PUSH
32308: LD_INT 32
32310: PUSH
32311: EMPTY
32312: LIST
32313: LIST
32314: PUSH
32315: LD_INT 30
32317: PUSH
32318: LD_INT 33
32320: PUSH
32321: EMPTY
32322: LIST
32323: LIST
32324: PUSH
32325: EMPTY
32326: LIST
32327: LIST
32328: LIST
32329: PUSH
32330: LD_INT 91
32332: PUSH
32333: LD_VAR 0 1
32337: PUSH
32338: LD_INT 12
32340: PUSH
32341: EMPTY
32342: LIST
32343: LIST
32344: LIST
32345: PUSH
32346: EMPTY
32347: LIST
32348: LIST
32349: LIST
32350: PUSH
32351: EMPTY
32352: LIST
32353: PPUSH
32354: CALL_OW 69
32358: PUSH
32359: LD_INT 2
32361: GREATER
32362: AND
32363: IFFALSE 32386
// weapon := [ us_radar , ar_radar ] [ nat ] ;
32365: LD_ADDR_VAR 0 18
32369: PUSH
32370: LD_INT 11
32372: PUSH
32373: LD_INT 30
32375: PUSH
32376: EMPTY
32377: LIST
32378: LIST
32379: PUSH
32380: LD_VAR 0 12
32384: ARRAY
32385: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
32386: LD_VAR 0 18
32390: NOT
32391: PUSH
32392: LD_INT 40
32394: PPUSH
32395: LD_VAR 0 16
32399: PPUSH
32400: CALL_OW 321
32404: PUSH
32405: LD_INT 2
32407: EQUAL
32408: AND
32409: PUSH
32410: LD_INT 7
32412: PUSH
32413: LD_VAR 0 5
32417: IN
32418: PUSH
32419: LD_INT 28
32421: PUSH
32422: LD_VAR 0 5
32426: IN
32427: OR
32428: PUSH
32429: LD_INT 45
32431: PUSH
32432: LD_VAR 0 5
32436: IN
32437: OR
32438: AND
32439: IFFALSE 32693
// begin hex := GetHexInfo ( x , y ) ;
32441: LD_ADDR_VAR 0 4
32445: PUSH
32446: LD_VAR 0 10
32450: PPUSH
32451: LD_VAR 0 11
32455: PPUSH
32456: CALL_OW 546
32460: ST_TO_ADDR
// if hex [ 1 ] then
32461: LD_VAR 0 4
32465: PUSH
32466: LD_INT 1
32468: ARRAY
32469: IFFALSE 32473
// exit ;
32471: GO 32876
// height := hex [ 2 ] ;
32473: LD_ADDR_VAR 0 15
32477: PUSH
32478: LD_VAR 0 4
32482: PUSH
32483: LD_INT 2
32485: ARRAY
32486: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
32487: LD_ADDR_VAR 0 14
32491: PUSH
32492: LD_INT 0
32494: PUSH
32495: LD_INT 2
32497: PUSH
32498: LD_INT 3
32500: PUSH
32501: LD_INT 5
32503: PUSH
32504: EMPTY
32505: LIST
32506: LIST
32507: LIST
32508: LIST
32509: ST_TO_ADDR
// for i in tmp do
32510: LD_ADDR_VAR 0 8
32514: PUSH
32515: LD_VAR 0 14
32519: PUSH
32520: FOR_IN
32521: IFFALSE 32691
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
32523: LD_ADDR_VAR 0 9
32527: PUSH
32528: LD_VAR 0 10
32532: PPUSH
32533: LD_VAR 0 8
32537: PPUSH
32538: LD_INT 5
32540: PPUSH
32541: CALL_OW 272
32545: PUSH
32546: LD_VAR 0 11
32550: PPUSH
32551: LD_VAR 0 8
32555: PPUSH
32556: LD_INT 5
32558: PPUSH
32559: CALL_OW 273
32563: PUSH
32564: EMPTY
32565: LIST
32566: LIST
32567: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
32568: LD_VAR 0 9
32572: PUSH
32573: LD_INT 1
32575: ARRAY
32576: PPUSH
32577: LD_VAR 0 9
32581: PUSH
32582: LD_INT 2
32584: ARRAY
32585: PPUSH
32586: CALL_OW 488
32590: IFFALSE 32689
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
32592: LD_ADDR_VAR 0 4
32596: PUSH
32597: LD_VAR 0 9
32601: PUSH
32602: LD_INT 1
32604: ARRAY
32605: PPUSH
32606: LD_VAR 0 9
32610: PUSH
32611: LD_INT 2
32613: ARRAY
32614: PPUSH
32615: CALL_OW 546
32619: ST_TO_ADDR
// if hex [ 1 ] then
32620: LD_VAR 0 4
32624: PUSH
32625: LD_INT 1
32627: ARRAY
32628: IFFALSE 32632
// continue ;
32630: GO 32520
// h := hex [ 2 ] ;
32632: LD_ADDR_VAR 0 13
32636: PUSH
32637: LD_VAR 0 4
32641: PUSH
32642: LD_INT 2
32644: ARRAY
32645: ST_TO_ADDR
// if h + 7 < height then
32646: LD_VAR 0 13
32650: PUSH
32651: LD_INT 7
32653: PLUS
32654: PUSH
32655: LD_VAR 0 15
32659: LESS
32660: IFFALSE 32689
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
32662: LD_ADDR_VAR 0 18
32666: PUSH
32667: LD_INT 7
32669: PUSH
32670: LD_INT 28
32672: PUSH
32673: LD_INT 45
32675: PUSH
32676: EMPTY
32677: LIST
32678: LIST
32679: LIST
32680: PUSH
32681: LD_VAR 0 12
32685: ARRAY
32686: ST_TO_ADDR
// break ;
32687: GO 32691
// end ; end ; end ;
32689: GO 32520
32691: POP
32692: POP
// end ; if not weapon then
32693: LD_VAR 0 18
32697: NOT
32698: IFFALSE 32758
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
32700: LD_ADDR_VAR 0 5
32704: PUSH
32705: LD_VAR 0 5
32709: PUSH
32710: LD_INT 11
32712: PUSH
32713: LD_INT 30
32715: PUSH
32716: LD_INT 49
32718: PUSH
32719: EMPTY
32720: LIST
32721: LIST
32722: LIST
32723: DIFF
32724: ST_TO_ADDR
// if not list then
32725: LD_VAR 0 5
32729: NOT
32730: IFFALSE 32734
// exit ;
32732: GO 32876
// weapon := list [ rand ( 1 , list ) ] ;
32734: LD_ADDR_VAR 0 18
32738: PUSH
32739: LD_VAR 0 5
32743: PUSH
32744: LD_INT 1
32746: PPUSH
32747: LD_VAR 0 5
32751: PPUSH
32752: CALL_OW 12
32756: ARRAY
32757: ST_TO_ADDR
// end ; if weapon then
32758: LD_VAR 0 18
32762: IFFALSE 32876
// begin tmp := CostOfWeapon ( weapon ) ;
32764: LD_ADDR_VAR 0 14
32768: PUSH
32769: LD_VAR 0 18
32773: PPUSH
32774: CALL_OW 451
32778: ST_TO_ADDR
// j := GetBase ( tower ) ;
32779: LD_ADDR_VAR 0 9
32783: PUSH
32784: LD_VAR 0 1
32788: PPUSH
32789: CALL_OW 274
32793: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
32794: LD_VAR 0 9
32798: PPUSH
32799: LD_INT 1
32801: PPUSH
32802: CALL_OW 275
32806: PUSH
32807: LD_VAR 0 14
32811: PUSH
32812: LD_INT 1
32814: ARRAY
32815: GREATEREQUAL
32816: PUSH
32817: LD_VAR 0 9
32821: PPUSH
32822: LD_INT 2
32824: PPUSH
32825: CALL_OW 275
32829: PUSH
32830: LD_VAR 0 14
32834: PUSH
32835: LD_INT 2
32837: ARRAY
32838: GREATEREQUAL
32839: AND
32840: PUSH
32841: LD_VAR 0 9
32845: PPUSH
32846: LD_INT 3
32848: PPUSH
32849: CALL_OW 275
32853: PUSH
32854: LD_VAR 0 14
32858: PUSH
32859: LD_INT 3
32861: ARRAY
32862: GREATEREQUAL
32863: AND
32864: IFFALSE 32876
// result := weapon ;
32866: LD_ADDR_VAR 0 3
32870: PUSH
32871: LD_VAR 0 18
32875: ST_TO_ADDR
// end ; end ;
32876: LD_VAR 0 3
32880: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
32881: LD_INT 0
32883: PPUSH
32884: PPUSH
// result := true ;
32885: LD_ADDR_VAR 0 3
32889: PUSH
32890: LD_INT 1
32892: ST_TO_ADDR
// if array1 = array2 then
32893: LD_VAR 0 1
32897: PUSH
32898: LD_VAR 0 2
32902: EQUAL
32903: IFFALSE 32963
// begin for i = 1 to array1 do
32905: LD_ADDR_VAR 0 4
32909: PUSH
32910: DOUBLE
32911: LD_INT 1
32913: DEC
32914: ST_TO_ADDR
32915: LD_VAR 0 1
32919: PUSH
32920: FOR_TO
32921: IFFALSE 32959
// if array1 [ i ] <> array2 [ i ] then
32923: LD_VAR 0 1
32927: PUSH
32928: LD_VAR 0 4
32932: ARRAY
32933: PUSH
32934: LD_VAR 0 2
32938: PUSH
32939: LD_VAR 0 4
32943: ARRAY
32944: NONEQUAL
32945: IFFALSE 32957
// begin result := false ;
32947: LD_ADDR_VAR 0 3
32951: PUSH
32952: LD_INT 0
32954: ST_TO_ADDR
// break ;
32955: GO 32959
// end ;
32957: GO 32920
32959: POP
32960: POP
// end else
32961: GO 32971
// result := false ;
32963: LD_ADDR_VAR 0 3
32967: PUSH
32968: LD_INT 0
32970: ST_TO_ADDR
// end ;
32971: LD_VAR 0 3
32975: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
32976: LD_INT 0
32978: PPUSH
32979: PPUSH
32980: PPUSH
// pom := GetBase ( fac ) ;
32981: LD_ADDR_VAR 0 5
32985: PUSH
32986: LD_VAR 0 1
32990: PPUSH
32991: CALL_OW 274
32995: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
32996: LD_ADDR_VAR 0 4
33000: PUSH
33001: LD_VAR 0 2
33005: PUSH
33006: LD_INT 1
33008: ARRAY
33009: PPUSH
33010: LD_VAR 0 2
33014: PUSH
33015: LD_INT 2
33017: ARRAY
33018: PPUSH
33019: LD_VAR 0 2
33023: PUSH
33024: LD_INT 3
33026: ARRAY
33027: PPUSH
33028: LD_VAR 0 2
33032: PUSH
33033: LD_INT 4
33035: ARRAY
33036: PPUSH
33037: CALL_OW 449
33041: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33042: LD_ADDR_VAR 0 3
33046: PUSH
33047: LD_VAR 0 5
33051: PPUSH
33052: LD_INT 1
33054: PPUSH
33055: CALL_OW 275
33059: PUSH
33060: LD_VAR 0 4
33064: PUSH
33065: LD_INT 1
33067: ARRAY
33068: GREATEREQUAL
33069: PUSH
33070: LD_VAR 0 5
33074: PPUSH
33075: LD_INT 2
33077: PPUSH
33078: CALL_OW 275
33082: PUSH
33083: LD_VAR 0 4
33087: PUSH
33088: LD_INT 2
33090: ARRAY
33091: GREATEREQUAL
33092: AND
33093: PUSH
33094: LD_VAR 0 5
33098: PPUSH
33099: LD_INT 3
33101: PPUSH
33102: CALL_OW 275
33106: PUSH
33107: LD_VAR 0 4
33111: PUSH
33112: LD_INT 3
33114: ARRAY
33115: GREATEREQUAL
33116: AND
33117: ST_TO_ADDR
// end ;
33118: LD_VAR 0 3
33122: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
33123: LD_INT 0
33125: PPUSH
33126: PPUSH
33127: PPUSH
33128: PPUSH
// pom := GetBase ( building ) ;
33129: LD_ADDR_VAR 0 3
33133: PUSH
33134: LD_VAR 0 1
33138: PPUSH
33139: CALL_OW 274
33143: ST_TO_ADDR
// if not pom then
33144: LD_VAR 0 3
33148: NOT
33149: IFFALSE 33153
// exit ;
33151: GO 33323
// btype := GetBType ( building ) ;
33153: LD_ADDR_VAR 0 5
33157: PUSH
33158: LD_VAR 0 1
33162: PPUSH
33163: CALL_OW 266
33167: ST_TO_ADDR
// if btype = b_armoury then
33168: LD_VAR 0 5
33172: PUSH
33173: LD_INT 4
33175: EQUAL
33176: IFFALSE 33186
// btype := b_barracks ;
33178: LD_ADDR_VAR 0 5
33182: PUSH
33183: LD_INT 5
33185: ST_TO_ADDR
// if btype = b_depot then
33186: LD_VAR 0 5
33190: PUSH
33191: LD_INT 0
33193: EQUAL
33194: IFFALSE 33204
// btype := b_warehouse ;
33196: LD_ADDR_VAR 0 5
33200: PUSH
33201: LD_INT 1
33203: ST_TO_ADDR
// if btype = b_workshop then
33204: LD_VAR 0 5
33208: PUSH
33209: LD_INT 2
33211: EQUAL
33212: IFFALSE 33222
// btype := b_factory ;
33214: LD_ADDR_VAR 0 5
33218: PUSH
33219: LD_INT 3
33221: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33222: LD_ADDR_VAR 0 4
33226: PUSH
33227: LD_VAR 0 5
33231: PPUSH
33232: LD_VAR 0 1
33236: PPUSH
33237: CALL_OW 248
33241: PPUSH
33242: CALL_OW 450
33246: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33247: LD_ADDR_VAR 0 2
33251: PUSH
33252: LD_VAR 0 3
33256: PPUSH
33257: LD_INT 1
33259: PPUSH
33260: CALL_OW 275
33264: PUSH
33265: LD_VAR 0 4
33269: PUSH
33270: LD_INT 1
33272: ARRAY
33273: GREATEREQUAL
33274: PUSH
33275: LD_VAR 0 3
33279: PPUSH
33280: LD_INT 2
33282: PPUSH
33283: CALL_OW 275
33287: PUSH
33288: LD_VAR 0 4
33292: PUSH
33293: LD_INT 2
33295: ARRAY
33296: GREATEREQUAL
33297: AND
33298: PUSH
33299: LD_VAR 0 3
33303: PPUSH
33304: LD_INT 3
33306: PPUSH
33307: CALL_OW 275
33311: PUSH
33312: LD_VAR 0 4
33316: PUSH
33317: LD_INT 3
33319: ARRAY
33320: GREATEREQUAL
33321: AND
33322: ST_TO_ADDR
// end ;
33323: LD_VAR 0 2
33327: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
33328: LD_INT 0
33330: PPUSH
33331: PPUSH
33332: PPUSH
// pom := GetBase ( building ) ;
33333: LD_ADDR_VAR 0 4
33337: PUSH
33338: LD_VAR 0 1
33342: PPUSH
33343: CALL_OW 274
33347: ST_TO_ADDR
// if not pom then
33348: LD_VAR 0 4
33352: NOT
33353: IFFALSE 33357
// exit ;
33355: GO 33458
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33357: LD_ADDR_VAR 0 5
33361: PUSH
33362: LD_VAR 0 2
33366: PPUSH
33367: LD_VAR 0 1
33371: PPUSH
33372: CALL_OW 248
33376: PPUSH
33377: CALL_OW 450
33381: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33382: LD_ADDR_VAR 0 3
33386: PUSH
33387: LD_VAR 0 4
33391: PPUSH
33392: LD_INT 1
33394: PPUSH
33395: CALL_OW 275
33399: PUSH
33400: LD_VAR 0 5
33404: PUSH
33405: LD_INT 1
33407: ARRAY
33408: GREATEREQUAL
33409: PUSH
33410: LD_VAR 0 4
33414: PPUSH
33415: LD_INT 2
33417: PPUSH
33418: CALL_OW 275
33422: PUSH
33423: LD_VAR 0 5
33427: PUSH
33428: LD_INT 2
33430: ARRAY
33431: GREATEREQUAL
33432: AND
33433: PUSH
33434: LD_VAR 0 4
33438: PPUSH
33439: LD_INT 3
33441: PPUSH
33442: CALL_OW 275
33446: PUSH
33447: LD_VAR 0 5
33451: PUSH
33452: LD_INT 3
33454: ARRAY
33455: GREATEREQUAL
33456: AND
33457: ST_TO_ADDR
// end ;
33458: LD_VAR 0 3
33462: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
33463: LD_INT 0
33465: PPUSH
33466: PPUSH
33467: PPUSH
33468: PPUSH
33469: PPUSH
33470: PPUSH
33471: PPUSH
33472: PPUSH
33473: PPUSH
33474: PPUSH
// result := false ;
33475: LD_ADDR_VAR 0 6
33479: PUSH
33480: LD_INT 0
33482: ST_TO_ADDR
// if not base or not btype or not x or not y then
33483: LD_VAR 0 1
33487: NOT
33488: PUSH
33489: LD_VAR 0 2
33493: NOT
33494: OR
33495: PUSH
33496: LD_VAR 0 3
33500: NOT
33501: OR
33502: PUSH
33503: LD_VAR 0 4
33507: NOT
33508: OR
33509: IFFALSE 33513
// exit ;
33511: GO 34122
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
33513: LD_ADDR_VAR 0 12
33517: PUSH
33518: LD_VAR 0 2
33522: PPUSH
33523: LD_VAR 0 3
33527: PPUSH
33528: LD_VAR 0 4
33532: PPUSH
33533: LD_VAR 0 5
33537: PPUSH
33538: LD_VAR 0 1
33542: PUSH
33543: LD_INT 1
33545: ARRAY
33546: PPUSH
33547: CALL_OW 248
33551: PPUSH
33552: LD_INT 0
33554: PPUSH
33555: CALL 34959 0 6
33559: ST_TO_ADDR
// if not hexes then
33560: LD_VAR 0 12
33564: NOT
33565: IFFALSE 33569
// exit ;
33567: GO 34122
// for i = 1 to hexes do
33569: LD_ADDR_VAR 0 7
33573: PUSH
33574: DOUBLE
33575: LD_INT 1
33577: DEC
33578: ST_TO_ADDR
33579: LD_VAR 0 12
33583: PUSH
33584: FOR_TO
33585: IFFALSE 34120
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33587: LD_ADDR_VAR 0 11
33591: PUSH
33592: LD_VAR 0 12
33596: PUSH
33597: LD_VAR 0 7
33601: ARRAY
33602: PUSH
33603: LD_INT 1
33605: ARRAY
33606: PPUSH
33607: LD_VAR 0 12
33611: PUSH
33612: LD_VAR 0 7
33616: ARRAY
33617: PUSH
33618: LD_INT 2
33620: ARRAY
33621: PPUSH
33622: CALL_OW 428
33626: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
33627: LD_VAR 0 12
33631: PUSH
33632: LD_VAR 0 7
33636: ARRAY
33637: PUSH
33638: LD_INT 1
33640: ARRAY
33641: PPUSH
33642: LD_VAR 0 12
33646: PUSH
33647: LD_VAR 0 7
33651: ARRAY
33652: PUSH
33653: LD_INT 2
33655: ARRAY
33656: PPUSH
33657: CALL_OW 351
33661: PUSH
33662: LD_VAR 0 12
33666: PUSH
33667: LD_VAR 0 7
33671: ARRAY
33672: PUSH
33673: LD_INT 1
33675: ARRAY
33676: PPUSH
33677: LD_VAR 0 12
33681: PUSH
33682: LD_VAR 0 7
33686: ARRAY
33687: PUSH
33688: LD_INT 2
33690: ARRAY
33691: PPUSH
33692: CALL_OW 488
33696: NOT
33697: OR
33698: PUSH
33699: LD_VAR 0 11
33703: PPUSH
33704: CALL_OW 247
33708: PUSH
33709: LD_INT 3
33711: EQUAL
33712: OR
33713: IFFALSE 33719
// exit ;
33715: POP
33716: POP
33717: GO 34122
// if not tmp or not tmp in base then
33719: LD_VAR 0 11
33723: NOT
33724: PUSH
33725: LD_VAR 0 11
33729: PUSH
33730: LD_VAR 0 1
33734: IN
33735: NOT
33736: OR
33737: IFFALSE 33741
// continue ;
33739: GO 33584
// result := true ;
33741: LD_ADDR_VAR 0 6
33745: PUSH
33746: LD_INT 1
33748: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33749: LD_ADDR_VAR 0 15
33753: PUSH
33754: LD_VAR 0 1
33758: PPUSH
33759: LD_INT 22
33761: PUSH
33762: LD_VAR 0 11
33766: PPUSH
33767: CALL_OW 255
33771: PUSH
33772: EMPTY
33773: LIST
33774: LIST
33775: PUSH
33776: LD_INT 2
33778: PUSH
33779: LD_INT 30
33781: PUSH
33782: LD_INT 0
33784: PUSH
33785: EMPTY
33786: LIST
33787: LIST
33788: PUSH
33789: LD_INT 30
33791: PUSH
33792: LD_INT 1
33794: PUSH
33795: EMPTY
33796: LIST
33797: LIST
33798: PUSH
33799: EMPTY
33800: LIST
33801: LIST
33802: LIST
33803: PUSH
33804: EMPTY
33805: LIST
33806: LIST
33807: PPUSH
33808: CALL_OW 72
33812: ST_TO_ADDR
// if dep then
33813: LD_VAR 0 15
33817: IFFALSE 33953
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
33819: LD_ADDR_VAR 0 14
33823: PUSH
33824: LD_VAR 0 15
33828: PUSH
33829: LD_INT 1
33831: ARRAY
33832: PPUSH
33833: CALL_OW 250
33837: PPUSH
33838: LD_VAR 0 15
33842: PUSH
33843: LD_INT 1
33845: ARRAY
33846: PPUSH
33847: CALL_OW 254
33851: PPUSH
33852: LD_INT 5
33854: PPUSH
33855: CALL_OW 272
33859: PUSH
33860: LD_VAR 0 15
33864: PUSH
33865: LD_INT 1
33867: ARRAY
33868: PPUSH
33869: CALL_OW 251
33873: PPUSH
33874: LD_VAR 0 15
33878: PUSH
33879: LD_INT 1
33881: ARRAY
33882: PPUSH
33883: CALL_OW 254
33887: PPUSH
33888: LD_INT 5
33890: PPUSH
33891: CALL_OW 273
33895: PUSH
33896: EMPTY
33897: LIST
33898: LIST
33899: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
33900: LD_VAR 0 14
33904: PUSH
33905: LD_INT 1
33907: ARRAY
33908: PPUSH
33909: LD_VAR 0 14
33913: PUSH
33914: LD_INT 2
33916: ARRAY
33917: PPUSH
33918: CALL_OW 488
33922: IFFALSE 33953
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
33924: LD_VAR 0 11
33928: PPUSH
33929: LD_VAR 0 14
33933: PUSH
33934: LD_INT 1
33936: ARRAY
33937: PPUSH
33938: LD_VAR 0 14
33942: PUSH
33943: LD_INT 2
33945: ARRAY
33946: PPUSH
33947: CALL_OW 111
// continue ;
33951: GO 33584
// end ; end ; r := GetDir ( tmp ) ;
33953: LD_ADDR_VAR 0 13
33957: PUSH
33958: LD_VAR 0 11
33962: PPUSH
33963: CALL_OW 254
33967: ST_TO_ADDR
// if r = 5 then
33968: LD_VAR 0 13
33972: PUSH
33973: LD_INT 5
33975: EQUAL
33976: IFFALSE 33986
// r := 0 ;
33978: LD_ADDR_VAR 0 13
33982: PUSH
33983: LD_INT 0
33985: ST_TO_ADDR
// for j = r to 5 do
33986: LD_ADDR_VAR 0 8
33990: PUSH
33991: DOUBLE
33992: LD_VAR 0 13
33996: DEC
33997: ST_TO_ADDR
33998: LD_INT 5
34000: PUSH
34001: FOR_TO
34002: IFFALSE 34116
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
34004: LD_ADDR_VAR 0 9
34008: PUSH
34009: LD_VAR 0 11
34013: PPUSH
34014: CALL_OW 250
34018: PPUSH
34019: LD_VAR 0 8
34023: PPUSH
34024: LD_INT 2
34026: PPUSH
34027: CALL_OW 272
34031: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
34032: LD_ADDR_VAR 0 10
34036: PUSH
34037: LD_VAR 0 11
34041: PPUSH
34042: CALL_OW 251
34046: PPUSH
34047: LD_VAR 0 8
34051: PPUSH
34052: LD_INT 2
34054: PPUSH
34055: CALL_OW 273
34059: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
34060: LD_VAR 0 9
34064: PPUSH
34065: LD_VAR 0 10
34069: PPUSH
34070: CALL_OW 488
34074: PUSH
34075: LD_VAR 0 9
34079: PPUSH
34080: LD_VAR 0 10
34084: PPUSH
34085: CALL_OW 428
34089: NOT
34090: AND
34091: IFFALSE 34114
// begin ComMoveXY ( tmp , _x , _y ) ;
34093: LD_VAR 0 11
34097: PPUSH
34098: LD_VAR 0 9
34102: PPUSH
34103: LD_VAR 0 10
34107: PPUSH
34108: CALL_OW 111
// break ;
34112: GO 34116
// end ; end ;
34114: GO 34001
34116: POP
34117: POP
// end ;
34118: GO 33584
34120: POP
34121: POP
// end ;
34122: LD_VAR 0 6
34126: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
34127: LD_INT 0
34129: PPUSH
34130: PPUSH
34131: PPUSH
34132: PPUSH
34133: PPUSH
34134: PPUSH
34135: PPUSH
34136: PPUSH
34137: PPUSH
34138: PPUSH
// result := false ;
34139: LD_ADDR_VAR 0 6
34143: PUSH
34144: LD_INT 0
34146: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
34147: LD_VAR 0 1
34151: NOT
34152: PUSH
34153: LD_VAR 0 1
34157: PPUSH
34158: CALL_OW 266
34162: PUSH
34163: LD_INT 0
34165: PUSH
34166: LD_INT 1
34168: PUSH
34169: EMPTY
34170: LIST
34171: LIST
34172: IN
34173: NOT
34174: OR
34175: PUSH
34176: LD_VAR 0 2
34180: NOT
34181: OR
34182: PUSH
34183: LD_VAR 0 5
34187: PUSH
34188: LD_INT 0
34190: PUSH
34191: LD_INT 1
34193: PUSH
34194: LD_INT 2
34196: PUSH
34197: LD_INT 3
34199: PUSH
34200: LD_INT 4
34202: PUSH
34203: LD_INT 5
34205: PUSH
34206: EMPTY
34207: LIST
34208: LIST
34209: LIST
34210: LIST
34211: LIST
34212: LIST
34213: IN
34214: NOT
34215: OR
34216: PUSH
34217: LD_VAR 0 3
34221: PPUSH
34222: LD_VAR 0 4
34226: PPUSH
34227: CALL_OW 488
34231: NOT
34232: OR
34233: IFFALSE 34237
// exit ;
34235: GO 34954
// pom := GetBase ( depot ) ;
34237: LD_ADDR_VAR 0 10
34241: PUSH
34242: LD_VAR 0 1
34246: PPUSH
34247: CALL_OW 274
34251: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
34252: LD_ADDR_VAR 0 11
34256: PUSH
34257: LD_VAR 0 2
34261: PPUSH
34262: LD_VAR 0 1
34266: PPUSH
34267: CALL_OW 248
34271: PPUSH
34272: CALL_OW 450
34276: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
34277: LD_VAR 0 10
34281: PPUSH
34282: LD_INT 1
34284: PPUSH
34285: CALL_OW 275
34289: PUSH
34290: LD_VAR 0 11
34294: PUSH
34295: LD_INT 1
34297: ARRAY
34298: GREATEREQUAL
34299: PUSH
34300: LD_VAR 0 10
34304: PPUSH
34305: LD_INT 2
34307: PPUSH
34308: CALL_OW 275
34312: PUSH
34313: LD_VAR 0 11
34317: PUSH
34318: LD_INT 2
34320: ARRAY
34321: GREATEREQUAL
34322: AND
34323: PUSH
34324: LD_VAR 0 10
34328: PPUSH
34329: LD_INT 3
34331: PPUSH
34332: CALL_OW 275
34336: PUSH
34337: LD_VAR 0 11
34341: PUSH
34342: LD_INT 3
34344: ARRAY
34345: GREATEREQUAL
34346: AND
34347: NOT
34348: IFFALSE 34352
// exit ;
34350: GO 34954
// if GetBType ( depot ) = b_depot then
34352: LD_VAR 0 1
34356: PPUSH
34357: CALL_OW 266
34361: PUSH
34362: LD_INT 0
34364: EQUAL
34365: IFFALSE 34377
// dist := 28 else
34367: LD_ADDR_VAR 0 14
34371: PUSH
34372: LD_INT 28
34374: ST_TO_ADDR
34375: GO 34385
// dist := 36 ;
34377: LD_ADDR_VAR 0 14
34381: PUSH
34382: LD_INT 36
34384: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
34385: LD_VAR 0 1
34389: PPUSH
34390: LD_VAR 0 3
34394: PPUSH
34395: LD_VAR 0 4
34399: PPUSH
34400: CALL_OW 297
34404: PUSH
34405: LD_VAR 0 14
34409: GREATER
34410: IFFALSE 34414
// exit ;
34412: GO 34954
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
34414: LD_ADDR_VAR 0 12
34418: PUSH
34419: LD_VAR 0 2
34423: PPUSH
34424: LD_VAR 0 3
34428: PPUSH
34429: LD_VAR 0 4
34433: PPUSH
34434: LD_VAR 0 5
34438: PPUSH
34439: LD_VAR 0 1
34443: PPUSH
34444: CALL_OW 248
34448: PPUSH
34449: LD_INT 0
34451: PPUSH
34452: CALL 34959 0 6
34456: ST_TO_ADDR
// if not hexes then
34457: LD_VAR 0 12
34461: NOT
34462: IFFALSE 34466
// exit ;
34464: GO 34954
// hex := GetHexInfo ( x , y ) ;
34466: LD_ADDR_VAR 0 15
34470: PUSH
34471: LD_VAR 0 3
34475: PPUSH
34476: LD_VAR 0 4
34480: PPUSH
34481: CALL_OW 546
34485: ST_TO_ADDR
// if hex [ 1 ] then
34486: LD_VAR 0 15
34490: PUSH
34491: LD_INT 1
34493: ARRAY
34494: IFFALSE 34498
// exit ;
34496: GO 34954
// height := hex [ 2 ] ;
34498: LD_ADDR_VAR 0 13
34502: PUSH
34503: LD_VAR 0 15
34507: PUSH
34508: LD_INT 2
34510: ARRAY
34511: ST_TO_ADDR
// for i = 1 to hexes do
34512: LD_ADDR_VAR 0 7
34516: PUSH
34517: DOUBLE
34518: LD_INT 1
34520: DEC
34521: ST_TO_ADDR
34522: LD_VAR 0 12
34526: PUSH
34527: FOR_TO
34528: IFFALSE 34858
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
34530: LD_VAR 0 12
34534: PUSH
34535: LD_VAR 0 7
34539: ARRAY
34540: PUSH
34541: LD_INT 1
34543: ARRAY
34544: PPUSH
34545: LD_VAR 0 12
34549: PUSH
34550: LD_VAR 0 7
34554: ARRAY
34555: PUSH
34556: LD_INT 2
34558: ARRAY
34559: PPUSH
34560: CALL_OW 488
34564: NOT
34565: PUSH
34566: LD_VAR 0 12
34570: PUSH
34571: LD_VAR 0 7
34575: ARRAY
34576: PUSH
34577: LD_INT 1
34579: ARRAY
34580: PPUSH
34581: LD_VAR 0 12
34585: PUSH
34586: LD_VAR 0 7
34590: ARRAY
34591: PUSH
34592: LD_INT 2
34594: ARRAY
34595: PPUSH
34596: CALL_OW 428
34600: PUSH
34601: LD_INT 0
34603: GREATER
34604: OR
34605: PUSH
34606: LD_VAR 0 12
34610: PUSH
34611: LD_VAR 0 7
34615: ARRAY
34616: PUSH
34617: LD_INT 1
34619: ARRAY
34620: PPUSH
34621: LD_VAR 0 12
34625: PUSH
34626: LD_VAR 0 7
34630: ARRAY
34631: PUSH
34632: LD_INT 2
34634: ARRAY
34635: PPUSH
34636: CALL_OW 351
34640: OR
34641: IFFALSE 34647
// exit ;
34643: POP
34644: POP
34645: GO 34954
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34647: LD_ADDR_VAR 0 8
34651: PUSH
34652: LD_VAR 0 12
34656: PUSH
34657: LD_VAR 0 7
34661: ARRAY
34662: PUSH
34663: LD_INT 1
34665: ARRAY
34666: PPUSH
34667: LD_VAR 0 12
34671: PUSH
34672: LD_VAR 0 7
34676: ARRAY
34677: PUSH
34678: LD_INT 2
34680: ARRAY
34681: PPUSH
34682: CALL_OW 546
34686: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
34687: LD_VAR 0 8
34691: PUSH
34692: LD_INT 1
34694: ARRAY
34695: PUSH
34696: LD_VAR 0 8
34700: PUSH
34701: LD_INT 2
34703: ARRAY
34704: PUSH
34705: LD_VAR 0 13
34709: PUSH
34710: LD_INT 2
34712: PLUS
34713: GREATER
34714: OR
34715: PUSH
34716: LD_VAR 0 8
34720: PUSH
34721: LD_INT 2
34723: ARRAY
34724: PUSH
34725: LD_VAR 0 13
34729: PUSH
34730: LD_INT 2
34732: MINUS
34733: LESS
34734: OR
34735: PUSH
34736: LD_VAR 0 8
34740: PUSH
34741: LD_INT 3
34743: ARRAY
34744: PUSH
34745: LD_INT 0
34747: PUSH
34748: LD_INT 8
34750: PUSH
34751: LD_INT 9
34753: PUSH
34754: LD_INT 10
34756: PUSH
34757: LD_INT 11
34759: PUSH
34760: LD_INT 12
34762: PUSH
34763: LD_INT 13
34765: PUSH
34766: LD_INT 16
34768: PUSH
34769: LD_INT 17
34771: PUSH
34772: LD_INT 18
34774: PUSH
34775: LD_INT 19
34777: PUSH
34778: LD_INT 20
34780: PUSH
34781: LD_INT 21
34783: PUSH
34784: EMPTY
34785: LIST
34786: LIST
34787: LIST
34788: LIST
34789: LIST
34790: LIST
34791: LIST
34792: LIST
34793: LIST
34794: LIST
34795: LIST
34796: LIST
34797: LIST
34798: IN
34799: NOT
34800: OR
34801: PUSH
34802: LD_VAR 0 8
34806: PUSH
34807: LD_INT 5
34809: ARRAY
34810: NOT
34811: OR
34812: PUSH
34813: LD_VAR 0 8
34817: PUSH
34818: LD_INT 6
34820: ARRAY
34821: PUSH
34822: LD_INT 1
34824: PUSH
34825: LD_INT 2
34827: PUSH
34828: LD_INT 7
34830: PUSH
34831: LD_INT 9
34833: PUSH
34834: LD_INT 10
34836: PUSH
34837: LD_INT 11
34839: PUSH
34840: EMPTY
34841: LIST
34842: LIST
34843: LIST
34844: LIST
34845: LIST
34846: LIST
34847: IN
34848: NOT
34849: OR
34850: IFFALSE 34856
// exit ;
34852: POP
34853: POP
34854: GO 34954
// end ;
34856: GO 34527
34858: POP
34859: POP
// side := GetSide ( depot ) ;
34860: LD_ADDR_VAR 0 9
34864: PUSH
34865: LD_VAR 0 1
34869: PPUSH
34870: CALL_OW 255
34874: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
34875: LD_VAR 0 9
34879: PPUSH
34880: LD_VAR 0 3
34884: PPUSH
34885: LD_VAR 0 4
34889: PPUSH
34890: LD_INT 20
34892: PPUSH
34893: CALL 27608 0 4
34897: PUSH
34898: LD_INT 4
34900: ARRAY
34901: IFFALSE 34905
// exit ;
34903: GO 34954
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
34905: LD_VAR 0 2
34909: PUSH
34910: LD_INT 29
34912: PUSH
34913: LD_INT 30
34915: PUSH
34916: EMPTY
34917: LIST
34918: LIST
34919: IN
34920: PUSH
34921: LD_VAR 0 3
34925: PPUSH
34926: LD_VAR 0 4
34930: PPUSH
34931: LD_VAR 0 9
34935: PPUSH
34936: CALL_OW 440
34940: NOT
34941: AND
34942: IFFALSE 34946
// exit ;
34944: GO 34954
// result := true ;
34946: LD_ADDR_VAR 0 6
34950: PUSH
34951: LD_INT 1
34953: ST_TO_ADDR
// end ;
34954: LD_VAR 0 6
34958: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
34959: LD_INT 0
34961: PPUSH
34962: PPUSH
34963: PPUSH
34964: PPUSH
34965: PPUSH
34966: PPUSH
34967: PPUSH
34968: PPUSH
34969: PPUSH
34970: PPUSH
34971: PPUSH
34972: PPUSH
34973: PPUSH
34974: PPUSH
34975: PPUSH
34976: PPUSH
34977: PPUSH
34978: PPUSH
34979: PPUSH
34980: PPUSH
34981: PPUSH
34982: PPUSH
34983: PPUSH
34984: PPUSH
34985: PPUSH
34986: PPUSH
34987: PPUSH
34988: PPUSH
34989: PPUSH
34990: PPUSH
34991: PPUSH
34992: PPUSH
34993: PPUSH
34994: PPUSH
34995: PPUSH
34996: PPUSH
34997: PPUSH
34998: PPUSH
34999: PPUSH
35000: PPUSH
35001: PPUSH
35002: PPUSH
35003: PPUSH
35004: PPUSH
35005: PPUSH
35006: PPUSH
35007: PPUSH
35008: PPUSH
35009: PPUSH
35010: PPUSH
35011: PPUSH
35012: PPUSH
35013: PPUSH
35014: PPUSH
35015: PPUSH
35016: PPUSH
35017: PPUSH
35018: PPUSH
// result = [ ] ;
35019: LD_ADDR_VAR 0 7
35023: PUSH
35024: EMPTY
35025: ST_TO_ADDR
// temp_list = [ ] ;
35026: LD_ADDR_VAR 0 9
35030: PUSH
35031: EMPTY
35032: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
35033: LD_VAR 0 4
35037: PUSH
35038: LD_INT 0
35040: PUSH
35041: LD_INT 1
35043: PUSH
35044: LD_INT 2
35046: PUSH
35047: LD_INT 3
35049: PUSH
35050: LD_INT 4
35052: PUSH
35053: LD_INT 5
35055: PUSH
35056: EMPTY
35057: LIST
35058: LIST
35059: LIST
35060: LIST
35061: LIST
35062: LIST
35063: IN
35064: NOT
35065: PUSH
35066: LD_VAR 0 1
35070: PUSH
35071: LD_INT 0
35073: PUSH
35074: LD_INT 1
35076: PUSH
35077: EMPTY
35078: LIST
35079: LIST
35080: IN
35081: PUSH
35082: LD_VAR 0 5
35086: PUSH
35087: LD_INT 1
35089: PUSH
35090: LD_INT 2
35092: PUSH
35093: LD_INT 3
35095: PUSH
35096: EMPTY
35097: LIST
35098: LIST
35099: LIST
35100: IN
35101: NOT
35102: AND
35103: OR
35104: IFFALSE 35108
// exit ;
35106: GO 53499
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
35108: LD_VAR 0 1
35112: PUSH
35113: LD_INT 6
35115: PUSH
35116: LD_INT 7
35118: PUSH
35119: LD_INT 8
35121: PUSH
35122: LD_INT 13
35124: PUSH
35125: LD_INT 12
35127: PUSH
35128: LD_INT 15
35130: PUSH
35131: LD_INT 11
35133: PUSH
35134: LD_INT 14
35136: PUSH
35137: LD_INT 10
35139: PUSH
35140: EMPTY
35141: LIST
35142: LIST
35143: LIST
35144: LIST
35145: LIST
35146: LIST
35147: LIST
35148: LIST
35149: LIST
35150: IN
35151: IFFALSE 35161
// btype = b_lab ;
35153: LD_ADDR_VAR 0 1
35157: PUSH
35158: LD_INT 6
35160: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
35161: LD_VAR 0 6
35165: PUSH
35166: LD_INT 0
35168: PUSH
35169: LD_INT 1
35171: PUSH
35172: LD_INT 2
35174: PUSH
35175: EMPTY
35176: LIST
35177: LIST
35178: LIST
35179: IN
35180: NOT
35181: PUSH
35182: LD_VAR 0 1
35186: PUSH
35187: LD_INT 0
35189: PUSH
35190: LD_INT 1
35192: PUSH
35193: LD_INT 2
35195: PUSH
35196: LD_INT 3
35198: PUSH
35199: LD_INT 6
35201: PUSH
35202: LD_INT 36
35204: PUSH
35205: LD_INT 4
35207: PUSH
35208: LD_INT 5
35210: PUSH
35211: LD_INT 31
35213: PUSH
35214: LD_INT 32
35216: PUSH
35217: LD_INT 33
35219: PUSH
35220: EMPTY
35221: LIST
35222: LIST
35223: LIST
35224: LIST
35225: LIST
35226: LIST
35227: LIST
35228: LIST
35229: LIST
35230: LIST
35231: LIST
35232: IN
35233: NOT
35234: PUSH
35235: LD_VAR 0 6
35239: PUSH
35240: LD_INT 1
35242: EQUAL
35243: AND
35244: OR
35245: PUSH
35246: LD_VAR 0 1
35250: PUSH
35251: LD_INT 2
35253: PUSH
35254: LD_INT 3
35256: PUSH
35257: EMPTY
35258: LIST
35259: LIST
35260: IN
35261: NOT
35262: PUSH
35263: LD_VAR 0 6
35267: PUSH
35268: LD_INT 2
35270: EQUAL
35271: AND
35272: OR
35273: IFFALSE 35283
// mode = 0 ;
35275: LD_ADDR_VAR 0 6
35279: PUSH
35280: LD_INT 0
35282: ST_TO_ADDR
// case mode of 0 :
35283: LD_VAR 0 6
35287: PUSH
35288: LD_INT 0
35290: DOUBLE
35291: EQUAL
35292: IFTRUE 35296
35294: GO 46749
35296: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35297: LD_ADDR_VAR 0 11
35301: PUSH
35302: LD_INT 0
35304: PUSH
35305: LD_INT 0
35307: PUSH
35308: EMPTY
35309: LIST
35310: LIST
35311: PUSH
35312: LD_INT 0
35314: PUSH
35315: LD_INT 1
35317: NEG
35318: PUSH
35319: EMPTY
35320: LIST
35321: LIST
35322: PUSH
35323: LD_INT 1
35325: PUSH
35326: LD_INT 0
35328: PUSH
35329: EMPTY
35330: LIST
35331: LIST
35332: PUSH
35333: LD_INT 1
35335: PUSH
35336: LD_INT 1
35338: PUSH
35339: EMPTY
35340: LIST
35341: LIST
35342: PUSH
35343: LD_INT 0
35345: PUSH
35346: LD_INT 1
35348: PUSH
35349: EMPTY
35350: LIST
35351: LIST
35352: PUSH
35353: LD_INT 1
35355: NEG
35356: PUSH
35357: LD_INT 0
35359: PUSH
35360: EMPTY
35361: LIST
35362: LIST
35363: PUSH
35364: LD_INT 1
35366: NEG
35367: PUSH
35368: LD_INT 1
35370: NEG
35371: PUSH
35372: EMPTY
35373: LIST
35374: LIST
35375: PUSH
35376: LD_INT 1
35378: NEG
35379: PUSH
35380: LD_INT 2
35382: NEG
35383: PUSH
35384: EMPTY
35385: LIST
35386: LIST
35387: PUSH
35388: LD_INT 0
35390: PUSH
35391: LD_INT 2
35393: NEG
35394: PUSH
35395: EMPTY
35396: LIST
35397: LIST
35398: PUSH
35399: LD_INT 1
35401: PUSH
35402: LD_INT 1
35404: NEG
35405: PUSH
35406: EMPTY
35407: LIST
35408: LIST
35409: PUSH
35410: LD_INT 1
35412: PUSH
35413: LD_INT 2
35415: PUSH
35416: EMPTY
35417: LIST
35418: LIST
35419: PUSH
35420: LD_INT 0
35422: PUSH
35423: LD_INT 2
35425: PUSH
35426: EMPTY
35427: LIST
35428: LIST
35429: PUSH
35430: LD_INT 1
35432: NEG
35433: PUSH
35434: LD_INT 1
35436: PUSH
35437: EMPTY
35438: LIST
35439: LIST
35440: PUSH
35441: LD_INT 1
35443: PUSH
35444: LD_INT 3
35446: PUSH
35447: EMPTY
35448: LIST
35449: LIST
35450: PUSH
35451: LD_INT 0
35453: PUSH
35454: LD_INT 3
35456: PUSH
35457: EMPTY
35458: LIST
35459: LIST
35460: PUSH
35461: LD_INT 1
35463: NEG
35464: PUSH
35465: LD_INT 2
35467: PUSH
35468: EMPTY
35469: LIST
35470: LIST
35471: PUSH
35472: EMPTY
35473: LIST
35474: LIST
35475: LIST
35476: LIST
35477: LIST
35478: LIST
35479: LIST
35480: LIST
35481: LIST
35482: LIST
35483: LIST
35484: LIST
35485: LIST
35486: LIST
35487: LIST
35488: LIST
35489: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35490: LD_ADDR_VAR 0 12
35494: PUSH
35495: LD_INT 0
35497: PUSH
35498: LD_INT 0
35500: PUSH
35501: EMPTY
35502: LIST
35503: LIST
35504: PUSH
35505: LD_INT 0
35507: PUSH
35508: LD_INT 1
35510: NEG
35511: PUSH
35512: EMPTY
35513: LIST
35514: LIST
35515: PUSH
35516: LD_INT 1
35518: PUSH
35519: LD_INT 0
35521: PUSH
35522: EMPTY
35523: LIST
35524: LIST
35525: PUSH
35526: LD_INT 1
35528: PUSH
35529: LD_INT 1
35531: PUSH
35532: EMPTY
35533: LIST
35534: LIST
35535: PUSH
35536: LD_INT 0
35538: PUSH
35539: LD_INT 1
35541: PUSH
35542: EMPTY
35543: LIST
35544: LIST
35545: PUSH
35546: LD_INT 1
35548: NEG
35549: PUSH
35550: LD_INT 0
35552: PUSH
35553: EMPTY
35554: LIST
35555: LIST
35556: PUSH
35557: LD_INT 1
35559: NEG
35560: PUSH
35561: LD_INT 1
35563: NEG
35564: PUSH
35565: EMPTY
35566: LIST
35567: LIST
35568: PUSH
35569: LD_INT 1
35571: PUSH
35572: LD_INT 1
35574: NEG
35575: PUSH
35576: EMPTY
35577: LIST
35578: LIST
35579: PUSH
35580: LD_INT 2
35582: PUSH
35583: LD_INT 0
35585: PUSH
35586: EMPTY
35587: LIST
35588: LIST
35589: PUSH
35590: LD_INT 2
35592: PUSH
35593: LD_INT 1
35595: PUSH
35596: EMPTY
35597: LIST
35598: LIST
35599: PUSH
35600: LD_INT 1
35602: NEG
35603: PUSH
35604: LD_INT 1
35606: PUSH
35607: EMPTY
35608: LIST
35609: LIST
35610: PUSH
35611: LD_INT 2
35613: NEG
35614: PUSH
35615: LD_INT 0
35617: PUSH
35618: EMPTY
35619: LIST
35620: LIST
35621: PUSH
35622: LD_INT 2
35624: NEG
35625: PUSH
35626: LD_INT 1
35628: NEG
35629: PUSH
35630: EMPTY
35631: LIST
35632: LIST
35633: PUSH
35634: LD_INT 2
35636: NEG
35637: PUSH
35638: LD_INT 1
35640: PUSH
35641: EMPTY
35642: LIST
35643: LIST
35644: PUSH
35645: LD_INT 3
35647: NEG
35648: PUSH
35649: LD_INT 0
35651: PUSH
35652: EMPTY
35653: LIST
35654: LIST
35655: PUSH
35656: LD_INT 3
35658: NEG
35659: PUSH
35660: LD_INT 1
35662: NEG
35663: PUSH
35664: EMPTY
35665: LIST
35666: LIST
35667: PUSH
35668: EMPTY
35669: LIST
35670: LIST
35671: LIST
35672: LIST
35673: LIST
35674: LIST
35675: LIST
35676: LIST
35677: LIST
35678: LIST
35679: LIST
35680: LIST
35681: LIST
35682: LIST
35683: LIST
35684: LIST
35685: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35686: LD_ADDR_VAR 0 13
35690: PUSH
35691: LD_INT 0
35693: PUSH
35694: LD_INT 0
35696: PUSH
35697: EMPTY
35698: LIST
35699: LIST
35700: PUSH
35701: LD_INT 0
35703: PUSH
35704: LD_INT 1
35706: NEG
35707: PUSH
35708: EMPTY
35709: LIST
35710: LIST
35711: PUSH
35712: LD_INT 1
35714: PUSH
35715: LD_INT 0
35717: PUSH
35718: EMPTY
35719: LIST
35720: LIST
35721: PUSH
35722: LD_INT 1
35724: PUSH
35725: LD_INT 1
35727: PUSH
35728: EMPTY
35729: LIST
35730: LIST
35731: PUSH
35732: LD_INT 0
35734: PUSH
35735: LD_INT 1
35737: PUSH
35738: EMPTY
35739: LIST
35740: LIST
35741: PUSH
35742: LD_INT 1
35744: NEG
35745: PUSH
35746: LD_INT 0
35748: PUSH
35749: EMPTY
35750: LIST
35751: LIST
35752: PUSH
35753: LD_INT 1
35755: NEG
35756: PUSH
35757: LD_INT 1
35759: NEG
35760: PUSH
35761: EMPTY
35762: LIST
35763: LIST
35764: PUSH
35765: LD_INT 1
35767: NEG
35768: PUSH
35769: LD_INT 2
35771: NEG
35772: PUSH
35773: EMPTY
35774: LIST
35775: LIST
35776: PUSH
35777: LD_INT 2
35779: PUSH
35780: LD_INT 1
35782: PUSH
35783: EMPTY
35784: LIST
35785: LIST
35786: PUSH
35787: LD_INT 2
35789: PUSH
35790: LD_INT 2
35792: PUSH
35793: EMPTY
35794: LIST
35795: LIST
35796: PUSH
35797: LD_INT 1
35799: PUSH
35800: LD_INT 2
35802: PUSH
35803: EMPTY
35804: LIST
35805: LIST
35806: PUSH
35807: LD_INT 2
35809: NEG
35810: PUSH
35811: LD_INT 1
35813: NEG
35814: PUSH
35815: EMPTY
35816: LIST
35817: LIST
35818: PUSH
35819: LD_INT 2
35821: NEG
35822: PUSH
35823: LD_INT 2
35825: NEG
35826: PUSH
35827: EMPTY
35828: LIST
35829: LIST
35830: PUSH
35831: LD_INT 2
35833: NEG
35834: PUSH
35835: LD_INT 3
35837: NEG
35838: PUSH
35839: EMPTY
35840: LIST
35841: LIST
35842: PUSH
35843: LD_INT 3
35845: NEG
35846: PUSH
35847: LD_INT 2
35849: NEG
35850: PUSH
35851: EMPTY
35852: LIST
35853: LIST
35854: PUSH
35855: LD_INT 3
35857: NEG
35858: PUSH
35859: LD_INT 3
35861: NEG
35862: PUSH
35863: EMPTY
35864: LIST
35865: LIST
35866: PUSH
35867: EMPTY
35868: LIST
35869: LIST
35870: LIST
35871: LIST
35872: LIST
35873: LIST
35874: LIST
35875: LIST
35876: LIST
35877: LIST
35878: LIST
35879: LIST
35880: LIST
35881: LIST
35882: LIST
35883: LIST
35884: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35885: LD_ADDR_VAR 0 14
35889: PUSH
35890: LD_INT 0
35892: PUSH
35893: LD_INT 0
35895: PUSH
35896: EMPTY
35897: LIST
35898: LIST
35899: PUSH
35900: LD_INT 0
35902: PUSH
35903: LD_INT 1
35905: NEG
35906: PUSH
35907: EMPTY
35908: LIST
35909: LIST
35910: PUSH
35911: LD_INT 1
35913: PUSH
35914: LD_INT 0
35916: PUSH
35917: EMPTY
35918: LIST
35919: LIST
35920: PUSH
35921: LD_INT 1
35923: PUSH
35924: LD_INT 1
35926: PUSH
35927: EMPTY
35928: LIST
35929: LIST
35930: PUSH
35931: LD_INT 0
35933: PUSH
35934: LD_INT 1
35936: PUSH
35937: EMPTY
35938: LIST
35939: LIST
35940: PUSH
35941: LD_INT 1
35943: NEG
35944: PUSH
35945: LD_INT 0
35947: PUSH
35948: EMPTY
35949: LIST
35950: LIST
35951: PUSH
35952: LD_INT 1
35954: NEG
35955: PUSH
35956: LD_INT 1
35958: NEG
35959: PUSH
35960: EMPTY
35961: LIST
35962: LIST
35963: PUSH
35964: LD_INT 1
35966: NEG
35967: PUSH
35968: LD_INT 2
35970: NEG
35971: PUSH
35972: EMPTY
35973: LIST
35974: LIST
35975: PUSH
35976: LD_INT 0
35978: PUSH
35979: LD_INT 2
35981: NEG
35982: PUSH
35983: EMPTY
35984: LIST
35985: LIST
35986: PUSH
35987: LD_INT 1
35989: PUSH
35990: LD_INT 1
35992: NEG
35993: PUSH
35994: EMPTY
35995: LIST
35996: LIST
35997: PUSH
35998: LD_INT 1
36000: PUSH
36001: LD_INT 2
36003: PUSH
36004: EMPTY
36005: LIST
36006: LIST
36007: PUSH
36008: LD_INT 0
36010: PUSH
36011: LD_INT 2
36013: PUSH
36014: EMPTY
36015: LIST
36016: LIST
36017: PUSH
36018: LD_INT 1
36020: NEG
36021: PUSH
36022: LD_INT 1
36024: PUSH
36025: EMPTY
36026: LIST
36027: LIST
36028: PUSH
36029: LD_INT 1
36031: NEG
36032: PUSH
36033: LD_INT 3
36035: NEG
36036: PUSH
36037: EMPTY
36038: LIST
36039: LIST
36040: PUSH
36041: LD_INT 0
36043: PUSH
36044: LD_INT 3
36046: NEG
36047: PUSH
36048: EMPTY
36049: LIST
36050: LIST
36051: PUSH
36052: LD_INT 1
36054: PUSH
36055: LD_INT 2
36057: NEG
36058: PUSH
36059: EMPTY
36060: LIST
36061: LIST
36062: PUSH
36063: EMPTY
36064: LIST
36065: LIST
36066: LIST
36067: LIST
36068: LIST
36069: LIST
36070: LIST
36071: LIST
36072: LIST
36073: LIST
36074: LIST
36075: LIST
36076: LIST
36077: LIST
36078: LIST
36079: LIST
36080: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36081: LD_ADDR_VAR 0 15
36085: PUSH
36086: LD_INT 0
36088: PUSH
36089: LD_INT 0
36091: PUSH
36092: EMPTY
36093: LIST
36094: LIST
36095: PUSH
36096: LD_INT 0
36098: PUSH
36099: LD_INT 1
36101: NEG
36102: PUSH
36103: EMPTY
36104: LIST
36105: LIST
36106: PUSH
36107: LD_INT 1
36109: PUSH
36110: LD_INT 0
36112: PUSH
36113: EMPTY
36114: LIST
36115: LIST
36116: PUSH
36117: LD_INT 1
36119: PUSH
36120: LD_INT 1
36122: PUSH
36123: EMPTY
36124: LIST
36125: LIST
36126: PUSH
36127: LD_INT 0
36129: PUSH
36130: LD_INT 1
36132: PUSH
36133: EMPTY
36134: LIST
36135: LIST
36136: PUSH
36137: LD_INT 1
36139: NEG
36140: PUSH
36141: LD_INT 0
36143: PUSH
36144: EMPTY
36145: LIST
36146: LIST
36147: PUSH
36148: LD_INT 1
36150: NEG
36151: PUSH
36152: LD_INT 1
36154: NEG
36155: PUSH
36156: EMPTY
36157: LIST
36158: LIST
36159: PUSH
36160: LD_INT 1
36162: PUSH
36163: LD_INT 1
36165: NEG
36166: PUSH
36167: EMPTY
36168: LIST
36169: LIST
36170: PUSH
36171: LD_INT 2
36173: PUSH
36174: LD_INT 0
36176: PUSH
36177: EMPTY
36178: LIST
36179: LIST
36180: PUSH
36181: LD_INT 2
36183: PUSH
36184: LD_INT 1
36186: PUSH
36187: EMPTY
36188: LIST
36189: LIST
36190: PUSH
36191: LD_INT 1
36193: NEG
36194: PUSH
36195: LD_INT 1
36197: PUSH
36198: EMPTY
36199: LIST
36200: LIST
36201: PUSH
36202: LD_INT 2
36204: NEG
36205: PUSH
36206: LD_INT 0
36208: PUSH
36209: EMPTY
36210: LIST
36211: LIST
36212: PUSH
36213: LD_INT 2
36215: NEG
36216: PUSH
36217: LD_INT 1
36219: NEG
36220: PUSH
36221: EMPTY
36222: LIST
36223: LIST
36224: PUSH
36225: LD_INT 2
36227: PUSH
36228: LD_INT 1
36230: NEG
36231: PUSH
36232: EMPTY
36233: LIST
36234: LIST
36235: PUSH
36236: LD_INT 3
36238: PUSH
36239: LD_INT 0
36241: PUSH
36242: EMPTY
36243: LIST
36244: LIST
36245: PUSH
36246: LD_INT 3
36248: PUSH
36249: LD_INT 1
36251: PUSH
36252: EMPTY
36253: LIST
36254: LIST
36255: PUSH
36256: EMPTY
36257: LIST
36258: LIST
36259: LIST
36260: LIST
36261: LIST
36262: LIST
36263: LIST
36264: LIST
36265: LIST
36266: LIST
36267: LIST
36268: LIST
36269: LIST
36270: LIST
36271: LIST
36272: LIST
36273: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36274: LD_ADDR_VAR 0 16
36278: PUSH
36279: LD_INT 0
36281: PUSH
36282: LD_INT 0
36284: PUSH
36285: EMPTY
36286: LIST
36287: LIST
36288: PUSH
36289: LD_INT 0
36291: PUSH
36292: LD_INT 1
36294: NEG
36295: PUSH
36296: EMPTY
36297: LIST
36298: LIST
36299: PUSH
36300: LD_INT 1
36302: PUSH
36303: LD_INT 0
36305: PUSH
36306: EMPTY
36307: LIST
36308: LIST
36309: PUSH
36310: LD_INT 1
36312: PUSH
36313: LD_INT 1
36315: PUSH
36316: EMPTY
36317: LIST
36318: LIST
36319: PUSH
36320: LD_INT 0
36322: PUSH
36323: LD_INT 1
36325: PUSH
36326: EMPTY
36327: LIST
36328: LIST
36329: PUSH
36330: LD_INT 1
36332: NEG
36333: PUSH
36334: LD_INT 0
36336: PUSH
36337: EMPTY
36338: LIST
36339: LIST
36340: PUSH
36341: LD_INT 1
36343: NEG
36344: PUSH
36345: LD_INT 1
36347: NEG
36348: PUSH
36349: EMPTY
36350: LIST
36351: LIST
36352: PUSH
36353: LD_INT 1
36355: NEG
36356: PUSH
36357: LD_INT 2
36359: NEG
36360: PUSH
36361: EMPTY
36362: LIST
36363: LIST
36364: PUSH
36365: LD_INT 2
36367: PUSH
36368: LD_INT 1
36370: PUSH
36371: EMPTY
36372: LIST
36373: LIST
36374: PUSH
36375: LD_INT 2
36377: PUSH
36378: LD_INT 2
36380: PUSH
36381: EMPTY
36382: LIST
36383: LIST
36384: PUSH
36385: LD_INT 1
36387: PUSH
36388: LD_INT 2
36390: PUSH
36391: EMPTY
36392: LIST
36393: LIST
36394: PUSH
36395: LD_INT 2
36397: NEG
36398: PUSH
36399: LD_INT 1
36401: NEG
36402: PUSH
36403: EMPTY
36404: LIST
36405: LIST
36406: PUSH
36407: LD_INT 2
36409: NEG
36410: PUSH
36411: LD_INT 2
36413: NEG
36414: PUSH
36415: EMPTY
36416: LIST
36417: LIST
36418: PUSH
36419: LD_INT 3
36421: PUSH
36422: LD_INT 2
36424: PUSH
36425: EMPTY
36426: LIST
36427: LIST
36428: PUSH
36429: LD_INT 3
36431: PUSH
36432: LD_INT 3
36434: PUSH
36435: EMPTY
36436: LIST
36437: LIST
36438: PUSH
36439: LD_INT 2
36441: PUSH
36442: LD_INT 3
36444: PUSH
36445: EMPTY
36446: LIST
36447: LIST
36448: PUSH
36449: EMPTY
36450: LIST
36451: LIST
36452: LIST
36453: LIST
36454: LIST
36455: LIST
36456: LIST
36457: LIST
36458: LIST
36459: LIST
36460: LIST
36461: LIST
36462: LIST
36463: LIST
36464: LIST
36465: LIST
36466: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36467: LD_ADDR_VAR 0 17
36471: PUSH
36472: LD_INT 0
36474: PUSH
36475: LD_INT 0
36477: PUSH
36478: EMPTY
36479: LIST
36480: LIST
36481: PUSH
36482: LD_INT 0
36484: PUSH
36485: LD_INT 1
36487: NEG
36488: PUSH
36489: EMPTY
36490: LIST
36491: LIST
36492: PUSH
36493: LD_INT 1
36495: PUSH
36496: LD_INT 0
36498: PUSH
36499: EMPTY
36500: LIST
36501: LIST
36502: PUSH
36503: LD_INT 1
36505: PUSH
36506: LD_INT 1
36508: PUSH
36509: EMPTY
36510: LIST
36511: LIST
36512: PUSH
36513: LD_INT 0
36515: PUSH
36516: LD_INT 1
36518: PUSH
36519: EMPTY
36520: LIST
36521: LIST
36522: PUSH
36523: LD_INT 1
36525: NEG
36526: PUSH
36527: LD_INT 0
36529: PUSH
36530: EMPTY
36531: LIST
36532: LIST
36533: PUSH
36534: LD_INT 1
36536: NEG
36537: PUSH
36538: LD_INT 1
36540: NEG
36541: PUSH
36542: EMPTY
36543: LIST
36544: LIST
36545: PUSH
36546: LD_INT 1
36548: NEG
36549: PUSH
36550: LD_INT 2
36552: NEG
36553: PUSH
36554: EMPTY
36555: LIST
36556: LIST
36557: PUSH
36558: LD_INT 0
36560: PUSH
36561: LD_INT 2
36563: NEG
36564: PUSH
36565: EMPTY
36566: LIST
36567: LIST
36568: PUSH
36569: LD_INT 1
36571: PUSH
36572: LD_INT 1
36574: NEG
36575: PUSH
36576: EMPTY
36577: LIST
36578: LIST
36579: PUSH
36580: LD_INT 2
36582: PUSH
36583: LD_INT 0
36585: PUSH
36586: EMPTY
36587: LIST
36588: LIST
36589: PUSH
36590: LD_INT 2
36592: PUSH
36593: LD_INT 1
36595: PUSH
36596: EMPTY
36597: LIST
36598: LIST
36599: PUSH
36600: LD_INT 2
36602: PUSH
36603: LD_INT 2
36605: PUSH
36606: EMPTY
36607: LIST
36608: LIST
36609: PUSH
36610: LD_INT 1
36612: PUSH
36613: LD_INT 2
36615: PUSH
36616: EMPTY
36617: LIST
36618: LIST
36619: PUSH
36620: LD_INT 0
36622: PUSH
36623: LD_INT 2
36625: PUSH
36626: EMPTY
36627: LIST
36628: LIST
36629: PUSH
36630: LD_INT 1
36632: NEG
36633: PUSH
36634: LD_INT 1
36636: PUSH
36637: EMPTY
36638: LIST
36639: LIST
36640: PUSH
36641: LD_INT 2
36643: NEG
36644: PUSH
36645: LD_INT 0
36647: PUSH
36648: EMPTY
36649: LIST
36650: LIST
36651: PUSH
36652: LD_INT 2
36654: NEG
36655: PUSH
36656: LD_INT 1
36658: NEG
36659: PUSH
36660: EMPTY
36661: LIST
36662: LIST
36663: PUSH
36664: LD_INT 2
36666: NEG
36667: PUSH
36668: LD_INT 2
36670: NEG
36671: PUSH
36672: EMPTY
36673: LIST
36674: LIST
36675: PUSH
36676: EMPTY
36677: LIST
36678: LIST
36679: LIST
36680: LIST
36681: LIST
36682: LIST
36683: LIST
36684: LIST
36685: LIST
36686: LIST
36687: LIST
36688: LIST
36689: LIST
36690: LIST
36691: LIST
36692: LIST
36693: LIST
36694: LIST
36695: LIST
36696: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36697: LD_ADDR_VAR 0 18
36701: PUSH
36702: LD_INT 0
36704: PUSH
36705: LD_INT 0
36707: PUSH
36708: EMPTY
36709: LIST
36710: LIST
36711: PUSH
36712: LD_INT 0
36714: PUSH
36715: LD_INT 1
36717: NEG
36718: PUSH
36719: EMPTY
36720: LIST
36721: LIST
36722: PUSH
36723: LD_INT 1
36725: PUSH
36726: LD_INT 0
36728: PUSH
36729: EMPTY
36730: LIST
36731: LIST
36732: PUSH
36733: LD_INT 1
36735: PUSH
36736: LD_INT 1
36738: PUSH
36739: EMPTY
36740: LIST
36741: LIST
36742: PUSH
36743: LD_INT 0
36745: PUSH
36746: LD_INT 1
36748: PUSH
36749: EMPTY
36750: LIST
36751: LIST
36752: PUSH
36753: LD_INT 1
36755: NEG
36756: PUSH
36757: LD_INT 0
36759: PUSH
36760: EMPTY
36761: LIST
36762: LIST
36763: PUSH
36764: LD_INT 1
36766: NEG
36767: PUSH
36768: LD_INT 1
36770: NEG
36771: PUSH
36772: EMPTY
36773: LIST
36774: LIST
36775: PUSH
36776: LD_INT 1
36778: NEG
36779: PUSH
36780: LD_INT 2
36782: NEG
36783: PUSH
36784: EMPTY
36785: LIST
36786: LIST
36787: PUSH
36788: LD_INT 0
36790: PUSH
36791: LD_INT 2
36793: NEG
36794: PUSH
36795: EMPTY
36796: LIST
36797: LIST
36798: PUSH
36799: LD_INT 1
36801: PUSH
36802: LD_INT 1
36804: NEG
36805: PUSH
36806: EMPTY
36807: LIST
36808: LIST
36809: PUSH
36810: LD_INT 2
36812: PUSH
36813: LD_INT 0
36815: PUSH
36816: EMPTY
36817: LIST
36818: LIST
36819: PUSH
36820: LD_INT 2
36822: PUSH
36823: LD_INT 1
36825: PUSH
36826: EMPTY
36827: LIST
36828: LIST
36829: PUSH
36830: LD_INT 2
36832: PUSH
36833: LD_INT 2
36835: PUSH
36836: EMPTY
36837: LIST
36838: LIST
36839: PUSH
36840: LD_INT 1
36842: PUSH
36843: LD_INT 2
36845: PUSH
36846: EMPTY
36847: LIST
36848: LIST
36849: PUSH
36850: LD_INT 0
36852: PUSH
36853: LD_INT 2
36855: PUSH
36856: EMPTY
36857: LIST
36858: LIST
36859: PUSH
36860: LD_INT 1
36862: NEG
36863: PUSH
36864: LD_INT 1
36866: PUSH
36867: EMPTY
36868: LIST
36869: LIST
36870: PUSH
36871: LD_INT 2
36873: NEG
36874: PUSH
36875: LD_INT 0
36877: PUSH
36878: EMPTY
36879: LIST
36880: LIST
36881: PUSH
36882: LD_INT 2
36884: NEG
36885: PUSH
36886: LD_INT 1
36888: NEG
36889: PUSH
36890: EMPTY
36891: LIST
36892: LIST
36893: PUSH
36894: LD_INT 2
36896: NEG
36897: PUSH
36898: LD_INT 2
36900: NEG
36901: PUSH
36902: EMPTY
36903: LIST
36904: LIST
36905: PUSH
36906: EMPTY
36907: LIST
36908: LIST
36909: LIST
36910: LIST
36911: LIST
36912: LIST
36913: LIST
36914: LIST
36915: LIST
36916: LIST
36917: LIST
36918: LIST
36919: LIST
36920: LIST
36921: LIST
36922: LIST
36923: LIST
36924: LIST
36925: LIST
36926: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36927: LD_ADDR_VAR 0 19
36931: PUSH
36932: LD_INT 0
36934: PUSH
36935: LD_INT 0
36937: PUSH
36938: EMPTY
36939: LIST
36940: LIST
36941: PUSH
36942: LD_INT 0
36944: PUSH
36945: LD_INT 1
36947: NEG
36948: PUSH
36949: EMPTY
36950: LIST
36951: LIST
36952: PUSH
36953: LD_INT 1
36955: PUSH
36956: LD_INT 0
36958: PUSH
36959: EMPTY
36960: LIST
36961: LIST
36962: PUSH
36963: LD_INT 1
36965: PUSH
36966: LD_INT 1
36968: PUSH
36969: EMPTY
36970: LIST
36971: LIST
36972: PUSH
36973: LD_INT 0
36975: PUSH
36976: LD_INT 1
36978: PUSH
36979: EMPTY
36980: LIST
36981: LIST
36982: PUSH
36983: LD_INT 1
36985: NEG
36986: PUSH
36987: LD_INT 0
36989: PUSH
36990: EMPTY
36991: LIST
36992: LIST
36993: PUSH
36994: LD_INT 1
36996: NEG
36997: PUSH
36998: LD_INT 1
37000: NEG
37001: PUSH
37002: EMPTY
37003: LIST
37004: LIST
37005: PUSH
37006: LD_INT 1
37008: NEG
37009: PUSH
37010: LD_INT 2
37012: NEG
37013: PUSH
37014: EMPTY
37015: LIST
37016: LIST
37017: PUSH
37018: LD_INT 0
37020: PUSH
37021: LD_INT 2
37023: NEG
37024: PUSH
37025: EMPTY
37026: LIST
37027: LIST
37028: PUSH
37029: LD_INT 1
37031: PUSH
37032: LD_INT 1
37034: NEG
37035: PUSH
37036: EMPTY
37037: LIST
37038: LIST
37039: PUSH
37040: LD_INT 2
37042: PUSH
37043: LD_INT 0
37045: PUSH
37046: EMPTY
37047: LIST
37048: LIST
37049: PUSH
37050: LD_INT 2
37052: PUSH
37053: LD_INT 1
37055: PUSH
37056: EMPTY
37057: LIST
37058: LIST
37059: PUSH
37060: LD_INT 2
37062: PUSH
37063: LD_INT 2
37065: PUSH
37066: EMPTY
37067: LIST
37068: LIST
37069: PUSH
37070: LD_INT 1
37072: PUSH
37073: LD_INT 2
37075: PUSH
37076: EMPTY
37077: LIST
37078: LIST
37079: PUSH
37080: LD_INT 0
37082: PUSH
37083: LD_INT 2
37085: PUSH
37086: EMPTY
37087: LIST
37088: LIST
37089: PUSH
37090: LD_INT 1
37092: NEG
37093: PUSH
37094: LD_INT 1
37096: PUSH
37097: EMPTY
37098: LIST
37099: LIST
37100: PUSH
37101: LD_INT 2
37103: NEG
37104: PUSH
37105: LD_INT 0
37107: PUSH
37108: EMPTY
37109: LIST
37110: LIST
37111: PUSH
37112: LD_INT 2
37114: NEG
37115: PUSH
37116: LD_INT 1
37118: NEG
37119: PUSH
37120: EMPTY
37121: LIST
37122: LIST
37123: PUSH
37124: LD_INT 2
37126: NEG
37127: PUSH
37128: LD_INT 2
37130: NEG
37131: PUSH
37132: EMPTY
37133: LIST
37134: LIST
37135: PUSH
37136: EMPTY
37137: LIST
37138: LIST
37139: LIST
37140: LIST
37141: LIST
37142: LIST
37143: LIST
37144: LIST
37145: LIST
37146: LIST
37147: LIST
37148: LIST
37149: LIST
37150: LIST
37151: LIST
37152: LIST
37153: LIST
37154: LIST
37155: LIST
37156: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37157: LD_ADDR_VAR 0 20
37161: PUSH
37162: LD_INT 0
37164: PUSH
37165: LD_INT 0
37167: PUSH
37168: EMPTY
37169: LIST
37170: LIST
37171: PUSH
37172: LD_INT 0
37174: PUSH
37175: LD_INT 1
37177: NEG
37178: PUSH
37179: EMPTY
37180: LIST
37181: LIST
37182: PUSH
37183: LD_INT 1
37185: PUSH
37186: LD_INT 0
37188: PUSH
37189: EMPTY
37190: LIST
37191: LIST
37192: PUSH
37193: LD_INT 1
37195: PUSH
37196: LD_INT 1
37198: PUSH
37199: EMPTY
37200: LIST
37201: LIST
37202: PUSH
37203: LD_INT 0
37205: PUSH
37206: LD_INT 1
37208: PUSH
37209: EMPTY
37210: LIST
37211: LIST
37212: PUSH
37213: LD_INT 1
37215: NEG
37216: PUSH
37217: LD_INT 0
37219: PUSH
37220: EMPTY
37221: LIST
37222: LIST
37223: PUSH
37224: LD_INT 1
37226: NEG
37227: PUSH
37228: LD_INT 1
37230: NEG
37231: PUSH
37232: EMPTY
37233: LIST
37234: LIST
37235: PUSH
37236: LD_INT 1
37238: NEG
37239: PUSH
37240: LD_INT 2
37242: NEG
37243: PUSH
37244: EMPTY
37245: LIST
37246: LIST
37247: PUSH
37248: LD_INT 0
37250: PUSH
37251: LD_INT 2
37253: NEG
37254: PUSH
37255: EMPTY
37256: LIST
37257: LIST
37258: PUSH
37259: LD_INT 1
37261: PUSH
37262: LD_INT 1
37264: NEG
37265: PUSH
37266: EMPTY
37267: LIST
37268: LIST
37269: PUSH
37270: LD_INT 2
37272: PUSH
37273: LD_INT 0
37275: PUSH
37276: EMPTY
37277: LIST
37278: LIST
37279: PUSH
37280: LD_INT 2
37282: PUSH
37283: LD_INT 1
37285: PUSH
37286: EMPTY
37287: LIST
37288: LIST
37289: PUSH
37290: LD_INT 2
37292: PUSH
37293: LD_INT 2
37295: PUSH
37296: EMPTY
37297: LIST
37298: LIST
37299: PUSH
37300: LD_INT 1
37302: PUSH
37303: LD_INT 2
37305: PUSH
37306: EMPTY
37307: LIST
37308: LIST
37309: PUSH
37310: LD_INT 0
37312: PUSH
37313: LD_INT 2
37315: PUSH
37316: EMPTY
37317: LIST
37318: LIST
37319: PUSH
37320: LD_INT 1
37322: NEG
37323: PUSH
37324: LD_INT 1
37326: PUSH
37327: EMPTY
37328: LIST
37329: LIST
37330: PUSH
37331: LD_INT 2
37333: NEG
37334: PUSH
37335: LD_INT 0
37337: PUSH
37338: EMPTY
37339: LIST
37340: LIST
37341: PUSH
37342: LD_INT 2
37344: NEG
37345: PUSH
37346: LD_INT 1
37348: NEG
37349: PUSH
37350: EMPTY
37351: LIST
37352: LIST
37353: PUSH
37354: LD_INT 2
37356: NEG
37357: PUSH
37358: LD_INT 2
37360: NEG
37361: PUSH
37362: EMPTY
37363: LIST
37364: LIST
37365: PUSH
37366: EMPTY
37367: LIST
37368: LIST
37369: LIST
37370: LIST
37371: LIST
37372: LIST
37373: LIST
37374: LIST
37375: LIST
37376: LIST
37377: LIST
37378: LIST
37379: LIST
37380: LIST
37381: LIST
37382: LIST
37383: LIST
37384: LIST
37385: LIST
37386: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37387: LD_ADDR_VAR 0 21
37391: PUSH
37392: LD_INT 0
37394: PUSH
37395: LD_INT 0
37397: PUSH
37398: EMPTY
37399: LIST
37400: LIST
37401: PUSH
37402: LD_INT 0
37404: PUSH
37405: LD_INT 1
37407: NEG
37408: PUSH
37409: EMPTY
37410: LIST
37411: LIST
37412: PUSH
37413: LD_INT 1
37415: PUSH
37416: LD_INT 0
37418: PUSH
37419: EMPTY
37420: LIST
37421: LIST
37422: PUSH
37423: LD_INT 1
37425: PUSH
37426: LD_INT 1
37428: PUSH
37429: EMPTY
37430: LIST
37431: LIST
37432: PUSH
37433: LD_INT 0
37435: PUSH
37436: LD_INT 1
37438: PUSH
37439: EMPTY
37440: LIST
37441: LIST
37442: PUSH
37443: LD_INT 1
37445: NEG
37446: PUSH
37447: LD_INT 0
37449: PUSH
37450: EMPTY
37451: LIST
37452: LIST
37453: PUSH
37454: LD_INT 1
37456: NEG
37457: PUSH
37458: LD_INT 1
37460: NEG
37461: PUSH
37462: EMPTY
37463: LIST
37464: LIST
37465: PUSH
37466: LD_INT 1
37468: NEG
37469: PUSH
37470: LD_INT 2
37472: NEG
37473: PUSH
37474: EMPTY
37475: LIST
37476: LIST
37477: PUSH
37478: LD_INT 0
37480: PUSH
37481: LD_INT 2
37483: NEG
37484: PUSH
37485: EMPTY
37486: LIST
37487: LIST
37488: PUSH
37489: LD_INT 1
37491: PUSH
37492: LD_INT 1
37494: NEG
37495: PUSH
37496: EMPTY
37497: LIST
37498: LIST
37499: PUSH
37500: LD_INT 2
37502: PUSH
37503: LD_INT 0
37505: PUSH
37506: EMPTY
37507: LIST
37508: LIST
37509: PUSH
37510: LD_INT 2
37512: PUSH
37513: LD_INT 1
37515: PUSH
37516: EMPTY
37517: LIST
37518: LIST
37519: PUSH
37520: LD_INT 2
37522: PUSH
37523: LD_INT 2
37525: PUSH
37526: EMPTY
37527: LIST
37528: LIST
37529: PUSH
37530: LD_INT 1
37532: PUSH
37533: LD_INT 2
37535: PUSH
37536: EMPTY
37537: LIST
37538: LIST
37539: PUSH
37540: LD_INT 0
37542: PUSH
37543: LD_INT 2
37545: PUSH
37546: EMPTY
37547: LIST
37548: LIST
37549: PUSH
37550: LD_INT 1
37552: NEG
37553: PUSH
37554: LD_INT 1
37556: PUSH
37557: EMPTY
37558: LIST
37559: LIST
37560: PUSH
37561: LD_INT 2
37563: NEG
37564: PUSH
37565: LD_INT 0
37567: PUSH
37568: EMPTY
37569: LIST
37570: LIST
37571: PUSH
37572: LD_INT 2
37574: NEG
37575: PUSH
37576: LD_INT 1
37578: NEG
37579: PUSH
37580: EMPTY
37581: LIST
37582: LIST
37583: PUSH
37584: LD_INT 2
37586: NEG
37587: PUSH
37588: LD_INT 2
37590: NEG
37591: PUSH
37592: EMPTY
37593: LIST
37594: LIST
37595: PUSH
37596: EMPTY
37597: LIST
37598: LIST
37599: LIST
37600: LIST
37601: LIST
37602: LIST
37603: LIST
37604: LIST
37605: LIST
37606: LIST
37607: LIST
37608: LIST
37609: LIST
37610: LIST
37611: LIST
37612: LIST
37613: LIST
37614: LIST
37615: LIST
37616: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37617: LD_ADDR_VAR 0 22
37621: PUSH
37622: LD_INT 0
37624: PUSH
37625: LD_INT 0
37627: PUSH
37628: EMPTY
37629: LIST
37630: LIST
37631: PUSH
37632: LD_INT 0
37634: PUSH
37635: LD_INT 1
37637: NEG
37638: PUSH
37639: EMPTY
37640: LIST
37641: LIST
37642: PUSH
37643: LD_INT 1
37645: PUSH
37646: LD_INT 0
37648: PUSH
37649: EMPTY
37650: LIST
37651: LIST
37652: PUSH
37653: LD_INT 1
37655: PUSH
37656: LD_INT 1
37658: PUSH
37659: EMPTY
37660: LIST
37661: LIST
37662: PUSH
37663: LD_INT 0
37665: PUSH
37666: LD_INT 1
37668: PUSH
37669: EMPTY
37670: LIST
37671: LIST
37672: PUSH
37673: LD_INT 1
37675: NEG
37676: PUSH
37677: LD_INT 0
37679: PUSH
37680: EMPTY
37681: LIST
37682: LIST
37683: PUSH
37684: LD_INT 1
37686: NEG
37687: PUSH
37688: LD_INT 1
37690: NEG
37691: PUSH
37692: EMPTY
37693: LIST
37694: LIST
37695: PUSH
37696: LD_INT 1
37698: NEG
37699: PUSH
37700: LD_INT 2
37702: NEG
37703: PUSH
37704: EMPTY
37705: LIST
37706: LIST
37707: PUSH
37708: LD_INT 0
37710: PUSH
37711: LD_INT 2
37713: NEG
37714: PUSH
37715: EMPTY
37716: LIST
37717: LIST
37718: PUSH
37719: LD_INT 1
37721: PUSH
37722: LD_INT 1
37724: NEG
37725: PUSH
37726: EMPTY
37727: LIST
37728: LIST
37729: PUSH
37730: LD_INT 2
37732: PUSH
37733: LD_INT 0
37735: PUSH
37736: EMPTY
37737: LIST
37738: LIST
37739: PUSH
37740: LD_INT 2
37742: PUSH
37743: LD_INT 1
37745: PUSH
37746: EMPTY
37747: LIST
37748: LIST
37749: PUSH
37750: LD_INT 2
37752: PUSH
37753: LD_INT 2
37755: PUSH
37756: EMPTY
37757: LIST
37758: LIST
37759: PUSH
37760: LD_INT 1
37762: PUSH
37763: LD_INT 2
37765: PUSH
37766: EMPTY
37767: LIST
37768: LIST
37769: PUSH
37770: LD_INT 0
37772: PUSH
37773: LD_INT 2
37775: PUSH
37776: EMPTY
37777: LIST
37778: LIST
37779: PUSH
37780: LD_INT 1
37782: NEG
37783: PUSH
37784: LD_INT 1
37786: PUSH
37787: EMPTY
37788: LIST
37789: LIST
37790: PUSH
37791: LD_INT 2
37793: NEG
37794: PUSH
37795: LD_INT 0
37797: PUSH
37798: EMPTY
37799: LIST
37800: LIST
37801: PUSH
37802: LD_INT 2
37804: NEG
37805: PUSH
37806: LD_INT 1
37808: NEG
37809: PUSH
37810: EMPTY
37811: LIST
37812: LIST
37813: PUSH
37814: LD_INT 2
37816: NEG
37817: PUSH
37818: LD_INT 2
37820: NEG
37821: PUSH
37822: EMPTY
37823: LIST
37824: LIST
37825: PUSH
37826: EMPTY
37827: LIST
37828: LIST
37829: LIST
37830: LIST
37831: LIST
37832: LIST
37833: LIST
37834: LIST
37835: LIST
37836: LIST
37837: LIST
37838: LIST
37839: LIST
37840: LIST
37841: LIST
37842: LIST
37843: LIST
37844: LIST
37845: LIST
37846: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
37847: LD_ADDR_VAR 0 23
37851: PUSH
37852: LD_INT 0
37854: PUSH
37855: LD_INT 0
37857: PUSH
37858: EMPTY
37859: LIST
37860: LIST
37861: PUSH
37862: LD_INT 0
37864: PUSH
37865: LD_INT 1
37867: NEG
37868: PUSH
37869: EMPTY
37870: LIST
37871: LIST
37872: PUSH
37873: LD_INT 1
37875: PUSH
37876: LD_INT 0
37878: PUSH
37879: EMPTY
37880: LIST
37881: LIST
37882: PUSH
37883: LD_INT 1
37885: PUSH
37886: LD_INT 1
37888: PUSH
37889: EMPTY
37890: LIST
37891: LIST
37892: PUSH
37893: LD_INT 0
37895: PUSH
37896: LD_INT 1
37898: PUSH
37899: EMPTY
37900: LIST
37901: LIST
37902: PUSH
37903: LD_INT 1
37905: NEG
37906: PUSH
37907: LD_INT 0
37909: PUSH
37910: EMPTY
37911: LIST
37912: LIST
37913: PUSH
37914: LD_INT 1
37916: NEG
37917: PUSH
37918: LD_INT 1
37920: NEG
37921: PUSH
37922: EMPTY
37923: LIST
37924: LIST
37925: PUSH
37926: LD_INT 1
37928: NEG
37929: PUSH
37930: LD_INT 2
37932: NEG
37933: PUSH
37934: EMPTY
37935: LIST
37936: LIST
37937: PUSH
37938: LD_INT 0
37940: PUSH
37941: LD_INT 2
37943: NEG
37944: PUSH
37945: EMPTY
37946: LIST
37947: LIST
37948: PUSH
37949: LD_INT 1
37951: PUSH
37952: LD_INT 1
37954: NEG
37955: PUSH
37956: EMPTY
37957: LIST
37958: LIST
37959: PUSH
37960: LD_INT 2
37962: PUSH
37963: LD_INT 0
37965: PUSH
37966: EMPTY
37967: LIST
37968: LIST
37969: PUSH
37970: LD_INT 2
37972: PUSH
37973: LD_INT 1
37975: PUSH
37976: EMPTY
37977: LIST
37978: LIST
37979: PUSH
37980: LD_INT 2
37982: PUSH
37983: LD_INT 2
37985: PUSH
37986: EMPTY
37987: LIST
37988: LIST
37989: PUSH
37990: LD_INT 1
37992: PUSH
37993: LD_INT 2
37995: PUSH
37996: EMPTY
37997: LIST
37998: LIST
37999: PUSH
38000: LD_INT 0
38002: PUSH
38003: LD_INT 2
38005: PUSH
38006: EMPTY
38007: LIST
38008: LIST
38009: PUSH
38010: LD_INT 1
38012: NEG
38013: PUSH
38014: LD_INT 1
38016: PUSH
38017: EMPTY
38018: LIST
38019: LIST
38020: PUSH
38021: LD_INT 2
38023: NEG
38024: PUSH
38025: LD_INT 0
38027: PUSH
38028: EMPTY
38029: LIST
38030: LIST
38031: PUSH
38032: LD_INT 2
38034: NEG
38035: PUSH
38036: LD_INT 1
38038: NEG
38039: PUSH
38040: EMPTY
38041: LIST
38042: LIST
38043: PUSH
38044: LD_INT 2
38046: NEG
38047: PUSH
38048: LD_INT 2
38050: NEG
38051: PUSH
38052: EMPTY
38053: LIST
38054: LIST
38055: PUSH
38056: LD_INT 2
38058: NEG
38059: PUSH
38060: LD_INT 3
38062: NEG
38063: PUSH
38064: EMPTY
38065: LIST
38066: LIST
38067: PUSH
38068: LD_INT 1
38070: NEG
38071: PUSH
38072: LD_INT 3
38074: NEG
38075: PUSH
38076: EMPTY
38077: LIST
38078: LIST
38079: PUSH
38080: LD_INT 1
38082: PUSH
38083: LD_INT 2
38085: NEG
38086: PUSH
38087: EMPTY
38088: LIST
38089: LIST
38090: PUSH
38091: LD_INT 2
38093: PUSH
38094: LD_INT 1
38096: NEG
38097: PUSH
38098: EMPTY
38099: LIST
38100: LIST
38101: PUSH
38102: EMPTY
38103: LIST
38104: LIST
38105: LIST
38106: LIST
38107: LIST
38108: LIST
38109: LIST
38110: LIST
38111: LIST
38112: LIST
38113: LIST
38114: LIST
38115: LIST
38116: LIST
38117: LIST
38118: LIST
38119: LIST
38120: LIST
38121: LIST
38122: LIST
38123: LIST
38124: LIST
38125: LIST
38126: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
38127: LD_ADDR_VAR 0 24
38131: PUSH
38132: LD_INT 0
38134: PUSH
38135: LD_INT 0
38137: PUSH
38138: EMPTY
38139: LIST
38140: LIST
38141: PUSH
38142: LD_INT 0
38144: PUSH
38145: LD_INT 1
38147: NEG
38148: PUSH
38149: EMPTY
38150: LIST
38151: LIST
38152: PUSH
38153: LD_INT 1
38155: PUSH
38156: LD_INT 0
38158: PUSH
38159: EMPTY
38160: LIST
38161: LIST
38162: PUSH
38163: LD_INT 1
38165: PUSH
38166: LD_INT 1
38168: PUSH
38169: EMPTY
38170: LIST
38171: LIST
38172: PUSH
38173: LD_INT 0
38175: PUSH
38176: LD_INT 1
38178: PUSH
38179: EMPTY
38180: LIST
38181: LIST
38182: PUSH
38183: LD_INT 1
38185: NEG
38186: PUSH
38187: LD_INT 0
38189: PUSH
38190: EMPTY
38191: LIST
38192: LIST
38193: PUSH
38194: LD_INT 1
38196: NEG
38197: PUSH
38198: LD_INT 1
38200: NEG
38201: PUSH
38202: EMPTY
38203: LIST
38204: LIST
38205: PUSH
38206: LD_INT 1
38208: NEG
38209: PUSH
38210: LD_INT 2
38212: NEG
38213: PUSH
38214: EMPTY
38215: LIST
38216: LIST
38217: PUSH
38218: LD_INT 0
38220: PUSH
38221: LD_INT 2
38223: NEG
38224: PUSH
38225: EMPTY
38226: LIST
38227: LIST
38228: PUSH
38229: LD_INT 1
38231: PUSH
38232: LD_INT 1
38234: NEG
38235: PUSH
38236: EMPTY
38237: LIST
38238: LIST
38239: PUSH
38240: LD_INT 2
38242: PUSH
38243: LD_INT 0
38245: PUSH
38246: EMPTY
38247: LIST
38248: LIST
38249: PUSH
38250: LD_INT 2
38252: PUSH
38253: LD_INT 1
38255: PUSH
38256: EMPTY
38257: LIST
38258: LIST
38259: PUSH
38260: LD_INT 2
38262: PUSH
38263: LD_INT 2
38265: PUSH
38266: EMPTY
38267: LIST
38268: LIST
38269: PUSH
38270: LD_INT 1
38272: PUSH
38273: LD_INT 2
38275: PUSH
38276: EMPTY
38277: LIST
38278: LIST
38279: PUSH
38280: LD_INT 0
38282: PUSH
38283: LD_INT 2
38285: PUSH
38286: EMPTY
38287: LIST
38288: LIST
38289: PUSH
38290: LD_INT 1
38292: NEG
38293: PUSH
38294: LD_INT 1
38296: PUSH
38297: EMPTY
38298: LIST
38299: LIST
38300: PUSH
38301: LD_INT 2
38303: NEG
38304: PUSH
38305: LD_INT 0
38307: PUSH
38308: EMPTY
38309: LIST
38310: LIST
38311: PUSH
38312: LD_INT 2
38314: NEG
38315: PUSH
38316: LD_INT 1
38318: NEG
38319: PUSH
38320: EMPTY
38321: LIST
38322: LIST
38323: PUSH
38324: LD_INT 2
38326: NEG
38327: PUSH
38328: LD_INT 2
38330: NEG
38331: PUSH
38332: EMPTY
38333: LIST
38334: LIST
38335: PUSH
38336: LD_INT 1
38338: PUSH
38339: LD_INT 2
38341: NEG
38342: PUSH
38343: EMPTY
38344: LIST
38345: LIST
38346: PUSH
38347: LD_INT 2
38349: PUSH
38350: LD_INT 1
38352: NEG
38353: PUSH
38354: EMPTY
38355: LIST
38356: LIST
38357: PUSH
38358: LD_INT 3
38360: PUSH
38361: LD_INT 1
38363: PUSH
38364: EMPTY
38365: LIST
38366: LIST
38367: PUSH
38368: LD_INT 3
38370: PUSH
38371: LD_INT 2
38373: PUSH
38374: EMPTY
38375: LIST
38376: LIST
38377: PUSH
38378: EMPTY
38379: LIST
38380: LIST
38381: LIST
38382: LIST
38383: LIST
38384: LIST
38385: LIST
38386: LIST
38387: LIST
38388: LIST
38389: LIST
38390: LIST
38391: LIST
38392: LIST
38393: LIST
38394: LIST
38395: LIST
38396: LIST
38397: LIST
38398: LIST
38399: LIST
38400: LIST
38401: LIST
38402: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
38403: LD_ADDR_VAR 0 25
38407: PUSH
38408: LD_INT 0
38410: PUSH
38411: LD_INT 0
38413: PUSH
38414: EMPTY
38415: LIST
38416: LIST
38417: PUSH
38418: LD_INT 0
38420: PUSH
38421: LD_INT 1
38423: NEG
38424: PUSH
38425: EMPTY
38426: LIST
38427: LIST
38428: PUSH
38429: LD_INT 1
38431: PUSH
38432: LD_INT 0
38434: PUSH
38435: EMPTY
38436: LIST
38437: LIST
38438: PUSH
38439: LD_INT 1
38441: PUSH
38442: LD_INT 1
38444: PUSH
38445: EMPTY
38446: LIST
38447: LIST
38448: PUSH
38449: LD_INT 0
38451: PUSH
38452: LD_INT 1
38454: PUSH
38455: EMPTY
38456: LIST
38457: LIST
38458: PUSH
38459: LD_INT 1
38461: NEG
38462: PUSH
38463: LD_INT 0
38465: PUSH
38466: EMPTY
38467: LIST
38468: LIST
38469: PUSH
38470: LD_INT 1
38472: NEG
38473: PUSH
38474: LD_INT 1
38476: NEG
38477: PUSH
38478: EMPTY
38479: LIST
38480: LIST
38481: PUSH
38482: LD_INT 1
38484: NEG
38485: PUSH
38486: LD_INT 2
38488: NEG
38489: PUSH
38490: EMPTY
38491: LIST
38492: LIST
38493: PUSH
38494: LD_INT 0
38496: PUSH
38497: LD_INT 2
38499: NEG
38500: PUSH
38501: EMPTY
38502: LIST
38503: LIST
38504: PUSH
38505: LD_INT 1
38507: PUSH
38508: LD_INT 1
38510: NEG
38511: PUSH
38512: EMPTY
38513: LIST
38514: LIST
38515: PUSH
38516: LD_INT 2
38518: PUSH
38519: LD_INT 0
38521: PUSH
38522: EMPTY
38523: LIST
38524: LIST
38525: PUSH
38526: LD_INT 2
38528: PUSH
38529: LD_INT 1
38531: PUSH
38532: EMPTY
38533: LIST
38534: LIST
38535: PUSH
38536: LD_INT 2
38538: PUSH
38539: LD_INT 2
38541: PUSH
38542: EMPTY
38543: LIST
38544: LIST
38545: PUSH
38546: LD_INT 1
38548: PUSH
38549: LD_INT 2
38551: PUSH
38552: EMPTY
38553: LIST
38554: LIST
38555: PUSH
38556: LD_INT 0
38558: PUSH
38559: LD_INT 2
38561: PUSH
38562: EMPTY
38563: LIST
38564: LIST
38565: PUSH
38566: LD_INT 1
38568: NEG
38569: PUSH
38570: LD_INT 1
38572: PUSH
38573: EMPTY
38574: LIST
38575: LIST
38576: PUSH
38577: LD_INT 2
38579: NEG
38580: PUSH
38581: LD_INT 0
38583: PUSH
38584: EMPTY
38585: LIST
38586: LIST
38587: PUSH
38588: LD_INT 2
38590: NEG
38591: PUSH
38592: LD_INT 1
38594: NEG
38595: PUSH
38596: EMPTY
38597: LIST
38598: LIST
38599: PUSH
38600: LD_INT 2
38602: NEG
38603: PUSH
38604: LD_INT 2
38606: NEG
38607: PUSH
38608: EMPTY
38609: LIST
38610: LIST
38611: PUSH
38612: LD_INT 3
38614: PUSH
38615: LD_INT 1
38617: PUSH
38618: EMPTY
38619: LIST
38620: LIST
38621: PUSH
38622: LD_INT 3
38624: PUSH
38625: LD_INT 2
38627: PUSH
38628: EMPTY
38629: LIST
38630: LIST
38631: PUSH
38632: LD_INT 2
38634: PUSH
38635: LD_INT 3
38637: PUSH
38638: EMPTY
38639: LIST
38640: LIST
38641: PUSH
38642: LD_INT 1
38644: PUSH
38645: LD_INT 3
38647: PUSH
38648: EMPTY
38649: LIST
38650: LIST
38651: PUSH
38652: EMPTY
38653: LIST
38654: LIST
38655: LIST
38656: LIST
38657: LIST
38658: LIST
38659: LIST
38660: LIST
38661: LIST
38662: LIST
38663: LIST
38664: LIST
38665: LIST
38666: LIST
38667: LIST
38668: LIST
38669: LIST
38670: LIST
38671: LIST
38672: LIST
38673: LIST
38674: LIST
38675: LIST
38676: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
38677: LD_ADDR_VAR 0 26
38681: PUSH
38682: LD_INT 0
38684: PUSH
38685: LD_INT 0
38687: PUSH
38688: EMPTY
38689: LIST
38690: LIST
38691: PUSH
38692: LD_INT 0
38694: PUSH
38695: LD_INT 1
38697: NEG
38698: PUSH
38699: EMPTY
38700: LIST
38701: LIST
38702: PUSH
38703: LD_INT 1
38705: PUSH
38706: LD_INT 0
38708: PUSH
38709: EMPTY
38710: LIST
38711: LIST
38712: PUSH
38713: LD_INT 1
38715: PUSH
38716: LD_INT 1
38718: PUSH
38719: EMPTY
38720: LIST
38721: LIST
38722: PUSH
38723: LD_INT 0
38725: PUSH
38726: LD_INT 1
38728: PUSH
38729: EMPTY
38730: LIST
38731: LIST
38732: PUSH
38733: LD_INT 1
38735: NEG
38736: PUSH
38737: LD_INT 0
38739: PUSH
38740: EMPTY
38741: LIST
38742: LIST
38743: PUSH
38744: LD_INT 1
38746: NEG
38747: PUSH
38748: LD_INT 1
38750: NEG
38751: PUSH
38752: EMPTY
38753: LIST
38754: LIST
38755: PUSH
38756: LD_INT 1
38758: NEG
38759: PUSH
38760: LD_INT 2
38762: NEG
38763: PUSH
38764: EMPTY
38765: LIST
38766: LIST
38767: PUSH
38768: LD_INT 0
38770: PUSH
38771: LD_INT 2
38773: NEG
38774: PUSH
38775: EMPTY
38776: LIST
38777: LIST
38778: PUSH
38779: LD_INT 1
38781: PUSH
38782: LD_INT 1
38784: NEG
38785: PUSH
38786: EMPTY
38787: LIST
38788: LIST
38789: PUSH
38790: LD_INT 2
38792: PUSH
38793: LD_INT 0
38795: PUSH
38796: EMPTY
38797: LIST
38798: LIST
38799: PUSH
38800: LD_INT 2
38802: PUSH
38803: LD_INT 1
38805: PUSH
38806: EMPTY
38807: LIST
38808: LIST
38809: PUSH
38810: LD_INT 2
38812: PUSH
38813: LD_INT 2
38815: PUSH
38816: EMPTY
38817: LIST
38818: LIST
38819: PUSH
38820: LD_INT 1
38822: PUSH
38823: LD_INT 2
38825: PUSH
38826: EMPTY
38827: LIST
38828: LIST
38829: PUSH
38830: LD_INT 0
38832: PUSH
38833: LD_INT 2
38835: PUSH
38836: EMPTY
38837: LIST
38838: LIST
38839: PUSH
38840: LD_INT 1
38842: NEG
38843: PUSH
38844: LD_INT 1
38846: PUSH
38847: EMPTY
38848: LIST
38849: LIST
38850: PUSH
38851: LD_INT 2
38853: NEG
38854: PUSH
38855: LD_INT 0
38857: PUSH
38858: EMPTY
38859: LIST
38860: LIST
38861: PUSH
38862: LD_INT 2
38864: NEG
38865: PUSH
38866: LD_INT 1
38868: NEG
38869: PUSH
38870: EMPTY
38871: LIST
38872: LIST
38873: PUSH
38874: LD_INT 2
38876: NEG
38877: PUSH
38878: LD_INT 2
38880: NEG
38881: PUSH
38882: EMPTY
38883: LIST
38884: LIST
38885: PUSH
38886: LD_INT 2
38888: PUSH
38889: LD_INT 3
38891: PUSH
38892: EMPTY
38893: LIST
38894: LIST
38895: PUSH
38896: LD_INT 1
38898: PUSH
38899: LD_INT 3
38901: PUSH
38902: EMPTY
38903: LIST
38904: LIST
38905: PUSH
38906: LD_INT 1
38908: NEG
38909: PUSH
38910: LD_INT 2
38912: PUSH
38913: EMPTY
38914: LIST
38915: LIST
38916: PUSH
38917: LD_INT 2
38919: NEG
38920: PUSH
38921: LD_INT 1
38923: PUSH
38924: EMPTY
38925: LIST
38926: LIST
38927: PUSH
38928: EMPTY
38929: LIST
38930: LIST
38931: LIST
38932: LIST
38933: LIST
38934: LIST
38935: LIST
38936: LIST
38937: LIST
38938: LIST
38939: LIST
38940: LIST
38941: LIST
38942: LIST
38943: LIST
38944: LIST
38945: LIST
38946: LIST
38947: LIST
38948: LIST
38949: LIST
38950: LIST
38951: LIST
38952: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38953: LD_ADDR_VAR 0 27
38957: PUSH
38958: LD_INT 0
38960: PUSH
38961: LD_INT 0
38963: PUSH
38964: EMPTY
38965: LIST
38966: LIST
38967: PUSH
38968: LD_INT 0
38970: PUSH
38971: LD_INT 1
38973: NEG
38974: PUSH
38975: EMPTY
38976: LIST
38977: LIST
38978: PUSH
38979: LD_INT 1
38981: PUSH
38982: LD_INT 0
38984: PUSH
38985: EMPTY
38986: LIST
38987: LIST
38988: PUSH
38989: LD_INT 1
38991: PUSH
38992: LD_INT 1
38994: PUSH
38995: EMPTY
38996: LIST
38997: LIST
38998: PUSH
38999: LD_INT 0
39001: PUSH
39002: LD_INT 1
39004: PUSH
39005: EMPTY
39006: LIST
39007: LIST
39008: PUSH
39009: LD_INT 1
39011: NEG
39012: PUSH
39013: LD_INT 0
39015: PUSH
39016: EMPTY
39017: LIST
39018: LIST
39019: PUSH
39020: LD_INT 1
39022: NEG
39023: PUSH
39024: LD_INT 1
39026: NEG
39027: PUSH
39028: EMPTY
39029: LIST
39030: LIST
39031: PUSH
39032: LD_INT 1
39034: NEG
39035: PUSH
39036: LD_INT 2
39038: NEG
39039: PUSH
39040: EMPTY
39041: LIST
39042: LIST
39043: PUSH
39044: LD_INT 0
39046: PUSH
39047: LD_INT 2
39049: NEG
39050: PUSH
39051: EMPTY
39052: LIST
39053: LIST
39054: PUSH
39055: LD_INT 1
39057: PUSH
39058: LD_INT 1
39060: NEG
39061: PUSH
39062: EMPTY
39063: LIST
39064: LIST
39065: PUSH
39066: LD_INT 2
39068: PUSH
39069: LD_INT 0
39071: PUSH
39072: EMPTY
39073: LIST
39074: LIST
39075: PUSH
39076: LD_INT 2
39078: PUSH
39079: LD_INT 1
39081: PUSH
39082: EMPTY
39083: LIST
39084: LIST
39085: PUSH
39086: LD_INT 2
39088: PUSH
39089: LD_INT 2
39091: PUSH
39092: EMPTY
39093: LIST
39094: LIST
39095: PUSH
39096: LD_INT 1
39098: PUSH
39099: LD_INT 2
39101: PUSH
39102: EMPTY
39103: LIST
39104: LIST
39105: PUSH
39106: LD_INT 0
39108: PUSH
39109: LD_INT 2
39111: PUSH
39112: EMPTY
39113: LIST
39114: LIST
39115: PUSH
39116: LD_INT 1
39118: NEG
39119: PUSH
39120: LD_INT 1
39122: PUSH
39123: EMPTY
39124: LIST
39125: LIST
39126: PUSH
39127: LD_INT 2
39129: NEG
39130: PUSH
39131: LD_INT 0
39133: PUSH
39134: EMPTY
39135: LIST
39136: LIST
39137: PUSH
39138: LD_INT 2
39140: NEG
39141: PUSH
39142: LD_INT 1
39144: NEG
39145: PUSH
39146: EMPTY
39147: LIST
39148: LIST
39149: PUSH
39150: LD_INT 2
39152: NEG
39153: PUSH
39154: LD_INT 2
39156: NEG
39157: PUSH
39158: EMPTY
39159: LIST
39160: LIST
39161: PUSH
39162: LD_INT 1
39164: NEG
39165: PUSH
39166: LD_INT 2
39168: PUSH
39169: EMPTY
39170: LIST
39171: LIST
39172: PUSH
39173: LD_INT 2
39175: NEG
39176: PUSH
39177: LD_INT 1
39179: PUSH
39180: EMPTY
39181: LIST
39182: LIST
39183: PUSH
39184: LD_INT 3
39186: NEG
39187: PUSH
39188: LD_INT 1
39190: NEG
39191: PUSH
39192: EMPTY
39193: LIST
39194: LIST
39195: PUSH
39196: LD_INT 3
39198: NEG
39199: PUSH
39200: LD_INT 2
39202: NEG
39203: PUSH
39204: EMPTY
39205: LIST
39206: LIST
39207: PUSH
39208: EMPTY
39209: LIST
39210: LIST
39211: LIST
39212: LIST
39213: LIST
39214: LIST
39215: LIST
39216: LIST
39217: LIST
39218: LIST
39219: LIST
39220: LIST
39221: LIST
39222: LIST
39223: LIST
39224: LIST
39225: LIST
39226: LIST
39227: LIST
39228: LIST
39229: LIST
39230: LIST
39231: LIST
39232: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39233: LD_ADDR_VAR 0 28
39237: PUSH
39238: LD_INT 0
39240: PUSH
39241: LD_INT 0
39243: PUSH
39244: EMPTY
39245: LIST
39246: LIST
39247: PUSH
39248: LD_INT 0
39250: PUSH
39251: LD_INT 1
39253: NEG
39254: PUSH
39255: EMPTY
39256: LIST
39257: LIST
39258: PUSH
39259: LD_INT 1
39261: PUSH
39262: LD_INT 0
39264: PUSH
39265: EMPTY
39266: LIST
39267: LIST
39268: PUSH
39269: LD_INT 1
39271: PUSH
39272: LD_INT 1
39274: PUSH
39275: EMPTY
39276: LIST
39277: LIST
39278: PUSH
39279: LD_INT 0
39281: PUSH
39282: LD_INT 1
39284: PUSH
39285: EMPTY
39286: LIST
39287: LIST
39288: PUSH
39289: LD_INT 1
39291: NEG
39292: PUSH
39293: LD_INT 0
39295: PUSH
39296: EMPTY
39297: LIST
39298: LIST
39299: PUSH
39300: LD_INT 1
39302: NEG
39303: PUSH
39304: LD_INT 1
39306: NEG
39307: PUSH
39308: EMPTY
39309: LIST
39310: LIST
39311: PUSH
39312: LD_INT 1
39314: NEG
39315: PUSH
39316: LD_INT 2
39318: NEG
39319: PUSH
39320: EMPTY
39321: LIST
39322: LIST
39323: PUSH
39324: LD_INT 0
39326: PUSH
39327: LD_INT 2
39329: NEG
39330: PUSH
39331: EMPTY
39332: LIST
39333: LIST
39334: PUSH
39335: LD_INT 1
39337: PUSH
39338: LD_INT 1
39340: NEG
39341: PUSH
39342: EMPTY
39343: LIST
39344: LIST
39345: PUSH
39346: LD_INT 2
39348: PUSH
39349: LD_INT 0
39351: PUSH
39352: EMPTY
39353: LIST
39354: LIST
39355: PUSH
39356: LD_INT 2
39358: PUSH
39359: LD_INT 1
39361: PUSH
39362: EMPTY
39363: LIST
39364: LIST
39365: PUSH
39366: LD_INT 2
39368: PUSH
39369: LD_INT 2
39371: PUSH
39372: EMPTY
39373: LIST
39374: LIST
39375: PUSH
39376: LD_INT 1
39378: PUSH
39379: LD_INT 2
39381: PUSH
39382: EMPTY
39383: LIST
39384: LIST
39385: PUSH
39386: LD_INT 0
39388: PUSH
39389: LD_INT 2
39391: PUSH
39392: EMPTY
39393: LIST
39394: LIST
39395: PUSH
39396: LD_INT 1
39398: NEG
39399: PUSH
39400: LD_INT 1
39402: PUSH
39403: EMPTY
39404: LIST
39405: LIST
39406: PUSH
39407: LD_INT 2
39409: NEG
39410: PUSH
39411: LD_INT 0
39413: PUSH
39414: EMPTY
39415: LIST
39416: LIST
39417: PUSH
39418: LD_INT 2
39420: NEG
39421: PUSH
39422: LD_INT 1
39424: NEG
39425: PUSH
39426: EMPTY
39427: LIST
39428: LIST
39429: PUSH
39430: LD_INT 2
39432: NEG
39433: PUSH
39434: LD_INT 2
39436: NEG
39437: PUSH
39438: EMPTY
39439: LIST
39440: LIST
39441: PUSH
39442: LD_INT 2
39444: NEG
39445: PUSH
39446: LD_INT 3
39448: NEG
39449: PUSH
39450: EMPTY
39451: LIST
39452: LIST
39453: PUSH
39454: LD_INT 1
39456: NEG
39457: PUSH
39458: LD_INT 3
39460: NEG
39461: PUSH
39462: EMPTY
39463: LIST
39464: LIST
39465: PUSH
39466: LD_INT 3
39468: NEG
39469: PUSH
39470: LD_INT 1
39472: NEG
39473: PUSH
39474: EMPTY
39475: LIST
39476: LIST
39477: PUSH
39478: LD_INT 3
39480: NEG
39481: PUSH
39482: LD_INT 2
39484: NEG
39485: PUSH
39486: EMPTY
39487: LIST
39488: LIST
39489: PUSH
39490: EMPTY
39491: LIST
39492: LIST
39493: LIST
39494: LIST
39495: LIST
39496: LIST
39497: LIST
39498: LIST
39499: LIST
39500: LIST
39501: LIST
39502: LIST
39503: LIST
39504: LIST
39505: LIST
39506: LIST
39507: LIST
39508: LIST
39509: LIST
39510: LIST
39511: LIST
39512: LIST
39513: LIST
39514: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39515: LD_ADDR_VAR 0 29
39519: PUSH
39520: LD_INT 0
39522: PUSH
39523: LD_INT 0
39525: PUSH
39526: EMPTY
39527: LIST
39528: LIST
39529: PUSH
39530: LD_INT 0
39532: PUSH
39533: LD_INT 1
39535: NEG
39536: PUSH
39537: EMPTY
39538: LIST
39539: LIST
39540: PUSH
39541: LD_INT 1
39543: PUSH
39544: LD_INT 0
39546: PUSH
39547: EMPTY
39548: LIST
39549: LIST
39550: PUSH
39551: LD_INT 1
39553: PUSH
39554: LD_INT 1
39556: PUSH
39557: EMPTY
39558: LIST
39559: LIST
39560: PUSH
39561: LD_INT 0
39563: PUSH
39564: LD_INT 1
39566: PUSH
39567: EMPTY
39568: LIST
39569: LIST
39570: PUSH
39571: LD_INT 1
39573: NEG
39574: PUSH
39575: LD_INT 0
39577: PUSH
39578: EMPTY
39579: LIST
39580: LIST
39581: PUSH
39582: LD_INT 1
39584: NEG
39585: PUSH
39586: LD_INT 1
39588: NEG
39589: PUSH
39590: EMPTY
39591: LIST
39592: LIST
39593: PUSH
39594: LD_INT 1
39596: NEG
39597: PUSH
39598: LD_INT 2
39600: NEG
39601: PUSH
39602: EMPTY
39603: LIST
39604: LIST
39605: PUSH
39606: LD_INT 0
39608: PUSH
39609: LD_INT 2
39611: NEG
39612: PUSH
39613: EMPTY
39614: LIST
39615: LIST
39616: PUSH
39617: LD_INT 1
39619: PUSH
39620: LD_INT 1
39622: NEG
39623: PUSH
39624: EMPTY
39625: LIST
39626: LIST
39627: PUSH
39628: LD_INT 2
39630: PUSH
39631: LD_INT 0
39633: PUSH
39634: EMPTY
39635: LIST
39636: LIST
39637: PUSH
39638: LD_INT 2
39640: PUSH
39641: LD_INT 1
39643: PUSH
39644: EMPTY
39645: LIST
39646: LIST
39647: PUSH
39648: LD_INT 1
39650: PUSH
39651: LD_INT 2
39653: PUSH
39654: EMPTY
39655: LIST
39656: LIST
39657: PUSH
39658: LD_INT 0
39660: PUSH
39661: LD_INT 2
39663: PUSH
39664: EMPTY
39665: LIST
39666: LIST
39667: PUSH
39668: LD_INT 1
39670: NEG
39671: PUSH
39672: LD_INT 1
39674: PUSH
39675: EMPTY
39676: LIST
39677: LIST
39678: PUSH
39679: LD_INT 2
39681: NEG
39682: PUSH
39683: LD_INT 1
39685: NEG
39686: PUSH
39687: EMPTY
39688: LIST
39689: LIST
39690: PUSH
39691: LD_INT 2
39693: NEG
39694: PUSH
39695: LD_INT 2
39697: NEG
39698: PUSH
39699: EMPTY
39700: LIST
39701: LIST
39702: PUSH
39703: LD_INT 2
39705: NEG
39706: PUSH
39707: LD_INT 3
39709: NEG
39710: PUSH
39711: EMPTY
39712: LIST
39713: LIST
39714: PUSH
39715: LD_INT 2
39717: PUSH
39718: LD_INT 1
39720: NEG
39721: PUSH
39722: EMPTY
39723: LIST
39724: LIST
39725: PUSH
39726: LD_INT 3
39728: PUSH
39729: LD_INT 1
39731: PUSH
39732: EMPTY
39733: LIST
39734: LIST
39735: PUSH
39736: LD_INT 1
39738: PUSH
39739: LD_INT 3
39741: PUSH
39742: EMPTY
39743: LIST
39744: LIST
39745: PUSH
39746: LD_INT 1
39748: NEG
39749: PUSH
39750: LD_INT 2
39752: PUSH
39753: EMPTY
39754: LIST
39755: LIST
39756: PUSH
39757: LD_INT 3
39759: NEG
39760: PUSH
39761: LD_INT 2
39763: NEG
39764: PUSH
39765: EMPTY
39766: LIST
39767: LIST
39768: PUSH
39769: EMPTY
39770: LIST
39771: LIST
39772: LIST
39773: LIST
39774: LIST
39775: LIST
39776: LIST
39777: LIST
39778: LIST
39779: LIST
39780: LIST
39781: LIST
39782: LIST
39783: LIST
39784: LIST
39785: LIST
39786: LIST
39787: LIST
39788: LIST
39789: LIST
39790: LIST
39791: LIST
39792: LIST
39793: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39794: LD_ADDR_VAR 0 30
39798: PUSH
39799: LD_INT 0
39801: PUSH
39802: LD_INT 0
39804: PUSH
39805: EMPTY
39806: LIST
39807: LIST
39808: PUSH
39809: LD_INT 0
39811: PUSH
39812: LD_INT 1
39814: NEG
39815: PUSH
39816: EMPTY
39817: LIST
39818: LIST
39819: PUSH
39820: LD_INT 1
39822: PUSH
39823: LD_INT 0
39825: PUSH
39826: EMPTY
39827: LIST
39828: LIST
39829: PUSH
39830: LD_INT 1
39832: PUSH
39833: LD_INT 1
39835: PUSH
39836: EMPTY
39837: LIST
39838: LIST
39839: PUSH
39840: LD_INT 0
39842: PUSH
39843: LD_INT 1
39845: PUSH
39846: EMPTY
39847: LIST
39848: LIST
39849: PUSH
39850: LD_INT 1
39852: NEG
39853: PUSH
39854: LD_INT 0
39856: PUSH
39857: EMPTY
39858: LIST
39859: LIST
39860: PUSH
39861: LD_INT 1
39863: NEG
39864: PUSH
39865: LD_INT 1
39867: NEG
39868: PUSH
39869: EMPTY
39870: LIST
39871: LIST
39872: PUSH
39873: LD_INT 1
39875: NEG
39876: PUSH
39877: LD_INT 2
39879: NEG
39880: PUSH
39881: EMPTY
39882: LIST
39883: LIST
39884: PUSH
39885: LD_INT 0
39887: PUSH
39888: LD_INT 2
39890: NEG
39891: PUSH
39892: EMPTY
39893: LIST
39894: LIST
39895: PUSH
39896: LD_INT 1
39898: PUSH
39899: LD_INT 1
39901: NEG
39902: PUSH
39903: EMPTY
39904: LIST
39905: LIST
39906: PUSH
39907: LD_INT 2
39909: PUSH
39910: LD_INT 0
39912: PUSH
39913: EMPTY
39914: LIST
39915: LIST
39916: PUSH
39917: LD_INT 2
39919: PUSH
39920: LD_INT 1
39922: PUSH
39923: EMPTY
39924: LIST
39925: LIST
39926: PUSH
39927: LD_INT 2
39929: PUSH
39930: LD_INT 2
39932: PUSH
39933: EMPTY
39934: LIST
39935: LIST
39936: PUSH
39937: LD_INT 1
39939: PUSH
39940: LD_INT 2
39942: PUSH
39943: EMPTY
39944: LIST
39945: LIST
39946: PUSH
39947: LD_INT 1
39949: NEG
39950: PUSH
39951: LD_INT 1
39953: PUSH
39954: EMPTY
39955: LIST
39956: LIST
39957: PUSH
39958: LD_INT 2
39960: NEG
39961: PUSH
39962: LD_INT 0
39964: PUSH
39965: EMPTY
39966: LIST
39967: LIST
39968: PUSH
39969: LD_INT 2
39971: NEG
39972: PUSH
39973: LD_INT 1
39975: NEG
39976: PUSH
39977: EMPTY
39978: LIST
39979: LIST
39980: PUSH
39981: LD_INT 1
39983: NEG
39984: PUSH
39985: LD_INT 3
39987: NEG
39988: PUSH
39989: EMPTY
39990: LIST
39991: LIST
39992: PUSH
39993: LD_INT 1
39995: PUSH
39996: LD_INT 2
39998: NEG
39999: PUSH
40000: EMPTY
40001: LIST
40002: LIST
40003: PUSH
40004: LD_INT 3
40006: PUSH
40007: LD_INT 2
40009: PUSH
40010: EMPTY
40011: LIST
40012: LIST
40013: PUSH
40014: LD_INT 2
40016: PUSH
40017: LD_INT 3
40019: PUSH
40020: EMPTY
40021: LIST
40022: LIST
40023: PUSH
40024: LD_INT 2
40026: NEG
40027: PUSH
40028: LD_INT 1
40030: PUSH
40031: EMPTY
40032: LIST
40033: LIST
40034: PUSH
40035: LD_INT 3
40037: NEG
40038: PUSH
40039: LD_INT 1
40041: NEG
40042: PUSH
40043: EMPTY
40044: LIST
40045: LIST
40046: PUSH
40047: EMPTY
40048: LIST
40049: LIST
40050: LIST
40051: LIST
40052: LIST
40053: LIST
40054: LIST
40055: LIST
40056: LIST
40057: LIST
40058: LIST
40059: LIST
40060: LIST
40061: LIST
40062: LIST
40063: LIST
40064: LIST
40065: LIST
40066: LIST
40067: LIST
40068: LIST
40069: LIST
40070: LIST
40071: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40072: LD_ADDR_VAR 0 31
40076: PUSH
40077: LD_INT 0
40079: PUSH
40080: LD_INT 0
40082: PUSH
40083: EMPTY
40084: LIST
40085: LIST
40086: PUSH
40087: LD_INT 0
40089: PUSH
40090: LD_INT 1
40092: NEG
40093: PUSH
40094: EMPTY
40095: LIST
40096: LIST
40097: PUSH
40098: LD_INT 1
40100: PUSH
40101: LD_INT 0
40103: PUSH
40104: EMPTY
40105: LIST
40106: LIST
40107: PUSH
40108: LD_INT 1
40110: PUSH
40111: LD_INT 1
40113: PUSH
40114: EMPTY
40115: LIST
40116: LIST
40117: PUSH
40118: LD_INT 0
40120: PUSH
40121: LD_INT 1
40123: PUSH
40124: EMPTY
40125: LIST
40126: LIST
40127: PUSH
40128: LD_INT 1
40130: NEG
40131: PUSH
40132: LD_INT 0
40134: PUSH
40135: EMPTY
40136: LIST
40137: LIST
40138: PUSH
40139: LD_INT 1
40141: NEG
40142: PUSH
40143: LD_INT 1
40145: NEG
40146: PUSH
40147: EMPTY
40148: LIST
40149: LIST
40150: PUSH
40151: LD_INT 1
40153: NEG
40154: PUSH
40155: LD_INT 2
40157: NEG
40158: PUSH
40159: EMPTY
40160: LIST
40161: LIST
40162: PUSH
40163: LD_INT 1
40165: PUSH
40166: LD_INT 1
40168: NEG
40169: PUSH
40170: EMPTY
40171: LIST
40172: LIST
40173: PUSH
40174: LD_INT 2
40176: PUSH
40177: LD_INT 0
40179: PUSH
40180: EMPTY
40181: LIST
40182: LIST
40183: PUSH
40184: LD_INT 2
40186: PUSH
40187: LD_INT 1
40189: PUSH
40190: EMPTY
40191: LIST
40192: LIST
40193: PUSH
40194: LD_INT 2
40196: PUSH
40197: LD_INT 2
40199: PUSH
40200: EMPTY
40201: LIST
40202: LIST
40203: PUSH
40204: LD_INT 1
40206: PUSH
40207: LD_INT 2
40209: PUSH
40210: EMPTY
40211: LIST
40212: LIST
40213: PUSH
40214: LD_INT 0
40216: PUSH
40217: LD_INT 2
40219: PUSH
40220: EMPTY
40221: LIST
40222: LIST
40223: PUSH
40224: LD_INT 1
40226: NEG
40227: PUSH
40228: LD_INT 1
40230: PUSH
40231: EMPTY
40232: LIST
40233: LIST
40234: PUSH
40235: LD_INT 2
40237: NEG
40238: PUSH
40239: LD_INT 1
40241: NEG
40242: PUSH
40243: EMPTY
40244: LIST
40245: LIST
40246: PUSH
40247: LD_INT 2
40249: NEG
40250: PUSH
40251: LD_INT 2
40253: NEG
40254: PUSH
40255: EMPTY
40256: LIST
40257: LIST
40258: PUSH
40259: LD_INT 2
40261: NEG
40262: PUSH
40263: LD_INT 3
40265: NEG
40266: PUSH
40267: EMPTY
40268: LIST
40269: LIST
40270: PUSH
40271: LD_INT 2
40273: PUSH
40274: LD_INT 1
40276: NEG
40277: PUSH
40278: EMPTY
40279: LIST
40280: LIST
40281: PUSH
40282: LD_INT 3
40284: PUSH
40285: LD_INT 1
40287: PUSH
40288: EMPTY
40289: LIST
40290: LIST
40291: PUSH
40292: LD_INT 1
40294: PUSH
40295: LD_INT 3
40297: PUSH
40298: EMPTY
40299: LIST
40300: LIST
40301: PUSH
40302: LD_INT 1
40304: NEG
40305: PUSH
40306: LD_INT 2
40308: PUSH
40309: EMPTY
40310: LIST
40311: LIST
40312: PUSH
40313: LD_INT 3
40315: NEG
40316: PUSH
40317: LD_INT 2
40319: NEG
40320: PUSH
40321: EMPTY
40322: LIST
40323: LIST
40324: PUSH
40325: EMPTY
40326: LIST
40327: LIST
40328: LIST
40329: LIST
40330: LIST
40331: LIST
40332: LIST
40333: LIST
40334: LIST
40335: LIST
40336: LIST
40337: LIST
40338: LIST
40339: LIST
40340: LIST
40341: LIST
40342: LIST
40343: LIST
40344: LIST
40345: LIST
40346: LIST
40347: LIST
40348: LIST
40349: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40350: LD_ADDR_VAR 0 32
40354: PUSH
40355: LD_INT 0
40357: PUSH
40358: LD_INT 0
40360: PUSH
40361: EMPTY
40362: LIST
40363: LIST
40364: PUSH
40365: LD_INT 0
40367: PUSH
40368: LD_INT 1
40370: NEG
40371: PUSH
40372: EMPTY
40373: LIST
40374: LIST
40375: PUSH
40376: LD_INT 1
40378: PUSH
40379: LD_INT 0
40381: PUSH
40382: EMPTY
40383: LIST
40384: LIST
40385: PUSH
40386: LD_INT 1
40388: PUSH
40389: LD_INT 1
40391: PUSH
40392: EMPTY
40393: LIST
40394: LIST
40395: PUSH
40396: LD_INT 0
40398: PUSH
40399: LD_INT 1
40401: PUSH
40402: EMPTY
40403: LIST
40404: LIST
40405: PUSH
40406: LD_INT 1
40408: NEG
40409: PUSH
40410: LD_INT 0
40412: PUSH
40413: EMPTY
40414: LIST
40415: LIST
40416: PUSH
40417: LD_INT 1
40419: NEG
40420: PUSH
40421: LD_INT 1
40423: NEG
40424: PUSH
40425: EMPTY
40426: LIST
40427: LIST
40428: PUSH
40429: LD_INT 1
40431: NEG
40432: PUSH
40433: LD_INT 2
40435: NEG
40436: PUSH
40437: EMPTY
40438: LIST
40439: LIST
40440: PUSH
40441: LD_INT 0
40443: PUSH
40444: LD_INT 2
40446: NEG
40447: PUSH
40448: EMPTY
40449: LIST
40450: LIST
40451: PUSH
40452: LD_INT 1
40454: PUSH
40455: LD_INT 1
40457: NEG
40458: PUSH
40459: EMPTY
40460: LIST
40461: LIST
40462: PUSH
40463: LD_INT 2
40465: PUSH
40466: LD_INT 1
40468: PUSH
40469: EMPTY
40470: LIST
40471: LIST
40472: PUSH
40473: LD_INT 2
40475: PUSH
40476: LD_INT 2
40478: PUSH
40479: EMPTY
40480: LIST
40481: LIST
40482: PUSH
40483: LD_INT 1
40485: PUSH
40486: LD_INT 2
40488: PUSH
40489: EMPTY
40490: LIST
40491: LIST
40492: PUSH
40493: LD_INT 0
40495: PUSH
40496: LD_INT 2
40498: PUSH
40499: EMPTY
40500: LIST
40501: LIST
40502: PUSH
40503: LD_INT 1
40505: NEG
40506: PUSH
40507: LD_INT 1
40509: PUSH
40510: EMPTY
40511: LIST
40512: LIST
40513: PUSH
40514: LD_INT 2
40516: NEG
40517: PUSH
40518: LD_INT 0
40520: PUSH
40521: EMPTY
40522: LIST
40523: LIST
40524: PUSH
40525: LD_INT 2
40527: NEG
40528: PUSH
40529: LD_INT 1
40531: NEG
40532: PUSH
40533: EMPTY
40534: LIST
40535: LIST
40536: PUSH
40537: LD_INT 1
40539: NEG
40540: PUSH
40541: LD_INT 3
40543: NEG
40544: PUSH
40545: EMPTY
40546: LIST
40547: LIST
40548: PUSH
40549: LD_INT 1
40551: PUSH
40552: LD_INT 2
40554: NEG
40555: PUSH
40556: EMPTY
40557: LIST
40558: LIST
40559: PUSH
40560: LD_INT 3
40562: PUSH
40563: LD_INT 2
40565: PUSH
40566: EMPTY
40567: LIST
40568: LIST
40569: PUSH
40570: LD_INT 2
40572: PUSH
40573: LD_INT 3
40575: PUSH
40576: EMPTY
40577: LIST
40578: LIST
40579: PUSH
40580: LD_INT 2
40582: NEG
40583: PUSH
40584: LD_INT 1
40586: PUSH
40587: EMPTY
40588: LIST
40589: LIST
40590: PUSH
40591: LD_INT 3
40593: NEG
40594: PUSH
40595: LD_INT 1
40597: NEG
40598: PUSH
40599: EMPTY
40600: LIST
40601: LIST
40602: PUSH
40603: EMPTY
40604: LIST
40605: LIST
40606: LIST
40607: LIST
40608: LIST
40609: LIST
40610: LIST
40611: LIST
40612: LIST
40613: LIST
40614: LIST
40615: LIST
40616: LIST
40617: LIST
40618: LIST
40619: LIST
40620: LIST
40621: LIST
40622: LIST
40623: LIST
40624: LIST
40625: LIST
40626: LIST
40627: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40628: LD_ADDR_VAR 0 33
40632: PUSH
40633: LD_INT 0
40635: PUSH
40636: LD_INT 0
40638: PUSH
40639: EMPTY
40640: LIST
40641: LIST
40642: PUSH
40643: LD_INT 0
40645: PUSH
40646: LD_INT 1
40648: NEG
40649: PUSH
40650: EMPTY
40651: LIST
40652: LIST
40653: PUSH
40654: LD_INT 1
40656: PUSH
40657: LD_INT 0
40659: PUSH
40660: EMPTY
40661: LIST
40662: LIST
40663: PUSH
40664: LD_INT 1
40666: PUSH
40667: LD_INT 1
40669: PUSH
40670: EMPTY
40671: LIST
40672: LIST
40673: PUSH
40674: LD_INT 0
40676: PUSH
40677: LD_INT 1
40679: PUSH
40680: EMPTY
40681: LIST
40682: LIST
40683: PUSH
40684: LD_INT 1
40686: NEG
40687: PUSH
40688: LD_INT 0
40690: PUSH
40691: EMPTY
40692: LIST
40693: LIST
40694: PUSH
40695: LD_INT 1
40697: NEG
40698: PUSH
40699: LD_INT 1
40701: NEG
40702: PUSH
40703: EMPTY
40704: LIST
40705: LIST
40706: PUSH
40707: LD_INT 1
40709: NEG
40710: PUSH
40711: LD_INT 2
40713: NEG
40714: PUSH
40715: EMPTY
40716: LIST
40717: LIST
40718: PUSH
40719: LD_INT 1
40721: PUSH
40722: LD_INT 1
40724: NEG
40725: PUSH
40726: EMPTY
40727: LIST
40728: LIST
40729: PUSH
40730: LD_INT 2
40732: PUSH
40733: LD_INT 0
40735: PUSH
40736: EMPTY
40737: LIST
40738: LIST
40739: PUSH
40740: LD_INT 2
40742: PUSH
40743: LD_INT 1
40745: PUSH
40746: EMPTY
40747: LIST
40748: LIST
40749: PUSH
40750: LD_INT 1
40752: PUSH
40753: LD_INT 2
40755: PUSH
40756: EMPTY
40757: LIST
40758: LIST
40759: PUSH
40760: LD_INT 0
40762: PUSH
40763: LD_INT 2
40765: PUSH
40766: EMPTY
40767: LIST
40768: LIST
40769: PUSH
40770: LD_INT 1
40772: NEG
40773: PUSH
40774: LD_INT 1
40776: PUSH
40777: EMPTY
40778: LIST
40779: LIST
40780: PUSH
40781: LD_INT 2
40783: NEG
40784: PUSH
40785: LD_INT 0
40787: PUSH
40788: EMPTY
40789: LIST
40790: LIST
40791: PUSH
40792: LD_INT 2
40794: NEG
40795: PUSH
40796: LD_INT 1
40798: NEG
40799: PUSH
40800: EMPTY
40801: LIST
40802: LIST
40803: PUSH
40804: LD_INT 2
40806: NEG
40807: PUSH
40808: LD_INT 2
40810: NEG
40811: PUSH
40812: EMPTY
40813: LIST
40814: LIST
40815: PUSH
40816: LD_INT 2
40818: NEG
40819: PUSH
40820: LD_INT 3
40822: NEG
40823: PUSH
40824: EMPTY
40825: LIST
40826: LIST
40827: PUSH
40828: LD_INT 2
40830: PUSH
40831: LD_INT 1
40833: NEG
40834: PUSH
40835: EMPTY
40836: LIST
40837: LIST
40838: PUSH
40839: LD_INT 3
40841: PUSH
40842: LD_INT 1
40844: PUSH
40845: EMPTY
40846: LIST
40847: LIST
40848: PUSH
40849: LD_INT 1
40851: PUSH
40852: LD_INT 3
40854: PUSH
40855: EMPTY
40856: LIST
40857: LIST
40858: PUSH
40859: LD_INT 1
40861: NEG
40862: PUSH
40863: LD_INT 2
40865: PUSH
40866: EMPTY
40867: LIST
40868: LIST
40869: PUSH
40870: LD_INT 3
40872: NEG
40873: PUSH
40874: LD_INT 2
40876: NEG
40877: PUSH
40878: EMPTY
40879: LIST
40880: LIST
40881: PUSH
40882: EMPTY
40883: LIST
40884: LIST
40885: LIST
40886: LIST
40887: LIST
40888: LIST
40889: LIST
40890: LIST
40891: LIST
40892: LIST
40893: LIST
40894: LIST
40895: LIST
40896: LIST
40897: LIST
40898: LIST
40899: LIST
40900: LIST
40901: LIST
40902: LIST
40903: LIST
40904: LIST
40905: LIST
40906: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40907: LD_ADDR_VAR 0 34
40911: PUSH
40912: LD_INT 0
40914: PUSH
40915: LD_INT 0
40917: PUSH
40918: EMPTY
40919: LIST
40920: LIST
40921: PUSH
40922: LD_INT 0
40924: PUSH
40925: LD_INT 1
40927: NEG
40928: PUSH
40929: EMPTY
40930: LIST
40931: LIST
40932: PUSH
40933: LD_INT 1
40935: PUSH
40936: LD_INT 0
40938: PUSH
40939: EMPTY
40940: LIST
40941: LIST
40942: PUSH
40943: LD_INT 1
40945: PUSH
40946: LD_INT 1
40948: PUSH
40949: EMPTY
40950: LIST
40951: LIST
40952: PUSH
40953: LD_INT 0
40955: PUSH
40956: LD_INT 1
40958: PUSH
40959: EMPTY
40960: LIST
40961: LIST
40962: PUSH
40963: LD_INT 1
40965: NEG
40966: PUSH
40967: LD_INT 0
40969: PUSH
40970: EMPTY
40971: LIST
40972: LIST
40973: PUSH
40974: LD_INT 1
40976: NEG
40977: PUSH
40978: LD_INT 1
40980: NEG
40981: PUSH
40982: EMPTY
40983: LIST
40984: LIST
40985: PUSH
40986: LD_INT 1
40988: NEG
40989: PUSH
40990: LD_INT 2
40992: NEG
40993: PUSH
40994: EMPTY
40995: LIST
40996: LIST
40997: PUSH
40998: LD_INT 0
41000: PUSH
41001: LD_INT 2
41003: NEG
41004: PUSH
41005: EMPTY
41006: LIST
41007: LIST
41008: PUSH
41009: LD_INT 1
41011: PUSH
41012: LD_INT 1
41014: NEG
41015: PUSH
41016: EMPTY
41017: LIST
41018: LIST
41019: PUSH
41020: LD_INT 2
41022: PUSH
41023: LD_INT 1
41025: PUSH
41026: EMPTY
41027: LIST
41028: LIST
41029: PUSH
41030: LD_INT 2
41032: PUSH
41033: LD_INT 2
41035: PUSH
41036: EMPTY
41037: LIST
41038: LIST
41039: PUSH
41040: LD_INT 1
41042: PUSH
41043: LD_INT 2
41045: PUSH
41046: EMPTY
41047: LIST
41048: LIST
41049: PUSH
41050: LD_INT 1
41052: NEG
41053: PUSH
41054: LD_INT 1
41056: PUSH
41057: EMPTY
41058: LIST
41059: LIST
41060: PUSH
41061: LD_INT 2
41063: NEG
41064: PUSH
41065: LD_INT 0
41067: PUSH
41068: EMPTY
41069: LIST
41070: LIST
41071: PUSH
41072: LD_INT 2
41074: NEG
41075: PUSH
41076: LD_INT 1
41078: NEG
41079: PUSH
41080: EMPTY
41081: LIST
41082: LIST
41083: PUSH
41084: LD_INT 2
41086: NEG
41087: PUSH
41088: LD_INT 2
41090: NEG
41091: PUSH
41092: EMPTY
41093: LIST
41094: LIST
41095: PUSH
41096: LD_INT 1
41098: NEG
41099: PUSH
41100: LD_INT 3
41102: NEG
41103: PUSH
41104: EMPTY
41105: LIST
41106: LIST
41107: PUSH
41108: LD_INT 1
41110: PUSH
41111: LD_INT 2
41113: NEG
41114: PUSH
41115: EMPTY
41116: LIST
41117: LIST
41118: PUSH
41119: LD_INT 3
41121: PUSH
41122: LD_INT 2
41124: PUSH
41125: EMPTY
41126: LIST
41127: LIST
41128: PUSH
41129: LD_INT 2
41131: PUSH
41132: LD_INT 3
41134: PUSH
41135: EMPTY
41136: LIST
41137: LIST
41138: PUSH
41139: LD_INT 2
41141: NEG
41142: PUSH
41143: LD_INT 1
41145: PUSH
41146: EMPTY
41147: LIST
41148: LIST
41149: PUSH
41150: LD_INT 3
41152: NEG
41153: PUSH
41154: LD_INT 1
41156: NEG
41157: PUSH
41158: EMPTY
41159: LIST
41160: LIST
41161: PUSH
41162: EMPTY
41163: LIST
41164: LIST
41165: LIST
41166: LIST
41167: LIST
41168: LIST
41169: LIST
41170: LIST
41171: LIST
41172: LIST
41173: LIST
41174: LIST
41175: LIST
41176: LIST
41177: LIST
41178: LIST
41179: LIST
41180: LIST
41181: LIST
41182: LIST
41183: LIST
41184: LIST
41185: LIST
41186: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41187: LD_ADDR_VAR 0 35
41191: PUSH
41192: LD_INT 0
41194: PUSH
41195: LD_INT 0
41197: PUSH
41198: EMPTY
41199: LIST
41200: LIST
41201: PUSH
41202: LD_INT 0
41204: PUSH
41205: LD_INT 1
41207: NEG
41208: PUSH
41209: EMPTY
41210: LIST
41211: LIST
41212: PUSH
41213: LD_INT 1
41215: PUSH
41216: LD_INT 0
41218: PUSH
41219: EMPTY
41220: LIST
41221: LIST
41222: PUSH
41223: LD_INT 1
41225: PUSH
41226: LD_INT 1
41228: PUSH
41229: EMPTY
41230: LIST
41231: LIST
41232: PUSH
41233: LD_INT 0
41235: PUSH
41236: LD_INT 1
41238: PUSH
41239: EMPTY
41240: LIST
41241: LIST
41242: PUSH
41243: LD_INT 1
41245: NEG
41246: PUSH
41247: LD_INT 0
41249: PUSH
41250: EMPTY
41251: LIST
41252: LIST
41253: PUSH
41254: LD_INT 1
41256: NEG
41257: PUSH
41258: LD_INT 1
41260: NEG
41261: PUSH
41262: EMPTY
41263: LIST
41264: LIST
41265: PUSH
41266: LD_INT 2
41268: PUSH
41269: LD_INT 1
41271: PUSH
41272: EMPTY
41273: LIST
41274: LIST
41275: PUSH
41276: LD_INT 2
41278: NEG
41279: PUSH
41280: LD_INT 1
41282: NEG
41283: PUSH
41284: EMPTY
41285: LIST
41286: LIST
41287: PUSH
41288: EMPTY
41289: LIST
41290: LIST
41291: LIST
41292: LIST
41293: LIST
41294: LIST
41295: LIST
41296: LIST
41297: LIST
41298: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41299: LD_ADDR_VAR 0 36
41303: PUSH
41304: LD_INT 0
41306: PUSH
41307: LD_INT 0
41309: PUSH
41310: EMPTY
41311: LIST
41312: LIST
41313: PUSH
41314: LD_INT 0
41316: PUSH
41317: LD_INT 1
41319: NEG
41320: PUSH
41321: EMPTY
41322: LIST
41323: LIST
41324: PUSH
41325: LD_INT 1
41327: PUSH
41328: LD_INT 0
41330: PUSH
41331: EMPTY
41332: LIST
41333: LIST
41334: PUSH
41335: LD_INT 1
41337: PUSH
41338: LD_INT 1
41340: PUSH
41341: EMPTY
41342: LIST
41343: LIST
41344: PUSH
41345: LD_INT 0
41347: PUSH
41348: LD_INT 1
41350: PUSH
41351: EMPTY
41352: LIST
41353: LIST
41354: PUSH
41355: LD_INT 1
41357: NEG
41358: PUSH
41359: LD_INT 0
41361: PUSH
41362: EMPTY
41363: LIST
41364: LIST
41365: PUSH
41366: LD_INT 1
41368: NEG
41369: PUSH
41370: LD_INT 1
41372: NEG
41373: PUSH
41374: EMPTY
41375: LIST
41376: LIST
41377: PUSH
41378: LD_INT 1
41380: NEG
41381: PUSH
41382: LD_INT 2
41384: NEG
41385: PUSH
41386: EMPTY
41387: LIST
41388: LIST
41389: PUSH
41390: LD_INT 1
41392: PUSH
41393: LD_INT 2
41395: PUSH
41396: EMPTY
41397: LIST
41398: LIST
41399: PUSH
41400: EMPTY
41401: LIST
41402: LIST
41403: LIST
41404: LIST
41405: LIST
41406: LIST
41407: LIST
41408: LIST
41409: LIST
41410: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41411: LD_ADDR_VAR 0 37
41415: PUSH
41416: LD_INT 0
41418: PUSH
41419: LD_INT 0
41421: PUSH
41422: EMPTY
41423: LIST
41424: LIST
41425: PUSH
41426: LD_INT 0
41428: PUSH
41429: LD_INT 1
41431: NEG
41432: PUSH
41433: EMPTY
41434: LIST
41435: LIST
41436: PUSH
41437: LD_INT 1
41439: PUSH
41440: LD_INT 0
41442: PUSH
41443: EMPTY
41444: LIST
41445: LIST
41446: PUSH
41447: LD_INT 1
41449: PUSH
41450: LD_INT 1
41452: PUSH
41453: EMPTY
41454: LIST
41455: LIST
41456: PUSH
41457: LD_INT 0
41459: PUSH
41460: LD_INT 1
41462: PUSH
41463: EMPTY
41464: LIST
41465: LIST
41466: PUSH
41467: LD_INT 1
41469: NEG
41470: PUSH
41471: LD_INT 0
41473: PUSH
41474: EMPTY
41475: LIST
41476: LIST
41477: PUSH
41478: LD_INT 1
41480: NEG
41481: PUSH
41482: LD_INT 1
41484: NEG
41485: PUSH
41486: EMPTY
41487: LIST
41488: LIST
41489: PUSH
41490: LD_INT 1
41492: PUSH
41493: LD_INT 1
41495: NEG
41496: PUSH
41497: EMPTY
41498: LIST
41499: LIST
41500: PUSH
41501: LD_INT 1
41503: NEG
41504: PUSH
41505: LD_INT 1
41507: PUSH
41508: EMPTY
41509: LIST
41510: LIST
41511: PUSH
41512: EMPTY
41513: LIST
41514: LIST
41515: LIST
41516: LIST
41517: LIST
41518: LIST
41519: LIST
41520: LIST
41521: LIST
41522: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41523: LD_ADDR_VAR 0 38
41527: PUSH
41528: LD_INT 0
41530: PUSH
41531: LD_INT 0
41533: PUSH
41534: EMPTY
41535: LIST
41536: LIST
41537: PUSH
41538: LD_INT 0
41540: PUSH
41541: LD_INT 1
41543: NEG
41544: PUSH
41545: EMPTY
41546: LIST
41547: LIST
41548: PUSH
41549: LD_INT 1
41551: PUSH
41552: LD_INT 0
41554: PUSH
41555: EMPTY
41556: LIST
41557: LIST
41558: PUSH
41559: LD_INT 1
41561: PUSH
41562: LD_INT 1
41564: PUSH
41565: EMPTY
41566: LIST
41567: LIST
41568: PUSH
41569: LD_INT 0
41571: PUSH
41572: LD_INT 1
41574: PUSH
41575: EMPTY
41576: LIST
41577: LIST
41578: PUSH
41579: LD_INT 1
41581: NEG
41582: PUSH
41583: LD_INT 0
41585: PUSH
41586: EMPTY
41587: LIST
41588: LIST
41589: PUSH
41590: LD_INT 1
41592: NEG
41593: PUSH
41594: LD_INT 1
41596: NEG
41597: PUSH
41598: EMPTY
41599: LIST
41600: LIST
41601: PUSH
41602: LD_INT 2
41604: PUSH
41605: LD_INT 1
41607: PUSH
41608: EMPTY
41609: LIST
41610: LIST
41611: PUSH
41612: LD_INT 2
41614: NEG
41615: PUSH
41616: LD_INT 1
41618: NEG
41619: PUSH
41620: EMPTY
41621: LIST
41622: LIST
41623: PUSH
41624: EMPTY
41625: LIST
41626: LIST
41627: LIST
41628: LIST
41629: LIST
41630: LIST
41631: LIST
41632: LIST
41633: LIST
41634: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41635: LD_ADDR_VAR 0 39
41639: PUSH
41640: LD_INT 0
41642: PUSH
41643: LD_INT 0
41645: PUSH
41646: EMPTY
41647: LIST
41648: LIST
41649: PUSH
41650: LD_INT 0
41652: PUSH
41653: LD_INT 1
41655: NEG
41656: PUSH
41657: EMPTY
41658: LIST
41659: LIST
41660: PUSH
41661: LD_INT 1
41663: PUSH
41664: LD_INT 0
41666: PUSH
41667: EMPTY
41668: LIST
41669: LIST
41670: PUSH
41671: LD_INT 1
41673: PUSH
41674: LD_INT 1
41676: PUSH
41677: EMPTY
41678: LIST
41679: LIST
41680: PUSH
41681: LD_INT 0
41683: PUSH
41684: LD_INT 1
41686: PUSH
41687: EMPTY
41688: LIST
41689: LIST
41690: PUSH
41691: LD_INT 1
41693: NEG
41694: PUSH
41695: LD_INT 0
41697: PUSH
41698: EMPTY
41699: LIST
41700: LIST
41701: PUSH
41702: LD_INT 1
41704: NEG
41705: PUSH
41706: LD_INT 1
41708: NEG
41709: PUSH
41710: EMPTY
41711: LIST
41712: LIST
41713: PUSH
41714: LD_INT 1
41716: NEG
41717: PUSH
41718: LD_INT 2
41720: NEG
41721: PUSH
41722: EMPTY
41723: LIST
41724: LIST
41725: PUSH
41726: LD_INT 1
41728: PUSH
41729: LD_INT 2
41731: PUSH
41732: EMPTY
41733: LIST
41734: LIST
41735: PUSH
41736: EMPTY
41737: LIST
41738: LIST
41739: LIST
41740: LIST
41741: LIST
41742: LIST
41743: LIST
41744: LIST
41745: LIST
41746: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41747: LD_ADDR_VAR 0 40
41751: PUSH
41752: LD_INT 0
41754: PUSH
41755: LD_INT 0
41757: PUSH
41758: EMPTY
41759: LIST
41760: LIST
41761: PUSH
41762: LD_INT 0
41764: PUSH
41765: LD_INT 1
41767: NEG
41768: PUSH
41769: EMPTY
41770: LIST
41771: LIST
41772: PUSH
41773: LD_INT 1
41775: PUSH
41776: LD_INT 0
41778: PUSH
41779: EMPTY
41780: LIST
41781: LIST
41782: PUSH
41783: LD_INT 1
41785: PUSH
41786: LD_INT 1
41788: PUSH
41789: EMPTY
41790: LIST
41791: LIST
41792: PUSH
41793: LD_INT 0
41795: PUSH
41796: LD_INT 1
41798: PUSH
41799: EMPTY
41800: LIST
41801: LIST
41802: PUSH
41803: LD_INT 1
41805: NEG
41806: PUSH
41807: LD_INT 0
41809: PUSH
41810: EMPTY
41811: LIST
41812: LIST
41813: PUSH
41814: LD_INT 1
41816: NEG
41817: PUSH
41818: LD_INT 1
41820: NEG
41821: PUSH
41822: EMPTY
41823: LIST
41824: LIST
41825: PUSH
41826: LD_INT 1
41828: PUSH
41829: LD_INT 1
41831: NEG
41832: PUSH
41833: EMPTY
41834: LIST
41835: LIST
41836: PUSH
41837: LD_INT 1
41839: NEG
41840: PUSH
41841: LD_INT 1
41843: PUSH
41844: EMPTY
41845: LIST
41846: LIST
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: LIST
41852: LIST
41853: LIST
41854: LIST
41855: LIST
41856: LIST
41857: LIST
41858: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41859: LD_ADDR_VAR 0 41
41863: PUSH
41864: LD_INT 0
41866: PUSH
41867: LD_INT 0
41869: PUSH
41870: EMPTY
41871: LIST
41872: LIST
41873: PUSH
41874: LD_INT 0
41876: PUSH
41877: LD_INT 1
41879: NEG
41880: PUSH
41881: EMPTY
41882: LIST
41883: LIST
41884: PUSH
41885: LD_INT 1
41887: PUSH
41888: LD_INT 0
41890: PUSH
41891: EMPTY
41892: LIST
41893: LIST
41894: PUSH
41895: LD_INT 1
41897: PUSH
41898: LD_INT 1
41900: PUSH
41901: EMPTY
41902: LIST
41903: LIST
41904: PUSH
41905: LD_INT 0
41907: PUSH
41908: LD_INT 1
41910: PUSH
41911: EMPTY
41912: LIST
41913: LIST
41914: PUSH
41915: LD_INT 1
41917: NEG
41918: PUSH
41919: LD_INT 0
41921: PUSH
41922: EMPTY
41923: LIST
41924: LIST
41925: PUSH
41926: LD_INT 1
41928: NEG
41929: PUSH
41930: LD_INT 1
41932: NEG
41933: PUSH
41934: EMPTY
41935: LIST
41936: LIST
41937: PUSH
41938: LD_INT 1
41940: NEG
41941: PUSH
41942: LD_INT 2
41944: NEG
41945: PUSH
41946: EMPTY
41947: LIST
41948: LIST
41949: PUSH
41950: LD_INT 1
41952: PUSH
41953: LD_INT 1
41955: NEG
41956: PUSH
41957: EMPTY
41958: LIST
41959: LIST
41960: PUSH
41961: LD_INT 2
41963: PUSH
41964: LD_INT 0
41966: PUSH
41967: EMPTY
41968: LIST
41969: LIST
41970: PUSH
41971: LD_INT 2
41973: PUSH
41974: LD_INT 1
41976: PUSH
41977: EMPTY
41978: LIST
41979: LIST
41980: PUSH
41981: LD_INT 2
41983: PUSH
41984: LD_INT 2
41986: PUSH
41987: EMPTY
41988: LIST
41989: LIST
41990: PUSH
41991: LD_INT 1
41993: PUSH
41994: LD_INT 2
41996: PUSH
41997: EMPTY
41998: LIST
41999: LIST
42000: PUSH
42001: LD_INT 1
42003: NEG
42004: PUSH
42005: LD_INT 1
42007: PUSH
42008: EMPTY
42009: LIST
42010: LIST
42011: PUSH
42012: LD_INT 2
42014: NEG
42015: PUSH
42016: LD_INT 0
42018: PUSH
42019: EMPTY
42020: LIST
42021: LIST
42022: PUSH
42023: LD_INT 2
42025: NEG
42026: PUSH
42027: LD_INT 1
42029: NEG
42030: PUSH
42031: EMPTY
42032: LIST
42033: LIST
42034: PUSH
42035: LD_INT 2
42037: NEG
42038: PUSH
42039: LD_INT 2
42041: NEG
42042: PUSH
42043: EMPTY
42044: LIST
42045: LIST
42046: PUSH
42047: LD_INT 2
42049: NEG
42050: PUSH
42051: LD_INT 3
42053: NEG
42054: PUSH
42055: EMPTY
42056: LIST
42057: LIST
42058: PUSH
42059: LD_INT 2
42061: PUSH
42062: LD_INT 1
42064: NEG
42065: PUSH
42066: EMPTY
42067: LIST
42068: LIST
42069: PUSH
42070: LD_INT 3
42072: PUSH
42073: LD_INT 0
42075: PUSH
42076: EMPTY
42077: LIST
42078: LIST
42079: PUSH
42080: LD_INT 3
42082: PUSH
42083: LD_INT 1
42085: PUSH
42086: EMPTY
42087: LIST
42088: LIST
42089: PUSH
42090: LD_INT 3
42092: PUSH
42093: LD_INT 2
42095: PUSH
42096: EMPTY
42097: LIST
42098: LIST
42099: PUSH
42100: LD_INT 3
42102: PUSH
42103: LD_INT 3
42105: PUSH
42106: EMPTY
42107: LIST
42108: LIST
42109: PUSH
42110: LD_INT 2
42112: PUSH
42113: LD_INT 3
42115: PUSH
42116: EMPTY
42117: LIST
42118: LIST
42119: PUSH
42120: LD_INT 2
42122: NEG
42123: PUSH
42124: LD_INT 1
42126: PUSH
42127: EMPTY
42128: LIST
42129: LIST
42130: PUSH
42131: LD_INT 3
42133: NEG
42134: PUSH
42135: LD_INT 0
42137: PUSH
42138: EMPTY
42139: LIST
42140: LIST
42141: PUSH
42142: LD_INT 3
42144: NEG
42145: PUSH
42146: LD_INT 1
42148: NEG
42149: PUSH
42150: EMPTY
42151: LIST
42152: LIST
42153: PUSH
42154: LD_INT 3
42156: NEG
42157: PUSH
42158: LD_INT 2
42160: NEG
42161: PUSH
42162: EMPTY
42163: LIST
42164: LIST
42165: PUSH
42166: LD_INT 3
42168: NEG
42169: PUSH
42170: LD_INT 3
42172: NEG
42173: PUSH
42174: EMPTY
42175: LIST
42176: LIST
42177: PUSH
42178: EMPTY
42179: LIST
42180: LIST
42181: LIST
42182: LIST
42183: LIST
42184: LIST
42185: LIST
42186: LIST
42187: LIST
42188: LIST
42189: LIST
42190: LIST
42191: LIST
42192: LIST
42193: LIST
42194: LIST
42195: LIST
42196: LIST
42197: LIST
42198: LIST
42199: LIST
42200: LIST
42201: LIST
42202: LIST
42203: LIST
42204: LIST
42205: LIST
42206: LIST
42207: LIST
42208: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42209: LD_ADDR_VAR 0 42
42213: PUSH
42214: LD_INT 0
42216: PUSH
42217: LD_INT 0
42219: PUSH
42220: EMPTY
42221: LIST
42222: LIST
42223: PUSH
42224: LD_INT 0
42226: PUSH
42227: LD_INT 1
42229: NEG
42230: PUSH
42231: EMPTY
42232: LIST
42233: LIST
42234: PUSH
42235: LD_INT 1
42237: PUSH
42238: LD_INT 0
42240: PUSH
42241: EMPTY
42242: LIST
42243: LIST
42244: PUSH
42245: LD_INT 1
42247: PUSH
42248: LD_INT 1
42250: PUSH
42251: EMPTY
42252: LIST
42253: LIST
42254: PUSH
42255: LD_INT 0
42257: PUSH
42258: LD_INT 1
42260: PUSH
42261: EMPTY
42262: LIST
42263: LIST
42264: PUSH
42265: LD_INT 1
42267: NEG
42268: PUSH
42269: LD_INT 0
42271: PUSH
42272: EMPTY
42273: LIST
42274: LIST
42275: PUSH
42276: LD_INT 1
42278: NEG
42279: PUSH
42280: LD_INT 1
42282: NEG
42283: PUSH
42284: EMPTY
42285: LIST
42286: LIST
42287: PUSH
42288: LD_INT 1
42290: NEG
42291: PUSH
42292: LD_INT 2
42294: NEG
42295: PUSH
42296: EMPTY
42297: LIST
42298: LIST
42299: PUSH
42300: LD_INT 0
42302: PUSH
42303: LD_INT 2
42305: NEG
42306: PUSH
42307: EMPTY
42308: LIST
42309: LIST
42310: PUSH
42311: LD_INT 1
42313: PUSH
42314: LD_INT 1
42316: NEG
42317: PUSH
42318: EMPTY
42319: LIST
42320: LIST
42321: PUSH
42322: LD_INT 2
42324: PUSH
42325: LD_INT 1
42327: PUSH
42328: EMPTY
42329: LIST
42330: LIST
42331: PUSH
42332: LD_INT 2
42334: PUSH
42335: LD_INT 2
42337: PUSH
42338: EMPTY
42339: LIST
42340: LIST
42341: PUSH
42342: LD_INT 1
42344: PUSH
42345: LD_INT 2
42347: PUSH
42348: EMPTY
42349: LIST
42350: LIST
42351: PUSH
42352: LD_INT 0
42354: PUSH
42355: LD_INT 2
42357: PUSH
42358: EMPTY
42359: LIST
42360: LIST
42361: PUSH
42362: LD_INT 1
42364: NEG
42365: PUSH
42366: LD_INT 1
42368: PUSH
42369: EMPTY
42370: LIST
42371: LIST
42372: PUSH
42373: LD_INT 2
42375: NEG
42376: PUSH
42377: LD_INT 1
42379: NEG
42380: PUSH
42381: EMPTY
42382: LIST
42383: LIST
42384: PUSH
42385: LD_INT 2
42387: NEG
42388: PUSH
42389: LD_INT 2
42391: NEG
42392: PUSH
42393: EMPTY
42394: LIST
42395: LIST
42396: PUSH
42397: LD_INT 2
42399: NEG
42400: PUSH
42401: LD_INT 3
42403: NEG
42404: PUSH
42405: EMPTY
42406: LIST
42407: LIST
42408: PUSH
42409: LD_INT 1
42411: NEG
42412: PUSH
42413: LD_INT 3
42415: NEG
42416: PUSH
42417: EMPTY
42418: LIST
42419: LIST
42420: PUSH
42421: LD_INT 0
42423: PUSH
42424: LD_INT 3
42426: NEG
42427: PUSH
42428: EMPTY
42429: LIST
42430: LIST
42431: PUSH
42432: LD_INT 1
42434: PUSH
42435: LD_INT 2
42437: NEG
42438: PUSH
42439: EMPTY
42440: LIST
42441: LIST
42442: PUSH
42443: LD_INT 3
42445: PUSH
42446: LD_INT 2
42448: PUSH
42449: EMPTY
42450: LIST
42451: LIST
42452: PUSH
42453: LD_INT 3
42455: PUSH
42456: LD_INT 3
42458: PUSH
42459: EMPTY
42460: LIST
42461: LIST
42462: PUSH
42463: LD_INT 2
42465: PUSH
42466: LD_INT 3
42468: PUSH
42469: EMPTY
42470: LIST
42471: LIST
42472: PUSH
42473: LD_INT 1
42475: PUSH
42476: LD_INT 3
42478: PUSH
42479: EMPTY
42480: LIST
42481: LIST
42482: PUSH
42483: LD_INT 0
42485: PUSH
42486: LD_INT 3
42488: PUSH
42489: EMPTY
42490: LIST
42491: LIST
42492: PUSH
42493: LD_INT 1
42495: NEG
42496: PUSH
42497: LD_INT 2
42499: PUSH
42500: EMPTY
42501: LIST
42502: LIST
42503: PUSH
42504: LD_INT 3
42506: NEG
42507: PUSH
42508: LD_INT 2
42510: NEG
42511: PUSH
42512: EMPTY
42513: LIST
42514: LIST
42515: PUSH
42516: LD_INT 3
42518: NEG
42519: PUSH
42520: LD_INT 3
42522: NEG
42523: PUSH
42524: EMPTY
42525: LIST
42526: LIST
42527: PUSH
42528: EMPTY
42529: LIST
42530: LIST
42531: LIST
42532: LIST
42533: LIST
42534: LIST
42535: LIST
42536: LIST
42537: LIST
42538: LIST
42539: LIST
42540: LIST
42541: LIST
42542: LIST
42543: LIST
42544: LIST
42545: LIST
42546: LIST
42547: LIST
42548: LIST
42549: LIST
42550: LIST
42551: LIST
42552: LIST
42553: LIST
42554: LIST
42555: LIST
42556: LIST
42557: LIST
42558: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42559: LD_ADDR_VAR 0 43
42563: PUSH
42564: LD_INT 0
42566: PUSH
42567: LD_INT 0
42569: PUSH
42570: EMPTY
42571: LIST
42572: LIST
42573: PUSH
42574: LD_INT 0
42576: PUSH
42577: LD_INT 1
42579: NEG
42580: PUSH
42581: EMPTY
42582: LIST
42583: LIST
42584: PUSH
42585: LD_INT 1
42587: PUSH
42588: LD_INT 0
42590: PUSH
42591: EMPTY
42592: LIST
42593: LIST
42594: PUSH
42595: LD_INT 1
42597: PUSH
42598: LD_INT 1
42600: PUSH
42601: EMPTY
42602: LIST
42603: LIST
42604: PUSH
42605: LD_INT 0
42607: PUSH
42608: LD_INT 1
42610: PUSH
42611: EMPTY
42612: LIST
42613: LIST
42614: PUSH
42615: LD_INT 1
42617: NEG
42618: PUSH
42619: LD_INT 0
42621: PUSH
42622: EMPTY
42623: LIST
42624: LIST
42625: PUSH
42626: LD_INT 1
42628: NEG
42629: PUSH
42630: LD_INT 1
42632: NEG
42633: PUSH
42634: EMPTY
42635: LIST
42636: LIST
42637: PUSH
42638: LD_INT 1
42640: NEG
42641: PUSH
42642: LD_INT 2
42644: NEG
42645: PUSH
42646: EMPTY
42647: LIST
42648: LIST
42649: PUSH
42650: LD_INT 0
42652: PUSH
42653: LD_INT 2
42655: NEG
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: PUSH
42661: LD_INT 1
42663: PUSH
42664: LD_INT 1
42666: NEG
42667: PUSH
42668: EMPTY
42669: LIST
42670: LIST
42671: PUSH
42672: LD_INT 2
42674: PUSH
42675: LD_INT 0
42677: PUSH
42678: EMPTY
42679: LIST
42680: LIST
42681: PUSH
42682: LD_INT 2
42684: PUSH
42685: LD_INT 1
42687: PUSH
42688: EMPTY
42689: LIST
42690: LIST
42691: PUSH
42692: LD_INT 1
42694: PUSH
42695: LD_INT 2
42697: PUSH
42698: EMPTY
42699: LIST
42700: LIST
42701: PUSH
42702: LD_INT 0
42704: PUSH
42705: LD_INT 2
42707: PUSH
42708: EMPTY
42709: LIST
42710: LIST
42711: PUSH
42712: LD_INT 1
42714: NEG
42715: PUSH
42716: LD_INT 1
42718: PUSH
42719: EMPTY
42720: LIST
42721: LIST
42722: PUSH
42723: LD_INT 2
42725: NEG
42726: PUSH
42727: LD_INT 0
42729: PUSH
42730: EMPTY
42731: LIST
42732: LIST
42733: PUSH
42734: LD_INT 2
42736: NEG
42737: PUSH
42738: LD_INT 1
42740: NEG
42741: PUSH
42742: EMPTY
42743: LIST
42744: LIST
42745: PUSH
42746: LD_INT 1
42748: NEG
42749: PUSH
42750: LD_INT 3
42752: NEG
42753: PUSH
42754: EMPTY
42755: LIST
42756: LIST
42757: PUSH
42758: LD_INT 0
42760: PUSH
42761: LD_INT 3
42763: NEG
42764: PUSH
42765: EMPTY
42766: LIST
42767: LIST
42768: PUSH
42769: LD_INT 1
42771: PUSH
42772: LD_INT 2
42774: NEG
42775: PUSH
42776: EMPTY
42777: LIST
42778: LIST
42779: PUSH
42780: LD_INT 2
42782: PUSH
42783: LD_INT 1
42785: NEG
42786: PUSH
42787: EMPTY
42788: LIST
42789: LIST
42790: PUSH
42791: LD_INT 3
42793: PUSH
42794: LD_INT 0
42796: PUSH
42797: EMPTY
42798: LIST
42799: LIST
42800: PUSH
42801: LD_INT 3
42803: PUSH
42804: LD_INT 1
42806: PUSH
42807: EMPTY
42808: LIST
42809: LIST
42810: PUSH
42811: LD_INT 1
42813: PUSH
42814: LD_INT 3
42816: PUSH
42817: EMPTY
42818: LIST
42819: LIST
42820: PUSH
42821: LD_INT 0
42823: PUSH
42824: LD_INT 3
42826: PUSH
42827: EMPTY
42828: LIST
42829: LIST
42830: PUSH
42831: LD_INT 1
42833: NEG
42834: PUSH
42835: LD_INT 2
42837: PUSH
42838: EMPTY
42839: LIST
42840: LIST
42841: PUSH
42842: LD_INT 2
42844: NEG
42845: PUSH
42846: LD_INT 1
42848: PUSH
42849: EMPTY
42850: LIST
42851: LIST
42852: PUSH
42853: LD_INT 3
42855: NEG
42856: PUSH
42857: LD_INT 0
42859: PUSH
42860: EMPTY
42861: LIST
42862: LIST
42863: PUSH
42864: LD_INT 3
42866: NEG
42867: PUSH
42868: LD_INT 1
42870: NEG
42871: PUSH
42872: EMPTY
42873: LIST
42874: LIST
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: LIST
42880: LIST
42881: LIST
42882: LIST
42883: LIST
42884: LIST
42885: LIST
42886: LIST
42887: LIST
42888: LIST
42889: LIST
42890: LIST
42891: LIST
42892: LIST
42893: LIST
42894: LIST
42895: LIST
42896: LIST
42897: LIST
42898: LIST
42899: LIST
42900: LIST
42901: LIST
42902: LIST
42903: LIST
42904: LIST
42905: LIST
42906: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42907: LD_ADDR_VAR 0 44
42911: PUSH
42912: LD_INT 0
42914: PUSH
42915: LD_INT 0
42917: PUSH
42918: EMPTY
42919: LIST
42920: LIST
42921: PUSH
42922: LD_INT 0
42924: PUSH
42925: LD_INT 1
42927: NEG
42928: PUSH
42929: EMPTY
42930: LIST
42931: LIST
42932: PUSH
42933: LD_INT 1
42935: PUSH
42936: LD_INT 0
42938: PUSH
42939: EMPTY
42940: LIST
42941: LIST
42942: PUSH
42943: LD_INT 1
42945: PUSH
42946: LD_INT 1
42948: PUSH
42949: EMPTY
42950: LIST
42951: LIST
42952: PUSH
42953: LD_INT 0
42955: PUSH
42956: LD_INT 1
42958: PUSH
42959: EMPTY
42960: LIST
42961: LIST
42962: PUSH
42963: LD_INT 1
42965: NEG
42966: PUSH
42967: LD_INT 0
42969: PUSH
42970: EMPTY
42971: LIST
42972: LIST
42973: PUSH
42974: LD_INT 1
42976: NEG
42977: PUSH
42978: LD_INT 1
42980: NEG
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: PUSH
42986: LD_INT 1
42988: NEG
42989: PUSH
42990: LD_INT 2
42992: NEG
42993: PUSH
42994: EMPTY
42995: LIST
42996: LIST
42997: PUSH
42998: LD_INT 1
43000: PUSH
43001: LD_INT 1
43003: NEG
43004: PUSH
43005: EMPTY
43006: LIST
43007: LIST
43008: PUSH
43009: LD_INT 2
43011: PUSH
43012: LD_INT 0
43014: PUSH
43015: EMPTY
43016: LIST
43017: LIST
43018: PUSH
43019: LD_INT 2
43021: PUSH
43022: LD_INT 1
43024: PUSH
43025: EMPTY
43026: LIST
43027: LIST
43028: PUSH
43029: LD_INT 2
43031: PUSH
43032: LD_INT 2
43034: PUSH
43035: EMPTY
43036: LIST
43037: LIST
43038: PUSH
43039: LD_INT 1
43041: PUSH
43042: LD_INT 2
43044: PUSH
43045: EMPTY
43046: LIST
43047: LIST
43048: PUSH
43049: LD_INT 1
43051: NEG
43052: PUSH
43053: LD_INT 1
43055: PUSH
43056: EMPTY
43057: LIST
43058: LIST
43059: PUSH
43060: LD_INT 2
43062: NEG
43063: PUSH
43064: LD_INT 0
43066: PUSH
43067: EMPTY
43068: LIST
43069: LIST
43070: PUSH
43071: LD_INT 2
43073: NEG
43074: PUSH
43075: LD_INT 1
43077: NEG
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: PUSH
43083: LD_INT 2
43085: NEG
43086: PUSH
43087: LD_INT 2
43089: NEG
43090: PUSH
43091: EMPTY
43092: LIST
43093: LIST
43094: PUSH
43095: LD_INT 2
43097: NEG
43098: PUSH
43099: LD_INT 3
43101: NEG
43102: PUSH
43103: EMPTY
43104: LIST
43105: LIST
43106: PUSH
43107: LD_INT 2
43109: PUSH
43110: LD_INT 1
43112: NEG
43113: PUSH
43114: EMPTY
43115: LIST
43116: LIST
43117: PUSH
43118: LD_INT 3
43120: PUSH
43121: LD_INT 0
43123: PUSH
43124: EMPTY
43125: LIST
43126: LIST
43127: PUSH
43128: LD_INT 3
43130: PUSH
43131: LD_INT 1
43133: PUSH
43134: EMPTY
43135: LIST
43136: LIST
43137: PUSH
43138: LD_INT 3
43140: PUSH
43141: LD_INT 2
43143: PUSH
43144: EMPTY
43145: LIST
43146: LIST
43147: PUSH
43148: LD_INT 3
43150: PUSH
43151: LD_INT 3
43153: PUSH
43154: EMPTY
43155: LIST
43156: LIST
43157: PUSH
43158: LD_INT 2
43160: PUSH
43161: LD_INT 3
43163: PUSH
43164: EMPTY
43165: LIST
43166: LIST
43167: PUSH
43168: LD_INT 2
43170: NEG
43171: PUSH
43172: LD_INT 1
43174: PUSH
43175: EMPTY
43176: LIST
43177: LIST
43178: PUSH
43179: LD_INT 3
43181: NEG
43182: PUSH
43183: LD_INT 0
43185: PUSH
43186: EMPTY
43187: LIST
43188: LIST
43189: PUSH
43190: LD_INT 3
43192: NEG
43193: PUSH
43194: LD_INT 1
43196: NEG
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: PUSH
43202: LD_INT 3
43204: NEG
43205: PUSH
43206: LD_INT 2
43208: NEG
43209: PUSH
43210: EMPTY
43211: LIST
43212: LIST
43213: PUSH
43214: LD_INT 3
43216: NEG
43217: PUSH
43218: LD_INT 3
43220: NEG
43221: PUSH
43222: EMPTY
43223: LIST
43224: LIST
43225: PUSH
43226: EMPTY
43227: LIST
43228: LIST
43229: LIST
43230: LIST
43231: LIST
43232: LIST
43233: LIST
43234: LIST
43235: LIST
43236: LIST
43237: LIST
43238: LIST
43239: LIST
43240: LIST
43241: LIST
43242: LIST
43243: LIST
43244: LIST
43245: LIST
43246: LIST
43247: LIST
43248: LIST
43249: LIST
43250: LIST
43251: LIST
43252: LIST
43253: LIST
43254: LIST
43255: LIST
43256: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43257: LD_ADDR_VAR 0 45
43261: PUSH
43262: LD_INT 0
43264: PUSH
43265: LD_INT 0
43267: PUSH
43268: EMPTY
43269: LIST
43270: LIST
43271: PUSH
43272: LD_INT 0
43274: PUSH
43275: LD_INT 1
43277: NEG
43278: PUSH
43279: EMPTY
43280: LIST
43281: LIST
43282: PUSH
43283: LD_INT 1
43285: PUSH
43286: LD_INT 0
43288: PUSH
43289: EMPTY
43290: LIST
43291: LIST
43292: PUSH
43293: LD_INT 1
43295: PUSH
43296: LD_INT 1
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: PUSH
43303: LD_INT 0
43305: PUSH
43306: LD_INT 1
43308: PUSH
43309: EMPTY
43310: LIST
43311: LIST
43312: PUSH
43313: LD_INT 1
43315: NEG
43316: PUSH
43317: LD_INT 0
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: PUSH
43324: LD_INT 1
43326: NEG
43327: PUSH
43328: LD_INT 1
43330: NEG
43331: PUSH
43332: EMPTY
43333: LIST
43334: LIST
43335: PUSH
43336: LD_INT 1
43338: NEG
43339: PUSH
43340: LD_INT 2
43342: NEG
43343: PUSH
43344: EMPTY
43345: LIST
43346: LIST
43347: PUSH
43348: LD_INT 0
43350: PUSH
43351: LD_INT 2
43353: NEG
43354: PUSH
43355: EMPTY
43356: LIST
43357: LIST
43358: PUSH
43359: LD_INT 1
43361: PUSH
43362: LD_INT 1
43364: NEG
43365: PUSH
43366: EMPTY
43367: LIST
43368: LIST
43369: PUSH
43370: LD_INT 2
43372: PUSH
43373: LD_INT 1
43375: PUSH
43376: EMPTY
43377: LIST
43378: LIST
43379: PUSH
43380: LD_INT 2
43382: PUSH
43383: LD_INT 2
43385: PUSH
43386: EMPTY
43387: LIST
43388: LIST
43389: PUSH
43390: LD_INT 1
43392: PUSH
43393: LD_INT 2
43395: PUSH
43396: EMPTY
43397: LIST
43398: LIST
43399: PUSH
43400: LD_INT 0
43402: PUSH
43403: LD_INT 2
43405: PUSH
43406: EMPTY
43407: LIST
43408: LIST
43409: PUSH
43410: LD_INT 1
43412: NEG
43413: PUSH
43414: LD_INT 1
43416: PUSH
43417: EMPTY
43418: LIST
43419: LIST
43420: PUSH
43421: LD_INT 2
43423: NEG
43424: PUSH
43425: LD_INT 1
43427: NEG
43428: PUSH
43429: EMPTY
43430: LIST
43431: LIST
43432: PUSH
43433: LD_INT 2
43435: NEG
43436: PUSH
43437: LD_INT 2
43439: NEG
43440: PUSH
43441: EMPTY
43442: LIST
43443: LIST
43444: PUSH
43445: LD_INT 2
43447: NEG
43448: PUSH
43449: LD_INT 3
43451: NEG
43452: PUSH
43453: EMPTY
43454: LIST
43455: LIST
43456: PUSH
43457: LD_INT 1
43459: NEG
43460: PUSH
43461: LD_INT 3
43463: NEG
43464: PUSH
43465: EMPTY
43466: LIST
43467: LIST
43468: PUSH
43469: LD_INT 0
43471: PUSH
43472: LD_INT 3
43474: NEG
43475: PUSH
43476: EMPTY
43477: LIST
43478: LIST
43479: PUSH
43480: LD_INT 1
43482: PUSH
43483: LD_INT 2
43485: NEG
43486: PUSH
43487: EMPTY
43488: LIST
43489: LIST
43490: PUSH
43491: LD_INT 3
43493: PUSH
43494: LD_INT 2
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: PUSH
43501: LD_INT 3
43503: PUSH
43504: LD_INT 3
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: PUSH
43511: LD_INT 2
43513: PUSH
43514: LD_INT 3
43516: PUSH
43517: EMPTY
43518: LIST
43519: LIST
43520: PUSH
43521: LD_INT 1
43523: PUSH
43524: LD_INT 3
43526: PUSH
43527: EMPTY
43528: LIST
43529: LIST
43530: PUSH
43531: LD_INT 0
43533: PUSH
43534: LD_INT 3
43536: PUSH
43537: EMPTY
43538: LIST
43539: LIST
43540: PUSH
43541: LD_INT 1
43543: NEG
43544: PUSH
43545: LD_INT 2
43547: PUSH
43548: EMPTY
43549: LIST
43550: LIST
43551: PUSH
43552: LD_INT 3
43554: NEG
43555: PUSH
43556: LD_INT 2
43558: NEG
43559: PUSH
43560: EMPTY
43561: LIST
43562: LIST
43563: PUSH
43564: LD_INT 3
43566: NEG
43567: PUSH
43568: LD_INT 3
43570: NEG
43571: PUSH
43572: EMPTY
43573: LIST
43574: LIST
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: LIST
43580: LIST
43581: LIST
43582: LIST
43583: LIST
43584: LIST
43585: LIST
43586: LIST
43587: LIST
43588: LIST
43589: LIST
43590: LIST
43591: LIST
43592: LIST
43593: LIST
43594: LIST
43595: LIST
43596: LIST
43597: LIST
43598: LIST
43599: LIST
43600: LIST
43601: LIST
43602: LIST
43603: LIST
43604: LIST
43605: LIST
43606: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43607: LD_ADDR_VAR 0 46
43611: PUSH
43612: LD_INT 0
43614: PUSH
43615: LD_INT 0
43617: PUSH
43618: EMPTY
43619: LIST
43620: LIST
43621: PUSH
43622: LD_INT 0
43624: PUSH
43625: LD_INT 1
43627: NEG
43628: PUSH
43629: EMPTY
43630: LIST
43631: LIST
43632: PUSH
43633: LD_INT 1
43635: PUSH
43636: LD_INT 0
43638: PUSH
43639: EMPTY
43640: LIST
43641: LIST
43642: PUSH
43643: LD_INT 1
43645: PUSH
43646: LD_INT 1
43648: PUSH
43649: EMPTY
43650: LIST
43651: LIST
43652: PUSH
43653: LD_INT 0
43655: PUSH
43656: LD_INT 1
43658: PUSH
43659: EMPTY
43660: LIST
43661: LIST
43662: PUSH
43663: LD_INT 1
43665: NEG
43666: PUSH
43667: LD_INT 0
43669: PUSH
43670: EMPTY
43671: LIST
43672: LIST
43673: PUSH
43674: LD_INT 1
43676: NEG
43677: PUSH
43678: LD_INT 1
43680: NEG
43681: PUSH
43682: EMPTY
43683: LIST
43684: LIST
43685: PUSH
43686: LD_INT 1
43688: NEG
43689: PUSH
43690: LD_INT 2
43692: NEG
43693: PUSH
43694: EMPTY
43695: LIST
43696: LIST
43697: PUSH
43698: LD_INT 0
43700: PUSH
43701: LD_INT 2
43703: NEG
43704: PUSH
43705: EMPTY
43706: LIST
43707: LIST
43708: PUSH
43709: LD_INT 1
43711: PUSH
43712: LD_INT 1
43714: NEG
43715: PUSH
43716: EMPTY
43717: LIST
43718: LIST
43719: PUSH
43720: LD_INT 2
43722: PUSH
43723: LD_INT 0
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: PUSH
43730: LD_INT 2
43732: PUSH
43733: LD_INT 1
43735: PUSH
43736: EMPTY
43737: LIST
43738: LIST
43739: PUSH
43740: LD_INT 1
43742: PUSH
43743: LD_INT 2
43745: PUSH
43746: EMPTY
43747: LIST
43748: LIST
43749: PUSH
43750: LD_INT 0
43752: PUSH
43753: LD_INT 2
43755: PUSH
43756: EMPTY
43757: LIST
43758: LIST
43759: PUSH
43760: LD_INT 1
43762: NEG
43763: PUSH
43764: LD_INT 1
43766: PUSH
43767: EMPTY
43768: LIST
43769: LIST
43770: PUSH
43771: LD_INT 2
43773: NEG
43774: PUSH
43775: LD_INT 0
43777: PUSH
43778: EMPTY
43779: LIST
43780: LIST
43781: PUSH
43782: LD_INT 2
43784: NEG
43785: PUSH
43786: LD_INT 1
43788: NEG
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: PUSH
43794: LD_INT 1
43796: NEG
43797: PUSH
43798: LD_INT 3
43800: NEG
43801: PUSH
43802: EMPTY
43803: LIST
43804: LIST
43805: PUSH
43806: LD_INT 0
43808: PUSH
43809: LD_INT 3
43811: NEG
43812: PUSH
43813: EMPTY
43814: LIST
43815: LIST
43816: PUSH
43817: LD_INT 1
43819: PUSH
43820: LD_INT 2
43822: NEG
43823: PUSH
43824: EMPTY
43825: LIST
43826: LIST
43827: PUSH
43828: LD_INT 2
43830: PUSH
43831: LD_INT 1
43833: NEG
43834: PUSH
43835: EMPTY
43836: LIST
43837: LIST
43838: PUSH
43839: LD_INT 3
43841: PUSH
43842: LD_INT 0
43844: PUSH
43845: EMPTY
43846: LIST
43847: LIST
43848: PUSH
43849: LD_INT 3
43851: PUSH
43852: LD_INT 1
43854: PUSH
43855: EMPTY
43856: LIST
43857: LIST
43858: PUSH
43859: LD_INT 1
43861: PUSH
43862: LD_INT 3
43864: PUSH
43865: EMPTY
43866: LIST
43867: LIST
43868: PUSH
43869: LD_INT 0
43871: PUSH
43872: LD_INT 3
43874: PUSH
43875: EMPTY
43876: LIST
43877: LIST
43878: PUSH
43879: LD_INT 1
43881: NEG
43882: PUSH
43883: LD_INT 2
43885: PUSH
43886: EMPTY
43887: LIST
43888: LIST
43889: PUSH
43890: LD_INT 2
43892: NEG
43893: PUSH
43894: LD_INT 1
43896: PUSH
43897: EMPTY
43898: LIST
43899: LIST
43900: PUSH
43901: LD_INT 3
43903: NEG
43904: PUSH
43905: LD_INT 0
43907: PUSH
43908: EMPTY
43909: LIST
43910: LIST
43911: PUSH
43912: LD_INT 3
43914: NEG
43915: PUSH
43916: LD_INT 1
43918: NEG
43919: PUSH
43920: EMPTY
43921: LIST
43922: LIST
43923: PUSH
43924: EMPTY
43925: LIST
43926: LIST
43927: LIST
43928: LIST
43929: LIST
43930: LIST
43931: LIST
43932: LIST
43933: LIST
43934: LIST
43935: LIST
43936: LIST
43937: LIST
43938: LIST
43939: LIST
43940: LIST
43941: LIST
43942: LIST
43943: LIST
43944: LIST
43945: LIST
43946: LIST
43947: LIST
43948: LIST
43949: LIST
43950: LIST
43951: LIST
43952: LIST
43953: LIST
43954: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43955: LD_ADDR_VAR 0 47
43959: PUSH
43960: LD_INT 0
43962: PUSH
43963: LD_INT 0
43965: PUSH
43966: EMPTY
43967: LIST
43968: LIST
43969: PUSH
43970: LD_INT 0
43972: PUSH
43973: LD_INT 1
43975: NEG
43976: PUSH
43977: EMPTY
43978: LIST
43979: LIST
43980: PUSH
43981: LD_INT 1
43983: PUSH
43984: LD_INT 0
43986: PUSH
43987: EMPTY
43988: LIST
43989: LIST
43990: PUSH
43991: LD_INT 1
43993: PUSH
43994: LD_INT 1
43996: PUSH
43997: EMPTY
43998: LIST
43999: LIST
44000: PUSH
44001: LD_INT 0
44003: PUSH
44004: LD_INT 1
44006: PUSH
44007: EMPTY
44008: LIST
44009: LIST
44010: PUSH
44011: LD_INT 1
44013: NEG
44014: PUSH
44015: LD_INT 0
44017: PUSH
44018: EMPTY
44019: LIST
44020: LIST
44021: PUSH
44022: LD_INT 1
44024: NEG
44025: PUSH
44026: LD_INT 1
44028: NEG
44029: PUSH
44030: EMPTY
44031: LIST
44032: LIST
44033: PUSH
44034: LD_INT 1
44036: NEG
44037: PUSH
44038: LD_INT 2
44040: NEG
44041: PUSH
44042: EMPTY
44043: LIST
44044: LIST
44045: PUSH
44046: LD_INT 0
44048: PUSH
44049: LD_INT 2
44051: NEG
44052: PUSH
44053: EMPTY
44054: LIST
44055: LIST
44056: PUSH
44057: LD_INT 1
44059: PUSH
44060: LD_INT 1
44062: NEG
44063: PUSH
44064: EMPTY
44065: LIST
44066: LIST
44067: PUSH
44068: LD_INT 2
44070: NEG
44071: PUSH
44072: LD_INT 1
44074: NEG
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: PUSH
44080: LD_INT 2
44082: NEG
44083: PUSH
44084: LD_INT 2
44086: NEG
44087: PUSH
44088: EMPTY
44089: LIST
44090: LIST
44091: PUSH
44092: EMPTY
44093: LIST
44094: LIST
44095: LIST
44096: LIST
44097: LIST
44098: LIST
44099: LIST
44100: LIST
44101: LIST
44102: LIST
44103: LIST
44104: LIST
44105: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44106: LD_ADDR_VAR 0 48
44110: PUSH
44111: LD_INT 0
44113: PUSH
44114: LD_INT 0
44116: PUSH
44117: EMPTY
44118: LIST
44119: LIST
44120: PUSH
44121: LD_INT 0
44123: PUSH
44124: LD_INT 1
44126: NEG
44127: PUSH
44128: EMPTY
44129: LIST
44130: LIST
44131: PUSH
44132: LD_INT 1
44134: PUSH
44135: LD_INT 0
44137: PUSH
44138: EMPTY
44139: LIST
44140: LIST
44141: PUSH
44142: LD_INT 1
44144: PUSH
44145: LD_INT 1
44147: PUSH
44148: EMPTY
44149: LIST
44150: LIST
44151: PUSH
44152: LD_INT 0
44154: PUSH
44155: LD_INT 1
44157: PUSH
44158: EMPTY
44159: LIST
44160: LIST
44161: PUSH
44162: LD_INT 1
44164: NEG
44165: PUSH
44166: LD_INT 0
44168: PUSH
44169: EMPTY
44170: LIST
44171: LIST
44172: PUSH
44173: LD_INT 1
44175: NEG
44176: PUSH
44177: LD_INT 1
44179: NEG
44180: PUSH
44181: EMPTY
44182: LIST
44183: LIST
44184: PUSH
44185: LD_INT 1
44187: NEG
44188: PUSH
44189: LD_INT 2
44191: NEG
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: PUSH
44197: LD_INT 0
44199: PUSH
44200: LD_INT 2
44202: NEG
44203: PUSH
44204: EMPTY
44205: LIST
44206: LIST
44207: PUSH
44208: LD_INT 1
44210: PUSH
44211: LD_INT 1
44213: NEG
44214: PUSH
44215: EMPTY
44216: LIST
44217: LIST
44218: PUSH
44219: LD_INT 2
44221: PUSH
44222: LD_INT 0
44224: PUSH
44225: EMPTY
44226: LIST
44227: LIST
44228: PUSH
44229: LD_INT 2
44231: PUSH
44232: LD_INT 1
44234: PUSH
44235: EMPTY
44236: LIST
44237: LIST
44238: PUSH
44239: EMPTY
44240: LIST
44241: LIST
44242: LIST
44243: LIST
44244: LIST
44245: LIST
44246: LIST
44247: LIST
44248: LIST
44249: LIST
44250: LIST
44251: LIST
44252: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44253: LD_ADDR_VAR 0 49
44257: PUSH
44258: LD_INT 0
44260: PUSH
44261: LD_INT 0
44263: PUSH
44264: EMPTY
44265: LIST
44266: LIST
44267: PUSH
44268: LD_INT 0
44270: PUSH
44271: LD_INT 1
44273: NEG
44274: PUSH
44275: EMPTY
44276: LIST
44277: LIST
44278: PUSH
44279: LD_INT 1
44281: PUSH
44282: LD_INT 0
44284: PUSH
44285: EMPTY
44286: LIST
44287: LIST
44288: PUSH
44289: LD_INT 1
44291: PUSH
44292: LD_INT 1
44294: PUSH
44295: EMPTY
44296: LIST
44297: LIST
44298: PUSH
44299: LD_INT 0
44301: PUSH
44302: LD_INT 1
44304: PUSH
44305: EMPTY
44306: LIST
44307: LIST
44308: PUSH
44309: LD_INT 1
44311: NEG
44312: PUSH
44313: LD_INT 0
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: PUSH
44320: LD_INT 1
44322: NEG
44323: PUSH
44324: LD_INT 1
44326: NEG
44327: PUSH
44328: EMPTY
44329: LIST
44330: LIST
44331: PUSH
44332: LD_INT 1
44334: PUSH
44335: LD_INT 1
44337: NEG
44338: PUSH
44339: EMPTY
44340: LIST
44341: LIST
44342: PUSH
44343: LD_INT 2
44345: PUSH
44346: LD_INT 0
44348: PUSH
44349: EMPTY
44350: LIST
44351: LIST
44352: PUSH
44353: LD_INT 2
44355: PUSH
44356: LD_INT 1
44358: PUSH
44359: EMPTY
44360: LIST
44361: LIST
44362: PUSH
44363: LD_INT 2
44365: PUSH
44366: LD_INT 2
44368: PUSH
44369: EMPTY
44370: LIST
44371: LIST
44372: PUSH
44373: LD_INT 1
44375: PUSH
44376: LD_INT 2
44378: PUSH
44379: EMPTY
44380: LIST
44381: LIST
44382: PUSH
44383: EMPTY
44384: LIST
44385: LIST
44386: LIST
44387: LIST
44388: LIST
44389: LIST
44390: LIST
44391: LIST
44392: LIST
44393: LIST
44394: LIST
44395: LIST
44396: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44397: LD_ADDR_VAR 0 50
44401: PUSH
44402: LD_INT 0
44404: PUSH
44405: LD_INT 0
44407: PUSH
44408: EMPTY
44409: LIST
44410: LIST
44411: PUSH
44412: LD_INT 0
44414: PUSH
44415: LD_INT 1
44417: NEG
44418: PUSH
44419: EMPTY
44420: LIST
44421: LIST
44422: PUSH
44423: LD_INT 1
44425: PUSH
44426: LD_INT 0
44428: PUSH
44429: EMPTY
44430: LIST
44431: LIST
44432: PUSH
44433: LD_INT 1
44435: PUSH
44436: LD_INT 1
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: PUSH
44443: LD_INT 0
44445: PUSH
44446: LD_INT 1
44448: PUSH
44449: EMPTY
44450: LIST
44451: LIST
44452: PUSH
44453: LD_INT 1
44455: NEG
44456: PUSH
44457: LD_INT 0
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: PUSH
44464: LD_INT 1
44466: NEG
44467: PUSH
44468: LD_INT 1
44470: NEG
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: PUSH
44476: LD_INT 2
44478: PUSH
44479: LD_INT 1
44481: PUSH
44482: EMPTY
44483: LIST
44484: LIST
44485: PUSH
44486: LD_INT 2
44488: PUSH
44489: LD_INT 2
44491: PUSH
44492: EMPTY
44493: LIST
44494: LIST
44495: PUSH
44496: LD_INT 1
44498: PUSH
44499: LD_INT 2
44501: PUSH
44502: EMPTY
44503: LIST
44504: LIST
44505: PUSH
44506: LD_INT 0
44508: PUSH
44509: LD_INT 2
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: PUSH
44516: LD_INT 1
44518: NEG
44519: PUSH
44520: LD_INT 1
44522: PUSH
44523: EMPTY
44524: LIST
44525: LIST
44526: PUSH
44527: EMPTY
44528: LIST
44529: LIST
44530: LIST
44531: LIST
44532: LIST
44533: LIST
44534: LIST
44535: LIST
44536: LIST
44537: LIST
44538: LIST
44539: LIST
44540: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44541: LD_ADDR_VAR 0 51
44545: PUSH
44546: LD_INT 0
44548: PUSH
44549: LD_INT 0
44551: PUSH
44552: EMPTY
44553: LIST
44554: LIST
44555: PUSH
44556: LD_INT 0
44558: PUSH
44559: LD_INT 1
44561: NEG
44562: PUSH
44563: EMPTY
44564: LIST
44565: LIST
44566: PUSH
44567: LD_INT 1
44569: PUSH
44570: LD_INT 0
44572: PUSH
44573: EMPTY
44574: LIST
44575: LIST
44576: PUSH
44577: LD_INT 1
44579: PUSH
44580: LD_INT 1
44582: PUSH
44583: EMPTY
44584: LIST
44585: LIST
44586: PUSH
44587: LD_INT 0
44589: PUSH
44590: LD_INT 1
44592: PUSH
44593: EMPTY
44594: LIST
44595: LIST
44596: PUSH
44597: LD_INT 1
44599: NEG
44600: PUSH
44601: LD_INT 0
44603: PUSH
44604: EMPTY
44605: LIST
44606: LIST
44607: PUSH
44608: LD_INT 1
44610: NEG
44611: PUSH
44612: LD_INT 1
44614: NEG
44615: PUSH
44616: EMPTY
44617: LIST
44618: LIST
44619: PUSH
44620: LD_INT 1
44622: PUSH
44623: LD_INT 2
44625: PUSH
44626: EMPTY
44627: LIST
44628: LIST
44629: PUSH
44630: LD_INT 0
44632: PUSH
44633: LD_INT 2
44635: PUSH
44636: EMPTY
44637: LIST
44638: LIST
44639: PUSH
44640: LD_INT 1
44642: NEG
44643: PUSH
44644: LD_INT 1
44646: PUSH
44647: EMPTY
44648: LIST
44649: LIST
44650: PUSH
44651: LD_INT 2
44653: NEG
44654: PUSH
44655: LD_INT 0
44657: PUSH
44658: EMPTY
44659: LIST
44660: LIST
44661: PUSH
44662: LD_INT 2
44664: NEG
44665: PUSH
44666: LD_INT 1
44668: NEG
44669: PUSH
44670: EMPTY
44671: LIST
44672: LIST
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: LIST
44678: LIST
44679: LIST
44680: LIST
44681: LIST
44682: LIST
44683: LIST
44684: LIST
44685: LIST
44686: LIST
44687: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44688: LD_ADDR_VAR 0 52
44692: PUSH
44693: LD_INT 0
44695: PUSH
44696: LD_INT 0
44698: PUSH
44699: EMPTY
44700: LIST
44701: LIST
44702: PUSH
44703: LD_INT 0
44705: PUSH
44706: LD_INT 1
44708: NEG
44709: PUSH
44710: EMPTY
44711: LIST
44712: LIST
44713: PUSH
44714: LD_INT 1
44716: PUSH
44717: LD_INT 0
44719: PUSH
44720: EMPTY
44721: LIST
44722: LIST
44723: PUSH
44724: LD_INT 1
44726: PUSH
44727: LD_INT 1
44729: PUSH
44730: EMPTY
44731: LIST
44732: LIST
44733: PUSH
44734: LD_INT 0
44736: PUSH
44737: LD_INT 1
44739: PUSH
44740: EMPTY
44741: LIST
44742: LIST
44743: PUSH
44744: LD_INT 1
44746: NEG
44747: PUSH
44748: LD_INT 0
44750: PUSH
44751: EMPTY
44752: LIST
44753: LIST
44754: PUSH
44755: LD_INT 1
44757: NEG
44758: PUSH
44759: LD_INT 1
44761: NEG
44762: PUSH
44763: EMPTY
44764: LIST
44765: LIST
44766: PUSH
44767: LD_INT 1
44769: NEG
44770: PUSH
44771: LD_INT 2
44773: NEG
44774: PUSH
44775: EMPTY
44776: LIST
44777: LIST
44778: PUSH
44779: LD_INT 1
44781: NEG
44782: PUSH
44783: LD_INT 1
44785: PUSH
44786: EMPTY
44787: LIST
44788: LIST
44789: PUSH
44790: LD_INT 2
44792: NEG
44793: PUSH
44794: LD_INT 0
44796: PUSH
44797: EMPTY
44798: LIST
44799: LIST
44800: PUSH
44801: LD_INT 2
44803: NEG
44804: PUSH
44805: LD_INT 1
44807: NEG
44808: PUSH
44809: EMPTY
44810: LIST
44811: LIST
44812: PUSH
44813: LD_INT 2
44815: NEG
44816: PUSH
44817: LD_INT 2
44819: NEG
44820: PUSH
44821: EMPTY
44822: LIST
44823: LIST
44824: PUSH
44825: EMPTY
44826: LIST
44827: LIST
44828: LIST
44829: LIST
44830: LIST
44831: LIST
44832: LIST
44833: LIST
44834: LIST
44835: LIST
44836: LIST
44837: LIST
44838: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44839: LD_ADDR_VAR 0 53
44843: PUSH
44844: LD_INT 0
44846: PUSH
44847: LD_INT 0
44849: PUSH
44850: EMPTY
44851: LIST
44852: LIST
44853: PUSH
44854: LD_INT 0
44856: PUSH
44857: LD_INT 1
44859: NEG
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: PUSH
44865: LD_INT 1
44867: PUSH
44868: LD_INT 0
44870: PUSH
44871: EMPTY
44872: LIST
44873: LIST
44874: PUSH
44875: LD_INT 1
44877: PUSH
44878: LD_INT 1
44880: PUSH
44881: EMPTY
44882: LIST
44883: LIST
44884: PUSH
44885: LD_INT 0
44887: PUSH
44888: LD_INT 1
44890: PUSH
44891: EMPTY
44892: LIST
44893: LIST
44894: PUSH
44895: LD_INT 1
44897: NEG
44898: PUSH
44899: LD_INT 0
44901: PUSH
44902: EMPTY
44903: LIST
44904: LIST
44905: PUSH
44906: LD_INT 1
44908: NEG
44909: PUSH
44910: LD_INT 1
44912: NEG
44913: PUSH
44914: EMPTY
44915: LIST
44916: LIST
44917: PUSH
44918: LD_INT 1
44920: NEG
44921: PUSH
44922: LD_INT 2
44924: NEG
44925: PUSH
44926: EMPTY
44927: LIST
44928: LIST
44929: PUSH
44930: LD_INT 0
44932: PUSH
44933: LD_INT 2
44935: NEG
44936: PUSH
44937: EMPTY
44938: LIST
44939: LIST
44940: PUSH
44941: LD_INT 1
44943: PUSH
44944: LD_INT 1
44946: NEG
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: PUSH
44952: LD_INT 2
44954: PUSH
44955: LD_INT 0
44957: PUSH
44958: EMPTY
44959: LIST
44960: LIST
44961: PUSH
44962: LD_INT 2
44964: PUSH
44965: LD_INT 1
44967: PUSH
44968: EMPTY
44969: LIST
44970: LIST
44971: PUSH
44972: LD_INT 2
44974: PUSH
44975: LD_INT 2
44977: PUSH
44978: EMPTY
44979: LIST
44980: LIST
44981: PUSH
44982: LD_INT 1
44984: PUSH
44985: LD_INT 2
44987: PUSH
44988: EMPTY
44989: LIST
44990: LIST
44991: PUSH
44992: LD_INT 0
44994: PUSH
44995: LD_INT 2
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: PUSH
45002: LD_INT 1
45004: NEG
45005: PUSH
45006: LD_INT 1
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: PUSH
45013: LD_INT 2
45015: NEG
45016: PUSH
45017: LD_INT 0
45019: PUSH
45020: EMPTY
45021: LIST
45022: LIST
45023: PUSH
45024: LD_INT 2
45026: NEG
45027: PUSH
45028: LD_INT 1
45030: NEG
45031: PUSH
45032: EMPTY
45033: LIST
45034: LIST
45035: PUSH
45036: LD_INT 2
45038: NEG
45039: PUSH
45040: LD_INT 2
45042: NEG
45043: PUSH
45044: EMPTY
45045: LIST
45046: LIST
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: LIST
45052: LIST
45053: LIST
45054: LIST
45055: LIST
45056: LIST
45057: LIST
45058: LIST
45059: LIST
45060: LIST
45061: LIST
45062: LIST
45063: LIST
45064: LIST
45065: LIST
45066: LIST
45067: LIST
45068: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45069: LD_ADDR_VAR 0 54
45073: PUSH
45074: LD_INT 0
45076: PUSH
45077: LD_INT 0
45079: PUSH
45080: EMPTY
45081: LIST
45082: LIST
45083: PUSH
45084: LD_INT 0
45086: PUSH
45087: LD_INT 1
45089: NEG
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: PUSH
45095: LD_INT 1
45097: PUSH
45098: LD_INT 0
45100: PUSH
45101: EMPTY
45102: LIST
45103: LIST
45104: PUSH
45105: LD_INT 1
45107: PUSH
45108: LD_INT 1
45110: PUSH
45111: EMPTY
45112: LIST
45113: LIST
45114: PUSH
45115: LD_INT 0
45117: PUSH
45118: LD_INT 1
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: PUSH
45125: LD_INT 1
45127: NEG
45128: PUSH
45129: LD_INT 0
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: PUSH
45136: LD_INT 1
45138: NEG
45139: PUSH
45140: LD_INT 1
45142: NEG
45143: PUSH
45144: EMPTY
45145: LIST
45146: LIST
45147: PUSH
45148: LD_INT 1
45150: NEG
45151: PUSH
45152: LD_INT 2
45154: NEG
45155: PUSH
45156: EMPTY
45157: LIST
45158: LIST
45159: PUSH
45160: LD_INT 0
45162: PUSH
45163: LD_INT 2
45165: NEG
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: PUSH
45171: LD_INT 1
45173: PUSH
45174: LD_INT 1
45176: NEG
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PUSH
45182: LD_INT 2
45184: PUSH
45185: LD_INT 0
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: PUSH
45192: LD_INT 2
45194: PUSH
45195: LD_INT 1
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: PUSH
45202: LD_INT 2
45204: PUSH
45205: LD_INT 2
45207: PUSH
45208: EMPTY
45209: LIST
45210: LIST
45211: PUSH
45212: LD_INT 1
45214: PUSH
45215: LD_INT 2
45217: PUSH
45218: EMPTY
45219: LIST
45220: LIST
45221: PUSH
45222: LD_INT 0
45224: PUSH
45225: LD_INT 2
45227: PUSH
45228: EMPTY
45229: LIST
45230: LIST
45231: PUSH
45232: LD_INT 1
45234: NEG
45235: PUSH
45236: LD_INT 1
45238: PUSH
45239: EMPTY
45240: LIST
45241: LIST
45242: PUSH
45243: LD_INT 2
45245: NEG
45246: PUSH
45247: LD_INT 0
45249: PUSH
45250: EMPTY
45251: LIST
45252: LIST
45253: PUSH
45254: LD_INT 2
45256: NEG
45257: PUSH
45258: LD_INT 1
45260: NEG
45261: PUSH
45262: EMPTY
45263: LIST
45264: LIST
45265: PUSH
45266: LD_INT 2
45268: NEG
45269: PUSH
45270: LD_INT 2
45272: NEG
45273: PUSH
45274: EMPTY
45275: LIST
45276: LIST
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: LIST
45282: LIST
45283: LIST
45284: LIST
45285: LIST
45286: LIST
45287: LIST
45288: LIST
45289: LIST
45290: LIST
45291: LIST
45292: LIST
45293: LIST
45294: LIST
45295: LIST
45296: LIST
45297: LIST
45298: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45299: LD_ADDR_VAR 0 55
45303: PUSH
45304: LD_INT 0
45306: PUSH
45307: LD_INT 0
45309: PUSH
45310: EMPTY
45311: LIST
45312: LIST
45313: PUSH
45314: LD_INT 0
45316: PUSH
45317: LD_INT 1
45319: NEG
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: PUSH
45325: LD_INT 1
45327: PUSH
45328: LD_INT 0
45330: PUSH
45331: EMPTY
45332: LIST
45333: LIST
45334: PUSH
45335: LD_INT 1
45337: PUSH
45338: LD_INT 1
45340: PUSH
45341: EMPTY
45342: LIST
45343: LIST
45344: PUSH
45345: LD_INT 0
45347: PUSH
45348: LD_INT 1
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: PUSH
45355: LD_INT 1
45357: NEG
45358: PUSH
45359: LD_INT 0
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: LD_INT 1
45368: NEG
45369: PUSH
45370: LD_INT 1
45372: NEG
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: PUSH
45378: LD_INT 1
45380: NEG
45381: PUSH
45382: LD_INT 2
45384: NEG
45385: PUSH
45386: EMPTY
45387: LIST
45388: LIST
45389: PUSH
45390: LD_INT 0
45392: PUSH
45393: LD_INT 2
45395: NEG
45396: PUSH
45397: EMPTY
45398: LIST
45399: LIST
45400: PUSH
45401: LD_INT 1
45403: PUSH
45404: LD_INT 1
45406: NEG
45407: PUSH
45408: EMPTY
45409: LIST
45410: LIST
45411: PUSH
45412: LD_INT 2
45414: PUSH
45415: LD_INT 0
45417: PUSH
45418: EMPTY
45419: LIST
45420: LIST
45421: PUSH
45422: LD_INT 2
45424: PUSH
45425: LD_INT 1
45427: PUSH
45428: EMPTY
45429: LIST
45430: LIST
45431: PUSH
45432: LD_INT 2
45434: PUSH
45435: LD_INT 2
45437: PUSH
45438: EMPTY
45439: LIST
45440: LIST
45441: PUSH
45442: LD_INT 1
45444: PUSH
45445: LD_INT 2
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: PUSH
45452: LD_INT 0
45454: PUSH
45455: LD_INT 2
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: LD_INT 1
45464: NEG
45465: PUSH
45466: LD_INT 1
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: PUSH
45473: LD_INT 2
45475: NEG
45476: PUSH
45477: LD_INT 0
45479: PUSH
45480: EMPTY
45481: LIST
45482: LIST
45483: PUSH
45484: LD_INT 2
45486: NEG
45487: PUSH
45488: LD_INT 1
45490: NEG
45491: PUSH
45492: EMPTY
45493: LIST
45494: LIST
45495: PUSH
45496: LD_INT 2
45498: NEG
45499: PUSH
45500: LD_INT 2
45502: NEG
45503: PUSH
45504: EMPTY
45505: LIST
45506: LIST
45507: PUSH
45508: EMPTY
45509: LIST
45510: LIST
45511: LIST
45512: LIST
45513: LIST
45514: LIST
45515: LIST
45516: LIST
45517: LIST
45518: LIST
45519: LIST
45520: LIST
45521: LIST
45522: LIST
45523: LIST
45524: LIST
45525: LIST
45526: LIST
45527: LIST
45528: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45529: LD_ADDR_VAR 0 56
45533: PUSH
45534: LD_INT 0
45536: PUSH
45537: LD_INT 0
45539: PUSH
45540: EMPTY
45541: LIST
45542: LIST
45543: PUSH
45544: LD_INT 0
45546: PUSH
45547: LD_INT 1
45549: NEG
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: PUSH
45555: LD_INT 1
45557: PUSH
45558: LD_INT 0
45560: PUSH
45561: EMPTY
45562: LIST
45563: LIST
45564: PUSH
45565: LD_INT 1
45567: PUSH
45568: LD_INT 1
45570: PUSH
45571: EMPTY
45572: LIST
45573: LIST
45574: PUSH
45575: LD_INT 0
45577: PUSH
45578: LD_INT 1
45580: PUSH
45581: EMPTY
45582: LIST
45583: LIST
45584: PUSH
45585: LD_INT 1
45587: NEG
45588: PUSH
45589: LD_INT 0
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: PUSH
45596: LD_INT 1
45598: NEG
45599: PUSH
45600: LD_INT 1
45602: NEG
45603: PUSH
45604: EMPTY
45605: LIST
45606: LIST
45607: PUSH
45608: LD_INT 1
45610: NEG
45611: PUSH
45612: LD_INT 2
45614: NEG
45615: PUSH
45616: EMPTY
45617: LIST
45618: LIST
45619: PUSH
45620: LD_INT 0
45622: PUSH
45623: LD_INT 2
45625: NEG
45626: PUSH
45627: EMPTY
45628: LIST
45629: LIST
45630: PUSH
45631: LD_INT 1
45633: PUSH
45634: LD_INT 1
45636: NEG
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: PUSH
45642: LD_INT 2
45644: PUSH
45645: LD_INT 0
45647: PUSH
45648: EMPTY
45649: LIST
45650: LIST
45651: PUSH
45652: LD_INT 2
45654: PUSH
45655: LD_INT 1
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: PUSH
45662: LD_INT 2
45664: PUSH
45665: LD_INT 2
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: PUSH
45672: LD_INT 1
45674: PUSH
45675: LD_INT 2
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: PUSH
45682: LD_INT 0
45684: PUSH
45685: LD_INT 2
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: PUSH
45692: LD_INT 1
45694: NEG
45695: PUSH
45696: LD_INT 1
45698: PUSH
45699: EMPTY
45700: LIST
45701: LIST
45702: PUSH
45703: LD_INT 2
45705: NEG
45706: PUSH
45707: LD_INT 0
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: PUSH
45714: LD_INT 2
45716: NEG
45717: PUSH
45718: LD_INT 1
45720: NEG
45721: PUSH
45722: EMPTY
45723: LIST
45724: LIST
45725: PUSH
45726: LD_INT 2
45728: NEG
45729: PUSH
45730: LD_INT 2
45732: NEG
45733: PUSH
45734: EMPTY
45735: LIST
45736: LIST
45737: PUSH
45738: EMPTY
45739: LIST
45740: LIST
45741: LIST
45742: LIST
45743: LIST
45744: LIST
45745: LIST
45746: LIST
45747: LIST
45748: LIST
45749: LIST
45750: LIST
45751: LIST
45752: LIST
45753: LIST
45754: LIST
45755: LIST
45756: LIST
45757: LIST
45758: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45759: LD_ADDR_VAR 0 57
45763: PUSH
45764: LD_INT 0
45766: PUSH
45767: LD_INT 0
45769: PUSH
45770: EMPTY
45771: LIST
45772: LIST
45773: PUSH
45774: LD_INT 0
45776: PUSH
45777: LD_INT 1
45779: NEG
45780: PUSH
45781: EMPTY
45782: LIST
45783: LIST
45784: PUSH
45785: LD_INT 1
45787: PUSH
45788: LD_INT 0
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: PUSH
45795: LD_INT 1
45797: PUSH
45798: LD_INT 1
45800: PUSH
45801: EMPTY
45802: LIST
45803: LIST
45804: PUSH
45805: LD_INT 0
45807: PUSH
45808: LD_INT 1
45810: PUSH
45811: EMPTY
45812: LIST
45813: LIST
45814: PUSH
45815: LD_INT 1
45817: NEG
45818: PUSH
45819: LD_INT 0
45821: PUSH
45822: EMPTY
45823: LIST
45824: LIST
45825: PUSH
45826: LD_INT 1
45828: NEG
45829: PUSH
45830: LD_INT 1
45832: NEG
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: PUSH
45838: LD_INT 1
45840: NEG
45841: PUSH
45842: LD_INT 2
45844: NEG
45845: PUSH
45846: EMPTY
45847: LIST
45848: LIST
45849: PUSH
45850: LD_INT 0
45852: PUSH
45853: LD_INT 2
45855: NEG
45856: PUSH
45857: EMPTY
45858: LIST
45859: LIST
45860: PUSH
45861: LD_INT 1
45863: PUSH
45864: LD_INT 1
45866: NEG
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: PUSH
45872: LD_INT 2
45874: PUSH
45875: LD_INT 0
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: PUSH
45882: LD_INT 2
45884: PUSH
45885: LD_INT 1
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: PUSH
45892: LD_INT 2
45894: PUSH
45895: LD_INT 2
45897: PUSH
45898: EMPTY
45899: LIST
45900: LIST
45901: PUSH
45902: LD_INT 1
45904: PUSH
45905: LD_INT 2
45907: PUSH
45908: EMPTY
45909: LIST
45910: LIST
45911: PUSH
45912: LD_INT 0
45914: PUSH
45915: LD_INT 2
45917: PUSH
45918: EMPTY
45919: LIST
45920: LIST
45921: PUSH
45922: LD_INT 1
45924: NEG
45925: PUSH
45926: LD_INT 1
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: PUSH
45933: LD_INT 2
45935: NEG
45936: PUSH
45937: LD_INT 0
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: PUSH
45944: LD_INT 2
45946: NEG
45947: PUSH
45948: LD_INT 1
45950: NEG
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: PUSH
45956: LD_INT 2
45958: NEG
45959: PUSH
45960: LD_INT 2
45962: NEG
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: LIST
45972: LIST
45973: LIST
45974: LIST
45975: LIST
45976: LIST
45977: LIST
45978: LIST
45979: LIST
45980: LIST
45981: LIST
45982: LIST
45983: LIST
45984: LIST
45985: LIST
45986: LIST
45987: LIST
45988: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45989: LD_ADDR_VAR 0 58
45993: PUSH
45994: LD_INT 0
45996: PUSH
45997: LD_INT 0
45999: PUSH
46000: EMPTY
46001: LIST
46002: LIST
46003: PUSH
46004: LD_INT 0
46006: PUSH
46007: LD_INT 1
46009: NEG
46010: PUSH
46011: EMPTY
46012: LIST
46013: LIST
46014: PUSH
46015: LD_INT 1
46017: PUSH
46018: LD_INT 0
46020: PUSH
46021: EMPTY
46022: LIST
46023: LIST
46024: PUSH
46025: LD_INT 1
46027: PUSH
46028: LD_INT 1
46030: PUSH
46031: EMPTY
46032: LIST
46033: LIST
46034: PUSH
46035: LD_INT 0
46037: PUSH
46038: LD_INT 1
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: PUSH
46045: LD_INT 1
46047: NEG
46048: PUSH
46049: LD_INT 0
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: PUSH
46056: LD_INT 1
46058: NEG
46059: PUSH
46060: LD_INT 1
46062: NEG
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: PUSH
46068: LD_INT 1
46070: NEG
46071: PUSH
46072: LD_INT 2
46074: NEG
46075: PUSH
46076: EMPTY
46077: LIST
46078: LIST
46079: PUSH
46080: LD_INT 0
46082: PUSH
46083: LD_INT 2
46085: NEG
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: PUSH
46091: LD_INT 1
46093: PUSH
46094: LD_INT 1
46096: NEG
46097: PUSH
46098: EMPTY
46099: LIST
46100: LIST
46101: PUSH
46102: LD_INT 2
46104: PUSH
46105: LD_INT 0
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: PUSH
46112: LD_INT 2
46114: PUSH
46115: LD_INT 1
46117: PUSH
46118: EMPTY
46119: LIST
46120: LIST
46121: PUSH
46122: LD_INT 2
46124: PUSH
46125: LD_INT 2
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: PUSH
46132: LD_INT 1
46134: PUSH
46135: LD_INT 2
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: PUSH
46142: LD_INT 0
46144: PUSH
46145: LD_INT 2
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: PUSH
46152: LD_INT 1
46154: NEG
46155: PUSH
46156: LD_INT 1
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: PUSH
46163: LD_INT 2
46165: NEG
46166: PUSH
46167: LD_INT 0
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: PUSH
46174: LD_INT 2
46176: NEG
46177: PUSH
46178: LD_INT 1
46180: NEG
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: PUSH
46186: LD_INT 2
46188: NEG
46189: PUSH
46190: LD_INT 2
46192: NEG
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: LIST
46202: LIST
46203: LIST
46204: LIST
46205: LIST
46206: LIST
46207: LIST
46208: LIST
46209: LIST
46210: LIST
46211: LIST
46212: LIST
46213: LIST
46214: LIST
46215: LIST
46216: LIST
46217: LIST
46218: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46219: LD_ADDR_VAR 0 59
46223: PUSH
46224: LD_INT 0
46226: PUSH
46227: LD_INT 0
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: PUSH
46234: LD_INT 0
46236: PUSH
46237: LD_INT 1
46239: NEG
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: PUSH
46245: LD_INT 1
46247: PUSH
46248: LD_INT 0
46250: PUSH
46251: EMPTY
46252: LIST
46253: LIST
46254: PUSH
46255: LD_INT 1
46257: PUSH
46258: LD_INT 1
46260: PUSH
46261: EMPTY
46262: LIST
46263: LIST
46264: PUSH
46265: LD_INT 0
46267: PUSH
46268: LD_INT 1
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: PUSH
46275: LD_INT 1
46277: NEG
46278: PUSH
46279: LD_INT 0
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: PUSH
46286: LD_INT 1
46288: NEG
46289: PUSH
46290: LD_INT 1
46292: NEG
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: LIST
46302: LIST
46303: LIST
46304: LIST
46305: LIST
46306: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46307: LD_ADDR_VAR 0 60
46311: PUSH
46312: LD_INT 0
46314: PUSH
46315: LD_INT 0
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: PUSH
46322: LD_INT 0
46324: PUSH
46325: LD_INT 1
46327: NEG
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: PUSH
46333: LD_INT 1
46335: PUSH
46336: LD_INT 0
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: PUSH
46343: LD_INT 1
46345: PUSH
46346: LD_INT 1
46348: PUSH
46349: EMPTY
46350: LIST
46351: LIST
46352: PUSH
46353: LD_INT 0
46355: PUSH
46356: LD_INT 1
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: PUSH
46363: LD_INT 1
46365: NEG
46366: PUSH
46367: LD_INT 0
46369: PUSH
46370: EMPTY
46371: LIST
46372: LIST
46373: PUSH
46374: LD_INT 1
46376: NEG
46377: PUSH
46378: LD_INT 1
46380: NEG
46381: PUSH
46382: EMPTY
46383: LIST
46384: LIST
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: LIST
46390: LIST
46391: LIST
46392: LIST
46393: LIST
46394: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46395: LD_ADDR_VAR 0 61
46399: PUSH
46400: LD_INT 0
46402: PUSH
46403: LD_INT 0
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PUSH
46410: LD_INT 0
46412: PUSH
46413: LD_INT 1
46415: NEG
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: PUSH
46421: LD_INT 1
46423: PUSH
46424: LD_INT 0
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: PUSH
46431: LD_INT 1
46433: PUSH
46434: LD_INT 1
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: PUSH
46441: LD_INT 0
46443: PUSH
46444: LD_INT 1
46446: PUSH
46447: EMPTY
46448: LIST
46449: LIST
46450: PUSH
46451: LD_INT 1
46453: NEG
46454: PUSH
46455: LD_INT 0
46457: PUSH
46458: EMPTY
46459: LIST
46460: LIST
46461: PUSH
46462: LD_INT 1
46464: NEG
46465: PUSH
46466: LD_INT 1
46468: NEG
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: LIST
46478: LIST
46479: LIST
46480: LIST
46481: LIST
46482: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46483: LD_ADDR_VAR 0 62
46487: PUSH
46488: LD_INT 0
46490: PUSH
46491: LD_INT 0
46493: PUSH
46494: EMPTY
46495: LIST
46496: LIST
46497: PUSH
46498: LD_INT 0
46500: PUSH
46501: LD_INT 1
46503: NEG
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: PUSH
46509: LD_INT 1
46511: PUSH
46512: LD_INT 0
46514: PUSH
46515: EMPTY
46516: LIST
46517: LIST
46518: PUSH
46519: LD_INT 1
46521: PUSH
46522: LD_INT 1
46524: PUSH
46525: EMPTY
46526: LIST
46527: LIST
46528: PUSH
46529: LD_INT 0
46531: PUSH
46532: LD_INT 1
46534: PUSH
46535: EMPTY
46536: LIST
46537: LIST
46538: PUSH
46539: LD_INT 1
46541: NEG
46542: PUSH
46543: LD_INT 0
46545: PUSH
46546: EMPTY
46547: LIST
46548: LIST
46549: PUSH
46550: LD_INT 1
46552: NEG
46553: PUSH
46554: LD_INT 1
46556: NEG
46557: PUSH
46558: EMPTY
46559: LIST
46560: LIST
46561: PUSH
46562: EMPTY
46563: LIST
46564: LIST
46565: LIST
46566: LIST
46567: LIST
46568: LIST
46569: LIST
46570: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46571: LD_ADDR_VAR 0 63
46575: PUSH
46576: LD_INT 0
46578: PUSH
46579: LD_INT 0
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: PUSH
46586: LD_INT 0
46588: PUSH
46589: LD_INT 1
46591: NEG
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: PUSH
46597: LD_INT 1
46599: PUSH
46600: LD_INT 0
46602: PUSH
46603: EMPTY
46604: LIST
46605: LIST
46606: PUSH
46607: LD_INT 1
46609: PUSH
46610: LD_INT 1
46612: PUSH
46613: EMPTY
46614: LIST
46615: LIST
46616: PUSH
46617: LD_INT 0
46619: PUSH
46620: LD_INT 1
46622: PUSH
46623: EMPTY
46624: LIST
46625: LIST
46626: PUSH
46627: LD_INT 1
46629: NEG
46630: PUSH
46631: LD_INT 0
46633: PUSH
46634: EMPTY
46635: LIST
46636: LIST
46637: PUSH
46638: LD_INT 1
46640: NEG
46641: PUSH
46642: LD_INT 1
46644: NEG
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: LIST
46654: LIST
46655: LIST
46656: LIST
46657: LIST
46658: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46659: LD_ADDR_VAR 0 64
46663: PUSH
46664: LD_INT 0
46666: PUSH
46667: LD_INT 0
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: PUSH
46674: LD_INT 0
46676: PUSH
46677: LD_INT 1
46679: NEG
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: PUSH
46685: LD_INT 1
46687: PUSH
46688: LD_INT 0
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: PUSH
46695: LD_INT 1
46697: PUSH
46698: LD_INT 1
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: PUSH
46705: LD_INT 0
46707: PUSH
46708: LD_INT 1
46710: PUSH
46711: EMPTY
46712: LIST
46713: LIST
46714: PUSH
46715: LD_INT 1
46717: NEG
46718: PUSH
46719: LD_INT 0
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: PUSH
46726: LD_INT 1
46728: NEG
46729: PUSH
46730: LD_INT 1
46732: NEG
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: PUSH
46738: EMPTY
46739: LIST
46740: LIST
46741: LIST
46742: LIST
46743: LIST
46744: LIST
46745: LIST
46746: ST_TO_ADDR
// end ; 1 :
46747: GO 52644
46749: LD_INT 1
46751: DOUBLE
46752: EQUAL
46753: IFTRUE 46757
46755: GO 49380
46757: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46758: LD_ADDR_VAR 0 11
46762: PUSH
46763: LD_INT 1
46765: NEG
46766: PUSH
46767: LD_INT 3
46769: NEG
46770: PUSH
46771: EMPTY
46772: LIST
46773: LIST
46774: PUSH
46775: LD_INT 0
46777: PUSH
46778: LD_INT 3
46780: NEG
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: LD_INT 1
46788: PUSH
46789: LD_INT 2
46791: NEG
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: LIST
46801: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46802: LD_ADDR_VAR 0 12
46806: PUSH
46807: LD_INT 2
46809: PUSH
46810: LD_INT 1
46812: NEG
46813: PUSH
46814: EMPTY
46815: LIST
46816: LIST
46817: PUSH
46818: LD_INT 3
46820: PUSH
46821: LD_INT 0
46823: PUSH
46824: EMPTY
46825: LIST
46826: LIST
46827: PUSH
46828: LD_INT 3
46830: PUSH
46831: LD_INT 1
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: LIST
46842: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46843: LD_ADDR_VAR 0 13
46847: PUSH
46848: LD_INT 3
46850: PUSH
46851: LD_INT 2
46853: PUSH
46854: EMPTY
46855: LIST
46856: LIST
46857: PUSH
46858: LD_INT 3
46860: PUSH
46861: LD_INT 3
46863: PUSH
46864: EMPTY
46865: LIST
46866: LIST
46867: PUSH
46868: LD_INT 2
46870: PUSH
46871: LD_INT 3
46873: PUSH
46874: EMPTY
46875: LIST
46876: LIST
46877: PUSH
46878: EMPTY
46879: LIST
46880: LIST
46881: LIST
46882: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46883: LD_ADDR_VAR 0 14
46887: PUSH
46888: LD_INT 1
46890: PUSH
46891: LD_INT 3
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: PUSH
46898: LD_INT 0
46900: PUSH
46901: LD_INT 3
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: PUSH
46908: LD_INT 1
46910: NEG
46911: PUSH
46912: LD_INT 2
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: PUSH
46919: EMPTY
46920: LIST
46921: LIST
46922: LIST
46923: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46924: LD_ADDR_VAR 0 15
46928: PUSH
46929: LD_INT 2
46931: NEG
46932: PUSH
46933: LD_INT 1
46935: PUSH
46936: EMPTY
46937: LIST
46938: LIST
46939: PUSH
46940: LD_INT 3
46942: NEG
46943: PUSH
46944: LD_INT 0
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: LD_INT 3
46953: NEG
46954: PUSH
46955: LD_INT 1
46957: NEG
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: LIST
46967: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46968: LD_ADDR_VAR 0 16
46972: PUSH
46973: LD_INT 2
46975: NEG
46976: PUSH
46977: LD_INT 3
46979: NEG
46980: PUSH
46981: EMPTY
46982: LIST
46983: LIST
46984: PUSH
46985: LD_INT 3
46987: NEG
46988: PUSH
46989: LD_INT 2
46991: NEG
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: PUSH
46997: LD_INT 3
46999: NEG
47000: PUSH
47001: LD_INT 3
47003: NEG
47004: PUSH
47005: EMPTY
47006: LIST
47007: LIST
47008: PUSH
47009: EMPTY
47010: LIST
47011: LIST
47012: LIST
47013: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47014: LD_ADDR_VAR 0 17
47018: PUSH
47019: LD_INT 1
47021: NEG
47022: PUSH
47023: LD_INT 3
47025: NEG
47026: PUSH
47027: EMPTY
47028: LIST
47029: LIST
47030: PUSH
47031: LD_INT 0
47033: PUSH
47034: LD_INT 3
47036: NEG
47037: PUSH
47038: EMPTY
47039: LIST
47040: LIST
47041: PUSH
47042: LD_INT 1
47044: PUSH
47045: LD_INT 2
47047: NEG
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: PUSH
47053: EMPTY
47054: LIST
47055: LIST
47056: LIST
47057: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47058: LD_ADDR_VAR 0 18
47062: PUSH
47063: LD_INT 2
47065: PUSH
47066: LD_INT 1
47068: NEG
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: PUSH
47074: LD_INT 3
47076: PUSH
47077: LD_INT 0
47079: PUSH
47080: EMPTY
47081: LIST
47082: LIST
47083: PUSH
47084: LD_INT 3
47086: PUSH
47087: LD_INT 1
47089: PUSH
47090: EMPTY
47091: LIST
47092: LIST
47093: PUSH
47094: EMPTY
47095: LIST
47096: LIST
47097: LIST
47098: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47099: LD_ADDR_VAR 0 19
47103: PUSH
47104: LD_INT 3
47106: PUSH
47107: LD_INT 2
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 3
47116: PUSH
47117: LD_INT 3
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 2
47126: PUSH
47127: LD_INT 3
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: EMPTY
47135: LIST
47136: LIST
47137: LIST
47138: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47139: LD_ADDR_VAR 0 20
47143: PUSH
47144: LD_INT 1
47146: PUSH
47147: LD_INT 3
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: PUSH
47154: LD_INT 0
47156: PUSH
47157: LD_INT 3
47159: PUSH
47160: EMPTY
47161: LIST
47162: LIST
47163: PUSH
47164: LD_INT 1
47166: NEG
47167: PUSH
47168: LD_INT 2
47170: PUSH
47171: EMPTY
47172: LIST
47173: LIST
47174: PUSH
47175: EMPTY
47176: LIST
47177: LIST
47178: LIST
47179: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47180: LD_ADDR_VAR 0 21
47184: PUSH
47185: LD_INT 2
47187: NEG
47188: PUSH
47189: LD_INT 1
47191: PUSH
47192: EMPTY
47193: LIST
47194: LIST
47195: PUSH
47196: LD_INT 3
47198: NEG
47199: PUSH
47200: LD_INT 0
47202: PUSH
47203: EMPTY
47204: LIST
47205: LIST
47206: PUSH
47207: LD_INT 3
47209: NEG
47210: PUSH
47211: LD_INT 1
47213: NEG
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: LIST
47223: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47224: LD_ADDR_VAR 0 22
47228: PUSH
47229: LD_INT 2
47231: NEG
47232: PUSH
47233: LD_INT 3
47235: NEG
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: PUSH
47241: LD_INT 3
47243: NEG
47244: PUSH
47245: LD_INT 2
47247: NEG
47248: PUSH
47249: EMPTY
47250: LIST
47251: LIST
47252: PUSH
47253: LD_INT 3
47255: NEG
47256: PUSH
47257: LD_INT 3
47259: NEG
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: EMPTY
47266: LIST
47267: LIST
47268: LIST
47269: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
47270: LD_ADDR_VAR 0 23
47274: PUSH
47275: LD_INT 0
47277: PUSH
47278: LD_INT 3
47280: NEG
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: PUSH
47286: LD_INT 1
47288: NEG
47289: PUSH
47290: LD_INT 4
47292: NEG
47293: PUSH
47294: EMPTY
47295: LIST
47296: LIST
47297: PUSH
47298: LD_INT 1
47300: PUSH
47301: LD_INT 3
47303: NEG
47304: PUSH
47305: EMPTY
47306: LIST
47307: LIST
47308: PUSH
47309: EMPTY
47310: LIST
47311: LIST
47312: LIST
47313: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
47314: LD_ADDR_VAR 0 24
47318: PUSH
47319: LD_INT 3
47321: PUSH
47322: LD_INT 0
47324: PUSH
47325: EMPTY
47326: LIST
47327: LIST
47328: PUSH
47329: LD_INT 3
47331: PUSH
47332: LD_INT 1
47334: NEG
47335: PUSH
47336: EMPTY
47337: LIST
47338: LIST
47339: PUSH
47340: LD_INT 4
47342: PUSH
47343: LD_INT 1
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: LIST
47354: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
47355: LD_ADDR_VAR 0 25
47359: PUSH
47360: LD_INT 3
47362: PUSH
47363: LD_INT 3
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: PUSH
47370: LD_INT 4
47372: PUSH
47373: LD_INT 3
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: PUSH
47380: LD_INT 3
47382: PUSH
47383: LD_INT 4
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: LIST
47394: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
47395: LD_ADDR_VAR 0 26
47399: PUSH
47400: LD_INT 0
47402: PUSH
47403: LD_INT 3
47405: PUSH
47406: EMPTY
47407: LIST
47408: LIST
47409: PUSH
47410: LD_INT 1
47412: PUSH
47413: LD_INT 4
47415: PUSH
47416: EMPTY
47417: LIST
47418: LIST
47419: PUSH
47420: LD_INT 1
47422: NEG
47423: PUSH
47424: LD_INT 3
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: PUSH
47431: EMPTY
47432: LIST
47433: LIST
47434: LIST
47435: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
47436: LD_ADDR_VAR 0 27
47440: PUSH
47441: LD_INT 3
47443: NEG
47444: PUSH
47445: LD_INT 0
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: LD_INT 3
47454: NEG
47455: PUSH
47456: LD_INT 1
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: PUSH
47463: LD_INT 4
47465: NEG
47466: PUSH
47467: LD_INT 1
47469: NEG
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: PUSH
47475: EMPTY
47476: LIST
47477: LIST
47478: LIST
47479: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
47480: LD_ADDR_VAR 0 28
47484: PUSH
47485: LD_INT 3
47487: NEG
47488: PUSH
47489: LD_INT 3
47491: NEG
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: LD_INT 3
47499: NEG
47500: PUSH
47501: LD_INT 4
47503: NEG
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: LD_INT 4
47511: NEG
47512: PUSH
47513: LD_INT 3
47515: NEG
47516: PUSH
47517: EMPTY
47518: LIST
47519: LIST
47520: PUSH
47521: EMPTY
47522: LIST
47523: LIST
47524: LIST
47525: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
47526: LD_ADDR_VAR 0 29
47530: PUSH
47531: LD_INT 1
47533: NEG
47534: PUSH
47535: LD_INT 3
47537: NEG
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: PUSH
47543: LD_INT 0
47545: PUSH
47546: LD_INT 3
47548: NEG
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: PUSH
47554: LD_INT 1
47556: PUSH
47557: LD_INT 2
47559: NEG
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: PUSH
47565: LD_INT 1
47567: NEG
47568: PUSH
47569: LD_INT 4
47571: NEG
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: PUSH
47577: LD_INT 0
47579: PUSH
47580: LD_INT 4
47582: NEG
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: PUSH
47588: LD_INT 1
47590: PUSH
47591: LD_INT 3
47593: NEG
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: PUSH
47599: LD_INT 1
47601: NEG
47602: PUSH
47603: LD_INT 5
47605: NEG
47606: PUSH
47607: EMPTY
47608: LIST
47609: LIST
47610: PUSH
47611: LD_INT 0
47613: PUSH
47614: LD_INT 5
47616: NEG
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: PUSH
47622: LD_INT 1
47624: PUSH
47625: LD_INT 4
47627: NEG
47628: PUSH
47629: EMPTY
47630: LIST
47631: LIST
47632: PUSH
47633: LD_INT 1
47635: NEG
47636: PUSH
47637: LD_INT 6
47639: NEG
47640: PUSH
47641: EMPTY
47642: LIST
47643: LIST
47644: PUSH
47645: LD_INT 0
47647: PUSH
47648: LD_INT 6
47650: NEG
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: PUSH
47656: LD_INT 1
47658: PUSH
47659: LD_INT 5
47661: NEG
47662: PUSH
47663: EMPTY
47664: LIST
47665: LIST
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: LIST
47671: LIST
47672: LIST
47673: LIST
47674: LIST
47675: LIST
47676: LIST
47677: LIST
47678: LIST
47679: LIST
47680: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
47681: LD_ADDR_VAR 0 30
47685: PUSH
47686: LD_INT 2
47688: PUSH
47689: LD_INT 1
47691: NEG
47692: PUSH
47693: EMPTY
47694: LIST
47695: LIST
47696: PUSH
47697: LD_INT 3
47699: PUSH
47700: LD_INT 0
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: PUSH
47707: LD_INT 3
47709: PUSH
47710: LD_INT 1
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: PUSH
47717: LD_INT 3
47719: PUSH
47720: LD_INT 1
47722: NEG
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: PUSH
47728: LD_INT 4
47730: PUSH
47731: LD_INT 0
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: PUSH
47738: LD_INT 4
47740: PUSH
47741: LD_INT 1
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: PUSH
47748: LD_INT 4
47750: PUSH
47751: LD_INT 1
47753: NEG
47754: PUSH
47755: EMPTY
47756: LIST
47757: LIST
47758: PUSH
47759: LD_INT 5
47761: PUSH
47762: LD_INT 0
47764: PUSH
47765: EMPTY
47766: LIST
47767: LIST
47768: PUSH
47769: LD_INT 5
47771: PUSH
47772: LD_INT 1
47774: PUSH
47775: EMPTY
47776: LIST
47777: LIST
47778: PUSH
47779: LD_INT 5
47781: PUSH
47782: LD_INT 1
47784: NEG
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: PUSH
47790: LD_INT 6
47792: PUSH
47793: LD_INT 0
47795: PUSH
47796: EMPTY
47797: LIST
47798: LIST
47799: PUSH
47800: LD_INT 6
47802: PUSH
47803: LD_INT 1
47805: PUSH
47806: EMPTY
47807: LIST
47808: LIST
47809: PUSH
47810: EMPTY
47811: LIST
47812: LIST
47813: LIST
47814: LIST
47815: LIST
47816: LIST
47817: LIST
47818: LIST
47819: LIST
47820: LIST
47821: LIST
47822: LIST
47823: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
47824: LD_ADDR_VAR 0 31
47828: PUSH
47829: LD_INT 3
47831: PUSH
47832: LD_INT 2
47834: PUSH
47835: EMPTY
47836: LIST
47837: LIST
47838: PUSH
47839: LD_INT 3
47841: PUSH
47842: LD_INT 3
47844: PUSH
47845: EMPTY
47846: LIST
47847: LIST
47848: PUSH
47849: LD_INT 2
47851: PUSH
47852: LD_INT 3
47854: PUSH
47855: EMPTY
47856: LIST
47857: LIST
47858: PUSH
47859: LD_INT 4
47861: PUSH
47862: LD_INT 3
47864: PUSH
47865: EMPTY
47866: LIST
47867: LIST
47868: PUSH
47869: LD_INT 4
47871: PUSH
47872: LD_INT 4
47874: PUSH
47875: EMPTY
47876: LIST
47877: LIST
47878: PUSH
47879: LD_INT 3
47881: PUSH
47882: LD_INT 4
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: PUSH
47889: LD_INT 5
47891: PUSH
47892: LD_INT 4
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: PUSH
47899: LD_INT 5
47901: PUSH
47902: LD_INT 5
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: LD_INT 4
47911: PUSH
47912: LD_INT 5
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: LD_INT 6
47921: PUSH
47922: LD_INT 5
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PUSH
47929: LD_INT 6
47931: PUSH
47932: LD_INT 6
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: PUSH
47939: LD_INT 5
47941: PUSH
47942: LD_INT 6
47944: PUSH
47945: EMPTY
47946: LIST
47947: LIST
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: LIST
47953: LIST
47954: LIST
47955: LIST
47956: LIST
47957: LIST
47958: LIST
47959: LIST
47960: LIST
47961: LIST
47962: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
47963: LD_ADDR_VAR 0 32
47967: PUSH
47968: LD_INT 1
47970: PUSH
47971: LD_INT 3
47973: PUSH
47974: EMPTY
47975: LIST
47976: LIST
47977: PUSH
47978: LD_INT 0
47980: PUSH
47981: LD_INT 3
47983: PUSH
47984: EMPTY
47985: LIST
47986: LIST
47987: PUSH
47988: LD_INT 1
47990: NEG
47991: PUSH
47992: LD_INT 2
47994: PUSH
47995: EMPTY
47996: LIST
47997: LIST
47998: PUSH
47999: LD_INT 1
48001: PUSH
48002: LD_INT 4
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: PUSH
48009: LD_INT 0
48011: PUSH
48012: LD_INT 4
48014: PUSH
48015: EMPTY
48016: LIST
48017: LIST
48018: PUSH
48019: LD_INT 1
48021: NEG
48022: PUSH
48023: LD_INT 3
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: PUSH
48030: LD_INT 1
48032: PUSH
48033: LD_INT 5
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: PUSH
48040: LD_INT 0
48042: PUSH
48043: LD_INT 5
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 1
48052: NEG
48053: PUSH
48054: LD_INT 4
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: PUSH
48061: LD_INT 1
48063: PUSH
48064: LD_INT 6
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: PUSH
48071: LD_INT 0
48073: PUSH
48074: LD_INT 6
48076: PUSH
48077: EMPTY
48078: LIST
48079: LIST
48080: PUSH
48081: LD_INT 1
48083: NEG
48084: PUSH
48085: LD_INT 5
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: LIST
48096: LIST
48097: LIST
48098: LIST
48099: LIST
48100: LIST
48101: LIST
48102: LIST
48103: LIST
48104: LIST
48105: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
48106: LD_ADDR_VAR 0 33
48110: PUSH
48111: LD_INT 2
48113: NEG
48114: PUSH
48115: LD_INT 1
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: LD_INT 3
48124: NEG
48125: PUSH
48126: LD_INT 0
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 3
48135: NEG
48136: PUSH
48137: LD_INT 1
48139: NEG
48140: PUSH
48141: EMPTY
48142: LIST
48143: LIST
48144: PUSH
48145: LD_INT 3
48147: NEG
48148: PUSH
48149: LD_INT 1
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: PUSH
48156: LD_INT 4
48158: NEG
48159: PUSH
48160: LD_INT 0
48162: PUSH
48163: EMPTY
48164: LIST
48165: LIST
48166: PUSH
48167: LD_INT 4
48169: NEG
48170: PUSH
48171: LD_INT 1
48173: NEG
48174: PUSH
48175: EMPTY
48176: LIST
48177: LIST
48178: PUSH
48179: LD_INT 4
48181: NEG
48182: PUSH
48183: LD_INT 1
48185: PUSH
48186: EMPTY
48187: LIST
48188: LIST
48189: PUSH
48190: LD_INT 5
48192: NEG
48193: PUSH
48194: LD_INT 0
48196: PUSH
48197: EMPTY
48198: LIST
48199: LIST
48200: PUSH
48201: LD_INT 5
48203: NEG
48204: PUSH
48205: LD_INT 1
48207: NEG
48208: PUSH
48209: EMPTY
48210: LIST
48211: LIST
48212: PUSH
48213: LD_INT 5
48215: NEG
48216: PUSH
48217: LD_INT 1
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: PUSH
48224: LD_INT 6
48226: NEG
48227: PUSH
48228: LD_INT 0
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: PUSH
48235: LD_INT 6
48237: NEG
48238: PUSH
48239: LD_INT 1
48241: NEG
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: LIST
48251: LIST
48252: LIST
48253: LIST
48254: LIST
48255: LIST
48256: LIST
48257: LIST
48258: LIST
48259: LIST
48260: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
48261: LD_ADDR_VAR 0 34
48265: PUSH
48266: LD_INT 2
48268: NEG
48269: PUSH
48270: LD_INT 3
48272: NEG
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: LD_INT 3
48280: NEG
48281: PUSH
48282: LD_INT 2
48284: NEG
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: PUSH
48290: LD_INT 3
48292: NEG
48293: PUSH
48294: LD_INT 3
48296: NEG
48297: PUSH
48298: EMPTY
48299: LIST
48300: LIST
48301: PUSH
48302: LD_INT 3
48304: NEG
48305: PUSH
48306: LD_INT 4
48308: NEG
48309: PUSH
48310: EMPTY
48311: LIST
48312: LIST
48313: PUSH
48314: LD_INT 4
48316: NEG
48317: PUSH
48318: LD_INT 3
48320: NEG
48321: PUSH
48322: EMPTY
48323: LIST
48324: LIST
48325: PUSH
48326: LD_INT 4
48328: NEG
48329: PUSH
48330: LD_INT 4
48332: NEG
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: PUSH
48338: LD_INT 4
48340: NEG
48341: PUSH
48342: LD_INT 5
48344: NEG
48345: PUSH
48346: EMPTY
48347: LIST
48348: LIST
48349: PUSH
48350: LD_INT 5
48352: NEG
48353: PUSH
48354: LD_INT 4
48356: NEG
48357: PUSH
48358: EMPTY
48359: LIST
48360: LIST
48361: PUSH
48362: LD_INT 5
48364: NEG
48365: PUSH
48366: LD_INT 5
48368: NEG
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: PUSH
48374: LD_INT 5
48376: NEG
48377: PUSH
48378: LD_INT 6
48380: NEG
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: PUSH
48386: LD_INT 6
48388: NEG
48389: PUSH
48390: LD_INT 5
48392: NEG
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: PUSH
48398: LD_INT 6
48400: NEG
48401: PUSH
48402: LD_INT 6
48404: NEG
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: LIST
48414: LIST
48415: LIST
48416: LIST
48417: LIST
48418: LIST
48419: LIST
48420: LIST
48421: LIST
48422: LIST
48423: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
48424: LD_ADDR_VAR 0 41
48428: PUSH
48429: LD_INT 0
48431: PUSH
48432: LD_INT 2
48434: NEG
48435: PUSH
48436: EMPTY
48437: LIST
48438: LIST
48439: PUSH
48440: LD_INT 1
48442: NEG
48443: PUSH
48444: LD_INT 3
48446: NEG
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: PUSH
48452: LD_INT 1
48454: PUSH
48455: LD_INT 2
48457: NEG
48458: PUSH
48459: EMPTY
48460: LIST
48461: LIST
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: LIST
48467: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
48468: LD_ADDR_VAR 0 42
48472: PUSH
48473: LD_INT 2
48475: PUSH
48476: LD_INT 0
48478: PUSH
48479: EMPTY
48480: LIST
48481: LIST
48482: PUSH
48483: LD_INT 2
48485: PUSH
48486: LD_INT 1
48488: NEG
48489: PUSH
48490: EMPTY
48491: LIST
48492: LIST
48493: PUSH
48494: LD_INT 3
48496: PUSH
48497: LD_INT 1
48499: PUSH
48500: EMPTY
48501: LIST
48502: LIST
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: LIST
48508: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
48509: LD_ADDR_VAR 0 43
48513: PUSH
48514: LD_INT 2
48516: PUSH
48517: LD_INT 2
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: PUSH
48524: LD_INT 3
48526: PUSH
48527: LD_INT 2
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: PUSH
48534: LD_INT 2
48536: PUSH
48537: LD_INT 3
48539: PUSH
48540: EMPTY
48541: LIST
48542: LIST
48543: PUSH
48544: EMPTY
48545: LIST
48546: LIST
48547: LIST
48548: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
48549: LD_ADDR_VAR 0 44
48553: PUSH
48554: LD_INT 0
48556: PUSH
48557: LD_INT 2
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: PUSH
48564: LD_INT 1
48566: PUSH
48567: LD_INT 3
48569: PUSH
48570: EMPTY
48571: LIST
48572: LIST
48573: PUSH
48574: LD_INT 1
48576: NEG
48577: PUSH
48578: LD_INT 2
48580: PUSH
48581: EMPTY
48582: LIST
48583: LIST
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: LIST
48589: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48590: LD_ADDR_VAR 0 45
48594: PUSH
48595: LD_INT 2
48597: NEG
48598: PUSH
48599: LD_INT 0
48601: PUSH
48602: EMPTY
48603: LIST
48604: LIST
48605: PUSH
48606: LD_INT 2
48608: NEG
48609: PUSH
48610: LD_INT 1
48612: PUSH
48613: EMPTY
48614: LIST
48615: LIST
48616: PUSH
48617: LD_INT 3
48619: NEG
48620: PUSH
48621: LD_INT 1
48623: NEG
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: PUSH
48629: EMPTY
48630: LIST
48631: LIST
48632: LIST
48633: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
48634: LD_ADDR_VAR 0 46
48638: PUSH
48639: LD_INT 2
48641: NEG
48642: PUSH
48643: LD_INT 2
48645: NEG
48646: PUSH
48647: EMPTY
48648: LIST
48649: LIST
48650: PUSH
48651: LD_INT 2
48653: NEG
48654: PUSH
48655: LD_INT 3
48657: NEG
48658: PUSH
48659: EMPTY
48660: LIST
48661: LIST
48662: PUSH
48663: LD_INT 3
48665: NEG
48666: PUSH
48667: LD_INT 2
48669: NEG
48670: PUSH
48671: EMPTY
48672: LIST
48673: LIST
48674: PUSH
48675: EMPTY
48676: LIST
48677: LIST
48678: LIST
48679: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
48680: LD_ADDR_VAR 0 47
48684: PUSH
48685: LD_INT 2
48687: NEG
48688: PUSH
48689: LD_INT 3
48691: NEG
48692: PUSH
48693: EMPTY
48694: LIST
48695: LIST
48696: PUSH
48697: LD_INT 1
48699: NEG
48700: PUSH
48701: LD_INT 3
48703: NEG
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48713: LD_ADDR_VAR 0 48
48717: PUSH
48718: LD_INT 1
48720: PUSH
48721: LD_INT 2
48723: NEG
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PUSH
48729: LD_INT 2
48731: PUSH
48732: LD_INT 1
48734: NEG
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: PUSH
48740: EMPTY
48741: LIST
48742: LIST
48743: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
48744: LD_ADDR_VAR 0 49
48748: PUSH
48749: LD_INT 3
48751: PUSH
48752: LD_INT 1
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: PUSH
48759: LD_INT 3
48761: PUSH
48762: LD_INT 2
48764: PUSH
48765: EMPTY
48766: LIST
48767: LIST
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
48773: LD_ADDR_VAR 0 50
48777: PUSH
48778: LD_INT 2
48780: PUSH
48781: LD_INT 3
48783: PUSH
48784: EMPTY
48785: LIST
48786: LIST
48787: PUSH
48788: LD_INT 1
48790: PUSH
48791: LD_INT 3
48793: PUSH
48794: EMPTY
48795: LIST
48796: LIST
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48802: LD_ADDR_VAR 0 51
48806: PUSH
48807: LD_INT 1
48809: NEG
48810: PUSH
48811: LD_INT 2
48813: PUSH
48814: EMPTY
48815: LIST
48816: LIST
48817: PUSH
48818: LD_INT 2
48820: NEG
48821: PUSH
48822: LD_INT 1
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48833: LD_ADDR_VAR 0 52
48837: PUSH
48838: LD_INT 3
48840: NEG
48841: PUSH
48842: LD_INT 1
48844: NEG
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: PUSH
48850: LD_INT 3
48852: NEG
48853: PUSH
48854: LD_INT 2
48856: NEG
48857: PUSH
48858: EMPTY
48859: LIST
48860: LIST
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48866: LD_ADDR_VAR 0 53
48870: PUSH
48871: LD_INT 1
48873: NEG
48874: PUSH
48875: LD_INT 3
48877: NEG
48878: PUSH
48879: EMPTY
48880: LIST
48881: LIST
48882: PUSH
48883: LD_INT 0
48885: PUSH
48886: LD_INT 3
48888: NEG
48889: PUSH
48890: EMPTY
48891: LIST
48892: LIST
48893: PUSH
48894: LD_INT 1
48896: PUSH
48897: LD_INT 2
48899: NEG
48900: PUSH
48901: EMPTY
48902: LIST
48903: LIST
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: LIST
48909: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48910: LD_ADDR_VAR 0 54
48914: PUSH
48915: LD_INT 2
48917: PUSH
48918: LD_INT 1
48920: NEG
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: LD_INT 3
48928: PUSH
48929: LD_INT 0
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 3
48938: PUSH
48939: LD_INT 1
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: EMPTY
48947: LIST
48948: LIST
48949: LIST
48950: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48951: LD_ADDR_VAR 0 55
48955: PUSH
48956: LD_INT 3
48958: PUSH
48959: LD_INT 2
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: PUSH
48966: LD_INT 3
48968: PUSH
48969: LD_INT 3
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PUSH
48976: LD_INT 2
48978: PUSH
48979: LD_INT 3
48981: PUSH
48982: EMPTY
48983: LIST
48984: LIST
48985: PUSH
48986: EMPTY
48987: LIST
48988: LIST
48989: LIST
48990: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48991: LD_ADDR_VAR 0 56
48995: PUSH
48996: LD_INT 1
48998: PUSH
48999: LD_INT 3
49001: PUSH
49002: EMPTY
49003: LIST
49004: LIST
49005: PUSH
49006: LD_INT 0
49008: PUSH
49009: LD_INT 3
49011: PUSH
49012: EMPTY
49013: LIST
49014: LIST
49015: PUSH
49016: LD_INT 1
49018: NEG
49019: PUSH
49020: LD_INT 2
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: PUSH
49027: EMPTY
49028: LIST
49029: LIST
49030: LIST
49031: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49032: LD_ADDR_VAR 0 57
49036: PUSH
49037: LD_INT 2
49039: NEG
49040: PUSH
49041: LD_INT 1
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: PUSH
49048: LD_INT 3
49050: NEG
49051: PUSH
49052: LD_INT 0
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: PUSH
49059: LD_INT 3
49061: NEG
49062: PUSH
49063: LD_INT 1
49065: NEG
49066: PUSH
49067: EMPTY
49068: LIST
49069: LIST
49070: PUSH
49071: EMPTY
49072: LIST
49073: LIST
49074: LIST
49075: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49076: LD_ADDR_VAR 0 58
49080: PUSH
49081: LD_INT 2
49083: NEG
49084: PUSH
49085: LD_INT 3
49087: NEG
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: PUSH
49093: LD_INT 3
49095: NEG
49096: PUSH
49097: LD_INT 2
49099: NEG
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: PUSH
49105: LD_INT 3
49107: NEG
49108: PUSH
49109: LD_INT 3
49111: NEG
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: PUSH
49117: EMPTY
49118: LIST
49119: LIST
49120: LIST
49121: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
49122: LD_ADDR_VAR 0 59
49126: PUSH
49127: LD_INT 1
49129: NEG
49130: PUSH
49131: LD_INT 2
49133: NEG
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: PUSH
49139: LD_INT 0
49141: PUSH
49142: LD_INT 2
49144: NEG
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: PUSH
49150: LD_INT 1
49152: PUSH
49153: LD_INT 1
49155: NEG
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: LIST
49165: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49166: LD_ADDR_VAR 0 60
49170: PUSH
49171: LD_INT 1
49173: PUSH
49174: LD_INT 1
49176: NEG
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: PUSH
49182: LD_INT 2
49184: PUSH
49185: LD_INT 0
49187: PUSH
49188: EMPTY
49189: LIST
49190: LIST
49191: PUSH
49192: LD_INT 2
49194: PUSH
49195: LD_INT 1
49197: PUSH
49198: EMPTY
49199: LIST
49200: LIST
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: LIST
49206: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49207: LD_ADDR_VAR 0 61
49211: PUSH
49212: LD_INT 2
49214: PUSH
49215: LD_INT 1
49217: PUSH
49218: EMPTY
49219: LIST
49220: LIST
49221: PUSH
49222: LD_INT 2
49224: PUSH
49225: LD_INT 2
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: LD_INT 1
49234: PUSH
49235: LD_INT 2
49237: PUSH
49238: EMPTY
49239: LIST
49240: LIST
49241: PUSH
49242: EMPTY
49243: LIST
49244: LIST
49245: LIST
49246: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49247: LD_ADDR_VAR 0 62
49251: PUSH
49252: LD_INT 1
49254: PUSH
49255: LD_INT 2
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: PUSH
49262: LD_INT 0
49264: PUSH
49265: LD_INT 2
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: PUSH
49272: LD_INT 1
49274: NEG
49275: PUSH
49276: LD_INT 1
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: PUSH
49283: EMPTY
49284: LIST
49285: LIST
49286: LIST
49287: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49288: LD_ADDR_VAR 0 63
49292: PUSH
49293: LD_INT 1
49295: NEG
49296: PUSH
49297: LD_INT 1
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: LD_INT 2
49306: NEG
49307: PUSH
49308: LD_INT 0
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PUSH
49315: LD_INT 2
49317: NEG
49318: PUSH
49319: LD_INT 1
49321: NEG
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: EMPTY
49328: LIST
49329: LIST
49330: LIST
49331: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49332: LD_ADDR_VAR 0 64
49336: PUSH
49337: LD_INT 1
49339: NEG
49340: PUSH
49341: LD_INT 2
49343: NEG
49344: PUSH
49345: EMPTY
49346: LIST
49347: LIST
49348: PUSH
49349: LD_INT 2
49351: NEG
49352: PUSH
49353: LD_INT 1
49355: NEG
49356: PUSH
49357: EMPTY
49358: LIST
49359: LIST
49360: PUSH
49361: LD_INT 2
49363: NEG
49364: PUSH
49365: LD_INT 2
49367: NEG
49368: PUSH
49369: EMPTY
49370: LIST
49371: LIST
49372: PUSH
49373: EMPTY
49374: LIST
49375: LIST
49376: LIST
49377: ST_TO_ADDR
// end ; 2 :
49378: GO 52644
49380: LD_INT 2
49382: DOUBLE
49383: EQUAL
49384: IFTRUE 49388
49386: GO 52643
49388: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
49389: LD_ADDR_VAR 0 29
49393: PUSH
49394: LD_INT 4
49396: PUSH
49397: LD_INT 0
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: LD_INT 4
49406: PUSH
49407: LD_INT 1
49409: NEG
49410: PUSH
49411: EMPTY
49412: LIST
49413: LIST
49414: PUSH
49415: LD_INT 5
49417: PUSH
49418: LD_INT 0
49420: PUSH
49421: EMPTY
49422: LIST
49423: LIST
49424: PUSH
49425: LD_INT 5
49427: PUSH
49428: LD_INT 1
49430: PUSH
49431: EMPTY
49432: LIST
49433: LIST
49434: PUSH
49435: LD_INT 4
49437: PUSH
49438: LD_INT 1
49440: PUSH
49441: EMPTY
49442: LIST
49443: LIST
49444: PUSH
49445: LD_INT 3
49447: PUSH
49448: LD_INT 0
49450: PUSH
49451: EMPTY
49452: LIST
49453: LIST
49454: PUSH
49455: LD_INT 3
49457: PUSH
49458: LD_INT 1
49460: NEG
49461: PUSH
49462: EMPTY
49463: LIST
49464: LIST
49465: PUSH
49466: LD_INT 3
49468: PUSH
49469: LD_INT 2
49471: NEG
49472: PUSH
49473: EMPTY
49474: LIST
49475: LIST
49476: PUSH
49477: LD_INT 5
49479: PUSH
49480: LD_INT 2
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: PUSH
49487: LD_INT 3
49489: PUSH
49490: LD_INT 3
49492: PUSH
49493: EMPTY
49494: LIST
49495: LIST
49496: PUSH
49497: LD_INT 3
49499: PUSH
49500: LD_INT 2
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: PUSH
49507: LD_INT 4
49509: PUSH
49510: LD_INT 3
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: PUSH
49517: LD_INT 4
49519: PUSH
49520: LD_INT 4
49522: PUSH
49523: EMPTY
49524: LIST
49525: LIST
49526: PUSH
49527: LD_INT 3
49529: PUSH
49530: LD_INT 4
49532: PUSH
49533: EMPTY
49534: LIST
49535: LIST
49536: PUSH
49537: LD_INT 2
49539: PUSH
49540: LD_INT 3
49542: PUSH
49543: EMPTY
49544: LIST
49545: LIST
49546: PUSH
49547: LD_INT 2
49549: PUSH
49550: LD_INT 2
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: PUSH
49557: LD_INT 4
49559: PUSH
49560: LD_INT 2
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: PUSH
49567: LD_INT 2
49569: PUSH
49570: LD_INT 4
49572: PUSH
49573: EMPTY
49574: LIST
49575: LIST
49576: PUSH
49577: LD_INT 0
49579: PUSH
49580: LD_INT 4
49582: PUSH
49583: EMPTY
49584: LIST
49585: LIST
49586: PUSH
49587: LD_INT 0
49589: PUSH
49590: LD_INT 3
49592: PUSH
49593: EMPTY
49594: LIST
49595: LIST
49596: PUSH
49597: LD_INT 1
49599: PUSH
49600: LD_INT 4
49602: PUSH
49603: EMPTY
49604: LIST
49605: LIST
49606: PUSH
49607: LD_INT 1
49609: PUSH
49610: LD_INT 5
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: PUSH
49617: LD_INT 0
49619: PUSH
49620: LD_INT 5
49622: PUSH
49623: EMPTY
49624: LIST
49625: LIST
49626: PUSH
49627: LD_INT 1
49629: NEG
49630: PUSH
49631: LD_INT 4
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: PUSH
49638: LD_INT 1
49640: NEG
49641: PUSH
49642: LD_INT 3
49644: PUSH
49645: EMPTY
49646: LIST
49647: LIST
49648: PUSH
49649: LD_INT 2
49651: PUSH
49652: LD_INT 5
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: PUSH
49659: LD_INT 2
49661: NEG
49662: PUSH
49663: LD_INT 3
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: PUSH
49670: LD_INT 3
49672: NEG
49673: PUSH
49674: LD_INT 0
49676: PUSH
49677: EMPTY
49678: LIST
49679: LIST
49680: PUSH
49681: LD_INT 3
49683: NEG
49684: PUSH
49685: LD_INT 1
49687: NEG
49688: PUSH
49689: EMPTY
49690: LIST
49691: LIST
49692: PUSH
49693: LD_INT 2
49695: NEG
49696: PUSH
49697: LD_INT 0
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: PUSH
49704: LD_INT 2
49706: NEG
49707: PUSH
49708: LD_INT 1
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: PUSH
49715: LD_INT 3
49717: NEG
49718: PUSH
49719: LD_INT 1
49721: PUSH
49722: EMPTY
49723: LIST
49724: LIST
49725: PUSH
49726: LD_INT 4
49728: NEG
49729: PUSH
49730: LD_INT 0
49732: PUSH
49733: EMPTY
49734: LIST
49735: LIST
49736: PUSH
49737: LD_INT 4
49739: NEG
49740: PUSH
49741: LD_INT 1
49743: NEG
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PUSH
49749: LD_INT 4
49751: NEG
49752: PUSH
49753: LD_INT 2
49755: NEG
49756: PUSH
49757: EMPTY
49758: LIST
49759: LIST
49760: PUSH
49761: LD_INT 2
49763: NEG
49764: PUSH
49765: LD_INT 2
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: PUSH
49772: LD_INT 4
49774: NEG
49775: PUSH
49776: LD_INT 4
49778: NEG
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: PUSH
49784: LD_INT 4
49786: NEG
49787: PUSH
49788: LD_INT 5
49790: NEG
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: LD_INT 3
49798: NEG
49799: PUSH
49800: LD_INT 4
49802: NEG
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: PUSH
49808: LD_INT 3
49810: NEG
49811: PUSH
49812: LD_INT 3
49814: NEG
49815: PUSH
49816: EMPTY
49817: LIST
49818: LIST
49819: PUSH
49820: LD_INT 4
49822: NEG
49823: PUSH
49824: LD_INT 3
49826: NEG
49827: PUSH
49828: EMPTY
49829: LIST
49830: LIST
49831: PUSH
49832: LD_INT 5
49834: NEG
49835: PUSH
49836: LD_INT 4
49838: NEG
49839: PUSH
49840: EMPTY
49841: LIST
49842: LIST
49843: PUSH
49844: LD_INT 5
49846: NEG
49847: PUSH
49848: LD_INT 5
49850: NEG
49851: PUSH
49852: EMPTY
49853: LIST
49854: LIST
49855: PUSH
49856: LD_INT 3
49858: NEG
49859: PUSH
49860: LD_INT 5
49862: NEG
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: PUSH
49868: LD_INT 5
49870: NEG
49871: PUSH
49872: LD_INT 3
49874: NEG
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: LIST
49884: LIST
49885: LIST
49886: LIST
49887: LIST
49888: LIST
49889: LIST
49890: LIST
49891: LIST
49892: LIST
49893: LIST
49894: LIST
49895: LIST
49896: LIST
49897: LIST
49898: LIST
49899: LIST
49900: LIST
49901: LIST
49902: LIST
49903: LIST
49904: LIST
49905: LIST
49906: LIST
49907: LIST
49908: LIST
49909: LIST
49910: LIST
49911: LIST
49912: LIST
49913: LIST
49914: LIST
49915: LIST
49916: LIST
49917: LIST
49918: LIST
49919: LIST
49920: LIST
49921: LIST
49922: LIST
49923: LIST
49924: LIST
49925: LIST
49926: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
49927: LD_ADDR_VAR 0 30
49931: PUSH
49932: LD_INT 4
49934: PUSH
49935: LD_INT 4
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: LD_INT 4
49944: PUSH
49945: LD_INT 3
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: PUSH
49952: LD_INT 5
49954: PUSH
49955: LD_INT 4
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: PUSH
49962: LD_INT 5
49964: PUSH
49965: LD_INT 5
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: PUSH
49972: LD_INT 4
49974: PUSH
49975: LD_INT 5
49977: PUSH
49978: EMPTY
49979: LIST
49980: LIST
49981: PUSH
49982: LD_INT 3
49984: PUSH
49985: LD_INT 4
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: PUSH
49992: LD_INT 3
49994: PUSH
49995: LD_INT 3
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: PUSH
50002: LD_INT 5
50004: PUSH
50005: LD_INT 3
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: PUSH
50012: LD_INT 3
50014: PUSH
50015: LD_INT 5
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: PUSH
50022: LD_INT 0
50024: PUSH
50025: LD_INT 3
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: PUSH
50032: LD_INT 0
50034: PUSH
50035: LD_INT 2
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: PUSH
50042: LD_INT 1
50044: PUSH
50045: LD_INT 3
50047: PUSH
50048: EMPTY
50049: LIST
50050: LIST
50051: PUSH
50052: LD_INT 1
50054: PUSH
50055: LD_INT 4
50057: PUSH
50058: EMPTY
50059: LIST
50060: LIST
50061: PUSH
50062: LD_INT 0
50064: PUSH
50065: LD_INT 4
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: PUSH
50072: LD_INT 1
50074: NEG
50075: PUSH
50076: LD_INT 3
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: PUSH
50083: LD_INT 1
50085: NEG
50086: PUSH
50087: LD_INT 2
50089: PUSH
50090: EMPTY
50091: LIST
50092: LIST
50093: PUSH
50094: LD_INT 2
50096: PUSH
50097: LD_INT 4
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: PUSH
50104: LD_INT 2
50106: NEG
50107: PUSH
50108: LD_INT 2
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: PUSH
50115: LD_INT 4
50117: NEG
50118: PUSH
50119: LD_INT 0
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: PUSH
50126: LD_INT 4
50128: NEG
50129: PUSH
50130: LD_INT 1
50132: NEG
50133: PUSH
50134: EMPTY
50135: LIST
50136: LIST
50137: PUSH
50138: LD_INT 3
50140: NEG
50141: PUSH
50142: LD_INT 0
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: PUSH
50149: LD_INT 3
50151: NEG
50152: PUSH
50153: LD_INT 1
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: LD_INT 4
50162: NEG
50163: PUSH
50164: LD_INT 1
50166: PUSH
50167: EMPTY
50168: LIST
50169: LIST
50170: PUSH
50171: LD_INT 5
50173: NEG
50174: PUSH
50175: LD_INT 0
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: PUSH
50182: LD_INT 5
50184: NEG
50185: PUSH
50186: LD_INT 1
50188: NEG
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: PUSH
50194: LD_INT 5
50196: NEG
50197: PUSH
50198: LD_INT 2
50200: NEG
50201: PUSH
50202: EMPTY
50203: LIST
50204: LIST
50205: PUSH
50206: LD_INT 3
50208: NEG
50209: PUSH
50210: LD_INT 2
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: PUSH
50217: LD_INT 3
50219: NEG
50220: PUSH
50221: LD_INT 3
50223: NEG
50224: PUSH
50225: EMPTY
50226: LIST
50227: LIST
50228: PUSH
50229: LD_INT 3
50231: NEG
50232: PUSH
50233: LD_INT 4
50235: NEG
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: PUSH
50241: LD_INT 2
50243: NEG
50244: PUSH
50245: LD_INT 3
50247: NEG
50248: PUSH
50249: EMPTY
50250: LIST
50251: LIST
50252: PUSH
50253: LD_INT 2
50255: NEG
50256: PUSH
50257: LD_INT 2
50259: NEG
50260: PUSH
50261: EMPTY
50262: LIST
50263: LIST
50264: PUSH
50265: LD_INT 3
50267: NEG
50268: PUSH
50269: LD_INT 2
50271: NEG
50272: PUSH
50273: EMPTY
50274: LIST
50275: LIST
50276: PUSH
50277: LD_INT 4
50279: NEG
50280: PUSH
50281: LD_INT 3
50283: NEG
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: PUSH
50289: LD_INT 4
50291: NEG
50292: PUSH
50293: LD_INT 4
50295: NEG
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: LD_INT 2
50303: NEG
50304: PUSH
50305: LD_INT 4
50307: NEG
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: PUSH
50313: LD_INT 4
50315: NEG
50316: PUSH
50317: LD_INT 2
50319: NEG
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PUSH
50325: LD_INT 0
50327: PUSH
50328: LD_INT 4
50330: NEG
50331: PUSH
50332: EMPTY
50333: LIST
50334: LIST
50335: PUSH
50336: LD_INT 0
50338: PUSH
50339: LD_INT 5
50341: NEG
50342: PUSH
50343: EMPTY
50344: LIST
50345: LIST
50346: PUSH
50347: LD_INT 1
50349: PUSH
50350: LD_INT 4
50352: NEG
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: PUSH
50358: LD_INT 1
50360: PUSH
50361: LD_INT 3
50363: NEG
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: LD_INT 0
50371: PUSH
50372: LD_INT 3
50374: NEG
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PUSH
50380: LD_INT 1
50382: NEG
50383: PUSH
50384: LD_INT 4
50386: NEG
50387: PUSH
50388: EMPTY
50389: LIST
50390: LIST
50391: PUSH
50392: LD_INT 1
50394: NEG
50395: PUSH
50396: LD_INT 5
50398: NEG
50399: PUSH
50400: EMPTY
50401: LIST
50402: LIST
50403: PUSH
50404: LD_INT 2
50406: PUSH
50407: LD_INT 3
50409: NEG
50410: PUSH
50411: EMPTY
50412: LIST
50413: LIST
50414: PUSH
50415: LD_INT 2
50417: NEG
50418: PUSH
50419: LD_INT 5
50421: NEG
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: LIST
50431: LIST
50432: LIST
50433: LIST
50434: LIST
50435: LIST
50436: LIST
50437: LIST
50438: LIST
50439: LIST
50440: LIST
50441: LIST
50442: LIST
50443: LIST
50444: LIST
50445: LIST
50446: LIST
50447: LIST
50448: LIST
50449: LIST
50450: LIST
50451: LIST
50452: LIST
50453: LIST
50454: LIST
50455: LIST
50456: LIST
50457: LIST
50458: LIST
50459: LIST
50460: LIST
50461: LIST
50462: LIST
50463: LIST
50464: LIST
50465: LIST
50466: LIST
50467: LIST
50468: LIST
50469: LIST
50470: LIST
50471: LIST
50472: LIST
50473: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
50474: LD_ADDR_VAR 0 31
50478: PUSH
50479: LD_INT 0
50481: PUSH
50482: LD_INT 4
50484: PUSH
50485: EMPTY
50486: LIST
50487: LIST
50488: PUSH
50489: LD_INT 0
50491: PUSH
50492: LD_INT 3
50494: PUSH
50495: EMPTY
50496: LIST
50497: LIST
50498: PUSH
50499: LD_INT 1
50501: PUSH
50502: LD_INT 4
50504: PUSH
50505: EMPTY
50506: LIST
50507: LIST
50508: PUSH
50509: LD_INT 1
50511: PUSH
50512: LD_INT 5
50514: PUSH
50515: EMPTY
50516: LIST
50517: LIST
50518: PUSH
50519: LD_INT 0
50521: PUSH
50522: LD_INT 5
50524: PUSH
50525: EMPTY
50526: LIST
50527: LIST
50528: PUSH
50529: LD_INT 1
50531: NEG
50532: PUSH
50533: LD_INT 4
50535: PUSH
50536: EMPTY
50537: LIST
50538: LIST
50539: PUSH
50540: LD_INT 1
50542: NEG
50543: PUSH
50544: LD_INT 3
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: PUSH
50551: LD_INT 2
50553: PUSH
50554: LD_INT 5
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: PUSH
50561: LD_INT 2
50563: NEG
50564: PUSH
50565: LD_INT 3
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: LD_INT 3
50574: NEG
50575: PUSH
50576: LD_INT 0
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: LD_INT 3
50585: NEG
50586: PUSH
50587: LD_INT 1
50589: NEG
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 2
50597: NEG
50598: PUSH
50599: LD_INT 0
50601: PUSH
50602: EMPTY
50603: LIST
50604: LIST
50605: PUSH
50606: LD_INT 2
50608: NEG
50609: PUSH
50610: LD_INT 1
50612: PUSH
50613: EMPTY
50614: LIST
50615: LIST
50616: PUSH
50617: LD_INT 3
50619: NEG
50620: PUSH
50621: LD_INT 1
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: PUSH
50628: LD_INT 4
50630: NEG
50631: PUSH
50632: LD_INT 0
50634: PUSH
50635: EMPTY
50636: LIST
50637: LIST
50638: PUSH
50639: LD_INT 4
50641: NEG
50642: PUSH
50643: LD_INT 1
50645: NEG
50646: PUSH
50647: EMPTY
50648: LIST
50649: LIST
50650: PUSH
50651: LD_INT 4
50653: NEG
50654: PUSH
50655: LD_INT 2
50657: NEG
50658: PUSH
50659: EMPTY
50660: LIST
50661: LIST
50662: PUSH
50663: LD_INT 2
50665: NEG
50666: PUSH
50667: LD_INT 2
50669: PUSH
50670: EMPTY
50671: LIST
50672: LIST
50673: PUSH
50674: LD_INT 4
50676: NEG
50677: PUSH
50678: LD_INT 4
50680: NEG
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: PUSH
50686: LD_INT 4
50688: NEG
50689: PUSH
50690: LD_INT 5
50692: NEG
50693: PUSH
50694: EMPTY
50695: LIST
50696: LIST
50697: PUSH
50698: LD_INT 3
50700: NEG
50701: PUSH
50702: LD_INT 4
50704: NEG
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: PUSH
50710: LD_INT 3
50712: NEG
50713: PUSH
50714: LD_INT 3
50716: NEG
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: PUSH
50722: LD_INT 4
50724: NEG
50725: PUSH
50726: LD_INT 3
50728: NEG
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: PUSH
50734: LD_INT 5
50736: NEG
50737: PUSH
50738: LD_INT 4
50740: NEG
50741: PUSH
50742: EMPTY
50743: LIST
50744: LIST
50745: PUSH
50746: LD_INT 5
50748: NEG
50749: PUSH
50750: LD_INT 5
50752: NEG
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: PUSH
50758: LD_INT 3
50760: NEG
50761: PUSH
50762: LD_INT 5
50764: NEG
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: PUSH
50770: LD_INT 5
50772: NEG
50773: PUSH
50774: LD_INT 3
50776: NEG
50777: PUSH
50778: EMPTY
50779: LIST
50780: LIST
50781: PUSH
50782: LD_INT 0
50784: PUSH
50785: LD_INT 3
50787: NEG
50788: PUSH
50789: EMPTY
50790: LIST
50791: LIST
50792: PUSH
50793: LD_INT 0
50795: PUSH
50796: LD_INT 4
50798: NEG
50799: PUSH
50800: EMPTY
50801: LIST
50802: LIST
50803: PUSH
50804: LD_INT 1
50806: PUSH
50807: LD_INT 3
50809: NEG
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: PUSH
50815: LD_INT 1
50817: PUSH
50818: LD_INT 2
50820: NEG
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: PUSH
50826: LD_INT 0
50828: PUSH
50829: LD_INT 2
50831: NEG
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: PUSH
50837: LD_INT 1
50839: NEG
50840: PUSH
50841: LD_INT 3
50843: NEG
50844: PUSH
50845: EMPTY
50846: LIST
50847: LIST
50848: PUSH
50849: LD_INT 1
50851: NEG
50852: PUSH
50853: LD_INT 4
50855: NEG
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: PUSH
50861: LD_INT 2
50863: PUSH
50864: LD_INT 2
50866: NEG
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: PUSH
50872: LD_INT 2
50874: NEG
50875: PUSH
50876: LD_INT 4
50878: NEG
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: LD_INT 4
50886: PUSH
50887: LD_INT 0
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: PUSH
50894: LD_INT 4
50896: PUSH
50897: LD_INT 1
50899: NEG
50900: PUSH
50901: EMPTY
50902: LIST
50903: LIST
50904: PUSH
50905: LD_INT 5
50907: PUSH
50908: LD_INT 0
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: PUSH
50915: LD_INT 5
50917: PUSH
50918: LD_INT 1
50920: PUSH
50921: EMPTY
50922: LIST
50923: LIST
50924: PUSH
50925: LD_INT 4
50927: PUSH
50928: LD_INT 1
50930: PUSH
50931: EMPTY
50932: LIST
50933: LIST
50934: PUSH
50935: LD_INT 3
50937: PUSH
50938: LD_INT 0
50940: PUSH
50941: EMPTY
50942: LIST
50943: LIST
50944: PUSH
50945: LD_INT 3
50947: PUSH
50948: LD_INT 1
50950: NEG
50951: PUSH
50952: EMPTY
50953: LIST
50954: LIST
50955: PUSH
50956: LD_INT 3
50958: PUSH
50959: LD_INT 2
50961: NEG
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: PUSH
50967: LD_INT 5
50969: PUSH
50970: LD_INT 2
50972: PUSH
50973: EMPTY
50974: LIST
50975: LIST
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: LIST
50981: LIST
50982: LIST
50983: LIST
50984: LIST
50985: LIST
50986: LIST
50987: LIST
50988: LIST
50989: LIST
50990: LIST
50991: LIST
50992: LIST
50993: LIST
50994: LIST
50995: LIST
50996: LIST
50997: LIST
50998: LIST
50999: LIST
51000: LIST
51001: LIST
51002: LIST
51003: LIST
51004: LIST
51005: LIST
51006: LIST
51007: LIST
51008: LIST
51009: LIST
51010: LIST
51011: LIST
51012: LIST
51013: LIST
51014: LIST
51015: LIST
51016: LIST
51017: LIST
51018: LIST
51019: LIST
51020: LIST
51021: LIST
51022: LIST
51023: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
51024: LD_ADDR_VAR 0 32
51028: PUSH
51029: LD_INT 4
51031: NEG
51032: PUSH
51033: LD_INT 0
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: PUSH
51040: LD_INT 4
51042: NEG
51043: PUSH
51044: LD_INT 1
51046: NEG
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: LD_INT 3
51054: NEG
51055: PUSH
51056: LD_INT 0
51058: PUSH
51059: EMPTY
51060: LIST
51061: LIST
51062: PUSH
51063: LD_INT 3
51065: NEG
51066: PUSH
51067: LD_INT 1
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: PUSH
51074: LD_INT 4
51076: NEG
51077: PUSH
51078: LD_INT 1
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: PUSH
51085: LD_INT 5
51087: NEG
51088: PUSH
51089: LD_INT 0
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: PUSH
51096: LD_INT 5
51098: NEG
51099: PUSH
51100: LD_INT 1
51102: NEG
51103: PUSH
51104: EMPTY
51105: LIST
51106: LIST
51107: PUSH
51108: LD_INT 5
51110: NEG
51111: PUSH
51112: LD_INT 2
51114: NEG
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: PUSH
51120: LD_INT 3
51122: NEG
51123: PUSH
51124: LD_INT 2
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: PUSH
51131: LD_INT 3
51133: NEG
51134: PUSH
51135: LD_INT 3
51137: NEG
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PUSH
51143: LD_INT 3
51145: NEG
51146: PUSH
51147: LD_INT 4
51149: NEG
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: LD_INT 2
51157: NEG
51158: PUSH
51159: LD_INT 3
51161: NEG
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: PUSH
51167: LD_INT 2
51169: NEG
51170: PUSH
51171: LD_INT 2
51173: NEG
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: LD_INT 3
51181: NEG
51182: PUSH
51183: LD_INT 2
51185: NEG
51186: PUSH
51187: EMPTY
51188: LIST
51189: LIST
51190: PUSH
51191: LD_INT 4
51193: NEG
51194: PUSH
51195: LD_INT 3
51197: NEG
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: LD_INT 4
51205: NEG
51206: PUSH
51207: LD_INT 4
51209: NEG
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PUSH
51215: LD_INT 2
51217: NEG
51218: PUSH
51219: LD_INT 4
51221: NEG
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: PUSH
51227: LD_INT 4
51229: NEG
51230: PUSH
51231: LD_INT 2
51233: NEG
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: LD_INT 0
51241: PUSH
51242: LD_INT 4
51244: NEG
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: PUSH
51250: LD_INT 0
51252: PUSH
51253: LD_INT 5
51255: NEG
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: LD_INT 1
51263: PUSH
51264: LD_INT 4
51266: NEG
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: PUSH
51272: LD_INT 1
51274: PUSH
51275: LD_INT 3
51277: NEG
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: PUSH
51283: LD_INT 0
51285: PUSH
51286: LD_INT 3
51288: NEG
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: PUSH
51294: LD_INT 1
51296: NEG
51297: PUSH
51298: LD_INT 4
51300: NEG
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: PUSH
51306: LD_INT 1
51308: NEG
51309: PUSH
51310: LD_INT 5
51312: NEG
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: PUSH
51318: LD_INT 2
51320: PUSH
51321: LD_INT 3
51323: NEG
51324: PUSH
51325: EMPTY
51326: LIST
51327: LIST
51328: PUSH
51329: LD_INT 2
51331: NEG
51332: PUSH
51333: LD_INT 5
51335: NEG
51336: PUSH
51337: EMPTY
51338: LIST
51339: LIST
51340: PUSH
51341: LD_INT 3
51343: PUSH
51344: LD_INT 0
51346: PUSH
51347: EMPTY
51348: LIST
51349: LIST
51350: PUSH
51351: LD_INT 3
51353: PUSH
51354: LD_INT 1
51356: NEG
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: PUSH
51362: LD_INT 4
51364: PUSH
51365: LD_INT 0
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: PUSH
51372: LD_INT 4
51374: PUSH
51375: LD_INT 1
51377: PUSH
51378: EMPTY
51379: LIST
51380: LIST
51381: PUSH
51382: LD_INT 3
51384: PUSH
51385: LD_INT 1
51387: PUSH
51388: EMPTY
51389: LIST
51390: LIST
51391: PUSH
51392: LD_INT 2
51394: PUSH
51395: LD_INT 0
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: PUSH
51402: LD_INT 2
51404: PUSH
51405: LD_INT 1
51407: NEG
51408: PUSH
51409: EMPTY
51410: LIST
51411: LIST
51412: PUSH
51413: LD_INT 2
51415: PUSH
51416: LD_INT 2
51418: NEG
51419: PUSH
51420: EMPTY
51421: LIST
51422: LIST
51423: PUSH
51424: LD_INT 4
51426: PUSH
51427: LD_INT 2
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: PUSH
51434: LD_INT 4
51436: PUSH
51437: LD_INT 4
51439: PUSH
51440: EMPTY
51441: LIST
51442: LIST
51443: PUSH
51444: LD_INT 4
51446: PUSH
51447: LD_INT 3
51449: PUSH
51450: EMPTY
51451: LIST
51452: LIST
51453: PUSH
51454: LD_INT 5
51456: PUSH
51457: LD_INT 4
51459: PUSH
51460: EMPTY
51461: LIST
51462: LIST
51463: PUSH
51464: LD_INT 5
51466: PUSH
51467: LD_INT 5
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: PUSH
51474: LD_INT 4
51476: PUSH
51477: LD_INT 5
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: PUSH
51484: LD_INT 3
51486: PUSH
51487: LD_INT 4
51489: PUSH
51490: EMPTY
51491: LIST
51492: LIST
51493: PUSH
51494: LD_INT 3
51496: PUSH
51497: LD_INT 3
51499: PUSH
51500: EMPTY
51501: LIST
51502: LIST
51503: PUSH
51504: LD_INT 5
51506: PUSH
51507: LD_INT 3
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PUSH
51514: LD_INT 3
51516: PUSH
51517: LD_INT 5
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: PUSH
51524: EMPTY
51525: LIST
51526: LIST
51527: LIST
51528: LIST
51529: LIST
51530: LIST
51531: LIST
51532: LIST
51533: LIST
51534: LIST
51535: LIST
51536: LIST
51537: LIST
51538: LIST
51539: LIST
51540: LIST
51541: LIST
51542: LIST
51543: LIST
51544: LIST
51545: LIST
51546: LIST
51547: LIST
51548: LIST
51549: LIST
51550: LIST
51551: LIST
51552: LIST
51553: LIST
51554: LIST
51555: LIST
51556: LIST
51557: LIST
51558: LIST
51559: LIST
51560: LIST
51561: LIST
51562: LIST
51563: LIST
51564: LIST
51565: LIST
51566: LIST
51567: LIST
51568: LIST
51569: LIST
51570: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
51571: LD_ADDR_VAR 0 33
51575: PUSH
51576: LD_INT 4
51578: NEG
51579: PUSH
51580: LD_INT 4
51582: NEG
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: PUSH
51588: LD_INT 4
51590: NEG
51591: PUSH
51592: LD_INT 5
51594: NEG
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: LD_INT 3
51602: NEG
51603: PUSH
51604: LD_INT 4
51606: NEG
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: PUSH
51612: LD_INT 3
51614: NEG
51615: PUSH
51616: LD_INT 3
51618: NEG
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: PUSH
51624: LD_INT 4
51626: NEG
51627: PUSH
51628: LD_INT 3
51630: NEG
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: LD_INT 5
51638: NEG
51639: PUSH
51640: LD_INT 4
51642: NEG
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: PUSH
51648: LD_INT 5
51650: NEG
51651: PUSH
51652: LD_INT 5
51654: NEG
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: PUSH
51660: LD_INT 3
51662: NEG
51663: PUSH
51664: LD_INT 5
51666: NEG
51667: PUSH
51668: EMPTY
51669: LIST
51670: LIST
51671: PUSH
51672: LD_INT 5
51674: NEG
51675: PUSH
51676: LD_INT 3
51678: NEG
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 0
51686: PUSH
51687: LD_INT 3
51689: NEG
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: PUSH
51695: LD_INT 0
51697: PUSH
51698: LD_INT 4
51700: NEG
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: PUSH
51706: LD_INT 1
51708: PUSH
51709: LD_INT 3
51711: NEG
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: PUSH
51717: LD_INT 1
51719: PUSH
51720: LD_INT 2
51722: NEG
51723: PUSH
51724: EMPTY
51725: LIST
51726: LIST
51727: PUSH
51728: LD_INT 0
51730: PUSH
51731: LD_INT 2
51733: NEG
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: PUSH
51739: LD_INT 1
51741: NEG
51742: PUSH
51743: LD_INT 3
51745: NEG
51746: PUSH
51747: EMPTY
51748: LIST
51749: LIST
51750: PUSH
51751: LD_INT 1
51753: NEG
51754: PUSH
51755: LD_INT 4
51757: NEG
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: PUSH
51763: LD_INT 2
51765: PUSH
51766: LD_INT 2
51768: NEG
51769: PUSH
51770: EMPTY
51771: LIST
51772: LIST
51773: PUSH
51774: LD_INT 2
51776: NEG
51777: PUSH
51778: LD_INT 4
51780: NEG
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: PUSH
51786: LD_INT 4
51788: PUSH
51789: LD_INT 0
51791: PUSH
51792: EMPTY
51793: LIST
51794: LIST
51795: PUSH
51796: LD_INT 4
51798: PUSH
51799: LD_INT 1
51801: NEG
51802: PUSH
51803: EMPTY
51804: LIST
51805: LIST
51806: PUSH
51807: LD_INT 5
51809: PUSH
51810: LD_INT 0
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: PUSH
51817: LD_INT 5
51819: PUSH
51820: LD_INT 1
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: LD_INT 4
51829: PUSH
51830: LD_INT 1
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: PUSH
51837: LD_INT 3
51839: PUSH
51840: LD_INT 0
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: PUSH
51847: LD_INT 3
51849: PUSH
51850: LD_INT 1
51852: NEG
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: PUSH
51858: LD_INT 3
51860: PUSH
51861: LD_INT 2
51863: NEG
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: PUSH
51869: LD_INT 5
51871: PUSH
51872: LD_INT 2
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: PUSH
51879: LD_INT 3
51881: PUSH
51882: LD_INT 3
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: PUSH
51889: LD_INT 3
51891: PUSH
51892: LD_INT 2
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: PUSH
51899: LD_INT 4
51901: PUSH
51902: LD_INT 3
51904: PUSH
51905: EMPTY
51906: LIST
51907: LIST
51908: PUSH
51909: LD_INT 4
51911: PUSH
51912: LD_INT 4
51914: PUSH
51915: EMPTY
51916: LIST
51917: LIST
51918: PUSH
51919: LD_INT 3
51921: PUSH
51922: LD_INT 4
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: PUSH
51929: LD_INT 2
51931: PUSH
51932: LD_INT 3
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: PUSH
51939: LD_INT 2
51941: PUSH
51942: LD_INT 2
51944: PUSH
51945: EMPTY
51946: LIST
51947: LIST
51948: PUSH
51949: LD_INT 4
51951: PUSH
51952: LD_INT 2
51954: PUSH
51955: EMPTY
51956: LIST
51957: LIST
51958: PUSH
51959: LD_INT 2
51961: PUSH
51962: LD_INT 4
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: PUSH
51969: LD_INT 0
51971: PUSH
51972: LD_INT 4
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: LD_INT 0
51981: PUSH
51982: LD_INT 3
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: LD_INT 1
51991: PUSH
51992: LD_INT 4
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: PUSH
51999: LD_INT 1
52001: PUSH
52002: LD_INT 5
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: PUSH
52009: LD_INT 0
52011: PUSH
52012: LD_INT 5
52014: PUSH
52015: EMPTY
52016: LIST
52017: LIST
52018: PUSH
52019: LD_INT 1
52021: NEG
52022: PUSH
52023: LD_INT 4
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: PUSH
52030: LD_INT 1
52032: NEG
52033: PUSH
52034: LD_INT 3
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: PUSH
52041: LD_INT 2
52043: PUSH
52044: LD_INT 5
52046: PUSH
52047: EMPTY
52048: LIST
52049: LIST
52050: PUSH
52051: LD_INT 2
52053: NEG
52054: PUSH
52055: LD_INT 3
52057: PUSH
52058: EMPTY
52059: LIST
52060: LIST
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: LIST
52066: LIST
52067: LIST
52068: LIST
52069: LIST
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: LIST
52078: LIST
52079: LIST
52080: LIST
52081: LIST
52082: LIST
52083: LIST
52084: LIST
52085: LIST
52086: LIST
52087: LIST
52088: LIST
52089: LIST
52090: LIST
52091: LIST
52092: LIST
52093: LIST
52094: LIST
52095: LIST
52096: LIST
52097: LIST
52098: LIST
52099: LIST
52100: LIST
52101: LIST
52102: LIST
52103: LIST
52104: LIST
52105: LIST
52106: LIST
52107: LIST
52108: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
52109: LD_ADDR_VAR 0 34
52113: PUSH
52114: LD_INT 0
52116: PUSH
52117: LD_INT 4
52119: NEG
52120: PUSH
52121: EMPTY
52122: LIST
52123: LIST
52124: PUSH
52125: LD_INT 0
52127: PUSH
52128: LD_INT 5
52130: NEG
52131: PUSH
52132: EMPTY
52133: LIST
52134: LIST
52135: PUSH
52136: LD_INT 1
52138: PUSH
52139: LD_INT 4
52141: NEG
52142: PUSH
52143: EMPTY
52144: LIST
52145: LIST
52146: PUSH
52147: LD_INT 1
52149: PUSH
52150: LD_INT 3
52152: NEG
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: PUSH
52158: LD_INT 0
52160: PUSH
52161: LD_INT 3
52163: NEG
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: PUSH
52169: LD_INT 1
52171: NEG
52172: PUSH
52173: LD_INT 4
52175: NEG
52176: PUSH
52177: EMPTY
52178: LIST
52179: LIST
52180: PUSH
52181: LD_INT 1
52183: NEG
52184: PUSH
52185: LD_INT 5
52187: NEG
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: PUSH
52193: LD_INT 2
52195: PUSH
52196: LD_INT 3
52198: NEG
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: PUSH
52204: LD_INT 2
52206: NEG
52207: PUSH
52208: LD_INT 5
52210: NEG
52211: PUSH
52212: EMPTY
52213: LIST
52214: LIST
52215: PUSH
52216: LD_INT 3
52218: PUSH
52219: LD_INT 0
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PUSH
52226: LD_INT 3
52228: PUSH
52229: LD_INT 1
52231: NEG
52232: PUSH
52233: EMPTY
52234: LIST
52235: LIST
52236: PUSH
52237: LD_INT 4
52239: PUSH
52240: LD_INT 0
52242: PUSH
52243: EMPTY
52244: LIST
52245: LIST
52246: PUSH
52247: LD_INT 4
52249: PUSH
52250: LD_INT 1
52252: PUSH
52253: EMPTY
52254: LIST
52255: LIST
52256: PUSH
52257: LD_INT 3
52259: PUSH
52260: LD_INT 1
52262: PUSH
52263: EMPTY
52264: LIST
52265: LIST
52266: PUSH
52267: LD_INT 2
52269: PUSH
52270: LD_INT 0
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: PUSH
52277: LD_INT 2
52279: PUSH
52280: LD_INT 1
52282: NEG
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PUSH
52288: LD_INT 2
52290: PUSH
52291: LD_INT 2
52293: NEG
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: PUSH
52299: LD_INT 4
52301: PUSH
52302: LD_INT 2
52304: PUSH
52305: EMPTY
52306: LIST
52307: LIST
52308: PUSH
52309: LD_INT 4
52311: PUSH
52312: LD_INT 4
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: PUSH
52319: LD_INT 4
52321: PUSH
52322: LD_INT 3
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: PUSH
52329: LD_INT 5
52331: PUSH
52332: LD_INT 4
52334: PUSH
52335: EMPTY
52336: LIST
52337: LIST
52338: PUSH
52339: LD_INT 5
52341: PUSH
52342: LD_INT 5
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: PUSH
52349: LD_INT 4
52351: PUSH
52352: LD_INT 5
52354: PUSH
52355: EMPTY
52356: LIST
52357: LIST
52358: PUSH
52359: LD_INT 3
52361: PUSH
52362: LD_INT 4
52364: PUSH
52365: EMPTY
52366: LIST
52367: LIST
52368: PUSH
52369: LD_INT 3
52371: PUSH
52372: LD_INT 3
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: PUSH
52379: LD_INT 5
52381: PUSH
52382: LD_INT 3
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: PUSH
52389: LD_INT 3
52391: PUSH
52392: LD_INT 5
52394: PUSH
52395: EMPTY
52396: LIST
52397: LIST
52398: PUSH
52399: LD_INT 0
52401: PUSH
52402: LD_INT 3
52404: PUSH
52405: EMPTY
52406: LIST
52407: LIST
52408: PUSH
52409: LD_INT 0
52411: PUSH
52412: LD_INT 2
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: PUSH
52419: LD_INT 1
52421: PUSH
52422: LD_INT 3
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: PUSH
52429: LD_INT 1
52431: PUSH
52432: LD_INT 4
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: PUSH
52439: LD_INT 0
52441: PUSH
52442: LD_INT 4
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: PUSH
52449: LD_INT 1
52451: NEG
52452: PUSH
52453: LD_INT 3
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: PUSH
52460: LD_INT 1
52462: NEG
52463: PUSH
52464: LD_INT 2
52466: PUSH
52467: EMPTY
52468: LIST
52469: LIST
52470: PUSH
52471: LD_INT 2
52473: PUSH
52474: LD_INT 4
52476: PUSH
52477: EMPTY
52478: LIST
52479: LIST
52480: PUSH
52481: LD_INT 2
52483: NEG
52484: PUSH
52485: LD_INT 2
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: PUSH
52492: LD_INT 4
52494: NEG
52495: PUSH
52496: LD_INT 0
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: PUSH
52503: LD_INT 4
52505: NEG
52506: PUSH
52507: LD_INT 1
52509: NEG
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: PUSH
52515: LD_INT 3
52517: NEG
52518: PUSH
52519: LD_INT 0
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: LD_INT 3
52528: NEG
52529: PUSH
52530: LD_INT 1
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: PUSH
52537: LD_INT 4
52539: NEG
52540: PUSH
52541: LD_INT 1
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: PUSH
52548: LD_INT 5
52550: NEG
52551: PUSH
52552: LD_INT 0
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: PUSH
52559: LD_INT 5
52561: NEG
52562: PUSH
52563: LD_INT 1
52565: NEG
52566: PUSH
52567: EMPTY
52568: LIST
52569: LIST
52570: PUSH
52571: LD_INT 5
52573: NEG
52574: PUSH
52575: LD_INT 2
52577: NEG
52578: PUSH
52579: EMPTY
52580: LIST
52581: LIST
52582: PUSH
52583: LD_INT 3
52585: NEG
52586: PUSH
52587: LD_INT 2
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: PUSH
52594: EMPTY
52595: LIST
52596: LIST
52597: LIST
52598: LIST
52599: LIST
52600: LIST
52601: LIST
52602: LIST
52603: LIST
52604: LIST
52605: LIST
52606: LIST
52607: LIST
52608: LIST
52609: LIST
52610: LIST
52611: LIST
52612: LIST
52613: LIST
52614: LIST
52615: LIST
52616: LIST
52617: LIST
52618: LIST
52619: LIST
52620: LIST
52621: LIST
52622: LIST
52623: LIST
52624: LIST
52625: LIST
52626: LIST
52627: LIST
52628: LIST
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: LIST
52636: LIST
52637: LIST
52638: LIST
52639: LIST
52640: ST_TO_ADDR
// end ; end ;
52641: GO 52644
52643: POP
// case btype of b_depot , b_warehouse :
52644: LD_VAR 0 1
52648: PUSH
52649: LD_INT 0
52651: DOUBLE
52652: EQUAL
52653: IFTRUE 52663
52655: LD_INT 1
52657: DOUBLE
52658: EQUAL
52659: IFTRUE 52663
52661: GO 52864
52663: POP
// case nation of nation_american :
52664: LD_VAR 0 5
52668: PUSH
52669: LD_INT 1
52671: DOUBLE
52672: EQUAL
52673: IFTRUE 52677
52675: GO 52733
52677: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
52678: LD_ADDR_VAR 0 9
52682: PUSH
52683: LD_VAR 0 11
52687: PUSH
52688: LD_VAR 0 12
52692: PUSH
52693: LD_VAR 0 13
52697: PUSH
52698: LD_VAR 0 14
52702: PUSH
52703: LD_VAR 0 15
52707: PUSH
52708: LD_VAR 0 16
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: LIST
52717: LIST
52718: LIST
52719: LIST
52720: PUSH
52721: LD_VAR 0 4
52725: PUSH
52726: LD_INT 1
52728: PLUS
52729: ARRAY
52730: ST_TO_ADDR
52731: GO 52862
52733: LD_INT 2
52735: DOUBLE
52736: EQUAL
52737: IFTRUE 52741
52739: GO 52797
52741: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
52742: LD_ADDR_VAR 0 9
52746: PUSH
52747: LD_VAR 0 17
52751: PUSH
52752: LD_VAR 0 18
52756: PUSH
52757: LD_VAR 0 19
52761: PUSH
52762: LD_VAR 0 20
52766: PUSH
52767: LD_VAR 0 21
52771: PUSH
52772: LD_VAR 0 22
52776: PUSH
52777: EMPTY
52778: LIST
52779: LIST
52780: LIST
52781: LIST
52782: LIST
52783: LIST
52784: PUSH
52785: LD_VAR 0 4
52789: PUSH
52790: LD_INT 1
52792: PLUS
52793: ARRAY
52794: ST_TO_ADDR
52795: GO 52862
52797: LD_INT 3
52799: DOUBLE
52800: EQUAL
52801: IFTRUE 52805
52803: GO 52861
52805: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
52806: LD_ADDR_VAR 0 9
52810: PUSH
52811: LD_VAR 0 23
52815: PUSH
52816: LD_VAR 0 24
52820: PUSH
52821: LD_VAR 0 25
52825: PUSH
52826: LD_VAR 0 26
52830: PUSH
52831: LD_VAR 0 27
52835: PUSH
52836: LD_VAR 0 28
52840: PUSH
52841: EMPTY
52842: LIST
52843: LIST
52844: LIST
52845: LIST
52846: LIST
52847: LIST
52848: PUSH
52849: LD_VAR 0 4
52853: PUSH
52854: LD_INT 1
52856: PLUS
52857: ARRAY
52858: ST_TO_ADDR
52859: GO 52862
52861: POP
52862: GO 53417
52864: LD_INT 2
52866: DOUBLE
52867: EQUAL
52868: IFTRUE 52878
52870: LD_INT 3
52872: DOUBLE
52873: EQUAL
52874: IFTRUE 52878
52876: GO 52934
52878: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
52879: LD_ADDR_VAR 0 9
52883: PUSH
52884: LD_VAR 0 29
52888: PUSH
52889: LD_VAR 0 30
52893: PUSH
52894: LD_VAR 0 31
52898: PUSH
52899: LD_VAR 0 32
52903: PUSH
52904: LD_VAR 0 33
52908: PUSH
52909: LD_VAR 0 34
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: LIST
52918: LIST
52919: LIST
52920: LIST
52921: PUSH
52922: LD_VAR 0 4
52926: PUSH
52927: LD_INT 1
52929: PLUS
52930: ARRAY
52931: ST_TO_ADDR
52932: GO 53417
52934: LD_INT 16
52936: DOUBLE
52937: EQUAL
52938: IFTRUE 52996
52940: LD_INT 17
52942: DOUBLE
52943: EQUAL
52944: IFTRUE 52996
52946: LD_INT 18
52948: DOUBLE
52949: EQUAL
52950: IFTRUE 52996
52952: LD_INT 19
52954: DOUBLE
52955: EQUAL
52956: IFTRUE 52996
52958: LD_INT 22
52960: DOUBLE
52961: EQUAL
52962: IFTRUE 52996
52964: LD_INT 20
52966: DOUBLE
52967: EQUAL
52968: IFTRUE 52996
52970: LD_INT 21
52972: DOUBLE
52973: EQUAL
52974: IFTRUE 52996
52976: LD_INT 23
52978: DOUBLE
52979: EQUAL
52980: IFTRUE 52996
52982: LD_INT 24
52984: DOUBLE
52985: EQUAL
52986: IFTRUE 52996
52988: LD_INT 25
52990: DOUBLE
52991: EQUAL
52992: IFTRUE 52996
52994: GO 53052
52996: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
52997: LD_ADDR_VAR 0 9
53001: PUSH
53002: LD_VAR 0 35
53006: PUSH
53007: LD_VAR 0 36
53011: PUSH
53012: LD_VAR 0 37
53016: PUSH
53017: LD_VAR 0 38
53021: PUSH
53022: LD_VAR 0 39
53026: PUSH
53027: LD_VAR 0 40
53031: PUSH
53032: EMPTY
53033: LIST
53034: LIST
53035: LIST
53036: LIST
53037: LIST
53038: LIST
53039: PUSH
53040: LD_VAR 0 4
53044: PUSH
53045: LD_INT 1
53047: PLUS
53048: ARRAY
53049: ST_TO_ADDR
53050: GO 53417
53052: LD_INT 6
53054: DOUBLE
53055: EQUAL
53056: IFTRUE 53108
53058: LD_INT 7
53060: DOUBLE
53061: EQUAL
53062: IFTRUE 53108
53064: LD_INT 8
53066: DOUBLE
53067: EQUAL
53068: IFTRUE 53108
53070: LD_INT 13
53072: DOUBLE
53073: EQUAL
53074: IFTRUE 53108
53076: LD_INT 12
53078: DOUBLE
53079: EQUAL
53080: IFTRUE 53108
53082: LD_INT 15
53084: DOUBLE
53085: EQUAL
53086: IFTRUE 53108
53088: LD_INT 11
53090: DOUBLE
53091: EQUAL
53092: IFTRUE 53108
53094: LD_INT 14
53096: DOUBLE
53097: EQUAL
53098: IFTRUE 53108
53100: LD_INT 10
53102: DOUBLE
53103: EQUAL
53104: IFTRUE 53108
53106: GO 53164
53108: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
53109: LD_ADDR_VAR 0 9
53113: PUSH
53114: LD_VAR 0 41
53118: PUSH
53119: LD_VAR 0 42
53123: PUSH
53124: LD_VAR 0 43
53128: PUSH
53129: LD_VAR 0 44
53133: PUSH
53134: LD_VAR 0 45
53138: PUSH
53139: LD_VAR 0 46
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: LIST
53148: LIST
53149: LIST
53150: LIST
53151: PUSH
53152: LD_VAR 0 4
53156: PUSH
53157: LD_INT 1
53159: PLUS
53160: ARRAY
53161: ST_TO_ADDR
53162: GO 53417
53164: LD_INT 36
53166: DOUBLE
53167: EQUAL
53168: IFTRUE 53172
53170: GO 53228
53172: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
53173: LD_ADDR_VAR 0 9
53177: PUSH
53178: LD_VAR 0 47
53182: PUSH
53183: LD_VAR 0 48
53187: PUSH
53188: LD_VAR 0 49
53192: PUSH
53193: LD_VAR 0 50
53197: PUSH
53198: LD_VAR 0 51
53202: PUSH
53203: LD_VAR 0 52
53207: PUSH
53208: EMPTY
53209: LIST
53210: LIST
53211: LIST
53212: LIST
53213: LIST
53214: LIST
53215: PUSH
53216: LD_VAR 0 4
53220: PUSH
53221: LD_INT 1
53223: PLUS
53224: ARRAY
53225: ST_TO_ADDR
53226: GO 53417
53228: LD_INT 4
53230: DOUBLE
53231: EQUAL
53232: IFTRUE 53254
53234: LD_INT 5
53236: DOUBLE
53237: EQUAL
53238: IFTRUE 53254
53240: LD_INT 34
53242: DOUBLE
53243: EQUAL
53244: IFTRUE 53254
53246: LD_INT 37
53248: DOUBLE
53249: EQUAL
53250: IFTRUE 53254
53252: GO 53310
53254: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
53255: LD_ADDR_VAR 0 9
53259: PUSH
53260: LD_VAR 0 53
53264: PUSH
53265: LD_VAR 0 54
53269: PUSH
53270: LD_VAR 0 55
53274: PUSH
53275: LD_VAR 0 56
53279: PUSH
53280: LD_VAR 0 57
53284: PUSH
53285: LD_VAR 0 58
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: LIST
53294: LIST
53295: LIST
53296: LIST
53297: PUSH
53298: LD_VAR 0 4
53302: PUSH
53303: LD_INT 1
53305: PLUS
53306: ARRAY
53307: ST_TO_ADDR
53308: GO 53417
53310: LD_INT 31
53312: DOUBLE
53313: EQUAL
53314: IFTRUE 53360
53316: LD_INT 32
53318: DOUBLE
53319: EQUAL
53320: IFTRUE 53360
53322: LD_INT 33
53324: DOUBLE
53325: EQUAL
53326: IFTRUE 53360
53328: LD_INT 27
53330: DOUBLE
53331: EQUAL
53332: IFTRUE 53360
53334: LD_INT 26
53336: DOUBLE
53337: EQUAL
53338: IFTRUE 53360
53340: LD_INT 28
53342: DOUBLE
53343: EQUAL
53344: IFTRUE 53360
53346: LD_INT 29
53348: DOUBLE
53349: EQUAL
53350: IFTRUE 53360
53352: LD_INT 30
53354: DOUBLE
53355: EQUAL
53356: IFTRUE 53360
53358: GO 53416
53360: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
53361: LD_ADDR_VAR 0 9
53365: PUSH
53366: LD_VAR 0 59
53370: PUSH
53371: LD_VAR 0 60
53375: PUSH
53376: LD_VAR 0 61
53380: PUSH
53381: LD_VAR 0 62
53385: PUSH
53386: LD_VAR 0 63
53390: PUSH
53391: LD_VAR 0 64
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: LIST
53400: LIST
53401: LIST
53402: LIST
53403: PUSH
53404: LD_VAR 0 4
53408: PUSH
53409: LD_INT 1
53411: PLUS
53412: ARRAY
53413: ST_TO_ADDR
53414: GO 53417
53416: POP
// temp_list2 = [ ] ;
53417: LD_ADDR_VAR 0 10
53421: PUSH
53422: EMPTY
53423: ST_TO_ADDR
// for i in temp_list do
53424: LD_ADDR_VAR 0 8
53428: PUSH
53429: LD_VAR 0 9
53433: PUSH
53434: FOR_IN
53435: IFFALSE 53487
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
53437: LD_ADDR_VAR 0 10
53441: PUSH
53442: LD_VAR 0 10
53446: PUSH
53447: LD_VAR 0 8
53451: PUSH
53452: LD_INT 1
53454: ARRAY
53455: PUSH
53456: LD_VAR 0 2
53460: PLUS
53461: PUSH
53462: LD_VAR 0 8
53466: PUSH
53467: LD_INT 2
53469: ARRAY
53470: PUSH
53471: LD_VAR 0 3
53475: PLUS
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: PUSH
53481: EMPTY
53482: LIST
53483: ADD
53484: ST_TO_ADDR
53485: GO 53434
53487: POP
53488: POP
// result = temp_list2 ;
53489: LD_ADDR_VAR 0 7
53493: PUSH
53494: LD_VAR 0 10
53498: ST_TO_ADDR
// end ;
53499: LD_VAR 0 7
53503: RET
// export function EnemyInRange ( unit , dist ) ; begin
53504: LD_INT 0
53506: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
53507: LD_ADDR_VAR 0 3
53511: PUSH
53512: LD_VAR 0 1
53516: PPUSH
53517: CALL_OW 255
53521: PPUSH
53522: LD_VAR 0 1
53526: PPUSH
53527: CALL_OW 250
53531: PPUSH
53532: LD_VAR 0 1
53536: PPUSH
53537: CALL_OW 251
53541: PPUSH
53542: LD_VAR 0 2
53546: PPUSH
53547: CALL 27608 0 4
53551: PUSH
53552: LD_INT 4
53554: ARRAY
53555: ST_TO_ADDR
// end ;
53556: LD_VAR 0 3
53560: RET
// export function PlayerSeeMe ( unit ) ; begin
53561: LD_INT 0
53563: PPUSH
// result := See ( your_side , unit ) ;
53564: LD_ADDR_VAR 0 2
53568: PUSH
53569: LD_OWVAR 2
53573: PPUSH
53574: LD_VAR 0 1
53578: PPUSH
53579: CALL_OW 292
53583: ST_TO_ADDR
// end ;
53584: LD_VAR 0 2
53588: RET
// export function ReverseDir ( unit ) ; begin
53589: LD_INT 0
53591: PPUSH
// if not unit then
53592: LD_VAR 0 1
53596: NOT
53597: IFFALSE 53601
// exit ;
53599: GO 53624
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
53601: LD_ADDR_VAR 0 2
53605: PUSH
53606: LD_VAR 0 1
53610: PPUSH
53611: CALL_OW 254
53615: PUSH
53616: LD_INT 3
53618: PLUS
53619: PUSH
53620: LD_INT 6
53622: MOD
53623: ST_TO_ADDR
// end ;
53624: LD_VAR 0 2
53628: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
53629: LD_INT 0
53631: PPUSH
53632: PPUSH
53633: PPUSH
53634: PPUSH
53635: PPUSH
// if not hexes then
53636: LD_VAR 0 2
53640: NOT
53641: IFFALSE 53645
// exit ;
53643: GO 53793
// dist := 9999 ;
53645: LD_ADDR_VAR 0 5
53649: PUSH
53650: LD_INT 9999
53652: ST_TO_ADDR
// for i = 1 to hexes do
53653: LD_ADDR_VAR 0 4
53657: PUSH
53658: DOUBLE
53659: LD_INT 1
53661: DEC
53662: ST_TO_ADDR
53663: LD_VAR 0 2
53667: PUSH
53668: FOR_TO
53669: IFFALSE 53781
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
53671: LD_VAR 0 1
53675: PPUSH
53676: LD_VAR 0 2
53680: PUSH
53681: LD_VAR 0 4
53685: ARRAY
53686: PUSH
53687: LD_INT 1
53689: ARRAY
53690: PPUSH
53691: LD_VAR 0 2
53695: PUSH
53696: LD_VAR 0 4
53700: ARRAY
53701: PUSH
53702: LD_INT 2
53704: ARRAY
53705: PPUSH
53706: CALL_OW 297
53710: PUSH
53711: LD_VAR 0 5
53715: LESS
53716: IFFALSE 53779
// begin hex := hexes [ i ] ;
53718: LD_ADDR_VAR 0 7
53722: PUSH
53723: LD_VAR 0 2
53727: PUSH
53728: LD_VAR 0 4
53732: ARRAY
53733: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53734: LD_ADDR_VAR 0 5
53738: PUSH
53739: LD_VAR 0 1
53743: PPUSH
53744: LD_VAR 0 2
53748: PUSH
53749: LD_VAR 0 4
53753: ARRAY
53754: PUSH
53755: LD_INT 1
53757: ARRAY
53758: PPUSH
53759: LD_VAR 0 2
53763: PUSH
53764: LD_VAR 0 4
53768: ARRAY
53769: PUSH
53770: LD_INT 2
53772: ARRAY
53773: PPUSH
53774: CALL_OW 297
53778: ST_TO_ADDR
// end ; end ;
53779: GO 53668
53781: POP
53782: POP
// result := hex ;
53783: LD_ADDR_VAR 0 3
53787: PUSH
53788: LD_VAR 0 7
53792: ST_TO_ADDR
// end ;
53793: LD_VAR 0 3
53797: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
53798: LD_INT 0
53800: PPUSH
53801: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
53802: LD_VAR 0 1
53806: NOT
53807: PUSH
53808: LD_VAR 0 1
53812: PUSH
53813: LD_INT 21
53815: PUSH
53816: LD_INT 2
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: LD_INT 23
53825: PUSH
53826: LD_INT 2
53828: PUSH
53829: EMPTY
53830: LIST
53831: LIST
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: PPUSH
53837: CALL_OW 69
53841: IN
53842: NOT
53843: OR
53844: IFFALSE 53848
// exit ;
53846: GO 53895
// for i = 1 to 3 do
53848: LD_ADDR_VAR 0 3
53852: PUSH
53853: DOUBLE
53854: LD_INT 1
53856: DEC
53857: ST_TO_ADDR
53858: LD_INT 3
53860: PUSH
53861: FOR_TO
53862: IFFALSE 53893
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
53864: LD_VAR 0 1
53868: PPUSH
53869: CALL_OW 250
53873: PPUSH
53874: LD_VAR 0 1
53878: PPUSH
53879: CALL_OW 251
53883: PPUSH
53884: LD_INT 1
53886: PPUSH
53887: CALL_OW 453
53891: GO 53861
53893: POP
53894: POP
// end ;
53895: LD_VAR 0 2
53899: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
53900: LD_INT 0
53902: PPUSH
53903: PPUSH
53904: PPUSH
53905: PPUSH
53906: PPUSH
53907: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
53908: LD_VAR 0 1
53912: NOT
53913: PUSH
53914: LD_VAR 0 2
53918: NOT
53919: OR
53920: PUSH
53921: LD_VAR 0 1
53925: PPUSH
53926: CALL_OW 314
53930: OR
53931: IFFALSE 53935
// exit ;
53933: GO 54376
// x := GetX ( enemy_unit ) ;
53935: LD_ADDR_VAR 0 7
53939: PUSH
53940: LD_VAR 0 2
53944: PPUSH
53945: CALL_OW 250
53949: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
53950: LD_ADDR_VAR 0 8
53954: PUSH
53955: LD_VAR 0 2
53959: PPUSH
53960: CALL_OW 251
53964: ST_TO_ADDR
// if not x or not y then
53965: LD_VAR 0 7
53969: NOT
53970: PUSH
53971: LD_VAR 0 8
53975: NOT
53976: OR
53977: IFFALSE 53981
// exit ;
53979: GO 54376
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
53981: LD_ADDR_VAR 0 6
53985: PUSH
53986: LD_VAR 0 7
53990: PPUSH
53991: LD_INT 0
53993: PPUSH
53994: LD_INT 4
53996: PPUSH
53997: CALL_OW 272
54001: PUSH
54002: LD_VAR 0 8
54006: PPUSH
54007: LD_INT 0
54009: PPUSH
54010: LD_INT 4
54012: PPUSH
54013: CALL_OW 273
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PUSH
54022: LD_VAR 0 7
54026: PPUSH
54027: LD_INT 1
54029: PPUSH
54030: LD_INT 4
54032: PPUSH
54033: CALL_OW 272
54037: PUSH
54038: LD_VAR 0 8
54042: PPUSH
54043: LD_INT 1
54045: PPUSH
54046: LD_INT 4
54048: PPUSH
54049: CALL_OW 273
54053: PUSH
54054: EMPTY
54055: LIST
54056: LIST
54057: PUSH
54058: LD_VAR 0 7
54062: PPUSH
54063: LD_INT 2
54065: PPUSH
54066: LD_INT 4
54068: PPUSH
54069: CALL_OW 272
54073: PUSH
54074: LD_VAR 0 8
54078: PPUSH
54079: LD_INT 2
54081: PPUSH
54082: LD_INT 4
54084: PPUSH
54085: CALL_OW 273
54089: PUSH
54090: EMPTY
54091: LIST
54092: LIST
54093: PUSH
54094: LD_VAR 0 7
54098: PPUSH
54099: LD_INT 3
54101: PPUSH
54102: LD_INT 4
54104: PPUSH
54105: CALL_OW 272
54109: PUSH
54110: LD_VAR 0 8
54114: PPUSH
54115: LD_INT 3
54117: PPUSH
54118: LD_INT 4
54120: PPUSH
54121: CALL_OW 273
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: PUSH
54130: LD_VAR 0 7
54134: PPUSH
54135: LD_INT 4
54137: PPUSH
54138: LD_INT 4
54140: PPUSH
54141: CALL_OW 272
54145: PUSH
54146: LD_VAR 0 8
54150: PPUSH
54151: LD_INT 4
54153: PPUSH
54154: LD_INT 4
54156: PPUSH
54157: CALL_OW 273
54161: PUSH
54162: EMPTY
54163: LIST
54164: LIST
54165: PUSH
54166: LD_VAR 0 7
54170: PPUSH
54171: LD_INT 5
54173: PPUSH
54174: LD_INT 4
54176: PPUSH
54177: CALL_OW 272
54181: PUSH
54182: LD_VAR 0 8
54186: PPUSH
54187: LD_INT 5
54189: PPUSH
54190: LD_INT 4
54192: PPUSH
54193: CALL_OW 273
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: PUSH
54202: EMPTY
54203: LIST
54204: LIST
54205: LIST
54206: LIST
54207: LIST
54208: LIST
54209: ST_TO_ADDR
// for i = tmp downto 1 do
54210: LD_ADDR_VAR 0 4
54214: PUSH
54215: DOUBLE
54216: LD_VAR 0 6
54220: INC
54221: ST_TO_ADDR
54222: LD_INT 1
54224: PUSH
54225: FOR_DOWNTO
54226: IFFALSE 54327
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
54228: LD_VAR 0 6
54232: PUSH
54233: LD_VAR 0 4
54237: ARRAY
54238: PUSH
54239: LD_INT 1
54241: ARRAY
54242: PPUSH
54243: LD_VAR 0 6
54247: PUSH
54248: LD_VAR 0 4
54252: ARRAY
54253: PUSH
54254: LD_INT 2
54256: ARRAY
54257: PPUSH
54258: CALL_OW 488
54262: NOT
54263: PUSH
54264: LD_VAR 0 6
54268: PUSH
54269: LD_VAR 0 4
54273: ARRAY
54274: PUSH
54275: LD_INT 1
54277: ARRAY
54278: PPUSH
54279: LD_VAR 0 6
54283: PUSH
54284: LD_VAR 0 4
54288: ARRAY
54289: PUSH
54290: LD_INT 2
54292: ARRAY
54293: PPUSH
54294: CALL_OW 428
54298: PUSH
54299: LD_INT 0
54301: NONEQUAL
54302: OR
54303: IFFALSE 54325
// tmp := Delete ( tmp , i ) ;
54305: LD_ADDR_VAR 0 6
54309: PUSH
54310: LD_VAR 0 6
54314: PPUSH
54315: LD_VAR 0 4
54319: PPUSH
54320: CALL_OW 3
54324: ST_TO_ADDR
54325: GO 54225
54327: POP
54328: POP
// j := GetClosestHex ( unit , tmp ) ;
54329: LD_ADDR_VAR 0 5
54333: PUSH
54334: LD_VAR 0 1
54338: PPUSH
54339: LD_VAR 0 6
54343: PPUSH
54344: CALL 53629 0 2
54348: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
54349: LD_VAR 0 1
54353: PPUSH
54354: LD_VAR 0 5
54358: PUSH
54359: LD_INT 1
54361: ARRAY
54362: PPUSH
54363: LD_VAR 0 5
54367: PUSH
54368: LD_INT 2
54370: ARRAY
54371: PPUSH
54372: CALL_OW 111
// end ;
54376: LD_VAR 0 3
54380: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
54381: LD_INT 0
54383: PPUSH
54384: PPUSH
54385: PPUSH
// uc_side = 0 ;
54386: LD_ADDR_OWVAR 20
54390: PUSH
54391: LD_INT 0
54393: ST_TO_ADDR
// uc_nation = 0 ;
54394: LD_ADDR_OWVAR 21
54398: PUSH
54399: LD_INT 0
54401: ST_TO_ADDR
// InitHc ;
54402: CALL_OW 19
// InitVc ;
54406: CALL_OW 20
// if mastodonts then
54410: LD_VAR 0 6
54414: IFFALSE 54481
// for i = 1 to mastodonts do
54416: LD_ADDR_VAR 0 11
54420: PUSH
54421: DOUBLE
54422: LD_INT 1
54424: DEC
54425: ST_TO_ADDR
54426: LD_VAR 0 6
54430: PUSH
54431: FOR_TO
54432: IFFALSE 54479
// begin vc_chassis := 31 ;
54434: LD_ADDR_OWVAR 37
54438: PUSH
54439: LD_INT 31
54441: ST_TO_ADDR
// vc_control := control_rider ;
54442: LD_ADDR_OWVAR 38
54446: PUSH
54447: LD_INT 4
54449: ST_TO_ADDR
// animal := CreateVehicle ;
54450: LD_ADDR_VAR 0 12
54454: PUSH
54455: CALL_OW 45
54459: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54460: LD_VAR 0 12
54464: PPUSH
54465: LD_VAR 0 8
54469: PPUSH
54470: LD_INT 0
54472: PPUSH
54473: CALL 61259 0 3
// end ;
54477: GO 54431
54479: POP
54480: POP
// if horses then
54481: LD_VAR 0 5
54485: IFFALSE 54552
// for i = 1 to horses do
54487: LD_ADDR_VAR 0 11
54491: PUSH
54492: DOUBLE
54493: LD_INT 1
54495: DEC
54496: ST_TO_ADDR
54497: LD_VAR 0 5
54501: PUSH
54502: FOR_TO
54503: IFFALSE 54550
// begin hc_class := 21 ;
54505: LD_ADDR_OWVAR 28
54509: PUSH
54510: LD_INT 21
54512: ST_TO_ADDR
// hc_gallery :=  ;
54513: LD_ADDR_OWVAR 33
54517: PUSH
54518: LD_STRING 
54520: ST_TO_ADDR
// animal := CreateHuman ;
54521: LD_ADDR_VAR 0 12
54525: PUSH
54526: CALL_OW 44
54530: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54531: LD_VAR 0 12
54535: PPUSH
54536: LD_VAR 0 8
54540: PPUSH
54541: LD_INT 0
54543: PPUSH
54544: CALL 61259 0 3
// end ;
54548: GO 54502
54550: POP
54551: POP
// if birds then
54552: LD_VAR 0 1
54556: IFFALSE 54623
// for i = 1 to birds do
54558: LD_ADDR_VAR 0 11
54562: PUSH
54563: DOUBLE
54564: LD_INT 1
54566: DEC
54567: ST_TO_ADDR
54568: LD_VAR 0 1
54572: PUSH
54573: FOR_TO
54574: IFFALSE 54621
// begin hc_class = 18 ;
54576: LD_ADDR_OWVAR 28
54580: PUSH
54581: LD_INT 18
54583: ST_TO_ADDR
// hc_gallery =  ;
54584: LD_ADDR_OWVAR 33
54588: PUSH
54589: LD_STRING 
54591: ST_TO_ADDR
// animal := CreateHuman ;
54592: LD_ADDR_VAR 0 12
54596: PUSH
54597: CALL_OW 44
54601: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54602: LD_VAR 0 12
54606: PPUSH
54607: LD_VAR 0 8
54611: PPUSH
54612: LD_INT 0
54614: PPUSH
54615: CALL 61259 0 3
// end ;
54619: GO 54573
54621: POP
54622: POP
// if tigers then
54623: LD_VAR 0 2
54627: IFFALSE 54711
// for i = 1 to tigers do
54629: LD_ADDR_VAR 0 11
54633: PUSH
54634: DOUBLE
54635: LD_INT 1
54637: DEC
54638: ST_TO_ADDR
54639: LD_VAR 0 2
54643: PUSH
54644: FOR_TO
54645: IFFALSE 54709
// begin hc_class = class_tiger ;
54647: LD_ADDR_OWVAR 28
54651: PUSH
54652: LD_INT 14
54654: ST_TO_ADDR
// hc_gallery =  ;
54655: LD_ADDR_OWVAR 33
54659: PUSH
54660: LD_STRING 
54662: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
54663: LD_ADDR_OWVAR 35
54667: PUSH
54668: LD_INT 7
54670: NEG
54671: PPUSH
54672: LD_INT 7
54674: PPUSH
54675: CALL_OW 12
54679: ST_TO_ADDR
// animal := CreateHuman ;
54680: LD_ADDR_VAR 0 12
54684: PUSH
54685: CALL_OW 44
54689: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54690: LD_VAR 0 12
54694: PPUSH
54695: LD_VAR 0 8
54699: PPUSH
54700: LD_INT 0
54702: PPUSH
54703: CALL 61259 0 3
// end ;
54707: GO 54644
54709: POP
54710: POP
// if apemans then
54711: LD_VAR 0 3
54715: IFFALSE 54838
// for i = 1 to apemans do
54717: LD_ADDR_VAR 0 11
54721: PUSH
54722: DOUBLE
54723: LD_INT 1
54725: DEC
54726: ST_TO_ADDR
54727: LD_VAR 0 3
54731: PUSH
54732: FOR_TO
54733: IFFALSE 54836
// begin hc_class = class_apeman ;
54735: LD_ADDR_OWVAR 28
54739: PUSH
54740: LD_INT 12
54742: ST_TO_ADDR
// hc_gallery =  ;
54743: LD_ADDR_OWVAR 33
54747: PUSH
54748: LD_STRING 
54750: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
54751: LD_ADDR_OWVAR 35
54755: PUSH
54756: LD_INT 5
54758: NEG
54759: PPUSH
54760: LD_INT 5
54762: PPUSH
54763: CALL_OW 12
54767: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
54768: LD_ADDR_OWVAR 31
54772: PUSH
54773: LD_INT 1
54775: PPUSH
54776: LD_INT 3
54778: PPUSH
54779: CALL_OW 12
54783: PUSH
54784: LD_INT 1
54786: PPUSH
54787: LD_INT 3
54789: PPUSH
54790: CALL_OW 12
54794: PUSH
54795: LD_INT 0
54797: PUSH
54798: LD_INT 0
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: LIST
54805: LIST
54806: ST_TO_ADDR
// animal := CreateHuman ;
54807: LD_ADDR_VAR 0 12
54811: PUSH
54812: CALL_OW 44
54816: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54817: LD_VAR 0 12
54821: PPUSH
54822: LD_VAR 0 8
54826: PPUSH
54827: LD_INT 0
54829: PPUSH
54830: CALL 61259 0 3
// end ;
54834: GO 54732
54836: POP
54837: POP
// if enchidnas then
54838: LD_VAR 0 4
54842: IFFALSE 54909
// for i = 1 to enchidnas do
54844: LD_ADDR_VAR 0 11
54848: PUSH
54849: DOUBLE
54850: LD_INT 1
54852: DEC
54853: ST_TO_ADDR
54854: LD_VAR 0 4
54858: PUSH
54859: FOR_TO
54860: IFFALSE 54907
// begin hc_class = 13 ;
54862: LD_ADDR_OWVAR 28
54866: PUSH
54867: LD_INT 13
54869: ST_TO_ADDR
// hc_gallery =  ;
54870: LD_ADDR_OWVAR 33
54874: PUSH
54875: LD_STRING 
54877: ST_TO_ADDR
// animal := CreateHuman ;
54878: LD_ADDR_VAR 0 12
54882: PUSH
54883: CALL_OW 44
54887: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54888: LD_VAR 0 12
54892: PPUSH
54893: LD_VAR 0 8
54897: PPUSH
54898: LD_INT 0
54900: PPUSH
54901: CALL 61259 0 3
// end ;
54905: GO 54859
54907: POP
54908: POP
// if fishes then
54909: LD_VAR 0 7
54913: IFFALSE 54980
// for i = 1 to fishes do
54915: LD_ADDR_VAR 0 11
54919: PUSH
54920: DOUBLE
54921: LD_INT 1
54923: DEC
54924: ST_TO_ADDR
54925: LD_VAR 0 7
54929: PUSH
54930: FOR_TO
54931: IFFALSE 54978
// begin hc_class = 20 ;
54933: LD_ADDR_OWVAR 28
54937: PUSH
54938: LD_INT 20
54940: ST_TO_ADDR
// hc_gallery =  ;
54941: LD_ADDR_OWVAR 33
54945: PUSH
54946: LD_STRING 
54948: ST_TO_ADDR
// animal := CreateHuman ;
54949: LD_ADDR_VAR 0 12
54953: PUSH
54954: CALL_OW 44
54958: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
54959: LD_VAR 0 12
54963: PPUSH
54964: LD_VAR 0 9
54968: PPUSH
54969: LD_INT 0
54971: PPUSH
54972: CALL 61259 0 3
// end ;
54976: GO 54930
54978: POP
54979: POP
// end ;
54980: LD_VAR 0 10
54984: RET
// export function WantHeal ( sci , unit ) ; begin
54985: LD_INT 0
54987: PPUSH
// if GetTaskList ( sci ) > 0 then
54988: LD_VAR 0 1
54992: PPUSH
54993: CALL_OW 437
54997: PUSH
54998: LD_INT 0
55000: GREATER
55001: IFFALSE 55071
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
55003: LD_VAR 0 1
55007: PPUSH
55008: CALL_OW 437
55012: PUSH
55013: LD_INT 1
55015: ARRAY
55016: PUSH
55017: LD_INT 1
55019: ARRAY
55020: PUSH
55021: LD_STRING l
55023: EQUAL
55024: PUSH
55025: LD_VAR 0 1
55029: PPUSH
55030: CALL_OW 437
55034: PUSH
55035: LD_INT 1
55037: ARRAY
55038: PUSH
55039: LD_INT 4
55041: ARRAY
55042: PUSH
55043: LD_VAR 0 2
55047: EQUAL
55048: AND
55049: IFFALSE 55061
// result := true else
55051: LD_ADDR_VAR 0 3
55055: PUSH
55056: LD_INT 1
55058: ST_TO_ADDR
55059: GO 55069
// result := false ;
55061: LD_ADDR_VAR 0 3
55065: PUSH
55066: LD_INT 0
55068: ST_TO_ADDR
// end else
55069: GO 55079
// result := false ;
55071: LD_ADDR_VAR 0 3
55075: PUSH
55076: LD_INT 0
55078: ST_TO_ADDR
// end ;
55079: LD_VAR 0 3
55083: RET
// export function HealTarget ( sci ) ; begin
55084: LD_INT 0
55086: PPUSH
// if not sci then
55087: LD_VAR 0 1
55091: NOT
55092: IFFALSE 55096
// exit ;
55094: GO 55161
// result := 0 ;
55096: LD_ADDR_VAR 0 2
55100: PUSH
55101: LD_INT 0
55103: ST_TO_ADDR
// if GetTaskList ( sci ) then
55104: LD_VAR 0 1
55108: PPUSH
55109: CALL_OW 437
55113: IFFALSE 55161
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
55115: LD_VAR 0 1
55119: PPUSH
55120: CALL_OW 437
55124: PUSH
55125: LD_INT 1
55127: ARRAY
55128: PUSH
55129: LD_INT 1
55131: ARRAY
55132: PUSH
55133: LD_STRING l
55135: EQUAL
55136: IFFALSE 55161
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
55138: LD_ADDR_VAR 0 2
55142: PUSH
55143: LD_VAR 0 1
55147: PPUSH
55148: CALL_OW 437
55152: PUSH
55153: LD_INT 1
55155: ARRAY
55156: PUSH
55157: LD_INT 4
55159: ARRAY
55160: ST_TO_ADDR
// end ;
55161: LD_VAR 0 2
55165: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking , to_heal , healers , to_repair , repairs , empty_vehs , side ; begin
55166: LD_INT 0
55168: PPUSH
55169: PPUSH
55170: PPUSH
55171: PPUSH
55172: PPUSH
55173: PPUSH
55174: PPUSH
55175: PPUSH
55176: PPUSH
55177: PPUSH
55178: PPUSH
55179: PPUSH
55180: PPUSH
55181: PPUSH
55182: PPUSH
55183: PPUSH
55184: PPUSH
55185: PPUSH
55186: PPUSH
55187: PPUSH
55188: PPUSH
55189: PPUSH
55190: PPUSH
55191: PPUSH
55192: PPUSH
55193: PPUSH
55194: PPUSH
55195: PPUSH
55196: PPUSH
55197: PPUSH
55198: PPUSH
55199: PPUSH
55200: PPUSH
55201: PPUSH
// if not list then
55202: LD_VAR 0 1
55206: NOT
55207: IFFALSE 55211
// exit ;
55209: GO 59870
// base := list [ 1 ] ;
55211: LD_ADDR_VAR 0 3
55215: PUSH
55216: LD_VAR 0 1
55220: PUSH
55221: LD_INT 1
55223: ARRAY
55224: ST_TO_ADDR
// group := list [ 2 ] ;
55225: LD_ADDR_VAR 0 4
55229: PUSH
55230: LD_VAR 0 1
55234: PUSH
55235: LD_INT 2
55237: ARRAY
55238: ST_TO_ADDR
// path := list [ 3 ] ;
55239: LD_ADDR_VAR 0 5
55243: PUSH
55244: LD_VAR 0 1
55248: PUSH
55249: LD_INT 3
55251: ARRAY
55252: ST_TO_ADDR
// flags := list [ 4 ] ;
55253: LD_ADDR_VAR 0 6
55257: PUSH
55258: LD_VAR 0 1
55262: PUSH
55263: LD_INT 4
55265: ARRAY
55266: ST_TO_ADDR
// mined := [ ] ;
55267: LD_ADDR_VAR 0 27
55271: PUSH
55272: EMPTY
55273: ST_TO_ADDR
// bombed := [ ] ;
55274: LD_ADDR_VAR 0 28
55278: PUSH
55279: EMPTY
55280: ST_TO_ADDR
// healers := [ ] ;
55281: LD_ADDR_VAR 0 31
55285: PUSH
55286: EMPTY
55287: ST_TO_ADDR
// to_heal := [ ] ;
55288: LD_ADDR_VAR 0 30
55292: PUSH
55293: EMPTY
55294: ST_TO_ADDR
// repairs := [ ] ;
55295: LD_ADDR_VAR 0 33
55299: PUSH
55300: EMPTY
55301: ST_TO_ADDR
// to_repair := [ ] ;
55302: LD_ADDR_VAR 0 32
55306: PUSH
55307: EMPTY
55308: ST_TO_ADDR
// if not group or not path then
55309: LD_VAR 0 4
55313: NOT
55314: PUSH
55315: LD_VAR 0 5
55319: NOT
55320: OR
55321: IFFALSE 55325
// exit ;
55323: GO 59870
// side := GetSide ( group [ 1 ] ) ;
55325: LD_ADDR_VAR 0 35
55329: PUSH
55330: LD_VAR 0 4
55334: PUSH
55335: LD_INT 1
55337: ARRAY
55338: PPUSH
55339: CALL_OW 255
55343: ST_TO_ADDR
// if flags then
55344: LD_VAR 0 6
55348: IFFALSE 55492
// begin f_ignore_area := flags [ 1 ] ;
55350: LD_ADDR_VAR 0 17
55354: PUSH
55355: LD_VAR 0 6
55359: PUSH
55360: LD_INT 1
55362: ARRAY
55363: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
55364: LD_ADDR_VAR 0 18
55368: PUSH
55369: LD_VAR 0 6
55373: PUSH
55374: LD_INT 2
55376: ARRAY
55377: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
55378: LD_ADDR_VAR 0 19
55382: PUSH
55383: LD_VAR 0 6
55387: PUSH
55388: LD_INT 3
55390: ARRAY
55391: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
55392: LD_ADDR_VAR 0 20
55396: PUSH
55397: LD_VAR 0 6
55401: PUSH
55402: LD_INT 4
55404: ARRAY
55405: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
55406: LD_ADDR_VAR 0 21
55410: PUSH
55411: LD_VAR 0 6
55415: PUSH
55416: LD_INT 5
55418: ARRAY
55419: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
55420: LD_ADDR_VAR 0 22
55424: PUSH
55425: LD_VAR 0 6
55429: PUSH
55430: LD_INT 6
55432: ARRAY
55433: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
55434: LD_ADDR_VAR 0 23
55438: PUSH
55439: LD_VAR 0 6
55443: PUSH
55444: LD_INT 7
55446: ARRAY
55447: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
55448: LD_ADDR_VAR 0 24
55452: PUSH
55453: LD_VAR 0 6
55457: PUSH
55458: LD_INT 8
55460: ARRAY
55461: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
55462: LD_ADDR_VAR 0 25
55466: PUSH
55467: LD_VAR 0 6
55471: PUSH
55472: LD_INT 9
55474: ARRAY
55475: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
55476: LD_ADDR_VAR 0 26
55480: PUSH
55481: LD_VAR 0 6
55485: PUSH
55486: LD_INT 10
55488: ARRAY
55489: ST_TO_ADDR
// end else
55490: GO 55572
// begin f_ignore_area := false ;
55492: LD_ADDR_VAR 0 17
55496: PUSH
55497: LD_INT 0
55499: ST_TO_ADDR
// f_capture := false ;
55500: LD_ADDR_VAR 0 18
55504: PUSH
55505: LD_INT 0
55507: ST_TO_ADDR
// f_ignore_civ := false ;
55508: LD_ADDR_VAR 0 19
55512: PUSH
55513: LD_INT 0
55515: ST_TO_ADDR
// f_murder := false ;
55516: LD_ADDR_VAR 0 20
55520: PUSH
55521: LD_INT 0
55523: ST_TO_ADDR
// f_mines := false ;
55524: LD_ADDR_VAR 0 21
55528: PUSH
55529: LD_INT 0
55531: ST_TO_ADDR
// f_repair := false ;
55532: LD_ADDR_VAR 0 22
55536: PUSH
55537: LD_INT 0
55539: ST_TO_ADDR
// f_heal := false ;
55540: LD_ADDR_VAR 0 23
55544: PUSH
55545: LD_INT 0
55547: ST_TO_ADDR
// f_spacetime := false ;
55548: LD_ADDR_VAR 0 24
55552: PUSH
55553: LD_INT 0
55555: ST_TO_ADDR
// f_attack_depot := false ;
55556: LD_ADDR_VAR 0 25
55560: PUSH
55561: LD_INT 0
55563: ST_TO_ADDR
// f_crawl := false ;
55564: LD_ADDR_VAR 0 26
55568: PUSH
55569: LD_INT 0
55571: ST_TO_ADDR
// end ; if f_heal then
55572: LD_VAR 0 23
55576: IFFALSE 55603
// healers := UnitFilter ( group , [ f_class , 4 ] ) ;
55578: LD_ADDR_VAR 0 31
55582: PUSH
55583: LD_VAR 0 4
55587: PPUSH
55588: LD_INT 25
55590: PUSH
55591: LD_INT 4
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: PPUSH
55598: CALL_OW 72
55602: ST_TO_ADDR
// if f_repair then
55603: LD_VAR 0 22
55607: IFFALSE 55634
// repairs := UnitFilter ( group , [ f_class , 3 ] ) ;
55609: LD_ADDR_VAR 0 33
55613: PUSH
55614: LD_VAR 0 4
55618: PPUSH
55619: LD_INT 25
55621: PUSH
55622: LD_INT 3
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PPUSH
55629: CALL_OW 72
55633: ST_TO_ADDR
// units_path := [ ] ;
55634: LD_ADDR_VAR 0 16
55638: PUSH
55639: EMPTY
55640: ST_TO_ADDR
// for i = 1 to group do
55641: LD_ADDR_VAR 0 7
55645: PUSH
55646: DOUBLE
55647: LD_INT 1
55649: DEC
55650: ST_TO_ADDR
55651: LD_VAR 0 4
55655: PUSH
55656: FOR_TO
55657: IFFALSE 55686
// units_path := Replace ( units_path , i , path ) ;
55659: LD_ADDR_VAR 0 16
55663: PUSH
55664: LD_VAR 0 16
55668: PPUSH
55669: LD_VAR 0 7
55673: PPUSH
55674: LD_VAR 0 5
55678: PPUSH
55679: CALL_OW 1
55683: ST_TO_ADDR
55684: GO 55656
55686: POP
55687: POP
// repeat for i = group downto 1 do
55688: LD_ADDR_VAR 0 7
55692: PUSH
55693: DOUBLE
55694: LD_VAR 0 4
55698: INC
55699: ST_TO_ADDR
55700: LD_INT 1
55702: PUSH
55703: FOR_DOWNTO
55704: IFFALSE 59826
// begin wait ( 5 ) ;
55706: LD_INT 5
55708: PPUSH
55709: CALL_OW 67
// tmp := [ ] ;
55713: LD_ADDR_VAR 0 14
55717: PUSH
55718: EMPTY
55719: ST_TO_ADDR
// attacking := false ;
55720: LD_ADDR_VAR 0 29
55724: PUSH
55725: LD_INT 0
55727: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
55728: LD_VAR 0 4
55732: PUSH
55733: LD_VAR 0 7
55737: ARRAY
55738: PPUSH
55739: CALL_OW 301
55743: PUSH
55744: LD_VAR 0 4
55748: PUSH
55749: LD_VAR 0 7
55753: ARRAY
55754: NOT
55755: OR
55756: IFFALSE 55865
// begin if GetType ( group [ i ] ) = unit_human then
55758: LD_VAR 0 4
55762: PUSH
55763: LD_VAR 0 7
55767: ARRAY
55768: PPUSH
55769: CALL_OW 247
55773: PUSH
55774: LD_INT 1
55776: EQUAL
55777: IFFALSE 55823
// begin to_heal := to_heal diff group [ i ] ;
55779: LD_ADDR_VAR 0 30
55783: PUSH
55784: LD_VAR 0 30
55788: PUSH
55789: LD_VAR 0 4
55793: PUSH
55794: LD_VAR 0 7
55798: ARRAY
55799: DIFF
55800: ST_TO_ADDR
// healers := healers diff group [ i ] ;
55801: LD_ADDR_VAR 0 31
55805: PUSH
55806: LD_VAR 0 31
55810: PUSH
55811: LD_VAR 0 4
55815: PUSH
55816: LD_VAR 0 7
55820: ARRAY
55821: DIFF
55822: ST_TO_ADDR
// end ; group := Delete ( group , i ) ;
55823: LD_ADDR_VAR 0 4
55827: PUSH
55828: LD_VAR 0 4
55832: PPUSH
55833: LD_VAR 0 7
55837: PPUSH
55838: CALL_OW 3
55842: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
55843: LD_ADDR_VAR 0 16
55847: PUSH
55848: LD_VAR 0 16
55852: PPUSH
55853: LD_VAR 0 7
55857: PPUSH
55858: CALL_OW 3
55862: ST_TO_ADDR
// continue ;
55863: GO 55703
// end ; if f_repair then
55865: LD_VAR 0 22
55869: IFFALSE 56358
// begin if GetType ( group [ i ] ) = unit_vehicle then
55871: LD_VAR 0 4
55875: PUSH
55876: LD_VAR 0 7
55880: ARRAY
55881: PPUSH
55882: CALL_OW 247
55886: PUSH
55887: LD_INT 2
55889: EQUAL
55890: IFFALSE 56080
// begin if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_repair then
55892: LD_VAR 0 4
55896: PUSH
55897: LD_VAR 0 7
55901: ARRAY
55902: PPUSH
55903: CALL_OW 256
55907: PUSH
55908: LD_INT 700
55910: LESS
55911: PUSH
55912: LD_VAR 0 4
55916: PUSH
55917: LD_VAR 0 7
55921: ARRAY
55922: PUSH
55923: LD_VAR 0 32
55927: IN
55928: NOT
55929: AND
55930: IFFALSE 55954
// to_repair := to_repair union group [ i ] ;
55932: LD_ADDR_VAR 0 32
55936: PUSH
55937: LD_VAR 0 32
55941: PUSH
55942: LD_VAR 0 4
55946: PUSH
55947: LD_VAR 0 7
55951: ARRAY
55952: UNION
55953: ST_TO_ADDR
// if GetLives ( group [ i ] ) = 1000 and group [ i ] in to_repair then
55954: LD_VAR 0 4
55958: PUSH
55959: LD_VAR 0 7
55963: ARRAY
55964: PPUSH
55965: CALL_OW 256
55969: PUSH
55970: LD_INT 1000
55972: EQUAL
55973: PUSH
55974: LD_VAR 0 4
55978: PUSH
55979: LD_VAR 0 7
55983: ARRAY
55984: PUSH
55985: LD_VAR 0 32
55989: IN
55990: AND
55991: IFFALSE 56015
// to_repair := to_repair diff group [ i ] ;
55993: LD_ADDR_VAR 0 32
55997: PUSH
55998: LD_VAR 0 32
56002: PUSH
56003: LD_VAR 0 4
56007: PUSH
56008: LD_VAR 0 7
56012: ARRAY
56013: DIFF
56014: ST_TO_ADDR
// if group [ i ] in to_repair then
56015: LD_VAR 0 4
56019: PUSH
56020: LD_VAR 0 7
56024: ARRAY
56025: PUSH
56026: LD_VAR 0 32
56030: IN
56031: IFFALSE 56078
// begin if not IsInArea ( group [ i ] , f_repair ) then
56033: LD_VAR 0 4
56037: PUSH
56038: LD_VAR 0 7
56042: ARRAY
56043: PPUSH
56044: LD_VAR 0 22
56048: PPUSH
56049: CALL_OW 308
56053: NOT
56054: IFFALSE 56076
// ComMoveToArea ( group [ i ] , f_repair ) ;
56056: LD_VAR 0 4
56060: PUSH
56061: LD_VAR 0 7
56065: ARRAY
56066: PPUSH
56067: LD_VAR 0 22
56071: PPUSH
56072: CALL_OW 113
// continue ;
56076: GO 55703
// end ; end else
56078: GO 56358
// if group [ i ] in repairs then
56080: LD_VAR 0 4
56084: PUSH
56085: LD_VAR 0 7
56089: ARRAY
56090: PUSH
56091: LD_VAR 0 33
56095: IN
56096: IFFALSE 56358
// begin if IsInUnit ( group [ i ] ) then
56098: LD_VAR 0 4
56102: PUSH
56103: LD_VAR 0 7
56107: ARRAY
56108: PPUSH
56109: CALL_OW 310
56113: IFFALSE 56181
// begin z := IsInUnit ( group [ i ] ) ;
56115: LD_ADDR_VAR 0 13
56119: PUSH
56120: LD_VAR 0 4
56124: PUSH
56125: LD_VAR 0 7
56129: ARRAY
56130: PPUSH
56131: CALL_OW 310
56135: ST_TO_ADDR
// if z in to_repair and IsInArea ( z , f_repair ) then
56136: LD_VAR 0 13
56140: PUSH
56141: LD_VAR 0 32
56145: IN
56146: PUSH
56147: LD_VAR 0 13
56151: PPUSH
56152: LD_VAR 0 22
56156: PPUSH
56157: CALL_OW 308
56161: AND
56162: IFFALSE 56179
// ComExitVehicle ( group [ i ] ) ;
56164: LD_VAR 0 4
56168: PUSH
56169: LD_VAR 0 7
56173: ARRAY
56174: PPUSH
56175: CALL_OW 121
// end else
56179: GO 56358
// begin z := UnitFilter ( group , [ [ f_inarea , f_repair ] , [ f_empty ] ] ) ;
56181: LD_ADDR_VAR 0 13
56185: PUSH
56186: LD_VAR 0 4
56190: PPUSH
56191: LD_INT 95
56193: PUSH
56194: LD_VAR 0 22
56198: PUSH
56199: EMPTY
56200: LIST
56201: LIST
56202: PUSH
56203: LD_INT 58
56205: PUSH
56206: EMPTY
56207: LIST
56208: PUSH
56209: EMPTY
56210: LIST
56211: LIST
56212: PPUSH
56213: CALL_OW 72
56217: ST_TO_ADDR
// if not HasTask ( group [ i ] ) then
56218: LD_VAR 0 4
56222: PUSH
56223: LD_VAR 0 7
56227: ARRAY
56228: PPUSH
56229: CALL_OW 314
56233: NOT
56234: IFFALSE 56356
// begin x := NearestUnitToUnit ( z , group [ i ] ) ;
56236: LD_ADDR_VAR 0 10
56240: PUSH
56241: LD_VAR 0 13
56245: PPUSH
56246: LD_VAR 0 4
56250: PUSH
56251: LD_VAR 0 7
56255: ARRAY
56256: PPUSH
56257: CALL_OW 74
56261: ST_TO_ADDR
// if not x then
56262: LD_VAR 0 10
56266: NOT
56267: IFFALSE 56271
// continue ;
56269: GO 55703
// if GetLives ( x ) < 1000 then
56271: LD_VAR 0 10
56275: PPUSH
56276: CALL_OW 256
56280: PUSH
56281: LD_INT 1000
56283: LESS
56284: IFFALSE 56308
// ComRepairVehicle ( group [ i ] , x ) else
56286: LD_VAR 0 4
56290: PUSH
56291: LD_VAR 0 7
56295: ARRAY
56296: PPUSH
56297: LD_VAR 0 10
56301: PPUSH
56302: CALL_OW 129
56306: GO 56356
// if not ( f_heal and GetLives ( group [ i ] ) < 1000 ) then
56308: LD_VAR 0 23
56312: PUSH
56313: LD_VAR 0 4
56317: PUSH
56318: LD_VAR 0 7
56322: ARRAY
56323: PPUSH
56324: CALL_OW 256
56328: PUSH
56329: LD_INT 1000
56331: LESS
56332: AND
56333: NOT
56334: IFFALSE 56356
// ComEnterUnit ( group [ i ] , x ) ;
56336: LD_VAR 0 4
56340: PUSH
56341: LD_VAR 0 7
56345: ARRAY
56346: PPUSH
56347: LD_VAR 0 10
56351: PPUSH
56352: CALL_OW 120
// end ; continue ;
56356: GO 55703
// end ; end ; end ; if f_heal and GetType ( group [ i ] ) = unit_human then
56358: LD_VAR 0 23
56362: PUSH
56363: LD_VAR 0 4
56367: PUSH
56368: LD_VAR 0 7
56372: ARRAY
56373: PPUSH
56374: CALL_OW 247
56378: PUSH
56379: LD_INT 1
56381: EQUAL
56382: AND
56383: IFFALSE 56861
// begin if group [ i ] in healers then
56385: LD_VAR 0 4
56389: PUSH
56390: LD_VAR 0 7
56394: ARRAY
56395: PUSH
56396: LD_VAR 0 31
56400: IN
56401: IFFALSE 56674
// begin if not IsInArea ( group [ i ] , f_heal ) and not HasTask ( group [ i ] ) then
56403: LD_VAR 0 4
56407: PUSH
56408: LD_VAR 0 7
56412: ARRAY
56413: PPUSH
56414: LD_VAR 0 23
56418: PPUSH
56419: CALL_OW 308
56423: NOT
56424: PUSH
56425: LD_VAR 0 4
56429: PUSH
56430: LD_VAR 0 7
56434: ARRAY
56435: PPUSH
56436: CALL_OW 314
56440: NOT
56441: AND
56442: IFFALSE 56466
// ComMoveToArea ( group [ i ] , f_heal ) else
56444: LD_VAR 0 4
56448: PUSH
56449: LD_VAR 0 7
56453: ARRAY
56454: PPUSH
56455: LD_VAR 0 23
56459: PPUSH
56460: CALL_OW 113
56464: GO 56672
// if GetLives ( HealTarget ( group [ i ] ) ) = 1000 then
56466: LD_VAR 0 4
56470: PUSH
56471: LD_VAR 0 7
56475: ARRAY
56476: PPUSH
56477: CALL 55084 0 1
56481: PPUSH
56482: CALL_OW 256
56486: PUSH
56487: LD_INT 1000
56489: EQUAL
56490: IFFALSE 56509
// ComStop ( group [ i ] ) else
56492: LD_VAR 0 4
56496: PUSH
56497: LD_VAR 0 7
56501: ARRAY
56502: PPUSH
56503: CALL_OW 141
56507: GO 56672
// if not HasTask ( group [ i ] ) and to_heal then
56509: LD_VAR 0 4
56513: PUSH
56514: LD_VAR 0 7
56518: ARRAY
56519: PPUSH
56520: CALL_OW 314
56524: NOT
56525: PUSH
56526: LD_VAR 0 30
56530: AND
56531: IFFALSE 56672
// begin z := NearestUnitToUnit ( UnitFilter ( to_heal , [ f_not , [ f_inside ] ] ) , group [ i ] ) ;
56533: LD_ADDR_VAR 0 13
56537: PUSH
56538: LD_VAR 0 30
56542: PPUSH
56543: LD_INT 3
56545: PUSH
56546: LD_INT 54
56548: PUSH
56549: EMPTY
56550: LIST
56551: PUSH
56552: EMPTY
56553: LIST
56554: LIST
56555: PPUSH
56556: CALL_OW 72
56560: PPUSH
56561: LD_VAR 0 4
56565: PUSH
56566: LD_VAR 0 7
56570: ARRAY
56571: PPUSH
56572: CALL_OW 74
56576: ST_TO_ADDR
// if z then
56577: LD_VAR 0 13
56581: IFFALSE 56672
// if FilterAllUnits ( [ [ f_dist , z , 10 ] , [ f_enemy , GetSide ( z ) ] ] ) = 0 then
56583: LD_INT 91
56585: PUSH
56586: LD_VAR 0 13
56590: PUSH
56591: LD_INT 10
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: LIST
56598: PUSH
56599: LD_INT 81
56601: PUSH
56602: LD_VAR 0 13
56606: PPUSH
56607: CALL_OW 255
56611: PUSH
56612: EMPTY
56613: LIST
56614: LIST
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PPUSH
56620: CALL_OW 69
56624: PUSH
56625: LD_INT 0
56627: EQUAL
56628: IFFALSE 56652
// ComHeal ( group [ i ] , z ) else
56630: LD_VAR 0 4
56634: PUSH
56635: LD_VAR 0 7
56639: ARRAY
56640: PPUSH
56641: LD_VAR 0 13
56645: PPUSH
56646: CALL_OW 128
56650: GO 56672
// ComMoveToArea ( group [ i ] , f_heal ) ;
56652: LD_VAR 0 4
56656: PUSH
56657: LD_VAR 0 7
56661: ARRAY
56662: PPUSH
56663: LD_VAR 0 23
56667: PPUSH
56668: CALL_OW 113
// end ; continue ;
56672: GO 55703
// end ; if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_heal then
56674: LD_VAR 0 4
56678: PUSH
56679: LD_VAR 0 7
56683: ARRAY
56684: PPUSH
56685: CALL_OW 256
56689: PUSH
56690: LD_INT 700
56692: LESS
56693: PUSH
56694: LD_VAR 0 4
56698: PUSH
56699: LD_VAR 0 7
56703: ARRAY
56704: PUSH
56705: LD_VAR 0 30
56709: IN
56710: NOT
56711: AND
56712: IFFALSE 56736
// to_heal := to_heal union group [ i ] ;
56714: LD_ADDR_VAR 0 30
56718: PUSH
56719: LD_VAR 0 30
56723: PUSH
56724: LD_VAR 0 4
56728: PUSH
56729: LD_VAR 0 7
56733: ARRAY
56734: UNION
56735: ST_TO_ADDR
// if group [ i ] in to_heal then
56736: LD_VAR 0 4
56740: PUSH
56741: LD_VAR 0 7
56745: ARRAY
56746: PUSH
56747: LD_VAR 0 30
56751: IN
56752: IFFALSE 56861
// begin if GetLives ( group [ i ] ) = 1000 then
56754: LD_VAR 0 4
56758: PUSH
56759: LD_VAR 0 7
56763: ARRAY
56764: PPUSH
56765: CALL_OW 256
56769: PUSH
56770: LD_INT 1000
56772: EQUAL
56773: IFFALSE 56799
// to_heal := to_heal diff group [ i ] else
56775: LD_ADDR_VAR 0 30
56779: PUSH
56780: LD_VAR 0 30
56784: PUSH
56785: LD_VAR 0 4
56789: PUSH
56790: LD_VAR 0 7
56794: ARRAY
56795: DIFF
56796: ST_TO_ADDR
56797: GO 56861
// begin if not IsInArea ( group [ i ] , to_heal ) then
56799: LD_VAR 0 4
56803: PUSH
56804: LD_VAR 0 7
56808: ARRAY
56809: PPUSH
56810: LD_VAR 0 30
56814: PPUSH
56815: CALL_OW 308
56819: NOT
56820: IFFALSE 56844
// ComMoveToArea ( group [ i ] , f_heal ) else
56822: LD_VAR 0 4
56826: PUSH
56827: LD_VAR 0 7
56831: ARRAY
56832: PPUSH
56833: LD_VAR 0 23
56837: PPUSH
56838: CALL_OW 113
56842: GO 56859
// ComHold ( group [ i ] ) ;
56844: LD_VAR 0 4
56848: PUSH
56849: LD_VAR 0 7
56853: ARRAY
56854: PPUSH
56855: CALL_OW 140
// continue ;
56859: GO 55703
// end ; end ; end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
56861: LD_VAR 0 4
56865: PUSH
56866: LD_VAR 0 7
56870: ARRAY
56871: PPUSH
56872: LD_INT 10
56874: PPUSH
56875: CALL 53504 0 2
56879: NOT
56880: PUSH
56881: LD_VAR 0 16
56885: PUSH
56886: LD_VAR 0 7
56890: ARRAY
56891: PUSH
56892: EMPTY
56893: EQUAL
56894: NOT
56895: AND
56896: IFFALSE 57162
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
56898: LD_VAR 0 4
56902: PUSH
56903: LD_VAR 0 7
56907: ARRAY
56908: PPUSH
56909: CALL_OW 262
56913: PUSH
56914: LD_INT 1
56916: PUSH
56917: LD_INT 2
56919: PUSH
56920: EMPTY
56921: LIST
56922: LIST
56923: IN
56924: IFFALSE 56965
// if GetFuel ( group [ i ] ) < 10 then
56926: LD_VAR 0 4
56930: PUSH
56931: LD_VAR 0 7
56935: ARRAY
56936: PPUSH
56937: CALL_OW 261
56941: PUSH
56942: LD_INT 10
56944: LESS
56945: IFFALSE 56965
// SetFuel ( group [ i ] , 12 ) ;
56947: LD_VAR 0 4
56951: PUSH
56952: LD_VAR 0 7
56956: ARRAY
56957: PPUSH
56958: LD_INT 12
56960: PPUSH
56961: CALL_OW 240
// if units_path [ i ] then
56965: LD_VAR 0 16
56969: PUSH
56970: LD_VAR 0 7
56974: ARRAY
56975: IFFALSE 57160
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
56977: LD_VAR 0 4
56981: PUSH
56982: LD_VAR 0 7
56986: ARRAY
56987: PPUSH
56988: LD_VAR 0 16
56992: PUSH
56993: LD_VAR 0 7
56997: ARRAY
56998: PUSH
56999: LD_INT 1
57001: ARRAY
57002: PUSH
57003: LD_INT 1
57005: ARRAY
57006: PPUSH
57007: LD_VAR 0 16
57011: PUSH
57012: LD_VAR 0 7
57016: ARRAY
57017: PUSH
57018: LD_INT 1
57020: ARRAY
57021: PUSH
57022: LD_INT 2
57024: ARRAY
57025: PPUSH
57026: CALL_OW 297
57030: PUSH
57031: LD_INT 6
57033: GREATER
57034: IFFALSE 57109
// begin if not HasTask ( group [ i ] ) then
57036: LD_VAR 0 4
57040: PUSH
57041: LD_VAR 0 7
57045: ARRAY
57046: PPUSH
57047: CALL_OW 314
57051: NOT
57052: IFFALSE 57107
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
57054: LD_VAR 0 4
57058: PUSH
57059: LD_VAR 0 7
57063: ARRAY
57064: PPUSH
57065: LD_VAR 0 16
57069: PUSH
57070: LD_VAR 0 7
57074: ARRAY
57075: PUSH
57076: LD_INT 1
57078: ARRAY
57079: PUSH
57080: LD_INT 1
57082: ARRAY
57083: PPUSH
57084: LD_VAR 0 16
57088: PUSH
57089: LD_VAR 0 7
57093: ARRAY
57094: PUSH
57095: LD_INT 1
57097: ARRAY
57098: PUSH
57099: LD_INT 2
57101: ARRAY
57102: PPUSH
57103: CALL_OW 114
// end else
57107: GO 57160
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
57109: LD_ADDR_VAR 0 15
57113: PUSH
57114: LD_VAR 0 16
57118: PUSH
57119: LD_VAR 0 7
57123: ARRAY
57124: PPUSH
57125: LD_INT 1
57127: PPUSH
57128: CALL_OW 3
57132: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
57133: LD_ADDR_VAR 0 16
57137: PUSH
57138: LD_VAR 0 16
57142: PPUSH
57143: LD_VAR 0 7
57147: PPUSH
57148: LD_VAR 0 15
57152: PPUSH
57153: CALL_OW 1
57157: ST_TO_ADDR
// continue ;
57158: GO 55703
// end ; end ; end else
57160: GO 59824
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
57162: LD_ADDR_VAR 0 14
57166: PUSH
57167: LD_INT 81
57169: PUSH
57170: LD_VAR 0 4
57174: PUSH
57175: LD_VAR 0 7
57179: ARRAY
57180: PPUSH
57181: CALL_OW 255
57185: PUSH
57186: EMPTY
57187: LIST
57188: LIST
57189: PPUSH
57190: CALL_OW 69
57194: ST_TO_ADDR
// if not tmp then
57195: LD_VAR 0 14
57199: NOT
57200: IFFALSE 57204
// continue ;
57202: GO 55703
// if f_ignore_area then
57204: LD_VAR 0 17
57208: IFFALSE 57296
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
57210: LD_ADDR_VAR 0 15
57214: PUSH
57215: LD_VAR 0 14
57219: PPUSH
57220: LD_INT 3
57222: PUSH
57223: LD_INT 92
57225: PUSH
57226: LD_VAR 0 17
57230: PUSH
57231: LD_INT 1
57233: ARRAY
57234: PUSH
57235: LD_VAR 0 17
57239: PUSH
57240: LD_INT 2
57242: ARRAY
57243: PUSH
57244: LD_VAR 0 17
57248: PUSH
57249: LD_INT 3
57251: ARRAY
57252: PUSH
57253: EMPTY
57254: LIST
57255: LIST
57256: LIST
57257: LIST
57258: PUSH
57259: EMPTY
57260: LIST
57261: LIST
57262: PPUSH
57263: CALL_OW 72
57267: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
57268: LD_VAR 0 14
57272: PUSH
57273: LD_VAR 0 15
57277: DIFF
57278: IFFALSE 57296
// tmp := tmp diff tmp2 ;
57280: LD_ADDR_VAR 0 14
57284: PUSH
57285: LD_VAR 0 14
57289: PUSH
57290: LD_VAR 0 15
57294: DIFF
57295: ST_TO_ADDR
// end ; if not f_murder then
57296: LD_VAR 0 20
57300: NOT
57301: IFFALSE 57359
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
57303: LD_ADDR_VAR 0 15
57307: PUSH
57308: LD_VAR 0 14
57312: PPUSH
57313: LD_INT 3
57315: PUSH
57316: LD_INT 50
57318: PUSH
57319: EMPTY
57320: LIST
57321: PUSH
57322: EMPTY
57323: LIST
57324: LIST
57325: PPUSH
57326: CALL_OW 72
57330: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
57331: LD_VAR 0 14
57335: PUSH
57336: LD_VAR 0 15
57340: DIFF
57341: IFFALSE 57359
// tmp := tmp diff tmp2 ;
57343: LD_ADDR_VAR 0 14
57347: PUSH
57348: LD_VAR 0 14
57352: PUSH
57353: LD_VAR 0 15
57357: DIFF
57358: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
57359: LD_ADDR_VAR 0 14
57363: PUSH
57364: LD_VAR 0 4
57368: PUSH
57369: LD_VAR 0 7
57373: ARRAY
57374: PPUSH
57375: LD_VAR 0 14
57379: PPUSH
57380: LD_INT 1
57382: PPUSH
57383: LD_INT 1
57385: PPUSH
57386: CALL 27147 0 4
57390: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
57391: LD_VAR 0 4
57395: PUSH
57396: LD_VAR 0 7
57400: ARRAY
57401: PPUSH
57402: CALL_OW 257
57406: PUSH
57407: LD_INT 1
57409: EQUAL
57410: IFFALSE 57858
// begin if WantPlant ( group [ i ] ) then
57412: LD_VAR 0 4
57416: PUSH
57417: LD_VAR 0 7
57421: ARRAY
57422: PPUSH
57423: CALL 26648 0 1
57427: IFFALSE 57431
// continue ;
57429: GO 55703
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
57431: LD_VAR 0 18
57435: PUSH
57436: LD_VAR 0 4
57440: PUSH
57441: LD_VAR 0 7
57445: ARRAY
57446: PPUSH
57447: CALL_OW 310
57451: NOT
57452: AND
57453: PUSH
57454: LD_VAR 0 14
57458: PUSH
57459: LD_INT 1
57461: ARRAY
57462: PUSH
57463: LD_VAR 0 14
57467: PPUSH
57468: LD_INT 21
57470: PUSH
57471: LD_INT 2
57473: PUSH
57474: EMPTY
57475: LIST
57476: LIST
57477: PUSH
57478: LD_INT 58
57480: PUSH
57481: EMPTY
57482: LIST
57483: PUSH
57484: EMPTY
57485: LIST
57486: LIST
57487: PPUSH
57488: CALL_OW 72
57492: IN
57493: AND
57494: IFFALSE 57530
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
57496: LD_VAR 0 4
57500: PUSH
57501: LD_VAR 0 7
57505: ARRAY
57506: PPUSH
57507: LD_VAR 0 14
57511: PUSH
57512: LD_INT 1
57514: ARRAY
57515: PPUSH
57516: CALL_OW 120
// attacking := true ;
57520: LD_ADDR_VAR 0 29
57524: PUSH
57525: LD_INT 1
57527: ST_TO_ADDR
// continue ;
57528: GO 55703
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
57530: LD_VAR 0 26
57534: PUSH
57535: LD_VAR 0 4
57539: PUSH
57540: LD_VAR 0 7
57544: ARRAY
57545: PPUSH
57546: CALL_OW 257
57550: PUSH
57551: LD_INT 1
57553: EQUAL
57554: AND
57555: PUSH
57556: LD_VAR 0 4
57560: PUSH
57561: LD_VAR 0 7
57565: ARRAY
57566: PPUSH
57567: CALL_OW 256
57571: PUSH
57572: LD_INT 800
57574: LESS
57575: AND
57576: PUSH
57577: LD_VAR 0 4
57581: PUSH
57582: LD_VAR 0 7
57586: ARRAY
57587: PPUSH
57588: CALL_OW 318
57592: NOT
57593: AND
57594: IFFALSE 57611
// ComCrawl ( group [ i ] ) ;
57596: LD_VAR 0 4
57600: PUSH
57601: LD_VAR 0 7
57605: ARRAY
57606: PPUSH
57607: CALL_OW 137
// if f_mines then
57611: LD_VAR 0 21
57615: IFFALSE 57858
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
57617: LD_VAR 0 14
57621: PUSH
57622: LD_INT 1
57624: ARRAY
57625: PPUSH
57626: CALL_OW 247
57630: PUSH
57631: LD_INT 3
57633: EQUAL
57634: PUSH
57635: LD_VAR 0 14
57639: PUSH
57640: LD_INT 1
57642: ARRAY
57643: PUSH
57644: LD_VAR 0 27
57648: IN
57649: NOT
57650: AND
57651: IFFALSE 57858
// begin x := GetX ( tmp [ 1 ] ) ;
57653: LD_ADDR_VAR 0 10
57657: PUSH
57658: LD_VAR 0 14
57662: PUSH
57663: LD_INT 1
57665: ARRAY
57666: PPUSH
57667: CALL_OW 250
57671: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
57672: LD_ADDR_VAR 0 11
57676: PUSH
57677: LD_VAR 0 14
57681: PUSH
57682: LD_INT 1
57684: ARRAY
57685: PPUSH
57686: CALL_OW 251
57690: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
57691: LD_ADDR_VAR 0 12
57695: PUSH
57696: LD_VAR 0 4
57700: PUSH
57701: LD_VAR 0 7
57705: ARRAY
57706: PPUSH
57707: CALL 53589 0 1
57711: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
57712: LD_VAR 0 4
57716: PUSH
57717: LD_VAR 0 7
57721: ARRAY
57722: PPUSH
57723: LD_VAR 0 10
57727: PPUSH
57728: LD_VAR 0 11
57732: PPUSH
57733: LD_VAR 0 14
57737: PUSH
57738: LD_INT 1
57740: ARRAY
57741: PPUSH
57742: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
57746: LD_VAR 0 4
57750: PUSH
57751: LD_VAR 0 7
57755: ARRAY
57756: PPUSH
57757: LD_VAR 0 10
57761: PPUSH
57762: LD_VAR 0 12
57766: PPUSH
57767: LD_INT 7
57769: PPUSH
57770: CALL_OW 272
57774: PPUSH
57775: LD_VAR 0 11
57779: PPUSH
57780: LD_VAR 0 12
57784: PPUSH
57785: LD_INT 7
57787: PPUSH
57788: CALL_OW 273
57792: PPUSH
57793: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
57797: LD_VAR 0 4
57801: PUSH
57802: LD_VAR 0 7
57806: ARRAY
57807: PPUSH
57808: LD_INT 71
57810: PPUSH
57811: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
57815: LD_ADDR_VAR 0 27
57819: PUSH
57820: LD_VAR 0 27
57824: PPUSH
57825: LD_VAR 0 27
57829: PUSH
57830: LD_INT 1
57832: PLUS
57833: PPUSH
57834: LD_VAR 0 14
57838: PUSH
57839: LD_INT 1
57841: ARRAY
57842: PPUSH
57843: CALL_OW 1
57847: ST_TO_ADDR
// attacking := true ;
57848: LD_ADDR_VAR 0 29
57852: PUSH
57853: LD_INT 1
57855: ST_TO_ADDR
// continue ;
57856: GO 55703
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
57858: LD_VAR 0 4
57862: PUSH
57863: LD_VAR 0 7
57867: ARRAY
57868: PPUSH
57869: CALL_OW 257
57873: PUSH
57874: LD_INT 17
57876: EQUAL
57877: PUSH
57878: LD_VAR 0 4
57882: PUSH
57883: LD_VAR 0 7
57887: ARRAY
57888: PPUSH
57889: CALL_OW 110
57893: PUSH
57894: LD_INT 71
57896: EQUAL
57897: NOT
57898: AND
57899: IFFALSE 58045
// begin attacking := false ;
57901: LD_ADDR_VAR 0 29
57905: PUSH
57906: LD_INT 0
57908: ST_TO_ADDR
// k := 5 ;
57909: LD_ADDR_VAR 0 9
57913: PUSH
57914: LD_INT 5
57916: ST_TO_ADDR
// if tmp < k then
57917: LD_VAR 0 14
57921: PUSH
57922: LD_VAR 0 9
57926: LESS
57927: IFFALSE 57939
// k := tmp ;
57929: LD_ADDR_VAR 0 9
57933: PUSH
57934: LD_VAR 0 14
57938: ST_TO_ADDR
// for j = 1 to k do
57939: LD_ADDR_VAR 0 8
57943: PUSH
57944: DOUBLE
57945: LD_INT 1
57947: DEC
57948: ST_TO_ADDR
57949: LD_VAR 0 9
57953: PUSH
57954: FOR_TO
57955: IFFALSE 58043
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
57957: LD_VAR 0 14
57961: PUSH
57962: LD_VAR 0 8
57966: ARRAY
57967: PUSH
57968: LD_VAR 0 14
57972: PPUSH
57973: LD_INT 58
57975: PUSH
57976: EMPTY
57977: LIST
57978: PPUSH
57979: CALL_OW 72
57983: IN
57984: NOT
57985: IFFALSE 58041
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
57987: LD_VAR 0 4
57991: PUSH
57992: LD_VAR 0 7
57996: ARRAY
57997: PPUSH
57998: LD_VAR 0 14
58002: PUSH
58003: LD_VAR 0 8
58007: ARRAY
58008: PPUSH
58009: CALL_OW 115
// attacking := true ;
58013: LD_ADDR_VAR 0 29
58017: PUSH
58018: LD_INT 1
58020: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
58021: LD_VAR 0 4
58025: PUSH
58026: LD_VAR 0 7
58030: ARRAY
58031: PPUSH
58032: LD_INT 71
58034: PPUSH
58035: CALL_OW 109
// continue ;
58039: GO 57954
// end ; end ;
58041: GO 57954
58043: POP
58044: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
58045: LD_VAR 0 4
58049: PUSH
58050: LD_VAR 0 7
58054: ARRAY
58055: PPUSH
58056: CALL_OW 257
58060: PUSH
58061: LD_INT 8
58063: EQUAL
58064: PUSH
58065: LD_VAR 0 4
58069: PUSH
58070: LD_VAR 0 7
58074: ARRAY
58075: PPUSH
58076: CALL_OW 264
58080: PUSH
58081: LD_INT 28
58083: PUSH
58084: LD_INT 45
58086: PUSH
58087: LD_INT 7
58089: PUSH
58090: LD_INT 47
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: LIST
58097: LIST
58098: IN
58099: OR
58100: IFFALSE 58356
// begin attacking := false ;
58102: LD_ADDR_VAR 0 29
58106: PUSH
58107: LD_INT 0
58109: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
58110: LD_VAR 0 14
58114: PUSH
58115: LD_INT 1
58117: ARRAY
58118: PPUSH
58119: CALL_OW 266
58123: PUSH
58124: LD_INT 32
58126: PUSH
58127: LD_INT 31
58129: PUSH
58130: LD_INT 33
58132: PUSH
58133: LD_INT 4
58135: PUSH
58136: LD_INT 5
58138: PUSH
58139: EMPTY
58140: LIST
58141: LIST
58142: LIST
58143: LIST
58144: LIST
58145: IN
58146: IFFALSE 58332
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
58148: LD_ADDR_VAR 0 9
58152: PUSH
58153: LD_VAR 0 14
58157: PUSH
58158: LD_INT 1
58160: ARRAY
58161: PPUSH
58162: CALL_OW 266
58166: PPUSH
58167: LD_VAR 0 14
58171: PUSH
58172: LD_INT 1
58174: ARRAY
58175: PPUSH
58176: CALL_OW 250
58180: PPUSH
58181: LD_VAR 0 14
58185: PUSH
58186: LD_INT 1
58188: ARRAY
58189: PPUSH
58190: CALL_OW 251
58194: PPUSH
58195: LD_VAR 0 14
58199: PUSH
58200: LD_INT 1
58202: ARRAY
58203: PPUSH
58204: CALL_OW 254
58208: PPUSH
58209: LD_VAR 0 14
58213: PUSH
58214: LD_INT 1
58216: ARRAY
58217: PPUSH
58218: CALL_OW 248
58222: PPUSH
58223: LD_INT 0
58225: PPUSH
58226: CALL 34959 0 6
58230: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
58231: LD_ADDR_VAR 0 8
58235: PUSH
58236: LD_VAR 0 4
58240: PUSH
58241: LD_VAR 0 7
58245: ARRAY
58246: PPUSH
58247: LD_VAR 0 9
58251: PPUSH
58252: CALL 53629 0 2
58256: ST_TO_ADDR
// if j then
58257: LD_VAR 0 8
58261: IFFALSE 58330
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
58263: LD_VAR 0 8
58267: PUSH
58268: LD_INT 1
58270: ARRAY
58271: PPUSH
58272: LD_VAR 0 8
58276: PUSH
58277: LD_INT 2
58279: ARRAY
58280: PPUSH
58281: CALL_OW 488
58285: IFFALSE 58330
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
58287: LD_VAR 0 4
58291: PUSH
58292: LD_VAR 0 7
58296: ARRAY
58297: PPUSH
58298: LD_VAR 0 8
58302: PUSH
58303: LD_INT 1
58305: ARRAY
58306: PPUSH
58307: LD_VAR 0 8
58311: PUSH
58312: LD_INT 2
58314: ARRAY
58315: PPUSH
58316: CALL_OW 116
// attacking := true ;
58320: LD_ADDR_VAR 0 29
58324: PUSH
58325: LD_INT 1
58327: ST_TO_ADDR
// continue ;
58328: GO 55703
// end ; end else
58330: GO 58356
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
58332: LD_VAR 0 4
58336: PUSH
58337: LD_VAR 0 7
58341: ARRAY
58342: PPUSH
58343: LD_VAR 0 14
58347: PUSH
58348: LD_INT 1
58350: ARRAY
58351: PPUSH
58352: CALL_OW 115
// end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
58356: LD_VAR 0 4
58360: PUSH
58361: LD_VAR 0 7
58365: ARRAY
58366: PPUSH
58367: CALL_OW 265
58371: PUSH
58372: LD_INT 11
58374: EQUAL
58375: IFFALSE 58653
// begin k := 10 ;
58377: LD_ADDR_VAR 0 9
58381: PUSH
58382: LD_INT 10
58384: ST_TO_ADDR
// x := 0 ;
58385: LD_ADDR_VAR 0 10
58389: PUSH
58390: LD_INT 0
58392: ST_TO_ADDR
// if tmp < k then
58393: LD_VAR 0 14
58397: PUSH
58398: LD_VAR 0 9
58402: LESS
58403: IFFALSE 58415
// k := tmp ;
58405: LD_ADDR_VAR 0 9
58409: PUSH
58410: LD_VAR 0 14
58414: ST_TO_ADDR
// for j = k downto 1 do
58415: LD_ADDR_VAR 0 8
58419: PUSH
58420: DOUBLE
58421: LD_VAR 0 9
58425: INC
58426: ST_TO_ADDR
58427: LD_INT 1
58429: PUSH
58430: FOR_DOWNTO
58431: IFFALSE 58506
// begin if GetType ( tmp [ j ] ) = unit_human then
58433: LD_VAR 0 14
58437: PUSH
58438: LD_VAR 0 8
58442: ARRAY
58443: PPUSH
58444: CALL_OW 247
58448: PUSH
58449: LD_INT 1
58451: EQUAL
58452: IFFALSE 58504
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
58454: LD_VAR 0 4
58458: PUSH
58459: LD_VAR 0 7
58463: ARRAY
58464: PPUSH
58465: LD_VAR 0 14
58469: PUSH
58470: LD_VAR 0 8
58474: ARRAY
58475: PPUSH
58476: CALL 53900 0 2
// x := tmp [ j ] ;
58480: LD_ADDR_VAR 0 10
58484: PUSH
58485: LD_VAR 0 14
58489: PUSH
58490: LD_VAR 0 8
58494: ARRAY
58495: ST_TO_ADDR
// attacking := true ;
58496: LD_ADDR_VAR 0 29
58500: PUSH
58501: LD_INT 1
58503: ST_TO_ADDR
// end ; end ;
58504: GO 58430
58506: POP
58507: POP
// if not x then
58508: LD_VAR 0 10
58512: NOT
58513: IFFALSE 58653
// begin attacking := true ;
58515: LD_ADDR_VAR 0 29
58519: PUSH
58520: LD_INT 1
58522: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
58523: LD_VAR 0 4
58527: PUSH
58528: LD_VAR 0 7
58532: ARRAY
58533: PPUSH
58534: CALL_OW 250
58538: PPUSH
58539: LD_VAR 0 4
58543: PUSH
58544: LD_VAR 0 7
58548: ARRAY
58549: PPUSH
58550: CALL_OW 251
58554: PPUSH
58555: CALL_OW 546
58559: PUSH
58560: LD_INT 2
58562: ARRAY
58563: PUSH
58564: LD_VAR 0 14
58568: PUSH
58569: LD_INT 1
58571: ARRAY
58572: PPUSH
58573: CALL_OW 250
58577: PPUSH
58578: LD_VAR 0 14
58582: PUSH
58583: LD_INT 1
58585: ARRAY
58586: PPUSH
58587: CALL_OW 251
58591: PPUSH
58592: CALL_OW 546
58596: PUSH
58597: LD_INT 2
58599: ARRAY
58600: EQUAL
58601: IFFALSE 58629
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
58603: LD_VAR 0 4
58607: PUSH
58608: LD_VAR 0 7
58612: ARRAY
58613: PPUSH
58614: LD_VAR 0 14
58618: PUSH
58619: LD_INT 1
58621: ARRAY
58622: PPUSH
58623: CALL 53900 0 2
58627: GO 58653
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
58629: LD_VAR 0 4
58633: PUSH
58634: LD_VAR 0 7
58638: ARRAY
58639: PPUSH
58640: LD_VAR 0 14
58644: PUSH
58645: LD_INT 1
58647: ARRAY
58648: PPUSH
58649: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
58653: LD_VAR 0 4
58657: PUSH
58658: LD_VAR 0 7
58662: ARRAY
58663: PPUSH
58664: CALL_OW 264
58668: PUSH
58669: LD_INT 29
58671: EQUAL
58672: IFFALSE 59038
// begin if WantsToAttack ( group [ i ] ) in bombed then
58674: LD_VAR 0 4
58678: PUSH
58679: LD_VAR 0 7
58683: ARRAY
58684: PPUSH
58685: CALL_OW 319
58689: PUSH
58690: LD_VAR 0 28
58694: IN
58695: IFFALSE 58699
// continue ;
58697: GO 55703
// k := 8 ;
58699: LD_ADDR_VAR 0 9
58703: PUSH
58704: LD_INT 8
58706: ST_TO_ADDR
// x := 0 ;
58707: LD_ADDR_VAR 0 10
58711: PUSH
58712: LD_INT 0
58714: ST_TO_ADDR
// if tmp < k then
58715: LD_VAR 0 14
58719: PUSH
58720: LD_VAR 0 9
58724: LESS
58725: IFFALSE 58737
// k := tmp ;
58727: LD_ADDR_VAR 0 9
58731: PUSH
58732: LD_VAR 0 14
58736: ST_TO_ADDR
// for j = 1 to k do
58737: LD_ADDR_VAR 0 8
58741: PUSH
58742: DOUBLE
58743: LD_INT 1
58745: DEC
58746: ST_TO_ADDR
58747: LD_VAR 0 9
58751: PUSH
58752: FOR_TO
58753: IFFALSE 58885
// begin if GetType ( tmp [ j ] ) = unit_building then
58755: LD_VAR 0 14
58759: PUSH
58760: LD_VAR 0 8
58764: ARRAY
58765: PPUSH
58766: CALL_OW 247
58770: PUSH
58771: LD_INT 3
58773: EQUAL
58774: IFFALSE 58883
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
58776: LD_VAR 0 14
58780: PUSH
58781: LD_VAR 0 8
58785: ARRAY
58786: PUSH
58787: LD_VAR 0 28
58791: IN
58792: NOT
58793: PUSH
58794: LD_VAR 0 14
58798: PUSH
58799: LD_VAR 0 8
58803: ARRAY
58804: PPUSH
58805: CALL_OW 313
58809: AND
58810: IFFALSE 58883
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
58812: LD_VAR 0 4
58816: PUSH
58817: LD_VAR 0 7
58821: ARRAY
58822: PPUSH
58823: LD_VAR 0 14
58827: PUSH
58828: LD_VAR 0 8
58832: ARRAY
58833: PPUSH
58834: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
58838: LD_ADDR_VAR 0 28
58842: PUSH
58843: LD_VAR 0 28
58847: PPUSH
58848: LD_VAR 0 28
58852: PUSH
58853: LD_INT 1
58855: PLUS
58856: PPUSH
58857: LD_VAR 0 14
58861: PUSH
58862: LD_VAR 0 8
58866: ARRAY
58867: PPUSH
58868: CALL_OW 1
58872: ST_TO_ADDR
// attacking := true ;
58873: LD_ADDR_VAR 0 29
58877: PUSH
58878: LD_INT 1
58880: ST_TO_ADDR
// break ;
58881: GO 58885
// end ; end ;
58883: GO 58752
58885: POP
58886: POP
// if not attacking and f_attack_depot then
58887: LD_VAR 0 29
58891: NOT
58892: PUSH
58893: LD_VAR 0 25
58897: AND
58898: IFFALSE 58993
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
58900: LD_ADDR_VAR 0 13
58904: PUSH
58905: LD_VAR 0 14
58909: PPUSH
58910: LD_INT 2
58912: PUSH
58913: LD_INT 30
58915: PUSH
58916: LD_INT 0
58918: PUSH
58919: EMPTY
58920: LIST
58921: LIST
58922: PUSH
58923: LD_INT 30
58925: PUSH
58926: LD_INT 1
58928: PUSH
58929: EMPTY
58930: LIST
58931: LIST
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: LIST
58937: PPUSH
58938: CALL_OW 72
58942: ST_TO_ADDR
// if z then
58943: LD_VAR 0 13
58947: IFFALSE 58993
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
58949: LD_VAR 0 4
58953: PUSH
58954: LD_VAR 0 7
58958: ARRAY
58959: PPUSH
58960: LD_VAR 0 13
58964: PPUSH
58965: LD_VAR 0 4
58969: PUSH
58970: LD_VAR 0 7
58974: ARRAY
58975: PPUSH
58976: CALL_OW 74
58980: PPUSH
58981: CALL_OW 115
// attacking := true ;
58985: LD_ADDR_VAR 0 29
58989: PUSH
58990: LD_INT 1
58992: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
58993: LD_VAR 0 4
58997: PUSH
58998: LD_VAR 0 7
59002: ARRAY
59003: PPUSH
59004: CALL_OW 256
59008: PUSH
59009: LD_INT 500
59011: LESS
59012: IFFALSE 59038
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
59014: LD_VAR 0 4
59018: PUSH
59019: LD_VAR 0 7
59023: ARRAY
59024: PPUSH
59025: LD_VAR 0 14
59029: PUSH
59030: LD_INT 1
59032: ARRAY
59033: PPUSH
59034: CALL_OW 115
// end ; if GetWeapon ( group [ i ] ) = ru_time_lapser then
59038: LD_VAR 0 4
59042: PUSH
59043: LD_VAR 0 7
59047: ARRAY
59048: PPUSH
59049: CALL_OW 264
59053: PUSH
59054: LD_INT 49
59056: EQUAL
59057: IFFALSE 59178
// begin if not HasTask ( group [ i ] ) then
59059: LD_VAR 0 4
59063: PUSH
59064: LD_VAR 0 7
59068: ARRAY
59069: PPUSH
59070: CALL_OW 314
59074: NOT
59075: IFFALSE 59178
// begin k := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) , group [ i ] ) ;
59077: LD_ADDR_VAR 0 9
59081: PUSH
59082: LD_INT 81
59084: PUSH
59085: LD_VAR 0 4
59089: PUSH
59090: LD_VAR 0 7
59094: ARRAY
59095: PPUSH
59096: CALL_OW 255
59100: PUSH
59101: EMPTY
59102: LIST
59103: LIST
59104: PPUSH
59105: CALL_OW 69
59109: PPUSH
59110: LD_VAR 0 4
59114: PUSH
59115: LD_VAR 0 7
59119: ARRAY
59120: PPUSH
59121: CALL_OW 74
59125: ST_TO_ADDR
// if k then
59126: LD_VAR 0 9
59130: IFFALSE 59178
// if GetDistUnits ( group [ i ] , k ) > 10 then
59132: LD_VAR 0 4
59136: PUSH
59137: LD_VAR 0 7
59141: ARRAY
59142: PPUSH
59143: LD_VAR 0 9
59147: PPUSH
59148: CALL_OW 296
59152: PUSH
59153: LD_INT 10
59155: GREATER
59156: IFFALSE 59178
// ComMoveUnit ( group [ i ] , k ) ;
59158: LD_VAR 0 4
59162: PUSH
59163: LD_VAR 0 7
59167: ARRAY
59168: PPUSH
59169: LD_VAR 0 9
59173: PPUSH
59174: CALL_OW 112
// end ; end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
59178: LD_VAR 0 4
59182: PUSH
59183: LD_VAR 0 7
59187: ARRAY
59188: PPUSH
59189: CALL_OW 256
59193: PUSH
59194: LD_INT 250
59196: LESS
59197: PUSH
59198: LD_VAR 0 4
59202: PUSH
59203: LD_VAR 0 7
59207: ARRAY
59208: PUSH
59209: LD_INT 21
59211: PUSH
59212: LD_INT 2
59214: PUSH
59215: EMPTY
59216: LIST
59217: LIST
59218: PUSH
59219: LD_INT 23
59221: PUSH
59222: LD_INT 2
59224: PUSH
59225: EMPTY
59226: LIST
59227: LIST
59228: PUSH
59229: EMPTY
59230: LIST
59231: LIST
59232: PPUSH
59233: CALL_OW 69
59237: IN
59238: AND
59239: IFFALSE 59364
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
59241: LD_ADDR_VAR 0 9
59245: PUSH
59246: LD_OWVAR 3
59250: PUSH
59251: LD_VAR 0 4
59255: PUSH
59256: LD_VAR 0 7
59260: ARRAY
59261: DIFF
59262: PPUSH
59263: LD_VAR 0 4
59267: PUSH
59268: LD_VAR 0 7
59272: ARRAY
59273: PPUSH
59274: CALL_OW 74
59278: ST_TO_ADDR
// if not k then
59279: LD_VAR 0 9
59283: NOT
59284: IFFALSE 59288
// continue ;
59286: GO 55703
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
59288: LD_VAR 0 9
59292: PUSH
59293: LD_INT 81
59295: PUSH
59296: LD_VAR 0 4
59300: PUSH
59301: LD_VAR 0 7
59305: ARRAY
59306: PPUSH
59307: CALL_OW 255
59311: PUSH
59312: EMPTY
59313: LIST
59314: LIST
59315: PPUSH
59316: CALL_OW 69
59320: IN
59321: PUSH
59322: LD_VAR 0 9
59326: PPUSH
59327: LD_VAR 0 4
59331: PUSH
59332: LD_VAR 0 7
59336: ARRAY
59337: PPUSH
59338: CALL_OW 296
59342: PUSH
59343: LD_INT 5
59345: LESS
59346: AND
59347: IFFALSE 59364
// ComAutodestruct ( group [ i ] ) ;
59349: LD_VAR 0 4
59353: PUSH
59354: LD_VAR 0 7
59358: ARRAY
59359: PPUSH
59360: CALL 53798 0 1
// end ; if f_attack_depot then
59364: LD_VAR 0 25
59368: IFFALSE 59480
// begin k := 6 ;
59370: LD_ADDR_VAR 0 9
59374: PUSH
59375: LD_INT 6
59377: ST_TO_ADDR
// if tmp < k then
59378: LD_VAR 0 14
59382: PUSH
59383: LD_VAR 0 9
59387: LESS
59388: IFFALSE 59400
// k := tmp ;
59390: LD_ADDR_VAR 0 9
59394: PUSH
59395: LD_VAR 0 14
59399: ST_TO_ADDR
// for j = 1 to k do
59400: LD_ADDR_VAR 0 8
59404: PUSH
59405: DOUBLE
59406: LD_INT 1
59408: DEC
59409: ST_TO_ADDR
59410: LD_VAR 0 9
59414: PUSH
59415: FOR_TO
59416: IFFALSE 59478
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
59418: LD_VAR 0 8
59422: PPUSH
59423: CALL_OW 266
59427: PUSH
59428: LD_INT 0
59430: PUSH
59431: LD_INT 1
59433: PUSH
59434: EMPTY
59435: LIST
59436: LIST
59437: IN
59438: IFFALSE 59476
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
59440: LD_VAR 0 4
59444: PUSH
59445: LD_VAR 0 7
59449: ARRAY
59450: PPUSH
59451: LD_VAR 0 14
59455: PUSH
59456: LD_VAR 0 8
59460: ARRAY
59461: PPUSH
59462: CALL_OW 115
// attacking := true ;
59466: LD_ADDR_VAR 0 29
59470: PUSH
59471: LD_INT 1
59473: ST_TO_ADDR
// break ;
59474: GO 59478
// end ;
59476: GO 59415
59478: POP
59479: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
59480: LD_VAR 0 4
59484: PUSH
59485: LD_VAR 0 7
59489: ARRAY
59490: PPUSH
59491: CALL_OW 302
59495: PUSH
59496: LD_VAR 0 29
59500: NOT
59501: AND
59502: IFFALSE 59824
// begin if GetTag ( group [ i ] ) = 71 then
59504: LD_VAR 0 4
59508: PUSH
59509: LD_VAR 0 7
59513: ARRAY
59514: PPUSH
59515: CALL_OW 110
59519: PUSH
59520: LD_INT 71
59522: EQUAL
59523: IFFALSE 59564
// begin if HasTask ( group [ i ] ) then
59525: LD_VAR 0 4
59529: PUSH
59530: LD_VAR 0 7
59534: ARRAY
59535: PPUSH
59536: CALL_OW 314
59540: IFFALSE 59546
// continue else
59542: GO 55703
59544: GO 59564
// SetTag ( group [ i ] , 0 ) ;
59546: LD_VAR 0 4
59550: PUSH
59551: LD_VAR 0 7
59555: ARRAY
59556: PPUSH
59557: LD_INT 0
59559: PPUSH
59560: CALL_OW 109
// end ; k := 8 ;
59564: LD_ADDR_VAR 0 9
59568: PUSH
59569: LD_INT 8
59571: ST_TO_ADDR
// x := 0 ;
59572: LD_ADDR_VAR 0 10
59576: PUSH
59577: LD_INT 0
59579: ST_TO_ADDR
// if tmp < k then
59580: LD_VAR 0 14
59584: PUSH
59585: LD_VAR 0 9
59589: LESS
59590: IFFALSE 59602
// k := tmp ;
59592: LD_ADDR_VAR 0 9
59596: PUSH
59597: LD_VAR 0 14
59601: ST_TO_ADDR
// for j = 1 to k do
59602: LD_ADDR_VAR 0 8
59606: PUSH
59607: DOUBLE
59608: LD_INT 1
59610: DEC
59611: ST_TO_ADDR
59612: LD_VAR 0 9
59616: PUSH
59617: FOR_TO
59618: IFFALSE 59716
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
59620: LD_VAR 0 14
59624: PUSH
59625: LD_VAR 0 8
59629: ARRAY
59630: PPUSH
59631: CALL_OW 247
59635: PUSH
59636: LD_INT 1
59638: EQUAL
59639: PUSH
59640: LD_VAR 0 14
59644: PUSH
59645: LD_VAR 0 8
59649: ARRAY
59650: PPUSH
59651: CALL_OW 256
59655: PUSH
59656: LD_INT 250
59658: LESS
59659: PUSH
59660: LD_VAR 0 20
59664: AND
59665: PUSH
59666: LD_VAR 0 20
59670: NOT
59671: PUSH
59672: LD_VAR 0 14
59676: PUSH
59677: LD_VAR 0 8
59681: ARRAY
59682: PPUSH
59683: CALL_OW 256
59687: PUSH
59688: LD_INT 250
59690: GREATEREQUAL
59691: AND
59692: OR
59693: AND
59694: IFFALSE 59714
// begin x := tmp [ j ] ;
59696: LD_ADDR_VAR 0 10
59700: PUSH
59701: LD_VAR 0 14
59705: PUSH
59706: LD_VAR 0 8
59710: ARRAY
59711: ST_TO_ADDR
// break ;
59712: GO 59716
// end ;
59714: GO 59617
59716: POP
59717: POP
// if x then
59718: LD_VAR 0 10
59722: IFFALSE 59746
// ComAttackUnit ( group [ i ] , x ) else
59724: LD_VAR 0 4
59728: PUSH
59729: LD_VAR 0 7
59733: ARRAY
59734: PPUSH
59735: LD_VAR 0 10
59739: PPUSH
59740: CALL_OW 115
59744: GO 59770
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
59746: LD_VAR 0 4
59750: PUSH
59751: LD_VAR 0 7
59755: ARRAY
59756: PPUSH
59757: LD_VAR 0 14
59761: PUSH
59762: LD_INT 1
59764: ARRAY
59765: PPUSH
59766: CALL_OW 115
// if not HasTask ( group [ i ] ) then
59770: LD_VAR 0 4
59774: PUSH
59775: LD_VAR 0 7
59779: ARRAY
59780: PPUSH
59781: CALL_OW 314
59785: NOT
59786: IFFALSE 59824
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
59788: LD_VAR 0 4
59792: PUSH
59793: LD_VAR 0 7
59797: ARRAY
59798: PPUSH
59799: LD_VAR 0 14
59803: PPUSH
59804: LD_VAR 0 4
59808: PUSH
59809: LD_VAR 0 7
59813: ARRAY
59814: PPUSH
59815: CALL_OW 74
59819: PPUSH
59820: CALL_OW 115
// end ; end ; end ;
59824: GO 55703
59826: POP
59827: POP
// wait ( 0 0$2 ) ;
59828: LD_INT 70
59830: PPUSH
59831: CALL_OW 67
// until not group or group = [ ] or not FilterAllUnits ( [ f_enemy , side ] ) ;
59835: LD_VAR 0 4
59839: NOT
59840: PUSH
59841: LD_VAR 0 4
59845: PUSH
59846: EMPTY
59847: EQUAL
59848: OR
59849: PUSH
59850: LD_INT 81
59852: PUSH
59853: LD_VAR 0 35
59857: PUSH
59858: EMPTY
59859: LIST
59860: LIST
59861: PPUSH
59862: CALL_OW 69
59866: NOT
59867: OR
59868: IFFALSE 55688
// end ;
59870: LD_VAR 0 2
59874: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
59875: LD_INT 0
59877: PPUSH
59878: PPUSH
59879: PPUSH
59880: PPUSH
// if not base_units then
59881: LD_VAR 0 1
59885: NOT
59886: IFFALSE 59890
// exit ;
59888: GO 59977
// result := false ;
59890: LD_ADDR_VAR 0 2
59894: PUSH
59895: LD_INT 0
59897: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
59898: LD_ADDR_VAR 0 5
59902: PUSH
59903: LD_VAR 0 1
59907: PPUSH
59908: LD_INT 21
59910: PUSH
59911: LD_INT 3
59913: PUSH
59914: EMPTY
59915: LIST
59916: LIST
59917: PPUSH
59918: CALL_OW 72
59922: ST_TO_ADDR
// if not tmp then
59923: LD_VAR 0 5
59927: NOT
59928: IFFALSE 59932
// exit ;
59930: GO 59977
// for i in tmp do
59932: LD_ADDR_VAR 0 3
59936: PUSH
59937: LD_VAR 0 5
59941: PUSH
59942: FOR_IN
59943: IFFALSE 59975
// begin result := EnemyInRange ( i , 22 ) ;
59945: LD_ADDR_VAR 0 2
59949: PUSH
59950: LD_VAR 0 3
59954: PPUSH
59955: LD_INT 22
59957: PPUSH
59958: CALL 53504 0 2
59962: ST_TO_ADDR
// if result then
59963: LD_VAR 0 2
59967: IFFALSE 59973
// exit ;
59969: POP
59970: POP
59971: GO 59977
// end ;
59973: GO 59942
59975: POP
59976: POP
// end ;
59977: LD_VAR 0 2
59981: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
59982: LD_INT 0
59984: PPUSH
59985: PPUSH
// if not units then
59986: LD_VAR 0 1
59990: NOT
59991: IFFALSE 59995
// exit ;
59993: GO 60065
// result := [ ] ;
59995: LD_ADDR_VAR 0 3
59999: PUSH
60000: EMPTY
60001: ST_TO_ADDR
// for i in units do
60002: LD_ADDR_VAR 0 4
60006: PUSH
60007: LD_VAR 0 1
60011: PUSH
60012: FOR_IN
60013: IFFALSE 60063
// if GetTag ( i ) = tag then
60015: LD_VAR 0 4
60019: PPUSH
60020: CALL_OW 110
60024: PUSH
60025: LD_VAR 0 2
60029: EQUAL
60030: IFFALSE 60061
// result := Insert ( result , result + 1 , i ) ;
60032: LD_ADDR_VAR 0 3
60036: PUSH
60037: LD_VAR 0 3
60041: PPUSH
60042: LD_VAR 0 3
60046: PUSH
60047: LD_INT 1
60049: PLUS
60050: PPUSH
60051: LD_VAR 0 4
60055: PPUSH
60056: CALL_OW 2
60060: ST_TO_ADDR
60061: GO 60012
60063: POP
60064: POP
// end ;
60065: LD_VAR 0 3
60069: RET
// export function IsDriver ( un ) ; begin
60070: LD_INT 0
60072: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
60073: LD_ADDR_VAR 0 2
60077: PUSH
60078: LD_VAR 0 1
60082: PUSH
60083: LD_INT 55
60085: PUSH
60086: EMPTY
60087: LIST
60088: PPUSH
60089: CALL_OW 69
60093: IN
60094: ST_TO_ADDR
// end ;
60095: LD_VAR 0 2
60099: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
60100: LD_INT 0
60102: PPUSH
60103: PPUSH
// list := [ ] ;
60104: LD_ADDR_VAR 0 5
60108: PUSH
60109: EMPTY
60110: ST_TO_ADDR
// case d of 0 :
60111: LD_VAR 0 3
60115: PUSH
60116: LD_INT 0
60118: DOUBLE
60119: EQUAL
60120: IFTRUE 60124
60122: GO 60257
60124: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
60125: LD_ADDR_VAR 0 5
60129: PUSH
60130: LD_VAR 0 1
60134: PUSH
60135: LD_INT 4
60137: MINUS
60138: PUSH
60139: LD_VAR 0 2
60143: PUSH
60144: LD_INT 4
60146: MINUS
60147: PUSH
60148: LD_INT 2
60150: PUSH
60151: EMPTY
60152: LIST
60153: LIST
60154: LIST
60155: PUSH
60156: LD_VAR 0 1
60160: PUSH
60161: LD_INT 3
60163: MINUS
60164: PUSH
60165: LD_VAR 0 2
60169: PUSH
60170: LD_INT 1
60172: PUSH
60173: EMPTY
60174: LIST
60175: LIST
60176: LIST
60177: PUSH
60178: LD_VAR 0 1
60182: PUSH
60183: LD_INT 4
60185: PLUS
60186: PUSH
60187: LD_VAR 0 2
60191: PUSH
60192: LD_INT 4
60194: PUSH
60195: EMPTY
60196: LIST
60197: LIST
60198: LIST
60199: PUSH
60200: LD_VAR 0 1
60204: PUSH
60205: LD_INT 3
60207: PLUS
60208: PUSH
60209: LD_VAR 0 2
60213: PUSH
60214: LD_INT 3
60216: PLUS
60217: PUSH
60218: LD_INT 5
60220: PUSH
60221: EMPTY
60222: LIST
60223: LIST
60224: LIST
60225: PUSH
60226: LD_VAR 0 1
60230: PUSH
60231: LD_VAR 0 2
60235: PUSH
60236: LD_INT 4
60238: PLUS
60239: PUSH
60240: LD_INT 0
60242: PUSH
60243: EMPTY
60244: LIST
60245: LIST
60246: LIST
60247: PUSH
60248: EMPTY
60249: LIST
60250: LIST
60251: LIST
60252: LIST
60253: LIST
60254: ST_TO_ADDR
// end ; 1 :
60255: GO 60955
60257: LD_INT 1
60259: DOUBLE
60260: EQUAL
60261: IFTRUE 60265
60263: GO 60398
60265: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
60266: LD_ADDR_VAR 0 5
60270: PUSH
60271: LD_VAR 0 1
60275: PUSH
60276: LD_VAR 0 2
60280: PUSH
60281: LD_INT 4
60283: MINUS
60284: PUSH
60285: LD_INT 3
60287: PUSH
60288: EMPTY
60289: LIST
60290: LIST
60291: LIST
60292: PUSH
60293: LD_VAR 0 1
60297: PUSH
60298: LD_INT 3
60300: MINUS
60301: PUSH
60302: LD_VAR 0 2
60306: PUSH
60307: LD_INT 3
60309: MINUS
60310: PUSH
60311: LD_INT 2
60313: PUSH
60314: EMPTY
60315: LIST
60316: LIST
60317: LIST
60318: PUSH
60319: LD_VAR 0 1
60323: PUSH
60324: LD_INT 4
60326: MINUS
60327: PUSH
60328: LD_VAR 0 2
60332: PUSH
60333: LD_INT 1
60335: PUSH
60336: EMPTY
60337: LIST
60338: LIST
60339: LIST
60340: PUSH
60341: LD_VAR 0 1
60345: PUSH
60346: LD_VAR 0 2
60350: PUSH
60351: LD_INT 3
60353: PLUS
60354: PUSH
60355: LD_INT 0
60357: PUSH
60358: EMPTY
60359: LIST
60360: LIST
60361: LIST
60362: PUSH
60363: LD_VAR 0 1
60367: PUSH
60368: LD_INT 4
60370: PLUS
60371: PUSH
60372: LD_VAR 0 2
60376: PUSH
60377: LD_INT 4
60379: PLUS
60380: PUSH
60381: LD_INT 5
60383: PUSH
60384: EMPTY
60385: LIST
60386: LIST
60387: LIST
60388: PUSH
60389: EMPTY
60390: LIST
60391: LIST
60392: LIST
60393: LIST
60394: LIST
60395: ST_TO_ADDR
// end ; 2 :
60396: GO 60955
60398: LD_INT 2
60400: DOUBLE
60401: EQUAL
60402: IFTRUE 60406
60404: GO 60535
60406: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
60407: LD_ADDR_VAR 0 5
60411: PUSH
60412: LD_VAR 0 1
60416: PUSH
60417: LD_VAR 0 2
60421: PUSH
60422: LD_INT 3
60424: MINUS
60425: PUSH
60426: LD_INT 3
60428: PUSH
60429: EMPTY
60430: LIST
60431: LIST
60432: LIST
60433: PUSH
60434: LD_VAR 0 1
60438: PUSH
60439: LD_INT 4
60441: PLUS
60442: PUSH
60443: LD_VAR 0 2
60447: PUSH
60448: LD_INT 4
60450: PUSH
60451: EMPTY
60452: LIST
60453: LIST
60454: LIST
60455: PUSH
60456: LD_VAR 0 1
60460: PUSH
60461: LD_VAR 0 2
60465: PUSH
60466: LD_INT 4
60468: PLUS
60469: PUSH
60470: LD_INT 0
60472: PUSH
60473: EMPTY
60474: LIST
60475: LIST
60476: LIST
60477: PUSH
60478: LD_VAR 0 1
60482: PUSH
60483: LD_INT 3
60485: MINUS
60486: PUSH
60487: LD_VAR 0 2
60491: PUSH
60492: LD_INT 1
60494: PUSH
60495: EMPTY
60496: LIST
60497: LIST
60498: LIST
60499: PUSH
60500: LD_VAR 0 1
60504: PUSH
60505: LD_INT 4
60507: MINUS
60508: PUSH
60509: LD_VAR 0 2
60513: PUSH
60514: LD_INT 4
60516: MINUS
60517: PUSH
60518: LD_INT 2
60520: PUSH
60521: EMPTY
60522: LIST
60523: LIST
60524: LIST
60525: PUSH
60526: EMPTY
60527: LIST
60528: LIST
60529: LIST
60530: LIST
60531: LIST
60532: ST_TO_ADDR
// end ; 3 :
60533: GO 60955
60535: LD_INT 3
60537: DOUBLE
60538: EQUAL
60539: IFTRUE 60543
60541: GO 60676
60543: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
60544: LD_ADDR_VAR 0 5
60548: PUSH
60549: LD_VAR 0 1
60553: PUSH
60554: LD_INT 3
60556: PLUS
60557: PUSH
60558: LD_VAR 0 2
60562: PUSH
60563: LD_INT 4
60565: PUSH
60566: EMPTY
60567: LIST
60568: LIST
60569: LIST
60570: PUSH
60571: LD_VAR 0 1
60575: PUSH
60576: LD_INT 4
60578: PLUS
60579: PUSH
60580: LD_VAR 0 2
60584: PUSH
60585: LD_INT 4
60587: PLUS
60588: PUSH
60589: LD_INT 5
60591: PUSH
60592: EMPTY
60593: LIST
60594: LIST
60595: LIST
60596: PUSH
60597: LD_VAR 0 1
60601: PUSH
60602: LD_INT 4
60604: MINUS
60605: PUSH
60606: LD_VAR 0 2
60610: PUSH
60611: LD_INT 1
60613: PUSH
60614: EMPTY
60615: LIST
60616: LIST
60617: LIST
60618: PUSH
60619: LD_VAR 0 1
60623: PUSH
60624: LD_VAR 0 2
60628: PUSH
60629: LD_INT 4
60631: MINUS
60632: PUSH
60633: LD_INT 3
60635: PUSH
60636: EMPTY
60637: LIST
60638: LIST
60639: LIST
60640: PUSH
60641: LD_VAR 0 1
60645: PUSH
60646: LD_INT 3
60648: MINUS
60649: PUSH
60650: LD_VAR 0 2
60654: PUSH
60655: LD_INT 3
60657: MINUS
60658: PUSH
60659: LD_INT 2
60661: PUSH
60662: EMPTY
60663: LIST
60664: LIST
60665: LIST
60666: PUSH
60667: EMPTY
60668: LIST
60669: LIST
60670: LIST
60671: LIST
60672: LIST
60673: ST_TO_ADDR
// end ; 4 :
60674: GO 60955
60676: LD_INT 4
60678: DOUBLE
60679: EQUAL
60680: IFTRUE 60684
60682: GO 60817
60684: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
60685: LD_ADDR_VAR 0 5
60689: PUSH
60690: LD_VAR 0 1
60694: PUSH
60695: LD_VAR 0 2
60699: PUSH
60700: LD_INT 4
60702: PLUS
60703: PUSH
60704: LD_INT 0
60706: PUSH
60707: EMPTY
60708: LIST
60709: LIST
60710: LIST
60711: PUSH
60712: LD_VAR 0 1
60716: PUSH
60717: LD_INT 3
60719: PLUS
60720: PUSH
60721: LD_VAR 0 2
60725: PUSH
60726: LD_INT 3
60728: PLUS
60729: PUSH
60730: LD_INT 5
60732: PUSH
60733: EMPTY
60734: LIST
60735: LIST
60736: LIST
60737: PUSH
60738: LD_VAR 0 1
60742: PUSH
60743: LD_INT 4
60745: PLUS
60746: PUSH
60747: LD_VAR 0 2
60751: PUSH
60752: LD_INT 4
60754: PUSH
60755: EMPTY
60756: LIST
60757: LIST
60758: LIST
60759: PUSH
60760: LD_VAR 0 1
60764: PUSH
60765: LD_VAR 0 2
60769: PUSH
60770: LD_INT 3
60772: MINUS
60773: PUSH
60774: LD_INT 3
60776: PUSH
60777: EMPTY
60778: LIST
60779: LIST
60780: LIST
60781: PUSH
60782: LD_VAR 0 1
60786: PUSH
60787: LD_INT 4
60789: MINUS
60790: PUSH
60791: LD_VAR 0 2
60795: PUSH
60796: LD_INT 4
60798: MINUS
60799: PUSH
60800: LD_INT 2
60802: PUSH
60803: EMPTY
60804: LIST
60805: LIST
60806: LIST
60807: PUSH
60808: EMPTY
60809: LIST
60810: LIST
60811: LIST
60812: LIST
60813: LIST
60814: ST_TO_ADDR
// end ; 5 :
60815: GO 60955
60817: LD_INT 5
60819: DOUBLE
60820: EQUAL
60821: IFTRUE 60825
60823: GO 60954
60825: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
60826: LD_ADDR_VAR 0 5
60830: PUSH
60831: LD_VAR 0 1
60835: PUSH
60836: LD_INT 4
60838: MINUS
60839: PUSH
60840: LD_VAR 0 2
60844: PUSH
60845: LD_INT 1
60847: PUSH
60848: EMPTY
60849: LIST
60850: LIST
60851: LIST
60852: PUSH
60853: LD_VAR 0 1
60857: PUSH
60858: LD_VAR 0 2
60862: PUSH
60863: LD_INT 4
60865: MINUS
60866: PUSH
60867: LD_INT 3
60869: PUSH
60870: EMPTY
60871: LIST
60872: LIST
60873: LIST
60874: PUSH
60875: LD_VAR 0 1
60879: PUSH
60880: LD_INT 4
60882: PLUS
60883: PUSH
60884: LD_VAR 0 2
60888: PUSH
60889: LD_INT 4
60891: PLUS
60892: PUSH
60893: LD_INT 5
60895: PUSH
60896: EMPTY
60897: LIST
60898: LIST
60899: LIST
60900: PUSH
60901: LD_VAR 0 1
60905: PUSH
60906: LD_INT 3
60908: PLUS
60909: PUSH
60910: LD_VAR 0 2
60914: PUSH
60915: LD_INT 4
60917: PUSH
60918: EMPTY
60919: LIST
60920: LIST
60921: LIST
60922: PUSH
60923: LD_VAR 0 1
60927: PUSH
60928: LD_VAR 0 2
60932: PUSH
60933: LD_INT 3
60935: PLUS
60936: PUSH
60937: LD_INT 0
60939: PUSH
60940: EMPTY
60941: LIST
60942: LIST
60943: LIST
60944: PUSH
60945: EMPTY
60946: LIST
60947: LIST
60948: LIST
60949: LIST
60950: LIST
60951: ST_TO_ADDR
// end ; end ;
60952: GO 60955
60954: POP
// result := list ;
60955: LD_ADDR_VAR 0 4
60959: PUSH
60960: LD_VAR 0 5
60964: ST_TO_ADDR
// end ;
60965: LD_VAR 0 4
60969: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
60970: LD_INT 0
60972: PPUSH
60973: PPUSH
60974: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
60975: LD_VAR 0 1
60979: NOT
60980: PUSH
60981: LD_VAR 0 2
60985: PUSH
60986: LD_INT 1
60988: PUSH
60989: LD_INT 2
60991: PUSH
60992: LD_INT 3
60994: PUSH
60995: LD_INT 4
60997: PUSH
60998: EMPTY
60999: LIST
61000: LIST
61001: LIST
61002: LIST
61003: IN
61004: NOT
61005: OR
61006: IFFALSE 61010
// exit ;
61008: GO 61102
// tmp := [ ] ;
61010: LD_ADDR_VAR 0 5
61014: PUSH
61015: EMPTY
61016: ST_TO_ADDR
// for i in units do
61017: LD_ADDR_VAR 0 4
61021: PUSH
61022: LD_VAR 0 1
61026: PUSH
61027: FOR_IN
61028: IFFALSE 61071
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
61030: LD_ADDR_VAR 0 5
61034: PUSH
61035: LD_VAR 0 5
61039: PPUSH
61040: LD_VAR 0 5
61044: PUSH
61045: LD_INT 1
61047: PLUS
61048: PPUSH
61049: LD_VAR 0 4
61053: PPUSH
61054: LD_VAR 0 2
61058: PPUSH
61059: CALL_OW 259
61063: PPUSH
61064: CALL_OW 2
61068: ST_TO_ADDR
61069: GO 61027
61071: POP
61072: POP
// if not tmp then
61073: LD_VAR 0 5
61077: NOT
61078: IFFALSE 61082
// exit ;
61080: GO 61102
// result := SortListByListDesc ( units , tmp ) ;
61082: LD_ADDR_VAR 0 3
61086: PUSH
61087: LD_VAR 0 1
61091: PPUSH
61092: LD_VAR 0 5
61096: PPUSH
61097: CALL_OW 77
61101: ST_TO_ADDR
// end ;
61102: LD_VAR 0 3
61106: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
61107: LD_INT 0
61109: PPUSH
61110: PPUSH
61111: PPUSH
// x := GetX ( building ) ;
61112: LD_ADDR_VAR 0 4
61116: PUSH
61117: LD_VAR 0 2
61121: PPUSH
61122: CALL_OW 250
61126: ST_TO_ADDR
// y := GetY ( building ) ;
61127: LD_ADDR_VAR 0 5
61131: PUSH
61132: LD_VAR 0 2
61136: PPUSH
61137: CALL_OW 251
61141: ST_TO_ADDR
// if GetTaskList ( unit ) then
61142: LD_VAR 0 1
61146: PPUSH
61147: CALL_OW 437
61151: IFFALSE 61246
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61153: LD_STRING e
61155: PUSH
61156: LD_VAR 0 1
61160: PPUSH
61161: CALL_OW 437
61165: PUSH
61166: LD_INT 1
61168: ARRAY
61169: PUSH
61170: LD_INT 1
61172: ARRAY
61173: EQUAL
61174: PUSH
61175: LD_VAR 0 4
61179: PUSH
61180: LD_VAR 0 1
61184: PPUSH
61185: CALL_OW 437
61189: PUSH
61190: LD_INT 1
61192: ARRAY
61193: PUSH
61194: LD_INT 2
61196: ARRAY
61197: EQUAL
61198: AND
61199: PUSH
61200: LD_VAR 0 5
61204: PUSH
61205: LD_VAR 0 1
61209: PPUSH
61210: CALL_OW 437
61214: PUSH
61215: LD_INT 1
61217: ARRAY
61218: PUSH
61219: LD_INT 3
61221: ARRAY
61222: EQUAL
61223: AND
61224: IFFALSE 61236
// result := true else
61226: LD_ADDR_VAR 0 3
61230: PUSH
61231: LD_INT 1
61233: ST_TO_ADDR
61234: GO 61244
// result := false ;
61236: LD_ADDR_VAR 0 3
61240: PUSH
61241: LD_INT 0
61243: ST_TO_ADDR
// end else
61244: GO 61254
// result := false ;
61246: LD_ADDR_VAR 0 3
61250: PUSH
61251: LD_INT 0
61253: ST_TO_ADDR
// end ;
61254: LD_VAR 0 3
61258: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
61259: LD_INT 0
61261: PPUSH
61262: PPUSH
61263: PPUSH
61264: PPUSH
// if not unit or not area then
61265: LD_VAR 0 1
61269: NOT
61270: PUSH
61271: LD_VAR 0 2
61275: NOT
61276: OR
61277: IFFALSE 61281
// exit ;
61279: GO 61445
// tmp := AreaToList ( area , i ) ;
61281: LD_ADDR_VAR 0 6
61285: PUSH
61286: LD_VAR 0 2
61290: PPUSH
61291: LD_VAR 0 5
61295: PPUSH
61296: CALL_OW 517
61300: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
61301: LD_ADDR_VAR 0 5
61305: PUSH
61306: DOUBLE
61307: LD_INT 1
61309: DEC
61310: ST_TO_ADDR
61311: LD_VAR 0 6
61315: PUSH
61316: LD_INT 1
61318: ARRAY
61319: PUSH
61320: FOR_TO
61321: IFFALSE 61443
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
61323: LD_ADDR_VAR 0 7
61327: PUSH
61328: LD_VAR 0 6
61332: PUSH
61333: LD_INT 1
61335: ARRAY
61336: PUSH
61337: LD_VAR 0 5
61341: ARRAY
61342: PUSH
61343: LD_VAR 0 6
61347: PUSH
61348: LD_INT 2
61350: ARRAY
61351: PUSH
61352: LD_VAR 0 5
61356: ARRAY
61357: PUSH
61358: EMPTY
61359: LIST
61360: LIST
61361: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
61362: LD_VAR 0 7
61366: PUSH
61367: LD_INT 1
61369: ARRAY
61370: PPUSH
61371: LD_VAR 0 7
61375: PUSH
61376: LD_INT 2
61378: ARRAY
61379: PPUSH
61380: CALL_OW 428
61384: PUSH
61385: LD_INT 0
61387: EQUAL
61388: IFFALSE 61441
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
61390: LD_VAR 0 1
61394: PPUSH
61395: LD_VAR 0 7
61399: PUSH
61400: LD_INT 1
61402: ARRAY
61403: PPUSH
61404: LD_VAR 0 7
61408: PUSH
61409: LD_INT 2
61411: ARRAY
61412: PPUSH
61413: LD_VAR 0 3
61417: PPUSH
61418: CALL_OW 48
// result := IsPlaced ( unit ) ;
61422: LD_ADDR_VAR 0 4
61426: PUSH
61427: LD_VAR 0 1
61431: PPUSH
61432: CALL_OW 305
61436: ST_TO_ADDR
// exit ;
61437: POP
61438: POP
61439: GO 61445
// end ; end ;
61441: GO 61320
61443: POP
61444: POP
// end ;
61445: LD_VAR 0 4
61449: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
61450: LD_INT 0
61452: PPUSH
61453: PPUSH
61454: PPUSH
// if not side or side > 8 then
61455: LD_VAR 0 1
61459: NOT
61460: PUSH
61461: LD_VAR 0 1
61465: PUSH
61466: LD_INT 8
61468: GREATER
61469: OR
61470: IFFALSE 61474
// exit ;
61472: GO 61661
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
61474: LD_ADDR_VAR 0 4
61478: PUSH
61479: LD_INT 22
61481: PUSH
61482: LD_VAR 0 1
61486: PUSH
61487: EMPTY
61488: LIST
61489: LIST
61490: PUSH
61491: LD_INT 21
61493: PUSH
61494: LD_INT 3
61496: PUSH
61497: EMPTY
61498: LIST
61499: LIST
61500: PUSH
61501: EMPTY
61502: LIST
61503: LIST
61504: PPUSH
61505: CALL_OW 69
61509: ST_TO_ADDR
// if not tmp then
61510: LD_VAR 0 4
61514: NOT
61515: IFFALSE 61519
// exit ;
61517: GO 61661
// enable_addtolog := true ;
61519: LD_ADDR_OWVAR 81
61523: PUSH
61524: LD_INT 1
61526: ST_TO_ADDR
// AddToLog ( [ ) ;
61527: LD_STRING [
61529: PPUSH
61530: CALL_OW 561
// for i in tmp do
61534: LD_ADDR_VAR 0 3
61538: PUSH
61539: LD_VAR 0 4
61543: PUSH
61544: FOR_IN
61545: IFFALSE 61652
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
61547: LD_STRING [
61549: PUSH
61550: LD_VAR 0 3
61554: PPUSH
61555: CALL_OW 266
61559: STR
61560: PUSH
61561: LD_STRING , 
61563: STR
61564: PUSH
61565: LD_VAR 0 3
61569: PPUSH
61570: CALL_OW 250
61574: STR
61575: PUSH
61576: LD_STRING , 
61578: STR
61579: PUSH
61580: LD_VAR 0 3
61584: PPUSH
61585: CALL_OW 251
61589: STR
61590: PUSH
61591: LD_STRING , 
61593: STR
61594: PUSH
61595: LD_VAR 0 3
61599: PPUSH
61600: CALL_OW 254
61604: STR
61605: PUSH
61606: LD_STRING , 
61608: STR
61609: PUSH
61610: LD_VAR 0 3
61614: PPUSH
61615: LD_INT 1
61617: PPUSH
61618: CALL_OW 268
61622: STR
61623: PUSH
61624: LD_STRING , 
61626: STR
61627: PUSH
61628: LD_VAR 0 3
61632: PPUSH
61633: LD_INT 2
61635: PPUSH
61636: CALL_OW 268
61640: STR
61641: PUSH
61642: LD_STRING ],
61644: STR
61645: PPUSH
61646: CALL_OW 561
// end ;
61650: GO 61544
61652: POP
61653: POP
// AddToLog ( ]; ) ;
61654: LD_STRING ];
61656: PPUSH
61657: CALL_OW 561
// end ;
61661: LD_VAR 0 2
61665: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
61666: LD_INT 0
61668: PPUSH
61669: PPUSH
61670: PPUSH
61671: PPUSH
61672: PPUSH
// if not area or not rate or not max then
61673: LD_VAR 0 1
61677: NOT
61678: PUSH
61679: LD_VAR 0 2
61683: NOT
61684: OR
61685: PUSH
61686: LD_VAR 0 4
61690: NOT
61691: OR
61692: IFFALSE 61696
// exit ;
61694: GO 61888
// while 1 do
61696: LD_INT 1
61698: IFFALSE 61888
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
61700: LD_ADDR_VAR 0 9
61704: PUSH
61705: LD_VAR 0 1
61709: PPUSH
61710: LD_INT 1
61712: PPUSH
61713: CALL_OW 287
61717: PUSH
61718: LD_INT 10
61720: MUL
61721: ST_TO_ADDR
// r := rate / 10 ;
61722: LD_ADDR_VAR 0 7
61726: PUSH
61727: LD_VAR 0 2
61731: PUSH
61732: LD_INT 10
61734: DIVREAL
61735: ST_TO_ADDR
// time := 1 1$00 ;
61736: LD_ADDR_VAR 0 8
61740: PUSH
61741: LD_INT 2100
61743: ST_TO_ADDR
// if amount < min then
61744: LD_VAR 0 9
61748: PUSH
61749: LD_VAR 0 3
61753: LESS
61754: IFFALSE 61772
// r := r * 2 else
61756: LD_ADDR_VAR 0 7
61760: PUSH
61761: LD_VAR 0 7
61765: PUSH
61766: LD_INT 2
61768: MUL
61769: ST_TO_ADDR
61770: GO 61798
// if amount > max then
61772: LD_VAR 0 9
61776: PUSH
61777: LD_VAR 0 4
61781: GREATER
61782: IFFALSE 61798
// r := r / 2 ;
61784: LD_ADDR_VAR 0 7
61788: PUSH
61789: LD_VAR 0 7
61793: PUSH
61794: LD_INT 2
61796: DIVREAL
61797: ST_TO_ADDR
// time := time / r ;
61798: LD_ADDR_VAR 0 8
61802: PUSH
61803: LD_VAR 0 8
61807: PUSH
61808: LD_VAR 0 7
61812: DIVREAL
61813: ST_TO_ADDR
// if time < 0 then
61814: LD_VAR 0 8
61818: PUSH
61819: LD_INT 0
61821: LESS
61822: IFFALSE 61839
// time := time * - 1 ;
61824: LD_ADDR_VAR 0 8
61828: PUSH
61829: LD_VAR 0 8
61833: PUSH
61834: LD_INT 1
61836: NEG
61837: MUL
61838: ST_TO_ADDR
// wait ( time ) ;
61839: LD_VAR 0 8
61843: PPUSH
61844: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
61848: LD_INT 35
61850: PPUSH
61851: LD_INT 875
61853: PPUSH
61854: CALL_OW 12
61858: PPUSH
61859: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
61863: LD_INT 1
61865: PPUSH
61866: LD_INT 5
61868: PPUSH
61869: CALL_OW 12
61873: PPUSH
61874: LD_VAR 0 1
61878: PPUSH
61879: LD_INT 1
61881: PPUSH
61882: CALL_OW 55
// end ;
61886: GO 61696
// end ;
61888: LD_VAR 0 5
61892: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
61893: LD_INT 0
61895: PPUSH
61896: PPUSH
61897: PPUSH
61898: PPUSH
61899: PPUSH
61900: PPUSH
61901: PPUSH
61902: PPUSH
// if not turrets or not factories then
61903: LD_VAR 0 1
61907: NOT
61908: PUSH
61909: LD_VAR 0 2
61913: NOT
61914: OR
61915: IFFALSE 61919
// exit ;
61917: GO 62226
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
61919: LD_ADDR_VAR 0 10
61923: PUSH
61924: LD_INT 5
61926: PUSH
61927: LD_INT 6
61929: PUSH
61930: EMPTY
61931: LIST
61932: LIST
61933: PUSH
61934: LD_INT 2
61936: PUSH
61937: LD_INT 4
61939: PUSH
61940: EMPTY
61941: LIST
61942: LIST
61943: PUSH
61944: LD_INT 3
61946: PUSH
61947: LD_INT 5
61949: PUSH
61950: EMPTY
61951: LIST
61952: LIST
61953: PUSH
61954: EMPTY
61955: LIST
61956: LIST
61957: LIST
61958: PUSH
61959: LD_INT 24
61961: PUSH
61962: LD_INT 25
61964: PUSH
61965: EMPTY
61966: LIST
61967: LIST
61968: PUSH
61969: LD_INT 23
61971: PUSH
61972: LD_INT 27
61974: PUSH
61975: EMPTY
61976: LIST
61977: LIST
61978: PUSH
61979: EMPTY
61980: LIST
61981: LIST
61982: PUSH
61983: LD_INT 42
61985: PUSH
61986: LD_INT 43
61988: PUSH
61989: EMPTY
61990: LIST
61991: LIST
61992: PUSH
61993: LD_INT 44
61995: PUSH
61996: LD_INT 46
61998: PUSH
61999: EMPTY
62000: LIST
62001: LIST
62002: PUSH
62003: LD_INT 45
62005: PUSH
62006: LD_INT 47
62008: PUSH
62009: EMPTY
62010: LIST
62011: LIST
62012: PUSH
62013: EMPTY
62014: LIST
62015: LIST
62016: LIST
62017: PUSH
62018: EMPTY
62019: LIST
62020: LIST
62021: LIST
62022: ST_TO_ADDR
// result := [ ] ;
62023: LD_ADDR_VAR 0 3
62027: PUSH
62028: EMPTY
62029: ST_TO_ADDR
// for i in turrets do
62030: LD_ADDR_VAR 0 4
62034: PUSH
62035: LD_VAR 0 1
62039: PUSH
62040: FOR_IN
62041: IFFALSE 62224
// begin nat := GetNation ( i ) ;
62043: LD_ADDR_VAR 0 7
62047: PUSH
62048: LD_VAR 0 4
62052: PPUSH
62053: CALL_OW 248
62057: ST_TO_ADDR
// weapon := 0 ;
62058: LD_ADDR_VAR 0 8
62062: PUSH
62063: LD_INT 0
62065: ST_TO_ADDR
// if not nat then
62066: LD_VAR 0 7
62070: NOT
62071: IFFALSE 62075
// continue ;
62073: GO 62040
// for j in list [ nat ] do
62075: LD_ADDR_VAR 0 5
62079: PUSH
62080: LD_VAR 0 10
62084: PUSH
62085: LD_VAR 0 7
62089: ARRAY
62090: PUSH
62091: FOR_IN
62092: IFFALSE 62133
// if GetBWeapon ( i ) = j [ 1 ] then
62094: LD_VAR 0 4
62098: PPUSH
62099: CALL_OW 269
62103: PUSH
62104: LD_VAR 0 5
62108: PUSH
62109: LD_INT 1
62111: ARRAY
62112: EQUAL
62113: IFFALSE 62131
// begin weapon := j [ 2 ] ;
62115: LD_ADDR_VAR 0 8
62119: PUSH
62120: LD_VAR 0 5
62124: PUSH
62125: LD_INT 2
62127: ARRAY
62128: ST_TO_ADDR
// break ;
62129: GO 62133
// end ;
62131: GO 62091
62133: POP
62134: POP
// if not weapon then
62135: LD_VAR 0 8
62139: NOT
62140: IFFALSE 62144
// continue ;
62142: GO 62040
// for k in factories do
62144: LD_ADDR_VAR 0 6
62148: PUSH
62149: LD_VAR 0 2
62153: PUSH
62154: FOR_IN
62155: IFFALSE 62220
// begin weapons := AvailableWeaponList ( k ) ;
62157: LD_ADDR_VAR 0 9
62161: PUSH
62162: LD_VAR 0 6
62166: PPUSH
62167: CALL_OW 478
62171: ST_TO_ADDR
// if not weapons then
62172: LD_VAR 0 9
62176: NOT
62177: IFFALSE 62181
// continue ;
62179: GO 62154
// if weapon in weapons then
62181: LD_VAR 0 8
62185: PUSH
62186: LD_VAR 0 9
62190: IN
62191: IFFALSE 62218
// begin result := [ i , weapon ] ;
62193: LD_ADDR_VAR 0 3
62197: PUSH
62198: LD_VAR 0 4
62202: PUSH
62203: LD_VAR 0 8
62207: PUSH
62208: EMPTY
62209: LIST
62210: LIST
62211: ST_TO_ADDR
// exit ;
62212: POP
62213: POP
62214: POP
62215: POP
62216: GO 62226
// end ; end ;
62218: GO 62154
62220: POP
62221: POP
// end ;
62222: GO 62040
62224: POP
62225: POP
// end ;
62226: LD_VAR 0 3
62230: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
62231: LD_INT 0
62233: PPUSH
// if not side or side > 8 then
62234: LD_VAR 0 3
62238: NOT
62239: PUSH
62240: LD_VAR 0 3
62244: PUSH
62245: LD_INT 8
62247: GREATER
62248: OR
62249: IFFALSE 62253
// exit ;
62251: GO 62312
// if not range then
62253: LD_VAR 0 4
62257: NOT
62258: IFFALSE 62269
// range := - 12 ;
62260: LD_ADDR_VAR 0 4
62264: PUSH
62265: LD_INT 12
62267: NEG
62268: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
62269: LD_VAR 0 1
62273: PPUSH
62274: LD_VAR 0 2
62278: PPUSH
62279: LD_VAR 0 3
62283: PPUSH
62284: LD_VAR 0 4
62288: PPUSH
62289: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
62293: LD_VAR 0 1
62297: PPUSH
62298: LD_VAR 0 2
62302: PPUSH
62303: LD_VAR 0 3
62307: PPUSH
62308: CALL_OW 331
// end ;
62312: LD_VAR 0 5
62316: RET
// export function Video ( mode ) ; begin
62317: LD_INT 0
62319: PPUSH
// ingame_video = mode ;
62320: LD_ADDR_OWVAR 52
62324: PUSH
62325: LD_VAR 0 1
62329: ST_TO_ADDR
// interface_hidden = mode ;
62330: LD_ADDR_OWVAR 54
62334: PUSH
62335: LD_VAR 0 1
62339: ST_TO_ADDR
// end ;
62340: LD_VAR 0 2
62344: RET
// export function Join ( array , element ) ; begin
62345: LD_INT 0
62347: PPUSH
// result := array ^ element ;
62348: LD_ADDR_VAR 0 3
62352: PUSH
62353: LD_VAR 0 1
62357: PUSH
62358: LD_VAR 0 2
62362: ADD
62363: ST_TO_ADDR
// end ;
62364: LD_VAR 0 3
62368: RET
// export function JoinUnion ( array , element ) ; begin
62369: LD_INT 0
62371: PPUSH
// result := array union element ;
62372: LD_ADDR_VAR 0 3
62376: PUSH
62377: LD_VAR 0 1
62381: PUSH
62382: LD_VAR 0 2
62386: UNION
62387: ST_TO_ADDR
// end ;
62388: LD_VAR 0 3
62392: RET
// export function GetBehemoths ( side ) ; begin
62393: LD_INT 0
62395: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
62396: LD_ADDR_VAR 0 2
62400: PUSH
62401: LD_INT 22
62403: PUSH
62404: LD_VAR 0 1
62408: PUSH
62409: EMPTY
62410: LIST
62411: LIST
62412: PUSH
62413: LD_INT 31
62415: PUSH
62416: LD_INT 25
62418: PUSH
62419: EMPTY
62420: LIST
62421: LIST
62422: PUSH
62423: EMPTY
62424: LIST
62425: LIST
62426: PPUSH
62427: CALL_OW 69
62431: ST_TO_ADDR
// end ;
62432: LD_VAR 0 2
62436: RET
// export function Shuffle ( array ) ; var i , index ; begin
62437: LD_INT 0
62439: PPUSH
62440: PPUSH
62441: PPUSH
// result := [ ] ;
62442: LD_ADDR_VAR 0 2
62446: PUSH
62447: EMPTY
62448: ST_TO_ADDR
// if not array then
62449: LD_VAR 0 1
62453: NOT
62454: IFFALSE 62458
// exit ;
62456: GO 62557
// Randomize ;
62458: CALL_OW 10
// for i = array downto 1 do
62462: LD_ADDR_VAR 0 3
62466: PUSH
62467: DOUBLE
62468: LD_VAR 0 1
62472: INC
62473: ST_TO_ADDR
62474: LD_INT 1
62476: PUSH
62477: FOR_DOWNTO
62478: IFFALSE 62555
// begin index := rand ( 1 , array ) ;
62480: LD_ADDR_VAR 0 4
62484: PUSH
62485: LD_INT 1
62487: PPUSH
62488: LD_VAR 0 1
62492: PPUSH
62493: CALL_OW 12
62497: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
62498: LD_ADDR_VAR 0 2
62502: PUSH
62503: LD_VAR 0 2
62507: PPUSH
62508: LD_VAR 0 2
62512: PUSH
62513: LD_INT 1
62515: PLUS
62516: PPUSH
62517: LD_VAR 0 1
62521: PUSH
62522: LD_VAR 0 4
62526: ARRAY
62527: PPUSH
62528: CALL_OW 2
62532: ST_TO_ADDR
// array := Delete ( array , index ) ;
62533: LD_ADDR_VAR 0 1
62537: PUSH
62538: LD_VAR 0 1
62542: PPUSH
62543: LD_VAR 0 4
62547: PPUSH
62548: CALL_OW 3
62552: ST_TO_ADDR
// end ;
62553: GO 62477
62555: POP
62556: POP
// end ;
62557: LD_VAR 0 2
62561: RET
// export function GetBaseMaterials ( base ) ; begin
62562: LD_INT 0
62564: PPUSH
// result := [ 0 , 0 , 0 ] ;
62565: LD_ADDR_VAR 0 2
62569: PUSH
62570: LD_INT 0
62572: PUSH
62573: LD_INT 0
62575: PUSH
62576: LD_INT 0
62578: PUSH
62579: EMPTY
62580: LIST
62581: LIST
62582: LIST
62583: ST_TO_ADDR
// if not base then
62584: LD_VAR 0 1
62588: NOT
62589: IFFALSE 62593
// exit ;
62591: GO 62642
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
62593: LD_ADDR_VAR 0 2
62597: PUSH
62598: LD_VAR 0 1
62602: PPUSH
62603: LD_INT 1
62605: PPUSH
62606: CALL_OW 275
62610: PUSH
62611: LD_VAR 0 1
62615: PPUSH
62616: LD_INT 2
62618: PPUSH
62619: CALL_OW 275
62623: PUSH
62624: LD_VAR 0 1
62628: PPUSH
62629: LD_INT 3
62631: PPUSH
62632: CALL_OW 275
62636: PUSH
62637: EMPTY
62638: LIST
62639: LIST
62640: LIST
62641: ST_TO_ADDR
// end ; end_of_file
62642: LD_VAR 0 2
62646: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; every 1 do
62647: GO 62649
62649: DISABLE
// begin ru_radar := 98 ;
62650: LD_ADDR_EXP 29
62654: PUSH
62655: LD_INT 98
62657: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
62658: LD_ADDR_EXP 30
62662: PUSH
62663: LD_INT 89
62665: ST_TO_ADDR
// us_hack := 99 ;
62666: LD_ADDR_EXP 31
62670: PUSH
62671: LD_INT 99
62673: ST_TO_ADDR
// us_artillery := 97 ;
62674: LD_ADDR_EXP 32
62678: PUSH
62679: LD_INT 97
62681: ST_TO_ADDR
// ar_bio_bomb := 91 ;
62682: LD_ADDR_EXP 33
62686: PUSH
62687: LD_INT 91
62689: ST_TO_ADDR
// tech_Artillery := 80 ;
62690: LD_ADDR_EXP 34
62694: PUSH
62695: LD_INT 80
62697: ST_TO_ADDR
// tech_RadMat := 81 ;
62698: LD_ADDR_EXP 35
62702: PUSH
62703: LD_INT 81
62705: ST_TO_ADDR
// tech_BasicTools := 82 ;
62706: LD_ADDR_EXP 36
62710: PUSH
62711: LD_INT 82
62713: ST_TO_ADDR
// tech_Cargo := 83 ;
62714: LD_ADDR_EXP 37
62718: PUSH
62719: LD_INT 83
62721: ST_TO_ADDR
// tech_Track := 84 ;
62722: LD_ADDR_EXP 38
62726: PUSH
62727: LD_INT 84
62729: ST_TO_ADDR
// tech_Crane := 85 ;
62730: LD_ADDR_EXP 39
62734: PUSH
62735: LD_INT 85
62737: ST_TO_ADDR
// tech_Bulldozer := 86 ;
62738: LD_ADDR_EXP 40
62742: PUSH
62743: LD_INT 86
62745: ST_TO_ADDR
// tech_Hovercraft := 87 ;
62746: LD_ADDR_EXP 41
62750: PUSH
62751: LD_INT 87
62753: ST_TO_ADDR
// end ; end_of_file
62754: END
// export skirmish , debug_mc ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_teleport_exit_set , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver , mc_class , mc_class_case_use ; export function InitMacro ; var i ; begin
62755: LD_INT 0
62757: PPUSH
62758: PPUSH
// skirmish := false ;
62759: LD_ADDR_EXP 42
62763: PUSH
62764: LD_INT 0
62766: ST_TO_ADDR
// debug_mc := false ;
62767: LD_ADDR_EXP 43
62771: PUSH
62772: LD_INT 0
62774: ST_TO_ADDR
// mc_bases := [ ] ;
62775: LD_ADDR_EXP 44
62779: PUSH
62780: EMPTY
62781: ST_TO_ADDR
// mc_sides := [ ] ;
62782: LD_ADDR_EXP 70
62786: PUSH
62787: EMPTY
62788: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
62789: LD_ADDR_EXP 45
62793: PUSH
62794: EMPTY
62795: ST_TO_ADDR
// mc_building_repairs := [ ] ;
62796: LD_ADDR_EXP 46
62800: PUSH
62801: EMPTY
62802: ST_TO_ADDR
// mc_need_heal := [ ] ;
62803: LD_ADDR_EXP 47
62807: PUSH
62808: EMPTY
62809: ST_TO_ADDR
// mc_healers := [ ] ;
62810: LD_ADDR_EXP 48
62814: PUSH
62815: EMPTY
62816: ST_TO_ADDR
// mc_build_list := [ ] ;
62817: LD_ADDR_EXP 49
62821: PUSH
62822: EMPTY
62823: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
62824: LD_ADDR_EXP 76
62828: PUSH
62829: EMPTY
62830: ST_TO_ADDR
// mc_builders := [ ] ;
62831: LD_ADDR_EXP 50
62835: PUSH
62836: EMPTY
62837: ST_TO_ADDR
// mc_construct_list := [ ] ;
62838: LD_ADDR_EXP 51
62842: PUSH
62843: EMPTY
62844: ST_TO_ADDR
// mc_turret_list := [ ] ;
62845: LD_ADDR_EXP 52
62849: PUSH
62850: EMPTY
62851: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
62852: LD_ADDR_EXP 53
62856: PUSH
62857: EMPTY
62858: ST_TO_ADDR
// mc_miners := [ ] ;
62859: LD_ADDR_EXP 58
62863: PUSH
62864: EMPTY
62865: ST_TO_ADDR
// mc_mines := [ ] ;
62866: LD_ADDR_EXP 57
62870: PUSH
62871: EMPTY
62872: ST_TO_ADDR
// mc_minefields := [ ] ;
62873: LD_ADDR_EXP 59
62877: PUSH
62878: EMPTY
62879: ST_TO_ADDR
// mc_crates := [ ] ;
62880: LD_ADDR_EXP 60
62884: PUSH
62885: EMPTY
62886: ST_TO_ADDR
// mc_crates_collector := [ ] ;
62887: LD_ADDR_EXP 61
62891: PUSH
62892: EMPTY
62893: ST_TO_ADDR
// mc_crates_area := [ ] ;
62894: LD_ADDR_EXP 62
62898: PUSH
62899: EMPTY
62900: ST_TO_ADDR
// mc_vehicles := [ ] ;
62901: LD_ADDR_EXP 63
62905: PUSH
62906: EMPTY
62907: ST_TO_ADDR
// mc_attack := [ ] ;
62908: LD_ADDR_EXP 64
62912: PUSH
62913: EMPTY
62914: ST_TO_ADDR
// mc_produce := [ ] ;
62915: LD_ADDR_EXP 65
62919: PUSH
62920: EMPTY
62921: ST_TO_ADDR
// mc_defender := [ ] ;
62922: LD_ADDR_EXP 66
62926: PUSH
62927: EMPTY
62928: ST_TO_ADDR
// mc_parking := [ ] ;
62929: LD_ADDR_EXP 68
62933: PUSH
62934: EMPTY
62935: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
62936: LD_ADDR_EXP 54
62940: PUSH
62941: EMPTY
62942: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
62943: LD_ADDR_EXP 56
62947: PUSH
62948: EMPTY
62949: ST_TO_ADDR
// mc_scan := [ ] ;
62950: LD_ADDR_EXP 67
62954: PUSH
62955: EMPTY
62956: ST_TO_ADDR
// mc_scan_area := [ ] ;
62957: LD_ADDR_EXP 69
62961: PUSH
62962: EMPTY
62963: ST_TO_ADDR
// mc_tech := [ ] ;
62964: LD_ADDR_EXP 71
62968: PUSH
62969: EMPTY
62970: ST_TO_ADDR
// mc_class := [ ] ;
62971: LD_ADDR_EXP 85
62975: PUSH
62976: EMPTY
62977: ST_TO_ADDR
// mc_class_case_use := [ ] ;
62978: LD_ADDR_EXP 86
62982: PUSH
62983: EMPTY
62984: ST_TO_ADDR
// end ;
62985: LD_VAR 0 1
62989: RET
// export function MC_Kill ( base ) ; begin
62990: LD_INT 0
62992: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
62993: LD_ADDR_EXP 44
62997: PUSH
62998: LD_EXP 44
63002: PPUSH
63003: LD_VAR 0 1
63007: PPUSH
63008: EMPTY
63009: PPUSH
63010: CALL_OW 1
63014: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
63015: LD_ADDR_EXP 45
63019: PUSH
63020: LD_EXP 45
63024: PPUSH
63025: LD_VAR 0 1
63029: PPUSH
63030: EMPTY
63031: PPUSH
63032: CALL_OW 1
63036: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
63037: LD_ADDR_EXP 46
63041: PUSH
63042: LD_EXP 46
63046: PPUSH
63047: LD_VAR 0 1
63051: PPUSH
63052: EMPTY
63053: PPUSH
63054: CALL_OW 1
63058: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
63059: LD_ADDR_EXP 47
63063: PUSH
63064: LD_EXP 47
63068: PPUSH
63069: LD_VAR 0 1
63073: PPUSH
63074: EMPTY
63075: PPUSH
63076: CALL_OW 1
63080: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
63081: LD_ADDR_EXP 48
63085: PUSH
63086: LD_EXP 48
63090: PPUSH
63091: LD_VAR 0 1
63095: PPUSH
63096: EMPTY
63097: PPUSH
63098: CALL_OW 1
63102: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
63103: LD_ADDR_EXP 49
63107: PUSH
63108: LD_EXP 49
63112: PPUSH
63113: LD_VAR 0 1
63117: PPUSH
63118: EMPTY
63119: PPUSH
63120: CALL_OW 1
63124: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
63125: LD_ADDR_EXP 50
63129: PUSH
63130: LD_EXP 50
63134: PPUSH
63135: LD_VAR 0 1
63139: PPUSH
63140: EMPTY
63141: PPUSH
63142: CALL_OW 1
63146: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
63147: LD_ADDR_EXP 51
63151: PUSH
63152: LD_EXP 51
63156: PPUSH
63157: LD_VAR 0 1
63161: PPUSH
63162: EMPTY
63163: PPUSH
63164: CALL_OW 1
63168: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
63169: LD_ADDR_EXP 52
63173: PUSH
63174: LD_EXP 52
63178: PPUSH
63179: LD_VAR 0 1
63183: PPUSH
63184: EMPTY
63185: PPUSH
63186: CALL_OW 1
63190: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
63191: LD_ADDR_EXP 53
63195: PUSH
63196: LD_EXP 53
63200: PPUSH
63201: LD_VAR 0 1
63205: PPUSH
63206: EMPTY
63207: PPUSH
63208: CALL_OW 1
63212: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
63213: LD_ADDR_EXP 54
63217: PUSH
63218: LD_EXP 54
63222: PPUSH
63223: LD_VAR 0 1
63227: PPUSH
63228: EMPTY
63229: PPUSH
63230: CALL_OW 1
63234: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
63235: LD_ADDR_EXP 55
63239: PUSH
63240: LD_EXP 55
63244: PPUSH
63245: LD_VAR 0 1
63249: PPUSH
63250: LD_INT 0
63252: PPUSH
63253: CALL_OW 1
63257: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
63258: LD_ADDR_EXP 56
63262: PUSH
63263: LD_EXP 56
63267: PPUSH
63268: LD_VAR 0 1
63272: PPUSH
63273: EMPTY
63274: PPUSH
63275: CALL_OW 1
63279: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
63280: LD_ADDR_EXP 57
63284: PUSH
63285: LD_EXP 57
63289: PPUSH
63290: LD_VAR 0 1
63294: PPUSH
63295: EMPTY
63296: PPUSH
63297: CALL_OW 1
63301: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
63302: LD_ADDR_EXP 58
63306: PUSH
63307: LD_EXP 58
63311: PPUSH
63312: LD_VAR 0 1
63316: PPUSH
63317: EMPTY
63318: PPUSH
63319: CALL_OW 1
63323: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
63324: LD_ADDR_EXP 59
63328: PUSH
63329: LD_EXP 59
63333: PPUSH
63334: LD_VAR 0 1
63338: PPUSH
63339: EMPTY
63340: PPUSH
63341: CALL_OW 1
63345: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
63346: LD_ADDR_EXP 60
63350: PUSH
63351: LD_EXP 60
63355: PPUSH
63356: LD_VAR 0 1
63360: PPUSH
63361: EMPTY
63362: PPUSH
63363: CALL_OW 1
63367: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
63368: LD_ADDR_EXP 61
63372: PUSH
63373: LD_EXP 61
63377: PPUSH
63378: LD_VAR 0 1
63382: PPUSH
63383: EMPTY
63384: PPUSH
63385: CALL_OW 1
63389: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
63390: LD_ADDR_EXP 62
63394: PUSH
63395: LD_EXP 62
63399: PPUSH
63400: LD_VAR 0 1
63404: PPUSH
63405: EMPTY
63406: PPUSH
63407: CALL_OW 1
63411: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
63412: LD_ADDR_EXP 63
63416: PUSH
63417: LD_EXP 63
63421: PPUSH
63422: LD_VAR 0 1
63426: PPUSH
63427: EMPTY
63428: PPUSH
63429: CALL_OW 1
63433: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
63434: LD_ADDR_EXP 64
63438: PUSH
63439: LD_EXP 64
63443: PPUSH
63444: LD_VAR 0 1
63448: PPUSH
63449: EMPTY
63450: PPUSH
63451: CALL_OW 1
63455: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
63456: LD_ADDR_EXP 65
63460: PUSH
63461: LD_EXP 65
63465: PPUSH
63466: LD_VAR 0 1
63470: PPUSH
63471: EMPTY
63472: PPUSH
63473: CALL_OW 1
63477: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
63478: LD_ADDR_EXP 66
63482: PUSH
63483: LD_EXP 66
63487: PPUSH
63488: LD_VAR 0 1
63492: PPUSH
63493: EMPTY
63494: PPUSH
63495: CALL_OW 1
63499: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
63500: LD_ADDR_EXP 67
63504: PUSH
63505: LD_EXP 67
63509: PPUSH
63510: LD_VAR 0 1
63514: PPUSH
63515: EMPTY
63516: PPUSH
63517: CALL_OW 1
63521: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
63522: LD_ADDR_EXP 68
63526: PUSH
63527: LD_EXP 68
63531: PPUSH
63532: LD_VAR 0 1
63536: PPUSH
63537: EMPTY
63538: PPUSH
63539: CALL_OW 1
63543: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
63544: LD_ADDR_EXP 69
63548: PUSH
63549: LD_EXP 69
63553: PPUSH
63554: LD_VAR 0 1
63558: PPUSH
63559: EMPTY
63560: PPUSH
63561: CALL_OW 1
63565: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
63566: LD_ADDR_EXP 71
63570: PUSH
63571: LD_EXP 71
63575: PPUSH
63576: LD_VAR 0 1
63580: PPUSH
63581: EMPTY
63582: PPUSH
63583: CALL_OW 1
63587: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
63588: LD_ADDR_EXP 73
63592: PUSH
63593: LD_EXP 73
63597: PPUSH
63598: LD_VAR 0 1
63602: PPUSH
63603: EMPTY
63604: PPUSH
63605: CALL_OW 1
63609: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
63610: LD_ADDR_EXP 74
63614: PUSH
63615: LD_EXP 74
63619: PPUSH
63620: LD_VAR 0 1
63624: PPUSH
63625: EMPTY
63626: PPUSH
63627: CALL_OW 1
63631: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
63632: LD_ADDR_EXP 75
63636: PUSH
63637: LD_EXP 75
63641: PPUSH
63642: LD_VAR 0 1
63646: PPUSH
63647: EMPTY
63648: PPUSH
63649: CALL_OW 1
63653: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
63654: LD_ADDR_EXP 76
63658: PUSH
63659: LD_EXP 76
63663: PPUSH
63664: LD_VAR 0 1
63668: PPUSH
63669: EMPTY
63670: PPUSH
63671: CALL_OW 1
63675: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
63676: LD_ADDR_EXP 77
63680: PUSH
63681: LD_EXP 77
63685: PPUSH
63686: LD_VAR 0 1
63690: PPUSH
63691: EMPTY
63692: PPUSH
63693: CALL_OW 1
63697: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
63698: LD_ADDR_EXP 78
63702: PUSH
63703: LD_EXP 78
63707: PPUSH
63708: LD_VAR 0 1
63712: PPUSH
63713: EMPTY
63714: PPUSH
63715: CALL_OW 1
63719: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
63720: LD_ADDR_EXP 79
63724: PUSH
63725: LD_EXP 79
63729: PPUSH
63730: LD_VAR 0 1
63734: PPUSH
63735: EMPTY
63736: PPUSH
63737: CALL_OW 1
63741: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
63742: LD_ADDR_EXP 80
63746: PUSH
63747: LD_EXP 80
63751: PPUSH
63752: LD_VAR 0 1
63756: PPUSH
63757: EMPTY
63758: PPUSH
63759: CALL_OW 1
63763: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
63764: LD_ADDR_EXP 81
63768: PUSH
63769: LD_EXP 81
63773: PPUSH
63774: LD_VAR 0 1
63778: PPUSH
63779: EMPTY
63780: PPUSH
63781: CALL_OW 1
63785: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
63786: LD_ADDR_EXP 82
63790: PUSH
63791: LD_EXP 82
63795: PPUSH
63796: LD_VAR 0 1
63800: PPUSH
63801: EMPTY
63802: PPUSH
63803: CALL_OW 1
63807: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
63808: LD_ADDR_EXP 83
63812: PUSH
63813: LD_EXP 83
63817: PPUSH
63818: LD_VAR 0 1
63822: PPUSH
63823: EMPTY
63824: PPUSH
63825: CALL_OW 1
63829: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
63830: LD_ADDR_EXP 84
63834: PUSH
63835: LD_EXP 84
63839: PPUSH
63840: LD_VAR 0 1
63844: PPUSH
63845: EMPTY
63846: PPUSH
63847: CALL_OW 1
63851: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
63852: LD_ADDR_EXP 85
63856: PUSH
63857: LD_EXP 85
63861: PPUSH
63862: LD_VAR 0 1
63866: PPUSH
63867: EMPTY
63868: PPUSH
63869: CALL_OW 1
63873: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
63874: LD_ADDR_EXP 86
63878: PUSH
63879: LD_EXP 86
63883: PPUSH
63884: LD_VAR 0 1
63888: PPUSH
63889: LD_INT 0
63891: PPUSH
63892: CALL_OW 1
63896: ST_TO_ADDR
// end ;
63897: LD_VAR 0 2
63901: RET
// export function MC_Add ( side , units ) ; var base ; begin
63902: LD_INT 0
63904: PPUSH
63905: PPUSH
// base := mc_bases + 1 ;
63906: LD_ADDR_VAR 0 4
63910: PUSH
63911: LD_EXP 44
63915: PUSH
63916: LD_INT 1
63918: PLUS
63919: ST_TO_ADDR
// mc_sides := Replace ( mc_sides , base , side ) ;
63920: LD_ADDR_EXP 70
63924: PUSH
63925: LD_EXP 70
63929: PPUSH
63930: LD_VAR 0 4
63934: PPUSH
63935: LD_VAR 0 1
63939: PPUSH
63940: CALL_OW 1
63944: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , base , units ) ;
63945: LD_ADDR_EXP 44
63949: PUSH
63950: LD_EXP 44
63954: PPUSH
63955: LD_VAR 0 4
63959: PPUSH
63960: LD_VAR 0 2
63964: PPUSH
63965: CALL_OW 1
63969: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
63970: LD_ADDR_EXP 45
63974: PUSH
63975: LD_EXP 45
63979: PPUSH
63980: LD_VAR 0 4
63984: PPUSH
63985: EMPTY
63986: PPUSH
63987: CALL_OW 1
63991: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
63992: LD_ADDR_EXP 46
63996: PUSH
63997: LD_EXP 46
64001: PPUSH
64002: LD_VAR 0 4
64006: PPUSH
64007: EMPTY
64008: PPUSH
64009: CALL_OW 1
64013: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
64014: LD_ADDR_EXP 47
64018: PUSH
64019: LD_EXP 47
64023: PPUSH
64024: LD_VAR 0 4
64028: PPUSH
64029: EMPTY
64030: PPUSH
64031: CALL_OW 1
64035: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
64036: LD_ADDR_EXP 48
64040: PUSH
64041: LD_EXP 48
64045: PPUSH
64046: LD_VAR 0 4
64050: PPUSH
64051: EMPTY
64052: PPUSH
64053: CALL_OW 1
64057: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
64058: LD_ADDR_EXP 49
64062: PUSH
64063: LD_EXP 49
64067: PPUSH
64068: LD_VAR 0 4
64072: PPUSH
64073: EMPTY
64074: PPUSH
64075: CALL_OW 1
64079: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
64080: LD_ADDR_EXP 50
64084: PUSH
64085: LD_EXP 50
64089: PPUSH
64090: LD_VAR 0 4
64094: PPUSH
64095: EMPTY
64096: PPUSH
64097: CALL_OW 1
64101: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
64102: LD_ADDR_EXP 51
64106: PUSH
64107: LD_EXP 51
64111: PPUSH
64112: LD_VAR 0 4
64116: PPUSH
64117: EMPTY
64118: PPUSH
64119: CALL_OW 1
64123: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
64124: LD_ADDR_EXP 52
64128: PUSH
64129: LD_EXP 52
64133: PPUSH
64134: LD_VAR 0 4
64138: PPUSH
64139: EMPTY
64140: PPUSH
64141: CALL_OW 1
64145: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
64146: LD_ADDR_EXP 53
64150: PUSH
64151: LD_EXP 53
64155: PPUSH
64156: LD_VAR 0 4
64160: PPUSH
64161: EMPTY
64162: PPUSH
64163: CALL_OW 1
64167: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
64168: LD_ADDR_EXP 54
64172: PUSH
64173: LD_EXP 54
64177: PPUSH
64178: LD_VAR 0 4
64182: PPUSH
64183: EMPTY
64184: PPUSH
64185: CALL_OW 1
64189: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
64190: LD_ADDR_EXP 55
64194: PUSH
64195: LD_EXP 55
64199: PPUSH
64200: LD_VAR 0 4
64204: PPUSH
64205: LD_INT 0
64207: PPUSH
64208: CALL_OW 1
64212: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
64213: LD_ADDR_EXP 56
64217: PUSH
64218: LD_EXP 56
64222: PPUSH
64223: LD_VAR 0 4
64227: PPUSH
64228: EMPTY
64229: PPUSH
64230: CALL_OW 1
64234: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
64235: LD_ADDR_EXP 57
64239: PUSH
64240: LD_EXP 57
64244: PPUSH
64245: LD_VAR 0 4
64249: PPUSH
64250: EMPTY
64251: PPUSH
64252: CALL_OW 1
64256: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
64257: LD_ADDR_EXP 58
64261: PUSH
64262: LD_EXP 58
64266: PPUSH
64267: LD_VAR 0 4
64271: PPUSH
64272: EMPTY
64273: PPUSH
64274: CALL_OW 1
64278: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
64279: LD_ADDR_EXP 59
64283: PUSH
64284: LD_EXP 59
64288: PPUSH
64289: LD_VAR 0 4
64293: PPUSH
64294: EMPTY
64295: PPUSH
64296: CALL_OW 1
64300: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
64301: LD_ADDR_EXP 60
64305: PUSH
64306: LD_EXP 60
64310: PPUSH
64311: LD_VAR 0 4
64315: PPUSH
64316: EMPTY
64317: PPUSH
64318: CALL_OW 1
64322: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
64323: LD_ADDR_EXP 61
64327: PUSH
64328: LD_EXP 61
64332: PPUSH
64333: LD_VAR 0 4
64337: PPUSH
64338: EMPTY
64339: PPUSH
64340: CALL_OW 1
64344: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
64345: LD_ADDR_EXP 62
64349: PUSH
64350: LD_EXP 62
64354: PPUSH
64355: LD_VAR 0 4
64359: PPUSH
64360: EMPTY
64361: PPUSH
64362: CALL_OW 1
64366: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
64367: LD_ADDR_EXP 63
64371: PUSH
64372: LD_EXP 63
64376: PPUSH
64377: LD_VAR 0 4
64381: PPUSH
64382: EMPTY
64383: PPUSH
64384: CALL_OW 1
64388: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
64389: LD_ADDR_EXP 64
64393: PUSH
64394: LD_EXP 64
64398: PPUSH
64399: LD_VAR 0 4
64403: PPUSH
64404: EMPTY
64405: PPUSH
64406: CALL_OW 1
64410: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
64411: LD_ADDR_EXP 65
64415: PUSH
64416: LD_EXP 65
64420: PPUSH
64421: LD_VAR 0 4
64425: PPUSH
64426: EMPTY
64427: PPUSH
64428: CALL_OW 1
64432: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
64433: LD_ADDR_EXP 66
64437: PUSH
64438: LD_EXP 66
64442: PPUSH
64443: LD_VAR 0 4
64447: PPUSH
64448: EMPTY
64449: PPUSH
64450: CALL_OW 1
64454: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
64455: LD_ADDR_EXP 67
64459: PUSH
64460: LD_EXP 67
64464: PPUSH
64465: LD_VAR 0 4
64469: PPUSH
64470: EMPTY
64471: PPUSH
64472: CALL_OW 1
64476: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
64477: LD_ADDR_EXP 68
64481: PUSH
64482: LD_EXP 68
64486: PPUSH
64487: LD_VAR 0 4
64491: PPUSH
64492: EMPTY
64493: PPUSH
64494: CALL_OW 1
64498: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
64499: LD_ADDR_EXP 69
64503: PUSH
64504: LD_EXP 69
64508: PPUSH
64509: LD_VAR 0 4
64513: PPUSH
64514: EMPTY
64515: PPUSH
64516: CALL_OW 1
64520: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
64521: LD_ADDR_EXP 71
64525: PUSH
64526: LD_EXP 71
64530: PPUSH
64531: LD_VAR 0 4
64535: PPUSH
64536: EMPTY
64537: PPUSH
64538: CALL_OW 1
64542: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
64543: LD_ADDR_EXP 73
64547: PUSH
64548: LD_EXP 73
64552: PPUSH
64553: LD_VAR 0 4
64557: PPUSH
64558: EMPTY
64559: PPUSH
64560: CALL_OW 1
64564: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
64565: LD_ADDR_EXP 74
64569: PUSH
64570: LD_EXP 74
64574: PPUSH
64575: LD_VAR 0 4
64579: PPUSH
64580: EMPTY
64581: PPUSH
64582: CALL_OW 1
64586: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
64587: LD_ADDR_EXP 75
64591: PUSH
64592: LD_EXP 75
64596: PPUSH
64597: LD_VAR 0 4
64601: PPUSH
64602: EMPTY
64603: PPUSH
64604: CALL_OW 1
64608: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
64609: LD_ADDR_EXP 76
64613: PUSH
64614: LD_EXP 76
64618: PPUSH
64619: LD_VAR 0 4
64623: PPUSH
64624: EMPTY
64625: PPUSH
64626: CALL_OW 1
64630: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
64631: LD_ADDR_EXP 77
64635: PUSH
64636: LD_EXP 77
64640: PPUSH
64641: LD_VAR 0 4
64645: PPUSH
64646: EMPTY
64647: PPUSH
64648: CALL_OW 1
64652: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
64653: LD_ADDR_EXP 78
64657: PUSH
64658: LD_EXP 78
64662: PPUSH
64663: LD_VAR 0 4
64667: PPUSH
64668: EMPTY
64669: PPUSH
64670: CALL_OW 1
64674: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
64675: LD_ADDR_EXP 79
64679: PUSH
64680: LD_EXP 79
64684: PPUSH
64685: LD_VAR 0 4
64689: PPUSH
64690: EMPTY
64691: PPUSH
64692: CALL_OW 1
64696: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
64697: LD_ADDR_EXP 80
64701: PUSH
64702: LD_EXP 80
64706: PPUSH
64707: LD_VAR 0 4
64711: PPUSH
64712: EMPTY
64713: PPUSH
64714: CALL_OW 1
64718: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
64719: LD_ADDR_EXP 81
64723: PUSH
64724: LD_EXP 81
64728: PPUSH
64729: LD_VAR 0 4
64733: PPUSH
64734: EMPTY
64735: PPUSH
64736: CALL_OW 1
64740: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
64741: LD_ADDR_EXP 82
64745: PUSH
64746: LD_EXP 82
64750: PPUSH
64751: LD_VAR 0 4
64755: PPUSH
64756: EMPTY
64757: PPUSH
64758: CALL_OW 1
64762: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
64763: LD_ADDR_EXP 83
64767: PUSH
64768: LD_EXP 83
64772: PPUSH
64773: LD_VAR 0 4
64777: PPUSH
64778: EMPTY
64779: PPUSH
64780: CALL_OW 1
64784: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
64785: LD_ADDR_EXP 84
64789: PUSH
64790: LD_EXP 84
64794: PPUSH
64795: LD_VAR 0 4
64799: PPUSH
64800: EMPTY
64801: PPUSH
64802: CALL_OW 1
64806: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
64807: LD_ADDR_EXP 85
64811: PUSH
64812: LD_EXP 85
64816: PPUSH
64817: LD_VAR 0 4
64821: PPUSH
64822: EMPTY
64823: PPUSH
64824: CALL_OW 1
64828: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
64829: LD_ADDR_EXP 86
64833: PUSH
64834: LD_EXP 86
64838: PPUSH
64839: LD_VAR 0 4
64843: PPUSH
64844: LD_INT 0
64846: PPUSH
64847: CALL_OW 1
64851: ST_TO_ADDR
// result := base ;
64852: LD_ADDR_VAR 0 3
64856: PUSH
64857: LD_VAR 0 4
64861: ST_TO_ADDR
// end ;
64862: LD_VAR 0 3
64866: RET
// export function MC_Start ( ) ; var i ; begin
64867: LD_INT 0
64869: PPUSH
64870: PPUSH
// for i = 1 to mc_bases do
64871: LD_ADDR_VAR 0 2
64875: PUSH
64876: DOUBLE
64877: LD_INT 1
64879: DEC
64880: ST_TO_ADDR
64881: LD_EXP 44
64885: PUSH
64886: FOR_TO
64887: IFFALSE 65964
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff 0 ) ;
64889: LD_ADDR_EXP 44
64893: PUSH
64894: LD_EXP 44
64898: PPUSH
64899: LD_VAR 0 2
64903: PPUSH
64904: LD_EXP 44
64908: PUSH
64909: LD_VAR 0 2
64913: ARRAY
64914: PUSH
64915: LD_INT 0
64917: DIFF
64918: PPUSH
64919: CALL_OW 1
64923: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
64924: LD_ADDR_EXP 45
64928: PUSH
64929: LD_EXP 45
64933: PPUSH
64934: LD_VAR 0 2
64938: PPUSH
64939: EMPTY
64940: PPUSH
64941: CALL_OW 1
64945: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
64946: LD_ADDR_EXP 46
64950: PUSH
64951: LD_EXP 46
64955: PPUSH
64956: LD_VAR 0 2
64960: PPUSH
64961: EMPTY
64962: PPUSH
64963: CALL_OW 1
64967: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
64968: LD_ADDR_EXP 47
64972: PUSH
64973: LD_EXP 47
64977: PPUSH
64978: LD_VAR 0 2
64982: PPUSH
64983: EMPTY
64984: PPUSH
64985: CALL_OW 1
64989: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
64990: LD_ADDR_EXP 48
64994: PUSH
64995: LD_EXP 48
64999: PPUSH
65000: LD_VAR 0 2
65004: PPUSH
65005: EMPTY
65006: PUSH
65007: EMPTY
65008: PUSH
65009: EMPTY
65010: LIST
65011: LIST
65012: PPUSH
65013: CALL_OW 1
65017: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
65018: LD_ADDR_EXP 49
65022: PUSH
65023: LD_EXP 49
65027: PPUSH
65028: LD_VAR 0 2
65032: PPUSH
65033: EMPTY
65034: PPUSH
65035: CALL_OW 1
65039: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
65040: LD_ADDR_EXP 76
65044: PUSH
65045: LD_EXP 76
65049: PPUSH
65050: LD_VAR 0 2
65054: PPUSH
65055: EMPTY
65056: PPUSH
65057: CALL_OW 1
65061: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
65062: LD_ADDR_EXP 50
65066: PUSH
65067: LD_EXP 50
65071: PPUSH
65072: LD_VAR 0 2
65076: PPUSH
65077: EMPTY
65078: PPUSH
65079: CALL_OW 1
65083: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
65084: LD_ADDR_EXP 51
65088: PUSH
65089: LD_EXP 51
65093: PPUSH
65094: LD_VAR 0 2
65098: PPUSH
65099: EMPTY
65100: PPUSH
65101: CALL_OW 1
65105: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ) ;
65106: LD_ADDR_EXP 52
65110: PUSH
65111: LD_EXP 52
65115: PPUSH
65116: LD_VAR 0 2
65120: PPUSH
65121: LD_EXP 44
65125: PUSH
65126: LD_VAR 0 2
65130: ARRAY
65131: PPUSH
65132: LD_INT 2
65134: PUSH
65135: LD_INT 30
65137: PUSH
65138: LD_INT 32
65140: PUSH
65141: EMPTY
65142: LIST
65143: LIST
65144: PUSH
65145: LD_INT 30
65147: PUSH
65148: LD_INT 33
65150: PUSH
65151: EMPTY
65152: LIST
65153: LIST
65154: PUSH
65155: EMPTY
65156: LIST
65157: LIST
65158: LIST
65159: PPUSH
65160: CALL_OW 72
65164: PPUSH
65165: CALL_OW 1
65169: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
65170: LD_ADDR_EXP 53
65174: PUSH
65175: LD_EXP 53
65179: PPUSH
65180: LD_VAR 0 2
65184: PPUSH
65185: LD_EXP 44
65189: PUSH
65190: LD_VAR 0 2
65194: ARRAY
65195: PPUSH
65196: LD_INT 2
65198: PUSH
65199: LD_INT 30
65201: PUSH
65202: LD_INT 32
65204: PUSH
65205: EMPTY
65206: LIST
65207: LIST
65208: PUSH
65209: LD_INT 30
65211: PUSH
65212: LD_INT 31
65214: PUSH
65215: EMPTY
65216: LIST
65217: LIST
65218: PUSH
65219: EMPTY
65220: LIST
65221: LIST
65222: LIST
65223: PUSH
65224: LD_INT 58
65226: PUSH
65227: EMPTY
65228: LIST
65229: PUSH
65230: EMPTY
65231: LIST
65232: LIST
65233: PPUSH
65234: CALL_OW 72
65238: PPUSH
65239: CALL_OW 1
65243: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
65244: LD_ADDR_EXP 54
65248: PUSH
65249: LD_EXP 54
65253: PPUSH
65254: LD_VAR 0 2
65258: PPUSH
65259: EMPTY
65260: PPUSH
65261: CALL_OW 1
65265: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
65266: LD_ADDR_EXP 58
65270: PUSH
65271: LD_EXP 58
65275: PPUSH
65276: LD_VAR 0 2
65280: PPUSH
65281: EMPTY
65282: PPUSH
65283: CALL_OW 1
65287: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
65288: LD_ADDR_EXP 57
65292: PUSH
65293: LD_EXP 57
65297: PPUSH
65298: LD_VAR 0 2
65302: PPUSH
65303: EMPTY
65304: PPUSH
65305: CALL_OW 1
65309: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
65310: LD_ADDR_EXP 59
65314: PUSH
65315: LD_EXP 59
65319: PPUSH
65320: LD_VAR 0 2
65324: PPUSH
65325: EMPTY
65326: PPUSH
65327: CALL_OW 1
65331: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
65332: LD_ADDR_EXP 60
65336: PUSH
65337: LD_EXP 60
65341: PPUSH
65342: LD_VAR 0 2
65346: PPUSH
65347: EMPTY
65348: PPUSH
65349: CALL_OW 1
65353: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
65354: LD_ADDR_EXP 61
65358: PUSH
65359: LD_EXP 61
65363: PPUSH
65364: LD_VAR 0 2
65368: PPUSH
65369: EMPTY
65370: PPUSH
65371: CALL_OW 1
65375: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
65376: LD_ADDR_EXP 62
65380: PUSH
65381: LD_EXP 62
65385: PPUSH
65386: LD_VAR 0 2
65390: PPUSH
65391: EMPTY
65392: PPUSH
65393: CALL_OW 1
65397: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
65398: LD_ADDR_EXP 63
65402: PUSH
65403: LD_EXP 63
65407: PPUSH
65408: LD_VAR 0 2
65412: PPUSH
65413: EMPTY
65414: PPUSH
65415: CALL_OW 1
65419: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
65420: LD_ADDR_EXP 64
65424: PUSH
65425: LD_EXP 64
65429: PPUSH
65430: LD_VAR 0 2
65434: PPUSH
65435: EMPTY
65436: PPUSH
65437: CALL_OW 1
65441: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
65442: LD_ADDR_EXP 65
65446: PUSH
65447: LD_EXP 65
65451: PPUSH
65452: LD_VAR 0 2
65456: PPUSH
65457: EMPTY
65458: PPUSH
65459: CALL_OW 1
65463: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
65464: LD_ADDR_EXP 66
65468: PUSH
65469: LD_EXP 66
65473: PPUSH
65474: LD_VAR 0 2
65478: PPUSH
65479: EMPTY
65480: PPUSH
65481: CALL_OW 1
65485: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
65486: LD_ADDR_EXP 55
65490: PUSH
65491: LD_EXP 55
65495: PPUSH
65496: LD_VAR 0 2
65500: PPUSH
65501: LD_INT 0
65503: PPUSH
65504: CALL_OW 1
65508: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
65509: LD_ADDR_EXP 68
65513: PUSH
65514: LD_EXP 68
65518: PPUSH
65519: LD_VAR 0 2
65523: PPUSH
65524: LD_INT 0
65526: PPUSH
65527: CALL_OW 1
65531: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
65532: LD_ADDR_EXP 56
65536: PUSH
65537: LD_EXP 56
65541: PPUSH
65542: LD_VAR 0 2
65546: PPUSH
65547: EMPTY
65548: PPUSH
65549: CALL_OW 1
65553: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
65554: LD_ADDR_EXP 67
65558: PUSH
65559: LD_EXP 67
65563: PPUSH
65564: LD_VAR 0 2
65568: PPUSH
65569: LD_INT 0
65571: PPUSH
65572: CALL_OW 1
65576: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
65577: LD_ADDR_EXP 69
65581: PUSH
65582: LD_EXP 69
65586: PPUSH
65587: LD_VAR 0 2
65591: PPUSH
65592: EMPTY
65593: PPUSH
65594: CALL_OW 1
65598: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
65599: LD_ADDR_EXP 72
65603: PUSH
65604: LD_EXP 72
65608: PPUSH
65609: LD_VAR 0 2
65613: PPUSH
65614: LD_INT 0
65616: PPUSH
65617: CALL_OW 1
65621: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
65622: LD_ADDR_EXP 73
65626: PUSH
65627: LD_EXP 73
65631: PPUSH
65632: LD_VAR 0 2
65636: PPUSH
65637: EMPTY
65638: PPUSH
65639: CALL_OW 1
65643: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
65644: LD_ADDR_EXP 74
65648: PUSH
65649: LD_EXP 74
65653: PPUSH
65654: LD_VAR 0 2
65658: PPUSH
65659: EMPTY
65660: PPUSH
65661: CALL_OW 1
65665: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
65666: LD_ADDR_EXP 75
65670: PUSH
65671: LD_EXP 75
65675: PPUSH
65676: LD_VAR 0 2
65680: PPUSH
65681: EMPTY
65682: PPUSH
65683: CALL_OW 1
65687: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
65688: LD_ADDR_EXP 77
65692: PUSH
65693: LD_EXP 77
65697: PPUSH
65698: LD_VAR 0 2
65702: PPUSH
65703: LD_EXP 44
65707: PUSH
65708: LD_VAR 0 2
65712: ARRAY
65713: PPUSH
65714: LD_INT 2
65716: PUSH
65717: LD_INT 30
65719: PUSH
65720: LD_INT 6
65722: PUSH
65723: EMPTY
65724: LIST
65725: LIST
65726: PUSH
65727: LD_INT 30
65729: PUSH
65730: LD_INT 7
65732: PUSH
65733: EMPTY
65734: LIST
65735: LIST
65736: PUSH
65737: LD_INT 30
65739: PUSH
65740: LD_INT 8
65742: PUSH
65743: EMPTY
65744: LIST
65745: LIST
65746: PUSH
65747: EMPTY
65748: LIST
65749: LIST
65750: LIST
65751: LIST
65752: PPUSH
65753: CALL_OW 72
65757: PPUSH
65758: CALL_OW 1
65762: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
65763: LD_ADDR_EXP 78
65767: PUSH
65768: LD_EXP 78
65772: PPUSH
65773: LD_VAR 0 2
65777: PPUSH
65778: EMPTY
65779: PPUSH
65780: CALL_OW 1
65784: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
65785: LD_ADDR_EXP 79
65789: PUSH
65790: LD_EXP 79
65794: PPUSH
65795: LD_VAR 0 2
65799: PPUSH
65800: EMPTY
65801: PPUSH
65802: CALL_OW 1
65806: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , i , [ ] ) ;
65807: LD_ADDR_EXP 80
65811: PUSH
65812: LD_EXP 80
65816: PPUSH
65817: LD_VAR 0 2
65821: PPUSH
65822: EMPTY
65823: PPUSH
65824: CALL_OW 1
65828: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
65829: LD_ADDR_EXP 81
65833: PUSH
65834: LD_EXP 81
65838: PPUSH
65839: LD_VAR 0 2
65843: PPUSH
65844: EMPTY
65845: PPUSH
65846: CALL_OW 1
65850: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
65851: LD_ADDR_EXP 82
65855: PUSH
65856: LD_EXP 82
65860: PPUSH
65861: LD_VAR 0 2
65865: PPUSH
65866: EMPTY
65867: PPUSH
65868: CALL_OW 1
65872: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
65873: LD_ADDR_EXP 83
65877: PUSH
65878: LD_EXP 83
65882: PPUSH
65883: LD_VAR 0 2
65887: PPUSH
65888: EMPTY
65889: PPUSH
65890: CALL_OW 1
65894: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
65895: LD_ADDR_EXP 84
65899: PUSH
65900: LD_EXP 84
65904: PPUSH
65905: LD_VAR 0 2
65909: PPUSH
65910: EMPTY
65911: PPUSH
65912: CALL_OW 1
65916: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , [ ] ) ;
65917: LD_ADDR_EXP 85
65921: PUSH
65922: LD_EXP 85
65926: PPUSH
65927: LD_VAR 0 2
65931: PPUSH
65932: EMPTY
65933: PPUSH
65934: CALL_OW 1
65938: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , i , 0 ) ;
65939: LD_ADDR_EXP 86
65943: PUSH
65944: LD_EXP 86
65948: PPUSH
65949: LD_VAR 0 2
65953: PPUSH
65954: LD_INT 0
65956: PPUSH
65957: CALL_OW 1
65961: ST_TO_ADDR
// end ;
65962: GO 64886
65964: POP
65965: POP
// MC_InitSides ( ) ;
65966: CALL 66252 0 0
// MC_InitResearch ( ) ;
65970: CALL 65991 0 0
// CustomInitMacro ( ) ;
65974: CALL 1407 0 0
// skirmish := true ;
65978: LD_ADDR_EXP 42
65982: PUSH
65983: LD_INT 1
65985: ST_TO_ADDR
// end ;
65986: LD_VAR 0 1
65990: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
65991: LD_INT 0
65993: PPUSH
65994: PPUSH
65995: PPUSH
65996: PPUSH
65997: PPUSH
65998: PPUSH
// if not mc_bases then
65999: LD_EXP 44
66003: NOT
66004: IFFALSE 66008
// exit ;
66006: GO 66247
// for i = 1 to 8 do
66008: LD_ADDR_VAR 0 2
66012: PUSH
66013: DOUBLE
66014: LD_INT 1
66016: DEC
66017: ST_TO_ADDR
66018: LD_INT 8
66020: PUSH
66021: FOR_TO
66022: IFFALSE 66048
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
66024: LD_ADDR_EXP 71
66028: PUSH
66029: LD_EXP 71
66033: PPUSH
66034: LD_VAR 0 2
66038: PPUSH
66039: EMPTY
66040: PPUSH
66041: CALL_OW 1
66045: ST_TO_ADDR
66046: GO 66021
66048: POP
66049: POP
// tmp := [ ] ;
66050: LD_ADDR_VAR 0 5
66054: PUSH
66055: EMPTY
66056: ST_TO_ADDR
// for i = 1 to mc_sides do
66057: LD_ADDR_VAR 0 2
66061: PUSH
66062: DOUBLE
66063: LD_INT 1
66065: DEC
66066: ST_TO_ADDR
66067: LD_EXP 70
66071: PUSH
66072: FOR_TO
66073: IFFALSE 66131
// if not mc_sides [ i ] in tmp then
66075: LD_EXP 70
66079: PUSH
66080: LD_VAR 0 2
66084: ARRAY
66085: PUSH
66086: LD_VAR 0 5
66090: IN
66091: NOT
66092: IFFALSE 66129
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
66094: LD_ADDR_VAR 0 5
66098: PUSH
66099: LD_VAR 0 5
66103: PPUSH
66104: LD_VAR 0 5
66108: PUSH
66109: LD_INT 1
66111: PLUS
66112: PPUSH
66113: LD_EXP 70
66117: PUSH
66118: LD_VAR 0 2
66122: ARRAY
66123: PPUSH
66124: CALL_OW 2
66128: ST_TO_ADDR
66129: GO 66072
66131: POP
66132: POP
// if not tmp then
66133: LD_VAR 0 5
66137: NOT
66138: IFFALSE 66142
// exit ;
66140: GO 66247
// for j in tmp do
66142: LD_ADDR_VAR 0 3
66146: PUSH
66147: LD_VAR 0 5
66151: PUSH
66152: FOR_IN
66153: IFFALSE 66245
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
66155: LD_ADDR_VAR 0 6
66159: PUSH
66160: LD_INT 22
66162: PUSH
66163: LD_VAR 0 3
66167: PUSH
66168: EMPTY
66169: LIST
66170: LIST
66171: PPUSH
66172: CALL_OW 69
66176: ST_TO_ADDR
// if not un then
66177: LD_VAR 0 6
66181: NOT
66182: IFFALSE 66186
// continue ;
66184: GO 66152
// nation := GetNation ( un [ 1 ] ) ;
66186: LD_ADDR_VAR 0 4
66190: PUSH
66191: LD_VAR 0 6
66195: PUSH
66196: LD_INT 1
66198: ARRAY
66199: PPUSH
66200: CALL_OW 248
66204: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
66205: LD_ADDR_EXP 71
66209: PUSH
66210: LD_EXP 71
66214: PPUSH
66215: LD_VAR 0 3
66219: PPUSH
66220: LD_VAR 0 3
66224: PPUSH
66225: LD_VAR 0 4
66229: PPUSH
66230: LD_INT 1
66232: PPUSH
66233: CALL 19418 0 3
66237: PPUSH
66238: CALL_OW 1
66242: ST_TO_ADDR
// end ;
66243: GO 66152
66245: POP
66246: POP
// end ;
66247: LD_VAR 0 1
66251: RET
// export function MC_InitSides ( ) ; var i ; begin
66252: LD_INT 0
66254: PPUSH
66255: PPUSH
// if not mc_bases then
66256: LD_EXP 44
66260: NOT
66261: IFFALSE 66265
// exit ;
66263: GO 66339
// for i = 1 to mc_bases do
66265: LD_ADDR_VAR 0 2
66269: PUSH
66270: DOUBLE
66271: LD_INT 1
66273: DEC
66274: ST_TO_ADDR
66275: LD_EXP 44
66279: PUSH
66280: FOR_TO
66281: IFFALSE 66337
// if mc_bases [ i ] then
66283: LD_EXP 44
66287: PUSH
66288: LD_VAR 0 2
66292: ARRAY
66293: IFFALSE 66335
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
66295: LD_ADDR_EXP 70
66299: PUSH
66300: LD_EXP 70
66304: PPUSH
66305: LD_VAR 0 2
66309: PPUSH
66310: LD_EXP 44
66314: PUSH
66315: LD_VAR 0 2
66319: ARRAY
66320: PUSH
66321: LD_INT 1
66323: ARRAY
66324: PPUSH
66325: CALL_OW 255
66329: PPUSH
66330: CALL_OW 1
66334: ST_TO_ADDR
66335: GO 66280
66337: POP
66338: POP
// end ;
66339: LD_VAR 0 1
66343: RET
// every 0 0$01 trigger skirmish do
66344: LD_EXP 42
66348: IFFALSE 66502
66350: GO 66352
66352: DISABLE
// begin enable ;
66353: ENABLE
// MC_CheckBuildings ( ) ;
66354: CALL 71000 0 0
// MC_CheckPeopleLife ( ) ;
66358: CALL 71125 0 0
// RaiseSailEvent ( 100 ) ;
66362: LD_INT 100
66364: PPUSH
66365: CALL_OW 427
// RaiseSailEvent ( 103 ) ;
66369: LD_INT 103
66371: PPUSH
66372: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
66376: LD_INT 104
66378: PPUSH
66379: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
66383: LD_INT 105
66385: PPUSH
66386: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
66390: LD_INT 106
66392: PPUSH
66393: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
66397: LD_INT 107
66399: PPUSH
66400: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
66404: LD_INT 108
66406: PPUSH
66407: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
66411: LD_INT 109
66413: PPUSH
66414: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
66418: LD_INT 110
66420: PPUSH
66421: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
66425: LD_INT 111
66427: PPUSH
66428: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
66432: LD_INT 112
66434: PPUSH
66435: CALL_OW 427
// RaiseSailEvent ( 113 ) ;
66439: LD_INT 113
66441: PPUSH
66442: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
66446: LD_INT 120
66448: PPUSH
66449: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
66453: LD_INT 121
66455: PPUSH
66456: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
66460: LD_INT 122
66462: PPUSH
66463: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
66467: LD_INT 123
66469: PPUSH
66470: CALL_OW 427
// RaiseSailEvent ( 124 ) ;
66474: LD_INT 124
66476: PPUSH
66477: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
66481: LD_INT 125
66483: PPUSH
66484: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
66488: LD_INT 126
66490: PPUSH
66491: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
66495: LD_INT 200
66497: PPUSH
66498: CALL_OW 427
// end ;
66502: END
// on SailEvent ( event ) do begin if event < 100 then
66503: LD_VAR 0 1
66507: PUSH
66508: LD_INT 100
66510: LESS
66511: IFFALSE 66522
// CustomEvent ( event ) ;
66513: LD_VAR 0 1
66517: PPUSH
66518: CALL 18596 0 1
// if event = 100 then
66522: LD_VAR 0 1
66526: PUSH
66527: LD_INT 100
66529: EQUAL
66530: IFFALSE 66536
// MC_ClassManager ( ) ;
66532: CALL 66928 0 0
// if event = 101 then
66536: LD_VAR 0 1
66540: PUSH
66541: LD_INT 101
66543: EQUAL
66544: IFFALSE 66550
// MC_RepairBuildings ( ) ;
66546: CALL 71721 0 0
// if event = 102 then
66550: LD_VAR 0 1
66554: PUSH
66555: LD_INT 102
66557: EQUAL
66558: IFFALSE 66564
// MC_Heal ( ) ;
66560: CALL 72585 0 0
// if event = 103 then
66564: LD_VAR 0 1
66568: PUSH
66569: LD_INT 103
66571: EQUAL
66572: IFFALSE 66578
// MC_Build ( ) ;
66574: CALL 73007 0 0
// if event = 104 then
66578: LD_VAR 0 1
66582: PUSH
66583: LD_INT 104
66585: EQUAL
66586: IFFALSE 66592
// MC_TurretWeapon ( ) ;
66588: CALL 74620 0 0
// if event = 105 then
66592: LD_VAR 0 1
66596: PUSH
66597: LD_INT 105
66599: EQUAL
66600: IFFALSE 66606
// MC_BuildUpgrade ( ) ;
66602: CALL 74171 0 0
// if event = 106 then
66606: LD_VAR 0 1
66610: PUSH
66611: LD_INT 106
66613: EQUAL
66614: IFFALSE 66620
// MC_PlantMines ( ) ;
66616: CALL 75050 0 0
// if event = 107 then
66620: LD_VAR 0 1
66624: PUSH
66625: LD_INT 107
66627: EQUAL
66628: IFFALSE 66634
// MC_CollectCrates ( ) ;
66630: CALL 75848 0 0
// if event = 108 then
66634: LD_VAR 0 1
66638: PUSH
66639: LD_INT 108
66641: EQUAL
66642: IFFALSE 66648
// MC_LinkRemoteControl ( ) ;
66644: CALL 77624 0 0
// if event = 109 then
66648: LD_VAR 0 1
66652: PUSH
66653: LD_INT 109
66655: EQUAL
66656: IFFALSE 66662
// MC_ProduceVehicle ( ) ;
66658: CALL 77805 0 0
// if event = 110 then
66662: LD_VAR 0 1
66666: PUSH
66667: LD_INT 110
66669: EQUAL
66670: IFFALSE 66676
// MC_SendAttack ( ) ;
66672: CALL 78271 0 0
// if event = 111 then
66676: LD_VAR 0 1
66680: PUSH
66681: LD_INT 111
66683: EQUAL
66684: IFFALSE 66690
// MC_Defend ( ) ;
66686: CALL 78379 0 0
// if event = 112 then
66690: LD_VAR 0 1
66694: PUSH
66695: LD_INT 112
66697: EQUAL
66698: IFFALSE 66704
// MC_Research ( ) ;
66700: CALL 78984 0 0
// if event = 113 then
66704: LD_VAR 0 1
66708: PUSH
66709: LD_INT 113
66711: EQUAL
66712: IFFALSE 66718
// MC_MinesTrigger ( ) ;
66714: CALL 80098 0 0
// if event = 120 then
66718: LD_VAR 0 1
66722: PUSH
66723: LD_INT 120
66725: EQUAL
66726: IFFALSE 66732
// MC_RepairVehicle ( ) ;
66728: CALL 80197 0 0
// if event = 121 then
66732: LD_VAR 0 1
66736: PUSH
66737: LD_INT 121
66739: EQUAL
66740: IFFALSE 66746
// MC_TameApe ( ) ;
66742: CALL 80927 0 0
// if event = 122 then
66746: LD_VAR 0 1
66750: PUSH
66751: LD_INT 122
66753: EQUAL
66754: IFFALSE 66760
// MC_ChangeApeClass ( ) ;
66756: CALL 81756 0 0
// if event = 123 then
66760: LD_VAR 0 1
66764: PUSH
66765: LD_INT 123
66767: EQUAL
66768: IFFALSE 66774
// MC_Bazooka ( ) ;
66770: CALL 82406 0 0
// if event = 124 then
66774: LD_VAR 0 1
66778: PUSH
66779: LD_INT 124
66781: EQUAL
66782: IFFALSE 66788
// MC_TeleportExit ( ) ;
66784: CALL 82604 0 0
// if event = 125 then
66788: LD_VAR 0 1
66792: PUSH
66793: LD_INT 125
66795: EQUAL
66796: IFFALSE 66802
// MC_Deposits ( ) ;
66798: CALL 83251 0 0
// if event = 126 then
66802: LD_VAR 0 1
66806: PUSH
66807: LD_INT 126
66809: EQUAL
66810: IFFALSE 66816
// MC_RemoteDriver ( ) ;
66812: CALL 83876 0 0
// if event = 200 then
66816: LD_VAR 0 1
66820: PUSH
66821: LD_INT 200
66823: EQUAL
66824: IFFALSE 66830
// MC_Idle ( ) ;
66826: CALL 85825 0 0
// end ;
66830: PPOPN 1
66832: END
// export function MC_Reset ( base , tag ) ; var i ; begin
66833: LD_INT 0
66835: PPUSH
66836: PPUSH
// if not mc_bases [ base ] or not tag then
66837: LD_EXP 44
66841: PUSH
66842: LD_VAR 0 1
66846: ARRAY
66847: NOT
66848: PUSH
66849: LD_VAR 0 2
66853: NOT
66854: OR
66855: IFFALSE 66859
// exit ;
66857: GO 66923
// for i in mc_bases [ base ] union mc_ape [ base ] do
66859: LD_ADDR_VAR 0 4
66863: PUSH
66864: LD_EXP 44
66868: PUSH
66869: LD_VAR 0 1
66873: ARRAY
66874: PUSH
66875: LD_EXP 73
66879: PUSH
66880: LD_VAR 0 1
66884: ARRAY
66885: UNION
66886: PUSH
66887: FOR_IN
66888: IFFALSE 66921
// if GetTag ( i ) = tag then
66890: LD_VAR 0 4
66894: PPUSH
66895: CALL_OW 110
66899: PUSH
66900: LD_VAR 0 2
66904: EQUAL
66905: IFFALSE 66919
// SetTag ( i , 0 ) ;
66907: LD_VAR 0 4
66911: PPUSH
66912: LD_INT 0
66914: PPUSH
66915: CALL_OW 109
66919: GO 66887
66921: POP
66922: POP
// end ;
66923: LD_VAR 0 3
66927: RET
// export function MC_ClassManager ( ) ; var i , j , tmp , p , b , e , k ; begin
66928: LD_INT 0
66930: PPUSH
66931: PPUSH
66932: PPUSH
66933: PPUSH
66934: PPUSH
66935: PPUSH
66936: PPUSH
66937: PPUSH
// if not mc_bases then
66938: LD_EXP 44
66942: NOT
66943: IFFALSE 66947
// exit ;
66945: GO 67405
// for i = 1 to mc_bases do
66947: LD_ADDR_VAR 0 2
66951: PUSH
66952: DOUBLE
66953: LD_INT 1
66955: DEC
66956: ST_TO_ADDR
66957: LD_EXP 44
66961: PUSH
66962: FOR_TO
66963: IFFALSE 67403
// begin tmp := MC_ClassCheckReq ( i ) ;
66965: LD_ADDR_VAR 0 4
66969: PUSH
66970: LD_VAR 0 2
66974: PPUSH
66975: CALL 67410 0 1
66979: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , tmp ) ;
66980: LD_ADDR_EXP 85
66984: PUSH
66985: LD_EXP 85
66989: PPUSH
66990: LD_VAR 0 2
66994: PPUSH
66995: LD_VAR 0 4
66999: PPUSH
67000: CALL_OW 1
67004: ST_TO_ADDR
// if not tmp then
67005: LD_VAR 0 4
67009: NOT
67010: IFFALSE 67014
// continue ;
67012: GO 66962
// b := [ UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ] ;
67014: LD_ADDR_VAR 0 6
67018: PUSH
67019: LD_EXP 44
67023: PUSH
67024: LD_VAR 0 2
67028: ARRAY
67029: PPUSH
67030: LD_INT 2
67032: PUSH
67033: LD_INT 30
67035: PUSH
67036: LD_INT 4
67038: PUSH
67039: EMPTY
67040: LIST
67041: LIST
67042: PUSH
67043: LD_INT 30
67045: PUSH
67046: LD_INT 5
67048: PUSH
67049: EMPTY
67050: LIST
67051: LIST
67052: PUSH
67053: EMPTY
67054: LIST
67055: LIST
67056: LIST
67057: PPUSH
67058: CALL_OW 72
67062: PUSH
67063: LD_EXP 44
67067: PUSH
67068: LD_VAR 0 2
67072: ARRAY
67073: PPUSH
67074: LD_INT 2
67076: PUSH
67077: LD_INT 30
67079: PUSH
67080: LD_INT 0
67082: PUSH
67083: EMPTY
67084: LIST
67085: LIST
67086: PUSH
67087: LD_INT 30
67089: PUSH
67090: LD_INT 1
67092: PUSH
67093: EMPTY
67094: LIST
67095: LIST
67096: PUSH
67097: EMPTY
67098: LIST
67099: LIST
67100: LIST
67101: PPUSH
67102: CALL_OW 72
67106: PUSH
67107: LD_EXP 44
67111: PUSH
67112: LD_VAR 0 2
67116: ARRAY
67117: PPUSH
67118: LD_INT 30
67120: PUSH
67121: LD_INT 3
67123: PUSH
67124: EMPTY
67125: LIST
67126: LIST
67127: PPUSH
67128: CALL_OW 72
67132: PUSH
67133: LD_EXP 44
67137: PUSH
67138: LD_VAR 0 2
67142: ARRAY
67143: PPUSH
67144: LD_INT 2
67146: PUSH
67147: LD_INT 30
67149: PUSH
67150: LD_INT 6
67152: PUSH
67153: EMPTY
67154: LIST
67155: LIST
67156: PUSH
67157: LD_INT 30
67159: PUSH
67160: LD_INT 7
67162: PUSH
67163: EMPTY
67164: LIST
67165: LIST
67166: PUSH
67167: LD_INT 30
67169: PUSH
67170: LD_INT 8
67172: PUSH
67173: EMPTY
67174: LIST
67175: LIST
67176: PUSH
67177: EMPTY
67178: LIST
67179: LIST
67180: LIST
67181: LIST
67182: PPUSH
67183: CALL_OW 72
67187: PUSH
67188: EMPTY
67189: LIST
67190: LIST
67191: LIST
67192: LIST
67193: ST_TO_ADDR
// for j = 1 to 4 do
67194: LD_ADDR_VAR 0 3
67198: PUSH
67199: DOUBLE
67200: LD_INT 1
67202: DEC
67203: ST_TO_ADDR
67204: LD_INT 4
67206: PUSH
67207: FOR_TO
67208: IFFALSE 67399
// begin if not tmp [ j ] then
67210: LD_VAR 0 4
67214: PUSH
67215: LD_VAR 0 3
67219: ARRAY
67220: NOT
67221: IFFALSE 67225
// continue ;
67223: GO 67207
// for p in tmp [ j ] do
67225: LD_ADDR_VAR 0 5
67229: PUSH
67230: LD_VAR 0 4
67234: PUSH
67235: LD_VAR 0 3
67239: ARRAY
67240: PUSH
67241: FOR_IN
67242: IFFALSE 67395
// begin if not b [ j ] then
67244: LD_VAR 0 6
67248: PUSH
67249: LD_VAR 0 3
67253: ARRAY
67254: NOT
67255: IFFALSE 67259
// break ;
67257: GO 67395
// e := 0 ;
67259: LD_ADDR_VAR 0 7
67263: PUSH
67264: LD_INT 0
67266: ST_TO_ADDR
// for k in b [ j ] do
67267: LD_ADDR_VAR 0 8
67271: PUSH
67272: LD_VAR 0 6
67276: PUSH
67277: LD_VAR 0 3
67281: ARRAY
67282: PUSH
67283: FOR_IN
67284: IFFALSE 67311
// if IsNotFull ( k ) then
67286: LD_VAR 0 8
67290: PPUSH
67291: CALL 23978 0 1
67295: IFFALSE 67309
// begin e := k ;
67297: LD_ADDR_VAR 0 7
67301: PUSH
67302: LD_VAR 0 8
67306: ST_TO_ADDR
// break ;
67307: GO 67311
// end ;
67309: GO 67283
67311: POP
67312: POP
// if e and not UnitGoingToBuilding ( p , e ) then
67313: LD_VAR 0 7
67317: PUSH
67318: LD_VAR 0 5
67322: PPUSH
67323: LD_VAR 0 7
67327: PPUSH
67328: CALL 61107 0 2
67332: NOT
67333: AND
67334: IFFALSE 67393
// begin if IsInUnit ( p ) then
67336: LD_VAR 0 5
67340: PPUSH
67341: CALL_OW 310
67345: IFFALSE 67356
// ComExitBuilding ( p ) ;
67347: LD_VAR 0 5
67351: PPUSH
67352: CALL_OW 122
// ComEnterUnit ( p , e ) ;
67356: LD_VAR 0 5
67360: PPUSH
67361: LD_VAR 0 7
67365: PPUSH
67366: CALL_OW 120
// AddComChangeProfession ( p , j ) ;
67370: LD_VAR 0 5
67374: PPUSH
67375: LD_VAR 0 3
67379: PPUSH
67380: CALL_OW 183
// AddComExitBuilding ( p ) ;
67384: LD_VAR 0 5
67388: PPUSH
67389: CALL_OW 182
// end ; end ;
67393: GO 67241
67395: POP
67396: POP
// end ;
67397: GO 67207
67399: POP
67400: POP
// end ;
67401: GO 66962
67403: POP
67404: POP
// end ;
67405: LD_VAR 0 1
67409: RET
// export function MC_ClassCheckReq ( base ) ; var i , tmp , sol , eng , mech , sci , sort , j , p , b , bcount ; begin
67410: LD_INT 0
67412: PPUSH
67413: PPUSH
67414: PPUSH
67415: PPUSH
67416: PPUSH
67417: PPUSH
67418: PPUSH
67419: PPUSH
67420: PPUSH
67421: PPUSH
67422: PPUSH
67423: PPUSH
// if not base or not mc_bases [ base ] or not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
67424: LD_VAR 0 1
67428: NOT
67429: PUSH
67430: LD_EXP 44
67434: PUSH
67435: LD_VAR 0 1
67439: ARRAY
67440: NOT
67441: OR
67442: PUSH
67443: LD_EXP 44
67447: PUSH
67448: LD_VAR 0 1
67452: ARRAY
67453: PPUSH
67454: LD_INT 2
67456: PUSH
67457: LD_INT 30
67459: PUSH
67460: LD_INT 0
67462: PUSH
67463: EMPTY
67464: LIST
67465: LIST
67466: PUSH
67467: LD_INT 30
67469: PUSH
67470: LD_INT 1
67472: PUSH
67473: EMPTY
67474: LIST
67475: LIST
67476: PUSH
67477: EMPTY
67478: LIST
67479: LIST
67480: LIST
67481: PPUSH
67482: CALL_OW 72
67486: NOT
67487: OR
67488: IFFALSE 67492
// exit ;
67490: GO 70995
// tmp := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
67492: LD_ADDR_VAR 0 4
67496: PUSH
67497: LD_EXP 44
67501: PUSH
67502: LD_VAR 0 1
67506: ARRAY
67507: PPUSH
67508: LD_INT 2
67510: PUSH
67511: LD_INT 25
67513: PUSH
67514: LD_INT 1
67516: PUSH
67517: EMPTY
67518: LIST
67519: LIST
67520: PUSH
67521: LD_INT 25
67523: PUSH
67524: LD_INT 2
67526: PUSH
67527: EMPTY
67528: LIST
67529: LIST
67530: PUSH
67531: LD_INT 25
67533: PUSH
67534: LD_INT 3
67536: PUSH
67537: EMPTY
67538: LIST
67539: LIST
67540: PUSH
67541: LD_INT 25
67543: PUSH
67544: LD_INT 4
67546: PUSH
67547: EMPTY
67548: LIST
67549: LIST
67550: PUSH
67551: LD_INT 25
67553: PUSH
67554: LD_INT 5
67556: PUSH
67557: EMPTY
67558: LIST
67559: LIST
67560: PUSH
67561: LD_INT 25
67563: PUSH
67564: LD_INT 8
67566: PUSH
67567: EMPTY
67568: LIST
67569: LIST
67570: PUSH
67571: LD_INT 25
67573: PUSH
67574: LD_INT 9
67576: PUSH
67577: EMPTY
67578: LIST
67579: LIST
67580: PUSH
67581: EMPTY
67582: LIST
67583: LIST
67584: LIST
67585: LIST
67586: LIST
67587: LIST
67588: LIST
67589: LIST
67590: PPUSH
67591: CALL_OW 72
67595: ST_TO_ADDR
// if not tmp then
67596: LD_VAR 0 4
67600: NOT
67601: IFFALSE 67605
// exit ;
67603: GO 70995
// for i in tmp do
67605: LD_ADDR_VAR 0 3
67609: PUSH
67610: LD_VAR 0 4
67614: PUSH
67615: FOR_IN
67616: IFFALSE 67647
// if GetTag ( i ) then
67618: LD_VAR 0 3
67622: PPUSH
67623: CALL_OW 110
67627: IFFALSE 67645
// tmp := tmp diff i ;
67629: LD_ADDR_VAR 0 4
67633: PUSH
67634: LD_VAR 0 4
67638: PUSH
67639: LD_VAR 0 3
67643: DIFF
67644: ST_TO_ADDR
67645: GO 67615
67647: POP
67648: POP
// if not tmp then
67649: LD_VAR 0 4
67653: NOT
67654: IFFALSE 67658
// exit ;
67656: GO 70995
// sol := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
67658: LD_ADDR_VAR 0 5
67662: PUSH
67663: LD_EXP 44
67667: PUSH
67668: LD_VAR 0 1
67672: ARRAY
67673: PPUSH
67674: LD_INT 2
67676: PUSH
67677: LD_INT 25
67679: PUSH
67680: LD_INT 1
67682: PUSH
67683: EMPTY
67684: LIST
67685: LIST
67686: PUSH
67687: LD_INT 25
67689: PUSH
67690: LD_INT 5
67692: PUSH
67693: EMPTY
67694: LIST
67695: LIST
67696: PUSH
67697: LD_INT 25
67699: PUSH
67700: LD_INT 8
67702: PUSH
67703: EMPTY
67704: LIST
67705: LIST
67706: PUSH
67707: LD_INT 25
67709: PUSH
67710: LD_INT 9
67712: PUSH
67713: EMPTY
67714: LIST
67715: LIST
67716: PUSH
67717: EMPTY
67718: LIST
67719: LIST
67720: LIST
67721: LIST
67722: LIST
67723: PPUSH
67724: CALL_OW 72
67728: ST_TO_ADDR
// eng := UnitFilter ( mc_bases [ base ] , [ f_class , 2 ] ) ;
67729: LD_ADDR_VAR 0 6
67733: PUSH
67734: LD_EXP 44
67738: PUSH
67739: LD_VAR 0 1
67743: ARRAY
67744: PPUSH
67745: LD_INT 25
67747: PUSH
67748: LD_INT 2
67750: PUSH
67751: EMPTY
67752: LIST
67753: LIST
67754: PPUSH
67755: CALL_OW 72
67759: ST_TO_ADDR
// mech := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
67760: LD_ADDR_VAR 0 7
67764: PUSH
67765: LD_EXP 44
67769: PUSH
67770: LD_VAR 0 1
67774: ARRAY
67775: PPUSH
67776: LD_INT 25
67778: PUSH
67779: LD_INT 3
67781: PUSH
67782: EMPTY
67783: LIST
67784: LIST
67785: PPUSH
67786: CALL_OW 72
67790: ST_TO_ADDR
// sci := UnitFilter ( mc_bases [ base ] , [ [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
67791: LD_ADDR_VAR 0 8
67795: PUSH
67796: LD_EXP 44
67800: PUSH
67801: LD_VAR 0 1
67805: ARRAY
67806: PPUSH
67807: LD_INT 25
67809: PUSH
67810: LD_INT 4
67812: PUSH
67813: EMPTY
67814: LIST
67815: LIST
67816: PUSH
67817: LD_INT 24
67819: PUSH
67820: LD_INT 251
67822: PUSH
67823: EMPTY
67824: LIST
67825: LIST
67826: PUSH
67827: EMPTY
67828: LIST
67829: LIST
67830: PPUSH
67831: CALL_OW 72
67835: ST_TO_ADDR
// if mc_scan [ base ] then
67836: LD_EXP 67
67840: PUSH
67841: LD_VAR 0 1
67845: ARRAY
67846: IFFALSE 68307
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 4 ) ;
67848: LD_ADDR_EXP 86
67852: PUSH
67853: LD_EXP 86
67857: PPUSH
67858: LD_VAR 0 1
67862: PPUSH
67863: LD_INT 4
67865: PPUSH
67866: CALL_OW 1
67870: ST_TO_ADDR
// b := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
67871: LD_ADDR_VAR 0 12
67875: PUSH
67876: LD_EXP 44
67880: PUSH
67881: LD_VAR 0 1
67885: ARRAY
67886: PPUSH
67887: LD_INT 2
67889: PUSH
67890: LD_INT 30
67892: PUSH
67893: LD_INT 4
67895: PUSH
67896: EMPTY
67897: LIST
67898: LIST
67899: PUSH
67900: LD_INT 30
67902: PUSH
67903: LD_INT 5
67905: PUSH
67906: EMPTY
67907: LIST
67908: LIST
67909: PUSH
67910: EMPTY
67911: LIST
67912: LIST
67913: LIST
67914: PPUSH
67915: CALL_OW 72
67919: ST_TO_ADDR
// if not b then
67920: LD_VAR 0 12
67924: NOT
67925: IFFALSE 67929
// exit ;
67927: GO 70995
// p := [ ] ;
67929: LD_ADDR_VAR 0 11
67933: PUSH
67934: EMPTY
67935: ST_TO_ADDR
// if sci >= 2 then
67936: LD_VAR 0 8
67940: PUSH
67941: LD_INT 2
67943: GREATEREQUAL
67944: IFFALSE 67975
// sci := [ sci [ 1 ] , sci [ 2 ] ] else
67946: LD_ADDR_VAR 0 8
67950: PUSH
67951: LD_VAR 0 8
67955: PUSH
67956: LD_INT 1
67958: ARRAY
67959: PUSH
67960: LD_VAR 0 8
67964: PUSH
67965: LD_INT 2
67967: ARRAY
67968: PUSH
67969: EMPTY
67970: LIST
67971: LIST
67972: ST_TO_ADDR
67973: GO 68036
// if sci = 1 then
67975: LD_VAR 0 8
67979: PUSH
67980: LD_INT 1
67982: EQUAL
67983: IFFALSE 68004
// sci := [ sci [ 1 ] ] else
67985: LD_ADDR_VAR 0 8
67989: PUSH
67990: LD_VAR 0 8
67994: PUSH
67995: LD_INT 1
67997: ARRAY
67998: PUSH
67999: EMPTY
68000: LIST
68001: ST_TO_ADDR
68002: GO 68036
// if sci = 0 then
68004: LD_VAR 0 8
68008: PUSH
68009: LD_INT 0
68011: EQUAL
68012: IFFALSE 68036
// p := SortBySkill ( tmp , 4 ) [ 1 ] ;
68014: LD_ADDR_VAR 0 11
68018: PUSH
68019: LD_VAR 0 4
68023: PPUSH
68024: LD_INT 4
68026: PPUSH
68027: CALL 60970 0 2
68031: PUSH
68032: LD_INT 1
68034: ARRAY
68035: ST_TO_ADDR
// if eng > 4 then
68036: LD_VAR 0 6
68040: PUSH
68041: LD_INT 4
68043: GREATER
68044: IFFALSE 68090
// for i = eng downto 4 do
68046: LD_ADDR_VAR 0 3
68050: PUSH
68051: DOUBLE
68052: LD_VAR 0 6
68056: INC
68057: ST_TO_ADDR
68058: LD_INT 4
68060: PUSH
68061: FOR_DOWNTO
68062: IFFALSE 68088
// eng := eng diff eng [ i ] ;
68064: LD_ADDR_VAR 0 6
68068: PUSH
68069: LD_VAR 0 6
68073: PUSH
68074: LD_VAR 0 6
68078: PUSH
68079: LD_VAR 0 3
68083: ARRAY
68084: DIFF
68085: ST_TO_ADDR
68086: GO 68061
68088: POP
68089: POP
// tmp := tmp diff ( sol union eng union mech union sci ) ;
68090: LD_ADDR_VAR 0 4
68094: PUSH
68095: LD_VAR 0 4
68099: PUSH
68100: LD_VAR 0 5
68104: PUSH
68105: LD_VAR 0 6
68109: UNION
68110: PUSH
68111: LD_VAR 0 7
68115: UNION
68116: PUSH
68117: LD_VAR 0 8
68121: UNION
68122: DIFF
68123: ST_TO_ADDR
// bcount := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) + UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) * 6 ;
68124: LD_ADDR_VAR 0 13
68128: PUSH
68129: LD_EXP 44
68133: PUSH
68134: LD_VAR 0 1
68138: ARRAY
68139: PPUSH
68140: LD_INT 2
68142: PUSH
68143: LD_INT 30
68145: PUSH
68146: LD_INT 32
68148: PUSH
68149: EMPTY
68150: LIST
68151: LIST
68152: PUSH
68153: LD_INT 30
68155: PUSH
68156: LD_INT 31
68158: PUSH
68159: EMPTY
68160: LIST
68161: LIST
68162: PUSH
68163: EMPTY
68164: LIST
68165: LIST
68166: LIST
68167: PPUSH
68168: CALL_OW 72
68172: PUSH
68173: LD_EXP 44
68177: PUSH
68178: LD_VAR 0 1
68182: ARRAY
68183: PPUSH
68184: LD_INT 2
68186: PUSH
68187: LD_INT 30
68189: PUSH
68190: LD_INT 4
68192: PUSH
68193: EMPTY
68194: LIST
68195: LIST
68196: PUSH
68197: LD_INT 30
68199: PUSH
68200: LD_INT 5
68202: PUSH
68203: EMPTY
68204: LIST
68205: LIST
68206: PUSH
68207: EMPTY
68208: LIST
68209: LIST
68210: LIST
68211: PPUSH
68212: CALL_OW 72
68216: PUSH
68217: LD_INT 6
68219: MUL
68220: PLUS
68221: ST_TO_ADDR
// if bcount < tmp then
68222: LD_VAR 0 13
68226: PUSH
68227: LD_VAR 0 4
68231: LESS
68232: IFFALSE 68278
// for i = tmp downto bcount do
68234: LD_ADDR_VAR 0 3
68238: PUSH
68239: DOUBLE
68240: LD_VAR 0 4
68244: INC
68245: ST_TO_ADDR
68246: LD_VAR 0 13
68250: PUSH
68251: FOR_DOWNTO
68252: IFFALSE 68276
// tmp := Delete ( tmp , tmp ) ;
68254: LD_ADDR_VAR 0 4
68258: PUSH
68259: LD_VAR 0 4
68263: PPUSH
68264: LD_VAR 0 4
68268: PPUSH
68269: CALL_OW 3
68273: ST_TO_ADDR
68274: GO 68251
68276: POP
68277: POP
// result := [ tmp , 0 , 0 , p ] ;
68278: LD_ADDR_VAR 0 2
68282: PUSH
68283: LD_VAR 0 4
68287: PUSH
68288: LD_INT 0
68290: PUSH
68291: LD_INT 0
68293: PUSH
68294: LD_VAR 0 11
68298: PUSH
68299: EMPTY
68300: LIST
68301: LIST
68302: LIST
68303: LIST
68304: ST_TO_ADDR
// exit ;
68305: GO 70995
// end ; if not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
68307: LD_EXP 44
68311: PUSH
68312: LD_VAR 0 1
68316: ARRAY
68317: PPUSH
68318: LD_INT 2
68320: PUSH
68321: LD_INT 30
68323: PUSH
68324: LD_INT 6
68326: PUSH
68327: EMPTY
68328: LIST
68329: LIST
68330: PUSH
68331: LD_INT 30
68333: PUSH
68334: LD_INT 7
68336: PUSH
68337: EMPTY
68338: LIST
68339: LIST
68340: PUSH
68341: LD_INT 30
68343: PUSH
68344: LD_INT 8
68346: PUSH
68347: EMPTY
68348: LIST
68349: LIST
68350: PUSH
68351: EMPTY
68352: LIST
68353: LIST
68354: LIST
68355: LIST
68356: PPUSH
68357: CALL_OW 72
68361: NOT
68362: PUSH
68363: LD_EXP 44
68367: PUSH
68368: LD_VAR 0 1
68372: ARRAY
68373: PPUSH
68374: LD_INT 30
68376: PUSH
68377: LD_INT 3
68379: PUSH
68380: EMPTY
68381: LIST
68382: LIST
68383: PPUSH
68384: CALL_OW 72
68388: NOT
68389: AND
68390: IFFALSE 68462
// begin if eng = tmp then
68392: LD_VAR 0 6
68396: PUSH
68397: LD_VAR 0 4
68401: EQUAL
68402: IFFALSE 68406
// exit ;
68404: GO 70995
// mc_class_case_use := Replace ( mc_class_case_use , base , 1 ) ;
68406: LD_ADDR_EXP 86
68410: PUSH
68411: LD_EXP 86
68415: PPUSH
68416: LD_VAR 0 1
68420: PPUSH
68421: LD_INT 1
68423: PPUSH
68424: CALL_OW 1
68428: ST_TO_ADDR
// result := [ 0 , tmp diff eng , 0 , 0 ] ;
68429: LD_ADDR_VAR 0 2
68433: PUSH
68434: LD_INT 0
68436: PUSH
68437: LD_VAR 0 4
68441: PUSH
68442: LD_VAR 0 6
68446: DIFF
68447: PUSH
68448: LD_INT 0
68450: PUSH
68451: LD_INT 0
68453: PUSH
68454: EMPTY
68455: LIST
68456: LIST
68457: LIST
68458: LIST
68459: ST_TO_ADDR
// exit ;
68460: GO 70995
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
68462: LD_EXP 71
68466: PUSH
68467: LD_EXP 70
68471: PUSH
68472: LD_VAR 0 1
68476: ARRAY
68477: ARRAY
68478: PUSH
68479: LD_EXP 44
68483: PUSH
68484: LD_VAR 0 1
68488: ARRAY
68489: PPUSH
68490: LD_INT 2
68492: PUSH
68493: LD_INT 30
68495: PUSH
68496: LD_INT 6
68498: PUSH
68499: EMPTY
68500: LIST
68501: LIST
68502: PUSH
68503: LD_INT 30
68505: PUSH
68506: LD_INT 7
68508: PUSH
68509: EMPTY
68510: LIST
68511: LIST
68512: PUSH
68513: LD_INT 30
68515: PUSH
68516: LD_INT 8
68518: PUSH
68519: EMPTY
68520: LIST
68521: LIST
68522: PUSH
68523: EMPTY
68524: LIST
68525: LIST
68526: LIST
68527: LIST
68528: PPUSH
68529: CALL_OW 72
68533: AND
68534: PUSH
68535: LD_EXP 44
68539: PUSH
68540: LD_VAR 0 1
68544: ARRAY
68545: PPUSH
68546: LD_INT 30
68548: PUSH
68549: LD_INT 3
68551: PUSH
68552: EMPTY
68553: LIST
68554: LIST
68555: PPUSH
68556: CALL_OW 72
68560: NOT
68561: AND
68562: IFFALSE 68776
// begin if sci >= 6 then
68564: LD_VAR 0 8
68568: PUSH
68569: LD_INT 6
68571: GREATEREQUAL
68572: IFFALSE 68576
// exit ;
68574: GO 70995
// mc_class_case_use := Replace ( mc_class_case_use , base , 2 ) ;
68576: LD_ADDR_EXP 86
68580: PUSH
68581: LD_EXP 86
68585: PPUSH
68586: LD_VAR 0 1
68590: PPUSH
68591: LD_INT 2
68593: PPUSH
68594: CALL_OW 1
68598: ST_TO_ADDR
// sort := SortBySkill ( tmp diff sci , 4 ) ;
68599: LD_ADDR_VAR 0 9
68603: PUSH
68604: LD_VAR 0 4
68608: PUSH
68609: LD_VAR 0 8
68613: DIFF
68614: PPUSH
68615: LD_INT 4
68617: PPUSH
68618: CALL 60970 0 2
68622: ST_TO_ADDR
// p := [ ] ;
68623: LD_ADDR_VAR 0 11
68627: PUSH
68628: EMPTY
68629: ST_TO_ADDR
// if sci < 6 and sort > 6 then
68630: LD_VAR 0 8
68634: PUSH
68635: LD_INT 6
68637: LESS
68638: PUSH
68639: LD_VAR 0 9
68643: PUSH
68644: LD_INT 6
68646: GREATER
68647: AND
68648: IFFALSE 68729
// begin for i = 1 to 6 - sci do
68650: LD_ADDR_VAR 0 3
68654: PUSH
68655: DOUBLE
68656: LD_INT 1
68658: DEC
68659: ST_TO_ADDR
68660: LD_INT 6
68662: PUSH
68663: LD_VAR 0 8
68667: MINUS
68668: PUSH
68669: FOR_TO
68670: IFFALSE 68725
// begin p := Insert ( p , p + 1 , sort [ 1 ] ) ;
68672: LD_ADDR_VAR 0 11
68676: PUSH
68677: LD_VAR 0 11
68681: PPUSH
68682: LD_VAR 0 11
68686: PUSH
68687: LD_INT 1
68689: PLUS
68690: PPUSH
68691: LD_VAR 0 9
68695: PUSH
68696: LD_INT 1
68698: ARRAY
68699: PPUSH
68700: CALL_OW 2
68704: ST_TO_ADDR
// sort := Delete ( sort , 1 ) ;
68705: LD_ADDR_VAR 0 9
68709: PUSH
68710: LD_VAR 0 9
68714: PPUSH
68715: LD_INT 1
68717: PPUSH
68718: CALL_OW 3
68722: ST_TO_ADDR
// end ;
68723: GO 68669
68725: POP
68726: POP
// end else
68727: GO 68749
// if sort then
68729: LD_VAR 0 9
68733: IFFALSE 68749
// p := sort [ 1 ] ;
68735: LD_ADDR_VAR 0 11
68739: PUSH
68740: LD_VAR 0 9
68744: PUSH
68745: LD_INT 1
68747: ARRAY
68748: ST_TO_ADDR
// result := [ 0 , 0 , 0 , p ] ;
68749: LD_ADDR_VAR 0 2
68753: PUSH
68754: LD_INT 0
68756: PUSH
68757: LD_INT 0
68759: PUSH
68760: LD_INT 0
68762: PUSH
68763: LD_VAR 0 11
68767: PUSH
68768: EMPTY
68769: LIST
68770: LIST
68771: LIST
68772: LIST
68773: ST_TO_ADDR
// exit ;
68774: GO 70995
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
68776: LD_EXP 71
68780: PUSH
68781: LD_EXP 70
68785: PUSH
68786: LD_VAR 0 1
68790: ARRAY
68791: ARRAY
68792: PUSH
68793: LD_EXP 44
68797: PUSH
68798: LD_VAR 0 1
68802: ARRAY
68803: PPUSH
68804: LD_INT 2
68806: PUSH
68807: LD_INT 30
68809: PUSH
68810: LD_INT 6
68812: PUSH
68813: EMPTY
68814: LIST
68815: LIST
68816: PUSH
68817: LD_INT 30
68819: PUSH
68820: LD_INT 7
68822: PUSH
68823: EMPTY
68824: LIST
68825: LIST
68826: PUSH
68827: LD_INT 30
68829: PUSH
68830: LD_INT 8
68832: PUSH
68833: EMPTY
68834: LIST
68835: LIST
68836: PUSH
68837: EMPTY
68838: LIST
68839: LIST
68840: LIST
68841: LIST
68842: PPUSH
68843: CALL_OW 72
68847: AND
68848: PUSH
68849: LD_EXP 44
68853: PUSH
68854: LD_VAR 0 1
68858: ARRAY
68859: PPUSH
68860: LD_INT 30
68862: PUSH
68863: LD_INT 3
68865: PUSH
68866: EMPTY
68867: LIST
68868: LIST
68869: PPUSH
68870: CALL_OW 72
68874: AND
68875: IFFALSE 69609
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 3 ) ;
68877: LD_ADDR_EXP 86
68881: PUSH
68882: LD_EXP 86
68886: PPUSH
68887: LD_VAR 0 1
68891: PPUSH
68892: LD_INT 3
68894: PPUSH
68895: CALL_OW 1
68899: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
68900: LD_ADDR_VAR 0 2
68904: PUSH
68905: LD_INT 0
68907: PUSH
68908: LD_INT 0
68910: PUSH
68911: LD_INT 0
68913: PUSH
68914: LD_INT 0
68916: PUSH
68917: EMPTY
68918: LIST
68919: LIST
68920: LIST
68921: LIST
68922: ST_TO_ADDR
// if not eng then
68923: LD_VAR 0 6
68927: NOT
68928: IFFALSE 68991
// begin p := SortBySkill ( tmp , 2 ) [ 1 ] ;
68930: LD_ADDR_VAR 0 11
68934: PUSH
68935: LD_VAR 0 4
68939: PPUSH
68940: LD_INT 2
68942: PPUSH
68943: CALL 60970 0 2
68947: PUSH
68948: LD_INT 1
68950: ARRAY
68951: ST_TO_ADDR
// result := Replace ( result , 2 , p ) ;
68952: LD_ADDR_VAR 0 2
68956: PUSH
68957: LD_VAR 0 2
68961: PPUSH
68962: LD_INT 2
68964: PPUSH
68965: LD_VAR 0 11
68969: PPUSH
68970: CALL_OW 1
68974: ST_TO_ADDR
// tmp := tmp diff p ;
68975: LD_ADDR_VAR 0 4
68979: PUSH
68980: LD_VAR 0 4
68984: PUSH
68985: LD_VAR 0 11
68989: DIFF
68990: ST_TO_ADDR
// end ; if tmp and sci < 6 then
68991: LD_VAR 0 4
68995: PUSH
68996: LD_VAR 0 8
69000: PUSH
69001: LD_INT 6
69003: LESS
69004: AND
69005: IFFALSE 69193
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 4 ) ;
69007: LD_ADDR_VAR 0 9
69011: PUSH
69012: LD_VAR 0 4
69016: PUSH
69017: LD_VAR 0 8
69021: PUSH
69022: LD_VAR 0 7
69026: UNION
69027: DIFF
69028: PPUSH
69029: LD_INT 4
69031: PPUSH
69032: CALL 60970 0 2
69036: ST_TO_ADDR
// p := [ ] ;
69037: LD_ADDR_VAR 0 11
69041: PUSH
69042: EMPTY
69043: ST_TO_ADDR
// if sort then
69044: LD_VAR 0 9
69048: IFFALSE 69164
// for i = 1 to 6 - sci do
69050: LD_ADDR_VAR 0 3
69054: PUSH
69055: DOUBLE
69056: LD_INT 1
69058: DEC
69059: ST_TO_ADDR
69060: LD_INT 6
69062: PUSH
69063: LD_VAR 0 8
69067: MINUS
69068: PUSH
69069: FOR_TO
69070: IFFALSE 69162
// begin if i = sort then
69072: LD_VAR 0 3
69076: PUSH
69077: LD_VAR 0 9
69081: EQUAL
69082: IFFALSE 69086
// break ;
69084: GO 69162
// if GetClass ( i ) = 4 then
69086: LD_VAR 0 3
69090: PPUSH
69091: CALL_OW 257
69095: PUSH
69096: LD_INT 4
69098: EQUAL
69099: IFFALSE 69103
// continue ;
69101: GO 69069
// p := Insert ( p , p + 1 , sort [ i ] ) ;
69103: LD_ADDR_VAR 0 11
69107: PUSH
69108: LD_VAR 0 11
69112: PPUSH
69113: LD_VAR 0 11
69117: PUSH
69118: LD_INT 1
69120: PLUS
69121: PPUSH
69122: LD_VAR 0 9
69126: PUSH
69127: LD_VAR 0 3
69131: ARRAY
69132: PPUSH
69133: CALL_OW 2
69137: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
69138: LD_ADDR_VAR 0 4
69142: PUSH
69143: LD_VAR 0 4
69147: PUSH
69148: LD_VAR 0 9
69152: PUSH
69153: LD_VAR 0 3
69157: ARRAY
69158: DIFF
69159: ST_TO_ADDR
// end ;
69160: GO 69069
69162: POP
69163: POP
// if p then
69164: LD_VAR 0 11
69168: IFFALSE 69193
// result := Replace ( result , 4 , p ) ;
69170: LD_ADDR_VAR 0 2
69174: PUSH
69175: LD_VAR 0 2
69179: PPUSH
69180: LD_INT 4
69182: PPUSH
69183: LD_VAR 0 11
69187: PPUSH
69188: CALL_OW 1
69192: ST_TO_ADDR
// end ; if tmp and mech < 6 then
69193: LD_VAR 0 4
69197: PUSH
69198: LD_VAR 0 7
69202: PUSH
69203: LD_INT 6
69205: LESS
69206: AND
69207: IFFALSE 69395
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
69209: LD_ADDR_VAR 0 9
69213: PUSH
69214: LD_VAR 0 4
69218: PUSH
69219: LD_VAR 0 8
69223: PUSH
69224: LD_VAR 0 7
69228: UNION
69229: DIFF
69230: PPUSH
69231: LD_INT 3
69233: PPUSH
69234: CALL 60970 0 2
69238: ST_TO_ADDR
// p := [ ] ;
69239: LD_ADDR_VAR 0 11
69243: PUSH
69244: EMPTY
69245: ST_TO_ADDR
// if sort then
69246: LD_VAR 0 9
69250: IFFALSE 69366
// for i = 1 to 6 - mech do
69252: LD_ADDR_VAR 0 3
69256: PUSH
69257: DOUBLE
69258: LD_INT 1
69260: DEC
69261: ST_TO_ADDR
69262: LD_INT 6
69264: PUSH
69265: LD_VAR 0 7
69269: MINUS
69270: PUSH
69271: FOR_TO
69272: IFFALSE 69364
// begin if i = sort then
69274: LD_VAR 0 3
69278: PUSH
69279: LD_VAR 0 9
69283: EQUAL
69284: IFFALSE 69288
// break ;
69286: GO 69364
// if GetClass ( i ) = 3 then
69288: LD_VAR 0 3
69292: PPUSH
69293: CALL_OW 257
69297: PUSH
69298: LD_INT 3
69300: EQUAL
69301: IFFALSE 69305
// continue ;
69303: GO 69271
// p := Insert ( p , p + 1 , sort [ i ] ) ;
69305: LD_ADDR_VAR 0 11
69309: PUSH
69310: LD_VAR 0 11
69314: PPUSH
69315: LD_VAR 0 11
69319: PUSH
69320: LD_INT 1
69322: PLUS
69323: PPUSH
69324: LD_VAR 0 9
69328: PUSH
69329: LD_VAR 0 3
69333: ARRAY
69334: PPUSH
69335: CALL_OW 2
69339: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
69340: LD_ADDR_VAR 0 4
69344: PUSH
69345: LD_VAR 0 4
69349: PUSH
69350: LD_VAR 0 9
69354: PUSH
69355: LD_VAR 0 3
69359: ARRAY
69360: DIFF
69361: ST_TO_ADDR
// end ;
69362: GO 69271
69364: POP
69365: POP
// if p then
69366: LD_VAR 0 11
69370: IFFALSE 69395
// result := Replace ( result , 3 , p ) ;
69372: LD_ADDR_VAR 0 2
69376: PUSH
69377: LD_VAR 0 2
69381: PPUSH
69382: LD_INT 3
69384: PPUSH
69385: LD_VAR 0 11
69389: PPUSH
69390: CALL_OW 1
69394: ST_TO_ADDR
// end ; if tmp > 6 and eng < 6 then
69395: LD_VAR 0 4
69399: PUSH
69400: LD_INT 6
69402: GREATER
69403: PUSH
69404: LD_VAR 0 6
69408: PUSH
69409: LD_INT 6
69411: LESS
69412: AND
69413: IFFALSE 69607
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
69415: LD_ADDR_VAR 0 9
69419: PUSH
69420: LD_VAR 0 4
69424: PUSH
69425: LD_VAR 0 8
69429: PUSH
69430: LD_VAR 0 7
69434: UNION
69435: PUSH
69436: LD_VAR 0 6
69440: UNION
69441: DIFF
69442: PPUSH
69443: LD_INT 2
69445: PPUSH
69446: CALL 60970 0 2
69450: ST_TO_ADDR
// p := [ ] ;
69451: LD_ADDR_VAR 0 11
69455: PUSH
69456: EMPTY
69457: ST_TO_ADDR
// if sort then
69458: LD_VAR 0 9
69462: IFFALSE 69578
// for i = 1 to 6 - eng do
69464: LD_ADDR_VAR 0 3
69468: PUSH
69469: DOUBLE
69470: LD_INT 1
69472: DEC
69473: ST_TO_ADDR
69474: LD_INT 6
69476: PUSH
69477: LD_VAR 0 6
69481: MINUS
69482: PUSH
69483: FOR_TO
69484: IFFALSE 69576
// begin if i = sort then
69486: LD_VAR 0 3
69490: PUSH
69491: LD_VAR 0 9
69495: EQUAL
69496: IFFALSE 69500
// break ;
69498: GO 69576
// if GetClass ( i ) = 2 then
69500: LD_VAR 0 3
69504: PPUSH
69505: CALL_OW 257
69509: PUSH
69510: LD_INT 2
69512: EQUAL
69513: IFFALSE 69517
// continue ;
69515: GO 69483
// p := Insert ( p , p + 1 , sort [ i ] ) ;
69517: LD_ADDR_VAR 0 11
69521: PUSH
69522: LD_VAR 0 11
69526: PPUSH
69527: LD_VAR 0 11
69531: PUSH
69532: LD_INT 1
69534: PLUS
69535: PPUSH
69536: LD_VAR 0 9
69540: PUSH
69541: LD_VAR 0 3
69545: ARRAY
69546: PPUSH
69547: CALL_OW 2
69551: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
69552: LD_ADDR_VAR 0 4
69556: PUSH
69557: LD_VAR 0 4
69561: PUSH
69562: LD_VAR 0 9
69566: PUSH
69567: LD_VAR 0 3
69571: ARRAY
69572: DIFF
69573: ST_TO_ADDR
// end ;
69574: GO 69483
69576: POP
69577: POP
// if p then
69578: LD_VAR 0 11
69582: IFFALSE 69607
// result := Replace ( result , 2 , p ) ;
69584: LD_ADDR_VAR 0 2
69588: PUSH
69589: LD_VAR 0 2
69593: PPUSH
69594: LD_INT 2
69596: PPUSH
69597: LD_VAR 0 11
69601: PPUSH
69602: CALL_OW 1
69606: ST_TO_ADDR
// end ; exit ;
69607: GO 70995
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and mc_build_list [ base ] then
69609: LD_EXP 71
69613: PUSH
69614: LD_EXP 70
69618: PUSH
69619: LD_VAR 0 1
69623: ARRAY
69624: ARRAY
69625: NOT
69626: PUSH
69627: LD_EXP 44
69631: PUSH
69632: LD_VAR 0 1
69636: ARRAY
69637: PPUSH
69638: LD_INT 30
69640: PUSH
69641: LD_INT 3
69643: PUSH
69644: EMPTY
69645: LIST
69646: LIST
69647: PPUSH
69648: CALL_OW 72
69652: AND
69653: PUSH
69654: LD_EXP 49
69658: PUSH
69659: LD_VAR 0 1
69663: ARRAY
69664: AND
69665: IFFALSE 70273
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 5 ) ;
69667: LD_ADDR_EXP 86
69671: PUSH
69672: LD_EXP 86
69676: PPUSH
69677: LD_VAR 0 1
69681: PPUSH
69682: LD_INT 5
69684: PPUSH
69685: CALL_OW 1
69689: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
69690: LD_ADDR_VAR 0 2
69694: PUSH
69695: LD_INT 0
69697: PUSH
69698: LD_INT 0
69700: PUSH
69701: LD_INT 0
69703: PUSH
69704: LD_INT 0
69706: PUSH
69707: EMPTY
69708: LIST
69709: LIST
69710: LIST
69711: LIST
69712: ST_TO_ADDR
// if sci > 1 then
69713: LD_VAR 0 8
69717: PUSH
69718: LD_INT 1
69720: GREATER
69721: IFFALSE 69749
// tmp := tmp diff ( sci diff sci [ 1 ] ) ;
69723: LD_ADDR_VAR 0 4
69727: PUSH
69728: LD_VAR 0 4
69732: PUSH
69733: LD_VAR 0 8
69737: PUSH
69738: LD_VAR 0 8
69742: PUSH
69743: LD_INT 1
69745: ARRAY
69746: DIFF
69747: DIFF
69748: ST_TO_ADDR
// if tmp and not sci then
69749: LD_VAR 0 4
69753: PUSH
69754: LD_VAR 0 8
69758: NOT
69759: AND
69760: IFFALSE 69829
// begin sort := SortBySkill ( tmp , 4 ) ;
69762: LD_ADDR_VAR 0 9
69766: PUSH
69767: LD_VAR 0 4
69771: PPUSH
69772: LD_INT 4
69774: PPUSH
69775: CALL 60970 0 2
69779: ST_TO_ADDR
// if sort then
69780: LD_VAR 0 9
69784: IFFALSE 69800
// p := sort [ 1 ] ;
69786: LD_ADDR_VAR 0 11
69790: PUSH
69791: LD_VAR 0 9
69795: PUSH
69796: LD_INT 1
69798: ARRAY
69799: ST_TO_ADDR
// if p then
69800: LD_VAR 0 11
69804: IFFALSE 69829
// result := Replace ( result , 4 , p ) ;
69806: LD_ADDR_VAR 0 2
69810: PUSH
69811: LD_VAR 0 2
69815: PPUSH
69816: LD_INT 4
69818: PPUSH
69819: LD_VAR 0 11
69823: PPUSH
69824: CALL_OW 1
69828: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
69829: LD_ADDR_VAR 0 4
69833: PUSH
69834: LD_VAR 0 4
69838: PUSH
69839: LD_VAR 0 7
69843: DIFF
69844: ST_TO_ADDR
// if tmp and mech < 6 then
69845: LD_VAR 0 4
69849: PUSH
69850: LD_VAR 0 7
69854: PUSH
69855: LD_INT 6
69857: LESS
69858: AND
69859: IFFALSE 70047
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
69861: LD_ADDR_VAR 0 9
69865: PUSH
69866: LD_VAR 0 4
69870: PUSH
69871: LD_VAR 0 8
69875: PUSH
69876: LD_VAR 0 7
69880: UNION
69881: DIFF
69882: PPUSH
69883: LD_INT 3
69885: PPUSH
69886: CALL 60970 0 2
69890: ST_TO_ADDR
// p := [ ] ;
69891: LD_ADDR_VAR 0 11
69895: PUSH
69896: EMPTY
69897: ST_TO_ADDR
// if sort then
69898: LD_VAR 0 9
69902: IFFALSE 70018
// for i = 1 to 6 - mech do
69904: LD_ADDR_VAR 0 3
69908: PUSH
69909: DOUBLE
69910: LD_INT 1
69912: DEC
69913: ST_TO_ADDR
69914: LD_INT 6
69916: PUSH
69917: LD_VAR 0 7
69921: MINUS
69922: PUSH
69923: FOR_TO
69924: IFFALSE 70016
// begin if i = sort then
69926: LD_VAR 0 3
69930: PUSH
69931: LD_VAR 0 9
69935: EQUAL
69936: IFFALSE 69940
// break ;
69938: GO 70016
// if GetClass ( i ) = 3 then
69940: LD_VAR 0 3
69944: PPUSH
69945: CALL_OW 257
69949: PUSH
69950: LD_INT 3
69952: EQUAL
69953: IFFALSE 69957
// continue ;
69955: GO 69923
// p := Insert ( p , p + 1 , sort [ i ] ) ;
69957: LD_ADDR_VAR 0 11
69961: PUSH
69962: LD_VAR 0 11
69966: PPUSH
69967: LD_VAR 0 11
69971: PUSH
69972: LD_INT 1
69974: PLUS
69975: PPUSH
69976: LD_VAR 0 9
69980: PUSH
69981: LD_VAR 0 3
69985: ARRAY
69986: PPUSH
69987: CALL_OW 2
69991: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
69992: LD_ADDR_VAR 0 4
69996: PUSH
69997: LD_VAR 0 4
70001: PUSH
70002: LD_VAR 0 9
70006: PUSH
70007: LD_VAR 0 3
70011: ARRAY
70012: DIFF
70013: ST_TO_ADDR
// end ;
70014: GO 69923
70016: POP
70017: POP
// if p then
70018: LD_VAR 0 11
70022: IFFALSE 70047
// result := Replace ( result , 3 , p ) ;
70024: LD_ADDR_VAR 0 2
70028: PUSH
70029: LD_VAR 0 2
70033: PPUSH
70034: LD_INT 3
70036: PPUSH
70037: LD_VAR 0 11
70041: PPUSH
70042: CALL_OW 1
70046: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
70047: LD_ADDR_VAR 0 4
70051: PUSH
70052: LD_VAR 0 4
70056: PUSH
70057: LD_VAR 0 6
70061: DIFF
70062: ST_TO_ADDR
// if tmp and eng < 6 then
70063: LD_VAR 0 4
70067: PUSH
70068: LD_VAR 0 6
70072: PUSH
70073: LD_INT 6
70075: LESS
70076: AND
70077: IFFALSE 70271
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
70079: LD_ADDR_VAR 0 9
70083: PUSH
70084: LD_VAR 0 4
70088: PUSH
70089: LD_VAR 0 8
70093: PUSH
70094: LD_VAR 0 7
70098: UNION
70099: PUSH
70100: LD_VAR 0 6
70104: UNION
70105: DIFF
70106: PPUSH
70107: LD_INT 2
70109: PPUSH
70110: CALL 60970 0 2
70114: ST_TO_ADDR
// p := [ ] ;
70115: LD_ADDR_VAR 0 11
70119: PUSH
70120: EMPTY
70121: ST_TO_ADDR
// if sort then
70122: LD_VAR 0 9
70126: IFFALSE 70242
// for i = 1 to 6 - eng do
70128: LD_ADDR_VAR 0 3
70132: PUSH
70133: DOUBLE
70134: LD_INT 1
70136: DEC
70137: ST_TO_ADDR
70138: LD_INT 6
70140: PUSH
70141: LD_VAR 0 6
70145: MINUS
70146: PUSH
70147: FOR_TO
70148: IFFALSE 70240
// begin if i = sort then
70150: LD_VAR 0 3
70154: PUSH
70155: LD_VAR 0 9
70159: EQUAL
70160: IFFALSE 70164
// break ;
70162: GO 70240
// if GetClass ( i ) = 2 then
70164: LD_VAR 0 3
70168: PPUSH
70169: CALL_OW 257
70173: PUSH
70174: LD_INT 2
70176: EQUAL
70177: IFFALSE 70181
// continue ;
70179: GO 70147
// p := Insert ( p , p + 1 , sort [ i ] ) ;
70181: LD_ADDR_VAR 0 11
70185: PUSH
70186: LD_VAR 0 11
70190: PPUSH
70191: LD_VAR 0 11
70195: PUSH
70196: LD_INT 1
70198: PLUS
70199: PPUSH
70200: LD_VAR 0 9
70204: PUSH
70205: LD_VAR 0 3
70209: ARRAY
70210: PPUSH
70211: CALL_OW 2
70215: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
70216: LD_ADDR_VAR 0 4
70220: PUSH
70221: LD_VAR 0 4
70225: PUSH
70226: LD_VAR 0 9
70230: PUSH
70231: LD_VAR 0 3
70235: ARRAY
70236: DIFF
70237: ST_TO_ADDR
// end ;
70238: GO 70147
70240: POP
70241: POP
// if p then
70242: LD_VAR 0 11
70246: IFFALSE 70271
// result := Replace ( result , 2 , p ) ;
70248: LD_ADDR_VAR 0 2
70252: PUSH
70253: LD_VAR 0 2
70257: PPUSH
70258: LD_INT 2
70260: PPUSH
70261: LD_VAR 0 11
70265: PPUSH
70266: CALL_OW 1
70270: ST_TO_ADDR
// end ; exit ;
70271: GO 70995
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and not mc_build_list [ base ] then
70273: LD_EXP 71
70277: PUSH
70278: LD_EXP 70
70282: PUSH
70283: LD_VAR 0 1
70287: ARRAY
70288: ARRAY
70289: NOT
70290: PUSH
70291: LD_EXP 44
70295: PUSH
70296: LD_VAR 0 1
70300: ARRAY
70301: PPUSH
70302: LD_INT 30
70304: PUSH
70305: LD_INT 3
70307: PUSH
70308: EMPTY
70309: LIST
70310: LIST
70311: PPUSH
70312: CALL_OW 72
70316: AND
70317: PUSH
70318: LD_EXP 49
70322: PUSH
70323: LD_VAR 0 1
70327: ARRAY
70328: NOT
70329: AND
70330: IFFALSE 70995
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 6 ) ;
70332: LD_ADDR_EXP 86
70336: PUSH
70337: LD_EXP 86
70341: PPUSH
70342: LD_VAR 0 1
70346: PPUSH
70347: LD_INT 6
70349: PPUSH
70350: CALL_OW 1
70354: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
70355: LD_ADDR_VAR 0 2
70359: PUSH
70360: LD_INT 0
70362: PUSH
70363: LD_INT 0
70365: PUSH
70366: LD_INT 0
70368: PUSH
70369: LD_INT 0
70371: PUSH
70372: EMPTY
70373: LIST
70374: LIST
70375: LIST
70376: LIST
70377: ST_TO_ADDR
// if sci >= 1 then
70378: LD_VAR 0 8
70382: PUSH
70383: LD_INT 1
70385: GREATEREQUAL
70386: IFFALSE 70408
// tmp := tmp diff sci [ 1 ] ;
70388: LD_ADDR_VAR 0 4
70392: PUSH
70393: LD_VAR 0 4
70397: PUSH
70398: LD_VAR 0 8
70402: PUSH
70403: LD_INT 1
70405: ARRAY
70406: DIFF
70407: ST_TO_ADDR
// if tmp and not sci then
70408: LD_VAR 0 4
70412: PUSH
70413: LD_VAR 0 8
70417: NOT
70418: AND
70419: IFFALSE 70488
// begin sort := SortBySkill ( tmp , 4 ) ;
70421: LD_ADDR_VAR 0 9
70425: PUSH
70426: LD_VAR 0 4
70430: PPUSH
70431: LD_INT 4
70433: PPUSH
70434: CALL 60970 0 2
70438: ST_TO_ADDR
// if sort then
70439: LD_VAR 0 9
70443: IFFALSE 70459
// p := sort [ 1 ] ;
70445: LD_ADDR_VAR 0 11
70449: PUSH
70450: LD_VAR 0 9
70454: PUSH
70455: LD_INT 1
70457: ARRAY
70458: ST_TO_ADDR
// if p then
70459: LD_VAR 0 11
70463: IFFALSE 70488
// result := Replace ( result , 4 , p ) ;
70465: LD_ADDR_VAR 0 2
70469: PUSH
70470: LD_VAR 0 2
70474: PPUSH
70475: LD_INT 4
70477: PPUSH
70478: LD_VAR 0 11
70482: PPUSH
70483: CALL_OW 1
70487: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
70488: LD_ADDR_VAR 0 4
70492: PUSH
70493: LD_VAR 0 4
70497: PUSH
70498: LD_VAR 0 7
70502: DIFF
70503: ST_TO_ADDR
// if tmp and mech < 6 then
70504: LD_VAR 0 4
70508: PUSH
70509: LD_VAR 0 7
70513: PUSH
70514: LD_INT 6
70516: LESS
70517: AND
70518: IFFALSE 70700
// begin sort := SortBySkill ( tmp diff mech , 3 ) ;
70520: LD_ADDR_VAR 0 9
70524: PUSH
70525: LD_VAR 0 4
70529: PUSH
70530: LD_VAR 0 7
70534: DIFF
70535: PPUSH
70536: LD_INT 3
70538: PPUSH
70539: CALL 60970 0 2
70543: ST_TO_ADDR
// p := [ ] ;
70544: LD_ADDR_VAR 0 11
70548: PUSH
70549: EMPTY
70550: ST_TO_ADDR
// if sort then
70551: LD_VAR 0 9
70555: IFFALSE 70671
// for i = 1 to 6 - mech do
70557: LD_ADDR_VAR 0 3
70561: PUSH
70562: DOUBLE
70563: LD_INT 1
70565: DEC
70566: ST_TO_ADDR
70567: LD_INT 6
70569: PUSH
70570: LD_VAR 0 7
70574: MINUS
70575: PUSH
70576: FOR_TO
70577: IFFALSE 70669
// begin if i = sort then
70579: LD_VAR 0 3
70583: PUSH
70584: LD_VAR 0 9
70588: EQUAL
70589: IFFALSE 70593
// break ;
70591: GO 70669
// if GetClass ( i ) = 3 then
70593: LD_VAR 0 3
70597: PPUSH
70598: CALL_OW 257
70602: PUSH
70603: LD_INT 3
70605: EQUAL
70606: IFFALSE 70610
// continue ;
70608: GO 70576
// p := Insert ( p , p + 1 , sort [ i ] ) ;
70610: LD_ADDR_VAR 0 11
70614: PUSH
70615: LD_VAR 0 11
70619: PPUSH
70620: LD_VAR 0 11
70624: PUSH
70625: LD_INT 1
70627: PLUS
70628: PPUSH
70629: LD_VAR 0 9
70633: PUSH
70634: LD_VAR 0 3
70638: ARRAY
70639: PPUSH
70640: CALL_OW 2
70644: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
70645: LD_ADDR_VAR 0 4
70649: PUSH
70650: LD_VAR 0 4
70654: PUSH
70655: LD_VAR 0 9
70659: PUSH
70660: LD_VAR 0 3
70664: ARRAY
70665: DIFF
70666: ST_TO_ADDR
// end ;
70667: GO 70576
70669: POP
70670: POP
// if p then
70671: LD_VAR 0 11
70675: IFFALSE 70700
// result := Replace ( result , 3 , p ) ;
70677: LD_ADDR_VAR 0 2
70681: PUSH
70682: LD_VAR 0 2
70686: PPUSH
70687: LD_INT 3
70689: PPUSH
70690: LD_VAR 0 11
70694: PPUSH
70695: CALL_OW 1
70699: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
70700: LD_ADDR_VAR 0 4
70704: PUSH
70705: LD_VAR 0 4
70709: PUSH
70710: LD_VAR 0 6
70714: DIFF
70715: ST_TO_ADDR
// if tmp and eng < 4 then
70716: LD_VAR 0 4
70720: PUSH
70721: LD_VAR 0 6
70725: PUSH
70726: LD_INT 4
70728: LESS
70729: AND
70730: IFFALSE 70920
// begin sort := SortBySkill ( tmp diff ( mech union eng ) , 2 ) ;
70732: LD_ADDR_VAR 0 9
70736: PUSH
70737: LD_VAR 0 4
70741: PUSH
70742: LD_VAR 0 7
70746: PUSH
70747: LD_VAR 0 6
70751: UNION
70752: DIFF
70753: PPUSH
70754: LD_INT 2
70756: PPUSH
70757: CALL 60970 0 2
70761: ST_TO_ADDR
// p := [ ] ;
70762: LD_ADDR_VAR 0 11
70766: PUSH
70767: EMPTY
70768: ST_TO_ADDR
// if sort then
70769: LD_VAR 0 9
70773: IFFALSE 70889
// for i = 1 to 4 - eng do
70775: LD_ADDR_VAR 0 3
70779: PUSH
70780: DOUBLE
70781: LD_INT 1
70783: DEC
70784: ST_TO_ADDR
70785: LD_INT 4
70787: PUSH
70788: LD_VAR 0 6
70792: MINUS
70793: PUSH
70794: FOR_TO
70795: IFFALSE 70887
// begin if i = sort then
70797: LD_VAR 0 3
70801: PUSH
70802: LD_VAR 0 9
70806: EQUAL
70807: IFFALSE 70811
// break ;
70809: GO 70887
// if GetClass ( i ) = 2 then
70811: LD_VAR 0 3
70815: PPUSH
70816: CALL_OW 257
70820: PUSH
70821: LD_INT 2
70823: EQUAL
70824: IFFALSE 70828
// continue ;
70826: GO 70794
// p := Insert ( p , p + 1 , sort [ i ] ) ;
70828: LD_ADDR_VAR 0 11
70832: PUSH
70833: LD_VAR 0 11
70837: PPUSH
70838: LD_VAR 0 11
70842: PUSH
70843: LD_INT 1
70845: PLUS
70846: PPUSH
70847: LD_VAR 0 9
70851: PUSH
70852: LD_VAR 0 3
70856: ARRAY
70857: PPUSH
70858: CALL_OW 2
70862: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
70863: LD_ADDR_VAR 0 4
70867: PUSH
70868: LD_VAR 0 4
70872: PUSH
70873: LD_VAR 0 9
70877: PUSH
70878: LD_VAR 0 3
70882: ARRAY
70883: DIFF
70884: ST_TO_ADDR
// end ;
70885: GO 70794
70887: POP
70888: POP
// if p then
70889: LD_VAR 0 11
70893: IFFALSE 70918
// result := Replace ( result , 2 , p ) ;
70895: LD_ADDR_VAR 0 2
70899: PUSH
70900: LD_VAR 0 2
70904: PPUSH
70905: LD_INT 2
70907: PPUSH
70908: LD_VAR 0 11
70912: PPUSH
70913: CALL_OW 1
70917: ST_TO_ADDR
// end else
70918: GO 70964
// for i = eng downto 5 do
70920: LD_ADDR_VAR 0 3
70924: PUSH
70925: DOUBLE
70926: LD_VAR 0 6
70930: INC
70931: ST_TO_ADDR
70932: LD_INT 5
70934: PUSH
70935: FOR_DOWNTO
70936: IFFALSE 70962
// tmp := tmp union eng [ i ] ;
70938: LD_ADDR_VAR 0 4
70942: PUSH
70943: LD_VAR 0 4
70947: PUSH
70948: LD_VAR 0 6
70952: PUSH
70953: LD_VAR 0 3
70957: ARRAY
70958: UNION
70959: ST_TO_ADDR
70960: GO 70935
70962: POP
70963: POP
// result := Replace ( result , 1 , tmp diff sol ) ;
70964: LD_ADDR_VAR 0 2
70968: PUSH
70969: LD_VAR 0 2
70973: PPUSH
70974: LD_INT 1
70976: PPUSH
70977: LD_VAR 0 4
70981: PUSH
70982: LD_VAR 0 5
70986: DIFF
70987: PPUSH
70988: CALL_OW 1
70992: ST_TO_ADDR
// exit ;
70993: GO 70995
// end ; end ;
70995: LD_VAR 0 2
70999: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
71000: LD_INT 0
71002: PPUSH
71003: PPUSH
71004: PPUSH
// if not mc_bases then
71005: LD_EXP 44
71009: NOT
71010: IFFALSE 71014
// exit ;
71012: GO 71120
// for i = 1 to mc_bases do
71014: LD_ADDR_VAR 0 2
71018: PUSH
71019: DOUBLE
71020: LD_INT 1
71022: DEC
71023: ST_TO_ADDR
71024: LD_EXP 44
71028: PUSH
71029: FOR_TO
71030: IFFALSE 71111
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
71032: LD_ADDR_VAR 0 3
71036: PUSH
71037: LD_EXP 44
71041: PUSH
71042: LD_VAR 0 2
71046: ARRAY
71047: PPUSH
71048: LD_INT 21
71050: PUSH
71051: LD_INT 3
71053: PUSH
71054: EMPTY
71055: LIST
71056: LIST
71057: PUSH
71058: LD_INT 3
71060: PUSH
71061: LD_INT 24
71063: PUSH
71064: LD_INT 1000
71066: PUSH
71067: EMPTY
71068: LIST
71069: LIST
71070: PUSH
71071: EMPTY
71072: LIST
71073: LIST
71074: PUSH
71075: EMPTY
71076: LIST
71077: LIST
71078: PPUSH
71079: CALL_OW 72
71083: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
71084: LD_ADDR_EXP 45
71088: PUSH
71089: LD_EXP 45
71093: PPUSH
71094: LD_VAR 0 2
71098: PPUSH
71099: LD_VAR 0 3
71103: PPUSH
71104: CALL_OW 1
71108: ST_TO_ADDR
// end ;
71109: GO 71029
71111: POP
71112: POP
// RaiseSailEvent ( 101 ) ;
71113: LD_INT 101
71115: PPUSH
71116: CALL_OW 427
// end ;
71120: LD_VAR 0 1
71124: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
71125: LD_INT 0
71127: PPUSH
71128: PPUSH
71129: PPUSH
71130: PPUSH
71131: PPUSH
71132: PPUSH
71133: PPUSH
// if not mc_bases then
71134: LD_EXP 44
71138: NOT
71139: IFFALSE 71143
// exit ;
71141: GO 71716
// for i = 1 to mc_bases do
71143: LD_ADDR_VAR 0 2
71147: PUSH
71148: DOUBLE
71149: LD_INT 1
71151: DEC
71152: ST_TO_ADDR
71153: LD_EXP 44
71157: PUSH
71158: FOR_TO
71159: IFFALSE 71707
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 800 ] ] ] ] ) ;
71161: LD_ADDR_VAR 0 5
71165: PUSH
71166: LD_EXP 44
71170: PUSH
71171: LD_VAR 0 2
71175: ARRAY
71176: PUSH
71177: LD_EXP 73
71181: PUSH
71182: LD_VAR 0 2
71186: ARRAY
71187: UNION
71188: PPUSH
71189: LD_INT 21
71191: PUSH
71192: LD_INT 1
71194: PUSH
71195: EMPTY
71196: LIST
71197: LIST
71198: PUSH
71199: LD_INT 1
71201: PUSH
71202: LD_INT 3
71204: PUSH
71205: LD_INT 54
71207: PUSH
71208: EMPTY
71209: LIST
71210: PUSH
71211: EMPTY
71212: LIST
71213: LIST
71214: PUSH
71215: LD_INT 3
71217: PUSH
71218: LD_INT 24
71220: PUSH
71221: LD_INT 800
71223: PUSH
71224: EMPTY
71225: LIST
71226: LIST
71227: PUSH
71228: EMPTY
71229: LIST
71230: LIST
71231: PUSH
71232: EMPTY
71233: LIST
71234: LIST
71235: LIST
71236: PUSH
71237: EMPTY
71238: LIST
71239: LIST
71240: PPUSH
71241: CALL_OW 72
71245: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
71246: LD_ADDR_VAR 0 6
71250: PUSH
71251: LD_EXP 44
71255: PUSH
71256: LD_VAR 0 2
71260: ARRAY
71261: PPUSH
71262: LD_INT 21
71264: PUSH
71265: LD_INT 1
71267: PUSH
71268: EMPTY
71269: LIST
71270: LIST
71271: PUSH
71272: LD_INT 1
71274: PUSH
71275: LD_INT 3
71277: PUSH
71278: LD_INT 54
71280: PUSH
71281: EMPTY
71282: LIST
71283: PUSH
71284: EMPTY
71285: LIST
71286: LIST
71287: PUSH
71288: LD_INT 3
71290: PUSH
71291: LD_INT 24
71293: PUSH
71294: LD_INT 250
71296: PUSH
71297: EMPTY
71298: LIST
71299: LIST
71300: PUSH
71301: EMPTY
71302: LIST
71303: LIST
71304: PUSH
71305: EMPTY
71306: LIST
71307: LIST
71308: LIST
71309: PUSH
71310: EMPTY
71311: LIST
71312: LIST
71313: PPUSH
71314: CALL_OW 72
71318: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
71319: LD_ADDR_VAR 0 7
71323: PUSH
71324: LD_VAR 0 5
71328: PUSH
71329: LD_VAR 0 6
71333: DIFF
71334: ST_TO_ADDR
// if not need_heal_1 then
71335: LD_VAR 0 6
71339: NOT
71340: IFFALSE 71373
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , [ ] ) else
71342: LD_ADDR_EXP 47
71346: PUSH
71347: LD_EXP 47
71351: PPUSH
71352: LD_VAR 0 2
71356: PUSH
71357: LD_INT 1
71359: PUSH
71360: EMPTY
71361: LIST
71362: LIST
71363: PPUSH
71364: EMPTY
71365: PPUSH
71366: CALL 26712 0 3
71370: ST_TO_ADDR
71371: GO 71443
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , UnitFilter ( mc_need_heal [ i ] [ 1 ] , [ f_not , [ f_lives , 1000 ] ] ) union need_heal_1 ) ;
71373: LD_ADDR_EXP 47
71377: PUSH
71378: LD_EXP 47
71382: PPUSH
71383: LD_VAR 0 2
71387: PUSH
71388: LD_INT 1
71390: PUSH
71391: EMPTY
71392: LIST
71393: LIST
71394: PPUSH
71395: LD_EXP 47
71399: PUSH
71400: LD_VAR 0 2
71404: ARRAY
71405: PUSH
71406: LD_INT 1
71408: ARRAY
71409: PPUSH
71410: LD_INT 3
71412: PUSH
71413: LD_INT 24
71415: PUSH
71416: LD_INT 1000
71418: PUSH
71419: EMPTY
71420: LIST
71421: LIST
71422: PUSH
71423: EMPTY
71424: LIST
71425: LIST
71426: PPUSH
71427: CALL_OW 72
71431: PUSH
71432: LD_VAR 0 6
71436: UNION
71437: PPUSH
71438: CALL 26712 0 3
71442: ST_TO_ADDR
// if not need_heal_2 then
71443: LD_VAR 0 7
71447: NOT
71448: IFFALSE 71481
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , [ ] ) else
71450: LD_ADDR_EXP 47
71454: PUSH
71455: LD_EXP 47
71459: PPUSH
71460: LD_VAR 0 2
71464: PUSH
71465: LD_INT 2
71467: PUSH
71468: EMPTY
71469: LIST
71470: LIST
71471: PPUSH
71472: EMPTY
71473: PPUSH
71474: CALL 26712 0 3
71478: ST_TO_ADDR
71479: GO 71513
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
71481: LD_ADDR_EXP 47
71485: PUSH
71486: LD_EXP 47
71490: PPUSH
71491: LD_VAR 0 2
71495: PUSH
71496: LD_INT 2
71498: PUSH
71499: EMPTY
71500: LIST
71501: LIST
71502: PPUSH
71503: LD_VAR 0 7
71507: PPUSH
71508: CALL 26712 0 3
71512: ST_TO_ADDR
// if need_heal_2 then
71513: LD_VAR 0 7
71517: IFFALSE 71689
// for j in need_heal_2 do
71519: LD_ADDR_VAR 0 3
71523: PUSH
71524: LD_VAR 0 7
71528: PUSH
71529: FOR_IN
71530: IFFALSE 71687
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
71532: LD_ADDR_VAR 0 5
71536: PUSH
71537: LD_EXP 44
71541: PUSH
71542: LD_VAR 0 2
71546: ARRAY
71547: PPUSH
71548: LD_INT 2
71550: PUSH
71551: LD_INT 30
71553: PUSH
71554: LD_INT 6
71556: PUSH
71557: EMPTY
71558: LIST
71559: LIST
71560: PUSH
71561: LD_INT 30
71563: PUSH
71564: LD_INT 7
71566: PUSH
71567: EMPTY
71568: LIST
71569: LIST
71570: PUSH
71571: LD_INT 30
71573: PUSH
71574: LD_INT 8
71576: PUSH
71577: EMPTY
71578: LIST
71579: LIST
71580: PUSH
71581: LD_INT 30
71583: PUSH
71584: LD_INT 0
71586: PUSH
71587: EMPTY
71588: LIST
71589: LIST
71590: PUSH
71591: LD_INT 30
71593: PUSH
71594: LD_INT 1
71596: PUSH
71597: EMPTY
71598: LIST
71599: LIST
71600: PUSH
71601: LD_INT 25
71603: PUSH
71604: LD_INT 4
71606: PUSH
71607: EMPTY
71608: LIST
71609: LIST
71610: PUSH
71611: EMPTY
71612: LIST
71613: LIST
71614: LIST
71615: LIST
71616: LIST
71617: LIST
71618: LIST
71619: PPUSH
71620: CALL_OW 72
71624: ST_TO_ADDR
// if tmp then
71625: LD_VAR 0 5
71629: IFFALSE 71685
// begin k := NearestUnitToUnit ( tmp , j ) ;
71631: LD_ADDR_VAR 0 4
71635: PUSH
71636: LD_VAR 0 5
71640: PPUSH
71641: LD_VAR 0 3
71645: PPUSH
71646: CALL_OW 74
71650: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
71651: LD_VAR 0 3
71655: PPUSH
71656: LD_VAR 0 4
71660: PPUSH
71661: CALL_OW 296
71665: PUSH
71666: LD_INT 7
71668: GREATER
71669: IFFALSE 71685
// ComMoveUnit ( j , k ) ;
71671: LD_VAR 0 3
71675: PPUSH
71676: LD_VAR 0 4
71680: PPUSH
71681: CALL_OW 112
// end ; end ;
71685: GO 71529
71687: POP
71688: POP
// if not need_heal_1 and not need_heal_2 then
71689: LD_VAR 0 6
71693: NOT
71694: PUSH
71695: LD_VAR 0 7
71699: NOT
71700: AND
71701: IFFALSE 71705
// continue ;
71703: GO 71158
// end ;
71705: GO 71158
71707: POP
71708: POP
// RaiseSailEvent ( 102 ) ;
71709: LD_INT 102
71711: PPUSH
71712: CALL_OW 427
// end ;
71716: LD_VAR 0 1
71720: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp , cranes , to_repair_tmp , to_repair ; begin
71721: LD_INT 0
71723: PPUSH
71724: PPUSH
71725: PPUSH
71726: PPUSH
71727: PPUSH
71728: PPUSH
71729: PPUSH
71730: PPUSH
// if not mc_bases then
71731: LD_EXP 44
71735: NOT
71736: IFFALSE 71740
// exit ;
71738: GO 72580
// for i = 1 to mc_bases do
71740: LD_ADDR_VAR 0 2
71744: PUSH
71745: DOUBLE
71746: LD_INT 1
71748: DEC
71749: ST_TO_ADDR
71750: LD_EXP 44
71754: PUSH
71755: FOR_TO
71756: IFFALSE 72578
// begin if not mc_building_need_repair [ i ] then
71758: LD_EXP 45
71762: PUSH
71763: LD_VAR 0 2
71767: ARRAY
71768: NOT
71769: IFFALSE 71943
// begin cranes := UnitFilter ( mc_vehicles [ i ] , [ [ f_not , [ f_lives , 1000 ] ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ] ) ;
71771: LD_ADDR_VAR 0 6
71775: PUSH
71776: LD_EXP 63
71780: PUSH
71781: LD_VAR 0 2
71785: ARRAY
71786: PPUSH
71787: LD_INT 3
71789: PUSH
71790: LD_INT 24
71792: PUSH
71793: LD_INT 1000
71795: PUSH
71796: EMPTY
71797: LIST
71798: LIST
71799: PUSH
71800: EMPTY
71801: LIST
71802: LIST
71803: PUSH
71804: LD_INT 2
71806: PUSH
71807: LD_INT 34
71809: PUSH
71810: LD_INT 13
71812: PUSH
71813: EMPTY
71814: LIST
71815: LIST
71816: PUSH
71817: LD_INT 34
71819: PUSH
71820: LD_INT 52
71822: PUSH
71823: EMPTY
71824: LIST
71825: LIST
71826: PUSH
71827: EMPTY
71828: LIST
71829: LIST
71830: LIST
71831: PUSH
71832: EMPTY
71833: LIST
71834: LIST
71835: PPUSH
71836: CALL_OW 72
71840: ST_TO_ADDR
// if cranes then
71841: LD_VAR 0 6
71845: IFFALSE 71907
// for j in cranes do
71847: LD_ADDR_VAR 0 3
71851: PUSH
71852: LD_VAR 0 6
71856: PUSH
71857: FOR_IN
71858: IFFALSE 71905
// if not IsInArea ( j , mc_parking [ i ] ) then
71860: LD_VAR 0 3
71864: PPUSH
71865: LD_EXP 68
71869: PUSH
71870: LD_VAR 0 2
71874: ARRAY
71875: PPUSH
71876: CALL_OW 308
71880: NOT
71881: IFFALSE 71903
// ComMoveToArea ( j , mc_parking [ i ] ) ;
71883: LD_VAR 0 3
71887: PPUSH
71888: LD_EXP 68
71892: PUSH
71893: LD_VAR 0 2
71897: ARRAY
71898: PPUSH
71899: CALL_OW 113
71903: GO 71857
71905: POP
71906: POP
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
71907: LD_ADDR_EXP 46
71911: PUSH
71912: LD_EXP 46
71916: PPUSH
71917: LD_VAR 0 2
71921: PPUSH
71922: EMPTY
71923: PPUSH
71924: CALL_OW 1
71928: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
71929: LD_VAR 0 2
71933: PPUSH
71934: LD_INT 101
71936: PPUSH
71937: CALL 66833 0 2
// continue ;
71941: GO 71755
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
71943: LD_ADDR_EXP 50
71947: PUSH
71948: LD_EXP 50
71952: PPUSH
71953: LD_VAR 0 2
71957: PPUSH
71958: EMPTY
71959: PPUSH
71960: CALL_OW 1
71964: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
71965: LD_VAR 0 2
71969: PPUSH
71970: LD_INT 103
71972: PPUSH
71973: CALL 66833 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
71977: LD_ADDR_VAR 0 5
71981: PUSH
71982: LD_EXP 44
71986: PUSH
71987: LD_VAR 0 2
71991: ARRAY
71992: PUSH
71993: LD_EXP 73
71997: PUSH
71998: LD_VAR 0 2
72002: ARRAY
72003: UNION
72004: PPUSH
72005: LD_INT 2
72007: PUSH
72008: LD_INT 25
72010: PUSH
72011: LD_INT 2
72013: PUSH
72014: EMPTY
72015: LIST
72016: LIST
72017: PUSH
72018: LD_INT 25
72020: PUSH
72021: LD_INT 16
72023: PUSH
72024: EMPTY
72025: LIST
72026: LIST
72027: PUSH
72028: EMPTY
72029: LIST
72030: LIST
72031: LIST
72032: PUSH
72033: EMPTY
72034: LIST
72035: PPUSH
72036: CALL_OW 72
72040: ST_TO_ADDR
// cranes := UnitFilter ( mc_vehicles [ i ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ) ;
72041: LD_ADDR_VAR 0 6
72045: PUSH
72046: LD_EXP 63
72050: PUSH
72051: LD_VAR 0 2
72055: ARRAY
72056: PPUSH
72057: LD_INT 2
72059: PUSH
72060: LD_INT 34
72062: PUSH
72063: LD_INT 13
72065: PUSH
72066: EMPTY
72067: LIST
72068: LIST
72069: PUSH
72070: LD_INT 34
72072: PUSH
72073: LD_INT 52
72075: PUSH
72076: EMPTY
72077: LIST
72078: LIST
72079: PUSH
72080: EMPTY
72081: LIST
72082: LIST
72083: LIST
72084: PPUSH
72085: CALL_OW 72
72089: ST_TO_ADDR
// if cranes then
72090: LD_VAR 0 6
72094: IFFALSE 72230
// begin for j in cranes do
72096: LD_ADDR_VAR 0 3
72100: PUSH
72101: LD_VAR 0 6
72105: PUSH
72106: FOR_IN
72107: IFFALSE 72228
// if GetLives ( j ) >= 500 and not HasTask ( j ) then
72109: LD_VAR 0 3
72113: PPUSH
72114: CALL_OW 256
72118: PUSH
72119: LD_INT 500
72121: GREATEREQUAL
72122: PUSH
72123: LD_VAR 0 3
72127: PPUSH
72128: CALL_OW 314
72132: NOT
72133: AND
72134: IFFALSE 72168
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) else
72136: LD_VAR 0 3
72140: PPUSH
72141: LD_EXP 45
72145: PUSH
72146: LD_VAR 0 2
72150: ARRAY
72151: PPUSH
72152: LD_VAR 0 3
72156: PPUSH
72157: CALL_OW 74
72161: PPUSH
72162: CALL_OW 130
72166: GO 72226
// if GetLives ( j ) < 500 and not IsInArea ( j , mc_parking [ i ] ) then
72168: LD_VAR 0 3
72172: PPUSH
72173: CALL_OW 256
72177: PUSH
72178: LD_INT 500
72180: LESS
72181: PUSH
72182: LD_VAR 0 3
72186: PPUSH
72187: LD_EXP 68
72191: PUSH
72192: LD_VAR 0 2
72196: ARRAY
72197: PPUSH
72198: CALL_OW 308
72202: NOT
72203: AND
72204: IFFALSE 72226
// ComMoveToArea ( j , mc_parking [ i ] ) ;
72206: LD_VAR 0 3
72210: PPUSH
72211: LD_EXP 68
72215: PUSH
72216: LD_VAR 0 2
72220: ARRAY
72221: PPUSH
72222: CALL_OW 113
72226: GO 72106
72228: POP
72229: POP
// end ; if not tmp then
72230: LD_VAR 0 5
72234: NOT
72235: IFFALSE 72239
// continue ;
72237: GO 71755
// for j in tmp do
72239: LD_ADDR_VAR 0 3
72243: PUSH
72244: LD_VAR 0 5
72248: PUSH
72249: FOR_IN
72250: IFFALSE 72574
// begin if mc_need_heal [ i ] then
72252: LD_EXP 47
72256: PUSH
72257: LD_VAR 0 2
72261: ARRAY
72262: IFFALSE 72310
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
72264: LD_VAR 0 3
72268: PUSH
72269: LD_EXP 47
72273: PUSH
72274: LD_VAR 0 2
72278: ARRAY
72279: PUSH
72280: LD_INT 1
72282: ARRAY
72283: IN
72284: PUSH
72285: LD_VAR 0 3
72289: PUSH
72290: LD_EXP 47
72294: PUSH
72295: LD_VAR 0 2
72299: ARRAY
72300: PUSH
72301: LD_INT 2
72303: ARRAY
72304: IN
72305: OR
72306: IFFALSE 72310
// continue ;
72308: GO 72249
// if IsInUnit ( j ) then
72310: LD_VAR 0 3
72314: PPUSH
72315: CALL_OW 310
72319: IFFALSE 72330
// ComExitBuilding ( j ) ;
72321: LD_VAR 0 3
72325: PPUSH
72326: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
72330: LD_VAR 0 3
72334: PUSH
72335: LD_EXP 46
72339: PUSH
72340: LD_VAR 0 2
72344: ARRAY
72345: IN
72346: NOT
72347: IFFALSE 72405
// begin SetTag ( j , 101 ) ;
72349: LD_VAR 0 3
72353: PPUSH
72354: LD_INT 101
72356: PPUSH
72357: CALL_OW 109
// mc_building_repairs := ReplaceIn ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
72361: LD_ADDR_EXP 46
72365: PUSH
72366: LD_EXP 46
72370: PPUSH
72371: LD_VAR 0 2
72375: PUSH
72376: LD_EXP 46
72380: PUSH
72381: LD_VAR 0 2
72385: ARRAY
72386: PUSH
72387: LD_INT 1
72389: PLUS
72390: PUSH
72391: EMPTY
72392: LIST
72393: LIST
72394: PPUSH
72395: LD_VAR 0 3
72399: PPUSH
72400: CALL 26712 0 3
72404: ST_TO_ADDR
// end ; wait ( 1 ) ;
72405: LD_INT 1
72407: PPUSH
72408: CALL_OW 67
// to_repair_tmp := mc_building_need_repair [ i ] ;
72412: LD_ADDR_VAR 0 7
72416: PUSH
72417: LD_EXP 45
72421: PUSH
72422: LD_VAR 0 2
72426: ARRAY
72427: ST_TO_ADDR
// if mc_scan [ i ] then
72428: LD_EXP 67
72432: PUSH
72433: LD_VAR 0 2
72437: ARRAY
72438: IFFALSE 72507
// to_repair_tmp := UnitFilter ( mc_building_need_repair [ i ] , [ f_not , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_breastwork ] ] ] ) ;
72440: LD_ADDR_VAR 0 7
72444: PUSH
72445: LD_EXP 45
72449: PUSH
72450: LD_VAR 0 2
72454: ARRAY
72455: PPUSH
72456: LD_INT 3
72458: PUSH
72459: LD_INT 2
72461: PUSH
72462: LD_INT 30
72464: PUSH
72465: LD_INT 32
72467: PUSH
72468: EMPTY
72469: LIST
72470: LIST
72471: PUSH
72472: LD_INT 30
72474: PUSH
72475: LD_INT 33
72477: PUSH
72478: EMPTY
72479: LIST
72480: LIST
72481: PUSH
72482: LD_INT 30
72484: PUSH
72485: LD_INT 31
72487: PUSH
72488: EMPTY
72489: LIST
72490: LIST
72491: PUSH
72492: EMPTY
72493: LIST
72494: LIST
72495: LIST
72496: LIST
72497: PUSH
72498: EMPTY
72499: LIST
72500: LIST
72501: PPUSH
72502: CALL_OW 72
72506: ST_TO_ADDR
// if not to_repair_tmp then
72507: LD_VAR 0 7
72511: NOT
72512: IFFALSE 72516
// continue ;
72514: GO 72249
// to_repair := NearestUnitToUnit ( to_repair_tmp , j ) ;
72516: LD_ADDR_VAR 0 8
72520: PUSH
72521: LD_VAR 0 7
72525: PPUSH
72526: LD_VAR 0 3
72530: PPUSH
72531: CALL_OW 74
72535: ST_TO_ADDR
// if DangerAtRange ( to_repair , 14 ) [ 4 ] < 5 then
72536: LD_VAR 0 8
72540: PPUSH
72541: LD_INT 14
72543: PPUSH
72544: CALL 29305 0 2
72548: PUSH
72549: LD_INT 4
72551: ARRAY
72552: PUSH
72553: LD_INT 5
72555: LESS
72556: IFFALSE 72572
// ComRepairBuilding ( j , to_repair ) ;
72558: LD_VAR 0 3
72562: PPUSH
72563: LD_VAR 0 8
72567: PPUSH
72568: CALL_OW 130
// end ;
72572: GO 72249
72574: POP
72575: POP
// end ;
72576: GO 71755
72578: POP
72579: POP
// end ;
72580: LD_VAR 0 1
72584: RET
// export function MC_Heal ; var i , j , tmp ; begin
72585: LD_INT 0
72587: PPUSH
72588: PPUSH
72589: PPUSH
72590: PPUSH
// if not mc_bases then
72591: LD_EXP 44
72595: NOT
72596: IFFALSE 72600
// exit ;
72598: GO 73002
// for i = 1 to mc_bases do
72600: LD_ADDR_VAR 0 2
72604: PUSH
72605: DOUBLE
72606: LD_INT 1
72608: DEC
72609: ST_TO_ADDR
72610: LD_EXP 44
72614: PUSH
72615: FOR_TO
72616: IFFALSE 73000
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
72618: LD_EXP 47
72622: PUSH
72623: LD_VAR 0 2
72627: ARRAY
72628: PUSH
72629: LD_INT 1
72631: ARRAY
72632: NOT
72633: PUSH
72634: LD_EXP 47
72638: PUSH
72639: LD_VAR 0 2
72643: ARRAY
72644: PUSH
72645: LD_INT 2
72647: ARRAY
72648: NOT
72649: AND
72650: IFFALSE 72688
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
72652: LD_ADDR_EXP 48
72656: PUSH
72657: LD_EXP 48
72661: PPUSH
72662: LD_VAR 0 2
72666: PPUSH
72667: EMPTY
72668: PPUSH
72669: CALL_OW 1
72673: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
72674: LD_VAR 0 2
72678: PPUSH
72679: LD_INT 102
72681: PPUSH
72682: CALL 66833 0 2
// continue ;
72686: GO 72615
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
72688: LD_ADDR_VAR 0 4
72692: PUSH
72693: LD_EXP 44
72697: PUSH
72698: LD_VAR 0 2
72702: ARRAY
72703: PPUSH
72704: LD_INT 25
72706: PUSH
72707: LD_INT 4
72709: PUSH
72710: EMPTY
72711: LIST
72712: LIST
72713: PPUSH
72714: CALL_OW 72
72718: ST_TO_ADDR
// if not tmp then
72719: LD_VAR 0 4
72723: NOT
72724: IFFALSE 72728
// continue ;
72726: GO 72615
// if mc_taming [ i ] then
72728: LD_EXP 75
72732: PUSH
72733: LD_VAR 0 2
72737: ARRAY
72738: IFFALSE 72762
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
72740: LD_ADDR_EXP 75
72744: PUSH
72745: LD_EXP 75
72749: PPUSH
72750: LD_VAR 0 2
72754: PPUSH
72755: EMPTY
72756: PPUSH
72757: CALL_OW 1
72761: ST_TO_ADDR
// for j in tmp do
72762: LD_ADDR_VAR 0 3
72766: PUSH
72767: LD_VAR 0 4
72771: PUSH
72772: FOR_IN
72773: IFFALSE 72996
// begin if IsInUnit ( j ) then
72775: LD_VAR 0 3
72779: PPUSH
72780: CALL_OW 310
72784: IFFALSE 72795
// ComExitBuilding ( j ) ;
72786: LD_VAR 0 3
72790: PPUSH
72791: CALL_OW 122
// if not j in mc_healers [ i ] then
72795: LD_VAR 0 3
72799: PUSH
72800: LD_EXP 48
72804: PUSH
72805: LD_VAR 0 2
72809: ARRAY
72810: IN
72811: NOT
72812: IFFALSE 72858
// mc_healers := ReplaceIn ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
72814: LD_ADDR_EXP 48
72818: PUSH
72819: LD_EXP 48
72823: PPUSH
72824: LD_VAR 0 2
72828: PUSH
72829: LD_EXP 48
72833: PUSH
72834: LD_VAR 0 2
72838: ARRAY
72839: PUSH
72840: LD_INT 1
72842: PLUS
72843: PUSH
72844: EMPTY
72845: LIST
72846: LIST
72847: PPUSH
72848: LD_VAR 0 3
72852: PPUSH
72853: CALL 26712 0 3
72857: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
72858: LD_VAR 0 3
72862: PPUSH
72863: CALL_OW 110
72867: PUSH
72868: LD_INT 102
72870: NONEQUAL
72871: IFFALSE 72885
// SetTag ( j , 102 ) ;
72873: LD_VAR 0 3
72877: PPUSH
72878: LD_INT 102
72880: PPUSH
72881: CALL_OW 109
// Wait ( 3 ) ;
72885: LD_INT 3
72887: PPUSH
72888: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
72892: LD_EXP 47
72896: PUSH
72897: LD_VAR 0 2
72901: ARRAY
72902: PUSH
72903: LD_INT 1
72905: ARRAY
72906: IFFALSE 72938
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
72908: LD_VAR 0 3
72912: PPUSH
72913: LD_EXP 47
72917: PUSH
72918: LD_VAR 0 2
72922: ARRAY
72923: PUSH
72924: LD_INT 1
72926: ARRAY
72927: PUSH
72928: LD_INT 1
72930: ARRAY
72931: PPUSH
72932: CALL_OW 128
72936: GO 72994
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
72938: LD_VAR 0 3
72942: PPUSH
72943: CALL_OW 314
72947: NOT
72948: PUSH
72949: LD_EXP 47
72953: PUSH
72954: LD_VAR 0 2
72958: ARRAY
72959: PUSH
72960: LD_INT 2
72962: ARRAY
72963: AND
72964: IFFALSE 72994
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
72966: LD_VAR 0 3
72970: PPUSH
72971: LD_EXP 47
72975: PUSH
72976: LD_VAR 0 2
72980: ARRAY
72981: PUSH
72982: LD_INT 2
72984: ARRAY
72985: PUSH
72986: LD_INT 1
72988: ARRAY
72989: PPUSH
72990: CALL_OW 128
// end ;
72994: GO 72772
72996: POP
72997: POP
// end ;
72998: GO 72615
73000: POP
73001: POP
// end ;
73002: LD_VAR 0 1
73006: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
73007: LD_INT 0
73009: PPUSH
73010: PPUSH
73011: PPUSH
73012: PPUSH
73013: PPUSH
// if not mc_bases then
73014: LD_EXP 44
73018: NOT
73019: IFFALSE 73023
// exit ;
73021: GO 74166
// for i = 1 to mc_bases do
73023: LD_ADDR_VAR 0 2
73027: PUSH
73028: DOUBLE
73029: LD_INT 1
73031: DEC
73032: ST_TO_ADDR
73033: LD_EXP 44
73037: PUSH
73038: FOR_TO
73039: IFFALSE 74164
// begin if mc_scan [ i ] then
73041: LD_EXP 67
73045: PUSH
73046: LD_VAR 0 2
73050: ARRAY
73051: IFFALSE 73055
// continue ;
73053: GO 73038
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
73055: LD_EXP 49
73059: PUSH
73060: LD_VAR 0 2
73064: ARRAY
73065: NOT
73066: PUSH
73067: LD_EXP 51
73071: PUSH
73072: LD_VAR 0 2
73076: ARRAY
73077: NOT
73078: AND
73079: PUSH
73080: LD_EXP 50
73084: PUSH
73085: LD_VAR 0 2
73089: ARRAY
73090: AND
73091: IFFALSE 73129
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
73093: LD_ADDR_EXP 50
73097: PUSH
73098: LD_EXP 50
73102: PPUSH
73103: LD_VAR 0 2
73107: PPUSH
73108: EMPTY
73109: PPUSH
73110: CALL_OW 1
73114: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
73115: LD_VAR 0 2
73119: PPUSH
73120: LD_INT 103
73122: PPUSH
73123: CALL 66833 0 2
// continue ;
73127: GO 73038
// end ; if mc_construct_list [ i ] then
73129: LD_EXP 51
73133: PUSH
73134: LD_VAR 0 2
73138: ARRAY
73139: IFFALSE 73359
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
73141: LD_ADDR_VAR 0 4
73145: PUSH
73146: LD_EXP 44
73150: PUSH
73151: LD_VAR 0 2
73155: ARRAY
73156: PPUSH
73157: LD_INT 25
73159: PUSH
73160: LD_INT 2
73162: PUSH
73163: EMPTY
73164: LIST
73165: LIST
73166: PPUSH
73167: CALL_OW 72
73171: PUSH
73172: LD_EXP 46
73176: PUSH
73177: LD_VAR 0 2
73181: ARRAY
73182: DIFF
73183: ST_TO_ADDR
// if not tmp then
73184: LD_VAR 0 4
73188: NOT
73189: IFFALSE 73193
// continue ;
73191: GO 73038
// for j in tmp do
73193: LD_ADDR_VAR 0 3
73197: PUSH
73198: LD_VAR 0 4
73202: PUSH
73203: FOR_IN
73204: IFFALSE 73355
// begin if not mc_builders [ i ] then
73206: LD_EXP 50
73210: PUSH
73211: LD_VAR 0 2
73215: ARRAY
73216: NOT
73217: IFFALSE 73275
// begin SetTag ( j , 103 ) ;
73219: LD_VAR 0 3
73223: PPUSH
73224: LD_INT 103
73226: PPUSH
73227: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
73231: LD_ADDR_EXP 50
73235: PUSH
73236: LD_EXP 50
73240: PPUSH
73241: LD_VAR 0 2
73245: PUSH
73246: LD_EXP 50
73250: PUSH
73251: LD_VAR 0 2
73255: ARRAY
73256: PUSH
73257: LD_INT 1
73259: PLUS
73260: PUSH
73261: EMPTY
73262: LIST
73263: LIST
73264: PPUSH
73265: LD_VAR 0 3
73269: PPUSH
73270: CALL 26712 0 3
73274: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
73275: LD_VAR 0 3
73279: PPUSH
73280: CALL_OW 310
73284: IFFALSE 73295
// ComExitBuilding ( j ) ;
73286: LD_VAR 0 3
73290: PPUSH
73291: CALL_OW 122
// wait ( 3 ) ;
73295: LD_INT 3
73297: PPUSH
73298: CALL_OW 67
// if not mc_construct_list [ i ] then
73302: LD_EXP 51
73306: PUSH
73307: LD_VAR 0 2
73311: ARRAY
73312: NOT
73313: IFFALSE 73317
// break ;
73315: GO 73355
// if not HasTask ( j ) then
73317: LD_VAR 0 3
73321: PPUSH
73322: CALL_OW 314
73326: NOT
73327: IFFALSE 73353
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
73329: LD_VAR 0 3
73333: PPUSH
73334: LD_EXP 51
73338: PUSH
73339: LD_VAR 0 2
73343: ARRAY
73344: PUSH
73345: LD_INT 1
73347: ARRAY
73348: PPUSH
73349: CALL 29563 0 2
// end ;
73353: GO 73203
73355: POP
73356: POP
// end else
73357: GO 74162
// if mc_build_list [ i ] then
73359: LD_EXP 49
73363: PUSH
73364: LD_VAR 0 2
73368: ARRAY
73369: IFFALSE 74162
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
73371: LD_ADDR_VAR 0 5
73375: PUSH
73376: LD_EXP 44
73380: PUSH
73381: LD_VAR 0 2
73385: ARRAY
73386: PPUSH
73387: LD_INT 2
73389: PUSH
73390: LD_INT 30
73392: PUSH
73393: LD_INT 0
73395: PUSH
73396: EMPTY
73397: LIST
73398: LIST
73399: PUSH
73400: LD_INT 30
73402: PUSH
73403: LD_INT 1
73405: PUSH
73406: EMPTY
73407: LIST
73408: LIST
73409: PUSH
73410: EMPTY
73411: LIST
73412: LIST
73413: LIST
73414: PPUSH
73415: CALL_OW 72
73419: ST_TO_ADDR
// if depot then
73420: LD_VAR 0 5
73424: IFFALSE 73442
// depot := depot [ 1 ] else
73426: LD_ADDR_VAR 0 5
73430: PUSH
73431: LD_VAR 0 5
73435: PUSH
73436: LD_INT 1
73438: ARRAY
73439: ST_TO_ADDR
73440: GO 73450
// depot := 0 ;
73442: LD_ADDR_VAR 0 5
73446: PUSH
73447: LD_INT 0
73449: ST_TO_ADDR
// if IsExtension ( mc_build_list [ i ] [ 1 ] [ 1 ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) then
73450: LD_EXP 49
73454: PUSH
73455: LD_VAR 0 2
73459: ARRAY
73460: PUSH
73461: LD_INT 1
73463: ARRAY
73464: PUSH
73465: LD_INT 1
73467: ARRAY
73468: PPUSH
73469: CALL 29393 0 1
73473: PUSH
73474: LD_EXP 44
73478: PUSH
73479: LD_VAR 0 2
73483: ARRAY
73484: PPUSH
73485: LD_INT 2
73487: PUSH
73488: LD_INT 30
73490: PUSH
73491: LD_INT 2
73493: PUSH
73494: EMPTY
73495: LIST
73496: LIST
73497: PUSH
73498: LD_INT 30
73500: PUSH
73501: LD_INT 3
73503: PUSH
73504: EMPTY
73505: LIST
73506: LIST
73507: PUSH
73508: EMPTY
73509: LIST
73510: LIST
73511: LIST
73512: PPUSH
73513: CALL_OW 72
73517: NOT
73518: AND
73519: IFFALSE 73624
// begin for j = 1 to mc_build_list [ i ] do
73521: LD_ADDR_VAR 0 3
73525: PUSH
73526: DOUBLE
73527: LD_INT 1
73529: DEC
73530: ST_TO_ADDR
73531: LD_EXP 49
73535: PUSH
73536: LD_VAR 0 2
73540: ARRAY
73541: PUSH
73542: FOR_TO
73543: IFFALSE 73622
// if mc_build_list [ i ] [ j ] [ 1 ] = b_workshop then
73545: LD_EXP 49
73549: PUSH
73550: LD_VAR 0 2
73554: ARRAY
73555: PUSH
73556: LD_VAR 0 3
73560: ARRAY
73561: PUSH
73562: LD_INT 1
73564: ARRAY
73565: PUSH
73566: LD_INT 2
73568: EQUAL
73569: IFFALSE 73620
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , j , 1 , false ) ) ;
73571: LD_ADDR_EXP 49
73575: PUSH
73576: LD_EXP 49
73580: PPUSH
73581: LD_VAR 0 2
73585: PPUSH
73586: LD_EXP 49
73590: PUSH
73591: LD_VAR 0 2
73595: ARRAY
73596: PPUSH
73597: LD_VAR 0 3
73601: PPUSH
73602: LD_INT 1
73604: PPUSH
73605: LD_INT 0
73607: PPUSH
73608: CALL 26130 0 4
73612: PPUSH
73613: CALL_OW 1
73617: ST_TO_ADDR
// break ;
73618: GO 73622
// end ;
73620: GO 73542
73622: POP
73623: POP
// end ; if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilt ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
73624: LD_EXP 49
73628: PUSH
73629: LD_VAR 0 2
73633: ARRAY
73634: PUSH
73635: LD_INT 1
73637: ARRAY
73638: PUSH
73639: LD_INT 1
73641: ARRAY
73642: PUSH
73643: LD_INT 0
73645: EQUAL
73646: PUSH
73647: LD_VAR 0 5
73651: PUSH
73652: LD_VAR 0 5
73656: PPUSH
73657: LD_EXP 49
73661: PUSH
73662: LD_VAR 0 2
73666: ARRAY
73667: PUSH
73668: LD_INT 1
73670: ARRAY
73671: PUSH
73672: LD_INT 1
73674: ARRAY
73675: PPUSH
73676: LD_EXP 49
73680: PUSH
73681: LD_VAR 0 2
73685: ARRAY
73686: PUSH
73687: LD_INT 1
73689: ARRAY
73690: PUSH
73691: LD_INT 2
73693: ARRAY
73694: PPUSH
73695: LD_EXP 49
73699: PUSH
73700: LD_VAR 0 2
73704: ARRAY
73705: PUSH
73706: LD_INT 1
73708: ARRAY
73709: PUSH
73710: LD_INT 3
73712: ARRAY
73713: PPUSH
73714: LD_EXP 49
73718: PUSH
73719: LD_VAR 0 2
73723: ARRAY
73724: PUSH
73725: LD_INT 1
73727: ARRAY
73728: PUSH
73729: LD_INT 4
73731: ARRAY
73732: PPUSH
73733: CALL 34127 0 5
73737: AND
73738: OR
73739: IFFALSE 74020
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
73741: LD_ADDR_VAR 0 4
73745: PUSH
73746: LD_EXP 44
73750: PUSH
73751: LD_VAR 0 2
73755: ARRAY
73756: PPUSH
73757: LD_INT 25
73759: PUSH
73760: LD_INT 2
73762: PUSH
73763: EMPTY
73764: LIST
73765: LIST
73766: PPUSH
73767: CALL_OW 72
73771: PUSH
73772: LD_EXP 46
73776: PUSH
73777: LD_VAR 0 2
73781: ARRAY
73782: DIFF
73783: ST_TO_ADDR
// if not tmp then
73784: LD_VAR 0 4
73788: NOT
73789: IFFALSE 73793
// continue ;
73791: GO 73038
// for j in tmp do
73793: LD_ADDR_VAR 0 3
73797: PUSH
73798: LD_VAR 0 4
73802: PUSH
73803: FOR_IN
73804: IFFALSE 74016
// begin if not mc_builders [ i ] then
73806: LD_EXP 50
73810: PUSH
73811: LD_VAR 0 2
73815: ARRAY
73816: NOT
73817: IFFALSE 73875
// begin SetTag ( j , 103 ) ;
73819: LD_VAR 0 3
73823: PPUSH
73824: LD_INT 103
73826: PPUSH
73827: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
73831: LD_ADDR_EXP 50
73835: PUSH
73836: LD_EXP 50
73840: PPUSH
73841: LD_VAR 0 2
73845: PUSH
73846: LD_EXP 50
73850: PUSH
73851: LD_VAR 0 2
73855: ARRAY
73856: PUSH
73857: LD_INT 1
73859: PLUS
73860: PUSH
73861: EMPTY
73862: LIST
73863: LIST
73864: PPUSH
73865: LD_VAR 0 3
73869: PPUSH
73870: CALL 26712 0 3
73874: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
73875: LD_VAR 0 3
73879: PPUSH
73880: CALL_OW 310
73884: IFFALSE 73895
// ComExitBuilding ( j ) ;
73886: LD_VAR 0 3
73890: PPUSH
73891: CALL_OW 122
// wait ( 3 ) ;
73895: LD_INT 3
73897: PPUSH
73898: CALL_OW 67
// if not mc_build_list [ i ] then
73902: LD_EXP 49
73906: PUSH
73907: LD_VAR 0 2
73911: ARRAY
73912: NOT
73913: IFFALSE 73917
// break ;
73915: GO 74016
// if not HasTask ( j ) then
73917: LD_VAR 0 3
73921: PPUSH
73922: CALL_OW 314
73926: NOT
73927: IFFALSE 74014
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
73929: LD_VAR 0 3
73933: PPUSH
73934: LD_EXP 49
73938: PUSH
73939: LD_VAR 0 2
73943: ARRAY
73944: PUSH
73945: LD_INT 1
73947: ARRAY
73948: PUSH
73949: LD_INT 1
73951: ARRAY
73952: PPUSH
73953: LD_EXP 49
73957: PUSH
73958: LD_VAR 0 2
73962: ARRAY
73963: PUSH
73964: LD_INT 1
73966: ARRAY
73967: PUSH
73968: LD_INT 2
73970: ARRAY
73971: PPUSH
73972: LD_EXP 49
73976: PUSH
73977: LD_VAR 0 2
73981: ARRAY
73982: PUSH
73983: LD_INT 1
73985: ARRAY
73986: PUSH
73987: LD_INT 3
73989: ARRAY
73990: PPUSH
73991: LD_EXP 49
73995: PUSH
73996: LD_VAR 0 2
74000: ARRAY
74001: PUSH
74002: LD_INT 1
74004: ARRAY
74005: PUSH
74006: LD_INT 4
74008: ARRAY
74009: PPUSH
74010: CALL_OW 145
// end ;
74014: GO 73803
74016: POP
74017: POP
// end else
74018: GO 74162
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
74020: LD_EXP 44
74024: PUSH
74025: LD_VAR 0 2
74029: ARRAY
74030: PPUSH
74031: LD_EXP 49
74035: PUSH
74036: LD_VAR 0 2
74040: ARRAY
74041: PUSH
74042: LD_INT 1
74044: ARRAY
74045: PUSH
74046: LD_INT 1
74048: ARRAY
74049: PPUSH
74050: LD_EXP 49
74054: PUSH
74055: LD_VAR 0 2
74059: ARRAY
74060: PUSH
74061: LD_INT 1
74063: ARRAY
74064: PUSH
74065: LD_INT 2
74067: ARRAY
74068: PPUSH
74069: LD_EXP 49
74073: PUSH
74074: LD_VAR 0 2
74078: ARRAY
74079: PUSH
74080: LD_INT 1
74082: ARRAY
74083: PUSH
74084: LD_INT 3
74086: ARRAY
74087: PPUSH
74088: LD_EXP 49
74092: PUSH
74093: LD_VAR 0 2
74097: ARRAY
74098: PUSH
74099: LD_INT 1
74101: ARRAY
74102: PUSH
74103: LD_INT 4
74105: ARRAY
74106: PPUSH
74107: CALL 33463 0 5
74111: NOT
74112: IFFALSE 74162
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
74114: LD_ADDR_EXP 49
74118: PUSH
74119: LD_EXP 49
74123: PPUSH
74124: LD_VAR 0 2
74128: PPUSH
74129: LD_EXP 49
74133: PUSH
74134: LD_VAR 0 2
74138: ARRAY
74139: PPUSH
74140: LD_INT 1
74142: PPUSH
74143: LD_INT 1
74145: NEG
74146: PPUSH
74147: LD_INT 0
74149: PPUSH
74150: CALL 26130 0 4
74154: PPUSH
74155: CALL_OW 1
74159: ST_TO_ADDR
// continue ;
74160: GO 73038
// end ; end ; end ;
74162: GO 73038
74164: POP
74165: POP
// end ;
74166: LD_VAR 0 1
74170: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
74171: LD_INT 0
74173: PPUSH
74174: PPUSH
74175: PPUSH
74176: PPUSH
74177: PPUSH
74178: PPUSH
// if not mc_bases then
74179: LD_EXP 44
74183: NOT
74184: IFFALSE 74188
// exit ;
74186: GO 74615
// for i = 1 to mc_bases do
74188: LD_ADDR_VAR 0 2
74192: PUSH
74193: DOUBLE
74194: LD_INT 1
74196: DEC
74197: ST_TO_ADDR
74198: LD_EXP 44
74202: PUSH
74203: FOR_TO
74204: IFFALSE 74613
// begin tmp := mc_build_upgrade [ i ] ;
74206: LD_ADDR_VAR 0 4
74210: PUSH
74211: LD_EXP 76
74215: PUSH
74216: LD_VAR 0 2
74220: ARRAY
74221: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
74222: LD_ADDR_VAR 0 6
74226: PUSH
74227: LD_EXP 77
74231: PUSH
74232: LD_VAR 0 2
74236: ARRAY
74237: PPUSH
74238: LD_INT 2
74240: PUSH
74241: LD_INT 30
74243: PUSH
74244: LD_INT 6
74246: PUSH
74247: EMPTY
74248: LIST
74249: LIST
74250: PUSH
74251: LD_INT 30
74253: PUSH
74254: LD_INT 7
74256: PUSH
74257: EMPTY
74258: LIST
74259: LIST
74260: PUSH
74261: EMPTY
74262: LIST
74263: LIST
74264: LIST
74265: PPUSH
74266: CALL_OW 72
74270: ST_TO_ADDR
// if not tmp and not lab then
74271: LD_VAR 0 4
74275: NOT
74276: PUSH
74277: LD_VAR 0 6
74281: NOT
74282: AND
74283: IFFALSE 74287
// continue ;
74285: GO 74203
// if tmp then
74287: LD_VAR 0 4
74291: IFFALSE 74411
// for j in tmp do
74293: LD_ADDR_VAR 0 3
74297: PUSH
74298: LD_VAR 0 4
74302: PUSH
74303: FOR_IN
74304: IFFALSE 74409
// begin if UpgradeCost ( j ) then
74306: LD_VAR 0 3
74310: PPUSH
74311: CALL 33123 0 1
74315: IFFALSE 74407
// begin ComUpgrade ( j ) ;
74317: LD_VAR 0 3
74321: PPUSH
74322: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
74326: LD_ADDR_EXP 76
74330: PUSH
74331: LD_EXP 76
74335: PPUSH
74336: LD_VAR 0 2
74340: PPUSH
74341: LD_EXP 76
74345: PUSH
74346: LD_VAR 0 2
74350: ARRAY
74351: PUSH
74352: LD_VAR 0 3
74356: DIFF
74357: PPUSH
74358: CALL_OW 1
74362: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
74363: LD_ADDR_EXP 51
74367: PUSH
74368: LD_EXP 51
74372: PPUSH
74373: LD_VAR 0 2
74377: PUSH
74378: LD_EXP 51
74382: PUSH
74383: LD_VAR 0 2
74387: ARRAY
74388: PUSH
74389: LD_INT 1
74391: PLUS
74392: PUSH
74393: EMPTY
74394: LIST
74395: LIST
74396: PPUSH
74397: LD_VAR 0 3
74401: PPUSH
74402: CALL 26712 0 3
74406: ST_TO_ADDR
// end ; end ;
74407: GO 74303
74409: POP
74410: POP
// if not lab or not mc_lab_upgrade [ i ] then
74411: LD_VAR 0 6
74415: NOT
74416: PUSH
74417: LD_EXP 78
74421: PUSH
74422: LD_VAR 0 2
74426: ARRAY
74427: NOT
74428: OR
74429: IFFALSE 74433
// continue ;
74431: GO 74203
// for j in lab do
74433: LD_ADDR_VAR 0 3
74437: PUSH
74438: LD_VAR 0 6
74442: PUSH
74443: FOR_IN
74444: IFFALSE 74609
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
74446: LD_VAR 0 3
74450: PPUSH
74451: CALL_OW 266
74455: PUSH
74456: LD_INT 6
74458: PUSH
74459: LD_INT 7
74461: PUSH
74462: EMPTY
74463: LIST
74464: LIST
74465: IN
74466: PUSH
74467: LD_VAR 0 3
74471: PPUSH
74472: CALL_OW 461
74476: PUSH
74477: LD_INT 1
74479: NONEQUAL
74480: AND
74481: IFFALSE 74607
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
74483: LD_VAR 0 3
74487: PPUSH
74488: LD_EXP 78
74492: PUSH
74493: LD_VAR 0 2
74497: ARRAY
74498: PUSH
74499: LD_INT 1
74501: ARRAY
74502: PPUSH
74503: CALL 33328 0 2
74507: IFFALSE 74607
// begin ComCancel ( j ) ;
74509: LD_VAR 0 3
74513: PPUSH
74514: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
74518: LD_VAR 0 3
74522: PPUSH
74523: LD_EXP 78
74527: PUSH
74528: LD_VAR 0 2
74532: ARRAY
74533: PUSH
74534: LD_INT 1
74536: ARRAY
74537: PPUSH
74538: CALL_OW 207
// if not j in mc_construct_list [ i ] then
74542: LD_VAR 0 3
74546: PUSH
74547: LD_EXP 51
74551: PUSH
74552: LD_VAR 0 2
74556: ARRAY
74557: IN
74558: NOT
74559: IFFALSE 74605
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
74561: LD_ADDR_EXP 51
74565: PUSH
74566: LD_EXP 51
74570: PPUSH
74571: LD_VAR 0 2
74575: PUSH
74576: LD_EXP 51
74580: PUSH
74581: LD_VAR 0 2
74585: ARRAY
74586: PUSH
74587: LD_INT 1
74589: PLUS
74590: PUSH
74591: EMPTY
74592: LIST
74593: LIST
74594: PPUSH
74595: LD_VAR 0 3
74599: PPUSH
74600: CALL 26712 0 3
74604: ST_TO_ADDR
// break ;
74605: GO 74609
// end ; end ; end ;
74607: GO 74443
74609: POP
74610: POP
// end ;
74611: GO 74203
74613: POP
74614: POP
// end ;
74615: LD_VAR 0 1
74619: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , tmp2 , t , tw , busy , weapon ; begin
74620: LD_INT 0
74622: PPUSH
74623: PPUSH
74624: PPUSH
74625: PPUSH
74626: PPUSH
74627: PPUSH
74628: PPUSH
74629: PPUSH
74630: PPUSH
// if not mc_bases then
74631: LD_EXP 44
74635: NOT
74636: IFFALSE 74640
// exit ;
74638: GO 75045
// for i = 1 to mc_bases do
74640: LD_ADDR_VAR 0 2
74644: PUSH
74645: DOUBLE
74646: LD_INT 1
74648: DEC
74649: ST_TO_ADDR
74650: LD_EXP 44
74654: PUSH
74655: FOR_TO
74656: IFFALSE 75043
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
74658: LD_EXP 52
74662: PUSH
74663: LD_VAR 0 2
74667: ARRAY
74668: NOT
74669: PUSH
74670: LD_EXP 44
74674: PUSH
74675: LD_VAR 0 2
74679: ARRAY
74680: PPUSH
74681: LD_INT 30
74683: PUSH
74684: LD_INT 3
74686: PUSH
74687: EMPTY
74688: LIST
74689: LIST
74690: PPUSH
74691: CALL_OW 72
74695: NOT
74696: OR
74697: IFFALSE 74701
// continue ;
74699: GO 74655
// busy := false ;
74701: LD_ADDR_VAR 0 8
74705: PUSH
74706: LD_INT 0
74708: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
74709: LD_ADDR_VAR 0 4
74713: PUSH
74714: LD_EXP 44
74718: PUSH
74719: LD_VAR 0 2
74723: ARRAY
74724: PPUSH
74725: LD_INT 30
74727: PUSH
74728: LD_INT 3
74730: PUSH
74731: EMPTY
74732: LIST
74733: LIST
74734: PPUSH
74735: CALL_OW 72
74739: ST_TO_ADDR
// t := UnitFilter ( mc_turret_list [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ;
74740: LD_ADDR_VAR 0 6
74744: PUSH
74745: LD_EXP 52
74749: PUSH
74750: LD_VAR 0 2
74754: ARRAY
74755: PPUSH
74756: LD_INT 2
74758: PUSH
74759: LD_INT 30
74761: PUSH
74762: LD_INT 32
74764: PUSH
74765: EMPTY
74766: LIST
74767: LIST
74768: PUSH
74769: LD_INT 30
74771: PUSH
74772: LD_INT 33
74774: PUSH
74775: EMPTY
74776: LIST
74777: LIST
74778: PUSH
74779: EMPTY
74780: LIST
74781: LIST
74782: LIST
74783: PPUSH
74784: CALL_OW 72
74788: ST_TO_ADDR
// if not t then
74789: LD_VAR 0 6
74793: NOT
74794: IFFALSE 74798
// continue ;
74796: GO 74655
// for j in tmp do
74798: LD_ADDR_VAR 0 3
74802: PUSH
74803: LD_VAR 0 4
74807: PUSH
74808: FOR_IN
74809: IFFALSE 74839
// if not BuildingStatus ( j ) = bs_idle then
74811: LD_VAR 0 3
74815: PPUSH
74816: CALL_OW 461
74820: PUSH
74821: LD_INT 2
74823: EQUAL
74824: NOT
74825: IFFALSE 74837
// begin busy := true ;
74827: LD_ADDR_VAR 0 8
74831: PUSH
74832: LD_INT 1
74834: ST_TO_ADDR
// break ;
74835: GO 74839
// end ;
74837: GO 74808
74839: POP
74840: POP
// if busy then
74841: LD_VAR 0 8
74845: IFFALSE 74849
// continue ;
74847: GO 74655
// tw := UnitFilter ( t , [ f_bweapon , 0 ] ) ;
74849: LD_ADDR_VAR 0 7
74853: PUSH
74854: LD_VAR 0 6
74858: PPUSH
74859: LD_INT 35
74861: PUSH
74862: LD_INT 0
74864: PUSH
74865: EMPTY
74866: LIST
74867: LIST
74868: PPUSH
74869: CALL_OW 72
74873: ST_TO_ADDR
// if tw then
74874: LD_VAR 0 7
74878: IFFALSE 74955
// begin tw := tw [ 1 ] ;
74880: LD_ADDR_VAR 0 7
74884: PUSH
74885: LD_VAR 0 7
74889: PUSH
74890: LD_INT 1
74892: ARRAY
74893: ST_TO_ADDR
// weapon := GetTurretWeapon ( tw , mc_scan_area [ i ] ) ;
74894: LD_ADDR_VAR 0 9
74898: PUSH
74899: LD_VAR 0 7
74903: PPUSH
74904: LD_EXP 69
74908: PUSH
74909: LD_VAR 0 2
74913: ARRAY
74914: PPUSH
74915: CALL 31682 0 2
74919: ST_TO_ADDR
// if mc_allowed_tower_weapons [ i ] then
74920: LD_EXP 83
74924: PUSH
74925: LD_VAR 0 2
74929: ARRAY
74930: IFFALSE 74953
// if not weapon in mc_allowed_tower_weapons [ i ] then
74932: LD_VAR 0 9
74936: PUSH
74937: LD_EXP 83
74941: PUSH
74942: LD_VAR 0 2
74946: ARRAY
74947: IN
74948: NOT
74949: IFFALSE 74953
// continue ;
74951: GO 74655
// end else
74953: GO 75018
// begin tmp2 := UpgradeTurretsWeapon ( mc_turret_list [ i ] , tmp ) ;
74955: LD_ADDR_VAR 0 5
74959: PUSH
74960: LD_EXP 52
74964: PUSH
74965: LD_VAR 0 2
74969: ARRAY
74970: PPUSH
74971: LD_VAR 0 4
74975: PPUSH
74976: CALL 61893 0 2
74980: ST_TO_ADDR
// if not tmp2 then
74981: LD_VAR 0 5
74985: NOT
74986: IFFALSE 74990
// continue ;
74988: GO 74655
// tw := tmp2 [ 1 ] ;
74990: LD_ADDR_VAR 0 7
74994: PUSH
74995: LD_VAR 0 5
74999: PUSH
75000: LD_INT 1
75002: ARRAY
75003: ST_TO_ADDR
// weapon := tmp2 [ 2 ] ;
75004: LD_ADDR_VAR 0 9
75008: PUSH
75009: LD_VAR 0 5
75013: PUSH
75014: LD_INT 2
75016: ARRAY
75017: ST_TO_ADDR
// end ; if not weapon then
75018: LD_VAR 0 9
75022: NOT
75023: IFFALSE 75027
// continue ;
75025: GO 74655
// ComPlaceWeapon ( tw , weapon ) ;
75027: LD_VAR 0 7
75031: PPUSH
75032: LD_VAR 0 9
75036: PPUSH
75037: CALL_OW 148
// end ;
75041: GO 74655
75043: POP
75044: POP
// end ;
75045: LD_VAR 0 1
75049: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
75050: LD_INT 0
75052: PPUSH
75053: PPUSH
75054: PPUSH
75055: PPUSH
75056: PPUSH
75057: PPUSH
// if not mc_bases then
75058: LD_EXP 44
75062: NOT
75063: IFFALSE 75067
// exit ;
75065: GO 75843
// for i = 1 to mc_bases do
75067: LD_ADDR_VAR 0 2
75071: PUSH
75072: DOUBLE
75073: LD_INT 1
75075: DEC
75076: ST_TO_ADDR
75077: LD_EXP 44
75081: PUSH
75082: FOR_TO
75083: IFFALSE 75841
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] or mc_scan [ i ] then
75085: LD_EXP 57
75089: PUSH
75090: LD_VAR 0 2
75094: ARRAY
75095: NOT
75096: PUSH
75097: LD_EXP 57
75101: PUSH
75102: LD_VAR 0 2
75106: ARRAY
75107: PUSH
75108: LD_EXP 58
75112: PUSH
75113: LD_VAR 0 2
75117: ARRAY
75118: EQUAL
75119: OR
75120: PUSH
75121: LD_EXP 67
75125: PUSH
75126: LD_VAR 0 2
75130: ARRAY
75131: OR
75132: IFFALSE 75136
// continue ;
75134: GO 75082
// if mc_miners [ i ] then
75136: LD_EXP 58
75140: PUSH
75141: LD_VAR 0 2
75145: ARRAY
75146: IFFALSE 75528
// begin for j = mc_miners [ i ] downto 1 do
75148: LD_ADDR_VAR 0 3
75152: PUSH
75153: DOUBLE
75154: LD_EXP 58
75158: PUSH
75159: LD_VAR 0 2
75163: ARRAY
75164: INC
75165: ST_TO_ADDR
75166: LD_INT 1
75168: PUSH
75169: FOR_DOWNTO
75170: IFFALSE 75526
// begin if IsDead ( mc_miners [ i ] [ j ] ) or GetClass ( mc_miners [ i ] [ j ] ) <> 1 then
75172: LD_EXP 58
75176: PUSH
75177: LD_VAR 0 2
75181: ARRAY
75182: PUSH
75183: LD_VAR 0 3
75187: ARRAY
75188: PPUSH
75189: CALL_OW 301
75193: PUSH
75194: LD_EXP 58
75198: PUSH
75199: LD_VAR 0 2
75203: ARRAY
75204: PUSH
75205: LD_VAR 0 3
75209: ARRAY
75210: PPUSH
75211: CALL_OW 257
75215: PUSH
75216: LD_INT 1
75218: NONEQUAL
75219: OR
75220: IFFALSE 75283
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
75222: LD_ADDR_VAR 0 5
75226: PUSH
75227: LD_EXP 58
75231: PUSH
75232: LD_VAR 0 2
75236: ARRAY
75237: PUSH
75238: LD_EXP 58
75242: PUSH
75243: LD_VAR 0 2
75247: ARRAY
75248: PUSH
75249: LD_VAR 0 3
75253: ARRAY
75254: DIFF
75255: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
75256: LD_ADDR_EXP 58
75260: PUSH
75261: LD_EXP 58
75265: PPUSH
75266: LD_VAR 0 2
75270: PPUSH
75271: LD_VAR 0 5
75275: PPUSH
75276: CALL_OW 1
75280: ST_TO_ADDR
// continue ;
75281: GO 75169
// end ; if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and not HasTask ( mc_miners [ i ] [ j ] ) then
75283: LD_EXP 58
75287: PUSH
75288: LD_VAR 0 2
75292: ARRAY
75293: PUSH
75294: LD_VAR 0 3
75298: ARRAY
75299: PPUSH
75300: CALL_OW 257
75304: PUSH
75305: LD_INT 1
75307: EQUAL
75308: PUSH
75309: LD_EXP 58
75313: PUSH
75314: LD_VAR 0 2
75318: ARRAY
75319: PUSH
75320: LD_VAR 0 3
75324: ARRAY
75325: PPUSH
75326: CALL_OW 459
75330: NOT
75331: AND
75332: PUSH
75333: LD_EXP 58
75337: PUSH
75338: LD_VAR 0 2
75342: ARRAY
75343: PUSH
75344: LD_VAR 0 3
75348: ARRAY
75349: PPUSH
75350: CALL_OW 314
75354: NOT
75355: AND
75356: IFFALSE 75524
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
75358: LD_EXP 58
75362: PUSH
75363: LD_VAR 0 2
75367: ARRAY
75368: PUSH
75369: LD_VAR 0 3
75373: ARRAY
75374: PPUSH
75375: CALL_OW 310
75379: IFFALSE 75402
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
75381: LD_EXP 58
75385: PUSH
75386: LD_VAR 0 2
75390: ARRAY
75391: PUSH
75392: LD_VAR 0 3
75396: ARRAY
75397: PPUSH
75398: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
75402: LD_EXP 58
75406: PUSH
75407: LD_VAR 0 2
75411: ARRAY
75412: PUSH
75413: LD_VAR 0 3
75417: ARRAY
75418: PPUSH
75419: CALL_OW 314
75423: NOT
75424: IFFALSE 75524
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ j mod mc_mines [ i ] + 1 ] [ 1 ] , mc_mines [ i ] [ j mod mc_mines [ i ] + 1 ] [ 2 ] , 0 ) ;
75426: LD_EXP 58
75430: PUSH
75431: LD_VAR 0 2
75435: ARRAY
75436: PUSH
75437: LD_VAR 0 3
75441: ARRAY
75442: PPUSH
75443: LD_EXP 57
75447: PUSH
75448: LD_VAR 0 2
75452: ARRAY
75453: PUSH
75454: LD_VAR 0 3
75458: PUSH
75459: LD_EXP 57
75463: PUSH
75464: LD_VAR 0 2
75468: ARRAY
75469: MOD
75470: PUSH
75471: LD_INT 1
75473: PLUS
75474: ARRAY
75475: PUSH
75476: LD_INT 1
75478: ARRAY
75479: PPUSH
75480: LD_EXP 57
75484: PUSH
75485: LD_VAR 0 2
75489: ARRAY
75490: PUSH
75491: LD_VAR 0 3
75495: PUSH
75496: LD_EXP 57
75500: PUSH
75501: LD_VAR 0 2
75505: ARRAY
75506: MOD
75507: PUSH
75508: LD_INT 1
75510: PLUS
75511: ARRAY
75512: PUSH
75513: LD_INT 2
75515: ARRAY
75516: PPUSH
75517: LD_INT 0
75519: PPUSH
75520: CALL_OW 193
// end ; end ;
75524: GO 75169
75526: POP
75527: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
75528: LD_ADDR_VAR 0 5
75532: PUSH
75533: LD_EXP 44
75537: PUSH
75538: LD_VAR 0 2
75542: ARRAY
75543: PPUSH
75544: LD_INT 2
75546: PUSH
75547: LD_INT 30
75549: PUSH
75550: LD_INT 4
75552: PUSH
75553: EMPTY
75554: LIST
75555: LIST
75556: PUSH
75557: LD_INT 30
75559: PUSH
75560: LD_INT 5
75562: PUSH
75563: EMPTY
75564: LIST
75565: LIST
75566: PUSH
75567: LD_INT 30
75569: PUSH
75570: LD_INT 32
75572: PUSH
75573: EMPTY
75574: LIST
75575: LIST
75576: PUSH
75577: EMPTY
75578: LIST
75579: LIST
75580: LIST
75581: LIST
75582: PPUSH
75583: CALL_OW 72
75587: ST_TO_ADDR
// if not tmp then
75588: LD_VAR 0 5
75592: NOT
75593: IFFALSE 75597
// continue ;
75595: GO 75082
// list := [ ] ;
75597: LD_ADDR_VAR 0 6
75601: PUSH
75602: EMPTY
75603: ST_TO_ADDR
// for j in tmp do
75604: LD_ADDR_VAR 0 3
75608: PUSH
75609: LD_VAR 0 5
75613: PUSH
75614: FOR_IN
75615: IFFALSE 75684
// begin for k in UnitsInside ( j ) do
75617: LD_ADDR_VAR 0 4
75621: PUSH
75622: LD_VAR 0 3
75626: PPUSH
75627: CALL_OW 313
75631: PUSH
75632: FOR_IN
75633: IFFALSE 75680
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
75635: LD_VAR 0 4
75639: PPUSH
75640: CALL_OW 257
75644: PUSH
75645: LD_INT 1
75647: EQUAL
75648: PUSH
75649: LD_VAR 0 4
75653: PPUSH
75654: CALL_OW 459
75658: NOT
75659: AND
75660: IFFALSE 75678
// list := list ^ k ;
75662: LD_ADDR_VAR 0 6
75666: PUSH
75667: LD_VAR 0 6
75671: PUSH
75672: LD_VAR 0 4
75676: ADD
75677: ST_TO_ADDR
75678: GO 75632
75680: POP
75681: POP
// end ;
75682: GO 75614
75684: POP
75685: POP
// list := list diff mc_miners [ i ] ;
75686: LD_ADDR_VAR 0 6
75690: PUSH
75691: LD_VAR 0 6
75695: PUSH
75696: LD_EXP 58
75700: PUSH
75701: LD_VAR 0 2
75705: ARRAY
75706: DIFF
75707: ST_TO_ADDR
// if not list then
75708: LD_VAR 0 6
75712: NOT
75713: IFFALSE 75717
// continue ;
75715: GO 75082
// k := mc_mines [ i ] - mc_miners [ i ] ;
75717: LD_ADDR_VAR 0 4
75721: PUSH
75722: LD_EXP 57
75726: PUSH
75727: LD_VAR 0 2
75731: ARRAY
75732: PUSH
75733: LD_EXP 58
75737: PUSH
75738: LD_VAR 0 2
75742: ARRAY
75743: MINUS
75744: ST_TO_ADDR
// if k > list then
75745: LD_VAR 0 4
75749: PUSH
75750: LD_VAR 0 6
75754: GREATER
75755: IFFALSE 75767
// k := list ;
75757: LD_ADDR_VAR 0 4
75761: PUSH
75762: LD_VAR 0 6
75766: ST_TO_ADDR
// for j = 1 to k do
75767: LD_ADDR_VAR 0 3
75771: PUSH
75772: DOUBLE
75773: LD_INT 1
75775: DEC
75776: ST_TO_ADDR
75777: LD_VAR 0 4
75781: PUSH
75782: FOR_TO
75783: IFFALSE 75837
// mc_miners := ReplaceIn ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
75785: LD_ADDR_EXP 58
75789: PUSH
75790: LD_EXP 58
75794: PPUSH
75795: LD_VAR 0 2
75799: PUSH
75800: LD_EXP 58
75804: PUSH
75805: LD_VAR 0 2
75809: ARRAY
75810: PUSH
75811: LD_INT 1
75813: PLUS
75814: PUSH
75815: EMPTY
75816: LIST
75817: LIST
75818: PPUSH
75819: LD_VAR 0 6
75823: PUSH
75824: LD_VAR 0 3
75828: ARRAY
75829: PPUSH
75830: CALL 26712 0 3
75834: ST_TO_ADDR
75835: GO 75782
75837: POP
75838: POP
// end ;
75839: GO 75082
75841: POP
75842: POP
// end ;
75843: LD_VAR 0 1
75847: RET
// export function MC_CollectCrates ( ) ; var i , j , k , tmp , target , cargo , depot , fac , components ; begin
75848: LD_INT 0
75850: PPUSH
75851: PPUSH
75852: PPUSH
75853: PPUSH
75854: PPUSH
75855: PPUSH
75856: PPUSH
75857: PPUSH
75858: PPUSH
75859: PPUSH
// if not mc_bases then
75860: LD_EXP 44
75864: NOT
75865: IFFALSE 75869
// exit ;
75867: GO 77619
// for i = 1 to mc_bases do
75869: LD_ADDR_VAR 0 2
75873: PUSH
75874: DOUBLE
75875: LD_INT 1
75877: DEC
75878: ST_TO_ADDR
75879: LD_EXP 44
75883: PUSH
75884: FOR_TO
75885: IFFALSE 77617
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
75887: LD_EXP 44
75891: PUSH
75892: LD_VAR 0 2
75896: ARRAY
75897: NOT
75898: PUSH
75899: LD_EXP 51
75903: PUSH
75904: LD_VAR 0 2
75908: ARRAY
75909: OR
75910: IFFALSE 75914
// continue ;
75912: GO 75884
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
75914: LD_EXP 60
75918: PUSH
75919: LD_VAR 0 2
75923: ARRAY
75924: NOT
75925: PUSH
75926: LD_EXP 61
75930: PUSH
75931: LD_VAR 0 2
75935: ARRAY
75936: AND
75937: IFFALSE 75975
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
75939: LD_ADDR_EXP 61
75943: PUSH
75944: LD_EXP 61
75948: PPUSH
75949: LD_VAR 0 2
75953: PPUSH
75954: EMPTY
75955: PPUSH
75956: CALL_OW 1
75960: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
75961: LD_VAR 0 2
75965: PPUSH
75966: LD_INT 107
75968: PPUSH
75969: CALL 66833 0 2
// continue ;
75973: GO 75884
// end ; target := [ ] ;
75975: LD_ADDR_VAR 0 6
75979: PUSH
75980: EMPTY
75981: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
75982: LD_ADDR_VAR 0 3
75986: PUSH
75987: DOUBLE
75988: LD_EXP 60
75992: PUSH
75993: LD_VAR 0 2
75997: ARRAY
75998: INC
75999: ST_TO_ADDR
76000: LD_INT 1
76002: PUSH
76003: FOR_DOWNTO
76004: IFFALSE 76264
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
76006: LD_EXP 60
76010: PUSH
76011: LD_VAR 0 2
76015: ARRAY
76016: PUSH
76017: LD_VAR 0 3
76021: ARRAY
76022: PUSH
76023: LD_INT 2
76025: ARRAY
76026: PPUSH
76027: LD_EXP 60
76031: PUSH
76032: LD_VAR 0 2
76036: ARRAY
76037: PUSH
76038: LD_VAR 0 3
76042: ARRAY
76043: PUSH
76044: LD_INT 3
76046: ARRAY
76047: PPUSH
76048: CALL_OW 488
76052: PUSH
76053: LD_EXP 60
76057: PUSH
76058: LD_VAR 0 2
76062: ARRAY
76063: PUSH
76064: LD_VAR 0 3
76068: ARRAY
76069: PUSH
76070: LD_INT 2
76072: ARRAY
76073: PPUSH
76074: LD_EXP 60
76078: PUSH
76079: LD_VAR 0 2
76083: ARRAY
76084: PUSH
76085: LD_VAR 0 3
76089: ARRAY
76090: PUSH
76091: LD_INT 3
76093: ARRAY
76094: PPUSH
76095: CALL_OW 284
76099: PUSH
76100: LD_INT 0
76102: EQUAL
76103: AND
76104: IFFALSE 76159
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
76106: LD_ADDR_VAR 0 5
76110: PUSH
76111: LD_EXP 60
76115: PUSH
76116: LD_VAR 0 2
76120: ARRAY
76121: PPUSH
76122: LD_VAR 0 3
76126: PPUSH
76127: CALL_OW 3
76131: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
76132: LD_ADDR_EXP 60
76136: PUSH
76137: LD_EXP 60
76141: PPUSH
76142: LD_VAR 0 2
76146: PPUSH
76147: LD_VAR 0 5
76151: PPUSH
76152: CALL_OW 1
76156: ST_TO_ADDR
// continue ;
76157: GO 76003
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 30 ) [ 4 ] = 0 then
76159: LD_EXP 44
76163: PUSH
76164: LD_VAR 0 2
76168: ARRAY
76169: PUSH
76170: LD_INT 1
76172: ARRAY
76173: PPUSH
76174: CALL_OW 255
76178: PPUSH
76179: LD_EXP 60
76183: PUSH
76184: LD_VAR 0 2
76188: ARRAY
76189: PUSH
76190: LD_VAR 0 3
76194: ARRAY
76195: PUSH
76196: LD_INT 2
76198: ARRAY
76199: PPUSH
76200: LD_EXP 60
76204: PUSH
76205: LD_VAR 0 2
76209: ARRAY
76210: PUSH
76211: LD_VAR 0 3
76215: ARRAY
76216: PUSH
76217: LD_INT 3
76219: ARRAY
76220: PPUSH
76221: LD_INT 30
76223: PPUSH
76224: CALL 27608 0 4
76228: PUSH
76229: LD_INT 4
76231: ARRAY
76232: PUSH
76233: LD_INT 0
76235: EQUAL
76236: IFFALSE 76262
// begin target := mc_crates [ i ] [ j ] ;
76238: LD_ADDR_VAR 0 6
76242: PUSH
76243: LD_EXP 60
76247: PUSH
76248: LD_VAR 0 2
76252: ARRAY
76253: PUSH
76254: LD_VAR 0 3
76258: ARRAY
76259: ST_TO_ADDR
// break ;
76260: GO 76264
// end ; end ;
76262: GO 76003
76264: POP
76265: POP
// if not target then
76266: LD_VAR 0 6
76270: NOT
76271: IFFALSE 76275
// continue ;
76273: GO 75884
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
76275: LD_ADDR_VAR 0 7
76279: PUSH
76280: LD_EXP 63
76284: PUSH
76285: LD_VAR 0 2
76289: ARRAY
76290: PPUSH
76291: LD_INT 2
76293: PUSH
76294: LD_INT 3
76296: PUSH
76297: LD_INT 58
76299: PUSH
76300: EMPTY
76301: LIST
76302: PUSH
76303: EMPTY
76304: LIST
76305: LIST
76306: PUSH
76307: LD_INT 61
76309: PUSH
76310: EMPTY
76311: LIST
76312: PUSH
76313: LD_INT 33
76315: PUSH
76316: LD_INT 5
76318: PUSH
76319: EMPTY
76320: LIST
76321: LIST
76322: PUSH
76323: LD_INT 33
76325: PUSH
76326: LD_INT 3
76328: PUSH
76329: EMPTY
76330: LIST
76331: LIST
76332: PUSH
76333: EMPTY
76334: LIST
76335: LIST
76336: LIST
76337: LIST
76338: LIST
76339: PUSH
76340: LD_INT 2
76342: PUSH
76343: LD_INT 34
76345: PUSH
76346: LD_INT 32
76348: PUSH
76349: EMPTY
76350: LIST
76351: LIST
76352: PUSH
76353: LD_INT 34
76355: PUSH
76356: LD_INT 51
76358: PUSH
76359: EMPTY
76360: LIST
76361: LIST
76362: PUSH
76363: LD_INT 34
76365: PUSH
76366: LD_INT 12
76368: PUSH
76369: EMPTY
76370: LIST
76371: LIST
76372: PUSH
76373: EMPTY
76374: LIST
76375: LIST
76376: LIST
76377: LIST
76378: PUSH
76379: EMPTY
76380: LIST
76381: LIST
76382: PPUSH
76383: CALL_OW 72
76387: ST_TO_ADDR
// if not cargo then
76388: LD_VAR 0 7
76392: NOT
76393: IFFALSE 77036
// begin if mc_crates_collector [ i ] < 5 then
76395: LD_EXP 61
76399: PUSH
76400: LD_VAR 0 2
76404: ARRAY
76405: PUSH
76406: LD_INT 5
76408: LESS
76409: IFFALSE 76775
// begin if mc_ape [ i ] then
76411: LD_EXP 73
76415: PUSH
76416: LD_VAR 0 2
76420: ARRAY
76421: IFFALSE 76468
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
76423: LD_ADDR_VAR 0 5
76427: PUSH
76428: LD_EXP 73
76432: PUSH
76433: LD_VAR 0 2
76437: ARRAY
76438: PPUSH
76439: LD_INT 25
76441: PUSH
76442: LD_INT 16
76444: PUSH
76445: EMPTY
76446: LIST
76447: LIST
76448: PUSH
76449: LD_INT 24
76451: PUSH
76452: LD_INT 750
76454: PUSH
76455: EMPTY
76456: LIST
76457: LIST
76458: PUSH
76459: EMPTY
76460: LIST
76461: LIST
76462: PPUSH
76463: CALL_OW 72
76467: ST_TO_ADDR
// if not tmp then
76468: LD_VAR 0 5
76472: NOT
76473: IFFALSE 76520
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
76475: LD_ADDR_VAR 0 5
76479: PUSH
76480: LD_EXP 44
76484: PUSH
76485: LD_VAR 0 2
76489: ARRAY
76490: PPUSH
76491: LD_INT 25
76493: PUSH
76494: LD_INT 2
76496: PUSH
76497: EMPTY
76498: LIST
76499: LIST
76500: PUSH
76501: LD_INT 24
76503: PUSH
76504: LD_INT 750
76506: PUSH
76507: EMPTY
76508: LIST
76509: LIST
76510: PUSH
76511: EMPTY
76512: LIST
76513: LIST
76514: PPUSH
76515: CALL_OW 72
76519: ST_TO_ADDR
// if mc_ape [ i ] and UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) and tmp < 5 then
76520: LD_EXP 73
76524: PUSH
76525: LD_VAR 0 2
76529: ARRAY
76530: PUSH
76531: LD_EXP 44
76535: PUSH
76536: LD_VAR 0 2
76540: ARRAY
76541: PPUSH
76542: LD_INT 25
76544: PUSH
76545: LD_INT 2
76547: PUSH
76548: EMPTY
76549: LIST
76550: LIST
76551: PUSH
76552: LD_INT 24
76554: PUSH
76555: LD_INT 750
76557: PUSH
76558: EMPTY
76559: LIST
76560: LIST
76561: PUSH
76562: EMPTY
76563: LIST
76564: LIST
76565: PPUSH
76566: CALL_OW 72
76570: AND
76571: PUSH
76572: LD_VAR 0 5
76576: PUSH
76577: LD_INT 5
76579: LESS
76580: AND
76581: IFFALSE 76663
// begin for j in UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) do
76583: LD_ADDR_VAR 0 3
76587: PUSH
76588: LD_EXP 44
76592: PUSH
76593: LD_VAR 0 2
76597: ARRAY
76598: PPUSH
76599: LD_INT 25
76601: PUSH
76602: LD_INT 2
76604: PUSH
76605: EMPTY
76606: LIST
76607: LIST
76608: PUSH
76609: LD_INT 24
76611: PUSH
76612: LD_INT 750
76614: PUSH
76615: EMPTY
76616: LIST
76617: LIST
76618: PUSH
76619: EMPTY
76620: LIST
76621: LIST
76622: PPUSH
76623: CALL_OW 72
76627: PUSH
76628: FOR_IN
76629: IFFALSE 76661
// begin tmp := tmp union j ;
76631: LD_ADDR_VAR 0 5
76635: PUSH
76636: LD_VAR 0 5
76640: PUSH
76641: LD_VAR 0 3
76645: UNION
76646: ST_TO_ADDR
// if tmp >= 5 then
76647: LD_VAR 0 5
76651: PUSH
76652: LD_INT 5
76654: GREATEREQUAL
76655: IFFALSE 76659
// break ;
76657: GO 76661
// end ;
76659: GO 76628
76661: POP
76662: POP
// end ; if not tmp then
76663: LD_VAR 0 5
76667: NOT
76668: IFFALSE 76672
// continue ;
76670: GO 75884
// for j in tmp do
76672: LD_ADDR_VAR 0 3
76676: PUSH
76677: LD_VAR 0 5
76681: PUSH
76682: FOR_IN
76683: IFFALSE 76773
// if not GetTag ( j ) then
76685: LD_VAR 0 3
76689: PPUSH
76690: CALL_OW 110
76694: NOT
76695: IFFALSE 76771
// begin mc_crates_collector := ReplaceIn ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
76697: LD_ADDR_EXP 61
76701: PUSH
76702: LD_EXP 61
76706: PPUSH
76707: LD_VAR 0 2
76711: PUSH
76712: LD_EXP 61
76716: PUSH
76717: LD_VAR 0 2
76721: ARRAY
76722: PUSH
76723: LD_INT 1
76725: PLUS
76726: PUSH
76727: EMPTY
76728: LIST
76729: LIST
76730: PPUSH
76731: LD_VAR 0 3
76735: PPUSH
76736: CALL 26712 0 3
76740: ST_TO_ADDR
// SetTag ( j , 107 ) ;
76741: LD_VAR 0 3
76745: PPUSH
76746: LD_INT 107
76748: PPUSH
76749: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
76753: LD_EXP 61
76757: PUSH
76758: LD_VAR 0 2
76762: ARRAY
76763: PUSH
76764: LD_INT 5
76766: GREATEREQUAL
76767: IFFALSE 76771
// break ;
76769: GO 76773
// end ;
76771: GO 76682
76773: POP
76774: POP
// end ; if mc_crates_collector [ i ] and target then
76775: LD_EXP 61
76779: PUSH
76780: LD_VAR 0 2
76784: ARRAY
76785: PUSH
76786: LD_VAR 0 6
76790: AND
76791: IFFALSE 77034
// begin if mc_crates_collector [ i ] < target [ 1 ] then
76793: LD_EXP 61
76797: PUSH
76798: LD_VAR 0 2
76802: ARRAY
76803: PUSH
76804: LD_VAR 0 6
76808: PUSH
76809: LD_INT 1
76811: ARRAY
76812: LESS
76813: IFFALSE 76833
// tmp := mc_crates_collector [ i ] else
76815: LD_ADDR_VAR 0 5
76819: PUSH
76820: LD_EXP 61
76824: PUSH
76825: LD_VAR 0 2
76829: ARRAY
76830: ST_TO_ADDR
76831: GO 76847
// tmp := target [ 1 ] ;
76833: LD_ADDR_VAR 0 5
76837: PUSH
76838: LD_VAR 0 6
76842: PUSH
76843: LD_INT 1
76845: ARRAY
76846: ST_TO_ADDR
// k := 0 ;
76847: LD_ADDR_VAR 0 4
76851: PUSH
76852: LD_INT 0
76854: ST_TO_ADDR
// for j in mc_crates_collector [ i ] do
76855: LD_ADDR_VAR 0 3
76859: PUSH
76860: LD_EXP 61
76864: PUSH
76865: LD_VAR 0 2
76869: ARRAY
76870: PUSH
76871: FOR_IN
76872: IFFALSE 77032
// begin k := k + 1 ;
76874: LD_ADDR_VAR 0 4
76878: PUSH
76879: LD_VAR 0 4
76883: PUSH
76884: LD_INT 1
76886: PLUS
76887: ST_TO_ADDR
// if k > tmp then
76888: LD_VAR 0 4
76892: PUSH
76893: LD_VAR 0 5
76897: GREATER
76898: IFFALSE 76902
// break ;
76900: GO 77032
// if not GetClass ( j ) in [ 2 , 16 ] then
76902: LD_VAR 0 3
76906: PPUSH
76907: CALL_OW 257
76911: PUSH
76912: LD_INT 2
76914: PUSH
76915: LD_INT 16
76917: PUSH
76918: EMPTY
76919: LIST
76920: LIST
76921: IN
76922: NOT
76923: IFFALSE 76976
// begin mc_crates_collector := Replace ( mc_crates_collector , i , mc_crates_collector [ i ] diff j ) ;
76925: LD_ADDR_EXP 61
76929: PUSH
76930: LD_EXP 61
76934: PPUSH
76935: LD_VAR 0 2
76939: PPUSH
76940: LD_EXP 61
76944: PUSH
76945: LD_VAR 0 2
76949: ARRAY
76950: PUSH
76951: LD_VAR 0 3
76955: DIFF
76956: PPUSH
76957: CALL_OW 1
76961: ST_TO_ADDR
// SetTag ( j , 0 ) ;
76962: LD_VAR 0 3
76966: PPUSH
76967: LD_INT 0
76969: PPUSH
76970: CALL_OW 109
// continue ;
76974: GO 76871
// end ; if IsInUnit ( j ) then
76976: LD_VAR 0 3
76980: PPUSH
76981: CALL_OW 310
76985: IFFALSE 76996
// ComExitBuilding ( j ) ;
76987: LD_VAR 0 3
76991: PPUSH
76992: CALL_OW 122
// wait ( 3 ) ;
76996: LD_INT 3
76998: PPUSH
76999: CALL_OW 67
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
77003: LD_VAR 0 3
77007: PPUSH
77008: LD_VAR 0 6
77012: PUSH
77013: LD_INT 2
77015: ARRAY
77016: PPUSH
77017: LD_VAR 0 6
77021: PUSH
77022: LD_INT 3
77024: ARRAY
77025: PPUSH
77026: CALL_OW 117
// end ;
77030: GO 76871
77032: POP
77033: POP
// end ; end else
77034: GO 77615
// begin for j in cargo do
77036: LD_ADDR_VAR 0 3
77040: PUSH
77041: LD_VAR 0 7
77045: PUSH
77046: FOR_IN
77047: IFFALSE 77613
// begin if GetTag ( j ) <> 0 then
77049: LD_VAR 0 3
77053: PPUSH
77054: CALL_OW 110
77058: PUSH
77059: LD_INT 0
77061: NONEQUAL
77062: IFFALSE 77066
// continue ;
77064: GO 77046
// if GetLives ( j ) < 1000 and not IsInArea ( j , mc_parking [ i ] ) then
77066: LD_VAR 0 3
77070: PPUSH
77071: CALL_OW 256
77075: PUSH
77076: LD_INT 1000
77078: LESS
77079: PUSH
77080: LD_VAR 0 3
77084: PPUSH
77085: LD_EXP 68
77089: PUSH
77090: LD_VAR 0 2
77094: ARRAY
77095: PPUSH
77096: CALL_OW 308
77100: NOT
77101: AND
77102: IFFALSE 77124
// ComMoveToArea ( j , mc_parking [ i ] ) ;
77104: LD_VAR 0 3
77108: PPUSH
77109: LD_EXP 68
77113: PUSH
77114: LD_VAR 0 2
77118: ARRAY
77119: PPUSH
77120: CALL_OW 113
// if GetLives ( j ) < 1000 and IsInArea ( j , mc_parking [ i ] ) then
77124: LD_VAR 0 3
77128: PPUSH
77129: CALL_OW 256
77133: PUSH
77134: LD_INT 1000
77136: LESS
77137: PUSH
77138: LD_VAR 0 3
77142: PPUSH
77143: LD_EXP 68
77147: PUSH
77148: LD_VAR 0 2
77152: ARRAY
77153: PPUSH
77154: CALL_OW 308
77158: AND
77159: IFFALSE 77163
// continue ;
77161: GO 77046
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
77163: LD_VAR 0 3
77167: PPUSH
77168: CALL_OW 262
77172: PUSH
77173: LD_INT 2
77175: EQUAL
77176: PUSH
77177: LD_VAR 0 3
77181: PPUSH
77182: CALL_OW 261
77186: PUSH
77187: LD_INT 15
77189: LESS
77190: AND
77191: IFFALSE 77195
// continue ;
77193: GO 77046
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
77195: LD_VAR 0 3
77199: PPUSH
77200: CALL_OW 262
77204: PUSH
77205: LD_INT 1
77207: EQUAL
77208: PUSH
77209: LD_VAR 0 3
77213: PPUSH
77214: CALL_OW 261
77218: PUSH
77219: LD_INT 10
77221: LESS
77222: AND
77223: IFFALSE 77552
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
77225: LD_ADDR_VAR 0 8
77229: PUSH
77230: LD_EXP 44
77234: PUSH
77235: LD_VAR 0 2
77239: ARRAY
77240: PPUSH
77241: LD_INT 2
77243: PUSH
77244: LD_INT 30
77246: PUSH
77247: LD_INT 0
77249: PUSH
77250: EMPTY
77251: LIST
77252: LIST
77253: PUSH
77254: LD_INT 30
77256: PUSH
77257: LD_INT 1
77259: PUSH
77260: EMPTY
77261: LIST
77262: LIST
77263: PUSH
77264: EMPTY
77265: LIST
77266: LIST
77267: LIST
77268: PPUSH
77269: CALL_OW 72
77273: ST_TO_ADDR
// if not depot then
77274: LD_VAR 0 8
77278: NOT
77279: IFFALSE 77283
// continue ;
77281: GO 77046
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
77283: LD_VAR 0 3
77287: PPUSH
77288: LD_VAR 0 8
77292: PPUSH
77293: LD_VAR 0 3
77297: PPUSH
77298: CALL_OW 74
77302: PPUSH
77303: CALL_OW 296
77307: PUSH
77308: LD_INT 6
77310: LESS
77311: IFFALSE 77327
// SetFuel ( j , 100 ) else
77313: LD_VAR 0 3
77317: PPUSH
77318: LD_INT 100
77320: PPUSH
77321: CALL_OW 240
77325: GO 77552
// if GetFuel ( j ) = 0 then
77327: LD_VAR 0 3
77331: PPUSH
77332: CALL_OW 261
77336: PUSH
77337: LD_INT 0
77339: EQUAL
77340: IFFALSE 77552
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
77342: LD_ADDR_EXP 63
77346: PUSH
77347: LD_EXP 63
77351: PPUSH
77352: LD_VAR 0 2
77356: PPUSH
77357: LD_EXP 63
77361: PUSH
77362: LD_VAR 0 2
77366: ARRAY
77367: PUSH
77368: LD_VAR 0 3
77372: DIFF
77373: PPUSH
77374: CALL_OW 1
77378: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
77379: LD_VAR 0 3
77383: PPUSH
77384: CALL_OW 263
77388: PUSH
77389: LD_INT 1
77391: EQUAL
77392: IFFALSE 77408
// ComExitVehicle ( IsInUnit ( j ) ) ;
77394: LD_VAR 0 3
77398: PPUSH
77399: CALL_OW 310
77403: PPUSH
77404: CALL_OW 121
// if GetControl ( j ) = control_remote then
77408: LD_VAR 0 3
77412: PPUSH
77413: CALL_OW 263
77417: PUSH
77418: LD_INT 2
77420: EQUAL
77421: IFFALSE 77432
// ComUnlink ( j ) ;
77423: LD_VAR 0 3
77427: PPUSH
77428: CALL_OW 136
// fac := MC_GetBuildings ( i , b_factory ) ;
77432: LD_ADDR_VAR 0 9
77436: PUSH
77437: LD_VAR 0 2
77441: PPUSH
77442: LD_INT 3
77444: PPUSH
77445: CALL 86905 0 2
77449: ST_TO_ADDR
// if fac then
77450: LD_VAR 0 9
77454: IFFALSE 77550
// begin for k in fac do
77456: LD_ADDR_VAR 0 4
77460: PUSH
77461: LD_VAR 0 9
77465: PUSH
77466: FOR_IN
77467: IFFALSE 77548
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
77469: LD_ADDR_VAR 0 10
77473: PUSH
77474: LD_VAR 0 9
77478: PPUSH
77479: LD_VAR 0 3
77483: PPUSH
77484: CALL_OW 265
77488: PPUSH
77489: LD_VAR 0 3
77493: PPUSH
77494: CALL_OW 262
77498: PPUSH
77499: LD_VAR 0 3
77503: PPUSH
77504: CALL_OW 263
77508: PPUSH
77509: LD_VAR 0 3
77513: PPUSH
77514: CALL_OW 264
77518: PPUSH
77519: CALL 24244 0 5
77523: ST_TO_ADDR
// if components then
77524: LD_VAR 0 10
77528: IFFALSE 77546
// begin MC_InsertProduceList ( i , components ) ;
77530: LD_VAR 0 2
77534: PPUSH
77535: LD_VAR 0 10
77539: PPUSH
77540: CALL 86450 0 2
// break ;
77544: GO 77548
// end ; end ;
77546: GO 77466
77548: POP
77549: POP
// end ; continue ;
77550: GO 77046
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
77552: LD_VAR 0 3
77556: PPUSH
77557: LD_INT 1
77559: PPUSH
77560: CALL_OW 289
77564: PUSH
77565: LD_INT 100
77567: LESS
77568: PUSH
77569: LD_VAR 0 3
77573: PPUSH
77574: CALL_OW 314
77578: NOT
77579: AND
77580: IFFALSE 77609
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
77582: LD_VAR 0 3
77586: PPUSH
77587: LD_VAR 0 6
77591: PUSH
77592: LD_INT 2
77594: ARRAY
77595: PPUSH
77596: LD_VAR 0 6
77600: PUSH
77601: LD_INT 3
77603: ARRAY
77604: PPUSH
77605: CALL_OW 117
// break ;
77609: GO 77613
// end ;
77611: GO 77046
77613: POP
77614: POP
// end ; end ;
77615: GO 75884
77617: POP
77618: POP
// end ;
77619: LD_VAR 0 1
77623: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
77624: LD_INT 0
77626: PPUSH
77627: PPUSH
77628: PPUSH
77629: PPUSH
// if not mc_bases then
77630: LD_EXP 44
77634: NOT
77635: IFFALSE 77639
// exit ;
77637: GO 77800
// for i = 1 to mc_bases do
77639: LD_ADDR_VAR 0 2
77643: PUSH
77644: DOUBLE
77645: LD_INT 1
77647: DEC
77648: ST_TO_ADDR
77649: LD_EXP 44
77653: PUSH
77654: FOR_TO
77655: IFFALSE 77798
// begin tmp := UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) ;
77657: LD_ADDR_VAR 0 4
77661: PUSH
77662: LD_EXP 63
77666: PUSH
77667: LD_VAR 0 2
77671: ARRAY
77672: PUSH
77673: LD_EXP 66
77677: PUSH
77678: LD_VAR 0 2
77682: ARRAY
77683: UNION
77684: PPUSH
77685: LD_INT 33
77687: PUSH
77688: LD_INT 2
77690: PUSH
77691: EMPTY
77692: LIST
77693: LIST
77694: PPUSH
77695: CALL_OW 72
77699: ST_TO_ADDR
// if tmp then
77700: LD_VAR 0 4
77704: IFFALSE 77796
// for j in tmp do
77706: LD_ADDR_VAR 0 3
77710: PUSH
77711: LD_VAR 0 4
77715: PUSH
77716: FOR_IN
77717: IFFALSE 77794
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
77719: LD_VAR 0 3
77723: PPUSH
77724: CALL_OW 312
77728: NOT
77729: PUSH
77730: LD_VAR 0 3
77734: PPUSH
77735: CALL_OW 256
77739: PUSH
77740: LD_INT 250
77742: GREATEREQUAL
77743: AND
77744: IFFALSE 77757
// Connect ( j ) else
77746: LD_VAR 0 3
77750: PPUSH
77751: CALL 29645 0 1
77755: GO 77792
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
77757: LD_VAR 0 3
77761: PPUSH
77762: CALL_OW 256
77766: PUSH
77767: LD_INT 250
77769: LESS
77770: PUSH
77771: LD_VAR 0 3
77775: PPUSH
77776: CALL_OW 312
77780: AND
77781: IFFALSE 77792
// ComUnlink ( j ) ;
77783: LD_VAR 0 3
77787: PPUSH
77788: CALL_OW 136
77792: GO 77716
77794: POP
77795: POP
// end ;
77796: GO 77654
77798: POP
77799: POP
// end ;
77800: LD_VAR 0 1
77804: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
77805: LD_INT 0
77807: PPUSH
77808: PPUSH
77809: PPUSH
77810: PPUSH
77811: PPUSH
// if not mc_bases then
77812: LD_EXP 44
77816: NOT
77817: IFFALSE 77821
// exit ;
77819: GO 78266
// for i = 1 to mc_bases do
77821: LD_ADDR_VAR 0 2
77825: PUSH
77826: DOUBLE
77827: LD_INT 1
77829: DEC
77830: ST_TO_ADDR
77831: LD_EXP 44
77835: PUSH
77836: FOR_TO
77837: IFFALSE 78264
// begin if not mc_produce [ i ] then
77839: LD_EXP 65
77843: PUSH
77844: LD_VAR 0 2
77848: ARRAY
77849: NOT
77850: IFFALSE 77854
// continue ;
77852: GO 77836
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
77854: LD_ADDR_VAR 0 5
77858: PUSH
77859: LD_EXP 44
77863: PUSH
77864: LD_VAR 0 2
77868: ARRAY
77869: PPUSH
77870: LD_INT 30
77872: PUSH
77873: LD_INT 3
77875: PUSH
77876: EMPTY
77877: LIST
77878: LIST
77879: PPUSH
77880: CALL_OW 72
77884: ST_TO_ADDR
// if not fac then
77885: LD_VAR 0 5
77889: NOT
77890: IFFALSE 77894
// continue ;
77892: GO 77836
// for j in fac do
77894: LD_ADDR_VAR 0 3
77898: PUSH
77899: LD_VAR 0 5
77903: PUSH
77904: FOR_IN
77905: IFFALSE 78260
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] then
77907: LD_VAR 0 3
77911: PPUSH
77912: CALL_OW 461
77916: PUSH
77917: LD_INT 2
77919: NONEQUAL
77920: PUSH
77921: LD_VAR 0 3
77925: PPUSH
77926: LD_INT 15
77928: PPUSH
77929: CALL 29305 0 2
77933: PUSH
77934: LD_INT 4
77936: ARRAY
77937: OR
77938: IFFALSE 77942
// continue ;
77940: GO 77904
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
77942: LD_VAR 0 3
77946: PPUSH
77947: LD_EXP 65
77951: PUSH
77952: LD_VAR 0 2
77956: ARRAY
77957: PUSH
77958: LD_INT 1
77960: ARRAY
77961: PUSH
77962: LD_INT 1
77964: ARRAY
77965: PPUSH
77966: LD_EXP 65
77970: PUSH
77971: LD_VAR 0 2
77975: ARRAY
77976: PUSH
77977: LD_INT 1
77979: ARRAY
77980: PUSH
77981: LD_INT 2
77983: ARRAY
77984: PPUSH
77985: LD_EXP 65
77989: PUSH
77990: LD_VAR 0 2
77994: ARRAY
77995: PUSH
77996: LD_INT 1
77998: ARRAY
77999: PUSH
78000: LD_INT 3
78002: ARRAY
78003: PPUSH
78004: LD_EXP 65
78008: PUSH
78009: LD_VAR 0 2
78013: ARRAY
78014: PUSH
78015: LD_INT 1
78017: ARRAY
78018: PUSH
78019: LD_INT 4
78021: ARRAY
78022: PPUSH
78023: CALL_OW 448
78027: PUSH
78028: LD_VAR 0 3
78032: PPUSH
78033: LD_EXP 65
78037: PUSH
78038: LD_VAR 0 2
78042: ARRAY
78043: PUSH
78044: LD_INT 1
78046: ARRAY
78047: PUSH
78048: LD_INT 1
78050: ARRAY
78051: PUSH
78052: LD_EXP 65
78056: PUSH
78057: LD_VAR 0 2
78061: ARRAY
78062: PUSH
78063: LD_INT 1
78065: ARRAY
78066: PUSH
78067: LD_INT 2
78069: ARRAY
78070: PUSH
78071: LD_EXP 65
78075: PUSH
78076: LD_VAR 0 2
78080: ARRAY
78081: PUSH
78082: LD_INT 1
78084: ARRAY
78085: PUSH
78086: LD_INT 3
78088: ARRAY
78089: PUSH
78090: LD_EXP 65
78094: PUSH
78095: LD_VAR 0 2
78099: ARRAY
78100: PUSH
78101: LD_INT 1
78103: ARRAY
78104: PUSH
78105: LD_INT 4
78107: ARRAY
78108: PUSH
78109: EMPTY
78110: LIST
78111: LIST
78112: LIST
78113: LIST
78114: PPUSH
78115: CALL 32976 0 2
78119: AND
78120: IFFALSE 78258
// begin AddComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
78122: LD_VAR 0 3
78126: PPUSH
78127: LD_EXP 65
78131: PUSH
78132: LD_VAR 0 2
78136: ARRAY
78137: PUSH
78138: LD_INT 1
78140: ARRAY
78141: PUSH
78142: LD_INT 1
78144: ARRAY
78145: PPUSH
78146: LD_EXP 65
78150: PUSH
78151: LD_VAR 0 2
78155: ARRAY
78156: PUSH
78157: LD_INT 1
78159: ARRAY
78160: PUSH
78161: LD_INT 2
78163: ARRAY
78164: PPUSH
78165: LD_EXP 65
78169: PUSH
78170: LD_VAR 0 2
78174: ARRAY
78175: PUSH
78176: LD_INT 1
78178: ARRAY
78179: PUSH
78180: LD_INT 3
78182: ARRAY
78183: PPUSH
78184: LD_EXP 65
78188: PUSH
78189: LD_VAR 0 2
78193: ARRAY
78194: PUSH
78195: LD_INT 1
78197: ARRAY
78198: PUSH
78199: LD_INT 4
78201: ARRAY
78202: PPUSH
78203: CALL_OW 185
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
78207: LD_ADDR_VAR 0 4
78211: PUSH
78212: LD_EXP 65
78216: PUSH
78217: LD_VAR 0 2
78221: ARRAY
78222: PPUSH
78223: LD_INT 1
78225: PPUSH
78226: CALL_OW 3
78230: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
78231: LD_ADDR_EXP 65
78235: PUSH
78236: LD_EXP 65
78240: PPUSH
78241: LD_VAR 0 2
78245: PPUSH
78246: LD_VAR 0 4
78250: PPUSH
78251: CALL_OW 1
78255: ST_TO_ADDR
// break ;
78256: GO 78260
// end ; end ;
78258: GO 77904
78260: POP
78261: POP
// end ;
78262: GO 77836
78264: POP
78265: POP
// end ;
78266: LD_VAR 0 1
78270: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
78271: LD_INT 0
78273: PPUSH
78274: PPUSH
78275: PPUSH
// if not mc_bases then
78276: LD_EXP 44
78280: NOT
78281: IFFALSE 78285
// exit ;
78283: GO 78374
// for i = 1 to mc_bases do
78285: LD_ADDR_VAR 0 2
78289: PUSH
78290: DOUBLE
78291: LD_INT 1
78293: DEC
78294: ST_TO_ADDR
78295: LD_EXP 44
78299: PUSH
78300: FOR_TO
78301: IFFALSE 78372
// begin if mc_attack [ i ] then
78303: LD_EXP 64
78307: PUSH
78308: LD_VAR 0 2
78312: ARRAY
78313: IFFALSE 78370
// begin tmp := mc_attack [ i ] [ 1 ] ;
78315: LD_ADDR_VAR 0 3
78319: PUSH
78320: LD_EXP 64
78324: PUSH
78325: LD_VAR 0 2
78329: ARRAY
78330: PUSH
78331: LD_INT 1
78333: ARRAY
78334: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
78335: LD_ADDR_EXP 64
78339: PUSH
78340: LD_EXP 64
78344: PPUSH
78345: LD_VAR 0 2
78349: PPUSH
78350: EMPTY
78351: PPUSH
78352: CALL_OW 1
78356: ST_TO_ADDR
// Attack ( tmp ) ;
78357: LD_VAR 0 3
78361: PPUSH
78362: CALL 55166 0 1
// exit ;
78366: POP
78367: POP
78368: GO 78374
// end ; end ;
78370: GO 78300
78372: POP
78373: POP
// end ;
78374: LD_VAR 0 1
78378: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
78379: LD_INT 0
78381: PPUSH
78382: PPUSH
78383: PPUSH
78384: PPUSH
78385: PPUSH
78386: PPUSH
78387: PPUSH
// if not mc_bases then
78388: LD_EXP 44
78392: NOT
78393: IFFALSE 78397
// exit ;
78395: GO 78979
// for i = 1 to mc_bases do
78397: LD_ADDR_VAR 0 2
78401: PUSH
78402: DOUBLE
78403: LD_INT 1
78405: DEC
78406: ST_TO_ADDR
78407: LD_EXP 44
78411: PUSH
78412: FOR_TO
78413: IFFALSE 78977
// begin if not mc_bases [ i ] then
78415: LD_EXP 44
78419: PUSH
78420: LD_VAR 0 2
78424: ARRAY
78425: NOT
78426: IFFALSE 78430
// continue ;
78428: GO 78412
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
78430: LD_ADDR_VAR 0 7
78434: PUSH
78435: LD_EXP 44
78439: PUSH
78440: LD_VAR 0 2
78444: ARRAY
78445: PUSH
78446: LD_INT 1
78448: ARRAY
78449: PPUSH
78450: CALL 23548 0 1
78454: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
78455: LD_ADDR_EXP 67
78459: PUSH
78460: LD_EXP 67
78464: PPUSH
78465: LD_VAR 0 2
78469: PPUSH
78470: LD_EXP 44
78474: PUSH
78475: LD_VAR 0 2
78479: ARRAY
78480: PUSH
78481: LD_INT 1
78483: ARRAY
78484: PPUSH
78485: CALL_OW 255
78489: PPUSH
78490: LD_EXP 69
78494: PUSH
78495: LD_VAR 0 2
78499: ARRAY
78500: PPUSH
78501: CALL 21102 0 2
78505: PPUSH
78506: CALL_OW 1
78510: ST_TO_ADDR
// if not mc_scan [ i ] then
78511: LD_EXP 67
78515: PUSH
78516: LD_VAR 0 2
78520: ARRAY
78521: NOT
78522: IFFALSE 78677
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
78524: LD_ADDR_VAR 0 4
78528: PUSH
78529: LD_EXP 44
78533: PUSH
78534: LD_VAR 0 2
78538: ARRAY
78539: PPUSH
78540: LD_INT 2
78542: PUSH
78543: LD_INT 25
78545: PUSH
78546: LD_INT 5
78548: PUSH
78549: EMPTY
78550: LIST
78551: LIST
78552: PUSH
78553: LD_INT 25
78555: PUSH
78556: LD_INT 8
78558: PUSH
78559: EMPTY
78560: LIST
78561: LIST
78562: PUSH
78563: LD_INT 25
78565: PUSH
78566: LD_INT 9
78568: PUSH
78569: EMPTY
78570: LIST
78571: LIST
78572: PUSH
78573: EMPTY
78574: LIST
78575: LIST
78576: LIST
78577: LIST
78578: PPUSH
78579: CALL_OW 72
78583: ST_TO_ADDR
// if not tmp then
78584: LD_VAR 0 4
78588: NOT
78589: IFFALSE 78593
// continue ;
78591: GO 78412
// for j in tmp do
78593: LD_ADDR_VAR 0 3
78597: PUSH
78598: LD_VAR 0 4
78602: PUSH
78603: FOR_IN
78604: IFFALSE 78675
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
78606: LD_VAR 0 3
78610: PPUSH
78611: CALL_OW 310
78615: PPUSH
78616: CALL_OW 266
78620: PUSH
78621: LD_INT 5
78623: EQUAL
78624: PUSH
78625: LD_VAR 0 3
78629: PPUSH
78630: CALL_OW 257
78634: PUSH
78635: LD_INT 1
78637: EQUAL
78638: AND
78639: PUSH
78640: LD_VAR 0 3
78644: PPUSH
78645: CALL_OW 459
78649: NOT
78650: AND
78651: PUSH
78652: LD_VAR 0 7
78656: AND
78657: IFFALSE 78673
// ComChangeProfession ( j , class ) ;
78659: LD_VAR 0 3
78663: PPUSH
78664: LD_VAR 0 7
78668: PPUSH
78669: CALL_OW 123
78673: GO 78603
78675: POP
78676: POP
// end ; if mc_scan [ i ] and not mc_defender [ i ] and not UnitFilter ( mc_bases [ i ] , [ f_btype , b_bunker ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) then
78677: LD_EXP 67
78681: PUSH
78682: LD_VAR 0 2
78686: ARRAY
78687: PUSH
78688: LD_EXP 66
78692: PUSH
78693: LD_VAR 0 2
78697: ARRAY
78698: NOT
78699: AND
78700: PUSH
78701: LD_EXP 44
78705: PUSH
78706: LD_VAR 0 2
78710: ARRAY
78711: PPUSH
78712: LD_INT 30
78714: PUSH
78715: LD_INT 32
78717: PUSH
78718: EMPTY
78719: LIST
78720: LIST
78721: PPUSH
78722: CALL_OW 72
78726: NOT
78727: AND
78728: PUSH
78729: LD_EXP 44
78733: PUSH
78734: LD_VAR 0 2
78738: ARRAY
78739: PPUSH
78740: LD_INT 2
78742: PUSH
78743: LD_INT 30
78745: PUSH
78746: LD_INT 4
78748: PUSH
78749: EMPTY
78750: LIST
78751: LIST
78752: PUSH
78753: LD_INT 30
78755: PUSH
78756: LD_INT 5
78758: PUSH
78759: EMPTY
78760: LIST
78761: LIST
78762: PUSH
78763: EMPTY
78764: LIST
78765: LIST
78766: LIST
78767: PPUSH
78768: CALL_OW 72
78772: NOT
78773: AND
78774: IFFALSE 78906
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
78776: LD_ADDR_VAR 0 4
78780: PUSH
78781: LD_EXP 44
78785: PUSH
78786: LD_VAR 0 2
78790: ARRAY
78791: PPUSH
78792: LD_INT 2
78794: PUSH
78795: LD_INT 25
78797: PUSH
78798: LD_INT 1
78800: PUSH
78801: EMPTY
78802: LIST
78803: LIST
78804: PUSH
78805: LD_INT 25
78807: PUSH
78808: LD_INT 5
78810: PUSH
78811: EMPTY
78812: LIST
78813: LIST
78814: PUSH
78815: LD_INT 25
78817: PUSH
78818: LD_INT 8
78820: PUSH
78821: EMPTY
78822: LIST
78823: LIST
78824: PUSH
78825: LD_INT 25
78827: PUSH
78828: LD_INT 9
78830: PUSH
78831: EMPTY
78832: LIST
78833: LIST
78834: PUSH
78835: EMPTY
78836: LIST
78837: LIST
78838: LIST
78839: LIST
78840: LIST
78841: PPUSH
78842: CALL_OW 72
78846: ST_TO_ADDR
// tmp := tmp diff FilterByTag ( tmp , 18 ) ;
78847: LD_ADDR_VAR 0 4
78851: PUSH
78852: LD_VAR 0 4
78856: PUSH
78857: LD_VAR 0 4
78861: PPUSH
78862: LD_INT 18
78864: PPUSH
78865: CALL 59982 0 2
78869: DIFF
78870: ST_TO_ADDR
// if tmp then
78871: LD_VAR 0 4
78875: IFFALSE 78906
// begin BasicDefend ( i , tmp , mc_scan_area [ i ] ) ;
78877: LD_VAR 0 2
78881: PPUSH
78882: LD_VAR 0 4
78886: PPUSH
78887: LD_EXP 69
78891: PUSH
78892: LD_VAR 0 2
78896: ARRAY
78897: PPUSH
78898: CALL 21137 0 3
// exit ;
78902: POP
78903: POP
78904: GO 78979
// end ; end ; if mc_scan [ i ] and mc_defender [ i ] then
78906: LD_EXP 67
78910: PUSH
78911: LD_VAR 0 2
78915: ARRAY
78916: PUSH
78917: LD_EXP 66
78921: PUSH
78922: LD_VAR 0 2
78926: ARRAY
78927: AND
78928: IFFALSE 78975
// begin tmp := mc_defender [ i ] ;
78930: LD_ADDR_VAR 0 4
78934: PUSH
78935: LD_EXP 66
78939: PUSH
78940: LD_VAR 0 2
78944: ARRAY
78945: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
78946: LD_VAR 0 2
78950: PPUSH
78951: LD_VAR 0 4
78955: PPUSH
78956: LD_EXP 67
78960: PUSH
78961: LD_VAR 0 2
78965: ARRAY
78966: PPUSH
78967: CALL 21698 0 3
// exit ;
78971: POP
78972: POP
78973: GO 78979
// end ; end ;
78975: GO 78412
78977: POP
78978: POP
// end ;
78979: LD_VAR 0 1
78983: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 , researching , idle_lab ; begin
78984: LD_INT 0
78986: PPUSH
78987: PPUSH
78988: PPUSH
78989: PPUSH
78990: PPUSH
78991: PPUSH
78992: PPUSH
78993: PPUSH
78994: PPUSH
78995: PPUSH
78996: PPUSH
// if not mc_bases then
78997: LD_EXP 44
79001: NOT
79002: IFFALSE 79006
// exit ;
79004: GO 80093
// for i = 1 to mc_bases do
79006: LD_ADDR_VAR 0 2
79010: PUSH
79011: DOUBLE
79012: LD_INT 1
79014: DEC
79015: ST_TO_ADDR
79016: LD_EXP 44
79020: PUSH
79021: FOR_TO
79022: IFFALSE 80091
// begin tmp := mc_lab [ i ] ;
79024: LD_ADDR_VAR 0 6
79028: PUSH
79029: LD_EXP 77
79033: PUSH
79034: LD_VAR 0 2
79038: ARRAY
79039: ST_TO_ADDR
// if not tmp then
79040: LD_VAR 0 6
79044: NOT
79045: IFFALSE 79049
// continue ;
79047: GO 79021
// idle_lab := 0 ;
79049: LD_ADDR_VAR 0 11
79053: PUSH
79054: LD_INT 0
79056: ST_TO_ADDR
// for j in tmp do
79057: LD_ADDR_VAR 0 3
79061: PUSH
79062: LD_VAR 0 6
79066: PUSH
79067: FOR_IN
79068: IFFALSE 80087
// begin researching := false ;
79070: LD_ADDR_VAR 0 10
79074: PUSH
79075: LD_INT 0
79077: ST_TO_ADDR
// side := GetSide ( j ) ;
79078: LD_ADDR_VAR 0 4
79082: PUSH
79083: LD_VAR 0 3
79087: PPUSH
79088: CALL_OW 255
79092: ST_TO_ADDR
// if not mc_tech [ side ] then
79093: LD_EXP 71
79097: PUSH
79098: LD_VAR 0 4
79102: ARRAY
79103: NOT
79104: IFFALSE 79108
// continue ;
79106: GO 79067
// if BuildingStatus ( j ) = bs_idle then
79108: LD_VAR 0 3
79112: PPUSH
79113: CALL_OW 461
79117: PUSH
79118: LD_INT 2
79120: EQUAL
79121: IFFALSE 79309
// begin if idle_lab and UnitsInside ( j ) < 6 then
79123: LD_VAR 0 11
79127: PUSH
79128: LD_VAR 0 3
79132: PPUSH
79133: CALL_OW 313
79137: PUSH
79138: LD_INT 6
79140: LESS
79141: AND
79142: IFFALSE 79213
// begin tmp2 := UnitsInside ( idle_lab ) ;
79144: LD_ADDR_VAR 0 9
79148: PUSH
79149: LD_VAR 0 11
79153: PPUSH
79154: CALL_OW 313
79158: ST_TO_ADDR
// if tmp2 then
79159: LD_VAR 0 9
79163: IFFALSE 79205
// for x in tmp2 do
79165: LD_ADDR_VAR 0 7
79169: PUSH
79170: LD_VAR 0 9
79174: PUSH
79175: FOR_IN
79176: IFFALSE 79203
// begin ComExitBuilding ( x ) ;
79178: LD_VAR 0 7
79182: PPUSH
79183: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
79187: LD_VAR 0 7
79191: PPUSH
79192: LD_VAR 0 3
79196: PPUSH
79197: CALL_OW 180
// end ;
79201: GO 79175
79203: POP
79204: POP
// idle_lab := 0 ;
79205: LD_ADDR_VAR 0 11
79209: PUSH
79210: LD_INT 0
79212: ST_TO_ADDR
// end ; for t in mc_tech [ side ] do
79213: LD_ADDR_VAR 0 5
79217: PUSH
79218: LD_EXP 71
79222: PUSH
79223: LD_VAR 0 4
79227: ARRAY
79228: PUSH
79229: FOR_IN
79230: IFFALSE 79290
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
79232: LD_VAR 0 3
79236: PPUSH
79237: LD_VAR 0 5
79241: PPUSH
79242: CALL_OW 430
79246: PUSH
79247: LD_VAR 0 4
79251: PPUSH
79252: LD_VAR 0 5
79256: PPUSH
79257: CALL 20207 0 2
79261: AND
79262: IFFALSE 79288
// begin researching := true ;
79264: LD_ADDR_VAR 0 10
79268: PUSH
79269: LD_INT 1
79271: ST_TO_ADDR
// ComResearch ( j , t ) ;
79272: LD_VAR 0 3
79276: PPUSH
79277: LD_VAR 0 5
79281: PPUSH
79282: CALL_OW 124
// break ;
79286: GO 79290
// end ;
79288: GO 79229
79290: POP
79291: POP
// if not researching then
79292: LD_VAR 0 10
79296: NOT
79297: IFFALSE 79309
// idle_lab := j ;
79299: LD_ADDR_VAR 0 11
79303: PUSH
79304: LD_VAR 0 3
79308: ST_TO_ADDR
// end ; if BuildingStatus ( j ) = bs_need_ape then
79309: LD_VAR 0 3
79313: PPUSH
79314: CALL_OW 461
79318: PUSH
79319: LD_INT 10
79321: EQUAL
79322: IFFALSE 79910
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
79324: LD_EXP 73
79328: PUSH
79329: LD_VAR 0 2
79333: ARRAY
79334: NOT
79335: PUSH
79336: LD_EXP 74
79340: PUSH
79341: LD_VAR 0 2
79345: ARRAY
79346: NOT
79347: AND
79348: PUSH
79349: LD_EXP 71
79353: PUSH
79354: LD_VAR 0 4
79358: ARRAY
79359: PUSH
79360: LD_INT 1
79362: GREATER
79363: AND
79364: IFFALSE 79495
// begin ComCancel ( j ) ;
79366: LD_VAR 0 3
79370: PPUSH
79371: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
79375: LD_ADDR_EXP 71
79379: PUSH
79380: LD_EXP 71
79384: PPUSH
79385: LD_VAR 0 4
79389: PPUSH
79390: LD_EXP 71
79394: PUSH
79395: LD_VAR 0 4
79399: ARRAY
79400: PPUSH
79401: LD_EXP 71
79405: PUSH
79406: LD_VAR 0 4
79410: ARRAY
79411: PUSH
79412: LD_INT 1
79414: MINUS
79415: PPUSH
79416: LD_EXP 71
79420: PUSH
79421: LD_VAR 0 4
79425: ARRAY
79426: PPUSH
79427: LD_INT 0
79429: PPUSH
79430: CALL 26130 0 4
79434: PPUSH
79435: CALL_OW 1
79439: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
79440: LD_ADDR_EXP 71
79444: PUSH
79445: LD_EXP 71
79449: PPUSH
79450: LD_VAR 0 4
79454: PPUSH
79455: LD_EXP 71
79459: PUSH
79460: LD_VAR 0 4
79464: ARRAY
79465: PPUSH
79466: LD_EXP 71
79470: PUSH
79471: LD_VAR 0 4
79475: ARRAY
79476: PPUSH
79477: LD_INT 1
79479: PPUSH
79480: LD_INT 0
79482: PPUSH
79483: CALL 26130 0 4
79487: PPUSH
79488: CALL_OW 1
79492: ST_TO_ADDR
// continue ;
79493: GO 79067
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
79495: LD_EXP 73
79499: PUSH
79500: LD_VAR 0 2
79504: ARRAY
79505: PUSH
79506: LD_EXP 74
79510: PUSH
79511: LD_VAR 0 2
79515: ARRAY
79516: NOT
79517: AND
79518: IFFALSE 79645
// begin mc_ape_in_lab := ReplaceIn ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
79520: LD_ADDR_EXP 74
79524: PUSH
79525: LD_EXP 74
79529: PPUSH
79530: LD_VAR 0 2
79534: PUSH
79535: LD_EXP 74
79539: PUSH
79540: LD_VAR 0 2
79544: ARRAY
79545: PUSH
79546: LD_INT 1
79548: PLUS
79549: PUSH
79550: EMPTY
79551: LIST
79552: LIST
79553: PPUSH
79554: LD_EXP 73
79558: PUSH
79559: LD_VAR 0 2
79563: ARRAY
79564: PUSH
79565: LD_INT 1
79567: ARRAY
79568: PPUSH
79569: CALL 26712 0 3
79573: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
79574: LD_EXP 73
79578: PUSH
79579: LD_VAR 0 2
79583: ARRAY
79584: PUSH
79585: LD_INT 1
79587: ARRAY
79588: PPUSH
79589: LD_INT 112
79591: PPUSH
79592: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
79596: LD_ADDR_VAR 0 9
79600: PUSH
79601: LD_EXP 73
79605: PUSH
79606: LD_VAR 0 2
79610: ARRAY
79611: PPUSH
79612: LD_INT 1
79614: PPUSH
79615: CALL_OW 3
79619: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
79620: LD_ADDR_EXP 73
79624: PUSH
79625: LD_EXP 73
79629: PPUSH
79630: LD_VAR 0 2
79634: PPUSH
79635: LD_VAR 0 9
79639: PPUSH
79640: CALL_OW 1
79644: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
79645: LD_EXP 73
79649: PUSH
79650: LD_VAR 0 2
79654: ARRAY
79655: PUSH
79656: LD_EXP 74
79660: PUSH
79661: LD_VAR 0 2
79665: ARRAY
79666: AND
79667: PUSH
79668: LD_EXP 74
79672: PUSH
79673: LD_VAR 0 2
79677: ARRAY
79678: PUSH
79679: LD_INT 1
79681: ARRAY
79682: PPUSH
79683: CALL_OW 310
79687: NOT
79688: AND
79689: PUSH
79690: LD_VAR 0 3
79694: PPUSH
79695: CALL_OW 313
79699: PUSH
79700: LD_INT 6
79702: EQUAL
79703: AND
79704: IFFALSE 79760
// begin tmp2 := UnitsInside ( j ) ;
79706: LD_ADDR_VAR 0 9
79710: PUSH
79711: LD_VAR 0 3
79715: PPUSH
79716: CALL_OW 313
79720: ST_TO_ADDR
// if tmp2 = 6 then
79721: LD_VAR 0 9
79725: PUSH
79726: LD_INT 6
79728: EQUAL
79729: IFFALSE 79760
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
79731: LD_VAR 0 9
79735: PUSH
79736: LD_INT 1
79738: ARRAY
79739: PPUSH
79740: LD_INT 112
79742: PPUSH
79743: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
79747: LD_VAR 0 9
79751: PUSH
79752: LD_INT 1
79754: ARRAY
79755: PPUSH
79756: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
79760: LD_EXP 74
79764: PUSH
79765: LD_VAR 0 2
79769: ARRAY
79770: PUSH
79771: LD_EXP 74
79775: PUSH
79776: LD_VAR 0 2
79780: ARRAY
79781: PUSH
79782: LD_INT 1
79784: ARRAY
79785: PPUSH
79786: CALL_OW 314
79790: NOT
79791: AND
79792: PUSH
79793: LD_EXP 74
79797: PUSH
79798: LD_VAR 0 2
79802: ARRAY
79803: PUSH
79804: LD_INT 1
79806: ARRAY
79807: PPUSH
79808: CALL_OW 310
79812: NOT
79813: AND
79814: IFFALSE 79840
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
79816: LD_EXP 74
79820: PUSH
79821: LD_VAR 0 2
79825: ARRAY
79826: PUSH
79827: LD_INT 1
79829: ARRAY
79830: PPUSH
79831: LD_VAR 0 3
79835: PPUSH
79836: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
79840: LD_EXP 74
79844: PUSH
79845: LD_VAR 0 2
79849: ARRAY
79850: PUSH
79851: LD_INT 1
79853: ARRAY
79854: PPUSH
79855: CALL_OW 310
79859: PUSH
79860: LD_EXP 74
79864: PUSH
79865: LD_VAR 0 2
79869: ARRAY
79870: PUSH
79871: LD_INT 1
79873: ARRAY
79874: PPUSH
79875: CALL_OW 310
79879: PPUSH
79880: CALL_OW 461
79884: PUSH
79885: LD_INT 3
79887: NONEQUAL
79888: AND
79889: IFFALSE 79910
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
79891: LD_EXP 74
79895: PUSH
79896: LD_VAR 0 2
79900: ARRAY
79901: PUSH
79902: LD_INT 1
79904: ARRAY
79905: PPUSH
79906: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
79910: LD_VAR 0 3
79914: PPUSH
79915: CALL_OW 461
79919: PUSH
79920: LD_INT 6
79922: EQUAL
79923: PUSH
79924: LD_VAR 0 6
79928: PUSH
79929: LD_INT 1
79931: GREATER
79932: AND
79933: IFFALSE 80085
// begin sci := [ ] ;
79935: LD_ADDR_VAR 0 8
79939: PUSH
79940: EMPTY
79941: ST_TO_ADDR
// for x in ( tmp diff j ) do
79942: LD_ADDR_VAR 0 7
79946: PUSH
79947: LD_VAR 0 6
79951: PUSH
79952: LD_VAR 0 3
79956: DIFF
79957: PUSH
79958: FOR_IN
79959: IFFALSE 80011
// begin if sci = 6 then
79961: LD_VAR 0 8
79965: PUSH
79966: LD_INT 6
79968: EQUAL
79969: IFFALSE 79973
// break ;
79971: GO 80011
// if BuildingStatus ( x ) = bs_idle then
79973: LD_VAR 0 7
79977: PPUSH
79978: CALL_OW 461
79982: PUSH
79983: LD_INT 2
79985: EQUAL
79986: IFFALSE 80009
// sci := sci ^ UnitsInside ( x ) ;
79988: LD_ADDR_VAR 0 8
79992: PUSH
79993: LD_VAR 0 8
79997: PUSH
79998: LD_VAR 0 7
80002: PPUSH
80003: CALL_OW 313
80007: ADD
80008: ST_TO_ADDR
// end ;
80009: GO 79958
80011: POP
80012: POP
// if not sci then
80013: LD_VAR 0 8
80017: NOT
80018: IFFALSE 80022
// continue ;
80020: GO 79067
// for x in sci do
80022: LD_ADDR_VAR 0 7
80026: PUSH
80027: LD_VAR 0 8
80031: PUSH
80032: FOR_IN
80033: IFFALSE 80083
// if IsInUnit ( x ) and not HasTask ( x ) then
80035: LD_VAR 0 7
80039: PPUSH
80040: CALL_OW 310
80044: PUSH
80045: LD_VAR 0 7
80049: PPUSH
80050: CALL_OW 314
80054: NOT
80055: AND
80056: IFFALSE 80081
// begin ComExitBuilding ( x ) ;
80058: LD_VAR 0 7
80062: PPUSH
80063: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
80067: LD_VAR 0 7
80071: PPUSH
80072: LD_VAR 0 3
80076: PPUSH
80077: CALL_OW 180
// end ;
80081: GO 80032
80083: POP
80084: POP
// end ; end ;
80085: GO 79067
80087: POP
80088: POP
// end ;
80089: GO 79021
80091: POP
80092: POP
// end ;
80093: LD_VAR 0 1
80097: RET
// export function MC_MinesTrigger ( ) ; var i ; begin
80098: LD_INT 0
80100: PPUSH
80101: PPUSH
// if not mc_bases then
80102: LD_EXP 44
80106: NOT
80107: IFFALSE 80111
// exit ;
80109: GO 80192
// for i = 1 to mc_bases do
80111: LD_ADDR_VAR 0 2
80115: PUSH
80116: DOUBLE
80117: LD_INT 1
80119: DEC
80120: ST_TO_ADDR
80121: LD_EXP 44
80125: PUSH
80126: FOR_TO
80127: IFFALSE 80190
// if mc_mines [ i ] and mc_miners [ i ] then
80129: LD_EXP 57
80133: PUSH
80134: LD_VAR 0 2
80138: ARRAY
80139: PUSH
80140: LD_EXP 58
80144: PUSH
80145: LD_VAR 0 2
80149: ARRAY
80150: AND
80151: IFFALSE 80188
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
80153: LD_EXP 58
80157: PUSH
80158: LD_VAR 0 2
80162: ARRAY
80163: PUSH
80164: LD_INT 1
80166: ARRAY
80167: PPUSH
80168: CALL_OW 255
80172: PPUSH
80173: LD_EXP 57
80177: PUSH
80178: LD_VAR 0 2
80182: ARRAY
80183: PPUSH
80184: CALL 23701 0 2
80188: GO 80126
80190: POP
80191: POP
// end ;
80192: LD_VAR 0 1
80196: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
80197: LD_INT 0
80199: PPUSH
80200: PPUSH
80201: PPUSH
80202: PPUSH
80203: PPUSH
80204: PPUSH
80205: PPUSH
80206: PPUSH
// if not mc_bases or not mc_parking then
80207: LD_EXP 44
80211: NOT
80212: PUSH
80213: LD_EXP 68
80217: NOT
80218: OR
80219: IFFALSE 80223
// exit ;
80221: GO 80922
// for i = 1 to mc_bases do
80223: LD_ADDR_VAR 0 2
80227: PUSH
80228: DOUBLE
80229: LD_INT 1
80231: DEC
80232: ST_TO_ADDR
80233: LD_EXP 44
80237: PUSH
80238: FOR_TO
80239: IFFALSE 80920
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
80241: LD_EXP 44
80245: PUSH
80246: LD_VAR 0 2
80250: ARRAY
80251: NOT
80252: PUSH
80253: LD_EXP 68
80257: PUSH
80258: LD_VAR 0 2
80262: ARRAY
80263: NOT
80264: OR
80265: IFFALSE 80269
// continue ;
80267: GO 80238
// side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
80269: LD_ADDR_VAR 0 5
80273: PUSH
80274: LD_EXP 44
80278: PUSH
80279: LD_VAR 0 2
80283: ARRAY
80284: PUSH
80285: LD_INT 1
80287: ARRAY
80288: PPUSH
80289: CALL_OW 255
80293: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
80294: LD_ADDR_VAR 0 6
80298: PUSH
80299: LD_EXP 44
80303: PUSH
80304: LD_VAR 0 2
80308: ARRAY
80309: PPUSH
80310: LD_INT 30
80312: PUSH
80313: LD_INT 3
80315: PUSH
80316: EMPTY
80317: LIST
80318: LIST
80319: PPUSH
80320: CALL_OW 72
80324: ST_TO_ADDR
// if not fac then
80325: LD_VAR 0 6
80329: NOT
80330: IFFALSE 80381
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
80332: LD_ADDR_VAR 0 6
80336: PUSH
80337: LD_EXP 44
80341: PUSH
80342: LD_VAR 0 2
80346: ARRAY
80347: PPUSH
80348: LD_INT 2
80350: PUSH
80351: LD_INT 30
80353: PUSH
80354: LD_INT 0
80356: PUSH
80357: EMPTY
80358: LIST
80359: LIST
80360: PUSH
80361: LD_INT 30
80363: PUSH
80364: LD_INT 1
80366: PUSH
80367: EMPTY
80368: LIST
80369: LIST
80370: PUSH
80371: EMPTY
80372: LIST
80373: LIST
80374: LIST
80375: PPUSH
80376: CALL_OW 72
80380: ST_TO_ADDR
// if not fac then
80381: LD_VAR 0 6
80385: NOT
80386: IFFALSE 80390
// continue ;
80388: GO 80238
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
80390: LD_ADDR_VAR 0 7
80394: PUSH
80395: LD_EXP 68
80399: PUSH
80400: LD_VAR 0 2
80404: ARRAY
80405: PPUSH
80406: LD_INT 22
80408: PUSH
80409: LD_VAR 0 5
80413: PUSH
80414: EMPTY
80415: LIST
80416: LIST
80417: PUSH
80418: LD_INT 21
80420: PUSH
80421: LD_INT 2
80423: PUSH
80424: EMPTY
80425: LIST
80426: LIST
80427: PUSH
80428: LD_INT 3
80430: PUSH
80431: LD_INT 24
80433: PUSH
80434: LD_INT 1000
80436: PUSH
80437: EMPTY
80438: LIST
80439: LIST
80440: PUSH
80441: EMPTY
80442: LIST
80443: LIST
80444: PUSH
80445: EMPTY
80446: LIST
80447: LIST
80448: LIST
80449: PPUSH
80450: CALL_OW 70
80454: ST_TO_ADDR
// for j in fac do
80455: LD_ADDR_VAR 0 3
80459: PUSH
80460: LD_VAR 0 6
80464: PUSH
80465: FOR_IN
80466: IFFALSE 80547
// vehs := vehs union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , j , 15 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
80468: LD_ADDR_VAR 0 7
80472: PUSH
80473: LD_VAR 0 7
80477: PUSH
80478: LD_INT 22
80480: PUSH
80481: LD_VAR 0 5
80485: PUSH
80486: EMPTY
80487: LIST
80488: LIST
80489: PUSH
80490: LD_INT 91
80492: PUSH
80493: LD_VAR 0 3
80497: PUSH
80498: LD_INT 15
80500: PUSH
80501: EMPTY
80502: LIST
80503: LIST
80504: LIST
80505: PUSH
80506: LD_INT 21
80508: PUSH
80509: LD_INT 2
80511: PUSH
80512: EMPTY
80513: LIST
80514: LIST
80515: PUSH
80516: LD_INT 3
80518: PUSH
80519: LD_INT 24
80521: PUSH
80522: LD_INT 1000
80524: PUSH
80525: EMPTY
80526: LIST
80527: LIST
80528: PUSH
80529: EMPTY
80530: LIST
80531: LIST
80532: PUSH
80533: EMPTY
80534: LIST
80535: LIST
80536: LIST
80537: LIST
80538: PPUSH
80539: CALL_OW 69
80543: UNION
80544: ST_TO_ADDR
80545: GO 80465
80547: POP
80548: POP
// if not vehs then
80549: LD_VAR 0 7
80553: NOT
80554: IFFALSE 80580
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
80556: LD_ADDR_EXP 56
80560: PUSH
80561: LD_EXP 56
80565: PPUSH
80566: LD_VAR 0 2
80570: PPUSH
80571: EMPTY
80572: PPUSH
80573: CALL_OW 1
80577: ST_TO_ADDR
// continue ;
80578: GO 80238
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
80580: LD_ADDR_VAR 0 8
80584: PUSH
80585: LD_EXP 44
80589: PUSH
80590: LD_VAR 0 2
80594: ARRAY
80595: PPUSH
80596: LD_INT 30
80598: PUSH
80599: LD_INT 3
80601: PUSH
80602: EMPTY
80603: LIST
80604: LIST
80605: PPUSH
80606: CALL_OW 72
80610: ST_TO_ADDR
// if tmp then
80611: LD_VAR 0 8
80615: IFFALSE 80718
// begin for j in tmp do
80617: LD_ADDR_VAR 0 3
80621: PUSH
80622: LD_VAR 0 8
80626: PUSH
80627: FOR_IN
80628: IFFALSE 80716
// for k in UnitsInside ( j ) do
80630: LD_ADDR_VAR 0 4
80634: PUSH
80635: LD_VAR 0 3
80639: PPUSH
80640: CALL_OW 313
80644: PUSH
80645: FOR_IN
80646: IFFALSE 80712
// if k then
80648: LD_VAR 0 4
80652: IFFALSE 80710
// if not k in mc_repair_vehicle [ i ] then
80654: LD_VAR 0 4
80658: PUSH
80659: LD_EXP 56
80663: PUSH
80664: LD_VAR 0 2
80668: ARRAY
80669: IN
80670: NOT
80671: IFFALSE 80710
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
80673: LD_ADDR_EXP 56
80677: PUSH
80678: LD_EXP 56
80682: PPUSH
80683: LD_VAR 0 2
80687: PPUSH
80688: LD_EXP 56
80692: PUSH
80693: LD_VAR 0 2
80697: ARRAY
80698: PUSH
80699: LD_VAR 0 4
80703: UNION
80704: PPUSH
80705: CALL_OW 1
80709: ST_TO_ADDR
80710: GO 80645
80712: POP
80713: POP
80714: GO 80627
80716: POP
80717: POP
// end ; if not mc_repair_vehicle [ i ] then
80718: LD_EXP 56
80722: PUSH
80723: LD_VAR 0 2
80727: ARRAY
80728: NOT
80729: IFFALSE 80733
// continue ;
80731: GO 80238
// for j in mc_repair_vehicle [ i ] do
80733: LD_ADDR_VAR 0 3
80737: PUSH
80738: LD_EXP 56
80742: PUSH
80743: LD_VAR 0 2
80747: ARRAY
80748: PUSH
80749: FOR_IN
80750: IFFALSE 80916
// begin if GetClass ( j ) <> 3 then
80752: LD_VAR 0 3
80756: PPUSH
80757: CALL_OW 257
80761: PUSH
80762: LD_INT 3
80764: NONEQUAL
80765: IFFALSE 80806
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] diff j ) ;
80767: LD_ADDR_EXP 56
80771: PUSH
80772: LD_EXP 56
80776: PPUSH
80777: LD_VAR 0 2
80781: PPUSH
80782: LD_EXP 56
80786: PUSH
80787: LD_VAR 0 2
80791: ARRAY
80792: PUSH
80793: LD_VAR 0 3
80797: DIFF
80798: PPUSH
80799: CALL_OW 1
80803: ST_TO_ADDR
// continue ;
80804: GO 80749
// end ; if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
80806: LD_VAR 0 3
80810: PPUSH
80811: CALL_OW 311
80815: NOT
80816: PUSH
80817: LD_VAR 0 3
80821: PUSH
80822: LD_EXP 47
80826: PUSH
80827: LD_VAR 0 2
80831: ARRAY
80832: PUSH
80833: LD_INT 1
80835: ARRAY
80836: IN
80837: NOT
80838: AND
80839: PUSH
80840: LD_VAR 0 3
80844: PUSH
80845: LD_EXP 47
80849: PUSH
80850: LD_VAR 0 2
80854: ARRAY
80855: PUSH
80856: LD_INT 2
80858: ARRAY
80859: IN
80860: NOT
80861: AND
80862: IFFALSE 80914
// begin if IsInUnit ( j ) then
80864: LD_VAR 0 3
80868: PPUSH
80869: CALL_OW 310
80873: IFFALSE 80884
// ComExitBuilding ( j ) ;
80875: LD_VAR 0 3
80879: PPUSH
80880: CALL_OW 122
// if not HasTask ( j ) then
80884: LD_VAR 0 3
80888: PPUSH
80889: CALL_OW 314
80893: NOT
80894: IFFALSE 80914
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
80896: LD_VAR 0 3
80900: PPUSH
80901: LD_VAR 0 7
80905: PUSH
80906: LD_INT 1
80908: ARRAY
80909: PPUSH
80910: CALL_OW 189
// end ; end ;
80914: GO 80749
80916: POP
80917: POP
// end ;
80918: GO 80238
80920: POP
80921: POP
// end ;
80922: LD_VAR 0 1
80926: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
80927: LD_INT 0
80929: PPUSH
80930: PPUSH
80931: PPUSH
80932: PPUSH
80933: PPUSH
80934: PPUSH
80935: PPUSH
80936: PPUSH
80937: PPUSH
80938: PPUSH
80939: PPUSH
// if not mc_bases then
80940: LD_EXP 44
80944: NOT
80945: IFFALSE 80949
// exit ;
80947: GO 81751
// for i = 1 to mc_bases do
80949: LD_ADDR_VAR 0 2
80953: PUSH
80954: DOUBLE
80955: LD_INT 1
80957: DEC
80958: ST_TO_ADDR
80959: LD_EXP 44
80963: PUSH
80964: FOR_TO
80965: IFFALSE 81749
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
80967: LD_EXP 72
80971: PUSH
80972: LD_VAR 0 2
80976: ARRAY
80977: NOT
80978: PUSH
80979: LD_EXP 47
80983: PUSH
80984: LD_VAR 0 2
80988: ARRAY
80989: PUSH
80990: LD_INT 1
80992: ARRAY
80993: OR
80994: PUSH
80995: LD_EXP 47
80999: PUSH
81000: LD_VAR 0 2
81004: ARRAY
81005: PUSH
81006: LD_INT 2
81008: ARRAY
81009: OR
81010: PUSH
81011: LD_EXP 70
81015: PUSH
81016: LD_VAR 0 2
81020: ARRAY
81021: PPUSH
81022: LD_INT 1
81024: PPUSH
81025: CALL_OW 325
81029: NOT
81030: OR
81031: PUSH
81032: LD_EXP 67
81036: PUSH
81037: LD_VAR 0 2
81041: ARRAY
81042: OR
81043: IFFALSE 81047
// continue ;
81045: GO 80964
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
81047: LD_ADDR_VAR 0 8
81051: PUSH
81052: LD_EXP 44
81056: PUSH
81057: LD_VAR 0 2
81061: ARRAY
81062: PPUSH
81063: LD_INT 25
81065: PUSH
81066: LD_INT 4
81068: PUSH
81069: EMPTY
81070: LIST
81071: LIST
81072: PUSH
81073: LD_INT 50
81075: PUSH
81076: EMPTY
81077: LIST
81078: PUSH
81079: LD_INT 3
81081: PUSH
81082: LD_INT 60
81084: PUSH
81085: EMPTY
81086: LIST
81087: PUSH
81088: EMPTY
81089: LIST
81090: LIST
81091: PUSH
81092: EMPTY
81093: LIST
81094: LIST
81095: LIST
81096: PPUSH
81097: CALL_OW 72
81101: PUSH
81102: LD_EXP 48
81106: PUSH
81107: LD_VAR 0 2
81111: ARRAY
81112: DIFF
81113: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
81114: LD_ADDR_VAR 0 9
81118: PUSH
81119: LD_EXP 44
81123: PUSH
81124: LD_VAR 0 2
81128: ARRAY
81129: PPUSH
81130: LD_INT 2
81132: PUSH
81133: LD_INT 30
81135: PUSH
81136: LD_INT 0
81138: PUSH
81139: EMPTY
81140: LIST
81141: LIST
81142: PUSH
81143: LD_INT 30
81145: PUSH
81146: LD_INT 1
81148: PUSH
81149: EMPTY
81150: LIST
81151: LIST
81152: PUSH
81153: EMPTY
81154: LIST
81155: LIST
81156: LIST
81157: PPUSH
81158: CALL_OW 72
81162: ST_TO_ADDR
// if not tmp or not dep then
81163: LD_VAR 0 8
81167: NOT
81168: PUSH
81169: LD_VAR 0 9
81173: NOT
81174: OR
81175: IFFALSE 81179
// continue ;
81177: GO 80964
// side := GetSide ( tmp [ 1 ] ) ;
81179: LD_ADDR_VAR 0 11
81183: PUSH
81184: LD_VAR 0 8
81188: PUSH
81189: LD_INT 1
81191: ARRAY
81192: PPUSH
81193: CALL_OW 255
81197: ST_TO_ADDR
// dep := dep [ 1 ] ;
81198: LD_ADDR_VAR 0 9
81202: PUSH
81203: LD_VAR 0 9
81207: PUSH
81208: LD_INT 1
81210: ARRAY
81211: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
81212: LD_ADDR_VAR 0 7
81216: PUSH
81217: LD_EXP 72
81221: PUSH
81222: LD_VAR 0 2
81226: ARRAY
81227: PPUSH
81228: LD_INT 22
81230: PUSH
81231: LD_INT 0
81233: PUSH
81234: EMPTY
81235: LIST
81236: LIST
81237: PUSH
81238: LD_INT 25
81240: PUSH
81241: LD_INT 12
81243: PUSH
81244: EMPTY
81245: LIST
81246: LIST
81247: PUSH
81248: EMPTY
81249: LIST
81250: LIST
81251: PPUSH
81252: CALL_OW 70
81256: PUSH
81257: LD_INT 22
81259: PUSH
81260: LD_INT 0
81262: PUSH
81263: EMPTY
81264: LIST
81265: LIST
81266: PUSH
81267: LD_INT 25
81269: PUSH
81270: LD_INT 12
81272: PUSH
81273: EMPTY
81274: LIST
81275: LIST
81276: PUSH
81277: LD_INT 91
81279: PUSH
81280: LD_VAR 0 9
81284: PUSH
81285: LD_INT 20
81287: PUSH
81288: EMPTY
81289: LIST
81290: LIST
81291: LIST
81292: PUSH
81293: EMPTY
81294: LIST
81295: LIST
81296: LIST
81297: PPUSH
81298: CALL_OW 69
81302: UNION
81303: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
81304: LD_ADDR_VAR 0 10
81308: PUSH
81309: LD_EXP 72
81313: PUSH
81314: LD_VAR 0 2
81318: ARRAY
81319: PPUSH
81320: LD_INT 81
81322: PUSH
81323: LD_VAR 0 11
81327: PUSH
81328: EMPTY
81329: LIST
81330: LIST
81331: PPUSH
81332: CALL_OW 70
81336: ST_TO_ADDR
// if not apes or danger_at_area then
81337: LD_VAR 0 7
81341: NOT
81342: PUSH
81343: LD_VAR 0 10
81347: OR
81348: IFFALSE 81398
// begin if mc_taming [ i ] then
81350: LD_EXP 75
81354: PUSH
81355: LD_VAR 0 2
81359: ARRAY
81360: IFFALSE 81396
// begin MC_Reset ( i , 121 ) ;
81362: LD_VAR 0 2
81366: PPUSH
81367: LD_INT 121
81369: PPUSH
81370: CALL 66833 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
81374: LD_ADDR_EXP 75
81378: PUSH
81379: LD_EXP 75
81383: PPUSH
81384: LD_VAR 0 2
81388: PPUSH
81389: EMPTY
81390: PPUSH
81391: CALL_OW 1
81395: ST_TO_ADDR
// end ; continue ;
81396: GO 80964
// end ; for j in tmp do
81398: LD_ADDR_VAR 0 3
81402: PUSH
81403: LD_VAR 0 8
81407: PUSH
81408: FOR_IN
81409: IFFALSE 81745
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
81411: LD_VAR 0 3
81415: PUSH
81416: LD_EXP 75
81420: PUSH
81421: LD_VAR 0 2
81425: ARRAY
81426: IN
81427: NOT
81428: PUSH
81429: LD_EXP 75
81433: PUSH
81434: LD_VAR 0 2
81438: ARRAY
81439: PUSH
81440: LD_INT 3
81442: LESS
81443: AND
81444: IFFALSE 81502
// begin SetTag ( j , 121 ) ;
81446: LD_VAR 0 3
81450: PPUSH
81451: LD_INT 121
81453: PPUSH
81454: CALL_OW 109
// mc_taming := ReplaceIn ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
81458: LD_ADDR_EXP 75
81462: PUSH
81463: LD_EXP 75
81467: PPUSH
81468: LD_VAR 0 2
81472: PUSH
81473: LD_EXP 75
81477: PUSH
81478: LD_VAR 0 2
81482: ARRAY
81483: PUSH
81484: LD_INT 1
81486: PLUS
81487: PUSH
81488: EMPTY
81489: LIST
81490: LIST
81491: PPUSH
81492: LD_VAR 0 3
81496: PPUSH
81497: CALL 26712 0 3
81501: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
81502: LD_VAR 0 3
81506: PUSH
81507: LD_EXP 75
81511: PUSH
81512: LD_VAR 0 2
81516: ARRAY
81517: IN
81518: IFFALSE 81743
// begin if GetClass ( j ) <> 4 then
81520: LD_VAR 0 3
81524: PPUSH
81525: CALL_OW 257
81529: PUSH
81530: LD_INT 4
81532: NONEQUAL
81533: IFFALSE 81586
// begin mc_taming := Replace ( mc_taming , i , mc_taming [ i ] diff j ) ;
81535: LD_ADDR_EXP 75
81539: PUSH
81540: LD_EXP 75
81544: PPUSH
81545: LD_VAR 0 2
81549: PPUSH
81550: LD_EXP 75
81554: PUSH
81555: LD_VAR 0 2
81559: ARRAY
81560: PUSH
81561: LD_VAR 0 3
81565: DIFF
81566: PPUSH
81567: CALL_OW 1
81571: ST_TO_ADDR
// SetTag ( j , 0 ) ;
81572: LD_VAR 0 3
81576: PPUSH
81577: LD_INT 0
81579: PPUSH
81580: CALL_OW 109
// continue ;
81584: GO 81408
// end ; if IsInUnit ( j ) then
81586: LD_VAR 0 3
81590: PPUSH
81591: CALL_OW 310
81595: IFFALSE 81606
// ComExitBuilding ( j ) ;
81597: LD_VAR 0 3
81601: PPUSH
81602: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
81606: LD_ADDR_VAR 0 6
81610: PUSH
81611: LD_VAR 0 7
81615: PPUSH
81616: LD_VAR 0 3
81620: PPUSH
81621: CALL_OW 74
81625: ST_TO_ADDR
// if not ape then
81626: LD_VAR 0 6
81630: NOT
81631: IFFALSE 81635
// break ;
81633: GO 81745
// x := GetX ( ape ) ;
81635: LD_ADDR_VAR 0 4
81639: PUSH
81640: LD_VAR 0 6
81644: PPUSH
81645: CALL_OW 250
81649: ST_TO_ADDR
// y := GetY ( ape ) ;
81650: LD_ADDR_VAR 0 5
81654: PUSH
81655: LD_VAR 0 6
81659: PPUSH
81660: CALL_OW 251
81664: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
81665: LD_VAR 0 4
81669: PPUSH
81670: LD_VAR 0 5
81674: PPUSH
81675: CALL_OW 488
81679: NOT
81680: PUSH
81681: LD_VAR 0 11
81685: PPUSH
81686: LD_VAR 0 4
81690: PPUSH
81691: LD_VAR 0 5
81695: PPUSH
81696: LD_INT 20
81698: PPUSH
81699: CALL 27608 0 4
81703: PUSH
81704: LD_INT 4
81706: ARRAY
81707: OR
81708: IFFALSE 81712
// break ;
81710: GO 81745
// if not HasTask ( j ) then
81712: LD_VAR 0 3
81716: PPUSH
81717: CALL_OW 314
81721: NOT
81722: IFFALSE 81743
// ComTameXY ( j , x , y ) ;
81724: LD_VAR 0 3
81728: PPUSH
81729: LD_VAR 0 4
81733: PPUSH
81734: LD_VAR 0 5
81738: PPUSH
81739: CALL_OW 131
// end ; end ;
81743: GO 81408
81745: POP
81746: POP
// end ;
81747: GO 80964
81749: POP
81750: POP
// end ;
81751: LD_VAR 0 1
81755: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
81756: LD_INT 0
81758: PPUSH
81759: PPUSH
81760: PPUSH
81761: PPUSH
81762: PPUSH
81763: PPUSH
81764: PPUSH
81765: PPUSH
// if not mc_bases then
81766: LD_EXP 44
81770: NOT
81771: IFFALSE 81775
// exit ;
81773: GO 82401
// for i = 1 to mc_bases do
81775: LD_ADDR_VAR 0 2
81779: PUSH
81780: DOUBLE
81781: LD_INT 1
81783: DEC
81784: ST_TO_ADDR
81785: LD_EXP 44
81789: PUSH
81790: FOR_TO
81791: IFFALSE 82399
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
81793: LD_EXP 73
81797: PUSH
81798: LD_VAR 0 2
81802: ARRAY
81803: NOT
81804: PUSH
81805: LD_EXP 73
81809: PUSH
81810: LD_VAR 0 2
81814: ARRAY
81815: PPUSH
81816: LD_INT 25
81818: PUSH
81819: LD_INT 12
81821: PUSH
81822: EMPTY
81823: LIST
81824: LIST
81825: PPUSH
81826: CALL_OW 72
81830: NOT
81831: OR
81832: IFFALSE 81836
// continue ;
81834: GO 81790
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
81836: LD_ADDR_VAR 0 5
81840: PUSH
81841: LD_EXP 73
81845: PUSH
81846: LD_VAR 0 2
81850: ARRAY
81851: PUSH
81852: LD_INT 1
81854: ARRAY
81855: PPUSH
81856: CALL_OW 255
81860: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
81861: LD_VAR 0 5
81865: PPUSH
81866: LD_INT 2
81868: PPUSH
81869: CALL_OW 325
81873: IFFALSE 82126
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
81875: LD_ADDR_VAR 0 4
81879: PUSH
81880: LD_EXP 73
81884: PUSH
81885: LD_VAR 0 2
81889: ARRAY
81890: PPUSH
81891: LD_INT 25
81893: PUSH
81894: LD_INT 16
81896: PUSH
81897: EMPTY
81898: LIST
81899: LIST
81900: PPUSH
81901: CALL_OW 72
81905: ST_TO_ADDR
// if tmp < 6 then
81906: LD_VAR 0 4
81910: PUSH
81911: LD_INT 6
81913: LESS
81914: IFFALSE 82126
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
81916: LD_ADDR_VAR 0 6
81920: PUSH
81921: LD_EXP 44
81925: PUSH
81926: LD_VAR 0 2
81930: ARRAY
81931: PPUSH
81932: LD_INT 2
81934: PUSH
81935: LD_INT 30
81937: PUSH
81938: LD_INT 0
81940: PUSH
81941: EMPTY
81942: LIST
81943: LIST
81944: PUSH
81945: LD_INT 30
81947: PUSH
81948: LD_INT 1
81950: PUSH
81951: EMPTY
81952: LIST
81953: LIST
81954: PUSH
81955: EMPTY
81956: LIST
81957: LIST
81958: LIST
81959: PPUSH
81960: CALL_OW 72
81964: ST_TO_ADDR
// if depot then
81965: LD_VAR 0 6
81969: IFFALSE 82126
// begin selected := 0 ;
81971: LD_ADDR_VAR 0 7
81975: PUSH
81976: LD_INT 0
81978: ST_TO_ADDR
// for j in depot do
81979: LD_ADDR_VAR 0 3
81983: PUSH
81984: LD_VAR 0 6
81988: PUSH
81989: FOR_IN
81990: IFFALSE 82021
// begin if UnitsInside ( j ) < 6 then
81992: LD_VAR 0 3
81996: PPUSH
81997: CALL_OW 313
82001: PUSH
82002: LD_INT 6
82004: LESS
82005: IFFALSE 82019
// begin selected := j ;
82007: LD_ADDR_VAR 0 7
82011: PUSH
82012: LD_VAR 0 3
82016: ST_TO_ADDR
// break ;
82017: GO 82021
// end ; end ;
82019: GO 81989
82021: POP
82022: POP
// if selected then
82023: LD_VAR 0 7
82027: IFFALSE 82126
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
82029: LD_ADDR_VAR 0 3
82033: PUSH
82034: LD_EXP 73
82038: PUSH
82039: LD_VAR 0 2
82043: ARRAY
82044: PPUSH
82045: LD_INT 25
82047: PUSH
82048: LD_INT 12
82050: PUSH
82051: EMPTY
82052: LIST
82053: LIST
82054: PPUSH
82055: CALL_OW 72
82059: PUSH
82060: FOR_IN
82061: IFFALSE 82124
// if not HasTask ( j ) then
82063: LD_VAR 0 3
82067: PPUSH
82068: CALL_OW 314
82072: NOT
82073: IFFALSE 82122
// begin if not IsInUnit ( j ) then
82075: LD_VAR 0 3
82079: PPUSH
82080: CALL_OW 310
82084: NOT
82085: IFFALSE 82101
// ComEnterUnit ( j , selected ) ;
82087: LD_VAR 0 3
82091: PPUSH
82092: LD_VAR 0 7
82096: PPUSH
82097: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
82101: LD_VAR 0 3
82105: PPUSH
82106: LD_INT 16
82108: PPUSH
82109: CALL_OW 183
// AddComExitBuilding ( j ) ;
82113: LD_VAR 0 3
82117: PPUSH
82118: CALL_OW 182
// end ;
82122: GO 82060
82124: POP
82125: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
82126: LD_VAR 0 5
82130: PPUSH
82131: LD_INT 11
82133: PPUSH
82134: CALL_OW 325
82138: IFFALSE 82397
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
82140: LD_ADDR_VAR 0 4
82144: PUSH
82145: LD_EXP 73
82149: PUSH
82150: LD_VAR 0 2
82154: ARRAY
82155: PPUSH
82156: LD_INT 25
82158: PUSH
82159: LD_INT 16
82161: PUSH
82162: EMPTY
82163: LIST
82164: LIST
82165: PPUSH
82166: CALL_OW 72
82170: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
82171: LD_VAR 0 4
82175: PUSH
82176: LD_INT 6
82178: GREATEREQUAL
82179: PUSH
82180: LD_VAR 0 5
82184: PPUSH
82185: LD_INT 2
82187: PPUSH
82188: CALL_OW 325
82192: NOT
82193: OR
82194: IFFALSE 82397
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
82196: LD_ADDR_VAR 0 8
82200: PUSH
82201: LD_EXP 44
82205: PUSH
82206: LD_VAR 0 2
82210: ARRAY
82211: PPUSH
82212: LD_INT 2
82214: PUSH
82215: LD_INT 30
82217: PUSH
82218: LD_INT 4
82220: PUSH
82221: EMPTY
82222: LIST
82223: LIST
82224: PUSH
82225: LD_INT 30
82227: PUSH
82228: LD_INT 5
82230: PUSH
82231: EMPTY
82232: LIST
82233: LIST
82234: PUSH
82235: EMPTY
82236: LIST
82237: LIST
82238: LIST
82239: PPUSH
82240: CALL_OW 72
82244: ST_TO_ADDR
// if barracks then
82245: LD_VAR 0 8
82249: IFFALSE 82397
// begin selected := 0 ;
82251: LD_ADDR_VAR 0 7
82255: PUSH
82256: LD_INT 0
82258: ST_TO_ADDR
// for j in barracks do
82259: LD_ADDR_VAR 0 3
82263: PUSH
82264: LD_VAR 0 8
82268: PUSH
82269: FOR_IN
82270: IFFALSE 82301
// begin if UnitsInside ( j ) < 6 then
82272: LD_VAR 0 3
82276: PPUSH
82277: CALL_OW 313
82281: PUSH
82282: LD_INT 6
82284: LESS
82285: IFFALSE 82299
// begin selected := j ;
82287: LD_ADDR_VAR 0 7
82291: PUSH
82292: LD_VAR 0 3
82296: ST_TO_ADDR
// break ;
82297: GO 82301
// end ; end ;
82299: GO 82269
82301: POP
82302: POP
// if selected then
82303: LD_VAR 0 7
82307: IFFALSE 82397
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
82309: LD_ADDR_VAR 0 3
82313: PUSH
82314: LD_EXP 73
82318: PUSH
82319: LD_VAR 0 2
82323: ARRAY
82324: PPUSH
82325: LD_INT 25
82327: PUSH
82328: LD_INT 12
82330: PUSH
82331: EMPTY
82332: LIST
82333: LIST
82334: PPUSH
82335: CALL_OW 72
82339: PUSH
82340: FOR_IN
82341: IFFALSE 82395
// if not IsInUnit ( j ) and not HasTask ( j ) then
82343: LD_VAR 0 3
82347: PPUSH
82348: CALL_OW 310
82352: NOT
82353: PUSH
82354: LD_VAR 0 3
82358: PPUSH
82359: CALL_OW 314
82363: NOT
82364: AND
82365: IFFALSE 82393
// begin ComEnterUnit ( j , selected ) ;
82367: LD_VAR 0 3
82371: PPUSH
82372: LD_VAR 0 7
82376: PPUSH
82377: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
82381: LD_VAR 0 3
82385: PPUSH
82386: LD_INT 15
82388: PPUSH
82389: CALL_OW 183
// end ;
82393: GO 82340
82395: POP
82396: POP
// end ; end ; end ; end ; end ;
82397: GO 81790
82399: POP
82400: POP
// end ;
82401: LD_VAR 0 1
82405: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
82406: LD_INT 0
82408: PPUSH
82409: PPUSH
82410: PPUSH
82411: PPUSH
// if not mc_bases then
82412: LD_EXP 44
82416: NOT
82417: IFFALSE 82421
// exit ;
82419: GO 82599
// for i = 1 to mc_bases do
82421: LD_ADDR_VAR 0 2
82425: PUSH
82426: DOUBLE
82427: LD_INT 1
82429: DEC
82430: ST_TO_ADDR
82431: LD_EXP 44
82435: PUSH
82436: FOR_TO
82437: IFFALSE 82597
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
82439: LD_ADDR_VAR 0 4
82443: PUSH
82444: LD_EXP 44
82448: PUSH
82449: LD_VAR 0 2
82453: ARRAY
82454: PPUSH
82455: LD_INT 25
82457: PUSH
82458: LD_INT 9
82460: PUSH
82461: EMPTY
82462: LIST
82463: LIST
82464: PPUSH
82465: CALL_OW 72
82469: ST_TO_ADDR
// if not tmp then
82470: LD_VAR 0 4
82474: NOT
82475: IFFALSE 82479
// continue ;
82477: GO 82436
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
82479: LD_EXP 70
82483: PUSH
82484: LD_VAR 0 2
82488: ARRAY
82489: PPUSH
82490: LD_INT 29
82492: PPUSH
82493: CALL_OW 325
82497: NOT
82498: PUSH
82499: LD_EXP 70
82503: PUSH
82504: LD_VAR 0 2
82508: ARRAY
82509: PPUSH
82510: LD_INT 28
82512: PPUSH
82513: CALL_OW 325
82517: NOT
82518: AND
82519: IFFALSE 82523
// continue ;
82521: GO 82436
// for j in tmp do
82523: LD_ADDR_VAR 0 3
82527: PUSH
82528: LD_VAR 0 4
82532: PUSH
82533: FOR_IN
82534: IFFALSE 82593
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
82536: LD_VAR 0 3
82540: PUSH
82541: LD_EXP 47
82545: PUSH
82546: LD_VAR 0 2
82550: ARRAY
82551: PUSH
82552: LD_INT 1
82554: ARRAY
82555: IN
82556: NOT
82557: PUSH
82558: LD_VAR 0 3
82562: PUSH
82563: LD_EXP 47
82567: PUSH
82568: LD_VAR 0 2
82572: ARRAY
82573: PUSH
82574: LD_INT 2
82576: ARRAY
82577: IN
82578: NOT
82579: AND
82580: IFFALSE 82591
// ComSpaceTimeShoot ( j ) ;
82582: LD_VAR 0 3
82586: PPUSH
82587: CALL 20298 0 1
82591: GO 82533
82593: POP
82594: POP
// end ;
82595: GO 82436
82597: POP
82598: POP
// end ;
82599: LD_VAR 0 1
82603: RET
// export function MC_TeleportExit ( ) ; var i , j , x , y , save_point , tmp , teleports , sci ; begin
82604: LD_INT 0
82606: PPUSH
82607: PPUSH
82608: PPUSH
82609: PPUSH
82610: PPUSH
82611: PPUSH
82612: PPUSH
82613: PPUSH
82614: PPUSH
// if not mc_bases then
82615: LD_EXP 44
82619: NOT
82620: IFFALSE 82624
// exit ;
82622: GO 83246
// for i = 1 to mc_bases do
82624: LD_ADDR_VAR 0 2
82628: PUSH
82629: DOUBLE
82630: LD_INT 1
82632: DEC
82633: ST_TO_ADDR
82634: LD_EXP 44
82638: PUSH
82639: FOR_TO
82640: IFFALSE 83244
// begin if not mc_teleport_exit [ i ] or GetTech ( tech_targTeleport , mc_sides [ i ] ) <> state_researched then
82642: LD_EXP 79
82646: PUSH
82647: LD_VAR 0 2
82651: ARRAY
82652: NOT
82653: PUSH
82654: LD_INT 38
82656: PPUSH
82657: LD_EXP 70
82661: PUSH
82662: LD_VAR 0 2
82666: ARRAY
82667: PPUSH
82668: CALL_OW 321
82672: PUSH
82673: LD_INT 2
82675: NONEQUAL
82676: OR
82677: IFFALSE 82681
// continue ;
82679: GO 82639
// teleports := UnitFilter ( mc_bases [ i ] , [ f_btype , b_teleport ] ) ;
82681: LD_ADDR_VAR 0 8
82685: PUSH
82686: LD_EXP 44
82690: PUSH
82691: LD_VAR 0 2
82695: ARRAY
82696: PPUSH
82697: LD_INT 30
82699: PUSH
82700: LD_INT 34
82702: PUSH
82703: EMPTY
82704: LIST
82705: LIST
82706: PPUSH
82707: CALL_OW 72
82711: ST_TO_ADDR
// sci := FilterByTag ( UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) , 0 ) ;
82712: LD_ADDR_VAR 0 9
82716: PUSH
82717: LD_EXP 44
82721: PUSH
82722: LD_VAR 0 2
82726: ARRAY
82727: PPUSH
82728: LD_INT 25
82730: PUSH
82731: LD_INT 4
82733: PUSH
82734: EMPTY
82735: LIST
82736: LIST
82737: PPUSH
82738: CALL_OW 72
82742: PPUSH
82743: LD_INT 0
82745: PPUSH
82746: CALL 59982 0 2
82750: ST_TO_ADDR
// if not sci or not teleports or FilterByTag ( mc_bases [ i ] , 124 ) then
82751: LD_VAR 0 9
82755: NOT
82756: PUSH
82757: LD_VAR 0 8
82761: NOT
82762: OR
82763: PUSH
82764: LD_EXP 44
82768: PUSH
82769: LD_VAR 0 2
82773: ARRAY
82774: PPUSH
82775: LD_INT 124
82777: PPUSH
82778: CALL 59982 0 2
82782: OR
82783: IFFALSE 82787
// continue ;
82785: GO 82639
// if mc_teleport_exit_set [ i ] < mc_teleport_exit [ i ] and mc_teleport_exit_set [ i ] < teleports then
82787: LD_EXP 80
82791: PUSH
82792: LD_VAR 0 2
82796: ARRAY
82797: PUSH
82798: LD_EXP 79
82802: PUSH
82803: LD_VAR 0 2
82807: ARRAY
82808: LESS
82809: PUSH
82810: LD_EXP 80
82814: PUSH
82815: LD_VAR 0 2
82819: ARRAY
82820: PUSH
82821: LD_VAR 0 8
82825: LESS
82826: AND
82827: IFFALSE 83242
// begin tmp := sci [ 1 ] ;
82829: LD_ADDR_VAR 0 7
82833: PUSH
82834: LD_VAR 0 9
82838: PUSH
82839: LD_INT 1
82841: ARRAY
82842: ST_TO_ADDR
// SetTag ( tmp , 124 ) ;
82843: LD_VAR 0 7
82847: PPUSH
82848: LD_INT 124
82850: PPUSH
82851: CALL_OW 109
// for j = mc_teleport_exit [ i ] downto mc_teleport_exit [ i ] do
82855: LD_ADDR_VAR 0 3
82859: PUSH
82860: DOUBLE
82861: LD_EXP 79
82865: PUSH
82866: LD_VAR 0 2
82870: ARRAY
82871: INC
82872: ST_TO_ADDR
82873: LD_EXP 79
82877: PUSH
82878: LD_VAR 0 2
82882: ARRAY
82883: PUSH
82884: FOR_DOWNTO
82885: IFFALSE 83228
// begin if IsInUnit ( tmp ) then
82887: LD_VAR 0 7
82891: PPUSH
82892: CALL_OW 310
82896: IFFALSE 82907
// ComExitBuilding ( tmp ) ;
82898: LD_VAR 0 7
82902: PPUSH
82903: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
82907: LD_INT 35
82909: PPUSH
82910: CALL_OW 67
// until not IsInUnit ( tmp ) and not HasTask ( tmp ) ;
82914: LD_VAR 0 7
82918: PPUSH
82919: CALL_OW 310
82923: NOT
82924: PUSH
82925: LD_VAR 0 7
82929: PPUSH
82930: CALL_OW 314
82934: NOT
82935: AND
82936: IFFALSE 82907
// save_point := [ GetX ( tmp ) , GetY ( tmp ) ] ;
82938: LD_ADDR_VAR 0 6
82942: PUSH
82943: LD_VAR 0 7
82947: PPUSH
82948: CALL_OW 250
82952: PUSH
82953: LD_VAR 0 7
82957: PPUSH
82958: CALL_OW 251
82962: PUSH
82963: EMPTY
82964: LIST
82965: LIST
82966: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
82967: LD_INT 35
82969: PPUSH
82970: CALL_OW 67
// x := mc_teleport_exit [ i ] [ j ] [ 1 ] ;
82974: LD_ADDR_VAR 0 4
82978: PUSH
82979: LD_EXP 79
82983: PUSH
82984: LD_VAR 0 2
82988: ARRAY
82989: PUSH
82990: LD_VAR 0 3
82994: ARRAY
82995: PUSH
82996: LD_INT 1
82998: ARRAY
82999: ST_TO_ADDR
// y := mc_teleport_exit [ i ] [ j ] [ 2 ] ;
83000: LD_ADDR_VAR 0 5
83004: PUSH
83005: LD_EXP 79
83009: PUSH
83010: LD_VAR 0 2
83014: ARRAY
83015: PUSH
83016: LD_VAR 0 3
83020: ARRAY
83021: PUSH
83022: LD_INT 2
83024: ARRAY
83025: ST_TO_ADDR
// if DangerAtRange ( tmp , 10 ) [ 4 ] then
83026: LD_VAR 0 7
83030: PPUSH
83031: LD_INT 10
83033: PPUSH
83034: CALL 29305 0 2
83038: PUSH
83039: LD_INT 4
83041: ARRAY
83042: IFFALSE 83080
// begin ComMoveXY ( tmp , save_point [ 1 ] , save_point [ 2 ] ) ;
83044: LD_VAR 0 7
83048: PPUSH
83049: LD_VAR 0 6
83053: PUSH
83054: LD_INT 1
83056: ARRAY
83057: PPUSH
83058: LD_VAR 0 6
83062: PUSH
83063: LD_INT 2
83065: ARRAY
83066: PPUSH
83067: CALL_OW 111
// wait ( 0 0$10 ) ;
83071: LD_INT 350
83073: PPUSH
83074: CALL_OW 67
// end else
83078: GO 83106
// begin ComMoveXY ( tmp , x , y ) ;
83080: LD_VAR 0 7
83084: PPUSH
83085: LD_VAR 0 4
83089: PPUSH
83090: LD_VAR 0 5
83094: PPUSH
83095: CALL_OW 111
// wait ( 0 0$3 ) ;
83099: LD_INT 105
83101: PPUSH
83102: CALL_OW 67
// end ; until IsAt ( tmp , x , y ) ;
83106: LD_VAR 0 7
83110: PPUSH
83111: LD_VAR 0 4
83115: PPUSH
83116: LD_VAR 0 5
83120: PPUSH
83121: CALL_OW 307
83125: IFFALSE 82967
// ComTeleportExit ( tmp , x , y , teleports [ j ] ) ;
83127: LD_VAR 0 7
83131: PPUSH
83132: LD_VAR 0 4
83136: PPUSH
83137: LD_VAR 0 5
83141: PPUSH
83142: LD_VAR 0 8
83146: PUSH
83147: LD_VAR 0 3
83151: ARRAY
83152: PPUSH
83153: CALL_OW 156
// repeat wait ( 0 0$1 ) ;
83157: LD_INT 35
83159: PPUSH
83160: CALL_OW 67
// until not HasTask ( tmp ) ;
83164: LD_VAR 0 7
83168: PPUSH
83169: CALL_OW 314
83173: NOT
83174: IFFALSE 83157
// mc_teleport_exit_set := ReplaceIn ( mc_teleport_exit_set , [ i , mc_teleport_exit_set [ i ] + 1 ] , teleports [ j ] ) ;
83176: LD_ADDR_EXP 80
83180: PUSH
83181: LD_EXP 80
83185: PPUSH
83186: LD_VAR 0 2
83190: PUSH
83191: LD_EXP 80
83195: PUSH
83196: LD_VAR 0 2
83200: ARRAY
83201: PUSH
83202: LD_INT 1
83204: PLUS
83205: PUSH
83206: EMPTY
83207: LIST
83208: LIST
83209: PPUSH
83210: LD_VAR 0 8
83214: PUSH
83215: LD_VAR 0 3
83219: ARRAY
83220: PPUSH
83221: CALL 26712 0 3
83225: ST_TO_ADDR
// end ;
83226: GO 82884
83228: POP
83229: POP
// MC_Reset ( i , 124 ) ;
83230: LD_VAR 0 2
83234: PPUSH
83235: LD_INT 124
83237: PPUSH
83238: CALL 66833 0 2
// end ; end ;
83242: GO 82639
83244: POP
83245: POP
// end ;
83246: LD_VAR 0 1
83250: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
83251: LD_INT 0
83253: PPUSH
83254: PPUSH
83255: PPUSH
// if not mc_bases then
83256: LD_EXP 44
83260: NOT
83261: IFFALSE 83265
// exit ;
83263: GO 83871
// for i = 1 to mc_bases do
83265: LD_ADDR_VAR 0 2
83269: PUSH
83270: DOUBLE
83271: LD_INT 1
83273: DEC
83274: ST_TO_ADDR
83275: LD_EXP 44
83279: PUSH
83280: FOR_TO
83281: IFFALSE 83869
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
83283: LD_ADDR_VAR 0 3
83287: PUSH
83288: LD_EXP 44
83292: PUSH
83293: LD_VAR 0 2
83297: ARRAY
83298: PPUSH
83299: LD_INT 25
83301: PUSH
83302: LD_INT 4
83304: PUSH
83305: EMPTY
83306: LIST
83307: LIST
83308: PPUSH
83309: CALL_OW 72
83313: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
83314: LD_VAR 0 3
83318: NOT
83319: PUSH
83320: LD_EXP 81
83324: PUSH
83325: LD_VAR 0 2
83329: ARRAY
83330: NOT
83331: OR
83332: PUSH
83333: LD_EXP 44
83337: PUSH
83338: LD_VAR 0 2
83342: ARRAY
83343: PPUSH
83344: LD_INT 2
83346: PUSH
83347: LD_INT 30
83349: PUSH
83350: LD_INT 0
83352: PUSH
83353: EMPTY
83354: LIST
83355: LIST
83356: PUSH
83357: LD_INT 30
83359: PUSH
83360: LD_INT 1
83362: PUSH
83363: EMPTY
83364: LIST
83365: LIST
83366: PUSH
83367: EMPTY
83368: LIST
83369: LIST
83370: LIST
83371: PPUSH
83372: CALL_OW 72
83376: NOT
83377: OR
83378: IFFALSE 83428
// begin if mc_deposits_finder [ i ] then
83380: LD_EXP 82
83384: PUSH
83385: LD_VAR 0 2
83389: ARRAY
83390: IFFALSE 83426
// begin MC_Reset ( i , 125 ) ;
83392: LD_VAR 0 2
83396: PPUSH
83397: LD_INT 125
83399: PPUSH
83400: CALL 66833 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
83404: LD_ADDR_EXP 82
83408: PUSH
83409: LD_EXP 82
83413: PPUSH
83414: LD_VAR 0 2
83418: PPUSH
83419: EMPTY
83420: PPUSH
83421: CALL_OW 1
83425: ST_TO_ADDR
// end ; continue ;
83426: GO 83280
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
83428: LD_EXP 81
83432: PUSH
83433: LD_VAR 0 2
83437: ARRAY
83438: PUSH
83439: LD_INT 1
83441: ARRAY
83442: PUSH
83443: LD_INT 3
83445: ARRAY
83446: PUSH
83447: LD_INT 1
83449: EQUAL
83450: PUSH
83451: LD_INT 20
83453: PPUSH
83454: LD_EXP 70
83458: PUSH
83459: LD_VAR 0 2
83463: ARRAY
83464: PPUSH
83465: CALL_OW 321
83469: PUSH
83470: LD_INT 2
83472: NONEQUAL
83473: AND
83474: IFFALSE 83524
// begin if mc_deposits_finder [ i ] then
83476: LD_EXP 82
83480: PUSH
83481: LD_VAR 0 2
83485: ARRAY
83486: IFFALSE 83522
// begin MC_Reset ( i , 125 ) ;
83488: LD_VAR 0 2
83492: PPUSH
83493: LD_INT 125
83495: PPUSH
83496: CALL 66833 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
83500: LD_ADDR_EXP 82
83504: PUSH
83505: LD_EXP 82
83509: PPUSH
83510: LD_VAR 0 2
83514: PPUSH
83515: EMPTY
83516: PPUSH
83517: CALL_OW 1
83521: ST_TO_ADDR
// end ; continue ;
83522: GO 83280
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
83524: LD_EXP 81
83528: PUSH
83529: LD_VAR 0 2
83533: ARRAY
83534: PUSH
83535: LD_INT 1
83537: ARRAY
83538: PUSH
83539: LD_INT 1
83541: ARRAY
83542: PPUSH
83543: LD_EXP 81
83547: PUSH
83548: LD_VAR 0 2
83552: ARRAY
83553: PUSH
83554: LD_INT 1
83556: ARRAY
83557: PUSH
83558: LD_INT 2
83560: ARRAY
83561: PPUSH
83562: LD_EXP 70
83566: PUSH
83567: LD_VAR 0 2
83571: ARRAY
83572: PPUSH
83573: CALL_OW 440
83577: IFFALSE 83620
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
83579: LD_ADDR_EXP 81
83583: PUSH
83584: LD_EXP 81
83588: PPUSH
83589: LD_VAR 0 2
83593: PPUSH
83594: LD_EXP 81
83598: PUSH
83599: LD_VAR 0 2
83603: ARRAY
83604: PPUSH
83605: LD_INT 1
83607: PPUSH
83608: CALL_OW 3
83612: PPUSH
83613: CALL_OW 1
83617: ST_TO_ADDR
83618: GO 83867
// begin if not mc_deposits_finder [ i ] then
83620: LD_EXP 82
83624: PUSH
83625: LD_VAR 0 2
83629: ARRAY
83630: NOT
83631: IFFALSE 83683
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
83633: LD_ADDR_EXP 82
83637: PUSH
83638: LD_EXP 82
83642: PPUSH
83643: LD_VAR 0 2
83647: PPUSH
83648: LD_VAR 0 3
83652: PUSH
83653: LD_INT 1
83655: ARRAY
83656: PUSH
83657: EMPTY
83658: LIST
83659: PPUSH
83660: CALL_OW 1
83664: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
83665: LD_VAR 0 3
83669: PUSH
83670: LD_INT 1
83672: ARRAY
83673: PPUSH
83674: LD_INT 125
83676: PPUSH
83677: CALL_OW 109
// end else
83681: GO 83867
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
83683: LD_EXP 82
83687: PUSH
83688: LD_VAR 0 2
83692: ARRAY
83693: PUSH
83694: LD_INT 1
83696: ARRAY
83697: PPUSH
83698: CALL_OW 310
83702: IFFALSE 83725
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
83704: LD_EXP 82
83708: PUSH
83709: LD_VAR 0 2
83713: ARRAY
83714: PUSH
83715: LD_INT 1
83717: ARRAY
83718: PPUSH
83719: CALL_OW 122
83723: GO 83867
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
83725: LD_EXP 82
83729: PUSH
83730: LD_VAR 0 2
83734: ARRAY
83735: PUSH
83736: LD_INT 1
83738: ARRAY
83739: PPUSH
83740: CALL_OW 314
83744: NOT
83745: PUSH
83746: LD_EXP 82
83750: PUSH
83751: LD_VAR 0 2
83755: ARRAY
83756: PUSH
83757: LD_INT 1
83759: ARRAY
83760: PPUSH
83761: LD_EXP 81
83765: PUSH
83766: LD_VAR 0 2
83770: ARRAY
83771: PUSH
83772: LD_INT 1
83774: ARRAY
83775: PUSH
83776: LD_INT 1
83778: ARRAY
83779: PPUSH
83780: LD_EXP 81
83784: PUSH
83785: LD_VAR 0 2
83789: ARRAY
83790: PUSH
83791: LD_INT 1
83793: ARRAY
83794: PUSH
83795: LD_INT 2
83797: ARRAY
83798: PPUSH
83799: CALL_OW 297
83803: PUSH
83804: LD_INT 6
83806: GREATER
83807: AND
83808: IFFALSE 83867
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
83810: LD_EXP 82
83814: PUSH
83815: LD_VAR 0 2
83819: ARRAY
83820: PUSH
83821: LD_INT 1
83823: ARRAY
83824: PPUSH
83825: LD_EXP 81
83829: PUSH
83830: LD_VAR 0 2
83834: ARRAY
83835: PUSH
83836: LD_INT 1
83838: ARRAY
83839: PUSH
83840: LD_INT 1
83842: ARRAY
83843: PPUSH
83844: LD_EXP 81
83848: PUSH
83849: LD_VAR 0 2
83853: ARRAY
83854: PUSH
83855: LD_INT 1
83857: ARRAY
83858: PUSH
83859: LD_INT 2
83861: ARRAY
83862: PPUSH
83863: CALL_OW 111
// end ; end ; end ;
83867: GO 83280
83869: POP
83870: POP
// end ;
83871: LD_VAR 0 1
83875: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts , mcts , x ; begin
83876: LD_INT 0
83878: PPUSH
83879: PPUSH
83880: PPUSH
83881: PPUSH
83882: PPUSH
83883: PPUSH
83884: PPUSH
83885: PPUSH
83886: PPUSH
83887: PPUSH
83888: PPUSH
// if not mc_bases then
83889: LD_EXP 44
83893: NOT
83894: IFFALSE 83898
// exit ;
83896: GO 84838
// for i = 1 to mc_bases do
83898: LD_ADDR_VAR 0 2
83902: PUSH
83903: DOUBLE
83904: LD_INT 1
83906: DEC
83907: ST_TO_ADDR
83908: LD_EXP 44
83912: PUSH
83913: FOR_TO
83914: IFFALSE 84836
// begin if not mc_bases [ i ] or mc_scan [ i ] then
83916: LD_EXP 44
83920: PUSH
83921: LD_VAR 0 2
83925: ARRAY
83926: NOT
83927: PUSH
83928: LD_EXP 67
83932: PUSH
83933: LD_VAR 0 2
83937: ARRAY
83938: OR
83939: IFFALSE 83943
// continue ;
83941: GO 83913
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
83943: LD_ADDR_VAR 0 7
83947: PUSH
83948: LD_EXP 44
83952: PUSH
83953: LD_VAR 0 2
83957: ARRAY
83958: PUSH
83959: LD_INT 1
83961: ARRAY
83962: PPUSH
83963: CALL_OW 248
83967: ST_TO_ADDR
// if nation = 3 or not UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) then
83968: LD_VAR 0 7
83972: PUSH
83973: LD_INT 3
83975: EQUAL
83976: PUSH
83977: LD_EXP 63
83981: PUSH
83982: LD_VAR 0 2
83986: ARRAY
83987: PUSH
83988: LD_EXP 66
83992: PUSH
83993: LD_VAR 0 2
83997: ARRAY
83998: UNION
83999: PPUSH
84000: LD_INT 33
84002: PUSH
84003: LD_INT 2
84005: PUSH
84006: EMPTY
84007: LIST
84008: LIST
84009: PPUSH
84010: CALL_OW 72
84014: NOT
84015: OR
84016: IFFALSE 84020
// continue ;
84018: GO 83913
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
84020: LD_ADDR_VAR 0 9
84024: PUSH
84025: LD_EXP 44
84029: PUSH
84030: LD_VAR 0 2
84034: ARRAY
84035: PPUSH
84036: LD_INT 30
84038: PUSH
84039: LD_INT 36
84041: PUSH
84042: EMPTY
84043: LIST
84044: LIST
84045: PPUSH
84046: CALL_OW 72
84050: ST_TO_ADDR
// mcts := UnitFilter ( mc_vehicles [ i ] , [ f_weapon , ar_control_tower ] ) ;
84051: LD_ADDR_VAR 0 10
84055: PUSH
84056: LD_EXP 63
84060: PUSH
84061: LD_VAR 0 2
84065: ARRAY
84066: PPUSH
84067: LD_INT 34
84069: PUSH
84070: LD_INT 31
84072: PUSH
84073: EMPTY
84074: LIST
84075: LIST
84076: PPUSH
84077: CALL_OW 72
84081: ST_TO_ADDR
// if not cts and not mcts then
84082: LD_VAR 0 9
84086: NOT
84087: PUSH
84088: LD_VAR 0 10
84092: NOT
84093: AND
84094: IFFALSE 84098
// continue ;
84096: GO 83913
// x := cts ;
84098: LD_ADDR_VAR 0 11
84102: PUSH
84103: LD_VAR 0 9
84107: ST_TO_ADDR
// if not x then
84108: LD_VAR 0 11
84112: NOT
84113: IFFALSE 84125
// x := mcts ;
84115: LD_ADDR_VAR 0 11
84119: PUSH
84120: LD_VAR 0 10
84124: ST_TO_ADDR
// if not x then
84125: LD_VAR 0 11
84129: NOT
84130: IFFALSE 84134
// continue ;
84132: GO 83913
// if mc_remote_driver [ i ] then
84134: LD_EXP 84
84138: PUSH
84139: LD_VAR 0 2
84143: ARRAY
84144: IFFALSE 84531
// for j in mc_remote_driver [ i ] do
84146: LD_ADDR_VAR 0 3
84150: PUSH
84151: LD_EXP 84
84155: PUSH
84156: LD_VAR 0 2
84160: ARRAY
84161: PUSH
84162: FOR_IN
84163: IFFALSE 84529
// begin if GetClass ( j ) <> 3 then
84165: LD_VAR 0 3
84169: PPUSH
84170: CALL_OW 257
84174: PUSH
84175: LD_INT 3
84177: NONEQUAL
84178: IFFALSE 84231
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff j ) ;
84180: LD_ADDR_EXP 84
84184: PUSH
84185: LD_EXP 84
84189: PPUSH
84190: LD_VAR 0 2
84194: PPUSH
84195: LD_EXP 84
84199: PUSH
84200: LD_VAR 0 2
84204: ARRAY
84205: PUSH
84206: LD_VAR 0 3
84210: DIFF
84211: PPUSH
84212: CALL_OW 1
84216: ST_TO_ADDR
// SetTag ( j , 0 ) ;
84217: LD_VAR 0 3
84221: PPUSH
84222: LD_INT 0
84224: PPUSH
84225: CALL_OW 109
// continue ;
84229: GO 84162
// end ; if UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) and not IsDriver ( j ) then
84231: LD_EXP 63
84235: PUSH
84236: LD_VAR 0 2
84240: ARRAY
84241: PPUSH
84242: LD_INT 34
84244: PUSH
84245: LD_INT 31
84247: PUSH
84248: EMPTY
84249: LIST
84250: LIST
84251: PUSH
84252: LD_INT 58
84254: PUSH
84255: EMPTY
84256: LIST
84257: PUSH
84258: EMPTY
84259: LIST
84260: LIST
84261: PPUSH
84262: CALL_OW 72
84266: PUSH
84267: LD_VAR 0 3
84271: PPUSH
84272: CALL 60070 0 1
84276: NOT
84277: AND
84278: IFFALSE 84349
// begin if IsInUnit ( j ) then
84280: LD_VAR 0 3
84284: PPUSH
84285: CALL_OW 310
84289: IFFALSE 84300
// ComExitBuilding ( j ) ;
84291: LD_VAR 0 3
84295: PPUSH
84296: CALL_OW 122
// AddComEnterUnit ( j , UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) [ 1 ] ) ;
84300: LD_VAR 0 3
84304: PPUSH
84305: LD_EXP 63
84309: PUSH
84310: LD_VAR 0 2
84314: ARRAY
84315: PPUSH
84316: LD_INT 34
84318: PUSH
84319: LD_INT 31
84321: PUSH
84322: EMPTY
84323: LIST
84324: LIST
84325: PUSH
84326: LD_INT 58
84328: PUSH
84329: EMPTY
84330: LIST
84331: PUSH
84332: EMPTY
84333: LIST
84334: LIST
84335: PPUSH
84336: CALL_OW 72
84340: PUSH
84341: LD_INT 1
84343: ARRAY
84344: PPUSH
84345: CALL_OW 180
// end ; if not IsInUnit ( j ) or ( GetBType ( IsInUnit ( j ) ) <> b_control_tower and not IsDriver ( j ) ) then
84349: LD_VAR 0 3
84353: PPUSH
84354: CALL_OW 310
84358: NOT
84359: PUSH
84360: LD_VAR 0 3
84364: PPUSH
84365: CALL_OW 310
84369: PPUSH
84370: CALL_OW 266
84374: PUSH
84375: LD_INT 36
84377: NONEQUAL
84378: PUSH
84379: LD_VAR 0 3
84383: PPUSH
84384: CALL 60070 0 1
84388: NOT
84389: AND
84390: OR
84391: IFFALSE 84527
// begin if IsInUnit ( j ) then
84393: LD_VAR 0 3
84397: PPUSH
84398: CALL_OW 310
84402: IFFALSE 84413
// ComExitBuilding ( j ) ;
84404: LD_VAR 0 3
84408: PPUSH
84409: CALL_OW 122
// ct := 0 ;
84413: LD_ADDR_VAR 0 8
84417: PUSH
84418: LD_INT 0
84420: ST_TO_ADDR
// for k in x do
84421: LD_ADDR_VAR 0 4
84425: PUSH
84426: LD_VAR 0 11
84430: PUSH
84431: FOR_IN
84432: IFFALSE 84505
// if ( GetWeapon ( k ) = ar_control_tower and not IsDrivenBy ( k ) ) or ( GetBType ( k ) = b_control_tower and UnitsInside ( k ) < 3 ) then
84434: LD_VAR 0 4
84438: PPUSH
84439: CALL_OW 264
84443: PUSH
84444: LD_INT 31
84446: EQUAL
84447: PUSH
84448: LD_VAR 0 4
84452: PPUSH
84453: CALL_OW 311
84457: NOT
84458: AND
84459: PUSH
84460: LD_VAR 0 4
84464: PPUSH
84465: CALL_OW 266
84469: PUSH
84470: LD_INT 36
84472: EQUAL
84473: PUSH
84474: LD_VAR 0 4
84478: PPUSH
84479: CALL_OW 313
84483: PUSH
84484: LD_INT 3
84486: LESS
84487: AND
84488: OR
84489: IFFALSE 84503
// begin ct := k ;
84491: LD_ADDR_VAR 0 8
84495: PUSH
84496: LD_VAR 0 4
84500: ST_TO_ADDR
// break ;
84501: GO 84505
// end ;
84503: GO 84431
84505: POP
84506: POP
// if ct then
84507: LD_VAR 0 8
84511: IFFALSE 84527
// ComEnterUnit ( j , ct ) ;
84513: LD_VAR 0 3
84517: PPUSH
84518: LD_VAR 0 8
84522: PPUSH
84523: CALL_OW 120
// end ; end ;
84527: GO 84162
84529: POP
84530: POP
// places := 0 ;
84531: LD_ADDR_VAR 0 5
84535: PUSH
84536: LD_INT 0
84538: ST_TO_ADDR
// for j = 1 to x do
84539: LD_ADDR_VAR 0 3
84543: PUSH
84544: DOUBLE
84545: LD_INT 1
84547: DEC
84548: ST_TO_ADDR
84549: LD_VAR 0 11
84553: PUSH
84554: FOR_TO
84555: IFFALSE 84631
// if GetWeapon ( x [ j ] ) = ar_control_tower then
84557: LD_VAR 0 11
84561: PUSH
84562: LD_VAR 0 3
84566: ARRAY
84567: PPUSH
84568: CALL_OW 264
84572: PUSH
84573: LD_INT 31
84575: EQUAL
84576: IFFALSE 84594
// places := places + 1 else
84578: LD_ADDR_VAR 0 5
84582: PUSH
84583: LD_VAR 0 5
84587: PUSH
84588: LD_INT 1
84590: PLUS
84591: ST_TO_ADDR
84592: GO 84629
// if GetBType ( x [ j ] ) = b_control_tower then
84594: LD_VAR 0 11
84598: PUSH
84599: LD_VAR 0 3
84603: ARRAY
84604: PPUSH
84605: CALL_OW 266
84609: PUSH
84610: LD_INT 36
84612: EQUAL
84613: IFFALSE 84629
// places := places + 3 ;
84615: LD_ADDR_VAR 0 5
84619: PUSH
84620: LD_VAR 0 5
84624: PUSH
84625: LD_INT 3
84627: PLUS
84628: ST_TO_ADDR
84629: GO 84554
84631: POP
84632: POP
// if places = 0 or places <= mc_remote_driver [ i ] then
84633: LD_VAR 0 5
84637: PUSH
84638: LD_INT 0
84640: EQUAL
84641: PUSH
84642: LD_VAR 0 5
84646: PUSH
84647: LD_EXP 84
84651: PUSH
84652: LD_VAR 0 2
84656: ARRAY
84657: LESSEQUAL
84658: OR
84659: IFFALSE 84663
// continue ;
84661: GO 83913
// tmp := SortBySkill ( UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] , 3 ) ;
84663: LD_ADDR_VAR 0 6
84667: PUSH
84668: LD_EXP 44
84672: PUSH
84673: LD_VAR 0 2
84677: ARRAY
84678: PPUSH
84679: LD_INT 25
84681: PUSH
84682: LD_INT 3
84684: PUSH
84685: EMPTY
84686: LIST
84687: LIST
84688: PPUSH
84689: CALL_OW 72
84693: PUSH
84694: LD_EXP 84
84698: PUSH
84699: LD_VAR 0 2
84703: ARRAY
84704: DIFF
84705: PPUSH
84706: LD_INT 3
84708: PPUSH
84709: CALL 60970 0 2
84713: ST_TO_ADDR
// for j in tmp do
84714: LD_ADDR_VAR 0 3
84718: PUSH
84719: LD_VAR 0 6
84723: PUSH
84724: FOR_IN
84725: IFFALSE 84760
// if GetTag ( j ) > 0 then
84727: LD_VAR 0 3
84731: PPUSH
84732: CALL_OW 110
84736: PUSH
84737: LD_INT 0
84739: GREATER
84740: IFFALSE 84758
// tmp := tmp diff j ;
84742: LD_ADDR_VAR 0 6
84746: PUSH
84747: LD_VAR 0 6
84751: PUSH
84752: LD_VAR 0 3
84756: DIFF
84757: ST_TO_ADDR
84758: GO 84724
84760: POP
84761: POP
// if not tmp then
84762: LD_VAR 0 6
84766: NOT
84767: IFFALSE 84771
// continue ;
84769: GO 83913
// if places then
84771: LD_VAR 0 5
84775: IFFALSE 84834
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
84777: LD_ADDR_EXP 84
84781: PUSH
84782: LD_EXP 84
84786: PPUSH
84787: LD_VAR 0 2
84791: PPUSH
84792: LD_EXP 84
84796: PUSH
84797: LD_VAR 0 2
84801: ARRAY
84802: PUSH
84803: LD_VAR 0 6
84807: PUSH
84808: LD_INT 1
84810: ARRAY
84811: UNION
84812: PPUSH
84813: CALL_OW 1
84817: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
84818: LD_VAR 0 6
84822: PUSH
84823: LD_INT 1
84825: ARRAY
84826: PPUSH
84827: LD_INT 126
84829: PPUSH
84830: CALL_OW 109
// end ; end ;
84834: GO 83913
84836: POP
84837: POP
// end ;
84838: LD_VAR 0 1
84842: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
84843: LD_INT 0
84845: PPUSH
84846: PPUSH
84847: PPUSH
84848: PPUSH
84849: PPUSH
84850: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
84851: LD_VAR 0 1
84855: NOT
84856: PUSH
84857: LD_VAR 0 2
84861: NOT
84862: OR
84863: PUSH
84864: LD_VAR 0 3
84868: NOT
84869: OR
84870: PUSH
84871: LD_VAR 0 4
84875: PUSH
84876: LD_INT 1
84878: PUSH
84879: LD_INT 2
84881: PUSH
84882: LD_INT 3
84884: PUSH
84885: LD_INT 4
84887: PUSH
84888: LD_INT 5
84890: PUSH
84891: LD_INT 8
84893: PUSH
84894: LD_INT 9
84896: PUSH
84897: LD_INT 15
84899: PUSH
84900: LD_INT 16
84902: PUSH
84903: EMPTY
84904: LIST
84905: LIST
84906: LIST
84907: LIST
84908: LIST
84909: LIST
84910: LIST
84911: LIST
84912: LIST
84913: IN
84914: NOT
84915: OR
84916: IFFALSE 84920
// exit ;
84918: GO 85820
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
84920: LD_ADDR_VAR 0 2
84924: PUSH
84925: LD_VAR 0 2
84929: PPUSH
84930: LD_INT 21
84932: PUSH
84933: LD_INT 3
84935: PUSH
84936: EMPTY
84937: LIST
84938: LIST
84939: PUSH
84940: LD_INT 24
84942: PUSH
84943: LD_INT 250
84945: PUSH
84946: EMPTY
84947: LIST
84948: LIST
84949: PUSH
84950: EMPTY
84951: LIST
84952: LIST
84953: PPUSH
84954: CALL_OW 72
84958: ST_TO_ADDR
// case class of 1 , 15 :
84959: LD_VAR 0 4
84963: PUSH
84964: LD_INT 1
84966: DOUBLE
84967: EQUAL
84968: IFTRUE 84978
84970: LD_INT 15
84972: DOUBLE
84973: EQUAL
84974: IFTRUE 84978
84976: GO 85063
84978: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
84979: LD_ADDR_VAR 0 8
84983: PUSH
84984: LD_VAR 0 2
84988: PPUSH
84989: LD_INT 2
84991: PUSH
84992: LD_INT 30
84994: PUSH
84995: LD_INT 32
84997: PUSH
84998: EMPTY
84999: LIST
85000: LIST
85001: PUSH
85002: LD_INT 30
85004: PUSH
85005: LD_INT 31
85007: PUSH
85008: EMPTY
85009: LIST
85010: LIST
85011: PUSH
85012: EMPTY
85013: LIST
85014: LIST
85015: LIST
85016: PPUSH
85017: CALL_OW 72
85021: PUSH
85022: LD_VAR 0 2
85026: PPUSH
85027: LD_INT 2
85029: PUSH
85030: LD_INT 30
85032: PUSH
85033: LD_INT 4
85035: PUSH
85036: EMPTY
85037: LIST
85038: LIST
85039: PUSH
85040: LD_INT 30
85042: PUSH
85043: LD_INT 5
85045: PUSH
85046: EMPTY
85047: LIST
85048: LIST
85049: PUSH
85050: EMPTY
85051: LIST
85052: LIST
85053: LIST
85054: PPUSH
85055: CALL_OW 72
85059: ADD
85060: ST_TO_ADDR
85061: GO 85309
85063: LD_INT 2
85065: DOUBLE
85066: EQUAL
85067: IFTRUE 85077
85069: LD_INT 16
85071: DOUBLE
85072: EQUAL
85073: IFTRUE 85077
85075: GO 85123
85077: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
85078: LD_ADDR_VAR 0 8
85082: PUSH
85083: LD_VAR 0 2
85087: PPUSH
85088: LD_INT 2
85090: PUSH
85091: LD_INT 30
85093: PUSH
85094: LD_INT 0
85096: PUSH
85097: EMPTY
85098: LIST
85099: LIST
85100: PUSH
85101: LD_INT 30
85103: PUSH
85104: LD_INT 1
85106: PUSH
85107: EMPTY
85108: LIST
85109: LIST
85110: PUSH
85111: EMPTY
85112: LIST
85113: LIST
85114: LIST
85115: PPUSH
85116: CALL_OW 72
85120: ST_TO_ADDR
85121: GO 85309
85123: LD_INT 3
85125: DOUBLE
85126: EQUAL
85127: IFTRUE 85131
85129: GO 85177
85131: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
85132: LD_ADDR_VAR 0 8
85136: PUSH
85137: LD_VAR 0 2
85141: PPUSH
85142: LD_INT 2
85144: PUSH
85145: LD_INT 30
85147: PUSH
85148: LD_INT 2
85150: PUSH
85151: EMPTY
85152: LIST
85153: LIST
85154: PUSH
85155: LD_INT 30
85157: PUSH
85158: LD_INT 3
85160: PUSH
85161: EMPTY
85162: LIST
85163: LIST
85164: PUSH
85165: EMPTY
85166: LIST
85167: LIST
85168: LIST
85169: PPUSH
85170: CALL_OW 72
85174: ST_TO_ADDR
85175: GO 85309
85177: LD_INT 4
85179: DOUBLE
85180: EQUAL
85181: IFTRUE 85185
85183: GO 85242
85185: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
85186: LD_ADDR_VAR 0 8
85190: PUSH
85191: LD_VAR 0 2
85195: PPUSH
85196: LD_INT 2
85198: PUSH
85199: LD_INT 30
85201: PUSH
85202: LD_INT 6
85204: PUSH
85205: EMPTY
85206: LIST
85207: LIST
85208: PUSH
85209: LD_INT 30
85211: PUSH
85212: LD_INT 7
85214: PUSH
85215: EMPTY
85216: LIST
85217: LIST
85218: PUSH
85219: LD_INT 30
85221: PUSH
85222: LD_INT 8
85224: PUSH
85225: EMPTY
85226: LIST
85227: LIST
85228: PUSH
85229: EMPTY
85230: LIST
85231: LIST
85232: LIST
85233: LIST
85234: PPUSH
85235: CALL_OW 72
85239: ST_TO_ADDR
85240: GO 85309
85242: LD_INT 5
85244: DOUBLE
85245: EQUAL
85246: IFTRUE 85262
85248: LD_INT 8
85250: DOUBLE
85251: EQUAL
85252: IFTRUE 85262
85254: LD_INT 9
85256: DOUBLE
85257: EQUAL
85258: IFTRUE 85262
85260: GO 85308
85262: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
85263: LD_ADDR_VAR 0 8
85267: PUSH
85268: LD_VAR 0 2
85272: PPUSH
85273: LD_INT 2
85275: PUSH
85276: LD_INT 30
85278: PUSH
85279: LD_INT 4
85281: PUSH
85282: EMPTY
85283: LIST
85284: LIST
85285: PUSH
85286: LD_INT 30
85288: PUSH
85289: LD_INT 5
85291: PUSH
85292: EMPTY
85293: LIST
85294: LIST
85295: PUSH
85296: EMPTY
85297: LIST
85298: LIST
85299: LIST
85300: PPUSH
85301: CALL_OW 72
85305: ST_TO_ADDR
85306: GO 85309
85308: POP
// if not tmp then
85309: LD_VAR 0 8
85313: NOT
85314: IFFALSE 85318
// exit ;
85316: GO 85820
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
85318: LD_VAR 0 4
85322: PUSH
85323: LD_INT 1
85325: PUSH
85326: LD_INT 15
85328: PUSH
85329: EMPTY
85330: LIST
85331: LIST
85332: IN
85333: PUSH
85334: LD_EXP 53
85338: PUSH
85339: LD_VAR 0 1
85343: ARRAY
85344: AND
85345: IFFALSE 85501
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
85347: LD_ADDR_VAR 0 9
85351: PUSH
85352: LD_EXP 53
85356: PUSH
85357: LD_VAR 0 1
85361: ARRAY
85362: PUSH
85363: LD_INT 1
85365: ARRAY
85366: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
85367: LD_VAR 0 9
85371: PUSH
85372: LD_EXP 54
85376: PUSH
85377: LD_VAR 0 1
85381: ARRAY
85382: IN
85383: NOT
85384: IFFALSE 85499
// begin mc_busy_turret_list := ReplaceIn ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
85386: LD_ADDR_EXP 54
85390: PUSH
85391: LD_EXP 54
85395: PPUSH
85396: LD_VAR 0 1
85400: PUSH
85401: LD_EXP 54
85405: PUSH
85406: LD_VAR 0 1
85410: ARRAY
85411: PUSH
85412: LD_INT 1
85414: PLUS
85415: PUSH
85416: EMPTY
85417: LIST
85418: LIST
85419: PPUSH
85420: LD_VAR 0 9
85424: PPUSH
85425: CALL 26712 0 3
85429: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
85430: LD_ADDR_EXP 53
85434: PUSH
85435: LD_EXP 53
85439: PPUSH
85440: LD_VAR 0 1
85444: PPUSH
85445: LD_EXP 53
85449: PUSH
85450: LD_VAR 0 1
85454: ARRAY
85455: PUSH
85456: LD_VAR 0 9
85460: DIFF
85461: PPUSH
85462: CALL_OW 1
85466: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
85467: LD_VAR 0 3
85471: PPUSH
85472: LD_EXP 54
85476: PUSH
85477: LD_VAR 0 1
85481: ARRAY
85482: PUSH
85483: LD_EXP 54
85487: PUSH
85488: LD_VAR 0 1
85492: ARRAY
85493: ARRAY
85494: PPUSH
85495: CALL_OW 120
// end ; exit ;
85499: GO 85820
// end ; if tmp > 1 then
85501: LD_VAR 0 8
85505: PUSH
85506: LD_INT 1
85508: GREATER
85509: IFFALSE 85613
// for i = 2 to tmp do
85511: LD_ADDR_VAR 0 6
85515: PUSH
85516: DOUBLE
85517: LD_INT 2
85519: DEC
85520: ST_TO_ADDR
85521: LD_VAR 0 8
85525: PUSH
85526: FOR_TO
85527: IFFALSE 85611
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
85529: LD_VAR 0 8
85533: PUSH
85534: LD_VAR 0 6
85538: ARRAY
85539: PPUSH
85540: CALL_OW 461
85544: PUSH
85545: LD_INT 6
85547: EQUAL
85548: IFFALSE 85609
// begin x := tmp [ i ] ;
85550: LD_ADDR_VAR 0 9
85554: PUSH
85555: LD_VAR 0 8
85559: PUSH
85560: LD_VAR 0 6
85564: ARRAY
85565: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
85566: LD_ADDR_VAR 0 8
85570: PUSH
85571: LD_VAR 0 8
85575: PPUSH
85576: LD_VAR 0 6
85580: PPUSH
85581: CALL_OW 3
85585: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
85586: LD_ADDR_VAR 0 8
85590: PUSH
85591: LD_VAR 0 8
85595: PPUSH
85596: LD_INT 1
85598: PPUSH
85599: LD_VAR 0 9
85603: PPUSH
85604: CALL_OW 2
85608: ST_TO_ADDR
// end ;
85609: GO 85526
85611: POP
85612: POP
// for i in tmp do
85613: LD_ADDR_VAR 0 6
85617: PUSH
85618: LD_VAR 0 8
85622: PUSH
85623: FOR_IN
85624: IFFALSE 85693
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
85626: LD_VAR 0 6
85630: PPUSH
85631: CALL_OW 313
85635: PUSH
85636: LD_INT 6
85638: LESS
85639: PUSH
85640: LD_VAR 0 6
85644: PPUSH
85645: CALL_OW 266
85649: PUSH
85650: LD_INT 31
85652: PUSH
85653: LD_INT 32
85655: PUSH
85656: EMPTY
85657: LIST
85658: LIST
85659: IN
85660: NOT
85661: AND
85662: PUSH
85663: LD_VAR 0 6
85667: PPUSH
85668: CALL_OW 313
85672: PUSH
85673: LD_INT 0
85675: EQUAL
85676: OR
85677: IFFALSE 85691
// begin j := i ;
85679: LD_ADDR_VAR 0 7
85683: PUSH
85684: LD_VAR 0 6
85688: ST_TO_ADDR
// break ;
85689: GO 85693
// end ; end ;
85691: GO 85623
85693: POP
85694: POP
// if j then
85695: LD_VAR 0 7
85699: IFFALSE 85717
// ComEnterUnit ( unit , j ) else
85701: LD_VAR 0 3
85705: PPUSH
85706: LD_VAR 0 7
85710: PPUSH
85711: CALL_OW 120
85715: GO 85820
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
85717: LD_ADDR_VAR 0 10
85721: PUSH
85722: LD_VAR 0 2
85726: PPUSH
85727: LD_INT 2
85729: PUSH
85730: LD_INT 30
85732: PUSH
85733: LD_INT 0
85735: PUSH
85736: EMPTY
85737: LIST
85738: LIST
85739: PUSH
85740: LD_INT 30
85742: PUSH
85743: LD_INT 1
85745: PUSH
85746: EMPTY
85747: LIST
85748: LIST
85749: PUSH
85750: EMPTY
85751: LIST
85752: LIST
85753: LIST
85754: PPUSH
85755: CALL_OW 72
85759: ST_TO_ADDR
// if depot then
85760: LD_VAR 0 10
85764: IFFALSE 85820
// begin depot := NearestUnitToUnit ( depot , unit ) ;
85766: LD_ADDR_VAR 0 10
85770: PUSH
85771: LD_VAR 0 10
85775: PPUSH
85776: LD_VAR 0 3
85780: PPUSH
85781: CALL_OW 74
85785: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
85786: LD_VAR 0 3
85790: PPUSH
85791: LD_VAR 0 10
85795: PPUSH
85796: CALL_OW 296
85800: PUSH
85801: LD_INT 10
85803: GREATER
85804: IFFALSE 85820
// ComStandNearbyBuilding ( unit , depot ) ;
85806: LD_VAR 0 3
85810: PPUSH
85811: LD_VAR 0 10
85815: PPUSH
85816: CALL 20915 0 2
// end ; end ; end ;
85820: LD_VAR 0 5
85824: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
85825: LD_INT 0
85827: PPUSH
85828: PPUSH
85829: PPUSH
85830: PPUSH
// if not mc_bases then
85831: LD_EXP 44
85835: NOT
85836: IFFALSE 85840
// exit ;
85838: GO 86079
// for i = 1 to mc_bases do
85840: LD_ADDR_VAR 0 2
85844: PUSH
85845: DOUBLE
85846: LD_INT 1
85848: DEC
85849: ST_TO_ADDR
85850: LD_EXP 44
85854: PUSH
85855: FOR_TO
85856: IFFALSE 86077
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
85858: LD_ADDR_VAR 0 4
85862: PUSH
85863: LD_EXP 44
85867: PUSH
85868: LD_VAR 0 2
85872: ARRAY
85873: PPUSH
85874: LD_INT 21
85876: PUSH
85877: LD_INT 1
85879: PUSH
85880: EMPTY
85881: LIST
85882: LIST
85883: PPUSH
85884: CALL_OW 72
85888: PUSH
85889: LD_EXP 73
85893: PUSH
85894: LD_VAR 0 2
85898: ARRAY
85899: UNION
85900: ST_TO_ADDR
// if not tmp then
85901: LD_VAR 0 4
85905: NOT
85906: IFFALSE 85910
// continue ;
85908: GO 85855
// for j in tmp do
85910: LD_ADDR_VAR 0 3
85914: PUSH
85915: LD_VAR 0 4
85919: PUSH
85920: FOR_IN
85921: IFFALSE 86073
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
85923: LD_VAR 0 3
85927: PPUSH
85928: CALL_OW 110
85932: NOT
85933: PUSH
85934: LD_VAR 0 3
85938: PPUSH
85939: CALL_OW 314
85943: NOT
85944: AND
85945: PUSH
85946: LD_VAR 0 3
85950: PPUSH
85951: CALL_OW 311
85955: NOT
85956: AND
85957: PUSH
85958: LD_VAR 0 3
85962: PPUSH
85963: CALL_OW 310
85967: NOT
85968: AND
85969: PUSH
85970: LD_VAR 0 3
85974: PUSH
85975: LD_EXP 47
85979: PUSH
85980: LD_VAR 0 2
85984: ARRAY
85985: PUSH
85986: LD_INT 1
85988: ARRAY
85989: IN
85990: NOT
85991: AND
85992: PUSH
85993: LD_VAR 0 3
85997: PUSH
85998: LD_EXP 47
86002: PUSH
86003: LD_VAR 0 2
86007: ARRAY
86008: PUSH
86009: LD_INT 2
86011: ARRAY
86012: IN
86013: NOT
86014: AND
86015: PUSH
86016: LD_VAR 0 3
86020: PUSH
86021: LD_EXP 56
86025: PUSH
86026: LD_VAR 0 2
86030: ARRAY
86031: IN
86032: NOT
86033: AND
86034: IFFALSE 86071
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
86036: LD_VAR 0 2
86040: PPUSH
86041: LD_EXP 44
86045: PUSH
86046: LD_VAR 0 2
86050: ARRAY
86051: PPUSH
86052: LD_VAR 0 3
86056: PPUSH
86057: LD_VAR 0 3
86061: PPUSH
86062: CALL_OW 257
86066: PPUSH
86067: CALL 84843 0 4
// end ;
86071: GO 85920
86073: POP
86074: POP
// end ;
86075: GO 85855
86077: POP
86078: POP
// end ;
86079: LD_VAR 0 1
86083: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
86084: LD_INT 0
86086: PPUSH
86087: PPUSH
86088: PPUSH
86089: PPUSH
86090: PPUSH
86091: PPUSH
// if not mc_bases [ base ] then
86092: LD_EXP 44
86096: PUSH
86097: LD_VAR 0 1
86101: ARRAY
86102: NOT
86103: IFFALSE 86107
// exit ;
86105: GO 86289
// tmp := [ ] ;
86107: LD_ADDR_VAR 0 6
86111: PUSH
86112: EMPTY
86113: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
86114: LD_ADDR_VAR 0 7
86118: PUSH
86119: LD_VAR 0 3
86123: PPUSH
86124: LD_INT 0
86126: PPUSH
86127: CALL_OW 517
86131: ST_TO_ADDR
// if not list then
86132: LD_VAR 0 7
86136: NOT
86137: IFFALSE 86141
// exit ;
86139: GO 86289
// for i = 1 to amount do
86141: LD_ADDR_VAR 0 5
86145: PUSH
86146: DOUBLE
86147: LD_INT 1
86149: DEC
86150: ST_TO_ADDR
86151: LD_VAR 0 2
86155: PUSH
86156: FOR_TO
86157: IFFALSE 86237
// begin x := rand ( 1 , list [ 1 ] ) ;
86159: LD_ADDR_VAR 0 8
86163: PUSH
86164: LD_INT 1
86166: PPUSH
86167: LD_VAR 0 7
86171: PUSH
86172: LD_INT 1
86174: ARRAY
86175: PPUSH
86176: CALL_OW 12
86180: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
86181: LD_ADDR_VAR 0 6
86185: PUSH
86186: LD_VAR 0 6
86190: PPUSH
86191: LD_VAR 0 5
86195: PPUSH
86196: LD_VAR 0 7
86200: PUSH
86201: LD_INT 1
86203: ARRAY
86204: PUSH
86205: LD_VAR 0 8
86209: ARRAY
86210: PUSH
86211: LD_VAR 0 7
86215: PUSH
86216: LD_INT 2
86218: ARRAY
86219: PUSH
86220: LD_VAR 0 8
86224: ARRAY
86225: PUSH
86226: EMPTY
86227: LIST
86228: LIST
86229: PPUSH
86230: CALL_OW 1
86234: ST_TO_ADDR
// end ;
86235: GO 86156
86237: POP
86238: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
86239: LD_ADDR_EXP 57
86243: PUSH
86244: LD_EXP 57
86248: PPUSH
86249: LD_VAR 0 1
86253: PPUSH
86254: LD_VAR 0 6
86258: PPUSH
86259: CALL_OW 1
86263: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
86264: LD_ADDR_EXP 59
86268: PUSH
86269: LD_EXP 59
86273: PPUSH
86274: LD_VAR 0 1
86278: PPUSH
86279: LD_VAR 0 3
86283: PPUSH
86284: CALL_OW 1
86288: ST_TO_ADDR
// end ;
86289: LD_VAR 0 4
86293: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
86294: LD_INT 0
86296: PPUSH
// if not mc_bases [ base ] then
86297: LD_EXP 44
86301: PUSH
86302: LD_VAR 0 1
86306: ARRAY
86307: NOT
86308: IFFALSE 86312
// exit ;
86310: GO 86337
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
86312: LD_ADDR_EXP 49
86316: PUSH
86317: LD_EXP 49
86321: PPUSH
86322: LD_VAR 0 1
86326: PPUSH
86327: LD_VAR 0 2
86331: PPUSH
86332: CALL_OW 1
86336: ST_TO_ADDR
// end ;
86337: LD_VAR 0 3
86341: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
86342: LD_INT 0
86344: PPUSH
// if not mc_bases [ base ] then
86345: LD_EXP 44
86349: PUSH
86350: LD_VAR 0 1
86354: ARRAY
86355: NOT
86356: IFFALSE 86360
// exit ;
86358: GO 86397
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union list ) ;
86360: LD_ADDR_EXP 49
86364: PUSH
86365: LD_EXP 49
86369: PPUSH
86370: LD_VAR 0 1
86374: PPUSH
86375: LD_EXP 49
86379: PUSH
86380: LD_VAR 0 1
86384: ARRAY
86385: PUSH
86386: LD_VAR 0 2
86390: UNION
86391: PPUSH
86392: CALL_OW 1
86396: ST_TO_ADDR
// end ;
86397: LD_VAR 0 3
86401: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
86402: LD_INT 0
86404: PPUSH
// if not mc_bases [ base ] then
86405: LD_EXP 44
86409: PUSH
86410: LD_VAR 0 1
86414: ARRAY
86415: NOT
86416: IFFALSE 86420
// exit ;
86418: GO 86445
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
86420: LD_ADDR_EXP 65
86424: PUSH
86425: LD_EXP 65
86429: PPUSH
86430: LD_VAR 0 1
86434: PPUSH
86435: LD_VAR 0 2
86439: PPUSH
86440: CALL_OW 1
86444: ST_TO_ADDR
// end ;
86445: LD_VAR 0 3
86449: RET
// export function MC_InsertProduceList ( base , components ) ; begin
86450: LD_INT 0
86452: PPUSH
// if not mc_bases [ base ] then
86453: LD_EXP 44
86457: PUSH
86458: LD_VAR 0 1
86462: ARRAY
86463: NOT
86464: IFFALSE 86468
// exit ;
86466: GO 86505
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ components ) ;
86468: LD_ADDR_EXP 65
86472: PUSH
86473: LD_EXP 65
86477: PPUSH
86478: LD_VAR 0 1
86482: PPUSH
86483: LD_EXP 65
86487: PUSH
86488: LD_VAR 0 1
86492: ARRAY
86493: PUSH
86494: LD_VAR 0 2
86498: ADD
86499: PPUSH
86500: CALL_OW 1
86504: ST_TO_ADDR
// end ;
86505: LD_VAR 0 3
86509: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
86510: LD_INT 0
86512: PPUSH
// if not mc_bases [ base ] then
86513: LD_EXP 44
86517: PUSH
86518: LD_VAR 0 1
86522: ARRAY
86523: NOT
86524: IFFALSE 86528
// exit ;
86526: GO 86582
// mc_defender := Replace ( mc_defender , base , deflist ) ;
86528: LD_ADDR_EXP 66
86532: PUSH
86533: LD_EXP 66
86537: PPUSH
86538: LD_VAR 0 1
86542: PPUSH
86543: LD_VAR 0 2
86547: PPUSH
86548: CALL_OW 1
86552: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
86553: LD_ADDR_EXP 55
86557: PUSH
86558: LD_EXP 55
86562: PPUSH
86563: LD_VAR 0 1
86567: PPUSH
86568: LD_VAR 0 2
86572: PUSH
86573: LD_INT 0
86575: PLUS
86576: PPUSH
86577: CALL_OW 1
86581: ST_TO_ADDR
// end ;
86582: LD_VAR 0 3
86586: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
86587: LD_INT 0
86589: PPUSH
// if not mc_bases [ base ] then
86590: LD_EXP 44
86594: PUSH
86595: LD_VAR 0 1
86599: ARRAY
86600: NOT
86601: IFFALSE 86605
// exit ;
86603: GO 86630
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
86605: LD_ADDR_EXP 55
86609: PUSH
86610: LD_EXP 55
86614: PPUSH
86615: LD_VAR 0 1
86619: PPUSH
86620: LD_VAR 0 2
86624: PPUSH
86625: CALL_OW 1
86629: ST_TO_ADDR
// end ;
86630: LD_VAR 0 3
86634: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
86635: LD_INT 0
86637: PPUSH
86638: PPUSH
86639: PPUSH
86640: PPUSH
// if not mc_bases [ base ] then
86641: LD_EXP 44
86645: PUSH
86646: LD_VAR 0 1
86650: ARRAY
86651: NOT
86652: IFFALSE 86656
// exit ;
86654: GO 86721
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
86656: LD_ADDR_EXP 64
86660: PUSH
86661: LD_EXP 64
86665: PPUSH
86666: LD_VAR 0 1
86670: PUSH
86671: LD_EXP 64
86675: PUSH
86676: LD_VAR 0 1
86680: ARRAY
86681: PUSH
86682: LD_INT 1
86684: PLUS
86685: PUSH
86686: EMPTY
86687: LIST
86688: LIST
86689: PPUSH
86690: LD_VAR 0 1
86694: PUSH
86695: LD_VAR 0 2
86699: PUSH
86700: LD_VAR 0 3
86704: PUSH
86705: LD_VAR 0 4
86709: PUSH
86710: EMPTY
86711: LIST
86712: LIST
86713: LIST
86714: LIST
86715: PPUSH
86716: CALL 26712 0 3
86720: ST_TO_ADDR
// end ;
86721: LD_VAR 0 5
86725: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
86726: LD_INT 0
86728: PPUSH
// if not mc_bases [ base ] then
86729: LD_EXP 44
86733: PUSH
86734: LD_VAR 0 1
86738: ARRAY
86739: NOT
86740: IFFALSE 86744
// exit ;
86742: GO 86769
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
86744: LD_ADDR_EXP 81
86748: PUSH
86749: LD_EXP 81
86753: PPUSH
86754: LD_VAR 0 1
86758: PPUSH
86759: LD_VAR 0 2
86763: PPUSH
86764: CALL_OW 1
86768: ST_TO_ADDR
// end ;
86769: LD_VAR 0 3
86773: RET
// export function MC_GetMinesField ( base ) ; begin
86774: LD_INT 0
86776: PPUSH
// result := mc_mines [ base ] ;
86777: LD_ADDR_VAR 0 2
86781: PUSH
86782: LD_EXP 57
86786: PUSH
86787: LD_VAR 0 1
86791: ARRAY
86792: ST_TO_ADDR
// end ;
86793: LD_VAR 0 2
86797: RET
// export function MC_GetProduceList ( base ) ; begin
86798: LD_INT 0
86800: PPUSH
// result := mc_produce [ base ] ;
86801: LD_ADDR_VAR 0 2
86805: PUSH
86806: LD_EXP 65
86810: PUSH
86811: LD_VAR 0 1
86815: ARRAY
86816: ST_TO_ADDR
// end ;
86817: LD_VAR 0 2
86821: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
86822: LD_INT 0
86824: PPUSH
86825: PPUSH
// if not mc_bases then
86826: LD_EXP 44
86830: NOT
86831: IFFALSE 86835
// exit ;
86833: GO 86900
// if mc_bases [ base ] then
86835: LD_EXP 44
86839: PUSH
86840: LD_VAR 0 1
86844: ARRAY
86845: IFFALSE 86900
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
86847: LD_ADDR_VAR 0 3
86851: PUSH
86852: LD_EXP 44
86856: PUSH
86857: LD_VAR 0 1
86861: ARRAY
86862: PPUSH
86863: LD_INT 30
86865: PUSH
86866: LD_VAR 0 2
86870: PUSH
86871: EMPTY
86872: LIST
86873: LIST
86874: PPUSH
86875: CALL_OW 72
86879: ST_TO_ADDR
// if result then
86880: LD_VAR 0 3
86884: IFFALSE 86900
// result := result [ 1 ] ;
86886: LD_ADDR_VAR 0 3
86890: PUSH
86891: LD_VAR 0 3
86895: PUSH
86896: LD_INT 1
86898: ARRAY
86899: ST_TO_ADDR
// end ; end ;
86900: LD_VAR 0 3
86904: RET
// export function MC_GetBuildings ( base , btype ) ; var i ; begin
86905: LD_INT 0
86907: PPUSH
86908: PPUSH
// if not mc_bases then
86909: LD_EXP 44
86913: NOT
86914: IFFALSE 86918
// exit ;
86916: GO 86963
// if mc_bases [ base ] then
86918: LD_EXP 44
86922: PUSH
86923: LD_VAR 0 1
86927: ARRAY
86928: IFFALSE 86963
// result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
86930: LD_ADDR_VAR 0 3
86934: PUSH
86935: LD_EXP 44
86939: PUSH
86940: LD_VAR 0 1
86944: ARRAY
86945: PPUSH
86946: LD_INT 30
86948: PUSH
86949: LD_VAR 0 2
86953: PUSH
86954: EMPTY
86955: LIST
86956: LIST
86957: PPUSH
86958: CALL_OW 72
86962: ST_TO_ADDR
// end ;
86963: LD_VAR 0 3
86967: RET
// export function MC_SetTame ( base , area ) ; begin
86968: LD_INT 0
86970: PPUSH
// if not mc_bases or not base then
86971: LD_EXP 44
86975: NOT
86976: PUSH
86977: LD_VAR 0 1
86981: NOT
86982: OR
86983: IFFALSE 86987
// exit ;
86985: GO 87012
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
86987: LD_ADDR_EXP 72
86991: PUSH
86992: LD_EXP 72
86996: PPUSH
86997: LD_VAR 0 1
87001: PPUSH
87002: LD_VAR 0 2
87006: PPUSH
87007: CALL_OW 1
87011: ST_TO_ADDR
// end ;
87012: LD_VAR 0 3
87016: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
87017: LD_INT 0
87019: PPUSH
87020: PPUSH
// if not mc_bases or not base then
87021: LD_EXP 44
87025: NOT
87026: PUSH
87027: LD_VAR 0 1
87031: NOT
87032: OR
87033: IFFALSE 87037
// exit ;
87035: GO 87139
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
87037: LD_ADDR_VAR 0 4
87041: PUSH
87042: LD_EXP 44
87046: PUSH
87047: LD_VAR 0 1
87051: ARRAY
87052: PPUSH
87053: LD_INT 30
87055: PUSH
87056: LD_VAR 0 2
87060: PUSH
87061: EMPTY
87062: LIST
87063: LIST
87064: PPUSH
87065: CALL_OW 72
87069: ST_TO_ADDR
// if not tmp then
87070: LD_VAR 0 4
87074: NOT
87075: IFFALSE 87079
// exit ;
87077: GO 87139
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
87079: LD_ADDR_EXP 76
87083: PUSH
87084: LD_EXP 76
87088: PPUSH
87089: LD_VAR 0 1
87093: PPUSH
87094: LD_EXP 76
87098: PUSH
87099: LD_VAR 0 1
87103: ARRAY
87104: PPUSH
87105: LD_EXP 76
87109: PUSH
87110: LD_VAR 0 1
87114: ARRAY
87115: PUSH
87116: LD_INT 1
87118: PLUS
87119: PPUSH
87120: LD_VAR 0 4
87124: PUSH
87125: LD_INT 1
87127: ARRAY
87128: PPUSH
87129: CALL_OW 2
87133: PPUSH
87134: CALL_OW 1
87138: ST_TO_ADDR
// end ;
87139: LD_VAR 0 3
87143: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
87144: LD_INT 0
87146: PPUSH
87147: PPUSH
// if not mc_bases or not base or not kinds then
87148: LD_EXP 44
87152: NOT
87153: PUSH
87154: LD_VAR 0 1
87158: NOT
87159: OR
87160: PUSH
87161: LD_VAR 0 2
87165: NOT
87166: OR
87167: IFFALSE 87171
// exit ;
87169: GO 87232
// for i in kinds do
87171: LD_ADDR_VAR 0 4
87175: PUSH
87176: LD_VAR 0 2
87180: PUSH
87181: FOR_IN
87182: IFFALSE 87230
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
87184: LD_ADDR_EXP 78
87188: PUSH
87189: LD_EXP 78
87193: PPUSH
87194: LD_VAR 0 1
87198: PUSH
87199: LD_EXP 78
87203: PUSH
87204: LD_VAR 0 1
87208: ARRAY
87209: PUSH
87210: LD_INT 1
87212: PLUS
87213: PUSH
87214: EMPTY
87215: LIST
87216: LIST
87217: PPUSH
87218: LD_VAR 0 4
87222: PPUSH
87223: CALL 26712 0 3
87227: ST_TO_ADDR
87228: GO 87181
87230: POP
87231: POP
// end ;
87232: LD_VAR 0 3
87236: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
87237: LD_INT 0
87239: PPUSH
// if not mc_bases or not base or not areas then
87240: LD_EXP 44
87244: NOT
87245: PUSH
87246: LD_VAR 0 1
87250: NOT
87251: OR
87252: PUSH
87253: LD_VAR 0 2
87257: NOT
87258: OR
87259: IFFALSE 87263
// exit ;
87261: GO 87288
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
87263: LD_ADDR_EXP 62
87267: PUSH
87268: LD_EXP 62
87272: PPUSH
87273: LD_VAR 0 1
87277: PPUSH
87278: LD_VAR 0 2
87282: PPUSH
87283: CALL_OW 1
87287: ST_TO_ADDR
// end ;
87288: LD_VAR 0 3
87292: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
87293: LD_INT 0
87295: PPUSH
// if not mc_bases or not base or not teleports_exit then
87296: LD_EXP 44
87300: NOT
87301: PUSH
87302: LD_VAR 0 1
87306: NOT
87307: OR
87308: PUSH
87309: LD_VAR 0 2
87313: NOT
87314: OR
87315: IFFALSE 87319
// exit ;
87317: GO 87344
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
87319: LD_ADDR_EXP 79
87323: PUSH
87324: LD_EXP 79
87328: PPUSH
87329: LD_VAR 0 1
87333: PPUSH
87334: LD_VAR 0 2
87338: PPUSH
87339: CALL_OW 1
87343: ST_TO_ADDR
// end ;
87344: LD_VAR 0 3
87348: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
87349: LD_INT 0
87351: PPUSH
87352: PPUSH
87353: PPUSH
// if not mc_bases or not base or not ext_list then
87354: LD_EXP 44
87358: NOT
87359: PUSH
87360: LD_VAR 0 1
87364: NOT
87365: OR
87366: PUSH
87367: LD_VAR 0 5
87371: NOT
87372: OR
87373: IFFALSE 87377
// exit ;
87375: GO 87550
// tmp := GetFacExtXYD ( x , y , d ) ;
87377: LD_ADDR_VAR 0 8
87381: PUSH
87382: LD_VAR 0 2
87386: PPUSH
87387: LD_VAR 0 3
87391: PPUSH
87392: LD_VAR 0 4
87396: PPUSH
87397: CALL 60100 0 3
87401: ST_TO_ADDR
// if not tmp then
87402: LD_VAR 0 8
87406: NOT
87407: IFFALSE 87411
// exit ;
87409: GO 87550
// for i in tmp do
87411: LD_ADDR_VAR 0 7
87415: PUSH
87416: LD_VAR 0 8
87420: PUSH
87421: FOR_IN
87422: IFFALSE 87548
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
87424: LD_ADDR_EXP 49
87428: PUSH
87429: LD_EXP 49
87433: PPUSH
87434: LD_VAR 0 1
87438: PPUSH
87439: LD_EXP 49
87443: PUSH
87444: LD_VAR 0 1
87448: ARRAY
87449: PPUSH
87450: LD_EXP 49
87454: PUSH
87455: LD_VAR 0 1
87459: ARRAY
87460: PUSH
87461: LD_INT 1
87463: PLUS
87464: PPUSH
87465: LD_VAR 0 5
87469: PUSH
87470: LD_INT 1
87472: ARRAY
87473: PUSH
87474: LD_VAR 0 7
87478: PUSH
87479: LD_INT 1
87481: ARRAY
87482: PUSH
87483: LD_VAR 0 7
87487: PUSH
87488: LD_INT 2
87490: ARRAY
87491: PUSH
87492: LD_VAR 0 7
87496: PUSH
87497: LD_INT 3
87499: ARRAY
87500: PUSH
87501: EMPTY
87502: LIST
87503: LIST
87504: LIST
87505: LIST
87506: PPUSH
87507: CALL_OW 2
87511: PPUSH
87512: CALL_OW 1
87516: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
87517: LD_ADDR_VAR 0 5
87521: PUSH
87522: LD_VAR 0 5
87526: PPUSH
87527: LD_INT 1
87529: PPUSH
87530: CALL_OW 3
87534: ST_TO_ADDR
// if not ext_list then
87535: LD_VAR 0 5
87539: NOT
87540: IFFALSE 87546
// exit ;
87542: POP
87543: POP
87544: GO 87550
// end ;
87546: GO 87421
87548: POP
87549: POP
// end ;
87550: LD_VAR 0 6
87554: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
87555: LD_INT 0
87557: PPUSH
// if not mc_bases or not base or not weapon_list then
87558: LD_EXP 44
87562: NOT
87563: PUSH
87564: LD_VAR 0 1
87568: NOT
87569: OR
87570: PUSH
87571: LD_VAR 0 2
87575: NOT
87576: OR
87577: IFFALSE 87581
// exit ;
87579: GO 87606
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
87581: LD_ADDR_EXP 83
87585: PUSH
87586: LD_EXP 83
87590: PPUSH
87591: LD_VAR 0 1
87595: PPUSH
87596: LD_VAR 0 2
87600: PPUSH
87601: CALL_OW 1
87605: ST_TO_ADDR
// end ;
87606: LD_VAR 0 3
87610: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
87611: LD_INT 0
87613: PPUSH
// if not mc_bases or not base or not tech_list then
87614: LD_EXP 44
87618: NOT
87619: PUSH
87620: LD_VAR 0 1
87624: NOT
87625: OR
87626: PUSH
87627: LD_VAR 0 2
87631: NOT
87632: OR
87633: IFFALSE 87637
// exit ;
87635: GO 87662
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
87637: LD_ADDR_EXP 71
87641: PUSH
87642: LD_EXP 71
87646: PPUSH
87647: LD_VAR 0 1
87651: PPUSH
87652: LD_VAR 0 2
87656: PPUSH
87657: CALL_OW 1
87661: ST_TO_ADDR
// end ;
87662: LD_VAR 0 3
87666: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
87667: LD_INT 0
87669: PPUSH
// if not mc_bases or not parking_area or not base then
87670: LD_EXP 44
87674: NOT
87675: PUSH
87676: LD_VAR 0 2
87680: NOT
87681: OR
87682: PUSH
87683: LD_VAR 0 1
87687: NOT
87688: OR
87689: IFFALSE 87693
// exit ;
87691: GO 87718
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
87693: LD_ADDR_EXP 68
87697: PUSH
87698: LD_EXP 68
87702: PPUSH
87703: LD_VAR 0 1
87707: PPUSH
87708: LD_VAR 0 2
87712: PPUSH
87713: CALL_OW 1
87717: ST_TO_ADDR
// end ;
87718: LD_VAR 0 3
87722: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
87723: LD_INT 0
87725: PPUSH
// if not mc_bases or not base or not scan_area then
87726: LD_EXP 44
87730: NOT
87731: PUSH
87732: LD_VAR 0 1
87736: NOT
87737: OR
87738: PUSH
87739: LD_VAR 0 2
87743: NOT
87744: OR
87745: IFFALSE 87749
// exit ;
87747: GO 87774
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
87749: LD_ADDR_EXP 69
87753: PUSH
87754: LD_EXP 69
87758: PPUSH
87759: LD_VAR 0 1
87763: PPUSH
87764: LD_VAR 0 2
87768: PPUSH
87769: CALL_OW 1
87773: ST_TO_ADDR
// end ;
87774: LD_VAR 0 3
87778: RET
// export function MC_NotTameApeman ( base ) ; var ape_techs ; begin
87779: LD_INT 0
87781: PPUSH
87782: PPUSH
// if not mc_bases or not base then
87783: LD_EXP 44
87787: NOT
87788: PUSH
87789: LD_VAR 0 1
87793: NOT
87794: OR
87795: IFFALSE 87799
// exit ;
87797: GO 87863
// ape_techs := [ 1 , 2 , 3 , 4 , 11 ] ;
87799: LD_ADDR_VAR 0 3
87803: PUSH
87804: LD_INT 1
87806: PUSH
87807: LD_INT 2
87809: PUSH
87810: LD_INT 3
87812: PUSH
87813: LD_INT 4
87815: PUSH
87816: LD_INT 11
87818: PUSH
87819: EMPTY
87820: LIST
87821: LIST
87822: LIST
87823: LIST
87824: LIST
87825: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , mc_tech [ base ] diff ape_techs ) ;
87826: LD_ADDR_EXP 71
87830: PUSH
87831: LD_EXP 71
87835: PPUSH
87836: LD_VAR 0 1
87840: PPUSH
87841: LD_EXP 71
87845: PUSH
87846: LD_VAR 0 1
87850: ARRAY
87851: PUSH
87852: LD_VAR 0 3
87856: DIFF
87857: PPUSH
87858: CALL_OW 1
87862: ST_TO_ADDR
// end ;
87863: LD_VAR 0 2
87867: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
87868: LD_INT 0
87870: PPUSH
// result := mc_vehicles [ base ] ;
87871: LD_ADDR_VAR 0 3
87875: PUSH
87876: LD_EXP 63
87880: PUSH
87881: LD_VAR 0 1
87885: ARRAY
87886: ST_TO_ADDR
// if onlyCombat then
87887: LD_VAR 0 2
87891: IFFALSE 88056
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] , [ f_weapon , ru_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ) ;
87893: LD_ADDR_VAR 0 3
87897: PUSH
87898: LD_VAR 0 3
87902: PUSH
87903: LD_VAR 0 3
87907: PPUSH
87908: LD_INT 2
87910: PUSH
87911: LD_INT 34
87913: PUSH
87914: LD_INT 12
87916: PUSH
87917: EMPTY
87918: LIST
87919: LIST
87920: PUSH
87921: LD_INT 34
87923: PUSH
87924: LD_INT 51
87926: PUSH
87927: EMPTY
87928: LIST
87929: LIST
87930: PUSH
87931: LD_INT 34
87933: PUSH
87934: LD_EXP 30
87938: PUSH
87939: EMPTY
87940: LIST
87941: LIST
87942: PUSH
87943: LD_INT 34
87945: PUSH
87946: LD_INT 32
87948: PUSH
87949: EMPTY
87950: LIST
87951: LIST
87952: PUSH
87953: LD_INT 34
87955: PUSH
87956: LD_INT 13
87958: PUSH
87959: EMPTY
87960: LIST
87961: LIST
87962: PUSH
87963: LD_INT 34
87965: PUSH
87966: LD_INT 52
87968: PUSH
87969: EMPTY
87970: LIST
87971: LIST
87972: PUSH
87973: LD_INT 34
87975: PUSH
87976: LD_INT 14
87978: PUSH
87979: EMPTY
87980: LIST
87981: LIST
87982: PUSH
87983: LD_INT 34
87985: PUSH
87986: LD_INT 53
87988: PUSH
87989: EMPTY
87990: LIST
87991: LIST
87992: PUSH
87993: LD_INT 34
87995: PUSH
87996: LD_EXP 29
88000: PUSH
88001: EMPTY
88002: LIST
88003: LIST
88004: PUSH
88005: LD_INT 34
88007: PUSH
88008: LD_INT 31
88010: PUSH
88011: EMPTY
88012: LIST
88013: LIST
88014: PUSH
88015: LD_INT 34
88017: PUSH
88018: LD_INT 48
88020: PUSH
88021: EMPTY
88022: LIST
88023: LIST
88024: PUSH
88025: LD_INT 34
88027: PUSH
88028: LD_INT 8
88030: PUSH
88031: EMPTY
88032: LIST
88033: LIST
88034: PUSH
88035: EMPTY
88036: LIST
88037: LIST
88038: LIST
88039: LIST
88040: LIST
88041: LIST
88042: LIST
88043: LIST
88044: LIST
88045: LIST
88046: LIST
88047: LIST
88048: LIST
88049: PPUSH
88050: CALL_OW 72
88054: DIFF
88055: ST_TO_ADDR
// end ; end_of_file
88056: LD_VAR 0 3
88060: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
88061: LD_INT 0
88063: PPUSH
88064: PPUSH
88065: PPUSH
// if not mc_bases or not skirmish then
88066: LD_EXP 44
88070: NOT
88071: PUSH
88072: LD_EXP 42
88076: NOT
88077: OR
88078: IFFALSE 88082
// exit ;
88080: GO 88247
// for i = 1 to mc_bases do
88082: LD_ADDR_VAR 0 4
88086: PUSH
88087: DOUBLE
88088: LD_INT 1
88090: DEC
88091: ST_TO_ADDR
88092: LD_EXP 44
88096: PUSH
88097: FOR_TO
88098: IFFALSE 88245
// begin if sci in mc_bases [ i ] then
88100: LD_VAR 0 2
88104: PUSH
88105: LD_EXP 44
88109: PUSH
88110: LD_VAR 0 4
88114: ARRAY
88115: IN
88116: IFFALSE 88243
// begin mc_ape := ReplaceIn ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
88118: LD_ADDR_EXP 73
88122: PUSH
88123: LD_EXP 73
88127: PPUSH
88128: LD_VAR 0 4
88132: PUSH
88133: LD_EXP 73
88137: PUSH
88138: LD_VAR 0 4
88142: ARRAY
88143: PUSH
88144: LD_INT 1
88146: PLUS
88147: PUSH
88148: EMPTY
88149: LIST
88150: LIST
88151: PPUSH
88152: LD_VAR 0 1
88156: PPUSH
88157: CALL 26712 0 3
88161: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
88162: LD_ADDR_VAR 0 5
88166: PUSH
88167: LD_EXP 44
88171: PUSH
88172: LD_VAR 0 4
88176: ARRAY
88177: PPUSH
88178: LD_INT 2
88180: PUSH
88181: LD_INT 30
88183: PUSH
88184: LD_INT 0
88186: PUSH
88187: EMPTY
88188: LIST
88189: LIST
88190: PUSH
88191: LD_INT 30
88193: PUSH
88194: LD_INT 1
88196: PUSH
88197: EMPTY
88198: LIST
88199: LIST
88200: PUSH
88201: EMPTY
88202: LIST
88203: LIST
88204: LIST
88205: PPUSH
88206: CALL_OW 72
88210: PPUSH
88211: LD_VAR 0 1
88215: PPUSH
88216: CALL_OW 74
88220: ST_TO_ADDR
// if tmp then
88221: LD_VAR 0 5
88225: IFFALSE 88241
// ComStandNearbyBuilding ( ape , tmp ) ;
88227: LD_VAR 0 1
88231: PPUSH
88232: LD_VAR 0 5
88236: PPUSH
88237: CALL 20915 0 2
// break ;
88241: GO 88245
// end ; end ;
88243: GO 88097
88245: POP
88246: POP
// end ;
88247: LD_VAR 0 3
88251: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
88252: LD_INT 0
88254: PPUSH
88255: PPUSH
88256: PPUSH
// if not mc_bases or not skirmish then
88257: LD_EXP 44
88261: NOT
88262: PUSH
88263: LD_EXP 42
88267: NOT
88268: OR
88269: IFFALSE 88273
// exit ;
88271: GO 88362
// for i = 1 to mc_bases do
88273: LD_ADDR_VAR 0 4
88277: PUSH
88278: DOUBLE
88279: LD_INT 1
88281: DEC
88282: ST_TO_ADDR
88283: LD_EXP 44
88287: PUSH
88288: FOR_TO
88289: IFFALSE 88360
// begin if building in mc_busy_turret_list [ i ] then
88291: LD_VAR 0 1
88295: PUSH
88296: LD_EXP 54
88300: PUSH
88301: LD_VAR 0 4
88305: ARRAY
88306: IN
88307: IFFALSE 88358
// begin tmp := mc_busy_turret_list [ i ] diff building ;
88309: LD_ADDR_VAR 0 5
88313: PUSH
88314: LD_EXP 54
88318: PUSH
88319: LD_VAR 0 4
88323: ARRAY
88324: PUSH
88325: LD_VAR 0 1
88329: DIFF
88330: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
88331: LD_ADDR_EXP 54
88335: PUSH
88336: LD_EXP 54
88340: PPUSH
88341: LD_VAR 0 4
88345: PPUSH
88346: LD_VAR 0 5
88350: PPUSH
88351: CALL_OW 1
88355: ST_TO_ADDR
// break ;
88356: GO 88360
// end ; end ;
88358: GO 88288
88360: POP
88361: POP
// end ;
88362: LD_VAR 0 3
88366: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
88367: LD_INT 0
88369: PPUSH
88370: PPUSH
88371: PPUSH
// if not mc_bases or not skirmish then
88372: LD_EXP 44
88376: NOT
88377: PUSH
88378: LD_EXP 42
88382: NOT
88383: OR
88384: IFFALSE 88388
// exit ;
88386: GO 88587
// for i = 1 to mc_bases do
88388: LD_ADDR_VAR 0 5
88392: PUSH
88393: DOUBLE
88394: LD_INT 1
88396: DEC
88397: ST_TO_ADDR
88398: LD_EXP 44
88402: PUSH
88403: FOR_TO
88404: IFFALSE 88585
// if building in mc_bases [ i ] then
88406: LD_VAR 0 1
88410: PUSH
88411: LD_EXP 44
88415: PUSH
88416: LD_VAR 0 5
88420: ARRAY
88421: IN
88422: IFFALSE 88583
// begin tmp := mc_bases [ i ] diff building ;
88424: LD_ADDR_VAR 0 6
88428: PUSH
88429: LD_EXP 44
88433: PUSH
88434: LD_VAR 0 5
88438: ARRAY
88439: PUSH
88440: LD_VAR 0 1
88444: DIFF
88445: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
88446: LD_ADDR_EXP 44
88450: PUSH
88451: LD_EXP 44
88455: PPUSH
88456: LD_VAR 0 5
88460: PPUSH
88461: LD_VAR 0 6
88465: PPUSH
88466: CALL_OW 1
88470: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
88471: LD_VAR 0 1
88475: PUSH
88476: LD_EXP 52
88480: PUSH
88481: LD_VAR 0 5
88485: ARRAY
88486: IN
88487: IFFALSE 88526
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
88489: LD_ADDR_EXP 52
88493: PUSH
88494: LD_EXP 52
88498: PPUSH
88499: LD_VAR 0 5
88503: PPUSH
88504: LD_EXP 52
88508: PUSH
88509: LD_VAR 0 5
88513: ARRAY
88514: PUSH
88515: LD_VAR 0 1
88519: DIFF
88520: PPUSH
88521: CALL_OW 1
88525: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
88526: LD_VAR 0 1
88530: PUSH
88531: LD_EXP 53
88535: PUSH
88536: LD_VAR 0 5
88540: ARRAY
88541: IN
88542: IFFALSE 88581
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
88544: LD_ADDR_EXP 53
88548: PUSH
88549: LD_EXP 53
88553: PPUSH
88554: LD_VAR 0 5
88558: PPUSH
88559: LD_EXP 53
88563: PUSH
88564: LD_VAR 0 5
88568: ARRAY
88569: PUSH
88570: LD_VAR 0 1
88574: DIFF
88575: PPUSH
88576: CALL_OW 1
88580: ST_TO_ADDR
// break ;
88581: GO 88585
// end ;
88583: GO 88403
88585: POP
88586: POP
// end ;
88587: LD_VAR 0 4
88591: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
88592: LD_INT 0
88594: PPUSH
88595: PPUSH
88596: PPUSH
// if not mc_bases or not skirmish or not side in mc_sides then
88597: LD_EXP 44
88601: NOT
88602: PUSH
88603: LD_EXP 42
88607: NOT
88608: OR
88609: PUSH
88610: LD_VAR 0 3
88614: PUSH
88615: LD_EXP 70
88619: IN
88620: NOT
88621: OR
88622: IFFALSE 88626
// exit ;
88624: GO 88749
// for i = 1 to mc_vehicles do
88626: LD_ADDR_VAR 0 6
88630: PUSH
88631: DOUBLE
88632: LD_INT 1
88634: DEC
88635: ST_TO_ADDR
88636: LD_EXP 63
88640: PUSH
88641: FOR_TO
88642: IFFALSE 88747
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
88644: LD_VAR 0 2
88648: PUSH
88649: LD_EXP 63
88653: PUSH
88654: LD_VAR 0 6
88658: ARRAY
88659: IN
88660: PUSH
88661: LD_VAR 0 1
88665: PUSH
88666: LD_EXP 63
88670: PUSH
88671: LD_VAR 0 6
88675: ARRAY
88676: IN
88677: OR
88678: IFFALSE 88745
// begin tmp := mc_vehicles [ i ] diff old ;
88680: LD_ADDR_VAR 0 7
88684: PUSH
88685: LD_EXP 63
88689: PUSH
88690: LD_VAR 0 6
88694: ARRAY
88695: PUSH
88696: LD_VAR 0 2
88700: DIFF
88701: ST_TO_ADDR
// tmp := tmp diff new ;
88702: LD_ADDR_VAR 0 7
88706: PUSH
88707: LD_VAR 0 7
88711: PUSH
88712: LD_VAR 0 1
88716: DIFF
88717: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
88718: LD_ADDR_EXP 63
88722: PUSH
88723: LD_EXP 63
88727: PPUSH
88728: LD_VAR 0 6
88732: PPUSH
88733: LD_VAR 0 7
88737: PPUSH
88738: CALL_OW 1
88742: ST_TO_ADDR
// break ;
88743: GO 88747
// end ;
88745: GO 88641
88747: POP
88748: POP
// end ;
88749: LD_VAR 0 5
88753: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
88754: LD_INT 0
88756: PPUSH
88757: PPUSH
88758: PPUSH
88759: PPUSH
// if not mc_bases or not skirmish then
88760: LD_EXP 44
88764: NOT
88765: PUSH
88766: LD_EXP 42
88770: NOT
88771: OR
88772: IFFALSE 88776
// exit ;
88774: GO 89153
// side := GetSide ( vehicle ) ;
88776: LD_ADDR_VAR 0 5
88780: PUSH
88781: LD_VAR 0 1
88785: PPUSH
88786: CALL_OW 255
88790: ST_TO_ADDR
// for i = 1 to mc_bases do
88791: LD_ADDR_VAR 0 4
88795: PUSH
88796: DOUBLE
88797: LD_INT 1
88799: DEC
88800: ST_TO_ADDR
88801: LD_EXP 44
88805: PUSH
88806: FOR_TO
88807: IFFALSE 89151
// begin if factory in mc_bases [ i ] then
88809: LD_VAR 0 2
88813: PUSH
88814: LD_EXP 44
88818: PUSH
88819: LD_VAR 0 4
88823: ARRAY
88824: IN
88825: IFFALSE 89149
// begin if mc_defender [ i ] < mc_defender_limit [ i ] and not GetWeapon ( vehicle ) in [ ar_control_tower , ar_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , us_cargo_bay , ar_radar , ru_radar , us_radar , ru_bulldozer , us_bulldozer , ar_bio_bomb , ar_selfpropelled_bomb , us_hack , us_crane , ru_crane , ru_siberium_rocket , us_siberium_rocket ] then
88827: LD_EXP 66
88831: PUSH
88832: LD_VAR 0 4
88836: ARRAY
88837: PUSH
88838: LD_EXP 55
88842: PUSH
88843: LD_VAR 0 4
88847: ARRAY
88848: LESS
88849: PUSH
88850: LD_VAR 0 1
88854: PPUSH
88855: CALL_OW 264
88859: PUSH
88860: LD_INT 31
88862: PUSH
88863: LD_INT 32
88865: PUSH
88866: LD_INT 51
88868: PUSH
88869: LD_EXP 30
88873: PUSH
88874: LD_INT 12
88876: PUSH
88877: LD_INT 30
88879: PUSH
88880: LD_EXP 29
88884: PUSH
88885: LD_INT 11
88887: PUSH
88888: LD_INT 53
88890: PUSH
88891: LD_INT 14
88893: PUSH
88894: LD_EXP 33
88898: PUSH
88899: LD_INT 29
88901: PUSH
88902: LD_EXP 31
88906: PUSH
88907: LD_INT 13
88909: PUSH
88910: LD_INT 52
88912: PUSH
88913: LD_INT 48
88915: PUSH
88916: LD_INT 8
88918: PUSH
88919: EMPTY
88920: LIST
88921: LIST
88922: LIST
88923: LIST
88924: LIST
88925: LIST
88926: LIST
88927: LIST
88928: LIST
88929: LIST
88930: LIST
88931: LIST
88932: LIST
88933: LIST
88934: LIST
88935: LIST
88936: LIST
88937: IN
88938: NOT
88939: AND
88940: IFFALSE 88988
// mc_defender := ReplaceIn ( mc_defender , [ i , mc_defender [ i ] + 1 ] , vehicle ) else
88942: LD_ADDR_EXP 66
88946: PUSH
88947: LD_EXP 66
88951: PPUSH
88952: LD_VAR 0 4
88956: PUSH
88957: LD_EXP 66
88961: PUSH
88962: LD_VAR 0 4
88966: ARRAY
88967: PUSH
88968: LD_INT 1
88970: PLUS
88971: PUSH
88972: EMPTY
88973: LIST
88974: LIST
88975: PPUSH
88976: LD_VAR 0 1
88980: PPUSH
88981: CALL 26712 0 3
88985: ST_TO_ADDR
88986: GO 89032
// mc_vehicles := ReplaceIn ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
88988: LD_ADDR_EXP 63
88992: PUSH
88993: LD_EXP 63
88997: PPUSH
88998: LD_VAR 0 4
89002: PUSH
89003: LD_EXP 63
89007: PUSH
89008: LD_VAR 0 4
89012: ARRAY
89013: PUSH
89014: LD_INT 1
89016: PLUS
89017: PUSH
89018: EMPTY
89019: LIST
89020: LIST
89021: PPUSH
89022: LD_VAR 0 1
89026: PPUSH
89027: CALL 26712 0 3
89031: ST_TO_ADDR
// if GetControl ( vehicle ) = control_remote then
89032: LD_VAR 0 1
89036: PPUSH
89037: CALL_OW 263
89041: PUSH
89042: LD_INT 2
89044: EQUAL
89045: IFFALSE 89065
// begin repeat wait ( 0 0$1 ) ;
89047: LD_INT 35
89049: PPUSH
89050: CALL_OW 67
// until IsControledBy ( vehicle ) ;
89054: LD_VAR 0 1
89058: PPUSH
89059: CALL_OW 312
89063: IFFALSE 89047
// end ; ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
89065: LD_VAR 0 1
89069: PPUSH
89070: LD_EXP 68
89074: PUSH
89075: LD_VAR 0 4
89079: ARRAY
89080: PPUSH
89081: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
89085: LD_VAR 0 1
89089: PPUSH
89090: CALL_OW 263
89094: PUSH
89095: LD_INT 1
89097: NONEQUAL
89098: IFFALSE 89102
// break ;
89100: GO 89151
// repeat wait ( 0 0$1 ) ;
89102: LD_INT 35
89104: PPUSH
89105: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
89109: LD_VAR 0 1
89113: PPUSH
89114: LD_EXP 68
89118: PUSH
89119: LD_VAR 0 4
89123: ARRAY
89124: PPUSH
89125: CALL_OW 308
89129: IFFALSE 89102
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
89131: LD_VAR 0 1
89135: PPUSH
89136: CALL_OW 311
89140: PPUSH
89141: CALL_OW 121
// exit ;
89145: POP
89146: POP
89147: GO 89153
// end ; end ;
89149: GO 88806
89151: POP
89152: POP
// end ;
89153: LD_VAR 0 3
89157: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
89158: LD_INT 0
89160: PPUSH
89161: PPUSH
89162: PPUSH
89163: PPUSH
// if not mc_bases or not skirmish then
89164: LD_EXP 44
89168: NOT
89169: PUSH
89170: LD_EXP 42
89174: NOT
89175: OR
89176: IFFALSE 89180
// exit ;
89178: GO 89533
// repeat wait ( 0 0$1 ) ;
89180: LD_INT 35
89182: PPUSH
89183: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
89187: LD_VAR 0 2
89191: PPUSH
89192: LD_VAR 0 3
89196: PPUSH
89197: CALL_OW 284
89201: IFFALSE 89180
// if GetResourceTypeXY ( x , y ) = mat_artefact then
89203: LD_VAR 0 2
89207: PPUSH
89208: LD_VAR 0 3
89212: PPUSH
89213: CALL_OW 283
89217: PUSH
89218: LD_INT 4
89220: EQUAL
89221: IFFALSE 89225
// exit ;
89223: GO 89533
// for i = 1 to mc_bases do
89225: LD_ADDR_VAR 0 7
89229: PUSH
89230: DOUBLE
89231: LD_INT 1
89233: DEC
89234: ST_TO_ADDR
89235: LD_EXP 44
89239: PUSH
89240: FOR_TO
89241: IFFALSE 89531
// begin if mc_crates_area [ i ] then
89243: LD_EXP 62
89247: PUSH
89248: LD_VAR 0 7
89252: ARRAY
89253: IFFALSE 89364
// for j in mc_crates_area [ i ] do
89255: LD_ADDR_VAR 0 8
89259: PUSH
89260: LD_EXP 62
89264: PUSH
89265: LD_VAR 0 7
89269: ARRAY
89270: PUSH
89271: FOR_IN
89272: IFFALSE 89362
// if InArea ( x , y , j ) then
89274: LD_VAR 0 2
89278: PPUSH
89279: LD_VAR 0 3
89283: PPUSH
89284: LD_VAR 0 8
89288: PPUSH
89289: CALL_OW 309
89293: IFFALSE 89360
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
89295: LD_ADDR_EXP 60
89299: PUSH
89300: LD_EXP 60
89304: PPUSH
89305: LD_VAR 0 7
89309: PUSH
89310: LD_EXP 60
89314: PUSH
89315: LD_VAR 0 7
89319: ARRAY
89320: PUSH
89321: LD_INT 1
89323: PLUS
89324: PUSH
89325: EMPTY
89326: LIST
89327: LIST
89328: PPUSH
89329: LD_VAR 0 4
89333: PUSH
89334: LD_VAR 0 2
89338: PUSH
89339: LD_VAR 0 3
89343: PUSH
89344: EMPTY
89345: LIST
89346: LIST
89347: LIST
89348: PPUSH
89349: CALL 26712 0 3
89353: ST_TO_ADDR
// exit ;
89354: POP
89355: POP
89356: POP
89357: POP
89358: GO 89533
// end ;
89360: GO 89271
89362: POP
89363: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
89364: LD_ADDR_VAR 0 9
89368: PUSH
89369: LD_EXP 44
89373: PUSH
89374: LD_VAR 0 7
89378: ARRAY
89379: PPUSH
89380: LD_INT 2
89382: PUSH
89383: LD_INT 30
89385: PUSH
89386: LD_INT 0
89388: PUSH
89389: EMPTY
89390: LIST
89391: LIST
89392: PUSH
89393: LD_INT 30
89395: PUSH
89396: LD_INT 1
89398: PUSH
89399: EMPTY
89400: LIST
89401: LIST
89402: PUSH
89403: EMPTY
89404: LIST
89405: LIST
89406: LIST
89407: PPUSH
89408: CALL_OW 72
89412: ST_TO_ADDR
// if not depot then
89413: LD_VAR 0 9
89417: NOT
89418: IFFALSE 89422
// continue ;
89420: GO 89240
// for j in depot do
89422: LD_ADDR_VAR 0 8
89426: PUSH
89427: LD_VAR 0 9
89431: PUSH
89432: FOR_IN
89433: IFFALSE 89527
// if GetDistUnitXY ( j , x , y ) < 30 then
89435: LD_VAR 0 8
89439: PPUSH
89440: LD_VAR 0 2
89444: PPUSH
89445: LD_VAR 0 3
89449: PPUSH
89450: CALL_OW 297
89454: PUSH
89455: LD_INT 30
89457: LESS
89458: IFFALSE 89525
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
89460: LD_ADDR_EXP 60
89464: PUSH
89465: LD_EXP 60
89469: PPUSH
89470: LD_VAR 0 7
89474: PUSH
89475: LD_EXP 60
89479: PUSH
89480: LD_VAR 0 7
89484: ARRAY
89485: PUSH
89486: LD_INT 1
89488: PLUS
89489: PUSH
89490: EMPTY
89491: LIST
89492: LIST
89493: PPUSH
89494: LD_VAR 0 4
89498: PUSH
89499: LD_VAR 0 2
89503: PUSH
89504: LD_VAR 0 3
89508: PUSH
89509: EMPTY
89510: LIST
89511: LIST
89512: LIST
89513: PPUSH
89514: CALL 26712 0 3
89518: ST_TO_ADDR
// exit ;
89519: POP
89520: POP
89521: POP
89522: POP
89523: GO 89533
// end ;
89525: GO 89432
89527: POP
89528: POP
// end ;
89529: GO 89240
89531: POP
89532: POP
// end ;
89533: LD_VAR 0 6
89537: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
89538: LD_INT 0
89540: PPUSH
89541: PPUSH
89542: PPUSH
89543: PPUSH
// if not mc_bases or not skirmish then
89544: LD_EXP 44
89548: NOT
89549: PUSH
89550: LD_EXP 42
89554: NOT
89555: OR
89556: IFFALSE 89560
// exit ;
89558: GO 89837
// side := GetSide ( lab ) ;
89560: LD_ADDR_VAR 0 4
89564: PUSH
89565: LD_VAR 0 2
89569: PPUSH
89570: CALL_OW 255
89574: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
89575: LD_VAR 0 4
89579: PUSH
89580: LD_EXP 70
89584: IN
89585: NOT
89586: PUSH
89587: LD_EXP 71
89591: NOT
89592: OR
89593: PUSH
89594: LD_EXP 44
89598: NOT
89599: OR
89600: IFFALSE 89604
// exit ;
89602: GO 89837
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
89604: LD_ADDR_EXP 71
89608: PUSH
89609: LD_EXP 71
89613: PPUSH
89614: LD_VAR 0 4
89618: PPUSH
89619: LD_EXP 71
89623: PUSH
89624: LD_VAR 0 4
89628: ARRAY
89629: PUSH
89630: LD_VAR 0 1
89634: DIFF
89635: PPUSH
89636: CALL_OW 1
89640: ST_TO_ADDR
// for i = 1 to mc_bases do
89641: LD_ADDR_VAR 0 5
89645: PUSH
89646: DOUBLE
89647: LD_INT 1
89649: DEC
89650: ST_TO_ADDR
89651: LD_EXP 44
89655: PUSH
89656: FOR_TO
89657: IFFALSE 89835
// begin if lab in mc_bases [ i ] then
89659: LD_VAR 0 2
89663: PUSH
89664: LD_EXP 44
89668: PUSH
89669: LD_VAR 0 5
89673: ARRAY
89674: IN
89675: IFFALSE 89833
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
89677: LD_VAR 0 1
89681: PUSH
89682: LD_INT 11
89684: PUSH
89685: LD_INT 4
89687: PUSH
89688: LD_INT 3
89690: PUSH
89691: LD_INT 2
89693: PUSH
89694: EMPTY
89695: LIST
89696: LIST
89697: LIST
89698: LIST
89699: IN
89700: PUSH
89701: LD_EXP 74
89705: PUSH
89706: LD_VAR 0 5
89710: ARRAY
89711: AND
89712: IFFALSE 89833
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
89714: LD_ADDR_VAR 0 6
89718: PUSH
89719: LD_EXP 74
89723: PUSH
89724: LD_VAR 0 5
89728: ARRAY
89729: PUSH
89730: LD_INT 1
89732: ARRAY
89733: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
89734: LD_ADDR_EXP 74
89738: PUSH
89739: LD_EXP 74
89743: PPUSH
89744: LD_VAR 0 5
89748: PPUSH
89749: EMPTY
89750: PPUSH
89751: CALL_OW 1
89755: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
89756: LD_VAR 0 6
89760: PPUSH
89761: LD_INT 0
89763: PPUSH
89764: CALL_OW 109
// ComExitBuilding ( tmp ) ;
89768: LD_VAR 0 6
89772: PPUSH
89773: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
89777: LD_ADDR_EXP 73
89781: PUSH
89782: LD_EXP 73
89786: PPUSH
89787: LD_VAR 0 5
89791: PPUSH
89792: LD_EXP 73
89796: PUSH
89797: LD_VAR 0 5
89801: ARRAY
89802: PPUSH
89803: LD_INT 1
89805: PPUSH
89806: LD_VAR 0 6
89810: PPUSH
89811: CALL_OW 2
89815: PPUSH
89816: CALL_OW 1
89820: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
89821: LD_VAR 0 5
89825: PPUSH
89826: LD_INT 112
89828: PPUSH
89829: CALL 66833 0 2
// end ; end ; end ;
89833: GO 89656
89835: POP
89836: POP
// end ;
89837: LD_VAR 0 3
89841: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
89842: LD_INT 0
89844: PPUSH
89845: PPUSH
89846: PPUSH
89847: PPUSH
89848: PPUSH
89849: PPUSH
89850: PPUSH
89851: PPUSH
// if not mc_bases or not skirmish then
89852: LD_EXP 44
89856: NOT
89857: PUSH
89858: LD_EXP 42
89862: NOT
89863: OR
89864: IFFALSE 89868
// exit ;
89866: GO 91239
// for i = 1 to mc_bases do
89868: LD_ADDR_VAR 0 3
89872: PUSH
89873: DOUBLE
89874: LD_INT 1
89876: DEC
89877: ST_TO_ADDR
89878: LD_EXP 44
89882: PUSH
89883: FOR_TO
89884: IFFALSE 91237
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_defender [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
89886: LD_VAR 0 1
89890: PUSH
89891: LD_EXP 44
89895: PUSH
89896: LD_VAR 0 3
89900: ARRAY
89901: IN
89902: PUSH
89903: LD_VAR 0 1
89907: PUSH
89908: LD_EXP 51
89912: PUSH
89913: LD_VAR 0 3
89917: ARRAY
89918: IN
89919: OR
89920: PUSH
89921: LD_VAR 0 1
89925: PUSH
89926: LD_EXP 66
89930: PUSH
89931: LD_VAR 0 3
89935: ARRAY
89936: IN
89937: OR
89938: PUSH
89939: LD_VAR 0 1
89943: PUSH
89944: LD_EXP 63
89948: PUSH
89949: LD_VAR 0 3
89953: ARRAY
89954: IN
89955: OR
89956: PUSH
89957: LD_VAR 0 1
89961: PUSH
89962: LD_EXP 73
89966: PUSH
89967: LD_VAR 0 3
89971: ARRAY
89972: IN
89973: OR
89974: PUSH
89975: LD_VAR 0 1
89979: PUSH
89980: LD_EXP 74
89984: PUSH
89985: LD_VAR 0 3
89989: ARRAY
89990: IN
89991: OR
89992: IFFALSE 91235
// begin if un in mc_ape [ i ] then
89994: LD_VAR 0 1
89998: PUSH
89999: LD_EXP 73
90003: PUSH
90004: LD_VAR 0 3
90008: ARRAY
90009: IN
90010: IFFALSE 90049
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
90012: LD_ADDR_EXP 73
90016: PUSH
90017: LD_EXP 73
90021: PPUSH
90022: LD_VAR 0 3
90026: PPUSH
90027: LD_EXP 73
90031: PUSH
90032: LD_VAR 0 3
90036: ARRAY
90037: PUSH
90038: LD_VAR 0 1
90042: DIFF
90043: PPUSH
90044: CALL_OW 1
90048: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
90049: LD_VAR 0 1
90053: PUSH
90054: LD_EXP 74
90058: PUSH
90059: LD_VAR 0 3
90063: ARRAY
90064: IN
90065: IFFALSE 90089
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
90067: LD_ADDR_EXP 74
90071: PUSH
90072: LD_EXP 74
90076: PPUSH
90077: LD_VAR 0 3
90081: PPUSH
90082: EMPTY
90083: PPUSH
90084: CALL_OW 1
90088: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and ( GetTag ( un ) = 20 or un in mc_defender [ i ] or GetWeapon ( un ) in [ us_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , ar_cargo_bay , us_crane , ru_crane , ar_control_tower ] ) then
90089: LD_VAR 0 1
90093: PPUSH
90094: CALL_OW 247
90098: PUSH
90099: LD_INT 2
90101: EQUAL
90102: PUSH
90103: LD_VAR 0 1
90107: PPUSH
90108: CALL_OW 110
90112: PUSH
90113: LD_INT 20
90115: EQUAL
90116: PUSH
90117: LD_VAR 0 1
90121: PUSH
90122: LD_EXP 66
90126: PUSH
90127: LD_VAR 0 3
90131: ARRAY
90132: IN
90133: OR
90134: PUSH
90135: LD_VAR 0 1
90139: PPUSH
90140: CALL_OW 264
90144: PUSH
90145: LD_INT 12
90147: PUSH
90148: LD_INT 51
90150: PUSH
90151: LD_EXP 30
90155: PUSH
90156: LD_INT 32
90158: PUSH
90159: LD_INT 13
90161: PUSH
90162: LD_INT 52
90164: PUSH
90165: LD_INT 31
90167: PUSH
90168: EMPTY
90169: LIST
90170: LIST
90171: LIST
90172: LIST
90173: LIST
90174: LIST
90175: LIST
90176: IN
90177: OR
90178: AND
90179: IFFALSE 90487
// begin if un in mc_defender [ i ] then
90181: LD_VAR 0 1
90185: PUSH
90186: LD_EXP 66
90190: PUSH
90191: LD_VAR 0 3
90195: ARRAY
90196: IN
90197: IFFALSE 90236
// mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
90199: LD_ADDR_EXP 66
90203: PUSH
90204: LD_EXP 66
90208: PPUSH
90209: LD_VAR 0 3
90213: PPUSH
90214: LD_EXP 66
90218: PUSH
90219: LD_VAR 0 3
90223: ARRAY
90224: PUSH
90225: LD_VAR 0 1
90229: DIFF
90230: PPUSH
90231: CALL_OW 1
90235: ST_TO_ADDR
// fac := MC_GetBuildings ( i , b_factory ) ;
90236: LD_ADDR_VAR 0 8
90240: PUSH
90241: LD_VAR 0 3
90245: PPUSH
90246: LD_INT 3
90248: PPUSH
90249: CALL 86905 0 2
90253: ST_TO_ADDR
// if fac then
90254: LD_VAR 0 8
90258: IFFALSE 90487
// begin for j in fac do
90260: LD_ADDR_VAR 0 4
90264: PUSH
90265: LD_VAR 0 8
90269: PUSH
90270: FOR_IN
90271: IFFALSE 90485
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
90273: LD_ADDR_VAR 0 9
90277: PUSH
90278: LD_VAR 0 8
90282: PPUSH
90283: LD_VAR 0 1
90287: PPUSH
90288: CALL_OW 265
90292: PPUSH
90293: LD_VAR 0 1
90297: PPUSH
90298: CALL_OW 262
90302: PPUSH
90303: LD_VAR 0 1
90307: PPUSH
90308: CALL_OW 263
90312: PPUSH
90313: LD_VAR 0 1
90317: PPUSH
90318: CALL_OW 264
90322: PPUSH
90323: CALL 24244 0 5
90327: ST_TO_ADDR
// if components then
90328: LD_VAR 0 9
90332: IFFALSE 90483
// begin if GetWeapon ( un ) = ar_control_tower then
90334: LD_VAR 0 1
90338: PPUSH
90339: CALL_OW 264
90343: PUSH
90344: LD_INT 31
90346: EQUAL
90347: IFFALSE 90464
// begin SetTag ( IsDrivenBy ( un ) , 0 ) ;
90349: LD_VAR 0 1
90353: PPUSH
90354: CALL_OW 311
90358: PPUSH
90359: LD_INT 0
90361: PPUSH
90362: CALL_OW 109
// mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff IsDrivenBy ( un ) ) ;
90366: LD_ADDR_EXP 84
90370: PUSH
90371: LD_EXP 84
90375: PPUSH
90376: LD_VAR 0 3
90380: PPUSH
90381: LD_EXP 84
90385: PUSH
90386: LD_VAR 0 3
90390: ARRAY
90391: PUSH
90392: LD_VAR 0 1
90396: PPUSH
90397: CALL_OW 311
90401: DIFF
90402: PPUSH
90403: CALL_OW 1
90407: ST_TO_ADDR
// tmp := Insert ( mc_produce [ i ] , 1 , components ) ;
90408: LD_ADDR_VAR 0 7
90412: PUSH
90413: LD_EXP 65
90417: PUSH
90418: LD_VAR 0 3
90422: ARRAY
90423: PPUSH
90424: LD_INT 1
90426: PPUSH
90427: LD_VAR 0 9
90431: PPUSH
90432: CALL_OW 2
90436: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
90437: LD_ADDR_EXP 65
90441: PUSH
90442: LD_EXP 65
90446: PPUSH
90447: LD_VAR 0 3
90451: PPUSH
90452: LD_VAR 0 7
90456: PPUSH
90457: CALL_OW 1
90461: ST_TO_ADDR
// end else
90462: GO 90481
// MC_InsertProduceList ( i , [ components ] ) ;
90464: LD_VAR 0 3
90468: PPUSH
90469: LD_VAR 0 9
90473: PUSH
90474: EMPTY
90475: LIST
90476: PPUSH
90477: CALL 86450 0 2
// break ;
90481: GO 90485
// end ; end ;
90483: GO 90270
90485: POP
90486: POP
// end ; end ; if GetType ( un ) = unit_building then
90487: LD_VAR 0 1
90491: PPUSH
90492: CALL_OW 247
90496: PUSH
90497: LD_INT 3
90499: EQUAL
90500: IFFALSE 90903
// begin btype := GetBType ( un ) ;
90502: LD_ADDR_VAR 0 5
90506: PUSH
90507: LD_VAR 0 1
90511: PPUSH
90512: CALL_OW 266
90516: ST_TO_ADDR
// if btype in [ b_oil_mine , b_siberite_mine ] then
90517: LD_VAR 0 5
90521: PUSH
90522: LD_INT 29
90524: PUSH
90525: LD_INT 30
90527: PUSH
90528: EMPTY
90529: LIST
90530: LIST
90531: IN
90532: IFFALSE 90605
// begin if not GetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) then
90534: LD_VAR 0 1
90538: PPUSH
90539: CALL_OW 250
90543: PPUSH
90544: LD_VAR 0 1
90548: PPUSH
90549: CALL_OW 251
90553: PPUSH
90554: LD_VAR 0 1
90558: PPUSH
90559: CALL_OW 255
90563: PPUSH
90564: CALL_OW 440
90568: NOT
90569: IFFALSE 90605
// SetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) ;
90571: LD_VAR 0 1
90575: PPUSH
90576: CALL_OW 250
90580: PPUSH
90581: LD_VAR 0 1
90585: PPUSH
90586: CALL_OW 251
90590: PPUSH
90591: LD_VAR 0 1
90595: PPUSH
90596: CALL_OW 255
90600: PPUSH
90601: CALL_OW 441
// end ; if btype = b_warehouse then
90605: LD_VAR 0 5
90609: PUSH
90610: LD_INT 1
90612: EQUAL
90613: IFFALSE 90631
// begin btype := b_depot ;
90615: LD_ADDR_VAR 0 5
90619: PUSH
90620: LD_INT 0
90622: ST_TO_ADDR
// pos := 1 ;
90623: LD_ADDR_VAR 0 6
90627: PUSH
90628: LD_INT 1
90630: ST_TO_ADDR
// end ; if btype = b_factory then
90631: LD_VAR 0 5
90635: PUSH
90636: LD_INT 3
90638: EQUAL
90639: IFFALSE 90657
// begin btype := b_workshop ;
90641: LD_ADDR_VAR 0 5
90645: PUSH
90646: LD_INT 2
90648: ST_TO_ADDR
// pos := 1 ;
90649: LD_ADDR_VAR 0 6
90653: PUSH
90654: LD_INT 1
90656: ST_TO_ADDR
// end ; if btype = b_barracks then
90657: LD_VAR 0 5
90661: PUSH
90662: LD_INT 5
90664: EQUAL
90665: IFFALSE 90675
// btype := b_armoury ;
90667: LD_ADDR_VAR 0 5
90671: PUSH
90672: LD_INT 4
90674: ST_TO_ADDR
// if btype in [ b_lab_half , b_lab_full ] then
90675: LD_VAR 0 5
90679: PUSH
90680: LD_INT 7
90682: PUSH
90683: LD_INT 8
90685: PUSH
90686: EMPTY
90687: LIST
90688: LIST
90689: IN
90690: IFFALSE 90700
// btype := b_lab ;
90692: LD_ADDR_VAR 0 5
90696: PUSH
90697: LD_INT 6
90699: ST_TO_ADDR
// mc_build_list := ReplaceIn ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
90700: LD_ADDR_EXP 49
90704: PUSH
90705: LD_EXP 49
90709: PPUSH
90710: LD_VAR 0 3
90714: PUSH
90715: LD_EXP 49
90719: PUSH
90720: LD_VAR 0 3
90724: ARRAY
90725: PUSH
90726: LD_INT 1
90728: PLUS
90729: PUSH
90730: EMPTY
90731: LIST
90732: LIST
90733: PPUSH
90734: LD_VAR 0 5
90738: PUSH
90739: LD_VAR 0 1
90743: PPUSH
90744: CALL_OW 250
90748: PUSH
90749: LD_VAR 0 1
90753: PPUSH
90754: CALL_OW 251
90758: PUSH
90759: LD_VAR 0 1
90763: PPUSH
90764: CALL_OW 254
90768: PUSH
90769: EMPTY
90770: LIST
90771: LIST
90772: LIST
90773: LIST
90774: PPUSH
90775: CALL 26712 0 3
90779: ST_TO_ADDR
// if pos = 1 then
90780: LD_VAR 0 6
90784: PUSH
90785: LD_INT 1
90787: EQUAL
90788: IFFALSE 90903
// begin tmp := mc_build_list [ i ] ;
90790: LD_ADDR_VAR 0 7
90794: PUSH
90795: LD_EXP 49
90799: PUSH
90800: LD_VAR 0 3
90804: ARRAY
90805: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
90806: LD_VAR 0 7
90810: PPUSH
90811: LD_INT 2
90813: PUSH
90814: LD_INT 30
90816: PUSH
90817: LD_INT 0
90819: PUSH
90820: EMPTY
90821: LIST
90822: LIST
90823: PUSH
90824: LD_INT 30
90826: PUSH
90827: LD_INT 1
90829: PUSH
90830: EMPTY
90831: LIST
90832: LIST
90833: PUSH
90834: EMPTY
90835: LIST
90836: LIST
90837: LIST
90838: PPUSH
90839: CALL_OW 72
90843: IFFALSE 90853
// pos := 2 ;
90845: LD_ADDR_VAR 0 6
90849: PUSH
90850: LD_INT 2
90852: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
90853: LD_ADDR_VAR 0 7
90857: PUSH
90858: LD_VAR 0 7
90862: PPUSH
90863: LD_VAR 0 6
90867: PPUSH
90868: LD_VAR 0 7
90872: PPUSH
90873: CALL 27038 0 3
90877: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
90878: LD_ADDR_EXP 49
90882: PUSH
90883: LD_EXP 49
90887: PPUSH
90888: LD_VAR 0 3
90892: PPUSH
90893: LD_VAR 0 7
90897: PPUSH
90898: CALL_OW 1
90902: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
90903: LD_VAR 0 1
90907: PUSH
90908: LD_EXP 44
90912: PUSH
90913: LD_VAR 0 3
90917: ARRAY
90918: IN
90919: IFFALSE 90958
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
90921: LD_ADDR_EXP 44
90925: PUSH
90926: LD_EXP 44
90930: PPUSH
90931: LD_VAR 0 3
90935: PPUSH
90936: LD_EXP 44
90940: PUSH
90941: LD_VAR 0 3
90945: ARRAY
90946: PUSH
90947: LD_VAR 0 1
90951: DIFF
90952: PPUSH
90953: CALL_OW 1
90957: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
90958: LD_VAR 0 1
90962: PUSH
90963: LD_EXP 51
90967: PUSH
90968: LD_VAR 0 3
90972: ARRAY
90973: IN
90974: IFFALSE 91013
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
90976: LD_ADDR_EXP 51
90980: PUSH
90981: LD_EXP 51
90985: PPUSH
90986: LD_VAR 0 3
90990: PPUSH
90991: LD_EXP 51
90995: PUSH
90996: LD_VAR 0 3
91000: ARRAY
91001: PUSH
91002: LD_VAR 0 1
91006: DIFF
91007: PPUSH
91008: CALL_OW 1
91012: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
91013: LD_VAR 0 1
91017: PUSH
91018: LD_EXP 63
91022: PUSH
91023: LD_VAR 0 3
91027: ARRAY
91028: IN
91029: IFFALSE 91068
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
91031: LD_ADDR_EXP 63
91035: PUSH
91036: LD_EXP 63
91040: PPUSH
91041: LD_VAR 0 3
91045: PPUSH
91046: LD_EXP 63
91050: PUSH
91051: LD_VAR 0 3
91055: ARRAY
91056: PUSH
91057: LD_VAR 0 1
91061: DIFF
91062: PPUSH
91063: CALL_OW 1
91067: ST_TO_ADDR
// end ; if un in mc_defender [ i ] then
91068: LD_VAR 0 1
91072: PUSH
91073: LD_EXP 66
91077: PUSH
91078: LD_VAR 0 3
91082: ARRAY
91083: IN
91084: IFFALSE 91123
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
91086: LD_ADDR_EXP 66
91090: PUSH
91091: LD_EXP 66
91095: PPUSH
91096: LD_VAR 0 3
91100: PPUSH
91101: LD_EXP 66
91105: PUSH
91106: LD_VAR 0 3
91110: ARRAY
91111: PUSH
91112: LD_VAR 0 1
91116: DIFF
91117: PPUSH
91118: CALL_OW 1
91122: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
91123: LD_VAR 0 1
91127: PUSH
91128: LD_EXP 53
91132: PUSH
91133: LD_VAR 0 3
91137: ARRAY
91138: IN
91139: IFFALSE 91178
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
91141: LD_ADDR_EXP 53
91145: PUSH
91146: LD_EXP 53
91150: PPUSH
91151: LD_VAR 0 3
91155: PPUSH
91156: LD_EXP 53
91160: PUSH
91161: LD_VAR 0 3
91165: ARRAY
91166: PUSH
91167: LD_VAR 0 1
91171: DIFF
91172: PPUSH
91173: CALL_OW 1
91177: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
91178: LD_VAR 0 1
91182: PUSH
91183: LD_EXP 52
91187: PUSH
91188: LD_VAR 0 3
91192: ARRAY
91193: IN
91194: IFFALSE 91233
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
91196: LD_ADDR_EXP 52
91200: PUSH
91201: LD_EXP 52
91205: PPUSH
91206: LD_VAR 0 3
91210: PPUSH
91211: LD_EXP 52
91215: PUSH
91216: LD_VAR 0 3
91220: ARRAY
91221: PUSH
91222: LD_VAR 0 1
91226: DIFF
91227: PPUSH
91228: CALL_OW 1
91232: ST_TO_ADDR
// end ; break ;
91233: GO 91237
// end ;
91235: GO 89883
91237: POP
91238: POP
// end ;
91239: LD_VAR 0 2
91243: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
91244: LD_INT 0
91246: PPUSH
91247: PPUSH
91248: PPUSH
// if not mc_bases or not skirmish then
91249: LD_EXP 44
91253: NOT
91254: PUSH
91255: LD_EXP 42
91259: NOT
91260: OR
91261: IFFALSE 91265
// exit ;
91263: GO 91480
// for i = 1 to mc_bases do
91265: LD_ADDR_VAR 0 3
91269: PUSH
91270: DOUBLE
91271: LD_INT 1
91273: DEC
91274: ST_TO_ADDR
91275: LD_EXP 44
91279: PUSH
91280: FOR_TO
91281: IFFALSE 91478
// begin if building in mc_construct_list [ i ] then
91283: LD_VAR 0 1
91287: PUSH
91288: LD_EXP 51
91292: PUSH
91293: LD_VAR 0 3
91297: ARRAY
91298: IN
91299: IFFALSE 91476
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
91301: LD_ADDR_EXP 51
91305: PUSH
91306: LD_EXP 51
91310: PPUSH
91311: LD_VAR 0 3
91315: PPUSH
91316: LD_EXP 51
91320: PUSH
91321: LD_VAR 0 3
91325: ARRAY
91326: PUSH
91327: LD_VAR 0 1
91331: DIFF
91332: PPUSH
91333: CALL_OW 1
91337: ST_TO_ADDR
// if building in mc_lab [ i ] then
91338: LD_VAR 0 1
91342: PUSH
91343: LD_EXP 77
91347: PUSH
91348: LD_VAR 0 3
91352: ARRAY
91353: IN
91354: IFFALSE 91409
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
91356: LD_ADDR_EXP 78
91360: PUSH
91361: LD_EXP 78
91365: PPUSH
91366: LD_VAR 0 3
91370: PPUSH
91371: LD_EXP 78
91375: PUSH
91376: LD_VAR 0 3
91380: ARRAY
91381: PPUSH
91382: LD_INT 1
91384: PPUSH
91385: LD_EXP 78
91389: PUSH
91390: LD_VAR 0 3
91394: ARRAY
91395: PPUSH
91396: LD_INT 0
91398: PPUSH
91399: CALL 26130 0 4
91403: PPUSH
91404: CALL_OW 1
91408: ST_TO_ADDR
// if not building in mc_bases [ i ] then
91409: LD_VAR 0 1
91413: PUSH
91414: LD_EXP 44
91418: PUSH
91419: LD_VAR 0 3
91423: ARRAY
91424: IN
91425: NOT
91426: IFFALSE 91472
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
91428: LD_ADDR_EXP 44
91432: PUSH
91433: LD_EXP 44
91437: PPUSH
91438: LD_VAR 0 3
91442: PUSH
91443: LD_EXP 44
91447: PUSH
91448: LD_VAR 0 3
91452: ARRAY
91453: PUSH
91454: LD_INT 1
91456: PLUS
91457: PUSH
91458: EMPTY
91459: LIST
91460: LIST
91461: PPUSH
91462: LD_VAR 0 1
91466: PPUSH
91467: CALL 26712 0 3
91471: ST_TO_ADDR
// exit ;
91472: POP
91473: POP
91474: GO 91480
// end ; end ;
91476: GO 91280
91478: POP
91479: POP
// end ;
91480: LD_VAR 0 2
91484: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
91485: LD_INT 0
91487: PPUSH
91488: PPUSH
91489: PPUSH
91490: PPUSH
91491: PPUSH
91492: PPUSH
91493: PPUSH
// if not mc_bases or not skirmish then
91494: LD_EXP 44
91498: NOT
91499: PUSH
91500: LD_EXP 42
91504: NOT
91505: OR
91506: IFFALSE 91510
// exit ;
91508: GO 92171
// for i = 1 to mc_bases do
91510: LD_ADDR_VAR 0 3
91514: PUSH
91515: DOUBLE
91516: LD_INT 1
91518: DEC
91519: ST_TO_ADDR
91520: LD_EXP 44
91524: PUSH
91525: FOR_TO
91526: IFFALSE 92169
// begin if building in mc_construct_list [ i ] then
91528: LD_VAR 0 1
91532: PUSH
91533: LD_EXP 51
91537: PUSH
91538: LD_VAR 0 3
91542: ARRAY
91543: IN
91544: IFFALSE 92167
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
91546: LD_ADDR_EXP 51
91550: PUSH
91551: LD_EXP 51
91555: PPUSH
91556: LD_VAR 0 3
91560: PPUSH
91561: LD_EXP 51
91565: PUSH
91566: LD_VAR 0 3
91570: ARRAY
91571: PUSH
91572: LD_VAR 0 1
91576: DIFF
91577: PPUSH
91578: CALL_OW 1
91582: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
91583: LD_ADDR_EXP 44
91587: PUSH
91588: LD_EXP 44
91592: PPUSH
91593: LD_VAR 0 3
91597: PUSH
91598: LD_EXP 44
91602: PUSH
91603: LD_VAR 0 3
91607: ARRAY
91608: PUSH
91609: LD_INT 1
91611: PLUS
91612: PUSH
91613: EMPTY
91614: LIST
91615: LIST
91616: PPUSH
91617: LD_VAR 0 1
91621: PPUSH
91622: CALL 26712 0 3
91626: ST_TO_ADDR
// btype := GetBType ( building ) ;
91627: LD_ADDR_VAR 0 5
91631: PUSH
91632: LD_VAR 0 1
91636: PPUSH
91637: CALL_OW 266
91641: ST_TO_ADDR
// side := GetSide ( building ) ;
91642: LD_ADDR_VAR 0 8
91646: PUSH
91647: LD_VAR 0 1
91651: PPUSH
91652: CALL_OW 255
91656: ST_TO_ADDR
// if btype = b_lab then
91657: LD_VAR 0 5
91661: PUSH
91662: LD_INT 6
91664: EQUAL
91665: IFFALSE 91715
// begin mc_lab := ReplaceIn ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
91667: LD_ADDR_EXP 77
91671: PUSH
91672: LD_EXP 77
91676: PPUSH
91677: LD_VAR 0 3
91681: PUSH
91682: LD_EXP 77
91686: PUSH
91687: LD_VAR 0 3
91691: ARRAY
91692: PUSH
91693: LD_INT 1
91695: PLUS
91696: PUSH
91697: EMPTY
91698: LIST
91699: LIST
91700: PPUSH
91701: LD_VAR 0 1
91705: PPUSH
91706: CALL 26712 0 3
91710: ST_TO_ADDR
// exit ;
91711: POP
91712: POP
91713: GO 92171
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
91715: LD_VAR 0 5
91719: PUSH
91720: LD_INT 0
91722: PUSH
91723: LD_INT 2
91725: PUSH
91726: LD_INT 4
91728: PUSH
91729: EMPTY
91730: LIST
91731: LIST
91732: LIST
91733: IN
91734: IFFALSE 91858
// begin if btype = b_armoury then
91736: LD_VAR 0 5
91740: PUSH
91741: LD_INT 4
91743: EQUAL
91744: IFFALSE 91754
// btype := b_barracks ;
91746: LD_ADDR_VAR 0 5
91750: PUSH
91751: LD_INT 5
91753: ST_TO_ADDR
// if btype = b_depot then
91754: LD_VAR 0 5
91758: PUSH
91759: LD_INT 0
91761: EQUAL
91762: IFFALSE 91772
// btype := b_warehouse ;
91764: LD_ADDR_VAR 0 5
91768: PUSH
91769: LD_INT 1
91771: ST_TO_ADDR
// if btype = b_workshop then
91772: LD_VAR 0 5
91776: PUSH
91777: LD_INT 2
91779: EQUAL
91780: IFFALSE 91790
// btype := b_factory ;
91782: LD_ADDR_VAR 0 5
91786: PUSH
91787: LD_INT 3
91789: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
91790: LD_VAR 0 5
91794: PPUSH
91795: LD_VAR 0 8
91799: PPUSH
91800: CALL_OW 323
91804: PUSH
91805: LD_INT 1
91807: EQUAL
91808: IFFALSE 91854
// mc_build_upgrade := ReplaceIn ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
91810: LD_ADDR_EXP 76
91814: PUSH
91815: LD_EXP 76
91819: PPUSH
91820: LD_VAR 0 3
91824: PUSH
91825: LD_EXP 76
91829: PUSH
91830: LD_VAR 0 3
91834: ARRAY
91835: PUSH
91836: LD_INT 1
91838: PLUS
91839: PUSH
91840: EMPTY
91841: LIST
91842: LIST
91843: PPUSH
91844: LD_VAR 0 1
91848: PPUSH
91849: CALL 26712 0 3
91853: ST_TO_ADDR
// exit ;
91854: POP
91855: POP
91856: GO 92171
// end ; if btype in [ b_bunker , b_turret ] then
91858: LD_VAR 0 5
91862: PUSH
91863: LD_INT 32
91865: PUSH
91866: LD_INT 33
91868: PUSH
91869: EMPTY
91870: LIST
91871: LIST
91872: IN
91873: IFFALSE 92163
// begin mc_turret_list := ReplaceIn ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
91875: LD_ADDR_EXP 52
91879: PUSH
91880: LD_EXP 52
91884: PPUSH
91885: LD_VAR 0 3
91889: PUSH
91890: LD_EXP 52
91894: PUSH
91895: LD_VAR 0 3
91899: ARRAY
91900: PUSH
91901: LD_INT 1
91903: PLUS
91904: PUSH
91905: EMPTY
91906: LIST
91907: LIST
91908: PPUSH
91909: LD_VAR 0 1
91913: PPUSH
91914: CALL 26712 0 3
91918: ST_TO_ADDR
// if btype = b_bunker then
91919: LD_VAR 0 5
91923: PUSH
91924: LD_INT 32
91926: EQUAL
91927: IFFALSE 92163
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
91929: LD_ADDR_EXP 53
91933: PUSH
91934: LD_EXP 53
91938: PPUSH
91939: LD_VAR 0 3
91943: PUSH
91944: LD_EXP 53
91948: PUSH
91949: LD_VAR 0 3
91953: ARRAY
91954: PUSH
91955: LD_INT 1
91957: PLUS
91958: PUSH
91959: EMPTY
91960: LIST
91961: LIST
91962: PPUSH
91963: LD_VAR 0 1
91967: PPUSH
91968: CALL 26712 0 3
91972: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
91973: LD_ADDR_VAR 0 6
91977: PUSH
91978: LD_EXP 44
91982: PUSH
91983: LD_VAR 0 3
91987: ARRAY
91988: PPUSH
91989: LD_INT 25
91991: PUSH
91992: LD_INT 1
91994: PUSH
91995: EMPTY
91996: LIST
91997: LIST
91998: PUSH
91999: LD_INT 3
92001: PUSH
92002: LD_INT 54
92004: PUSH
92005: EMPTY
92006: LIST
92007: PUSH
92008: EMPTY
92009: LIST
92010: LIST
92011: PUSH
92012: EMPTY
92013: LIST
92014: LIST
92015: PPUSH
92016: CALL_OW 72
92020: ST_TO_ADDR
// if tmp then
92021: LD_VAR 0 6
92025: IFFALSE 92031
// exit ;
92027: POP
92028: POP
92029: GO 92171
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
92031: LD_ADDR_VAR 0 6
92035: PUSH
92036: LD_EXP 44
92040: PUSH
92041: LD_VAR 0 3
92045: ARRAY
92046: PPUSH
92047: LD_INT 2
92049: PUSH
92050: LD_INT 30
92052: PUSH
92053: LD_INT 4
92055: PUSH
92056: EMPTY
92057: LIST
92058: LIST
92059: PUSH
92060: LD_INT 30
92062: PUSH
92063: LD_INT 5
92065: PUSH
92066: EMPTY
92067: LIST
92068: LIST
92069: PUSH
92070: EMPTY
92071: LIST
92072: LIST
92073: LIST
92074: PPUSH
92075: CALL_OW 72
92079: ST_TO_ADDR
// if not tmp then
92080: LD_VAR 0 6
92084: NOT
92085: IFFALSE 92091
// exit ;
92087: POP
92088: POP
92089: GO 92171
// for j in tmp do
92091: LD_ADDR_VAR 0 4
92095: PUSH
92096: LD_VAR 0 6
92100: PUSH
92101: FOR_IN
92102: IFFALSE 92161
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
92104: LD_ADDR_VAR 0 7
92108: PUSH
92109: LD_VAR 0 4
92113: PPUSH
92114: CALL_OW 313
92118: PPUSH
92119: LD_INT 25
92121: PUSH
92122: LD_INT 1
92124: PUSH
92125: EMPTY
92126: LIST
92127: LIST
92128: PPUSH
92129: CALL_OW 72
92133: ST_TO_ADDR
// if units then
92134: LD_VAR 0 7
92138: IFFALSE 92159
// begin ComExitBuilding ( units [ 1 ] ) ;
92140: LD_VAR 0 7
92144: PUSH
92145: LD_INT 1
92147: ARRAY
92148: PPUSH
92149: CALL_OW 122
// exit ;
92153: POP
92154: POP
92155: POP
92156: POP
92157: GO 92171
// end ; end ;
92159: GO 92101
92161: POP
92162: POP
// end ; end ; exit ;
92163: POP
92164: POP
92165: GO 92171
// end ; end ;
92167: GO 91525
92169: POP
92170: POP
// end ;
92171: LD_VAR 0 2
92175: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
92176: LD_INT 0
92178: PPUSH
92179: PPUSH
92180: PPUSH
92181: PPUSH
92182: PPUSH
92183: PPUSH
92184: PPUSH
// if not mc_bases or not skirmish then
92185: LD_EXP 44
92189: NOT
92190: PUSH
92191: LD_EXP 42
92195: NOT
92196: OR
92197: IFFALSE 92201
// exit ;
92199: GO 92432
// btype := GetBType ( building ) ;
92201: LD_ADDR_VAR 0 6
92205: PUSH
92206: LD_VAR 0 1
92210: PPUSH
92211: CALL_OW 266
92215: ST_TO_ADDR
// x := GetX ( building ) ;
92216: LD_ADDR_VAR 0 7
92220: PUSH
92221: LD_VAR 0 1
92225: PPUSH
92226: CALL_OW 250
92230: ST_TO_ADDR
// y := GetY ( building ) ;
92231: LD_ADDR_VAR 0 8
92235: PUSH
92236: LD_VAR 0 1
92240: PPUSH
92241: CALL_OW 251
92245: ST_TO_ADDR
// d := GetDir ( building ) ;
92246: LD_ADDR_VAR 0 9
92250: PUSH
92251: LD_VAR 0 1
92255: PPUSH
92256: CALL_OW 254
92260: ST_TO_ADDR
// for i = 1 to mc_bases do
92261: LD_ADDR_VAR 0 4
92265: PUSH
92266: DOUBLE
92267: LD_INT 1
92269: DEC
92270: ST_TO_ADDR
92271: LD_EXP 44
92275: PUSH
92276: FOR_TO
92277: IFFALSE 92430
// begin if not mc_build_list [ i ] then
92279: LD_EXP 49
92283: PUSH
92284: LD_VAR 0 4
92288: ARRAY
92289: NOT
92290: IFFALSE 92294
// continue ;
92292: GO 92276
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
92294: LD_VAR 0 6
92298: PUSH
92299: LD_VAR 0 7
92303: PUSH
92304: LD_VAR 0 8
92308: PUSH
92309: LD_VAR 0 9
92313: PUSH
92314: EMPTY
92315: LIST
92316: LIST
92317: LIST
92318: LIST
92319: PPUSH
92320: LD_EXP 49
92324: PUSH
92325: LD_VAR 0 4
92329: ARRAY
92330: PUSH
92331: LD_INT 1
92333: ARRAY
92334: PPUSH
92335: CALL 32881 0 2
92339: IFFALSE 92428
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
92341: LD_ADDR_EXP 49
92345: PUSH
92346: LD_EXP 49
92350: PPUSH
92351: LD_VAR 0 4
92355: PPUSH
92356: LD_EXP 49
92360: PUSH
92361: LD_VAR 0 4
92365: ARRAY
92366: PPUSH
92367: LD_INT 1
92369: PPUSH
92370: CALL_OW 3
92374: PPUSH
92375: CALL_OW 1
92379: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
92380: LD_ADDR_EXP 51
92384: PUSH
92385: LD_EXP 51
92389: PPUSH
92390: LD_VAR 0 4
92394: PUSH
92395: LD_EXP 51
92399: PUSH
92400: LD_VAR 0 4
92404: ARRAY
92405: PUSH
92406: LD_INT 1
92408: PLUS
92409: PUSH
92410: EMPTY
92411: LIST
92412: LIST
92413: PPUSH
92414: LD_VAR 0 1
92418: PPUSH
92419: CALL 26712 0 3
92423: ST_TO_ADDR
// exit ;
92424: POP
92425: POP
92426: GO 92432
// end ; end ;
92428: GO 92276
92430: POP
92431: POP
// end ;
92432: LD_VAR 0 3
92436: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
92437: LD_INT 0
92439: PPUSH
92440: PPUSH
92441: PPUSH
// if not mc_bases or not skirmish then
92442: LD_EXP 44
92446: NOT
92447: PUSH
92448: LD_EXP 42
92452: NOT
92453: OR
92454: IFFALSE 92458
// exit ;
92456: GO 92648
// for i = 1 to mc_bases do
92458: LD_ADDR_VAR 0 4
92462: PUSH
92463: DOUBLE
92464: LD_INT 1
92466: DEC
92467: ST_TO_ADDR
92468: LD_EXP 44
92472: PUSH
92473: FOR_TO
92474: IFFALSE 92561
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
92476: LD_VAR 0 1
92480: PUSH
92481: LD_EXP 52
92485: PUSH
92486: LD_VAR 0 4
92490: ARRAY
92491: IN
92492: PUSH
92493: LD_VAR 0 1
92497: PUSH
92498: LD_EXP 53
92502: PUSH
92503: LD_VAR 0 4
92507: ARRAY
92508: IN
92509: NOT
92510: AND
92511: IFFALSE 92559
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
92513: LD_ADDR_EXP 53
92517: PUSH
92518: LD_EXP 53
92522: PPUSH
92523: LD_VAR 0 4
92527: PUSH
92528: LD_EXP 53
92532: PUSH
92533: LD_VAR 0 4
92537: ARRAY
92538: PUSH
92539: LD_INT 1
92541: PLUS
92542: PUSH
92543: EMPTY
92544: LIST
92545: LIST
92546: PPUSH
92547: LD_VAR 0 1
92551: PPUSH
92552: CALL 26712 0 3
92556: ST_TO_ADDR
// break ;
92557: GO 92561
// end ; end ;
92559: GO 92473
92561: POP
92562: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
92563: LD_VAR 0 1
92567: PPUSH
92568: CALL_OW 257
92572: PUSH
92573: LD_EXP 70
92577: IN
92578: PUSH
92579: LD_VAR 0 1
92583: PPUSH
92584: CALL_OW 266
92588: PUSH
92589: LD_INT 5
92591: EQUAL
92592: AND
92593: PUSH
92594: LD_VAR 0 2
92598: PPUSH
92599: CALL_OW 110
92603: PUSH
92604: LD_INT 18
92606: NONEQUAL
92607: AND
92608: IFFALSE 92648
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
92610: LD_VAR 0 2
92614: PPUSH
92615: CALL_OW 257
92619: PUSH
92620: LD_INT 5
92622: PUSH
92623: LD_INT 8
92625: PUSH
92626: LD_INT 9
92628: PUSH
92629: EMPTY
92630: LIST
92631: LIST
92632: LIST
92633: IN
92634: IFFALSE 92648
// SetClass ( unit , 1 ) ;
92636: LD_VAR 0 2
92640: PPUSH
92641: LD_INT 1
92643: PPUSH
92644: CALL_OW 336
// end ;
92648: LD_VAR 0 3
92652: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
92653: LD_INT 0
92655: PPUSH
92656: PPUSH
// if not mc_bases or not skirmish then
92657: LD_EXP 44
92661: NOT
92662: PUSH
92663: LD_EXP 42
92667: NOT
92668: OR
92669: IFFALSE 92673
// exit ;
92671: GO 92789
// if GetLives ( abandoned_vehicle ) > 250 then
92673: LD_VAR 0 2
92677: PPUSH
92678: CALL_OW 256
92682: PUSH
92683: LD_INT 250
92685: GREATER
92686: IFFALSE 92690
// exit ;
92688: GO 92789
// for i = 1 to mc_bases do
92690: LD_ADDR_VAR 0 6
92694: PUSH
92695: DOUBLE
92696: LD_INT 1
92698: DEC
92699: ST_TO_ADDR
92700: LD_EXP 44
92704: PUSH
92705: FOR_TO
92706: IFFALSE 92787
// begin if driver in mc_bases [ i ] then
92708: LD_VAR 0 1
92712: PUSH
92713: LD_EXP 44
92717: PUSH
92718: LD_VAR 0 6
92722: ARRAY
92723: IN
92724: IFFALSE 92785
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
92726: LD_VAR 0 1
92730: PPUSH
92731: LD_EXP 44
92735: PUSH
92736: LD_VAR 0 6
92740: ARRAY
92741: PPUSH
92742: LD_INT 2
92744: PUSH
92745: LD_INT 30
92747: PUSH
92748: LD_INT 0
92750: PUSH
92751: EMPTY
92752: LIST
92753: LIST
92754: PUSH
92755: LD_INT 30
92757: PUSH
92758: LD_INT 1
92760: PUSH
92761: EMPTY
92762: LIST
92763: LIST
92764: PUSH
92765: EMPTY
92766: LIST
92767: LIST
92768: LIST
92769: PPUSH
92770: CALL_OW 72
92774: PUSH
92775: LD_INT 1
92777: ARRAY
92778: PPUSH
92779: CALL_OW 112
// break ;
92783: GO 92787
// end ; end ;
92785: GO 92705
92787: POP
92788: POP
// end ; end_of_file end_of_file
92789: LD_VAR 0 5
92793: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
92794: GO 92796
92796: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
92797: LD_STRING initStreamRollete();
92799: PPUSH
92800: CALL_OW 559
// InitStreamMode ;
92804: CALL 92813 0 0
// DefineStreamItems ( ) ;
92808: CALL 93253 0 0
// end ;
92812: END
// function InitStreamMode ; begin
92813: LD_INT 0
92815: PPUSH
// streamModeActive := false ;
92816: LD_ADDR_EXP 87
92820: PUSH
92821: LD_INT 0
92823: ST_TO_ADDR
// normalCounter := 36 ;
92824: LD_ADDR_EXP 88
92828: PUSH
92829: LD_INT 36
92831: ST_TO_ADDR
// hardcoreCounter := 16 ;
92832: LD_ADDR_EXP 89
92836: PUSH
92837: LD_INT 16
92839: ST_TO_ADDR
// sRocket := false ;
92840: LD_ADDR_EXP 92
92844: PUSH
92845: LD_INT 0
92847: ST_TO_ADDR
// sSpeed := false ;
92848: LD_ADDR_EXP 91
92852: PUSH
92853: LD_INT 0
92855: ST_TO_ADDR
// sEngine := false ;
92856: LD_ADDR_EXP 93
92860: PUSH
92861: LD_INT 0
92863: ST_TO_ADDR
// sSpec := false ;
92864: LD_ADDR_EXP 90
92868: PUSH
92869: LD_INT 0
92871: ST_TO_ADDR
// sLevel := false ;
92872: LD_ADDR_EXP 94
92876: PUSH
92877: LD_INT 0
92879: ST_TO_ADDR
// sArmoury := false ;
92880: LD_ADDR_EXP 95
92884: PUSH
92885: LD_INT 0
92887: ST_TO_ADDR
// sRadar := false ;
92888: LD_ADDR_EXP 96
92892: PUSH
92893: LD_INT 0
92895: ST_TO_ADDR
// sBunker := false ;
92896: LD_ADDR_EXP 97
92900: PUSH
92901: LD_INT 0
92903: ST_TO_ADDR
// sHack := false ;
92904: LD_ADDR_EXP 98
92908: PUSH
92909: LD_INT 0
92911: ST_TO_ADDR
// sFire := false ;
92912: LD_ADDR_EXP 99
92916: PUSH
92917: LD_INT 0
92919: ST_TO_ADDR
// sRefresh := false ;
92920: LD_ADDR_EXP 100
92924: PUSH
92925: LD_INT 0
92927: ST_TO_ADDR
// sExp := false ;
92928: LD_ADDR_EXP 101
92932: PUSH
92933: LD_INT 0
92935: ST_TO_ADDR
// sDepot := false ;
92936: LD_ADDR_EXP 102
92940: PUSH
92941: LD_INT 0
92943: ST_TO_ADDR
// sFlag := false ;
92944: LD_ADDR_EXP 103
92948: PUSH
92949: LD_INT 0
92951: ST_TO_ADDR
// sKamikadze := false ;
92952: LD_ADDR_EXP 111
92956: PUSH
92957: LD_INT 0
92959: ST_TO_ADDR
// sTroll := false ;
92960: LD_ADDR_EXP 112
92964: PUSH
92965: LD_INT 0
92967: ST_TO_ADDR
// sSlow := false ;
92968: LD_ADDR_EXP 113
92972: PUSH
92973: LD_INT 0
92975: ST_TO_ADDR
// sLack := false ;
92976: LD_ADDR_EXP 114
92980: PUSH
92981: LD_INT 0
92983: ST_TO_ADDR
// sTank := false ;
92984: LD_ADDR_EXP 116
92988: PUSH
92989: LD_INT 0
92991: ST_TO_ADDR
// sRemote := false ;
92992: LD_ADDR_EXP 117
92996: PUSH
92997: LD_INT 0
92999: ST_TO_ADDR
// sPowell := false ;
93000: LD_ADDR_EXP 118
93004: PUSH
93005: LD_INT 0
93007: ST_TO_ADDR
// sTeleport := false ;
93008: LD_ADDR_EXP 121
93012: PUSH
93013: LD_INT 0
93015: ST_TO_ADDR
// sOilTower := false ;
93016: LD_ADDR_EXP 123
93020: PUSH
93021: LD_INT 0
93023: ST_TO_ADDR
// sShovel := false ;
93024: LD_ADDR_EXP 124
93028: PUSH
93029: LD_INT 0
93031: ST_TO_ADDR
// sSheik := false ;
93032: LD_ADDR_EXP 125
93036: PUSH
93037: LD_INT 0
93039: ST_TO_ADDR
// sEarthquake := false ;
93040: LD_ADDR_EXP 127
93044: PUSH
93045: LD_INT 0
93047: ST_TO_ADDR
// sAI := false ;
93048: LD_ADDR_EXP 128
93052: PUSH
93053: LD_INT 0
93055: ST_TO_ADDR
// sCargo := false ;
93056: LD_ADDR_EXP 131
93060: PUSH
93061: LD_INT 0
93063: ST_TO_ADDR
// sDLaser := false ;
93064: LD_ADDR_EXP 132
93068: PUSH
93069: LD_INT 0
93071: ST_TO_ADDR
// sExchange := false ;
93072: LD_ADDR_EXP 133
93076: PUSH
93077: LD_INT 0
93079: ST_TO_ADDR
// sFac := false ;
93080: LD_ADDR_EXP 134
93084: PUSH
93085: LD_INT 0
93087: ST_TO_ADDR
// sPower := false ;
93088: LD_ADDR_EXP 135
93092: PUSH
93093: LD_INT 0
93095: ST_TO_ADDR
// sRandom := false ;
93096: LD_ADDR_EXP 136
93100: PUSH
93101: LD_INT 0
93103: ST_TO_ADDR
// sShield := false ;
93104: LD_ADDR_EXP 137
93108: PUSH
93109: LD_INT 0
93111: ST_TO_ADDR
// sTime := false ;
93112: LD_ADDR_EXP 138
93116: PUSH
93117: LD_INT 0
93119: ST_TO_ADDR
// sTools := false ;
93120: LD_ADDR_EXP 139
93124: PUSH
93125: LD_INT 0
93127: ST_TO_ADDR
// sSold := false ;
93128: LD_ADDR_EXP 104
93132: PUSH
93133: LD_INT 0
93135: ST_TO_ADDR
// sDiff := false ;
93136: LD_ADDR_EXP 105
93140: PUSH
93141: LD_INT 0
93143: ST_TO_ADDR
// sFog := false ;
93144: LD_ADDR_EXP 108
93148: PUSH
93149: LD_INT 0
93151: ST_TO_ADDR
// sReset := false ;
93152: LD_ADDR_EXP 109
93156: PUSH
93157: LD_INT 0
93159: ST_TO_ADDR
// sSun := false ;
93160: LD_ADDR_EXP 110
93164: PUSH
93165: LD_INT 0
93167: ST_TO_ADDR
// sTiger := false ;
93168: LD_ADDR_EXP 106
93172: PUSH
93173: LD_INT 0
93175: ST_TO_ADDR
// sBomb := false ;
93176: LD_ADDR_EXP 107
93180: PUSH
93181: LD_INT 0
93183: ST_TO_ADDR
// sWound := false ;
93184: LD_ADDR_EXP 115
93188: PUSH
93189: LD_INT 0
93191: ST_TO_ADDR
// sBetray := false ;
93192: LD_ADDR_EXP 119
93196: PUSH
93197: LD_INT 0
93199: ST_TO_ADDR
// sContamin := false ;
93200: LD_ADDR_EXP 120
93204: PUSH
93205: LD_INT 0
93207: ST_TO_ADDR
// sOil := false ;
93208: LD_ADDR_EXP 122
93212: PUSH
93213: LD_INT 0
93215: ST_TO_ADDR
// sStu := false ;
93216: LD_ADDR_EXP 126
93220: PUSH
93221: LD_INT 0
93223: ST_TO_ADDR
// sBazooka := false ;
93224: LD_ADDR_EXP 129
93228: PUSH
93229: LD_INT 0
93231: ST_TO_ADDR
// sMortar := false ;
93232: LD_ADDR_EXP 130
93236: PUSH
93237: LD_INT 0
93239: ST_TO_ADDR
// sRanger := false ;
93240: LD_ADDR_EXP 140
93244: PUSH
93245: LD_INT 0
93247: ST_TO_ADDR
// end ;
93248: LD_VAR 0 1
93252: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
93253: LD_INT 0
93255: PPUSH
93256: PPUSH
93257: PPUSH
93258: PPUSH
93259: PPUSH
// result := [ ] ;
93260: LD_ADDR_VAR 0 1
93264: PUSH
93265: EMPTY
93266: ST_TO_ADDR
// if campaign_id = 1 then
93267: LD_OWVAR 69
93271: PUSH
93272: LD_INT 1
93274: EQUAL
93275: IFFALSE 96213
// begin case mission_number of 1 :
93277: LD_OWVAR 70
93281: PUSH
93282: LD_INT 1
93284: DOUBLE
93285: EQUAL
93286: IFTRUE 93290
93288: GO 93354
93290: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
93291: LD_ADDR_VAR 0 1
93295: PUSH
93296: LD_INT 2
93298: PUSH
93299: LD_INT 4
93301: PUSH
93302: LD_INT 11
93304: PUSH
93305: LD_INT 12
93307: PUSH
93308: LD_INT 15
93310: PUSH
93311: LD_INT 16
93313: PUSH
93314: LD_INT 22
93316: PUSH
93317: LD_INT 23
93319: PUSH
93320: LD_INT 26
93322: PUSH
93323: EMPTY
93324: LIST
93325: LIST
93326: LIST
93327: LIST
93328: LIST
93329: LIST
93330: LIST
93331: LIST
93332: LIST
93333: PUSH
93334: LD_INT 101
93336: PUSH
93337: LD_INT 102
93339: PUSH
93340: LD_INT 106
93342: PUSH
93343: EMPTY
93344: LIST
93345: LIST
93346: LIST
93347: PUSH
93348: EMPTY
93349: LIST
93350: LIST
93351: ST_TO_ADDR
93352: GO 96211
93354: LD_INT 2
93356: DOUBLE
93357: EQUAL
93358: IFTRUE 93362
93360: GO 93434
93362: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
93363: LD_ADDR_VAR 0 1
93367: PUSH
93368: LD_INT 2
93370: PUSH
93371: LD_INT 4
93373: PUSH
93374: LD_INT 11
93376: PUSH
93377: LD_INT 12
93379: PUSH
93380: LD_INT 15
93382: PUSH
93383: LD_INT 16
93385: PUSH
93386: LD_INT 22
93388: PUSH
93389: LD_INT 23
93391: PUSH
93392: LD_INT 26
93394: PUSH
93395: EMPTY
93396: LIST
93397: LIST
93398: LIST
93399: LIST
93400: LIST
93401: LIST
93402: LIST
93403: LIST
93404: LIST
93405: PUSH
93406: LD_INT 101
93408: PUSH
93409: LD_INT 102
93411: PUSH
93412: LD_INT 105
93414: PUSH
93415: LD_INT 106
93417: PUSH
93418: LD_INT 108
93420: PUSH
93421: EMPTY
93422: LIST
93423: LIST
93424: LIST
93425: LIST
93426: LIST
93427: PUSH
93428: EMPTY
93429: LIST
93430: LIST
93431: ST_TO_ADDR
93432: GO 96211
93434: LD_INT 3
93436: DOUBLE
93437: EQUAL
93438: IFTRUE 93442
93440: GO 93518
93442: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
93443: LD_ADDR_VAR 0 1
93447: PUSH
93448: LD_INT 2
93450: PUSH
93451: LD_INT 4
93453: PUSH
93454: LD_INT 5
93456: PUSH
93457: LD_INT 11
93459: PUSH
93460: LD_INT 12
93462: PUSH
93463: LD_INT 15
93465: PUSH
93466: LD_INT 16
93468: PUSH
93469: LD_INT 22
93471: PUSH
93472: LD_INT 26
93474: PUSH
93475: LD_INT 36
93477: PUSH
93478: EMPTY
93479: LIST
93480: LIST
93481: LIST
93482: LIST
93483: LIST
93484: LIST
93485: LIST
93486: LIST
93487: LIST
93488: LIST
93489: PUSH
93490: LD_INT 101
93492: PUSH
93493: LD_INT 102
93495: PUSH
93496: LD_INT 105
93498: PUSH
93499: LD_INT 106
93501: PUSH
93502: LD_INT 108
93504: PUSH
93505: EMPTY
93506: LIST
93507: LIST
93508: LIST
93509: LIST
93510: LIST
93511: PUSH
93512: EMPTY
93513: LIST
93514: LIST
93515: ST_TO_ADDR
93516: GO 96211
93518: LD_INT 4
93520: DOUBLE
93521: EQUAL
93522: IFTRUE 93526
93524: GO 93610
93526: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
93527: LD_ADDR_VAR 0 1
93531: PUSH
93532: LD_INT 2
93534: PUSH
93535: LD_INT 4
93537: PUSH
93538: LD_INT 5
93540: PUSH
93541: LD_INT 8
93543: PUSH
93544: LD_INT 11
93546: PUSH
93547: LD_INT 12
93549: PUSH
93550: LD_INT 15
93552: PUSH
93553: LD_INT 16
93555: PUSH
93556: LD_INT 22
93558: PUSH
93559: LD_INT 23
93561: PUSH
93562: LD_INT 26
93564: PUSH
93565: LD_INT 36
93567: PUSH
93568: EMPTY
93569: LIST
93570: LIST
93571: LIST
93572: LIST
93573: LIST
93574: LIST
93575: LIST
93576: LIST
93577: LIST
93578: LIST
93579: LIST
93580: LIST
93581: PUSH
93582: LD_INT 101
93584: PUSH
93585: LD_INT 102
93587: PUSH
93588: LD_INT 105
93590: PUSH
93591: LD_INT 106
93593: PUSH
93594: LD_INT 108
93596: PUSH
93597: EMPTY
93598: LIST
93599: LIST
93600: LIST
93601: LIST
93602: LIST
93603: PUSH
93604: EMPTY
93605: LIST
93606: LIST
93607: ST_TO_ADDR
93608: GO 96211
93610: LD_INT 5
93612: DOUBLE
93613: EQUAL
93614: IFTRUE 93618
93616: GO 93718
93618: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
93619: LD_ADDR_VAR 0 1
93623: PUSH
93624: LD_INT 2
93626: PUSH
93627: LD_INT 4
93629: PUSH
93630: LD_INT 5
93632: PUSH
93633: LD_INT 6
93635: PUSH
93636: LD_INT 8
93638: PUSH
93639: LD_INT 11
93641: PUSH
93642: LD_INT 12
93644: PUSH
93645: LD_INT 15
93647: PUSH
93648: LD_INT 16
93650: PUSH
93651: LD_INT 22
93653: PUSH
93654: LD_INT 23
93656: PUSH
93657: LD_INT 25
93659: PUSH
93660: LD_INT 26
93662: PUSH
93663: LD_INT 36
93665: PUSH
93666: EMPTY
93667: LIST
93668: LIST
93669: LIST
93670: LIST
93671: LIST
93672: LIST
93673: LIST
93674: LIST
93675: LIST
93676: LIST
93677: LIST
93678: LIST
93679: LIST
93680: LIST
93681: PUSH
93682: LD_INT 101
93684: PUSH
93685: LD_INT 102
93687: PUSH
93688: LD_INT 105
93690: PUSH
93691: LD_INT 106
93693: PUSH
93694: LD_INT 108
93696: PUSH
93697: LD_INT 109
93699: PUSH
93700: LD_INT 112
93702: PUSH
93703: EMPTY
93704: LIST
93705: LIST
93706: LIST
93707: LIST
93708: LIST
93709: LIST
93710: LIST
93711: PUSH
93712: EMPTY
93713: LIST
93714: LIST
93715: ST_TO_ADDR
93716: GO 96211
93718: LD_INT 6
93720: DOUBLE
93721: EQUAL
93722: IFTRUE 93726
93724: GO 93846
93726: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
93727: LD_ADDR_VAR 0 1
93731: PUSH
93732: LD_INT 2
93734: PUSH
93735: LD_INT 4
93737: PUSH
93738: LD_INT 5
93740: PUSH
93741: LD_INT 6
93743: PUSH
93744: LD_INT 8
93746: PUSH
93747: LD_INT 11
93749: PUSH
93750: LD_INT 12
93752: PUSH
93753: LD_INT 15
93755: PUSH
93756: LD_INT 16
93758: PUSH
93759: LD_INT 20
93761: PUSH
93762: LD_INT 21
93764: PUSH
93765: LD_INT 22
93767: PUSH
93768: LD_INT 23
93770: PUSH
93771: LD_INT 25
93773: PUSH
93774: LD_INT 26
93776: PUSH
93777: LD_INT 30
93779: PUSH
93780: LD_INT 31
93782: PUSH
93783: LD_INT 32
93785: PUSH
93786: LD_INT 36
93788: PUSH
93789: EMPTY
93790: LIST
93791: LIST
93792: LIST
93793: LIST
93794: LIST
93795: LIST
93796: LIST
93797: LIST
93798: LIST
93799: LIST
93800: LIST
93801: LIST
93802: LIST
93803: LIST
93804: LIST
93805: LIST
93806: LIST
93807: LIST
93808: LIST
93809: PUSH
93810: LD_INT 101
93812: PUSH
93813: LD_INT 102
93815: PUSH
93816: LD_INT 105
93818: PUSH
93819: LD_INT 106
93821: PUSH
93822: LD_INT 108
93824: PUSH
93825: LD_INT 109
93827: PUSH
93828: LD_INT 112
93830: PUSH
93831: EMPTY
93832: LIST
93833: LIST
93834: LIST
93835: LIST
93836: LIST
93837: LIST
93838: LIST
93839: PUSH
93840: EMPTY
93841: LIST
93842: LIST
93843: ST_TO_ADDR
93844: GO 96211
93846: LD_INT 7
93848: DOUBLE
93849: EQUAL
93850: IFTRUE 93854
93852: GO 93954
93854: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
93855: LD_ADDR_VAR 0 1
93859: PUSH
93860: LD_INT 2
93862: PUSH
93863: LD_INT 4
93865: PUSH
93866: LD_INT 5
93868: PUSH
93869: LD_INT 7
93871: PUSH
93872: LD_INT 11
93874: PUSH
93875: LD_INT 12
93877: PUSH
93878: LD_INT 15
93880: PUSH
93881: LD_INT 16
93883: PUSH
93884: LD_INT 20
93886: PUSH
93887: LD_INT 21
93889: PUSH
93890: LD_INT 22
93892: PUSH
93893: LD_INT 23
93895: PUSH
93896: LD_INT 25
93898: PUSH
93899: LD_INT 26
93901: PUSH
93902: EMPTY
93903: LIST
93904: LIST
93905: LIST
93906: LIST
93907: LIST
93908: LIST
93909: LIST
93910: LIST
93911: LIST
93912: LIST
93913: LIST
93914: LIST
93915: LIST
93916: LIST
93917: PUSH
93918: LD_INT 101
93920: PUSH
93921: LD_INT 102
93923: PUSH
93924: LD_INT 103
93926: PUSH
93927: LD_INT 105
93929: PUSH
93930: LD_INT 106
93932: PUSH
93933: LD_INT 108
93935: PUSH
93936: LD_INT 112
93938: PUSH
93939: EMPTY
93940: LIST
93941: LIST
93942: LIST
93943: LIST
93944: LIST
93945: LIST
93946: LIST
93947: PUSH
93948: EMPTY
93949: LIST
93950: LIST
93951: ST_TO_ADDR
93952: GO 96211
93954: LD_INT 8
93956: DOUBLE
93957: EQUAL
93958: IFTRUE 93962
93960: GO 94090
93962: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
93963: LD_ADDR_VAR 0 1
93967: PUSH
93968: LD_INT 2
93970: PUSH
93971: LD_INT 4
93973: PUSH
93974: LD_INT 5
93976: PUSH
93977: LD_INT 6
93979: PUSH
93980: LD_INT 7
93982: PUSH
93983: LD_INT 8
93985: PUSH
93986: LD_INT 11
93988: PUSH
93989: LD_INT 12
93991: PUSH
93992: LD_INT 15
93994: PUSH
93995: LD_INT 16
93997: PUSH
93998: LD_INT 20
94000: PUSH
94001: LD_INT 21
94003: PUSH
94004: LD_INT 22
94006: PUSH
94007: LD_INT 23
94009: PUSH
94010: LD_INT 25
94012: PUSH
94013: LD_INT 26
94015: PUSH
94016: LD_INT 30
94018: PUSH
94019: LD_INT 31
94021: PUSH
94022: LD_INT 32
94024: PUSH
94025: LD_INT 36
94027: PUSH
94028: EMPTY
94029: LIST
94030: LIST
94031: LIST
94032: LIST
94033: LIST
94034: LIST
94035: LIST
94036: LIST
94037: LIST
94038: LIST
94039: LIST
94040: LIST
94041: LIST
94042: LIST
94043: LIST
94044: LIST
94045: LIST
94046: LIST
94047: LIST
94048: LIST
94049: PUSH
94050: LD_INT 101
94052: PUSH
94053: LD_INT 102
94055: PUSH
94056: LD_INT 103
94058: PUSH
94059: LD_INT 105
94061: PUSH
94062: LD_INT 106
94064: PUSH
94065: LD_INT 108
94067: PUSH
94068: LD_INT 109
94070: PUSH
94071: LD_INT 112
94073: PUSH
94074: EMPTY
94075: LIST
94076: LIST
94077: LIST
94078: LIST
94079: LIST
94080: LIST
94081: LIST
94082: LIST
94083: PUSH
94084: EMPTY
94085: LIST
94086: LIST
94087: ST_TO_ADDR
94088: GO 96211
94090: LD_INT 9
94092: DOUBLE
94093: EQUAL
94094: IFTRUE 94098
94096: GO 94234
94098: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
94099: LD_ADDR_VAR 0 1
94103: PUSH
94104: LD_INT 2
94106: PUSH
94107: LD_INT 4
94109: PUSH
94110: LD_INT 5
94112: PUSH
94113: LD_INT 6
94115: PUSH
94116: LD_INT 7
94118: PUSH
94119: LD_INT 8
94121: PUSH
94122: LD_INT 11
94124: PUSH
94125: LD_INT 12
94127: PUSH
94128: LD_INT 15
94130: PUSH
94131: LD_INT 16
94133: PUSH
94134: LD_INT 20
94136: PUSH
94137: LD_INT 21
94139: PUSH
94140: LD_INT 22
94142: PUSH
94143: LD_INT 23
94145: PUSH
94146: LD_INT 25
94148: PUSH
94149: LD_INT 26
94151: PUSH
94152: LD_INT 28
94154: PUSH
94155: LD_INT 30
94157: PUSH
94158: LD_INT 31
94160: PUSH
94161: LD_INT 32
94163: PUSH
94164: LD_INT 36
94166: PUSH
94167: EMPTY
94168: LIST
94169: LIST
94170: LIST
94171: LIST
94172: LIST
94173: LIST
94174: LIST
94175: LIST
94176: LIST
94177: LIST
94178: LIST
94179: LIST
94180: LIST
94181: LIST
94182: LIST
94183: LIST
94184: LIST
94185: LIST
94186: LIST
94187: LIST
94188: LIST
94189: PUSH
94190: LD_INT 101
94192: PUSH
94193: LD_INT 102
94195: PUSH
94196: LD_INT 103
94198: PUSH
94199: LD_INT 105
94201: PUSH
94202: LD_INT 106
94204: PUSH
94205: LD_INT 108
94207: PUSH
94208: LD_INT 109
94210: PUSH
94211: LD_INT 112
94213: PUSH
94214: LD_INT 114
94216: PUSH
94217: EMPTY
94218: LIST
94219: LIST
94220: LIST
94221: LIST
94222: LIST
94223: LIST
94224: LIST
94225: LIST
94226: LIST
94227: PUSH
94228: EMPTY
94229: LIST
94230: LIST
94231: ST_TO_ADDR
94232: GO 96211
94234: LD_INT 10
94236: DOUBLE
94237: EQUAL
94238: IFTRUE 94242
94240: GO 94426
94242: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
94243: LD_ADDR_VAR 0 1
94247: PUSH
94248: LD_INT 2
94250: PUSH
94251: LD_INT 4
94253: PUSH
94254: LD_INT 5
94256: PUSH
94257: LD_INT 6
94259: PUSH
94260: LD_INT 7
94262: PUSH
94263: LD_INT 8
94265: PUSH
94266: LD_INT 9
94268: PUSH
94269: LD_INT 10
94271: PUSH
94272: LD_INT 11
94274: PUSH
94275: LD_INT 12
94277: PUSH
94278: LD_INT 13
94280: PUSH
94281: LD_INT 14
94283: PUSH
94284: LD_INT 15
94286: PUSH
94287: LD_INT 16
94289: PUSH
94290: LD_INT 17
94292: PUSH
94293: LD_INT 18
94295: PUSH
94296: LD_INT 19
94298: PUSH
94299: LD_INT 20
94301: PUSH
94302: LD_INT 21
94304: PUSH
94305: LD_INT 22
94307: PUSH
94308: LD_INT 23
94310: PUSH
94311: LD_INT 24
94313: PUSH
94314: LD_INT 25
94316: PUSH
94317: LD_INT 26
94319: PUSH
94320: LD_INT 28
94322: PUSH
94323: LD_INT 30
94325: PUSH
94326: LD_INT 31
94328: PUSH
94329: LD_INT 32
94331: PUSH
94332: LD_INT 36
94334: PUSH
94335: EMPTY
94336: LIST
94337: LIST
94338: LIST
94339: LIST
94340: LIST
94341: LIST
94342: LIST
94343: LIST
94344: LIST
94345: LIST
94346: LIST
94347: LIST
94348: LIST
94349: LIST
94350: LIST
94351: LIST
94352: LIST
94353: LIST
94354: LIST
94355: LIST
94356: LIST
94357: LIST
94358: LIST
94359: LIST
94360: LIST
94361: LIST
94362: LIST
94363: LIST
94364: LIST
94365: PUSH
94366: LD_INT 101
94368: PUSH
94369: LD_INT 102
94371: PUSH
94372: LD_INT 103
94374: PUSH
94375: LD_INT 104
94377: PUSH
94378: LD_INT 105
94380: PUSH
94381: LD_INT 106
94383: PUSH
94384: LD_INT 107
94386: PUSH
94387: LD_INT 108
94389: PUSH
94390: LD_INT 109
94392: PUSH
94393: LD_INT 110
94395: PUSH
94396: LD_INT 111
94398: PUSH
94399: LD_INT 112
94401: PUSH
94402: LD_INT 114
94404: PUSH
94405: EMPTY
94406: LIST
94407: LIST
94408: LIST
94409: LIST
94410: LIST
94411: LIST
94412: LIST
94413: LIST
94414: LIST
94415: LIST
94416: LIST
94417: LIST
94418: LIST
94419: PUSH
94420: EMPTY
94421: LIST
94422: LIST
94423: ST_TO_ADDR
94424: GO 96211
94426: LD_INT 11
94428: DOUBLE
94429: EQUAL
94430: IFTRUE 94434
94432: GO 94626
94434: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
94435: LD_ADDR_VAR 0 1
94439: PUSH
94440: LD_INT 2
94442: PUSH
94443: LD_INT 3
94445: PUSH
94446: LD_INT 4
94448: PUSH
94449: LD_INT 5
94451: PUSH
94452: LD_INT 6
94454: PUSH
94455: LD_INT 7
94457: PUSH
94458: LD_INT 8
94460: PUSH
94461: LD_INT 9
94463: PUSH
94464: LD_INT 10
94466: PUSH
94467: LD_INT 11
94469: PUSH
94470: LD_INT 12
94472: PUSH
94473: LD_INT 13
94475: PUSH
94476: LD_INT 14
94478: PUSH
94479: LD_INT 15
94481: PUSH
94482: LD_INT 16
94484: PUSH
94485: LD_INT 17
94487: PUSH
94488: LD_INT 18
94490: PUSH
94491: LD_INT 19
94493: PUSH
94494: LD_INT 20
94496: PUSH
94497: LD_INT 21
94499: PUSH
94500: LD_INT 22
94502: PUSH
94503: LD_INT 23
94505: PUSH
94506: LD_INT 24
94508: PUSH
94509: LD_INT 25
94511: PUSH
94512: LD_INT 26
94514: PUSH
94515: LD_INT 28
94517: PUSH
94518: LD_INT 30
94520: PUSH
94521: LD_INT 31
94523: PUSH
94524: LD_INT 32
94526: PUSH
94527: LD_INT 34
94529: PUSH
94530: LD_INT 36
94532: PUSH
94533: EMPTY
94534: LIST
94535: LIST
94536: LIST
94537: LIST
94538: LIST
94539: LIST
94540: LIST
94541: LIST
94542: LIST
94543: LIST
94544: LIST
94545: LIST
94546: LIST
94547: LIST
94548: LIST
94549: LIST
94550: LIST
94551: LIST
94552: LIST
94553: LIST
94554: LIST
94555: LIST
94556: LIST
94557: LIST
94558: LIST
94559: LIST
94560: LIST
94561: LIST
94562: LIST
94563: LIST
94564: LIST
94565: PUSH
94566: LD_INT 101
94568: PUSH
94569: LD_INT 102
94571: PUSH
94572: LD_INT 103
94574: PUSH
94575: LD_INT 104
94577: PUSH
94578: LD_INT 105
94580: PUSH
94581: LD_INT 106
94583: PUSH
94584: LD_INT 107
94586: PUSH
94587: LD_INT 108
94589: PUSH
94590: LD_INT 109
94592: PUSH
94593: LD_INT 110
94595: PUSH
94596: LD_INT 111
94598: PUSH
94599: LD_INT 112
94601: PUSH
94602: LD_INT 114
94604: PUSH
94605: EMPTY
94606: LIST
94607: LIST
94608: LIST
94609: LIST
94610: LIST
94611: LIST
94612: LIST
94613: LIST
94614: LIST
94615: LIST
94616: LIST
94617: LIST
94618: LIST
94619: PUSH
94620: EMPTY
94621: LIST
94622: LIST
94623: ST_TO_ADDR
94624: GO 96211
94626: LD_INT 12
94628: DOUBLE
94629: EQUAL
94630: IFTRUE 94634
94632: GO 94842
94634: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
94635: LD_ADDR_VAR 0 1
94639: PUSH
94640: LD_INT 1
94642: PUSH
94643: LD_INT 2
94645: PUSH
94646: LD_INT 3
94648: PUSH
94649: LD_INT 4
94651: PUSH
94652: LD_INT 5
94654: PUSH
94655: LD_INT 6
94657: PUSH
94658: LD_INT 7
94660: PUSH
94661: LD_INT 8
94663: PUSH
94664: LD_INT 9
94666: PUSH
94667: LD_INT 10
94669: PUSH
94670: LD_INT 11
94672: PUSH
94673: LD_INT 12
94675: PUSH
94676: LD_INT 13
94678: PUSH
94679: LD_INT 14
94681: PUSH
94682: LD_INT 15
94684: PUSH
94685: LD_INT 16
94687: PUSH
94688: LD_INT 17
94690: PUSH
94691: LD_INT 18
94693: PUSH
94694: LD_INT 19
94696: PUSH
94697: LD_INT 20
94699: PUSH
94700: LD_INT 21
94702: PUSH
94703: LD_INT 22
94705: PUSH
94706: LD_INT 23
94708: PUSH
94709: LD_INT 24
94711: PUSH
94712: LD_INT 25
94714: PUSH
94715: LD_INT 26
94717: PUSH
94718: LD_INT 27
94720: PUSH
94721: LD_INT 28
94723: PUSH
94724: LD_INT 30
94726: PUSH
94727: LD_INT 31
94729: PUSH
94730: LD_INT 32
94732: PUSH
94733: LD_INT 33
94735: PUSH
94736: LD_INT 34
94738: PUSH
94739: LD_INT 36
94741: PUSH
94742: EMPTY
94743: LIST
94744: LIST
94745: LIST
94746: LIST
94747: LIST
94748: LIST
94749: LIST
94750: LIST
94751: LIST
94752: LIST
94753: LIST
94754: LIST
94755: LIST
94756: LIST
94757: LIST
94758: LIST
94759: LIST
94760: LIST
94761: LIST
94762: LIST
94763: LIST
94764: LIST
94765: LIST
94766: LIST
94767: LIST
94768: LIST
94769: LIST
94770: LIST
94771: LIST
94772: LIST
94773: LIST
94774: LIST
94775: LIST
94776: LIST
94777: PUSH
94778: LD_INT 101
94780: PUSH
94781: LD_INT 102
94783: PUSH
94784: LD_INT 103
94786: PUSH
94787: LD_INT 104
94789: PUSH
94790: LD_INT 105
94792: PUSH
94793: LD_INT 106
94795: PUSH
94796: LD_INT 107
94798: PUSH
94799: LD_INT 108
94801: PUSH
94802: LD_INT 109
94804: PUSH
94805: LD_INT 110
94807: PUSH
94808: LD_INT 111
94810: PUSH
94811: LD_INT 112
94813: PUSH
94814: LD_INT 113
94816: PUSH
94817: LD_INT 114
94819: PUSH
94820: EMPTY
94821: LIST
94822: LIST
94823: LIST
94824: LIST
94825: LIST
94826: LIST
94827: LIST
94828: LIST
94829: LIST
94830: LIST
94831: LIST
94832: LIST
94833: LIST
94834: LIST
94835: PUSH
94836: EMPTY
94837: LIST
94838: LIST
94839: ST_TO_ADDR
94840: GO 96211
94842: LD_INT 13
94844: DOUBLE
94845: EQUAL
94846: IFTRUE 94850
94848: GO 95046
94850: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
94851: LD_ADDR_VAR 0 1
94855: PUSH
94856: LD_INT 1
94858: PUSH
94859: LD_INT 2
94861: PUSH
94862: LD_INT 3
94864: PUSH
94865: LD_INT 4
94867: PUSH
94868: LD_INT 5
94870: PUSH
94871: LD_INT 8
94873: PUSH
94874: LD_INT 9
94876: PUSH
94877: LD_INT 10
94879: PUSH
94880: LD_INT 11
94882: PUSH
94883: LD_INT 12
94885: PUSH
94886: LD_INT 14
94888: PUSH
94889: LD_INT 15
94891: PUSH
94892: LD_INT 16
94894: PUSH
94895: LD_INT 17
94897: PUSH
94898: LD_INT 18
94900: PUSH
94901: LD_INT 19
94903: PUSH
94904: LD_INT 20
94906: PUSH
94907: LD_INT 21
94909: PUSH
94910: LD_INT 22
94912: PUSH
94913: LD_INT 23
94915: PUSH
94916: LD_INT 24
94918: PUSH
94919: LD_INT 25
94921: PUSH
94922: LD_INT 26
94924: PUSH
94925: LD_INT 27
94927: PUSH
94928: LD_INT 28
94930: PUSH
94931: LD_INT 30
94933: PUSH
94934: LD_INT 31
94936: PUSH
94937: LD_INT 32
94939: PUSH
94940: LD_INT 33
94942: PUSH
94943: LD_INT 34
94945: PUSH
94946: LD_INT 36
94948: PUSH
94949: EMPTY
94950: LIST
94951: LIST
94952: LIST
94953: LIST
94954: LIST
94955: LIST
94956: LIST
94957: LIST
94958: LIST
94959: LIST
94960: LIST
94961: LIST
94962: LIST
94963: LIST
94964: LIST
94965: LIST
94966: LIST
94967: LIST
94968: LIST
94969: LIST
94970: LIST
94971: LIST
94972: LIST
94973: LIST
94974: LIST
94975: LIST
94976: LIST
94977: LIST
94978: LIST
94979: LIST
94980: LIST
94981: PUSH
94982: LD_INT 101
94984: PUSH
94985: LD_INT 102
94987: PUSH
94988: LD_INT 103
94990: PUSH
94991: LD_INT 104
94993: PUSH
94994: LD_INT 105
94996: PUSH
94997: LD_INT 106
94999: PUSH
95000: LD_INT 107
95002: PUSH
95003: LD_INT 108
95005: PUSH
95006: LD_INT 109
95008: PUSH
95009: LD_INT 110
95011: PUSH
95012: LD_INT 111
95014: PUSH
95015: LD_INT 112
95017: PUSH
95018: LD_INT 113
95020: PUSH
95021: LD_INT 114
95023: PUSH
95024: EMPTY
95025: LIST
95026: LIST
95027: LIST
95028: LIST
95029: LIST
95030: LIST
95031: LIST
95032: LIST
95033: LIST
95034: LIST
95035: LIST
95036: LIST
95037: LIST
95038: LIST
95039: PUSH
95040: EMPTY
95041: LIST
95042: LIST
95043: ST_TO_ADDR
95044: GO 96211
95046: LD_INT 14
95048: DOUBLE
95049: EQUAL
95050: IFTRUE 95054
95052: GO 95266
95054: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
95055: LD_ADDR_VAR 0 1
95059: PUSH
95060: LD_INT 1
95062: PUSH
95063: LD_INT 2
95065: PUSH
95066: LD_INT 3
95068: PUSH
95069: LD_INT 4
95071: PUSH
95072: LD_INT 5
95074: PUSH
95075: LD_INT 6
95077: PUSH
95078: LD_INT 7
95080: PUSH
95081: LD_INT 8
95083: PUSH
95084: LD_INT 9
95086: PUSH
95087: LD_INT 10
95089: PUSH
95090: LD_INT 11
95092: PUSH
95093: LD_INT 12
95095: PUSH
95096: LD_INT 13
95098: PUSH
95099: LD_INT 14
95101: PUSH
95102: LD_INT 15
95104: PUSH
95105: LD_INT 16
95107: PUSH
95108: LD_INT 17
95110: PUSH
95111: LD_INT 18
95113: PUSH
95114: LD_INT 19
95116: PUSH
95117: LD_INT 20
95119: PUSH
95120: LD_INT 21
95122: PUSH
95123: LD_INT 22
95125: PUSH
95126: LD_INT 23
95128: PUSH
95129: LD_INT 24
95131: PUSH
95132: LD_INT 25
95134: PUSH
95135: LD_INT 26
95137: PUSH
95138: LD_INT 27
95140: PUSH
95141: LD_INT 28
95143: PUSH
95144: LD_INT 29
95146: PUSH
95147: LD_INT 30
95149: PUSH
95150: LD_INT 31
95152: PUSH
95153: LD_INT 32
95155: PUSH
95156: LD_INT 33
95158: PUSH
95159: LD_INT 34
95161: PUSH
95162: LD_INT 36
95164: PUSH
95165: EMPTY
95166: LIST
95167: LIST
95168: LIST
95169: LIST
95170: LIST
95171: LIST
95172: LIST
95173: LIST
95174: LIST
95175: LIST
95176: LIST
95177: LIST
95178: LIST
95179: LIST
95180: LIST
95181: LIST
95182: LIST
95183: LIST
95184: LIST
95185: LIST
95186: LIST
95187: LIST
95188: LIST
95189: LIST
95190: LIST
95191: LIST
95192: LIST
95193: LIST
95194: LIST
95195: LIST
95196: LIST
95197: LIST
95198: LIST
95199: LIST
95200: LIST
95201: PUSH
95202: LD_INT 101
95204: PUSH
95205: LD_INT 102
95207: PUSH
95208: LD_INT 103
95210: PUSH
95211: LD_INT 104
95213: PUSH
95214: LD_INT 105
95216: PUSH
95217: LD_INT 106
95219: PUSH
95220: LD_INT 107
95222: PUSH
95223: LD_INT 108
95225: PUSH
95226: LD_INT 109
95228: PUSH
95229: LD_INT 110
95231: PUSH
95232: LD_INT 111
95234: PUSH
95235: LD_INT 112
95237: PUSH
95238: LD_INT 113
95240: PUSH
95241: LD_INT 114
95243: PUSH
95244: EMPTY
95245: LIST
95246: LIST
95247: LIST
95248: LIST
95249: LIST
95250: LIST
95251: LIST
95252: LIST
95253: LIST
95254: LIST
95255: LIST
95256: LIST
95257: LIST
95258: LIST
95259: PUSH
95260: EMPTY
95261: LIST
95262: LIST
95263: ST_TO_ADDR
95264: GO 96211
95266: LD_INT 15
95268: DOUBLE
95269: EQUAL
95270: IFTRUE 95274
95272: GO 95486
95274: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
95275: LD_ADDR_VAR 0 1
95279: PUSH
95280: LD_INT 1
95282: PUSH
95283: LD_INT 2
95285: PUSH
95286: LD_INT 3
95288: PUSH
95289: LD_INT 4
95291: PUSH
95292: LD_INT 5
95294: PUSH
95295: LD_INT 6
95297: PUSH
95298: LD_INT 7
95300: PUSH
95301: LD_INT 8
95303: PUSH
95304: LD_INT 9
95306: PUSH
95307: LD_INT 10
95309: PUSH
95310: LD_INT 11
95312: PUSH
95313: LD_INT 12
95315: PUSH
95316: LD_INT 13
95318: PUSH
95319: LD_INT 14
95321: PUSH
95322: LD_INT 15
95324: PUSH
95325: LD_INT 16
95327: PUSH
95328: LD_INT 17
95330: PUSH
95331: LD_INT 18
95333: PUSH
95334: LD_INT 19
95336: PUSH
95337: LD_INT 20
95339: PUSH
95340: LD_INT 21
95342: PUSH
95343: LD_INT 22
95345: PUSH
95346: LD_INT 23
95348: PUSH
95349: LD_INT 24
95351: PUSH
95352: LD_INT 25
95354: PUSH
95355: LD_INT 26
95357: PUSH
95358: LD_INT 27
95360: PUSH
95361: LD_INT 28
95363: PUSH
95364: LD_INT 29
95366: PUSH
95367: LD_INT 30
95369: PUSH
95370: LD_INT 31
95372: PUSH
95373: LD_INT 32
95375: PUSH
95376: LD_INT 33
95378: PUSH
95379: LD_INT 34
95381: PUSH
95382: LD_INT 36
95384: PUSH
95385: EMPTY
95386: LIST
95387: LIST
95388: LIST
95389: LIST
95390: LIST
95391: LIST
95392: LIST
95393: LIST
95394: LIST
95395: LIST
95396: LIST
95397: LIST
95398: LIST
95399: LIST
95400: LIST
95401: LIST
95402: LIST
95403: LIST
95404: LIST
95405: LIST
95406: LIST
95407: LIST
95408: LIST
95409: LIST
95410: LIST
95411: LIST
95412: LIST
95413: LIST
95414: LIST
95415: LIST
95416: LIST
95417: LIST
95418: LIST
95419: LIST
95420: LIST
95421: PUSH
95422: LD_INT 101
95424: PUSH
95425: LD_INT 102
95427: PUSH
95428: LD_INT 103
95430: PUSH
95431: LD_INT 104
95433: PUSH
95434: LD_INT 105
95436: PUSH
95437: LD_INT 106
95439: PUSH
95440: LD_INT 107
95442: PUSH
95443: LD_INT 108
95445: PUSH
95446: LD_INT 109
95448: PUSH
95449: LD_INT 110
95451: PUSH
95452: LD_INT 111
95454: PUSH
95455: LD_INT 112
95457: PUSH
95458: LD_INT 113
95460: PUSH
95461: LD_INT 114
95463: PUSH
95464: EMPTY
95465: LIST
95466: LIST
95467: LIST
95468: LIST
95469: LIST
95470: LIST
95471: LIST
95472: LIST
95473: LIST
95474: LIST
95475: LIST
95476: LIST
95477: LIST
95478: LIST
95479: PUSH
95480: EMPTY
95481: LIST
95482: LIST
95483: ST_TO_ADDR
95484: GO 96211
95486: LD_INT 16
95488: DOUBLE
95489: EQUAL
95490: IFTRUE 95494
95492: GO 95618
95494: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
95495: LD_ADDR_VAR 0 1
95499: PUSH
95500: LD_INT 2
95502: PUSH
95503: LD_INT 4
95505: PUSH
95506: LD_INT 5
95508: PUSH
95509: LD_INT 7
95511: PUSH
95512: LD_INT 11
95514: PUSH
95515: LD_INT 12
95517: PUSH
95518: LD_INT 15
95520: PUSH
95521: LD_INT 16
95523: PUSH
95524: LD_INT 20
95526: PUSH
95527: LD_INT 21
95529: PUSH
95530: LD_INT 22
95532: PUSH
95533: LD_INT 23
95535: PUSH
95536: LD_INT 25
95538: PUSH
95539: LD_INT 26
95541: PUSH
95542: LD_INT 30
95544: PUSH
95545: LD_INT 31
95547: PUSH
95548: LD_INT 32
95550: PUSH
95551: LD_INT 33
95553: PUSH
95554: LD_INT 34
95556: PUSH
95557: EMPTY
95558: LIST
95559: LIST
95560: LIST
95561: LIST
95562: LIST
95563: LIST
95564: LIST
95565: LIST
95566: LIST
95567: LIST
95568: LIST
95569: LIST
95570: LIST
95571: LIST
95572: LIST
95573: LIST
95574: LIST
95575: LIST
95576: LIST
95577: PUSH
95578: LD_INT 101
95580: PUSH
95581: LD_INT 102
95583: PUSH
95584: LD_INT 103
95586: PUSH
95587: LD_INT 106
95589: PUSH
95590: LD_INT 108
95592: PUSH
95593: LD_INT 112
95595: PUSH
95596: LD_INT 113
95598: PUSH
95599: LD_INT 114
95601: PUSH
95602: EMPTY
95603: LIST
95604: LIST
95605: LIST
95606: LIST
95607: LIST
95608: LIST
95609: LIST
95610: LIST
95611: PUSH
95612: EMPTY
95613: LIST
95614: LIST
95615: ST_TO_ADDR
95616: GO 96211
95618: LD_INT 17
95620: DOUBLE
95621: EQUAL
95622: IFTRUE 95626
95624: GO 95838
95626: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
95627: LD_ADDR_VAR 0 1
95631: PUSH
95632: LD_INT 1
95634: PUSH
95635: LD_INT 2
95637: PUSH
95638: LD_INT 3
95640: PUSH
95641: LD_INT 4
95643: PUSH
95644: LD_INT 5
95646: PUSH
95647: LD_INT 6
95649: PUSH
95650: LD_INT 7
95652: PUSH
95653: LD_INT 8
95655: PUSH
95656: LD_INT 9
95658: PUSH
95659: LD_INT 10
95661: PUSH
95662: LD_INT 11
95664: PUSH
95665: LD_INT 12
95667: PUSH
95668: LD_INT 13
95670: PUSH
95671: LD_INT 14
95673: PUSH
95674: LD_INT 15
95676: PUSH
95677: LD_INT 16
95679: PUSH
95680: LD_INT 17
95682: PUSH
95683: LD_INT 18
95685: PUSH
95686: LD_INT 19
95688: PUSH
95689: LD_INT 20
95691: PUSH
95692: LD_INT 21
95694: PUSH
95695: LD_INT 22
95697: PUSH
95698: LD_INT 23
95700: PUSH
95701: LD_INT 24
95703: PUSH
95704: LD_INT 25
95706: PUSH
95707: LD_INT 26
95709: PUSH
95710: LD_INT 27
95712: PUSH
95713: LD_INT 28
95715: PUSH
95716: LD_INT 29
95718: PUSH
95719: LD_INT 30
95721: PUSH
95722: LD_INT 31
95724: PUSH
95725: LD_INT 32
95727: PUSH
95728: LD_INT 33
95730: PUSH
95731: LD_INT 34
95733: PUSH
95734: LD_INT 36
95736: PUSH
95737: EMPTY
95738: LIST
95739: LIST
95740: LIST
95741: LIST
95742: LIST
95743: LIST
95744: LIST
95745: LIST
95746: LIST
95747: LIST
95748: LIST
95749: LIST
95750: LIST
95751: LIST
95752: LIST
95753: LIST
95754: LIST
95755: LIST
95756: LIST
95757: LIST
95758: LIST
95759: LIST
95760: LIST
95761: LIST
95762: LIST
95763: LIST
95764: LIST
95765: LIST
95766: LIST
95767: LIST
95768: LIST
95769: LIST
95770: LIST
95771: LIST
95772: LIST
95773: PUSH
95774: LD_INT 101
95776: PUSH
95777: LD_INT 102
95779: PUSH
95780: LD_INT 103
95782: PUSH
95783: LD_INT 104
95785: PUSH
95786: LD_INT 105
95788: PUSH
95789: LD_INT 106
95791: PUSH
95792: LD_INT 107
95794: PUSH
95795: LD_INT 108
95797: PUSH
95798: LD_INT 109
95800: PUSH
95801: LD_INT 110
95803: PUSH
95804: LD_INT 111
95806: PUSH
95807: LD_INT 112
95809: PUSH
95810: LD_INT 113
95812: PUSH
95813: LD_INT 114
95815: PUSH
95816: EMPTY
95817: LIST
95818: LIST
95819: LIST
95820: LIST
95821: LIST
95822: LIST
95823: LIST
95824: LIST
95825: LIST
95826: LIST
95827: LIST
95828: LIST
95829: LIST
95830: LIST
95831: PUSH
95832: EMPTY
95833: LIST
95834: LIST
95835: ST_TO_ADDR
95836: GO 96211
95838: LD_INT 18
95840: DOUBLE
95841: EQUAL
95842: IFTRUE 95846
95844: GO 95982
95846: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
95847: LD_ADDR_VAR 0 1
95851: PUSH
95852: LD_INT 2
95854: PUSH
95855: LD_INT 4
95857: PUSH
95858: LD_INT 5
95860: PUSH
95861: LD_INT 7
95863: PUSH
95864: LD_INT 11
95866: PUSH
95867: LD_INT 12
95869: PUSH
95870: LD_INT 15
95872: PUSH
95873: LD_INT 16
95875: PUSH
95876: LD_INT 20
95878: PUSH
95879: LD_INT 21
95881: PUSH
95882: LD_INT 22
95884: PUSH
95885: LD_INT 23
95887: PUSH
95888: LD_INT 25
95890: PUSH
95891: LD_INT 26
95893: PUSH
95894: LD_INT 30
95896: PUSH
95897: LD_INT 31
95899: PUSH
95900: LD_INT 32
95902: PUSH
95903: LD_INT 33
95905: PUSH
95906: LD_INT 34
95908: PUSH
95909: LD_INT 35
95911: PUSH
95912: LD_INT 36
95914: PUSH
95915: EMPTY
95916: LIST
95917: LIST
95918: LIST
95919: LIST
95920: LIST
95921: LIST
95922: LIST
95923: LIST
95924: LIST
95925: LIST
95926: LIST
95927: LIST
95928: LIST
95929: LIST
95930: LIST
95931: LIST
95932: LIST
95933: LIST
95934: LIST
95935: LIST
95936: LIST
95937: PUSH
95938: LD_INT 101
95940: PUSH
95941: LD_INT 102
95943: PUSH
95944: LD_INT 103
95946: PUSH
95947: LD_INT 106
95949: PUSH
95950: LD_INT 108
95952: PUSH
95953: LD_INT 112
95955: PUSH
95956: LD_INT 113
95958: PUSH
95959: LD_INT 114
95961: PUSH
95962: LD_INT 115
95964: PUSH
95965: EMPTY
95966: LIST
95967: LIST
95968: LIST
95969: LIST
95970: LIST
95971: LIST
95972: LIST
95973: LIST
95974: LIST
95975: PUSH
95976: EMPTY
95977: LIST
95978: LIST
95979: ST_TO_ADDR
95980: GO 96211
95982: LD_INT 19
95984: DOUBLE
95985: EQUAL
95986: IFTRUE 95990
95988: GO 96210
95990: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
95991: LD_ADDR_VAR 0 1
95995: PUSH
95996: LD_INT 1
95998: PUSH
95999: LD_INT 2
96001: PUSH
96002: LD_INT 3
96004: PUSH
96005: LD_INT 4
96007: PUSH
96008: LD_INT 5
96010: PUSH
96011: LD_INT 6
96013: PUSH
96014: LD_INT 7
96016: PUSH
96017: LD_INT 8
96019: PUSH
96020: LD_INT 9
96022: PUSH
96023: LD_INT 10
96025: PUSH
96026: LD_INT 11
96028: PUSH
96029: LD_INT 12
96031: PUSH
96032: LD_INT 13
96034: PUSH
96035: LD_INT 14
96037: PUSH
96038: LD_INT 15
96040: PUSH
96041: LD_INT 16
96043: PUSH
96044: LD_INT 17
96046: PUSH
96047: LD_INT 18
96049: PUSH
96050: LD_INT 19
96052: PUSH
96053: LD_INT 20
96055: PUSH
96056: LD_INT 21
96058: PUSH
96059: LD_INT 22
96061: PUSH
96062: LD_INT 23
96064: PUSH
96065: LD_INT 24
96067: PUSH
96068: LD_INT 25
96070: PUSH
96071: LD_INT 26
96073: PUSH
96074: LD_INT 27
96076: PUSH
96077: LD_INT 28
96079: PUSH
96080: LD_INT 29
96082: PUSH
96083: LD_INT 30
96085: PUSH
96086: LD_INT 31
96088: PUSH
96089: LD_INT 32
96091: PUSH
96092: LD_INT 33
96094: PUSH
96095: LD_INT 34
96097: PUSH
96098: LD_INT 35
96100: PUSH
96101: LD_INT 36
96103: PUSH
96104: EMPTY
96105: LIST
96106: LIST
96107: LIST
96108: LIST
96109: LIST
96110: LIST
96111: LIST
96112: LIST
96113: LIST
96114: LIST
96115: LIST
96116: LIST
96117: LIST
96118: LIST
96119: LIST
96120: LIST
96121: LIST
96122: LIST
96123: LIST
96124: LIST
96125: LIST
96126: LIST
96127: LIST
96128: LIST
96129: LIST
96130: LIST
96131: LIST
96132: LIST
96133: LIST
96134: LIST
96135: LIST
96136: LIST
96137: LIST
96138: LIST
96139: LIST
96140: LIST
96141: PUSH
96142: LD_INT 101
96144: PUSH
96145: LD_INT 102
96147: PUSH
96148: LD_INT 103
96150: PUSH
96151: LD_INT 104
96153: PUSH
96154: LD_INT 105
96156: PUSH
96157: LD_INT 106
96159: PUSH
96160: LD_INT 107
96162: PUSH
96163: LD_INT 108
96165: PUSH
96166: LD_INT 109
96168: PUSH
96169: LD_INT 110
96171: PUSH
96172: LD_INT 111
96174: PUSH
96175: LD_INT 112
96177: PUSH
96178: LD_INT 113
96180: PUSH
96181: LD_INT 114
96183: PUSH
96184: LD_INT 115
96186: PUSH
96187: EMPTY
96188: LIST
96189: LIST
96190: LIST
96191: LIST
96192: LIST
96193: LIST
96194: LIST
96195: LIST
96196: LIST
96197: LIST
96198: LIST
96199: LIST
96200: LIST
96201: LIST
96202: LIST
96203: PUSH
96204: EMPTY
96205: LIST
96206: LIST
96207: ST_TO_ADDR
96208: GO 96211
96210: POP
// end else
96211: GO 96248
// if campaign_id = 5 then
96213: LD_OWVAR 69
96217: PUSH
96218: LD_INT 5
96220: EQUAL
96221: IFFALSE 96248
// begin result := [ [ 1 , 2 ] , [ 100 ] ] ;
96223: LD_ADDR_VAR 0 1
96227: PUSH
96228: LD_INT 1
96230: PUSH
96231: LD_INT 2
96233: PUSH
96234: EMPTY
96235: LIST
96236: LIST
96237: PUSH
96238: LD_INT 100
96240: PUSH
96241: EMPTY
96242: LIST
96243: PUSH
96244: EMPTY
96245: LIST
96246: LIST
96247: ST_TO_ADDR
// end ; if result then
96248: LD_VAR 0 1
96252: IFFALSE 96541
// begin normal :=  ;
96254: LD_ADDR_VAR 0 3
96258: PUSH
96259: LD_STRING 
96261: ST_TO_ADDR
// hardcore :=  ;
96262: LD_ADDR_VAR 0 4
96266: PUSH
96267: LD_STRING 
96269: ST_TO_ADDR
// for i = 1 to normalCounter do
96270: LD_ADDR_VAR 0 5
96274: PUSH
96275: DOUBLE
96276: LD_INT 1
96278: DEC
96279: ST_TO_ADDR
96280: LD_EXP 88
96284: PUSH
96285: FOR_TO
96286: IFFALSE 96387
// begin tmp := 0 ;
96288: LD_ADDR_VAR 0 2
96292: PUSH
96293: LD_STRING 0
96295: ST_TO_ADDR
// if result [ 1 ] then
96296: LD_VAR 0 1
96300: PUSH
96301: LD_INT 1
96303: ARRAY
96304: IFFALSE 96369
// if result [ 1 ] [ 1 ] = i then
96306: LD_VAR 0 1
96310: PUSH
96311: LD_INT 1
96313: ARRAY
96314: PUSH
96315: LD_INT 1
96317: ARRAY
96318: PUSH
96319: LD_VAR 0 5
96323: EQUAL
96324: IFFALSE 96369
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
96326: LD_ADDR_VAR 0 1
96330: PUSH
96331: LD_VAR 0 1
96335: PPUSH
96336: LD_INT 1
96338: PPUSH
96339: LD_VAR 0 1
96343: PUSH
96344: LD_INT 1
96346: ARRAY
96347: PPUSH
96348: LD_INT 1
96350: PPUSH
96351: CALL_OW 3
96355: PPUSH
96356: CALL_OW 1
96360: ST_TO_ADDR
// tmp := 1 ;
96361: LD_ADDR_VAR 0 2
96365: PUSH
96366: LD_STRING 1
96368: ST_TO_ADDR
// end ; normal := normal & tmp ;
96369: LD_ADDR_VAR 0 3
96373: PUSH
96374: LD_VAR 0 3
96378: PUSH
96379: LD_VAR 0 2
96383: STR
96384: ST_TO_ADDR
// end ;
96385: GO 96285
96387: POP
96388: POP
// for i = 1 to hardcoreCounter do
96389: LD_ADDR_VAR 0 5
96393: PUSH
96394: DOUBLE
96395: LD_INT 1
96397: DEC
96398: ST_TO_ADDR
96399: LD_EXP 89
96403: PUSH
96404: FOR_TO
96405: IFFALSE 96510
// begin tmp := 0 ;
96407: LD_ADDR_VAR 0 2
96411: PUSH
96412: LD_STRING 0
96414: ST_TO_ADDR
// if result [ 2 ] then
96415: LD_VAR 0 1
96419: PUSH
96420: LD_INT 2
96422: ARRAY
96423: IFFALSE 96492
// if result [ 2 ] [ 1 ] = 100 + i then
96425: LD_VAR 0 1
96429: PUSH
96430: LD_INT 2
96432: ARRAY
96433: PUSH
96434: LD_INT 1
96436: ARRAY
96437: PUSH
96438: LD_INT 100
96440: PUSH
96441: LD_VAR 0 5
96445: PLUS
96446: EQUAL
96447: IFFALSE 96492
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
96449: LD_ADDR_VAR 0 1
96453: PUSH
96454: LD_VAR 0 1
96458: PPUSH
96459: LD_INT 2
96461: PPUSH
96462: LD_VAR 0 1
96466: PUSH
96467: LD_INT 2
96469: ARRAY
96470: PPUSH
96471: LD_INT 1
96473: PPUSH
96474: CALL_OW 3
96478: PPUSH
96479: CALL_OW 1
96483: ST_TO_ADDR
// tmp := 1 ;
96484: LD_ADDR_VAR 0 2
96488: PUSH
96489: LD_STRING 1
96491: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
96492: LD_ADDR_VAR 0 4
96496: PUSH
96497: LD_VAR 0 4
96501: PUSH
96502: LD_VAR 0 2
96506: STR
96507: ST_TO_ADDR
// end ;
96508: GO 96404
96510: POP
96511: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
96512: LD_STRING getStreamItemsFromMission("
96514: PUSH
96515: LD_VAR 0 3
96519: STR
96520: PUSH
96521: LD_STRING ","
96523: STR
96524: PUSH
96525: LD_VAR 0 4
96529: STR
96530: PUSH
96531: LD_STRING ")
96533: STR
96534: PPUSH
96535: CALL_OW 559
// end else
96539: GO 96548
// ToLua ( getStreamItemsFromMission("","") ) ;
96541: LD_STRING getStreamItemsFromMission("","")
96543: PPUSH
96544: CALL_OW 559
// end ;
96548: LD_VAR 0 1
96552: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
96553: LD_VAR 0 2
96557: PUSH
96558: LD_INT 100
96560: EQUAL
96561: IFFALSE 97510
// begin if not StreamModeActive then
96563: LD_EXP 87
96567: NOT
96568: IFFALSE 96578
// StreamModeActive := true ;
96570: LD_ADDR_EXP 87
96574: PUSH
96575: LD_INT 1
96577: ST_TO_ADDR
// if p3 = 0 then
96578: LD_VAR 0 3
96582: PUSH
96583: LD_INT 0
96585: EQUAL
96586: IFFALSE 96592
// InitStreamMode ;
96588: CALL 92813 0 0
// if p3 = 1 then
96592: LD_VAR 0 3
96596: PUSH
96597: LD_INT 1
96599: EQUAL
96600: IFFALSE 96610
// sRocket := true ;
96602: LD_ADDR_EXP 92
96606: PUSH
96607: LD_INT 1
96609: ST_TO_ADDR
// if p3 = 2 then
96610: LD_VAR 0 3
96614: PUSH
96615: LD_INT 2
96617: EQUAL
96618: IFFALSE 96628
// sSpeed := true ;
96620: LD_ADDR_EXP 91
96624: PUSH
96625: LD_INT 1
96627: ST_TO_ADDR
// if p3 = 3 then
96628: LD_VAR 0 3
96632: PUSH
96633: LD_INT 3
96635: EQUAL
96636: IFFALSE 96646
// sEngine := true ;
96638: LD_ADDR_EXP 93
96642: PUSH
96643: LD_INT 1
96645: ST_TO_ADDR
// if p3 = 4 then
96646: LD_VAR 0 3
96650: PUSH
96651: LD_INT 4
96653: EQUAL
96654: IFFALSE 96664
// sSpec := true ;
96656: LD_ADDR_EXP 90
96660: PUSH
96661: LD_INT 1
96663: ST_TO_ADDR
// if p3 = 5 then
96664: LD_VAR 0 3
96668: PUSH
96669: LD_INT 5
96671: EQUAL
96672: IFFALSE 96682
// sLevel := true ;
96674: LD_ADDR_EXP 94
96678: PUSH
96679: LD_INT 1
96681: ST_TO_ADDR
// if p3 = 6 then
96682: LD_VAR 0 3
96686: PUSH
96687: LD_INT 6
96689: EQUAL
96690: IFFALSE 96700
// sArmoury := true ;
96692: LD_ADDR_EXP 95
96696: PUSH
96697: LD_INT 1
96699: ST_TO_ADDR
// if p3 = 7 then
96700: LD_VAR 0 3
96704: PUSH
96705: LD_INT 7
96707: EQUAL
96708: IFFALSE 96718
// sRadar := true ;
96710: LD_ADDR_EXP 96
96714: PUSH
96715: LD_INT 1
96717: ST_TO_ADDR
// if p3 = 8 then
96718: LD_VAR 0 3
96722: PUSH
96723: LD_INT 8
96725: EQUAL
96726: IFFALSE 96736
// sBunker := true ;
96728: LD_ADDR_EXP 97
96732: PUSH
96733: LD_INT 1
96735: ST_TO_ADDR
// if p3 = 9 then
96736: LD_VAR 0 3
96740: PUSH
96741: LD_INT 9
96743: EQUAL
96744: IFFALSE 96754
// sHack := true ;
96746: LD_ADDR_EXP 98
96750: PUSH
96751: LD_INT 1
96753: ST_TO_ADDR
// if p3 = 10 then
96754: LD_VAR 0 3
96758: PUSH
96759: LD_INT 10
96761: EQUAL
96762: IFFALSE 96772
// sFire := true ;
96764: LD_ADDR_EXP 99
96768: PUSH
96769: LD_INT 1
96771: ST_TO_ADDR
// if p3 = 11 then
96772: LD_VAR 0 3
96776: PUSH
96777: LD_INT 11
96779: EQUAL
96780: IFFALSE 96790
// sRefresh := true ;
96782: LD_ADDR_EXP 100
96786: PUSH
96787: LD_INT 1
96789: ST_TO_ADDR
// if p3 = 12 then
96790: LD_VAR 0 3
96794: PUSH
96795: LD_INT 12
96797: EQUAL
96798: IFFALSE 96808
// sExp := true ;
96800: LD_ADDR_EXP 101
96804: PUSH
96805: LD_INT 1
96807: ST_TO_ADDR
// if p3 = 13 then
96808: LD_VAR 0 3
96812: PUSH
96813: LD_INT 13
96815: EQUAL
96816: IFFALSE 96826
// sDepot := true ;
96818: LD_ADDR_EXP 102
96822: PUSH
96823: LD_INT 1
96825: ST_TO_ADDR
// if p3 = 14 then
96826: LD_VAR 0 3
96830: PUSH
96831: LD_INT 14
96833: EQUAL
96834: IFFALSE 96844
// sFlag := true ;
96836: LD_ADDR_EXP 103
96840: PUSH
96841: LD_INT 1
96843: ST_TO_ADDR
// if p3 = 15 then
96844: LD_VAR 0 3
96848: PUSH
96849: LD_INT 15
96851: EQUAL
96852: IFFALSE 96862
// sKamikadze := true ;
96854: LD_ADDR_EXP 111
96858: PUSH
96859: LD_INT 1
96861: ST_TO_ADDR
// if p3 = 16 then
96862: LD_VAR 0 3
96866: PUSH
96867: LD_INT 16
96869: EQUAL
96870: IFFALSE 96880
// sTroll := true ;
96872: LD_ADDR_EXP 112
96876: PUSH
96877: LD_INT 1
96879: ST_TO_ADDR
// if p3 = 17 then
96880: LD_VAR 0 3
96884: PUSH
96885: LD_INT 17
96887: EQUAL
96888: IFFALSE 96898
// sSlow := true ;
96890: LD_ADDR_EXP 113
96894: PUSH
96895: LD_INT 1
96897: ST_TO_ADDR
// if p3 = 18 then
96898: LD_VAR 0 3
96902: PUSH
96903: LD_INT 18
96905: EQUAL
96906: IFFALSE 96916
// sLack := true ;
96908: LD_ADDR_EXP 114
96912: PUSH
96913: LD_INT 1
96915: ST_TO_ADDR
// if p3 = 19 then
96916: LD_VAR 0 3
96920: PUSH
96921: LD_INT 19
96923: EQUAL
96924: IFFALSE 96934
// sTank := true ;
96926: LD_ADDR_EXP 116
96930: PUSH
96931: LD_INT 1
96933: ST_TO_ADDR
// if p3 = 20 then
96934: LD_VAR 0 3
96938: PUSH
96939: LD_INT 20
96941: EQUAL
96942: IFFALSE 96952
// sRemote := true ;
96944: LD_ADDR_EXP 117
96948: PUSH
96949: LD_INT 1
96951: ST_TO_ADDR
// if p3 = 21 then
96952: LD_VAR 0 3
96956: PUSH
96957: LD_INT 21
96959: EQUAL
96960: IFFALSE 96970
// sPowell := true ;
96962: LD_ADDR_EXP 118
96966: PUSH
96967: LD_INT 1
96969: ST_TO_ADDR
// if p3 = 22 then
96970: LD_VAR 0 3
96974: PUSH
96975: LD_INT 22
96977: EQUAL
96978: IFFALSE 96988
// sTeleport := true ;
96980: LD_ADDR_EXP 121
96984: PUSH
96985: LD_INT 1
96987: ST_TO_ADDR
// if p3 = 23 then
96988: LD_VAR 0 3
96992: PUSH
96993: LD_INT 23
96995: EQUAL
96996: IFFALSE 97006
// sOilTower := true ;
96998: LD_ADDR_EXP 123
97002: PUSH
97003: LD_INT 1
97005: ST_TO_ADDR
// if p3 = 24 then
97006: LD_VAR 0 3
97010: PUSH
97011: LD_INT 24
97013: EQUAL
97014: IFFALSE 97024
// sShovel := true ;
97016: LD_ADDR_EXP 124
97020: PUSH
97021: LD_INT 1
97023: ST_TO_ADDR
// if p3 = 25 then
97024: LD_VAR 0 3
97028: PUSH
97029: LD_INT 25
97031: EQUAL
97032: IFFALSE 97042
// sSheik := true ;
97034: LD_ADDR_EXP 125
97038: PUSH
97039: LD_INT 1
97041: ST_TO_ADDR
// if p3 = 26 then
97042: LD_VAR 0 3
97046: PUSH
97047: LD_INT 26
97049: EQUAL
97050: IFFALSE 97060
// sEarthquake := true ;
97052: LD_ADDR_EXP 127
97056: PUSH
97057: LD_INT 1
97059: ST_TO_ADDR
// if p3 = 27 then
97060: LD_VAR 0 3
97064: PUSH
97065: LD_INT 27
97067: EQUAL
97068: IFFALSE 97078
// sAI := true ;
97070: LD_ADDR_EXP 128
97074: PUSH
97075: LD_INT 1
97077: ST_TO_ADDR
// if p3 = 28 then
97078: LD_VAR 0 3
97082: PUSH
97083: LD_INT 28
97085: EQUAL
97086: IFFALSE 97096
// sCargo := true ;
97088: LD_ADDR_EXP 131
97092: PUSH
97093: LD_INT 1
97095: ST_TO_ADDR
// if p3 = 29 then
97096: LD_VAR 0 3
97100: PUSH
97101: LD_INT 29
97103: EQUAL
97104: IFFALSE 97114
// sDLaser := true ;
97106: LD_ADDR_EXP 132
97110: PUSH
97111: LD_INT 1
97113: ST_TO_ADDR
// if p3 = 30 then
97114: LD_VAR 0 3
97118: PUSH
97119: LD_INT 30
97121: EQUAL
97122: IFFALSE 97132
// sExchange := true ;
97124: LD_ADDR_EXP 133
97128: PUSH
97129: LD_INT 1
97131: ST_TO_ADDR
// if p3 = 31 then
97132: LD_VAR 0 3
97136: PUSH
97137: LD_INT 31
97139: EQUAL
97140: IFFALSE 97150
// sFac := true ;
97142: LD_ADDR_EXP 134
97146: PUSH
97147: LD_INT 1
97149: ST_TO_ADDR
// if p3 = 32 then
97150: LD_VAR 0 3
97154: PUSH
97155: LD_INT 32
97157: EQUAL
97158: IFFALSE 97168
// sPower := true ;
97160: LD_ADDR_EXP 135
97164: PUSH
97165: LD_INT 1
97167: ST_TO_ADDR
// if p3 = 33 then
97168: LD_VAR 0 3
97172: PUSH
97173: LD_INT 33
97175: EQUAL
97176: IFFALSE 97186
// sRandom := true ;
97178: LD_ADDR_EXP 136
97182: PUSH
97183: LD_INT 1
97185: ST_TO_ADDR
// if p3 = 34 then
97186: LD_VAR 0 3
97190: PUSH
97191: LD_INT 34
97193: EQUAL
97194: IFFALSE 97204
// sShield := true ;
97196: LD_ADDR_EXP 137
97200: PUSH
97201: LD_INT 1
97203: ST_TO_ADDR
// if p3 = 35 then
97204: LD_VAR 0 3
97208: PUSH
97209: LD_INT 35
97211: EQUAL
97212: IFFALSE 97222
// sTime := true ;
97214: LD_ADDR_EXP 138
97218: PUSH
97219: LD_INT 1
97221: ST_TO_ADDR
// if p3 = 36 then
97222: LD_VAR 0 3
97226: PUSH
97227: LD_INT 36
97229: EQUAL
97230: IFFALSE 97240
// sTools := true ;
97232: LD_ADDR_EXP 139
97236: PUSH
97237: LD_INT 1
97239: ST_TO_ADDR
// if p3 = 101 then
97240: LD_VAR 0 3
97244: PUSH
97245: LD_INT 101
97247: EQUAL
97248: IFFALSE 97258
// sSold := true ;
97250: LD_ADDR_EXP 104
97254: PUSH
97255: LD_INT 1
97257: ST_TO_ADDR
// if p3 = 102 then
97258: LD_VAR 0 3
97262: PUSH
97263: LD_INT 102
97265: EQUAL
97266: IFFALSE 97276
// sDiff := true ;
97268: LD_ADDR_EXP 105
97272: PUSH
97273: LD_INT 1
97275: ST_TO_ADDR
// if p3 = 103 then
97276: LD_VAR 0 3
97280: PUSH
97281: LD_INT 103
97283: EQUAL
97284: IFFALSE 97294
// sFog := true ;
97286: LD_ADDR_EXP 108
97290: PUSH
97291: LD_INT 1
97293: ST_TO_ADDR
// if p3 = 104 then
97294: LD_VAR 0 3
97298: PUSH
97299: LD_INT 104
97301: EQUAL
97302: IFFALSE 97312
// sReset := true ;
97304: LD_ADDR_EXP 109
97308: PUSH
97309: LD_INT 1
97311: ST_TO_ADDR
// if p3 = 105 then
97312: LD_VAR 0 3
97316: PUSH
97317: LD_INT 105
97319: EQUAL
97320: IFFALSE 97330
// sSun := true ;
97322: LD_ADDR_EXP 110
97326: PUSH
97327: LD_INT 1
97329: ST_TO_ADDR
// if p3 = 106 then
97330: LD_VAR 0 3
97334: PUSH
97335: LD_INT 106
97337: EQUAL
97338: IFFALSE 97348
// sTiger := true ;
97340: LD_ADDR_EXP 106
97344: PUSH
97345: LD_INT 1
97347: ST_TO_ADDR
// if p3 = 107 then
97348: LD_VAR 0 3
97352: PUSH
97353: LD_INT 107
97355: EQUAL
97356: IFFALSE 97366
// sBomb := true ;
97358: LD_ADDR_EXP 107
97362: PUSH
97363: LD_INT 1
97365: ST_TO_ADDR
// if p3 = 108 then
97366: LD_VAR 0 3
97370: PUSH
97371: LD_INT 108
97373: EQUAL
97374: IFFALSE 97384
// sWound := true ;
97376: LD_ADDR_EXP 115
97380: PUSH
97381: LD_INT 1
97383: ST_TO_ADDR
// if p3 = 109 then
97384: LD_VAR 0 3
97388: PUSH
97389: LD_INT 109
97391: EQUAL
97392: IFFALSE 97402
// sBetray := true ;
97394: LD_ADDR_EXP 119
97398: PUSH
97399: LD_INT 1
97401: ST_TO_ADDR
// if p3 = 110 then
97402: LD_VAR 0 3
97406: PUSH
97407: LD_INT 110
97409: EQUAL
97410: IFFALSE 97420
// sContamin := true ;
97412: LD_ADDR_EXP 120
97416: PUSH
97417: LD_INT 1
97419: ST_TO_ADDR
// if p3 = 111 then
97420: LD_VAR 0 3
97424: PUSH
97425: LD_INT 111
97427: EQUAL
97428: IFFALSE 97438
// sOil := true ;
97430: LD_ADDR_EXP 122
97434: PUSH
97435: LD_INT 1
97437: ST_TO_ADDR
// if p3 = 112 then
97438: LD_VAR 0 3
97442: PUSH
97443: LD_INT 112
97445: EQUAL
97446: IFFALSE 97456
// sStu := true ;
97448: LD_ADDR_EXP 126
97452: PUSH
97453: LD_INT 1
97455: ST_TO_ADDR
// if p3 = 113 then
97456: LD_VAR 0 3
97460: PUSH
97461: LD_INT 113
97463: EQUAL
97464: IFFALSE 97474
// sBazooka := true ;
97466: LD_ADDR_EXP 129
97470: PUSH
97471: LD_INT 1
97473: ST_TO_ADDR
// if p3 = 114 then
97474: LD_VAR 0 3
97478: PUSH
97479: LD_INT 114
97481: EQUAL
97482: IFFALSE 97492
// sMortar := true ;
97484: LD_ADDR_EXP 130
97488: PUSH
97489: LD_INT 1
97491: ST_TO_ADDR
// if p3 = 115 then
97492: LD_VAR 0 3
97496: PUSH
97497: LD_INT 115
97499: EQUAL
97500: IFFALSE 97510
// sRanger := true ;
97502: LD_ADDR_EXP 140
97506: PUSH
97507: LD_INT 1
97509: ST_TO_ADDR
// end ; end ;
97510: PPOPN 6
97512: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
97513: LD_EXP 87
97517: PUSH
97518: LD_EXP 92
97522: AND
97523: IFFALSE 97647
97525: GO 97527
97527: DISABLE
97528: LD_INT 0
97530: PPUSH
97531: PPUSH
// begin enable ;
97532: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
97533: LD_ADDR_VAR 0 2
97537: PUSH
97538: LD_INT 22
97540: PUSH
97541: LD_OWVAR 2
97545: PUSH
97546: EMPTY
97547: LIST
97548: LIST
97549: PUSH
97550: LD_INT 2
97552: PUSH
97553: LD_INT 34
97555: PUSH
97556: LD_INT 7
97558: PUSH
97559: EMPTY
97560: LIST
97561: LIST
97562: PUSH
97563: LD_INT 34
97565: PUSH
97566: LD_INT 45
97568: PUSH
97569: EMPTY
97570: LIST
97571: LIST
97572: PUSH
97573: LD_INT 34
97575: PUSH
97576: LD_INT 28
97578: PUSH
97579: EMPTY
97580: LIST
97581: LIST
97582: PUSH
97583: LD_INT 34
97585: PUSH
97586: LD_INT 47
97588: PUSH
97589: EMPTY
97590: LIST
97591: LIST
97592: PUSH
97593: EMPTY
97594: LIST
97595: LIST
97596: LIST
97597: LIST
97598: LIST
97599: PUSH
97600: EMPTY
97601: LIST
97602: LIST
97603: PPUSH
97604: CALL_OW 69
97608: ST_TO_ADDR
// if not tmp then
97609: LD_VAR 0 2
97613: NOT
97614: IFFALSE 97618
// exit ;
97616: GO 97647
// for i in tmp do
97618: LD_ADDR_VAR 0 1
97622: PUSH
97623: LD_VAR 0 2
97627: PUSH
97628: FOR_IN
97629: IFFALSE 97645
// begin SetLives ( i , 0 ) ;
97631: LD_VAR 0 1
97635: PPUSH
97636: LD_INT 0
97638: PPUSH
97639: CALL_OW 234
// end ;
97643: GO 97628
97645: POP
97646: POP
// end ;
97647: PPOPN 2
97649: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
97650: LD_EXP 87
97654: PUSH
97655: LD_EXP 93
97659: AND
97660: IFFALSE 97744
97662: GO 97664
97664: DISABLE
97665: LD_INT 0
97667: PPUSH
97668: PPUSH
// begin enable ;
97669: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
97670: LD_ADDR_VAR 0 2
97674: PUSH
97675: LD_INT 22
97677: PUSH
97678: LD_OWVAR 2
97682: PUSH
97683: EMPTY
97684: LIST
97685: LIST
97686: PUSH
97687: LD_INT 32
97689: PUSH
97690: LD_INT 3
97692: PUSH
97693: EMPTY
97694: LIST
97695: LIST
97696: PUSH
97697: EMPTY
97698: LIST
97699: LIST
97700: PPUSH
97701: CALL_OW 69
97705: ST_TO_ADDR
// if not tmp then
97706: LD_VAR 0 2
97710: NOT
97711: IFFALSE 97715
// exit ;
97713: GO 97744
// for i in tmp do
97715: LD_ADDR_VAR 0 1
97719: PUSH
97720: LD_VAR 0 2
97724: PUSH
97725: FOR_IN
97726: IFFALSE 97742
// begin SetLives ( i , 0 ) ;
97728: LD_VAR 0 1
97732: PPUSH
97733: LD_INT 0
97735: PPUSH
97736: CALL_OW 234
// end ;
97740: GO 97725
97742: POP
97743: POP
// end ;
97744: PPOPN 2
97746: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
97747: LD_EXP 87
97751: PUSH
97752: LD_EXP 90
97756: AND
97757: IFFALSE 97850
97759: GO 97761
97761: DISABLE
97762: LD_INT 0
97764: PPUSH
// begin enable ;
97765: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
97766: LD_ADDR_VAR 0 1
97770: PUSH
97771: LD_INT 22
97773: PUSH
97774: LD_OWVAR 2
97778: PUSH
97779: EMPTY
97780: LIST
97781: LIST
97782: PUSH
97783: LD_INT 2
97785: PUSH
97786: LD_INT 25
97788: PUSH
97789: LD_INT 5
97791: PUSH
97792: EMPTY
97793: LIST
97794: LIST
97795: PUSH
97796: LD_INT 25
97798: PUSH
97799: LD_INT 9
97801: PUSH
97802: EMPTY
97803: LIST
97804: LIST
97805: PUSH
97806: LD_INT 25
97808: PUSH
97809: LD_INT 8
97811: PUSH
97812: EMPTY
97813: LIST
97814: LIST
97815: PUSH
97816: EMPTY
97817: LIST
97818: LIST
97819: LIST
97820: LIST
97821: PUSH
97822: EMPTY
97823: LIST
97824: LIST
97825: PPUSH
97826: CALL_OW 69
97830: PUSH
97831: FOR_IN
97832: IFFALSE 97848
// begin SetClass ( i , 1 ) ;
97834: LD_VAR 0 1
97838: PPUSH
97839: LD_INT 1
97841: PPUSH
97842: CALL_OW 336
// end ;
97846: GO 97831
97848: POP
97849: POP
// end ;
97850: PPOPN 1
97852: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
97853: LD_EXP 87
97857: PUSH
97858: LD_EXP 91
97862: AND
97863: PUSH
97864: LD_OWVAR 65
97868: PUSH
97869: LD_INT 7
97871: LESS
97872: AND
97873: IFFALSE 97887
97875: GO 97877
97877: DISABLE
// begin enable ;
97878: ENABLE
// game_speed := 7 ;
97879: LD_ADDR_OWVAR 65
97883: PUSH
97884: LD_INT 7
97886: ST_TO_ADDR
// end ;
97887: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
97888: LD_EXP 87
97892: PUSH
97893: LD_EXP 94
97897: AND
97898: IFFALSE 98100
97900: GO 97902
97902: DISABLE
97903: LD_INT 0
97905: PPUSH
97906: PPUSH
97907: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
97908: LD_ADDR_VAR 0 3
97912: PUSH
97913: LD_INT 81
97915: PUSH
97916: LD_OWVAR 2
97920: PUSH
97921: EMPTY
97922: LIST
97923: LIST
97924: PUSH
97925: LD_INT 21
97927: PUSH
97928: LD_INT 1
97930: PUSH
97931: EMPTY
97932: LIST
97933: LIST
97934: PUSH
97935: EMPTY
97936: LIST
97937: LIST
97938: PPUSH
97939: CALL_OW 69
97943: ST_TO_ADDR
// if not tmp then
97944: LD_VAR 0 3
97948: NOT
97949: IFFALSE 97953
// exit ;
97951: GO 98100
// if tmp > 5 then
97953: LD_VAR 0 3
97957: PUSH
97958: LD_INT 5
97960: GREATER
97961: IFFALSE 97973
// k := 5 else
97963: LD_ADDR_VAR 0 2
97967: PUSH
97968: LD_INT 5
97970: ST_TO_ADDR
97971: GO 97983
// k := tmp ;
97973: LD_ADDR_VAR 0 2
97977: PUSH
97978: LD_VAR 0 3
97982: ST_TO_ADDR
// for i := 1 to k do
97983: LD_ADDR_VAR 0 1
97987: PUSH
97988: DOUBLE
97989: LD_INT 1
97991: DEC
97992: ST_TO_ADDR
97993: LD_VAR 0 2
97997: PUSH
97998: FOR_TO
97999: IFFALSE 98098
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
98001: LD_VAR 0 3
98005: PUSH
98006: LD_VAR 0 1
98010: ARRAY
98011: PPUSH
98012: LD_VAR 0 1
98016: PUSH
98017: LD_INT 4
98019: MOD
98020: PUSH
98021: LD_INT 1
98023: PLUS
98024: PPUSH
98025: CALL_OW 259
98029: PUSH
98030: LD_INT 10
98032: LESS
98033: IFFALSE 98096
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
98035: LD_VAR 0 3
98039: PUSH
98040: LD_VAR 0 1
98044: ARRAY
98045: PPUSH
98046: LD_VAR 0 1
98050: PUSH
98051: LD_INT 4
98053: MOD
98054: PUSH
98055: LD_INT 1
98057: PLUS
98058: PPUSH
98059: LD_VAR 0 3
98063: PUSH
98064: LD_VAR 0 1
98068: ARRAY
98069: PPUSH
98070: LD_VAR 0 1
98074: PUSH
98075: LD_INT 4
98077: MOD
98078: PUSH
98079: LD_INT 1
98081: PLUS
98082: PPUSH
98083: CALL_OW 259
98087: PUSH
98088: LD_INT 1
98090: PLUS
98091: PPUSH
98092: CALL_OW 237
98096: GO 97998
98098: POP
98099: POP
// end ;
98100: PPOPN 3
98102: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
98103: LD_EXP 87
98107: PUSH
98108: LD_EXP 95
98112: AND
98113: IFFALSE 98133
98115: GO 98117
98117: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
98118: LD_INT 4
98120: PPUSH
98121: LD_OWVAR 2
98125: PPUSH
98126: LD_INT 0
98128: PPUSH
98129: CALL_OW 324
98133: END
// every 0 0$1 trigger StreamModeActive and sShovel do
98134: LD_EXP 87
98138: PUSH
98139: LD_EXP 124
98143: AND
98144: IFFALSE 98164
98146: GO 98148
98148: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
98149: LD_INT 19
98151: PPUSH
98152: LD_OWVAR 2
98156: PPUSH
98157: LD_INT 0
98159: PPUSH
98160: CALL_OW 324
98164: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
98165: LD_EXP 87
98169: PUSH
98170: LD_EXP 96
98174: AND
98175: IFFALSE 98277
98177: GO 98179
98179: DISABLE
98180: LD_INT 0
98182: PPUSH
98183: PPUSH
// begin enable ;
98184: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
98185: LD_ADDR_VAR 0 2
98189: PUSH
98190: LD_INT 22
98192: PUSH
98193: LD_OWVAR 2
98197: PUSH
98198: EMPTY
98199: LIST
98200: LIST
98201: PUSH
98202: LD_INT 2
98204: PUSH
98205: LD_INT 34
98207: PUSH
98208: LD_INT 11
98210: PUSH
98211: EMPTY
98212: LIST
98213: LIST
98214: PUSH
98215: LD_INT 34
98217: PUSH
98218: LD_INT 30
98220: PUSH
98221: EMPTY
98222: LIST
98223: LIST
98224: PUSH
98225: EMPTY
98226: LIST
98227: LIST
98228: LIST
98229: PUSH
98230: EMPTY
98231: LIST
98232: LIST
98233: PPUSH
98234: CALL_OW 69
98238: ST_TO_ADDR
// if not tmp then
98239: LD_VAR 0 2
98243: NOT
98244: IFFALSE 98248
// exit ;
98246: GO 98277
// for i in tmp do
98248: LD_ADDR_VAR 0 1
98252: PUSH
98253: LD_VAR 0 2
98257: PUSH
98258: FOR_IN
98259: IFFALSE 98275
// begin SetLives ( i , 0 ) ;
98261: LD_VAR 0 1
98265: PPUSH
98266: LD_INT 0
98268: PPUSH
98269: CALL_OW 234
// end ;
98273: GO 98258
98275: POP
98276: POP
// end ;
98277: PPOPN 2
98279: END
// every 0 0$1 trigger StreamModeActive and sBunker do
98280: LD_EXP 87
98284: PUSH
98285: LD_EXP 97
98289: AND
98290: IFFALSE 98310
98292: GO 98294
98294: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
98295: LD_INT 32
98297: PPUSH
98298: LD_OWVAR 2
98302: PPUSH
98303: LD_INT 0
98305: PPUSH
98306: CALL_OW 324
98310: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
98311: LD_EXP 87
98315: PUSH
98316: LD_EXP 98
98320: AND
98321: IFFALSE 98502
98323: GO 98325
98325: DISABLE
98326: LD_INT 0
98328: PPUSH
98329: PPUSH
98330: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
98331: LD_ADDR_VAR 0 2
98335: PUSH
98336: LD_INT 22
98338: PUSH
98339: LD_OWVAR 2
98343: PUSH
98344: EMPTY
98345: LIST
98346: LIST
98347: PUSH
98348: LD_INT 33
98350: PUSH
98351: LD_INT 3
98353: PUSH
98354: EMPTY
98355: LIST
98356: LIST
98357: PUSH
98358: EMPTY
98359: LIST
98360: LIST
98361: PPUSH
98362: CALL_OW 69
98366: ST_TO_ADDR
// if not tmp then
98367: LD_VAR 0 2
98371: NOT
98372: IFFALSE 98376
// exit ;
98374: GO 98502
// side := 0 ;
98376: LD_ADDR_VAR 0 3
98380: PUSH
98381: LD_INT 0
98383: ST_TO_ADDR
// for i := 1 to 8 do
98384: LD_ADDR_VAR 0 1
98388: PUSH
98389: DOUBLE
98390: LD_INT 1
98392: DEC
98393: ST_TO_ADDR
98394: LD_INT 8
98396: PUSH
98397: FOR_TO
98398: IFFALSE 98446
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
98400: LD_OWVAR 2
98404: PUSH
98405: LD_VAR 0 1
98409: NONEQUAL
98410: PUSH
98411: LD_OWVAR 2
98415: PPUSH
98416: LD_VAR 0 1
98420: PPUSH
98421: CALL_OW 81
98425: PUSH
98426: LD_INT 2
98428: EQUAL
98429: AND
98430: IFFALSE 98444
// begin side := i ;
98432: LD_ADDR_VAR 0 3
98436: PUSH
98437: LD_VAR 0 1
98441: ST_TO_ADDR
// break ;
98442: GO 98446
// end ;
98444: GO 98397
98446: POP
98447: POP
// if not side then
98448: LD_VAR 0 3
98452: NOT
98453: IFFALSE 98457
// exit ;
98455: GO 98502
// for i := 1 to tmp do
98457: LD_ADDR_VAR 0 1
98461: PUSH
98462: DOUBLE
98463: LD_INT 1
98465: DEC
98466: ST_TO_ADDR
98467: LD_VAR 0 2
98471: PUSH
98472: FOR_TO
98473: IFFALSE 98500
// if Prob ( 60 ) then
98475: LD_INT 60
98477: PPUSH
98478: CALL_OW 13
98482: IFFALSE 98498
// SetSide ( i , side ) ;
98484: LD_VAR 0 1
98488: PPUSH
98489: LD_VAR 0 3
98493: PPUSH
98494: CALL_OW 235
98498: GO 98472
98500: POP
98501: POP
// end ;
98502: PPOPN 3
98504: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
98505: LD_EXP 87
98509: PUSH
98510: LD_EXP 100
98514: AND
98515: IFFALSE 98634
98517: GO 98519
98519: DISABLE
98520: LD_INT 0
98522: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
98523: LD_ADDR_VAR 0 1
98527: PUSH
98528: LD_INT 22
98530: PUSH
98531: LD_OWVAR 2
98535: PUSH
98536: EMPTY
98537: LIST
98538: LIST
98539: PUSH
98540: LD_INT 21
98542: PUSH
98543: LD_INT 1
98545: PUSH
98546: EMPTY
98547: LIST
98548: LIST
98549: PUSH
98550: LD_INT 3
98552: PUSH
98553: LD_INT 23
98555: PUSH
98556: LD_INT 0
98558: PUSH
98559: EMPTY
98560: LIST
98561: LIST
98562: PUSH
98563: EMPTY
98564: LIST
98565: LIST
98566: PUSH
98567: EMPTY
98568: LIST
98569: LIST
98570: LIST
98571: PPUSH
98572: CALL_OW 69
98576: PUSH
98577: FOR_IN
98578: IFFALSE 98632
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
98580: LD_VAR 0 1
98584: PPUSH
98585: CALL_OW 257
98589: PUSH
98590: LD_INT 1
98592: PUSH
98593: LD_INT 2
98595: PUSH
98596: LD_INT 3
98598: PUSH
98599: LD_INT 4
98601: PUSH
98602: EMPTY
98603: LIST
98604: LIST
98605: LIST
98606: LIST
98607: IN
98608: IFFALSE 98630
// SetClass ( un , rand ( 1 , 4 ) ) ;
98610: LD_VAR 0 1
98614: PPUSH
98615: LD_INT 1
98617: PPUSH
98618: LD_INT 4
98620: PPUSH
98621: CALL_OW 12
98625: PPUSH
98626: CALL_OW 336
98630: GO 98577
98632: POP
98633: POP
// end ;
98634: PPOPN 1
98636: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
98637: LD_EXP 87
98641: PUSH
98642: LD_EXP 99
98646: AND
98647: IFFALSE 98726
98649: GO 98651
98651: DISABLE
98652: LD_INT 0
98654: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
98655: LD_ADDR_VAR 0 1
98659: PUSH
98660: LD_INT 22
98662: PUSH
98663: LD_OWVAR 2
98667: PUSH
98668: EMPTY
98669: LIST
98670: LIST
98671: PUSH
98672: LD_INT 21
98674: PUSH
98675: LD_INT 3
98677: PUSH
98678: EMPTY
98679: LIST
98680: LIST
98681: PUSH
98682: EMPTY
98683: LIST
98684: LIST
98685: PPUSH
98686: CALL_OW 69
98690: ST_TO_ADDR
// if not tmp then
98691: LD_VAR 0 1
98695: NOT
98696: IFFALSE 98700
// exit ;
98698: GO 98726
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
98700: LD_VAR 0 1
98704: PUSH
98705: LD_INT 1
98707: PPUSH
98708: LD_VAR 0 1
98712: PPUSH
98713: CALL_OW 12
98717: ARRAY
98718: PPUSH
98719: LD_INT 100
98721: PPUSH
98722: CALL_OW 234
// end ;
98726: PPOPN 1
98728: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
98729: LD_EXP 87
98733: PUSH
98734: LD_EXP 101
98738: AND
98739: IFFALSE 98837
98741: GO 98743
98743: DISABLE
98744: LD_INT 0
98746: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
98747: LD_ADDR_VAR 0 1
98751: PUSH
98752: LD_INT 22
98754: PUSH
98755: LD_OWVAR 2
98759: PUSH
98760: EMPTY
98761: LIST
98762: LIST
98763: PUSH
98764: LD_INT 21
98766: PUSH
98767: LD_INT 1
98769: PUSH
98770: EMPTY
98771: LIST
98772: LIST
98773: PUSH
98774: EMPTY
98775: LIST
98776: LIST
98777: PPUSH
98778: CALL_OW 69
98782: ST_TO_ADDR
// if not tmp then
98783: LD_VAR 0 1
98787: NOT
98788: IFFALSE 98792
// exit ;
98790: GO 98837
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
98792: LD_VAR 0 1
98796: PUSH
98797: LD_INT 1
98799: PPUSH
98800: LD_VAR 0 1
98804: PPUSH
98805: CALL_OW 12
98809: ARRAY
98810: PPUSH
98811: LD_INT 1
98813: PPUSH
98814: LD_INT 4
98816: PPUSH
98817: CALL_OW 12
98821: PPUSH
98822: LD_INT 3000
98824: PPUSH
98825: LD_INT 9000
98827: PPUSH
98828: CALL_OW 12
98832: PPUSH
98833: CALL_OW 492
// end ;
98837: PPOPN 1
98839: END
// every 0 0$1 trigger StreamModeActive and sDepot do
98840: LD_EXP 87
98844: PUSH
98845: LD_EXP 102
98849: AND
98850: IFFALSE 98870
98852: GO 98854
98854: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
98855: LD_INT 1
98857: PPUSH
98858: LD_OWVAR 2
98862: PPUSH
98863: LD_INT 0
98865: PPUSH
98866: CALL_OW 324
98870: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
98871: LD_EXP 87
98875: PUSH
98876: LD_EXP 103
98880: AND
98881: IFFALSE 98964
98883: GO 98885
98885: DISABLE
98886: LD_INT 0
98888: PPUSH
98889: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
98890: LD_ADDR_VAR 0 2
98894: PUSH
98895: LD_INT 22
98897: PUSH
98898: LD_OWVAR 2
98902: PUSH
98903: EMPTY
98904: LIST
98905: LIST
98906: PUSH
98907: LD_INT 21
98909: PUSH
98910: LD_INT 3
98912: PUSH
98913: EMPTY
98914: LIST
98915: LIST
98916: PUSH
98917: EMPTY
98918: LIST
98919: LIST
98920: PPUSH
98921: CALL_OW 69
98925: ST_TO_ADDR
// if not tmp then
98926: LD_VAR 0 2
98930: NOT
98931: IFFALSE 98935
// exit ;
98933: GO 98964
// for i in tmp do
98935: LD_ADDR_VAR 0 1
98939: PUSH
98940: LD_VAR 0 2
98944: PUSH
98945: FOR_IN
98946: IFFALSE 98962
// SetBLevel ( i , 10 ) ;
98948: LD_VAR 0 1
98952: PPUSH
98953: LD_INT 10
98955: PPUSH
98956: CALL_OW 241
98960: GO 98945
98962: POP
98963: POP
// end ;
98964: PPOPN 2
98966: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
98967: LD_EXP 87
98971: PUSH
98972: LD_EXP 104
98976: AND
98977: IFFALSE 99088
98979: GO 98981
98981: DISABLE
98982: LD_INT 0
98984: PPUSH
98985: PPUSH
98986: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
98987: LD_ADDR_VAR 0 3
98991: PUSH
98992: LD_INT 22
98994: PUSH
98995: LD_OWVAR 2
98999: PUSH
99000: EMPTY
99001: LIST
99002: LIST
99003: PUSH
99004: LD_INT 25
99006: PUSH
99007: LD_INT 1
99009: PUSH
99010: EMPTY
99011: LIST
99012: LIST
99013: PUSH
99014: EMPTY
99015: LIST
99016: LIST
99017: PPUSH
99018: CALL_OW 69
99022: ST_TO_ADDR
// if not tmp then
99023: LD_VAR 0 3
99027: NOT
99028: IFFALSE 99032
// exit ;
99030: GO 99088
// un := tmp [ rand ( 1 , tmp ) ] ;
99032: LD_ADDR_VAR 0 2
99036: PUSH
99037: LD_VAR 0 3
99041: PUSH
99042: LD_INT 1
99044: PPUSH
99045: LD_VAR 0 3
99049: PPUSH
99050: CALL_OW 12
99054: ARRAY
99055: ST_TO_ADDR
// if Crawls ( un ) then
99056: LD_VAR 0 2
99060: PPUSH
99061: CALL_OW 318
99065: IFFALSE 99076
// ComWalk ( un ) ;
99067: LD_VAR 0 2
99071: PPUSH
99072: CALL_OW 138
// SetClass ( un , class_sniper ) ;
99076: LD_VAR 0 2
99080: PPUSH
99081: LD_INT 5
99083: PPUSH
99084: CALL_OW 336
// end ;
99088: PPOPN 3
99090: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
99091: LD_EXP 87
99095: PUSH
99096: LD_EXP 105
99100: AND
99101: PUSH
99102: LD_OWVAR 67
99106: PUSH
99107: LD_INT 3
99109: LESS
99110: AND
99111: IFFALSE 99130
99113: GO 99115
99115: DISABLE
// Difficulty := Difficulty + 1 ;
99116: LD_ADDR_OWVAR 67
99120: PUSH
99121: LD_OWVAR 67
99125: PUSH
99126: LD_INT 1
99128: PLUS
99129: ST_TO_ADDR
99130: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
99131: LD_EXP 87
99135: PUSH
99136: LD_EXP 106
99140: AND
99141: IFFALSE 99244
99143: GO 99145
99145: DISABLE
99146: LD_INT 0
99148: PPUSH
// begin for i := 1 to 5 do
99149: LD_ADDR_VAR 0 1
99153: PUSH
99154: DOUBLE
99155: LD_INT 1
99157: DEC
99158: ST_TO_ADDR
99159: LD_INT 5
99161: PUSH
99162: FOR_TO
99163: IFFALSE 99242
// begin uc_nation := nation_nature ;
99165: LD_ADDR_OWVAR 21
99169: PUSH
99170: LD_INT 0
99172: ST_TO_ADDR
// uc_side := 0 ;
99173: LD_ADDR_OWVAR 20
99177: PUSH
99178: LD_INT 0
99180: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
99181: LD_ADDR_OWVAR 29
99185: PUSH
99186: LD_INT 12
99188: PUSH
99189: LD_INT 12
99191: PUSH
99192: EMPTY
99193: LIST
99194: LIST
99195: ST_TO_ADDR
// hc_agressivity := 20 ;
99196: LD_ADDR_OWVAR 35
99200: PUSH
99201: LD_INT 20
99203: ST_TO_ADDR
// hc_class := class_tiger ;
99204: LD_ADDR_OWVAR 28
99208: PUSH
99209: LD_INT 14
99211: ST_TO_ADDR
// hc_gallery :=  ;
99212: LD_ADDR_OWVAR 33
99216: PUSH
99217: LD_STRING 
99219: ST_TO_ADDR
// hc_name :=  ;
99220: LD_ADDR_OWVAR 26
99224: PUSH
99225: LD_STRING 
99227: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
99228: CALL_OW 44
99232: PPUSH
99233: LD_INT 0
99235: PPUSH
99236: CALL_OW 51
// end ;
99240: GO 99162
99242: POP
99243: POP
// end ;
99244: PPOPN 1
99246: END
// every 0 0$1 trigger StreamModeActive and sBomb do
99247: LD_EXP 87
99251: PUSH
99252: LD_EXP 107
99256: AND
99257: IFFALSE 99266
99259: GO 99261
99261: DISABLE
// StreamSibBomb ;
99262: CALL 99267 0 0
99266: END
// export function StreamSibBomb ; var i , x , y ; begin
99267: LD_INT 0
99269: PPUSH
99270: PPUSH
99271: PPUSH
99272: PPUSH
// result := false ;
99273: LD_ADDR_VAR 0 1
99277: PUSH
99278: LD_INT 0
99280: ST_TO_ADDR
// for i := 1 to 16 do
99281: LD_ADDR_VAR 0 2
99285: PUSH
99286: DOUBLE
99287: LD_INT 1
99289: DEC
99290: ST_TO_ADDR
99291: LD_INT 16
99293: PUSH
99294: FOR_TO
99295: IFFALSE 99494
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
99297: LD_ADDR_VAR 0 3
99301: PUSH
99302: LD_INT 10
99304: PUSH
99305: LD_INT 20
99307: PUSH
99308: LD_INT 30
99310: PUSH
99311: LD_INT 40
99313: PUSH
99314: LD_INT 50
99316: PUSH
99317: LD_INT 60
99319: PUSH
99320: LD_INT 70
99322: PUSH
99323: LD_INT 80
99325: PUSH
99326: LD_INT 90
99328: PUSH
99329: LD_INT 100
99331: PUSH
99332: LD_INT 110
99334: PUSH
99335: LD_INT 120
99337: PUSH
99338: LD_INT 130
99340: PUSH
99341: LD_INT 140
99343: PUSH
99344: LD_INT 150
99346: PUSH
99347: EMPTY
99348: LIST
99349: LIST
99350: LIST
99351: LIST
99352: LIST
99353: LIST
99354: LIST
99355: LIST
99356: LIST
99357: LIST
99358: LIST
99359: LIST
99360: LIST
99361: LIST
99362: LIST
99363: PUSH
99364: LD_INT 1
99366: PPUSH
99367: LD_INT 15
99369: PPUSH
99370: CALL_OW 12
99374: ARRAY
99375: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
99376: LD_ADDR_VAR 0 4
99380: PUSH
99381: LD_INT 10
99383: PUSH
99384: LD_INT 20
99386: PUSH
99387: LD_INT 30
99389: PUSH
99390: LD_INT 40
99392: PUSH
99393: LD_INT 50
99395: PUSH
99396: LD_INT 60
99398: PUSH
99399: LD_INT 70
99401: PUSH
99402: LD_INT 80
99404: PUSH
99405: LD_INT 90
99407: PUSH
99408: LD_INT 100
99410: PUSH
99411: LD_INT 110
99413: PUSH
99414: LD_INT 120
99416: PUSH
99417: LD_INT 130
99419: PUSH
99420: LD_INT 140
99422: PUSH
99423: LD_INT 150
99425: PUSH
99426: EMPTY
99427: LIST
99428: LIST
99429: LIST
99430: LIST
99431: LIST
99432: LIST
99433: LIST
99434: LIST
99435: LIST
99436: LIST
99437: LIST
99438: LIST
99439: LIST
99440: LIST
99441: LIST
99442: PUSH
99443: LD_INT 1
99445: PPUSH
99446: LD_INT 15
99448: PPUSH
99449: CALL_OW 12
99453: ARRAY
99454: ST_TO_ADDR
// if ValidHex ( x , y ) then
99455: LD_VAR 0 3
99459: PPUSH
99460: LD_VAR 0 4
99464: PPUSH
99465: CALL_OW 488
99469: IFFALSE 99492
// begin result := [ x , y ] ;
99471: LD_ADDR_VAR 0 1
99475: PUSH
99476: LD_VAR 0 3
99480: PUSH
99481: LD_VAR 0 4
99485: PUSH
99486: EMPTY
99487: LIST
99488: LIST
99489: ST_TO_ADDR
// break ;
99490: GO 99494
// end ; end ;
99492: GO 99294
99494: POP
99495: POP
// if result then
99496: LD_VAR 0 1
99500: IFFALSE 99560
// begin ToLua ( playSibBomb() ) ;
99502: LD_STRING playSibBomb()
99504: PPUSH
99505: CALL_OW 559
// wait ( 0 0$14 ) ;
99509: LD_INT 490
99511: PPUSH
99512: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
99516: LD_VAR 0 1
99520: PUSH
99521: LD_INT 1
99523: ARRAY
99524: PPUSH
99525: LD_VAR 0 1
99529: PUSH
99530: LD_INT 2
99532: ARRAY
99533: PPUSH
99534: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
99538: LD_VAR 0 1
99542: PUSH
99543: LD_INT 1
99545: ARRAY
99546: PPUSH
99547: LD_VAR 0 1
99551: PUSH
99552: LD_INT 2
99554: ARRAY
99555: PPUSH
99556: CALL_OW 429
// end ; end ;
99560: LD_VAR 0 1
99564: RET
// every 0 0$1 trigger StreamModeActive and sReset do
99565: LD_EXP 87
99569: PUSH
99570: LD_EXP 109
99574: AND
99575: IFFALSE 99587
99577: GO 99579
99579: DISABLE
// YouLost (  ) ;
99580: LD_STRING 
99582: PPUSH
99583: CALL_OW 104
99587: END
// every 0 0$1 trigger StreamModeActive and sFog do
99588: LD_EXP 87
99592: PUSH
99593: LD_EXP 108
99597: AND
99598: IFFALSE 99612
99600: GO 99602
99602: DISABLE
// FogOff ( your_side ) ;
99603: LD_OWVAR 2
99607: PPUSH
99608: CALL_OW 344
99612: END
// every 0 0$1 trigger StreamModeActive and sSun do
99613: LD_EXP 87
99617: PUSH
99618: LD_EXP 110
99622: AND
99623: IFFALSE 99651
99625: GO 99627
99627: DISABLE
// begin solar_recharge_percent := 0 ;
99628: LD_ADDR_OWVAR 79
99632: PUSH
99633: LD_INT 0
99635: ST_TO_ADDR
// wait ( 5 5$00 ) ;
99636: LD_INT 10500
99638: PPUSH
99639: CALL_OW 67
// solar_recharge_percent := 100 ;
99643: LD_ADDR_OWVAR 79
99647: PUSH
99648: LD_INT 100
99650: ST_TO_ADDR
// end ;
99651: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
99652: LD_EXP 87
99656: PUSH
99657: LD_EXP 111
99661: AND
99662: IFFALSE 99901
99664: GO 99666
99666: DISABLE
99667: LD_INT 0
99669: PPUSH
99670: PPUSH
99671: PPUSH
// begin tmp := [ ] ;
99672: LD_ADDR_VAR 0 3
99676: PUSH
99677: EMPTY
99678: ST_TO_ADDR
// for i := 1 to 6 do
99679: LD_ADDR_VAR 0 1
99683: PUSH
99684: DOUBLE
99685: LD_INT 1
99687: DEC
99688: ST_TO_ADDR
99689: LD_INT 6
99691: PUSH
99692: FOR_TO
99693: IFFALSE 99798
// begin uc_nation := nation_nature ;
99695: LD_ADDR_OWVAR 21
99699: PUSH
99700: LD_INT 0
99702: ST_TO_ADDR
// uc_side := 0 ;
99703: LD_ADDR_OWVAR 20
99707: PUSH
99708: LD_INT 0
99710: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
99711: LD_ADDR_OWVAR 29
99715: PUSH
99716: LD_INT 12
99718: PUSH
99719: LD_INT 12
99721: PUSH
99722: EMPTY
99723: LIST
99724: LIST
99725: ST_TO_ADDR
// hc_agressivity := 20 ;
99726: LD_ADDR_OWVAR 35
99730: PUSH
99731: LD_INT 20
99733: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
99734: LD_ADDR_OWVAR 28
99738: PUSH
99739: LD_INT 17
99741: ST_TO_ADDR
// hc_gallery :=  ;
99742: LD_ADDR_OWVAR 33
99746: PUSH
99747: LD_STRING 
99749: ST_TO_ADDR
// hc_name :=  ;
99750: LD_ADDR_OWVAR 26
99754: PUSH
99755: LD_STRING 
99757: ST_TO_ADDR
// un := CreateHuman ;
99758: LD_ADDR_VAR 0 2
99762: PUSH
99763: CALL_OW 44
99767: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
99768: LD_VAR 0 2
99772: PPUSH
99773: LD_INT 1
99775: PPUSH
99776: CALL_OW 51
// tmp := tmp ^ un ;
99780: LD_ADDR_VAR 0 3
99784: PUSH
99785: LD_VAR 0 3
99789: PUSH
99790: LD_VAR 0 2
99794: ADD
99795: ST_TO_ADDR
// end ;
99796: GO 99692
99798: POP
99799: POP
// repeat wait ( 0 0$1 ) ;
99800: LD_INT 35
99802: PPUSH
99803: CALL_OW 67
// for un in tmp do
99807: LD_ADDR_VAR 0 2
99811: PUSH
99812: LD_VAR 0 3
99816: PUSH
99817: FOR_IN
99818: IFFALSE 99892
// begin if IsDead ( un ) then
99820: LD_VAR 0 2
99824: PPUSH
99825: CALL_OW 301
99829: IFFALSE 99849
// begin tmp := tmp diff un ;
99831: LD_ADDR_VAR 0 3
99835: PUSH
99836: LD_VAR 0 3
99840: PUSH
99841: LD_VAR 0 2
99845: DIFF
99846: ST_TO_ADDR
// continue ;
99847: GO 99817
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
99849: LD_VAR 0 2
99853: PPUSH
99854: LD_INT 3
99856: PUSH
99857: LD_INT 22
99859: PUSH
99860: LD_INT 0
99862: PUSH
99863: EMPTY
99864: LIST
99865: LIST
99866: PUSH
99867: EMPTY
99868: LIST
99869: LIST
99870: PPUSH
99871: CALL_OW 69
99875: PPUSH
99876: LD_VAR 0 2
99880: PPUSH
99881: CALL_OW 74
99885: PPUSH
99886: CALL_OW 115
// end ;
99890: GO 99817
99892: POP
99893: POP
// until not tmp ;
99894: LD_VAR 0 3
99898: NOT
99899: IFFALSE 99800
// end ;
99901: PPOPN 3
99903: END
// every 0 0$1 trigger StreamModeActive and sTroll do
99904: LD_EXP 87
99908: PUSH
99909: LD_EXP 112
99913: AND
99914: IFFALSE 99968
99916: GO 99918
99918: DISABLE
// begin ToLua ( displayTroll(); ) ;
99919: LD_STRING displayTroll();
99921: PPUSH
99922: CALL_OW 559
// wait ( 3 3$00 ) ;
99926: LD_INT 6300
99928: PPUSH
99929: CALL_OW 67
// ToLua ( hideTroll(); ) ;
99933: LD_STRING hideTroll();
99935: PPUSH
99936: CALL_OW 559
// wait ( 1 1$00 ) ;
99940: LD_INT 2100
99942: PPUSH
99943: CALL_OW 67
// ToLua ( displayTroll(); ) ;
99947: LD_STRING displayTroll();
99949: PPUSH
99950: CALL_OW 559
// wait ( 1 1$00 ) ;
99954: LD_INT 2100
99956: PPUSH
99957: CALL_OW 67
// ToLua ( hideTroll(); ) ;
99961: LD_STRING hideTroll();
99963: PPUSH
99964: CALL_OW 559
// end ;
99968: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
99969: LD_EXP 87
99973: PUSH
99974: LD_EXP 113
99978: AND
99979: IFFALSE 100042
99981: GO 99983
99983: DISABLE
99984: LD_INT 0
99986: PPUSH
// begin p := 0 ;
99987: LD_ADDR_VAR 0 1
99991: PUSH
99992: LD_INT 0
99994: ST_TO_ADDR
// repeat game_speed := 1 ;
99995: LD_ADDR_OWVAR 65
99999: PUSH
100000: LD_INT 1
100002: ST_TO_ADDR
// wait ( 0 0$1 ) ;
100003: LD_INT 35
100005: PPUSH
100006: CALL_OW 67
// p := p + 1 ;
100010: LD_ADDR_VAR 0 1
100014: PUSH
100015: LD_VAR 0 1
100019: PUSH
100020: LD_INT 1
100022: PLUS
100023: ST_TO_ADDR
// until p >= 60 ;
100024: LD_VAR 0 1
100028: PUSH
100029: LD_INT 60
100031: GREATEREQUAL
100032: IFFALSE 99995
// game_speed := 4 ;
100034: LD_ADDR_OWVAR 65
100038: PUSH
100039: LD_INT 4
100041: ST_TO_ADDR
// end ;
100042: PPOPN 1
100044: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
100045: LD_EXP 87
100049: PUSH
100050: LD_EXP 114
100054: AND
100055: IFFALSE 100201
100057: GO 100059
100059: DISABLE
100060: LD_INT 0
100062: PPUSH
100063: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
100064: LD_ADDR_VAR 0 1
100068: PUSH
100069: LD_INT 22
100071: PUSH
100072: LD_OWVAR 2
100076: PUSH
100077: EMPTY
100078: LIST
100079: LIST
100080: PUSH
100081: LD_INT 2
100083: PUSH
100084: LD_INT 30
100086: PUSH
100087: LD_INT 0
100089: PUSH
100090: EMPTY
100091: LIST
100092: LIST
100093: PUSH
100094: LD_INT 30
100096: PUSH
100097: LD_INT 1
100099: PUSH
100100: EMPTY
100101: LIST
100102: LIST
100103: PUSH
100104: EMPTY
100105: LIST
100106: LIST
100107: LIST
100108: PUSH
100109: EMPTY
100110: LIST
100111: LIST
100112: PPUSH
100113: CALL_OW 69
100117: ST_TO_ADDR
// if not depot then
100118: LD_VAR 0 1
100122: NOT
100123: IFFALSE 100127
// exit ;
100125: GO 100201
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
100127: LD_ADDR_VAR 0 2
100131: PUSH
100132: LD_VAR 0 1
100136: PUSH
100137: LD_INT 1
100139: PPUSH
100140: LD_VAR 0 1
100144: PPUSH
100145: CALL_OW 12
100149: ARRAY
100150: PPUSH
100151: CALL_OW 274
100155: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
100156: LD_VAR 0 2
100160: PPUSH
100161: LD_INT 1
100163: PPUSH
100164: LD_INT 0
100166: PPUSH
100167: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
100171: LD_VAR 0 2
100175: PPUSH
100176: LD_INT 2
100178: PPUSH
100179: LD_INT 0
100181: PPUSH
100182: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
100186: LD_VAR 0 2
100190: PPUSH
100191: LD_INT 3
100193: PPUSH
100194: LD_INT 0
100196: PPUSH
100197: CALL_OW 277
// end ;
100201: PPOPN 2
100203: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
100204: LD_EXP 87
100208: PUSH
100209: LD_EXP 115
100213: AND
100214: IFFALSE 100311
100216: GO 100218
100218: DISABLE
100219: LD_INT 0
100221: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
100222: LD_ADDR_VAR 0 1
100226: PUSH
100227: LD_INT 22
100229: PUSH
100230: LD_OWVAR 2
100234: PUSH
100235: EMPTY
100236: LIST
100237: LIST
100238: PUSH
100239: LD_INT 21
100241: PUSH
100242: LD_INT 1
100244: PUSH
100245: EMPTY
100246: LIST
100247: LIST
100248: PUSH
100249: LD_INT 3
100251: PUSH
100252: LD_INT 23
100254: PUSH
100255: LD_INT 0
100257: PUSH
100258: EMPTY
100259: LIST
100260: LIST
100261: PUSH
100262: EMPTY
100263: LIST
100264: LIST
100265: PUSH
100266: EMPTY
100267: LIST
100268: LIST
100269: LIST
100270: PPUSH
100271: CALL_OW 69
100275: ST_TO_ADDR
// if not tmp then
100276: LD_VAR 0 1
100280: NOT
100281: IFFALSE 100285
// exit ;
100283: GO 100311
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
100285: LD_VAR 0 1
100289: PUSH
100290: LD_INT 1
100292: PPUSH
100293: LD_VAR 0 1
100297: PPUSH
100298: CALL_OW 12
100302: ARRAY
100303: PPUSH
100304: LD_INT 200
100306: PPUSH
100307: CALL_OW 234
// end ;
100311: PPOPN 1
100313: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
100314: LD_EXP 87
100318: PUSH
100319: LD_EXP 116
100323: AND
100324: IFFALSE 100403
100326: GO 100328
100328: DISABLE
100329: LD_INT 0
100331: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
100332: LD_ADDR_VAR 0 1
100336: PUSH
100337: LD_INT 22
100339: PUSH
100340: LD_OWVAR 2
100344: PUSH
100345: EMPTY
100346: LIST
100347: LIST
100348: PUSH
100349: LD_INT 21
100351: PUSH
100352: LD_INT 2
100354: PUSH
100355: EMPTY
100356: LIST
100357: LIST
100358: PUSH
100359: EMPTY
100360: LIST
100361: LIST
100362: PPUSH
100363: CALL_OW 69
100367: ST_TO_ADDR
// if not tmp then
100368: LD_VAR 0 1
100372: NOT
100373: IFFALSE 100377
// exit ;
100375: GO 100403
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
100377: LD_VAR 0 1
100381: PUSH
100382: LD_INT 1
100384: PPUSH
100385: LD_VAR 0 1
100389: PPUSH
100390: CALL_OW 12
100394: ARRAY
100395: PPUSH
100396: LD_INT 60
100398: PPUSH
100399: CALL_OW 234
// end ;
100403: PPOPN 1
100405: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
100406: LD_EXP 87
100410: PUSH
100411: LD_EXP 117
100415: AND
100416: IFFALSE 100515
100418: GO 100420
100420: DISABLE
100421: LD_INT 0
100423: PPUSH
100424: PPUSH
// begin enable ;
100425: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
100426: LD_ADDR_VAR 0 1
100430: PUSH
100431: LD_INT 22
100433: PUSH
100434: LD_OWVAR 2
100438: PUSH
100439: EMPTY
100440: LIST
100441: LIST
100442: PUSH
100443: LD_INT 61
100445: PUSH
100446: EMPTY
100447: LIST
100448: PUSH
100449: LD_INT 33
100451: PUSH
100452: LD_INT 2
100454: PUSH
100455: EMPTY
100456: LIST
100457: LIST
100458: PUSH
100459: EMPTY
100460: LIST
100461: LIST
100462: LIST
100463: PPUSH
100464: CALL_OW 69
100468: ST_TO_ADDR
// if not tmp then
100469: LD_VAR 0 1
100473: NOT
100474: IFFALSE 100478
// exit ;
100476: GO 100515
// for i in tmp do
100478: LD_ADDR_VAR 0 2
100482: PUSH
100483: LD_VAR 0 1
100487: PUSH
100488: FOR_IN
100489: IFFALSE 100513
// if IsControledBy ( i ) then
100491: LD_VAR 0 2
100495: PPUSH
100496: CALL_OW 312
100500: IFFALSE 100511
// ComUnlink ( i ) ;
100502: LD_VAR 0 2
100506: PPUSH
100507: CALL_OW 136
100511: GO 100488
100513: POP
100514: POP
// end ;
100515: PPOPN 2
100517: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
100518: LD_EXP 87
100522: PUSH
100523: LD_EXP 118
100527: AND
100528: IFFALSE 100668
100530: GO 100532
100532: DISABLE
100533: LD_INT 0
100535: PPUSH
100536: PPUSH
// begin ToLua ( displayPowell(); ) ;
100537: LD_STRING displayPowell();
100539: PPUSH
100540: CALL_OW 559
// uc_side := 0 ;
100544: LD_ADDR_OWVAR 20
100548: PUSH
100549: LD_INT 0
100551: ST_TO_ADDR
// uc_nation := 2 ;
100552: LD_ADDR_OWVAR 21
100556: PUSH
100557: LD_INT 2
100559: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
100560: LD_ADDR_OWVAR 37
100564: PUSH
100565: LD_INT 14
100567: ST_TO_ADDR
// vc_engine := engine_siberite ;
100568: LD_ADDR_OWVAR 39
100572: PUSH
100573: LD_INT 3
100575: ST_TO_ADDR
// vc_control := control_apeman ;
100576: LD_ADDR_OWVAR 38
100580: PUSH
100581: LD_INT 5
100583: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
100584: LD_ADDR_OWVAR 40
100588: PUSH
100589: LD_INT 29
100591: ST_TO_ADDR
// un := CreateVehicle ;
100592: LD_ADDR_VAR 0 2
100596: PUSH
100597: CALL_OW 45
100601: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
100602: LD_VAR 0 2
100606: PPUSH
100607: LD_INT 1
100609: PPUSH
100610: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
100614: LD_INT 35
100616: PPUSH
100617: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
100621: LD_VAR 0 2
100625: PPUSH
100626: LD_INT 22
100628: PUSH
100629: LD_OWVAR 2
100633: PUSH
100634: EMPTY
100635: LIST
100636: LIST
100637: PPUSH
100638: CALL_OW 69
100642: PPUSH
100643: LD_VAR 0 2
100647: PPUSH
100648: CALL_OW 74
100652: PPUSH
100653: CALL_OW 115
// until IsDead ( un ) ;
100657: LD_VAR 0 2
100661: PPUSH
100662: CALL_OW 301
100666: IFFALSE 100614
// end ;
100668: PPOPN 2
100670: END
// every 0 0$1 trigger StreamModeActive and sStu do
100671: LD_EXP 87
100675: PUSH
100676: LD_EXP 126
100680: AND
100681: IFFALSE 100697
100683: GO 100685
100685: DISABLE
// begin ToLua ( displayStucuk(); ) ;
100686: LD_STRING displayStucuk();
100688: PPUSH
100689: CALL_OW 559
// ResetFog ;
100693: CALL_OW 335
// end ;
100697: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
100698: LD_EXP 87
100702: PUSH
100703: LD_EXP 119
100707: AND
100708: IFFALSE 100849
100710: GO 100712
100712: DISABLE
100713: LD_INT 0
100715: PPUSH
100716: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
100717: LD_ADDR_VAR 0 2
100721: PUSH
100722: LD_INT 22
100724: PUSH
100725: LD_OWVAR 2
100729: PUSH
100730: EMPTY
100731: LIST
100732: LIST
100733: PUSH
100734: LD_INT 21
100736: PUSH
100737: LD_INT 1
100739: PUSH
100740: EMPTY
100741: LIST
100742: LIST
100743: PUSH
100744: EMPTY
100745: LIST
100746: LIST
100747: PPUSH
100748: CALL_OW 69
100752: ST_TO_ADDR
// if not tmp then
100753: LD_VAR 0 2
100757: NOT
100758: IFFALSE 100762
// exit ;
100760: GO 100849
// un := tmp [ rand ( 1 , tmp ) ] ;
100762: LD_ADDR_VAR 0 1
100766: PUSH
100767: LD_VAR 0 2
100771: PUSH
100772: LD_INT 1
100774: PPUSH
100775: LD_VAR 0 2
100779: PPUSH
100780: CALL_OW 12
100784: ARRAY
100785: ST_TO_ADDR
// SetSide ( un , 0 ) ;
100786: LD_VAR 0 1
100790: PPUSH
100791: LD_INT 0
100793: PPUSH
100794: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
100798: LD_VAR 0 1
100802: PPUSH
100803: LD_OWVAR 3
100807: PUSH
100808: LD_VAR 0 1
100812: DIFF
100813: PPUSH
100814: LD_VAR 0 1
100818: PPUSH
100819: CALL_OW 74
100823: PPUSH
100824: CALL_OW 115
// wait ( 0 0$20 ) ;
100828: LD_INT 700
100830: PPUSH
100831: CALL_OW 67
// SetSide ( un , your_side ) ;
100835: LD_VAR 0 1
100839: PPUSH
100840: LD_OWVAR 2
100844: PPUSH
100845: CALL_OW 235
// end ;
100849: PPOPN 2
100851: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
100852: LD_EXP 87
100856: PUSH
100857: LD_EXP 120
100861: AND
100862: IFFALSE 100968
100864: GO 100866
100866: DISABLE
100867: LD_INT 0
100869: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
100870: LD_ADDR_VAR 0 1
100874: PUSH
100875: LD_INT 22
100877: PUSH
100878: LD_OWVAR 2
100882: PUSH
100883: EMPTY
100884: LIST
100885: LIST
100886: PUSH
100887: LD_INT 2
100889: PUSH
100890: LD_INT 30
100892: PUSH
100893: LD_INT 0
100895: PUSH
100896: EMPTY
100897: LIST
100898: LIST
100899: PUSH
100900: LD_INT 30
100902: PUSH
100903: LD_INT 1
100905: PUSH
100906: EMPTY
100907: LIST
100908: LIST
100909: PUSH
100910: EMPTY
100911: LIST
100912: LIST
100913: LIST
100914: PUSH
100915: EMPTY
100916: LIST
100917: LIST
100918: PPUSH
100919: CALL_OW 69
100923: ST_TO_ADDR
// if not depot then
100924: LD_VAR 0 1
100928: NOT
100929: IFFALSE 100933
// exit ;
100931: GO 100968
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
100933: LD_VAR 0 1
100937: PUSH
100938: LD_INT 1
100940: ARRAY
100941: PPUSH
100942: CALL_OW 250
100946: PPUSH
100947: LD_VAR 0 1
100951: PUSH
100952: LD_INT 1
100954: ARRAY
100955: PPUSH
100956: CALL_OW 251
100960: PPUSH
100961: LD_INT 70
100963: PPUSH
100964: CALL_OW 495
// end ;
100968: PPOPN 1
100970: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
100971: LD_EXP 87
100975: PUSH
100976: LD_EXP 121
100980: AND
100981: IFFALSE 101192
100983: GO 100985
100985: DISABLE
100986: LD_INT 0
100988: PPUSH
100989: PPUSH
100990: PPUSH
100991: PPUSH
100992: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
100993: LD_ADDR_VAR 0 5
100997: PUSH
100998: LD_INT 22
101000: PUSH
101001: LD_OWVAR 2
101005: PUSH
101006: EMPTY
101007: LIST
101008: LIST
101009: PUSH
101010: LD_INT 21
101012: PUSH
101013: LD_INT 1
101015: PUSH
101016: EMPTY
101017: LIST
101018: LIST
101019: PUSH
101020: EMPTY
101021: LIST
101022: LIST
101023: PPUSH
101024: CALL_OW 69
101028: ST_TO_ADDR
// if not tmp then
101029: LD_VAR 0 5
101033: NOT
101034: IFFALSE 101038
// exit ;
101036: GO 101192
// for i in tmp do
101038: LD_ADDR_VAR 0 1
101042: PUSH
101043: LD_VAR 0 5
101047: PUSH
101048: FOR_IN
101049: IFFALSE 101190
// begin d := rand ( 0 , 5 ) ;
101051: LD_ADDR_VAR 0 4
101055: PUSH
101056: LD_INT 0
101058: PPUSH
101059: LD_INT 5
101061: PPUSH
101062: CALL_OW 12
101066: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
101067: LD_ADDR_VAR 0 2
101071: PUSH
101072: LD_VAR 0 1
101076: PPUSH
101077: CALL_OW 250
101081: PPUSH
101082: LD_VAR 0 4
101086: PPUSH
101087: LD_INT 3
101089: PPUSH
101090: LD_INT 12
101092: PPUSH
101093: CALL_OW 12
101097: PPUSH
101098: CALL_OW 272
101102: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
101103: LD_ADDR_VAR 0 3
101107: PUSH
101108: LD_VAR 0 1
101112: PPUSH
101113: CALL_OW 251
101117: PPUSH
101118: LD_VAR 0 4
101122: PPUSH
101123: LD_INT 3
101125: PPUSH
101126: LD_INT 12
101128: PPUSH
101129: CALL_OW 12
101133: PPUSH
101134: CALL_OW 273
101138: ST_TO_ADDR
// if ValidHex ( x , y ) then
101139: LD_VAR 0 2
101143: PPUSH
101144: LD_VAR 0 3
101148: PPUSH
101149: CALL_OW 488
101153: IFFALSE 101188
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
101155: LD_VAR 0 1
101159: PPUSH
101160: LD_VAR 0 2
101164: PPUSH
101165: LD_VAR 0 3
101169: PPUSH
101170: LD_INT 3
101172: PPUSH
101173: LD_INT 6
101175: PPUSH
101176: CALL_OW 12
101180: PPUSH
101181: LD_INT 1
101183: PPUSH
101184: CALL_OW 483
// end ;
101188: GO 101048
101190: POP
101191: POP
// end ;
101192: PPOPN 5
101194: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
101195: LD_EXP 87
101199: PUSH
101200: LD_EXP 122
101204: AND
101205: IFFALSE 101299
101207: GO 101209
101209: DISABLE
101210: LD_INT 0
101212: PPUSH
101213: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
101214: LD_ADDR_VAR 0 2
101218: PUSH
101219: LD_INT 22
101221: PUSH
101222: LD_OWVAR 2
101226: PUSH
101227: EMPTY
101228: LIST
101229: LIST
101230: PUSH
101231: LD_INT 32
101233: PUSH
101234: LD_INT 1
101236: PUSH
101237: EMPTY
101238: LIST
101239: LIST
101240: PUSH
101241: LD_INT 21
101243: PUSH
101244: LD_INT 2
101246: PUSH
101247: EMPTY
101248: LIST
101249: LIST
101250: PUSH
101251: EMPTY
101252: LIST
101253: LIST
101254: LIST
101255: PPUSH
101256: CALL_OW 69
101260: ST_TO_ADDR
// if not tmp then
101261: LD_VAR 0 2
101265: NOT
101266: IFFALSE 101270
// exit ;
101268: GO 101299
// for i in tmp do
101270: LD_ADDR_VAR 0 1
101274: PUSH
101275: LD_VAR 0 2
101279: PUSH
101280: FOR_IN
101281: IFFALSE 101297
// SetFuel ( i , 0 ) ;
101283: LD_VAR 0 1
101287: PPUSH
101288: LD_INT 0
101290: PPUSH
101291: CALL_OW 240
101295: GO 101280
101297: POP
101298: POP
// end ;
101299: PPOPN 2
101301: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
101302: LD_EXP 87
101306: PUSH
101307: LD_EXP 123
101311: AND
101312: IFFALSE 101378
101314: GO 101316
101316: DISABLE
101317: LD_INT 0
101319: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
101320: LD_ADDR_VAR 0 1
101324: PUSH
101325: LD_INT 22
101327: PUSH
101328: LD_OWVAR 2
101332: PUSH
101333: EMPTY
101334: LIST
101335: LIST
101336: PUSH
101337: LD_INT 30
101339: PUSH
101340: LD_INT 29
101342: PUSH
101343: EMPTY
101344: LIST
101345: LIST
101346: PUSH
101347: EMPTY
101348: LIST
101349: LIST
101350: PPUSH
101351: CALL_OW 69
101355: ST_TO_ADDR
// if not tmp then
101356: LD_VAR 0 1
101360: NOT
101361: IFFALSE 101365
// exit ;
101363: GO 101378
// DestroyUnit ( tmp [ 1 ] ) ;
101365: LD_VAR 0 1
101369: PUSH
101370: LD_INT 1
101372: ARRAY
101373: PPUSH
101374: CALL_OW 65
// end ;
101378: PPOPN 1
101380: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
101381: LD_EXP 87
101385: PUSH
101386: LD_EXP 125
101390: AND
101391: IFFALSE 101520
101393: GO 101395
101395: DISABLE
101396: LD_INT 0
101398: PPUSH
// begin uc_side := 0 ;
101399: LD_ADDR_OWVAR 20
101403: PUSH
101404: LD_INT 0
101406: ST_TO_ADDR
// uc_nation := nation_arabian ;
101407: LD_ADDR_OWVAR 21
101411: PUSH
101412: LD_INT 2
101414: ST_TO_ADDR
// hc_gallery :=  ;
101415: LD_ADDR_OWVAR 33
101419: PUSH
101420: LD_STRING 
101422: ST_TO_ADDR
// hc_name :=  ;
101423: LD_ADDR_OWVAR 26
101427: PUSH
101428: LD_STRING 
101430: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
101431: LD_INT 1
101433: PPUSH
101434: LD_INT 11
101436: PPUSH
101437: LD_INT 10
101439: PPUSH
101440: CALL_OW 380
// un := CreateHuman ;
101444: LD_ADDR_VAR 0 1
101448: PUSH
101449: CALL_OW 44
101453: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
101454: LD_VAR 0 1
101458: PPUSH
101459: LD_INT 1
101461: PPUSH
101462: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
101466: LD_INT 35
101468: PPUSH
101469: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
101473: LD_VAR 0 1
101477: PPUSH
101478: LD_INT 22
101480: PUSH
101481: LD_OWVAR 2
101485: PUSH
101486: EMPTY
101487: LIST
101488: LIST
101489: PPUSH
101490: CALL_OW 69
101494: PPUSH
101495: LD_VAR 0 1
101499: PPUSH
101500: CALL_OW 74
101504: PPUSH
101505: CALL_OW 115
// until IsDead ( un ) ;
101509: LD_VAR 0 1
101513: PPUSH
101514: CALL_OW 301
101518: IFFALSE 101466
// end ;
101520: PPOPN 1
101522: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
101523: LD_EXP 87
101527: PUSH
101528: LD_EXP 127
101532: AND
101533: IFFALSE 101545
101535: GO 101537
101537: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
101538: LD_STRING earthquake(getX(game), 0, 32)
101540: PPUSH
101541: CALL_OW 559
101545: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
101546: LD_EXP 87
101550: PUSH
101551: LD_EXP 128
101555: AND
101556: IFFALSE 101647
101558: GO 101560
101560: DISABLE
101561: LD_INT 0
101563: PPUSH
// begin enable ;
101564: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
101565: LD_ADDR_VAR 0 1
101569: PUSH
101570: LD_INT 22
101572: PUSH
101573: LD_OWVAR 2
101577: PUSH
101578: EMPTY
101579: LIST
101580: LIST
101581: PUSH
101582: LD_INT 21
101584: PUSH
101585: LD_INT 2
101587: PUSH
101588: EMPTY
101589: LIST
101590: LIST
101591: PUSH
101592: LD_INT 33
101594: PUSH
101595: LD_INT 3
101597: PUSH
101598: EMPTY
101599: LIST
101600: LIST
101601: PUSH
101602: EMPTY
101603: LIST
101604: LIST
101605: LIST
101606: PPUSH
101607: CALL_OW 69
101611: ST_TO_ADDR
// if not tmp then
101612: LD_VAR 0 1
101616: NOT
101617: IFFALSE 101621
// exit ;
101619: GO 101647
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
101621: LD_VAR 0 1
101625: PUSH
101626: LD_INT 1
101628: PPUSH
101629: LD_VAR 0 1
101633: PPUSH
101634: CALL_OW 12
101638: ARRAY
101639: PPUSH
101640: LD_INT 1
101642: PPUSH
101643: CALL_OW 234
// end ;
101647: PPOPN 1
101649: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
101650: LD_EXP 87
101654: PUSH
101655: LD_EXP 129
101659: AND
101660: IFFALSE 101801
101662: GO 101664
101664: DISABLE
101665: LD_INT 0
101667: PPUSH
101668: PPUSH
101669: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
101670: LD_ADDR_VAR 0 3
101674: PUSH
101675: LD_INT 22
101677: PUSH
101678: LD_OWVAR 2
101682: PUSH
101683: EMPTY
101684: LIST
101685: LIST
101686: PUSH
101687: LD_INT 25
101689: PUSH
101690: LD_INT 1
101692: PUSH
101693: EMPTY
101694: LIST
101695: LIST
101696: PUSH
101697: EMPTY
101698: LIST
101699: LIST
101700: PPUSH
101701: CALL_OW 69
101705: ST_TO_ADDR
// if not tmp then
101706: LD_VAR 0 3
101710: NOT
101711: IFFALSE 101715
// exit ;
101713: GO 101801
// un := tmp [ rand ( 1 , tmp ) ] ;
101715: LD_ADDR_VAR 0 2
101719: PUSH
101720: LD_VAR 0 3
101724: PUSH
101725: LD_INT 1
101727: PPUSH
101728: LD_VAR 0 3
101732: PPUSH
101733: CALL_OW 12
101737: ARRAY
101738: ST_TO_ADDR
// if Crawls ( un ) then
101739: LD_VAR 0 2
101743: PPUSH
101744: CALL_OW 318
101748: IFFALSE 101759
// ComWalk ( un ) ;
101750: LD_VAR 0 2
101754: PPUSH
101755: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
101759: LD_VAR 0 2
101763: PPUSH
101764: LD_INT 9
101766: PPUSH
101767: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
101771: LD_INT 28
101773: PPUSH
101774: LD_OWVAR 2
101778: PPUSH
101779: LD_INT 2
101781: PPUSH
101782: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
101786: LD_INT 29
101788: PPUSH
101789: LD_OWVAR 2
101793: PPUSH
101794: LD_INT 2
101796: PPUSH
101797: CALL_OW 322
// end ;
101801: PPOPN 3
101803: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
101804: LD_EXP 87
101808: PUSH
101809: LD_EXP 130
101813: AND
101814: IFFALSE 101925
101816: GO 101818
101818: DISABLE
101819: LD_INT 0
101821: PPUSH
101822: PPUSH
101823: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
101824: LD_ADDR_VAR 0 3
101828: PUSH
101829: LD_INT 22
101831: PUSH
101832: LD_OWVAR 2
101836: PUSH
101837: EMPTY
101838: LIST
101839: LIST
101840: PUSH
101841: LD_INT 25
101843: PUSH
101844: LD_INT 1
101846: PUSH
101847: EMPTY
101848: LIST
101849: LIST
101850: PUSH
101851: EMPTY
101852: LIST
101853: LIST
101854: PPUSH
101855: CALL_OW 69
101859: ST_TO_ADDR
// if not tmp then
101860: LD_VAR 0 3
101864: NOT
101865: IFFALSE 101869
// exit ;
101867: GO 101925
// un := tmp [ rand ( 1 , tmp ) ] ;
101869: LD_ADDR_VAR 0 2
101873: PUSH
101874: LD_VAR 0 3
101878: PUSH
101879: LD_INT 1
101881: PPUSH
101882: LD_VAR 0 3
101886: PPUSH
101887: CALL_OW 12
101891: ARRAY
101892: ST_TO_ADDR
// if Crawls ( un ) then
101893: LD_VAR 0 2
101897: PPUSH
101898: CALL_OW 318
101902: IFFALSE 101913
// ComWalk ( un ) ;
101904: LD_VAR 0 2
101908: PPUSH
101909: CALL_OW 138
// SetClass ( un , class_mortar ) ;
101913: LD_VAR 0 2
101917: PPUSH
101918: LD_INT 8
101920: PPUSH
101921: CALL_OW 336
// end ;
101925: PPOPN 3
101927: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
101928: LD_EXP 87
101932: PUSH
101933: LD_EXP 131
101937: AND
101938: IFFALSE 102082
101940: GO 101942
101942: DISABLE
101943: LD_INT 0
101945: PPUSH
101946: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
101947: LD_ADDR_VAR 0 2
101951: PUSH
101952: LD_INT 22
101954: PUSH
101955: LD_OWVAR 2
101959: PUSH
101960: EMPTY
101961: LIST
101962: LIST
101963: PUSH
101964: LD_INT 21
101966: PUSH
101967: LD_INT 2
101969: PUSH
101970: EMPTY
101971: LIST
101972: LIST
101973: PUSH
101974: LD_INT 2
101976: PUSH
101977: LD_INT 34
101979: PUSH
101980: LD_INT 12
101982: PUSH
101983: EMPTY
101984: LIST
101985: LIST
101986: PUSH
101987: LD_INT 34
101989: PUSH
101990: LD_INT 51
101992: PUSH
101993: EMPTY
101994: LIST
101995: LIST
101996: PUSH
101997: LD_INT 34
101999: PUSH
102000: LD_INT 32
102002: PUSH
102003: EMPTY
102004: LIST
102005: LIST
102006: PUSH
102007: EMPTY
102008: LIST
102009: LIST
102010: LIST
102011: LIST
102012: PUSH
102013: EMPTY
102014: LIST
102015: LIST
102016: LIST
102017: PPUSH
102018: CALL_OW 69
102022: ST_TO_ADDR
// if not tmp then
102023: LD_VAR 0 2
102027: NOT
102028: IFFALSE 102032
// exit ;
102030: GO 102082
// for i in tmp do
102032: LD_ADDR_VAR 0 1
102036: PUSH
102037: LD_VAR 0 2
102041: PUSH
102042: FOR_IN
102043: IFFALSE 102080
// if GetCargo ( i , mat_artifact ) = 0 then
102045: LD_VAR 0 1
102049: PPUSH
102050: LD_INT 4
102052: PPUSH
102053: CALL_OW 289
102057: PUSH
102058: LD_INT 0
102060: EQUAL
102061: IFFALSE 102078
// SetCargo ( i , mat_siberit , 100 ) ;
102063: LD_VAR 0 1
102067: PPUSH
102068: LD_INT 3
102070: PPUSH
102071: LD_INT 100
102073: PPUSH
102074: CALL_OW 290
102078: GO 102042
102080: POP
102081: POP
// end ;
102082: PPOPN 2
102084: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
102085: LD_EXP 87
102089: PUSH
102090: LD_EXP 132
102094: AND
102095: IFFALSE 102248
102097: GO 102099
102099: DISABLE
102100: LD_INT 0
102102: PPUSH
102103: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
102104: LD_ADDR_VAR 0 2
102108: PUSH
102109: LD_INT 22
102111: PUSH
102112: LD_OWVAR 2
102116: PUSH
102117: EMPTY
102118: LIST
102119: LIST
102120: PPUSH
102121: CALL_OW 69
102125: ST_TO_ADDR
// if not tmp then
102126: LD_VAR 0 2
102130: NOT
102131: IFFALSE 102135
// exit ;
102133: GO 102248
// for i := 1 to 2 do
102135: LD_ADDR_VAR 0 1
102139: PUSH
102140: DOUBLE
102141: LD_INT 1
102143: DEC
102144: ST_TO_ADDR
102145: LD_INT 2
102147: PUSH
102148: FOR_TO
102149: IFFALSE 102246
// begin uc_side := your_side ;
102151: LD_ADDR_OWVAR 20
102155: PUSH
102156: LD_OWVAR 2
102160: ST_TO_ADDR
// uc_nation := nation_american ;
102161: LD_ADDR_OWVAR 21
102165: PUSH
102166: LD_INT 1
102168: ST_TO_ADDR
// vc_chassis := us_morphling ;
102169: LD_ADDR_OWVAR 37
102173: PUSH
102174: LD_INT 5
102176: ST_TO_ADDR
// vc_engine := engine_siberite ;
102177: LD_ADDR_OWVAR 39
102181: PUSH
102182: LD_INT 3
102184: ST_TO_ADDR
// vc_control := control_computer ;
102185: LD_ADDR_OWVAR 38
102189: PUSH
102190: LD_INT 3
102192: ST_TO_ADDR
// vc_weapon := us_double_laser ;
102193: LD_ADDR_OWVAR 40
102197: PUSH
102198: LD_INT 10
102200: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) ;
102201: CALL_OW 45
102205: PPUSH
102206: LD_VAR 0 2
102210: PUSH
102211: LD_INT 1
102213: ARRAY
102214: PPUSH
102215: CALL_OW 250
102219: PPUSH
102220: LD_VAR 0 2
102224: PUSH
102225: LD_INT 1
102227: ARRAY
102228: PPUSH
102229: CALL_OW 251
102233: PPUSH
102234: LD_INT 12
102236: PPUSH
102237: LD_INT 1
102239: PPUSH
102240: CALL_OW 50
// end ;
102244: GO 102148
102246: POP
102247: POP
// end ;
102248: PPOPN 2
102250: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
102251: LD_EXP 87
102255: PUSH
102256: LD_EXP 133
102260: AND
102261: IFFALSE 102483
102263: GO 102265
102265: DISABLE
102266: LD_INT 0
102268: PPUSH
102269: PPUSH
102270: PPUSH
102271: PPUSH
102272: PPUSH
102273: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
102274: LD_ADDR_VAR 0 6
102278: PUSH
102279: LD_INT 22
102281: PUSH
102282: LD_OWVAR 2
102286: PUSH
102287: EMPTY
102288: LIST
102289: LIST
102290: PUSH
102291: LD_INT 21
102293: PUSH
102294: LD_INT 1
102296: PUSH
102297: EMPTY
102298: LIST
102299: LIST
102300: PUSH
102301: LD_INT 3
102303: PUSH
102304: LD_INT 23
102306: PUSH
102307: LD_INT 0
102309: PUSH
102310: EMPTY
102311: LIST
102312: LIST
102313: PUSH
102314: EMPTY
102315: LIST
102316: LIST
102317: PUSH
102318: EMPTY
102319: LIST
102320: LIST
102321: LIST
102322: PPUSH
102323: CALL_OW 69
102327: ST_TO_ADDR
// if not tmp then
102328: LD_VAR 0 6
102332: NOT
102333: IFFALSE 102337
// exit ;
102335: GO 102483
// s1 := rand ( 1 , 4 ) ;
102337: LD_ADDR_VAR 0 2
102341: PUSH
102342: LD_INT 1
102344: PPUSH
102345: LD_INT 4
102347: PPUSH
102348: CALL_OW 12
102352: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
102353: LD_ADDR_VAR 0 4
102357: PUSH
102358: LD_VAR 0 6
102362: PUSH
102363: LD_INT 1
102365: ARRAY
102366: PPUSH
102367: LD_VAR 0 2
102371: PPUSH
102372: CALL_OW 259
102376: ST_TO_ADDR
// if s1 = 1 then
102377: LD_VAR 0 2
102381: PUSH
102382: LD_INT 1
102384: EQUAL
102385: IFFALSE 102405
// s2 := rand ( 2 , 4 ) else
102387: LD_ADDR_VAR 0 3
102391: PUSH
102392: LD_INT 2
102394: PPUSH
102395: LD_INT 4
102397: PPUSH
102398: CALL_OW 12
102402: ST_TO_ADDR
102403: GO 102413
// s2 := 1 ;
102405: LD_ADDR_VAR 0 3
102409: PUSH
102410: LD_INT 1
102412: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
102413: LD_ADDR_VAR 0 5
102417: PUSH
102418: LD_VAR 0 6
102422: PUSH
102423: LD_INT 1
102425: ARRAY
102426: PPUSH
102427: LD_VAR 0 3
102431: PPUSH
102432: CALL_OW 259
102436: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
102437: LD_VAR 0 6
102441: PUSH
102442: LD_INT 1
102444: ARRAY
102445: PPUSH
102446: LD_VAR 0 2
102450: PPUSH
102451: LD_VAR 0 5
102455: PPUSH
102456: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
102460: LD_VAR 0 6
102464: PUSH
102465: LD_INT 1
102467: ARRAY
102468: PPUSH
102469: LD_VAR 0 3
102473: PPUSH
102474: LD_VAR 0 4
102478: PPUSH
102479: CALL_OW 237
// end ;
102483: PPOPN 6
102485: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
102486: LD_EXP 87
102490: PUSH
102491: LD_EXP 134
102495: AND
102496: IFFALSE 102575
102498: GO 102500
102500: DISABLE
102501: LD_INT 0
102503: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
102504: LD_ADDR_VAR 0 1
102508: PUSH
102509: LD_INT 22
102511: PUSH
102512: LD_OWVAR 2
102516: PUSH
102517: EMPTY
102518: LIST
102519: LIST
102520: PUSH
102521: LD_INT 30
102523: PUSH
102524: LD_INT 3
102526: PUSH
102527: EMPTY
102528: LIST
102529: LIST
102530: PUSH
102531: EMPTY
102532: LIST
102533: LIST
102534: PPUSH
102535: CALL_OW 69
102539: ST_TO_ADDR
// if not tmp then
102540: LD_VAR 0 1
102544: NOT
102545: IFFALSE 102549
// exit ;
102547: GO 102575
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
102549: LD_VAR 0 1
102553: PUSH
102554: LD_INT 1
102556: PPUSH
102557: LD_VAR 0 1
102561: PPUSH
102562: CALL_OW 12
102566: ARRAY
102567: PPUSH
102568: LD_INT 1
102570: PPUSH
102571: CALL_OW 234
// end ;
102575: PPOPN 1
102577: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
102578: LD_EXP 87
102582: PUSH
102583: LD_EXP 135
102587: AND
102588: IFFALSE 102700
102590: GO 102592
102592: DISABLE
102593: LD_INT 0
102595: PPUSH
102596: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
102597: LD_ADDR_VAR 0 2
102601: PUSH
102602: LD_INT 22
102604: PUSH
102605: LD_OWVAR 2
102609: PUSH
102610: EMPTY
102611: LIST
102612: LIST
102613: PUSH
102614: LD_INT 2
102616: PUSH
102617: LD_INT 30
102619: PUSH
102620: LD_INT 27
102622: PUSH
102623: EMPTY
102624: LIST
102625: LIST
102626: PUSH
102627: LD_INT 30
102629: PUSH
102630: LD_INT 26
102632: PUSH
102633: EMPTY
102634: LIST
102635: LIST
102636: PUSH
102637: LD_INT 30
102639: PUSH
102640: LD_INT 28
102642: PUSH
102643: EMPTY
102644: LIST
102645: LIST
102646: PUSH
102647: EMPTY
102648: LIST
102649: LIST
102650: LIST
102651: LIST
102652: PUSH
102653: EMPTY
102654: LIST
102655: LIST
102656: PPUSH
102657: CALL_OW 69
102661: ST_TO_ADDR
// if not tmp then
102662: LD_VAR 0 2
102666: NOT
102667: IFFALSE 102671
// exit ;
102669: GO 102700
// for i in tmp do
102671: LD_ADDR_VAR 0 1
102675: PUSH
102676: LD_VAR 0 2
102680: PUSH
102681: FOR_IN
102682: IFFALSE 102698
// SetLives ( i , 1 ) ;
102684: LD_VAR 0 1
102688: PPUSH
102689: LD_INT 1
102691: PPUSH
102692: CALL_OW 234
102696: GO 102681
102698: POP
102699: POP
// end ;
102700: PPOPN 2
102702: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
102703: LD_EXP 87
102707: PUSH
102708: LD_EXP 136
102712: AND
102713: IFFALSE 102987
102715: GO 102717
102717: DISABLE
102718: LD_INT 0
102720: PPUSH
102721: PPUSH
102722: PPUSH
// begin i := rand ( 1 , 7 ) ;
102723: LD_ADDR_VAR 0 1
102727: PUSH
102728: LD_INT 1
102730: PPUSH
102731: LD_INT 7
102733: PPUSH
102734: CALL_OW 12
102738: ST_TO_ADDR
// case i of 1 :
102739: LD_VAR 0 1
102743: PUSH
102744: LD_INT 1
102746: DOUBLE
102747: EQUAL
102748: IFTRUE 102752
102750: GO 102762
102752: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
102753: LD_STRING earthquake(getX(game), 0, 32)
102755: PPUSH
102756: CALL_OW 559
102760: GO 102987
102762: LD_INT 2
102764: DOUBLE
102765: EQUAL
102766: IFTRUE 102770
102768: GO 102784
102770: POP
// begin ToLua ( displayStucuk(); ) ;
102771: LD_STRING displayStucuk();
102773: PPUSH
102774: CALL_OW 559
// ResetFog ;
102778: CALL_OW 335
// end ; 3 :
102782: GO 102987
102784: LD_INT 3
102786: DOUBLE
102787: EQUAL
102788: IFTRUE 102792
102790: GO 102896
102792: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
102793: LD_ADDR_VAR 0 2
102797: PUSH
102798: LD_INT 22
102800: PUSH
102801: LD_OWVAR 2
102805: PUSH
102806: EMPTY
102807: LIST
102808: LIST
102809: PUSH
102810: LD_INT 25
102812: PUSH
102813: LD_INT 1
102815: PUSH
102816: EMPTY
102817: LIST
102818: LIST
102819: PUSH
102820: EMPTY
102821: LIST
102822: LIST
102823: PPUSH
102824: CALL_OW 69
102828: ST_TO_ADDR
// if not tmp then
102829: LD_VAR 0 2
102833: NOT
102834: IFFALSE 102838
// exit ;
102836: GO 102987
// un := tmp [ rand ( 1 , tmp ) ] ;
102838: LD_ADDR_VAR 0 3
102842: PUSH
102843: LD_VAR 0 2
102847: PUSH
102848: LD_INT 1
102850: PPUSH
102851: LD_VAR 0 2
102855: PPUSH
102856: CALL_OW 12
102860: ARRAY
102861: ST_TO_ADDR
// if Crawls ( un ) then
102862: LD_VAR 0 3
102866: PPUSH
102867: CALL_OW 318
102871: IFFALSE 102882
// ComWalk ( un ) ;
102873: LD_VAR 0 3
102877: PPUSH
102878: CALL_OW 138
// SetClass ( un , class_mortar ) ;
102882: LD_VAR 0 3
102886: PPUSH
102887: LD_INT 8
102889: PPUSH
102890: CALL_OW 336
// end ; 4 :
102894: GO 102987
102896: LD_INT 4
102898: DOUBLE
102899: EQUAL
102900: IFTRUE 102904
102902: GO 102965
102904: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
102905: LD_ADDR_VAR 0 2
102909: PUSH
102910: LD_INT 22
102912: PUSH
102913: LD_OWVAR 2
102917: PUSH
102918: EMPTY
102919: LIST
102920: LIST
102921: PUSH
102922: LD_INT 30
102924: PUSH
102925: LD_INT 29
102927: PUSH
102928: EMPTY
102929: LIST
102930: LIST
102931: PUSH
102932: EMPTY
102933: LIST
102934: LIST
102935: PPUSH
102936: CALL_OW 69
102940: ST_TO_ADDR
// if not tmp then
102941: LD_VAR 0 2
102945: NOT
102946: IFFALSE 102950
// exit ;
102948: GO 102987
// DestroyUnit ( tmp [ 1 ] ) ;
102950: LD_VAR 0 2
102954: PUSH
102955: LD_INT 1
102957: ARRAY
102958: PPUSH
102959: CALL_OW 65
// end ; 5 .. 7 :
102963: GO 102987
102965: LD_INT 5
102967: DOUBLE
102968: GREATEREQUAL
102969: IFFALSE 102977
102971: LD_INT 7
102973: DOUBLE
102974: LESSEQUAL
102975: IFTRUE 102979
102977: GO 102986
102979: POP
// StreamSibBomb ; end ;
102980: CALL 99267 0 0
102984: GO 102987
102986: POP
// end ;
102987: PPOPN 3
102989: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
102990: LD_EXP 87
102994: PUSH
102995: LD_EXP 137
102999: AND
103000: IFFALSE 103156
103002: GO 103004
103004: DISABLE
103005: LD_INT 0
103007: PPUSH
103008: PPUSH
103009: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
103010: LD_ADDR_VAR 0 2
103014: PUSH
103015: LD_INT 81
103017: PUSH
103018: LD_OWVAR 2
103022: PUSH
103023: EMPTY
103024: LIST
103025: LIST
103026: PUSH
103027: LD_INT 2
103029: PUSH
103030: LD_INT 21
103032: PUSH
103033: LD_INT 1
103035: PUSH
103036: EMPTY
103037: LIST
103038: LIST
103039: PUSH
103040: LD_INT 21
103042: PUSH
103043: LD_INT 2
103045: PUSH
103046: EMPTY
103047: LIST
103048: LIST
103049: PUSH
103050: EMPTY
103051: LIST
103052: LIST
103053: LIST
103054: PUSH
103055: EMPTY
103056: LIST
103057: LIST
103058: PPUSH
103059: CALL_OW 69
103063: ST_TO_ADDR
// if not tmp then
103064: LD_VAR 0 2
103068: NOT
103069: IFFALSE 103073
// exit ;
103071: GO 103156
// p := 0 ;
103073: LD_ADDR_VAR 0 3
103077: PUSH
103078: LD_INT 0
103080: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
103081: LD_INT 35
103083: PPUSH
103084: CALL_OW 67
// p := p + 1 ;
103088: LD_ADDR_VAR 0 3
103092: PUSH
103093: LD_VAR 0 3
103097: PUSH
103098: LD_INT 1
103100: PLUS
103101: ST_TO_ADDR
// for i in tmp do
103102: LD_ADDR_VAR 0 1
103106: PUSH
103107: LD_VAR 0 2
103111: PUSH
103112: FOR_IN
103113: IFFALSE 103144
// if GetLives ( i ) < 1000 then
103115: LD_VAR 0 1
103119: PPUSH
103120: CALL_OW 256
103124: PUSH
103125: LD_INT 1000
103127: LESS
103128: IFFALSE 103142
// SetLives ( i , 1000 ) ;
103130: LD_VAR 0 1
103134: PPUSH
103135: LD_INT 1000
103137: PPUSH
103138: CALL_OW 234
103142: GO 103112
103144: POP
103145: POP
// until p > 20 ;
103146: LD_VAR 0 3
103150: PUSH
103151: LD_INT 20
103153: GREATER
103154: IFFALSE 103081
// end ;
103156: PPOPN 3
103158: END
// every 0 0$1 trigger StreamModeActive and sTime do
103159: LD_EXP 87
103163: PUSH
103164: LD_EXP 138
103168: AND
103169: IFFALSE 103204
103171: GO 103173
103173: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
103174: LD_INT 28
103176: PPUSH
103177: LD_OWVAR 2
103181: PPUSH
103182: LD_INT 2
103184: PPUSH
103185: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
103189: LD_INT 30
103191: PPUSH
103192: LD_OWVAR 2
103196: PPUSH
103197: LD_INT 2
103199: PPUSH
103200: CALL_OW 322
// end ;
103204: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
103205: LD_EXP 87
103209: PUSH
103210: LD_EXP 139
103214: AND
103215: IFFALSE 103336
103217: GO 103219
103219: DISABLE
103220: LD_INT 0
103222: PPUSH
103223: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
103224: LD_ADDR_VAR 0 2
103228: PUSH
103229: LD_INT 22
103231: PUSH
103232: LD_OWVAR 2
103236: PUSH
103237: EMPTY
103238: LIST
103239: LIST
103240: PUSH
103241: LD_INT 21
103243: PUSH
103244: LD_INT 1
103246: PUSH
103247: EMPTY
103248: LIST
103249: LIST
103250: PUSH
103251: LD_INT 3
103253: PUSH
103254: LD_INT 23
103256: PUSH
103257: LD_INT 0
103259: PUSH
103260: EMPTY
103261: LIST
103262: LIST
103263: PUSH
103264: EMPTY
103265: LIST
103266: LIST
103267: PUSH
103268: EMPTY
103269: LIST
103270: LIST
103271: LIST
103272: PPUSH
103273: CALL_OW 69
103277: ST_TO_ADDR
// if not tmp then
103278: LD_VAR 0 2
103282: NOT
103283: IFFALSE 103287
// exit ;
103285: GO 103336
// for i in tmp do
103287: LD_ADDR_VAR 0 1
103291: PUSH
103292: LD_VAR 0 2
103296: PUSH
103297: FOR_IN
103298: IFFALSE 103334
// begin if Crawls ( i ) then
103300: LD_VAR 0 1
103304: PPUSH
103305: CALL_OW 318
103309: IFFALSE 103320
// ComWalk ( i ) ;
103311: LD_VAR 0 1
103315: PPUSH
103316: CALL_OW 138
// SetClass ( i , 2 ) ;
103320: LD_VAR 0 1
103324: PPUSH
103325: LD_INT 2
103327: PPUSH
103328: CALL_OW 336
// end ;
103332: GO 103297
103334: POP
103335: POP
// end ;
103336: PPOPN 2
103338: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
103339: LD_EXP 87
103343: PUSH
103344: LD_EXP 140
103348: AND
103349: IFFALSE 103630
103351: GO 103353
103353: DISABLE
103354: LD_INT 0
103356: PPUSH
103357: PPUSH
103358: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
103359: LD_OWVAR 2
103363: PPUSH
103364: LD_INT 9
103366: PPUSH
103367: LD_INT 1
103369: PPUSH
103370: LD_INT 1
103372: PPUSH
103373: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
103377: LD_INT 9
103379: PPUSH
103380: LD_OWVAR 2
103384: PPUSH
103385: CALL_OW 343
// uc_side := 9 ;
103389: LD_ADDR_OWVAR 20
103393: PUSH
103394: LD_INT 9
103396: ST_TO_ADDR
// uc_nation := 2 ;
103397: LD_ADDR_OWVAR 21
103401: PUSH
103402: LD_INT 2
103404: ST_TO_ADDR
// hc_name := Dark Warrior ;
103405: LD_ADDR_OWVAR 26
103409: PUSH
103410: LD_STRING Dark Warrior
103412: ST_TO_ADDR
// hc_gallery :=  ;
103413: LD_ADDR_OWVAR 33
103417: PUSH
103418: LD_STRING 
103420: ST_TO_ADDR
// hc_noskilllimit := true ;
103421: LD_ADDR_OWVAR 76
103425: PUSH
103426: LD_INT 1
103428: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
103429: LD_ADDR_OWVAR 31
103433: PUSH
103434: LD_INT 30
103436: PUSH
103437: LD_INT 30
103439: PUSH
103440: LD_INT 30
103442: PUSH
103443: LD_INT 30
103445: PUSH
103446: EMPTY
103447: LIST
103448: LIST
103449: LIST
103450: LIST
103451: ST_TO_ADDR
// un := CreateHuman ;
103452: LD_ADDR_VAR 0 3
103456: PUSH
103457: CALL_OW 44
103461: ST_TO_ADDR
// hc_noskilllimit := false ;
103462: LD_ADDR_OWVAR 76
103466: PUSH
103467: LD_INT 0
103469: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
103470: LD_VAR 0 3
103474: PPUSH
103475: LD_INT 1
103477: PPUSH
103478: CALL_OW 51
// p := 0 ;
103482: LD_ADDR_VAR 0 2
103486: PUSH
103487: LD_INT 0
103489: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
103490: LD_INT 35
103492: PPUSH
103493: CALL_OW 67
// p := p + 1 ;
103497: LD_ADDR_VAR 0 2
103501: PUSH
103502: LD_VAR 0 2
103506: PUSH
103507: LD_INT 1
103509: PLUS
103510: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
103511: LD_VAR 0 3
103515: PPUSH
103516: CALL_OW 256
103520: PUSH
103521: LD_INT 1000
103523: LESS
103524: IFFALSE 103538
// SetLives ( un , 1000 ) ;
103526: LD_VAR 0 3
103530: PPUSH
103531: LD_INT 1000
103533: PPUSH
103534: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
103538: LD_VAR 0 3
103542: PPUSH
103543: LD_INT 81
103545: PUSH
103546: LD_OWVAR 2
103550: PUSH
103551: EMPTY
103552: LIST
103553: LIST
103554: PUSH
103555: LD_INT 91
103557: PUSH
103558: LD_VAR 0 3
103562: PUSH
103563: LD_INT 30
103565: PUSH
103566: EMPTY
103567: LIST
103568: LIST
103569: LIST
103570: PUSH
103571: EMPTY
103572: LIST
103573: LIST
103574: PPUSH
103575: CALL_OW 69
103579: PPUSH
103580: LD_VAR 0 3
103584: PPUSH
103585: CALL_OW 74
103589: PPUSH
103590: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
103594: LD_VAR 0 2
103598: PUSH
103599: LD_INT 60
103601: GREATER
103602: PUSH
103603: LD_VAR 0 3
103607: PPUSH
103608: CALL_OW 301
103612: OR
103613: IFFALSE 103490
// if un then
103615: LD_VAR 0 3
103619: IFFALSE 103630
// RemoveUnit ( un ) ;
103621: LD_VAR 0 3
103625: PPUSH
103626: CALL_OW 64
// end ; end_of_file
103630: PPOPN 3
103632: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
103633: LD_INT 0
103635: PPUSH
103636: PPUSH
103637: PPUSH
103638: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
103639: LD_VAR 0 1
103643: PPUSH
103644: CALL_OW 264
103648: PUSH
103649: LD_EXP 33
103653: EQUAL
103654: IFFALSE 103726
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
103656: LD_INT 68
103658: PPUSH
103659: LD_VAR 0 1
103663: PPUSH
103664: CALL_OW 255
103668: PPUSH
103669: CALL_OW 321
103673: PUSH
103674: LD_INT 2
103676: EQUAL
103677: IFFALSE 103689
// eff := 70 else
103679: LD_ADDR_VAR 0 4
103683: PUSH
103684: LD_INT 70
103686: ST_TO_ADDR
103687: GO 103697
// eff := 30 ;
103689: LD_ADDR_VAR 0 4
103693: PUSH
103694: LD_INT 30
103696: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
103697: LD_VAR 0 1
103701: PPUSH
103702: CALL_OW 250
103706: PPUSH
103707: LD_VAR 0 1
103711: PPUSH
103712: CALL_OW 251
103716: PPUSH
103717: LD_VAR 0 4
103721: PPUSH
103722: CALL_OW 495
// end ; end ;
103726: LD_VAR 0 2
103730: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
103731: LD_INT 0
103733: PPUSH
// end ;
103734: LD_VAR 0 4
103738: RET
// export function SOS_Command ( cmd ) ; begin
103739: LD_INT 0
103741: PPUSH
// end ;
103742: LD_VAR 0 2
103746: RET
// on TargetableSAIL ( cmd , unit , selectedunit , x , y ) do begin if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
103747: LD_VAR 0 1
103751: PUSH
103752: LD_INT 255
103754: EQUAL
103755: PUSH
103756: LD_VAR 0 2
103760: PPUSH
103761: CALL_OW 264
103765: PUSH
103766: LD_INT 14
103768: PUSH
103769: LD_INT 53
103771: PUSH
103772: EMPTY
103773: LIST
103774: LIST
103775: IN
103776: AND
103777: PUSH
103778: LD_VAR 0 4
103782: PPUSH
103783: LD_VAR 0 5
103787: PPUSH
103788: CALL_OW 488
103792: AND
103793: IFFALSE 103817
// CutTreeXYR ( unit , x , y , 12 ) ;
103795: LD_VAR 0 2
103799: PPUSH
103800: LD_VAR 0 4
103804: PPUSH
103805: LD_VAR 0 5
103809: PPUSH
103810: LD_INT 12
103812: PPUSH
103813: CALL 103820 0 4
// end ;
103817: PPOPN 5
103819: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
103820: LD_INT 0
103822: PPUSH
103823: PPUSH
103824: PPUSH
103825: PPUSH
103826: PPUSH
103827: PPUSH
103828: PPUSH
103829: PPUSH
103830: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
103831: LD_VAR 0 1
103835: NOT
103836: PUSH
103837: LD_VAR 0 2
103841: PPUSH
103842: LD_VAR 0 3
103846: PPUSH
103847: CALL_OW 488
103851: NOT
103852: OR
103853: PUSH
103854: LD_VAR 0 4
103858: NOT
103859: OR
103860: IFFALSE 103864
// exit ;
103862: GO 104204
// list := [ ] ;
103864: LD_ADDR_VAR 0 13
103868: PUSH
103869: EMPTY
103870: ST_TO_ADDR
// if x - r < 0 then
103871: LD_VAR 0 2
103875: PUSH
103876: LD_VAR 0 4
103880: MINUS
103881: PUSH
103882: LD_INT 0
103884: LESS
103885: IFFALSE 103897
// min_x := 0 else
103887: LD_ADDR_VAR 0 7
103891: PUSH
103892: LD_INT 0
103894: ST_TO_ADDR
103895: GO 103913
// min_x := x - r ;
103897: LD_ADDR_VAR 0 7
103901: PUSH
103902: LD_VAR 0 2
103906: PUSH
103907: LD_VAR 0 4
103911: MINUS
103912: ST_TO_ADDR
// if y - r < 0 then
103913: LD_VAR 0 3
103917: PUSH
103918: LD_VAR 0 4
103922: MINUS
103923: PUSH
103924: LD_INT 0
103926: LESS
103927: IFFALSE 103939
// min_y := 0 else
103929: LD_ADDR_VAR 0 8
103933: PUSH
103934: LD_INT 0
103936: ST_TO_ADDR
103937: GO 103955
// min_y := y - r ;
103939: LD_ADDR_VAR 0 8
103943: PUSH
103944: LD_VAR 0 3
103948: PUSH
103949: LD_VAR 0 4
103953: MINUS
103954: ST_TO_ADDR
// max_x := x + r ;
103955: LD_ADDR_VAR 0 9
103959: PUSH
103960: LD_VAR 0 2
103964: PUSH
103965: LD_VAR 0 4
103969: PLUS
103970: ST_TO_ADDR
// max_y := y + r ;
103971: LD_ADDR_VAR 0 10
103975: PUSH
103976: LD_VAR 0 3
103980: PUSH
103981: LD_VAR 0 4
103985: PLUS
103986: ST_TO_ADDR
// for _x = min_x to max_x do
103987: LD_ADDR_VAR 0 11
103991: PUSH
103992: DOUBLE
103993: LD_VAR 0 7
103997: DEC
103998: ST_TO_ADDR
103999: LD_VAR 0 9
104003: PUSH
104004: FOR_TO
104005: IFFALSE 104122
// for _y = min_y to max_y do
104007: LD_ADDR_VAR 0 12
104011: PUSH
104012: DOUBLE
104013: LD_VAR 0 8
104017: DEC
104018: ST_TO_ADDR
104019: LD_VAR 0 10
104023: PUSH
104024: FOR_TO
104025: IFFALSE 104118
// begin if not ValidHex ( _x , _y ) then
104027: LD_VAR 0 11
104031: PPUSH
104032: LD_VAR 0 12
104036: PPUSH
104037: CALL_OW 488
104041: NOT
104042: IFFALSE 104046
// continue ;
104044: GO 104024
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
104046: LD_VAR 0 11
104050: PPUSH
104051: LD_VAR 0 12
104055: PPUSH
104056: CALL_OW 351
104060: PUSH
104061: LD_VAR 0 11
104065: PPUSH
104066: LD_VAR 0 12
104070: PPUSH
104071: CALL_OW 554
104075: AND
104076: IFFALSE 104116
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
104078: LD_ADDR_VAR 0 13
104082: PUSH
104083: LD_VAR 0 13
104087: PPUSH
104088: LD_VAR 0 13
104092: PUSH
104093: LD_INT 1
104095: PLUS
104096: PPUSH
104097: LD_VAR 0 11
104101: PUSH
104102: LD_VAR 0 12
104106: PUSH
104107: EMPTY
104108: LIST
104109: LIST
104110: PPUSH
104111: CALL_OW 2
104115: ST_TO_ADDR
// end ;
104116: GO 104024
104118: POP
104119: POP
104120: GO 104004
104122: POP
104123: POP
// if not list then
104124: LD_VAR 0 13
104128: NOT
104129: IFFALSE 104133
// exit ;
104131: GO 104204
// for i in list do
104133: LD_ADDR_VAR 0 6
104137: PUSH
104138: LD_VAR 0 13
104142: PUSH
104143: FOR_IN
104144: IFFALSE 104202
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
104146: LD_VAR 0 1
104150: PPUSH
104151: LD_STRING M
104153: PUSH
104154: LD_VAR 0 6
104158: PUSH
104159: LD_INT 1
104161: ARRAY
104162: PUSH
104163: LD_VAR 0 6
104167: PUSH
104168: LD_INT 2
104170: ARRAY
104171: PUSH
104172: LD_INT 0
104174: PUSH
104175: LD_INT 0
104177: PUSH
104178: LD_INT 0
104180: PUSH
104181: LD_INT 0
104183: PUSH
104184: EMPTY
104185: LIST
104186: LIST
104187: LIST
104188: LIST
104189: LIST
104190: LIST
104191: LIST
104192: PUSH
104193: EMPTY
104194: LIST
104195: PPUSH
104196: CALL_OW 447
104200: GO 104143
104202: POP
104203: POP
// end ;
104204: LD_VAR 0 5
104208: RET
