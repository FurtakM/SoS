// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// InitSettings ;
  11: CALL 51 0 0
// if debug then
  15: LD_EXP 1
  19: IFFALSE 38
// begin PlaceSeeing ( 1 , 1 , 1 , - 372963 ) ;
  21: LD_INT 1
  23: PPUSH
  24: LD_INT 1
  26: PPUSH
  27: LD_INT 1
  29: PPUSH
  30: LD_INT 372963
  32: NEG
  33: PPUSH
  34: CALL_OW 330
// end ; SetTechnologies ;
  38: CALL 602 0 0
// SetDiplomacy ;
  42: CALL 814 0 0
// PrepareGame ;
  46: CALL 896 0 0
// end ;
  50: END
// export debug , GameType , game , disableGlobalTimer ; export mc_amer , mc_leg , mc_rus_1 , mc_rus_2 ; export playerCommander , playerForces , allyCommander , Powell , Farmer , ruOutpost , ruEscape , staticMines , baseCaptured , legDestCounter , cratesSpawns , legOfferAccepted , legChangeSide , allyDestCounter , sibBombAllowed , reinforceAllowed , commander , cratesSpawn , outpostEscape , dialogueMineDetected ; end_of_file export function InitSettings ; begin
  51: LD_INT 0
  53: PPUSH
// debug := 0 ;
  54: LD_ADDR_EXP 1
  58: PUSH
  59: LD_INT 0
  61: ST_TO_ADDR
// GameType := 1 ;
  62: LD_ADDR_EXP 2
  66: PUSH
  67: LD_INT 1
  69: ST_TO_ADDR
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  70: LD_ADDR_OWVAR 67
  74: PUSH
  75: LD_INT 0
  77: PPUSH
  78: CALL_OW 426
  82: ST_TO_ADDR
// sibBombAllowed := GetMultiPlayerSetting ( 1 ) - 1 ;
  83: LD_ADDR_EXP 23
  87: PUSH
  88: LD_INT 1
  90: PPUSH
  91: CALL_OW 426
  95: PUSH
  96: LD_INT 1
  98: MINUS
  99: ST_TO_ADDR
// reinforceAllowed := GetMultiPlayerSetting ( 2 ) - 1 ;
 100: LD_ADDR_EXP 24
 104: PUSH
 105: LD_INT 2
 107: PPUSH
 108: CALL_OW 426
 112: PUSH
 113: LD_INT 1
 115: MINUS
 116: ST_TO_ADDR
// cratesSpawn := GetMultiPlayerSetting ( 3 ) ;
 117: LD_ADDR_EXP 26
 121: PUSH
 122: LD_INT 3
 124: PPUSH
 125: CALL_OW 426
 129: ST_TO_ADDR
// commander := GetMultiPlayerSetting ( 4 ) ;
 130: LD_ADDR_EXP 25
 134: PUSH
 135: LD_INT 4
 137: PPUSH
 138: CALL_OW 426
 142: ST_TO_ADDR
// if not commander then
 143: LD_EXP 25
 147: NOT
 148: IFFALSE 158
// commander := 3 ;
 150: LD_ADDR_EXP 25
 154: PUSH
 155: LD_INT 3
 157: ST_TO_ADDR
// if not debug then
 158: LD_EXP 1
 162: NOT
 163: IFFALSE 167
// exit ;
 165: GO 224
// display_strings := [ Difficulty:  & Difficulty , sibBomb:  & sibBombAllowed , reinforceAllowed:  & reinforceAllowed , cratesSpawn:  & cratesSpawn , commander:  & commander ] ;
 167: LD_ADDR_OWVAR 47
 171: PUSH
 172: LD_STRING Difficulty: 
 174: PUSH
 175: LD_OWVAR 67
 179: STR
 180: PUSH
 181: LD_STRING sibBomb: 
 183: PUSH
 184: LD_EXP 23
 188: STR
 189: PUSH
 190: LD_STRING reinforceAllowed: 
 192: PUSH
 193: LD_EXP 24
 197: STR
 198: PUSH
 199: LD_STRING cratesSpawn: 
 201: PUSH
 202: LD_EXP 26
 206: STR
 207: PUSH
 208: LD_STRING commander: 
 210: PUSH
 211: LD_EXP 25
 215: STR
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: LIST
 223: ST_TO_ADDR
// end ;
 224: LD_VAR 0 1
 228: RET
// every 0 0$1 trigger game and GameType = 1 and not disableGlobalTimer do
 229: LD_EXP 3
 233: PUSH
 234: LD_EXP 2
 238: PUSH
 239: LD_INT 1
 241: EQUAL
 242: AND
 243: PUSH
 244: LD_EXP 4
 248: NOT
 249: AND
 250: IFFALSE 273
 252: GO 254
 254: DISABLE
// begin enable ;
 255: ENABLE
// display_strings := [ #SkrTime , tick ] ;
 256: LD_ADDR_OWVAR 47
 260: PUSH
 261: LD_STRING #SkrTime
 263: PUSH
 264: LD_OWVAR 1
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: ST_TO_ADDR
// end ;
 273: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 274: LD_EXP 19
 278: PUSH
 279: LD_EXP 3
 283: AND
 284: PUSH
 285: LD_EXP 2
 289: PUSH
 290: LD_INT 1
 292: EQUAL
 293: AND
 294: IFFALSE 355
 296: GO 298
 298: DISABLE
// Crates ( cratesSpawns [ 1 ] [ 1 ] , cratesSpawns [ 1 ] [ 2 ] , cratesSpawns [ 1 ] [ 3 ] , cratesSpawns [ 1 ] [ 4 ] ) ;
 299: LD_EXP 19
 303: PUSH
 304: LD_INT 1
 306: ARRAY
 307: PUSH
 308: LD_INT 1
 310: ARRAY
 311: PPUSH
 312: LD_EXP 19
 316: PUSH
 317: LD_INT 1
 319: ARRAY
 320: PUSH
 321: LD_INT 2
 323: ARRAY
 324: PPUSH
 325: LD_EXP 19
 329: PUSH
 330: LD_INT 1
 332: ARRAY
 333: PUSH
 334: LD_INT 3
 336: ARRAY
 337: PPUSH
 338: LD_EXP 19
 342: PUSH
 343: LD_INT 1
 345: ARRAY
 346: PUSH
 347: LD_INT 4
 349: ARRAY
 350: PPUSH
 351: CALL 54546 0 4
 355: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 356: LD_EXP 19
 360: PUSH
 361: LD_EXP 3
 365: AND
 366: PUSH
 367: LD_EXP 2
 371: PUSH
 372: LD_INT 1
 374: EQUAL
 375: AND
 376: IFFALSE 437
 378: GO 380
 380: DISABLE
// Crates ( cratesSpawns [ 2 ] [ 1 ] , cratesSpawns [ 2 ] [ 2 ] , cratesSpawns [ 2 ] [ 3 ] , cratesSpawns [ 2 ] [ 4 ] ) ;
 381: LD_EXP 19
 385: PUSH
 386: LD_INT 2
 388: ARRAY
 389: PUSH
 390: LD_INT 1
 392: ARRAY
 393: PPUSH
 394: LD_EXP 19
 398: PUSH
 399: LD_INT 2
 401: ARRAY
 402: PUSH
 403: LD_INT 2
 405: ARRAY
 406: PPUSH
 407: LD_EXP 19
 411: PUSH
 412: LD_INT 2
 414: ARRAY
 415: PUSH
 416: LD_INT 3
 418: ARRAY
 419: PPUSH
 420: LD_EXP 19
 424: PUSH
 425: LD_INT 2
 427: ARRAY
 428: PUSH
 429: LD_INT 4
 431: ARRAY
 432: PPUSH
 433: CALL 54546 0 4
 437: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 438: LD_EXP 19
 442: PUSH
 443: LD_EXP 3
 447: AND
 448: PUSH
 449: LD_EXP 2
 453: PUSH
 454: LD_INT 1
 456: EQUAL
 457: AND
 458: IFFALSE 519
 460: GO 462
 462: DISABLE
// Crates ( cratesSpawns [ 3 ] [ 1 ] , cratesSpawns [ 3 ] [ 2 ] , cratesSpawns [ 3 ] [ 3 ] , cratesSpawns [ 3 ] [ 4 ] ) ;
 463: LD_EXP 19
 467: PUSH
 468: LD_INT 3
 470: ARRAY
 471: PUSH
 472: LD_INT 1
 474: ARRAY
 475: PPUSH
 476: LD_EXP 19
 480: PUSH
 481: LD_INT 3
 483: ARRAY
 484: PUSH
 485: LD_INT 2
 487: ARRAY
 488: PPUSH
 489: LD_EXP 19
 493: PUSH
 494: LD_INT 3
 496: ARRAY
 497: PUSH
 498: LD_INT 3
 500: ARRAY
 501: PPUSH
 502: LD_EXP 19
 506: PUSH
 507: LD_INT 3
 509: ARRAY
 510: PUSH
 511: LD_INT 4
 513: ARRAY
 514: PPUSH
 515: CALL 54546 0 4
 519: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 520: LD_EXP 19
 524: PUSH
 525: LD_EXP 3
 529: AND
 530: PUSH
 531: LD_EXP 2
 535: PUSH
 536: LD_INT 1
 538: EQUAL
 539: AND
 540: IFFALSE 601
 542: GO 544
 544: DISABLE
// Crates ( cratesSpawns [ 4 ] [ 1 ] , cratesSpawns [ 4 ] [ 2 ] , cratesSpawns [ 4 ] [ 3 ] , cratesSpawns [ 4 ] [ 4 ] ) ;
 545: LD_EXP 19
 549: PUSH
 550: LD_INT 4
 552: ARRAY
 553: PUSH
 554: LD_INT 1
 556: ARRAY
 557: PPUSH
 558: LD_EXP 19
 562: PUSH
 563: LD_INT 4
 565: ARRAY
 566: PUSH
 567: LD_INT 2
 569: ARRAY
 570: PPUSH
 571: LD_EXP 19
 575: PUSH
 576: LD_INT 4
 578: ARRAY
 579: PUSH
 580: LD_INT 3
 582: ARRAY
 583: PPUSH
 584: LD_EXP 19
 588: PUSH
 589: LD_INT 4
 591: ARRAY
 592: PUSH
 593: LD_INT 4
 595: ARRAY
 596: PPUSH
 597: CALL 54546 0 4
 601: END
// export function SetTechnologies ; var i , j , ban_techs , res_techs ; begin
 602: LD_INT 0
 604: PPUSH
 605: PPUSH
 606: PPUSH
 607: PPUSH
 608: PPUSH
// if GameType = 1 then
 609: LD_EXP 2
 613: PUSH
 614: LD_INT 1
 616: EQUAL
 617: IFFALSE 686
// begin ban_techs := [ ] ;
 619: LD_ADDR_VAR 0 4
 623: PUSH
 624: EMPTY
 625: ST_TO_ADDR
// if sibBombAllowed < 2 then
 626: LD_EXP 23
 630: PUSH
 631: LD_INT 2
 633: LESS
 634: IFFALSE 647
// ban_techs := [ tech_sibFiss ] ;
 636: LD_ADDR_VAR 0 4
 640: PUSH
 641: LD_INT 25
 643: PUSH
 644: EMPTY
 645: LIST
 646: ST_TO_ADDR
// res_techs := [ tech_oilPow , tech_oilEng , tech_tech1 , tech_tech2 , tech_tech3 , tech_gun , tech_gatling , tech_rocket ] ;
 647: LD_ADDR_VAR 0 5
 651: PUSH
 652: LD_INT 46
 654: PUSH
 655: LD_INT 47
 657: PUSH
 658: LD_INT 48
 660: PUSH
 661: LD_INT 49
 663: PUSH
 664: LD_INT 50
 666: PUSH
 667: LD_INT 39
 669: PUSH
 670: LD_INT 69
 672: PUSH
 673: LD_INT 40
 675: PUSH
 676: EMPTY
 677: LIST
 678: LIST
 679: LIST
 680: LIST
 681: LIST
 682: LIST
 683: LIST
 684: LIST
 685: ST_TO_ADDR
// end ; for i = 1 to 8 do
 686: LD_ADDR_VAR 0 2
 690: PUSH
 691: DOUBLE
 692: LD_INT 1
 694: DEC
 695: ST_TO_ADDR
 696: LD_INT 8
 698: PUSH
 699: FOR_TO
 700: IFFALSE 784
// begin if res_techs then
 702: LD_VAR 0 5
 706: IFFALSE 742
// for j in res_techs do
 708: LD_ADDR_VAR 0 3
 712: PUSH
 713: LD_VAR 0 5
 717: PUSH
 718: FOR_IN
 719: IFFALSE 740
// SetTech ( j , i , state_researched ) ;
 721: LD_VAR 0 3
 725: PPUSH
 726: LD_VAR 0 2
 730: PPUSH
 731: LD_INT 2
 733: PPUSH
 734: CALL_OW 322
 738: GO 718
 740: POP
 741: POP
// if ban_techs then
 742: LD_VAR 0 4
 746: IFFALSE 782
// for j in ban_techs do
 748: LD_ADDR_VAR 0 3
 752: PUSH
 753: LD_VAR 0 4
 757: PUSH
 758: FOR_IN
 759: IFFALSE 780
// SetTech ( j , i , state_disabled ) ;
 761: LD_VAR 0 3
 765: PPUSH
 766: LD_VAR 0 2
 770: PPUSH
 771: LD_INT 0
 773: PPUSH
 774: CALL_OW 322
 778: GO 758
 780: POP
 781: POP
// end ;
 782: GO 699
 784: POP
 785: POP
// if sibBombAllowed = 1 then
 786: LD_EXP 23
 790: PUSH
 791: LD_INT 1
 793: EQUAL
 794: IFFALSE 809
// SetTech ( tech_sibFiss , 3 , state_enabled ) ;
 796: LD_INT 25
 798: PPUSH
 799: LD_INT 3
 801: PPUSH
 802: LD_INT 1
 804: PPUSH
 805: CALL_OW 322
// end ;
 809: LD_VAR 0 1
 813: RET
// export function SetDiplomacy ; begin
 814: LD_INT 0
 816: PPUSH
// if GameType = 1 then
 817: LD_EXP 2
 821: PUSH
 822: LD_INT 1
 824: EQUAL
 825: IFFALSE 891
// begin SetAttitude ( 1 , 4 , att_friend , true ) ;
 827: LD_INT 1
 829: PPUSH
 830: LD_INT 4
 832: PPUSH
 833: LD_INT 1
 835: PPUSH
 836: LD_INT 1
 838: PPUSH
 839: CALL_OW 80
// SetAttitude ( 3 , 6 , att_friend , true ) ;
 843: LD_INT 3
 845: PPUSH
 846: LD_INT 6
 848: PPUSH
 849: LD_INT 1
 851: PPUSH
 852: LD_INT 1
 854: PPUSH
 855: CALL_OW 80
// SetAttitude ( 3 , 8 , att_friend , true ) ;
 859: LD_INT 3
 861: PPUSH
 862: LD_INT 8
 864: PPUSH
 865: LD_INT 1
 867: PPUSH
 868: LD_INT 1
 870: PPUSH
 871: CALL_OW 80
// SetAttitude ( 6 , 8 , att_friend , true ) ;
 875: LD_INT 6
 877: PPUSH
 878: LD_INT 8
 880: PPUSH
 881: LD_INT 1
 883: PPUSH
 884: LD_INT 1
 886: PPUSH
 887: CALL_OW 80
// end ; end ;
 891: LD_VAR 0 1
 895: RET
// export function PrepareGame ; var i , tmp , sources ; begin
 896: LD_INT 0
 898: PPUSH
 899: PPUSH
 900: PPUSH
 901: PPUSH
// if GameType = 1 then
 902: LD_EXP 2
 906: PUSH
 907: LD_INT 1
 909: EQUAL
 910: IFFALSE 1402
// begin game := false ;
 912: LD_ADDR_EXP 3
 916: PUSH
 917: LD_INT 0
 919: ST_TO_ADDR
// your_side := 1 ;
 920: LD_ADDR_OWVAR 2
 924: PUSH
 925: LD_INT 1
 927: ST_TO_ADDR
// mc_amer := 1 ;
 928: LD_ADDR_EXP 5
 932: PUSH
 933: LD_INT 1
 935: ST_TO_ADDR
// mc_leg := 2 ;
 936: LD_ADDR_EXP 6
 940: PUSH
 941: LD_INT 2
 943: ST_TO_ADDR
// mc_rus_1 := 3 ;
 944: LD_ADDR_EXP 7
 948: PUSH
 949: LD_INT 3
 951: ST_TO_ADDR
// mc_rus_2 := 4 ;
 952: LD_ADDR_EXP 8
 956: PUSH
 957: LD_INT 4
 959: ST_TO_ADDR
// cratesSpawns := [ [ amerCrates , 1 , 0 , [ 200 , 250 , 300 ] [ cratesSpawn ] ] , [ rusCrates , 8 , 50 , 500 ] , [ legCrates , 5 , 50 , 300 ] , [ playerCrates , [ 4 , 5 , 6 ] [ cratesSpawn ] , 30 , [ 300 , 450 , 500 ] [ cratesSpawn ] ] ] ;
 960: LD_ADDR_EXP 19
 964: PUSH
 965: LD_INT 5
 967: PUSH
 968: LD_INT 1
 970: PUSH
 971: LD_INT 0
 973: PUSH
 974: LD_INT 200
 976: PUSH
 977: LD_INT 250
 979: PUSH
 980: LD_INT 300
 982: PUSH
 983: EMPTY
 984: LIST
 985: LIST
 986: LIST
 987: PUSH
 988: LD_EXP 26
 992: ARRAY
 993: PUSH
 994: EMPTY
 995: LIST
 996: LIST
 997: LIST
 998: LIST
 999: PUSH
1000: LD_INT 13
1002: PUSH
1003: LD_INT 8
1005: PUSH
1006: LD_INT 50
1008: PUSH
1009: LD_INT 500
1011: PUSH
1012: EMPTY
1013: LIST
1014: LIST
1015: LIST
1016: LIST
1017: PUSH
1018: LD_INT 17
1020: PUSH
1021: LD_INT 5
1023: PUSH
1024: LD_INT 50
1026: PUSH
1027: LD_INT 300
1029: PUSH
1030: EMPTY
1031: LIST
1032: LIST
1033: LIST
1034: LIST
1035: PUSH
1036: LD_INT 18
1038: PUSH
1039: LD_INT 4
1041: PUSH
1042: LD_INT 5
1044: PUSH
1045: LD_INT 6
1047: PUSH
1048: EMPTY
1049: LIST
1050: LIST
1051: LIST
1052: PUSH
1053: LD_EXP 26
1057: ARRAY
1058: PUSH
1059: LD_INT 30
1061: PUSH
1062: LD_INT 300
1064: PUSH
1065: LD_INT 450
1067: PUSH
1068: LD_INT 500
1070: PUSH
1071: EMPTY
1072: LIST
1073: LIST
1074: LIST
1075: PUSH
1076: LD_EXP 26
1080: ARRAY
1081: PUSH
1082: EMPTY
1083: LIST
1084: LIST
1085: LIST
1086: LIST
1087: PUSH
1088: EMPTY
1089: LIST
1090: LIST
1091: LIST
1092: LIST
1093: ST_TO_ADDR
// sources := [ [ 190 , 193 , mat_siberit ] , [ 182 , 117 , mat_siberit ] , [ 43 , 2 , mat_siberit ] , [ 114 , 152 , mat_oil ] , [ 85 , 38 , mat_oil ] ] ;
1094: LD_ADDR_VAR 0 4
1098: PUSH
1099: LD_INT 190
1101: PUSH
1102: LD_INT 193
1104: PUSH
1105: LD_INT 3
1107: PUSH
1108: EMPTY
1109: LIST
1110: LIST
1111: LIST
1112: PUSH
1113: LD_INT 182
1115: PUSH
1116: LD_INT 117
1118: PUSH
1119: LD_INT 3
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: LIST
1126: PUSH
1127: LD_INT 43
1129: PUSH
1130: LD_INT 2
1132: PUSH
1133: LD_INT 3
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: LIST
1140: PUSH
1141: LD_INT 114
1143: PUSH
1144: LD_INT 152
1146: PUSH
1147: LD_INT 2
1149: PUSH
1150: EMPTY
1151: LIST
1152: LIST
1153: LIST
1154: PUSH
1155: LD_INT 85
1157: PUSH
1158: LD_INT 38
1160: PUSH
1161: LD_INT 2
1163: PUSH
1164: EMPTY
1165: LIST
1166: LIST
1167: LIST
1168: PUSH
1169: EMPTY
1170: LIST
1171: LIST
1172: LIST
1173: LIST
1174: LIST
1175: ST_TO_ADDR
// for i in sources do
1176: LD_ADDR_VAR 0 2
1180: PUSH
1181: LD_VAR 0 4
1185: PUSH
1186: FOR_IN
1187: IFFALSE 1222
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
1189: LD_VAR 0 2
1193: PUSH
1194: LD_INT 1
1196: ARRAY
1197: PPUSH
1198: LD_VAR 0 2
1202: PUSH
1203: LD_INT 2
1205: ARRAY
1206: PPUSH
1207: LD_VAR 0 2
1211: PUSH
1212: LD_INT 3
1214: ARRAY
1215: PPUSH
1216: CALL_OW 62
1220: GO 1186
1222: POP
1223: POP
// disableGlobalTimer := false ;
1224: LD_ADDR_EXP 4
1228: PUSH
1229: LD_INT 0
1231: ST_TO_ADDR
// ruEscape := [ 0 , [ 5 , 6 , 7 ] [ Difficulty ] ] ;
1232: LD_ADDR_EXP 15
1236: PUSH
1237: LD_INT 0
1239: PUSH
1240: LD_INT 5
1242: PUSH
1243: LD_INT 6
1245: PUSH
1246: LD_INT 7
1248: PUSH
1249: EMPTY
1250: LIST
1251: LIST
1252: LIST
1253: PUSH
1254: LD_OWVAR 67
1258: ARRAY
1259: PUSH
1260: EMPTY
1261: LIST
1262: LIST
1263: ST_TO_ADDR
// ruOutpost := [ ] ;
1264: LD_ADDR_EXP 14
1268: PUSH
1269: EMPTY
1270: ST_TO_ADDR
// staticMines := [ ] ;
1271: LD_ADDR_EXP 16
1275: PUSH
1276: EMPTY
1277: ST_TO_ADDR
// baseCaptured := false ;
1278: LD_ADDR_EXP 17
1282: PUSH
1283: LD_INT 0
1285: ST_TO_ADDR
// legDestCounter := 0 ;
1286: LD_ADDR_EXP 18
1290: PUSH
1291: LD_INT 0
1293: ST_TO_ADDR
// legOfferAccepted := false ;
1294: LD_ADDR_EXP 20
1298: PUSH
1299: LD_INT 0
1301: ST_TO_ADDR
// legChangeSide := false ;
1302: LD_ADDR_EXP 21
1306: PUSH
1307: LD_INT 0
1309: ST_TO_ADDR
// allyDestCounter := 0 ;
1310: LD_ADDR_EXP 22
1314: PUSH
1315: LD_INT 0
1317: ST_TO_ADDR
// outpostEscape := false ;
1318: LD_ADDR_EXP 27
1322: PUSH
1323: LD_INT 0
1325: ST_TO_ADDR
// dialogueMineDetected := false ;
1326: LD_ADDR_EXP 28
1330: PUSH
1331: LD_INT 0
1333: ST_TO_ADDR
// PrepareAmericans ;
1334: CALL 7250 0 0
// PrepareLegion ;
1338: CALL 5515 0 0
// PrepareRussians ;
1342: CALL 2481 0 0
// playerForces := PreparePlayer ;
1346: LD_ADDR_EXP 10
1350: PUSH
1351: CALL 8493 0 0
1355: ST_TO_ADDR
// AnimateTrees ( true ) ;
1356: LD_INT 1
1358: PPUSH
1359: CALL_OW 573
// PrepareNature ( 4 , 3 , 8 , 5 , 3 , 1 , 8 , natureGroundArea , natureWaterArea ) ;
1363: LD_INT 4
1365: PPUSH
1366: LD_INT 3
1368: PPUSH
1369: LD_INT 8
1371: PPUSH
1372: LD_INT 5
1374: PPUSH
1375: LD_INT 3
1377: PPUSH
1378: LD_INT 1
1380: PPUSH
1381: LD_INT 8
1383: PPUSH
1384: LD_INT 2
1386: PPUSH
1387: LD_INT 1
1389: PPUSH
1390: CALL 51970 0 9
// MC_Start ;
1394: CALL 57747 0 0
// Action ;
1398: CALL 10689 0 0
// end ; end ;
1402: LD_VAR 0 1
1406: RET
// export function CustomInitMacro ; begin
1407: LD_INT 0
1409: PPUSH
// if GameType <> 1 then
1410: LD_EXP 2
1414: PUSH
1415: LD_INT 1
1417: NONEQUAL
1418: IFFALSE 1422
// exit ;
1420: GO 2476
// MC_SetScanArea ( mc_amer , amerBase ) ;
1422: LD_EXP 5
1426: PPUSH
1427: LD_INT 3
1429: PPUSH
1430: CALL 80603 0 2
// MC_SetParkingArea ( mc_amer , amerParking ) ;
1434: LD_EXP 5
1438: PPUSH
1439: LD_INT 4
1441: PPUSH
1442: CALL 80547 0 2
// MC_SetAllowedTurretWeapons ( mc_amer , [ us_radar , us_heavy_gun , us_rocket_launcher , us_laser , us_double_laser ] ) ;
1446: LD_EXP 5
1450: PPUSH
1451: LD_INT 11
1453: PUSH
1454: LD_INT 6
1456: PUSH
1457: LD_INT 7
1459: PUSH
1460: LD_INT 9
1462: PUSH
1463: LD_INT 10
1465: PUSH
1466: EMPTY
1467: LIST
1468: LIST
1469: LIST
1470: LIST
1471: LIST
1472: PPUSH
1473: CALL 80435 0 2
// MC_SetCratesArea ( mc_amer , amerCrates ) ;
1477: LD_EXP 5
1481: PPUSH
1482: LD_INT 5
1484: PPUSH
1485: CALL 80117 0 2
// MC_SetTame ( mc_amer , amerBase ) ;
1489: LD_EXP 5
1493: PPUSH
1494: LD_INT 3
1496: PPUSH
1497: CALL 79848 0 2
// MC_SetDefenderLimit ( mc_amer , 4 ) ;
1501: LD_EXP 5
1505: PPUSH
1506: LD_INT 4
1508: PPUSH
1509: CALL 79467 0 2
// MC_SetProduceList ( mc_amer , [ [ us_medium_tracked , engine_combustion , control_remote , us_double_gun ] , [ us_medium_tracked , engine_solar , control_remote , us_laser ] , [ us_heavy_tracked , engine_combustion , control_remote , us_rocket_launcher ] , [ us_heavy_tracked , engine_combustion , control_remote , us_heavy_gun ] , ] ) ;
1513: LD_EXP 5
1517: PPUSH
1518: LD_INT 3
1520: PUSH
1521: LD_INT 1
1523: PUSH
1524: LD_INT 2
1526: PUSH
1527: LD_INT 5
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: LIST
1534: LIST
1535: PUSH
1536: LD_INT 3
1538: PUSH
1539: LD_INT 2
1541: PUSH
1542: LD_INT 2
1544: PUSH
1545: LD_INT 9
1547: PUSH
1548: EMPTY
1549: LIST
1550: LIST
1551: LIST
1552: LIST
1553: PUSH
1554: LD_INT 4
1556: PUSH
1557: LD_INT 1
1559: PUSH
1560: LD_INT 2
1562: PUSH
1563: LD_INT 7
1565: PUSH
1566: EMPTY
1567: LIST
1568: LIST
1569: LIST
1570: LIST
1571: PUSH
1572: LD_INT 4
1574: PUSH
1575: LD_INT 1
1577: PUSH
1578: LD_INT 2
1580: PUSH
1581: LD_INT 6
1583: PUSH
1584: EMPTY
1585: LIST
1586: LIST
1587: LIST
1588: LIST
1589: PUSH
1590: EMPTY
1591: LIST
1592: LIST
1593: LIST
1594: LIST
1595: PPUSH
1596: CALL 79282 0 2
// MC_SetBuildingList ( mc_amer , [ [ b_turret , 114 , 16 , 0 ] , [ b_bunker , 110 , 12 , 0 ] ] ) ;
1600: LD_EXP 5
1604: PPUSH
1605: LD_INT 33
1607: PUSH
1608: LD_INT 114
1610: PUSH
1611: LD_INT 16
1613: PUSH
1614: LD_INT 0
1616: PUSH
1617: EMPTY
1618: LIST
1619: LIST
1620: LIST
1621: LIST
1622: PUSH
1623: LD_INT 32
1625: PUSH
1626: LD_INT 110
1628: PUSH
1629: LD_INT 12
1631: PUSH
1632: LD_INT 0
1634: PUSH
1635: EMPTY
1636: LIST
1637: LIST
1638: LIST
1639: LIST
1640: PUSH
1641: EMPTY
1642: LIST
1643: LIST
1644: PPUSH
1645: CALL 79174 0 2
// MC_SetLabKind ( mc_amer , [ b_lab_weapon , b_lab_opto , b_lab_computer , b_lab_siberium ] ) ;
1649: LD_EXP 5
1653: PPUSH
1654: LD_INT 10
1656: PUSH
1657: LD_INT 15
1659: PUSH
1660: LD_INT 12
1662: PUSH
1663: LD_INT 11
1665: PUSH
1666: EMPTY
1667: LIST
1668: LIST
1669: LIST
1670: LIST
1671: PPUSH
1672: CALL 80024 0 2
// MC_SetScanArea ( mc_leg , legBase ) ;
1676: LD_EXP 6
1680: PPUSH
1681: LD_INT 6
1683: PPUSH
1684: CALL 80603 0 2
// MC_SetParkingArea ( mc_leg , legParking ) ;
1688: LD_EXP 6
1692: PPUSH
1693: LD_INT 7
1695: PPUSH
1696: CALL 80547 0 2
// MC_SetAllowedTurretWeapons ( mc_leg , [ ar_radar , ar_gun , ar_rocket_launcher , ar_gatling_gun ] ) ;
1700: LD_EXP 6
1704: PPUSH
1705: LD_INT 30
1707: PUSH
1708: LD_INT 27
1710: PUSH
1711: LD_INT 28
1713: PUSH
1714: LD_INT 25
1716: PUSH
1717: EMPTY
1718: LIST
1719: LIST
1720: LIST
1721: LIST
1722: PPUSH
1723: CALL 80435 0 2
// MC_SetCratesArea ( mc_leg , legCrates ) ;
1727: LD_EXP 6
1731: PPUSH
1732: LD_INT 17
1734: PPUSH
1735: CALL 80117 0 2
// MC_SetTame ( mc_leg , legBase ) ;
1739: LD_EXP 6
1743: PPUSH
1744: LD_INT 6
1746: PPUSH
1747: CALL 79848 0 2
// MC_SetDefenderLimit ( mc_leg , 5 ) ;
1751: LD_EXP 6
1755: PPUSH
1756: LD_INT 5
1758: PPUSH
1759: CALL 79467 0 2
// MC_SetMinesField ( mc_leg , 10 , legMines ) ;
1763: LD_EXP 6
1767: PPUSH
1768: LD_INT 10
1770: PPUSH
1771: LD_INT 9
1773: PPUSH
1774: CALL 78964 0 3
// MC_SetBuildingList ( mc_leg , [ [ b_armoury , 157 , 144 , 0 ] , [ b_bunker , 151 , 142 , 0 ] , [ b_bunker , 161 , 144 , 0 ] , [ b_bunker , 140 , 133 , 0 ] ] ) ;
1778: LD_EXP 6
1782: PPUSH
1783: LD_INT 4
1785: PUSH
1786: LD_INT 157
1788: PUSH
1789: LD_INT 144
1791: PUSH
1792: LD_INT 0
1794: PUSH
1795: EMPTY
1796: LIST
1797: LIST
1798: LIST
1799: LIST
1800: PUSH
1801: LD_INT 32
1803: PUSH
1804: LD_INT 151
1806: PUSH
1807: LD_INT 142
1809: PUSH
1810: LD_INT 0
1812: PUSH
1813: EMPTY
1814: LIST
1815: LIST
1816: LIST
1817: LIST
1818: PUSH
1819: LD_INT 32
1821: PUSH
1822: LD_INT 161
1824: PUSH
1825: LD_INT 144
1827: PUSH
1828: LD_INT 0
1830: PUSH
1831: EMPTY
1832: LIST
1833: LIST
1834: LIST
1835: LIST
1836: PUSH
1837: LD_INT 32
1839: PUSH
1840: LD_INT 140
1842: PUSH
1843: LD_INT 133
1845: PUSH
1846: LD_INT 0
1848: PUSH
1849: EMPTY
1850: LIST
1851: LIST
1852: LIST
1853: LIST
1854: PUSH
1855: EMPTY
1856: LIST
1857: LIST
1858: LIST
1859: LIST
1860: PPUSH
1861: CALL 79174 0 2
// MC_SetProduceList ( mc_leg , [ [ ar_medium_trike , engine_solar , control_manual , ar_control_tower ] , [ ar_medium_trike , engine_solar , control_manual , ar_control_tower ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_cargo_bay ] ] ) ;
1865: LD_EXP 6
1869: PPUSH
1870: LD_INT 13
1872: PUSH
1873: LD_INT 2
1875: PUSH
1876: LD_INT 1
1878: PUSH
1879: LD_INT 31
1881: PUSH
1882: EMPTY
1883: LIST
1884: LIST
1885: LIST
1886: LIST
1887: PUSH
1888: LD_INT 13
1890: PUSH
1891: LD_INT 2
1893: PUSH
1894: LD_INT 1
1896: PUSH
1897: LD_INT 31
1899: PUSH
1900: EMPTY
1901: LIST
1902: LIST
1903: LIST
1904: LIST
1905: PUSH
1906: LD_INT 13
1908: PUSH
1909: LD_INT 1
1911: PUSH
1912: LD_INT 1
1914: PUSH
1915: LD_INT 27
1917: PUSH
1918: EMPTY
1919: LIST
1920: LIST
1921: LIST
1922: LIST
1923: PUSH
1924: LD_INT 13
1926: PUSH
1927: LD_INT 1
1929: PUSH
1930: LD_INT 2
1932: PUSH
1933: LD_INT 27
1935: PUSH
1936: EMPTY
1937: LIST
1938: LIST
1939: LIST
1940: LIST
1941: PUSH
1942: LD_INT 13
1944: PUSH
1945: LD_INT 1
1947: PUSH
1948: LD_INT 2
1950: PUSH
1951: LD_INT 27
1953: PUSH
1954: EMPTY
1955: LIST
1956: LIST
1957: LIST
1958: LIST
1959: PUSH
1960: LD_INT 13
1962: PUSH
1963: LD_INT 1
1965: PUSH
1966: LD_INT 2
1968: PUSH
1969: LD_INT 28
1971: PUSH
1972: EMPTY
1973: LIST
1974: LIST
1975: LIST
1976: LIST
1977: PUSH
1978: LD_INT 13
1980: PUSH
1981: LD_INT 1
1983: PUSH
1984: LD_INT 2
1986: PUSH
1987: LD_INT 28
1989: PUSH
1990: EMPTY
1991: LIST
1992: LIST
1993: LIST
1994: LIST
1995: PUSH
1996: LD_INT 13
1998: PUSH
1999: LD_INT 1
2001: PUSH
2002: LD_INT 2
2004: PUSH
2005: LD_INT 32
2007: PUSH
2008: EMPTY
2009: LIST
2010: LIST
2011: LIST
2012: LIST
2013: PUSH
2014: EMPTY
2015: LIST
2016: LIST
2017: LIST
2018: LIST
2019: LIST
2020: LIST
2021: LIST
2022: LIST
2023: PPUSH
2024: CALL 79282 0 2
// HiddenCamera ( 165 , 156 , 8 ) ;
2028: LD_INT 165
2030: PPUSH
2031: LD_INT 156
2033: PPUSH
2034: LD_INT 8
2036: PPUSH
2037: CALL_OW 244
// MC_SetScanArea ( mc_rus_1 , rus1Base ) ;
2041: LD_EXP 7
2045: PPUSH
2046: LD_INT 15
2048: PPUSH
2049: CALL 80603 0 2
// MC_SetParkingArea ( mc_rus_1 , rus1Parking ) ;
2053: LD_EXP 7
2057: PPUSH
2058: LD_INT 16
2060: PPUSH
2061: CALL 80547 0 2
// MC_SetAllowedTurretWeapons ( mc_rus_1 , [ ru_gatling_gun , ru_rocket , ru_rocket_launcher , ru_time_lapser , ru_heavy_gun ] ) ;
2065: LD_EXP 7
2069: PPUSH
2070: LD_INT 43
2072: PUSH
2073: LD_INT 47
2075: PUSH
2076: LD_INT 45
2078: PUSH
2079: LD_INT 49
2081: PUSH
2082: LD_INT 46
2084: PUSH
2085: EMPTY
2086: LIST
2087: LIST
2088: LIST
2089: LIST
2090: LIST
2091: PPUSH
2092: CALL 80435 0 2
// MC_SetCratesArea ( mc_rus_1 , rusCrates ) ;
2096: LD_EXP 7
2100: PPUSH
2101: LD_INT 13
2103: PPUSH
2104: CALL 80117 0 2
// MC_SetTame ( mc_rus_1 , rus1Base ) ;
2108: LD_EXP 7
2112: PPUSH
2113: LD_INT 15
2115: PPUSH
2116: CALL 79848 0 2
// MC_SetDefenderLimit ( mc_rus_1 , 5 ) ;
2120: LD_EXP 7
2124: PPUSH
2125: LD_INT 5
2127: PPUSH
2128: CALL 79467 0 2
// MC_SetProduceList ( mc_rus_1 , [ [ ru_heavy_wheeled , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_wheeled , engine_combustion , control_manual , ru_heavy_gun ] , [ ru_heavy_wheeled , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_heavy_wheeled , engine_combustion , control_manual , ru_rocket ] , [ ru_heavy_wheeled , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_wheeled , engine_combustion , control_computer , ru_cargo_bay ] , [ ru_medium_wheeled , engine_combustion , control_computer , ru_crane ] , ] ) ;
2132: LD_EXP 7
2136: PPUSH
2137: LD_INT 23
2139: PUSH
2140: LD_INT 1
2142: PUSH
2143: LD_INT 3
2145: PUSH
2146: LD_INT 46
2148: PUSH
2149: EMPTY
2150: LIST
2151: LIST
2152: LIST
2153: LIST
2154: PUSH
2155: LD_INT 23
2157: PUSH
2158: LD_INT 1
2160: PUSH
2161: LD_INT 1
2163: PUSH
2164: LD_INT 46
2166: PUSH
2167: EMPTY
2168: LIST
2169: LIST
2170: LIST
2171: LIST
2172: PUSH
2173: LD_INT 23
2175: PUSH
2176: LD_INT 1
2178: PUSH
2179: LD_INT 3
2181: PUSH
2182: LD_INT 45
2184: PUSH
2185: EMPTY
2186: LIST
2187: LIST
2188: LIST
2189: LIST
2190: PUSH
2191: LD_INT 23
2193: PUSH
2194: LD_INT 1
2196: PUSH
2197: LD_INT 1
2199: PUSH
2200: LD_INT 47
2202: PUSH
2203: EMPTY
2204: LIST
2205: LIST
2206: LIST
2207: LIST
2208: PUSH
2209: LD_INT 23
2211: PUSH
2212: LD_INT 1
2214: PUSH
2215: LD_INT 3
2217: PUSH
2218: LD_INT 46
2220: PUSH
2221: EMPTY
2222: LIST
2223: LIST
2224: LIST
2225: LIST
2226: PUSH
2227: LD_INT 21
2229: PUSH
2230: LD_INT 1
2232: PUSH
2233: LD_INT 3
2235: PUSH
2236: LD_INT 51
2238: PUSH
2239: EMPTY
2240: LIST
2241: LIST
2242: LIST
2243: LIST
2244: PUSH
2245: LD_INT 21
2247: PUSH
2248: LD_INT 1
2250: PUSH
2251: LD_INT 3
2253: PUSH
2254: LD_INT 52
2256: PUSH
2257: EMPTY
2258: LIST
2259: LIST
2260: LIST
2261: LIST
2262: PUSH
2263: EMPTY
2264: LIST
2265: LIST
2266: LIST
2267: LIST
2268: LIST
2269: LIST
2270: LIST
2271: PPUSH
2272: CALL 79282 0 2
// MC_SetScanArea ( mc_rus_2 , rus2Base ) ;
2276: LD_EXP 8
2280: PPUSH
2281: LD_INT 11
2283: PPUSH
2284: CALL 80603 0 2
// MC_SetParkingArea ( mc_rus_2 , rus2Parking ) ;
2288: LD_EXP 8
2292: PPUSH
2293: LD_INT 12
2295: PPUSH
2296: CALL 80547 0 2
// MC_SetAllowedTurretWeapons ( mc_rus_2 , [ ru_gatling_gun , ru_rocket , ru_rocket_launcher , ru_time_lapser , ru_heavy_gun ] ) ;
2300: LD_EXP 8
2304: PPUSH
2305: LD_INT 43
2307: PUSH
2308: LD_INT 47
2310: PUSH
2311: LD_INT 45
2313: PUSH
2314: LD_INT 49
2316: PUSH
2317: LD_INT 46
2319: PUSH
2320: EMPTY
2321: LIST
2322: LIST
2323: LIST
2324: LIST
2325: LIST
2326: PPUSH
2327: CALL 80435 0 2
// MC_SetCratesArea ( mc_rus_2 , rusCrates ) ;
2331: LD_EXP 8
2335: PPUSH
2336: LD_INT 13
2338: PPUSH
2339: CALL 80117 0 2
// MC_SetTame ( mc_rus_2 , rus2Base ) ;
2343: LD_EXP 8
2347: PPUSH
2348: LD_INT 11
2350: PPUSH
2351: CALL 79848 0 2
// MC_SetDefenderLimit ( mc_rus_2 , 4 ) ;
2355: LD_EXP 8
2359: PPUSH
2360: LD_INT 4
2362: PPUSH
2363: CALL 79467 0 2
// MC_SetTeleportExit ( mc_rus_2 , [ [ 115 , 201 ] ] ) ;
2367: LD_EXP 8
2371: PPUSH
2372: LD_INT 115
2374: PUSH
2375: LD_INT 201
2377: PUSH
2378: EMPTY
2379: LIST
2380: LIST
2381: PUSH
2382: EMPTY
2383: LIST
2384: PPUSH
2385: CALL 80173 0 2
// MC_SetProduceList ( mc_rus_2 , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] ] ) ;
2389: LD_EXP 8
2393: PPUSH
2394: LD_INT 24
2396: PUSH
2397: LD_INT 3
2399: PUSH
2400: LD_INT 3
2402: PUSH
2403: LD_INT 46
2405: PUSH
2406: EMPTY
2407: LIST
2408: LIST
2409: LIST
2410: LIST
2411: PUSH
2412: LD_INT 24
2414: PUSH
2415: LD_INT 3
2417: PUSH
2418: LD_INT 3
2420: PUSH
2421: LD_INT 46
2423: PUSH
2424: EMPTY
2425: LIST
2426: LIST
2427: LIST
2428: LIST
2429: PUSH
2430: LD_INT 24
2432: PUSH
2433: LD_INT 3
2435: PUSH
2436: LD_INT 3
2438: PUSH
2439: LD_INT 46
2441: PUSH
2442: EMPTY
2443: LIST
2444: LIST
2445: LIST
2446: LIST
2447: PUSH
2448: LD_INT 24
2450: PUSH
2451: LD_INT 3
2453: PUSH
2454: LD_INT 3
2456: PUSH
2457: LD_INT 46
2459: PUSH
2460: EMPTY
2461: LIST
2462: LIST
2463: LIST
2464: LIST
2465: PUSH
2466: EMPTY
2467: LIST
2468: LIST
2469: LIST
2470: LIST
2471: PPUSH
2472: CALL 79282 0 2
// end ;
2476: LD_VAR 0 1
2480: RET
// export function PrepareRussians ; var i , b , tmp , side , sr , depot , base ; begin
2481: LD_INT 0
2483: PPUSH
2484: PPUSH
2485: PPUSH
2486: PPUSH
2487: PPUSH
2488: PPUSH
2489: PPUSH
2490: PPUSH
// PrepareNature ( 0 , 0 , 3 , 0 , 0 , 0 , 0 , rusApe , 0 ) ;
2491: LD_INT 0
2493: PPUSH
2494: LD_INT 0
2496: PPUSH
2497: LD_INT 3
2499: PPUSH
2500: LD_INT 0
2502: PPUSH
2503: LD_INT 0
2505: PPUSH
2506: LD_INT 0
2508: PPUSH
2509: LD_INT 0
2511: PPUSH
2512: LD_INT 14
2514: PPUSH
2515: LD_INT 0
2517: PPUSH
2518: CALL 51970 0 9
// side := 3 ;
2522: LD_ADDR_VAR 0 5
2526: PUSH
2527: LD_INT 3
2529: ST_TO_ADDR
// SetTech ( tech_targTeleport , side , state_researched ) ;
2530: LD_INT 38
2532: PPUSH
2533: LD_VAR 0 5
2537: PPUSH
2538: LD_INT 2
2540: PPUSH
2541: CALL_OW 322
// SetTech ( tech_gun , side , state_researched ) ;
2545: LD_INT 39
2547: PPUSH
2548: LD_VAR 0 5
2552: PPUSH
2553: LD_INT 2
2555: PPUSH
2556: CALL_OW 322
// SetTech ( tech_advMet , side , state_researched ) ;
2560: LD_INT 34
2562: PPUSH
2563: LD_VAR 0 5
2567: PPUSH
2568: LD_INT 2
2570: PPUSH
2571: CALL_OW 322
// tmp := [ [ 0 , 208 , 163 , 4 , 0 , 0 ] , [ 3 , 194 , 161 , 1 , 0 , 0 ] , [ 17 , 190 , 161 , 1 , 0 , 0 ] , [ 5 , 200 , 145 , 3 , 0 , 0 ] , [ 32 , 192 , 144 , 3 , 0 , 0 ] , [ 26 , 216 , 172 , 3 , 0 , 0 ] , [ 26 , 218 , 176 , 3 , 0 , 0 ] , [ 29 , 182 , 149 , 3 , 0 , 0 ] , [ 8 , 201 , 171 , 0 , 10 , 11 ] , [ 32 , 188 , 167 , 0 , 0 , 0 ] , [ 32 , 202 , 179 , 0 , 0 , 0 ] , [ 32 , 209 , 182 , 0 , 0 , 0 ] , [ 32 , 220 , 183 , 5 , 0 , 0 ] , [ 32 , 225 , 181 , 5 , 0 , 0 ] , [ 26 , 220 , 174 , 5 , 0 , 0 ] , [ 1 , 84 , 128 , 4 , 0 , 0 ] , [ 3 , 68 , 121 , 1 , 0 , 0 ] , [ 19 , 72 , 125 , 5 , 0 , 0 ] , [ 18 , 68 , 124 , 0 , 0 , 0 ] , [ 24 , 64 , 121 , 1 , 0 , 0 ] , [ 17 , 65 , 118 , 2 , 0 , 0 ] , [ 21 , 68 , 117 , 3 , 0 , 0 ] , [ 8 , 68 , 130 , 1 , 14 , 10 ] , [ 8 , 67 , 110 , 2 , 11 , 12 ] , [ 28 , 85 , 108 , 2 , 0 , 0 ] , [ 28 , 85 , 124 , 2 , 0 , 0 ] , [ 30 , 97 , 119 , 2 , 0 , 0 ] , [ 5 , 111 , 138 , 4 , 0 , 0 ] , [ 33 , 104 , 130 , 3 , 0 , 0 ] , [ 33 , 110 , 142 , 5 , 0 , 0 ] , [ 33 , 91 , 131 , 5 , 0 , 0 ] , [ 33 , 107 , 157 , 5 , 0 , 0 ] , [ 33 , 104 , 160 , 5 , 0 , 0 ] , [ 33 , 101 , 162 , 5 , 0 , 0 ] , [ 32 , 87 , 157 , 5 , 0 , 0 ] , [ 32 , 105 , 158 , 5 , 0 , 0 ] , [ 33 , 91 , 118 , 4 , 0 , 0 ] , [ 33 , 89 , 107 , 4 , 0 , 0 ] , [ 5 , 86 , 96 , 3 , 0 , 0 ] , [ 33 , 91 , 102 , 4 , 0 , 0 ] , [ 32 , 80 , 95 , 3 , 0 , 0 ] , [ 28 , 77 , 105 , 3 , 0 , 0 ] , [ 28 , 85 , 113 , 3 , 0 , 0 ] , [ 28 , 55 , 97 , 3 , 0 , 0 ] , [ 28 , 88 , 128 , 3 , 0 , 0 ] , [ 32 , 69 , 101 , 2 , 0 , 0 ] , [ 1 , 34 , 23 , 4 , 0 , 0 ] , [ 8 , 25 , 4 , 3 , 11 , 10 ] , [ 8 , 15 , 4 , 2 , 14 , 12 ] , [ 29 , 55 , 35 , 2 , 0 , 0 ] , [ 29 , 24 , 44 , 2 , 0 , 0 ] , [ 34 , 34 , 32 , 4 , 0 , 0 ] , [ 3 , 14 , 16 , 1 , 0 , 0 ] , [ 24 , 10 , 16 , 1 , 0 , 0 ] , [ 21 , 11 , 13 , 2 , 0 , 0 ] , [ 18 , 14 , 12 , 3 , 0 , 0 ] , [ 16 , 14 , 19 , 0 , 0 , 0 ] , [ 17 , 18 , 20 , 5 , 0 , 0 ] , [ 28 , 10 , 5 , 1 , 0 , 0 ] , [ 28 , 8 , 8 , 1 , 0 , 0 ] , [ 26 , 19 , 2 , 1 , 0 , 0 ] , [ 26 , 30 , 2 , 1 , 0 , 0 ] , [ 5 , 59 , 20 , 4 , 0 , 0 ] , [ 32 , 60 , 24 , 4 , 0 , 0 ] , [ 32 , 61 , 45 , 5 , 0 , 0 ] , [ 32 , 52 , 51 , 5 , 0 , 0 ] , [ 33 , 56 , 51 , 5 , 0 , 0 ] , [ 33 , 62 , 49 , 5 , 0 , 0 ] , [ 33 , 41 , 47 , 5 , 0 , 0 ] , [ 33 , 33 , 52 , 5 , 0 , 0 ] , [ 5 , 31 , 40 , 0 , 0 , 0 ] , [ 33 , 65 , 37 , 5 , 0 , 0 ] , [ 33 , 63 , 29 , 4 , 0 , 0 ] , [ 33 , 54 , 11 , 4 , 0 , 0 ] , [ 33 , 56 , 15 , 4 , 0 , 0 ] , [ 33 , 51 , 6 , 4 , 0 , 0 ] , [ 26 , 39 , 25 , 0 , 0 , 0 ] , [ 26 , 37 , 21 , 0 , 0 , 0 ] , [ 32 , 35 , 17 , 4 , 0 , 0 ] , [ 33 , 35 , 28 , 4 , 0 , 0 ] , [ 33 , 28 , 46 , 5 , 0 , 0 ] , [ 33 , 31 , 6 , 4 , 0 , 0 ] , [ 26 , 54 , 38 , 4 , 0 , 0 ] , [ 33 , 207 , 167 , 3 , 0 , 0 ] , [ 30 , 43 , 2 , 4 , 0 , 0 ] ] ;
2575: LD_ADDR_VAR 0 4
2579: PUSH
2580: LD_INT 0
2582: PUSH
2583: LD_INT 208
2585: PUSH
2586: LD_INT 163
2588: PUSH
2589: LD_INT 4
2591: PUSH
2592: LD_INT 0
2594: PUSH
2595: LD_INT 0
2597: PUSH
2598: EMPTY
2599: LIST
2600: LIST
2601: LIST
2602: LIST
2603: LIST
2604: LIST
2605: PUSH
2606: LD_INT 3
2608: PUSH
2609: LD_INT 194
2611: PUSH
2612: LD_INT 161
2614: PUSH
2615: LD_INT 1
2617: PUSH
2618: LD_INT 0
2620: PUSH
2621: LD_INT 0
2623: PUSH
2624: EMPTY
2625: LIST
2626: LIST
2627: LIST
2628: LIST
2629: LIST
2630: LIST
2631: PUSH
2632: LD_INT 17
2634: PUSH
2635: LD_INT 190
2637: PUSH
2638: LD_INT 161
2640: PUSH
2641: LD_INT 1
2643: PUSH
2644: LD_INT 0
2646: PUSH
2647: LD_INT 0
2649: PUSH
2650: EMPTY
2651: LIST
2652: LIST
2653: LIST
2654: LIST
2655: LIST
2656: LIST
2657: PUSH
2658: LD_INT 5
2660: PUSH
2661: LD_INT 200
2663: PUSH
2664: LD_INT 145
2666: PUSH
2667: LD_INT 3
2669: PUSH
2670: LD_INT 0
2672: PUSH
2673: LD_INT 0
2675: PUSH
2676: EMPTY
2677: LIST
2678: LIST
2679: LIST
2680: LIST
2681: LIST
2682: LIST
2683: PUSH
2684: LD_INT 32
2686: PUSH
2687: LD_INT 192
2689: PUSH
2690: LD_INT 144
2692: PUSH
2693: LD_INT 3
2695: PUSH
2696: LD_INT 0
2698: PUSH
2699: LD_INT 0
2701: PUSH
2702: EMPTY
2703: LIST
2704: LIST
2705: LIST
2706: LIST
2707: LIST
2708: LIST
2709: PUSH
2710: LD_INT 26
2712: PUSH
2713: LD_INT 216
2715: PUSH
2716: LD_INT 172
2718: PUSH
2719: LD_INT 3
2721: PUSH
2722: LD_INT 0
2724: PUSH
2725: LD_INT 0
2727: PUSH
2728: EMPTY
2729: LIST
2730: LIST
2731: LIST
2732: LIST
2733: LIST
2734: LIST
2735: PUSH
2736: LD_INT 26
2738: PUSH
2739: LD_INT 218
2741: PUSH
2742: LD_INT 176
2744: PUSH
2745: LD_INT 3
2747: PUSH
2748: LD_INT 0
2750: PUSH
2751: LD_INT 0
2753: PUSH
2754: EMPTY
2755: LIST
2756: LIST
2757: LIST
2758: LIST
2759: LIST
2760: LIST
2761: PUSH
2762: LD_INT 29
2764: PUSH
2765: LD_INT 182
2767: PUSH
2768: LD_INT 149
2770: PUSH
2771: LD_INT 3
2773: PUSH
2774: LD_INT 0
2776: PUSH
2777: LD_INT 0
2779: PUSH
2780: EMPTY
2781: LIST
2782: LIST
2783: LIST
2784: LIST
2785: LIST
2786: LIST
2787: PUSH
2788: LD_INT 8
2790: PUSH
2791: LD_INT 201
2793: PUSH
2794: LD_INT 171
2796: PUSH
2797: LD_INT 0
2799: PUSH
2800: LD_INT 10
2802: PUSH
2803: LD_INT 11
2805: PUSH
2806: EMPTY
2807: LIST
2808: LIST
2809: LIST
2810: LIST
2811: LIST
2812: LIST
2813: PUSH
2814: LD_INT 32
2816: PUSH
2817: LD_INT 188
2819: PUSH
2820: LD_INT 167
2822: PUSH
2823: LD_INT 0
2825: PUSH
2826: LD_INT 0
2828: PUSH
2829: LD_INT 0
2831: PUSH
2832: EMPTY
2833: LIST
2834: LIST
2835: LIST
2836: LIST
2837: LIST
2838: LIST
2839: PUSH
2840: LD_INT 32
2842: PUSH
2843: LD_INT 202
2845: PUSH
2846: LD_INT 179
2848: PUSH
2849: LD_INT 0
2851: PUSH
2852: LD_INT 0
2854: PUSH
2855: LD_INT 0
2857: PUSH
2858: EMPTY
2859: LIST
2860: LIST
2861: LIST
2862: LIST
2863: LIST
2864: LIST
2865: PUSH
2866: LD_INT 32
2868: PUSH
2869: LD_INT 209
2871: PUSH
2872: LD_INT 182
2874: PUSH
2875: LD_INT 0
2877: PUSH
2878: LD_INT 0
2880: PUSH
2881: LD_INT 0
2883: PUSH
2884: EMPTY
2885: LIST
2886: LIST
2887: LIST
2888: LIST
2889: LIST
2890: LIST
2891: PUSH
2892: LD_INT 32
2894: PUSH
2895: LD_INT 220
2897: PUSH
2898: LD_INT 183
2900: PUSH
2901: LD_INT 5
2903: PUSH
2904: LD_INT 0
2906: PUSH
2907: LD_INT 0
2909: PUSH
2910: EMPTY
2911: LIST
2912: LIST
2913: LIST
2914: LIST
2915: LIST
2916: LIST
2917: PUSH
2918: LD_INT 32
2920: PUSH
2921: LD_INT 225
2923: PUSH
2924: LD_INT 181
2926: PUSH
2927: LD_INT 5
2929: PUSH
2930: LD_INT 0
2932: PUSH
2933: LD_INT 0
2935: PUSH
2936: EMPTY
2937: LIST
2938: LIST
2939: LIST
2940: LIST
2941: LIST
2942: LIST
2943: PUSH
2944: LD_INT 26
2946: PUSH
2947: LD_INT 220
2949: PUSH
2950: LD_INT 174
2952: PUSH
2953: LD_INT 5
2955: PUSH
2956: LD_INT 0
2958: PUSH
2959: LD_INT 0
2961: PUSH
2962: EMPTY
2963: LIST
2964: LIST
2965: LIST
2966: LIST
2967: LIST
2968: LIST
2969: PUSH
2970: LD_INT 1
2972: PUSH
2973: LD_INT 84
2975: PUSH
2976: LD_INT 128
2978: PUSH
2979: LD_INT 4
2981: PUSH
2982: LD_INT 0
2984: PUSH
2985: LD_INT 0
2987: PUSH
2988: EMPTY
2989: LIST
2990: LIST
2991: LIST
2992: LIST
2993: LIST
2994: LIST
2995: PUSH
2996: LD_INT 3
2998: PUSH
2999: LD_INT 68
3001: PUSH
3002: LD_INT 121
3004: PUSH
3005: LD_INT 1
3007: PUSH
3008: LD_INT 0
3010: PUSH
3011: LD_INT 0
3013: PUSH
3014: EMPTY
3015: LIST
3016: LIST
3017: LIST
3018: LIST
3019: LIST
3020: LIST
3021: PUSH
3022: LD_INT 19
3024: PUSH
3025: LD_INT 72
3027: PUSH
3028: LD_INT 125
3030: PUSH
3031: LD_INT 5
3033: PUSH
3034: LD_INT 0
3036: PUSH
3037: LD_INT 0
3039: PUSH
3040: EMPTY
3041: LIST
3042: LIST
3043: LIST
3044: LIST
3045: LIST
3046: LIST
3047: PUSH
3048: LD_INT 18
3050: PUSH
3051: LD_INT 68
3053: PUSH
3054: LD_INT 124
3056: PUSH
3057: LD_INT 0
3059: PUSH
3060: LD_INT 0
3062: PUSH
3063: LD_INT 0
3065: PUSH
3066: EMPTY
3067: LIST
3068: LIST
3069: LIST
3070: LIST
3071: LIST
3072: LIST
3073: PUSH
3074: LD_INT 24
3076: PUSH
3077: LD_INT 64
3079: PUSH
3080: LD_INT 121
3082: PUSH
3083: LD_INT 1
3085: PUSH
3086: LD_INT 0
3088: PUSH
3089: LD_INT 0
3091: PUSH
3092: EMPTY
3093: LIST
3094: LIST
3095: LIST
3096: LIST
3097: LIST
3098: LIST
3099: PUSH
3100: LD_INT 17
3102: PUSH
3103: LD_INT 65
3105: PUSH
3106: LD_INT 118
3108: PUSH
3109: LD_INT 2
3111: PUSH
3112: LD_INT 0
3114: PUSH
3115: LD_INT 0
3117: PUSH
3118: EMPTY
3119: LIST
3120: LIST
3121: LIST
3122: LIST
3123: LIST
3124: LIST
3125: PUSH
3126: LD_INT 21
3128: PUSH
3129: LD_INT 68
3131: PUSH
3132: LD_INT 117
3134: PUSH
3135: LD_INT 3
3137: PUSH
3138: LD_INT 0
3140: PUSH
3141: LD_INT 0
3143: PUSH
3144: EMPTY
3145: LIST
3146: LIST
3147: LIST
3148: LIST
3149: LIST
3150: LIST
3151: PUSH
3152: LD_INT 8
3154: PUSH
3155: LD_INT 68
3157: PUSH
3158: LD_INT 130
3160: PUSH
3161: LD_INT 1
3163: PUSH
3164: LD_INT 14
3166: PUSH
3167: LD_INT 10
3169: PUSH
3170: EMPTY
3171: LIST
3172: LIST
3173: LIST
3174: LIST
3175: LIST
3176: LIST
3177: PUSH
3178: LD_INT 8
3180: PUSH
3181: LD_INT 67
3183: PUSH
3184: LD_INT 110
3186: PUSH
3187: LD_INT 2
3189: PUSH
3190: LD_INT 11
3192: PUSH
3193: LD_INT 12
3195: PUSH
3196: EMPTY
3197: LIST
3198: LIST
3199: LIST
3200: LIST
3201: LIST
3202: LIST
3203: PUSH
3204: LD_INT 28
3206: PUSH
3207: LD_INT 85
3209: PUSH
3210: LD_INT 108
3212: PUSH
3213: LD_INT 2
3215: PUSH
3216: LD_INT 0
3218: PUSH
3219: LD_INT 0
3221: PUSH
3222: EMPTY
3223: LIST
3224: LIST
3225: LIST
3226: LIST
3227: LIST
3228: LIST
3229: PUSH
3230: LD_INT 28
3232: PUSH
3233: LD_INT 85
3235: PUSH
3236: LD_INT 124
3238: PUSH
3239: LD_INT 2
3241: PUSH
3242: LD_INT 0
3244: PUSH
3245: LD_INT 0
3247: PUSH
3248: EMPTY
3249: LIST
3250: LIST
3251: LIST
3252: LIST
3253: LIST
3254: LIST
3255: PUSH
3256: LD_INT 30
3258: PUSH
3259: LD_INT 97
3261: PUSH
3262: LD_INT 119
3264: PUSH
3265: LD_INT 2
3267: PUSH
3268: LD_INT 0
3270: PUSH
3271: LD_INT 0
3273: PUSH
3274: EMPTY
3275: LIST
3276: LIST
3277: LIST
3278: LIST
3279: LIST
3280: LIST
3281: PUSH
3282: LD_INT 5
3284: PUSH
3285: LD_INT 111
3287: PUSH
3288: LD_INT 138
3290: PUSH
3291: LD_INT 4
3293: PUSH
3294: LD_INT 0
3296: PUSH
3297: LD_INT 0
3299: PUSH
3300: EMPTY
3301: LIST
3302: LIST
3303: LIST
3304: LIST
3305: LIST
3306: LIST
3307: PUSH
3308: LD_INT 33
3310: PUSH
3311: LD_INT 104
3313: PUSH
3314: LD_INT 130
3316: PUSH
3317: LD_INT 3
3319: PUSH
3320: LD_INT 0
3322: PUSH
3323: LD_INT 0
3325: PUSH
3326: EMPTY
3327: LIST
3328: LIST
3329: LIST
3330: LIST
3331: LIST
3332: LIST
3333: PUSH
3334: LD_INT 33
3336: PUSH
3337: LD_INT 110
3339: PUSH
3340: LD_INT 142
3342: PUSH
3343: LD_INT 5
3345: PUSH
3346: LD_INT 0
3348: PUSH
3349: LD_INT 0
3351: PUSH
3352: EMPTY
3353: LIST
3354: LIST
3355: LIST
3356: LIST
3357: LIST
3358: LIST
3359: PUSH
3360: LD_INT 33
3362: PUSH
3363: LD_INT 91
3365: PUSH
3366: LD_INT 131
3368: PUSH
3369: LD_INT 5
3371: PUSH
3372: LD_INT 0
3374: PUSH
3375: LD_INT 0
3377: PUSH
3378: EMPTY
3379: LIST
3380: LIST
3381: LIST
3382: LIST
3383: LIST
3384: LIST
3385: PUSH
3386: LD_INT 33
3388: PUSH
3389: LD_INT 107
3391: PUSH
3392: LD_INT 157
3394: PUSH
3395: LD_INT 5
3397: PUSH
3398: LD_INT 0
3400: PUSH
3401: LD_INT 0
3403: PUSH
3404: EMPTY
3405: LIST
3406: LIST
3407: LIST
3408: LIST
3409: LIST
3410: LIST
3411: PUSH
3412: LD_INT 33
3414: PUSH
3415: LD_INT 104
3417: PUSH
3418: LD_INT 160
3420: PUSH
3421: LD_INT 5
3423: PUSH
3424: LD_INT 0
3426: PUSH
3427: LD_INT 0
3429: PUSH
3430: EMPTY
3431: LIST
3432: LIST
3433: LIST
3434: LIST
3435: LIST
3436: LIST
3437: PUSH
3438: LD_INT 33
3440: PUSH
3441: LD_INT 101
3443: PUSH
3444: LD_INT 162
3446: PUSH
3447: LD_INT 5
3449: PUSH
3450: LD_INT 0
3452: PUSH
3453: LD_INT 0
3455: PUSH
3456: EMPTY
3457: LIST
3458: LIST
3459: LIST
3460: LIST
3461: LIST
3462: LIST
3463: PUSH
3464: LD_INT 32
3466: PUSH
3467: LD_INT 87
3469: PUSH
3470: LD_INT 157
3472: PUSH
3473: LD_INT 5
3475: PUSH
3476: LD_INT 0
3478: PUSH
3479: LD_INT 0
3481: PUSH
3482: EMPTY
3483: LIST
3484: LIST
3485: LIST
3486: LIST
3487: LIST
3488: LIST
3489: PUSH
3490: LD_INT 32
3492: PUSH
3493: LD_INT 105
3495: PUSH
3496: LD_INT 158
3498: PUSH
3499: LD_INT 5
3501: PUSH
3502: LD_INT 0
3504: PUSH
3505: LD_INT 0
3507: PUSH
3508: EMPTY
3509: LIST
3510: LIST
3511: LIST
3512: LIST
3513: LIST
3514: LIST
3515: PUSH
3516: LD_INT 33
3518: PUSH
3519: LD_INT 91
3521: PUSH
3522: LD_INT 118
3524: PUSH
3525: LD_INT 4
3527: PUSH
3528: LD_INT 0
3530: PUSH
3531: LD_INT 0
3533: PUSH
3534: EMPTY
3535: LIST
3536: LIST
3537: LIST
3538: LIST
3539: LIST
3540: LIST
3541: PUSH
3542: LD_INT 33
3544: PUSH
3545: LD_INT 89
3547: PUSH
3548: LD_INT 107
3550: PUSH
3551: LD_INT 4
3553: PUSH
3554: LD_INT 0
3556: PUSH
3557: LD_INT 0
3559: PUSH
3560: EMPTY
3561: LIST
3562: LIST
3563: LIST
3564: LIST
3565: LIST
3566: LIST
3567: PUSH
3568: LD_INT 5
3570: PUSH
3571: LD_INT 86
3573: PUSH
3574: LD_INT 96
3576: PUSH
3577: LD_INT 3
3579: PUSH
3580: LD_INT 0
3582: PUSH
3583: LD_INT 0
3585: PUSH
3586: EMPTY
3587: LIST
3588: LIST
3589: LIST
3590: LIST
3591: LIST
3592: LIST
3593: PUSH
3594: LD_INT 33
3596: PUSH
3597: LD_INT 91
3599: PUSH
3600: LD_INT 102
3602: PUSH
3603: LD_INT 4
3605: PUSH
3606: LD_INT 0
3608: PUSH
3609: LD_INT 0
3611: PUSH
3612: EMPTY
3613: LIST
3614: LIST
3615: LIST
3616: LIST
3617: LIST
3618: LIST
3619: PUSH
3620: LD_INT 32
3622: PUSH
3623: LD_INT 80
3625: PUSH
3626: LD_INT 95
3628: PUSH
3629: LD_INT 3
3631: PUSH
3632: LD_INT 0
3634: PUSH
3635: LD_INT 0
3637: PUSH
3638: EMPTY
3639: LIST
3640: LIST
3641: LIST
3642: LIST
3643: LIST
3644: LIST
3645: PUSH
3646: LD_INT 28
3648: PUSH
3649: LD_INT 77
3651: PUSH
3652: LD_INT 105
3654: PUSH
3655: LD_INT 3
3657: PUSH
3658: LD_INT 0
3660: PUSH
3661: LD_INT 0
3663: PUSH
3664: EMPTY
3665: LIST
3666: LIST
3667: LIST
3668: LIST
3669: LIST
3670: LIST
3671: PUSH
3672: LD_INT 28
3674: PUSH
3675: LD_INT 85
3677: PUSH
3678: LD_INT 113
3680: PUSH
3681: LD_INT 3
3683: PUSH
3684: LD_INT 0
3686: PUSH
3687: LD_INT 0
3689: PUSH
3690: EMPTY
3691: LIST
3692: LIST
3693: LIST
3694: LIST
3695: LIST
3696: LIST
3697: PUSH
3698: LD_INT 28
3700: PUSH
3701: LD_INT 55
3703: PUSH
3704: LD_INT 97
3706: PUSH
3707: LD_INT 3
3709: PUSH
3710: LD_INT 0
3712: PUSH
3713: LD_INT 0
3715: PUSH
3716: EMPTY
3717: LIST
3718: LIST
3719: LIST
3720: LIST
3721: LIST
3722: LIST
3723: PUSH
3724: LD_INT 28
3726: PUSH
3727: LD_INT 88
3729: PUSH
3730: LD_INT 128
3732: PUSH
3733: LD_INT 3
3735: PUSH
3736: LD_INT 0
3738: PUSH
3739: LD_INT 0
3741: PUSH
3742: EMPTY
3743: LIST
3744: LIST
3745: LIST
3746: LIST
3747: LIST
3748: LIST
3749: PUSH
3750: LD_INT 32
3752: PUSH
3753: LD_INT 69
3755: PUSH
3756: LD_INT 101
3758: PUSH
3759: LD_INT 2
3761: PUSH
3762: LD_INT 0
3764: PUSH
3765: LD_INT 0
3767: PUSH
3768: EMPTY
3769: LIST
3770: LIST
3771: LIST
3772: LIST
3773: LIST
3774: LIST
3775: PUSH
3776: LD_INT 1
3778: PUSH
3779: LD_INT 34
3781: PUSH
3782: LD_INT 23
3784: PUSH
3785: LD_INT 4
3787: PUSH
3788: LD_INT 0
3790: PUSH
3791: LD_INT 0
3793: PUSH
3794: EMPTY
3795: LIST
3796: LIST
3797: LIST
3798: LIST
3799: LIST
3800: LIST
3801: PUSH
3802: LD_INT 8
3804: PUSH
3805: LD_INT 25
3807: PUSH
3808: LD_INT 4
3810: PUSH
3811: LD_INT 3
3813: PUSH
3814: LD_INT 11
3816: PUSH
3817: LD_INT 10
3819: PUSH
3820: EMPTY
3821: LIST
3822: LIST
3823: LIST
3824: LIST
3825: LIST
3826: LIST
3827: PUSH
3828: LD_INT 8
3830: PUSH
3831: LD_INT 15
3833: PUSH
3834: LD_INT 4
3836: PUSH
3837: LD_INT 2
3839: PUSH
3840: LD_INT 14
3842: PUSH
3843: LD_INT 12
3845: PUSH
3846: EMPTY
3847: LIST
3848: LIST
3849: LIST
3850: LIST
3851: LIST
3852: LIST
3853: PUSH
3854: LD_INT 29
3856: PUSH
3857: LD_INT 55
3859: PUSH
3860: LD_INT 35
3862: PUSH
3863: LD_INT 2
3865: PUSH
3866: LD_INT 0
3868: PUSH
3869: LD_INT 0
3871: PUSH
3872: EMPTY
3873: LIST
3874: LIST
3875: LIST
3876: LIST
3877: LIST
3878: LIST
3879: PUSH
3880: LD_INT 29
3882: PUSH
3883: LD_INT 24
3885: PUSH
3886: LD_INT 44
3888: PUSH
3889: LD_INT 2
3891: PUSH
3892: LD_INT 0
3894: PUSH
3895: LD_INT 0
3897: PUSH
3898: EMPTY
3899: LIST
3900: LIST
3901: LIST
3902: LIST
3903: LIST
3904: LIST
3905: PUSH
3906: LD_INT 34
3908: PUSH
3909: LD_INT 34
3911: PUSH
3912: LD_INT 32
3914: PUSH
3915: LD_INT 4
3917: PUSH
3918: LD_INT 0
3920: PUSH
3921: LD_INT 0
3923: PUSH
3924: EMPTY
3925: LIST
3926: LIST
3927: LIST
3928: LIST
3929: LIST
3930: LIST
3931: PUSH
3932: LD_INT 3
3934: PUSH
3935: LD_INT 14
3937: PUSH
3938: LD_INT 16
3940: PUSH
3941: LD_INT 1
3943: PUSH
3944: LD_INT 0
3946: PUSH
3947: LD_INT 0
3949: PUSH
3950: EMPTY
3951: LIST
3952: LIST
3953: LIST
3954: LIST
3955: LIST
3956: LIST
3957: PUSH
3958: LD_INT 24
3960: PUSH
3961: LD_INT 10
3963: PUSH
3964: LD_INT 16
3966: PUSH
3967: LD_INT 1
3969: PUSH
3970: LD_INT 0
3972: PUSH
3973: LD_INT 0
3975: PUSH
3976: EMPTY
3977: LIST
3978: LIST
3979: LIST
3980: LIST
3981: LIST
3982: LIST
3983: PUSH
3984: LD_INT 21
3986: PUSH
3987: LD_INT 11
3989: PUSH
3990: LD_INT 13
3992: PUSH
3993: LD_INT 2
3995: PUSH
3996: LD_INT 0
3998: PUSH
3999: LD_INT 0
4001: PUSH
4002: EMPTY
4003: LIST
4004: LIST
4005: LIST
4006: LIST
4007: LIST
4008: LIST
4009: PUSH
4010: LD_INT 18
4012: PUSH
4013: LD_INT 14
4015: PUSH
4016: LD_INT 12
4018: PUSH
4019: LD_INT 3
4021: PUSH
4022: LD_INT 0
4024: PUSH
4025: LD_INT 0
4027: PUSH
4028: EMPTY
4029: LIST
4030: LIST
4031: LIST
4032: LIST
4033: LIST
4034: LIST
4035: PUSH
4036: LD_INT 16
4038: PUSH
4039: LD_INT 14
4041: PUSH
4042: LD_INT 19
4044: PUSH
4045: LD_INT 0
4047: PUSH
4048: LD_INT 0
4050: PUSH
4051: LD_INT 0
4053: PUSH
4054: EMPTY
4055: LIST
4056: LIST
4057: LIST
4058: LIST
4059: LIST
4060: LIST
4061: PUSH
4062: LD_INT 17
4064: PUSH
4065: LD_INT 18
4067: PUSH
4068: LD_INT 20
4070: PUSH
4071: LD_INT 5
4073: PUSH
4074: LD_INT 0
4076: PUSH
4077: LD_INT 0
4079: PUSH
4080: EMPTY
4081: LIST
4082: LIST
4083: LIST
4084: LIST
4085: LIST
4086: LIST
4087: PUSH
4088: LD_INT 28
4090: PUSH
4091: LD_INT 10
4093: PUSH
4094: LD_INT 5
4096: PUSH
4097: LD_INT 1
4099: PUSH
4100: LD_INT 0
4102: PUSH
4103: LD_INT 0
4105: PUSH
4106: EMPTY
4107: LIST
4108: LIST
4109: LIST
4110: LIST
4111: LIST
4112: LIST
4113: PUSH
4114: LD_INT 28
4116: PUSH
4117: LD_INT 8
4119: PUSH
4120: LD_INT 8
4122: PUSH
4123: LD_INT 1
4125: PUSH
4126: LD_INT 0
4128: PUSH
4129: LD_INT 0
4131: PUSH
4132: EMPTY
4133: LIST
4134: LIST
4135: LIST
4136: LIST
4137: LIST
4138: LIST
4139: PUSH
4140: LD_INT 26
4142: PUSH
4143: LD_INT 19
4145: PUSH
4146: LD_INT 2
4148: PUSH
4149: LD_INT 1
4151: PUSH
4152: LD_INT 0
4154: PUSH
4155: LD_INT 0
4157: PUSH
4158: EMPTY
4159: LIST
4160: LIST
4161: LIST
4162: LIST
4163: LIST
4164: LIST
4165: PUSH
4166: LD_INT 26
4168: PUSH
4169: LD_INT 30
4171: PUSH
4172: LD_INT 2
4174: PUSH
4175: LD_INT 1
4177: PUSH
4178: LD_INT 0
4180: PUSH
4181: LD_INT 0
4183: PUSH
4184: EMPTY
4185: LIST
4186: LIST
4187: LIST
4188: LIST
4189: LIST
4190: LIST
4191: PUSH
4192: LD_INT 5
4194: PUSH
4195: LD_INT 59
4197: PUSH
4198: LD_INT 20
4200: PUSH
4201: LD_INT 4
4203: PUSH
4204: LD_INT 0
4206: PUSH
4207: LD_INT 0
4209: PUSH
4210: EMPTY
4211: LIST
4212: LIST
4213: LIST
4214: LIST
4215: LIST
4216: LIST
4217: PUSH
4218: LD_INT 32
4220: PUSH
4221: LD_INT 60
4223: PUSH
4224: LD_INT 24
4226: PUSH
4227: LD_INT 4
4229: PUSH
4230: LD_INT 0
4232: PUSH
4233: LD_INT 0
4235: PUSH
4236: EMPTY
4237: LIST
4238: LIST
4239: LIST
4240: LIST
4241: LIST
4242: LIST
4243: PUSH
4244: LD_INT 32
4246: PUSH
4247: LD_INT 61
4249: PUSH
4250: LD_INT 45
4252: PUSH
4253: LD_INT 5
4255: PUSH
4256: LD_INT 0
4258: PUSH
4259: LD_INT 0
4261: PUSH
4262: EMPTY
4263: LIST
4264: LIST
4265: LIST
4266: LIST
4267: LIST
4268: LIST
4269: PUSH
4270: LD_INT 32
4272: PUSH
4273: LD_INT 52
4275: PUSH
4276: LD_INT 51
4278: PUSH
4279: LD_INT 5
4281: PUSH
4282: LD_INT 0
4284: PUSH
4285: LD_INT 0
4287: PUSH
4288: EMPTY
4289: LIST
4290: LIST
4291: LIST
4292: LIST
4293: LIST
4294: LIST
4295: PUSH
4296: LD_INT 33
4298: PUSH
4299: LD_INT 56
4301: PUSH
4302: LD_INT 51
4304: PUSH
4305: LD_INT 5
4307: PUSH
4308: LD_INT 0
4310: PUSH
4311: LD_INT 0
4313: PUSH
4314: EMPTY
4315: LIST
4316: LIST
4317: LIST
4318: LIST
4319: LIST
4320: LIST
4321: PUSH
4322: LD_INT 33
4324: PUSH
4325: LD_INT 62
4327: PUSH
4328: LD_INT 49
4330: PUSH
4331: LD_INT 5
4333: PUSH
4334: LD_INT 0
4336: PUSH
4337: LD_INT 0
4339: PUSH
4340: EMPTY
4341: LIST
4342: LIST
4343: LIST
4344: LIST
4345: LIST
4346: LIST
4347: PUSH
4348: LD_INT 33
4350: PUSH
4351: LD_INT 41
4353: PUSH
4354: LD_INT 47
4356: PUSH
4357: LD_INT 5
4359: PUSH
4360: LD_INT 0
4362: PUSH
4363: LD_INT 0
4365: PUSH
4366: EMPTY
4367: LIST
4368: LIST
4369: LIST
4370: LIST
4371: LIST
4372: LIST
4373: PUSH
4374: LD_INT 33
4376: PUSH
4377: LD_INT 33
4379: PUSH
4380: LD_INT 52
4382: PUSH
4383: LD_INT 5
4385: PUSH
4386: LD_INT 0
4388: PUSH
4389: LD_INT 0
4391: PUSH
4392: EMPTY
4393: LIST
4394: LIST
4395: LIST
4396: LIST
4397: LIST
4398: LIST
4399: PUSH
4400: LD_INT 5
4402: PUSH
4403: LD_INT 31
4405: PUSH
4406: LD_INT 40
4408: PUSH
4409: LD_INT 0
4411: PUSH
4412: LD_INT 0
4414: PUSH
4415: LD_INT 0
4417: PUSH
4418: EMPTY
4419: LIST
4420: LIST
4421: LIST
4422: LIST
4423: LIST
4424: LIST
4425: PUSH
4426: LD_INT 33
4428: PUSH
4429: LD_INT 65
4431: PUSH
4432: LD_INT 37
4434: PUSH
4435: LD_INT 5
4437: PUSH
4438: LD_INT 0
4440: PUSH
4441: LD_INT 0
4443: PUSH
4444: EMPTY
4445: LIST
4446: LIST
4447: LIST
4448: LIST
4449: LIST
4450: LIST
4451: PUSH
4452: LD_INT 33
4454: PUSH
4455: LD_INT 63
4457: PUSH
4458: LD_INT 29
4460: PUSH
4461: LD_INT 4
4463: PUSH
4464: LD_INT 0
4466: PUSH
4467: LD_INT 0
4469: PUSH
4470: EMPTY
4471: LIST
4472: LIST
4473: LIST
4474: LIST
4475: LIST
4476: LIST
4477: PUSH
4478: LD_INT 33
4480: PUSH
4481: LD_INT 54
4483: PUSH
4484: LD_INT 11
4486: PUSH
4487: LD_INT 4
4489: PUSH
4490: LD_INT 0
4492: PUSH
4493: LD_INT 0
4495: PUSH
4496: EMPTY
4497: LIST
4498: LIST
4499: LIST
4500: LIST
4501: LIST
4502: LIST
4503: PUSH
4504: LD_INT 33
4506: PUSH
4507: LD_INT 56
4509: PUSH
4510: LD_INT 15
4512: PUSH
4513: LD_INT 4
4515: PUSH
4516: LD_INT 0
4518: PUSH
4519: LD_INT 0
4521: PUSH
4522: EMPTY
4523: LIST
4524: LIST
4525: LIST
4526: LIST
4527: LIST
4528: LIST
4529: PUSH
4530: LD_INT 33
4532: PUSH
4533: LD_INT 51
4535: PUSH
4536: LD_INT 6
4538: PUSH
4539: LD_INT 4
4541: PUSH
4542: LD_INT 0
4544: PUSH
4545: LD_INT 0
4547: PUSH
4548: EMPTY
4549: LIST
4550: LIST
4551: LIST
4552: LIST
4553: LIST
4554: LIST
4555: PUSH
4556: LD_INT 26
4558: PUSH
4559: LD_INT 39
4561: PUSH
4562: LD_INT 25
4564: PUSH
4565: LD_INT 0
4567: PUSH
4568: LD_INT 0
4570: PUSH
4571: LD_INT 0
4573: PUSH
4574: EMPTY
4575: LIST
4576: LIST
4577: LIST
4578: LIST
4579: LIST
4580: LIST
4581: PUSH
4582: LD_INT 26
4584: PUSH
4585: LD_INT 37
4587: PUSH
4588: LD_INT 21
4590: PUSH
4591: LD_INT 0
4593: PUSH
4594: LD_INT 0
4596: PUSH
4597: LD_INT 0
4599: PUSH
4600: EMPTY
4601: LIST
4602: LIST
4603: LIST
4604: LIST
4605: LIST
4606: LIST
4607: PUSH
4608: LD_INT 32
4610: PUSH
4611: LD_INT 35
4613: PUSH
4614: LD_INT 17
4616: PUSH
4617: LD_INT 4
4619: PUSH
4620: LD_INT 0
4622: PUSH
4623: LD_INT 0
4625: PUSH
4626: EMPTY
4627: LIST
4628: LIST
4629: LIST
4630: LIST
4631: LIST
4632: LIST
4633: PUSH
4634: LD_INT 33
4636: PUSH
4637: LD_INT 35
4639: PUSH
4640: LD_INT 28
4642: PUSH
4643: LD_INT 4
4645: PUSH
4646: LD_INT 0
4648: PUSH
4649: LD_INT 0
4651: PUSH
4652: EMPTY
4653: LIST
4654: LIST
4655: LIST
4656: LIST
4657: LIST
4658: LIST
4659: PUSH
4660: LD_INT 33
4662: PUSH
4663: LD_INT 28
4665: PUSH
4666: LD_INT 46
4668: PUSH
4669: LD_INT 5
4671: PUSH
4672: LD_INT 0
4674: PUSH
4675: LD_INT 0
4677: PUSH
4678: EMPTY
4679: LIST
4680: LIST
4681: LIST
4682: LIST
4683: LIST
4684: LIST
4685: PUSH
4686: LD_INT 33
4688: PUSH
4689: LD_INT 31
4691: PUSH
4692: LD_INT 6
4694: PUSH
4695: LD_INT 4
4697: PUSH
4698: LD_INT 0
4700: PUSH
4701: LD_INT 0
4703: PUSH
4704: EMPTY
4705: LIST
4706: LIST
4707: LIST
4708: LIST
4709: LIST
4710: LIST
4711: PUSH
4712: LD_INT 26
4714: PUSH
4715: LD_INT 54
4717: PUSH
4718: LD_INT 38
4720: PUSH
4721: LD_INT 4
4723: PUSH
4724: LD_INT 0
4726: PUSH
4727: LD_INT 0
4729: PUSH
4730: EMPTY
4731: LIST
4732: LIST
4733: LIST
4734: LIST
4735: LIST
4736: LIST
4737: PUSH
4738: LD_INT 33
4740: PUSH
4741: LD_INT 207
4743: PUSH
4744: LD_INT 167
4746: PUSH
4747: LD_INT 3
4749: PUSH
4750: LD_INT 0
4752: PUSH
4753: LD_INT 0
4755: PUSH
4756: EMPTY
4757: LIST
4758: LIST
4759: LIST
4760: LIST
4761: LIST
4762: LIST
4763: PUSH
4764: LD_INT 30
4766: PUSH
4767: LD_INT 43
4769: PUSH
4770: LD_INT 2
4772: PUSH
4773: LD_INT 4
4775: PUSH
4776: LD_INT 0
4778: PUSH
4779: LD_INT 0
4781: PUSH
4782: EMPTY
4783: LIST
4784: LIST
4785: LIST
4786: LIST
4787: LIST
4788: LIST
4789: PUSH
4790: EMPTY
4791: LIST
4792: LIST
4793: LIST
4794: LIST
4795: LIST
4796: LIST
4797: LIST
4798: LIST
4799: LIST
4800: LIST
4801: LIST
4802: LIST
4803: LIST
4804: LIST
4805: LIST
4806: LIST
4807: LIST
4808: LIST
4809: LIST
4810: LIST
4811: LIST
4812: LIST
4813: LIST
4814: LIST
4815: LIST
4816: LIST
4817: LIST
4818: LIST
4819: LIST
4820: LIST
4821: LIST
4822: LIST
4823: LIST
4824: LIST
4825: LIST
4826: LIST
4827: LIST
4828: LIST
4829: LIST
4830: LIST
4831: LIST
4832: LIST
4833: LIST
4834: LIST
4835: LIST
4836: LIST
4837: LIST
4838: LIST
4839: LIST
4840: LIST
4841: LIST
4842: LIST
4843: LIST
4844: LIST
4845: LIST
4846: LIST
4847: LIST
4848: LIST
4849: LIST
4850: LIST
4851: LIST
4852: LIST
4853: LIST
4854: LIST
4855: LIST
4856: LIST
4857: LIST
4858: LIST
4859: LIST
4860: LIST
4861: LIST
4862: LIST
4863: LIST
4864: LIST
4865: LIST
4866: LIST
4867: LIST
4868: LIST
4869: LIST
4870: LIST
4871: LIST
4872: LIST
4873: LIST
4874: LIST
4875: LIST
4876: ST_TO_ADDR
// for i in tmp do
4877: LD_ADDR_VAR 0 2
4881: PUSH
4882: LD_VAR 0 4
4886: PUSH
4887: FOR_IN
4888: IFFALSE 5119
// begin uc_side := side ;
4890: LD_ADDR_OWVAR 20
4894: PUSH
4895: LD_VAR 0 5
4899: ST_TO_ADDR
// uc_nation := nation_russian ;
4900: LD_ADDR_OWVAR 21
4904: PUSH
4905: LD_INT 3
4907: ST_TO_ADDR
// bc_type := i [ 1 ] ;
4908: LD_ADDR_OWVAR 42
4912: PUSH
4913: LD_VAR 0 2
4917: PUSH
4918: LD_INT 1
4920: ARRAY
4921: ST_TO_ADDR
// bc_level := rand ( 5 , 6 ) ;
4922: LD_ADDR_OWVAR 43
4926: PUSH
4927: LD_INT 5
4929: PPUSH
4930: LD_INT 6
4932: PPUSH
4933: CALL_OW 12
4937: ST_TO_ADDR
// bc_kind1 := i [ 5 ] ;
4938: LD_ADDR_OWVAR 44
4942: PUSH
4943: LD_VAR 0 2
4947: PUSH
4948: LD_INT 5
4950: ARRAY
4951: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
4952: LD_ADDR_OWVAR 45
4956: PUSH
4957: LD_VAR 0 2
4961: PUSH
4962: LD_INT 6
4964: ARRAY
4965: ST_TO_ADDR
// sr := 0 ;
4966: LD_ADDR_VAR 0 6
4970: PUSH
4971: LD_INT 0
4973: ST_TO_ADDR
// if i [ 1 ] = b_oil_mine then
4974: LD_VAR 0 2
4978: PUSH
4979: LD_INT 1
4981: ARRAY
4982: PUSH
4983: LD_INT 29
4985: EQUAL
4986: IFFALSE 4998
// sr := mat_oil else
4988: LD_ADDR_VAR 0 6
4992: PUSH
4993: LD_INT 2
4995: ST_TO_ADDR
4996: GO 5020
// if i [ 1 ] = b_siberite_mine then
4998: LD_VAR 0 2
5002: PUSH
5003: LD_INT 1
5005: ARRAY
5006: PUSH
5007: LD_INT 30
5009: EQUAL
5010: IFFALSE 5020
// sr := mat_siberit ;
5012: LD_ADDR_VAR 0 6
5016: PUSH
5017: LD_INT 3
5019: ST_TO_ADDR
// if sr then
5020: LD_VAR 0 6
5024: IFFALSE 5080
// begin CreateDepositXY ( i [ 2 ] , i [ 3 ] , sr ) ;
5026: LD_VAR 0 2
5030: PUSH
5031: LD_INT 2
5033: ARRAY
5034: PPUSH
5035: LD_VAR 0 2
5039: PUSH
5040: LD_INT 3
5042: ARRAY
5043: PPUSH
5044: LD_VAR 0 6
5048: PPUSH
5049: CALL_OW 62
// SetResourceVisibility ( i [ 2 ] , i [ 3 ] , side ) ;
5053: LD_VAR 0 2
5057: PUSH
5058: LD_INT 2
5060: ARRAY
5061: PPUSH
5062: LD_VAR 0 2
5066: PUSH
5067: LD_INT 3
5069: ARRAY
5070: PPUSH
5071: LD_VAR 0 5
5075: PPUSH
5076: CALL_OW 441
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
5080: LD_ADDR_VAR 0 3
5084: PUSH
5085: LD_VAR 0 2
5089: PUSH
5090: LD_INT 2
5092: ARRAY
5093: PPUSH
5094: LD_VAR 0 2
5098: PUSH
5099: LD_INT 3
5101: ARRAY
5102: PPUSH
5103: LD_VAR 0 2
5107: PUSH
5108: LD_INT 4
5110: ARRAY
5111: PPUSH
5112: CALL_OW 47
5116: ST_TO_ADDR
// end ;
5117: GO 4887
5119: POP
5120: POP
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
5121: LD_ADDR_VAR 0 7
5125: PUSH
5126: LD_INT 22
5128: PUSH
5129: LD_VAR 0 5
5133: PUSH
5134: EMPTY
5135: LIST
5136: LIST
5137: PUSH
5138: LD_INT 30
5140: PUSH
5141: LD_INT 1
5143: PUSH
5144: EMPTY
5145: LIST
5146: LIST
5147: PUSH
5148: EMPTY
5149: LIST
5150: LIST
5151: PPUSH
5152: CALL_OW 69
5156: ST_TO_ADDR
// if not depot then
5157: LD_VAR 0 7
5161: NOT
5162: IFFALSE 5166
// exit ;
5164: GO 5510
// base := PrepareBase ( HexInfo ( 84 , 128 ) , rus1Base , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 3000 , 300 , 100 ] , [ 12 , 6 , 6 , 4 ] ) ;
5166: LD_ADDR_VAR 0 8
5170: PUSH
5171: LD_INT 84
5173: PPUSH
5174: LD_INT 128
5176: PPUSH
5177: CALL_OW 428
5181: PPUSH
5182: LD_INT 15
5184: PPUSH
5185: LD_INT 0
5187: PPUSH
5188: LD_INT 6
5190: PUSH
5191: LD_INT 7
5193: PUSH
5194: LD_INT 8
5196: PUSH
5197: EMPTY
5198: LIST
5199: LIST
5200: LIST
5201: PUSH
5202: LD_OWVAR 67
5206: ARRAY
5207: PPUSH
5208: LD_INT 3000
5210: PUSH
5211: LD_INT 300
5213: PUSH
5214: LD_INT 100
5216: PUSH
5217: EMPTY
5218: LIST
5219: LIST
5220: LIST
5221: PPUSH
5222: LD_INT 12
5224: PUSH
5225: LD_INT 6
5227: PUSH
5228: LD_INT 6
5230: PUSH
5231: LD_INT 4
5233: PUSH
5234: EMPTY
5235: LIST
5236: LIST
5237: LIST
5238: LIST
5239: PPUSH
5240: CALL 27588 0 6
5244: ST_TO_ADDR
// if not base then
5245: LD_VAR 0 8
5249: NOT
5250: IFFALSE 5254
// exit ;
5252: GO 5510
// mc_bases := Replace ( mc_bases , mc_rus_1 , base ) ;
5254: LD_ADDR_EXP 44
5258: PUSH
5259: LD_EXP 44
5263: PPUSH
5264: LD_EXP 7
5268: PPUSH
5269: LD_VAR 0 8
5273: PPUSH
5274: CALL_OW 1
5278: ST_TO_ADDR
// base := PrepareBase ( HexInfo ( 34 , 23 ) , rus2Base , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 20000 , 3000 , 1000 ] , [ 12 , 6 , 6 , 4 ] ) ;
5279: LD_ADDR_VAR 0 8
5283: PUSH
5284: LD_INT 34
5286: PPUSH
5287: LD_INT 23
5289: PPUSH
5290: CALL_OW 428
5294: PPUSH
5295: LD_INT 11
5297: PPUSH
5298: LD_INT 0
5300: PPUSH
5301: LD_INT 6
5303: PUSH
5304: LD_INT 7
5306: PUSH
5307: LD_INT 8
5309: PUSH
5310: EMPTY
5311: LIST
5312: LIST
5313: LIST
5314: PUSH
5315: LD_OWVAR 67
5319: ARRAY
5320: PPUSH
5321: LD_INT 20000
5323: PUSH
5324: LD_INT 3000
5326: PUSH
5327: LD_INT 1000
5329: PUSH
5330: EMPTY
5331: LIST
5332: LIST
5333: LIST
5334: PPUSH
5335: LD_INT 12
5337: PUSH
5338: LD_INT 6
5340: PUSH
5341: LD_INT 6
5343: PUSH
5344: LD_INT 4
5346: PUSH
5347: EMPTY
5348: LIST
5349: LIST
5350: LIST
5351: LIST
5352: PPUSH
5353: CALL 27588 0 6
5357: ST_TO_ADDR
// if not base then
5358: LD_VAR 0 8
5362: NOT
5363: IFFALSE 5367
// exit ;
5365: GO 5510
// mc_bases := Replace ( mc_bases , mc_rus_2 , base ) ;
5367: LD_ADDR_EXP 44
5371: PUSH
5372: LD_EXP 44
5376: PPUSH
5377: LD_EXP 8
5381: PPUSH
5382: LD_VAR 0 8
5386: PPUSH
5387: CALL_OW 1
5391: ST_TO_ADDR
// ruOutpost := PrepareBase ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_depot ] ] ) [ 1 ] , ruOutpostArea , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 500 , 100 , 10 ] , [ [ 6 , 7 , 8 ] [ Difficulty ] , 2 , 0 , 1 ] ) ;
5392: LD_ADDR_EXP 14
5396: PUSH
5397: LD_INT 22
5399: PUSH
5400: LD_INT 3
5402: PUSH
5403: EMPTY
5404: LIST
5405: LIST
5406: PUSH
5407: LD_INT 30
5409: PUSH
5410: LD_INT 0
5412: PUSH
5413: EMPTY
5414: LIST
5415: LIST
5416: PUSH
5417: EMPTY
5418: LIST
5419: LIST
5420: PPUSH
5421: CALL_OW 69
5425: PUSH
5426: LD_INT 1
5428: ARRAY
5429: PPUSH
5430: LD_INT 25
5432: PPUSH
5433: LD_INT 0
5435: PPUSH
5436: LD_INT 6
5438: PUSH
5439: LD_INT 7
5441: PUSH
5442: LD_INT 8
5444: PUSH
5445: EMPTY
5446: LIST
5447: LIST
5448: LIST
5449: PUSH
5450: LD_OWVAR 67
5454: ARRAY
5455: PPUSH
5456: LD_INT 500
5458: PUSH
5459: LD_INT 100
5461: PUSH
5462: LD_INT 10
5464: PUSH
5465: EMPTY
5466: LIST
5467: LIST
5468: LIST
5469: PPUSH
5470: LD_INT 6
5472: PUSH
5473: LD_INT 7
5475: PUSH
5476: LD_INT 8
5478: PUSH
5479: EMPTY
5480: LIST
5481: LIST
5482: LIST
5483: PUSH
5484: LD_OWVAR 67
5488: ARRAY
5489: PUSH
5490: LD_INT 2
5492: PUSH
5493: LD_INT 0
5495: PUSH
5496: LD_INT 1
5498: PUSH
5499: EMPTY
5500: LIST
5501: LIST
5502: LIST
5503: LIST
5504: PPUSH
5505: CALL 27588 0 6
5509: ST_TO_ADDR
// end ;
5510: LD_VAR 0 1
5514: RET
// export function PrepareLegion ; var i , b , veh , tmp , tmp2 , cameras , side , sr , depot , base ; begin
5515: LD_INT 0
5517: PPUSH
5518: PPUSH
5519: PPUSH
5520: PPUSH
5521: PPUSH
5522: PPUSH
5523: PPUSH
5524: PPUSH
5525: PPUSH
5526: PPUSH
5527: PPUSH
// PrepareNature ( 0 , 0 , 6 , 0 , 0 , 0 , 0 , legApe , 0 ) ;
5528: LD_INT 0
5530: PPUSH
5531: LD_INT 0
5533: PPUSH
5534: LD_INT 6
5536: PPUSH
5537: LD_INT 0
5539: PPUSH
5540: LD_INT 0
5542: PPUSH
5543: LD_INT 0
5545: PPUSH
5546: LD_INT 0
5548: PPUSH
5549: LD_INT 8
5551: PPUSH
5552: LD_INT 0
5554: PPUSH
5555: CALL 51970 0 9
// side := 8 ;
5559: LD_ADDR_VAR 0 8
5563: PUSH
5564: LD_INT 8
5566: ST_TO_ADDR
// tmp := AreaToList ( minesArea , 0 ) ;
5567: LD_ADDR_VAR 0 5
5571: PUSH
5572: LD_INT 20
5574: PPUSH
5575: LD_INT 0
5577: PPUSH
5578: CALL_OW 517
5582: ST_TO_ADDR
// if Difficulty > 2 then
5583: LD_OWVAR 67
5587: PUSH
5588: LD_INT 2
5590: GREATER
5591: IFFALSE 5735
// begin tmp2 := AreaToList ( minesArea2 , 0 ) ;
5593: LD_ADDR_VAR 0 6
5597: PUSH
5598: LD_INT 27
5600: PPUSH
5601: LD_INT 0
5603: PPUSH
5604: CALL_OW 517
5608: ST_TO_ADDR
// for i = 1 to tmp2 [ 1 ] do
5609: LD_ADDR_VAR 0 2
5613: PUSH
5614: DOUBLE
5615: LD_INT 1
5617: DEC
5618: ST_TO_ADDR
5619: LD_VAR 0 6
5623: PUSH
5624: LD_INT 1
5626: ARRAY
5627: PUSH
5628: FOR_TO
5629: IFFALSE 5733
// begin tmp := ReplaceIn ( tmp , [ 1 , tmp [ 1 ] + 1 ] , tmp2 [ 1 ] [ i ] ) ;
5631: LD_ADDR_VAR 0 5
5635: PUSH
5636: LD_VAR 0 5
5640: PPUSH
5641: LD_INT 1
5643: PUSH
5644: LD_VAR 0 5
5648: PUSH
5649: LD_INT 1
5651: ARRAY
5652: PUSH
5653: LD_INT 1
5655: PLUS
5656: PUSH
5657: EMPTY
5658: LIST
5659: LIST
5660: PPUSH
5661: LD_VAR 0 6
5665: PUSH
5666: LD_INT 1
5668: ARRAY
5669: PUSH
5670: LD_VAR 0 2
5674: ARRAY
5675: PPUSH
5676: CALL 24301 0 3
5680: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 2 , tmp [ 2 ] + 1 ] , tmp2 [ 2 ] [ i ] ) ;
5681: LD_ADDR_VAR 0 5
5685: PUSH
5686: LD_VAR 0 5
5690: PPUSH
5691: LD_INT 2
5693: PUSH
5694: LD_VAR 0 5
5698: PUSH
5699: LD_INT 2
5701: ARRAY
5702: PUSH
5703: LD_INT 1
5705: PLUS
5706: PUSH
5707: EMPTY
5708: LIST
5709: LIST
5710: PPUSH
5711: LD_VAR 0 6
5715: PUSH
5716: LD_INT 2
5718: ARRAY
5719: PUSH
5720: LD_VAR 0 2
5724: ARRAY
5725: PPUSH
5726: CALL 24301 0 3
5730: ST_TO_ADDR
// end ;
5731: GO 5628
5733: POP
5734: POP
// end ; if tmp then
5735: LD_VAR 0 5
5739: IFFALSE 5867
// begin for i = 1 to tmp [ 1 ] do
5741: LD_ADDR_VAR 0 2
5745: PUSH
5746: DOUBLE
5747: LD_INT 1
5749: DEC
5750: ST_TO_ADDR
5751: LD_VAR 0 5
5755: PUSH
5756: LD_INT 1
5758: ARRAY
5759: PUSH
5760: FOR_TO
5761: IFFALSE 5865
// begin PlaceMine ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side , 0 ) ;
5763: LD_VAR 0 5
5767: PUSH
5768: LD_INT 1
5770: ARRAY
5771: PUSH
5772: LD_VAR 0 2
5776: ARRAY
5777: PPUSH
5778: LD_VAR 0 5
5782: PUSH
5783: LD_INT 2
5785: ARRAY
5786: PUSH
5787: LD_VAR 0 2
5791: ARRAY
5792: PPUSH
5793: LD_VAR 0 8
5797: PPUSH
5798: LD_INT 0
5800: PPUSH
5801: CALL_OW 454
// staticMines := Insert ( staticMines , staticMines + 1 , [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ) ;
5805: LD_ADDR_EXP 16
5809: PUSH
5810: LD_EXP 16
5814: PPUSH
5815: LD_EXP 16
5819: PUSH
5820: LD_INT 1
5822: PLUS
5823: PPUSH
5824: LD_VAR 0 5
5828: PUSH
5829: LD_INT 1
5831: ARRAY
5832: PUSH
5833: LD_VAR 0 2
5837: ARRAY
5838: PUSH
5839: LD_VAR 0 5
5843: PUSH
5844: LD_INT 2
5846: ARRAY
5847: PUSH
5848: LD_VAR 0 2
5852: ARRAY
5853: PUSH
5854: EMPTY
5855: LIST
5856: LIST
5857: PPUSH
5858: CALL_OW 2
5862: ST_TO_ADDR
// end ;
5863: GO 5760
5865: POP
5866: POP
// end ; cameras := [ [ 165 , 156 ] , [ 143 , 145 ] , [ 152 , 165 ] , [ 123 , 153 ] , [ 161 , 215 ] , [ 172 , 100 ] , [ 148 , 83 ] , [ 122 , 68 ] , [ 105 , 74 ] , [ 113 , 97 ] ] ;
5867: LD_ADDR_VAR 0 7
5871: PUSH
5872: LD_INT 165
5874: PUSH
5875: LD_INT 156
5877: PUSH
5878: EMPTY
5879: LIST
5880: LIST
5881: PUSH
5882: LD_INT 143
5884: PUSH
5885: LD_INT 145
5887: PUSH
5888: EMPTY
5889: LIST
5890: LIST
5891: PUSH
5892: LD_INT 152
5894: PUSH
5895: LD_INT 165
5897: PUSH
5898: EMPTY
5899: LIST
5900: LIST
5901: PUSH
5902: LD_INT 123
5904: PUSH
5905: LD_INT 153
5907: PUSH
5908: EMPTY
5909: LIST
5910: LIST
5911: PUSH
5912: LD_INT 161
5914: PUSH
5915: LD_INT 215
5917: PUSH
5918: EMPTY
5919: LIST
5920: LIST
5921: PUSH
5922: LD_INT 172
5924: PUSH
5925: LD_INT 100
5927: PUSH
5928: EMPTY
5929: LIST
5930: LIST
5931: PUSH
5932: LD_INT 148
5934: PUSH
5935: LD_INT 83
5937: PUSH
5938: EMPTY
5939: LIST
5940: LIST
5941: PUSH
5942: LD_INT 122
5944: PUSH
5945: LD_INT 68
5947: PUSH
5948: EMPTY
5949: LIST
5950: LIST
5951: PUSH
5952: LD_INT 105
5954: PUSH
5955: LD_INT 74
5957: PUSH
5958: EMPTY
5959: LIST
5960: LIST
5961: PUSH
5962: LD_INT 113
5964: PUSH
5965: LD_INT 97
5967: PUSH
5968: EMPTY
5969: LIST
5970: LIST
5971: PUSH
5972: EMPTY
5973: LIST
5974: LIST
5975: LIST
5976: LIST
5977: LIST
5978: LIST
5979: LIST
5980: LIST
5981: LIST
5982: LIST
5983: ST_TO_ADDR
// for i in cameras do
5984: LD_ADDR_VAR 0 2
5988: PUSH
5989: LD_VAR 0 7
5993: PUSH
5994: FOR_IN
5995: IFFALSE 6026
// HiddenCamera ( i [ 1 ] , i [ 2 ] , side ) ;
5997: LD_VAR 0 2
6001: PUSH
6002: LD_INT 1
6004: ARRAY
6005: PPUSH
6006: LD_VAR 0 2
6010: PUSH
6011: LD_INT 2
6013: ARRAY
6014: PPUSH
6015: LD_VAR 0 8
6019: PPUSH
6020: CALL_OW 244
6024: GO 5994
6026: POP
6027: POP
// tmp := [ [ 1 , 144 , 110 , 1 , 0 , 0 ] , [ 3 , 151 , 118 , 0 , 0 , 0 ] , [ 8 , 158 , 110 , 4 , 10 , 15 ] , [ 23 , 154 , 121 , 5 , 0 , 0 ] , [ 22 , 155 , 118 , 4 , 0 , 0 ] , [ 21 , 151 , 122 , 0 , 0 , 0 ] , [ 18 , 148 , 118 , 1 , 0 , 0 ] , [ 17 , 147 , 114 , 2 , 0 , 0 ] , [ 29 , 163 , 120 , 5 , 0 , 0 ] , [ 27 , 137 , 116 , 3 , 0 , 0 ] , [ 27 , 133 , 111 , 1 , 0 , 0 ] , [ 27 , 132 , 106 , 4 , 0 , 0 ] , [ 26 , 137 , 111 , 0 , 0 , 0 ] , [ 8 , 141 , 117 , 1 , 13 , 11 ] , [ 30 , 140 , 128 , 1 , 0 , 0 ] , [ 5 , 146 , 96 , 3 , 0 , 0 ] , [ 32 , 150 , 98 , 3 , 0 , 0 ] , [ 32 , 142 , 95 , 3 , 0 , 0 ] , [ 32 , 159 , 104 , 3 , 0 , 0 ] , [ 32 , 133 , 95 , 3 , 0 , 0 ] , [ 32 , 131 , 102 , 2 , 0 , 0 ] , [ 32 , 164 , 144 , 0 , 0 , 0 ] , [ 32 , 146 , 139 , 0 , 0 , 0 ] , [ 26 , 143 , 122 , 4 , 0 , 0 ] , [ 26 , 164 , 116 , 2 , 0 , 0 ] , ] ;
6028: LD_ADDR_VAR 0 5
6032: PUSH
6033: LD_INT 1
6035: PUSH
6036: LD_INT 144
6038: PUSH
6039: LD_INT 110
6041: PUSH
6042: LD_INT 1
6044: PUSH
6045: LD_INT 0
6047: PUSH
6048: LD_INT 0
6050: PUSH
6051: EMPTY
6052: LIST
6053: LIST
6054: LIST
6055: LIST
6056: LIST
6057: LIST
6058: PUSH
6059: LD_INT 3
6061: PUSH
6062: LD_INT 151
6064: PUSH
6065: LD_INT 118
6067: PUSH
6068: LD_INT 0
6070: PUSH
6071: LD_INT 0
6073: PUSH
6074: LD_INT 0
6076: PUSH
6077: EMPTY
6078: LIST
6079: LIST
6080: LIST
6081: LIST
6082: LIST
6083: LIST
6084: PUSH
6085: LD_INT 8
6087: PUSH
6088: LD_INT 158
6090: PUSH
6091: LD_INT 110
6093: PUSH
6094: LD_INT 4
6096: PUSH
6097: LD_INT 10
6099: PUSH
6100: LD_INT 15
6102: PUSH
6103: EMPTY
6104: LIST
6105: LIST
6106: LIST
6107: LIST
6108: LIST
6109: LIST
6110: PUSH
6111: LD_INT 23
6113: PUSH
6114: LD_INT 154
6116: PUSH
6117: LD_INT 121
6119: PUSH
6120: LD_INT 5
6122: PUSH
6123: LD_INT 0
6125: PUSH
6126: LD_INT 0
6128: PUSH
6129: EMPTY
6130: LIST
6131: LIST
6132: LIST
6133: LIST
6134: LIST
6135: LIST
6136: PUSH
6137: LD_INT 22
6139: PUSH
6140: LD_INT 155
6142: PUSH
6143: LD_INT 118
6145: PUSH
6146: LD_INT 4
6148: PUSH
6149: LD_INT 0
6151: PUSH
6152: LD_INT 0
6154: PUSH
6155: EMPTY
6156: LIST
6157: LIST
6158: LIST
6159: LIST
6160: LIST
6161: LIST
6162: PUSH
6163: LD_INT 21
6165: PUSH
6166: LD_INT 151
6168: PUSH
6169: LD_INT 122
6171: PUSH
6172: LD_INT 0
6174: PUSH
6175: LD_INT 0
6177: PUSH
6178: LD_INT 0
6180: PUSH
6181: EMPTY
6182: LIST
6183: LIST
6184: LIST
6185: LIST
6186: LIST
6187: LIST
6188: PUSH
6189: LD_INT 18
6191: PUSH
6192: LD_INT 148
6194: PUSH
6195: LD_INT 118
6197: PUSH
6198: LD_INT 1
6200: PUSH
6201: LD_INT 0
6203: PUSH
6204: LD_INT 0
6206: PUSH
6207: EMPTY
6208: LIST
6209: LIST
6210: LIST
6211: LIST
6212: LIST
6213: LIST
6214: PUSH
6215: LD_INT 17
6217: PUSH
6218: LD_INT 147
6220: PUSH
6221: LD_INT 114
6223: PUSH
6224: LD_INT 2
6226: PUSH
6227: LD_INT 0
6229: PUSH
6230: LD_INT 0
6232: PUSH
6233: EMPTY
6234: LIST
6235: LIST
6236: LIST
6237: LIST
6238: LIST
6239: LIST
6240: PUSH
6241: LD_INT 29
6243: PUSH
6244: LD_INT 163
6246: PUSH
6247: LD_INT 120
6249: PUSH
6250: LD_INT 5
6252: PUSH
6253: LD_INT 0
6255: PUSH
6256: LD_INT 0
6258: PUSH
6259: EMPTY
6260: LIST
6261: LIST
6262: LIST
6263: LIST
6264: LIST
6265: LIST
6266: PUSH
6267: LD_INT 27
6269: PUSH
6270: LD_INT 137
6272: PUSH
6273: LD_INT 116
6275: PUSH
6276: LD_INT 3
6278: PUSH
6279: LD_INT 0
6281: PUSH
6282: LD_INT 0
6284: PUSH
6285: EMPTY
6286: LIST
6287: LIST
6288: LIST
6289: LIST
6290: LIST
6291: LIST
6292: PUSH
6293: LD_INT 27
6295: PUSH
6296: LD_INT 133
6298: PUSH
6299: LD_INT 111
6301: PUSH
6302: LD_INT 1
6304: PUSH
6305: LD_INT 0
6307: PUSH
6308: LD_INT 0
6310: PUSH
6311: EMPTY
6312: LIST
6313: LIST
6314: LIST
6315: LIST
6316: LIST
6317: LIST
6318: PUSH
6319: LD_INT 27
6321: PUSH
6322: LD_INT 132
6324: PUSH
6325: LD_INT 106
6327: PUSH
6328: LD_INT 4
6330: PUSH
6331: LD_INT 0
6333: PUSH
6334: LD_INT 0
6336: PUSH
6337: EMPTY
6338: LIST
6339: LIST
6340: LIST
6341: LIST
6342: LIST
6343: LIST
6344: PUSH
6345: LD_INT 26
6347: PUSH
6348: LD_INT 137
6350: PUSH
6351: LD_INT 111
6353: PUSH
6354: LD_INT 0
6356: PUSH
6357: LD_INT 0
6359: PUSH
6360: LD_INT 0
6362: PUSH
6363: EMPTY
6364: LIST
6365: LIST
6366: LIST
6367: LIST
6368: LIST
6369: LIST
6370: PUSH
6371: LD_INT 8
6373: PUSH
6374: LD_INT 141
6376: PUSH
6377: LD_INT 117
6379: PUSH
6380: LD_INT 1
6382: PUSH
6383: LD_INT 13
6385: PUSH
6386: LD_INT 11
6388: PUSH
6389: EMPTY
6390: LIST
6391: LIST
6392: LIST
6393: LIST
6394: LIST
6395: LIST
6396: PUSH
6397: LD_INT 30
6399: PUSH
6400: LD_INT 140
6402: PUSH
6403: LD_INT 128
6405: PUSH
6406: LD_INT 1
6408: PUSH
6409: LD_INT 0
6411: PUSH
6412: LD_INT 0
6414: PUSH
6415: EMPTY
6416: LIST
6417: LIST
6418: LIST
6419: LIST
6420: LIST
6421: LIST
6422: PUSH
6423: LD_INT 5
6425: PUSH
6426: LD_INT 146
6428: PUSH
6429: LD_INT 96
6431: PUSH
6432: LD_INT 3
6434: PUSH
6435: LD_INT 0
6437: PUSH
6438: LD_INT 0
6440: PUSH
6441: EMPTY
6442: LIST
6443: LIST
6444: LIST
6445: LIST
6446: LIST
6447: LIST
6448: PUSH
6449: LD_INT 32
6451: PUSH
6452: LD_INT 150
6454: PUSH
6455: LD_INT 98
6457: PUSH
6458: LD_INT 3
6460: PUSH
6461: LD_INT 0
6463: PUSH
6464: LD_INT 0
6466: PUSH
6467: EMPTY
6468: LIST
6469: LIST
6470: LIST
6471: LIST
6472: LIST
6473: LIST
6474: PUSH
6475: LD_INT 32
6477: PUSH
6478: LD_INT 142
6480: PUSH
6481: LD_INT 95
6483: PUSH
6484: LD_INT 3
6486: PUSH
6487: LD_INT 0
6489: PUSH
6490: LD_INT 0
6492: PUSH
6493: EMPTY
6494: LIST
6495: LIST
6496: LIST
6497: LIST
6498: LIST
6499: LIST
6500: PUSH
6501: LD_INT 32
6503: PUSH
6504: LD_INT 159
6506: PUSH
6507: LD_INT 104
6509: PUSH
6510: LD_INT 3
6512: PUSH
6513: LD_INT 0
6515: PUSH
6516: LD_INT 0
6518: PUSH
6519: EMPTY
6520: LIST
6521: LIST
6522: LIST
6523: LIST
6524: LIST
6525: LIST
6526: PUSH
6527: LD_INT 32
6529: PUSH
6530: LD_INT 133
6532: PUSH
6533: LD_INT 95
6535: PUSH
6536: LD_INT 3
6538: PUSH
6539: LD_INT 0
6541: PUSH
6542: LD_INT 0
6544: PUSH
6545: EMPTY
6546: LIST
6547: LIST
6548: LIST
6549: LIST
6550: LIST
6551: LIST
6552: PUSH
6553: LD_INT 32
6555: PUSH
6556: LD_INT 131
6558: PUSH
6559: LD_INT 102
6561: PUSH
6562: LD_INT 2
6564: PUSH
6565: LD_INT 0
6567: PUSH
6568: LD_INT 0
6570: PUSH
6571: EMPTY
6572: LIST
6573: LIST
6574: LIST
6575: LIST
6576: LIST
6577: LIST
6578: PUSH
6579: LD_INT 32
6581: PUSH
6582: LD_INT 164
6584: PUSH
6585: LD_INT 144
6587: PUSH
6588: LD_INT 0
6590: PUSH
6591: LD_INT 0
6593: PUSH
6594: LD_INT 0
6596: PUSH
6597: EMPTY
6598: LIST
6599: LIST
6600: LIST
6601: LIST
6602: LIST
6603: LIST
6604: PUSH
6605: LD_INT 32
6607: PUSH
6608: LD_INT 146
6610: PUSH
6611: LD_INT 139
6613: PUSH
6614: LD_INT 0
6616: PUSH
6617: LD_INT 0
6619: PUSH
6620: LD_INT 0
6622: PUSH
6623: EMPTY
6624: LIST
6625: LIST
6626: LIST
6627: LIST
6628: LIST
6629: LIST
6630: PUSH
6631: LD_INT 26
6633: PUSH
6634: LD_INT 143
6636: PUSH
6637: LD_INT 122
6639: PUSH
6640: LD_INT 4
6642: PUSH
6643: LD_INT 0
6645: PUSH
6646: LD_INT 0
6648: PUSH
6649: EMPTY
6650: LIST
6651: LIST
6652: LIST
6653: LIST
6654: LIST
6655: LIST
6656: PUSH
6657: LD_INT 26
6659: PUSH
6660: LD_INT 164
6662: PUSH
6663: LD_INT 116
6665: PUSH
6666: LD_INT 2
6668: PUSH
6669: LD_INT 0
6671: PUSH
6672: LD_INT 0
6674: PUSH
6675: EMPTY
6676: LIST
6677: LIST
6678: LIST
6679: LIST
6680: LIST
6681: LIST
6682: PUSH
6683: EMPTY
6684: LIST
6685: LIST
6686: LIST
6687: LIST
6688: LIST
6689: LIST
6690: LIST
6691: LIST
6692: LIST
6693: LIST
6694: LIST
6695: LIST
6696: LIST
6697: LIST
6698: LIST
6699: LIST
6700: LIST
6701: LIST
6702: LIST
6703: LIST
6704: LIST
6705: LIST
6706: LIST
6707: LIST
6708: LIST
6709: ST_TO_ADDR
// for i in tmp do
6710: LD_ADDR_VAR 0 2
6714: PUSH
6715: LD_VAR 0 5
6719: PUSH
6720: FOR_IN
6721: IFFALSE 6952
// begin uc_side := side ;
6723: LD_ADDR_OWVAR 20
6727: PUSH
6728: LD_VAR 0 8
6732: ST_TO_ADDR
// uc_nation := nation_arabian ;
6733: LD_ADDR_OWVAR 21
6737: PUSH
6738: LD_INT 2
6740: ST_TO_ADDR
// bc_type := i [ 1 ] ;
6741: LD_ADDR_OWVAR 42
6745: PUSH
6746: LD_VAR 0 2
6750: PUSH
6751: LD_INT 1
6753: ARRAY
6754: ST_TO_ADDR
// bc_level := rand ( 5 , 6 ) ;
6755: LD_ADDR_OWVAR 43
6759: PUSH
6760: LD_INT 5
6762: PPUSH
6763: LD_INT 6
6765: PPUSH
6766: CALL_OW 12
6770: ST_TO_ADDR
// bc_kind1 := i [ 5 ] ;
6771: LD_ADDR_OWVAR 44
6775: PUSH
6776: LD_VAR 0 2
6780: PUSH
6781: LD_INT 5
6783: ARRAY
6784: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
6785: LD_ADDR_OWVAR 45
6789: PUSH
6790: LD_VAR 0 2
6794: PUSH
6795: LD_INT 6
6797: ARRAY
6798: ST_TO_ADDR
// sr := 0 ;
6799: LD_ADDR_VAR 0 9
6803: PUSH
6804: LD_INT 0
6806: ST_TO_ADDR
// if i [ 1 ] = b_oil_mine then
6807: LD_VAR 0 2
6811: PUSH
6812: LD_INT 1
6814: ARRAY
6815: PUSH
6816: LD_INT 29
6818: EQUAL
6819: IFFALSE 6831
// sr := mat_oil else
6821: LD_ADDR_VAR 0 9
6825: PUSH
6826: LD_INT 2
6828: ST_TO_ADDR
6829: GO 6853
// if i [ 1 ] = b_siberite_mine then
6831: LD_VAR 0 2
6835: PUSH
6836: LD_INT 1
6838: ARRAY
6839: PUSH
6840: LD_INT 30
6842: EQUAL
6843: IFFALSE 6853
// sr := mat_siberit ;
6845: LD_ADDR_VAR 0 9
6849: PUSH
6850: LD_INT 3
6852: ST_TO_ADDR
// if sr then
6853: LD_VAR 0 9
6857: IFFALSE 6913
// begin CreateDepositXY ( i [ 2 ] , i [ 3 ] , sr ) ;
6859: LD_VAR 0 2
6863: PUSH
6864: LD_INT 2
6866: ARRAY
6867: PPUSH
6868: LD_VAR 0 2
6872: PUSH
6873: LD_INT 3
6875: ARRAY
6876: PPUSH
6877: LD_VAR 0 9
6881: PPUSH
6882: CALL_OW 62
// SetResourceVisibility ( i [ 2 ] , i [ 3 ] , side ) ;
6886: LD_VAR 0 2
6890: PUSH
6891: LD_INT 2
6893: ARRAY
6894: PPUSH
6895: LD_VAR 0 2
6899: PUSH
6900: LD_INT 3
6902: ARRAY
6903: PPUSH
6904: LD_VAR 0 8
6908: PPUSH
6909: CALL_OW 441
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
6913: LD_ADDR_VAR 0 3
6917: PUSH
6918: LD_VAR 0 2
6922: PUSH
6923: LD_INT 2
6925: ARRAY
6926: PPUSH
6927: LD_VAR 0 2
6931: PUSH
6932: LD_INT 3
6934: ARRAY
6935: PPUSH
6936: LD_VAR 0 2
6940: PUSH
6941: LD_INT 4
6943: ARRAY
6944: PPUSH
6945: CALL_OW 47
6949: ST_TO_ADDR
// end ;
6950: GO 6720
6952: POP
6953: POP
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
6954: LD_ADDR_VAR 0 10
6958: PUSH
6959: LD_INT 22
6961: PUSH
6962: LD_VAR 0 8
6966: PUSH
6967: EMPTY
6968: LIST
6969: LIST
6970: PUSH
6971: LD_INT 30
6973: PUSH
6974: LD_INT 1
6976: PUSH
6977: EMPTY
6978: LIST
6979: LIST
6980: PUSH
6981: EMPTY
6982: LIST
6983: LIST
6984: PPUSH
6985: CALL_OW 69
6989: ST_TO_ADDR
// if not depot then
6990: LD_VAR 0 10
6994: NOT
6995: IFFALSE 6999
// exit ;
6997: GO 7245
// base := PrepareBase ( depot [ 1 ] , legBase , 0 , [ 7 , 8 , 10 ] [ Difficulty ] , [ 3000 , 300 , 100 ] , [ 14 , 6 , 6 , 5 ] ) ;
6999: LD_ADDR_VAR 0 11
7003: PUSH
7004: LD_VAR 0 10
7008: PUSH
7009: LD_INT 1
7011: ARRAY
7012: PPUSH
7013: LD_INT 6
7015: PPUSH
7016: LD_INT 0
7018: PPUSH
7019: LD_INT 7
7021: PUSH
7022: LD_INT 8
7024: PUSH
7025: LD_INT 10
7027: PUSH
7028: EMPTY
7029: LIST
7030: LIST
7031: LIST
7032: PUSH
7033: LD_OWVAR 67
7037: ARRAY
7038: PPUSH
7039: LD_INT 3000
7041: PUSH
7042: LD_INT 300
7044: PUSH
7045: LD_INT 100
7047: PUSH
7048: EMPTY
7049: LIST
7050: LIST
7051: LIST
7052: PPUSH
7053: LD_INT 14
7055: PUSH
7056: LD_INT 6
7058: PUSH
7059: LD_INT 6
7061: PUSH
7062: LD_INT 5
7064: PUSH
7065: EMPTY
7066: LIST
7067: LIST
7068: LIST
7069: LIST
7070: PPUSH
7071: CALL 27588 0 6
7075: ST_TO_ADDR
// if not base then
7076: LD_VAR 0 11
7080: NOT
7081: IFFALSE 7085
// exit ;
7083: GO 7245
// if Difficulty > 1 then
7085: LD_OWVAR 67
7089: PUSH
7090: LD_INT 1
7092: GREATER
7093: IFFALSE 7166
// begin InitHc ;
7095: CALL_OW 19
// PrepareHuman ( sex_male , class_sniper , [ 5 , 8 ] [ Difficulty - 1 ] ) ;
7099: LD_INT 1
7101: PPUSH
7102: LD_INT 5
7104: PPUSH
7105: LD_INT 5
7107: PUSH
7108: LD_INT 8
7110: PUSH
7111: EMPTY
7112: LIST
7113: LIST
7114: PUSH
7115: LD_OWVAR 67
7119: PUSH
7120: LD_INT 1
7122: MINUS
7123: ARRAY
7124: PPUSH
7125: CALL_OW 380
// for i = 1 to Difficulty do
7129: LD_ADDR_VAR 0 2
7133: PUSH
7134: DOUBLE
7135: LD_INT 1
7137: DEC
7138: ST_TO_ADDR
7139: LD_OWVAR 67
7143: PUSH
7144: FOR_TO
7145: IFFALSE 7164
// PlaceUnitArea ( CreateHuman , sniperGuardArea , false ) ;
7147: CALL_OW 44
7151: PPUSH
7152: LD_INT 24
7154: PPUSH
7155: LD_INT 0
7157: PPUSH
7158: CALL_OW 49
7162: GO 7144
7164: POP
7165: POP
// end ; mc_bases := Replace ( mc_bases , mc_leg , base ) ;
7166: LD_ADDR_EXP 44
7170: PUSH
7171: LD_EXP 44
7175: PPUSH
7176: LD_EXP 6
7180: PPUSH
7181: LD_VAR 0 11
7185: PPUSH
7186: CALL_OW 1
7190: ST_TO_ADDR
// hc_gallery := ru ;
7191: LD_ADDR_OWVAR 33
7195: PUSH
7196: LD_STRING ru
7198: ST_TO_ADDR
// hc_face_number := 44 ;
7199: LD_ADDR_OWVAR 34
7203: PUSH
7204: LD_INT 44
7206: ST_TO_ADDR
// hc_name := Robert Farmer ;
7207: LD_ADDR_OWVAR 26
7211: PUSH
7212: LD_STRING Robert Farmer
7214: ST_TO_ADDR
// hc_sex := sex_male ;
7215: LD_ADDR_OWVAR 27
7219: PUSH
7220: LD_INT 1
7222: ST_TO_ADDR
// hc_class := 1 ;
7223: LD_ADDR_OWVAR 28
7227: PUSH
7228: LD_INT 1
7230: ST_TO_ADDR
// Farmer := CreateHuman ;
7231: LD_ADDR_EXP 13
7235: PUSH
7236: CALL_OW 44
7240: ST_TO_ADDR
// InitHc ;
7241: CALL_OW 19
// end ;
7245: LD_VAR 0 1
7249: RET
// export function PrepareAmericans ; var i , b , tmp , side , sr , base , depot ; begin
7250: LD_INT 0
7252: PPUSH
7253: PPUSH
7254: PPUSH
7255: PPUSH
7256: PPUSH
7257: PPUSH
7258: PPUSH
7259: PPUSH
// PrepareNature ( 0 , 0 , 4 , 0 , 0 , 0 , 0 , amerApe , 0 ) ;
7260: LD_INT 0
7262: PPUSH
7263: LD_INT 0
7265: PPUSH
7266: LD_INT 4
7268: PPUSH
7269: LD_INT 0
7271: PPUSH
7272: LD_INT 0
7274: PPUSH
7275: LD_INT 0
7277: PPUSH
7278: LD_INT 0
7280: PPUSH
7281: LD_INT 10
7283: PPUSH
7284: LD_INT 0
7286: PPUSH
7287: CALL 51970 0 9
// side := 4 ;
7291: LD_ADDR_VAR 0 5
7295: PUSH
7296: LD_INT 4
7298: ST_TO_ADDR
// tmp := [ [ 1 , 144 , 18 , 4 , 0 , 0 ] , [ 3 , 137 , 8 , 4 , 0 , 0 ] , [ 22 , 141 , 8 , 4 , 0 , 0 ] , [ 25 , 137 , 5 , 3 , 0 , 0 ] , [ 18 , 137 , 12 , 0 , 0 , 0 ] , [ 17 , 133 , 4 , 2 , 0 , 0 ] , [ 16 , 140 , 11 , 5 , 0 , 0 ] , [ 8 , 149 , 26 , 4 , 10 , 15 ] , [ 8 , 142 , 26 , 1 , 11 , 12 ] , [ 27 , 153 , 32 , 5 , 0 , 0 ] , [ 27 , 145 , 32 , 3 , 0 , 0 ] , [ 27 , 138 , 2 , 4 , 0 , 0 ] , [ 27 , 144 , 13 , 0 , 0 , 0 ] , [ 26 , 124 , 2 , 4 , 0 , 0 ] , [ 26 , 121 , 2 , 2 , 0 , 0 ] , [ 26 , 118 , 2 , 1 , 0 , 0 ] , [ 29 , 159 , 47 , 2 , 0 , 0 ] , [ 32 , 146 , 41 , 0 , 0 , 0 ] , [ 33 , 136 , 37 , 0 , 0 , 0 ] , [ 33 , 132 , 34 , 0 , 0 , 0 ] , [ 36 , 124 , 7 , 1 , 0 , 0 ] , [ 5 , 124 , 19 , 0 , 0 , 0 ] , [ 32 , 127 , 23 , 0 , 0 , 0 ] ] ;
7299: LD_ADDR_VAR 0 4
7303: PUSH
7304: LD_INT 1
7306: PUSH
7307: LD_INT 144
7309: PUSH
7310: LD_INT 18
7312: PUSH
7313: LD_INT 4
7315: PUSH
7316: LD_INT 0
7318: PUSH
7319: LD_INT 0
7321: PUSH
7322: EMPTY
7323: LIST
7324: LIST
7325: LIST
7326: LIST
7327: LIST
7328: LIST
7329: PUSH
7330: LD_INT 3
7332: PUSH
7333: LD_INT 137
7335: PUSH
7336: LD_INT 8
7338: PUSH
7339: LD_INT 4
7341: PUSH
7342: LD_INT 0
7344: PUSH
7345: LD_INT 0
7347: PUSH
7348: EMPTY
7349: LIST
7350: LIST
7351: LIST
7352: LIST
7353: LIST
7354: LIST
7355: PUSH
7356: LD_INT 22
7358: PUSH
7359: LD_INT 141
7361: PUSH
7362: LD_INT 8
7364: PUSH
7365: LD_INT 4
7367: PUSH
7368: LD_INT 0
7370: PUSH
7371: LD_INT 0
7373: PUSH
7374: EMPTY
7375: LIST
7376: LIST
7377: LIST
7378: LIST
7379: LIST
7380: LIST
7381: PUSH
7382: LD_INT 25
7384: PUSH
7385: LD_INT 137
7387: PUSH
7388: LD_INT 5
7390: PUSH
7391: LD_INT 3
7393: PUSH
7394: LD_INT 0
7396: PUSH
7397: LD_INT 0
7399: PUSH
7400: EMPTY
7401: LIST
7402: LIST
7403: LIST
7404: LIST
7405: LIST
7406: LIST
7407: PUSH
7408: LD_INT 18
7410: PUSH
7411: LD_INT 137
7413: PUSH
7414: LD_INT 12
7416: PUSH
7417: LD_INT 0
7419: PUSH
7420: LD_INT 0
7422: PUSH
7423: LD_INT 0
7425: PUSH
7426: EMPTY
7427: LIST
7428: LIST
7429: LIST
7430: LIST
7431: LIST
7432: LIST
7433: PUSH
7434: LD_INT 17
7436: PUSH
7437: LD_INT 133
7439: PUSH
7440: LD_INT 4
7442: PUSH
7443: LD_INT 2
7445: PUSH
7446: LD_INT 0
7448: PUSH
7449: LD_INT 0
7451: PUSH
7452: EMPTY
7453: LIST
7454: LIST
7455: LIST
7456: LIST
7457: LIST
7458: LIST
7459: PUSH
7460: LD_INT 16
7462: PUSH
7463: LD_INT 140
7465: PUSH
7466: LD_INT 11
7468: PUSH
7469: LD_INT 5
7471: PUSH
7472: LD_INT 0
7474: PUSH
7475: LD_INT 0
7477: PUSH
7478: EMPTY
7479: LIST
7480: LIST
7481: LIST
7482: LIST
7483: LIST
7484: LIST
7485: PUSH
7486: LD_INT 8
7488: PUSH
7489: LD_INT 149
7491: PUSH
7492: LD_INT 26
7494: PUSH
7495: LD_INT 4
7497: PUSH
7498: LD_INT 10
7500: PUSH
7501: LD_INT 15
7503: PUSH
7504: EMPTY
7505: LIST
7506: LIST
7507: LIST
7508: LIST
7509: LIST
7510: LIST
7511: PUSH
7512: LD_INT 8
7514: PUSH
7515: LD_INT 142
7517: PUSH
7518: LD_INT 26
7520: PUSH
7521: LD_INT 1
7523: PUSH
7524: LD_INT 11
7526: PUSH
7527: LD_INT 12
7529: PUSH
7530: EMPTY
7531: LIST
7532: LIST
7533: LIST
7534: LIST
7535: LIST
7536: LIST
7537: PUSH
7538: LD_INT 27
7540: PUSH
7541: LD_INT 153
7543: PUSH
7544: LD_INT 32
7546: PUSH
7547: LD_INT 5
7549: PUSH
7550: LD_INT 0
7552: PUSH
7553: LD_INT 0
7555: PUSH
7556: EMPTY
7557: LIST
7558: LIST
7559: LIST
7560: LIST
7561: LIST
7562: LIST
7563: PUSH
7564: LD_INT 27
7566: PUSH
7567: LD_INT 145
7569: PUSH
7570: LD_INT 32
7572: PUSH
7573: LD_INT 3
7575: PUSH
7576: LD_INT 0
7578: PUSH
7579: LD_INT 0
7581: PUSH
7582: EMPTY
7583: LIST
7584: LIST
7585: LIST
7586: LIST
7587: LIST
7588: LIST
7589: PUSH
7590: LD_INT 27
7592: PUSH
7593: LD_INT 138
7595: PUSH
7596: LD_INT 2
7598: PUSH
7599: LD_INT 4
7601: PUSH
7602: LD_INT 0
7604: PUSH
7605: LD_INT 0
7607: PUSH
7608: EMPTY
7609: LIST
7610: LIST
7611: LIST
7612: LIST
7613: LIST
7614: LIST
7615: PUSH
7616: LD_INT 27
7618: PUSH
7619: LD_INT 144
7621: PUSH
7622: LD_INT 13
7624: PUSH
7625: LD_INT 0
7627: PUSH
7628: LD_INT 0
7630: PUSH
7631: LD_INT 0
7633: PUSH
7634: EMPTY
7635: LIST
7636: LIST
7637: LIST
7638: LIST
7639: LIST
7640: LIST
7641: PUSH
7642: LD_INT 26
7644: PUSH
7645: LD_INT 124
7647: PUSH
7648: LD_INT 2
7650: PUSH
7651: LD_INT 4
7653: PUSH
7654: LD_INT 0
7656: PUSH
7657: LD_INT 0
7659: PUSH
7660: EMPTY
7661: LIST
7662: LIST
7663: LIST
7664: LIST
7665: LIST
7666: LIST
7667: PUSH
7668: LD_INT 26
7670: PUSH
7671: LD_INT 121
7673: PUSH
7674: LD_INT 2
7676: PUSH
7677: LD_INT 2
7679: PUSH
7680: LD_INT 0
7682: PUSH
7683: LD_INT 0
7685: PUSH
7686: EMPTY
7687: LIST
7688: LIST
7689: LIST
7690: LIST
7691: LIST
7692: LIST
7693: PUSH
7694: LD_INT 26
7696: PUSH
7697: LD_INT 118
7699: PUSH
7700: LD_INT 2
7702: PUSH
7703: LD_INT 1
7705: PUSH
7706: LD_INT 0
7708: PUSH
7709: LD_INT 0
7711: PUSH
7712: EMPTY
7713: LIST
7714: LIST
7715: LIST
7716: LIST
7717: LIST
7718: LIST
7719: PUSH
7720: LD_INT 29
7722: PUSH
7723: LD_INT 159
7725: PUSH
7726: LD_INT 47
7728: PUSH
7729: LD_INT 2
7731: PUSH
7732: LD_INT 0
7734: PUSH
7735: LD_INT 0
7737: PUSH
7738: EMPTY
7739: LIST
7740: LIST
7741: LIST
7742: LIST
7743: LIST
7744: LIST
7745: PUSH
7746: LD_INT 32
7748: PUSH
7749: LD_INT 146
7751: PUSH
7752: LD_INT 41
7754: PUSH
7755: LD_INT 0
7757: PUSH
7758: LD_INT 0
7760: PUSH
7761: LD_INT 0
7763: PUSH
7764: EMPTY
7765: LIST
7766: LIST
7767: LIST
7768: LIST
7769: LIST
7770: LIST
7771: PUSH
7772: LD_INT 33
7774: PUSH
7775: LD_INT 136
7777: PUSH
7778: LD_INT 37
7780: PUSH
7781: LD_INT 0
7783: PUSH
7784: LD_INT 0
7786: PUSH
7787: LD_INT 0
7789: PUSH
7790: EMPTY
7791: LIST
7792: LIST
7793: LIST
7794: LIST
7795: LIST
7796: LIST
7797: PUSH
7798: LD_INT 33
7800: PUSH
7801: LD_INT 132
7803: PUSH
7804: LD_INT 34
7806: PUSH
7807: LD_INT 0
7809: PUSH
7810: LD_INT 0
7812: PUSH
7813: LD_INT 0
7815: PUSH
7816: EMPTY
7817: LIST
7818: LIST
7819: LIST
7820: LIST
7821: LIST
7822: LIST
7823: PUSH
7824: LD_INT 36
7826: PUSH
7827: LD_INT 124
7829: PUSH
7830: LD_INT 7
7832: PUSH
7833: LD_INT 1
7835: PUSH
7836: LD_INT 0
7838: PUSH
7839: LD_INT 0
7841: PUSH
7842: EMPTY
7843: LIST
7844: LIST
7845: LIST
7846: LIST
7847: LIST
7848: LIST
7849: PUSH
7850: LD_INT 5
7852: PUSH
7853: LD_INT 124
7855: PUSH
7856: LD_INT 19
7858: PUSH
7859: LD_INT 0
7861: PUSH
7862: LD_INT 0
7864: PUSH
7865: LD_INT 0
7867: PUSH
7868: EMPTY
7869: LIST
7870: LIST
7871: LIST
7872: LIST
7873: LIST
7874: LIST
7875: PUSH
7876: LD_INT 32
7878: PUSH
7879: LD_INT 127
7881: PUSH
7882: LD_INT 23
7884: PUSH
7885: LD_INT 0
7887: PUSH
7888: LD_INT 0
7890: PUSH
7891: LD_INT 0
7893: PUSH
7894: EMPTY
7895: LIST
7896: LIST
7897: LIST
7898: LIST
7899: LIST
7900: LIST
7901: PUSH
7902: EMPTY
7903: LIST
7904: LIST
7905: LIST
7906: LIST
7907: LIST
7908: LIST
7909: LIST
7910: LIST
7911: LIST
7912: LIST
7913: LIST
7914: LIST
7915: LIST
7916: LIST
7917: LIST
7918: LIST
7919: LIST
7920: LIST
7921: LIST
7922: LIST
7923: LIST
7924: LIST
7925: LIST
7926: ST_TO_ADDR
// for i in tmp do
7927: LD_ADDR_VAR 0 2
7931: PUSH
7932: LD_VAR 0 4
7936: PUSH
7937: FOR_IN
7938: IFFALSE 8169
// begin uc_side := side ;
7940: LD_ADDR_OWVAR 20
7944: PUSH
7945: LD_VAR 0 5
7949: ST_TO_ADDR
// uc_nation := nation_american ;
7950: LD_ADDR_OWVAR 21
7954: PUSH
7955: LD_INT 1
7957: ST_TO_ADDR
// bc_type := i [ 1 ] ;
7958: LD_ADDR_OWVAR 42
7962: PUSH
7963: LD_VAR 0 2
7967: PUSH
7968: LD_INT 1
7970: ARRAY
7971: ST_TO_ADDR
// bc_level := rand ( 5 , 6 ) ;
7972: LD_ADDR_OWVAR 43
7976: PUSH
7977: LD_INT 5
7979: PPUSH
7980: LD_INT 6
7982: PPUSH
7983: CALL_OW 12
7987: ST_TO_ADDR
// bc_kind1 := i [ 5 ] ;
7988: LD_ADDR_OWVAR 44
7992: PUSH
7993: LD_VAR 0 2
7997: PUSH
7998: LD_INT 5
8000: ARRAY
8001: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
8002: LD_ADDR_OWVAR 45
8006: PUSH
8007: LD_VAR 0 2
8011: PUSH
8012: LD_INT 6
8014: ARRAY
8015: ST_TO_ADDR
// sr := 0 ;
8016: LD_ADDR_VAR 0 6
8020: PUSH
8021: LD_INT 0
8023: ST_TO_ADDR
// if i [ 1 ] = b_oil_mine then
8024: LD_VAR 0 2
8028: PUSH
8029: LD_INT 1
8031: ARRAY
8032: PUSH
8033: LD_INT 29
8035: EQUAL
8036: IFFALSE 8048
// sr := mat_oil else
8038: LD_ADDR_VAR 0 6
8042: PUSH
8043: LD_INT 2
8045: ST_TO_ADDR
8046: GO 8070
// if i [ 1 ] = b_siberite_mine then
8048: LD_VAR 0 2
8052: PUSH
8053: LD_INT 1
8055: ARRAY
8056: PUSH
8057: LD_INT 30
8059: EQUAL
8060: IFFALSE 8070
// sr := mat_siberit ;
8062: LD_ADDR_VAR 0 6
8066: PUSH
8067: LD_INT 3
8069: ST_TO_ADDR
// if sr then
8070: LD_VAR 0 6
8074: IFFALSE 8130
// begin CreateDepositXY ( i [ 2 ] , i [ 3 ] , sr ) ;
8076: LD_VAR 0 2
8080: PUSH
8081: LD_INT 2
8083: ARRAY
8084: PPUSH
8085: LD_VAR 0 2
8089: PUSH
8090: LD_INT 3
8092: ARRAY
8093: PPUSH
8094: LD_VAR 0 6
8098: PPUSH
8099: CALL_OW 62
// SetResourceVisibility ( i [ 2 ] , i [ 3 ] , side ) ;
8103: LD_VAR 0 2
8107: PUSH
8108: LD_INT 2
8110: ARRAY
8111: PPUSH
8112: LD_VAR 0 2
8116: PUSH
8117: LD_INT 3
8119: ARRAY
8120: PPUSH
8121: LD_VAR 0 5
8125: PPUSH
8126: CALL_OW 441
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
8130: LD_ADDR_VAR 0 3
8134: PUSH
8135: LD_VAR 0 2
8139: PUSH
8140: LD_INT 2
8142: ARRAY
8143: PPUSH
8144: LD_VAR 0 2
8148: PUSH
8149: LD_INT 3
8151: ARRAY
8152: PPUSH
8153: LD_VAR 0 2
8157: PUSH
8158: LD_INT 4
8160: ARRAY
8161: PPUSH
8162: CALL_OW 47
8166: ST_TO_ADDR
// end ;
8167: GO 7937
8169: POP
8170: POP
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
8171: LD_ADDR_VAR 0 8
8175: PUSH
8176: LD_INT 22
8178: PUSH
8179: LD_VAR 0 5
8183: PUSH
8184: EMPTY
8185: LIST
8186: LIST
8187: PUSH
8188: LD_INT 30
8190: PUSH
8191: LD_INT 1
8193: PUSH
8194: EMPTY
8195: LIST
8196: LIST
8197: PUSH
8198: EMPTY
8199: LIST
8200: LIST
8201: PPUSH
8202: CALL_OW 69
8206: ST_TO_ADDR
// if not depot then
8207: LD_VAR 0 8
8211: NOT
8212: IFFALSE 8216
// exit ;
8214: GO 8488
// base := PrepareBase ( depot [ 1 ] , amerBase , theta3 , [ 8 , 7 , 6 ] [ Difficulty ] , [ [ 2500 , 2000 , 1750 ] [ Difficulty ] , [ 300 , 250 , 200 ] [ Difficulty ] , [ 80 , 60 , 50 ] [ Difficulty ] ] , [ 7 , 6 , 5 , 5 ] ) ;
8216: LD_ADDR_VAR 0 7
8220: PUSH
8221: LD_VAR 0 8
8225: PUSH
8226: LD_INT 1
8228: ARRAY
8229: PPUSH
8230: LD_INT 3
8232: PPUSH
8233: LD_STRING theta3
8235: PPUSH
8236: LD_INT 8
8238: PUSH
8239: LD_INT 7
8241: PUSH
8242: LD_INT 6
8244: PUSH
8245: EMPTY
8246: LIST
8247: LIST
8248: LIST
8249: PUSH
8250: LD_OWVAR 67
8254: ARRAY
8255: PPUSH
8256: LD_INT 2500
8258: PUSH
8259: LD_INT 2000
8261: PUSH
8262: LD_INT 1750
8264: PUSH
8265: EMPTY
8266: LIST
8267: LIST
8268: LIST
8269: PUSH
8270: LD_OWVAR 67
8274: ARRAY
8275: PUSH
8276: LD_INT 300
8278: PUSH
8279: LD_INT 250
8281: PUSH
8282: LD_INT 200
8284: PUSH
8285: EMPTY
8286: LIST
8287: LIST
8288: LIST
8289: PUSH
8290: LD_OWVAR 67
8294: ARRAY
8295: PUSH
8296: LD_INT 80
8298: PUSH
8299: LD_INT 60
8301: PUSH
8302: LD_INT 50
8304: PUSH
8305: EMPTY
8306: LIST
8307: LIST
8308: LIST
8309: PUSH
8310: LD_OWVAR 67
8314: ARRAY
8315: PUSH
8316: EMPTY
8317: LIST
8318: LIST
8319: LIST
8320: PPUSH
8321: LD_INT 7
8323: PUSH
8324: LD_INT 6
8326: PUSH
8327: LD_INT 5
8329: PUSH
8330: LD_INT 5
8332: PUSH
8333: EMPTY
8334: LIST
8335: LIST
8336: LIST
8337: LIST
8338: PPUSH
8339: CALL 27588 0 6
8343: ST_TO_ADDR
// if not base then
8344: LD_VAR 0 7
8348: NOT
8349: IFFALSE 8353
// exit ;
8351: GO 8488
// mc_bases := Replace ( mc_bases , mc_amer , base ) ;
8353: LD_ADDR_EXP 44
8357: PUSH
8358: LD_EXP 44
8362: PPUSH
8363: LD_EXP 5
8367: PPUSH
8368: LD_VAR 0 7
8372: PPUSH
8373: CALL_OW 1
8377: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 7 ) ;
8378: LD_INT 1
8380: PPUSH
8381: LD_INT 1
8383: PPUSH
8384: LD_INT 7
8386: PPUSH
8387: CALL_OW 380
// allyCommander := CreateHuman ;
8391: LD_ADDR_EXP 11
8395: PUSH
8396: CALL_OW 44
8400: ST_TO_ADDR
// PlaceUnitXY ( allyCommander , 139 , 15 , false ) ;
8401: LD_EXP 11
8405: PPUSH
8406: LD_INT 139
8408: PPUSH
8409: LD_INT 15
8411: PPUSH
8412: LD_INT 0
8414: PPUSH
8415: CALL_OW 48
// ComTurnXY ( allyCommander , 137 , 15 ) ;
8419: LD_EXP 11
8423: PPUSH
8424: LD_INT 137
8426: PPUSH
8427: LD_INT 15
8429: PPUSH
8430: CALL_OW 118
// hc_gallery := us ;
8434: LD_ADDR_OWVAR 33
8438: PUSH
8439: LD_STRING us
8441: ST_TO_ADDR
// hc_face_number := 7 ;
8442: LD_ADDR_OWVAR 34
8446: PUSH
8447: LD_INT 7
8449: ST_TO_ADDR
// hc_name := Arthur Powell ;
8450: LD_ADDR_OWVAR 26
8454: PUSH
8455: LD_STRING Arthur Powell
8457: ST_TO_ADDR
// hc_sex := sex_male ;
8458: LD_ADDR_OWVAR 27
8462: PUSH
8463: LD_INT 1
8465: ST_TO_ADDR
// hc_class := 1 ;
8466: LD_ADDR_OWVAR 28
8470: PUSH
8471: LD_INT 1
8473: ST_TO_ADDR
// Powell := CreateHuman ;
8474: LD_ADDR_EXP 12
8478: PUSH
8479: CALL_OW 44
8483: ST_TO_ADDR
// InitHc ;
8484: CALL_OW 19
// end ;
8488: LD_VAR 0 1
8492: RET
// export function PreparePlayer ; var i , side , techs , tanks , cl , chassis , engines , weapons ; begin
8493: LD_INT 0
8495: PPUSH
8496: PPUSH
8497: PPUSH
8498: PPUSH
8499: PPUSH
8500: PPUSH
8501: PPUSH
8502: PPUSH
8503: PPUSH
// side := 1 ;
8504: LD_ADDR_VAR 0 3
8508: PUSH
8509: LD_INT 1
8511: ST_TO_ADDR
// result := [ [ ] , [ ] ] ;
8512: LD_ADDR_VAR 0 1
8516: PUSH
8517: EMPTY
8518: PUSH
8519: EMPTY
8520: PUSH
8521: EMPTY
8522: LIST
8523: LIST
8524: ST_TO_ADDR
// uc_side := side ;
8525: LD_ADDR_OWVAR 20
8529: PUSH
8530: LD_VAR 0 3
8534: ST_TO_ADDR
// uc_nation := nation_american ;
8535: LD_ADDR_OWVAR 21
8539: PUSH
8540: LD_INT 1
8542: ST_TO_ADDR
// InitHc ;
8543: CALL_OW 19
// InitVc ;
8547: CALL_OW 20
// hc_importance := 0 ;
8551: LD_ADDR_OWVAR 32
8555: PUSH
8556: LD_INT 0
8558: ST_TO_ADDR
// chassis := [ us_medium_wheeled , us_medium_tracked , us_medium_tracked ] ;
8559: LD_ADDR_VAR 0 7
8563: PUSH
8564: LD_INT 2
8566: PUSH
8567: LD_INT 3
8569: PUSH
8570: LD_INT 3
8572: PUSH
8573: EMPTY
8574: LIST
8575: LIST
8576: LIST
8577: ST_TO_ADDR
// if commander = 2 then
8578: LD_EXP 25
8582: PUSH
8583: LD_INT 2
8585: EQUAL
8586: IFFALSE 8607
// chassis := [ us_medium_tracked , us_heavy_tracked , us_heavy_tracked ] ;
8588: LD_ADDR_VAR 0 7
8592: PUSH
8593: LD_INT 3
8595: PUSH
8596: LD_INT 4
8598: PUSH
8599: LD_INT 4
8601: PUSH
8602: EMPTY
8603: LIST
8604: LIST
8605: LIST
8606: ST_TO_ADDR
// if commander = 3 then
8607: LD_EXP 25
8611: PUSH
8612: LD_INT 3
8614: EQUAL
8615: IFFALSE 8636
// chassis := [ us_medium_wheeled , us_morphling , us_morphling ] ;
8617: LD_ADDR_VAR 0 7
8621: PUSH
8622: LD_INT 2
8624: PUSH
8625: LD_INT 5
8627: PUSH
8628: LD_INT 5
8630: PUSH
8631: EMPTY
8632: LIST
8633: LIST
8634: LIST
8635: ST_TO_ADDR
// engines := [ engine_solar , engine_solar , engine_combustion ] ;
8636: LD_ADDR_VAR 0 8
8640: PUSH
8641: LD_INT 2
8643: PUSH
8644: LD_INT 2
8646: PUSH
8647: LD_INT 1
8649: PUSH
8650: EMPTY
8651: LIST
8652: LIST
8653: LIST
8654: ST_TO_ADDR
// if commander = 2 then
8655: LD_EXP 25
8659: PUSH
8660: LD_INT 2
8662: EQUAL
8663: IFFALSE 8684
// engines := [ engine_combustion , engine_combustion , engine_siberite ] ;
8665: LD_ADDR_VAR 0 8
8669: PUSH
8670: LD_INT 1
8672: PUSH
8673: LD_INT 1
8675: PUSH
8676: LD_INT 3
8678: PUSH
8679: EMPTY
8680: LIST
8681: LIST
8682: LIST
8683: ST_TO_ADDR
// if commander = 3 then
8684: LD_EXP 25
8688: PUSH
8689: LD_INT 3
8691: EQUAL
8692: IFFALSE 8713
// engines := [ engine_siberite , engine_siberite , engine_combustion ] ;
8694: LD_ADDR_VAR 0 8
8698: PUSH
8699: LD_INT 3
8701: PUSH
8702: LD_INT 3
8704: PUSH
8705: LD_INT 1
8707: PUSH
8708: EMPTY
8709: LIST
8710: LIST
8711: LIST
8712: ST_TO_ADDR
// weapons := [ us_double_gun , us_light_gun , us_gatling_gun ] ;
8713: LD_ADDR_VAR 0 9
8717: PUSH
8718: LD_INT 5
8720: PUSH
8721: LD_INT 3
8723: PUSH
8724: LD_INT 4
8726: PUSH
8727: EMPTY
8728: LIST
8729: LIST
8730: LIST
8731: ST_TO_ADDR
// if commander = 2 then
8732: LD_EXP 25
8736: PUSH
8737: LD_INT 2
8739: EQUAL
8740: IFFALSE 8761
// weapons := [ us_rocket_launcher , us_double_gun , us_heavy_gun ] ;
8742: LD_ADDR_VAR 0 9
8746: PUSH
8747: LD_INT 7
8749: PUSH
8750: LD_INT 5
8752: PUSH
8753: LD_INT 6
8755: PUSH
8756: EMPTY
8757: LIST
8758: LIST
8759: LIST
8760: ST_TO_ADDR
// if commander = 3 then
8761: LD_EXP 25
8765: PUSH
8766: LD_INT 3
8768: EQUAL
8769: IFFALSE 8790
// weapons := [ us_laser , us_double_laser , us_rocket_launcher ] ;
8771: LD_ADDR_VAR 0 9
8775: PUSH
8776: LD_INT 9
8778: PUSH
8779: LD_INT 10
8781: PUSH
8782: LD_INT 7
8784: PUSH
8785: EMPTY
8786: LIST
8787: LIST
8788: LIST
8789: ST_TO_ADDR
// tanks := [ 5 , 5 , 4 ] [ Difficulty ] ;
8790: LD_ADDR_VAR 0 5
8794: PUSH
8795: LD_INT 5
8797: PUSH
8798: LD_INT 5
8800: PUSH
8801: LD_INT 4
8803: PUSH
8804: EMPTY
8805: LIST
8806: LIST
8807: LIST
8808: PUSH
8809: LD_OWVAR 67
8813: ARRAY
8814: ST_TO_ADDR
// if commander = 2 then
8815: LD_EXP 25
8819: PUSH
8820: LD_INT 2
8822: EQUAL
8823: IFFALSE 8839
// tanks := tanks + 3 ;
8825: LD_ADDR_VAR 0 5
8829: PUSH
8830: LD_VAR 0 5
8834: PUSH
8835: LD_INT 3
8837: PLUS
8838: ST_TO_ADDR
// for i = 1 to tanks do
8839: LD_ADDR_VAR 0 2
8843: PUSH
8844: DOUBLE
8845: LD_INT 1
8847: DEC
8848: ST_TO_ADDR
8849: LD_VAR 0 5
8853: PUSH
8854: FOR_TO
8855: IFFALSE 8965
// begin PrepareVehicle ( chassis [ i mod 3 + 1 ] , engines [ rand ( 1 , 3 ) ] , control_manual , weapons [ i mod 3 + 1 ] , rand ( 60 , 70 ) ) ;
8857: LD_VAR 0 7
8861: PUSH
8862: LD_VAR 0 2
8866: PUSH
8867: LD_INT 3
8869: MOD
8870: PUSH
8871: LD_INT 1
8873: PLUS
8874: ARRAY
8875: PPUSH
8876: LD_VAR 0 8
8880: PUSH
8881: LD_INT 1
8883: PPUSH
8884: LD_INT 3
8886: PPUSH
8887: CALL_OW 12
8891: ARRAY
8892: PPUSH
8893: LD_INT 1
8895: PPUSH
8896: LD_VAR 0 9
8900: PUSH
8901: LD_VAR 0 2
8905: PUSH
8906: LD_INT 3
8908: MOD
8909: PUSH
8910: LD_INT 1
8912: PLUS
8913: ARRAY
8914: PPUSH
8915: LD_INT 60
8917: PPUSH
8918: LD_INT 70
8920: PPUSH
8921: CALL_OW 12
8925: PPUSH
8926: CALL 24179 0 5
// result := Replace ( result , 1 , result [ 1 ] ^ CreateVehicle ) ;
8930: LD_ADDR_VAR 0 1
8934: PUSH
8935: LD_VAR 0 1
8939: PPUSH
8940: LD_INT 1
8942: PPUSH
8943: LD_VAR 0 1
8947: PUSH
8948: LD_INT 1
8950: ARRAY
8951: PUSH
8952: CALL_OW 45
8956: ADD
8957: PPUSH
8958: CALL_OW 1
8962: ST_TO_ADDR
// end ;
8963: GO 8854
8965: POP
8966: POP
// cl := 1 ;
8967: LD_ADDR_VAR 0 6
8971: PUSH
8972: LD_INT 1
8974: ST_TO_ADDR
// for i = 1 to 10 do
8975: LD_ADDR_VAR 0 2
8979: PUSH
8980: DOUBLE
8981: LD_INT 1
8983: DEC
8984: ST_TO_ADDR
8985: LD_INT 10
8987: PUSH
8988: FOR_TO
8989: IFFALSE 9104
// begin if i mod 4 = 0 then
8991: LD_VAR 0 2
8995: PUSH
8996: LD_INT 4
8998: MOD
8999: PUSH
9000: LD_INT 0
9002: EQUAL
9003: IFFALSE 9019
// cl := cl + 1 ;
9005: LD_ADDR_VAR 0 6
9009: PUSH
9010: LD_VAR 0 6
9014: PUSH
9015: LD_INT 1
9017: PLUS
9018: ST_TO_ADDR
// if cl = 2 then
9019: LD_VAR 0 6
9023: PUSH
9024: LD_INT 2
9026: EQUAL
9027: IFFALSE 9037
// cl := 3 ;
9029: LD_ADDR_VAR 0 6
9033: PUSH
9034: LD_INT 3
9036: ST_TO_ADDR
// PrepareHuman ( false , cl , [ 6 , 6 , 5 ] [ Difficulty ] ) ;
9037: LD_INT 0
9039: PPUSH
9040: LD_VAR 0 6
9044: PPUSH
9045: LD_INT 6
9047: PUSH
9048: LD_INT 6
9050: PUSH
9051: LD_INT 5
9053: PUSH
9054: EMPTY
9055: LIST
9056: LIST
9057: LIST
9058: PUSH
9059: LD_OWVAR 67
9063: ARRAY
9064: PPUSH
9065: CALL_OW 380
// result := Replace ( result , 2 , result [ 2 ] ^ CreateHuman ) ;
9069: LD_ADDR_VAR 0 1
9073: PUSH
9074: LD_VAR 0 1
9078: PPUSH
9079: LD_INT 2
9081: PPUSH
9082: LD_VAR 0 1
9086: PUSH
9087: LD_INT 2
9089: ARRAY
9090: PUSH
9091: CALL_OW 44
9095: ADD
9096: PPUSH
9097: CALL_OW 1
9101: ST_TO_ADDR
// end ;
9102: GO 8988
9104: POP
9105: POP
// if commander = 1 then
9106: LD_EXP 25
9110: PUSH
9111: LD_INT 1
9113: EQUAL
9114: IFFALSE 9182
// for i = 1 to 4 do
9116: LD_ADDR_VAR 0 2
9120: PUSH
9121: DOUBLE
9122: LD_INT 1
9124: DEC
9125: ST_TO_ADDR
9126: LD_INT 4
9128: PUSH
9129: FOR_TO
9130: IFFALSE 9180
// begin PrepareHuman ( false , class_soldier , 8 ) ;
9132: LD_INT 0
9134: PPUSH
9135: LD_INT 1
9137: PPUSH
9138: LD_INT 8
9140: PPUSH
9141: CALL_OW 380
// result := Replace ( result , 2 , result [ 2 ] ^ CreateHuman ) ;
9145: LD_ADDR_VAR 0 1
9149: PUSH
9150: LD_VAR 0 1
9154: PPUSH
9155: LD_INT 2
9157: PPUSH
9158: LD_VAR 0 1
9162: PUSH
9163: LD_INT 2
9165: ARRAY
9166: PUSH
9167: CALL_OW 44
9171: ADD
9172: PPUSH
9173: CALL_OW 1
9177: ST_TO_ADDR
// end ;
9178: GO 9129
9180: POP
9181: POP
// techs := [ ] ;
9182: LD_ADDR_VAR 0 4
9186: PUSH
9187: EMPTY
9188: ST_TO_ADDR
// if commander = 1 then
9189: LD_EXP 25
9193: PUSH
9194: LD_INT 1
9196: EQUAL
9197: IFFALSE 9222
// techs := [ tech_weap1 , tech_weap2 , tech_weap3 , tech_lasSight ] ;
9199: LD_ADDR_VAR 0 4
9203: PUSH
9204: LD_INT 51
9206: PUSH
9207: LD_INT 52
9209: PUSH
9210: LD_INT 53
9212: PUSH
9213: LD_INT 12
9215: PUSH
9216: EMPTY
9217: LIST
9218: LIST
9219: LIST
9220: LIST
9221: ST_TO_ADDR
// if commander = 2 then
9222: LD_EXP 25
9226: PUSH
9227: LD_INT 2
9229: EQUAL
9230: IFFALSE 9267
// techs := [ tech_tech1 , tech_oilEng , tech_oilPow , tech_solEng , tech_solPow , tech_opto1 , tech_radar ] ;
9232: LD_ADDR_VAR 0 4
9236: PUSH
9237: LD_INT 48
9239: PUSH
9240: LD_INT 47
9242: PUSH
9243: LD_INT 46
9245: PUSH
9246: LD_INT 45
9248: PUSH
9249: LD_INT 35
9251: PUSH
9252: LD_INT 60
9254: PUSH
9255: LD_INT 6
9257: PUSH
9258: EMPTY
9259: LIST
9260: LIST
9261: LIST
9262: LIST
9263: LIST
9264: LIST
9265: LIST
9266: ST_TO_ADDR
// if commander = 3 then
9267: LD_EXP 25
9271: PUSH
9272: LD_INT 3
9274: EQUAL
9275: IFFALSE 9324
// techs := [ tech_advAI , tech_advchassis , tech_ai , tech_comp1 , tech_comp2 , tech_oilEng , tech_oilPow , tech_weap1 , tech_gatling , tech_gun ] ;
9277: LD_ADDR_VAR 0 4
9281: PUSH
9282: LD_INT 27
9284: PUSH
9285: LD_INT 36
9287: PUSH
9288: LD_INT 32
9290: PUSH
9291: LD_INT 57
9293: PUSH
9294: LD_INT 58
9296: PUSH
9297: LD_INT 47
9299: PUSH
9300: LD_INT 46
9302: PUSH
9303: LD_INT 51
9305: PUSH
9306: LD_INT 69
9308: PUSH
9309: LD_INT 39
9311: PUSH
9312: EMPTY
9313: LIST
9314: LIST
9315: LIST
9316: LIST
9317: LIST
9318: LIST
9319: LIST
9320: LIST
9321: LIST
9322: LIST
9323: ST_TO_ADDR
// if techs then
9324: LD_VAR 0 4
9328: IFFALSE 9362
// for i in techs do
9330: LD_ADDR_VAR 0 2
9334: PUSH
9335: LD_VAR 0 4
9339: PUSH
9340: FOR_IN
9341: IFFALSE 9360
// SetTech ( i , 1 , state_researched ) ;
9343: LD_VAR 0 2
9347: PPUSH
9348: LD_INT 1
9350: PPUSH
9351: LD_INT 2
9353: PPUSH
9354: CALL_OW 322
9358: GO 9340
9360: POP
9361: POP
// hc_gallery := skirmish ;
9362: LD_ADDR_OWVAR 33
9366: PUSH
9367: LD_STRING skirmish
9369: ST_TO_ADDR
// hc_face_number := commander ;
9370: LD_ADDR_OWVAR 34
9374: PUSH
9375: LD_EXP 25
9379: ST_TO_ADDR
// hc_importance := 100 ;
9380: LD_ADDR_OWVAR 32
9384: PUSH
9385: LD_INT 100
9387: ST_TO_ADDR
// case commander of 1 :
9388: LD_EXP 25
9392: PUSH
9393: LD_INT 1
9395: DOUBLE
9396: EQUAL
9397: IFTRUE 9401
9399: GO 9425
9401: POP
// begin hc_name := Jeff Ironside ;
9402: LD_ADDR_OWVAR 26
9406: PUSH
9407: LD_STRING Jeff Ironside
9409: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 7 ) ;
9410: LD_INT 1
9412: PPUSH
9413: LD_INT 1
9415: PPUSH
9416: LD_INT 7
9418: PPUSH
9419: CALL_OW 380
// end ; 2 :
9423: GO 9490
9425: LD_INT 2
9427: DOUBLE
9428: EQUAL
9429: IFTRUE 9433
9431: GO 9457
9433: POP
// begin hc_name := Paul Johnson ;
9434: LD_ADDR_OWVAR 26
9438: PUSH
9439: LD_STRING Paul Johnson
9441: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 7 ) ;
9442: LD_INT 1
9444: PPUSH
9445: LD_INT 3
9447: PPUSH
9448: LD_INT 7
9450: PPUSH
9451: CALL_OW 380
// end ; 3 :
9455: GO 9490
9457: LD_INT 3
9459: DOUBLE
9460: EQUAL
9461: IFTRUE 9465
9463: GO 9489
9465: POP
// begin hc_name := Lisa Stuart ;
9466: LD_ADDR_OWVAR 26
9470: PUSH
9471: LD_STRING Lisa Stuart
9473: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , 7 ) ;
9474: LD_INT 2
9476: PPUSH
9477: LD_INT 4
9479: PPUSH
9480: LD_INT 7
9482: PPUSH
9483: CALL_OW 380
// end ; end ;
9487: GO 9490
9489: POP
// playerCommander := CreateHuman ;
9490: LD_ADDR_EXP 9
9494: PUSH
9495: CALL_OW 44
9499: ST_TO_ADDR
// hc_importance := 0 ;
9500: LD_ADDR_OWVAR 32
9504: PUSH
9505: LD_INT 0
9507: ST_TO_ADDR
// hc_gallery :=  ;
9508: LD_ADDR_OWVAR 33
9512: PUSH
9513: LD_STRING 
9515: ST_TO_ADDR
// result := Replace ( result , 2 , result [ 2 ] ^ playerCommander ) ;
9516: LD_ADDR_VAR 0 1
9520: PUSH
9521: LD_VAR 0 1
9525: PPUSH
9526: LD_INT 2
9528: PPUSH
9529: LD_VAR 0 1
9533: PUSH
9534: LD_INT 2
9536: ARRAY
9537: PUSH
9538: LD_EXP 9
9542: ADD
9543: PPUSH
9544: CALL_OW 1
9548: ST_TO_ADDR
// end ;
9549: LD_VAR 0 1
9553: RET
// export function PrepareReinforcements ; var i , peopleAmount , tmp , un , veh ; begin
9554: LD_INT 0
9556: PPUSH
9557: PPUSH
9558: PPUSH
9559: PPUSH
9560: PPUSH
9561: PPUSH
// uc_side := 1 ;
9562: LD_ADDR_OWVAR 20
9566: PUSH
9567: LD_INT 1
9569: ST_TO_ADDR
// uc_nation := 1 ;
9570: LD_ADDR_OWVAR 21
9574: PUSH
9575: LD_INT 1
9577: ST_TO_ADDR
// InitHc ;
9578: CALL_OW 19
// peopleAmount := [ 3 , 3 , 2 ] [ Difficulty ] ;
9582: LD_ADDR_VAR 0 3
9586: PUSH
9587: LD_INT 3
9589: PUSH
9590: LD_INT 3
9592: PUSH
9593: LD_INT 2
9595: PUSH
9596: EMPTY
9597: LIST
9598: LIST
9599: LIST
9600: PUSH
9601: LD_OWVAR 67
9605: ARRAY
9606: ST_TO_ADDR
// for i = 1 to peopleAmount do
9607: LD_ADDR_VAR 0 2
9611: PUSH
9612: DOUBLE
9613: LD_INT 1
9615: DEC
9616: ST_TO_ADDR
9617: LD_VAR 0 3
9621: PUSH
9622: FOR_TO
9623: IFFALSE 9672
// begin PrepareHuman ( false , 2 , [ 7 , 6 , 5 ] [ Difficulty ] ) ;
9625: LD_INT 0
9627: PPUSH
9628: LD_INT 2
9630: PPUSH
9631: LD_INT 7
9633: PUSH
9634: LD_INT 6
9636: PUSH
9637: LD_INT 5
9639: PUSH
9640: EMPTY
9641: LIST
9642: LIST
9643: LIST
9644: PUSH
9645: LD_OWVAR 67
9649: ARRAY
9650: PPUSH
9651: CALL_OW 380
// PlaceUnitInArea ( CreateHuman , startArea , false ) ;
9655: CALL_OW 44
9659: PPUSH
9660: LD_INT 19
9662: PPUSH
9663: LD_INT 0
9665: PPUSH
9666: CALL 54139 0 3
// end ;
9670: GO 9622
9672: POP
9673: POP
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_computer , us_crane , 58 ) ;
9674: LD_INT 2
9676: PPUSH
9677: LD_INT 1
9679: PPUSH
9680: LD_INT 3
9682: PPUSH
9683: LD_INT 13
9685: PPUSH
9686: LD_INT 58
9688: PPUSH
9689: CALL 24179 0 5
// PlaceUnitInArea ( CreateVehicle , startArea , false ) ;
9693: CALL_OW 45
9697: PPUSH
9698: LD_INT 19
9700: PPUSH
9701: LD_INT 0
9703: PPUSH
9704: CALL 54139 0 3
// if commander = 1 then
9708: LD_EXP 25
9712: PUSH
9713: LD_INT 1
9715: EQUAL
9716: IFFALSE 9727
// wait ( 6 6$00 ) else
9718: LD_INT 12600
9720: PPUSH
9721: CALL_OW 67
9725: GO 9734
// wait ( 8 8$00 ) ;
9727: LD_INT 16800
9729: PPUSH
9730: CALL_OW 67
// uc_side := 1 ;
9734: LD_ADDR_OWVAR 20
9738: PUSH
9739: LD_INT 1
9741: ST_TO_ADDR
// uc_nation := 1 ;
9742: LD_ADDR_OWVAR 21
9746: PUSH
9747: LD_INT 1
9749: ST_TO_ADDR
// InitVc ;
9750: CALL_OW 20
// InitHc ;
9754: CALL_OW 19
// for i = 1 to 5 do
9758: LD_ADDR_VAR 0 2
9762: PUSH
9763: DOUBLE
9764: LD_INT 1
9766: DEC
9767: ST_TO_ADDR
9768: LD_INT 5
9770: PUSH
9771: FOR_TO
9772: IFFALSE 10016
// begin PrepareVehicle ( [ us_heavy_tracked , us_medium_tracked , us_light_wheeled ] [ i mod 3 + 1 ] , engine_combustion , [ control_manual , control_computer , control_computer ] [ i mod 3 + 1 ] , [ us_heavy_gun , us_cargo_bay , us_radar ] [ i mod 3 + 1 ] , rand ( 40 , 55 ) ) ;
9774: LD_INT 4
9776: PUSH
9777: LD_INT 3
9779: PUSH
9780: LD_INT 1
9782: PUSH
9783: EMPTY
9784: LIST
9785: LIST
9786: LIST
9787: PUSH
9788: LD_VAR 0 2
9792: PUSH
9793: LD_INT 3
9795: MOD
9796: PUSH
9797: LD_INT 1
9799: PLUS
9800: ARRAY
9801: PPUSH
9802: LD_INT 1
9804: PPUSH
9805: LD_INT 1
9807: PUSH
9808: LD_INT 3
9810: PUSH
9811: LD_INT 3
9813: PUSH
9814: EMPTY
9815: LIST
9816: LIST
9817: LIST
9818: PUSH
9819: LD_VAR 0 2
9823: PUSH
9824: LD_INT 3
9826: MOD
9827: PUSH
9828: LD_INT 1
9830: PLUS
9831: ARRAY
9832: PPUSH
9833: LD_INT 6
9835: PUSH
9836: LD_INT 12
9838: PUSH
9839: LD_INT 11
9841: PUSH
9842: EMPTY
9843: LIST
9844: LIST
9845: LIST
9846: PUSH
9847: LD_VAR 0 2
9851: PUSH
9852: LD_INT 3
9854: MOD
9855: PUSH
9856: LD_INT 1
9858: PLUS
9859: ARRAY
9860: PPUSH
9861: LD_INT 40
9863: PPUSH
9864: LD_INT 55
9866: PPUSH
9867: CALL_OW 12
9871: PPUSH
9872: CALL 24179 0 5
// veh := CreateVehicle ;
9876: LD_ADDR_VAR 0 6
9880: PUSH
9881: CALL_OW 45
9885: ST_TO_ADDR
// PlaceUnitInArea ( veh , startArea , false ) ;
9886: LD_VAR 0 6
9890: PPUSH
9891: LD_INT 19
9893: PPUSH
9894: LD_INT 0
9896: PPUSH
9897: CALL 54139 0 3
// if GetWeapon ( veh ) = us_cargo_bay then
9901: LD_VAR 0 6
9905: PPUSH
9906: CALL_OW 264
9910: PUSH
9911: LD_INT 12
9913: EQUAL
9914: IFFALSE 9946
// begin AddCargo ( veh , mat_cans , 70 ) ;
9916: LD_VAR 0 6
9920: PPUSH
9921: LD_INT 1
9923: PPUSH
9924: LD_INT 70
9926: PPUSH
9927: CALL_OW 291
// AddCargo ( veh , mat_siberit , 30 ) ;
9931: LD_VAR 0 6
9935: PPUSH
9936: LD_INT 3
9938: PPUSH
9939: LD_INT 30
9941: PPUSH
9942: CALL_OW 291
// end ; if GetControl ( veh ) = control_manual then
9946: LD_VAR 0 6
9950: PPUSH
9951: CALL_OW 263
9955: PUSH
9956: LD_INT 1
9958: EQUAL
9959: IFFALSE 10014
// begin PrepareHuman ( sex_male , 3 , 6 ) ;
9961: LD_INT 1
9963: PPUSH
9964: LD_INT 3
9966: PPUSH
9967: LD_INT 6
9969: PPUSH
9970: CALL_OW 380
// un := CreateHuman ;
9974: LD_ADDR_VAR 0 5
9978: PUSH
9979: CALL_OW 44
9983: ST_TO_ADDR
// tmp := tmp ^ un ;
9984: LD_ADDR_VAR 0 4
9988: PUSH
9989: LD_VAR 0 4
9993: PUSH
9994: LD_VAR 0 5
9998: ADD
9999: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10000: LD_VAR 0 5
10004: PPUSH
10005: LD_VAR 0 6
10009: PPUSH
10010: CALL_OW 52
// end ; end ;
10014: GO 9771
10016: POP
10017: POP
// if tmp then
10018: LD_VAR 0 4
10022: IFFALSE 10086
// begin CenterNowOnUnits ( tmp ) ;
10024: LD_VAR 0 4
10028: PPUSH
10029: CALL_OW 87
// Say ( tmp [ 1 ] , DAR-1 ) ;
10033: LD_VAR 0 4
10037: PUSH
10038: LD_INT 1
10040: ARRAY
10041: PPUSH
10042: LD_STRING DAR-1
10044: PPUSH
10045: CALL_OW 88
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-DAR ) ;
10049: LD_EXP 9
10053: PPUSH
10054: LD_STRING D
10056: PUSH
10057: LD_STRING I
10059: PUSH
10060: LD_STRING J
10062: PUSH
10063: LD_STRING S
10065: PUSH
10066: EMPTY
10067: LIST
10068: LIST
10069: LIST
10070: PUSH
10071: LD_EXP 25
10075: ARRAY
10076: STR
10077: PUSH
10078: LD_STRING -1-DAR
10080: STR
10081: PPUSH
10082: CALL_OW 88
// end ; if not reinforceAllowed then
10086: LD_EXP 24
10090: NOT
10091: IFFALSE 10095
// exit ;
10093: GO 10249
// wait ( 25 25$00 ) ;
10095: LD_INT 52500
10097: PPUSH
10098: CALL_OW 67
// uc_side := 1 ;
10102: LD_ADDR_OWVAR 20
10106: PUSH
10107: LD_INT 1
10109: ST_TO_ADDR
// uc_nation := 1 ;
10110: LD_ADDR_OWVAR 21
10114: PUSH
10115: LD_INT 1
10117: ST_TO_ADDR
// InitVc ;
10118: CALL_OW 20
// InitHc ;
10122: CALL_OW 19
// for i = 1 to 4 do
10126: LD_ADDR_VAR 0 2
10130: PUSH
10131: DOUBLE
10132: LD_INT 1
10134: DEC
10135: ST_TO_ADDR
10136: LD_INT 4
10138: PUSH
10139: FOR_TO
10140: IFFALSE 10247
// begin PrepareVehicle ( us_morphling , engine_siberite , control_manual , us_heavy_gun , 1 ) ;
10142: LD_INT 5
10144: PPUSH
10145: LD_INT 3
10147: PPUSH
10148: LD_INT 1
10150: PPUSH
10151: LD_INT 6
10153: PPUSH
10154: LD_INT 1
10156: PPUSH
10157: CALL 24179 0 5
// veh := CreateVehicle ;
10161: LD_ADDR_VAR 0 6
10165: PUSH
10166: CALL_OW 45
10170: ST_TO_ADDR
// PlaceUnitInArea ( veh , startArea , false ) ;
10171: LD_VAR 0 6
10175: PPUSH
10176: LD_INT 19
10178: PPUSH
10179: LD_INT 0
10181: PPUSH
10182: CALL 54139 0 3
// if GetControl ( veh ) = control_manual then
10186: LD_VAR 0 6
10190: PPUSH
10191: CALL_OW 263
10195: PUSH
10196: LD_INT 1
10198: EQUAL
10199: IFFALSE 10245
// begin PrepareHuman ( false , 3 , [ 7 , 6 , 5 ] [ Difficulty ] ) ;
10201: LD_INT 0
10203: PPUSH
10204: LD_INT 3
10206: PPUSH
10207: LD_INT 7
10209: PUSH
10210: LD_INT 6
10212: PUSH
10213: LD_INT 5
10215: PUSH
10216: EMPTY
10217: LIST
10218: LIST
10219: LIST
10220: PUSH
10221: LD_OWVAR 67
10225: ARRAY
10226: PPUSH
10227: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
10231: CALL_OW 44
10235: PPUSH
10236: LD_VAR 0 6
10240: PPUSH
10241: CALL_OW 52
// end ; end ;
10245: GO 10139
10247: POP
10248: POP
// end ;
10249: LD_VAR 0 1
10253: RET
// export function PrepareLegionReinforcements ; var i , un , j , tmp ; begin
10254: LD_INT 0
10256: PPUSH
10257: PPUSH
10258: PPUSH
10259: PPUSH
10260: PPUSH
// uc_side := 8 ;
10261: LD_ADDR_OWVAR 20
10265: PUSH
10266: LD_INT 8
10268: ST_TO_ADDR
// uc_nation := nation_arabian ;
10269: LD_ADDR_OWVAR 21
10273: PUSH
10274: LD_INT 2
10276: ST_TO_ADDR
// for i = 1 to 2 do
10277: LD_ADDR_VAR 0 2
10281: PUSH
10282: DOUBLE
10283: LD_INT 1
10285: DEC
10286: ST_TO_ADDR
10287: LD_INT 2
10289: PUSH
10290: FOR_TO
10291: IFFALSE 10371
// for j = 1 to 4 do
10293: LD_ADDR_VAR 0 4
10297: PUSH
10298: DOUBLE
10299: LD_INT 1
10301: DEC
10302: ST_TO_ADDR
10303: LD_INT 4
10305: PUSH
10306: FOR_TO
10307: IFFALSE 10367
// begin PrepareHuman ( false , j , 8 ) ;
10309: LD_INT 0
10311: PPUSH
10312: LD_VAR 0 4
10316: PPUSH
10317: LD_INT 8
10319: PPUSH
10320: CALL_OW 380
// un := CreateHuman ;
10324: LD_ADDR_VAR 0 3
10328: PUSH
10329: CALL_OW 44
10333: ST_TO_ADDR
// PlaceUnitArea ( un , legionSpawn , false ) ;
10334: LD_VAR 0 3
10338: PPUSH
10339: LD_INT 23
10341: PPUSH
10342: LD_INT 0
10344: PPUSH
10345: CALL_OW 49
// tmp := tmp union un ;
10349: LD_ADDR_VAR 0 5
10353: PUSH
10354: LD_VAR 0 5
10358: PUSH
10359: LD_VAR 0 3
10363: UNION
10364: ST_TO_ADDR
// end ;
10365: GO 10306
10367: POP
10368: POP
10369: GO 10290
10371: POP
10372: POP
// for i in tmp do
10373: LD_ADDR_VAR 0 2
10377: PUSH
10378: LD_VAR 0 5
10382: PUSH
10383: FOR_IN
10384: IFFALSE 10403
// ComMoveXY ( i , 150 , 136 ) ;
10386: LD_VAR 0 2
10390: PPUSH
10391: LD_INT 150
10393: PPUSH
10394: LD_INT 136
10396: PPUSH
10397: CALL_OW 111
10401: GO 10383
10403: POP
10404: POP
// mc_bases := Replace ( mc_bases , mc_leg , mc_bases [ mc_leg ] union tmp ) ;
10405: LD_ADDR_EXP 44
10409: PUSH
10410: LD_EXP 44
10414: PPUSH
10415: LD_EXP 6
10419: PPUSH
10420: LD_EXP 44
10424: PUSH
10425: LD_EXP 6
10429: ARRAY
10430: PUSH
10431: LD_VAR 0 5
10435: UNION
10436: PPUSH
10437: CALL_OW 1
10441: ST_TO_ADDR
// end ;
10442: LD_VAR 0 1
10446: RET
// every 0 0$10 trigger Difficulty > 1 and GetTech ( tech_lapser , 3 ) = state_researched do
10447: LD_OWVAR 67
10451: PUSH
10452: LD_INT 1
10454: GREATER
10455: PUSH
10456: LD_INT 31
10458: PPUSH
10459: LD_INT 3
10461: PPUSH
10462: CALL_OW 321
10466: PUSH
10467: LD_INT 2
10469: EQUAL
10470: AND
10471: IFFALSE 10688
10473: GO 10475
10475: DISABLE
// begin MC_InsertBuildingList ( mc_rus_1 , [ [ b_turret , 101 , 159 , 5 ] , [ b_turret , 105 , 158 , 5 ] , [ b_turret , 96 , 136 , 5 ] , [ b_turret , 94 , 133 , 4 ] , [ b_turret , 84 , 102 , 4 ] ] ) ;
10476: LD_EXP 7
10480: PPUSH
10481: LD_INT 33
10483: PUSH
10484: LD_INT 101
10486: PUSH
10487: LD_INT 159
10489: PUSH
10490: LD_INT 5
10492: PUSH
10493: EMPTY
10494: LIST
10495: LIST
10496: LIST
10497: LIST
10498: PUSH
10499: LD_INT 33
10501: PUSH
10502: LD_INT 105
10504: PUSH
10505: LD_INT 158
10507: PUSH
10508: LD_INT 5
10510: PUSH
10511: EMPTY
10512: LIST
10513: LIST
10514: LIST
10515: LIST
10516: PUSH
10517: LD_INT 33
10519: PUSH
10520: LD_INT 96
10522: PUSH
10523: LD_INT 136
10525: PUSH
10526: LD_INT 5
10528: PUSH
10529: EMPTY
10530: LIST
10531: LIST
10532: LIST
10533: LIST
10534: PUSH
10535: LD_INT 33
10537: PUSH
10538: LD_INT 94
10540: PUSH
10541: LD_INT 133
10543: PUSH
10544: LD_INT 4
10546: PUSH
10547: EMPTY
10548: LIST
10549: LIST
10550: LIST
10551: LIST
10552: PUSH
10553: LD_INT 33
10555: PUSH
10556: LD_INT 84
10558: PUSH
10559: LD_INT 102
10561: PUSH
10562: LD_INT 4
10564: PUSH
10565: EMPTY
10566: LIST
10567: LIST
10568: LIST
10569: LIST
10570: PUSH
10571: EMPTY
10572: LIST
10573: LIST
10574: LIST
10575: LIST
10576: LIST
10577: PPUSH
10578: CALL 79222 0 2
// MC_InsertBuildingList ( mc_rus_2 , [ [ b_turret , 50 , 17 , 4 ] , [ b_turret , 52 , 20 , 4 ] , [ b_turret , 53 , 23 , 4 ] , [ b_turret , 45 , 32 , 4 ] , [ b_turret , 45 , 39 , 4 ] ] ) ;
10582: LD_EXP 8
10586: PPUSH
10587: LD_INT 33
10589: PUSH
10590: LD_INT 50
10592: PUSH
10593: LD_INT 17
10595: PUSH
10596: LD_INT 4
10598: PUSH
10599: EMPTY
10600: LIST
10601: LIST
10602: LIST
10603: LIST
10604: PUSH
10605: LD_INT 33
10607: PUSH
10608: LD_INT 52
10610: PUSH
10611: LD_INT 20
10613: PUSH
10614: LD_INT 4
10616: PUSH
10617: EMPTY
10618: LIST
10619: LIST
10620: LIST
10621: LIST
10622: PUSH
10623: LD_INT 33
10625: PUSH
10626: LD_INT 53
10628: PUSH
10629: LD_INT 23
10631: PUSH
10632: LD_INT 4
10634: PUSH
10635: EMPTY
10636: LIST
10637: LIST
10638: LIST
10639: LIST
10640: PUSH
10641: LD_INT 33
10643: PUSH
10644: LD_INT 45
10646: PUSH
10647: LD_INT 32
10649: PUSH
10650: LD_INT 4
10652: PUSH
10653: EMPTY
10654: LIST
10655: LIST
10656: LIST
10657: LIST
10658: PUSH
10659: LD_INT 33
10661: PUSH
10662: LD_INT 45
10664: PUSH
10665: LD_INT 39
10667: PUSH
10668: LD_INT 4
10670: PUSH
10671: EMPTY
10672: LIST
10673: LIST
10674: LIST
10675: LIST
10676: PUSH
10677: EMPTY
10678: LIST
10679: LIST
10680: LIST
10681: LIST
10682: LIST
10683: PPUSH
10684: CALL 79222 0 2
// end ; end_of_file
10688: END
// export function Action ; var i , tmp ; begin
10689: LD_INT 0
10691: PPUSH
10692: PPUSH
10693: PPUSH
// InGameOn ;
10694: CALL_OW 8
// CenterNowOnXY ( 225 , 217 ) ;
10698: LD_INT 225
10700: PPUSH
10701: LD_INT 217
10703: PPUSH
10704: CALL_OW 86
// for i in playerForces [ 2 ] do
10708: LD_ADDR_VAR 0 2
10712: PUSH
10713: LD_EXP 10
10717: PUSH
10718: LD_INT 2
10720: ARRAY
10721: PUSH
10722: FOR_IN
10723: IFFALSE 10856
// begin if playerForces [ 1 ] and GetClass ( i ) in [ 3 , 4 ] then
10725: LD_EXP 10
10729: PUSH
10730: LD_INT 1
10732: ARRAY
10733: PUSH
10734: LD_VAR 0 2
10738: PPUSH
10739: CALL_OW 257
10743: PUSH
10744: LD_INT 3
10746: PUSH
10747: LD_INT 4
10749: PUSH
10750: EMPTY
10751: LIST
10752: LIST
10753: IN
10754: AND
10755: IFFALSE 10839
// begin PlaceUnitInArea ( playerForces [ 1 ] [ 1 ] , startArea , false ) ;
10757: LD_EXP 10
10761: PUSH
10762: LD_INT 1
10764: ARRAY
10765: PUSH
10766: LD_INT 1
10768: ARRAY
10769: PPUSH
10770: LD_INT 19
10772: PPUSH
10773: LD_INT 0
10775: PPUSH
10776: CALL 54139 0 3
// PlaceHumanInUnit ( i , playerForces [ 1 ] [ 1 ] ) ;
10780: LD_VAR 0 2
10784: PPUSH
10785: LD_EXP 10
10789: PUSH
10790: LD_INT 1
10792: ARRAY
10793: PUSH
10794: LD_INT 1
10796: ARRAY
10797: PPUSH
10798: CALL_OW 52
// playerForces := Replace ( playerForces , 1 , Delete ( playerForces [ 1 ] , 1 ) ) ;
10802: LD_ADDR_EXP 10
10806: PUSH
10807: LD_EXP 10
10811: PPUSH
10812: LD_INT 1
10814: PPUSH
10815: LD_EXP 10
10819: PUSH
10820: LD_INT 1
10822: ARRAY
10823: PPUSH
10824: LD_INT 1
10826: PPUSH
10827: CALL_OW 3
10831: PPUSH
10832: CALL_OW 1
10836: ST_TO_ADDR
// end else
10837: GO 10854
// PlaceUnitInArea ( i , startArea , false ) ;
10839: LD_VAR 0 2
10843: PPUSH
10844: LD_INT 19
10846: PPUSH
10847: LD_INT 0
10849: PPUSH
10850: CALL 54139 0 3
// end ;
10854: GO 10722
10856: POP
10857: POP
// wait ( 0 0$2 ) ;
10858: LD_INT 70
10860: PPUSH
10861: CALL_OW 67
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1 ) ;
10865: LD_EXP 9
10869: PPUSH
10870: LD_STRING D
10872: PUSH
10873: LD_STRING I
10875: PUSH
10876: LD_STRING J
10878: PUSH
10879: LD_STRING S
10881: PUSH
10882: EMPTY
10883: LIST
10884: LIST
10885: LIST
10886: PUSH
10887: LD_EXP 25
10891: ARRAY
10892: STR
10893: PUSH
10894: LD_STRING -1
10896: STR
10897: PPUSH
10898: CALL_OW 88
// SayRadio ( Powell , DP-1 ) ;
10902: LD_EXP 12
10906: PPUSH
10907: LD_STRING DP-1
10909: PPUSH
10910: CALL_OW 94
// SayRadio ( Powell , DP-2 ) ;
10914: LD_EXP 12
10918: PPUSH
10919: LD_STRING DP-2
10921: PPUSH
10922: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -2 ) ;
10926: LD_EXP 9
10930: PPUSH
10931: LD_STRING D
10933: PUSH
10934: LD_STRING I
10936: PUSH
10937: LD_STRING J
10939: PUSH
10940: LD_STRING S
10942: PUSH
10943: EMPTY
10944: LIST
10945: LIST
10946: LIST
10947: PUSH
10948: LD_EXP 25
10952: ARRAY
10953: STR
10954: PUSH
10955: LD_STRING -2
10957: STR
10958: PPUSH
10959: CALL_OW 88
// InGameOff ;
10963: CALL_OW 9
// ChangeMissionObjectives ( O1 ) ;
10967: LD_STRING O1
10969: PPUSH
10970: CALL_OW 337
// game := true ;
10974: LD_ADDR_EXP 3
10978: PUSH
10979: LD_INT 1
10981: ST_TO_ADDR
// SaveForQuickRestart ;
10982: CALL_OW 22
// wait ( 0 0$5 ) ;
10986: LD_INT 175
10988: PPUSH
10989: CALL_OW 67
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -3 ) ;
10993: LD_EXP 9
10997: PPUSH
10998: LD_STRING D
11000: PUSH
11001: LD_STRING I
11003: PUSH
11004: LD_STRING J
11006: PUSH
11007: LD_STRING S
11009: PUSH
11010: EMPTY
11011: LIST
11012: LIST
11013: LIST
11014: PUSH
11015: LD_EXP 25
11019: ARRAY
11020: STR
11021: PUSH
11022: LD_STRING -3
11024: STR
11025: PPUSH
11026: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
11030: LD_INT 35
11032: PPUSH
11033: CALL_OW 67
// until ruEscape [ 1 ] >= ruEscape [ 2 ] ;
11037: LD_EXP 15
11041: PUSH
11042: LD_INT 1
11044: ARRAY
11045: PUSH
11046: LD_EXP 15
11050: PUSH
11051: LD_INT 2
11053: ARRAY
11054: GREATEREQUAL
11055: IFFALSE 11030
// outpostEscape := true ;
11057: LD_ADDR_EXP 27
11061: PUSH
11062: LD_INT 1
11064: ST_TO_ADDR
// tmp := UnitFilter ( ruOutpost , [ f_sex , sex_male ] ) ;
11065: LD_ADDR_VAR 0 3
11069: PUSH
11070: LD_EXP 14
11074: PPUSH
11075: LD_INT 26
11077: PUSH
11078: LD_INT 1
11080: PUSH
11081: EMPTY
11082: LIST
11083: LIST
11084: PPUSH
11085: CALL_OW 72
11089: ST_TO_ADDR
// if tmp then
11090: LD_VAR 0 3
11094: IFFALSE 11112
// Say ( tmp [ 1 ] , DR-1-Escape ) ;
11096: LD_VAR 0 3
11100: PUSH
11101: LD_INT 1
11103: ARRAY
11104: PPUSH
11105: LD_STRING DR-1-Escape
11107: PPUSH
11108: CALL_OW 88
// wait ( 0 0$1 ) ;
11112: LD_INT 35
11114: PPUSH
11115: CALL_OW 67
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Escape ) ;
11119: LD_EXP 9
11123: PPUSH
11124: LD_STRING D
11126: PUSH
11127: LD_STRING I
11129: PUSH
11130: LD_STRING J
11132: PUSH
11133: LD_STRING S
11135: PUSH
11136: EMPTY
11137: LIST
11138: LIST
11139: LIST
11140: PUSH
11141: LD_EXP 25
11145: ARRAY
11146: STR
11147: PUSH
11148: LD_STRING -1-Escape
11150: STR
11151: PPUSH
11152: CALL_OW 88
// for i in ruOutpost do
11156: LD_ADDR_VAR 0 2
11160: PUSH
11161: LD_EXP 14
11165: PUSH
11166: FOR_IN
11167: IFFALSE 11221
// begin if IsInUnit ( i ) then
11169: LD_VAR 0 2
11173: PPUSH
11174: CALL_OW 310
11178: IFFALSE 11189
// ComExitBuilding ( i ) ;
11180: LD_VAR 0 2
11184: PPUSH
11185: CALL_OW 122
// AddComMoveXY ( i , 179 , 102 ) ;
11189: LD_VAR 0 2
11193: PPUSH
11194: LD_INT 179
11196: PPUSH
11197: LD_INT 102
11199: PPUSH
11200: CALL_OW 171
// AddComMoveXY ( i , 28 , 20 ) ;
11204: LD_VAR 0 2
11208: PPUSH
11209: LD_INT 28
11211: PPUSH
11212: LD_INT 20
11214: PPUSH
11215: CALL_OW 171
// end ;
11219: GO 11166
11221: POP
11222: POP
// tmp := [ ] ;
11223: LD_ADDR_VAR 0 3
11227: PUSH
11228: EMPTY
11229: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11230: LD_INT 35
11232: PPUSH
11233: CALL_OW 67
// tmp := UnitFilter ( ruOutpost , [ f_inarea , rus2Base ] ) ;
11237: LD_ADDR_VAR 0 3
11241: PUSH
11242: LD_EXP 14
11246: PPUSH
11247: LD_INT 95
11249: PUSH
11250: LD_INT 11
11252: PUSH
11253: EMPTY
11254: LIST
11255: LIST
11256: PPUSH
11257: CALL_OW 72
11261: ST_TO_ADDR
// if tmp then
11262: LD_VAR 0 3
11266: IFFALSE 11345
// for i in tmp do
11268: LD_ADDR_VAR 0 2
11272: PUSH
11273: LD_VAR 0 3
11277: PUSH
11278: FOR_IN
11279: IFFALSE 11343
// begin ruOutpost := ruOutpost diff i ;
11281: LD_ADDR_EXP 14
11285: PUSH
11286: LD_EXP 14
11290: PUSH
11291: LD_VAR 0 2
11295: DIFF
11296: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ mc_rus_2 , mc_bases [ mc_rus_2 ] + 1 ] , i ) ;
11297: LD_ADDR_EXP 44
11301: PUSH
11302: LD_EXP 44
11306: PPUSH
11307: LD_EXP 8
11311: PUSH
11312: LD_EXP 44
11316: PUSH
11317: LD_EXP 8
11321: ARRAY
11322: PUSH
11323: LD_INT 1
11325: PLUS
11326: PUSH
11327: EMPTY
11328: LIST
11329: LIST
11330: PPUSH
11331: LD_VAR 0 2
11335: PPUSH
11336: CALL 24301 0 3
11340: ST_TO_ADDR
// end ;
11341: GO 11278
11343: POP
11344: POP
// until not UnitFilter ( ruOutpost , [ f_type , unit_human ] ) ;
11345: LD_EXP 14
11349: PPUSH
11350: LD_INT 21
11352: PUSH
11353: LD_INT 1
11355: PUSH
11356: EMPTY
11357: LIST
11358: LIST
11359: PPUSH
11360: CALL_OW 72
11364: NOT
11365: IFFALSE 11230
// ruOutpost := [ ] ;
11367: LD_ADDR_EXP 14
11371: PUSH
11372: EMPTY
11373: ST_TO_ADDR
// end ;
11374: LD_VAR 0 1
11378: RET
// every 0 0$1 trigger outpostEscape do var i , tmp ;
11379: LD_EXP 27
11383: IFFALSE 11572
11385: GO 11387
11387: DISABLE
11388: LD_INT 0
11390: PPUSH
11391: PPUSH
// begin wait ( rand ( 0 0$25 , 0 0$35 ) ) ;
11392: LD_INT 875
11394: PPUSH
11395: LD_INT 1225
11397: PPUSH
11398: CALL_OW 12
11402: PPUSH
11403: CALL_OW 67
// tmp := [ [ 208 , 166 ] , [ 218 , 174 ] , [ 201 , 173 ] , [ 189 , 167 ] , [ 191 , 160 ] , [ 209 , 181 ] , [ 192 , 162 ] , [ 197 , 166 ] ] ;
11407: LD_ADDR_VAR 0 2
11411: PUSH
11412: LD_INT 208
11414: PUSH
11415: LD_INT 166
11417: PUSH
11418: EMPTY
11419: LIST
11420: LIST
11421: PUSH
11422: LD_INT 218
11424: PUSH
11425: LD_INT 174
11427: PUSH
11428: EMPTY
11429: LIST
11430: LIST
11431: PUSH
11432: LD_INT 201
11434: PUSH
11435: LD_INT 173
11437: PUSH
11438: EMPTY
11439: LIST
11440: LIST
11441: PUSH
11442: LD_INT 189
11444: PUSH
11445: LD_INT 167
11447: PUSH
11448: EMPTY
11449: LIST
11450: LIST
11451: PUSH
11452: LD_INT 191
11454: PUSH
11455: LD_INT 160
11457: PUSH
11458: EMPTY
11459: LIST
11460: LIST
11461: PUSH
11462: LD_INT 209
11464: PUSH
11465: LD_INT 181
11467: PUSH
11468: EMPTY
11469: LIST
11470: LIST
11471: PUSH
11472: LD_INT 192
11474: PUSH
11475: LD_INT 162
11477: PUSH
11478: EMPTY
11479: LIST
11480: LIST
11481: PUSH
11482: LD_INT 197
11484: PUSH
11485: LD_INT 166
11487: PUSH
11488: EMPTY
11489: LIST
11490: LIST
11491: PUSH
11492: EMPTY
11493: LIST
11494: LIST
11495: LIST
11496: LIST
11497: LIST
11498: LIST
11499: LIST
11500: LIST
11501: ST_TO_ADDR
// for i = 1 to 5 + Difficulty do
11502: LD_ADDR_VAR 0 1
11506: PUSH
11507: DOUBLE
11508: LD_INT 1
11510: DEC
11511: ST_TO_ADDR
11512: LD_INT 5
11514: PUSH
11515: LD_OWVAR 67
11519: PLUS
11520: PUSH
11521: FOR_TO
11522: IFFALSE 11570
// begin MineExplosion ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , 1 ) ;
11524: LD_VAR 0 2
11528: PUSH
11529: LD_VAR 0 1
11533: ARRAY
11534: PUSH
11535: LD_INT 1
11537: ARRAY
11538: PPUSH
11539: LD_VAR 0 2
11543: PUSH
11544: LD_VAR 0 1
11548: ARRAY
11549: PUSH
11550: LD_INT 2
11552: ARRAY
11553: PPUSH
11554: LD_INT 1
11556: PPUSH
11557: CALL_OW 453
// wait ( 0 0$0.8 ) ;
11561: LD_INT 28
11563: PPUSH
11564: CALL_OW 67
// end ;
11568: GO 11521
11570: POP
11571: POP
// end ;
11572: PPOPN 2
11574: END
// every 0 0$3 trigger not outpostEscape do var tmp , engs , buildings , empty , i , j , k ;
11575: LD_EXP 27
11579: NOT
11580: IFFALSE 12234
11582: GO 11584
11584: DISABLE
11585: LD_INT 0
11587: PPUSH
11588: PPUSH
11589: PPUSH
11590: PPUSH
11591: PPUSH
11592: PPUSH
11593: PPUSH
// begin enable ;
11594: ENABLE
// tmp := UnitFilter ( ruOutpost , [ [ f_side , 3 ] , [ f_class , 1 ] ] ) ;
11595: LD_ADDR_VAR 0 1
11599: PUSH
11600: LD_EXP 14
11604: PPUSH
11605: LD_INT 22
11607: PUSH
11608: LD_INT 3
11610: PUSH
11611: EMPTY
11612: LIST
11613: LIST
11614: PUSH
11615: LD_INT 25
11617: PUSH
11618: LD_INT 1
11620: PUSH
11621: EMPTY
11622: LIST
11623: LIST
11624: PUSH
11625: EMPTY
11626: LIST
11627: LIST
11628: PPUSH
11629: CALL_OW 72
11633: ST_TO_ADDR
// engs := UnitFilter ( ruOutpost , [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
11634: LD_ADDR_VAR 0 2
11638: PUSH
11639: LD_EXP 14
11643: PPUSH
11644: LD_INT 22
11646: PUSH
11647: LD_INT 3
11649: PUSH
11650: EMPTY
11651: LIST
11652: LIST
11653: PUSH
11654: LD_INT 25
11656: PUSH
11657: LD_INT 2
11659: PUSH
11660: EMPTY
11661: LIST
11662: LIST
11663: PUSH
11664: EMPTY
11665: LIST
11666: LIST
11667: PPUSH
11668: CALL_OW 72
11672: ST_TO_ADDR
// buildings := UnitFilter ( ruOutpost , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
11673: LD_ADDR_VAR 0 3
11677: PUSH
11678: LD_EXP 14
11682: PPUSH
11683: LD_INT 22
11685: PUSH
11686: LD_INT 3
11688: PUSH
11689: EMPTY
11690: LIST
11691: LIST
11692: PUSH
11693: LD_INT 21
11695: PUSH
11696: LD_INT 3
11698: PUSH
11699: EMPTY
11700: LIST
11701: LIST
11702: PUSH
11703: LD_INT 3
11705: PUSH
11706: LD_INT 24
11708: PUSH
11709: LD_INT 1000
11711: PUSH
11712: EMPTY
11713: LIST
11714: LIST
11715: PUSH
11716: EMPTY
11717: LIST
11718: LIST
11719: PUSH
11720: EMPTY
11721: LIST
11722: LIST
11723: LIST
11724: PPUSH
11725: CALL_OW 72
11729: ST_TO_ADDR
// if engs and buildings then
11730: LD_VAR 0 2
11734: PUSH
11735: LD_VAR 0 3
11739: AND
11740: IFFALSE 11813
// begin for i in engs do
11742: LD_ADDR_VAR 0 5
11746: PUSH
11747: LD_VAR 0 2
11751: PUSH
11752: FOR_IN
11753: IFFALSE 11809
// if IsInUnit ( i ) then
11755: LD_VAR 0 5
11759: PPUSH
11760: CALL_OW 310
11764: IFFALSE 11777
// ComExitBuilding ( i ) else
11766: LD_VAR 0 5
11770: PPUSH
11771: CALL_OW 122
11775: GO 11807
// if not HasTask ( i ) then
11777: LD_VAR 0 5
11781: PPUSH
11782: CALL_OW 314
11786: NOT
11787: IFFALSE 11807
// ComRepairBuilding ( i , buildings [ 1 ] ) ;
11789: LD_VAR 0 5
11793: PPUSH
11794: LD_VAR 0 3
11798: PUSH
11799: LD_INT 1
11801: ARRAY
11802: PPUSH
11803: CALL_OW 130
11807: GO 11752
11809: POP
11810: POP
// end else
11811: GO 11916
// if not buildings and UnitFilter ( ruOutpost , [ f_btype , b_depot ] ) and UnitFilter ( engs , [ f_not , [ f_inside ] ] ) then
11813: LD_VAR 0 3
11817: NOT
11818: PUSH
11819: LD_EXP 14
11823: PPUSH
11824: LD_INT 30
11826: PUSH
11827: LD_INT 0
11829: PUSH
11830: EMPTY
11831: LIST
11832: LIST
11833: PPUSH
11834: CALL_OW 72
11838: AND
11839: PUSH
11840: LD_VAR 0 2
11844: PPUSH
11845: LD_INT 3
11847: PUSH
11848: LD_INT 54
11850: PUSH
11851: EMPTY
11852: LIST
11853: PUSH
11854: EMPTY
11855: LIST
11856: LIST
11857: PPUSH
11858: CALL_OW 72
11862: AND
11863: IFFALSE 11916
// ComEnterUnit ( UnitFilter ( engs , [ f_not , [ f_inside ] ] ) , UnitFilter ( ruOutpost , [ f_btype , b_depot ] ) [ 1 ] ) ;
11865: LD_VAR 0 2
11869: PPUSH
11870: LD_INT 3
11872: PUSH
11873: LD_INT 54
11875: PUSH
11876: EMPTY
11877: LIST
11878: PUSH
11879: EMPTY
11880: LIST
11881: LIST
11882: PPUSH
11883: CALL_OW 72
11887: PPUSH
11888: LD_EXP 14
11892: PPUSH
11893: LD_INT 30
11895: PUSH
11896: LD_INT 0
11898: PUSH
11899: EMPTY
11900: LIST
11901: LIST
11902: PPUSH
11903: CALL_OW 72
11907: PUSH
11908: LD_INT 1
11910: ARRAY
11911: PPUSH
11912: CALL_OW 120
// if not tmp then
11916: LD_VAR 0 1
11920: NOT
11921: IFFALSE 11925
// exit ;
11923: GO 12234
// if FilterUnitsInArea ( ruOutpostCenterArea , [ f_enemy , 3 ] ) > 1 then
11925: LD_INT 26
11927: PPUSH
11928: LD_INT 81
11930: PUSH
11931: LD_INT 3
11933: PUSH
11934: EMPTY
11935: LIST
11936: LIST
11937: PPUSH
11938: CALL_OW 70
11942: PUSH
11943: LD_INT 1
11945: GREATER
11946: IFFALSE 12002
// begin for i in tmp do
11948: LD_ADDR_VAR 0 5
11952: PUSH
11953: LD_VAR 0 1
11957: PUSH
11958: FOR_IN
11959: IFFALSE 11998
// begin if IsInUnit ( i ) then
11961: LD_VAR 0 5
11965: PPUSH
11966: CALL_OW 310
11970: IFFALSE 11981
// ComExitBuilding ( i ) ;
11972: LD_VAR 0 5
11976: PPUSH
11977: CALL_OW 122
// AddComAgressiveMove ( i , 204 , 164 ) ;
11981: LD_VAR 0 5
11985: PPUSH
11986: LD_INT 204
11988: PPUSH
11989: LD_INT 164
11991: PPUSH
11992: CALL_OW 174
// end ;
11996: GO 11958
11998: POP
11999: POP
// end else
12000: GO 12234
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
12002: LD_VAR 0 1
12006: PPUSH
12007: LD_INT 3
12009: PUSH
12010: LD_INT 54
12012: PUSH
12013: EMPTY
12014: LIST
12015: PUSH
12016: EMPTY
12017: LIST
12018: LIST
12019: PPUSH
12020: CALL_OW 72
12024: IFFALSE 12234
// begin empty := UnitFilter ( ruOutpost , [ [ f_btype , b_bunker ] , [ f_empty ] ] ) ;
12026: LD_ADDR_VAR 0 4
12030: PUSH
12031: LD_EXP 14
12035: PPUSH
12036: LD_INT 30
12038: PUSH
12039: LD_INT 32
12041: PUSH
12042: EMPTY
12043: LIST
12044: LIST
12045: PUSH
12046: LD_INT 58
12048: PUSH
12049: EMPTY
12050: LIST
12051: PUSH
12052: EMPTY
12053: LIST
12054: LIST
12055: PPUSH
12056: CALL_OW 72
12060: ST_TO_ADDR
// if not empty and UnitFilter ( ruOutpost , [ f_btype , b_barracks ] ) then
12061: LD_VAR 0 4
12065: NOT
12066: PUSH
12067: LD_EXP 14
12071: PPUSH
12072: LD_INT 30
12074: PUSH
12075: LD_INT 5
12077: PUSH
12078: EMPTY
12079: LIST
12080: LIST
12081: PPUSH
12082: CALL_OW 72
12086: AND
12087: IFFALSE 12124
// begin ComEnterUnit ( tmp , UnitFilter ( ruOutpost , [ f_btype , b_barracks ] ) [ 1 ] ) ;
12089: LD_VAR 0 1
12093: PPUSH
12094: LD_EXP 14
12098: PPUSH
12099: LD_INT 30
12101: PUSH
12102: LD_INT 5
12104: PUSH
12105: EMPTY
12106: LIST
12107: LIST
12108: PPUSH
12109: CALL_OW 72
12113: PUSH
12114: LD_INT 1
12116: ARRAY
12117: PPUSH
12118: CALL_OW 120
// exit ;
12122: GO 12234
// end ; j := UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) ;
12124: LD_ADDR_VAR 0 6
12128: PUSH
12129: LD_VAR 0 1
12133: PPUSH
12134: LD_INT 3
12136: PUSH
12137: LD_INT 54
12139: PUSH
12140: EMPTY
12141: LIST
12142: PUSH
12143: EMPTY
12144: LIST
12145: LIST
12146: PPUSH
12147: CALL_OW 72
12151: ST_TO_ADDR
// if j < empty then
12152: LD_VAR 0 6
12156: PUSH
12157: LD_VAR 0 4
12161: LESS
12162: IFFALSE 12176
// k := j else
12164: LD_ADDR_VAR 0 7
12168: PUSH
12169: LD_VAR 0 6
12173: ST_TO_ADDR
12174: GO 12186
// k := empty ;
12176: LD_ADDR_VAR 0 7
12180: PUSH
12181: LD_VAR 0 4
12185: ST_TO_ADDR
// for i = 1 to k do
12186: LD_ADDR_VAR 0 5
12190: PUSH
12191: DOUBLE
12192: LD_INT 1
12194: DEC
12195: ST_TO_ADDR
12196: LD_VAR 0 7
12200: PUSH
12201: FOR_TO
12202: IFFALSE 12232
// ComEnterUnit ( j [ i ] , empty [ i ] ) ;
12204: LD_VAR 0 6
12208: PUSH
12209: LD_VAR 0 5
12213: ARRAY
12214: PPUSH
12215: LD_VAR 0 4
12219: PUSH
12220: LD_VAR 0 5
12224: ARRAY
12225: PPUSH
12226: CALL_OW 120
12230: GO 12201
12232: POP
12233: POP
// end ; end ;
12234: PPOPN 7
12236: END
// every 0 0$2 trigger GameType = 1 and outpostEscape and FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , 208 , 163 , 8 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_distxy , 208 , 163 , 14 ] ] ) do var i ;
12237: LD_EXP 2
12241: PUSH
12242: LD_INT 1
12244: EQUAL
12245: PUSH
12246: LD_EXP 27
12250: AND
12251: PUSH
12252: LD_INT 22
12254: PUSH
12255: LD_INT 1
12257: PUSH
12258: EMPTY
12259: LIST
12260: LIST
12261: PUSH
12262: LD_INT 92
12264: PUSH
12265: LD_INT 208
12267: PUSH
12268: LD_INT 163
12270: PUSH
12271: LD_INT 8
12273: PUSH
12274: EMPTY
12275: LIST
12276: LIST
12277: LIST
12278: LIST
12279: PUSH
12280: EMPTY
12281: LIST
12282: LIST
12283: PPUSH
12284: CALL_OW 69
12288: AND
12289: PUSH
12290: LD_INT 22
12292: PUSH
12293: LD_INT 3
12295: PUSH
12296: EMPTY
12297: LIST
12298: LIST
12299: PUSH
12300: LD_INT 21
12302: PUSH
12303: LD_INT 1
12305: PUSH
12306: EMPTY
12307: LIST
12308: LIST
12309: PUSH
12310: LD_INT 92
12312: PUSH
12313: LD_INT 208
12315: PUSH
12316: LD_INT 163
12318: PUSH
12319: LD_INT 14
12321: PUSH
12322: EMPTY
12323: LIST
12324: LIST
12325: LIST
12326: LIST
12327: PUSH
12328: EMPTY
12329: LIST
12330: LIST
12331: LIST
12332: PPUSH
12333: CALL_OW 69
12337: NOT
12338: AND
12339: IFFALSE 12644
12341: GO 12343
12343: DISABLE
12344: LD_INT 0
12346: PPUSH
// begin InGameOn ;
12347: CALL_OW 8
// CenterNowOnUnits ( playerCommander ) ;
12351: LD_EXP 9
12355: PPUSH
12356: CALL_OW 87
// wait ( 0 0$1 ) ;
12360: LD_INT 35
12362: PPUSH
12363: CALL_OW 67
// DialogueOn ;
12367: CALL_OW 6
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-BaseCaptured ) ;
12371: LD_EXP 9
12375: PPUSH
12376: LD_STRING D
12378: PUSH
12379: LD_STRING I
12381: PUSH
12382: LD_STRING J
12384: PUSH
12385: LD_STRING S
12387: PUSH
12388: EMPTY
12389: LIST
12390: LIST
12391: LIST
12392: PUSH
12393: LD_EXP 25
12397: ARRAY
12398: STR
12399: PUSH
12400: LD_STRING -1-BaseCaptured
12402: STR
12403: PPUSH
12404: CALL_OW 88
// SayRadio ( Powell , DP-1-BaseCaptured ) ;
12408: LD_EXP 12
12412: PPUSH
12413: LD_STRING DP-1-BaseCaptured
12415: PPUSH
12416: CALL_OW 94
// if sibBombAllowed then
12420: LD_EXP 23
12424: IFFALSE 12566
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -2-BaseCaptured ) ;
12426: LD_EXP 9
12430: PPUSH
12431: LD_STRING D
12433: PUSH
12434: LD_STRING I
12436: PUSH
12437: LD_STRING J
12439: PUSH
12440: LD_STRING S
12442: PUSH
12443: EMPTY
12444: LIST
12445: LIST
12446: LIST
12447: PUSH
12448: LD_EXP 25
12452: ARRAY
12453: STR
12454: PUSH
12455: LD_STRING -2-BaseCaptured
12457: STR
12458: PPUSH
12459: CALL_OW 88
// if commander = 1 then
12463: LD_EXP 25
12467: PUSH
12468: LD_INT 1
12470: EQUAL
12471: IFFALSE 12485
// SayRadio ( Powell , DP-2b-BaseCaptured ) ;
12473: LD_EXP 12
12477: PPUSH
12478: LD_STRING DP-2b-BaseCaptured
12480: PPUSH
12481: CALL_OW 94
// if commander = 2 then
12485: LD_EXP 25
12489: PUSH
12490: LD_INT 2
12492: EQUAL
12493: IFFALSE 12507
// SayRadio ( Powell , DP-2-BaseCaptured ) ;
12495: LD_EXP 12
12499: PPUSH
12500: LD_STRING DP-2-BaseCaptured
12502: PPUSH
12503: CALL_OW 94
// if commander = 3 then
12507: LD_EXP 25
12511: PUSH
12512: LD_INT 3
12514: EQUAL
12515: IFFALSE 12529
// SayRadio ( Powell , DP-2a-BaseCaptured ) ;
12517: LD_EXP 12
12521: PPUSH
12522: LD_STRING DP-2a-BaseCaptured
12524: PPUSH
12525: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -3-BaseCaptured ) ;
12529: LD_EXP 9
12533: PPUSH
12534: LD_STRING D
12536: PUSH
12537: LD_STRING I
12539: PUSH
12540: LD_STRING J
12542: PUSH
12543: LD_STRING S
12545: PUSH
12546: EMPTY
12547: LIST
12548: LIST
12549: LIST
12550: PUSH
12551: LD_EXP 25
12555: ARRAY
12556: STR
12557: PUSH
12558: LD_STRING -3-BaseCaptured
12560: STR
12561: PPUSH
12562: CALL_OW 88
// end ; DialogueOff ;
12566: CALL_OW 7
// InGameOff ;
12570: CALL_OW 9
// ChangeMissionObjectives ( O2 ) ;
12574: LD_STRING O2
12576: PPUSH
12577: CALL_OW 337
// for i in UnitFilter ( ruOutpost , [ f_type , unit_building ] ) do
12581: LD_ADDR_VAR 0 1
12585: PUSH
12586: LD_EXP 14
12590: PPUSH
12591: LD_INT 21
12593: PUSH
12594: LD_INT 3
12596: PUSH
12597: EMPTY
12598: LIST
12599: LIST
12600: PPUSH
12601: CALL_OW 72
12605: PUSH
12606: FOR_IN
12607: IFFALSE 12623
// SetSide ( i , 1 ) ;
12609: LD_VAR 0 1
12613: PPUSH
12614: LD_INT 1
12616: PPUSH
12617: CALL_OW 235
12621: GO 12606
12623: POP
12624: POP
// baseCaptured := true ;
12625: LD_ADDR_EXP 17
12629: PUSH
12630: LD_INT 1
12632: ST_TO_ADDR
// wait ( 0 0$35 ) ;
12633: LD_INT 1225
12635: PPUSH
12636: CALL_OW 67
// PrepareReinforcements ;
12640: CALL 9554 0 0
// end ;
12644: PPOPN 1
12646: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 167 , 197 , 20 ] ] ) > 3 do
12647: LD_INT 22
12649: PUSH
12650: LD_INT 3
12652: PUSH
12653: EMPTY
12654: LIST
12655: LIST
12656: PUSH
12657: LD_INT 92
12659: PUSH
12660: LD_INT 167
12662: PUSH
12663: LD_INT 197
12665: PUSH
12666: LD_INT 20
12668: PUSH
12669: EMPTY
12670: LIST
12671: LIST
12672: LIST
12673: LIST
12674: PUSH
12675: EMPTY
12676: LIST
12677: LIST
12678: PPUSH
12679: CALL_OW 69
12683: PUSH
12684: LD_INT 3
12686: GREATER
12687: IFFALSE 12704
12689: GO 12691
12691: DISABLE
// SayRadio ( Powell , DP-RuAttack ) ;
12692: LD_EXP 12
12696: PPUSH
12697: LD_STRING DP-RuAttack
12699: PPUSH
12700: CALL_OW 94
12704: END
// every 0 0$2 trigger not debug and SeeXY ( 1 , 168 , 74 ) and GetEnvironmentType ( 168 , 72 ) do
12705: LD_EXP 1
12709: NOT
12710: PUSH
12711: LD_INT 1
12713: PPUSH
12714: LD_INT 168
12716: PPUSH
12717: LD_INT 74
12719: PPUSH
12720: CALL_OW 293
12724: AND
12725: PUSH
12726: LD_INT 168
12728: PPUSH
12729: LD_INT 72
12731: PPUSH
12732: CALL_OW 553
12736: AND
12737: IFFALSE 12789
12739: GO 12741
12741: DISABLE
// begin CenterOnXY ( 168 , 72 ) ;
12742: LD_INT 168
12744: PPUSH
12745: LD_INT 72
12747: PPUSH
12748: CALL_OW 84
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Blockade ) ;
12752: LD_EXP 9
12756: PPUSH
12757: LD_STRING D
12759: PUSH
12760: LD_STRING I
12762: PUSH
12763: LD_STRING J
12765: PUSH
12766: LD_STRING S
12768: PUSH
12769: EMPTY
12770: LIST
12771: LIST
12772: LIST
12773: PUSH
12774: LD_EXP 25
12778: ARRAY
12779: STR
12780: PUSH
12781: LD_STRING -1-Blockade
12783: STR
12784: PPUSH
12785: CALL_OW 88
// end ;
12789: END
// every 0 0$2 trigger GameType = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_see , 4 ] ] ) do
12790: LD_EXP 2
12794: PUSH
12795: LD_INT 1
12797: EQUAL
12798: PUSH
12799: LD_INT 22
12801: PUSH
12802: LD_INT 1
12804: PUSH
12805: EMPTY
12806: LIST
12807: LIST
12808: PUSH
12809: LD_INT 101
12811: PUSH
12812: LD_INT 4
12814: PUSH
12815: EMPTY
12816: LIST
12817: LIST
12818: PUSH
12819: EMPTY
12820: LIST
12821: LIST
12822: PPUSH
12823: CALL_OW 69
12827: AND
12828: IFFALSE 13360
12830: GO 12832
12832: DISABLE
// begin ChangeSideFog ( 4 , 1 ) ;
12833: LD_INT 4
12835: PPUSH
12836: LD_INT 1
12838: PPUSH
12839: CALL_OW 343
// DialogueOn ;
12843: CALL_OW 6
// CenterNowOnUnits ( allyCommander ) ;
12847: LD_EXP 11
12851: PPUSH
12852: CALL_OW 87
// SayRadio ( allyCommander , DM-1-Contact ) ;
12856: LD_EXP 11
12860: PPUSH
12861: LD_STRING DM-1-Contact
12863: PPUSH
12864: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Contact ) ;
12868: LD_EXP 9
12872: PPUSH
12873: LD_STRING D
12875: PUSH
12876: LD_STRING I
12878: PUSH
12879: LD_STRING J
12881: PUSH
12882: LD_STRING S
12884: PUSH
12885: EMPTY
12886: LIST
12887: LIST
12888: LIST
12889: PUSH
12890: LD_EXP 25
12894: ARRAY
12895: STR
12896: PUSH
12897: LD_STRING -1-Contact
12899: STR
12900: PPUSH
12901: CALL_OW 88
// if commander = 1 then
12905: LD_EXP 25
12909: PUSH
12910: LD_INT 1
12912: EQUAL
12913: IFFALSE 13045
// begin SayRadio ( allyCommander , DM-2-Contact ) ;
12915: LD_EXP 11
12919: PPUSH
12920: LD_STRING DM-2-Contact
12922: PPUSH
12923: CALL_OW 94
// Say ( playerCommander , DI-2-Contact ) ;
12927: LD_EXP 9
12931: PPUSH
12932: LD_STRING DI-2-Contact
12934: PPUSH
12935: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) and GetAttitude ( 8 , 1 ) = att_enemy then
12939: LD_INT 22
12941: PUSH
12942: LD_INT 8
12944: PUSH
12945: EMPTY
12946: LIST
12947: LIST
12948: PUSH
12949: LD_INT 21
12951: PUSH
12952: LD_INT 1
12954: PUSH
12955: EMPTY
12956: LIST
12957: LIST
12958: PUSH
12959: EMPTY
12960: LIST
12961: LIST
12962: PPUSH
12963: CALL_OW 69
12967: PUSH
12968: LD_INT 8
12970: PPUSH
12971: LD_INT 1
12973: PPUSH
12974: CALL_OW 81
12978: PUSH
12979: LD_INT 2
12981: EQUAL
12982: AND
12983: IFFALSE 13009
// begin SayRadio ( allyCommander , DM-3-Contact ) ;
12985: LD_EXP 11
12989: PPUSH
12990: LD_STRING DM-3-Contact
12992: PPUSH
12993: CALL_OW 94
// Say ( playerCommander , DI-3-Contact ) ;
12997: LD_EXP 9
13001: PPUSH
13002: LD_STRING DI-3-Contact
13004: PPUSH
13005: CALL_OW 88
// end ; SayRadio ( allyCommander , DM-4-Contact ) ;
13009: LD_EXP 11
13013: PPUSH
13014: LD_STRING DM-4-Contact
13016: PPUSH
13017: CALL_OW 94
// Say ( playerCommander , DI-4-Contact ) ;
13021: LD_EXP 9
13025: PPUSH
13026: LD_STRING DI-4-Contact
13028: PPUSH
13029: CALL_OW 88
// SayRadio ( allyCommander , DM-5-Contact ) ;
13033: LD_EXP 11
13037: PPUSH
13038: LD_STRING DM-5-Contact
13040: PPUSH
13041: CALL_OW 94
// end ; if commander = 2 then
13045: LD_EXP 25
13049: PUSH
13050: LD_INT 2
13052: EQUAL
13053: IFFALSE 13185
// begin SayRadio ( allyCommander , DM-2c-Contact ) ;
13055: LD_EXP 11
13059: PPUSH
13060: LD_STRING DM-2c-Contact
13062: PPUSH
13063: CALL_OW 94
// Say ( playerCommander , DJ-2-Contact ) ;
13067: LD_EXP 9
13071: PPUSH
13072: LD_STRING DJ-2-Contact
13074: PPUSH
13075: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) and GetAttitude ( 8 , 1 ) = att_enemy then
13079: LD_INT 22
13081: PUSH
13082: LD_INT 8
13084: PUSH
13085: EMPTY
13086: LIST
13087: LIST
13088: PUSH
13089: LD_INT 21
13091: PUSH
13092: LD_INT 1
13094: PUSH
13095: EMPTY
13096: LIST
13097: LIST
13098: PUSH
13099: EMPTY
13100: LIST
13101: LIST
13102: PPUSH
13103: CALL_OW 69
13107: PUSH
13108: LD_INT 8
13110: PPUSH
13111: LD_INT 1
13113: PPUSH
13114: CALL_OW 81
13118: PUSH
13119: LD_INT 2
13121: EQUAL
13122: AND
13123: IFFALSE 13149
// begin SayRadio ( allyCommander , DM-3-Contact ) ;
13125: LD_EXP 11
13129: PPUSH
13130: LD_STRING DM-3-Contact
13132: PPUSH
13133: CALL_OW 94
// Say ( playerCommander , DJ-3-Contact ) ;
13137: LD_EXP 9
13141: PPUSH
13142: LD_STRING DJ-3-Contact
13144: PPUSH
13145: CALL_OW 88
// end ; SayRadio ( allyCommander , DM-4-Contact ) ;
13149: LD_EXP 11
13153: PPUSH
13154: LD_STRING DM-4-Contact
13156: PPUSH
13157: CALL_OW 94
// Say ( playerCommander , DJ-4-Contact ) ;
13161: LD_EXP 9
13165: PPUSH
13166: LD_STRING DJ-4-Contact
13168: PPUSH
13169: CALL_OW 88
// SayRadio ( allyCommander , DM-5a-Contact ) ;
13173: LD_EXP 11
13177: PPUSH
13178: LD_STRING DM-5a-Contact
13180: PPUSH
13181: CALL_OW 94
// end ; if commander = 3 then
13185: LD_EXP 25
13189: PUSH
13190: LD_INT 3
13192: EQUAL
13193: IFFALSE 13349
// begin SayRadio ( allyCommander , DM-2a-Contact ) ;
13195: LD_EXP 11
13199: PPUSH
13200: LD_STRING DM-2a-Contact
13202: PPUSH
13203: CALL_OW 94
// Say ( playerCommander , DS-2a-Contact ) ;
13207: LD_EXP 9
13211: PPUSH
13212: LD_STRING DS-2a-Contact
13214: PPUSH
13215: CALL_OW 88
// SayRadio ( allyCommander , DM-2b-Contact ) ;
13219: LD_EXP 11
13223: PPUSH
13224: LD_STRING DM-2b-Contact
13226: PPUSH
13227: CALL_OW 94
// Say ( playerCommander , DS-2b-Contact ) ;
13231: LD_EXP 9
13235: PPUSH
13236: LD_STRING DS-2b-Contact
13238: PPUSH
13239: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) and GetAttitude ( 8 , 1 ) = att_enemy then
13243: LD_INT 22
13245: PUSH
13246: LD_INT 8
13248: PUSH
13249: EMPTY
13250: LIST
13251: LIST
13252: PUSH
13253: LD_INT 21
13255: PUSH
13256: LD_INT 1
13258: PUSH
13259: EMPTY
13260: LIST
13261: LIST
13262: PUSH
13263: EMPTY
13264: LIST
13265: LIST
13266: PPUSH
13267: CALL_OW 69
13271: PUSH
13272: LD_INT 8
13274: PPUSH
13275: LD_INT 1
13277: PPUSH
13278: CALL_OW 81
13282: PUSH
13283: LD_INT 2
13285: EQUAL
13286: AND
13287: IFFALSE 13313
// begin SayRadio ( allyCommander , DM-3-Contact ) ;
13289: LD_EXP 11
13293: PPUSH
13294: LD_STRING DM-3-Contact
13296: PPUSH
13297: CALL_OW 94
// Say ( playerCommander , DS-3-Contact ) ;
13301: LD_EXP 9
13305: PPUSH
13306: LD_STRING DS-3-Contact
13308: PPUSH
13309: CALL_OW 88
// end ; SayRadio ( allyCommander , DM-4-Contact ) ;
13313: LD_EXP 11
13317: PPUSH
13318: LD_STRING DM-4-Contact
13320: PPUSH
13321: CALL_OW 94
// Say ( playerCommander , DS-4-Contact ) ;
13325: LD_EXP 9
13329: PPUSH
13330: LD_STRING DS-4-Contact
13332: PPUSH
13333: CALL_OW 88
// SayRadio ( allyCommander , DM-5-Contact ) ;
13337: LD_EXP 11
13341: PPUSH
13342: LD_STRING DM-5-Contact
13344: PPUSH
13345: CALL_OW 94
// end ; DialogueOff ;
13349: CALL_OW 7
// ChangeMissionObjectives ( O3 ) ;
13353: LD_STRING O3
13355: PPUSH
13356: CALL_OW 337
// end ;
13360: END
// every 0 0$10 trigger GameType = 1 and legDestCounter >= [ 15 , 20 , 25 ] [ Difficulty ] and FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_warehouse ] ] ) and FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] ] ) >= 5 do var time , sib , sources , i ;
13361: LD_EXP 2
13365: PUSH
13366: LD_INT 1
13368: EQUAL
13369: PUSH
13370: LD_EXP 18
13374: PUSH
13375: LD_INT 15
13377: PUSH
13378: LD_INT 20
13380: PUSH
13381: LD_INT 25
13383: PUSH
13384: EMPTY
13385: LIST
13386: LIST
13387: LIST
13388: PUSH
13389: LD_OWVAR 67
13393: ARRAY
13394: GREATEREQUAL
13395: AND
13396: PUSH
13397: LD_INT 22
13399: PUSH
13400: LD_INT 8
13402: PUSH
13403: EMPTY
13404: LIST
13405: LIST
13406: PUSH
13407: LD_INT 30
13409: PUSH
13410: LD_INT 1
13412: PUSH
13413: EMPTY
13414: LIST
13415: LIST
13416: PUSH
13417: EMPTY
13418: LIST
13419: LIST
13420: PPUSH
13421: CALL_OW 69
13425: AND
13426: PUSH
13427: LD_INT 22
13429: PUSH
13430: LD_INT 8
13432: PUSH
13433: EMPTY
13434: LIST
13435: LIST
13436: PUSH
13437: LD_INT 21
13439: PUSH
13440: LD_INT 3
13442: PUSH
13443: EMPTY
13444: LIST
13445: LIST
13446: PUSH
13447: EMPTY
13448: LIST
13449: LIST
13450: PPUSH
13451: CALL_OW 69
13455: PUSH
13456: LD_INT 5
13458: GREATEREQUAL
13459: AND
13460: IFFALSE 13983
13462: GO 13464
13464: DISABLE
13465: LD_INT 0
13467: PPUSH
13468: PPUSH
13469: PPUSH
13470: PPUSH
// begin DialogueOn ;
13471: CALL_OW 6
// SayRadio ( Farmer , DF-1-Leg ) ;
13475: LD_EXP 13
13479: PPUSH
13480: LD_STRING DF-1-Leg
13482: PPUSH
13483: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Leg ) ;
13487: LD_EXP 9
13491: PPUSH
13492: LD_STRING D
13494: PUSH
13495: LD_STRING I
13497: PUSH
13498: LD_STRING J
13500: PUSH
13501: LD_STRING S
13503: PUSH
13504: EMPTY
13505: LIST
13506: LIST
13507: LIST
13508: PUSH
13509: LD_EXP 25
13513: ARRAY
13514: STR
13515: PUSH
13516: LD_STRING -1-Leg
13518: STR
13519: PPUSH
13520: CALL_OW 88
// SayRadio ( Farmer , DF-2-Leg ) ;
13524: LD_EXP 13
13528: PPUSH
13529: LD_STRING DF-2-Leg
13531: PPUSH
13532: CALL_OW 94
// DialogueOff ;
13536: CALL_OW 7
// case Query ( QLegionOffer ) of 1 :
13540: LD_STRING QLegionOffer
13542: PPUSH
13543: CALL_OW 97
13547: PUSH
13548: LD_INT 1
13550: DOUBLE
13551: EQUAL
13552: IFTRUE 13556
13554: GO 13559
13556: POP
// ; 2 :
13557: GO 13573
13559: LD_INT 2
13561: DOUBLE
13562: EQUAL
13563: IFTRUE 13567
13565: GO 13572
13567: POP
// exit ; end ;
13568: GO 13983
13570: GO 13573
13572: POP
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -2-Leg ) ;
13573: LD_EXP 9
13577: PPUSH
13578: LD_STRING D
13580: PUSH
13581: LD_STRING I
13583: PUSH
13584: LD_STRING J
13586: PUSH
13587: LD_STRING S
13589: PUSH
13590: EMPTY
13591: LIST
13592: LIST
13593: LIST
13594: PUSH
13595: LD_EXP 25
13599: ARRAY
13600: STR
13601: PUSH
13602: LD_STRING -2-Leg
13604: STR
13605: PPUSH
13606: CALL_OW 88
// legOfferAccepted := true ;
13610: LD_ADDR_EXP 20
13614: PUSH
13615: LD_INT 1
13617: ST_TO_ADDR
// SetAreaMapShow ( legOfferArea , 1 ) ;
13618: LD_INT 21
13620: PPUSH
13621: LD_INT 1
13623: PPUSH
13624: CALL_OW 424
// CenterOnXY ( 190 , 227 ) ;
13628: LD_INT 190
13630: PPUSH
13631: LD_INT 227
13633: PPUSH
13634: CALL_OW 84
// time := [ 8 8$00 , 7 7$00 , 6 6$00 ] [ Difficulty ] ;
13638: LD_ADDR_VAR 0 1
13642: PUSH
13643: LD_INT 16800
13645: PUSH
13646: LD_INT 14700
13648: PUSH
13649: LD_INT 12600
13651: PUSH
13652: EMPTY
13653: LIST
13654: LIST
13655: LIST
13656: PUSH
13657: LD_OWVAR 67
13661: ARRAY
13662: ST_TO_ADDR
// sib := 100 ;
13663: LD_ADDR_VAR 0 2
13667: PUSH
13668: LD_INT 100
13670: ST_TO_ADDR
// disableGlobalTimer := true ;
13671: LD_ADDR_EXP 4
13675: PUSH
13676: LD_INT 1
13678: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13679: LD_INT 35
13681: PPUSH
13682: CALL_OW 67
// time := time - 0 0$1 ;
13686: LD_ADDR_VAR 0 1
13690: PUSH
13691: LD_VAR 0 1
13695: PUSH
13696: LD_INT 35
13698: MINUS
13699: ST_TO_ADDR
// sources := GetResourceArea ( legOfferArea , mat_siberit ) ;
13700: LD_ADDR_VAR 0 3
13704: PUSH
13705: LD_INT 21
13707: PPUSH
13708: LD_INT 3
13710: PPUSH
13711: CALL_OW 287
13715: ST_TO_ADDR
// display_strings := [ #SkrTime , tick , #Skr-LegOffer , sib , time ] ;
13716: LD_ADDR_OWVAR 47
13720: PUSH
13721: LD_STRING #SkrTime
13723: PUSH
13724: LD_OWVAR 1
13728: PUSH
13729: LD_STRING #Skr-LegOffer
13731: PUSH
13732: LD_VAR 0 2
13736: PUSH
13737: LD_VAR 0 1
13741: PUSH
13742: EMPTY
13743: LIST
13744: LIST
13745: LIST
13746: LIST
13747: LIST
13748: ST_TO_ADDR
// if sources then
13749: LD_VAR 0 3
13753: IFFALSE 13785
// begin sib := sib - sources * 10 ;
13755: LD_ADDR_VAR 0 2
13759: PUSH
13760: LD_VAR 0 2
13764: PUSH
13765: LD_VAR 0 3
13769: PUSH
13770: LD_INT 10
13772: MUL
13773: MINUS
13774: ST_TO_ADDR
// EraseResourceArea ( legOfferArea , mat_siberit ) ;
13775: LD_INT 21
13777: PPUSH
13778: LD_INT 3
13780: PPUSH
13781: CALL_OW 286
// end ; until time = 0 0$00 or sib <= 0 or not FilterAllUnits ( [ f_side , 8 ] ) ;
13785: LD_VAR 0 1
13789: PUSH
13790: LD_INT 0
13792: EQUAL
13793: PUSH
13794: LD_VAR 0 2
13798: PUSH
13799: LD_INT 0
13801: LESSEQUAL
13802: OR
13803: PUSH
13804: LD_INT 22
13806: PUSH
13807: LD_INT 8
13809: PUSH
13810: EMPTY
13811: LIST
13812: LIST
13813: PPUSH
13814: CALL_OW 69
13818: NOT
13819: OR
13820: IFFALSE 13679
// SetAreaMapShow ( legOfferArea , 0 ) ;
13822: LD_INT 21
13824: PPUSH
13825: LD_INT 0
13827: PPUSH
13828: CALL_OW 424
// disableGlobalTimer := false ;
13832: LD_ADDR_EXP 4
13836: PUSH
13837: LD_INT 0
13839: ST_TO_ADDR
// if sib <= 0 then
13840: LD_VAR 0 2
13844: PUSH
13845: LD_INT 0
13847: LESSEQUAL
13848: IFFALSE 13964
// begin legChangeSide := true ;
13850: LD_ADDR_EXP 21
13854: PUSH
13855: LD_INT 1
13857: ST_TO_ADDR
// SayRadio ( Farmer , DF-4y-Leg ) ;
13858: LD_EXP 13
13862: PPUSH
13863: LD_STRING DF-4y-Leg
13865: PPUSH
13866: CALL_OW 94
// ChangeMissionObjectives ( O3a ) ;
13870: LD_STRING O3a
13872: PPUSH
13873: CALL_OW 337
// ChangeSideFog ( 8 , 1 ) ;
13877: LD_INT 8
13879: PPUSH
13880: LD_INT 1
13882: PPUSH
13883: CALL_OW 343
// SetAttitude ( 8 , 1 , att_friend , true ) ;
13887: LD_INT 8
13889: PPUSH
13890: LD_INT 1
13892: PPUSH
13893: LD_INT 1
13895: PPUSH
13896: LD_INT 1
13898: PPUSH
13899: CALL_OW 80
// SetAttitude ( 8 , 4 , att_friend , true ) ;
13903: LD_INT 8
13905: PPUSH
13906: LD_INT 4
13908: PPUSH
13909: LD_INT 1
13911: PPUSH
13912: LD_INT 1
13914: PPUSH
13915: CALL_OW 80
// SetAttitude ( 8 , 6 , att_enemy , true ) ;
13919: LD_INT 8
13921: PPUSH
13922: LD_INT 6
13924: PPUSH
13925: LD_INT 2
13927: PPUSH
13928: LD_INT 1
13930: PPUSH
13931: CALL_OW 80
// SetAttitude ( 8 , 3 , att_enemy , true ) ;
13935: LD_INT 8
13937: PPUSH
13938: LD_INT 3
13940: PPUSH
13941: LD_INT 2
13943: PPUSH
13944: LD_INT 1
13946: PPUSH
13947: CALL_OW 80
// wait ( 0 0$30 ) ;
13951: LD_INT 1050
13953: PPUSH
13954: CALL_OW 67
// PrepareLegionReinforcements ;
13958: CALL 10254 0 0
// end else
13962: GO 13983
// begin ChangeMissionObjectives ( O3a ) ;
13964: LD_STRING O3a
13966: PPUSH
13967: CALL_OW 337
// SayRadio ( Farmer , DF-4n-Leg ) ;
13971: LD_EXP 13
13975: PPUSH
13976: LD_STRING DF-4n-Leg
13978: PPUSH
13979: CALL_OW 94
// end ; end ;
13983: PPOPN 4
13985: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) = 0 and GetAttitude ( 8 , 1 ) = att_enemy do
13986: LD_INT 22
13988: PUSH
13989: LD_INT 8
13991: PUSH
13992: EMPTY
13993: LIST
13994: LIST
13995: PUSH
13996: LD_INT 21
13998: PUSH
13999: LD_INT 1
14001: PUSH
14002: EMPTY
14003: LIST
14004: LIST
14005: PUSH
14006: EMPTY
14007: LIST
14008: LIST
14009: PPUSH
14010: CALL_OW 69
14014: PUSH
14015: LD_INT 0
14017: EQUAL
14018: PUSH
14019: LD_INT 8
14021: PPUSH
14022: LD_INT 1
14024: PPUSH
14025: CALL_OW 81
14029: PUSH
14030: LD_INT 2
14032: EQUAL
14033: AND
14034: IFFALSE 14046
14036: GO 14038
14038: DISABLE
// ChangeMissionObjectives ( O3a ) ;
14039: LD_STRING O3a
14041: PPUSH
14042: CALL_OW 337
14046: END
// every 0 0$1 trigger GameType = 1 and game and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) = 0 do
14047: LD_EXP 2
14051: PUSH
14052: LD_INT 1
14054: EQUAL
14055: PUSH
14056: LD_EXP 3
14060: AND
14061: PUSH
14062: LD_INT 22
14064: PUSH
14065: LD_INT 3
14067: PUSH
14068: EMPTY
14069: LIST
14070: LIST
14071: PUSH
14072: LD_INT 21
14074: PUSH
14075: LD_INT 1
14077: PUSH
14078: EMPTY
14079: LIST
14080: LIST
14081: PUSH
14082: EMPTY
14083: LIST
14084: LIST
14085: PPUSH
14086: CALL_OW 69
14090: PUSH
14091: LD_INT 0
14093: EQUAL
14094: AND
14095: PUSH
14096: LD_INT 22
14098: PUSH
14099: LD_INT 3
14101: PUSH
14102: EMPTY
14103: LIST
14104: LIST
14105: PUSH
14106: LD_INT 30
14108: PUSH
14109: LD_INT 1
14111: PUSH
14112: EMPTY
14113: LIST
14114: LIST
14115: PUSH
14116: EMPTY
14117: LIST
14118: LIST
14119: PPUSH
14120: CALL_OW 69
14124: PUSH
14125: LD_INT 0
14127: EQUAL
14128: AND
14129: IFFALSE 14367
14131: GO 14133
14133: DISABLE
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Win ) ;
14134: LD_EXP 9
14138: PPUSH
14139: LD_STRING D
14141: PUSH
14142: LD_STRING I
14144: PUSH
14145: LD_STRING J
14147: PUSH
14148: LD_STRING S
14150: PUSH
14151: EMPTY
14152: LIST
14153: LIST
14154: LIST
14155: PUSH
14156: LD_EXP 25
14160: ARRAY
14161: STR
14162: PUSH
14163: LD_STRING -1-Win
14165: STR
14166: PPUSH
14167: CALL_OW 88
// if tick >= [ 150 150$0 , 130 130$0 , 110 110$0 ] [ Difficulty ] then
14171: LD_OWVAR 1
14175: PUSH
14176: LD_INT 315000
14178: PUSH
14179: LD_INT 273000
14181: PUSH
14182: LD_INT 231000
14184: PUSH
14185: EMPTY
14186: LIST
14187: LIST
14188: LIST
14189: PUSH
14190: LD_OWVAR 67
14194: ARRAY
14195: GREATEREQUAL
14196: IFFALSE 14211
// AddMedal ( med1 , - 1 ) else
14198: LD_STRING med1
14200: PPUSH
14201: LD_INT 1
14203: NEG
14204: PPUSH
14205: CALL_OW 101
14209: GO 14221
// AddMedal ( med1 , 1 ) ;
14211: LD_STRING med1
14213: PPUSH
14214: LD_INT 1
14216: PPUSH
14217: CALL_OW 101
// if allyDestCounter >= [ 20 , 15 , 10 ] [ Difficulty ] then
14221: LD_EXP 22
14225: PUSH
14226: LD_INT 20
14228: PUSH
14229: LD_INT 15
14231: PUSH
14232: LD_INT 10
14234: PUSH
14235: EMPTY
14236: LIST
14237: LIST
14238: LIST
14239: PUSH
14240: LD_OWVAR 67
14244: ARRAY
14245: GREATEREQUAL
14246: IFFALSE 14261
// AddMedal ( med2 , - 1 ) else
14248: LD_STRING med2
14250: PPUSH
14251: LD_INT 1
14253: NEG
14254: PPUSH
14255: CALL_OW 101
14259: GO 14271
// AddMedal ( med2 , 1 ) ;
14261: LD_STRING med2
14263: PPUSH
14264: LD_INT 1
14266: PPUSH
14267: CALL_OW 101
// if GetAttitude ( 8 , 1 ) = att_friend then
14271: LD_INT 8
14273: PPUSH
14274: LD_INT 1
14276: PPUSH
14277: CALL_OW 81
14281: PUSH
14282: LD_INT 1
14284: EQUAL
14285: IFFALSE 14299
// AddMedal ( med3 , 1 ) else
14287: LD_STRING med3
14289: PPUSH
14290: LD_INT 1
14292: PPUSH
14293: CALL_OW 101
14297: GO 14356
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) = 0 then
14299: LD_INT 22
14301: PUSH
14302: LD_INT 8
14304: PUSH
14305: EMPTY
14306: LIST
14307: LIST
14308: PUSH
14309: LD_INT 21
14311: PUSH
14312: LD_INT 1
14314: PUSH
14315: EMPTY
14316: LIST
14317: LIST
14318: PUSH
14319: EMPTY
14320: LIST
14321: LIST
14322: PPUSH
14323: CALL_OW 69
14327: PUSH
14328: LD_INT 0
14330: EQUAL
14331: IFFALSE 14345
// AddMedal ( med3 , 2 ) else
14333: LD_STRING med3
14335: PPUSH
14336: LD_INT 2
14338: PPUSH
14339: CALL_OW 101
14343: GO 14356
// AddMedal ( med3 , - 1 ) ;
14345: LD_STRING med3
14347: PPUSH
14348: LD_INT 1
14350: NEG
14351: PPUSH
14352: CALL_OW 101
// GiveMedals ( MAIN ) ;
14356: LD_STRING MAIN
14358: PPUSH
14359: CALL_OW 102
// YouWin ;
14363: CALL_OW 103
// end ;
14367: END
// every 10 trigger GameType = 1 and staticMines and FilterUnitsInArea ( minesArea , [ f_enemy , 8 ] ) do var i , j , tmp , x , y ;
14368: LD_EXP 2
14372: PUSH
14373: LD_INT 1
14375: EQUAL
14376: PUSH
14377: LD_EXP 16
14381: AND
14382: PUSH
14383: LD_INT 20
14385: PPUSH
14386: LD_INT 81
14388: PUSH
14389: LD_INT 8
14391: PUSH
14392: EMPTY
14393: LIST
14394: LIST
14395: PPUSH
14396: CALL_OW 70
14400: AND
14401: IFFALSE 14680
14403: GO 14405
14405: DISABLE
14406: LD_INT 0
14408: PPUSH
14409: PPUSH
14410: PPUSH
14411: PPUSH
14412: PPUSH
// begin enable ;
14413: ENABLE
// tmp := FilterUnitsInArea ( minesArea , [ f_enemy , 8 ] ) ;
14414: LD_ADDR_VAR 0 3
14418: PUSH
14419: LD_INT 20
14421: PPUSH
14422: LD_INT 81
14424: PUSH
14425: LD_INT 8
14427: PUSH
14428: EMPTY
14429: LIST
14430: LIST
14431: PPUSH
14432: CALL_OW 70
14436: ST_TO_ADDR
// if not tmp then
14437: LD_VAR 0 3
14441: NOT
14442: IFFALSE 14446
// exit ;
14444: GO 14680
// for i in tmp do
14446: LD_ADDR_VAR 0 1
14450: PUSH
14451: LD_VAR 0 3
14455: PUSH
14456: FOR_IN
14457: IFFALSE 14678
// begin x := GetX ( i ) ;
14459: LD_ADDR_VAR 0 4
14463: PUSH
14464: LD_VAR 0 1
14468: PPUSH
14469: CALL_OW 250
14473: ST_TO_ADDR
// y := GetY ( i ) ;
14474: LD_ADDR_VAR 0 5
14478: PUSH
14479: LD_VAR 0 1
14483: PPUSH
14484: CALL_OW 251
14488: ST_TO_ADDR
// if MineAtPos ( x , y ) then
14489: LD_VAR 0 4
14493: PPUSH
14494: LD_VAR 0 5
14498: PPUSH
14499: CALL_OW 458
14503: IFFALSE 14676
// begin LaunchMineAtPos ( x , y , 8 ) ;
14505: LD_VAR 0 4
14509: PPUSH
14510: LD_VAR 0 5
14514: PPUSH
14515: LD_INT 8
14517: PPUSH
14518: CALL_OW 456
// if not dialogueMineDetected then
14522: LD_EXP 28
14526: NOT
14527: IFFALSE 14588
// begin CenterNowOnXY ( x , y ) ;
14529: LD_VAR 0 4
14533: PPUSH
14534: LD_VAR 0 5
14538: PPUSH
14539: CALL_OW 86
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Mine ) ;
14543: LD_EXP 9
14547: PPUSH
14548: LD_STRING D
14550: PUSH
14551: LD_STRING I
14553: PUSH
14554: LD_STRING J
14556: PUSH
14557: LD_STRING S
14559: PUSH
14560: EMPTY
14561: LIST
14562: LIST
14563: LIST
14564: PUSH
14565: LD_EXP 25
14569: ARRAY
14570: STR
14571: PUSH
14572: LD_STRING -1-Mine
14574: STR
14575: PPUSH
14576: CALL_OW 88
// dialogueMineDetected := true ;
14580: LD_ADDR_EXP 28
14584: PUSH
14585: LD_INT 1
14587: ST_TO_ADDR
// end ; for j = 1 to staticMines do
14588: LD_ADDR_VAR 0 2
14592: PUSH
14593: DOUBLE
14594: LD_INT 1
14596: DEC
14597: ST_TO_ADDR
14598: LD_EXP 16
14602: PUSH
14603: FOR_TO
14604: IFFALSE 14674
// if staticMines [ j ] [ 1 ] = x and staticMines [ j ] [ 2 ] = y then
14606: LD_EXP 16
14610: PUSH
14611: LD_VAR 0 2
14615: ARRAY
14616: PUSH
14617: LD_INT 1
14619: ARRAY
14620: PUSH
14621: LD_VAR 0 4
14625: EQUAL
14626: PUSH
14627: LD_EXP 16
14631: PUSH
14632: LD_VAR 0 2
14636: ARRAY
14637: PUSH
14638: LD_INT 2
14640: ARRAY
14641: PUSH
14642: LD_VAR 0 5
14646: EQUAL
14647: AND
14648: IFFALSE 14672
// begin staticMines := Delete ( staticMines , j ) ;
14650: LD_ADDR_EXP 16
14654: PUSH
14655: LD_EXP 16
14659: PPUSH
14660: LD_VAR 0 2
14664: PPUSH
14665: CALL_OW 3
14669: ST_TO_ADDR
// break ;
14670: GO 14674
// end ;
14672: GO 14603
14674: POP
14675: POP
// end ; end ;
14676: GO 14456
14678: POP
14679: POP
// end ;
14680: PPOPN 5
14682: END
// every 30 30$00 + 50 50$00 trigger GameType = 1 and game and sibBombAllowed and UnitFilter ( mc_bases [ mc_rus_1 ] , [ f_btype , b_factory ] ) do var bomb , e ;
14683: LD_EXP 2
14687: PUSH
14688: LD_INT 1
14690: EQUAL
14691: PUSH
14692: LD_EXP 3
14696: AND
14697: PUSH
14698: LD_EXP 23
14702: AND
14703: PUSH
14704: LD_EXP 44
14708: PUSH
14709: LD_EXP 7
14713: ARRAY
14714: PPUSH
14715: LD_INT 30
14717: PUSH
14718: LD_INT 3
14720: PUSH
14721: EMPTY
14722: LIST
14723: LIST
14724: PPUSH
14725: CALL_OW 72
14729: AND
14730: IFFALSE 14934
14732: GO 14734
14734: DISABLE
14735: LD_INT 0
14737: PPUSH
14738: PPUSH
// begin enable ;
14739: ENABLE
// MC_InsertProduceList ( mc_rus_1 , [ [ ru_heavy_wheeled , engine_siberite , control_computer , ru_siberium_rocket ] ] ) ;
14740: LD_EXP 7
14744: PPUSH
14745: LD_INT 23
14747: PUSH
14748: LD_INT 3
14750: PUSH
14751: LD_INT 3
14753: PUSH
14754: LD_INT 48
14756: PUSH
14757: EMPTY
14758: LIST
14759: LIST
14760: LIST
14761: LIST
14762: PUSH
14763: EMPTY
14764: LIST
14765: PPUSH
14766: CALL 79330 0 2
// repeat wait ( 0 0$1 ) ;
14770: LD_INT 35
14772: PPUSH
14773: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) ;
14777: LD_INT 22
14779: PUSH
14780: LD_INT 3
14782: PUSH
14783: EMPTY
14784: LIST
14785: LIST
14786: PUSH
14787: LD_INT 34
14789: PUSH
14790: LD_INT 48
14792: PUSH
14793: EMPTY
14794: LIST
14795: LIST
14796: PUSH
14797: EMPTY
14798: LIST
14799: LIST
14800: PPUSH
14801: CALL_OW 69
14805: IFFALSE 14770
// bomb := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) ;
14807: LD_ADDR_VAR 0 1
14811: PUSH
14812: LD_INT 22
14814: PUSH
14815: LD_INT 3
14817: PUSH
14818: EMPTY
14819: LIST
14820: LIST
14821: PUSH
14822: LD_INT 34
14824: PUSH
14825: LD_INT 48
14827: PUSH
14828: EMPTY
14829: LIST
14830: LIST
14831: PUSH
14832: EMPTY
14833: LIST
14834: LIST
14835: PPUSH
14836: CALL_OW 69
14840: ST_TO_ADDR
// e := FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_type , unit_building ] ] ) ;
14841: LD_ADDR_VAR 0 2
14845: PUSH
14846: LD_INT 81
14848: PUSH
14849: LD_INT 3
14851: PUSH
14852: EMPTY
14853: LIST
14854: LIST
14855: PUSH
14856: LD_INT 21
14858: PUSH
14859: LD_INT 3
14861: PUSH
14862: EMPTY
14863: LIST
14864: LIST
14865: PUSH
14866: EMPTY
14867: LIST
14868: LIST
14869: PPUSH
14870: CALL_OW 69
14874: ST_TO_ADDR
// if e then
14875: LD_VAR 0 2
14879: IFFALSE 14905
// e := NearestUnitToUnit ( e , bomb [ 1 ] ) ;
14881: LD_ADDR_VAR 0 2
14885: PUSH
14886: LD_VAR 0 2
14890: PPUSH
14891: LD_VAR 0 1
14895: PUSH
14896: LD_INT 1
14898: ARRAY
14899: PPUSH
14900: CALL_OW 74
14904: ST_TO_ADDR
// ComAttackPlace ( bomb , GetX ( e ) , GetY ( e ) ) ;
14905: LD_VAR 0 1
14909: PPUSH
14910: LD_VAR 0 2
14914: PPUSH
14915: CALL_OW 250
14919: PPUSH
14920: LD_VAR 0 2
14924: PPUSH
14925: CALL_OW 251
14929: PPUSH
14930: CALL_OW 116
// end ;
14934: PPOPN 2
14936: END
// every 0 0$2 trigger Difficulty > 1 and UnitFilter ( mc_bases [ mc_rus_1 ] , [ f_class , 3 ] ) and GameType = 1 and game and GetTech ( tech_Behemoth , 3 ) = state_researched do var tmp , i ;
14937: LD_OWVAR 67
14941: PUSH
14942: LD_INT 1
14944: GREATER
14945: PUSH
14946: LD_EXP 44
14950: PUSH
14951: LD_EXP 7
14955: ARRAY
14956: PPUSH
14957: LD_INT 25
14959: PUSH
14960: LD_INT 3
14962: PUSH
14963: EMPTY
14964: LIST
14965: LIST
14966: PPUSH
14967: CALL_OW 72
14971: AND
14972: PUSH
14973: LD_EXP 2
14977: PUSH
14978: LD_INT 1
14980: EQUAL
14981: AND
14982: PUSH
14983: LD_EXP 3
14987: AND
14988: PUSH
14989: LD_INT 23
14991: PPUSH
14992: LD_INT 3
14994: PPUSH
14995: CALL_OW 321
14999: PUSH
15000: LD_INT 2
15002: EQUAL
15003: AND
15004: IFFALSE 15131
15006: GO 15008
15008: DISABLE
15009: LD_INT 0
15011: PPUSH
15012: PPUSH
// begin tmp := UnitFilter ( mc_bases [ mc_rus_1 ] , [ f_class , 3 ] ) ;
15013: LD_ADDR_VAR 0 1
15017: PUSH
15018: LD_EXP 44
15022: PUSH
15023: LD_EXP 7
15027: ARRAY
15028: PPUSH
15029: LD_INT 25
15031: PUSH
15032: LD_INT 3
15034: PUSH
15035: EMPTY
15036: LIST
15037: LIST
15038: PPUSH
15039: CALL_OW 72
15043: ST_TO_ADDR
// if not tmp then
15044: LD_VAR 0 1
15048: NOT
15049: IFFALSE 15053
// exit ;
15051: GO 15131
// for i in tmp do
15053: LD_ADDR_VAR 0 2
15057: PUSH
15058: LD_VAR 0 1
15062: PUSH
15063: FOR_IN
15064: IFFALSE 15110
// begin SetTag ( i , 29 ) ;
15066: LD_VAR 0 2
15070: PPUSH
15071: LD_INT 29
15073: PPUSH
15074: CALL_OW 109
// ComExitBuilding ( i ) ;
15078: LD_VAR 0 2
15082: PPUSH
15083: CALL_OW 122
// AddComBuildBehemoth ( i , b_behemoth , 97 , 133 , 0 ) ;
15087: LD_VAR 0 2
15091: PPUSH
15092: LD_INT 37
15094: PPUSH
15095: LD_INT 97
15097: PPUSH
15098: LD_INT 133
15100: PPUSH
15101: LD_INT 0
15103: PPUSH
15104: CALL_OW 230
// end ;
15108: GO 15063
15110: POP
15111: POP
// wait ( 1 1$00 ) ;
15112: LD_INT 2100
15114: PPUSH
15115: CALL_OW 67
// MC_Reset ( mc_rus_1 , 29 ) ;
15119: LD_EXP 7
15123: PPUSH
15124: LD_INT 29
15126: PPUSH
15127: CALL 59713 0 2
// end ;
15131: PPOPN 2
15133: END
// every 7 7$00 trigger GameType = 1 and GetBType ( HexInfo ( 84 , 128 ) ) = b_warehouse and GetSide ( HexInfo ( 84 , 128 ) ) = 3 do var veh , depot ;
15134: LD_EXP 2
15138: PUSH
15139: LD_INT 1
15141: EQUAL
15142: PUSH
15143: LD_INT 84
15145: PPUSH
15146: LD_INT 128
15148: PPUSH
15149: CALL_OW 428
15153: PPUSH
15154: CALL_OW 266
15158: PUSH
15159: LD_INT 1
15161: EQUAL
15162: AND
15163: PUSH
15164: LD_INT 84
15166: PPUSH
15167: LD_INT 128
15169: PPUSH
15170: CALL_OW 428
15174: PPUSH
15175: CALL_OW 255
15179: PUSH
15180: LD_INT 3
15182: EQUAL
15183: AND
15184: IFFALSE 15357
15186: GO 15188
15188: DISABLE
15189: LD_INT 0
15191: PPUSH
15192: PPUSH
// begin enable ;
15193: ENABLE
// depot := HexInfo ( 84 , 128 ) ;
15194: LD_ADDR_VAR 0 2
15198: PUSH
15199: LD_INT 84
15201: PPUSH
15202: LD_INT 128
15204: PPUSH
15205: CALL_OW 428
15209: ST_TO_ADDR
// uc_side := 3 ;
15210: LD_ADDR_OWVAR 20
15214: PUSH
15215: LD_INT 3
15217: ST_TO_ADDR
// uc_nation := 3 ;
15218: LD_ADDR_OWVAR 21
15222: PUSH
15223: LD_INT 3
15225: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_siberite , control_computer , ru_cargo_bay , 0 ) ;
15226: LD_INT 21
15228: PPUSH
15229: LD_INT 3
15231: PPUSH
15232: LD_INT 3
15234: PPUSH
15235: LD_INT 51
15237: PPUSH
15238: LD_INT 0
15240: PPUSH
15241: CALL 24179 0 5
// veh := CreateVehicle ;
15245: LD_ADDR_VAR 0 1
15249: PUSH
15250: CALL_OW 45
15254: ST_TO_ADDR
// PlaceUnitXY ( veh , 126 , 227 , false ) ;
15255: LD_VAR 0 1
15259: PPUSH
15260: LD_INT 126
15262: PPUSH
15263: LD_INT 227
15265: PPUSH
15266: LD_INT 0
15268: PPUSH
15269: CALL_OW 48
// SetCargo ( veh , mat_oil , 100 ) ;
15273: LD_VAR 0 1
15277: PPUSH
15278: LD_INT 2
15280: PPUSH
15281: LD_INT 100
15283: PPUSH
15284: CALL_OW 290
// ComGive ( veh , depot ) ;
15288: LD_VAR 0 1
15292: PPUSH
15293: LD_VAR 0 2
15297: PPUSH
15298: CALL_OW 161
// AddComMoveXY ( veh , 126 , 227 ) ;
15302: LD_VAR 0 1
15306: PPUSH
15307: LD_INT 126
15309: PPUSH
15310: LD_INT 227
15312: PPUSH
15313: CALL_OW 171
// wait ( 0 0$10 ) ;
15317: LD_INT 350
15319: PPUSH
15320: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
15324: LD_INT 35
15326: PPUSH
15327: CALL_OW 67
// until IsAt ( veh , 126 , 227 ) ;
15331: LD_VAR 0 1
15335: PPUSH
15336: LD_INT 126
15338: PPUSH
15339: LD_INT 227
15341: PPUSH
15342: CALL_OW 307
15346: IFFALSE 15324
// RemoveUnit ( veh ) ;
15348: LD_VAR 0 1
15352: PPUSH
15353: CALL_OW 64
// end ;
15357: PPOPN 2
15359: END
// every 9 9$00 trigger GameType = 1 and outpostEscape and commander = 2 do var veh , depot ;
15360: LD_EXP 2
15364: PUSH
15365: LD_INT 1
15367: EQUAL
15368: PUSH
15369: LD_EXP 27
15373: AND
15374: PUSH
15375: LD_EXP 25
15379: PUSH
15380: LD_INT 2
15382: EQUAL
15383: AND
15384: IFFALSE 15576
15386: GO 15388
15388: DISABLE
15389: LD_INT 0
15391: PPUSH
15392: PPUSH
// begin enable ;
15393: ENABLE
// if tick >= [ 50 50$00 , 40 40$00 , 30 30$00 ] [ Difficulty ] then
15394: LD_OWVAR 1
15398: PUSH
15399: LD_INT 105000
15401: PUSH
15402: LD_INT 84000
15404: PUSH
15405: LD_INT 63000
15407: PUSH
15408: EMPTY
15409: LIST
15410: LIST
15411: LIST
15412: PUSH
15413: LD_OWVAR 67
15417: ARRAY
15418: GREATEREQUAL
15419: IFFALSE 15422
// disable ;
15421: DISABLE
// uc_side := 4 ;
15422: LD_ADDR_OWVAR 20
15426: PUSH
15427: LD_INT 4
15429: ST_TO_ADDR
// uc_nation := 1 ;
15430: LD_ADDR_OWVAR 21
15434: PUSH
15435: LD_INT 1
15437: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_cargo_bay , 0 ) ;
15438: LD_INT 2
15440: PPUSH
15441: LD_INT 3
15443: PPUSH
15444: LD_INT 3
15446: PPUSH
15447: LD_INT 12
15449: PPUSH
15450: LD_INT 0
15452: PPUSH
15453: CALL 24179 0 5
// veh := CreateVehicle ;
15457: LD_ADDR_VAR 0 1
15461: PUSH
15462: CALL_OW 45
15466: ST_TO_ADDR
// PlaceUnitXY ( veh , 229 , 226 , false ) ;
15467: LD_VAR 0 1
15471: PPUSH
15472: LD_INT 229
15474: PPUSH
15475: LD_INT 226
15477: PPUSH
15478: LD_INT 0
15480: PPUSH
15481: CALL_OW 48
// SetCargo ( veh , mat_cans , 100 ) ;
15485: LD_VAR 0 1
15489: PPUSH
15490: LD_INT 1
15492: PPUSH
15493: LD_INT 100
15495: PPUSH
15496: CALL_OW 290
// AddComMoveToArea ( veh , ruOutpostArea ) ;
15500: LD_VAR 0 1
15504: PPUSH
15505: LD_INT 25
15507: PPUSH
15508: CALL_OW 173
// AddComUnload ( veh ) ;
15512: LD_VAR 0 1
15516: PPUSH
15517: CALL_OW 219
// AddComMoveXY ( veh , 229 , 226 ) ;
15521: LD_VAR 0 1
15525: PPUSH
15526: LD_INT 229
15528: PPUSH
15529: LD_INT 226
15531: PPUSH
15532: CALL_OW 171
// wait ( 0 0$10 ) ;
15536: LD_INT 350
15538: PPUSH
15539: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
15543: LD_INT 35
15545: PPUSH
15546: CALL_OW 67
// until IsAt ( veh , 229 , 226 ) ;
15550: LD_VAR 0 1
15554: PPUSH
15555: LD_INT 229
15557: PPUSH
15558: LD_INT 226
15560: PPUSH
15561: CALL_OW 307
15565: IFFALSE 15543
// RemoveUnit ( veh ) ;
15567: LD_VAR 0 1
15571: PPUSH
15572: CALL_OW 64
// end ;
15576: PPOPN 2
15578: END
// every 15 15$00 trigger GameType = 1 and game and reinforceAllowed do var i , j , veh , tmp , amount ;
15579: LD_EXP 2
15583: PUSH
15584: LD_INT 1
15586: EQUAL
15587: PUSH
15588: LD_EXP 3
15592: AND
15593: PUSH
15594: LD_EXP 24
15598: AND
15599: IFFALSE 15932
15601: GO 15603
15603: DISABLE
15604: LD_INT 0
15606: PPUSH
15607: PPUSH
15608: PPUSH
15609: PPUSH
15610: PPUSH
// begin enable ;
15611: ENABLE
// tmp := [ ] ;
15612: LD_ADDR_VAR 0 4
15616: PUSH
15617: EMPTY
15618: ST_TO_ADDR
// if commander = 1 then
15619: LD_EXP 25
15623: PUSH
15624: LD_INT 1
15626: EQUAL
15627: IFFALSE 15639
// amount := 3 else
15629: LD_ADDR_VAR 0 5
15633: PUSH
15634: LD_INT 3
15636: ST_TO_ADDR
15637: GO 15647
// amount := 2 ;
15639: LD_ADDR_VAR 0 5
15643: PUSH
15644: LD_INT 2
15646: ST_TO_ADDR
// for i = 1 to amount do
15647: LD_ADDR_VAR 0 1
15651: PUSH
15652: DOUBLE
15653: LD_INT 1
15655: DEC
15656: ST_TO_ADDR
15657: LD_VAR 0 5
15661: PUSH
15662: FOR_TO
15663: IFFALSE 15827
// begin wait ( 0 0$5 ) ;
15665: LD_INT 175
15667: PPUSH
15668: CALL_OW 67
// for j = 1 to 3 do
15672: LD_ADDR_VAR 0 2
15676: PUSH
15677: DOUBLE
15678: LD_INT 1
15680: DEC
15681: ST_TO_ADDR
15682: LD_INT 3
15684: PUSH
15685: FOR_TO
15686: IFFALSE 15823
// begin uc_side := 4 ;
15688: LD_ADDR_OWVAR 20
15692: PUSH
15693: LD_INT 4
15695: ST_TO_ADDR
// uc_nation := 1 ;
15696: LD_ADDR_OWVAR 21
15700: PUSH
15701: LD_INT 1
15703: ST_TO_ADDR
// PrepareVehicle ( [ us_medium_tracked , us_morphling ] [ rand ( 1 , 2 ) ] , engine_siberite , control_computer , [ us_laser , us_double_gun , us_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
15704: LD_INT 3
15706: PUSH
15707: LD_INT 5
15709: PUSH
15710: EMPTY
15711: LIST
15712: LIST
15713: PUSH
15714: LD_INT 1
15716: PPUSH
15717: LD_INT 2
15719: PPUSH
15720: CALL_OW 12
15724: ARRAY
15725: PPUSH
15726: LD_INT 3
15728: PPUSH
15729: LD_INT 3
15731: PPUSH
15732: LD_INT 9
15734: PUSH
15735: LD_INT 5
15737: PUSH
15738: LD_INT 7
15740: PUSH
15741: EMPTY
15742: LIST
15743: LIST
15744: LIST
15745: PUSH
15746: LD_INT 1
15748: PPUSH
15749: LD_INT 3
15751: PPUSH
15752: CALL_OW 12
15756: ARRAY
15757: PPUSH
15758: LD_INT 100
15760: PPUSH
15761: CALL 24179 0 5
// veh := CreateVehicle ;
15765: LD_ADDR_VAR 0 3
15769: PUSH
15770: CALL_OW 45
15774: ST_TO_ADDR
// tmp := tmp ^ veh ;
15775: LD_ADDR_VAR 0 4
15779: PUSH
15780: LD_VAR 0 4
15784: PUSH
15785: LD_VAR 0 3
15789: ADD
15790: ST_TO_ADDR
// PlaceUnitArea ( veh , westSpawn , false ) ;
15791: LD_VAR 0 3
15795: PPUSH
15796: LD_INT 22
15798: PPUSH
15799: LD_INT 0
15801: PPUSH
15802: CALL_OW 49
// ComMoveXY ( veh , 119 , 215 ) ;
15806: LD_VAR 0 3
15810: PPUSH
15811: LD_INT 119
15813: PPUSH
15814: LD_INT 215
15816: PPUSH
15817: CALL_OW 111
// end ;
15821: GO 15685
15823: POP
15824: POP
// end ;
15825: GO 15662
15827: POP
15828: POP
// wait ( 0 0$3 ) ;
15829: LD_INT 105
15831: PPUSH
15832: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
15836: LD_INT 35
15838: PPUSH
15839: CALL_OW 67
// for i in tmp do
15843: LD_ADDR_VAR 0 1
15847: PUSH
15848: LD_VAR 0 4
15852: PUSH
15853: FOR_IN
15854: IFFALSE 15921
// if IsDead ( i ) then
15856: LD_VAR 0 1
15860: PPUSH
15861: CALL_OW 301
15865: IFFALSE 15885
// tmp := tmp diff i else
15867: LD_ADDR_VAR 0 4
15871: PUSH
15872: LD_VAR 0 4
15876: PUSH
15877: LD_VAR 0 1
15881: DIFF
15882: ST_TO_ADDR
15883: GO 15919
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 4 ] ) , i ) ) ;
15885: LD_VAR 0 1
15889: PPUSH
15890: LD_INT 81
15892: PUSH
15893: LD_INT 4
15895: PUSH
15896: EMPTY
15897: LIST
15898: LIST
15899: PPUSH
15900: CALL_OW 69
15904: PPUSH
15905: LD_VAR 0 1
15909: PPUSH
15910: CALL_OW 74
15914: PPUSH
15915: CALL_OW 115
15919: GO 15853
15921: POP
15922: POP
// until tmp = [ ] ;
15923: LD_VAR 0 4
15927: PUSH
15928: EMPTY
15929: EQUAL
15930: IFFALSE 15836
// end ;
15932: PPOPN 5
15934: END
// every 0 0$1 trigger GameType = 1 and game do var i , tmp ;
15935: LD_EXP 2
15939: PUSH
15940: LD_INT 1
15942: EQUAL
15943: PUSH
15944: LD_EXP 3
15948: AND
15949: IFFALSE 16050
15951: GO 15953
15953: DISABLE
15954: LD_INT 0
15956: PPUSH
15957: PPUSH
// begin enable ;
15958: ENABLE
// tmp := FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) ;
15959: LD_ADDR_VAR 0 2
15963: PUSH
15964: LD_INT 3
15966: PUSH
15967: LD_INT 22
15969: PUSH
15970: LD_INT 1
15972: PUSH
15973: EMPTY
15974: LIST
15975: LIST
15976: PUSH
15977: EMPTY
15978: LIST
15979: LIST
15980: PUSH
15981: LD_INT 32
15983: PUSH
15984: LD_INT 1
15986: PUSH
15987: EMPTY
15988: LIST
15989: LIST
15990: PUSH
15991: EMPTY
15992: LIST
15993: LIST
15994: PPUSH
15995: CALL_OW 69
15999: ST_TO_ADDR
// if tmp then
16000: LD_VAR 0 2
16004: IFFALSE 16050
// for i in tmp do
16006: LD_ADDR_VAR 0 1
16010: PUSH
16011: LD_VAR 0 2
16015: PUSH
16016: FOR_IN
16017: IFFALSE 16048
// if GetFuel ( i ) < 3 then
16019: LD_VAR 0 1
16023: PPUSH
16024: CALL_OW 261
16028: PUSH
16029: LD_INT 3
16031: LESS
16032: IFFALSE 16046
// SetFuel ( i , 3 ) ;
16034: LD_VAR 0 1
16038: PPUSH
16039: LD_INT 3
16041: PPUSH
16042: CALL_OW 240
16046: GO 16016
16048: POP
16049: POP
// end ;
16050: PPOPN 2
16052: END
// every 15 15$00 trigger game and GetAttitude ( 8 , 4 ) = att_enemy do var i , un , tmp ;
16053: LD_EXP 3
16057: PUSH
16058: LD_INT 8
16060: PPUSH
16061: LD_INT 4
16063: PPUSH
16064: CALL_OW 81
16068: PUSH
16069: LD_INT 2
16071: EQUAL
16072: AND
16073: IFFALSE 16283
16075: GO 16077
16077: DISABLE
16078: LD_INT 0
16080: PPUSH
16081: PPUSH
16082: PPUSH
// begin enable ;
16083: ENABLE
// tmp := [ ] ;
16084: LD_ADDR_VAR 0 3
16088: PUSH
16089: EMPTY
16090: ST_TO_ADDR
// for i = 1 to 4 do
16091: LD_ADDR_VAR 0 1
16095: PUSH
16096: DOUBLE
16097: LD_INT 1
16099: DEC
16100: ST_TO_ADDR
16101: LD_INT 4
16103: PUSH
16104: FOR_TO
16105: IFFALSE 16249
// begin uc_side := 8 ;
16107: LD_ADDR_OWVAR 20
16111: PUSH
16112: LD_INT 8
16114: ST_TO_ADDR
// uc_nation := nation_arabian ;
16115: LD_ADDR_OWVAR 21
16119: PUSH
16120: LD_INT 2
16122: ST_TO_ADDR
// PrepareVehicle ( ar_hovercraft , engine_combustion , control_apeman , [ ar_double_machine_gun , ar_light_gun ] [ rand ( 1 , 2 ) ] , rand ( 60 , 80 ) ) ;
16123: LD_INT 11
16125: PPUSH
16126: LD_INT 1
16128: PPUSH
16129: LD_INT 5
16131: PPUSH
16132: LD_INT 24
16134: PUSH
16135: LD_INT 23
16137: PUSH
16138: EMPTY
16139: LIST
16140: LIST
16141: PUSH
16142: LD_INT 1
16144: PPUSH
16145: LD_INT 2
16147: PPUSH
16148: CALL_OW 12
16152: ARRAY
16153: PPUSH
16154: LD_INT 60
16156: PPUSH
16157: LD_INT 80
16159: PPUSH
16160: CALL_OW 12
16164: PPUSH
16165: CALL 24179 0 5
// un := CreateVehicle ;
16169: LD_ADDR_VAR 0 2
16173: PUSH
16174: CALL_OW 45
16178: ST_TO_ADDR
// SetDir ( un , 2 ) ;
16179: LD_VAR 0 2
16183: PPUSH
16184: LD_INT 2
16186: PPUSH
16187: CALL_OW 233
// tmp := tmp ^ un ;
16191: LD_ADDR_VAR 0 3
16195: PUSH
16196: LD_VAR 0 3
16200: PUSH
16201: LD_VAR 0 2
16205: ADD
16206: ST_TO_ADDR
// PlaceUnitXY ( un , 88 , 2 , false ) ;
16207: LD_VAR 0 2
16211: PPUSH
16212: LD_INT 88
16214: PPUSH
16215: LD_INT 2
16217: PPUSH
16218: LD_INT 0
16220: PPUSH
16221: CALL_OW 48
// ComMoveXY ( un , 93 , 13 ) ;
16225: LD_VAR 0 2
16229: PPUSH
16230: LD_INT 93
16232: PPUSH
16233: LD_INT 13
16235: PPUSH
16236: CALL_OW 111
// wait ( 0 0$2 ) ;
16240: LD_INT 70
16242: PPUSH
16243: CALL_OW 67
// end ;
16247: GO 16104
16249: POP
16250: POP
// for i in tmp do
16251: LD_ADDR_VAR 0 1
16255: PUSH
16256: LD_VAR 0 3
16260: PUSH
16261: FOR_IN
16262: IFFALSE 16281
// AddComMoveXY ( i , 136 , 19 ) ;
16264: LD_VAR 0 1
16268: PPUSH
16269: LD_INT 136
16271: PPUSH
16272: LD_INT 19
16274: PPUSH
16275: CALL_OW 171
16279: GO 16261
16281: POP
16282: POP
// end ;
16283: PPOPN 3
16285: END
// every 7 7$30 + 7 7$30 trigger game do var i , base , tmp , target ;
16286: LD_EXP 3
16290: IFFALSE 17209
16292: GO 16294
16294: DISABLE
16295: LD_INT 0
16297: PPUSH
16298: PPUSH
16299: PPUSH
16300: PPUSH
// begin enable ;
16301: ENABLE
// base := mc_leg ;
16302: LD_ADDR_VAR 0 2
16306: PUSH
16307: LD_EXP 6
16311: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 8 ] , [ f_nation , 2 ] , [ f_btype , b_factory ] ] ) then
16312: LD_INT 22
16314: PUSH
16315: LD_INT 8
16317: PUSH
16318: EMPTY
16319: LIST
16320: LIST
16321: PUSH
16322: LD_INT 23
16324: PUSH
16325: LD_INT 2
16327: PUSH
16328: EMPTY
16329: LIST
16330: LIST
16331: PUSH
16332: LD_INT 30
16334: PUSH
16335: LD_INT 3
16337: PUSH
16338: EMPTY
16339: LIST
16340: LIST
16341: PUSH
16342: EMPTY
16343: LIST
16344: LIST
16345: LIST
16346: PPUSH
16347: CALL_OW 69
16351: NOT
16352: IFFALSE 16356
// exit ;
16354: GO 17209
// if Prob ( 40 ) then
16356: LD_INT 40
16358: PPUSH
16359: CALL_OW 13
16363: IFFALSE 16492
// begin MC_InsertProduceList ( base , [ [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_flame_thrower ] , ] ) ;
16365: LD_VAR 0 2
16369: PPUSH
16370: LD_INT 13
16372: PUSH
16373: LD_INT 1
16375: PUSH
16376: LD_INT 2
16378: PUSH
16379: LD_INT 28
16381: PUSH
16382: EMPTY
16383: LIST
16384: LIST
16385: LIST
16386: LIST
16387: PUSH
16388: LD_INT 13
16390: PUSH
16391: LD_INT 1
16393: PUSH
16394: LD_INT 2
16396: PUSH
16397: LD_INT 28
16399: PUSH
16400: EMPTY
16401: LIST
16402: LIST
16403: LIST
16404: LIST
16405: PUSH
16406: LD_INT 13
16408: PUSH
16409: LD_INT 1
16411: PUSH
16412: LD_INT 2
16414: PUSH
16415: LD_INT 28
16417: PUSH
16418: EMPTY
16419: LIST
16420: LIST
16421: LIST
16422: LIST
16423: PUSH
16424: LD_INT 13
16426: PUSH
16427: LD_INT 1
16429: PUSH
16430: LD_INT 2
16432: PUSH
16433: LD_INT 28
16435: PUSH
16436: EMPTY
16437: LIST
16438: LIST
16439: LIST
16440: LIST
16441: PUSH
16442: LD_INT 13
16444: PUSH
16445: LD_INT 1
16447: PUSH
16448: LD_INT 2
16450: PUSH
16451: LD_INT 28
16453: PUSH
16454: EMPTY
16455: LIST
16456: LIST
16457: LIST
16458: LIST
16459: PUSH
16460: LD_INT 13
16462: PUSH
16463: LD_INT 1
16465: PUSH
16466: LD_INT 2
16468: PUSH
16469: LD_INT 26
16471: PUSH
16472: EMPTY
16473: LIST
16474: LIST
16475: LIST
16476: LIST
16477: PUSH
16478: EMPTY
16479: LIST
16480: LIST
16481: LIST
16482: LIST
16483: LIST
16484: LIST
16485: PPUSH
16486: CALL 79330 0 2
// end else
16490: GO 16709
// begin MC_InsertProduceList ( base , [ [ ar_medium_trike , engine_combustion , control_remote , [ ar_gun , ar_flame_thrower , ar_flame_thrower ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_gun , ar_flame_thrower , ar_flame_thrower ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_flame_thrower , ar_flame_thrower , ar_selfpropelled_bomb ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_flame_thrower , ar_selfpropelled_bomb , ar_selfpropelled_bomb ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , ar_selfpropelled_bomb ] , [ ar_medium_trike , engine_combustion , control_remote , ar_flame_thrower ] , ] ) ;
16492: LD_VAR 0 2
16496: PPUSH
16497: LD_INT 13
16499: PUSH
16500: LD_INT 1
16502: PUSH
16503: LD_INT 2
16505: PUSH
16506: LD_INT 27
16508: PUSH
16509: LD_INT 26
16511: PUSH
16512: LD_INT 26
16514: PUSH
16515: EMPTY
16516: LIST
16517: LIST
16518: LIST
16519: PUSH
16520: LD_INT 1
16522: PPUSH
16523: LD_INT 3
16525: PPUSH
16526: CALL_OW 12
16530: ARRAY
16531: PUSH
16532: EMPTY
16533: LIST
16534: LIST
16535: LIST
16536: LIST
16537: PUSH
16538: LD_INT 13
16540: PUSH
16541: LD_INT 1
16543: PUSH
16544: LD_INT 2
16546: PUSH
16547: LD_INT 27
16549: PUSH
16550: LD_INT 26
16552: PUSH
16553: LD_INT 26
16555: PUSH
16556: EMPTY
16557: LIST
16558: LIST
16559: LIST
16560: PUSH
16561: LD_INT 1
16563: PPUSH
16564: LD_INT 3
16566: PPUSH
16567: CALL_OW 12
16571: ARRAY
16572: PUSH
16573: EMPTY
16574: LIST
16575: LIST
16576: LIST
16577: LIST
16578: PUSH
16579: LD_INT 13
16581: PUSH
16582: LD_INT 1
16584: PUSH
16585: LD_INT 2
16587: PUSH
16588: LD_INT 26
16590: PUSH
16591: LD_INT 26
16593: PUSH
16594: LD_INT 29
16596: PUSH
16597: EMPTY
16598: LIST
16599: LIST
16600: LIST
16601: PUSH
16602: LD_INT 1
16604: PPUSH
16605: LD_INT 3
16607: PPUSH
16608: CALL_OW 12
16612: ARRAY
16613: PUSH
16614: EMPTY
16615: LIST
16616: LIST
16617: LIST
16618: LIST
16619: PUSH
16620: LD_INT 13
16622: PUSH
16623: LD_INT 1
16625: PUSH
16626: LD_INT 2
16628: PUSH
16629: LD_INT 26
16631: PUSH
16632: LD_INT 29
16634: PUSH
16635: LD_INT 29
16637: PUSH
16638: EMPTY
16639: LIST
16640: LIST
16641: LIST
16642: PUSH
16643: LD_INT 1
16645: PPUSH
16646: LD_INT 3
16648: PPUSH
16649: CALL_OW 12
16653: ARRAY
16654: PUSH
16655: EMPTY
16656: LIST
16657: LIST
16658: LIST
16659: LIST
16660: PUSH
16661: LD_INT 13
16663: PUSH
16664: LD_INT 1
16666: PUSH
16667: LD_INT 2
16669: PUSH
16670: LD_INT 29
16672: PUSH
16673: EMPTY
16674: LIST
16675: LIST
16676: LIST
16677: LIST
16678: PUSH
16679: LD_INT 13
16681: PUSH
16682: LD_INT 1
16684: PUSH
16685: LD_INT 2
16687: PUSH
16688: LD_INT 26
16690: PUSH
16691: EMPTY
16692: LIST
16693: LIST
16694: LIST
16695: LIST
16696: PUSH
16697: EMPTY
16698: LIST
16699: LIST
16700: LIST
16701: LIST
16702: LIST
16703: LIST
16704: PPUSH
16705: CALL 79330 0 2
// end ; repeat wait ( 0 0$1 ) ;
16709: LD_INT 35
16711: PPUSH
16712: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= 6 or tick mod 10 10$00 = 0 ;
16716: LD_VAR 0 2
16720: PPUSH
16721: LD_INT 1
16723: PPUSH
16724: CALL 80748 0 2
16728: PUSH
16729: LD_INT 6
16731: GREATEREQUAL
16732: PUSH
16733: LD_OWVAR 1
16737: PUSH
16738: LD_INT 21000
16740: MOD
16741: PUSH
16742: LD_INT 0
16744: EQUAL
16745: OR
16746: IFFALSE 16709
// wait ( 0 0$30 ) ;
16748: LD_INT 1050
16750: PPUSH
16751: CALL_OW 67
// tmp := MC_GetVehicles ( base , true ) ;
16755: LD_ADDR_VAR 0 3
16759: PUSH
16760: LD_VAR 0 2
16764: PPUSH
16765: LD_INT 1
16767: PPUSH
16768: CALL 80748 0 2
16772: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff tmp ) ;
16773: LD_ADDR_EXP 63
16777: PUSH
16778: LD_EXP 63
16782: PPUSH
16783: LD_VAR 0 2
16787: PPUSH
16788: LD_EXP 63
16792: PUSH
16793: LD_VAR 0 2
16797: ARRAY
16798: PUSH
16799: LD_VAR 0 3
16803: DIFF
16804: PPUSH
16805: CALL_OW 1
16809: ST_TO_ADDR
// target := rand ( 0 , 2 ) ;
16810: LD_ADDR_VAR 0 4
16814: PUSH
16815: LD_INT 0
16817: PPUSH
16818: LD_INT 2
16820: PPUSH
16821: CALL_OW 12
16825: ST_TO_ADDR
// if legChangeSide then
16826: LD_EXP 21
16830: IFFALSE 16840
// target := 2 ;
16832: LD_ADDR_VAR 0 4
16836: PUSH
16837: LD_INT 2
16839: ST_TO_ADDR
// if target = 2 then
16840: LD_VAR 0 4
16844: PUSH
16845: LD_INT 2
16847: EQUAL
16848: IFFALSE 16976
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
16850: LD_ADDR_VAR 0 3
16854: PUSH
16855: LD_VAR 0 3
16859: PPUSH
16860: LD_INT 24
16862: PUSH
16863: LD_INT 250
16865: PUSH
16866: EMPTY
16867: LIST
16868: LIST
16869: PPUSH
16870: CALL_OW 72
16874: ST_TO_ADDR
// for i in tmp do
16875: LD_ADDR_VAR 0 1
16879: PUSH
16880: LD_VAR 0 3
16884: PUSH
16885: FOR_IN
16886: IFFALSE 16926
// if GetDistUnitXY ( i , 112 , 64 ) > 9 then
16888: LD_VAR 0 1
16892: PPUSH
16893: LD_INT 112
16895: PPUSH
16896: LD_INT 64
16898: PPUSH
16899: CALL_OW 297
16903: PUSH
16904: LD_INT 9
16906: GREATER
16907: IFFALSE 16924
// ComMoveXY ( i , 112 , 64 ) ;
16909: LD_VAR 0 1
16913: PPUSH
16914: LD_INT 112
16916: PPUSH
16917: LD_INT 64
16919: PPUSH
16920: CALL_OW 111
16924: GO 16885
16926: POP
16927: POP
// wait ( 0 0$1 ) ;
16928: LD_INT 35
16930: PPUSH
16931: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 112 , 64 , 9 ] ) >= ( tmp - 1 ) ;
16935: LD_VAR 0 3
16939: PPUSH
16940: LD_INT 92
16942: PUSH
16943: LD_INT 112
16945: PUSH
16946: LD_INT 64
16948: PUSH
16949: LD_INT 9
16951: PUSH
16952: EMPTY
16953: LIST
16954: LIST
16955: LIST
16956: LIST
16957: PPUSH
16958: CALL_OW 72
16962: PUSH
16963: LD_VAR 0 3
16967: PUSH
16968: LD_INT 1
16970: MINUS
16971: GREATEREQUAL
16972: IFFALSE 16850
// end else
16974: GO 17100
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
16976: LD_ADDR_VAR 0 3
16980: PUSH
16981: LD_VAR 0 3
16985: PPUSH
16986: LD_INT 24
16988: PUSH
16989: LD_INT 250
16991: PUSH
16992: EMPTY
16993: LIST
16994: LIST
16995: PPUSH
16996: CALL_OW 72
17000: ST_TO_ADDR
// for i in tmp do
17001: LD_ADDR_VAR 0 1
17005: PUSH
17006: LD_VAR 0 3
17010: PUSH
17011: FOR_IN
17012: IFFALSE 17052
// if GetDistUnitXY ( i , 174 , 94 ) > 9 then
17014: LD_VAR 0 1
17018: PPUSH
17019: LD_INT 174
17021: PPUSH
17022: LD_INT 94
17024: PPUSH
17025: CALL_OW 297
17029: PUSH
17030: LD_INT 9
17032: GREATER
17033: IFFALSE 17050
// ComMoveXY ( i , 174 , 94 ) ;
17035: LD_VAR 0 1
17039: PPUSH
17040: LD_INT 174
17042: PPUSH
17043: LD_INT 94
17045: PPUSH
17046: CALL_OW 111
17050: GO 17011
17052: POP
17053: POP
// wait ( 0 0$1 ) ;
17054: LD_INT 35
17056: PPUSH
17057: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 174 , 94 , 9 ] ) >= ( tmp - 1 ) ;
17061: LD_VAR 0 3
17065: PPUSH
17066: LD_INT 92
17068: PUSH
17069: LD_INT 174
17071: PUSH
17072: LD_INT 94
17074: PUSH
17075: LD_INT 9
17077: PUSH
17078: EMPTY
17079: LIST
17080: LIST
17081: LIST
17082: LIST
17083: PPUSH
17084: CALL_OW 72
17088: PUSH
17089: LD_VAR 0 3
17093: PUSH
17094: LD_INT 1
17096: MINUS
17097: GREATEREQUAL
17098: IFFALSE 16976
// end ; repeat wait ( 0 0$1 ) ;
17100: LD_INT 35
17102: PPUSH
17103: CALL_OW 67
// for i in tmp do
17107: LD_ADDR_VAR 0 1
17111: PUSH
17112: LD_VAR 0 3
17116: PUSH
17117: FOR_IN
17118: IFFALSE 17200
// begin if GetLives ( i ) > 251 then
17120: LD_VAR 0 1
17124: PPUSH
17125: CALL_OW 256
17129: PUSH
17130: LD_INT 251
17132: GREATER
17133: IFFALSE 17171
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 8 ] ) , i ) ) else
17135: LD_VAR 0 1
17139: PPUSH
17140: LD_INT 81
17142: PUSH
17143: LD_INT 8
17145: PUSH
17146: EMPTY
17147: LIST
17148: LIST
17149: PPUSH
17150: CALL_OW 69
17154: PPUSH
17155: LD_VAR 0 1
17159: PPUSH
17160: CALL_OW 74
17164: PPUSH
17165: CALL_OW 115
17169: GO 17198
// if IsDead ( i ) then
17171: LD_VAR 0 1
17175: PPUSH
17176: CALL_OW 301
17180: IFFALSE 17198
// tmp := tmp diff i ;
17182: LD_ADDR_VAR 0 3
17186: PUSH
17187: LD_VAR 0 3
17191: PUSH
17192: LD_VAR 0 1
17196: DIFF
17197: ST_TO_ADDR
// end ;
17198: GO 17117
17200: POP
17201: POP
// until not tmp ;
17202: LD_VAR 0 3
17206: NOT
17207: IFFALSE 17100
// end ;
17209: PPOPN 4
17211: END
// every 7 7$30 trigger game do var i , base , tmp , target , teleport ;
17212: LD_EXP 3
17216: IFFALSE 18204
17218: GO 17220
17220: DISABLE
17221: LD_INT 0
17223: PPUSH
17224: PPUSH
17225: PPUSH
17226: PPUSH
17227: PPUSH
// begin enable ;
17228: ENABLE
// if not UnitFilter ( mc_bases [ mc_rus_2 ] , [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) then
17229: LD_EXP 44
17233: PUSH
17234: LD_EXP 8
17238: ARRAY
17239: PPUSH
17240: LD_INT 22
17242: PUSH
17243: LD_INT 3
17245: PUSH
17246: EMPTY
17247: LIST
17248: LIST
17249: PUSH
17250: LD_INT 30
17252: PUSH
17253: LD_INT 3
17255: PUSH
17256: EMPTY
17257: LIST
17258: LIST
17259: PUSH
17260: EMPTY
17261: LIST
17262: LIST
17263: PPUSH
17264: CALL_OW 72
17268: NOT
17269: IFFALSE 17273
// exit ;
17271: GO 18204
// base := mc_rus_2 ;
17273: LD_ADDR_VAR 0 2
17277: PUSH
17278: LD_EXP 8
17282: ST_TO_ADDR
// teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) ;
17283: LD_ADDR_VAR 0 5
17287: PUSH
17288: LD_INT 22
17290: PUSH
17291: LD_INT 3
17293: PUSH
17294: EMPTY
17295: LIST
17296: LIST
17297: PUSH
17298: LD_INT 30
17300: PUSH
17301: LD_INT 34
17303: PUSH
17304: EMPTY
17305: LIST
17306: LIST
17307: PUSH
17308: EMPTY
17309: LIST
17310: LIST
17311: PPUSH
17312: CALL_OW 69
17316: ST_TO_ADDR
// if Prob ( 40 ) then
17317: LD_INT 40
17319: PPUSH
17320: CALL_OW 13
17324: IFFALSE 17453
// begin MC_InsertProduceList ( base , [ [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] ] ) ;
17326: LD_VAR 0 2
17330: PPUSH
17331: LD_INT 22
17333: PUSH
17334: LD_INT 3
17336: PUSH
17337: LD_INT 3
17339: PUSH
17340: LD_INT 49
17342: PUSH
17343: EMPTY
17344: LIST
17345: LIST
17346: LIST
17347: LIST
17348: PUSH
17349: LD_INT 22
17351: PUSH
17352: LD_INT 3
17354: PUSH
17355: LD_INT 3
17357: PUSH
17358: LD_INT 49
17360: PUSH
17361: EMPTY
17362: LIST
17363: LIST
17364: LIST
17365: LIST
17366: PUSH
17367: LD_INT 22
17369: PUSH
17370: LD_INT 3
17372: PUSH
17373: LD_INT 3
17375: PUSH
17376: LD_INT 49
17378: PUSH
17379: EMPTY
17380: LIST
17381: LIST
17382: LIST
17383: LIST
17384: PUSH
17385: LD_INT 24
17387: PUSH
17388: LD_INT 3
17390: PUSH
17391: LD_INT 3
17393: PUSH
17394: LD_INT 46
17396: PUSH
17397: EMPTY
17398: LIST
17399: LIST
17400: LIST
17401: LIST
17402: PUSH
17403: LD_INT 24
17405: PUSH
17406: LD_INT 3
17408: PUSH
17409: LD_INT 3
17411: PUSH
17412: LD_INT 46
17414: PUSH
17415: EMPTY
17416: LIST
17417: LIST
17418: LIST
17419: LIST
17420: PUSH
17421: LD_INT 24
17423: PUSH
17424: LD_INT 3
17426: PUSH
17427: LD_INT 3
17429: PUSH
17430: LD_INT 46
17432: PUSH
17433: EMPTY
17434: LIST
17435: LIST
17436: LIST
17437: LIST
17438: PUSH
17439: EMPTY
17440: LIST
17441: LIST
17442: LIST
17443: LIST
17444: LIST
17445: LIST
17446: PPUSH
17447: CALL 79330 0 2
// end else
17451: GO 17578
// begin MC_InsertProduceList ( base , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] ] ) ;
17453: LD_VAR 0 2
17457: PPUSH
17458: LD_INT 24
17460: PUSH
17461: LD_INT 3
17463: PUSH
17464: LD_INT 3
17466: PUSH
17467: LD_INT 47
17469: PUSH
17470: EMPTY
17471: LIST
17472: LIST
17473: LIST
17474: LIST
17475: PUSH
17476: LD_INT 24
17478: PUSH
17479: LD_INT 3
17481: PUSH
17482: LD_INT 3
17484: PUSH
17485: LD_INT 47
17487: PUSH
17488: EMPTY
17489: LIST
17490: LIST
17491: LIST
17492: LIST
17493: PUSH
17494: LD_INT 24
17496: PUSH
17497: LD_INT 3
17499: PUSH
17500: LD_INT 3
17502: PUSH
17503: LD_INT 47
17505: PUSH
17506: EMPTY
17507: LIST
17508: LIST
17509: LIST
17510: LIST
17511: PUSH
17512: LD_INT 24
17514: PUSH
17515: LD_INT 3
17517: PUSH
17518: LD_INT 3
17520: PUSH
17521: LD_INT 46
17523: PUSH
17524: EMPTY
17525: LIST
17526: LIST
17527: LIST
17528: LIST
17529: PUSH
17530: LD_INT 24
17532: PUSH
17533: LD_INT 3
17535: PUSH
17536: LD_INT 3
17538: PUSH
17539: LD_INT 46
17541: PUSH
17542: EMPTY
17543: LIST
17544: LIST
17545: LIST
17546: LIST
17547: PUSH
17548: LD_INT 24
17550: PUSH
17551: LD_INT 3
17553: PUSH
17554: LD_INT 3
17556: PUSH
17557: LD_INT 46
17559: PUSH
17560: EMPTY
17561: LIST
17562: LIST
17563: LIST
17564: LIST
17565: PUSH
17566: EMPTY
17567: LIST
17568: LIST
17569: LIST
17570: LIST
17571: LIST
17572: LIST
17573: PPUSH
17574: CALL 79330 0 2
// end ; if Difficulty > 1 then
17578: LD_OWVAR 67
17582: PUSH
17583: LD_INT 1
17585: GREATER
17586: IFFALSE 17618
// MC_InsertProduceList ( base , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] ] ) ;
17588: LD_VAR 0 2
17592: PPUSH
17593: LD_INT 24
17595: PUSH
17596: LD_INT 3
17598: PUSH
17599: LD_INT 3
17601: PUSH
17602: LD_INT 47
17604: PUSH
17605: EMPTY
17606: LIST
17607: LIST
17608: LIST
17609: LIST
17610: PUSH
17611: EMPTY
17612: LIST
17613: PPUSH
17614: CALL 79330 0 2
// repeat wait ( 0 0$1 ) ;
17618: LD_INT 35
17620: PPUSH
17621: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= [ 6 , 7 , 7 ] [ Difficulty ] or tick mod 10 10$00 = 0 ;
17625: LD_VAR 0 2
17629: PPUSH
17630: LD_INT 1
17632: PPUSH
17633: CALL 80748 0 2
17637: PUSH
17638: LD_INT 6
17640: PUSH
17641: LD_INT 7
17643: PUSH
17644: LD_INT 7
17646: PUSH
17647: EMPTY
17648: LIST
17649: LIST
17650: LIST
17651: PUSH
17652: LD_OWVAR 67
17656: ARRAY
17657: GREATEREQUAL
17658: PUSH
17659: LD_OWVAR 1
17663: PUSH
17664: LD_INT 21000
17666: MOD
17667: PUSH
17668: LD_INT 0
17670: EQUAL
17671: OR
17672: IFFALSE 17618
// wait ( 0 0$45 ) ;
17674: LD_INT 1575
17676: PPUSH
17677: CALL_OW 67
// tmp := MC_GetVehicles ( base , true ) ;
17681: LD_ADDR_VAR 0 3
17685: PUSH
17686: LD_VAR 0 2
17690: PPUSH
17691: LD_INT 1
17693: PPUSH
17694: CALL 80748 0 2
17698: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff tmp ) ;
17699: LD_ADDR_EXP 63
17703: PUSH
17704: LD_EXP 63
17708: PPUSH
17709: LD_VAR 0 2
17713: PPUSH
17714: LD_EXP 63
17718: PUSH
17719: LD_VAR 0 2
17723: ARRAY
17724: PUSH
17725: LD_VAR 0 3
17729: DIFF
17730: PPUSH
17731: CALL_OW 1
17735: ST_TO_ADDR
// target := rand ( 0 , 1 ) ;
17736: LD_ADDR_VAR 0 4
17740: PUSH
17741: LD_INT 0
17743: PPUSH
17744: LD_INT 1
17746: PPUSH
17747: CALL_OW 12
17751: ST_TO_ADDR
// if target then
17752: LD_VAR 0 4
17756: IFFALSE 17884
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
17758: LD_ADDR_VAR 0 3
17762: PUSH
17763: LD_VAR 0 3
17767: PPUSH
17768: LD_INT 24
17770: PUSH
17771: LD_INT 250
17773: PUSH
17774: EMPTY
17775: LIST
17776: LIST
17777: PPUSH
17778: CALL_OW 72
17782: ST_TO_ADDR
// for i in tmp do
17783: LD_ADDR_VAR 0 1
17787: PUSH
17788: LD_VAR 0 3
17792: PUSH
17793: FOR_IN
17794: IFFALSE 17834
// if GetDistUnitXY ( i , 84 , 32 ) > 9 then
17796: LD_VAR 0 1
17800: PPUSH
17801: LD_INT 84
17803: PPUSH
17804: LD_INT 32
17806: PPUSH
17807: CALL_OW 297
17811: PUSH
17812: LD_INT 9
17814: GREATER
17815: IFFALSE 17832
// ComMoveXY ( i , 84 , 32 ) ;
17817: LD_VAR 0 1
17821: PPUSH
17822: LD_INT 84
17824: PPUSH
17825: LD_INT 32
17827: PPUSH
17828: CALL_OW 111
17832: GO 17793
17834: POP
17835: POP
// wait ( 0 0$1 ) ;
17836: LD_INT 35
17838: PPUSH
17839: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 84 , 32 , 9 ] ) >= ( tmp - 1 ) ;
17843: LD_VAR 0 3
17847: PPUSH
17848: LD_INT 92
17850: PUSH
17851: LD_INT 84
17853: PUSH
17854: LD_INT 32
17856: PUSH
17857: LD_INT 9
17859: PUSH
17860: EMPTY
17861: LIST
17862: LIST
17863: LIST
17864: LIST
17865: PPUSH
17866: CALL_OW 72
17870: PUSH
17871: LD_VAR 0 3
17875: PUSH
17876: LD_INT 1
17878: MINUS
17879: GREATEREQUAL
17880: IFFALSE 17758
// end else
17882: GO 18044
// begin if teleport then
17884: LD_VAR 0 5
17888: IFFALSE 17908
// ComEnterUnit ( tmp , teleport [ 1 ] ) ;
17890: LD_VAR 0 3
17894: PPUSH
17895: LD_VAR 0 5
17899: PUSH
17900: LD_INT 1
17902: ARRAY
17903: PPUSH
17904: CALL_OW 120
// repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
17908: LD_ADDR_VAR 0 3
17912: PUSH
17913: LD_VAR 0 3
17917: PPUSH
17918: LD_INT 24
17920: PUSH
17921: LD_INT 250
17923: PUSH
17924: EMPTY
17925: LIST
17926: LIST
17927: PPUSH
17928: CALL_OW 72
17932: ST_TO_ADDR
// for i in tmp do
17933: LD_ADDR_VAR 0 1
17937: PUSH
17938: LD_VAR 0 3
17942: PUSH
17943: FOR_IN
17944: IFFALSE 17996
// if GetDistUnitXY ( i , 140 , 219 ) > 9 and not HasTask ( i ) then
17946: LD_VAR 0 1
17950: PPUSH
17951: LD_INT 140
17953: PPUSH
17954: LD_INT 219
17956: PPUSH
17957: CALL_OW 297
17961: PUSH
17962: LD_INT 9
17964: GREATER
17965: PUSH
17966: LD_VAR 0 1
17970: PPUSH
17971: CALL_OW 314
17975: NOT
17976: AND
17977: IFFALSE 17994
// AddComMoveXY ( i , 140 , 219 ) ;
17979: LD_VAR 0 1
17983: PPUSH
17984: LD_INT 140
17986: PPUSH
17987: LD_INT 219
17989: PPUSH
17990: CALL_OW 171
17994: GO 17943
17996: POP
17997: POP
// wait ( 0 0$1 ) ;
17998: LD_INT 35
18000: PPUSH
18001: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 140 , 219 , 9 ] ) >= ( tmp - 1 ) ;
18005: LD_VAR 0 3
18009: PPUSH
18010: LD_INT 92
18012: PUSH
18013: LD_INT 140
18015: PUSH
18016: LD_INT 219
18018: PUSH
18019: LD_INT 9
18021: PUSH
18022: EMPTY
18023: LIST
18024: LIST
18025: LIST
18026: LIST
18027: PPUSH
18028: CALL_OW 72
18032: PUSH
18033: LD_VAR 0 3
18037: PUSH
18038: LD_INT 1
18040: MINUS
18041: GREATEREQUAL
18042: IFFALSE 17908
// end ; repeat wait ( 0 0$1 ) ;
18044: LD_INT 35
18046: PPUSH
18047: CALL_OW 67
// for i in tmp do
18051: LD_ADDR_VAR 0 1
18055: PUSH
18056: LD_VAR 0 3
18060: PUSH
18061: FOR_IN
18062: IFFALSE 18195
// begin if GetLives ( i ) > 251 then
18064: LD_VAR 0 1
18068: PPUSH
18069: CALL_OW 256
18073: PUSH
18074: LD_INT 251
18076: GREATER
18077: IFFALSE 18166
// begin if GetWeapon ( i ) = ru_time_lapser then
18079: LD_VAR 0 1
18083: PPUSH
18084: CALL_OW 264
18088: PUSH
18089: LD_INT 49
18091: EQUAL
18092: IFFALSE 18130
// ComMoveUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) else
18094: LD_VAR 0 1
18098: PPUSH
18099: LD_INT 81
18101: PUSH
18102: LD_INT 3
18104: PUSH
18105: EMPTY
18106: LIST
18107: LIST
18108: PPUSH
18109: CALL_OW 69
18113: PPUSH
18114: LD_VAR 0 1
18118: PPUSH
18119: CALL_OW 74
18123: PPUSH
18124: CALL_OW 112
18128: GO 18164
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
18130: LD_VAR 0 1
18134: PPUSH
18135: LD_INT 81
18137: PUSH
18138: LD_INT 3
18140: PUSH
18141: EMPTY
18142: LIST
18143: LIST
18144: PPUSH
18145: CALL_OW 69
18149: PPUSH
18150: LD_VAR 0 1
18154: PPUSH
18155: CALL_OW 74
18159: PPUSH
18160: CALL_OW 115
// end else
18164: GO 18193
// if IsDead ( i ) then
18166: LD_VAR 0 1
18170: PPUSH
18171: CALL_OW 301
18175: IFFALSE 18193
// tmp := tmp diff i ;
18177: LD_ADDR_VAR 0 3
18181: PUSH
18182: LD_VAR 0 3
18186: PUSH
18187: LD_VAR 0 1
18191: DIFF
18192: ST_TO_ADDR
// end ;
18193: GO 18061
18195: POP
18196: POP
// until not tmp ;
18197: LD_VAR 0 3
18201: NOT
18202: IFFALSE 18044
// end ;
18204: PPOPN 5
18206: END
// every 12 12$30 + 11 11$30 trigger game do var i , base , tmp , target ;
18207: LD_EXP 3
18211: IFFALSE 18593
18213: GO 18215
18215: DISABLE
18216: LD_INT 0
18218: PPUSH
18219: PPUSH
18220: PPUSH
18221: PPUSH
// begin enable ;
18222: ENABLE
// base := mc_amer ;
18223: LD_ADDR_VAR 0 2
18227: PUSH
18228: LD_EXP 5
18232: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 4 ] , [ f_nation , 1 ] , [ f_btype , b_factory ] ] ) then
18233: LD_INT 22
18235: PUSH
18236: LD_INT 4
18238: PUSH
18239: EMPTY
18240: LIST
18241: LIST
18242: PUSH
18243: LD_INT 23
18245: PUSH
18246: LD_INT 1
18248: PUSH
18249: EMPTY
18250: LIST
18251: LIST
18252: PUSH
18253: LD_INT 30
18255: PUSH
18256: LD_INT 3
18258: PUSH
18259: EMPTY
18260: LIST
18261: LIST
18262: PUSH
18263: EMPTY
18264: LIST
18265: LIST
18266: LIST
18267: PPUSH
18268: CALL_OW 69
18272: NOT
18273: IFFALSE 18277
// exit ;
18275: GO 18593
// MC_InsertProduceList ( base , [ [ us_medium_tracked , engine_combustion , control_remote , us_double_gun ] , [ us_medium_tracked , engine_combustion , control_remote , us_laser ] , [ us_medium_tracked , engine_combustion , control_remote , us_rocket_launcher ] , [ us_medium_tracked , engine_combustion , control_remote , us_rocket_launcher ] , [ us_medium_tracked , engine_combustion , control_remote , us_rocket_launcher ] ] ) ;
18277: LD_VAR 0 2
18281: PPUSH
18282: LD_INT 3
18284: PUSH
18285: LD_INT 1
18287: PUSH
18288: LD_INT 2
18290: PUSH
18291: LD_INT 5
18293: PUSH
18294: EMPTY
18295: LIST
18296: LIST
18297: LIST
18298: LIST
18299: PUSH
18300: LD_INT 3
18302: PUSH
18303: LD_INT 1
18305: PUSH
18306: LD_INT 2
18308: PUSH
18309: LD_INT 9
18311: PUSH
18312: EMPTY
18313: LIST
18314: LIST
18315: LIST
18316: LIST
18317: PUSH
18318: LD_INT 3
18320: PUSH
18321: LD_INT 1
18323: PUSH
18324: LD_INT 2
18326: PUSH
18327: LD_INT 7
18329: PUSH
18330: EMPTY
18331: LIST
18332: LIST
18333: LIST
18334: LIST
18335: PUSH
18336: LD_INT 3
18338: PUSH
18339: LD_INT 1
18341: PUSH
18342: LD_INT 2
18344: PUSH
18345: LD_INT 7
18347: PUSH
18348: EMPTY
18349: LIST
18350: LIST
18351: LIST
18352: LIST
18353: PUSH
18354: LD_INT 3
18356: PUSH
18357: LD_INT 1
18359: PUSH
18360: LD_INT 2
18362: PUSH
18363: LD_INT 7
18365: PUSH
18366: EMPTY
18367: LIST
18368: LIST
18369: LIST
18370: LIST
18371: PUSH
18372: EMPTY
18373: LIST
18374: LIST
18375: LIST
18376: LIST
18377: LIST
18378: PPUSH
18379: CALL 79330 0 2
// repeat wait ( 0 0$1 ) ;
18383: LD_INT 35
18385: PPUSH
18386: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= 5 or tick mod 10 10$00 = 0 ;
18390: LD_VAR 0 2
18394: PPUSH
18395: LD_INT 1
18397: PPUSH
18398: CALL 80748 0 2
18402: PUSH
18403: LD_INT 5
18405: GREATEREQUAL
18406: PUSH
18407: LD_OWVAR 1
18411: PUSH
18412: LD_INT 21000
18414: MOD
18415: PUSH
18416: LD_INT 0
18418: EQUAL
18419: OR
18420: IFFALSE 18383
// wait ( 0 0$30 ) ;
18422: LD_INT 1050
18424: PPUSH
18425: CALL_OW 67
// tmp := MC_GetVehicles ( base , true ) ;
18429: LD_ADDR_VAR 0 3
18433: PUSH
18434: LD_VAR 0 2
18438: PPUSH
18439: LD_INT 1
18441: PPUSH
18442: CALL 80748 0 2
18446: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff tmp ) ;
18447: LD_ADDR_EXP 63
18451: PUSH
18452: LD_EXP 63
18456: PPUSH
18457: LD_VAR 0 2
18461: PPUSH
18462: LD_EXP 63
18466: PUSH
18467: LD_VAR 0 2
18471: ARRAY
18472: PUSH
18473: LD_VAR 0 3
18477: DIFF
18478: PPUSH
18479: CALL_OW 1
18483: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18484: LD_INT 35
18486: PPUSH
18487: CALL_OW 67
// for i in tmp do
18491: LD_ADDR_VAR 0 1
18495: PUSH
18496: LD_VAR 0 3
18500: PUSH
18501: FOR_IN
18502: IFFALSE 18584
// begin if GetLives ( i ) > 251 then
18504: LD_VAR 0 1
18508: PPUSH
18509: CALL_OW 256
18513: PUSH
18514: LD_INT 251
18516: GREATER
18517: IFFALSE 18555
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 4 ] ) , i ) ) else
18519: LD_VAR 0 1
18523: PPUSH
18524: LD_INT 81
18526: PUSH
18527: LD_INT 4
18529: PUSH
18530: EMPTY
18531: LIST
18532: LIST
18533: PPUSH
18534: CALL_OW 69
18538: PPUSH
18539: LD_VAR 0 1
18543: PPUSH
18544: CALL_OW 74
18548: PPUSH
18549: CALL_OW 115
18553: GO 18582
// if IsDead ( i ) then
18555: LD_VAR 0 1
18559: PPUSH
18560: CALL_OW 301
18564: IFFALSE 18582
// tmp := tmp diff i ;
18566: LD_ADDR_VAR 0 3
18570: PUSH
18571: LD_VAR 0 3
18575: PUSH
18576: LD_VAR 0 1
18580: DIFF
18581: ST_TO_ADDR
// end ;
18582: GO 18501
18584: POP
18585: POP
// until not tmp ;
18586: LD_VAR 0 3
18590: NOT
18591: IFFALSE 18484
// end ; end_of_file
18593: PPOPN 4
18595: END
// export function CustomEvent ( event ) ; begin
18596: LD_INT 0
18598: PPUSH
// end ;
18599: LD_VAR 0 2
18603: RET
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 = 4 then
18604: LD_VAR 0 1
18608: PUSH
18609: LD_INT 1
18611: EQUAL
18612: PUSH
18613: LD_VAR 0 2
18617: PUSH
18618: LD_INT 4
18620: EQUAL
18621: AND
18622: IFFALSE 18650
// begin SayRadio ( Powell , DP-Lost ) ;
18624: LD_EXP 12
18628: PPUSH
18629: LD_STRING DP-Lost
18631: PPUSH
18632: CALL_OW 94
// wait ( 0 0$2 ) ;
18636: LD_INT 70
18638: PPUSH
18639: CALL_OW 67
// YouLost ( FriendlyFire ) ;
18643: LD_STRING FriendlyFire
18645: PPUSH
18646: CALL_OW 104
// end ; end ;
18650: PPOPN 2
18652: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
18653: LD_VAR 0 1
18657: PPUSH
18658: CALL 96695 0 1
// if GameType = 1 then
18662: LD_EXP 2
18666: PUSH
18667: LD_INT 1
18669: EQUAL
18670: IFFALSE 18905
// begin if un = playerCommander then
18672: LD_VAR 0 1
18676: PUSH
18677: LD_EXP 9
18681: EQUAL
18682: IFFALSE 18691
// YouLost ( commanderDied ) ;
18684: LD_STRING commanderDied
18686: PPUSH
18687: CALL_OW 104
// if un = allyCommander then
18691: LD_VAR 0 1
18695: PUSH
18696: LD_EXP 11
18700: EQUAL
18701: IFFALSE 18710
// YouLost ( Theta ) ;
18703: LD_STRING Theta
18705: PPUSH
18706: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_building ] ] ] ) then
18710: LD_VAR 0 1
18714: PUSH
18715: LD_INT 22
18717: PUSH
18718: LD_INT 8
18720: PUSH
18721: EMPTY
18722: LIST
18723: LIST
18724: PUSH
18725: LD_INT 2
18727: PUSH
18728: LD_INT 21
18730: PUSH
18731: LD_INT 1
18733: PUSH
18734: EMPTY
18735: LIST
18736: LIST
18737: PUSH
18738: LD_INT 21
18740: PUSH
18741: LD_INT 3
18743: PUSH
18744: EMPTY
18745: LIST
18746: LIST
18747: PUSH
18748: EMPTY
18749: LIST
18750: LIST
18751: LIST
18752: PUSH
18753: EMPTY
18754: LIST
18755: LIST
18756: PPUSH
18757: CALL_OW 69
18761: IN
18762: IFFALSE 18778
// legDestCounter := legDestCounter + 1 ;
18764: LD_ADDR_EXP 18
18768: PUSH
18769: LD_EXP 18
18773: PUSH
18774: LD_INT 1
18776: PLUS
18777: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_building ] ] ] ) then
18778: LD_VAR 0 1
18782: PUSH
18783: LD_INT 22
18785: PUSH
18786: LD_INT 4
18788: PUSH
18789: EMPTY
18790: LIST
18791: LIST
18792: PUSH
18793: LD_INT 2
18795: PUSH
18796: LD_INT 21
18798: PUSH
18799: LD_INT 1
18801: PUSH
18802: EMPTY
18803: LIST
18804: LIST
18805: PUSH
18806: LD_INT 21
18808: PUSH
18809: LD_INT 3
18811: PUSH
18812: EMPTY
18813: LIST
18814: LIST
18815: PUSH
18816: EMPTY
18817: LIST
18818: LIST
18819: LIST
18820: PUSH
18821: EMPTY
18822: LIST
18823: LIST
18824: PPUSH
18825: CALL_OW 69
18829: IN
18830: IFFALSE 18846
// allyDestCounter := allyDestCounter + 1 ;
18832: LD_ADDR_EXP 22
18836: PUSH
18837: LD_EXP 22
18841: PUSH
18842: LD_INT 1
18844: PLUS
18845: ST_TO_ADDR
// if un in ruOutpost then
18846: LD_VAR 0 1
18850: PUSH
18851: LD_EXP 14
18855: IN
18856: IFFALSE 18905
// begin ruOutpost := ruOutpost diff un ;
18858: LD_ADDR_EXP 14
18862: PUSH
18863: LD_EXP 14
18867: PUSH
18868: LD_VAR 0 1
18872: DIFF
18873: ST_TO_ADDR
// ruEscape := Replace ( ruEscape , 1 , ruEscape [ 1 ] + 1 ) ;
18874: LD_ADDR_EXP 15
18878: PUSH
18879: LD_EXP 15
18883: PPUSH
18884: LD_INT 1
18886: PPUSH
18887: LD_EXP 15
18891: PUSH
18892: LD_INT 1
18894: ARRAY
18895: PUSH
18896: LD_INT 1
18898: PLUS
18899: PPUSH
18900: CALL_OW 1
18904: ST_TO_ADDR
// end ; end ; MCE_UnitDestroyed ( un ) ;
18905: LD_VAR 0 1
18909: PPUSH
18910: CALL 82722 0 1
// end ;
18914: PPOPN 1
18916: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
18917: LD_VAR 0 1
18921: PPUSH
18922: LD_VAR 0 2
18926: PPUSH
18927: CALL 85056 0 2
// end ;
18931: PPOPN 2
18933: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
18934: LD_VAR 0 1
18938: PPUSH
18939: CALL 84124 0 1
// end ;
18943: PPOPN 1
18945: END
// on BuildingComplete ( building ) do begin MCE_BuildingComplete ( building ) ;
18946: LD_VAR 0 1
18950: PPUSH
18951: CALL 84365 0 1
// end ;
18955: PPOPN 1
18957: END
// on ResearchComplete ( tech , lab ) do begin if tech = tech_LasDouble and GetSide ( lab ) = 1 then
18958: LD_VAR 0 1
18962: PUSH
18963: LD_INT 14
18965: EQUAL
18966: PUSH
18967: LD_VAR 0 2
18971: PPUSH
18972: CALL_OW 255
18976: PUSH
18977: LD_INT 1
18979: EQUAL
18980: AND
18981: IFFALSE 19022
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Laser ) ;
18983: LD_EXP 9
18987: PPUSH
18988: LD_STRING D
18990: PUSH
18991: LD_STRING I
18993: PUSH
18994: LD_STRING J
18996: PUSH
18997: LD_STRING S
18999: PUSH
19000: EMPTY
19001: LIST
19002: LIST
19003: LIST
19004: PUSH
19005: LD_EXP 25
19009: ARRAY
19010: STR
19011: PUSH
19012: LD_STRING -1-Laser
19014: STR
19015: PPUSH
19016: CALL_OW 88
// exit ;
19020: GO 19164
// end ; if tech = tech_MatDet and GetSide ( lab ) = 1 then
19022: LD_VAR 0 1
19026: PUSH
19027: LD_INT 7
19029: EQUAL
19030: PUSH
19031: LD_VAR 0 2
19035: PPUSH
19036: CALL_OW 255
19040: PUSH
19041: LD_INT 1
19043: EQUAL
19044: AND
19045: IFFALSE 19086
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Materialization ) ;
19047: LD_EXP 9
19051: PPUSH
19052: LD_STRING D
19054: PUSH
19055: LD_STRING I
19057: PUSH
19058: LD_STRING J
19060: PUSH
19061: LD_STRING S
19063: PUSH
19064: EMPTY
19065: LIST
19066: LIST
19067: LIST
19068: PUSH
19069: LD_EXP 25
19073: ARRAY
19074: STR
19075: PUSH
19076: LD_STRING -1-Materialization
19078: STR
19079: PPUSH
19080: CALL_OW 88
// exit ;
19084: GO 19164
// end ; if tech = tech_SibFiss and GetSide ( lab ) = 1 then
19086: LD_VAR 0 1
19090: PUSH
19091: LD_INT 25
19093: EQUAL
19094: PUSH
19095: LD_VAR 0 2
19099: PPUSH
19100: CALL_OW 255
19104: PUSH
19105: LD_INT 1
19107: EQUAL
19108: AND
19109: IFFALSE 19150
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Rocket ) ;
19111: LD_EXP 9
19115: PPUSH
19116: LD_STRING D
19118: PUSH
19119: LD_STRING I
19121: PUSH
19122: LD_STRING J
19124: PUSH
19125: LD_STRING S
19127: PUSH
19128: EMPTY
19129: LIST
19130: LIST
19131: LIST
19132: PUSH
19133: LD_EXP 25
19137: ARRAY
19138: STR
19139: PUSH
19140: LD_STRING -1-Rocket
19142: STR
19143: PPUSH
19144: CALL_OW 88
// exit ;
19148: GO 19164
// end ; MCE_ResearchComplete ( tech , lab ) ;
19150: LD_VAR 0 1
19154: PPUSH
19155: LD_VAR 0 2
19159: PPUSH
19160: CALL 82418 0 2
// end ;
19164: PPOPN 2
19166: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
19167: LD_VAR 0 1
19171: PPUSH
19172: LD_VAR 0 2
19176: PPUSH
19177: LD_VAR 0 3
19181: PPUSH
19182: LD_VAR 0 4
19186: PPUSH
19187: LD_VAR 0 5
19191: PPUSH
19192: CALL 82038 0 5
// end ;
19196: PPOPN 5
19198: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
19199: LD_VAR 0 1
19203: PPUSH
19204: LD_VAR 0 2
19208: PPUSH
19209: CALL 81634 0 2
// end ;
19213: PPOPN 2
19215: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
19216: LD_VAR 0 1
19220: PPUSH
19221: LD_VAR 0 2
19225: PPUSH
19226: LD_VAR 0 3
19230: PPUSH
19231: LD_VAR 0 4
19235: PPUSH
19236: CALL 81472 0 4
// end ;
19240: PPOPN 4
19242: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
19243: LD_VAR 0 1
19247: PPUSH
19248: LD_VAR 0 2
19252: PPUSH
19253: LD_VAR 0 3
19257: PPUSH
19258: CALL 81247 0 3
// end ;
19262: PPOPN 3
19264: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
19265: LD_VAR 0 1
19269: PPUSH
19270: LD_VAR 0 2
19274: PPUSH
19275: CALL 81132 0 2
// end ;
19279: PPOPN 2
19281: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
19282: LD_VAR 0 1
19286: PPUSH
19287: LD_VAR 0 2
19291: PPUSH
19292: CALL 85317 0 2
// end ;
19296: PPOPN 2
19298: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
19299: LD_VAR 0 1
19303: PPUSH
19304: LD_VAR 0 2
19308: PPUSH
19309: LD_VAR 0 3
19313: PPUSH
19314: LD_VAR 0 4
19318: PPUSH
19319: CALL 85533 0 4
// end ;
19323: PPOPN 4
19325: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
19326: LD_VAR 0 1
19330: PPUSH
19331: LD_VAR 0 2
19335: PPUSH
19336: CALL 80941 0 2
// end ;
19340: PPOPN 2
19342: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
19343: LD_VAR 0 1
19347: PPUSH
19348: CALL 96801 0 1
// end ; end_of_file
19352: PPOPN 1
19354: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
19355: LD_INT 0
19357: PPUSH
19358: PPUSH
// if exist_mode then
19359: LD_VAR 0 2
19363: IFFALSE 19388
// unit := CreateCharacter ( prefix & ident ) else
19365: LD_ADDR_VAR 0 5
19369: PUSH
19370: LD_VAR 0 3
19374: PUSH
19375: LD_VAR 0 1
19379: STR
19380: PPUSH
19381: CALL_OW 34
19385: ST_TO_ADDR
19386: GO 19403
// unit := NewCharacter ( ident ) ;
19388: LD_ADDR_VAR 0 5
19392: PUSH
19393: LD_VAR 0 1
19397: PPUSH
19398: CALL_OW 25
19402: ST_TO_ADDR
// result := unit ;
19403: LD_ADDR_VAR 0 4
19407: PUSH
19408: LD_VAR 0 5
19412: ST_TO_ADDR
// end ;
19413: LD_VAR 0 4
19417: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
19418: LD_INT 0
19420: PPUSH
19421: PPUSH
// if not side or not nation then
19422: LD_VAR 0 1
19426: NOT
19427: PUSH
19428: LD_VAR 0 2
19432: NOT
19433: OR
19434: IFFALSE 19438
// exit ;
19436: GO 20202
// case nation of nation_american :
19438: LD_VAR 0 2
19442: PUSH
19443: LD_INT 1
19445: DOUBLE
19446: EQUAL
19447: IFTRUE 19451
19449: GO 19665
19451: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
19452: LD_ADDR_VAR 0 4
19456: PUSH
19457: LD_INT 35
19459: PUSH
19460: LD_INT 45
19462: PUSH
19463: LD_INT 46
19465: PUSH
19466: LD_INT 47
19468: PUSH
19469: LD_INT 82
19471: PUSH
19472: LD_INT 83
19474: PUSH
19475: LD_INT 84
19477: PUSH
19478: LD_INT 85
19480: PUSH
19481: LD_INT 86
19483: PUSH
19484: LD_INT 1
19486: PUSH
19487: LD_INT 2
19489: PUSH
19490: LD_INT 6
19492: PUSH
19493: LD_INT 15
19495: PUSH
19496: LD_INT 16
19498: PUSH
19499: LD_INT 7
19501: PUSH
19502: LD_INT 12
19504: PUSH
19505: LD_INT 13
19507: PUSH
19508: LD_INT 10
19510: PUSH
19511: LD_INT 14
19513: PUSH
19514: LD_INT 20
19516: PUSH
19517: LD_INT 21
19519: PUSH
19520: LD_INT 22
19522: PUSH
19523: LD_INT 25
19525: PUSH
19526: LD_INT 32
19528: PUSH
19529: LD_INT 27
19531: PUSH
19532: LD_INT 36
19534: PUSH
19535: LD_INT 69
19537: PUSH
19538: LD_INT 39
19540: PUSH
19541: LD_INT 34
19543: PUSH
19544: LD_INT 40
19546: PUSH
19547: LD_INT 48
19549: PUSH
19550: LD_INT 49
19552: PUSH
19553: LD_INT 50
19555: PUSH
19556: LD_INT 51
19558: PUSH
19559: LD_INT 52
19561: PUSH
19562: LD_INT 53
19564: PUSH
19565: LD_INT 54
19567: PUSH
19568: LD_INT 55
19570: PUSH
19571: LD_INT 56
19573: PUSH
19574: LD_INT 57
19576: PUSH
19577: LD_INT 58
19579: PUSH
19580: LD_INT 59
19582: PUSH
19583: LD_INT 60
19585: PUSH
19586: LD_INT 61
19588: PUSH
19589: LD_INT 62
19591: PUSH
19592: LD_INT 80
19594: PUSH
19595: LD_INT 82
19597: PUSH
19598: LD_INT 83
19600: PUSH
19601: LD_INT 84
19603: PUSH
19604: LD_INT 85
19606: PUSH
19607: LD_INT 86
19609: PUSH
19610: EMPTY
19611: LIST
19612: LIST
19613: LIST
19614: LIST
19615: LIST
19616: LIST
19617: LIST
19618: LIST
19619: LIST
19620: LIST
19621: LIST
19622: LIST
19623: LIST
19624: LIST
19625: LIST
19626: LIST
19627: LIST
19628: LIST
19629: LIST
19630: LIST
19631: LIST
19632: LIST
19633: LIST
19634: LIST
19635: LIST
19636: LIST
19637: LIST
19638: LIST
19639: LIST
19640: LIST
19641: LIST
19642: LIST
19643: LIST
19644: LIST
19645: LIST
19646: LIST
19647: LIST
19648: LIST
19649: LIST
19650: LIST
19651: LIST
19652: LIST
19653: LIST
19654: LIST
19655: LIST
19656: LIST
19657: LIST
19658: LIST
19659: LIST
19660: LIST
19661: LIST
19662: ST_TO_ADDR
19663: GO 20126
19665: LD_INT 2
19667: DOUBLE
19668: EQUAL
19669: IFTRUE 19673
19671: GO 19895
19673: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
19674: LD_ADDR_VAR 0 4
19678: PUSH
19679: LD_INT 35
19681: PUSH
19682: LD_INT 45
19684: PUSH
19685: LD_INT 46
19687: PUSH
19688: LD_INT 47
19690: PUSH
19691: LD_INT 82
19693: PUSH
19694: LD_INT 83
19696: PUSH
19697: LD_INT 84
19699: PUSH
19700: LD_INT 85
19702: PUSH
19703: LD_INT 87
19705: PUSH
19706: LD_INT 70
19708: PUSH
19709: LD_INT 1
19711: PUSH
19712: LD_INT 11
19714: PUSH
19715: LD_INT 3
19717: PUSH
19718: LD_INT 4
19720: PUSH
19721: LD_INT 5
19723: PUSH
19724: LD_INT 6
19726: PUSH
19727: LD_INT 15
19729: PUSH
19730: LD_INT 18
19732: PUSH
19733: LD_INT 7
19735: PUSH
19736: LD_INT 17
19738: PUSH
19739: LD_INT 8
19741: PUSH
19742: LD_INT 20
19744: PUSH
19745: LD_INT 21
19747: PUSH
19748: LD_INT 22
19750: PUSH
19751: LD_INT 72
19753: PUSH
19754: LD_INT 26
19756: PUSH
19757: LD_INT 69
19759: PUSH
19760: LD_INT 39
19762: PUSH
19763: LD_INT 40
19765: PUSH
19766: LD_INT 41
19768: PUSH
19769: LD_INT 42
19771: PUSH
19772: LD_INT 43
19774: PUSH
19775: LD_INT 48
19777: PUSH
19778: LD_INT 49
19780: PUSH
19781: LD_INT 50
19783: PUSH
19784: LD_INT 51
19786: PUSH
19787: LD_INT 52
19789: PUSH
19790: LD_INT 53
19792: PUSH
19793: LD_INT 54
19795: PUSH
19796: LD_INT 55
19798: PUSH
19799: LD_INT 56
19801: PUSH
19802: LD_INT 60
19804: PUSH
19805: LD_INT 61
19807: PUSH
19808: LD_INT 62
19810: PUSH
19811: LD_INT 66
19813: PUSH
19814: LD_INT 67
19816: PUSH
19817: LD_INT 68
19819: PUSH
19820: LD_INT 81
19822: PUSH
19823: LD_INT 82
19825: PUSH
19826: LD_INT 83
19828: PUSH
19829: LD_INT 84
19831: PUSH
19832: LD_INT 85
19834: PUSH
19835: LD_INT 87
19837: PUSH
19838: EMPTY
19839: LIST
19840: LIST
19841: LIST
19842: LIST
19843: LIST
19844: LIST
19845: LIST
19846: LIST
19847: LIST
19848: LIST
19849: LIST
19850: LIST
19851: LIST
19852: LIST
19853: LIST
19854: LIST
19855: LIST
19856: LIST
19857: LIST
19858: LIST
19859: LIST
19860: LIST
19861: LIST
19862: LIST
19863: LIST
19864: LIST
19865: LIST
19866: LIST
19867: LIST
19868: LIST
19869: LIST
19870: LIST
19871: LIST
19872: LIST
19873: LIST
19874: LIST
19875: LIST
19876: LIST
19877: LIST
19878: LIST
19879: LIST
19880: LIST
19881: LIST
19882: LIST
19883: LIST
19884: LIST
19885: LIST
19886: LIST
19887: LIST
19888: LIST
19889: LIST
19890: LIST
19891: LIST
19892: ST_TO_ADDR
19893: GO 20126
19895: LD_INT 3
19897: DOUBLE
19898: EQUAL
19899: IFTRUE 19903
19901: GO 20125
19903: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
19904: LD_ADDR_VAR 0 4
19908: PUSH
19909: LD_INT 46
19911: PUSH
19912: LD_INT 47
19914: PUSH
19915: LD_INT 1
19917: PUSH
19918: LD_INT 2
19920: PUSH
19921: LD_INT 82
19923: PUSH
19924: LD_INT 83
19926: PUSH
19927: LD_INT 84
19929: PUSH
19930: LD_INT 85
19932: PUSH
19933: LD_INT 86
19935: PUSH
19936: LD_INT 11
19938: PUSH
19939: LD_INT 9
19941: PUSH
19942: LD_INT 20
19944: PUSH
19945: LD_INT 19
19947: PUSH
19948: LD_INT 21
19950: PUSH
19951: LD_INT 24
19953: PUSH
19954: LD_INT 22
19956: PUSH
19957: LD_INT 25
19959: PUSH
19960: LD_INT 28
19962: PUSH
19963: LD_INT 29
19965: PUSH
19966: LD_INT 30
19968: PUSH
19969: LD_INT 31
19971: PUSH
19972: LD_INT 37
19974: PUSH
19975: LD_INT 38
19977: PUSH
19978: LD_INT 32
19980: PUSH
19981: LD_INT 27
19983: PUSH
19984: LD_INT 33
19986: PUSH
19987: LD_INT 69
19989: PUSH
19990: LD_INT 39
19992: PUSH
19993: LD_INT 34
19995: PUSH
19996: LD_INT 40
19998: PUSH
19999: LD_INT 71
20001: PUSH
20002: LD_INT 23
20004: PUSH
20005: LD_INT 44
20007: PUSH
20008: LD_INT 48
20010: PUSH
20011: LD_INT 49
20013: PUSH
20014: LD_INT 50
20016: PUSH
20017: LD_INT 51
20019: PUSH
20020: LD_INT 52
20022: PUSH
20023: LD_INT 53
20025: PUSH
20026: LD_INT 54
20028: PUSH
20029: LD_INT 55
20031: PUSH
20032: LD_INT 56
20034: PUSH
20035: LD_INT 57
20037: PUSH
20038: LD_INT 58
20040: PUSH
20041: LD_INT 59
20043: PUSH
20044: LD_INT 63
20046: PUSH
20047: LD_INT 64
20049: PUSH
20050: LD_INT 65
20052: PUSH
20053: LD_INT 82
20055: PUSH
20056: LD_INT 83
20058: PUSH
20059: LD_INT 84
20061: PUSH
20062: LD_INT 85
20064: PUSH
20065: LD_INT 86
20067: PUSH
20068: EMPTY
20069: LIST
20070: LIST
20071: LIST
20072: LIST
20073: LIST
20074: LIST
20075: LIST
20076: LIST
20077: LIST
20078: LIST
20079: LIST
20080: LIST
20081: LIST
20082: LIST
20083: LIST
20084: LIST
20085: LIST
20086: LIST
20087: LIST
20088: LIST
20089: LIST
20090: LIST
20091: LIST
20092: LIST
20093: LIST
20094: LIST
20095: LIST
20096: LIST
20097: LIST
20098: LIST
20099: LIST
20100: LIST
20101: LIST
20102: LIST
20103: LIST
20104: LIST
20105: LIST
20106: LIST
20107: LIST
20108: LIST
20109: LIST
20110: LIST
20111: LIST
20112: LIST
20113: LIST
20114: LIST
20115: LIST
20116: LIST
20117: LIST
20118: LIST
20119: LIST
20120: LIST
20121: LIST
20122: ST_TO_ADDR
20123: GO 20126
20125: POP
// if state > - 1 and state < 3 then
20126: LD_VAR 0 3
20130: PUSH
20131: LD_INT 1
20133: NEG
20134: GREATER
20135: PUSH
20136: LD_VAR 0 3
20140: PUSH
20141: LD_INT 3
20143: LESS
20144: AND
20145: IFFALSE 20202
// for i in result do
20147: LD_ADDR_VAR 0 5
20151: PUSH
20152: LD_VAR 0 4
20156: PUSH
20157: FOR_IN
20158: IFFALSE 20200
// if GetTech ( i , side ) <> state then
20160: LD_VAR 0 5
20164: PPUSH
20165: LD_VAR 0 1
20169: PPUSH
20170: CALL_OW 321
20174: PUSH
20175: LD_VAR 0 3
20179: NONEQUAL
20180: IFFALSE 20198
// result := result diff i ;
20182: LD_ADDR_VAR 0 4
20186: PUSH
20187: LD_VAR 0 4
20191: PUSH
20192: LD_VAR 0 5
20196: DIFF
20197: ST_TO_ADDR
20198: GO 20157
20200: POP
20201: POP
// end ;
20202: LD_VAR 0 4
20206: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
20207: LD_INT 0
20209: PPUSH
20210: PPUSH
20211: PPUSH
// result := true ;
20212: LD_ADDR_VAR 0 3
20216: PUSH
20217: LD_INT 1
20219: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
20220: LD_ADDR_VAR 0 5
20224: PUSH
20225: LD_VAR 0 2
20229: PPUSH
20230: CALL_OW 480
20234: ST_TO_ADDR
// if not tmp then
20235: LD_VAR 0 5
20239: NOT
20240: IFFALSE 20244
// exit ;
20242: GO 20293
// for i in tmp do
20244: LD_ADDR_VAR 0 4
20248: PUSH
20249: LD_VAR 0 5
20253: PUSH
20254: FOR_IN
20255: IFFALSE 20291
// if GetTech ( i , side ) <> state_researched then
20257: LD_VAR 0 4
20261: PPUSH
20262: LD_VAR 0 1
20266: PPUSH
20267: CALL_OW 321
20271: PUSH
20272: LD_INT 2
20274: NONEQUAL
20275: IFFALSE 20289
// begin result := false ;
20277: LD_ADDR_VAR 0 3
20281: PUSH
20282: LD_INT 0
20284: ST_TO_ADDR
// exit ;
20285: POP
20286: POP
20287: GO 20293
// end ;
20289: GO 20254
20291: POP
20292: POP
// end ;
20293: LD_VAR 0 3
20297: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
20298: LD_INT 0
20300: PPUSH
20301: PPUSH
20302: PPUSH
20303: PPUSH
20304: PPUSH
20305: PPUSH
20306: PPUSH
20307: PPUSH
20308: PPUSH
20309: PPUSH
20310: PPUSH
20311: PPUSH
20312: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
20313: LD_VAR 0 1
20317: NOT
20318: PUSH
20319: LD_VAR 0 1
20323: PPUSH
20324: CALL_OW 257
20328: PUSH
20329: LD_INT 9
20331: NONEQUAL
20332: OR
20333: IFFALSE 20337
// exit ;
20335: GO 20910
// side := GetSide ( unit ) ;
20337: LD_ADDR_VAR 0 9
20341: PUSH
20342: LD_VAR 0 1
20346: PPUSH
20347: CALL_OW 255
20351: ST_TO_ADDR
// tech_space := tech_spacanom ;
20352: LD_ADDR_VAR 0 12
20356: PUSH
20357: LD_INT 29
20359: ST_TO_ADDR
// tech_time := tech_taurad ;
20360: LD_ADDR_VAR 0 13
20364: PUSH
20365: LD_INT 28
20367: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
20368: LD_ADDR_VAR 0 11
20372: PUSH
20373: LD_VAR 0 1
20377: PPUSH
20378: CALL_OW 310
20382: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
20383: LD_VAR 0 11
20387: PPUSH
20388: CALL_OW 247
20392: PUSH
20393: LD_INT 2
20395: EQUAL
20396: IFFALSE 20400
// exit ;
20398: GO 20910
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
20400: LD_ADDR_VAR 0 8
20404: PUSH
20405: LD_INT 81
20407: PUSH
20408: LD_VAR 0 9
20412: PUSH
20413: EMPTY
20414: LIST
20415: LIST
20416: PUSH
20417: LD_INT 3
20419: PUSH
20420: LD_INT 21
20422: PUSH
20423: LD_INT 3
20425: PUSH
20426: EMPTY
20427: LIST
20428: LIST
20429: PUSH
20430: EMPTY
20431: LIST
20432: LIST
20433: PUSH
20434: EMPTY
20435: LIST
20436: LIST
20437: PPUSH
20438: CALL_OW 69
20442: ST_TO_ADDR
// if not tmp then
20443: LD_VAR 0 8
20447: NOT
20448: IFFALSE 20452
// exit ;
20450: GO 20910
// if in_unit then
20452: LD_VAR 0 11
20456: IFFALSE 20480
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
20458: LD_ADDR_VAR 0 10
20462: PUSH
20463: LD_VAR 0 8
20467: PPUSH
20468: LD_VAR 0 11
20472: PPUSH
20473: CALL_OW 74
20477: ST_TO_ADDR
20478: GO 20500
// enemy := NearestUnitToUnit ( tmp , unit ) ;
20480: LD_ADDR_VAR 0 10
20484: PUSH
20485: LD_VAR 0 8
20489: PPUSH
20490: LD_VAR 0 1
20494: PPUSH
20495: CALL_OW 74
20499: ST_TO_ADDR
// if not enemy then
20500: LD_VAR 0 10
20504: NOT
20505: IFFALSE 20509
// exit ;
20507: GO 20910
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
20509: LD_VAR 0 11
20513: PUSH
20514: LD_VAR 0 11
20518: PPUSH
20519: LD_VAR 0 10
20523: PPUSH
20524: CALL_OW 296
20528: PUSH
20529: LD_INT 13
20531: GREATER
20532: AND
20533: PUSH
20534: LD_VAR 0 1
20538: PPUSH
20539: LD_VAR 0 10
20543: PPUSH
20544: CALL_OW 296
20548: PUSH
20549: LD_INT 12
20551: GREATER
20552: OR
20553: IFFALSE 20557
// exit ;
20555: GO 20910
// missile := [ 1 ] ;
20557: LD_ADDR_VAR 0 14
20561: PUSH
20562: LD_INT 1
20564: PUSH
20565: EMPTY
20566: LIST
20567: ST_TO_ADDR
// if Researched ( side , tech_space ) then
20568: LD_VAR 0 9
20572: PPUSH
20573: LD_VAR 0 12
20577: PPUSH
20578: CALL_OW 325
20582: IFFALSE 20611
// missile := Insert ( missile , missile + 1 , 2 ) ;
20584: LD_ADDR_VAR 0 14
20588: PUSH
20589: LD_VAR 0 14
20593: PPUSH
20594: LD_VAR 0 14
20598: PUSH
20599: LD_INT 1
20601: PLUS
20602: PPUSH
20603: LD_INT 2
20605: PPUSH
20606: CALL_OW 2
20610: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
20611: LD_VAR 0 9
20615: PPUSH
20616: LD_VAR 0 13
20620: PPUSH
20621: CALL_OW 325
20625: PUSH
20626: LD_VAR 0 10
20630: PPUSH
20631: CALL_OW 255
20635: PPUSH
20636: LD_VAR 0 13
20640: PPUSH
20641: CALL_OW 325
20645: NOT
20646: AND
20647: IFFALSE 20676
// missile := Insert ( missile , missile + 1 , 3 ) ;
20649: LD_ADDR_VAR 0 14
20653: PUSH
20654: LD_VAR 0 14
20658: PPUSH
20659: LD_VAR 0 14
20663: PUSH
20664: LD_INT 1
20666: PLUS
20667: PPUSH
20668: LD_INT 3
20670: PPUSH
20671: CALL_OW 2
20675: ST_TO_ADDR
// if missile < 2 then
20676: LD_VAR 0 14
20680: PUSH
20681: LD_INT 2
20683: LESS
20684: IFFALSE 20688
// exit ;
20686: GO 20910
// x := GetX ( enemy ) ;
20688: LD_ADDR_VAR 0 4
20692: PUSH
20693: LD_VAR 0 10
20697: PPUSH
20698: CALL_OW 250
20702: ST_TO_ADDR
// y := GetY ( enemy ) ;
20703: LD_ADDR_VAR 0 5
20707: PUSH
20708: LD_VAR 0 10
20712: PPUSH
20713: CALL_OW 251
20717: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
20718: LD_ADDR_VAR 0 6
20722: PUSH
20723: LD_VAR 0 4
20727: PUSH
20728: LD_INT 1
20730: NEG
20731: PPUSH
20732: LD_INT 1
20734: PPUSH
20735: CALL_OW 12
20739: PLUS
20740: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
20741: LD_ADDR_VAR 0 7
20745: PUSH
20746: LD_VAR 0 5
20750: PUSH
20751: LD_INT 1
20753: NEG
20754: PPUSH
20755: LD_INT 1
20757: PPUSH
20758: CALL_OW 12
20762: PLUS
20763: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
20764: LD_VAR 0 6
20768: PPUSH
20769: LD_VAR 0 7
20773: PPUSH
20774: CALL_OW 488
20778: NOT
20779: IFFALSE 20801
// begin _x := x ;
20781: LD_ADDR_VAR 0 6
20785: PUSH
20786: LD_VAR 0 4
20790: ST_TO_ADDR
// _y := y ;
20791: LD_ADDR_VAR 0 7
20795: PUSH
20796: LD_VAR 0 5
20800: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
20801: LD_ADDR_VAR 0 3
20805: PUSH
20806: LD_INT 1
20808: PPUSH
20809: LD_VAR 0 14
20813: PPUSH
20814: CALL_OW 12
20818: ST_TO_ADDR
// case i of 1 :
20819: LD_VAR 0 3
20823: PUSH
20824: LD_INT 1
20826: DOUBLE
20827: EQUAL
20828: IFTRUE 20832
20830: GO 20849
20832: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
20833: LD_VAR 0 1
20837: PPUSH
20838: LD_VAR 0 10
20842: PPUSH
20843: CALL_OW 115
20847: GO 20910
20849: LD_INT 2
20851: DOUBLE
20852: EQUAL
20853: IFTRUE 20857
20855: GO 20879
20857: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
20858: LD_VAR 0 1
20862: PPUSH
20863: LD_VAR 0 6
20867: PPUSH
20868: LD_VAR 0 7
20872: PPUSH
20873: CALL_OW 153
20877: GO 20910
20879: LD_INT 3
20881: DOUBLE
20882: EQUAL
20883: IFTRUE 20887
20885: GO 20909
20887: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
20888: LD_VAR 0 1
20892: PPUSH
20893: LD_VAR 0 6
20897: PPUSH
20898: LD_VAR 0 7
20902: PPUSH
20903: CALL_OW 154
20907: GO 20910
20909: POP
// end ;
20910: LD_VAR 0 2
20914: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
20915: LD_INT 0
20917: PPUSH
20918: PPUSH
20919: PPUSH
20920: PPUSH
20921: PPUSH
20922: PPUSH
// if not unit or not building then
20923: LD_VAR 0 1
20927: NOT
20928: PUSH
20929: LD_VAR 0 2
20933: NOT
20934: OR
20935: IFFALSE 20939
// exit ;
20937: GO 21097
// x := GetX ( building ) ;
20939: LD_ADDR_VAR 0 5
20943: PUSH
20944: LD_VAR 0 2
20948: PPUSH
20949: CALL_OW 250
20953: ST_TO_ADDR
// y := GetY ( building ) ;
20954: LD_ADDR_VAR 0 6
20958: PUSH
20959: LD_VAR 0 2
20963: PPUSH
20964: CALL_OW 251
20968: ST_TO_ADDR
// for i = 0 to 5 do
20969: LD_ADDR_VAR 0 4
20973: PUSH
20974: DOUBLE
20975: LD_INT 0
20977: DEC
20978: ST_TO_ADDR
20979: LD_INT 5
20981: PUSH
20982: FOR_TO
20983: IFFALSE 21095
// begin _x := ShiftX ( x , i , 3 ) ;
20985: LD_ADDR_VAR 0 7
20989: PUSH
20990: LD_VAR 0 5
20994: PPUSH
20995: LD_VAR 0 4
20999: PPUSH
21000: LD_INT 3
21002: PPUSH
21003: CALL_OW 272
21007: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
21008: LD_ADDR_VAR 0 8
21012: PUSH
21013: LD_VAR 0 6
21017: PPUSH
21018: LD_VAR 0 4
21022: PPUSH
21023: LD_INT 3
21025: PPUSH
21026: CALL_OW 273
21030: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21031: LD_VAR 0 7
21035: PPUSH
21036: LD_VAR 0 8
21040: PPUSH
21041: CALL_OW 488
21045: NOT
21046: IFFALSE 21050
// continue ;
21048: GO 20982
// if HexInfo ( _x , _y ) = 0 then
21050: LD_VAR 0 7
21054: PPUSH
21055: LD_VAR 0 8
21059: PPUSH
21060: CALL_OW 428
21064: PUSH
21065: LD_INT 0
21067: EQUAL
21068: IFFALSE 21093
// begin ComMoveXY ( unit , _x , _y ) ;
21070: LD_VAR 0 1
21074: PPUSH
21075: LD_VAR 0 7
21079: PPUSH
21080: LD_VAR 0 8
21084: PPUSH
21085: CALL_OW 111
// exit ;
21089: POP
21090: POP
21091: GO 21097
// end ; end ;
21093: GO 20982
21095: POP
21096: POP
// end ;
21097: LD_VAR 0 3
21101: RET
// export function ScanBase ( side , base_area ) ; begin
21102: LD_INT 0
21104: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
21105: LD_ADDR_VAR 0 3
21109: PUSH
21110: LD_VAR 0 2
21114: PPUSH
21115: LD_INT 81
21117: PUSH
21118: LD_VAR 0 1
21122: PUSH
21123: EMPTY
21124: LIST
21125: LIST
21126: PPUSH
21127: CALL_OW 70
21131: ST_TO_ADDR
// end ;
21132: LD_VAR 0 3
21136: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
21137: LD_INT 0
21139: PPUSH
21140: PPUSH
21141: PPUSH
21142: PPUSH
// result := false ;
21143: LD_ADDR_VAR 0 2
21147: PUSH
21148: LD_INT 0
21150: ST_TO_ADDR
// side := GetSide ( unit ) ;
21151: LD_ADDR_VAR 0 3
21155: PUSH
21156: LD_VAR 0 1
21160: PPUSH
21161: CALL_OW 255
21165: ST_TO_ADDR
// nat := GetNation ( unit ) ;
21166: LD_ADDR_VAR 0 4
21170: PUSH
21171: LD_VAR 0 1
21175: PPUSH
21176: CALL_OW 248
21180: ST_TO_ADDR
// case nat of 1 :
21181: LD_VAR 0 4
21185: PUSH
21186: LD_INT 1
21188: DOUBLE
21189: EQUAL
21190: IFTRUE 21194
21192: GO 21205
21194: POP
// tech := tech_lassight ; 2 :
21195: LD_ADDR_VAR 0 5
21199: PUSH
21200: LD_INT 12
21202: ST_TO_ADDR
21203: GO 21244
21205: LD_INT 2
21207: DOUBLE
21208: EQUAL
21209: IFTRUE 21213
21211: GO 21224
21213: POP
// tech := tech_mortar ; 3 :
21214: LD_ADDR_VAR 0 5
21218: PUSH
21219: LD_INT 41
21221: ST_TO_ADDR
21222: GO 21244
21224: LD_INT 3
21226: DOUBLE
21227: EQUAL
21228: IFTRUE 21232
21230: GO 21243
21232: POP
// tech := tech_bazooka ; end ;
21233: LD_ADDR_VAR 0 5
21237: PUSH
21238: LD_INT 44
21240: ST_TO_ADDR
21241: GO 21244
21243: POP
// if Researched ( side , tech ) then
21244: LD_VAR 0 3
21248: PPUSH
21249: LD_VAR 0 5
21253: PPUSH
21254: CALL_OW 325
21258: IFFALSE 21285
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
21260: LD_ADDR_VAR 0 2
21264: PUSH
21265: LD_INT 5
21267: PUSH
21268: LD_INT 8
21270: PUSH
21271: LD_INT 9
21273: PUSH
21274: EMPTY
21275: LIST
21276: LIST
21277: LIST
21278: PUSH
21279: LD_VAR 0 4
21283: ARRAY
21284: ST_TO_ADDR
// end ;
21285: LD_VAR 0 2
21289: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
21290: LD_INT 0
21292: PPUSH
21293: PPUSH
21294: PPUSH
// if not mines then
21295: LD_VAR 0 2
21299: NOT
21300: IFFALSE 21304
// exit ;
21302: GO 21448
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21304: LD_ADDR_VAR 0 5
21308: PUSH
21309: LD_INT 81
21311: PUSH
21312: LD_VAR 0 1
21316: PUSH
21317: EMPTY
21318: LIST
21319: LIST
21320: PUSH
21321: LD_INT 3
21323: PUSH
21324: LD_INT 21
21326: PUSH
21327: LD_INT 3
21329: PUSH
21330: EMPTY
21331: LIST
21332: LIST
21333: PUSH
21334: EMPTY
21335: LIST
21336: LIST
21337: PUSH
21338: EMPTY
21339: LIST
21340: LIST
21341: PPUSH
21342: CALL_OW 69
21346: ST_TO_ADDR
// for i in mines do
21347: LD_ADDR_VAR 0 4
21351: PUSH
21352: LD_VAR 0 2
21356: PUSH
21357: FOR_IN
21358: IFFALSE 21446
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
21360: LD_VAR 0 4
21364: PUSH
21365: LD_INT 1
21367: ARRAY
21368: PPUSH
21369: LD_VAR 0 4
21373: PUSH
21374: LD_INT 2
21376: ARRAY
21377: PPUSH
21378: CALL_OW 458
21382: NOT
21383: IFFALSE 21387
// continue ;
21385: GO 21357
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
21387: LD_VAR 0 4
21391: PUSH
21392: LD_INT 1
21394: ARRAY
21395: PPUSH
21396: LD_VAR 0 4
21400: PUSH
21401: LD_INT 2
21403: ARRAY
21404: PPUSH
21405: CALL_OW 428
21409: PUSH
21410: LD_VAR 0 5
21414: IN
21415: IFFALSE 21444
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
21417: LD_VAR 0 4
21421: PUSH
21422: LD_INT 1
21424: ARRAY
21425: PPUSH
21426: LD_VAR 0 4
21430: PUSH
21431: LD_INT 2
21433: ARRAY
21434: PPUSH
21435: LD_VAR 0 1
21439: PPUSH
21440: CALL_OW 456
// end ;
21444: GO 21357
21446: POP
21447: POP
// end ;
21448: LD_VAR 0 3
21452: RET
// export function Count ( array ) ; var i ; begin
21453: LD_INT 0
21455: PPUSH
21456: PPUSH
// result := 0 ;
21457: LD_ADDR_VAR 0 2
21461: PUSH
21462: LD_INT 0
21464: ST_TO_ADDR
// for i in array do
21465: LD_ADDR_VAR 0 3
21469: PUSH
21470: LD_VAR 0 1
21474: PUSH
21475: FOR_IN
21476: IFFALSE 21500
// if i then
21478: LD_VAR 0 3
21482: IFFALSE 21498
// result := result + 1 ;
21484: LD_ADDR_VAR 0 2
21488: PUSH
21489: LD_VAR 0 2
21493: PUSH
21494: LD_INT 1
21496: PLUS
21497: ST_TO_ADDR
21498: GO 21475
21500: POP
21501: POP
// end ;
21502: LD_VAR 0 2
21506: RET
// export function IsEmpty ( building ) ; begin
21507: LD_INT 0
21509: PPUSH
// if not building then
21510: LD_VAR 0 1
21514: NOT
21515: IFFALSE 21519
// exit ;
21517: GO 21562
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
21519: LD_ADDR_VAR 0 2
21523: PUSH
21524: LD_VAR 0 1
21528: PUSH
21529: LD_INT 22
21531: PUSH
21532: LD_VAR 0 1
21536: PPUSH
21537: CALL_OW 255
21541: PUSH
21542: EMPTY
21543: LIST
21544: LIST
21545: PUSH
21546: LD_INT 58
21548: PUSH
21549: EMPTY
21550: LIST
21551: PUSH
21552: EMPTY
21553: LIST
21554: LIST
21555: PPUSH
21556: CALL_OW 69
21560: IN
21561: ST_TO_ADDR
// end ;
21562: LD_VAR 0 2
21566: RET
// export function IsNotFull ( building ) ; begin
21567: LD_INT 0
21569: PPUSH
// if not building then
21570: LD_VAR 0 1
21574: NOT
21575: IFFALSE 21579
// exit ;
21577: GO 21598
// result := UnitsInside ( building ) < 6 ;
21579: LD_ADDR_VAR 0 2
21583: PUSH
21584: LD_VAR 0 1
21588: PPUSH
21589: CALL_OW 313
21593: PUSH
21594: LD_INT 6
21596: LESS
21597: ST_TO_ADDR
// end ;
21598: LD_VAR 0 2
21602: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
21603: LD_INT 0
21605: PPUSH
21606: PPUSH
21607: PPUSH
21608: PPUSH
// tmp := [ ] ;
21609: LD_ADDR_VAR 0 3
21613: PUSH
21614: EMPTY
21615: ST_TO_ADDR
// list := [ ] ;
21616: LD_ADDR_VAR 0 5
21620: PUSH
21621: EMPTY
21622: ST_TO_ADDR
// for i = 16 to 25 do
21623: LD_ADDR_VAR 0 4
21627: PUSH
21628: DOUBLE
21629: LD_INT 16
21631: DEC
21632: ST_TO_ADDR
21633: LD_INT 25
21635: PUSH
21636: FOR_TO
21637: IFFALSE 21710
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
21639: LD_ADDR_VAR 0 3
21643: PUSH
21644: LD_VAR 0 3
21648: PUSH
21649: LD_INT 22
21651: PUSH
21652: LD_VAR 0 1
21656: PPUSH
21657: CALL_OW 255
21661: PUSH
21662: EMPTY
21663: LIST
21664: LIST
21665: PUSH
21666: LD_INT 91
21668: PUSH
21669: LD_VAR 0 1
21673: PUSH
21674: LD_INT 6
21676: PUSH
21677: EMPTY
21678: LIST
21679: LIST
21680: LIST
21681: PUSH
21682: LD_INT 30
21684: PUSH
21685: LD_VAR 0 4
21689: PUSH
21690: EMPTY
21691: LIST
21692: LIST
21693: PUSH
21694: EMPTY
21695: LIST
21696: LIST
21697: LIST
21698: PUSH
21699: EMPTY
21700: LIST
21701: PPUSH
21702: CALL_OW 69
21706: ADD
21707: ST_TO_ADDR
21708: GO 21636
21710: POP
21711: POP
// for i = 1 to tmp do
21712: LD_ADDR_VAR 0 4
21716: PUSH
21717: DOUBLE
21718: LD_INT 1
21720: DEC
21721: ST_TO_ADDR
21722: LD_VAR 0 3
21726: PUSH
21727: FOR_TO
21728: IFFALSE 21816
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
21730: LD_ADDR_VAR 0 5
21734: PUSH
21735: LD_VAR 0 5
21739: PUSH
21740: LD_VAR 0 3
21744: PUSH
21745: LD_VAR 0 4
21749: ARRAY
21750: PPUSH
21751: CALL_OW 266
21755: PUSH
21756: LD_VAR 0 3
21760: PUSH
21761: LD_VAR 0 4
21765: ARRAY
21766: PPUSH
21767: CALL_OW 250
21771: PUSH
21772: LD_VAR 0 3
21776: PUSH
21777: LD_VAR 0 4
21781: ARRAY
21782: PPUSH
21783: CALL_OW 251
21787: PUSH
21788: LD_VAR 0 3
21792: PUSH
21793: LD_VAR 0 4
21797: ARRAY
21798: PPUSH
21799: CALL_OW 254
21803: PUSH
21804: EMPTY
21805: LIST
21806: LIST
21807: LIST
21808: LIST
21809: PUSH
21810: EMPTY
21811: LIST
21812: ADD
21813: ST_TO_ADDR
21814: GO 21727
21816: POP
21817: POP
// result := list ;
21818: LD_ADDR_VAR 0 2
21822: PUSH
21823: LD_VAR 0 5
21827: ST_TO_ADDR
// end ;
21828: LD_VAR 0 2
21832: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
21833: LD_INT 0
21835: PPUSH
21836: PPUSH
21837: PPUSH
21838: PPUSH
21839: PPUSH
21840: PPUSH
21841: PPUSH
// if not factory then
21842: LD_VAR 0 1
21846: NOT
21847: IFFALSE 21851
// exit ;
21849: GO 22444
// if control = control_apeman then
21851: LD_VAR 0 4
21855: PUSH
21856: LD_INT 5
21858: EQUAL
21859: IFFALSE 21968
// begin tmp := UnitsInside ( factory ) ;
21861: LD_ADDR_VAR 0 8
21865: PUSH
21866: LD_VAR 0 1
21870: PPUSH
21871: CALL_OW 313
21875: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
21876: LD_VAR 0 8
21880: PPUSH
21881: LD_INT 25
21883: PUSH
21884: LD_INT 12
21886: PUSH
21887: EMPTY
21888: LIST
21889: LIST
21890: PPUSH
21891: CALL_OW 72
21895: NOT
21896: IFFALSE 21906
// control := control_manual ;
21898: LD_ADDR_VAR 0 4
21902: PUSH
21903: LD_INT 1
21905: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
21906: LD_ADDR_VAR 0 8
21910: PUSH
21911: LD_VAR 0 1
21915: PPUSH
21916: CALL 21603 0 1
21920: ST_TO_ADDR
// if tmp then
21921: LD_VAR 0 8
21925: IFFALSE 21968
// begin for i in tmp do
21927: LD_ADDR_VAR 0 7
21931: PUSH
21932: LD_VAR 0 8
21936: PUSH
21937: FOR_IN
21938: IFFALSE 21966
// if i [ 1 ] = b_ext_radio then
21940: LD_VAR 0 7
21944: PUSH
21945: LD_INT 1
21947: ARRAY
21948: PUSH
21949: LD_INT 22
21951: EQUAL
21952: IFFALSE 21964
// begin control := control_remote ;
21954: LD_ADDR_VAR 0 4
21958: PUSH
21959: LD_INT 2
21961: ST_TO_ADDR
// break ;
21962: GO 21966
// end ;
21964: GO 21937
21966: POP
21967: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
21968: LD_VAR 0 1
21972: PPUSH
21973: LD_VAR 0 2
21977: PPUSH
21978: LD_VAR 0 3
21982: PPUSH
21983: LD_VAR 0 4
21987: PPUSH
21988: LD_VAR 0 5
21992: PPUSH
21993: CALL_OW 448
21997: IFFALSE 22032
// begin result := [ chassis , engine , control , weapon ] ;
21999: LD_ADDR_VAR 0 6
22003: PUSH
22004: LD_VAR 0 2
22008: PUSH
22009: LD_VAR 0 3
22013: PUSH
22014: LD_VAR 0 4
22018: PUSH
22019: LD_VAR 0 5
22023: PUSH
22024: EMPTY
22025: LIST
22026: LIST
22027: LIST
22028: LIST
22029: ST_TO_ADDR
// exit ;
22030: GO 22444
// end ; _chassis := AvailableChassisList ( factory ) ;
22032: LD_ADDR_VAR 0 9
22036: PUSH
22037: LD_VAR 0 1
22041: PPUSH
22042: CALL_OW 475
22046: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
22047: LD_ADDR_VAR 0 11
22051: PUSH
22052: LD_VAR 0 1
22056: PPUSH
22057: CALL_OW 476
22061: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
22062: LD_ADDR_VAR 0 12
22066: PUSH
22067: LD_VAR 0 1
22071: PPUSH
22072: CALL_OW 477
22076: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
22077: LD_ADDR_VAR 0 10
22081: PUSH
22082: LD_VAR 0 1
22086: PPUSH
22087: CALL_OW 478
22091: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
22092: LD_VAR 0 9
22096: NOT
22097: PUSH
22098: LD_VAR 0 11
22102: NOT
22103: OR
22104: PUSH
22105: LD_VAR 0 12
22109: NOT
22110: OR
22111: PUSH
22112: LD_VAR 0 10
22116: NOT
22117: OR
22118: IFFALSE 22153
// begin result := [ chassis , engine , control , weapon ] ;
22120: LD_ADDR_VAR 0 6
22124: PUSH
22125: LD_VAR 0 2
22129: PUSH
22130: LD_VAR 0 3
22134: PUSH
22135: LD_VAR 0 4
22139: PUSH
22140: LD_VAR 0 5
22144: PUSH
22145: EMPTY
22146: LIST
22147: LIST
22148: LIST
22149: LIST
22150: ST_TO_ADDR
// exit ;
22151: GO 22444
// end ; if not chassis in _chassis then
22153: LD_VAR 0 2
22157: PUSH
22158: LD_VAR 0 9
22162: IN
22163: NOT
22164: IFFALSE 22190
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
22166: LD_ADDR_VAR 0 2
22170: PUSH
22171: LD_VAR 0 9
22175: PUSH
22176: LD_INT 1
22178: PPUSH
22179: LD_VAR 0 9
22183: PPUSH
22184: CALL_OW 12
22188: ARRAY
22189: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
22190: LD_VAR 0 2
22194: PPUSH
22195: LD_VAR 0 3
22199: PPUSH
22200: CALL 22449 0 2
22204: NOT
22205: IFFALSE 22264
// repeat engine := _engine [ 1 ] ;
22207: LD_ADDR_VAR 0 3
22211: PUSH
22212: LD_VAR 0 11
22216: PUSH
22217: LD_INT 1
22219: ARRAY
22220: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
22221: LD_ADDR_VAR 0 11
22225: PUSH
22226: LD_VAR 0 11
22230: PPUSH
22231: LD_INT 1
22233: PPUSH
22234: CALL_OW 3
22238: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
22239: LD_VAR 0 2
22243: PPUSH
22244: LD_VAR 0 3
22248: PPUSH
22249: CALL 22449 0 2
22253: PUSH
22254: LD_VAR 0 11
22258: PUSH
22259: EMPTY
22260: EQUAL
22261: OR
22262: IFFALSE 22207
// if not control in _control then
22264: LD_VAR 0 4
22268: PUSH
22269: LD_VAR 0 12
22273: IN
22274: NOT
22275: IFFALSE 22301
// control := _control [ rand ( 1 , _control ) ] ;
22277: LD_ADDR_VAR 0 4
22281: PUSH
22282: LD_VAR 0 12
22286: PUSH
22287: LD_INT 1
22289: PPUSH
22290: LD_VAR 0 12
22294: PPUSH
22295: CALL_OW 12
22299: ARRAY
22300: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
22301: LD_VAR 0 2
22305: PPUSH
22306: LD_VAR 0 5
22310: PPUSH
22311: CALL 22669 0 2
22315: NOT
22316: IFFALSE 22375
// repeat weapon := _weapon [ 1 ] ;
22318: LD_ADDR_VAR 0 5
22322: PUSH
22323: LD_VAR 0 10
22327: PUSH
22328: LD_INT 1
22330: ARRAY
22331: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
22332: LD_ADDR_VAR 0 10
22336: PUSH
22337: LD_VAR 0 10
22341: PPUSH
22342: LD_INT 1
22344: PPUSH
22345: CALL_OW 3
22349: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
22350: LD_VAR 0 2
22354: PPUSH
22355: LD_VAR 0 5
22359: PPUSH
22360: CALL 22669 0 2
22364: PUSH
22365: LD_VAR 0 10
22369: PUSH
22370: EMPTY
22371: EQUAL
22372: OR
22373: IFFALSE 22318
// result := [ ] ;
22375: LD_ADDR_VAR 0 6
22379: PUSH
22380: EMPTY
22381: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
22382: LD_VAR 0 1
22386: PPUSH
22387: LD_VAR 0 2
22391: PPUSH
22392: LD_VAR 0 3
22396: PPUSH
22397: LD_VAR 0 4
22401: PPUSH
22402: LD_VAR 0 5
22406: PPUSH
22407: CALL_OW 448
22411: IFFALSE 22444
// result := [ chassis , engine , control , weapon ] ;
22413: LD_ADDR_VAR 0 6
22417: PUSH
22418: LD_VAR 0 2
22422: PUSH
22423: LD_VAR 0 3
22427: PUSH
22428: LD_VAR 0 4
22432: PUSH
22433: LD_VAR 0 5
22437: PUSH
22438: EMPTY
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: ST_TO_ADDR
// end ;
22444: LD_VAR 0 6
22448: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
22449: LD_INT 0
22451: PPUSH
// if not chassis or not engine then
22452: LD_VAR 0 1
22456: NOT
22457: PUSH
22458: LD_VAR 0 2
22462: NOT
22463: OR
22464: IFFALSE 22468
// exit ;
22466: GO 22664
// case engine of engine_solar :
22468: LD_VAR 0 2
22472: PUSH
22473: LD_INT 2
22475: DOUBLE
22476: EQUAL
22477: IFTRUE 22481
22479: GO 22519
22481: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
22482: LD_ADDR_VAR 0 3
22486: PUSH
22487: LD_INT 11
22489: PUSH
22490: LD_INT 12
22492: PUSH
22493: LD_INT 13
22495: PUSH
22496: LD_INT 14
22498: PUSH
22499: LD_INT 1
22501: PUSH
22502: LD_INT 2
22504: PUSH
22505: LD_INT 3
22507: PUSH
22508: EMPTY
22509: LIST
22510: LIST
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: ST_TO_ADDR
22517: GO 22648
22519: LD_INT 1
22521: DOUBLE
22522: EQUAL
22523: IFTRUE 22527
22525: GO 22589
22527: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
22528: LD_ADDR_VAR 0 3
22532: PUSH
22533: LD_INT 11
22535: PUSH
22536: LD_INT 12
22538: PUSH
22539: LD_INT 13
22541: PUSH
22542: LD_INT 14
22544: PUSH
22545: LD_INT 1
22547: PUSH
22548: LD_INT 2
22550: PUSH
22551: LD_INT 3
22553: PUSH
22554: LD_INT 4
22556: PUSH
22557: LD_INT 5
22559: PUSH
22560: LD_INT 21
22562: PUSH
22563: LD_INT 23
22565: PUSH
22566: LD_INT 22
22568: PUSH
22569: LD_INT 24
22571: PUSH
22572: EMPTY
22573: LIST
22574: LIST
22575: LIST
22576: LIST
22577: LIST
22578: LIST
22579: LIST
22580: LIST
22581: LIST
22582: LIST
22583: LIST
22584: LIST
22585: LIST
22586: ST_TO_ADDR
22587: GO 22648
22589: LD_INT 3
22591: DOUBLE
22592: EQUAL
22593: IFTRUE 22597
22595: GO 22647
22597: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
22598: LD_ADDR_VAR 0 3
22602: PUSH
22603: LD_INT 13
22605: PUSH
22606: LD_INT 14
22608: PUSH
22609: LD_INT 2
22611: PUSH
22612: LD_INT 3
22614: PUSH
22615: LD_INT 4
22617: PUSH
22618: LD_INT 5
22620: PUSH
22621: LD_INT 21
22623: PUSH
22624: LD_INT 22
22626: PUSH
22627: LD_INT 23
22629: PUSH
22630: LD_INT 24
22632: PUSH
22633: EMPTY
22634: LIST
22635: LIST
22636: LIST
22637: LIST
22638: LIST
22639: LIST
22640: LIST
22641: LIST
22642: LIST
22643: LIST
22644: ST_TO_ADDR
22645: GO 22648
22647: POP
// result := ( chassis in result ) ;
22648: LD_ADDR_VAR 0 3
22652: PUSH
22653: LD_VAR 0 1
22657: PUSH
22658: LD_VAR 0 3
22662: IN
22663: ST_TO_ADDR
// end ;
22664: LD_VAR 0 3
22668: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
22669: LD_INT 0
22671: PPUSH
// if not chassis or not weapon then
22672: LD_VAR 0 1
22676: NOT
22677: PUSH
22678: LD_VAR 0 2
22682: NOT
22683: OR
22684: IFFALSE 22688
// exit ;
22686: GO 23714
// case weapon of us_machine_gun :
22688: LD_VAR 0 2
22692: PUSH
22693: LD_INT 2
22695: DOUBLE
22696: EQUAL
22697: IFTRUE 22701
22699: GO 22731
22701: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
22702: LD_ADDR_VAR 0 3
22706: PUSH
22707: LD_INT 1
22709: PUSH
22710: LD_INT 2
22712: PUSH
22713: LD_INT 3
22715: PUSH
22716: LD_INT 4
22718: PUSH
22719: LD_INT 5
22721: PUSH
22722: EMPTY
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: ST_TO_ADDR
22729: GO 23698
22731: LD_INT 3
22733: DOUBLE
22734: EQUAL
22735: IFTRUE 22739
22737: GO 22769
22739: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
22740: LD_ADDR_VAR 0 3
22744: PUSH
22745: LD_INT 1
22747: PUSH
22748: LD_INT 2
22750: PUSH
22751: LD_INT 3
22753: PUSH
22754: LD_INT 4
22756: PUSH
22757: LD_INT 5
22759: PUSH
22760: EMPTY
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: ST_TO_ADDR
22767: GO 23698
22769: LD_INT 11
22771: DOUBLE
22772: EQUAL
22773: IFTRUE 22777
22775: GO 22807
22777: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
22778: LD_ADDR_VAR 0 3
22782: PUSH
22783: LD_INT 1
22785: PUSH
22786: LD_INT 2
22788: PUSH
22789: LD_INT 3
22791: PUSH
22792: LD_INT 4
22794: PUSH
22795: LD_INT 5
22797: PUSH
22798: EMPTY
22799: LIST
22800: LIST
22801: LIST
22802: LIST
22803: LIST
22804: ST_TO_ADDR
22805: GO 23698
22807: LD_INT 4
22809: DOUBLE
22810: EQUAL
22811: IFTRUE 22815
22813: GO 22841
22815: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
22816: LD_ADDR_VAR 0 3
22820: PUSH
22821: LD_INT 2
22823: PUSH
22824: LD_INT 3
22826: PUSH
22827: LD_INT 4
22829: PUSH
22830: LD_INT 5
22832: PUSH
22833: EMPTY
22834: LIST
22835: LIST
22836: LIST
22837: LIST
22838: ST_TO_ADDR
22839: GO 23698
22841: LD_INT 5
22843: DOUBLE
22844: EQUAL
22845: IFTRUE 22849
22847: GO 22875
22849: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
22850: LD_ADDR_VAR 0 3
22854: PUSH
22855: LD_INT 2
22857: PUSH
22858: LD_INT 3
22860: PUSH
22861: LD_INT 4
22863: PUSH
22864: LD_INT 5
22866: PUSH
22867: EMPTY
22868: LIST
22869: LIST
22870: LIST
22871: LIST
22872: ST_TO_ADDR
22873: GO 23698
22875: LD_INT 9
22877: DOUBLE
22878: EQUAL
22879: IFTRUE 22883
22881: GO 22909
22883: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
22884: LD_ADDR_VAR 0 3
22888: PUSH
22889: LD_INT 2
22891: PUSH
22892: LD_INT 3
22894: PUSH
22895: LD_INT 4
22897: PUSH
22898: LD_INT 5
22900: PUSH
22901: EMPTY
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: ST_TO_ADDR
22907: GO 23698
22909: LD_INT 7
22911: DOUBLE
22912: EQUAL
22913: IFTRUE 22917
22915: GO 22943
22917: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
22918: LD_ADDR_VAR 0 3
22922: PUSH
22923: LD_INT 2
22925: PUSH
22926: LD_INT 3
22928: PUSH
22929: LD_INT 4
22931: PUSH
22932: LD_INT 5
22934: PUSH
22935: EMPTY
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: ST_TO_ADDR
22941: GO 23698
22943: LD_INT 12
22945: DOUBLE
22946: EQUAL
22947: IFTRUE 22951
22949: GO 22977
22951: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
22952: LD_ADDR_VAR 0 3
22956: PUSH
22957: LD_INT 2
22959: PUSH
22960: LD_INT 3
22962: PUSH
22963: LD_INT 4
22965: PUSH
22966: LD_INT 5
22968: PUSH
22969: EMPTY
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: ST_TO_ADDR
22975: GO 23698
22977: LD_INT 13
22979: DOUBLE
22980: EQUAL
22981: IFTRUE 22985
22983: GO 23011
22985: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
22986: LD_ADDR_VAR 0 3
22990: PUSH
22991: LD_INT 2
22993: PUSH
22994: LD_INT 3
22996: PUSH
22997: LD_INT 4
22999: PUSH
23000: LD_INT 5
23002: PUSH
23003: EMPTY
23004: LIST
23005: LIST
23006: LIST
23007: LIST
23008: ST_TO_ADDR
23009: GO 23698
23011: LD_INT 14
23013: DOUBLE
23014: EQUAL
23015: IFTRUE 23019
23017: GO 23037
23019: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
23020: LD_ADDR_VAR 0 3
23024: PUSH
23025: LD_INT 4
23027: PUSH
23028: LD_INT 5
23030: PUSH
23031: EMPTY
23032: LIST
23033: LIST
23034: ST_TO_ADDR
23035: GO 23698
23037: LD_INT 6
23039: DOUBLE
23040: EQUAL
23041: IFTRUE 23045
23043: GO 23063
23045: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
23046: LD_ADDR_VAR 0 3
23050: PUSH
23051: LD_INT 4
23053: PUSH
23054: LD_INT 5
23056: PUSH
23057: EMPTY
23058: LIST
23059: LIST
23060: ST_TO_ADDR
23061: GO 23698
23063: LD_INT 10
23065: DOUBLE
23066: EQUAL
23067: IFTRUE 23071
23069: GO 23089
23071: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
23072: LD_ADDR_VAR 0 3
23076: PUSH
23077: LD_INT 4
23079: PUSH
23080: LD_INT 5
23082: PUSH
23083: EMPTY
23084: LIST
23085: LIST
23086: ST_TO_ADDR
23087: GO 23698
23089: LD_INT 22
23091: DOUBLE
23092: EQUAL
23093: IFTRUE 23097
23095: GO 23123
23097: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
23098: LD_ADDR_VAR 0 3
23102: PUSH
23103: LD_INT 11
23105: PUSH
23106: LD_INT 12
23108: PUSH
23109: LD_INT 13
23111: PUSH
23112: LD_INT 14
23114: PUSH
23115: EMPTY
23116: LIST
23117: LIST
23118: LIST
23119: LIST
23120: ST_TO_ADDR
23121: GO 23698
23123: LD_INT 23
23125: DOUBLE
23126: EQUAL
23127: IFTRUE 23131
23129: GO 23157
23131: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
23132: LD_ADDR_VAR 0 3
23136: PUSH
23137: LD_INT 11
23139: PUSH
23140: LD_INT 12
23142: PUSH
23143: LD_INT 13
23145: PUSH
23146: LD_INT 14
23148: PUSH
23149: EMPTY
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: ST_TO_ADDR
23155: GO 23698
23157: LD_INT 24
23159: DOUBLE
23160: EQUAL
23161: IFTRUE 23165
23163: GO 23191
23165: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
23166: LD_ADDR_VAR 0 3
23170: PUSH
23171: LD_INT 11
23173: PUSH
23174: LD_INT 12
23176: PUSH
23177: LD_INT 13
23179: PUSH
23180: LD_INT 14
23182: PUSH
23183: EMPTY
23184: LIST
23185: LIST
23186: LIST
23187: LIST
23188: ST_TO_ADDR
23189: GO 23698
23191: LD_INT 30
23193: DOUBLE
23194: EQUAL
23195: IFTRUE 23199
23197: GO 23225
23199: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
23200: LD_ADDR_VAR 0 3
23204: PUSH
23205: LD_INT 11
23207: PUSH
23208: LD_INT 12
23210: PUSH
23211: LD_INT 13
23213: PUSH
23214: LD_INT 14
23216: PUSH
23217: EMPTY
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: ST_TO_ADDR
23223: GO 23698
23225: LD_INT 25
23227: DOUBLE
23228: EQUAL
23229: IFTRUE 23233
23231: GO 23251
23233: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
23234: LD_ADDR_VAR 0 3
23238: PUSH
23239: LD_INT 13
23241: PUSH
23242: LD_INT 14
23244: PUSH
23245: EMPTY
23246: LIST
23247: LIST
23248: ST_TO_ADDR
23249: GO 23698
23251: LD_INT 27
23253: DOUBLE
23254: EQUAL
23255: IFTRUE 23259
23257: GO 23277
23259: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
23260: LD_ADDR_VAR 0 3
23264: PUSH
23265: LD_INT 13
23267: PUSH
23268: LD_INT 14
23270: PUSH
23271: EMPTY
23272: LIST
23273: LIST
23274: ST_TO_ADDR
23275: GO 23698
23277: LD_INT 28
23279: DOUBLE
23280: EQUAL
23281: IFTRUE 23285
23283: GO 23303
23285: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
23286: LD_ADDR_VAR 0 3
23290: PUSH
23291: LD_INT 13
23293: PUSH
23294: LD_INT 14
23296: PUSH
23297: EMPTY
23298: LIST
23299: LIST
23300: ST_TO_ADDR
23301: GO 23698
23303: LD_INT 29
23305: DOUBLE
23306: EQUAL
23307: IFTRUE 23311
23309: GO 23329
23311: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
23312: LD_ADDR_VAR 0 3
23316: PUSH
23317: LD_INT 13
23319: PUSH
23320: LD_INT 14
23322: PUSH
23323: EMPTY
23324: LIST
23325: LIST
23326: ST_TO_ADDR
23327: GO 23698
23329: LD_INT 31
23331: DOUBLE
23332: EQUAL
23333: IFTRUE 23337
23335: GO 23355
23337: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
23338: LD_ADDR_VAR 0 3
23342: PUSH
23343: LD_INT 13
23345: PUSH
23346: LD_INT 14
23348: PUSH
23349: EMPTY
23350: LIST
23351: LIST
23352: ST_TO_ADDR
23353: GO 23698
23355: LD_INT 26
23357: DOUBLE
23358: EQUAL
23359: IFTRUE 23363
23361: GO 23381
23363: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
23364: LD_ADDR_VAR 0 3
23368: PUSH
23369: LD_INT 13
23371: PUSH
23372: LD_INT 14
23374: PUSH
23375: EMPTY
23376: LIST
23377: LIST
23378: ST_TO_ADDR
23379: GO 23698
23381: LD_INT 42
23383: DOUBLE
23384: EQUAL
23385: IFTRUE 23389
23387: GO 23415
23389: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
23390: LD_ADDR_VAR 0 3
23394: PUSH
23395: LD_INT 21
23397: PUSH
23398: LD_INT 22
23400: PUSH
23401: LD_INT 23
23403: PUSH
23404: LD_INT 24
23406: PUSH
23407: EMPTY
23408: LIST
23409: LIST
23410: LIST
23411: LIST
23412: ST_TO_ADDR
23413: GO 23698
23415: LD_INT 43
23417: DOUBLE
23418: EQUAL
23419: IFTRUE 23423
23421: GO 23449
23423: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
23424: LD_ADDR_VAR 0 3
23428: PUSH
23429: LD_INT 21
23431: PUSH
23432: LD_INT 22
23434: PUSH
23435: LD_INT 23
23437: PUSH
23438: LD_INT 24
23440: PUSH
23441: EMPTY
23442: LIST
23443: LIST
23444: LIST
23445: LIST
23446: ST_TO_ADDR
23447: GO 23698
23449: LD_INT 44
23451: DOUBLE
23452: EQUAL
23453: IFTRUE 23457
23455: GO 23483
23457: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
23458: LD_ADDR_VAR 0 3
23462: PUSH
23463: LD_INT 21
23465: PUSH
23466: LD_INT 22
23468: PUSH
23469: LD_INT 23
23471: PUSH
23472: LD_INT 24
23474: PUSH
23475: EMPTY
23476: LIST
23477: LIST
23478: LIST
23479: LIST
23480: ST_TO_ADDR
23481: GO 23698
23483: LD_INT 45
23485: DOUBLE
23486: EQUAL
23487: IFTRUE 23491
23489: GO 23517
23491: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
23492: LD_ADDR_VAR 0 3
23496: PUSH
23497: LD_INT 21
23499: PUSH
23500: LD_INT 22
23502: PUSH
23503: LD_INT 23
23505: PUSH
23506: LD_INT 24
23508: PUSH
23509: EMPTY
23510: LIST
23511: LIST
23512: LIST
23513: LIST
23514: ST_TO_ADDR
23515: GO 23698
23517: LD_INT 49
23519: DOUBLE
23520: EQUAL
23521: IFTRUE 23525
23523: GO 23551
23525: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
23526: LD_ADDR_VAR 0 3
23530: PUSH
23531: LD_INT 21
23533: PUSH
23534: LD_INT 22
23536: PUSH
23537: LD_INT 23
23539: PUSH
23540: LD_INT 24
23542: PUSH
23543: EMPTY
23544: LIST
23545: LIST
23546: LIST
23547: LIST
23548: ST_TO_ADDR
23549: GO 23698
23551: LD_INT 51
23553: DOUBLE
23554: EQUAL
23555: IFTRUE 23559
23557: GO 23585
23559: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
23560: LD_ADDR_VAR 0 3
23564: PUSH
23565: LD_INT 21
23567: PUSH
23568: LD_INT 22
23570: PUSH
23571: LD_INT 23
23573: PUSH
23574: LD_INT 24
23576: PUSH
23577: EMPTY
23578: LIST
23579: LIST
23580: LIST
23581: LIST
23582: ST_TO_ADDR
23583: GO 23698
23585: LD_INT 52
23587: DOUBLE
23588: EQUAL
23589: IFTRUE 23593
23591: GO 23619
23593: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
23594: LD_ADDR_VAR 0 3
23598: PUSH
23599: LD_INT 21
23601: PUSH
23602: LD_INT 22
23604: PUSH
23605: LD_INT 23
23607: PUSH
23608: LD_INT 24
23610: PUSH
23611: EMPTY
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: ST_TO_ADDR
23617: GO 23698
23619: LD_INT 53
23621: DOUBLE
23622: EQUAL
23623: IFTRUE 23627
23625: GO 23645
23627: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
23628: LD_ADDR_VAR 0 3
23632: PUSH
23633: LD_INT 23
23635: PUSH
23636: LD_INT 24
23638: PUSH
23639: EMPTY
23640: LIST
23641: LIST
23642: ST_TO_ADDR
23643: GO 23698
23645: LD_INT 46
23647: DOUBLE
23648: EQUAL
23649: IFTRUE 23653
23651: GO 23671
23653: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
23654: LD_ADDR_VAR 0 3
23658: PUSH
23659: LD_INT 23
23661: PUSH
23662: LD_INT 24
23664: PUSH
23665: EMPTY
23666: LIST
23667: LIST
23668: ST_TO_ADDR
23669: GO 23698
23671: LD_INT 47
23673: DOUBLE
23674: EQUAL
23675: IFTRUE 23679
23677: GO 23697
23679: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
23680: LD_ADDR_VAR 0 3
23684: PUSH
23685: LD_INT 23
23687: PUSH
23688: LD_INT 24
23690: PUSH
23691: EMPTY
23692: LIST
23693: LIST
23694: ST_TO_ADDR
23695: GO 23698
23697: POP
// result := ( chassis in result ) ;
23698: LD_ADDR_VAR 0 3
23702: PUSH
23703: LD_VAR 0 1
23707: PUSH
23708: LD_VAR 0 3
23712: IN
23713: ST_TO_ADDR
// end ;
23714: LD_VAR 0 3
23718: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
23719: LD_INT 0
23721: PPUSH
23722: PPUSH
23723: PPUSH
23724: PPUSH
23725: PPUSH
23726: PPUSH
23727: PPUSH
// result := array ;
23728: LD_ADDR_VAR 0 5
23732: PUSH
23733: LD_VAR 0 1
23737: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
23738: LD_VAR 0 1
23742: NOT
23743: PUSH
23744: LD_VAR 0 2
23748: NOT
23749: OR
23750: PUSH
23751: LD_VAR 0 3
23755: NOT
23756: OR
23757: PUSH
23758: LD_VAR 0 2
23762: PUSH
23763: LD_VAR 0 1
23767: GREATER
23768: OR
23769: PUSH
23770: LD_VAR 0 3
23774: PUSH
23775: LD_VAR 0 1
23779: GREATER
23780: OR
23781: IFFALSE 23785
// exit ;
23783: GO 24081
// if direction then
23785: LD_VAR 0 4
23789: IFFALSE 23853
// begin d := 1 ;
23791: LD_ADDR_VAR 0 9
23795: PUSH
23796: LD_INT 1
23798: ST_TO_ADDR
// if i_from > i_to then
23799: LD_VAR 0 2
23803: PUSH
23804: LD_VAR 0 3
23808: GREATER
23809: IFFALSE 23835
// length := ( array - i_from ) + i_to else
23811: LD_ADDR_VAR 0 11
23815: PUSH
23816: LD_VAR 0 1
23820: PUSH
23821: LD_VAR 0 2
23825: MINUS
23826: PUSH
23827: LD_VAR 0 3
23831: PLUS
23832: ST_TO_ADDR
23833: GO 23851
// length := i_to - i_from ;
23835: LD_ADDR_VAR 0 11
23839: PUSH
23840: LD_VAR 0 3
23844: PUSH
23845: LD_VAR 0 2
23849: MINUS
23850: ST_TO_ADDR
// end else
23851: GO 23914
// begin d := - 1 ;
23853: LD_ADDR_VAR 0 9
23857: PUSH
23858: LD_INT 1
23860: NEG
23861: ST_TO_ADDR
// if i_from > i_to then
23862: LD_VAR 0 2
23866: PUSH
23867: LD_VAR 0 3
23871: GREATER
23872: IFFALSE 23892
// length := i_from - i_to else
23874: LD_ADDR_VAR 0 11
23878: PUSH
23879: LD_VAR 0 2
23883: PUSH
23884: LD_VAR 0 3
23888: MINUS
23889: ST_TO_ADDR
23890: GO 23914
// length := ( array - i_to ) + i_from ;
23892: LD_ADDR_VAR 0 11
23896: PUSH
23897: LD_VAR 0 1
23901: PUSH
23902: LD_VAR 0 3
23906: MINUS
23907: PUSH
23908: LD_VAR 0 2
23912: PLUS
23913: ST_TO_ADDR
// end ; if not length then
23914: LD_VAR 0 11
23918: NOT
23919: IFFALSE 23923
// exit ;
23921: GO 24081
// tmp := array ;
23923: LD_ADDR_VAR 0 10
23927: PUSH
23928: LD_VAR 0 1
23932: ST_TO_ADDR
// for i = 1 to length do
23933: LD_ADDR_VAR 0 6
23937: PUSH
23938: DOUBLE
23939: LD_INT 1
23941: DEC
23942: ST_TO_ADDR
23943: LD_VAR 0 11
23947: PUSH
23948: FOR_TO
23949: IFFALSE 24069
// begin for j = 1 to array do
23951: LD_ADDR_VAR 0 7
23955: PUSH
23956: DOUBLE
23957: LD_INT 1
23959: DEC
23960: ST_TO_ADDR
23961: LD_VAR 0 1
23965: PUSH
23966: FOR_TO
23967: IFFALSE 24055
// begin k := j + d ;
23969: LD_ADDR_VAR 0 8
23973: PUSH
23974: LD_VAR 0 7
23978: PUSH
23979: LD_VAR 0 9
23983: PLUS
23984: ST_TO_ADDR
// if k > array then
23985: LD_VAR 0 8
23989: PUSH
23990: LD_VAR 0 1
23994: GREATER
23995: IFFALSE 24005
// k := 1 ;
23997: LD_ADDR_VAR 0 8
24001: PUSH
24002: LD_INT 1
24004: ST_TO_ADDR
// if not k then
24005: LD_VAR 0 8
24009: NOT
24010: IFFALSE 24022
// k := array ;
24012: LD_ADDR_VAR 0 8
24016: PUSH
24017: LD_VAR 0 1
24021: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
24022: LD_ADDR_VAR 0 10
24026: PUSH
24027: LD_VAR 0 10
24031: PPUSH
24032: LD_VAR 0 8
24036: PPUSH
24037: LD_VAR 0 1
24041: PUSH
24042: LD_VAR 0 7
24046: ARRAY
24047: PPUSH
24048: CALL_OW 1
24052: ST_TO_ADDR
// end ;
24053: GO 23966
24055: POP
24056: POP
// array := tmp ;
24057: LD_ADDR_VAR 0 1
24061: PUSH
24062: LD_VAR 0 10
24066: ST_TO_ADDR
// end ;
24067: GO 23948
24069: POP
24070: POP
// result := array ;
24071: LD_ADDR_VAR 0 5
24075: PUSH
24076: LD_VAR 0 1
24080: ST_TO_ADDR
// end ;
24081: LD_VAR 0 5
24085: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
24086: LD_INT 0
24088: PPUSH
24089: PPUSH
// result := 0 ;
24090: LD_ADDR_VAR 0 3
24094: PUSH
24095: LD_INT 0
24097: ST_TO_ADDR
// if not array or not value in array then
24098: LD_VAR 0 1
24102: NOT
24103: PUSH
24104: LD_VAR 0 2
24108: PUSH
24109: LD_VAR 0 1
24113: IN
24114: NOT
24115: OR
24116: IFFALSE 24120
// exit ;
24118: GO 24174
// for i = 1 to array do
24120: LD_ADDR_VAR 0 4
24124: PUSH
24125: DOUBLE
24126: LD_INT 1
24128: DEC
24129: ST_TO_ADDR
24130: LD_VAR 0 1
24134: PUSH
24135: FOR_TO
24136: IFFALSE 24172
// if value = array [ i ] then
24138: LD_VAR 0 2
24142: PUSH
24143: LD_VAR 0 1
24147: PUSH
24148: LD_VAR 0 4
24152: ARRAY
24153: EQUAL
24154: IFFALSE 24170
// begin result := i ;
24156: LD_ADDR_VAR 0 3
24160: PUSH
24161: LD_VAR 0 4
24165: ST_TO_ADDR
// exit ;
24166: POP
24167: POP
24168: GO 24174
// end ;
24170: GO 24135
24172: POP
24173: POP
// end ;
24174: LD_VAR 0 3
24178: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
24179: LD_INT 0
24181: PPUSH
// vc_chassis := chassis ;
24182: LD_ADDR_OWVAR 37
24186: PUSH
24187: LD_VAR 0 1
24191: ST_TO_ADDR
// vc_engine := engine ;
24192: LD_ADDR_OWVAR 39
24196: PUSH
24197: LD_VAR 0 2
24201: ST_TO_ADDR
// vc_control := control ;
24202: LD_ADDR_OWVAR 38
24206: PUSH
24207: LD_VAR 0 3
24211: ST_TO_ADDR
// vc_weapon := weapon ;
24212: LD_ADDR_OWVAR 40
24216: PUSH
24217: LD_VAR 0 4
24221: ST_TO_ADDR
// vc_fuel_battery := fuel ;
24222: LD_ADDR_OWVAR 41
24226: PUSH
24227: LD_VAR 0 5
24231: ST_TO_ADDR
// end ;
24232: LD_VAR 0 6
24236: RET
// export function WantPlant ( unit ) ; var task ; begin
24237: LD_INT 0
24239: PPUSH
24240: PPUSH
// result := false ;
24241: LD_ADDR_VAR 0 2
24245: PUSH
24246: LD_INT 0
24248: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
24249: LD_ADDR_VAR 0 3
24253: PUSH
24254: LD_VAR 0 1
24258: PPUSH
24259: CALL_OW 437
24263: ST_TO_ADDR
// if task then
24264: LD_VAR 0 3
24268: IFFALSE 24296
// if task [ 1 ] [ 1 ] = p then
24270: LD_VAR 0 3
24274: PUSH
24275: LD_INT 1
24277: ARRAY
24278: PUSH
24279: LD_INT 1
24281: ARRAY
24282: PUSH
24283: LD_STRING p
24285: EQUAL
24286: IFFALSE 24296
// result := true ;
24288: LD_ADDR_VAR 0 2
24292: PUSH
24293: LD_INT 1
24295: ST_TO_ADDR
// end ;
24296: LD_VAR 0 2
24300: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
24301: LD_INT 0
24303: PPUSH
24304: PPUSH
24305: PPUSH
24306: PPUSH
// if pos < 1 then
24307: LD_VAR 0 2
24311: PUSH
24312: LD_INT 1
24314: LESS
24315: IFFALSE 24319
// exit ;
24317: GO 24622
// if pos = 1 then
24319: LD_VAR 0 2
24323: PUSH
24324: LD_INT 1
24326: EQUAL
24327: IFFALSE 24360
// result := Replace ( arr , pos [ 1 ] , value ) else
24329: LD_ADDR_VAR 0 4
24333: PUSH
24334: LD_VAR 0 1
24338: PPUSH
24339: LD_VAR 0 2
24343: PUSH
24344: LD_INT 1
24346: ARRAY
24347: PPUSH
24348: LD_VAR 0 3
24352: PPUSH
24353: CALL_OW 1
24357: ST_TO_ADDR
24358: GO 24622
// begin tmp := arr ;
24360: LD_ADDR_VAR 0 6
24364: PUSH
24365: LD_VAR 0 1
24369: ST_TO_ADDR
// s_arr := [ tmp ] ;
24370: LD_ADDR_VAR 0 7
24374: PUSH
24375: LD_VAR 0 6
24379: PUSH
24380: EMPTY
24381: LIST
24382: ST_TO_ADDR
// for i = 1 to pos - 1 do
24383: LD_ADDR_VAR 0 5
24387: PUSH
24388: DOUBLE
24389: LD_INT 1
24391: DEC
24392: ST_TO_ADDR
24393: LD_VAR 0 2
24397: PUSH
24398: LD_INT 1
24400: MINUS
24401: PUSH
24402: FOR_TO
24403: IFFALSE 24448
// begin tmp := tmp [ pos [ i ] ] ;
24405: LD_ADDR_VAR 0 6
24409: PUSH
24410: LD_VAR 0 6
24414: PUSH
24415: LD_VAR 0 2
24419: PUSH
24420: LD_VAR 0 5
24424: ARRAY
24425: ARRAY
24426: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
24427: LD_ADDR_VAR 0 7
24431: PUSH
24432: LD_VAR 0 7
24436: PUSH
24437: LD_VAR 0 6
24441: PUSH
24442: EMPTY
24443: LIST
24444: ADD
24445: ST_TO_ADDR
// end ;
24446: GO 24402
24448: POP
24449: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
24450: LD_ADDR_VAR 0 6
24454: PUSH
24455: LD_VAR 0 6
24459: PPUSH
24460: LD_VAR 0 2
24464: PUSH
24465: LD_VAR 0 2
24469: ARRAY
24470: PPUSH
24471: LD_VAR 0 3
24475: PPUSH
24476: CALL_OW 1
24480: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
24481: LD_ADDR_VAR 0 7
24485: PUSH
24486: LD_VAR 0 7
24490: PPUSH
24491: LD_VAR 0 7
24495: PPUSH
24496: LD_VAR 0 6
24500: PPUSH
24501: CALL_OW 1
24505: ST_TO_ADDR
// for i = s_arr downto 2 do
24506: LD_ADDR_VAR 0 5
24510: PUSH
24511: DOUBLE
24512: LD_VAR 0 7
24516: INC
24517: ST_TO_ADDR
24518: LD_INT 2
24520: PUSH
24521: FOR_DOWNTO
24522: IFFALSE 24606
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
24524: LD_ADDR_VAR 0 6
24528: PUSH
24529: LD_VAR 0 7
24533: PUSH
24534: LD_VAR 0 5
24538: PUSH
24539: LD_INT 1
24541: MINUS
24542: ARRAY
24543: PPUSH
24544: LD_VAR 0 2
24548: PUSH
24549: LD_VAR 0 5
24553: PUSH
24554: LD_INT 1
24556: MINUS
24557: ARRAY
24558: PPUSH
24559: LD_VAR 0 7
24563: PUSH
24564: LD_VAR 0 5
24568: ARRAY
24569: PPUSH
24570: CALL_OW 1
24574: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
24575: LD_ADDR_VAR 0 7
24579: PUSH
24580: LD_VAR 0 7
24584: PPUSH
24585: LD_VAR 0 5
24589: PUSH
24590: LD_INT 1
24592: MINUS
24593: PPUSH
24594: LD_VAR 0 6
24598: PPUSH
24599: CALL_OW 1
24603: ST_TO_ADDR
// end ;
24604: GO 24521
24606: POP
24607: POP
// result := s_arr [ 1 ] ;
24608: LD_ADDR_VAR 0 4
24612: PUSH
24613: LD_VAR 0 7
24617: PUSH
24618: LD_INT 1
24620: ARRAY
24621: ST_TO_ADDR
// end ; end ;
24622: LD_VAR 0 4
24626: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
24627: LD_INT 0
24629: PPUSH
24630: PPUSH
// if not list then
24631: LD_VAR 0 1
24635: NOT
24636: IFFALSE 24640
// exit ;
24638: GO 24731
// i := list [ pos1 ] ;
24640: LD_ADDR_VAR 0 5
24644: PUSH
24645: LD_VAR 0 1
24649: PUSH
24650: LD_VAR 0 2
24654: ARRAY
24655: ST_TO_ADDR
// if not i then
24656: LD_VAR 0 5
24660: NOT
24661: IFFALSE 24665
// exit ;
24663: GO 24731
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
24665: LD_ADDR_VAR 0 1
24669: PUSH
24670: LD_VAR 0 1
24674: PPUSH
24675: LD_VAR 0 2
24679: PPUSH
24680: LD_VAR 0 1
24684: PUSH
24685: LD_VAR 0 3
24689: ARRAY
24690: PPUSH
24691: CALL_OW 1
24695: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
24696: LD_ADDR_VAR 0 1
24700: PUSH
24701: LD_VAR 0 1
24705: PPUSH
24706: LD_VAR 0 3
24710: PPUSH
24711: LD_VAR 0 5
24715: PPUSH
24716: CALL_OW 1
24720: ST_TO_ADDR
// result := list ;
24721: LD_ADDR_VAR 0 4
24725: PUSH
24726: LD_VAR 0 1
24730: ST_TO_ADDR
// end ;
24731: LD_VAR 0 4
24735: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
24736: LD_INT 0
24738: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
24739: LD_ADDR_VAR 0 5
24743: PUSH
24744: LD_VAR 0 1
24748: PPUSH
24749: CALL_OW 250
24753: PPUSH
24754: LD_VAR 0 1
24758: PPUSH
24759: CALL_OW 251
24763: PPUSH
24764: LD_VAR 0 2
24768: PPUSH
24769: LD_VAR 0 3
24773: PPUSH
24774: LD_VAR 0 4
24778: PPUSH
24779: CALL 24789 0 5
24783: ST_TO_ADDR
// end ;
24784: LD_VAR 0 5
24788: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
24789: LD_INT 0
24791: PPUSH
24792: PPUSH
24793: PPUSH
24794: PPUSH
// if not list then
24795: LD_VAR 0 3
24799: NOT
24800: IFFALSE 24804
// exit ;
24802: GO 25192
// result := [ ] ;
24804: LD_ADDR_VAR 0 6
24808: PUSH
24809: EMPTY
24810: ST_TO_ADDR
// for i in list do
24811: LD_ADDR_VAR 0 7
24815: PUSH
24816: LD_VAR 0 3
24820: PUSH
24821: FOR_IN
24822: IFFALSE 25024
// begin tmp := GetDistUnitXY ( i , x , y ) ;
24824: LD_ADDR_VAR 0 9
24828: PUSH
24829: LD_VAR 0 7
24833: PPUSH
24834: LD_VAR 0 1
24838: PPUSH
24839: LD_VAR 0 2
24843: PPUSH
24844: CALL_OW 297
24848: ST_TO_ADDR
// if not result then
24849: LD_VAR 0 6
24853: NOT
24854: IFFALSE 24880
// result := [ [ i , tmp ] ] else
24856: LD_ADDR_VAR 0 6
24860: PUSH
24861: LD_VAR 0 7
24865: PUSH
24866: LD_VAR 0 9
24870: PUSH
24871: EMPTY
24872: LIST
24873: LIST
24874: PUSH
24875: EMPTY
24876: LIST
24877: ST_TO_ADDR
24878: GO 25022
// begin if result [ result ] [ 2 ] < tmp then
24880: LD_VAR 0 6
24884: PUSH
24885: LD_VAR 0 6
24889: ARRAY
24890: PUSH
24891: LD_INT 2
24893: ARRAY
24894: PUSH
24895: LD_VAR 0 9
24899: LESS
24900: IFFALSE 24942
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
24902: LD_ADDR_VAR 0 6
24906: PUSH
24907: LD_VAR 0 6
24911: PPUSH
24912: LD_VAR 0 6
24916: PUSH
24917: LD_INT 1
24919: PLUS
24920: PPUSH
24921: LD_VAR 0 7
24925: PUSH
24926: LD_VAR 0 9
24930: PUSH
24931: EMPTY
24932: LIST
24933: LIST
24934: PPUSH
24935: CALL_OW 2
24939: ST_TO_ADDR
24940: GO 25022
// for j = 1 to result do
24942: LD_ADDR_VAR 0 8
24946: PUSH
24947: DOUBLE
24948: LD_INT 1
24950: DEC
24951: ST_TO_ADDR
24952: LD_VAR 0 6
24956: PUSH
24957: FOR_TO
24958: IFFALSE 25020
// begin if tmp < result [ j ] [ 2 ] then
24960: LD_VAR 0 9
24964: PUSH
24965: LD_VAR 0 6
24969: PUSH
24970: LD_VAR 0 8
24974: ARRAY
24975: PUSH
24976: LD_INT 2
24978: ARRAY
24979: LESS
24980: IFFALSE 25018
// begin result := Insert ( result , j , [ i , tmp ] ) ;
24982: LD_ADDR_VAR 0 6
24986: PUSH
24987: LD_VAR 0 6
24991: PPUSH
24992: LD_VAR 0 8
24996: PPUSH
24997: LD_VAR 0 7
25001: PUSH
25002: LD_VAR 0 9
25006: PUSH
25007: EMPTY
25008: LIST
25009: LIST
25010: PPUSH
25011: CALL_OW 2
25015: ST_TO_ADDR
// break ;
25016: GO 25020
// end ; end ;
25018: GO 24957
25020: POP
25021: POP
// end ; end ;
25022: GO 24821
25024: POP
25025: POP
// if result and not asc then
25026: LD_VAR 0 6
25030: PUSH
25031: LD_VAR 0 4
25035: NOT
25036: AND
25037: IFFALSE 25112
// begin tmp := result ;
25039: LD_ADDR_VAR 0 9
25043: PUSH
25044: LD_VAR 0 6
25048: ST_TO_ADDR
// for i = tmp downto 1 do
25049: LD_ADDR_VAR 0 7
25053: PUSH
25054: DOUBLE
25055: LD_VAR 0 9
25059: INC
25060: ST_TO_ADDR
25061: LD_INT 1
25063: PUSH
25064: FOR_DOWNTO
25065: IFFALSE 25110
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
25067: LD_ADDR_VAR 0 6
25071: PUSH
25072: LD_VAR 0 6
25076: PPUSH
25077: LD_VAR 0 9
25081: PUSH
25082: LD_VAR 0 7
25086: MINUS
25087: PUSH
25088: LD_INT 1
25090: PLUS
25091: PPUSH
25092: LD_VAR 0 9
25096: PUSH
25097: LD_VAR 0 7
25101: ARRAY
25102: PPUSH
25103: CALL_OW 1
25107: ST_TO_ADDR
25108: GO 25064
25110: POP
25111: POP
// end ; tmp := [ ] ;
25112: LD_ADDR_VAR 0 9
25116: PUSH
25117: EMPTY
25118: ST_TO_ADDR
// if mode then
25119: LD_VAR 0 5
25123: IFFALSE 25192
// begin for i = 1 to result do
25125: LD_ADDR_VAR 0 7
25129: PUSH
25130: DOUBLE
25131: LD_INT 1
25133: DEC
25134: ST_TO_ADDR
25135: LD_VAR 0 6
25139: PUSH
25140: FOR_TO
25141: IFFALSE 25180
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
25143: LD_ADDR_VAR 0 9
25147: PUSH
25148: LD_VAR 0 9
25152: PPUSH
25153: LD_VAR 0 7
25157: PPUSH
25158: LD_VAR 0 6
25162: PUSH
25163: LD_VAR 0 7
25167: ARRAY
25168: PUSH
25169: LD_INT 1
25171: ARRAY
25172: PPUSH
25173: CALL_OW 1
25177: ST_TO_ADDR
25178: GO 25140
25180: POP
25181: POP
// result := tmp ;
25182: LD_ADDR_VAR 0 6
25186: PUSH
25187: LD_VAR 0 9
25191: ST_TO_ADDR
// end ; end ;
25192: LD_VAR 0 6
25196: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
25197: LD_INT 0
25199: PPUSH
25200: PPUSH
25201: PPUSH
25202: PPUSH
25203: PPUSH
25204: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
25205: LD_ADDR_VAR 0 5
25209: PUSH
25210: LD_INT 0
25212: PUSH
25213: LD_INT 0
25215: PUSH
25216: LD_INT 0
25218: PUSH
25219: EMPTY
25220: PUSH
25221: EMPTY
25222: LIST
25223: LIST
25224: LIST
25225: LIST
25226: ST_TO_ADDR
// if not x or not y then
25227: LD_VAR 0 2
25231: NOT
25232: PUSH
25233: LD_VAR 0 3
25237: NOT
25238: OR
25239: IFFALSE 25243
// exit ;
25241: GO 26889
// if not range then
25243: LD_VAR 0 4
25247: NOT
25248: IFFALSE 25258
// range := 10 ;
25250: LD_ADDR_VAR 0 4
25254: PUSH
25255: LD_INT 10
25257: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25258: LD_ADDR_VAR 0 8
25262: PUSH
25263: LD_INT 81
25265: PUSH
25266: LD_VAR 0 1
25270: PUSH
25271: EMPTY
25272: LIST
25273: LIST
25274: PUSH
25275: LD_INT 92
25277: PUSH
25278: LD_VAR 0 2
25282: PUSH
25283: LD_VAR 0 3
25287: PUSH
25288: LD_VAR 0 4
25292: PUSH
25293: EMPTY
25294: LIST
25295: LIST
25296: LIST
25297: LIST
25298: PUSH
25299: LD_INT 3
25301: PUSH
25302: LD_INT 21
25304: PUSH
25305: LD_INT 3
25307: PUSH
25308: EMPTY
25309: LIST
25310: LIST
25311: PUSH
25312: EMPTY
25313: LIST
25314: LIST
25315: PUSH
25316: EMPTY
25317: LIST
25318: LIST
25319: LIST
25320: PPUSH
25321: CALL_OW 69
25325: ST_TO_ADDR
// if not tmp then
25326: LD_VAR 0 8
25330: NOT
25331: IFFALSE 25335
// exit ;
25333: GO 26889
// for i in tmp do
25335: LD_ADDR_VAR 0 6
25339: PUSH
25340: LD_VAR 0 8
25344: PUSH
25345: FOR_IN
25346: IFFALSE 26864
// begin points := [ 0 , 0 , 0 ] ;
25348: LD_ADDR_VAR 0 9
25352: PUSH
25353: LD_INT 0
25355: PUSH
25356: LD_INT 0
25358: PUSH
25359: LD_INT 0
25361: PUSH
25362: EMPTY
25363: LIST
25364: LIST
25365: LIST
25366: ST_TO_ADDR
// bpoints := 1 ;
25367: LD_ADDR_VAR 0 10
25371: PUSH
25372: LD_INT 1
25374: ST_TO_ADDR
// case GetType ( i ) of unit_human :
25375: LD_VAR 0 6
25379: PPUSH
25380: CALL_OW 247
25384: PUSH
25385: LD_INT 1
25387: DOUBLE
25388: EQUAL
25389: IFTRUE 25393
25391: GO 25971
25393: POP
// begin if GetClass ( i ) = 1 then
25394: LD_VAR 0 6
25398: PPUSH
25399: CALL_OW 257
25403: PUSH
25404: LD_INT 1
25406: EQUAL
25407: IFFALSE 25428
// points := [ 10 , 5 , 3 ] ;
25409: LD_ADDR_VAR 0 9
25413: PUSH
25414: LD_INT 10
25416: PUSH
25417: LD_INT 5
25419: PUSH
25420: LD_INT 3
25422: PUSH
25423: EMPTY
25424: LIST
25425: LIST
25426: LIST
25427: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
25428: LD_VAR 0 6
25432: PPUSH
25433: CALL_OW 257
25437: PUSH
25438: LD_INT 2
25440: PUSH
25441: LD_INT 3
25443: PUSH
25444: LD_INT 4
25446: PUSH
25447: EMPTY
25448: LIST
25449: LIST
25450: LIST
25451: IN
25452: IFFALSE 25473
// points := [ 3 , 2 , 1 ] ;
25454: LD_ADDR_VAR 0 9
25458: PUSH
25459: LD_INT 3
25461: PUSH
25462: LD_INT 2
25464: PUSH
25465: LD_INT 1
25467: PUSH
25468: EMPTY
25469: LIST
25470: LIST
25471: LIST
25472: ST_TO_ADDR
// if GetClass ( i ) = 5 then
25473: LD_VAR 0 6
25477: PPUSH
25478: CALL_OW 257
25482: PUSH
25483: LD_INT 5
25485: EQUAL
25486: IFFALSE 25507
// points := [ 130 , 5 , 2 ] ;
25488: LD_ADDR_VAR 0 9
25492: PUSH
25493: LD_INT 130
25495: PUSH
25496: LD_INT 5
25498: PUSH
25499: LD_INT 2
25501: PUSH
25502: EMPTY
25503: LIST
25504: LIST
25505: LIST
25506: ST_TO_ADDR
// if GetClass ( i ) = 8 then
25507: LD_VAR 0 6
25511: PPUSH
25512: CALL_OW 257
25516: PUSH
25517: LD_INT 8
25519: EQUAL
25520: IFFALSE 25541
// points := [ 35 , 35 , 30 ] ;
25522: LD_ADDR_VAR 0 9
25526: PUSH
25527: LD_INT 35
25529: PUSH
25530: LD_INT 35
25532: PUSH
25533: LD_INT 30
25535: PUSH
25536: EMPTY
25537: LIST
25538: LIST
25539: LIST
25540: ST_TO_ADDR
// if GetClass ( i ) = 9 then
25541: LD_VAR 0 6
25545: PPUSH
25546: CALL_OW 257
25550: PUSH
25551: LD_INT 9
25553: EQUAL
25554: IFFALSE 25575
// points := [ 20 , 55 , 40 ] ;
25556: LD_ADDR_VAR 0 9
25560: PUSH
25561: LD_INT 20
25563: PUSH
25564: LD_INT 55
25566: PUSH
25567: LD_INT 40
25569: PUSH
25570: EMPTY
25571: LIST
25572: LIST
25573: LIST
25574: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
25575: LD_VAR 0 6
25579: PPUSH
25580: CALL_OW 257
25584: PUSH
25585: LD_INT 12
25587: PUSH
25588: LD_INT 16
25590: PUSH
25591: EMPTY
25592: LIST
25593: LIST
25594: IN
25595: IFFALSE 25616
// points := [ 5 , 3 , 2 ] ;
25597: LD_ADDR_VAR 0 9
25601: PUSH
25602: LD_INT 5
25604: PUSH
25605: LD_INT 3
25607: PUSH
25608: LD_INT 2
25610: PUSH
25611: EMPTY
25612: LIST
25613: LIST
25614: LIST
25615: ST_TO_ADDR
// if GetClass ( i ) = 17 then
25616: LD_VAR 0 6
25620: PPUSH
25621: CALL_OW 257
25625: PUSH
25626: LD_INT 17
25628: EQUAL
25629: IFFALSE 25650
// points := [ 100 , 50 , 75 ] ;
25631: LD_ADDR_VAR 0 9
25635: PUSH
25636: LD_INT 100
25638: PUSH
25639: LD_INT 50
25641: PUSH
25642: LD_INT 75
25644: PUSH
25645: EMPTY
25646: LIST
25647: LIST
25648: LIST
25649: ST_TO_ADDR
// if GetClass ( i ) = 15 then
25650: LD_VAR 0 6
25654: PPUSH
25655: CALL_OW 257
25659: PUSH
25660: LD_INT 15
25662: EQUAL
25663: IFFALSE 25684
// points := [ 10 , 5 , 3 ] ;
25665: LD_ADDR_VAR 0 9
25669: PUSH
25670: LD_INT 10
25672: PUSH
25673: LD_INT 5
25675: PUSH
25676: LD_INT 3
25678: PUSH
25679: EMPTY
25680: LIST
25681: LIST
25682: LIST
25683: ST_TO_ADDR
// if GetClass ( i ) = 14 then
25684: LD_VAR 0 6
25688: PPUSH
25689: CALL_OW 257
25693: PUSH
25694: LD_INT 14
25696: EQUAL
25697: IFFALSE 25718
// points := [ 10 , 0 , 0 ] ;
25699: LD_ADDR_VAR 0 9
25703: PUSH
25704: LD_INT 10
25706: PUSH
25707: LD_INT 0
25709: PUSH
25710: LD_INT 0
25712: PUSH
25713: EMPTY
25714: LIST
25715: LIST
25716: LIST
25717: ST_TO_ADDR
// if GetClass ( i ) = 11 then
25718: LD_VAR 0 6
25722: PPUSH
25723: CALL_OW 257
25727: PUSH
25728: LD_INT 11
25730: EQUAL
25731: IFFALSE 25752
// points := [ 30 , 10 , 5 ] ;
25733: LD_ADDR_VAR 0 9
25737: PUSH
25738: LD_INT 30
25740: PUSH
25741: LD_INT 10
25743: PUSH
25744: LD_INT 5
25746: PUSH
25747: EMPTY
25748: LIST
25749: LIST
25750: LIST
25751: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
25752: LD_VAR 0 1
25756: PPUSH
25757: LD_INT 5
25759: PPUSH
25760: CALL_OW 321
25764: PUSH
25765: LD_INT 2
25767: EQUAL
25768: IFFALSE 25785
// bpoints := bpoints * 1.8 ;
25770: LD_ADDR_VAR 0 10
25774: PUSH
25775: LD_VAR 0 10
25779: PUSH
25780: LD_REAL  1.80000000000000E+0000
25783: MUL
25784: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
25785: LD_VAR 0 6
25789: PPUSH
25790: CALL_OW 257
25794: PUSH
25795: LD_INT 1
25797: PUSH
25798: LD_INT 2
25800: PUSH
25801: LD_INT 3
25803: PUSH
25804: LD_INT 4
25806: PUSH
25807: EMPTY
25808: LIST
25809: LIST
25810: LIST
25811: LIST
25812: IN
25813: PUSH
25814: LD_VAR 0 1
25818: PPUSH
25819: LD_INT 51
25821: PPUSH
25822: CALL_OW 321
25826: PUSH
25827: LD_INT 2
25829: EQUAL
25830: AND
25831: IFFALSE 25848
// bpoints := bpoints * 1.2 ;
25833: LD_ADDR_VAR 0 10
25837: PUSH
25838: LD_VAR 0 10
25842: PUSH
25843: LD_REAL  1.20000000000000E+0000
25846: MUL
25847: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
25848: LD_VAR 0 6
25852: PPUSH
25853: CALL_OW 257
25857: PUSH
25858: LD_INT 5
25860: PUSH
25861: LD_INT 7
25863: PUSH
25864: LD_INT 9
25866: PUSH
25867: EMPTY
25868: LIST
25869: LIST
25870: LIST
25871: IN
25872: PUSH
25873: LD_VAR 0 1
25877: PPUSH
25878: LD_INT 52
25880: PPUSH
25881: CALL_OW 321
25885: PUSH
25886: LD_INT 2
25888: EQUAL
25889: AND
25890: IFFALSE 25907
// bpoints := bpoints * 1.5 ;
25892: LD_ADDR_VAR 0 10
25896: PUSH
25897: LD_VAR 0 10
25901: PUSH
25902: LD_REAL  1.50000000000000E+0000
25905: MUL
25906: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
25907: LD_VAR 0 1
25911: PPUSH
25912: LD_INT 66
25914: PPUSH
25915: CALL_OW 321
25919: PUSH
25920: LD_INT 2
25922: EQUAL
25923: IFFALSE 25940
// bpoints := bpoints * 1.1 ;
25925: LD_ADDR_VAR 0 10
25929: PUSH
25930: LD_VAR 0 10
25934: PUSH
25935: LD_REAL  1.10000000000000E+0000
25938: MUL
25939: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
25940: LD_ADDR_VAR 0 10
25944: PUSH
25945: LD_VAR 0 10
25949: PUSH
25950: LD_VAR 0 6
25954: PPUSH
25955: LD_INT 1
25957: PPUSH
25958: CALL_OW 259
25962: PUSH
25963: LD_REAL  1.15000000000000E+0000
25966: MUL
25967: MUL
25968: ST_TO_ADDR
// end ; unit_vehicle :
25969: GO 26793
25971: LD_INT 2
25973: DOUBLE
25974: EQUAL
25975: IFTRUE 25979
25977: GO 26781
25979: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
25980: LD_VAR 0 6
25984: PPUSH
25985: CALL_OW 264
25989: PUSH
25990: LD_INT 2
25992: PUSH
25993: LD_INT 42
25995: PUSH
25996: LD_INT 24
25998: PUSH
25999: EMPTY
26000: LIST
26001: LIST
26002: LIST
26003: IN
26004: IFFALSE 26025
// points := [ 25 , 5 , 3 ] ;
26006: LD_ADDR_VAR 0 9
26010: PUSH
26011: LD_INT 25
26013: PUSH
26014: LD_INT 5
26016: PUSH
26017: LD_INT 3
26019: PUSH
26020: EMPTY
26021: LIST
26022: LIST
26023: LIST
26024: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
26025: LD_VAR 0 6
26029: PPUSH
26030: CALL_OW 264
26034: PUSH
26035: LD_INT 4
26037: PUSH
26038: LD_INT 43
26040: PUSH
26041: LD_INT 25
26043: PUSH
26044: EMPTY
26045: LIST
26046: LIST
26047: LIST
26048: IN
26049: IFFALSE 26070
// points := [ 40 , 15 , 5 ] ;
26051: LD_ADDR_VAR 0 9
26055: PUSH
26056: LD_INT 40
26058: PUSH
26059: LD_INT 15
26061: PUSH
26062: LD_INT 5
26064: PUSH
26065: EMPTY
26066: LIST
26067: LIST
26068: LIST
26069: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
26070: LD_VAR 0 6
26074: PPUSH
26075: CALL_OW 264
26079: PUSH
26080: LD_INT 3
26082: PUSH
26083: LD_INT 23
26085: PUSH
26086: EMPTY
26087: LIST
26088: LIST
26089: IN
26090: IFFALSE 26111
// points := [ 7 , 25 , 8 ] ;
26092: LD_ADDR_VAR 0 9
26096: PUSH
26097: LD_INT 7
26099: PUSH
26100: LD_INT 25
26102: PUSH
26103: LD_INT 8
26105: PUSH
26106: EMPTY
26107: LIST
26108: LIST
26109: LIST
26110: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
26111: LD_VAR 0 6
26115: PPUSH
26116: CALL_OW 264
26120: PUSH
26121: LD_INT 5
26123: PUSH
26124: LD_INT 27
26126: PUSH
26127: LD_INT 44
26129: PUSH
26130: EMPTY
26131: LIST
26132: LIST
26133: LIST
26134: IN
26135: IFFALSE 26156
// points := [ 14 , 50 , 16 ] ;
26137: LD_ADDR_VAR 0 9
26141: PUSH
26142: LD_INT 14
26144: PUSH
26145: LD_INT 50
26147: PUSH
26148: LD_INT 16
26150: PUSH
26151: EMPTY
26152: LIST
26153: LIST
26154: LIST
26155: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
26156: LD_VAR 0 6
26160: PPUSH
26161: CALL_OW 264
26165: PUSH
26166: LD_INT 6
26168: PUSH
26169: LD_INT 46
26171: PUSH
26172: EMPTY
26173: LIST
26174: LIST
26175: IN
26176: IFFALSE 26197
// points := [ 32 , 120 , 70 ] ;
26178: LD_ADDR_VAR 0 9
26182: PUSH
26183: LD_INT 32
26185: PUSH
26186: LD_INT 120
26188: PUSH
26189: LD_INT 70
26191: PUSH
26192: EMPTY
26193: LIST
26194: LIST
26195: LIST
26196: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
26197: LD_VAR 0 6
26201: PPUSH
26202: CALL_OW 264
26206: PUSH
26207: LD_INT 7
26209: PUSH
26210: LD_INT 28
26212: PUSH
26213: LD_INT 45
26215: PUSH
26216: EMPTY
26217: LIST
26218: LIST
26219: LIST
26220: IN
26221: IFFALSE 26242
// points := [ 35 , 20 , 45 ] ;
26223: LD_ADDR_VAR 0 9
26227: PUSH
26228: LD_INT 35
26230: PUSH
26231: LD_INT 20
26233: PUSH
26234: LD_INT 45
26236: PUSH
26237: EMPTY
26238: LIST
26239: LIST
26240: LIST
26241: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
26242: LD_VAR 0 6
26246: PPUSH
26247: CALL_OW 264
26251: PUSH
26252: LD_INT 47
26254: PUSH
26255: EMPTY
26256: LIST
26257: IN
26258: IFFALSE 26279
// points := [ 67 , 45 , 75 ] ;
26260: LD_ADDR_VAR 0 9
26264: PUSH
26265: LD_INT 67
26267: PUSH
26268: LD_INT 45
26270: PUSH
26271: LD_INT 75
26273: PUSH
26274: EMPTY
26275: LIST
26276: LIST
26277: LIST
26278: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
26279: LD_VAR 0 6
26283: PPUSH
26284: CALL_OW 264
26288: PUSH
26289: LD_INT 26
26291: PUSH
26292: EMPTY
26293: LIST
26294: IN
26295: IFFALSE 26316
// points := [ 120 , 30 , 80 ] ;
26297: LD_ADDR_VAR 0 9
26301: PUSH
26302: LD_INT 120
26304: PUSH
26305: LD_INT 30
26307: PUSH
26308: LD_INT 80
26310: PUSH
26311: EMPTY
26312: LIST
26313: LIST
26314: LIST
26315: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
26316: LD_VAR 0 6
26320: PPUSH
26321: CALL_OW 264
26325: PUSH
26326: LD_INT 22
26328: PUSH
26329: EMPTY
26330: LIST
26331: IN
26332: IFFALSE 26353
// points := [ 40 , 1 , 1 ] ;
26334: LD_ADDR_VAR 0 9
26338: PUSH
26339: LD_INT 40
26341: PUSH
26342: LD_INT 1
26344: PUSH
26345: LD_INT 1
26347: PUSH
26348: EMPTY
26349: LIST
26350: LIST
26351: LIST
26352: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
26353: LD_VAR 0 6
26357: PPUSH
26358: CALL_OW 264
26362: PUSH
26363: LD_INT 29
26365: PUSH
26366: EMPTY
26367: LIST
26368: IN
26369: IFFALSE 26390
// points := [ 70 , 200 , 400 ] ;
26371: LD_ADDR_VAR 0 9
26375: PUSH
26376: LD_INT 70
26378: PUSH
26379: LD_INT 200
26381: PUSH
26382: LD_INT 400
26384: PUSH
26385: EMPTY
26386: LIST
26387: LIST
26388: LIST
26389: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
26390: LD_VAR 0 6
26394: PPUSH
26395: CALL_OW 264
26399: PUSH
26400: LD_INT 14
26402: PUSH
26403: LD_INT 53
26405: PUSH
26406: EMPTY
26407: LIST
26408: LIST
26409: IN
26410: IFFALSE 26431
// points := [ 40 , 10 , 20 ] ;
26412: LD_ADDR_VAR 0 9
26416: PUSH
26417: LD_INT 40
26419: PUSH
26420: LD_INT 10
26422: PUSH
26423: LD_INT 20
26425: PUSH
26426: EMPTY
26427: LIST
26428: LIST
26429: LIST
26430: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
26431: LD_VAR 0 6
26435: PPUSH
26436: CALL_OW 264
26440: PUSH
26441: LD_INT 9
26443: PUSH
26444: EMPTY
26445: LIST
26446: IN
26447: IFFALSE 26468
// points := [ 5 , 70 , 20 ] ;
26449: LD_ADDR_VAR 0 9
26453: PUSH
26454: LD_INT 5
26456: PUSH
26457: LD_INT 70
26459: PUSH
26460: LD_INT 20
26462: PUSH
26463: EMPTY
26464: LIST
26465: LIST
26466: LIST
26467: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
26468: LD_VAR 0 6
26472: PPUSH
26473: CALL_OW 264
26477: PUSH
26478: LD_INT 10
26480: PUSH
26481: EMPTY
26482: LIST
26483: IN
26484: IFFALSE 26505
// points := [ 35 , 110 , 70 ] ;
26486: LD_ADDR_VAR 0 9
26490: PUSH
26491: LD_INT 35
26493: PUSH
26494: LD_INT 110
26496: PUSH
26497: LD_INT 70
26499: PUSH
26500: EMPTY
26501: LIST
26502: LIST
26503: LIST
26504: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
26505: LD_VAR 0 6
26509: PPUSH
26510: CALL_OW 265
26514: PUSH
26515: LD_INT 25
26517: EQUAL
26518: IFFALSE 26539
// points := [ 80 , 65 , 100 ] ;
26520: LD_ADDR_VAR 0 9
26524: PUSH
26525: LD_INT 80
26527: PUSH
26528: LD_INT 65
26530: PUSH
26531: LD_INT 100
26533: PUSH
26534: EMPTY
26535: LIST
26536: LIST
26537: LIST
26538: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
26539: LD_VAR 0 6
26543: PPUSH
26544: CALL_OW 263
26548: PUSH
26549: LD_INT 1
26551: EQUAL
26552: IFFALSE 26587
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
26554: LD_ADDR_VAR 0 10
26558: PUSH
26559: LD_VAR 0 10
26563: PUSH
26564: LD_VAR 0 6
26568: PPUSH
26569: CALL_OW 311
26573: PPUSH
26574: LD_INT 3
26576: PPUSH
26577: CALL_OW 259
26581: PUSH
26582: LD_INT 4
26584: MUL
26585: MUL
26586: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
26587: LD_VAR 0 6
26591: PPUSH
26592: CALL_OW 263
26596: PUSH
26597: LD_INT 2
26599: EQUAL
26600: IFFALSE 26651
// begin j := IsControledBy ( i ) ;
26602: LD_ADDR_VAR 0 7
26606: PUSH
26607: LD_VAR 0 6
26611: PPUSH
26612: CALL_OW 312
26616: ST_TO_ADDR
// if j then
26617: LD_VAR 0 7
26621: IFFALSE 26651
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
26623: LD_ADDR_VAR 0 10
26627: PUSH
26628: LD_VAR 0 10
26632: PUSH
26633: LD_VAR 0 7
26637: PPUSH
26638: LD_INT 3
26640: PPUSH
26641: CALL_OW 259
26645: PUSH
26646: LD_INT 3
26648: MUL
26649: MUL
26650: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
26651: LD_VAR 0 6
26655: PPUSH
26656: CALL_OW 264
26660: PUSH
26661: LD_INT 5
26663: PUSH
26664: LD_INT 6
26666: PUSH
26667: LD_INT 46
26669: PUSH
26670: LD_INT 44
26672: PUSH
26673: LD_INT 47
26675: PUSH
26676: LD_INT 45
26678: PUSH
26679: LD_INT 28
26681: PUSH
26682: LD_INT 7
26684: PUSH
26685: LD_INT 27
26687: PUSH
26688: LD_INT 29
26690: PUSH
26691: EMPTY
26692: LIST
26693: LIST
26694: LIST
26695: LIST
26696: LIST
26697: LIST
26698: LIST
26699: LIST
26700: LIST
26701: LIST
26702: IN
26703: PUSH
26704: LD_VAR 0 1
26708: PPUSH
26709: LD_INT 52
26711: PPUSH
26712: CALL_OW 321
26716: PUSH
26717: LD_INT 2
26719: EQUAL
26720: AND
26721: IFFALSE 26738
// bpoints := bpoints * 1.2 ;
26723: LD_ADDR_VAR 0 10
26727: PUSH
26728: LD_VAR 0 10
26732: PUSH
26733: LD_REAL  1.20000000000000E+0000
26736: MUL
26737: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
26738: LD_VAR 0 6
26742: PPUSH
26743: CALL_OW 264
26747: PUSH
26748: LD_INT 6
26750: PUSH
26751: LD_INT 46
26753: PUSH
26754: LD_INT 47
26756: PUSH
26757: EMPTY
26758: LIST
26759: LIST
26760: LIST
26761: IN
26762: IFFALSE 26779
// bpoints := bpoints * 1.2 ;
26764: LD_ADDR_VAR 0 10
26768: PUSH
26769: LD_VAR 0 10
26773: PUSH
26774: LD_REAL  1.20000000000000E+0000
26777: MUL
26778: ST_TO_ADDR
// end ; unit_building :
26779: GO 26793
26781: LD_INT 3
26783: DOUBLE
26784: EQUAL
26785: IFTRUE 26789
26787: GO 26792
26789: POP
// ; end ;
26790: GO 26793
26792: POP
// for j = 1 to 3 do
26793: LD_ADDR_VAR 0 7
26797: PUSH
26798: DOUBLE
26799: LD_INT 1
26801: DEC
26802: ST_TO_ADDR
26803: LD_INT 3
26805: PUSH
26806: FOR_TO
26807: IFFALSE 26860
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
26809: LD_ADDR_VAR 0 5
26813: PUSH
26814: LD_VAR 0 5
26818: PPUSH
26819: LD_VAR 0 7
26823: PPUSH
26824: LD_VAR 0 5
26828: PUSH
26829: LD_VAR 0 7
26833: ARRAY
26834: PUSH
26835: LD_VAR 0 9
26839: PUSH
26840: LD_VAR 0 7
26844: ARRAY
26845: PUSH
26846: LD_VAR 0 10
26850: MUL
26851: PLUS
26852: PPUSH
26853: CALL_OW 1
26857: ST_TO_ADDR
26858: GO 26806
26860: POP
26861: POP
// end ;
26862: GO 25345
26864: POP
26865: POP
// result := Replace ( result , 4 , tmp ) ;
26866: LD_ADDR_VAR 0 5
26870: PUSH
26871: LD_VAR 0 5
26875: PPUSH
26876: LD_INT 4
26878: PPUSH
26879: LD_VAR 0 8
26883: PPUSH
26884: CALL_OW 1
26888: ST_TO_ADDR
// end ;
26889: LD_VAR 0 5
26893: RET
// export function DangerAtRange ( unit , range ) ; begin
26894: LD_INT 0
26896: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
26897: LD_ADDR_VAR 0 3
26901: PUSH
26902: LD_VAR 0 1
26906: PPUSH
26907: CALL_OW 255
26911: PPUSH
26912: LD_VAR 0 1
26916: PPUSH
26917: CALL_OW 250
26921: PPUSH
26922: LD_VAR 0 1
26926: PPUSH
26927: CALL_OW 251
26931: PPUSH
26932: LD_VAR 0 2
26936: PPUSH
26937: CALL 25197 0 4
26941: ST_TO_ADDR
// end ;
26942: LD_VAR 0 3
26946: RET
// export function DangerInArea ( side , area ) ; begin
26947: LD_INT 0
26949: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
26950: LD_ADDR_VAR 0 3
26954: PUSH
26955: LD_VAR 0 2
26959: PPUSH
26960: LD_INT 81
26962: PUSH
26963: LD_VAR 0 1
26967: PUSH
26968: EMPTY
26969: LIST
26970: LIST
26971: PPUSH
26972: CALL_OW 70
26976: ST_TO_ADDR
// end ;
26977: LD_VAR 0 3
26981: RET
// export function IsExtension ( b ) ; begin
26982: LD_INT 0
26984: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
26985: LD_ADDR_VAR 0 2
26989: PUSH
26990: LD_VAR 0 1
26994: PUSH
26995: LD_INT 23
26997: PUSH
26998: LD_INT 20
27000: PUSH
27001: LD_INT 22
27003: PUSH
27004: LD_INT 17
27006: PUSH
27007: LD_INT 24
27009: PUSH
27010: LD_INT 21
27012: PUSH
27013: LD_INT 19
27015: PUSH
27016: LD_INT 16
27018: PUSH
27019: LD_INT 25
27021: PUSH
27022: LD_INT 18
27024: PUSH
27025: EMPTY
27026: LIST
27027: LIST
27028: LIST
27029: LIST
27030: LIST
27031: LIST
27032: LIST
27033: LIST
27034: LIST
27035: LIST
27036: IN
27037: ST_TO_ADDR
// end ;
27038: LD_VAR 0 2
27042: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
27043: LD_INT 0
27045: PPUSH
27046: PPUSH
27047: PPUSH
// result := [ ] ;
27048: LD_ADDR_VAR 0 3
27052: PUSH
27053: EMPTY
27054: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
27055: LD_ADDR_VAR 0 4
27059: PUSH
27060: LD_VAR 0 2
27064: PPUSH
27065: LD_INT 21
27067: PUSH
27068: LD_INT 3
27070: PUSH
27071: EMPTY
27072: LIST
27073: LIST
27074: PPUSH
27075: CALL_OW 70
27079: ST_TO_ADDR
// if not tmp then
27080: LD_VAR 0 4
27084: NOT
27085: IFFALSE 27089
// exit ;
27087: GO 27147
// for i in tmp do
27089: LD_ADDR_VAR 0 5
27093: PUSH
27094: LD_VAR 0 4
27098: PUSH
27099: FOR_IN
27100: IFFALSE 27135
// if GetBase ( i ) <> base then
27102: LD_VAR 0 5
27106: PPUSH
27107: CALL_OW 274
27111: PUSH
27112: LD_VAR 0 1
27116: NONEQUAL
27117: IFFALSE 27133
// ComLinkToBase ( base , i ) ;
27119: LD_VAR 0 1
27123: PPUSH
27124: LD_VAR 0 5
27128: PPUSH
27129: CALL_OW 169
27133: GO 27099
27135: POP
27136: POP
// result := tmp ;
27137: LD_ADDR_VAR 0 3
27141: PUSH
27142: LD_VAR 0 4
27146: ST_TO_ADDR
// end ;
27147: LD_VAR 0 3
27151: RET
// export function ComComplete ( unit , b ) ; var i ; begin
27152: LD_INT 0
27154: PPUSH
27155: PPUSH
// if BuildingStatus ( b ) = bs_build then
27156: LD_VAR 0 2
27160: PPUSH
27161: CALL_OW 461
27165: PUSH
27166: LD_INT 1
27168: EQUAL
27169: IFFALSE 27229
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
27171: LD_VAR 0 1
27175: PPUSH
27176: LD_STRING h
27178: PUSH
27179: LD_VAR 0 2
27183: PPUSH
27184: CALL_OW 250
27188: PUSH
27189: LD_VAR 0 2
27193: PPUSH
27194: CALL_OW 251
27198: PUSH
27199: LD_VAR 0 2
27203: PUSH
27204: LD_INT 0
27206: PUSH
27207: LD_INT 0
27209: PUSH
27210: LD_INT 0
27212: PUSH
27213: EMPTY
27214: LIST
27215: LIST
27216: LIST
27217: LIST
27218: LIST
27219: LIST
27220: LIST
27221: PUSH
27222: EMPTY
27223: LIST
27224: PPUSH
27225: CALL_OW 446
// end ;
27229: LD_VAR 0 3
27233: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
27234: LD_INT 0
27236: PPUSH
27237: PPUSH
27238: PPUSH
27239: PPUSH
27240: PPUSH
27241: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
27242: LD_VAR 0 1
27246: NOT
27247: PUSH
27248: LD_VAR 0 1
27252: PPUSH
27253: CALL_OW 263
27257: PUSH
27258: LD_INT 2
27260: EQUAL
27261: NOT
27262: OR
27263: IFFALSE 27267
// exit ;
27265: GO 27583
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
27267: LD_ADDR_VAR 0 6
27271: PUSH
27272: LD_INT 22
27274: PUSH
27275: LD_VAR 0 1
27279: PPUSH
27280: CALL_OW 255
27284: PUSH
27285: EMPTY
27286: LIST
27287: LIST
27288: PUSH
27289: LD_INT 2
27291: PUSH
27292: LD_INT 30
27294: PUSH
27295: LD_INT 36
27297: PUSH
27298: EMPTY
27299: LIST
27300: LIST
27301: PUSH
27302: LD_INT 34
27304: PUSH
27305: LD_INT 31
27307: PUSH
27308: EMPTY
27309: LIST
27310: LIST
27311: PUSH
27312: EMPTY
27313: LIST
27314: LIST
27315: LIST
27316: PUSH
27317: EMPTY
27318: LIST
27319: LIST
27320: PPUSH
27321: CALL_OW 69
27325: ST_TO_ADDR
// if not tmp then
27326: LD_VAR 0 6
27330: NOT
27331: IFFALSE 27335
// exit ;
27333: GO 27583
// result := [ ] ;
27335: LD_ADDR_VAR 0 2
27339: PUSH
27340: EMPTY
27341: ST_TO_ADDR
// for i in tmp do
27342: LD_ADDR_VAR 0 3
27346: PUSH
27347: LD_VAR 0 6
27351: PUSH
27352: FOR_IN
27353: IFFALSE 27424
// begin t := UnitsInside ( i ) ;
27355: LD_ADDR_VAR 0 4
27359: PUSH
27360: LD_VAR 0 3
27364: PPUSH
27365: CALL_OW 313
27369: ST_TO_ADDR
// if t then
27370: LD_VAR 0 4
27374: IFFALSE 27422
// for j in t do
27376: LD_ADDR_VAR 0 7
27380: PUSH
27381: LD_VAR 0 4
27385: PUSH
27386: FOR_IN
27387: IFFALSE 27420
// result := Insert ( result , result + 1 , j ) ;
27389: LD_ADDR_VAR 0 2
27393: PUSH
27394: LD_VAR 0 2
27398: PPUSH
27399: LD_VAR 0 2
27403: PUSH
27404: LD_INT 1
27406: PLUS
27407: PPUSH
27408: LD_VAR 0 7
27412: PPUSH
27413: CALL_OW 2
27417: ST_TO_ADDR
27418: GO 27386
27420: POP
27421: POP
// end ;
27422: GO 27352
27424: POP
27425: POP
// if not result then
27426: LD_VAR 0 2
27430: NOT
27431: IFFALSE 27435
// exit ;
27433: GO 27583
// mech := result [ 1 ] ;
27435: LD_ADDR_VAR 0 5
27439: PUSH
27440: LD_VAR 0 2
27444: PUSH
27445: LD_INT 1
27447: ARRAY
27448: ST_TO_ADDR
// if result > 1 then
27449: LD_VAR 0 2
27453: PUSH
27454: LD_INT 1
27456: GREATER
27457: IFFALSE 27569
// for i = 2 to result do
27459: LD_ADDR_VAR 0 3
27463: PUSH
27464: DOUBLE
27465: LD_INT 2
27467: DEC
27468: ST_TO_ADDR
27469: LD_VAR 0 2
27473: PUSH
27474: FOR_TO
27475: IFFALSE 27567
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
27477: LD_ADDR_VAR 0 4
27481: PUSH
27482: LD_VAR 0 2
27486: PUSH
27487: LD_VAR 0 3
27491: ARRAY
27492: PPUSH
27493: LD_INT 3
27495: PPUSH
27496: CALL_OW 259
27500: PUSH
27501: LD_VAR 0 2
27505: PUSH
27506: LD_VAR 0 3
27510: ARRAY
27511: PPUSH
27512: CALL_OW 432
27516: MINUS
27517: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
27518: LD_VAR 0 4
27522: PUSH
27523: LD_VAR 0 5
27527: PPUSH
27528: LD_INT 3
27530: PPUSH
27531: CALL_OW 259
27535: PUSH
27536: LD_VAR 0 5
27540: PPUSH
27541: CALL_OW 432
27545: MINUS
27546: GREATEREQUAL
27547: IFFALSE 27565
// mech := result [ i ] ;
27549: LD_ADDR_VAR 0 5
27553: PUSH
27554: LD_VAR 0 2
27558: PUSH
27559: LD_VAR 0 3
27563: ARRAY
27564: ST_TO_ADDR
// end ;
27565: GO 27474
27567: POP
27568: POP
// ComLinkTo ( vehicle , mech ) ;
27569: LD_VAR 0 1
27573: PPUSH
27574: LD_VAR 0 5
27578: PPUSH
27579: CALL_OW 135
// end ;
27583: LD_VAR 0 2
27587: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
27588: LD_INT 0
27590: PPUSH
27591: PPUSH
27592: PPUSH
27593: PPUSH
27594: PPUSH
27595: PPUSH
27596: PPUSH
27597: PPUSH
27598: PPUSH
27599: PPUSH
27600: PPUSH
27601: PPUSH
27602: PPUSH
// result := [ ] ;
27603: LD_ADDR_VAR 0 7
27607: PUSH
27608: EMPTY
27609: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
27610: LD_VAR 0 1
27614: PPUSH
27615: CALL_OW 266
27619: PUSH
27620: LD_INT 0
27622: PUSH
27623: LD_INT 1
27625: PUSH
27626: EMPTY
27627: LIST
27628: LIST
27629: IN
27630: NOT
27631: IFFALSE 27635
// exit ;
27633: GO 29266
// if name then
27635: LD_VAR 0 3
27639: IFFALSE 27655
// SetBName ( base_dep , name ) ;
27641: LD_VAR 0 1
27645: PPUSH
27646: LD_VAR 0 3
27650: PPUSH
27651: CALL_OW 500
// base := GetBase ( base_dep ) ;
27655: LD_ADDR_VAR 0 15
27659: PUSH
27660: LD_VAR 0 1
27664: PPUSH
27665: CALL_OW 274
27669: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
27670: LD_ADDR_VAR 0 16
27674: PUSH
27675: LD_VAR 0 1
27679: PPUSH
27680: CALL_OW 255
27684: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
27685: LD_ADDR_VAR 0 17
27689: PUSH
27690: LD_VAR 0 1
27694: PPUSH
27695: CALL_OW 248
27699: ST_TO_ADDR
// if sources then
27700: LD_VAR 0 5
27704: IFFALSE 27751
// for i = 1 to 3 do
27706: LD_ADDR_VAR 0 8
27710: PUSH
27711: DOUBLE
27712: LD_INT 1
27714: DEC
27715: ST_TO_ADDR
27716: LD_INT 3
27718: PUSH
27719: FOR_TO
27720: IFFALSE 27749
// AddResourceType ( base , i , sources [ i ] ) ;
27722: LD_VAR 0 15
27726: PPUSH
27727: LD_VAR 0 8
27731: PPUSH
27732: LD_VAR 0 5
27736: PUSH
27737: LD_VAR 0 8
27741: ARRAY
27742: PPUSH
27743: CALL_OW 276
27747: GO 27719
27749: POP
27750: POP
// buildings := GetBaseBuildings ( base , area ) ;
27751: LD_ADDR_VAR 0 18
27755: PUSH
27756: LD_VAR 0 15
27760: PPUSH
27761: LD_VAR 0 2
27765: PPUSH
27766: CALL 27043 0 2
27770: ST_TO_ADDR
// InitHc ;
27771: CALL_OW 19
// InitUc ;
27775: CALL_OW 18
// uc_side := side ;
27779: LD_ADDR_OWVAR 20
27783: PUSH
27784: LD_VAR 0 16
27788: ST_TO_ADDR
// uc_nation := nation ;
27789: LD_ADDR_OWVAR 21
27793: PUSH
27794: LD_VAR 0 17
27798: ST_TO_ADDR
// if buildings then
27799: LD_VAR 0 18
27803: IFFALSE 29125
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
27805: LD_ADDR_VAR 0 19
27809: PUSH
27810: LD_VAR 0 18
27814: PPUSH
27815: LD_INT 2
27817: PUSH
27818: LD_INT 30
27820: PUSH
27821: LD_INT 29
27823: PUSH
27824: EMPTY
27825: LIST
27826: LIST
27827: PUSH
27828: LD_INT 30
27830: PUSH
27831: LD_INT 30
27833: PUSH
27834: EMPTY
27835: LIST
27836: LIST
27837: PUSH
27838: EMPTY
27839: LIST
27840: LIST
27841: LIST
27842: PPUSH
27843: CALL_OW 72
27847: ST_TO_ADDR
// if tmp then
27848: LD_VAR 0 19
27852: IFFALSE 27900
// for i in tmp do
27854: LD_ADDR_VAR 0 8
27858: PUSH
27859: LD_VAR 0 19
27863: PUSH
27864: FOR_IN
27865: IFFALSE 27898
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
27867: LD_VAR 0 8
27871: PPUSH
27872: CALL_OW 250
27876: PPUSH
27877: LD_VAR 0 8
27881: PPUSH
27882: CALL_OW 251
27886: PPUSH
27887: LD_VAR 0 16
27891: PPUSH
27892: CALL_OW 441
27896: GO 27864
27898: POP
27899: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
27900: LD_VAR 0 18
27904: PPUSH
27905: LD_INT 2
27907: PUSH
27908: LD_INT 30
27910: PUSH
27911: LD_INT 32
27913: PUSH
27914: EMPTY
27915: LIST
27916: LIST
27917: PUSH
27918: LD_INT 30
27920: PUSH
27921: LD_INT 33
27923: PUSH
27924: EMPTY
27925: LIST
27926: LIST
27927: PUSH
27928: EMPTY
27929: LIST
27930: LIST
27931: LIST
27932: PPUSH
27933: CALL_OW 72
27937: IFFALSE 28025
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
27939: LD_ADDR_VAR 0 8
27943: PUSH
27944: LD_VAR 0 18
27948: PPUSH
27949: LD_INT 2
27951: PUSH
27952: LD_INT 30
27954: PUSH
27955: LD_INT 32
27957: PUSH
27958: EMPTY
27959: LIST
27960: LIST
27961: PUSH
27962: LD_INT 30
27964: PUSH
27965: LD_INT 33
27967: PUSH
27968: EMPTY
27969: LIST
27970: LIST
27971: PUSH
27972: EMPTY
27973: LIST
27974: LIST
27975: LIST
27976: PPUSH
27977: CALL_OW 72
27981: PUSH
27982: FOR_IN
27983: IFFALSE 28023
// begin if not GetBWeapon ( i ) then
27985: LD_VAR 0 8
27989: PPUSH
27990: CALL_OW 269
27994: NOT
27995: IFFALSE 28021
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
27997: LD_VAR 0 8
28001: PPUSH
28002: LD_VAR 0 8
28006: PPUSH
28007: LD_VAR 0 2
28011: PPUSH
28012: CALL 29271 0 2
28016: PPUSH
28017: CALL_OW 431
// end ;
28021: GO 27982
28023: POP
28024: POP
// end ; for i = 1 to personel do
28025: LD_ADDR_VAR 0 8
28029: PUSH
28030: DOUBLE
28031: LD_INT 1
28033: DEC
28034: ST_TO_ADDR
28035: LD_VAR 0 6
28039: PUSH
28040: FOR_TO
28041: IFFALSE 29105
// begin if i > 4 then
28043: LD_VAR 0 8
28047: PUSH
28048: LD_INT 4
28050: GREATER
28051: IFFALSE 28055
// break ;
28053: GO 29105
// case i of 1 :
28055: LD_VAR 0 8
28059: PUSH
28060: LD_INT 1
28062: DOUBLE
28063: EQUAL
28064: IFTRUE 28068
28066: GO 28148
28068: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
28069: LD_ADDR_VAR 0 12
28073: PUSH
28074: LD_VAR 0 18
28078: PPUSH
28079: LD_INT 22
28081: PUSH
28082: LD_VAR 0 16
28086: PUSH
28087: EMPTY
28088: LIST
28089: LIST
28090: PUSH
28091: LD_INT 58
28093: PUSH
28094: EMPTY
28095: LIST
28096: PUSH
28097: LD_INT 2
28099: PUSH
28100: LD_INT 30
28102: PUSH
28103: LD_INT 32
28105: PUSH
28106: EMPTY
28107: LIST
28108: LIST
28109: PUSH
28110: LD_INT 30
28112: PUSH
28113: LD_INT 4
28115: PUSH
28116: EMPTY
28117: LIST
28118: LIST
28119: PUSH
28120: LD_INT 30
28122: PUSH
28123: LD_INT 5
28125: PUSH
28126: EMPTY
28127: LIST
28128: LIST
28129: PUSH
28130: EMPTY
28131: LIST
28132: LIST
28133: LIST
28134: LIST
28135: PUSH
28136: EMPTY
28137: LIST
28138: LIST
28139: LIST
28140: PPUSH
28141: CALL_OW 72
28145: ST_TO_ADDR
28146: GO 28370
28148: LD_INT 2
28150: DOUBLE
28151: EQUAL
28152: IFTRUE 28156
28154: GO 28218
28156: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
28157: LD_ADDR_VAR 0 12
28161: PUSH
28162: LD_VAR 0 18
28166: PPUSH
28167: LD_INT 22
28169: PUSH
28170: LD_VAR 0 16
28174: PUSH
28175: EMPTY
28176: LIST
28177: LIST
28178: PUSH
28179: LD_INT 2
28181: PUSH
28182: LD_INT 30
28184: PUSH
28185: LD_INT 0
28187: PUSH
28188: EMPTY
28189: LIST
28190: LIST
28191: PUSH
28192: LD_INT 30
28194: PUSH
28195: LD_INT 1
28197: PUSH
28198: EMPTY
28199: LIST
28200: LIST
28201: PUSH
28202: EMPTY
28203: LIST
28204: LIST
28205: LIST
28206: PUSH
28207: EMPTY
28208: LIST
28209: LIST
28210: PPUSH
28211: CALL_OW 72
28215: ST_TO_ADDR
28216: GO 28370
28218: LD_INT 3
28220: DOUBLE
28221: EQUAL
28222: IFTRUE 28226
28224: GO 28288
28226: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
28227: LD_ADDR_VAR 0 12
28231: PUSH
28232: LD_VAR 0 18
28236: PPUSH
28237: LD_INT 22
28239: PUSH
28240: LD_VAR 0 16
28244: PUSH
28245: EMPTY
28246: LIST
28247: LIST
28248: PUSH
28249: LD_INT 2
28251: PUSH
28252: LD_INT 30
28254: PUSH
28255: LD_INT 2
28257: PUSH
28258: EMPTY
28259: LIST
28260: LIST
28261: PUSH
28262: LD_INT 30
28264: PUSH
28265: LD_INT 3
28267: PUSH
28268: EMPTY
28269: LIST
28270: LIST
28271: PUSH
28272: EMPTY
28273: LIST
28274: LIST
28275: LIST
28276: PUSH
28277: EMPTY
28278: LIST
28279: LIST
28280: PPUSH
28281: CALL_OW 72
28285: ST_TO_ADDR
28286: GO 28370
28288: LD_INT 4
28290: DOUBLE
28291: EQUAL
28292: IFTRUE 28296
28294: GO 28369
28296: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
28297: LD_ADDR_VAR 0 12
28301: PUSH
28302: LD_VAR 0 18
28306: PPUSH
28307: LD_INT 22
28309: PUSH
28310: LD_VAR 0 16
28314: PUSH
28315: EMPTY
28316: LIST
28317: LIST
28318: PUSH
28319: LD_INT 2
28321: PUSH
28322: LD_INT 30
28324: PUSH
28325: LD_INT 6
28327: PUSH
28328: EMPTY
28329: LIST
28330: LIST
28331: PUSH
28332: LD_INT 30
28334: PUSH
28335: LD_INT 7
28337: PUSH
28338: EMPTY
28339: LIST
28340: LIST
28341: PUSH
28342: LD_INT 30
28344: PUSH
28345: LD_INT 8
28347: PUSH
28348: EMPTY
28349: LIST
28350: LIST
28351: PUSH
28352: EMPTY
28353: LIST
28354: LIST
28355: LIST
28356: LIST
28357: PUSH
28358: EMPTY
28359: LIST
28360: LIST
28361: PPUSH
28362: CALL_OW 72
28366: ST_TO_ADDR
28367: GO 28370
28369: POP
// if i = 1 then
28370: LD_VAR 0 8
28374: PUSH
28375: LD_INT 1
28377: EQUAL
28378: IFFALSE 28489
// begin tmp := [ ] ;
28380: LD_ADDR_VAR 0 19
28384: PUSH
28385: EMPTY
28386: ST_TO_ADDR
// for j in f do
28387: LD_ADDR_VAR 0 9
28391: PUSH
28392: LD_VAR 0 12
28396: PUSH
28397: FOR_IN
28398: IFFALSE 28471
// if GetBType ( j ) = b_bunker then
28400: LD_VAR 0 9
28404: PPUSH
28405: CALL_OW 266
28409: PUSH
28410: LD_INT 32
28412: EQUAL
28413: IFFALSE 28440
// tmp := Insert ( tmp , 1 , j ) else
28415: LD_ADDR_VAR 0 19
28419: PUSH
28420: LD_VAR 0 19
28424: PPUSH
28425: LD_INT 1
28427: PPUSH
28428: LD_VAR 0 9
28432: PPUSH
28433: CALL_OW 2
28437: ST_TO_ADDR
28438: GO 28469
// tmp := Insert ( tmp , tmp + 1 , j ) ;
28440: LD_ADDR_VAR 0 19
28444: PUSH
28445: LD_VAR 0 19
28449: PPUSH
28450: LD_VAR 0 19
28454: PUSH
28455: LD_INT 1
28457: PLUS
28458: PPUSH
28459: LD_VAR 0 9
28463: PPUSH
28464: CALL_OW 2
28468: ST_TO_ADDR
28469: GO 28397
28471: POP
28472: POP
// if tmp then
28473: LD_VAR 0 19
28477: IFFALSE 28489
// f := tmp ;
28479: LD_ADDR_VAR 0 12
28483: PUSH
28484: LD_VAR 0 19
28488: ST_TO_ADDR
// end ; x := personel [ i ] ;
28489: LD_ADDR_VAR 0 13
28493: PUSH
28494: LD_VAR 0 6
28498: PUSH
28499: LD_VAR 0 8
28503: ARRAY
28504: ST_TO_ADDR
// if x = - 1 then
28505: LD_VAR 0 13
28509: PUSH
28510: LD_INT 1
28512: NEG
28513: EQUAL
28514: IFFALSE 28723
// begin for j in f do
28516: LD_ADDR_VAR 0 9
28520: PUSH
28521: LD_VAR 0 12
28525: PUSH
28526: FOR_IN
28527: IFFALSE 28719
// repeat InitHc ;
28529: CALL_OW 19
// if GetBType ( j ) = b_barracks then
28533: LD_VAR 0 9
28537: PPUSH
28538: CALL_OW 266
28542: PUSH
28543: LD_INT 5
28545: EQUAL
28546: IFFALSE 28616
// begin if UnitsInside ( j ) < 3 then
28548: LD_VAR 0 9
28552: PPUSH
28553: CALL_OW 313
28557: PUSH
28558: LD_INT 3
28560: LESS
28561: IFFALSE 28597
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
28563: LD_INT 0
28565: PPUSH
28566: LD_INT 5
28568: PUSH
28569: LD_INT 8
28571: PUSH
28572: LD_INT 9
28574: PUSH
28575: EMPTY
28576: LIST
28577: LIST
28578: LIST
28579: PUSH
28580: LD_VAR 0 17
28584: ARRAY
28585: PPUSH
28586: LD_VAR 0 4
28590: PPUSH
28591: CALL_OW 380
28595: GO 28614
// PrepareHuman ( false , i , skill ) ;
28597: LD_INT 0
28599: PPUSH
28600: LD_VAR 0 8
28604: PPUSH
28605: LD_VAR 0 4
28609: PPUSH
28610: CALL_OW 380
// end else
28614: GO 28633
// PrepareHuman ( false , i , skill ) ;
28616: LD_INT 0
28618: PPUSH
28619: LD_VAR 0 8
28623: PPUSH
28624: LD_VAR 0 4
28628: PPUSH
28629: CALL_OW 380
// un := CreateHuman ;
28633: LD_ADDR_VAR 0 14
28637: PUSH
28638: CALL_OW 44
28642: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
28643: LD_ADDR_VAR 0 7
28647: PUSH
28648: LD_VAR 0 7
28652: PPUSH
28653: LD_INT 1
28655: PPUSH
28656: LD_VAR 0 14
28660: PPUSH
28661: CALL_OW 2
28665: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
28666: LD_VAR 0 14
28670: PPUSH
28671: LD_VAR 0 9
28675: PPUSH
28676: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
28680: LD_VAR 0 9
28684: PPUSH
28685: CALL_OW 313
28689: PUSH
28690: LD_INT 6
28692: EQUAL
28693: PUSH
28694: LD_VAR 0 9
28698: PPUSH
28699: CALL_OW 266
28703: PUSH
28704: LD_INT 32
28706: PUSH
28707: LD_INT 31
28709: PUSH
28710: EMPTY
28711: LIST
28712: LIST
28713: IN
28714: OR
28715: IFFALSE 28529
28717: GO 28526
28719: POP
28720: POP
// end else
28721: GO 29103
// for j = 1 to x do
28723: LD_ADDR_VAR 0 9
28727: PUSH
28728: DOUBLE
28729: LD_INT 1
28731: DEC
28732: ST_TO_ADDR
28733: LD_VAR 0 13
28737: PUSH
28738: FOR_TO
28739: IFFALSE 29101
// begin InitHc ;
28741: CALL_OW 19
// if not f then
28745: LD_VAR 0 12
28749: NOT
28750: IFFALSE 28839
// begin PrepareHuman ( false , i , skill ) ;
28752: LD_INT 0
28754: PPUSH
28755: LD_VAR 0 8
28759: PPUSH
28760: LD_VAR 0 4
28764: PPUSH
28765: CALL_OW 380
// un := CreateHuman ;
28769: LD_ADDR_VAR 0 14
28773: PUSH
28774: CALL_OW 44
28778: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
28779: LD_ADDR_VAR 0 7
28783: PUSH
28784: LD_VAR 0 7
28788: PPUSH
28789: LD_INT 1
28791: PPUSH
28792: LD_VAR 0 14
28796: PPUSH
28797: CALL_OW 2
28801: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
28802: LD_VAR 0 14
28806: PPUSH
28807: LD_VAR 0 1
28811: PPUSH
28812: CALL_OW 250
28816: PPUSH
28817: LD_VAR 0 1
28821: PPUSH
28822: CALL_OW 251
28826: PPUSH
28827: LD_INT 10
28829: PPUSH
28830: LD_INT 0
28832: PPUSH
28833: CALL_OW 50
// continue ;
28837: GO 28738
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
28839: LD_VAR 0 12
28843: PUSH
28844: LD_INT 1
28846: ARRAY
28847: PPUSH
28848: CALL_OW 313
28852: PUSH
28853: LD_VAR 0 12
28857: PUSH
28858: LD_INT 1
28860: ARRAY
28861: PPUSH
28862: CALL_OW 266
28866: PUSH
28867: LD_INT 32
28869: PUSH
28870: LD_INT 31
28872: PUSH
28873: EMPTY
28874: LIST
28875: LIST
28876: IN
28877: AND
28878: PUSH
28879: LD_VAR 0 12
28883: PUSH
28884: LD_INT 1
28886: ARRAY
28887: PPUSH
28888: CALL_OW 313
28892: PUSH
28893: LD_INT 6
28895: EQUAL
28896: OR
28897: IFFALSE 28917
// f := Delete ( f , 1 ) ;
28899: LD_ADDR_VAR 0 12
28903: PUSH
28904: LD_VAR 0 12
28908: PPUSH
28909: LD_INT 1
28911: PPUSH
28912: CALL_OW 3
28916: ST_TO_ADDR
// if not f then
28917: LD_VAR 0 12
28921: NOT
28922: IFFALSE 28940
// begin x := x + 2 ;
28924: LD_ADDR_VAR 0 13
28928: PUSH
28929: LD_VAR 0 13
28933: PUSH
28934: LD_INT 2
28936: PLUS
28937: ST_TO_ADDR
// continue ;
28938: GO 28738
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
28940: LD_VAR 0 12
28944: PUSH
28945: LD_INT 1
28947: ARRAY
28948: PPUSH
28949: CALL_OW 266
28953: PUSH
28954: LD_INT 5
28956: EQUAL
28957: IFFALSE 29031
// begin if UnitsInside ( f [ 1 ] ) < 3 then
28959: LD_VAR 0 12
28963: PUSH
28964: LD_INT 1
28966: ARRAY
28967: PPUSH
28968: CALL_OW 313
28972: PUSH
28973: LD_INT 3
28975: LESS
28976: IFFALSE 29012
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
28978: LD_INT 0
28980: PPUSH
28981: LD_INT 5
28983: PUSH
28984: LD_INT 8
28986: PUSH
28987: LD_INT 9
28989: PUSH
28990: EMPTY
28991: LIST
28992: LIST
28993: LIST
28994: PUSH
28995: LD_VAR 0 17
28999: ARRAY
29000: PPUSH
29001: LD_VAR 0 4
29005: PPUSH
29006: CALL_OW 380
29010: GO 29029
// PrepareHuman ( false , i , skill ) ;
29012: LD_INT 0
29014: PPUSH
29015: LD_VAR 0 8
29019: PPUSH
29020: LD_VAR 0 4
29024: PPUSH
29025: CALL_OW 380
// end else
29029: GO 29048
// PrepareHuman ( false , i , skill ) ;
29031: LD_INT 0
29033: PPUSH
29034: LD_VAR 0 8
29038: PPUSH
29039: LD_VAR 0 4
29043: PPUSH
29044: CALL_OW 380
// un := CreateHuman ;
29048: LD_ADDR_VAR 0 14
29052: PUSH
29053: CALL_OW 44
29057: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29058: LD_ADDR_VAR 0 7
29062: PUSH
29063: LD_VAR 0 7
29067: PPUSH
29068: LD_INT 1
29070: PPUSH
29071: LD_VAR 0 14
29075: PPUSH
29076: CALL_OW 2
29080: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
29081: LD_VAR 0 14
29085: PPUSH
29086: LD_VAR 0 12
29090: PUSH
29091: LD_INT 1
29093: ARRAY
29094: PPUSH
29095: CALL_OW 52
// end ;
29099: GO 28738
29101: POP
29102: POP
// end ;
29103: GO 28040
29105: POP
29106: POP
// result := result ^ buildings ;
29107: LD_ADDR_VAR 0 7
29111: PUSH
29112: LD_VAR 0 7
29116: PUSH
29117: LD_VAR 0 18
29121: ADD
29122: ST_TO_ADDR
// end else
29123: GO 29266
// begin for i = 1 to personel do
29125: LD_ADDR_VAR 0 8
29129: PUSH
29130: DOUBLE
29131: LD_INT 1
29133: DEC
29134: ST_TO_ADDR
29135: LD_VAR 0 6
29139: PUSH
29140: FOR_TO
29141: IFFALSE 29264
// begin if i > 4 then
29143: LD_VAR 0 8
29147: PUSH
29148: LD_INT 4
29150: GREATER
29151: IFFALSE 29155
// break ;
29153: GO 29264
// x := personel [ i ] ;
29155: LD_ADDR_VAR 0 13
29159: PUSH
29160: LD_VAR 0 6
29164: PUSH
29165: LD_VAR 0 8
29169: ARRAY
29170: ST_TO_ADDR
// if x = - 1 then
29171: LD_VAR 0 13
29175: PUSH
29176: LD_INT 1
29178: NEG
29179: EQUAL
29180: IFFALSE 29184
// continue ;
29182: GO 29140
// PrepareHuman ( false , i , skill ) ;
29184: LD_INT 0
29186: PPUSH
29187: LD_VAR 0 8
29191: PPUSH
29192: LD_VAR 0 4
29196: PPUSH
29197: CALL_OW 380
// un := CreateHuman ;
29201: LD_ADDR_VAR 0 14
29205: PUSH
29206: CALL_OW 44
29210: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
29211: LD_VAR 0 14
29215: PPUSH
29216: LD_VAR 0 1
29220: PPUSH
29221: CALL_OW 250
29225: PPUSH
29226: LD_VAR 0 1
29230: PPUSH
29231: CALL_OW 251
29235: PPUSH
29236: LD_INT 10
29238: PPUSH
29239: LD_INT 0
29241: PPUSH
29242: CALL_OW 50
// result := result ^ un ;
29246: LD_ADDR_VAR 0 7
29250: PUSH
29251: LD_VAR 0 7
29255: PUSH
29256: LD_VAR 0 14
29260: ADD
29261: ST_TO_ADDR
// end ;
29262: GO 29140
29264: POP
29265: POP
// end ; end ;
29266: LD_VAR 0 7
29270: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
29271: LD_INT 0
29273: PPUSH
29274: PPUSH
29275: PPUSH
29276: PPUSH
29277: PPUSH
29278: PPUSH
29279: PPUSH
29280: PPUSH
29281: PPUSH
29282: PPUSH
29283: PPUSH
29284: PPUSH
29285: PPUSH
29286: PPUSH
29287: PPUSH
29288: PPUSH
// result := false ;
29289: LD_ADDR_VAR 0 3
29293: PUSH
29294: LD_INT 0
29296: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
29297: LD_VAR 0 1
29301: NOT
29302: PUSH
29303: LD_VAR 0 1
29307: PPUSH
29308: CALL_OW 266
29312: PUSH
29313: LD_INT 32
29315: PUSH
29316: LD_INT 33
29318: PUSH
29319: EMPTY
29320: LIST
29321: LIST
29322: IN
29323: NOT
29324: OR
29325: IFFALSE 29329
// exit ;
29327: GO 30465
// nat := GetNation ( tower ) ;
29329: LD_ADDR_VAR 0 12
29333: PUSH
29334: LD_VAR 0 1
29338: PPUSH
29339: CALL_OW 248
29343: ST_TO_ADDR
// side := GetSide ( tower ) ;
29344: LD_ADDR_VAR 0 16
29348: PUSH
29349: LD_VAR 0 1
29353: PPUSH
29354: CALL_OW 255
29358: ST_TO_ADDR
// x := GetX ( tower ) ;
29359: LD_ADDR_VAR 0 10
29363: PUSH
29364: LD_VAR 0 1
29368: PPUSH
29369: CALL_OW 250
29373: ST_TO_ADDR
// y := GetY ( tower ) ;
29374: LD_ADDR_VAR 0 11
29378: PUSH
29379: LD_VAR 0 1
29383: PPUSH
29384: CALL_OW 251
29388: ST_TO_ADDR
// if not x or not y then
29389: LD_VAR 0 10
29393: NOT
29394: PUSH
29395: LD_VAR 0 11
29399: NOT
29400: OR
29401: IFFALSE 29405
// exit ;
29403: GO 30465
// weapon := 0 ;
29405: LD_ADDR_VAR 0 18
29409: PUSH
29410: LD_INT 0
29412: ST_TO_ADDR
// fac_list := [ ] ;
29413: LD_ADDR_VAR 0 17
29417: PUSH
29418: EMPTY
29419: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
29420: LD_ADDR_VAR 0 6
29424: PUSH
29425: LD_VAR 0 1
29429: PPUSH
29430: CALL_OW 274
29434: PPUSH
29435: LD_VAR 0 2
29439: PPUSH
29440: CALL 27043 0 2
29444: PPUSH
29445: LD_INT 30
29447: PUSH
29448: LD_INT 3
29450: PUSH
29451: EMPTY
29452: LIST
29453: LIST
29454: PPUSH
29455: CALL_OW 72
29459: ST_TO_ADDR
// if not factories then
29460: LD_VAR 0 6
29464: NOT
29465: IFFALSE 29469
// exit ;
29467: GO 30465
// for i in factories do
29469: LD_ADDR_VAR 0 8
29473: PUSH
29474: LD_VAR 0 6
29478: PUSH
29479: FOR_IN
29480: IFFALSE 29505
// fac_list := fac_list union AvailableWeaponList ( i ) ;
29482: LD_ADDR_VAR 0 17
29486: PUSH
29487: LD_VAR 0 17
29491: PUSH
29492: LD_VAR 0 8
29496: PPUSH
29497: CALL_OW 478
29501: UNION
29502: ST_TO_ADDR
29503: GO 29479
29505: POP
29506: POP
// if not fac_list then
29507: LD_VAR 0 17
29511: NOT
29512: IFFALSE 29516
// exit ;
29514: GO 30465
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
29516: LD_ADDR_VAR 0 5
29520: PUSH
29521: LD_INT 4
29523: PUSH
29524: LD_INT 5
29526: PUSH
29527: LD_INT 9
29529: PUSH
29530: LD_INT 10
29532: PUSH
29533: LD_INT 6
29535: PUSH
29536: LD_INT 7
29538: PUSH
29539: LD_INT 11
29541: PUSH
29542: EMPTY
29543: LIST
29544: LIST
29545: LIST
29546: LIST
29547: LIST
29548: LIST
29549: LIST
29550: PUSH
29551: LD_INT 27
29553: PUSH
29554: LD_INT 28
29556: PUSH
29557: LD_INT 26
29559: PUSH
29560: LD_INT 30
29562: PUSH
29563: EMPTY
29564: LIST
29565: LIST
29566: LIST
29567: LIST
29568: PUSH
29569: LD_INT 43
29571: PUSH
29572: LD_INT 44
29574: PUSH
29575: LD_INT 46
29577: PUSH
29578: LD_INT 45
29580: PUSH
29581: LD_INT 47
29583: PUSH
29584: LD_INT 49
29586: PUSH
29587: EMPTY
29588: LIST
29589: LIST
29590: LIST
29591: LIST
29592: LIST
29593: LIST
29594: PUSH
29595: EMPTY
29596: LIST
29597: LIST
29598: LIST
29599: PUSH
29600: LD_VAR 0 12
29604: ARRAY
29605: ST_TO_ADDR
// for i in list do
29606: LD_ADDR_VAR 0 8
29610: PUSH
29611: LD_VAR 0 5
29615: PUSH
29616: FOR_IN
29617: IFFALSE 29650
// if not i in fac_list then
29619: LD_VAR 0 8
29623: PUSH
29624: LD_VAR 0 17
29628: IN
29629: NOT
29630: IFFALSE 29648
// list := list diff i ;
29632: LD_ADDR_VAR 0 5
29636: PUSH
29637: LD_VAR 0 5
29641: PUSH
29642: LD_VAR 0 8
29646: DIFF
29647: ST_TO_ADDR
29648: GO 29616
29650: POP
29651: POP
// if not list then
29652: LD_VAR 0 5
29656: NOT
29657: IFFALSE 29661
// exit ;
29659: GO 30465
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
29661: LD_VAR 0 12
29665: PUSH
29666: LD_INT 3
29668: EQUAL
29669: PUSH
29670: LD_INT 49
29672: PUSH
29673: LD_VAR 0 5
29677: IN
29678: AND
29679: PUSH
29680: LD_INT 31
29682: PPUSH
29683: LD_VAR 0 16
29687: PPUSH
29688: CALL_OW 321
29692: PUSH
29693: LD_INT 2
29695: EQUAL
29696: AND
29697: IFFALSE 29757
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
29699: LD_INT 22
29701: PUSH
29702: LD_VAR 0 16
29706: PUSH
29707: EMPTY
29708: LIST
29709: LIST
29710: PUSH
29711: LD_INT 35
29713: PUSH
29714: LD_INT 49
29716: PUSH
29717: EMPTY
29718: LIST
29719: LIST
29720: PUSH
29721: LD_INT 91
29723: PUSH
29724: LD_VAR 0 1
29728: PUSH
29729: LD_INT 10
29731: PUSH
29732: EMPTY
29733: LIST
29734: LIST
29735: LIST
29736: PUSH
29737: EMPTY
29738: LIST
29739: LIST
29740: LIST
29741: PPUSH
29742: CALL_OW 69
29746: NOT
29747: IFFALSE 29757
// weapon := ru_time_lapser ;
29749: LD_ADDR_VAR 0 18
29753: PUSH
29754: LD_INT 49
29756: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
29757: LD_VAR 0 12
29761: PUSH
29762: LD_INT 1
29764: PUSH
29765: LD_INT 2
29767: PUSH
29768: EMPTY
29769: LIST
29770: LIST
29771: IN
29772: PUSH
29773: LD_INT 11
29775: PUSH
29776: LD_VAR 0 5
29780: IN
29781: PUSH
29782: LD_INT 30
29784: PUSH
29785: LD_VAR 0 5
29789: IN
29790: OR
29791: AND
29792: PUSH
29793: LD_INT 6
29795: PPUSH
29796: LD_VAR 0 16
29800: PPUSH
29801: CALL_OW 321
29805: PUSH
29806: LD_INT 2
29808: EQUAL
29809: AND
29810: IFFALSE 29975
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
29812: LD_INT 22
29814: PUSH
29815: LD_VAR 0 16
29819: PUSH
29820: EMPTY
29821: LIST
29822: LIST
29823: PUSH
29824: LD_INT 2
29826: PUSH
29827: LD_INT 35
29829: PUSH
29830: LD_INT 11
29832: PUSH
29833: EMPTY
29834: LIST
29835: LIST
29836: PUSH
29837: LD_INT 35
29839: PUSH
29840: LD_INT 30
29842: PUSH
29843: EMPTY
29844: LIST
29845: LIST
29846: PUSH
29847: EMPTY
29848: LIST
29849: LIST
29850: LIST
29851: PUSH
29852: LD_INT 91
29854: PUSH
29855: LD_VAR 0 1
29859: PUSH
29860: LD_INT 18
29862: PUSH
29863: EMPTY
29864: LIST
29865: LIST
29866: LIST
29867: PUSH
29868: EMPTY
29869: LIST
29870: LIST
29871: LIST
29872: PPUSH
29873: CALL_OW 69
29877: NOT
29878: PUSH
29879: LD_INT 22
29881: PUSH
29882: LD_VAR 0 16
29886: PUSH
29887: EMPTY
29888: LIST
29889: LIST
29890: PUSH
29891: LD_INT 2
29893: PUSH
29894: LD_INT 30
29896: PUSH
29897: LD_INT 32
29899: PUSH
29900: EMPTY
29901: LIST
29902: LIST
29903: PUSH
29904: LD_INT 30
29906: PUSH
29907: LD_INT 33
29909: PUSH
29910: EMPTY
29911: LIST
29912: LIST
29913: PUSH
29914: EMPTY
29915: LIST
29916: LIST
29917: LIST
29918: PUSH
29919: LD_INT 91
29921: PUSH
29922: LD_VAR 0 1
29926: PUSH
29927: LD_INT 12
29929: PUSH
29930: EMPTY
29931: LIST
29932: LIST
29933: LIST
29934: PUSH
29935: EMPTY
29936: LIST
29937: LIST
29938: LIST
29939: PUSH
29940: EMPTY
29941: LIST
29942: PPUSH
29943: CALL_OW 69
29947: PUSH
29948: LD_INT 2
29950: GREATER
29951: AND
29952: IFFALSE 29975
// weapon := [ us_radar , ar_radar ] [ nat ] ;
29954: LD_ADDR_VAR 0 18
29958: PUSH
29959: LD_INT 11
29961: PUSH
29962: LD_INT 30
29964: PUSH
29965: EMPTY
29966: LIST
29967: LIST
29968: PUSH
29969: LD_VAR 0 12
29973: ARRAY
29974: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
29975: LD_VAR 0 18
29979: NOT
29980: PUSH
29981: LD_INT 40
29983: PPUSH
29984: LD_VAR 0 16
29988: PPUSH
29989: CALL_OW 321
29993: PUSH
29994: LD_INT 2
29996: EQUAL
29997: AND
29998: PUSH
29999: LD_INT 7
30001: PUSH
30002: LD_VAR 0 5
30006: IN
30007: PUSH
30008: LD_INT 28
30010: PUSH
30011: LD_VAR 0 5
30015: IN
30016: OR
30017: PUSH
30018: LD_INT 45
30020: PUSH
30021: LD_VAR 0 5
30025: IN
30026: OR
30027: AND
30028: IFFALSE 30282
// begin hex := GetHexInfo ( x , y ) ;
30030: LD_ADDR_VAR 0 4
30034: PUSH
30035: LD_VAR 0 10
30039: PPUSH
30040: LD_VAR 0 11
30044: PPUSH
30045: CALL_OW 546
30049: ST_TO_ADDR
// if hex [ 1 ] then
30050: LD_VAR 0 4
30054: PUSH
30055: LD_INT 1
30057: ARRAY
30058: IFFALSE 30062
// exit ;
30060: GO 30465
// height := hex [ 2 ] ;
30062: LD_ADDR_VAR 0 15
30066: PUSH
30067: LD_VAR 0 4
30071: PUSH
30072: LD_INT 2
30074: ARRAY
30075: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
30076: LD_ADDR_VAR 0 14
30080: PUSH
30081: LD_INT 0
30083: PUSH
30084: LD_INT 2
30086: PUSH
30087: LD_INT 3
30089: PUSH
30090: LD_INT 5
30092: PUSH
30093: EMPTY
30094: LIST
30095: LIST
30096: LIST
30097: LIST
30098: ST_TO_ADDR
// for i in tmp do
30099: LD_ADDR_VAR 0 8
30103: PUSH
30104: LD_VAR 0 14
30108: PUSH
30109: FOR_IN
30110: IFFALSE 30280
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
30112: LD_ADDR_VAR 0 9
30116: PUSH
30117: LD_VAR 0 10
30121: PPUSH
30122: LD_VAR 0 8
30126: PPUSH
30127: LD_INT 5
30129: PPUSH
30130: CALL_OW 272
30134: PUSH
30135: LD_VAR 0 11
30139: PPUSH
30140: LD_VAR 0 8
30144: PPUSH
30145: LD_INT 5
30147: PPUSH
30148: CALL_OW 273
30152: PUSH
30153: EMPTY
30154: LIST
30155: LIST
30156: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
30157: LD_VAR 0 9
30161: PUSH
30162: LD_INT 1
30164: ARRAY
30165: PPUSH
30166: LD_VAR 0 9
30170: PUSH
30171: LD_INT 2
30173: ARRAY
30174: PPUSH
30175: CALL_OW 488
30179: IFFALSE 30278
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
30181: LD_ADDR_VAR 0 4
30185: PUSH
30186: LD_VAR 0 9
30190: PUSH
30191: LD_INT 1
30193: ARRAY
30194: PPUSH
30195: LD_VAR 0 9
30199: PUSH
30200: LD_INT 2
30202: ARRAY
30203: PPUSH
30204: CALL_OW 546
30208: ST_TO_ADDR
// if hex [ 1 ] then
30209: LD_VAR 0 4
30213: PUSH
30214: LD_INT 1
30216: ARRAY
30217: IFFALSE 30221
// continue ;
30219: GO 30109
// h := hex [ 2 ] ;
30221: LD_ADDR_VAR 0 13
30225: PUSH
30226: LD_VAR 0 4
30230: PUSH
30231: LD_INT 2
30233: ARRAY
30234: ST_TO_ADDR
// if h + 7 < height then
30235: LD_VAR 0 13
30239: PUSH
30240: LD_INT 7
30242: PLUS
30243: PUSH
30244: LD_VAR 0 15
30248: LESS
30249: IFFALSE 30278
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
30251: LD_ADDR_VAR 0 18
30255: PUSH
30256: LD_INT 7
30258: PUSH
30259: LD_INT 28
30261: PUSH
30262: LD_INT 45
30264: PUSH
30265: EMPTY
30266: LIST
30267: LIST
30268: LIST
30269: PUSH
30270: LD_VAR 0 12
30274: ARRAY
30275: ST_TO_ADDR
// break ;
30276: GO 30280
// end ; end ; end ;
30278: GO 30109
30280: POP
30281: POP
// end ; if not weapon then
30282: LD_VAR 0 18
30286: NOT
30287: IFFALSE 30347
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
30289: LD_ADDR_VAR 0 5
30293: PUSH
30294: LD_VAR 0 5
30298: PUSH
30299: LD_INT 11
30301: PUSH
30302: LD_INT 30
30304: PUSH
30305: LD_INT 49
30307: PUSH
30308: EMPTY
30309: LIST
30310: LIST
30311: LIST
30312: DIFF
30313: ST_TO_ADDR
// if not list then
30314: LD_VAR 0 5
30318: NOT
30319: IFFALSE 30323
// exit ;
30321: GO 30465
// weapon := list [ rand ( 1 , list ) ] ;
30323: LD_ADDR_VAR 0 18
30327: PUSH
30328: LD_VAR 0 5
30332: PUSH
30333: LD_INT 1
30335: PPUSH
30336: LD_VAR 0 5
30340: PPUSH
30341: CALL_OW 12
30345: ARRAY
30346: ST_TO_ADDR
// end ; if weapon then
30347: LD_VAR 0 18
30351: IFFALSE 30465
// begin tmp := CostOfWeapon ( weapon ) ;
30353: LD_ADDR_VAR 0 14
30357: PUSH
30358: LD_VAR 0 18
30362: PPUSH
30363: CALL_OW 451
30367: ST_TO_ADDR
// j := GetBase ( tower ) ;
30368: LD_ADDR_VAR 0 9
30372: PUSH
30373: LD_VAR 0 1
30377: PPUSH
30378: CALL_OW 274
30382: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
30383: LD_VAR 0 9
30387: PPUSH
30388: LD_INT 1
30390: PPUSH
30391: CALL_OW 275
30395: PUSH
30396: LD_VAR 0 14
30400: PUSH
30401: LD_INT 1
30403: ARRAY
30404: GREATEREQUAL
30405: PUSH
30406: LD_VAR 0 9
30410: PPUSH
30411: LD_INT 2
30413: PPUSH
30414: CALL_OW 275
30418: PUSH
30419: LD_VAR 0 14
30423: PUSH
30424: LD_INT 2
30426: ARRAY
30427: GREATEREQUAL
30428: AND
30429: PUSH
30430: LD_VAR 0 9
30434: PPUSH
30435: LD_INT 3
30437: PPUSH
30438: CALL_OW 275
30442: PUSH
30443: LD_VAR 0 14
30447: PUSH
30448: LD_INT 3
30450: ARRAY
30451: GREATEREQUAL
30452: AND
30453: IFFALSE 30465
// result := weapon ;
30455: LD_ADDR_VAR 0 3
30459: PUSH
30460: LD_VAR 0 18
30464: ST_TO_ADDR
// end ; end ;
30465: LD_VAR 0 3
30469: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
30470: LD_INT 0
30472: PPUSH
30473: PPUSH
// result := true ;
30474: LD_ADDR_VAR 0 3
30478: PUSH
30479: LD_INT 1
30481: ST_TO_ADDR
// if array1 = array2 then
30482: LD_VAR 0 1
30486: PUSH
30487: LD_VAR 0 2
30491: EQUAL
30492: IFFALSE 30552
// begin for i = 1 to array1 do
30494: LD_ADDR_VAR 0 4
30498: PUSH
30499: DOUBLE
30500: LD_INT 1
30502: DEC
30503: ST_TO_ADDR
30504: LD_VAR 0 1
30508: PUSH
30509: FOR_TO
30510: IFFALSE 30548
// if array1 [ i ] <> array2 [ i ] then
30512: LD_VAR 0 1
30516: PUSH
30517: LD_VAR 0 4
30521: ARRAY
30522: PUSH
30523: LD_VAR 0 2
30527: PUSH
30528: LD_VAR 0 4
30532: ARRAY
30533: NONEQUAL
30534: IFFALSE 30546
// begin result := false ;
30536: LD_ADDR_VAR 0 3
30540: PUSH
30541: LD_INT 0
30543: ST_TO_ADDR
// break ;
30544: GO 30548
// end ;
30546: GO 30509
30548: POP
30549: POP
// end else
30550: GO 30560
// result := false ;
30552: LD_ADDR_VAR 0 3
30556: PUSH
30557: LD_INT 0
30559: ST_TO_ADDR
// end ;
30560: LD_VAR 0 3
30564: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
30565: LD_INT 0
30567: PPUSH
30568: PPUSH
30569: PPUSH
// pom := GetBase ( fac ) ;
30570: LD_ADDR_VAR 0 5
30574: PUSH
30575: LD_VAR 0 1
30579: PPUSH
30580: CALL_OW 274
30584: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
30585: LD_ADDR_VAR 0 4
30589: PUSH
30590: LD_VAR 0 2
30594: PUSH
30595: LD_INT 1
30597: ARRAY
30598: PPUSH
30599: LD_VAR 0 2
30603: PUSH
30604: LD_INT 2
30606: ARRAY
30607: PPUSH
30608: LD_VAR 0 2
30612: PUSH
30613: LD_INT 3
30615: ARRAY
30616: PPUSH
30617: LD_VAR 0 2
30621: PUSH
30622: LD_INT 4
30624: ARRAY
30625: PPUSH
30626: CALL_OW 449
30630: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
30631: LD_ADDR_VAR 0 3
30635: PUSH
30636: LD_VAR 0 5
30640: PPUSH
30641: LD_INT 1
30643: PPUSH
30644: CALL_OW 275
30648: PUSH
30649: LD_VAR 0 4
30653: PUSH
30654: LD_INT 1
30656: ARRAY
30657: GREATEREQUAL
30658: PUSH
30659: LD_VAR 0 5
30663: PPUSH
30664: LD_INT 2
30666: PPUSH
30667: CALL_OW 275
30671: PUSH
30672: LD_VAR 0 4
30676: PUSH
30677: LD_INT 2
30679: ARRAY
30680: GREATEREQUAL
30681: AND
30682: PUSH
30683: LD_VAR 0 5
30687: PPUSH
30688: LD_INT 3
30690: PPUSH
30691: CALL_OW 275
30695: PUSH
30696: LD_VAR 0 4
30700: PUSH
30701: LD_INT 3
30703: ARRAY
30704: GREATEREQUAL
30705: AND
30706: ST_TO_ADDR
// end ;
30707: LD_VAR 0 3
30711: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
30712: LD_INT 0
30714: PPUSH
30715: PPUSH
30716: PPUSH
30717: PPUSH
// pom := GetBase ( building ) ;
30718: LD_ADDR_VAR 0 3
30722: PUSH
30723: LD_VAR 0 1
30727: PPUSH
30728: CALL_OW 274
30732: ST_TO_ADDR
// if not pom then
30733: LD_VAR 0 3
30737: NOT
30738: IFFALSE 30742
// exit ;
30740: GO 30912
// btype := GetBType ( building ) ;
30742: LD_ADDR_VAR 0 5
30746: PUSH
30747: LD_VAR 0 1
30751: PPUSH
30752: CALL_OW 266
30756: ST_TO_ADDR
// if btype = b_armoury then
30757: LD_VAR 0 5
30761: PUSH
30762: LD_INT 4
30764: EQUAL
30765: IFFALSE 30775
// btype := b_barracks ;
30767: LD_ADDR_VAR 0 5
30771: PUSH
30772: LD_INT 5
30774: ST_TO_ADDR
// if btype = b_depot then
30775: LD_VAR 0 5
30779: PUSH
30780: LD_INT 0
30782: EQUAL
30783: IFFALSE 30793
// btype := b_warehouse ;
30785: LD_ADDR_VAR 0 5
30789: PUSH
30790: LD_INT 1
30792: ST_TO_ADDR
// if btype = b_workshop then
30793: LD_VAR 0 5
30797: PUSH
30798: LD_INT 2
30800: EQUAL
30801: IFFALSE 30811
// btype := b_factory ;
30803: LD_ADDR_VAR 0 5
30807: PUSH
30808: LD_INT 3
30810: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
30811: LD_ADDR_VAR 0 4
30815: PUSH
30816: LD_VAR 0 5
30820: PPUSH
30821: LD_VAR 0 1
30825: PPUSH
30826: CALL_OW 248
30830: PPUSH
30831: CALL_OW 450
30835: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
30836: LD_ADDR_VAR 0 2
30840: PUSH
30841: LD_VAR 0 3
30845: PPUSH
30846: LD_INT 1
30848: PPUSH
30849: CALL_OW 275
30853: PUSH
30854: LD_VAR 0 4
30858: PUSH
30859: LD_INT 1
30861: ARRAY
30862: GREATEREQUAL
30863: PUSH
30864: LD_VAR 0 3
30868: PPUSH
30869: LD_INT 2
30871: PPUSH
30872: CALL_OW 275
30876: PUSH
30877: LD_VAR 0 4
30881: PUSH
30882: LD_INT 2
30884: ARRAY
30885: GREATEREQUAL
30886: AND
30887: PUSH
30888: LD_VAR 0 3
30892: PPUSH
30893: LD_INT 3
30895: PPUSH
30896: CALL_OW 275
30900: PUSH
30901: LD_VAR 0 4
30905: PUSH
30906: LD_INT 3
30908: ARRAY
30909: GREATEREQUAL
30910: AND
30911: ST_TO_ADDR
// end ;
30912: LD_VAR 0 2
30916: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
30917: LD_INT 0
30919: PPUSH
30920: PPUSH
30921: PPUSH
// pom := GetBase ( building ) ;
30922: LD_ADDR_VAR 0 4
30926: PUSH
30927: LD_VAR 0 1
30931: PPUSH
30932: CALL_OW 274
30936: ST_TO_ADDR
// if not pom then
30937: LD_VAR 0 4
30941: NOT
30942: IFFALSE 30946
// exit ;
30944: GO 31047
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
30946: LD_ADDR_VAR 0 5
30950: PUSH
30951: LD_VAR 0 2
30955: PPUSH
30956: LD_VAR 0 1
30960: PPUSH
30961: CALL_OW 248
30965: PPUSH
30966: CALL_OW 450
30970: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
30971: LD_ADDR_VAR 0 3
30975: PUSH
30976: LD_VAR 0 4
30980: PPUSH
30981: LD_INT 1
30983: PPUSH
30984: CALL_OW 275
30988: PUSH
30989: LD_VAR 0 5
30993: PUSH
30994: LD_INT 1
30996: ARRAY
30997: GREATEREQUAL
30998: PUSH
30999: LD_VAR 0 4
31003: PPUSH
31004: LD_INT 2
31006: PPUSH
31007: CALL_OW 275
31011: PUSH
31012: LD_VAR 0 5
31016: PUSH
31017: LD_INT 2
31019: ARRAY
31020: GREATEREQUAL
31021: AND
31022: PUSH
31023: LD_VAR 0 4
31027: PPUSH
31028: LD_INT 3
31030: PPUSH
31031: CALL_OW 275
31035: PUSH
31036: LD_VAR 0 5
31040: PUSH
31041: LD_INT 3
31043: ARRAY
31044: GREATEREQUAL
31045: AND
31046: ST_TO_ADDR
// end ;
31047: LD_VAR 0 3
31051: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
31052: LD_INT 0
31054: PPUSH
31055: PPUSH
31056: PPUSH
31057: PPUSH
31058: PPUSH
31059: PPUSH
31060: PPUSH
31061: PPUSH
31062: PPUSH
31063: PPUSH
// result := false ;
31064: LD_ADDR_VAR 0 6
31068: PUSH
31069: LD_INT 0
31071: ST_TO_ADDR
// if not base or not btype or not x or not y then
31072: LD_VAR 0 1
31076: NOT
31077: PUSH
31078: LD_VAR 0 2
31082: NOT
31083: OR
31084: PUSH
31085: LD_VAR 0 3
31089: NOT
31090: OR
31091: PUSH
31092: LD_VAR 0 4
31096: NOT
31097: OR
31098: IFFALSE 31102
// exit ;
31100: GO 31711
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
31102: LD_ADDR_VAR 0 12
31106: PUSH
31107: LD_VAR 0 2
31111: PPUSH
31112: LD_VAR 0 3
31116: PPUSH
31117: LD_VAR 0 4
31121: PPUSH
31122: LD_VAR 0 5
31126: PPUSH
31127: LD_VAR 0 1
31131: PUSH
31132: LD_INT 1
31134: ARRAY
31135: PPUSH
31136: CALL_OW 248
31140: PPUSH
31141: LD_INT 0
31143: PPUSH
31144: CALL 32548 0 6
31148: ST_TO_ADDR
// if not hexes then
31149: LD_VAR 0 12
31153: NOT
31154: IFFALSE 31158
// exit ;
31156: GO 31711
// for i = 1 to hexes do
31158: LD_ADDR_VAR 0 7
31162: PUSH
31163: DOUBLE
31164: LD_INT 1
31166: DEC
31167: ST_TO_ADDR
31168: LD_VAR 0 12
31172: PUSH
31173: FOR_TO
31174: IFFALSE 31709
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
31176: LD_ADDR_VAR 0 11
31180: PUSH
31181: LD_VAR 0 12
31185: PUSH
31186: LD_VAR 0 7
31190: ARRAY
31191: PUSH
31192: LD_INT 1
31194: ARRAY
31195: PPUSH
31196: LD_VAR 0 12
31200: PUSH
31201: LD_VAR 0 7
31205: ARRAY
31206: PUSH
31207: LD_INT 2
31209: ARRAY
31210: PPUSH
31211: CALL_OW 428
31215: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
31216: LD_VAR 0 12
31220: PUSH
31221: LD_VAR 0 7
31225: ARRAY
31226: PUSH
31227: LD_INT 1
31229: ARRAY
31230: PPUSH
31231: LD_VAR 0 12
31235: PUSH
31236: LD_VAR 0 7
31240: ARRAY
31241: PUSH
31242: LD_INT 2
31244: ARRAY
31245: PPUSH
31246: CALL_OW 351
31250: PUSH
31251: LD_VAR 0 12
31255: PUSH
31256: LD_VAR 0 7
31260: ARRAY
31261: PUSH
31262: LD_INT 1
31264: ARRAY
31265: PPUSH
31266: LD_VAR 0 12
31270: PUSH
31271: LD_VAR 0 7
31275: ARRAY
31276: PUSH
31277: LD_INT 2
31279: ARRAY
31280: PPUSH
31281: CALL_OW 488
31285: NOT
31286: OR
31287: PUSH
31288: LD_VAR 0 11
31292: PPUSH
31293: CALL_OW 247
31297: PUSH
31298: LD_INT 3
31300: EQUAL
31301: OR
31302: IFFALSE 31308
// exit ;
31304: POP
31305: POP
31306: GO 31711
// if not tmp or not tmp in base then
31308: LD_VAR 0 11
31312: NOT
31313: PUSH
31314: LD_VAR 0 11
31318: PUSH
31319: LD_VAR 0 1
31323: IN
31324: NOT
31325: OR
31326: IFFALSE 31330
// continue ;
31328: GO 31173
// result := true ;
31330: LD_ADDR_VAR 0 6
31334: PUSH
31335: LD_INT 1
31337: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31338: LD_ADDR_VAR 0 15
31342: PUSH
31343: LD_VAR 0 1
31347: PPUSH
31348: LD_INT 22
31350: PUSH
31351: LD_VAR 0 11
31355: PPUSH
31356: CALL_OW 255
31360: PUSH
31361: EMPTY
31362: LIST
31363: LIST
31364: PUSH
31365: LD_INT 2
31367: PUSH
31368: LD_INT 30
31370: PUSH
31371: LD_INT 0
31373: PUSH
31374: EMPTY
31375: LIST
31376: LIST
31377: PUSH
31378: LD_INT 30
31380: PUSH
31381: LD_INT 1
31383: PUSH
31384: EMPTY
31385: LIST
31386: LIST
31387: PUSH
31388: EMPTY
31389: LIST
31390: LIST
31391: LIST
31392: PUSH
31393: EMPTY
31394: LIST
31395: LIST
31396: PPUSH
31397: CALL_OW 72
31401: ST_TO_ADDR
// if dep then
31402: LD_VAR 0 15
31406: IFFALSE 31542
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
31408: LD_ADDR_VAR 0 14
31412: PUSH
31413: LD_VAR 0 15
31417: PUSH
31418: LD_INT 1
31420: ARRAY
31421: PPUSH
31422: CALL_OW 250
31426: PPUSH
31427: LD_VAR 0 15
31431: PUSH
31432: LD_INT 1
31434: ARRAY
31435: PPUSH
31436: CALL_OW 254
31440: PPUSH
31441: LD_INT 5
31443: PPUSH
31444: CALL_OW 272
31448: PUSH
31449: LD_VAR 0 15
31453: PUSH
31454: LD_INT 1
31456: ARRAY
31457: PPUSH
31458: CALL_OW 251
31462: PPUSH
31463: LD_VAR 0 15
31467: PUSH
31468: LD_INT 1
31470: ARRAY
31471: PPUSH
31472: CALL_OW 254
31476: PPUSH
31477: LD_INT 5
31479: PPUSH
31480: CALL_OW 273
31484: PUSH
31485: EMPTY
31486: LIST
31487: LIST
31488: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
31489: LD_VAR 0 14
31493: PUSH
31494: LD_INT 1
31496: ARRAY
31497: PPUSH
31498: LD_VAR 0 14
31502: PUSH
31503: LD_INT 2
31505: ARRAY
31506: PPUSH
31507: CALL_OW 488
31511: IFFALSE 31542
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
31513: LD_VAR 0 11
31517: PPUSH
31518: LD_VAR 0 14
31522: PUSH
31523: LD_INT 1
31525: ARRAY
31526: PPUSH
31527: LD_VAR 0 14
31531: PUSH
31532: LD_INT 2
31534: ARRAY
31535: PPUSH
31536: CALL_OW 111
// continue ;
31540: GO 31173
// end ; end ; r := GetDir ( tmp ) ;
31542: LD_ADDR_VAR 0 13
31546: PUSH
31547: LD_VAR 0 11
31551: PPUSH
31552: CALL_OW 254
31556: ST_TO_ADDR
// if r = 5 then
31557: LD_VAR 0 13
31561: PUSH
31562: LD_INT 5
31564: EQUAL
31565: IFFALSE 31575
// r := 0 ;
31567: LD_ADDR_VAR 0 13
31571: PUSH
31572: LD_INT 0
31574: ST_TO_ADDR
// for j = r to 5 do
31575: LD_ADDR_VAR 0 8
31579: PUSH
31580: DOUBLE
31581: LD_VAR 0 13
31585: DEC
31586: ST_TO_ADDR
31587: LD_INT 5
31589: PUSH
31590: FOR_TO
31591: IFFALSE 31705
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
31593: LD_ADDR_VAR 0 9
31597: PUSH
31598: LD_VAR 0 11
31602: PPUSH
31603: CALL_OW 250
31607: PPUSH
31608: LD_VAR 0 8
31612: PPUSH
31613: LD_INT 2
31615: PPUSH
31616: CALL_OW 272
31620: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
31621: LD_ADDR_VAR 0 10
31625: PUSH
31626: LD_VAR 0 11
31630: PPUSH
31631: CALL_OW 251
31635: PPUSH
31636: LD_VAR 0 8
31640: PPUSH
31641: LD_INT 2
31643: PPUSH
31644: CALL_OW 273
31648: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
31649: LD_VAR 0 9
31653: PPUSH
31654: LD_VAR 0 10
31658: PPUSH
31659: CALL_OW 488
31663: PUSH
31664: LD_VAR 0 9
31668: PPUSH
31669: LD_VAR 0 10
31673: PPUSH
31674: CALL_OW 428
31678: NOT
31679: AND
31680: IFFALSE 31703
// begin ComMoveXY ( tmp , _x , _y ) ;
31682: LD_VAR 0 11
31686: PPUSH
31687: LD_VAR 0 9
31691: PPUSH
31692: LD_VAR 0 10
31696: PPUSH
31697: CALL_OW 111
// break ;
31701: GO 31705
// end ; end ;
31703: GO 31590
31705: POP
31706: POP
// end ;
31707: GO 31173
31709: POP
31710: POP
// end ;
31711: LD_VAR 0 6
31715: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
31716: LD_INT 0
31718: PPUSH
31719: PPUSH
31720: PPUSH
31721: PPUSH
31722: PPUSH
31723: PPUSH
31724: PPUSH
31725: PPUSH
31726: PPUSH
31727: PPUSH
// result := false ;
31728: LD_ADDR_VAR 0 6
31732: PUSH
31733: LD_INT 0
31735: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
31736: LD_VAR 0 1
31740: NOT
31741: PUSH
31742: LD_VAR 0 1
31746: PPUSH
31747: CALL_OW 266
31751: PUSH
31752: LD_INT 0
31754: PUSH
31755: LD_INT 1
31757: PUSH
31758: EMPTY
31759: LIST
31760: LIST
31761: IN
31762: NOT
31763: OR
31764: PUSH
31765: LD_VAR 0 2
31769: NOT
31770: OR
31771: PUSH
31772: LD_VAR 0 5
31776: PUSH
31777: LD_INT 0
31779: PUSH
31780: LD_INT 1
31782: PUSH
31783: LD_INT 2
31785: PUSH
31786: LD_INT 3
31788: PUSH
31789: LD_INT 4
31791: PUSH
31792: LD_INT 5
31794: PUSH
31795: EMPTY
31796: LIST
31797: LIST
31798: LIST
31799: LIST
31800: LIST
31801: LIST
31802: IN
31803: NOT
31804: OR
31805: PUSH
31806: LD_VAR 0 3
31810: PPUSH
31811: LD_VAR 0 4
31815: PPUSH
31816: CALL_OW 488
31820: NOT
31821: OR
31822: IFFALSE 31826
// exit ;
31824: GO 32543
// pom := GetBase ( depot ) ;
31826: LD_ADDR_VAR 0 10
31830: PUSH
31831: LD_VAR 0 1
31835: PPUSH
31836: CALL_OW 274
31840: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
31841: LD_ADDR_VAR 0 11
31845: PUSH
31846: LD_VAR 0 2
31850: PPUSH
31851: LD_VAR 0 1
31855: PPUSH
31856: CALL_OW 248
31860: PPUSH
31861: CALL_OW 450
31865: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
31866: LD_VAR 0 10
31870: PPUSH
31871: LD_INT 1
31873: PPUSH
31874: CALL_OW 275
31878: PUSH
31879: LD_VAR 0 11
31883: PUSH
31884: LD_INT 1
31886: ARRAY
31887: GREATEREQUAL
31888: PUSH
31889: LD_VAR 0 10
31893: PPUSH
31894: LD_INT 2
31896: PPUSH
31897: CALL_OW 275
31901: PUSH
31902: LD_VAR 0 11
31906: PUSH
31907: LD_INT 2
31909: ARRAY
31910: GREATEREQUAL
31911: AND
31912: PUSH
31913: LD_VAR 0 10
31917: PPUSH
31918: LD_INT 3
31920: PPUSH
31921: CALL_OW 275
31925: PUSH
31926: LD_VAR 0 11
31930: PUSH
31931: LD_INT 3
31933: ARRAY
31934: GREATEREQUAL
31935: AND
31936: NOT
31937: IFFALSE 31941
// exit ;
31939: GO 32543
// if GetBType ( depot ) = b_depot then
31941: LD_VAR 0 1
31945: PPUSH
31946: CALL_OW 266
31950: PUSH
31951: LD_INT 0
31953: EQUAL
31954: IFFALSE 31966
// dist := 28 else
31956: LD_ADDR_VAR 0 14
31960: PUSH
31961: LD_INT 28
31963: ST_TO_ADDR
31964: GO 31974
// dist := 36 ;
31966: LD_ADDR_VAR 0 14
31970: PUSH
31971: LD_INT 36
31973: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
31974: LD_VAR 0 1
31978: PPUSH
31979: LD_VAR 0 3
31983: PPUSH
31984: LD_VAR 0 4
31988: PPUSH
31989: CALL_OW 297
31993: PUSH
31994: LD_VAR 0 14
31998: GREATER
31999: IFFALSE 32003
// exit ;
32001: GO 32543
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
32003: LD_ADDR_VAR 0 12
32007: PUSH
32008: LD_VAR 0 2
32012: PPUSH
32013: LD_VAR 0 3
32017: PPUSH
32018: LD_VAR 0 4
32022: PPUSH
32023: LD_VAR 0 5
32027: PPUSH
32028: LD_VAR 0 1
32032: PPUSH
32033: CALL_OW 248
32037: PPUSH
32038: LD_INT 0
32040: PPUSH
32041: CALL 32548 0 6
32045: ST_TO_ADDR
// if not hexes then
32046: LD_VAR 0 12
32050: NOT
32051: IFFALSE 32055
// exit ;
32053: GO 32543
// hex := GetHexInfo ( x , y ) ;
32055: LD_ADDR_VAR 0 15
32059: PUSH
32060: LD_VAR 0 3
32064: PPUSH
32065: LD_VAR 0 4
32069: PPUSH
32070: CALL_OW 546
32074: ST_TO_ADDR
// if hex [ 1 ] then
32075: LD_VAR 0 15
32079: PUSH
32080: LD_INT 1
32082: ARRAY
32083: IFFALSE 32087
// exit ;
32085: GO 32543
// height := hex [ 2 ] ;
32087: LD_ADDR_VAR 0 13
32091: PUSH
32092: LD_VAR 0 15
32096: PUSH
32097: LD_INT 2
32099: ARRAY
32100: ST_TO_ADDR
// for i = 1 to hexes do
32101: LD_ADDR_VAR 0 7
32105: PUSH
32106: DOUBLE
32107: LD_INT 1
32109: DEC
32110: ST_TO_ADDR
32111: LD_VAR 0 12
32115: PUSH
32116: FOR_TO
32117: IFFALSE 32447
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
32119: LD_VAR 0 12
32123: PUSH
32124: LD_VAR 0 7
32128: ARRAY
32129: PUSH
32130: LD_INT 1
32132: ARRAY
32133: PPUSH
32134: LD_VAR 0 12
32138: PUSH
32139: LD_VAR 0 7
32143: ARRAY
32144: PUSH
32145: LD_INT 2
32147: ARRAY
32148: PPUSH
32149: CALL_OW 488
32153: NOT
32154: PUSH
32155: LD_VAR 0 12
32159: PUSH
32160: LD_VAR 0 7
32164: ARRAY
32165: PUSH
32166: LD_INT 1
32168: ARRAY
32169: PPUSH
32170: LD_VAR 0 12
32174: PUSH
32175: LD_VAR 0 7
32179: ARRAY
32180: PUSH
32181: LD_INT 2
32183: ARRAY
32184: PPUSH
32185: CALL_OW 428
32189: PUSH
32190: LD_INT 0
32192: GREATER
32193: OR
32194: PUSH
32195: LD_VAR 0 12
32199: PUSH
32200: LD_VAR 0 7
32204: ARRAY
32205: PUSH
32206: LD_INT 1
32208: ARRAY
32209: PPUSH
32210: LD_VAR 0 12
32214: PUSH
32215: LD_VAR 0 7
32219: ARRAY
32220: PUSH
32221: LD_INT 2
32223: ARRAY
32224: PPUSH
32225: CALL_OW 351
32229: OR
32230: IFFALSE 32236
// exit ;
32232: POP
32233: POP
32234: GO 32543
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
32236: LD_ADDR_VAR 0 8
32240: PUSH
32241: LD_VAR 0 12
32245: PUSH
32246: LD_VAR 0 7
32250: ARRAY
32251: PUSH
32252: LD_INT 1
32254: ARRAY
32255: PPUSH
32256: LD_VAR 0 12
32260: PUSH
32261: LD_VAR 0 7
32265: ARRAY
32266: PUSH
32267: LD_INT 2
32269: ARRAY
32270: PPUSH
32271: CALL_OW 546
32275: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
32276: LD_VAR 0 8
32280: PUSH
32281: LD_INT 1
32283: ARRAY
32284: PUSH
32285: LD_VAR 0 8
32289: PUSH
32290: LD_INT 2
32292: ARRAY
32293: PUSH
32294: LD_VAR 0 13
32298: PUSH
32299: LD_INT 2
32301: PLUS
32302: GREATER
32303: OR
32304: PUSH
32305: LD_VAR 0 8
32309: PUSH
32310: LD_INT 2
32312: ARRAY
32313: PUSH
32314: LD_VAR 0 13
32318: PUSH
32319: LD_INT 2
32321: MINUS
32322: LESS
32323: OR
32324: PUSH
32325: LD_VAR 0 8
32329: PUSH
32330: LD_INT 3
32332: ARRAY
32333: PUSH
32334: LD_INT 0
32336: PUSH
32337: LD_INT 8
32339: PUSH
32340: LD_INT 9
32342: PUSH
32343: LD_INT 10
32345: PUSH
32346: LD_INT 11
32348: PUSH
32349: LD_INT 12
32351: PUSH
32352: LD_INT 13
32354: PUSH
32355: LD_INT 16
32357: PUSH
32358: LD_INT 17
32360: PUSH
32361: LD_INT 18
32363: PUSH
32364: LD_INT 19
32366: PUSH
32367: LD_INT 20
32369: PUSH
32370: LD_INT 21
32372: PUSH
32373: EMPTY
32374: LIST
32375: LIST
32376: LIST
32377: LIST
32378: LIST
32379: LIST
32380: LIST
32381: LIST
32382: LIST
32383: LIST
32384: LIST
32385: LIST
32386: LIST
32387: IN
32388: NOT
32389: OR
32390: PUSH
32391: LD_VAR 0 8
32395: PUSH
32396: LD_INT 5
32398: ARRAY
32399: NOT
32400: OR
32401: PUSH
32402: LD_VAR 0 8
32406: PUSH
32407: LD_INT 6
32409: ARRAY
32410: PUSH
32411: LD_INT 1
32413: PUSH
32414: LD_INT 2
32416: PUSH
32417: LD_INT 7
32419: PUSH
32420: LD_INT 9
32422: PUSH
32423: LD_INT 10
32425: PUSH
32426: LD_INT 11
32428: PUSH
32429: EMPTY
32430: LIST
32431: LIST
32432: LIST
32433: LIST
32434: LIST
32435: LIST
32436: IN
32437: NOT
32438: OR
32439: IFFALSE 32445
// exit ;
32441: POP
32442: POP
32443: GO 32543
// end ;
32445: GO 32116
32447: POP
32448: POP
// side := GetSide ( depot ) ;
32449: LD_ADDR_VAR 0 9
32453: PUSH
32454: LD_VAR 0 1
32458: PPUSH
32459: CALL_OW 255
32463: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
32464: LD_VAR 0 9
32468: PPUSH
32469: LD_VAR 0 3
32473: PPUSH
32474: LD_VAR 0 4
32478: PPUSH
32479: LD_INT 20
32481: PPUSH
32482: CALL 25197 0 4
32486: PUSH
32487: LD_INT 4
32489: ARRAY
32490: IFFALSE 32494
// exit ;
32492: GO 32543
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
32494: LD_VAR 0 2
32498: PUSH
32499: LD_INT 29
32501: PUSH
32502: LD_INT 30
32504: PUSH
32505: EMPTY
32506: LIST
32507: LIST
32508: IN
32509: PUSH
32510: LD_VAR 0 3
32514: PPUSH
32515: LD_VAR 0 4
32519: PPUSH
32520: LD_VAR 0 9
32524: PPUSH
32525: CALL_OW 440
32529: NOT
32530: AND
32531: IFFALSE 32535
// exit ;
32533: GO 32543
// result := true ;
32535: LD_ADDR_VAR 0 6
32539: PUSH
32540: LD_INT 1
32542: ST_TO_ADDR
// end ;
32543: LD_VAR 0 6
32547: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
32548: LD_INT 0
32550: PPUSH
32551: PPUSH
32552: PPUSH
32553: PPUSH
32554: PPUSH
32555: PPUSH
32556: PPUSH
32557: PPUSH
32558: PPUSH
32559: PPUSH
32560: PPUSH
32561: PPUSH
32562: PPUSH
32563: PPUSH
32564: PPUSH
32565: PPUSH
32566: PPUSH
32567: PPUSH
32568: PPUSH
32569: PPUSH
32570: PPUSH
32571: PPUSH
32572: PPUSH
32573: PPUSH
32574: PPUSH
32575: PPUSH
32576: PPUSH
32577: PPUSH
32578: PPUSH
32579: PPUSH
32580: PPUSH
32581: PPUSH
32582: PPUSH
32583: PPUSH
32584: PPUSH
32585: PPUSH
32586: PPUSH
32587: PPUSH
32588: PPUSH
32589: PPUSH
32590: PPUSH
32591: PPUSH
32592: PPUSH
32593: PPUSH
32594: PPUSH
32595: PPUSH
32596: PPUSH
32597: PPUSH
32598: PPUSH
32599: PPUSH
32600: PPUSH
32601: PPUSH
32602: PPUSH
32603: PPUSH
32604: PPUSH
32605: PPUSH
32606: PPUSH
32607: PPUSH
// result = [ ] ;
32608: LD_ADDR_VAR 0 7
32612: PUSH
32613: EMPTY
32614: ST_TO_ADDR
// temp_list = [ ] ;
32615: LD_ADDR_VAR 0 9
32619: PUSH
32620: EMPTY
32621: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
32622: LD_VAR 0 4
32626: PUSH
32627: LD_INT 0
32629: PUSH
32630: LD_INT 1
32632: PUSH
32633: LD_INT 2
32635: PUSH
32636: LD_INT 3
32638: PUSH
32639: LD_INT 4
32641: PUSH
32642: LD_INT 5
32644: PUSH
32645: EMPTY
32646: LIST
32647: LIST
32648: LIST
32649: LIST
32650: LIST
32651: LIST
32652: IN
32653: NOT
32654: PUSH
32655: LD_VAR 0 1
32659: PUSH
32660: LD_INT 0
32662: PUSH
32663: LD_INT 1
32665: PUSH
32666: EMPTY
32667: LIST
32668: LIST
32669: IN
32670: PUSH
32671: LD_VAR 0 5
32675: PUSH
32676: LD_INT 1
32678: PUSH
32679: LD_INT 2
32681: PUSH
32682: LD_INT 3
32684: PUSH
32685: EMPTY
32686: LIST
32687: LIST
32688: LIST
32689: IN
32690: NOT
32691: AND
32692: OR
32693: IFFALSE 32697
// exit ;
32695: GO 51088
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
32697: LD_VAR 0 1
32701: PUSH
32702: LD_INT 6
32704: PUSH
32705: LD_INT 7
32707: PUSH
32708: LD_INT 8
32710: PUSH
32711: LD_INT 13
32713: PUSH
32714: LD_INT 12
32716: PUSH
32717: LD_INT 15
32719: PUSH
32720: LD_INT 11
32722: PUSH
32723: LD_INT 14
32725: PUSH
32726: LD_INT 10
32728: PUSH
32729: EMPTY
32730: LIST
32731: LIST
32732: LIST
32733: LIST
32734: LIST
32735: LIST
32736: LIST
32737: LIST
32738: LIST
32739: IN
32740: IFFALSE 32750
// btype = b_lab ;
32742: LD_ADDR_VAR 0 1
32746: PUSH
32747: LD_INT 6
32749: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
32750: LD_VAR 0 6
32754: PUSH
32755: LD_INT 0
32757: PUSH
32758: LD_INT 1
32760: PUSH
32761: LD_INT 2
32763: PUSH
32764: EMPTY
32765: LIST
32766: LIST
32767: LIST
32768: IN
32769: NOT
32770: PUSH
32771: LD_VAR 0 1
32775: PUSH
32776: LD_INT 0
32778: PUSH
32779: LD_INT 1
32781: PUSH
32782: LD_INT 2
32784: PUSH
32785: LD_INT 3
32787: PUSH
32788: LD_INT 6
32790: PUSH
32791: LD_INT 36
32793: PUSH
32794: LD_INT 4
32796: PUSH
32797: LD_INT 5
32799: PUSH
32800: LD_INT 31
32802: PUSH
32803: LD_INT 32
32805: PUSH
32806: LD_INT 33
32808: PUSH
32809: EMPTY
32810: LIST
32811: LIST
32812: LIST
32813: LIST
32814: LIST
32815: LIST
32816: LIST
32817: LIST
32818: LIST
32819: LIST
32820: LIST
32821: IN
32822: NOT
32823: PUSH
32824: LD_VAR 0 6
32828: PUSH
32829: LD_INT 1
32831: EQUAL
32832: AND
32833: OR
32834: PUSH
32835: LD_VAR 0 1
32839: PUSH
32840: LD_INT 2
32842: PUSH
32843: LD_INT 3
32845: PUSH
32846: EMPTY
32847: LIST
32848: LIST
32849: IN
32850: NOT
32851: PUSH
32852: LD_VAR 0 6
32856: PUSH
32857: LD_INT 2
32859: EQUAL
32860: AND
32861: OR
32862: IFFALSE 32872
// mode = 0 ;
32864: LD_ADDR_VAR 0 6
32868: PUSH
32869: LD_INT 0
32871: ST_TO_ADDR
// case mode of 0 :
32872: LD_VAR 0 6
32876: PUSH
32877: LD_INT 0
32879: DOUBLE
32880: EQUAL
32881: IFTRUE 32885
32883: GO 44338
32885: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
32886: LD_ADDR_VAR 0 11
32890: PUSH
32891: LD_INT 0
32893: PUSH
32894: LD_INT 0
32896: PUSH
32897: EMPTY
32898: LIST
32899: LIST
32900: PUSH
32901: LD_INT 0
32903: PUSH
32904: LD_INT 1
32906: NEG
32907: PUSH
32908: EMPTY
32909: LIST
32910: LIST
32911: PUSH
32912: LD_INT 1
32914: PUSH
32915: LD_INT 0
32917: PUSH
32918: EMPTY
32919: LIST
32920: LIST
32921: PUSH
32922: LD_INT 1
32924: PUSH
32925: LD_INT 1
32927: PUSH
32928: EMPTY
32929: LIST
32930: LIST
32931: PUSH
32932: LD_INT 0
32934: PUSH
32935: LD_INT 1
32937: PUSH
32938: EMPTY
32939: LIST
32940: LIST
32941: PUSH
32942: LD_INT 1
32944: NEG
32945: PUSH
32946: LD_INT 0
32948: PUSH
32949: EMPTY
32950: LIST
32951: LIST
32952: PUSH
32953: LD_INT 1
32955: NEG
32956: PUSH
32957: LD_INT 1
32959: NEG
32960: PUSH
32961: EMPTY
32962: LIST
32963: LIST
32964: PUSH
32965: LD_INT 1
32967: NEG
32968: PUSH
32969: LD_INT 2
32971: NEG
32972: PUSH
32973: EMPTY
32974: LIST
32975: LIST
32976: PUSH
32977: LD_INT 0
32979: PUSH
32980: LD_INT 2
32982: NEG
32983: PUSH
32984: EMPTY
32985: LIST
32986: LIST
32987: PUSH
32988: LD_INT 1
32990: PUSH
32991: LD_INT 1
32993: NEG
32994: PUSH
32995: EMPTY
32996: LIST
32997: LIST
32998: PUSH
32999: LD_INT 1
33001: PUSH
33002: LD_INT 2
33004: PUSH
33005: EMPTY
33006: LIST
33007: LIST
33008: PUSH
33009: LD_INT 0
33011: PUSH
33012: LD_INT 2
33014: PUSH
33015: EMPTY
33016: LIST
33017: LIST
33018: PUSH
33019: LD_INT 1
33021: NEG
33022: PUSH
33023: LD_INT 1
33025: PUSH
33026: EMPTY
33027: LIST
33028: LIST
33029: PUSH
33030: LD_INT 1
33032: PUSH
33033: LD_INT 3
33035: PUSH
33036: EMPTY
33037: LIST
33038: LIST
33039: PUSH
33040: LD_INT 0
33042: PUSH
33043: LD_INT 3
33045: PUSH
33046: EMPTY
33047: LIST
33048: LIST
33049: PUSH
33050: LD_INT 1
33052: NEG
33053: PUSH
33054: LD_INT 2
33056: PUSH
33057: EMPTY
33058: LIST
33059: LIST
33060: PUSH
33061: EMPTY
33062: LIST
33063: LIST
33064: LIST
33065: LIST
33066: LIST
33067: LIST
33068: LIST
33069: LIST
33070: LIST
33071: LIST
33072: LIST
33073: LIST
33074: LIST
33075: LIST
33076: LIST
33077: LIST
33078: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33079: LD_ADDR_VAR 0 12
33083: PUSH
33084: LD_INT 0
33086: PUSH
33087: LD_INT 0
33089: PUSH
33090: EMPTY
33091: LIST
33092: LIST
33093: PUSH
33094: LD_INT 0
33096: PUSH
33097: LD_INT 1
33099: NEG
33100: PUSH
33101: EMPTY
33102: LIST
33103: LIST
33104: PUSH
33105: LD_INT 1
33107: PUSH
33108: LD_INT 0
33110: PUSH
33111: EMPTY
33112: LIST
33113: LIST
33114: PUSH
33115: LD_INT 1
33117: PUSH
33118: LD_INT 1
33120: PUSH
33121: EMPTY
33122: LIST
33123: LIST
33124: PUSH
33125: LD_INT 0
33127: PUSH
33128: LD_INT 1
33130: PUSH
33131: EMPTY
33132: LIST
33133: LIST
33134: PUSH
33135: LD_INT 1
33137: NEG
33138: PUSH
33139: LD_INT 0
33141: PUSH
33142: EMPTY
33143: LIST
33144: LIST
33145: PUSH
33146: LD_INT 1
33148: NEG
33149: PUSH
33150: LD_INT 1
33152: NEG
33153: PUSH
33154: EMPTY
33155: LIST
33156: LIST
33157: PUSH
33158: LD_INT 1
33160: PUSH
33161: LD_INT 1
33163: NEG
33164: PUSH
33165: EMPTY
33166: LIST
33167: LIST
33168: PUSH
33169: LD_INT 2
33171: PUSH
33172: LD_INT 0
33174: PUSH
33175: EMPTY
33176: LIST
33177: LIST
33178: PUSH
33179: LD_INT 2
33181: PUSH
33182: LD_INT 1
33184: PUSH
33185: EMPTY
33186: LIST
33187: LIST
33188: PUSH
33189: LD_INT 1
33191: NEG
33192: PUSH
33193: LD_INT 1
33195: PUSH
33196: EMPTY
33197: LIST
33198: LIST
33199: PUSH
33200: LD_INT 2
33202: NEG
33203: PUSH
33204: LD_INT 0
33206: PUSH
33207: EMPTY
33208: LIST
33209: LIST
33210: PUSH
33211: LD_INT 2
33213: NEG
33214: PUSH
33215: LD_INT 1
33217: NEG
33218: PUSH
33219: EMPTY
33220: LIST
33221: LIST
33222: PUSH
33223: LD_INT 2
33225: NEG
33226: PUSH
33227: LD_INT 1
33229: PUSH
33230: EMPTY
33231: LIST
33232: LIST
33233: PUSH
33234: LD_INT 3
33236: NEG
33237: PUSH
33238: LD_INT 0
33240: PUSH
33241: EMPTY
33242: LIST
33243: LIST
33244: PUSH
33245: LD_INT 3
33247: NEG
33248: PUSH
33249: LD_INT 1
33251: NEG
33252: PUSH
33253: EMPTY
33254: LIST
33255: LIST
33256: PUSH
33257: EMPTY
33258: LIST
33259: LIST
33260: LIST
33261: LIST
33262: LIST
33263: LIST
33264: LIST
33265: LIST
33266: LIST
33267: LIST
33268: LIST
33269: LIST
33270: LIST
33271: LIST
33272: LIST
33273: LIST
33274: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33275: LD_ADDR_VAR 0 13
33279: PUSH
33280: LD_INT 0
33282: PUSH
33283: LD_INT 0
33285: PUSH
33286: EMPTY
33287: LIST
33288: LIST
33289: PUSH
33290: LD_INT 0
33292: PUSH
33293: LD_INT 1
33295: NEG
33296: PUSH
33297: EMPTY
33298: LIST
33299: LIST
33300: PUSH
33301: LD_INT 1
33303: PUSH
33304: LD_INT 0
33306: PUSH
33307: EMPTY
33308: LIST
33309: LIST
33310: PUSH
33311: LD_INT 1
33313: PUSH
33314: LD_INT 1
33316: PUSH
33317: EMPTY
33318: LIST
33319: LIST
33320: PUSH
33321: LD_INT 0
33323: PUSH
33324: LD_INT 1
33326: PUSH
33327: EMPTY
33328: LIST
33329: LIST
33330: PUSH
33331: LD_INT 1
33333: NEG
33334: PUSH
33335: LD_INT 0
33337: PUSH
33338: EMPTY
33339: LIST
33340: LIST
33341: PUSH
33342: LD_INT 1
33344: NEG
33345: PUSH
33346: LD_INT 1
33348: NEG
33349: PUSH
33350: EMPTY
33351: LIST
33352: LIST
33353: PUSH
33354: LD_INT 1
33356: NEG
33357: PUSH
33358: LD_INT 2
33360: NEG
33361: PUSH
33362: EMPTY
33363: LIST
33364: LIST
33365: PUSH
33366: LD_INT 2
33368: PUSH
33369: LD_INT 1
33371: PUSH
33372: EMPTY
33373: LIST
33374: LIST
33375: PUSH
33376: LD_INT 2
33378: PUSH
33379: LD_INT 2
33381: PUSH
33382: EMPTY
33383: LIST
33384: LIST
33385: PUSH
33386: LD_INT 1
33388: PUSH
33389: LD_INT 2
33391: PUSH
33392: EMPTY
33393: LIST
33394: LIST
33395: PUSH
33396: LD_INT 2
33398: NEG
33399: PUSH
33400: LD_INT 1
33402: NEG
33403: PUSH
33404: EMPTY
33405: LIST
33406: LIST
33407: PUSH
33408: LD_INT 2
33410: NEG
33411: PUSH
33412: LD_INT 2
33414: NEG
33415: PUSH
33416: EMPTY
33417: LIST
33418: LIST
33419: PUSH
33420: LD_INT 2
33422: NEG
33423: PUSH
33424: LD_INT 3
33426: NEG
33427: PUSH
33428: EMPTY
33429: LIST
33430: LIST
33431: PUSH
33432: LD_INT 3
33434: NEG
33435: PUSH
33436: LD_INT 2
33438: NEG
33439: PUSH
33440: EMPTY
33441: LIST
33442: LIST
33443: PUSH
33444: LD_INT 3
33446: NEG
33447: PUSH
33448: LD_INT 3
33450: NEG
33451: PUSH
33452: EMPTY
33453: LIST
33454: LIST
33455: PUSH
33456: EMPTY
33457: LIST
33458: LIST
33459: LIST
33460: LIST
33461: LIST
33462: LIST
33463: LIST
33464: LIST
33465: LIST
33466: LIST
33467: LIST
33468: LIST
33469: LIST
33470: LIST
33471: LIST
33472: LIST
33473: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
33474: LD_ADDR_VAR 0 14
33478: PUSH
33479: LD_INT 0
33481: PUSH
33482: LD_INT 0
33484: PUSH
33485: EMPTY
33486: LIST
33487: LIST
33488: PUSH
33489: LD_INT 0
33491: PUSH
33492: LD_INT 1
33494: NEG
33495: PUSH
33496: EMPTY
33497: LIST
33498: LIST
33499: PUSH
33500: LD_INT 1
33502: PUSH
33503: LD_INT 0
33505: PUSH
33506: EMPTY
33507: LIST
33508: LIST
33509: PUSH
33510: LD_INT 1
33512: PUSH
33513: LD_INT 1
33515: PUSH
33516: EMPTY
33517: LIST
33518: LIST
33519: PUSH
33520: LD_INT 0
33522: PUSH
33523: LD_INT 1
33525: PUSH
33526: EMPTY
33527: LIST
33528: LIST
33529: PUSH
33530: LD_INT 1
33532: NEG
33533: PUSH
33534: LD_INT 0
33536: PUSH
33537: EMPTY
33538: LIST
33539: LIST
33540: PUSH
33541: LD_INT 1
33543: NEG
33544: PUSH
33545: LD_INT 1
33547: NEG
33548: PUSH
33549: EMPTY
33550: LIST
33551: LIST
33552: PUSH
33553: LD_INT 1
33555: NEG
33556: PUSH
33557: LD_INT 2
33559: NEG
33560: PUSH
33561: EMPTY
33562: LIST
33563: LIST
33564: PUSH
33565: LD_INT 0
33567: PUSH
33568: LD_INT 2
33570: NEG
33571: PUSH
33572: EMPTY
33573: LIST
33574: LIST
33575: PUSH
33576: LD_INT 1
33578: PUSH
33579: LD_INT 1
33581: NEG
33582: PUSH
33583: EMPTY
33584: LIST
33585: LIST
33586: PUSH
33587: LD_INT 1
33589: PUSH
33590: LD_INT 2
33592: PUSH
33593: EMPTY
33594: LIST
33595: LIST
33596: PUSH
33597: LD_INT 0
33599: PUSH
33600: LD_INT 2
33602: PUSH
33603: EMPTY
33604: LIST
33605: LIST
33606: PUSH
33607: LD_INT 1
33609: NEG
33610: PUSH
33611: LD_INT 1
33613: PUSH
33614: EMPTY
33615: LIST
33616: LIST
33617: PUSH
33618: LD_INT 1
33620: NEG
33621: PUSH
33622: LD_INT 3
33624: NEG
33625: PUSH
33626: EMPTY
33627: LIST
33628: LIST
33629: PUSH
33630: LD_INT 0
33632: PUSH
33633: LD_INT 3
33635: NEG
33636: PUSH
33637: EMPTY
33638: LIST
33639: LIST
33640: PUSH
33641: LD_INT 1
33643: PUSH
33644: LD_INT 2
33646: NEG
33647: PUSH
33648: EMPTY
33649: LIST
33650: LIST
33651: PUSH
33652: EMPTY
33653: LIST
33654: LIST
33655: LIST
33656: LIST
33657: LIST
33658: LIST
33659: LIST
33660: LIST
33661: LIST
33662: LIST
33663: LIST
33664: LIST
33665: LIST
33666: LIST
33667: LIST
33668: LIST
33669: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
33670: LD_ADDR_VAR 0 15
33674: PUSH
33675: LD_INT 0
33677: PUSH
33678: LD_INT 0
33680: PUSH
33681: EMPTY
33682: LIST
33683: LIST
33684: PUSH
33685: LD_INT 0
33687: PUSH
33688: LD_INT 1
33690: NEG
33691: PUSH
33692: EMPTY
33693: LIST
33694: LIST
33695: PUSH
33696: LD_INT 1
33698: PUSH
33699: LD_INT 0
33701: PUSH
33702: EMPTY
33703: LIST
33704: LIST
33705: PUSH
33706: LD_INT 1
33708: PUSH
33709: LD_INT 1
33711: PUSH
33712: EMPTY
33713: LIST
33714: LIST
33715: PUSH
33716: LD_INT 0
33718: PUSH
33719: LD_INT 1
33721: PUSH
33722: EMPTY
33723: LIST
33724: LIST
33725: PUSH
33726: LD_INT 1
33728: NEG
33729: PUSH
33730: LD_INT 0
33732: PUSH
33733: EMPTY
33734: LIST
33735: LIST
33736: PUSH
33737: LD_INT 1
33739: NEG
33740: PUSH
33741: LD_INT 1
33743: NEG
33744: PUSH
33745: EMPTY
33746: LIST
33747: LIST
33748: PUSH
33749: LD_INT 1
33751: PUSH
33752: LD_INT 1
33754: NEG
33755: PUSH
33756: EMPTY
33757: LIST
33758: LIST
33759: PUSH
33760: LD_INT 2
33762: PUSH
33763: LD_INT 0
33765: PUSH
33766: EMPTY
33767: LIST
33768: LIST
33769: PUSH
33770: LD_INT 2
33772: PUSH
33773: LD_INT 1
33775: PUSH
33776: EMPTY
33777: LIST
33778: LIST
33779: PUSH
33780: LD_INT 1
33782: NEG
33783: PUSH
33784: LD_INT 1
33786: PUSH
33787: EMPTY
33788: LIST
33789: LIST
33790: PUSH
33791: LD_INT 2
33793: NEG
33794: PUSH
33795: LD_INT 0
33797: PUSH
33798: EMPTY
33799: LIST
33800: LIST
33801: PUSH
33802: LD_INT 2
33804: NEG
33805: PUSH
33806: LD_INT 1
33808: NEG
33809: PUSH
33810: EMPTY
33811: LIST
33812: LIST
33813: PUSH
33814: LD_INT 2
33816: PUSH
33817: LD_INT 1
33819: NEG
33820: PUSH
33821: EMPTY
33822: LIST
33823: LIST
33824: PUSH
33825: LD_INT 3
33827: PUSH
33828: LD_INT 0
33830: PUSH
33831: EMPTY
33832: LIST
33833: LIST
33834: PUSH
33835: LD_INT 3
33837: PUSH
33838: LD_INT 1
33840: PUSH
33841: EMPTY
33842: LIST
33843: LIST
33844: PUSH
33845: EMPTY
33846: LIST
33847: LIST
33848: LIST
33849: LIST
33850: LIST
33851: LIST
33852: LIST
33853: LIST
33854: LIST
33855: LIST
33856: LIST
33857: LIST
33858: LIST
33859: LIST
33860: LIST
33861: LIST
33862: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
33863: LD_ADDR_VAR 0 16
33867: PUSH
33868: LD_INT 0
33870: PUSH
33871: LD_INT 0
33873: PUSH
33874: EMPTY
33875: LIST
33876: LIST
33877: PUSH
33878: LD_INT 0
33880: PUSH
33881: LD_INT 1
33883: NEG
33884: PUSH
33885: EMPTY
33886: LIST
33887: LIST
33888: PUSH
33889: LD_INT 1
33891: PUSH
33892: LD_INT 0
33894: PUSH
33895: EMPTY
33896: LIST
33897: LIST
33898: PUSH
33899: LD_INT 1
33901: PUSH
33902: LD_INT 1
33904: PUSH
33905: EMPTY
33906: LIST
33907: LIST
33908: PUSH
33909: LD_INT 0
33911: PUSH
33912: LD_INT 1
33914: PUSH
33915: EMPTY
33916: LIST
33917: LIST
33918: PUSH
33919: LD_INT 1
33921: NEG
33922: PUSH
33923: LD_INT 0
33925: PUSH
33926: EMPTY
33927: LIST
33928: LIST
33929: PUSH
33930: LD_INT 1
33932: NEG
33933: PUSH
33934: LD_INT 1
33936: NEG
33937: PUSH
33938: EMPTY
33939: LIST
33940: LIST
33941: PUSH
33942: LD_INT 1
33944: NEG
33945: PUSH
33946: LD_INT 2
33948: NEG
33949: PUSH
33950: EMPTY
33951: LIST
33952: LIST
33953: PUSH
33954: LD_INT 2
33956: PUSH
33957: LD_INT 1
33959: PUSH
33960: EMPTY
33961: LIST
33962: LIST
33963: PUSH
33964: LD_INT 2
33966: PUSH
33967: LD_INT 2
33969: PUSH
33970: EMPTY
33971: LIST
33972: LIST
33973: PUSH
33974: LD_INT 1
33976: PUSH
33977: LD_INT 2
33979: PUSH
33980: EMPTY
33981: LIST
33982: LIST
33983: PUSH
33984: LD_INT 2
33986: NEG
33987: PUSH
33988: LD_INT 1
33990: NEG
33991: PUSH
33992: EMPTY
33993: LIST
33994: LIST
33995: PUSH
33996: LD_INT 2
33998: NEG
33999: PUSH
34000: LD_INT 2
34002: NEG
34003: PUSH
34004: EMPTY
34005: LIST
34006: LIST
34007: PUSH
34008: LD_INT 3
34010: PUSH
34011: LD_INT 2
34013: PUSH
34014: EMPTY
34015: LIST
34016: LIST
34017: PUSH
34018: LD_INT 3
34020: PUSH
34021: LD_INT 3
34023: PUSH
34024: EMPTY
34025: LIST
34026: LIST
34027: PUSH
34028: LD_INT 2
34030: PUSH
34031: LD_INT 3
34033: PUSH
34034: EMPTY
34035: LIST
34036: LIST
34037: PUSH
34038: EMPTY
34039: LIST
34040: LIST
34041: LIST
34042: LIST
34043: LIST
34044: LIST
34045: LIST
34046: LIST
34047: LIST
34048: LIST
34049: LIST
34050: LIST
34051: LIST
34052: LIST
34053: LIST
34054: LIST
34055: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34056: LD_ADDR_VAR 0 17
34060: PUSH
34061: LD_INT 0
34063: PUSH
34064: LD_INT 0
34066: PUSH
34067: EMPTY
34068: LIST
34069: LIST
34070: PUSH
34071: LD_INT 0
34073: PUSH
34074: LD_INT 1
34076: NEG
34077: PUSH
34078: EMPTY
34079: LIST
34080: LIST
34081: PUSH
34082: LD_INT 1
34084: PUSH
34085: LD_INT 0
34087: PUSH
34088: EMPTY
34089: LIST
34090: LIST
34091: PUSH
34092: LD_INT 1
34094: PUSH
34095: LD_INT 1
34097: PUSH
34098: EMPTY
34099: LIST
34100: LIST
34101: PUSH
34102: LD_INT 0
34104: PUSH
34105: LD_INT 1
34107: PUSH
34108: EMPTY
34109: LIST
34110: LIST
34111: PUSH
34112: LD_INT 1
34114: NEG
34115: PUSH
34116: LD_INT 0
34118: PUSH
34119: EMPTY
34120: LIST
34121: LIST
34122: PUSH
34123: LD_INT 1
34125: NEG
34126: PUSH
34127: LD_INT 1
34129: NEG
34130: PUSH
34131: EMPTY
34132: LIST
34133: LIST
34134: PUSH
34135: LD_INT 1
34137: NEG
34138: PUSH
34139: LD_INT 2
34141: NEG
34142: PUSH
34143: EMPTY
34144: LIST
34145: LIST
34146: PUSH
34147: LD_INT 0
34149: PUSH
34150: LD_INT 2
34152: NEG
34153: PUSH
34154: EMPTY
34155: LIST
34156: LIST
34157: PUSH
34158: LD_INT 1
34160: PUSH
34161: LD_INT 1
34163: NEG
34164: PUSH
34165: EMPTY
34166: LIST
34167: LIST
34168: PUSH
34169: LD_INT 2
34171: PUSH
34172: LD_INT 0
34174: PUSH
34175: EMPTY
34176: LIST
34177: LIST
34178: PUSH
34179: LD_INT 2
34181: PUSH
34182: LD_INT 1
34184: PUSH
34185: EMPTY
34186: LIST
34187: LIST
34188: PUSH
34189: LD_INT 2
34191: PUSH
34192: LD_INT 2
34194: PUSH
34195: EMPTY
34196: LIST
34197: LIST
34198: PUSH
34199: LD_INT 1
34201: PUSH
34202: LD_INT 2
34204: PUSH
34205: EMPTY
34206: LIST
34207: LIST
34208: PUSH
34209: LD_INT 0
34211: PUSH
34212: LD_INT 2
34214: PUSH
34215: EMPTY
34216: LIST
34217: LIST
34218: PUSH
34219: LD_INT 1
34221: NEG
34222: PUSH
34223: LD_INT 1
34225: PUSH
34226: EMPTY
34227: LIST
34228: LIST
34229: PUSH
34230: LD_INT 2
34232: NEG
34233: PUSH
34234: LD_INT 0
34236: PUSH
34237: EMPTY
34238: LIST
34239: LIST
34240: PUSH
34241: LD_INT 2
34243: NEG
34244: PUSH
34245: LD_INT 1
34247: NEG
34248: PUSH
34249: EMPTY
34250: LIST
34251: LIST
34252: PUSH
34253: LD_INT 2
34255: NEG
34256: PUSH
34257: LD_INT 2
34259: NEG
34260: PUSH
34261: EMPTY
34262: LIST
34263: LIST
34264: PUSH
34265: EMPTY
34266: LIST
34267: LIST
34268: LIST
34269: LIST
34270: LIST
34271: LIST
34272: LIST
34273: LIST
34274: LIST
34275: LIST
34276: LIST
34277: LIST
34278: LIST
34279: LIST
34280: LIST
34281: LIST
34282: LIST
34283: LIST
34284: LIST
34285: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34286: LD_ADDR_VAR 0 18
34290: PUSH
34291: LD_INT 0
34293: PUSH
34294: LD_INT 0
34296: PUSH
34297: EMPTY
34298: LIST
34299: LIST
34300: PUSH
34301: LD_INT 0
34303: PUSH
34304: LD_INT 1
34306: NEG
34307: PUSH
34308: EMPTY
34309: LIST
34310: LIST
34311: PUSH
34312: LD_INT 1
34314: PUSH
34315: LD_INT 0
34317: PUSH
34318: EMPTY
34319: LIST
34320: LIST
34321: PUSH
34322: LD_INT 1
34324: PUSH
34325: LD_INT 1
34327: PUSH
34328: EMPTY
34329: LIST
34330: LIST
34331: PUSH
34332: LD_INT 0
34334: PUSH
34335: LD_INT 1
34337: PUSH
34338: EMPTY
34339: LIST
34340: LIST
34341: PUSH
34342: LD_INT 1
34344: NEG
34345: PUSH
34346: LD_INT 0
34348: PUSH
34349: EMPTY
34350: LIST
34351: LIST
34352: PUSH
34353: LD_INT 1
34355: NEG
34356: PUSH
34357: LD_INT 1
34359: NEG
34360: PUSH
34361: EMPTY
34362: LIST
34363: LIST
34364: PUSH
34365: LD_INT 1
34367: NEG
34368: PUSH
34369: LD_INT 2
34371: NEG
34372: PUSH
34373: EMPTY
34374: LIST
34375: LIST
34376: PUSH
34377: LD_INT 0
34379: PUSH
34380: LD_INT 2
34382: NEG
34383: PUSH
34384: EMPTY
34385: LIST
34386: LIST
34387: PUSH
34388: LD_INT 1
34390: PUSH
34391: LD_INT 1
34393: NEG
34394: PUSH
34395: EMPTY
34396: LIST
34397: LIST
34398: PUSH
34399: LD_INT 2
34401: PUSH
34402: LD_INT 0
34404: PUSH
34405: EMPTY
34406: LIST
34407: LIST
34408: PUSH
34409: LD_INT 2
34411: PUSH
34412: LD_INT 1
34414: PUSH
34415: EMPTY
34416: LIST
34417: LIST
34418: PUSH
34419: LD_INT 2
34421: PUSH
34422: LD_INT 2
34424: PUSH
34425: EMPTY
34426: LIST
34427: LIST
34428: PUSH
34429: LD_INT 1
34431: PUSH
34432: LD_INT 2
34434: PUSH
34435: EMPTY
34436: LIST
34437: LIST
34438: PUSH
34439: LD_INT 0
34441: PUSH
34442: LD_INT 2
34444: PUSH
34445: EMPTY
34446: LIST
34447: LIST
34448: PUSH
34449: LD_INT 1
34451: NEG
34452: PUSH
34453: LD_INT 1
34455: PUSH
34456: EMPTY
34457: LIST
34458: LIST
34459: PUSH
34460: LD_INT 2
34462: NEG
34463: PUSH
34464: LD_INT 0
34466: PUSH
34467: EMPTY
34468: LIST
34469: LIST
34470: PUSH
34471: LD_INT 2
34473: NEG
34474: PUSH
34475: LD_INT 1
34477: NEG
34478: PUSH
34479: EMPTY
34480: LIST
34481: LIST
34482: PUSH
34483: LD_INT 2
34485: NEG
34486: PUSH
34487: LD_INT 2
34489: NEG
34490: PUSH
34491: EMPTY
34492: LIST
34493: LIST
34494: PUSH
34495: EMPTY
34496: LIST
34497: LIST
34498: LIST
34499: LIST
34500: LIST
34501: LIST
34502: LIST
34503: LIST
34504: LIST
34505: LIST
34506: LIST
34507: LIST
34508: LIST
34509: LIST
34510: LIST
34511: LIST
34512: LIST
34513: LIST
34514: LIST
34515: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34516: LD_ADDR_VAR 0 19
34520: PUSH
34521: LD_INT 0
34523: PUSH
34524: LD_INT 0
34526: PUSH
34527: EMPTY
34528: LIST
34529: LIST
34530: PUSH
34531: LD_INT 0
34533: PUSH
34534: LD_INT 1
34536: NEG
34537: PUSH
34538: EMPTY
34539: LIST
34540: LIST
34541: PUSH
34542: LD_INT 1
34544: PUSH
34545: LD_INT 0
34547: PUSH
34548: EMPTY
34549: LIST
34550: LIST
34551: PUSH
34552: LD_INT 1
34554: PUSH
34555: LD_INT 1
34557: PUSH
34558: EMPTY
34559: LIST
34560: LIST
34561: PUSH
34562: LD_INT 0
34564: PUSH
34565: LD_INT 1
34567: PUSH
34568: EMPTY
34569: LIST
34570: LIST
34571: PUSH
34572: LD_INT 1
34574: NEG
34575: PUSH
34576: LD_INT 0
34578: PUSH
34579: EMPTY
34580: LIST
34581: LIST
34582: PUSH
34583: LD_INT 1
34585: NEG
34586: PUSH
34587: LD_INT 1
34589: NEG
34590: PUSH
34591: EMPTY
34592: LIST
34593: LIST
34594: PUSH
34595: LD_INT 1
34597: NEG
34598: PUSH
34599: LD_INT 2
34601: NEG
34602: PUSH
34603: EMPTY
34604: LIST
34605: LIST
34606: PUSH
34607: LD_INT 0
34609: PUSH
34610: LD_INT 2
34612: NEG
34613: PUSH
34614: EMPTY
34615: LIST
34616: LIST
34617: PUSH
34618: LD_INT 1
34620: PUSH
34621: LD_INT 1
34623: NEG
34624: PUSH
34625: EMPTY
34626: LIST
34627: LIST
34628: PUSH
34629: LD_INT 2
34631: PUSH
34632: LD_INT 0
34634: PUSH
34635: EMPTY
34636: LIST
34637: LIST
34638: PUSH
34639: LD_INT 2
34641: PUSH
34642: LD_INT 1
34644: PUSH
34645: EMPTY
34646: LIST
34647: LIST
34648: PUSH
34649: LD_INT 2
34651: PUSH
34652: LD_INT 2
34654: PUSH
34655: EMPTY
34656: LIST
34657: LIST
34658: PUSH
34659: LD_INT 1
34661: PUSH
34662: LD_INT 2
34664: PUSH
34665: EMPTY
34666: LIST
34667: LIST
34668: PUSH
34669: LD_INT 0
34671: PUSH
34672: LD_INT 2
34674: PUSH
34675: EMPTY
34676: LIST
34677: LIST
34678: PUSH
34679: LD_INT 1
34681: NEG
34682: PUSH
34683: LD_INT 1
34685: PUSH
34686: EMPTY
34687: LIST
34688: LIST
34689: PUSH
34690: LD_INT 2
34692: NEG
34693: PUSH
34694: LD_INT 0
34696: PUSH
34697: EMPTY
34698: LIST
34699: LIST
34700: PUSH
34701: LD_INT 2
34703: NEG
34704: PUSH
34705: LD_INT 1
34707: NEG
34708: PUSH
34709: EMPTY
34710: LIST
34711: LIST
34712: PUSH
34713: LD_INT 2
34715: NEG
34716: PUSH
34717: LD_INT 2
34719: NEG
34720: PUSH
34721: EMPTY
34722: LIST
34723: LIST
34724: PUSH
34725: EMPTY
34726: LIST
34727: LIST
34728: LIST
34729: LIST
34730: LIST
34731: LIST
34732: LIST
34733: LIST
34734: LIST
34735: LIST
34736: LIST
34737: LIST
34738: LIST
34739: LIST
34740: LIST
34741: LIST
34742: LIST
34743: LIST
34744: LIST
34745: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34746: LD_ADDR_VAR 0 20
34750: PUSH
34751: LD_INT 0
34753: PUSH
34754: LD_INT 0
34756: PUSH
34757: EMPTY
34758: LIST
34759: LIST
34760: PUSH
34761: LD_INT 0
34763: PUSH
34764: LD_INT 1
34766: NEG
34767: PUSH
34768: EMPTY
34769: LIST
34770: LIST
34771: PUSH
34772: LD_INT 1
34774: PUSH
34775: LD_INT 0
34777: PUSH
34778: EMPTY
34779: LIST
34780: LIST
34781: PUSH
34782: LD_INT 1
34784: PUSH
34785: LD_INT 1
34787: PUSH
34788: EMPTY
34789: LIST
34790: LIST
34791: PUSH
34792: LD_INT 0
34794: PUSH
34795: LD_INT 1
34797: PUSH
34798: EMPTY
34799: LIST
34800: LIST
34801: PUSH
34802: LD_INT 1
34804: NEG
34805: PUSH
34806: LD_INT 0
34808: PUSH
34809: EMPTY
34810: LIST
34811: LIST
34812: PUSH
34813: LD_INT 1
34815: NEG
34816: PUSH
34817: LD_INT 1
34819: NEG
34820: PUSH
34821: EMPTY
34822: LIST
34823: LIST
34824: PUSH
34825: LD_INT 1
34827: NEG
34828: PUSH
34829: LD_INT 2
34831: NEG
34832: PUSH
34833: EMPTY
34834: LIST
34835: LIST
34836: PUSH
34837: LD_INT 0
34839: PUSH
34840: LD_INT 2
34842: NEG
34843: PUSH
34844: EMPTY
34845: LIST
34846: LIST
34847: PUSH
34848: LD_INT 1
34850: PUSH
34851: LD_INT 1
34853: NEG
34854: PUSH
34855: EMPTY
34856: LIST
34857: LIST
34858: PUSH
34859: LD_INT 2
34861: PUSH
34862: LD_INT 0
34864: PUSH
34865: EMPTY
34866: LIST
34867: LIST
34868: PUSH
34869: LD_INT 2
34871: PUSH
34872: LD_INT 1
34874: PUSH
34875: EMPTY
34876: LIST
34877: LIST
34878: PUSH
34879: LD_INT 2
34881: PUSH
34882: LD_INT 2
34884: PUSH
34885: EMPTY
34886: LIST
34887: LIST
34888: PUSH
34889: LD_INT 1
34891: PUSH
34892: LD_INT 2
34894: PUSH
34895: EMPTY
34896: LIST
34897: LIST
34898: PUSH
34899: LD_INT 0
34901: PUSH
34902: LD_INT 2
34904: PUSH
34905: EMPTY
34906: LIST
34907: LIST
34908: PUSH
34909: LD_INT 1
34911: NEG
34912: PUSH
34913: LD_INT 1
34915: PUSH
34916: EMPTY
34917: LIST
34918: LIST
34919: PUSH
34920: LD_INT 2
34922: NEG
34923: PUSH
34924: LD_INT 0
34926: PUSH
34927: EMPTY
34928: LIST
34929: LIST
34930: PUSH
34931: LD_INT 2
34933: NEG
34934: PUSH
34935: LD_INT 1
34937: NEG
34938: PUSH
34939: EMPTY
34940: LIST
34941: LIST
34942: PUSH
34943: LD_INT 2
34945: NEG
34946: PUSH
34947: LD_INT 2
34949: NEG
34950: PUSH
34951: EMPTY
34952: LIST
34953: LIST
34954: PUSH
34955: EMPTY
34956: LIST
34957: LIST
34958: LIST
34959: LIST
34960: LIST
34961: LIST
34962: LIST
34963: LIST
34964: LIST
34965: LIST
34966: LIST
34967: LIST
34968: LIST
34969: LIST
34970: LIST
34971: LIST
34972: LIST
34973: LIST
34974: LIST
34975: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34976: LD_ADDR_VAR 0 21
34980: PUSH
34981: LD_INT 0
34983: PUSH
34984: LD_INT 0
34986: PUSH
34987: EMPTY
34988: LIST
34989: LIST
34990: PUSH
34991: LD_INT 0
34993: PUSH
34994: LD_INT 1
34996: NEG
34997: PUSH
34998: EMPTY
34999: LIST
35000: LIST
35001: PUSH
35002: LD_INT 1
35004: PUSH
35005: LD_INT 0
35007: PUSH
35008: EMPTY
35009: LIST
35010: LIST
35011: PUSH
35012: LD_INT 1
35014: PUSH
35015: LD_INT 1
35017: PUSH
35018: EMPTY
35019: LIST
35020: LIST
35021: PUSH
35022: LD_INT 0
35024: PUSH
35025: LD_INT 1
35027: PUSH
35028: EMPTY
35029: LIST
35030: LIST
35031: PUSH
35032: LD_INT 1
35034: NEG
35035: PUSH
35036: LD_INT 0
35038: PUSH
35039: EMPTY
35040: LIST
35041: LIST
35042: PUSH
35043: LD_INT 1
35045: NEG
35046: PUSH
35047: LD_INT 1
35049: NEG
35050: PUSH
35051: EMPTY
35052: LIST
35053: LIST
35054: PUSH
35055: LD_INT 1
35057: NEG
35058: PUSH
35059: LD_INT 2
35061: NEG
35062: PUSH
35063: EMPTY
35064: LIST
35065: LIST
35066: PUSH
35067: LD_INT 0
35069: PUSH
35070: LD_INT 2
35072: NEG
35073: PUSH
35074: EMPTY
35075: LIST
35076: LIST
35077: PUSH
35078: LD_INT 1
35080: PUSH
35081: LD_INT 1
35083: NEG
35084: PUSH
35085: EMPTY
35086: LIST
35087: LIST
35088: PUSH
35089: LD_INT 2
35091: PUSH
35092: LD_INT 0
35094: PUSH
35095: EMPTY
35096: LIST
35097: LIST
35098: PUSH
35099: LD_INT 2
35101: PUSH
35102: LD_INT 1
35104: PUSH
35105: EMPTY
35106: LIST
35107: LIST
35108: PUSH
35109: LD_INT 2
35111: PUSH
35112: LD_INT 2
35114: PUSH
35115: EMPTY
35116: LIST
35117: LIST
35118: PUSH
35119: LD_INT 1
35121: PUSH
35122: LD_INT 2
35124: PUSH
35125: EMPTY
35126: LIST
35127: LIST
35128: PUSH
35129: LD_INT 0
35131: PUSH
35132: LD_INT 2
35134: PUSH
35135: EMPTY
35136: LIST
35137: LIST
35138: PUSH
35139: LD_INT 1
35141: NEG
35142: PUSH
35143: LD_INT 1
35145: PUSH
35146: EMPTY
35147: LIST
35148: LIST
35149: PUSH
35150: LD_INT 2
35152: NEG
35153: PUSH
35154: LD_INT 0
35156: PUSH
35157: EMPTY
35158: LIST
35159: LIST
35160: PUSH
35161: LD_INT 2
35163: NEG
35164: PUSH
35165: LD_INT 1
35167: NEG
35168: PUSH
35169: EMPTY
35170: LIST
35171: LIST
35172: PUSH
35173: LD_INT 2
35175: NEG
35176: PUSH
35177: LD_INT 2
35179: NEG
35180: PUSH
35181: EMPTY
35182: LIST
35183: LIST
35184: PUSH
35185: EMPTY
35186: LIST
35187: LIST
35188: LIST
35189: LIST
35190: LIST
35191: LIST
35192: LIST
35193: LIST
35194: LIST
35195: LIST
35196: LIST
35197: LIST
35198: LIST
35199: LIST
35200: LIST
35201: LIST
35202: LIST
35203: LIST
35204: LIST
35205: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35206: LD_ADDR_VAR 0 22
35210: PUSH
35211: LD_INT 0
35213: PUSH
35214: LD_INT 0
35216: PUSH
35217: EMPTY
35218: LIST
35219: LIST
35220: PUSH
35221: LD_INT 0
35223: PUSH
35224: LD_INT 1
35226: NEG
35227: PUSH
35228: EMPTY
35229: LIST
35230: LIST
35231: PUSH
35232: LD_INT 1
35234: PUSH
35235: LD_INT 0
35237: PUSH
35238: EMPTY
35239: LIST
35240: LIST
35241: PUSH
35242: LD_INT 1
35244: PUSH
35245: LD_INT 1
35247: PUSH
35248: EMPTY
35249: LIST
35250: LIST
35251: PUSH
35252: LD_INT 0
35254: PUSH
35255: LD_INT 1
35257: PUSH
35258: EMPTY
35259: LIST
35260: LIST
35261: PUSH
35262: LD_INT 1
35264: NEG
35265: PUSH
35266: LD_INT 0
35268: PUSH
35269: EMPTY
35270: LIST
35271: LIST
35272: PUSH
35273: LD_INT 1
35275: NEG
35276: PUSH
35277: LD_INT 1
35279: NEG
35280: PUSH
35281: EMPTY
35282: LIST
35283: LIST
35284: PUSH
35285: LD_INT 1
35287: NEG
35288: PUSH
35289: LD_INT 2
35291: NEG
35292: PUSH
35293: EMPTY
35294: LIST
35295: LIST
35296: PUSH
35297: LD_INT 0
35299: PUSH
35300: LD_INT 2
35302: NEG
35303: PUSH
35304: EMPTY
35305: LIST
35306: LIST
35307: PUSH
35308: LD_INT 1
35310: PUSH
35311: LD_INT 1
35313: NEG
35314: PUSH
35315: EMPTY
35316: LIST
35317: LIST
35318: PUSH
35319: LD_INT 2
35321: PUSH
35322: LD_INT 0
35324: PUSH
35325: EMPTY
35326: LIST
35327: LIST
35328: PUSH
35329: LD_INT 2
35331: PUSH
35332: LD_INT 1
35334: PUSH
35335: EMPTY
35336: LIST
35337: LIST
35338: PUSH
35339: LD_INT 2
35341: PUSH
35342: LD_INT 2
35344: PUSH
35345: EMPTY
35346: LIST
35347: LIST
35348: PUSH
35349: LD_INT 1
35351: PUSH
35352: LD_INT 2
35354: PUSH
35355: EMPTY
35356: LIST
35357: LIST
35358: PUSH
35359: LD_INT 0
35361: PUSH
35362: LD_INT 2
35364: PUSH
35365: EMPTY
35366: LIST
35367: LIST
35368: PUSH
35369: LD_INT 1
35371: NEG
35372: PUSH
35373: LD_INT 1
35375: PUSH
35376: EMPTY
35377: LIST
35378: LIST
35379: PUSH
35380: LD_INT 2
35382: NEG
35383: PUSH
35384: LD_INT 0
35386: PUSH
35387: EMPTY
35388: LIST
35389: LIST
35390: PUSH
35391: LD_INT 2
35393: NEG
35394: PUSH
35395: LD_INT 1
35397: NEG
35398: PUSH
35399: EMPTY
35400: LIST
35401: LIST
35402: PUSH
35403: LD_INT 2
35405: NEG
35406: PUSH
35407: LD_INT 2
35409: NEG
35410: PUSH
35411: EMPTY
35412: LIST
35413: LIST
35414: PUSH
35415: EMPTY
35416: LIST
35417: LIST
35418: LIST
35419: LIST
35420: LIST
35421: LIST
35422: LIST
35423: LIST
35424: LIST
35425: LIST
35426: LIST
35427: LIST
35428: LIST
35429: LIST
35430: LIST
35431: LIST
35432: LIST
35433: LIST
35434: LIST
35435: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
35436: LD_ADDR_VAR 0 23
35440: PUSH
35441: LD_INT 0
35443: PUSH
35444: LD_INT 0
35446: PUSH
35447: EMPTY
35448: LIST
35449: LIST
35450: PUSH
35451: LD_INT 0
35453: PUSH
35454: LD_INT 1
35456: NEG
35457: PUSH
35458: EMPTY
35459: LIST
35460: LIST
35461: PUSH
35462: LD_INT 1
35464: PUSH
35465: LD_INT 0
35467: PUSH
35468: EMPTY
35469: LIST
35470: LIST
35471: PUSH
35472: LD_INT 1
35474: PUSH
35475: LD_INT 1
35477: PUSH
35478: EMPTY
35479: LIST
35480: LIST
35481: PUSH
35482: LD_INT 0
35484: PUSH
35485: LD_INT 1
35487: PUSH
35488: EMPTY
35489: LIST
35490: LIST
35491: PUSH
35492: LD_INT 1
35494: NEG
35495: PUSH
35496: LD_INT 0
35498: PUSH
35499: EMPTY
35500: LIST
35501: LIST
35502: PUSH
35503: LD_INT 1
35505: NEG
35506: PUSH
35507: LD_INT 1
35509: NEG
35510: PUSH
35511: EMPTY
35512: LIST
35513: LIST
35514: PUSH
35515: LD_INT 1
35517: NEG
35518: PUSH
35519: LD_INT 2
35521: NEG
35522: PUSH
35523: EMPTY
35524: LIST
35525: LIST
35526: PUSH
35527: LD_INT 0
35529: PUSH
35530: LD_INT 2
35532: NEG
35533: PUSH
35534: EMPTY
35535: LIST
35536: LIST
35537: PUSH
35538: LD_INT 1
35540: PUSH
35541: LD_INT 1
35543: NEG
35544: PUSH
35545: EMPTY
35546: LIST
35547: LIST
35548: PUSH
35549: LD_INT 2
35551: PUSH
35552: LD_INT 0
35554: PUSH
35555: EMPTY
35556: LIST
35557: LIST
35558: PUSH
35559: LD_INT 2
35561: PUSH
35562: LD_INT 1
35564: PUSH
35565: EMPTY
35566: LIST
35567: LIST
35568: PUSH
35569: LD_INT 2
35571: PUSH
35572: LD_INT 2
35574: PUSH
35575: EMPTY
35576: LIST
35577: LIST
35578: PUSH
35579: LD_INT 1
35581: PUSH
35582: LD_INT 2
35584: PUSH
35585: EMPTY
35586: LIST
35587: LIST
35588: PUSH
35589: LD_INT 0
35591: PUSH
35592: LD_INT 2
35594: PUSH
35595: EMPTY
35596: LIST
35597: LIST
35598: PUSH
35599: LD_INT 1
35601: NEG
35602: PUSH
35603: LD_INT 1
35605: PUSH
35606: EMPTY
35607: LIST
35608: LIST
35609: PUSH
35610: LD_INT 2
35612: NEG
35613: PUSH
35614: LD_INT 0
35616: PUSH
35617: EMPTY
35618: LIST
35619: LIST
35620: PUSH
35621: LD_INT 2
35623: NEG
35624: PUSH
35625: LD_INT 1
35627: NEG
35628: PUSH
35629: EMPTY
35630: LIST
35631: LIST
35632: PUSH
35633: LD_INT 2
35635: NEG
35636: PUSH
35637: LD_INT 2
35639: NEG
35640: PUSH
35641: EMPTY
35642: LIST
35643: LIST
35644: PUSH
35645: LD_INT 2
35647: NEG
35648: PUSH
35649: LD_INT 3
35651: NEG
35652: PUSH
35653: EMPTY
35654: LIST
35655: LIST
35656: PUSH
35657: LD_INT 1
35659: NEG
35660: PUSH
35661: LD_INT 3
35663: NEG
35664: PUSH
35665: EMPTY
35666: LIST
35667: LIST
35668: PUSH
35669: LD_INT 1
35671: PUSH
35672: LD_INT 2
35674: NEG
35675: PUSH
35676: EMPTY
35677: LIST
35678: LIST
35679: PUSH
35680: LD_INT 2
35682: PUSH
35683: LD_INT 1
35685: NEG
35686: PUSH
35687: EMPTY
35688: LIST
35689: LIST
35690: PUSH
35691: EMPTY
35692: LIST
35693: LIST
35694: LIST
35695: LIST
35696: LIST
35697: LIST
35698: LIST
35699: LIST
35700: LIST
35701: LIST
35702: LIST
35703: LIST
35704: LIST
35705: LIST
35706: LIST
35707: LIST
35708: LIST
35709: LIST
35710: LIST
35711: LIST
35712: LIST
35713: LIST
35714: LIST
35715: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
35716: LD_ADDR_VAR 0 24
35720: PUSH
35721: LD_INT 0
35723: PUSH
35724: LD_INT 0
35726: PUSH
35727: EMPTY
35728: LIST
35729: LIST
35730: PUSH
35731: LD_INT 0
35733: PUSH
35734: LD_INT 1
35736: NEG
35737: PUSH
35738: EMPTY
35739: LIST
35740: LIST
35741: PUSH
35742: LD_INT 1
35744: PUSH
35745: LD_INT 0
35747: PUSH
35748: EMPTY
35749: LIST
35750: LIST
35751: PUSH
35752: LD_INT 1
35754: PUSH
35755: LD_INT 1
35757: PUSH
35758: EMPTY
35759: LIST
35760: LIST
35761: PUSH
35762: LD_INT 0
35764: PUSH
35765: LD_INT 1
35767: PUSH
35768: EMPTY
35769: LIST
35770: LIST
35771: PUSH
35772: LD_INT 1
35774: NEG
35775: PUSH
35776: LD_INT 0
35778: PUSH
35779: EMPTY
35780: LIST
35781: LIST
35782: PUSH
35783: LD_INT 1
35785: NEG
35786: PUSH
35787: LD_INT 1
35789: NEG
35790: PUSH
35791: EMPTY
35792: LIST
35793: LIST
35794: PUSH
35795: LD_INT 1
35797: NEG
35798: PUSH
35799: LD_INT 2
35801: NEG
35802: PUSH
35803: EMPTY
35804: LIST
35805: LIST
35806: PUSH
35807: LD_INT 0
35809: PUSH
35810: LD_INT 2
35812: NEG
35813: PUSH
35814: EMPTY
35815: LIST
35816: LIST
35817: PUSH
35818: LD_INT 1
35820: PUSH
35821: LD_INT 1
35823: NEG
35824: PUSH
35825: EMPTY
35826: LIST
35827: LIST
35828: PUSH
35829: LD_INT 2
35831: PUSH
35832: LD_INT 0
35834: PUSH
35835: EMPTY
35836: LIST
35837: LIST
35838: PUSH
35839: LD_INT 2
35841: PUSH
35842: LD_INT 1
35844: PUSH
35845: EMPTY
35846: LIST
35847: LIST
35848: PUSH
35849: LD_INT 2
35851: PUSH
35852: LD_INT 2
35854: PUSH
35855: EMPTY
35856: LIST
35857: LIST
35858: PUSH
35859: LD_INT 1
35861: PUSH
35862: LD_INT 2
35864: PUSH
35865: EMPTY
35866: LIST
35867: LIST
35868: PUSH
35869: LD_INT 0
35871: PUSH
35872: LD_INT 2
35874: PUSH
35875: EMPTY
35876: LIST
35877: LIST
35878: PUSH
35879: LD_INT 1
35881: NEG
35882: PUSH
35883: LD_INT 1
35885: PUSH
35886: EMPTY
35887: LIST
35888: LIST
35889: PUSH
35890: LD_INT 2
35892: NEG
35893: PUSH
35894: LD_INT 0
35896: PUSH
35897: EMPTY
35898: LIST
35899: LIST
35900: PUSH
35901: LD_INT 2
35903: NEG
35904: PUSH
35905: LD_INT 1
35907: NEG
35908: PUSH
35909: EMPTY
35910: LIST
35911: LIST
35912: PUSH
35913: LD_INT 2
35915: NEG
35916: PUSH
35917: LD_INT 2
35919: NEG
35920: PUSH
35921: EMPTY
35922: LIST
35923: LIST
35924: PUSH
35925: LD_INT 1
35927: PUSH
35928: LD_INT 2
35930: NEG
35931: PUSH
35932: EMPTY
35933: LIST
35934: LIST
35935: PUSH
35936: LD_INT 2
35938: PUSH
35939: LD_INT 1
35941: NEG
35942: PUSH
35943: EMPTY
35944: LIST
35945: LIST
35946: PUSH
35947: LD_INT 3
35949: PUSH
35950: LD_INT 1
35952: PUSH
35953: EMPTY
35954: LIST
35955: LIST
35956: PUSH
35957: LD_INT 3
35959: PUSH
35960: LD_INT 2
35962: PUSH
35963: EMPTY
35964: LIST
35965: LIST
35966: PUSH
35967: EMPTY
35968: LIST
35969: LIST
35970: LIST
35971: LIST
35972: LIST
35973: LIST
35974: LIST
35975: LIST
35976: LIST
35977: LIST
35978: LIST
35979: LIST
35980: LIST
35981: LIST
35982: LIST
35983: LIST
35984: LIST
35985: LIST
35986: LIST
35987: LIST
35988: LIST
35989: LIST
35990: LIST
35991: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
35992: LD_ADDR_VAR 0 25
35996: PUSH
35997: LD_INT 0
35999: PUSH
36000: LD_INT 0
36002: PUSH
36003: EMPTY
36004: LIST
36005: LIST
36006: PUSH
36007: LD_INT 0
36009: PUSH
36010: LD_INT 1
36012: NEG
36013: PUSH
36014: EMPTY
36015: LIST
36016: LIST
36017: PUSH
36018: LD_INT 1
36020: PUSH
36021: LD_INT 0
36023: PUSH
36024: EMPTY
36025: LIST
36026: LIST
36027: PUSH
36028: LD_INT 1
36030: PUSH
36031: LD_INT 1
36033: PUSH
36034: EMPTY
36035: LIST
36036: LIST
36037: PUSH
36038: LD_INT 0
36040: PUSH
36041: LD_INT 1
36043: PUSH
36044: EMPTY
36045: LIST
36046: LIST
36047: PUSH
36048: LD_INT 1
36050: NEG
36051: PUSH
36052: LD_INT 0
36054: PUSH
36055: EMPTY
36056: LIST
36057: LIST
36058: PUSH
36059: LD_INT 1
36061: NEG
36062: PUSH
36063: LD_INT 1
36065: NEG
36066: PUSH
36067: EMPTY
36068: LIST
36069: LIST
36070: PUSH
36071: LD_INT 1
36073: NEG
36074: PUSH
36075: LD_INT 2
36077: NEG
36078: PUSH
36079: EMPTY
36080: LIST
36081: LIST
36082: PUSH
36083: LD_INT 0
36085: PUSH
36086: LD_INT 2
36088: NEG
36089: PUSH
36090: EMPTY
36091: LIST
36092: LIST
36093: PUSH
36094: LD_INT 1
36096: PUSH
36097: LD_INT 1
36099: NEG
36100: PUSH
36101: EMPTY
36102: LIST
36103: LIST
36104: PUSH
36105: LD_INT 2
36107: PUSH
36108: LD_INT 0
36110: PUSH
36111: EMPTY
36112: LIST
36113: LIST
36114: PUSH
36115: LD_INT 2
36117: PUSH
36118: LD_INT 1
36120: PUSH
36121: EMPTY
36122: LIST
36123: LIST
36124: PUSH
36125: LD_INT 2
36127: PUSH
36128: LD_INT 2
36130: PUSH
36131: EMPTY
36132: LIST
36133: LIST
36134: PUSH
36135: LD_INT 1
36137: PUSH
36138: LD_INT 2
36140: PUSH
36141: EMPTY
36142: LIST
36143: LIST
36144: PUSH
36145: LD_INT 0
36147: PUSH
36148: LD_INT 2
36150: PUSH
36151: EMPTY
36152: LIST
36153: LIST
36154: PUSH
36155: LD_INT 1
36157: NEG
36158: PUSH
36159: LD_INT 1
36161: PUSH
36162: EMPTY
36163: LIST
36164: LIST
36165: PUSH
36166: LD_INT 2
36168: NEG
36169: PUSH
36170: LD_INT 0
36172: PUSH
36173: EMPTY
36174: LIST
36175: LIST
36176: PUSH
36177: LD_INT 2
36179: NEG
36180: PUSH
36181: LD_INT 1
36183: NEG
36184: PUSH
36185: EMPTY
36186: LIST
36187: LIST
36188: PUSH
36189: LD_INT 2
36191: NEG
36192: PUSH
36193: LD_INT 2
36195: NEG
36196: PUSH
36197: EMPTY
36198: LIST
36199: LIST
36200: PUSH
36201: LD_INT 3
36203: PUSH
36204: LD_INT 1
36206: PUSH
36207: EMPTY
36208: LIST
36209: LIST
36210: PUSH
36211: LD_INT 3
36213: PUSH
36214: LD_INT 2
36216: PUSH
36217: EMPTY
36218: LIST
36219: LIST
36220: PUSH
36221: LD_INT 2
36223: PUSH
36224: LD_INT 3
36226: PUSH
36227: EMPTY
36228: LIST
36229: LIST
36230: PUSH
36231: LD_INT 1
36233: PUSH
36234: LD_INT 3
36236: PUSH
36237: EMPTY
36238: LIST
36239: LIST
36240: PUSH
36241: EMPTY
36242: LIST
36243: LIST
36244: LIST
36245: LIST
36246: LIST
36247: LIST
36248: LIST
36249: LIST
36250: LIST
36251: LIST
36252: LIST
36253: LIST
36254: LIST
36255: LIST
36256: LIST
36257: LIST
36258: LIST
36259: LIST
36260: LIST
36261: LIST
36262: LIST
36263: LIST
36264: LIST
36265: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
36266: LD_ADDR_VAR 0 26
36270: PUSH
36271: LD_INT 0
36273: PUSH
36274: LD_INT 0
36276: PUSH
36277: EMPTY
36278: LIST
36279: LIST
36280: PUSH
36281: LD_INT 0
36283: PUSH
36284: LD_INT 1
36286: NEG
36287: PUSH
36288: EMPTY
36289: LIST
36290: LIST
36291: PUSH
36292: LD_INT 1
36294: PUSH
36295: LD_INT 0
36297: PUSH
36298: EMPTY
36299: LIST
36300: LIST
36301: PUSH
36302: LD_INT 1
36304: PUSH
36305: LD_INT 1
36307: PUSH
36308: EMPTY
36309: LIST
36310: LIST
36311: PUSH
36312: LD_INT 0
36314: PUSH
36315: LD_INT 1
36317: PUSH
36318: EMPTY
36319: LIST
36320: LIST
36321: PUSH
36322: LD_INT 1
36324: NEG
36325: PUSH
36326: LD_INT 0
36328: PUSH
36329: EMPTY
36330: LIST
36331: LIST
36332: PUSH
36333: LD_INT 1
36335: NEG
36336: PUSH
36337: LD_INT 1
36339: NEG
36340: PUSH
36341: EMPTY
36342: LIST
36343: LIST
36344: PUSH
36345: LD_INT 1
36347: NEG
36348: PUSH
36349: LD_INT 2
36351: NEG
36352: PUSH
36353: EMPTY
36354: LIST
36355: LIST
36356: PUSH
36357: LD_INT 0
36359: PUSH
36360: LD_INT 2
36362: NEG
36363: PUSH
36364: EMPTY
36365: LIST
36366: LIST
36367: PUSH
36368: LD_INT 1
36370: PUSH
36371: LD_INT 1
36373: NEG
36374: PUSH
36375: EMPTY
36376: LIST
36377: LIST
36378: PUSH
36379: LD_INT 2
36381: PUSH
36382: LD_INT 0
36384: PUSH
36385: EMPTY
36386: LIST
36387: LIST
36388: PUSH
36389: LD_INT 2
36391: PUSH
36392: LD_INT 1
36394: PUSH
36395: EMPTY
36396: LIST
36397: LIST
36398: PUSH
36399: LD_INT 2
36401: PUSH
36402: LD_INT 2
36404: PUSH
36405: EMPTY
36406: LIST
36407: LIST
36408: PUSH
36409: LD_INT 1
36411: PUSH
36412: LD_INT 2
36414: PUSH
36415: EMPTY
36416: LIST
36417: LIST
36418: PUSH
36419: LD_INT 0
36421: PUSH
36422: LD_INT 2
36424: PUSH
36425: EMPTY
36426: LIST
36427: LIST
36428: PUSH
36429: LD_INT 1
36431: NEG
36432: PUSH
36433: LD_INT 1
36435: PUSH
36436: EMPTY
36437: LIST
36438: LIST
36439: PUSH
36440: LD_INT 2
36442: NEG
36443: PUSH
36444: LD_INT 0
36446: PUSH
36447: EMPTY
36448: LIST
36449: LIST
36450: PUSH
36451: LD_INT 2
36453: NEG
36454: PUSH
36455: LD_INT 1
36457: NEG
36458: PUSH
36459: EMPTY
36460: LIST
36461: LIST
36462: PUSH
36463: LD_INT 2
36465: NEG
36466: PUSH
36467: LD_INT 2
36469: NEG
36470: PUSH
36471: EMPTY
36472: LIST
36473: LIST
36474: PUSH
36475: LD_INT 2
36477: PUSH
36478: LD_INT 3
36480: PUSH
36481: EMPTY
36482: LIST
36483: LIST
36484: PUSH
36485: LD_INT 1
36487: PUSH
36488: LD_INT 3
36490: PUSH
36491: EMPTY
36492: LIST
36493: LIST
36494: PUSH
36495: LD_INT 1
36497: NEG
36498: PUSH
36499: LD_INT 2
36501: PUSH
36502: EMPTY
36503: LIST
36504: LIST
36505: PUSH
36506: LD_INT 2
36508: NEG
36509: PUSH
36510: LD_INT 1
36512: PUSH
36513: EMPTY
36514: LIST
36515: LIST
36516: PUSH
36517: EMPTY
36518: LIST
36519: LIST
36520: LIST
36521: LIST
36522: LIST
36523: LIST
36524: LIST
36525: LIST
36526: LIST
36527: LIST
36528: LIST
36529: LIST
36530: LIST
36531: LIST
36532: LIST
36533: LIST
36534: LIST
36535: LIST
36536: LIST
36537: LIST
36538: LIST
36539: LIST
36540: LIST
36541: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
36542: LD_ADDR_VAR 0 27
36546: PUSH
36547: LD_INT 0
36549: PUSH
36550: LD_INT 0
36552: PUSH
36553: EMPTY
36554: LIST
36555: LIST
36556: PUSH
36557: LD_INT 0
36559: PUSH
36560: LD_INT 1
36562: NEG
36563: PUSH
36564: EMPTY
36565: LIST
36566: LIST
36567: PUSH
36568: LD_INT 1
36570: PUSH
36571: LD_INT 0
36573: PUSH
36574: EMPTY
36575: LIST
36576: LIST
36577: PUSH
36578: LD_INT 1
36580: PUSH
36581: LD_INT 1
36583: PUSH
36584: EMPTY
36585: LIST
36586: LIST
36587: PUSH
36588: LD_INT 0
36590: PUSH
36591: LD_INT 1
36593: PUSH
36594: EMPTY
36595: LIST
36596: LIST
36597: PUSH
36598: LD_INT 1
36600: NEG
36601: PUSH
36602: LD_INT 0
36604: PUSH
36605: EMPTY
36606: LIST
36607: LIST
36608: PUSH
36609: LD_INT 1
36611: NEG
36612: PUSH
36613: LD_INT 1
36615: NEG
36616: PUSH
36617: EMPTY
36618: LIST
36619: LIST
36620: PUSH
36621: LD_INT 1
36623: NEG
36624: PUSH
36625: LD_INT 2
36627: NEG
36628: PUSH
36629: EMPTY
36630: LIST
36631: LIST
36632: PUSH
36633: LD_INT 0
36635: PUSH
36636: LD_INT 2
36638: NEG
36639: PUSH
36640: EMPTY
36641: LIST
36642: LIST
36643: PUSH
36644: LD_INT 1
36646: PUSH
36647: LD_INT 1
36649: NEG
36650: PUSH
36651: EMPTY
36652: LIST
36653: LIST
36654: PUSH
36655: LD_INT 2
36657: PUSH
36658: LD_INT 0
36660: PUSH
36661: EMPTY
36662: LIST
36663: LIST
36664: PUSH
36665: LD_INT 2
36667: PUSH
36668: LD_INT 1
36670: PUSH
36671: EMPTY
36672: LIST
36673: LIST
36674: PUSH
36675: LD_INT 2
36677: PUSH
36678: LD_INT 2
36680: PUSH
36681: EMPTY
36682: LIST
36683: LIST
36684: PUSH
36685: LD_INT 1
36687: PUSH
36688: LD_INT 2
36690: PUSH
36691: EMPTY
36692: LIST
36693: LIST
36694: PUSH
36695: LD_INT 0
36697: PUSH
36698: LD_INT 2
36700: PUSH
36701: EMPTY
36702: LIST
36703: LIST
36704: PUSH
36705: LD_INT 1
36707: NEG
36708: PUSH
36709: LD_INT 1
36711: PUSH
36712: EMPTY
36713: LIST
36714: LIST
36715: PUSH
36716: LD_INT 2
36718: NEG
36719: PUSH
36720: LD_INT 0
36722: PUSH
36723: EMPTY
36724: LIST
36725: LIST
36726: PUSH
36727: LD_INT 2
36729: NEG
36730: PUSH
36731: LD_INT 1
36733: NEG
36734: PUSH
36735: EMPTY
36736: LIST
36737: LIST
36738: PUSH
36739: LD_INT 2
36741: NEG
36742: PUSH
36743: LD_INT 2
36745: NEG
36746: PUSH
36747: EMPTY
36748: LIST
36749: LIST
36750: PUSH
36751: LD_INT 1
36753: NEG
36754: PUSH
36755: LD_INT 2
36757: PUSH
36758: EMPTY
36759: LIST
36760: LIST
36761: PUSH
36762: LD_INT 2
36764: NEG
36765: PUSH
36766: LD_INT 1
36768: PUSH
36769: EMPTY
36770: LIST
36771: LIST
36772: PUSH
36773: LD_INT 3
36775: NEG
36776: PUSH
36777: LD_INT 1
36779: NEG
36780: PUSH
36781: EMPTY
36782: LIST
36783: LIST
36784: PUSH
36785: LD_INT 3
36787: NEG
36788: PUSH
36789: LD_INT 2
36791: NEG
36792: PUSH
36793: EMPTY
36794: LIST
36795: LIST
36796: PUSH
36797: EMPTY
36798: LIST
36799: LIST
36800: LIST
36801: LIST
36802: LIST
36803: LIST
36804: LIST
36805: LIST
36806: LIST
36807: LIST
36808: LIST
36809: LIST
36810: LIST
36811: LIST
36812: LIST
36813: LIST
36814: LIST
36815: LIST
36816: LIST
36817: LIST
36818: LIST
36819: LIST
36820: LIST
36821: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
36822: LD_ADDR_VAR 0 28
36826: PUSH
36827: LD_INT 0
36829: PUSH
36830: LD_INT 0
36832: PUSH
36833: EMPTY
36834: LIST
36835: LIST
36836: PUSH
36837: LD_INT 0
36839: PUSH
36840: LD_INT 1
36842: NEG
36843: PUSH
36844: EMPTY
36845: LIST
36846: LIST
36847: PUSH
36848: LD_INT 1
36850: PUSH
36851: LD_INT 0
36853: PUSH
36854: EMPTY
36855: LIST
36856: LIST
36857: PUSH
36858: LD_INT 1
36860: PUSH
36861: LD_INT 1
36863: PUSH
36864: EMPTY
36865: LIST
36866: LIST
36867: PUSH
36868: LD_INT 0
36870: PUSH
36871: LD_INT 1
36873: PUSH
36874: EMPTY
36875: LIST
36876: LIST
36877: PUSH
36878: LD_INT 1
36880: NEG
36881: PUSH
36882: LD_INT 0
36884: PUSH
36885: EMPTY
36886: LIST
36887: LIST
36888: PUSH
36889: LD_INT 1
36891: NEG
36892: PUSH
36893: LD_INT 1
36895: NEG
36896: PUSH
36897: EMPTY
36898: LIST
36899: LIST
36900: PUSH
36901: LD_INT 1
36903: NEG
36904: PUSH
36905: LD_INT 2
36907: NEG
36908: PUSH
36909: EMPTY
36910: LIST
36911: LIST
36912: PUSH
36913: LD_INT 0
36915: PUSH
36916: LD_INT 2
36918: NEG
36919: PUSH
36920: EMPTY
36921: LIST
36922: LIST
36923: PUSH
36924: LD_INT 1
36926: PUSH
36927: LD_INT 1
36929: NEG
36930: PUSH
36931: EMPTY
36932: LIST
36933: LIST
36934: PUSH
36935: LD_INT 2
36937: PUSH
36938: LD_INT 0
36940: PUSH
36941: EMPTY
36942: LIST
36943: LIST
36944: PUSH
36945: LD_INT 2
36947: PUSH
36948: LD_INT 1
36950: PUSH
36951: EMPTY
36952: LIST
36953: LIST
36954: PUSH
36955: LD_INT 2
36957: PUSH
36958: LD_INT 2
36960: PUSH
36961: EMPTY
36962: LIST
36963: LIST
36964: PUSH
36965: LD_INT 1
36967: PUSH
36968: LD_INT 2
36970: PUSH
36971: EMPTY
36972: LIST
36973: LIST
36974: PUSH
36975: LD_INT 0
36977: PUSH
36978: LD_INT 2
36980: PUSH
36981: EMPTY
36982: LIST
36983: LIST
36984: PUSH
36985: LD_INT 1
36987: NEG
36988: PUSH
36989: LD_INT 1
36991: PUSH
36992: EMPTY
36993: LIST
36994: LIST
36995: PUSH
36996: LD_INT 2
36998: NEG
36999: PUSH
37000: LD_INT 0
37002: PUSH
37003: EMPTY
37004: LIST
37005: LIST
37006: PUSH
37007: LD_INT 2
37009: NEG
37010: PUSH
37011: LD_INT 1
37013: NEG
37014: PUSH
37015: EMPTY
37016: LIST
37017: LIST
37018: PUSH
37019: LD_INT 2
37021: NEG
37022: PUSH
37023: LD_INT 2
37025: NEG
37026: PUSH
37027: EMPTY
37028: LIST
37029: LIST
37030: PUSH
37031: LD_INT 2
37033: NEG
37034: PUSH
37035: LD_INT 3
37037: NEG
37038: PUSH
37039: EMPTY
37040: LIST
37041: LIST
37042: PUSH
37043: LD_INT 1
37045: NEG
37046: PUSH
37047: LD_INT 3
37049: NEG
37050: PUSH
37051: EMPTY
37052: LIST
37053: LIST
37054: PUSH
37055: LD_INT 3
37057: NEG
37058: PUSH
37059: LD_INT 1
37061: NEG
37062: PUSH
37063: EMPTY
37064: LIST
37065: LIST
37066: PUSH
37067: LD_INT 3
37069: NEG
37070: PUSH
37071: LD_INT 2
37073: NEG
37074: PUSH
37075: EMPTY
37076: LIST
37077: LIST
37078: PUSH
37079: EMPTY
37080: LIST
37081: LIST
37082: LIST
37083: LIST
37084: LIST
37085: LIST
37086: LIST
37087: LIST
37088: LIST
37089: LIST
37090: LIST
37091: LIST
37092: LIST
37093: LIST
37094: LIST
37095: LIST
37096: LIST
37097: LIST
37098: LIST
37099: LIST
37100: LIST
37101: LIST
37102: LIST
37103: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
37104: LD_ADDR_VAR 0 29
37108: PUSH
37109: LD_INT 0
37111: PUSH
37112: LD_INT 0
37114: PUSH
37115: EMPTY
37116: LIST
37117: LIST
37118: PUSH
37119: LD_INT 0
37121: PUSH
37122: LD_INT 1
37124: NEG
37125: PUSH
37126: EMPTY
37127: LIST
37128: LIST
37129: PUSH
37130: LD_INT 1
37132: PUSH
37133: LD_INT 0
37135: PUSH
37136: EMPTY
37137: LIST
37138: LIST
37139: PUSH
37140: LD_INT 1
37142: PUSH
37143: LD_INT 1
37145: PUSH
37146: EMPTY
37147: LIST
37148: LIST
37149: PUSH
37150: LD_INT 0
37152: PUSH
37153: LD_INT 1
37155: PUSH
37156: EMPTY
37157: LIST
37158: LIST
37159: PUSH
37160: LD_INT 1
37162: NEG
37163: PUSH
37164: LD_INT 0
37166: PUSH
37167: EMPTY
37168: LIST
37169: LIST
37170: PUSH
37171: LD_INT 1
37173: NEG
37174: PUSH
37175: LD_INT 1
37177: NEG
37178: PUSH
37179: EMPTY
37180: LIST
37181: LIST
37182: PUSH
37183: LD_INT 1
37185: NEG
37186: PUSH
37187: LD_INT 2
37189: NEG
37190: PUSH
37191: EMPTY
37192: LIST
37193: LIST
37194: PUSH
37195: LD_INT 0
37197: PUSH
37198: LD_INT 2
37200: NEG
37201: PUSH
37202: EMPTY
37203: LIST
37204: LIST
37205: PUSH
37206: LD_INT 1
37208: PUSH
37209: LD_INT 1
37211: NEG
37212: PUSH
37213: EMPTY
37214: LIST
37215: LIST
37216: PUSH
37217: LD_INT 2
37219: PUSH
37220: LD_INT 0
37222: PUSH
37223: EMPTY
37224: LIST
37225: LIST
37226: PUSH
37227: LD_INT 2
37229: PUSH
37230: LD_INT 1
37232: PUSH
37233: EMPTY
37234: LIST
37235: LIST
37236: PUSH
37237: LD_INT 1
37239: PUSH
37240: LD_INT 2
37242: PUSH
37243: EMPTY
37244: LIST
37245: LIST
37246: PUSH
37247: LD_INT 0
37249: PUSH
37250: LD_INT 2
37252: PUSH
37253: EMPTY
37254: LIST
37255: LIST
37256: PUSH
37257: LD_INT 1
37259: NEG
37260: PUSH
37261: LD_INT 1
37263: PUSH
37264: EMPTY
37265: LIST
37266: LIST
37267: PUSH
37268: LD_INT 2
37270: NEG
37271: PUSH
37272: LD_INT 1
37274: NEG
37275: PUSH
37276: EMPTY
37277: LIST
37278: LIST
37279: PUSH
37280: LD_INT 2
37282: NEG
37283: PUSH
37284: LD_INT 2
37286: NEG
37287: PUSH
37288: EMPTY
37289: LIST
37290: LIST
37291: PUSH
37292: LD_INT 2
37294: NEG
37295: PUSH
37296: LD_INT 3
37298: NEG
37299: PUSH
37300: EMPTY
37301: LIST
37302: LIST
37303: PUSH
37304: LD_INT 2
37306: PUSH
37307: LD_INT 1
37309: NEG
37310: PUSH
37311: EMPTY
37312: LIST
37313: LIST
37314: PUSH
37315: LD_INT 3
37317: PUSH
37318: LD_INT 1
37320: PUSH
37321: EMPTY
37322: LIST
37323: LIST
37324: PUSH
37325: LD_INT 1
37327: PUSH
37328: LD_INT 3
37330: PUSH
37331: EMPTY
37332: LIST
37333: LIST
37334: PUSH
37335: LD_INT 1
37337: NEG
37338: PUSH
37339: LD_INT 2
37341: PUSH
37342: EMPTY
37343: LIST
37344: LIST
37345: PUSH
37346: LD_INT 3
37348: NEG
37349: PUSH
37350: LD_INT 2
37352: NEG
37353: PUSH
37354: EMPTY
37355: LIST
37356: LIST
37357: PUSH
37358: EMPTY
37359: LIST
37360: LIST
37361: LIST
37362: LIST
37363: LIST
37364: LIST
37365: LIST
37366: LIST
37367: LIST
37368: LIST
37369: LIST
37370: LIST
37371: LIST
37372: LIST
37373: LIST
37374: LIST
37375: LIST
37376: LIST
37377: LIST
37378: LIST
37379: LIST
37380: LIST
37381: LIST
37382: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37383: LD_ADDR_VAR 0 30
37387: PUSH
37388: LD_INT 0
37390: PUSH
37391: LD_INT 0
37393: PUSH
37394: EMPTY
37395: LIST
37396: LIST
37397: PUSH
37398: LD_INT 0
37400: PUSH
37401: LD_INT 1
37403: NEG
37404: PUSH
37405: EMPTY
37406: LIST
37407: LIST
37408: PUSH
37409: LD_INT 1
37411: PUSH
37412: LD_INT 0
37414: PUSH
37415: EMPTY
37416: LIST
37417: LIST
37418: PUSH
37419: LD_INT 1
37421: PUSH
37422: LD_INT 1
37424: PUSH
37425: EMPTY
37426: LIST
37427: LIST
37428: PUSH
37429: LD_INT 0
37431: PUSH
37432: LD_INT 1
37434: PUSH
37435: EMPTY
37436: LIST
37437: LIST
37438: PUSH
37439: LD_INT 1
37441: NEG
37442: PUSH
37443: LD_INT 0
37445: PUSH
37446: EMPTY
37447: LIST
37448: LIST
37449: PUSH
37450: LD_INT 1
37452: NEG
37453: PUSH
37454: LD_INT 1
37456: NEG
37457: PUSH
37458: EMPTY
37459: LIST
37460: LIST
37461: PUSH
37462: LD_INT 1
37464: NEG
37465: PUSH
37466: LD_INT 2
37468: NEG
37469: PUSH
37470: EMPTY
37471: LIST
37472: LIST
37473: PUSH
37474: LD_INT 0
37476: PUSH
37477: LD_INT 2
37479: NEG
37480: PUSH
37481: EMPTY
37482: LIST
37483: LIST
37484: PUSH
37485: LD_INT 1
37487: PUSH
37488: LD_INT 1
37490: NEG
37491: PUSH
37492: EMPTY
37493: LIST
37494: LIST
37495: PUSH
37496: LD_INT 2
37498: PUSH
37499: LD_INT 0
37501: PUSH
37502: EMPTY
37503: LIST
37504: LIST
37505: PUSH
37506: LD_INT 2
37508: PUSH
37509: LD_INT 1
37511: PUSH
37512: EMPTY
37513: LIST
37514: LIST
37515: PUSH
37516: LD_INT 2
37518: PUSH
37519: LD_INT 2
37521: PUSH
37522: EMPTY
37523: LIST
37524: LIST
37525: PUSH
37526: LD_INT 1
37528: PUSH
37529: LD_INT 2
37531: PUSH
37532: EMPTY
37533: LIST
37534: LIST
37535: PUSH
37536: LD_INT 1
37538: NEG
37539: PUSH
37540: LD_INT 1
37542: PUSH
37543: EMPTY
37544: LIST
37545: LIST
37546: PUSH
37547: LD_INT 2
37549: NEG
37550: PUSH
37551: LD_INT 0
37553: PUSH
37554: EMPTY
37555: LIST
37556: LIST
37557: PUSH
37558: LD_INT 2
37560: NEG
37561: PUSH
37562: LD_INT 1
37564: NEG
37565: PUSH
37566: EMPTY
37567: LIST
37568: LIST
37569: PUSH
37570: LD_INT 1
37572: NEG
37573: PUSH
37574: LD_INT 3
37576: NEG
37577: PUSH
37578: EMPTY
37579: LIST
37580: LIST
37581: PUSH
37582: LD_INT 1
37584: PUSH
37585: LD_INT 2
37587: NEG
37588: PUSH
37589: EMPTY
37590: LIST
37591: LIST
37592: PUSH
37593: LD_INT 3
37595: PUSH
37596: LD_INT 2
37598: PUSH
37599: EMPTY
37600: LIST
37601: LIST
37602: PUSH
37603: LD_INT 2
37605: PUSH
37606: LD_INT 3
37608: PUSH
37609: EMPTY
37610: LIST
37611: LIST
37612: PUSH
37613: LD_INT 2
37615: NEG
37616: PUSH
37617: LD_INT 1
37619: PUSH
37620: EMPTY
37621: LIST
37622: LIST
37623: PUSH
37624: LD_INT 3
37626: NEG
37627: PUSH
37628: LD_INT 1
37630: NEG
37631: PUSH
37632: EMPTY
37633: LIST
37634: LIST
37635: PUSH
37636: EMPTY
37637: LIST
37638: LIST
37639: LIST
37640: LIST
37641: LIST
37642: LIST
37643: LIST
37644: LIST
37645: LIST
37646: LIST
37647: LIST
37648: LIST
37649: LIST
37650: LIST
37651: LIST
37652: LIST
37653: LIST
37654: LIST
37655: LIST
37656: LIST
37657: LIST
37658: LIST
37659: LIST
37660: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
37661: LD_ADDR_VAR 0 31
37665: PUSH
37666: LD_INT 0
37668: PUSH
37669: LD_INT 0
37671: PUSH
37672: EMPTY
37673: LIST
37674: LIST
37675: PUSH
37676: LD_INT 0
37678: PUSH
37679: LD_INT 1
37681: NEG
37682: PUSH
37683: EMPTY
37684: LIST
37685: LIST
37686: PUSH
37687: LD_INT 1
37689: PUSH
37690: LD_INT 0
37692: PUSH
37693: EMPTY
37694: LIST
37695: LIST
37696: PUSH
37697: LD_INT 1
37699: PUSH
37700: LD_INT 1
37702: PUSH
37703: EMPTY
37704: LIST
37705: LIST
37706: PUSH
37707: LD_INT 0
37709: PUSH
37710: LD_INT 1
37712: PUSH
37713: EMPTY
37714: LIST
37715: LIST
37716: PUSH
37717: LD_INT 1
37719: NEG
37720: PUSH
37721: LD_INT 0
37723: PUSH
37724: EMPTY
37725: LIST
37726: LIST
37727: PUSH
37728: LD_INT 1
37730: NEG
37731: PUSH
37732: LD_INT 1
37734: NEG
37735: PUSH
37736: EMPTY
37737: LIST
37738: LIST
37739: PUSH
37740: LD_INT 1
37742: NEG
37743: PUSH
37744: LD_INT 2
37746: NEG
37747: PUSH
37748: EMPTY
37749: LIST
37750: LIST
37751: PUSH
37752: LD_INT 1
37754: PUSH
37755: LD_INT 1
37757: NEG
37758: PUSH
37759: EMPTY
37760: LIST
37761: LIST
37762: PUSH
37763: LD_INT 2
37765: PUSH
37766: LD_INT 0
37768: PUSH
37769: EMPTY
37770: LIST
37771: LIST
37772: PUSH
37773: LD_INT 2
37775: PUSH
37776: LD_INT 1
37778: PUSH
37779: EMPTY
37780: LIST
37781: LIST
37782: PUSH
37783: LD_INT 2
37785: PUSH
37786: LD_INT 2
37788: PUSH
37789: EMPTY
37790: LIST
37791: LIST
37792: PUSH
37793: LD_INT 1
37795: PUSH
37796: LD_INT 2
37798: PUSH
37799: EMPTY
37800: LIST
37801: LIST
37802: PUSH
37803: LD_INT 0
37805: PUSH
37806: LD_INT 2
37808: PUSH
37809: EMPTY
37810: LIST
37811: LIST
37812: PUSH
37813: LD_INT 1
37815: NEG
37816: PUSH
37817: LD_INT 1
37819: PUSH
37820: EMPTY
37821: LIST
37822: LIST
37823: PUSH
37824: LD_INT 2
37826: NEG
37827: PUSH
37828: LD_INT 1
37830: NEG
37831: PUSH
37832: EMPTY
37833: LIST
37834: LIST
37835: PUSH
37836: LD_INT 2
37838: NEG
37839: PUSH
37840: LD_INT 2
37842: NEG
37843: PUSH
37844: EMPTY
37845: LIST
37846: LIST
37847: PUSH
37848: LD_INT 2
37850: NEG
37851: PUSH
37852: LD_INT 3
37854: NEG
37855: PUSH
37856: EMPTY
37857: LIST
37858: LIST
37859: PUSH
37860: LD_INT 2
37862: PUSH
37863: LD_INT 1
37865: NEG
37866: PUSH
37867: EMPTY
37868: LIST
37869: LIST
37870: PUSH
37871: LD_INT 3
37873: PUSH
37874: LD_INT 1
37876: PUSH
37877: EMPTY
37878: LIST
37879: LIST
37880: PUSH
37881: LD_INT 1
37883: PUSH
37884: LD_INT 3
37886: PUSH
37887: EMPTY
37888: LIST
37889: LIST
37890: PUSH
37891: LD_INT 1
37893: NEG
37894: PUSH
37895: LD_INT 2
37897: PUSH
37898: EMPTY
37899: LIST
37900: LIST
37901: PUSH
37902: LD_INT 3
37904: NEG
37905: PUSH
37906: LD_INT 2
37908: NEG
37909: PUSH
37910: EMPTY
37911: LIST
37912: LIST
37913: PUSH
37914: EMPTY
37915: LIST
37916: LIST
37917: LIST
37918: LIST
37919: LIST
37920: LIST
37921: LIST
37922: LIST
37923: LIST
37924: LIST
37925: LIST
37926: LIST
37927: LIST
37928: LIST
37929: LIST
37930: LIST
37931: LIST
37932: LIST
37933: LIST
37934: LIST
37935: LIST
37936: LIST
37937: LIST
37938: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37939: LD_ADDR_VAR 0 32
37943: PUSH
37944: LD_INT 0
37946: PUSH
37947: LD_INT 0
37949: PUSH
37950: EMPTY
37951: LIST
37952: LIST
37953: PUSH
37954: LD_INT 0
37956: PUSH
37957: LD_INT 1
37959: NEG
37960: PUSH
37961: EMPTY
37962: LIST
37963: LIST
37964: PUSH
37965: LD_INT 1
37967: PUSH
37968: LD_INT 0
37970: PUSH
37971: EMPTY
37972: LIST
37973: LIST
37974: PUSH
37975: LD_INT 1
37977: PUSH
37978: LD_INT 1
37980: PUSH
37981: EMPTY
37982: LIST
37983: LIST
37984: PUSH
37985: LD_INT 0
37987: PUSH
37988: LD_INT 1
37990: PUSH
37991: EMPTY
37992: LIST
37993: LIST
37994: PUSH
37995: LD_INT 1
37997: NEG
37998: PUSH
37999: LD_INT 0
38001: PUSH
38002: EMPTY
38003: LIST
38004: LIST
38005: PUSH
38006: LD_INT 1
38008: NEG
38009: PUSH
38010: LD_INT 1
38012: NEG
38013: PUSH
38014: EMPTY
38015: LIST
38016: LIST
38017: PUSH
38018: LD_INT 1
38020: NEG
38021: PUSH
38022: LD_INT 2
38024: NEG
38025: PUSH
38026: EMPTY
38027: LIST
38028: LIST
38029: PUSH
38030: LD_INT 0
38032: PUSH
38033: LD_INT 2
38035: NEG
38036: PUSH
38037: EMPTY
38038: LIST
38039: LIST
38040: PUSH
38041: LD_INT 1
38043: PUSH
38044: LD_INT 1
38046: NEG
38047: PUSH
38048: EMPTY
38049: LIST
38050: LIST
38051: PUSH
38052: LD_INT 2
38054: PUSH
38055: LD_INT 1
38057: PUSH
38058: EMPTY
38059: LIST
38060: LIST
38061: PUSH
38062: LD_INT 2
38064: PUSH
38065: LD_INT 2
38067: PUSH
38068: EMPTY
38069: LIST
38070: LIST
38071: PUSH
38072: LD_INT 1
38074: PUSH
38075: LD_INT 2
38077: PUSH
38078: EMPTY
38079: LIST
38080: LIST
38081: PUSH
38082: LD_INT 0
38084: PUSH
38085: LD_INT 2
38087: PUSH
38088: EMPTY
38089: LIST
38090: LIST
38091: PUSH
38092: LD_INT 1
38094: NEG
38095: PUSH
38096: LD_INT 1
38098: PUSH
38099: EMPTY
38100: LIST
38101: LIST
38102: PUSH
38103: LD_INT 2
38105: NEG
38106: PUSH
38107: LD_INT 0
38109: PUSH
38110: EMPTY
38111: LIST
38112: LIST
38113: PUSH
38114: LD_INT 2
38116: NEG
38117: PUSH
38118: LD_INT 1
38120: NEG
38121: PUSH
38122: EMPTY
38123: LIST
38124: LIST
38125: PUSH
38126: LD_INT 1
38128: NEG
38129: PUSH
38130: LD_INT 3
38132: NEG
38133: PUSH
38134: EMPTY
38135: LIST
38136: LIST
38137: PUSH
38138: LD_INT 1
38140: PUSH
38141: LD_INT 2
38143: NEG
38144: PUSH
38145: EMPTY
38146: LIST
38147: LIST
38148: PUSH
38149: LD_INT 3
38151: PUSH
38152: LD_INT 2
38154: PUSH
38155: EMPTY
38156: LIST
38157: LIST
38158: PUSH
38159: LD_INT 2
38161: PUSH
38162: LD_INT 3
38164: PUSH
38165: EMPTY
38166: LIST
38167: LIST
38168: PUSH
38169: LD_INT 2
38171: NEG
38172: PUSH
38173: LD_INT 1
38175: PUSH
38176: EMPTY
38177: LIST
38178: LIST
38179: PUSH
38180: LD_INT 3
38182: NEG
38183: PUSH
38184: LD_INT 1
38186: NEG
38187: PUSH
38188: EMPTY
38189: LIST
38190: LIST
38191: PUSH
38192: EMPTY
38193: LIST
38194: LIST
38195: LIST
38196: LIST
38197: LIST
38198: LIST
38199: LIST
38200: LIST
38201: LIST
38202: LIST
38203: LIST
38204: LIST
38205: LIST
38206: LIST
38207: LIST
38208: LIST
38209: LIST
38210: LIST
38211: LIST
38212: LIST
38213: LIST
38214: LIST
38215: LIST
38216: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38217: LD_ADDR_VAR 0 33
38221: PUSH
38222: LD_INT 0
38224: PUSH
38225: LD_INT 0
38227: PUSH
38228: EMPTY
38229: LIST
38230: LIST
38231: PUSH
38232: LD_INT 0
38234: PUSH
38235: LD_INT 1
38237: NEG
38238: PUSH
38239: EMPTY
38240: LIST
38241: LIST
38242: PUSH
38243: LD_INT 1
38245: PUSH
38246: LD_INT 0
38248: PUSH
38249: EMPTY
38250: LIST
38251: LIST
38252: PUSH
38253: LD_INT 1
38255: PUSH
38256: LD_INT 1
38258: PUSH
38259: EMPTY
38260: LIST
38261: LIST
38262: PUSH
38263: LD_INT 0
38265: PUSH
38266: LD_INT 1
38268: PUSH
38269: EMPTY
38270: LIST
38271: LIST
38272: PUSH
38273: LD_INT 1
38275: NEG
38276: PUSH
38277: LD_INT 0
38279: PUSH
38280: EMPTY
38281: LIST
38282: LIST
38283: PUSH
38284: LD_INT 1
38286: NEG
38287: PUSH
38288: LD_INT 1
38290: NEG
38291: PUSH
38292: EMPTY
38293: LIST
38294: LIST
38295: PUSH
38296: LD_INT 1
38298: NEG
38299: PUSH
38300: LD_INT 2
38302: NEG
38303: PUSH
38304: EMPTY
38305: LIST
38306: LIST
38307: PUSH
38308: LD_INT 1
38310: PUSH
38311: LD_INT 1
38313: NEG
38314: PUSH
38315: EMPTY
38316: LIST
38317: LIST
38318: PUSH
38319: LD_INT 2
38321: PUSH
38322: LD_INT 0
38324: PUSH
38325: EMPTY
38326: LIST
38327: LIST
38328: PUSH
38329: LD_INT 2
38331: PUSH
38332: LD_INT 1
38334: PUSH
38335: EMPTY
38336: LIST
38337: LIST
38338: PUSH
38339: LD_INT 1
38341: PUSH
38342: LD_INT 2
38344: PUSH
38345: EMPTY
38346: LIST
38347: LIST
38348: PUSH
38349: LD_INT 0
38351: PUSH
38352: LD_INT 2
38354: PUSH
38355: EMPTY
38356: LIST
38357: LIST
38358: PUSH
38359: LD_INT 1
38361: NEG
38362: PUSH
38363: LD_INT 1
38365: PUSH
38366: EMPTY
38367: LIST
38368: LIST
38369: PUSH
38370: LD_INT 2
38372: NEG
38373: PUSH
38374: LD_INT 0
38376: PUSH
38377: EMPTY
38378: LIST
38379: LIST
38380: PUSH
38381: LD_INT 2
38383: NEG
38384: PUSH
38385: LD_INT 1
38387: NEG
38388: PUSH
38389: EMPTY
38390: LIST
38391: LIST
38392: PUSH
38393: LD_INT 2
38395: NEG
38396: PUSH
38397: LD_INT 2
38399: NEG
38400: PUSH
38401: EMPTY
38402: LIST
38403: LIST
38404: PUSH
38405: LD_INT 2
38407: NEG
38408: PUSH
38409: LD_INT 3
38411: NEG
38412: PUSH
38413: EMPTY
38414: LIST
38415: LIST
38416: PUSH
38417: LD_INT 2
38419: PUSH
38420: LD_INT 1
38422: NEG
38423: PUSH
38424: EMPTY
38425: LIST
38426: LIST
38427: PUSH
38428: LD_INT 3
38430: PUSH
38431: LD_INT 1
38433: PUSH
38434: EMPTY
38435: LIST
38436: LIST
38437: PUSH
38438: LD_INT 1
38440: PUSH
38441: LD_INT 3
38443: PUSH
38444: EMPTY
38445: LIST
38446: LIST
38447: PUSH
38448: LD_INT 1
38450: NEG
38451: PUSH
38452: LD_INT 2
38454: PUSH
38455: EMPTY
38456: LIST
38457: LIST
38458: PUSH
38459: LD_INT 3
38461: NEG
38462: PUSH
38463: LD_INT 2
38465: NEG
38466: PUSH
38467: EMPTY
38468: LIST
38469: LIST
38470: PUSH
38471: EMPTY
38472: LIST
38473: LIST
38474: LIST
38475: LIST
38476: LIST
38477: LIST
38478: LIST
38479: LIST
38480: LIST
38481: LIST
38482: LIST
38483: LIST
38484: LIST
38485: LIST
38486: LIST
38487: LIST
38488: LIST
38489: LIST
38490: LIST
38491: LIST
38492: LIST
38493: LIST
38494: LIST
38495: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38496: LD_ADDR_VAR 0 34
38500: PUSH
38501: LD_INT 0
38503: PUSH
38504: LD_INT 0
38506: PUSH
38507: EMPTY
38508: LIST
38509: LIST
38510: PUSH
38511: LD_INT 0
38513: PUSH
38514: LD_INT 1
38516: NEG
38517: PUSH
38518: EMPTY
38519: LIST
38520: LIST
38521: PUSH
38522: LD_INT 1
38524: PUSH
38525: LD_INT 0
38527: PUSH
38528: EMPTY
38529: LIST
38530: LIST
38531: PUSH
38532: LD_INT 1
38534: PUSH
38535: LD_INT 1
38537: PUSH
38538: EMPTY
38539: LIST
38540: LIST
38541: PUSH
38542: LD_INT 0
38544: PUSH
38545: LD_INT 1
38547: PUSH
38548: EMPTY
38549: LIST
38550: LIST
38551: PUSH
38552: LD_INT 1
38554: NEG
38555: PUSH
38556: LD_INT 0
38558: PUSH
38559: EMPTY
38560: LIST
38561: LIST
38562: PUSH
38563: LD_INT 1
38565: NEG
38566: PUSH
38567: LD_INT 1
38569: NEG
38570: PUSH
38571: EMPTY
38572: LIST
38573: LIST
38574: PUSH
38575: LD_INT 1
38577: NEG
38578: PUSH
38579: LD_INT 2
38581: NEG
38582: PUSH
38583: EMPTY
38584: LIST
38585: LIST
38586: PUSH
38587: LD_INT 0
38589: PUSH
38590: LD_INT 2
38592: NEG
38593: PUSH
38594: EMPTY
38595: LIST
38596: LIST
38597: PUSH
38598: LD_INT 1
38600: PUSH
38601: LD_INT 1
38603: NEG
38604: PUSH
38605: EMPTY
38606: LIST
38607: LIST
38608: PUSH
38609: LD_INT 2
38611: PUSH
38612: LD_INT 1
38614: PUSH
38615: EMPTY
38616: LIST
38617: LIST
38618: PUSH
38619: LD_INT 2
38621: PUSH
38622: LD_INT 2
38624: PUSH
38625: EMPTY
38626: LIST
38627: LIST
38628: PUSH
38629: LD_INT 1
38631: PUSH
38632: LD_INT 2
38634: PUSH
38635: EMPTY
38636: LIST
38637: LIST
38638: PUSH
38639: LD_INT 1
38641: NEG
38642: PUSH
38643: LD_INT 1
38645: PUSH
38646: EMPTY
38647: LIST
38648: LIST
38649: PUSH
38650: LD_INT 2
38652: NEG
38653: PUSH
38654: LD_INT 0
38656: PUSH
38657: EMPTY
38658: LIST
38659: LIST
38660: PUSH
38661: LD_INT 2
38663: NEG
38664: PUSH
38665: LD_INT 1
38667: NEG
38668: PUSH
38669: EMPTY
38670: LIST
38671: LIST
38672: PUSH
38673: LD_INT 2
38675: NEG
38676: PUSH
38677: LD_INT 2
38679: NEG
38680: PUSH
38681: EMPTY
38682: LIST
38683: LIST
38684: PUSH
38685: LD_INT 1
38687: NEG
38688: PUSH
38689: LD_INT 3
38691: NEG
38692: PUSH
38693: EMPTY
38694: LIST
38695: LIST
38696: PUSH
38697: LD_INT 1
38699: PUSH
38700: LD_INT 2
38702: NEG
38703: PUSH
38704: EMPTY
38705: LIST
38706: LIST
38707: PUSH
38708: LD_INT 3
38710: PUSH
38711: LD_INT 2
38713: PUSH
38714: EMPTY
38715: LIST
38716: LIST
38717: PUSH
38718: LD_INT 2
38720: PUSH
38721: LD_INT 3
38723: PUSH
38724: EMPTY
38725: LIST
38726: LIST
38727: PUSH
38728: LD_INT 2
38730: NEG
38731: PUSH
38732: LD_INT 1
38734: PUSH
38735: EMPTY
38736: LIST
38737: LIST
38738: PUSH
38739: LD_INT 3
38741: NEG
38742: PUSH
38743: LD_INT 1
38745: NEG
38746: PUSH
38747: EMPTY
38748: LIST
38749: LIST
38750: PUSH
38751: EMPTY
38752: LIST
38753: LIST
38754: LIST
38755: LIST
38756: LIST
38757: LIST
38758: LIST
38759: LIST
38760: LIST
38761: LIST
38762: LIST
38763: LIST
38764: LIST
38765: LIST
38766: LIST
38767: LIST
38768: LIST
38769: LIST
38770: LIST
38771: LIST
38772: LIST
38773: LIST
38774: LIST
38775: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
38776: LD_ADDR_VAR 0 35
38780: PUSH
38781: LD_INT 0
38783: PUSH
38784: LD_INT 0
38786: PUSH
38787: EMPTY
38788: LIST
38789: LIST
38790: PUSH
38791: LD_INT 0
38793: PUSH
38794: LD_INT 1
38796: NEG
38797: PUSH
38798: EMPTY
38799: LIST
38800: LIST
38801: PUSH
38802: LD_INT 1
38804: PUSH
38805: LD_INT 0
38807: PUSH
38808: EMPTY
38809: LIST
38810: LIST
38811: PUSH
38812: LD_INT 1
38814: PUSH
38815: LD_INT 1
38817: PUSH
38818: EMPTY
38819: LIST
38820: LIST
38821: PUSH
38822: LD_INT 0
38824: PUSH
38825: LD_INT 1
38827: PUSH
38828: EMPTY
38829: LIST
38830: LIST
38831: PUSH
38832: LD_INT 1
38834: NEG
38835: PUSH
38836: LD_INT 0
38838: PUSH
38839: EMPTY
38840: LIST
38841: LIST
38842: PUSH
38843: LD_INT 1
38845: NEG
38846: PUSH
38847: LD_INT 1
38849: NEG
38850: PUSH
38851: EMPTY
38852: LIST
38853: LIST
38854: PUSH
38855: LD_INT 2
38857: PUSH
38858: LD_INT 1
38860: PUSH
38861: EMPTY
38862: LIST
38863: LIST
38864: PUSH
38865: LD_INT 2
38867: NEG
38868: PUSH
38869: LD_INT 1
38871: NEG
38872: PUSH
38873: EMPTY
38874: LIST
38875: LIST
38876: PUSH
38877: EMPTY
38878: LIST
38879: LIST
38880: LIST
38881: LIST
38882: LIST
38883: LIST
38884: LIST
38885: LIST
38886: LIST
38887: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
38888: LD_ADDR_VAR 0 36
38892: PUSH
38893: LD_INT 0
38895: PUSH
38896: LD_INT 0
38898: PUSH
38899: EMPTY
38900: LIST
38901: LIST
38902: PUSH
38903: LD_INT 0
38905: PUSH
38906: LD_INT 1
38908: NEG
38909: PUSH
38910: EMPTY
38911: LIST
38912: LIST
38913: PUSH
38914: LD_INT 1
38916: PUSH
38917: LD_INT 0
38919: PUSH
38920: EMPTY
38921: LIST
38922: LIST
38923: PUSH
38924: LD_INT 1
38926: PUSH
38927: LD_INT 1
38929: PUSH
38930: EMPTY
38931: LIST
38932: LIST
38933: PUSH
38934: LD_INT 0
38936: PUSH
38937: LD_INT 1
38939: PUSH
38940: EMPTY
38941: LIST
38942: LIST
38943: PUSH
38944: LD_INT 1
38946: NEG
38947: PUSH
38948: LD_INT 0
38950: PUSH
38951: EMPTY
38952: LIST
38953: LIST
38954: PUSH
38955: LD_INT 1
38957: NEG
38958: PUSH
38959: LD_INT 1
38961: NEG
38962: PUSH
38963: EMPTY
38964: LIST
38965: LIST
38966: PUSH
38967: LD_INT 1
38969: NEG
38970: PUSH
38971: LD_INT 2
38973: NEG
38974: PUSH
38975: EMPTY
38976: LIST
38977: LIST
38978: PUSH
38979: LD_INT 1
38981: PUSH
38982: LD_INT 2
38984: PUSH
38985: EMPTY
38986: LIST
38987: LIST
38988: PUSH
38989: EMPTY
38990: LIST
38991: LIST
38992: LIST
38993: LIST
38994: LIST
38995: LIST
38996: LIST
38997: LIST
38998: LIST
38999: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
39000: LD_ADDR_VAR 0 37
39004: PUSH
39005: LD_INT 0
39007: PUSH
39008: LD_INT 0
39010: PUSH
39011: EMPTY
39012: LIST
39013: LIST
39014: PUSH
39015: LD_INT 0
39017: PUSH
39018: LD_INT 1
39020: NEG
39021: PUSH
39022: EMPTY
39023: LIST
39024: LIST
39025: PUSH
39026: LD_INT 1
39028: PUSH
39029: LD_INT 0
39031: PUSH
39032: EMPTY
39033: LIST
39034: LIST
39035: PUSH
39036: LD_INT 1
39038: PUSH
39039: LD_INT 1
39041: PUSH
39042: EMPTY
39043: LIST
39044: LIST
39045: PUSH
39046: LD_INT 0
39048: PUSH
39049: LD_INT 1
39051: PUSH
39052: EMPTY
39053: LIST
39054: LIST
39055: PUSH
39056: LD_INT 1
39058: NEG
39059: PUSH
39060: LD_INT 0
39062: PUSH
39063: EMPTY
39064: LIST
39065: LIST
39066: PUSH
39067: LD_INT 1
39069: NEG
39070: PUSH
39071: LD_INT 1
39073: NEG
39074: PUSH
39075: EMPTY
39076: LIST
39077: LIST
39078: PUSH
39079: LD_INT 1
39081: PUSH
39082: LD_INT 1
39084: NEG
39085: PUSH
39086: EMPTY
39087: LIST
39088: LIST
39089: PUSH
39090: LD_INT 1
39092: NEG
39093: PUSH
39094: LD_INT 1
39096: PUSH
39097: EMPTY
39098: LIST
39099: LIST
39100: PUSH
39101: EMPTY
39102: LIST
39103: LIST
39104: LIST
39105: LIST
39106: LIST
39107: LIST
39108: LIST
39109: LIST
39110: LIST
39111: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
39112: LD_ADDR_VAR 0 38
39116: PUSH
39117: LD_INT 0
39119: PUSH
39120: LD_INT 0
39122: PUSH
39123: EMPTY
39124: LIST
39125: LIST
39126: PUSH
39127: LD_INT 0
39129: PUSH
39130: LD_INT 1
39132: NEG
39133: PUSH
39134: EMPTY
39135: LIST
39136: LIST
39137: PUSH
39138: LD_INT 1
39140: PUSH
39141: LD_INT 0
39143: PUSH
39144: EMPTY
39145: LIST
39146: LIST
39147: PUSH
39148: LD_INT 1
39150: PUSH
39151: LD_INT 1
39153: PUSH
39154: EMPTY
39155: LIST
39156: LIST
39157: PUSH
39158: LD_INT 0
39160: PUSH
39161: LD_INT 1
39163: PUSH
39164: EMPTY
39165: LIST
39166: LIST
39167: PUSH
39168: LD_INT 1
39170: NEG
39171: PUSH
39172: LD_INT 0
39174: PUSH
39175: EMPTY
39176: LIST
39177: LIST
39178: PUSH
39179: LD_INT 1
39181: NEG
39182: PUSH
39183: LD_INT 1
39185: NEG
39186: PUSH
39187: EMPTY
39188: LIST
39189: LIST
39190: PUSH
39191: LD_INT 2
39193: PUSH
39194: LD_INT 1
39196: PUSH
39197: EMPTY
39198: LIST
39199: LIST
39200: PUSH
39201: LD_INT 2
39203: NEG
39204: PUSH
39205: LD_INT 1
39207: NEG
39208: PUSH
39209: EMPTY
39210: LIST
39211: LIST
39212: PUSH
39213: EMPTY
39214: LIST
39215: LIST
39216: LIST
39217: LIST
39218: LIST
39219: LIST
39220: LIST
39221: LIST
39222: LIST
39223: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
39224: LD_ADDR_VAR 0 39
39228: PUSH
39229: LD_INT 0
39231: PUSH
39232: LD_INT 0
39234: PUSH
39235: EMPTY
39236: LIST
39237: LIST
39238: PUSH
39239: LD_INT 0
39241: PUSH
39242: LD_INT 1
39244: NEG
39245: PUSH
39246: EMPTY
39247: LIST
39248: LIST
39249: PUSH
39250: LD_INT 1
39252: PUSH
39253: LD_INT 0
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: PUSH
39260: LD_INT 1
39262: PUSH
39263: LD_INT 1
39265: PUSH
39266: EMPTY
39267: LIST
39268: LIST
39269: PUSH
39270: LD_INT 0
39272: PUSH
39273: LD_INT 1
39275: PUSH
39276: EMPTY
39277: LIST
39278: LIST
39279: PUSH
39280: LD_INT 1
39282: NEG
39283: PUSH
39284: LD_INT 0
39286: PUSH
39287: EMPTY
39288: LIST
39289: LIST
39290: PUSH
39291: LD_INT 1
39293: NEG
39294: PUSH
39295: LD_INT 1
39297: NEG
39298: PUSH
39299: EMPTY
39300: LIST
39301: LIST
39302: PUSH
39303: LD_INT 1
39305: NEG
39306: PUSH
39307: LD_INT 2
39309: NEG
39310: PUSH
39311: EMPTY
39312: LIST
39313: LIST
39314: PUSH
39315: LD_INT 1
39317: PUSH
39318: LD_INT 2
39320: PUSH
39321: EMPTY
39322: LIST
39323: LIST
39324: PUSH
39325: EMPTY
39326: LIST
39327: LIST
39328: LIST
39329: LIST
39330: LIST
39331: LIST
39332: LIST
39333: LIST
39334: LIST
39335: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
39336: LD_ADDR_VAR 0 40
39340: PUSH
39341: LD_INT 0
39343: PUSH
39344: LD_INT 0
39346: PUSH
39347: EMPTY
39348: LIST
39349: LIST
39350: PUSH
39351: LD_INT 0
39353: PUSH
39354: LD_INT 1
39356: NEG
39357: PUSH
39358: EMPTY
39359: LIST
39360: LIST
39361: PUSH
39362: LD_INT 1
39364: PUSH
39365: LD_INT 0
39367: PUSH
39368: EMPTY
39369: LIST
39370: LIST
39371: PUSH
39372: LD_INT 1
39374: PUSH
39375: LD_INT 1
39377: PUSH
39378: EMPTY
39379: LIST
39380: LIST
39381: PUSH
39382: LD_INT 0
39384: PUSH
39385: LD_INT 1
39387: PUSH
39388: EMPTY
39389: LIST
39390: LIST
39391: PUSH
39392: LD_INT 1
39394: NEG
39395: PUSH
39396: LD_INT 0
39398: PUSH
39399: EMPTY
39400: LIST
39401: LIST
39402: PUSH
39403: LD_INT 1
39405: NEG
39406: PUSH
39407: LD_INT 1
39409: NEG
39410: PUSH
39411: EMPTY
39412: LIST
39413: LIST
39414: PUSH
39415: LD_INT 1
39417: PUSH
39418: LD_INT 1
39420: NEG
39421: PUSH
39422: EMPTY
39423: LIST
39424: LIST
39425: PUSH
39426: LD_INT 1
39428: NEG
39429: PUSH
39430: LD_INT 1
39432: PUSH
39433: EMPTY
39434: LIST
39435: LIST
39436: PUSH
39437: EMPTY
39438: LIST
39439: LIST
39440: LIST
39441: LIST
39442: LIST
39443: LIST
39444: LIST
39445: LIST
39446: LIST
39447: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39448: LD_ADDR_VAR 0 41
39452: PUSH
39453: LD_INT 0
39455: PUSH
39456: LD_INT 0
39458: PUSH
39459: EMPTY
39460: LIST
39461: LIST
39462: PUSH
39463: LD_INT 0
39465: PUSH
39466: LD_INT 1
39468: NEG
39469: PUSH
39470: EMPTY
39471: LIST
39472: LIST
39473: PUSH
39474: LD_INT 1
39476: PUSH
39477: LD_INT 0
39479: PUSH
39480: EMPTY
39481: LIST
39482: LIST
39483: PUSH
39484: LD_INT 1
39486: PUSH
39487: LD_INT 1
39489: PUSH
39490: EMPTY
39491: LIST
39492: LIST
39493: PUSH
39494: LD_INT 0
39496: PUSH
39497: LD_INT 1
39499: PUSH
39500: EMPTY
39501: LIST
39502: LIST
39503: PUSH
39504: LD_INT 1
39506: NEG
39507: PUSH
39508: LD_INT 0
39510: PUSH
39511: EMPTY
39512: LIST
39513: LIST
39514: PUSH
39515: LD_INT 1
39517: NEG
39518: PUSH
39519: LD_INT 1
39521: NEG
39522: PUSH
39523: EMPTY
39524: LIST
39525: LIST
39526: PUSH
39527: LD_INT 1
39529: NEG
39530: PUSH
39531: LD_INT 2
39533: NEG
39534: PUSH
39535: EMPTY
39536: LIST
39537: LIST
39538: PUSH
39539: LD_INT 1
39541: PUSH
39542: LD_INT 1
39544: NEG
39545: PUSH
39546: EMPTY
39547: LIST
39548: LIST
39549: PUSH
39550: LD_INT 2
39552: PUSH
39553: LD_INT 0
39555: PUSH
39556: EMPTY
39557: LIST
39558: LIST
39559: PUSH
39560: LD_INT 2
39562: PUSH
39563: LD_INT 1
39565: PUSH
39566: EMPTY
39567: LIST
39568: LIST
39569: PUSH
39570: LD_INT 2
39572: PUSH
39573: LD_INT 2
39575: PUSH
39576: EMPTY
39577: LIST
39578: LIST
39579: PUSH
39580: LD_INT 1
39582: PUSH
39583: LD_INT 2
39585: PUSH
39586: EMPTY
39587: LIST
39588: LIST
39589: PUSH
39590: LD_INT 1
39592: NEG
39593: PUSH
39594: LD_INT 1
39596: PUSH
39597: EMPTY
39598: LIST
39599: LIST
39600: PUSH
39601: LD_INT 2
39603: NEG
39604: PUSH
39605: LD_INT 0
39607: PUSH
39608: EMPTY
39609: LIST
39610: LIST
39611: PUSH
39612: LD_INT 2
39614: NEG
39615: PUSH
39616: LD_INT 1
39618: NEG
39619: PUSH
39620: EMPTY
39621: LIST
39622: LIST
39623: PUSH
39624: LD_INT 2
39626: NEG
39627: PUSH
39628: LD_INT 2
39630: NEG
39631: PUSH
39632: EMPTY
39633: LIST
39634: LIST
39635: PUSH
39636: LD_INT 2
39638: NEG
39639: PUSH
39640: LD_INT 3
39642: NEG
39643: PUSH
39644: EMPTY
39645: LIST
39646: LIST
39647: PUSH
39648: LD_INT 2
39650: PUSH
39651: LD_INT 1
39653: NEG
39654: PUSH
39655: EMPTY
39656: LIST
39657: LIST
39658: PUSH
39659: LD_INT 3
39661: PUSH
39662: LD_INT 0
39664: PUSH
39665: EMPTY
39666: LIST
39667: LIST
39668: PUSH
39669: LD_INT 3
39671: PUSH
39672: LD_INT 1
39674: PUSH
39675: EMPTY
39676: LIST
39677: LIST
39678: PUSH
39679: LD_INT 3
39681: PUSH
39682: LD_INT 2
39684: PUSH
39685: EMPTY
39686: LIST
39687: LIST
39688: PUSH
39689: LD_INT 3
39691: PUSH
39692: LD_INT 3
39694: PUSH
39695: EMPTY
39696: LIST
39697: LIST
39698: PUSH
39699: LD_INT 2
39701: PUSH
39702: LD_INT 3
39704: PUSH
39705: EMPTY
39706: LIST
39707: LIST
39708: PUSH
39709: LD_INT 2
39711: NEG
39712: PUSH
39713: LD_INT 1
39715: PUSH
39716: EMPTY
39717: LIST
39718: LIST
39719: PUSH
39720: LD_INT 3
39722: NEG
39723: PUSH
39724: LD_INT 0
39726: PUSH
39727: EMPTY
39728: LIST
39729: LIST
39730: PUSH
39731: LD_INT 3
39733: NEG
39734: PUSH
39735: LD_INT 1
39737: NEG
39738: PUSH
39739: EMPTY
39740: LIST
39741: LIST
39742: PUSH
39743: LD_INT 3
39745: NEG
39746: PUSH
39747: LD_INT 2
39749: NEG
39750: PUSH
39751: EMPTY
39752: LIST
39753: LIST
39754: PUSH
39755: LD_INT 3
39757: NEG
39758: PUSH
39759: LD_INT 3
39761: NEG
39762: PUSH
39763: EMPTY
39764: LIST
39765: LIST
39766: PUSH
39767: EMPTY
39768: LIST
39769: LIST
39770: LIST
39771: LIST
39772: LIST
39773: LIST
39774: LIST
39775: LIST
39776: LIST
39777: LIST
39778: LIST
39779: LIST
39780: LIST
39781: LIST
39782: LIST
39783: LIST
39784: LIST
39785: LIST
39786: LIST
39787: LIST
39788: LIST
39789: LIST
39790: LIST
39791: LIST
39792: LIST
39793: LIST
39794: LIST
39795: LIST
39796: LIST
39797: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39798: LD_ADDR_VAR 0 42
39802: PUSH
39803: LD_INT 0
39805: PUSH
39806: LD_INT 0
39808: PUSH
39809: EMPTY
39810: LIST
39811: LIST
39812: PUSH
39813: LD_INT 0
39815: PUSH
39816: LD_INT 1
39818: NEG
39819: PUSH
39820: EMPTY
39821: LIST
39822: LIST
39823: PUSH
39824: LD_INT 1
39826: PUSH
39827: LD_INT 0
39829: PUSH
39830: EMPTY
39831: LIST
39832: LIST
39833: PUSH
39834: LD_INT 1
39836: PUSH
39837: LD_INT 1
39839: PUSH
39840: EMPTY
39841: LIST
39842: LIST
39843: PUSH
39844: LD_INT 0
39846: PUSH
39847: LD_INT 1
39849: PUSH
39850: EMPTY
39851: LIST
39852: LIST
39853: PUSH
39854: LD_INT 1
39856: NEG
39857: PUSH
39858: LD_INT 0
39860: PUSH
39861: EMPTY
39862: LIST
39863: LIST
39864: PUSH
39865: LD_INT 1
39867: NEG
39868: PUSH
39869: LD_INT 1
39871: NEG
39872: PUSH
39873: EMPTY
39874: LIST
39875: LIST
39876: PUSH
39877: LD_INT 1
39879: NEG
39880: PUSH
39881: LD_INT 2
39883: NEG
39884: PUSH
39885: EMPTY
39886: LIST
39887: LIST
39888: PUSH
39889: LD_INT 0
39891: PUSH
39892: LD_INT 2
39894: NEG
39895: PUSH
39896: EMPTY
39897: LIST
39898: LIST
39899: PUSH
39900: LD_INT 1
39902: PUSH
39903: LD_INT 1
39905: NEG
39906: PUSH
39907: EMPTY
39908: LIST
39909: LIST
39910: PUSH
39911: LD_INT 2
39913: PUSH
39914: LD_INT 1
39916: PUSH
39917: EMPTY
39918: LIST
39919: LIST
39920: PUSH
39921: LD_INT 2
39923: PUSH
39924: LD_INT 2
39926: PUSH
39927: EMPTY
39928: LIST
39929: LIST
39930: PUSH
39931: LD_INT 1
39933: PUSH
39934: LD_INT 2
39936: PUSH
39937: EMPTY
39938: LIST
39939: LIST
39940: PUSH
39941: LD_INT 0
39943: PUSH
39944: LD_INT 2
39946: PUSH
39947: EMPTY
39948: LIST
39949: LIST
39950: PUSH
39951: LD_INT 1
39953: NEG
39954: PUSH
39955: LD_INT 1
39957: PUSH
39958: EMPTY
39959: LIST
39960: LIST
39961: PUSH
39962: LD_INT 2
39964: NEG
39965: PUSH
39966: LD_INT 1
39968: NEG
39969: PUSH
39970: EMPTY
39971: LIST
39972: LIST
39973: PUSH
39974: LD_INT 2
39976: NEG
39977: PUSH
39978: LD_INT 2
39980: NEG
39981: PUSH
39982: EMPTY
39983: LIST
39984: LIST
39985: PUSH
39986: LD_INT 2
39988: NEG
39989: PUSH
39990: LD_INT 3
39992: NEG
39993: PUSH
39994: EMPTY
39995: LIST
39996: LIST
39997: PUSH
39998: LD_INT 1
40000: NEG
40001: PUSH
40002: LD_INT 3
40004: NEG
40005: PUSH
40006: EMPTY
40007: LIST
40008: LIST
40009: PUSH
40010: LD_INT 0
40012: PUSH
40013: LD_INT 3
40015: NEG
40016: PUSH
40017: EMPTY
40018: LIST
40019: LIST
40020: PUSH
40021: LD_INT 1
40023: PUSH
40024: LD_INT 2
40026: NEG
40027: PUSH
40028: EMPTY
40029: LIST
40030: LIST
40031: PUSH
40032: LD_INT 3
40034: PUSH
40035: LD_INT 2
40037: PUSH
40038: EMPTY
40039: LIST
40040: LIST
40041: PUSH
40042: LD_INT 3
40044: PUSH
40045: LD_INT 3
40047: PUSH
40048: EMPTY
40049: LIST
40050: LIST
40051: PUSH
40052: LD_INT 2
40054: PUSH
40055: LD_INT 3
40057: PUSH
40058: EMPTY
40059: LIST
40060: LIST
40061: PUSH
40062: LD_INT 1
40064: PUSH
40065: LD_INT 3
40067: PUSH
40068: EMPTY
40069: LIST
40070: LIST
40071: PUSH
40072: LD_INT 0
40074: PUSH
40075: LD_INT 3
40077: PUSH
40078: EMPTY
40079: LIST
40080: LIST
40081: PUSH
40082: LD_INT 1
40084: NEG
40085: PUSH
40086: LD_INT 2
40088: PUSH
40089: EMPTY
40090: LIST
40091: LIST
40092: PUSH
40093: LD_INT 3
40095: NEG
40096: PUSH
40097: LD_INT 2
40099: NEG
40100: PUSH
40101: EMPTY
40102: LIST
40103: LIST
40104: PUSH
40105: LD_INT 3
40107: NEG
40108: PUSH
40109: LD_INT 3
40111: NEG
40112: PUSH
40113: EMPTY
40114: LIST
40115: LIST
40116: PUSH
40117: EMPTY
40118: LIST
40119: LIST
40120: LIST
40121: LIST
40122: LIST
40123: LIST
40124: LIST
40125: LIST
40126: LIST
40127: LIST
40128: LIST
40129: LIST
40130: LIST
40131: LIST
40132: LIST
40133: LIST
40134: LIST
40135: LIST
40136: LIST
40137: LIST
40138: LIST
40139: LIST
40140: LIST
40141: LIST
40142: LIST
40143: LIST
40144: LIST
40145: LIST
40146: LIST
40147: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40148: LD_ADDR_VAR 0 43
40152: PUSH
40153: LD_INT 0
40155: PUSH
40156: LD_INT 0
40158: PUSH
40159: EMPTY
40160: LIST
40161: LIST
40162: PUSH
40163: LD_INT 0
40165: PUSH
40166: LD_INT 1
40168: NEG
40169: PUSH
40170: EMPTY
40171: LIST
40172: LIST
40173: PUSH
40174: LD_INT 1
40176: PUSH
40177: LD_INT 0
40179: PUSH
40180: EMPTY
40181: LIST
40182: LIST
40183: PUSH
40184: LD_INT 1
40186: PUSH
40187: LD_INT 1
40189: PUSH
40190: EMPTY
40191: LIST
40192: LIST
40193: PUSH
40194: LD_INT 0
40196: PUSH
40197: LD_INT 1
40199: PUSH
40200: EMPTY
40201: LIST
40202: LIST
40203: PUSH
40204: LD_INT 1
40206: NEG
40207: PUSH
40208: LD_INT 0
40210: PUSH
40211: EMPTY
40212: LIST
40213: LIST
40214: PUSH
40215: LD_INT 1
40217: NEG
40218: PUSH
40219: LD_INT 1
40221: NEG
40222: PUSH
40223: EMPTY
40224: LIST
40225: LIST
40226: PUSH
40227: LD_INT 1
40229: NEG
40230: PUSH
40231: LD_INT 2
40233: NEG
40234: PUSH
40235: EMPTY
40236: LIST
40237: LIST
40238: PUSH
40239: LD_INT 0
40241: PUSH
40242: LD_INT 2
40244: NEG
40245: PUSH
40246: EMPTY
40247: LIST
40248: LIST
40249: PUSH
40250: LD_INT 1
40252: PUSH
40253: LD_INT 1
40255: NEG
40256: PUSH
40257: EMPTY
40258: LIST
40259: LIST
40260: PUSH
40261: LD_INT 2
40263: PUSH
40264: LD_INT 0
40266: PUSH
40267: EMPTY
40268: LIST
40269: LIST
40270: PUSH
40271: LD_INT 2
40273: PUSH
40274: LD_INT 1
40276: PUSH
40277: EMPTY
40278: LIST
40279: LIST
40280: PUSH
40281: LD_INT 1
40283: PUSH
40284: LD_INT 2
40286: PUSH
40287: EMPTY
40288: LIST
40289: LIST
40290: PUSH
40291: LD_INT 0
40293: PUSH
40294: LD_INT 2
40296: PUSH
40297: EMPTY
40298: LIST
40299: LIST
40300: PUSH
40301: LD_INT 1
40303: NEG
40304: PUSH
40305: LD_INT 1
40307: PUSH
40308: EMPTY
40309: LIST
40310: LIST
40311: PUSH
40312: LD_INT 2
40314: NEG
40315: PUSH
40316: LD_INT 0
40318: PUSH
40319: EMPTY
40320: LIST
40321: LIST
40322: PUSH
40323: LD_INT 2
40325: NEG
40326: PUSH
40327: LD_INT 1
40329: NEG
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: PUSH
40335: LD_INT 1
40337: NEG
40338: PUSH
40339: LD_INT 3
40341: NEG
40342: PUSH
40343: EMPTY
40344: LIST
40345: LIST
40346: PUSH
40347: LD_INT 0
40349: PUSH
40350: LD_INT 3
40352: NEG
40353: PUSH
40354: EMPTY
40355: LIST
40356: LIST
40357: PUSH
40358: LD_INT 1
40360: PUSH
40361: LD_INT 2
40363: NEG
40364: PUSH
40365: EMPTY
40366: LIST
40367: LIST
40368: PUSH
40369: LD_INT 2
40371: PUSH
40372: LD_INT 1
40374: NEG
40375: PUSH
40376: EMPTY
40377: LIST
40378: LIST
40379: PUSH
40380: LD_INT 3
40382: PUSH
40383: LD_INT 0
40385: PUSH
40386: EMPTY
40387: LIST
40388: LIST
40389: PUSH
40390: LD_INT 3
40392: PUSH
40393: LD_INT 1
40395: PUSH
40396: EMPTY
40397: LIST
40398: LIST
40399: PUSH
40400: LD_INT 1
40402: PUSH
40403: LD_INT 3
40405: PUSH
40406: EMPTY
40407: LIST
40408: LIST
40409: PUSH
40410: LD_INT 0
40412: PUSH
40413: LD_INT 3
40415: PUSH
40416: EMPTY
40417: LIST
40418: LIST
40419: PUSH
40420: LD_INT 1
40422: NEG
40423: PUSH
40424: LD_INT 2
40426: PUSH
40427: EMPTY
40428: LIST
40429: LIST
40430: PUSH
40431: LD_INT 2
40433: NEG
40434: PUSH
40435: LD_INT 1
40437: PUSH
40438: EMPTY
40439: LIST
40440: LIST
40441: PUSH
40442: LD_INT 3
40444: NEG
40445: PUSH
40446: LD_INT 0
40448: PUSH
40449: EMPTY
40450: LIST
40451: LIST
40452: PUSH
40453: LD_INT 3
40455: NEG
40456: PUSH
40457: LD_INT 1
40459: NEG
40460: PUSH
40461: EMPTY
40462: LIST
40463: LIST
40464: PUSH
40465: EMPTY
40466: LIST
40467: LIST
40468: LIST
40469: LIST
40470: LIST
40471: LIST
40472: LIST
40473: LIST
40474: LIST
40475: LIST
40476: LIST
40477: LIST
40478: LIST
40479: LIST
40480: LIST
40481: LIST
40482: LIST
40483: LIST
40484: LIST
40485: LIST
40486: LIST
40487: LIST
40488: LIST
40489: LIST
40490: LIST
40491: LIST
40492: LIST
40493: LIST
40494: LIST
40495: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40496: LD_ADDR_VAR 0 44
40500: PUSH
40501: LD_INT 0
40503: PUSH
40504: LD_INT 0
40506: PUSH
40507: EMPTY
40508: LIST
40509: LIST
40510: PUSH
40511: LD_INT 0
40513: PUSH
40514: LD_INT 1
40516: NEG
40517: PUSH
40518: EMPTY
40519: LIST
40520: LIST
40521: PUSH
40522: LD_INT 1
40524: PUSH
40525: LD_INT 0
40527: PUSH
40528: EMPTY
40529: LIST
40530: LIST
40531: PUSH
40532: LD_INT 1
40534: PUSH
40535: LD_INT 1
40537: PUSH
40538: EMPTY
40539: LIST
40540: LIST
40541: PUSH
40542: LD_INT 0
40544: PUSH
40545: LD_INT 1
40547: PUSH
40548: EMPTY
40549: LIST
40550: LIST
40551: PUSH
40552: LD_INT 1
40554: NEG
40555: PUSH
40556: LD_INT 0
40558: PUSH
40559: EMPTY
40560: LIST
40561: LIST
40562: PUSH
40563: LD_INT 1
40565: NEG
40566: PUSH
40567: LD_INT 1
40569: NEG
40570: PUSH
40571: EMPTY
40572: LIST
40573: LIST
40574: PUSH
40575: LD_INT 1
40577: NEG
40578: PUSH
40579: LD_INT 2
40581: NEG
40582: PUSH
40583: EMPTY
40584: LIST
40585: LIST
40586: PUSH
40587: LD_INT 1
40589: PUSH
40590: LD_INT 1
40592: NEG
40593: PUSH
40594: EMPTY
40595: LIST
40596: LIST
40597: PUSH
40598: LD_INT 2
40600: PUSH
40601: LD_INT 0
40603: PUSH
40604: EMPTY
40605: LIST
40606: LIST
40607: PUSH
40608: LD_INT 2
40610: PUSH
40611: LD_INT 1
40613: PUSH
40614: EMPTY
40615: LIST
40616: LIST
40617: PUSH
40618: LD_INT 2
40620: PUSH
40621: LD_INT 2
40623: PUSH
40624: EMPTY
40625: LIST
40626: LIST
40627: PUSH
40628: LD_INT 1
40630: PUSH
40631: LD_INT 2
40633: PUSH
40634: EMPTY
40635: LIST
40636: LIST
40637: PUSH
40638: LD_INT 1
40640: NEG
40641: PUSH
40642: LD_INT 1
40644: PUSH
40645: EMPTY
40646: LIST
40647: LIST
40648: PUSH
40649: LD_INT 2
40651: NEG
40652: PUSH
40653: LD_INT 0
40655: PUSH
40656: EMPTY
40657: LIST
40658: LIST
40659: PUSH
40660: LD_INT 2
40662: NEG
40663: PUSH
40664: LD_INT 1
40666: NEG
40667: PUSH
40668: EMPTY
40669: LIST
40670: LIST
40671: PUSH
40672: LD_INT 2
40674: NEG
40675: PUSH
40676: LD_INT 2
40678: NEG
40679: PUSH
40680: EMPTY
40681: LIST
40682: LIST
40683: PUSH
40684: LD_INT 2
40686: NEG
40687: PUSH
40688: LD_INT 3
40690: NEG
40691: PUSH
40692: EMPTY
40693: LIST
40694: LIST
40695: PUSH
40696: LD_INT 2
40698: PUSH
40699: LD_INT 1
40701: NEG
40702: PUSH
40703: EMPTY
40704: LIST
40705: LIST
40706: PUSH
40707: LD_INT 3
40709: PUSH
40710: LD_INT 0
40712: PUSH
40713: EMPTY
40714: LIST
40715: LIST
40716: PUSH
40717: LD_INT 3
40719: PUSH
40720: LD_INT 1
40722: PUSH
40723: EMPTY
40724: LIST
40725: LIST
40726: PUSH
40727: LD_INT 3
40729: PUSH
40730: LD_INT 2
40732: PUSH
40733: EMPTY
40734: LIST
40735: LIST
40736: PUSH
40737: LD_INT 3
40739: PUSH
40740: LD_INT 3
40742: PUSH
40743: EMPTY
40744: LIST
40745: LIST
40746: PUSH
40747: LD_INT 2
40749: PUSH
40750: LD_INT 3
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: PUSH
40757: LD_INT 2
40759: NEG
40760: PUSH
40761: LD_INT 1
40763: PUSH
40764: EMPTY
40765: LIST
40766: LIST
40767: PUSH
40768: LD_INT 3
40770: NEG
40771: PUSH
40772: LD_INT 0
40774: PUSH
40775: EMPTY
40776: LIST
40777: LIST
40778: PUSH
40779: LD_INT 3
40781: NEG
40782: PUSH
40783: LD_INT 1
40785: NEG
40786: PUSH
40787: EMPTY
40788: LIST
40789: LIST
40790: PUSH
40791: LD_INT 3
40793: NEG
40794: PUSH
40795: LD_INT 2
40797: NEG
40798: PUSH
40799: EMPTY
40800: LIST
40801: LIST
40802: PUSH
40803: LD_INT 3
40805: NEG
40806: PUSH
40807: LD_INT 3
40809: NEG
40810: PUSH
40811: EMPTY
40812: LIST
40813: LIST
40814: PUSH
40815: EMPTY
40816: LIST
40817: LIST
40818: LIST
40819: LIST
40820: LIST
40821: LIST
40822: LIST
40823: LIST
40824: LIST
40825: LIST
40826: LIST
40827: LIST
40828: LIST
40829: LIST
40830: LIST
40831: LIST
40832: LIST
40833: LIST
40834: LIST
40835: LIST
40836: LIST
40837: LIST
40838: LIST
40839: LIST
40840: LIST
40841: LIST
40842: LIST
40843: LIST
40844: LIST
40845: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40846: LD_ADDR_VAR 0 45
40850: PUSH
40851: LD_INT 0
40853: PUSH
40854: LD_INT 0
40856: PUSH
40857: EMPTY
40858: LIST
40859: LIST
40860: PUSH
40861: LD_INT 0
40863: PUSH
40864: LD_INT 1
40866: NEG
40867: PUSH
40868: EMPTY
40869: LIST
40870: LIST
40871: PUSH
40872: LD_INT 1
40874: PUSH
40875: LD_INT 0
40877: PUSH
40878: EMPTY
40879: LIST
40880: LIST
40881: PUSH
40882: LD_INT 1
40884: PUSH
40885: LD_INT 1
40887: PUSH
40888: EMPTY
40889: LIST
40890: LIST
40891: PUSH
40892: LD_INT 0
40894: PUSH
40895: LD_INT 1
40897: PUSH
40898: EMPTY
40899: LIST
40900: LIST
40901: PUSH
40902: LD_INT 1
40904: NEG
40905: PUSH
40906: LD_INT 0
40908: PUSH
40909: EMPTY
40910: LIST
40911: LIST
40912: PUSH
40913: LD_INT 1
40915: NEG
40916: PUSH
40917: LD_INT 1
40919: NEG
40920: PUSH
40921: EMPTY
40922: LIST
40923: LIST
40924: PUSH
40925: LD_INT 1
40927: NEG
40928: PUSH
40929: LD_INT 2
40931: NEG
40932: PUSH
40933: EMPTY
40934: LIST
40935: LIST
40936: PUSH
40937: LD_INT 0
40939: PUSH
40940: LD_INT 2
40942: NEG
40943: PUSH
40944: EMPTY
40945: LIST
40946: LIST
40947: PUSH
40948: LD_INT 1
40950: PUSH
40951: LD_INT 1
40953: NEG
40954: PUSH
40955: EMPTY
40956: LIST
40957: LIST
40958: PUSH
40959: LD_INT 2
40961: PUSH
40962: LD_INT 1
40964: PUSH
40965: EMPTY
40966: LIST
40967: LIST
40968: PUSH
40969: LD_INT 2
40971: PUSH
40972: LD_INT 2
40974: PUSH
40975: EMPTY
40976: LIST
40977: LIST
40978: PUSH
40979: LD_INT 1
40981: PUSH
40982: LD_INT 2
40984: PUSH
40985: EMPTY
40986: LIST
40987: LIST
40988: PUSH
40989: LD_INT 0
40991: PUSH
40992: LD_INT 2
40994: PUSH
40995: EMPTY
40996: LIST
40997: LIST
40998: PUSH
40999: LD_INT 1
41001: NEG
41002: PUSH
41003: LD_INT 1
41005: PUSH
41006: EMPTY
41007: LIST
41008: LIST
41009: PUSH
41010: LD_INT 2
41012: NEG
41013: PUSH
41014: LD_INT 1
41016: NEG
41017: PUSH
41018: EMPTY
41019: LIST
41020: LIST
41021: PUSH
41022: LD_INT 2
41024: NEG
41025: PUSH
41026: LD_INT 2
41028: NEG
41029: PUSH
41030: EMPTY
41031: LIST
41032: LIST
41033: PUSH
41034: LD_INT 2
41036: NEG
41037: PUSH
41038: LD_INT 3
41040: NEG
41041: PUSH
41042: EMPTY
41043: LIST
41044: LIST
41045: PUSH
41046: LD_INT 1
41048: NEG
41049: PUSH
41050: LD_INT 3
41052: NEG
41053: PUSH
41054: EMPTY
41055: LIST
41056: LIST
41057: PUSH
41058: LD_INT 0
41060: PUSH
41061: LD_INT 3
41063: NEG
41064: PUSH
41065: EMPTY
41066: LIST
41067: LIST
41068: PUSH
41069: LD_INT 1
41071: PUSH
41072: LD_INT 2
41074: NEG
41075: PUSH
41076: EMPTY
41077: LIST
41078: LIST
41079: PUSH
41080: LD_INT 3
41082: PUSH
41083: LD_INT 2
41085: PUSH
41086: EMPTY
41087: LIST
41088: LIST
41089: PUSH
41090: LD_INT 3
41092: PUSH
41093: LD_INT 3
41095: PUSH
41096: EMPTY
41097: LIST
41098: LIST
41099: PUSH
41100: LD_INT 2
41102: PUSH
41103: LD_INT 3
41105: PUSH
41106: EMPTY
41107: LIST
41108: LIST
41109: PUSH
41110: LD_INT 1
41112: PUSH
41113: LD_INT 3
41115: PUSH
41116: EMPTY
41117: LIST
41118: LIST
41119: PUSH
41120: LD_INT 0
41122: PUSH
41123: LD_INT 3
41125: PUSH
41126: EMPTY
41127: LIST
41128: LIST
41129: PUSH
41130: LD_INT 1
41132: NEG
41133: PUSH
41134: LD_INT 2
41136: PUSH
41137: EMPTY
41138: LIST
41139: LIST
41140: PUSH
41141: LD_INT 3
41143: NEG
41144: PUSH
41145: LD_INT 2
41147: NEG
41148: PUSH
41149: EMPTY
41150: LIST
41151: LIST
41152: PUSH
41153: LD_INT 3
41155: NEG
41156: PUSH
41157: LD_INT 3
41159: NEG
41160: PUSH
41161: EMPTY
41162: LIST
41163: LIST
41164: PUSH
41165: EMPTY
41166: LIST
41167: LIST
41168: LIST
41169: LIST
41170: LIST
41171: LIST
41172: LIST
41173: LIST
41174: LIST
41175: LIST
41176: LIST
41177: LIST
41178: LIST
41179: LIST
41180: LIST
41181: LIST
41182: LIST
41183: LIST
41184: LIST
41185: LIST
41186: LIST
41187: LIST
41188: LIST
41189: LIST
41190: LIST
41191: LIST
41192: LIST
41193: LIST
41194: LIST
41195: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41196: LD_ADDR_VAR 0 46
41200: PUSH
41201: LD_INT 0
41203: PUSH
41204: LD_INT 0
41206: PUSH
41207: EMPTY
41208: LIST
41209: LIST
41210: PUSH
41211: LD_INT 0
41213: PUSH
41214: LD_INT 1
41216: NEG
41217: PUSH
41218: EMPTY
41219: LIST
41220: LIST
41221: PUSH
41222: LD_INT 1
41224: PUSH
41225: LD_INT 0
41227: PUSH
41228: EMPTY
41229: LIST
41230: LIST
41231: PUSH
41232: LD_INT 1
41234: PUSH
41235: LD_INT 1
41237: PUSH
41238: EMPTY
41239: LIST
41240: LIST
41241: PUSH
41242: LD_INT 0
41244: PUSH
41245: LD_INT 1
41247: PUSH
41248: EMPTY
41249: LIST
41250: LIST
41251: PUSH
41252: LD_INT 1
41254: NEG
41255: PUSH
41256: LD_INT 0
41258: PUSH
41259: EMPTY
41260: LIST
41261: LIST
41262: PUSH
41263: LD_INT 1
41265: NEG
41266: PUSH
41267: LD_INT 1
41269: NEG
41270: PUSH
41271: EMPTY
41272: LIST
41273: LIST
41274: PUSH
41275: LD_INT 1
41277: NEG
41278: PUSH
41279: LD_INT 2
41281: NEG
41282: PUSH
41283: EMPTY
41284: LIST
41285: LIST
41286: PUSH
41287: LD_INT 0
41289: PUSH
41290: LD_INT 2
41292: NEG
41293: PUSH
41294: EMPTY
41295: LIST
41296: LIST
41297: PUSH
41298: LD_INT 1
41300: PUSH
41301: LD_INT 1
41303: NEG
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: PUSH
41309: LD_INT 2
41311: PUSH
41312: LD_INT 0
41314: PUSH
41315: EMPTY
41316: LIST
41317: LIST
41318: PUSH
41319: LD_INT 2
41321: PUSH
41322: LD_INT 1
41324: PUSH
41325: EMPTY
41326: LIST
41327: LIST
41328: PUSH
41329: LD_INT 1
41331: PUSH
41332: LD_INT 2
41334: PUSH
41335: EMPTY
41336: LIST
41337: LIST
41338: PUSH
41339: LD_INT 0
41341: PUSH
41342: LD_INT 2
41344: PUSH
41345: EMPTY
41346: LIST
41347: LIST
41348: PUSH
41349: LD_INT 1
41351: NEG
41352: PUSH
41353: LD_INT 1
41355: PUSH
41356: EMPTY
41357: LIST
41358: LIST
41359: PUSH
41360: LD_INT 2
41362: NEG
41363: PUSH
41364: LD_INT 0
41366: PUSH
41367: EMPTY
41368: LIST
41369: LIST
41370: PUSH
41371: LD_INT 2
41373: NEG
41374: PUSH
41375: LD_INT 1
41377: NEG
41378: PUSH
41379: EMPTY
41380: LIST
41381: LIST
41382: PUSH
41383: LD_INT 1
41385: NEG
41386: PUSH
41387: LD_INT 3
41389: NEG
41390: PUSH
41391: EMPTY
41392: LIST
41393: LIST
41394: PUSH
41395: LD_INT 0
41397: PUSH
41398: LD_INT 3
41400: NEG
41401: PUSH
41402: EMPTY
41403: LIST
41404: LIST
41405: PUSH
41406: LD_INT 1
41408: PUSH
41409: LD_INT 2
41411: NEG
41412: PUSH
41413: EMPTY
41414: LIST
41415: LIST
41416: PUSH
41417: LD_INT 2
41419: PUSH
41420: LD_INT 1
41422: NEG
41423: PUSH
41424: EMPTY
41425: LIST
41426: LIST
41427: PUSH
41428: LD_INT 3
41430: PUSH
41431: LD_INT 0
41433: PUSH
41434: EMPTY
41435: LIST
41436: LIST
41437: PUSH
41438: LD_INT 3
41440: PUSH
41441: LD_INT 1
41443: PUSH
41444: EMPTY
41445: LIST
41446: LIST
41447: PUSH
41448: LD_INT 1
41450: PUSH
41451: LD_INT 3
41453: PUSH
41454: EMPTY
41455: LIST
41456: LIST
41457: PUSH
41458: LD_INT 0
41460: PUSH
41461: LD_INT 3
41463: PUSH
41464: EMPTY
41465: LIST
41466: LIST
41467: PUSH
41468: LD_INT 1
41470: NEG
41471: PUSH
41472: LD_INT 2
41474: PUSH
41475: EMPTY
41476: LIST
41477: LIST
41478: PUSH
41479: LD_INT 2
41481: NEG
41482: PUSH
41483: LD_INT 1
41485: PUSH
41486: EMPTY
41487: LIST
41488: LIST
41489: PUSH
41490: LD_INT 3
41492: NEG
41493: PUSH
41494: LD_INT 0
41496: PUSH
41497: EMPTY
41498: LIST
41499: LIST
41500: PUSH
41501: LD_INT 3
41503: NEG
41504: PUSH
41505: LD_INT 1
41507: NEG
41508: PUSH
41509: EMPTY
41510: LIST
41511: LIST
41512: PUSH
41513: EMPTY
41514: LIST
41515: LIST
41516: LIST
41517: LIST
41518: LIST
41519: LIST
41520: LIST
41521: LIST
41522: LIST
41523: LIST
41524: LIST
41525: LIST
41526: LIST
41527: LIST
41528: LIST
41529: LIST
41530: LIST
41531: LIST
41532: LIST
41533: LIST
41534: LIST
41535: LIST
41536: LIST
41537: LIST
41538: LIST
41539: LIST
41540: LIST
41541: LIST
41542: LIST
41543: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41544: LD_ADDR_VAR 0 47
41548: PUSH
41549: LD_INT 0
41551: PUSH
41552: LD_INT 0
41554: PUSH
41555: EMPTY
41556: LIST
41557: LIST
41558: PUSH
41559: LD_INT 0
41561: PUSH
41562: LD_INT 1
41564: NEG
41565: PUSH
41566: EMPTY
41567: LIST
41568: LIST
41569: PUSH
41570: LD_INT 1
41572: PUSH
41573: LD_INT 0
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: PUSH
41580: LD_INT 1
41582: PUSH
41583: LD_INT 1
41585: PUSH
41586: EMPTY
41587: LIST
41588: LIST
41589: PUSH
41590: LD_INT 0
41592: PUSH
41593: LD_INT 1
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: PUSH
41600: LD_INT 1
41602: NEG
41603: PUSH
41604: LD_INT 0
41606: PUSH
41607: EMPTY
41608: LIST
41609: LIST
41610: PUSH
41611: LD_INT 1
41613: NEG
41614: PUSH
41615: LD_INT 1
41617: NEG
41618: PUSH
41619: EMPTY
41620: LIST
41621: LIST
41622: PUSH
41623: LD_INT 1
41625: NEG
41626: PUSH
41627: LD_INT 2
41629: NEG
41630: PUSH
41631: EMPTY
41632: LIST
41633: LIST
41634: PUSH
41635: LD_INT 0
41637: PUSH
41638: LD_INT 2
41640: NEG
41641: PUSH
41642: EMPTY
41643: LIST
41644: LIST
41645: PUSH
41646: LD_INT 1
41648: PUSH
41649: LD_INT 1
41651: NEG
41652: PUSH
41653: EMPTY
41654: LIST
41655: LIST
41656: PUSH
41657: LD_INT 2
41659: NEG
41660: PUSH
41661: LD_INT 1
41663: NEG
41664: PUSH
41665: EMPTY
41666: LIST
41667: LIST
41668: PUSH
41669: LD_INT 2
41671: NEG
41672: PUSH
41673: LD_INT 2
41675: NEG
41676: PUSH
41677: EMPTY
41678: LIST
41679: LIST
41680: PUSH
41681: EMPTY
41682: LIST
41683: LIST
41684: LIST
41685: LIST
41686: LIST
41687: LIST
41688: LIST
41689: LIST
41690: LIST
41691: LIST
41692: LIST
41693: LIST
41694: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
41695: LD_ADDR_VAR 0 48
41699: PUSH
41700: LD_INT 0
41702: PUSH
41703: LD_INT 0
41705: PUSH
41706: EMPTY
41707: LIST
41708: LIST
41709: PUSH
41710: LD_INT 0
41712: PUSH
41713: LD_INT 1
41715: NEG
41716: PUSH
41717: EMPTY
41718: LIST
41719: LIST
41720: PUSH
41721: LD_INT 1
41723: PUSH
41724: LD_INT 0
41726: PUSH
41727: EMPTY
41728: LIST
41729: LIST
41730: PUSH
41731: LD_INT 1
41733: PUSH
41734: LD_INT 1
41736: PUSH
41737: EMPTY
41738: LIST
41739: LIST
41740: PUSH
41741: LD_INT 0
41743: PUSH
41744: LD_INT 1
41746: PUSH
41747: EMPTY
41748: LIST
41749: LIST
41750: PUSH
41751: LD_INT 1
41753: NEG
41754: PUSH
41755: LD_INT 0
41757: PUSH
41758: EMPTY
41759: LIST
41760: LIST
41761: PUSH
41762: LD_INT 1
41764: NEG
41765: PUSH
41766: LD_INT 1
41768: NEG
41769: PUSH
41770: EMPTY
41771: LIST
41772: LIST
41773: PUSH
41774: LD_INT 1
41776: NEG
41777: PUSH
41778: LD_INT 2
41780: NEG
41781: PUSH
41782: EMPTY
41783: LIST
41784: LIST
41785: PUSH
41786: LD_INT 0
41788: PUSH
41789: LD_INT 2
41791: NEG
41792: PUSH
41793: EMPTY
41794: LIST
41795: LIST
41796: PUSH
41797: LD_INT 1
41799: PUSH
41800: LD_INT 1
41802: NEG
41803: PUSH
41804: EMPTY
41805: LIST
41806: LIST
41807: PUSH
41808: LD_INT 2
41810: PUSH
41811: LD_INT 0
41813: PUSH
41814: EMPTY
41815: LIST
41816: LIST
41817: PUSH
41818: LD_INT 2
41820: PUSH
41821: LD_INT 1
41823: PUSH
41824: EMPTY
41825: LIST
41826: LIST
41827: PUSH
41828: EMPTY
41829: LIST
41830: LIST
41831: LIST
41832: LIST
41833: LIST
41834: LIST
41835: LIST
41836: LIST
41837: LIST
41838: LIST
41839: LIST
41840: LIST
41841: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
41842: LD_ADDR_VAR 0 49
41846: PUSH
41847: LD_INT 0
41849: PUSH
41850: LD_INT 0
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: PUSH
41857: LD_INT 0
41859: PUSH
41860: LD_INT 1
41862: NEG
41863: PUSH
41864: EMPTY
41865: LIST
41866: LIST
41867: PUSH
41868: LD_INT 1
41870: PUSH
41871: LD_INT 0
41873: PUSH
41874: EMPTY
41875: LIST
41876: LIST
41877: PUSH
41878: LD_INT 1
41880: PUSH
41881: LD_INT 1
41883: PUSH
41884: EMPTY
41885: LIST
41886: LIST
41887: PUSH
41888: LD_INT 0
41890: PUSH
41891: LD_INT 1
41893: PUSH
41894: EMPTY
41895: LIST
41896: LIST
41897: PUSH
41898: LD_INT 1
41900: NEG
41901: PUSH
41902: LD_INT 0
41904: PUSH
41905: EMPTY
41906: LIST
41907: LIST
41908: PUSH
41909: LD_INT 1
41911: NEG
41912: PUSH
41913: LD_INT 1
41915: NEG
41916: PUSH
41917: EMPTY
41918: LIST
41919: LIST
41920: PUSH
41921: LD_INT 1
41923: PUSH
41924: LD_INT 1
41926: NEG
41927: PUSH
41928: EMPTY
41929: LIST
41930: LIST
41931: PUSH
41932: LD_INT 2
41934: PUSH
41935: LD_INT 0
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: PUSH
41942: LD_INT 2
41944: PUSH
41945: LD_INT 1
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: PUSH
41952: LD_INT 2
41954: PUSH
41955: LD_INT 2
41957: PUSH
41958: EMPTY
41959: LIST
41960: LIST
41961: PUSH
41962: LD_INT 1
41964: PUSH
41965: LD_INT 2
41967: PUSH
41968: EMPTY
41969: LIST
41970: LIST
41971: PUSH
41972: EMPTY
41973: LIST
41974: LIST
41975: LIST
41976: LIST
41977: LIST
41978: LIST
41979: LIST
41980: LIST
41981: LIST
41982: LIST
41983: LIST
41984: LIST
41985: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
41986: LD_ADDR_VAR 0 50
41990: PUSH
41991: LD_INT 0
41993: PUSH
41994: LD_INT 0
41996: PUSH
41997: EMPTY
41998: LIST
41999: LIST
42000: PUSH
42001: LD_INT 0
42003: PUSH
42004: LD_INT 1
42006: NEG
42007: PUSH
42008: EMPTY
42009: LIST
42010: LIST
42011: PUSH
42012: LD_INT 1
42014: PUSH
42015: LD_INT 0
42017: PUSH
42018: EMPTY
42019: LIST
42020: LIST
42021: PUSH
42022: LD_INT 1
42024: PUSH
42025: LD_INT 1
42027: PUSH
42028: EMPTY
42029: LIST
42030: LIST
42031: PUSH
42032: LD_INT 0
42034: PUSH
42035: LD_INT 1
42037: PUSH
42038: EMPTY
42039: LIST
42040: LIST
42041: PUSH
42042: LD_INT 1
42044: NEG
42045: PUSH
42046: LD_INT 0
42048: PUSH
42049: EMPTY
42050: LIST
42051: LIST
42052: PUSH
42053: LD_INT 1
42055: NEG
42056: PUSH
42057: LD_INT 1
42059: NEG
42060: PUSH
42061: EMPTY
42062: LIST
42063: LIST
42064: PUSH
42065: LD_INT 2
42067: PUSH
42068: LD_INT 1
42070: PUSH
42071: EMPTY
42072: LIST
42073: LIST
42074: PUSH
42075: LD_INT 2
42077: PUSH
42078: LD_INT 2
42080: PUSH
42081: EMPTY
42082: LIST
42083: LIST
42084: PUSH
42085: LD_INT 1
42087: PUSH
42088: LD_INT 2
42090: PUSH
42091: EMPTY
42092: LIST
42093: LIST
42094: PUSH
42095: LD_INT 0
42097: PUSH
42098: LD_INT 2
42100: PUSH
42101: EMPTY
42102: LIST
42103: LIST
42104: PUSH
42105: LD_INT 1
42107: NEG
42108: PUSH
42109: LD_INT 1
42111: PUSH
42112: EMPTY
42113: LIST
42114: LIST
42115: PUSH
42116: EMPTY
42117: LIST
42118: LIST
42119: LIST
42120: LIST
42121: LIST
42122: LIST
42123: LIST
42124: LIST
42125: LIST
42126: LIST
42127: LIST
42128: LIST
42129: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
42130: LD_ADDR_VAR 0 51
42134: PUSH
42135: LD_INT 0
42137: PUSH
42138: LD_INT 0
42140: PUSH
42141: EMPTY
42142: LIST
42143: LIST
42144: PUSH
42145: LD_INT 0
42147: PUSH
42148: LD_INT 1
42150: NEG
42151: PUSH
42152: EMPTY
42153: LIST
42154: LIST
42155: PUSH
42156: LD_INT 1
42158: PUSH
42159: LD_INT 0
42161: PUSH
42162: EMPTY
42163: LIST
42164: LIST
42165: PUSH
42166: LD_INT 1
42168: PUSH
42169: LD_INT 1
42171: PUSH
42172: EMPTY
42173: LIST
42174: LIST
42175: PUSH
42176: LD_INT 0
42178: PUSH
42179: LD_INT 1
42181: PUSH
42182: EMPTY
42183: LIST
42184: LIST
42185: PUSH
42186: LD_INT 1
42188: NEG
42189: PUSH
42190: LD_INT 0
42192: PUSH
42193: EMPTY
42194: LIST
42195: LIST
42196: PUSH
42197: LD_INT 1
42199: NEG
42200: PUSH
42201: LD_INT 1
42203: NEG
42204: PUSH
42205: EMPTY
42206: LIST
42207: LIST
42208: PUSH
42209: LD_INT 1
42211: PUSH
42212: LD_INT 2
42214: PUSH
42215: EMPTY
42216: LIST
42217: LIST
42218: PUSH
42219: LD_INT 0
42221: PUSH
42222: LD_INT 2
42224: PUSH
42225: EMPTY
42226: LIST
42227: LIST
42228: PUSH
42229: LD_INT 1
42231: NEG
42232: PUSH
42233: LD_INT 1
42235: PUSH
42236: EMPTY
42237: LIST
42238: LIST
42239: PUSH
42240: LD_INT 2
42242: NEG
42243: PUSH
42244: LD_INT 0
42246: PUSH
42247: EMPTY
42248: LIST
42249: LIST
42250: PUSH
42251: LD_INT 2
42253: NEG
42254: PUSH
42255: LD_INT 1
42257: NEG
42258: PUSH
42259: EMPTY
42260: LIST
42261: LIST
42262: PUSH
42263: EMPTY
42264: LIST
42265: LIST
42266: LIST
42267: LIST
42268: LIST
42269: LIST
42270: LIST
42271: LIST
42272: LIST
42273: LIST
42274: LIST
42275: LIST
42276: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42277: LD_ADDR_VAR 0 52
42281: PUSH
42282: LD_INT 0
42284: PUSH
42285: LD_INT 0
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: PUSH
42292: LD_INT 0
42294: PUSH
42295: LD_INT 1
42297: NEG
42298: PUSH
42299: EMPTY
42300: LIST
42301: LIST
42302: PUSH
42303: LD_INT 1
42305: PUSH
42306: LD_INT 0
42308: PUSH
42309: EMPTY
42310: LIST
42311: LIST
42312: PUSH
42313: LD_INT 1
42315: PUSH
42316: LD_INT 1
42318: PUSH
42319: EMPTY
42320: LIST
42321: LIST
42322: PUSH
42323: LD_INT 0
42325: PUSH
42326: LD_INT 1
42328: PUSH
42329: EMPTY
42330: LIST
42331: LIST
42332: PUSH
42333: LD_INT 1
42335: NEG
42336: PUSH
42337: LD_INT 0
42339: PUSH
42340: EMPTY
42341: LIST
42342: LIST
42343: PUSH
42344: LD_INT 1
42346: NEG
42347: PUSH
42348: LD_INT 1
42350: NEG
42351: PUSH
42352: EMPTY
42353: LIST
42354: LIST
42355: PUSH
42356: LD_INT 1
42358: NEG
42359: PUSH
42360: LD_INT 2
42362: NEG
42363: PUSH
42364: EMPTY
42365: LIST
42366: LIST
42367: PUSH
42368: LD_INT 1
42370: NEG
42371: PUSH
42372: LD_INT 1
42374: PUSH
42375: EMPTY
42376: LIST
42377: LIST
42378: PUSH
42379: LD_INT 2
42381: NEG
42382: PUSH
42383: LD_INT 0
42385: PUSH
42386: EMPTY
42387: LIST
42388: LIST
42389: PUSH
42390: LD_INT 2
42392: NEG
42393: PUSH
42394: LD_INT 1
42396: NEG
42397: PUSH
42398: EMPTY
42399: LIST
42400: LIST
42401: PUSH
42402: LD_INT 2
42404: NEG
42405: PUSH
42406: LD_INT 2
42408: NEG
42409: PUSH
42410: EMPTY
42411: LIST
42412: LIST
42413: PUSH
42414: EMPTY
42415: LIST
42416: LIST
42417: LIST
42418: LIST
42419: LIST
42420: LIST
42421: LIST
42422: LIST
42423: LIST
42424: LIST
42425: LIST
42426: LIST
42427: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42428: LD_ADDR_VAR 0 53
42432: PUSH
42433: LD_INT 0
42435: PUSH
42436: LD_INT 0
42438: PUSH
42439: EMPTY
42440: LIST
42441: LIST
42442: PUSH
42443: LD_INT 0
42445: PUSH
42446: LD_INT 1
42448: NEG
42449: PUSH
42450: EMPTY
42451: LIST
42452: LIST
42453: PUSH
42454: LD_INT 1
42456: PUSH
42457: LD_INT 0
42459: PUSH
42460: EMPTY
42461: LIST
42462: LIST
42463: PUSH
42464: LD_INT 1
42466: PUSH
42467: LD_INT 1
42469: PUSH
42470: EMPTY
42471: LIST
42472: LIST
42473: PUSH
42474: LD_INT 0
42476: PUSH
42477: LD_INT 1
42479: PUSH
42480: EMPTY
42481: LIST
42482: LIST
42483: PUSH
42484: LD_INT 1
42486: NEG
42487: PUSH
42488: LD_INT 0
42490: PUSH
42491: EMPTY
42492: LIST
42493: LIST
42494: PUSH
42495: LD_INT 1
42497: NEG
42498: PUSH
42499: LD_INT 1
42501: NEG
42502: PUSH
42503: EMPTY
42504: LIST
42505: LIST
42506: PUSH
42507: LD_INT 1
42509: NEG
42510: PUSH
42511: LD_INT 2
42513: NEG
42514: PUSH
42515: EMPTY
42516: LIST
42517: LIST
42518: PUSH
42519: LD_INT 0
42521: PUSH
42522: LD_INT 2
42524: NEG
42525: PUSH
42526: EMPTY
42527: LIST
42528: LIST
42529: PUSH
42530: LD_INT 1
42532: PUSH
42533: LD_INT 1
42535: NEG
42536: PUSH
42537: EMPTY
42538: LIST
42539: LIST
42540: PUSH
42541: LD_INT 2
42543: PUSH
42544: LD_INT 0
42546: PUSH
42547: EMPTY
42548: LIST
42549: LIST
42550: PUSH
42551: LD_INT 2
42553: PUSH
42554: LD_INT 1
42556: PUSH
42557: EMPTY
42558: LIST
42559: LIST
42560: PUSH
42561: LD_INT 2
42563: PUSH
42564: LD_INT 2
42566: PUSH
42567: EMPTY
42568: LIST
42569: LIST
42570: PUSH
42571: LD_INT 1
42573: PUSH
42574: LD_INT 2
42576: PUSH
42577: EMPTY
42578: LIST
42579: LIST
42580: PUSH
42581: LD_INT 0
42583: PUSH
42584: LD_INT 2
42586: PUSH
42587: EMPTY
42588: LIST
42589: LIST
42590: PUSH
42591: LD_INT 1
42593: NEG
42594: PUSH
42595: LD_INT 1
42597: PUSH
42598: EMPTY
42599: LIST
42600: LIST
42601: PUSH
42602: LD_INT 2
42604: NEG
42605: PUSH
42606: LD_INT 0
42608: PUSH
42609: EMPTY
42610: LIST
42611: LIST
42612: PUSH
42613: LD_INT 2
42615: NEG
42616: PUSH
42617: LD_INT 1
42619: NEG
42620: PUSH
42621: EMPTY
42622: LIST
42623: LIST
42624: PUSH
42625: LD_INT 2
42627: NEG
42628: PUSH
42629: LD_INT 2
42631: NEG
42632: PUSH
42633: EMPTY
42634: LIST
42635: LIST
42636: PUSH
42637: EMPTY
42638: LIST
42639: LIST
42640: LIST
42641: LIST
42642: LIST
42643: LIST
42644: LIST
42645: LIST
42646: LIST
42647: LIST
42648: LIST
42649: LIST
42650: LIST
42651: LIST
42652: LIST
42653: LIST
42654: LIST
42655: LIST
42656: LIST
42657: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42658: LD_ADDR_VAR 0 54
42662: PUSH
42663: LD_INT 0
42665: PUSH
42666: LD_INT 0
42668: PUSH
42669: EMPTY
42670: LIST
42671: LIST
42672: PUSH
42673: LD_INT 0
42675: PUSH
42676: LD_INT 1
42678: NEG
42679: PUSH
42680: EMPTY
42681: LIST
42682: LIST
42683: PUSH
42684: LD_INT 1
42686: PUSH
42687: LD_INT 0
42689: PUSH
42690: EMPTY
42691: LIST
42692: LIST
42693: PUSH
42694: LD_INT 1
42696: PUSH
42697: LD_INT 1
42699: PUSH
42700: EMPTY
42701: LIST
42702: LIST
42703: PUSH
42704: LD_INT 0
42706: PUSH
42707: LD_INT 1
42709: PUSH
42710: EMPTY
42711: LIST
42712: LIST
42713: PUSH
42714: LD_INT 1
42716: NEG
42717: PUSH
42718: LD_INT 0
42720: PUSH
42721: EMPTY
42722: LIST
42723: LIST
42724: PUSH
42725: LD_INT 1
42727: NEG
42728: PUSH
42729: LD_INT 1
42731: NEG
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: PUSH
42737: LD_INT 1
42739: NEG
42740: PUSH
42741: LD_INT 2
42743: NEG
42744: PUSH
42745: EMPTY
42746: LIST
42747: LIST
42748: PUSH
42749: LD_INT 0
42751: PUSH
42752: LD_INT 2
42754: NEG
42755: PUSH
42756: EMPTY
42757: LIST
42758: LIST
42759: PUSH
42760: LD_INT 1
42762: PUSH
42763: LD_INT 1
42765: NEG
42766: PUSH
42767: EMPTY
42768: LIST
42769: LIST
42770: PUSH
42771: LD_INT 2
42773: PUSH
42774: LD_INT 0
42776: PUSH
42777: EMPTY
42778: LIST
42779: LIST
42780: PUSH
42781: LD_INT 2
42783: PUSH
42784: LD_INT 1
42786: PUSH
42787: EMPTY
42788: LIST
42789: LIST
42790: PUSH
42791: LD_INT 2
42793: PUSH
42794: LD_INT 2
42796: PUSH
42797: EMPTY
42798: LIST
42799: LIST
42800: PUSH
42801: LD_INT 1
42803: PUSH
42804: LD_INT 2
42806: PUSH
42807: EMPTY
42808: LIST
42809: LIST
42810: PUSH
42811: LD_INT 0
42813: PUSH
42814: LD_INT 2
42816: PUSH
42817: EMPTY
42818: LIST
42819: LIST
42820: PUSH
42821: LD_INT 1
42823: NEG
42824: PUSH
42825: LD_INT 1
42827: PUSH
42828: EMPTY
42829: LIST
42830: LIST
42831: PUSH
42832: LD_INT 2
42834: NEG
42835: PUSH
42836: LD_INT 0
42838: PUSH
42839: EMPTY
42840: LIST
42841: LIST
42842: PUSH
42843: LD_INT 2
42845: NEG
42846: PUSH
42847: LD_INT 1
42849: NEG
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: PUSH
42855: LD_INT 2
42857: NEG
42858: PUSH
42859: LD_INT 2
42861: NEG
42862: PUSH
42863: EMPTY
42864: LIST
42865: LIST
42866: PUSH
42867: EMPTY
42868: LIST
42869: LIST
42870: LIST
42871: LIST
42872: LIST
42873: LIST
42874: LIST
42875: LIST
42876: LIST
42877: LIST
42878: LIST
42879: LIST
42880: LIST
42881: LIST
42882: LIST
42883: LIST
42884: LIST
42885: LIST
42886: LIST
42887: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42888: LD_ADDR_VAR 0 55
42892: PUSH
42893: LD_INT 0
42895: PUSH
42896: LD_INT 0
42898: PUSH
42899: EMPTY
42900: LIST
42901: LIST
42902: PUSH
42903: LD_INT 0
42905: PUSH
42906: LD_INT 1
42908: NEG
42909: PUSH
42910: EMPTY
42911: LIST
42912: LIST
42913: PUSH
42914: LD_INT 1
42916: PUSH
42917: LD_INT 0
42919: PUSH
42920: EMPTY
42921: LIST
42922: LIST
42923: PUSH
42924: LD_INT 1
42926: PUSH
42927: LD_INT 1
42929: PUSH
42930: EMPTY
42931: LIST
42932: LIST
42933: PUSH
42934: LD_INT 0
42936: PUSH
42937: LD_INT 1
42939: PUSH
42940: EMPTY
42941: LIST
42942: LIST
42943: PUSH
42944: LD_INT 1
42946: NEG
42947: PUSH
42948: LD_INT 0
42950: PUSH
42951: EMPTY
42952: LIST
42953: LIST
42954: PUSH
42955: LD_INT 1
42957: NEG
42958: PUSH
42959: LD_INT 1
42961: NEG
42962: PUSH
42963: EMPTY
42964: LIST
42965: LIST
42966: PUSH
42967: LD_INT 1
42969: NEG
42970: PUSH
42971: LD_INT 2
42973: NEG
42974: PUSH
42975: EMPTY
42976: LIST
42977: LIST
42978: PUSH
42979: LD_INT 0
42981: PUSH
42982: LD_INT 2
42984: NEG
42985: PUSH
42986: EMPTY
42987: LIST
42988: LIST
42989: PUSH
42990: LD_INT 1
42992: PUSH
42993: LD_INT 1
42995: NEG
42996: PUSH
42997: EMPTY
42998: LIST
42999: LIST
43000: PUSH
43001: LD_INT 2
43003: PUSH
43004: LD_INT 0
43006: PUSH
43007: EMPTY
43008: LIST
43009: LIST
43010: PUSH
43011: LD_INT 2
43013: PUSH
43014: LD_INT 1
43016: PUSH
43017: EMPTY
43018: LIST
43019: LIST
43020: PUSH
43021: LD_INT 2
43023: PUSH
43024: LD_INT 2
43026: PUSH
43027: EMPTY
43028: LIST
43029: LIST
43030: PUSH
43031: LD_INT 1
43033: PUSH
43034: LD_INT 2
43036: PUSH
43037: EMPTY
43038: LIST
43039: LIST
43040: PUSH
43041: LD_INT 0
43043: PUSH
43044: LD_INT 2
43046: PUSH
43047: EMPTY
43048: LIST
43049: LIST
43050: PUSH
43051: LD_INT 1
43053: NEG
43054: PUSH
43055: LD_INT 1
43057: PUSH
43058: EMPTY
43059: LIST
43060: LIST
43061: PUSH
43062: LD_INT 2
43064: NEG
43065: PUSH
43066: LD_INT 0
43068: PUSH
43069: EMPTY
43070: LIST
43071: LIST
43072: PUSH
43073: LD_INT 2
43075: NEG
43076: PUSH
43077: LD_INT 1
43079: NEG
43080: PUSH
43081: EMPTY
43082: LIST
43083: LIST
43084: PUSH
43085: LD_INT 2
43087: NEG
43088: PUSH
43089: LD_INT 2
43091: NEG
43092: PUSH
43093: EMPTY
43094: LIST
43095: LIST
43096: PUSH
43097: EMPTY
43098: LIST
43099: LIST
43100: LIST
43101: LIST
43102: LIST
43103: LIST
43104: LIST
43105: LIST
43106: LIST
43107: LIST
43108: LIST
43109: LIST
43110: LIST
43111: LIST
43112: LIST
43113: LIST
43114: LIST
43115: LIST
43116: LIST
43117: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43118: LD_ADDR_VAR 0 56
43122: PUSH
43123: LD_INT 0
43125: PUSH
43126: LD_INT 0
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: PUSH
43133: LD_INT 0
43135: PUSH
43136: LD_INT 1
43138: NEG
43139: PUSH
43140: EMPTY
43141: LIST
43142: LIST
43143: PUSH
43144: LD_INT 1
43146: PUSH
43147: LD_INT 0
43149: PUSH
43150: EMPTY
43151: LIST
43152: LIST
43153: PUSH
43154: LD_INT 1
43156: PUSH
43157: LD_INT 1
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: PUSH
43164: LD_INT 0
43166: PUSH
43167: LD_INT 1
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: PUSH
43174: LD_INT 1
43176: NEG
43177: PUSH
43178: LD_INT 0
43180: PUSH
43181: EMPTY
43182: LIST
43183: LIST
43184: PUSH
43185: LD_INT 1
43187: NEG
43188: PUSH
43189: LD_INT 1
43191: NEG
43192: PUSH
43193: EMPTY
43194: LIST
43195: LIST
43196: PUSH
43197: LD_INT 1
43199: NEG
43200: PUSH
43201: LD_INT 2
43203: NEG
43204: PUSH
43205: EMPTY
43206: LIST
43207: LIST
43208: PUSH
43209: LD_INT 0
43211: PUSH
43212: LD_INT 2
43214: NEG
43215: PUSH
43216: EMPTY
43217: LIST
43218: LIST
43219: PUSH
43220: LD_INT 1
43222: PUSH
43223: LD_INT 1
43225: NEG
43226: PUSH
43227: EMPTY
43228: LIST
43229: LIST
43230: PUSH
43231: LD_INT 2
43233: PUSH
43234: LD_INT 0
43236: PUSH
43237: EMPTY
43238: LIST
43239: LIST
43240: PUSH
43241: LD_INT 2
43243: PUSH
43244: LD_INT 1
43246: PUSH
43247: EMPTY
43248: LIST
43249: LIST
43250: PUSH
43251: LD_INT 2
43253: PUSH
43254: LD_INT 2
43256: PUSH
43257: EMPTY
43258: LIST
43259: LIST
43260: PUSH
43261: LD_INT 1
43263: PUSH
43264: LD_INT 2
43266: PUSH
43267: EMPTY
43268: LIST
43269: LIST
43270: PUSH
43271: LD_INT 0
43273: PUSH
43274: LD_INT 2
43276: PUSH
43277: EMPTY
43278: LIST
43279: LIST
43280: PUSH
43281: LD_INT 1
43283: NEG
43284: PUSH
43285: LD_INT 1
43287: PUSH
43288: EMPTY
43289: LIST
43290: LIST
43291: PUSH
43292: LD_INT 2
43294: NEG
43295: PUSH
43296: LD_INT 0
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: PUSH
43303: LD_INT 2
43305: NEG
43306: PUSH
43307: LD_INT 1
43309: NEG
43310: PUSH
43311: EMPTY
43312: LIST
43313: LIST
43314: PUSH
43315: LD_INT 2
43317: NEG
43318: PUSH
43319: LD_INT 2
43321: NEG
43322: PUSH
43323: EMPTY
43324: LIST
43325: LIST
43326: PUSH
43327: EMPTY
43328: LIST
43329: LIST
43330: LIST
43331: LIST
43332: LIST
43333: LIST
43334: LIST
43335: LIST
43336: LIST
43337: LIST
43338: LIST
43339: LIST
43340: LIST
43341: LIST
43342: LIST
43343: LIST
43344: LIST
43345: LIST
43346: LIST
43347: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43348: LD_ADDR_VAR 0 57
43352: PUSH
43353: LD_INT 0
43355: PUSH
43356: LD_INT 0
43358: PUSH
43359: EMPTY
43360: LIST
43361: LIST
43362: PUSH
43363: LD_INT 0
43365: PUSH
43366: LD_INT 1
43368: NEG
43369: PUSH
43370: EMPTY
43371: LIST
43372: LIST
43373: PUSH
43374: LD_INT 1
43376: PUSH
43377: LD_INT 0
43379: PUSH
43380: EMPTY
43381: LIST
43382: LIST
43383: PUSH
43384: LD_INT 1
43386: PUSH
43387: LD_INT 1
43389: PUSH
43390: EMPTY
43391: LIST
43392: LIST
43393: PUSH
43394: LD_INT 0
43396: PUSH
43397: LD_INT 1
43399: PUSH
43400: EMPTY
43401: LIST
43402: LIST
43403: PUSH
43404: LD_INT 1
43406: NEG
43407: PUSH
43408: LD_INT 0
43410: PUSH
43411: EMPTY
43412: LIST
43413: LIST
43414: PUSH
43415: LD_INT 1
43417: NEG
43418: PUSH
43419: LD_INT 1
43421: NEG
43422: PUSH
43423: EMPTY
43424: LIST
43425: LIST
43426: PUSH
43427: LD_INT 1
43429: NEG
43430: PUSH
43431: LD_INT 2
43433: NEG
43434: PUSH
43435: EMPTY
43436: LIST
43437: LIST
43438: PUSH
43439: LD_INT 0
43441: PUSH
43442: LD_INT 2
43444: NEG
43445: PUSH
43446: EMPTY
43447: LIST
43448: LIST
43449: PUSH
43450: LD_INT 1
43452: PUSH
43453: LD_INT 1
43455: NEG
43456: PUSH
43457: EMPTY
43458: LIST
43459: LIST
43460: PUSH
43461: LD_INT 2
43463: PUSH
43464: LD_INT 0
43466: PUSH
43467: EMPTY
43468: LIST
43469: LIST
43470: PUSH
43471: LD_INT 2
43473: PUSH
43474: LD_INT 1
43476: PUSH
43477: EMPTY
43478: LIST
43479: LIST
43480: PUSH
43481: LD_INT 2
43483: PUSH
43484: LD_INT 2
43486: PUSH
43487: EMPTY
43488: LIST
43489: LIST
43490: PUSH
43491: LD_INT 1
43493: PUSH
43494: LD_INT 2
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: PUSH
43501: LD_INT 0
43503: PUSH
43504: LD_INT 2
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: PUSH
43511: LD_INT 1
43513: NEG
43514: PUSH
43515: LD_INT 1
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: PUSH
43522: LD_INT 2
43524: NEG
43525: PUSH
43526: LD_INT 0
43528: PUSH
43529: EMPTY
43530: LIST
43531: LIST
43532: PUSH
43533: LD_INT 2
43535: NEG
43536: PUSH
43537: LD_INT 1
43539: NEG
43540: PUSH
43541: EMPTY
43542: LIST
43543: LIST
43544: PUSH
43545: LD_INT 2
43547: NEG
43548: PUSH
43549: LD_INT 2
43551: NEG
43552: PUSH
43553: EMPTY
43554: LIST
43555: LIST
43556: PUSH
43557: EMPTY
43558: LIST
43559: LIST
43560: LIST
43561: LIST
43562: LIST
43563: LIST
43564: LIST
43565: LIST
43566: LIST
43567: LIST
43568: LIST
43569: LIST
43570: LIST
43571: LIST
43572: LIST
43573: LIST
43574: LIST
43575: LIST
43576: LIST
43577: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43578: LD_ADDR_VAR 0 58
43582: PUSH
43583: LD_INT 0
43585: PUSH
43586: LD_INT 0
43588: PUSH
43589: EMPTY
43590: LIST
43591: LIST
43592: PUSH
43593: LD_INT 0
43595: PUSH
43596: LD_INT 1
43598: NEG
43599: PUSH
43600: EMPTY
43601: LIST
43602: LIST
43603: PUSH
43604: LD_INT 1
43606: PUSH
43607: LD_INT 0
43609: PUSH
43610: EMPTY
43611: LIST
43612: LIST
43613: PUSH
43614: LD_INT 1
43616: PUSH
43617: LD_INT 1
43619: PUSH
43620: EMPTY
43621: LIST
43622: LIST
43623: PUSH
43624: LD_INT 0
43626: PUSH
43627: LD_INT 1
43629: PUSH
43630: EMPTY
43631: LIST
43632: LIST
43633: PUSH
43634: LD_INT 1
43636: NEG
43637: PUSH
43638: LD_INT 0
43640: PUSH
43641: EMPTY
43642: LIST
43643: LIST
43644: PUSH
43645: LD_INT 1
43647: NEG
43648: PUSH
43649: LD_INT 1
43651: NEG
43652: PUSH
43653: EMPTY
43654: LIST
43655: LIST
43656: PUSH
43657: LD_INT 1
43659: NEG
43660: PUSH
43661: LD_INT 2
43663: NEG
43664: PUSH
43665: EMPTY
43666: LIST
43667: LIST
43668: PUSH
43669: LD_INT 0
43671: PUSH
43672: LD_INT 2
43674: NEG
43675: PUSH
43676: EMPTY
43677: LIST
43678: LIST
43679: PUSH
43680: LD_INT 1
43682: PUSH
43683: LD_INT 1
43685: NEG
43686: PUSH
43687: EMPTY
43688: LIST
43689: LIST
43690: PUSH
43691: LD_INT 2
43693: PUSH
43694: LD_INT 0
43696: PUSH
43697: EMPTY
43698: LIST
43699: LIST
43700: PUSH
43701: LD_INT 2
43703: PUSH
43704: LD_INT 1
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: PUSH
43711: LD_INT 2
43713: PUSH
43714: LD_INT 2
43716: PUSH
43717: EMPTY
43718: LIST
43719: LIST
43720: PUSH
43721: LD_INT 1
43723: PUSH
43724: LD_INT 2
43726: PUSH
43727: EMPTY
43728: LIST
43729: LIST
43730: PUSH
43731: LD_INT 0
43733: PUSH
43734: LD_INT 2
43736: PUSH
43737: EMPTY
43738: LIST
43739: LIST
43740: PUSH
43741: LD_INT 1
43743: NEG
43744: PUSH
43745: LD_INT 1
43747: PUSH
43748: EMPTY
43749: LIST
43750: LIST
43751: PUSH
43752: LD_INT 2
43754: NEG
43755: PUSH
43756: LD_INT 0
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: PUSH
43763: LD_INT 2
43765: NEG
43766: PUSH
43767: LD_INT 1
43769: NEG
43770: PUSH
43771: EMPTY
43772: LIST
43773: LIST
43774: PUSH
43775: LD_INT 2
43777: NEG
43778: PUSH
43779: LD_INT 2
43781: NEG
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: PUSH
43787: EMPTY
43788: LIST
43789: LIST
43790: LIST
43791: LIST
43792: LIST
43793: LIST
43794: LIST
43795: LIST
43796: LIST
43797: LIST
43798: LIST
43799: LIST
43800: LIST
43801: LIST
43802: LIST
43803: LIST
43804: LIST
43805: LIST
43806: LIST
43807: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43808: LD_ADDR_VAR 0 59
43812: PUSH
43813: LD_INT 0
43815: PUSH
43816: LD_INT 0
43818: PUSH
43819: EMPTY
43820: LIST
43821: LIST
43822: PUSH
43823: LD_INT 0
43825: PUSH
43826: LD_INT 1
43828: NEG
43829: PUSH
43830: EMPTY
43831: LIST
43832: LIST
43833: PUSH
43834: LD_INT 1
43836: PUSH
43837: LD_INT 0
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: PUSH
43844: LD_INT 1
43846: PUSH
43847: LD_INT 1
43849: PUSH
43850: EMPTY
43851: LIST
43852: LIST
43853: PUSH
43854: LD_INT 0
43856: PUSH
43857: LD_INT 1
43859: PUSH
43860: EMPTY
43861: LIST
43862: LIST
43863: PUSH
43864: LD_INT 1
43866: NEG
43867: PUSH
43868: LD_INT 0
43870: PUSH
43871: EMPTY
43872: LIST
43873: LIST
43874: PUSH
43875: LD_INT 1
43877: NEG
43878: PUSH
43879: LD_INT 1
43881: NEG
43882: PUSH
43883: EMPTY
43884: LIST
43885: LIST
43886: PUSH
43887: EMPTY
43888: LIST
43889: LIST
43890: LIST
43891: LIST
43892: LIST
43893: LIST
43894: LIST
43895: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43896: LD_ADDR_VAR 0 60
43900: PUSH
43901: LD_INT 0
43903: PUSH
43904: LD_INT 0
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: PUSH
43911: LD_INT 0
43913: PUSH
43914: LD_INT 1
43916: NEG
43917: PUSH
43918: EMPTY
43919: LIST
43920: LIST
43921: PUSH
43922: LD_INT 1
43924: PUSH
43925: LD_INT 0
43927: PUSH
43928: EMPTY
43929: LIST
43930: LIST
43931: PUSH
43932: LD_INT 1
43934: PUSH
43935: LD_INT 1
43937: PUSH
43938: EMPTY
43939: LIST
43940: LIST
43941: PUSH
43942: LD_INT 0
43944: PUSH
43945: LD_INT 1
43947: PUSH
43948: EMPTY
43949: LIST
43950: LIST
43951: PUSH
43952: LD_INT 1
43954: NEG
43955: PUSH
43956: LD_INT 0
43958: PUSH
43959: EMPTY
43960: LIST
43961: LIST
43962: PUSH
43963: LD_INT 1
43965: NEG
43966: PUSH
43967: LD_INT 1
43969: NEG
43970: PUSH
43971: EMPTY
43972: LIST
43973: LIST
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: LIST
43979: LIST
43980: LIST
43981: LIST
43982: LIST
43983: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43984: LD_ADDR_VAR 0 61
43988: PUSH
43989: LD_INT 0
43991: PUSH
43992: LD_INT 0
43994: PUSH
43995: EMPTY
43996: LIST
43997: LIST
43998: PUSH
43999: LD_INT 0
44001: PUSH
44002: LD_INT 1
44004: NEG
44005: PUSH
44006: EMPTY
44007: LIST
44008: LIST
44009: PUSH
44010: LD_INT 1
44012: PUSH
44013: LD_INT 0
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: PUSH
44020: LD_INT 1
44022: PUSH
44023: LD_INT 1
44025: PUSH
44026: EMPTY
44027: LIST
44028: LIST
44029: PUSH
44030: LD_INT 0
44032: PUSH
44033: LD_INT 1
44035: PUSH
44036: EMPTY
44037: LIST
44038: LIST
44039: PUSH
44040: LD_INT 1
44042: NEG
44043: PUSH
44044: LD_INT 0
44046: PUSH
44047: EMPTY
44048: LIST
44049: LIST
44050: PUSH
44051: LD_INT 1
44053: NEG
44054: PUSH
44055: LD_INT 1
44057: NEG
44058: PUSH
44059: EMPTY
44060: LIST
44061: LIST
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: LIST
44067: LIST
44068: LIST
44069: LIST
44070: LIST
44071: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44072: LD_ADDR_VAR 0 62
44076: PUSH
44077: LD_INT 0
44079: PUSH
44080: LD_INT 0
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: PUSH
44087: LD_INT 0
44089: PUSH
44090: LD_INT 1
44092: NEG
44093: PUSH
44094: EMPTY
44095: LIST
44096: LIST
44097: PUSH
44098: LD_INT 1
44100: PUSH
44101: LD_INT 0
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: PUSH
44108: LD_INT 1
44110: PUSH
44111: LD_INT 1
44113: PUSH
44114: EMPTY
44115: LIST
44116: LIST
44117: PUSH
44118: LD_INT 0
44120: PUSH
44121: LD_INT 1
44123: PUSH
44124: EMPTY
44125: LIST
44126: LIST
44127: PUSH
44128: LD_INT 1
44130: NEG
44131: PUSH
44132: LD_INT 0
44134: PUSH
44135: EMPTY
44136: LIST
44137: LIST
44138: PUSH
44139: LD_INT 1
44141: NEG
44142: PUSH
44143: LD_INT 1
44145: NEG
44146: PUSH
44147: EMPTY
44148: LIST
44149: LIST
44150: PUSH
44151: EMPTY
44152: LIST
44153: LIST
44154: LIST
44155: LIST
44156: LIST
44157: LIST
44158: LIST
44159: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44160: LD_ADDR_VAR 0 63
44164: PUSH
44165: LD_INT 0
44167: PUSH
44168: LD_INT 0
44170: PUSH
44171: EMPTY
44172: LIST
44173: LIST
44174: PUSH
44175: LD_INT 0
44177: PUSH
44178: LD_INT 1
44180: NEG
44181: PUSH
44182: EMPTY
44183: LIST
44184: LIST
44185: PUSH
44186: LD_INT 1
44188: PUSH
44189: LD_INT 0
44191: PUSH
44192: EMPTY
44193: LIST
44194: LIST
44195: PUSH
44196: LD_INT 1
44198: PUSH
44199: LD_INT 1
44201: PUSH
44202: EMPTY
44203: LIST
44204: LIST
44205: PUSH
44206: LD_INT 0
44208: PUSH
44209: LD_INT 1
44211: PUSH
44212: EMPTY
44213: LIST
44214: LIST
44215: PUSH
44216: LD_INT 1
44218: NEG
44219: PUSH
44220: LD_INT 0
44222: PUSH
44223: EMPTY
44224: LIST
44225: LIST
44226: PUSH
44227: LD_INT 1
44229: NEG
44230: PUSH
44231: LD_INT 1
44233: NEG
44234: PUSH
44235: EMPTY
44236: LIST
44237: LIST
44238: PUSH
44239: EMPTY
44240: LIST
44241: LIST
44242: LIST
44243: LIST
44244: LIST
44245: LIST
44246: LIST
44247: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44248: LD_ADDR_VAR 0 64
44252: PUSH
44253: LD_INT 0
44255: PUSH
44256: LD_INT 0
44258: PUSH
44259: EMPTY
44260: LIST
44261: LIST
44262: PUSH
44263: LD_INT 0
44265: PUSH
44266: LD_INT 1
44268: NEG
44269: PUSH
44270: EMPTY
44271: LIST
44272: LIST
44273: PUSH
44274: LD_INT 1
44276: PUSH
44277: LD_INT 0
44279: PUSH
44280: EMPTY
44281: LIST
44282: LIST
44283: PUSH
44284: LD_INT 1
44286: PUSH
44287: LD_INT 1
44289: PUSH
44290: EMPTY
44291: LIST
44292: LIST
44293: PUSH
44294: LD_INT 0
44296: PUSH
44297: LD_INT 1
44299: PUSH
44300: EMPTY
44301: LIST
44302: LIST
44303: PUSH
44304: LD_INT 1
44306: NEG
44307: PUSH
44308: LD_INT 0
44310: PUSH
44311: EMPTY
44312: LIST
44313: LIST
44314: PUSH
44315: LD_INT 1
44317: NEG
44318: PUSH
44319: LD_INT 1
44321: NEG
44322: PUSH
44323: EMPTY
44324: LIST
44325: LIST
44326: PUSH
44327: EMPTY
44328: LIST
44329: LIST
44330: LIST
44331: LIST
44332: LIST
44333: LIST
44334: LIST
44335: ST_TO_ADDR
// end ; 1 :
44336: GO 50233
44338: LD_INT 1
44340: DOUBLE
44341: EQUAL
44342: IFTRUE 44346
44344: GO 46969
44346: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44347: LD_ADDR_VAR 0 11
44351: PUSH
44352: LD_INT 1
44354: NEG
44355: PUSH
44356: LD_INT 3
44358: NEG
44359: PUSH
44360: EMPTY
44361: LIST
44362: LIST
44363: PUSH
44364: LD_INT 0
44366: PUSH
44367: LD_INT 3
44369: NEG
44370: PUSH
44371: EMPTY
44372: LIST
44373: LIST
44374: PUSH
44375: LD_INT 1
44377: PUSH
44378: LD_INT 2
44380: NEG
44381: PUSH
44382: EMPTY
44383: LIST
44384: LIST
44385: PUSH
44386: EMPTY
44387: LIST
44388: LIST
44389: LIST
44390: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44391: LD_ADDR_VAR 0 12
44395: PUSH
44396: LD_INT 2
44398: PUSH
44399: LD_INT 1
44401: NEG
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: PUSH
44407: LD_INT 3
44409: PUSH
44410: LD_INT 0
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: PUSH
44417: LD_INT 3
44419: PUSH
44420: LD_INT 1
44422: PUSH
44423: EMPTY
44424: LIST
44425: LIST
44426: PUSH
44427: EMPTY
44428: LIST
44429: LIST
44430: LIST
44431: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44432: LD_ADDR_VAR 0 13
44436: PUSH
44437: LD_INT 3
44439: PUSH
44440: LD_INT 2
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: PUSH
44447: LD_INT 3
44449: PUSH
44450: LD_INT 3
44452: PUSH
44453: EMPTY
44454: LIST
44455: LIST
44456: PUSH
44457: LD_INT 2
44459: PUSH
44460: LD_INT 3
44462: PUSH
44463: EMPTY
44464: LIST
44465: LIST
44466: PUSH
44467: EMPTY
44468: LIST
44469: LIST
44470: LIST
44471: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44472: LD_ADDR_VAR 0 14
44476: PUSH
44477: LD_INT 1
44479: PUSH
44480: LD_INT 3
44482: PUSH
44483: EMPTY
44484: LIST
44485: LIST
44486: PUSH
44487: LD_INT 0
44489: PUSH
44490: LD_INT 3
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: PUSH
44497: LD_INT 1
44499: NEG
44500: PUSH
44501: LD_INT 2
44503: PUSH
44504: EMPTY
44505: LIST
44506: LIST
44507: PUSH
44508: EMPTY
44509: LIST
44510: LIST
44511: LIST
44512: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44513: LD_ADDR_VAR 0 15
44517: PUSH
44518: LD_INT 2
44520: NEG
44521: PUSH
44522: LD_INT 1
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: PUSH
44529: LD_INT 3
44531: NEG
44532: PUSH
44533: LD_INT 0
44535: PUSH
44536: EMPTY
44537: LIST
44538: LIST
44539: PUSH
44540: LD_INT 3
44542: NEG
44543: PUSH
44544: LD_INT 1
44546: NEG
44547: PUSH
44548: EMPTY
44549: LIST
44550: LIST
44551: PUSH
44552: EMPTY
44553: LIST
44554: LIST
44555: LIST
44556: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44557: LD_ADDR_VAR 0 16
44561: PUSH
44562: LD_INT 2
44564: NEG
44565: PUSH
44566: LD_INT 3
44568: NEG
44569: PUSH
44570: EMPTY
44571: LIST
44572: LIST
44573: PUSH
44574: LD_INT 3
44576: NEG
44577: PUSH
44578: LD_INT 2
44580: NEG
44581: PUSH
44582: EMPTY
44583: LIST
44584: LIST
44585: PUSH
44586: LD_INT 3
44588: NEG
44589: PUSH
44590: LD_INT 3
44592: NEG
44593: PUSH
44594: EMPTY
44595: LIST
44596: LIST
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: LIST
44602: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44603: LD_ADDR_VAR 0 17
44607: PUSH
44608: LD_INT 1
44610: NEG
44611: PUSH
44612: LD_INT 3
44614: NEG
44615: PUSH
44616: EMPTY
44617: LIST
44618: LIST
44619: PUSH
44620: LD_INT 0
44622: PUSH
44623: LD_INT 3
44625: NEG
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: PUSH
44631: LD_INT 1
44633: PUSH
44634: LD_INT 2
44636: NEG
44637: PUSH
44638: EMPTY
44639: LIST
44640: LIST
44641: PUSH
44642: EMPTY
44643: LIST
44644: LIST
44645: LIST
44646: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44647: LD_ADDR_VAR 0 18
44651: PUSH
44652: LD_INT 2
44654: PUSH
44655: LD_INT 1
44657: NEG
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: PUSH
44663: LD_INT 3
44665: PUSH
44666: LD_INT 0
44668: PUSH
44669: EMPTY
44670: LIST
44671: LIST
44672: PUSH
44673: LD_INT 3
44675: PUSH
44676: LD_INT 1
44678: PUSH
44679: EMPTY
44680: LIST
44681: LIST
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: LIST
44687: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44688: LD_ADDR_VAR 0 19
44692: PUSH
44693: LD_INT 3
44695: PUSH
44696: LD_INT 2
44698: PUSH
44699: EMPTY
44700: LIST
44701: LIST
44702: PUSH
44703: LD_INT 3
44705: PUSH
44706: LD_INT 3
44708: PUSH
44709: EMPTY
44710: LIST
44711: LIST
44712: PUSH
44713: LD_INT 2
44715: PUSH
44716: LD_INT 3
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: LIST
44727: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44728: LD_ADDR_VAR 0 20
44732: PUSH
44733: LD_INT 1
44735: PUSH
44736: LD_INT 3
44738: PUSH
44739: EMPTY
44740: LIST
44741: LIST
44742: PUSH
44743: LD_INT 0
44745: PUSH
44746: LD_INT 3
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: PUSH
44753: LD_INT 1
44755: NEG
44756: PUSH
44757: LD_INT 2
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: LIST
44768: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44769: LD_ADDR_VAR 0 21
44773: PUSH
44774: LD_INT 2
44776: NEG
44777: PUSH
44778: LD_INT 1
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: PUSH
44785: LD_INT 3
44787: NEG
44788: PUSH
44789: LD_INT 0
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: PUSH
44796: LD_INT 3
44798: NEG
44799: PUSH
44800: LD_INT 1
44802: NEG
44803: PUSH
44804: EMPTY
44805: LIST
44806: LIST
44807: PUSH
44808: EMPTY
44809: LIST
44810: LIST
44811: LIST
44812: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44813: LD_ADDR_VAR 0 22
44817: PUSH
44818: LD_INT 2
44820: NEG
44821: PUSH
44822: LD_INT 3
44824: NEG
44825: PUSH
44826: EMPTY
44827: LIST
44828: LIST
44829: PUSH
44830: LD_INT 3
44832: NEG
44833: PUSH
44834: LD_INT 2
44836: NEG
44837: PUSH
44838: EMPTY
44839: LIST
44840: LIST
44841: PUSH
44842: LD_INT 3
44844: NEG
44845: PUSH
44846: LD_INT 3
44848: NEG
44849: PUSH
44850: EMPTY
44851: LIST
44852: LIST
44853: PUSH
44854: EMPTY
44855: LIST
44856: LIST
44857: LIST
44858: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
44859: LD_ADDR_VAR 0 23
44863: PUSH
44864: LD_INT 0
44866: PUSH
44867: LD_INT 3
44869: NEG
44870: PUSH
44871: EMPTY
44872: LIST
44873: LIST
44874: PUSH
44875: LD_INT 1
44877: NEG
44878: PUSH
44879: LD_INT 4
44881: NEG
44882: PUSH
44883: EMPTY
44884: LIST
44885: LIST
44886: PUSH
44887: LD_INT 1
44889: PUSH
44890: LD_INT 3
44892: NEG
44893: PUSH
44894: EMPTY
44895: LIST
44896: LIST
44897: PUSH
44898: EMPTY
44899: LIST
44900: LIST
44901: LIST
44902: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
44903: LD_ADDR_VAR 0 24
44907: PUSH
44908: LD_INT 3
44910: PUSH
44911: LD_INT 0
44913: PUSH
44914: EMPTY
44915: LIST
44916: LIST
44917: PUSH
44918: LD_INT 3
44920: PUSH
44921: LD_INT 1
44923: NEG
44924: PUSH
44925: EMPTY
44926: LIST
44927: LIST
44928: PUSH
44929: LD_INT 4
44931: PUSH
44932: LD_INT 1
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: LIST
44943: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
44944: LD_ADDR_VAR 0 25
44948: PUSH
44949: LD_INT 3
44951: PUSH
44952: LD_INT 3
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: PUSH
44959: LD_INT 4
44961: PUSH
44962: LD_INT 3
44964: PUSH
44965: EMPTY
44966: LIST
44967: LIST
44968: PUSH
44969: LD_INT 3
44971: PUSH
44972: LD_INT 4
44974: PUSH
44975: EMPTY
44976: LIST
44977: LIST
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: LIST
44983: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
44984: LD_ADDR_VAR 0 26
44988: PUSH
44989: LD_INT 0
44991: PUSH
44992: LD_INT 3
44994: PUSH
44995: EMPTY
44996: LIST
44997: LIST
44998: PUSH
44999: LD_INT 1
45001: PUSH
45002: LD_INT 4
45004: PUSH
45005: EMPTY
45006: LIST
45007: LIST
45008: PUSH
45009: LD_INT 1
45011: NEG
45012: PUSH
45013: LD_INT 3
45015: PUSH
45016: EMPTY
45017: LIST
45018: LIST
45019: PUSH
45020: EMPTY
45021: LIST
45022: LIST
45023: LIST
45024: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
45025: LD_ADDR_VAR 0 27
45029: PUSH
45030: LD_INT 3
45032: NEG
45033: PUSH
45034: LD_INT 0
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: PUSH
45041: LD_INT 3
45043: NEG
45044: PUSH
45045: LD_INT 1
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: LD_INT 4
45054: NEG
45055: PUSH
45056: LD_INT 1
45058: NEG
45059: PUSH
45060: EMPTY
45061: LIST
45062: LIST
45063: PUSH
45064: EMPTY
45065: LIST
45066: LIST
45067: LIST
45068: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
45069: LD_ADDR_VAR 0 28
45073: PUSH
45074: LD_INT 3
45076: NEG
45077: PUSH
45078: LD_INT 3
45080: NEG
45081: PUSH
45082: EMPTY
45083: LIST
45084: LIST
45085: PUSH
45086: LD_INT 3
45088: NEG
45089: PUSH
45090: LD_INT 4
45092: NEG
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: PUSH
45098: LD_INT 4
45100: NEG
45101: PUSH
45102: LD_INT 3
45104: NEG
45105: PUSH
45106: EMPTY
45107: LIST
45108: LIST
45109: PUSH
45110: EMPTY
45111: LIST
45112: LIST
45113: LIST
45114: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
45115: LD_ADDR_VAR 0 29
45119: PUSH
45120: LD_INT 1
45122: NEG
45123: PUSH
45124: LD_INT 3
45126: NEG
45127: PUSH
45128: EMPTY
45129: LIST
45130: LIST
45131: PUSH
45132: LD_INT 0
45134: PUSH
45135: LD_INT 3
45137: NEG
45138: PUSH
45139: EMPTY
45140: LIST
45141: LIST
45142: PUSH
45143: LD_INT 1
45145: PUSH
45146: LD_INT 2
45148: NEG
45149: PUSH
45150: EMPTY
45151: LIST
45152: LIST
45153: PUSH
45154: LD_INT 1
45156: NEG
45157: PUSH
45158: LD_INT 4
45160: NEG
45161: PUSH
45162: EMPTY
45163: LIST
45164: LIST
45165: PUSH
45166: LD_INT 0
45168: PUSH
45169: LD_INT 4
45171: NEG
45172: PUSH
45173: EMPTY
45174: LIST
45175: LIST
45176: PUSH
45177: LD_INT 1
45179: PUSH
45180: LD_INT 3
45182: NEG
45183: PUSH
45184: EMPTY
45185: LIST
45186: LIST
45187: PUSH
45188: LD_INT 1
45190: NEG
45191: PUSH
45192: LD_INT 5
45194: NEG
45195: PUSH
45196: EMPTY
45197: LIST
45198: LIST
45199: PUSH
45200: LD_INT 0
45202: PUSH
45203: LD_INT 5
45205: NEG
45206: PUSH
45207: EMPTY
45208: LIST
45209: LIST
45210: PUSH
45211: LD_INT 1
45213: PUSH
45214: LD_INT 4
45216: NEG
45217: PUSH
45218: EMPTY
45219: LIST
45220: LIST
45221: PUSH
45222: LD_INT 1
45224: NEG
45225: PUSH
45226: LD_INT 6
45228: NEG
45229: PUSH
45230: EMPTY
45231: LIST
45232: LIST
45233: PUSH
45234: LD_INT 0
45236: PUSH
45237: LD_INT 6
45239: NEG
45240: PUSH
45241: EMPTY
45242: LIST
45243: LIST
45244: PUSH
45245: LD_INT 1
45247: PUSH
45248: LD_INT 5
45250: NEG
45251: PUSH
45252: EMPTY
45253: LIST
45254: LIST
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: LIST
45260: LIST
45261: LIST
45262: LIST
45263: LIST
45264: LIST
45265: LIST
45266: LIST
45267: LIST
45268: LIST
45269: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
45270: LD_ADDR_VAR 0 30
45274: PUSH
45275: LD_INT 2
45277: PUSH
45278: LD_INT 1
45280: NEG
45281: PUSH
45282: EMPTY
45283: LIST
45284: LIST
45285: PUSH
45286: LD_INT 3
45288: PUSH
45289: LD_INT 0
45291: PUSH
45292: EMPTY
45293: LIST
45294: LIST
45295: PUSH
45296: LD_INT 3
45298: PUSH
45299: LD_INT 1
45301: PUSH
45302: EMPTY
45303: LIST
45304: LIST
45305: PUSH
45306: LD_INT 3
45308: PUSH
45309: LD_INT 1
45311: NEG
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: PUSH
45317: LD_INT 4
45319: PUSH
45320: LD_INT 0
45322: PUSH
45323: EMPTY
45324: LIST
45325: LIST
45326: PUSH
45327: LD_INT 4
45329: PUSH
45330: LD_INT 1
45332: PUSH
45333: EMPTY
45334: LIST
45335: LIST
45336: PUSH
45337: LD_INT 4
45339: PUSH
45340: LD_INT 1
45342: NEG
45343: PUSH
45344: EMPTY
45345: LIST
45346: LIST
45347: PUSH
45348: LD_INT 5
45350: PUSH
45351: LD_INT 0
45353: PUSH
45354: EMPTY
45355: LIST
45356: LIST
45357: PUSH
45358: LD_INT 5
45360: PUSH
45361: LD_INT 1
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: PUSH
45368: LD_INT 5
45370: PUSH
45371: LD_INT 1
45373: NEG
45374: PUSH
45375: EMPTY
45376: LIST
45377: LIST
45378: PUSH
45379: LD_INT 6
45381: PUSH
45382: LD_INT 0
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: PUSH
45389: LD_INT 6
45391: PUSH
45392: LD_INT 1
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: EMPTY
45400: LIST
45401: LIST
45402: LIST
45403: LIST
45404: LIST
45405: LIST
45406: LIST
45407: LIST
45408: LIST
45409: LIST
45410: LIST
45411: LIST
45412: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
45413: LD_ADDR_VAR 0 31
45417: PUSH
45418: LD_INT 3
45420: PUSH
45421: LD_INT 2
45423: PUSH
45424: EMPTY
45425: LIST
45426: LIST
45427: PUSH
45428: LD_INT 3
45430: PUSH
45431: LD_INT 3
45433: PUSH
45434: EMPTY
45435: LIST
45436: LIST
45437: PUSH
45438: LD_INT 2
45440: PUSH
45441: LD_INT 3
45443: PUSH
45444: EMPTY
45445: LIST
45446: LIST
45447: PUSH
45448: LD_INT 4
45450: PUSH
45451: LD_INT 3
45453: PUSH
45454: EMPTY
45455: LIST
45456: LIST
45457: PUSH
45458: LD_INT 4
45460: PUSH
45461: LD_INT 4
45463: PUSH
45464: EMPTY
45465: LIST
45466: LIST
45467: PUSH
45468: LD_INT 3
45470: PUSH
45471: LD_INT 4
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: PUSH
45478: LD_INT 5
45480: PUSH
45481: LD_INT 4
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: PUSH
45488: LD_INT 5
45490: PUSH
45491: LD_INT 5
45493: PUSH
45494: EMPTY
45495: LIST
45496: LIST
45497: PUSH
45498: LD_INT 4
45500: PUSH
45501: LD_INT 5
45503: PUSH
45504: EMPTY
45505: LIST
45506: LIST
45507: PUSH
45508: LD_INT 6
45510: PUSH
45511: LD_INT 5
45513: PUSH
45514: EMPTY
45515: LIST
45516: LIST
45517: PUSH
45518: LD_INT 6
45520: PUSH
45521: LD_INT 6
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: PUSH
45528: LD_INT 5
45530: PUSH
45531: LD_INT 6
45533: PUSH
45534: EMPTY
45535: LIST
45536: LIST
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: LIST
45542: LIST
45543: LIST
45544: LIST
45545: LIST
45546: LIST
45547: LIST
45548: LIST
45549: LIST
45550: LIST
45551: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
45552: LD_ADDR_VAR 0 32
45556: PUSH
45557: LD_INT 1
45559: PUSH
45560: LD_INT 3
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: PUSH
45567: LD_INT 0
45569: PUSH
45570: LD_INT 3
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: PUSH
45577: LD_INT 1
45579: NEG
45580: PUSH
45581: LD_INT 2
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: PUSH
45588: LD_INT 1
45590: PUSH
45591: LD_INT 4
45593: PUSH
45594: EMPTY
45595: LIST
45596: LIST
45597: PUSH
45598: LD_INT 0
45600: PUSH
45601: LD_INT 4
45603: PUSH
45604: EMPTY
45605: LIST
45606: LIST
45607: PUSH
45608: LD_INT 1
45610: NEG
45611: PUSH
45612: LD_INT 3
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: PUSH
45619: LD_INT 1
45621: PUSH
45622: LD_INT 5
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: PUSH
45629: LD_INT 0
45631: PUSH
45632: LD_INT 5
45634: PUSH
45635: EMPTY
45636: LIST
45637: LIST
45638: PUSH
45639: LD_INT 1
45641: NEG
45642: PUSH
45643: LD_INT 4
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: PUSH
45650: LD_INT 1
45652: PUSH
45653: LD_INT 6
45655: PUSH
45656: EMPTY
45657: LIST
45658: LIST
45659: PUSH
45660: LD_INT 0
45662: PUSH
45663: LD_INT 6
45665: PUSH
45666: EMPTY
45667: LIST
45668: LIST
45669: PUSH
45670: LD_INT 1
45672: NEG
45673: PUSH
45674: LD_INT 5
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: LIST
45685: LIST
45686: LIST
45687: LIST
45688: LIST
45689: LIST
45690: LIST
45691: LIST
45692: LIST
45693: LIST
45694: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
45695: LD_ADDR_VAR 0 33
45699: PUSH
45700: LD_INT 2
45702: NEG
45703: PUSH
45704: LD_INT 1
45706: PUSH
45707: EMPTY
45708: LIST
45709: LIST
45710: PUSH
45711: LD_INT 3
45713: NEG
45714: PUSH
45715: LD_INT 0
45717: PUSH
45718: EMPTY
45719: LIST
45720: LIST
45721: PUSH
45722: LD_INT 3
45724: NEG
45725: PUSH
45726: LD_INT 1
45728: NEG
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: PUSH
45734: LD_INT 3
45736: NEG
45737: PUSH
45738: LD_INT 1
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: PUSH
45745: LD_INT 4
45747: NEG
45748: PUSH
45749: LD_INT 0
45751: PUSH
45752: EMPTY
45753: LIST
45754: LIST
45755: PUSH
45756: LD_INT 4
45758: NEG
45759: PUSH
45760: LD_INT 1
45762: NEG
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: PUSH
45768: LD_INT 4
45770: NEG
45771: PUSH
45772: LD_INT 1
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: LD_INT 5
45781: NEG
45782: PUSH
45783: LD_INT 0
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: PUSH
45790: LD_INT 5
45792: NEG
45793: PUSH
45794: LD_INT 1
45796: NEG
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: PUSH
45802: LD_INT 5
45804: NEG
45805: PUSH
45806: LD_INT 1
45808: PUSH
45809: EMPTY
45810: LIST
45811: LIST
45812: PUSH
45813: LD_INT 6
45815: NEG
45816: PUSH
45817: LD_INT 0
45819: PUSH
45820: EMPTY
45821: LIST
45822: LIST
45823: PUSH
45824: LD_INT 6
45826: NEG
45827: PUSH
45828: LD_INT 1
45830: NEG
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: LIST
45840: LIST
45841: LIST
45842: LIST
45843: LIST
45844: LIST
45845: LIST
45846: LIST
45847: LIST
45848: LIST
45849: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
45850: LD_ADDR_VAR 0 34
45854: PUSH
45855: LD_INT 2
45857: NEG
45858: PUSH
45859: LD_INT 3
45861: NEG
45862: PUSH
45863: EMPTY
45864: LIST
45865: LIST
45866: PUSH
45867: LD_INT 3
45869: NEG
45870: PUSH
45871: LD_INT 2
45873: NEG
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: PUSH
45879: LD_INT 3
45881: NEG
45882: PUSH
45883: LD_INT 3
45885: NEG
45886: PUSH
45887: EMPTY
45888: LIST
45889: LIST
45890: PUSH
45891: LD_INT 3
45893: NEG
45894: PUSH
45895: LD_INT 4
45897: NEG
45898: PUSH
45899: EMPTY
45900: LIST
45901: LIST
45902: PUSH
45903: LD_INT 4
45905: NEG
45906: PUSH
45907: LD_INT 3
45909: NEG
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: LD_INT 4
45917: NEG
45918: PUSH
45919: LD_INT 4
45921: NEG
45922: PUSH
45923: EMPTY
45924: LIST
45925: LIST
45926: PUSH
45927: LD_INT 4
45929: NEG
45930: PUSH
45931: LD_INT 5
45933: NEG
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: PUSH
45939: LD_INT 5
45941: NEG
45942: PUSH
45943: LD_INT 4
45945: NEG
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: PUSH
45951: LD_INT 5
45953: NEG
45954: PUSH
45955: LD_INT 5
45957: NEG
45958: PUSH
45959: EMPTY
45960: LIST
45961: LIST
45962: PUSH
45963: LD_INT 5
45965: NEG
45966: PUSH
45967: LD_INT 6
45969: NEG
45970: PUSH
45971: EMPTY
45972: LIST
45973: LIST
45974: PUSH
45975: LD_INT 6
45977: NEG
45978: PUSH
45979: LD_INT 5
45981: NEG
45982: PUSH
45983: EMPTY
45984: LIST
45985: LIST
45986: PUSH
45987: LD_INT 6
45989: NEG
45990: PUSH
45991: LD_INT 6
45993: NEG
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: LIST
46003: LIST
46004: LIST
46005: LIST
46006: LIST
46007: LIST
46008: LIST
46009: LIST
46010: LIST
46011: LIST
46012: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
46013: LD_ADDR_VAR 0 41
46017: PUSH
46018: LD_INT 0
46020: PUSH
46021: LD_INT 2
46023: NEG
46024: PUSH
46025: EMPTY
46026: LIST
46027: LIST
46028: PUSH
46029: LD_INT 1
46031: NEG
46032: PUSH
46033: LD_INT 3
46035: NEG
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: PUSH
46041: LD_INT 1
46043: PUSH
46044: LD_INT 2
46046: NEG
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: LIST
46056: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
46057: LD_ADDR_VAR 0 42
46061: PUSH
46062: LD_INT 2
46064: PUSH
46065: LD_INT 0
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: PUSH
46072: LD_INT 2
46074: PUSH
46075: LD_INT 1
46077: NEG
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: PUSH
46083: LD_INT 3
46085: PUSH
46086: LD_INT 1
46088: PUSH
46089: EMPTY
46090: LIST
46091: LIST
46092: PUSH
46093: EMPTY
46094: LIST
46095: LIST
46096: LIST
46097: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
46098: LD_ADDR_VAR 0 43
46102: PUSH
46103: LD_INT 2
46105: PUSH
46106: LD_INT 2
46108: PUSH
46109: EMPTY
46110: LIST
46111: LIST
46112: PUSH
46113: LD_INT 3
46115: PUSH
46116: LD_INT 2
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: PUSH
46123: LD_INT 2
46125: PUSH
46126: LD_INT 3
46128: PUSH
46129: EMPTY
46130: LIST
46131: LIST
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: LIST
46137: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
46138: LD_ADDR_VAR 0 44
46142: PUSH
46143: LD_INT 0
46145: PUSH
46146: LD_INT 2
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: PUSH
46153: LD_INT 1
46155: PUSH
46156: LD_INT 3
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: PUSH
46163: LD_INT 1
46165: NEG
46166: PUSH
46167: LD_INT 2
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: LIST
46178: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46179: LD_ADDR_VAR 0 45
46183: PUSH
46184: LD_INT 2
46186: NEG
46187: PUSH
46188: LD_INT 0
46190: PUSH
46191: EMPTY
46192: LIST
46193: LIST
46194: PUSH
46195: LD_INT 2
46197: NEG
46198: PUSH
46199: LD_INT 1
46201: PUSH
46202: EMPTY
46203: LIST
46204: LIST
46205: PUSH
46206: LD_INT 3
46208: NEG
46209: PUSH
46210: LD_INT 1
46212: NEG
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: LIST
46222: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
46223: LD_ADDR_VAR 0 46
46227: PUSH
46228: LD_INT 2
46230: NEG
46231: PUSH
46232: LD_INT 2
46234: NEG
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: PUSH
46240: LD_INT 2
46242: NEG
46243: PUSH
46244: LD_INT 3
46246: NEG
46247: PUSH
46248: EMPTY
46249: LIST
46250: LIST
46251: PUSH
46252: LD_INT 3
46254: NEG
46255: PUSH
46256: LD_INT 2
46258: NEG
46259: PUSH
46260: EMPTY
46261: LIST
46262: LIST
46263: PUSH
46264: EMPTY
46265: LIST
46266: LIST
46267: LIST
46268: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
46269: LD_ADDR_VAR 0 47
46273: PUSH
46274: LD_INT 2
46276: NEG
46277: PUSH
46278: LD_INT 3
46280: NEG
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: PUSH
46286: LD_INT 1
46288: NEG
46289: PUSH
46290: LD_INT 3
46292: NEG
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46302: LD_ADDR_VAR 0 48
46306: PUSH
46307: LD_INT 1
46309: PUSH
46310: LD_INT 2
46312: NEG
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: PUSH
46318: LD_INT 2
46320: PUSH
46321: LD_INT 1
46323: NEG
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
46333: LD_ADDR_VAR 0 49
46337: PUSH
46338: LD_INT 3
46340: PUSH
46341: LD_INT 1
46343: PUSH
46344: EMPTY
46345: LIST
46346: LIST
46347: PUSH
46348: LD_INT 3
46350: PUSH
46351: LD_INT 2
46353: PUSH
46354: EMPTY
46355: LIST
46356: LIST
46357: PUSH
46358: EMPTY
46359: LIST
46360: LIST
46361: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
46362: LD_ADDR_VAR 0 50
46366: PUSH
46367: LD_INT 2
46369: PUSH
46370: LD_INT 3
46372: PUSH
46373: EMPTY
46374: LIST
46375: LIST
46376: PUSH
46377: LD_INT 1
46379: PUSH
46380: LD_INT 3
46382: PUSH
46383: EMPTY
46384: LIST
46385: LIST
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
46391: LD_ADDR_VAR 0 51
46395: PUSH
46396: LD_INT 1
46398: NEG
46399: PUSH
46400: LD_INT 2
46402: PUSH
46403: EMPTY
46404: LIST
46405: LIST
46406: PUSH
46407: LD_INT 2
46409: NEG
46410: PUSH
46411: LD_INT 1
46413: PUSH
46414: EMPTY
46415: LIST
46416: LIST
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46422: LD_ADDR_VAR 0 52
46426: PUSH
46427: LD_INT 3
46429: NEG
46430: PUSH
46431: LD_INT 1
46433: NEG
46434: PUSH
46435: EMPTY
46436: LIST
46437: LIST
46438: PUSH
46439: LD_INT 3
46441: NEG
46442: PUSH
46443: LD_INT 2
46445: NEG
46446: PUSH
46447: EMPTY
46448: LIST
46449: LIST
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46455: LD_ADDR_VAR 0 53
46459: PUSH
46460: LD_INT 1
46462: NEG
46463: PUSH
46464: LD_INT 3
46466: NEG
46467: PUSH
46468: EMPTY
46469: LIST
46470: LIST
46471: PUSH
46472: LD_INT 0
46474: PUSH
46475: LD_INT 3
46477: NEG
46478: PUSH
46479: EMPTY
46480: LIST
46481: LIST
46482: PUSH
46483: LD_INT 1
46485: PUSH
46486: LD_INT 2
46488: NEG
46489: PUSH
46490: EMPTY
46491: LIST
46492: LIST
46493: PUSH
46494: EMPTY
46495: LIST
46496: LIST
46497: LIST
46498: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46499: LD_ADDR_VAR 0 54
46503: PUSH
46504: LD_INT 2
46506: PUSH
46507: LD_INT 1
46509: NEG
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PUSH
46515: LD_INT 3
46517: PUSH
46518: LD_INT 0
46520: PUSH
46521: EMPTY
46522: LIST
46523: LIST
46524: PUSH
46525: LD_INT 3
46527: PUSH
46528: LD_INT 1
46530: PUSH
46531: EMPTY
46532: LIST
46533: LIST
46534: PUSH
46535: EMPTY
46536: LIST
46537: LIST
46538: LIST
46539: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46540: LD_ADDR_VAR 0 55
46544: PUSH
46545: LD_INT 3
46547: PUSH
46548: LD_INT 2
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: PUSH
46555: LD_INT 3
46557: PUSH
46558: LD_INT 3
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: LD_INT 2
46567: PUSH
46568: LD_INT 3
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: PUSH
46575: EMPTY
46576: LIST
46577: LIST
46578: LIST
46579: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46580: LD_ADDR_VAR 0 56
46584: PUSH
46585: LD_INT 1
46587: PUSH
46588: LD_INT 3
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: PUSH
46595: LD_INT 0
46597: PUSH
46598: LD_INT 3
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: PUSH
46605: LD_INT 1
46607: NEG
46608: PUSH
46609: LD_INT 2
46611: PUSH
46612: EMPTY
46613: LIST
46614: LIST
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: LIST
46620: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46621: LD_ADDR_VAR 0 57
46625: PUSH
46626: LD_INT 2
46628: NEG
46629: PUSH
46630: LD_INT 1
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: PUSH
46637: LD_INT 3
46639: NEG
46640: PUSH
46641: LD_INT 0
46643: PUSH
46644: EMPTY
46645: LIST
46646: LIST
46647: PUSH
46648: LD_INT 3
46650: NEG
46651: PUSH
46652: LD_INT 1
46654: NEG
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: LIST
46664: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46665: LD_ADDR_VAR 0 58
46669: PUSH
46670: LD_INT 2
46672: NEG
46673: PUSH
46674: LD_INT 3
46676: NEG
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: PUSH
46682: LD_INT 3
46684: NEG
46685: PUSH
46686: LD_INT 2
46688: NEG
46689: PUSH
46690: EMPTY
46691: LIST
46692: LIST
46693: PUSH
46694: LD_INT 3
46696: NEG
46697: PUSH
46698: LD_INT 3
46700: NEG
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: LIST
46710: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
46711: LD_ADDR_VAR 0 59
46715: PUSH
46716: LD_INT 1
46718: NEG
46719: PUSH
46720: LD_INT 2
46722: NEG
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: PUSH
46728: LD_INT 0
46730: PUSH
46731: LD_INT 2
46733: NEG
46734: PUSH
46735: EMPTY
46736: LIST
46737: LIST
46738: PUSH
46739: LD_INT 1
46741: PUSH
46742: LD_INT 1
46744: NEG
46745: PUSH
46746: EMPTY
46747: LIST
46748: LIST
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: LIST
46754: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
46755: LD_ADDR_VAR 0 60
46759: PUSH
46760: LD_INT 1
46762: PUSH
46763: LD_INT 1
46765: NEG
46766: PUSH
46767: EMPTY
46768: LIST
46769: LIST
46770: PUSH
46771: LD_INT 2
46773: PUSH
46774: LD_INT 0
46776: PUSH
46777: EMPTY
46778: LIST
46779: LIST
46780: PUSH
46781: LD_INT 2
46783: PUSH
46784: LD_INT 1
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: EMPTY
46792: LIST
46793: LIST
46794: LIST
46795: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
46796: LD_ADDR_VAR 0 61
46800: PUSH
46801: LD_INT 2
46803: PUSH
46804: LD_INT 1
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 2
46813: PUSH
46814: LD_INT 2
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: PUSH
46821: LD_INT 1
46823: PUSH
46824: LD_INT 2
46826: PUSH
46827: EMPTY
46828: LIST
46829: LIST
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: LIST
46835: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
46836: LD_ADDR_VAR 0 62
46840: PUSH
46841: LD_INT 1
46843: PUSH
46844: LD_INT 2
46846: PUSH
46847: EMPTY
46848: LIST
46849: LIST
46850: PUSH
46851: LD_INT 0
46853: PUSH
46854: LD_INT 2
46856: PUSH
46857: EMPTY
46858: LIST
46859: LIST
46860: PUSH
46861: LD_INT 1
46863: NEG
46864: PUSH
46865: LD_INT 1
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: PUSH
46872: EMPTY
46873: LIST
46874: LIST
46875: LIST
46876: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
46877: LD_ADDR_VAR 0 63
46881: PUSH
46882: LD_INT 1
46884: NEG
46885: PUSH
46886: LD_INT 1
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: PUSH
46893: LD_INT 2
46895: NEG
46896: PUSH
46897: LD_INT 0
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: PUSH
46904: LD_INT 2
46906: NEG
46907: PUSH
46908: LD_INT 1
46910: NEG
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: LIST
46920: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46921: LD_ADDR_VAR 0 64
46925: PUSH
46926: LD_INT 1
46928: NEG
46929: PUSH
46930: LD_INT 2
46932: NEG
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: PUSH
46938: LD_INT 2
46940: NEG
46941: PUSH
46942: LD_INT 1
46944: NEG
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: PUSH
46950: LD_INT 2
46952: NEG
46953: PUSH
46954: LD_INT 2
46956: NEG
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: LIST
46966: ST_TO_ADDR
// end ; 2 :
46967: GO 50233
46969: LD_INT 2
46971: DOUBLE
46972: EQUAL
46973: IFTRUE 46977
46975: GO 50232
46977: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
46978: LD_ADDR_VAR 0 29
46982: PUSH
46983: LD_INT 4
46985: PUSH
46986: LD_INT 0
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: PUSH
46993: LD_INT 4
46995: PUSH
46996: LD_INT 1
46998: NEG
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: PUSH
47004: LD_INT 5
47006: PUSH
47007: LD_INT 0
47009: PUSH
47010: EMPTY
47011: LIST
47012: LIST
47013: PUSH
47014: LD_INT 5
47016: PUSH
47017: LD_INT 1
47019: PUSH
47020: EMPTY
47021: LIST
47022: LIST
47023: PUSH
47024: LD_INT 4
47026: PUSH
47027: LD_INT 1
47029: PUSH
47030: EMPTY
47031: LIST
47032: LIST
47033: PUSH
47034: LD_INT 3
47036: PUSH
47037: LD_INT 0
47039: PUSH
47040: EMPTY
47041: LIST
47042: LIST
47043: PUSH
47044: LD_INT 3
47046: PUSH
47047: LD_INT 1
47049: NEG
47050: PUSH
47051: EMPTY
47052: LIST
47053: LIST
47054: PUSH
47055: LD_INT 3
47057: PUSH
47058: LD_INT 2
47060: NEG
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: PUSH
47066: LD_INT 5
47068: PUSH
47069: LD_INT 2
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: PUSH
47076: LD_INT 3
47078: PUSH
47079: LD_INT 3
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: PUSH
47086: LD_INT 3
47088: PUSH
47089: LD_INT 2
47091: PUSH
47092: EMPTY
47093: LIST
47094: LIST
47095: PUSH
47096: LD_INT 4
47098: PUSH
47099: LD_INT 3
47101: PUSH
47102: EMPTY
47103: LIST
47104: LIST
47105: PUSH
47106: LD_INT 4
47108: PUSH
47109: LD_INT 4
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: PUSH
47116: LD_INT 3
47118: PUSH
47119: LD_INT 4
47121: PUSH
47122: EMPTY
47123: LIST
47124: LIST
47125: PUSH
47126: LD_INT 2
47128: PUSH
47129: LD_INT 3
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: PUSH
47136: LD_INT 2
47138: PUSH
47139: LD_INT 2
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: PUSH
47146: LD_INT 4
47148: PUSH
47149: LD_INT 2
47151: PUSH
47152: EMPTY
47153: LIST
47154: LIST
47155: PUSH
47156: LD_INT 2
47158: PUSH
47159: LD_INT 4
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PUSH
47166: LD_INT 0
47168: PUSH
47169: LD_INT 4
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: PUSH
47176: LD_INT 0
47178: PUSH
47179: LD_INT 3
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PUSH
47186: LD_INT 1
47188: PUSH
47189: LD_INT 4
47191: PUSH
47192: EMPTY
47193: LIST
47194: LIST
47195: PUSH
47196: LD_INT 1
47198: PUSH
47199: LD_INT 5
47201: PUSH
47202: EMPTY
47203: LIST
47204: LIST
47205: PUSH
47206: LD_INT 0
47208: PUSH
47209: LD_INT 5
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: PUSH
47216: LD_INT 1
47218: NEG
47219: PUSH
47220: LD_INT 4
47222: PUSH
47223: EMPTY
47224: LIST
47225: LIST
47226: PUSH
47227: LD_INT 1
47229: NEG
47230: PUSH
47231: LD_INT 3
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: PUSH
47238: LD_INT 2
47240: PUSH
47241: LD_INT 5
47243: PUSH
47244: EMPTY
47245: LIST
47246: LIST
47247: PUSH
47248: LD_INT 2
47250: NEG
47251: PUSH
47252: LD_INT 3
47254: PUSH
47255: EMPTY
47256: LIST
47257: LIST
47258: PUSH
47259: LD_INT 3
47261: NEG
47262: PUSH
47263: LD_INT 0
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: PUSH
47270: LD_INT 3
47272: NEG
47273: PUSH
47274: LD_INT 1
47276: NEG
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: PUSH
47282: LD_INT 2
47284: NEG
47285: PUSH
47286: LD_INT 0
47288: PUSH
47289: EMPTY
47290: LIST
47291: LIST
47292: PUSH
47293: LD_INT 2
47295: NEG
47296: PUSH
47297: LD_INT 1
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: PUSH
47304: LD_INT 3
47306: NEG
47307: PUSH
47308: LD_INT 1
47310: PUSH
47311: EMPTY
47312: LIST
47313: LIST
47314: PUSH
47315: LD_INT 4
47317: NEG
47318: PUSH
47319: LD_INT 0
47321: PUSH
47322: EMPTY
47323: LIST
47324: LIST
47325: PUSH
47326: LD_INT 4
47328: NEG
47329: PUSH
47330: LD_INT 1
47332: NEG
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: PUSH
47338: LD_INT 4
47340: NEG
47341: PUSH
47342: LD_INT 2
47344: NEG
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: PUSH
47350: LD_INT 2
47352: NEG
47353: PUSH
47354: LD_INT 2
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: PUSH
47361: LD_INT 4
47363: NEG
47364: PUSH
47365: LD_INT 4
47367: NEG
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: PUSH
47373: LD_INT 4
47375: NEG
47376: PUSH
47377: LD_INT 5
47379: NEG
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PUSH
47385: LD_INT 3
47387: NEG
47388: PUSH
47389: LD_INT 4
47391: NEG
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: PUSH
47397: LD_INT 3
47399: NEG
47400: PUSH
47401: LD_INT 3
47403: NEG
47404: PUSH
47405: EMPTY
47406: LIST
47407: LIST
47408: PUSH
47409: LD_INT 4
47411: NEG
47412: PUSH
47413: LD_INT 3
47415: NEG
47416: PUSH
47417: EMPTY
47418: LIST
47419: LIST
47420: PUSH
47421: LD_INT 5
47423: NEG
47424: PUSH
47425: LD_INT 4
47427: NEG
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: PUSH
47433: LD_INT 5
47435: NEG
47436: PUSH
47437: LD_INT 5
47439: NEG
47440: PUSH
47441: EMPTY
47442: LIST
47443: LIST
47444: PUSH
47445: LD_INT 3
47447: NEG
47448: PUSH
47449: LD_INT 5
47451: NEG
47452: PUSH
47453: EMPTY
47454: LIST
47455: LIST
47456: PUSH
47457: LD_INT 5
47459: NEG
47460: PUSH
47461: LD_INT 3
47463: NEG
47464: PUSH
47465: EMPTY
47466: LIST
47467: LIST
47468: PUSH
47469: EMPTY
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: LIST
47475: LIST
47476: LIST
47477: LIST
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: LIST
47483: LIST
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: LIST
47489: LIST
47490: LIST
47491: LIST
47492: LIST
47493: LIST
47494: LIST
47495: LIST
47496: LIST
47497: LIST
47498: LIST
47499: LIST
47500: LIST
47501: LIST
47502: LIST
47503: LIST
47504: LIST
47505: LIST
47506: LIST
47507: LIST
47508: LIST
47509: LIST
47510: LIST
47511: LIST
47512: LIST
47513: LIST
47514: LIST
47515: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
47516: LD_ADDR_VAR 0 30
47520: PUSH
47521: LD_INT 4
47523: PUSH
47524: LD_INT 4
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: PUSH
47531: LD_INT 4
47533: PUSH
47534: LD_INT 3
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: PUSH
47541: LD_INT 5
47543: PUSH
47544: LD_INT 4
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: PUSH
47551: LD_INT 5
47553: PUSH
47554: LD_INT 5
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: LD_INT 4
47563: PUSH
47564: LD_INT 5
47566: PUSH
47567: EMPTY
47568: LIST
47569: LIST
47570: PUSH
47571: LD_INT 3
47573: PUSH
47574: LD_INT 4
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: LD_INT 3
47583: PUSH
47584: LD_INT 3
47586: PUSH
47587: EMPTY
47588: LIST
47589: LIST
47590: PUSH
47591: LD_INT 5
47593: PUSH
47594: LD_INT 3
47596: PUSH
47597: EMPTY
47598: LIST
47599: LIST
47600: PUSH
47601: LD_INT 3
47603: PUSH
47604: LD_INT 5
47606: PUSH
47607: EMPTY
47608: LIST
47609: LIST
47610: PUSH
47611: LD_INT 0
47613: PUSH
47614: LD_INT 3
47616: PUSH
47617: EMPTY
47618: LIST
47619: LIST
47620: PUSH
47621: LD_INT 0
47623: PUSH
47624: LD_INT 2
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: PUSH
47631: LD_INT 1
47633: PUSH
47634: LD_INT 3
47636: PUSH
47637: EMPTY
47638: LIST
47639: LIST
47640: PUSH
47641: LD_INT 1
47643: PUSH
47644: LD_INT 4
47646: PUSH
47647: EMPTY
47648: LIST
47649: LIST
47650: PUSH
47651: LD_INT 0
47653: PUSH
47654: LD_INT 4
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: LD_INT 1
47663: NEG
47664: PUSH
47665: LD_INT 3
47667: PUSH
47668: EMPTY
47669: LIST
47670: LIST
47671: PUSH
47672: LD_INT 1
47674: NEG
47675: PUSH
47676: LD_INT 2
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: LD_INT 2
47685: PUSH
47686: LD_INT 4
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: PUSH
47693: LD_INT 2
47695: NEG
47696: PUSH
47697: LD_INT 2
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: LD_INT 4
47706: NEG
47707: PUSH
47708: LD_INT 0
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: PUSH
47715: LD_INT 4
47717: NEG
47718: PUSH
47719: LD_INT 1
47721: NEG
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: PUSH
47727: LD_INT 3
47729: NEG
47730: PUSH
47731: LD_INT 0
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: PUSH
47738: LD_INT 3
47740: NEG
47741: PUSH
47742: LD_INT 1
47744: PUSH
47745: EMPTY
47746: LIST
47747: LIST
47748: PUSH
47749: LD_INT 4
47751: NEG
47752: PUSH
47753: LD_INT 1
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: PUSH
47760: LD_INT 5
47762: NEG
47763: PUSH
47764: LD_INT 0
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: LD_INT 5
47773: NEG
47774: PUSH
47775: LD_INT 1
47777: NEG
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: PUSH
47783: LD_INT 5
47785: NEG
47786: PUSH
47787: LD_INT 2
47789: NEG
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: PUSH
47795: LD_INT 3
47797: NEG
47798: PUSH
47799: LD_INT 2
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PUSH
47806: LD_INT 3
47808: NEG
47809: PUSH
47810: LD_INT 3
47812: NEG
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: PUSH
47818: LD_INT 3
47820: NEG
47821: PUSH
47822: LD_INT 4
47824: NEG
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: PUSH
47830: LD_INT 2
47832: NEG
47833: PUSH
47834: LD_INT 3
47836: NEG
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: PUSH
47842: LD_INT 2
47844: NEG
47845: PUSH
47846: LD_INT 2
47848: NEG
47849: PUSH
47850: EMPTY
47851: LIST
47852: LIST
47853: PUSH
47854: LD_INT 3
47856: NEG
47857: PUSH
47858: LD_INT 2
47860: NEG
47861: PUSH
47862: EMPTY
47863: LIST
47864: LIST
47865: PUSH
47866: LD_INT 4
47868: NEG
47869: PUSH
47870: LD_INT 3
47872: NEG
47873: PUSH
47874: EMPTY
47875: LIST
47876: LIST
47877: PUSH
47878: LD_INT 4
47880: NEG
47881: PUSH
47882: LD_INT 4
47884: NEG
47885: PUSH
47886: EMPTY
47887: LIST
47888: LIST
47889: PUSH
47890: LD_INT 2
47892: NEG
47893: PUSH
47894: LD_INT 4
47896: NEG
47897: PUSH
47898: EMPTY
47899: LIST
47900: LIST
47901: PUSH
47902: LD_INT 4
47904: NEG
47905: PUSH
47906: LD_INT 2
47908: NEG
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: PUSH
47914: LD_INT 0
47916: PUSH
47917: LD_INT 4
47919: NEG
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: PUSH
47925: LD_INT 0
47927: PUSH
47928: LD_INT 5
47930: NEG
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: PUSH
47936: LD_INT 1
47938: PUSH
47939: LD_INT 4
47941: NEG
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: PUSH
47947: LD_INT 1
47949: PUSH
47950: LD_INT 3
47952: NEG
47953: PUSH
47954: EMPTY
47955: LIST
47956: LIST
47957: PUSH
47958: LD_INT 0
47960: PUSH
47961: LD_INT 3
47963: NEG
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: PUSH
47969: LD_INT 1
47971: NEG
47972: PUSH
47973: LD_INT 4
47975: NEG
47976: PUSH
47977: EMPTY
47978: LIST
47979: LIST
47980: PUSH
47981: LD_INT 1
47983: NEG
47984: PUSH
47985: LD_INT 5
47987: NEG
47988: PUSH
47989: EMPTY
47990: LIST
47991: LIST
47992: PUSH
47993: LD_INT 2
47995: PUSH
47996: LD_INT 3
47998: NEG
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: PUSH
48004: LD_INT 2
48006: NEG
48007: PUSH
48008: LD_INT 5
48010: NEG
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: LIST
48020: LIST
48021: LIST
48022: LIST
48023: LIST
48024: LIST
48025: LIST
48026: LIST
48027: LIST
48028: LIST
48029: LIST
48030: LIST
48031: LIST
48032: LIST
48033: LIST
48034: LIST
48035: LIST
48036: LIST
48037: LIST
48038: LIST
48039: LIST
48040: LIST
48041: LIST
48042: LIST
48043: LIST
48044: LIST
48045: LIST
48046: LIST
48047: LIST
48048: LIST
48049: LIST
48050: LIST
48051: LIST
48052: LIST
48053: LIST
48054: LIST
48055: LIST
48056: LIST
48057: LIST
48058: LIST
48059: LIST
48060: LIST
48061: LIST
48062: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
48063: LD_ADDR_VAR 0 31
48067: PUSH
48068: LD_INT 0
48070: PUSH
48071: LD_INT 4
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: PUSH
48078: LD_INT 0
48080: PUSH
48081: LD_INT 3
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: PUSH
48088: LD_INT 1
48090: PUSH
48091: LD_INT 4
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: PUSH
48098: LD_INT 1
48100: PUSH
48101: LD_INT 5
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: PUSH
48108: LD_INT 0
48110: PUSH
48111: LD_INT 5
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: PUSH
48118: LD_INT 1
48120: NEG
48121: PUSH
48122: LD_INT 4
48124: PUSH
48125: EMPTY
48126: LIST
48127: LIST
48128: PUSH
48129: LD_INT 1
48131: NEG
48132: PUSH
48133: LD_INT 3
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: PUSH
48140: LD_INT 2
48142: PUSH
48143: LD_INT 5
48145: PUSH
48146: EMPTY
48147: LIST
48148: LIST
48149: PUSH
48150: LD_INT 2
48152: NEG
48153: PUSH
48154: LD_INT 3
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: PUSH
48161: LD_INT 3
48163: NEG
48164: PUSH
48165: LD_INT 0
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: PUSH
48172: LD_INT 3
48174: NEG
48175: PUSH
48176: LD_INT 1
48178: NEG
48179: PUSH
48180: EMPTY
48181: LIST
48182: LIST
48183: PUSH
48184: LD_INT 2
48186: NEG
48187: PUSH
48188: LD_INT 0
48190: PUSH
48191: EMPTY
48192: LIST
48193: LIST
48194: PUSH
48195: LD_INT 2
48197: NEG
48198: PUSH
48199: LD_INT 1
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: PUSH
48206: LD_INT 3
48208: NEG
48209: PUSH
48210: LD_INT 1
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: PUSH
48217: LD_INT 4
48219: NEG
48220: PUSH
48221: LD_INT 0
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: PUSH
48228: LD_INT 4
48230: NEG
48231: PUSH
48232: LD_INT 1
48234: NEG
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: PUSH
48240: LD_INT 4
48242: NEG
48243: PUSH
48244: LD_INT 2
48246: NEG
48247: PUSH
48248: EMPTY
48249: LIST
48250: LIST
48251: PUSH
48252: LD_INT 2
48254: NEG
48255: PUSH
48256: LD_INT 2
48258: PUSH
48259: EMPTY
48260: LIST
48261: LIST
48262: PUSH
48263: LD_INT 4
48265: NEG
48266: PUSH
48267: LD_INT 4
48269: NEG
48270: PUSH
48271: EMPTY
48272: LIST
48273: LIST
48274: PUSH
48275: LD_INT 4
48277: NEG
48278: PUSH
48279: LD_INT 5
48281: NEG
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: PUSH
48287: LD_INT 3
48289: NEG
48290: PUSH
48291: LD_INT 4
48293: NEG
48294: PUSH
48295: EMPTY
48296: LIST
48297: LIST
48298: PUSH
48299: LD_INT 3
48301: NEG
48302: PUSH
48303: LD_INT 3
48305: NEG
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: LD_INT 4
48313: NEG
48314: PUSH
48315: LD_INT 3
48317: NEG
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: LD_INT 5
48325: NEG
48326: PUSH
48327: LD_INT 4
48329: NEG
48330: PUSH
48331: EMPTY
48332: LIST
48333: LIST
48334: PUSH
48335: LD_INT 5
48337: NEG
48338: PUSH
48339: LD_INT 5
48341: NEG
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: PUSH
48347: LD_INT 3
48349: NEG
48350: PUSH
48351: LD_INT 5
48353: NEG
48354: PUSH
48355: EMPTY
48356: LIST
48357: LIST
48358: PUSH
48359: LD_INT 5
48361: NEG
48362: PUSH
48363: LD_INT 3
48365: NEG
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: PUSH
48371: LD_INT 0
48373: PUSH
48374: LD_INT 3
48376: NEG
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: PUSH
48382: LD_INT 0
48384: PUSH
48385: LD_INT 4
48387: NEG
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: PUSH
48393: LD_INT 1
48395: PUSH
48396: LD_INT 3
48398: NEG
48399: PUSH
48400: EMPTY
48401: LIST
48402: LIST
48403: PUSH
48404: LD_INT 1
48406: PUSH
48407: LD_INT 2
48409: NEG
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: PUSH
48415: LD_INT 0
48417: PUSH
48418: LD_INT 2
48420: NEG
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: PUSH
48426: LD_INT 1
48428: NEG
48429: PUSH
48430: LD_INT 3
48432: NEG
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: PUSH
48438: LD_INT 1
48440: NEG
48441: PUSH
48442: LD_INT 4
48444: NEG
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: PUSH
48450: LD_INT 2
48452: PUSH
48453: LD_INT 2
48455: NEG
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: PUSH
48461: LD_INT 2
48463: NEG
48464: PUSH
48465: LD_INT 4
48467: NEG
48468: PUSH
48469: EMPTY
48470: LIST
48471: LIST
48472: PUSH
48473: LD_INT 4
48475: PUSH
48476: LD_INT 0
48478: PUSH
48479: EMPTY
48480: LIST
48481: LIST
48482: PUSH
48483: LD_INT 4
48485: PUSH
48486: LD_INT 1
48488: NEG
48489: PUSH
48490: EMPTY
48491: LIST
48492: LIST
48493: PUSH
48494: LD_INT 5
48496: PUSH
48497: LD_INT 0
48499: PUSH
48500: EMPTY
48501: LIST
48502: LIST
48503: PUSH
48504: LD_INT 5
48506: PUSH
48507: LD_INT 1
48509: PUSH
48510: EMPTY
48511: LIST
48512: LIST
48513: PUSH
48514: LD_INT 4
48516: PUSH
48517: LD_INT 1
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: PUSH
48524: LD_INT 3
48526: PUSH
48527: LD_INT 0
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: PUSH
48534: LD_INT 3
48536: PUSH
48537: LD_INT 1
48539: NEG
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: PUSH
48545: LD_INT 3
48547: PUSH
48548: LD_INT 2
48550: NEG
48551: PUSH
48552: EMPTY
48553: LIST
48554: LIST
48555: PUSH
48556: LD_INT 5
48558: PUSH
48559: LD_INT 2
48561: PUSH
48562: EMPTY
48563: LIST
48564: LIST
48565: PUSH
48566: EMPTY
48567: LIST
48568: LIST
48569: LIST
48570: LIST
48571: LIST
48572: LIST
48573: LIST
48574: LIST
48575: LIST
48576: LIST
48577: LIST
48578: LIST
48579: LIST
48580: LIST
48581: LIST
48582: LIST
48583: LIST
48584: LIST
48585: LIST
48586: LIST
48587: LIST
48588: LIST
48589: LIST
48590: LIST
48591: LIST
48592: LIST
48593: LIST
48594: LIST
48595: LIST
48596: LIST
48597: LIST
48598: LIST
48599: LIST
48600: LIST
48601: LIST
48602: LIST
48603: LIST
48604: LIST
48605: LIST
48606: LIST
48607: LIST
48608: LIST
48609: LIST
48610: LIST
48611: LIST
48612: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
48613: LD_ADDR_VAR 0 32
48617: PUSH
48618: LD_INT 4
48620: NEG
48621: PUSH
48622: LD_INT 0
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: PUSH
48629: LD_INT 4
48631: NEG
48632: PUSH
48633: LD_INT 1
48635: NEG
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: PUSH
48641: LD_INT 3
48643: NEG
48644: PUSH
48645: LD_INT 0
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: PUSH
48652: LD_INT 3
48654: NEG
48655: PUSH
48656: LD_INT 1
48658: PUSH
48659: EMPTY
48660: LIST
48661: LIST
48662: PUSH
48663: LD_INT 4
48665: NEG
48666: PUSH
48667: LD_INT 1
48669: PUSH
48670: EMPTY
48671: LIST
48672: LIST
48673: PUSH
48674: LD_INT 5
48676: NEG
48677: PUSH
48678: LD_INT 0
48680: PUSH
48681: EMPTY
48682: LIST
48683: LIST
48684: PUSH
48685: LD_INT 5
48687: NEG
48688: PUSH
48689: LD_INT 1
48691: NEG
48692: PUSH
48693: EMPTY
48694: LIST
48695: LIST
48696: PUSH
48697: LD_INT 5
48699: NEG
48700: PUSH
48701: LD_INT 2
48703: NEG
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: PUSH
48709: LD_INT 3
48711: NEG
48712: PUSH
48713: LD_INT 2
48715: PUSH
48716: EMPTY
48717: LIST
48718: LIST
48719: PUSH
48720: LD_INT 3
48722: NEG
48723: PUSH
48724: LD_INT 3
48726: NEG
48727: PUSH
48728: EMPTY
48729: LIST
48730: LIST
48731: PUSH
48732: LD_INT 3
48734: NEG
48735: PUSH
48736: LD_INT 4
48738: NEG
48739: PUSH
48740: EMPTY
48741: LIST
48742: LIST
48743: PUSH
48744: LD_INT 2
48746: NEG
48747: PUSH
48748: LD_INT 3
48750: NEG
48751: PUSH
48752: EMPTY
48753: LIST
48754: LIST
48755: PUSH
48756: LD_INT 2
48758: NEG
48759: PUSH
48760: LD_INT 2
48762: NEG
48763: PUSH
48764: EMPTY
48765: LIST
48766: LIST
48767: PUSH
48768: LD_INT 3
48770: NEG
48771: PUSH
48772: LD_INT 2
48774: NEG
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: PUSH
48780: LD_INT 4
48782: NEG
48783: PUSH
48784: LD_INT 3
48786: NEG
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: PUSH
48792: LD_INT 4
48794: NEG
48795: PUSH
48796: LD_INT 4
48798: NEG
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: PUSH
48804: LD_INT 2
48806: NEG
48807: PUSH
48808: LD_INT 4
48810: NEG
48811: PUSH
48812: EMPTY
48813: LIST
48814: LIST
48815: PUSH
48816: LD_INT 4
48818: NEG
48819: PUSH
48820: LD_INT 2
48822: NEG
48823: PUSH
48824: EMPTY
48825: LIST
48826: LIST
48827: PUSH
48828: LD_INT 0
48830: PUSH
48831: LD_INT 4
48833: NEG
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: PUSH
48839: LD_INT 0
48841: PUSH
48842: LD_INT 5
48844: NEG
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: PUSH
48850: LD_INT 1
48852: PUSH
48853: LD_INT 4
48855: NEG
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: PUSH
48861: LD_INT 1
48863: PUSH
48864: LD_INT 3
48866: NEG
48867: PUSH
48868: EMPTY
48869: LIST
48870: LIST
48871: PUSH
48872: LD_INT 0
48874: PUSH
48875: LD_INT 3
48877: NEG
48878: PUSH
48879: EMPTY
48880: LIST
48881: LIST
48882: PUSH
48883: LD_INT 1
48885: NEG
48886: PUSH
48887: LD_INT 4
48889: NEG
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: PUSH
48895: LD_INT 1
48897: NEG
48898: PUSH
48899: LD_INT 5
48901: NEG
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: PUSH
48907: LD_INT 2
48909: PUSH
48910: LD_INT 3
48912: NEG
48913: PUSH
48914: EMPTY
48915: LIST
48916: LIST
48917: PUSH
48918: LD_INT 2
48920: NEG
48921: PUSH
48922: LD_INT 5
48924: NEG
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PUSH
48930: LD_INT 3
48932: PUSH
48933: LD_INT 0
48935: PUSH
48936: EMPTY
48937: LIST
48938: LIST
48939: PUSH
48940: LD_INT 3
48942: PUSH
48943: LD_INT 1
48945: NEG
48946: PUSH
48947: EMPTY
48948: LIST
48949: LIST
48950: PUSH
48951: LD_INT 4
48953: PUSH
48954: LD_INT 0
48956: PUSH
48957: EMPTY
48958: LIST
48959: LIST
48960: PUSH
48961: LD_INT 4
48963: PUSH
48964: LD_INT 1
48966: PUSH
48967: EMPTY
48968: LIST
48969: LIST
48970: PUSH
48971: LD_INT 3
48973: PUSH
48974: LD_INT 1
48976: PUSH
48977: EMPTY
48978: LIST
48979: LIST
48980: PUSH
48981: LD_INT 2
48983: PUSH
48984: LD_INT 0
48986: PUSH
48987: EMPTY
48988: LIST
48989: LIST
48990: PUSH
48991: LD_INT 2
48993: PUSH
48994: LD_INT 1
48996: NEG
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: PUSH
49002: LD_INT 2
49004: PUSH
49005: LD_INT 2
49007: NEG
49008: PUSH
49009: EMPTY
49010: LIST
49011: LIST
49012: PUSH
49013: LD_INT 4
49015: PUSH
49016: LD_INT 2
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: PUSH
49023: LD_INT 4
49025: PUSH
49026: LD_INT 4
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: PUSH
49033: LD_INT 4
49035: PUSH
49036: LD_INT 3
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: PUSH
49043: LD_INT 5
49045: PUSH
49046: LD_INT 4
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: PUSH
49053: LD_INT 5
49055: PUSH
49056: LD_INT 5
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PUSH
49063: LD_INT 4
49065: PUSH
49066: LD_INT 5
49068: PUSH
49069: EMPTY
49070: LIST
49071: LIST
49072: PUSH
49073: LD_INT 3
49075: PUSH
49076: LD_INT 4
49078: PUSH
49079: EMPTY
49080: LIST
49081: LIST
49082: PUSH
49083: LD_INT 3
49085: PUSH
49086: LD_INT 3
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: PUSH
49093: LD_INT 5
49095: PUSH
49096: LD_INT 3
49098: PUSH
49099: EMPTY
49100: LIST
49101: LIST
49102: PUSH
49103: LD_INT 3
49105: PUSH
49106: LD_INT 5
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: LIST
49117: LIST
49118: LIST
49119: LIST
49120: LIST
49121: LIST
49122: LIST
49123: LIST
49124: LIST
49125: LIST
49126: LIST
49127: LIST
49128: LIST
49129: LIST
49130: LIST
49131: LIST
49132: LIST
49133: LIST
49134: LIST
49135: LIST
49136: LIST
49137: LIST
49138: LIST
49139: LIST
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: LIST
49145: LIST
49146: LIST
49147: LIST
49148: LIST
49149: LIST
49150: LIST
49151: LIST
49152: LIST
49153: LIST
49154: LIST
49155: LIST
49156: LIST
49157: LIST
49158: LIST
49159: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
49160: LD_ADDR_VAR 0 33
49164: PUSH
49165: LD_INT 4
49167: NEG
49168: PUSH
49169: LD_INT 4
49171: NEG
49172: PUSH
49173: EMPTY
49174: LIST
49175: LIST
49176: PUSH
49177: LD_INT 4
49179: NEG
49180: PUSH
49181: LD_INT 5
49183: NEG
49184: PUSH
49185: EMPTY
49186: LIST
49187: LIST
49188: PUSH
49189: LD_INT 3
49191: NEG
49192: PUSH
49193: LD_INT 4
49195: NEG
49196: PUSH
49197: EMPTY
49198: LIST
49199: LIST
49200: PUSH
49201: LD_INT 3
49203: NEG
49204: PUSH
49205: LD_INT 3
49207: NEG
49208: PUSH
49209: EMPTY
49210: LIST
49211: LIST
49212: PUSH
49213: LD_INT 4
49215: NEG
49216: PUSH
49217: LD_INT 3
49219: NEG
49220: PUSH
49221: EMPTY
49222: LIST
49223: LIST
49224: PUSH
49225: LD_INT 5
49227: NEG
49228: PUSH
49229: LD_INT 4
49231: NEG
49232: PUSH
49233: EMPTY
49234: LIST
49235: LIST
49236: PUSH
49237: LD_INT 5
49239: NEG
49240: PUSH
49241: LD_INT 5
49243: NEG
49244: PUSH
49245: EMPTY
49246: LIST
49247: LIST
49248: PUSH
49249: LD_INT 3
49251: NEG
49252: PUSH
49253: LD_INT 5
49255: NEG
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: PUSH
49261: LD_INT 5
49263: NEG
49264: PUSH
49265: LD_INT 3
49267: NEG
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: PUSH
49273: LD_INT 0
49275: PUSH
49276: LD_INT 3
49278: NEG
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: LD_INT 0
49286: PUSH
49287: LD_INT 4
49289: NEG
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: LD_INT 1
49297: PUSH
49298: LD_INT 3
49300: NEG
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: PUSH
49306: LD_INT 1
49308: PUSH
49309: LD_INT 2
49311: NEG
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PUSH
49317: LD_INT 0
49319: PUSH
49320: LD_INT 2
49322: NEG
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PUSH
49328: LD_INT 1
49330: NEG
49331: PUSH
49332: LD_INT 3
49334: NEG
49335: PUSH
49336: EMPTY
49337: LIST
49338: LIST
49339: PUSH
49340: LD_INT 1
49342: NEG
49343: PUSH
49344: LD_INT 4
49346: NEG
49347: PUSH
49348: EMPTY
49349: LIST
49350: LIST
49351: PUSH
49352: LD_INT 2
49354: PUSH
49355: LD_INT 2
49357: NEG
49358: PUSH
49359: EMPTY
49360: LIST
49361: LIST
49362: PUSH
49363: LD_INT 2
49365: NEG
49366: PUSH
49367: LD_INT 4
49369: NEG
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: PUSH
49375: LD_INT 4
49377: PUSH
49378: LD_INT 0
49380: PUSH
49381: EMPTY
49382: LIST
49383: LIST
49384: PUSH
49385: LD_INT 4
49387: PUSH
49388: LD_INT 1
49390: NEG
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: PUSH
49396: LD_INT 5
49398: PUSH
49399: LD_INT 0
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: PUSH
49406: LD_INT 5
49408: PUSH
49409: LD_INT 1
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: PUSH
49416: LD_INT 4
49418: PUSH
49419: LD_INT 1
49421: PUSH
49422: EMPTY
49423: LIST
49424: LIST
49425: PUSH
49426: LD_INT 3
49428: PUSH
49429: LD_INT 0
49431: PUSH
49432: EMPTY
49433: LIST
49434: LIST
49435: PUSH
49436: LD_INT 3
49438: PUSH
49439: LD_INT 1
49441: NEG
49442: PUSH
49443: EMPTY
49444: LIST
49445: LIST
49446: PUSH
49447: LD_INT 3
49449: PUSH
49450: LD_INT 2
49452: NEG
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: PUSH
49458: LD_INT 5
49460: PUSH
49461: LD_INT 2
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: LD_INT 3
49470: PUSH
49471: LD_INT 3
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: PUSH
49478: LD_INT 3
49480: PUSH
49481: LD_INT 2
49483: PUSH
49484: EMPTY
49485: LIST
49486: LIST
49487: PUSH
49488: LD_INT 4
49490: PUSH
49491: LD_INT 3
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: PUSH
49498: LD_INT 4
49500: PUSH
49501: LD_INT 4
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: PUSH
49508: LD_INT 3
49510: PUSH
49511: LD_INT 4
49513: PUSH
49514: EMPTY
49515: LIST
49516: LIST
49517: PUSH
49518: LD_INT 2
49520: PUSH
49521: LD_INT 3
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: PUSH
49528: LD_INT 2
49530: PUSH
49531: LD_INT 2
49533: PUSH
49534: EMPTY
49535: LIST
49536: LIST
49537: PUSH
49538: LD_INT 4
49540: PUSH
49541: LD_INT 2
49543: PUSH
49544: EMPTY
49545: LIST
49546: LIST
49547: PUSH
49548: LD_INT 2
49550: PUSH
49551: LD_INT 4
49553: PUSH
49554: EMPTY
49555: LIST
49556: LIST
49557: PUSH
49558: LD_INT 0
49560: PUSH
49561: LD_INT 4
49563: PUSH
49564: EMPTY
49565: LIST
49566: LIST
49567: PUSH
49568: LD_INT 0
49570: PUSH
49571: LD_INT 3
49573: PUSH
49574: EMPTY
49575: LIST
49576: LIST
49577: PUSH
49578: LD_INT 1
49580: PUSH
49581: LD_INT 4
49583: PUSH
49584: EMPTY
49585: LIST
49586: LIST
49587: PUSH
49588: LD_INT 1
49590: PUSH
49591: LD_INT 5
49593: PUSH
49594: EMPTY
49595: LIST
49596: LIST
49597: PUSH
49598: LD_INT 0
49600: PUSH
49601: LD_INT 5
49603: PUSH
49604: EMPTY
49605: LIST
49606: LIST
49607: PUSH
49608: LD_INT 1
49610: NEG
49611: PUSH
49612: LD_INT 4
49614: PUSH
49615: EMPTY
49616: LIST
49617: LIST
49618: PUSH
49619: LD_INT 1
49621: NEG
49622: PUSH
49623: LD_INT 3
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: LD_INT 2
49632: PUSH
49633: LD_INT 5
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: PUSH
49640: LD_INT 2
49642: NEG
49643: PUSH
49644: LD_INT 3
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: EMPTY
49652: LIST
49653: LIST
49654: LIST
49655: LIST
49656: LIST
49657: LIST
49658: LIST
49659: LIST
49660: LIST
49661: LIST
49662: LIST
49663: LIST
49664: LIST
49665: LIST
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: LIST
49676: LIST
49677: LIST
49678: LIST
49679: LIST
49680: LIST
49681: LIST
49682: LIST
49683: LIST
49684: LIST
49685: LIST
49686: LIST
49687: LIST
49688: LIST
49689: LIST
49690: LIST
49691: LIST
49692: LIST
49693: LIST
49694: LIST
49695: LIST
49696: LIST
49697: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
49698: LD_ADDR_VAR 0 34
49702: PUSH
49703: LD_INT 0
49705: PUSH
49706: LD_INT 4
49708: NEG
49709: PUSH
49710: EMPTY
49711: LIST
49712: LIST
49713: PUSH
49714: LD_INT 0
49716: PUSH
49717: LD_INT 5
49719: NEG
49720: PUSH
49721: EMPTY
49722: LIST
49723: LIST
49724: PUSH
49725: LD_INT 1
49727: PUSH
49728: LD_INT 4
49730: NEG
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: PUSH
49736: LD_INT 1
49738: PUSH
49739: LD_INT 3
49741: NEG
49742: PUSH
49743: EMPTY
49744: LIST
49745: LIST
49746: PUSH
49747: LD_INT 0
49749: PUSH
49750: LD_INT 3
49752: NEG
49753: PUSH
49754: EMPTY
49755: LIST
49756: LIST
49757: PUSH
49758: LD_INT 1
49760: NEG
49761: PUSH
49762: LD_INT 4
49764: NEG
49765: PUSH
49766: EMPTY
49767: LIST
49768: LIST
49769: PUSH
49770: LD_INT 1
49772: NEG
49773: PUSH
49774: LD_INT 5
49776: NEG
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: PUSH
49782: LD_INT 2
49784: PUSH
49785: LD_INT 3
49787: NEG
49788: PUSH
49789: EMPTY
49790: LIST
49791: LIST
49792: PUSH
49793: LD_INT 2
49795: NEG
49796: PUSH
49797: LD_INT 5
49799: NEG
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: PUSH
49805: LD_INT 3
49807: PUSH
49808: LD_INT 0
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: PUSH
49815: LD_INT 3
49817: PUSH
49818: LD_INT 1
49820: NEG
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: PUSH
49826: LD_INT 4
49828: PUSH
49829: LD_INT 0
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: PUSH
49836: LD_INT 4
49838: PUSH
49839: LD_INT 1
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: PUSH
49846: LD_INT 3
49848: PUSH
49849: LD_INT 1
49851: PUSH
49852: EMPTY
49853: LIST
49854: LIST
49855: PUSH
49856: LD_INT 2
49858: PUSH
49859: LD_INT 0
49861: PUSH
49862: EMPTY
49863: LIST
49864: LIST
49865: PUSH
49866: LD_INT 2
49868: PUSH
49869: LD_INT 1
49871: NEG
49872: PUSH
49873: EMPTY
49874: LIST
49875: LIST
49876: PUSH
49877: LD_INT 2
49879: PUSH
49880: LD_INT 2
49882: NEG
49883: PUSH
49884: EMPTY
49885: LIST
49886: LIST
49887: PUSH
49888: LD_INT 4
49890: PUSH
49891: LD_INT 2
49893: PUSH
49894: EMPTY
49895: LIST
49896: LIST
49897: PUSH
49898: LD_INT 4
49900: PUSH
49901: LD_INT 4
49903: PUSH
49904: EMPTY
49905: LIST
49906: LIST
49907: PUSH
49908: LD_INT 4
49910: PUSH
49911: LD_INT 3
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: PUSH
49918: LD_INT 5
49920: PUSH
49921: LD_INT 4
49923: PUSH
49924: EMPTY
49925: LIST
49926: LIST
49927: PUSH
49928: LD_INT 5
49930: PUSH
49931: LD_INT 5
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: PUSH
49938: LD_INT 4
49940: PUSH
49941: LD_INT 5
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: PUSH
49948: LD_INT 3
49950: PUSH
49951: LD_INT 4
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: PUSH
49958: LD_INT 3
49960: PUSH
49961: LD_INT 3
49963: PUSH
49964: EMPTY
49965: LIST
49966: LIST
49967: PUSH
49968: LD_INT 5
49970: PUSH
49971: LD_INT 3
49973: PUSH
49974: EMPTY
49975: LIST
49976: LIST
49977: PUSH
49978: LD_INT 3
49980: PUSH
49981: LD_INT 5
49983: PUSH
49984: EMPTY
49985: LIST
49986: LIST
49987: PUSH
49988: LD_INT 0
49990: PUSH
49991: LD_INT 3
49993: PUSH
49994: EMPTY
49995: LIST
49996: LIST
49997: PUSH
49998: LD_INT 0
50000: PUSH
50001: LD_INT 2
50003: PUSH
50004: EMPTY
50005: LIST
50006: LIST
50007: PUSH
50008: LD_INT 1
50010: PUSH
50011: LD_INT 3
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: PUSH
50018: LD_INT 1
50020: PUSH
50021: LD_INT 4
50023: PUSH
50024: EMPTY
50025: LIST
50026: LIST
50027: PUSH
50028: LD_INT 0
50030: PUSH
50031: LD_INT 4
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: PUSH
50038: LD_INT 1
50040: NEG
50041: PUSH
50042: LD_INT 3
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: PUSH
50049: LD_INT 1
50051: NEG
50052: PUSH
50053: LD_INT 2
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 2
50062: PUSH
50063: LD_INT 4
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: LD_INT 2
50072: NEG
50073: PUSH
50074: LD_INT 2
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: PUSH
50081: LD_INT 4
50083: NEG
50084: PUSH
50085: LD_INT 0
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: PUSH
50092: LD_INT 4
50094: NEG
50095: PUSH
50096: LD_INT 1
50098: NEG
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: PUSH
50104: LD_INT 3
50106: NEG
50107: PUSH
50108: LD_INT 0
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: PUSH
50115: LD_INT 3
50117: NEG
50118: PUSH
50119: LD_INT 1
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: PUSH
50126: LD_INT 4
50128: NEG
50129: PUSH
50130: LD_INT 1
50132: PUSH
50133: EMPTY
50134: LIST
50135: LIST
50136: PUSH
50137: LD_INT 5
50139: NEG
50140: PUSH
50141: LD_INT 0
50143: PUSH
50144: EMPTY
50145: LIST
50146: LIST
50147: PUSH
50148: LD_INT 5
50150: NEG
50151: PUSH
50152: LD_INT 1
50154: NEG
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: LD_INT 5
50162: NEG
50163: PUSH
50164: LD_INT 2
50166: NEG
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: LD_INT 3
50174: NEG
50175: PUSH
50176: LD_INT 2
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: LIST
50187: LIST
50188: LIST
50189: LIST
50190: LIST
50191: LIST
50192: LIST
50193: LIST
50194: LIST
50195: LIST
50196: LIST
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: LIST
50209: LIST
50210: LIST
50211: LIST
50212: LIST
50213: LIST
50214: LIST
50215: LIST
50216: LIST
50217: LIST
50218: LIST
50219: LIST
50220: LIST
50221: LIST
50222: LIST
50223: LIST
50224: LIST
50225: LIST
50226: LIST
50227: LIST
50228: LIST
50229: ST_TO_ADDR
// end ; end ;
50230: GO 50233
50232: POP
// case btype of b_depot , b_warehouse :
50233: LD_VAR 0 1
50237: PUSH
50238: LD_INT 0
50240: DOUBLE
50241: EQUAL
50242: IFTRUE 50252
50244: LD_INT 1
50246: DOUBLE
50247: EQUAL
50248: IFTRUE 50252
50250: GO 50453
50252: POP
// case nation of nation_american :
50253: LD_VAR 0 5
50257: PUSH
50258: LD_INT 1
50260: DOUBLE
50261: EQUAL
50262: IFTRUE 50266
50264: GO 50322
50266: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
50267: LD_ADDR_VAR 0 9
50271: PUSH
50272: LD_VAR 0 11
50276: PUSH
50277: LD_VAR 0 12
50281: PUSH
50282: LD_VAR 0 13
50286: PUSH
50287: LD_VAR 0 14
50291: PUSH
50292: LD_VAR 0 15
50296: PUSH
50297: LD_VAR 0 16
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: LIST
50306: LIST
50307: LIST
50308: LIST
50309: PUSH
50310: LD_VAR 0 4
50314: PUSH
50315: LD_INT 1
50317: PLUS
50318: ARRAY
50319: ST_TO_ADDR
50320: GO 50451
50322: LD_INT 2
50324: DOUBLE
50325: EQUAL
50326: IFTRUE 50330
50328: GO 50386
50330: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
50331: LD_ADDR_VAR 0 9
50335: PUSH
50336: LD_VAR 0 17
50340: PUSH
50341: LD_VAR 0 18
50345: PUSH
50346: LD_VAR 0 19
50350: PUSH
50351: LD_VAR 0 20
50355: PUSH
50356: LD_VAR 0 21
50360: PUSH
50361: LD_VAR 0 22
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: LIST
50370: LIST
50371: LIST
50372: LIST
50373: PUSH
50374: LD_VAR 0 4
50378: PUSH
50379: LD_INT 1
50381: PLUS
50382: ARRAY
50383: ST_TO_ADDR
50384: GO 50451
50386: LD_INT 3
50388: DOUBLE
50389: EQUAL
50390: IFTRUE 50394
50392: GO 50450
50394: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
50395: LD_ADDR_VAR 0 9
50399: PUSH
50400: LD_VAR 0 23
50404: PUSH
50405: LD_VAR 0 24
50409: PUSH
50410: LD_VAR 0 25
50414: PUSH
50415: LD_VAR 0 26
50419: PUSH
50420: LD_VAR 0 27
50424: PUSH
50425: LD_VAR 0 28
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: LIST
50434: LIST
50435: LIST
50436: LIST
50437: PUSH
50438: LD_VAR 0 4
50442: PUSH
50443: LD_INT 1
50445: PLUS
50446: ARRAY
50447: ST_TO_ADDR
50448: GO 50451
50450: POP
50451: GO 51006
50453: LD_INT 2
50455: DOUBLE
50456: EQUAL
50457: IFTRUE 50467
50459: LD_INT 3
50461: DOUBLE
50462: EQUAL
50463: IFTRUE 50467
50465: GO 50523
50467: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
50468: LD_ADDR_VAR 0 9
50472: PUSH
50473: LD_VAR 0 29
50477: PUSH
50478: LD_VAR 0 30
50482: PUSH
50483: LD_VAR 0 31
50487: PUSH
50488: LD_VAR 0 32
50492: PUSH
50493: LD_VAR 0 33
50497: PUSH
50498: LD_VAR 0 34
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: LIST
50507: LIST
50508: LIST
50509: LIST
50510: PUSH
50511: LD_VAR 0 4
50515: PUSH
50516: LD_INT 1
50518: PLUS
50519: ARRAY
50520: ST_TO_ADDR
50521: GO 51006
50523: LD_INT 16
50525: DOUBLE
50526: EQUAL
50527: IFTRUE 50585
50529: LD_INT 17
50531: DOUBLE
50532: EQUAL
50533: IFTRUE 50585
50535: LD_INT 18
50537: DOUBLE
50538: EQUAL
50539: IFTRUE 50585
50541: LD_INT 19
50543: DOUBLE
50544: EQUAL
50545: IFTRUE 50585
50547: LD_INT 22
50549: DOUBLE
50550: EQUAL
50551: IFTRUE 50585
50553: LD_INT 20
50555: DOUBLE
50556: EQUAL
50557: IFTRUE 50585
50559: LD_INT 21
50561: DOUBLE
50562: EQUAL
50563: IFTRUE 50585
50565: LD_INT 23
50567: DOUBLE
50568: EQUAL
50569: IFTRUE 50585
50571: LD_INT 24
50573: DOUBLE
50574: EQUAL
50575: IFTRUE 50585
50577: LD_INT 25
50579: DOUBLE
50580: EQUAL
50581: IFTRUE 50585
50583: GO 50641
50585: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
50586: LD_ADDR_VAR 0 9
50590: PUSH
50591: LD_VAR 0 35
50595: PUSH
50596: LD_VAR 0 36
50600: PUSH
50601: LD_VAR 0 37
50605: PUSH
50606: LD_VAR 0 38
50610: PUSH
50611: LD_VAR 0 39
50615: PUSH
50616: LD_VAR 0 40
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: LIST
50625: LIST
50626: LIST
50627: LIST
50628: PUSH
50629: LD_VAR 0 4
50633: PUSH
50634: LD_INT 1
50636: PLUS
50637: ARRAY
50638: ST_TO_ADDR
50639: GO 51006
50641: LD_INT 6
50643: DOUBLE
50644: EQUAL
50645: IFTRUE 50697
50647: LD_INT 7
50649: DOUBLE
50650: EQUAL
50651: IFTRUE 50697
50653: LD_INT 8
50655: DOUBLE
50656: EQUAL
50657: IFTRUE 50697
50659: LD_INT 13
50661: DOUBLE
50662: EQUAL
50663: IFTRUE 50697
50665: LD_INT 12
50667: DOUBLE
50668: EQUAL
50669: IFTRUE 50697
50671: LD_INT 15
50673: DOUBLE
50674: EQUAL
50675: IFTRUE 50697
50677: LD_INT 11
50679: DOUBLE
50680: EQUAL
50681: IFTRUE 50697
50683: LD_INT 14
50685: DOUBLE
50686: EQUAL
50687: IFTRUE 50697
50689: LD_INT 10
50691: DOUBLE
50692: EQUAL
50693: IFTRUE 50697
50695: GO 50753
50697: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
50698: LD_ADDR_VAR 0 9
50702: PUSH
50703: LD_VAR 0 41
50707: PUSH
50708: LD_VAR 0 42
50712: PUSH
50713: LD_VAR 0 43
50717: PUSH
50718: LD_VAR 0 44
50722: PUSH
50723: LD_VAR 0 45
50727: PUSH
50728: LD_VAR 0 46
50732: PUSH
50733: EMPTY
50734: LIST
50735: LIST
50736: LIST
50737: LIST
50738: LIST
50739: LIST
50740: PUSH
50741: LD_VAR 0 4
50745: PUSH
50746: LD_INT 1
50748: PLUS
50749: ARRAY
50750: ST_TO_ADDR
50751: GO 51006
50753: LD_INT 36
50755: DOUBLE
50756: EQUAL
50757: IFTRUE 50761
50759: GO 50817
50761: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
50762: LD_ADDR_VAR 0 9
50766: PUSH
50767: LD_VAR 0 47
50771: PUSH
50772: LD_VAR 0 48
50776: PUSH
50777: LD_VAR 0 49
50781: PUSH
50782: LD_VAR 0 50
50786: PUSH
50787: LD_VAR 0 51
50791: PUSH
50792: LD_VAR 0 52
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: LIST
50801: LIST
50802: LIST
50803: LIST
50804: PUSH
50805: LD_VAR 0 4
50809: PUSH
50810: LD_INT 1
50812: PLUS
50813: ARRAY
50814: ST_TO_ADDR
50815: GO 51006
50817: LD_INT 4
50819: DOUBLE
50820: EQUAL
50821: IFTRUE 50843
50823: LD_INT 5
50825: DOUBLE
50826: EQUAL
50827: IFTRUE 50843
50829: LD_INT 34
50831: DOUBLE
50832: EQUAL
50833: IFTRUE 50843
50835: LD_INT 37
50837: DOUBLE
50838: EQUAL
50839: IFTRUE 50843
50841: GO 50899
50843: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
50844: LD_ADDR_VAR 0 9
50848: PUSH
50849: LD_VAR 0 53
50853: PUSH
50854: LD_VAR 0 54
50858: PUSH
50859: LD_VAR 0 55
50863: PUSH
50864: LD_VAR 0 56
50868: PUSH
50869: LD_VAR 0 57
50873: PUSH
50874: LD_VAR 0 58
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: LIST
50883: LIST
50884: LIST
50885: LIST
50886: PUSH
50887: LD_VAR 0 4
50891: PUSH
50892: LD_INT 1
50894: PLUS
50895: ARRAY
50896: ST_TO_ADDR
50897: GO 51006
50899: LD_INT 31
50901: DOUBLE
50902: EQUAL
50903: IFTRUE 50949
50905: LD_INT 32
50907: DOUBLE
50908: EQUAL
50909: IFTRUE 50949
50911: LD_INT 33
50913: DOUBLE
50914: EQUAL
50915: IFTRUE 50949
50917: LD_INT 27
50919: DOUBLE
50920: EQUAL
50921: IFTRUE 50949
50923: LD_INT 26
50925: DOUBLE
50926: EQUAL
50927: IFTRUE 50949
50929: LD_INT 28
50931: DOUBLE
50932: EQUAL
50933: IFTRUE 50949
50935: LD_INT 29
50937: DOUBLE
50938: EQUAL
50939: IFTRUE 50949
50941: LD_INT 30
50943: DOUBLE
50944: EQUAL
50945: IFTRUE 50949
50947: GO 51005
50949: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
50950: LD_ADDR_VAR 0 9
50954: PUSH
50955: LD_VAR 0 59
50959: PUSH
50960: LD_VAR 0 60
50964: PUSH
50965: LD_VAR 0 61
50969: PUSH
50970: LD_VAR 0 62
50974: PUSH
50975: LD_VAR 0 63
50979: PUSH
50980: LD_VAR 0 64
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: LIST
50989: LIST
50990: LIST
50991: LIST
50992: PUSH
50993: LD_VAR 0 4
50997: PUSH
50998: LD_INT 1
51000: PLUS
51001: ARRAY
51002: ST_TO_ADDR
51003: GO 51006
51005: POP
// temp_list2 = [ ] ;
51006: LD_ADDR_VAR 0 10
51010: PUSH
51011: EMPTY
51012: ST_TO_ADDR
// for i in temp_list do
51013: LD_ADDR_VAR 0 8
51017: PUSH
51018: LD_VAR 0 9
51022: PUSH
51023: FOR_IN
51024: IFFALSE 51076
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
51026: LD_ADDR_VAR 0 10
51030: PUSH
51031: LD_VAR 0 10
51035: PUSH
51036: LD_VAR 0 8
51040: PUSH
51041: LD_INT 1
51043: ARRAY
51044: PUSH
51045: LD_VAR 0 2
51049: PLUS
51050: PUSH
51051: LD_VAR 0 8
51055: PUSH
51056: LD_INT 2
51058: ARRAY
51059: PUSH
51060: LD_VAR 0 3
51064: PLUS
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: PUSH
51070: EMPTY
51071: LIST
51072: ADD
51073: ST_TO_ADDR
51074: GO 51023
51076: POP
51077: POP
// result = temp_list2 ;
51078: LD_ADDR_VAR 0 7
51082: PUSH
51083: LD_VAR 0 10
51087: ST_TO_ADDR
// end ;
51088: LD_VAR 0 7
51092: RET
// export function EnemyInRange ( unit , dist ) ; begin
51093: LD_INT 0
51095: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
51096: LD_ADDR_VAR 0 3
51100: PUSH
51101: LD_VAR 0 1
51105: PPUSH
51106: CALL_OW 255
51110: PPUSH
51111: LD_VAR 0 1
51115: PPUSH
51116: CALL_OW 250
51120: PPUSH
51121: LD_VAR 0 1
51125: PPUSH
51126: CALL_OW 251
51130: PPUSH
51131: LD_VAR 0 2
51135: PPUSH
51136: CALL 25197 0 4
51140: PUSH
51141: LD_INT 4
51143: ARRAY
51144: ST_TO_ADDR
// end ;
51145: LD_VAR 0 3
51149: RET
// export function PlayerSeeMe ( unit ) ; begin
51150: LD_INT 0
51152: PPUSH
// result := See ( your_side , unit ) ;
51153: LD_ADDR_VAR 0 2
51157: PUSH
51158: LD_OWVAR 2
51162: PPUSH
51163: LD_VAR 0 1
51167: PPUSH
51168: CALL_OW 292
51172: ST_TO_ADDR
// end ;
51173: LD_VAR 0 2
51177: RET
// export function ReverseDir ( unit ) ; begin
51178: LD_INT 0
51180: PPUSH
// if not unit then
51181: LD_VAR 0 1
51185: NOT
51186: IFFALSE 51190
// exit ;
51188: GO 51213
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
51190: LD_ADDR_VAR 0 2
51194: PUSH
51195: LD_VAR 0 1
51199: PPUSH
51200: CALL_OW 254
51204: PUSH
51205: LD_INT 3
51207: PLUS
51208: PUSH
51209: LD_INT 6
51211: MOD
51212: ST_TO_ADDR
// end ;
51213: LD_VAR 0 2
51217: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
51218: LD_INT 0
51220: PPUSH
51221: PPUSH
51222: PPUSH
51223: PPUSH
51224: PPUSH
// if not hexes then
51225: LD_VAR 0 2
51229: NOT
51230: IFFALSE 51234
// exit ;
51232: GO 51382
// dist := 9999 ;
51234: LD_ADDR_VAR 0 5
51238: PUSH
51239: LD_INT 9999
51241: ST_TO_ADDR
// for i = 1 to hexes do
51242: LD_ADDR_VAR 0 4
51246: PUSH
51247: DOUBLE
51248: LD_INT 1
51250: DEC
51251: ST_TO_ADDR
51252: LD_VAR 0 2
51256: PUSH
51257: FOR_TO
51258: IFFALSE 51370
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
51260: LD_VAR 0 1
51264: PPUSH
51265: LD_VAR 0 2
51269: PUSH
51270: LD_VAR 0 4
51274: ARRAY
51275: PUSH
51276: LD_INT 1
51278: ARRAY
51279: PPUSH
51280: LD_VAR 0 2
51284: PUSH
51285: LD_VAR 0 4
51289: ARRAY
51290: PUSH
51291: LD_INT 2
51293: ARRAY
51294: PPUSH
51295: CALL_OW 297
51299: PUSH
51300: LD_VAR 0 5
51304: LESS
51305: IFFALSE 51368
// begin hex := hexes [ i ] ;
51307: LD_ADDR_VAR 0 7
51311: PUSH
51312: LD_VAR 0 2
51316: PUSH
51317: LD_VAR 0 4
51321: ARRAY
51322: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51323: LD_ADDR_VAR 0 5
51327: PUSH
51328: LD_VAR 0 1
51332: PPUSH
51333: LD_VAR 0 2
51337: PUSH
51338: LD_VAR 0 4
51342: ARRAY
51343: PUSH
51344: LD_INT 1
51346: ARRAY
51347: PPUSH
51348: LD_VAR 0 2
51352: PUSH
51353: LD_VAR 0 4
51357: ARRAY
51358: PUSH
51359: LD_INT 2
51361: ARRAY
51362: PPUSH
51363: CALL_OW 297
51367: ST_TO_ADDR
// end ; end ;
51368: GO 51257
51370: POP
51371: POP
// result := hex ;
51372: LD_ADDR_VAR 0 3
51376: PUSH
51377: LD_VAR 0 7
51381: ST_TO_ADDR
// end ;
51382: LD_VAR 0 3
51386: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
51387: LD_INT 0
51389: PPUSH
51390: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
51391: LD_VAR 0 1
51395: NOT
51396: PUSH
51397: LD_VAR 0 1
51401: PUSH
51402: LD_INT 21
51404: PUSH
51405: LD_INT 2
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: LD_INT 23
51414: PUSH
51415: LD_INT 2
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: PUSH
51422: EMPTY
51423: LIST
51424: LIST
51425: PPUSH
51426: CALL_OW 69
51430: IN
51431: NOT
51432: OR
51433: IFFALSE 51437
// exit ;
51435: GO 51484
// for i = 1 to 3 do
51437: LD_ADDR_VAR 0 3
51441: PUSH
51442: DOUBLE
51443: LD_INT 1
51445: DEC
51446: ST_TO_ADDR
51447: LD_INT 3
51449: PUSH
51450: FOR_TO
51451: IFFALSE 51482
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
51453: LD_VAR 0 1
51457: PPUSH
51458: CALL_OW 250
51462: PPUSH
51463: LD_VAR 0 1
51467: PPUSH
51468: CALL_OW 251
51472: PPUSH
51473: LD_INT 1
51475: PPUSH
51476: CALL_OW 453
51480: GO 51450
51482: POP
51483: POP
// end ;
51484: LD_VAR 0 2
51488: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
51489: LD_INT 0
51491: PPUSH
51492: PPUSH
51493: PPUSH
51494: PPUSH
51495: PPUSH
51496: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
51497: LD_VAR 0 1
51501: NOT
51502: PUSH
51503: LD_VAR 0 2
51507: NOT
51508: OR
51509: PUSH
51510: LD_VAR 0 1
51514: PPUSH
51515: CALL_OW 314
51519: OR
51520: IFFALSE 51524
// exit ;
51522: GO 51965
// x := GetX ( enemy_unit ) ;
51524: LD_ADDR_VAR 0 7
51528: PUSH
51529: LD_VAR 0 2
51533: PPUSH
51534: CALL_OW 250
51538: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
51539: LD_ADDR_VAR 0 8
51543: PUSH
51544: LD_VAR 0 2
51548: PPUSH
51549: CALL_OW 251
51553: ST_TO_ADDR
// if not x or not y then
51554: LD_VAR 0 7
51558: NOT
51559: PUSH
51560: LD_VAR 0 8
51564: NOT
51565: OR
51566: IFFALSE 51570
// exit ;
51568: GO 51965
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
51570: LD_ADDR_VAR 0 6
51574: PUSH
51575: LD_VAR 0 7
51579: PPUSH
51580: LD_INT 0
51582: PPUSH
51583: LD_INT 4
51585: PPUSH
51586: CALL_OW 272
51590: PUSH
51591: LD_VAR 0 8
51595: PPUSH
51596: LD_INT 0
51598: PPUSH
51599: LD_INT 4
51601: PPUSH
51602: CALL_OW 273
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: LD_VAR 0 7
51615: PPUSH
51616: LD_INT 1
51618: PPUSH
51619: LD_INT 4
51621: PPUSH
51622: CALL_OW 272
51626: PUSH
51627: LD_VAR 0 8
51631: PPUSH
51632: LD_INT 1
51634: PPUSH
51635: LD_INT 4
51637: PPUSH
51638: CALL_OW 273
51642: PUSH
51643: EMPTY
51644: LIST
51645: LIST
51646: PUSH
51647: LD_VAR 0 7
51651: PPUSH
51652: LD_INT 2
51654: PPUSH
51655: LD_INT 4
51657: PPUSH
51658: CALL_OW 272
51662: PUSH
51663: LD_VAR 0 8
51667: PPUSH
51668: LD_INT 2
51670: PPUSH
51671: LD_INT 4
51673: PPUSH
51674: CALL_OW 273
51678: PUSH
51679: EMPTY
51680: LIST
51681: LIST
51682: PUSH
51683: LD_VAR 0 7
51687: PPUSH
51688: LD_INT 3
51690: PPUSH
51691: LD_INT 4
51693: PPUSH
51694: CALL_OW 272
51698: PUSH
51699: LD_VAR 0 8
51703: PPUSH
51704: LD_INT 3
51706: PPUSH
51707: LD_INT 4
51709: PPUSH
51710: CALL_OW 273
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: PUSH
51719: LD_VAR 0 7
51723: PPUSH
51724: LD_INT 4
51726: PPUSH
51727: LD_INT 4
51729: PPUSH
51730: CALL_OW 272
51734: PUSH
51735: LD_VAR 0 8
51739: PPUSH
51740: LD_INT 4
51742: PPUSH
51743: LD_INT 4
51745: PPUSH
51746: CALL_OW 273
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: PUSH
51755: LD_VAR 0 7
51759: PPUSH
51760: LD_INT 5
51762: PPUSH
51763: LD_INT 4
51765: PPUSH
51766: CALL_OW 272
51770: PUSH
51771: LD_VAR 0 8
51775: PPUSH
51776: LD_INT 5
51778: PPUSH
51779: LD_INT 4
51781: PPUSH
51782: CALL_OW 273
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: LIST
51798: ST_TO_ADDR
// for i = tmp downto 1 do
51799: LD_ADDR_VAR 0 4
51803: PUSH
51804: DOUBLE
51805: LD_VAR 0 6
51809: INC
51810: ST_TO_ADDR
51811: LD_INT 1
51813: PUSH
51814: FOR_DOWNTO
51815: IFFALSE 51916
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
51817: LD_VAR 0 6
51821: PUSH
51822: LD_VAR 0 4
51826: ARRAY
51827: PUSH
51828: LD_INT 1
51830: ARRAY
51831: PPUSH
51832: LD_VAR 0 6
51836: PUSH
51837: LD_VAR 0 4
51841: ARRAY
51842: PUSH
51843: LD_INT 2
51845: ARRAY
51846: PPUSH
51847: CALL_OW 488
51851: NOT
51852: PUSH
51853: LD_VAR 0 6
51857: PUSH
51858: LD_VAR 0 4
51862: ARRAY
51863: PUSH
51864: LD_INT 1
51866: ARRAY
51867: PPUSH
51868: LD_VAR 0 6
51872: PUSH
51873: LD_VAR 0 4
51877: ARRAY
51878: PUSH
51879: LD_INT 2
51881: ARRAY
51882: PPUSH
51883: CALL_OW 428
51887: PUSH
51888: LD_INT 0
51890: NONEQUAL
51891: OR
51892: IFFALSE 51914
// tmp := Delete ( tmp , i ) ;
51894: LD_ADDR_VAR 0 6
51898: PUSH
51899: LD_VAR 0 6
51903: PPUSH
51904: LD_VAR 0 4
51908: PPUSH
51909: CALL_OW 3
51913: ST_TO_ADDR
51914: GO 51814
51916: POP
51917: POP
// j := GetClosestHex ( unit , tmp ) ;
51918: LD_ADDR_VAR 0 5
51922: PUSH
51923: LD_VAR 0 1
51927: PPUSH
51928: LD_VAR 0 6
51932: PPUSH
51933: CALL 51218 0 2
51937: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
51938: LD_VAR 0 1
51942: PPUSH
51943: LD_VAR 0 5
51947: PUSH
51948: LD_INT 1
51950: ARRAY
51951: PPUSH
51952: LD_VAR 0 5
51956: PUSH
51957: LD_INT 2
51959: ARRAY
51960: PPUSH
51961: CALL_OW 111
// end ;
51965: LD_VAR 0 3
51969: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
51970: LD_INT 0
51972: PPUSH
51973: PPUSH
51974: PPUSH
// uc_side = 0 ;
51975: LD_ADDR_OWVAR 20
51979: PUSH
51980: LD_INT 0
51982: ST_TO_ADDR
// uc_nation = 0 ;
51983: LD_ADDR_OWVAR 21
51987: PUSH
51988: LD_INT 0
51990: ST_TO_ADDR
// InitHc ;
51991: CALL_OW 19
// InitVc ;
51995: CALL_OW 20
// if mastodonts then
51999: LD_VAR 0 6
52003: IFFALSE 52070
// for i = 1 to mastodonts do
52005: LD_ADDR_VAR 0 11
52009: PUSH
52010: DOUBLE
52011: LD_INT 1
52013: DEC
52014: ST_TO_ADDR
52015: LD_VAR 0 6
52019: PUSH
52020: FOR_TO
52021: IFFALSE 52068
// begin vc_chassis := 31 ;
52023: LD_ADDR_OWVAR 37
52027: PUSH
52028: LD_INT 31
52030: ST_TO_ADDR
// vc_control := control_rider ;
52031: LD_ADDR_OWVAR 38
52035: PUSH
52036: LD_INT 4
52038: ST_TO_ADDR
// animal := CreateVehicle ;
52039: LD_ADDR_VAR 0 12
52043: PUSH
52044: CALL_OW 45
52048: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52049: LD_VAR 0 12
52053: PPUSH
52054: LD_VAR 0 8
52058: PPUSH
52059: LD_INT 0
52061: PPUSH
52062: CALL 54139 0 3
// end ;
52066: GO 52020
52068: POP
52069: POP
// if horses then
52070: LD_VAR 0 5
52074: IFFALSE 52141
// for i = 1 to horses do
52076: LD_ADDR_VAR 0 11
52080: PUSH
52081: DOUBLE
52082: LD_INT 1
52084: DEC
52085: ST_TO_ADDR
52086: LD_VAR 0 5
52090: PUSH
52091: FOR_TO
52092: IFFALSE 52139
// begin hc_class := 21 ;
52094: LD_ADDR_OWVAR 28
52098: PUSH
52099: LD_INT 21
52101: ST_TO_ADDR
// hc_gallery :=  ;
52102: LD_ADDR_OWVAR 33
52106: PUSH
52107: LD_STRING 
52109: ST_TO_ADDR
// animal := CreateHuman ;
52110: LD_ADDR_VAR 0 12
52114: PUSH
52115: CALL_OW 44
52119: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52120: LD_VAR 0 12
52124: PPUSH
52125: LD_VAR 0 8
52129: PPUSH
52130: LD_INT 0
52132: PPUSH
52133: CALL 54139 0 3
// end ;
52137: GO 52091
52139: POP
52140: POP
// if birds then
52141: LD_VAR 0 1
52145: IFFALSE 52212
// for i = 1 to birds do
52147: LD_ADDR_VAR 0 11
52151: PUSH
52152: DOUBLE
52153: LD_INT 1
52155: DEC
52156: ST_TO_ADDR
52157: LD_VAR 0 1
52161: PUSH
52162: FOR_TO
52163: IFFALSE 52210
// begin hc_class = 18 ;
52165: LD_ADDR_OWVAR 28
52169: PUSH
52170: LD_INT 18
52172: ST_TO_ADDR
// hc_gallery =  ;
52173: LD_ADDR_OWVAR 33
52177: PUSH
52178: LD_STRING 
52180: ST_TO_ADDR
// animal := CreateHuman ;
52181: LD_ADDR_VAR 0 12
52185: PUSH
52186: CALL_OW 44
52190: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52191: LD_VAR 0 12
52195: PPUSH
52196: LD_VAR 0 8
52200: PPUSH
52201: LD_INT 0
52203: PPUSH
52204: CALL 54139 0 3
// end ;
52208: GO 52162
52210: POP
52211: POP
// if tigers then
52212: LD_VAR 0 2
52216: IFFALSE 52300
// for i = 1 to tigers do
52218: LD_ADDR_VAR 0 11
52222: PUSH
52223: DOUBLE
52224: LD_INT 1
52226: DEC
52227: ST_TO_ADDR
52228: LD_VAR 0 2
52232: PUSH
52233: FOR_TO
52234: IFFALSE 52298
// begin hc_class = class_tiger ;
52236: LD_ADDR_OWVAR 28
52240: PUSH
52241: LD_INT 14
52243: ST_TO_ADDR
// hc_gallery =  ;
52244: LD_ADDR_OWVAR 33
52248: PUSH
52249: LD_STRING 
52251: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
52252: LD_ADDR_OWVAR 35
52256: PUSH
52257: LD_INT 7
52259: NEG
52260: PPUSH
52261: LD_INT 7
52263: PPUSH
52264: CALL_OW 12
52268: ST_TO_ADDR
// animal := CreateHuman ;
52269: LD_ADDR_VAR 0 12
52273: PUSH
52274: CALL_OW 44
52278: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52279: LD_VAR 0 12
52283: PPUSH
52284: LD_VAR 0 8
52288: PPUSH
52289: LD_INT 0
52291: PPUSH
52292: CALL 54139 0 3
// end ;
52296: GO 52233
52298: POP
52299: POP
// if apemans then
52300: LD_VAR 0 3
52304: IFFALSE 52427
// for i = 1 to apemans do
52306: LD_ADDR_VAR 0 11
52310: PUSH
52311: DOUBLE
52312: LD_INT 1
52314: DEC
52315: ST_TO_ADDR
52316: LD_VAR 0 3
52320: PUSH
52321: FOR_TO
52322: IFFALSE 52425
// begin hc_class = class_apeman ;
52324: LD_ADDR_OWVAR 28
52328: PUSH
52329: LD_INT 12
52331: ST_TO_ADDR
// hc_gallery =  ;
52332: LD_ADDR_OWVAR 33
52336: PUSH
52337: LD_STRING 
52339: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
52340: LD_ADDR_OWVAR 35
52344: PUSH
52345: LD_INT 5
52347: NEG
52348: PPUSH
52349: LD_INT 5
52351: PPUSH
52352: CALL_OW 12
52356: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
52357: LD_ADDR_OWVAR 31
52361: PUSH
52362: LD_INT 1
52364: PPUSH
52365: LD_INT 3
52367: PPUSH
52368: CALL_OW 12
52372: PUSH
52373: LD_INT 1
52375: PPUSH
52376: LD_INT 3
52378: PPUSH
52379: CALL_OW 12
52383: PUSH
52384: LD_INT 0
52386: PUSH
52387: LD_INT 0
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: LIST
52394: LIST
52395: ST_TO_ADDR
// animal := CreateHuman ;
52396: LD_ADDR_VAR 0 12
52400: PUSH
52401: CALL_OW 44
52405: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52406: LD_VAR 0 12
52410: PPUSH
52411: LD_VAR 0 8
52415: PPUSH
52416: LD_INT 0
52418: PPUSH
52419: CALL 54139 0 3
// end ;
52423: GO 52321
52425: POP
52426: POP
// if enchidnas then
52427: LD_VAR 0 4
52431: IFFALSE 52498
// for i = 1 to enchidnas do
52433: LD_ADDR_VAR 0 11
52437: PUSH
52438: DOUBLE
52439: LD_INT 1
52441: DEC
52442: ST_TO_ADDR
52443: LD_VAR 0 4
52447: PUSH
52448: FOR_TO
52449: IFFALSE 52496
// begin hc_class = 13 ;
52451: LD_ADDR_OWVAR 28
52455: PUSH
52456: LD_INT 13
52458: ST_TO_ADDR
// hc_gallery =  ;
52459: LD_ADDR_OWVAR 33
52463: PUSH
52464: LD_STRING 
52466: ST_TO_ADDR
// animal := CreateHuman ;
52467: LD_ADDR_VAR 0 12
52471: PUSH
52472: CALL_OW 44
52476: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52477: LD_VAR 0 12
52481: PPUSH
52482: LD_VAR 0 8
52486: PPUSH
52487: LD_INT 0
52489: PPUSH
52490: CALL 54139 0 3
// end ;
52494: GO 52448
52496: POP
52497: POP
// if fishes then
52498: LD_VAR 0 7
52502: IFFALSE 52569
// for i = 1 to fishes do
52504: LD_ADDR_VAR 0 11
52508: PUSH
52509: DOUBLE
52510: LD_INT 1
52512: DEC
52513: ST_TO_ADDR
52514: LD_VAR 0 7
52518: PUSH
52519: FOR_TO
52520: IFFALSE 52567
// begin hc_class = 20 ;
52522: LD_ADDR_OWVAR 28
52526: PUSH
52527: LD_INT 20
52529: ST_TO_ADDR
// hc_gallery =  ;
52530: LD_ADDR_OWVAR 33
52534: PUSH
52535: LD_STRING 
52537: ST_TO_ADDR
// animal := CreateHuman ;
52538: LD_ADDR_VAR 0 12
52542: PUSH
52543: CALL_OW 44
52547: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
52548: LD_VAR 0 12
52552: PPUSH
52553: LD_VAR 0 9
52557: PPUSH
52558: LD_INT 0
52560: PPUSH
52561: CALL 54139 0 3
// end ;
52565: GO 52519
52567: POP
52568: POP
// end ;
52569: LD_VAR 0 10
52573: RET
// export function WantHeal ( sci , unit ) ; begin
52574: LD_INT 0
52576: PPUSH
// if GetTaskList ( sci ) > 0 then
52577: LD_VAR 0 1
52581: PPUSH
52582: CALL_OW 437
52586: PUSH
52587: LD_INT 0
52589: GREATER
52590: IFFALSE 52660
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
52592: LD_VAR 0 1
52596: PPUSH
52597: CALL_OW 437
52601: PUSH
52602: LD_INT 1
52604: ARRAY
52605: PUSH
52606: LD_INT 1
52608: ARRAY
52609: PUSH
52610: LD_STRING l
52612: EQUAL
52613: PUSH
52614: LD_VAR 0 1
52618: PPUSH
52619: CALL_OW 437
52623: PUSH
52624: LD_INT 1
52626: ARRAY
52627: PUSH
52628: LD_INT 4
52630: ARRAY
52631: PUSH
52632: LD_VAR 0 2
52636: EQUAL
52637: AND
52638: IFFALSE 52650
// result := true else
52640: LD_ADDR_VAR 0 3
52644: PUSH
52645: LD_INT 1
52647: ST_TO_ADDR
52648: GO 52658
// result := false ;
52650: LD_ADDR_VAR 0 3
52654: PUSH
52655: LD_INT 0
52657: ST_TO_ADDR
// end else
52658: GO 52668
// result := false ;
52660: LD_ADDR_VAR 0 3
52664: PUSH
52665: LD_INT 0
52667: ST_TO_ADDR
// end ;
52668: LD_VAR 0 3
52672: RET
// export function HealTarget ( sci ) ; begin
52673: LD_INT 0
52675: PPUSH
// if not sci then
52676: LD_VAR 0 1
52680: NOT
52681: IFFALSE 52685
// exit ;
52683: GO 52750
// result := 0 ;
52685: LD_ADDR_VAR 0 2
52689: PUSH
52690: LD_INT 0
52692: ST_TO_ADDR
// if GetTaskList ( sci ) then
52693: LD_VAR 0 1
52697: PPUSH
52698: CALL_OW 437
52702: IFFALSE 52750
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
52704: LD_VAR 0 1
52708: PPUSH
52709: CALL_OW 437
52713: PUSH
52714: LD_INT 1
52716: ARRAY
52717: PUSH
52718: LD_INT 1
52720: ARRAY
52721: PUSH
52722: LD_STRING l
52724: EQUAL
52725: IFFALSE 52750
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
52727: LD_ADDR_VAR 0 2
52731: PUSH
52732: LD_VAR 0 1
52736: PPUSH
52737: CALL_OW 437
52741: PUSH
52742: LD_INT 1
52744: ARRAY
52745: PUSH
52746: LD_INT 4
52748: ARRAY
52749: ST_TO_ADDR
// end ;
52750: LD_VAR 0 2
52754: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
52755: LD_INT 0
52757: PPUSH
52758: PPUSH
52759: PPUSH
52760: PPUSH
// if not base_units then
52761: LD_VAR 0 1
52765: NOT
52766: IFFALSE 52770
// exit ;
52768: GO 52857
// result := false ;
52770: LD_ADDR_VAR 0 2
52774: PUSH
52775: LD_INT 0
52777: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
52778: LD_ADDR_VAR 0 5
52782: PUSH
52783: LD_VAR 0 1
52787: PPUSH
52788: LD_INT 21
52790: PUSH
52791: LD_INT 3
52793: PUSH
52794: EMPTY
52795: LIST
52796: LIST
52797: PPUSH
52798: CALL_OW 72
52802: ST_TO_ADDR
// if not tmp then
52803: LD_VAR 0 5
52807: NOT
52808: IFFALSE 52812
// exit ;
52810: GO 52857
// for i in tmp do
52812: LD_ADDR_VAR 0 3
52816: PUSH
52817: LD_VAR 0 5
52821: PUSH
52822: FOR_IN
52823: IFFALSE 52855
// begin result := EnemyInRange ( i , 22 ) ;
52825: LD_ADDR_VAR 0 2
52829: PUSH
52830: LD_VAR 0 3
52834: PPUSH
52835: LD_INT 22
52837: PPUSH
52838: CALL 51093 0 2
52842: ST_TO_ADDR
// if result then
52843: LD_VAR 0 2
52847: IFFALSE 52853
// exit ;
52849: POP
52850: POP
52851: GO 52857
// end ;
52853: GO 52822
52855: POP
52856: POP
// end ;
52857: LD_VAR 0 2
52861: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
52862: LD_INT 0
52864: PPUSH
52865: PPUSH
// if not units then
52866: LD_VAR 0 1
52870: NOT
52871: IFFALSE 52875
// exit ;
52873: GO 52945
// result := [ ] ;
52875: LD_ADDR_VAR 0 3
52879: PUSH
52880: EMPTY
52881: ST_TO_ADDR
// for i in units do
52882: LD_ADDR_VAR 0 4
52886: PUSH
52887: LD_VAR 0 1
52891: PUSH
52892: FOR_IN
52893: IFFALSE 52943
// if GetTag ( i ) = tag then
52895: LD_VAR 0 4
52899: PPUSH
52900: CALL_OW 110
52904: PUSH
52905: LD_VAR 0 2
52909: EQUAL
52910: IFFALSE 52941
// result := Insert ( result , result + 1 , i ) ;
52912: LD_ADDR_VAR 0 3
52916: PUSH
52917: LD_VAR 0 3
52921: PPUSH
52922: LD_VAR 0 3
52926: PUSH
52927: LD_INT 1
52929: PLUS
52930: PPUSH
52931: LD_VAR 0 4
52935: PPUSH
52936: CALL_OW 2
52940: ST_TO_ADDR
52941: GO 52892
52943: POP
52944: POP
// end ;
52945: LD_VAR 0 3
52949: RET
// export function IsDriver ( un ) ; begin
52950: LD_INT 0
52952: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
52953: LD_ADDR_VAR 0 2
52957: PUSH
52958: LD_VAR 0 1
52962: PUSH
52963: LD_INT 55
52965: PUSH
52966: EMPTY
52967: LIST
52968: PPUSH
52969: CALL_OW 69
52973: IN
52974: ST_TO_ADDR
// end ;
52975: LD_VAR 0 2
52979: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
52980: LD_INT 0
52982: PPUSH
52983: PPUSH
// list := [ ] ;
52984: LD_ADDR_VAR 0 5
52988: PUSH
52989: EMPTY
52990: ST_TO_ADDR
// case d of 0 :
52991: LD_VAR 0 3
52995: PUSH
52996: LD_INT 0
52998: DOUBLE
52999: EQUAL
53000: IFTRUE 53004
53002: GO 53137
53004: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
53005: LD_ADDR_VAR 0 5
53009: PUSH
53010: LD_VAR 0 1
53014: PUSH
53015: LD_INT 4
53017: MINUS
53018: PUSH
53019: LD_VAR 0 2
53023: PUSH
53024: LD_INT 4
53026: MINUS
53027: PUSH
53028: LD_INT 2
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: LIST
53035: PUSH
53036: LD_VAR 0 1
53040: PUSH
53041: LD_INT 3
53043: MINUS
53044: PUSH
53045: LD_VAR 0 2
53049: PUSH
53050: LD_INT 1
53052: PUSH
53053: EMPTY
53054: LIST
53055: LIST
53056: LIST
53057: PUSH
53058: LD_VAR 0 1
53062: PUSH
53063: LD_INT 4
53065: PLUS
53066: PUSH
53067: LD_VAR 0 2
53071: PUSH
53072: LD_INT 4
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: LIST
53079: PUSH
53080: LD_VAR 0 1
53084: PUSH
53085: LD_INT 3
53087: PLUS
53088: PUSH
53089: LD_VAR 0 2
53093: PUSH
53094: LD_INT 3
53096: PLUS
53097: PUSH
53098: LD_INT 5
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: LIST
53105: PUSH
53106: LD_VAR 0 1
53110: PUSH
53111: LD_VAR 0 2
53115: PUSH
53116: LD_INT 4
53118: PLUS
53119: PUSH
53120: LD_INT 0
53122: PUSH
53123: EMPTY
53124: LIST
53125: LIST
53126: LIST
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: LIST
53132: LIST
53133: LIST
53134: ST_TO_ADDR
// end ; 1 :
53135: GO 53835
53137: LD_INT 1
53139: DOUBLE
53140: EQUAL
53141: IFTRUE 53145
53143: GO 53278
53145: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
53146: LD_ADDR_VAR 0 5
53150: PUSH
53151: LD_VAR 0 1
53155: PUSH
53156: LD_VAR 0 2
53160: PUSH
53161: LD_INT 4
53163: MINUS
53164: PUSH
53165: LD_INT 3
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: LIST
53172: PUSH
53173: LD_VAR 0 1
53177: PUSH
53178: LD_INT 3
53180: MINUS
53181: PUSH
53182: LD_VAR 0 2
53186: PUSH
53187: LD_INT 3
53189: MINUS
53190: PUSH
53191: LD_INT 2
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: LIST
53198: PUSH
53199: LD_VAR 0 1
53203: PUSH
53204: LD_INT 4
53206: MINUS
53207: PUSH
53208: LD_VAR 0 2
53212: PUSH
53213: LD_INT 1
53215: PUSH
53216: EMPTY
53217: LIST
53218: LIST
53219: LIST
53220: PUSH
53221: LD_VAR 0 1
53225: PUSH
53226: LD_VAR 0 2
53230: PUSH
53231: LD_INT 3
53233: PLUS
53234: PUSH
53235: LD_INT 0
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: LIST
53242: PUSH
53243: LD_VAR 0 1
53247: PUSH
53248: LD_INT 4
53250: PLUS
53251: PUSH
53252: LD_VAR 0 2
53256: PUSH
53257: LD_INT 4
53259: PLUS
53260: PUSH
53261: LD_INT 5
53263: PUSH
53264: EMPTY
53265: LIST
53266: LIST
53267: LIST
53268: PUSH
53269: EMPTY
53270: LIST
53271: LIST
53272: LIST
53273: LIST
53274: LIST
53275: ST_TO_ADDR
// end ; 2 :
53276: GO 53835
53278: LD_INT 2
53280: DOUBLE
53281: EQUAL
53282: IFTRUE 53286
53284: GO 53415
53286: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
53287: LD_ADDR_VAR 0 5
53291: PUSH
53292: LD_VAR 0 1
53296: PUSH
53297: LD_VAR 0 2
53301: PUSH
53302: LD_INT 3
53304: MINUS
53305: PUSH
53306: LD_INT 3
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: LIST
53313: PUSH
53314: LD_VAR 0 1
53318: PUSH
53319: LD_INT 4
53321: PLUS
53322: PUSH
53323: LD_VAR 0 2
53327: PUSH
53328: LD_INT 4
53330: PUSH
53331: EMPTY
53332: LIST
53333: LIST
53334: LIST
53335: PUSH
53336: LD_VAR 0 1
53340: PUSH
53341: LD_VAR 0 2
53345: PUSH
53346: LD_INT 4
53348: PLUS
53349: PUSH
53350: LD_INT 0
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: LIST
53357: PUSH
53358: LD_VAR 0 1
53362: PUSH
53363: LD_INT 3
53365: MINUS
53366: PUSH
53367: LD_VAR 0 2
53371: PUSH
53372: LD_INT 1
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: LIST
53379: PUSH
53380: LD_VAR 0 1
53384: PUSH
53385: LD_INT 4
53387: MINUS
53388: PUSH
53389: LD_VAR 0 2
53393: PUSH
53394: LD_INT 4
53396: MINUS
53397: PUSH
53398: LD_INT 2
53400: PUSH
53401: EMPTY
53402: LIST
53403: LIST
53404: LIST
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: LIST
53410: LIST
53411: LIST
53412: ST_TO_ADDR
// end ; 3 :
53413: GO 53835
53415: LD_INT 3
53417: DOUBLE
53418: EQUAL
53419: IFTRUE 53423
53421: GO 53556
53423: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
53424: LD_ADDR_VAR 0 5
53428: PUSH
53429: LD_VAR 0 1
53433: PUSH
53434: LD_INT 3
53436: PLUS
53437: PUSH
53438: LD_VAR 0 2
53442: PUSH
53443: LD_INT 4
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: LIST
53450: PUSH
53451: LD_VAR 0 1
53455: PUSH
53456: LD_INT 4
53458: PLUS
53459: PUSH
53460: LD_VAR 0 2
53464: PUSH
53465: LD_INT 4
53467: PLUS
53468: PUSH
53469: LD_INT 5
53471: PUSH
53472: EMPTY
53473: LIST
53474: LIST
53475: LIST
53476: PUSH
53477: LD_VAR 0 1
53481: PUSH
53482: LD_INT 4
53484: MINUS
53485: PUSH
53486: LD_VAR 0 2
53490: PUSH
53491: LD_INT 1
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: LIST
53498: PUSH
53499: LD_VAR 0 1
53503: PUSH
53504: LD_VAR 0 2
53508: PUSH
53509: LD_INT 4
53511: MINUS
53512: PUSH
53513: LD_INT 3
53515: PUSH
53516: EMPTY
53517: LIST
53518: LIST
53519: LIST
53520: PUSH
53521: LD_VAR 0 1
53525: PUSH
53526: LD_INT 3
53528: MINUS
53529: PUSH
53530: LD_VAR 0 2
53534: PUSH
53535: LD_INT 3
53537: MINUS
53538: PUSH
53539: LD_INT 2
53541: PUSH
53542: EMPTY
53543: LIST
53544: LIST
53545: LIST
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: LIST
53551: LIST
53552: LIST
53553: ST_TO_ADDR
// end ; 4 :
53554: GO 53835
53556: LD_INT 4
53558: DOUBLE
53559: EQUAL
53560: IFTRUE 53564
53562: GO 53697
53564: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
53565: LD_ADDR_VAR 0 5
53569: PUSH
53570: LD_VAR 0 1
53574: PUSH
53575: LD_VAR 0 2
53579: PUSH
53580: LD_INT 4
53582: PLUS
53583: PUSH
53584: LD_INT 0
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: LIST
53591: PUSH
53592: LD_VAR 0 1
53596: PUSH
53597: LD_INT 3
53599: PLUS
53600: PUSH
53601: LD_VAR 0 2
53605: PUSH
53606: LD_INT 3
53608: PLUS
53609: PUSH
53610: LD_INT 5
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: LIST
53617: PUSH
53618: LD_VAR 0 1
53622: PUSH
53623: LD_INT 4
53625: PLUS
53626: PUSH
53627: LD_VAR 0 2
53631: PUSH
53632: LD_INT 4
53634: PUSH
53635: EMPTY
53636: LIST
53637: LIST
53638: LIST
53639: PUSH
53640: LD_VAR 0 1
53644: PUSH
53645: LD_VAR 0 2
53649: PUSH
53650: LD_INT 3
53652: MINUS
53653: PUSH
53654: LD_INT 3
53656: PUSH
53657: EMPTY
53658: LIST
53659: LIST
53660: LIST
53661: PUSH
53662: LD_VAR 0 1
53666: PUSH
53667: LD_INT 4
53669: MINUS
53670: PUSH
53671: LD_VAR 0 2
53675: PUSH
53676: LD_INT 4
53678: MINUS
53679: PUSH
53680: LD_INT 2
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: LIST
53687: PUSH
53688: EMPTY
53689: LIST
53690: LIST
53691: LIST
53692: LIST
53693: LIST
53694: ST_TO_ADDR
// end ; 5 :
53695: GO 53835
53697: LD_INT 5
53699: DOUBLE
53700: EQUAL
53701: IFTRUE 53705
53703: GO 53834
53705: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
53706: LD_ADDR_VAR 0 5
53710: PUSH
53711: LD_VAR 0 1
53715: PUSH
53716: LD_INT 4
53718: MINUS
53719: PUSH
53720: LD_VAR 0 2
53724: PUSH
53725: LD_INT 1
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: LIST
53732: PUSH
53733: LD_VAR 0 1
53737: PUSH
53738: LD_VAR 0 2
53742: PUSH
53743: LD_INT 4
53745: MINUS
53746: PUSH
53747: LD_INT 3
53749: PUSH
53750: EMPTY
53751: LIST
53752: LIST
53753: LIST
53754: PUSH
53755: LD_VAR 0 1
53759: PUSH
53760: LD_INT 4
53762: PLUS
53763: PUSH
53764: LD_VAR 0 2
53768: PUSH
53769: LD_INT 4
53771: PLUS
53772: PUSH
53773: LD_INT 5
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: LIST
53780: PUSH
53781: LD_VAR 0 1
53785: PUSH
53786: LD_INT 3
53788: PLUS
53789: PUSH
53790: LD_VAR 0 2
53794: PUSH
53795: LD_INT 4
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: LIST
53802: PUSH
53803: LD_VAR 0 1
53807: PUSH
53808: LD_VAR 0 2
53812: PUSH
53813: LD_INT 3
53815: PLUS
53816: PUSH
53817: LD_INT 0
53819: PUSH
53820: EMPTY
53821: LIST
53822: LIST
53823: LIST
53824: PUSH
53825: EMPTY
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: LIST
53831: ST_TO_ADDR
// end ; end ;
53832: GO 53835
53834: POP
// result := list ;
53835: LD_ADDR_VAR 0 4
53839: PUSH
53840: LD_VAR 0 5
53844: ST_TO_ADDR
// end ;
53845: LD_VAR 0 4
53849: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
53850: LD_INT 0
53852: PPUSH
53853: PPUSH
53854: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
53855: LD_VAR 0 1
53859: NOT
53860: PUSH
53861: LD_VAR 0 2
53865: PUSH
53866: LD_INT 1
53868: PUSH
53869: LD_INT 2
53871: PUSH
53872: LD_INT 3
53874: PUSH
53875: LD_INT 4
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: LIST
53882: LIST
53883: IN
53884: NOT
53885: OR
53886: IFFALSE 53890
// exit ;
53888: GO 53982
// tmp := [ ] ;
53890: LD_ADDR_VAR 0 5
53894: PUSH
53895: EMPTY
53896: ST_TO_ADDR
// for i in units do
53897: LD_ADDR_VAR 0 4
53901: PUSH
53902: LD_VAR 0 1
53906: PUSH
53907: FOR_IN
53908: IFFALSE 53951
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
53910: LD_ADDR_VAR 0 5
53914: PUSH
53915: LD_VAR 0 5
53919: PPUSH
53920: LD_VAR 0 5
53924: PUSH
53925: LD_INT 1
53927: PLUS
53928: PPUSH
53929: LD_VAR 0 4
53933: PPUSH
53934: LD_VAR 0 2
53938: PPUSH
53939: CALL_OW 259
53943: PPUSH
53944: CALL_OW 2
53948: ST_TO_ADDR
53949: GO 53907
53951: POP
53952: POP
// if not tmp then
53953: LD_VAR 0 5
53957: NOT
53958: IFFALSE 53962
// exit ;
53960: GO 53982
// result := SortListByListDesc ( units , tmp ) ;
53962: LD_ADDR_VAR 0 3
53966: PUSH
53967: LD_VAR 0 1
53971: PPUSH
53972: LD_VAR 0 5
53976: PPUSH
53977: CALL_OW 77
53981: ST_TO_ADDR
// end ;
53982: LD_VAR 0 3
53986: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
53987: LD_INT 0
53989: PPUSH
53990: PPUSH
53991: PPUSH
// x := GetX ( building ) ;
53992: LD_ADDR_VAR 0 4
53996: PUSH
53997: LD_VAR 0 2
54001: PPUSH
54002: CALL_OW 250
54006: ST_TO_ADDR
// y := GetY ( building ) ;
54007: LD_ADDR_VAR 0 5
54011: PUSH
54012: LD_VAR 0 2
54016: PPUSH
54017: CALL_OW 251
54021: ST_TO_ADDR
// if GetTaskList ( unit ) then
54022: LD_VAR 0 1
54026: PPUSH
54027: CALL_OW 437
54031: IFFALSE 54126
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
54033: LD_STRING e
54035: PUSH
54036: LD_VAR 0 1
54040: PPUSH
54041: CALL_OW 437
54045: PUSH
54046: LD_INT 1
54048: ARRAY
54049: PUSH
54050: LD_INT 1
54052: ARRAY
54053: EQUAL
54054: PUSH
54055: LD_VAR 0 4
54059: PUSH
54060: LD_VAR 0 1
54064: PPUSH
54065: CALL_OW 437
54069: PUSH
54070: LD_INT 1
54072: ARRAY
54073: PUSH
54074: LD_INT 2
54076: ARRAY
54077: EQUAL
54078: AND
54079: PUSH
54080: LD_VAR 0 5
54084: PUSH
54085: LD_VAR 0 1
54089: PPUSH
54090: CALL_OW 437
54094: PUSH
54095: LD_INT 1
54097: ARRAY
54098: PUSH
54099: LD_INT 3
54101: ARRAY
54102: EQUAL
54103: AND
54104: IFFALSE 54116
// result := true else
54106: LD_ADDR_VAR 0 3
54110: PUSH
54111: LD_INT 1
54113: ST_TO_ADDR
54114: GO 54124
// result := false ;
54116: LD_ADDR_VAR 0 3
54120: PUSH
54121: LD_INT 0
54123: ST_TO_ADDR
// end else
54124: GO 54134
// result := false ;
54126: LD_ADDR_VAR 0 3
54130: PUSH
54131: LD_INT 0
54133: ST_TO_ADDR
// end ;
54134: LD_VAR 0 3
54138: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
54139: LD_INT 0
54141: PPUSH
54142: PPUSH
54143: PPUSH
54144: PPUSH
// if not unit or not area then
54145: LD_VAR 0 1
54149: NOT
54150: PUSH
54151: LD_VAR 0 2
54155: NOT
54156: OR
54157: IFFALSE 54161
// exit ;
54159: GO 54325
// tmp := AreaToList ( area , i ) ;
54161: LD_ADDR_VAR 0 6
54165: PUSH
54166: LD_VAR 0 2
54170: PPUSH
54171: LD_VAR 0 5
54175: PPUSH
54176: CALL_OW 517
54180: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
54181: LD_ADDR_VAR 0 5
54185: PUSH
54186: DOUBLE
54187: LD_INT 1
54189: DEC
54190: ST_TO_ADDR
54191: LD_VAR 0 6
54195: PUSH
54196: LD_INT 1
54198: ARRAY
54199: PUSH
54200: FOR_TO
54201: IFFALSE 54323
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
54203: LD_ADDR_VAR 0 7
54207: PUSH
54208: LD_VAR 0 6
54212: PUSH
54213: LD_INT 1
54215: ARRAY
54216: PUSH
54217: LD_VAR 0 5
54221: ARRAY
54222: PUSH
54223: LD_VAR 0 6
54227: PUSH
54228: LD_INT 2
54230: ARRAY
54231: PUSH
54232: LD_VAR 0 5
54236: ARRAY
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
54242: LD_VAR 0 7
54246: PUSH
54247: LD_INT 1
54249: ARRAY
54250: PPUSH
54251: LD_VAR 0 7
54255: PUSH
54256: LD_INT 2
54258: ARRAY
54259: PPUSH
54260: CALL_OW 428
54264: PUSH
54265: LD_INT 0
54267: EQUAL
54268: IFFALSE 54321
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
54270: LD_VAR 0 1
54274: PPUSH
54275: LD_VAR 0 7
54279: PUSH
54280: LD_INT 1
54282: ARRAY
54283: PPUSH
54284: LD_VAR 0 7
54288: PUSH
54289: LD_INT 2
54291: ARRAY
54292: PPUSH
54293: LD_VAR 0 3
54297: PPUSH
54298: CALL_OW 48
// result := IsPlaced ( unit ) ;
54302: LD_ADDR_VAR 0 4
54306: PUSH
54307: LD_VAR 0 1
54311: PPUSH
54312: CALL_OW 305
54316: ST_TO_ADDR
// exit ;
54317: POP
54318: POP
54319: GO 54325
// end ; end ;
54321: GO 54200
54323: POP
54324: POP
// end ;
54325: LD_VAR 0 4
54329: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
54330: LD_INT 0
54332: PPUSH
54333: PPUSH
54334: PPUSH
// if not side or side > 8 then
54335: LD_VAR 0 1
54339: NOT
54340: PUSH
54341: LD_VAR 0 1
54345: PUSH
54346: LD_INT 8
54348: GREATER
54349: OR
54350: IFFALSE 54354
// exit ;
54352: GO 54541
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
54354: LD_ADDR_VAR 0 4
54358: PUSH
54359: LD_INT 22
54361: PUSH
54362: LD_VAR 0 1
54366: PUSH
54367: EMPTY
54368: LIST
54369: LIST
54370: PUSH
54371: LD_INT 21
54373: PUSH
54374: LD_INT 3
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PPUSH
54385: CALL_OW 69
54389: ST_TO_ADDR
// if not tmp then
54390: LD_VAR 0 4
54394: NOT
54395: IFFALSE 54399
// exit ;
54397: GO 54541
// enable_addtolog := true ;
54399: LD_ADDR_OWVAR 81
54403: PUSH
54404: LD_INT 1
54406: ST_TO_ADDR
// AddToLog ( [ ) ;
54407: LD_STRING [
54409: PPUSH
54410: CALL_OW 561
// for i in tmp do
54414: LD_ADDR_VAR 0 3
54418: PUSH
54419: LD_VAR 0 4
54423: PUSH
54424: FOR_IN
54425: IFFALSE 54532
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
54427: LD_STRING [
54429: PUSH
54430: LD_VAR 0 3
54434: PPUSH
54435: CALL_OW 266
54439: STR
54440: PUSH
54441: LD_STRING , 
54443: STR
54444: PUSH
54445: LD_VAR 0 3
54449: PPUSH
54450: CALL_OW 250
54454: STR
54455: PUSH
54456: LD_STRING , 
54458: STR
54459: PUSH
54460: LD_VAR 0 3
54464: PPUSH
54465: CALL_OW 251
54469: STR
54470: PUSH
54471: LD_STRING , 
54473: STR
54474: PUSH
54475: LD_VAR 0 3
54479: PPUSH
54480: CALL_OW 254
54484: STR
54485: PUSH
54486: LD_STRING , 
54488: STR
54489: PUSH
54490: LD_VAR 0 3
54494: PPUSH
54495: LD_INT 1
54497: PPUSH
54498: CALL_OW 268
54502: STR
54503: PUSH
54504: LD_STRING , 
54506: STR
54507: PUSH
54508: LD_VAR 0 3
54512: PPUSH
54513: LD_INT 2
54515: PPUSH
54516: CALL_OW 268
54520: STR
54521: PUSH
54522: LD_STRING ],
54524: STR
54525: PPUSH
54526: CALL_OW 561
// end ;
54530: GO 54424
54532: POP
54533: POP
// AddToLog ( ]; ) ;
54534: LD_STRING ];
54536: PPUSH
54537: CALL_OW 561
// end ;
54541: LD_VAR 0 2
54545: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
54546: LD_INT 0
54548: PPUSH
54549: PPUSH
54550: PPUSH
54551: PPUSH
54552: PPUSH
// if not area or not rate or not max then
54553: LD_VAR 0 1
54557: NOT
54558: PUSH
54559: LD_VAR 0 2
54563: NOT
54564: OR
54565: PUSH
54566: LD_VAR 0 4
54570: NOT
54571: OR
54572: IFFALSE 54576
// exit ;
54574: GO 54768
// while 1 do
54576: LD_INT 1
54578: IFFALSE 54768
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
54580: LD_ADDR_VAR 0 9
54584: PUSH
54585: LD_VAR 0 1
54589: PPUSH
54590: LD_INT 1
54592: PPUSH
54593: CALL_OW 287
54597: PUSH
54598: LD_INT 10
54600: MUL
54601: ST_TO_ADDR
// r := rate / 10 ;
54602: LD_ADDR_VAR 0 7
54606: PUSH
54607: LD_VAR 0 2
54611: PUSH
54612: LD_INT 10
54614: DIVREAL
54615: ST_TO_ADDR
// time := 1 1$00 ;
54616: LD_ADDR_VAR 0 8
54620: PUSH
54621: LD_INT 2100
54623: ST_TO_ADDR
// if amount < min then
54624: LD_VAR 0 9
54628: PUSH
54629: LD_VAR 0 3
54633: LESS
54634: IFFALSE 54652
// r := r * 2 else
54636: LD_ADDR_VAR 0 7
54640: PUSH
54641: LD_VAR 0 7
54645: PUSH
54646: LD_INT 2
54648: MUL
54649: ST_TO_ADDR
54650: GO 54678
// if amount > max then
54652: LD_VAR 0 9
54656: PUSH
54657: LD_VAR 0 4
54661: GREATER
54662: IFFALSE 54678
// r := r / 2 ;
54664: LD_ADDR_VAR 0 7
54668: PUSH
54669: LD_VAR 0 7
54673: PUSH
54674: LD_INT 2
54676: DIVREAL
54677: ST_TO_ADDR
// time := time / r ;
54678: LD_ADDR_VAR 0 8
54682: PUSH
54683: LD_VAR 0 8
54687: PUSH
54688: LD_VAR 0 7
54692: DIVREAL
54693: ST_TO_ADDR
// if time < 0 then
54694: LD_VAR 0 8
54698: PUSH
54699: LD_INT 0
54701: LESS
54702: IFFALSE 54719
// time := time * - 1 ;
54704: LD_ADDR_VAR 0 8
54708: PUSH
54709: LD_VAR 0 8
54713: PUSH
54714: LD_INT 1
54716: NEG
54717: MUL
54718: ST_TO_ADDR
// wait ( time ) ;
54719: LD_VAR 0 8
54723: PPUSH
54724: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
54728: LD_INT 35
54730: PPUSH
54731: LD_INT 875
54733: PPUSH
54734: CALL_OW 12
54738: PPUSH
54739: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
54743: LD_INT 1
54745: PPUSH
54746: LD_INT 5
54748: PPUSH
54749: CALL_OW 12
54753: PPUSH
54754: LD_VAR 0 1
54758: PPUSH
54759: LD_INT 1
54761: PPUSH
54762: CALL_OW 55
// end ;
54766: GO 54576
// end ;
54768: LD_VAR 0 5
54772: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
54773: LD_INT 0
54775: PPUSH
54776: PPUSH
54777: PPUSH
54778: PPUSH
54779: PPUSH
54780: PPUSH
54781: PPUSH
54782: PPUSH
// if not turrets or not factories then
54783: LD_VAR 0 1
54787: NOT
54788: PUSH
54789: LD_VAR 0 2
54793: NOT
54794: OR
54795: IFFALSE 54799
// exit ;
54797: GO 55106
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
54799: LD_ADDR_VAR 0 10
54803: PUSH
54804: LD_INT 5
54806: PUSH
54807: LD_INT 6
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: PUSH
54814: LD_INT 2
54816: PUSH
54817: LD_INT 4
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: PUSH
54824: LD_INT 3
54826: PUSH
54827: LD_INT 5
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: LIST
54838: PUSH
54839: LD_INT 24
54841: PUSH
54842: LD_INT 25
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: LD_INT 23
54851: PUSH
54852: LD_INT 27
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 42
54865: PUSH
54866: LD_INT 43
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 44
54875: PUSH
54876: LD_INT 46
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: PUSH
54883: LD_INT 45
54885: PUSH
54886: LD_INT 47
54888: PUSH
54889: EMPTY
54890: LIST
54891: LIST
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: LIST
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: LIST
54902: ST_TO_ADDR
// result := [ ] ;
54903: LD_ADDR_VAR 0 3
54907: PUSH
54908: EMPTY
54909: ST_TO_ADDR
// for i in turrets do
54910: LD_ADDR_VAR 0 4
54914: PUSH
54915: LD_VAR 0 1
54919: PUSH
54920: FOR_IN
54921: IFFALSE 55104
// begin nat := GetNation ( i ) ;
54923: LD_ADDR_VAR 0 7
54927: PUSH
54928: LD_VAR 0 4
54932: PPUSH
54933: CALL_OW 248
54937: ST_TO_ADDR
// weapon := 0 ;
54938: LD_ADDR_VAR 0 8
54942: PUSH
54943: LD_INT 0
54945: ST_TO_ADDR
// if not nat then
54946: LD_VAR 0 7
54950: NOT
54951: IFFALSE 54955
// continue ;
54953: GO 54920
// for j in list [ nat ] do
54955: LD_ADDR_VAR 0 5
54959: PUSH
54960: LD_VAR 0 10
54964: PUSH
54965: LD_VAR 0 7
54969: ARRAY
54970: PUSH
54971: FOR_IN
54972: IFFALSE 55013
// if GetBWeapon ( i ) = j [ 1 ] then
54974: LD_VAR 0 4
54978: PPUSH
54979: CALL_OW 269
54983: PUSH
54984: LD_VAR 0 5
54988: PUSH
54989: LD_INT 1
54991: ARRAY
54992: EQUAL
54993: IFFALSE 55011
// begin weapon := j [ 2 ] ;
54995: LD_ADDR_VAR 0 8
54999: PUSH
55000: LD_VAR 0 5
55004: PUSH
55005: LD_INT 2
55007: ARRAY
55008: ST_TO_ADDR
// break ;
55009: GO 55013
// end ;
55011: GO 54971
55013: POP
55014: POP
// if not weapon then
55015: LD_VAR 0 8
55019: NOT
55020: IFFALSE 55024
// continue ;
55022: GO 54920
// for k in factories do
55024: LD_ADDR_VAR 0 6
55028: PUSH
55029: LD_VAR 0 2
55033: PUSH
55034: FOR_IN
55035: IFFALSE 55100
// begin weapons := AvailableWeaponList ( k ) ;
55037: LD_ADDR_VAR 0 9
55041: PUSH
55042: LD_VAR 0 6
55046: PPUSH
55047: CALL_OW 478
55051: ST_TO_ADDR
// if not weapons then
55052: LD_VAR 0 9
55056: NOT
55057: IFFALSE 55061
// continue ;
55059: GO 55034
// if weapon in weapons then
55061: LD_VAR 0 8
55065: PUSH
55066: LD_VAR 0 9
55070: IN
55071: IFFALSE 55098
// begin result := [ i , weapon ] ;
55073: LD_ADDR_VAR 0 3
55077: PUSH
55078: LD_VAR 0 4
55082: PUSH
55083: LD_VAR 0 8
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: ST_TO_ADDR
// exit ;
55092: POP
55093: POP
55094: POP
55095: POP
55096: GO 55106
// end ; end ;
55098: GO 55034
55100: POP
55101: POP
// end ;
55102: GO 54920
55104: POP
55105: POP
// end ;
55106: LD_VAR 0 3
55110: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
55111: LD_INT 0
55113: PPUSH
// if not side or side > 8 then
55114: LD_VAR 0 3
55118: NOT
55119: PUSH
55120: LD_VAR 0 3
55124: PUSH
55125: LD_INT 8
55127: GREATER
55128: OR
55129: IFFALSE 55133
// exit ;
55131: GO 55192
// if not range then
55133: LD_VAR 0 4
55137: NOT
55138: IFFALSE 55149
// range := - 12 ;
55140: LD_ADDR_VAR 0 4
55144: PUSH
55145: LD_INT 12
55147: NEG
55148: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
55149: LD_VAR 0 1
55153: PPUSH
55154: LD_VAR 0 2
55158: PPUSH
55159: LD_VAR 0 3
55163: PPUSH
55164: LD_VAR 0 4
55168: PPUSH
55169: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
55173: LD_VAR 0 1
55177: PPUSH
55178: LD_VAR 0 2
55182: PPUSH
55183: LD_VAR 0 3
55187: PPUSH
55188: CALL_OW 331
// end ;
55192: LD_VAR 0 5
55196: RET
// export function Video ( mode ) ; begin
55197: LD_INT 0
55199: PPUSH
// ingame_video = mode ;
55200: LD_ADDR_OWVAR 52
55204: PUSH
55205: LD_VAR 0 1
55209: ST_TO_ADDR
// interface_hidden = mode ;
55210: LD_ADDR_OWVAR 54
55214: PUSH
55215: LD_VAR 0 1
55219: ST_TO_ADDR
// end ;
55220: LD_VAR 0 2
55224: RET
// export function Join ( array , element ) ; begin
55225: LD_INT 0
55227: PPUSH
// result := array ^ element ;
55228: LD_ADDR_VAR 0 3
55232: PUSH
55233: LD_VAR 0 1
55237: PUSH
55238: LD_VAR 0 2
55242: ADD
55243: ST_TO_ADDR
// end ;
55244: LD_VAR 0 3
55248: RET
// export function JoinUnion ( array , element ) ; begin
55249: LD_INT 0
55251: PPUSH
// result := array union element ;
55252: LD_ADDR_VAR 0 3
55256: PUSH
55257: LD_VAR 0 1
55261: PUSH
55262: LD_VAR 0 2
55266: UNION
55267: ST_TO_ADDR
// end ;
55268: LD_VAR 0 3
55272: RET
// export function GetBehemoths ( side ) ; begin
55273: LD_INT 0
55275: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
55276: LD_ADDR_VAR 0 2
55280: PUSH
55281: LD_INT 22
55283: PUSH
55284: LD_VAR 0 1
55288: PUSH
55289: EMPTY
55290: LIST
55291: LIST
55292: PUSH
55293: LD_INT 31
55295: PUSH
55296: LD_INT 25
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: PPUSH
55307: CALL_OW 69
55311: ST_TO_ADDR
// end ;
55312: LD_VAR 0 2
55316: RET
// export function Shuffle ( array ) ; var i , index ; begin
55317: LD_INT 0
55319: PPUSH
55320: PPUSH
55321: PPUSH
// result := [ ] ;
55322: LD_ADDR_VAR 0 2
55326: PUSH
55327: EMPTY
55328: ST_TO_ADDR
// if not array then
55329: LD_VAR 0 1
55333: NOT
55334: IFFALSE 55338
// exit ;
55336: GO 55437
// Randomize ;
55338: CALL_OW 10
// for i = array downto 1 do
55342: LD_ADDR_VAR 0 3
55346: PUSH
55347: DOUBLE
55348: LD_VAR 0 1
55352: INC
55353: ST_TO_ADDR
55354: LD_INT 1
55356: PUSH
55357: FOR_DOWNTO
55358: IFFALSE 55435
// begin index := rand ( 1 , array ) ;
55360: LD_ADDR_VAR 0 4
55364: PUSH
55365: LD_INT 1
55367: PPUSH
55368: LD_VAR 0 1
55372: PPUSH
55373: CALL_OW 12
55377: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
55378: LD_ADDR_VAR 0 2
55382: PUSH
55383: LD_VAR 0 2
55387: PPUSH
55388: LD_VAR 0 2
55392: PUSH
55393: LD_INT 1
55395: PLUS
55396: PPUSH
55397: LD_VAR 0 1
55401: PUSH
55402: LD_VAR 0 4
55406: ARRAY
55407: PPUSH
55408: CALL_OW 2
55412: ST_TO_ADDR
// array := Delete ( array , index ) ;
55413: LD_ADDR_VAR 0 1
55417: PUSH
55418: LD_VAR 0 1
55422: PPUSH
55423: LD_VAR 0 4
55427: PPUSH
55428: CALL_OW 3
55432: ST_TO_ADDR
// end ;
55433: GO 55357
55435: POP
55436: POP
// end ;
55437: LD_VAR 0 2
55441: RET
// export function GetBaseMaterials ( base ) ; begin
55442: LD_INT 0
55444: PPUSH
// result := [ 0 , 0 , 0 ] ;
55445: LD_ADDR_VAR 0 2
55449: PUSH
55450: LD_INT 0
55452: PUSH
55453: LD_INT 0
55455: PUSH
55456: LD_INT 0
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: LIST
55463: ST_TO_ADDR
// if not base then
55464: LD_VAR 0 1
55468: NOT
55469: IFFALSE 55473
// exit ;
55471: GO 55522
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
55473: LD_ADDR_VAR 0 2
55477: PUSH
55478: LD_VAR 0 1
55482: PPUSH
55483: LD_INT 1
55485: PPUSH
55486: CALL_OW 275
55490: PUSH
55491: LD_VAR 0 1
55495: PPUSH
55496: LD_INT 2
55498: PPUSH
55499: CALL_OW 275
55503: PUSH
55504: LD_VAR 0 1
55508: PPUSH
55509: LD_INT 3
55511: PPUSH
55512: CALL_OW 275
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: LIST
55521: ST_TO_ADDR
// end ; end_of_file
55522: LD_VAR 0 2
55526: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; every 1 do
55527: GO 55529
55529: DISABLE
// begin ru_radar := 98 ;
55530: LD_ADDR_EXP 29
55534: PUSH
55535: LD_INT 98
55537: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
55538: LD_ADDR_EXP 30
55542: PUSH
55543: LD_INT 89
55545: ST_TO_ADDR
// us_hack := 99 ;
55546: LD_ADDR_EXP 31
55550: PUSH
55551: LD_INT 99
55553: ST_TO_ADDR
// us_artillery := 97 ;
55554: LD_ADDR_EXP 32
55558: PUSH
55559: LD_INT 97
55561: ST_TO_ADDR
// ar_bio_bomb := 91 ;
55562: LD_ADDR_EXP 33
55566: PUSH
55567: LD_INT 91
55569: ST_TO_ADDR
// tech_Artillery := 80 ;
55570: LD_ADDR_EXP 34
55574: PUSH
55575: LD_INT 80
55577: ST_TO_ADDR
// tech_RadMat := 81 ;
55578: LD_ADDR_EXP 35
55582: PUSH
55583: LD_INT 81
55585: ST_TO_ADDR
// tech_BasicTools := 82 ;
55586: LD_ADDR_EXP 36
55590: PUSH
55591: LD_INT 82
55593: ST_TO_ADDR
// tech_Cargo := 83 ;
55594: LD_ADDR_EXP 37
55598: PUSH
55599: LD_INT 83
55601: ST_TO_ADDR
// tech_Track := 84 ;
55602: LD_ADDR_EXP 38
55606: PUSH
55607: LD_INT 84
55609: ST_TO_ADDR
// tech_Crane := 85 ;
55610: LD_ADDR_EXP 39
55614: PUSH
55615: LD_INT 85
55617: ST_TO_ADDR
// tech_Bulldozer := 86 ;
55618: LD_ADDR_EXP 40
55622: PUSH
55623: LD_INT 86
55625: ST_TO_ADDR
// tech_Hovercraft := 87 ;
55626: LD_ADDR_EXP 41
55630: PUSH
55631: LD_INT 87
55633: ST_TO_ADDR
// end ; end_of_file
55634: END
// export skirmish , debug_mc ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_teleport_exit_set , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver , mc_class , mc_class_case_use ; export function InitMacro ; var i ; begin
55635: LD_INT 0
55637: PPUSH
55638: PPUSH
// skirmish := false ;
55639: LD_ADDR_EXP 42
55643: PUSH
55644: LD_INT 0
55646: ST_TO_ADDR
// debug_mc := false ;
55647: LD_ADDR_EXP 43
55651: PUSH
55652: LD_INT 0
55654: ST_TO_ADDR
// mc_bases := [ ] ;
55655: LD_ADDR_EXP 44
55659: PUSH
55660: EMPTY
55661: ST_TO_ADDR
// mc_sides := [ ] ;
55662: LD_ADDR_EXP 70
55666: PUSH
55667: EMPTY
55668: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
55669: LD_ADDR_EXP 45
55673: PUSH
55674: EMPTY
55675: ST_TO_ADDR
// mc_building_repairs := [ ] ;
55676: LD_ADDR_EXP 46
55680: PUSH
55681: EMPTY
55682: ST_TO_ADDR
// mc_need_heal := [ ] ;
55683: LD_ADDR_EXP 47
55687: PUSH
55688: EMPTY
55689: ST_TO_ADDR
// mc_healers := [ ] ;
55690: LD_ADDR_EXP 48
55694: PUSH
55695: EMPTY
55696: ST_TO_ADDR
// mc_build_list := [ ] ;
55697: LD_ADDR_EXP 49
55701: PUSH
55702: EMPTY
55703: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
55704: LD_ADDR_EXP 76
55708: PUSH
55709: EMPTY
55710: ST_TO_ADDR
// mc_builders := [ ] ;
55711: LD_ADDR_EXP 50
55715: PUSH
55716: EMPTY
55717: ST_TO_ADDR
// mc_construct_list := [ ] ;
55718: LD_ADDR_EXP 51
55722: PUSH
55723: EMPTY
55724: ST_TO_ADDR
// mc_turret_list := [ ] ;
55725: LD_ADDR_EXP 52
55729: PUSH
55730: EMPTY
55731: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
55732: LD_ADDR_EXP 53
55736: PUSH
55737: EMPTY
55738: ST_TO_ADDR
// mc_miners := [ ] ;
55739: LD_ADDR_EXP 58
55743: PUSH
55744: EMPTY
55745: ST_TO_ADDR
// mc_mines := [ ] ;
55746: LD_ADDR_EXP 57
55750: PUSH
55751: EMPTY
55752: ST_TO_ADDR
// mc_minefields := [ ] ;
55753: LD_ADDR_EXP 59
55757: PUSH
55758: EMPTY
55759: ST_TO_ADDR
// mc_crates := [ ] ;
55760: LD_ADDR_EXP 60
55764: PUSH
55765: EMPTY
55766: ST_TO_ADDR
// mc_crates_collector := [ ] ;
55767: LD_ADDR_EXP 61
55771: PUSH
55772: EMPTY
55773: ST_TO_ADDR
// mc_crates_area := [ ] ;
55774: LD_ADDR_EXP 62
55778: PUSH
55779: EMPTY
55780: ST_TO_ADDR
// mc_vehicles := [ ] ;
55781: LD_ADDR_EXP 63
55785: PUSH
55786: EMPTY
55787: ST_TO_ADDR
// mc_attack := [ ] ;
55788: LD_ADDR_EXP 64
55792: PUSH
55793: EMPTY
55794: ST_TO_ADDR
// mc_produce := [ ] ;
55795: LD_ADDR_EXP 65
55799: PUSH
55800: EMPTY
55801: ST_TO_ADDR
// mc_defender := [ ] ;
55802: LD_ADDR_EXP 66
55806: PUSH
55807: EMPTY
55808: ST_TO_ADDR
// mc_parking := [ ] ;
55809: LD_ADDR_EXP 68
55813: PUSH
55814: EMPTY
55815: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
55816: LD_ADDR_EXP 54
55820: PUSH
55821: EMPTY
55822: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
55823: LD_ADDR_EXP 56
55827: PUSH
55828: EMPTY
55829: ST_TO_ADDR
// mc_scan := [ ] ;
55830: LD_ADDR_EXP 67
55834: PUSH
55835: EMPTY
55836: ST_TO_ADDR
// mc_scan_area := [ ] ;
55837: LD_ADDR_EXP 69
55841: PUSH
55842: EMPTY
55843: ST_TO_ADDR
// mc_tech := [ ] ;
55844: LD_ADDR_EXP 71
55848: PUSH
55849: EMPTY
55850: ST_TO_ADDR
// mc_class := [ ] ;
55851: LD_ADDR_EXP 85
55855: PUSH
55856: EMPTY
55857: ST_TO_ADDR
// mc_class_case_use := [ ] ;
55858: LD_ADDR_EXP 86
55862: PUSH
55863: EMPTY
55864: ST_TO_ADDR
// end ;
55865: LD_VAR 0 1
55869: RET
// export function MC_Kill ( base ) ; begin
55870: LD_INT 0
55872: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
55873: LD_ADDR_EXP 44
55877: PUSH
55878: LD_EXP 44
55882: PPUSH
55883: LD_VAR 0 1
55887: PPUSH
55888: EMPTY
55889: PPUSH
55890: CALL_OW 1
55894: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
55895: LD_ADDR_EXP 45
55899: PUSH
55900: LD_EXP 45
55904: PPUSH
55905: LD_VAR 0 1
55909: PPUSH
55910: EMPTY
55911: PPUSH
55912: CALL_OW 1
55916: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
55917: LD_ADDR_EXP 46
55921: PUSH
55922: LD_EXP 46
55926: PPUSH
55927: LD_VAR 0 1
55931: PPUSH
55932: EMPTY
55933: PPUSH
55934: CALL_OW 1
55938: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
55939: LD_ADDR_EXP 47
55943: PUSH
55944: LD_EXP 47
55948: PPUSH
55949: LD_VAR 0 1
55953: PPUSH
55954: EMPTY
55955: PPUSH
55956: CALL_OW 1
55960: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
55961: LD_ADDR_EXP 48
55965: PUSH
55966: LD_EXP 48
55970: PPUSH
55971: LD_VAR 0 1
55975: PPUSH
55976: EMPTY
55977: PPUSH
55978: CALL_OW 1
55982: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
55983: LD_ADDR_EXP 49
55987: PUSH
55988: LD_EXP 49
55992: PPUSH
55993: LD_VAR 0 1
55997: PPUSH
55998: EMPTY
55999: PPUSH
56000: CALL_OW 1
56004: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
56005: LD_ADDR_EXP 50
56009: PUSH
56010: LD_EXP 50
56014: PPUSH
56015: LD_VAR 0 1
56019: PPUSH
56020: EMPTY
56021: PPUSH
56022: CALL_OW 1
56026: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
56027: LD_ADDR_EXP 51
56031: PUSH
56032: LD_EXP 51
56036: PPUSH
56037: LD_VAR 0 1
56041: PPUSH
56042: EMPTY
56043: PPUSH
56044: CALL_OW 1
56048: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
56049: LD_ADDR_EXP 52
56053: PUSH
56054: LD_EXP 52
56058: PPUSH
56059: LD_VAR 0 1
56063: PPUSH
56064: EMPTY
56065: PPUSH
56066: CALL_OW 1
56070: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
56071: LD_ADDR_EXP 53
56075: PUSH
56076: LD_EXP 53
56080: PPUSH
56081: LD_VAR 0 1
56085: PPUSH
56086: EMPTY
56087: PPUSH
56088: CALL_OW 1
56092: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
56093: LD_ADDR_EXP 54
56097: PUSH
56098: LD_EXP 54
56102: PPUSH
56103: LD_VAR 0 1
56107: PPUSH
56108: EMPTY
56109: PPUSH
56110: CALL_OW 1
56114: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
56115: LD_ADDR_EXP 55
56119: PUSH
56120: LD_EXP 55
56124: PPUSH
56125: LD_VAR 0 1
56129: PPUSH
56130: LD_INT 0
56132: PPUSH
56133: CALL_OW 1
56137: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
56138: LD_ADDR_EXP 56
56142: PUSH
56143: LD_EXP 56
56147: PPUSH
56148: LD_VAR 0 1
56152: PPUSH
56153: EMPTY
56154: PPUSH
56155: CALL_OW 1
56159: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
56160: LD_ADDR_EXP 57
56164: PUSH
56165: LD_EXP 57
56169: PPUSH
56170: LD_VAR 0 1
56174: PPUSH
56175: EMPTY
56176: PPUSH
56177: CALL_OW 1
56181: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
56182: LD_ADDR_EXP 58
56186: PUSH
56187: LD_EXP 58
56191: PPUSH
56192: LD_VAR 0 1
56196: PPUSH
56197: EMPTY
56198: PPUSH
56199: CALL_OW 1
56203: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
56204: LD_ADDR_EXP 59
56208: PUSH
56209: LD_EXP 59
56213: PPUSH
56214: LD_VAR 0 1
56218: PPUSH
56219: EMPTY
56220: PPUSH
56221: CALL_OW 1
56225: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
56226: LD_ADDR_EXP 60
56230: PUSH
56231: LD_EXP 60
56235: PPUSH
56236: LD_VAR 0 1
56240: PPUSH
56241: EMPTY
56242: PPUSH
56243: CALL_OW 1
56247: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
56248: LD_ADDR_EXP 61
56252: PUSH
56253: LD_EXP 61
56257: PPUSH
56258: LD_VAR 0 1
56262: PPUSH
56263: EMPTY
56264: PPUSH
56265: CALL_OW 1
56269: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
56270: LD_ADDR_EXP 62
56274: PUSH
56275: LD_EXP 62
56279: PPUSH
56280: LD_VAR 0 1
56284: PPUSH
56285: EMPTY
56286: PPUSH
56287: CALL_OW 1
56291: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
56292: LD_ADDR_EXP 63
56296: PUSH
56297: LD_EXP 63
56301: PPUSH
56302: LD_VAR 0 1
56306: PPUSH
56307: EMPTY
56308: PPUSH
56309: CALL_OW 1
56313: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
56314: LD_ADDR_EXP 64
56318: PUSH
56319: LD_EXP 64
56323: PPUSH
56324: LD_VAR 0 1
56328: PPUSH
56329: EMPTY
56330: PPUSH
56331: CALL_OW 1
56335: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
56336: LD_ADDR_EXP 65
56340: PUSH
56341: LD_EXP 65
56345: PPUSH
56346: LD_VAR 0 1
56350: PPUSH
56351: EMPTY
56352: PPUSH
56353: CALL_OW 1
56357: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
56358: LD_ADDR_EXP 66
56362: PUSH
56363: LD_EXP 66
56367: PPUSH
56368: LD_VAR 0 1
56372: PPUSH
56373: EMPTY
56374: PPUSH
56375: CALL_OW 1
56379: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
56380: LD_ADDR_EXP 67
56384: PUSH
56385: LD_EXP 67
56389: PPUSH
56390: LD_VAR 0 1
56394: PPUSH
56395: EMPTY
56396: PPUSH
56397: CALL_OW 1
56401: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
56402: LD_ADDR_EXP 68
56406: PUSH
56407: LD_EXP 68
56411: PPUSH
56412: LD_VAR 0 1
56416: PPUSH
56417: EMPTY
56418: PPUSH
56419: CALL_OW 1
56423: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
56424: LD_ADDR_EXP 69
56428: PUSH
56429: LD_EXP 69
56433: PPUSH
56434: LD_VAR 0 1
56438: PPUSH
56439: EMPTY
56440: PPUSH
56441: CALL_OW 1
56445: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
56446: LD_ADDR_EXP 71
56450: PUSH
56451: LD_EXP 71
56455: PPUSH
56456: LD_VAR 0 1
56460: PPUSH
56461: EMPTY
56462: PPUSH
56463: CALL_OW 1
56467: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
56468: LD_ADDR_EXP 73
56472: PUSH
56473: LD_EXP 73
56477: PPUSH
56478: LD_VAR 0 1
56482: PPUSH
56483: EMPTY
56484: PPUSH
56485: CALL_OW 1
56489: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
56490: LD_ADDR_EXP 74
56494: PUSH
56495: LD_EXP 74
56499: PPUSH
56500: LD_VAR 0 1
56504: PPUSH
56505: EMPTY
56506: PPUSH
56507: CALL_OW 1
56511: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
56512: LD_ADDR_EXP 75
56516: PUSH
56517: LD_EXP 75
56521: PPUSH
56522: LD_VAR 0 1
56526: PPUSH
56527: EMPTY
56528: PPUSH
56529: CALL_OW 1
56533: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
56534: LD_ADDR_EXP 76
56538: PUSH
56539: LD_EXP 76
56543: PPUSH
56544: LD_VAR 0 1
56548: PPUSH
56549: EMPTY
56550: PPUSH
56551: CALL_OW 1
56555: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
56556: LD_ADDR_EXP 77
56560: PUSH
56561: LD_EXP 77
56565: PPUSH
56566: LD_VAR 0 1
56570: PPUSH
56571: EMPTY
56572: PPUSH
56573: CALL_OW 1
56577: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
56578: LD_ADDR_EXP 78
56582: PUSH
56583: LD_EXP 78
56587: PPUSH
56588: LD_VAR 0 1
56592: PPUSH
56593: EMPTY
56594: PPUSH
56595: CALL_OW 1
56599: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
56600: LD_ADDR_EXP 79
56604: PUSH
56605: LD_EXP 79
56609: PPUSH
56610: LD_VAR 0 1
56614: PPUSH
56615: EMPTY
56616: PPUSH
56617: CALL_OW 1
56621: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
56622: LD_ADDR_EXP 80
56626: PUSH
56627: LD_EXP 80
56631: PPUSH
56632: LD_VAR 0 1
56636: PPUSH
56637: EMPTY
56638: PPUSH
56639: CALL_OW 1
56643: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
56644: LD_ADDR_EXP 81
56648: PUSH
56649: LD_EXP 81
56653: PPUSH
56654: LD_VAR 0 1
56658: PPUSH
56659: EMPTY
56660: PPUSH
56661: CALL_OW 1
56665: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
56666: LD_ADDR_EXP 82
56670: PUSH
56671: LD_EXP 82
56675: PPUSH
56676: LD_VAR 0 1
56680: PPUSH
56681: EMPTY
56682: PPUSH
56683: CALL_OW 1
56687: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
56688: LD_ADDR_EXP 83
56692: PUSH
56693: LD_EXP 83
56697: PPUSH
56698: LD_VAR 0 1
56702: PPUSH
56703: EMPTY
56704: PPUSH
56705: CALL_OW 1
56709: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
56710: LD_ADDR_EXP 84
56714: PUSH
56715: LD_EXP 84
56719: PPUSH
56720: LD_VAR 0 1
56724: PPUSH
56725: EMPTY
56726: PPUSH
56727: CALL_OW 1
56731: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
56732: LD_ADDR_EXP 85
56736: PUSH
56737: LD_EXP 85
56741: PPUSH
56742: LD_VAR 0 1
56746: PPUSH
56747: EMPTY
56748: PPUSH
56749: CALL_OW 1
56753: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
56754: LD_ADDR_EXP 86
56758: PUSH
56759: LD_EXP 86
56763: PPUSH
56764: LD_VAR 0 1
56768: PPUSH
56769: LD_INT 0
56771: PPUSH
56772: CALL_OW 1
56776: ST_TO_ADDR
// end ;
56777: LD_VAR 0 2
56781: RET
// export function MC_Add ( side , units ) ; var base ; begin
56782: LD_INT 0
56784: PPUSH
56785: PPUSH
// base := mc_bases + 1 ;
56786: LD_ADDR_VAR 0 4
56790: PUSH
56791: LD_EXP 44
56795: PUSH
56796: LD_INT 1
56798: PLUS
56799: ST_TO_ADDR
// mc_sides := Replace ( mc_sides , base , side ) ;
56800: LD_ADDR_EXP 70
56804: PUSH
56805: LD_EXP 70
56809: PPUSH
56810: LD_VAR 0 4
56814: PPUSH
56815: LD_VAR 0 1
56819: PPUSH
56820: CALL_OW 1
56824: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , base , units ) ;
56825: LD_ADDR_EXP 44
56829: PUSH
56830: LD_EXP 44
56834: PPUSH
56835: LD_VAR 0 4
56839: PPUSH
56840: LD_VAR 0 2
56844: PPUSH
56845: CALL_OW 1
56849: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
56850: LD_ADDR_EXP 45
56854: PUSH
56855: LD_EXP 45
56859: PPUSH
56860: LD_VAR 0 4
56864: PPUSH
56865: EMPTY
56866: PPUSH
56867: CALL_OW 1
56871: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
56872: LD_ADDR_EXP 46
56876: PUSH
56877: LD_EXP 46
56881: PPUSH
56882: LD_VAR 0 4
56886: PPUSH
56887: EMPTY
56888: PPUSH
56889: CALL_OW 1
56893: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
56894: LD_ADDR_EXP 47
56898: PUSH
56899: LD_EXP 47
56903: PPUSH
56904: LD_VAR 0 4
56908: PPUSH
56909: EMPTY
56910: PPUSH
56911: CALL_OW 1
56915: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
56916: LD_ADDR_EXP 48
56920: PUSH
56921: LD_EXP 48
56925: PPUSH
56926: LD_VAR 0 4
56930: PPUSH
56931: EMPTY
56932: PPUSH
56933: CALL_OW 1
56937: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
56938: LD_ADDR_EXP 49
56942: PUSH
56943: LD_EXP 49
56947: PPUSH
56948: LD_VAR 0 4
56952: PPUSH
56953: EMPTY
56954: PPUSH
56955: CALL_OW 1
56959: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
56960: LD_ADDR_EXP 50
56964: PUSH
56965: LD_EXP 50
56969: PPUSH
56970: LD_VAR 0 4
56974: PPUSH
56975: EMPTY
56976: PPUSH
56977: CALL_OW 1
56981: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
56982: LD_ADDR_EXP 51
56986: PUSH
56987: LD_EXP 51
56991: PPUSH
56992: LD_VAR 0 4
56996: PPUSH
56997: EMPTY
56998: PPUSH
56999: CALL_OW 1
57003: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
57004: LD_ADDR_EXP 52
57008: PUSH
57009: LD_EXP 52
57013: PPUSH
57014: LD_VAR 0 4
57018: PPUSH
57019: EMPTY
57020: PPUSH
57021: CALL_OW 1
57025: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
57026: LD_ADDR_EXP 53
57030: PUSH
57031: LD_EXP 53
57035: PPUSH
57036: LD_VAR 0 4
57040: PPUSH
57041: EMPTY
57042: PPUSH
57043: CALL_OW 1
57047: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
57048: LD_ADDR_EXP 54
57052: PUSH
57053: LD_EXP 54
57057: PPUSH
57058: LD_VAR 0 4
57062: PPUSH
57063: EMPTY
57064: PPUSH
57065: CALL_OW 1
57069: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
57070: LD_ADDR_EXP 55
57074: PUSH
57075: LD_EXP 55
57079: PPUSH
57080: LD_VAR 0 4
57084: PPUSH
57085: LD_INT 0
57087: PPUSH
57088: CALL_OW 1
57092: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
57093: LD_ADDR_EXP 56
57097: PUSH
57098: LD_EXP 56
57102: PPUSH
57103: LD_VAR 0 4
57107: PPUSH
57108: EMPTY
57109: PPUSH
57110: CALL_OW 1
57114: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
57115: LD_ADDR_EXP 57
57119: PUSH
57120: LD_EXP 57
57124: PPUSH
57125: LD_VAR 0 4
57129: PPUSH
57130: EMPTY
57131: PPUSH
57132: CALL_OW 1
57136: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
57137: LD_ADDR_EXP 58
57141: PUSH
57142: LD_EXP 58
57146: PPUSH
57147: LD_VAR 0 4
57151: PPUSH
57152: EMPTY
57153: PPUSH
57154: CALL_OW 1
57158: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
57159: LD_ADDR_EXP 59
57163: PUSH
57164: LD_EXP 59
57168: PPUSH
57169: LD_VAR 0 4
57173: PPUSH
57174: EMPTY
57175: PPUSH
57176: CALL_OW 1
57180: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
57181: LD_ADDR_EXP 60
57185: PUSH
57186: LD_EXP 60
57190: PPUSH
57191: LD_VAR 0 4
57195: PPUSH
57196: EMPTY
57197: PPUSH
57198: CALL_OW 1
57202: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
57203: LD_ADDR_EXP 61
57207: PUSH
57208: LD_EXP 61
57212: PPUSH
57213: LD_VAR 0 4
57217: PPUSH
57218: EMPTY
57219: PPUSH
57220: CALL_OW 1
57224: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
57225: LD_ADDR_EXP 62
57229: PUSH
57230: LD_EXP 62
57234: PPUSH
57235: LD_VAR 0 4
57239: PPUSH
57240: EMPTY
57241: PPUSH
57242: CALL_OW 1
57246: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
57247: LD_ADDR_EXP 63
57251: PUSH
57252: LD_EXP 63
57256: PPUSH
57257: LD_VAR 0 4
57261: PPUSH
57262: EMPTY
57263: PPUSH
57264: CALL_OW 1
57268: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
57269: LD_ADDR_EXP 64
57273: PUSH
57274: LD_EXP 64
57278: PPUSH
57279: LD_VAR 0 4
57283: PPUSH
57284: EMPTY
57285: PPUSH
57286: CALL_OW 1
57290: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
57291: LD_ADDR_EXP 65
57295: PUSH
57296: LD_EXP 65
57300: PPUSH
57301: LD_VAR 0 4
57305: PPUSH
57306: EMPTY
57307: PPUSH
57308: CALL_OW 1
57312: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
57313: LD_ADDR_EXP 66
57317: PUSH
57318: LD_EXP 66
57322: PPUSH
57323: LD_VAR 0 4
57327: PPUSH
57328: EMPTY
57329: PPUSH
57330: CALL_OW 1
57334: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
57335: LD_ADDR_EXP 67
57339: PUSH
57340: LD_EXP 67
57344: PPUSH
57345: LD_VAR 0 4
57349: PPUSH
57350: EMPTY
57351: PPUSH
57352: CALL_OW 1
57356: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
57357: LD_ADDR_EXP 68
57361: PUSH
57362: LD_EXP 68
57366: PPUSH
57367: LD_VAR 0 4
57371: PPUSH
57372: EMPTY
57373: PPUSH
57374: CALL_OW 1
57378: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
57379: LD_ADDR_EXP 69
57383: PUSH
57384: LD_EXP 69
57388: PPUSH
57389: LD_VAR 0 4
57393: PPUSH
57394: EMPTY
57395: PPUSH
57396: CALL_OW 1
57400: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
57401: LD_ADDR_EXP 71
57405: PUSH
57406: LD_EXP 71
57410: PPUSH
57411: LD_VAR 0 4
57415: PPUSH
57416: EMPTY
57417: PPUSH
57418: CALL_OW 1
57422: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
57423: LD_ADDR_EXP 73
57427: PUSH
57428: LD_EXP 73
57432: PPUSH
57433: LD_VAR 0 4
57437: PPUSH
57438: EMPTY
57439: PPUSH
57440: CALL_OW 1
57444: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
57445: LD_ADDR_EXP 74
57449: PUSH
57450: LD_EXP 74
57454: PPUSH
57455: LD_VAR 0 4
57459: PPUSH
57460: EMPTY
57461: PPUSH
57462: CALL_OW 1
57466: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
57467: LD_ADDR_EXP 75
57471: PUSH
57472: LD_EXP 75
57476: PPUSH
57477: LD_VAR 0 4
57481: PPUSH
57482: EMPTY
57483: PPUSH
57484: CALL_OW 1
57488: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
57489: LD_ADDR_EXP 76
57493: PUSH
57494: LD_EXP 76
57498: PPUSH
57499: LD_VAR 0 4
57503: PPUSH
57504: EMPTY
57505: PPUSH
57506: CALL_OW 1
57510: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
57511: LD_ADDR_EXP 77
57515: PUSH
57516: LD_EXP 77
57520: PPUSH
57521: LD_VAR 0 4
57525: PPUSH
57526: EMPTY
57527: PPUSH
57528: CALL_OW 1
57532: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
57533: LD_ADDR_EXP 78
57537: PUSH
57538: LD_EXP 78
57542: PPUSH
57543: LD_VAR 0 4
57547: PPUSH
57548: EMPTY
57549: PPUSH
57550: CALL_OW 1
57554: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
57555: LD_ADDR_EXP 79
57559: PUSH
57560: LD_EXP 79
57564: PPUSH
57565: LD_VAR 0 4
57569: PPUSH
57570: EMPTY
57571: PPUSH
57572: CALL_OW 1
57576: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
57577: LD_ADDR_EXP 80
57581: PUSH
57582: LD_EXP 80
57586: PPUSH
57587: LD_VAR 0 4
57591: PPUSH
57592: EMPTY
57593: PPUSH
57594: CALL_OW 1
57598: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
57599: LD_ADDR_EXP 81
57603: PUSH
57604: LD_EXP 81
57608: PPUSH
57609: LD_VAR 0 4
57613: PPUSH
57614: EMPTY
57615: PPUSH
57616: CALL_OW 1
57620: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
57621: LD_ADDR_EXP 82
57625: PUSH
57626: LD_EXP 82
57630: PPUSH
57631: LD_VAR 0 4
57635: PPUSH
57636: EMPTY
57637: PPUSH
57638: CALL_OW 1
57642: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
57643: LD_ADDR_EXP 83
57647: PUSH
57648: LD_EXP 83
57652: PPUSH
57653: LD_VAR 0 4
57657: PPUSH
57658: EMPTY
57659: PPUSH
57660: CALL_OW 1
57664: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
57665: LD_ADDR_EXP 84
57669: PUSH
57670: LD_EXP 84
57674: PPUSH
57675: LD_VAR 0 4
57679: PPUSH
57680: EMPTY
57681: PPUSH
57682: CALL_OW 1
57686: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
57687: LD_ADDR_EXP 85
57691: PUSH
57692: LD_EXP 85
57696: PPUSH
57697: LD_VAR 0 4
57701: PPUSH
57702: EMPTY
57703: PPUSH
57704: CALL_OW 1
57708: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
57709: LD_ADDR_EXP 86
57713: PUSH
57714: LD_EXP 86
57718: PPUSH
57719: LD_VAR 0 4
57723: PPUSH
57724: LD_INT 0
57726: PPUSH
57727: CALL_OW 1
57731: ST_TO_ADDR
// result := base ;
57732: LD_ADDR_VAR 0 3
57736: PUSH
57737: LD_VAR 0 4
57741: ST_TO_ADDR
// end ;
57742: LD_VAR 0 3
57746: RET
// export function MC_Start ( ) ; var i ; begin
57747: LD_INT 0
57749: PPUSH
57750: PPUSH
// for i = 1 to mc_bases do
57751: LD_ADDR_VAR 0 2
57755: PUSH
57756: DOUBLE
57757: LD_INT 1
57759: DEC
57760: ST_TO_ADDR
57761: LD_EXP 44
57765: PUSH
57766: FOR_TO
57767: IFFALSE 58844
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff 0 ) ;
57769: LD_ADDR_EXP 44
57773: PUSH
57774: LD_EXP 44
57778: PPUSH
57779: LD_VAR 0 2
57783: PPUSH
57784: LD_EXP 44
57788: PUSH
57789: LD_VAR 0 2
57793: ARRAY
57794: PUSH
57795: LD_INT 0
57797: DIFF
57798: PPUSH
57799: CALL_OW 1
57803: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
57804: LD_ADDR_EXP 45
57808: PUSH
57809: LD_EXP 45
57813: PPUSH
57814: LD_VAR 0 2
57818: PPUSH
57819: EMPTY
57820: PPUSH
57821: CALL_OW 1
57825: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
57826: LD_ADDR_EXP 46
57830: PUSH
57831: LD_EXP 46
57835: PPUSH
57836: LD_VAR 0 2
57840: PPUSH
57841: EMPTY
57842: PPUSH
57843: CALL_OW 1
57847: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
57848: LD_ADDR_EXP 47
57852: PUSH
57853: LD_EXP 47
57857: PPUSH
57858: LD_VAR 0 2
57862: PPUSH
57863: EMPTY
57864: PPUSH
57865: CALL_OW 1
57869: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
57870: LD_ADDR_EXP 48
57874: PUSH
57875: LD_EXP 48
57879: PPUSH
57880: LD_VAR 0 2
57884: PPUSH
57885: EMPTY
57886: PUSH
57887: EMPTY
57888: PUSH
57889: EMPTY
57890: LIST
57891: LIST
57892: PPUSH
57893: CALL_OW 1
57897: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
57898: LD_ADDR_EXP 49
57902: PUSH
57903: LD_EXP 49
57907: PPUSH
57908: LD_VAR 0 2
57912: PPUSH
57913: EMPTY
57914: PPUSH
57915: CALL_OW 1
57919: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
57920: LD_ADDR_EXP 76
57924: PUSH
57925: LD_EXP 76
57929: PPUSH
57930: LD_VAR 0 2
57934: PPUSH
57935: EMPTY
57936: PPUSH
57937: CALL_OW 1
57941: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
57942: LD_ADDR_EXP 50
57946: PUSH
57947: LD_EXP 50
57951: PPUSH
57952: LD_VAR 0 2
57956: PPUSH
57957: EMPTY
57958: PPUSH
57959: CALL_OW 1
57963: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
57964: LD_ADDR_EXP 51
57968: PUSH
57969: LD_EXP 51
57973: PPUSH
57974: LD_VAR 0 2
57978: PPUSH
57979: EMPTY
57980: PPUSH
57981: CALL_OW 1
57985: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ) ;
57986: LD_ADDR_EXP 52
57990: PUSH
57991: LD_EXP 52
57995: PPUSH
57996: LD_VAR 0 2
58000: PPUSH
58001: LD_EXP 44
58005: PUSH
58006: LD_VAR 0 2
58010: ARRAY
58011: PPUSH
58012: LD_INT 2
58014: PUSH
58015: LD_INT 30
58017: PUSH
58018: LD_INT 32
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: PUSH
58025: LD_INT 30
58027: PUSH
58028: LD_INT 33
58030: PUSH
58031: EMPTY
58032: LIST
58033: LIST
58034: PUSH
58035: EMPTY
58036: LIST
58037: LIST
58038: LIST
58039: PPUSH
58040: CALL_OW 72
58044: PPUSH
58045: CALL_OW 1
58049: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
58050: LD_ADDR_EXP 53
58054: PUSH
58055: LD_EXP 53
58059: PPUSH
58060: LD_VAR 0 2
58064: PPUSH
58065: LD_EXP 44
58069: PUSH
58070: LD_VAR 0 2
58074: ARRAY
58075: PPUSH
58076: LD_INT 2
58078: PUSH
58079: LD_INT 30
58081: PUSH
58082: LD_INT 32
58084: PUSH
58085: EMPTY
58086: LIST
58087: LIST
58088: PUSH
58089: LD_INT 30
58091: PUSH
58092: LD_INT 31
58094: PUSH
58095: EMPTY
58096: LIST
58097: LIST
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: LIST
58103: PUSH
58104: LD_INT 58
58106: PUSH
58107: EMPTY
58108: LIST
58109: PUSH
58110: EMPTY
58111: LIST
58112: LIST
58113: PPUSH
58114: CALL_OW 72
58118: PPUSH
58119: CALL_OW 1
58123: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
58124: LD_ADDR_EXP 54
58128: PUSH
58129: LD_EXP 54
58133: PPUSH
58134: LD_VAR 0 2
58138: PPUSH
58139: EMPTY
58140: PPUSH
58141: CALL_OW 1
58145: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
58146: LD_ADDR_EXP 58
58150: PUSH
58151: LD_EXP 58
58155: PPUSH
58156: LD_VAR 0 2
58160: PPUSH
58161: EMPTY
58162: PPUSH
58163: CALL_OW 1
58167: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
58168: LD_ADDR_EXP 57
58172: PUSH
58173: LD_EXP 57
58177: PPUSH
58178: LD_VAR 0 2
58182: PPUSH
58183: EMPTY
58184: PPUSH
58185: CALL_OW 1
58189: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
58190: LD_ADDR_EXP 59
58194: PUSH
58195: LD_EXP 59
58199: PPUSH
58200: LD_VAR 0 2
58204: PPUSH
58205: EMPTY
58206: PPUSH
58207: CALL_OW 1
58211: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
58212: LD_ADDR_EXP 60
58216: PUSH
58217: LD_EXP 60
58221: PPUSH
58222: LD_VAR 0 2
58226: PPUSH
58227: EMPTY
58228: PPUSH
58229: CALL_OW 1
58233: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
58234: LD_ADDR_EXP 61
58238: PUSH
58239: LD_EXP 61
58243: PPUSH
58244: LD_VAR 0 2
58248: PPUSH
58249: EMPTY
58250: PPUSH
58251: CALL_OW 1
58255: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
58256: LD_ADDR_EXP 62
58260: PUSH
58261: LD_EXP 62
58265: PPUSH
58266: LD_VAR 0 2
58270: PPUSH
58271: EMPTY
58272: PPUSH
58273: CALL_OW 1
58277: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
58278: LD_ADDR_EXP 63
58282: PUSH
58283: LD_EXP 63
58287: PPUSH
58288: LD_VAR 0 2
58292: PPUSH
58293: EMPTY
58294: PPUSH
58295: CALL_OW 1
58299: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
58300: LD_ADDR_EXP 64
58304: PUSH
58305: LD_EXP 64
58309: PPUSH
58310: LD_VAR 0 2
58314: PPUSH
58315: EMPTY
58316: PPUSH
58317: CALL_OW 1
58321: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
58322: LD_ADDR_EXP 65
58326: PUSH
58327: LD_EXP 65
58331: PPUSH
58332: LD_VAR 0 2
58336: PPUSH
58337: EMPTY
58338: PPUSH
58339: CALL_OW 1
58343: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
58344: LD_ADDR_EXP 66
58348: PUSH
58349: LD_EXP 66
58353: PPUSH
58354: LD_VAR 0 2
58358: PPUSH
58359: EMPTY
58360: PPUSH
58361: CALL_OW 1
58365: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
58366: LD_ADDR_EXP 55
58370: PUSH
58371: LD_EXP 55
58375: PPUSH
58376: LD_VAR 0 2
58380: PPUSH
58381: LD_INT 0
58383: PPUSH
58384: CALL_OW 1
58388: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
58389: LD_ADDR_EXP 68
58393: PUSH
58394: LD_EXP 68
58398: PPUSH
58399: LD_VAR 0 2
58403: PPUSH
58404: LD_INT 0
58406: PPUSH
58407: CALL_OW 1
58411: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
58412: LD_ADDR_EXP 56
58416: PUSH
58417: LD_EXP 56
58421: PPUSH
58422: LD_VAR 0 2
58426: PPUSH
58427: EMPTY
58428: PPUSH
58429: CALL_OW 1
58433: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
58434: LD_ADDR_EXP 67
58438: PUSH
58439: LD_EXP 67
58443: PPUSH
58444: LD_VAR 0 2
58448: PPUSH
58449: LD_INT 0
58451: PPUSH
58452: CALL_OW 1
58456: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
58457: LD_ADDR_EXP 69
58461: PUSH
58462: LD_EXP 69
58466: PPUSH
58467: LD_VAR 0 2
58471: PPUSH
58472: EMPTY
58473: PPUSH
58474: CALL_OW 1
58478: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
58479: LD_ADDR_EXP 72
58483: PUSH
58484: LD_EXP 72
58488: PPUSH
58489: LD_VAR 0 2
58493: PPUSH
58494: LD_INT 0
58496: PPUSH
58497: CALL_OW 1
58501: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
58502: LD_ADDR_EXP 73
58506: PUSH
58507: LD_EXP 73
58511: PPUSH
58512: LD_VAR 0 2
58516: PPUSH
58517: EMPTY
58518: PPUSH
58519: CALL_OW 1
58523: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
58524: LD_ADDR_EXP 74
58528: PUSH
58529: LD_EXP 74
58533: PPUSH
58534: LD_VAR 0 2
58538: PPUSH
58539: EMPTY
58540: PPUSH
58541: CALL_OW 1
58545: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
58546: LD_ADDR_EXP 75
58550: PUSH
58551: LD_EXP 75
58555: PPUSH
58556: LD_VAR 0 2
58560: PPUSH
58561: EMPTY
58562: PPUSH
58563: CALL_OW 1
58567: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
58568: LD_ADDR_EXP 77
58572: PUSH
58573: LD_EXP 77
58577: PPUSH
58578: LD_VAR 0 2
58582: PPUSH
58583: LD_EXP 44
58587: PUSH
58588: LD_VAR 0 2
58592: ARRAY
58593: PPUSH
58594: LD_INT 2
58596: PUSH
58597: LD_INT 30
58599: PUSH
58600: LD_INT 6
58602: PUSH
58603: EMPTY
58604: LIST
58605: LIST
58606: PUSH
58607: LD_INT 30
58609: PUSH
58610: LD_INT 7
58612: PUSH
58613: EMPTY
58614: LIST
58615: LIST
58616: PUSH
58617: LD_INT 30
58619: PUSH
58620: LD_INT 8
58622: PUSH
58623: EMPTY
58624: LIST
58625: LIST
58626: PUSH
58627: EMPTY
58628: LIST
58629: LIST
58630: LIST
58631: LIST
58632: PPUSH
58633: CALL_OW 72
58637: PPUSH
58638: CALL_OW 1
58642: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
58643: LD_ADDR_EXP 78
58647: PUSH
58648: LD_EXP 78
58652: PPUSH
58653: LD_VAR 0 2
58657: PPUSH
58658: EMPTY
58659: PPUSH
58660: CALL_OW 1
58664: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
58665: LD_ADDR_EXP 79
58669: PUSH
58670: LD_EXP 79
58674: PPUSH
58675: LD_VAR 0 2
58679: PPUSH
58680: EMPTY
58681: PPUSH
58682: CALL_OW 1
58686: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , i , [ ] ) ;
58687: LD_ADDR_EXP 80
58691: PUSH
58692: LD_EXP 80
58696: PPUSH
58697: LD_VAR 0 2
58701: PPUSH
58702: EMPTY
58703: PPUSH
58704: CALL_OW 1
58708: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
58709: LD_ADDR_EXP 81
58713: PUSH
58714: LD_EXP 81
58718: PPUSH
58719: LD_VAR 0 2
58723: PPUSH
58724: EMPTY
58725: PPUSH
58726: CALL_OW 1
58730: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
58731: LD_ADDR_EXP 82
58735: PUSH
58736: LD_EXP 82
58740: PPUSH
58741: LD_VAR 0 2
58745: PPUSH
58746: EMPTY
58747: PPUSH
58748: CALL_OW 1
58752: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
58753: LD_ADDR_EXP 83
58757: PUSH
58758: LD_EXP 83
58762: PPUSH
58763: LD_VAR 0 2
58767: PPUSH
58768: EMPTY
58769: PPUSH
58770: CALL_OW 1
58774: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
58775: LD_ADDR_EXP 84
58779: PUSH
58780: LD_EXP 84
58784: PPUSH
58785: LD_VAR 0 2
58789: PPUSH
58790: EMPTY
58791: PPUSH
58792: CALL_OW 1
58796: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , [ ] ) ;
58797: LD_ADDR_EXP 85
58801: PUSH
58802: LD_EXP 85
58806: PPUSH
58807: LD_VAR 0 2
58811: PPUSH
58812: EMPTY
58813: PPUSH
58814: CALL_OW 1
58818: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , i , 0 ) ;
58819: LD_ADDR_EXP 86
58823: PUSH
58824: LD_EXP 86
58828: PPUSH
58829: LD_VAR 0 2
58833: PPUSH
58834: LD_INT 0
58836: PPUSH
58837: CALL_OW 1
58841: ST_TO_ADDR
// end ;
58842: GO 57766
58844: POP
58845: POP
// MC_InitSides ( ) ;
58846: CALL 59132 0 0
// MC_InitResearch ( ) ;
58850: CALL 58871 0 0
// CustomInitMacro ( ) ;
58854: CALL 1407 0 0
// skirmish := true ;
58858: LD_ADDR_EXP 42
58862: PUSH
58863: LD_INT 1
58865: ST_TO_ADDR
// end ;
58866: LD_VAR 0 1
58870: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
58871: LD_INT 0
58873: PPUSH
58874: PPUSH
58875: PPUSH
58876: PPUSH
58877: PPUSH
58878: PPUSH
// if not mc_bases then
58879: LD_EXP 44
58883: NOT
58884: IFFALSE 58888
// exit ;
58886: GO 59127
// for i = 1 to 8 do
58888: LD_ADDR_VAR 0 2
58892: PUSH
58893: DOUBLE
58894: LD_INT 1
58896: DEC
58897: ST_TO_ADDR
58898: LD_INT 8
58900: PUSH
58901: FOR_TO
58902: IFFALSE 58928
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
58904: LD_ADDR_EXP 71
58908: PUSH
58909: LD_EXP 71
58913: PPUSH
58914: LD_VAR 0 2
58918: PPUSH
58919: EMPTY
58920: PPUSH
58921: CALL_OW 1
58925: ST_TO_ADDR
58926: GO 58901
58928: POP
58929: POP
// tmp := [ ] ;
58930: LD_ADDR_VAR 0 5
58934: PUSH
58935: EMPTY
58936: ST_TO_ADDR
// for i = 1 to mc_sides do
58937: LD_ADDR_VAR 0 2
58941: PUSH
58942: DOUBLE
58943: LD_INT 1
58945: DEC
58946: ST_TO_ADDR
58947: LD_EXP 70
58951: PUSH
58952: FOR_TO
58953: IFFALSE 59011
// if not mc_sides [ i ] in tmp then
58955: LD_EXP 70
58959: PUSH
58960: LD_VAR 0 2
58964: ARRAY
58965: PUSH
58966: LD_VAR 0 5
58970: IN
58971: NOT
58972: IFFALSE 59009
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
58974: LD_ADDR_VAR 0 5
58978: PUSH
58979: LD_VAR 0 5
58983: PPUSH
58984: LD_VAR 0 5
58988: PUSH
58989: LD_INT 1
58991: PLUS
58992: PPUSH
58993: LD_EXP 70
58997: PUSH
58998: LD_VAR 0 2
59002: ARRAY
59003: PPUSH
59004: CALL_OW 2
59008: ST_TO_ADDR
59009: GO 58952
59011: POP
59012: POP
// if not tmp then
59013: LD_VAR 0 5
59017: NOT
59018: IFFALSE 59022
// exit ;
59020: GO 59127
// for j in tmp do
59022: LD_ADDR_VAR 0 3
59026: PUSH
59027: LD_VAR 0 5
59031: PUSH
59032: FOR_IN
59033: IFFALSE 59125
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
59035: LD_ADDR_VAR 0 6
59039: PUSH
59040: LD_INT 22
59042: PUSH
59043: LD_VAR 0 3
59047: PUSH
59048: EMPTY
59049: LIST
59050: LIST
59051: PPUSH
59052: CALL_OW 69
59056: ST_TO_ADDR
// if not un then
59057: LD_VAR 0 6
59061: NOT
59062: IFFALSE 59066
// continue ;
59064: GO 59032
// nation := GetNation ( un [ 1 ] ) ;
59066: LD_ADDR_VAR 0 4
59070: PUSH
59071: LD_VAR 0 6
59075: PUSH
59076: LD_INT 1
59078: ARRAY
59079: PPUSH
59080: CALL_OW 248
59084: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
59085: LD_ADDR_EXP 71
59089: PUSH
59090: LD_EXP 71
59094: PPUSH
59095: LD_VAR 0 3
59099: PPUSH
59100: LD_VAR 0 3
59104: PPUSH
59105: LD_VAR 0 4
59109: PPUSH
59110: LD_INT 1
59112: PPUSH
59113: CALL 19418 0 3
59117: PPUSH
59118: CALL_OW 1
59122: ST_TO_ADDR
// end ;
59123: GO 59032
59125: POP
59126: POP
// end ;
59127: LD_VAR 0 1
59131: RET
// export function MC_InitSides ( ) ; var i ; begin
59132: LD_INT 0
59134: PPUSH
59135: PPUSH
// if not mc_bases then
59136: LD_EXP 44
59140: NOT
59141: IFFALSE 59145
// exit ;
59143: GO 59219
// for i = 1 to mc_bases do
59145: LD_ADDR_VAR 0 2
59149: PUSH
59150: DOUBLE
59151: LD_INT 1
59153: DEC
59154: ST_TO_ADDR
59155: LD_EXP 44
59159: PUSH
59160: FOR_TO
59161: IFFALSE 59217
// if mc_bases [ i ] then
59163: LD_EXP 44
59167: PUSH
59168: LD_VAR 0 2
59172: ARRAY
59173: IFFALSE 59215
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
59175: LD_ADDR_EXP 70
59179: PUSH
59180: LD_EXP 70
59184: PPUSH
59185: LD_VAR 0 2
59189: PPUSH
59190: LD_EXP 44
59194: PUSH
59195: LD_VAR 0 2
59199: ARRAY
59200: PUSH
59201: LD_INT 1
59203: ARRAY
59204: PPUSH
59205: CALL_OW 255
59209: PPUSH
59210: CALL_OW 1
59214: ST_TO_ADDR
59215: GO 59160
59217: POP
59218: POP
// end ;
59219: LD_VAR 0 1
59223: RET
// every 0 0$01 trigger skirmish do
59224: LD_EXP 42
59228: IFFALSE 59382
59230: GO 59232
59232: DISABLE
// begin enable ;
59233: ENABLE
// MC_CheckBuildings ( ) ;
59234: CALL 63880 0 0
// MC_CheckPeopleLife ( ) ;
59238: CALL 64005 0 0
// RaiseSailEvent ( 100 ) ;
59242: LD_INT 100
59244: PPUSH
59245: CALL_OW 427
// RaiseSailEvent ( 103 ) ;
59249: LD_INT 103
59251: PPUSH
59252: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
59256: LD_INT 104
59258: PPUSH
59259: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
59263: LD_INT 105
59265: PPUSH
59266: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
59270: LD_INT 106
59272: PPUSH
59273: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
59277: LD_INT 107
59279: PPUSH
59280: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
59284: LD_INT 108
59286: PPUSH
59287: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
59291: LD_INT 109
59293: PPUSH
59294: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
59298: LD_INT 110
59300: PPUSH
59301: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
59305: LD_INT 111
59307: PPUSH
59308: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
59312: LD_INT 112
59314: PPUSH
59315: CALL_OW 427
// RaiseSailEvent ( 113 ) ;
59319: LD_INT 113
59321: PPUSH
59322: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
59326: LD_INT 120
59328: PPUSH
59329: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
59333: LD_INT 121
59335: PPUSH
59336: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
59340: LD_INT 122
59342: PPUSH
59343: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
59347: LD_INT 123
59349: PPUSH
59350: CALL_OW 427
// RaiseSailEvent ( 124 ) ;
59354: LD_INT 124
59356: PPUSH
59357: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
59361: LD_INT 125
59363: PPUSH
59364: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
59368: LD_INT 126
59370: PPUSH
59371: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
59375: LD_INT 200
59377: PPUSH
59378: CALL_OW 427
// end ;
59382: END
// on SailEvent ( event ) do begin if event < 100 then
59383: LD_VAR 0 1
59387: PUSH
59388: LD_INT 100
59390: LESS
59391: IFFALSE 59402
// CustomEvent ( event ) ;
59393: LD_VAR 0 1
59397: PPUSH
59398: CALL 18596 0 1
// if event = 100 then
59402: LD_VAR 0 1
59406: PUSH
59407: LD_INT 100
59409: EQUAL
59410: IFFALSE 59416
// MC_ClassManager ( ) ;
59412: CALL 59808 0 0
// if event = 101 then
59416: LD_VAR 0 1
59420: PUSH
59421: LD_INT 101
59423: EQUAL
59424: IFFALSE 59430
// MC_RepairBuildings ( ) ;
59426: CALL 64601 0 0
// if event = 102 then
59430: LD_VAR 0 1
59434: PUSH
59435: LD_INT 102
59437: EQUAL
59438: IFFALSE 59444
// MC_Heal ( ) ;
59440: CALL 65465 0 0
// if event = 103 then
59444: LD_VAR 0 1
59448: PUSH
59449: LD_INT 103
59451: EQUAL
59452: IFFALSE 59458
// MC_Build ( ) ;
59454: CALL 65887 0 0
// if event = 104 then
59458: LD_VAR 0 1
59462: PUSH
59463: LD_INT 104
59465: EQUAL
59466: IFFALSE 59472
// MC_TurretWeapon ( ) ;
59468: CALL 67500 0 0
// if event = 105 then
59472: LD_VAR 0 1
59476: PUSH
59477: LD_INT 105
59479: EQUAL
59480: IFFALSE 59486
// MC_BuildUpgrade ( ) ;
59482: CALL 67051 0 0
// if event = 106 then
59486: LD_VAR 0 1
59490: PUSH
59491: LD_INT 106
59493: EQUAL
59494: IFFALSE 59500
// MC_PlantMines ( ) ;
59496: CALL 67930 0 0
// if event = 107 then
59500: LD_VAR 0 1
59504: PUSH
59505: LD_INT 107
59507: EQUAL
59508: IFFALSE 59514
// MC_CollectCrates ( ) ;
59510: CALL 68728 0 0
// if event = 108 then
59514: LD_VAR 0 1
59518: PUSH
59519: LD_INT 108
59521: EQUAL
59522: IFFALSE 59528
// MC_LinkRemoteControl ( ) ;
59524: CALL 70504 0 0
// if event = 109 then
59528: LD_VAR 0 1
59532: PUSH
59533: LD_INT 109
59535: EQUAL
59536: IFFALSE 59542
// MC_ProduceVehicle ( ) ;
59538: CALL 70685 0 0
// if event = 110 then
59542: LD_VAR 0 1
59546: PUSH
59547: LD_INT 110
59549: EQUAL
59550: IFFALSE 59556
// MC_SendAttack ( ) ;
59552: CALL 71151 0 0
// if event = 111 then
59556: LD_VAR 0 1
59560: PUSH
59561: LD_INT 111
59563: EQUAL
59564: IFFALSE 59570
// MC_Defend ( ) ;
59566: CALL 71259 0 0
// if event = 112 then
59570: LD_VAR 0 1
59574: PUSH
59575: LD_INT 112
59577: EQUAL
59578: IFFALSE 59584
// MC_Research ( ) ;
59580: CALL 71864 0 0
// if event = 113 then
59584: LD_VAR 0 1
59588: PUSH
59589: LD_INT 113
59591: EQUAL
59592: IFFALSE 59598
// MC_MinesTrigger ( ) ;
59594: CALL 72978 0 0
// if event = 120 then
59598: LD_VAR 0 1
59602: PUSH
59603: LD_INT 120
59605: EQUAL
59606: IFFALSE 59612
// MC_RepairVehicle ( ) ;
59608: CALL 73077 0 0
// if event = 121 then
59612: LD_VAR 0 1
59616: PUSH
59617: LD_INT 121
59619: EQUAL
59620: IFFALSE 59626
// MC_TameApe ( ) ;
59622: CALL 73807 0 0
// if event = 122 then
59626: LD_VAR 0 1
59630: PUSH
59631: LD_INT 122
59633: EQUAL
59634: IFFALSE 59640
// MC_ChangeApeClass ( ) ;
59636: CALL 74636 0 0
// if event = 123 then
59640: LD_VAR 0 1
59644: PUSH
59645: LD_INT 123
59647: EQUAL
59648: IFFALSE 59654
// MC_Bazooka ( ) ;
59650: CALL 75286 0 0
// if event = 124 then
59654: LD_VAR 0 1
59658: PUSH
59659: LD_INT 124
59661: EQUAL
59662: IFFALSE 59668
// MC_TeleportExit ( ) ;
59664: CALL 75484 0 0
// if event = 125 then
59668: LD_VAR 0 1
59672: PUSH
59673: LD_INT 125
59675: EQUAL
59676: IFFALSE 59682
// MC_Deposits ( ) ;
59678: CALL 76131 0 0
// if event = 126 then
59682: LD_VAR 0 1
59686: PUSH
59687: LD_INT 126
59689: EQUAL
59690: IFFALSE 59696
// MC_RemoteDriver ( ) ;
59692: CALL 76756 0 0
// if event = 200 then
59696: LD_VAR 0 1
59700: PUSH
59701: LD_INT 200
59703: EQUAL
59704: IFFALSE 59710
// MC_Idle ( ) ;
59706: CALL 78705 0 0
// end ;
59710: PPOPN 1
59712: END
// export function MC_Reset ( base , tag ) ; var i ; begin
59713: LD_INT 0
59715: PPUSH
59716: PPUSH
// if not mc_bases [ base ] or not tag then
59717: LD_EXP 44
59721: PUSH
59722: LD_VAR 0 1
59726: ARRAY
59727: NOT
59728: PUSH
59729: LD_VAR 0 2
59733: NOT
59734: OR
59735: IFFALSE 59739
// exit ;
59737: GO 59803
// for i in mc_bases [ base ] union mc_ape [ base ] do
59739: LD_ADDR_VAR 0 4
59743: PUSH
59744: LD_EXP 44
59748: PUSH
59749: LD_VAR 0 1
59753: ARRAY
59754: PUSH
59755: LD_EXP 73
59759: PUSH
59760: LD_VAR 0 1
59764: ARRAY
59765: UNION
59766: PUSH
59767: FOR_IN
59768: IFFALSE 59801
// if GetTag ( i ) = tag then
59770: LD_VAR 0 4
59774: PPUSH
59775: CALL_OW 110
59779: PUSH
59780: LD_VAR 0 2
59784: EQUAL
59785: IFFALSE 59799
// SetTag ( i , 0 ) ;
59787: LD_VAR 0 4
59791: PPUSH
59792: LD_INT 0
59794: PPUSH
59795: CALL_OW 109
59799: GO 59767
59801: POP
59802: POP
// end ;
59803: LD_VAR 0 3
59807: RET
// export function MC_ClassManager ( ) ; var i , j , tmp , p , b , e , k ; begin
59808: LD_INT 0
59810: PPUSH
59811: PPUSH
59812: PPUSH
59813: PPUSH
59814: PPUSH
59815: PPUSH
59816: PPUSH
59817: PPUSH
// if not mc_bases then
59818: LD_EXP 44
59822: NOT
59823: IFFALSE 59827
// exit ;
59825: GO 60285
// for i = 1 to mc_bases do
59827: LD_ADDR_VAR 0 2
59831: PUSH
59832: DOUBLE
59833: LD_INT 1
59835: DEC
59836: ST_TO_ADDR
59837: LD_EXP 44
59841: PUSH
59842: FOR_TO
59843: IFFALSE 60283
// begin tmp := MC_ClassCheckReq ( i ) ;
59845: LD_ADDR_VAR 0 4
59849: PUSH
59850: LD_VAR 0 2
59854: PPUSH
59855: CALL 60290 0 1
59859: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , tmp ) ;
59860: LD_ADDR_EXP 85
59864: PUSH
59865: LD_EXP 85
59869: PPUSH
59870: LD_VAR 0 2
59874: PPUSH
59875: LD_VAR 0 4
59879: PPUSH
59880: CALL_OW 1
59884: ST_TO_ADDR
// if not tmp then
59885: LD_VAR 0 4
59889: NOT
59890: IFFALSE 59894
// continue ;
59892: GO 59842
// b := [ UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ] ;
59894: LD_ADDR_VAR 0 6
59898: PUSH
59899: LD_EXP 44
59903: PUSH
59904: LD_VAR 0 2
59908: ARRAY
59909: PPUSH
59910: LD_INT 2
59912: PUSH
59913: LD_INT 30
59915: PUSH
59916: LD_INT 4
59918: PUSH
59919: EMPTY
59920: LIST
59921: LIST
59922: PUSH
59923: LD_INT 30
59925: PUSH
59926: LD_INT 5
59928: PUSH
59929: EMPTY
59930: LIST
59931: LIST
59932: PUSH
59933: EMPTY
59934: LIST
59935: LIST
59936: LIST
59937: PPUSH
59938: CALL_OW 72
59942: PUSH
59943: LD_EXP 44
59947: PUSH
59948: LD_VAR 0 2
59952: ARRAY
59953: PPUSH
59954: LD_INT 2
59956: PUSH
59957: LD_INT 30
59959: PUSH
59960: LD_INT 0
59962: PUSH
59963: EMPTY
59964: LIST
59965: LIST
59966: PUSH
59967: LD_INT 30
59969: PUSH
59970: LD_INT 1
59972: PUSH
59973: EMPTY
59974: LIST
59975: LIST
59976: PUSH
59977: EMPTY
59978: LIST
59979: LIST
59980: LIST
59981: PPUSH
59982: CALL_OW 72
59986: PUSH
59987: LD_EXP 44
59991: PUSH
59992: LD_VAR 0 2
59996: ARRAY
59997: PPUSH
59998: LD_INT 30
60000: PUSH
60001: LD_INT 3
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: PPUSH
60008: CALL_OW 72
60012: PUSH
60013: LD_EXP 44
60017: PUSH
60018: LD_VAR 0 2
60022: ARRAY
60023: PPUSH
60024: LD_INT 2
60026: PUSH
60027: LD_INT 30
60029: PUSH
60030: LD_INT 6
60032: PUSH
60033: EMPTY
60034: LIST
60035: LIST
60036: PUSH
60037: LD_INT 30
60039: PUSH
60040: LD_INT 7
60042: PUSH
60043: EMPTY
60044: LIST
60045: LIST
60046: PUSH
60047: LD_INT 30
60049: PUSH
60050: LD_INT 8
60052: PUSH
60053: EMPTY
60054: LIST
60055: LIST
60056: PUSH
60057: EMPTY
60058: LIST
60059: LIST
60060: LIST
60061: LIST
60062: PPUSH
60063: CALL_OW 72
60067: PUSH
60068: EMPTY
60069: LIST
60070: LIST
60071: LIST
60072: LIST
60073: ST_TO_ADDR
// for j = 1 to 4 do
60074: LD_ADDR_VAR 0 3
60078: PUSH
60079: DOUBLE
60080: LD_INT 1
60082: DEC
60083: ST_TO_ADDR
60084: LD_INT 4
60086: PUSH
60087: FOR_TO
60088: IFFALSE 60279
// begin if not tmp [ j ] then
60090: LD_VAR 0 4
60094: PUSH
60095: LD_VAR 0 3
60099: ARRAY
60100: NOT
60101: IFFALSE 60105
// continue ;
60103: GO 60087
// for p in tmp [ j ] do
60105: LD_ADDR_VAR 0 5
60109: PUSH
60110: LD_VAR 0 4
60114: PUSH
60115: LD_VAR 0 3
60119: ARRAY
60120: PUSH
60121: FOR_IN
60122: IFFALSE 60275
// begin if not b [ j ] then
60124: LD_VAR 0 6
60128: PUSH
60129: LD_VAR 0 3
60133: ARRAY
60134: NOT
60135: IFFALSE 60139
// break ;
60137: GO 60275
// e := 0 ;
60139: LD_ADDR_VAR 0 7
60143: PUSH
60144: LD_INT 0
60146: ST_TO_ADDR
// for k in b [ j ] do
60147: LD_ADDR_VAR 0 8
60151: PUSH
60152: LD_VAR 0 6
60156: PUSH
60157: LD_VAR 0 3
60161: ARRAY
60162: PUSH
60163: FOR_IN
60164: IFFALSE 60191
// if IsNotFull ( k ) then
60166: LD_VAR 0 8
60170: PPUSH
60171: CALL 21567 0 1
60175: IFFALSE 60189
// begin e := k ;
60177: LD_ADDR_VAR 0 7
60181: PUSH
60182: LD_VAR 0 8
60186: ST_TO_ADDR
// break ;
60187: GO 60191
// end ;
60189: GO 60163
60191: POP
60192: POP
// if e and not UnitGoingToBuilding ( p , e ) then
60193: LD_VAR 0 7
60197: PUSH
60198: LD_VAR 0 5
60202: PPUSH
60203: LD_VAR 0 7
60207: PPUSH
60208: CALL 53987 0 2
60212: NOT
60213: AND
60214: IFFALSE 60273
// begin if IsInUnit ( p ) then
60216: LD_VAR 0 5
60220: PPUSH
60221: CALL_OW 310
60225: IFFALSE 60236
// ComExitBuilding ( p ) ;
60227: LD_VAR 0 5
60231: PPUSH
60232: CALL_OW 122
// ComEnterUnit ( p , e ) ;
60236: LD_VAR 0 5
60240: PPUSH
60241: LD_VAR 0 7
60245: PPUSH
60246: CALL_OW 120
// AddComChangeProfession ( p , j ) ;
60250: LD_VAR 0 5
60254: PPUSH
60255: LD_VAR 0 3
60259: PPUSH
60260: CALL_OW 183
// AddComExitBuilding ( p ) ;
60264: LD_VAR 0 5
60268: PPUSH
60269: CALL_OW 182
// end ; end ;
60273: GO 60121
60275: POP
60276: POP
// end ;
60277: GO 60087
60279: POP
60280: POP
// end ;
60281: GO 59842
60283: POP
60284: POP
// end ;
60285: LD_VAR 0 1
60289: RET
// export function MC_ClassCheckReq ( base ) ; var i , tmp , sol , eng , mech , sci , sort , j , p , b , bcount ; begin
60290: LD_INT 0
60292: PPUSH
60293: PPUSH
60294: PPUSH
60295: PPUSH
60296: PPUSH
60297: PPUSH
60298: PPUSH
60299: PPUSH
60300: PPUSH
60301: PPUSH
60302: PPUSH
60303: PPUSH
// if not base or not mc_bases [ base ] or not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
60304: LD_VAR 0 1
60308: NOT
60309: PUSH
60310: LD_EXP 44
60314: PUSH
60315: LD_VAR 0 1
60319: ARRAY
60320: NOT
60321: OR
60322: PUSH
60323: LD_EXP 44
60327: PUSH
60328: LD_VAR 0 1
60332: ARRAY
60333: PPUSH
60334: LD_INT 2
60336: PUSH
60337: LD_INT 30
60339: PUSH
60340: LD_INT 0
60342: PUSH
60343: EMPTY
60344: LIST
60345: LIST
60346: PUSH
60347: LD_INT 30
60349: PUSH
60350: LD_INT 1
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: PUSH
60357: EMPTY
60358: LIST
60359: LIST
60360: LIST
60361: PPUSH
60362: CALL_OW 72
60366: NOT
60367: OR
60368: IFFALSE 60372
// exit ;
60370: GO 63875
// tmp := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
60372: LD_ADDR_VAR 0 4
60376: PUSH
60377: LD_EXP 44
60381: PUSH
60382: LD_VAR 0 1
60386: ARRAY
60387: PPUSH
60388: LD_INT 2
60390: PUSH
60391: LD_INT 25
60393: PUSH
60394: LD_INT 1
60396: PUSH
60397: EMPTY
60398: LIST
60399: LIST
60400: PUSH
60401: LD_INT 25
60403: PUSH
60404: LD_INT 2
60406: PUSH
60407: EMPTY
60408: LIST
60409: LIST
60410: PUSH
60411: LD_INT 25
60413: PUSH
60414: LD_INT 3
60416: PUSH
60417: EMPTY
60418: LIST
60419: LIST
60420: PUSH
60421: LD_INT 25
60423: PUSH
60424: LD_INT 4
60426: PUSH
60427: EMPTY
60428: LIST
60429: LIST
60430: PUSH
60431: LD_INT 25
60433: PUSH
60434: LD_INT 5
60436: PUSH
60437: EMPTY
60438: LIST
60439: LIST
60440: PUSH
60441: LD_INT 25
60443: PUSH
60444: LD_INT 8
60446: PUSH
60447: EMPTY
60448: LIST
60449: LIST
60450: PUSH
60451: LD_INT 25
60453: PUSH
60454: LD_INT 9
60456: PUSH
60457: EMPTY
60458: LIST
60459: LIST
60460: PUSH
60461: EMPTY
60462: LIST
60463: LIST
60464: LIST
60465: LIST
60466: LIST
60467: LIST
60468: LIST
60469: LIST
60470: PPUSH
60471: CALL_OW 72
60475: ST_TO_ADDR
// if not tmp then
60476: LD_VAR 0 4
60480: NOT
60481: IFFALSE 60485
// exit ;
60483: GO 63875
// for i in tmp do
60485: LD_ADDR_VAR 0 3
60489: PUSH
60490: LD_VAR 0 4
60494: PUSH
60495: FOR_IN
60496: IFFALSE 60527
// if GetTag ( i ) then
60498: LD_VAR 0 3
60502: PPUSH
60503: CALL_OW 110
60507: IFFALSE 60525
// tmp := tmp diff i ;
60509: LD_ADDR_VAR 0 4
60513: PUSH
60514: LD_VAR 0 4
60518: PUSH
60519: LD_VAR 0 3
60523: DIFF
60524: ST_TO_ADDR
60525: GO 60495
60527: POP
60528: POP
// if not tmp then
60529: LD_VAR 0 4
60533: NOT
60534: IFFALSE 60538
// exit ;
60536: GO 63875
// sol := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
60538: LD_ADDR_VAR 0 5
60542: PUSH
60543: LD_EXP 44
60547: PUSH
60548: LD_VAR 0 1
60552: ARRAY
60553: PPUSH
60554: LD_INT 2
60556: PUSH
60557: LD_INT 25
60559: PUSH
60560: LD_INT 1
60562: PUSH
60563: EMPTY
60564: LIST
60565: LIST
60566: PUSH
60567: LD_INT 25
60569: PUSH
60570: LD_INT 5
60572: PUSH
60573: EMPTY
60574: LIST
60575: LIST
60576: PUSH
60577: LD_INT 25
60579: PUSH
60580: LD_INT 8
60582: PUSH
60583: EMPTY
60584: LIST
60585: LIST
60586: PUSH
60587: LD_INT 25
60589: PUSH
60590: LD_INT 9
60592: PUSH
60593: EMPTY
60594: LIST
60595: LIST
60596: PUSH
60597: EMPTY
60598: LIST
60599: LIST
60600: LIST
60601: LIST
60602: LIST
60603: PPUSH
60604: CALL_OW 72
60608: ST_TO_ADDR
// eng := UnitFilter ( mc_bases [ base ] , [ f_class , 2 ] ) ;
60609: LD_ADDR_VAR 0 6
60613: PUSH
60614: LD_EXP 44
60618: PUSH
60619: LD_VAR 0 1
60623: ARRAY
60624: PPUSH
60625: LD_INT 25
60627: PUSH
60628: LD_INT 2
60630: PUSH
60631: EMPTY
60632: LIST
60633: LIST
60634: PPUSH
60635: CALL_OW 72
60639: ST_TO_ADDR
// mech := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
60640: LD_ADDR_VAR 0 7
60644: PUSH
60645: LD_EXP 44
60649: PUSH
60650: LD_VAR 0 1
60654: ARRAY
60655: PPUSH
60656: LD_INT 25
60658: PUSH
60659: LD_INT 3
60661: PUSH
60662: EMPTY
60663: LIST
60664: LIST
60665: PPUSH
60666: CALL_OW 72
60670: ST_TO_ADDR
// sci := UnitFilter ( mc_bases [ base ] , [ [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
60671: LD_ADDR_VAR 0 8
60675: PUSH
60676: LD_EXP 44
60680: PUSH
60681: LD_VAR 0 1
60685: ARRAY
60686: PPUSH
60687: LD_INT 25
60689: PUSH
60690: LD_INT 4
60692: PUSH
60693: EMPTY
60694: LIST
60695: LIST
60696: PUSH
60697: LD_INT 24
60699: PUSH
60700: LD_INT 251
60702: PUSH
60703: EMPTY
60704: LIST
60705: LIST
60706: PUSH
60707: EMPTY
60708: LIST
60709: LIST
60710: PPUSH
60711: CALL_OW 72
60715: ST_TO_ADDR
// if mc_scan [ base ] then
60716: LD_EXP 67
60720: PUSH
60721: LD_VAR 0 1
60725: ARRAY
60726: IFFALSE 61187
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 4 ) ;
60728: LD_ADDR_EXP 86
60732: PUSH
60733: LD_EXP 86
60737: PPUSH
60738: LD_VAR 0 1
60742: PPUSH
60743: LD_INT 4
60745: PPUSH
60746: CALL_OW 1
60750: ST_TO_ADDR
// b := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
60751: LD_ADDR_VAR 0 12
60755: PUSH
60756: LD_EXP 44
60760: PUSH
60761: LD_VAR 0 1
60765: ARRAY
60766: PPUSH
60767: LD_INT 2
60769: PUSH
60770: LD_INT 30
60772: PUSH
60773: LD_INT 4
60775: PUSH
60776: EMPTY
60777: LIST
60778: LIST
60779: PUSH
60780: LD_INT 30
60782: PUSH
60783: LD_INT 5
60785: PUSH
60786: EMPTY
60787: LIST
60788: LIST
60789: PUSH
60790: EMPTY
60791: LIST
60792: LIST
60793: LIST
60794: PPUSH
60795: CALL_OW 72
60799: ST_TO_ADDR
// if not b then
60800: LD_VAR 0 12
60804: NOT
60805: IFFALSE 60809
// exit ;
60807: GO 63875
// p := [ ] ;
60809: LD_ADDR_VAR 0 11
60813: PUSH
60814: EMPTY
60815: ST_TO_ADDR
// if sci >= 2 then
60816: LD_VAR 0 8
60820: PUSH
60821: LD_INT 2
60823: GREATEREQUAL
60824: IFFALSE 60855
// sci := [ sci [ 1 ] , sci [ 2 ] ] else
60826: LD_ADDR_VAR 0 8
60830: PUSH
60831: LD_VAR 0 8
60835: PUSH
60836: LD_INT 1
60838: ARRAY
60839: PUSH
60840: LD_VAR 0 8
60844: PUSH
60845: LD_INT 2
60847: ARRAY
60848: PUSH
60849: EMPTY
60850: LIST
60851: LIST
60852: ST_TO_ADDR
60853: GO 60916
// if sci = 1 then
60855: LD_VAR 0 8
60859: PUSH
60860: LD_INT 1
60862: EQUAL
60863: IFFALSE 60884
// sci := [ sci [ 1 ] ] else
60865: LD_ADDR_VAR 0 8
60869: PUSH
60870: LD_VAR 0 8
60874: PUSH
60875: LD_INT 1
60877: ARRAY
60878: PUSH
60879: EMPTY
60880: LIST
60881: ST_TO_ADDR
60882: GO 60916
// if sci = 0 then
60884: LD_VAR 0 8
60888: PUSH
60889: LD_INT 0
60891: EQUAL
60892: IFFALSE 60916
// p := SortBySkill ( tmp , 4 ) [ 1 ] ;
60894: LD_ADDR_VAR 0 11
60898: PUSH
60899: LD_VAR 0 4
60903: PPUSH
60904: LD_INT 4
60906: PPUSH
60907: CALL 53850 0 2
60911: PUSH
60912: LD_INT 1
60914: ARRAY
60915: ST_TO_ADDR
// if eng > 4 then
60916: LD_VAR 0 6
60920: PUSH
60921: LD_INT 4
60923: GREATER
60924: IFFALSE 60970
// for i = eng downto 4 do
60926: LD_ADDR_VAR 0 3
60930: PUSH
60931: DOUBLE
60932: LD_VAR 0 6
60936: INC
60937: ST_TO_ADDR
60938: LD_INT 4
60940: PUSH
60941: FOR_DOWNTO
60942: IFFALSE 60968
// eng := eng diff eng [ i ] ;
60944: LD_ADDR_VAR 0 6
60948: PUSH
60949: LD_VAR 0 6
60953: PUSH
60954: LD_VAR 0 6
60958: PUSH
60959: LD_VAR 0 3
60963: ARRAY
60964: DIFF
60965: ST_TO_ADDR
60966: GO 60941
60968: POP
60969: POP
// tmp := tmp diff ( sol union eng union mech union sci ) ;
60970: LD_ADDR_VAR 0 4
60974: PUSH
60975: LD_VAR 0 4
60979: PUSH
60980: LD_VAR 0 5
60984: PUSH
60985: LD_VAR 0 6
60989: UNION
60990: PUSH
60991: LD_VAR 0 7
60995: UNION
60996: PUSH
60997: LD_VAR 0 8
61001: UNION
61002: DIFF
61003: ST_TO_ADDR
// bcount := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) + UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) * 6 ;
61004: LD_ADDR_VAR 0 13
61008: PUSH
61009: LD_EXP 44
61013: PUSH
61014: LD_VAR 0 1
61018: ARRAY
61019: PPUSH
61020: LD_INT 2
61022: PUSH
61023: LD_INT 30
61025: PUSH
61026: LD_INT 32
61028: PUSH
61029: EMPTY
61030: LIST
61031: LIST
61032: PUSH
61033: LD_INT 30
61035: PUSH
61036: LD_INT 31
61038: PUSH
61039: EMPTY
61040: LIST
61041: LIST
61042: PUSH
61043: EMPTY
61044: LIST
61045: LIST
61046: LIST
61047: PPUSH
61048: CALL_OW 72
61052: PUSH
61053: LD_EXP 44
61057: PUSH
61058: LD_VAR 0 1
61062: ARRAY
61063: PPUSH
61064: LD_INT 2
61066: PUSH
61067: LD_INT 30
61069: PUSH
61070: LD_INT 4
61072: PUSH
61073: EMPTY
61074: LIST
61075: LIST
61076: PUSH
61077: LD_INT 30
61079: PUSH
61080: LD_INT 5
61082: PUSH
61083: EMPTY
61084: LIST
61085: LIST
61086: PUSH
61087: EMPTY
61088: LIST
61089: LIST
61090: LIST
61091: PPUSH
61092: CALL_OW 72
61096: PUSH
61097: LD_INT 6
61099: MUL
61100: PLUS
61101: ST_TO_ADDR
// if bcount < tmp then
61102: LD_VAR 0 13
61106: PUSH
61107: LD_VAR 0 4
61111: LESS
61112: IFFALSE 61158
// for i = tmp downto bcount do
61114: LD_ADDR_VAR 0 3
61118: PUSH
61119: DOUBLE
61120: LD_VAR 0 4
61124: INC
61125: ST_TO_ADDR
61126: LD_VAR 0 13
61130: PUSH
61131: FOR_DOWNTO
61132: IFFALSE 61156
// tmp := Delete ( tmp , tmp ) ;
61134: LD_ADDR_VAR 0 4
61138: PUSH
61139: LD_VAR 0 4
61143: PPUSH
61144: LD_VAR 0 4
61148: PPUSH
61149: CALL_OW 3
61153: ST_TO_ADDR
61154: GO 61131
61156: POP
61157: POP
// result := [ tmp , 0 , 0 , p ] ;
61158: LD_ADDR_VAR 0 2
61162: PUSH
61163: LD_VAR 0 4
61167: PUSH
61168: LD_INT 0
61170: PUSH
61171: LD_INT 0
61173: PUSH
61174: LD_VAR 0 11
61178: PUSH
61179: EMPTY
61180: LIST
61181: LIST
61182: LIST
61183: LIST
61184: ST_TO_ADDR
// exit ;
61185: GO 63875
// end ; if not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
61187: LD_EXP 44
61191: PUSH
61192: LD_VAR 0 1
61196: ARRAY
61197: PPUSH
61198: LD_INT 2
61200: PUSH
61201: LD_INT 30
61203: PUSH
61204: LD_INT 6
61206: PUSH
61207: EMPTY
61208: LIST
61209: LIST
61210: PUSH
61211: LD_INT 30
61213: PUSH
61214: LD_INT 7
61216: PUSH
61217: EMPTY
61218: LIST
61219: LIST
61220: PUSH
61221: LD_INT 30
61223: PUSH
61224: LD_INT 8
61226: PUSH
61227: EMPTY
61228: LIST
61229: LIST
61230: PUSH
61231: EMPTY
61232: LIST
61233: LIST
61234: LIST
61235: LIST
61236: PPUSH
61237: CALL_OW 72
61241: NOT
61242: PUSH
61243: LD_EXP 44
61247: PUSH
61248: LD_VAR 0 1
61252: ARRAY
61253: PPUSH
61254: LD_INT 30
61256: PUSH
61257: LD_INT 3
61259: PUSH
61260: EMPTY
61261: LIST
61262: LIST
61263: PPUSH
61264: CALL_OW 72
61268: NOT
61269: AND
61270: IFFALSE 61342
// begin if eng = tmp then
61272: LD_VAR 0 6
61276: PUSH
61277: LD_VAR 0 4
61281: EQUAL
61282: IFFALSE 61286
// exit ;
61284: GO 63875
// mc_class_case_use := Replace ( mc_class_case_use , base , 1 ) ;
61286: LD_ADDR_EXP 86
61290: PUSH
61291: LD_EXP 86
61295: PPUSH
61296: LD_VAR 0 1
61300: PPUSH
61301: LD_INT 1
61303: PPUSH
61304: CALL_OW 1
61308: ST_TO_ADDR
// result := [ 0 , tmp diff eng , 0 , 0 ] ;
61309: LD_ADDR_VAR 0 2
61313: PUSH
61314: LD_INT 0
61316: PUSH
61317: LD_VAR 0 4
61321: PUSH
61322: LD_VAR 0 6
61326: DIFF
61327: PUSH
61328: LD_INT 0
61330: PUSH
61331: LD_INT 0
61333: PUSH
61334: EMPTY
61335: LIST
61336: LIST
61337: LIST
61338: LIST
61339: ST_TO_ADDR
// exit ;
61340: GO 63875
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
61342: LD_EXP 71
61346: PUSH
61347: LD_EXP 70
61351: PUSH
61352: LD_VAR 0 1
61356: ARRAY
61357: ARRAY
61358: PUSH
61359: LD_EXP 44
61363: PUSH
61364: LD_VAR 0 1
61368: ARRAY
61369: PPUSH
61370: LD_INT 2
61372: PUSH
61373: LD_INT 30
61375: PUSH
61376: LD_INT 6
61378: PUSH
61379: EMPTY
61380: LIST
61381: LIST
61382: PUSH
61383: LD_INT 30
61385: PUSH
61386: LD_INT 7
61388: PUSH
61389: EMPTY
61390: LIST
61391: LIST
61392: PUSH
61393: LD_INT 30
61395: PUSH
61396: LD_INT 8
61398: PUSH
61399: EMPTY
61400: LIST
61401: LIST
61402: PUSH
61403: EMPTY
61404: LIST
61405: LIST
61406: LIST
61407: LIST
61408: PPUSH
61409: CALL_OW 72
61413: AND
61414: PUSH
61415: LD_EXP 44
61419: PUSH
61420: LD_VAR 0 1
61424: ARRAY
61425: PPUSH
61426: LD_INT 30
61428: PUSH
61429: LD_INT 3
61431: PUSH
61432: EMPTY
61433: LIST
61434: LIST
61435: PPUSH
61436: CALL_OW 72
61440: NOT
61441: AND
61442: IFFALSE 61656
// begin if sci >= 6 then
61444: LD_VAR 0 8
61448: PUSH
61449: LD_INT 6
61451: GREATEREQUAL
61452: IFFALSE 61456
// exit ;
61454: GO 63875
// mc_class_case_use := Replace ( mc_class_case_use , base , 2 ) ;
61456: LD_ADDR_EXP 86
61460: PUSH
61461: LD_EXP 86
61465: PPUSH
61466: LD_VAR 0 1
61470: PPUSH
61471: LD_INT 2
61473: PPUSH
61474: CALL_OW 1
61478: ST_TO_ADDR
// sort := SortBySkill ( tmp diff sci , 4 ) ;
61479: LD_ADDR_VAR 0 9
61483: PUSH
61484: LD_VAR 0 4
61488: PUSH
61489: LD_VAR 0 8
61493: DIFF
61494: PPUSH
61495: LD_INT 4
61497: PPUSH
61498: CALL 53850 0 2
61502: ST_TO_ADDR
// p := [ ] ;
61503: LD_ADDR_VAR 0 11
61507: PUSH
61508: EMPTY
61509: ST_TO_ADDR
// if sci < 6 and sort > 6 then
61510: LD_VAR 0 8
61514: PUSH
61515: LD_INT 6
61517: LESS
61518: PUSH
61519: LD_VAR 0 9
61523: PUSH
61524: LD_INT 6
61526: GREATER
61527: AND
61528: IFFALSE 61609
// begin for i = 1 to 6 - sci do
61530: LD_ADDR_VAR 0 3
61534: PUSH
61535: DOUBLE
61536: LD_INT 1
61538: DEC
61539: ST_TO_ADDR
61540: LD_INT 6
61542: PUSH
61543: LD_VAR 0 8
61547: MINUS
61548: PUSH
61549: FOR_TO
61550: IFFALSE 61605
// begin p := Insert ( p , p + 1 , sort [ 1 ] ) ;
61552: LD_ADDR_VAR 0 11
61556: PUSH
61557: LD_VAR 0 11
61561: PPUSH
61562: LD_VAR 0 11
61566: PUSH
61567: LD_INT 1
61569: PLUS
61570: PPUSH
61571: LD_VAR 0 9
61575: PUSH
61576: LD_INT 1
61578: ARRAY
61579: PPUSH
61580: CALL_OW 2
61584: ST_TO_ADDR
// sort := Delete ( sort , 1 ) ;
61585: LD_ADDR_VAR 0 9
61589: PUSH
61590: LD_VAR 0 9
61594: PPUSH
61595: LD_INT 1
61597: PPUSH
61598: CALL_OW 3
61602: ST_TO_ADDR
// end ;
61603: GO 61549
61605: POP
61606: POP
// end else
61607: GO 61629
// if sort then
61609: LD_VAR 0 9
61613: IFFALSE 61629
// p := sort [ 1 ] ;
61615: LD_ADDR_VAR 0 11
61619: PUSH
61620: LD_VAR 0 9
61624: PUSH
61625: LD_INT 1
61627: ARRAY
61628: ST_TO_ADDR
// result := [ 0 , 0 , 0 , p ] ;
61629: LD_ADDR_VAR 0 2
61633: PUSH
61634: LD_INT 0
61636: PUSH
61637: LD_INT 0
61639: PUSH
61640: LD_INT 0
61642: PUSH
61643: LD_VAR 0 11
61647: PUSH
61648: EMPTY
61649: LIST
61650: LIST
61651: LIST
61652: LIST
61653: ST_TO_ADDR
// exit ;
61654: GO 63875
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
61656: LD_EXP 71
61660: PUSH
61661: LD_EXP 70
61665: PUSH
61666: LD_VAR 0 1
61670: ARRAY
61671: ARRAY
61672: PUSH
61673: LD_EXP 44
61677: PUSH
61678: LD_VAR 0 1
61682: ARRAY
61683: PPUSH
61684: LD_INT 2
61686: PUSH
61687: LD_INT 30
61689: PUSH
61690: LD_INT 6
61692: PUSH
61693: EMPTY
61694: LIST
61695: LIST
61696: PUSH
61697: LD_INT 30
61699: PUSH
61700: LD_INT 7
61702: PUSH
61703: EMPTY
61704: LIST
61705: LIST
61706: PUSH
61707: LD_INT 30
61709: PUSH
61710: LD_INT 8
61712: PUSH
61713: EMPTY
61714: LIST
61715: LIST
61716: PUSH
61717: EMPTY
61718: LIST
61719: LIST
61720: LIST
61721: LIST
61722: PPUSH
61723: CALL_OW 72
61727: AND
61728: PUSH
61729: LD_EXP 44
61733: PUSH
61734: LD_VAR 0 1
61738: ARRAY
61739: PPUSH
61740: LD_INT 30
61742: PUSH
61743: LD_INT 3
61745: PUSH
61746: EMPTY
61747: LIST
61748: LIST
61749: PPUSH
61750: CALL_OW 72
61754: AND
61755: IFFALSE 62489
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 3 ) ;
61757: LD_ADDR_EXP 86
61761: PUSH
61762: LD_EXP 86
61766: PPUSH
61767: LD_VAR 0 1
61771: PPUSH
61772: LD_INT 3
61774: PPUSH
61775: CALL_OW 1
61779: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
61780: LD_ADDR_VAR 0 2
61784: PUSH
61785: LD_INT 0
61787: PUSH
61788: LD_INT 0
61790: PUSH
61791: LD_INT 0
61793: PUSH
61794: LD_INT 0
61796: PUSH
61797: EMPTY
61798: LIST
61799: LIST
61800: LIST
61801: LIST
61802: ST_TO_ADDR
// if not eng then
61803: LD_VAR 0 6
61807: NOT
61808: IFFALSE 61871
// begin p := SortBySkill ( tmp , 2 ) [ 1 ] ;
61810: LD_ADDR_VAR 0 11
61814: PUSH
61815: LD_VAR 0 4
61819: PPUSH
61820: LD_INT 2
61822: PPUSH
61823: CALL 53850 0 2
61827: PUSH
61828: LD_INT 1
61830: ARRAY
61831: ST_TO_ADDR
// result := Replace ( result , 2 , p ) ;
61832: LD_ADDR_VAR 0 2
61836: PUSH
61837: LD_VAR 0 2
61841: PPUSH
61842: LD_INT 2
61844: PPUSH
61845: LD_VAR 0 11
61849: PPUSH
61850: CALL_OW 1
61854: ST_TO_ADDR
// tmp := tmp diff p ;
61855: LD_ADDR_VAR 0 4
61859: PUSH
61860: LD_VAR 0 4
61864: PUSH
61865: LD_VAR 0 11
61869: DIFF
61870: ST_TO_ADDR
// end ; if tmp and sci < 6 then
61871: LD_VAR 0 4
61875: PUSH
61876: LD_VAR 0 8
61880: PUSH
61881: LD_INT 6
61883: LESS
61884: AND
61885: IFFALSE 62073
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 4 ) ;
61887: LD_ADDR_VAR 0 9
61891: PUSH
61892: LD_VAR 0 4
61896: PUSH
61897: LD_VAR 0 8
61901: PUSH
61902: LD_VAR 0 7
61906: UNION
61907: DIFF
61908: PPUSH
61909: LD_INT 4
61911: PPUSH
61912: CALL 53850 0 2
61916: ST_TO_ADDR
// p := [ ] ;
61917: LD_ADDR_VAR 0 11
61921: PUSH
61922: EMPTY
61923: ST_TO_ADDR
// if sort then
61924: LD_VAR 0 9
61928: IFFALSE 62044
// for i = 1 to 6 - sci do
61930: LD_ADDR_VAR 0 3
61934: PUSH
61935: DOUBLE
61936: LD_INT 1
61938: DEC
61939: ST_TO_ADDR
61940: LD_INT 6
61942: PUSH
61943: LD_VAR 0 8
61947: MINUS
61948: PUSH
61949: FOR_TO
61950: IFFALSE 62042
// begin if i = sort then
61952: LD_VAR 0 3
61956: PUSH
61957: LD_VAR 0 9
61961: EQUAL
61962: IFFALSE 61966
// break ;
61964: GO 62042
// if GetClass ( i ) = 4 then
61966: LD_VAR 0 3
61970: PPUSH
61971: CALL_OW 257
61975: PUSH
61976: LD_INT 4
61978: EQUAL
61979: IFFALSE 61983
// continue ;
61981: GO 61949
// p := Insert ( p , p + 1 , sort [ i ] ) ;
61983: LD_ADDR_VAR 0 11
61987: PUSH
61988: LD_VAR 0 11
61992: PPUSH
61993: LD_VAR 0 11
61997: PUSH
61998: LD_INT 1
62000: PLUS
62001: PPUSH
62002: LD_VAR 0 9
62006: PUSH
62007: LD_VAR 0 3
62011: ARRAY
62012: PPUSH
62013: CALL_OW 2
62017: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
62018: LD_ADDR_VAR 0 4
62022: PUSH
62023: LD_VAR 0 4
62027: PUSH
62028: LD_VAR 0 9
62032: PUSH
62033: LD_VAR 0 3
62037: ARRAY
62038: DIFF
62039: ST_TO_ADDR
// end ;
62040: GO 61949
62042: POP
62043: POP
// if p then
62044: LD_VAR 0 11
62048: IFFALSE 62073
// result := Replace ( result , 4 , p ) ;
62050: LD_ADDR_VAR 0 2
62054: PUSH
62055: LD_VAR 0 2
62059: PPUSH
62060: LD_INT 4
62062: PPUSH
62063: LD_VAR 0 11
62067: PPUSH
62068: CALL_OW 1
62072: ST_TO_ADDR
// end ; if tmp and mech < 6 then
62073: LD_VAR 0 4
62077: PUSH
62078: LD_VAR 0 7
62082: PUSH
62083: LD_INT 6
62085: LESS
62086: AND
62087: IFFALSE 62275
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
62089: LD_ADDR_VAR 0 9
62093: PUSH
62094: LD_VAR 0 4
62098: PUSH
62099: LD_VAR 0 8
62103: PUSH
62104: LD_VAR 0 7
62108: UNION
62109: DIFF
62110: PPUSH
62111: LD_INT 3
62113: PPUSH
62114: CALL 53850 0 2
62118: ST_TO_ADDR
// p := [ ] ;
62119: LD_ADDR_VAR 0 11
62123: PUSH
62124: EMPTY
62125: ST_TO_ADDR
// if sort then
62126: LD_VAR 0 9
62130: IFFALSE 62246
// for i = 1 to 6 - mech do
62132: LD_ADDR_VAR 0 3
62136: PUSH
62137: DOUBLE
62138: LD_INT 1
62140: DEC
62141: ST_TO_ADDR
62142: LD_INT 6
62144: PUSH
62145: LD_VAR 0 7
62149: MINUS
62150: PUSH
62151: FOR_TO
62152: IFFALSE 62244
// begin if i = sort then
62154: LD_VAR 0 3
62158: PUSH
62159: LD_VAR 0 9
62163: EQUAL
62164: IFFALSE 62168
// break ;
62166: GO 62244
// if GetClass ( i ) = 3 then
62168: LD_VAR 0 3
62172: PPUSH
62173: CALL_OW 257
62177: PUSH
62178: LD_INT 3
62180: EQUAL
62181: IFFALSE 62185
// continue ;
62183: GO 62151
// p := Insert ( p , p + 1 , sort [ i ] ) ;
62185: LD_ADDR_VAR 0 11
62189: PUSH
62190: LD_VAR 0 11
62194: PPUSH
62195: LD_VAR 0 11
62199: PUSH
62200: LD_INT 1
62202: PLUS
62203: PPUSH
62204: LD_VAR 0 9
62208: PUSH
62209: LD_VAR 0 3
62213: ARRAY
62214: PPUSH
62215: CALL_OW 2
62219: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
62220: LD_ADDR_VAR 0 4
62224: PUSH
62225: LD_VAR 0 4
62229: PUSH
62230: LD_VAR 0 9
62234: PUSH
62235: LD_VAR 0 3
62239: ARRAY
62240: DIFF
62241: ST_TO_ADDR
// end ;
62242: GO 62151
62244: POP
62245: POP
// if p then
62246: LD_VAR 0 11
62250: IFFALSE 62275
// result := Replace ( result , 3 , p ) ;
62252: LD_ADDR_VAR 0 2
62256: PUSH
62257: LD_VAR 0 2
62261: PPUSH
62262: LD_INT 3
62264: PPUSH
62265: LD_VAR 0 11
62269: PPUSH
62270: CALL_OW 1
62274: ST_TO_ADDR
// end ; if tmp > 6 and eng < 6 then
62275: LD_VAR 0 4
62279: PUSH
62280: LD_INT 6
62282: GREATER
62283: PUSH
62284: LD_VAR 0 6
62288: PUSH
62289: LD_INT 6
62291: LESS
62292: AND
62293: IFFALSE 62487
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
62295: LD_ADDR_VAR 0 9
62299: PUSH
62300: LD_VAR 0 4
62304: PUSH
62305: LD_VAR 0 8
62309: PUSH
62310: LD_VAR 0 7
62314: UNION
62315: PUSH
62316: LD_VAR 0 6
62320: UNION
62321: DIFF
62322: PPUSH
62323: LD_INT 2
62325: PPUSH
62326: CALL 53850 0 2
62330: ST_TO_ADDR
// p := [ ] ;
62331: LD_ADDR_VAR 0 11
62335: PUSH
62336: EMPTY
62337: ST_TO_ADDR
// if sort then
62338: LD_VAR 0 9
62342: IFFALSE 62458
// for i = 1 to 6 - eng do
62344: LD_ADDR_VAR 0 3
62348: PUSH
62349: DOUBLE
62350: LD_INT 1
62352: DEC
62353: ST_TO_ADDR
62354: LD_INT 6
62356: PUSH
62357: LD_VAR 0 6
62361: MINUS
62362: PUSH
62363: FOR_TO
62364: IFFALSE 62456
// begin if i = sort then
62366: LD_VAR 0 3
62370: PUSH
62371: LD_VAR 0 9
62375: EQUAL
62376: IFFALSE 62380
// break ;
62378: GO 62456
// if GetClass ( i ) = 2 then
62380: LD_VAR 0 3
62384: PPUSH
62385: CALL_OW 257
62389: PUSH
62390: LD_INT 2
62392: EQUAL
62393: IFFALSE 62397
// continue ;
62395: GO 62363
// p := Insert ( p , p + 1 , sort [ i ] ) ;
62397: LD_ADDR_VAR 0 11
62401: PUSH
62402: LD_VAR 0 11
62406: PPUSH
62407: LD_VAR 0 11
62411: PUSH
62412: LD_INT 1
62414: PLUS
62415: PPUSH
62416: LD_VAR 0 9
62420: PUSH
62421: LD_VAR 0 3
62425: ARRAY
62426: PPUSH
62427: CALL_OW 2
62431: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
62432: LD_ADDR_VAR 0 4
62436: PUSH
62437: LD_VAR 0 4
62441: PUSH
62442: LD_VAR 0 9
62446: PUSH
62447: LD_VAR 0 3
62451: ARRAY
62452: DIFF
62453: ST_TO_ADDR
// end ;
62454: GO 62363
62456: POP
62457: POP
// if p then
62458: LD_VAR 0 11
62462: IFFALSE 62487
// result := Replace ( result , 2 , p ) ;
62464: LD_ADDR_VAR 0 2
62468: PUSH
62469: LD_VAR 0 2
62473: PPUSH
62474: LD_INT 2
62476: PPUSH
62477: LD_VAR 0 11
62481: PPUSH
62482: CALL_OW 1
62486: ST_TO_ADDR
// end ; exit ;
62487: GO 63875
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and mc_build_list [ base ] then
62489: LD_EXP 71
62493: PUSH
62494: LD_EXP 70
62498: PUSH
62499: LD_VAR 0 1
62503: ARRAY
62504: ARRAY
62505: NOT
62506: PUSH
62507: LD_EXP 44
62511: PUSH
62512: LD_VAR 0 1
62516: ARRAY
62517: PPUSH
62518: LD_INT 30
62520: PUSH
62521: LD_INT 3
62523: PUSH
62524: EMPTY
62525: LIST
62526: LIST
62527: PPUSH
62528: CALL_OW 72
62532: AND
62533: PUSH
62534: LD_EXP 49
62538: PUSH
62539: LD_VAR 0 1
62543: ARRAY
62544: AND
62545: IFFALSE 63153
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 5 ) ;
62547: LD_ADDR_EXP 86
62551: PUSH
62552: LD_EXP 86
62556: PPUSH
62557: LD_VAR 0 1
62561: PPUSH
62562: LD_INT 5
62564: PPUSH
62565: CALL_OW 1
62569: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
62570: LD_ADDR_VAR 0 2
62574: PUSH
62575: LD_INT 0
62577: PUSH
62578: LD_INT 0
62580: PUSH
62581: LD_INT 0
62583: PUSH
62584: LD_INT 0
62586: PUSH
62587: EMPTY
62588: LIST
62589: LIST
62590: LIST
62591: LIST
62592: ST_TO_ADDR
// if sci > 1 then
62593: LD_VAR 0 8
62597: PUSH
62598: LD_INT 1
62600: GREATER
62601: IFFALSE 62629
// tmp := tmp diff ( sci diff sci [ 1 ] ) ;
62603: LD_ADDR_VAR 0 4
62607: PUSH
62608: LD_VAR 0 4
62612: PUSH
62613: LD_VAR 0 8
62617: PUSH
62618: LD_VAR 0 8
62622: PUSH
62623: LD_INT 1
62625: ARRAY
62626: DIFF
62627: DIFF
62628: ST_TO_ADDR
// if tmp and not sci then
62629: LD_VAR 0 4
62633: PUSH
62634: LD_VAR 0 8
62638: NOT
62639: AND
62640: IFFALSE 62709
// begin sort := SortBySkill ( tmp , 4 ) ;
62642: LD_ADDR_VAR 0 9
62646: PUSH
62647: LD_VAR 0 4
62651: PPUSH
62652: LD_INT 4
62654: PPUSH
62655: CALL 53850 0 2
62659: ST_TO_ADDR
// if sort then
62660: LD_VAR 0 9
62664: IFFALSE 62680
// p := sort [ 1 ] ;
62666: LD_ADDR_VAR 0 11
62670: PUSH
62671: LD_VAR 0 9
62675: PUSH
62676: LD_INT 1
62678: ARRAY
62679: ST_TO_ADDR
// if p then
62680: LD_VAR 0 11
62684: IFFALSE 62709
// result := Replace ( result , 4 , p ) ;
62686: LD_ADDR_VAR 0 2
62690: PUSH
62691: LD_VAR 0 2
62695: PPUSH
62696: LD_INT 4
62698: PPUSH
62699: LD_VAR 0 11
62703: PPUSH
62704: CALL_OW 1
62708: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
62709: LD_ADDR_VAR 0 4
62713: PUSH
62714: LD_VAR 0 4
62718: PUSH
62719: LD_VAR 0 7
62723: DIFF
62724: ST_TO_ADDR
// if tmp and mech < 6 then
62725: LD_VAR 0 4
62729: PUSH
62730: LD_VAR 0 7
62734: PUSH
62735: LD_INT 6
62737: LESS
62738: AND
62739: IFFALSE 62927
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
62741: LD_ADDR_VAR 0 9
62745: PUSH
62746: LD_VAR 0 4
62750: PUSH
62751: LD_VAR 0 8
62755: PUSH
62756: LD_VAR 0 7
62760: UNION
62761: DIFF
62762: PPUSH
62763: LD_INT 3
62765: PPUSH
62766: CALL 53850 0 2
62770: ST_TO_ADDR
// p := [ ] ;
62771: LD_ADDR_VAR 0 11
62775: PUSH
62776: EMPTY
62777: ST_TO_ADDR
// if sort then
62778: LD_VAR 0 9
62782: IFFALSE 62898
// for i = 1 to 6 - mech do
62784: LD_ADDR_VAR 0 3
62788: PUSH
62789: DOUBLE
62790: LD_INT 1
62792: DEC
62793: ST_TO_ADDR
62794: LD_INT 6
62796: PUSH
62797: LD_VAR 0 7
62801: MINUS
62802: PUSH
62803: FOR_TO
62804: IFFALSE 62896
// begin if i = sort then
62806: LD_VAR 0 3
62810: PUSH
62811: LD_VAR 0 9
62815: EQUAL
62816: IFFALSE 62820
// break ;
62818: GO 62896
// if GetClass ( i ) = 3 then
62820: LD_VAR 0 3
62824: PPUSH
62825: CALL_OW 257
62829: PUSH
62830: LD_INT 3
62832: EQUAL
62833: IFFALSE 62837
// continue ;
62835: GO 62803
// p := Insert ( p , p + 1 , sort [ i ] ) ;
62837: LD_ADDR_VAR 0 11
62841: PUSH
62842: LD_VAR 0 11
62846: PPUSH
62847: LD_VAR 0 11
62851: PUSH
62852: LD_INT 1
62854: PLUS
62855: PPUSH
62856: LD_VAR 0 9
62860: PUSH
62861: LD_VAR 0 3
62865: ARRAY
62866: PPUSH
62867: CALL_OW 2
62871: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
62872: LD_ADDR_VAR 0 4
62876: PUSH
62877: LD_VAR 0 4
62881: PUSH
62882: LD_VAR 0 9
62886: PUSH
62887: LD_VAR 0 3
62891: ARRAY
62892: DIFF
62893: ST_TO_ADDR
// end ;
62894: GO 62803
62896: POP
62897: POP
// if p then
62898: LD_VAR 0 11
62902: IFFALSE 62927
// result := Replace ( result , 3 , p ) ;
62904: LD_ADDR_VAR 0 2
62908: PUSH
62909: LD_VAR 0 2
62913: PPUSH
62914: LD_INT 3
62916: PPUSH
62917: LD_VAR 0 11
62921: PPUSH
62922: CALL_OW 1
62926: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
62927: LD_ADDR_VAR 0 4
62931: PUSH
62932: LD_VAR 0 4
62936: PUSH
62937: LD_VAR 0 6
62941: DIFF
62942: ST_TO_ADDR
// if tmp and eng < 6 then
62943: LD_VAR 0 4
62947: PUSH
62948: LD_VAR 0 6
62952: PUSH
62953: LD_INT 6
62955: LESS
62956: AND
62957: IFFALSE 63151
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
62959: LD_ADDR_VAR 0 9
62963: PUSH
62964: LD_VAR 0 4
62968: PUSH
62969: LD_VAR 0 8
62973: PUSH
62974: LD_VAR 0 7
62978: UNION
62979: PUSH
62980: LD_VAR 0 6
62984: UNION
62985: DIFF
62986: PPUSH
62987: LD_INT 2
62989: PPUSH
62990: CALL 53850 0 2
62994: ST_TO_ADDR
// p := [ ] ;
62995: LD_ADDR_VAR 0 11
62999: PUSH
63000: EMPTY
63001: ST_TO_ADDR
// if sort then
63002: LD_VAR 0 9
63006: IFFALSE 63122
// for i = 1 to 6 - eng do
63008: LD_ADDR_VAR 0 3
63012: PUSH
63013: DOUBLE
63014: LD_INT 1
63016: DEC
63017: ST_TO_ADDR
63018: LD_INT 6
63020: PUSH
63021: LD_VAR 0 6
63025: MINUS
63026: PUSH
63027: FOR_TO
63028: IFFALSE 63120
// begin if i = sort then
63030: LD_VAR 0 3
63034: PUSH
63035: LD_VAR 0 9
63039: EQUAL
63040: IFFALSE 63044
// break ;
63042: GO 63120
// if GetClass ( i ) = 2 then
63044: LD_VAR 0 3
63048: PPUSH
63049: CALL_OW 257
63053: PUSH
63054: LD_INT 2
63056: EQUAL
63057: IFFALSE 63061
// continue ;
63059: GO 63027
// p := Insert ( p , p + 1 , sort [ i ] ) ;
63061: LD_ADDR_VAR 0 11
63065: PUSH
63066: LD_VAR 0 11
63070: PPUSH
63071: LD_VAR 0 11
63075: PUSH
63076: LD_INT 1
63078: PLUS
63079: PPUSH
63080: LD_VAR 0 9
63084: PUSH
63085: LD_VAR 0 3
63089: ARRAY
63090: PPUSH
63091: CALL_OW 2
63095: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
63096: LD_ADDR_VAR 0 4
63100: PUSH
63101: LD_VAR 0 4
63105: PUSH
63106: LD_VAR 0 9
63110: PUSH
63111: LD_VAR 0 3
63115: ARRAY
63116: DIFF
63117: ST_TO_ADDR
// end ;
63118: GO 63027
63120: POP
63121: POP
// if p then
63122: LD_VAR 0 11
63126: IFFALSE 63151
// result := Replace ( result , 2 , p ) ;
63128: LD_ADDR_VAR 0 2
63132: PUSH
63133: LD_VAR 0 2
63137: PPUSH
63138: LD_INT 2
63140: PPUSH
63141: LD_VAR 0 11
63145: PPUSH
63146: CALL_OW 1
63150: ST_TO_ADDR
// end ; exit ;
63151: GO 63875
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and not mc_build_list [ base ] then
63153: LD_EXP 71
63157: PUSH
63158: LD_EXP 70
63162: PUSH
63163: LD_VAR 0 1
63167: ARRAY
63168: ARRAY
63169: NOT
63170: PUSH
63171: LD_EXP 44
63175: PUSH
63176: LD_VAR 0 1
63180: ARRAY
63181: PPUSH
63182: LD_INT 30
63184: PUSH
63185: LD_INT 3
63187: PUSH
63188: EMPTY
63189: LIST
63190: LIST
63191: PPUSH
63192: CALL_OW 72
63196: AND
63197: PUSH
63198: LD_EXP 49
63202: PUSH
63203: LD_VAR 0 1
63207: ARRAY
63208: NOT
63209: AND
63210: IFFALSE 63875
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 6 ) ;
63212: LD_ADDR_EXP 86
63216: PUSH
63217: LD_EXP 86
63221: PPUSH
63222: LD_VAR 0 1
63226: PPUSH
63227: LD_INT 6
63229: PPUSH
63230: CALL_OW 1
63234: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
63235: LD_ADDR_VAR 0 2
63239: PUSH
63240: LD_INT 0
63242: PUSH
63243: LD_INT 0
63245: PUSH
63246: LD_INT 0
63248: PUSH
63249: LD_INT 0
63251: PUSH
63252: EMPTY
63253: LIST
63254: LIST
63255: LIST
63256: LIST
63257: ST_TO_ADDR
// if sci >= 1 then
63258: LD_VAR 0 8
63262: PUSH
63263: LD_INT 1
63265: GREATEREQUAL
63266: IFFALSE 63288
// tmp := tmp diff sci [ 1 ] ;
63268: LD_ADDR_VAR 0 4
63272: PUSH
63273: LD_VAR 0 4
63277: PUSH
63278: LD_VAR 0 8
63282: PUSH
63283: LD_INT 1
63285: ARRAY
63286: DIFF
63287: ST_TO_ADDR
// if tmp and not sci then
63288: LD_VAR 0 4
63292: PUSH
63293: LD_VAR 0 8
63297: NOT
63298: AND
63299: IFFALSE 63368
// begin sort := SortBySkill ( tmp , 4 ) ;
63301: LD_ADDR_VAR 0 9
63305: PUSH
63306: LD_VAR 0 4
63310: PPUSH
63311: LD_INT 4
63313: PPUSH
63314: CALL 53850 0 2
63318: ST_TO_ADDR
// if sort then
63319: LD_VAR 0 9
63323: IFFALSE 63339
// p := sort [ 1 ] ;
63325: LD_ADDR_VAR 0 11
63329: PUSH
63330: LD_VAR 0 9
63334: PUSH
63335: LD_INT 1
63337: ARRAY
63338: ST_TO_ADDR
// if p then
63339: LD_VAR 0 11
63343: IFFALSE 63368
// result := Replace ( result , 4 , p ) ;
63345: LD_ADDR_VAR 0 2
63349: PUSH
63350: LD_VAR 0 2
63354: PPUSH
63355: LD_INT 4
63357: PPUSH
63358: LD_VAR 0 11
63362: PPUSH
63363: CALL_OW 1
63367: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
63368: LD_ADDR_VAR 0 4
63372: PUSH
63373: LD_VAR 0 4
63377: PUSH
63378: LD_VAR 0 7
63382: DIFF
63383: ST_TO_ADDR
// if tmp and mech < 6 then
63384: LD_VAR 0 4
63388: PUSH
63389: LD_VAR 0 7
63393: PUSH
63394: LD_INT 6
63396: LESS
63397: AND
63398: IFFALSE 63580
// begin sort := SortBySkill ( tmp diff mech , 3 ) ;
63400: LD_ADDR_VAR 0 9
63404: PUSH
63405: LD_VAR 0 4
63409: PUSH
63410: LD_VAR 0 7
63414: DIFF
63415: PPUSH
63416: LD_INT 3
63418: PPUSH
63419: CALL 53850 0 2
63423: ST_TO_ADDR
// p := [ ] ;
63424: LD_ADDR_VAR 0 11
63428: PUSH
63429: EMPTY
63430: ST_TO_ADDR
// if sort then
63431: LD_VAR 0 9
63435: IFFALSE 63551
// for i = 1 to 6 - mech do
63437: LD_ADDR_VAR 0 3
63441: PUSH
63442: DOUBLE
63443: LD_INT 1
63445: DEC
63446: ST_TO_ADDR
63447: LD_INT 6
63449: PUSH
63450: LD_VAR 0 7
63454: MINUS
63455: PUSH
63456: FOR_TO
63457: IFFALSE 63549
// begin if i = sort then
63459: LD_VAR 0 3
63463: PUSH
63464: LD_VAR 0 9
63468: EQUAL
63469: IFFALSE 63473
// break ;
63471: GO 63549
// if GetClass ( i ) = 3 then
63473: LD_VAR 0 3
63477: PPUSH
63478: CALL_OW 257
63482: PUSH
63483: LD_INT 3
63485: EQUAL
63486: IFFALSE 63490
// continue ;
63488: GO 63456
// p := Insert ( p , p + 1 , sort [ i ] ) ;
63490: LD_ADDR_VAR 0 11
63494: PUSH
63495: LD_VAR 0 11
63499: PPUSH
63500: LD_VAR 0 11
63504: PUSH
63505: LD_INT 1
63507: PLUS
63508: PPUSH
63509: LD_VAR 0 9
63513: PUSH
63514: LD_VAR 0 3
63518: ARRAY
63519: PPUSH
63520: CALL_OW 2
63524: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
63525: LD_ADDR_VAR 0 4
63529: PUSH
63530: LD_VAR 0 4
63534: PUSH
63535: LD_VAR 0 9
63539: PUSH
63540: LD_VAR 0 3
63544: ARRAY
63545: DIFF
63546: ST_TO_ADDR
// end ;
63547: GO 63456
63549: POP
63550: POP
// if p then
63551: LD_VAR 0 11
63555: IFFALSE 63580
// result := Replace ( result , 3 , p ) ;
63557: LD_ADDR_VAR 0 2
63561: PUSH
63562: LD_VAR 0 2
63566: PPUSH
63567: LD_INT 3
63569: PPUSH
63570: LD_VAR 0 11
63574: PPUSH
63575: CALL_OW 1
63579: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
63580: LD_ADDR_VAR 0 4
63584: PUSH
63585: LD_VAR 0 4
63589: PUSH
63590: LD_VAR 0 6
63594: DIFF
63595: ST_TO_ADDR
// if tmp and eng < 4 then
63596: LD_VAR 0 4
63600: PUSH
63601: LD_VAR 0 6
63605: PUSH
63606: LD_INT 4
63608: LESS
63609: AND
63610: IFFALSE 63800
// begin sort := SortBySkill ( tmp diff ( mech union eng ) , 2 ) ;
63612: LD_ADDR_VAR 0 9
63616: PUSH
63617: LD_VAR 0 4
63621: PUSH
63622: LD_VAR 0 7
63626: PUSH
63627: LD_VAR 0 6
63631: UNION
63632: DIFF
63633: PPUSH
63634: LD_INT 2
63636: PPUSH
63637: CALL 53850 0 2
63641: ST_TO_ADDR
// p := [ ] ;
63642: LD_ADDR_VAR 0 11
63646: PUSH
63647: EMPTY
63648: ST_TO_ADDR
// if sort then
63649: LD_VAR 0 9
63653: IFFALSE 63769
// for i = 1 to 4 - eng do
63655: LD_ADDR_VAR 0 3
63659: PUSH
63660: DOUBLE
63661: LD_INT 1
63663: DEC
63664: ST_TO_ADDR
63665: LD_INT 4
63667: PUSH
63668: LD_VAR 0 6
63672: MINUS
63673: PUSH
63674: FOR_TO
63675: IFFALSE 63767
// begin if i = sort then
63677: LD_VAR 0 3
63681: PUSH
63682: LD_VAR 0 9
63686: EQUAL
63687: IFFALSE 63691
// break ;
63689: GO 63767
// if GetClass ( i ) = 2 then
63691: LD_VAR 0 3
63695: PPUSH
63696: CALL_OW 257
63700: PUSH
63701: LD_INT 2
63703: EQUAL
63704: IFFALSE 63708
// continue ;
63706: GO 63674
// p := Insert ( p , p + 1 , sort [ i ] ) ;
63708: LD_ADDR_VAR 0 11
63712: PUSH
63713: LD_VAR 0 11
63717: PPUSH
63718: LD_VAR 0 11
63722: PUSH
63723: LD_INT 1
63725: PLUS
63726: PPUSH
63727: LD_VAR 0 9
63731: PUSH
63732: LD_VAR 0 3
63736: ARRAY
63737: PPUSH
63738: CALL_OW 2
63742: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
63743: LD_ADDR_VAR 0 4
63747: PUSH
63748: LD_VAR 0 4
63752: PUSH
63753: LD_VAR 0 9
63757: PUSH
63758: LD_VAR 0 3
63762: ARRAY
63763: DIFF
63764: ST_TO_ADDR
// end ;
63765: GO 63674
63767: POP
63768: POP
// if p then
63769: LD_VAR 0 11
63773: IFFALSE 63798
// result := Replace ( result , 2 , p ) ;
63775: LD_ADDR_VAR 0 2
63779: PUSH
63780: LD_VAR 0 2
63784: PPUSH
63785: LD_INT 2
63787: PPUSH
63788: LD_VAR 0 11
63792: PPUSH
63793: CALL_OW 1
63797: ST_TO_ADDR
// end else
63798: GO 63844
// for i = eng downto 5 do
63800: LD_ADDR_VAR 0 3
63804: PUSH
63805: DOUBLE
63806: LD_VAR 0 6
63810: INC
63811: ST_TO_ADDR
63812: LD_INT 5
63814: PUSH
63815: FOR_DOWNTO
63816: IFFALSE 63842
// tmp := tmp union eng [ i ] ;
63818: LD_ADDR_VAR 0 4
63822: PUSH
63823: LD_VAR 0 4
63827: PUSH
63828: LD_VAR 0 6
63832: PUSH
63833: LD_VAR 0 3
63837: ARRAY
63838: UNION
63839: ST_TO_ADDR
63840: GO 63815
63842: POP
63843: POP
// result := Replace ( result , 1 , tmp diff sol ) ;
63844: LD_ADDR_VAR 0 2
63848: PUSH
63849: LD_VAR 0 2
63853: PPUSH
63854: LD_INT 1
63856: PPUSH
63857: LD_VAR 0 4
63861: PUSH
63862: LD_VAR 0 5
63866: DIFF
63867: PPUSH
63868: CALL_OW 1
63872: ST_TO_ADDR
// exit ;
63873: GO 63875
// end ; end ;
63875: LD_VAR 0 2
63879: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
63880: LD_INT 0
63882: PPUSH
63883: PPUSH
63884: PPUSH
// if not mc_bases then
63885: LD_EXP 44
63889: NOT
63890: IFFALSE 63894
// exit ;
63892: GO 64000
// for i = 1 to mc_bases do
63894: LD_ADDR_VAR 0 2
63898: PUSH
63899: DOUBLE
63900: LD_INT 1
63902: DEC
63903: ST_TO_ADDR
63904: LD_EXP 44
63908: PUSH
63909: FOR_TO
63910: IFFALSE 63991
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
63912: LD_ADDR_VAR 0 3
63916: PUSH
63917: LD_EXP 44
63921: PUSH
63922: LD_VAR 0 2
63926: ARRAY
63927: PPUSH
63928: LD_INT 21
63930: PUSH
63931: LD_INT 3
63933: PUSH
63934: EMPTY
63935: LIST
63936: LIST
63937: PUSH
63938: LD_INT 3
63940: PUSH
63941: LD_INT 24
63943: PUSH
63944: LD_INT 1000
63946: PUSH
63947: EMPTY
63948: LIST
63949: LIST
63950: PUSH
63951: EMPTY
63952: LIST
63953: LIST
63954: PUSH
63955: EMPTY
63956: LIST
63957: LIST
63958: PPUSH
63959: CALL_OW 72
63963: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
63964: LD_ADDR_EXP 45
63968: PUSH
63969: LD_EXP 45
63973: PPUSH
63974: LD_VAR 0 2
63978: PPUSH
63979: LD_VAR 0 3
63983: PPUSH
63984: CALL_OW 1
63988: ST_TO_ADDR
// end ;
63989: GO 63909
63991: POP
63992: POP
// RaiseSailEvent ( 101 ) ;
63993: LD_INT 101
63995: PPUSH
63996: CALL_OW 427
// end ;
64000: LD_VAR 0 1
64004: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
64005: LD_INT 0
64007: PPUSH
64008: PPUSH
64009: PPUSH
64010: PPUSH
64011: PPUSH
64012: PPUSH
64013: PPUSH
// if not mc_bases then
64014: LD_EXP 44
64018: NOT
64019: IFFALSE 64023
// exit ;
64021: GO 64596
// for i = 1 to mc_bases do
64023: LD_ADDR_VAR 0 2
64027: PUSH
64028: DOUBLE
64029: LD_INT 1
64031: DEC
64032: ST_TO_ADDR
64033: LD_EXP 44
64037: PUSH
64038: FOR_TO
64039: IFFALSE 64587
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 800 ] ] ] ] ) ;
64041: LD_ADDR_VAR 0 5
64045: PUSH
64046: LD_EXP 44
64050: PUSH
64051: LD_VAR 0 2
64055: ARRAY
64056: PUSH
64057: LD_EXP 73
64061: PUSH
64062: LD_VAR 0 2
64066: ARRAY
64067: UNION
64068: PPUSH
64069: LD_INT 21
64071: PUSH
64072: LD_INT 1
64074: PUSH
64075: EMPTY
64076: LIST
64077: LIST
64078: PUSH
64079: LD_INT 1
64081: PUSH
64082: LD_INT 3
64084: PUSH
64085: LD_INT 54
64087: PUSH
64088: EMPTY
64089: LIST
64090: PUSH
64091: EMPTY
64092: LIST
64093: LIST
64094: PUSH
64095: LD_INT 3
64097: PUSH
64098: LD_INT 24
64100: PUSH
64101: LD_INT 800
64103: PUSH
64104: EMPTY
64105: LIST
64106: LIST
64107: PUSH
64108: EMPTY
64109: LIST
64110: LIST
64111: PUSH
64112: EMPTY
64113: LIST
64114: LIST
64115: LIST
64116: PUSH
64117: EMPTY
64118: LIST
64119: LIST
64120: PPUSH
64121: CALL_OW 72
64125: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
64126: LD_ADDR_VAR 0 6
64130: PUSH
64131: LD_EXP 44
64135: PUSH
64136: LD_VAR 0 2
64140: ARRAY
64141: PPUSH
64142: LD_INT 21
64144: PUSH
64145: LD_INT 1
64147: PUSH
64148: EMPTY
64149: LIST
64150: LIST
64151: PUSH
64152: LD_INT 1
64154: PUSH
64155: LD_INT 3
64157: PUSH
64158: LD_INT 54
64160: PUSH
64161: EMPTY
64162: LIST
64163: PUSH
64164: EMPTY
64165: LIST
64166: LIST
64167: PUSH
64168: LD_INT 3
64170: PUSH
64171: LD_INT 24
64173: PUSH
64174: LD_INT 250
64176: PUSH
64177: EMPTY
64178: LIST
64179: LIST
64180: PUSH
64181: EMPTY
64182: LIST
64183: LIST
64184: PUSH
64185: EMPTY
64186: LIST
64187: LIST
64188: LIST
64189: PUSH
64190: EMPTY
64191: LIST
64192: LIST
64193: PPUSH
64194: CALL_OW 72
64198: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
64199: LD_ADDR_VAR 0 7
64203: PUSH
64204: LD_VAR 0 5
64208: PUSH
64209: LD_VAR 0 6
64213: DIFF
64214: ST_TO_ADDR
// if not need_heal_1 then
64215: LD_VAR 0 6
64219: NOT
64220: IFFALSE 64253
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , [ ] ) else
64222: LD_ADDR_EXP 47
64226: PUSH
64227: LD_EXP 47
64231: PPUSH
64232: LD_VAR 0 2
64236: PUSH
64237: LD_INT 1
64239: PUSH
64240: EMPTY
64241: LIST
64242: LIST
64243: PPUSH
64244: EMPTY
64245: PPUSH
64246: CALL 24301 0 3
64250: ST_TO_ADDR
64251: GO 64323
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , UnitFilter ( mc_need_heal [ i ] [ 1 ] , [ f_not , [ f_lives , 1000 ] ] ) union need_heal_1 ) ;
64253: LD_ADDR_EXP 47
64257: PUSH
64258: LD_EXP 47
64262: PPUSH
64263: LD_VAR 0 2
64267: PUSH
64268: LD_INT 1
64270: PUSH
64271: EMPTY
64272: LIST
64273: LIST
64274: PPUSH
64275: LD_EXP 47
64279: PUSH
64280: LD_VAR 0 2
64284: ARRAY
64285: PUSH
64286: LD_INT 1
64288: ARRAY
64289: PPUSH
64290: LD_INT 3
64292: PUSH
64293: LD_INT 24
64295: PUSH
64296: LD_INT 1000
64298: PUSH
64299: EMPTY
64300: LIST
64301: LIST
64302: PUSH
64303: EMPTY
64304: LIST
64305: LIST
64306: PPUSH
64307: CALL_OW 72
64311: PUSH
64312: LD_VAR 0 6
64316: UNION
64317: PPUSH
64318: CALL 24301 0 3
64322: ST_TO_ADDR
// if not need_heal_2 then
64323: LD_VAR 0 7
64327: NOT
64328: IFFALSE 64361
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , [ ] ) else
64330: LD_ADDR_EXP 47
64334: PUSH
64335: LD_EXP 47
64339: PPUSH
64340: LD_VAR 0 2
64344: PUSH
64345: LD_INT 2
64347: PUSH
64348: EMPTY
64349: LIST
64350: LIST
64351: PPUSH
64352: EMPTY
64353: PPUSH
64354: CALL 24301 0 3
64358: ST_TO_ADDR
64359: GO 64393
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
64361: LD_ADDR_EXP 47
64365: PUSH
64366: LD_EXP 47
64370: PPUSH
64371: LD_VAR 0 2
64375: PUSH
64376: LD_INT 2
64378: PUSH
64379: EMPTY
64380: LIST
64381: LIST
64382: PPUSH
64383: LD_VAR 0 7
64387: PPUSH
64388: CALL 24301 0 3
64392: ST_TO_ADDR
// if need_heal_2 then
64393: LD_VAR 0 7
64397: IFFALSE 64569
// for j in need_heal_2 do
64399: LD_ADDR_VAR 0 3
64403: PUSH
64404: LD_VAR 0 7
64408: PUSH
64409: FOR_IN
64410: IFFALSE 64567
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
64412: LD_ADDR_VAR 0 5
64416: PUSH
64417: LD_EXP 44
64421: PUSH
64422: LD_VAR 0 2
64426: ARRAY
64427: PPUSH
64428: LD_INT 2
64430: PUSH
64431: LD_INT 30
64433: PUSH
64434: LD_INT 6
64436: PUSH
64437: EMPTY
64438: LIST
64439: LIST
64440: PUSH
64441: LD_INT 30
64443: PUSH
64444: LD_INT 7
64446: PUSH
64447: EMPTY
64448: LIST
64449: LIST
64450: PUSH
64451: LD_INT 30
64453: PUSH
64454: LD_INT 8
64456: PUSH
64457: EMPTY
64458: LIST
64459: LIST
64460: PUSH
64461: LD_INT 30
64463: PUSH
64464: LD_INT 0
64466: PUSH
64467: EMPTY
64468: LIST
64469: LIST
64470: PUSH
64471: LD_INT 30
64473: PUSH
64474: LD_INT 1
64476: PUSH
64477: EMPTY
64478: LIST
64479: LIST
64480: PUSH
64481: LD_INT 25
64483: PUSH
64484: LD_INT 4
64486: PUSH
64487: EMPTY
64488: LIST
64489: LIST
64490: PUSH
64491: EMPTY
64492: LIST
64493: LIST
64494: LIST
64495: LIST
64496: LIST
64497: LIST
64498: LIST
64499: PPUSH
64500: CALL_OW 72
64504: ST_TO_ADDR
// if tmp then
64505: LD_VAR 0 5
64509: IFFALSE 64565
// begin k := NearestUnitToUnit ( tmp , j ) ;
64511: LD_ADDR_VAR 0 4
64515: PUSH
64516: LD_VAR 0 5
64520: PPUSH
64521: LD_VAR 0 3
64525: PPUSH
64526: CALL_OW 74
64530: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
64531: LD_VAR 0 3
64535: PPUSH
64536: LD_VAR 0 4
64540: PPUSH
64541: CALL_OW 296
64545: PUSH
64546: LD_INT 7
64548: GREATER
64549: IFFALSE 64565
// ComMoveUnit ( j , k ) ;
64551: LD_VAR 0 3
64555: PPUSH
64556: LD_VAR 0 4
64560: PPUSH
64561: CALL_OW 112
// end ; end ;
64565: GO 64409
64567: POP
64568: POP
// if not need_heal_1 and not need_heal_2 then
64569: LD_VAR 0 6
64573: NOT
64574: PUSH
64575: LD_VAR 0 7
64579: NOT
64580: AND
64581: IFFALSE 64585
// continue ;
64583: GO 64038
// end ;
64585: GO 64038
64587: POP
64588: POP
// RaiseSailEvent ( 102 ) ;
64589: LD_INT 102
64591: PPUSH
64592: CALL_OW 427
// end ;
64596: LD_VAR 0 1
64600: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp , cranes , to_repair_tmp , to_repair ; begin
64601: LD_INT 0
64603: PPUSH
64604: PPUSH
64605: PPUSH
64606: PPUSH
64607: PPUSH
64608: PPUSH
64609: PPUSH
64610: PPUSH
// if not mc_bases then
64611: LD_EXP 44
64615: NOT
64616: IFFALSE 64620
// exit ;
64618: GO 65460
// for i = 1 to mc_bases do
64620: LD_ADDR_VAR 0 2
64624: PUSH
64625: DOUBLE
64626: LD_INT 1
64628: DEC
64629: ST_TO_ADDR
64630: LD_EXP 44
64634: PUSH
64635: FOR_TO
64636: IFFALSE 65458
// begin if not mc_building_need_repair [ i ] then
64638: LD_EXP 45
64642: PUSH
64643: LD_VAR 0 2
64647: ARRAY
64648: NOT
64649: IFFALSE 64823
// begin cranes := UnitFilter ( mc_vehicles [ i ] , [ [ f_not , [ f_lives , 1000 ] ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ] ) ;
64651: LD_ADDR_VAR 0 6
64655: PUSH
64656: LD_EXP 63
64660: PUSH
64661: LD_VAR 0 2
64665: ARRAY
64666: PPUSH
64667: LD_INT 3
64669: PUSH
64670: LD_INT 24
64672: PUSH
64673: LD_INT 1000
64675: PUSH
64676: EMPTY
64677: LIST
64678: LIST
64679: PUSH
64680: EMPTY
64681: LIST
64682: LIST
64683: PUSH
64684: LD_INT 2
64686: PUSH
64687: LD_INT 34
64689: PUSH
64690: LD_INT 13
64692: PUSH
64693: EMPTY
64694: LIST
64695: LIST
64696: PUSH
64697: LD_INT 34
64699: PUSH
64700: LD_INT 52
64702: PUSH
64703: EMPTY
64704: LIST
64705: LIST
64706: PUSH
64707: EMPTY
64708: LIST
64709: LIST
64710: LIST
64711: PUSH
64712: EMPTY
64713: LIST
64714: LIST
64715: PPUSH
64716: CALL_OW 72
64720: ST_TO_ADDR
// if cranes then
64721: LD_VAR 0 6
64725: IFFALSE 64787
// for j in cranes do
64727: LD_ADDR_VAR 0 3
64731: PUSH
64732: LD_VAR 0 6
64736: PUSH
64737: FOR_IN
64738: IFFALSE 64785
// if not IsInArea ( j , mc_parking [ i ] ) then
64740: LD_VAR 0 3
64744: PPUSH
64745: LD_EXP 68
64749: PUSH
64750: LD_VAR 0 2
64754: ARRAY
64755: PPUSH
64756: CALL_OW 308
64760: NOT
64761: IFFALSE 64783
// ComMoveToArea ( j , mc_parking [ i ] ) ;
64763: LD_VAR 0 3
64767: PPUSH
64768: LD_EXP 68
64772: PUSH
64773: LD_VAR 0 2
64777: ARRAY
64778: PPUSH
64779: CALL_OW 113
64783: GO 64737
64785: POP
64786: POP
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
64787: LD_ADDR_EXP 46
64791: PUSH
64792: LD_EXP 46
64796: PPUSH
64797: LD_VAR 0 2
64801: PPUSH
64802: EMPTY
64803: PPUSH
64804: CALL_OW 1
64808: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
64809: LD_VAR 0 2
64813: PPUSH
64814: LD_INT 101
64816: PPUSH
64817: CALL 59713 0 2
// continue ;
64821: GO 64635
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
64823: LD_ADDR_EXP 50
64827: PUSH
64828: LD_EXP 50
64832: PPUSH
64833: LD_VAR 0 2
64837: PPUSH
64838: EMPTY
64839: PPUSH
64840: CALL_OW 1
64844: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
64845: LD_VAR 0 2
64849: PPUSH
64850: LD_INT 103
64852: PPUSH
64853: CALL 59713 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
64857: LD_ADDR_VAR 0 5
64861: PUSH
64862: LD_EXP 44
64866: PUSH
64867: LD_VAR 0 2
64871: ARRAY
64872: PUSH
64873: LD_EXP 73
64877: PUSH
64878: LD_VAR 0 2
64882: ARRAY
64883: UNION
64884: PPUSH
64885: LD_INT 2
64887: PUSH
64888: LD_INT 25
64890: PUSH
64891: LD_INT 2
64893: PUSH
64894: EMPTY
64895: LIST
64896: LIST
64897: PUSH
64898: LD_INT 25
64900: PUSH
64901: LD_INT 16
64903: PUSH
64904: EMPTY
64905: LIST
64906: LIST
64907: PUSH
64908: EMPTY
64909: LIST
64910: LIST
64911: LIST
64912: PUSH
64913: EMPTY
64914: LIST
64915: PPUSH
64916: CALL_OW 72
64920: ST_TO_ADDR
// cranes := UnitFilter ( mc_vehicles [ i ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ) ;
64921: LD_ADDR_VAR 0 6
64925: PUSH
64926: LD_EXP 63
64930: PUSH
64931: LD_VAR 0 2
64935: ARRAY
64936: PPUSH
64937: LD_INT 2
64939: PUSH
64940: LD_INT 34
64942: PUSH
64943: LD_INT 13
64945: PUSH
64946: EMPTY
64947: LIST
64948: LIST
64949: PUSH
64950: LD_INT 34
64952: PUSH
64953: LD_INT 52
64955: PUSH
64956: EMPTY
64957: LIST
64958: LIST
64959: PUSH
64960: EMPTY
64961: LIST
64962: LIST
64963: LIST
64964: PPUSH
64965: CALL_OW 72
64969: ST_TO_ADDR
// if cranes then
64970: LD_VAR 0 6
64974: IFFALSE 65110
// begin for j in cranes do
64976: LD_ADDR_VAR 0 3
64980: PUSH
64981: LD_VAR 0 6
64985: PUSH
64986: FOR_IN
64987: IFFALSE 65108
// if GetLives ( j ) >= 500 and not HasTask ( j ) then
64989: LD_VAR 0 3
64993: PPUSH
64994: CALL_OW 256
64998: PUSH
64999: LD_INT 500
65001: GREATEREQUAL
65002: PUSH
65003: LD_VAR 0 3
65007: PPUSH
65008: CALL_OW 314
65012: NOT
65013: AND
65014: IFFALSE 65048
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) else
65016: LD_VAR 0 3
65020: PPUSH
65021: LD_EXP 45
65025: PUSH
65026: LD_VAR 0 2
65030: ARRAY
65031: PPUSH
65032: LD_VAR 0 3
65036: PPUSH
65037: CALL_OW 74
65041: PPUSH
65042: CALL_OW 130
65046: GO 65106
// if GetLives ( j ) < 500 and not IsInArea ( j , mc_parking [ i ] ) then
65048: LD_VAR 0 3
65052: PPUSH
65053: CALL_OW 256
65057: PUSH
65058: LD_INT 500
65060: LESS
65061: PUSH
65062: LD_VAR 0 3
65066: PPUSH
65067: LD_EXP 68
65071: PUSH
65072: LD_VAR 0 2
65076: ARRAY
65077: PPUSH
65078: CALL_OW 308
65082: NOT
65083: AND
65084: IFFALSE 65106
// ComMoveToArea ( j , mc_parking [ i ] ) ;
65086: LD_VAR 0 3
65090: PPUSH
65091: LD_EXP 68
65095: PUSH
65096: LD_VAR 0 2
65100: ARRAY
65101: PPUSH
65102: CALL_OW 113
65106: GO 64986
65108: POP
65109: POP
// end ; if not tmp then
65110: LD_VAR 0 5
65114: NOT
65115: IFFALSE 65119
// continue ;
65117: GO 64635
// for j in tmp do
65119: LD_ADDR_VAR 0 3
65123: PUSH
65124: LD_VAR 0 5
65128: PUSH
65129: FOR_IN
65130: IFFALSE 65454
// begin if mc_need_heal [ i ] then
65132: LD_EXP 47
65136: PUSH
65137: LD_VAR 0 2
65141: ARRAY
65142: IFFALSE 65190
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
65144: LD_VAR 0 3
65148: PUSH
65149: LD_EXP 47
65153: PUSH
65154: LD_VAR 0 2
65158: ARRAY
65159: PUSH
65160: LD_INT 1
65162: ARRAY
65163: IN
65164: PUSH
65165: LD_VAR 0 3
65169: PUSH
65170: LD_EXP 47
65174: PUSH
65175: LD_VAR 0 2
65179: ARRAY
65180: PUSH
65181: LD_INT 2
65183: ARRAY
65184: IN
65185: OR
65186: IFFALSE 65190
// continue ;
65188: GO 65129
// if IsInUnit ( j ) then
65190: LD_VAR 0 3
65194: PPUSH
65195: CALL_OW 310
65199: IFFALSE 65210
// ComExitBuilding ( j ) ;
65201: LD_VAR 0 3
65205: PPUSH
65206: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
65210: LD_VAR 0 3
65214: PUSH
65215: LD_EXP 46
65219: PUSH
65220: LD_VAR 0 2
65224: ARRAY
65225: IN
65226: NOT
65227: IFFALSE 65285
// begin SetTag ( j , 101 ) ;
65229: LD_VAR 0 3
65233: PPUSH
65234: LD_INT 101
65236: PPUSH
65237: CALL_OW 109
// mc_building_repairs := ReplaceIn ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
65241: LD_ADDR_EXP 46
65245: PUSH
65246: LD_EXP 46
65250: PPUSH
65251: LD_VAR 0 2
65255: PUSH
65256: LD_EXP 46
65260: PUSH
65261: LD_VAR 0 2
65265: ARRAY
65266: PUSH
65267: LD_INT 1
65269: PLUS
65270: PUSH
65271: EMPTY
65272: LIST
65273: LIST
65274: PPUSH
65275: LD_VAR 0 3
65279: PPUSH
65280: CALL 24301 0 3
65284: ST_TO_ADDR
// end ; wait ( 1 ) ;
65285: LD_INT 1
65287: PPUSH
65288: CALL_OW 67
// to_repair_tmp := mc_building_need_repair [ i ] ;
65292: LD_ADDR_VAR 0 7
65296: PUSH
65297: LD_EXP 45
65301: PUSH
65302: LD_VAR 0 2
65306: ARRAY
65307: ST_TO_ADDR
// if mc_scan [ i ] then
65308: LD_EXP 67
65312: PUSH
65313: LD_VAR 0 2
65317: ARRAY
65318: IFFALSE 65387
// to_repair_tmp := UnitFilter ( mc_building_need_repair [ i ] , [ f_not , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_breastwork ] ] ] ) ;
65320: LD_ADDR_VAR 0 7
65324: PUSH
65325: LD_EXP 45
65329: PUSH
65330: LD_VAR 0 2
65334: ARRAY
65335: PPUSH
65336: LD_INT 3
65338: PUSH
65339: LD_INT 2
65341: PUSH
65342: LD_INT 30
65344: PUSH
65345: LD_INT 32
65347: PUSH
65348: EMPTY
65349: LIST
65350: LIST
65351: PUSH
65352: LD_INT 30
65354: PUSH
65355: LD_INT 33
65357: PUSH
65358: EMPTY
65359: LIST
65360: LIST
65361: PUSH
65362: LD_INT 30
65364: PUSH
65365: LD_INT 31
65367: PUSH
65368: EMPTY
65369: LIST
65370: LIST
65371: PUSH
65372: EMPTY
65373: LIST
65374: LIST
65375: LIST
65376: LIST
65377: PUSH
65378: EMPTY
65379: LIST
65380: LIST
65381: PPUSH
65382: CALL_OW 72
65386: ST_TO_ADDR
// if not to_repair_tmp then
65387: LD_VAR 0 7
65391: NOT
65392: IFFALSE 65396
// continue ;
65394: GO 65129
// to_repair := NearestUnitToUnit ( to_repair_tmp , j ) ;
65396: LD_ADDR_VAR 0 8
65400: PUSH
65401: LD_VAR 0 7
65405: PPUSH
65406: LD_VAR 0 3
65410: PPUSH
65411: CALL_OW 74
65415: ST_TO_ADDR
// if DangerAtRange ( to_repair , 14 ) [ 4 ] < 5 then
65416: LD_VAR 0 8
65420: PPUSH
65421: LD_INT 14
65423: PPUSH
65424: CALL 26894 0 2
65428: PUSH
65429: LD_INT 4
65431: ARRAY
65432: PUSH
65433: LD_INT 5
65435: LESS
65436: IFFALSE 65452
// ComRepairBuilding ( j , to_repair ) ;
65438: LD_VAR 0 3
65442: PPUSH
65443: LD_VAR 0 8
65447: PPUSH
65448: CALL_OW 130
// end ;
65452: GO 65129
65454: POP
65455: POP
// end ;
65456: GO 64635
65458: POP
65459: POP
// end ;
65460: LD_VAR 0 1
65464: RET
// export function MC_Heal ; var i , j , tmp ; begin
65465: LD_INT 0
65467: PPUSH
65468: PPUSH
65469: PPUSH
65470: PPUSH
// if not mc_bases then
65471: LD_EXP 44
65475: NOT
65476: IFFALSE 65480
// exit ;
65478: GO 65882
// for i = 1 to mc_bases do
65480: LD_ADDR_VAR 0 2
65484: PUSH
65485: DOUBLE
65486: LD_INT 1
65488: DEC
65489: ST_TO_ADDR
65490: LD_EXP 44
65494: PUSH
65495: FOR_TO
65496: IFFALSE 65880
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
65498: LD_EXP 47
65502: PUSH
65503: LD_VAR 0 2
65507: ARRAY
65508: PUSH
65509: LD_INT 1
65511: ARRAY
65512: NOT
65513: PUSH
65514: LD_EXP 47
65518: PUSH
65519: LD_VAR 0 2
65523: ARRAY
65524: PUSH
65525: LD_INT 2
65527: ARRAY
65528: NOT
65529: AND
65530: IFFALSE 65568
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
65532: LD_ADDR_EXP 48
65536: PUSH
65537: LD_EXP 48
65541: PPUSH
65542: LD_VAR 0 2
65546: PPUSH
65547: EMPTY
65548: PPUSH
65549: CALL_OW 1
65553: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
65554: LD_VAR 0 2
65558: PPUSH
65559: LD_INT 102
65561: PPUSH
65562: CALL 59713 0 2
// continue ;
65566: GO 65495
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
65568: LD_ADDR_VAR 0 4
65572: PUSH
65573: LD_EXP 44
65577: PUSH
65578: LD_VAR 0 2
65582: ARRAY
65583: PPUSH
65584: LD_INT 25
65586: PUSH
65587: LD_INT 4
65589: PUSH
65590: EMPTY
65591: LIST
65592: LIST
65593: PPUSH
65594: CALL_OW 72
65598: ST_TO_ADDR
// if not tmp then
65599: LD_VAR 0 4
65603: NOT
65604: IFFALSE 65608
// continue ;
65606: GO 65495
// if mc_taming [ i ] then
65608: LD_EXP 75
65612: PUSH
65613: LD_VAR 0 2
65617: ARRAY
65618: IFFALSE 65642
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
65620: LD_ADDR_EXP 75
65624: PUSH
65625: LD_EXP 75
65629: PPUSH
65630: LD_VAR 0 2
65634: PPUSH
65635: EMPTY
65636: PPUSH
65637: CALL_OW 1
65641: ST_TO_ADDR
// for j in tmp do
65642: LD_ADDR_VAR 0 3
65646: PUSH
65647: LD_VAR 0 4
65651: PUSH
65652: FOR_IN
65653: IFFALSE 65876
// begin if IsInUnit ( j ) then
65655: LD_VAR 0 3
65659: PPUSH
65660: CALL_OW 310
65664: IFFALSE 65675
// ComExitBuilding ( j ) ;
65666: LD_VAR 0 3
65670: PPUSH
65671: CALL_OW 122
// if not j in mc_healers [ i ] then
65675: LD_VAR 0 3
65679: PUSH
65680: LD_EXP 48
65684: PUSH
65685: LD_VAR 0 2
65689: ARRAY
65690: IN
65691: NOT
65692: IFFALSE 65738
// mc_healers := ReplaceIn ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
65694: LD_ADDR_EXP 48
65698: PUSH
65699: LD_EXP 48
65703: PPUSH
65704: LD_VAR 0 2
65708: PUSH
65709: LD_EXP 48
65713: PUSH
65714: LD_VAR 0 2
65718: ARRAY
65719: PUSH
65720: LD_INT 1
65722: PLUS
65723: PUSH
65724: EMPTY
65725: LIST
65726: LIST
65727: PPUSH
65728: LD_VAR 0 3
65732: PPUSH
65733: CALL 24301 0 3
65737: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
65738: LD_VAR 0 3
65742: PPUSH
65743: CALL_OW 110
65747: PUSH
65748: LD_INT 102
65750: NONEQUAL
65751: IFFALSE 65765
// SetTag ( j , 102 ) ;
65753: LD_VAR 0 3
65757: PPUSH
65758: LD_INT 102
65760: PPUSH
65761: CALL_OW 109
// Wait ( 3 ) ;
65765: LD_INT 3
65767: PPUSH
65768: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
65772: LD_EXP 47
65776: PUSH
65777: LD_VAR 0 2
65781: ARRAY
65782: PUSH
65783: LD_INT 1
65785: ARRAY
65786: IFFALSE 65818
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
65788: LD_VAR 0 3
65792: PPUSH
65793: LD_EXP 47
65797: PUSH
65798: LD_VAR 0 2
65802: ARRAY
65803: PUSH
65804: LD_INT 1
65806: ARRAY
65807: PUSH
65808: LD_INT 1
65810: ARRAY
65811: PPUSH
65812: CALL_OW 128
65816: GO 65874
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
65818: LD_VAR 0 3
65822: PPUSH
65823: CALL_OW 314
65827: NOT
65828: PUSH
65829: LD_EXP 47
65833: PUSH
65834: LD_VAR 0 2
65838: ARRAY
65839: PUSH
65840: LD_INT 2
65842: ARRAY
65843: AND
65844: IFFALSE 65874
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
65846: LD_VAR 0 3
65850: PPUSH
65851: LD_EXP 47
65855: PUSH
65856: LD_VAR 0 2
65860: ARRAY
65861: PUSH
65862: LD_INT 2
65864: ARRAY
65865: PUSH
65866: LD_INT 1
65868: ARRAY
65869: PPUSH
65870: CALL_OW 128
// end ;
65874: GO 65652
65876: POP
65877: POP
// end ;
65878: GO 65495
65880: POP
65881: POP
// end ;
65882: LD_VAR 0 1
65886: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
65887: LD_INT 0
65889: PPUSH
65890: PPUSH
65891: PPUSH
65892: PPUSH
65893: PPUSH
// if not mc_bases then
65894: LD_EXP 44
65898: NOT
65899: IFFALSE 65903
// exit ;
65901: GO 67046
// for i = 1 to mc_bases do
65903: LD_ADDR_VAR 0 2
65907: PUSH
65908: DOUBLE
65909: LD_INT 1
65911: DEC
65912: ST_TO_ADDR
65913: LD_EXP 44
65917: PUSH
65918: FOR_TO
65919: IFFALSE 67044
// begin if mc_scan [ i ] then
65921: LD_EXP 67
65925: PUSH
65926: LD_VAR 0 2
65930: ARRAY
65931: IFFALSE 65935
// continue ;
65933: GO 65918
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
65935: LD_EXP 49
65939: PUSH
65940: LD_VAR 0 2
65944: ARRAY
65945: NOT
65946: PUSH
65947: LD_EXP 51
65951: PUSH
65952: LD_VAR 0 2
65956: ARRAY
65957: NOT
65958: AND
65959: PUSH
65960: LD_EXP 50
65964: PUSH
65965: LD_VAR 0 2
65969: ARRAY
65970: AND
65971: IFFALSE 66009
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
65973: LD_ADDR_EXP 50
65977: PUSH
65978: LD_EXP 50
65982: PPUSH
65983: LD_VAR 0 2
65987: PPUSH
65988: EMPTY
65989: PPUSH
65990: CALL_OW 1
65994: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
65995: LD_VAR 0 2
65999: PPUSH
66000: LD_INT 103
66002: PPUSH
66003: CALL 59713 0 2
// continue ;
66007: GO 65918
// end ; if mc_construct_list [ i ] then
66009: LD_EXP 51
66013: PUSH
66014: LD_VAR 0 2
66018: ARRAY
66019: IFFALSE 66239
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
66021: LD_ADDR_VAR 0 4
66025: PUSH
66026: LD_EXP 44
66030: PUSH
66031: LD_VAR 0 2
66035: ARRAY
66036: PPUSH
66037: LD_INT 25
66039: PUSH
66040: LD_INT 2
66042: PUSH
66043: EMPTY
66044: LIST
66045: LIST
66046: PPUSH
66047: CALL_OW 72
66051: PUSH
66052: LD_EXP 46
66056: PUSH
66057: LD_VAR 0 2
66061: ARRAY
66062: DIFF
66063: ST_TO_ADDR
// if not tmp then
66064: LD_VAR 0 4
66068: NOT
66069: IFFALSE 66073
// continue ;
66071: GO 65918
// for j in tmp do
66073: LD_ADDR_VAR 0 3
66077: PUSH
66078: LD_VAR 0 4
66082: PUSH
66083: FOR_IN
66084: IFFALSE 66235
// begin if not mc_builders [ i ] then
66086: LD_EXP 50
66090: PUSH
66091: LD_VAR 0 2
66095: ARRAY
66096: NOT
66097: IFFALSE 66155
// begin SetTag ( j , 103 ) ;
66099: LD_VAR 0 3
66103: PPUSH
66104: LD_INT 103
66106: PPUSH
66107: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
66111: LD_ADDR_EXP 50
66115: PUSH
66116: LD_EXP 50
66120: PPUSH
66121: LD_VAR 0 2
66125: PUSH
66126: LD_EXP 50
66130: PUSH
66131: LD_VAR 0 2
66135: ARRAY
66136: PUSH
66137: LD_INT 1
66139: PLUS
66140: PUSH
66141: EMPTY
66142: LIST
66143: LIST
66144: PPUSH
66145: LD_VAR 0 3
66149: PPUSH
66150: CALL 24301 0 3
66154: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
66155: LD_VAR 0 3
66159: PPUSH
66160: CALL_OW 310
66164: IFFALSE 66175
// ComExitBuilding ( j ) ;
66166: LD_VAR 0 3
66170: PPUSH
66171: CALL_OW 122
// wait ( 3 ) ;
66175: LD_INT 3
66177: PPUSH
66178: CALL_OW 67
// if not mc_construct_list [ i ] then
66182: LD_EXP 51
66186: PUSH
66187: LD_VAR 0 2
66191: ARRAY
66192: NOT
66193: IFFALSE 66197
// break ;
66195: GO 66235
// if not HasTask ( j ) then
66197: LD_VAR 0 3
66201: PPUSH
66202: CALL_OW 314
66206: NOT
66207: IFFALSE 66233
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
66209: LD_VAR 0 3
66213: PPUSH
66214: LD_EXP 51
66218: PUSH
66219: LD_VAR 0 2
66223: ARRAY
66224: PUSH
66225: LD_INT 1
66227: ARRAY
66228: PPUSH
66229: CALL 27152 0 2
// end ;
66233: GO 66083
66235: POP
66236: POP
// end else
66237: GO 67042
// if mc_build_list [ i ] then
66239: LD_EXP 49
66243: PUSH
66244: LD_VAR 0 2
66248: ARRAY
66249: IFFALSE 67042
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
66251: LD_ADDR_VAR 0 5
66255: PUSH
66256: LD_EXP 44
66260: PUSH
66261: LD_VAR 0 2
66265: ARRAY
66266: PPUSH
66267: LD_INT 2
66269: PUSH
66270: LD_INT 30
66272: PUSH
66273: LD_INT 0
66275: PUSH
66276: EMPTY
66277: LIST
66278: LIST
66279: PUSH
66280: LD_INT 30
66282: PUSH
66283: LD_INT 1
66285: PUSH
66286: EMPTY
66287: LIST
66288: LIST
66289: PUSH
66290: EMPTY
66291: LIST
66292: LIST
66293: LIST
66294: PPUSH
66295: CALL_OW 72
66299: ST_TO_ADDR
// if depot then
66300: LD_VAR 0 5
66304: IFFALSE 66322
// depot := depot [ 1 ] else
66306: LD_ADDR_VAR 0 5
66310: PUSH
66311: LD_VAR 0 5
66315: PUSH
66316: LD_INT 1
66318: ARRAY
66319: ST_TO_ADDR
66320: GO 66330
// depot := 0 ;
66322: LD_ADDR_VAR 0 5
66326: PUSH
66327: LD_INT 0
66329: ST_TO_ADDR
// if IsExtension ( mc_build_list [ i ] [ 1 ] [ 1 ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) then
66330: LD_EXP 49
66334: PUSH
66335: LD_VAR 0 2
66339: ARRAY
66340: PUSH
66341: LD_INT 1
66343: ARRAY
66344: PUSH
66345: LD_INT 1
66347: ARRAY
66348: PPUSH
66349: CALL 26982 0 1
66353: PUSH
66354: LD_EXP 44
66358: PUSH
66359: LD_VAR 0 2
66363: ARRAY
66364: PPUSH
66365: LD_INT 2
66367: PUSH
66368: LD_INT 30
66370: PUSH
66371: LD_INT 2
66373: PUSH
66374: EMPTY
66375: LIST
66376: LIST
66377: PUSH
66378: LD_INT 30
66380: PUSH
66381: LD_INT 3
66383: PUSH
66384: EMPTY
66385: LIST
66386: LIST
66387: PUSH
66388: EMPTY
66389: LIST
66390: LIST
66391: LIST
66392: PPUSH
66393: CALL_OW 72
66397: NOT
66398: AND
66399: IFFALSE 66504
// begin for j = 1 to mc_build_list [ i ] do
66401: LD_ADDR_VAR 0 3
66405: PUSH
66406: DOUBLE
66407: LD_INT 1
66409: DEC
66410: ST_TO_ADDR
66411: LD_EXP 49
66415: PUSH
66416: LD_VAR 0 2
66420: ARRAY
66421: PUSH
66422: FOR_TO
66423: IFFALSE 66502
// if mc_build_list [ i ] [ j ] [ 1 ] = b_workshop then
66425: LD_EXP 49
66429: PUSH
66430: LD_VAR 0 2
66434: ARRAY
66435: PUSH
66436: LD_VAR 0 3
66440: ARRAY
66441: PUSH
66442: LD_INT 1
66444: ARRAY
66445: PUSH
66446: LD_INT 2
66448: EQUAL
66449: IFFALSE 66500
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , j , 1 , false ) ) ;
66451: LD_ADDR_EXP 49
66455: PUSH
66456: LD_EXP 49
66460: PPUSH
66461: LD_VAR 0 2
66465: PPUSH
66466: LD_EXP 49
66470: PUSH
66471: LD_VAR 0 2
66475: ARRAY
66476: PPUSH
66477: LD_VAR 0 3
66481: PPUSH
66482: LD_INT 1
66484: PPUSH
66485: LD_INT 0
66487: PPUSH
66488: CALL 23719 0 4
66492: PPUSH
66493: CALL_OW 1
66497: ST_TO_ADDR
// break ;
66498: GO 66502
// end ;
66500: GO 66422
66502: POP
66503: POP
// end ; if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilt ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
66504: LD_EXP 49
66508: PUSH
66509: LD_VAR 0 2
66513: ARRAY
66514: PUSH
66515: LD_INT 1
66517: ARRAY
66518: PUSH
66519: LD_INT 1
66521: ARRAY
66522: PUSH
66523: LD_INT 0
66525: EQUAL
66526: PUSH
66527: LD_VAR 0 5
66531: PUSH
66532: LD_VAR 0 5
66536: PPUSH
66537: LD_EXP 49
66541: PUSH
66542: LD_VAR 0 2
66546: ARRAY
66547: PUSH
66548: LD_INT 1
66550: ARRAY
66551: PUSH
66552: LD_INT 1
66554: ARRAY
66555: PPUSH
66556: LD_EXP 49
66560: PUSH
66561: LD_VAR 0 2
66565: ARRAY
66566: PUSH
66567: LD_INT 1
66569: ARRAY
66570: PUSH
66571: LD_INT 2
66573: ARRAY
66574: PPUSH
66575: LD_EXP 49
66579: PUSH
66580: LD_VAR 0 2
66584: ARRAY
66585: PUSH
66586: LD_INT 1
66588: ARRAY
66589: PUSH
66590: LD_INT 3
66592: ARRAY
66593: PPUSH
66594: LD_EXP 49
66598: PUSH
66599: LD_VAR 0 2
66603: ARRAY
66604: PUSH
66605: LD_INT 1
66607: ARRAY
66608: PUSH
66609: LD_INT 4
66611: ARRAY
66612: PPUSH
66613: CALL 31716 0 5
66617: AND
66618: OR
66619: IFFALSE 66900
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
66621: LD_ADDR_VAR 0 4
66625: PUSH
66626: LD_EXP 44
66630: PUSH
66631: LD_VAR 0 2
66635: ARRAY
66636: PPUSH
66637: LD_INT 25
66639: PUSH
66640: LD_INT 2
66642: PUSH
66643: EMPTY
66644: LIST
66645: LIST
66646: PPUSH
66647: CALL_OW 72
66651: PUSH
66652: LD_EXP 46
66656: PUSH
66657: LD_VAR 0 2
66661: ARRAY
66662: DIFF
66663: ST_TO_ADDR
// if not tmp then
66664: LD_VAR 0 4
66668: NOT
66669: IFFALSE 66673
// continue ;
66671: GO 65918
// for j in tmp do
66673: LD_ADDR_VAR 0 3
66677: PUSH
66678: LD_VAR 0 4
66682: PUSH
66683: FOR_IN
66684: IFFALSE 66896
// begin if not mc_builders [ i ] then
66686: LD_EXP 50
66690: PUSH
66691: LD_VAR 0 2
66695: ARRAY
66696: NOT
66697: IFFALSE 66755
// begin SetTag ( j , 103 ) ;
66699: LD_VAR 0 3
66703: PPUSH
66704: LD_INT 103
66706: PPUSH
66707: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
66711: LD_ADDR_EXP 50
66715: PUSH
66716: LD_EXP 50
66720: PPUSH
66721: LD_VAR 0 2
66725: PUSH
66726: LD_EXP 50
66730: PUSH
66731: LD_VAR 0 2
66735: ARRAY
66736: PUSH
66737: LD_INT 1
66739: PLUS
66740: PUSH
66741: EMPTY
66742: LIST
66743: LIST
66744: PPUSH
66745: LD_VAR 0 3
66749: PPUSH
66750: CALL 24301 0 3
66754: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
66755: LD_VAR 0 3
66759: PPUSH
66760: CALL_OW 310
66764: IFFALSE 66775
// ComExitBuilding ( j ) ;
66766: LD_VAR 0 3
66770: PPUSH
66771: CALL_OW 122
// wait ( 3 ) ;
66775: LD_INT 3
66777: PPUSH
66778: CALL_OW 67
// if not mc_build_list [ i ] then
66782: LD_EXP 49
66786: PUSH
66787: LD_VAR 0 2
66791: ARRAY
66792: NOT
66793: IFFALSE 66797
// break ;
66795: GO 66896
// if not HasTask ( j ) then
66797: LD_VAR 0 3
66801: PPUSH
66802: CALL_OW 314
66806: NOT
66807: IFFALSE 66894
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
66809: LD_VAR 0 3
66813: PPUSH
66814: LD_EXP 49
66818: PUSH
66819: LD_VAR 0 2
66823: ARRAY
66824: PUSH
66825: LD_INT 1
66827: ARRAY
66828: PUSH
66829: LD_INT 1
66831: ARRAY
66832: PPUSH
66833: LD_EXP 49
66837: PUSH
66838: LD_VAR 0 2
66842: ARRAY
66843: PUSH
66844: LD_INT 1
66846: ARRAY
66847: PUSH
66848: LD_INT 2
66850: ARRAY
66851: PPUSH
66852: LD_EXP 49
66856: PUSH
66857: LD_VAR 0 2
66861: ARRAY
66862: PUSH
66863: LD_INT 1
66865: ARRAY
66866: PUSH
66867: LD_INT 3
66869: ARRAY
66870: PPUSH
66871: LD_EXP 49
66875: PUSH
66876: LD_VAR 0 2
66880: ARRAY
66881: PUSH
66882: LD_INT 1
66884: ARRAY
66885: PUSH
66886: LD_INT 4
66888: ARRAY
66889: PPUSH
66890: CALL_OW 145
// end ;
66894: GO 66683
66896: POP
66897: POP
// end else
66898: GO 67042
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
66900: LD_EXP 44
66904: PUSH
66905: LD_VAR 0 2
66909: ARRAY
66910: PPUSH
66911: LD_EXP 49
66915: PUSH
66916: LD_VAR 0 2
66920: ARRAY
66921: PUSH
66922: LD_INT 1
66924: ARRAY
66925: PUSH
66926: LD_INT 1
66928: ARRAY
66929: PPUSH
66930: LD_EXP 49
66934: PUSH
66935: LD_VAR 0 2
66939: ARRAY
66940: PUSH
66941: LD_INT 1
66943: ARRAY
66944: PUSH
66945: LD_INT 2
66947: ARRAY
66948: PPUSH
66949: LD_EXP 49
66953: PUSH
66954: LD_VAR 0 2
66958: ARRAY
66959: PUSH
66960: LD_INT 1
66962: ARRAY
66963: PUSH
66964: LD_INT 3
66966: ARRAY
66967: PPUSH
66968: LD_EXP 49
66972: PUSH
66973: LD_VAR 0 2
66977: ARRAY
66978: PUSH
66979: LD_INT 1
66981: ARRAY
66982: PUSH
66983: LD_INT 4
66985: ARRAY
66986: PPUSH
66987: CALL 31052 0 5
66991: NOT
66992: IFFALSE 67042
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
66994: LD_ADDR_EXP 49
66998: PUSH
66999: LD_EXP 49
67003: PPUSH
67004: LD_VAR 0 2
67008: PPUSH
67009: LD_EXP 49
67013: PUSH
67014: LD_VAR 0 2
67018: ARRAY
67019: PPUSH
67020: LD_INT 1
67022: PPUSH
67023: LD_INT 1
67025: NEG
67026: PPUSH
67027: LD_INT 0
67029: PPUSH
67030: CALL 23719 0 4
67034: PPUSH
67035: CALL_OW 1
67039: ST_TO_ADDR
// continue ;
67040: GO 65918
// end ; end ; end ;
67042: GO 65918
67044: POP
67045: POP
// end ;
67046: LD_VAR 0 1
67050: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
67051: LD_INT 0
67053: PPUSH
67054: PPUSH
67055: PPUSH
67056: PPUSH
67057: PPUSH
67058: PPUSH
// if not mc_bases then
67059: LD_EXP 44
67063: NOT
67064: IFFALSE 67068
// exit ;
67066: GO 67495
// for i = 1 to mc_bases do
67068: LD_ADDR_VAR 0 2
67072: PUSH
67073: DOUBLE
67074: LD_INT 1
67076: DEC
67077: ST_TO_ADDR
67078: LD_EXP 44
67082: PUSH
67083: FOR_TO
67084: IFFALSE 67493
// begin tmp := mc_build_upgrade [ i ] ;
67086: LD_ADDR_VAR 0 4
67090: PUSH
67091: LD_EXP 76
67095: PUSH
67096: LD_VAR 0 2
67100: ARRAY
67101: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
67102: LD_ADDR_VAR 0 6
67106: PUSH
67107: LD_EXP 77
67111: PUSH
67112: LD_VAR 0 2
67116: ARRAY
67117: PPUSH
67118: LD_INT 2
67120: PUSH
67121: LD_INT 30
67123: PUSH
67124: LD_INT 6
67126: PUSH
67127: EMPTY
67128: LIST
67129: LIST
67130: PUSH
67131: LD_INT 30
67133: PUSH
67134: LD_INT 7
67136: PUSH
67137: EMPTY
67138: LIST
67139: LIST
67140: PUSH
67141: EMPTY
67142: LIST
67143: LIST
67144: LIST
67145: PPUSH
67146: CALL_OW 72
67150: ST_TO_ADDR
// if not tmp and not lab then
67151: LD_VAR 0 4
67155: NOT
67156: PUSH
67157: LD_VAR 0 6
67161: NOT
67162: AND
67163: IFFALSE 67167
// continue ;
67165: GO 67083
// if tmp then
67167: LD_VAR 0 4
67171: IFFALSE 67291
// for j in tmp do
67173: LD_ADDR_VAR 0 3
67177: PUSH
67178: LD_VAR 0 4
67182: PUSH
67183: FOR_IN
67184: IFFALSE 67289
// begin if UpgradeCost ( j ) then
67186: LD_VAR 0 3
67190: PPUSH
67191: CALL 30712 0 1
67195: IFFALSE 67287
// begin ComUpgrade ( j ) ;
67197: LD_VAR 0 3
67201: PPUSH
67202: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
67206: LD_ADDR_EXP 76
67210: PUSH
67211: LD_EXP 76
67215: PPUSH
67216: LD_VAR 0 2
67220: PPUSH
67221: LD_EXP 76
67225: PUSH
67226: LD_VAR 0 2
67230: ARRAY
67231: PUSH
67232: LD_VAR 0 3
67236: DIFF
67237: PPUSH
67238: CALL_OW 1
67242: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
67243: LD_ADDR_EXP 51
67247: PUSH
67248: LD_EXP 51
67252: PPUSH
67253: LD_VAR 0 2
67257: PUSH
67258: LD_EXP 51
67262: PUSH
67263: LD_VAR 0 2
67267: ARRAY
67268: PUSH
67269: LD_INT 1
67271: PLUS
67272: PUSH
67273: EMPTY
67274: LIST
67275: LIST
67276: PPUSH
67277: LD_VAR 0 3
67281: PPUSH
67282: CALL 24301 0 3
67286: ST_TO_ADDR
// end ; end ;
67287: GO 67183
67289: POP
67290: POP
// if not lab or not mc_lab_upgrade [ i ] then
67291: LD_VAR 0 6
67295: NOT
67296: PUSH
67297: LD_EXP 78
67301: PUSH
67302: LD_VAR 0 2
67306: ARRAY
67307: NOT
67308: OR
67309: IFFALSE 67313
// continue ;
67311: GO 67083
// for j in lab do
67313: LD_ADDR_VAR 0 3
67317: PUSH
67318: LD_VAR 0 6
67322: PUSH
67323: FOR_IN
67324: IFFALSE 67489
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
67326: LD_VAR 0 3
67330: PPUSH
67331: CALL_OW 266
67335: PUSH
67336: LD_INT 6
67338: PUSH
67339: LD_INT 7
67341: PUSH
67342: EMPTY
67343: LIST
67344: LIST
67345: IN
67346: PUSH
67347: LD_VAR 0 3
67351: PPUSH
67352: CALL_OW 461
67356: PUSH
67357: LD_INT 1
67359: NONEQUAL
67360: AND
67361: IFFALSE 67487
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
67363: LD_VAR 0 3
67367: PPUSH
67368: LD_EXP 78
67372: PUSH
67373: LD_VAR 0 2
67377: ARRAY
67378: PUSH
67379: LD_INT 1
67381: ARRAY
67382: PPUSH
67383: CALL 30917 0 2
67387: IFFALSE 67487
// begin ComCancel ( j ) ;
67389: LD_VAR 0 3
67393: PPUSH
67394: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
67398: LD_VAR 0 3
67402: PPUSH
67403: LD_EXP 78
67407: PUSH
67408: LD_VAR 0 2
67412: ARRAY
67413: PUSH
67414: LD_INT 1
67416: ARRAY
67417: PPUSH
67418: CALL_OW 207
// if not j in mc_construct_list [ i ] then
67422: LD_VAR 0 3
67426: PUSH
67427: LD_EXP 51
67431: PUSH
67432: LD_VAR 0 2
67436: ARRAY
67437: IN
67438: NOT
67439: IFFALSE 67485
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
67441: LD_ADDR_EXP 51
67445: PUSH
67446: LD_EXP 51
67450: PPUSH
67451: LD_VAR 0 2
67455: PUSH
67456: LD_EXP 51
67460: PUSH
67461: LD_VAR 0 2
67465: ARRAY
67466: PUSH
67467: LD_INT 1
67469: PLUS
67470: PUSH
67471: EMPTY
67472: LIST
67473: LIST
67474: PPUSH
67475: LD_VAR 0 3
67479: PPUSH
67480: CALL 24301 0 3
67484: ST_TO_ADDR
// break ;
67485: GO 67489
// end ; end ; end ;
67487: GO 67323
67489: POP
67490: POP
// end ;
67491: GO 67083
67493: POP
67494: POP
// end ;
67495: LD_VAR 0 1
67499: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , tmp2 , t , tw , busy , weapon ; begin
67500: LD_INT 0
67502: PPUSH
67503: PPUSH
67504: PPUSH
67505: PPUSH
67506: PPUSH
67507: PPUSH
67508: PPUSH
67509: PPUSH
67510: PPUSH
// if not mc_bases then
67511: LD_EXP 44
67515: NOT
67516: IFFALSE 67520
// exit ;
67518: GO 67925
// for i = 1 to mc_bases do
67520: LD_ADDR_VAR 0 2
67524: PUSH
67525: DOUBLE
67526: LD_INT 1
67528: DEC
67529: ST_TO_ADDR
67530: LD_EXP 44
67534: PUSH
67535: FOR_TO
67536: IFFALSE 67923
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
67538: LD_EXP 52
67542: PUSH
67543: LD_VAR 0 2
67547: ARRAY
67548: NOT
67549: PUSH
67550: LD_EXP 44
67554: PUSH
67555: LD_VAR 0 2
67559: ARRAY
67560: PPUSH
67561: LD_INT 30
67563: PUSH
67564: LD_INT 3
67566: PUSH
67567: EMPTY
67568: LIST
67569: LIST
67570: PPUSH
67571: CALL_OW 72
67575: NOT
67576: OR
67577: IFFALSE 67581
// continue ;
67579: GO 67535
// busy := false ;
67581: LD_ADDR_VAR 0 8
67585: PUSH
67586: LD_INT 0
67588: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
67589: LD_ADDR_VAR 0 4
67593: PUSH
67594: LD_EXP 44
67598: PUSH
67599: LD_VAR 0 2
67603: ARRAY
67604: PPUSH
67605: LD_INT 30
67607: PUSH
67608: LD_INT 3
67610: PUSH
67611: EMPTY
67612: LIST
67613: LIST
67614: PPUSH
67615: CALL_OW 72
67619: ST_TO_ADDR
// t := UnitFilter ( mc_turret_list [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ;
67620: LD_ADDR_VAR 0 6
67624: PUSH
67625: LD_EXP 52
67629: PUSH
67630: LD_VAR 0 2
67634: ARRAY
67635: PPUSH
67636: LD_INT 2
67638: PUSH
67639: LD_INT 30
67641: PUSH
67642: LD_INT 32
67644: PUSH
67645: EMPTY
67646: LIST
67647: LIST
67648: PUSH
67649: LD_INT 30
67651: PUSH
67652: LD_INT 33
67654: PUSH
67655: EMPTY
67656: LIST
67657: LIST
67658: PUSH
67659: EMPTY
67660: LIST
67661: LIST
67662: LIST
67663: PPUSH
67664: CALL_OW 72
67668: ST_TO_ADDR
// if not t then
67669: LD_VAR 0 6
67673: NOT
67674: IFFALSE 67678
// continue ;
67676: GO 67535
// for j in tmp do
67678: LD_ADDR_VAR 0 3
67682: PUSH
67683: LD_VAR 0 4
67687: PUSH
67688: FOR_IN
67689: IFFALSE 67719
// if not BuildingStatus ( j ) = bs_idle then
67691: LD_VAR 0 3
67695: PPUSH
67696: CALL_OW 461
67700: PUSH
67701: LD_INT 2
67703: EQUAL
67704: NOT
67705: IFFALSE 67717
// begin busy := true ;
67707: LD_ADDR_VAR 0 8
67711: PUSH
67712: LD_INT 1
67714: ST_TO_ADDR
// break ;
67715: GO 67719
// end ;
67717: GO 67688
67719: POP
67720: POP
// if busy then
67721: LD_VAR 0 8
67725: IFFALSE 67729
// continue ;
67727: GO 67535
// tw := UnitFilter ( t , [ f_bweapon , 0 ] ) ;
67729: LD_ADDR_VAR 0 7
67733: PUSH
67734: LD_VAR 0 6
67738: PPUSH
67739: LD_INT 35
67741: PUSH
67742: LD_INT 0
67744: PUSH
67745: EMPTY
67746: LIST
67747: LIST
67748: PPUSH
67749: CALL_OW 72
67753: ST_TO_ADDR
// if tw then
67754: LD_VAR 0 7
67758: IFFALSE 67835
// begin tw := tw [ 1 ] ;
67760: LD_ADDR_VAR 0 7
67764: PUSH
67765: LD_VAR 0 7
67769: PUSH
67770: LD_INT 1
67772: ARRAY
67773: ST_TO_ADDR
// weapon := GetTurretWeapon ( tw , mc_scan_area [ i ] ) ;
67774: LD_ADDR_VAR 0 9
67778: PUSH
67779: LD_VAR 0 7
67783: PPUSH
67784: LD_EXP 69
67788: PUSH
67789: LD_VAR 0 2
67793: ARRAY
67794: PPUSH
67795: CALL 29271 0 2
67799: ST_TO_ADDR
// if mc_allowed_tower_weapons [ i ] then
67800: LD_EXP 83
67804: PUSH
67805: LD_VAR 0 2
67809: ARRAY
67810: IFFALSE 67833
// if not weapon in mc_allowed_tower_weapons [ i ] then
67812: LD_VAR 0 9
67816: PUSH
67817: LD_EXP 83
67821: PUSH
67822: LD_VAR 0 2
67826: ARRAY
67827: IN
67828: NOT
67829: IFFALSE 67833
// continue ;
67831: GO 67535
// end else
67833: GO 67898
// begin tmp2 := UpgradeTurretsWeapon ( mc_turret_list [ i ] , tmp ) ;
67835: LD_ADDR_VAR 0 5
67839: PUSH
67840: LD_EXP 52
67844: PUSH
67845: LD_VAR 0 2
67849: ARRAY
67850: PPUSH
67851: LD_VAR 0 4
67855: PPUSH
67856: CALL 54773 0 2
67860: ST_TO_ADDR
// if not tmp2 then
67861: LD_VAR 0 5
67865: NOT
67866: IFFALSE 67870
// continue ;
67868: GO 67535
// tw := tmp2 [ 1 ] ;
67870: LD_ADDR_VAR 0 7
67874: PUSH
67875: LD_VAR 0 5
67879: PUSH
67880: LD_INT 1
67882: ARRAY
67883: ST_TO_ADDR
// weapon := tmp2 [ 2 ] ;
67884: LD_ADDR_VAR 0 9
67888: PUSH
67889: LD_VAR 0 5
67893: PUSH
67894: LD_INT 2
67896: ARRAY
67897: ST_TO_ADDR
// end ; if not weapon then
67898: LD_VAR 0 9
67902: NOT
67903: IFFALSE 67907
// continue ;
67905: GO 67535
// ComPlaceWeapon ( tw , weapon ) ;
67907: LD_VAR 0 7
67911: PPUSH
67912: LD_VAR 0 9
67916: PPUSH
67917: CALL_OW 148
// end ;
67921: GO 67535
67923: POP
67924: POP
// end ;
67925: LD_VAR 0 1
67929: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
67930: LD_INT 0
67932: PPUSH
67933: PPUSH
67934: PPUSH
67935: PPUSH
67936: PPUSH
67937: PPUSH
// if not mc_bases then
67938: LD_EXP 44
67942: NOT
67943: IFFALSE 67947
// exit ;
67945: GO 68723
// for i = 1 to mc_bases do
67947: LD_ADDR_VAR 0 2
67951: PUSH
67952: DOUBLE
67953: LD_INT 1
67955: DEC
67956: ST_TO_ADDR
67957: LD_EXP 44
67961: PUSH
67962: FOR_TO
67963: IFFALSE 68721
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] or mc_scan [ i ] then
67965: LD_EXP 57
67969: PUSH
67970: LD_VAR 0 2
67974: ARRAY
67975: NOT
67976: PUSH
67977: LD_EXP 57
67981: PUSH
67982: LD_VAR 0 2
67986: ARRAY
67987: PUSH
67988: LD_EXP 58
67992: PUSH
67993: LD_VAR 0 2
67997: ARRAY
67998: EQUAL
67999: OR
68000: PUSH
68001: LD_EXP 67
68005: PUSH
68006: LD_VAR 0 2
68010: ARRAY
68011: OR
68012: IFFALSE 68016
// continue ;
68014: GO 67962
// if mc_miners [ i ] then
68016: LD_EXP 58
68020: PUSH
68021: LD_VAR 0 2
68025: ARRAY
68026: IFFALSE 68408
// begin for j = mc_miners [ i ] downto 1 do
68028: LD_ADDR_VAR 0 3
68032: PUSH
68033: DOUBLE
68034: LD_EXP 58
68038: PUSH
68039: LD_VAR 0 2
68043: ARRAY
68044: INC
68045: ST_TO_ADDR
68046: LD_INT 1
68048: PUSH
68049: FOR_DOWNTO
68050: IFFALSE 68406
// begin if IsDead ( mc_miners [ i ] [ j ] ) or GetClass ( mc_miners [ i ] [ j ] ) <> 1 then
68052: LD_EXP 58
68056: PUSH
68057: LD_VAR 0 2
68061: ARRAY
68062: PUSH
68063: LD_VAR 0 3
68067: ARRAY
68068: PPUSH
68069: CALL_OW 301
68073: PUSH
68074: LD_EXP 58
68078: PUSH
68079: LD_VAR 0 2
68083: ARRAY
68084: PUSH
68085: LD_VAR 0 3
68089: ARRAY
68090: PPUSH
68091: CALL_OW 257
68095: PUSH
68096: LD_INT 1
68098: NONEQUAL
68099: OR
68100: IFFALSE 68163
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
68102: LD_ADDR_VAR 0 5
68106: PUSH
68107: LD_EXP 58
68111: PUSH
68112: LD_VAR 0 2
68116: ARRAY
68117: PUSH
68118: LD_EXP 58
68122: PUSH
68123: LD_VAR 0 2
68127: ARRAY
68128: PUSH
68129: LD_VAR 0 3
68133: ARRAY
68134: DIFF
68135: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
68136: LD_ADDR_EXP 58
68140: PUSH
68141: LD_EXP 58
68145: PPUSH
68146: LD_VAR 0 2
68150: PPUSH
68151: LD_VAR 0 5
68155: PPUSH
68156: CALL_OW 1
68160: ST_TO_ADDR
// continue ;
68161: GO 68049
// end ; if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and not HasTask ( mc_miners [ i ] [ j ] ) then
68163: LD_EXP 58
68167: PUSH
68168: LD_VAR 0 2
68172: ARRAY
68173: PUSH
68174: LD_VAR 0 3
68178: ARRAY
68179: PPUSH
68180: CALL_OW 257
68184: PUSH
68185: LD_INT 1
68187: EQUAL
68188: PUSH
68189: LD_EXP 58
68193: PUSH
68194: LD_VAR 0 2
68198: ARRAY
68199: PUSH
68200: LD_VAR 0 3
68204: ARRAY
68205: PPUSH
68206: CALL_OW 459
68210: NOT
68211: AND
68212: PUSH
68213: LD_EXP 58
68217: PUSH
68218: LD_VAR 0 2
68222: ARRAY
68223: PUSH
68224: LD_VAR 0 3
68228: ARRAY
68229: PPUSH
68230: CALL_OW 314
68234: NOT
68235: AND
68236: IFFALSE 68404
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
68238: LD_EXP 58
68242: PUSH
68243: LD_VAR 0 2
68247: ARRAY
68248: PUSH
68249: LD_VAR 0 3
68253: ARRAY
68254: PPUSH
68255: CALL_OW 310
68259: IFFALSE 68282
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
68261: LD_EXP 58
68265: PUSH
68266: LD_VAR 0 2
68270: ARRAY
68271: PUSH
68272: LD_VAR 0 3
68276: ARRAY
68277: PPUSH
68278: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
68282: LD_EXP 58
68286: PUSH
68287: LD_VAR 0 2
68291: ARRAY
68292: PUSH
68293: LD_VAR 0 3
68297: ARRAY
68298: PPUSH
68299: CALL_OW 314
68303: NOT
68304: IFFALSE 68404
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ j mod mc_mines [ i ] + 1 ] [ 1 ] , mc_mines [ i ] [ j mod mc_mines [ i ] + 1 ] [ 2 ] , 0 ) ;
68306: LD_EXP 58
68310: PUSH
68311: LD_VAR 0 2
68315: ARRAY
68316: PUSH
68317: LD_VAR 0 3
68321: ARRAY
68322: PPUSH
68323: LD_EXP 57
68327: PUSH
68328: LD_VAR 0 2
68332: ARRAY
68333: PUSH
68334: LD_VAR 0 3
68338: PUSH
68339: LD_EXP 57
68343: PUSH
68344: LD_VAR 0 2
68348: ARRAY
68349: MOD
68350: PUSH
68351: LD_INT 1
68353: PLUS
68354: ARRAY
68355: PUSH
68356: LD_INT 1
68358: ARRAY
68359: PPUSH
68360: LD_EXP 57
68364: PUSH
68365: LD_VAR 0 2
68369: ARRAY
68370: PUSH
68371: LD_VAR 0 3
68375: PUSH
68376: LD_EXP 57
68380: PUSH
68381: LD_VAR 0 2
68385: ARRAY
68386: MOD
68387: PUSH
68388: LD_INT 1
68390: PLUS
68391: ARRAY
68392: PUSH
68393: LD_INT 2
68395: ARRAY
68396: PPUSH
68397: LD_INT 0
68399: PPUSH
68400: CALL_OW 193
// end ; end ;
68404: GO 68049
68406: POP
68407: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
68408: LD_ADDR_VAR 0 5
68412: PUSH
68413: LD_EXP 44
68417: PUSH
68418: LD_VAR 0 2
68422: ARRAY
68423: PPUSH
68424: LD_INT 2
68426: PUSH
68427: LD_INT 30
68429: PUSH
68430: LD_INT 4
68432: PUSH
68433: EMPTY
68434: LIST
68435: LIST
68436: PUSH
68437: LD_INT 30
68439: PUSH
68440: LD_INT 5
68442: PUSH
68443: EMPTY
68444: LIST
68445: LIST
68446: PUSH
68447: LD_INT 30
68449: PUSH
68450: LD_INT 32
68452: PUSH
68453: EMPTY
68454: LIST
68455: LIST
68456: PUSH
68457: EMPTY
68458: LIST
68459: LIST
68460: LIST
68461: LIST
68462: PPUSH
68463: CALL_OW 72
68467: ST_TO_ADDR
// if not tmp then
68468: LD_VAR 0 5
68472: NOT
68473: IFFALSE 68477
// continue ;
68475: GO 67962
// list := [ ] ;
68477: LD_ADDR_VAR 0 6
68481: PUSH
68482: EMPTY
68483: ST_TO_ADDR
// for j in tmp do
68484: LD_ADDR_VAR 0 3
68488: PUSH
68489: LD_VAR 0 5
68493: PUSH
68494: FOR_IN
68495: IFFALSE 68564
// begin for k in UnitsInside ( j ) do
68497: LD_ADDR_VAR 0 4
68501: PUSH
68502: LD_VAR 0 3
68506: PPUSH
68507: CALL_OW 313
68511: PUSH
68512: FOR_IN
68513: IFFALSE 68560
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
68515: LD_VAR 0 4
68519: PPUSH
68520: CALL_OW 257
68524: PUSH
68525: LD_INT 1
68527: EQUAL
68528: PUSH
68529: LD_VAR 0 4
68533: PPUSH
68534: CALL_OW 459
68538: NOT
68539: AND
68540: IFFALSE 68558
// list := list ^ k ;
68542: LD_ADDR_VAR 0 6
68546: PUSH
68547: LD_VAR 0 6
68551: PUSH
68552: LD_VAR 0 4
68556: ADD
68557: ST_TO_ADDR
68558: GO 68512
68560: POP
68561: POP
// end ;
68562: GO 68494
68564: POP
68565: POP
// list := list diff mc_miners [ i ] ;
68566: LD_ADDR_VAR 0 6
68570: PUSH
68571: LD_VAR 0 6
68575: PUSH
68576: LD_EXP 58
68580: PUSH
68581: LD_VAR 0 2
68585: ARRAY
68586: DIFF
68587: ST_TO_ADDR
// if not list then
68588: LD_VAR 0 6
68592: NOT
68593: IFFALSE 68597
// continue ;
68595: GO 67962
// k := mc_mines [ i ] - mc_miners [ i ] ;
68597: LD_ADDR_VAR 0 4
68601: PUSH
68602: LD_EXP 57
68606: PUSH
68607: LD_VAR 0 2
68611: ARRAY
68612: PUSH
68613: LD_EXP 58
68617: PUSH
68618: LD_VAR 0 2
68622: ARRAY
68623: MINUS
68624: ST_TO_ADDR
// if k > list then
68625: LD_VAR 0 4
68629: PUSH
68630: LD_VAR 0 6
68634: GREATER
68635: IFFALSE 68647
// k := list ;
68637: LD_ADDR_VAR 0 4
68641: PUSH
68642: LD_VAR 0 6
68646: ST_TO_ADDR
// for j = 1 to k do
68647: LD_ADDR_VAR 0 3
68651: PUSH
68652: DOUBLE
68653: LD_INT 1
68655: DEC
68656: ST_TO_ADDR
68657: LD_VAR 0 4
68661: PUSH
68662: FOR_TO
68663: IFFALSE 68717
// mc_miners := ReplaceIn ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
68665: LD_ADDR_EXP 58
68669: PUSH
68670: LD_EXP 58
68674: PPUSH
68675: LD_VAR 0 2
68679: PUSH
68680: LD_EXP 58
68684: PUSH
68685: LD_VAR 0 2
68689: ARRAY
68690: PUSH
68691: LD_INT 1
68693: PLUS
68694: PUSH
68695: EMPTY
68696: LIST
68697: LIST
68698: PPUSH
68699: LD_VAR 0 6
68703: PUSH
68704: LD_VAR 0 3
68708: ARRAY
68709: PPUSH
68710: CALL 24301 0 3
68714: ST_TO_ADDR
68715: GO 68662
68717: POP
68718: POP
// end ;
68719: GO 67962
68721: POP
68722: POP
// end ;
68723: LD_VAR 0 1
68727: RET
// export function MC_CollectCrates ( ) ; var i , j , k , tmp , target , cargo , depot , fac , components ; begin
68728: LD_INT 0
68730: PPUSH
68731: PPUSH
68732: PPUSH
68733: PPUSH
68734: PPUSH
68735: PPUSH
68736: PPUSH
68737: PPUSH
68738: PPUSH
68739: PPUSH
// if not mc_bases then
68740: LD_EXP 44
68744: NOT
68745: IFFALSE 68749
// exit ;
68747: GO 70499
// for i = 1 to mc_bases do
68749: LD_ADDR_VAR 0 2
68753: PUSH
68754: DOUBLE
68755: LD_INT 1
68757: DEC
68758: ST_TO_ADDR
68759: LD_EXP 44
68763: PUSH
68764: FOR_TO
68765: IFFALSE 70497
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
68767: LD_EXP 44
68771: PUSH
68772: LD_VAR 0 2
68776: ARRAY
68777: NOT
68778: PUSH
68779: LD_EXP 51
68783: PUSH
68784: LD_VAR 0 2
68788: ARRAY
68789: OR
68790: IFFALSE 68794
// continue ;
68792: GO 68764
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
68794: LD_EXP 60
68798: PUSH
68799: LD_VAR 0 2
68803: ARRAY
68804: NOT
68805: PUSH
68806: LD_EXP 61
68810: PUSH
68811: LD_VAR 0 2
68815: ARRAY
68816: AND
68817: IFFALSE 68855
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
68819: LD_ADDR_EXP 61
68823: PUSH
68824: LD_EXP 61
68828: PPUSH
68829: LD_VAR 0 2
68833: PPUSH
68834: EMPTY
68835: PPUSH
68836: CALL_OW 1
68840: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
68841: LD_VAR 0 2
68845: PPUSH
68846: LD_INT 107
68848: PPUSH
68849: CALL 59713 0 2
// continue ;
68853: GO 68764
// end ; target := [ ] ;
68855: LD_ADDR_VAR 0 6
68859: PUSH
68860: EMPTY
68861: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
68862: LD_ADDR_VAR 0 3
68866: PUSH
68867: DOUBLE
68868: LD_EXP 60
68872: PUSH
68873: LD_VAR 0 2
68877: ARRAY
68878: INC
68879: ST_TO_ADDR
68880: LD_INT 1
68882: PUSH
68883: FOR_DOWNTO
68884: IFFALSE 69144
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
68886: LD_EXP 60
68890: PUSH
68891: LD_VAR 0 2
68895: ARRAY
68896: PUSH
68897: LD_VAR 0 3
68901: ARRAY
68902: PUSH
68903: LD_INT 2
68905: ARRAY
68906: PPUSH
68907: LD_EXP 60
68911: PUSH
68912: LD_VAR 0 2
68916: ARRAY
68917: PUSH
68918: LD_VAR 0 3
68922: ARRAY
68923: PUSH
68924: LD_INT 3
68926: ARRAY
68927: PPUSH
68928: CALL_OW 488
68932: PUSH
68933: LD_EXP 60
68937: PUSH
68938: LD_VAR 0 2
68942: ARRAY
68943: PUSH
68944: LD_VAR 0 3
68948: ARRAY
68949: PUSH
68950: LD_INT 2
68952: ARRAY
68953: PPUSH
68954: LD_EXP 60
68958: PUSH
68959: LD_VAR 0 2
68963: ARRAY
68964: PUSH
68965: LD_VAR 0 3
68969: ARRAY
68970: PUSH
68971: LD_INT 3
68973: ARRAY
68974: PPUSH
68975: CALL_OW 284
68979: PUSH
68980: LD_INT 0
68982: EQUAL
68983: AND
68984: IFFALSE 69039
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
68986: LD_ADDR_VAR 0 5
68990: PUSH
68991: LD_EXP 60
68995: PUSH
68996: LD_VAR 0 2
69000: ARRAY
69001: PPUSH
69002: LD_VAR 0 3
69006: PPUSH
69007: CALL_OW 3
69011: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
69012: LD_ADDR_EXP 60
69016: PUSH
69017: LD_EXP 60
69021: PPUSH
69022: LD_VAR 0 2
69026: PPUSH
69027: LD_VAR 0 5
69031: PPUSH
69032: CALL_OW 1
69036: ST_TO_ADDR
// continue ;
69037: GO 68883
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 30 ) [ 4 ] = 0 then
69039: LD_EXP 44
69043: PUSH
69044: LD_VAR 0 2
69048: ARRAY
69049: PUSH
69050: LD_INT 1
69052: ARRAY
69053: PPUSH
69054: CALL_OW 255
69058: PPUSH
69059: LD_EXP 60
69063: PUSH
69064: LD_VAR 0 2
69068: ARRAY
69069: PUSH
69070: LD_VAR 0 3
69074: ARRAY
69075: PUSH
69076: LD_INT 2
69078: ARRAY
69079: PPUSH
69080: LD_EXP 60
69084: PUSH
69085: LD_VAR 0 2
69089: ARRAY
69090: PUSH
69091: LD_VAR 0 3
69095: ARRAY
69096: PUSH
69097: LD_INT 3
69099: ARRAY
69100: PPUSH
69101: LD_INT 30
69103: PPUSH
69104: CALL 25197 0 4
69108: PUSH
69109: LD_INT 4
69111: ARRAY
69112: PUSH
69113: LD_INT 0
69115: EQUAL
69116: IFFALSE 69142
// begin target := mc_crates [ i ] [ j ] ;
69118: LD_ADDR_VAR 0 6
69122: PUSH
69123: LD_EXP 60
69127: PUSH
69128: LD_VAR 0 2
69132: ARRAY
69133: PUSH
69134: LD_VAR 0 3
69138: ARRAY
69139: ST_TO_ADDR
// break ;
69140: GO 69144
// end ; end ;
69142: GO 68883
69144: POP
69145: POP
// if not target then
69146: LD_VAR 0 6
69150: NOT
69151: IFFALSE 69155
// continue ;
69153: GO 68764
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
69155: LD_ADDR_VAR 0 7
69159: PUSH
69160: LD_EXP 63
69164: PUSH
69165: LD_VAR 0 2
69169: ARRAY
69170: PPUSH
69171: LD_INT 2
69173: PUSH
69174: LD_INT 3
69176: PUSH
69177: LD_INT 58
69179: PUSH
69180: EMPTY
69181: LIST
69182: PUSH
69183: EMPTY
69184: LIST
69185: LIST
69186: PUSH
69187: LD_INT 61
69189: PUSH
69190: EMPTY
69191: LIST
69192: PUSH
69193: LD_INT 33
69195: PUSH
69196: LD_INT 5
69198: PUSH
69199: EMPTY
69200: LIST
69201: LIST
69202: PUSH
69203: LD_INT 33
69205: PUSH
69206: LD_INT 3
69208: PUSH
69209: EMPTY
69210: LIST
69211: LIST
69212: PUSH
69213: EMPTY
69214: LIST
69215: LIST
69216: LIST
69217: LIST
69218: LIST
69219: PUSH
69220: LD_INT 2
69222: PUSH
69223: LD_INT 34
69225: PUSH
69226: LD_INT 32
69228: PUSH
69229: EMPTY
69230: LIST
69231: LIST
69232: PUSH
69233: LD_INT 34
69235: PUSH
69236: LD_INT 51
69238: PUSH
69239: EMPTY
69240: LIST
69241: LIST
69242: PUSH
69243: LD_INT 34
69245: PUSH
69246: LD_INT 12
69248: PUSH
69249: EMPTY
69250: LIST
69251: LIST
69252: PUSH
69253: EMPTY
69254: LIST
69255: LIST
69256: LIST
69257: LIST
69258: PUSH
69259: EMPTY
69260: LIST
69261: LIST
69262: PPUSH
69263: CALL_OW 72
69267: ST_TO_ADDR
// if not cargo then
69268: LD_VAR 0 7
69272: NOT
69273: IFFALSE 69916
// begin if mc_crates_collector [ i ] < 5 then
69275: LD_EXP 61
69279: PUSH
69280: LD_VAR 0 2
69284: ARRAY
69285: PUSH
69286: LD_INT 5
69288: LESS
69289: IFFALSE 69655
// begin if mc_ape [ i ] then
69291: LD_EXP 73
69295: PUSH
69296: LD_VAR 0 2
69300: ARRAY
69301: IFFALSE 69348
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
69303: LD_ADDR_VAR 0 5
69307: PUSH
69308: LD_EXP 73
69312: PUSH
69313: LD_VAR 0 2
69317: ARRAY
69318: PPUSH
69319: LD_INT 25
69321: PUSH
69322: LD_INT 16
69324: PUSH
69325: EMPTY
69326: LIST
69327: LIST
69328: PUSH
69329: LD_INT 24
69331: PUSH
69332: LD_INT 750
69334: PUSH
69335: EMPTY
69336: LIST
69337: LIST
69338: PUSH
69339: EMPTY
69340: LIST
69341: LIST
69342: PPUSH
69343: CALL_OW 72
69347: ST_TO_ADDR
// if not tmp then
69348: LD_VAR 0 5
69352: NOT
69353: IFFALSE 69400
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
69355: LD_ADDR_VAR 0 5
69359: PUSH
69360: LD_EXP 44
69364: PUSH
69365: LD_VAR 0 2
69369: ARRAY
69370: PPUSH
69371: LD_INT 25
69373: PUSH
69374: LD_INT 2
69376: PUSH
69377: EMPTY
69378: LIST
69379: LIST
69380: PUSH
69381: LD_INT 24
69383: PUSH
69384: LD_INT 750
69386: PUSH
69387: EMPTY
69388: LIST
69389: LIST
69390: PUSH
69391: EMPTY
69392: LIST
69393: LIST
69394: PPUSH
69395: CALL_OW 72
69399: ST_TO_ADDR
// if mc_ape [ i ] and UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) and tmp < 5 then
69400: LD_EXP 73
69404: PUSH
69405: LD_VAR 0 2
69409: ARRAY
69410: PUSH
69411: LD_EXP 44
69415: PUSH
69416: LD_VAR 0 2
69420: ARRAY
69421: PPUSH
69422: LD_INT 25
69424: PUSH
69425: LD_INT 2
69427: PUSH
69428: EMPTY
69429: LIST
69430: LIST
69431: PUSH
69432: LD_INT 24
69434: PUSH
69435: LD_INT 750
69437: PUSH
69438: EMPTY
69439: LIST
69440: LIST
69441: PUSH
69442: EMPTY
69443: LIST
69444: LIST
69445: PPUSH
69446: CALL_OW 72
69450: AND
69451: PUSH
69452: LD_VAR 0 5
69456: PUSH
69457: LD_INT 5
69459: LESS
69460: AND
69461: IFFALSE 69543
// begin for j in UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) do
69463: LD_ADDR_VAR 0 3
69467: PUSH
69468: LD_EXP 44
69472: PUSH
69473: LD_VAR 0 2
69477: ARRAY
69478: PPUSH
69479: LD_INT 25
69481: PUSH
69482: LD_INT 2
69484: PUSH
69485: EMPTY
69486: LIST
69487: LIST
69488: PUSH
69489: LD_INT 24
69491: PUSH
69492: LD_INT 750
69494: PUSH
69495: EMPTY
69496: LIST
69497: LIST
69498: PUSH
69499: EMPTY
69500: LIST
69501: LIST
69502: PPUSH
69503: CALL_OW 72
69507: PUSH
69508: FOR_IN
69509: IFFALSE 69541
// begin tmp := tmp union j ;
69511: LD_ADDR_VAR 0 5
69515: PUSH
69516: LD_VAR 0 5
69520: PUSH
69521: LD_VAR 0 3
69525: UNION
69526: ST_TO_ADDR
// if tmp >= 5 then
69527: LD_VAR 0 5
69531: PUSH
69532: LD_INT 5
69534: GREATEREQUAL
69535: IFFALSE 69539
// break ;
69537: GO 69541
// end ;
69539: GO 69508
69541: POP
69542: POP
// end ; if not tmp then
69543: LD_VAR 0 5
69547: NOT
69548: IFFALSE 69552
// continue ;
69550: GO 68764
// for j in tmp do
69552: LD_ADDR_VAR 0 3
69556: PUSH
69557: LD_VAR 0 5
69561: PUSH
69562: FOR_IN
69563: IFFALSE 69653
// if not GetTag ( j ) then
69565: LD_VAR 0 3
69569: PPUSH
69570: CALL_OW 110
69574: NOT
69575: IFFALSE 69651
// begin mc_crates_collector := ReplaceIn ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
69577: LD_ADDR_EXP 61
69581: PUSH
69582: LD_EXP 61
69586: PPUSH
69587: LD_VAR 0 2
69591: PUSH
69592: LD_EXP 61
69596: PUSH
69597: LD_VAR 0 2
69601: ARRAY
69602: PUSH
69603: LD_INT 1
69605: PLUS
69606: PUSH
69607: EMPTY
69608: LIST
69609: LIST
69610: PPUSH
69611: LD_VAR 0 3
69615: PPUSH
69616: CALL 24301 0 3
69620: ST_TO_ADDR
// SetTag ( j , 107 ) ;
69621: LD_VAR 0 3
69625: PPUSH
69626: LD_INT 107
69628: PPUSH
69629: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
69633: LD_EXP 61
69637: PUSH
69638: LD_VAR 0 2
69642: ARRAY
69643: PUSH
69644: LD_INT 5
69646: GREATEREQUAL
69647: IFFALSE 69651
// break ;
69649: GO 69653
// end ;
69651: GO 69562
69653: POP
69654: POP
// end ; if mc_crates_collector [ i ] and target then
69655: LD_EXP 61
69659: PUSH
69660: LD_VAR 0 2
69664: ARRAY
69665: PUSH
69666: LD_VAR 0 6
69670: AND
69671: IFFALSE 69914
// begin if mc_crates_collector [ i ] < target [ 1 ] then
69673: LD_EXP 61
69677: PUSH
69678: LD_VAR 0 2
69682: ARRAY
69683: PUSH
69684: LD_VAR 0 6
69688: PUSH
69689: LD_INT 1
69691: ARRAY
69692: LESS
69693: IFFALSE 69713
// tmp := mc_crates_collector [ i ] else
69695: LD_ADDR_VAR 0 5
69699: PUSH
69700: LD_EXP 61
69704: PUSH
69705: LD_VAR 0 2
69709: ARRAY
69710: ST_TO_ADDR
69711: GO 69727
// tmp := target [ 1 ] ;
69713: LD_ADDR_VAR 0 5
69717: PUSH
69718: LD_VAR 0 6
69722: PUSH
69723: LD_INT 1
69725: ARRAY
69726: ST_TO_ADDR
// k := 0 ;
69727: LD_ADDR_VAR 0 4
69731: PUSH
69732: LD_INT 0
69734: ST_TO_ADDR
// for j in mc_crates_collector [ i ] do
69735: LD_ADDR_VAR 0 3
69739: PUSH
69740: LD_EXP 61
69744: PUSH
69745: LD_VAR 0 2
69749: ARRAY
69750: PUSH
69751: FOR_IN
69752: IFFALSE 69912
// begin k := k + 1 ;
69754: LD_ADDR_VAR 0 4
69758: PUSH
69759: LD_VAR 0 4
69763: PUSH
69764: LD_INT 1
69766: PLUS
69767: ST_TO_ADDR
// if k > tmp then
69768: LD_VAR 0 4
69772: PUSH
69773: LD_VAR 0 5
69777: GREATER
69778: IFFALSE 69782
// break ;
69780: GO 69912
// if not GetClass ( j ) in [ 2 , 16 ] then
69782: LD_VAR 0 3
69786: PPUSH
69787: CALL_OW 257
69791: PUSH
69792: LD_INT 2
69794: PUSH
69795: LD_INT 16
69797: PUSH
69798: EMPTY
69799: LIST
69800: LIST
69801: IN
69802: NOT
69803: IFFALSE 69856
// begin mc_crates_collector := Replace ( mc_crates_collector , i , mc_crates_collector [ i ] diff j ) ;
69805: LD_ADDR_EXP 61
69809: PUSH
69810: LD_EXP 61
69814: PPUSH
69815: LD_VAR 0 2
69819: PPUSH
69820: LD_EXP 61
69824: PUSH
69825: LD_VAR 0 2
69829: ARRAY
69830: PUSH
69831: LD_VAR 0 3
69835: DIFF
69836: PPUSH
69837: CALL_OW 1
69841: ST_TO_ADDR
// SetTag ( j , 0 ) ;
69842: LD_VAR 0 3
69846: PPUSH
69847: LD_INT 0
69849: PPUSH
69850: CALL_OW 109
// continue ;
69854: GO 69751
// end ; if IsInUnit ( j ) then
69856: LD_VAR 0 3
69860: PPUSH
69861: CALL_OW 310
69865: IFFALSE 69876
// ComExitBuilding ( j ) ;
69867: LD_VAR 0 3
69871: PPUSH
69872: CALL_OW 122
// wait ( 3 ) ;
69876: LD_INT 3
69878: PPUSH
69879: CALL_OW 67
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
69883: LD_VAR 0 3
69887: PPUSH
69888: LD_VAR 0 6
69892: PUSH
69893: LD_INT 2
69895: ARRAY
69896: PPUSH
69897: LD_VAR 0 6
69901: PUSH
69902: LD_INT 3
69904: ARRAY
69905: PPUSH
69906: CALL_OW 117
// end ;
69910: GO 69751
69912: POP
69913: POP
// end ; end else
69914: GO 70495
// begin for j in cargo do
69916: LD_ADDR_VAR 0 3
69920: PUSH
69921: LD_VAR 0 7
69925: PUSH
69926: FOR_IN
69927: IFFALSE 70493
// begin if GetTag ( j ) <> 0 then
69929: LD_VAR 0 3
69933: PPUSH
69934: CALL_OW 110
69938: PUSH
69939: LD_INT 0
69941: NONEQUAL
69942: IFFALSE 69946
// continue ;
69944: GO 69926
// if GetLives ( j ) < 1000 and not IsInArea ( j , mc_parking [ i ] ) then
69946: LD_VAR 0 3
69950: PPUSH
69951: CALL_OW 256
69955: PUSH
69956: LD_INT 1000
69958: LESS
69959: PUSH
69960: LD_VAR 0 3
69964: PPUSH
69965: LD_EXP 68
69969: PUSH
69970: LD_VAR 0 2
69974: ARRAY
69975: PPUSH
69976: CALL_OW 308
69980: NOT
69981: AND
69982: IFFALSE 70004
// ComMoveToArea ( j , mc_parking [ i ] ) ;
69984: LD_VAR 0 3
69988: PPUSH
69989: LD_EXP 68
69993: PUSH
69994: LD_VAR 0 2
69998: ARRAY
69999: PPUSH
70000: CALL_OW 113
// if GetLives ( j ) < 1000 and IsInArea ( j , mc_parking [ i ] ) then
70004: LD_VAR 0 3
70008: PPUSH
70009: CALL_OW 256
70013: PUSH
70014: LD_INT 1000
70016: LESS
70017: PUSH
70018: LD_VAR 0 3
70022: PPUSH
70023: LD_EXP 68
70027: PUSH
70028: LD_VAR 0 2
70032: ARRAY
70033: PPUSH
70034: CALL_OW 308
70038: AND
70039: IFFALSE 70043
// continue ;
70041: GO 69926
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
70043: LD_VAR 0 3
70047: PPUSH
70048: CALL_OW 262
70052: PUSH
70053: LD_INT 2
70055: EQUAL
70056: PUSH
70057: LD_VAR 0 3
70061: PPUSH
70062: CALL_OW 261
70066: PUSH
70067: LD_INT 15
70069: LESS
70070: AND
70071: IFFALSE 70075
// continue ;
70073: GO 69926
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
70075: LD_VAR 0 3
70079: PPUSH
70080: CALL_OW 262
70084: PUSH
70085: LD_INT 1
70087: EQUAL
70088: PUSH
70089: LD_VAR 0 3
70093: PPUSH
70094: CALL_OW 261
70098: PUSH
70099: LD_INT 10
70101: LESS
70102: AND
70103: IFFALSE 70432
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
70105: LD_ADDR_VAR 0 8
70109: PUSH
70110: LD_EXP 44
70114: PUSH
70115: LD_VAR 0 2
70119: ARRAY
70120: PPUSH
70121: LD_INT 2
70123: PUSH
70124: LD_INT 30
70126: PUSH
70127: LD_INT 0
70129: PUSH
70130: EMPTY
70131: LIST
70132: LIST
70133: PUSH
70134: LD_INT 30
70136: PUSH
70137: LD_INT 1
70139: PUSH
70140: EMPTY
70141: LIST
70142: LIST
70143: PUSH
70144: EMPTY
70145: LIST
70146: LIST
70147: LIST
70148: PPUSH
70149: CALL_OW 72
70153: ST_TO_ADDR
// if not depot then
70154: LD_VAR 0 8
70158: NOT
70159: IFFALSE 70163
// continue ;
70161: GO 69926
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
70163: LD_VAR 0 3
70167: PPUSH
70168: LD_VAR 0 8
70172: PPUSH
70173: LD_VAR 0 3
70177: PPUSH
70178: CALL_OW 74
70182: PPUSH
70183: CALL_OW 296
70187: PUSH
70188: LD_INT 6
70190: LESS
70191: IFFALSE 70207
// SetFuel ( j , 100 ) else
70193: LD_VAR 0 3
70197: PPUSH
70198: LD_INT 100
70200: PPUSH
70201: CALL_OW 240
70205: GO 70432
// if GetFuel ( j ) = 0 then
70207: LD_VAR 0 3
70211: PPUSH
70212: CALL_OW 261
70216: PUSH
70217: LD_INT 0
70219: EQUAL
70220: IFFALSE 70432
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
70222: LD_ADDR_EXP 63
70226: PUSH
70227: LD_EXP 63
70231: PPUSH
70232: LD_VAR 0 2
70236: PPUSH
70237: LD_EXP 63
70241: PUSH
70242: LD_VAR 0 2
70246: ARRAY
70247: PUSH
70248: LD_VAR 0 3
70252: DIFF
70253: PPUSH
70254: CALL_OW 1
70258: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
70259: LD_VAR 0 3
70263: PPUSH
70264: CALL_OW 263
70268: PUSH
70269: LD_INT 1
70271: EQUAL
70272: IFFALSE 70288
// ComExitVehicle ( IsInUnit ( j ) ) ;
70274: LD_VAR 0 3
70278: PPUSH
70279: CALL_OW 310
70283: PPUSH
70284: CALL_OW 121
// if GetControl ( j ) = control_remote then
70288: LD_VAR 0 3
70292: PPUSH
70293: CALL_OW 263
70297: PUSH
70298: LD_INT 2
70300: EQUAL
70301: IFFALSE 70312
// ComUnlink ( j ) ;
70303: LD_VAR 0 3
70307: PPUSH
70308: CALL_OW 136
// fac := MC_GetBuildings ( i , b_factory ) ;
70312: LD_ADDR_VAR 0 9
70316: PUSH
70317: LD_VAR 0 2
70321: PPUSH
70322: LD_INT 3
70324: PPUSH
70325: CALL 79785 0 2
70329: ST_TO_ADDR
// if fac then
70330: LD_VAR 0 9
70334: IFFALSE 70430
// begin for k in fac do
70336: LD_ADDR_VAR 0 4
70340: PUSH
70341: LD_VAR 0 9
70345: PUSH
70346: FOR_IN
70347: IFFALSE 70428
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
70349: LD_ADDR_VAR 0 10
70353: PUSH
70354: LD_VAR 0 9
70358: PPUSH
70359: LD_VAR 0 3
70363: PPUSH
70364: CALL_OW 265
70368: PPUSH
70369: LD_VAR 0 3
70373: PPUSH
70374: CALL_OW 262
70378: PPUSH
70379: LD_VAR 0 3
70383: PPUSH
70384: CALL_OW 263
70388: PPUSH
70389: LD_VAR 0 3
70393: PPUSH
70394: CALL_OW 264
70398: PPUSH
70399: CALL 21833 0 5
70403: ST_TO_ADDR
// if components then
70404: LD_VAR 0 10
70408: IFFALSE 70426
// begin MC_InsertProduceList ( i , components ) ;
70410: LD_VAR 0 2
70414: PPUSH
70415: LD_VAR 0 10
70419: PPUSH
70420: CALL 79330 0 2
// break ;
70424: GO 70428
// end ; end ;
70426: GO 70346
70428: POP
70429: POP
// end ; continue ;
70430: GO 69926
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
70432: LD_VAR 0 3
70436: PPUSH
70437: LD_INT 1
70439: PPUSH
70440: CALL_OW 289
70444: PUSH
70445: LD_INT 100
70447: LESS
70448: PUSH
70449: LD_VAR 0 3
70453: PPUSH
70454: CALL_OW 314
70458: NOT
70459: AND
70460: IFFALSE 70489
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
70462: LD_VAR 0 3
70466: PPUSH
70467: LD_VAR 0 6
70471: PUSH
70472: LD_INT 2
70474: ARRAY
70475: PPUSH
70476: LD_VAR 0 6
70480: PUSH
70481: LD_INT 3
70483: ARRAY
70484: PPUSH
70485: CALL_OW 117
// break ;
70489: GO 70493
// end ;
70491: GO 69926
70493: POP
70494: POP
// end ; end ;
70495: GO 68764
70497: POP
70498: POP
// end ;
70499: LD_VAR 0 1
70503: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
70504: LD_INT 0
70506: PPUSH
70507: PPUSH
70508: PPUSH
70509: PPUSH
// if not mc_bases then
70510: LD_EXP 44
70514: NOT
70515: IFFALSE 70519
// exit ;
70517: GO 70680
// for i = 1 to mc_bases do
70519: LD_ADDR_VAR 0 2
70523: PUSH
70524: DOUBLE
70525: LD_INT 1
70527: DEC
70528: ST_TO_ADDR
70529: LD_EXP 44
70533: PUSH
70534: FOR_TO
70535: IFFALSE 70678
// begin tmp := UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) ;
70537: LD_ADDR_VAR 0 4
70541: PUSH
70542: LD_EXP 63
70546: PUSH
70547: LD_VAR 0 2
70551: ARRAY
70552: PUSH
70553: LD_EXP 66
70557: PUSH
70558: LD_VAR 0 2
70562: ARRAY
70563: UNION
70564: PPUSH
70565: LD_INT 33
70567: PUSH
70568: LD_INT 2
70570: PUSH
70571: EMPTY
70572: LIST
70573: LIST
70574: PPUSH
70575: CALL_OW 72
70579: ST_TO_ADDR
// if tmp then
70580: LD_VAR 0 4
70584: IFFALSE 70676
// for j in tmp do
70586: LD_ADDR_VAR 0 3
70590: PUSH
70591: LD_VAR 0 4
70595: PUSH
70596: FOR_IN
70597: IFFALSE 70674
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
70599: LD_VAR 0 3
70603: PPUSH
70604: CALL_OW 312
70608: NOT
70609: PUSH
70610: LD_VAR 0 3
70614: PPUSH
70615: CALL_OW 256
70619: PUSH
70620: LD_INT 250
70622: GREATEREQUAL
70623: AND
70624: IFFALSE 70637
// Connect ( j ) else
70626: LD_VAR 0 3
70630: PPUSH
70631: CALL 27234 0 1
70635: GO 70672
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
70637: LD_VAR 0 3
70641: PPUSH
70642: CALL_OW 256
70646: PUSH
70647: LD_INT 250
70649: LESS
70650: PUSH
70651: LD_VAR 0 3
70655: PPUSH
70656: CALL_OW 312
70660: AND
70661: IFFALSE 70672
// ComUnlink ( j ) ;
70663: LD_VAR 0 3
70667: PPUSH
70668: CALL_OW 136
70672: GO 70596
70674: POP
70675: POP
// end ;
70676: GO 70534
70678: POP
70679: POP
// end ;
70680: LD_VAR 0 1
70684: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
70685: LD_INT 0
70687: PPUSH
70688: PPUSH
70689: PPUSH
70690: PPUSH
70691: PPUSH
// if not mc_bases then
70692: LD_EXP 44
70696: NOT
70697: IFFALSE 70701
// exit ;
70699: GO 71146
// for i = 1 to mc_bases do
70701: LD_ADDR_VAR 0 2
70705: PUSH
70706: DOUBLE
70707: LD_INT 1
70709: DEC
70710: ST_TO_ADDR
70711: LD_EXP 44
70715: PUSH
70716: FOR_TO
70717: IFFALSE 71144
// begin if not mc_produce [ i ] then
70719: LD_EXP 65
70723: PUSH
70724: LD_VAR 0 2
70728: ARRAY
70729: NOT
70730: IFFALSE 70734
// continue ;
70732: GO 70716
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
70734: LD_ADDR_VAR 0 5
70738: PUSH
70739: LD_EXP 44
70743: PUSH
70744: LD_VAR 0 2
70748: ARRAY
70749: PPUSH
70750: LD_INT 30
70752: PUSH
70753: LD_INT 3
70755: PUSH
70756: EMPTY
70757: LIST
70758: LIST
70759: PPUSH
70760: CALL_OW 72
70764: ST_TO_ADDR
// if not fac then
70765: LD_VAR 0 5
70769: NOT
70770: IFFALSE 70774
// continue ;
70772: GO 70716
// for j in fac do
70774: LD_ADDR_VAR 0 3
70778: PUSH
70779: LD_VAR 0 5
70783: PUSH
70784: FOR_IN
70785: IFFALSE 71140
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] then
70787: LD_VAR 0 3
70791: PPUSH
70792: CALL_OW 461
70796: PUSH
70797: LD_INT 2
70799: NONEQUAL
70800: PUSH
70801: LD_VAR 0 3
70805: PPUSH
70806: LD_INT 15
70808: PPUSH
70809: CALL 26894 0 2
70813: PUSH
70814: LD_INT 4
70816: ARRAY
70817: OR
70818: IFFALSE 70822
// continue ;
70820: GO 70784
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
70822: LD_VAR 0 3
70826: PPUSH
70827: LD_EXP 65
70831: PUSH
70832: LD_VAR 0 2
70836: ARRAY
70837: PUSH
70838: LD_INT 1
70840: ARRAY
70841: PUSH
70842: LD_INT 1
70844: ARRAY
70845: PPUSH
70846: LD_EXP 65
70850: PUSH
70851: LD_VAR 0 2
70855: ARRAY
70856: PUSH
70857: LD_INT 1
70859: ARRAY
70860: PUSH
70861: LD_INT 2
70863: ARRAY
70864: PPUSH
70865: LD_EXP 65
70869: PUSH
70870: LD_VAR 0 2
70874: ARRAY
70875: PUSH
70876: LD_INT 1
70878: ARRAY
70879: PUSH
70880: LD_INT 3
70882: ARRAY
70883: PPUSH
70884: LD_EXP 65
70888: PUSH
70889: LD_VAR 0 2
70893: ARRAY
70894: PUSH
70895: LD_INT 1
70897: ARRAY
70898: PUSH
70899: LD_INT 4
70901: ARRAY
70902: PPUSH
70903: CALL_OW 448
70907: PUSH
70908: LD_VAR 0 3
70912: PPUSH
70913: LD_EXP 65
70917: PUSH
70918: LD_VAR 0 2
70922: ARRAY
70923: PUSH
70924: LD_INT 1
70926: ARRAY
70927: PUSH
70928: LD_INT 1
70930: ARRAY
70931: PUSH
70932: LD_EXP 65
70936: PUSH
70937: LD_VAR 0 2
70941: ARRAY
70942: PUSH
70943: LD_INT 1
70945: ARRAY
70946: PUSH
70947: LD_INT 2
70949: ARRAY
70950: PUSH
70951: LD_EXP 65
70955: PUSH
70956: LD_VAR 0 2
70960: ARRAY
70961: PUSH
70962: LD_INT 1
70964: ARRAY
70965: PUSH
70966: LD_INT 3
70968: ARRAY
70969: PUSH
70970: LD_EXP 65
70974: PUSH
70975: LD_VAR 0 2
70979: ARRAY
70980: PUSH
70981: LD_INT 1
70983: ARRAY
70984: PUSH
70985: LD_INT 4
70987: ARRAY
70988: PUSH
70989: EMPTY
70990: LIST
70991: LIST
70992: LIST
70993: LIST
70994: PPUSH
70995: CALL 30565 0 2
70999: AND
71000: IFFALSE 71138
// begin AddComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
71002: LD_VAR 0 3
71006: PPUSH
71007: LD_EXP 65
71011: PUSH
71012: LD_VAR 0 2
71016: ARRAY
71017: PUSH
71018: LD_INT 1
71020: ARRAY
71021: PUSH
71022: LD_INT 1
71024: ARRAY
71025: PPUSH
71026: LD_EXP 65
71030: PUSH
71031: LD_VAR 0 2
71035: ARRAY
71036: PUSH
71037: LD_INT 1
71039: ARRAY
71040: PUSH
71041: LD_INT 2
71043: ARRAY
71044: PPUSH
71045: LD_EXP 65
71049: PUSH
71050: LD_VAR 0 2
71054: ARRAY
71055: PUSH
71056: LD_INT 1
71058: ARRAY
71059: PUSH
71060: LD_INT 3
71062: ARRAY
71063: PPUSH
71064: LD_EXP 65
71068: PUSH
71069: LD_VAR 0 2
71073: ARRAY
71074: PUSH
71075: LD_INT 1
71077: ARRAY
71078: PUSH
71079: LD_INT 4
71081: ARRAY
71082: PPUSH
71083: CALL_OW 185
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
71087: LD_ADDR_VAR 0 4
71091: PUSH
71092: LD_EXP 65
71096: PUSH
71097: LD_VAR 0 2
71101: ARRAY
71102: PPUSH
71103: LD_INT 1
71105: PPUSH
71106: CALL_OW 3
71110: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
71111: LD_ADDR_EXP 65
71115: PUSH
71116: LD_EXP 65
71120: PPUSH
71121: LD_VAR 0 2
71125: PPUSH
71126: LD_VAR 0 4
71130: PPUSH
71131: CALL_OW 1
71135: ST_TO_ADDR
// break ;
71136: GO 71140
// end ; end ;
71138: GO 70784
71140: POP
71141: POP
// end ;
71142: GO 70716
71144: POP
71145: POP
// end ;
71146: LD_VAR 0 1
71150: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
71151: LD_INT 0
71153: PPUSH
71154: PPUSH
71155: PPUSH
// if not mc_bases then
71156: LD_EXP 44
71160: NOT
71161: IFFALSE 71165
// exit ;
71163: GO 71254
// for i = 1 to mc_bases do
71165: LD_ADDR_VAR 0 2
71169: PUSH
71170: DOUBLE
71171: LD_INT 1
71173: DEC
71174: ST_TO_ADDR
71175: LD_EXP 44
71179: PUSH
71180: FOR_TO
71181: IFFALSE 71252
// begin if mc_attack [ i ] then
71183: LD_EXP 64
71187: PUSH
71188: LD_VAR 0 2
71192: ARRAY
71193: IFFALSE 71250
// begin tmp := mc_attack [ i ] [ 1 ] ;
71195: LD_ADDR_VAR 0 3
71199: PUSH
71200: LD_EXP 64
71204: PUSH
71205: LD_VAR 0 2
71209: ARRAY
71210: PUSH
71211: LD_INT 1
71213: ARRAY
71214: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
71215: LD_ADDR_EXP 64
71219: PUSH
71220: LD_EXP 64
71224: PPUSH
71225: LD_VAR 0 2
71229: PPUSH
71230: EMPTY
71231: PPUSH
71232: CALL_OW 1
71236: ST_TO_ADDR
// Attack ( tmp ) ;
71237: LD_VAR 0 3
71241: PPUSH
71242: CALL 97271 0 1
// exit ;
71246: POP
71247: POP
71248: GO 71254
// end ; end ;
71250: GO 71180
71252: POP
71253: POP
// end ;
71254: LD_VAR 0 1
71258: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
71259: LD_INT 0
71261: PPUSH
71262: PPUSH
71263: PPUSH
71264: PPUSH
71265: PPUSH
71266: PPUSH
71267: PPUSH
// if not mc_bases then
71268: LD_EXP 44
71272: NOT
71273: IFFALSE 71277
// exit ;
71275: GO 71859
// for i = 1 to mc_bases do
71277: LD_ADDR_VAR 0 2
71281: PUSH
71282: DOUBLE
71283: LD_INT 1
71285: DEC
71286: ST_TO_ADDR
71287: LD_EXP 44
71291: PUSH
71292: FOR_TO
71293: IFFALSE 71857
// begin if not mc_bases [ i ] then
71295: LD_EXP 44
71299: PUSH
71300: LD_VAR 0 2
71304: ARRAY
71305: NOT
71306: IFFALSE 71310
// continue ;
71308: GO 71292
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
71310: LD_ADDR_VAR 0 7
71314: PUSH
71315: LD_EXP 44
71319: PUSH
71320: LD_VAR 0 2
71324: ARRAY
71325: PUSH
71326: LD_INT 1
71328: ARRAY
71329: PPUSH
71330: CALL 21137 0 1
71334: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
71335: LD_ADDR_EXP 67
71339: PUSH
71340: LD_EXP 67
71344: PPUSH
71345: LD_VAR 0 2
71349: PPUSH
71350: LD_EXP 44
71354: PUSH
71355: LD_VAR 0 2
71359: ARRAY
71360: PUSH
71361: LD_INT 1
71363: ARRAY
71364: PPUSH
71365: CALL_OW 255
71369: PPUSH
71370: LD_EXP 69
71374: PUSH
71375: LD_VAR 0 2
71379: ARRAY
71380: PPUSH
71381: CALL 21102 0 2
71385: PPUSH
71386: CALL_OW 1
71390: ST_TO_ADDR
// if not mc_scan [ i ] then
71391: LD_EXP 67
71395: PUSH
71396: LD_VAR 0 2
71400: ARRAY
71401: NOT
71402: IFFALSE 71557
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
71404: LD_ADDR_VAR 0 4
71408: PUSH
71409: LD_EXP 44
71413: PUSH
71414: LD_VAR 0 2
71418: ARRAY
71419: PPUSH
71420: LD_INT 2
71422: PUSH
71423: LD_INT 25
71425: PUSH
71426: LD_INT 5
71428: PUSH
71429: EMPTY
71430: LIST
71431: LIST
71432: PUSH
71433: LD_INT 25
71435: PUSH
71436: LD_INT 8
71438: PUSH
71439: EMPTY
71440: LIST
71441: LIST
71442: PUSH
71443: LD_INT 25
71445: PUSH
71446: LD_INT 9
71448: PUSH
71449: EMPTY
71450: LIST
71451: LIST
71452: PUSH
71453: EMPTY
71454: LIST
71455: LIST
71456: LIST
71457: LIST
71458: PPUSH
71459: CALL_OW 72
71463: ST_TO_ADDR
// if not tmp then
71464: LD_VAR 0 4
71468: NOT
71469: IFFALSE 71473
// continue ;
71471: GO 71292
// for j in tmp do
71473: LD_ADDR_VAR 0 3
71477: PUSH
71478: LD_VAR 0 4
71482: PUSH
71483: FOR_IN
71484: IFFALSE 71555
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
71486: LD_VAR 0 3
71490: PPUSH
71491: CALL_OW 310
71495: PPUSH
71496: CALL_OW 266
71500: PUSH
71501: LD_INT 5
71503: EQUAL
71504: PUSH
71505: LD_VAR 0 3
71509: PPUSH
71510: CALL_OW 257
71514: PUSH
71515: LD_INT 1
71517: EQUAL
71518: AND
71519: PUSH
71520: LD_VAR 0 3
71524: PPUSH
71525: CALL_OW 459
71529: NOT
71530: AND
71531: PUSH
71532: LD_VAR 0 7
71536: AND
71537: IFFALSE 71553
// ComChangeProfession ( j , class ) ;
71539: LD_VAR 0 3
71543: PPUSH
71544: LD_VAR 0 7
71548: PPUSH
71549: CALL_OW 123
71553: GO 71483
71555: POP
71556: POP
// end ; if mc_scan [ i ] and not mc_defender [ i ] and not UnitFilter ( mc_bases [ i ] , [ f_btype , b_bunker ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) then
71557: LD_EXP 67
71561: PUSH
71562: LD_VAR 0 2
71566: ARRAY
71567: PUSH
71568: LD_EXP 66
71572: PUSH
71573: LD_VAR 0 2
71577: ARRAY
71578: NOT
71579: AND
71580: PUSH
71581: LD_EXP 44
71585: PUSH
71586: LD_VAR 0 2
71590: ARRAY
71591: PPUSH
71592: LD_INT 30
71594: PUSH
71595: LD_INT 32
71597: PUSH
71598: EMPTY
71599: LIST
71600: LIST
71601: PPUSH
71602: CALL_OW 72
71606: NOT
71607: AND
71608: PUSH
71609: LD_EXP 44
71613: PUSH
71614: LD_VAR 0 2
71618: ARRAY
71619: PPUSH
71620: LD_INT 2
71622: PUSH
71623: LD_INT 30
71625: PUSH
71626: LD_INT 4
71628: PUSH
71629: EMPTY
71630: LIST
71631: LIST
71632: PUSH
71633: LD_INT 30
71635: PUSH
71636: LD_INT 5
71638: PUSH
71639: EMPTY
71640: LIST
71641: LIST
71642: PUSH
71643: EMPTY
71644: LIST
71645: LIST
71646: LIST
71647: PPUSH
71648: CALL_OW 72
71652: NOT
71653: AND
71654: IFFALSE 71786
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
71656: LD_ADDR_VAR 0 4
71660: PUSH
71661: LD_EXP 44
71665: PUSH
71666: LD_VAR 0 2
71670: ARRAY
71671: PPUSH
71672: LD_INT 2
71674: PUSH
71675: LD_INT 25
71677: PUSH
71678: LD_INT 1
71680: PUSH
71681: EMPTY
71682: LIST
71683: LIST
71684: PUSH
71685: LD_INT 25
71687: PUSH
71688: LD_INT 5
71690: PUSH
71691: EMPTY
71692: LIST
71693: LIST
71694: PUSH
71695: LD_INT 25
71697: PUSH
71698: LD_INT 8
71700: PUSH
71701: EMPTY
71702: LIST
71703: LIST
71704: PUSH
71705: LD_INT 25
71707: PUSH
71708: LD_INT 9
71710: PUSH
71711: EMPTY
71712: LIST
71713: LIST
71714: PUSH
71715: EMPTY
71716: LIST
71717: LIST
71718: LIST
71719: LIST
71720: LIST
71721: PPUSH
71722: CALL_OW 72
71726: ST_TO_ADDR
// tmp := tmp diff FilterByTag ( tmp , 18 ) ;
71727: LD_ADDR_VAR 0 4
71731: PUSH
71732: LD_VAR 0 4
71736: PUSH
71737: LD_VAR 0 4
71741: PPUSH
71742: LD_INT 18
71744: PPUSH
71745: CALL 52862 0 2
71749: DIFF
71750: ST_TO_ADDR
// if tmp then
71751: LD_VAR 0 4
71755: IFFALSE 71786
// begin BasicDefend ( i , tmp , mc_scan_area [ i ] ) ;
71757: LD_VAR 0 2
71761: PPUSH
71762: LD_VAR 0 4
71766: PPUSH
71767: LD_EXP 69
71771: PUSH
71772: LD_VAR 0 2
71776: ARRAY
71777: PPUSH
71778: CALL 101980 0 3
// exit ;
71782: POP
71783: POP
71784: GO 71859
// end ; end ; if mc_scan [ i ] and mc_defender [ i ] then
71786: LD_EXP 67
71790: PUSH
71791: LD_VAR 0 2
71795: ARRAY
71796: PUSH
71797: LD_EXP 66
71801: PUSH
71802: LD_VAR 0 2
71806: ARRAY
71807: AND
71808: IFFALSE 71855
// begin tmp := mc_defender [ i ] ;
71810: LD_ADDR_VAR 0 4
71814: PUSH
71815: LD_EXP 66
71819: PUSH
71820: LD_VAR 0 2
71824: ARRAY
71825: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
71826: LD_VAR 0 2
71830: PPUSH
71831: LD_VAR 0 4
71835: PPUSH
71836: LD_EXP 67
71840: PUSH
71841: LD_VAR 0 2
71845: ARRAY
71846: PPUSH
71847: CALL 102541 0 3
// exit ;
71851: POP
71852: POP
71853: GO 71859
// end ; end ;
71855: GO 71292
71857: POP
71858: POP
// end ;
71859: LD_VAR 0 1
71863: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 , researching , idle_lab ; begin
71864: LD_INT 0
71866: PPUSH
71867: PPUSH
71868: PPUSH
71869: PPUSH
71870: PPUSH
71871: PPUSH
71872: PPUSH
71873: PPUSH
71874: PPUSH
71875: PPUSH
71876: PPUSH
// if not mc_bases then
71877: LD_EXP 44
71881: NOT
71882: IFFALSE 71886
// exit ;
71884: GO 72973
// for i = 1 to mc_bases do
71886: LD_ADDR_VAR 0 2
71890: PUSH
71891: DOUBLE
71892: LD_INT 1
71894: DEC
71895: ST_TO_ADDR
71896: LD_EXP 44
71900: PUSH
71901: FOR_TO
71902: IFFALSE 72971
// begin tmp := mc_lab [ i ] ;
71904: LD_ADDR_VAR 0 6
71908: PUSH
71909: LD_EXP 77
71913: PUSH
71914: LD_VAR 0 2
71918: ARRAY
71919: ST_TO_ADDR
// if not tmp then
71920: LD_VAR 0 6
71924: NOT
71925: IFFALSE 71929
// continue ;
71927: GO 71901
// idle_lab := 0 ;
71929: LD_ADDR_VAR 0 11
71933: PUSH
71934: LD_INT 0
71936: ST_TO_ADDR
// for j in tmp do
71937: LD_ADDR_VAR 0 3
71941: PUSH
71942: LD_VAR 0 6
71946: PUSH
71947: FOR_IN
71948: IFFALSE 72967
// begin researching := false ;
71950: LD_ADDR_VAR 0 10
71954: PUSH
71955: LD_INT 0
71957: ST_TO_ADDR
// side := GetSide ( j ) ;
71958: LD_ADDR_VAR 0 4
71962: PUSH
71963: LD_VAR 0 3
71967: PPUSH
71968: CALL_OW 255
71972: ST_TO_ADDR
// if not mc_tech [ side ] then
71973: LD_EXP 71
71977: PUSH
71978: LD_VAR 0 4
71982: ARRAY
71983: NOT
71984: IFFALSE 71988
// continue ;
71986: GO 71947
// if BuildingStatus ( j ) = bs_idle then
71988: LD_VAR 0 3
71992: PPUSH
71993: CALL_OW 461
71997: PUSH
71998: LD_INT 2
72000: EQUAL
72001: IFFALSE 72189
// begin if idle_lab and UnitsInside ( j ) < 6 then
72003: LD_VAR 0 11
72007: PUSH
72008: LD_VAR 0 3
72012: PPUSH
72013: CALL_OW 313
72017: PUSH
72018: LD_INT 6
72020: LESS
72021: AND
72022: IFFALSE 72093
// begin tmp2 := UnitsInside ( idle_lab ) ;
72024: LD_ADDR_VAR 0 9
72028: PUSH
72029: LD_VAR 0 11
72033: PPUSH
72034: CALL_OW 313
72038: ST_TO_ADDR
// if tmp2 then
72039: LD_VAR 0 9
72043: IFFALSE 72085
// for x in tmp2 do
72045: LD_ADDR_VAR 0 7
72049: PUSH
72050: LD_VAR 0 9
72054: PUSH
72055: FOR_IN
72056: IFFALSE 72083
// begin ComExitBuilding ( x ) ;
72058: LD_VAR 0 7
72062: PPUSH
72063: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
72067: LD_VAR 0 7
72071: PPUSH
72072: LD_VAR 0 3
72076: PPUSH
72077: CALL_OW 180
// end ;
72081: GO 72055
72083: POP
72084: POP
// idle_lab := 0 ;
72085: LD_ADDR_VAR 0 11
72089: PUSH
72090: LD_INT 0
72092: ST_TO_ADDR
// end ; for t in mc_tech [ side ] do
72093: LD_ADDR_VAR 0 5
72097: PUSH
72098: LD_EXP 71
72102: PUSH
72103: LD_VAR 0 4
72107: ARRAY
72108: PUSH
72109: FOR_IN
72110: IFFALSE 72170
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
72112: LD_VAR 0 3
72116: PPUSH
72117: LD_VAR 0 5
72121: PPUSH
72122: CALL_OW 430
72126: PUSH
72127: LD_VAR 0 4
72131: PPUSH
72132: LD_VAR 0 5
72136: PPUSH
72137: CALL 20207 0 2
72141: AND
72142: IFFALSE 72168
// begin researching := true ;
72144: LD_ADDR_VAR 0 10
72148: PUSH
72149: LD_INT 1
72151: ST_TO_ADDR
// ComResearch ( j , t ) ;
72152: LD_VAR 0 3
72156: PPUSH
72157: LD_VAR 0 5
72161: PPUSH
72162: CALL_OW 124
// break ;
72166: GO 72170
// end ;
72168: GO 72109
72170: POP
72171: POP
// if not researching then
72172: LD_VAR 0 10
72176: NOT
72177: IFFALSE 72189
// idle_lab := j ;
72179: LD_ADDR_VAR 0 11
72183: PUSH
72184: LD_VAR 0 3
72188: ST_TO_ADDR
// end ; if BuildingStatus ( j ) = bs_need_ape then
72189: LD_VAR 0 3
72193: PPUSH
72194: CALL_OW 461
72198: PUSH
72199: LD_INT 10
72201: EQUAL
72202: IFFALSE 72790
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
72204: LD_EXP 73
72208: PUSH
72209: LD_VAR 0 2
72213: ARRAY
72214: NOT
72215: PUSH
72216: LD_EXP 74
72220: PUSH
72221: LD_VAR 0 2
72225: ARRAY
72226: NOT
72227: AND
72228: PUSH
72229: LD_EXP 71
72233: PUSH
72234: LD_VAR 0 4
72238: ARRAY
72239: PUSH
72240: LD_INT 1
72242: GREATER
72243: AND
72244: IFFALSE 72375
// begin ComCancel ( j ) ;
72246: LD_VAR 0 3
72250: PPUSH
72251: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
72255: LD_ADDR_EXP 71
72259: PUSH
72260: LD_EXP 71
72264: PPUSH
72265: LD_VAR 0 4
72269: PPUSH
72270: LD_EXP 71
72274: PUSH
72275: LD_VAR 0 4
72279: ARRAY
72280: PPUSH
72281: LD_EXP 71
72285: PUSH
72286: LD_VAR 0 4
72290: ARRAY
72291: PUSH
72292: LD_INT 1
72294: MINUS
72295: PPUSH
72296: LD_EXP 71
72300: PUSH
72301: LD_VAR 0 4
72305: ARRAY
72306: PPUSH
72307: LD_INT 0
72309: PPUSH
72310: CALL 23719 0 4
72314: PPUSH
72315: CALL_OW 1
72319: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
72320: LD_ADDR_EXP 71
72324: PUSH
72325: LD_EXP 71
72329: PPUSH
72330: LD_VAR 0 4
72334: PPUSH
72335: LD_EXP 71
72339: PUSH
72340: LD_VAR 0 4
72344: ARRAY
72345: PPUSH
72346: LD_EXP 71
72350: PUSH
72351: LD_VAR 0 4
72355: ARRAY
72356: PPUSH
72357: LD_INT 1
72359: PPUSH
72360: LD_INT 0
72362: PPUSH
72363: CALL 23719 0 4
72367: PPUSH
72368: CALL_OW 1
72372: ST_TO_ADDR
// continue ;
72373: GO 71947
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
72375: LD_EXP 73
72379: PUSH
72380: LD_VAR 0 2
72384: ARRAY
72385: PUSH
72386: LD_EXP 74
72390: PUSH
72391: LD_VAR 0 2
72395: ARRAY
72396: NOT
72397: AND
72398: IFFALSE 72525
// begin mc_ape_in_lab := ReplaceIn ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
72400: LD_ADDR_EXP 74
72404: PUSH
72405: LD_EXP 74
72409: PPUSH
72410: LD_VAR 0 2
72414: PUSH
72415: LD_EXP 74
72419: PUSH
72420: LD_VAR 0 2
72424: ARRAY
72425: PUSH
72426: LD_INT 1
72428: PLUS
72429: PUSH
72430: EMPTY
72431: LIST
72432: LIST
72433: PPUSH
72434: LD_EXP 73
72438: PUSH
72439: LD_VAR 0 2
72443: ARRAY
72444: PUSH
72445: LD_INT 1
72447: ARRAY
72448: PPUSH
72449: CALL 24301 0 3
72453: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
72454: LD_EXP 73
72458: PUSH
72459: LD_VAR 0 2
72463: ARRAY
72464: PUSH
72465: LD_INT 1
72467: ARRAY
72468: PPUSH
72469: LD_INT 112
72471: PPUSH
72472: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
72476: LD_ADDR_VAR 0 9
72480: PUSH
72481: LD_EXP 73
72485: PUSH
72486: LD_VAR 0 2
72490: ARRAY
72491: PPUSH
72492: LD_INT 1
72494: PPUSH
72495: CALL_OW 3
72499: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
72500: LD_ADDR_EXP 73
72504: PUSH
72505: LD_EXP 73
72509: PPUSH
72510: LD_VAR 0 2
72514: PPUSH
72515: LD_VAR 0 9
72519: PPUSH
72520: CALL_OW 1
72524: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
72525: LD_EXP 73
72529: PUSH
72530: LD_VAR 0 2
72534: ARRAY
72535: PUSH
72536: LD_EXP 74
72540: PUSH
72541: LD_VAR 0 2
72545: ARRAY
72546: AND
72547: PUSH
72548: LD_EXP 74
72552: PUSH
72553: LD_VAR 0 2
72557: ARRAY
72558: PUSH
72559: LD_INT 1
72561: ARRAY
72562: PPUSH
72563: CALL_OW 310
72567: NOT
72568: AND
72569: PUSH
72570: LD_VAR 0 3
72574: PPUSH
72575: CALL_OW 313
72579: PUSH
72580: LD_INT 6
72582: EQUAL
72583: AND
72584: IFFALSE 72640
// begin tmp2 := UnitsInside ( j ) ;
72586: LD_ADDR_VAR 0 9
72590: PUSH
72591: LD_VAR 0 3
72595: PPUSH
72596: CALL_OW 313
72600: ST_TO_ADDR
// if tmp2 = 6 then
72601: LD_VAR 0 9
72605: PUSH
72606: LD_INT 6
72608: EQUAL
72609: IFFALSE 72640
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
72611: LD_VAR 0 9
72615: PUSH
72616: LD_INT 1
72618: ARRAY
72619: PPUSH
72620: LD_INT 112
72622: PPUSH
72623: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
72627: LD_VAR 0 9
72631: PUSH
72632: LD_INT 1
72634: ARRAY
72635: PPUSH
72636: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
72640: LD_EXP 74
72644: PUSH
72645: LD_VAR 0 2
72649: ARRAY
72650: PUSH
72651: LD_EXP 74
72655: PUSH
72656: LD_VAR 0 2
72660: ARRAY
72661: PUSH
72662: LD_INT 1
72664: ARRAY
72665: PPUSH
72666: CALL_OW 314
72670: NOT
72671: AND
72672: PUSH
72673: LD_EXP 74
72677: PUSH
72678: LD_VAR 0 2
72682: ARRAY
72683: PUSH
72684: LD_INT 1
72686: ARRAY
72687: PPUSH
72688: CALL_OW 310
72692: NOT
72693: AND
72694: IFFALSE 72720
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
72696: LD_EXP 74
72700: PUSH
72701: LD_VAR 0 2
72705: ARRAY
72706: PUSH
72707: LD_INT 1
72709: ARRAY
72710: PPUSH
72711: LD_VAR 0 3
72715: PPUSH
72716: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
72720: LD_EXP 74
72724: PUSH
72725: LD_VAR 0 2
72729: ARRAY
72730: PUSH
72731: LD_INT 1
72733: ARRAY
72734: PPUSH
72735: CALL_OW 310
72739: PUSH
72740: LD_EXP 74
72744: PUSH
72745: LD_VAR 0 2
72749: ARRAY
72750: PUSH
72751: LD_INT 1
72753: ARRAY
72754: PPUSH
72755: CALL_OW 310
72759: PPUSH
72760: CALL_OW 461
72764: PUSH
72765: LD_INT 3
72767: NONEQUAL
72768: AND
72769: IFFALSE 72790
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
72771: LD_EXP 74
72775: PUSH
72776: LD_VAR 0 2
72780: ARRAY
72781: PUSH
72782: LD_INT 1
72784: ARRAY
72785: PPUSH
72786: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
72790: LD_VAR 0 3
72794: PPUSH
72795: CALL_OW 461
72799: PUSH
72800: LD_INT 6
72802: EQUAL
72803: PUSH
72804: LD_VAR 0 6
72808: PUSH
72809: LD_INT 1
72811: GREATER
72812: AND
72813: IFFALSE 72965
// begin sci := [ ] ;
72815: LD_ADDR_VAR 0 8
72819: PUSH
72820: EMPTY
72821: ST_TO_ADDR
// for x in ( tmp diff j ) do
72822: LD_ADDR_VAR 0 7
72826: PUSH
72827: LD_VAR 0 6
72831: PUSH
72832: LD_VAR 0 3
72836: DIFF
72837: PUSH
72838: FOR_IN
72839: IFFALSE 72891
// begin if sci = 6 then
72841: LD_VAR 0 8
72845: PUSH
72846: LD_INT 6
72848: EQUAL
72849: IFFALSE 72853
// break ;
72851: GO 72891
// if BuildingStatus ( x ) = bs_idle then
72853: LD_VAR 0 7
72857: PPUSH
72858: CALL_OW 461
72862: PUSH
72863: LD_INT 2
72865: EQUAL
72866: IFFALSE 72889
// sci := sci ^ UnitsInside ( x ) ;
72868: LD_ADDR_VAR 0 8
72872: PUSH
72873: LD_VAR 0 8
72877: PUSH
72878: LD_VAR 0 7
72882: PPUSH
72883: CALL_OW 313
72887: ADD
72888: ST_TO_ADDR
// end ;
72889: GO 72838
72891: POP
72892: POP
// if not sci then
72893: LD_VAR 0 8
72897: NOT
72898: IFFALSE 72902
// continue ;
72900: GO 71947
// for x in sci do
72902: LD_ADDR_VAR 0 7
72906: PUSH
72907: LD_VAR 0 8
72911: PUSH
72912: FOR_IN
72913: IFFALSE 72963
// if IsInUnit ( x ) and not HasTask ( x ) then
72915: LD_VAR 0 7
72919: PPUSH
72920: CALL_OW 310
72924: PUSH
72925: LD_VAR 0 7
72929: PPUSH
72930: CALL_OW 314
72934: NOT
72935: AND
72936: IFFALSE 72961
// begin ComExitBuilding ( x ) ;
72938: LD_VAR 0 7
72942: PPUSH
72943: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
72947: LD_VAR 0 7
72951: PPUSH
72952: LD_VAR 0 3
72956: PPUSH
72957: CALL_OW 180
// end ;
72961: GO 72912
72963: POP
72964: POP
// end ; end ;
72965: GO 71947
72967: POP
72968: POP
// end ;
72969: GO 71901
72971: POP
72972: POP
// end ;
72973: LD_VAR 0 1
72977: RET
// export function MC_MinesTrigger ( ) ; var i ; begin
72978: LD_INT 0
72980: PPUSH
72981: PPUSH
// if not mc_bases then
72982: LD_EXP 44
72986: NOT
72987: IFFALSE 72991
// exit ;
72989: GO 73072
// for i = 1 to mc_bases do
72991: LD_ADDR_VAR 0 2
72995: PUSH
72996: DOUBLE
72997: LD_INT 1
72999: DEC
73000: ST_TO_ADDR
73001: LD_EXP 44
73005: PUSH
73006: FOR_TO
73007: IFFALSE 73070
// if mc_mines [ i ] and mc_miners [ i ] then
73009: LD_EXP 57
73013: PUSH
73014: LD_VAR 0 2
73018: ARRAY
73019: PUSH
73020: LD_EXP 58
73024: PUSH
73025: LD_VAR 0 2
73029: ARRAY
73030: AND
73031: IFFALSE 73068
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
73033: LD_EXP 58
73037: PUSH
73038: LD_VAR 0 2
73042: ARRAY
73043: PUSH
73044: LD_INT 1
73046: ARRAY
73047: PPUSH
73048: CALL_OW 255
73052: PPUSH
73053: LD_EXP 57
73057: PUSH
73058: LD_VAR 0 2
73062: ARRAY
73063: PPUSH
73064: CALL 21290 0 2
73068: GO 73006
73070: POP
73071: POP
// end ;
73072: LD_VAR 0 1
73076: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
73077: LD_INT 0
73079: PPUSH
73080: PPUSH
73081: PPUSH
73082: PPUSH
73083: PPUSH
73084: PPUSH
73085: PPUSH
73086: PPUSH
// if not mc_bases or not mc_parking then
73087: LD_EXP 44
73091: NOT
73092: PUSH
73093: LD_EXP 68
73097: NOT
73098: OR
73099: IFFALSE 73103
// exit ;
73101: GO 73802
// for i = 1 to mc_bases do
73103: LD_ADDR_VAR 0 2
73107: PUSH
73108: DOUBLE
73109: LD_INT 1
73111: DEC
73112: ST_TO_ADDR
73113: LD_EXP 44
73117: PUSH
73118: FOR_TO
73119: IFFALSE 73800
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
73121: LD_EXP 44
73125: PUSH
73126: LD_VAR 0 2
73130: ARRAY
73131: NOT
73132: PUSH
73133: LD_EXP 68
73137: PUSH
73138: LD_VAR 0 2
73142: ARRAY
73143: NOT
73144: OR
73145: IFFALSE 73149
// continue ;
73147: GO 73118
// side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
73149: LD_ADDR_VAR 0 5
73153: PUSH
73154: LD_EXP 44
73158: PUSH
73159: LD_VAR 0 2
73163: ARRAY
73164: PUSH
73165: LD_INT 1
73167: ARRAY
73168: PPUSH
73169: CALL_OW 255
73173: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
73174: LD_ADDR_VAR 0 6
73178: PUSH
73179: LD_EXP 44
73183: PUSH
73184: LD_VAR 0 2
73188: ARRAY
73189: PPUSH
73190: LD_INT 30
73192: PUSH
73193: LD_INT 3
73195: PUSH
73196: EMPTY
73197: LIST
73198: LIST
73199: PPUSH
73200: CALL_OW 72
73204: ST_TO_ADDR
// if not fac then
73205: LD_VAR 0 6
73209: NOT
73210: IFFALSE 73261
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
73212: LD_ADDR_VAR 0 6
73216: PUSH
73217: LD_EXP 44
73221: PUSH
73222: LD_VAR 0 2
73226: ARRAY
73227: PPUSH
73228: LD_INT 2
73230: PUSH
73231: LD_INT 30
73233: PUSH
73234: LD_INT 0
73236: PUSH
73237: EMPTY
73238: LIST
73239: LIST
73240: PUSH
73241: LD_INT 30
73243: PUSH
73244: LD_INT 1
73246: PUSH
73247: EMPTY
73248: LIST
73249: LIST
73250: PUSH
73251: EMPTY
73252: LIST
73253: LIST
73254: LIST
73255: PPUSH
73256: CALL_OW 72
73260: ST_TO_ADDR
// if not fac then
73261: LD_VAR 0 6
73265: NOT
73266: IFFALSE 73270
// continue ;
73268: GO 73118
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
73270: LD_ADDR_VAR 0 7
73274: PUSH
73275: LD_EXP 68
73279: PUSH
73280: LD_VAR 0 2
73284: ARRAY
73285: PPUSH
73286: LD_INT 22
73288: PUSH
73289: LD_VAR 0 5
73293: PUSH
73294: EMPTY
73295: LIST
73296: LIST
73297: PUSH
73298: LD_INT 21
73300: PUSH
73301: LD_INT 2
73303: PUSH
73304: EMPTY
73305: LIST
73306: LIST
73307: PUSH
73308: LD_INT 3
73310: PUSH
73311: LD_INT 24
73313: PUSH
73314: LD_INT 1000
73316: PUSH
73317: EMPTY
73318: LIST
73319: LIST
73320: PUSH
73321: EMPTY
73322: LIST
73323: LIST
73324: PUSH
73325: EMPTY
73326: LIST
73327: LIST
73328: LIST
73329: PPUSH
73330: CALL_OW 70
73334: ST_TO_ADDR
// for j in fac do
73335: LD_ADDR_VAR 0 3
73339: PUSH
73340: LD_VAR 0 6
73344: PUSH
73345: FOR_IN
73346: IFFALSE 73427
// vehs := vehs union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , j , 15 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
73348: LD_ADDR_VAR 0 7
73352: PUSH
73353: LD_VAR 0 7
73357: PUSH
73358: LD_INT 22
73360: PUSH
73361: LD_VAR 0 5
73365: PUSH
73366: EMPTY
73367: LIST
73368: LIST
73369: PUSH
73370: LD_INT 91
73372: PUSH
73373: LD_VAR 0 3
73377: PUSH
73378: LD_INT 15
73380: PUSH
73381: EMPTY
73382: LIST
73383: LIST
73384: LIST
73385: PUSH
73386: LD_INT 21
73388: PUSH
73389: LD_INT 2
73391: PUSH
73392: EMPTY
73393: LIST
73394: LIST
73395: PUSH
73396: LD_INT 3
73398: PUSH
73399: LD_INT 24
73401: PUSH
73402: LD_INT 1000
73404: PUSH
73405: EMPTY
73406: LIST
73407: LIST
73408: PUSH
73409: EMPTY
73410: LIST
73411: LIST
73412: PUSH
73413: EMPTY
73414: LIST
73415: LIST
73416: LIST
73417: LIST
73418: PPUSH
73419: CALL_OW 69
73423: UNION
73424: ST_TO_ADDR
73425: GO 73345
73427: POP
73428: POP
// if not vehs then
73429: LD_VAR 0 7
73433: NOT
73434: IFFALSE 73460
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
73436: LD_ADDR_EXP 56
73440: PUSH
73441: LD_EXP 56
73445: PPUSH
73446: LD_VAR 0 2
73450: PPUSH
73451: EMPTY
73452: PPUSH
73453: CALL_OW 1
73457: ST_TO_ADDR
// continue ;
73458: GO 73118
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
73460: LD_ADDR_VAR 0 8
73464: PUSH
73465: LD_EXP 44
73469: PUSH
73470: LD_VAR 0 2
73474: ARRAY
73475: PPUSH
73476: LD_INT 30
73478: PUSH
73479: LD_INT 3
73481: PUSH
73482: EMPTY
73483: LIST
73484: LIST
73485: PPUSH
73486: CALL_OW 72
73490: ST_TO_ADDR
// if tmp then
73491: LD_VAR 0 8
73495: IFFALSE 73598
// begin for j in tmp do
73497: LD_ADDR_VAR 0 3
73501: PUSH
73502: LD_VAR 0 8
73506: PUSH
73507: FOR_IN
73508: IFFALSE 73596
// for k in UnitsInside ( j ) do
73510: LD_ADDR_VAR 0 4
73514: PUSH
73515: LD_VAR 0 3
73519: PPUSH
73520: CALL_OW 313
73524: PUSH
73525: FOR_IN
73526: IFFALSE 73592
// if k then
73528: LD_VAR 0 4
73532: IFFALSE 73590
// if not k in mc_repair_vehicle [ i ] then
73534: LD_VAR 0 4
73538: PUSH
73539: LD_EXP 56
73543: PUSH
73544: LD_VAR 0 2
73548: ARRAY
73549: IN
73550: NOT
73551: IFFALSE 73590
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
73553: LD_ADDR_EXP 56
73557: PUSH
73558: LD_EXP 56
73562: PPUSH
73563: LD_VAR 0 2
73567: PPUSH
73568: LD_EXP 56
73572: PUSH
73573: LD_VAR 0 2
73577: ARRAY
73578: PUSH
73579: LD_VAR 0 4
73583: UNION
73584: PPUSH
73585: CALL_OW 1
73589: ST_TO_ADDR
73590: GO 73525
73592: POP
73593: POP
73594: GO 73507
73596: POP
73597: POP
// end ; if not mc_repair_vehicle [ i ] then
73598: LD_EXP 56
73602: PUSH
73603: LD_VAR 0 2
73607: ARRAY
73608: NOT
73609: IFFALSE 73613
// continue ;
73611: GO 73118
// for j in mc_repair_vehicle [ i ] do
73613: LD_ADDR_VAR 0 3
73617: PUSH
73618: LD_EXP 56
73622: PUSH
73623: LD_VAR 0 2
73627: ARRAY
73628: PUSH
73629: FOR_IN
73630: IFFALSE 73796
// begin if GetClass ( j ) <> 3 then
73632: LD_VAR 0 3
73636: PPUSH
73637: CALL_OW 257
73641: PUSH
73642: LD_INT 3
73644: NONEQUAL
73645: IFFALSE 73686
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] diff j ) ;
73647: LD_ADDR_EXP 56
73651: PUSH
73652: LD_EXP 56
73656: PPUSH
73657: LD_VAR 0 2
73661: PPUSH
73662: LD_EXP 56
73666: PUSH
73667: LD_VAR 0 2
73671: ARRAY
73672: PUSH
73673: LD_VAR 0 3
73677: DIFF
73678: PPUSH
73679: CALL_OW 1
73683: ST_TO_ADDR
// continue ;
73684: GO 73629
// end ; if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
73686: LD_VAR 0 3
73690: PPUSH
73691: CALL_OW 311
73695: NOT
73696: PUSH
73697: LD_VAR 0 3
73701: PUSH
73702: LD_EXP 47
73706: PUSH
73707: LD_VAR 0 2
73711: ARRAY
73712: PUSH
73713: LD_INT 1
73715: ARRAY
73716: IN
73717: NOT
73718: AND
73719: PUSH
73720: LD_VAR 0 3
73724: PUSH
73725: LD_EXP 47
73729: PUSH
73730: LD_VAR 0 2
73734: ARRAY
73735: PUSH
73736: LD_INT 2
73738: ARRAY
73739: IN
73740: NOT
73741: AND
73742: IFFALSE 73794
// begin if IsInUnit ( j ) then
73744: LD_VAR 0 3
73748: PPUSH
73749: CALL_OW 310
73753: IFFALSE 73764
// ComExitBuilding ( j ) ;
73755: LD_VAR 0 3
73759: PPUSH
73760: CALL_OW 122
// if not HasTask ( j ) then
73764: LD_VAR 0 3
73768: PPUSH
73769: CALL_OW 314
73773: NOT
73774: IFFALSE 73794
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
73776: LD_VAR 0 3
73780: PPUSH
73781: LD_VAR 0 7
73785: PUSH
73786: LD_INT 1
73788: ARRAY
73789: PPUSH
73790: CALL_OW 189
// end ; end ;
73794: GO 73629
73796: POP
73797: POP
// end ;
73798: GO 73118
73800: POP
73801: POP
// end ;
73802: LD_VAR 0 1
73806: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
73807: LD_INT 0
73809: PPUSH
73810: PPUSH
73811: PPUSH
73812: PPUSH
73813: PPUSH
73814: PPUSH
73815: PPUSH
73816: PPUSH
73817: PPUSH
73818: PPUSH
73819: PPUSH
// if not mc_bases then
73820: LD_EXP 44
73824: NOT
73825: IFFALSE 73829
// exit ;
73827: GO 74631
// for i = 1 to mc_bases do
73829: LD_ADDR_VAR 0 2
73833: PUSH
73834: DOUBLE
73835: LD_INT 1
73837: DEC
73838: ST_TO_ADDR
73839: LD_EXP 44
73843: PUSH
73844: FOR_TO
73845: IFFALSE 74629
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
73847: LD_EXP 72
73851: PUSH
73852: LD_VAR 0 2
73856: ARRAY
73857: NOT
73858: PUSH
73859: LD_EXP 47
73863: PUSH
73864: LD_VAR 0 2
73868: ARRAY
73869: PUSH
73870: LD_INT 1
73872: ARRAY
73873: OR
73874: PUSH
73875: LD_EXP 47
73879: PUSH
73880: LD_VAR 0 2
73884: ARRAY
73885: PUSH
73886: LD_INT 2
73888: ARRAY
73889: OR
73890: PUSH
73891: LD_EXP 70
73895: PUSH
73896: LD_VAR 0 2
73900: ARRAY
73901: PPUSH
73902: LD_INT 1
73904: PPUSH
73905: CALL_OW 325
73909: NOT
73910: OR
73911: PUSH
73912: LD_EXP 67
73916: PUSH
73917: LD_VAR 0 2
73921: ARRAY
73922: OR
73923: IFFALSE 73927
// continue ;
73925: GO 73844
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
73927: LD_ADDR_VAR 0 8
73931: PUSH
73932: LD_EXP 44
73936: PUSH
73937: LD_VAR 0 2
73941: ARRAY
73942: PPUSH
73943: LD_INT 25
73945: PUSH
73946: LD_INT 4
73948: PUSH
73949: EMPTY
73950: LIST
73951: LIST
73952: PUSH
73953: LD_INT 50
73955: PUSH
73956: EMPTY
73957: LIST
73958: PUSH
73959: LD_INT 3
73961: PUSH
73962: LD_INT 60
73964: PUSH
73965: EMPTY
73966: LIST
73967: PUSH
73968: EMPTY
73969: LIST
73970: LIST
73971: PUSH
73972: EMPTY
73973: LIST
73974: LIST
73975: LIST
73976: PPUSH
73977: CALL_OW 72
73981: PUSH
73982: LD_EXP 48
73986: PUSH
73987: LD_VAR 0 2
73991: ARRAY
73992: DIFF
73993: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
73994: LD_ADDR_VAR 0 9
73998: PUSH
73999: LD_EXP 44
74003: PUSH
74004: LD_VAR 0 2
74008: ARRAY
74009: PPUSH
74010: LD_INT 2
74012: PUSH
74013: LD_INT 30
74015: PUSH
74016: LD_INT 0
74018: PUSH
74019: EMPTY
74020: LIST
74021: LIST
74022: PUSH
74023: LD_INT 30
74025: PUSH
74026: LD_INT 1
74028: PUSH
74029: EMPTY
74030: LIST
74031: LIST
74032: PUSH
74033: EMPTY
74034: LIST
74035: LIST
74036: LIST
74037: PPUSH
74038: CALL_OW 72
74042: ST_TO_ADDR
// if not tmp or not dep then
74043: LD_VAR 0 8
74047: NOT
74048: PUSH
74049: LD_VAR 0 9
74053: NOT
74054: OR
74055: IFFALSE 74059
// continue ;
74057: GO 73844
// side := GetSide ( tmp [ 1 ] ) ;
74059: LD_ADDR_VAR 0 11
74063: PUSH
74064: LD_VAR 0 8
74068: PUSH
74069: LD_INT 1
74071: ARRAY
74072: PPUSH
74073: CALL_OW 255
74077: ST_TO_ADDR
// dep := dep [ 1 ] ;
74078: LD_ADDR_VAR 0 9
74082: PUSH
74083: LD_VAR 0 9
74087: PUSH
74088: LD_INT 1
74090: ARRAY
74091: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
74092: LD_ADDR_VAR 0 7
74096: PUSH
74097: LD_EXP 72
74101: PUSH
74102: LD_VAR 0 2
74106: ARRAY
74107: PPUSH
74108: LD_INT 22
74110: PUSH
74111: LD_INT 0
74113: PUSH
74114: EMPTY
74115: LIST
74116: LIST
74117: PUSH
74118: LD_INT 25
74120: PUSH
74121: LD_INT 12
74123: PUSH
74124: EMPTY
74125: LIST
74126: LIST
74127: PUSH
74128: EMPTY
74129: LIST
74130: LIST
74131: PPUSH
74132: CALL_OW 70
74136: PUSH
74137: LD_INT 22
74139: PUSH
74140: LD_INT 0
74142: PUSH
74143: EMPTY
74144: LIST
74145: LIST
74146: PUSH
74147: LD_INT 25
74149: PUSH
74150: LD_INT 12
74152: PUSH
74153: EMPTY
74154: LIST
74155: LIST
74156: PUSH
74157: LD_INT 91
74159: PUSH
74160: LD_VAR 0 9
74164: PUSH
74165: LD_INT 20
74167: PUSH
74168: EMPTY
74169: LIST
74170: LIST
74171: LIST
74172: PUSH
74173: EMPTY
74174: LIST
74175: LIST
74176: LIST
74177: PPUSH
74178: CALL_OW 69
74182: UNION
74183: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
74184: LD_ADDR_VAR 0 10
74188: PUSH
74189: LD_EXP 72
74193: PUSH
74194: LD_VAR 0 2
74198: ARRAY
74199: PPUSH
74200: LD_INT 81
74202: PUSH
74203: LD_VAR 0 11
74207: PUSH
74208: EMPTY
74209: LIST
74210: LIST
74211: PPUSH
74212: CALL_OW 70
74216: ST_TO_ADDR
// if not apes or danger_at_area then
74217: LD_VAR 0 7
74221: NOT
74222: PUSH
74223: LD_VAR 0 10
74227: OR
74228: IFFALSE 74278
// begin if mc_taming [ i ] then
74230: LD_EXP 75
74234: PUSH
74235: LD_VAR 0 2
74239: ARRAY
74240: IFFALSE 74276
// begin MC_Reset ( i , 121 ) ;
74242: LD_VAR 0 2
74246: PPUSH
74247: LD_INT 121
74249: PPUSH
74250: CALL 59713 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
74254: LD_ADDR_EXP 75
74258: PUSH
74259: LD_EXP 75
74263: PPUSH
74264: LD_VAR 0 2
74268: PPUSH
74269: EMPTY
74270: PPUSH
74271: CALL_OW 1
74275: ST_TO_ADDR
// end ; continue ;
74276: GO 73844
// end ; for j in tmp do
74278: LD_ADDR_VAR 0 3
74282: PUSH
74283: LD_VAR 0 8
74287: PUSH
74288: FOR_IN
74289: IFFALSE 74625
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
74291: LD_VAR 0 3
74295: PUSH
74296: LD_EXP 75
74300: PUSH
74301: LD_VAR 0 2
74305: ARRAY
74306: IN
74307: NOT
74308: PUSH
74309: LD_EXP 75
74313: PUSH
74314: LD_VAR 0 2
74318: ARRAY
74319: PUSH
74320: LD_INT 3
74322: LESS
74323: AND
74324: IFFALSE 74382
// begin SetTag ( j , 121 ) ;
74326: LD_VAR 0 3
74330: PPUSH
74331: LD_INT 121
74333: PPUSH
74334: CALL_OW 109
// mc_taming := ReplaceIn ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
74338: LD_ADDR_EXP 75
74342: PUSH
74343: LD_EXP 75
74347: PPUSH
74348: LD_VAR 0 2
74352: PUSH
74353: LD_EXP 75
74357: PUSH
74358: LD_VAR 0 2
74362: ARRAY
74363: PUSH
74364: LD_INT 1
74366: PLUS
74367: PUSH
74368: EMPTY
74369: LIST
74370: LIST
74371: PPUSH
74372: LD_VAR 0 3
74376: PPUSH
74377: CALL 24301 0 3
74381: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
74382: LD_VAR 0 3
74386: PUSH
74387: LD_EXP 75
74391: PUSH
74392: LD_VAR 0 2
74396: ARRAY
74397: IN
74398: IFFALSE 74623
// begin if GetClass ( j ) <> 4 then
74400: LD_VAR 0 3
74404: PPUSH
74405: CALL_OW 257
74409: PUSH
74410: LD_INT 4
74412: NONEQUAL
74413: IFFALSE 74466
// begin mc_taming := Replace ( mc_taming , i , mc_taming [ i ] diff j ) ;
74415: LD_ADDR_EXP 75
74419: PUSH
74420: LD_EXP 75
74424: PPUSH
74425: LD_VAR 0 2
74429: PPUSH
74430: LD_EXP 75
74434: PUSH
74435: LD_VAR 0 2
74439: ARRAY
74440: PUSH
74441: LD_VAR 0 3
74445: DIFF
74446: PPUSH
74447: CALL_OW 1
74451: ST_TO_ADDR
// SetTag ( j , 0 ) ;
74452: LD_VAR 0 3
74456: PPUSH
74457: LD_INT 0
74459: PPUSH
74460: CALL_OW 109
// continue ;
74464: GO 74288
// end ; if IsInUnit ( j ) then
74466: LD_VAR 0 3
74470: PPUSH
74471: CALL_OW 310
74475: IFFALSE 74486
// ComExitBuilding ( j ) ;
74477: LD_VAR 0 3
74481: PPUSH
74482: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
74486: LD_ADDR_VAR 0 6
74490: PUSH
74491: LD_VAR 0 7
74495: PPUSH
74496: LD_VAR 0 3
74500: PPUSH
74501: CALL_OW 74
74505: ST_TO_ADDR
// if not ape then
74506: LD_VAR 0 6
74510: NOT
74511: IFFALSE 74515
// break ;
74513: GO 74625
// x := GetX ( ape ) ;
74515: LD_ADDR_VAR 0 4
74519: PUSH
74520: LD_VAR 0 6
74524: PPUSH
74525: CALL_OW 250
74529: ST_TO_ADDR
// y := GetY ( ape ) ;
74530: LD_ADDR_VAR 0 5
74534: PUSH
74535: LD_VAR 0 6
74539: PPUSH
74540: CALL_OW 251
74544: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
74545: LD_VAR 0 4
74549: PPUSH
74550: LD_VAR 0 5
74554: PPUSH
74555: CALL_OW 488
74559: NOT
74560: PUSH
74561: LD_VAR 0 11
74565: PPUSH
74566: LD_VAR 0 4
74570: PPUSH
74571: LD_VAR 0 5
74575: PPUSH
74576: LD_INT 20
74578: PPUSH
74579: CALL 25197 0 4
74583: PUSH
74584: LD_INT 4
74586: ARRAY
74587: OR
74588: IFFALSE 74592
// break ;
74590: GO 74625
// if not HasTask ( j ) then
74592: LD_VAR 0 3
74596: PPUSH
74597: CALL_OW 314
74601: NOT
74602: IFFALSE 74623
// ComTameXY ( j , x , y ) ;
74604: LD_VAR 0 3
74608: PPUSH
74609: LD_VAR 0 4
74613: PPUSH
74614: LD_VAR 0 5
74618: PPUSH
74619: CALL_OW 131
// end ; end ;
74623: GO 74288
74625: POP
74626: POP
// end ;
74627: GO 73844
74629: POP
74630: POP
// end ;
74631: LD_VAR 0 1
74635: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
74636: LD_INT 0
74638: PPUSH
74639: PPUSH
74640: PPUSH
74641: PPUSH
74642: PPUSH
74643: PPUSH
74644: PPUSH
74645: PPUSH
// if not mc_bases then
74646: LD_EXP 44
74650: NOT
74651: IFFALSE 74655
// exit ;
74653: GO 75281
// for i = 1 to mc_bases do
74655: LD_ADDR_VAR 0 2
74659: PUSH
74660: DOUBLE
74661: LD_INT 1
74663: DEC
74664: ST_TO_ADDR
74665: LD_EXP 44
74669: PUSH
74670: FOR_TO
74671: IFFALSE 75279
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
74673: LD_EXP 73
74677: PUSH
74678: LD_VAR 0 2
74682: ARRAY
74683: NOT
74684: PUSH
74685: LD_EXP 73
74689: PUSH
74690: LD_VAR 0 2
74694: ARRAY
74695: PPUSH
74696: LD_INT 25
74698: PUSH
74699: LD_INT 12
74701: PUSH
74702: EMPTY
74703: LIST
74704: LIST
74705: PPUSH
74706: CALL_OW 72
74710: NOT
74711: OR
74712: IFFALSE 74716
// continue ;
74714: GO 74670
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
74716: LD_ADDR_VAR 0 5
74720: PUSH
74721: LD_EXP 73
74725: PUSH
74726: LD_VAR 0 2
74730: ARRAY
74731: PUSH
74732: LD_INT 1
74734: ARRAY
74735: PPUSH
74736: CALL_OW 255
74740: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
74741: LD_VAR 0 5
74745: PPUSH
74746: LD_INT 2
74748: PPUSH
74749: CALL_OW 325
74753: IFFALSE 75006
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
74755: LD_ADDR_VAR 0 4
74759: PUSH
74760: LD_EXP 73
74764: PUSH
74765: LD_VAR 0 2
74769: ARRAY
74770: PPUSH
74771: LD_INT 25
74773: PUSH
74774: LD_INT 16
74776: PUSH
74777: EMPTY
74778: LIST
74779: LIST
74780: PPUSH
74781: CALL_OW 72
74785: ST_TO_ADDR
// if tmp < 6 then
74786: LD_VAR 0 4
74790: PUSH
74791: LD_INT 6
74793: LESS
74794: IFFALSE 75006
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
74796: LD_ADDR_VAR 0 6
74800: PUSH
74801: LD_EXP 44
74805: PUSH
74806: LD_VAR 0 2
74810: ARRAY
74811: PPUSH
74812: LD_INT 2
74814: PUSH
74815: LD_INT 30
74817: PUSH
74818: LD_INT 0
74820: PUSH
74821: EMPTY
74822: LIST
74823: LIST
74824: PUSH
74825: LD_INT 30
74827: PUSH
74828: LD_INT 1
74830: PUSH
74831: EMPTY
74832: LIST
74833: LIST
74834: PUSH
74835: EMPTY
74836: LIST
74837: LIST
74838: LIST
74839: PPUSH
74840: CALL_OW 72
74844: ST_TO_ADDR
// if depot then
74845: LD_VAR 0 6
74849: IFFALSE 75006
// begin selected := 0 ;
74851: LD_ADDR_VAR 0 7
74855: PUSH
74856: LD_INT 0
74858: ST_TO_ADDR
// for j in depot do
74859: LD_ADDR_VAR 0 3
74863: PUSH
74864: LD_VAR 0 6
74868: PUSH
74869: FOR_IN
74870: IFFALSE 74901
// begin if UnitsInside ( j ) < 6 then
74872: LD_VAR 0 3
74876: PPUSH
74877: CALL_OW 313
74881: PUSH
74882: LD_INT 6
74884: LESS
74885: IFFALSE 74899
// begin selected := j ;
74887: LD_ADDR_VAR 0 7
74891: PUSH
74892: LD_VAR 0 3
74896: ST_TO_ADDR
// break ;
74897: GO 74901
// end ; end ;
74899: GO 74869
74901: POP
74902: POP
// if selected then
74903: LD_VAR 0 7
74907: IFFALSE 75006
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
74909: LD_ADDR_VAR 0 3
74913: PUSH
74914: LD_EXP 73
74918: PUSH
74919: LD_VAR 0 2
74923: ARRAY
74924: PPUSH
74925: LD_INT 25
74927: PUSH
74928: LD_INT 12
74930: PUSH
74931: EMPTY
74932: LIST
74933: LIST
74934: PPUSH
74935: CALL_OW 72
74939: PUSH
74940: FOR_IN
74941: IFFALSE 75004
// if not HasTask ( j ) then
74943: LD_VAR 0 3
74947: PPUSH
74948: CALL_OW 314
74952: NOT
74953: IFFALSE 75002
// begin if not IsInUnit ( j ) then
74955: LD_VAR 0 3
74959: PPUSH
74960: CALL_OW 310
74964: NOT
74965: IFFALSE 74981
// ComEnterUnit ( j , selected ) ;
74967: LD_VAR 0 3
74971: PPUSH
74972: LD_VAR 0 7
74976: PPUSH
74977: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
74981: LD_VAR 0 3
74985: PPUSH
74986: LD_INT 16
74988: PPUSH
74989: CALL_OW 183
// AddComExitBuilding ( j ) ;
74993: LD_VAR 0 3
74997: PPUSH
74998: CALL_OW 182
// end ;
75002: GO 74940
75004: POP
75005: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
75006: LD_VAR 0 5
75010: PPUSH
75011: LD_INT 11
75013: PPUSH
75014: CALL_OW 325
75018: IFFALSE 75277
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
75020: LD_ADDR_VAR 0 4
75024: PUSH
75025: LD_EXP 73
75029: PUSH
75030: LD_VAR 0 2
75034: ARRAY
75035: PPUSH
75036: LD_INT 25
75038: PUSH
75039: LD_INT 16
75041: PUSH
75042: EMPTY
75043: LIST
75044: LIST
75045: PPUSH
75046: CALL_OW 72
75050: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
75051: LD_VAR 0 4
75055: PUSH
75056: LD_INT 6
75058: GREATEREQUAL
75059: PUSH
75060: LD_VAR 0 5
75064: PPUSH
75065: LD_INT 2
75067: PPUSH
75068: CALL_OW 325
75072: NOT
75073: OR
75074: IFFALSE 75277
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
75076: LD_ADDR_VAR 0 8
75080: PUSH
75081: LD_EXP 44
75085: PUSH
75086: LD_VAR 0 2
75090: ARRAY
75091: PPUSH
75092: LD_INT 2
75094: PUSH
75095: LD_INT 30
75097: PUSH
75098: LD_INT 4
75100: PUSH
75101: EMPTY
75102: LIST
75103: LIST
75104: PUSH
75105: LD_INT 30
75107: PUSH
75108: LD_INT 5
75110: PUSH
75111: EMPTY
75112: LIST
75113: LIST
75114: PUSH
75115: EMPTY
75116: LIST
75117: LIST
75118: LIST
75119: PPUSH
75120: CALL_OW 72
75124: ST_TO_ADDR
// if barracks then
75125: LD_VAR 0 8
75129: IFFALSE 75277
// begin selected := 0 ;
75131: LD_ADDR_VAR 0 7
75135: PUSH
75136: LD_INT 0
75138: ST_TO_ADDR
// for j in barracks do
75139: LD_ADDR_VAR 0 3
75143: PUSH
75144: LD_VAR 0 8
75148: PUSH
75149: FOR_IN
75150: IFFALSE 75181
// begin if UnitsInside ( j ) < 6 then
75152: LD_VAR 0 3
75156: PPUSH
75157: CALL_OW 313
75161: PUSH
75162: LD_INT 6
75164: LESS
75165: IFFALSE 75179
// begin selected := j ;
75167: LD_ADDR_VAR 0 7
75171: PUSH
75172: LD_VAR 0 3
75176: ST_TO_ADDR
// break ;
75177: GO 75181
// end ; end ;
75179: GO 75149
75181: POP
75182: POP
// if selected then
75183: LD_VAR 0 7
75187: IFFALSE 75277
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
75189: LD_ADDR_VAR 0 3
75193: PUSH
75194: LD_EXP 73
75198: PUSH
75199: LD_VAR 0 2
75203: ARRAY
75204: PPUSH
75205: LD_INT 25
75207: PUSH
75208: LD_INT 12
75210: PUSH
75211: EMPTY
75212: LIST
75213: LIST
75214: PPUSH
75215: CALL_OW 72
75219: PUSH
75220: FOR_IN
75221: IFFALSE 75275
// if not IsInUnit ( j ) and not HasTask ( j ) then
75223: LD_VAR 0 3
75227: PPUSH
75228: CALL_OW 310
75232: NOT
75233: PUSH
75234: LD_VAR 0 3
75238: PPUSH
75239: CALL_OW 314
75243: NOT
75244: AND
75245: IFFALSE 75273
// begin ComEnterUnit ( j , selected ) ;
75247: LD_VAR 0 3
75251: PPUSH
75252: LD_VAR 0 7
75256: PPUSH
75257: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
75261: LD_VAR 0 3
75265: PPUSH
75266: LD_INT 15
75268: PPUSH
75269: CALL_OW 183
// end ;
75273: GO 75220
75275: POP
75276: POP
// end ; end ; end ; end ; end ;
75277: GO 74670
75279: POP
75280: POP
// end ;
75281: LD_VAR 0 1
75285: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
75286: LD_INT 0
75288: PPUSH
75289: PPUSH
75290: PPUSH
75291: PPUSH
// if not mc_bases then
75292: LD_EXP 44
75296: NOT
75297: IFFALSE 75301
// exit ;
75299: GO 75479
// for i = 1 to mc_bases do
75301: LD_ADDR_VAR 0 2
75305: PUSH
75306: DOUBLE
75307: LD_INT 1
75309: DEC
75310: ST_TO_ADDR
75311: LD_EXP 44
75315: PUSH
75316: FOR_TO
75317: IFFALSE 75477
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
75319: LD_ADDR_VAR 0 4
75323: PUSH
75324: LD_EXP 44
75328: PUSH
75329: LD_VAR 0 2
75333: ARRAY
75334: PPUSH
75335: LD_INT 25
75337: PUSH
75338: LD_INT 9
75340: PUSH
75341: EMPTY
75342: LIST
75343: LIST
75344: PPUSH
75345: CALL_OW 72
75349: ST_TO_ADDR
// if not tmp then
75350: LD_VAR 0 4
75354: NOT
75355: IFFALSE 75359
// continue ;
75357: GO 75316
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
75359: LD_EXP 70
75363: PUSH
75364: LD_VAR 0 2
75368: ARRAY
75369: PPUSH
75370: LD_INT 29
75372: PPUSH
75373: CALL_OW 325
75377: NOT
75378: PUSH
75379: LD_EXP 70
75383: PUSH
75384: LD_VAR 0 2
75388: ARRAY
75389: PPUSH
75390: LD_INT 28
75392: PPUSH
75393: CALL_OW 325
75397: NOT
75398: AND
75399: IFFALSE 75403
// continue ;
75401: GO 75316
// for j in tmp do
75403: LD_ADDR_VAR 0 3
75407: PUSH
75408: LD_VAR 0 4
75412: PUSH
75413: FOR_IN
75414: IFFALSE 75473
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
75416: LD_VAR 0 3
75420: PUSH
75421: LD_EXP 47
75425: PUSH
75426: LD_VAR 0 2
75430: ARRAY
75431: PUSH
75432: LD_INT 1
75434: ARRAY
75435: IN
75436: NOT
75437: PUSH
75438: LD_VAR 0 3
75442: PUSH
75443: LD_EXP 47
75447: PUSH
75448: LD_VAR 0 2
75452: ARRAY
75453: PUSH
75454: LD_INT 2
75456: ARRAY
75457: IN
75458: NOT
75459: AND
75460: IFFALSE 75471
// ComSpaceTimeShoot ( j ) ;
75462: LD_VAR 0 3
75466: PPUSH
75467: CALL 20298 0 1
75471: GO 75413
75473: POP
75474: POP
// end ;
75475: GO 75316
75477: POP
75478: POP
// end ;
75479: LD_VAR 0 1
75483: RET
// export function MC_TeleportExit ( ) ; var i , j , x , y , save_point , tmp , teleports , sci ; begin
75484: LD_INT 0
75486: PPUSH
75487: PPUSH
75488: PPUSH
75489: PPUSH
75490: PPUSH
75491: PPUSH
75492: PPUSH
75493: PPUSH
75494: PPUSH
// if not mc_bases then
75495: LD_EXP 44
75499: NOT
75500: IFFALSE 75504
// exit ;
75502: GO 76126
// for i = 1 to mc_bases do
75504: LD_ADDR_VAR 0 2
75508: PUSH
75509: DOUBLE
75510: LD_INT 1
75512: DEC
75513: ST_TO_ADDR
75514: LD_EXP 44
75518: PUSH
75519: FOR_TO
75520: IFFALSE 76124
// begin if not mc_teleport_exit [ i ] or GetTech ( tech_targTeleport , mc_sides [ i ] ) <> state_researched then
75522: LD_EXP 79
75526: PUSH
75527: LD_VAR 0 2
75531: ARRAY
75532: NOT
75533: PUSH
75534: LD_INT 38
75536: PPUSH
75537: LD_EXP 70
75541: PUSH
75542: LD_VAR 0 2
75546: ARRAY
75547: PPUSH
75548: CALL_OW 321
75552: PUSH
75553: LD_INT 2
75555: NONEQUAL
75556: OR
75557: IFFALSE 75561
// continue ;
75559: GO 75519
// teleports := UnitFilter ( mc_bases [ i ] , [ f_btype , b_teleport ] ) ;
75561: LD_ADDR_VAR 0 8
75565: PUSH
75566: LD_EXP 44
75570: PUSH
75571: LD_VAR 0 2
75575: ARRAY
75576: PPUSH
75577: LD_INT 30
75579: PUSH
75580: LD_INT 34
75582: PUSH
75583: EMPTY
75584: LIST
75585: LIST
75586: PPUSH
75587: CALL_OW 72
75591: ST_TO_ADDR
// sci := FilterByTag ( UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) , 0 ) ;
75592: LD_ADDR_VAR 0 9
75596: PUSH
75597: LD_EXP 44
75601: PUSH
75602: LD_VAR 0 2
75606: ARRAY
75607: PPUSH
75608: LD_INT 25
75610: PUSH
75611: LD_INT 4
75613: PUSH
75614: EMPTY
75615: LIST
75616: LIST
75617: PPUSH
75618: CALL_OW 72
75622: PPUSH
75623: LD_INT 0
75625: PPUSH
75626: CALL 52862 0 2
75630: ST_TO_ADDR
// if not sci or not teleports or FilterByTag ( mc_bases [ i ] , 124 ) then
75631: LD_VAR 0 9
75635: NOT
75636: PUSH
75637: LD_VAR 0 8
75641: NOT
75642: OR
75643: PUSH
75644: LD_EXP 44
75648: PUSH
75649: LD_VAR 0 2
75653: ARRAY
75654: PPUSH
75655: LD_INT 124
75657: PPUSH
75658: CALL 52862 0 2
75662: OR
75663: IFFALSE 75667
// continue ;
75665: GO 75519
// if mc_teleport_exit_set [ i ] < mc_teleport_exit [ i ] and mc_teleport_exit_set [ i ] < teleports then
75667: LD_EXP 80
75671: PUSH
75672: LD_VAR 0 2
75676: ARRAY
75677: PUSH
75678: LD_EXP 79
75682: PUSH
75683: LD_VAR 0 2
75687: ARRAY
75688: LESS
75689: PUSH
75690: LD_EXP 80
75694: PUSH
75695: LD_VAR 0 2
75699: ARRAY
75700: PUSH
75701: LD_VAR 0 8
75705: LESS
75706: AND
75707: IFFALSE 76122
// begin tmp := sci [ 1 ] ;
75709: LD_ADDR_VAR 0 7
75713: PUSH
75714: LD_VAR 0 9
75718: PUSH
75719: LD_INT 1
75721: ARRAY
75722: ST_TO_ADDR
// SetTag ( tmp , 124 ) ;
75723: LD_VAR 0 7
75727: PPUSH
75728: LD_INT 124
75730: PPUSH
75731: CALL_OW 109
// for j = mc_teleport_exit [ i ] downto mc_teleport_exit [ i ] do
75735: LD_ADDR_VAR 0 3
75739: PUSH
75740: DOUBLE
75741: LD_EXP 79
75745: PUSH
75746: LD_VAR 0 2
75750: ARRAY
75751: INC
75752: ST_TO_ADDR
75753: LD_EXP 79
75757: PUSH
75758: LD_VAR 0 2
75762: ARRAY
75763: PUSH
75764: FOR_DOWNTO
75765: IFFALSE 76108
// begin if IsInUnit ( tmp ) then
75767: LD_VAR 0 7
75771: PPUSH
75772: CALL_OW 310
75776: IFFALSE 75787
// ComExitBuilding ( tmp ) ;
75778: LD_VAR 0 7
75782: PPUSH
75783: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
75787: LD_INT 35
75789: PPUSH
75790: CALL_OW 67
// until not IsInUnit ( tmp ) and not HasTask ( tmp ) ;
75794: LD_VAR 0 7
75798: PPUSH
75799: CALL_OW 310
75803: NOT
75804: PUSH
75805: LD_VAR 0 7
75809: PPUSH
75810: CALL_OW 314
75814: NOT
75815: AND
75816: IFFALSE 75787
// save_point := [ GetX ( tmp ) , GetY ( tmp ) ] ;
75818: LD_ADDR_VAR 0 6
75822: PUSH
75823: LD_VAR 0 7
75827: PPUSH
75828: CALL_OW 250
75832: PUSH
75833: LD_VAR 0 7
75837: PPUSH
75838: CALL_OW 251
75842: PUSH
75843: EMPTY
75844: LIST
75845: LIST
75846: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
75847: LD_INT 35
75849: PPUSH
75850: CALL_OW 67
// x := mc_teleport_exit [ i ] [ j ] [ 1 ] ;
75854: LD_ADDR_VAR 0 4
75858: PUSH
75859: LD_EXP 79
75863: PUSH
75864: LD_VAR 0 2
75868: ARRAY
75869: PUSH
75870: LD_VAR 0 3
75874: ARRAY
75875: PUSH
75876: LD_INT 1
75878: ARRAY
75879: ST_TO_ADDR
// y := mc_teleport_exit [ i ] [ j ] [ 2 ] ;
75880: LD_ADDR_VAR 0 5
75884: PUSH
75885: LD_EXP 79
75889: PUSH
75890: LD_VAR 0 2
75894: ARRAY
75895: PUSH
75896: LD_VAR 0 3
75900: ARRAY
75901: PUSH
75902: LD_INT 2
75904: ARRAY
75905: ST_TO_ADDR
// if DangerAtRange ( tmp , 10 ) [ 4 ] then
75906: LD_VAR 0 7
75910: PPUSH
75911: LD_INT 10
75913: PPUSH
75914: CALL 26894 0 2
75918: PUSH
75919: LD_INT 4
75921: ARRAY
75922: IFFALSE 75960
// begin ComMoveXY ( tmp , save_point [ 1 ] , save_point [ 2 ] ) ;
75924: LD_VAR 0 7
75928: PPUSH
75929: LD_VAR 0 6
75933: PUSH
75934: LD_INT 1
75936: ARRAY
75937: PPUSH
75938: LD_VAR 0 6
75942: PUSH
75943: LD_INT 2
75945: ARRAY
75946: PPUSH
75947: CALL_OW 111
// wait ( 0 0$10 ) ;
75951: LD_INT 350
75953: PPUSH
75954: CALL_OW 67
// end else
75958: GO 75986
// begin ComMoveXY ( tmp , x , y ) ;
75960: LD_VAR 0 7
75964: PPUSH
75965: LD_VAR 0 4
75969: PPUSH
75970: LD_VAR 0 5
75974: PPUSH
75975: CALL_OW 111
// wait ( 0 0$3 ) ;
75979: LD_INT 105
75981: PPUSH
75982: CALL_OW 67
// end ; until IsAt ( tmp , x , y ) ;
75986: LD_VAR 0 7
75990: PPUSH
75991: LD_VAR 0 4
75995: PPUSH
75996: LD_VAR 0 5
76000: PPUSH
76001: CALL_OW 307
76005: IFFALSE 75847
// ComTeleportExit ( tmp , x , y , teleports [ j ] ) ;
76007: LD_VAR 0 7
76011: PPUSH
76012: LD_VAR 0 4
76016: PPUSH
76017: LD_VAR 0 5
76021: PPUSH
76022: LD_VAR 0 8
76026: PUSH
76027: LD_VAR 0 3
76031: ARRAY
76032: PPUSH
76033: CALL_OW 156
// repeat wait ( 0 0$1 ) ;
76037: LD_INT 35
76039: PPUSH
76040: CALL_OW 67
// until not HasTask ( tmp ) ;
76044: LD_VAR 0 7
76048: PPUSH
76049: CALL_OW 314
76053: NOT
76054: IFFALSE 76037
// mc_teleport_exit_set := ReplaceIn ( mc_teleport_exit_set , [ i , mc_teleport_exit_set [ i ] + 1 ] , teleports [ j ] ) ;
76056: LD_ADDR_EXP 80
76060: PUSH
76061: LD_EXP 80
76065: PPUSH
76066: LD_VAR 0 2
76070: PUSH
76071: LD_EXP 80
76075: PUSH
76076: LD_VAR 0 2
76080: ARRAY
76081: PUSH
76082: LD_INT 1
76084: PLUS
76085: PUSH
76086: EMPTY
76087: LIST
76088: LIST
76089: PPUSH
76090: LD_VAR 0 8
76094: PUSH
76095: LD_VAR 0 3
76099: ARRAY
76100: PPUSH
76101: CALL 24301 0 3
76105: ST_TO_ADDR
// end ;
76106: GO 75764
76108: POP
76109: POP
// MC_Reset ( i , 124 ) ;
76110: LD_VAR 0 2
76114: PPUSH
76115: LD_INT 124
76117: PPUSH
76118: CALL 59713 0 2
// end ; end ;
76122: GO 75519
76124: POP
76125: POP
// end ;
76126: LD_VAR 0 1
76130: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
76131: LD_INT 0
76133: PPUSH
76134: PPUSH
76135: PPUSH
// if not mc_bases then
76136: LD_EXP 44
76140: NOT
76141: IFFALSE 76145
// exit ;
76143: GO 76751
// for i = 1 to mc_bases do
76145: LD_ADDR_VAR 0 2
76149: PUSH
76150: DOUBLE
76151: LD_INT 1
76153: DEC
76154: ST_TO_ADDR
76155: LD_EXP 44
76159: PUSH
76160: FOR_TO
76161: IFFALSE 76749
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
76163: LD_ADDR_VAR 0 3
76167: PUSH
76168: LD_EXP 44
76172: PUSH
76173: LD_VAR 0 2
76177: ARRAY
76178: PPUSH
76179: LD_INT 25
76181: PUSH
76182: LD_INT 4
76184: PUSH
76185: EMPTY
76186: LIST
76187: LIST
76188: PPUSH
76189: CALL_OW 72
76193: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
76194: LD_VAR 0 3
76198: NOT
76199: PUSH
76200: LD_EXP 81
76204: PUSH
76205: LD_VAR 0 2
76209: ARRAY
76210: NOT
76211: OR
76212: PUSH
76213: LD_EXP 44
76217: PUSH
76218: LD_VAR 0 2
76222: ARRAY
76223: PPUSH
76224: LD_INT 2
76226: PUSH
76227: LD_INT 30
76229: PUSH
76230: LD_INT 0
76232: PUSH
76233: EMPTY
76234: LIST
76235: LIST
76236: PUSH
76237: LD_INT 30
76239: PUSH
76240: LD_INT 1
76242: PUSH
76243: EMPTY
76244: LIST
76245: LIST
76246: PUSH
76247: EMPTY
76248: LIST
76249: LIST
76250: LIST
76251: PPUSH
76252: CALL_OW 72
76256: NOT
76257: OR
76258: IFFALSE 76308
// begin if mc_deposits_finder [ i ] then
76260: LD_EXP 82
76264: PUSH
76265: LD_VAR 0 2
76269: ARRAY
76270: IFFALSE 76306
// begin MC_Reset ( i , 125 ) ;
76272: LD_VAR 0 2
76276: PPUSH
76277: LD_INT 125
76279: PPUSH
76280: CALL 59713 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
76284: LD_ADDR_EXP 82
76288: PUSH
76289: LD_EXP 82
76293: PPUSH
76294: LD_VAR 0 2
76298: PPUSH
76299: EMPTY
76300: PPUSH
76301: CALL_OW 1
76305: ST_TO_ADDR
// end ; continue ;
76306: GO 76160
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
76308: LD_EXP 81
76312: PUSH
76313: LD_VAR 0 2
76317: ARRAY
76318: PUSH
76319: LD_INT 1
76321: ARRAY
76322: PUSH
76323: LD_INT 3
76325: ARRAY
76326: PUSH
76327: LD_INT 1
76329: EQUAL
76330: PUSH
76331: LD_INT 20
76333: PPUSH
76334: LD_EXP 70
76338: PUSH
76339: LD_VAR 0 2
76343: ARRAY
76344: PPUSH
76345: CALL_OW 321
76349: PUSH
76350: LD_INT 2
76352: NONEQUAL
76353: AND
76354: IFFALSE 76404
// begin if mc_deposits_finder [ i ] then
76356: LD_EXP 82
76360: PUSH
76361: LD_VAR 0 2
76365: ARRAY
76366: IFFALSE 76402
// begin MC_Reset ( i , 125 ) ;
76368: LD_VAR 0 2
76372: PPUSH
76373: LD_INT 125
76375: PPUSH
76376: CALL 59713 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
76380: LD_ADDR_EXP 82
76384: PUSH
76385: LD_EXP 82
76389: PPUSH
76390: LD_VAR 0 2
76394: PPUSH
76395: EMPTY
76396: PPUSH
76397: CALL_OW 1
76401: ST_TO_ADDR
// end ; continue ;
76402: GO 76160
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
76404: LD_EXP 81
76408: PUSH
76409: LD_VAR 0 2
76413: ARRAY
76414: PUSH
76415: LD_INT 1
76417: ARRAY
76418: PUSH
76419: LD_INT 1
76421: ARRAY
76422: PPUSH
76423: LD_EXP 81
76427: PUSH
76428: LD_VAR 0 2
76432: ARRAY
76433: PUSH
76434: LD_INT 1
76436: ARRAY
76437: PUSH
76438: LD_INT 2
76440: ARRAY
76441: PPUSH
76442: LD_EXP 70
76446: PUSH
76447: LD_VAR 0 2
76451: ARRAY
76452: PPUSH
76453: CALL_OW 440
76457: IFFALSE 76500
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
76459: LD_ADDR_EXP 81
76463: PUSH
76464: LD_EXP 81
76468: PPUSH
76469: LD_VAR 0 2
76473: PPUSH
76474: LD_EXP 81
76478: PUSH
76479: LD_VAR 0 2
76483: ARRAY
76484: PPUSH
76485: LD_INT 1
76487: PPUSH
76488: CALL_OW 3
76492: PPUSH
76493: CALL_OW 1
76497: ST_TO_ADDR
76498: GO 76747
// begin if not mc_deposits_finder [ i ] then
76500: LD_EXP 82
76504: PUSH
76505: LD_VAR 0 2
76509: ARRAY
76510: NOT
76511: IFFALSE 76563
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
76513: LD_ADDR_EXP 82
76517: PUSH
76518: LD_EXP 82
76522: PPUSH
76523: LD_VAR 0 2
76527: PPUSH
76528: LD_VAR 0 3
76532: PUSH
76533: LD_INT 1
76535: ARRAY
76536: PUSH
76537: EMPTY
76538: LIST
76539: PPUSH
76540: CALL_OW 1
76544: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
76545: LD_VAR 0 3
76549: PUSH
76550: LD_INT 1
76552: ARRAY
76553: PPUSH
76554: LD_INT 125
76556: PPUSH
76557: CALL_OW 109
// end else
76561: GO 76747
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
76563: LD_EXP 82
76567: PUSH
76568: LD_VAR 0 2
76572: ARRAY
76573: PUSH
76574: LD_INT 1
76576: ARRAY
76577: PPUSH
76578: CALL_OW 310
76582: IFFALSE 76605
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
76584: LD_EXP 82
76588: PUSH
76589: LD_VAR 0 2
76593: ARRAY
76594: PUSH
76595: LD_INT 1
76597: ARRAY
76598: PPUSH
76599: CALL_OW 122
76603: GO 76747
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
76605: LD_EXP 82
76609: PUSH
76610: LD_VAR 0 2
76614: ARRAY
76615: PUSH
76616: LD_INT 1
76618: ARRAY
76619: PPUSH
76620: CALL_OW 314
76624: NOT
76625: PUSH
76626: LD_EXP 82
76630: PUSH
76631: LD_VAR 0 2
76635: ARRAY
76636: PUSH
76637: LD_INT 1
76639: ARRAY
76640: PPUSH
76641: LD_EXP 81
76645: PUSH
76646: LD_VAR 0 2
76650: ARRAY
76651: PUSH
76652: LD_INT 1
76654: ARRAY
76655: PUSH
76656: LD_INT 1
76658: ARRAY
76659: PPUSH
76660: LD_EXP 81
76664: PUSH
76665: LD_VAR 0 2
76669: ARRAY
76670: PUSH
76671: LD_INT 1
76673: ARRAY
76674: PUSH
76675: LD_INT 2
76677: ARRAY
76678: PPUSH
76679: CALL_OW 297
76683: PUSH
76684: LD_INT 6
76686: GREATER
76687: AND
76688: IFFALSE 76747
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
76690: LD_EXP 82
76694: PUSH
76695: LD_VAR 0 2
76699: ARRAY
76700: PUSH
76701: LD_INT 1
76703: ARRAY
76704: PPUSH
76705: LD_EXP 81
76709: PUSH
76710: LD_VAR 0 2
76714: ARRAY
76715: PUSH
76716: LD_INT 1
76718: ARRAY
76719: PUSH
76720: LD_INT 1
76722: ARRAY
76723: PPUSH
76724: LD_EXP 81
76728: PUSH
76729: LD_VAR 0 2
76733: ARRAY
76734: PUSH
76735: LD_INT 1
76737: ARRAY
76738: PUSH
76739: LD_INT 2
76741: ARRAY
76742: PPUSH
76743: CALL_OW 111
// end ; end ; end ;
76747: GO 76160
76749: POP
76750: POP
// end ;
76751: LD_VAR 0 1
76755: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts , mcts , x ; begin
76756: LD_INT 0
76758: PPUSH
76759: PPUSH
76760: PPUSH
76761: PPUSH
76762: PPUSH
76763: PPUSH
76764: PPUSH
76765: PPUSH
76766: PPUSH
76767: PPUSH
76768: PPUSH
// if not mc_bases then
76769: LD_EXP 44
76773: NOT
76774: IFFALSE 76778
// exit ;
76776: GO 77718
// for i = 1 to mc_bases do
76778: LD_ADDR_VAR 0 2
76782: PUSH
76783: DOUBLE
76784: LD_INT 1
76786: DEC
76787: ST_TO_ADDR
76788: LD_EXP 44
76792: PUSH
76793: FOR_TO
76794: IFFALSE 77716
// begin if not mc_bases [ i ] or mc_scan [ i ] then
76796: LD_EXP 44
76800: PUSH
76801: LD_VAR 0 2
76805: ARRAY
76806: NOT
76807: PUSH
76808: LD_EXP 67
76812: PUSH
76813: LD_VAR 0 2
76817: ARRAY
76818: OR
76819: IFFALSE 76823
// continue ;
76821: GO 76793
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
76823: LD_ADDR_VAR 0 7
76827: PUSH
76828: LD_EXP 44
76832: PUSH
76833: LD_VAR 0 2
76837: ARRAY
76838: PUSH
76839: LD_INT 1
76841: ARRAY
76842: PPUSH
76843: CALL_OW 248
76847: ST_TO_ADDR
// if nation = 3 or not UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) then
76848: LD_VAR 0 7
76852: PUSH
76853: LD_INT 3
76855: EQUAL
76856: PUSH
76857: LD_EXP 63
76861: PUSH
76862: LD_VAR 0 2
76866: ARRAY
76867: PUSH
76868: LD_EXP 66
76872: PUSH
76873: LD_VAR 0 2
76877: ARRAY
76878: UNION
76879: PPUSH
76880: LD_INT 33
76882: PUSH
76883: LD_INT 2
76885: PUSH
76886: EMPTY
76887: LIST
76888: LIST
76889: PPUSH
76890: CALL_OW 72
76894: NOT
76895: OR
76896: IFFALSE 76900
// continue ;
76898: GO 76793
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
76900: LD_ADDR_VAR 0 9
76904: PUSH
76905: LD_EXP 44
76909: PUSH
76910: LD_VAR 0 2
76914: ARRAY
76915: PPUSH
76916: LD_INT 30
76918: PUSH
76919: LD_INT 36
76921: PUSH
76922: EMPTY
76923: LIST
76924: LIST
76925: PPUSH
76926: CALL_OW 72
76930: ST_TO_ADDR
// mcts := UnitFilter ( mc_vehicles [ i ] , [ f_weapon , ar_control_tower ] ) ;
76931: LD_ADDR_VAR 0 10
76935: PUSH
76936: LD_EXP 63
76940: PUSH
76941: LD_VAR 0 2
76945: ARRAY
76946: PPUSH
76947: LD_INT 34
76949: PUSH
76950: LD_INT 31
76952: PUSH
76953: EMPTY
76954: LIST
76955: LIST
76956: PPUSH
76957: CALL_OW 72
76961: ST_TO_ADDR
// if not cts and not mcts then
76962: LD_VAR 0 9
76966: NOT
76967: PUSH
76968: LD_VAR 0 10
76972: NOT
76973: AND
76974: IFFALSE 76978
// continue ;
76976: GO 76793
// x := cts ;
76978: LD_ADDR_VAR 0 11
76982: PUSH
76983: LD_VAR 0 9
76987: ST_TO_ADDR
// if not x then
76988: LD_VAR 0 11
76992: NOT
76993: IFFALSE 77005
// x := mcts ;
76995: LD_ADDR_VAR 0 11
76999: PUSH
77000: LD_VAR 0 10
77004: ST_TO_ADDR
// if not x then
77005: LD_VAR 0 11
77009: NOT
77010: IFFALSE 77014
// continue ;
77012: GO 76793
// if mc_remote_driver [ i ] then
77014: LD_EXP 84
77018: PUSH
77019: LD_VAR 0 2
77023: ARRAY
77024: IFFALSE 77411
// for j in mc_remote_driver [ i ] do
77026: LD_ADDR_VAR 0 3
77030: PUSH
77031: LD_EXP 84
77035: PUSH
77036: LD_VAR 0 2
77040: ARRAY
77041: PUSH
77042: FOR_IN
77043: IFFALSE 77409
// begin if GetClass ( j ) <> 3 then
77045: LD_VAR 0 3
77049: PPUSH
77050: CALL_OW 257
77054: PUSH
77055: LD_INT 3
77057: NONEQUAL
77058: IFFALSE 77111
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff j ) ;
77060: LD_ADDR_EXP 84
77064: PUSH
77065: LD_EXP 84
77069: PPUSH
77070: LD_VAR 0 2
77074: PPUSH
77075: LD_EXP 84
77079: PUSH
77080: LD_VAR 0 2
77084: ARRAY
77085: PUSH
77086: LD_VAR 0 3
77090: DIFF
77091: PPUSH
77092: CALL_OW 1
77096: ST_TO_ADDR
// SetTag ( j , 0 ) ;
77097: LD_VAR 0 3
77101: PPUSH
77102: LD_INT 0
77104: PPUSH
77105: CALL_OW 109
// continue ;
77109: GO 77042
// end ; if UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) and not IsDriver ( j ) then
77111: LD_EXP 63
77115: PUSH
77116: LD_VAR 0 2
77120: ARRAY
77121: PPUSH
77122: LD_INT 34
77124: PUSH
77125: LD_INT 31
77127: PUSH
77128: EMPTY
77129: LIST
77130: LIST
77131: PUSH
77132: LD_INT 58
77134: PUSH
77135: EMPTY
77136: LIST
77137: PUSH
77138: EMPTY
77139: LIST
77140: LIST
77141: PPUSH
77142: CALL_OW 72
77146: PUSH
77147: LD_VAR 0 3
77151: PPUSH
77152: CALL 52950 0 1
77156: NOT
77157: AND
77158: IFFALSE 77229
// begin if IsInUnit ( j ) then
77160: LD_VAR 0 3
77164: PPUSH
77165: CALL_OW 310
77169: IFFALSE 77180
// ComExitBuilding ( j ) ;
77171: LD_VAR 0 3
77175: PPUSH
77176: CALL_OW 122
// AddComEnterUnit ( j , UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) [ 1 ] ) ;
77180: LD_VAR 0 3
77184: PPUSH
77185: LD_EXP 63
77189: PUSH
77190: LD_VAR 0 2
77194: ARRAY
77195: PPUSH
77196: LD_INT 34
77198: PUSH
77199: LD_INT 31
77201: PUSH
77202: EMPTY
77203: LIST
77204: LIST
77205: PUSH
77206: LD_INT 58
77208: PUSH
77209: EMPTY
77210: LIST
77211: PUSH
77212: EMPTY
77213: LIST
77214: LIST
77215: PPUSH
77216: CALL_OW 72
77220: PUSH
77221: LD_INT 1
77223: ARRAY
77224: PPUSH
77225: CALL_OW 180
// end ; if not IsInUnit ( j ) or ( GetBType ( IsInUnit ( j ) ) <> b_control_tower and not IsDriver ( j ) ) then
77229: LD_VAR 0 3
77233: PPUSH
77234: CALL_OW 310
77238: NOT
77239: PUSH
77240: LD_VAR 0 3
77244: PPUSH
77245: CALL_OW 310
77249: PPUSH
77250: CALL_OW 266
77254: PUSH
77255: LD_INT 36
77257: NONEQUAL
77258: PUSH
77259: LD_VAR 0 3
77263: PPUSH
77264: CALL 52950 0 1
77268: NOT
77269: AND
77270: OR
77271: IFFALSE 77407
// begin if IsInUnit ( j ) then
77273: LD_VAR 0 3
77277: PPUSH
77278: CALL_OW 310
77282: IFFALSE 77293
// ComExitBuilding ( j ) ;
77284: LD_VAR 0 3
77288: PPUSH
77289: CALL_OW 122
// ct := 0 ;
77293: LD_ADDR_VAR 0 8
77297: PUSH
77298: LD_INT 0
77300: ST_TO_ADDR
// for k in x do
77301: LD_ADDR_VAR 0 4
77305: PUSH
77306: LD_VAR 0 11
77310: PUSH
77311: FOR_IN
77312: IFFALSE 77385
// if ( GetWeapon ( k ) = ar_control_tower and not IsDrivenBy ( k ) ) or ( GetBType ( k ) = b_control_tower and UnitsInside ( k ) < 3 ) then
77314: LD_VAR 0 4
77318: PPUSH
77319: CALL_OW 264
77323: PUSH
77324: LD_INT 31
77326: EQUAL
77327: PUSH
77328: LD_VAR 0 4
77332: PPUSH
77333: CALL_OW 311
77337: NOT
77338: AND
77339: PUSH
77340: LD_VAR 0 4
77344: PPUSH
77345: CALL_OW 266
77349: PUSH
77350: LD_INT 36
77352: EQUAL
77353: PUSH
77354: LD_VAR 0 4
77358: PPUSH
77359: CALL_OW 313
77363: PUSH
77364: LD_INT 3
77366: LESS
77367: AND
77368: OR
77369: IFFALSE 77383
// begin ct := k ;
77371: LD_ADDR_VAR 0 8
77375: PUSH
77376: LD_VAR 0 4
77380: ST_TO_ADDR
// break ;
77381: GO 77385
// end ;
77383: GO 77311
77385: POP
77386: POP
// if ct then
77387: LD_VAR 0 8
77391: IFFALSE 77407
// ComEnterUnit ( j , ct ) ;
77393: LD_VAR 0 3
77397: PPUSH
77398: LD_VAR 0 8
77402: PPUSH
77403: CALL_OW 120
// end ; end ;
77407: GO 77042
77409: POP
77410: POP
// places := 0 ;
77411: LD_ADDR_VAR 0 5
77415: PUSH
77416: LD_INT 0
77418: ST_TO_ADDR
// for j = 1 to x do
77419: LD_ADDR_VAR 0 3
77423: PUSH
77424: DOUBLE
77425: LD_INT 1
77427: DEC
77428: ST_TO_ADDR
77429: LD_VAR 0 11
77433: PUSH
77434: FOR_TO
77435: IFFALSE 77511
// if GetWeapon ( x [ j ] ) = ar_control_tower then
77437: LD_VAR 0 11
77441: PUSH
77442: LD_VAR 0 3
77446: ARRAY
77447: PPUSH
77448: CALL_OW 264
77452: PUSH
77453: LD_INT 31
77455: EQUAL
77456: IFFALSE 77474
// places := places + 1 else
77458: LD_ADDR_VAR 0 5
77462: PUSH
77463: LD_VAR 0 5
77467: PUSH
77468: LD_INT 1
77470: PLUS
77471: ST_TO_ADDR
77472: GO 77509
// if GetBType ( x [ j ] ) = b_control_tower then
77474: LD_VAR 0 11
77478: PUSH
77479: LD_VAR 0 3
77483: ARRAY
77484: PPUSH
77485: CALL_OW 266
77489: PUSH
77490: LD_INT 36
77492: EQUAL
77493: IFFALSE 77509
// places := places + 3 ;
77495: LD_ADDR_VAR 0 5
77499: PUSH
77500: LD_VAR 0 5
77504: PUSH
77505: LD_INT 3
77507: PLUS
77508: ST_TO_ADDR
77509: GO 77434
77511: POP
77512: POP
// if places = 0 or places <= mc_remote_driver [ i ] then
77513: LD_VAR 0 5
77517: PUSH
77518: LD_INT 0
77520: EQUAL
77521: PUSH
77522: LD_VAR 0 5
77526: PUSH
77527: LD_EXP 84
77531: PUSH
77532: LD_VAR 0 2
77536: ARRAY
77537: LESSEQUAL
77538: OR
77539: IFFALSE 77543
// continue ;
77541: GO 76793
// tmp := SortBySkill ( UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] , 3 ) ;
77543: LD_ADDR_VAR 0 6
77547: PUSH
77548: LD_EXP 44
77552: PUSH
77553: LD_VAR 0 2
77557: ARRAY
77558: PPUSH
77559: LD_INT 25
77561: PUSH
77562: LD_INT 3
77564: PUSH
77565: EMPTY
77566: LIST
77567: LIST
77568: PPUSH
77569: CALL_OW 72
77573: PUSH
77574: LD_EXP 84
77578: PUSH
77579: LD_VAR 0 2
77583: ARRAY
77584: DIFF
77585: PPUSH
77586: LD_INT 3
77588: PPUSH
77589: CALL 53850 0 2
77593: ST_TO_ADDR
// for j in tmp do
77594: LD_ADDR_VAR 0 3
77598: PUSH
77599: LD_VAR 0 6
77603: PUSH
77604: FOR_IN
77605: IFFALSE 77640
// if GetTag ( j ) > 0 then
77607: LD_VAR 0 3
77611: PPUSH
77612: CALL_OW 110
77616: PUSH
77617: LD_INT 0
77619: GREATER
77620: IFFALSE 77638
// tmp := tmp diff j ;
77622: LD_ADDR_VAR 0 6
77626: PUSH
77627: LD_VAR 0 6
77631: PUSH
77632: LD_VAR 0 3
77636: DIFF
77637: ST_TO_ADDR
77638: GO 77604
77640: POP
77641: POP
// if not tmp then
77642: LD_VAR 0 6
77646: NOT
77647: IFFALSE 77651
// continue ;
77649: GO 76793
// if places then
77651: LD_VAR 0 5
77655: IFFALSE 77714
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
77657: LD_ADDR_EXP 84
77661: PUSH
77662: LD_EXP 84
77666: PPUSH
77667: LD_VAR 0 2
77671: PPUSH
77672: LD_EXP 84
77676: PUSH
77677: LD_VAR 0 2
77681: ARRAY
77682: PUSH
77683: LD_VAR 0 6
77687: PUSH
77688: LD_INT 1
77690: ARRAY
77691: UNION
77692: PPUSH
77693: CALL_OW 1
77697: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
77698: LD_VAR 0 6
77702: PUSH
77703: LD_INT 1
77705: ARRAY
77706: PPUSH
77707: LD_INT 126
77709: PPUSH
77710: CALL_OW 109
// end ; end ;
77714: GO 76793
77716: POP
77717: POP
// end ;
77718: LD_VAR 0 1
77722: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
77723: LD_INT 0
77725: PPUSH
77726: PPUSH
77727: PPUSH
77728: PPUSH
77729: PPUSH
77730: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
77731: LD_VAR 0 1
77735: NOT
77736: PUSH
77737: LD_VAR 0 2
77741: NOT
77742: OR
77743: PUSH
77744: LD_VAR 0 3
77748: NOT
77749: OR
77750: PUSH
77751: LD_VAR 0 4
77755: PUSH
77756: LD_INT 1
77758: PUSH
77759: LD_INT 2
77761: PUSH
77762: LD_INT 3
77764: PUSH
77765: LD_INT 4
77767: PUSH
77768: LD_INT 5
77770: PUSH
77771: LD_INT 8
77773: PUSH
77774: LD_INT 9
77776: PUSH
77777: LD_INT 15
77779: PUSH
77780: LD_INT 16
77782: PUSH
77783: EMPTY
77784: LIST
77785: LIST
77786: LIST
77787: LIST
77788: LIST
77789: LIST
77790: LIST
77791: LIST
77792: LIST
77793: IN
77794: NOT
77795: OR
77796: IFFALSE 77800
// exit ;
77798: GO 78700
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
77800: LD_ADDR_VAR 0 2
77804: PUSH
77805: LD_VAR 0 2
77809: PPUSH
77810: LD_INT 21
77812: PUSH
77813: LD_INT 3
77815: PUSH
77816: EMPTY
77817: LIST
77818: LIST
77819: PUSH
77820: LD_INT 24
77822: PUSH
77823: LD_INT 250
77825: PUSH
77826: EMPTY
77827: LIST
77828: LIST
77829: PUSH
77830: EMPTY
77831: LIST
77832: LIST
77833: PPUSH
77834: CALL_OW 72
77838: ST_TO_ADDR
// case class of 1 , 15 :
77839: LD_VAR 0 4
77843: PUSH
77844: LD_INT 1
77846: DOUBLE
77847: EQUAL
77848: IFTRUE 77858
77850: LD_INT 15
77852: DOUBLE
77853: EQUAL
77854: IFTRUE 77858
77856: GO 77943
77858: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
77859: LD_ADDR_VAR 0 8
77863: PUSH
77864: LD_VAR 0 2
77868: PPUSH
77869: LD_INT 2
77871: PUSH
77872: LD_INT 30
77874: PUSH
77875: LD_INT 32
77877: PUSH
77878: EMPTY
77879: LIST
77880: LIST
77881: PUSH
77882: LD_INT 30
77884: PUSH
77885: LD_INT 31
77887: PUSH
77888: EMPTY
77889: LIST
77890: LIST
77891: PUSH
77892: EMPTY
77893: LIST
77894: LIST
77895: LIST
77896: PPUSH
77897: CALL_OW 72
77901: PUSH
77902: LD_VAR 0 2
77906: PPUSH
77907: LD_INT 2
77909: PUSH
77910: LD_INT 30
77912: PUSH
77913: LD_INT 4
77915: PUSH
77916: EMPTY
77917: LIST
77918: LIST
77919: PUSH
77920: LD_INT 30
77922: PUSH
77923: LD_INT 5
77925: PUSH
77926: EMPTY
77927: LIST
77928: LIST
77929: PUSH
77930: EMPTY
77931: LIST
77932: LIST
77933: LIST
77934: PPUSH
77935: CALL_OW 72
77939: ADD
77940: ST_TO_ADDR
77941: GO 78189
77943: LD_INT 2
77945: DOUBLE
77946: EQUAL
77947: IFTRUE 77957
77949: LD_INT 16
77951: DOUBLE
77952: EQUAL
77953: IFTRUE 77957
77955: GO 78003
77957: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
77958: LD_ADDR_VAR 0 8
77962: PUSH
77963: LD_VAR 0 2
77967: PPUSH
77968: LD_INT 2
77970: PUSH
77971: LD_INT 30
77973: PUSH
77974: LD_INT 0
77976: PUSH
77977: EMPTY
77978: LIST
77979: LIST
77980: PUSH
77981: LD_INT 30
77983: PUSH
77984: LD_INT 1
77986: PUSH
77987: EMPTY
77988: LIST
77989: LIST
77990: PUSH
77991: EMPTY
77992: LIST
77993: LIST
77994: LIST
77995: PPUSH
77996: CALL_OW 72
78000: ST_TO_ADDR
78001: GO 78189
78003: LD_INT 3
78005: DOUBLE
78006: EQUAL
78007: IFTRUE 78011
78009: GO 78057
78011: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
78012: LD_ADDR_VAR 0 8
78016: PUSH
78017: LD_VAR 0 2
78021: PPUSH
78022: LD_INT 2
78024: PUSH
78025: LD_INT 30
78027: PUSH
78028: LD_INT 2
78030: PUSH
78031: EMPTY
78032: LIST
78033: LIST
78034: PUSH
78035: LD_INT 30
78037: PUSH
78038: LD_INT 3
78040: PUSH
78041: EMPTY
78042: LIST
78043: LIST
78044: PUSH
78045: EMPTY
78046: LIST
78047: LIST
78048: LIST
78049: PPUSH
78050: CALL_OW 72
78054: ST_TO_ADDR
78055: GO 78189
78057: LD_INT 4
78059: DOUBLE
78060: EQUAL
78061: IFTRUE 78065
78063: GO 78122
78065: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
78066: LD_ADDR_VAR 0 8
78070: PUSH
78071: LD_VAR 0 2
78075: PPUSH
78076: LD_INT 2
78078: PUSH
78079: LD_INT 30
78081: PUSH
78082: LD_INT 6
78084: PUSH
78085: EMPTY
78086: LIST
78087: LIST
78088: PUSH
78089: LD_INT 30
78091: PUSH
78092: LD_INT 7
78094: PUSH
78095: EMPTY
78096: LIST
78097: LIST
78098: PUSH
78099: LD_INT 30
78101: PUSH
78102: LD_INT 8
78104: PUSH
78105: EMPTY
78106: LIST
78107: LIST
78108: PUSH
78109: EMPTY
78110: LIST
78111: LIST
78112: LIST
78113: LIST
78114: PPUSH
78115: CALL_OW 72
78119: ST_TO_ADDR
78120: GO 78189
78122: LD_INT 5
78124: DOUBLE
78125: EQUAL
78126: IFTRUE 78142
78128: LD_INT 8
78130: DOUBLE
78131: EQUAL
78132: IFTRUE 78142
78134: LD_INT 9
78136: DOUBLE
78137: EQUAL
78138: IFTRUE 78142
78140: GO 78188
78142: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
78143: LD_ADDR_VAR 0 8
78147: PUSH
78148: LD_VAR 0 2
78152: PPUSH
78153: LD_INT 2
78155: PUSH
78156: LD_INT 30
78158: PUSH
78159: LD_INT 4
78161: PUSH
78162: EMPTY
78163: LIST
78164: LIST
78165: PUSH
78166: LD_INT 30
78168: PUSH
78169: LD_INT 5
78171: PUSH
78172: EMPTY
78173: LIST
78174: LIST
78175: PUSH
78176: EMPTY
78177: LIST
78178: LIST
78179: LIST
78180: PPUSH
78181: CALL_OW 72
78185: ST_TO_ADDR
78186: GO 78189
78188: POP
// if not tmp then
78189: LD_VAR 0 8
78193: NOT
78194: IFFALSE 78198
// exit ;
78196: GO 78700
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
78198: LD_VAR 0 4
78202: PUSH
78203: LD_INT 1
78205: PUSH
78206: LD_INT 15
78208: PUSH
78209: EMPTY
78210: LIST
78211: LIST
78212: IN
78213: PUSH
78214: LD_EXP 53
78218: PUSH
78219: LD_VAR 0 1
78223: ARRAY
78224: AND
78225: IFFALSE 78381
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
78227: LD_ADDR_VAR 0 9
78231: PUSH
78232: LD_EXP 53
78236: PUSH
78237: LD_VAR 0 1
78241: ARRAY
78242: PUSH
78243: LD_INT 1
78245: ARRAY
78246: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
78247: LD_VAR 0 9
78251: PUSH
78252: LD_EXP 54
78256: PUSH
78257: LD_VAR 0 1
78261: ARRAY
78262: IN
78263: NOT
78264: IFFALSE 78379
// begin mc_busy_turret_list := ReplaceIn ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
78266: LD_ADDR_EXP 54
78270: PUSH
78271: LD_EXP 54
78275: PPUSH
78276: LD_VAR 0 1
78280: PUSH
78281: LD_EXP 54
78285: PUSH
78286: LD_VAR 0 1
78290: ARRAY
78291: PUSH
78292: LD_INT 1
78294: PLUS
78295: PUSH
78296: EMPTY
78297: LIST
78298: LIST
78299: PPUSH
78300: LD_VAR 0 9
78304: PPUSH
78305: CALL 24301 0 3
78309: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
78310: LD_ADDR_EXP 53
78314: PUSH
78315: LD_EXP 53
78319: PPUSH
78320: LD_VAR 0 1
78324: PPUSH
78325: LD_EXP 53
78329: PUSH
78330: LD_VAR 0 1
78334: ARRAY
78335: PUSH
78336: LD_VAR 0 9
78340: DIFF
78341: PPUSH
78342: CALL_OW 1
78346: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
78347: LD_VAR 0 3
78351: PPUSH
78352: LD_EXP 54
78356: PUSH
78357: LD_VAR 0 1
78361: ARRAY
78362: PUSH
78363: LD_EXP 54
78367: PUSH
78368: LD_VAR 0 1
78372: ARRAY
78373: ARRAY
78374: PPUSH
78375: CALL_OW 120
// end ; exit ;
78379: GO 78700
// end ; if tmp > 1 then
78381: LD_VAR 0 8
78385: PUSH
78386: LD_INT 1
78388: GREATER
78389: IFFALSE 78493
// for i = 2 to tmp do
78391: LD_ADDR_VAR 0 6
78395: PUSH
78396: DOUBLE
78397: LD_INT 2
78399: DEC
78400: ST_TO_ADDR
78401: LD_VAR 0 8
78405: PUSH
78406: FOR_TO
78407: IFFALSE 78491
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
78409: LD_VAR 0 8
78413: PUSH
78414: LD_VAR 0 6
78418: ARRAY
78419: PPUSH
78420: CALL_OW 461
78424: PUSH
78425: LD_INT 6
78427: EQUAL
78428: IFFALSE 78489
// begin x := tmp [ i ] ;
78430: LD_ADDR_VAR 0 9
78434: PUSH
78435: LD_VAR 0 8
78439: PUSH
78440: LD_VAR 0 6
78444: ARRAY
78445: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
78446: LD_ADDR_VAR 0 8
78450: PUSH
78451: LD_VAR 0 8
78455: PPUSH
78456: LD_VAR 0 6
78460: PPUSH
78461: CALL_OW 3
78465: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
78466: LD_ADDR_VAR 0 8
78470: PUSH
78471: LD_VAR 0 8
78475: PPUSH
78476: LD_INT 1
78478: PPUSH
78479: LD_VAR 0 9
78483: PPUSH
78484: CALL_OW 2
78488: ST_TO_ADDR
// end ;
78489: GO 78406
78491: POP
78492: POP
// for i in tmp do
78493: LD_ADDR_VAR 0 6
78497: PUSH
78498: LD_VAR 0 8
78502: PUSH
78503: FOR_IN
78504: IFFALSE 78573
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
78506: LD_VAR 0 6
78510: PPUSH
78511: CALL_OW 313
78515: PUSH
78516: LD_INT 6
78518: LESS
78519: PUSH
78520: LD_VAR 0 6
78524: PPUSH
78525: CALL_OW 266
78529: PUSH
78530: LD_INT 31
78532: PUSH
78533: LD_INT 32
78535: PUSH
78536: EMPTY
78537: LIST
78538: LIST
78539: IN
78540: NOT
78541: AND
78542: PUSH
78543: LD_VAR 0 6
78547: PPUSH
78548: CALL_OW 313
78552: PUSH
78553: LD_INT 0
78555: EQUAL
78556: OR
78557: IFFALSE 78571
// begin j := i ;
78559: LD_ADDR_VAR 0 7
78563: PUSH
78564: LD_VAR 0 6
78568: ST_TO_ADDR
// break ;
78569: GO 78573
// end ; end ;
78571: GO 78503
78573: POP
78574: POP
// if j then
78575: LD_VAR 0 7
78579: IFFALSE 78597
// ComEnterUnit ( unit , j ) else
78581: LD_VAR 0 3
78585: PPUSH
78586: LD_VAR 0 7
78590: PPUSH
78591: CALL_OW 120
78595: GO 78700
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
78597: LD_ADDR_VAR 0 10
78601: PUSH
78602: LD_VAR 0 2
78606: PPUSH
78607: LD_INT 2
78609: PUSH
78610: LD_INT 30
78612: PUSH
78613: LD_INT 0
78615: PUSH
78616: EMPTY
78617: LIST
78618: LIST
78619: PUSH
78620: LD_INT 30
78622: PUSH
78623: LD_INT 1
78625: PUSH
78626: EMPTY
78627: LIST
78628: LIST
78629: PUSH
78630: EMPTY
78631: LIST
78632: LIST
78633: LIST
78634: PPUSH
78635: CALL_OW 72
78639: ST_TO_ADDR
// if depot then
78640: LD_VAR 0 10
78644: IFFALSE 78700
// begin depot := NearestUnitToUnit ( depot , unit ) ;
78646: LD_ADDR_VAR 0 10
78650: PUSH
78651: LD_VAR 0 10
78655: PPUSH
78656: LD_VAR 0 3
78660: PPUSH
78661: CALL_OW 74
78665: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
78666: LD_VAR 0 3
78670: PPUSH
78671: LD_VAR 0 10
78675: PPUSH
78676: CALL_OW 296
78680: PUSH
78681: LD_INT 10
78683: GREATER
78684: IFFALSE 78700
// ComStandNearbyBuilding ( unit , depot ) ;
78686: LD_VAR 0 3
78690: PPUSH
78691: LD_VAR 0 10
78695: PPUSH
78696: CALL 20915 0 2
// end ; end ; end ;
78700: LD_VAR 0 5
78704: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
78705: LD_INT 0
78707: PPUSH
78708: PPUSH
78709: PPUSH
78710: PPUSH
// if not mc_bases then
78711: LD_EXP 44
78715: NOT
78716: IFFALSE 78720
// exit ;
78718: GO 78959
// for i = 1 to mc_bases do
78720: LD_ADDR_VAR 0 2
78724: PUSH
78725: DOUBLE
78726: LD_INT 1
78728: DEC
78729: ST_TO_ADDR
78730: LD_EXP 44
78734: PUSH
78735: FOR_TO
78736: IFFALSE 78957
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
78738: LD_ADDR_VAR 0 4
78742: PUSH
78743: LD_EXP 44
78747: PUSH
78748: LD_VAR 0 2
78752: ARRAY
78753: PPUSH
78754: LD_INT 21
78756: PUSH
78757: LD_INT 1
78759: PUSH
78760: EMPTY
78761: LIST
78762: LIST
78763: PPUSH
78764: CALL_OW 72
78768: PUSH
78769: LD_EXP 73
78773: PUSH
78774: LD_VAR 0 2
78778: ARRAY
78779: UNION
78780: ST_TO_ADDR
// if not tmp then
78781: LD_VAR 0 4
78785: NOT
78786: IFFALSE 78790
// continue ;
78788: GO 78735
// for j in tmp do
78790: LD_ADDR_VAR 0 3
78794: PUSH
78795: LD_VAR 0 4
78799: PUSH
78800: FOR_IN
78801: IFFALSE 78953
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
78803: LD_VAR 0 3
78807: PPUSH
78808: CALL_OW 110
78812: NOT
78813: PUSH
78814: LD_VAR 0 3
78818: PPUSH
78819: CALL_OW 314
78823: NOT
78824: AND
78825: PUSH
78826: LD_VAR 0 3
78830: PPUSH
78831: CALL_OW 311
78835: NOT
78836: AND
78837: PUSH
78838: LD_VAR 0 3
78842: PPUSH
78843: CALL_OW 310
78847: NOT
78848: AND
78849: PUSH
78850: LD_VAR 0 3
78854: PUSH
78855: LD_EXP 47
78859: PUSH
78860: LD_VAR 0 2
78864: ARRAY
78865: PUSH
78866: LD_INT 1
78868: ARRAY
78869: IN
78870: NOT
78871: AND
78872: PUSH
78873: LD_VAR 0 3
78877: PUSH
78878: LD_EXP 47
78882: PUSH
78883: LD_VAR 0 2
78887: ARRAY
78888: PUSH
78889: LD_INT 2
78891: ARRAY
78892: IN
78893: NOT
78894: AND
78895: PUSH
78896: LD_VAR 0 3
78900: PUSH
78901: LD_EXP 56
78905: PUSH
78906: LD_VAR 0 2
78910: ARRAY
78911: IN
78912: NOT
78913: AND
78914: IFFALSE 78951
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
78916: LD_VAR 0 2
78920: PPUSH
78921: LD_EXP 44
78925: PUSH
78926: LD_VAR 0 2
78930: ARRAY
78931: PPUSH
78932: LD_VAR 0 3
78936: PPUSH
78937: LD_VAR 0 3
78941: PPUSH
78942: CALL_OW 257
78946: PPUSH
78947: CALL 77723 0 4
// end ;
78951: GO 78800
78953: POP
78954: POP
// end ;
78955: GO 78735
78957: POP
78958: POP
// end ;
78959: LD_VAR 0 1
78963: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
78964: LD_INT 0
78966: PPUSH
78967: PPUSH
78968: PPUSH
78969: PPUSH
78970: PPUSH
78971: PPUSH
// if not mc_bases [ base ] then
78972: LD_EXP 44
78976: PUSH
78977: LD_VAR 0 1
78981: ARRAY
78982: NOT
78983: IFFALSE 78987
// exit ;
78985: GO 79169
// tmp := [ ] ;
78987: LD_ADDR_VAR 0 6
78991: PUSH
78992: EMPTY
78993: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
78994: LD_ADDR_VAR 0 7
78998: PUSH
78999: LD_VAR 0 3
79003: PPUSH
79004: LD_INT 0
79006: PPUSH
79007: CALL_OW 517
79011: ST_TO_ADDR
// if not list then
79012: LD_VAR 0 7
79016: NOT
79017: IFFALSE 79021
// exit ;
79019: GO 79169
// for i = 1 to amount do
79021: LD_ADDR_VAR 0 5
79025: PUSH
79026: DOUBLE
79027: LD_INT 1
79029: DEC
79030: ST_TO_ADDR
79031: LD_VAR 0 2
79035: PUSH
79036: FOR_TO
79037: IFFALSE 79117
// begin x := rand ( 1 , list [ 1 ] ) ;
79039: LD_ADDR_VAR 0 8
79043: PUSH
79044: LD_INT 1
79046: PPUSH
79047: LD_VAR 0 7
79051: PUSH
79052: LD_INT 1
79054: ARRAY
79055: PPUSH
79056: CALL_OW 12
79060: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
79061: LD_ADDR_VAR 0 6
79065: PUSH
79066: LD_VAR 0 6
79070: PPUSH
79071: LD_VAR 0 5
79075: PPUSH
79076: LD_VAR 0 7
79080: PUSH
79081: LD_INT 1
79083: ARRAY
79084: PUSH
79085: LD_VAR 0 8
79089: ARRAY
79090: PUSH
79091: LD_VAR 0 7
79095: PUSH
79096: LD_INT 2
79098: ARRAY
79099: PUSH
79100: LD_VAR 0 8
79104: ARRAY
79105: PUSH
79106: EMPTY
79107: LIST
79108: LIST
79109: PPUSH
79110: CALL_OW 1
79114: ST_TO_ADDR
// end ;
79115: GO 79036
79117: POP
79118: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
79119: LD_ADDR_EXP 57
79123: PUSH
79124: LD_EXP 57
79128: PPUSH
79129: LD_VAR 0 1
79133: PPUSH
79134: LD_VAR 0 6
79138: PPUSH
79139: CALL_OW 1
79143: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
79144: LD_ADDR_EXP 59
79148: PUSH
79149: LD_EXP 59
79153: PPUSH
79154: LD_VAR 0 1
79158: PPUSH
79159: LD_VAR 0 3
79163: PPUSH
79164: CALL_OW 1
79168: ST_TO_ADDR
// end ;
79169: LD_VAR 0 4
79173: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
79174: LD_INT 0
79176: PPUSH
// if not mc_bases [ base ] then
79177: LD_EXP 44
79181: PUSH
79182: LD_VAR 0 1
79186: ARRAY
79187: NOT
79188: IFFALSE 79192
// exit ;
79190: GO 79217
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
79192: LD_ADDR_EXP 49
79196: PUSH
79197: LD_EXP 49
79201: PPUSH
79202: LD_VAR 0 1
79206: PPUSH
79207: LD_VAR 0 2
79211: PPUSH
79212: CALL_OW 1
79216: ST_TO_ADDR
// end ;
79217: LD_VAR 0 3
79221: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
79222: LD_INT 0
79224: PPUSH
// if not mc_bases [ base ] then
79225: LD_EXP 44
79229: PUSH
79230: LD_VAR 0 1
79234: ARRAY
79235: NOT
79236: IFFALSE 79240
// exit ;
79238: GO 79277
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union list ) ;
79240: LD_ADDR_EXP 49
79244: PUSH
79245: LD_EXP 49
79249: PPUSH
79250: LD_VAR 0 1
79254: PPUSH
79255: LD_EXP 49
79259: PUSH
79260: LD_VAR 0 1
79264: ARRAY
79265: PUSH
79266: LD_VAR 0 2
79270: UNION
79271: PPUSH
79272: CALL_OW 1
79276: ST_TO_ADDR
// end ;
79277: LD_VAR 0 3
79281: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
79282: LD_INT 0
79284: PPUSH
// if not mc_bases [ base ] then
79285: LD_EXP 44
79289: PUSH
79290: LD_VAR 0 1
79294: ARRAY
79295: NOT
79296: IFFALSE 79300
// exit ;
79298: GO 79325
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
79300: LD_ADDR_EXP 65
79304: PUSH
79305: LD_EXP 65
79309: PPUSH
79310: LD_VAR 0 1
79314: PPUSH
79315: LD_VAR 0 2
79319: PPUSH
79320: CALL_OW 1
79324: ST_TO_ADDR
// end ;
79325: LD_VAR 0 3
79329: RET
// export function MC_InsertProduceList ( base , components ) ; begin
79330: LD_INT 0
79332: PPUSH
// if not mc_bases [ base ] then
79333: LD_EXP 44
79337: PUSH
79338: LD_VAR 0 1
79342: ARRAY
79343: NOT
79344: IFFALSE 79348
// exit ;
79346: GO 79385
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ components ) ;
79348: LD_ADDR_EXP 65
79352: PUSH
79353: LD_EXP 65
79357: PPUSH
79358: LD_VAR 0 1
79362: PPUSH
79363: LD_EXP 65
79367: PUSH
79368: LD_VAR 0 1
79372: ARRAY
79373: PUSH
79374: LD_VAR 0 2
79378: ADD
79379: PPUSH
79380: CALL_OW 1
79384: ST_TO_ADDR
// end ;
79385: LD_VAR 0 3
79389: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
79390: LD_INT 0
79392: PPUSH
// if not mc_bases [ base ] then
79393: LD_EXP 44
79397: PUSH
79398: LD_VAR 0 1
79402: ARRAY
79403: NOT
79404: IFFALSE 79408
// exit ;
79406: GO 79462
// mc_defender := Replace ( mc_defender , base , deflist ) ;
79408: LD_ADDR_EXP 66
79412: PUSH
79413: LD_EXP 66
79417: PPUSH
79418: LD_VAR 0 1
79422: PPUSH
79423: LD_VAR 0 2
79427: PPUSH
79428: CALL_OW 1
79432: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
79433: LD_ADDR_EXP 55
79437: PUSH
79438: LD_EXP 55
79442: PPUSH
79443: LD_VAR 0 1
79447: PPUSH
79448: LD_VAR 0 2
79452: PUSH
79453: LD_INT 0
79455: PLUS
79456: PPUSH
79457: CALL_OW 1
79461: ST_TO_ADDR
// end ;
79462: LD_VAR 0 3
79466: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
79467: LD_INT 0
79469: PPUSH
// if not mc_bases [ base ] then
79470: LD_EXP 44
79474: PUSH
79475: LD_VAR 0 1
79479: ARRAY
79480: NOT
79481: IFFALSE 79485
// exit ;
79483: GO 79510
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
79485: LD_ADDR_EXP 55
79489: PUSH
79490: LD_EXP 55
79494: PPUSH
79495: LD_VAR 0 1
79499: PPUSH
79500: LD_VAR 0 2
79504: PPUSH
79505: CALL_OW 1
79509: ST_TO_ADDR
// end ;
79510: LD_VAR 0 3
79514: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
79515: LD_INT 0
79517: PPUSH
79518: PPUSH
79519: PPUSH
79520: PPUSH
// if not mc_bases [ base ] then
79521: LD_EXP 44
79525: PUSH
79526: LD_VAR 0 1
79530: ARRAY
79531: NOT
79532: IFFALSE 79536
// exit ;
79534: GO 79601
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
79536: LD_ADDR_EXP 64
79540: PUSH
79541: LD_EXP 64
79545: PPUSH
79546: LD_VAR 0 1
79550: PUSH
79551: LD_EXP 64
79555: PUSH
79556: LD_VAR 0 1
79560: ARRAY
79561: PUSH
79562: LD_INT 1
79564: PLUS
79565: PUSH
79566: EMPTY
79567: LIST
79568: LIST
79569: PPUSH
79570: LD_VAR 0 1
79574: PUSH
79575: LD_VAR 0 2
79579: PUSH
79580: LD_VAR 0 3
79584: PUSH
79585: LD_VAR 0 4
79589: PUSH
79590: EMPTY
79591: LIST
79592: LIST
79593: LIST
79594: LIST
79595: PPUSH
79596: CALL 24301 0 3
79600: ST_TO_ADDR
// end ;
79601: LD_VAR 0 5
79605: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
79606: LD_INT 0
79608: PPUSH
// if not mc_bases [ base ] then
79609: LD_EXP 44
79613: PUSH
79614: LD_VAR 0 1
79618: ARRAY
79619: NOT
79620: IFFALSE 79624
// exit ;
79622: GO 79649
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
79624: LD_ADDR_EXP 81
79628: PUSH
79629: LD_EXP 81
79633: PPUSH
79634: LD_VAR 0 1
79638: PPUSH
79639: LD_VAR 0 2
79643: PPUSH
79644: CALL_OW 1
79648: ST_TO_ADDR
// end ;
79649: LD_VAR 0 3
79653: RET
// export function MC_GetMinesField ( base ) ; begin
79654: LD_INT 0
79656: PPUSH
// result := mc_mines [ base ] ;
79657: LD_ADDR_VAR 0 2
79661: PUSH
79662: LD_EXP 57
79666: PUSH
79667: LD_VAR 0 1
79671: ARRAY
79672: ST_TO_ADDR
// end ;
79673: LD_VAR 0 2
79677: RET
// export function MC_GetProduceList ( base ) ; begin
79678: LD_INT 0
79680: PPUSH
// result := mc_produce [ base ] ;
79681: LD_ADDR_VAR 0 2
79685: PUSH
79686: LD_EXP 65
79690: PUSH
79691: LD_VAR 0 1
79695: ARRAY
79696: ST_TO_ADDR
// end ;
79697: LD_VAR 0 2
79701: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
79702: LD_INT 0
79704: PPUSH
79705: PPUSH
// if not mc_bases then
79706: LD_EXP 44
79710: NOT
79711: IFFALSE 79715
// exit ;
79713: GO 79780
// if mc_bases [ base ] then
79715: LD_EXP 44
79719: PUSH
79720: LD_VAR 0 1
79724: ARRAY
79725: IFFALSE 79780
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
79727: LD_ADDR_VAR 0 3
79731: PUSH
79732: LD_EXP 44
79736: PUSH
79737: LD_VAR 0 1
79741: ARRAY
79742: PPUSH
79743: LD_INT 30
79745: PUSH
79746: LD_VAR 0 2
79750: PUSH
79751: EMPTY
79752: LIST
79753: LIST
79754: PPUSH
79755: CALL_OW 72
79759: ST_TO_ADDR
// if result then
79760: LD_VAR 0 3
79764: IFFALSE 79780
// result := result [ 1 ] ;
79766: LD_ADDR_VAR 0 3
79770: PUSH
79771: LD_VAR 0 3
79775: PUSH
79776: LD_INT 1
79778: ARRAY
79779: ST_TO_ADDR
// end ; end ;
79780: LD_VAR 0 3
79784: RET
// export function MC_GetBuildings ( base , btype ) ; var i ; begin
79785: LD_INT 0
79787: PPUSH
79788: PPUSH
// if not mc_bases then
79789: LD_EXP 44
79793: NOT
79794: IFFALSE 79798
// exit ;
79796: GO 79843
// if mc_bases [ base ] then
79798: LD_EXP 44
79802: PUSH
79803: LD_VAR 0 1
79807: ARRAY
79808: IFFALSE 79843
// result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
79810: LD_ADDR_VAR 0 3
79814: PUSH
79815: LD_EXP 44
79819: PUSH
79820: LD_VAR 0 1
79824: ARRAY
79825: PPUSH
79826: LD_INT 30
79828: PUSH
79829: LD_VAR 0 2
79833: PUSH
79834: EMPTY
79835: LIST
79836: LIST
79837: PPUSH
79838: CALL_OW 72
79842: ST_TO_ADDR
// end ;
79843: LD_VAR 0 3
79847: RET
// export function MC_SetTame ( base , area ) ; begin
79848: LD_INT 0
79850: PPUSH
// if not mc_bases or not base then
79851: LD_EXP 44
79855: NOT
79856: PUSH
79857: LD_VAR 0 1
79861: NOT
79862: OR
79863: IFFALSE 79867
// exit ;
79865: GO 79892
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
79867: LD_ADDR_EXP 72
79871: PUSH
79872: LD_EXP 72
79876: PPUSH
79877: LD_VAR 0 1
79881: PPUSH
79882: LD_VAR 0 2
79886: PPUSH
79887: CALL_OW 1
79891: ST_TO_ADDR
// end ;
79892: LD_VAR 0 3
79896: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
79897: LD_INT 0
79899: PPUSH
79900: PPUSH
// if not mc_bases or not base then
79901: LD_EXP 44
79905: NOT
79906: PUSH
79907: LD_VAR 0 1
79911: NOT
79912: OR
79913: IFFALSE 79917
// exit ;
79915: GO 80019
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
79917: LD_ADDR_VAR 0 4
79921: PUSH
79922: LD_EXP 44
79926: PUSH
79927: LD_VAR 0 1
79931: ARRAY
79932: PPUSH
79933: LD_INT 30
79935: PUSH
79936: LD_VAR 0 2
79940: PUSH
79941: EMPTY
79942: LIST
79943: LIST
79944: PPUSH
79945: CALL_OW 72
79949: ST_TO_ADDR
// if not tmp then
79950: LD_VAR 0 4
79954: NOT
79955: IFFALSE 79959
// exit ;
79957: GO 80019
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
79959: LD_ADDR_EXP 76
79963: PUSH
79964: LD_EXP 76
79968: PPUSH
79969: LD_VAR 0 1
79973: PPUSH
79974: LD_EXP 76
79978: PUSH
79979: LD_VAR 0 1
79983: ARRAY
79984: PPUSH
79985: LD_EXP 76
79989: PUSH
79990: LD_VAR 0 1
79994: ARRAY
79995: PUSH
79996: LD_INT 1
79998: PLUS
79999: PPUSH
80000: LD_VAR 0 4
80004: PUSH
80005: LD_INT 1
80007: ARRAY
80008: PPUSH
80009: CALL_OW 2
80013: PPUSH
80014: CALL_OW 1
80018: ST_TO_ADDR
// end ;
80019: LD_VAR 0 3
80023: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
80024: LD_INT 0
80026: PPUSH
80027: PPUSH
// if not mc_bases or not base or not kinds then
80028: LD_EXP 44
80032: NOT
80033: PUSH
80034: LD_VAR 0 1
80038: NOT
80039: OR
80040: PUSH
80041: LD_VAR 0 2
80045: NOT
80046: OR
80047: IFFALSE 80051
// exit ;
80049: GO 80112
// for i in kinds do
80051: LD_ADDR_VAR 0 4
80055: PUSH
80056: LD_VAR 0 2
80060: PUSH
80061: FOR_IN
80062: IFFALSE 80110
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
80064: LD_ADDR_EXP 78
80068: PUSH
80069: LD_EXP 78
80073: PPUSH
80074: LD_VAR 0 1
80078: PUSH
80079: LD_EXP 78
80083: PUSH
80084: LD_VAR 0 1
80088: ARRAY
80089: PUSH
80090: LD_INT 1
80092: PLUS
80093: PUSH
80094: EMPTY
80095: LIST
80096: LIST
80097: PPUSH
80098: LD_VAR 0 4
80102: PPUSH
80103: CALL 24301 0 3
80107: ST_TO_ADDR
80108: GO 80061
80110: POP
80111: POP
// end ;
80112: LD_VAR 0 3
80116: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
80117: LD_INT 0
80119: PPUSH
// if not mc_bases or not base or not areas then
80120: LD_EXP 44
80124: NOT
80125: PUSH
80126: LD_VAR 0 1
80130: NOT
80131: OR
80132: PUSH
80133: LD_VAR 0 2
80137: NOT
80138: OR
80139: IFFALSE 80143
// exit ;
80141: GO 80168
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
80143: LD_ADDR_EXP 62
80147: PUSH
80148: LD_EXP 62
80152: PPUSH
80153: LD_VAR 0 1
80157: PPUSH
80158: LD_VAR 0 2
80162: PPUSH
80163: CALL_OW 1
80167: ST_TO_ADDR
// end ;
80168: LD_VAR 0 3
80172: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
80173: LD_INT 0
80175: PPUSH
// if not mc_bases or not base or not teleports_exit then
80176: LD_EXP 44
80180: NOT
80181: PUSH
80182: LD_VAR 0 1
80186: NOT
80187: OR
80188: PUSH
80189: LD_VAR 0 2
80193: NOT
80194: OR
80195: IFFALSE 80199
// exit ;
80197: GO 80224
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
80199: LD_ADDR_EXP 79
80203: PUSH
80204: LD_EXP 79
80208: PPUSH
80209: LD_VAR 0 1
80213: PPUSH
80214: LD_VAR 0 2
80218: PPUSH
80219: CALL_OW 1
80223: ST_TO_ADDR
// end ;
80224: LD_VAR 0 3
80228: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
80229: LD_INT 0
80231: PPUSH
80232: PPUSH
80233: PPUSH
// if not mc_bases or not base or not ext_list then
80234: LD_EXP 44
80238: NOT
80239: PUSH
80240: LD_VAR 0 1
80244: NOT
80245: OR
80246: PUSH
80247: LD_VAR 0 5
80251: NOT
80252: OR
80253: IFFALSE 80257
// exit ;
80255: GO 80430
// tmp := GetFacExtXYD ( x , y , d ) ;
80257: LD_ADDR_VAR 0 8
80261: PUSH
80262: LD_VAR 0 2
80266: PPUSH
80267: LD_VAR 0 3
80271: PPUSH
80272: LD_VAR 0 4
80276: PPUSH
80277: CALL 52980 0 3
80281: ST_TO_ADDR
// if not tmp then
80282: LD_VAR 0 8
80286: NOT
80287: IFFALSE 80291
// exit ;
80289: GO 80430
// for i in tmp do
80291: LD_ADDR_VAR 0 7
80295: PUSH
80296: LD_VAR 0 8
80300: PUSH
80301: FOR_IN
80302: IFFALSE 80428
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
80304: LD_ADDR_EXP 49
80308: PUSH
80309: LD_EXP 49
80313: PPUSH
80314: LD_VAR 0 1
80318: PPUSH
80319: LD_EXP 49
80323: PUSH
80324: LD_VAR 0 1
80328: ARRAY
80329: PPUSH
80330: LD_EXP 49
80334: PUSH
80335: LD_VAR 0 1
80339: ARRAY
80340: PUSH
80341: LD_INT 1
80343: PLUS
80344: PPUSH
80345: LD_VAR 0 5
80349: PUSH
80350: LD_INT 1
80352: ARRAY
80353: PUSH
80354: LD_VAR 0 7
80358: PUSH
80359: LD_INT 1
80361: ARRAY
80362: PUSH
80363: LD_VAR 0 7
80367: PUSH
80368: LD_INT 2
80370: ARRAY
80371: PUSH
80372: LD_VAR 0 7
80376: PUSH
80377: LD_INT 3
80379: ARRAY
80380: PUSH
80381: EMPTY
80382: LIST
80383: LIST
80384: LIST
80385: LIST
80386: PPUSH
80387: CALL_OW 2
80391: PPUSH
80392: CALL_OW 1
80396: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
80397: LD_ADDR_VAR 0 5
80401: PUSH
80402: LD_VAR 0 5
80406: PPUSH
80407: LD_INT 1
80409: PPUSH
80410: CALL_OW 3
80414: ST_TO_ADDR
// if not ext_list then
80415: LD_VAR 0 5
80419: NOT
80420: IFFALSE 80426
// exit ;
80422: POP
80423: POP
80424: GO 80430
// end ;
80426: GO 80301
80428: POP
80429: POP
// end ;
80430: LD_VAR 0 6
80434: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
80435: LD_INT 0
80437: PPUSH
// if not mc_bases or not base or not weapon_list then
80438: LD_EXP 44
80442: NOT
80443: PUSH
80444: LD_VAR 0 1
80448: NOT
80449: OR
80450: PUSH
80451: LD_VAR 0 2
80455: NOT
80456: OR
80457: IFFALSE 80461
// exit ;
80459: GO 80486
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
80461: LD_ADDR_EXP 83
80465: PUSH
80466: LD_EXP 83
80470: PPUSH
80471: LD_VAR 0 1
80475: PPUSH
80476: LD_VAR 0 2
80480: PPUSH
80481: CALL_OW 1
80485: ST_TO_ADDR
// end ;
80486: LD_VAR 0 3
80490: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
80491: LD_INT 0
80493: PPUSH
// if not mc_bases or not base or not tech_list then
80494: LD_EXP 44
80498: NOT
80499: PUSH
80500: LD_VAR 0 1
80504: NOT
80505: OR
80506: PUSH
80507: LD_VAR 0 2
80511: NOT
80512: OR
80513: IFFALSE 80517
// exit ;
80515: GO 80542
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
80517: LD_ADDR_EXP 71
80521: PUSH
80522: LD_EXP 71
80526: PPUSH
80527: LD_VAR 0 1
80531: PPUSH
80532: LD_VAR 0 2
80536: PPUSH
80537: CALL_OW 1
80541: ST_TO_ADDR
// end ;
80542: LD_VAR 0 3
80546: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
80547: LD_INT 0
80549: PPUSH
// if not mc_bases or not parking_area or not base then
80550: LD_EXP 44
80554: NOT
80555: PUSH
80556: LD_VAR 0 2
80560: NOT
80561: OR
80562: PUSH
80563: LD_VAR 0 1
80567: NOT
80568: OR
80569: IFFALSE 80573
// exit ;
80571: GO 80598
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
80573: LD_ADDR_EXP 68
80577: PUSH
80578: LD_EXP 68
80582: PPUSH
80583: LD_VAR 0 1
80587: PPUSH
80588: LD_VAR 0 2
80592: PPUSH
80593: CALL_OW 1
80597: ST_TO_ADDR
// end ;
80598: LD_VAR 0 3
80602: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
80603: LD_INT 0
80605: PPUSH
// if not mc_bases or not base or not scan_area then
80606: LD_EXP 44
80610: NOT
80611: PUSH
80612: LD_VAR 0 1
80616: NOT
80617: OR
80618: PUSH
80619: LD_VAR 0 2
80623: NOT
80624: OR
80625: IFFALSE 80629
// exit ;
80627: GO 80654
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
80629: LD_ADDR_EXP 69
80633: PUSH
80634: LD_EXP 69
80638: PPUSH
80639: LD_VAR 0 1
80643: PPUSH
80644: LD_VAR 0 2
80648: PPUSH
80649: CALL_OW 1
80653: ST_TO_ADDR
// end ;
80654: LD_VAR 0 3
80658: RET
// export function MC_NotTameApeman ( base ) ; var ape_techs ; begin
80659: LD_INT 0
80661: PPUSH
80662: PPUSH
// if not mc_bases or not base then
80663: LD_EXP 44
80667: NOT
80668: PUSH
80669: LD_VAR 0 1
80673: NOT
80674: OR
80675: IFFALSE 80679
// exit ;
80677: GO 80743
// ape_techs := [ 1 , 2 , 3 , 4 , 11 ] ;
80679: LD_ADDR_VAR 0 3
80683: PUSH
80684: LD_INT 1
80686: PUSH
80687: LD_INT 2
80689: PUSH
80690: LD_INT 3
80692: PUSH
80693: LD_INT 4
80695: PUSH
80696: LD_INT 11
80698: PUSH
80699: EMPTY
80700: LIST
80701: LIST
80702: LIST
80703: LIST
80704: LIST
80705: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , mc_tech [ base ] diff ape_techs ) ;
80706: LD_ADDR_EXP 71
80710: PUSH
80711: LD_EXP 71
80715: PPUSH
80716: LD_VAR 0 1
80720: PPUSH
80721: LD_EXP 71
80725: PUSH
80726: LD_VAR 0 1
80730: ARRAY
80731: PUSH
80732: LD_VAR 0 3
80736: DIFF
80737: PPUSH
80738: CALL_OW 1
80742: ST_TO_ADDR
// end ;
80743: LD_VAR 0 2
80747: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
80748: LD_INT 0
80750: PPUSH
// result := mc_vehicles [ base ] ;
80751: LD_ADDR_VAR 0 3
80755: PUSH
80756: LD_EXP 63
80760: PUSH
80761: LD_VAR 0 1
80765: ARRAY
80766: ST_TO_ADDR
// if onlyCombat then
80767: LD_VAR 0 2
80771: IFFALSE 80936
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] , [ f_weapon , ru_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ) ;
80773: LD_ADDR_VAR 0 3
80777: PUSH
80778: LD_VAR 0 3
80782: PUSH
80783: LD_VAR 0 3
80787: PPUSH
80788: LD_INT 2
80790: PUSH
80791: LD_INT 34
80793: PUSH
80794: LD_INT 12
80796: PUSH
80797: EMPTY
80798: LIST
80799: LIST
80800: PUSH
80801: LD_INT 34
80803: PUSH
80804: LD_INT 51
80806: PUSH
80807: EMPTY
80808: LIST
80809: LIST
80810: PUSH
80811: LD_INT 34
80813: PUSH
80814: LD_EXP 30
80818: PUSH
80819: EMPTY
80820: LIST
80821: LIST
80822: PUSH
80823: LD_INT 34
80825: PUSH
80826: LD_INT 32
80828: PUSH
80829: EMPTY
80830: LIST
80831: LIST
80832: PUSH
80833: LD_INT 34
80835: PUSH
80836: LD_INT 13
80838: PUSH
80839: EMPTY
80840: LIST
80841: LIST
80842: PUSH
80843: LD_INT 34
80845: PUSH
80846: LD_INT 52
80848: PUSH
80849: EMPTY
80850: LIST
80851: LIST
80852: PUSH
80853: LD_INT 34
80855: PUSH
80856: LD_INT 14
80858: PUSH
80859: EMPTY
80860: LIST
80861: LIST
80862: PUSH
80863: LD_INT 34
80865: PUSH
80866: LD_INT 53
80868: PUSH
80869: EMPTY
80870: LIST
80871: LIST
80872: PUSH
80873: LD_INT 34
80875: PUSH
80876: LD_EXP 29
80880: PUSH
80881: EMPTY
80882: LIST
80883: LIST
80884: PUSH
80885: LD_INT 34
80887: PUSH
80888: LD_INT 31
80890: PUSH
80891: EMPTY
80892: LIST
80893: LIST
80894: PUSH
80895: LD_INT 34
80897: PUSH
80898: LD_INT 48
80900: PUSH
80901: EMPTY
80902: LIST
80903: LIST
80904: PUSH
80905: LD_INT 34
80907: PUSH
80908: LD_INT 8
80910: PUSH
80911: EMPTY
80912: LIST
80913: LIST
80914: PUSH
80915: EMPTY
80916: LIST
80917: LIST
80918: LIST
80919: LIST
80920: LIST
80921: LIST
80922: LIST
80923: LIST
80924: LIST
80925: LIST
80926: LIST
80927: LIST
80928: LIST
80929: PPUSH
80930: CALL_OW 72
80934: DIFF
80935: ST_TO_ADDR
// end ; end_of_file
80936: LD_VAR 0 3
80940: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
80941: LD_INT 0
80943: PPUSH
80944: PPUSH
80945: PPUSH
// if not mc_bases or not skirmish then
80946: LD_EXP 44
80950: NOT
80951: PUSH
80952: LD_EXP 42
80956: NOT
80957: OR
80958: IFFALSE 80962
// exit ;
80960: GO 81127
// for i = 1 to mc_bases do
80962: LD_ADDR_VAR 0 4
80966: PUSH
80967: DOUBLE
80968: LD_INT 1
80970: DEC
80971: ST_TO_ADDR
80972: LD_EXP 44
80976: PUSH
80977: FOR_TO
80978: IFFALSE 81125
// begin if sci in mc_bases [ i ] then
80980: LD_VAR 0 2
80984: PUSH
80985: LD_EXP 44
80989: PUSH
80990: LD_VAR 0 4
80994: ARRAY
80995: IN
80996: IFFALSE 81123
// begin mc_ape := ReplaceIn ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
80998: LD_ADDR_EXP 73
81002: PUSH
81003: LD_EXP 73
81007: PPUSH
81008: LD_VAR 0 4
81012: PUSH
81013: LD_EXP 73
81017: PUSH
81018: LD_VAR 0 4
81022: ARRAY
81023: PUSH
81024: LD_INT 1
81026: PLUS
81027: PUSH
81028: EMPTY
81029: LIST
81030: LIST
81031: PPUSH
81032: LD_VAR 0 1
81036: PPUSH
81037: CALL 24301 0 3
81041: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
81042: LD_ADDR_VAR 0 5
81046: PUSH
81047: LD_EXP 44
81051: PUSH
81052: LD_VAR 0 4
81056: ARRAY
81057: PPUSH
81058: LD_INT 2
81060: PUSH
81061: LD_INT 30
81063: PUSH
81064: LD_INT 0
81066: PUSH
81067: EMPTY
81068: LIST
81069: LIST
81070: PUSH
81071: LD_INT 30
81073: PUSH
81074: LD_INT 1
81076: PUSH
81077: EMPTY
81078: LIST
81079: LIST
81080: PUSH
81081: EMPTY
81082: LIST
81083: LIST
81084: LIST
81085: PPUSH
81086: CALL_OW 72
81090: PPUSH
81091: LD_VAR 0 1
81095: PPUSH
81096: CALL_OW 74
81100: ST_TO_ADDR
// if tmp then
81101: LD_VAR 0 5
81105: IFFALSE 81121
// ComStandNearbyBuilding ( ape , tmp ) ;
81107: LD_VAR 0 1
81111: PPUSH
81112: LD_VAR 0 5
81116: PPUSH
81117: CALL 20915 0 2
// break ;
81121: GO 81125
// end ; end ;
81123: GO 80977
81125: POP
81126: POP
// end ;
81127: LD_VAR 0 3
81131: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
81132: LD_INT 0
81134: PPUSH
81135: PPUSH
81136: PPUSH
// if not mc_bases or not skirmish then
81137: LD_EXP 44
81141: NOT
81142: PUSH
81143: LD_EXP 42
81147: NOT
81148: OR
81149: IFFALSE 81153
// exit ;
81151: GO 81242
// for i = 1 to mc_bases do
81153: LD_ADDR_VAR 0 4
81157: PUSH
81158: DOUBLE
81159: LD_INT 1
81161: DEC
81162: ST_TO_ADDR
81163: LD_EXP 44
81167: PUSH
81168: FOR_TO
81169: IFFALSE 81240
// begin if building in mc_busy_turret_list [ i ] then
81171: LD_VAR 0 1
81175: PUSH
81176: LD_EXP 54
81180: PUSH
81181: LD_VAR 0 4
81185: ARRAY
81186: IN
81187: IFFALSE 81238
// begin tmp := mc_busy_turret_list [ i ] diff building ;
81189: LD_ADDR_VAR 0 5
81193: PUSH
81194: LD_EXP 54
81198: PUSH
81199: LD_VAR 0 4
81203: ARRAY
81204: PUSH
81205: LD_VAR 0 1
81209: DIFF
81210: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
81211: LD_ADDR_EXP 54
81215: PUSH
81216: LD_EXP 54
81220: PPUSH
81221: LD_VAR 0 4
81225: PPUSH
81226: LD_VAR 0 5
81230: PPUSH
81231: CALL_OW 1
81235: ST_TO_ADDR
// break ;
81236: GO 81240
// end ; end ;
81238: GO 81168
81240: POP
81241: POP
// end ;
81242: LD_VAR 0 3
81246: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
81247: LD_INT 0
81249: PPUSH
81250: PPUSH
81251: PPUSH
// if not mc_bases or not skirmish then
81252: LD_EXP 44
81256: NOT
81257: PUSH
81258: LD_EXP 42
81262: NOT
81263: OR
81264: IFFALSE 81268
// exit ;
81266: GO 81467
// for i = 1 to mc_bases do
81268: LD_ADDR_VAR 0 5
81272: PUSH
81273: DOUBLE
81274: LD_INT 1
81276: DEC
81277: ST_TO_ADDR
81278: LD_EXP 44
81282: PUSH
81283: FOR_TO
81284: IFFALSE 81465
// if building in mc_bases [ i ] then
81286: LD_VAR 0 1
81290: PUSH
81291: LD_EXP 44
81295: PUSH
81296: LD_VAR 0 5
81300: ARRAY
81301: IN
81302: IFFALSE 81463
// begin tmp := mc_bases [ i ] diff building ;
81304: LD_ADDR_VAR 0 6
81308: PUSH
81309: LD_EXP 44
81313: PUSH
81314: LD_VAR 0 5
81318: ARRAY
81319: PUSH
81320: LD_VAR 0 1
81324: DIFF
81325: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
81326: LD_ADDR_EXP 44
81330: PUSH
81331: LD_EXP 44
81335: PPUSH
81336: LD_VAR 0 5
81340: PPUSH
81341: LD_VAR 0 6
81345: PPUSH
81346: CALL_OW 1
81350: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
81351: LD_VAR 0 1
81355: PUSH
81356: LD_EXP 52
81360: PUSH
81361: LD_VAR 0 5
81365: ARRAY
81366: IN
81367: IFFALSE 81406
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
81369: LD_ADDR_EXP 52
81373: PUSH
81374: LD_EXP 52
81378: PPUSH
81379: LD_VAR 0 5
81383: PPUSH
81384: LD_EXP 52
81388: PUSH
81389: LD_VAR 0 5
81393: ARRAY
81394: PUSH
81395: LD_VAR 0 1
81399: DIFF
81400: PPUSH
81401: CALL_OW 1
81405: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
81406: LD_VAR 0 1
81410: PUSH
81411: LD_EXP 53
81415: PUSH
81416: LD_VAR 0 5
81420: ARRAY
81421: IN
81422: IFFALSE 81461
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
81424: LD_ADDR_EXP 53
81428: PUSH
81429: LD_EXP 53
81433: PPUSH
81434: LD_VAR 0 5
81438: PPUSH
81439: LD_EXP 53
81443: PUSH
81444: LD_VAR 0 5
81448: ARRAY
81449: PUSH
81450: LD_VAR 0 1
81454: DIFF
81455: PPUSH
81456: CALL_OW 1
81460: ST_TO_ADDR
// break ;
81461: GO 81465
// end ;
81463: GO 81283
81465: POP
81466: POP
// end ;
81467: LD_VAR 0 4
81471: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
81472: LD_INT 0
81474: PPUSH
81475: PPUSH
81476: PPUSH
// if not mc_bases or not skirmish or not side in mc_sides then
81477: LD_EXP 44
81481: NOT
81482: PUSH
81483: LD_EXP 42
81487: NOT
81488: OR
81489: PUSH
81490: LD_VAR 0 3
81494: PUSH
81495: LD_EXP 70
81499: IN
81500: NOT
81501: OR
81502: IFFALSE 81506
// exit ;
81504: GO 81629
// for i = 1 to mc_vehicles do
81506: LD_ADDR_VAR 0 6
81510: PUSH
81511: DOUBLE
81512: LD_INT 1
81514: DEC
81515: ST_TO_ADDR
81516: LD_EXP 63
81520: PUSH
81521: FOR_TO
81522: IFFALSE 81627
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
81524: LD_VAR 0 2
81528: PUSH
81529: LD_EXP 63
81533: PUSH
81534: LD_VAR 0 6
81538: ARRAY
81539: IN
81540: PUSH
81541: LD_VAR 0 1
81545: PUSH
81546: LD_EXP 63
81550: PUSH
81551: LD_VAR 0 6
81555: ARRAY
81556: IN
81557: OR
81558: IFFALSE 81625
// begin tmp := mc_vehicles [ i ] diff old ;
81560: LD_ADDR_VAR 0 7
81564: PUSH
81565: LD_EXP 63
81569: PUSH
81570: LD_VAR 0 6
81574: ARRAY
81575: PUSH
81576: LD_VAR 0 2
81580: DIFF
81581: ST_TO_ADDR
// tmp := tmp diff new ;
81582: LD_ADDR_VAR 0 7
81586: PUSH
81587: LD_VAR 0 7
81591: PUSH
81592: LD_VAR 0 1
81596: DIFF
81597: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
81598: LD_ADDR_EXP 63
81602: PUSH
81603: LD_EXP 63
81607: PPUSH
81608: LD_VAR 0 6
81612: PPUSH
81613: LD_VAR 0 7
81617: PPUSH
81618: CALL_OW 1
81622: ST_TO_ADDR
// break ;
81623: GO 81627
// end ;
81625: GO 81521
81627: POP
81628: POP
// end ;
81629: LD_VAR 0 5
81633: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
81634: LD_INT 0
81636: PPUSH
81637: PPUSH
81638: PPUSH
81639: PPUSH
// if not mc_bases or not skirmish then
81640: LD_EXP 44
81644: NOT
81645: PUSH
81646: LD_EXP 42
81650: NOT
81651: OR
81652: IFFALSE 81656
// exit ;
81654: GO 82033
// side := GetSide ( vehicle ) ;
81656: LD_ADDR_VAR 0 5
81660: PUSH
81661: LD_VAR 0 1
81665: PPUSH
81666: CALL_OW 255
81670: ST_TO_ADDR
// for i = 1 to mc_bases do
81671: LD_ADDR_VAR 0 4
81675: PUSH
81676: DOUBLE
81677: LD_INT 1
81679: DEC
81680: ST_TO_ADDR
81681: LD_EXP 44
81685: PUSH
81686: FOR_TO
81687: IFFALSE 82031
// begin if factory in mc_bases [ i ] then
81689: LD_VAR 0 2
81693: PUSH
81694: LD_EXP 44
81698: PUSH
81699: LD_VAR 0 4
81703: ARRAY
81704: IN
81705: IFFALSE 82029
// begin if mc_defender [ i ] < mc_defender_limit [ i ] and not GetWeapon ( vehicle ) in [ ar_control_tower , ar_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , us_cargo_bay , ar_radar , ru_radar , us_radar , ru_bulldozer , us_bulldozer , ar_bio_bomb , ar_selfpropelled_bomb , us_hack , us_crane , ru_crane , ru_siberium_rocket , us_siberium_rocket ] then
81707: LD_EXP 66
81711: PUSH
81712: LD_VAR 0 4
81716: ARRAY
81717: PUSH
81718: LD_EXP 55
81722: PUSH
81723: LD_VAR 0 4
81727: ARRAY
81728: LESS
81729: PUSH
81730: LD_VAR 0 1
81734: PPUSH
81735: CALL_OW 264
81739: PUSH
81740: LD_INT 31
81742: PUSH
81743: LD_INT 32
81745: PUSH
81746: LD_INT 51
81748: PUSH
81749: LD_EXP 30
81753: PUSH
81754: LD_INT 12
81756: PUSH
81757: LD_INT 30
81759: PUSH
81760: LD_EXP 29
81764: PUSH
81765: LD_INT 11
81767: PUSH
81768: LD_INT 53
81770: PUSH
81771: LD_INT 14
81773: PUSH
81774: LD_EXP 33
81778: PUSH
81779: LD_INT 29
81781: PUSH
81782: LD_EXP 31
81786: PUSH
81787: LD_INT 13
81789: PUSH
81790: LD_INT 52
81792: PUSH
81793: LD_INT 48
81795: PUSH
81796: LD_INT 8
81798: PUSH
81799: EMPTY
81800: LIST
81801: LIST
81802: LIST
81803: LIST
81804: LIST
81805: LIST
81806: LIST
81807: LIST
81808: LIST
81809: LIST
81810: LIST
81811: LIST
81812: LIST
81813: LIST
81814: LIST
81815: LIST
81816: LIST
81817: IN
81818: NOT
81819: AND
81820: IFFALSE 81868
// mc_defender := ReplaceIn ( mc_defender , [ i , mc_defender [ i ] + 1 ] , vehicle ) else
81822: LD_ADDR_EXP 66
81826: PUSH
81827: LD_EXP 66
81831: PPUSH
81832: LD_VAR 0 4
81836: PUSH
81837: LD_EXP 66
81841: PUSH
81842: LD_VAR 0 4
81846: ARRAY
81847: PUSH
81848: LD_INT 1
81850: PLUS
81851: PUSH
81852: EMPTY
81853: LIST
81854: LIST
81855: PPUSH
81856: LD_VAR 0 1
81860: PPUSH
81861: CALL 24301 0 3
81865: ST_TO_ADDR
81866: GO 81912
// mc_vehicles := ReplaceIn ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
81868: LD_ADDR_EXP 63
81872: PUSH
81873: LD_EXP 63
81877: PPUSH
81878: LD_VAR 0 4
81882: PUSH
81883: LD_EXP 63
81887: PUSH
81888: LD_VAR 0 4
81892: ARRAY
81893: PUSH
81894: LD_INT 1
81896: PLUS
81897: PUSH
81898: EMPTY
81899: LIST
81900: LIST
81901: PPUSH
81902: LD_VAR 0 1
81906: PPUSH
81907: CALL 24301 0 3
81911: ST_TO_ADDR
// if GetControl ( vehicle ) = control_remote then
81912: LD_VAR 0 1
81916: PPUSH
81917: CALL_OW 263
81921: PUSH
81922: LD_INT 2
81924: EQUAL
81925: IFFALSE 81945
// begin repeat wait ( 0 0$1 ) ;
81927: LD_INT 35
81929: PPUSH
81930: CALL_OW 67
// until IsControledBy ( vehicle ) ;
81934: LD_VAR 0 1
81938: PPUSH
81939: CALL_OW 312
81943: IFFALSE 81927
// end ; ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
81945: LD_VAR 0 1
81949: PPUSH
81950: LD_EXP 68
81954: PUSH
81955: LD_VAR 0 4
81959: ARRAY
81960: PPUSH
81961: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
81965: LD_VAR 0 1
81969: PPUSH
81970: CALL_OW 263
81974: PUSH
81975: LD_INT 1
81977: NONEQUAL
81978: IFFALSE 81982
// break ;
81980: GO 82031
// repeat wait ( 0 0$1 ) ;
81982: LD_INT 35
81984: PPUSH
81985: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
81989: LD_VAR 0 1
81993: PPUSH
81994: LD_EXP 68
81998: PUSH
81999: LD_VAR 0 4
82003: ARRAY
82004: PPUSH
82005: CALL_OW 308
82009: IFFALSE 81982
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
82011: LD_VAR 0 1
82015: PPUSH
82016: CALL_OW 311
82020: PPUSH
82021: CALL_OW 121
// exit ;
82025: POP
82026: POP
82027: GO 82033
// end ; end ;
82029: GO 81686
82031: POP
82032: POP
// end ;
82033: LD_VAR 0 3
82037: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
82038: LD_INT 0
82040: PPUSH
82041: PPUSH
82042: PPUSH
82043: PPUSH
// if not mc_bases or not skirmish then
82044: LD_EXP 44
82048: NOT
82049: PUSH
82050: LD_EXP 42
82054: NOT
82055: OR
82056: IFFALSE 82060
// exit ;
82058: GO 82413
// repeat wait ( 0 0$1 ) ;
82060: LD_INT 35
82062: PPUSH
82063: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
82067: LD_VAR 0 2
82071: PPUSH
82072: LD_VAR 0 3
82076: PPUSH
82077: CALL_OW 284
82081: IFFALSE 82060
// if GetResourceTypeXY ( x , y ) = mat_artefact then
82083: LD_VAR 0 2
82087: PPUSH
82088: LD_VAR 0 3
82092: PPUSH
82093: CALL_OW 283
82097: PUSH
82098: LD_INT 4
82100: EQUAL
82101: IFFALSE 82105
// exit ;
82103: GO 82413
// for i = 1 to mc_bases do
82105: LD_ADDR_VAR 0 7
82109: PUSH
82110: DOUBLE
82111: LD_INT 1
82113: DEC
82114: ST_TO_ADDR
82115: LD_EXP 44
82119: PUSH
82120: FOR_TO
82121: IFFALSE 82411
// begin if mc_crates_area [ i ] then
82123: LD_EXP 62
82127: PUSH
82128: LD_VAR 0 7
82132: ARRAY
82133: IFFALSE 82244
// for j in mc_crates_area [ i ] do
82135: LD_ADDR_VAR 0 8
82139: PUSH
82140: LD_EXP 62
82144: PUSH
82145: LD_VAR 0 7
82149: ARRAY
82150: PUSH
82151: FOR_IN
82152: IFFALSE 82242
// if InArea ( x , y , j ) then
82154: LD_VAR 0 2
82158: PPUSH
82159: LD_VAR 0 3
82163: PPUSH
82164: LD_VAR 0 8
82168: PPUSH
82169: CALL_OW 309
82173: IFFALSE 82240
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
82175: LD_ADDR_EXP 60
82179: PUSH
82180: LD_EXP 60
82184: PPUSH
82185: LD_VAR 0 7
82189: PUSH
82190: LD_EXP 60
82194: PUSH
82195: LD_VAR 0 7
82199: ARRAY
82200: PUSH
82201: LD_INT 1
82203: PLUS
82204: PUSH
82205: EMPTY
82206: LIST
82207: LIST
82208: PPUSH
82209: LD_VAR 0 4
82213: PUSH
82214: LD_VAR 0 2
82218: PUSH
82219: LD_VAR 0 3
82223: PUSH
82224: EMPTY
82225: LIST
82226: LIST
82227: LIST
82228: PPUSH
82229: CALL 24301 0 3
82233: ST_TO_ADDR
// exit ;
82234: POP
82235: POP
82236: POP
82237: POP
82238: GO 82413
// end ;
82240: GO 82151
82242: POP
82243: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
82244: LD_ADDR_VAR 0 9
82248: PUSH
82249: LD_EXP 44
82253: PUSH
82254: LD_VAR 0 7
82258: ARRAY
82259: PPUSH
82260: LD_INT 2
82262: PUSH
82263: LD_INT 30
82265: PUSH
82266: LD_INT 0
82268: PUSH
82269: EMPTY
82270: LIST
82271: LIST
82272: PUSH
82273: LD_INT 30
82275: PUSH
82276: LD_INT 1
82278: PUSH
82279: EMPTY
82280: LIST
82281: LIST
82282: PUSH
82283: EMPTY
82284: LIST
82285: LIST
82286: LIST
82287: PPUSH
82288: CALL_OW 72
82292: ST_TO_ADDR
// if not depot then
82293: LD_VAR 0 9
82297: NOT
82298: IFFALSE 82302
// continue ;
82300: GO 82120
// for j in depot do
82302: LD_ADDR_VAR 0 8
82306: PUSH
82307: LD_VAR 0 9
82311: PUSH
82312: FOR_IN
82313: IFFALSE 82407
// if GetDistUnitXY ( j , x , y ) < 30 then
82315: LD_VAR 0 8
82319: PPUSH
82320: LD_VAR 0 2
82324: PPUSH
82325: LD_VAR 0 3
82329: PPUSH
82330: CALL_OW 297
82334: PUSH
82335: LD_INT 30
82337: LESS
82338: IFFALSE 82405
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
82340: LD_ADDR_EXP 60
82344: PUSH
82345: LD_EXP 60
82349: PPUSH
82350: LD_VAR 0 7
82354: PUSH
82355: LD_EXP 60
82359: PUSH
82360: LD_VAR 0 7
82364: ARRAY
82365: PUSH
82366: LD_INT 1
82368: PLUS
82369: PUSH
82370: EMPTY
82371: LIST
82372: LIST
82373: PPUSH
82374: LD_VAR 0 4
82378: PUSH
82379: LD_VAR 0 2
82383: PUSH
82384: LD_VAR 0 3
82388: PUSH
82389: EMPTY
82390: LIST
82391: LIST
82392: LIST
82393: PPUSH
82394: CALL 24301 0 3
82398: ST_TO_ADDR
// exit ;
82399: POP
82400: POP
82401: POP
82402: POP
82403: GO 82413
// end ;
82405: GO 82312
82407: POP
82408: POP
// end ;
82409: GO 82120
82411: POP
82412: POP
// end ;
82413: LD_VAR 0 6
82417: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
82418: LD_INT 0
82420: PPUSH
82421: PPUSH
82422: PPUSH
82423: PPUSH
// if not mc_bases or not skirmish then
82424: LD_EXP 44
82428: NOT
82429: PUSH
82430: LD_EXP 42
82434: NOT
82435: OR
82436: IFFALSE 82440
// exit ;
82438: GO 82717
// side := GetSide ( lab ) ;
82440: LD_ADDR_VAR 0 4
82444: PUSH
82445: LD_VAR 0 2
82449: PPUSH
82450: CALL_OW 255
82454: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
82455: LD_VAR 0 4
82459: PUSH
82460: LD_EXP 70
82464: IN
82465: NOT
82466: PUSH
82467: LD_EXP 71
82471: NOT
82472: OR
82473: PUSH
82474: LD_EXP 44
82478: NOT
82479: OR
82480: IFFALSE 82484
// exit ;
82482: GO 82717
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
82484: LD_ADDR_EXP 71
82488: PUSH
82489: LD_EXP 71
82493: PPUSH
82494: LD_VAR 0 4
82498: PPUSH
82499: LD_EXP 71
82503: PUSH
82504: LD_VAR 0 4
82508: ARRAY
82509: PUSH
82510: LD_VAR 0 1
82514: DIFF
82515: PPUSH
82516: CALL_OW 1
82520: ST_TO_ADDR
// for i = 1 to mc_bases do
82521: LD_ADDR_VAR 0 5
82525: PUSH
82526: DOUBLE
82527: LD_INT 1
82529: DEC
82530: ST_TO_ADDR
82531: LD_EXP 44
82535: PUSH
82536: FOR_TO
82537: IFFALSE 82715
// begin if lab in mc_bases [ i ] then
82539: LD_VAR 0 2
82543: PUSH
82544: LD_EXP 44
82548: PUSH
82549: LD_VAR 0 5
82553: ARRAY
82554: IN
82555: IFFALSE 82713
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
82557: LD_VAR 0 1
82561: PUSH
82562: LD_INT 11
82564: PUSH
82565: LD_INT 4
82567: PUSH
82568: LD_INT 3
82570: PUSH
82571: LD_INT 2
82573: PUSH
82574: EMPTY
82575: LIST
82576: LIST
82577: LIST
82578: LIST
82579: IN
82580: PUSH
82581: LD_EXP 74
82585: PUSH
82586: LD_VAR 0 5
82590: ARRAY
82591: AND
82592: IFFALSE 82713
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
82594: LD_ADDR_VAR 0 6
82598: PUSH
82599: LD_EXP 74
82603: PUSH
82604: LD_VAR 0 5
82608: ARRAY
82609: PUSH
82610: LD_INT 1
82612: ARRAY
82613: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
82614: LD_ADDR_EXP 74
82618: PUSH
82619: LD_EXP 74
82623: PPUSH
82624: LD_VAR 0 5
82628: PPUSH
82629: EMPTY
82630: PPUSH
82631: CALL_OW 1
82635: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
82636: LD_VAR 0 6
82640: PPUSH
82641: LD_INT 0
82643: PPUSH
82644: CALL_OW 109
// ComExitBuilding ( tmp ) ;
82648: LD_VAR 0 6
82652: PPUSH
82653: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
82657: LD_ADDR_EXP 73
82661: PUSH
82662: LD_EXP 73
82666: PPUSH
82667: LD_VAR 0 5
82671: PPUSH
82672: LD_EXP 73
82676: PUSH
82677: LD_VAR 0 5
82681: ARRAY
82682: PPUSH
82683: LD_INT 1
82685: PPUSH
82686: LD_VAR 0 6
82690: PPUSH
82691: CALL_OW 2
82695: PPUSH
82696: CALL_OW 1
82700: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
82701: LD_VAR 0 5
82705: PPUSH
82706: LD_INT 112
82708: PPUSH
82709: CALL 59713 0 2
// end ; end ; end ;
82713: GO 82536
82715: POP
82716: POP
// end ;
82717: LD_VAR 0 3
82721: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
82722: LD_INT 0
82724: PPUSH
82725: PPUSH
82726: PPUSH
82727: PPUSH
82728: PPUSH
82729: PPUSH
82730: PPUSH
82731: PPUSH
// if not mc_bases or not skirmish then
82732: LD_EXP 44
82736: NOT
82737: PUSH
82738: LD_EXP 42
82742: NOT
82743: OR
82744: IFFALSE 82748
// exit ;
82746: GO 84119
// for i = 1 to mc_bases do
82748: LD_ADDR_VAR 0 3
82752: PUSH
82753: DOUBLE
82754: LD_INT 1
82756: DEC
82757: ST_TO_ADDR
82758: LD_EXP 44
82762: PUSH
82763: FOR_TO
82764: IFFALSE 84117
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_defender [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
82766: LD_VAR 0 1
82770: PUSH
82771: LD_EXP 44
82775: PUSH
82776: LD_VAR 0 3
82780: ARRAY
82781: IN
82782: PUSH
82783: LD_VAR 0 1
82787: PUSH
82788: LD_EXP 51
82792: PUSH
82793: LD_VAR 0 3
82797: ARRAY
82798: IN
82799: OR
82800: PUSH
82801: LD_VAR 0 1
82805: PUSH
82806: LD_EXP 66
82810: PUSH
82811: LD_VAR 0 3
82815: ARRAY
82816: IN
82817: OR
82818: PUSH
82819: LD_VAR 0 1
82823: PUSH
82824: LD_EXP 63
82828: PUSH
82829: LD_VAR 0 3
82833: ARRAY
82834: IN
82835: OR
82836: PUSH
82837: LD_VAR 0 1
82841: PUSH
82842: LD_EXP 73
82846: PUSH
82847: LD_VAR 0 3
82851: ARRAY
82852: IN
82853: OR
82854: PUSH
82855: LD_VAR 0 1
82859: PUSH
82860: LD_EXP 74
82864: PUSH
82865: LD_VAR 0 3
82869: ARRAY
82870: IN
82871: OR
82872: IFFALSE 84115
// begin if un in mc_ape [ i ] then
82874: LD_VAR 0 1
82878: PUSH
82879: LD_EXP 73
82883: PUSH
82884: LD_VAR 0 3
82888: ARRAY
82889: IN
82890: IFFALSE 82929
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
82892: LD_ADDR_EXP 73
82896: PUSH
82897: LD_EXP 73
82901: PPUSH
82902: LD_VAR 0 3
82906: PPUSH
82907: LD_EXP 73
82911: PUSH
82912: LD_VAR 0 3
82916: ARRAY
82917: PUSH
82918: LD_VAR 0 1
82922: DIFF
82923: PPUSH
82924: CALL_OW 1
82928: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
82929: LD_VAR 0 1
82933: PUSH
82934: LD_EXP 74
82938: PUSH
82939: LD_VAR 0 3
82943: ARRAY
82944: IN
82945: IFFALSE 82969
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
82947: LD_ADDR_EXP 74
82951: PUSH
82952: LD_EXP 74
82956: PPUSH
82957: LD_VAR 0 3
82961: PPUSH
82962: EMPTY
82963: PPUSH
82964: CALL_OW 1
82968: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and ( GetTag ( un ) = 20 or un in mc_defender [ i ] or GetWeapon ( un ) in [ us_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , ar_cargo_bay , us_crane , ru_crane , ar_control_tower ] ) then
82969: LD_VAR 0 1
82973: PPUSH
82974: CALL_OW 247
82978: PUSH
82979: LD_INT 2
82981: EQUAL
82982: PUSH
82983: LD_VAR 0 1
82987: PPUSH
82988: CALL_OW 110
82992: PUSH
82993: LD_INT 20
82995: EQUAL
82996: PUSH
82997: LD_VAR 0 1
83001: PUSH
83002: LD_EXP 66
83006: PUSH
83007: LD_VAR 0 3
83011: ARRAY
83012: IN
83013: OR
83014: PUSH
83015: LD_VAR 0 1
83019: PPUSH
83020: CALL_OW 264
83024: PUSH
83025: LD_INT 12
83027: PUSH
83028: LD_INT 51
83030: PUSH
83031: LD_EXP 30
83035: PUSH
83036: LD_INT 32
83038: PUSH
83039: LD_INT 13
83041: PUSH
83042: LD_INT 52
83044: PUSH
83045: LD_INT 31
83047: PUSH
83048: EMPTY
83049: LIST
83050: LIST
83051: LIST
83052: LIST
83053: LIST
83054: LIST
83055: LIST
83056: IN
83057: OR
83058: AND
83059: IFFALSE 83367
// begin if un in mc_defender [ i ] then
83061: LD_VAR 0 1
83065: PUSH
83066: LD_EXP 66
83070: PUSH
83071: LD_VAR 0 3
83075: ARRAY
83076: IN
83077: IFFALSE 83116
// mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
83079: LD_ADDR_EXP 66
83083: PUSH
83084: LD_EXP 66
83088: PPUSH
83089: LD_VAR 0 3
83093: PPUSH
83094: LD_EXP 66
83098: PUSH
83099: LD_VAR 0 3
83103: ARRAY
83104: PUSH
83105: LD_VAR 0 1
83109: DIFF
83110: PPUSH
83111: CALL_OW 1
83115: ST_TO_ADDR
// fac := MC_GetBuildings ( i , b_factory ) ;
83116: LD_ADDR_VAR 0 8
83120: PUSH
83121: LD_VAR 0 3
83125: PPUSH
83126: LD_INT 3
83128: PPUSH
83129: CALL 79785 0 2
83133: ST_TO_ADDR
// if fac then
83134: LD_VAR 0 8
83138: IFFALSE 83367
// begin for j in fac do
83140: LD_ADDR_VAR 0 4
83144: PUSH
83145: LD_VAR 0 8
83149: PUSH
83150: FOR_IN
83151: IFFALSE 83365
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
83153: LD_ADDR_VAR 0 9
83157: PUSH
83158: LD_VAR 0 8
83162: PPUSH
83163: LD_VAR 0 1
83167: PPUSH
83168: CALL_OW 265
83172: PPUSH
83173: LD_VAR 0 1
83177: PPUSH
83178: CALL_OW 262
83182: PPUSH
83183: LD_VAR 0 1
83187: PPUSH
83188: CALL_OW 263
83192: PPUSH
83193: LD_VAR 0 1
83197: PPUSH
83198: CALL_OW 264
83202: PPUSH
83203: CALL 21833 0 5
83207: ST_TO_ADDR
// if components then
83208: LD_VAR 0 9
83212: IFFALSE 83363
// begin if GetWeapon ( un ) = ar_control_tower then
83214: LD_VAR 0 1
83218: PPUSH
83219: CALL_OW 264
83223: PUSH
83224: LD_INT 31
83226: EQUAL
83227: IFFALSE 83344
// begin SetTag ( IsDrivenBy ( un ) , 0 ) ;
83229: LD_VAR 0 1
83233: PPUSH
83234: CALL_OW 311
83238: PPUSH
83239: LD_INT 0
83241: PPUSH
83242: CALL_OW 109
// mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff IsDrivenBy ( un ) ) ;
83246: LD_ADDR_EXP 84
83250: PUSH
83251: LD_EXP 84
83255: PPUSH
83256: LD_VAR 0 3
83260: PPUSH
83261: LD_EXP 84
83265: PUSH
83266: LD_VAR 0 3
83270: ARRAY
83271: PUSH
83272: LD_VAR 0 1
83276: PPUSH
83277: CALL_OW 311
83281: DIFF
83282: PPUSH
83283: CALL_OW 1
83287: ST_TO_ADDR
// tmp := Insert ( mc_produce [ i ] , 1 , components ) ;
83288: LD_ADDR_VAR 0 7
83292: PUSH
83293: LD_EXP 65
83297: PUSH
83298: LD_VAR 0 3
83302: ARRAY
83303: PPUSH
83304: LD_INT 1
83306: PPUSH
83307: LD_VAR 0 9
83311: PPUSH
83312: CALL_OW 2
83316: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
83317: LD_ADDR_EXP 65
83321: PUSH
83322: LD_EXP 65
83326: PPUSH
83327: LD_VAR 0 3
83331: PPUSH
83332: LD_VAR 0 7
83336: PPUSH
83337: CALL_OW 1
83341: ST_TO_ADDR
// end else
83342: GO 83361
// MC_InsertProduceList ( i , [ components ] ) ;
83344: LD_VAR 0 3
83348: PPUSH
83349: LD_VAR 0 9
83353: PUSH
83354: EMPTY
83355: LIST
83356: PPUSH
83357: CALL 79330 0 2
// break ;
83361: GO 83365
// end ; end ;
83363: GO 83150
83365: POP
83366: POP
// end ; end ; if GetType ( un ) = unit_building then
83367: LD_VAR 0 1
83371: PPUSH
83372: CALL_OW 247
83376: PUSH
83377: LD_INT 3
83379: EQUAL
83380: IFFALSE 83783
// begin btype := GetBType ( un ) ;
83382: LD_ADDR_VAR 0 5
83386: PUSH
83387: LD_VAR 0 1
83391: PPUSH
83392: CALL_OW 266
83396: ST_TO_ADDR
// if btype in [ b_oil_mine , b_siberite_mine ] then
83397: LD_VAR 0 5
83401: PUSH
83402: LD_INT 29
83404: PUSH
83405: LD_INT 30
83407: PUSH
83408: EMPTY
83409: LIST
83410: LIST
83411: IN
83412: IFFALSE 83485
// begin if not GetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) then
83414: LD_VAR 0 1
83418: PPUSH
83419: CALL_OW 250
83423: PPUSH
83424: LD_VAR 0 1
83428: PPUSH
83429: CALL_OW 251
83433: PPUSH
83434: LD_VAR 0 1
83438: PPUSH
83439: CALL_OW 255
83443: PPUSH
83444: CALL_OW 440
83448: NOT
83449: IFFALSE 83485
// SetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) ;
83451: LD_VAR 0 1
83455: PPUSH
83456: CALL_OW 250
83460: PPUSH
83461: LD_VAR 0 1
83465: PPUSH
83466: CALL_OW 251
83470: PPUSH
83471: LD_VAR 0 1
83475: PPUSH
83476: CALL_OW 255
83480: PPUSH
83481: CALL_OW 441
// end ; if btype = b_warehouse then
83485: LD_VAR 0 5
83489: PUSH
83490: LD_INT 1
83492: EQUAL
83493: IFFALSE 83511
// begin btype := b_depot ;
83495: LD_ADDR_VAR 0 5
83499: PUSH
83500: LD_INT 0
83502: ST_TO_ADDR
// pos := 1 ;
83503: LD_ADDR_VAR 0 6
83507: PUSH
83508: LD_INT 1
83510: ST_TO_ADDR
// end ; if btype = b_factory then
83511: LD_VAR 0 5
83515: PUSH
83516: LD_INT 3
83518: EQUAL
83519: IFFALSE 83537
// begin btype := b_workshop ;
83521: LD_ADDR_VAR 0 5
83525: PUSH
83526: LD_INT 2
83528: ST_TO_ADDR
// pos := 1 ;
83529: LD_ADDR_VAR 0 6
83533: PUSH
83534: LD_INT 1
83536: ST_TO_ADDR
// end ; if btype = b_barracks then
83537: LD_VAR 0 5
83541: PUSH
83542: LD_INT 5
83544: EQUAL
83545: IFFALSE 83555
// btype := b_armoury ;
83547: LD_ADDR_VAR 0 5
83551: PUSH
83552: LD_INT 4
83554: ST_TO_ADDR
// if btype in [ b_lab_half , b_lab_full ] then
83555: LD_VAR 0 5
83559: PUSH
83560: LD_INT 7
83562: PUSH
83563: LD_INT 8
83565: PUSH
83566: EMPTY
83567: LIST
83568: LIST
83569: IN
83570: IFFALSE 83580
// btype := b_lab ;
83572: LD_ADDR_VAR 0 5
83576: PUSH
83577: LD_INT 6
83579: ST_TO_ADDR
// mc_build_list := ReplaceIn ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
83580: LD_ADDR_EXP 49
83584: PUSH
83585: LD_EXP 49
83589: PPUSH
83590: LD_VAR 0 3
83594: PUSH
83595: LD_EXP 49
83599: PUSH
83600: LD_VAR 0 3
83604: ARRAY
83605: PUSH
83606: LD_INT 1
83608: PLUS
83609: PUSH
83610: EMPTY
83611: LIST
83612: LIST
83613: PPUSH
83614: LD_VAR 0 5
83618: PUSH
83619: LD_VAR 0 1
83623: PPUSH
83624: CALL_OW 250
83628: PUSH
83629: LD_VAR 0 1
83633: PPUSH
83634: CALL_OW 251
83638: PUSH
83639: LD_VAR 0 1
83643: PPUSH
83644: CALL_OW 254
83648: PUSH
83649: EMPTY
83650: LIST
83651: LIST
83652: LIST
83653: LIST
83654: PPUSH
83655: CALL 24301 0 3
83659: ST_TO_ADDR
// if pos = 1 then
83660: LD_VAR 0 6
83664: PUSH
83665: LD_INT 1
83667: EQUAL
83668: IFFALSE 83783
// begin tmp := mc_build_list [ i ] ;
83670: LD_ADDR_VAR 0 7
83674: PUSH
83675: LD_EXP 49
83679: PUSH
83680: LD_VAR 0 3
83684: ARRAY
83685: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
83686: LD_VAR 0 7
83690: PPUSH
83691: LD_INT 2
83693: PUSH
83694: LD_INT 30
83696: PUSH
83697: LD_INT 0
83699: PUSH
83700: EMPTY
83701: LIST
83702: LIST
83703: PUSH
83704: LD_INT 30
83706: PUSH
83707: LD_INT 1
83709: PUSH
83710: EMPTY
83711: LIST
83712: LIST
83713: PUSH
83714: EMPTY
83715: LIST
83716: LIST
83717: LIST
83718: PPUSH
83719: CALL_OW 72
83723: IFFALSE 83733
// pos := 2 ;
83725: LD_ADDR_VAR 0 6
83729: PUSH
83730: LD_INT 2
83732: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
83733: LD_ADDR_VAR 0 7
83737: PUSH
83738: LD_VAR 0 7
83742: PPUSH
83743: LD_VAR 0 6
83747: PPUSH
83748: LD_VAR 0 7
83752: PPUSH
83753: CALL 24627 0 3
83757: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
83758: LD_ADDR_EXP 49
83762: PUSH
83763: LD_EXP 49
83767: PPUSH
83768: LD_VAR 0 3
83772: PPUSH
83773: LD_VAR 0 7
83777: PPUSH
83778: CALL_OW 1
83782: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
83783: LD_VAR 0 1
83787: PUSH
83788: LD_EXP 44
83792: PUSH
83793: LD_VAR 0 3
83797: ARRAY
83798: IN
83799: IFFALSE 83838
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
83801: LD_ADDR_EXP 44
83805: PUSH
83806: LD_EXP 44
83810: PPUSH
83811: LD_VAR 0 3
83815: PPUSH
83816: LD_EXP 44
83820: PUSH
83821: LD_VAR 0 3
83825: ARRAY
83826: PUSH
83827: LD_VAR 0 1
83831: DIFF
83832: PPUSH
83833: CALL_OW 1
83837: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
83838: LD_VAR 0 1
83842: PUSH
83843: LD_EXP 51
83847: PUSH
83848: LD_VAR 0 3
83852: ARRAY
83853: IN
83854: IFFALSE 83893
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
83856: LD_ADDR_EXP 51
83860: PUSH
83861: LD_EXP 51
83865: PPUSH
83866: LD_VAR 0 3
83870: PPUSH
83871: LD_EXP 51
83875: PUSH
83876: LD_VAR 0 3
83880: ARRAY
83881: PUSH
83882: LD_VAR 0 1
83886: DIFF
83887: PPUSH
83888: CALL_OW 1
83892: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
83893: LD_VAR 0 1
83897: PUSH
83898: LD_EXP 63
83902: PUSH
83903: LD_VAR 0 3
83907: ARRAY
83908: IN
83909: IFFALSE 83948
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
83911: LD_ADDR_EXP 63
83915: PUSH
83916: LD_EXP 63
83920: PPUSH
83921: LD_VAR 0 3
83925: PPUSH
83926: LD_EXP 63
83930: PUSH
83931: LD_VAR 0 3
83935: ARRAY
83936: PUSH
83937: LD_VAR 0 1
83941: DIFF
83942: PPUSH
83943: CALL_OW 1
83947: ST_TO_ADDR
// end ; if un in mc_defender [ i ] then
83948: LD_VAR 0 1
83952: PUSH
83953: LD_EXP 66
83957: PUSH
83958: LD_VAR 0 3
83962: ARRAY
83963: IN
83964: IFFALSE 84003
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
83966: LD_ADDR_EXP 66
83970: PUSH
83971: LD_EXP 66
83975: PPUSH
83976: LD_VAR 0 3
83980: PPUSH
83981: LD_EXP 66
83985: PUSH
83986: LD_VAR 0 3
83990: ARRAY
83991: PUSH
83992: LD_VAR 0 1
83996: DIFF
83997: PPUSH
83998: CALL_OW 1
84002: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
84003: LD_VAR 0 1
84007: PUSH
84008: LD_EXP 53
84012: PUSH
84013: LD_VAR 0 3
84017: ARRAY
84018: IN
84019: IFFALSE 84058
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
84021: LD_ADDR_EXP 53
84025: PUSH
84026: LD_EXP 53
84030: PPUSH
84031: LD_VAR 0 3
84035: PPUSH
84036: LD_EXP 53
84040: PUSH
84041: LD_VAR 0 3
84045: ARRAY
84046: PUSH
84047: LD_VAR 0 1
84051: DIFF
84052: PPUSH
84053: CALL_OW 1
84057: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
84058: LD_VAR 0 1
84062: PUSH
84063: LD_EXP 52
84067: PUSH
84068: LD_VAR 0 3
84072: ARRAY
84073: IN
84074: IFFALSE 84113
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
84076: LD_ADDR_EXP 52
84080: PUSH
84081: LD_EXP 52
84085: PPUSH
84086: LD_VAR 0 3
84090: PPUSH
84091: LD_EXP 52
84095: PUSH
84096: LD_VAR 0 3
84100: ARRAY
84101: PUSH
84102: LD_VAR 0 1
84106: DIFF
84107: PPUSH
84108: CALL_OW 1
84112: ST_TO_ADDR
// end ; break ;
84113: GO 84117
// end ;
84115: GO 82763
84117: POP
84118: POP
// end ;
84119: LD_VAR 0 2
84123: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
84124: LD_INT 0
84126: PPUSH
84127: PPUSH
84128: PPUSH
// if not mc_bases or not skirmish then
84129: LD_EXP 44
84133: NOT
84134: PUSH
84135: LD_EXP 42
84139: NOT
84140: OR
84141: IFFALSE 84145
// exit ;
84143: GO 84360
// for i = 1 to mc_bases do
84145: LD_ADDR_VAR 0 3
84149: PUSH
84150: DOUBLE
84151: LD_INT 1
84153: DEC
84154: ST_TO_ADDR
84155: LD_EXP 44
84159: PUSH
84160: FOR_TO
84161: IFFALSE 84358
// begin if building in mc_construct_list [ i ] then
84163: LD_VAR 0 1
84167: PUSH
84168: LD_EXP 51
84172: PUSH
84173: LD_VAR 0 3
84177: ARRAY
84178: IN
84179: IFFALSE 84356
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
84181: LD_ADDR_EXP 51
84185: PUSH
84186: LD_EXP 51
84190: PPUSH
84191: LD_VAR 0 3
84195: PPUSH
84196: LD_EXP 51
84200: PUSH
84201: LD_VAR 0 3
84205: ARRAY
84206: PUSH
84207: LD_VAR 0 1
84211: DIFF
84212: PPUSH
84213: CALL_OW 1
84217: ST_TO_ADDR
// if building in mc_lab [ i ] then
84218: LD_VAR 0 1
84222: PUSH
84223: LD_EXP 77
84227: PUSH
84228: LD_VAR 0 3
84232: ARRAY
84233: IN
84234: IFFALSE 84289
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
84236: LD_ADDR_EXP 78
84240: PUSH
84241: LD_EXP 78
84245: PPUSH
84246: LD_VAR 0 3
84250: PPUSH
84251: LD_EXP 78
84255: PUSH
84256: LD_VAR 0 3
84260: ARRAY
84261: PPUSH
84262: LD_INT 1
84264: PPUSH
84265: LD_EXP 78
84269: PUSH
84270: LD_VAR 0 3
84274: ARRAY
84275: PPUSH
84276: LD_INT 0
84278: PPUSH
84279: CALL 23719 0 4
84283: PPUSH
84284: CALL_OW 1
84288: ST_TO_ADDR
// if not building in mc_bases [ i ] then
84289: LD_VAR 0 1
84293: PUSH
84294: LD_EXP 44
84298: PUSH
84299: LD_VAR 0 3
84303: ARRAY
84304: IN
84305: NOT
84306: IFFALSE 84352
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
84308: LD_ADDR_EXP 44
84312: PUSH
84313: LD_EXP 44
84317: PPUSH
84318: LD_VAR 0 3
84322: PUSH
84323: LD_EXP 44
84327: PUSH
84328: LD_VAR 0 3
84332: ARRAY
84333: PUSH
84334: LD_INT 1
84336: PLUS
84337: PUSH
84338: EMPTY
84339: LIST
84340: LIST
84341: PPUSH
84342: LD_VAR 0 1
84346: PPUSH
84347: CALL 24301 0 3
84351: ST_TO_ADDR
// exit ;
84352: POP
84353: POP
84354: GO 84360
// end ; end ;
84356: GO 84160
84358: POP
84359: POP
// end ;
84360: LD_VAR 0 2
84364: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
84365: LD_INT 0
84367: PPUSH
84368: PPUSH
84369: PPUSH
84370: PPUSH
84371: PPUSH
84372: PPUSH
84373: PPUSH
// if not mc_bases or not skirmish then
84374: LD_EXP 44
84378: NOT
84379: PUSH
84380: LD_EXP 42
84384: NOT
84385: OR
84386: IFFALSE 84390
// exit ;
84388: GO 85051
// for i = 1 to mc_bases do
84390: LD_ADDR_VAR 0 3
84394: PUSH
84395: DOUBLE
84396: LD_INT 1
84398: DEC
84399: ST_TO_ADDR
84400: LD_EXP 44
84404: PUSH
84405: FOR_TO
84406: IFFALSE 85049
// begin if building in mc_construct_list [ i ] then
84408: LD_VAR 0 1
84412: PUSH
84413: LD_EXP 51
84417: PUSH
84418: LD_VAR 0 3
84422: ARRAY
84423: IN
84424: IFFALSE 85047
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
84426: LD_ADDR_EXP 51
84430: PUSH
84431: LD_EXP 51
84435: PPUSH
84436: LD_VAR 0 3
84440: PPUSH
84441: LD_EXP 51
84445: PUSH
84446: LD_VAR 0 3
84450: ARRAY
84451: PUSH
84452: LD_VAR 0 1
84456: DIFF
84457: PPUSH
84458: CALL_OW 1
84462: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
84463: LD_ADDR_EXP 44
84467: PUSH
84468: LD_EXP 44
84472: PPUSH
84473: LD_VAR 0 3
84477: PUSH
84478: LD_EXP 44
84482: PUSH
84483: LD_VAR 0 3
84487: ARRAY
84488: PUSH
84489: LD_INT 1
84491: PLUS
84492: PUSH
84493: EMPTY
84494: LIST
84495: LIST
84496: PPUSH
84497: LD_VAR 0 1
84501: PPUSH
84502: CALL 24301 0 3
84506: ST_TO_ADDR
// btype := GetBType ( building ) ;
84507: LD_ADDR_VAR 0 5
84511: PUSH
84512: LD_VAR 0 1
84516: PPUSH
84517: CALL_OW 266
84521: ST_TO_ADDR
// side := GetSide ( building ) ;
84522: LD_ADDR_VAR 0 8
84526: PUSH
84527: LD_VAR 0 1
84531: PPUSH
84532: CALL_OW 255
84536: ST_TO_ADDR
// if btype = b_lab then
84537: LD_VAR 0 5
84541: PUSH
84542: LD_INT 6
84544: EQUAL
84545: IFFALSE 84595
// begin mc_lab := ReplaceIn ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
84547: LD_ADDR_EXP 77
84551: PUSH
84552: LD_EXP 77
84556: PPUSH
84557: LD_VAR 0 3
84561: PUSH
84562: LD_EXP 77
84566: PUSH
84567: LD_VAR 0 3
84571: ARRAY
84572: PUSH
84573: LD_INT 1
84575: PLUS
84576: PUSH
84577: EMPTY
84578: LIST
84579: LIST
84580: PPUSH
84581: LD_VAR 0 1
84585: PPUSH
84586: CALL 24301 0 3
84590: ST_TO_ADDR
// exit ;
84591: POP
84592: POP
84593: GO 85051
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
84595: LD_VAR 0 5
84599: PUSH
84600: LD_INT 0
84602: PUSH
84603: LD_INT 2
84605: PUSH
84606: LD_INT 4
84608: PUSH
84609: EMPTY
84610: LIST
84611: LIST
84612: LIST
84613: IN
84614: IFFALSE 84738
// begin if btype = b_armoury then
84616: LD_VAR 0 5
84620: PUSH
84621: LD_INT 4
84623: EQUAL
84624: IFFALSE 84634
// btype := b_barracks ;
84626: LD_ADDR_VAR 0 5
84630: PUSH
84631: LD_INT 5
84633: ST_TO_ADDR
// if btype = b_depot then
84634: LD_VAR 0 5
84638: PUSH
84639: LD_INT 0
84641: EQUAL
84642: IFFALSE 84652
// btype := b_warehouse ;
84644: LD_ADDR_VAR 0 5
84648: PUSH
84649: LD_INT 1
84651: ST_TO_ADDR
// if btype = b_workshop then
84652: LD_VAR 0 5
84656: PUSH
84657: LD_INT 2
84659: EQUAL
84660: IFFALSE 84670
// btype := b_factory ;
84662: LD_ADDR_VAR 0 5
84666: PUSH
84667: LD_INT 3
84669: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
84670: LD_VAR 0 5
84674: PPUSH
84675: LD_VAR 0 8
84679: PPUSH
84680: CALL_OW 323
84684: PUSH
84685: LD_INT 1
84687: EQUAL
84688: IFFALSE 84734
// mc_build_upgrade := ReplaceIn ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
84690: LD_ADDR_EXP 76
84694: PUSH
84695: LD_EXP 76
84699: PPUSH
84700: LD_VAR 0 3
84704: PUSH
84705: LD_EXP 76
84709: PUSH
84710: LD_VAR 0 3
84714: ARRAY
84715: PUSH
84716: LD_INT 1
84718: PLUS
84719: PUSH
84720: EMPTY
84721: LIST
84722: LIST
84723: PPUSH
84724: LD_VAR 0 1
84728: PPUSH
84729: CALL 24301 0 3
84733: ST_TO_ADDR
// exit ;
84734: POP
84735: POP
84736: GO 85051
// end ; if btype in [ b_bunker , b_turret ] then
84738: LD_VAR 0 5
84742: PUSH
84743: LD_INT 32
84745: PUSH
84746: LD_INT 33
84748: PUSH
84749: EMPTY
84750: LIST
84751: LIST
84752: IN
84753: IFFALSE 85043
// begin mc_turret_list := ReplaceIn ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
84755: LD_ADDR_EXP 52
84759: PUSH
84760: LD_EXP 52
84764: PPUSH
84765: LD_VAR 0 3
84769: PUSH
84770: LD_EXP 52
84774: PUSH
84775: LD_VAR 0 3
84779: ARRAY
84780: PUSH
84781: LD_INT 1
84783: PLUS
84784: PUSH
84785: EMPTY
84786: LIST
84787: LIST
84788: PPUSH
84789: LD_VAR 0 1
84793: PPUSH
84794: CALL 24301 0 3
84798: ST_TO_ADDR
// if btype = b_bunker then
84799: LD_VAR 0 5
84803: PUSH
84804: LD_INT 32
84806: EQUAL
84807: IFFALSE 85043
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
84809: LD_ADDR_EXP 53
84813: PUSH
84814: LD_EXP 53
84818: PPUSH
84819: LD_VAR 0 3
84823: PUSH
84824: LD_EXP 53
84828: PUSH
84829: LD_VAR 0 3
84833: ARRAY
84834: PUSH
84835: LD_INT 1
84837: PLUS
84838: PUSH
84839: EMPTY
84840: LIST
84841: LIST
84842: PPUSH
84843: LD_VAR 0 1
84847: PPUSH
84848: CALL 24301 0 3
84852: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
84853: LD_ADDR_VAR 0 6
84857: PUSH
84858: LD_EXP 44
84862: PUSH
84863: LD_VAR 0 3
84867: ARRAY
84868: PPUSH
84869: LD_INT 25
84871: PUSH
84872: LD_INT 1
84874: PUSH
84875: EMPTY
84876: LIST
84877: LIST
84878: PUSH
84879: LD_INT 3
84881: PUSH
84882: LD_INT 54
84884: PUSH
84885: EMPTY
84886: LIST
84887: PUSH
84888: EMPTY
84889: LIST
84890: LIST
84891: PUSH
84892: EMPTY
84893: LIST
84894: LIST
84895: PPUSH
84896: CALL_OW 72
84900: ST_TO_ADDR
// if tmp then
84901: LD_VAR 0 6
84905: IFFALSE 84911
// exit ;
84907: POP
84908: POP
84909: GO 85051
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
84911: LD_ADDR_VAR 0 6
84915: PUSH
84916: LD_EXP 44
84920: PUSH
84921: LD_VAR 0 3
84925: ARRAY
84926: PPUSH
84927: LD_INT 2
84929: PUSH
84930: LD_INT 30
84932: PUSH
84933: LD_INT 4
84935: PUSH
84936: EMPTY
84937: LIST
84938: LIST
84939: PUSH
84940: LD_INT 30
84942: PUSH
84943: LD_INT 5
84945: PUSH
84946: EMPTY
84947: LIST
84948: LIST
84949: PUSH
84950: EMPTY
84951: LIST
84952: LIST
84953: LIST
84954: PPUSH
84955: CALL_OW 72
84959: ST_TO_ADDR
// if not tmp then
84960: LD_VAR 0 6
84964: NOT
84965: IFFALSE 84971
// exit ;
84967: POP
84968: POP
84969: GO 85051
// for j in tmp do
84971: LD_ADDR_VAR 0 4
84975: PUSH
84976: LD_VAR 0 6
84980: PUSH
84981: FOR_IN
84982: IFFALSE 85041
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
84984: LD_ADDR_VAR 0 7
84988: PUSH
84989: LD_VAR 0 4
84993: PPUSH
84994: CALL_OW 313
84998: PPUSH
84999: LD_INT 25
85001: PUSH
85002: LD_INT 1
85004: PUSH
85005: EMPTY
85006: LIST
85007: LIST
85008: PPUSH
85009: CALL_OW 72
85013: ST_TO_ADDR
// if units then
85014: LD_VAR 0 7
85018: IFFALSE 85039
// begin ComExitBuilding ( units [ 1 ] ) ;
85020: LD_VAR 0 7
85024: PUSH
85025: LD_INT 1
85027: ARRAY
85028: PPUSH
85029: CALL_OW 122
// exit ;
85033: POP
85034: POP
85035: POP
85036: POP
85037: GO 85051
// end ; end ;
85039: GO 84981
85041: POP
85042: POP
// end ; end ; exit ;
85043: POP
85044: POP
85045: GO 85051
// end ; end ;
85047: GO 84405
85049: POP
85050: POP
// end ;
85051: LD_VAR 0 2
85055: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
85056: LD_INT 0
85058: PPUSH
85059: PPUSH
85060: PPUSH
85061: PPUSH
85062: PPUSH
85063: PPUSH
85064: PPUSH
// if not mc_bases or not skirmish then
85065: LD_EXP 44
85069: NOT
85070: PUSH
85071: LD_EXP 42
85075: NOT
85076: OR
85077: IFFALSE 85081
// exit ;
85079: GO 85312
// btype := GetBType ( building ) ;
85081: LD_ADDR_VAR 0 6
85085: PUSH
85086: LD_VAR 0 1
85090: PPUSH
85091: CALL_OW 266
85095: ST_TO_ADDR
// x := GetX ( building ) ;
85096: LD_ADDR_VAR 0 7
85100: PUSH
85101: LD_VAR 0 1
85105: PPUSH
85106: CALL_OW 250
85110: ST_TO_ADDR
// y := GetY ( building ) ;
85111: LD_ADDR_VAR 0 8
85115: PUSH
85116: LD_VAR 0 1
85120: PPUSH
85121: CALL_OW 251
85125: ST_TO_ADDR
// d := GetDir ( building ) ;
85126: LD_ADDR_VAR 0 9
85130: PUSH
85131: LD_VAR 0 1
85135: PPUSH
85136: CALL_OW 254
85140: ST_TO_ADDR
// for i = 1 to mc_bases do
85141: LD_ADDR_VAR 0 4
85145: PUSH
85146: DOUBLE
85147: LD_INT 1
85149: DEC
85150: ST_TO_ADDR
85151: LD_EXP 44
85155: PUSH
85156: FOR_TO
85157: IFFALSE 85310
// begin if not mc_build_list [ i ] then
85159: LD_EXP 49
85163: PUSH
85164: LD_VAR 0 4
85168: ARRAY
85169: NOT
85170: IFFALSE 85174
// continue ;
85172: GO 85156
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
85174: LD_VAR 0 6
85178: PUSH
85179: LD_VAR 0 7
85183: PUSH
85184: LD_VAR 0 8
85188: PUSH
85189: LD_VAR 0 9
85193: PUSH
85194: EMPTY
85195: LIST
85196: LIST
85197: LIST
85198: LIST
85199: PPUSH
85200: LD_EXP 49
85204: PUSH
85205: LD_VAR 0 4
85209: ARRAY
85210: PUSH
85211: LD_INT 1
85213: ARRAY
85214: PPUSH
85215: CALL 30470 0 2
85219: IFFALSE 85308
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
85221: LD_ADDR_EXP 49
85225: PUSH
85226: LD_EXP 49
85230: PPUSH
85231: LD_VAR 0 4
85235: PPUSH
85236: LD_EXP 49
85240: PUSH
85241: LD_VAR 0 4
85245: ARRAY
85246: PPUSH
85247: LD_INT 1
85249: PPUSH
85250: CALL_OW 3
85254: PPUSH
85255: CALL_OW 1
85259: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
85260: LD_ADDR_EXP 51
85264: PUSH
85265: LD_EXP 51
85269: PPUSH
85270: LD_VAR 0 4
85274: PUSH
85275: LD_EXP 51
85279: PUSH
85280: LD_VAR 0 4
85284: ARRAY
85285: PUSH
85286: LD_INT 1
85288: PLUS
85289: PUSH
85290: EMPTY
85291: LIST
85292: LIST
85293: PPUSH
85294: LD_VAR 0 1
85298: PPUSH
85299: CALL 24301 0 3
85303: ST_TO_ADDR
// exit ;
85304: POP
85305: POP
85306: GO 85312
// end ; end ;
85308: GO 85156
85310: POP
85311: POP
// end ;
85312: LD_VAR 0 3
85316: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
85317: LD_INT 0
85319: PPUSH
85320: PPUSH
85321: PPUSH
// if not mc_bases or not skirmish then
85322: LD_EXP 44
85326: NOT
85327: PUSH
85328: LD_EXP 42
85332: NOT
85333: OR
85334: IFFALSE 85338
// exit ;
85336: GO 85528
// for i = 1 to mc_bases do
85338: LD_ADDR_VAR 0 4
85342: PUSH
85343: DOUBLE
85344: LD_INT 1
85346: DEC
85347: ST_TO_ADDR
85348: LD_EXP 44
85352: PUSH
85353: FOR_TO
85354: IFFALSE 85441
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
85356: LD_VAR 0 1
85360: PUSH
85361: LD_EXP 52
85365: PUSH
85366: LD_VAR 0 4
85370: ARRAY
85371: IN
85372: PUSH
85373: LD_VAR 0 1
85377: PUSH
85378: LD_EXP 53
85382: PUSH
85383: LD_VAR 0 4
85387: ARRAY
85388: IN
85389: NOT
85390: AND
85391: IFFALSE 85439
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
85393: LD_ADDR_EXP 53
85397: PUSH
85398: LD_EXP 53
85402: PPUSH
85403: LD_VAR 0 4
85407: PUSH
85408: LD_EXP 53
85412: PUSH
85413: LD_VAR 0 4
85417: ARRAY
85418: PUSH
85419: LD_INT 1
85421: PLUS
85422: PUSH
85423: EMPTY
85424: LIST
85425: LIST
85426: PPUSH
85427: LD_VAR 0 1
85431: PPUSH
85432: CALL 24301 0 3
85436: ST_TO_ADDR
// break ;
85437: GO 85441
// end ; end ;
85439: GO 85353
85441: POP
85442: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
85443: LD_VAR 0 1
85447: PPUSH
85448: CALL_OW 257
85452: PUSH
85453: LD_EXP 70
85457: IN
85458: PUSH
85459: LD_VAR 0 1
85463: PPUSH
85464: CALL_OW 266
85468: PUSH
85469: LD_INT 5
85471: EQUAL
85472: AND
85473: PUSH
85474: LD_VAR 0 2
85478: PPUSH
85479: CALL_OW 110
85483: PUSH
85484: LD_INT 18
85486: NONEQUAL
85487: AND
85488: IFFALSE 85528
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
85490: LD_VAR 0 2
85494: PPUSH
85495: CALL_OW 257
85499: PUSH
85500: LD_INT 5
85502: PUSH
85503: LD_INT 8
85505: PUSH
85506: LD_INT 9
85508: PUSH
85509: EMPTY
85510: LIST
85511: LIST
85512: LIST
85513: IN
85514: IFFALSE 85528
// SetClass ( unit , 1 ) ;
85516: LD_VAR 0 2
85520: PPUSH
85521: LD_INT 1
85523: PPUSH
85524: CALL_OW 336
// end ;
85528: LD_VAR 0 3
85532: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
85533: LD_INT 0
85535: PPUSH
85536: PPUSH
// if not mc_bases or not skirmish then
85537: LD_EXP 44
85541: NOT
85542: PUSH
85543: LD_EXP 42
85547: NOT
85548: OR
85549: IFFALSE 85553
// exit ;
85551: GO 85669
// if GetLives ( abandoned_vehicle ) > 250 then
85553: LD_VAR 0 2
85557: PPUSH
85558: CALL_OW 256
85562: PUSH
85563: LD_INT 250
85565: GREATER
85566: IFFALSE 85570
// exit ;
85568: GO 85669
// for i = 1 to mc_bases do
85570: LD_ADDR_VAR 0 6
85574: PUSH
85575: DOUBLE
85576: LD_INT 1
85578: DEC
85579: ST_TO_ADDR
85580: LD_EXP 44
85584: PUSH
85585: FOR_TO
85586: IFFALSE 85667
// begin if driver in mc_bases [ i ] then
85588: LD_VAR 0 1
85592: PUSH
85593: LD_EXP 44
85597: PUSH
85598: LD_VAR 0 6
85602: ARRAY
85603: IN
85604: IFFALSE 85665
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
85606: LD_VAR 0 1
85610: PPUSH
85611: LD_EXP 44
85615: PUSH
85616: LD_VAR 0 6
85620: ARRAY
85621: PPUSH
85622: LD_INT 2
85624: PUSH
85625: LD_INT 30
85627: PUSH
85628: LD_INT 0
85630: PUSH
85631: EMPTY
85632: LIST
85633: LIST
85634: PUSH
85635: LD_INT 30
85637: PUSH
85638: LD_INT 1
85640: PUSH
85641: EMPTY
85642: LIST
85643: LIST
85644: PUSH
85645: EMPTY
85646: LIST
85647: LIST
85648: LIST
85649: PPUSH
85650: CALL_OW 72
85654: PUSH
85655: LD_INT 1
85657: ARRAY
85658: PPUSH
85659: CALL_OW 112
// break ;
85663: GO 85667
// end ; end ;
85665: GO 85585
85667: POP
85668: POP
// end ; end_of_file end_of_file
85669: LD_VAR 0 5
85673: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
85674: GO 85676
85676: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
85677: LD_STRING initStreamRollete();
85679: PPUSH
85680: CALL_OW 559
// InitStreamMode ;
85684: CALL 85693 0 0
// DefineStreamItems ( ) ;
85688: CALL 86133 0 0
// end ;
85692: END
// function InitStreamMode ; begin
85693: LD_INT 0
85695: PPUSH
// streamModeActive := false ;
85696: LD_ADDR_EXP 87
85700: PUSH
85701: LD_INT 0
85703: ST_TO_ADDR
// normalCounter := 36 ;
85704: LD_ADDR_EXP 88
85708: PUSH
85709: LD_INT 36
85711: ST_TO_ADDR
// hardcoreCounter := 16 ;
85712: LD_ADDR_EXP 89
85716: PUSH
85717: LD_INT 16
85719: ST_TO_ADDR
// sRocket := false ;
85720: LD_ADDR_EXP 92
85724: PUSH
85725: LD_INT 0
85727: ST_TO_ADDR
// sSpeed := false ;
85728: LD_ADDR_EXP 91
85732: PUSH
85733: LD_INT 0
85735: ST_TO_ADDR
// sEngine := false ;
85736: LD_ADDR_EXP 93
85740: PUSH
85741: LD_INT 0
85743: ST_TO_ADDR
// sSpec := false ;
85744: LD_ADDR_EXP 90
85748: PUSH
85749: LD_INT 0
85751: ST_TO_ADDR
// sLevel := false ;
85752: LD_ADDR_EXP 94
85756: PUSH
85757: LD_INT 0
85759: ST_TO_ADDR
// sArmoury := false ;
85760: LD_ADDR_EXP 95
85764: PUSH
85765: LD_INT 0
85767: ST_TO_ADDR
// sRadar := false ;
85768: LD_ADDR_EXP 96
85772: PUSH
85773: LD_INT 0
85775: ST_TO_ADDR
// sBunker := false ;
85776: LD_ADDR_EXP 97
85780: PUSH
85781: LD_INT 0
85783: ST_TO_ADDR
// sHack := false ;
85784: LD_ADDR_EXP 98
85788: PUSH
85789: LD_INT 0
85791: ST_TO_ADDR
// sFire := false ;
85792: LD_ADDR_EXP 99
85796: PUSH
85797: LD_INT 0
85799: ST_TO_ADDR
// sRefresh := false ;
85800: LD_ADDR_EXP 100
85804: PUSH
85805: LD_INT 0
85807: ST_TO_ADDR
// sExp := false ;
85808: LD_ADDR_EXP 101
85812: PUSH
85813: LD_INT 0
85815: ST_TO_ADDR
// sDepot := false ;
85816: LD_ADDR_EXP 102
85820: PUSH
85821: LD_INT 0
85823: ST_TO_ADDR
// sFlag := false ;
85824: LD_ADDR_EXP 103
85828: PUSH
85829: LD_INT 0
85831: ST_TO_ADDR
// sKamikadze := false ;
85832: LD_ADDR_EXP 111
85836: PUSH
85837: LD_INT 0
85839: ST_TO_ADDR
// sTroll := false ;
85840: LD_ADDR_EXP 112
85844: PUSH
85845: LD_INT 0
85847: ST_TO_ADDR
// sSlow := false ;
85848: LD_ADDR_EXP 113
85852: PUSH
85853: LD_INT 0
85855: ST_TO_ADDR
// sLack := false ;
85856: LD_ADDR_EXP 114
85860: PUSH
85861: LD_INT 0
85863: ST_TO_ADDR
// sTank := false ;
85864: LD_ADDR_EXP 116
85868: PUSH
85869: LD_INT 0
85871: ST_TO_ADDR
// sRemote := false ;
85872: LD_ADDR_EXP 117
85876: PUSH
85877: LD_INT 0
85879: ST_TO_ADDR
// sPowell := false ;
85880: LD_ADDR_EXP 118
85884: PUSH
85885: LD_INT 0
85887: ST_TO_ADDR
// sTeleport := false ;
85888: LD_ADDR_EXP 121
85892: PUSH
85893: LD_INT 0
85895: ST_TO_ADDR
// sOilTower := false ;
85896: LD_ADDR_EXP 123
85900: PUSH
85901: LD_INT 0
85903: ST_TO_ADDR
// sShovel := false ;
85904: LD_ADDR_EXP 124
85908: PUSH
85909: LD_INT 0
85911: ST_TO_ADDR
// sSheik := false ;
85912: LD_ADDR_EXP 125
85916: PUSH
85917: LD_INT 0
85919: ST_TO_ADDR
// sEarthquake := false ;
85920: LD_ADDR_EXP 127
85924: PUSH
85925: LD_INT 0
85927: ST_TO_ADDR
// sAI := false ;
85928: LD_ADDR_EXP 128
85932: PUSH
85933: LD_INT 0
85935: ST_TO_ADDR
// sCargo := false ;
85936: LD_ADDR_EXP 131
85940: PUSH
85941: LD_INT 0
85943: ST_TO_ADDR
// sDLaser := false ;
85944: LD_ADDR_EXP 132
85948: PUSH
85949: LD_INT 0
85951: ST_TO_ADDR
// sExchange := false ;
85952: LD_ADDR_EXP 133
85956: PUSH
85957: LD_INT 0
85959: ST_TO_ADDR
// sFac := false ;
85960: LD_ADDR_EXP 134
85964: PUSH
85965: LD_INT 0
85967: ST_TO_ADDR
// sPower := false ;
85968: LD_ADDR_EXP 135
85972: PUSH
85973: LD_INT 0
85975: ST_TO_ADDR
// sRandom := false ;
85976: LD_ADDR_EXP 136
85980: PUSH
85981: LD_INT 0
85983: ST_TO_ADDR
// sShield := false ;
85984: LD_ADDR_EXP 137
85988: PUSH
85989: LD_INT 0
85991: ST_TO_ADDR
// sTime := false ;
85992: LD_ADDR_EXP 138
85996: PUSH
85997: LD_INT 0
85999: ST_TO_ADDR
// sTools := false ;
86000: LD_ADDR_EXP 139
86004: PUSH
86005: LD_INT 0
86007: ST_TO_ADDR
// sSold := false ;
86008: LD_ADDR_EXP 104
86012: PUSH
86013: LD_INT 0
86015: ST_TO_ADDR
// sDiff := false ;
86016: LD_ADDR_EXP 105
86020: PUSH
86021: LD_INT 0
86023: ST_TO_ADDR
// sFog := false ;
86024: LD_ADDR_EXP 108
86028: PUSH
86029: LD_INT 0
86031: ST_TO_ADDR
// sReset := false ;
86032: LD_ADDR_EXP 109
86036: PUSH
86037: LD_INT 0
86039: ST_TO_ADDR
// sSun := false ;
86040: LD_ADDR_EXP 110
86044: PUSH
86045: LD_INT 0
86047: ST_TO_ADDR
// sTiger := false ;
86048: LD_ADDR_EXP 106
86052: PUSH
86053: LD_INT 0
86055: ST_TO_ADDR
// sBomb := false ;
86056: LD_ADDR_EXP 107
86060: PUSH
86061: LD_INT 0
86063: ST_TO_ADDR
// sWound := false ;
86064: LD_ADDR_EXP 115
86068: PUSH
86069: LD_INT 0
86071: ST_TO_ADDR
// sBetray := false ;
86072: LD_ADDR_EXP 119
86076: PUSH
86077: LD_INT 0
86079: ST_TO_ADDR
// sContamin := false ;
86080: LD_ADDR_EXP 120
86084: PUSH
86085: LD_INT 0
86087: ST_TO_ADDR
// sOil := false ;
86088: LD_ADDR_EXP 122
86092: PUSH
86093: LD_INT 0
86095: ST_TO_ADDR
// sStu := false ;
86096: LD_ADDR_EXP 126
86100: PUSH
86101: LD_INT 0
86103: ST_TO_ADDR
// sBazooka := false ;
86104: LD_ADDR_EXP 129
86108: PUSH
86109: LD_INT 0
86111: ST_TO_ADDR
// sMortar := false ;
86112: LD_ADDR_EXP 130
86116: PUSH
86117: LD_INT 0
86119: ST_TO_ADDR
// sRanger := false ;
86120: LD_ADDR_EXP 140
86124: PUSH
86125: LD_INT 0
86127: ST_TO_ADDR
// end ;
86128: LD_VAR 0 1
86132: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
86133: LD_INT 0
86135: PPUSH
86136: PPUSH
86137: PPUSH
86138: PPUSH
86139: PPUSH
// result := [ ] ;
86140: LD_ADDR_VAR 0 1
86144: PUSH
86145: EMPTY
86146: ST_TO_ADDR
// if campaign_id = 1 then
86147: LD_OWVAR 69
86151: PUSH
86152: LD_INT 1
86154: EQUAL
86155: IFFALSE 89093
// begin case mission_number of 1 :
86157: LD_OWVAR 70
86161: PUSH
86162: LD_INT 1
86164: DOUBLE
86165: EQUAL
86166: IFTRUE 86170
86168: GO 86234
86170: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
86171: LD_ADDR_VAR 0 1
86175: PUSH
86176: LD_INT 2
86178: PUSH
86179: LD_INT 4
86181: PUSH
86182: LD_INT 11
86184: PUSH
86185: LD_INT 12
86187: PUSH
86188: LD_INT 15
86190: PUSH
86191: LD_INT 16
86193: PUSH
86194: LD_INT 22
86196: PUSH
86197: LD_INT 23
86199: PUSH
86200: LD_INT 26
86202: PUSH
86203: EMPTY
86204: LIST
86205: LIST
86206: LIST
86207: LIST
86208: LIST
86209: LIST
86210: LIST
86211: LIST
86212: LIST
86213: PUSH
86214: LD_INT 101
86216: PUSH
86217: LD_INT 102
86219: PUSH
86220: LD_INT 106
86222: PUSH
86223: EMPTY
86224: LIST
86225: LIST
86226: LIST
86227: PUSH
86228: EMPTY
86229: LIST
86230: LIST
86231: ST_TO_ADDR
86232: GO 89091
86234: LD_INT 2
86236: DOUBLE
86237: EQUAL
86238: IFTRUE 86242
86240: GO 86314
86242: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
86243: LD_ADDR_VAR 0 1
86247: PUSH
86248: LD_INT 2
86250: PUSH
86251: LD_INT 4
86253: PUSH
86254: LD_INT 11
86256: PUSH
86257: LD_INT 12
86259: PUSH
86260: LD_INT 15
86262: PUSH
86263: LD_INT 16
86265: PUSH
86266: LD_INT 22
86268: PUSH
86269: LD_INT 23
86271: PUSH
86272: LD_INT 26
86274: PUSH
86275: EMPTY
86276: LIST
86277: LIST
86278: LIST
86279: LIST
86280: LIST
86281: LIST
86282: LIST
86283: LIST
86284: LIST
86285: PUSH
86286: LD_INT 101
86288: PUSH
86289: LD_INT 102
86291: PUSH
86292: LD_INT 105
86294: PUSH
86295: LD_INT 106
86297: PUSH
86298: LD_INT 108
86300: PUSH
86301: EMPTY
86302: LIST
86303: LIST
86304: LIST
86305: LIST
86306: LIST
86307: PUSH
86308: EMPTY
86309: LIST
86310: LIST
86311: ST_TO_ADDR
86312: GO 89091
86314: LD_INT 3
86316: DOUBLE
86317: EQUAL
86318: IFTRUE 86322
86320: GO 86398
86322: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
86323: LD_ADDR_VAR 0 1
86327: PUSH
86328: LD_INT 2
86330: PUSH
86331: LD_INT 4
86333: PUSH
86334: LD_INT 5
86336: PUSH
86337: LD_INT 11
86339: PUSH
86340: LD_INT 12
86342: PUSH
86343: LD_INT 15
86345: PUSH
86346: LD_INT 16
86348: PUSH
86349: LD_INT 22
86351: PUSH
86352: LD_INT 26
86354: PUSH
86355: LD_INT 36
86357: PUSH
86358: EMPTY
86359: LIST
86360: LIST
86361: LIST
86362: LIST
86363: LIST
86364: LIST
86365: LIST
86366: LIST
86367: LIST
86368: LIST
86369: PUSH
86370: LD_INT 101
86372: PUSH
86373: LD_INT 102
86375: PUSH
86376: LD_INT 105
86378: PUSH
86379: LD_INT 106
86381: PUSH
86382: LD_INT 108
86384: PUSH
86385: EMPTY
86386: LIST
86387: LIST
86388: LIST
86389: LIST
86390: LIST
86391: PUSH
86392: EMPTY
86393: LIST
86394: LIST
86395: ST_TO_ADDR
86396: GO 89091
86398: LD_INT 4
86400: DOUBLE
86401: EQUAL
86402: IFTRUE 86406
86404: GO 86490
86406: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
86407: LD_ADDR_VAR 0 1
86411: PUSH
86412: LD_INT 2
86414: PUSH
86415: LD_INT 4
86417: PUSH
86418: LD_INT 5
86420: PUSH
86421: LD_INT 8
86423: PUSH
86424: LD_INT 11
86426: PUSH
86427: LD_INT 12
86429: PUSH
86430: LD_INT 15
86432: PUSH
86433: LD_INT 16
86435: PUSH
86436: LD_INT 22
86438: PUSH
86439: LD_INT 23
86441: PUSH
86442: LD_INT 26
86444: PUSH
86445: LD_INT 36
86447: PUSH
86448: EMPTY
86449: LIST
86450: LIST
86451: LIST
86452: LIST
86453: LIST
86454: LIST
86455: LIST
86456: LIST
86457: LIST
86458: LIST
86459: LIST
86460: LIST
86461: PUSH
86462: LD_INT 101
86464: PUSH
86465: LD_INT 102
86467: PUSH
86468: LD_INT 105
86470: PUSH
86471: LD_INT 106
86473: PUSH
86474: LD_INT 108
86476: PUSH
86477: EMPTY
86478: LIST
86479: LIST
86480: LIST
86481: LIST
86482: LIST
86483: PUSH
86484: EMPTY
86485: LIST
86486: LIST
86487: ST_TO_ADDR
86488: GO 89091
86490: LD_INT 5
86492: DOUBLE
86493: EQUAL
86494: IFTRUE 86498
86496: GO 86598
86498: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
86499: LD_ADDR_VAR 0 1
86503: PUSH
86504: LD_INT 2
86506: PUSH
86507: LD_INT 4
86509: PUSH
86510: LD_INT 5
86512: PUSH
86513: LD_INT 6
86515: PUSH
86516: LD_INT 8
86518: PUSH
86519: LD_INT 11
86521: PUSH
86522: LD_INT 12
86524: PUSH
86525: LD_INT 15
86527: PUSH
86528: LD_INT 16
86530: PUSH
86531: LD_INT 22
86533: PUSH
86534: LD_INT 23
86536: PUSH
86537: LD_INT 25
86539: PUSH
86540: LD_INT 26
86542: PUSH
86543: LD_INT 36
86545: PUSH
86546: EMPTY
86547: LIST
86548: LIST
86549: LIST
86550: LIST
86551: LIST
86552: LIST
86553: LIST
86554: LIST
86555: LIST
86556: LIST
86557: LIST
86558: LIST
86559: LIST
86560: LIST
86561: PUSH
86562: LD_INT 101
86564: PUSH
86565: LD_INT 102
86567: PUSH
86568: LD_INT 105
86570: PUSH
86571: LD_INT 106
86573: PUSH
86574: LD_INT 108
86576: PUSH
86577: LD_INT 109
86579: PUSH
86580: LD_INT 112
86582: PUSH
86583: EMPTY
86584: LIST
86585: LIST
86586: LIST
86587: LIST
86588: LIST
86589: LIST
86590: LIST
86591: PUSH
86592: EMPTY
86593: LIST
86594: LIST
86595: ST_TO_ADDR
86596: GO 89091
86598: LD_INT 6
86600: DOUBLE
86601: EQUAL
86602: IFTRUE 86606
86604: GO 86726
86606: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
86607: LD_ADDR_VAR 0 1
86611: PUSH
86612: LD_INT 2
86614: PUSH
86615: LD_INT 4
86617: PUSH
86618: LD_INT 5
86620: PUSH
86621: LD_INT 6
86623: PUSH
86624: LD_INT 8
86626: PUSH
86627: LD_INT 11
86629: PUSH
86630: LD_INT 12
86632: PUSH
86633: LD_INT 15
86635: PUSH
86636: LD_INT 16
86638: PUSH
86639: LD_INT 20
86641: PUSH
86642: LD_INT 21
86644: PUSH
86645: LD_INT 22
86647: PUSH
86648: LD_INT 23
86650: PUSH
86651: LD_INT 25
86653: PUSH
86654: LD_INT 26
86656: PUSH
86657: LD_INT 30
86659: PUSH
86660: LD_INT 31
86662: PUSH
86663: LD_INT 32
86665: PUSH
86666: LD_INT 36
86668: PUSH
86669: EMPTY
86670: LIST
86671: LIST
86672: LIST
86673: LIST
86674: LIST
86675: LIST
86676: LIST
86677: LIST
86678: LIST
86679: LIST
86680: LIST
86681: LIST
86682: LIST
86683: LIST
86684: LIST
86685: LIST
86686: LIST
86687: LIST
86688: LIST
86689: PUSH
86690: LD_INT 101
86692: PUSH
86693: LD_INT 102
86695: PUSH
86696: LD_INT 105
86698: PUSH
86699: LD_INT 106
86701: PUSH
86702: LD_INT 108
86704: PUSH
86705: LD_INT 109
86707: PUSH
86708: LD_INT 112
86710: PUSH
86711: EMPTY
86712: LIST
86713: LIST
86714: LIST
86715: LIST
86716: LIST
86717: LIST
86718: LIST
86719: PUSH
86720: EMPTY
86721: LIST
86722: LIST
86723: ST_TO_ADDR
86724: GO 89091
86726: LD_INT 7
86728: DOUBLE
86729: EQUAL
86730: IFTRUE 86734
86732: GO 86834
86734: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
86735: LD_ADDR_VAR 0 1
86739: PUSH
86740: LD_INT 2
86742: PUSH
86743: LD_INT 4
86745: PUSH
86746: LD_INT 5
86748: PUSH
86749: LD_INT 7
86751: PUSH
86752: LD_INT 11
86754: PUSH
86755: LD_INT 12
86757: PUSH
86758: LD_INT 15
86760: PUSH
86761: LD_INT 16
86763: PUSH
86764: LD_INT 20
86766: PUSH
86767: LD_INT 21
86769: PUSH
86770: LD_INT 22
86772: PUSH
86773: LD_INT 23
86775: PUSH
86776: LD_INT 25
86778: PUSH
86779: LD_INT 26
86781: PUSH
86782: EMPTY
86783: LIST
86784: LIST
86785: LIST
86786: LIST
86787: LIST
86788: LIST
86789: LIST
86790: LIST
86791: LIST
86792: LIST
86793: LIST
86794: LIST
86795: LIST
86796: LIST
86797: PUSH
86798: LD_INT 101
86800: PUSH
86801: LD_INT 102
86803: PUSH
86804: LD_INT 103
86806: PUSH
86807: LD_INT 105
86809: PUSH
86810: LD_INT 106
86812: PUSH
86813: LD_INT 108
86815: PUSH
86816: LD_INT 112
86818: PUSH
86819: EMPTY
86820: LIST
86821: LIST
86822: LIST
86823: LIST
86824: LIST
86825: LIST
86826: LIST
86827: PUSH
86828: EMPTY
86829: LIST
86830: LIST
86831: ST_TO_ADDR
86832: GO 89091
86834: LD_INT 8
86836: DOUBLE
86837: EQUAL
86838: IFTRUE 86842
86840: GO 86970
86842: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
86843: LD_ADDR_VAR 0 1
86847: PUSH
86848: LD_INT 2
86850: PUSH
86851: LD_INT 4
86853: PUSH
86854: LD_INT 5
86856: PUSH
86857: LD_INT 6
86859: PUSH
86860: LD_INT 7
86862: PUSH
86863: LD_INT 8
86865: PUSH
86866: LD_INT 11
86868: PUSH
86869: LD_INT 12
86871: PUSH
86872: LD_INT 15
86874: PUSH
86875: LD_INT 16
86877: PUSH
86878: LD_INT 20
86880: PUSH
86881: LD_INT 21
86883: PUSH
86884: LD_INT 22
86886: PUSH
86887: LD_INT 23
86889: PUSH
86890: LD_INT 25
86892: PUSH
86893: LD_INT 26
86895: PUSH
86896: LD_INT 30
86898: PUSH
86899: LD_INT 31
86901: PUSH
86902: LD_INT 32
86904: PUSH
86905: LD_INT 36
86907: PUSH
86908: EMPTY
86909: LIST
86910: LIST
86911: LIST
86912: LIST
86913: LIST
86914: LIST
86915: LIST
86916: LIST
86917: LIST
86918: LIST
86919: LIST
86920: LIST
86921: LIST
86922: LIST
86923: LIST
86924: LIST
86925: LIST
86926: LIST
86927: LIST
86928: LIST
86929: PUSH
86930: LD_INT 101
86932: PUSH
86933: LD_INT 102
86935: PUSH
86936: LD_INT 103
86938: PUSH
86939: LD_INT 105
86941: PUSH
86942: LD_INT 106
86944: PUSH
86945: LD_INT 108
86947: PUSH
86948: LD_INT 109
86950: PUSH
86951: LD_INT 112
86953: PUSH
86954: EMPTY
86955: LIST
86956: LIST
86957: LIST
86958: LIST
86959: LIST
86960: LIST
86961: LIST
86962: LIST
86963: PUSH
86964: EMPTY
86965: LIST
86966: LIST
86967: ST_TO_ADDR
86968: GO 89091
86970: LD_INT 9
86972: DOUBLE
86973: EQUAL
86974: IFTRUE 86978
86976: GO 87114
86978: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
86979: LD_ADDR_VAR 0 1
86983: PUSH
86984: LD_INT 2
86986: PUSH
86987: LD_INT 4
86989: PUSH
86990: LD_INT 5
86992: PUSH
86993: LD_INT 6
86995: PUSH
86996: LD_INT 7
86998: PUSH
86999: LD_INT 8
87001: PUSH
87002: LD_INT 11
87004: PUSH
87005: LD_INT 12
87007: PUSH
87008: LD_INT 15
87010: PUSH
87011: LD_INT 16
87013: PUSH
87014: LD_INT 20
87016: PUSH
87017: LD_INT 21
87019: PUSH
87020: LD_INT 22
87022: PUSH
87023: LD_INT 23
87025: PUSH
87026: LD_INT 25
87028: PUSH
87029: LD_INT 26
87031: PUSH
87032: LD_INT 28
87034: PUSH
87035: LD_INT 30
87037: PUSH
87038: LD_INT 31
87040: PUSH
87041: LD_INT 32
87043: PUSH
87044: LD_INT 36
87046: PUSH
87047: EMPTY
87048: LIST
87049: LIST
87050: LIST
87051: LIST
87052: LIST
87053: LIST
87054: LIST
87055: LIST
87056: LIST
87057: LIST
87058: LIST
87059: LIST
87060: LIST
87061: LIST
87062: LIST
87063: LIST
87064: LIST
87065: LIST
87066: LIST
87067: LIST
87068: LIST
87069: PUSH
87070: LD_INT 101
87072: PUSH
87073: LD_INT 102
87075: PUSH
87076: LD_INT 103
87078: PUSH
87079: LD_INT 105
87081: PUSH
87082: LD_INT 106
87084: PUSH
87085: LD_INT 108
87087: PUSH
87088: LD_INT 109
87090: PUSH
87091: LD_INT 112
87093: PUSH
87094: LD_INT 114
87096: PUSH
87097: EMPTY
87098: LIST
87099: LIST
87100: LIST
87101: LIST
87102: LIST
87103: LIST
87104: LIST
87105: LIST
87106: LIST
87107: PUSH
87108: EMPTY
87109: LIST
87110: LIST
87111: ST_TO_ADDR
87112: GO 89091
87114: LD_INT 10
87116: DOUBLE
87117: EQUAL
87118: IFTRUE 87122
87120: GO 87306
87122: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
87123: LD_ADDR_VAR 0 1
87127: PUSH
87128: LD_INT 2
87130: PUSH
87131: LD_INT 4
87133: PUSH
87134: LD_INT 5
87136: PUSH
87137: LD_INT 6
87139: PUSH
87140: LD_INT 7
87142: PUSH
87143: LD_INT 8
87145: PUSH
87146: LD_INT 9
87148: PUSH
87149: LD_INT 10
87151: PUSH
87152: LD_INT 11
87154: PUSH
87155: LD_INT 12
87157: PUSH
87158: LD_INT 13
87160: PUSH
87161: LD_INT 14
87163: PUSH
87164: LD_INT 15
87166: PUSH
87167: LD_INT 16
87169: PUSH
87170: LD_INT 17
87172: PUSH
87173: LD_INT 18
87175: PUSH
87176: LD_INT 19
87178: PUSH
87179: LD_INT 20
87181: PUSH
87182: LD_INT 21
87184: PUSH
87185: LD_INT 22
87187: PUSH
87188: LD_INT 23
87190: PUSH
87191: LD_INT 24
87193: PUSH
87194: LD_INT 25
87196: PUSH
87197: LD_INT 26
87199: PUSH
87200: LD_INT 28
87202: PUSH
87203: LD_INT 30
87205: PUSH
87206: LD_INT 31
87208: PUSH
87209: LD_INT 32
87211: PUSH
87212: LD_INT 36
87214: PUSH
87215: EMPTY
87216: LIST
87217: LIST
87218: LIST
87219: LIST
87220: LIST
87221: LIST
87222: LIST
87223: LIST
87224: LIST
87225: LIST
87226: LIST
87227: LIST
87228: LIST
87229: LIST
87230: LIST
87231: LIST
87232: LIST
87233: LIST
87234: LIST
87235: LIST
87236: LIST
87237: LIST
87238: LIST
87239: LIST
87240: LIST
87241: LIST
87242: LIST
87243: LIST
87244: LIST
87245: PUSH
87246: LD_INT 101
87248: PUSH
87249: LD_INT 102
87251: PUSH
87252: LD_INT 103
87254: PUSH
87255: LD_INT 104
87257: PUSH
87258: LD_INT 105
87260: PUSH
87261: LD_INT 106
87263: PUSH
87264: LD_INT 107
87266: PUSH
87267: LD_INT 108
87269: PUSH
87270: LD_INT 109
87272: PUSH
87273: LD_INT 110
87275: PUSH
87276: LD_INT 111
87278: PUSH
87279: LD_INT 112
87281: PUSH
87282: LD_INT 114
87284: PUSH
87285: EMPTY
87286: LIST
87287: LIST
87288: LIST
87289: LIST
87290: LIST
87291: LIST
87292: LIST
87293: LIST
87294: LIST
87295: LIST
87296: LIST
87297: LIST
87298: LIST
87299: PUSH
87300: EMPTY
87301: LIST
87302: LIST
87303: ST_TO_ADDR
87304: GO 89091
87306: LD_INT 11
87308: DOUBLE
87309: EQUAL
87310: IFTRUE 87314
87312: GO 87506
87314: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
87315: LD_ADDR_VAR 0 1
87319: PUSH
87320: LD_INT 2
87322: PUSH
87323: LD_INT 3
87325: PUSH
87326: LD_INT 4
87328: PUSH
87329: LD_INT 5
87331: PUSH
87332: LD_INT 6
87334: PUSH
87335: LD_INT 7
87337: PUSH
87338: LD_INT 8
87340: PUSH
87341: LD_INT 9
87343: PUSH
87344: LD_INT 10
87346: PUSH
87347: LD_INT 11
87349: PUSH
87350: LD_INT 12
87352: PUSH
87353: LD_INT 13
87355: PUSH
87356: LD_INT 14
87358: PUSH
87359: LD_INT 15
87361: PUSH
87362: LD_INT 16
87364: PUSH
87365: LD_INT 17
87367: PUSH
87368: LD_INT 18
87370: PUSH
87371: LD_INT 19
87373: PUSH
87374: LD_INT 20
87376: PUSH
87377: LD_INT 21
87379: PUSH
87380: LD_INT 22
87382: PUSH
87383: LD_INT 23
87385: PUSH
87386: LD_INT 24
87388: PUSH
87389: LD_INT 25
87391: PUSH
87392: LD_INT 26
87394: PUSH
87395: LD_INT 28
87397: PUSH
87398: LD_INT 30
87400: PUSH
87401: LD_INT 31
87403: PUSH
87404: LD_INT 32
87406: PUSH
87407: LD_INT 34
87409: PUSH
87410: LD_INT 36
87412: PUSH
87413: EMPTY
87414: LIST
87415: LIST
87416: LIST
87417: LIST
87418: LIST
87419: LIST
87420: LIST
87421: LIST
87422: LIST
87423: LIST
87424: LIST
87425: LIST
87426: LIST
87427: LIST
87428: LIST
87429: LIST
87430: LIST
87431: LIST
87432: LIST
87433: LIST
87434: LIST
87435: LIST
87436: LIST
87437: LIST
87438: LIST
87439: LIST
87440: LIST
87441: LIST
87442: LIST
87443: LIST
87444: LIST
87445: PUSH
87446: LD_INT 101
87448: PUSH
87449: LD_INT 102
87451: PUSH
87452: LD_INT 103
87454: PUSH
87455: LD_INT 104
87457: PUSH
87458: LD_INT 105
87460: PUSH
87461: LD_INT 106
87463: PUSH
87464: LD_INT 107
87466: PUSH
87467: LD_INT 108
87469: PUSH
87470: LD_INT 109
87472: PUSH
87473: LD_INT 110
87475: PUSH
87476: LD_INT 111
87478: PUSH
87479: LD_INT 112
87481: PUSH
87482: LD_INT 114
87484: PUSH
87485: EMPTY
87486: LIST
87487: LIST
87488: LIST
87489: LIST
87490: LIST
87491: LIST
87492: LIST
87493: LIST
87494: LIST
87495: LIST
87496: LIST
87497: LIST
87498: LIST
87499: PUSH
87500: EMPTY
87501: LIST
87502: LIST
87503: ST_TO_ADDR
87504: GO 89091
87506: LD_INT 12
87508: DOUBLE
87509: EQUAL
87510: IFTRUE 87514
87512: GO 87722
87514: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
87515: LD_ADDR_VAR 0 1
87519: PUSH
87520: LD_INT 1
87522: PUSH
87523: LD_INT 2
87525: PUSH
87526: LD_INT 3
87528: PUSH
87529: LD_INT 4
87531: PUSH
87532: LD_INT 5
87534: PUSH
87535: LD_INT 6
87537: PUSH
87538: LD_INT 7
87540: PUSH
87541: LD_INT 8
87543: PUSH
87544: LD_INT 9
87546: PUSH
87547: LD_INT 10
87549: PUSH
87550: LD_INT 11
87552: PUSH
87553: LD_INT 12
87555: PUSH
87556: LD_INT 13
87558: PUSH
87559: LD_INT 14
87561: PUSH
87562: LD_INT 15
87564: PUSH
87565: LD_INT 16
87567: PUSH
87568: LD_INT 17
87570: PUSH
87571: LD_INT 18
87573: PUSH
87574: LD_INT 19
87576: PUSH
87577: LD_INT 20
87579: PUSH
87580: LD_INT 21
87582: PUSH
87583: LD_INT 22
87585: PUSH
87586: LD_INT 23
87588: PUSH
87589: LD_INT 24
87591: PUSH
87592: LD_INT 25
87594: PUSH
87595: LD_INT 26
87597: PUSH
87598: LD_INT 27
87600: PUSH
87601: LD_INT 28
87603: PUSH
87604: LD_INT 30
87606: PUSH
87607: LD_INT 31
87609: PUSH
87610: LD_INT 32
87612: PUSH
87613: LD_INT 33
87615: PUSH
87616: LD_INT 34
87618: PUSH
87619: LD_INT 36
87621: PUSH
87622: EMPTY
87623: LIST
87624: LIST
87625: LIST
87626: LIST
87627: LIST
87628: LIST
87629: LIST
87630: LIST
87631: LIST
87632: LIST
87633: LIST
87634: LIST
87635: LIST
87636: LIST
87637: LIST
87638: LIST
87639: LIST
87640: LIST
87641: LIST
87642: LIST
87643: LIST
87644: LIST
87645: LIST
87646: LIST
87647: LIST
87648: LIST
87649: LIST
87650: LIST
87651: LIST
87652: LIST
87653: LIST
87654: LIST
87655: LIST
87656: LIST
87657: PUSH
87658: LD_INT 101
87660: PUSH
87661: LD_INT 102
87663: PUSH
87664: LD_INT 103
87666: PUSH
87667: LD_INT 104
87669: PUSH
87670: LD_INT 105
87672: PUSH
87673: LD_INT 106
87675: PUSH
87676: LD_INT 107
87678: PUSH
87679: LD_INT 108
87681: PUSH
87682: LD_INT 109
87684: PUSH
87685: LD_INT 110
87687: PUSH
87688: LD_INT 111
87690: PUSH
87691: LD_INT 112
87693: PUSH
87694: LD_INT 113
87696: PUSH
87697: LD_INT 114
87699: PUSH
87700: EMPTY
87701: LIST
87702: LIST
87703: LIST
87704: LIST
87705: LIST
87706: LIST
87707: LIST
87708: LIST
87709: LIST
87710: LIST
87711: LIST
87712: LIST
87713: LIST
87714: LIST
87715: PUSH
87716: EMPTY
87717: LIST
87718: LIST
87719: ST_TO_ADDR
87720: GO 89091
87722: LD_INT 13
87724: DOUBLE
87725: EQUAL
87726: IFTRUE 87730
87728: GO 87926
87730: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
87731: LD_ADDR_VAR 0 1
87735: PUSH
87736: LD_INT 1
87738: PUSH
87739: LD_INT 2
87741: PUSH
87742: LD_INT 3
87744: PUSH
87745: LD_INT 4
87747: PUSH
87748: LD_INT 5
87750: PUSH
87751: LD_INT 8
87753: PUSH
87754: LD_INT 9
87756: PUSH
87757: LD_INT 10
87759: PUSH
87760: LD_INT 11
87762: PUSH
87763: LD_INT 12
87765: PUSH
87766: LD_INT 14
87768: PUSH
87769: LD_INT 15
87771: PUSH
87772: LD_INT 16
87774: PUSH
87775: LD_INT 17
87777: PUSH
87778: LD_INT 18
87780: PUSH
87781: LD_INT 19
87783: PUSH
87784: LD_INT 20
87786: PUSH
87787: LD_INT 21
87789: PUSH
87790: LD_INT 22
87792: PUSH
87793: LD_INT 23
87795: PUSH
87796: LD_INT 24
87798: PUSH
87799: LD_INT 25
87801: PUSH
87802: LD_INT 26
87804: PUSH
87805: LD_INT 27
87807: PUSH
87808: LD_INT 28
87810: PUSH
87811: LD_INT 30
87813: PUSH
87814: LD_INT 31
87816: PUSH
87817: LD_INT 32
87819: PUSH
87820: LD_INT 33
87822: PUSH
87823: LD_INT 34
87825: PUSH
87826: LD_INT 36
87828: PUSH
87829: EMPTY
87830: LIST
87831: LIST
87832: LIST
87833: LIST
87834: LIST
87835: LIST
87836: LIST
87837: LIST
87838: LIST
87839: LIST
87840: LIST
87841: LIST
87842: LIST
87843: LIST
87844: LIST
87845: LIST
87846: LIST
87847: LIST
87848: LIST
87849: LIST
87850: LIST
87851: LIST
87852: LIST
87853: LIST
87854: LIST
87855: LIST
87856: LIST
87857: LIST
87858: LIST
87859: LIST
87860: LIST
87861: PUSH
87862: LD_INT 101
87864: PUSH
87865: LD_INT 102
87867: PUSH
87868: LD_INT 103
87870: PUSH
87871: LD_INT 104
87873: PUSH
87874: LD_INT 105
87876: PUSH
87877: LD_INT 106
87879: PUSH
87880: LD_INT 107
87882: PUSH
87883: LD_INT 108
87885: PUSH
87886: LD_INT 109
87888: PUSH
87889: LD_INT 110
87891: PUSH
87892: LD_INT 111
87894: PUSH
87895: LD_INT 112
87897: PUSH
87898: LD_INT 113
87900: PUSH
87901: LD_INT 114
87903: PUSH
87904: EMPTY
87905: LIST
87906: LIST
87907: LIST
87908: LIST
87909: LIST
87910: LIST
87911: LIST
87912: LIST
87913: LIST
87914: LIST
87915: LIST
87916: LIST
87917: LIST
87918: LIST
87919: PUSH
87920: EMPTY
87921: LIST
87922: LIST
87923: ST_TO_ADDR
87924: GO 89091
87926: LD_INT 14
87928: DOUBLE
87929: EQUAL
87930: IFTRUE 87934
87932: GO 88146
87934: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
87935: LD_ADDR_VAR 0 1
87939: PUSH
87940: LD_INT 1
87942: PUSH
87943: LD_INT 2
87945: PUSH
87946: LD_INT 3
87948: PUSH
87949: LD_INT 4
87951: PUSH
87952: LD_INT 5
87954: PUSH
87955: LD_INT 6
87957: PUSH
87958: LD_INT 7
87960: PUSH
87961: LD_INT 8
87963: PUSH
87964: LD_INT 9
87966: PUSH
87967: LD_INT 10
87969: PUSH
87970: LD_INT 11
87972: PUSH
87973: LD_INT 12
87975: PUSH
87976: LD_INT 13
87978: PUSH
87979: LD_INT 14
87981: PUSH
87982: LD_INT 15
87984: PUSH
87985: LD_INT 16
87987: PUSH
87988: LD_INT 17
87990: PUSH
87991: LD_INT 18
87993: PUSH
87994: LD_INT 19
87996: PUSH
87997: LD_INT 20
87999: PUSH
88000: LD_INT 21
88002: PUSH
88003: LD_INT 22
88005: PUSH
88006: LD_INT 23
88008: PUSH
88009: LD_INT 24
88011: PUSH
88012: LD_INT 25
88014: PUSH
88015: LD_INT 26
88017: PUSH
88018: LD_INT 27
88020: PUSH
88021: LD_INT 28
88023: PUSH
88024: LD_INT 29
88026: PUSH
88027: LD_INT 30
88029: PUSH
88030: LD_INT 31
88032: PUSH
88033: LD_INT 32
88035: PUSH
88036: LD_INT 33
88038: PUSH
88039: LD_INT 34
88041: PUSH
88042: LD_INT 36
88044: PUSH
88045: EMPTY
88046: LIST
88047: LIST
88048: LIST
88049: LIST
88050: LIST
88051: LIST
88052: LIST
88053: LIST
88054: LIST
88055: LIST
88056: LIST
88057: LIST
88058: LIST
88059: LIST
88060: LIST
88061: LIST
88062: LIST
88063: LIST
88064: LIST
88065: LIST
88066: LIST
88067: LIST
88068: LIST
88069: LIST
88070: LIST
88071: LIST
88072: LIST
88073: LIST
88074: LIST
88075: LIST
88076: LIST
88077: LIST
88078: LIST
88079: LIST
88080: LIST
88081: PUSH
88082: LD_INT 101
88084: PUSH
88085: LD_INT 102
88087: PUSH
88088: LD_INT 103
88090: PUSH
88091: LD_INT 104
88093: PUSH
88094: LD_INT 105
88096: PUSH
88097: LD_INT 106
88099: PUSH
88100: LD_INT 107
88102: PUSH
88103: LD_INT 108
88105: PUSH
88106: LD_INT 109
88108: PUSH
88109: LD_INT 110
88111: PUSH
88112: LD_INT 111
88114: PUSH
88115: LD_INT 112
88117: PUSH
88118: LD_INT 113
88120: PUSH
88121: LD_INT 114
88123: PUSH
88124: EMPTY
88125: LIST
88126: LIST
88127: LIST
88128: LIST
88129: LIST
88130: LIST
88131: LIST
88132: LIST
88133: LIST
88134: LIST
88135: LIST
88136: LIST
88137: LIST
88138: LIST
88139: PUSH
88140: EMPTY
88141: LIST
88142: LIST
88143: ST_TO_ADDR
88144: GO 89091
88146: LD_INT 15
88148: DOUBLE
88149: EQUAL
88150: IFTRUE 88154
88152: GO 88366
88154: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
88155: LD_ADDR_VAR 0 1
88159: PUSH
88160: LD_INT 1
88162: PUSH
88163: LD_INT 2
88165: PUSH
88166: LD_INT 3
88168: PUSH
88169: LD_INT 4
88171: PUSH
88172: LD_INT 5
88174: PUSH
88175: LD_INT 6
88177: PUSH
88178: LD_INT 7
88180: PUSH
88181: LD_INT 8
88183: PUSH
88184: LD_INT 9
88186: PUSH
88187: LD_INT 10
88189: PUSH
88190: LD_INT 11
88192: PUSH
88193: LD_INT 12
88195: PUSH
88196: LD_INT 13
88198: PUSH
88199: LD_INT 14
88201: PUSH
88202: LD_INT 15
88204: PUSH
88205: LD_INT 16
88207: PUSH
88208: LD_INT 17
88210: PUSH
88211: LD_INT 18
88213: PUSH
88214: LD_INT 19
88216: PUSH
88217: LD_INT 20
88219: PUSH
88220: LD_INT 21
88222: PUSH
88223: LD_INT 22
88225: PUSH
88226: LD_INT 23
88228: PUSH
88229: LD_INT 24
88231: PUSH
88232: LD_INT 25
88234: PUSH
88235: LD_INT 26
88237: PUSH
88238: LD_INT 27
88240: PUSH
88241: LD_INT 28
88243: PUSH
88244: LD_INT 29
88246: PUSH
88247: LD_INT 30
88249: PUSH
88250: LD_INT 31
88252: PUSH
88253: LD_INT 32
88255: PUSH
88256: LD_INT 33
88258: PUSH
88259: LD_INT 34
88261: PUSH
88262: LD_INT 36
88264: PUSH
88265: EMPTY
88266: LIST
88267: LIST
88268: LIST
88269: LIST
88270: LIST
88271: LIST
88272: LIST
88273: LIST
88274: LIST
88275: LIST
88276: LIST
88277: LIST
88278: LIST
88279: LIST
88280: LIST
88281: LIST
88282: LIST
88283: LIST
88284: LIST
88285: LIST
88286: LIST
88287: LIST
88288: LIST
88289: LIST
88290: LIST
88291: LIST
88292: LIST
88293: LIST
88294: LIST
88295: LIST
88296: LIST
88297: LIST
88298: LIST
88299: LIST
88300: LIST
88301: PUSH
88302: LD_INT 101
88304: PUSH
88305: LD_INT 102
88307: PUSH
88308: LD_INT 103
88310: PUSH
88311: LD_INT 104
88313: PUSH
88314: LD_INT 105
88316: PUSH
88317: LD_INT 106
88319: PUSH
88320: LD_INT 107
88322: PUSH
88323: LD_INT 108
88325: PUSH
88326: LD_INT 109
88328: PUSH
88329: LD_INT 110
88331: PUSH
88332: LD_INT 111
88334: PUSH
88335: LD_INT 112
88337: PUSH
88338: LD_INT 113
88340: PUSH
88341: LD_INT 114
88343: PUSH
88344: EMPTY
88345: LIST
88346: LIST
88347: LIST
88348: LIST
88349: LIST
88350: LIST
88351: LIST
88352: LIST
88353: LIST
88354: LIST
88355: LIST
88356: LIST
88357: LIST
88358: LIST
88359: PUSH
88360: EMPTY
88361: LIST
88362: LIST
88363: ST_TO_ADDR
88364: GO 89091
88366: LD_INT 16
88368: DOUBLE
88369: EQUAL
88370: IFTRUE 88374
88372: GO 88498
88374: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
88375: LD_ADDR_VAR 0 1
88379: PUSH
88380: LD_INT 2
88382: PUSH
88383: LD_INT 4
88385: PUSH
88386: LD_INT 5
88388: PUSH
88389: LD_INT 7
88391: PUSH
88392: LD_INT 11
88394: PUSH
88395: LD_INT 12
88397: PUSH
88398: LD_INT 15
88400: PUSH
88401: LD_INT 16
88403: PUSH
88404: LD_INT 20
88406: PUSH
88407: LD_INT 21
88409: PUSH
88410: LD_INT 22
88412: PUSH
88413: LD_INT 23
88415: PUSH
88416: LD_INT 25
88418: PUSH
88419: LD_INT 26
88421: PUSH
88422: LD_INT 30
88424: PUSH
88425: LD_INT 31
88427: PUSH
88428: LD_INT 32
88430: PUSH
88431: LD_INT 33
88433: PUSH
88434: LD_INT 34
88436: PUSH
88437: EMPTY
88438: LIST
88439: LIST
88440: LIST
88441: LIST
88442: LIST
88443: LIST
88444: LIST
88445: LIST
88446: LIST
88447: LIST
88448: LIST
88449: LIST
88450: LIST
88451: LIST
88452: LIST
88453: LIST
88454: LIST
88455: LIST
88456: LIST
88457: PUSH
88458: LD_INT 101
88460: PUSH
88461: LD_INT 102
88463: PUSH
88464: LD_INT 103
88466: PUSH
88467: LD_INT 106
88469: PUSH
88470: LD_INT 108
88472: PUSH
88473: LD_INT 112
88475: PUSH
88476: LD_INT 113
88478: PUSH
88479: LD_INT 114
88481: PUSH
88482: EMPTY
88483: LIST
88484: LIST
88485: LIST
88486: LIST
88487: LIST
88488: LIST
88489: LIST
88490: LIST
88491: PUSH
88492: EMPTY
88493: LIST
88494: LIST
88495: ST_TO_ADDR
88496: GO 89091
88498: LD_INT 17
88500: DOUBLE
88501: EQUAL
88502: IFTRUE 88506
88504: GO 88718
88506: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
88507: LD_ADDR_VAR 0 1
88511: PUSH
88512: LD_INT 1
88514: PUSH
88515: LD_INT 2
88517: PUSH
88518: LD_INT 3
88520: PUSH
88521: LD_INT 4
88523: PUSH
88524: LD_INT 5
88526: PUSH
88527: LD_INT 6
88529: PUSH
88530: LD_INT 7
88532: PUSH
88533: LD_INT 8
88535: PUSH
88536: LD_INT 9
88538: PUSH
88539: LD_INT 10
88541: PUSH
88542: LD_INT 11
88544: PUSH
88545: LD_INT 12
88547: PUSH
88548: LD_INT 13
88550: PUSH
88551: LD_INT 14
88553: PUSH
88554: LD_INT 15
88556: PUSH
88557: LD_INT 16
88559: PUSH
88560: LD_INT 17
88562: PUSH
88563: LD_INT 18
88565: PUSH
88566: LD_INT 19
88568: PUSH
88569: LD_INT 20
88571: PUSH
88572: LD_INT 21
88574: PUSH
88575: LD_INT 22
88577: PUSH
88578: LD_INT 23
88580: PUSH
88581: LD_INT 24
88583: PUSH
88584: LD_INT 25
88586: PUSH
88587: LD_INT 26
88589: PUSH
88590: LD_INT 27
88592: PUSH
88593: LD_INT 28
88595: PUSH
88596: LD_INT 29
88598: PUSH
88599: LD_INT 30
88601: PUSH
88602: LD_INT 31
88604: PUSH
88605: LD_INT 32
88607: PUSH
88608: LD_INT 33
88610: PUSH
88611: LD_INT 34
88613: PUSH
88614: LD_INT 36
88616: PUSH
88617: EMPTY
88618: LIST
88619: LIST
88620: LIST
88621: LIST
88622: LIST
88623: LIST
88624: LIST
88625: LIST
88626: LIST
88627: LIST
88628: LIST
88629: LIST
88630: LIST
88631: LIST
88632: LIST
88633: LIST
88634: LIST
88635: LIST
88636: LIST
88637: LIST
88638: LIST
88639: LIST
88640: LIST
88641: LIST
88642: LIST
88643: LIST
88644: LIST
88645: LIST
88646: LIST
88647: LIST
88648: LIST
88649: LIST
88650: LIST
88651: LIST
88652: LIST
88653: PUSH
88654: LD_INT 101
88656: PUSH
88657: LD_INT 102
88659: PUSH
88660: LD_INT 103
88662: PUSH
88663: LD_INT 104
88665: PUSH
88666: LD_INT 105
88668: PUSH
88669: LD_INT 106
88671: PUSH
88672: LD_INT 107
88674: PUSH
88675: LD_INT 108
88677: PUSH
88678: LD_INT 109
88680: PUSH
88681: LD_INT 110
88683: PUSH
88684: LD_INT 111
88686: PUSH
88687: LD_INT 112
88689: PUSH
88690: LD_INT 113
88692: PUSH
88693: LD_INT 114
88695: PUSH
88696: EMPTY
88697: LIST
88698: LIST
88699: LIST
88700: LIST
88701: LIST
88702: LIST
88703: LIST
88704: LIST
88705: LIST
88706: LIST
88707: LIST
88708: LIST
88709: LIST
88710: LIST
88711: PUSH
88712: EMPTY
88713: LIST
88714: LIST
88715: ST_TO_ADDR
88716: GO 89091
88718: LD_INT 18
88720: DOUBLE
88721: EQUAL
88722: IFTRUE 88726
88724: GO 88862
88726: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
88727: LD_ADDR_VAR 0 1
88731: PUSH
88732: LD_INT 2
88734: PUSH
88735: LD_INT 4
88737: PUSH
88738: LD_INT 5
88740: PUSH
88741: LD_INT 7
88743: PUSH
88744: LD_INT 11
88746: PUSH
88747: LD_INT 12
88749: PUSH
88750: LD_INT 15
88752: PUSH
88753: LD_INT 16
88755: PUSH
88756: LD_INT 20
88758: PUSH
88759: LD_INT 21
88761: PUSH
88762: LD_INT 22
88764: PUSH
88765: LD_INT 23
88767: PUSH
88768: LD_INT 25
88770: PUSH
88771: LD_INT 26
88773: PUSH
88774: LD_INT 30
88776: PUSH
88777: LD_INT 31
88779: PUSH
88780: LD_INT 32
88782: PUSH
88783: LD_INT 33
88785: PUSH
88786: LD_INT 34
88788: PUSH
88789: LD_INT 35
88791: PUSH
88792: LD_INT 36
88794: PUSH
88795: EMPTY
88796: LIST
88797: LIST
88798: LIST
88799: LIST
88800: LIST
88801: LIST
88802: LIST
88803: LIST
88804: LIST
88805: LIST
88806: LIST
88807: LIST
88808: LIST
88809: LIST
88810: LIST
88811: LIST
88812: LIST
88813: LIST
88814: LIST
88815: LIST
88816: LIST
88817: PUSH
88818: LD_INT 101
88820: PUSH
88821: LD_INT 102
88823: PUSH
88824: LD_INT 103
88826: PUSH
88827: LD_INT 106
88829: PUSH
88830: LD_INT 108
88832: PUSH
88833: LD_INT 112
88835: PUSH
88836: LD_INT 113
88838: PUSH
88839: LD_INT 114
88841: PUSH
88842: LD_INT 115
88844: PUSH
88845: EMPTY
88846: LIST
88847: LIST
88848: LIST
88849: LIST
88850: LIST
88851: LIST
88852: LIST
88853: LIST
88854: LIST
88855: PUSH
88856: EMPTY
88857: LIST
88858: LIST
88859: ST_TO_ADDR
88860: GO 89091
88862: LD_INT 19
88864: DOUBLE
88865: EQUAL
88866: IFTRUE 88870
88868: GO 89090
88870: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
88871: LD_ADDR_VAR 0 1
88875: PUSH
88876: LD_INT 1
88878: PUSH
88879: LD_INT 2
88881: PUSH
88882: LD_INT 3
88884: PUSH
88885: LD_INT 4
88887: PUSH
88888: LD_INT 5
88890: PUSH
88891: LD_INT 6
88893: PUSH
88894: LD_INT 7
88896: PUSH
88897: LD_INT 8
88899: PUSH
88900: LD_INT 9
88902: PUSH
88903: LD_INT 10
88905: PUSH
88906: LD_INT 11
88908: PUSH
88909: LD_INT 12
88911: PUSH
88912: LD_INT 13
88914: PUSH
88915: LD_INT 14
88917: PUSH
88918: LD_INT 15
88920: PUSH
88921: LD_INT 16
88923: PUSH
88924: LD_INT 17
88926: PUSH
88927: LD_INT 18
88929: PUSH
88930: LD_INT 19
88932: PUSH
88933: LD_INT 20
88935: PUSH
88936: LD_INT 21
88938: PUSH
88939: LD_INT 22
88941: PUSH
88942: LD_INT 23
88944: PUSH
88945: LD_INT 24
88947: PUSH
88948: LD_INT 25
88950: PUSH
88951: LD_INT 26
88953: PUSH
88954: LD_INT 27
88956: PUSH
88957: LD_INT 28
88959: PUSH
88960: LD_INT 29
88962: PUSH
88963: LD_INT 30
88965: PUSH
88966: LD_INT 31
88968: PUSH
88969: LD_INT 32
88971: PUSH
88972: LD_INT 33
88974: PUSH
88975: LD_INT 34
88977: PUSH
88978: LD_INT 35
88980: PUSH
88981: LD_INT 36
88983: PUSH
88984: EMPTY
88985: LIST
88986: LIST
88987: LIST
88988: LIST
88989: LIST
88990: LIST
88991: LIST
88992: LIST
88993: LIST
88994: LIST
88995: LIST
88996: LIST
88997: LIST
88998: LIST
88999: LIST
89000: LIST
89001: LIST
89002: LIST
89003: LIST
89004: LIST
89005: LIST
89006: LIST
89007: LIST
89008: LIST
89009: LIST
89010: LIST
89011: LIST
89012: LIST
89013: LIST
89014: LIST
89015: LIST
89016: LIST
89017: LIST
89018: LIST
89019: LIST
89020: LIST
89021: PUSH
89022: LD_INT 101
89024: PUSH
89025: LD_INT 102
89027: PUSH
89028: LD_INT 103
89030: PUSH
89031: LD_INT 104
89033: PUSH
89034: LD_INT 105
89036: PUSH
89037: LD_INT 106
89039: PUSH
89040: LD_INT 107
89042: PUSH
89043: LD_INT 108
89045: PUSH
89046: LD_INT 109
89048: PUSH
89049: LD_INT 110
89051: PUSH
89052: LD_INT 111
89054: PUSH
89055: LD_INT 112
89057: PUSH
89058: LD_INT 113
89060: PUSH
89061: LD_INT 114
89063: PUSH
89064: LD_INT 115
89066: PUSH
89067: EMPTY
89068: LIST
89069: LIST
89070: LIST
89071: LIST
89072: LIST
89073: LIST
89074: LIST
89075: LIST
89076: LIST
89077: LIST
89078: LIST
89079: LIST
89080: LIST
89081: LIST
89082: LIST
89083: PUSH
89084: EMPTY
89085: LIST
89086: LIST
89087: ST_TO_ADDR
89088: GO 89091
89090: POP
// end else
89091: GO 89310
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
89093: LD_ADDR_VAR 0 1
89097: PUSH
89098: LD_INT 1
89100: PUSH
89101: LD_INT 2
89103: PUSH
89104: LD_INT 3
89106: PUSH
89107: LD_INT 4
89109: PUSH
89110: LD_INT 5
89112: PUSH
89113: LD_INT 6
89115: PUSH
89116: LD_INT 7
89118: PUSH
89119: LD_INT 8
89121: PUSH
89122: LD_INT 9
89124: PUSH
89125: LD_INT 10
89127: PUSH
89128: LD_INT 11
89130: PUSH
89131: LD_INT 12
89133: PUSH
89134: LD_INT 13
89136: PUSH
89137: LD_INT 14
89139: PUSH
89140: LD_INT 15
89142: PUSH
89143: LD_INT 16
89145: PUSH
89146: LD_INT 17
89148: PUSH
89149: LD_INT 18
89151: PUSH
89152: LD_INT 19
89154: PUSH
89155: LD_INT 20
89157: PUSH
89158: LD_INT 21
89160: PUSH
89161: LD_INT 22
89163: PUSH
89164: LD_INT 23
89166: PUSH
89167: LD_INT 24
89169: PUSH
89170: LD_INT 25
89172: PUSH
89173: LD_INT 26
89175: PUSH
89176: LD_INT 27
89178: PUSH
89179: LD_INT 28
89181: PUSH
89182: LD_INT 29
89184: PUSH
89185: LD_INT 30
89187: PUSH
89188: LD_INT 31
89190: PUSH
89191: LD_INT 32
89193: PUSH
89194: LD_INT 33
89196: PUSH
89197: LD_INT 34
89199: PUSH
89200: LD_INT 35
89202: PUSH
89203: LD_INT 36
89205: PUSH
89206: EMPTY
89207: LIST
89208: LIST
89209: LIST
89210: LIST
89211: LIST
89212: LIST
89213: LIST
89214: LIST
89215: LIST
89216: LIST
89217: LIST
89218: LIST
89219: LIST
89220: LIST
89221: LIST
89222: LIST
89223: LIST
89224: LIST
89225: LIST
89226: LIST
89227: LIST
89228: LIST
89229: LIST
89230: LIST
89231: LIST
89232: LIST
89233: LIST
89234: LIST
89235: LIST
89236: LIST
89237: LIST
89238: LIST
89239: LIST
89240: LIST
89241: LIST
89242: LIST
89243: PUSH
89244: LD_INT 101
89246: PUSH
89247: LD_INT 102
89249: PUSH
89250: LD_INT 103
89252: PUSH
89253: LD_INT 104
89255: PUSH
89256: LD_INT 105
89258: PUSH
89259: LD_INT 106
89261: PUSH
89262: LD_INT 107
89264: PUSH
89265: LD_INT 108
89267: PUSH
89268: LD_INT 109
89270: PUSH
89271: LD_INT 110
89273: PUSH
89274: LD_INT 111
89276: PUSH
89277: LD_INT 112
89279: PUSH
89280: LD_INT 113
89282: PUSH
89283: LD_INT 114
89285: PUSH
89286: LD_INT 115
89288: PUSH
89289: EMPTY
89290: LIST
89291: LIST
89292: LIST
89293: LIST
89294: LIST
89295: LIST
89296: LIST
89297: LIST
89298: LIST
89299: LIST
89300: LIST
89301: LIST
89302: LIST
89303: LIST
89304: LIST
89305: PUSH
89306: EMPTY
89307: LIST
89308: LIST
89309: ST_TO_ADDR
// if result then
89310: LD_VAR 0 1
89314: IFFALSE 89603
// begin normal :=  ;
89316: LD_ADDR_VAR 0 3
89320: PUSH
89321: LD_STRING 
89323: ST_TO_ADDR
// hardcore :=  ;
89324: LD_ADDR_VAR 0 4
89328: PUSH
89329: LD_STRING 
89331: ST_TO_ADDR
// for i = 1 to normalCounter do
89332: LD_ADDR_VAR 0 5
89336: PUSH
89337: DOUBLE
89338: LD_INT 1
89340: DEC
89341: ST_TO_ADDR
89342: LD_EXP 88
89346: PUSH
89347: FOR_TO
89348: IFFALSE 89449
// begin tmp := 0 ;
89350: LD_ADDR_VAR 0 2
89354: PUSH
89355: LD_STRING 0
89357: ST_TO_ADDR
// if result [ 1 ] then
89358: LD_VAR 0 1
89362: PUSH
89363: LD_INT 1
89365: ARRAY
89366: IFFALSE 89431
// if result [ 1 ] [ 1 ] = i then
89368: LD_VAR 0 1
89372: PUSH
89373: LD_INT 1
89375: ARRAY
89376: PUSH
89377: LD_INT 1
89379: ARRAY
89380: PUSH
89381: LD_VAR 0 5
89385: EQUAL
89386: IFFALSE 89431
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
89388: LD_ADDR_VAR 0 1
89392: PUSH
89393: LD_VAR 0 1
89397: PPUSH
89398: LD_INT 1
89400: PPUSH
89401: LD_VAR 0 1
89405: PUSH
89406: LD_INT 1
89408: ARRAY
89409: PPUSH
89410: LD_INT 1
89412: PPUSH
89413: CALL_OW 3
89417: PPUSH
89418: CALL_OW 1
89422: ST_TO_ADDR
// tmp := 1 ;
89423: LD_ADDR_VAR 0 2
89427: PUSH
89428: LD_STRING 1
89430: ST_TO_ADDR
// end ; normal := normal & tmp ;
89431: LD_ADDR_VAR 0 3
89435: PUSH
89436: LD_VAR 0 3
89440: PUSH
89441: LD_VAR 0 2
89445: STR
89446: ST_TO_ADDR
// end ;
89447: GO 89347
89449: POP
89450: POP
// for i = 1 to hardcoreCounter do
89451: LD_ADDR_VAR 0 5
89455: PUSH
89456: DOUBLE
89457: LD_INT 1
89459: DEC
89460: ST_TO_ADDR
89461: LD_EXP 89
89465: PUSH
89466: FOR_TO
89467: IFFALSE 89572
// begin tmp := 0 ;
89469: LD_ADDR_VAR 0 2
89473: PUSH
89474: LD_STRING 0
89476: ST_TO_ADDR
// if result [ 2 ] then
89477: LD_VAR 0 1
89481: PUSH
89482: LD_INT 2
89484: ARRAY
89485: IFFALSE 89554
// if result [ 2 ] [ 1 ] = 100 + i then
89487: LD_VAR 0 1
89491: PUSH
89492: LD_INT 2
89494: ARRAY
89495: PUSH
89496: LD_INT 1
89498: ARRAY
89499: PUSH
89500: LD_INT 100
89502: PUSH
89503: LD_VAR 0 5
89507: PLUS
89508: EQUAL
89509: IFFALSE 89554
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
89511: LD_ADDR_VAR 0 1
89515: PUSH
89516: LD_VAR 0 1
89520: PPUSH
89521: LD_INT 2
89523: PPUSH
89524: LD_VAR 0 1
89528: PUSH
89529: LD_INT 2
89531: ARRAY
89532: PPUSH
89533: LD_INT 1
89535: PPUSH
89536: CALL_OW 3
89540: PPUSH
89541: CALL_OW 1
89545: ST_TO_ADDR
// tmp := 1 ;
89546: LD_ADDR_VAR 0 2
89550: PUSH
89551: LD_STRING 1
89553: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
89554: LD_ADDR_VAR 0 4
89558: PUSH
89559: LD_VAR 0 4
89563: PUSH
89564: LD_VAR 0 2
89568: STR
89569: ST_TO_ADDR
// end ;
89570: GO 89466
89572: POP
89573: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
89574: LD_STRING getStreamItemsFromMission("
89576: PUSH
89577: LD_VAR 0 3
89581: STR
89582: PUSH
89583: LD_STRING ","
89585: STR
89586: PUSH
89587: LD_VAR 0 4
89591: STR
89592: PUSH
89593: LD_STRING ")
89595: STR
89596: PPUSH
89597: CALL_OW 559
// end else
89601: GO 89610
// ToLua ( getStreamItemsFromMission("","") ) ;
89603: LD_STRING getStreamItemsFromMission("","")
89605: PPUSH
89606: CALL_OW 559
// end ;
89610: LD_VAR 0 1
89614: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
89615: LD_VAR 0 2
89619: PUSH
89620: LD_INT 100
89622: EQUAL
89623: IFFALSE 90572
// begin if not StreamModeActive then
89625: LD_EXP 87
89629: NOT
89630: IFFALSE 89640
// StreamModeActive := true ;
89632: LD_ADDR_EXP 87
89636: PUSH
89637: LD_INT 1
89639: ST_TO_ADDR
// if p3 = 0 then
89640: LD_VAR 0 3
89644: PUSH
89645: LD_INT 0
89647: EQUAL
89648: IFFALSE 89654
// InitStreamMode ;
89650: CALL 85693 0 0
// if p3 = 1 then
89654: LD_VAR 0 3
89658: PUSH
89659: LD_INT 1
89661: EQUAL
89662: IFFALSE 89672
// sRocket := true ;
89664: LD_ADDR_EXP 92
89668: PUSH
89669: LD_INT 1
89671: ST_TO_ADDR
// if p3 = 2 then
89672: LD_VAR 0 3
89676: PUSH
89677: LD_INT 2
89679: EQUAL
89680: IFFALSE 89690
// sSpeed := true ;
89682: LD_ADDR_EXP 91
89686: PUSH
89687: LD_INT 1
89689: ST_TO_ADDR
// if p3 = 3 then
89690: LD_VAR 0 3
89694: PUSH
89695: LD_INT 3
89697: EQUAL
89698: IFFALSE 89708
// sEngine := true ;
89700: LD_ADDR_EXP 93
89704: PUSH
89705: LD_INT 1
89707: ST_TO_ADDR
// if p3 = 4 then
89708: LD_VAR 0 3
89712: PUSH
89713: LD_INT 4
89715: EQUAL
89716: IFFALSE 89726
// sSpec := true ;
89718: LD_ADDR_EXP 90
89722: PUSH
89723: LD_INT 1
89725: ST_TO_ADDR
// if p3 = 5 then
89726: LD_VAR 0 3
89730: PUSH
89731: LD_INT 5
89733: EQUAL
89734: IFFALSE 89744
// sLevel := true ;
89736: LD_ADDR_EXP 94
89740: PUSH
89741: LD_INT 1
89743: ST_TO_ADDR
// if p3 = 6 then
89744: LD_VAR 0 3
89748: PUSH
89749: LD_INT 6
89751: EQUAL
89752: IFFALSE 89762
// sArmoury := true ;
89754: LD_ADDR_EXP 95
89758: PUSH
89759: LD_INT 1
89761: ST_TO_ADDR
// if p3 = 7 then
89762: LD_VAR 0 3
89766: PUSH
89767: LD_INT 7
89769: EQUAL
89770: IFFALSE 89780
// sRadar := true ;
89772: LD_ADDR_EXP 96
89776: PUSH
89777: LD_INT 1
89779: ST_TO_ADDR
// if p3 = 8 then
89780: LD_VAR 0 3
89784: PUSH
89785: LD_INT 8
89787: EQUAL
89788: IFFALSE 89798
// sBunker := true ;
89790: LD_ADDR_EXP 97
89794: PUSH
89795: LD_INT 1
89797: ST_TO_ADDR
// if p3 = 9 then
89798: LD_VAR 0 3
89802: PUSH
89803: LD_INT 9
89805: EQUAL
89806: IFFALSE 89816
// sHack := true ;
89808: LD_ADDR_EXP 98
89812: PUSH
89813: LD_INT 1
89815: ST_TO_ADDR
// if p3 = 10 then
89816: LD_VAR 0 3
89820: PUSH
89821: LD_INT 10
89823: EQUAL
89824: IFFALSE 89834
// sFire := true ;
89826: LD_ADDR_EXP 99
89830: PUSH
89831: LD_INT 1
89833: ST_TO_ADDR
// if p3 = 11 then
89834: LD_VAR 0 3
89838: PUSH
89839: LD_INT 11
89841: EQUAL
89842: IFFALSE 89852
// sRefresh := true ;
89844: LD_ADDR_EXP 100
89848: PUSH
89849: LD_INT 1
89851: ST_TO_ADDR
// if p3 = 12 then
89852: LD_VAR 0 3
89856: PUSH
89857: LD_INT 12
89859: EQUAL
89860: IFFALSE 89870
// sExp := true ;
89862: LD_ADDR_EXP 101
89866: PUSH
89867: LD_INT 1
89869: ST_TO_ADDR
// if p3 = 13 then
89870: LD_VAR 0 3
89874: PUSH
89875: LD_INT 13
89877: EQUAL
89878: IFFALSE 89888
// sDepot := true ;
89880: LD_ADDR_EXP 102
89884: PUSH
89885: LD_INT 1
89887: ST_TO_ADDR
// if p3 = 14 then
89888: LD_VAR 0 3
89892: PUSH
89893: LD_INT 14
89895: EQUAL
89896: IFFALSE 89906
// sFlag := true ;
89898: LD_ADDR_EXP 103
89902: PUSH
89903: LD_INT 1
89905: ST_TO_ADDR
// if p3 = 15 then
89906: LD_VAR 0 3
89910: PUSH
89911: LD_INT 15
89913: EQUAL
89914: IFFALSE 89924
// sKamikadze := true ;
89916: LD_ADDR_EXP 111
89920: PUSH
89921: LD_INT 1
89923: ST_TO_ADDR
// if p3 = 16 then
89924: LD_VAR 0 3
89928: PUSH
89929: LD_INT 16
89931: EQUAL
89932: IFFALSE 89942
// sTroll := true ;
89934: LD_ADDR_EXP 112
89938: PUSH
89939: LD_INT 1
89941: ST_TO_ADDR
// if p3 = 17 then
89942: LD_VAR 0 3
89946: PUSH
89947: LD_INT 17
89949: EQUAL
89950: IFFALSE 89960
// sSlow := true ;
89952: LD_ADDR_EXP 113
89956: PUSH
89957: LD_INT 1
89959: ST_TO_ADDR
// if p3 = 18 then
89960: LD_VAR 0 3
89964: PUSH
89965: LD_INT 18
89967: EQUAL
89968: IFFALSE 89978
// sLack := true ;
89970: LD_ADDR_EXP 114
89974: PUSH
89975: LD_INT 1
89977: ST_TO_ADDR
// if p3 = 19 then
89978: LD_VAR 0 3
89982: PUSH
89983: LD_INT 19
89985: EQUAL
89986: IFFALSE 89996
// sTank := true ;
89988: LD_ADDR_EXP 116
89992: PUSH
89993: LD_INT 1
89995: ST_TO_ADDR
// if p3 = 20 then
89996: LD_VAR 0 3
90000: PUSH
90001: LD_INT 20
90003: EQUAL
90004: IFFALSE 90014
// sRemote := true ;
90006: LD_ADDR_EXP 117
90010: PUSH
90011: LD_INT 1
90013: ST_TO_ADDR
// if p3 = 21 then
90014: LD_VAR 0 3
90018: PUSH
90019: LD_INT 21
90021: EQUAL
90022: IFFALSE 90032
// sPowell := true ;
90024: LD_ADDR_EXP 118
90028: PUSH
90029: LD_INT 1
90031: ST_TO_ADDR
// if p3 = 22 then
90032: LD_VAR 0 3
90036: PUSH
90037: LD_INT 22
90039: EQUAL
90040: IFFALSE 90050
// sTeleport := true ;
90042: LD_ADDR_EXP 121
90046: PUSH
90047: LD_INT 1
90049: ST_TO_ADDR
// if p3 = 23 then
90050: LD_VAR 0 3
90054: PUSH
90055: LD_INT 23
90057: EQUAL
90058: IFFALSE 90068
// sOilTower := true ;
90060: LD_ADDR_EXP 123
90064: PUSH
90065: LD_INT 1
90067: ST_TO_ADDR
// if p3 = 24 then
90068: LD_VAR 0 3
90072: PUSH
90073: LD_INT 24
90075: EQUAL
90076: IFFALSE 90086
// sShovel := true ;
90078: LD_ADDR_EXP 124
90082: PUSH
90083: LD_INT 1
90085: ST_TO_ADDR
// if p3 = 25 then
90086: LD_VAR 0 3
90090: PUSH
90091: LD_INT 25
90093: EQUAL
90094: IFFALSE 90104
// sSheik := true ;
90096: LD_ADDR_EXP 125
90100: PUSH
90101: LD_INT 1
90103: ST_TO_ADDR
// if p3 = 26 then
90104: LD_VAR 0 3
90108: PUSH
90109: LD_INT 26
90111: EQUAL
90112: IFFALSE 90122
// sEarthquake := true ;
90114: LD_ADDR_EXP 127
90118: PUSH
90119: LD_INT 1
90121: ST_TO_ADDR
// if p3 = 27 then
90122: LD_VAR 0 3
90126: PUSH
90127: LD_INT 27
90129: EQUAL
90130: IFFALSE 90140
// sAI := true ;
90132: LD_ADDR_EXP 128
90136: PUSH
90137: LD_INT 1
90139: ST_TO_ADDR
// if p3 = 28 then
90140: LD_VAR 0 3
90144: PUSH
90145: LD_INT 28
90147: EQUAL
90148: IFFALSE 90158
// sCargo := true ;
90150: LD_ADDR_EXP 131
90154: PUSH
90155: LD_INT 1
90157: ST_TO_ADDR
// if p3 = 29 then
90158: LD_VAR 0 3
90162: PUSH
90163: LD_INT 29
90165: EQUAL
90166: IFFALSE 90176
// sDLaser := true ;
90168: LD_ADDR_EXP 132
90172: PUSH
90173: LD_INT 1
90175: ST_TO_ADDR
// if p3 = 30 then
90176: LD_VAR 0 3
90180: PUSH
90181: LD_INT 30
90183: EQUAL
90184: IFFALSE 90194
// sExchange := true ;
90186: LD_ADDR_EXP 133
90190: PUSH
90191: LD_INT 1
90193: ST_TO_ADDR
// if p3 = 31 then
90194: LD_VAR 0 3
90198: PUSH
90199: LD_INT 31
90201: EQUAL
90202: IFFALSE 90212
// sFac := true ;
90204: LD_ADDR_EXP 134
90208: PUSH
90209: LD_INT 1
90211: ST_TO_ADDR
// if p3 = 32 then
90212: LD_VAR 0 3
90216: PUSH
90217: LD_INT 32
90219: EQUAL
90220: IFFALSE 90230
// sPower := true ;
90222: LD_ADDR_EXP 135
90226: PUSH
90227: LD_INT 1
90229: ST_TO_ADDR
// if p3 = 33 then
90230: LD_VAR 0 3
90234: PUSH
90235: LD_INT 33
90237: EQUAL
90238: IFFALSE 90248
// sRandom := true ;
90240: LD_ADDR_EXP 136
90244: PUSH
90245: LD_INT 1
90247: ST_TO_ADDR
// if p3 = 34 then
90248: LD_VAR 0 3
90252: PUSH
90253: LD_INT 34
90255: EQUAL
90256: IFFALSE 90266
// sShield := true ;
90258: LD_ADDR_EXP 137
90262: PUSH
90263: LD_INT 1
90265: ST_TO_ADDR
// if p3 = 35 then
90266: LD_VAR 0 3
90270: PUSH
90271: LD_INT 35
90273: EQUAL
90274: IFFALSE 90284
// sTime := true ;
90276: LD_ADDR_EXP 138
90280: PUSH
90281: LD_INT 1
90283: ST_TO_ADDR
// if p3 = 36 then
90284: LD_VAR 0 3
90288: PUSH
90289: LD_INT 36
90291: EQUAL
90292: IFFALSE 90302
// sTools := true ;
90294: LD_ADDR_EXP 139
90298: PUSH
90299: LD_INT 1
90301: ST_TO_ADDR
// if p3 = 101 then
90302: LD_VAR 0 3
90306: PUSH
90307: LD_INT 101
90309: EQUAL
90310: IFFALSE 90320
// sSold := true ;
90312: LD_ADDR_EXP 104
90316: PUSH
90317: LD_INT 1
90319: ST_TO_ADDR
// if p3 = 102 then
90320: LD_VAR 0 3
90324: PUSH
90325: LD_INT 102
90327: EQUAL
90328: IFFALSE 90338
// sDiff := true ;
90330: LD_ADDR_EXP 105
90334: PUSH
90335: LD_INT 1
90337: ST_TO_ADDR
// if p3 = 103 then
90338: LD_VAR 0 3
90342: PUSH
90343: LD_INT 103
90345: EQUAL
90346: IFFALSE 90356
// sFog := true ;
90348: LD_ADDR_EXP 108
90352: PUSH
90353: LD_INT 1
90355: ST_TO_ADDR
// if p3 = 104 then
90356: LD_VAR 0 3
90360: PUSH
90361: LD_INT 104
90363: EQUAL
90364: IFFALSE 90374
// sReset := true ;
90366: LD_ADDR_EXP 109
90370: PUSH
90371: LD_INT 1
90373: ST_TO_ADDR
// if p3 = 105 then
90374: LD_VAR 0 3
90378: PUSH
90379: LD_INT 105
90381: EQUAL
90382: IFFALSE 90392
// sSun := true ;
90384: LD_ADDR_EXP 110
90388: PUSH
90389: LD_INT 1
90391: ST_TO_ADDR
// if p3 = 106 then
90392: LD_VAR 0 3
90396: PUSH
90397: LD_INT 106
90399: EQUAL
90400: IFFALSE 90410
// sTiger := true ;
90402: LD_ADDR_EXP 106
90406: PUSH
90407: LD_INT 1
90409: ST_TO_ADDR
// if p3 = 107 then
90410: LD_VAR 0 3
90414: PUSH
90415: LD_INT 107
90417: EQUAL
90418: IFFALSE 90428
// sBomb := true ;
90420: LD_ADDR_EXP 107
90424: PUSH
90425: LD_INT 1
90427: ST_TO_ADDR
// if p3 = 108 then
90428: LD_VAR 0 3
90432: PUSH
90433: LD_INT 108
90435: EQUAL
90436: IFFALSE 90446
// sWound := true ;
90438: LD_ADDR_EXP 115
90442: PUSH
90443: LD_INT 1
90445: ST_TO_ADDR
// if p3 = 109 then
90446: LD_VAR 0 3
90450: PUSH
90451: LD_INT 109
90453: EQUAL
90454: IFFALSE 90464
// sBetray := true ;
90456: LD_ADDR_EXP 119
90460: PUSH
90461: LD_INT 1
90463: ST_TO_ADDR
// if p3 = 110 then
90464: LD_VAR 0 3
90468: PUSH
90469: LD_INT 110
90471: EQUAL
90472: IFFALSE 90482
// sContamin := true ;
90474: LD_ADDR_EXP 120
90478: PUSH
90479: LD_INT 1
90481: ST_TO_ADDR
// if p3 = 111 then
90482: LD_VAR 0 3
90486: PUSH
90487: LD_INT 111
90489: EQUAL
90490: IFFALSE 90500
// sOil := true ;
90492: LD_ADDR_EXP 122
90496: PUSH
90497: LD_INT 1
90499: ST_TO_ADDR
// if p3 = 112 then
90500: LD_VAR 0 3
90504: PUSH
90505: LD_INT 112
90507: EQUAL
90508: IFFALSE 90518
// sStu := true ;
90510: LD_ADDR_EXP 126
90514: PUSH
90515: LD_INT 1
90517: ST_TO_ADDR
// if p3 = 113 then
90518: LD_VAR 0 3
90522: PUSH
90523: LD_INT 113
90525: EQUAL
90526: IFFALSE 90536
// sBazooka := true ;
90528: LD_ADDR_EXP 129
90532: PUSH
90533: LD_INT 1
90535: ST_TO_ADDR
// if p3 = 114 then
90536: LD_VAR 0 3
90540: PUSH
90541: LD_INT 114
90543: EQUAL
90544: IFFALSE 90554
// sMortar := true ;
90546: LD_ADDR_EXP 130
90550: PUSH
90551: LD_INT 1
90553: ST_TO_ADDR
// if p3 = 115 then
90554: LD_VAR 0 3
90558: PUSH
90559: LD_INT 115
90561: EQUAL
90562: IFFALSE 90572
// sRanger := true ;
90564: LD_ADDR_EXP 140
90568: PUSH
90569: LD_INT 1
90571: ST_TO_ADDR
// end ; end ;
90572: PPOPN 6
90574: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
90575: LD_EXP 87
90579: PUSH
90580: LD_EXP 92
90584: AND
90585: IFFALSE 90709
90587: GO 90589
90589: DISABLE
90590: LD_INT 0
90592: PPUSH
90593: PPUSH
// begin enable ;
90594: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
90595: LD_ADDR_VAR 0 2
90599: PUSH
90600: LD_INT 22
90602: PUSH
90603: LD_OWVAR 2
90607: PUSH
90608: EMPTY
90609: LIST
90610: LIST
90611: PUSH
90612: LD_INT 2
90614: PUSH
90615: LD_INT 34
90617: PUSH
90618: LD_INT 7
90620: PUSH
90621: EMPTY
90622: LIST
90623: LIST
90624: PUSH
90625: LD_INT 34
90627: PUSH
90628: LD_INT 45
90630: PUSH
90631: EMPTY
90632: LIST
90633: LIST
90634: PUSH
90635: LD_INT 34
90637: PUSH
90638: LD_INT 28
90640: PUSH
90641: EMPTY
90642: LIST
90643: LIST
90644: PUSH
90645: LD_INT 34
90647: PUSH
90648: LD_INT 47
90650: PUSH
90651: EMPTY
90652: LIST
90653: LIST
90654: PUSH
90655: EMPTY
90656: LIST
90657: LIST
90658: LIST
90659: LIST
90660: LIST
90661: PUSH
90662: EMPTY
90663: LIST
90664: LIST
90665: PPUSH
90666: CALL_OW 69
90670: ST_TO_ADDR
// if not tmp then
90671: LD_VAR 0 2
90675: NOT
90676: IFFALSE 90680
// exit ;
90678: GO 90709
// for i in tmp do
90680: LD_ADDR_VAR 0 1
90684: PUSH
90685: LD_VAR 0 2
90689: PUSH
90690: FOR_IN
90691: IFFALSE 90707
// begin SetLives ( i , 0 ) ;
90693: LD_VAR 0 1
90697: PPUSH
90698: LD_INT 0
90700: PPUSH
90701: CALL_OW 234
// end ;
90705: GO 90690
90707: POP
90708: POP
// end ;
90709: PPOPN 2
90711: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
90712: LD_EXP 87
90716: PUSH
90717: LD_EXP 93
90721: AND
90722: IFFALSE 90806
90724: GO 90726
90726: DISABLE
90727: LD_INT 0
90729: PPUSH
90730: PPUSH
// begin enable ;
90731: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
90732: LD_ADDR_VAR 0 2
90736: PUSH
90737: LD_INT 22
90739: PUSH
90740: LD_OWVAR 2
90744: PUSH
90745: EMPTY
90746: LIST
90747: LIST
90748: PUSH
90749: LD_INT 32
90751: PUSH
90752: LD_INT 3
90754: PUSH
90755: EMPTY
90756: LIST
90757: LIST
90758: PUSH
90759: EMPTY
90760: LIST
90761: LIST
90762: PPUSH
90763: CALL_OW 69
90767: ST_TO_ADDR
// if not tmp then
90768: LD_VAR 0 2
90772: NOT
90773: IFFALSE 90777
// exit ;
90775: GO 90806
// for i in tmp do
90777: LD_ADDR_VAR 0 1
90781: PUSH
90782: LD_VAR 0 2
90786: PUSH
90787: FOR_IN
90788: IFFALSE 90804
// begin SetLives ( i , 0 ) ;
90790: LD_VAR 0 1
90794: PPUSH
90795: LD_INT 0
90797: PPUSH
90798: CALL_OW 234
// end ;
90802: GO 90787
90804: POP
90805: POP
// end ;
90806: PPOPN 2
90808: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
90809: LD_EXP 87
90813: PUSH
90814: LD_EXP 90
90818: AND
90819: IFFALSE 90912
90821: GO 90823
90823: DISABLE
90824: LD_INT 0
90826: PPUSH
// begin enable ;
90827: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
90828: LD_ADDR_VAR 0 1
90832: PUSH
90833: LD_INT 22
90835: PUSH
90836: LD_OWVAR 2
90840: PUSH
90841: EMPTY
90842: LIST
90843: LIST
90844: PUSH
90845: LD_INT 2
90847: PUSH
90848: LD_INT 25
90850: PUSH
90851: LD_INT 5
90853: PUSH
90854: EMPTY
90855: LIST
90856: LIST
90857: PUSH
90858: LD_INT 25
90860: PUSH
90861: LD_INT 9
90863: PUSH
90864: EMPTY
90865: LIST
90866: LIST
90867: PUSH
90868: LD_INT 25
90870: PUSH
90871: LD_INT 8
90873: PUSH
90874: EMPTY
90875: LIST
90876: LIST
90877: PUSH
90878: EMPTY
90879: LIST
90880: LIST
90881: LIST
90882: LIST
90883: PUSH
90884: EMPTY
90885: LIST
90886: LIST
90887: PPUSH
90888: CALL_OW 69
90892: PUSH
90893: FOR_IN
90894: IFFALSE 90910
// begin SetClass ( i , 1 ) ;
90896: LD_VAR 0 1
90900: PPUSH
90901: LD_INT 1
90903: PPUSH
90904: CALL_OW 336
// end ;
90908: GO 90893
90910: POP
90911: POP
// end ;
90912: PPOPN 1
90914: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
90915: LD_EXP 87
90919: PUSH
90920: LD_EXP 91
90924: AND
90925: PUSH
90926: LD_OWVAR 65
90930: PUSH
90931: LD_INT 7
90933: LESS
90934: AND
90935: IFFALSE 90949
90937: GO 90939
90939: DISABLE
// begin enable ;
90940: ENABLE
// game_speed := 7 ;
90941: LD_ADDR_OWVAR 65
90945: PUSH
90946: LD_INT 7
90948: ST_TO_ADDR
// end ;
90949: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
90950: LD_EXP 87
90954: PUSH
90955: LD_EXP 94
90959: AND
90960: IFFALSE 91162
90962: GO 90964
90964: DISABLE
90965: LD_INT 0
90967: PPUSH
90968: PPUSH
90969: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
90970: LD_ADDR_VAR 0 3
90974: PUSH
90975: LD_INT 81
90977: PUSH
90978: LD_OWVAR 2
90982: PUSH
90983: EMPTY
90984: LIST
90985: LIST
90986: PUSH
90987: LD_INT 21
90989: PUSH
90990: LD_INT 1
90992: PUSH
90993: EMPTY
90994: LIST
90995: LIST
90996: PUSH
90997: EMPTY
90998: LIST
90999: LIST
91000: PPUSH
91001: CALL_OW 69
91005: ST_TO_ADDR
// if not tmp then
91006: LD_VAR 0 3
91010: NOT
91011: IFFALSE 91015
// exit ;
91013: GO 91162
// if tmp > 5 then
91015: LD_VAR 0 3
91019: PUSH
91020: LD_INT 5
91022: GREATER
91023: IFFALSE 91035
// k := 5 else
91025: LD_ADDR_VAR 0 2
91029: PUSH
91030: LD_INT 5
91032: ST_TO_ADDR
91033: GO 91045
// k := tmp ;
91035: LD_ADDR_VAR 0 2
91039: PUSH
91040: LD_VAR 0 3
91044: ST_TO_ADDR
// for i := 1 to k do
91045: LD_ADDR_VAR 0 1
91049: PUSH
91050: DOUBLE
91051: LD_INT 1
91053: DEC
91054: ST_TO_ADDR
91055: LD_VAR 0 2
91059: PUSH
91060: FOR_TO
91061: IFFALSE 91160
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
91063: LD_VAR 0 3
91067: PUSH
91068: LD_VAR 0 1
91072: ARRAY
91073: PPUSH
91074: LD_VAR 0 1
91078: PUSH
91079: LD_INT 4
91081: MOD
91082: PUSH
91083: LD_INT 1
91085: PLUS
91086: PPUSH
91087: CALL_OW 259
91091: PUSH
91092: LD_INT 10
91094: LESS
91095: IFFALSE 91158
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
91097: LD_VAR 0 3
91101: PUSH
91102: LD_VAR 0 1
91106: ARRAY
91107: PPUSH
91108: LD_VAR 0 1
91112: PUSH
91113: LD_INT 4
91115: MOD
91116: PUSH
91117: LD_INT 1
91119: PLUS
91120: PPUSH
91121: LD_VAR 0 3
91125: PUSH
91126: LD_VAR 0 1
91130: ARRAY
91131: PPUSH
91132: LD_VAR 0 1
91136: PUSH
91137: LD_INT 4
91139: MOD
91140: PUSH
91141: LD_INT 1
91143: PLUS
91144: PPUSH
91145: CALL_OW 259
91149: PUSH
91150: LD_INT 1
91152: PLUS
91153: PPUSH
91154: CALL_OW 237
91158: GO 91060
91160: POP
91161: POP
// end ;
91162: PPOPN 3
91164: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
91165: LD_EXP 87
91169: PUSH
91170: LD_EXP 95
91174: AND
91175: IFFALSE 91195
91177: GO 91179
91179: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
91180: LD_INT 4
91182: PPUSH
91183: LD_OWVAR 2
91187: PPUSH
91188: LD_INT 0
91190: PPUSH
91191: CALL_OW 324
91195: END
// every 0 0$1 trigger StreamModeActive and sShovel do
91196: LD_EXP 87
91200: PUSH
91201: LD_EXP 124
91205: AND
91206: IFFALSE 91226
91208: GO 91210
91210: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
91211: LD_INT 19
91213: PPUSH
91214: LD_OWVAR 2
91218: PPUSH
91219: LD_INT 0
91221: PPUSH
91222: CALL_OW 324
91226: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
91227: LD_EXP 87
91231: PUSH
91232: LD_EXP 96
91236: AND
91237: IFFALSE 91339
91239: GO 91241
91241: DISABLE
91242: LD_INT 0
91244: PPUSH
91245: PPUSH
// begin enable ;
91246: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
91247: LD_ADDR_VAR 0 2
91251: PUSH
91252: LD_INT 22
91254: PUSH
91255: LD_OWVAR 2
91259: PUSH
91260: EMPTY
91261: LIST
91262: LIST
91263: PUSH
91264: LD_INT 2
91266: PUSH
91267: LD_INT 34
91269: PUSH
91270: LD_INT 11
91272: PUSH
91273: EMPTY
91274: LIST
91275: LIST
91276: PUSH
91277: LD_INT 34
91279: PUSH
91280: LD_INT 30
91282: PUSH
91283: EMPTY
91284: LIST
91285: LIST
91286: PUSH
91287: EMPTY
91288: LIST
91289: LIST
91290: LIST
91291: PUSH
91292: EMPTY
91293: LIST
91294: LIST
91295: PPUSH
91296: CALL_OW 69
91300: ST_TO_ADDR
// if not tmp then
91301: LD_VAR 0 2
91305: NOT
91306: IFFALSE 91310
// exit ;
91308: GO 91339
// for i in tmp do
91310: LD_ADDR_VAR 0 1
91314: PUSH
91315: LD_VAR 0 2
91319: PUSH
91320: FOR_IN
91321: IFFALSE 91337
// begin SetLives ( i , 0 ) ;
91323: LD_VAR 0 1
91327: PPUSH
91328: LD_INT 0
91330: PPUSH
91331: CALL_OW 234
// end ;
91335: GO 91320
91337: POP
91338: POP
// end ;
91339: PPOPN 2
91341: END
// every 0 0$1 trigger StreamModeActive and sBunker do
91342: LD_EXP 87
91346: PUSH
91347: LD_EXP 97
91351: AND
91352: IFFALSE 91372
91354: GO 91356
91356: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
91357: LD_INT 32
91359: PPUSH
91360: LD_OWVAR 2
91364: PPUSH
91365: LD_INT 0
91367: PPUSH
91368: CALL_OW 324
91372: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
91373: LD_EXP 87
91377: PUSH
91378: LD_EXP 98
91382: AND
91383: IFFALSE 91564
91385: GO 91387
91387: DISABLE
91388: LD_INT 0
91390: PPUSH
91391: PPUSH
91392: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
91393: LD_ADDR_VAR 0 2
91397: PUSH
91398: LD_INT 22
91400: PUSH
91401: LD_OWVAR 2
91405: PUSH
91406: EMPTY
91407: LIST
91408: LIST
91409: PUSH
91410: LD_INT 33
91412: PUSH
91413: LD_INT 3
91415: PUSH
91416: EMPTY
91417: LIST
91418: LIST
91419: PUSH
91420: EMPTY
91421: LIST
91422: LIST
91423: PPUSH
91424: CALL_OW 69
91428: ST_TO_ADDR
// if not tmp then
91429: LD_VAR 0 2
91433: NOT
91434: IFFALSE 91438
// exit ;
91436: GO 91564
// side := 0 ;
91438: LD_ADDR_VAR 0 3
91442: PUSH
91443: LD_INT 0
91445: ST_TO_ADDR
// for i := 1 to 8 do
91446: LD_ADDR_VAR 0 1
91450: PUSH
91451: DOUBLE
91452: LD_INT 1
91454: DEC
91455: ST_TO_ADDR
91456: LD_INT 8
91458: PUSH
91459: FOR_TO
91460: IFFALSE 91508
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
91462: LD_OWVAR 2
91466: PUSH
91467: LD_VAR 0 1
91471: NONEQUAL
91472: PUSH
91473: LD_OWVAR 2
91477: PPUSH
91478: LD_VAR 0 1
91482: PPUSH
91483: CALL_OW 81
91487: PUSH
91488: LD_INT 2
91490: EQUAL
91491: AND
91492: IFFALSE 91506
// begin side := i ;
91494: LD_ADDR_VAR 0 3
91498: PUSH
91499: LD_VAR 0 1
91503: ST_TO_ADDR
// break ;
91504: GO 91508
// end ;
91506: GO 91459
91508: POP
91509: POP
// if not side then
91510: LD_VAR 0 3
91514: NOT
91515: IFFALSE 91519
// exit ;
91517: GO 91564
// for i := 1 to tmp do
91519: LD_ADDR_VAR 0 1
91523: PUSH
91524: DOUBLE
91525: LD_INT 1
91527: DEC
91528: ST_TO_ADDR
91529: LD_VAR 0 2
91533: PUSH
91534: FOR_TO
91535: IFFALSE 91562
// if Prob ( 60 ) then
91537: LD_INT 60
91539: PPUSH
91540: CALL_OW 13
91544: IFFALSE 91560
// SetSide ( i , side ) ;
91546: LD_VAR 0 1
91550: PPUSH
91551: LD_VAR 0 3
91555: PPUSH
91556: CALL_OW 235
91560: GO 91534
91562: POP
91563: POP
// end ;
91564: PPOPN 3
91566: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
91567: LD_EXP 87
91571: PUSH
91572: LD_EXP 100
91576: AND
91577: IFFALSE 91696
91579: GO 91581
91581: DISABLE
91582: LD_INT 0
91584: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
91585: LD_ADDR_VAR 0 1
91589: PUSH
91590: LD_INT 22
91592: PUSH
91593: LD_OWVAR 2
91597: PUSH
91598: EMPTY
91599: LIST
91600: LIST
91601: PUSH
91602: LD_INT 21
91604: PUSH
91605: LD_INT 1
91607: PUSH
91608: EMPTY
91609: LIST
91610: LIST
91611: PUSH
91612: LD_INT 3
91614: PUSH
91615: LD_INT 23
91617: PUSH
91618: LD_INT 0
91620: PUSH
91621: EMPTY
91622: LIST
91623: LIST
91624: PUSH
91625: EMPTY
91626: LIST
91627: LIST
91628: PUSH
91629: EMPTY
91630: LIST
91631: LIST
91632: LIST
91633: PPUSH
91634: CALL_OW 69
91638: PUSH
91639: FOR_IN
91640: IFFALSE 91694
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
91642: LD_VAR 0 1
91646: PPUSH
91647: CALL_OW 257
91651: PUSH
91652: LD_INT 1
91654: PUSH
91655: LD_INT 2
91657: PUSH
91658: LD_INT 3
91660: PUSH
91661: LD_INT 4
91663: PUSH
91664: EMPTY
91665: LIST
91666: LIST
91667: LIST
91668: LIST
91669: IN
91670: IFFALSE 91692
// SetClass ( un , rand ( 1 , 4 ) ) ;
91672: LD_VAR 0 1
91676: PPUSH
91677: LD_INT 1
91679: PPUSH
91680: LD_INT 4
91682: PPUSH
91683: CALL_OW 12
91687: PPUSH
91688: CALL_OW 336
91692: GO 91639
91694: POP
91695: POP
// end ;
91696: PPOPN 1
91698: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
91699: LD_EXP 87
91703: PUSH
91704: LD_EXP 99
91708: AND
91709: IFFALSE 91788
91711: GO 91713
91713: DISABLE
91714: LD_INT 0
91716: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
91717: LD_ADDR_VAR 0 1
91721: PUSH
91722: LD_INT 22
91724: PUSH
91725: LD_OWVAR 2
91729: PUSH
91730: EMPTY
91731: LIST
91732: LIST
91733: PUSH
91734: LD_INT 21
91736: PUSH
91737: LD_INT 3
91739: PUSH
91740: EMPTY
91741: LIST
91742: LIST
91743: PUSH
91744: EMPTY
91745: LIST
91746: LIST
91747: PPUSH
91748: CALL_OW 69
91752: ST_TO_ADDR
// if not tmp then
91753: LD_VAR 0 1
91757: NOT
91758: IFFALSE 91762
// exit ;
91760: GO 91788
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
91762: LD_VAR 0 1
91766: PUSH
91767: LD_INT 1
91769: PPUSH
91770: LD_VAR 0 1
91774: PPUSH
91775: CALL_OW 12
91779: ARRAY
91780: PPUSH
91781: LD_INT 100
91783: PPUSH
91784: CALL_OW 234
// end ;
91788: PPOPN 1
91790: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
91791: LD_EXP 87
91795: PUSH
91796: LD_EXP 101
91800: AND
91801: IFFALSE 91899
91803: GO 91805
91805: DISABLE
91806: LD_INT 0
91808: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
91809: LD_ADDR_VAR 0 1
91813: PUSH
91814: LD_INT 22
91816: PUSH
91817: LD_OWVAR 2
91821: PUSH
91822: EMPTY
91823: LIST
91824: LIST
91825: PUSH
91826: LD_INT 21
91828: PUSH
91829: LD_INT 1
91831: PUSH
91832: EMPTY
91833: LIST
91834: LIST
91835: PUSH
91836: EMPTY
91837: LIST
91838: LIST
91839: PPUSH
91840: CALL_OW 69
91844: ST_TO_ADDR
// if not tmp then
91845: LD_VAR 0 1
91849: NOT
91850: IFFALSE 91854
// exit ;
91852: GO 91899
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
91854: LD_VAR 0 1
91858: PUSH
91859: LD_INT 1
91861: PPUSH
91862: LD_VAR 0 1
91866: PPUSH
91867: CALL_OW 12
91871: ARRAY
91872: PPUSH
91873: LD_INT 1
91875: PPUSH
91876: LD_INT 4
91878: PPUSH
91879: CALL_OW 12
91883: PPUSH
91884: LD_INT 3000
91886: PPUSH
91887: LD_INT 9000
91889: PPUSH
91890: CALL_OW 12
91894: PPUSH
91895: CALL_OW 492
// end ;
91899: PPOPN 1
91901: END
// every 0 0$1 trigger StreamModeActive and sDepot do
91902: LD_EXP 87
91906: PUSH
91907: LD_EXP 102
91911: AND
91912: IFFALSE 91932
91914: GO 91916
91916: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
91917: LD_INT 1
91919: PPUSH
91920: LD_OWVAR 2
91924: PPUSH
91925: LD_INT 0
91927: PPUSH
91928: CALL_OW 324
91932: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
91933: LD_EXP 87
91937: PUSH
91938: LD_EXP 103
91942: AND
91943: IFFALSE 92026
91945: GO 91947
91947: DISABLE
91948: LD_INT 0
91950: PPUSH
91951: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
91952: LD_ADDR_VAR 0 2
91956: PUSH
91957: LD_INT 22
91959: PUSH
91960: LD_OWVAR 2
91964: PUSH
91965: EMPTY
91966: LIST
91967: LIST
91968: PUSH
91969: LD_INT 21
91971: PUSH
91972: LD_INT 3
91974: PUSH
91975: EMPTY
91976: LIST
91977: LIST
91978: PUSH
91979: EMPTY
91980: LIST
91981: LIST
91982: PPUSH
91983: CALL_OW 69
91987: ST_TO_ADDR
// if not tmp then
91988: LD_VAR 0 2
91992: NOT
91993: IFFALSE 91997
// exit ;
91995: GO 92026
// for i in tmp do
91997: LD_ADDR_VAR 0 1
92001: PUSH
92002: LD_VAR 0 2
92006: PUSH
92007: FOR_IN
92008: IFFALSE 92024
// SetBLevel ( i , 10 ) ;
92010: LD_VAR 0 1
92014: PPUSH
92015: LD_INT 10
92017: PPUSH
92018: CALL_OW 241
92022: GO 92007
92024: POP
92025: POP
// end ;
92026: PPOPN 2
92028: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
92029: LD_EXP 87
92033: PUSH
92034: LD_EXP 104
92038: AND
92039: IFFALSE 92150
92041: GO 92043
92043: DISABLE
92044: LD_INT 0
92046: PPUSH
92047: PPUSH
92048: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
92049: LD_ADDR_VAR 0 3
92053: PUSH
92054: LD_INT 22
92056: PUSH
92057: LD_OWVAR 2
92061: PUSH
92062: EMPTY
92063: LIST
92064: LIST
92065: PUSH
92066: LD_INT 25
92068: PUSH
92069: LD_INT 1
92071: PUSH
92072: EMPTY
92073: LIST
92074: LIST
92075: PUSH
92076: EMPTY
92077: LIST
92078: LIST
92079: PPUSH
92080: CALL_OW 69
92084: ST_TO_ADDR
// if not tmp then
92085: LD_VAR 0 3
92089: NOT
92090: IFFALSE 92094
// exit ;
92092: GO 92150
// un := tmp [ rand ( 1 , tmp ) ] ;
92094: LD_ADDR_VAR 0 2
92098: PUSH
92099: LD_VAR 0 3
92103: PUSH
92104: LD_INT 1
92106: PPUSH
92107: LD_VAR 0 3
92111: PPUSH
92112: CALL_OW 12
92116: ARRAY
92117: ST_TO_ADDR
// if Crawls ( un ) then
92118: LD_VAR 0 2
92122: PPUSH
92123: CALL_OW 318
92127: IFFALSE 92138
// ComWalk ( un ) ;
92129: LD_VAR 0 2
92133: PPUSH
92134: CALL_OW 138
// SetClass ( un , class_sniper ) ;
92138: LD_VAR 0 2
92142: PPUSH
92143: LD_INT 5
92145: PPUSH
92146: CALL_OW 336
// end ;
92150: PPOPN 3
92152: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
92153: LD_EXP 87
92157: PUSH
92158: LD_EXP 105
92162: AND
92163: PUSH
92164: LD_OWVAR 67
92168: PUSH
92169: LD_INT 3
92171: LESS
92172: AND
92173: IFFALSE 92192
92175: GO 92177
92177: DISABLE
// Difficulty := Difficulty + 1 ;
92178: LD_ADDR_OWVAR 67
92182: PUSH
92183: LD_OWVAR 67
92187: PUSH
92188: LD_INT 1
92190: PLUS
92191: ST_TO_ADDR
92192: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
92193: LD_EXP 87
92197: PUSH
92198: LD_EXP 106
92202: AND
92203: IFFALSE 92306
92205: GO 92207
92207: DISABLE
92208: LD_INT 0
92210: PPUSH
// begin for i := 1 to 5 do
92211: LD_ADDR_VAR 0 1
92215: PUSH
92216: DOUBLE
92217: LD_INT 1
92219: DEC
92220: ST_TO_ADDR
92221: LD_INT 5
92223: PUSH
92224: FOR_TO
92225: IFFALSE 92304
// begin uc_nation := nation_nature ;
92227: LD_ADDR_OWVAR 21
92231: PUSH
92232: LD_INT 0
92234: ST_TO_ADDR
// uc_side := 0 ;
92235: LD_ADDR_OWVAR 20
92239: PUSH
92240: LD_INT 0
92242: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
92243: LD_ADDR_OWVAR 29
92247: PUSH
92248: LD_INT 12
92250: PUSH
92251: LD_INT 12
92253: PUSH
92254: EMPTY
92255: LIST
92256: LIST
92257: ST_TO_ADDR
// hc_agressivity := 20 ;
92258: LD_ADDR_OWVAR 35
92262: PUSH
92263: LD_INT 20
92265: ST_TO_ADDR
// hc_class := class_tiger ;
92266: LD_ADDR_OWVAR 28
92270: PUSH
92271: LD_INT 14
92273: ST_TO_ADDR
// hc_gallery :=  ;
92274: LD_ADDR_OWVAR 33
92278: PUSH
92279: LD_STRING 
92281: ST_TO_ADDR
// hc_name :=  ;
92282: LD_ADDR_OWVAR 26
92286: PUSH
92287: LD_STRING 
92289: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
92290: CALL_OW 44
92294: PPUSH
92295: LD_INT 0
92297: PPUSH
92298: CALL_OW 51
// end ;
92302: GO 92224
92304: POP
92305: POP
// end ;
92306: PPOPN 1
92308: END
// every 0 0$1 trigger StreamModeActive and sBomb do
92309: LD_EXP 87
92313: PUSH
92314: LD_EXP 107
92318: AND
92319: IFFALSE 92328
92321: GO 92323
92323: DISABLE
// StreamSibBomb ;
92324: CALL 92329 0 0
92328: END
// export function StreamSibBomb ; var i , x , y ; begin
92329: LD_INT 0
92331: PPUSH
92332: PPUSH
92333: PPUSH
92334: PPUSH
// result := false ;
92335: LD_ADDR_VAR 0 1
92339: PUSH
92340: LD_INT 0
92342: ST_TO_ADDR
// for i := 1 to 16 do
92343: LD_ADDR_VAR 0 2
92347: PUSH
92348: DOUBLE
92349: LD_INT 1
92351: DEC
92352: ST_TO_ADDR
92353: LD_INT 16
92355: PUSH
92356: FOR_TO
92357: IFFALSE 92556
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
92359: LD_ADDR_VAR 0 3
92363: PUSH
92364: LD_INT 10
92366: PUSH
92367: LD_INT 20
92369: PUSH
92370: LD_INT 30
92372: PUSH
92373: LD_INT 40
92375: PUSH
92376: LD_INT 50
92378: PUSH
92379: LD_INT 60
92381: PUSH
92382: LD_INT 70
92384: PUSH
92385: LD_INT 80
92387: PUSH
92388: LD_INT 90
92390: PUSH
92391: LD_INT 100
92393: PUSH
92394: LD_INT 110
92396: PUSH
92397: LD_INT 120
92399: PUSH
92400: LD_INT 130
92402: PUSH
92403: LD_INT 140
92405: PUSH
92406: LD_INT 150
92408: PUSH
92409: EMPTY
92410: LIST
92411: LIST
92412: LIST
92413: LIST
92414: LIST
92415: LIST
92416: LIST
92417: LIST
92418: LIST
92419: LIST
92420: LIST
92421: LIST
92422: LIST
92423: LIST
92424: LIST
92425: PUSH
92426: LD_INT 1
92428: PPUSH
92429: LD_INT 15
92431: PPUSH
92432: CALL_OW 12
92436: ARRAY
92437: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
92438: LD_ADDR_VAR 0 4
92442: PUSH
92443: LD_INT 10
92445: PUSH
92446: LD_INT 20
92448: PUSH
92449: LD_INT 30
92451: PUSH
92452: LD_INT 40
92454: PUSH
92455: LD_INT 50
92457: PUSH
92458: LD_INT 60
92460: PUSH
92461: LD_INT 70
92463: PUSH
92464: LD_INT 80
92466: PUSH
92467: LD_INT 90
92469: PUSH
92470: LD_INT 100
92472: PUSH
92473: LD_INT 110
92475: PUSH
92476: LD_INT 120
92478: PUSH
92479: LD_INT 130
92481: PUSH
92482: LD_INT 140
92484: PUSH
92485: LD_INT 150
92487: PUSH
92488: EMPTY
92489: LIST
92490: LIST
92491: LIST
92492: LIST
92493: LIST
92494: LIST
92495: LIST
92496: LIST
92497: LIST
92498: LIST
92499: LIST
92500: LIST
92501: LIST
92502: LIST
92503: LIST
92504: PUSH
92505: LD_INT 1
92507: PPUSH
92508: LD_INT 15
92510: PPUSH
92511: CALL_OW 12
92515: ARRAY
92516: ST_TO_ADDR
// if ValidHex ( x , y ) then
92517: LD_VAR 0 3
92521: PPUSH
92522: LD_VAR 0 4
92526: PPUSH
92527: CALL_OW 488
92531: IFFALSE 92554
// begin result := [ x , y ] ;
92533: LD_ADDR_VAR 0 1
92537: PUSH
92538: LD_VAR 0 3
92542: PUSH
92543: LD_VAR 0 4
92547: PUSH
92548: EMPTY
92549: LIST
92550: LIST
92551: ST_TO_ADDR
// break ;
92552: GO 92556
// end ; end ;
92554: GO 92356
92556: POP
92557: POP
// if result then
92558: LD_VAR 0 1
92562: IFFALSE 92622
// begin ToLua ( playSibBomb() ) ;
92564: LD_STRING playSibBomb()
92566: PPUSH
92567: CALL_OW 559
// wait ( 0 0$14 ) ;
92571: LD_INT 490
92573: PPUSH
92574: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
92578: LD_VAR 0 1
92582: PUSH
92583: LD_INT 1
92585: ARRAY
92586: PPUSH
92587: LD_VAR 0 1
92591: PUSH
92592: LD_INT 2
92594: ARRAY
92595: PPUSH
92596: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
92600: LD_VAR 0 1
92604: PUSH
92605: LD_INT 1
92607: ARRAY
92608: PPUSH
92609: LD_VAR 0 1
92613: PUSH
92614: LD_INT 2
92616: ARRAY
92617: PPUSH
92618: CALL_OW 429
// end ; end ;
92622: LD_VAR 0 1
92626: RET
// every 0 0$1 trigger StreamModeActive and sReset do
92627: LD_EXP 87
92631: PUSH
92632: LD_EXP 109
92636: AND
92637: IFFALSE 92649
92639: GO 92641
92641: DISABLE
// YouLost (  ) ;
92642: LD_STRING 
92644: PPUSH
92645: CALL_OW 104
92649: END
// every 0 0$1 trigger StreamModeActive and sFog do
92650: LD_EXP 87
92654: PUSH
92655: LD_EXP 108
92659: AND
92660: IFFALSE 92674
92662: GO 92664
92664: DISABLE
// FogOff ( your_side ) ;
92665: LD_OWVAR 2
92669: PPUSH
92670: CALL_OW 344
92674: END
// every 0 0$1 trigger StreamModeActive and sSun do
92675: LD_EXP 87
92679: PUSH
92680: LD_EXP 110
92684: AND
92685: IFFALSE 92713
92687: GO 92689
92689: DISABLE
// begin solar_recharge_percent := 0 ;
92690: LD_ADDR_OWVAR 79
92694: PUSH
92695: LD_INT 0
92697: ST_TO_ADDR
// wait ( 5 5$00 ) ;
92698: LD_INT 10500
92700: PPUSH
92701: CALL_OW 67
// solar_recharge_percent := 100 ;
92705: LD_ADDR_OWVAR 79
92709: PUSH
92710: LD_INT 100
92712: ST_TO_ADDR
// end ;
92713: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
92714: LD_EXP 87
92718: PUSH
92719: LD_EXP 111
92723: AND
92724: IFFALSE 92963
92726: GO 92728
92728: DISABLE
92729: LD_INT 0
92731: PPUSH
92732: PPUSH
92733: PPUSH
// begin tmp := [ ] ;
92734: LD_ADDR_VAR 0 3
92738: PUSH
92739: EMPTY
92740: ST_TO_ADDR
// for i := 1 to 6 do
92741: LD_ADDR_VAR 0 1
92745: PUSH
92746: DOUBLE
92747: LD_INT 1
92749: DEC
92750: ST_TO_ADDR
92751: LD_INT 6
92753: PUSH
92754: FOR_TO
92755: IFFALSE 92860
// begin uc_nation := nation_nature ;
92757: LD_ADDR_OWVAR 21
92761: PUSH
92762: LD_INT 0
92764: ST_TO_ADDR
// uc_side := 0 ;
92765: LD_ADDR_OWVAR 20
92769: PUSH
92770: LD_INT 0
92772: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
92773: LD_ADDR_OWVAR 29
92777: PUSH
92778: LD_INT 12
92780: PUSH
92781: LD_INT 12
92783: PUSH
92784: EMPTY
92785: LIST
92786: LIST
92787: ST_TO_ADDR
// hc_agressivity := 20 ;
92788: LD_ADDR_OWVAR 35
92792: PUSH
92793: LD_INT 20
92795: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
92796: LD_ADDR_OWVAR 28
92800: PUSH
92801: LD_INT 17
92803: ST_TO_ADDR
// hc_gallery :=  ;
92804: LD_ADDR_OWVAR 33
92808: PUSH
92809: LD_STRING 
92811: ST_TO_ADDR
// hc_name :=  ;
92812: LD_ADDR_OWVAR 26
92816: PUSH
92817: LD_STRING 
92819: ST_TO_ADDR
// un := CreateHuman ;
92820: LD_ADDR_VAR 0 2
92824: PUSH
92825: CALL_OW 44
92829: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
92830: LD_VAR 0 2
92834: PPUSH
92835: LD_INT 1
92837: PPUSH
92838: CALL_OW 51
// tmp := tmp ^ un ;
92842: LD_ADDR_VAR 0 3
92846: PUSH
92847: LD_VAR 0 3
92851: PUSH
92852: LD_VAR 0 2
92856: ADD
92857: ST_TO_ADDR
// end ;
92858: GO 92754
92860: POP
92861: POP
// repeat wait ( 0 0$1 ) ;
92862: LD_INT 35
92864: PPUSH
92865: CALL_OW 67
// for un in tmp do
92869: LD_ADDR_VAR 0 2
92873: PUSH
92874: LD_VAR 0 3
92878: PUSH
92879: FOR_IN
92880: IFFALSE 92954
// begin if IsDead ( un ) then
92882: LD_VAR 0 2
92886: PPUSH
92887: CALL_OW 301
92891: IFFALSE 92911
// begin tmp := tmp diff un ;
92893: LD_ADDR_VAR 0 3
92897: PUSH
92898: LD_VAR 0 3
92902: PUSH
92903: LD_VAR 0 2
92907: DIFF
92908: ST_TO_ADDR
// continue ;
92909: GO 92879
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
92911: LD_VAR 0 2
92915: PPUSH
92916: LD_INT 3
92918: PUSH
92919: LD_INT 22
92921: PUSH
92922: LD_INT 0
92924: PUSH
92925: EMPTY
92926: LIST
92927: LIST
92928: PUSH
92929: EMPTY
92930: LIST
92931: LIST
92932: PPUSH
92933: CALL_OW 69
92937: PPUSH
92938: LD_VAR 0 2
92942: PPUSH
92943: CALL_OW 74
92947: PPUSH
92948: CALL_OW 115
// end ;
92952: GO 92879
92954: POP
92955: POP
// until not tmp ;
92956: LD_VAR 0 3
92960: NOT
92961: IFFALSE 92862
// end ;
92963: PPOPN 3
92965: END
// every 0 0$1 trigger StreamModeActive and sTroll do
92966: LD_EXP 87
92970: PUSH
92971: LD_EXP 112
92975: AND
92976: IFFALSE 93030
92978: GO 92980
92980: DISABLE
// begin ToLua ( displayTroll(); ) ;
92981: LD_STRING displayTroll();
92983: PPUSH
92984: CALL_OW 559
// wait ( 3 3$00 ) ;
92988: LD_INT 6300
92990: PPUSH
92991: CALL_OW 67
// ToLua ( hideTroll(); ) ;
92995: LD_STRING hideTroll();
92997: PPUSH
92998: CALL_OW 559
// wait ( 1 1$00 ) ;
93002: LD_INT 2100
93004: PPUSH
93005: CALL_OW 67
// ToLua ( displayTroll(); ) ;
93009: LD_STRING displayTroll();
93011: PPUSH
93012: CALL_OW 559
// wait ( 1 1$00 ) ;
93016: LD_INT 2100
93018: PPUSH
93019: CALL_OW 67
// ToLua ( hideTroll(); ) ;
93023: LD_STRING hideTroll();
93025: PPUSH
93026: CALL_OW 559
// end ;
93030: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
93031: LD_EXP 87
93035: PUSH
93036: LD_EXP 113
93040: AND
93041: IFFALSE 93104
93043: GO 93045
93045: DISABLE
93046: LD_INT 0
93048: PPUSH
// begin p := 0 ;
93049: LD_ADDR_VAR 0 1
93053: PUSH
93054: LD_INT 0
93056: ST_TO_ADDR
// repeat game_speed := 1 ;
93057: LD_ADDR_OWVAR 65
93061: PUSH
93062: LD_INT 1
93064: ST_TO_ADDR
// wait ( 0 0$1 ) ;
93065: LD_INT 35
93067: PPUSH
93068: CALL_OW 67
// p := p + 1 ;
93072: LD_ADDR_VAR 0 1
93076: PUSH
93077: LD_VAR 0 1
93081: PUSH
93082: LD_INT 1
93084: PLUS
93085: ST_TO_ADDR
// until p >= 60 ;
93086: LD_VAR 0 1
93090: PUSH
93091: LD_INT 60
93093: GREATEREQUAL
93094: IFFALSE 93057
// game_speed := 4 ;
93096: LD_ADDR_OWVAR 65
93100: PUSH
93101: LD_INT 4
93103: ST_TO_ADDR
// end ;
93104: PPOPN 1
93106: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
93107: LD_EXP 87
93111: PUSH
93112: LD_EXP 114
93116: AND
93117: IFFALSE 93263
93119: GO 93121
93121: DISABLE
93122: LD_INT 0
93124: PPUSH
93125: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
93126: LD_ADDR_VAR 0 1
93130: PUSH
93131: LD_INT 22
93133: PUSH
93134: LD_OWVAR 2
93138: PUSH
93139: EMPTY
93140: LIST
93141: LIST
93142: PUSH
93143: LD_INT 2
93145: PUSH
93146: LD_INT 30
93148: PUSH
93149: LD_INT 0
93151: PUSH
93152: EMPTY
93153: LIST
93154: LIST
93155: PUSH
93156: LD_INT 30
93158: PUSH
93159: LD_INT 1
93161: PUSH
93162: EMPTY
93163: LIST
93164: LIST
93165: PUSH
93166: EMPTY
93167: LIST
93168: LIST
93169: LIST
93170: PUSH
93171: EMPTY
93172: LIST
93173: LIST
93174: PPUSH
93175: CALL_OW 69
93179: ST_TO_ADDR
// if not depot then
93180: LD_VAR 0 1
93184: NOT
93185: IFFALSE 93189
// exit ;
93187: GO 93263
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
93189: LD_ADDR_VAR 0 2
93193: PUSH
93194: LD_VAR 0 1
93198: PUSH
93199: LD_INT 1
93201: PPUSH
93202: LD_VAR 0 1
93206: PPUSH
93207: CALL_OW 12
93211: ARRAY
93212: PPUSH
93213: CALL_OW 274
93217: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
93218: LD_VAR 0 2
93222: PPUSH
93223: LD_INT 1
93225: PPUSH
93226: LD_INT 0
93228: PPUSH
93229: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
93233: LD_VAR 0 2
93237: PPUSH
93238: LD_INT 2
93240: PPUSH
93241: LD_INT 0
93243: PPUSH
93244: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
93248: LD_VAR 0 2
93252: PPUSH
93253: LD_INT 3
93255: PPUSH
93256: LD_INT 0
93258: PPUSH
93259: CALL_OW 277
// end ;
93263: PPOPN 2
93265: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
93266: LD_EXP 87
93270: PUSH
93271: LD_EXP 115
93275: AND
93276: IFFALSE 93373
93278: GO 93280
93280: DISABLE
93281: LD_INT 0
93283: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
93284: LD_ADDR_VAR 0 1
93288: PUSH
93289: LD_INT 22
93291: PUSH
93292: LD_OWVAR 2
93296: PUSH
93297: EMPTY
93298: LIST
93299: LIST
93300: PUSH
93301: LD_INT 21
93303: PUSH
93304: LD_INT 1
93306: PUSH
93307: EMPTY
93308: LIST
93309: LIST
93310: PUSH
93311: LD_INT 3
93313: PUSH
93314: LD_INT 23
93316: PUSH
93317: LD_INT 0
93319: PUSH
93320: EMPTY
93321: LIST
93322: LIST
93323: PUSH
93324: EMPTY
93325: LIST
93326: LIST
93327: PUSH
93328: EMPTY
93329: LIST
93330: LIST
93331: LIST
93332: PPUSH
93333: CALL_OW 69
93337: ST_TO_ADDR
// if not tmp then
93338: LD_VAR 0 1
93342: NOT
93343: IFFALSE 93347
// exit ;
93345: GO 93373
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
93347: LD_VAR 0 1
93351: PUSH
93352: LD_INT 1
93354: PPUSH
93355: LD_VAR 0 1
93359: PPUSH
93360: CALL_OW 12
93364: ARRAY
93365: PPUSH
93366: LD_INT 200
93368: PPUSH
93369: CALL_OW 234
// end ;
93373: PPOPN 1
93375: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
93376: LD_EXP 87
93380: PUSH
93381: LD_EXP 116
93385: AND
93386: IFFALSE 93465
93388: GO 93390
93390: DISABLE
93391: LD_INT 0
93393: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
93394: LD_ADDR_VAR 0 1
93398: PUSH
93399: LD_INT 22
93401: PUSH
93402: LD_OWVAR 2
93406: PUSH
93407: EMPTY
93408: LIST
93409: LIST
93410: PUSH
93411: LD_INT 21
93413: PUSH
93414: LD_INT 2
93416: PUSH
93417: EMPTY
93418: LIST
93419: LIST
93420: PUSH
93421: EMPTY
93422: LIST
93423: LIST
93424: PPUSH
93425: CALL_OW 69
93429: ST_TO_ADDR
// if not tmp then
93430: LD_VAR 0 1
93434: NOT
93435: IFFALSE 93439
// exit ;
93437: GO 93465
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
93439: LD_VAR 0 1
93443: PUSH
93444: LD_INT 1
93446: PPUSH
93447: LD_VAR 0 1
93451: PPUSH
93452: CALL_OW 12
93456: ARRAY
93457: PPUSH
93458: LD_INT 60
93460: PPUSH
93461: CALL_OW 234
// end ;
93465: PPOPN 1
93467: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
93468: LD_EXP 87
93472: PUSH
93473: LD_EXP 117
93477: AND
93478: IFFALSE 93577
93480: GO 93482
93482: DISABLE
93483: LD_INT 0
93485: PPUSH
93486: PPUSH
// begin enable ;
93487: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
93488: LD_ADDR_VAR 0 1
93492: PUSH
93493: LD_INT 22
93495: PUSH
93496: LD_OWVAR 2
93500: PUSH
93501: EMPTY
93502: LIST
93503: LIST
93504: PUSH
93505: LD_INT 61
93507: PUSH
93508: EMPTY
93509: LIST
93510: PUSH
93511: LD_INT 33
93513: PUSH
93514: LD_INT 2
93516: PUSH
93517: EMPTY
93518: LIST
93519: LIST
93520: PUSH
93521: EMPTY
93522: LIST
93523: LIST
93524: LIST
93525: PPUSH
93526: CALL_OW 69
93530: ST_TO_ADDR
// if not tmp then
93531: LD_VAR 0 1
93535: NOT
93536: IFFALSE 93540
// exit ;
93538: GO 93577
// for i in tmp do
93540: LD_ADDR_VAR 0 2
93544: PUSH
93545: LD_VAR 0 1
93549: PUSH
93550: FOR_IN
93551: IFFALSE 93575
// if IsControledBy ( i ) then
93553: LD_VAR 0 2
93557: PPUSH
93558: CALL_OW 312
93562: IFFALSE 93573
// ComUnlink ( i ) ;
93564: LD_VAR 0 2
93568: PPUSH
93569: CALL_OW 136
93573: GO 93550
93575: POP
93576: POP
// end ;
93577: PPOPN 2
93579: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
93580: LD_EXP 87
93584: PUSH
93585: LD_EXP 118
93589: AND
93590: IFFALSE 93730
93592: GO 93594
93594: DISABLE
93595: LD_INT 0
93597: PPUSH
93598: PPUSH
// begin ToLua ( displayPowell(); ) ;
93599: LD_STRING displayPowell();
93601: PPUSH
93602: CALL_OW 559
// uc_side := 0 ;
93606: LD_ADDR_OWVAR 20
93610: PUSH
93611: LD_INT 0
93613: ST_TO_ADDR
// uc_nation := 2 ;
93614: LD_ADDR_OWVAR 21
93618: PUSH
93619: LD_INT 2
93621: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
93622: LD_ADDR_OWVAR 37
93626: PUSH
93627: LD_INT 14
93629: ST_TO_ADDR
// vc_engine := engine_siberite ;
93630: LD_ADDR_OWVAR 39
93634: PUSH
93635: LD_INT 3
93637: ST_TO_ADDR
// vc_control := control_apeman ;
93638: LD_ADDR_OWVAR 38
93642: PUSH
93643: LD_INT 5
93645: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
93646: LD_ADDR_OWVAR 40
93650: PUSH
93651: LD_INT 29
93653: ST_TO_ADDR
// un := CreateVehicle ;
93654: LD_ADDR_VAR 0 2
93658: PUSH
93659: CALL_OW 45
93663: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
93664: LD_VAR 0 2
93668: PPUSH
93669: LD_INT 1
93671: PPUSH
93672: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
93676: LD_INT 35
93678: PPUSH
93679: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
93683: LD_VAR 0 2
93687: PPUSH
93688: LD_INT 22
93690: PUSH
93691: LD_OWVAR 2
93695: PUSH
93696: EMPTY
93697: LIST
93698: LIST
93699: PPUSH
93700: CALL_OW 69
93704: PPUSH
93705: LD_VAR 0 2
93709: PPUSH
93710: CALL_OW 74
93714: PPUSH
93715: CALL_OW 115
// until IsDead ( un ) ;
93719: LD_VAR 0 2
93723: PPUSH
93724: CALL_OW 301
93728: IFFALSE 93676
// end ;
93730: PPOPN 2
93732: END
// every 0 0$1 trigger StreamModeActive and sStu do
93733: LD_EXP 87
93737: PUSH
93738: LD_EXP 126
93742: AND
93743: IFFALSE 93759
93745: GO 93747
93747: DISABLE
// begin ToLua ( displayStucuk(); ) ;
93748: LD_STRING displayStucuk();
93750: PPUSH
93751: CALL_OW 559
// ResetFog ;
93755: CALL_OW 335
// end ;
93759: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
93760: LD_EXP 87
93764: PUSH
93765: LD_EXP 119
93769: AND
93770: IFFALSE 93911
93772: GO 93774
93774: DISABLE
93775: LD_INT 0
93777: PPUSH
93778: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
93779: LD_ADDR_VAR 0 2
93783: PUSH
93784: LD_INT 22
93786: PUSH
93787: LD_OWVAR 2
93791: PUSH
93792: EMPTY
93793: LIST
93794: LIST
93795: PUSH
93796: LD_INT 21
93798: PUSH
93799: LD_INT 1
93801: PUSH
93802: EMPTY
93803: LIST
93804: LIST
93805: PUSH
93806: EMPTY
93807: LIST
93808: LIST
93809: PPUSH
93810: CALL_OW 69
93814: ST_TO_ADDR
// if not tmp then
93815: LD_VAR 0 2
93819: NOT
93820: IFFALSE 93824
// exit ;
93822: GO 93911
// un := tmp [ rand ( 1 , tmp ) ] ;
93824: LD_ADDR_VAR 0 1
93828: PUSH
93829: LD_VAR 0 2
93833: PUSH
93834: LD_INT 1
93836: PPUSH
93837: LD_VAR 0 2
93841: PPUSH
93842: CALL_OW 12
93846: ARRAY
93847: ST_TO_ADDR
// SetSide ( un , 0 ) ;
93848: LD_VAR 0 1
93852: PPUSH
93853: LD_INT 0
93855: PPUSH
93856: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
93860: LD_VAR 0 1
93864: PPUSH
93865: LD_OWVAR 3
93869: PUSH
93870: LD_VAR 0 1
93874: DIFF
93875: PPUSH
93876: LD_VAR 0 1
93880: PPUSH
93881: CALL_OW 74
93885: PPUSH
93886: CALL_OW 115
// wait ( 0 0$20 ) ;
93890: LD_INT 700
93892: PPUSH
93893: CALL_OW 67
// SetSide ( un , your_side ) ;
93897: LD_VAR 0 1
93901: PPUSH
93902: LD_OWVAR 2
93906: PPUSH
93907: CALL_OW 235
// end ;
93911: PPOPN 2
93913: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
93914: LD_EXP 87
93918: PUSH
93919: LD_EXP 120
93923: AND
93924: IFFALSE 94030
93926: GO 93928
93928: DISABLE
93929: LD_INT 0
93931: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
93932: LD_ADDR_VAR 0 1
93936: PUSH
93937: LD_INT 22
93939: PUSH
93940: LD_OWVAR 2
93944: PUSH
93945: EMPTY
93946: LIST
93947: LIST
93948: PUSH
93949: LD_INT 2
93951: PUSH
93952: LD_INT 30
93954: PUSH
93955: LD_INT 0
93957: PUSH
93958: EMPTY
93959: LIST
93960: LIST
93961: PUSH
93962: LD_INT 30
93964: PUSH
93965: LD_INT 1
93967: PUSH
93968: EMPTY
93969: LIST
93970: LIST
93971: PUSH
93972: EMPTY
93973: LIST
93974: LIST
93975: LIST
93976: PUSH
93977: EMPTY
93978: LIST
93979: LIST
93980: PPUSH
93981: CALL_OW 69
93985: ST_TO_ADDR
// if not depot then
93986: LD_VAR 0 1
93990: NOT
93991: IFFALSE 93995
// exit ;
93993: GO 94030
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
93995: LD_VAR 0 1
93999: PUSH
94000: LD_INT 1
94002: ARRAY
94003: PPUSH
94004: CALL_OW 250
94008: PPUSH
94009: LD_VAR 0 1
94013: PUSH
94014: LD_INT 1
94016: ARRAY
94017: PPUSH
94018: CALL_OW 251
94022: PPUSH
94023: LD_INT 70
94025: PPUSH
94026: CALL_OW 495
// end ;
94030: PPOPN 1
94032: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
94033: LD_EXP 87
94037: PUSH
94038: LD_EXP 121
94042: AND
94043: IFFALSE 94254
94045: GO 94047
94047: DISABLE
94048: LD_INT 0
94050: PPUSH
94051: PPUSH
94052: PPUSH
94053: PPUSH
94054: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
94055: LD_ADDR_VAR 0 5
94059: PUSH
94060: LD_INT 22
94062: PUSH
94063: LD_OWVAR 2
94067: PUSH
94068: EMPTY
94069: LIST
94070: LIST
94071: PUSH
94072: LD_INT 21
94074: PUSH
94075: LD_INT 1
94077: PUSH
94078: EMPTY
94079: LIST
94080: LIST
94081: PUSH
94082: EMPTY
94083: LIST
94084: LIST
94085: PPUSH
94086: CALL_OW 69
94090: ST_TO_ADDR
// if not tmp then
94091: LD_VAR 0 5
94095: NOT
94096: IFFALSE 94100
// exit ;
94098: GO 94254
// for i in tmp do
94100: LD_ADDR_VAR 0 1
94104: PUSH
94105: LD_VAR 0 5
94109: PUSH
94110: FOR_IN
94111: IFFALSE 94252
// begin d := rand ( 0 , 5 ) ;
94113: LD_ADDR_VAR 0 4
94117: PUSH
94118: LD_INT 0
94120: PPUSH
94121: LD_INT 5
94123: PPUSH
94124: CALL_OW 12
94128: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
94129: LD_ADDR_VAR 0 2
94133: PUSH
94134: LD_VAR 0 1
94138: PPUSH
94139: CALL_OW 250
94143: PPUSH
94144: LD_VAR 0 4
94148: PPUSH
94149: LD_INT 3
94151: PPUSH
94152: LD_INT 12
94154: PPUSH
94155: CALL_OW 12
94159: PPUSH
94160: CALL_OW 272
94164: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
94165: LD_ADDR_VAR 0 3
94169: PUSH
94170: LD_VAR 0 1
94174: PPUSH
94175: CALL_OW 251
94179: PPUSH
94180: LD_VAR 0 4
94184: PPUSH
94185: LD_INT 3
94187: PPUSH
94188: LD_INT 12
94190: PPUSH
94191: CALL_OW 12
94195: PPUSH
94196: CALL_OW 273
94200: ST_TO_ADDR
// if ValidHex ( x , y ) then
94201: LD_VAR 0 2
94205: PPUSH
94206: LD_VAR 0 3
94210: PPUSH
94211: CALL_OW 488
94215: IFFALSE 94250
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
94217: LD_VAR 0 1
94221: PPUSH
94222: LD_VAR 0 2
94226: PPUSH
94227: LD_VAR 0 3
94231: PPUSH
94232: LD_INT 3
94234: PPUSH
94235: LD_INT 6
94237: PPUSH
94238: CALL_OW 12
94242: PPUSH
94243: LD_INT 1
94245: PPUSH
94246: CALL_OW 483
// end ;
94250: GO 94110
94252: POP
94253: POP
// end ;
94254: PPOPN 5
94256: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
94257: LD_EXP 87
94261: PUSH
94262: LD_EXP 122
94266: AND
94267: IFFALSE 94361
94269: GO 94271
94271: DISABLE
94272: LD_INT 0
94274: PPUSH
94275: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
94276: LD_ADDR_VAR 0 2
94280: PUSH
94281: LD_INT 22
94283: PUSH
94284: LD_OWVAR 2
94288: PUSH
94289: EMPTY
94290: LIST
94291: LIST
94292: PUSH
94293: LD_INT 32
94295: PUSH
94296: LD_INT 1
94298: PUSH
94299: EMPTY
94300: LIST
94301: LIST
94302: PUSH
94303: LD_INT 21
94305: PUSH
94306: LD_INT 2
94308: PUSH
94309: EMPTY
94310: LIST
94311: LIST
94312: PUSH
94313: EMPTY
94314: LIST
94315: LIST
94316: LIST
94317: PPUSH
94318: CALL_OW 69
94322: ST_TO_ADDR
// if not tmp then
94323: LD_VAR 0 2
94327: NOT
94328: IFFALSE 94332
// exit ;
94330: GO 94361
// for i in tmp do
94332: LD_ADDR_VAR 0 1
94336: PUSH
94337: LD_VAR 0 2
94341: PUSH
94342: FOR_IN
94343: IFFALSE 94359
// SetFuel ( i , 0 ) ;
94345: LD_VAR 0 1
94349: PPUSH
94350: LD_INT 0
94352: PPUSH
94353: CALL_OW 240
94357: GO 94342
94359: POP
94360: POP
// end ;
94361: PPOPN 2
94363: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
94364: LD_EXP 87
94368: PUSH
94369: LD_EXP 123
94373: AND
94374: IFFALSE 94440
94376: GO 94378
94378: DISABLE
94379: LD_INT 0
94381: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
94382: LD_ADDR_VAR 0 1
94386: PUSH
94387: LD_INT 22
94389: PUSH
94390: LD_OWVAR 2
94394: PUSH
94395: EMPTY
94396: LIST
94397: LIST
94398: PUSH
94399: LD_INT 30
94401: PUSH
94402: LD_INT 29
94404: PUSH
94405: EMPTY
94406: LIST
94407: LIST
94408: PUSH
94409: EMPTY
94410: LIST
94411: LIST
94412: PPUSH
94413: CALL_OW 69
94417: ST_TO_ADDR
// if not tmp then
94418: LD_VAR 0 1
94422: NOT
94423: IFFALSE 94427
// exit ;
94425: GO 94440
// DestroyUnit ( tmp [ 1 ] ) ;
94427: LD_VAR 0 1
94431: PUSH
94432: LD_INT 1
94434: ARRAY
94435: PPUSH
94436: CALL_OW 65
// end ;
94440: PPOPN 1
94442: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
94443: LD_EXP 87
94447: PUSH
94448: LD_EXP 125
94452: AND
94453: IFFALSE 94582
94455: GO 94457
94457: DISABLE
94458: LD_INT 0
94460: PPUSH
// begin uc_side := 0 ;
94461: LD_ADDR_OWVAR 20
94465: PUSH
94466: LD_INT 0
94468: ST_TO_ADDR
// uc_nation := nation_arabian ;
94469: LD_ADDR_OWVAR 21
94473: PUSH
94474: LD_INT 2
94476: ST_TO_ADDR
// hc_gallery :=  ;
94477: LD_ADDR_OWVAR 33
94481: PUSH
94482: LD_STRING 
94484: ST_TO_ADDR
// hc_name :=  ;
94485: LD_ADDR_OWVAR 26
94489: PUSH
94490: LD_STRING 
94492: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
94493: LD_INT 1
94495: PPUSH
94496: LD_INT 11
94498: PPUSH
94499: LD_INT 10
94501: PPUSH
94502: CALL_OW 380
// un := CreateHuman ;
94506: LD_ADDR_VAR 0 1
94510: PUSH
94511: CALL_OW 44
94515: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
94516: LD_VAR 0 1
94520: PPUSH
94521: LD_INT 1
94523: PPUSH
94524: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
94528: LD_INT 35
94530: PPUSH
94531: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
94535: LD_VAR 0 1
94539: PPUSH
94540: LD_INT 22
94542: PUSH
94543: LD_OWVAR 2
94547: PUSH
94548: EMPTY
94549: LIST
94550: LIST
94551: PPUSH
94552: CALL_OW 69
94556: PPUSH
94557: LD_VAR 0 1
94561: PPUSH
94562: CALL_OW 74
94566: PPUSH
94567: CALL_OW 115
// until IsDead ( un ) ;
94571: LD_VAR 0 1
94575: PPUSH
94576: CALL_OW 301
94580: IFFALSE 94528
// end ;
94582: PPOPN 1
94584: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
94585: LD_EXP 87
94589: PUSH
94590: LD_EXP 127
94594: AND
94595: IFFALSE 94607
94597: GO 94599
94599: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
94600: LD_STRING earthquake(getX(game), 0, 32)
94602: PPUSH
94603: CALL_OW 559
94607: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
94608: LD_EXP 87
94612: PUSH
94613: LD_EXP 128
94617: AND
94618: IFFALSE 94709
94620: GO 94622
94622: DISABLE
94623: LD_INT 0
94625: PPUSH
// begin enable ;
94626: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
94627: LD_ADDR_VAR 0 1
94631: PUSH
94632: LD_INT 22
94634: PUSH
94635: LD_OWVAR 2
94639: PUSH
94640: EMPTY
94641: LIST
94642: LIST
94643: PUSH
94644: LD_INT 21
94646: PUSH
94647: LD_INT 2
94649: PUSH
94650: EMPTY
94651: LIST
94652: LIST
94653: PUSH
94654: LD_INT 33
94656: PUSH
94657: LD_INT 3
94659: PUSH
94660: EMPTY
94661: LIST
94662: LIST
94663: PUSH
94664: EMPTY
94665: LIST
94666: LIST
94667: LIST
94668: PPUSH
94669: CALL_OW 69
94673: ST_TO_ADDR
// if not tmp then
94674: LD_VAR 0 1
94678: NOT
94679: IFFALSE 94683
// exit ;
94681: GO 94709
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
94683: LD_VAR 0 1
94687: PUSH
94688: LD_INT 1
94690: PPUSH
94691: LD_VAR 0 1
94695: PPUSH
94696: CALL_OW 12
94700: ARRAY
94701: PPUSH
94702: LD_INT 1
94704: PPUSH
94705: CALL_OW 234
// end ;
94709: PPOPN 1
94711: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
94712: LD_EXP 87
94716: PUSH
94717: LD_EXP 129
94721: AND
94722: IFFALSE 94863
94724: GO 94726
94726: DISABLE
94727: LD_INT 0
94729: PPUSH
94730: PPUSH
94731: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
94732: LD_ADDR_VAR 0 3
94736: PUSH
94737: LD_INT 22
94739: PUSH
94740: LD_OWVAR 2
94744: PUSH
94745: EMPTY
94746: LIST
94747: LIST
94748: PUSH
94749: LD_INT 25
94751: PUSH
94752: LD_INT 1
94754: PUSH
94755: EMPTY
94756: LIST
94757: LIST
94758: PUSH
94759: EMPTY
94760: LIST
94761: LIST
94762: PPUSH
94763: CALL_OW 69
94767: ST_TO_ADDR
// if not tmp then
94768: LD_VAR 0 3
94772: NOT
94773: IFFALSE 94777
// exit ;
94775: GO 94863
// un := tmp [ rand ( 1 , tmp ) ] ;
94777: LD_ADDR_VAR 0 2
94781: PUSH
94782: LD_VAR 0 3
94786: PUSH
94787: LD_INT 1
94789: PPUSH
94790: LD_VAR 0 3
94794: PPUSH
94795: CALL_OW 12
94799: ARRAY
94800: ST_TO_ADDR
// if Crawls ( un ) then
94801: LD_VAR 0 2
94805: PPUSH
94806: CALL_OW 318
94810: IFFALSE 94821
// ComWalk ( un ) ;
94812: LD_VAR 0 2
94816: PPUSH
94817: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
94821: LD_VAR 0 2
94825: PPUSH
94826: LD_INT 9
94828: PPUSH
94829: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
94833: LD_INT 28
94835: PPUSH
94836: LD_OWVAR 2
94840: PPUSH
94841: LD_INT 2
94843: PPUSH
94844: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
94848: LD_INT 29
94850: PPUSH
94851: LD_OWVAR 2
94855: PPUSH
94856: LD_INT 2
94858: PPUSH
94859: CALL_OW 322
// end ;
94863: PPOPN 3
94865: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
94866: LD_EXP 87
94870: PUSH
94871: LD_EXP 130
94875: AND
94876: IFFALSE 94987
94878: GO 94880
94880: DISABLE
94881: LD_INT 0
94883: PPUSH
94884: PPUSH
94885: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
94886: LD_ADDR_VAR 0 3
94890: PUSH
94891: LD_INT 22
94893: PUSH
94894: LD_OWVAR 2
94898: PUSH
94899: EMPTY
94900: LIST
94901: LIST
94902: PUSH
94903: LD_INT 25
94905: PUSH
94906: LD_INT 1
94908: PUSH
94909: EMPTY
94910: LIST
94911: LIST
94912: PUSH
94913: EMPTY
94914: LIST
94915: LIST
94916: PPUSH
94917: CALL_OW 69
94921: ST_TO_ADDR
// if not tmp then
94922: LD_VAR 0 3
94926: NOT
94927: IFFALSE 94931
// exit ;
94929: GO 94987
// un := tmp [ rand ( 1 , tmp ) ] ;
94931: LD_ADDR_VAR 0 2
94935: PUSH
94936: LD_VAR 0 3
94940: PUSH
94941: LD_INT 1
94943: PPUSH
94944: LD_VAR 0 3
94948: PPUSH
94949: CALL_OW 12
94953: ARRAY
94954: ST_TO_ADDR
// if Crawls ( un ) then
94955: LD_VAR 0 2
94959: PPUSH
94960: CALL_OW 318
94964: IFFALSE 94975
// ComWalk ( un ) ;
94966: LD_VAR 0 2
94970: PPUSH
94971: CALL_OW 138
// SetClass ( un , class_mortar ) ;
94975: LD_VAR 0 2
94979: PPUSH
94980: LD_INT 8
94982: PPUSH
94983: CALL_OW 336
// end ;
94987: PPOPN 3
94989: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
94990: LD_EXP 87
94994: PUSH
94995: LD_EXP 131
94999: AND
95000: IFFALSE 95144
95002: GO 95004
95004: DISABLE
95005: LD_INT 0
95007: PPUSH
95008: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
95009: LD_ADDR_VAR 0 2
95013: PUSH
95014: LD_INT 22
95016: PUSH
95017: LD_OWVAR 2
95021: PUSH
95022: EMPTY
95023: LIST
95024: LIST
95025: PUSH
95026: LD_INT 21
95028: PUSH
95029: LD_INT 2
95031: PUSH
95032: EMPTY
95033: LIST
95034: LIST
95035: PUSH
95036: LD_INT 2
95038: PUSH
95039: LD_INT 34
95041: PUSH
95042: LD_INT 12
95044: PUSH
95045: EMPTY
95046: LIST
95047: LIST
95048: PUSH
95049: LD_INT 34
95051: PUSH
95052: LD_INT 51
95054: PUSH
95055: EMPTY
95056: LIST
95057: LIST
95058: PUSH
95059: LD_INT 34
95061: PUSH
95062: LD_INT 32
95064: PUSH
95065: EMPTY
95066: LIST
95067: LIST
95068: PUSH
95069: EMPTY
95070: LIST
95071: LIST
95072: LIST
95073: LIST
95074: PUSH
95075: EMPTY
95076: LIST
95077: LIST
95078: LIST
95079: PPUSH
95080: CALL_OW 69
95084: ST_TO_ADDR
// if not tmp then
95085: LD_VAR 0 2
95089: NOT
95090: IFFALSE 95094
// exit ;
95092: GO 95144
// for i in tmp do
95094: LD_ADDR_VAR 0 1
95098: PUSH
95099: LD_VAR 0 2
95103: PUSH
95104: FOR_IN
95105: IFFALSE 95142
// if GetCargo ( i , mat_artifact ) = 0 then
95107: LD_VAR 0 1
95111: PPUSH
95112: LD_INT 4
95114: PPUSH
95115: CALL_OW 289
95119: PUSH
95120: LD_INT 0
95122: EQUAL
95123: IFFALSE 95140
// SetCargo ( i , mat_siberit , 100 ) ;
95125: LD_VAR 0 1
95129: PPUSH
95130: LD_INT 3
95132: PPUSH
95133: LD_INT 100
95135: PPUSH
95136: CALL_OW 290
95140: GO 95104
95142: POP
95143: POP
// end ;
95144: PPOPN 2
95146: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
95147: LD_EXP 87
95151: PUSH
95152: LD_EXP 132
95156: AND
95157: IFFALSE 95310
95159: GO 95161
95161: DISABLE
95162: LD_INT 0
95164: PPUSH
95165: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
95166: LD_ADDR_VAR 0 2
95170: PUSH
95171: LD_INT 22
95173: PUSH
95174: LD_OWVAR 2
95178: PUSH
95179: EMPTY
95180: LIST
95181: LIST
95182: PPUSH
95183: CALL_OW 69
95187: ST_TO_ADDR
// if not tmp then
95188: LD_VAR 0 2
95192: NOT
95193: IFFALSE 95197
// exit ;
95195: GO 95310
// for i := 1 to 2 do
95197: LD_ADDR_VAR 0 1
95201: PUSH
95202: DOUBLE
95203: LD_INT 1
95205: DEC
95206: ST_TO_ADDR
95207: LD_INT 2
95209: PUSH
95210: FOR_TO
95211: IFFALSE 95308
// begin uc_side := your_side ;
95213: LD_ADDR_OWVAR 20
95217: PUSH
95218: LD_OWVAR 2
95222: ST_TO_ADDR
// uc_nation := nation_american ;
95223: LD_ADDR_OWVAR 21
95227: PUSH
95228: LD_INT 1
95230: ST_TO_ADDR
// vc_chassis := us_morphling ;
95231: LD_ADDR_OWVAR 37
95235: PUSH
95236: LD_INT 5
95238: ST_TO_ADDR
// vc_engine := engine_siberite ;
95239: LD_ADDR_OWVAR 39
95243: PUSH
95244: LD_INT 3
95246: ST_TO_ADDR
// vc_control := control_computer ;
95247: LD_ADDR_OWVAR 38
95251: PUSH
95252: LD_INT 3
95254: ST_TO_ADDR
// vc_weapon := us_double_laser ;
95255: LD_ADDR_OWVAR 40
95259: PUSH
95260: LD_INT 10
95262: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) ;
95263: CALL_OW 45
95267: PPUSH
95268: LD_VAR 0 2
95272: PUSH
95273: LD_INT 1
95275: ARRAY
95276: PPUSH
95277: CALL_OW 250
95281: PPUSH
95282: LD_VAR 0 2
95286: PUSH
95287: LD_INT 1
95289: ARRAY
95290: PPUSH
95291: CALL_OW 251
95295: PPUSH
95296: LD_INT 12
95298: PPUSH
95299: LD_INT 1
95301: PPUSH
95302: CALL_OW 50
// end ;
95306: GO 95210
95308: POP
95309: POP
// end ;
95310: PPOPN 2
95312: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
95313: LD_EXP 87
95317: PUSH
95318: LD_EXP 133
95322: AND
95323: IFFALSE 95545
95325: GO 95327
95327: DISABLE
95328: LD_INT 0
95330: PPUSH
95331: PPUSH
95332: PPUSH
95333: PPUSH
95334: PPUSH
95335: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
95336: LD_ADDR_VAR 0 6
95340: PUSH
95341: LD_INT 22
95343: PUSH
95344: LD_OWVAR 2
95348: PUSH
95349: EMPTY
95350: LIST
95351: LIST
95352: PUSH
95353: LD_INT 21
95355: PUSH
95356: LD_INT 1
95358: PUSH
95359: EMPTY
95360: LIST
95361: LIST
95362: PUSH
95363: LD_INT 3
95365: PUSH
95366: LD_INT 23
95368: PUSH
95369: LD_INT 0
95371: PUSH
95372: EMPTY
95373: LIST
95374: LIST
95375: PUSH
95376: EMPTY
95377: LIST
95378: LIST
95379: PUSH
95380: EMPTY
95381: LIST
95382: LIST
95383: LIST
95384: PPUSH
95385: CALL_OW 69
95389: ST_TO_ADDR
// if not tmp then
95390: LD_VAR 0 6
95394: NOT
95395: IFFALSE 95399
// exit ;
95397: GO 95545
// s1 := rand ( 1 , 4 ) ;
95399: LD_ADDR_VAR 0 2
95403: PUSH
95404: LD_INT 1
95406: PPUSH
95407: LD_INT 4
95409: PPUSH
95410: CALL_OW 12
95414: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
95415: LD_ADDR_VAR 0 4
95419: PUSH
95420: LD_VAR 0 6
95424: PUSH
95425: LD_INT 1
95427: ARRAY
95428: PPUSH
95429: LD_VAR 0 2
95433: PPUSH
95434: CALL_OW 259
95438: ST_TO_ADDR
// if s1 = 1 then
95439: LD_VAR 0 2
95443: PUSH
95444: LD_INT 1
95446: EQUAL
95447: IFFALSE 95467
// s2 := rand ( 2 , 4 ) else
95449: LD_ADDR_VAR 0 3
95453: PUSH
95454: LD_INT 2
95456: PPUSH
95457: LD_INT 4
95459: PPUSH
95460: CALL_OW 12
95464: ST_TO_ADDR
95465: GO 95475
// s2 := 1 ;
95467: LD_ADDR_VAR 0 3
95471: PUSH
95472: LD_INT 1
95474: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
95475: LD_ADDR_VAR 0 5
95479: PUSH
95480: LD_VAR 0 6
95484: PUSH
95485: LD_INT 1
95487: ARRAY
95488: PPUSH
95489: LD_VAR 0 3
95493: PPUSH
95494: CALL_OW 259
95498: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
95499: LD_VAR 0 6
95503: PUSH
95504: LD_INT 1
95506: ARRAY
95507: PPUSH
95508: LD_VAR 0 2
95512: PPUSH
95513: LD_VAR 0 5
95517: PPUSH
95518: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
95522: LD_VAR 0 6
95526: PUSH
95527: LD_INT 1
95529: ARRAY
95530: PPUSH
95531: LD_VAR 0 3
95535: PPUSH
95536: LD_VAR 0 4
95540: PPUSH
95541: CALL_OW 237
// end ;
95545: PPOPN 6
95547: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
95548: LD_EXP 87
95552: PUSH
95553: LD_EXP 134
95557: AND
95558: IFFALSE 95637
95560: GO 95562
95562: DISABLE
95563: LD_INT 0
95565: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
95566: LD_ADDR_VAR 0 1
95570: PUSH
95571: LD_INT 22
95573: PUSH
95574: LD_OWVAR 2
95578: PUSH
95579: EMPTY
95580: LIST
95581: LIST
95582: PUSH
95583: LD_INT 30
95585: PUSH
95586: LD_INT 3
95588: PUSH
95589: EMPTY
95590: LIST
95591: LIST
95592: PUSH
95593: EMPTY
95594: LIST
95595: LIST
95596: PPUSH
95597: CALL_OW 69
95601: ST_TO_ADDR
// if not tmp then
95602: LD_VAR 0 1
95606: NOT
95607: IFFALSE 95611
// exit ;
95609: GO 95637
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
95611: LD_VAR 0 1
95615: PUSH
95616: LD_INT 1
95618: PPUSH
95619: LD_VAR 0 1
95623: PPUSH
95624: CALL_OW 12
95628: ARRAY
95629: PPUSH
95630: LD_INT 1
95632: PPUSH
95633: CALL_OW 234
// end ;
95637: PPOPN 1
95639: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
95640: LD_EXP 87
95644: PUSH
95645: LD_EXP 135
95649: AND
95650: IFFALSE 95762
95652: GO 95654
95654: DISABLE
95655: LD_INT 0
95657: PPUSH
95658: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
95659: LD_ADDR_VAR 0 2
95663: PUSH
95664: LD_INT 22
95666: PUSH
95667: LD_OWVAR 2
95671: PUSH
95672: EMPTY
95673: LIST
95674: LIST
95675: PUSH
95676: LD_INT 2
95678: PUSH
95679: LD_INT 30
95681: PUSH
95682: LD_INT 27
95684: PUSH
95685: EMPTY
95686: LIST
95687: LIST
95688: PUSH
95689: LD_INT 30
95691: PUSH
95692: LD_INT 26
95694: PUSH
95695: EMPTY
95696: LIST
95697: LIST
95698: PUSH
95699: LD_INT 30
95701: PUSH
95702: LD_INT 28
95704: PUSH
95705: EMPTY
95706: LIST
95707: LIST
95708: PUSH
95709: EMPTY
95710: LIST
95711: LIST
95712: LIST
95713: LIST
95714: PUSH
95715: EMPTY
95716: LIST
95717: LIST
95718: PPUSH
95719: CALL_OW 69
95723: ST_TO_ADDR
// if not tmp then
95724: LD_VAR 0 2
95728: NOT
95729: IFFALSE 95733
// exit ;
95731: GO 95762
// for i in tmp do
95733: LD_ADDR_VAR 0 1
95737: PUSH
95738: LD_VAR 0 2
95742: PUSH
95743: FOR_IN
95744: IFFALSE 95760
// SetLives ( i , 1 ) ;
95746: LD_VAR 0 1
95750: PPUSH
95751: LD_INT 1
95753: PPUSH
95754: CALL_OW 234
95758: GO 95743
95760: POP
95761: POP
// end ;
95762: PPOPN 2
95764: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
95765: LD_EXP 87
95769: PUSH
95770: LD_EXP 136
95774: AND
95775: IFFALSE 96049
95777: GO 95779
95779: DISABLE
95780: LD_INT 0
95782: PPUSH
95783: PPUSH
95784: PPUSH
// begin i := rand ( 1 , 7 ) ;
95785: LD_ADDR_VAR 0 1
95789: PUSH
95790: LD_INT 1
95792: PPUSH
95793: LD_INT 7
95795: PPUSH
95796: CALL_OW 12
95800: ST_TO_ADDR
// case i of 1 :
95801: LD_VAR 0 1
95805: PUSH
95806: LD_INT 1
95808: DOUBLE
95809: EQUAL
95810: IFTRUE 95814
95812: GO 95824
95814: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
95815: LD_STRING earthquake(getX(game), 0, 32)
95817: PPUSH
95818: CALL_OW 559
95822: GO 96049
95824: LD_INT 2
95826: DOUBLE
95827: EQUAL
95828: IFTRUE 95832
95830: GO 95846
95832: POP
// begin ToLua ( displayStucuk(); ) ;
95833: LD_STRING displayStucuk();
95835: PPUSH
95836: CALL_OW 559
// ResetFog ;
95840: CALL_OW 335
// end ; 3 :
95844: GO 96049
95846: LD_INT 3
95848: DOUBLE
95849: EQUAL
95850: IFTRUE 95854
95852: GO 95958
95854: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
95855: LD_ADDR_VAR 0 2
95859: PUSH
95860: LD_INT 22
95862: PUSH
95863: LD_OWVAR 2
95867: PUSH
95868: EMPTY
95869: LIST
95870: LIST
95871: PUSH
95872: LD_INT 25
95874: PUSH
95875: LD_INT 1
95877: PUSH
95878: EMPTY
95879: LIST
95880: LIST
95881: PUSH
95882: EMPTY
95883: LIST
95884: LIST
95885: PPUSH
95886: CALL_OW 69
95890: ST_TO_ADDR
// if not tmp then
95891: LD_VAR 0 2
95895: NOT
95896: IFFALSE 95900
// exit ;
95898: GO 96049
// un := tmp [ rand ( 1 , tmp ) ] ;
95900: LD_ADDR_VAR 0 3
95904: PUSH
95905: LD_VAR 0 2
95909: PUSH
95910: LD_INT 1
95912: PPUSH
95913: LD_VAR 0 2
95917: PPUSH
95918: CALL_OW 12
95922: ARRAY
95923: ST_TO_ADDR
// if Crawls ( un ) then
95924: LD_VAR 0 3
95928: PPUSH
95929: CALL_OW 318
95933: IFFALSE 95944
// ComWalk ( un ) ;
95935: LD_VAR 0 3
95939: PPUSH
95940: CALL_OW 138
// SetClass ( un , class_mortar ) ;
95944: LD_VAR 0 3
95948: PPUSH
95949: LD_INT 8
95951: PPUSH
95952: CALL_OW 336
// end ; 4 :
95956: GO 96049
95958: LD_INT 4
95960: DOUBLE
95961: EQUAL
95962: IFTRUE 95966
95964: GO 96027
95966: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
95967: LD_ADDR_VAR 0 2
95971: PUSH
95972: LD_INT 22
95974: PUSH
95975: LD_OWVAR 2
95979: PUSH
95980: EMPTY
95981: LIST
95982: LIST
95983: PUSH
95984: LD_INT 30
95986: PUSH
95987: LD_INT 29
95989: PUSH
95990: EMPTY
95991: LIST
95992: LIST
95993: PUSH
95994: EMPTY
95995: LIST
95996: LIST
95997: PPUSH
95998: CALL_OW 69
96002: ST_TO_ADDR
// if not tmp then
96003: LD_VAR 0 2
96007: NOT
96008: IFFALSE 96012
// exit ;
96010: GO 96049
// DestroyUnit ( tmp [ 1 ] ) ;
96012: LD_VAR 0 2
96016: PUSH
96017: LD_INT 1
96019: ARRAY
96020: PPUSH
96021: CALL_OW 65
// end ; 5 .. 7 :
96025: GO 96049
96027: LD_INT 5
96029: DOUBLE
96030: GREATEREQUAL
96031: IFFALSE 96039
96033: LD_INT 7
96035: DOUBLE
96036: LESSEQUAL
96037: IFTRUE 96041
96039: GO 96048
96041: POP
// StreamSibBomb ; end ;
96042: CALL 92329 0 0
96046: GO 96049
96048: POP
// end ;
96049: PPOPN 3
96051: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
96052: LD_EXP 87
96056: PUSH
96057: LD_EXP 137
96061: AND
96062: IFFALSE 96218
96064: GO 96066
96066: DISABLE
96067: LD_INT 0
96069: PPUSH
96070: PPUSH
96071: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
96072: LD_ADDR_VAR 0 2
96076: PUSH
96077: LD_INT 81
96079: PUSH
96080: LD_OWVAR 2
96084: PUSH
96085: EMPTY
96086: LIST
96087: LIST
96088: PUSH
96089: LD_INT 2
96091: PUSH
96092: LD_INT 21
96094: PUSH
96095: LD_INT 1
96097: PUSH
96098: EMPTY
96099: LIST
96100: LIST
96101: PUSH
96102: LD_INT 21
96104: PUSH
96105: LD_INT 2
96107: PUSH
96108: EMPTY
96109: LIST
96110: LIST
96111: PUSH
96112: EMPTY
96113: LIST
96114: LIST
96115: LIST
96116: PUSH
96117: EMPTY
96118: LIST
96119: LIST
96120: PPUSH
96121: CALL_OW 69
96125: ST_TO_ADDR
// if not tmp then
96126: LD_VAR 0 2
96130: NOT
96131: IFFALSE 96135
// exit ;
96133: GO 96218
// p := 0 ;
96135: LD_ADDR_VAR 0 3
96139: PUSH
96140: LD_INT 0
96142: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
96143: LD_INT 35
96145: PPUSH
96146: CALL_OW 67
// p := p + 1 ;
96150: LD_ADDR_VAR 0 3
96154: PUSH
96155: LD_VAR 0 3
96159: PUSH
96160: LD_INT 1
96162: PLUS
96163: ST_TO_ADDR
// for i in tmp do
96164: LD_ADDR_VAR 0 1
96168: PUSH
96169: LD_VAR 0 2
96173: PUSH
96174: FOR_IN
96175: IFFALSE 96206
// if GetLives ( i ) < 1000 then
96177: LD_VAR 0 1
96181: PPUSH
96182: CALL_OW 256
96186: PUSH
96187: LD_INT 1000
96189: LESS
96190: IFFALSE 96204
// SetLives ( i , 1000 ) ;
96192: LD_VAR 0 1
96196: PPUSH
96197: LD_INT 1000
96199: PPUSH
96200: CALL_OW 234
96204: GO 96174
96206: POP
96207: POP
// until p > 20 ;
96208: LD_VAR 0 3
96212: PUSH
96213: LD_INT 20
96215: GREATER
96216: IFFALSE 96143
// end ;
96218: PPOPN 3
96220: END
// every 0 0$1 trigger StreamModeActive and sTime do
96221: LD_EXP 87
96225: PUSH
96226: LD_EXP 138
96230: AND
96231: IFFALSE 96266
96233: GO 96235
96235: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
96236: LD_INT 28
96238: PPUSH
96239: LD_OWVAR 2
96243: PPUSH
96244: LD_INT 2
96246: PPUSH
96247: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
96251: LD_INT 30
96253: PPUSH
96254: LD_OWVAR 2
96258: PPUSH
96259: LD_INT 2
96261: PPUSH
96262: CALL_OW 322
// end ;
96266: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
96267: LD_EXP 87
96271: PUSH
96272: LD_EXP 139
96276: AND
96277: IFFALSE 96398
96279: GO 96281
96281: DISABLE
96282: LD_INT 0
96284: PPUSH
96285: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
96286: LD_ADDR_VAR 0 2
96290: PUSH
96291: LD_INT 22
96293: PUSH
96294: LD_OWVAR 2
96298: PUSH
96299: EMPTY
96300: LIST
96301: LIST
96302: PUSH
96303: LD_INT 21
96305: PUSH
96306: LD_INT 1
96308: PUSH
96309: EMPTY
96310: LIST
96311: LIST
96312: PUSH
96313: LD_INT 3
96315: PUSH
96316: LD_INT 23
96318: PUSH
96319: LD_INT 0
96321: PUSH
96322: EMPTY
96323: LIST
96324: LIST
96325: PUSH
96326: EMPTY
96327: LIST
96328: LIST
96329: PUSH
96330: EMPTY
96331: LIST
96332: LIST
96333: LIST
96334: PPUSH
96335: CALL_OW 69
96339: ST_TO_ADDR
// if not tmp then
96340: LD_VAR 0 2
96344: NOT
96345: IFFALSE 96349
// exit ;
96347: GO 96398
// for i in tmp do
96349: LD_ADDR_VAR 0 1
96353: PUSH
96354: LD_VAR 0 2
96358: PUSH
96359: FOR_IN
96360: IFFALSE 96396
// begin if Crawls ( i ) then
96362: LD_VAR 0 1
96366: PPUSH
96367: CALL_OW 318
96371: IFFALSE 96382
// ComWalk ( i ) ;
96373: LD_VAR 0 1
96377: PPUSH
96378: CALL_OW 138
// SetClass ( i , 2 ) ;
96382: LD_VAR 0 1
96386: PPUSH
96387: LD_INT 2
96389: PPUSH
96390: CALL_OW 336
// end ;
96394: GO 96359
96396: POP
96397: POP
// end ;
96398: PPOPN 2
96400: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
96401: LD_EXP 87
96405: PUSH
96406: LD_EXP 140
96410: AND
96411: IFFALSE 96692
96413: GO 96415
96415: DISABLE
96416: LD_INT 0
96418: PPUSH
96419: PPUSH
96420: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
96421: LD_OWVAR 2
96425: PPUSH
96426: LD_INT 9
96428: PPUSH
96429: LD_INT 1
96431: PPUSH
96432: LD_INT 1
96434: PPUSH
96435: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
96439: LD_INT 9
96441: PPUSH
96442: LD_OWVAR 2
96446: PPUSH
96447: CALL_OW 343
// uc_side := 9 ;
96451: LD_ADDR_OWVAR 20
96455: PUSH
96456: LD_INT 9
96458: ST_TO_ADDR
// uc_nation := 2 ;
96459: LD_ADDR_OWVAR 21
96463: PUSH
96464: LD_INT 2
96466: ST_TO_ADDR
// hc_name := Dark Warrior ;
96467: LD_ADDR_OWVAR 26
96471: PUSH
96472: LD_STRING Dark Warrior
96474: ST_TO_ADDR
// hc_gallery :=  ;
96475: LD_ADDR_OWVAR 33
96479: PUSH
96480: LD_STRING 
96482: ST_TO_ADDR
// hc_noskilllimit := true ;
96483: LD_ADDR_OWVAR 76
96487: PUSH
96488: LD_INT 1
96490: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
96491: LD_ADDR_OWVAR 31
96495: PUSH
96496: LD_INT 30
96498: PUSH
96499: LD_INT 30
96501: PUSH
96502: LD_INT 30
96504: PUSH
96505: LD_INT 30
96507: PUSH
96508: EMPTY
96509: LIST
96510: LIST
96511: LIST
96512: LIST
96513: ST_TO_ADDR
// un := CreateHuman ;
96514: LD_ADDR_VAR 0 3
96518: PUSH
96519: CALL_OW 44
96523: ST_TO_ADDR
// hc_noskilllimit := false ;
96524: LD_ADDR_OWVAR 76
96528: PUSH
96529: LD_INT 0
96531: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
96532: LD_VAR 0 3
96536: PPUSH
96537: LD_INT 1
96539: PPUSH
96540: CALL_OW 51
// p := 0 ;
96544: LD_ADDR_VAR 0 2
96548: PUSH
96549: LD_INT 0
96551: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
96552: LD_INT 35
96554: PPUSH
96555: CALL_OW 67
// p := p + 1 ;
96559: LD_ADDR_VAR 0 2
96563: PUSH
96564: LD_VAR 0 2
96568: PUSH
96569: LD_INT 1
96571: PLUS
96572: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
96573: LD_VAR 0 3
96577: PPUSH
96578: CALL_OW 256
96582: PUSH
96583: LD_INT 1000
96585: LESS
96586: IFFALSE 96600
// SetLives ( un , 1000 ) ;
96588: LD_VAR 0 3
96592: PPUSH
96593: LD_INT 1000
96595: PPUSH
96596: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
96600: LD_VAR 0 3
96604: PPUSH
96605: LD_INT 81
96607: PUSH
96608: LD_OWVAR 2
96612: PUSH
96613: EMPTY
96614: LIST
96615: LIST
96616: PUSH
96617: LD_INT 91
96619: PUSH
96620: LD_VAR 0 3
96624: PUSH
96625: LD_INT 30
96627: PUSH
96628: EMPTY
96629: LIST
96630: LIST
96631: LIST
96632: PUSH
96633: EMPTY
96634: LIST
96635: LIST
96636: PPUSH
96637: CALL_OW 69
96641: PPUSH
96642: LD_VAR 0 3
96646: PPUSH
96647: CALL_OW 74
96651: PPUSH
96652: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
96656: LD_VAR 0 2
96660: PUSH
96661: LD_INT 60
96663: GREATER
96664: PUSH
96665: LD_VAR 0 3
96669: PPUSH
96670: CALL_OW 301
96674: OR
96675: IFFALSE 96552
// if un then
96677: LD_VAR 0 3
96681: IFFALSE 96692
// RemoveUnit ( un ) ;
96683: LD_VAR 0 3
96687: PPUSH
96688: CALL_OW 64
// end ; end_of_file
96692: PPOPN 3
96694: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
96695: LD_INT 0
96697: PPUSH
96698: PPUSH
96699: PPUSH
96700: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
96701: LD_VAR 0 1
96705: PPUSH
96706: CALL_OW 264
96710: PUSH
96711: LD_EXP 33
96715: EQUAL
96716: IFFALSE 96788
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
96718: LD_INT 68
96720: PPUSH
96721: LD_VAR 0 1
96725: PPUSH
96726: CALL_OW 255
96730: PPUSH
96731: CALL_OW 321
96735: PUSH
96736: LD_INT 2
96738: EQUAL
96739: IFFALSE 96751
// eff := 70 else
96741: LD_ADDR_VAR 0 4
96745: PUSH
96746: LD_INT 70
96748: ST_TO_ADDR
96749: GO 96759
// eff := 30 ;
96751: LD_ADDR_VAR 0 4
96755: PUSH
96756: LD_INT 30
96758: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
96759: LD_VAR 0 1
96763: PPUSH
96764: CALL_OW 250
96768: PPUSH
96769: LD_VAR 0 1
96773: PPUSH
96774: CALL_OW 251
96778: PPUSH
96779: LD_VAR 0 4
96783: PPUSH
96784: CALL_OW 495
// end ; end ;
96788: LD_VAR 0 2
96792: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
96793: LD_INT 0
96795: PPUSH
// end ;
96796: LD_VAR 0 4
96800: RET
// export function SOS_Command ( cmd ) ; begin
96801: LD_INT 0
96803: PPUSH
// end ;
96804: LD_VAR 0 2
96808: RET
// on TargetableSAIL ( cmd , unit , selectedunit , x , y ) do begin if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
96809: LD_VAR 0 1
96813: PUSH
96814: LD_INT 255
96816: EQUAL
96817: PUSH
96818: LD_VAR 0 2
96822: PPUSH
96823: CALL_OW 264
96827: PUSH
96828: LD_INT 14
96830: PUSH
96831: LD_INT 53
96833: PUSH
96834: EMPTY
96835: LIST
96836: LIST
96837: IN
96838: AND
96839: PUSH
96840: LD_VAR 0 4
96844: PPUSH
96845: LD_VAR 0 5
96849: PPUSH
96850: CALL_OW 488
96854: AND
96855: IFFALSE 96879
// CutTreeXYR ( unit , x , y , 12 ) ;
96857: LD_VAR 0 2
96861: PPUSH
96862: LD_VAR 0 4
96866: PPUSH
96867: LD_VAR 0 5
96871: PPUSH
96872: LD_INT 12
96874: PPUSH
96875: CALL 96882 0 4
// end ;
96879: PPOPN 5
96881: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
96882: LD_INT 0
96884: PPUSH
96885: PPUSH
96886: PPUSH
96887: PPUSH
96888: PPUSH
96889: PPUSH
96890: PPUSH
96891: PPUSH
96892: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
96893: LD_VAR 0 1
96897: NOT
96898: PUSH
96899: LD_VAR 0 2
96903: PPUSH
96904: LD_VAR 0 3
96908: PPUSH
96909: CALL_OW 488
96913: NOT
96914: OR
96915: PUSH
96916: LD_VAR 0 4
96920: NOT
96921: OR
96922: IFFALSE 96926
// exit ;
96924: GO 97266
// list := [ ] ;
96926: LD_ADDR_VAR 0 13
96930: PUSH
96931: EMPTY
96932: ST_TO_ADDR
// if x - r < 0 then
96933: LD_VAR 0 2
96937: PUSH
96938: LD_VAR 0 4
96942: MINUS
96943: PUSH
96944: LD_INT 0
96946: LESS
96947: IFFALSE 96959
// min_x := 0 else
96949: LD_ADDR_VAR 0 7
96953: PUSH
96954: LD_INT 0
96956: ST_TO_ADDR
96957: GO 96975
// min_x := x - r ;
96959: LD_ADDR_VAR 0 7
96963: PUSH
96964: LD_VAR 0 2
96968: PUSH
96969: LD_VAR 0 4
96973: MINUS
96974: ST_TO_ADDR
// if y - r < 0 then
96975: LD_VAR 0 3
96979: PUSH
96980: LD_VAR 0 4
96984: MINUS
96985: PUSH
96986: LD_INT 0
96988: LESS
96989: IFFALSE 97001
// min_y := 0 else
96991: LD_ADDR_VAR 0 8
96995: PUSH
96996: LD_INT 0
96998: ST_TO_ADDR
96999: GO 97017
// min_y := y - r ;
97001: LD_ADDR_VAR 0 8
97005: PUSH
97006: LD_VAR 0 3
97010: PUSH
97011: LD_VAR 0 4
97015: MINUS
97016: ST_TO_ADDR
// max_x := x + r ;
97017: LD_ADDR_VAR 0 9
97021: PUSH
97022: LD_VAR 0 2
97026: PUSH
97027: LD_VAR 0 4
97031: PLUS
97032: ST_TO_ADDR
// max_y := y + r ;
97033: LD_ADDR_VAR 0 10
97037: PUSH
97038: LD_VAR 0 3
97042: PUSH
97043: LD_VAR 0 4
97047: PLUS
97048: ST_TO_ADDR
// for _x = min_x to max_x do
97049: LD_ADDR_VAR 0 11
97053: PUSH
97054: DOUBLE
97055: LD_VAR 0 7
97059: DEC
97060: ST_TO_ADDR
97061: LD_VAR 0 9
97065: PUSH
97066: FOR_TO
97067: IFFALSE 97184
// for _y = min_y to max_y do
97069: LD_ADDR_VAR 0 12
97073: PUSH
97074: DOUBLE
97075: LD_VAR 0 8
97079: DEC
97080: ST_TO_ADDR
97081: LD_VAR 0 10
97085: PUSH
97086: FOR_TO
97087: IFFALSE 97180
// begin if not ValidHex ( _x , _y ) then
97089: LD_VAR 0 11
97093: PPUSH
97094: LD_VAR 0 12
97098: PPUSH
97099: CALL_OW 488
97103: NOT
97104: IFFALSE 97108
// continue ;
97106: GO 97086
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
97108: LD_VAR 0 11
97112: PPUSH
97113: LD_VAR 0 12
97117: PPUSH
97118: CALL_OW 351
97122: PUSH
97123: LD_VAR 0 11
97127: PPUSH
97128: LD_VAR 0 12
97132: PPUSH
97133: CALL_OW 554
97137: AND
97138: IFFALSE 97178
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
97140: LD_ADDR_VAR 0 13
97144: PUSH
97145: LD_VAR 0 13
97149: PPUSH
97150: LD_VAR 0 13
97154: PUSH
97155: LD_INT 1
97157: PLUS
97158: PPUSH
97159: LD_VAR 0 11
97163: PUSH
97164: LD_VAR 0 12
97168: PUSH
97169: EMPTY
97170: LIST
97171: LIST
97172: PPUSH
97173: CALL_OW 2
97177: ST_TO_ADDR
// end ;
97178: GO 97086
97180: POP
97181: POP
97182: GO 97066
97184: POP
97185: POP
// if not list then
97186: LD_VAR 0 13
97190: NOT
97191: IFFALSE 97195
// exit ;
97193: GO 97266
// for i in list do
97195: LD_ADDR_VAR 0 6
97199: PUSH
97200: LD_VAR 0 13
97204: PUSH
97205: FOR_IN
97206: IFFALSE 97264
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
97208: LD_VAR 0 1
97212: PPUSH
97213: LD_STRING M
97215: PUSH
97216: LD_VAR 0 6
97220: PUSH
97221: LD_INT 1
97223: ARRAY
97224: PUSH
97225: LD_VAR 0 6
97229: PUSH
97230: LD_INT 2
97232: ARRAY
97233: PUSH
97234: LD_INT 0
97236: PUSH
97237: LD_INT 0
97239: PUSH
97240: LD_INT 0
97242: PUSH
97243: LD_INT 0
97245: PUSH
97246: EMPTY
97247: LIST
97248: LIST
97249: LIST
97250: LIST
97251: LIST
97252: LIST
97253: LIST
97254: PUSH
97255: EMPTY
97256: LIST
97257: PPUSH
97258: CALL_OW 447
97262: GO 97205
97264: POP
97265: POP
// end ; end_of_file
97266: LD_VAR 0 5
97270: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking , to_heal , healers , to_repair , repairs , empty_vehs , side ; begin
97271: LD_INT 0
97273: PPUSH
97274: PPUSH
97275: PPUSH
97276: PPUSH
97277: PPUSH
97278: PPUSH
97279: PPUSH
97280: PPUSH
97281: PPUSH
97282: PPUSH
97283: PPUSH
97284: PPUSH
97285: PPUSH
97286: PPUSH
97287: PPUSH
97288: PPUSH
97289: PPUSH
97290: PPUSH
97291: PPUSH
97292: PPUSH
97293: PPUSH
97294: PPUSH
97295: PPUSH
97296: PPUSH
97297: PPUSH
97298: PPUSH
97299: PPUSH
97300: PPUSH
97301: PPUSH
97302: PPUSH
97303: PPUSH
97304: PPUSH
97305: PPUSH
97306: PPUSH
// if not list then
97307: LD_VAR 0 1
97311: NOT
97312: IFFALSE 97316
// exit ;
97314: GO 101975
// base := list [ 1 ] ;
97316: LD_ADDR_VAR 0 3
97320: PUSH
97321: LD_VAR 0 1
97325: PUSH
97326: LD_INT 1
97328: ARRAY
97329: ST_TO_ADDR
// group := list [ 2 ] ;
97330: LD_ADDR_VAR 0 4
97334: PUSH
97335: LD_VAR 0 1
97339: PUSH
97340: LD_INT 2
97342: ARRAY
97343: ST_TO_ADDR
// path := list [ 3 ] ;
97344: LD_ADDR_VAR 0 5
97348: PUSH
97349: LD_VAR 0 1
97353: PUSH
97354: LD_INT 3
97356: ARRAY
97357: ST_TO_ADDR
// flags := list [ 4 ] ;
97358: LD_ADDR_VAR 0 6
97362: PUSH
97363: LD_VAR 0 1
97367: PUSH
97368: LD_INT 4
97370: ARRAY
97371: ST_TO_ADDR
// mined := [ ] ;
97372: LD_ADDR_VAR 0 27
97376: PUSH
97377: EMPTY
97378: ST_TO_ADDR
// bombed := [ ] ;
97379: LD_ADDR_VAR 0 28
97383: PUSH
97384: EMPTY
97385: ST_TO_ADDR
// healers := [ ] ;
97386: LD_ADDR_VAR 0 31
97390: PUSH
97391: EMPTY
97392: ST_TO_ADDR
// to_heal := [ ] ;
97393: LD_ADDR_VAR 0 30
97397: PUSH
97398: EMPTY
97399: ST_TO_ADDR
// repairs := [ ] ;
97400: LD_ADDR_VAR 0 33
97404: PUSH
97405: EMPTY
97406: ST_TO_ADDR
// to_repair := [ ] ;
97407: LD_ADDR_VAR 0 32
97411: PUSH
97412: EMPTY
97413: ST_TO_ADDR
// if not group or not path then
97414: LD_VAR 0 4
97418: NOT
97419: PUSH
97420: LD_VAR 0 5
97424: NOT
97425: OR
97426: IFFALSE 97430
// exit ;
97428: GO 101975
// side := GetSide ( group [ 1 ] ) ;
97430: LD_ADDR_VAR 0 35
97434: PUSH
97435: LD_VAR 0 4
97439: PUSH
97440: LD_INT 1
97442: ARRAY
97443: PPUSH
97444: CALL_OW 255
97448: ST_TO_ADDR
// if flags then
97449: LD_VAR 0 6
97453: IFFALSE 97597
// begin f_ignore_area := flags [ 1 ] ;
97455: LD_ADDR_VAR 0 17
97459: PUSH
97460: LD_VAR 0 6
97464: PUSH
97465: LD_INT 1
97467: ARRAY
97468: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
97469: LD_ADDR_VAR 0 18
97473: PUSH
97474: LD_VAR 0 6
97478: PUSH
97479: LD_INT 2
97481: ARRAY
97482: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
97483: LD_ADDR_VAR 0 19
97487: PUSH
97488: LD_VAR 0 6
97492: PUSH
97493: LD_INT 3
97495: ARRAY
97496: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
97497: LD_ADDR_VAR 0 20
97501: PUSH
97502: LD_VAR 0 6
97506: PUSH
97507: LD_INT 4
97509: ARRAY
97510: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
97511: LD_ADDR_VAR 0 21
97515: PUSH
97516: LD_VAR 0 6
97520: PUSH
97521: LD_INT 5
97523: ARRAY
97524: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
97525: LD_ADDR_VAR 0 22
97529: PUSH
97530: LD_VAR 0 6
97534: PUSH
97535: LD_INT 6
97537: ARRAY
97538: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
97539: LD_ADDR_VAR 0 23
97543: PUSH
97544: LD_VAR 0 6
97548: PUSH
97549: LD_INT 7
97551: ARRAY
97552: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
97553: LD_ADDR_VAR 0 24
97557: PUSH
97558: LD_VAR 0 6
97562: PUSH
97563: LD_INT 8
97565: ARRAY
97566: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
97567: LD_ADDR_VAR 0 25
97571: PUSH
97572: LD_VAR 0 6
97576: PUSH
97577: LD_INT 9
97579: ARRAY
97580: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
97581: LD_ADDR_VAR 0 26
97585: PUSH
97586: LD_VAR 0 6
97590: PUSH
97591: LD_INT 10
97593: ARRAY
97594: ST_TO_ADDR
// end else
97595: GO 97677
// begin f_ignore_area := false ;
97597: LD_ADDR_VAR 0 17
97601: PUSH
97602: LD_INT 0
97604: ST_TO_ADDR
// f_capture := false ;
97605: LD_ADDR_VAR 0 18
97609: PUSH
97610: LD_INT 0
97612: ST_TO_ADDR
// f_ignore_civ := false ;
97613: LD_ADDR_VAR 0 19
97617: PUSH
97618: LD_INT 0
97620: ST_TO_ADDR
// f_murder := false ;
97621: LD_ADDR_VAR 0 20
97625: PUSH
97626: LD_INT 0
97628: ST_TO_ADDR
// f_mines := false ;
97629: LD_ADDR_VAR 0 21
97633: PUSH
97634: LD_INT 0
97636: ST_TO_ADDR
// f_repair := false ;
97637: LD_ADDR_VAR 0 22
97641: PUSH
97642: LD_INT 0
97644: ST_TO_ADDR
// f_heal := false ;
97645: LD_ADDR_VAR 0 23
97649: PUSH
97650: LD_INT 0
97652: ST_TO_ADDR
// f_spacetime := false ;
97653: LD_ADDR_VAR 0 24
97657: PUSH
97658: LD_INT 0
97660: ST_TO_ADDR
// f_attack_depot := false ;
97661: LD_ADDR_VAR 0 25
97665: PUSH
97666: LD_INT 0
97668: ST_TO_ADDR
// f_crawl := false ;
97669: LD_ADDR_VAR 0 26
97673: PUSH
97674: LD_INT 0
97676: ST_TO_ADDR
// end ; if f_heal then
97677: LD_VAR 0 23
97681: IFFALSE 97708
// healers := UnitFilter ( group , [ f_class , 4 ] ) ;
97683: LD_ADDR_VAR 0 31
97687: PUSH
97688: LD_VAR 0 4
97692: PPUSH
97693: LD_INT 25
97695: PUSH
97696: LD_INT 4
97698: PUSH
97699: EMPTY
97700: LIST
97701: LIST
97702: PPUSH
97703: CALL_OW 72
97707: ST_TO_ADDR
// if f_repair then
97708: LD_VAR 0 22
97712: IFFALSE 97739
// repairs := UnitFilter ( group , [ f_class , 3 ] ) ;
97714: LD_ADDR_VAR 0 33
97718: PUSH
97719: LD_VAR 0 4
97723: PPUSH
97724: LD_INT 25
97726: PUSH
97727: LD_INT 3
97729: PUSH
97730: EMPTY
97731: LIST
97732: LIST
97733: PPUSH
97734: CALL_OW 72
97738: ST_TO_ADDR
// units_path := [ ] ;
97739: LD_ADDR_VAR 0 16
97743: PUSH
97744: EMPTY
97745: ST_TO_ADDR
// for i = 1 to group do
97746: LD_ADDR_VAR 0 7
97750: PUSH
97751: DOUBLE
97752: LD_INT 1
97754: DEC
97755: ST_TO_ADDR
97756: LD_VAR 0 4
97760: PUSH
97761: FOR_TO
97762: IFFALSE 97791
// units_path := Replace ( units_path , i , path ) ;
97764: LD_ADDR_VAR 0 16
97768: PUSH
97769: LD_VAR 0 16
97773: PPUSH
97774: LD_VAR 0 7
97778: PPUSH
97779: LD_VAR 0 5
97783: PPUSH
97784: CALL_OW 1
97788: ST_TO_ADDR
97789: GO 97761
97791: POP
97792: POP
// repeat for i = group downto 1 do
97793: LD_ADDR_VAR 0 7
97797: PUSH
97798: DOUBLE
97799: LD_VAR 0 4
97803: INC
97804: ST_TO_ADDR
97805: LD_INT 1
97807: PUSH
97808: FOR_DOWNTO
97809: IFFALSE 101931
// begin wait ( 5 ) ;
97811: LD_INT 5
97813: PPUSH
97814: CALL_OW 67
// tmp := [ ] ;
97818: LD_ADDR_VAR 0 14
97822: PUSH
97823: EMPTY
97824: ST_TO_ADDR
// attacking := false ;
97825: LD_ADDR_VAR 0 29
97829: PUSH
97830: LD_INT 0
97832: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
97833: LD_VAR 0 4
97837: PUSH
97838: LD_VAR 0 7
97842: ARRAY
97843: PPUSH
97844: CALL_OW 301
97848: PUSH
97849: LD_VAR 0 4
97853: PUSH
97854: LD_VAR 0 7
97858: ARRAY
97859: NOT
97860: OR
97861: IFFALSE 97970
// begin if GetType ( group [ i ] ) = unit_human then
97863: LD_VAR 0 4
97867: PUSH
97868: LD_VAR 0 7
97872: ARRAY
97873: PPUSH
97874: CALL_OW 247
97878: PUSH
97879: LD_INT 1
97881: EQUAL
97882: IFFALSE 97928
// begin to_heal := to_heal diff group [ i ] ;
97884: LD_ADDR_VAR 0 30
97888: PUSH
97889: LD_VAR 0 30
97893: PUSH
97894: LD_VAR 0 4
97898: PUSH
97899: LD_VAR 0 7
97903: ARRAY
97904: DIFF
97905: ST_TO_ADDR
// healers := healers diff group [ i ] ;
97906: LD_ADDR_VAR 0 31
97910: PUSH
97911: LD_VAR 0 31
97915: PUSH
97916: LD_VAR 0 4
97920: PUSH
97921: LD_VAR 0 7
97925: ARRAY
97926: DIFF
97927: ST_TO_ADDR
// end ; group := Delete ( group , i ) ;
97928: LD_ADDR_VAR 0 4
97932: PUSH
97933: LD_VAR 0 4
97937: PPUSH
97938: LD_VAR 0 7
97942: PPUSH
97943: CALL_OW 3
97947: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
97948: LD_ADDR_VAR 0 16
97952: PUSH
97953: LD_VAR 0 16
97957: PPUSH
97958: LD_VAR 0 7
97962: PPUSH
97963: CALL_OW 3
97967: ST_TO_ADDR
// continue ;
97968: GO 97808
// end ; if f_repair then
97970: LD_VAR 0 22
97974: IFFALSE 98463
// begin if GetType ( group [ i ] ) = unit_vehicle then
97976: LD_VAR 0 4
97980: PUSH
97981: LD_VAR 0 7
97985: ARRAY
97986: PPUSH
97987: CALL_OW 247
97991: PUSH
97992: LD_INT 2
97994: EQUAL
97995: IFFALSE 98185
// begin if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_repair then
97997: LD_VAR 0 4
98001: PUSH
98002: LD_VAR 0 7
98006: ARRAY
98007: PPUSH
98008: CALL_OW 256
98012: PUSH
98013: LD_INT 700
98015: LESS
98016: PUSH
98017: LD_VAR 0 4
98021: PUSH
98022: LD_VAR 0 7
98026: ARRAY
98027: PUSH
98028: LD_VAR 0 32
98032: IN
98033: NOT
98034: AND
98035: IFFALSE 98059
// to_repair := to_repair union group [ i ] ;
98037: LD_ADDR_VAR 0 32
98041: PUSH
98042: LD_VAR 0 32
98046: PUSH
98047: LD_VAR 0 4
98051: PUSH
98052: LD_VAR 0 7
98056: ARRAY
98057: UNION
98058: ST_TO_ADDR
// if GetLives ( group [ i ] ) = 1000 and group [ i ] in to_repair then
98059: LD_VAR 0 4
98063: PUSH
98064: LD_VAR 0 7
98068: ARRAY
98069: PPUSH
98070: CALL_OW 256
98074: PUSH
98075: LD_INT 1000
98077: EQUAL
98078: PUSH
98079: LD_VAR 0 4
98083: PUSH
98084: LD_VAR 0 7
98088: ARRAY
98089: PUSH
98090: LD_VAR 0 32
98094: IN
98095: AND
98096: IFFALSE 98120
// to_repair := to_repair diff group [ i ] ;
98098: LD_ADDR_VAR 0 32
98102: PUSH
98103: LD_VAR 0 32
98107: PUSH
98108: LD_VAR 0 4
98112: PUSH
98113: LD_VAR 0 7
98117: ARRAY
98118: DIFF
98119: ST_TO_ADDR
// if group [ i ] in to_repair then
98120: LD_VAR 0 4
98124: PUSH
98125: LD_VAR 0 7
98129: ARRAY
98130: PUSH
98131: LD_VAR 0 32
98135: IN
98136: IFFALSE 98183
// begin if not IsInArea ( group [ i ] , f_repair ) then
98138: LD_VAR 0 4
98142: PUSH
98143: LD_VAR 0 7
98147: ARRAY
98148: PPUSH
98149: LD_VAR 0 22
98153: PPUSH
98154: CALL_OW 308
98158: NOT
98159: IFFALSE 98181
// ComMoveToArea ( group [ i ] , f_repair ) ;
98161: LD_VAR 0 4
98165: PUSH
98166: LD_VAR 0 7
98170: ARRAY
98171: PPUSH
98172: LD_VAR 0 22
98176: PPUSH
98177: CALL_OW 113
// continue ;
98181: GO 97808
// end ; end else
98183: GO 98463
// if group [ i ] in repairs then
98185: LD_VAR 0 4
98189: PUSH
98190: LD_VAR 0 7
98194: ARRAY
98195: PUSH
98196: LD_VAR 0 33
98200: IN
98201: IFFALSE 98463
// begin if IsInUnit ( group [ i ] ) then
98203: LD_VAR 0 4
98207: PUSH
98208: LD_VAR 0 7
98212: ARRAY
98213: PPUSH
98214: CALL_OW 310
98218: IFFALSE 98286
// begin z := IsInUnit ( group [ i ] ) ;
98220: LD_ADDR_VAR 0 13
98224: PUSH
98225: LD_VAR 0 4
98229: PUSH
98230: LD_VAR 0 7
98234: ARRAY
98235: PPUSH
98236: CALL_OW 310
98240: ST_TO_ADDR
// if z in to_repair and IsInArea ( z , f_repair ) then
98241: LD_VAR 0 13
98245: PUSH
98246: LD_VAR 0 32
98250: IN
98251: PUSH
98252: LD_VAR 0 13
98256: PPUSH
98257: LD_VAR 0 22
98261: PPUSH
98262: CALL_OW 308
98266: AND
98267: IFFALSE 98284
// ComExitVehicle ( group [ i ] ) ;
98269: LD_VAR 0 4
98273: PUSH
98274: LD_VAR 0 7
98278: ARRAY
98279: PPUSH
98280: CALL_OW 121
// end else
98284: GO 98463
// begin z := UnitFilter ( group , [ [ f_inarea , f_repair ] , [ f_empty ] ] ) ;
98286: LD_ADDR_VAR 0 13
98290: PUSH
98291: LD_VAR 0 4
98295: PPUSH
98296: LD_INT 95
98298: PUSH
98299: LD_VAR 0 22
98303: PUSH
98304: EMPTY
98305: LIST
98306: LIST
98307: PUSH
98308: LD_INT 58
98310: PUSH
98311: EMPTY
98312: LIST
98313: PUSH
98314: EMPTY
98315: LIST
98316: LIST
98317: PPUSH
98318: CALL_OW 72
98322: ST_TO_ADDR
// if not HasTask ( group [ i ] ) then
98323: LD_VAR 0 4
98327: PUSH
98328: LD_VAR 0 7
98332: ARRAY
98333: PPUSH
98334: CALL_OW 314
98338: NOT
98339: IFFALSE 98461
// begin x := NearestUnitToUnit ( z , group [ i ] ) ;
98341: LD_ADDR_VAR 0 10
98345: PUSH
98346: LD_VAR 0 13
98350: PPUSH
98351: LD_VAR 0 4
98355: PUSH
98356: LD_VAR 0 7
98360: ARRAY
98361: PPUSH
98362: CALL_OW 74
98366: ST_TO_ADDR
// if not x then
98367: LD_VAR 0 10
98371: NOT
98372: IFFALSE 98376
// continue ;
98374: GO 97808
// if GetLives ( x ) < 1000 then
98376: LD_VAR 0 10
98380: PPUSH
98381: CALL_OW 256
98385: PUSH
98386: LD_INT 1000
98388: LESS
98389: IFFALSE 98413
// ComRepairVehicle ( group [ i ] , x ) else
98391: LD_VAR 0 4
98395: PUSH
98396: LD_VAR 0 7
98400: ARRAY
98401: PPUSH
98402: LD_VAR 0 10
98406: PPUSH
98407: CALL_OW 129
98411: GO 98461
// if not ( f_heal and GetLives ( group [ i ] ) < 1000 ) then
98413: LD_VAR 0 23
98417: PUSH
98418: LD_VAR 0 4
98422: PUSH
98423: LD_VAR 0 7
98427: ARRAY
98428: PPUSH
98429: CALL_OW 256
98433: PUSH
98434: LD_INT 1000
98436: LESS
98437: AND
98438: NOT
98439: IFFALSE 98461
// ComEnterUnit ( group [ i ] , x ) ;
98441: LD_VAR 0 4
98445: PUSH
98446: LD_VAR 0 7
98450: ARRAY
98451: PPUSH
98452: LD_VAR 0 10
98456: PPUSH
98457: CALL_OW 120
// end ; continue ;
98461: GO 97808
// end ; end ; end ; if f_heal and GetType ( group [ i ] ) = unit_human then
98463: LD_VAR 0 23
98467: PUSH
98468: LD_VAR 0 4
98472: PUSH
98473: LD_VAR 0 7
98477: ARRAY
98478: PPUSH
98479: CALL_OW 247
98483: PUSH
98484: LD_INT 1
98486: EQUAL
98487: AND
98488: IFFALSE 98966
// begin if group [ i ] in healers then
98490: LD_VAR 0 4
98494: PUSH
98495: LD_VAR 0 7
98499: ARRAY
98500: PUSH
98501: LD_VAR 0 31
98505: IN
98506: IFFALSE 98779
// begin if not IsInArea ( group [ i ] , f_heal ) and not HasTask ( group [ i ] ) then
98508: LD_VAR 0 4
98512: PUSH
98513: LD_VAR 0 7
98517: ARRAY
98518: PPUSH
98519: LD_VAR 0 23
98523: PPUSH
98524: CALL_OW 308
98528: NOT
98529: PUSH
98530: LD_VAR 0 4
98534: PUSH
98535: LD_VAR 0 7
98539: ARRAY
98540: PPUSH
98541: CALL_OW 314
98545: NOT
98546: AND
98547: IFFALSE 98571
// ComMoveToArea ( group [ i ] , f_heal ) else
98549: LD_VAR 0 4
98553: PUSH
98554: LD_VAR 0 7
98558: ARRAY
98559: PPUSH
98560: LD_VAR 0 23
98564: PPUSH
98565: CALL_OW 113
98569: GO 98777
// if GetLives ( HealTarget ( group [ i ] ) ) = 1000 then
98571: LD_VAR 0 4
98575: PUSH
98576: LD_VAR 0 7
98580: ARRAY
98581: PPUSH
98582: CALL 52673 0 1
98586: PPUSH
98587: CALL_OW 256
98591: PUSH
98592: LD_INT 1000
98594: EQUAL
98595: IFFALSE 98614
// ComStop ( group [ i ] ) else
98597: LD_VAR 0 4
98601: PUSH
98602: LD_VAR 0 7
98606: ARRAY
98607: PPUSH
98608: CALL_OW 141
98612: GO 98777
// if not HasTask ( group [ i ] ) and to_heal then
98614: LD_VAR 0 4
98618: PUSH
98619: LD_VAR 0 7
98623: ARRAY
98624: PPUSH
98625: CALL_OW 314
98629: NOT
98630: PUSH
98631: LD_VAR 0 30
98635: AND
98636: IFFALSE 98777
// begin z := NearestUnitToUnit ( UnitFilter ( to_heal , [ f_not , [ f_inside ] ] ) , group [ i ] ) ;
98638: LD_ADDR_VAR 0 13
98642: PUSH
98643: LD_VAR 0 30
98647: PPUSH
98648: LD_INT 3
98650: PUSH
98651: LD_INT 54
98653: PUSH
98654: EMPTY
98655: LIST
98656: PUSH
98657: EMPTY
98658: LIST
98659: LIST
98660: PPUSH
98661: CALL_OW 72
98665: PPUSH
98666: LD_VAR 0 4
98670: PUSH
98671: LD_VAR 0 7
98675: ARRAY
98676: PPUSH
98677: CALL_OW 74
98681: ST_TO_ADDR
// if z then
98682: LD_VAR 0 13
98686: IFFALSE 98777
// if FilterAllUnits ( [ [ f_dist , z , 10 ] , [ f_enemy , GetSide ( z ) ] ] ) = 0 then
98688: LD_INT 91
98690: PUSH
98691: LD_VAR 0 13
98695: PUSH
98696: LD_INT 10
98698: PUSH
98699: EMPTY
98700: LIST
98701: LIST
98702: LIST
98703: PUSH
98704: LD_INT 81
98706: PUSH
98707: LD_VAR 0 13
98711: PPUSH
98712: CALL_OW 255
98716: PUSH
98717: EMPTY
98718: LIST
98719: LIST
98720: PUSH
98721: EMPTY
98722: LIST
98723: LIST
98724: PPUSH
98725: CALL_OW 69
98729: PUSH
98730: LD_INT 0
98732: EQUAL
98733: IFFALSE 98757
// ComHeal ( group [ i ] , z ) else
98735: LD_VAR 0 4
98739: PUSH
98740: LD_VAR 0 7
98744: ARRAY
98745: PPUSH
98746: LD_VAR 0 13
98750: PPUSH
98751: CALL_OW 128
98755: GO 98777
// ComMoveToArea ( group [ i ] , f_heal ) ;
98757: LD_VAR 0 4
98761: PUSH
98762: LD_VAR 0 7
98766: ARRAY
98767: PPUSH
98768: LD_VAR 0 23
98772: PPUSH
98773: CALL_OW 113
// end ; continue ;
98777: GO 97808
// end ; if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_heal then
98779: LD_VAR 0 4
98783: PUSH
98784: LD_VAR 0 7
98788: ARRAY
98789: PPUSH
98790: CALL_OW 256
98794: PUSH
98795: LD_INT 700
98797: LESS
98798: PUSH
98799: LD_VAR 0 4
98803: PUSH
98804: LD_VAR 0 7
98808: ARRAY
98809: PUSH
98810: LD_VAR 0 30
98814: IN
98815: NOT
98816: AND
98817: IFFALSE 98841
// to_heal := to_heal union group [ i ] ;
98819: LD_ADDR_VAR 0 30
98823: PUSH
98824: LD_VAR 0 30
98828: PUSH
98829: LD_VAR 0 4
98833: PUSH
98834: LD_VAR 0 7
98838: ARRAY
98839: UNION
98840: ST_TO_ADDR
// if group [ i ] in to_heal then
98841: LD_VAR 0 4
98845: PUSH
98846: LD_VAR 0 7
98850: ARRAY
98851: PUSH
98852: LD_VAR 0 30
98856: IN
98857: IFFALSE 98966
// begin if GetLives ( group [ i ] ) = 1000 then
98859: LD_VAR 0 4
98863: PUSH
98864: LD_VAR 0 7
98868: ARRAY
98869: PPUSH
98870: CALL_OW 256
98874: PUSH
98875: LD_INT 1000
98877: EQUAL
98878: IFFALSE 98904
// to_heal := to_heal diff group [ i ] else
98880: LD_ADDR_VAR 0 30
98884: PUSH
98885: LD_VAR 0 30
98889: PUSH
98890: LD_VAR 0 4
98894: PUSH
98895: LD_VAR 0 7
98899: ARRAY
98900: DIFF
98901: ST_TO_ADDR
98902: GO 98966
// begin if not IsInArea ( group [ i ] , to_heal ) then
98904: LD_VAR 0 4
98908: PUSH
98909: LD_VAR 0 7
98913: ARRAY
98914: PPUSH
98915: LD_VAR 0 30
98919: PPUSH
98920: CALL_OW 308
98924: NOT
98925: IFFALSE 98949
// ComMoveToArea ( group [ i ] , f_heal ) else
98927: LD_VAR 0 4
98931: PUSH
98932: LD_VAR 0 7
98936: ARRAY
98937: PPUSH
98938: LD_VAR 0 23
98942: PPUSH
98943: CALL_OW 113
98947: GO 98964
// ComHold ( group [ i ] ) ;
98949: LD_VAR 0 4
98953: PUSH
98954: LD_VAR 0 7
98958: ARRAY
98959: PPUSH
98960: CALL_OW 140
// continue ;
98964: GO 97808
// end ; end ; end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
98966: LD_VAR 0 4
98970: PUSH
98971: LD_VAR 0 7
98975: ARRAY
98976: PPUSH
98977: LD_INT 10
98979: PPUSH
98980: CALL 51093 0 2
98984: NOT
98985: PUSH
98986: LD_VAR 0 16
98990: PUSH
98991: LD_VAR 0 7
98995: ARRAY
98996: PUSH
98997: EMPTY
98998: EQUAL
98999: NOT
99000: AND
99001: IFFALSE 99267
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
99003: LD_VAR 0 4
99007: PUSH
99008: LD_VAR 0 7
99012: ARRAY
99013: PPUSH
99014: CALL_OW 262
99018: PUSH
99019: LD_INT 1
99021: PUSH
99022: LD_INT 2
99024: PUSH
99025: EMPTY
99026: LIST
99027: LIST
99028: IN
99029: IFFALSE 99070
// if GetFuel ( group [ i ] ) < 10 then
99031: LD_VAR 0 4
99035: PUSH
99036: LD_VAR 0 7
99040: ARRAY
99041: PPUSH
99042: CALL_OW 261
99046: PUSH
99047: LD_INT 10
99049: LESS
99050: IFFALSE 99070
// SetFuel ( group [ i ] , 12 ) ;
99052: LD_VAR 0 4
99056: PUSH
99057: LD_VAR 0 7
99061: ARRAY
99062: PPUSH
99063: LD_INT 12
99065: PPUSH
99066: CALL_OW 240
// if units_path [ i ] then
99070: LD_VAR 0 16
99074: PUSH
99075: LD_VAR 0 7
99079: ARRAY
99080: IFFALSE 99265
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
99082: LD_VAR 0 4
99086: PUSH
99087: LD_VAR 0 7
99091: ARRAY
99092: PPUSH
99093: LD_VAR 0 16
99097: PUSH
99098: LD_VAR 0 7
99102: ARRAY
99103: PUSH
99104: LD_INT 1
99106: ARRAY
99107: PUSH
99108: LD_INT 1
99110: ARRAY
99111: PPUSH
99112: LD_VAR 0 16
99116: PUSH
99117: LD_VAR 0 7
99121: ARRAY
99122: PUSH
99123: LD_INT 1
99125: ARRAY
99126: PUSH
99127: LD_INT 2
99129: ARRAY
99130: PPUSH
99131: CALL_OW 297
99135: PUSH
99136: LD_INT 6
99138: GREATER
99139: IFFALSE 99214
// begin if not HasTask ( group [ i ] ) then
99141: LD_VAR 0 4
99145: PUSH
99146: LD_VAR 0 7
99150: ARRAY
99151: PPUSH
99152: CALL_OW 314
99156: NOT
99157: IFFALSE 99212
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
99159: LD_VAR 0 4
99163: PUSH
99164: LD_VAR 0 7
99168: ARRAY
99169: PPUSH
99170: LD_VAR 0 16
99174: PUSH
99175: LD_VAR 0 7
99179: ARRAY
99180: PUSH
99181: LD_INT 1
99183: ARRAY
99184: PUSH
99185: LD_INT 1
99187: ARRAY
99188: PPUSH
99189: LD_VAR 0 16
99193: PUSH
99194: LD_VAR 0 7
99198: ARRAY
99199: PUSH
99200: LD_INT 1
99202: ARRAY
99203: PUSH
99204: LD_INT 2
99206: ARRAY
99207: PPUSH
99208: CALL_OW 114
// end else
99212: GO 99265
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
99214: LD_ADDR_VAR 0 15
99218: PUSH
99219: LD_VAR 0 16
99223: PUSH
99224: LD_VAR 0 7
99228: ARRAY
99229: PPUSH
99230: LD_INT 1
99232: PPUSH
99233: CALL_OW 3
99237: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
99238: LD_ADDR_VAR 0 16
99242: PUSH
99243: LD_VAR 0 16
99247: PPUSH
99248: LD_VAR 0 7
99252: PPUSH
99253: LD_VAR 0 15
99257: PPUSH
99258: CALL_OW 1
99262: ST_TO_ADDR
// continue ;
99263: GO 97808
// end ; end ; end else
99265: GO 101929
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
99267: LD_ADDR_VAR 0 14
99271: PUSH
99272: LD_INT 81
99274: PUSH
99275: LD_VAR 0 4
99279: PUSH
99280: LD_VAR 0 7
99284: ARRAY
99285: PPUSH
99286: CALL_OW 255
99290: PUSH
99291: EMPTY
99292: LIST
99293: LIST
99294: PPUSH
99295: CALL_OW 69
99299: ST_TO_ADDR
// if not tmp then
99300: LD_VAR 0 14
99304: NOT
99305: IFFALSE 99309
// continue ;
99307: GO 97808
// if f_ignore_area then
99309: LD_VAR 0 17
99313: IFFALSE 99401
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
99315: LD_ADDR_VAR 0 15
99319: PUSH
99320: LD_VAR 0 14
99324: PPUSH
99325: LD_INT 3
99327: PUSH
99328: LD_INT 92
99330: PUSH
99331: LD_VAR 0 17
99335: PUSH
99336: LD_INT 1
99338: ARRAY
99339: PUSH
99340: LD_VAR 0 17
99344: PUSH
99345: LD_INT 2
99347: ARRAY
99348: PUSH
99349: LD_VAR 0 17
99353: PUSH
99354: LD_INT 3
99356: ARRAY
99357: PUSH
99358: EMPTY
99359: LIST
99360: LIST
99361: LIST
99362: LIST
99363: PUSH
99364: EMPTY
99365: LIST
99366: LIST
99367: PPUSH
99368: CALL_OW 72
99372: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
99373: LD_VAR 0 14
99377: PUSH
99378: LD_VAR 0 15
99382: DIFF
99383: IFFALSE 99401
// tmp := tmp diff tmp2 ;
99385: LD_ADDR_VAR 0 14
99389: PUSH
99390: LD_VAR 0 14
99394: PUSH
99395: LD_VAR 0 15
99399: DIFF
99400: ST_TO_ADDR
// end ; if not f_murder then
99401: LD_VAR 0 20
99405: NOT
99406: IFFALSE 99464
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
99408: LD_ADDR_VAR 0 15
99412: PUSH
99413: LD_VAR 0 14
99417: PPUSH
99418: LD_INT 3
99420: PUSH
99421: LD_INT 50
99423: PUSH
99424: EMPTY
99425: LIST
99426: PUSH
99427: EMPTY
99428: LIST
99429: LIST
99430: PPUSH
99431: CALL_OW 72
99435: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
99436: LD_VAR 0 14
99440: PUSH
99441: LD_VAR 0 15
99445: DIFF
99446: IFFALSE 99464
// tmp := tmp diff tmp2 ;
99448: LD_ADDR_VAR 0 14
99452: PUSH
99453: LD_VAR 0 14
99457: PUSH
99458: LD_VAR 0 15
99462: DIFF
99463: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
99464: LD_ADDR_VAR 0 14
99468: PUSH
99469: LD_VAR 0 4
99473: PUSH
99474: LD_VAR 0 7
99478: ARRAY
99479: PPUSH
99480: LD_VAR 0 14
99484: PPUSH
99485: LD_INT 1
99487: PPUSH
99488: LD_INT 1
99490: PPUSH
99491: CALL 24736 0 4
99495: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
99496: LD_VAR 0 4
99500: PUSH
99501: LD_VAR 0 7
99505: ARRAY
99506: PPUSH
99507: CALL_OW 257
99511: PUSH
99512: LD_INT 1
99514: EQUAL
99515: IFFALSE 99963
// begin if WantPlant ( group [ i ] ) then
99517: LD_VAR 0 4
99521: PUSH
99522: LD_VAR 0 7
99526: ARRAY
99527: PPUSH
99528: CALL 24237 0 1
99532: IFFALSE 99536
// continue ;
99534: GO 97808
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
99536: LD_VAR 0 18
99540: PUSH
99541: LD_VAR 0 4
99545: PUSH
99546: LD_VAR 0 7
99550: ARRAY
99551: PPUSH
99552: CALL_OW 310
99556: NOT
99557: AND
99558: PUSH
99559: LD_VAR 0 14
99563: PUSH
99564: LD_INT 1
99566: ARRAY
99567: PUSH
99568: LD_VAR 0 14
99572: PPUSH
99573: LD_INT 21
99575: PUSH
99576: LD_INT 2
99578: PUSH
99579: EMPTY
99580: LIST
99581: LIST
99582: PUSH
99583: LD_INT 58
99585: PUSH
99586: EMPTY
99587: LIST
99588: PUSH
99589: EMPTY
99590: LIST
99591: LIST
99592: PPUSH
99593: CALL_OW 72
99597: IN
99598: AND
99599: IFFALSE 99635
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
99601: LD_VAR 0 4
99605: PUSH
99606: LD_VAR 0 7
99610: ARRAY
99611: PPUSH
99612: LD_VAR 0 14
99616: PUSH
99617: LD_INT 1
99619: ARRAY
99620: PPUSH
99621: CALL_OW 120
// attacking := true ;
99625: LD_ADDR_VAR 0 29
99629: PUSH
99630: LD_INT 1
99632: ST_TO_ADDR
// continue ;
99633: GO 97808
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
99635: LD_VAR 0 26
99639: PUSH
99640: LD_VAR 0 4
99644: PUSH
99645: LD_VAR 0 7
99649: ARRAY
99650: PPUSH
99651: CALL_OW 257
99655: PUSH
99656: LD_INT 1
99658: EQUAL
99659: AND
99660: PUSH
99661: LD_VAR 0 4
99665: PUSH
99666: LD_VAR 0 7
99670: ARRAY
99671: PPUSH
99672: CALL_OW 256
99676: PUSH
99677: LD_INT 800
99679: LESS
99680: AND
99681: PUSH
99682: LD_VAR 0 4
99686: PUSH
99687: LD_VAR 0 7
99691: ARRAY
99692: PPUSH
99693: CALL_OW 318
99697: NOT
99698: AND
99699: IFFALSE 99716
// ComCrawl ( group [ i ] ) ;
99701: LD_VAR 0 4
99705: PUSH
99706: LD_VAR 0 7
99710: ARRAY
99711: PPUSH
99712: CALL_OW 137
// if f_mines then
99716: LD_VAR 0 21
99720: IFFALSE 99963
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
99722: LD_VAR 0 14
99726: PUSH
99727: LD_INT 1
99729: ARRAY
99730: PPUSH
99731: CALL_OW 247
99735: PUSH
99736: LD_INT 3
99738: EQUAL
99739: PUSH
99740: LD_VAR 0 14
99744: PUSH
99745: LD_INT 1
99747: ARRAY
99748: PUSH
99749: LD_VAR 0 27
99753: IN
99754: NOT
99755: AND
99756: IFFALSE 99963
// begin x := GetX ( tmp [ 1 ] ) ;
99758: LD_ADDR_VAR 0 10
99762: PUSH
99763: LD_VAR 0 14
99767: PUSH
99768: LD_INT 1
99770: ARRAY
99771: PPUSH
99772: CALL_OW 250
99776: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
99777: LD_ADDR_VAR 0 11
99781: PUSH
99782: LD_VAR 0 14
99786: PUSH
99787: LD_INT 1
99789: ARRAY
99790: PPUSH
99791: CALL_OW 251
99795: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
99796: LD_ADDR_VAR 0 12
99800: PUSH
99801: LD_VAR 0 4
99805: PUSH
99806: LD_VAR 0 7
99810: ARRAY
99811: PPUSH
99812: CALL 51178 0 1
99816: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
99817: LD_VAR 0 4
99821: PUSH
99822: LD_VAR 0 7
99826: ARRAY
99827: PPUSH
99828: LD_VAR 0 10
99832: PPUSH
99833: LD_VAR 0 11
99837: PPUSH
99838: LD_VAR 0 14
99842: PUSH
99843: LD_INT 1
99845: ARRAY
99846: PPUSH
99847: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
99851: LD_VAR 0 4
99855: PUSH
99856: LD_VAR 0 7
99860: ARRAY
99861: PPUSH
99862: LD_VAR 0 10
99866: PPUSH
99867: LD_VAR 0 12
99871: PPUSH
99872: LD_INT 7
99874: PPUSH
99875: CALL_OW 272
99879: PPUSH
99880: LD_VAR 0 11
99884: PPUSH
99885: LD_VAR 0 12
99889: PPUSH
99890: LD_INT 7
99892: PPUSH
99893: CALL_OW 273
99897: PPUSH
99898: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
99902: LD_VAR 0 4
99906: PUSH
99907: LD_VAR 0 7
99911: ARRAY
99912: PPUSH
99913: LD_INT 71
99915: PPUSH
99916: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
99920: LD_ADDR_VAR 0 27
99924: PUSH
99925: LD_VAR 0 27
99929: PPUSH
99930: LD_VAR 0 27
99934: PUSH
99935: LD_INT 1
99937: PLUS
99938: PPUSH
99939: LD_VAR 0 14
99943: PUSH
99944: LD_INT 1
99946: ARRAY
99947: PPUSH
99948: CALL_OW 1
99952: ST_TO_ADDR
// attacking := true ;
99953: LD_ADDR_VAR 0 29
99957: PUSH
99958: LD_INT 1
99960: ST_TO_ADDR
// continue ;
99961: GO 97808
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
99963: LD_VAR 0 4
99967: PUSH
99968: LD_VAR 0 7
99972: ARRAY
99973: PPUSH
99974: CALL_OW 257
99978: PUSH
99979: LD_INT 17
99981: EQUAL
99982: PUSH
99983: LD_VAR 0 4
99987: PUSH
99988: LD_VAR 0 7
99992: ARRAY
99993: PPUSH
99994: CALL_OW 110
99998: PUSH
99999: LD_INT 71
100001: EQUAL
100002: NOT
100003: AND
100004: IFFALSE 100150
// begin attacking := false ;
100006: LD_ADDR_VAR 0 29
100010: PUSH
100011: LD_INT 0
100013: ST_TO_ADDR
// k := 5 ;
100014: LD_ADDR_VAR 0 9
100018: PUSH
100019: LD_INT 5
100021: ST_TO_ADDR
// if tmp < k then
100022: LD_VAR 0 14
100026: PUSH
100027: LD_VAR 0 9
100031: LESS
100032: IFFALSE 100044
// k := tmp ;
100034: LD_ADDR_VAR 0 9
100038: PUSH
100039: LD_VAR 0 14
100043: ST_TO_ADDR
// for j = 1 to k do
100044: LD_ADDR_VAR 0 8
100048: PUSH
100049: DOUBLE
100050: LD_INT 1
100052: DEC
100053: ST_TO_ADDR
100054: LD_VAR 0 9
100058: PUSH
100059: FOR_TO
100060: IFFALSE 100148
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
100062: LD_VAR 0 14
100066: PUSH
100067: LD_VAR 0 8
100071: ARRAY
100072: PUSH
100073: LD_VAR 0 14
100077: PPUSH
100078: LD_INT 58
100080: PUSH
100081: EMPTY
100082: LIST
100083: PPUSH
100084: CALL_OW 72
100088: IN
100089: NOT
100090: IFFALSE 100146
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
100092: LD_VAR 0 4
100096: PUSH
100097: LD_VAR 0 7
100101: ARRAY
100102: PPUSH
100103: LD_VAR 0 14
100107: PUSH
100108: LD_VAR 0 8
100112: ARRAY
100113: PPUSH
100114: CALL_OW 115
// attacking := true ;
100118: LD_ADDR_VAR 0 29
100122: PUSH
100123: LD_INT 1
100125: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
100126: LD_VAR 0 4
100130: PUSH
100131: LD_VAR 0 7
100135: ARRAY
100136: PPUSH
100137: LD_INT 71
100139: PPUSH
100140: CALL_OW 109
// continue ;
100144: GO 100059
// end ; end ;
100146: GO 100059
100148: POP
100149: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
100150: LD_VAR 0 4
100154: PUSH
100155: LD_VAR 0 7
100159: ARRAY
100160: PPUSH
100161: CALL_OW 257
100165: PUSH
100166: LD_INT 8
100168: EQUAL
100169: PUSH
100170: LD_VAR 0 4
100174: PUSH
100175: LD_VAR 0 7
100179: ARRAY
100180: PPUSH
100181: CALL_OW 264
100185: PUSH
100186: LD_INT 28
100188: PUSH
100189: LD_INT 45
100191: PUSH
100192: LD_INT 7
100194: PUSH
100195: LD_INT 47
100197: PUSH
100198: EMPTY
100199: LIST
100200: LIST
100201: LIST
100202: LIST
100203: IN
100204: OR
100205: IFFALSE 100461
// begin attacking := false ;
100207: LD_ADDR_VAR 0 29
100211: PUSH
100212: LD_INT 0
100214: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
100215: LD_VAR 0 14
100219: PUSH
100220: LD_INT 1
100222: ARRAY
100223: PPUSH
100224: CALL_OW 266
100228: PUSH
100229: LD_INT 32
100231: PUSH
100232: LD_INT 31
100234: PUSH
100235: LD_INT 33
100237: PUSH
100238: LD_INT 4
100240: PUSH
100241: LD_INT 5
100243: PUSH
100244: EMPTY
100245: LIST
100246: LIST
100247: LIST
100248: LIST
100249: LIST
100250: IN
100251: IFFALSE 100437
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
100253: LD_ADDR_VAR 0 9
100257: PUSH
100258: LD_VAR 0 14
100262: PUSH
100263: LD_INT 1
100265: ARRAY
100266: PPUSH
100267: CALL_OW 266
100271: PPUSH
100272: LD_VAR 0 14
100276: PUSH
100277: LD_INT 1
100279: ARRAY
100280: PPUSH
100281: CALL_OW 250
100285: PPUSH
100286: LD_VAR 0 14
100290: PUSH
100291: LD_INT 1
100293: ARRAY
100294: PPUSH
100295: CALL_OW 251
100299: PPUSH
100300: LD_VAR 0 14
100304: PUSH
100305: LD_INT 1
100307: ARRAY
100308: PPUSH
100309: CALL_OW 254
100313: PPUSH
100314: LD_VAR 0 14
100318: PUSH
100319: LD_INT 1
100321: ARRAY
100322: PPUSH
100323: CALL_OW 248
100327: PPUSH
100328: LD_INT 0
100330: PPUSH
100331: CALL 32548 0 6
100335: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
100336: LD_ADDR_VAR 0 8
100340: PUSH
100341: LD_VAR 0 4
100345: PUSH
100346: LD_VAR 0 7
100350: ARRAY
100351: PPUSH
100352: LD_VAR 0 9
100356: PPUSH
100357: CALL 51218 0 2
100361: ST_TO_ADDR
// if j then
100362: LD_VAR 0 8
100366: IFFALSE 100435
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
100368: LD_VAR 0 8
100372: PUSH
100373: LD_INT 1
100375: ARRAY
100376: PPUSH
100377: LD_VAR 0 8
100381: PUSH
100382: LD_INT 2
100384: ARRAY
100385: PPUSH
100386: CALL_OW 488
100390: IFFALSE 100435
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
100392: LD_VAR 0 4
100396: PUSH
100397: LD_VAR 0 7
100401: ARRAY
100402: PPUSH
100403: LD_VAR 0 8
100407: PUSH
100408: LD_INT 1
100410: ARRAY
100411: PPUSH
100412: LD_VAR 0 8
100416: PUSH
100417: LD_INT 2
100419: ARRAY
100420: PPUSH
100421: CALL_OW 116
// attacking := true ;
100425: LD_ADDR_VAR 0 29
100429: PUSH
100430: LD_INT 1
100432: ST_TO_ADDR
// continue ;
100433: GO 97808
// end ; end else
100435: GO 100461
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
100437: LD_VAR 0 4
100441: PUSH
100442: LD_VAR 0 7
100446: ARRAY
100447: PPUSH
100448: LD_VAR 0 14
100452: PUSH
100453: LD_INT 1
100455: ARRAY
100456: PPUSH
100457: CALL_OW 115
// end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
100461: LD_VAR 0 4
100465: PUSH
100466: LD_VAR 0 7
100470: ARRAY
100471: PPUSH
100472: CALL_OW 265
100476: PUSH
100477: LD_INT 11
100479: EQUAL
100480: IFFALSE 100758
// begin k := 10 ;
100482: LD_ADDR_VAR 0 9
100486: PUSH
100487: LD_INT 10
100489: ST_TO_ADDR
// x := 0 ;
100490: LD_ADDR_VAR 0 10
100494: PUSH
100495: LD_INT 0
100497: ST_TO_ADDR
// if tmp < k then
100498: LD_VAR 0 14
100502: PUSH
100503: LD_VAR 0 9
100507: LESS
100508: IFFALSE 100520
// k := tmp ;
100510: LD_ADDR_VAR 0 9
100514: PUSH
100515: LD_VAR 0 14
100519: ST_TO_ADDR
// for j = k downto 1 do
100520: LD_ADDR_VAR 0 8
100524: PUSH
100525: DOUBLE
100526: LD_VAR 0 9
100530: INC
100531: ST_TO_ADDR
100532: LD_INT 1
100534: PUSH
100535: FOR_DOWNTO
100536: IFFALSE 100611
// begin if GetType ( tmp [ j ] ) = unit_human then
100538: LD_VAR 0 14
100542: PUSH
100543: LD_VAR 0 8
100547: ARRAY
100548: PPUSH
100549: CALL_OW 247
100553: PUSH
100554: LD_INT 1
100556: EQUAL
100557: IFFALSE 100609
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
100559: LD_VAR 0 4
100563: PUSH
100564: LD_VAR 0 7
100568: ARRAY
100569: PPUSH
100570: LD_VAR 0 14
100574: PUSH
100575: LD_VAR 0 8
100579: ARRAY
100580: PPUSH
100581: CALL 51489 0 2
// x := tmp [ j ] ;
100585: LD_ADDR_VAR 0 10
100589: PUSH
100590: LD_VAR 0 14
100594: PUSH
100595: LD_VAR 0 8
100599: ARRAY
100600: ST_TO_ADDR
// attacking := true ;
100601: LD_ADDR_VAR 0 29
100605: PUSH
100606: LD_INT 1
100608: ST_TO_ADDR
// end ; end ;
100609: GO 100535
100611: POP
100612: POP
// if not x then
100613: LD_VAR 0 10
100617: NOT
100618: IFFALSE 100758
// begin attacking := true ;
100620: LD_ADDR_VAR 0 29
100624: PUSH
100625: LD_INT 1
100627: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
100628: LD_VAR 0 4
100632: PUSH
100633: LD_VAR 0 7
100637: ARRAY
100638: PPUSH
100639: CALL_OW 250
100643: PPUSH
100644: LD_VAR 0 4
100648: PUSH
100649: LD_VAR 0 7
100653: ARRAY
100654: PPUSH
100655: CALL_OW 251
100659: PPUSH
100660: CALL_OW 546
100664: PUSH
100665: LD_INT 2
100667: ARRAY
100668: PUSH
100669: LD_VAR 0 14
100673: PUSH
100674: LD_INT 1
100676: ARRAY
100677: PPUSH
100678: CALL_OW 250
100682: PPUSH
100683: LD_VAR 0 14
100687: PUSH
100688: LD_INT 1
100690: ARRAY
100691: PPUSH
100692: CALL_OW 251
100696: PPUSH
100697: CALL_OW 546
100701: PUSH
100702: LD_INT 2
100704: ARRAY
100705: EQUAL
100706: IFFALSE 100734
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
100708: LD_VAR 0 4
100712: PUSH
100713: LD_VAR 0 7
100717: ARRAY
100718: PPUSH
100719: LD_VAR 0 14
100723: PUSH
100724: LD_INT 1
100726: ARRAY
100727: PPUSH
100728: CALL 51489 0 2
100732: GO 100758
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
100734: LD_VAR 0 4
100738: PUSH
100739: LD_VAR 0 7
100743: ARRAY
100744: PPUSH
100745: LD_VAR 0 14
100749: PUSH
100750: LD_INT 1
100752: ARRAY
100753: PPUSH
100754: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
100758: LD_VAR 0 4
100762: PUSH
100763: LD_VAR 0 7
100767: ARRAY
100768: PPUSH
100769: CALL_OW 264
100773: PUSH
100774: LD_INT 29
100776: EQUAL
100777: IFFALSE 101143
// begin if WantsToAttack ( group [ i ] ) in bombed then
100779: LD_VAR 0 4
100783: PUSH
100784: LD_VAR 0 7
100788: ARRAY
100789: PPUSH
100790: CALL_OW 319
100794: PUSH
100795: LD_VAR 0 28
100799: IN
100800: IFFALSE 100804
// continue ;
100802: GO 97808
// k := 8 ;
100804: LD_ADDR_VAR 0 9
100808: PUSH
100809: LD_INT 8
100811: ST_TO_ADDR
// x := 0 ;
100812: LD_ADDR_VAR 0 10
100816: PUSH
100817: LD_INT 0
100819: ST_TO_ADDR
// if tmp < k then
100820: LD_VAR 0 14
100824: PUSH
100825: LD_VAR 0 9
100829: LESS
100830: IFFALSE 100842
// k := tmp ;
100832: LD_ADDR_VAR 0 9
100836: PUSH
100837: LD_VAR 0 14
100841: ST_TO_ADDR
// for j = 1 to k do
100842: LD_ADDR_VAR 0 8
100846: PUSH
100847: DOUBLE
100848: LD_INT 1
100850: DEC
100851: ST_TO_ADDR
100852: LD_VAR 0 9
100856: PUSH
100857: FOR_TO
100858: IFFALSE 100990
// begin if GetType ( tmp [ j ] ) = unit_building then
100860: LD_VAR 0 14
100864: PUSH
100865: LD_VAR 0 8
100869: ARRAY
100870: PPUSH
100871: CALL_OW 247
100875: PUSH
100876: LD_INT 3
100878: EQUAL
100879: IFFALSE 100988
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
100881: LD_VAR 0 14
100885: PUSH
100886: LD_VAR 0 8
100890: ARRAY
100891: PUSH
100892: LD_VAR 0 28
100896: IN
100897: NOT
100898: PUSH
100899: LD_VAR 0 14
100903: PUSH
100904: LD_VAR 0 8
100908: ARRAY
100909: PPUSH
100910: CALL_OW 313
100914: AND
100915: IFFALSE 100988
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
100917: LD_VAR 0 4
100921: PUSH
100922: LD_VAR 0 7
100926: ARRAY
100927: PPUSH
100928: LD_VAR 0 14
100932: PUSH
100933: LD_VAR 0 8
100937: ARRAY
100938: PPUSH
100939: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
100943: LD_ADDR_VAR 0 28
100947: PUSH
100948: LD_VAR 0 28
100952: PPUSH
100953: LD_VAR 0 28
100957: PUSH
100958: LD_INT 1
100960: PLUS
100961: PPUSH
100962: LD_VAR 0 14
100966: PUSH
100967: LD_VAR 0 8
100971: ARRAY
100972: PPUSH
100973: CALL_OW 1
100977: ST_TO_ADDR
// attacking := true ;
100978: LD_ADDR_VAR 0 29
100982: PUSH
100983: LD_INT 1
100985: ST_TO_ADDR
// break ;
100986: GO 100990
// end ; end ;
100988: GO 100857
100990: POP
100991: POP
// if not attacking and f_attack_depot then
100992: LD_VAR 0 29
100996: NOT
100997: PUSH
100998: LD_VAR 0 25
101002: AND
101003: IFFALSE 101098
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
101005: LD_ADDR_VAR 0 13
101009: PUSH
101010: LD_VAR 0 14
101014: PPUSH
101015: LD_INT 2
101017: PUSH
101018: LD_INT 30
101020: PUSH
101021: LD_INT 0
101023: PUSH
101024: EMPTY
101025: LIST
101026: LIST
101027: PUSH
101028: LD_INT 30
101030: PUSH
101031: LD_INT 1
101033: PUSH
101034: EMPTY
101035: LIST
101036: LIST
101037: PUSH
101038: EMPTY
101039: LIST
101040: LIST
101041: LIST
101042: PPUSH
101043: CALL_OW 72
101047: ST_TO_ADDR
// if z then
101048: LD_VAR 0 13
101052: IFFALSE 101098
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
101054: LD_VAR 0 4
101058: PUSH
101059: LD_VAR 0 7
101063: ARRAY
101064: PPUSH
101065: LD_VAR 0 13
101069: PPUSH
101070: LD_VAR 0 4
101074: PUSH
101075: LD_VAR 0 7
101079: ARRAY
101080: PPUSH
101081: CALL_OW 74
101085: PPUSH
101086: CALL_OW 115
// attacking := true ;
101090: LD_ADDR_VAR 0 29
101094: PUSH
101095: LD_INT 1
101097: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
101098: LD_VAR 0 4
101102: PUSH
101103: LD_VAR 0 7
101107: ARRAY
101108: PPUSH
101109: CALL_OW 256
101113: PUSH
101114: LD_INT 500
101116: LESS
101117: IFFALSE 101143
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
101119: LD_VAR 0 4
101123: PUSH
101124: LD_VAR 0 7
101128: ARRAY
101129: PPUSH
101130: LD_VAR 0 14
101134: PUSH
101135: LD_INT 1
101137: ARRAY
101138: PPUSH
101139: CALL_OW 115
// end ; if GetWeapon ( group [ i ] ) = ru_time_lapser then
101143: LD_VAR 0 4
101147: PUSH
101148: LD_VAR 0 7
101152: ARRAY
101153: PPUSH
101154: CALL_OW 264
101158: PUSH
101159: LD_INT 49
101161: EQUAL
101162: IFFALSE 101283
// begin if not HasTask ( group [ i ] ) then
101164: LD_VAR 0 4
101168: PUSH
101169: LD_VAR 0 7
101173: ARRAY
101174: PPUSH
101175: CALL_OW 314
101179: NOT
101180: IFFALSE 101283
// begin k := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) , group [ i ] ) ;
101182: LD_ADDR_VAR 0 9
101186: PUSH
101187: LD_INT 81
101189: PUSH
101190: LD_VAR 0 4
101194: PUSH
101195: LD_VAR 0 7
101199: ARRAY
101200: PPUSH
101201: CALL_OW 255
101205: PUSH
101206: EMPTY
101207: LIST
101208: LIST
101209: PPUSH
101210: CALL_OW 69
101214: PPUSH
101215: LD_VAR 0 4
101219: PUSH
101220: LD_VAR 0 7
101224: ARRAY
101225: PPUSH
101226: CALL_OW 74
101230: ST_TO_ADDR
// if k then
101231: LD_VAR 0 9
101235: IFFALSE 101283
// if GetDistUnits ( group [ i ] , k ) > 10 then
101237: LD_VAR 0 4
101241: PUSH
101242: LD_VAR 0 7
101246: ARRAY
101247: PPUSH
101248: LD_VAR 0 9
101252: PPUSH
101253: CALL_OW 296
101257: PUSH
101258: LD_INT 10
101260: GREATER
101261: IFFALSE 101283
// ComMoveUnit ( group [ i ] , k ) ;
101263: LD_VAR 0 4
101267: PUSH
101268: LD_VAR 0 7
101272: ARRAY
101273: PPUSH
101274: LD_VAR 0 9
101278: PPUSH
101279: CALL_OW 112
// end ; end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
101283: LD_VAR 0 4
101287: PUSH
101288: LD_VAR 0 7
101292: ARRAY
101293: PPUSH
101294: CALL_OW 256
101298: PUSH
101299: LD_INT 250
101301: LESS
101302: PUSH
101303: LD_VAR 0 4
101307: PUSH
101308: LD_VAR 0 7
101312: ARRAY
101313: PUSH
101314: LD_INT 21
101316: PUSH
101317: LD_INT 2
101319: PUSH
101320: EMPTY
101321: LIST
101322: LIST
101323: PUSH
101324: LD_INT 23
101326: PUSH
101327: LD_INT 2
101329: PUSH
101330: EMPTY
101331: LIST
101332: LIST
101333: PUSH
101334: EMPTY
101335: LIST
101336: LIST
101337: PPUSH
101338: CALL_OW 69
101342: IN
101343: AND
101344: IFFALSE 101469
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
101346: LD_ADDR_VAR 0 9
101350: PUSH
101351: LD_OWVAR 3
101355: PUSH
101356: LD_VAR 0 4
101360: PUSH
101361: LD_VAR 0 7
101365: ARRAY
101366: DIFF
101367: PPUSH
101368: LD_VAR 0 4
101372: PUSH
101373: LD_VAR 0 7
101377: ARRAY
101378: PPUSH
101379: CALL_OW 74
101383: ST_TO_ADDR
// if not k then
101384: LD_VAR 0 9
101388: NOT
101389: IFFALSE 101393
// continue ;
101391: GO 97808
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
101393: LD_VAR 0 9
101397: PUSH
101398: LD_INT 81
101400: PUSH
101401: LD_VAR 0 4
101405: PUSH
101406: LD_VAR 0 7
101410: ARRAY
101411: PPUSH
101412: CALL_OW 255
101416: PUSH
101417: EMPTY
101418: LIST
101419: LIST
101420: PPUSH
101421: CALL_OW 69
101425: IN
101426: PUSH
101427: LD_VAR 0 9
101431: PPUSH
101432: LD_VAR 0 4
101436: PUSH
101437: LD_VAR 0 7
101441: ARRAY
101442: PPUSH
101443: CALL_OW 296
101447: PUSH
101448: LD_INT 5
101450: LESS
101451: AND
101452: IFFALSE 101469
// ComAutodestruct ( group [ i ] ) ;
101454: LD_VAR 0 4
101458: PUSH
101459: LD_VAR 0 7
101463: ARRAY
101464: PPUSH
101465: CALL 51387 0 1
// end ; if f_attack_depot then
101469: LD_VAR 0 25
101473: IFFALSE 101585
// begin k := 6 ;
101475: LD_ADDR_VAR 0 9
101479: PUSH
101480: LD_INT 6
101482: ST_TO_ADDR
// if tmp < k then
101483: LD_VAR 0 14
101487: PUSH
101488: LD_VAR 0 9
101492: LESS
101493: IFFALSE 101505
// k := tmp ;
101495: LD_ADDR_VAR 0 9
101499: PUSH
101500: LD_VAR 0 14
101504: ST_TO_ADDR
// for j = 1 to k do
101505: LD_ADDR_VAR 0 8
101509: PUSH
101510: DOUBLE
101511: LD_INT 1
101513: DEC
101514: ST_TO_ADDR
101515: LD_VAR 0 9
101519: PUSH
101520: FOR_TO
101521: IFFALSE 101583
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
101523: LD_VAR 0 8
101527: PPUSH
101528: CALL_OW 266
101532: PUSH
101533: LD_INT 0
101535: PUSH
101536: LD_INT 1
101538: PUSH
101539: EMPTY
101540: LIST
101541: LIST
101542: IN
101543: IFFALSE 101581
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
101545: LD_VAR 0 4
101549: PUSH
101550: LD_VAR 0 7
101554: ARRAY
101555: PPUSH
101556: LD_VAR 0 14
101560: PUSH
101561: LD_VAR 0 8
101565: ARRAY
101566: PPUSH
101567: CALL_OW 115
// attacking := true ;
101571: LD_ADDR_VAR 0 29
101575: PUSH
101576: LD_INT 1
101578: ST_TO_ADDR
// break ;
101579: GO 101583
// end ;
101581: GO 101520
101583: POP
101584: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
101585: LD_VAR 0 4
101589: PUSH
101590: LD_VAR 0 7
101594: ARRAY
101595: PPUSH
101596: CALL_OW 302
101600: PUSH
101601: LD_VAR 0 29
101605: NOT
101606: AND
101607: IFFALSE 101929
// begin if GetTag ( group [ i ] ) = 71 then
101609: LD_VAR 0 4
101613: PUSH
101614: LD_VAR 0 7
101618: ARRAY
101619: PPUSH
101620: CALL_OW 110
101624: PUSH
101625: LD_INT 71
101627: EQUAL
101628: IFFALSE 101669
// begin if HasTask ( group [ i ] ) then
101630: LD_VAR 0 4
101634: PUSH
101635: LD_VAR 0 7
101639: ARRAY
101640: PPUSH
101641: CALL_OW 314
101645: IFFALSE 101651
// continue else
101647: GO 97808
101649: GO 101669
// SetTag ( group [ i ] , 0 ) ;
101651: LD_VAR 0 4
101655: PUSH
101656: LD_VAR 0 7
101660: ARRAY
101661: PPUSH
101662: LD_INT 0
101664: PPUSH
101665: CALL_OW 109
// end ; k := 8 ;
101669: LD_ADDR_VAR 0 9
101673: PUSH
101674: LD_INT 8
101676: ST_TO_ADDR
// x := 0 ;
101677: LD_ADDR_VAR 0 10
101681: PUSH
101682: LD_INT 0
101684: ST_TO_ADDR
// if tmp < k then
101685: LD_VAR 0 14
101689: PUSH
101690: LD_VAR 0 9
101694: LESS
101695: IFFALSE 101707
// k := tmp ;
101697: LD_ADDR_VAR 0 9
101701: PUSH
101702: LD_VAR 0 14
101706: ST_TO_ADDR
// for j = 1 to k do
101707: LD_ADDR_VAR 0 8
101711: PUSH
101712: DOUBLE
101713: LD_INT 1
101715: DEC
101716: ST_TO_ADDR
101717: LD_VAR 0 9
101721: PUSH
101722: FOR_TO
101723: IFFALSE 101821
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
101725: LD_VAR 0 14
101729: PUSH
101730: LD_VAR 0 8
101734: ARRAY
101735: PPUSH
101736: CALL_OW 247
101740: PUSH
101741: LD_INT 1
101743: EQUAL
101744: PUSH
101745: LD_VAR 0 14
101749: PUSH
101750: LD_VAR 0 8
101754: ARRAY
101755: PPUSH
101756: CALL_OW 256
101760: PUSH
101761: LD_INT 250
101763: LESS
101764: PUSH
101765: LD_VAR 0 20
101769: AND
101770: PUSH
101771: LD_VAR 0 20
101775: NOT
101776: PUSH
101777: LD_VAR 0 14
101781: PUSH
101782: LD_VAR 0 8
101786: ARRAY
101787: PPUSH
101788: CALL_OW 256
101792: PUSH
101793: LD_INT 250
101795: GREATEREQUAL
101796: AND
101797: OR
101798: AND
101799: IFFALSE 101819
// begin x := tmp [ j ] ;
101801: LD_ADDR_VAR 0 10
101805: PUSH
101806: LD_VAR 0 14
101810: PUSH
101811: LD_VAR 0 8
101815: ARRAY
101816: ST_TO_ADDR
// break ;
101817: GO 101821
// end ;
101819: GO 101722
101821: POP
101822: POP
// if x then
101823: LD_VAR 0 10
101827: IFFALSE 101851
// ComAttackUnit ( group [ i ] , x ) else
101829: LD_VAR 0 4
101833: PUSH
101834: LD_VAR 0 7
101838: ARRAY
101839: PPUSH
101840: LD_VAR 0 10
101844: PPUSH
101845: CALL_OW 115
101849: GO 101875
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
101851: LD_VAR 0 4
101855: PUSH
101856: LD_VAR 0 7
101860: ARRAY
101861: PPUSH
101862: LD_VAR 0 14
101866: PUSH
101867: LD_INT 1
101869: ARRAY
101870: PPUSH
101871: CALL_OW 115
// if not HasTask ( group [ i ] ) then
101875: LD_VAR 0 4
101879: PUSH
101880: LD_VAR 0 7
101884: ARRAY
101885: PPUSH
101886: CALL_OW 314
101890: NOT
101891: IFFALSE 101929
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
101893: LD_VAR 0 4
101897: PUSH
101898: LD_VAR 0 7
101902: ARRAY
101903: PPUSH
101904: LD_VAR 0 14
101908: PPUSH
101909: LD_VAR 0 4
101913: PUSH
101914: LD_VAR 0 7
101918: ARRAY
101919: PPUSH
101920: CALL_OW 74
101924: PPUSH
101925: CALL_OW 115
// end ; end ; end ;
101929: GO 97808
101931: POP
101932: POP
// wait ( 0 0$2 ) ;
101933: LD_INT 70
101935: PPUSH
101936: CALL_OW 67
// until not group or group = [ ] or not FilterAllUnits ( [ f_enemy , side ] ) ;
101940: LD_VAR 0 4
101944: NOT
101945: PUSH
101946: LD_VAR 0 4
101950: PUSH
101951: EMPTY
101952: EQUAL
101953: OR
101954: PUSH
101955: LD_INT 81
101957: PUSH
101958: LD_VAR 0 35
101962: PUSH
101963: EMPTY
101964: LIST
101965: LIST
101966: PPUSH
101967: CALL_OW 69
101971: NOT
101972: OR
101973: IFFALSE 97793
// end ;
101975: LD_VAR 0 2
101979: RET
// export function BasicDefend ( base , solds , area ) ; var enemy , side , i , hex ; begin
101980: LD_INT 0
101982: PPUSH
101983: PPUSH
101984: PPUSH
101985: PPUSH
101986: PPUSH
// if not base or not mc_bases [ base ] or not solds or not area then
101987: LD_VAR 0 1
101991: NOT
101992: PUSH
101993: LD_EXP 44
101997: PUSH
101998: LD_VAR 0 1
102002: ARRAY
102003: NOT
102004: OR
102005: PUSH
102006: LD_VAR 0 2
102010: NOT
102011: OR
102012: PUSH
102013: LD_VAR 0 3
102017: NOT
102018: OR
102019: IFFALSE 102023
// exit ;
102021: GO 102536
// side := mc_sides [ base ] ;
102023: LD_ADDR_VAR 0 6
102027: PUSH
102028: LD_EXP 70
102032: PUSH
102033: LD_VAR 0 1
102037: ARRAY
102038: ST_TO_ADDR
// if not side then
102039: LD_VAR 0 6
102043: NOT
102044: IFFALSE 102048
// exit ;
102046: GO 102536
// for i in solds do
102048: LD_ADDR_VAR 0 7
102052: PUSH
102053: LD_VAR 0 2
102057: PUSH
102058: FOR_IN
102059: IFFALSE 102120
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
102061: LD_VAR 0 7
102065: PPUSH
102066: CALL_OW 310
102070: PPUSH
102071: CALL_OW 266
102075: PUSH
102076: LD_INT 32
102078: PUSH
102079: LD_INT 31
102081: PUSH
102082: EMPTY
102083: LIST
102084: LIST
102085: IN
102086: IFFALSE 102106
// solds := solds diff i else
102088: LD_ADDR_VAR 0 2
102092: PUSH
102093: LD_VAR 0 2
102097: PUSH
102098: LD_VAR 0 7
102102: DIFF
102103: ST_TO_ADDR
102104: GO 102118
// SetTag ( i , 18 ) ;
102106: LD_VAR 0 7
102110: PPUSH
102111: LD_INT 18
102113: PPUSH
102114: CALL_OW 109
102118: GO 102058
102120: POP
102121: POP
// if not solds then
102122: LD_VAR 0 2
102126: NOT
102127: IFFALSE 102131
// exit ;
102129: GO 102536
// repeat wait ( 0 0$1 ) ;
102131: LD_INT 35
102133: PPUSH
102134: CALL_OW 67
// enemy := ScanBase ( side , area ) ;
102138: LD_ADDR_VAR 0 5
102142: PUSH
102143: LD_VAR 0 6
102147: PPUSH
102148: LD_VAR 0 3
102152: PPUSH
102153: CALL 21102 0 2
102157: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
102158: LD_EXP 44
102162: PUSH
102163: LD_VAR 0 1
102167: ARRAY
102168: NOT
102169: PUSH
102170: LD_EXP 44
102174: PUSH
102175: LD_VAR 0 1
102179: ARRAY
102180: PUSH
102181: EMPTY
102182: EQUAL
102183: OR
102184: IFFALSE 102221
// begin for i in solds do
102186: LD_ADDR_VAR 0 7
102190: PUSH
102191: LD_VAR 0 2
102195: PUSH
102196: FOR_IN
102197: IFFALSE 102210
// ComStop ( i ) ;
102199: LD_VAR 0 7
102203: PPUSH
102204: CALL_OW 141
102208: GO 102196
102210: POP
102211: POP
// solds := [ ] ;
102212: LD_ADDR_VAR 0 2
102216: PUSH
102217: EMPTY
102218: ST_TO_ADDR
// exit ;
102219: GO 102536
// end ; if not enemy or enemy > 3 or mc_defender [ base ] then
102221: LD_VAR 0 5
102225: NOT
102226: PUSH
102227: LD_VAR 0 5
102231: PUSH
102232: LD_INT 3
102234: GREATER
102235: OR
102236: PUSH
102237: LD_EXP 66
102241: PUSH
102242: LD_VAR 0 1
102246: ARRAY
102247: OR
102248: IFFALSE 102289
// begin for i in solds do
102250: LD_ADDR_VAR 0 7
102254: PUSH
102255: LD_VAR 0 2
102259: PUSH
102260: FOR_IN
102261: IFFALSE 102285
// if HasTask ( i ) then
102263: LD_VAR 0 7
102267: PPUSH
102268: CALL_OW 314
102272: IFFALSE 102283
// ComStop ( i ) ;
102274: LD_VAR 0 7
102278: PPUSH
102279: CALL_OW 141
102283: GO 102260
102285: POP
102286: POP
// break ;
102287: GO 102524
// end ; for i in solds do
102289: LD_ADDR_VAR 0 7
102293: PUSH
102294: LD_VAR 0 2
102298: PUSH
102299: FOR_IN
102300: IFFALSE 102516
// begin if IsInUnit ( i ) then
102302: LD_VAR 0 7
102306: PPUSH
102307: CALL_OW 310
102311: IFFALSE 102322
// ComExitBuilding ( i ) ;
102313: LD_VAR 0 7
102317: PPUSH
102318: CALL_OW 122
// if GetLives ( i ) > 333 then
102322: LD_VAR 0 7
102326: PPUSH
102327: CALL_OW 256
102331: PUSH
102332: LD_INT 333
102334: GREATER
102335: IFFALSE 102363
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
102337: LD_VAR 0 7
102341: PPUSH
102342: LD_VAR 0 5
102346: PPUSH
102347: LD_VAR 0 7
102351: PPUSH
102352: CALL_OW 74
102356: PPUSH
102357: CALL_OW 115
102361: GO 102514
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
102363: LD_ADDR_VAR 0 8
102367: PUSH
102368: LD_EXP 44
102372: PUSH
102373: LD_VAR 0 1
102377: ARRAY
102378: PPUSH
102379: LD_INT 2
102381: PUSH
102382: LD_INT 30
102384: PUSH
102385: LD_INT 0
102387: PUSH
102388: EMPTY
102389: LIST
102390: LIST
102391: PUSH
102392: LD_INT 30
102394: PUSH
102395: LD_INT 1
102397: PUSH
102398: EMPTY
102399: LIST
102400: LIST
102401: PUSH
102402: LD_INT 30
102404: PUSH
102405: LD_INT 6
102407: PUSH
102408: EMPTY
102409: LIST
102410: LIST
102411: PUSH
102412: EMPTY
102413: LIST
102414: LIST
102415: LIST
102416: LIST
102417: PPUSH
102418: CALL_OW 72
102422: PPUSH
102423: LD_VAR 0 7
102427: PPUSH
102428: CALL_OW 74
102432: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
102433: LD_VAR 0 7
102437: PPUSH
102438: LD_VAR 0 8
102442: PPUSH
102443: CALL_OW 250
102447: PPUSH
102448: LD_INT 3
102450: PPUSH
102451: LD_INT 5
102453: PPUSH
102454: CALL_OW 272
102458: PPUSH
102459: LD_VAR 0 8
102463: PPUSH
102464: CALL_OW 251
102468: PPUSH
102469: LD_INT 3
102471: PPUSH
102472: LD_INT 5
102474: PPUSH
102475: CALL_OW 273
102479: PPUSH
102480: CALL_OW 111
// SetTag ( i , 0 ) ;
102484: LD_VAR 0 7
102488: PPUSH
102489: LD_INT 0
102491: PPUSH
102492: CALL_OW 109
// solds := solds diff i ;
102496: LD_ADDR_VAR 0 2
102500: PUSH
102501: LD_VAR 0 2
102505: PUSH
102506: LD_VAR 0 7
102510: DIFF
102511: ST_TO_ADDR
// continue ;
102512: GO 102299
// end ; end ;
102514: GO 102299
102516: POP
102517: POP
// until solds ;
102518: LD_VAR 0 2
102522: IFFALSE 102131
// MC_Reset ( base , 18 ) ;
102524: LD_VAR 0 1
102528: PPUSH
102529: LD_INT 18
102531: PPUSH
102532: CALL 59713 0 2
// end ;
102536: LD_VAR 0 4
102540: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , depot , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
102541: LD_INT 0
102543: PPUSH
102544: PPUSH
102545: PPUSH
102546: PPUSH
102547: PPUSH
102548: PPUSH
102549: PPUSH
102550: PPUSH
102551: PPUSH
102552: PPUSH
102553: PPUSH
102554: PPUSH
102555: PPUSH
102556: PPUSH
102557: PPUSH
102558: PPUSH
102559: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
102560: LD_ADDR_VAR 0 13
102564: PUSH
102565: LD_EXP 44
102569: PUSH
102570: LD_VAR 0 1
102574: ARRAY
102575: PPUSH
102576: LD_INT 25
102578: PUSH
102579: LD_INT 3
102581: PUSH
102582: EMPTY
102583: LIST
102584: LIST
102585: PPUSH
102586: CALL_OW 72
102590: ST_TO_ADDR
// if mc_remote_driver [ base ] then
102591: LD_EXP 84
102595: PUSH
102596: LD_VAR 0 1
102600: ARRAY
102601: IFFALSE 102625
// mechs := mechs diff mc_remote_driver [ base ] ;
102603: LD_ADDR_VAR 0 13
102607: PUSH
102608: LD_VAR 0 13
102612: PUSH
102613: LD_EXP 84
102617: PUSH
102618: LD_VAR 0 1
102622: ARRAY
102623: DIFF
102624: ST_TO_ADDR
// for i in mechs do
102625: LD_ADDR_VAR 0 5
102629: PUSH
102630: LD_VAR 0 13
102634: PUSH
102635: FOR_IN
102636: IFFALSE 102671
// if GetTag ( i ) > 0 then
102638: LD_VAR 0 5
102642: PPUSH
102643: CALL_OW 110
102647: PUSH
102648: LD_INT 0
102650: GREATER
102651: IFFALSE 102669
// mechs := mechs diff i ;
102653: LD_ADDR_VAR 0 13
102657: PUSH
102658: LD_VAR 0 13
102662: PUSH
102663: LD_VAR 0 5
102667: DIFF
102668: ST_TO_ADDR
102669: GO 102635
102671: POP
102672: POP
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
102673: LD_ADDR_VAR 0 9
102677: PUSH
102678: LD_EXP 44
102682: PUSH
102683: LD_VAR 0 1
102687: ARRAY
102688: PPUSH
102689: LD_INT 2
102691: PUSH
102692: LD_INT 25
102694: PUSH
102695: LD_INT 1
102697: PUSH
102698: EMPTY
102699: LIST
102700: LIST
102701: PUSH
102702: LD_INT 25
102704: PUSH
102705: LD_INT 5
102707: PUSH
102708: EMPTY
102709: LIST
102710: LIST
102711: PUSH
102712: LD_INT 25
102714: PUSH
102715: LD_INT 8
102717: PUSH
102718: EMPTY
102719: LIST
102720: LIST
102721: PUSH
102722: LD_INT 25
102724: PUSH
102725: LD_INT 9
102727: PUSH
102728: EMPTY
102729: LIST
102730: LIST
102731: PUSH
102732: EMPTY
102733: LIST
102734: LIST
102735: LIST
102736: LIST
102737: LIST
102738: PPUSH
102739: CALL_OW 72
102743: ST_TO_ADDR
// if not defenders and not solds then
102744: LD_VAR 0 2
102748: NOT
102749: PUSH
102750: LD_VAR 0 9
102754: NOT
102755: AND
102756: IFFALSE 102760
// exit ;
102758: GO 104386
// depot_under_attack := false ;
102760: LD_ADDR_VAR 0 17
102764: PUSH
102765: LD_INT 0
102767: ST_TO_ADDR
// sold_defenders := [ ] ;
102768: LD_ADDR_VAR 0 18
102772: PUSH
102773: EMPTY
102774: ST_TO_ADDR
// if mechs then
102775: LD_VAR 0 13
102779: IFFALSE 102908
// for i in defenders do
102781: LD_ADDR_VAR 0 5
102785: PUSH
102786: LD_VAR 0 2
102790: PUSH
102791: FOR_IN
102792: IFFALSE 102906
// begin SetTag ( i , 20 ) ;
102794: LD_VAR 0 5
102798: PPUSH
102799: LD_INT 20
102801: PPUSH
102802: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
102806: LD_VAR 0 5
102810: PPUSH
102811: CALL_OW 263
102815: PUSH
102816: LD_INT 1
102818: EQUAL
102819: PUSH
102820: LD_VAR 0 5
102824: PPUSH
102825: CALL_OW 311
102829: NOT
102830: AND
102831: PUSH
102832: LD_VAR 0 13
102836: AND
102837: IFFALSE 102904
// begin un := mechs [ 1 ] ;
102839: LD_ADDR_VAR 0 11
102843: PUSH
102844: LD_VAR 0 13
102848: PUSH
102849: LD_INT 1
102851: ARRAY
102852: ST_TO_ADDR
// ComExitBuilding ( un ) ;
102853: LD_VAR 0 11
102857: PPUSH
102858: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
102862: LD_VAR 0 11
102866: PPUSH
102867: LD_VAR 0 5
102871: PPUSH
102872: CALL_OW 180
// SetTag ( un , 19 ) ;
102876: LD_VAR 0 11
102880: PPUSH
102881: LD_INT 19
102883: PPUSH
102884: CALL_OW 109
// mechs := mechs diff un ;
102888: LD_ADDR_VAR 0 13
102892: PUSH
102893: LD_VAR 0 13
102897: PUSH
102898: LD_VAR 0 11
102902: DIFF
102903: ST_TO_ADDR
// end ; end ;
102904: GO 102791
102906: POP
102907: POP
// if solds then
102908: LD_VAR 0 9
102912: IFFALSE 102971
// for i in solds do
102914: LD_ADDR_VAR 0 5
102918: PUSH
102919: LD_VAR 0 9
102923: PUSH
102924: FOR_IN
102925: IFFALSE 102969
// if not GetTag ( i ) then
102927: LD_VAR 0 5
102931: PPUSH
102932: CALL_OW 110
102936: NOT
102937: IFFALSE 102967
// begin defenders := defenders union i ;
102939: LD_ADDR_VAR 0 2
102943: PUSH
102944: LD_VAR 0 2
102948: PUSH
102949: LD_VAR 0 5
102953: UNION
102954: ST_TO_ADDR
// SetTag ( i , 18 ) ;
102955: LD_VAR 0 5
102959: PPUSH
102960: LD_INT 18
102962: PPUSH
102963: CALL_OW 109
// end ;
102967: GO 102924
102969: POP
102970: POP
// repeat wait ( 0 0$1 ) ;
102971: LD_INT 35
102973: PPUSH
102974: CALL_OW 67
// enemy := mc_scan [ base ] ;
102978: LD_ADDR_VAR 0 3
102982: PUSH
102983: LD_EXP 67
102987: PUSH
102988: LD_VAR 0 1
102992: ARRAY
102993: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
102994: LD_EXP 44
102998: PUSH
102999: LD_VAR 0 1
103003: ARRAY
103004: NOT
103005: PUSH
103006: LD_EXP 44
103010: PUSH
103011: LD_VAR 0 1
103015: ARRAY
103016: PUSH
103017: EMPTY
103018: EQUAL
103019: OR
103020: IFFALSE 103057
// begin for i in defenders do
103022: LD_ADDR_VAR 0 5
103026: PUSH
103027: LD_VAR 0 2
103031: PUSH
103032: FOR_IN
103033: IFFALSE 103046
// ComStop ( i ) ;
103035: LD_VAR 0 5
103039: PPUSH
103040: CALL_OW 141
103044: GO 103032
103046: POP
103047: POP
// defenders := [ ] ;
103048: LD_ADDR_VAR 0 2
103052: PUSH
103053: EMPTY
103054: ST_TO_ADDR
// exit ;
103055: GO 104386
// end ; for i in defenders do
103057: LD_ADDR_VAR 0 5
103061: PUSH
103062: LD_VAR 0 2
103066: PUSH
103067: FOR_IN
103068: IFFALSE 103886
// begin e := NearestUnitToUnit ( enemy , i ) ;
103070: LD_ADDR_VAR 0 14
103074: PUSH
103075: LD_VAR 0 3
103079: PPUSH
103080: LD_VAR 0 5
103084: PPUSH
103085: CALL_OW 74
103089: ST_TO_ADDR
// depot := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
103090: LD_ADDR_VAR 0 8
103094: PUSH
103095: LD_EXP 44
103099: PUSH
103100: LD_VAR 0 1
103104: ARRAY
103105: PPUSH
103106: LD_INT 2
103108: PUSH
103109: LD_INT 30
103111: PUSH
103112: LD_INT 0
103114: PUSH
103115: EMPTY
103116: LIST
103117: LIST
103118: PUSH
103119: LD_INT 30
103121: PUSH
103122: LD_INT 1
103124: PUSH
103125: EMPTY
103126: LIST
103127: LIST
103128: PUSH
103129: EMPTY
103130: LIST
103131: LIST
103132: LIST
103133: PPUSH
103134: CALL_OW 72
103138: ST_TO_ADDR
// depot_under_attack := ( not depot or UnitFilter ( depot , [ f_not , [ f_lives , 600 ] ] ) ) ;
103139: LD_ADDR_VAR 0 17
103143: PUSH
103144: LD_VAR 0 8
103148: NOT
103149: PUSH
103150: LD_VAR 0 8
103154: PPUSH
103155: LD_INT 3
103157: PUSH
103158: LD_INT 24
103160: PUSH
103161: LD_INT 600
103163: PUSH
103164: EMPTY
103165: LIST
103166: LIST
103167: PUSH
103168: EMPTY
103169: LIST
103170: LIST
103171: PPUSH
103172: CALL_OW 72
103176: OR
103177: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
103178: LD_VAR 0 5
103182: PPUSH
103183: CALL_OW 247
103187: PUSH
103188: LD_INT 2
103190: DOUBLE
103191: EQUAL
103192: IFTRUE 103196
103194: GO 103592
103196: POP
// begin if GetLives ( i ) > 650 and ( GetDistUnits ( i , e ) < 40 or IsInArea ( e , mc_scan_area [ base ] ) ) then
103197: LD_VAR 0 5
103201: PPUSH
103202: CALL_OW 256
103206: PUSH
103207: LD_INT 650
103209: GREATER
103210: PUSH
103211: LD_VAR 0 5
103215: PPUSH
103216: LD_VAR 0 14
103220: PPUSH
103221: CALL_OW 296
103225: PUSH
103226: LD_INT 40
103228: LESS
103229: PUSH
103230: LD_VAR 0 14
103234: PPUSH
103235: LD_EXP 69
103239: PUSH
103240: LD_VAR 0 1
103244: ARRAY
103245: PPUSH
103246: CALL_OW 308
103250: OR
103251: AND
103252: IFFALSE 103374
// begin if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 30 and depot then
103254: LD_VAR 0 5
103258: PPUSH
103259: CALL_OW 262
103263: PUSH
103264: LD_INT 1
103266: EQUAL
103267: PUSH
103268: LD_VAR 0 5
103272: PPUSH
103273: CALL_OW 261
103277: PUSH
103278: LD_INT 30
103280: LESS
103281: AND
103282: PUSH
103283: LD_VAR 0 8
103287: AND
103288: IFFALSE 103358
// begin ComMoveUnit ( i , NearestUnitToUnit ( depot , i ) ) ;
103290: LD_VAR 0 5
103294: PPUSH
103295: LD_VAR 0 8
103299: PPUSH
103300: LD_VAR 0 5
103304: PPUSH
103305: CALL_OW 74
103309: PPUSH
103310: CALL_OW 112
// if GetDistUnits ( i , NearestUnitToUnit ( depot , i ) ) < 6 then
103314: LD_VAR 0 5
103318: PPUSH
103319: LD_VAR 0 8
103323: PPUSH
103324: LD_VAR 0 5
103328: PPUSH
103329: CALL_OW 74
103333: PPUSH
103334: CALL_OW 296
103338: PUSH
103339: LD_INT 6
103341: LESS
103342: IFFALSE 103356
// SetFuel ( i , 100 ) ;
103344: LD_VAR 0 5
103348: PPUSH
103349: LD_INT 100
103351: PPUSH
103352: CALL_OW 240
// end else
103356: GO 103372
// ComAttackUnit ( i , e ) ;
103358: LD_VAR 0 5
103362: PPUSH
103363: LD_VAR 0 14
103367: PPUSH
103368: CALL_OW 115
// end else
103372: GO 103475
// if ( ( not IsInArea ( e , mc_scan_area [ base ] ) and GetDistUnits ( i , e ) >= 40 ) or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
103374: LD_VAR 0 14
103378: PPUSH
103379: LD_EXP 69
103383: PUSH
103384: LD_VAR 0 1
103388: ARRAY
103389: PPUSH
103390: CALL_OW 308
103394: NOT
103395: PUSH
103396: LD_VAR 0 5
103400: PPUSH
103401: LD_VAR 0 14
103405: PPUSH
103406: CALL_OW 296
103410: PUSH
103411: LD_INT 40
103413: GREATEREQUAL
103414: AND
103415: PUSH
103416: LD_VAR 0 5
103420: PPUSH
103421: CALL_OW 256
103425: PUSH
103426: LD_INT 650
103428: LESSEQUAL
103429: OR
103430: PUSH
103431: LD_VAR 0 5
103435: PPUSH
103436: LD_EXP 68
103440: PUSH
103441: LD_VAR 0 1
103445: ARRAY
103446: PPUSH
103447: CALL_OW 308
103451: NOT
103452: AND
103453: IFFALSE 103475
// ComMoveToArea ( i , mc_parking [ base ] ) ;
103455: LD_VAR 0 5
103459: PPUSH
103460: LD_EXP 68
103464: PUSH
103465: LD_VAR 0 1
103469: ARRAY
103470: PPUSH
103471: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
103475: LD_VAR 0 5
103479: PPUSH
103480: CALL_OW 256
103484: PUSH
103485: LD_INT 998
103487: LESS
103488: PUSH
103489: LD_VAR 0 5
103493: PPUSH
103494: CALL_OW 263
103498: PUSH
103499: LD_INT 1
103501: EQUAL
103502: AND
103503: PUSH
103504: LD_VAR 0 5
103508: PPUSH
103509: CALL_OW 311
103513: AND
103514: PUSH
103515: LD_VAR 0 5
103519: PPUSH
103520: LD_EXP 68
103524: PUSH
103525: LD_VAR 0 1
103529: ARRAY
103530: PPUSH
103531: CALL_OW 308
103535: AND
103536: IFFALSE 103590
// begin mech := IsDrivenBy ( i ) ;
103538: LD_ADDR_VAR 0 10
103542: PUSH
103543: LD_VAR 0 5
103547: PPUSH
103548: CALL_OW 311
103552: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
103553: LD_VAR 0 10
103557: PPUSH
103558: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
103562: LD_VAR 0 10
103566: PPUSH
103567: LD_VAR 0 5
103571: PPUSH
103572: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
103576: LD_VAR 0 10
103580: PPUSH
103581: LD_VAR 0 5
103585: PPUSH
103586: CALL_OW 180
// end ; end ; unit_human :
103590: GO 103857
103592: LD_INT 1
103594: DOUBLE
103595: EQUAL
103596: IFTRUE 103600
103598: GO 103856
103600: POP
// begin b := IsInUnit ( i ) ;
103601: LD_ADDR_VAR 0 19
103605: PUSH
103606: LD_VAR 0 5
103610: PPUSH
103611: CALL_OW 310
103615: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
103616: LD_ADDR_VAR 0 20
103620: PUSH
103621: LD_VAR 0 19
103625: NOT
103626: PUSH
103627: LD_VAR 0 19
103631: PPUSH
103632: CALL_OW 266
103636: PUSH
103637: LD_INT 32
103639: PUSH
103640: LD_INT 31
103642: PUSH
103643: EMPTY
103644: LIST
103645: LIST
103646: IN
103647: OR
103648: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
103649: LD_VAR 0 17
103653: PUSH
103654: LD_VAR 0 2
103658: PPUSH
103659: LD_INT 21
103661: PUSH
103662: LD_INT 2
103664: PUSH
103665: EMPTY
103666: LIST
103667: LIST
103668: PPUSH
103669: CALL_OW 72
103673: PUSH
103674: LD_INT 1
103676: LESSEQUAL
103677: OR
103678: PUSH
103679: LD_VAR 0 20
103683: AND
103684: PUSH
103685: LD_VAR 0 5
103689: PUSH
103690: LD_VAR 0 18
103694: IN
103695: NOT
103696: AND
103697: IFFALSE 103790
// begin if b then
103699: LD_VAR 0 19
103703: IFFALSE 103752
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
103705: LD_VAR 0 19
103709: PPUSH
103710: LD_VAR 0 3
103714: PPUSH
103715: LD_VAR 0 19
103719: PPUSH
103720: CALL_OW 74
103724: PPUSH
103725: CALL_OW 296
103729: PUSH
103730: LD_INT 10
103732: LESS
103733: PUSH
103734: LD_VAR 0 19
103738: PPUSH
103739: CALL_OW 461
103743: PUSH
103744: LD_INT 7
103746: NONEQUAL
103747: AND
103748: IFFALSE 103752
// continue ;
103750: GO 103067
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
103752: LD_ADDR_VAR 0 18
103756: PUSH
103757: LD_VAR 0 18
103761: PPUSH
103762: LD_VAR 0 18
103766: PUSH
103767: LD_INT 1
103769: PLUS
103770: PPUSH
103771: LD_VAR 0 5
103775: PPUSH
103776: CALL_OW 1
103780: ST_TO_ADDR
// ComExitBuilding ( i ) ;
103781: LD_VAR 0 5
103785: PPUSH
103786: CALL_OW 122
// end ; if sold_defenders then
103790: LD_VAR 0 18
103794: IFFALSE 103854
// if i in sold_defenders then
103796: LD_VAR 0 5
103800: PUSH
103801: LD_VAR 0 18
103805: IN
103806: IFFALSE 103854
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
103808: LD_VAR 0 5
103812: PPUSH
103813: CALL_OW 314
103817: NOT
103818: PUSH
103819: LD_VAR 0 5
103823: PPUSH
103824: LD_VAR 0 14
103828: PPUSH
103829: CALL_OW 296
103833: PUSH
103834: LD_INT 30
103836: LESS
103837: AND
103838: IFFALSE 103854
// ComAttackUnit ( i , e ) ;
103840: LD_VAR 0 5
103844: PPUSH
103845: LD_VAR 0 14
103849: PPUSH
103850: CALL_OW 115
// end ; end ; end ;
103854: GO 103857
103856: POP
// if IsDead ( i ) then
103857: LD_VAR 0 5
103861: PPUSH
103862: CALL_OW 301
103866: IFFALSE 103884
// defenders := defenders diff i ;
103868: LD_ADDR_VAR 0 2
103872: PUSH
103873: LD_VAR 0 2
103877: PUSH
103878: LD_VAR 0 5
103882: DIFF
103883: ST_TO_ADDR
// end ;
103884: GO 103067
103886: POP
103887: POP
// until not enemy or not defenders or not mc_bases [ base ] ;
103888: LD_VAR 0 3
103892: NOT
103893: PUSH
103894: LD_VAR 0 2
103898: NOT
103899: OR
103900: PUSH
103901: LD_EXP 44
103905: PUSH
103906: LD_VAR 0 1
103910: ARRAY
103911: NOT
103912: OR
103913: IFFALSE 102971
// MC_Reset ( base , 18 ) ;
103915: LD_VAR 0 1
103919: PPUSH
103920: LD_INT 18
103922: PPUSH
103923: CALL 59713 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
103927: LD_ADDR_VAR 0 2
103931: PUSH
103932: LD_VAR 0 2
103936: PUSH
103937: LD_VAR 0 2
103941: PPUSH
103942: LD_INT 2
103944: PUSH
103945: LD_INT 25
103947: PUSH
103948: LD_INT 1
103950: PUSH
103951: EMPTY
103952: LIST
103953: LIST
103954: PUSH
103955: LD_INT 25
103957: PUSH
103958: LD_INT 5
103960: PUSH
103961: EMPTY
103962: LIST
103963: LIST
103964: PUSH
103965: LD_INT 25
103967: PUSH
103968: LD_INT 8
103970: PUSH
103971: EMPTY
103972: LIST
103973: LIST
103974: PUSH
103975: LD_INT 25
103977: PUSH
103978: LD_INT 9
103980: PUSH
103981: EMPTY
103982: LIST
103983: LIST
103984: PUSH
103985: EMPTY
103986: LIST
103987: LIST
103988: LIST
103989: LIST
103990: LIST
103991: PPUSH
103992: CALL_OW 72
103996: DIFF
103997: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
103998: LD_VAR 0 3
104002: NOT
104003: PUSH
104004: LD_VAR 0 2
104008: PPUSH
104009: LD_INT 21
104011: PUSH
104012: LD_INT 2
104014: PUSH
104015: EMPTY
104016: LIST
104017: LIST
104018: PPUSH
104019: CALL_OW 72
104023: AND
104024: IFFALSE 104362
// begin tmp := FilterByTag ( defenders , 19 ) ;
104026: LD_ADDR_VAR 0 12
104030: PUSH
104031: LD_VAR 0 2
104035: PPUSH
104036: LD_INT 19
104038: PPUSH
104039: CALL 52862 0 2
104043: ST_TO_ADDR
// if tmp then
104044: LD_VAR 0 12
104048: IFFALSE 104118
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
104050: LD_ADDR_VAR 0 12
104054: PUSH
104055: LD_VAR 0 12
104059: PPUSH
104060: LD_INT 25
104062: PUSH
104063: LD_INT 3
104065: PUSH
104066: EMPTY
104067: LIST
104068: LIST
104069: PPUSH
104070: CALL_OW 72
104074: ST_TO_ADDR
// if tmp then
104075: LD_VAR 0 12
104079: IFFALSE 104118
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
104081: LD_ADDR_EXP 56
104085: PUSH
104086: LD_EXP 56
104090: PPUSH
104091: LD_VAR 0 1
104095: PPUSH
104096: LD_EXP 56
104100: PUSH
104101: LD_VAR 0 1
104105: ARRAY
104106: PUSH
104107: LD_VAR 0 12
104111: UNION
104112: PPUSH
104113: CALL_OW 1
104117: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
104118: LD_VAR 0 1
104122: PPUSH
104123: LD_INT 19
104125: PPUSH
104126: CALL 59713 0 2
// repeat wait ( 0 0$1 ) ;
104130: LD_INT 35
104132: PPUSH
104133: CALL_OW 67
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
104137: LD_EXP 44
104141: PUSH
104142: LD_VAR 0 1
104146: ARRAY
104147: NOT
104148: PUSH
104149: LD_EXP 44
104153: PUSH
104154: LD_VAR 0 1
104158: ARRAY
104159: PUSH
104160: EMPTY
104161: EQUAL
104162: OR
104163: IFFALSE 104200
// begin for i in defenders do
104165: LD_ADDR_VAR 0 5
104169: PUSH
104170: LD_VAR 0 2
104174: PUSH
104175: FOR_IN
104176: IFFALSE 104189
// ComStop ( i ) ;
104178: LD_VAR 0 5
104182: PPUSH
104183: CALL_OW 141
104187: GO 104175
104189: POP
104190: POP
// defenders := [ ] ;
104191: LD_ADDR_VAR 0 2
104195: PUSH
104196: EMPTY
104197: ST_TO_ADDR
// exit ;
104198: GO 104386
// end ; for i in defenders do
104200: LD_ADDR_VAR 0 5
104204: PUSH
104205: LD_VAR 0 2
104209: PUSH
104210: FOR_IN
104211: IFFALSE 104300
// begin if not IsInArea ( i , mc_parking [ base ] ) then
104213: LD_VAR 0 5
104217: PPUSH
104218: LD_EXP 68
104222: PUSH
104223: LD_VAR 0 1
104227: ARRAY
104228: PPUSH
104229: CALL_OW 308
104233: NOT
104234: IFFALSE 104258
// ComMoveToArea ( i , mc_parking [ base ] ) else
104236: LD_VAR 0 5
104240: PPUSH
104241: LD_EXP 68
104245: PUSH
104246: LD_VAR 0 1
104250: ARRAY
104251: PPUSH
104252: CALL_OW 113
104256: GO 104298
// if GetControl ( i ) = control_manual then
104258: LD_VAR 0 5
104262: PPUSH
104263: CALL_OW 263
104267: PUSH
104268: LD_INT 1
104270: EQUAL
104271: IFFALSE 104298
// if IsDrivenBy ( i ) then
104273: LD_VAR 0 5
104277: PPUSH
104278: CALL_OW 311
104282: IFFALSE 104298
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
104284: LD_VAR 0 5
104288: PPUSH
104289: CALL_OW 311
104293: PPUSH
104294: CALL_OW 121
// end ;
104298: GO 104210
104300: POP
104301: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] or not mc_bases [ base ] ;
104302: LD_VAR 0 2
104306: PPUSH
104307: LD_INT 95
104309: PUSH
104310: LD_EXP 68
104314: PUSH
104315: LD_VAR 0 1
104319: ARRAY
104320: PUSH
104321: EMPTY
104322: LIST
104323: LIST
104324: PPUSH
104325: CALL_OW 72
104329: PUSH
104330: LD_VAR 0 2
104334: EQUAL
104335: PUSH
104336: LD_EXP 67
104340: PUSH
104341: LD_VAR 0 1
104345: ARRAY
104346: OR
104347: PUSH
104348: LD_EXP 44
104352: PUSH
104353: LD_VAR 0 1
104357: ARRAY
104358: NOT
104359: OR
104360: IFFALSE 104130
// end ; MC_Reset ( base , 19 ) ;
104362: LD_VAR 0 1
104366: PPUSH
104367: LD_INT 19
104369: PPUSH
104370: CALL 59713 0 2
// MC_Reset ( base , 20 ) ;
104374: LD_VAR 0 1
104378: PPUSH
104379: LD_INT 20
104381: PPUSH
104382: CALL 59713 0 2
// end ;
104386: LD_VAR 0 4
104390: RET
