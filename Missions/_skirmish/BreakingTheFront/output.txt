// starting begin ResetFog ;
   0: CALL_OW 335
// InitSettings ;
   4: CALL 44 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 31
// begin PlaceSeeing ( 1 , 1 , 1 , - 372963 ) ;
  14: LD_INT 1
  16: PPUSH
  17: LD_INT 1
  19: PPUSH
  20: LD_INT 1
  22: PPUSH
  23: LD_INT 372963
  25: NEG
  26: PPUSH
  27: CALL_OW 330
// end ; SetTechnologies ;
  31: CALL 595 0 0
// SetDiplomacy ;
  35: CALL 807 0 0
// PrepareGame ;
  39: CALL 889 0 0
// end ;
  43: END
// export debug , GameType , game , disableGlobalTimer ; export mc_amer , mc_leg , mc_rus_1 , mc_rus_2 ; export playerCommander , playerForces , allyCommander , Powell , Farmer , ruOutpost , ruEscape , staticMines , baseCaptured , legDestCounter , cratesSpawns , legOfferAccepted , legChangeSide , allyDestCounter , sibBombAllowed , reinforceAllowed , commander , cratesSpawn , outpostEscape , dialogueMineDetected ; end_of_file export function InitSettings ; begin
  44: LD_INT 0
  46: PPUSH
// debug := 0 ;
  47: LD_ADDR_EXP 1
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// GameType := 1 ;
  55: LD_ADDR_EXP 2
  59: PUSH
  60: LD_INT 1
  62: ST_TO_ADDR
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  63: LD_ADDR_OWVAR 67
  67: PUSH
  68: LD_INT 0
  70: PPUSH
  71: CALL_OW 426
  75: ST_TO_ADDR
// sibBombAllowed := GetMultiPlayerSetting ( 1 ) - 1 ;
  76: LD_ADDR_EXP 23
  80: PUSH
  81: LD_INT 1
  83: PPUSH
  84: CALL_OW 426
  88: PUSH
  89: LD_INT 1
  91: MINUS
  92: ST_TO_ADDR
// reinforceAllowed := GetMultiPlayerSetting ( 2 ) - 1 ;
  93: LD_ADDR_EXP 24
  97: PUSH
  98: LD_INT 2
 100: PPUSH
 101: CALL_OW 426
 105: PUSH
 106: LD_INT 1
 108: MINUS
 109: ST_TO_ADDR
// cratesSpawn := GetMultiPlayerSetting ( 3 ) ;
 110: LD_ADDR_EXP 26
 114: PUSH
 115: LD_INT 3
 117: PPUSH
 118: CALL_OW 426
 122: ST_TO_ADDR
// commander := GetMultiPlayerSetting ( 4 ) ;
 123: LD_ADDR_EXP 25
 127: PUSH
 128: LD_INT 4
 130: PPUSH
 131: CALL_OW 426
 135: ST_TO_ADDR
// if not commander then
 136: LD_EXP 25
 140: NOT
 141: IFFALSE 151
// commander := 3 ;
 143: LD_ADDR_EXP 25
 147: PUSH
 148: LD_INT 3
 150: ST_TO_ADDR
// if not debug then
 151: LD_EXP 1
 155: NOT
 156: IFFALSE 160
// exit ;
 158: GO 217
// display_strings := [ Difficulty:  & Difficulty , sibBomb:  & sibBombAllowed , reinforceAllowed:  & reinforceAllowed , cratesSpawn:  & cratesSpawn , commander:  & commander ] ;
 160: LD_ADDR_OWVAR 47
 164: PUSH
 165: LD_STRING Difficulty: 
 167: PUSH
 168: LD_OWVAR 67
 172: STR
 173: PUSH
 174: LD_STRING sibBomb: 
 176: PUSH
 177: LD_EXP 23
 181: STR
 182: PUSH
 183: LD_STRING reinforceAllowed: 
 185: PUSH
 186: LD_EXP 24
 190: STR
 191: PUSH
 192: LD_STRING cratesSpawn: 
 194: PUSH
 195: LD_EXP 26
 199: STR
 200: PUSH
 201: LD_STRING commander: 
 203: PUSH
 204: LD_EXP 25
 208: STR
 209: PUSH
 210: EMPTY
 211: LIST
 212: LIST
 213: LIST
 214: LIST
 215: LIST
 216: ST_TO_ADDR
// end ;
 217: LD_VAR 0 1
 221: RET
// every 0 0$1 trigger game and GameType = 1 and not disableGlobalTimer do
 222: LD_EXP 3
 226: PUSH
 227: LD_EXP 2
 231: PUSH
 232: LD_INT 1
 234: EQUAL
 235: AND
 236: PUSH
 237: LD_EXP 4
 241: NOT
 242: AND
 243: IFFALSE 266
 245: GO 247
 247: DISABLE
// begin enable ;
 248: ENABLE
// display_strings := [ #SkrTime , tick ] ;
 249: LD_ADDR_OWVAR 47
 253: PUSH
 254: LD_STRING #SkrTime
 256: PUSH
 257: LD_OWVAR 1
 261: PUSH
 262: EMPTY
 263: LIST
 264: LIST
 265: ST_TO_ADDR
// end ;
 266: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 267: LD_EXP 19
 271: PUSH
 272: LD_EXP 3
 276: AND
 277: PUSH
 278: LD_EXP 2
 282: PUSH
 283: LD_INT 1
 285: EQUAL
 286: AND
 287: IFFALSE 348
 289: GO 291
 291: DISABLE
// Crates ( cratesSpawns [ 1 ] [ 1 ] , cratesSpawns [ 1 ] [ 2 ] , cratesSpawns [ 1 ] [ 3 ] , cratesSpawns [ 1 ] [ 4 ] ) ;
 292: LD_EXP 19
 296: PUSH
 297: LD_INT 1
 299: ARRAY
 300: PUSH
 301: LD_INT 1
 303: ARRAY
 304: PPUSH
 305: LD_EXP 19
 309: PUSH
 310: LD_INT 1
 312: ARRAY
 313: PUSH
 314: LD_INT 2
 316: ARRAY
 317: PPUSH
 318: LD_EXP 19
 322: PUSH
 323: LD_INT 1
 325: ARRAY
 326: PUSH
 327: LD_INT 3
 329: ARRAY
 330: PPUSH
 331: LD_EXP 19
 335: PUSH
 336: LD_INT 1
 338: ARRAY
 339: PUSH
 340: LD_INT 4
 342: ARRAY
 343: PPUSH
 344: CALL 54679 0 4
 348: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 349: LD_EXP 19
 353: PUSH
 354: LD_EXP 3
 358: AND
 359: PUSH
 360: LD_EXP 2
 364: PUSH
 365: LD_INT 1
 367: EQUAL
 368: AND
 369: IFFALSE 430
 371: GO 373
 373: DISABLE
// Crates ( cratesSpawns [ 2 ] [ 1 ] , cratesSpawns [ 2 ] [ 2 ] , cratesSpawns [ 2 ] [ 3 ] , cratesSpawns [ 2 ] [ 4 ] ) ;
 374: LD_EXP 19
 378: PUSH
 379: LD_INT 2
 381: ARRAY
 382: PUSH
 383: LD_INT 1
 385: ARRAY
 386: PPUSH
 387: LD_EXP 19
 391: PUSH
 392: LD_INT 2
 394: ARRAY
 395: PUSH
 396: LD_INT 2
 398: ARRAY
 399: PPUSH
 400: LD_EXP 19
 404: PUSH
 405: LD_INT 2
 407: ARRAY
 408: PUSH
 409: LD_INT 3
 411: ARRAY
 412: PPUSH
 413: LD_EXP 19
 417: PUSH
 418: LD_INT 2
 420: ARRAY
 421: PUSH
 422: LD_INT 4
 424: ARRAY
 425: PPUSH
 426: CALL 54679 0 4
 430: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 431: LD_EXP 19
 435: PUSH
 436: LD_EXP 3
 440: AND
 441: PUSH
 442: LD_EXP 2
 446: PUSH
 447: LD_INT 1
 449: EQUAL
 450: AND
 451: IFFALSE 512
 453: GO 455
 455: DISABLE
// Crates ( cratesSpawns [ 3 ] [ 1 ] , cratesSpawns [ 3 ] [ 2 ] , cratesSpawns [ 3 ] [ 3 ] , cratesSpawns [ 3 ] [ 4 ] ) ;
 456: LD_EXP 19
 460: PUSH
 461: LD_INT 3
 463: ARRAY
 464: PUSH
 465: LD_INT 1
 467: ARRAY
 468: PPUSH
 469: LD_EXP 19
 473: PUSH
 474: LD_INT 3
 476: ARRAY
 477: PUSH
 478: LD_INT 2
 480: ARRAY
 481: PPUSH
 482: LD_EXP 19
 486: PUSH
 487: LD_INT 3
 489: ARRAY
 490: PUSH
 491: LD_INT 3
 493: ARRAY
 494: PPUSH
 495: LD_EXP 19
 499: PUSH
 500: LD_INT 3
 502: ARRAY
 503: PUSH
 504: LD_INT 4
 506: ARRAY
 507: PPUSH
 508: CALL 54679 0 4
 512: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 513: LD_EXP 19
 517: PUSH
 518: LD_EXP 3
 522: AND
 523: PUSH
 524: LD_EXP 2
 528: PUSH
 529: LD_INT 1
 531: EQUAL
 532: AND
 533: IFFALSE 594
 535: GO 537
 537: DISABLE
// Crates ( cratesSpawns [ 4 ] [ 1 ] , cratesSpawns [ 4 ] [ 2 ] , cratesSpawns [ 4 ] [ 3 ] , cratesSpawns [ 4 ] [ 4 ] ) ;
 538: LD_EXP 19
 542: PUSH
 543: LD_INT 4
 545: ARRAY
 546: PUSH
 547: LD_INT 1
 549: ARRAY
 550: PPUSH
 551: LD_EXP 19
 555: PUSH
 556: LD_INT 4
 558: ARRAY
 559: PUSH
 560: LD_INT 2
 562: ARRAY
 563: PPUSH
 564: LD_EXP 19
 568: PUSH
 569: LD_INT 4
 571: ARRAY
 572: PUSH
 573: LD_INT 3
 575: ARRAY
 576: PPUSH
 577: LD_EXP 19
 581: PUSH
 582: LD_INT 4
 584: ARRAY
 585: PUSH
 586: LD_INT 4
 588: ARRAY
 589: PPUSH
 590: CALL 54679 0 4
 594: END
// export function SetTechnologies ; var i , j , ban_techs , res_techs ; begin
 595: LD_INT 0
 597: PPUSH
 598: PPUSH
 599: PPUSH
 600: PPUSH
 601: PPUSH
// if GameType = 1 then
 602: LD_EXP 2
 606: PUSH
 607: LD_INT 1
 609: EQUAL
 610: IFFALSE 679
// begin ban_techs := [ ] ;
 612: LD_ADDR_VAR 0 4
 616: PUSH
 617: EMPTY
 618: ST_TO_ADDR
// if sibBombAllowed < 2 then
 619: LD_EXP 23
 623: PUSH
 624: LD_INT 2
 626: LESS
 627: IFFALSE 640
// ban_techs := [ tech_sibFiss ] ;
 629: LD_ADDR_VAR 0 4
 633: PUSH
 634: LD_INT 25
 636: PUSH
 637: EMPTY
 638: LIST
 639: ST_TO_ADDR
// res_techs := [ tech_oilPow , tech_oilEng , tech_tech1 , tech_tech2 , tech_tech3 , tech_gun , tech_gatling , tech_rocket ] ;
 640: LD_ADDR_VAR 0 5
 644: PUSH
 645: LD_INT 46
 647: PUSH
 648: LD_INT 47
 650: PUSH
 651: LD_INT 48
 653: PUSH
 654: LD_INT 49
 656: PUSH
 657: LD_INT 50
 659: PUSH
 660: LD_INT 39
 662: PUSH
 663: LD_INT 69
 665: PUSH
 666: LD_INT 40
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// end ; for i = 1 to 8 do
 679: LD_ADDR_VAR 0 2
 683: PUSH
 684: DOUBLE
 685: LD_INT 1
 687: DEC
 688: ST_TO_ADDR
 689: LD_INT 8
 691: PUSH
 692: FOR_TO
 693: IFFALSE 777
// begin if res_techs then
 695: LD_VAR 0 5
 699: IFFALSE 735
// for j in res_techs do
 701: LD_ADDR_VAR 0 3
 705: PUSH
 706: LD_VAR 0 5
 710: PUSH
 711: FOR_IN
 712: IFFALSE 733
// SetTech ( j , i , state_researched ) ;
 714: LD_VAR 0 3
 718: PPUSH
 719: LD_VAR 0 2
 723: PPUSH
 724: LD_INT 2
 726: PPUSH
 727: CALL_OW 322
 731: GO 711
 733: POP
 734: POP
// if ban_techs then
 735: LD_VAR 0 4
 739: IFFALSE 775
// for j in ban_techs do
 741: LD_ADDR_VAR 0 3
 745: PUSH
 746: LD_VAR 0 4
 750: PUSH
 751: FOR_IN
 752: IFFALSE 773
// SetTech ( j , i , state_disabled ) ;
 754: LD_VAR 0 3
 758: PPUSH
 759: LD_VAR 0 2
 763: PPUSH
 764: LD_INT 0
 766: PPUSH
 767: CALL_OW 322
 771: GO 751
 773: POP
 774: POP
// end ;
 775: GO 692
 777: POP
 778: POP
// if sibBombAllowed = 1 then
 779: LD_EXP 23
 783: PUSH
 784: LD_INT 1
 786: EQUAL
 787: IFFALSE 802
// SetTech ( tech_sibFiss , 3 , state_enabled ) ;
 789: LD_INT 25
 791: PPUSH
 792: LD_INT 3
 794: PPUSH
 795: LD_INT 1
 797: PPUSH
 798: CALL_OW 322
// end ;
 802: LD_VAR 0 1
 806: RET
// export function SetDiplomacy ; begin
 807: LD_INT 0
 809: PPUSH
// if GameType = 1 then
 810: LD_EXP 2
 814: PUSH
 815: LD_INT 1
 817: EQUAL
 818: IFFALSE 884
// begin SetAttitude ( 1 , 4 , att_friend , true ) ;
 820: LD_INT 1
 822: PPUSH
 823: LD_INT 4
 825: PPUSH
 826: LD_INT 1
 828: PPUSH
 829: LD_INT 1
 831: PPUSH
 832: CALL_OW 80
// SetAttitude ( 3 , 6 , att_friend , true ) ;
 836: LD_INT 3
 838: PPUSH
 839: LD_INT 6
 841: PPUSH
 842: LD_INT 1
 844: PPUSH
 845: LD_INT 1
 847: PPUSH
 848: CALL_OW 80
// SetAttitude ( 3 , 8 , att_friend , true ) ;
 852: LD_INT 3
 854: PPUSH
 855: LD_INT 8
 857: PPUSH
 858: LD_INT 1
 860: PPUSH
 861: LD_INT 1
 863: PPUSH
 864: CALL_OW 80
// SetAttitude ( 6 , 8 , att_friend , true ) ;
 868: LD_INT 6
 870: PPUSH
 871: LD_INT 8
 873: PPUSH
 874: LD_INT 1
 876: PPUSH
 877: LD_INT 1
 879: PPUSH
 880: CALL_OW 80
// end ; end ;
 884: LD_VAR 0 1
 888: RET
// export function PrepareGame ; var i , tmp , sources ; begin
 889: LD_INT 0
 891: PPUSH
 892: PPUSH
 893: PPUSH
 894: PPUSH
// if GameType = 1 then
 895: LD_EXP 2
 899: PUSH
 900: LD_INT 1
 902: EQUAL
 903: IFFALSE 1395
// begin game := false ;
 905: LD_ADDR_EXP 3
 909: PUSH
 910: LD_INT 0
 912: ST_TO_ADDR
// your_side := 1 ;
 913: LD_ADDR_OWVAR 2
 917: PUSH
 918: LD_INT 1
 920: ST_TO_ADDR
// mc_amer := 1 ;
 921: LD_ADDR_EXP 5
 925: PUSH
 926: LD_INT 1
 928: ST_TO_ADDR
// mc_leg := 2 ;
 929: LD_ADDR_EXP 6
 933: PUSH
 934: LD_INT 2
 936: ST_TO_ADDR
// mc_rus_1 := 3 ;
 937: LD_ADDR_EXP 7
 941: PUSH
 942: LD_INT 3
 944: ST_TO_ADDR
// mc_rus_2 := 4 ;
 945: LD_ADDR_EXP 8
 949: PUSH
 950: LD_INT 4
 952: ST_TO_ADDR
// cratesSpawns := [ [ amerCrates , 1 , 0 , [ 200 , 250 , 300 ] [ cratesSpawn ] ] , [ rusCrates , 8 , 50 , 500 ] , [ legCrates , 5 , 50 , 300 ] , [ playerCrates , [ 4 , 5 , 6 ] [ cratesSpawn ] , 30 , [ 300 , 450 , 500 ] [ cratesSpawn ] ] ] ;
 953: LD_ADDR_EXP 19
 957: PUSH
 958: LD_INT 5
 960: PUSH
 961: LD_INT 1
 963: PUSH
 964: LD_INT 0
 966: PUSH
 967: LD_INT 200
 969: PUSH
 970: LD_INT 250
 972: PUSH
 973: LD_INT 300
 975: PUSH
 976: EMPTY
 977: LIST
 978: LIST
 979: LIST
 980: PUSH
 981: LD_EXP 26
 985: ARRAY
 986: PUSH
 987: EMPTY
 988: LIST
 989: LIST
 990: LIST
 991: LIST
 992: PUSH
 993: LD_INT 13
 995: PUSH
 996: LD_INT 8
 998: PUSH
 999: LD_INT 50
1001: PUSH
1002: LD_INT 500
1004: PUSH
1005: EMPTY
1006: LIST
1007: LIST
1008: LIST
1009: LIST
1010: PUSH
1011: LD_INT 17
1013: PUSH
1014: LD_INT 5
1016: PUSH
1017: LD_INT 50
1019: PUSH
1020: LD_INT 300
1022: PUSH
1023: EMPTY
1024: LIST
1025: LIST
1026: LIST
1027: LIST
1028: PUSH
1029: LD_INT 18
1031: PUSH
1032: LD_INT 4
1034: PUSH
1035: LD_INT 5
1037: PUSH
1038: LD_INT 6
1040: PUSH
1041: EMPTY
1042: LIST
1043: LIST
1044: LIST
1045: PUSH
1046: LD_EXP 26
1050: ARRAY
1051: PUSH
1052: LD_INT 30
1054: PUSH
1055: LD_INT 300
1057: PUSH
1058: LD_INT 450
1060: PUSH
1061: LD_INT 500
1063: PUSH
1064: EMPTY
1065: LIST
1066: LIST
1067: LIST
1068: PUSH
1069: LD_EXP 26
1073: ARRAY
1074: PUSH
1075: EMPTY
1076: LIST
1077: LIST
1078: LIST
1079: LIST
1080: PUSH
1081: EMPTY
1082: LIST
1083: LIST
1084: LIST
1085: LIST
1086: ST_TO_ADDR
// sources := [ [ 190 , 193 , mat_siberit ] , [ 182 , 117 , mat_siberit ] , [ 43 , 2 , mat_siberit ] , [ 114 , 152 , mat_oil ] , [ 85 , 38 , mat_oil ] ] ;
1087: LD_ADDR_VAR 0 4
1091: PUSH
1092: LD_INT 190
1094: PUSH
1095: LD_INT 193
1097: PUSH
1098: LD_INT 3
1100: PUSH
1101: EMPTY
1102: LIST
1103: LIST
1104: LIST
1105: PUSH
1106: LD_INT 182
1108: PUSH
1109: LD_INT 117
1111: PUSH
1112: LD_INT 3
1114: PUSH
1115: EMPTY
1116: LIST
1117: LIST
1118: LIST
1119: PUSH
1120: LD_INT 43
1122: PUSH
1123: LD_INT 2
1125: PUSH
1126: LD_INT 3
1128: PUSH
1129: EMPTY
1130: LIST
1131: LIST
1132: LIST
1133: PUSH
1134: LD_INT 114
1136: PUSH
1137: LD_INT 152
1139: PUSH
1140: LD_INT 2
1142: PUSH
1143: EMPTY
1144: LIST
1145: LIST
1146: LIST
1147: PUSH
1148: LD_INT 85
1150: PUSH
1151: LD_INT 38
1153: PUSH
1154: LD_INT 2
1156: PUSH
1157: EMPTY
1158: LIST
1159: LIST
1160: LIST
1161: PUSH
1162: EMPTY
1163: LIST
1164: LIST
1165: LIST
1166: LIST
1167: LIST
1168: ST_TO_ADDR
// for i in sources do
1169: LD_ADDR_VAR 0 2
1173: PUSH
1174: LD_VAR 0 4
1178: PUSH
1179: FOR_IN
1180: IFFALSE 1215
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
1182: LD_VAR 0 2
1186: PUSH
1187: LD_INT 1
1189: ARRAY
1190: PPUSH
1191: LD_VAR 0 2
1195: PUSH
1196: LD_INT 2
1198: ARRAY
1199: PPUSH
1200: LD_VAR 0 2
1204: PUSH
1205: LD_INT 3
1207: ARRAY
1208: PPUSH
1209: CALL_OW 62
1213: GO 1179
1215: POP
1216: POP
// disableGlobalTimer := false ;
1217: LD_ADDR_EXP 4
1221: PUSH
1222: LD_INT 0
1224: ST_TO_ADDR
// ruEscape := [ 0 , [ 5 , 6 , 7 ] [ Difficulty ] ] ;
1225: LD_ADDR_EXP 15
1229: PUSH
1230: LD_INT 0
1232: PUSH
1233: LD_INT 5
1235: PUSH
1236: LD_INT 6
1238: PUSH
1239: LD_INT 7
1241: PUSH
1242: EMPTY
1243: LIST
1244: LIST
1245: LIST
1246: PUSH
1247: LD_OWVAR 67
1251: ARRAY
1252: PUSH
1253: EMPTY
1254: LIST
1255: LIST
1256: ST_TO_ADDR
// ruOutpost := [ ] ;
1257: LD_ADDR_EXP 14
1261: PUSH
1262: EMPTY
1263: ST_TO_ADDR
// staticMines := [ ] ;
1264: LD_ADDR_EXP 16
1268: PUSH
1269: EMPTY
1270: ST_TO_ADDR
// baseCaptured := false ;
1271: LD_ADDR_EXP 17
1275: PUSH
1276: LD_INT 0
1278: ST_TO_ADDR
// legDestCounter := 0 ;
1279: LD_ADDR_EXP 18
1283: PUSH
1284: LD_INT 0
1286: ST_TO_ADDR
// legOfferAccepted := false ;
1287: LD_ADDR_EXP 20
1291: PUSH
1292: LD_INT 0
1294: ST_TO_ADDR
// legChangeSide := false ;
1295: LD_ADDR_EXP 21
1299: PUSH
1300: LD_INT 0
1302: ST_TO_ADDR
// allyDestCounter := 0 ;
1303: LD_ADDR_EXP 22
1307: PUSH
1308: LD_INT 0
1310: ST_TO_ADDR
// outpostEscape := false ;
1311: LD_ADDR_EXP 27
1315: PUSH
1316: LD_INT 0
1318: ST_TO_ADDR
// dialogueMineDetected := false ;
1319: LD_ADDR_EXP 28
1323: PUSH
1324: LD_INT 0
1326: ST_TO_ADDR
// PrepareAmericans ;
1327: CALL 7264 0 0
// PrepareLegion ;
1331: CALL 5529 0 0
// PrepareRussians ;
1335: CALL 2495 0 0
// playerForces := PreparePlayer ;
1339: LD_ADDR_EXP 10
1343: PUSH
1344: CALL 8507 0 0
1348: ST_TO_ADDR
// AnimateTrees ( true ) ;
1349: LD_INT 1
1351: PPUSH
1352: CALL_OW 573
// PrepareNature ( 4 , 3 , 8 , 5 , 3 , 1 , 8 , natureGroundArea , natureWaterArea ) ;
1356: LD_INT 4
1358: PPUSH
1359: LD_INT 3
1361: PPUSH
1362: LD_INT 8
1364: PPUSH
1365: LD_INT 5
1367: PPUSH
1368: LD_INT 3
1370: PPUSH
1371: LD_INT 1
1373: PPUSH
1374: LD_INT 8
1376: PPUSH
1377: LD_INT 2
1379: PPUSH
1380: LD_INT 1
1382: PPUSH
1383: CALL 51984 0 9
// MC_Start ;
1387: CALL 58694 0 0
// Action ;
1391: CALL 10703 0 0
// end ; end ;
1395: LD_VAR 0 1
1399: RET
// export function CustomInitMacro ; begin
1400: LD_INT 0
1402: PPUSH
// if GameType <> 1 then
1403: LD_EXP 2
1407: PUSH
1408: LD_INT 1
1410: NONEQUAL
1411: IFFALSE 1415
// exit ;
1413: GO 2490
// MC_SetScanArea ( mc_amer , amerBase ) ;
1415: LD_EXP 5
1419: PPUSH
1420: LD_INT 3
1422: PPUSH
1423: CALL 81582 0 2
// MC_SetParkingArea ( mc_amer , amerParking ) ;
1427: LD_EXP 5
1431: PPUSH
1432: LD_INT 4
1434: PPUSH
1435: CALL 81526 0 2
// MC_SetAllowedTurretWeapons ( mc_amer , [ us_radar , us_heavy_gun , us_rocket_launcher , us_laser , us_double_laser ] ) ;
1439: LD_EXP 5
1443: PPUSH
1444: LD_INT 11
1446: PUSH
1447: LD_INT 6
1449: PUSH
1450: LD_INT 7
1452: PUSH
1453: LD_INT 9
1455: PUSH
1456: LD_INT 10
1458: PUSH
1459: EMPTY
1460: LIST
1461: LIST
1462: LIST
1463: LIST
1464: LIST
1465: PPUSH
1466: CALL 81414 0 2
// MC_SetCratesArea ( mc_amer , amerCrates ) ;
1470: LD_EXP 5
1474: PPUSH
1475: LD_INT 5
1477: PPUSH
1478: CALL 81096 0 2
// MC_SetTame ( mc_amer , amerBase ) ;
1482: LD_EXP 5
1486: PPUSH
1487: LD_INT 3
1489: PPUSH
1490: CALL 80827 0 2
// MC_SetDefenderLimit ( mc_amer , 4 ) ;
1494: LD_EXP 5
1498: PPUSH
1499: LD_INT 4
1501: PPUSH
1502: CALL 80446 0 2
// MC_SetProduceList ( mc_amer , [ [ us_medium_tracked , engine_combustion , control_remote , us_double_gun ] , [ us_medium_tracked , engine_solar , control_remote , us_laser ] , [ us_heavy_tracked , engine_combustion , control_remote , us_rocket_launcher ] , [ us_heavy_tracked , engine_combustion , control_remote , us_heavy_gun ] , ] ) ;
1506: LD_EXP 5
1510: PPUSH
1511: LD_INT 3
1513: PUSH
1514: LD_INT 1
1516: PUSH
1517: LD_INT 2
1519: PUSH
1520: LD_INT 5
1522: PUSH
1523: EMPTY
1524: LIST
1525: LIST
1526: LIST
1527: LIST
1528: PUSH
1529: LD_INT 3
1531: PUSH
1532: LD_INT 2
1534: PUSH
1535: LD_INT 2
1537: PUSH
1538: LD_INT 9
1540: PUSH
1541: EMPTY
1542: LIST
1543: LIST
1544: LIST
1545: LIST
1546: PUSH
1547: LD_INT 4
1549: PUSH
1550: LD_INT 1
1552: PUSH
1553: LD_INT 2
1555: PUSH
1556: LD_INT 7
1558: PUSH
1559: EMPTY
1560: LIST
1561: LIST
1562: LIST
1563: LIST
1564: PUSH
1565: LD_INT 4
1567: PUSH
1568: LD_INT 1
1570: PUSH
1571: LD_INT 2
1573: PUSH
1574: LD_INT 6
1576: PUSH
1577: EMPTY
1578: LIST
1579: LIST
1580: LIST
1581: LIST
1582: PUSH
1583: EMPTY
1584: LIST
1585: LIST
1586: LIST
1587: LIST
1588: PPUSH
1589: CALL 80261 0 2
// MC_SetBuildingList ( mc_amer , [ [ b_turret , 114 , 16 , 0 ] , [ b_bunker , 110 , 12 , 0 ] ] ) ;
1593: LD_EXP 5
1597: PPUSH
1598: LD_INT 33
1600: PUSH
1601: LD_INT 114
1603: PUSH
1604: LD_INT 16
1606: PUSH
1607: LD_INT 0
1609: PUSH
1610: EMPTY
1611: LIST
1612: LIST
1613: LIST
1614: LIST
1615: PUSH
1616: LD_INT 32
1618: PUSH
1619: LD_INT 110
1621: PUSH
1622: LD_INT 12
1624: PUSH
1625: LD_INT 0
1627: PUSH
1628: EMPTY
1629: LIST
1630: LIST
1631: LIST
1632: LIST
1633: PUSH
1634: EMPTY
1635: LIST
1636: LIST
1637: PPUSH
1638: CALL 80153 0 2
// MC_SetLabKind ( mc_amer , [ b_lab_weapon , b_lab_opto , b_lab_computer , b_lab_siberium ] ) ;
1642: LD_EXP 5
1646: PPUSH
1647: LD_INT 10
1649: PUSH
1650: LD_INT 15
1652: PUSH
1653: LD_INT 12
1655: PUSH
1656: LD_INT 11
1658: PUSH
1659: EMPTY
1660: LIST
1661: LIST
1662: LIST
1663: LIST
1664: PPUSH
1665: CALL 81003 0 2
// MC_SetScanArea ( mc_leg , legBase ) ;
1669: LD_EXP 6
1673: PPUSH
1674: LD_INT 6
1676: PPUSH
1677: CALL 81582 0 2
// MC_SetParkingArea ( mc_leg , legParking ) ;
1681: LD_EXP 6
1685: PPUSH
1686: LD_INT 7
1688: PPUSH
1689: CALL 81526 0 2
// MC_SetAllowedTurretWeapons ( mc_leg , [ ar_radar , ar_gun , ar_rocket_launcher , ar_gatling_gun ] ) ;
1693: LD_EXP 6
1697: PPUSH
1698: LD_INT 30
1700: PUSH
1701: LD_INT 27
1703: PUSH
1704: LD_INT 28
1706: PUSH
1707: LD_INT 25
1709: PUSH
1710: EMPTY
1711: LIST
1712: LIST
1713: LIST
1714: LIST
1715: PPUSH
1716: CALL 81414 0 2
// MC_SetCratesArea ( mc_leg , legCrates ) ;
1720: LD_EXP 6
1724: PPUSH
1725: LD_INT 17
1727: PPUSH
1728: CALL 81096 0 2
// MC_SetTame ( mc_leg , legBase ) ;
1732: LD_EXP 6
1736: PPUSH
1737: LD_INT 6
1739: PPUSH
1740: CALL 80827 0 2
// MC_SetDefenderLimit ( mc_leg , 5 ) ;
1744: LD_EXP 6
1748: PPUSH
1749: LD_INT 5
1751: PPUSH
1752: CALL 80446 0 2
// MC_SetMinesField ( mc_leg , 10 , legMines ) ;
1756: LD_EXP 6
1760: PPUSH
1761: LD_INT 10
1763: PPUSH
1764: LD_INT 9
1766: PPUSH
1767: CALL 79943 0 3
// MC_SetBuildingList ( mc_leg , [ [ b_armoury , 157 , 144 , 0 ] , [ b_bunker , 151 , 142 , 0 ] , [ b_bunker , 161 , 144 , 0 ] , [ b_bunker , 140 , 133 , 0 ] ] ) ;
1771: LD_EXP 6
1775: PPUSH
1776: LD_INT 4
1778: PUSH
1779: LD_INT 157
1781: PUSH
1782: LD_INT 144
1784: PUSH
1785: LD_INT 0
1787: PUSH
1788: EMPTY
1789: LIST
1790: LIST
1791: LIST
1792: LIST
1793: PUSH
1794: LD_INT 32
1796: PUSH
1797: LD_INT 151
1799: PUSH
1800: LD_INT 142
1802: PUSH
1803: LD_INT 0
1805: PUSH
1806: EMPTY
1807: LIST
1808: LIST
1809: LIST
1810: LIST
1811: PUSH
1812: LD_INT 32
1814: PUSH
1815: LD_INT 161
1817: PUSH
1818: LD_INT 144
1820: PUSH
1821: LD_INT 0
1823: PUSH
1824: EMPTY
1825: LIST
1826: LIST
1827: LIST
1828: LIST
1829: PUSH
1830: LD_INT 32
1832: PUSH
1833: LD_INT 140
1835: PUSH
1836: LD_INT 133
1838: PUSH
1839: LD_INT 0
1841: PUSH
1842: EMPTY
1843: LIST
1844: LIST
1845: LIST
1846: LIST
1847: PUSH
1848: EMPTY
1849: LIST
1850: LIST
1851: LIST
1852: LIST
1853: PPUSH
1854: CALL 80153 0 2
// MC_SetProduceList ( mc_leg , [ [ ar_medium_trike , engine_solar , control_manual , ar_control_tower ] , [ ar_medium_trike , engine_solar , control_manual , ar_control_tower ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_cargo_bay ] , [ ar_medium_trike , engine_combustion , control_remote , ar_crane ] ] ) ;
1858: LD_EXP 6
1862: PPUSH
1863: LD_INT 13
1865: PUSH
1866: LD_INT 2
1868: PUSH
1869: LD_INT 1
1871: PUSH
1872: LD_INT 31
1874: PUSH
1875: EMPTY
1876: LIST
1877: LIST
1878: LIST
1879: LIST
1880: PUSH
1881: LD_INT 13
1883: PUSH
1884: LD_INT 2
1886: PUSH
1887: LD_INT 1
1889: PUSH
1890: LD_INT 31
1892: PUSH
1893: EMPTY
1894: LIST
1895: LIST
1896: LIST
1897: LIST
1898: PUSH
1899: LD_INT 13
1901: PUSH
1902: LD_INT 1
1904: PUSH
1905: LD_INT 1
1907: PUSH
1908: LD_INT 27
1910: PUSH
1911: EMPTY
1912: LIST
1913: LIST
1914: LIST
1915: LIST
1916: PUSH
1917: LD_INT 13
1919: PUSH
1920: LD_INT 1
1922: PUSH
1923: LD_INT 2
1925: PUSH
1926: LD_INT 27
1928: PUSH
1929: EMPTY
1930: LIST
1931: LIST
1932: LIST
1933: LIST
1934: PUSH
1935: LD_INT 13
1937: PUSH
1938: LD_INT 1
1940: PUSH
1941: LD_INT 2
1943: PUSH
1944: LD_INT 27
1946: PUSH
1947: EMPTY
1948: LIST
1949: LIST
1950: LIST
1951: LIST
1952: PUSH
1953: LD_INT 13
1955: PUSH
1956: LD_INT 1
1958: PUSH
1959: LD_INT 2
1961: PUSH
1962: LD_INT 28
1964: PUSH
1965: EMPTY
1966: LIST
1967: LIST
1968: LIST
1969: LIST
1970: PUSH
1971: LD_INT 13
1973: PUSH
1974: LD_INT 1
1976: PUSH
1977: LD_INT 2
1979: PUSH
1980: LD_INT 28
1982: PUSH
1983: EMPTY
1984: LIST
1985: LIST
1986: LIST
1987: LIST
1988: PUSH
1989: LD_INT 13
1991: PUSH
1992: LD_INT 1
1994: PUSH
1995: LD_INT 2
1997: PUSH
1998: LD_INT 32
2000: PUSH
2001: EMPTY
2002: LIST
2003: LIST
2004: LIST
2005: LIST
2006: PUSH
2007: LD_INT 13
2009: PUSH
2010: LD_INT 1
2012: PUSH
2013: LD_INT 2
2015: PUSH
2016: LD_EXP 35
2020: PUSH
2021: EMPTY
2022: LIST
2023: LIST
2024: LIST
2025: LIST
2026: PUSH
2027: EMPTY
2028: LIST
2029: LIST
2030: LIST
2031: LIST
2032: LIST
2033: LIST
2034: LIST
2035: LIST
2036: LIST
2037: PPUSH
2038: CALL 80261 0 2
// HiddenCamera ( 165 , 156 , 8 ) ;
2042: LD_INT 165
2044: PPUSH
2045: LD_INT 156
2047: PPUSH
2048: LD_INT 8
2050: PPUSH
2051: CALL_OW 244
// MC_SetScanArea ( mc_rus_1 , rus1Base ) ;
2055: LD_EXP 7
2059: PPUSH
2060: LD_INT 15
2062: PPUSH
2063: CALL 81582 0 2
// MC_SetParkingArea ( mc_rus_1 , rus1Parking ) ;
2067: LD_EXP 7
2071: PPUSH
2072: LD_INT 16
2074: PPUSH
2075: CALL 81526 0 2
// MC_SetAllowedTurretWeapons ( mc_rus_1 , [ ru_gatling_gun , ru_rocket , ru_rocket_launcher , ru_time_lapser , ru_heavy_gun ] ) ;
2079: LD_EXP 7
2083: PPUSH
2084: LD_INT 43
2086: PUSH
2087: LD_INT 47
2089: PUSH
2090: LD_INT 45
2092: PUSH
2093: LD_INT 49
2095: PUSH
2096: LD_INT 46
2098: PUSH
2099: EMPTY
2100: LIST
2101: LIST
2102: LIST
2103: LIST
2104: LIST
2105: PPUSH
2106: CALL 81414 0 2
// MC_SetCratesArea ( mc_rus_1 , rusCrates ) ;
2110: LD_EXP 7
2114: PPUSH
2115: LD_INT 13
2117: PPUSH
2118: CALL 81096 0 2
// MC_SetTame ( mc_rus_1 , rus1Base ) ;
2122: LD_EXP 7
2126: PPUSH
2127: LD_INT 15
2129: PPUSH
2130: CALL 80827 0 2
// MC_SetDefenderLimit ( mc_rus_1 , 5 ) ;
2134: LD_EXP 7
2138: PPUSH
2139: LD_INT 5
2141: PPUSH
2142: CALL 80446 0 2
// MC_SetProduceList ( mc_rus_1 , [ [ ru_heavy_wheeled , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_wheeled , engine_combustion , control_manual , ru_heavy_gun ] , [ ru_heavy_wheeled , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_heavy_wheeled , engine_combustion , control_manual , ru_rocket ] , [ ru_heavy_wheeled , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_wheeled , engine_combustion , control_computer , ru_cargo_bay ] , [ ru_medium_wheeled , engine_combustion , control_computer , ru_crane ] , ] ) ;
2146: LD_EXP 7
2150: PPUSH
2151: LD_INT 23
2153: PUSH
2154: LD_INT 1
2156: PUSH
2157: LD_INT 3
2159: PUSH
2160: LD_INT 46
2162: PUSH
2163: EMPTY
2164: LIST
2165: LIST
2166: LIST
2167: LIST
2168: PUSH
2169: LD_INT 23
2171: PUSH
2172: LD_INT 1
2174: PUSH
2175: LD_INT 1
2177: PUSH
2178: LD_INT 46
2180: PUSH
2181: EMPTY
2182: LIST
2183: LIST
2184: LIST
2185: LIST
2186: PUSH
2187: LD_INT 23
2189: PUSH
2190: LD_INT 1
2192: PUSH
2193: LD_INT 3
2195: PUSH
2196: LD_INT 45
2198: PUSH
2199: EMPTY
2200: LIST
2201: LIST
2202: LIST
2203: LIST
2204: PUSH
2205: LD_INT 23
2207: PUSH
2208: LD_INT 1
2210: PUSH
2211: LD_INT 1
2213: PUSH
2214: LD_INT 47
2216: PUSH
2217: EMPTY
2218: LIST
2219: LIST
2220: LIST
2221: LIST
2222: PUSH
2223: LD_INT 23
2225: PUSH
2226: LD_INT 1
2228: PUSH
2229: LD_INT 3
2231: PUSH
2232: LD_INT 46
2234: PUSH
2235: EMPTY
2236: LIST
2237: LIST
2238: LIST
2239: LIST
2240: PUSH
2241: LD_INT 21
2243: PUSH
2244: LD_INT 1
2246: PUSH
2247: LD_INT 3
2249: PUSH
2250: LD_INT 51
2252: PUSH
2253: EMPTY
2254: LIST
2255: LIST
2256: LIST
2257: LIST
2258: PUSH
2259: LD_INT 21
2261: PUSH
2262: LD_INT 1
2264: PUSH
2265: LD_INT 3
2267: PUSH
2268: LD_INT 52
2270: PUSH
2271: EMPTY
2272: LIST
2273: LIST
2274: LIST
2275: LIST
2276: PUSH
2277: EMPTY
2278: LIST
2279: LIST
2280: LIST
2281: LIST
2282: LIST
2283: LIST
2284: LIST
2285: PPUSH
2286: CALL 80261 0 2
// MC_SetScanArea ( mc_rus_2 , rus2Base ) ;
2290: LD_EXP 8
2294: PPUSH
2295: LD_INT 11
2297: PPUSH
2298: CALL 81582 0 2
// MC_SetParkingArea ( mc_rus_2 , rus2Parking ) ;
2302: LD_EXP 8
2306: PPUSH
2307: LD_INT 12
2309: PPUSH
2310: CALL 81526 0 2
// MC_SetAllowedTurretWeapons ( mc_rus_2 , [ ru_gatling_gun , ru_rocket , ru_rocket_launcher , ru_time_lapser , ru_heavy_gun ] ) ;
2314: LD_EXP 8
2318: PPUSH
2319: LD_INT 43
2321: PUSH
2322: LD_INT 47
2324: PUSH
2325: LD_INT 45
2327: PUSH
2328: LD_INT 49
2330: PUSH
2331: LD_INT 46
2333: PUSH
2334: EMPTY
2335: LIST
2336: LIST
2337: LIST
2338: LIST
2339: LIST
2340: PPUSH
2341: CALL 81414 0 2
// MC_SetCratesArea ( mc_rus_2 , rusCrates ) ;
2345: LD_EXP 8
2349: PPUSH
2350: LD_INT 13
2352: PPUSH
2353: CALL 81096 0 2
// MC_SetTame ( mc_rus_2 , rus2Base ) ;
2357: LD_EXP 8
2361: PPUSH
2362: LD_INT 11
2364: PPUSH
2365: CALL 80827 0 2
// MC_SetDefenderLimit ( mc_rus_2 , 4 ) ;
2369: LD_EXP 8
2373: PPUSH
2374: LD_INT 4
2376: PPUSH
2377: CALL 80446 0 2
// MC_SetTeleportExit ( mc_rus_2 , [ [ 115 , 201 ] ] ) ;
2381: LD_EXP 8
2385: PPUSH
2386: LD_INT 115
2388: PUSH
2389: LD_INT 201
2391: PUSH
2392: EMPTY
2393: LIST
2394: LIST
2395: PUSH
2396: EMPTY
2397: LIST
2398: PPUSH
2399: CALL 81152 0 2
// MC_SetProduceList ( mc_rus_2 , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] ] ) ;
2403: LD_EXP 8
2407: PPUSH
2408: LD_INT 24
2410: PUSH
2411: LD_INT 3
2413: PUSH
2414: LD_INT 3
2416: PUSH
2417: LD_INT 46
2419: PUSH
2420: EMPTY
2421: LIST
2422: LIST
2423: LIST
2424: LIST
2425: PUSH
2426: LD_INT 24
2428: PUSH
2429: LD_INT 3
2431: PUSH
2432: LD_INT 3
2434: PUSH
2435: LD_INT 46
2437: PUSH
2438: EMPTY
2439: LIST
2440: LIST
2441: LIST
2442: LIST
2443: PUSH
2444: LD_INT 24
2446: PUSH
2447: LD_INT 3
2449: PUSH
2450: LD_INT 3
2452: PUSH
2453: LD_INT 46
2455: PUSH
2456: EMPTY
2457: LIST
2458: LIST
2459: LIST
2460: LIST
2461: PUSH
2462: LD_INT 24
2464: PUSH
2465: LD_INT 3
2467: PUSH
2468: LD_INT 3
2470: PUSH
2471: LD_INT 46
2473: PUSH
2474: EMPTY
2475: LIST
2476: LIST
2477: LIST
2478: LIST
2479: PUSH
2480: EMPTY
2481: LIST
2482: LIST
2483: LIST
2484: LIST
2485: PPUSH
2486: CALL 80261 0 2
// end ;
2490: LD_VAR 0 1
2494: RET
// export function PrepareRussians ; var i , b , tmp , side , sr , depot , base ; begin
2495: LD_INT 0
2497: PPUSH
2498: PPUSH
2499: PPUSH
2500: PPUSH
2501: PPUSH
2502: PPUSH
2503: PPUSH
2504: PPUSH
// PrepareNature ( 0 , 0 , 3 , 0 , 0 , 0 , 0 , rusApe , 0 ) ;
2505: LD_INT 0
2507: PPUSH
2508: LD_INT 0
2510: PPUSH
2511: LD_INT 3
2513: PPUSH
2514: LD_INT 0
2516: PPUSH
2517: LD_INT 0
2519: PPUSH
2520: LD_INT 0
2522: PPUSH
2523: LD_INT 0
2525: PPUSH
2526: LD_INT 14
2528: PPUSH
2529: LD_INT 0
2531: PPUSH
2532: CALL 51984 0 9
// side := 3 ;
2536: LD_ADDR_VAR 0 5
2540: PUSH
2541: LD_INT 3
2543: ST_TO_ADDR
// SetTech ( tech_targTeleport , side , state_researched ) ;
2544: LD_INT 38
2546: PPUSH
2547: LD_VAR 0 5
2551: PPUSH
2552: LD_INT 2
2554: PPUSH
2555: CALL_OW 322
// SetTech ( tech_gun , side , state_researched ) ;
2559: LD_INT 39
2561: PPUSH
2562: LD_VAR 0 5
2566: PPUSH
2567: LD_INT 2
2569: PPUSH
2570: CALL_OW 322
// SetTech ( tech_advMet , side , state_researched ) ;
2574: LD_INT 34
2576: PPUSH
2577: LD_VAR 0 5
2581: PPUSH
2582: LD_INT 2
2584: PPUSH
2585: CALL_OW 322
// tmp := [ [ 0 , 208 , 163 , 4 , 0 , 0 ] , [ 3 , 194 , 161 , 1 , 0 , 0 ] , [ 17 , 190 , 161 , 1 , 0 , 0 ] , [ 5 , 200 , 145 , 3 , 0 , 0 ] , [ 32 , 192 , 144 , 3 , 0 , 0 ] , [ 26 , 216 , 172 , 3 , 0 , 0 ] , [ 26 , 218 , 176 , 3 , 0 , 0 ] , [ 29 , 182 , 149 , 3 , 0 , 0 ] , [ 8 , 201 , 171 , 0 , 10 , 11 ] , [ 32 , 188 , 167 , 0 , 0 , 0 ] , [ 32 , 202 , 179 , 0 , 0 , 0 ] , [ 32 , 209 , 182 , 0 , 0 , 0 ] , [ 32 , 220 , 183 , 5 , 0 , 0 ] , [ 32 , 225 , 181 , 5 , 0 , 0 ] , [ 26 , 220 , 174 , 5 , 0 , 0 ] , [ 1 , 84 , 128 , 4 , 0 , 0 ] , [ 3 , 68 , 121 , 1 , 0 , 0 ] , [ 19 , 72 , 125 , 5 , 0 , 0 ] , [ 18 , 68 , 124 , 0 , 0 , 0 ] , [ 24 , 64 , 121 , 1 , 0 , 0 ] , [ 17 , 65 , 118 , 2 , 0 , 0 ] , [ 21 , 68 , 117 , 3 , 0 , 0 ] , [ 8 , 68 , 130 , 1 , 14 , 10 ] , [ 8 , 67 , 110 , 2 , 11 , 12 ] , [ 28 , 85 , 108 , 2 , 0 , 0 ] , [ 28 , 85 , 124 , 2 , 0 , 0 ] , [ 30 , 97 , 119 , 2 , 0 , 0 ] , [ 5 , 111 , 138 , 4 , 0 , 0 ] , [ 33 , 104 , 130 , 3 , 0 , 0 ] , [ 33 , 110 , 142 , 5 , 0 , 0 ] , [ 33 , 91 , 131 , 5 , 0 , 0 ] , [ 33 , 107 , 157 , 5 , 0 , 0 ] , [ 33 , 104 , 160 , 5 , 0 , 0 ] , [ 33 , 101 , 162 , 5 , 0 , 0 ] , [ 32 , 87 , 157 , 5 , 0 , 0 ] , [ 32 , 105 , 158 , 5 , 0 , 0 ] , [ 33 , 91 , 118 , 4 , 0 , 0 ] , [ 33 , 89 , 107 , 4 , 0 , 0 ] , [ 5 , 86 , 96 , 3 , 0 , 0 ] , [ 33 , 91 , 102 , 4 , 0 , 0 ] , [ 32 , 80 , 95 , 3 , 0 , 0 ] , [ 28 , 77 , 105 , 3 , 0 , 0 ] , [ 28 , 85 , 113 , 3 , 0 , 0 ] , [ 28 , 55 , 97 , 3 , 0 , 0 ] , [ 28 , 88 , 128 , 3 , 0 , 0 ] , [ 32 , 69 , 101 , 2 , 0 , 0 ] , [ 1 , 34 , 23 , 4 , 0 , 0 ] , [ 8 , 25 , 4 , 3 , 11 , 10 ] , [ 8 , 15 , 4 , 2 , 14 , 12 ] , [ 29 , 55 , 35 , 2 , 0 , 0 ] , [ 29 , 24 , 44 , 2 , 0 , 0 ] , [ 34 , 34 , 32 , 4 , 0 , 0 ] , [ 3 , 14 , 16 , 1 , 0 , 0 ] , [ 24 , 10 , 16 , 1 , 0 , 0 ] , [ 21 , 11 , 13 , 2 , 0 , 0 ] , [ 18 , 14 , 12 , 3 , 0 , 0 ] , [ 16 , 14 , 19 , 0 , 0 , 0 ] , [ 17 , 18 , 20 , 5 , 0 , 0 ] , [ 28 , 10 , 5 , 1 , 0 , 0 ] , [ 28 , 8 , 8 , 1 , 0 , 0 ] , [ 26 , 19 , 2 , 1 , 0 , 0 ] , [ 26 , 30 , 2 , 1 , 0 , 0 ] , [ 5 , 59 , 20 , 4 , 0 , 0 ] , [ 32 , 60 , 24 , 4 , 0 , 0 ] , [ 32 , 61 , 45 , 5 , 0 , 0 ] , [ 32 , 52 , 51 , 5 , 0 , 0 ] , [ 33 , 56 , 51 , 5 , 0 , 0 ] , [ 33 , 62 , 49 , 5 , 0 , 0 ] , [ 33 , 41 , 47 , 5 , 0 , 0 ] , [ 33 , 33 , 52 , 5 , 0 , 0 ] , [ 5 , 31 , 40 , 0 , 0 , 0 ] , [ 33 , 65 , 37 , 5 , 0 , 0 ] , [ 33 , 63 , 29 , 4 , 0 , 0 ] , [ 33 , 54 , 11 , 4 , 0 , 0 ] , [ 33 , 56 , 15 , 4 , 0 , 0 ] , [ 33 , 51 , 6 , 4 , 0 , 0 ] , [ 26 , 39 , 25 , 0 , 0 , 0 ] , [ 26 , 37 , 21 , 0 , 0 , 0 ] , [ 32 , 35 , 17 , 4 , 0 , 0 ] , [ 33 , 35 , 28 , 4 , 0 , 0 ] , [ 33 , 28 , 46 , 5 , 0 , 0 ] , [ 33 , 31 , 6 , 4 , 0 , 0 ] , [ 26 , 54 , 38 , 4 , 0 , 0 ] , [ 33 , 207 , 167 , 3 , 0 , 0 ] , [ 30 , 43 , 2 , 4 , 0 , 0 ] ] ;
2589: LD_ADDR_VAR 0 4
2593: PUSH
2594: LD_INT 0
2596: PUSH
2597: LD_INT 208
2599: PUSH
2600: LD_INT 163
2602: PUSH
2603: LD_INT 4
2605: PUSH
2606: LD_INT 0
2608: PUSH
2609: LD_INT 0
2611: PUSH
2612: EMPTY
2613: LIST
2614: LIST
2615: LIST
2616: LIST
2617: LIST
2618: LIST
2619: PUSH
2620: LD_INT 3
2622: PUSH
2623: LD_INT 194
2625: PUSH
2626: LD_INT 161
2628: PUSH
2629: LD_INT 1
2631: PUSH
2632: LD_INT 0
2634: PUSH
2635: LD_INT 0
2637: PUSH
2638: EMPTY
2639: LIST
2640: LIST
2641: LIST
2642: LIST
2643: LIST
2644: LIST
2645: PUSH
2646: LD_INT 17
2648: PUSH
2649: LD_INT 190
2651: PUSH
2652: LD_INT 161
2654: PUSH
2655: LD_INT 1
2657: PUSH
2658: LD_INT 0
2660: PUSH
2661: LD_INT 0
2663: PUSH
2664: EMPTY
2665: LIST
2666: LIST
2667: LIST
2668: LIST
2669: LIST
2670: LIST
2671: PUSH
2672: LD_INT 5
2674: PUSH
2675: LD_INT 200
2677: PUSH
2678: LD_INT 145
2680: PUSH
2681: LD_INT 3
2683: PUSH
2684: LD_INT 0
2686: PUSH
2687: LD_INT 0
2689: PUSH
2690: EMPTY
2691: LIST
2692: LIST
2693: LIST
2694: LIST
2695: LIST
2696: LIST
2697: PUSH
2698: LD_INT 32
2700: PUSH
2701: LD_INT 192
2703: PUSH
2704: LD_INT 144
2706: PUSH
2707: LD_INT 3
2709: PUSH
2710: LD_INT 0
2712: PUSH
2713: LD_INT 0
2715: PUSH
2716: EMPTY
2717: LIST
2718: LIST
2719: LIST
2720: LIST
2721: LIST
2722: LIST
2723: PUSH
2724: LD_INT 26
2726: PUSH
2727: LD_INT 216
2729: PUSH
2730: LD_INT 172
2732: PUSH
2733: LD_INT 3
2735: PUSH
2736: LD_INT 0
2738: PUSH
2739: LD_INT 0
2741: PUSH
2742: EMPTY
2743: LIST
2744: LIST
2745: LIST
2746: LIST
2747: LIST
2748: LIST
2749: PUSH
2750: LD_INT 26
2752: PUSH
2753: LD_INT 218
2755: PUSH
2756: LD_INT 176
2758: PUSH
2759: LD_INT 3
2761: PUSH
2762: LD_INT 0
2764: PUSH
2765: LD_INT 0
2767: PUSH
2768: EMPTY
2769: LIST
2770: LIST
2771: LIST
2772: LIST
2773: LIST
2774: LIST
2775: PUSH
2776: LD_INT 29
2778: PUSH
2779: LD_INT 182
2781: PUSH
2782: LD_INT 149
2784: PUSH
2785: LD_INT 3
2787: PUSH
2788: LD_INT 0
2790: PUSH
2791: LD_INT 0
2793: PUSH
2794: EMPTY
2795: LIST
2796: LIST
2797: LIST
2798: LIST
2799: LIST
2800: LIST
2801: PUSH
2802: LD_INT 8
2804: PUSH
2805: LD_INT 201
2807: PUSH
2808: LD_INT 171
2810: PUSH
2811: LD_INT 0
2813: PUSH
2814: LD_INT 10
2816: PUSH
2817: LD_INT 11
2819: PUSH
2820: EMPTY
2821: LIST
2822: LIST
2823: LIST
2824: LIST
2825: LIST
2826: LIST
2827: PUSH
2828: LD_INT 32
2830: PUSH
2831: LD_INT 188
2833: PUSH
2834: LD_INT 167
2836: PUSH
2837: LD_INT 0
2839: PUSH
2840: LD_INT 0
2842: PUSH
2843: LD_INT 0
2845: PUSH
2846: EMPTY
2847: LIST
2848: LIST
2849: LIST
2850: LIST
2851: LIST
2852: LIST
2853: PUSH
2854: LD_INT 32
2856: PUSH
2857: LD_INT 202
2859: PUSH
2860: LD_INT 179
2862: PUSH
2863: LD_INT 0
2865: PUSH
2866: LD_INT 0
2868: PUSH
2869: LD_INT 0
2871: PUSH
2872: EMPTY
2873: LIST
2874: LIST
2875: LIST
2876: LIST
2877: LIST
2878: LIST
2879: PUSH
2880: LD_INT 32
2882: PUSH
2883: LD_INT 209
2885: PUSH
2886: LD_INT 182
2888: PUSH
2889: LD_INT 0
2891: PUSH
2892: LD_INT 0
2894: PUSH
2895: LD_INT 0
2897: PUSH
2898: EMPTY
2899: LIST
2900: LIST
2901: LIST
2902: LIST
2903: LIST
2904: LIST
2905: PUSH
2906: LD_INT 32
2908: PUSH
2909: LD_INT 220
2911: PUSH
2912: LD_INT 183
2914: PUSH
2915: LD_INT 5
2917: PUSH
2918: LD_INT 0
2920: PUSH
2921: LD_INT 0
2923: PUSH
2924: EMPTY
2925: LIST
2926: LIST
2927: LIST
2928: LIST
2929: LIST
2930: LIST
2931: PUSH
2932: LD_INT 32
2934: PUSH
2935: LD_INT 225
2937: PUSH
2938: LD_INT 181
2940: PUSH
2941: LD_INT 5
2943: PUSH
2944: LD_INT 0
2946: PUSH
2947: LD_INT 0
2949: PUSH
2950: EMPTY
2951: LIST
2952: LIST
2953: LIST
2954: LIST
2955: LIST
2956: LIST
2957: PUSH
2958: LD_INT 26
2960: PUSH
2961: LD_INT 220
2963: PUSH
2964: LD_INT 174
2966: PUSH
2967: LD_INT 5
2969: PUSH
2970: LD_INT 0
2972: PUSH
2973: LD_INT 0
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: LIST
2980: LIST
2981: LIST
2982: LIST
2983: PUSH
2984: LD_INT 1
2986: PUSH
2987: LD_INT 84
2989: PUSH
2990: LD_INT 128
2992: PUSH
2993: LD_INT 4
2995: PUSH
2996: LD_INT 0
2998: PUSH
2999: LD_INT 0
3001: PUSH
3002: EMPTY
3003: LIST
3004: LIST
3005: LIST
3006: LIST
3007: LIST
3008: LIST
3009: PUSH
3010: LD_INT 3
3012: PUSH
3013: LD_INT 68
3015: PUSH
3016: LD_INT 121
3018: PUSH
3019: LD_INT 1
3021: PUSH
3022: LD_INT 0
3024: PUSH
3025: LD_INT 0
3027: PUSH
3028: EMPTY
3029: LIST
3030: LIST
3031: LIST
3032: LIST
3033: LIST
3034: LIST
3035: PUSH
3036: LD_INT 19
3038: PUSH
3039: LD_INT 72
3041: PUSH
3042: LD_INT 125
3044: PUSH
3045: LD_INT 5
3047: PUSH
3048: LD_INT 0
3050: PUSH
3051: LD_INT 0
3053: PUSH
3054: EMPTY
3055: LIST
3056: LIST
3057: LIST
3058: LIST
3059: LIST
3060: LIST
3061: PUSH
3062: LD_INT 18
3064: PUSH
3065: LD_INT 68
3067: PUSH
3068: LD_INT 124
3070: PUSH
3071: LD_INT 0
3073: PUSH
3074: LD_INT 0
3076: PUSH
3077: LD_INT 0
3079: PUSH
3080: EMPTY
3081: LIST
3082: LIST
3083: LIST
3084: LIST
3085: LIST
3086: LIST
3087: PUSH
3088: LD_INT 24
3090: PUSH
3091: LD_INT 64
3093: PUSH
3094: LD_INT 121
3096: PUSH
3097: LD_INT 1
3099: PUSH
3100: LD_INT 0
3102: PUSH
3103: LD_INT 0
3105: PUSH
3106: EMPTY
3107: LIST
3108: LIST
3109: LIST
3110: LIST
3111: LIST
3112: LIST
3113: PUSH
3114: LD_INT 17
3116: PUSH
3117: LD_INT 65
3119: PUSH
3120: LD_INT 118
3122: PUSH
3123: LD_INT 2
3125: PUSH
3126: LD_INT 0
3128: PUSH
3129: LD_INT 0
3131: PUSH
3132: EMPTY
3133: LIST
3134: LIST
3135: LIST
3136: LIST
3137: LIST
3138: LIST
3139: PUSH
3140: LD_INT 21
3142: PUSH
3143: LD_INT 68
3145: PUSH
3146: LD_INT 117
3148: PUSH
3149: LD_INT 3
3151: PUSH
3152: LD_INT 0
3154: PUSH
3155: LD_INT 0
3157: PUSH
3158: EMPTY
3159: LIST
3160: LIST
3161: LIST
3162: LIST
3163: LIST
3164: LIST
3165: PUSH
3166: LD_INT 8
3168: PUSH
3169: LD_INT 68
3171: PUSH
3172: LD_INT 130
3174: PUSH
3175: LD_INT 1
3177: PUSH
3178: LD_INT 14
3180: PUSH
3181: LD_INT 10
3183: PUSH
3184: EMPTY
3185: LIST
3186: LIST
3187: LIST
3188: LIST
3189: LIST
3190: LIST
3191: PUSH
3192: LD_INT 8
3194: PUSH
3195: LD_INT 67
3197: PUSH
3198: LD_INT 110
3200: PUSH
3201: LD_INT 2
3203: PUSH
3204: LD_INT 11
3206: PUSH
3207: LD_INT 12
3209: PUSH
3210: EMPTY
3211: LIST
3212: LIST
3213: LIST
3214: LIST
3215: LIST
3216: LIST
3217: PUSH
3218: LD_INT 28
3220: PUSH
3221: LD_INT 85
3223: PUSH
3224: LD_INT 108
3226: PUSH
3227: LD_INT 2
3229: PUSH
3230: LD_INT 0
3232: PUSH
3233: LD_INT 0
3235: PUSH
3236: EMPTY
3237: LIST
3238: LIST
3239: LIST
3240: LIST
3241: LIST
3242: LIST
3243: PUSH
3244: LD_INT 28
3246: PUSH
3247: LD_INT 85
3249: PUSH
3250: LD_INT 124
3252: PUSH
3253: LD_INT 2
3255: PUSH
3256: LD_INT 0
3258: PUSH
3259: LD_INT 0
3261: PUSH
3262: EMPTY
3263: LIST
3264: LIST
3265: LIST
3266: LIST
3267: LIST
3268: LIST
3269: PUSH
3270: LD_INT 30
3272: PUSH
3273: LD_INT 97
3275: PUSH
3276: LD_INT 119
3278: PUSH
3279: LD_INT 2
3281: PUSH
3282: LD_INT 0
3284: PUSH
3285: LD_INT 0
3287: PUSH
3288: EMPTY
3289: LIST
3290: LIST
3291: LIST
3292: LIST
3293: LIST
3294: LIST
3295: PUSH
3296: LD_INT 5
3298: PUSH
3299: LD_INT 111
3301: PUSH
3302: LD_INT 138
3304: PUSH
3305: LD_INT 4
3307: PUSH
3308: LD_INT 0
3310: PUSH
3311: LD_INT 0
3313: PUSH
3314: EMPTY
3315: LIST
3316: LIST
3317: LIST
3318: LIST
3319: LIST
3320: LIST
3321: PUSH
3322: LD_INT 33
3324: PUSH
3325: LD_INT 104
3327: PUSH
3328: LD_INT 130
3330: PUSH
3331: LD_INT 3
3333: PUSH
3334: LD_INT 0
3336: PUSH
3337: LD_INT 0
3339: PUSH
3340: EMPTY
3341: LIST
3342: LIST
3343: LIST
3344: LIST
3345: LIST
3346: LIST
3347: PUSH
3348: LD_INT 33
3350: PUSH
3351: LD_INT 110
3353: PUSH
3354: LD_INT 142
3356: PUSH
3357: LD_INT 5
3359: PUSH
3360: LD_INT 0
3362: PUSH
3363: LD_INT 0
3365: PUSH
3366: EMPTY
3367: LIST
3368: LIST
3369: LIST
3370: LIST
3371: LIST
3372: LIST
3373: PUSH
3374: LD_INT 33
3376: PUSH
3377: LD_INT 91
3379: PUSH
3380: LD_INT 131
3382: PUSH
3383: LD_INT 5
3385: PUSH
3386: LD_INT 0
3388: PUSH
3389: LD_INT 0
3391: PUSH
3392: EMPTY
3393: LIST
3394: LIST
3395: LIST
3396: LIST
3397: LIST
3398: LIST
3399: PUSH
3400: LD_INT 33
3402: PUSH
3403: LD_INT 107
3405: PUSH
3406: LD_INT 157
3408: PUSH
3409: LD_INT 5
3411: PUSH
3412: LD_INT 0
3414: PUSH
3415: LD_INT 0
3417: PUSH
3418: EMPTY
3419: LIST
3420: LIST
3421: LIST
3422: LIST
3423: LIST
3424: LIST
3425: PUSH
3426: LD_INT 33
3428: PUSH
3429: LD_INT 104
3431: PUSH
3432: LD_INT 160
3434: PUSH
3435: LD_INT 5
3437: PUSH
3438: LD_INT 0
3440: PUSH
3441: LD_INT 0
3443: PUSH
3444: EMPTY
3445: LIST
3446: LIST
3447: LIST
3448: LIST
3449: LIST
3450: LIST
3451: PUSH
3452: LD_INT 33
3454: PUSH
3455: LD_INT 101
3457: PUSH
3458: LD_INT 162
3460: PUSH
3461: LD_INT 5
3463: PUSH
3464: LD_INT 0
3466: PUSH
3467: LD_INT 0
3469: PUSH
3470: EMPTY
3471: LIST
3472: LIST
3473: LIST
3474: LIST
3475: LIST
3476: LIST
3477: PUSH
3478: LD_INT 32
3480: PUSH
3481: LD_INT 87
3483: PUSH
3484: LD_INT 157
3486: PUSH
3487: LD_INT 5
3489: PUSH
3490: LD_INT 0
3492: PUSH
3493: LD_INT 0
3495: PUSH
3496: EMPTY
3497: LIST
3498: LIST
3499: LIST
3500: LIST
3501: LIST
3502: LIST
3503: PUSH
3504: LD_INT 32
3506: PUSH
3507: LD_INT 105
3509: PUSH
3510: LD_INT 158
3512: PUSH
3513: LD_INT 5
3515: PUSH
3516: LD_INT 0
3518: PUSH
3519: LD_INT 0
3521: PUSH
3522: EMPTY
3523: LIST
3524: LIST
3525: LIST
3526: LIST
3527: LIST
3528: LIST
3529: PUSH
3530: LD_INT 33
3532: PUSH
3533: LD_INT 91
3535: PUSH
3536: LD_INT 118
3538: PUSH
3539: LD_INT 4
3541: PUSH
3542: LD_INT 0
3544: PUSH
3545: LD_INT 0
3547: PUSH
3548: EMPTY
3549: LIST
3550: LIST
3551: LIST
3552: LIST
3553: LIST
3554: LIST
3555: PUSH
3556: LD_INT 33
3558: PUSH
3559: LD_INT 89
3561: PUSH
3562: LD_INT 107
3564: PUSH
3565: LD_INT 4
3567: PUSH
3568: LD_INT 0
3570: PUSH
3571: LD_INT 0
3573: PUSH
3574: EMPTY
3575: LIST
3576: LIST
3577: LIST
3578: LIST
3579: LIST
3580: LIST
3581: PUSH
3582: LD_INT 5
3584: PUSH
3585: LD_INT 86
3587: PUSH
3588: LD_INT 96
3590: PUSH
3591: LD_INT 3
3593: PUSH
3594: LD_INT 0
3596: PUSH
3597: LD_INT 0
3599: PUSH
3600: EMPTY
3601: LIST
3602: LIST
3603: LIST
3604: LIST
3605: LIST
3606: LIST
3607: PUSH
3608: LD_INT 33
3610: PUSH
3611: LD_INT 91
3613: PUSH
3614: LD_INT 102
3616: PUSH
3617: LD_INT 4
3619: PUSH
3620: LD_INT 0
3622: PUSH
3623: LD_INT 0
3625: PUSH
3626: EMPTY
3627: LIST
3628: LIST
3629: LIST
3630: LIST
3631: LIST
3632: LIST
3633: PUSH
3634: LD_INT 32
3636: PUSH
3637: LD_INT 80
3639: PUSH
3640: LD_INT 95
3642: PUSH
3643: LD_INT 3
3645: PUSH
3646: LD_INT 0
3648: PUSH
3649: LD_INT 0
3651: PUSH
3652: EMPTY
3653: LIST
3654: LIST
3655: LIST
3656: LIST
3657: LIST
3658: LIST
3659: PUSH
3660: LD_INT 28
3662: PUSH
3663: LD_INT 77
3665: PUSH
3666: LD_INT 105
3668: PUSH
3669: LD_INT 3
3671: PUSH
3672: LD_INT 0
3674: PUSH
3675: LD_INT 0
3677: PUSH
3678: EMPTY
3679: LIST
3680: LIST
3681: LIST
3682: LIST
3683: LIST
3684: LIST
3685: PUSH
3686: LD_INT 28
3688: PUSH
3689: LD_INT 85
3691: PUSH
3692: LD_INT 113
3694: PUSH
3695: LD_INT 3
3697: PUSH
3698: LD_INT 0
3700: PUSH
3701: LD_INT 0
3703: PUSH
3704: EMPTY
3705: LIST
3706: LIST
3707: LIST
3708: LIST
3709: LIST
3710: LIST
3711: PUSH
3712: LD_INT 28
3714: PUSH
3715: LD_INT 55
3717: PUSH
3718: LD_INT 97
3720: PUSH
3721: LD_INT 3
3723: PUSH
3724: LD_INT 0
3726: PUSH
3727: LD_INT 0
3729: PUSH
3730: EMPTY
3731: LIST
3732: LIST
3733: LIST
3734: LIST
3735: LIST
3736: LIST
3737: PUSH
3738: LD_INT 28
3740: PUSH
3741: LD_INT 88
3743: PUSH
3744: LD_INT 128
3746: PUSH
3747: LD_INT 3
3749: PUSH
3750: LD_INT 0
3752: PUSH
3753: LD_INT 0
3755: PUSH
3756: EMPTY
3757: LIST
3758: LIST
3759: LIST
3760: LIST
3761: LIST
3762: LIST
3763: PUSH
3764: LD_INT 32
3766: PUSH
3767: LD_INT 69
3769: PUSH
3770: LD_INT 101
3772: PUSH
3773: LD_INT 2
3775: PUSH
3776: LD_INT 0
3778: PUSH
3779: LD_INT 0
3781: PUSH
3782: EMPTY
3783: LIST
3784: LIST
3785: LIST
3786: LIST
3787: LIST
3788: LIST
3789: PUSH
3790: LD_INT 1
3792: PUSH
3793: LD_INT 34
3795: PUSH
3796: LD_INT 23
3798: PUSH
3799: LD_INT 4
3801: PUSH
3802: LD_INT 0
3804: PUSH
3805: LD_INT 0
3807: PUSH
3808: EMPTY
3809: LIST
3810: LIST
3811: LIST
3812: LIST
3813: LIST
3814: LIST
3815: PUSH
3816: LD_INT 8
3818: PUSH
3819: LD_INT 25
3821: PUSH
3822: LD_INT 4
3824: PUSH
3825: LD_INT 3
3827: PUSH
3828: LD_INT 11
3830: PUSH
3831: LD_INT 10
3833: PUSH
3834: EMPTY
3835: LIST
3836: LIST
3837: LIST
3838: LIST
3839: LIST
3840: LIST
3841: PUSH
3842: LD_INT 8
3844: PUSH
3845: LD_INT 15
3847: PUSH
3848: LD_INT 4
3850: PUSH
3851: LD_INT 2
3853: PUSH
3854: LD_INT 14
3856: PUSH
3857: LD_INT 12
3859: PUSH
3860: EMPTY
3861: LIST
3862: LIST
3863: LIST
3864: LIST
3865: LIST
3866: LIST
3867: PUSH
3868: LD_INT 29
3870: PUSH
3871: LD_INT 55
3873: PUSH
3874: LD_INT 35
3876: PUSH
3877: LD_INT 2
3879: PUSH
3880: LD_INT 0
3882: PUSH
3883: LD_INT 0
3885: PUSH
3886: EMPTY
3887: LIST
3888: LIST
3889: LIST
3890: LIST
3891: LIST
3892: LIST
3893: PUSH
3894: LD_INT 29
3896: PUSH
3897: LD_INT 24
3899: PUSH
3900: LD_INT 44
3902: PUSH
3903: LD_INT 2
3905: PUSH
3906: LD_INT 0
3908: PUSH
3909: LD_INT 0
3911: PUSH
3912: EMPTY
3913: LIST
3914: LIST
3915: LIST
3916: LIST
3917: LIST
3918: LIST
3919: PUSH
3920: LD_INT 34
3922: PUSH
3923: LD_INT 34
3925: PUSH
3926: LD_INT 32
3928: PUSH
3929: LD_INT 4
3931: PUSH
3932: LD_INT 0
3934: PUSH
3935: LD_INT 0
3937: PUSH
3938: EMPTY
3939: LIST
3940: LIST
3941: LIST
3942: LIST
3943: LIST
3944: LIST
3945: PUSH
3946: LD_INT 3
3948: PUSH
3949: LD_INT 14
3951: PUSH
3952: LD_INT 16
3954: PUSH
3955: LD_INT 1
3957: PUSH
3958: LD_INT 0
3960: PUSH
3961: LD_INT 0
3963: PUSH
3964: EMPTY
3965: LIST
3966: LIST
3967: LIST
3968: LIST
3969: LIST
3970: LIST
3971: PUSH
3972: LD_INT 24
3974: PUSH
3975: LD_INT 10
3977: PUSH
3978: LD_INT 16
3980: PUSH
3981: LD_INT 1
3983: PUSH
3984: LD_INT 0
3986: PUSH
3987: LD_INT 0
3989: PUSH
3990: EMPTY
3991: LIST
3992: LIST
3993: LIST
3994: LIST
3995: LIST
3996: LIST
3997: PUSH
3998: LD_INT 21
4000: PUSH
4001: LD_INT 11
4003: PUSH
4004: LD_INT 13
4006: PUSH
4007: LD_INT 2
4009: PUSH
4010: LD_INT 0
4012: PUSH
4013: LD_INT 0
4015: PUSH
4016: EMPTY
4017: LIST
4018: LIST
4019: LIST
4020: LIST
4021: LIST
4022: LIST
4023: PUSH
4024: LD_INT 18
4026: PUSH
4027: LD_INT 14
4029: PUSH
4030: LD_INT 12
4032: PUSH
4033: LD_INT 3
4035: PUSH
4036: LD_INT 0
4038: PUSH
4039: LD_INT 0
4041: PUSH
4042: EMPTY
4043: LIST
4044: LIST
4045: LIST
4046: LIST
4047: LIST
4048: LIST
4049: PUSH
4050: LD_INT 16
4052: PUSH
4053: LD_INT 14
4055: PUSH
4056: LD_INT 19
4058: PUSH
4059: LD_INT 0
4061: PUSH
4062: LD_INT 0
4064: PUSH
4065: LD_INT 0
4067: PUSH
4068: EMPTY
4069: LIST
4070: LIST
4071: LIST
4072: LIST
4073: LIST
4074: LIST
4075: PUSH
4076: LD_INT 17
4078: PUSH
4079: LD_INT 18
4081: PUSH
4082: LD_INT 20
4084: PUSH
4085: LD_INT 5
4087: PUSH
4088: LD_INT 0
4090: PUSH
4091: LD_INT 0
4093: PUSH
4094: EMPTY
4095: LIST
4096: LIST
4097: LIST
4098: LIST
4099: LIST
4100: LIST
4101: PUSH
4102: LD_INT 28
4104: PUSH
4105: LD_INT 10
4107: PUSH
4108: LD_INT 5
4110: PUSH
4111: LD_INT 1
4113: PUSH
4114: LD_INT 0
4116: PUSH
4117: LD_INT 0
4119: PUSH
4120: EMPTY
4121: LIST
4122: LIST
4123: LIST
4124: LIST
4125: LIST
4126: LIST
4127: PUSH
4128: LD_INT 28
4130: PUSH
4131: LD_INT 8
4133: PUSH
4134: LD_INT 8
4136: PUSH
4137: LD_INT 1
4139: PUSH
4140: LD_INT 0
4142: PUSH
4143: LD_INT 0
4145: PUSH
4146: EMPTY
4147: LIST
4148: LIST
4149: LIST
4150: LIST
4151: LIST
4152: LIST
4153: PUSH
4154: LD_INT 26
4156: PUSH
4157: LD_INT 19
4159: PUSH
4160: LD_INT 2
4162: PUSH
4163: LD_INT 1
4165: PUSH
4166: LD_INT 0
4168: PUSH
4169: LD_INT 0
4171: PUSH
4172: EMPTY
4173: LIST
4174: LIST
4175: LIST
4176: LIST
4177: LIST
4178: LIST
4179: PUSH
4180: LD_INT 26
4182: PUSH
4183: LD_INT 30
4185: PUSH
4186: LD_INT 2
4188: PUSH
4189: LD_INT 1
4191: PUSH
4192: LD_INT 0
4194: PUSH
4195: LD_INT 0
4197: PUSH
4198: EMPTY
4199: LIST
4200: LIST
4201: LIST
4202: LIST
4203: LIST
4204: LIST
4205: PUSH
4206: LD_INT 5
4208: PUSH
4209: LD_INT 59
4211: PUSH
4212: LD_INT 20
4214: PUSH
4215: LD_INT 4
4217: PUSH
4218: LD_INT 0
4220: PUSH
4221: LD_INT 0
4223: PUSH
4224: EMPTY
4225: LIST
4226: LIST
4227: LIST
4228: LIST
4229: LIST
4230: LIST
4231: PUSH
4232: LD_INT 32
4234: PUSH
4235: LD_INT 60
4237: PUSH
4238: LD_INT 24
4240: PUSH
4241: LD_INT 4
4243: PUSH
4244: LD_INT 0
4246: PUSH
4247: LD_INT 0
4249: PUSH
4250: EMPTY
4251: LIST
4252: LIST
4253: LIST
4254: LIST
4255: LIST
4256: LIST
4257: PUSH
4258: LD_INT 32
4260: PUSH
4261: LD_INT 61
4263: PUSH
4264: LD_INT 45
4266: PUSH
4267: LD_INT 5
4269: PUSH
4270: LD_INT 0
4272: PUSH
4273: LD_INT 0
4275: PUSH
4276: EMPTY
4277: LIST
4278: LIST
4279: LIST
4280: LIST
4281: LIST
4282: LIST
4283: PUSH
4284: LD_INT 32
4286: PUSH
4287: LD_INT 52
4289: PUSH
4290: LD_INT 51
4292: PUSH
4293: LD_INT 5
4295: PUSH
4296: LD_INT 0
4298: PUSH
4299: LD_INT 0
4301: PUSH
4302: EMPTY
4303: LIST
4304: LIST
4305: LIST
4306: LIST
4307: LIST
4308: LIST
4309: PUSH
4310: LD_INT 33
4312: PUSH
4313: LD_INT 56
4315: PUSH
4316: LD_INT 51
4318: PUSH
4319: LD_INT 5
4321: PUSH
4322: LD_INT 0
4324: PUSH
4325: LD_INT 0
4327: PUSH
4328: EMPTY
4329: LIST
4330: LIST
4331: LIST
4332: LIST
4333: LIST
4334: LIST
4335: PUSH
4336: LD_INT 33
4338: PUSH
4339: LD_INT 62
4341: PUSH
4342: LD_INT 49
4344: PUSH
4345: LD_INT 5
4347: PUSH
4348: LD_INT 0
4350: PUSH
4351: LD_INT 0
4353: PUSH
4354: EMPTY
4355: LIST
4356: LIST
4357: LIST
4358: LIST
4359: LIST
4360: LIST
4361: PUSH
4362: LD_INT 33
4364: PUSH
4365: LD_INT 41
4367: PUSH
4368: LD_INT 47
4370: PUSH
4371: LD_INT 5
4373: PUSH
4374: LD_INT 0
4376: PUSH
4377: LD_INT 0
4379: PUSH
4380: EMPTY
4381: LIST
4382: LIST
4383: LIST
4384: LIST
4385: LIST
4386: LIST
4387: PUSH
4388: LD_INT 33
4390: PUSH
4391: LD_INT 33
4393: PUSH
4394: LD_INT 52
4396: PUSH
4397: LD_INT 5
4399: PUSH
4400: LD_INT 0
4402: PUSH
4403: LD_INT 0
4405: PUSH
4406: EMPTY
4407: LIST
4408: LIST
4409: LIST
4410: LIST
4411: LIST
4412: LIST
4413: PUSH
4414: LD_INT 5
4416: PUSH
4417: LD_INT 31
4419: PUSH
4420: LD_INT 40
4422: PUSH
4423: LD_INT 0
4425: PUSH
4426: LD_INT 0
4428: PUSH
4429: LD_INT 0
4431: PUSH
4432: EMPTY
4433: LIST
4434: LIST
4435: LIST
4436: LIST
4437: LIST
4438: LIST
4439: PUSH
4440: LD_INT 33
4442: PUSH
4443: LD_INT 65
4445: PUSH
4446: LD_INT 37
4448: PUSH
4449: LD_INT 5
4451: PUSH
4452: LD_INT 0
4454: PUSH
4455: LD_INT 0
4457: PUSH
4458: EMPTY
4459: LIST
4460: LIST
4461: LIST
4462: LIST
4463: LIST
4464: LIST
4465: PUSH
4466: LD_INT 33
4468: PUSH
4469: LD_INT 63
4471: PUSH
4472: LD_INT 29
4474: PUSH
4475: LD_INT 4
4477: PUSH
4478: LD_INT 0
4480: PUSH
4481: LD_INT 0
4483: PUSH
4484: EMPTY
4485: LIST
4486: LIST
4487: LIST
4488: LIST
4489: LIST
4490: LIST
4491: PUSH
4492: LD_INT 33
4494: PUSH
4495: LD_INT 54
4497: PUSH
4498: LD_INT 11
4500: PUSH
4501: LD_INT 4
4503: PUSH
4504: LD_INT 0
4506: PUSH
4507: LD_INT 0
4509: PUSH
4510: EMPTY
4511: LIST
4512: LIST
4513: LIST
4514: LIST
4515: LIST
4516: LIST
4517: PUSH
4518: LD_INT 33
4520: PUSH
4521: LD_INT 56
4523: PUSH
4524: LD_INT 15
4526: PUSH
4527: LD_INT 4
4529: PUSH
4530: LD_INT 0
4532: PUSH
4533: LD_INT 0
4535: PUSH
4536: EMPTY
4537: LIST
4538: LIST
4539: LIST
4540: LIST
4541: LIST
4542: LIST
4543: PUSH
4544: LD_INT 33
4546: PUSH
4547: LD_INT 51
4549: PUSH
4550: LD_INT 6
4552: PUSH
4553: LD_INT 4
4555: PUSH
4556: LD_INT 0
4558: PUSH
4559: LD_INT 0
4561: PUSH
4562: EMPTY
4563: LIST
4564: LIST
4565: LIST
4566: LIST
4567: LIST
4568: LIST
4569: PUSH
4570: LD_INT 26
4572: PUSH
4573: LD_INT 39
4575: PUSH
4576: LD_INT 25
4578: PUSH
4579: LD_INT 0
4581: PUSH
4582: LD_INT 0
4584: PUSH
4585: LD_INT 0
4587: PUSH
4588: EMPTY
4589: LIST
4590: LIST
4591: LIST
4592: LIST
4593: LIST
4594: LIST
4595: PUSH
4596: LD_INT 26
4598: PUSH
4599: LD_INT 37
4601: PUSH
4602: LD_INT 21
4604: PUSH
4605: LD_INT 0
4607: PUSH
4608: LD_INT 0
4610: PUSH
4611: LD_INT 0
4613: PUSH
4614: EMPTY
4615: LIST
4616: LIST
4617: LIST
4618: LIST
4619: LIST
4620: LIST
4621: PUSH
4622: LD_INT 32
4624: PUSH
4625: LD_INT 35
4627: PUSH
4628: LD_INT 17
4630: PUSH
4631: LD_INT 4
4633: PUSH
4634: LD_INT 0
4636: PUSH
4637: LD_INT 0
4639: PUSH
4640: EMPTY
4641: LIST
4642: LIST
4643: LIST
4644: LIST
4645: LIST
4646: LIST
4647: PUSH
4648: LD_INT 33
4650: PUSH
4651: LD_INT 35
4653: PUSH
4654: LD_INT 28
4656: PUSH
4657: LD_INT 4
4659: PUSH
4660: LD_INT 0
4662: PUSH
4663: LD_INT 0
4665: PUSH
4666: EMPTY
4667: LIST
4668: LIST
4669: LIST
4670: LIST
4671: LIST
4672: LIST
4673: PUSH
4674: LD_INT 33
4676: PUSH
4677: LD_INT 28
4679: PUSH
4680: LD_INT 46
4682: PUSH
4683: LD_INT 5
4685: PUSH
4686: LD_INT 0
4688: PUSH
4689: LD_INT 0
4691: PUSH
4692: EMPTY
4693: LIST
4694: LIST
4695: LIST
4696: LIST
4697: LIST
4698: LIST
4699: PUSH
4700: LD_INT 33
4702: PUSH
4703: LD_INT 31
4705: PUSH
4706: LD_INT 6
4708: PUSH
4709: LD_INT 4
4711: PUSH
4712: LD_INT 0
4714: PUSH
4715: LD_INT 0
4717: PUSH
4718: EMPTY
4719: LIST
4720: LIST
4721: LIST
4722: LIST
4723: LIST
4724: LIST
4725: PUSH
4726: LD_INT 26
4728: PUSH
4729: LD_INT 54
4731: PUSH
4732: LD_INT 38
4734: PUSH
4735: LD_INT 4
4737: PUSH
4738: LD_INT 0
4740: PUSH
4741: LD_INT 0
4743: PUSH
4744: EMPTY
4745: LIST
4746: LIST
4747: LIST
4748: LIST
4749: LIST
4750: LIST
4751: PUSH
4752: LD_INT 33
4754: PUSH
4755: LD_INT 207
4757: PUSH
4758: LD_INT 167
4760: PUSH
4761: LD_INT 3
4763: PUSH
4764: LD_INT 0
4766: PUSH
4767: LD_INT 0
4769: PUSH
4770: EMPTY
4771: LIST
4772: LIST
4773: LIST
4774: LIST
4775: LIST
4776: LIST
4777: PUSH
4778: LD_INT 30
4780: PUSH
4781: LD_INT 43
4783: PUSH
4784: LD_INT 2
4786: PUSH
4787: LD_INT 4
4789: PUSH
4790: LD_INT 0
4792: PUSH
4793: LD_INT 0
4795: PUSH
4796: EMPTY
4797: LIST
4798: LIST
4799: LIST
4800: LIST
4801: LIST
4802: LIST
4803: PUSH
4804: EMPTY
4805: LIST
4806: LIST
4807: LIST
4808: LIST
4809: LIST
4810: LIST
4811: LIST
4812: LIST
4813: LIST
4814: LIST
4815: LIST
4816: LIST
4817: LIST
4818: LIST
4819: LIST
4820: LIST
4821: LIST
4822: LIST
4823: LIST
4824: LIST
4825: LIST
4826: LIST
4827: LIST
4828: LIST
4829: LIST
4830: LIST
4831: LIST
4832: LIST
4833: LIST
4834: LIST
4835: LIST
4836: LIST
4837: LIST
4838: LIST
4839: LIST
4840: LIST
4841: LIST
4842: LIST
4843: LIST
4844: LIST
4845: LIST
4846: LIST
4847: LIST
4848: LIST
4849: LIST
4850: LIST
4851: LIST
4852: LIST
4853: LIST
4854: LIST
4855: LIST
4856: LIST
4857: LIST
4858: LIST
4859: LIST
4860: LIST
4861: LIST
4862: LIST
4863: LIST
4864: LIST
4865: LIST
4866: LIST
4867: LIST
4868: LIST
4869: LIST
4870: LIST
4871: LIST
4872: LIST
4873: LIST
4874: LIST
4875: LIST
4876: LIST
4877: LIST
4878: LIST
4879: LIST
4880: LIST
4881: LIST
4882: LIST
4883: LIST
4884: LIST
4885: LIST
4886: LIST
4887: LIST
4888: LIST
4889: LIST
4890: ST_TO_ADDR
// for i in tmp do
4891: LD_ADDR_VAR 0 2
4895: PUSH
4896: LD_VAR 0 4
4900: PUSH
4901: FOR_IN
4902: IFFALSE 5133
// begin uc_side := side ;
4904: LD_ADDR_OWVAR 20
4908: PUSH
4909: LD_VAR 0 5
4913: ST_TO_ADDR
// uc_nation := nation_russian ;
4914: LD_ADDR_OWVAR 21
4918: PUSH
4919: LD_INT 3
4921: ST_TO_ADDR
// bc_type := i [ 1 ] ;
4922: LD_ADDR_OWVAR 42
4926: PUSH
4927: LD_VAR 0 2
4931: PUSH
4932: LD_INT 1
4934: ARRAY
4935: ST_TO_ADDR
// bc_level := rand ( 5 , 6 ) ;
4936: LD_ADDR_OWVAR 43
4940: PUSH
4941: LD_INT 5
4943: PPUSH
4944: LD_INT 6
4946: PPUSH
4947: CALL_OW 12
4951: ST_TO_ADDR
// bc_kind1 := i [ 5 ] ;
4952: LD_ADDR_OWVAR 44
4956: PUSH
4957: LD_VAR 0 2
4961: PUSH
4962: LD_INT 5
4964: ARRAY
4965: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
4966: LD_ADDR_OWVAR 45
4970: PUSH
4971: LD_VAR 0 2
4975: PUSH
4976: LD_INT 6
4978: ARRAY
4979: ST_TO_ADDR
// sr := 0 ;
4980: LD_ADDR_VAR 0 6
4984: PUSH
4985: LD_INT 0
4987: ST_TO_ADDR
// if i [ 1 ] = b_oil_mine then
4988: LD_VAR 0 2
4992: PUSH
4993: LD_INT 1
4995: ARRAY
4996: PUSH
4997: LD_INT 29
4999: EQUAL
5000: IFFALSE 5012
// sr := mat_oil else
5002: LD_ADDR_VAR 0 6
5006: PUSH
5007: LD_INT 2
5009: ST_TO_ADDR
5010: GO 5034
// if i [ 1 ] = b_siberite_mine then
5012: LD_VAR 0 2
5016: PUSH
5017: LD_INT 1
5019: ARRAY
5020: PUSH
5021: LD_INT 30
5023: EQUAL
5024: IFFALSE 5034
// sr := mat_siberit ;
5026: LD_ADDR_VAR 0 6
5030: PUSH
5031: LD_INT 3
5033: ST_TO_ADDR
// if sr then
5034: LD_VAR 0 6
5038: IFFALSE 5094
// begin CreateDepositXY ( i [ 2 ] , i [ 3 ] , sr ) ;
5040: LD_VAR 0 2
5044: PUSH
5045: LD_INT 2
5047: ARRAY
5048: PPUSH
5049: LD_VAR 0 2
5053: PUSH
5054: LD_INT 3
5056: ARRAY
5057: PPUSH
5058: LD_VAR 0 6
5062: PPUSH
5063: CALL_OW 62
// SetResourceVisibility ( i [ 2 ] , i [ 3 ] , side ) ;
5067: LD_VAR 0 2
5071: PUSH
5072: LD_INT 2
5074: ARRAY
5075: PPUSH
5076: LD_VAR 0 2
5080: PUSH
5081: LD_INT 3
5083: ARRAY
5084: PPUSH
5085: LD_VAR 0 5
5089: PPUSH
5090: CALL_OW 441
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
5094: LD_ADDR_VAR 0 3
5098: PUSH
5099: LD_VAR 0 2
5103: PUSH
5104: LD_INT 2
5106: ARRAY
5107: PPUSH
5108: LD_VAR 0 2
5112: PUSH
5113: LD_INT 3
5115: ARRAY
5116: PPUSH
5117: LD_VAR 0 2
5121: PUSH
5122: LD_INT 4
5124: ARRAY
5125: PPUSH
5126: CALL_OW 47
5130: ST_TO_ADDR
// end ;
5131: GO 4901
5133: POP
5134: POP
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
5135: LD_ADDR_VAR 0 7
5139: PUSH
5140: LD_INT 22
5142: PUSH
5143: LD_VAR 0 5
5147: PUSH
5148: EMPTY
5149: LIST
5150: LIST
5151: PUSH
5152: LD_INT 30
5154: PUSH
5155: LD_INT 1
5157: PUSH
5158: EMPTY
5159: LIST
5160: LIST
5161: PUSH
5162: EMPTY
5163: LIST
5164: LIST
5165: PPUSH
5166: CALL_OW 69
5170: ST_TO_ADDR
// if not depot then
5171: LD_VAR 0 7
5175: NOT
5176: IFFALSE 5180
// exit ;
5178: GO 5524
// base := PrepareBase ( HexInfo ( 84 , 128 ) , rus1Base , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 3000 , 300 , 100 ] , [ 12 , 6 , 6 , 4 ] ) ;
5180: LD_ADDR_VAR 0 8
5184: PUSH
5185: LD_INT 84
5187: PPUSH
5188: LD_INT 128
5190: PPUSH
5191: CALL_OW 428
5195: PPUSH
5196: LD_INT 15
5198: PPUSH
5199: LD_INT 0
5201: PPUSH
5202: LD_INT 6
5204: PUSH
5205: LD_INT 7
5207: PUSH
5208: LD_INT 8
5210: PUSH
5211: EMPTY
5212: LIST
5213: LIST
5214: LIST
5215: PUSH
5216: LD_OWVAR 67
5220: ARRAY
5221: PPUSH
5222: LD_INT 3000
5224: PUSH
5225: LD_INT 300
5227: PUSH
5228: LD_INT 100
5230: PUSH
5231: EMPTY
5232: LIST
5233: LIST
5234: LIST
5235: PPUSH
5236: LD_INT 12
5238: PUSH
5239: LD_INT 6
5241: PUSH
5242: LD_INT 6
5244: PUSH
5245: LD_INT 4
5247: PUSH
5248: EMPTY
5249: LIST
5250: LIST
5251: LIST
5252: LIST
5253: PPUSH
5254: CALL 27602 0 6
5258: ST_TO_ADDR
// if not base then
5259: LD_VAR 0 8
5263: NOT
5264: IFFALSE 5268
// exit ;
5266: GO 5524
// mc_bases := Replace ( mc_bases , mc_rus_1 , base ) ;
5268: LD_ADDR_EXP 47
5272: PUSH
5273: LD_EXP 47
5277: PPUSH
5278: LD_EXP 7
5282: PPUSH
5283: LD_VAR 0 8
5287: PPUSH
5288: CALL_OW 1
5292: ST_TO_ADDR
// base := PrepareBase ( HexInfo ( 34 , 23 ) , rus2Base , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 20000 , 3000 , 1000 ] , [ 12 , 6 , 6 , 4 ] ) ;
5293: LD_ADDR_VAR 0 8
5297: PUSH
5298: LD_INT 34
5300: PPUSH
5301: LD_INT 23
5303: PPUSH
5304: CALL_OW 428
5308: PPUSH
5309: LD_INT 11
5311: PPUSH
5312: LD_INT 0
5314: PPUSH
5315: LD_INT 6
5317: PUSH
5318: LD_INT 7
5320: PUSH
5321: LD_INT 8
5323: PUSH
5324: EMPTY
5325: LIST
5326: LIST
5327: LIST
5328: PUSH
5329: LD_OWVAR 67
5333: ARRAY
5334: PPUSH
5335: LD_INT 20000
5337: PUSH
5338: LD_INT 3000
5340: PUSH
5341: LD_INT 1000
5343: PUSH
5344: EMPTY
5345: LIST
5346: LIST
5347: LIST
5348: PPUSH
5349: LD_INT 12
5351: PUSH
5352: LD_INT 6
5354: PUSH
5355: LD_INT 6
5357: PUSH
5358: LD_INT 4
5360: PUSH
5361: EMPTY
5362: LIST
5363: LIST
5364: LIST
5365: LIST
5366: PPUSH
5367: CALL 27602 0 6
5371: ST_TO_ADDR
// if not base then
5372: LD_VAR 0 8
5376: NOT
5377: IFFALSE 5381
// exit ;
5379: GO 5524
// mc_bases := Replace ( mc_bases , mc_rus_2 , base ) ;
5381: LD_ADDR_EXP 47
5385: PUSH
5386: LD_EXP 47
5390: PPUSH
5391: LD_EXP 8
5395: PPUSH
5396: LD_VAR 0 8
5400: PPUSH
5401: CALL_OW 1
5405: ST_TO_ADDR
// ruOutpost := PrepareBase ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_depot ] ] ) [ 1 ] , ruOutpostArea , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 500 , 100 , 10 ] , [ [ 6 , 7 , 8 ] [ Difficulty ] , 2 , 0 , 1 ] ) ;
5406: LD_ADDR_EXP 14
5410: PUSH
5411: LD_INT 22
5413: PUSH
5414: LD_INT 3
5416: PUSH
5417: EMPTY
5418: LIST
5419: LIST
5420: PUSH
5421: LD_INT 30
5423: PUSH
5424: LD_INT 0
5426: PUSH
5427: EMPTY
5428: LIST
5429: LIST
5430: PUSH
5431: EMPTY
5432: LIST
5433: LIST
5434: PPUSH
5435: CALL_OW 69
5439: PUSH
5440: LD_INT 1
5442: ARRAY
5443: PPUSH
5444: LD_INT 25
5446: PPUSH
5447: LD_INT 0
5449: PPUSH
5450: LD_INT 6
5452: PUSH
5453: LD_INT 7
5455: PUSH
5456: LD_INT 8
5458: PUSH
5459: EMPTY
5460: LIST
5461: LIST
5462: LIST
5463: PUSH
5464: LD_OWVAR 67
5468: ARRAY
5469: PPUSH
5470: LD_INT 500
5472: PUSH
5473: LD_INT 100
5475: PUSH
5476: LD_INT 10
5478: PUSH
5479: EMPTY
5480: LIST
5481: LIST
5482: LIST
5483: PPUSH
5484: LD_INT 6
5486: PUSH
5487: LD_INT 7
5489: PUSH
5490: LD_INT 8
5492: PUSH
5493: EMPTY
5494: LIST
5495: LIST
5496: LIST
5497: PUSH
5498: LD_OWVAR 67
5502: ARRAY
5503: PUSH
5504: LD_INT 2
5506: PUSH
5507: LD_INT 0
5509: PUSH
5510: LD_INT 1
5512: PUSH
5513: EMPTY
5514: LIST
5515: LIST
5516: LIST
5517: LIST
5518: PPUSH
5519: CALL 27602 0 6
5523: ST_TO_ADDR
// end ;
5524: LD_VAR 0 1
5528: RET
// export function PrepareLegion ; var i , b , veh , tmp , tmp2 , cameras , side , sr , depot , base ; begin
5529: LD_INT 0
5531: PPUSH
5532: PPUSH
5533: PPUSH
5534: PPUSH
5535: PPUSH
5536: PPUSH
5537: PPUSH
5538: PPUSH
5539: PPUSH
5540: PPUSH
5541: PPUSH
// PrepareNature ( 0 , 0 , 6 , 0 , 0 , 0 , 0 , legApe , 0 ) ;
5542: LD_INT 0
5544: PPUSH
5545: LD_INT 0
5547: PPUSH
5548: LD_INT 6
5550: PPUSH
5551: LD_INT 0
5553: PPUSH
5554: LD_INT 0
5556: PPUSH
5557: LD_INT 0
5559: PPUSH
5560: LD_INT 0
5562: PPUSH
5563: LD_INT 8
5565: PPUSH
5566: LD_INT 0
5568: PPUSH
5569: CALL 51984 0 9
// side := 8 ;
5573: LD_ADDR_VAR 0 8
5577: PUSH
5578: LD_INT 8
5580: ST_TO_ADDR
// tmp := AreaToList ( minesArea , 0 ) ;
5581: LD_ADDR_VAR 0 5
5585: PUSH
5586: LD_INT 20
5588: PPUSH
5589: LD_INT 0
5591: PPUSH
5592: CALL_OW 517
5596: ST_TO_ADDR
// if Difficulty > 2 then
5597: LD_OWVAR 67
5601: PUSH
5602: LD_INT 2
5604: GREATER
5605: IFFALSE 5749
// begin tmp2 := AreaToList ( minesArea2 , 0 ) ;
5607: LD_ADDR_VAR 0 6
5611: PUSH
5612: LD_INT 27
5614: PPUSH
5615: LD_INT 0
5617: PPUSH
5618: CALL_OW 517
5622: ST_TO_ADDR
// for i = 1 to tmp2 [ 1 ] do
5623: LD_ADDR_VAR 0 2
5627: PUSH
5628: DOUBLE
5629: LD_INT 1
5631: DEC
5632: ST_TO_ADDR
5633: LD_VAR 0 6
5637: PUSH
5638: LD_INT 1
5640: ARRAY
5641: PUSH
5642: FOR_TO
5643: IFFALSE 5747
// begin tmp := ReplaceIn ( tmp , [ 1 , tmp [ 1 ] + 1 ] , tmp2 [ 1 ] [ i ] ) ;
5645: LD_ADDR_VAR 0 5
5649: PUSH
5650: LD_VAR 0 5
5654: PPUSH
5655: LD_INT 1
5657: PUSH
5658: LD_VAR 0 5
5662: PUSH
5663: LD_INT 1
5665: ARRAY
5666: PUSH
5667: LD_INT 1
5669: PLUS
5670: PUSH
5671: EMPTY
5672: LIST
5673: LIST
5674: PPUSH
5675: LD_VAR 0 6
5679: PUSH
5680: LD_INT 1
5682: ARRAY
5683: PUSH
5684: LD_VAR 0 2
5688: ARRAY
5689: PPUSH
5690: CALL 24315 0 3
5694: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 2 , tmp [ 2 ] + 1 ] , tmp2 [ 2 ] [ i ] ) ;
5695: LD_ADDR_VAR 0 5
5699: PUSH
5700: LD_VAR 0 5
5704: PPUSH
5705: LD_INT 2
5707: PUSH
5708: LD_VAR 0 5
5712: PUSH
5713: LD_INT 2
5715: ARRAY
5716: PUSH
5717: LD_INT 1
5719: PLUS
5720: PUSH
5721: EMPTY
5722: LIST
5723: LIST
5724: PPUSH
5725: LD_VAR 0 6
5729: PUSH
5730: LD_INT 2
5732: ARRAY
5733: PUSH
5734: LD_VAR 0 2
5738: ARRAY
5739: PPUSH
5740: CALL 24315 0 3
5744: ST_TO_ADDR
// end ;
5745: GO 5642
5747: POP
5748: POP
// end ; if tmp then
5749: LD_VAR 0 5
5753: IFFALSE 5881
// begin for i = 1 to tmp [ 1 ] do
5755: LD_ADDR_VAR 0 2
5759: PUSH
5760: DOUBLE
5761: LD_INT 1
5763: DEC
5764: ST_TO_ADDR
5765: LD_VAR 0 5
5769: PUSH
5770: LD_INT 1
5772: ARRAY
5773: PUSH
5774: FOR_TO
5775: IFFALSE 5879
// begin PlaceMine ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side , 0 ) ;
5777: LD_VAR 0 5
5781: PUSH
5782: LD_INT 1
5784: ARRAY
5785: PUSH
5786: LD_VAR 0 2
5790: ARRAY
5791: PPUSH
5792: LD_VAR 0 5
5796: PUSH
5797: LD_INT 2
5799: ARRAY
5800: PUSH
5801: LD_VAR 0 2
5805: ARRAY
5806: PPUSH
5807: LD_VAR 0 8
5811: PPUSH
5812: LD_INT 0
5814: PPUSH
5815: CALL_OW 454
// staticMines := Insert ( staticMines , staticMines + 1 , [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ) ;
5819: LD_ADDR_EXP 16
5823: PUSH
5824: LD_EXP 16
5828: PPUSH
5829: LD_EXP 16
5833: PUSH
5834: LD_INT 1
5836: PLUS
5837: PPUSH
5838: LD_VAR 0 5
5842: PUSH
5843: LD_INT 1
5845: ARRAY
5846: PUSH
5847: LD_VAR 0 2
5851: ARRAY
5852: PUSH
5853: LD_VAR 0 5
5857: PUSH
5858: LD_INT 2
5860: ARRAY
5861: PUSH
5862: LD_VAR 0 2
5866: ARRAY
5867: PUSH
5868: EMPTY
5869: LIST
5870: LIST
5871: PPUSH
5872: CALL_OW 2
5876: ST_TO_ADDR
// end ;
5877: GO 5774
5879: POP
5880: POP
// end ; cameras := [ [ 165 , 156 ] , [ 143 , 145 ] , [ 152 , 165 ] , [ 123 , 153 ] , [ 161 , 215 ] , [ 172 , 100 ] , [ 148 , 83 ] , [ 122 , 68 ] , [ 105 , 74 ] , [ 113 , 97 ] ] ;
5881: LD_ADDR_VAR 0 7
5885: PUSH
5886: LD_INT 165
5888: PUSH
5889: LD_INT 156
5891: PUSH
5892: EMPTY
5893: LIST
5894: LIST
5895: PUSH
5896: LD_INT 143
5898: PUSH
5899: LD_INT 145
5901: PUSH
5902: EMPTY
5903: LIST
5904: LIST
5905: PUSH
5906: LD_INT 152
5908: PUSH
5909: LD_INT 165
5911: PUSH
5912: EMPTY
5913: LIST
5914: LIST
5915: PUSH
5916: LD_INT 123
5918: PUSH
5919: LD_INT 153
5921: PUSH
5922: EMPTY
5923: LIST
5924: LIST
5925: PUSH
5926: LD_INT 161
5928: PUSH
5929: LD_INT 215
5931: PUSH
5932: EMPTY
5933: LIST
5934: LIST
5935: PUSH
5936: LD_INT 172
5938: PUSH
5939: LD_INT 100
5941: PUSH
5942: EMPTY
5943: LIST
5944: LIST
5945: PUSH
5946: LD_INT 148
5948: PUSH
5949: LD_INT 83
5951: PUSH
5952: EMPTY
5953: LIST
5954: LIST
5955: PUSH
5956: LD_INT 122
5958: PUSH
5959: LD_INT 68
5961: PUSH
5962: EMPTY
5963: LIST
5964: LIST
5965: PUSH
5966: LD_INT 105
5968: PUSH
5969: LD_INT 74
5971: PUSH
5972: EMPTY
5973: LIST
5974: LIST
5975: PUSH
5976: LD_INT 113
5978: PUSH
5979: LD_INT 97
5981: PUSH
5982: EMPTY
5983: LIST
5984: LIST
5985: PUSH
5986: EMPTY
5987: LIST
5988: LIST
5989: LIST
5990: LIST
5991: LIST
5992: LIST
5993: LIST
5994: LIST
5995: LIST
5996: LIST
5997: ST_TO_ADDR
// for i in cameras do
5998: LD_ADDR_VAR 0 2
6002: PUSH
6003: LD_VAR 0 7
6007: PUSH
6008: FOR_IN
6009: IFFALSE 6040
// HiddenCamera ( i [ 1 ] , i [ 2 ] , side ) ;
6011: LD_VAR 0 2
6015: PUSH
6016: LD_INT 1
6018: ARRAY
6019: PPUSH
6020: LD_VAR 0 2
6024: PUSH
6025: LD_INT 2
6027: ARRAY
6028: PPUSH
6029: LD_VAR 0 8
6033: PPUSH
6034: CALL_OW 244
6038: GO 6008
6040: POP
6041: POP
// tmp := [ [ 1 , 144 , 110 , 1 , 0 , 0 ] , [ 3 , 151 , 118 , 0 , 0 , 0 ] , [ 8 , 158 , 110 , 4 , 10 , 15 ] , [ 23 , 154 , 121 , 5 , 0 , 0 ] , [ 22 , 155 , 118 , 4 , 0 , 0 ] , [ 21 , 151 , 122 , 0 , 0 , 0 ] , [ 18 , 148 , 118 , 1 , 0 , 0 ] , [ 17 , 147 , 114 , 2 , 0 , 0 ] , [ 29 , 163 , 120 , 5 , 0 , 0 ] , [ 27 , 137 , 116 , 3 , 0 , 0 ] , [ 27 , 133 , 111 , 1 , 0 , 0 ] , [ 27 , 132 , 106 , 4 , 0 , 0 ] , [ 26 , 137 , 111 , 0 , 0 , 0 ] , [ 8 , 141 , 117 , 1 , 13 , 11 ] , [ 30 , 140 , 128 , 1 , 0 , 0 ] , [ 5 , 146 , 96 , 3 , 0 , 0 ] , [ 32 , 150 , 98 , 3 , 0 , 0 ] , [ 32 , 142 , 95 , 3 , 0 , 0 ] , [ 32 , 159 , 104 , 3 , 0 , 0 ] , [ 32 , 133 , 95 , 3 , 0 , 0 ] , [ 32 , 131 , 102 , 2 , 0 , 0 ] , [ 32 , 164 , 144 , 0 , 0 , 0 ] , [ 32 , 146 , 139 , 0 , 0 , 0 ] , [ 26 , 143 , 122 , 4 , 0 , 0 ] , [ 26 , 164 , 116 , 2 , 0 , 0 ] , ] ;
6042: LD_ADDR_VAR 0 5
6046: PUSH
6047: LD_INT 1
6049: PUSH
6050: LD_INT 144
6052: PUSH
6053: LD_INT 110
6055: PUSH
6056: LD_INT 1
6058: PUSH
6059: LD_INT 0
6061: PUSH
6062: LD_INT 0
6064: PUSH
6065: EMPTY
6066: LIST
6067: LIST
6068: LIST
6069: LIST
6070: LIST
6071: LIST
6072: PUSH
6073: LD_INT 3
6075: PUSH
6076: LD_INT 151
6078: PUSH
6079: LD_INT 118
6081: PUSH
6082: LD_INT 0
6084: PUSH
6085: LD_INT 0
6087: PUSH
6088: LD_INT 0
6090: PUSH
6091: EMPTY
6092: LIST
6093: LIST
6094: LIST
6095: LIST
6096: LIST
6097: LIST
6098: PUSH
6099: LD_INT 8
6101: PUSH
6102: LD_INT 158
6104: PUSH
6105: LD_INT 110
6107: PUSH
6108: LD_INT 4
6110: PUSH
6111: LD_INT 10
6113: PUSH
6114: LD_INT 15
6116: PUSH
6117: EMPTY
6118: LIST
6119: LIST
6120: LIST
6121: LIST
6122: LIST
6123: LIST
6124: PUSH
6125: LD_INT 23
6127: PUSH
6128: LD_INT 154
6130: PUSH
6131: LD_INT 121
6133: PUSH
6134: LD_INT 5
6136: PUSH
6137: LD_INT 0
6139: PUSH
6140: LD_INT 0
6142: PUSH
6143: EMPTY
6144: LIST
6145: LIST
6146: LIST
6147: LIST
6148: LIST
6149: LIST
6150: PUSH
6151: LD_INT 22
6153: PUSH
6154: LD_INT 155
6156: PUSH
6157: LD_INT 118
6159: PUSH
6160: LD_INT 4
6162: PUSH
6163: LD_INT 0
6165: PUSH
6166: LD_INT 0
6168: PUSH
6169: EMPTY
6170: LIST
6171: LIST
6172: LIST
6173: LIST
6174: LIST
6175: LIST
6176: PUSH
6177: LD_INT 21
6179: PUSH
6180: LD_INT 151
6182: PUSH
6183: LD_INT 122
6185: PUSH
6186: LD_INT 0
6188: PUSH
6189: LD_INT 0
6191: PUSH
6192: LD_INT 0
6194: PUSH
6195: EMPTY
6196: LIST
6197: LIST
6198: LIST
6199: LIST
6200: LIST
6201: LIST
6202: PUSH
6203: LD_INT 18
6205: PUSH
6206: LD_INT 148
6208: PUSH
6209: LD_INT 118
6211: PUSH
6212: LD_INT 1
6214: PUSH
6215: LD_INT 0
6217: PUSH
6218: LD_INT 0
6220: PUSH
6221: EMPTY
6222: LIST
6223: LIST
6224: LIST
6225: LIST
6226: LIST
6227: LIST
6228: PUSH
6229: LD_INT 17
6231: PUSH
6232: LD_INT 147
6234: PUSH
6235: LD_INT 114
6237: PUSH
6238: LD_INT 2
6240: PUSH
6241: LD_INT 0
6243: PUSH
6244: LD_INT 0
6246: PUSH
6247: EMPTY
6248: LIST
6249: LIST
6250: LIST
6251: LIST
6252: LIST
6253: LIST
6254: PUSH
6255: LD_INT 29
6257: PUSH
6258: LD_INT 163
6260: PUSH
6261: LD_INT 120
6263: PUSH
6264: LD_INT 5
6266: PUSH
6267: LD_INT 0
6269: PUSH
6270: LD_INT 0
6272: PUSH
6273: EMPTY
6274: LIST
6275: LIST
6276: LIST
6277: LIST
6278: LIST
6279: LIST
6280: PUSH
6281: LD_INT 27
6283: PUSH
6284: LD_INT 137
6286: PUSH
6287: LD_INT 116
6289: PUSH
6290: LD_INT 3
6292: PUSH
6293: LD_INT 0
6295: PUSH
6296: LD_INT 0
6298: PUSH
6299: EMPTY
6300: LIST
6301: LIST
6302: LIST
6303: LIST
6304: LIST
6305: LIST
6306: PUSH
6307: LD_INT 27
6309: PUSH
6310: LD_INT 133
6312: PUSH
6313: LD_INT 111
6315: PUSH
6316: LD_INT 1
6318: PUSH
6319: LD_INT 0
6321: PUSH
6322: LD_INT 0
6324: PUSH
6325: EMPTY
6326: LIST
6327: LIST
6328: LIST
6329: LIST
6330: LIST
6331: LIST
6332: PUSH
6333: LD_INT 27
6335: PUSH
6336: LD_INT 132
6338: PUSH
6339: LD_INT 106
6341: PUSH
6342: LD_INT 4
6344: PUSH
6345: LD_INT 0
6347: PUSH
6348: LD_INT 0
6350: PUSH
6351: EMPTY
6352: LIST
6353: LIST
6354: LIST
6355: LIST
6356: LIST
6357: LIST
6358: PUSH
6359: LD_INT 26
6361: PUSH
6362: LD_INT 137
6364: PUSH
6365: LD_INT 111
6367: PUSH
6368: LD_INT 0
6370: PUSH
6371: LD_INT 0
6373: PUSH
6374: LD_INT 0
6376: PUSH
6377: EMPTY
6378: LIST
6379: LIST
6380: LIST
6381: LIST
6382: LIST
6383: LIST
6384: PUSH
6385: LD_INT 8
6387: PUSH
6388: LD_INT 141
6390: PUSH
6391: LD_INT 117
6393: PUSH
6394: LD_INT 1
6396: PUSH
6397: LD_INT 13
6399: PUSH
6400: LD_INT 11
6402: PUSH
6403: EMPTY
6404: LIST
6405: LIST
6406: LIST
6407: LIST
6408: LIST
6409: LIST
6410: PUSH
6411: LD_INT 30
6413: PUSH
6414: LD_INT 140
6416: PUSH
6417: LD_INT 128
6419: PUSH
6420: LD_INT 1
6422: PUSH
6423: LD_INT 0
6425: PUSH
6426: LD_INT 0
6428: PUSH
6429: EMPTY
6430: LIST
6431: LIST
6432: LIST
6433: LIST
6434: LIST
6435: LIST
6436: PUSH
6437: LD_INT 5
6439: PUSH
6440: LD_INT 146
6442: PUSH
6443: LD_INT 96
6445: PUSH
6446: LD_INT 3
6448: PUSH
6449: LD_INT 0
6451: PUSH
6452: LD_INT 0
6454: PUSH
6455: EMPTY
6456: LIST
6457: LIST
6458: LIST
6459: LIST
6460: LIST
6461: LIST
6462: PUSH
6463: LD_INT 32
6465: PUSH
6466: LD_INT 150
6468: PUSH
6469: LD_INT 98
6471: PUSH
6472: LD_INT 3
6474: PUSH
6475: LD_INT 0
6477: PUSH
6478: LD_INT 0
6480: PUSH
6481: EMPTY
6482: LIST
6483: LIST
6484: LIST
6485: LIST
6486: LIST
6487: LIST
6488: PUSH
6489: LD_INT 32
6491: PUSH
6492: LD_INT 142
6494: PUSH
6495: LD_INT 95
6497: PUSH
6498: LD_INT 3
6500: PUSH
6501: LD_INT 0
6503: PUSH
6504: LD_INT 0
6506: PUSH
6507: EMPTY
6508: LIST
6509: LIST
6510: LIST
6511: LIST
6512: LIST
6513: LIST
6514: PUSH
6515: LD_INT 32
6517: PUSH
6518: LD_INT 159
6520: PUSH
6521: LD_INT 104
6523: PUSH
6524: LD_INT 3
6526: PUSH
6527: LD_INT 0
6529: PUSH
6530: LD_INT 0
6532: PUSH
6533: EMPTY
6534: LIST
6535: LIST
6536: LIST
6537: LIST
6538: LIST
6539: LIST
6540: PUSH
6541: LD_INT 32
6543: PUSH
6544: LD_INT 133
6546: PUSH
6547: LD_INT 95
6549: PUSH
6550: LD_INT 3
6552: PUSH
6553: LD_INT 0
6555: PUSH
6556: LD_INT 0
6558: PUSH
6559: EMPTY
6560: LIST
6561: LIST
6562: LIST
6563: LIST
6564: LIST
6565: LIST
6566: PUSH
6567: LD_INT 32
6569: PUSH
6570: LD_INT 131
6572: PUSH
6573: LD_INT 102
6575: PUSH
6576: LD_INT 2
6578: PUSH
6579: LD_INT 0
6581: PUSH
6582: LD_INT 0
6584: PUSH
6585: EMPTY
6586: LIST
6587: LIST
6588: LIST
6589: LIST
6590: LIST
6591: LIST
6592: PUSH
6593: LD_INT 32
6595: PUSH
6596: LD_INT 164
6598: PUSH
6599: LD_INT 144
6601: PUSH
6602: LD_INT 0
6604: PUSH
6605: LD_INT 0
6607: PUSH
6608: LD_INT 0
6610: PUSH
6611: EMPTY
6612: LIST
6613: LIST
6614: LIST
6615: LIST
6616: LIST
6617: LIST
6618: PUSH
6619: LD_INT 32
6621: PUSH
6622: LD_INT 146
6624: PUSH
6625: LD_INT 139
6627: PUSH
6628: LD_INT 0
6630: PUSH
6631: LD_INT 0
6633: PUSH
6634: LD_INT 0
6636: PUSH
6637: EMPTY
6638: LIST
6639: LIST
6640: LIST
6641: LIST
6642: LIST
6643: LIST
6644: PUSH
6645: LD_INT 26
6647: PUSH
6648: LD_INT 143
6650: PUSH
6651: LD_INT 122
6653: PUSH
6654: LD_INT 4
6656: PUSH
6657: LD_INT 0
6659: PUSH
6660: LD_INT 0
6662: PUSH
6663: EMPTY
6664: LIST
6665: LIST
6666: LIST
6667: LIST
6668: LIST
6669: LIST
6670: PUSH
6671: LD_INT 26
6673: PUSH
6674: LD_INT 164
6676: PUSH
6677: LD_INT 116
6679: PUSH
6680: LD_INT 2
6682: PUSH
6683: LD_INT 0
6685: PUSH
6686: LD_INT 0
6688: PUSH
6689: EMPTY
6690: LIST
6691: LIST
6692: LIST
6693: LIST
6694: LIST
6695: LIST
6696: PUSH
6697: EMPTY
6698: LIST
6699: LIST
6700: LIST
6701: LIST
6702: LIST
6703: LIST
6704: LIST
6705: LIST
6706: LIST
6707: LIST
6708: LIST
6709: LIST
6710: LIST
6711: LIST
6712: LIST
6713: LIST
6714: LIST
6715: LIST
6716: LIST
6717: LIST
6718: LIST
6719: LIST
6720: LIST
6721: LIST
6722: LIST
6723: ST_TO_ADDR
// for i in tmp do
6724: LD_ADDR_VAR 0 2
6728: PUSH
6729: LD_VAR 0 5
6733: PUSH
6734: FOR_IN
6735: IFFALSE 6966
// begin uc_side := side ;
6737: LD_ADDR_OWVAR 20
6741: PUSH
6742: LD_VAR 0 8
6746: ST_TO_ADDR
// uc_nation := nation_arabian ;
6747: LD_ADDR_OWVAR 21
6751: PUSH
6752: LD_INT 2
6754: ST_TO_ADDR
// bc_type := i [ 1 ] ;
6755: LD_ADDR_OWVAR 42
6759: PUSH
6760: LD_VAR 0 2
6764: PUSH
6765: LD_INT 1
6767: ARRAY
6768: ST_TO_ADDR
// bc_level := rand ( 5 , 6 ) ;
6769: LD_ADDR_OWVAR 43
6773: PUSH
6774: LD_INT 5
6776: PPUSH
6777: LD_INT 6
6779: PPUSH
6780: CALL_OW 12
6784: ST_TO_ADDR
// bc_kind1 := i [ 5 ] ;
6785: LD_ADDR_OWVAR 44
6789: PUSH
6790: LD_VAR 0 2
6794: PUSH
6795: LD_INT 5
6797: ARRAY
6798: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
6799: LD_ADDR_OWVAR 45
6803: PUSH
6804: LD_VAR 0 2
6808: PUSH
6809: LD_INT 6
6811: ARRAY
6812: ST_TO_ADDR
// sr := 0 ;
6813: LD_ADDR_VAR 0 9
6817: PUSH
6818: LD_INT 0
6820: ST_TO_ADDR
// if i [ 1 ] = b_oil_mine then
6821: LD_VAR 0 2
6825: PUSH
6826: LD_INT 1
6828: ARRAY
6829: PUSH
6830: LD_INT 29
6832: EQUAL
6833: IFFALSE 6845
// sr := mat_oil else
6835: LD_ADDR_VAR 0 9
6839: PUSH
6840: LD_INT 2
6842: ST_TO_ADDR
6843: GO 6867
// if i [ 1 ] = b_siberite_mine then
6845: LD_VAR 0 2
6849: PUSH
6850: LD_INT 1
6852: ARRAY
6853: PUSH
6854: LD_INT 30
6856: EQUAL
6857: IFFALSE 6867
// sr := mat_siberit ;
6859: LD_ADDR_VAR 0 9
6863: PUSH
6864: LD_INT 3
6866: ST_TO_ADDR
// if sr then
6867: LD_VAR 0 9
6871: IFFALSE 6927
// begin CreateDepositXY ( i [ 2 ] , i [ 3 ] , sr ) ;
6873: LD_VAR 0 2
6877: PUSH
6878: LD_INT 2
6880: ARRAY
6881: PPUSH
6882: LD_VAR 0 2
6886: PUSH
6887: LD_INT 3
6889: ARRAY
6890: PPUSH
6891: LD_VAR 0 9
6895: PPUSH
6896: CALL_OW 62
// SetResourceVisibility ( i [ 2 ] , i [ 3 ] , side ) ;
6900: LD_VAR 0 2
6904: PUSH
6905: LD_INT 2
6907: ARRAY
6908: PPUSH
6909: LD_VAR 0 2
6913: PUSH
6914: LD_INT 3
6916: ARRAY
6917: PPUSH
6918: LD_VAR 0 8
6922: PPUSH
6923: CALL_OW 441
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
6927: LD_ADDR_VAR 0 3
6931: PUSH
6932: LD_VAR 0 2
6936: PUSH
6937: LD_INT 2
6939: ARRAY
6940: PPUSH
6941: LD_VAR 0 2
6945: PUSH
6946: LD_INT 3
6948: ARRAY
6949: PPUSH
6950: LD_VAR 0 2
6954: PUSH
6955: LD_INT 4
6957: ARRAY
6958: PPUSH
6959: CALL_OW 47
6963: ST_TO_ADDR
// end ;
6964: GO 6734
6966: POP
6967: POP
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
6968: LD_ADDR_VAR 0 10
6972: PUSH
6973: LD_INT 22
6975: PUSH
6976: LD_VAR 0 8
6980: PUSH
6981: EMPTY
6982: LIST
6983: LIST
6984: PUSH
6985: LD_INT 30
6987: PUSH
6988: LD_INT 1
6990: PUSH
6991: EMPTY
6992: LIST
6993: LIST
6994: PUSH
6995: EMPTY
6996: LIST
6997: LIST
6998: PPUSH
6999: CALL_OW 69
7003: ST_TO_ADDR
// if not depot then
7004: LD_VAR 0 10
7008: NOT
7009: IFFALSE 7013
// exit ;
7011: GO 7259
// base := PrepareBase ( depot [ 1 ] , legBase , 0 , [ 7 , 8 , 10 ] [ Difficulty ] , [ 3000 , 300 , 100 ] , [ 14 , 6 , 6 , 5 ] ) ;
7013: LD_ADDR_VAR 0 11
7017: PUSH
7018: LD_VAR 0 10
7022: PUSH
7023: LD_INT 1
7025: ARRAY
7026: PPUSH
7027: LD_INT 6
7029: PPUSH
7030: LD_INT 0
7032: PPUSH
7033: LD_INT 7
7035: PUSH
7036: LD_INT 8
7038: PUSH
7039: LD_INT 10
7041: PUSH
7042: EMPTY
7043: LIST
7044: LIST
7045: LIST
7046: PUSH
7047: LD_OWVAR 67
7051: ARRAY
7052: PPUSH
7053: LD_INT 3000
7055: PUSH
7056: LD_INT 300
7058: PUSH
7059: LD_INT 100
7061: PUSH
7062: EMPTY
7063: LIST
7064: LIST
7065: LIST
7066: PPUSH
7067: LD_INT 14
7069: PUSH
7070: LD_INT 6
7072: PUSH
7073: LD_INT 6
7075: PUSH
7076: LD_INT 5
7078: PUSH
7079: EMPTY
7080: LIST
7081: LIST
7082: LIST
7083: LIST
7084: PPUSH
7085: CALL 27602 0 6
7089: ST_TO_ADDR
// if not base then
7090: LD_VAR 0 11
7094: NOT
7095: IFFALSE 7099
// exit ;
7097: GO 7259
// if Difficulty > 1 then
7099: LD_OWVAR 67
7103: PUSH
7104: LD_INT 1
7106: GREATER
7107: IFFALSE 7180
// begin InitHc ;
7109: CALL_OW 19
// PrepareHuman ( sex_male , class_sniper , [ 5 , 8 ] [ Difficulty - 1 ] ) ;
7113: LD_INT 1
7115: PPUSH
7116: LD_INT 5
7118: PPUSH
7119: LD_INT 5
7121: PUSH
7122: LD_INT 8
7124: PUSH
7125: EMPTY
7126: LIST
7127: LIST
7128: PUSH
7129: LD_OWVAR 67
7133: PUSH
7134: LD_INT 1
7136: MINUS
7137: ARRAY
7138: PPUSH
7139: CALL_OW 380
// for i = 1 to Difficulty do
7143: LD_ADDR_VAR 0 2
7147: PUSH
7148: DOUBLE
7149: LD_INT 1
7151: DEC
7152: ST_TO_ADDR
7153: LD_OWVAR 67
7157: PUSH
7158: FOR_TO
7159: IFFALSE 7178
// PlaceUnitArea ( CreateHuman , sniperGuardArea , false ) ;
7161: CALL_OW 44
7165: PPUSH
7166: LD_INT 24
7168: PPUSH
7169: LD_INT 0
7171: PPUSH
7172: CALL_OW 49
7176: GO 7158
7178: POP
7179: POP
// end ; mc_bases := Replace ( mc_bases , mc_leg , base ) ;
7180: LD_ADDR_EXP 47
7184: PUSH
7185: LD_EXP 47
7189: PPUSH
7190: LD_EXP 6
7194: PPUSH
7195: LD_VAR 0 11
7199: PPUSH
7200: CALL_OW 1
7204: ST_TO_ADDR
// hc_gallery := ru ;
7205: LD_ADDR_OWVAR 33
7209: PUSH
7210: LD_STRING ru
7212: ST_TO_ADDR
// hc_face_number := 44 ;
7213: LD_ADDR_OWVAR 34
7217: PUSH
7218: LD_INT 44
7220: ST_TO_ADDR
// hc_name := Robert Farmer ;
7221: LD_ADDR_OWVAR 26
7225: PUSH
7226: LD_STRING Robert Farmer
7228: ST_TO_ADDR
// hc_sex := sex_male ;
7229: LD_ADDR_OWVAR 27
7233: PUSH
7234: LD_INT 1
7236: ST_TO_ADDR
// hc_class := 1 ;
7237: LD_ADDR_OWVAR 28
7241: PUSH
7242: LD_INT 1
7244: ST_TO_ADDR
// Farmer := CreateHuman ;
7245: LD_ADDR_EXP 13
7249: PUSH
7250: CALL_OW 44
7254: ST_TO_ADDR
// InitHc ;
7255: CALL_OW 19
// end ;
7259: LD_VAR 0 1
7263: RET
// export function PrepareAmericans ; var i , b , tmp , side , sr , base , depot ; begin
7264: LD_INT 0
7266: PPUSH
7267: PPUSH
7268: PPUSH
7269: PPUSH
7270: PPUSH
7271: PPUSH
7272: PPUSH
7273: PPUSH
// PrepareNature ( 0 , 0 , 4 , 0 , 0 , 0 , 0 , amerApe , 0 ) ;
7274: LD_INT 0
7276: PPUSH
7277: LD_INT 0
7279: PPUSH
7280: LD_INT 4
7282: PPUSH
7283: LD_INT 0
7285: PPUSH
7286: LD_INT 0
7288: PPUSH
7289: LD_INT 0
7291: PPUSH
7292: LD_INT 0
7294: PPUSH
7295: LD_INT 10
7297: PPUSH
7298: LD_INT 0
7300: PPUSH
7301: CALL 51984 0 9
// side := 4 ;
7305: LD_ADDR_VAR 0 5
7309: PUSH
7310: LD_INT 4
7312: ST_TO_ADDR
// tmp := [ [ 1 , 144 , 18 , 4 , 0 , 0 ] , [ 3 , 137 , 8 , 4 , 0 , 0 ] , [ 22 , 141 , 8 , 4 , 0 , 0 ] , [ 25 , 137 , 5 , 3 , 0 , 0 ] , [ 18 , 137 , 12 , 0 , 0 , 0 ] , [ 17 , 133 , 4 , 2 , 0 , 0 ] , [ 16 , 140 , 11 , 5 , 0 , 0 ] , [ 8 , 149 , 26 , 4 , 10 , 15 ] , [ 8 , 142 , 26 , 1 , 11 , 12 ] , [ 27 , 153 , 32 , 5 , 0 , 0 ] , [ 27 , 145 , 32 , 3 , 0 , 0 ] , [ 27 , 138 , 2 , 4 , 0 , 0 ] , [ 27 , 144 , 13 , 0 , 0 , 0 ] , [ 26 , 124 , 2 , 4 , 0 , 0 ] , [ 26 , 121 , 2 , 2 , 0 , 0 ] , [ 26 , 118 , 2 , 1 , 0 , 0 ] , [ 29 , 159 , 47 , 2 , 0 , 0 ] , [ 32 , 146 , 41 , 0 , 0 , 0 ] , [ 33 , 136 , 37 , 0 , 0 , 0 ] , [ 33 , 132 , 34 , 0 , 0 , 0 ] , [ 36 , 124 , 7 , 1 , 0 , 0 ] , [ 5 , 124 , 19 , 0 , 0 , 0 ] , [ 32 , 127 , 23 , 0 , 0 , 0 ] ] ;
7313: LD_ADDR_VAR 0 4
7317: PUSH
7318: LD_INT 1
7320: PUSH
7321: LD_INT 144
7323: PUSH
7324: LD_INT 18
7326: PUSH
7327: LD_INT 4
7329: PUSH
7330: LD_INT 0
7332: PUSH
7333: LD_INT 0
7335: PUSH
7336: EMPTY
7337: LIST
7338: LIST
7339: LIST
7340: LIST
7341: LIST
7342: LIST
7343: PUSH
7344: LD_INT 3
7346: PUSH
7347: LD_INT 137
7349: PUSH
7350: LD_INT 8
7352: PUSH
7353: LD_INT 4
7355: PUSH
7356: LD_INT 0
7358: PUSH
7359: LD_INT 0
7361: PUSH
7362: EMPTY
7363: LIST
7364: LIST
7365: LIST
7366: LIST
7367: LIST
7368: LIST
7369: PUSH
7370: LD_INT 22
7372: PUSH
7373: LD_INT 141
7375: PUSH
7376: LD_INT 8
7378: PUSH
7379: LD_INT 4
7381: PUSH
7382: LD_INT 0
7384: PUSH
7385: LD_INT 0
7387: PUSH
7388: EMPTY
7389: LIST
7390: LIST
7391: LIST
7392: LIST
7393: LIST
7394: LIST
7395: PUSH
7396: LD_INT 25
7398: PUSH
7399: LD_INT 137
7401: PUSH
7402: LD_INT 5
7404: PUSH
7405: LD_INT 3
7407: PUSH
7408: LD_INT 0
7410: PUSH
7411: LD_INT 0
7413: PUSH
7414: EMPTY
7415: LIST
7416: LIST
7417: LIST
7418: LIST
7419: LIST
7420: LIST
7421: PUSH
7422: LD_INT 18
7424: PUSH
7425: LD_INT 137
7427: PUSH
7428: LD_INT 12
7430: PUSH
7431: LD_INT 0
7433: PUSH
7434: LD_INT 0
7436: PUSH
7437: LD_INT 0
7439: PUSH
7440: EMPTY
7441: LIST
7442: LIST
7443: LIST
7444: LIST
7445: LIST
7446: LIST
7447: PUSH
7448: LD_INT 17
7450: PUSH
7451: LD_INT 133
7453: PUSH
7454: LD_INT 4
7456: PUSH
7457: LD_INT 2
7459: PUSH
7460: LD_INT 0
7462: PUSH
7463: LD_INT 0
7465: PUSH
7466: EMPTY
7467: LIST
7468: LIST
7469: LIST
7470: LIST
7471: LIST
7472: LIST
7473: PUSH
7474: LD_INT 16
7476: PUSH
7477: LD_INT 140
7479: PUSH
7480: LD_INT 11
7482: PUSH
7483: LD_INT 5
7485: PUSH
7486: LD_INT 0
7488: PUSH
7489: LD_INT 0
7491: PUSH
7492: EMPTY
7493: LIST
7494: LIST
7495: LIST
7496: LIST
7497: LIST
7498: LIST
7499: PUSH
7500: LD_INT 8
7502: PUSH
7503: LD_INT 149
7505: PUSH
7506: LD_INT 26
7508: PUSH
7509: LD_INT 4
7511: PUSH
7512: LD_INT 10
7514: PUSH
7515: LD_INT 15
7517: PUSH
7518: EMPTY
7519: LIST
7520: LIST
7521: LIST
7522: LIST
7523: LIST
7524: LIST
7525: PUSH
7526: LD_INT 8
7528: PUSH
7529: LD_INT 142
7531: PUSH
7532: LD_INT 26
7534: PUSH
7535: LD_INT 1
7537: PUSH
7538: LD_INT 11
7540: PUSH
7541: LD_INT 12
7543: PUSH
7544: EMPTY
7545: LIST
7546: LIST
7547: LIST
7548: LIST
7549: LIST
7550: LIST
7551: PUSH
7552: LD_INT 27
7554: PUSH
7555: LD_INT 153
7557: PUSH
7558: LD_INT 32
7560: PUSH
7561: LD_INT 5
7563: PUSH
7564: LD_INT 0
7566: PUSH
7567: LD_INT 0
7569: PUSH
7570: EMPTY
7571: LIST
7572: LIST
7573: LIST
7574: LIST
7575: LIST
7576: LIST
7577: PUSH
7578: LD_INT 27
7580: PUSH
7581: LD_INT 145
7583: PUSH
7584: LD_INT 32
7586: PUSH
7587: LD_INT 3
7589: PUSH
7590: LD_INT 0
7592: PUSH
7593: LD_INT 0
7595: PUSH
7596: EMPTY
7597: LIST
7598: LIST
7599: LIST
7600: LIST
7601: LIST
7602: LIST
7603: PUSH
7604: LD_INT 27
7606: PUSH
7607: LD_INT 138
7609: PUSH
7610: LD_INT 2
7612: PUSH
7613: LD_INT 4
7615: PUSH
7616: LD_INT 0
7618: PUSH
7619: LD_INT 0
7621: PUSH
7622: EMPTY
7623: LIST
7624: LIST
7625: LIST
7626: LIST
7627: LIST
7628: LIST
7629: PUSH
7630: LD_INT 27
7632: PUSH
7633: LD_INT 144
7635: PUSH
7636: LD_INT 13
7638: PUSH
7639: LD_INT 0
7641: PUSH
7642: LD_INT 0
7644: PUSH
7645: LD_INT 0
7647: PUSH
7648: EMPTY
7649: LIST
7650: LIST
7651: LIST
7652: LIST
7653: LIST
7654: LIST
7655: PUSH
7656: LD_INT 26
7658: PUSH
7659: LD_INT 124
7661: PUSH
7662: LD_INT 2
7664: PUSH
7665: LD_INT 4
7667: PUSH
7668: LD_INT 0
7670: PUSH
7671: LD_INT 0
7673: PUSH
7674: EMPTY
7675: LIST
7676: LIST
7677: LIST
7678: LIST
7679: LIST
7680: LIST
7681: PUSH
7682: LD_INT 26
7684: PUSH
7685: LD_INT 121
7687: PUSH
7688: LD_INT 2
7690: PUSH
7691: LD_INT 2
7693: PUSH
7694: LD_INT 0
7696: PUSH
7697: LD_INT 0
7699: PUSH
7700: EMPTY
7701: LIST
7702: LIST
7703: LIST
7704: LIST
7705: LIST
7706: LIST
7707: PUSH
7708: LD_INT 26
7710: PUSH
7711: LD_INT 118
7713: PUSH
7714: LD_INT 2
7716: PUSH
7717: LD_INT 1
7719: PUSH
7720: LD_INT 0
7722: PUSH
7723: LD_INT 0
7725: PUSH
7726: EMPTY
7727: LIST
7728: LIST
7729: LIST
7730: LIST
7731: LIST
7732: LIST
7733: PUSH
7734: LD_INT 29
7736: PUSH
7737: LD_INT 159
7739: PUSH
7740: LD_INT 47
7742: PUSH
7743: LD_INT 2
7745: PUSH
7746: LD_INT 0
7748: PUSH
7749: LD_INT 0
7751: PUSH
7752: EMPTY
7753: LIST
7754: LIST
7755: LIST
7756: LIST
7757: LIST
7758: LIST
7759: PUSH
7760: LD_INT 32
7762: PUSH
7763: LD_INT 146
7765: PUSH
7766: LD_INT 41
7768: PUSH
7769: LD_INT 0
7771: PUSH
7772: LD_INT 0
7774: PUSH
7775: LD_INT 0
7777: PUSH
7778: EMPTY
7779: LIST
7780: LIST
7781: LIST
7782: LIST
7783: LIST
7784: LIST
7785: PUSH
7786: LD_INT 33
7788: PUSH
7789: LD_INT 136
7791: PUSH
7792: LD_INT 37
7794: PUSH
7795: LD_INT 0
7797: PUSH
7798: LD_INT 0
7800: PUSH
7801: LD_INT 0
7803: PUSH
7804: EMPTY
7805: LIST
7806: LIST
7807: LIST
7808: LIST
7809: LIST
7810: LIST
7811: PUSH
7812: LD_INT 33
7814: PUSH
7815: LD_INT 132
7817: PUSH
7818: LD_INT 34
7820: PUSH
7821: LD_INT 0
7823: PUSH
7824: LD_INT 0
7826: PUSH
7827: LD_INT 0
7829: PUSH
7830: EMPTY
7831: LIST
7832: LIST
7833: LIST
7834: LIST
7835: LIST
7836: LIST
7837: PUSH
7838: LD_INT 36
7840: PUSH
7841: LD_INT 124
7843: PUSH
7844: LD_INT 7
7846: PUSH
7847: LD_INT 1
7849: PUSH
7850: LD_INT 0
7852: PUSH
7853: LD_INT 0
7855: PUSH
7856: EMPTY
7857: LIST
7858: LIST
7859: LIST
7860: LIST
7861: LIST
7862: LIST
7863: PUSH
7864: LD_INT 5
7866: PUSH
7867: LD_INT 124
7869: PUSH
7870: LD_INT 19
7872: PUSH
7873: LD_INT 0
7875: PUSH
7876: LD_INT 0
7878: PUSH
7879: LD_INT 0
7881: PUSH
7882: EMPTY
7883: LIST
7884: LIST
7885: LIST
7886: LIST
7887: LIST
7888: LIST
7889: PUSH
7890: LD_INT 32
7892: PUSH
7893: LD_INT 127
7895: PUSH
7896: LD_INT 23
7898: PUSH
7899: LD_INT 0
7901: PUSH
7902: LD_INT 0
7904: PUSH
7905: LD_INT 0
7907: PUSH
7908: EMPTY
7909: LIST
7910: LIST
7911: LIST
7912: LIST
7913: LIST
7914: LIST
7915: PUSH
7916: EMPTY
7917: LIST
7918: LIST
7919: LIST
7920: LIST
7921: LIST
7922: LIST
7923: LIST
7924: LIST
7925: LIST
7926: LIST
7927: LIST
7928: LIST
7929: LIST
7930: LIST
7931: LIST
7932: LIST
7933: LIST
7934: LIST
7935: LIST
7936: LIST
7937: LIST
7938: LIST
7939: LIST
7940: ST_TO_ADDR
// for i in tmp do
7941: LD_ADDR_VAR 0 2
7945: PUSH
7946: LD_VAR 0 4
7950: PUSH
7951: FOR_IN
7952: IFFALSE 8183
// begin uc_side := side ;
7954: LD_ADDR_OWVAR 20
7958: PUSH
7959: LD_VAR 0 5
7963: ST_TO_ADDR
// uc_nation := nation_american ;
7964: LD_ADDR_OWVAR 21
7968: PUSH
7969: LD_INT 1
7971: ST_TO_ADDR
// bc_type := i [ 1 ] ;
7972: LD_ADDR_OWVAR 42
7976: PUSH
7977: LD_VAR 0 2
7981: PUSH
7982: LD_INT 1
7984: ARRAY
7985: ST_TO_ADDR
// bc_level := rand ( 5 , 6 ) ;
7986: LD_ADDR_OWVAR 43
7990: PUSH
7991: LD_INT 5
7993: PPUSH
7994: LD_INT 6
7996: PPUSH
7997: CALL_OW 12
8001: ST_TO_ADDR
// bc_kind1 := i [ 5 ] ;
8002: LD_ADDR_OWVAR 44
8006: PUSH
8007: LD_VAR 0 2
8011: PUSH
8012: LD_INT 5
8014: ARRAY
8015: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
8016: LD_ADDR_OWVAR 45
8020: PUSH
8021: LD_VAR 0 2
8025: PUSH
8026: LD_INT 6
8028: ARRAY
8029: ST_TO_ADDR
// sr := 0 ;
8030: LD_ADDR_VAR 0 6
8034: PUSH
8035: LD_INT 0
8037: ST_TO_ADDR
// if i [ 1 ] = b_oil_mine then
8038: LD_VAR 0 2
8042: PUSH
8043: LD_INT 1
8045: ARRAY
8046: PUSH
8047: LD_INT 29
8049: EQUAL
8050: IFFALSE 8062
// sr := mat_oil else
8052: LD_ADDR_VAR 0 6
8056: PUSH
8057: LD_INT 2
8059: ST_TO_ADDR
8060: GO 8084
// if i [ 1 ] = b_siberite_mine then
8062: LD_VAR 0 2
8066: PUSH
8067: LD_INT 1
8069: ARRAY
8070: PUSH
8071: LD_INT 30
8073: EQUAL
8074: IFFALSE 8084
// sr := mat_siberit ;
8076: LD_ADDR_VAR 0 6
8080: PUSH
8081: LD_INT 3
8083: ST_TO_ADDR
// if sr then
8084: LD_VAR 0 6
8088: IFFALSE 8144
// begin CreateDepositXY ( i [ 2 ] , i [ 3 ] , sr ) ;
8090: LD_VAR 0 2
8094: PUSH
8095: LD_INT 2
8097: ARRAY
8098: PPUSH
8099: LD_VAR 0 2
8103: PUSH
8104: LD_INT 3
8106: ARRAY
8107: PPUSH
8108: LD_VAR 0 6
8112: PPUSH
8113: CALL_OW 62
// SetResourceVisibility ( i [ 2 ] , i [ 3 ] , side ) ;
8117: LD_VAR 0 2
8121: PUSH
8122: LD_INT 2
8124: ARRAY
8125: PPUSH
8126: LD_VAR 0 2
8130: PUSH
8131: LD_INT 3
8133: ARRAY
8134: PPUSH
8135: LD_VAR 0 5
8139: PPUSH
8140: CALL_OW 441
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
8144: LD_ADDR_VAR 0 3
8148: PUSH
8149: LD_VAR 0 2
8153: PUSH
8154: LD_INT 2
8156: ARRAY
8157: PPUSH
8158: LD_VAR 0 2
8162: PUSH
8163: LD_INT 3
8165: ARRAY
8166: PPUSH
8167: LD_VAR 0 2
8171: PUSH
8172: LD_INT 4
8174: ARRAY
8175: PPUSH
8176: CALL_OW 47
8180: ST_TO_ADDR
// end ;
8181: GO 7951
8183: POP
8184: POP
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
8185: LD_ADDR_VAR 0 8
8189: PUSH
8190: LD_INT 22
8192: PUSH
8193: LD_VAR 0 5
8197: PUSH
8198: EMPTY
8199: LIST
8200: LIST
8201: PUSH
8202: LD_INT 30
8204: PUSH
8205: LD_INT 1
8207: PUSH
8208: EMPTY
8209: LIST
8210: LIST
8211: PUSH
8212: EMPTY
8213: LIST
8214: LIST
8215: PPUSH
8216: CALL_OW 69
8220: ST_TO_ADDR
// if not depot then
8221: LD_VAR 0 8
8225: NOT
8226: IFFALSE 8230
// exit ;
8228: GO 8502
// base := PrepareBase ( depot [ 1 ] , amerBase , theta3 , [ 8 , 7 , 6 ] [ Difficulty ] , [ [ 2500 , 2000 , 1750 ] [ Difficulty ] , [ 300 , 250 , 200 ] [ Difficulty ] , [ 80 , 60 , 50 ] [ Difficulty ] ] , [ 7 , 6 , 5 , 5 ] ) ;
8230: LD_ADDR_VAR 0 7
8234: PUSH
8235: LD_VAR 0 8
8239: PUSH
8240: LD_INT 1
8242: ARRAY
8243: PPUSH
8244: LD_INT 3
8246: PPUSH
8247: LD_STRING theta3
8249: PPUSH
8250: LD_INT 8
8252: PUSH
8253: LD_INT 7
8255: PUSH
8256: LD_INT 6
8258: PUSH
8259: EMPTY
8260: LIST
8261: LIST
8262: LIST
8263: PUSH
8264: LD_OWVAR 67
8268: ARRAY
8269: PPUSH
8270: LD_INT 2500
8272: PUSH
8273: LD_INT 2000
8275: PUSH
8276: LD_INT 1750
8278: PUSH
8279: EMPTY
8280: LIST
8281: LIST
8282: LIST
8283: PUSH
8284: LD_OWVAR 67
8288: ARRAY
8289: PUSH
8290: LD_INT 300
8292: PUSH
8293: LD_INT 250
8295: PUSH
8296: LD_INT 200
8298: PUSH
8299: EMPTY
8300: LIST
8301: LIST
8302: LIST
8303: PUSH
8304: LD_OWVAR 67
8308: ARRAY
8309: PUSH
8310: LD_INT 80
8312: PUSH
8313: LD_INT 60
8315: PUSH
8316: LD_INT 50
8318: PUSH
8319: EMPTY
8320: LIST
8321: LIST
8322: LIST
8323: PUSH
8324: LD_OWVAR 67
8328: ARRAY
8329: PUSH
8330: EMPTY
8331: LIST
8332: LIST
8333: LIST
8334: PPUSH
8335: LD_INT 7
8337: PUSH
8338: LD_INT 6
8340: PUSH
8341: LD_INT 5
8343: PUSH
8344: LD_INT 5
8346: PUSH
8347: EMPTY
8348: LIST
8349: LIST
8350: LIST
8351: LIST
8352: PPUSH
8353: CALL 27602 0 6
8357: ST_TO_ADDR
// if not base then
8358: LD_VAR 0 7
8362: NOT
8363: IFFALSE 8367
// exit ;
8365: GO 8502
// mc_bases := Replace ( mc_bases , mc_amer , base ) ;
8367: LD_ADDR_EXP 47
8371: PUSH
8372: LD_EXP 47
8376: PPUSH
8377: LD_EXP 5
8381: PPUSH
8382: LD_VAR 0 7
8386: PPUSH
8387: CALL_OW 1
8391: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 7 ) ;
8392: LD_INT 1
8394: PPUSH
8395: LD_INT 1
8397: PPUSH
8398: LD_INT 7
8400: PPUSH
8401: CALL_OW 380
// allyCommander := CreateHuman ;
8405: LD_ADDR_EXP 11
8409: PUSH
8410: CALL_OW 44
8414: ST_TO_ADDR
// PlaceUnitXY ( allyCommander , 139 , 15 , false ) ;
8415: LD_EXP 11
8419: PPUSH
8420: LD_INT 139
8422: PPUSH
8423: LD_INT 15
8425: PPUSH
8426: LD_INT 0
8428: PPUSH
8429: CALL_OW 48
// ComTurnXY ( allyCommander , 137 , 15 ) ;
8433: LD_EXP 11
8437: PPUSH
8438: LD_INT 137
8440: PPUSH
8441: LD_INT 15
8443: PPUSH
8444: CALL_OW 118
// hc_gallery := us ;
8448: LD_ADDR_OWVAR 33
8452: PUSH
8453: LD_STRING us
8455: ST_TO_ADDR
// hc_face_number := 7 ;
8456: LD_ADDR_OWVAR 34
8460: PUSH
8461: LD_INT 7
8463: ST_TO_ADDR
// hc_name := Arthur Powell ;
8464: LD_ADDR_OWVAR 26
8468: PUSH
8469: LD_STRING Arthur Powell
8471: ST_TO_ADDR
// hc_sex := sex_male ;
8472: LD_ADDR_OWVAR 27
8476: PUSH
8477: LD_INT 1
8479: ST_TO_ADDR
// hc_class := 1 ;
8480: LD_ADDR_OWVAR 28
8484: PUSH
8485: LD_INT 1
8487: ST_TO_ADDR
// Powell := CreateHuman ;
8488: LD_ADDR_EXP 12
8492: PUSH
8493: CALL_OW 44
8497: ST_TO_ADDR
// InitHc ;
8498: CALL_OW 19
// end ;
8502: LD_VAR 0 1
8506: RET
// export function PreparePlayer ; var i , side , techs , tanks , cl , chassis , engines , weapons ; begin
8507: LD_INT 0
8509: PPUSH
8510: PPUSH
8511: PPUSH
8512: PPUSH
8513: PPUSH
8514: PPUSH
8515: PPUSH
8516: PPUSH
8517: PPUSH
// side := 1 ;
8518: LD_ADDR_VAR 0 3
8522: PUSH
8523: LD_INT 1
8525: ST_TO_ADDR
// result := [ [ ] , [ ] ] ;
8526: LD_ADDR_VAR 0 1
8530: PUSH
8531: EMPTY
8532: PUSH
8533: EMPTY
8534: PUSH
8535: EMPTY
8536: LIST
8537: LIST
8538: ST_TO_ADDR
// uc_side := side ;
8539: LD_ADDR_OWVAR 20
8543: PUSH
8544: LD_VAR 0 3
8548: ST_TO_ADDR
// uc_nation := nation_american ;
8549: LD_ADDR_OWVAR 21
8553: PUSH
8554: LD_INT 1
8556: ST_TO_ADDR
// InitHc ;
8557: CALL_OW 19
// InitVc ;
8561: CALL_OW 20
// hc_importance := 0 ;
8565: LD_ADDR_OWVAR 32
8569: PUSH
8570: LD_INT 0
8572: ST_TO_ADDR
// chassis := [ us_medium_wheeled , us_medium_tracked , us_medium_tracked ] ;
8573: LD_ADDR_VAR 0 7
8577: PUSH
8578: LD_INT 2
8580: PUSH
8581: LD_INT 3
8583: PUSH
8584: LD_INT 3
8586: PUSH
8587: EMPTY
8588: LIST
8589: LIST
8590: LIST
8591: ST_TO_ADDR
// if commander = 2 then
8592: LD_EXP 25
8596: PUSH
8597: LD_INT 2
8599: EQUAL
8600: IFFALSE 8621
// chassis := [ us_medium_tracked , us_heavy_tracked , us_heavy_tracked ] ;
8602: LD_ADDR_VAR 0 7
8606: PUSH
8607: LD_INT 3
8609: PUSH
8610: LD_INT 4
8612: PUSH
8613: LD_INT 4
8615: PUSH
8616: EMPTY
8617: LIST
8618: LIST
8619: LIST
8620: ST_TO_ADDR
// if commander = 3 then
8621: LD_EXP 25
8625: PUSH
8626: LD_INT 3
8628: EQUAL
8629: IFFALSE 8650
// chassis := [ us_medium_wheeled , us_morphling , us_morphling ] ;
8631: LD_ADDR_VAR 0 7
8635: PUSH
8636: LD_INT 2
8638: PUSH
8639: LD_INT 5
8641: PUSH
8642: LD_INT 5
8644: PUSH
8645: EMPTY
8646: LIST
8647: LIST
8648: LIST
8649: ST_TO_ADDR
// engines := [ engine_solar , engine_solar , engine_combustion ] ;
8650: LD_ADDR_VAR 0 8
8654: PUSH
8655: LD_INT 2
8657: PUSH
8658: LD_INT 2
8660: PUSH
8661: LD_INT 1
8663: PUSH
8664: EMPTY
8665: LIST
8666: LIST
8667: LIST
8668: ST_TO_ADDR
// if commander = 2 then
8669: LD_EXP 25
8673: PUSH
8674: LD_INT 2
8676: EQUAL
8677: IFFALSE 8698
// engines := [ engine_combustion , engine_combustion , engine_siberite ] ;
8679: LD_ADDR_VAR 0 8
8683: PUSH
8684: LD_INT 1
8686: PUSH
8687: LD_INT 1
8689: PUSH
8690: LD_INT 3
8692: PUSH
8693: EMPTY
8694: LIST
8695: LIST
8696: LIST
8697: ST_TO_ADDR
// if commander = 3 then
8698: LD_EXP 25
8702: PUSH
8703: LD_INT 3
8705: EQUAL
8706: IFFALSE 8727
// engines := [ engine_siberite , engine_siberite , engine_combustion ] ;
8708: LD_ADDR_VAR 0 8
8712: PUSH
8713: LD_INT 3
8715: PUSH
8716: LD_INT 3
8718: PUSH
8719: LD_INT 1
8721: PUSH
8722: EMPTY
8723: LIST
8724: LIST
8725: LIST
8726: ST_TO_ADDR
// weapons := [ us_double_gun , us_light_gun , us_gatling_gun ] ;
8727: LD_ADDR_VAR 0 9
8731: PUSH
8732: LD_INT 5
8734: PUSH
8735: LD_INT 3
8737: PUSH
8738: LD_INT 4
8740: PUSH
8741: EMPTY
8742: LIST
8743: LIST
8744: LIST
8745: ST_TO_ADDR
// if commander = 2 then
8746: LD_EXP 25
8750: PUSH
8751: LD_INT 2
8753: EQUAL
8754: IFFALSE 8775
// weapons := [ us_rocket_launcher , us_double_gun , us_heavy_gun ] ;
8756: LD_ADDR_VAR 0 9
8760: PUSH
8761: LD_INT 7
8763: PUSH
8764: LD_INT 5
8766: PUSH
8767: LD_INT 6
8769: PUSH
8770: EMPTY
8771: LIST
8772: LIST
8773: LIST
8774: ST_TO_ADDR
// if commander = 3 then
8775: LD_EXP 25
8779: PUSH
8780: LD_INT 3
8782: EQUAL
8783: IFFALSE 8804
// weapons := [ us_laser , us_double_laser , us_rocket_launcher ] ;
8785: LD_ADDR_VAR 0 9
8789: PUSH
8790: LD_INT 9
8792: PUSH
8793: LD_INT 10
8795: PUSH
8796: LD_INT 7
8798: PUSH
8799: EMPTY
8800: LIST
8801: LIST
8802: LIST
8803: ST_TO_ADDR
// tanks := [ 5 , 5 , 4 ] [ Difficulty ] ;
8804: LD_ADDR_VAR 0 5
8808: PUSH
8809: LD_INT 5
8811: PUSH
8812: LD_INT 5
8814: PUSH
8815: LD_INT 4
8817: PUSH
8818: EMPTY
8819: LIST
8820: LIST
8821: LIST
8822: PUSH
8823: LD_OWVAR 67
8827: ARRAY
8828: ST_TO_ADDR
// if commander = 2 then
8829: LD_EXP 25
8833: PUSH
8834: LD_INT 2
8836: EQUAL
8837: IFFALSE 8853
// tanks := tanks + 3 ;
8839: LD_ADDR_VAR 0 5
8843: PUSH
8844: LD_VAR 0 5
8848: PUSH
8849: LD_INT 3
8851: PLUS
8852: ST_TO_ADDR
// for i = 1 to tanks do
8853: LD_ADDR_VAR 0 2
8857: PUSH
8858: DOUBLE
8859: LD_INT 1
8861: DEC
8862: ST_TO_ADDR
8863: LD_VAR 0 5
8867: PUSH
8868: FOR_TO
8869: IFFALSE 8979
// begin PrepareVehicle ( chassis [ i mod 3 + 1 ] , engines [ rand ( 1 , 3 ) ] , control_manual , weapons [ i mod 3 + 1 ] , rand ( 60 , 70 ) ) ;
8871: LD_VAR 0 7
8875: PUSH
8876: LD_VAR 0 2
8880: PUSH
8881: LD_INT 3
8883: MOD
8884: PUSH
8885: LD_INT 1
8887: PLUS
8888: ARRAY
8889: PPUSH
8890: LD_VAR 0 8
8894: PUSH
8895: LD_INT 1
8897: PPUSH
8898: LD_INT 3
8900: PPUSH
8901: CALL_OW 12
8905: ARRAY
8906: PPUSH
8907: LD_INT 1
8909: PPUSH
8910: LD_VAR 0 9
8914: PUSH
8915: LD_VAR 0 2
8919: PUSH
8920: LD_INT 3
8922: MOD
8923: PUSH
8924: LD_INT 1
8926: PLUS
8927: ARRAY
8928: PPUSH
8929: LD_INT 60
8931: PPUSH
8932: LD_INT 70
8934: PPUSH
8935: CALL_OW 12
8939: PPUSH
8940: CALL 24193 0 5
// result := Replace ( result , 1 , result [ 1 ] ^ CreateVehicle ) ;
8944: LD_ADDR_VAR 0 1
8948: PUSH
8949: LD_VAR 0 1
8953: PPUSH
8954: LD_INT 1
8956: PPUSH
8957: LD_VAR 0 1
8961: PUSH
8962: LD_INT 1
8964: ARRAY
8965: PUSH
8966: CALL_OW 45
8970: ADD
8971: PPUSH
8972: CALL_OW 1
8976: ST_TO_ADDR
// end ;
8977: GO 8868
8979: POP
8980: POP
// cl := 1 ;
8981: LD_ADDR_VAR 0 6
8985: PUSH
8986: LD_INT 1
8988: ST_TO_ADDR
// for i = 1 to 10 do
8989: LD_ADDR_VAR 0 2
8993: PUSH
8994: DOUBLE
8995: LD_INT 1
8997: DEC
8998: ST_TO_ADDR
8999: LD_INT 10
9001: PUSH
9002: FOR_TO
9003: IFFALSE 9118
// begin if i mod 4 = 0 then
9005: LD_VAR 0 2
9009: PUSH
9010: LD_INT 4
9012: MOD
9013: PUSH
9014: LD_INT 0
9016: EQUAL
9017: IFFALSE 9033
// cl := cl + 1 ;
9019: LD_ADDR_VAR 0 6
9023: PUSH
9024: LD_VAR 0 6
9028: PUSH
9029: LD_INT 1
9031: PLUS
9032: ST_TO_ADDR
// if cl = 2 then
9033: LD_VAR 0 6
9037: PUSH
9038: LD_INT 2
9040: EQUAL
9041: IFFALSE 9051
// cl := 3 ;
9043: LD_ADDR_VAR 0 6
9047: PUSH
9048: LD_INT 3
9050: ST_TO_ADDR
// PrepareHuman ( false , cl , [ 6 , 6 , 5 ] [ Difficulty ] ) ;
9051: LD_INT 0
9053: PPUSH
9054: LD_VAR 0 6
9058: PPUSH
9059: LD_INT 6
9061: PUSH
9062: LD_INT 6
9064: PUSH
9065: LD_INT 5
9067: PUSH
9068: EMPTY
9069: LIST
9070: LIST
9071: LIST
9072: PUSH
9073: LD_OWVAR 67
9077: ARRAY
9078: PPUSH
9079: CALL_OW 380
// result := Replace ( result , 2 , result [ 2 ] ^ CreateHuman ) ;
9083: LD_ADDR_VAR 0 1
9087: PUSH
9088: LD_VAR 0 1
9092: PPUSH
9093: LD_INT 2
9095: PPUSH
9096: LD_VAR 0 1
9100: PUSH
9101: LD_INT 2
9103: ARRAY
9104: PUSH
9105: CALL_OW 44
9109: ADD
9110: PPUSH
9111: CALL_OW 1
9115: ST_TO_ADDR
// end ;
9116: GO 9002
9118: POP
9119: POP
// if commander = 1 then
9120: LD_EXP 25
9124: PUSH
9125: LD_INT 1
9127: EQUAL
9128: IFFALSE 9196
// for i = 1 to 4 do
9130: LD_ADDR_VAR 0 2
9134: PUSH
9135: DOUBLE
9136: LD_INT 1
9138: DEC
9139: ST_TO_ADDR
9140: LD_INT 4
9142: PUSH
9143: FOR_TO
9144: IFFALSE 9194
// begin PrepareHuman ( false , class_soldier , 8 ) ;
9146: LD_INT 0
9148: PPUSH
9149: LD_INT 1
9151: PPUSH
9152: LD_INT 8
9154: PPUSH
9155: CALL_OW 380
// result := Replace ( result , 2 , result [ 2 ] ^ CreateHuman ) ;
9159: LD_ADDR_VAR 0 1
9163: PUSH
9164: LD_VAR 0 1
9168: PPUSH
9169: LD_INT 2
9171: PPUSH
9172: LD_VAR 0 1
9176: PUSH
9177: LD_INT 2
9179: ARRAY
9180: PUSH
9181: CALL_OW 44
9185: ADD
9186: PPUSH
9187: CALL_OW 1
9191: ST_TO_ADDR
// end ;
9192: GO 9143
9194: POP
9195: POP
// techs := [ ] ;
9196: LD_ADDR_VAR 0 4
9200: PUSH
9201: EMPTY
9202: ST_TO_ADDR
// if commander = 1 then
9203: LD_EXP 25
9207: PUSH
9208: LD_INT 1
9210: EQUAL
9211: IFFALSE 9236
// techs := [ tech_weap1 , tech_weap2 , tech_weap3 , tech_lasSight ] ;
9213: LD_ADDR_VAR 0 4
9217: PUSH
9218: LD_INT 51
9220: PUSH
9221: LD_INT 52
9223: PUSH
9224: LD_INT 53
9226: PUSH
9227: LD_INT 12
9229: PUSH
9230: EMPTY
9231: LIST
9232: LIST
9233: LIST
9234: LIST
9235: ST_TO_ADDR
// if commander = 2 then
9236: LD_EXP 25
9240: PUSH
9241: LD_INT 2
9243: EQUAL
9244: IFFALSE 9281
// techs := [ tech_tech1 , tech_oilEng , tech_oilPow , tech_solEng , tech_solPow , tech_opto1 , tech_radar ] ;
9246: LD_ADDR_VAR 0 4
9250: PUSH
9251: LD_INT 48
9253: PUSH
9254: LD_INT 47
9256: PUSH
9257: LD_INT 46
9259: PUSH
9260: LD_INT 45
9262: PUSH
9263: LD_INT 35
9265: PUSH
9266: LD_INT 60
9268: PUSH
9269: LD_INT 6
9271: PUSH
9272: EMPTY
9273: LIST
9274: LIST
9275: LIST
9276: LIST
9277: LIST
9278: LIST
9279: LIST
9280: ST_TO_ADDR
// if commander = 3 then
9281: LD_EXP 25
9285: PUSH
9286: LD_INT 3
9288: EQUAL
9289: IFFALSE 9338
// techs := [ tech_advAI , tech_advchassis , tech_ai , tech_comp1 , tech_comp2 , tech_oilEng , tech_oilPow , tech_weap1 , tech_gatling , tech_gun ] ;
9291: LD_ADDR_VAR 0 4
9295: PUSH
9296: LD_INT 27
9298: PUSH
9299: LD_INT 36
9301: PUSH
9302: LD_INT 32
9304: PUSH
9305: LD_INT 57
9307: PUSH
9308: LD_INT 58
9310: PUSH
9311: LD_INT 47
9313: PUSH
9314: LD_INT 46
9316: PUSH
9317: LD_INT 51
9319: PUSH
9320: LD_INT 69
9322: PUSH
9323: LD_INT 39
9325: PUSH
9326: EMPTY
9327: LIST
9328: LIST
9329: LIST
9330: LIST
9331: LIST
9332: LIST
9333: LIST
9334: LIST
9335: LIST
9336: LIST
9337: ST_TO_ADDR
// if techs then
9338: LD_VAR 0 4
9342: IFFALSE 9376
// for i in techs do
9344: LD_ADDR_VAR 0 2
9348: PUSH
9349: LD_VAR 0 4
9353: PUSH
9354: FOR_IN
9355: IFFALSE 9374
// SetTech ( i , 1 , state_researched ) ;
9357: LD_VAR 0 2
9361: PPUSH
9362: LD_INT 1
9364: PPUSH
9365: LD_INT 2
9367: PPUSH
9368: CALL_OW 322
9372: GO 9354
9374: POP
9375: POP
// hc_gallery := skirmish ;
9376: LD_ADDR_OWVAR 33
9380: PUSH
9381: LD_STRING skirmish
9383: ST_TO_ADDR
// hc_face_number := commander ;
9384: LD_ADDR_OWVAR 34
9388: PUSH
9389: LD_EXP 25
9393: ST_TO_ADDR
// hc_importance := 100 ;
9394: LD_ADDR_OWVAR 32
9398: PUSH
9399: LD_INT 100
9401: ST_TO_ADDR
// case commander of 1 :
9402: LD_EXP 25
9406: PUSH
9407: LD_INT 1
9409: DOUBLE
9410: EQUAL
9411: IFTRUE 9415
9413: GO 9439
9415: POP
// begin hc_name := Jeff Ironside ;
9416: LD_ADDR_OWVAR 26
9420: PUSH
9421: LD_STRING Jeff Ironside
9423: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 7 ) ;
9424: LD_INT 1
9426: PPUSH
9427: LD_INT 1
9429: PPUSH
9430: LD_INT 7
9432: PPUSH
9433: CALL_OW 380
// end ; 2 :
9437: GO 9504
9439: LD_INT 2
9441: DOUBLE
9442: EQUAL
9443: IFTRUE 9447
9445: GO 9471
9447: POP
// begin hc_name := Paul Johnson ;
9448: LD_ADDR_OWVAR 26
9452: PUSH
9453: LD_STRING Paul Johnson
9455: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 7 ) ;
9456: LD_INT 1
9458: PPUSH
9459: LD_INT 3
9461: PPUSH
9462: LD_INT 7
9464: PPUSH
9465: CALL_OW 380
// end ; 3 :
9469: GO 9504
9471: LD_INT 3
9473: DOUBLE
9474: EQUAL
9475: IFTRUE 9479
9477: GO 9503
9479: POP
// begin hc_name := Lisa Stuart ;
9480: LD_ADDR_OWVAR 26
9484: PUSH
9485: LD_STRING Lisa Stuart
9487: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , 7 ) ;
9488: LD_INT 2
9490: PPUSH
9491: LD_INT 4
9493: PPUSH
9494: LD_INT 7
9496: PPUSH
9497: CALL_OW 380
// end ; end ;
9501: GO 9504
9503: POP
// playerCommander := CreateHuman ;
9504: LD_ADDR_EXP 9
9508: PUSH
9509: CALL_OW 44
9513: ST_TO_ADDR
// hc_importance := 0 ;
9514: LD_ADDR_OWVAR 32
9518: PUSH
9519: LD_INT 0
9521: ST_TO_ADDR
// hc_gallery :=  ;
9522: LD_ADDR_OWVAR 33
9526: PUSH
9527: LD_STRING 
9529: ST_TO_ADDR
// result := Replace ( result , 2 , result [ 2 ] ^ playerCommander ) ;
9530: LD_ADDR_VAR 0 1
9534: PUSH
9535: LD_VAR 0 1
9539: PPUSH
9540: LD_INT 2
9542: PPUSH
9543: LD_VAR 0 1
9547: PUSH
9548: LD_INT 2
9550: ARRAY
9551: PUSH
9552: LD_EXP 9
9556: ADD
9557: PPUSH
9558: CALL_OW 1
9562: ST_TO_ADDR
// end ;
9563: LD_VAR 0 1
9567: RET
// export function PrepareReinforcements ; var i , peopleAmount , tmp , un , veh ; begin
9568: LD_INT 0
9570: PPUSH
9571: PPUSH
9572: PPUSH
9573: PPUSH
9574: PPUSH
9575: PPUSH
// uc_side := 1 ;
9576: LD_ADDR_OWVAR 20
9580: PUSH
9581: LD_INT 1
9583: ST_TO_ADDR
// uc_nation := 1 ;
9584: LD_ADDR_OWVAR 21
9588: PUSH
9589: LD_INT 1
9591: ST_TO_ADDR
// InitHc ;
9592: CALL_OW 19
// peopleAmount := [ 3 , 3 , 2 ] [ Difficulty ] ;
9596: LD_ADDR_VAR 0 3
9600: PUSH
9601: LD_INT 3
9603: PUSH
9604: LD_INT 3
9606: PUSH
9607: LD_INT 2
9609: PUSH
9610: EMPTY
9611: LIST
9612: LIST
9613: LIST
9614: PUSH
9615: LD_OWVAR 67
9619: ARRAY
9620: ST_TO_ADDR
// for i = 1 to peopleAmount do
9621: LD_ADDR_VAR 0 2
9625: PUSH
9626: DOUBLE
9627: LD_INT 1
9629: DEC
9630: ST_TO_ADDR
9631: LD_VAR 0 3
9635: PUSH
9636: FOR_TO
9637: IFFALSE 9686
// begin PrepareHuman ( false , 2 , [ 7 , 6 , 5 ] [ Difficulty ] ) ;
9639: LD_INT 0
9641: PPUSH
9642: LD_INT 2
9644: PPUSH
9645: LD_INT 7
9647: PUSH
9648: LD_INT 6
9650: PUSH
9651: LD_INT 5
9653: PUSH
9654: EMPTY
9655: LIST
9656: LIST
9657: LIST
9658: PUSH
9659: LD_OWVAR 67
9663: ARRAY
9664: PPUSH
9665: CALL_OW 380
// PlaceUnitInArea ( CreateHuman , startArea , false ) ;
9669: CALL_OW 44
9673: PPUSH
9674: LD_INT 19
9676: PPUSH
9677: LD_INT 0
9679: PPUSH
9680: CALL 54272 0 3
// end ;
9684: GO 9636
9686: POP
9687: POP
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_computer , us_crane , 58 ) ;
9688: LD_INT 2
9690: PPUSH
9691: LD_INT 1
9693: PPUSH
9694: LD_INT 3
9696: PPUSH
9697: LD_INT 13
9699: PPUSH
9700: LD_INT 58
9702: PPUSH
9703: CALL 24193 0 5
// PlaceUnitInArea ( CreateVehicle , startArea , false ) ;
9707: CALL_OW 45
9711: PPUSH
9712: LD_INT 19
9714: PPUSH
9715: LD_INT 0
9717: PPUSH
9718: CALL 54272 0 3
// if commander = 1 then
9722: LD_EXP 25
9726: PUSH
9727: LD_INT 1
9729: EQUAL
9730: IFFALSE 9741
// wait ( 6 6$00 ) else
9732: LD_INT 12600
9734: PPUSH
9735: CALL_OW 67
9739: GO 9748
// wait ( 8 8$00 ) ;
9741: LD_INT 16800
9743: PPUSH
9744: CALL_OW 67
// uc_side := 1 ;
9748: LD_ADDR_OWVAR 20
9752: PUSH
9753: LD_INT 1
9755: ST_TO_ADDR
// uc_nation := 1 ;
9756: LD_ADDR_OWVAR 21
9760: PUSH
9761: LD_INT 1
9763: ST_TO_ADDR
// InitVc ;
9764: CALL_OW 20
// InitHc ;
9768: CALL_OW 19
// for i = 1 to 5 do
9772: LD_ADDR_VAR 0 2
9776: PUSH
9777: DOUBLE
9778: LD_INT 1
9780: DEC
9781: ST_TO_ADDR
9782: LD_INT 5
9784: PUSH
9785: FOR_TO
9786: IFFALSE 10030
// begin PrepareVehicle ( [ us_heavy_tracked , us_medium_tracked , us_light_wheeled ] [ i mod 3 + 1 ] , engine_combustion , [ control_manual , control_computer , control_computer ] [ i mod 3 + 1 ] , [ us_heavy_gun , us_cargo_bay , us_radar ] [ i mod 3 + 1 ] , rand ( 40 , 55 ) ) ;
9788: LD_INT 4
9790: PUSH
9791: LD_INT 3
9793: PUSH
9794: LD_INT 1
9796: PUSH
9797: EMPTY
9798: LIST
9799: LIST
9800: LIST
9801: PUSH
9802: LD_VAR 0 2
9806: PUSH
9807: LD_INT 3
9809: MOD
9810: PUSH
9811: LD_INT 1
9813: PLUS
9814: ARRAY
9815: PPUSH
9816: LD_INT 1
9818: PPUSH
9819: LD_INT 1
9821: PUSH
9822: LD_INT 3
9824: PUSH
9825: LD_INT 3
9827: PUSH
9828: EMPTY
9829: LIST
9830: LIST
9831: LIST
9832: PUSH
9833: LD_VAR 0 2
9837: PUSH
9838: LD_INT 3
9840: MOD
9841: PUSH
9842: LD_INT 1
9844: PLUS
9845: ARRAY
9846: PPUSH
9847: LD_INT 6
9849: PUSH
9850: LD_INT 12
9852: PUSH
9853: LD_INT 11
9855: PUSH
9856: EMPTY
9857: LIST
9858: LIST
9859: LIST
9860: PUSH
9861: LD_VAR 0 2
9865: PUSH
9866: LD_INT 3
9868: MOD
9869: PUSH
9870: LD_INT 1
9872: PLUS
9873: ARRAY
9874: PPUSH
9875: LD_INT 40
9877: PPUSH
9878: LD_INT 55
9880: PPUSH
9881: CALL_OW 12
9885: PPUSH
9886: CALL 24193 0 5
// veh := CreateVehicle ;
9890: LD_ADDR_VAR 0 6
9894: PUSH
9895: CALL_OW 45
9899: ST_TO_ADDR
// PlaceUnitInArea ( veh , startArea , false ) ;
9900: LD_VAR 0 6
9904: PPUSH
9905: LD_INT 19
9907: PPUSH
9908: LD_INT 0
9910: PPUSH
9911: CALL 54272 0 3
// if GetWeapon ( veh ) = us_cargo_bay then
9915: LD_VAR 0 6
9919: PPUSH
9920: CALL_OW 264
9924: PUSH
9925: LD_INT 12
9927: EQUAL
9928: IFFALSE 9960
// begin AddCargo ( veh , mat_cans , 70 ) ;
9930: LD_VAR 0 6
9934: PPUSH
9935: LD_INT 1
9937: PPUSH
9938: LD_INT 70
9940: PPUSH
9941: CALL_OW 291
// AddCargo ( veh , mat_siberit , 30 ) ;
9945: LD_VAR 0 6
9949: PPUSH
9950: LD_INT 3
9952: PPUSH
9953: LD_INT 30
9955: PPUSH
9956: CALL_OW 291
// end ; if GetControl ( veh ) = control_manual then
9960: LD_VAR 0 6
9964: PPUSH
9965: CALL_OW 263
9969: PUSH
9970: LD_INT 1
9972: EQUAL
9973: IFFALSE 10028
// begin PrepareHuman ( sex_male , 3 , 6 ) ;
9975: LD_INT 1
9977: PPUSH
9978: LD_INT 3
9980: PPUSH
9981: LD_INT 6
9983: PPUSH
9984: CALL_OW 380
// un := CreateHuman ;
9988: LD_ADDR_VAR 0 5
9992: PUSH
9993: CALL_OW 44
9997: ST_TO_ADDR
// tmp := tmp ^ un ;
9998: LD_ADDR_VAR 0 4
10002: PUSH
10003: LD_VAR 0 4
10007: PUSH
10008: LD_VAR 0 5
10012: ADD
10013: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10014: LD_VAR 0 5
10018: PPUSH
10019: LD_VAR 0 6
10023: PPUSH
10024: CALL_OW 52
// end ; end ;
10028: GO 9785
10030: POP
10031: POP
// if tmp then
10032: LD_VAR 0 4
10036: IFFALSE 10100
// begin CenterNowOnUnits ( tmp ) ;
10038: LD_VAR 0 4
10042: PPUSH
10043: CALL_OW 87
// Say ( tmp [ 1 ] , DAR-1 ) ;
10047: LD_VAR 0 4
10051: PUSH
10052: LD_INT 1
10054: ARRAY
10055: PPUSH
10056: LD_STRING DAR-1
10058: PPUSH
10059: CALL_OW 88
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-DAR ) ;
10063: LD_EXP 9
10067: PPUSH
10068: LD_STRING D
10070: PUSH
10071: LD_STRING I
10073: PUSH
10074: LD_STRING J
10076: PUSH
10077: LD_STRING S
10079: PUSH
10080: EMPTY
10081: LIST
10082: LIST
10083: LIST
10084: PUSH
10085: LD_EXP 25
10089: ARRAY
10090: STR
10091: PUSH
10092: LD_STRING -1-DAR
10094: STR
10095: PPUSH
10096: CALL_OW 88
// end ; if not reinforceAllowed then
10100: LD_EXP 24
10104: NOT
10105: IFFALSE 10109
// exit ;
10107: GO 10263
// wait ( 25 25$00 ) ;
10109: LD_INT 52500
10111: PPUSH
10112: CALL_OW 67
// uc_side := 1 ;
10116: LD_ADDR_OWVAR 20
10120: PUSH
10121: LD_INT 1
10123: ST_TO_ADDR
// uc_nation := 1 ;
10124: LD_ADDR_OWVAR 21
10128: PUSH
10129: LD_INT 1
10131: ST_TO_ADDR
// InitVc ;
10132: CALL_OW 20
// InitHc ;
10136: CALL_OW 19
// for i = 1 to 4 do
10140: LD_ADDR_VAR 0 2
10144: PUSH
10145: DOUBLE
10146: LD_INT 1
10148: DEC
10149: ST_TO_ADDR
10150: LD_INT 4
10152: PUSH
10153: FOR_TO
10154: IFFALSE 10261
// begin PrepareVehicle ( us_morphling , engine_siberite , control_manual , us_heavy_gun , 1 ) ;
10156: LD_INT 5
10158: PPUSH
10159: LD_INT 3
10161: PPUSH
10162: LD_INT 1
10164: PPUSH
10165: LD_INT 6
10167: PPUSH
10168: LD_INT 1
10170: PPUSH
10171: CALL 24193 0 5
// veh := CreateVehicle ;
10175: LD_ADDR_VAR 0 6
10179: PUSH
10180: CALL_OW 45
10184: ST_TO_ADDR
// PlaceUnitInArea ( veh , startArea , false ) ;
10185: LD_VAR 0 6
10189: PPUSH
10190: LD_INT 19
10192: PPUSH
10193: LD_INT 0
10195: PPUSH
10196: CALL 54272 0 3
// if GetControl ( veh ) = control_manual then
10200: LD_VAR 0 6
10204: PPUSH
10205: CALL_OW 263
10209: PUSH
10210: LD_INT 1
10212: EQUAL
10213: IFFALSE 10259
// begin PrepareHuman ( false , 3 , [ 7 , 6 , 5 ] [ Difficulty ] ) ;
10215: LD_INT 0
10217: PPUSH
10218: LD_INT 3
10220: PPUSH
10221: LD_INT 7
10223: PUSH
10224: LD_INT 6
10226: PUSH
10227: LD_INT 5
10229: PUSH
10230: EMPTY
10231: LIST
10232: LIST
10233: LIST
10234: PUSH
10235: LD_OWVAR 67
10239: ARRAY
10240: PPUSH
10241: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
10245: CALL_OW 44
10249: PPUSH
10250: LD_VAR 0 6
10254: PPUSH
10255: CALL_OW 52
// end ; end ;
10259: GO 10153
10261: POP
10262: POP
// end ;
10263: LD_VAR 0 1
10267: RET
// export function PrepareLegionReinforcements ; var i , un , j , tmp ; begin
10268: LD_INT 0
10270: PPUSH
10271: PPUSH
10272: PPUSH
10273: PPUSH
10274: PPUSH
// uc_side := 8 ;
10275: LD_ADDR_OWVAR 20
10279: PUSH
10280: LD_INT 8
10282: ST_TO_ADDR
// uc_nation := nation_arabian ;
10283: LD_ADDR_OWVAR 21
10287: PUSH
10288: LD_INT 2
10290: ST_TO_ADDR
// for i = 1 to 2 do
10291: LD_ADDR_VAR 0 2
10295: PUSH
10296: DOUBLE
10297: LD_INT 1
10299: DEC
10300: ST_TO_ADDR
10301: LD_INT 2
10303: PUSH
10304: FOR_TO
10305: IFFALSE 10385
// for j = 1 to 4 do
10307: LD_ADDR_VAR 0 4
10311: PUSH
10312: DOUBLE
10313: LD_INT 1
10315: DEC
10316: ST_TO_ADDR
10317: LD_INT 4
10319: PUSH
10320: FOR_TO
10321: IFFALSE 10381
// begin PrepareHuman ( false , j , 8 ) ;
10323: LD_INT 0
10325: PPUSH
10326: LD_VAR 0 4
10330: PPUSH
10331: LD_INT 8
10333: PPUSH
10334: CALL_OW 380
// un := CreateHuman ;
10338: LD_ADDR_VAR 0 3
10342: PUSH
10343: CALL_OW 44
10347: ST_TO_ADDR
// PlaceUnitArea ( un , legionSpawn , false ) ;
10348: LD_VAR 0 3
10352: PPUSH
10353: LD_INT 23
10355: PPUSH
10356: LD_INT 0
10358: PPUSH
10359: CALL_OW 49
// tmp := tmp union un ;
10363: LD_ADDR_VAR 0 5
10367: PUSH
10368: LD_VAR 0 5
10372: PUSH
10373: LD_VAR 0 3
10377: UNION
10378: ST_TO_ADDR
// end ;
10379: GO 10320
10381: POP
10382: POP
10383: GO 10304
10385: POP
10386: POP
// for i in tmp do
10387: LD_ADDR_VAR 0 2
10391: PUSH
10392: LD_VAR 0 5
10396: PUSH
10397: FOR_IN
10398: IFFALSE 10417
// ComMoveXY ( i , 150 , 136 ) ;
10400: LD_VAR 0 2
10404: PPUSH
10405: LD_INT 150
10407: PPUSH
10408: LD_INT 136
10410: PPUSH
10411: CALL_OW 111
10415: GO 10397
10417: POP
10418: POP
// mc_bases := Replace ( mc_bases , mc_leg , mc_bases [ mc_leg ] union tmp ) ;
10419: LD_ADDR_EXP 47
10423: PUSH
10424: LD_EXP 47
10428: PPUSH
10429: LD_EXP 6
10433: PPUSH
10434: LD_EXP 47
10438: PUSH
10439: LD_EXP 6
10443: ARRAY
10444: PUSH
10445: LD_VAR 0 5
10449: UNION
10450: PPUSH
10451: CALL_OW 1
10455: ST_TO_ADDR
// end ;
10456: LD_VAR 0 1
10460: RET
// every 0 0$10 trigger Difficulty > 1 and GetTech ( tech_lapser , 3 ) = state_researched do
10461: LD_OWVAR 67
10465: PUSH
10466: LD_INT 1
10468: GREATER
10469: PUSH
10470: LD_INT 31
10472: PPUSH
10473: LD_INT 3
10475: PPUSH
10476: CALL_OW 321
10480: PUSH
10481: LD_INT 2
10483: EQUAL
10484: AND
10485: IFFALSE 10702
10487: GO 10489
10489: DISABLE
// begin MC_InsertBuildingList ( mc_rus_1 , [ [ b_turret , 101 , 159 , 5 ] , [ b_turret , 105 , 158 , 5 ] , [ b_turret , 96 , 136 , 5 ] , [ b_turret , 94 , 133 , 4 ] , [ b_turret , 84 , 102 , 4 ] ] ) ;
10490: LD_EXP 7
10494: PPUSH
10495: LD_INT 33
10497: PUSH
10498: LD_INT 101
10500: PUSH
10501: LD_INT 159
10503: PUSH
10504: LD_INT 5
10506: PUSH
10507: EMPTY
10508: LIST
10509: LIST
10510: LIST
10511: LIST
10512: PUSH
10513: LD_INT 33
10515: PUSH
10516: LD_INT 105
10518: PUSH
10519: LD_INT 158
10521: PUSH
10522: LD_INT 5
10524: PUSH
10525: EMPTY
10526: LIST
10527: LIST
10528: LIST
10529: LIST
10530: PUSH
10531: LD_INT 33
10533: PUSH
10534: LD_INT 96
10536: PUSH
10537: LD_INT 136
10539: PUSH
10540: LD_INT 5
10542: PUSH
10543: EMPTY
10544: LIST
10545: LIST
10546: LIST
10547: LIST
10548: PUSH
10549: LD_INT 33
10551: PUSH
10552: LD_INT 94
10554: PUSH
10555: LD_INT 133
10557: PUSH
10558: LD_INT 4
10560: PUSH
10561: EMPTY
10562: LIST
10563: LIST
10564: LIST
10565: LIST
10566: PUSH
10567: LD_INT 33
10569: PUSH
10570: LD_INT 84
10572: PUSH
10573: LD_INT 102
10575: PUSH
10576: LD_INT 4
10578: PUSH
10579: EMPTY
10580: LIST
10581: LIST
10582: LIST
10583: LIST
10584: PUSH
10585: EMPTY
10586: LIST
10587: LIST
10588: LIST
10589: LIST
10590: LIST
10591: PPUSH
10592: CALL 80201 0 2
// MC_InsertBuildingList ( mc_rus_2 , [ [ b_turret , 50 , 17 , 4 ] , [ b_turret , 52 , 20 , 4 ] , [ b_turret , 53 , 23 , 4 ] , [ b_turret , 45 , 32 , 4 ] , [ b_turret , 45 , 39 , 4 ] ] ) ;
10596: LD_EXP 8
10600: PPUSH
10601: LD_INT 33
10603: PUSH
10604: LD_INT 50
10606: PUSH
10607: LD_INT 17
10609: PUSH
10610: LD_INT 4
10612: PUSH
10613: EMPTY
10614: LIST
10615: LIST
10616: LIST
10617: LIST
10618: PUSH
10619: LD_INT 33
10621: PUSH
10622: LD_INT 52
10624: PUSH
10625: LD_INT 20
10627: PUSH
10628: LD_INT 4
10630: PUSH
10631: EMPTY
10632: LIST
10633: LIST
10634: LIST
10635: LIST
10636: PUSH
10637: LD_INT 33
10639: PUSH
10640: LD_INT 53
10642: PUSH
10643: LD_INT 23
10645: PUSH
10646: LD_INT 4
10648: PUSH
10649: EMPTY
10650: LIST
10651: LIST
10652: LIST
10653: LIST
10654: PUSH
10655: LD_INT 33
10657: PUSH
10658: LD_INT 45
10660: PUSH
10661: LD_INT 32
10663: PUSH
10664: LD_INT 4
10666: PUSH
10667: EMPTY
10668: LIST
10669: LIST
10670: LIST
10671: LIST
10672: PUSH
10673: LD_INT 33
10675: PUSH
10676: LD_INT 45
10678: PUSH
10679: LD_INT 39
10681: PUSH
10682: LD_INT 4
10684: PUSH
10685: EMPTY
10686: LIST
10687: LIST
10688: LIST
10689: LIST
10690: PUSH
10691: EMPTY
10692: LIST
10693: LIST
10694: LIST
10695: LIST
10696: LIST
10697: PPUSH
10698: CALL 80201 0 2
// end ; end_of_file
10702: END
// export function Action ; var i , tmp ; begin
10703: LD_INT 0
10705: PPUSH
10706: PPUSH
10707: PPUSH
// InGameOn ;
10708: CALL_OW 8
// CenterNowOnXY ( 225 , 217 ) ;
10712: LD_INT 225
10714: PPUSH
10715: LD_INT 217
10717: PPUSH
10718: CALL_OW 86
// for i in playerForces [ 2 ] do
10722: LD_ADDR_VAR 0 2
10726: PUSH
10727: LD_EXP 10
10731: PUSH
10732: LD_INT 2
10734: ARRAY
10735: PUSH
10736: FOR_IN
10737: IFFALSE 10870
// begin if playerForces [ 1 ] and GetClass ( i ) in [ 3 , 4 ] then
10739: LD_EXP 10
10743: PUSH
10744: LD_INT 1
10746: ARRAY
10747: PUSH
10748: LD_VAR 0 2
10752: PPUSH
10753: CALL_OW 257
10757: PUSH
10758: LD_INT 3
10760: PUSH
10761: LD_INT 4
10763: PUSH
10764: EMPTY
10765: LIST
10766: LIST
10767: IN
10768: AND
10769: IFFALSE 10853
// begin PlaceUnitInArea ( playerForces [ 1 ] [ 1 ] , startArea , false ) ;
10771: LD_EXP 10
10775: PUSH
10776: LD_INT 1
10778: ARRAY
10779: PUSH
10780: LD_INT 1
10782: ARRAY
10783: PPUSH
10784: LD_INT 19
10786: PPUSH
10787: LD_INT 0
10789: PPUSH
10790: CALL 54272 0 3
// PlaceHumanInUnit ( i , playerForces [ 1 ] [ 1 ] ) ;
10794: LD_VAR 0 2
10798: PPUSH
10799: LD_EXP 10
10803: PUSH
10804: LD_INT 1
10806: ARRAY
10807: PUSH
10808: LD_INT 1
10810: ARRAY
10811: PPUSH
10812: CALL_OW 52
// playerForces := Replace ( playerForces , 1 , Delete ( playerForces [ 1 ] , 1 ) ) ;
10816: LD_ADDR_EXP 10
10820: PUSH
10821: LD_EXP 10
10825: PPUSH
10826: LD_INT 1
10828: PPUSH
10829: LD_EXP 10
10833: PUSH
10834: LD_INT 1
10836: ARRAY
10837: PPUSH
10838: LD_INT 1
10840: PPUSH
10841: CALL_OW 3
10845: PPUSH
10846: CALL_OW 1
10850: ST_TO_ADDR
// end else
10851: GO 10868
// PlaceUnitInArea ( i , startArea , false ) ;
10853: LD_VAR 0 2
10857: PPUSH
10858: LD_INT 19
10860: PPUSH
10861: LD_INT 0
10863: PPUSH
10864: CALL 54272 0 3
// end ;
10868: GO 10736
10870: POP
10871: POP
// wait ( 0 0$2 ) ;
10872: LD_INT 70
10874: PPUSH
10875: CALL_OW 67
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1 ) ;
10879: LD_EXP 9
10883: PPUSH
10884: LD_STRING D
10886: PUSH
10887: LD_STRING I
10889: PUSH
10890: LD_STRING J
10892: PUSH
10893: LD_STRING S
10895: PUSH
10896: EMPTY
10897: LIST
10898: LIST
10899: LIST
10900: PUSH
10901: LD_EXP 25
10905: ARRAY
10906: STR
10907: PUSH
10908: LD_STRING -1
10910: STR
10911: PPUSH
10912: CALL_OW 88
// SayRadio ( Powell , DP-1 ) ;
10916: LD_EXP 12
10920: PPUSH
10921: LD_STRING DP-1
10923: PPUSH
10924: CALL_OW 94
// SayRadio ( Powell , DP-2 ) ;
10928: LD_EXP 12
10932: PPUSH
10933: LD_STRING DP-2
10935: PPUSH
10936: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -2 ) ;
10940: LD_EXP 9
10944: PPUSH
10945: LD_STRING D
10947: PUSH
10948: LD_STRING I
10950: PUSH
10951: LD_STRING J
10953: PUSH
10954: LD_STRING S
10956: PUSH
10957: EMPTY
10958: LIST
10959: LIST
10960: LIST
10961: PUSH
10962: LD_EXP 25
10966: ARRAY
10967: STR
10968: PUSH
10969: LD_STRING -2
10971: STR
10972: PPUSH
10973: CALL_OW 88
// InGameOff ;
10977: CALL_OW 9
// ChangeMissionObjectives ( O1 ) ;
10981: LD_STRING O1
10983: PPUSH
10984: CALL_OW 337
// game := true ;
10988: LD_ADDR_EXP 3
10992: PUSH
10993: LD_INT 1
10995: ST_TO_ADDR
// SaveForQuickRestart ;
10996: CALL_OW 22
// wait ( 0 0$5 ) ;
11000: LD_INT 175
11002: PPUSH
11003: CALL_OW 67
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -3 ) ;
11007: LD_EXP 9
11011: PPUSH
11012: LD_STRING D
11014: PUSH
11015: LD_STRING I
11017: PUSH
11018: LD_STRING J
11020: PUSH
11021: LD_STRING S
11023: PUSH
11024: EMPTY
11025: LIST
11026: LIST
11027: LIST
11028: PUSH
11029: LD_EXP 25
11033: ARRAY
11034: STR
11035: PUSH
11036: LD_STRING -3
11038: STR
11039: PPUSH
11040: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
11044: LD_INT 35
11046: PPUSH
11047: CALL_OW 67
// until ruEscape [ 1 ] >= ruEscape [ 2 ] ;
11051: LD_EXP 15
11055: PUSH
11056: LD_INT 1
11058: ARRAY
11059: PUSH
11060: LD_EXP 15
11064: PUSH
11065: LD_INT 2
11067: ARRAY
11068: GREATEREQUAL
11069: IFFALSE 11044
// outpostEscape := true ;
11071: LD_ADDR_EXP 27
11075: PUSH
11076: LD_INT 1
11078: ST_TO_ADDR
// tmp := UnitFilter ( ruOutpost , [ f_sex , sex_male ] ) ;
11079: LD_ADDR_VAR 0 3
11083: PUSH
11084: LD_EXP 14
11088: PPUSH
11089: LD_INT 26
11091: PUSH
11092: LD_INT 1
11094: PUSH
11095: EMPTY
11096: LIST
11097: LIST
11098: PPUSH
11099: CALL_OW 72
11103: ST_TO_ADDR
// if tmp then
11104: LD_VAR 0 3
11108: IFFALSE 11126
// Say ( tmp [ 1 ] , DR-1-Escape ) ;
11110: LD_VAR 0 3
11114: PUSH
11115: LD_INT 1
11117: ARRAY
11118: PPUSH
11119: LD_STRING DR-1-Escape
11121: PPUSH
11122: CALL_OW 88
// wait ( 0 0$1 ) ;
11126: LD_INT 35
11128: PPUSH
11129: CALL_OW 67
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Escape ) ;
11133: LD_EXP 9
11137: PPUSH
11138: LD_STRING D
11140: PUSH
11141: LD_STRING I
11143: PUSH
11144: LD_STRING J
11146: PUSH
11147: LD_STRING S
11149: PUSH
11150: EMPTY
11151: LIST
11152: LIST
11153: LIST
11154: PUSH
11155: LD_EXP 25
11159: ARRAY
11160: STR
11161: PUSH
11162: LD_STRING -1-Escape
11164: STR
11165: PPUSH
11166: CALL_OW 88
// for i in ruOutpost do
11170: LD_ADDR_VAR 0 2
11174: PUSH
11175: LD_EXP 14
11179: PUSH
11180: FOR_IN
11181: IFFALSE 11235
// begin if IsInUnit ( i ) then
11183: LD_VAR 0 2
11187: PPUSH
11188: CALL_OW 310
11192: IFFALSE 11203
// ComExitBuilding ( i ) ;
11194: LD_VAR 0 2
11198: PPUSH
11199: CALL_OW 122
// AddComMoveXY ( i , 179 , 102 ) ;
11203: LD_VAR 0 2
11207: PPUSH
11208: LD_INT 179
11210: PPUSH
11211: LD_INT 102
11213: PPUSH
11214: CALL_OW 171
// AddComMoveXY ( i , 28 , 20 ) ;
11218: LD_VAR 0 2
11222: PPUSH
11223: LD_INT 28
11225: PPUSH
11226: LD_INT 20
11228: PPUSH
11229: CALL_OW 171
// end ;
11233: GO 11180
11235: POP
11236: POP
// tmp := [ ] ;
11237: LD_ADDR_VAR 0 3
11241: PUSH
11242: EMPTY
11243: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11244: LD_INT 35
11246: PPUSH
11247: CALL_OW 67
// tmp := UnitFilter ( ruOutpost , [ f_inarea , rus2Base ] ) ;
11251: LD_ADDR_VAR 0 3
11255: PUSH
11256: LD_EXP 14
11260: PPUSH
11261: LD_INT 95
11263: PUSH
11264: LD_INT 11
11266: PUSH
11267: EMPTY
11268: LIST
11269: LIST
11270: PPUSH
11271: CALL_OW 72
11275: ST_TO_ADDR
// if tmp then
11276: LD_VAR 0 3
11280: IFFALSE 11359
// for i in tmp do
11282: LD_ADDR_VAR 0 2
11286: PUSH
11287: LD_VAR 0 3
11291: PUSH
11292: FOR_IN
11293: IFFALSE 11357
// begin ruOutpost := ruOutpost diff i ;
11295: LD_ADDR_EXP 14
11299: PUSH
11300: LD_EXP 14
11304: PUSH
11305: LD_VAR 0 2
11309: DIFF
11310: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ mc_rus_2 , mc_bases [ mc_rus_2 ] + 1 ] , i ) ;
11311: LD_ADDR_EXP 47
11315: PUSH
11316: LD_EXP 47
11320: PPUSH
11321: LD_EXP 8
11325: PUSH
11326: LD_EXP 47
11330: PUSH
11331: LD_EXP 8
11335: ARRAY
11336: PUSH
11337: LD_INT 1
11339: PLUS
11340: PUSH
11341: EMPTY
11342: LIST
11343: LIST
11344: PPUSH
11345: LD_VAR 0 2
11349: PPUSH
11350: CALL 24315 0 3
11354: ST_TO_ADDR
// end ;
11355: GO 11292
11357: POP
11358: POP
// until not UnitFilter ( ruOutpost , [ f_type , unit_human ] ) ;
11359: LD_EXP 14
11363: PPUSH
11364: LD_INT 21
11366: PUSH
11367: LD_INT 1
11369: PUSH
11370: EMPTY
11371: LIST
11372: LIST
11373: PPUSH
11374: CALL_OW 72
11378: NOT
11379: IFFALSE 11244
// ruOutpost := [ ] ;
11381: LD_ADDR_EXP 14
11385: PUSH
11386: EMPTY
11387: ST_TO_ADDR
// end ;
11388: LD_VAR 0 1
11392: RET
// every 0 0$1 trigger outpostEscape do var i , tmp ;
11393: LD_EXP 27
11397: IFFALSE 11586
11399: GO 11401
11401: DISABLE
11402: LD_INT 0
11404: PPUSH
11405: PPUSH
// begin wait ( rand ( 0 0$25 , 0 0$35 ) ) ;
11406: LD_INT 875
11408: PPUSH
11409: LD_INT 1225
11411: PPUSH
11412: CALL_OW 12
11416: PPUSH
11417: CALL_OW 67
// tmp := [ [ 208 , 166 ] , [ 218 , 174 ] , [ 201 , 173 ] , [ 189 , 167 ] , [ 191 , 160 ] , [ 209 , 181 ] , [ 192 , 162 ] , [ 197 , 166 ] ] ;
11421: LD_ADDR_VAR 0 2
11425: PUSH
11426: LD_INT 208
11428: PUSH
11429: LD_INT 166
11431: PUSH
11432: EMPTY
11433: LIST
11434: LIST
11435: PUSH
11436: LD_INT 218
11438: PUSH
11439: LD_INT 174
11441: PUSH
11442: EMPTY
11443: LIST
11444: LIST
11445: PUSH
11446: LD_INT 201
11448: PUSH
11449: LD_INT 173
11451: PUSH
11452: EMPTY
11453: LIST
11454: LIST
11455: PUSH
11456: LD_INT 189
11458: PUSH
11459: LD_INT 167
11461: PUSH
11462: EMPTY
11463: LIST
11464: LIST
11465: PUSH
11466: LD_INT 191
11468: PUSH
11469: LD_INT 160
11471: PUSH
11472: EMPTY
11473: LIST
11474: LIST
11475: PUSH
11476: LD_INT 209
11478: PUSH
11479: LD_INT 181
11481: PUSH
11482: EMPTY
11483: LIST
11484: LIST
11485: PUSH
11486: LD_INT 192
11488: PUSH
11489: LD_INT 162
11491: PUSH
11492: EMPTY
11493: LIST
11494: LIST
11495: PUSH
11496: LD_INT 197
11498: PUSH
11499: LD_INT 166
11501: PUSH
11502: EMPTY
11503: LIST
11504: LIST
11505: PUSH
11506: EMPTY
11507: LIST
11508: LIST
11509: LIST
11510: LIST
11511: LIST
11512: LIST
11513: LIST
11514: LIST
11515: ST_TO_ADDR
// for i = 1 to 5 + Difficulty do
11516: LD_ADDR_VAR 0 1
11520: PUSH
11521: DOUBLE
11522: LD_INT 1
11524: DEC
11525: ST_TO_ADDR
11526: LD_INT 5
11528: PUSH
11529: LD_OWVAR 67
11533: PLUS
11534: PUSH
11535: FOR_TO
11536: IFFALSE 11584
// begin MineExplosion ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , 1 ) ;
11538: LD_VAR 0 2
11542: PUSH
11543: LD_VAR 0 1
11547: ARRAY
11548: PUSH
11549: LD_INT 1
11551: ARRAY
11552: PPUSH
11553: LD_VAR 0 2
11557: PUSH
11558: LD_VAR 0 1
11562: ARRAY
11563: PUSH
11564: LD_INT 2
11566: ARRAY
11567: PPUSH
11568: LD_INT 1
11570: PPUSH
11571: CALL_OW 453
// wait ( 0 0$0.8 ) ;
11575: LD_INT 28
11577: PPUSH
11578: CALL_OW 67
// end ;
11582: GO 11535
11584: POP
11585: POP
// end ;
11586: PPOPN 2
11588: END
// every 0 0$3 trigger not outpostEscape do var tmp , engs , buildings , empty , i , j , k ;
11589: LD_EXP 27
11593: NOT
11594: IFFALSE 12248
11596: GO 11598
11598: DISABLE
11599: LD_INT 0
11601: PPUSH
11602: PPUSH
11603: PPUSH
11604: PPUSH
11605: PPUSH
11606: PPUSH
11607: PPUSH
// begin enable ;
11608: ENABLE
// tmp := UnitFilter ( ruOutpost , [ [ f_side , 3 ] , [ f_class , 1 ] ] ) ;
11609: LD_ADDR_VAR 0 1
11613: PUSH
11614: LD_EXP 14
11618: PPUSH
11619: LD_INT 22
11621: PUSH
11622: LD_INT 3
11624: PUSH
11625: EMPTY
11626: LIST
11627: LIST
11628: PUSH
11629: LD_INT 25
11631: PUSH
11632: LD_INT 1
11634: PUSH
11635: EMPTY
11636: LIST
11637: LIST
11638: PUSH
11639: EMPTY
11640: LIST
11641: LIST
11642: PPUSH
11643: CALL_OW 72
11647: ST_TO_ADDR
// engs := UnitFilter ( ruOutpost , [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
11648: LD_ADDR_VAR 0 2
11652: PUSH
11653: LD_EXP 14
11657: PPUSH
11658: LD_INT 22
11660: PUSH
11661: LD_INT 3
11663: PUSH
11664: EMPTY
11665: LIST
11666: LIST
11667: PUSH
11668: LD_INT 25
11670: PUSH
11671: LD_INT 2
11673: PUSH
11674: EMPTY
11675: LIST
11676: LIST
11677: PUSH
11678: EMPTY
11679: LIST
11680: LIST
11681: PPUSH
11682: CALL_OW 72
11686: ST_TO_ADDR
// buildings := UnitFilter ( ruOutpost , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
11687: LD_ADDR_VAR 0 3
11691: PUSH
11692: LD_EXP 14
11696: PPUSH
11697: LD_INT 22
11699: PUSH
11700: LD_INT 3
11702: PUSH
11703: EMPTY
11704: LIST
11705: LIST
11706: PUSH
11707: LD_INT 21
11709: PUSH
11710: LD_INT 3
11712: PUSH
11713: EMPTY
11714: LIST
11715: LIST
11716: PUSH
11717: LD_INT 3
11719: PUSH
11720: LD_INT 24
11722: PUSH
11723: LD_INT 1000
11725: PUSH
11726: EMPTY
11727: LIST
11728: LIST
11729: PUSH
11730: EMPTY
11731: LIST
11732: LIST
11733: PUSH
11734: EMPTY
11735: LIST
11736: LIST
11737: LIST
11738: PPUSH
11739: CALL_OW 72
11743: ST_TO_ADDR
// if engs and buildings then
11744: LD_VAR 0 2
11748: PUSH
11749: LD_VAR 0 3
11753: AND
11754: IFFALSE 11827
// begin for i in engs do
11756: LD_ADDR_VAR 0 5
11760: PUSH
11761: LD_VAR 0 2
11765: PUSH
11766: FOR_IN
11767: IFFALSE 11823
// if IsInUnit ( i ) then
11769: LD_VAR 0 5
11773: PPUSH
11774: CALL_OW 310
11778: IFFALSE 11791
// ComExitBuilding ( i ) else
11780: LD_VAR 0 5
11784: PPUSH
11785: CALL_OW 122
11789: GO 11821
// if not HasTask ( i ) then
11791: LD_VAR 0 5
11795: PPUSH
11796: CALL_OW 314
11800: NOT
11801: IFFALSE 11821
// ComRepairBuilding ( i , buildings [ 1 ] ) ;
11803: LD_VAR 0 5
11807: PPUSH
11808: LD_VAR 0 3
11812: PUSH
11813: LD_INT 1
11815: ARRAY
11816: PPUSH
11817: CALL_OW 130
11821: GO 11766
11823: POP
11824: POP
// end else
11825: GO 11930
// if not buildings and UnitFilter ( ruOutpost , [ f_btype , b_depot ] ) and UnitFilter ( engs , [ f_not , [ f_inside ] ] ) then
11827: LD_VAR 0 3
11831: NOT
11832: PUSH
11833: LD_EXP 14
11837: PPUSH
11838: LD_INT 30
11840: PUSH
11841: LD_INT 0
11843: PUSH
11844: EMPTY
11845: LIST
11846: LIST
11847: PPUSH
11848: CALL_OW 72
11852: AND
11853: PUSH
11854: LD_VAR 0 2
11858: PPUSH
11859: LD_INT 3
11861: PUSH
11862: LD_INT 54
11864: PUSH
11865: EMPTY
11866: LIST
11867: PUSH
11868: EMPTY
11869: LIST
11870: LIST
11871: PPUSH
11872: CALL_OW 72
11876: AND
11877: IFFALSE 11930
// ComEnterUnit ( UnitFilter ( engs , [ f_not , [ f_inside ] ] ) , UnitFilter ( ruOutpost , [ f_btype , b_depot ] ) [ 1 ] ) ;
11879: LD_VAR 0 2
11883: PPUSH
11884: LD_INT 3
11886: PUSH
11887: LD_INT 54
11889: PUSH
11890: EMPTY
11891: LIST
11892: PUSH
11893: EMPTY
11894: LIST
11895: LIST
11896: PPUSH
11897: CALL_OW 72
11901: PPUSH
11902: LD_EXP 14
11906: PPUSH
11907: LD_INT 30
11909: PUSH
11910: LD_INT 0
11912: PUSH
11913: EMPTY
11914: LIST
11915: LIST
11916: PPUSH
11917: CALL_OW 72
11921: PUSH
11922: LD_INT 1
11924: ARRAY
11925: PPUSH
11926: CALL_OW 120
// if not tmp then
11930: LD_VAR 0 1
11934: NOT
11935: IFFALSE 11939
// exit ;
11937: GO 12248
// if FilterUnitsInArea ( ruOutpostCenterArea , [ f_enemy , 3 ] ) > 1 then
11939: LD_INT 26
11941: PPUSH
11942: LD_INT 81
11944: PUSH
11945: LD_INT 3
11947: PUSH
11948: EMPTY
11949: LIST
11950: LIST
11951: PPUSH
11952: CALL_OW 70
11956: PUSH
11957: LD_INT 1
11959: GREATER
11960: IFFALSE 12016
// begin for i in tmp do
11962: LD_ADDR_VAR 0 5
11966: PUSH
11967: LD_VAR 0 1
11971: PUSH
11972: FOR_IN
11973: IFFALSE 12012
// begin if IsInUnit ( i ) then
11975: LD_VAR 0 5
11979: PPUSH
11980: CALL_OW 310
11984: IFFALSE 11995
// ComExitBuilding ( i ) ;
11986: LD_VAR 0 5
11990: PPUSH
11991: CALL_OW 122
// AddComAgressiveMove ( i , 204 , 164 ) ;
11995: LD_VAR 0 5
11999: PPUSH
12000: LD_INT 204
12002: PPUSH
12003: LD_INT 164
12005: PPUSH
12006: CALL_OW 174
// end ;
12010: GO 11972
12012: POP
12013: POP
// end else
12014: GO 12248
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
12016: LD_VAR 0 1
12020: PPUSH
12021: LD_INT 3
12023: PUSH
12024: LD_INT 54
12026: PUSH
12027: EMPTY
12028: LIST
12029: PUSH
12030: EMPTY
12031: LIST
12032: LIST
12033: PPUSH
12034: CALL_OW 72
12038: IFFALSE 12248
// begin empty := UnitFilter ( ruOutpost , [ [ f_btype , b_bunker ] , [ f_empty ] ] ) ;
12040: LD_ADDR_VAR 0 4
12044: PUSH
12045: LD_EXP 14
12049: PPUSH
12050: LD_INT 30
12052: PUSH
12053: LD_INT 32
12055: PUSH
12056: EMPTY
12057: LIST
12058: LIST
12059: PUSH
12060: LD_INT 58
12062: PUSH
12063: EMPTY
12064: LIST
12065: PUSH
12066: EMPTY
12067: LIST
12068: LIST
12069: PPUSH
12070: CALL_OW 72
12074: ST_TO_ADDR
// if not empty and UnitFilter ( ruOutpost , [ f_btype , b_barracks ] ) then
12075: LD_VAR 0 4
12079: NOT
12080: PUSH
12081: LD_EXP 14
12085: PPUSH
12086: LD_INT 30
12088: PUSH
12089: LD_INT 5
12091: PUSH
12092: EMPTY
12093: LIST
12094: LIST
12095: PPUSH
12096: CALL_OW 72
12100: AND
12101: IFFALSE 12138
// begin ComEnterUnit ( tmp , UnitFilter ( ruOutpost , [ f_btype , b_barracks ] ) [ 1 ] ) ;
12103: LD_VAR 0 1
12107: PPUSH
12108: LD_EXP 14
12112: PPUSH
12113: LD_INT 30
12115: PUSH
12116: LD_INT 5
12118: PUSH
12119: EMPTY
12120: LIST
12121: LIST
12122: PPUSH
12123: CALL_OW 72
12127: PUSH
12128: LD_INT 1
12130: ARRAY
12131: PPUSH
12132: CALL_OW 120
// exit ;
12136: GO 12248
// end ; j := UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) ;
12138: LD_ADDR_VAR 0 6
12142: PUSH
12143: LD_VAR 0 1
12147: PPUSH
12148: LD_INT 3
12150: PUSH
12151: LD_INT 54
12153: PUSH
12154: EMPTY
12155: LIST
12156: PUSH
12157: EMPTY
12158: LIST
12159: LIST
12160: PPUSH
12161: CALL_OW 72
12165: ST_TO_ADDR
// if j < empty then
12166: LD_VAR 0 6
12170: PUSH
12171: LD_VAR 0 4
12175: LESS
12176: IFFALSE 12190
// k := j else
12178: LD_ADDR_VAR 0 7
12182: PUSH
12183: LD_VAR 0 6
12187: ST_TO_ADDR
12188: GO 12200
// k := empty ;
12190: LD_ADDR_VAR 0 7
12194: PUSH
12195: LD_VAR 0 4
12199: ST_TO_ADDR
// for i = 1 to k do
12200: LD_ADDR_VAR 0 5
12204: PUSH
12205: DOUBLE
12206: LD_INT 1
12208: DEC
12209: ST_TO_ADDR
12210: LD_VAR 0 7
12214: PUSH
12215: FOR_TO
12216: IFFALSE 12246
// ComEnterUnit ( j [ i ] , empty [ i ] ) ;
12218: LD_VAR 0 6
12222: PUSH
12223: LD_VAR 0 5
12227: ARRAY
12228: PPUSH
12229: LD_VAR 0 4
12233: PUSH
12234: LD_VAR 0 5
12238: ARRAY
12239: PPUSH
12240: CALL_OW 120
12244: GO 12215
12246: POP
12247: POP
// end ; end ;
12248: PPOPN 7
12250: END
// every 0 0$2 trigger GameType = 1 and outpostEscape and FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , 208 , 163 , 8 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_distxy , 208 , 163 , 14 ] ] ) do var i ;
12251: LD_EXP 2
12255: PUSH
12256: LD_INT 1
12258: EQUAL
12259: PUSH
12260: LD_EXP 27
12264: AND
12265: PUSH
12266: LD_INT 22
12268: PUSH
12269: LD_INT 1
12271: PUSH
12272: EMPTY
12273: LIST
12274: LIST
12275: PUSH
12276: LD_INT 92
12278: PUSH
12279: LD_INT 208
12281: PUSH
12282: LD_INT 163
12284: PUSH
12285: LD_INT 8
12287: PUSH
12288: EMPTY
12289: LIST
12290: LIST
12291: LIST
12292: LIST
12293: PUSH
12294: EMPTY
12295: LIST
12296: LIST
12297: PPUSH
12298: CALL_OW 69
12302: AND
12303: PUSH
12304: LD_INT 22
12306: PUSH
12307: LD_INT 3
12309: PUSH
12310: EMPTY
12311: LIST
12312: LIST
12313: PUSH
12314: LD_INT 21
12316: PUSH
12317: LD_INT 1
12319: PUSH
12320: EMPTY
12321: LIST
12322: LIST
12323: PUSH
12324: LD_INT 92
12326: PUSH
12327: LD_INT 208
12329: PUSH
12330: LD_INT 163
12332: PUSH
12333: LD_INT 14
12335: PUSH
12336: EMPTY
12337: LIST
12338: LIST
12339: LIST
12340: LIST
12341: PUSH
12342: EMPTY
12343: LIST
12344: LIST
12345: LIST
12346: PPUSH
12347: CALL_OW 69
12351: NOT
12352: AND
12353: IFFALSE 12658
12355: GO 12357
12357: DISABLE
12358: LD_INT 0
12360: PPUSH
// begin InGameOn ;
12361: CALL_OW 8
// CenterNowOnUnits ( playerCommander ) ;
12365: LD_EXP 9
12369: PPUSH
12370: CALL_OW 87
// wait ( 0 0$1 ) ;
12374: LD_INT 35
12376: PPUSH
12377: CALL_OW 67
// DialogueOn ;
12381: CALL_OW 6
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-BaseCaptured ) ;
12385: LD_EXP 9
12389: PPUSH
12390: LD_STRING D
12392: PUSH
12393: LD_STRING I
12395: PUSH
12396: LD_STRING J
12398: PUSH
12399: LD_STRING S
12401: PUSH
12402: EMPTY
12403: LIST
12404: LIST
12405: LIST
12406: PUSH
12407: LD_EXP 25
12411: ARRAY
12412: STR
12413: PUSH
12414: LD_STRING -1-BaseCaptured
12416: STR
12417: PPUSH
12418: CALL_OW 88
// SayRadio ( Powell , DP-1-BaseCaptured ) ;
12422: LD_EXP 12
12426: PPUSH
12427: LD_STRING DP-1-BaseCaptured
12429: PPUSH
12430: CALL_OW 94
// if sibBombAllowed then
12434: LD_EXP 23
12438: IFFALSE 12580
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -2-BaseCaptured ) ;
12440: LD_EXP 9
12444: PPUSH
12445: LD_STRING D
12447: PUSH
12448: LD_STRING I
12450: PUSH
12451: LD_STRING J
12453: PUSH
12454: LD_STRING S
12456: PUSH
12457: EMPTY
12458: LIST
12459: LIST
12460: LIST
12461: PUSH
12462: LD_EXP 25
12466: ARRAY
12467: STR
12468: PUSH
12469: LD_STRING -2-BaseCaptured
12471: STR
12472: PPUSH
12473: CALL_OW 88
// if commander = 1 then
12477: LD_EXP 25
12481: PUSH
12482: LD_INT 1
12484: EQUAL
12485: IFFALSE 12499
// SayRadio ( Powell , DP-2b-BaseCaptured ) ;
12487: LD_EXP 12
12491: PPUSH
12492: LD_STRING DP-2b-BaseCaptured
12494: PPUSH
12495: CALL_OW 94
// if commander = 2 then
12499: LD_EXP 25
12503: PUSH
12504: LD_INT 2
12506: EQUAL
12507: IFFALSE 12521
// SayRadio ( Powell , DP-2-BaseCaptured ) ;
12509: LD_EXP 12
12513: PPUSH
12514: LD_STRING DP-2-BaseCaptured
12516: PPUSH
12517: CALL_OW 94
// if commander = 3 then
12521: LD_EXP 25
12525: PUSH
12526: LD_INT 3
12528: EQUAL
12529: IFFALSE 12543
// SayRadio ( Powell , DP-2a-BaseCaptured ) ;
12531: LD_EXP 12
12535: PPUSH
12536: LD_STRING DP-2a-BaseCaptured
12538: PPUSH
12539: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -3-BaseCaptured ) ;
12543: LD_EXP 9
12547: PPUSH
12548: LD_STRING D
12550: PUSH
12551: LD_STRING I
12553: PUSH
12554: LD_STRING J
12556: PUSH
12557: LD_STRING S
12559: PUSH
12560: EMPTY
12561: LIST
12562: LIST
12563: LIST
12564: PUSH
12565: LD_EXP 25
12569: ARRAY
12570: STR
12571: PUSH
12572: LD_STRING -3-BaseCaptured
12574: STR
12575: PPUSH
12576: CALL_OW 88
// end ; DialogueOff ;
12580: CALL_OW 7
// InGameOff ;
12584: CALL_OW 9
// ChangeMissionObjectives ( O2 ) ;
12588: LD_STRING O2
12590: PPUSH
12591: CALL_OW 337
// for i in UnitFilter ( ruOutpost , [ f_type , unit_building ] ) do
12595: LD_ADDR_VAR 0 1
12599: PUSH
12600: LD_EXP 14
12604: PPUSH
12605: LD_INT 21
12607: PUSH
12608: LD_INT 3
12610: PUSH
12611: EMPTY
12612: LIST
12613: LIST
12614: PPUSH
12615: CALL_OW 72
12619: PUSH
12620: FOR_IN
12621: IFFALSE 12637
// SetSide ( i , 1 ) ;
12623: LD_VAR 0 1
12627: PPUSH
12628: LD_INT 1
12630: PPUSH
12631: CALL_OW 235
12635: GO 12620
12637: POP
12638: POP
// baseCaptured := true ;
12639: LD_ADDR_EXP 17
12643: PUSH
12644: LD_INT 1
12646: ST_TO_ADDR
// wait ( 0 0$35 ) ;
12647: LD_INT 1225
12649: PPUSH
12650: CALL_OW 67
// PrepareReinforcements ;
12654: CALL 9568 0 0
// end ;
12658: PPOPN 1
12660: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 167 , 197 , 20 ] ] ) > 3 do
12661: LD_INT 22
12663: PUSH
12664: LD_INT 3
12666: PUSH
12667: EMPTY
12668: LIST
12669: LIST
12670: PUSH
12671: LD_INT 92
12673: PUSH
12674: LD_INT 167
12676: PUSH
12677: LD_INT 197
12679: PUSH
12680: LD_INT 20
12682: PUSH
12683: EMPTY
12684: LIST
12685: LIST
12686: LIST
12687: LIST
12688: PUSH
12689: EMPTY
12690: LIST
12691: LIST
12692: PPUSH
12693: CALL_OW 69
12697: PUSH
12698: LD_INT 3
12700: GREATER
12701: IFFALSE 12718
12703: GO 12705
12705: DISABLE
// SayRadio ( Powell , DP-RuAttack ) ;
12706: LD_EXP 12
12710: PPUSH
12711: LD_STRING DP-RuAttack
12713: PPUSH
12714: CALL_OW 94
12718: END
// every 0 0$2 trigger not debug and SeeXY ( 1 , 168 , 74 ) and GetEnvironmentType ( 168 , 72 ) do
12719: LD_EXP 1
12723: NOT
12724: PUSH
12725: LD_INT 1
12727: PPUSH
12728: LD_INT 168
12730: PPUSH
12731: LD_INT 74
12733: PPUSH
12734: CALL_OW 293
12738: AND
12739: PUSH
12740: LD_INT 168
12742: PPUSH
12743: LD_INT 72
12745: PPUSH
12746: CALL_OW 553
12750: AND
12751: IFFALSE 12803
12753: GO 12755
12755: DISABLE
// begin CenterOnXY ( 168 , 72 ) ;
12756: LD_INT 168
12758: PPUSH
12759: LD_INT 72
12761: PPUSH
12762: CALL_OW 84
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Blockade ) ;
12766: LD_EXP 9
12770: PPUSH
12771: LD_STRING D
12773: PUSH
12774: LD_STRING I
12776: PUSH
12777: LD_STRING J
12779: PUSH
12780: LD_STRING S
12782: PUSH
12783: EMPTY
12784: LIST
12785: LIST
12786: LIST
12787: PUSH
12788: LD_EXP 25
12792: ARRAY
12793: STR
12794: PUSH
12795: LD_STRING -1-Blockade
12797: STR
12798: PPUSH
12799: CALL_OW 88
// end ;
12803: END
// every 0 0$2 trigger GameType = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_see , 4 ] ] ) do
12804: LD_EXP 2
12808: PUSH
12809: LD_INT 1
12811: EQUAL
12812: PUSH
12813: LD_INT 22
12815: PUSH
12816: LD_INT 1
12818: PUSH
12819: EMPTY
12820: LIST
12821: LIST
12822: PUSH
12823: LD_INT 101
12825: PUSH
12826: LD_INT 4
12828: PUSH
12829: EMPTY
12830: LIST
12831: LIST
12832: PUSH
12833: EMPTY
12834: LIST
12835: LIST
12836: PPUSH
12837: CALL_OW 69
12841: AND
12842: IFFALSE 13374
12844: GO 12846
12846: DISABLE
// begin ChangeSideFog ( 4 , 1 ) ;
12847: LD_INT 4
12849: PPUSH
12850: LD_INT 1
12852: PPUSH
12853: CALL_OW 343
// DialogueOn ;
12857: CALL_OW 6
// CenterNowOnUnits ( allyCommander ) ;
12861: LD_EXP 11
12865: PPUSH
12866: CALL_OW 87
// SayRadio ( allyCommander , DM-1-Contact ) ;
12870: LD_EXP 11
12874: PPUSH
12875: LD_STRING DM-1-Contact
12877: PPUSH
12878: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Contact ) ;
12882: LD_EXP 9
12886: PPUSH
12887: LD_STRING D
12889: PUSH
12890: LD_STRING I
12892: PUSH
12893: LD_STRING J
12895: PUSH
12896: LD_STRING S
12898: PUSH
12899: EMPTY
12900: LIST
12901: LIST
12902: LIST
12903: PUSH
12904: LD_EXP 25
12908: ARRAY
12909: STR
12910: PUSH
12911: LD_STRING -1-Contact
12913: STR
12914: PPUSH
12915: CALL_OW 88
// if commander = 1 then
12919: LD_EXP 25
12923: PUSH
12924: LD_INT 1
12926: EQUAL
12927: IFFALSE 13059
// begin SayRadio ( allyCommander , DM-2-Contact ) ;
12929: LD_EXP 11
12933: PPUSH
12934: LD_STRING DM-2-Contact
12936: PPUSH
12937: CALL_OW 94
// Say ( playerCommander , DI-2-Contact ) ;
12941: LD_EXP 9
12945: PPUSH
12946: LD_STRING DI-2-Contact
12948: PPUSH
12949: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) and GetAttitude ( 8 , 1 ) = att_enemy then
12953: LD_INT 22
12955: PUSH
12956: LD_INT 8
12958: PUSH
12959: EMPTY
12960: LIST
12961: LIST
12962: PUSH
12963: LD_INT 21
12965: PUSH
12966: LD_INT 1
12968: PUSH
12969: EMPTY
12970: LIST
12971: LIST
12972: PUSH
12973: EMPTY
12974: LIST
12975: LIST
12976: PPUSH
12977: CALL_OW 69
12981: PUSH
12982: LD_INT 8
12984: PPUSH
12985: LD_INT 1
12987: PPUSH
12988: CALL_OW 81
12992: PUSH
12993: LD_INT 2
12995: EQUAL
12996: AND
12997: IFFALSE 13023
// begin SayRadio ( allyCommander , DM-3-Contact ) ;
12999: LD_EXP 11
13003: PPUSH
13004: LD_STRING DM-3-Contact
13006: PPUSH
13007: CALL_OW 94
// Say ( playerCommander , DI-3-Contact ) ;
13011: LD_EXP 9
13015: PPUSH
13016: LD_STRING DI-3-Contact
13018: PPUSH
13019: CALL_OW 88
// end ; SayRadio ( allyCommander , DM-4-Contact ) ;
13023: LD_EXP 11
13027: PPUSH
13028: LD_STRING DM-4-Contact
13030: PPUSH
13031: CALL_OW 94
// Say ( playerCommander , DI-4-Contact ) ;
13035: LD_EXP 9
13039: PPUSH
13040: LD_STRING DI-4-Contact
13042: PPUSH
13043: CALL_OW 88
// SayRadio ( allyCommander , DM-5-Contact ) ;
13047: LD_EXP 11
13051: PPUSH
13052: LD_STRING DM-5-Contact
13054: PPUSH
13055: CALL_OW 94
// end ; if commander = 2 then
13059: LD_EXP 25
13063: PUSH
13064: LD_INT 2
13066: EQUAL
13067: IFFALSE 13199
// begin SayRadio ( allyCommander , DM-2c-Contact ) ;
13069: LD_EXP 11
13073: PPUSH
13074: LD_STRING DM-2c-Contact
13076: PPUSH
13077: CALL_OW 94
// Say ( playerCommander , DJ-2-Contact ) ;
13081: LD_EXP 9
13085: PPUSH
13086: LD_STRING DJ-2-Contact
13088: PPUSH
13089: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) and GetAttitude ( 8 , 1 ) = att_enemy then
13093: LD_INT 22
13095: PUSH
13096: LD_INT 8
13098: PUSH
13099: EMPTY
13100: LIST
13101: LIST
13102: PUSH
13103: LD_INT 21
13105: PUSH
13106: LD_INT 1
13108: PUSH
13109: EMPTY
13110: LIST
13111: LIST
13112: PUSH
13113: EMPTY
13114: LIST
13115: LIST
13116: PPUSH
13117: CALL_OW 69
13121: PUSH
13122: LD_INT 8
13124: PPUSH
13125: LD_INT 1
13127: PPUSH
13128: CALL_OW 81
13132: PUSH
13133: LD_INT 2
13135: EQUAL
13136: AND
13137: IFFALSE 13163
// begin SayRadio ( allyCommander , DM-3-Contact ) ;
13139: LD_EXP 11
13143: PPUSH
13144: LD_STRING DM-3-Contact
13146: PPUSH
13147: CALL_OW 94
// Say ( playerCommander , DJ-3-Contact ) ;
13151: LD_EXP 9
13155: PPUSH
13156: LD_STRING DJ-3-Contact
13158: PPUSH
13159: CALL_OW 88
// end ; SayRadio ( allyCommander , DM-4-Contact ) ;
13163: LD_EXP 11
13167: PPUSH
13168: LD_STRING DM-4-Contact
13170: PPUSH
13171: CALL_OW 94
// Say ( playerCommander , DJ-4-Contact ) ;
13175: LD_EXP 9
13179: PPUSH
13180: LD_STRING DJ-4-Contact
13182: PPUSH
13183: CALL_OW 88
// SayRadio ( allyCommander , DM-5a-Contact ) ;
13187: LD_EXP 11
13191: PPUSH
13192: LD_STRING DM-5a-Contact
13194: PPUSH
13195: CALL_OW 94
// end ; if commander = 3 then
13199: LD_EXP 25
13203: PUSH
13204: LD_INT 3
13206: EQUAL
13207: IFFALSE 13363
// begin SayRadio ( allyCommander , DM-2a-Contact ) ;
13209: LD_EXP 11
13213: PPUSH
13214: LD_STRING DM-2a-Contact
13216: PPUSH
13217: CALL_OW 94
// Say ( playerCommander , DS-2a-Contact ) ;
13221: LD_EXP 9
13225: PPUSH
13226: LD_STRING DS-2a-Contact
13228: PPUSH
13229: CALL_OW 88
// SayRadio ( allyCommander , DM-2b-Contact ) ;
13233: LD_EXP 11
13237: PPUSH
13238: LD_STRING DM-2b-Contact
13240: PPUSH
13241: CALL_OW 94
// Say ( playerCommander , DS-2b-Contact ) ;
13245: LD_EXP 9
13249: PPUSH
13250: LD_STRING DS-2b-Contact
13252: PPUSH
13253: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) and GetAttitude ( 8 , 1 ) = att_enemy then
13257: LD_INT 22
13259: PUSH
13260: LD_INT 8
13262: PUSH
13263: EMPTY
13264: LIST
13265: LIST
13266: PUSH
13267: LD_INT 21
13269: PUSH
13270: LD_INT 1
13272: PUSH
13273: EMPTY
13274: LIST
13275: LIST
13276: PUSH
13277: EMPTY
13278: LIST
13279: LIST
13280: PPUSH
13281: CALL_OW 69
13285: PUSH
13286: LD_INT 8
13288: PPUSH
13289: LD_INT 1
13291: PPUSH
13292: CALL_OW 81
13296: PUSH
13297: LD_INT 2
13299: EQUAL
13300: AND
13301: IFFALSE 13327
// begin SayRadio ( allyCommander , DM-3-Contact ) ;
13303: LD_EXP 11
13307: PPUSH
13308: LD_STRING DM-3-Contact
13310: PPUSH
13311: CALL_OW 94
// Say ( playerCommander , DS-3-Contact ) ;
13315: LD_EXP 9
13319: PPUSH
13320: LD_STRING DS-3-Contact
13322: PPUSH
13323: CALL_OW 88
// end ; SayRadio ( allyCommander , DM-4-Contact ) ;
13327: LD_EXP 11
13331: PPUSH
13332: LD_STRING DM-4-Contact
13334: PPUSH
13335: CALL_OW 94
// Say ( playerCommander , DS-4-Contact ) ;
13339: LD_EXP 9
13343: PPUSH
13344: LD_STRING DS-4-Contact
13346: PPUSH
13347: CALL_OW 88
// SayRadio ( allyCommander , DM-5-Contact ) ;
13351: LD_EXP 11
13355: PPUSH
13356: LD_STRING DM-5-Contact
13358: PPUSH
13359: CALL_OW 94
// end ; DialogueOff ;
13363: CALL_OW 7
// ChangeMissionObjectives ( O3 ) ;
13367: LD_STRING O3
13369: PPUSH
13370: CALL_OW 337
// end ;
13374: END
// every 0 0$10 trigger GameType = 1 and legDestCounter >= [ 15 , 20 , 25 ] [ Difficulty ] and FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_warehouse ] ] ) and FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] ] ) >= 5 do var time , sib , sources , i ;
13375: LD_EXP 2
13379: PUSH
13380: LD_INT 1
13382: EQUAL
13383: PUSH
13384: LD_EXP 18
13388: PUSH
13389: LD_INT 15
13391: PUSH
13392: LD_INT 20
13394: PUSH
13395: LD_INT 25
13397: PUSH
13398: EMPTY
13399: LIST
13400: LIST
13401: LIST
13402: PUSH
13403: LD_OWVAR 67
13407: ARRAY
13408: GREATEREQUAL
13409: AND
13410: PUSH
13411: LD_INT 22
13413: PUSH
13414: LD_INT 8
13416: PUSH
13417: EMPTY
13418: LIST
13419: LIST
13420: PUSH
13421: LD_INT 30
13423: PUSH
13424: LD_INT 1
13426: PUSH
13427: EMPTY
13428: LIST
13429: LIST
13430: PUSH
13431: EMPTY
13432: LIST
13433: LIST
13434: PPUSH
13435: CALL_OW 69
13439: AND
13440: PUSH
13441: LD_INT 22
13443: PUSH
13444: LD_INT 8
13446: PUSH
13447: EMPTY
13448: LIST
13449: LIST
13450: PUSH
13451: LD_INT 21
13453: PUSH
13454: LD_INT 3
13456: PUSH
13457: EMPTY
13458: LIST
13459: LIST
13460: PUSH
13461: EMPTY
13462: LIST
13463: LIST
13464: PPUSH
13465: CALL_OW 69
13469: PUSH
13470: LD_INT 5
13472: GREATEREQUAL
13473: AND
13474: IFFALSE 13997
13476: GO 13478
13478: DISABLE
13479: LD_INT 0
13481: PPUSH
13482: PPUSH
13483: PPUSH
13484: PPUSH
// begin DialogueOn ;
13485: CALL_OW 6
// SayRadio ( Farmer , DF-1-Leg ) ;
13489: LD_EXP 13
13493: PPUSH
13494: LD_STRING DF-1-Leg
13496: PPUSH
13497: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Leg ) ;
13501: LD_EXP 9
13505: PPUSH
13506: LD_STRING D
13508: PUSH
13509: LD_STRING I
13511: PUSH
13512: LD_STRING J
13514: PUSH
13515: LD_STRING S
13517: PUSH
13518: EMPTY
13519: LIST
13520: LIST
13521: LIST
13522: PUSH
13523: LD_EXP 25
13527: ARRAY
13528: STR
13529: PUSH
13530: LD_STRING -1-Leg
13532: STR
13533: PPUSH
13534: CALL_OW 88
// SayRadio ( Farmer , DF-2-Leg ) ;
13538: LD_EXP 13
13542: PPUSH
13543: LD_STRING DF-2-Leg
13545: PPUSH
13546: CALL_OW 94
// DialogueOff ;
13550: CALL_OW 7
// case Query ( QLegionOffer ) of 1 :
13554: LD_STRING QLegionOffer
13556: PPUSH
13557: CALL_OW 97
13561: PUSH
13562: LD_INT 1
13564: DOUBLE
13565: EQUAL
13566: IFTRUE 13570
13568: GO 13573
13570: POP
// ; 2 :
13571: GO 13587
13573: LD_INT 2
13575: DOUBLE
13576: EQUAL
13577: IFTRUE 13581
13579: GO 13586
13581: POP
// exit ; end ;
13582: GO 13997
13584: GO 13587
13586: POP
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -2-Leg ) ;
13587: LD_EXP 9
13591: PPUSH
13592: LD_STRING D
13594: PUSH
13595: LD_STRING I
13597: PUSH
13598: LD_STRING J
13600: PUSH
13601: LD_STRING S
13603: PUSH
13604: EMPTY
13605: LIST
13606: LIST
13607: LIST
13608: PUSH
13609: LD_EXP 25
13613: ARRAY
13614: STR
13615: PUSH
13616: LD_STRING -2-Leg
13618: STR
13619: PPUSH
13620: CALL_OW 88
// legOfferAccepted := true ;
13624: LD_ADDR_EXP 20
13628: PUSH
13629: LD_INT 1
13631: ST_TO_ADDR
// SetAreaMapShow ( legOfferArea , 1 ) ;
13632: LD_INT 21
13634: PPUSH
13635: LD_INT 1
13637: PPUSH
13638: CALL_OW 424
// CenterOnXY ( 190 , 227 ) ;
13642: LD_INT 190
13644: PPUSH
13645: LD_INT 227
13647: PPUSH
13648: CALL_OW 84
// time := [ 8 8$00 , 7 7$00 , 6 6$00 ] [ Difficulty ] ;
13652: LD_ADDR_VAR 0 1
13656: PUSH
13657: LD_INT 16800
13659: PUSH
13660: LD_INT 14700
13662: PUSH
13663: LD_INT 12600
13665: PUSH
13666: EMPTY
13667: LIST
13668: LIST
13669: LIST
13670: PUSH
13671: LD_OWVAR 67
13675: ARRAY
13676: ST_TO_ADDR
// sib := 100 ;
13677: LD_ADDR_VAR 0 2
13681: PUSH
13682: LD_INT 100
13684: ST_TO_ADDR
// disableGlobalTimer := true ;
13685: LD_ADDR_EXP 4
13689: PUSH
13690: LD_INT 1
13692: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13693: LD_INT 35
13695: PPUSH
13696: CALL_OW 67
// time := time - 0 0$1 ;
13700: LD_ADDR_VAR 0 1
13704: PUSH
13705: LD_VAR 0 1
13709: PUSH
13710: LD_INT 35
13712: MINUS
13713: ST_TO_ADDR
// sources := GetResourceArea ( legOfferArea , mat_siberit ) ;
13714: LD_ADDR_VAR 0 3
13718: PUSH
13719: LD_INT 21
13721: PPUSH
13722: LD_INT 3
13724: PPUSH
13725: CALL_OW 287
13729: ST_TO_ADDR
// display_strings := [ #SkrTime , tick , #Skr-LegOffer , sib , time ] ;
13730: LD_ADDR_OWVAR 47
13734: PUSH
13735: LD_STRING #SkrTime
13737: PUSH
13738: LD_OWVAR 1
13742: PUSH
13743: LD_STRING #Skr-LegOffer
13745: PUSH
13746: LD_VAR 0 2
13750: PUSH
13751: LD_VAR 0 1
13755: PUSH
13756: EMPTY
13757: LIST
13758: LIST
13759: LIST
13760: LIST
13761: LIST
13762: ST_TO_ADDR
// if sources then
13763: LD_VAR 0 3
13767: IFFALSE 13799
// begin sib := sib - sources * 10 ;
13769: LD_ADDR_VAR 0 2
13773: PUSH
13774: LD_VAR 0 2
13778: PUSH
13779: LD_VAR 0 3
13783: PUSH
13784: LD_INT 10
13786: MUL
13787: MINUS
13788: ST_TO_ADDR
// EraseResourceArea ( legOfferArea , mat_siberit ) ;
13789: LD_INT 21
13791: PPUSH
13792: LD_INT 3
13794: PPUSH
13795: CALL_OW 286
// end ; until time = 0 0$00 or sib <= 0 or not FilterAllUnits ( [ f_side , 8 ] ) ;
13799: LD_VAR 0 1
13803: PUSH
13804: LD_INT 0
13806: EQUAL
13807: PUSH
13808: LD_VAR 0 2
13812: PUSH
13813: LD_INT 0
13815: LESSEQUAL
13816: OR
13817: PUSH
13818: LD_INT 22
13820: PUSH
13821: LD_INT 8
13823: PUSH
13824: EMPTY
13825: LIST
13826: LIST
13827: PPUSH
13828: CALL_OW 69
13832: NOT
13833: OR
13834: IFFALSE 13693
// SetAreaMapShow ( legOfferArea , 0 ) ;
13836: LD_INT 21
13838: PPUSH
13839: LD_INT 0
13841: PPUSH
13842: CALL_OW 424
// disableGlobalTimer := false ;
13846: LD_ADDR_EXP 4
13850: PUSH
13851: LD_INT 0
13853: ST_TO_ADDR
// if sib <= 0 then
13854: LD_VAR 0 2
13858: PUSH
13859: LD_INT 0
13861: LESSEQUAL
13862: IFFALSE 13978
// begin legChangeSide := true ;
13864: LD_ADDR_EXP 21
13868: PUSH
13869: LD_INT 1
13871: ST_TO_ADDR
// SayRadio ( Farmer , DF-4y-Leg ) ;
13872: LD_EXP 13
13876: PPUSH
13877: LD_STRING DF-4y-Leg
13879: PPUSH
13880: CALL_OW 94
// ChangeMissionObjectives ( O3a ) ;
13884: LD_STRING O3a
13886: PPUSH
13887: CALL_OW 337
// ChangeSideFog ( 8 , 1 ) ;
13891: LD_INT 8
13893: PPUSH
13894: LD_INT 1
13896: PPUSH
13897: CALL_OW 343
// SetAttitude ( 8 , 1 , att_friend , true ) ;
13901: LD_INT 8
13903: PPUSH
13904: LD_INT 1
13906: PPUSH
13907: LD_INT 1
13909: PPUSH
13910: LD_INT 1
13912: PPUSH
13913: CALL_OW 80
// SetAttitude ( 8 , 4 , att_friend , true ) ;
13917: LD_INT 8
13919: PPUSH
13920: LD_INT 4
13922: PPUSH
13923: LD_INT 1
13925: PPUSH
13926: LD_INT 1
13928: PPUSH
13929: CALL_OW 80
// SetAttitude ( 8 , 6 , att_enemy , true ) ;
13933: LD_INT 8
13935: PPUSH
13936: LD_INT 6
13938: PPUSH
13939: LD_INT 2
13941: PPUSH
13942: LD_INT 1
13944: PPUSH
13945: CALL_OW 80
// SetAttitude ( 8 , 3 , att_enemy , true ) ;
13949: LD_INT 8
13951: PPUSH
13952: LD_INT 3
13954: PPUSH
13955: LD_INT 2
13957: PPUSH
13958: LD_INT 1
13960: PPUSH
13961: CALL_OW 80
// wait ( 0 0$30 ) ;
13965: LD_INT 1050
13967: PPUSH
13968: CALL_OW 67
// PrepareLegionReinforcements ;
13972: CALL 10268 0 0
// end else
13976: GO 13997
// begin ChangeMissionObjectives ( O3a ) ;
13978: LD_STRING O3a
13980: PPUSH
13981: CALL_OW 337
// SayRadio ( Farmer , DF-4n-Leg ) ;
13985: LD_EXP 13
13989: PPUSH
13990: LD_STRING DF-4n-Leg
13992: PPUSH
13993: CALL_OW 94
// end ; end ;
13997: PPOPN 4
13999: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) = 0 and GetAttitude ( 8 , 1 ) = att_enemy do
14000: LD_INT 22
14002: PUSH
14003: LD_INT 8
14005: PUSH
14006: EMPTY
14007: LIST
14008: LIST
14009: PUSH
14010: LD_INT 21
14012: PUSH
14013: LD_INT 1
14015: PUSH
14016: EMPTY
14017: LIST
14018: LIST
14019: PUSH
14020: EMPTY
14021: LIST
14022: LIST
14023: PPUSH
14024: CALL_OW 69
14028: PUSH
14029: LD_INT 0
14031: EQUAL
14032: PUSH
14033: LD_INT 8
14035: PPUSH
14036: LD_INT 1
14038: PPUSH
14039: CALL_OW 81
14043: PUSH
14044: LD_INT 2
14046: EQUAL
14047: AND
14048: IFFALSE 14060
14050: GO 14052
14052: DISABLE
// ChangeMissionObjectives ( O3a ) ;
14053: LD_STRING O3a
14055: PPUSH
14056: CALL_OW 337
14060: END
// every 0 0$1 trigger GameType = 1 and game and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) = 0 do
14061: LD_EXP 2
14065: PUSH
14066: LD_INT 1
14068: EQUAL
14069: PUSH
14070: LD_EXP 3
14074: AND
14075: PUSH
14076: LD_INT 22
14078: PUSH
14079: LD_INT 3
14081: PUSH
14082: EMPTY
14083: LIST
14084: LIST
14085: PUSH
14086: LD_INT 21
14088: PUSH
14089: LD_INT 1
14091: PUSH
14092: EMPTY
14093: LIST
14094: LIST
14095: PUSH
14096: EMPTY
14097: LIST
14098: LIST
14099: PPUSH
14100: CALL_OW 69
14104: PUSH
14105: LD_INT 0
14107: EQUAL
14108: AND
14109: PUSH
14110: LD_INT 22
14112: PUSH
14113: LD_INT 3
14115: PUSH
14116: EMPTY
14117: LIST
14118: LIST
14119: PUSH
14120: LD_INT 30
14122: PUSH
14123: LD_INT 1
14125: PUSH
14126: EMPTY
14127: LIST
14128: LIST
14129: PUSH
14130: EMPTY
14131: LIST
14132: LIST
14133: PPUSH
14134: CALL_OW 69
14138: PUSH
14139: LD_INT 0
14141: EQUAL
14142: AND
14143: IFFALSE 14381
14145: GO 14147
14147: DISABLE
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Win ) ;
14148: LD_EXP 9
14152: PPUSH
14153: LD_STRING D
14155: PUSH
14156: LD_STRING I
14158: PUSH
14159: LD_STRING J
14161: PUSH
14162: LD_STRING S
14164: PUSH
14165: EMPTY
14166: LIST
14167: LIST
14168: LIST
14169: PUSH
14170: LD_EXP 25
14174: ARRAY
14175: STR
14176: PUSH
14177: LD_STRING -1-Win
14179: STR
14180: PPUSH
14181: CALL_OW 88
// if tick >= [ 150 150$0 , 130 130$0 , 110 110$0 ] [ Difficulty ] then
14185: LD_OWVAR 1
14189: PUSH
14190: LD_INT 315000
14192: PUSH
14193: LD_INT 273000
14195: PUSH
14196: LD_INT 231000
14198: PUSH
14199: EMPTY
14200: LIST
14201: LIST
14202: LIST
14203: PUSH
14204: LD_OWVAR 67
14208: ARRAY
14209: GREATEREQUAL
14210: IFFALSE 14225
// AddMedal ( med1 , - 1 ) else
14212: LD_STRING med1
14214: PPUSH
14215: LD_INT 1
14217: NEG
14218: PPUSH
14219: CALL_OW 101
14223: GO 14235
// AddMedal ( med1 , 1 ) ;
14225: LD_STRING med1
14227: PPUSH
14228: LD_INT 1
14230: PPUSH
14231: CALL_OW 101
// if allyDestCounter >= [ 20 , 15 , 10 ] [ Difficulty ] then
14235: LD_EXP 22
14239: PUSH
14240: LD_INT 20
14242: PUSH
14243: LD_INT 15
14245: PUSH
14246: LD_INT 10
14248: PUSH
14249: EMPTY
14250: LIST
14251: LIST
14252: LIST
14253: PUSH
14254: LD_OWVAR 67
14258: ARRAY
14259: GREATEREQUAL
14260: IFFALSE 14275
// AddMedal ( med2 , - 1 ) else
14262: LD_STRING med2
14264: PPUSH
14265: LD_INT 1
14267: NEG
14268: PPUSH
14269: CALL_OW 101
14273: GO 14285
// AddMedal ( med2 , 1 ) ;
14275: LD_STRING med2
14277: PPUSH
14278: LD_INT 1
14280: PPUSH
14281: CALL_OW 101
// if GetAttitude ( 8 , 1 ) = att_friend then
14285: LD_INT 8
14287: PPUSH
14288: LD_INT 1
14290: PPUSH
14291: CALL_OW 81
14295: PUSH
14296: LD_INT 1
14298: EQUAL
14299: IFFALSE 14313
// AddMedal ( med3 , 1 ) else
14301: LD_STRING med3
14303: PPUSH
14304: LD_INT 1
14306: PPUSH
14307: CALL_OW 101
14311: GO 14370
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) = 0 then
14313: LD_INT 22
14315: PUSH
14316: LD_INT 8
14318: PUSH
14319: EMPTY
14320: LIST
14321: LIST
14322: PUSH
14323: LD_INT 21
14325: PUSH
14326: LD_INT 1
14328: PUSH
14329: EMPTY
14330: LIST
14331: LIST
14332: PUSH
14333: EMPTY
14334: LIST
14335: LIST
14336: PPUSH
14337: CALL_OW 69
14341: PUSH
14342: LD_INT 0
14344: EQUAL
14345: IFFALSE 14359
// AddMedal ( med3 , 2 ) else
14347: LD_STRING med3
14349: PPUSH
14350: LD_INT 2
14352: PPUSH
14353: CALL_OW 101
14357: GO 14370
// AddMedal ( med3 , - 1 ) ;
14359: LD_STRING med3
14361: PPUSH
14362: LD_INT 1
14364: NEG
14365: PPUSH
14366: CALL_OW 101
// GiveMedals ( MAIN ) ;
14370: LD_STRING MAIN
14372: PPUSH
14373: CALL_OW 102
// YouWin ;
14377: CALL_OW 103
// end ;
14381: END
// every 10 trigger GameType = 1 and staticMines and FilterUnitsInArea ( minesArea , [ f_enemy , 8 ] ) do var i , j , tmp , x , y ;
14382: LD_EXP 2
14386: PUSH
14387: LD_INT 1
14389: EQUAL
14390: PUSH
14391: LD_EXP 16
14395: AND
14396: PUSH
14397: LD_INT 20
14399: PPUSH
14400: LD_INT 81
14402: PUSH
14403: LD_INT 8
14405: PUSH
14406: EMPTY
14407: LIST
14408: LIST
14409: PPUSH
14410: CALL_OW 70
14414: AND
14415: IFFALSE 14694
14417: GO 14419
14419: DISABLE
14420: LD_INT 0
14422: PPUSH
14423: PPUSH
14424: PPUSH
14425: PPUSH
14426: PPUSH
// begin enable ;
14427: ENABLE
// tmp := FilterUnitsInArea ( minesArea , [ f_enemy , 8 ] ) ;
14428: LD_ADDR_VAR 0 3
14432: PUSH
14433: LD_INT 20
14435: PPUSH
14436: LD_INT 81
14438: PUSH
14439: LD_INT 8
14441: PUSH
14442: EMPTY
14443: LIST
14444: LIST
14445: PPUSH
14446: CALL_OW 70
14450: ST_TO_ADDR
// if not tmp then
14451: LD_VAR 0 3
14455: NOT
14456: IFFALSE 14460
// exit ;
14458: GO 14694
// for i in tmp do
14460: LD_ADDR_VAR 0 1
14464: PUSH
14465: LD_VAR 0 3
14469: PUSH
14470: FOR_IN
14471: IFFALSE 14692
// begin x := GetX ( i ) ;
14473: LD_ADDR_VAR 0 4
14477: PUSH
14478: LD_VAR 0 1
14482: PPUSH
14483: CALL_OW 250
14487: ST_TO_ADDR
// y := GetY ( i ) ;
14488: LD_ADDR_VAR 0 5
14492: PUSH
14493: LD_VAR 0 1
14497: PPUSH
14498: CALL_OW 251
14502: ST_TO_ADDR
// if MineAtPos ( x , y ) then
14503: LD_VAR 0 4
14507: PPUSH
14508: LD_VAR 0 5
14512: PPUSH
14513: CALL_OW 458
14517: IFFALSE 14690
// begin LaunchMineAtPos ( x , y , 8 ) ;
14519: LD_VAR 0 4
14523: PPUSH
14524: LD_VAR 0 5
14528: PPUSH
14529: LD_INT 8
14531: PPUSH
14532: CALL_OW 456
// if not dialogueMineDetected then
14536: LD_EXP 28
14540: NOT
14541: IFFALSE 14602
// begin CenterNowOnXY ( x , y ) ;
14543: LD_VAR 0 4
14547: PPUSH
14548: LD_VAR 0 5
14552: PPUSH
14553: CALL_OW 86
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Mine ) ;
14557: LD_EXP 9
14561: PPUSH
14562: LD_STRING D
14564: PUSH
14565: LD_STRING I
14567: PUSH
14568: LD_STRING J
14570: PUSH
14571: LD_STRING S
14573: PUSH
14574: EMPTY
14575: LIST
14576: LIST
14577: LIST
14578: PUSH
14579: LD_EXP 25
14583: ARRAY
14584: STR
14585: PUSH
14586: LD_STRING -1-Mine
14588: STR
14589: PPUSH
14590: CALL_OW 88
// dialogueMineDetected := true ;
14594: LD_ADDR_EXP 28
14598: PUSH
14599: LD_INT 1
14601: ST_TO_ADDR
// end ; for j = 1 to staticMines do
14602: LD_ADDR_VAR 0 2
14606: PUSH
14607: DOUBLE
14608: LD_INT 1
14610: DEC
14611: ST_TO_ADDR
14612: LD_EXP 16
14616: PUSH
14617: FOR_TO
14618: IFFALSE 14688
// if staticMines [ j ] [ 1 ] = x and staticMines [ j ] [ 2 ] = y then
14620: LD_EXP 16
14624: PUSH
14625: LD_VAR 0 2
14629: ARRAY
14630: PUSH
14631: LD_INT 1
14633: ARRAY
14634: PUSH
14635: LD_VAR 0 4
14639: EQUAL
14640: PUSH
14641: LD_EXP 16
14645: PUSH
14646: LD_VAR 0 2
14650: ARRAY
14651: PUSH
14652: LD_INT 2
14654: ARRAY
14655: PUSH
14656: LD_VAR 0 5
14660: EQUAL
14661: AND
14662: IFFALSE 14686
// begin staticMines := Delete ( staticMines , j ) ;
14664: LD_ADDR_EXP 16
14668: PUSH
14669: LD_EXP 16
14673: PPUSH
14674: LD_VAR 0 2
14678: PPUSH
14679: CALL_OW 3
14683: ST_TO_ADDR
// break ;
14684: GO 14688
// end ;
14686: GO 14617
14688: POP
14689: POP
// end ; end ;
14690: GO 14470
14692: POP
14693: POP
// end ;
14694: PPOPN 5
14696: END
// every 30 30$00 + 50 50$00 trigger GameType = 1 and game and sibBombAllowed and UnitFilter ( mc_bases [ mc_rus_1 ] , [ f_btype , b_factory ] ) do var bomb , e ;
14697: LD_EXP 2
14701: PUSH
14702: LD_INT 1
14704: EQUAL
14705: PUSH
14706: LD_EXP 3
14710: AND
14711: PUSH
14712: LD_EXP 23
14716: AND
14717: PUSH
14718: LD_EXP 47
14722: PUSH
14723: LD_EXP 7
14727: ARRAY
14728: PPUSH
14729: LD_INT 30
14731: PUSH
14732: LD_INT 3
14734: PUSH
14735: EMPTY
14736: LIST
14737: LIST
14738: PPUSH
14739: CALL_OW 72
14743: AND
14744: IFFALSE 14948
14746: GO 14748
14748: DISABLE
14749: LD_INT 0
14751: PPUSH
14752: PPUSH
// begin enable ;
14753: ENABLE
// MC_InsertProduceList ( mc_rus_1 , [ [ ru_heavy_wheeled , engine_siberite , control_computer , ru_siberium_rocket ] ] ) ;
14754: LD_EXP 7
14758: PPUSH
14759: LD_INT 23
14761: PUSH
14762: LD_INT 3
14764: PUSH
14765: LD_INT 3
14767: PUSH
14768: LD_INT 48
14770: PUSH
14771: EMPTY
14772: LIST
14773: LIST
14774: LIST
14775: LIST
14776: PUSH
14777: EMPTY
14778: LIST
14779: PPUSH
14780: CALL 80309 0 2
// repeat wait ( 0 0$1 ) ;
14784: LD_INT 35
14786: PPUSH
14787: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) ;
14791: LD_INT 22
14793: PUSH
14794: LD_INT 3
14796: PUSH
14797: EMPTY
14798: LIST
14799: LIST
14800: PUSH
14801: LD_INT 34
14803: PUSH
14804: LD_INT 48
14806: PUSH
14807: EMPTY
14808: LIST
14809: LIST
14810: PUSH
14811: EMPTY
14812: LIST
14813: LIST
14814: PPUSH
14815: CALL_OW 69
14819: IFFALSE 14784
// bomb := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) ;
14821: LD_ADDR_VAR 0 1
14825: PUSH
14826: LD_INT 22
14828: PUSH
14829: LD_INT 3
14831: PUSH
14832: EMPTY
14833: LIST
14834: LIST
14835: PUSH
14836: LD_INT 34
14838: PUSH
14839: LD_INT 48
14841: PUSH
14842: EMPTY
14843: LIST
14844: LIST
14845: PUSH
14846: EMPTY
14847: LIST
14848: LIST
14849: PPUSH
14850: CALL_OW 69
14854: ST_TO_ADDR
// e := FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_type , unit_building ] ] ) ;
14855: LD_ADDR_VAR 0 2
14859: PUSH
14860: LD_INT 81
14862: PUSH
14863: LD_INT 3
14865: PUSH
14866: EMPTY
14867: LIST
14868: LIST
14869: PUSH
14870: LD_INT 21
14872: PUSH
14873: LD_INT 3
14875: PUSH
14876: EMPTY
14877: LIST
14878: LIST
14879: PUSH
14880: EMPTY
14881: LIST
14882: LIST
14883: PPUSH
14884: CALL_OW 69
14888: ST_TO_ADDR
// if e then
14889: LD_VAR 0 2
14893: IFFALSE 14919
// e := NearestUnitToUnit ( e , bomb [ 1 ] ) ;
14895: LD_ADDR_VAR 0 2
14899: PUSH
14900: LD_VAR 0 2
14904: PPUSH
14905: LD_VAR 0 1
14909: PUSH
14910: LD_INT 1
14912: ARRAY
14913: PPUSH
14914: CALL_OW 74
14918: ST_TO_ADDR
// ComAttackPlace ( bomb , GetX ( e ) , GetY ( e ) ) ;
14919: LD_VAR 0 1
14923: PPUSH
14924: LD_VAR 0 2
14928: PPUSH
14929: CALL_OW 250
14933: PPUSH
14934: LD_VAR 0 2
14938: PPUSH
14939: CALL_OW 251
14943: PPUSH
14944: CALL_OW 116
// end ;
14948: PPOPN 2
14950: END
// every 0 0$2 trigger Difficulty > 1 and UnitFilter ( mc_bases [ mc_rus_1 ] , [ f_class , 3 ] ) and GameType = 1 and game and GetTech ( tech_Behemoth , 3 ) = state_researched do var tmp , i ;
14951: LD_OWVAR 67
14955: PUSH
14956: LD_INT 1
14958: GREATER
14959: PUSH
14960: LD_EXP 47
14964: PUSH
14965: LD_EXP 7
14969: ARRAY
14970: PPUSH
14971: LD_INT 25
14973: PUSH
14974: LD_INT 3
14976: PUSH
14977: EMPTY
14978: LIST
14979: LIST
14980: PPUSH
14981: CALL_OW 72
14985: AND
14986: PUSH
14987: LD_EXP 2
14991: PUSH
14992: LD_INT 1
14994: EQUAL
14995: AND
14996: PUSH
14997: LD_EXP 3
15001: AND
15002: PUSH
15003: LD_INT 23
15005: PPUSH
15006: LD_INT 3
15008: PPUSH
15009: CALL_OW 321
15013: PUSH
15014: LD_INT 2
15016: EQUAL
15017: AND
15018: IFFALSE 15145
15020: GO 15022
15022: DISABLE
15023: LD_INT 0
15025: PPUSH
15026: PPUSH
// begin tmp := UnitFilter ( mc_bases [ mc_rus_1 ] , [ f_class , 3 ] ) ;
15027: LD_ADDR_VAR 0 1
15031: PUSH
15032: LD_EXP 47
15036: PUSH
15037: LD_EXP 7
15041: ARRAY
15042: PPUSH
15043: LD_INT 25
15045: PUSH
15046: LD_INT 3
15048: PUSH
15049: EMPTY
15050: LIST
15051: LIST
15052: PPUSH
15053: CALL_OW 72
15057: ST_TO_ADDR
// if not tmp then
15058: LD_VAR 0 1
15062: NOT
15063: IFFALSE 15067
// exit ;
15065: GO 15145
// for i in tmp do
15067: LD_ADDR_VAR 0 2
15071: PUSH
15072: LD_VAR 0 1
15076: PUSH
15077: FOR_IN
15078: IFFALSE 15124
// begin SetTag ( i , 29 ) ;
15080: LD_VAR 0 2
15084: PPUSH
15085: LD_INT 29
15087: PPUSH
15088: CALL_OW 109
// ComExitBuilding ( i ) ;
15092: LD_VAR 0 2
15096: PPUSH
15097: CALL_OW 122
// AddComBuildBehemoth ( i , b_behemoth , 97 , 133 , 0 ) ;
15101: LD_VAR 0 2
15105: PPUSH
15106: LD_INT 37
15108: PPUSH
15109: LD_INT 97
15111: PPUSH
15112: LD_INT 133
15114: PPUSH
15115: LD_INT 0
15117: PPUSH
15118: CALL_OW 230
// end ;
15122: GO 15077
15124: POP
15125: POP
// wait ( 1 1$00 ) ;
15126: LD_INT 2100
15128: PPUSH
15129: CALL_OW 67
// MC_Reset ( mc_rus_1 , 29 ) ;
15133: LD_EXP 7
15137: PPUSH
15138: LD_INT 29
15140: PPUSH
15141: CALL 60660 0 2
// end ;
15145: PPOPN 2
15147: END
// every 7 7$00 trigger GameType = 1 and GetBType ( HexInfo ( 84 , 128 ) ) = b_warehouse and GetSide ( HexInfo ( 84 , 128 ) ) = 3 do var veh , depot ;
15148: LD_EXP 2
15152: PUSH
15153: LD_INT 1
15155: EQUAL
15156: PUSH
15157: LD_INT 84
15159: PPUSH
15160: LD_INT 128
15162: PPUSH
15163: CALL_OW 428
15167: PPUSH
15168: CALL_OW 266
15172: PUSH
15173: LD_INT 1
15175: EQUAL
15176: AND
15177: PUSH
15178: LD_INT 84
15180: PPUSH
15181: LD_INT 128
15183: PPUSH
15184: CALL_OW 428
15188: PPUSH
15189: CALL_OW 255
15193: PUSH
15194: LD_INT 3
15196: EQUAL
15197: AND
15198: IFFALSE 15371
15200: GO 15202
15202: DISABLE
15203: LD_INT 0
15205: PPUSH
15206: PPUSH
// begin enable ;
15207: ENABLE
// depot := HexInfo ( 84 , 128 ) ;
15208: LD_ADDR_VAR 0 2
15212: PUSH
15213: LD_INT 84
15215: PPUSH
15216: LD_INT 128
15218: PPUSH
15219: CALL_OW 428
15223: ST_TO_ADDR
// uc_side := 3 ;
15224: LD_ADDR_OWVAR 20
15228: PUSH
15229: LD_INT 3
15231: ST_TO_ADDR
// uc_nation := 3 ;
15232: LD_ADDR_OWVAR 21
15236: PUSH
15237: LD_INT 3
15239: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_siberite , control_computer , ru_cargo_bay , 0 ) ;
15240: LD_INT 21
15242: PPUSH
15243: LD_INT 3
15245: PPUSH
15246: LD_INT 3
15248: PPUSH
15249: LD_INT 51
15251: PPUSH
15252: LD_INT 0
15254: PPUSH
15255: CALL 24193 0 5
// veh := CreateVehicle ;
15259: LD_ADDR_VAR 0 1
15263: PUSH
15264: CALL_OW 45
15268: ST_TO_ADDR
// PlaceUnitXY ( veh , 126 , 227 , false ) ;
15269: LD_VAR 0 1
15273: PPUSH
15274: LD_INT 126
15276: PPUSH
15277: LD_INT 227
15279: PPUSH
15280: LD_INT 0
15282: PPUSH
15283: CALL_OW 48
// SetCargo ( veh , mat_oil , 100 ) ;
15287: LD_VAR 0 1
15291: PPUSH
15292: LD_INT 2
15294: PPUSH
15295: LD_INT 100
15297: PPUSH
15298: CALL_OW 290
// ComGive ( veh , depot ) ;
15302: LD_VAR 0 1
15306: PPUSH
15307: LD_VAR 0 2
15311: PPUSH
15312: CALL_OW 161
// AddComMoveXY ( veh , 126 , 227 ) ;
15316: LD_VAR 0 1
15320: PPUSH
15321: LD_INT 126
15323: PPUSH
15324: LD_INT 227
15326: PPUSH
15327: CALL_OW 171
// wait ( 0 0$10 ) ;
15331: LD_INT 350
15333: PPUSH
15334: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
15338: LD_INT 35
15340: PPUSH
15341: CALL_OW 67
// until IsAt ( veh , 126 , 227 ) ;
15345: LD_VAR 0 1
15349: PPUSH
15350: LD_INT 126
15352: PPUSH
15353: LD_INT 227
15355: PPUSH
15356: CALL_OW 307
15360: IFFALSE 15338
// RemoveUnit ( veh ) ;
15362: LD_VAR 0 1
15366: PPUSH
15367: CALL_OW 64
// end ;
15371: PPOPN 2
15373: END
// every 9 9$00 trigger GameType = 1 and outpostEscape and commander = 2 do var veh , depot ;
15374: LD_EXP 2
15378: PUSH
15379: LD_INT 1
15381: EQUAL
15382: PUSH
15383: LD_EXP 27
15387: AND
15388: PUSH
15389: LD_EXP 25
15393: PUSH
15394: LD_INT 2
15396: EQUAL
15397: AND
15398: IFFALSE 15590
15400: GO 15402
15402: DISABLE
15403: LD_INT 0
15405: PPUSH
15406: PPUSH
// begin enable ;
15407: ENABLE
// if tick >= [ 50 50$00 , 40 40$00 , 30 30$00 ] [ Difficulty ] then
15408: LD_OWVAR 1
15412: PUSH
15413: LD_INT 105000
15415: PUSH
15416: LD_INT 84000
15418: PUSH
15419: LD_INT 63000
15421: PUSH
15422: EMPTY
15423: LIST
15424: LIST
15425: LIST
15426: PUSH
15427: LD_OWVAR 67
15431: ARRAY
15432: GREATEREQUAL
15433: IFFALSE 15436
// disable ;
15435: DISABLE
// uc_side := 4 ;
15436: LD_ADDR_OWVAR 20
15440: PUSH
15441: LD_INT 4
15443: ST_TO_ADDR
// uc_nation := 1 ;
15444: LD_ADDR_OWVAR 21
15448: PUSH
15449: LD_INT 1
15451: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_cargo_bay , 0 ) ;
15452: LD_INT 2
15454: PPUSH
15455: LD_INT 3
15457: PPUSH
15458: LD_INT 3
15460: PPUSH
15461: LD_INT 12
15463: PPUSH
15464: LD_INT 0
15466: PPUSH
15467: CALL 24193 0 5
// veh := CreateVehicle ;
15471: LD_ADDR_VAR 0 1
15475: PUSH
15476: CALL_OW 45
15480: ST_TO_ADDR
// PlaceUnitXY ( veh , 229 , 226 , false ) ;
15481: LD_VAR 0 1
15485: PPUSH
15486: LD_INT 229
15488: PPUSH
15489: LD_INT 226
15491: PPUSH
15492: LD_INT 0
15494: PPUSH
15495: CALL_OW 48
// SetCargo ( veh , mat_cans , 100 ) ;
15499: LD_VAR 0 1
15503: PPUSH
15504: LD_INT 1
15506: PPUSH
15507: LD_INT 100
15509: PPUSH
15510: CALL_OW 290
// AddComMoveToArea ( veh , ruOutpostArea ) ;
15514: LD_VAR 0 1
15518: PPUSH
15519: LD_INT 25
15521: PPUSH
15522: CALL_OW 173
// AddComUnload ( veh ) ;
15526: LD_VAR 0 1
15530: PPUSH
15531: CALL_OW 219
// AddComMoveXY ( veh , 229 , 226 ) ;
15535: LD_VAR 0 1
15539: PPUSH
15540: LD_INT 229
15542: PPUSH
15543: LD_INT 226
15545: PPUSH
15546: CALL_OW 171
// wait ( 0 0$10 ) ;
15550: LD_INT 350
15552: PPUSH
15553: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
15557: LD_INT 35
15559: PPUSH
15560: CALL_OW 67
// until IsAt ( veh , 229 , 226 ) ;
15564: LD_VAR 0 1
15568: PPUSH
15569: LD_INT 229
15571: PPUSH
15572: LD_INT 226
15574: PPUSH
15575: CALL_OW 307
15579: IFFALSE 15557
// RemoveUnit ( veh ) ;
15581: LD_VAR 0 1
15585: PPUSH
15586: CALL_OW 64
// end ;
15590: PPOPN 2
15592: END
// every 15 15$00 trigger GameType = 1 and game and reinforceAllowed do var i , j , veh , tmp , amount ;
15593: LD_EXP 2
15597: PUSH
15598: LD_INT 1
15600: EQUAL
15601: PUSH
15602: LD_EXP 3
15606: AND
15607: PUSH
15608: LD_EXP 24
15612: AND
15613: IFFALSE 15946
15615: GO 15617
15617: DISABLE
15618: LD_INT 0
15620: PPUSH
15621: PPUSH
15622: PPUSH
15623: PPUSH
15624: PPUSH
// begin enable ;
15625: ENABLE
// tmp := [ ] ;
15626: LD_ADDR_VAR 0 4
15630: PUSH
15631: EMPTY
15632: ST_TO_ADDR
// if commander = 1 then
15633: LD_EXP 25
15637: PUSH
15638: LD_INT 1
15640: EQUAL
15641: IFFALSE 15653
// amount := 3 else
15643: LD_ADDR_VAR 0 5
15647: PUSH
15648: LD_INT 3
15650: ST_TO_ADDR
15651: GO 15661
// amount := 2 ;
15653: LD_ADDR_VAR 0 5
15657: PUSH
15658: LD_INT 2
15660: ST_TO_ADDR
// for i = 1 to amount do
15661: LD_ADDR_VAR 0 1
15665: PUSH
15666: DOUBLE
15667: LD_INT 1
15669: DEC
15670: ST_TO_ADDR
15671: LD_VAR 0 5
15675: PUSH
15676: FOR_TO
15677: IFFALSE 15841
// begin wait ( 0 0$5 ) ;
15679: LD_INT 175
15681: PPUSH
15682: CALL_OW 67
// for j = 1 to 3 do
15686: LD_ADDR_VAR 0 2
15690: PUSH
15691: DOUBLE
15692: LD_INT 1
15694: DEC
15695: ST_TO_ADDR
15696: LD_INT 3
15698: PUSH
15699: FOR_TO
15700: IFFALSE 15837
// begin uc_side := 4 ;
15702: LD_ADDR_OWVAR 20
15706: PUSH
15707: LD_INT 4
15709: ST_TO_ADDR
// uc_nation := 1 ;
15710: LD_ADDR_OWVAR 21
15714: PUSH
15715: LD_INT 1
15717: ST_TO_ADDR
// PrepareVehicle ( [ us_medium_tracked , us_morphling ] [ rand ( 1 , 2 ) ] , engine_siberite , control_computer , [ us_laser , us_double_gun , us_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
15718: LD_INT 3
15720: PUSH
15721: LD_INT 5
15723: PUSH
15724: EMPTY
15725: LIST
15726: LIST
15727: PUSH
15728: LD_INT 1
15730: PPUSH
15731: LD_INT 2
15733: PPUSH
15734: CALL_OW 12
15738: ARRAY
15739: PPUSH
15740: LD_INT 3
15742: PPUSH
15743: LD_INT 3
15745: PPUSH
15746: LD_INT 9
15748: PUSH
15749: LD_INT 5
15751: PUSH
15752: LD_INT 7
15754: PUSH
15755: EMPTY
15756: LIST
15757: LIST
15758: LIST
15759: PUSH
15760: LD_INT 1
15762: PPUSH
15763: LD_INT 3
15765: PPUSH
15766: CALL_OW 12
15770: ARRAY
15771: PPUSH
15772: LD_INT 100
15774: PPUSH
15775: CALL 24193 0 5
// veh := CreateVehicle ;
15779: LD_ADDR_VAR 0 3
15783: PUSH
15784: CALL_OW 45
15788: ST_TO_ADDR
// tmp := tmp ^ veh ;
15789: LD_ADDR_VAR 0 4
15793: PUSH
15794: LD_VAR 0 4
15798: PUSH
15799: LD_VAR 0 3
15803: ADD
15804: ST_TO_ADDR
// PlaceUnitArea ( veh , westSpawn , false ) ;
15805: LD_VAR 0 3
15809: PPUSH
15810: LD_INT 22
15812: PPUSH
15813: LD_INT 0
15815: PPUSH
15816: CALL_OW 49
// ComMoveXY ( veh , 119 , 215 ) ;
15820: LD_VAR 0 3
15824: PPUSH
15825: LD_INT 119
15827: PPUSH
15828: LD_INT 215
15830: PPUSH
15831: CALL_OW 111
// end ;
15835: GO 15699
15837: POP
15838: POP
// end ;
15839: GO 15676
15841: POP
15842: POP
// wait ( 0 0$3 ) ;
15843: LD_INT 105
15845: PPUSH
15846: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
15850: LD_INT 35
15852: PPUSH
15853: CALL_OW 67
// for i in tmp do
15857: LD_ADDR_VAR 0 1
15861: PUSH
15862: LD_VAR 0 4
15866: PUSH
15867: FOR_IN
15868: IFFALSE 15935
// if IsDead ( i ) then
15870: LD_VAR 0 1
15874: PPUSH
15875: CALL_OW 301
15879: IFFALSE 15899
// tmp := tmp diff i else
15881: LD_ADDR_VAR 0 4
15885: PUSH
15886: LD_VAR 0 4
15890: PUSH
15891: LD_VAR 0 1
15895: DIFF
15896: ST_TO_ADDR
15897: GO 15933
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 4 ] ) , i ) ) ;
15899: LD_VAR 0 1
15903: PPUSH
15904: LD_INT 81
15906: PUSH
15907: LD_INT 4
15909: PUSH
15910: EMPTY
15911: LIST
15912: LIST
15913: PPUSH
15914: CALL_OW 69
15918: PPUSH
15919: LD_VAR 0 1
15923: PPUSH
15924: CALL_OW 74
15928: PPUSH
15929: CALL_OW 115
15933: GO 15867
15935: POP
15936: POP
// until tmp = [ ] ;
15937: LD_VAR 0 4
15941: PUSH
15942: EMPTY
15943: EQUAL
15944: IFFALSE 15850
// end ;
15946: PPOPN 5
15948: END
// every 0 0$1 trigger GameType = 1 and game do var i , tmp ;
15949: LD_EXP 2
15953: PUSH
15954: LD_INT 1
15956: EQUAL
15957: PUSH
15958: LD_EXP 3
15962: AND
15963: IFFALSE 16064
15965: GO 15967
15967: DISABLE
15968: LD_INT 0
15970: PPUSH
15971: PPUSH
// begin enable ;
15972: ENABLE
// tmp := FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) ;
15973: LD_ADDR_VAR 0 2
15977: PUSH
15978: LD_INT 3
15980: PUSH
15981: LD_INT 22
15983: PUSH
15984: LD_INT 1
15986: PUSH
15987: EMPTY
15988: LIST
15989: LIST
15990: PUSH
15991: EMPTY
15992: LIST
15993: LIST
15994: PUSH
15995: LD_INT 32
15997: PUSH
15998: LD_INT 1
16000: PUSH
16001: EMPTY
16002: LIST
16003: LIST
16004: PUSH
16005: EMPTY
16006: LIST
16007: LIST
16008: PPUSH
16009: CALL_OW 69
16013: ST_TO_ADDR
// if tmp then
16014: LD_VAR 0 2
16018: IFFALSE 16064
// for i in tmp do
16020: LD_ADDR_VAR 0 1
16024: PUSH
16025: LD_VAR 0 2
16029: PUSH
16030: FOR_IN
16031: IFFALSE 16062
// if GetFuel ( i ) < 3 then
16033: LD_VAR 0 1
16037: PPUSH
16038: CALL_OW 261
16042: PUSH
16043: LD_INT 3
16045: LESS
16046: IFFALSE 16060
// SetFuel ( i , 3 ) ;
16048: LD_VAR 0 1
16052: PPUSH
16053: LD_INT 3
16055: PPUSH
16056: CALL_OW 240
16060: GO 16030
16062: POP
16063: POP
// end ;
16064: PPOPN 2
16066: END
// every 15 15$00 trigger game and GetAttitude ( 8 , 4 ) = att_enemy do var i , un , tmp ;
16067: LD_EXP 3
16071: PUSH
16072: LD_INT 8
16074: PPUSH
16075: LD_INT 4
16077: PPUSH
16078: CALL_OW 81
16082: PUSH
16083: LD_INT 2
16085: EQUAL
16086: AND
16087: IFFALSE 16297
16089: GO 16091
16091: DISABLE
16092: LD_INT 0
16094: PPUSH
16095: PPUSH
16096: PPUSH
// begin enable ;
16097: ENABLE
// tmp := [ ] ;
16098: LD_ADDR_VAR 0 3
16102: PUSH
16103: EMPTY
16104: ST_TO_ADDR
// for i = 1 to 4 do
16105: LD_ADDR_VAR 0 1
16109: PUSH
16110: DOUBLE
16111: LD_INT 1
16113: DEC
16114: ST_TO_ADDR
16115: LD_INT 4
16117: PUSH
16118: FOR_TO
16119: IFFALSE 16263
// begin uc_side := 8 ;
16121: LD_ADDR_OWVAR 20
16125: PUSH
16126: LD_INT 8
16128: ST_TO_ADDR
// uc_nation := nation_arabian ;
16129: LD_ADDR_OWVAR 21
16133: PUSH
16134: LD_INT 2
16136: ST_TO_ADDR
// PrepareVehicle ( ar_hovercraft , engine_combustion , control_apeman , [ ar_double_machine_gun , ar_light_gun ] [ rand ( 1 , 2 ) ] , rand ( 60 , 80 ) ) ;
16137: LD_INT 11
16139: PPUSH
16140: LD_INT 1
16142: PPUSH
16143: LD_INT 5
16145: PPUSH
16146: LD_INT 24
16148: PUSH
16149: LD_INT 23
16151: PUSH
16152: EMPTY
16153: LIST
16154: LIST
16155: PUSH
16156: LD_INT 1
16158: PPUSH
16159: LD_INT 2
16161: PPUSH
16162: CALL_OW 12
16166: ARRAY
16167: PPUSH
16168: LD_INT 60
16170: PPUSH
16171: LD_INT 80
16173: PPUSH
16174: CALL_OW 12
16178: PPUSH
16179: CALL 24193 0 5
// un := CreateVehicle ;
16183: LD_ADDR_VAR 0 2
16187: PUSH
16188: CALL_OW 45
16192: ST_TO_ADDR
// SetDir ( un , 2 ) ;
16193: LD_VAR 0 2
16197: PPUSH
16198: LD_INT 2
16200: PPUSH
16201: CALL_OW 233
// tmp := tmp ^ un ;
16205: LD_ADDR_VAR 0 3
16209: PUSH
16210: LD_VAR 0 3
16214: PUSH
16215: LD_VAR 0 2
16219: ADD
16220: ST_TO_ADDR
// PlaceUnitXY ( un , 88 , 2 , false ) ;
16221: LD_VAR 0 2
16225: PPUSH
16226: LD_INT 88
16228: PPUSH
16229: LD_INT 2
16231: PPUSH
16232: LD_INT 0
16234: PPUSH
16235: CALL_OW 48
// ComMoveXY ( un , 93 , 13 ) ;
16239: LD_VAR 0 2
16243: PPUSH
16244: LD_INT 93
16246: PPUSH
16247: LD_INT 13
16249: PPUSH
16250: CALL_OW 111
// wait ( 0 0$2 ) ;
16254: LD_INT 70
16256: PPUSH
16257: CALL_OW 67
// end ;
16261: GO 16118
16263: POP
16264: POP
// for i in tmp do
16265: LD_ADDR_VAR 0 1
16269: PUSH
16270: LD_VAR 0 3
16274: PUSH
16275: FOR_IN
16276: IFFALSE 16295
// AddComMoveXY ( i , 136 , 19 ) ;
16278: LD_VAR 0 1
16282: PPUSH
16283: LD_INT 136
16285: PPUSH
16286: LD_INT 19
16288: PPUSH
16289: CALL_OW 171
16293: GO 16275
16295: POP
16296: POP
// end ;
16297: PPOPN 3
16299: END
// every 7 7$30 + 7 7$30 trigger game do var i , base , tmp , target ;
16300: LD_EXP 3
16304: IFFALSE 17223
16306: GO 16308
16308: DISABLE
16309: LD_INT 0
16311: PPUSH
16312: PPUSH
16313: PPUSH
16314: PPUSH
// begin enable ;
16315: ENABLE
// base := mc_leg ;
16316: LD_ADDR_VAR 0 2
16320: PUSH
16321: LD_EXP 6
16325: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 8 ] , [ f_nation , 2 ] , [ f_btype , b_factory ] ] ) then
16326: LD_INT 22
16328: PUSH
16329: LD_INT 8
16331: PUSH
16332: EMPTY
16333: LIST
16334: LIST
16335: PUSH
16336: LD_INT 23
16338: PUSH
16339: LD_INT 2
16341: PUSH
16342: EMPTY
16343: LIST
16344: LIST
16345: PUSH
16346: LD_INT 30
16348: PUSH
16349: LD_INT 3
16351: PUSH
16352: EMPTY
16353: LIST
16354: LIST
16355: PUSH
16356: EMPTY
16357: LIST
16358: LIST
16359: LIST
16360: PPUSH
16361: CALL_OW 69
16365: NOT
16366: IFFALSE 16370
// exit ;
16368: GO 17223
// if Prob ( 40 ) then
16370: LD_INT 40
16372: PPUSH
16373: CALL_OW 13
16377: IFFALSE 16506
// begin MC_InsertProduceList ( base , [ [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_flame_thrower ] , ] ) ;
16379: LD_VAR 0 2
16383: PPUSH
16384: LD_INT 13
16386: PUSH
16387: LD_INT 1
16389: PUSH
16390: LD_INT 2
16392: PUSH
16393: LD_INT 28
16395: PUSH
16396: EMPTY
16397: LIST
16398: LIST
16399: LIST
16400: LIST
16401: PUSH
16402: LD_INT 13
16404: PUSH
16405: LD_INT 1
16407: PUSH
16408: LD_INT 2
16410: PUSH
16411: LD_INT 28
16413: PUSH
16414: EMPTY
16415: LIST
16416: LIST
16417: LIST
16418: LIST
16419: PUSH
16420: LD_INT 13
16422: PUSH
16423: LD_INT 1
16425: PUSH
16426: LD_INT 2
16428: PUSH
16429: LD_INT 28
16431: PUSH
16432: EMPTY
16433: LIST
16434: LIST
16435: LIST
16436: LIST
16437: PUSH
16438: LD_INT 13
16440: PUSH
16441: LD_INT 1
16443: PUSH
16444: LD_INT 2
16446: PUSH
16447: LD_INT 28
16449: PUSH
16450: EMPTY
16451: LIST
16452: LIST
16453: LIST
16454: LIST
16455: PUSH
16456: LD_INT 13
16458: PUSH
16459: LD_INT 1
16461: PUSH
16462: LD_INT 2
16464: PUSH
16465: LD_INT 28
16467: PUSH
16468: EMPTY
16469: LIST
16470: LIST
16471: LIST
16472: LIST
16473: PUSH
16474: LD_INT 13
16476: PUSH
16477: LD_INT 1
16479: PUSH
16480: LD_INT 2
16482: PUSH
16483: LD_INT 26
16485: PUSH
16486: EMPTY
16487: LIST
16488: LIST
16489: LIST
16490: LIST
16491: PUSH
16492: EMPTY
16493: LIST
16494: LIST
16495: LIST
16496: LIST
16497: LIST
16498: LIST
16499: PPUSH
16500: CALL 80309 0 2
// end else
16504: GO 16723
// begin MC_InsertProduceList ( base , [ [ ar_medium_trike , engine_combustion , control_remote , [ ar_gun , ar_flame_thrower , ar_flame_thrower ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_gun , ar_flame_thrower , ar_flame_thrower ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_flame_thrower , ar_flame_thrower , ar_selfpropelled_bomb ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_flame_thrower , ar_selfpropelled_bomb , ar_selfpropelled_bomb ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , ar_selfpropelled_bomb ] , [ ar_medium_trike , engine_combustion , control_remote , ar_flame_thrower ] , ] ) ;
16506: LD_VAR 0 2
16510: PPUSH
16511: LD_INT 13
16513: PUSH
16514: LD_INT 1
16516: PUSH
16517: LD_INT 2
16519: PUSH
16520: LD_INT 27
16522: PUSH
16523: LD_INT 26
16525: PUSH
16526: LD_INT 26
16528: PUSH
16529: EMPTY
16530: LIST
16531: LIST
16532: LIST
16533: PUSH
16534: LD_INT 1
16536: PPUSH
16537: LD_INT 3
16539: PPUSH
16540: CALL_OW 12
16544: ARRAY
16545: PUSH
16546: EMPTY
16547: LIST
16548: LIST
16549: LIST
16550: LIST
16551: PUSH
16552: LD_INT 13
16554: PUSH
16555: LD_INT 1
16557: PUSH
16558: LD_INT 2
16560: PUSH
16561: LD_INT 27
16563: PUSH
16564: LD_INT 26
16566: PUSH
16567: LD_INT 26
16569: PUSH
16570: EMPTY
16571: LIST
16572: LIST
16573: LIST
16574: PUSH
16575: LD_INT 1
16577: PPUSH
16578: LD_INT 3
16580: PPUSH
16581: CALL_OW 12
16585: ARRAY
16586: PUSH
16587: EMPTY
16588: LIST
16589: LIST
16590: LIST
16591: LIST
16592: PUSH
16593: LD_INT 13
16595: PUSH
16596: LD_INT 1
16598: PUSH
16599: LD_INT 2
16601: PUSH
16602: LD_INT 26
16604: PUSH
16605: LD_INT 26
16607: PUSH
16608: LD_INT 29
16610: PUSH
16611: EMPTY
16612: LIST
16613: LIST
16614: LIST
16615: PUSH
16616: LD_INT 1
16618: PPUSH
16619: LD_INT 3
16621: PPUSH
16622: CALL_OW 12
16626: ARRAY
16627: PUSH
16628: EMPTY
16629: LIST
16630: LIST
16631: LIST
16632: LIST
16633: PUSH
16634: LD_INT 13
16636: PUSH
16637: LD_INT 1
16639: PUSH
16640: LD_INT 2
16642: PUSH
16643: LD_INT 26
16645: PUSH
16646: LD_INT 29
16648: PUSH
16649: LD_INT 29
16651: PUSH
16652: EMPTY
16653: LIST
16654: LIST
16655: LIST
16656: PUSH
16657: LD_INT 1
16659: PPUSH
16660: LD_INT 3
16662: PPUSH
16663: CALL_OW 12
16667: ARRAY
16668: PUSH
16669: EMPTY
16670: LIST
16671: LIST
16672: LIST
16673: LIST
16674: PUSH
16675: LD_INT 13
16677: PUSH
16678: LD_INT 1
16680: PUSH
16681: LD_INT 2
16683: PUSH
16684: LD_INT 29
16686: PUSH
16687: EMPTY
16688: LIST
16689: LIST
16690: LIST
16691: LIST
16692: PUSH
16693: LD_INT 13
16695: PUSH
16696: LD_INT 1
16698: PUSH
16699: LD_INT 2
16701: PUSH
16702: LD_INT 26
16704: PUSH
16705: EMPTY
16706: LIST
16707: LIST
16708: LIST
16709: LIST
16710: PUSH
16711: EMPTY
16712: LIST
16713: LIST
16714: LIST
16715: LIST
16716: LIST
16717: LIST
16718: PPUSH
16719: CALL 80309 0 2
// end ; repeat wait ( 0 0$1 ) ;
16723: LD_INT 35
16725: PPUSH
16726: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= 6 or tick mod 10 10$00 = 0 ;
16730: LD_VAR 0 2
16734: PPUSH
16735: LD_INT 1
16737: PPUSH
16738: CALL 81727 0 2
16742: PUSH
16743: LD_INT 6
16745: GREATEREQUAL
16746: PUSH
16747: LD_OWVAR 1
16751: PUSH
16752: LD_INT 21000
16754: MOD
16755: PUSH
16756: LD_INT 0
16758: EQUAL
16759: OR
16760: IFFALSE 16723
// wait ( 0 0$30 ) ;
16762: LD_INT 1050
16764: PPUSH
16765: CALL_OW 67
// tmp := MC_GetVehicles ( base , true ) ;
16769: LD_ADDR_VAR 0 3
16773: PUSH
16774: LD_VAR 0 2
16778: PPUSH
16779: LD_INT 1
16781: PPUSH
16782: CALL 81727 0 2
16786: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff tmp ) ;
16787: LD_ADDR_EXP 66
16791: PUSH
16792: LD_EXP 66
16796: PPUSH
16797: LD_VAR 0 2
16801: PPUSH
16802: LD_EXP 66
16806: PUSH
16807: LD_VAR 0 2
16811: ARRAY
16812: PUSH
16813: LD_VAR 0 3
16817: DIFF
16818: PPUSH
16819: CALL_OW 1
16823: ST_TO_ADDR
// target := rand ( 0 , 2 ) ;
16824: LD_ADDR_VAR 0 4
16828: PUSH
16829: LD_INT 0
16831: PPUSH
16832: LD_INT 2
16834: PPUSH
16835: CALL_OW 12
16839: ST_TO_ADDR
// if legChangeSide then
16840: LD_EXP 21
16844: IFFALSE 16854
// target := 2 ;
16846: LD_ADDR_VAR 0 4
16850: PUSH
16851: LD_INT 2
16853: ST_TO_ADDR
// if target = 2 then
16854: LD_VAR 0 4
16858: PUSH
16859: LD_INT 2
16861: EQUAL
16862: IFFALSE 16990
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
16864: LD_ADDR_VAR 0 3
16868: PUSH
16869: LD_VAR 0 3
16873: PPUSH
16874: LD_INT 24
16876: PUSH
16877: LD_INT 250
16879: PUSH
16880: EMPTY
16881: LIST
16882: LIST
16883: PPUSH
16884: CALL_OW 72
16888: ST_TO_ADDR
// for i in tmp do
16889: LD_ADDR_VAR 0 1
16893: PUSH
16894: LD_VAR 0 3
16898: PUSH
16899: FOR_IN
16900: IFFALSE 16940
// if GetDistUnitXY ( i , 112 , 64 ) > 9 then
16902: LD_VAR 0 1
16906: PPUSH
16907: LD_INT 112
16909: PPUSH
16910: LD_INT 64
16912: PPUSH
16913: CALL_OW 297
16917: PUSH
16918: LD_INT 9
16920: GREATER
16921: IFFALSE 16938
// ComMoveXY ( i , 112 , 64 ) ;
16923: LD_VAR 0 1
16927: PPUSH
16928: LD_INT 112
16930: PPUSH
16931: LD_INT 64
16933: PPUSH
16934: CALL_OW 111
16938: GO 16899
16940: POP
16941: POP
// wait ( 0 0$1 ) ;
16942: LD_INT 35
16944: PPUSH
16945: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 112 , 64 , 9 ] ) >= ( tmp - 1 ) ;
16949: LD_VAR 0 3
16953: PPUSH
16954: LD_INT 92
16956: PUSH
16957: LD_INT 112
16959: PUSH
16960: LD_INT 64
16962: PUSH
16963: LD_INT 9
16965: PUSH
16966: EMPTY
16967: LIST
16968: LIST
16969: LIST
16970: LIST
16971: PPUSH
16972: CALL_OW 72
16976: PUSH
16977: LD_VAR 0 3
16981: PUSH
16982: LD_INT 1
16984: MINUS
16985: GREATEREQUAL
16986: IFFALSE 16864
// end else
16988: GO 17114
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
16990: LD_ADDR_VAR 0 3
16994: PUSH
16995: LD_VAR 0 3
16999: PPUSH
17000: LD_INT 24
17002: PUSH
17003: LD_INT 250
17005: PUSH
17006: EMPTY
17007: LIST
17008: LIST
17009: PPUSH
17010: CALL_OW 72
17014: ST_TO_ADDR
// for i in tmp do
17015: LD_ADDR_VAR 0 1
17019: PUSH
17020: LD_VAR 0 3
17024: PUSH
17025: FOR_IN
17026: IFFALSE 17066
// if GetDistUnitXY ( i , 174 , 94 ) > 9 then
17028: LD_VAR 0 1
17032: PPUSH
17033: LD_INT 174
17035: PPUSH
17036: LD_INT 94
17038: PPUSH
17039: CALL_OW 297
17043: PUSH
17044: LD_INT 9
17046: GREATER
17047: IFFALSE 17064
// ComMoveXY ( i , 174 , 94 ) ;
17049: LD_VAR 0 1
17053: PPUSH
17054: LD_INT 174
17056: PPUSH
17057: LD_INT 94
17059: PPUSH
17060: CALL_OW 111
17064: GO 17025
17066: POP
17067: POP
// wait ( 0 0$1 ) ;
17068: LD_INT 35
17070: PPUSH
17071: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 174 , 94 , 9 ] ) >= ( tmp - 1 ) ;
17075: LD_VAR 0 3
17079: PPUSH
17080: LD_INT 92
17082: PUSH
17083: LD_INT 174
17085: PUSH
17086: LD_INT 94
17088: PUSH
17089: LD_INT 9
17091: PUSH
17092: EMPTY
17093: LIST
17094: LIST
17095: LIST
17096: LIST
17097: PPUSH
17098: CALL_OW 72
17102: PUSH
17103: LD_VAR 0 3
17107: PUSH
17108: LD_INT 1
17110: MINUS
17111: GREATEREQUAL
17112: IFFALSE 16990
// end ; repeat wait ( 0 0$1 ) ;
17114: LD_INT 35
17116: PPUSH
17117: CALL_OW 67
// for i in tmp do
17121: LD_ADDR_VAR 0 1
17125: PUSH
17126: LD_VAR 0 3
17130: PUSH
17131: FOR_IN
17132: IFFALSE 17214
// begin if GetLives ( i ) > 251 then
17134: LD_VAR 0 1
17138: PPUSH
17139: CALL_OW 256
17143: PUSH
17144: LD_INT 251
17146: GREATER
17147: IFFALSE 17185
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 8 ] ) , i ) ) else
17149: LD_VAR 0 1
17153: PPUSH
17154: LD_INT 81
17156: PUSH
17157: LD_INT 8
17159: PUSH
17160: EMPTY
17161: LIST
17162: LIST
17163: PPUSH
17164: CALL_OW 69
17168: PPUSH
17169: LD_VAR 0 1
17173: PPUSH
17174: CALL_OW 74
17178: PPUSH
17179: CALL_OW 115
17183: GO 17212
// if IsDead ( i ) then
17185: LD_VAR 0 1
17189: PPUSH
17190: CALL_OW 301
17194: IFFALSE 17212
// tmp := tmp diff i ;
17196: LD_ADDR_VAR 0 3
17200: PUSH
17201: LD_VAR 0 3
17205: PUSH
17206: LD_VAR 0 1
17210: DIFF
17211: ST_TO_ADDR
// end ;
17212: GO 17131
17214: POP
17215: POP
// until not tmp ;
17216: LD_VAR 0 3
17220: NOT
17221: IFFALSE 17114
// end ;
17223: PPOPN 4
17225: END
// every 7 7$30 trigger game do var i , base , tmp , target , teleport ;
17226: LD_EXP 3
17230: IFFALSE 18218
17232: GO 17234
17234: DISABLE
17235: LD_INT 0
17237: PPUSH
17238: PPUSH
17239: PPUSH
17240: PPUSH
17241: PPUSH
// begin enable ;
17242: ENABLE
// if not UnitFilter ( mc_bases [ mc_rus_2 ] , [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) then
17243: LD_EXP 47
17247: PUSH
17248: LD_EXP 8
17252: ARRAY
17253: PPUSH
17254: LD_INT 22
17256: PUSH
17257: LD_INT 3
17259: PUSH
17260: EMPTY
17261: LIST
17262: LIST
17263: PUSH
17264: LD_INT 30
17266: PUSH
17267: LD_INT 3
17269: PUSH
17270: EMPTY
17271: LIST
17272: LIST
17273: PUSH
17274: EMPTY
17275: LIST
17276: LIST
17277: PPUSH
17278: CALL_OW 72
17282: NOT
17283: IFFALSE 17287
// exit ;
17285: GO 18218
// base := mc_rus_2 ;
17287: LD_ADDR_VAR 0 2
17291: PUSH
17292: LD_EXP 8
17296: ST_TO_ADDR
// teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) ;
17297: LD_ADDR_VAR 0 5
17301: PUSH
17302: LD_INT 22
17304: PUSH
17305: LD_INT 3
17307: PUSH
17308: EMPTY
17309: LIST
17310: LIST
17311: PUSH
17312: LD_INT 30
17314: PUSH
17315: LD_INT 34
17317: PUSH
17318: EMPTY
17319: LIST
17320: LIST
17321: PUSH
17322: EMPTY
17323: LIST
17324: LIST
17325: PPUSH
17326: CALL_OW 69
17330: ST_TO_ADDR
// if Prob ( 40 ) then
17331: LD_INT 40
17333: PPUSH
17334: CALL_OW 13
17338: IFFALSE 17467
// begin MC_InsertProduceList ( base , [ [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] ] ) ;
17340: LD_VAR 0 2
17344: PPUSH
17345: LD_INT 22
17347: PUSH
17348: LD_INT 3
17350: PUSH
17351: LD_INT 3
17353: PUSH
17354: LD_INT 49
17356: PUSH
17357: EMPTY
17358: LIST
17359: LIST
17360: LIST
17361: LIST
17362: PUSH
17363: LD_INT 22
17365: PUSH
17366: LD_INT 3
17368: PUSH
17369: LD_INT 3
17371: PUSH
17372: LD_INT 49
17374: PUSH
17375: EMPTY
17376: LIST
17377: LIST
17378: LIST
17379: LIST
17380: PUSH
17381: LD_INT 22
17383: PUSH
17384: LD_INT 3
17386: PUSH
17387: LD_INT 3
17389: PUSH
17390: LD_INT 49
17392: PUSH
17393: EMPTY
17394: LIST
17395: LIST
17396: LIST
17397: LIST
17398: PUSH
17399: LD_INT 24
17401: PUSH
17402: LD_INT 3
17404: PUSH
17405: LD_INT 3
17407: PUSH
17408: LD_INT 46
17410: PUSH
17411: EMPTY
17412: LIST
17413: LIST
17414: LIST
17415: LIST
17416: PUSH
17417: LD_INT 24
17419: PUSH
17420: LD_INT 3
17422: PUSH
17423: LD_INT 3
17425: PUSH
17426: LD_INT 46
17428: PUSH
17429: EMPTY
17430: LIST
17431: LIST
17432: LIST
17433: LIST
17434: PUSH
17435: LD_INT 24
17437: PUSH
17438: LD_INT 3
17440: PUSH
17441: LD_INT 3
17443: PUSH
17444: LD_INT 46
17446: PUSH
17447: EMPTY
17448: LIST
17449: LIST
17450: LIST
17451: LIST
17452: PUSH
17453: EMPTY
17454: LIST
17455: LIST
17456: LIST
17457: LIST
17458: LIST
17459: LIST
17460: PPUSH
17461: CALL 80309 0 2
// end else
17465: GO 17592
// begin MC_InsertProduceList ( base , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] ] ) ;
17467: LD_VAR 0 2
17471: PPUSH
17472: LD_INT 24
17474: PUSH
17475: LD_INT 3
17477: PUSH
17478: LD_INT 3
17480: PUSH
17481: LD_INT 47
17483: PUSH
17484: EMPTY
17485: LIST
17486: LIST
17487: LIST
17488: LIST
17489: PUSH
17490: LD_INT 24
17492: PUSH
17493: LD_INT 3
17495: PUSH
17496: LD_INT 3
17498: PUSH
17499: LD_INT 47
17501: PUSH
17502: EMPTY
17503: LIST
17504: LIST
17505: LIST
17506: LIST
17507: PUSH
17508: LD_INT 24
17510: PUSH
17511: LD_INT 3
17513: PUSH
17514: LD_INT 3
17516: PUSH
17517: LD_INT 47
17519: PUSH
17520: EMPTY
17521: LIST
17522: LIST
17523: LIST
17524: LIST
17525: PUSH
17526: LD_INT 24
17528: PUSH
17529: LD_INT 3
17531: PUSH
17532: LD_INT 3
17534: PUSH
17535: LD_INT 46
17537: PUSH
17538: EMPTY
17539: LIST
17540: LIST
17541: LIST
17542: LIST
17543: PUSH
17544: LD_INT 24
17546: PUSH
17547: LD_INT 3
17549: PUSH
17550: LD_INT 3
17552: PUSH
17553: LD_INT 46
17555: PUSH
17556: EMPTY
17557: LIST
17558: LIST
17559: LIST
17560: LIST
17561: PUSH
17562: LD_INT 24
17564: PUSH
17565: LD_INT 3
17567: PUSH
17568: LD_INT 3
17570: PUSH
17571: LD_INT 46
17573: PUSH
17574: EMPTY
17575: LIST
17576: LIST
17577: LIST
17578: LIST
17579: PUSH
17580: EMPTY
17581: LIST
17582: LIST
17583: LIST
17584: LIST
17585: LIST
17586: LIST
17587: PPUSH
17588: CALL 80309 0 2
// end ; if Difficulty > 1 then
17592: LD_OWVAR 67
17596: PUSH
17597: LD_INT 1
17599: GREATER
17600: IFFALSE 17632
// MC_InsertProduceList ( base , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] ] ) ;
17602: LD_VAR 0 2
17606: PPUSH
17607: LD_INT 24
17609: PUSH
17610: LD_INT 3
17612: PUSH
17613: LD_INT 3
17615: PUSH
17616: LD_INT 47
17618: PUSH
17619: EMPTY
17620: LIST
17621: LIST
17622: LIST
17623: LIST
17624: PUSH
17625: EMPTY
17626: LIST
17627: PPUSH
17628: CALL 80309 0 2
// repeat wait ( 0 0$1 ) ;
17632: LD_INT 35
17634: PPUSH
17635: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= [ 6 , 7 , 7 ] [ Difficulty ] or tick mod 10 10$00 = 0 ;
17639: LD_VAR 0 2
17643: PPUSH
17644: LD_INT 1
17646: PPUSH
17647: CALL 81727 0 2
17651: PUSH
17652: LD_INT 6
17654: PUSH
17655: LD_INT 7
17657: PUSH
17658: LD_INT 7
17660: PUSH
17661: EMPTY
17662: LIST
17663: LIST
17664: LIST
17665: PUSH
17666: LD_OWVAR 67
17670: ARRAY
17671: GREATEREQUAL
17672: PUSH
17673: LD_OWVAR 1
17677: PUSH
17678: LD_INT 21000
17680: MOD
17681: PUSH
17682: LD_INT 0
17684: EQUAL
17685: OR
17686: IFFALSE 17632
// wait ( 0 0$45 ) ;
17688: LD_INT 1575
17690: PPUSH
17691: CALL_OW 67
// tmp := MC_GetVehicles ( base , true ) ;
17695: LD_ADDR_VAR 0 3
17699: PUSH
17700: LD_VAR 0 2
17704: PPUSH
17705: LD_INT 1
17707: PPUSH
17708: CALL 81727 0 2
17712: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff tmp ) ;
17713: LD_ADDR_EXP 66
17717: PUSH
17718: LD_EXP 66
17722: PPUSH
17723: LD_VAR 0 2
17727: PPUSH
17728: LD_EXP 66
17732: PUSH
17733: LD_VAR 0 2
17737: ARRAY
17738: PUSH
17739: LD_VAR 0 3
17743: DIFF
17744: PPUSH
17745: CALL_OW 1
17749: ST_TO_ADDR
// target := rand ( 0 , 1 ) ;
17750: LD_ADDR_VAR 0 4
17754: PUSH
17755: LD_INT 0
17757: PPUSH
17758: LD_INT 1
17760: PPUSH
17761: CALL_OW 12
17765: ST_TO_ADDR
// if target then
17766: LD_VAR 0 4
17770: IFFALSE 17898
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
17772: LD_ADDR_VAR 0 3
17776: PUSH
17777: LD_VAR 0 3
17781: PPUSH
17782: LD_INT 24
17784: PUSH
17785: LD_INT 250
17787: PUSH
17788: EMPTY
17789: LIST
17790: LIST
17791: PPUSH
17792: CALL_OW 72
17796: ST_TO_ADDR
// for i in tmp do
17797: LD_ADDR_VAR 0 1
17801: PUSH
17802: LD_VAR 0 3
17806: PUSH
17807: FOR_IN
17808: IFFALSE 17848
// if GetDistUnitXY ( i , 84 , 32 ) > 9 then
17810: LD_VAR 0 1
17814: PPUSH
17815: LD_INT 84
17817: PPUSH
17818: LD_INT 32
17820: PPUSH
17821: CALL_OW 297
17825: PUSH
17826: LD_INT 9
17828: GREATER
17829: IFFALSE 17846
// ComMoveXY ( i , 84 , 32 ) ;
17831: LD_VAR 0 1
17835: PPUSH
17836: LD_INT 84
17838: PPUSH
17839: LD_INT 32
17841: PPUSH
17842: CALL_OW 111
17846: GO 17807
17848: POP
17849: POP
// wait ( 0 0$1 ) ;
17850: LD_INT 35
17852: PPUSH
17853: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 84 , 32 , 9 ] ) >= ( tmp - 1 ) ;
17857: LD_VAR 0 3
17861: PPUSH
17862: LD_INT 92
17864: PUSH
17865: LD_INT 84
17867: PUSH
17868: LD_INT 32
17870: PUSH
17871: LD_INT 9
17873: PUSH
17874: EMPTY
17875: LIST
17876: LIST
17877: LIST
17878: LIST
17879: PPUSH
17880: CALL_OW 72
17884: PUSH
17885: LD_VAR 0 3
17889: PUSH
17890: LD_INT 1
17892: MINUS
17893: GREATEREQUAL
17894: IFFALSE 17772
// end else
17896: GO 18058
// begin if teleport then
17898: LD_VAR 0 5
17902: IFFALSE 17922
// ComEnterUnit ( tmp , teleport [ 1 ] ) ;
17904: LD_VAR 0 3
17908: PPUSH
17909: LD_VAR 0 5
17913: PUSH
17914: LD_INT 1
17916: ARRAY
17917: PPUSH
17918: CALL_OW 120
// repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
17922: LD_ADDR_VAR 0 3
17926: PUSH
17927: LD_VAR 0 3
17931: PPUSH
17932: LD_INT 24
17934: PUSH
17935: LD_INT 250
17937: PUSH
17938: EMPTY
17939: LIST
17940: LIST
17941: PPUSH
17942: CALL_OW 72
17946: ST_TO_ADDR
// for i in tmp do
17947: LD_ADDR_VAR 0 1
17951: PUSH
17952: LD_VAR 0 3
17956: PUSH
17957: FOR_IN
17958: IFFALSE 18010
// if GetDistUnitXY ( i , 140 , 219 ) > 9 and not HasTask ( i ) then
17960: LD_VAR 0 1
17964: PPUSH
17965: LD_INT 140
17967: PPUSH
17968: LD_INT 219
17970: PPUSH
17971: CALL_OW 297
17975: PUSH
17976: LD_INT 9
17978: GREATER
17979: PUSH
17980: LD_VAR 0 1
17984: PPUSH
17985: CALL_OW 314
17989: NOT
17990: AND
17991: IFFALSE 18008
// AddComMoveXY ( i , 140 , 219 ) ;
17993: LD_VAR 0 1
17997: PPUSH
17998: LD_INT 140
18000: PPUSH
18001: LD_INT 219
18003: PPUSH
18004: CALL_OW 171
18008: GO 17957
18010: POP
18011: POP
// wait ( 0 0$1 ) ;
18012: LD_INT 35
18014: PPUSH
18015: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 140 , 219 , 9 ] ) >= ( tmp - 1 ) ;
18019: LD_VAR 0 3
18023: PPUSH
18024: LD_INT 92
18026: PUSH
18027: LD_INT 140
18029: PUSH
18030: LD_INT 219
18032: PUSH
18033: LD_INT 9
18035: PUSH
18036: EMPTY
18037: LIST
18038: LIST
18039: LIST
18040: LIST
18041: PPUSH
18042: CALL_OW 72
18046: PUSH
18047: LD_VAR 0 3
18051: PUSH
18052: LD_INT 1
18054: MINUS
18055: GREATEREQUAL
18056: IFFALSE 17922
// end ; repeat wait ( 0 0$1 ) ;
18058: LD_INT 35
18060: PPUSH
18061: CALL_OW 67
// for i in tmp do
18065: LD_ADDR_VAR 0 1
18069: PUSH
18070: LD_VAR 0 3
18074: PUSH
18075: FOR_IN
18076: IFFALSE 18209
// begin if GetLives ( i ) > 251 then
18078: LD_VAR 0 1
18082: PPUSH
18083: CALL_OW 256
18087: PUSH
18088: LD_INT 251
18090: GREATER
18091: IFFALSE 18180
// begin if GetWeapon ( i ) = ru_time_lapser then
18093: LD_VAR 0 1
18097: PPUSH
18098: CALL_OW 264
18102: PUSH
18103: LD_INT 49
18105: EQUAL
18106: IFFALSE 18144
// ComMoveUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) else
18108: LD_VAR 0 1
18112: PPUSH
18113: LD_INT 81
18115: PUSH
18116: LD_INT 3
18118: PUSH
18119: EMPTY
18120: LIST
18121: LIST
18122: PPUSH
18123: CALL_OW 69
18127: PPUSH
18128: LD_VAR 0 1
18132: PPUSH
18133: CALL_OW 74
18137: PPUSH
18138: CALL_OW 112
18142: GO 18178
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
18144: LD_VAR 0 1
18148: PPUSH
18149: LD_INT 81
18151: PUSH
18152: LD_INT 3
18154: PUSH
18155: EMPTY
18156: LIST
18157: LIST
18158: PPUSH
18159: CALL_OW 69
18163: PPUSH
18164: LD_VAR 0 1
18168: PPUSH
18169: CALL_OW 74
18173: PPUSH
18174: CALL_OW 115
// end else
18178: GO 18207
// if IsDead ( i ) then
18180: LD_VAR 0 1
18184: PPUSH
18185: CALL_OW 301
18189: IFFALSE 18207
// tmp := tmp diff i ;
18191: LD_ADDR_VAR 0 3
18195: PUSH
18196: LD_VAR 0 3
18200: PUSH
18201: LD_VAR 0 1
18205: DIFF
18206: ST_TO_ADDR
// end ;
18207: GO 18075
18209: POP
18210: POP
// until not tmp ;
18211: LD_VAR 0 3
18215: NOT
18216: IFFALSE 18058
// end ;
18218: PPOPN 5
18220: END
// every 12 12$30 + 11 11$30 trigger game do var i , base , tmp , target ;
18221: LD_EXP 3
18225: IFFALSE 18607
18227: GO 18229
18229: DISABLE
18230: LD_INT 0
18232: PPUSH
18233: PPUSH
18234: PPUSH
18235: PPUSH
// begin enable ;
18236: ENABLE
// base := mc_amer ;
18237: LD_ADDR_VAR 0 2
18241: PUSH
18242: LD_EXP 5
18246: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 4 ] , [ f_nation , 1 ] , [ f_btype , b_factory ] ] ) then
18247: LD_INT 22
18249: PUSH
18250: LD_INT 4
18252: PUSH
18253: EMPTY
18254: LIST
18255: LIST
18256: PUSH
18257: LD_INT 23
18259: PUSH
18260: LD_INT 1
18262: PUSH
18263: EMPTY
18264: LIST
18265: LIST
18266: PUSH
18267: LD_INT 30
18269: PUSH
18270: LD_INT 3
18272: PUSH
18273: EMPTY
18274: LIST
18275: LIST
18276: PUSH
18277: EMPTY
18278: LIST
18279: LIST
18280: LIST
18281: PPUSH
18282: CALL_OW 69
18286: NOT
18287: IFFALSE 18291
// exit ;
18289: GO 18607
// MC_InsertProduceList ( base , [ [ us_medium_tracked , engine_combustion , control_remote , us_double_gun ] , [ us_medium_tracked , engine_combustion , control_remote , us_laser ] , [ us_medium_tracked , engine_combustion , control_remote , us_rocket_launcher ] , [ us_medium_tracked , engine_combustion , control_remote , us_rocket_launcher ] , [ us_medium_tracked , engine_combustion , control_remote , us_rocket_launcher ] ] ) ;
18291: LD_VAR 0 2
18295: PPUSH
18296: LD_INT 3
18298: PUSH
18299: LD_INT 1
18301: PUSH
18302: LD_INT 2
18304: PUSH
18305: LD_INT 5
18307: PUSH
18308: EMPTY
18309: LIST
18310: LIST
18311: LIST
18312: LIST
18313: PUSH
18314: LD_INT 3
18316: PUSH
18317: LD_INT 1
18319: PUSH
18320: LD_INT 2
18322: PUSH
18323: LD_INT 9
18325: PUSH
18326: EMPTY
18327: LIST
18328: LIST
18329: LIST
18330: LIST
18331: PUSH
18332: LD_INT 3
18334: PUSH
18335: LD_INT 1
18337: PUSH
18338: LD_INT 2
18340: PUSH
18341: LD_INT 7
18343: PUSH
18344: EMPTY
18345: LIST
18346: LIST
18347: LIST
18348: LIST
18349: PUSH
18350: LD_INT 3
18352: PUSH
18353: LD_INT 1
18355: PUSH
18356: LD_INT 2
18358: PUSH
18359: LD_INT 7
18361: PUSH
18362: EMPTY
18363: LIST
18364: LIST
18365: LIST
18366: LIST
18367: PUSH
18368: LD_INT 3
18370: PUSH
18371: LD_INT 1
18373: PUSH
18374: LD_INT 2
18376: PUSH
18377: LD_INT 7
18379: PUSH
18380: EMPTY
18381: LIST
18382: LIST
18383: LIST
18384: LIST
18385: PUSH
18386: EMPTY
18387: LIST
18388: LIST
18389: LIST
18390: LIST
18391: LIST
18392: PPUSH
18393: CALL 80309 0 2
// repeat wait ( 0 0$1 ) ;
18397: LD_INT 35
18399: PPUSH
18400: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= 5 or tick mod 10 10$00 = 0 ;
18404: LD_VAR 0 2
18408: PPUSH
18409: LD_INT 1
18411: PPUSH
18412: CALL 81727 0 2
18416: PUSH
18417: LD_INT 5
18419: GREATEREQUAL
18420: PUSH
18421: LD_OWVAR 1
18425: PUSH
18426: LD_INT 21000
18428: MOD
18429: PUSH
18430: LD_INT 0
18432: EQUAL
18433: OR
18434: IFFALSE 18397
// wait ( 0 0$30 ) ;
18436: LD_INT 1050
18438: PPUSH
18439: CALL_OW 67
// tmp := MC_GetVehicles ( base , true ) ;
18443: LD_ADDR_VAR 0 3
18447: PUSH
18448: LD_VAR 0 2
18452: PPUSH
18453: LD_INT 1
18455: PPUSH
18456: CALL 81727 0 2
18460: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff tmp ) ;
18461: LD_ADDR_EXP 66
18465: PUSH
18466: LD_EXP 66
18470: PPUSH
18471: LD_VAR 0 2
18475: PPUSH
18476: LD_EXP 66
18480: PUSH
18481: LD_VAR 0 2
18485: ARRAY
18486: PUSH
18487: LD_VAR 0 3
18491: DIFF
18492: PPUSH
18493: CALL_OW 1
18497: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18498: LD_INT 35
18500: PPUSH
18501: CALL_OW 67
// for i in tmp do
18505: LD_ADDR_VAR 0 1
18509: PUSH
18510: LD_VAR 0 3
18514: PUSH
18515: FOR_IN
18516: IFFALSE 18598
// begin if GetLives ( i ) > 251 then
18518: LD_VAR 0 1
18522: PPUSH
18523: CALL_OW 256
18527: PUSH
18528: LD_INT 251
18530: GREATER
18531: IFFALSE 18569
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 4 ] ) , i ) ) else
18533: LD_VAR 0 1
18537: PPUSH
18538: LD_INT 81
18540: PUSH
18541: LD_INT 4
18543: PUSH
18544: EMPTY
18545: LIST
18546: LIST
18547: PPUSH
18548: CALL_OW 69
18552: PPUSH
18553: LD_VAR 0 1
18557: PPUSH
18558: CALL_OW 74
18562: PPUSH
18563: CALL_OW 115
18567: GO 18596
// if IsDead ( i ) then
18569: LD_VAR 0 1
18573: PPUSH
18574: CALL_OW 301
18578: IFFALSE 18596
// tmp := tmp diff i ;
18580: LD_ADDR_VAR 0 3
18584: PUSH
18585: LD_VAR 0 3
18589: PUSH
18590: LD_VAR 0 1
18594: DIFF
18595: ST_TO_ADDR
// end ;
18596: GO 18515
18598: POP
18599: POP
// until not tmp ;
18600: LD_VAR 0 3
18604: NOT
18605: IFFALSE 18498
// end ; end_of_file
18607: PPOPN 4
18609: END
// export function CustomEvent ( event ) ; begin
18610: LD_INT 0
18612: PPUSH
// end ;
18613: LD_VAR 0 2
18617: RET
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 = 4 then
18618: LD_VAR 0 1
18622: PUSH
18623: LD_INT 1
18625: EQUAL
18626: PUSH
18627: LD_VAR 0 2
18631: PUSH
18632: LD_INT 4
18634: EQUAL
18635: AND
18636: IFFALSE 18664
// begin SayRadio ( Powell , DP-Lost ) ;
18638: LD_EXP 12
18642: PPUSH
18643: LD_STRING DP-Lost
18645: PPUSH
18646: CALL_OW 94
// wait ( 0 0$2 ) ;
18650: LD_INT 70
18652: PPUSH
18653: CALL_OW 67
// YouLost ( FriendlyFire ) ;
18657: LD_STRING FriendlyFire
18659: PPUSH
18660: CALL_OW 104
// end ; end ;
18664: PPOPN 2
18666: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
18667: LD_VAR 0 1
18671: PPUSH
18672: CALL 99839 0 1
// if GameType = 1 then
18676: LD_EXP 2
18680: PUSH
18681: LD_INT 1
18683: EQUAL
18684: IFFALSE 18919
// begin if un = playerCommander then
18686: LD_VAR 0 1
18690: PUSH
18691: LD_EXP 9
18695: EQUAL
18696: IFFALSE 18705
// YouLost ( commanderDied ) ;
18698: LD_STRING commanderDied
18700: PPUSH
18701: CALL_OW 104
// if un = allyCommander then
18705: LD_VAR 0 1
18709: PUSH
18710: LD_EXP 11
18714: EQUAL
18715: IFFALSE 18724
// YouLost ( Theta ) ;
18717: LD_STRING Theta
18719: PPUSH
18720: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_building ] ] ] ) then
18724: LD_VAR 0 1
18728: PUSH
18729: LD_INT 22
18731: PUSH
18732: LD_INT 8
18734: PUSH
18735: EMPTY
18736: LIST
18737: LIST
18738: PUSH
18739: LD_INT 2
18741: PUSH
18742: LD_INT 21
18744: PUSH
18745: LD_INT 1
18747: PUSH
18748: EMPTY
18749: LIST
18750: LIST
18751: PUSH
18752: LD_INT 21
18754: PUSH
18755: LD_INT 3
18757: PUSH
18758: EMPTY
18759: LIST
18760: LIST
18761: PUSH
18762: EMPTY
18763: LIST
18764: LIST
18765: LIST
18766: PUSH
18767: EMPTY
18768: LIST
18769: LIST
18770: PPUSH
18771: CALL_OW 69
18775: IN
18776: IFFALSE 18792
// legDestCounter := legDestCounter + 1 ;
18778: LD_ADDR_EXP 18
18782: PUSH
18783: LD_EXP 18
18787: PUSH
18788: LD_INT 1
18790: PLUS
18791: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_building ] ] ] ) then
18792: LD_VAR 0 1
18796: PUSH
18797: LD_INT 22
18799: PUSH
18800: LD_INT 4
18802: PUSH
18803: EMPTY
18804: LIST
18805: LIST
18806: PUSH
18807: LD_INT 2
18809: PUSH
18810: LD_INT 21
18812: PUSH
18813: LD_INT 1
18815: PUSH
18816: EMPTY
18817: LIST
18818: LIST
18819: PUSH
18820: LD_INT 21
18822: PUSH
18823: LD_INT 3
18825: PUSH
18826: EMPTY
18827: LIST
18828: LIST
18829: PUSH
18830: EMPTY
18831: LIST
18832: LIST
18833: LIST
18834: PUSH
18835: EMPTY
18836: LIST
18837: LIST
18838: PPUSH
18839: CALL_OW 69
18843: IN
18844: IFFALSE 18860
// allyDestCounter := allyDestCounter + 1 ;
18846: LD_ADDR_EXP 22
18850: PUSH
18851: LD_EXP 22
18855: PUSH
18856: LD_INT 1
18858: PLUS
18859: ST_TO_ADDR
// if un in ruOutpost then
18860: LD_VAR 0 1
18864: PUSH
18865: LD_EXP 14
18869: IN
18870: IFFALSE 18919
// begin ruOutpost := ruOutpost diff un ;
18872: LD_ADDR_EXP 14
18876: PUSH
18877: LD_EXP 14
18881: PUSH
18882: LD_VAR 0 1
18886: DIFF
18887: ST_TO_ADDR
// ruEscape := Replace ( ruEscape , 1 , ruEscape [ 1 ] + 1 ) ;
18888: LD_ADDR_EXP 15
18892: PUSH
18893: LD_EXP 15
18897: PPUSH
18898: LD_INT 1
18900: PPUSH
18901: LD_EXP 15
18905: PUSH
18906: LD_INT 1
18908: ARRAY
18909: PUSH
18910: LD_INT 1
18912: PLUS
18913: PPUSH
18914: CALL_OW 1
18918: ST_TO_ADDR
// end ; end ; MCE_UnitDestroyed ( un ) ;
18919: LD_VAR 0 1
18923: PPUSH
18924: CALL 83720 0 1
// end ;
18928: PPOPN 1
18930: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
18931: LD_VAR 0 1
18935: PPUSH
18936: LD_VAR 0 2
18940: PPUSH
18941: CALL 86054 0 2
// end ;
18945: PPOPN 2
18947: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
18948: LD_VAR 0 1
18952: PPUSH
18953: CALL 85122 0 1
// end ;
18957: PPOPN 1
18959: END
// on BuildingComplete ( building ) do begin MCE_BuildingComplete ( building ) ;
18960: LD_VAR 0 1
18964: PPUSH
18965: CALL 85363 0 1
// end ;
18969: PPOPN 1
18971: END
// on ResearchComplete ( tech , lab ) do begin if tech = tech_LasDouble and GetSide ( lab ) = 1 then
18972: LD_VAR 0 1
18976: PUSH
18977: LD_INT 14
18979: EQUAL
18980: PUSH
18981: LD_VAR 0 2
18985: PPUSH
18986: CALL_OW 255
18990: PUSH
18991: LD_INT 1
18993: EQUAL
18994: AND
18995: IFFALSE 19036
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Laser ) ;
18997: LD_EXP 9
19001: PPUSH
19002: LD_STRING D
19004: PUSH
19005: LD_STRING I
19007: PUSH
19008: LD_STRING J
19010: PUSH
19011: LD_STRING S
19013: PUSH
19014: EMPTY
19015: LIST
19016: LIST
19017: LIST
19018: PUSH
19019: LD_EXP 25
19023: ARRAY
19024: STR
19025: PUSH
19026: LD_STRING -1-Laser
19028: STR
19029: PPUSH
19030: CALL_OW 88
// exit ;
19034: GO 19178
// end ; if tech = tech_MatDet and GetSide ( lab ) = 1 then
19036: LD_VAR 0 1
19040: PUSH
19041: LD_INT 7
19043: EQUAL
19044: PUSH
19045: LD_VAR 0 2
19049: PPUSH
19050: CALL_OW 255
19054: PUSH
19055: LD_INT 1
19057: EQUAL
19058: AND
19059: IFFALSE 19100
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Materialization ) ;
19061: LD_EXP 9
19065: PPUSH
19066: LD_STRING D
19068: PUSH
19069: LD_STRING I
19071: PUSH
19072: LD_STRING J
19074: PUSH
19075: LD_STRING S
19077: PUSH
19078: EMPTY
19079: LIST
19080: LIST
19081: LIST
19082: PUSH
19083: LD_EXP 25
19087: ARRAY
19088: STR
19089: PUSH
19090: LD_STRING -1-Materialization
19092: STR
19093: PPUSH
19094: CALL_OW 88
// exit ;
19098: GO 19178
// end ; if tech = tech_SibFiss and GetSide ( lab ) = 1 then
19100: LD_VAR 0 1
19104: PUSH
19105: LD_INT 25
19107: EQUAL
19108: PUSH
19109: LD_VAR 0 2
19113: PPUSH
19114: CALL_OW 255
19118: PUSH
19119: LD_INT 1
19121: EQUAL
19122: AND
19123: IFFALSE 19164
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Rocket ) ;
19125: LD_EXP 9
19129: PPUSH
19130: LD_STRING D
19132: PUSH
19133: LD_STRING I
19135: PUSH
19136: LD_STRING J
19138: PUSH
19139: LD_STRING S
19141: PUSH
19142: EMPTY
19143: LIST
19144: LIST
19145: LIST
19146: PUSH
19147: LD_EXP 25
19151: ARRAY
19152: STR
19153: PUSH
19154: LD_STRING -1-Rocket
19156: STR
19157: PPUSH
19158: CALL_OW 88
// exit ;
19162: GO 19178
// end ; MCE_ResearchComplete ( tech , lab ) ;
19164: LD_VAR 0 1
19168: PPUSH
19169: LD_VAR 0 2
19173: PPUSH
19174: CALL 83416 0 2
// end ;
19178: PPOPN 2
19180: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
19181: LD_VAR 0 1
19185: PPUSH
19186: LD_VAR 0 2
19190: PPUSH
19191: LD_VAR 0 3
19195: PPUSH
19196: LD_VAR 0 4
19200: PPUSH
19201: LD_VAR 0 5
19205: PPUSH
19206: CALL 83036 0 5
// end ;
19210: PPOPN 5
19212: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
19213: LD_VAR 0 1
19217: PPUSH
19218: LD_VAR 0 2
19222: PPUSH
19223: CALL 82626 0 2
// end ;
19227: PPOPN 2
19229: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
19230: LD_VAR 0 1
19234: PPUSH
19235: LD_VAR 0 2
19239: PPUSH
19240: LD_VAR 0 3
19244: PPUSH
19245: LD_VAR 0 4
19249: PPUSH
19250: CALL 82464 0 4
// end ;
19254: PPOPN 4
19256: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
19257: LD_VAR 0 1
19261: PPUSH
19262: LD_VAR 0 2
19266: PPUSH
19267: LD_VAR 0 3
19271: PPUSH
19272: CALL 82239 0 3
// end ;
19276: PPOPN 3
19278: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
19279: LD_VAR 0 1
19283: PPUSH
19284: LD_VAR 0 2
19288: PPUSH
19289: CALL 82124 0 2
// end ;
19293: PPOPN 2
19295: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
19296: LD_VAR 0 1
19300: PPUSH
19301: LD_VAR 0 2
19305: PPUSH
19306: CALL 86315 0 2
// end ;
19310: PPOPN 2
19312: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
19313: LD_VAR 0 1
19317: PPUSH
19318: LD_VAR 0 2
19322: PPUSH
19323: LD_VAR 0 3
19327: PPUSH
19328: LD_VAR 0 4
19332: PPUSH
19333: CALL 86531 0 4
// end ;
19337: PPOPN 4
19339: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
19340: LD_VAR 0 1
19344: PPUSH
19345: LD_VAR 0 2
19349: PPUSH
19350: CALL 81933 0 2
// end ;
19354: PPOPN 2
19356: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
19357: LD_VAR 0 1
19361: PPUSH
19362: CALL 99945 0 1
// end ; end_of_file
19366: PPOPN 1
19368: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
19369: LD_INT 0
19371: PPUSH
19372: PPUSH
// if exist_mode then
19373: LD_VAR 0 2
19377: IFFALSE 19402
// unit := CreateCharacter ( prefix & ident ) else
19379: LD_ADDR_VAR 0 5
19383: PUSH
19384: LD_VAR 0 3
19388: PUSH
19389: LD_VAR 0 1
19393: STR
19394: PPUSH
19395: CALL_OW 34
19399: ST_TO_ADDR
19400: GO 19417
// unit := NewCharacter ( ident ) ;
19402: LD_ADDR_VAR 0 5
19406: PUSH
19407: LD_VAR 0 1
19411: PPUSH
19412: CALL_OW 25
19416: ST_TO_ADDR
// result := unit ;
19417: LD_ADDR_VAR 0 4
19421: PUSH
19422: LD_VAR 0 5
19426: ST_TO_ADDR
// end ;
19427: LD_VAR 0 4
19431: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
19432: LD_INT 0
19434: PPUSH
19435: PPUSH
// if not side or not nation then
19436: LD_VAR 0 1
19440: NOT
19441: PUSH
19442: LD_VAR 0 2
19446: NOT
19447: OR
19448: IFFALSE 19452
// exit ;
19450: GO 20216
// case nation of nation_american :
19452: LD_VAR 0 2
19456: PUSH
19457: LD_INT 1
19459: DOUBLE
19460: EQUAL
19461: IFTRUE 19465
19463: GO 19679
19465: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
19466: LD_ADDR_VAR 0 4
19470: PUSH
19471: LD_INT 35
19473: PUSH
19474: LD_INT 45
19476: PUSH
19477: LD_INT 46
19479: PUSH
19480: LD_INT 47
19482: PUSH
19483: LD_INT 82
19485: PUSH
19486: LD_INT 83
19488: PUSH
19489: LD_INT 84
19491: PUSH
19492: LD_INT 85
19494: PUSH
19495: LD_INT 86
19497: PUSH
19498: LD_INT 1
19500: PUSH
19501: LD_INT 2
19503: PUSH
19504: LD_INT 6
19506: PUSH
19507: LD_INT 15
19509: PUSH
19510: LD_INT 16
19512: PUSH
19513: LD_INT 7
19515: PUSH
19516: LD_INT 12
19518: PUSH
19519: LD_INT 13
19521: PUSH
19522: LD_INT 10
19524: PUSH
19525: LD_INT 14
19527: PUSH
19528: LD_INT 20
19530: PUSH
19531: LD_INT 21
19533: PUSH
19534: LD_INT 22
19536: PUSH
19537: LD_INT 25
19539: PUSH
19540: LD_INT 32
19542: PUSH
19543: LD_INT 27
19545: PUSH
19546: LD_INT 36
19548: PUSH
19549: LD_INT 69
19551: PUSH
19552: LD_INT 39
19554: PUSH
19555: LD_INT 34
19557: PUSH
19558: LD_INT 40
19560: PUSH
19561: LD_INT 48
19563: PUSH
19564: LD_INT 49
19566: PUSH
19567: LD_INT 50
19569: PUSH
19570: LD_INT 51
19572: PUSH
19573: LD_INT 52
19575: PUSH
19576: LD_INT 53
19578: PUSH
19579: LD_INT 54
19581: PUSH
19582: LD_INT 55
19584: PUSH
19585: LD_INT 56
19587: PUSH
19588: LD_INT 57
19590: PUSH
19591: LD_INT 58
19593: PUSH
19594: LD_INT 59
19596: PUSH
19597: LD_INT 60
19599: PUSH
19600: LD_INT 61
19602: PUSH
19603: LD_INT 62
19605: PUSH
19606: LD_INT 80
19608: PUSH
19609: LD_INT 82
19611: PUSH
19612: LD_INT 83
19614: PUSH
19615: LD_INT 84
19617: PUSH
19618: LD_INT 85
19620: PUSH
19621: LD_INT 86
19623: PUSH
19624: EMPTY
19625: LIST
19626: LIST
19627: LIST
19628: LIST
19629: LIST
19630: LIST
19631: LIST
19632: LIST
19633: LIST
19634: LIST
19635: LIST
19636: LIST
19637: LIST
19638: LIST
19639: LIST
19640: LIST
19641: LIST
19642: LIST
19643: LIST
19644: LIST
19645: LIST
19646: LIST
19647: LIST
19648: LIST
19649: LIST
19650: LIST
19651: LIST
19652: LIST
19653: LIST
19654: LIST
19655: LIST
19656: LIST
19657: LIST
19658: LIST
19659: LIST
19660: LIST
19661: LIST
19662: LIST
19663: LIST
19664: LIST
19665: LIST
19666: LIST
19667: LIST
19668: LIST
19669: LIST
19670: LIST
19671: LIST
19672: LIST
19673: LIST
19674: LIST
19675: LIST
19676: ST_TO_ADDR
19677: GO 20140
19679: LD_INT 2
19681: DOUBLE
19682: EQUAL
19683: IFTRUE 19687
19685: GO 19909
19687: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
19688: LD_ADDR_VAR 0 4
19692: PUSH
19693: LD_INT 35
19695: PUSH
19696: LD_INT 45
19698: PUSH
19699: LD_INT 46
19701: PUSH
19702: LD_INT 47
19704: PUSH
19705: LD_INT 82
19707: PUSH
19708: LD_INT 83
19710: PUSH
19711: LD_INT 84
19713: PUSH
19714: LD_INT 85
19716: PUSH
19717: LD_INT 87
19719: PUSH
19720: LD_INT 70
19722: PUSH
19723: LD_INT 1
19725: PUSH
19726: LD_INT 11
19728: PUSH
19729: LD_INT 3
19731: PUSH
19732: LD_INT 4
19734: PUSH
19735: LD_INT 5
19737: PUSH
19738: LD_INT 6
19740: PUSH
19741: LD_INT 15
19743: PUSH
19744: LD_INT 18
19746: PUSH
19747: LD_INT 7
19749: PUSH
19750: LD_INT 17
19752: PUSH
19753: LD_INT 8
19755: PUSH
19756: LD_INT 20
19758: PUSH
19759: LD_INT 21
19761: PUSH
19762: LD_INT 22
19764: PUSH
19765: LD_INT 72
19767: PUSH
19768: LD_INT 26
19770: PUSH
19771: LD_INT 69
19773: PUSH
19774: LD_INT 39
19776: PUSH
19777: LD_INT 40
19779: PUSH
19780: LD_INT 41
19782: PUSH
19783: LD_INT 42
19785: PUSH
19786: LD_INT 43
19788: PUSH
19789: LD_INT 48
19791: PUSH
19792: LD_INT 49
19794: PUSH
19795: LD_INT 50
19797: PUSH
19798: LD_INT 51
19800: PUSH
19801: LD_INT 52
19803: PUSH
19804: LD_INT 53
19806: PUSH
19807: LD_INT 54
19809: PUSH
19810: LD_INT 55
19812: PUSH
19813: LD_INT 56
19815: PUSH
19816: LD_INT 60
19818: PUSH
19819: LD_INT 61
19821: PUSH
19822: LD_INT 62
19824: PUSH
19825: LD_INT 66
19827: PUSH
19828: LD_INT 67
19830: PUSH
19831: LD_INT 68
19833: PUSH
19834: LD_INT 81
19836: PUSH
19837: LD_INT 82
19839: PUSH
19840: LD_INT 83
19842: PUSH
19843: LD_INT 84
19845: PUSH
19846: LD_INT 85
19848: PUSH
19849: LD_INT 87
19851: PUSH
19852: EMPTY
19853: LIST
19854: LIST
19855: LIST
19856: LIST
19857: LIST
19858: LIST
19859: LIST
19860: LIST
19861: LIST
19862: LIST
19863: LIST
19864: LIST
19865: LIST
19866: LIST
19867: LIST
19868: LIST
19869: LIST
19870: LIST
19871: LIST
19872: LIST
19873: LIST
19874: LIST
19875: LIST
19876: LIST
19877: LIST
19878: LIST
19879: LIST
19880: LIST
19881: LIST
19882: LIST
19883: LIST
19884: LIST
19885: LIST
19886: LIST
19887: LIST
19888: LIST
19889: LIST
19890: LIST
19891: LIST
19892: LIST
19893: LIST
19894: LIST
19895: LIST
19896: LIST
19897: LIST
19898: LIST
19899: LIST
19900: LIST
19901: LIST
19902: LIST
19903: LIST
19904: LIST
19905: LIST
19906: ST_TO_ADDR
19907: GO 20140
19909: LD_INT 3
19911: DOUBLE
19912: EQUAL
19913: IFTRUE 19917
19915: GO 20139
19917: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
19918: LD_ADDR_VAR 0 4
19922: PUSH
19923: LD_INT 46
19925: PUSH
19926: LD_INT 47
19928: PUSH
19929: LD_INT 1
19931: PUSH
19932: LD_INT 2
19934: PUSH
19935: LD_INT 82
19937: PUSH
19938: LD_INT 83
19940: PUSH
19941: LD_INT 84
19943: PUSH
19944: LD_INT 85
19946: PUSH
19947: LD_INT 86
19949: PUSH
19950: LD_INT 11
19952: PUSH
19953: LD_INT 9
19955: PUSH
19956: LD_INT 20
19958: PUSH
19959: LD_INT 19
19961: PUSH
19962: LD_INT 21
19964: PUSH
19965: LD_INT 24
19967: PUSH
19968: LD_INT 22
19970: PUSH
19971: LD_INT 25
19973: PUSH
19974: LD_INT 28
19976: PUSH
19977: LD_INT 29
19979: PUSH
19980: LD_INT 30
19982: PUSH
19983: LD_INT 31
19985: PUSH
19986: LD_INT 37
19988: PUSH
19989: LD_INT 38
19991: PUSH
19992: LD_INT 32
19994: PUSH
19995: LD_INT 27
19997: PUSH
19998: LD_INT 33
20000: PUSH
20001: LD_INT 69
20003: PUSH
20004: LD_INT 39
20006: PUSH
20007: LD_INT 34
20009: PUSH
20010: LD_INT 40
20012: PUSH
20013: LD_INT 71
20015: PUSH
20016: LD_INT 23
20018: PUSH
20019: LD_INT 44
20021: PUSH
20022: LD_INT 48
20024: PUSH
20025: LD_INT 49
20027: PUSH
20028: LD_INT 50
20030: PUSH
20031: LD_INT 51
20033: PUSH
20034: LD_INT 52
20036: PUSH
20037: LD_INT 53
20039: PUSH
20040: LD_INT 54
20042: PUSH
20043: LD_INT 55
20045: PUSH
20046: LD_INT 56
20048: PUSH
20049: LD_INT 57
20051: PUSH
20052: LD_INT 58
20054: PUSH
20055: LD_INT 59
20057: PUSH
20058: LD_INT 63
20060: PUSH
20061: LD_INT 64
20063: PUSH
20064: LD_INT 65
20066: PUSH
20067: LD_INT 82
20069: PUSH
20070: LD_INT 83
20072: PUSH
20073: LD_INT 84
20075: PUSH
20076: LD_INT 85
20078: PUSH
20079: LD_INT 86
20081: PUSH
20082: EMPTY
20083: LIST
20084: LIST
20085: LIST
20086: LIST
20087: LIST
20088: LIST
20089: LIST
20090: LIST
20091: LIST
20092: LIST
20093: LIST
20094: LIST
20095: LIST
20096: LIST
20097: LIST
20098: LIST
20099: LIST
20100: LIST
20101: LIST
20102: LIST
20103: LIST
20104: LIST
20105: LIST
20106: LIST
20107: LIST
20108: LIST
20109: LIST
20110: LIST
20111: LIST
20112: LIST
20113: LIST
20114: LIST
20115: LIST
20116: LIST
20117: LIST
20118: LIST
20119: LIST
20120: LIST
20121: LIST
20122: LIST
20123: LIST
20124: LIST
20125: LIST
20126: LIST
20127: LIST
20128: LIST
20129: LIST
20130: LIST
20131: LIST
20132: LIST
20133: LIST
20134: LIST
20135: LIST
20136: ST_TO_ADDR
20137: GO 20140
20139: POP
// if state > - 1 and state < 3 then
20140: LD_VAR 0 3
20144: PUSH
20145: LD_INT 1
20147: NEG
20148: GREATER
20149: PUSH
20150: LD_VAR 0 3
20154: PUSH
20155: LD_INT 3
20157: LESS
20158: AND
20159: IFFALSE 20216
// for i in result do
20161: LD_ADDR_VAR 0 5
20165: PUSH
20166: LD_VAR 0 4
20170: PUSH
20171: FOR_IN
20172: IFFALSE 20214
// if GetTech ( i , side ) <> state then
20174: LD_VAR 0 5
20178: PPUSH
20179: LD_VAR 0 1
20183: PPUSH
20184: CALL_OW 321
20188: PUSH
20189: LD_VAR 0 3
20193: NONEQUAL
20194: IFFALSE 20212
// result := result diff i ;
20196: LD_ADDR_VAR 0 4
20200: PUSH
20201: LD_VAR 0 4
20205: PUSH
20206: LD_VAR 0 5
20210: DIFF
20211: ST_TO_ADDR
20212: GO 20171
20214: POP
20215: POP
// end ;
20216: LD_VAR 0 4
20220: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
20221: LD_INT 0
20223: PPUSH
20224: PPUSH
20225: PPUSH
// result := true ;
20226: LD_ADDR_VAR 0 3
20230: PUSH
20231: LD_INT 1
20233: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
20234: LD_ADDR_VAR 0 5
20238: PUSH
20239: LD_VAR 0 2
20243: PPUSH
20244: CALL_OW 480
20248: ST_TO_ADDR
// if not tmp then
20249: LD_VAR 0 5
20253: NOT
20254: IFFALSE 20258
// exit ;
20256: GO 20307
// for i in tmp do
20258: LD_ADDR_VAR 0 4
20262: PUSH
20263: LD_VAR 0 5
20267: PUSH
20268: FOR_IN
20269: IFFALSE 20305
// if GetTech ( i , side ) <> state_researched then
20271: LD_VAR 0 4
20275: PPUSH
20276: LD_VAR 0 1
20280: PPUSH
20281: CALL_OW 321
20285: PUSH
20286: LD_INT 2
20288: NONEQUAL
20289: IFFALSE 20303
// begin result := false ;
20291: LD_ADDR_VAR 0 3
20295: PUSH
20296: LD_INT 0
20298: ST_TO_ADDR
// exit ;
20299: POP
20300: POP
20301: GO 20307
// end ;
20303: GO 20268
20305: POP
20306: POP
// end ;
20307: LD_VAR 0 3
20311: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
20312: LD_INT 0
20314: PPUSH
20315: PPUSH
20316: PPUSH
20317: PPUSH
20318: PPUSH
20319: PPUSH
20320: PPUSH
20321: PPUSH
20322: PPUSH
20323: PPUSH
20324: PPUSH
20325: PPUSH
20326: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
20327: LD_VAR 0 1
20331: NOT
20332: PUSH
20333: LD_VAR 0 1
20337: PPUSH
20338: CALL_OW 257
20342: PUSH
20343: LD_INT 9
20345: NONEQUAL
20346: OR
20347: IFFALSE 20351
// exit ;
20349: GO 20924
// side := GetSide ( unit ) ;
20351: LD_ADDR_VAR 0 9
20355: PUSH
20356: LD_VAR 0 1
20360: PPUSH
20361: CALL_OW 255
20365: ST_TO_ADDR
// tech_space := tech_spacanom ;
20366: LD_ADDR_VAR 0 12
20370: PUSH
20371: LD_INT 29
20373: ST_TO_ADDR
// tech_time := tech_taurad ;
20374: LD_ADDR_VAR 0 13
20378: PUSH
20379: LD_INT 28
20381: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
20382: LD_ADDR_VAR 0 11
20386: PUSH
20387: LD_VAR 0 1
20391: PPUSH
20392: CALL_OW 310
20396: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
20397: LD_VAR 0 11
20401: PPUSH
20402: CALL_OW 247
20406: PUSH
20407: LD_INT 2
20409: EQUAL
20410: IFFALSE 20414
// exit ;
20412: GO 20924
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
20414: LD_ADDR_VAR 0 8
20418: PUSH
20419: LD_INT 81
20421: PUSH
20422: LD_VAR 0 9
20426: PUSH
20427: EMPTY
20428: LIST
20429: LIST
20430: PUSH
20431: LD_INT 3
20433: PUSH
20434: LD_INT 21
20436: PUSH
20437: LD_INT 3
20439: PUSH
20440: EMPTY
20441: LIST
20442: LIST
20443: PUSH
20444: EMPTY
20445: LIST
20446: LIST
20447: PUSH
20448: EMPTY
20449: LIST
20450: LIST
20451: PPUSH
20452: CALL_OW 69
20456: ST_TO_ADDR
// if not tmp then
20457: LD_VAR 0 8
20461: NOT
20462: IFFALSE 20466
// exit ;
20464: GO 20924
// if in_unit then
20466: LD_VAR 0 11
20470: IFFALSE 20494
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
20472: LD_ADDR_VAR 0 10
20476: PUSH
20477: LD_VAR 0 8
20481: PPUSH
20482: LD_VAR 0 11
20486: PPUSH
20487: CALL_OW 74
20491: ST_TO_ADDR
20492: GO 20514
// enemy := NearestUnitToUnit ( tmp , unit ) ;
20494: LD_ADDR_VAR 0 10
20498: PUSH
20499: LD_VAR 0 8
20503: PPUSH
20504: LD_VAR 0 1
20508: PPUSH
20509: CALL_OW 74
20513: ST_TO_ADDR
// if not enemy then
20514: LD_VAR 0 10
20518: NOT
20519: IFFALSE 20523
// exit ;
20521: GO 20924
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
20523: LD_VAR 0 11
20527: PUSH
20528: LD_VAR 0 11
20532: PPUSH
20533: LD_VAR 0 10
20537: PPUSH
20538: CALL_OW 296
20542: PUSH
20543: LD_INT 13
20545: GREATER
20546: AND
20547: PUSH
20548: LD_VAR 0 1
20552: PPUSH
20553: LD_VAR 0 10
20557: PPUSH
20558: CALL_OW 296
20562: PUSH
20563: LD_INT 12
20565: GREATER
20566: OR
20567: IFFALSE 20571
// exit ;
20569: GO 20924
// missile := [ 1 ] ;
20571: LD_ADDR_VAR 0 14
20575: PUSH
20576: LD_INT 1
20578: PUSH
20579: EMPTY
20580: LIST
20581: ST_TO_ADDR
// if Researched ( side , tech_space ) then
20582: LD_VAR 0 9
20586: PPUSH
20587: LD_VAR 0 12
20591: PPUSH
20592: CALL_OW 325
20596: IFFALSE 20625
// missile := Insert ( missile , missile + 1 , 2 ) ;
20598: LD_ADDR_VAR 0 14
20602: PUSH
20603: LD_VAR 0 14
20607: PPUSH
20608: LD_VAR 0 14
20612: PUSH
20613: LD_INT 1
20615: PLUS
20616: PPUSH
20617: LD_INT 2
20619: PPUSH
20620: CALL_OW 2
20624: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
20625: LD_VAR 0 9
20629: PPUSH
20630: LD_VAR 0 13
20634: PPUSH
20635: CALL_OW 325
20639: PUSH
20640: LD_VAR 0 10
20644: PPUSH
20645: CALL_OW 255
20649: PPUSH
20650: LD_VAR 0 13
20654: PPUSH
20655: CALL_OW 325
20659: NOT
20660: AND
20661: IFFALSE 20690
// missile := Insert ( missile , missile + 1 , 3 ) ;
20663: LD_ADDR_VAR 0 14
20667: PUSH
20668: LD_VAR 0 14
20672: PPUSH
20673: LD_VAR 0 14
20677: PUSH
20678: LD_INT 1
20680: PLUS
20681: PPUSH
20682: LD_INT 3
20684: PPUSH
20685: CALL_OW 2
20689: ST_TO_ADDR
// if missile < 2 then
20690: LD_VAR 0 14
20694: PUSH
20695: LD_INT 2
20697: LESS
20698: IFFALSE 20702
// exit ;
20700: GO 20924
// x := GetX ( enemy ) ;
20702: LD_ADDR_VAR 0 4
20706: PUSH
20707: LD_VAR 0 10
20711: PPUSH
20712: CALL_OW 250
20716: ST_TO_ADDR
// y := GetY ( enemy ) ;
20717: LD_ADDR_VAR 0 5
20721: PUSH
20722: LD_VAR 0 10
20726: PPUSH
20727: CALL_OW 251
20731: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
20732: LD_ADDR_VAR 0 6
20736: PUSH
20737: LD_VAR 0 4
20741: PUSH
20742: LD_INT 1
20744: NEG
20745: PPUSH
20746: LD_INT 1
20748: PPUSH
20749: CALL_OW 12
20753: PLUS
20754: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
20755: LD_ADDR_VAR 0 7
20759: PUSH
20760: LD_VAR 0 5
20764: PUSH
20765: LD_INT 1
20767: NEG
20768: PPUSH
20769: LD_INT 1
20771: PPUSH
20772: CALL_OW 12
20776: PLUS
20777: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
20778: LD_VAR 0 6
20782: PPUSH
20783: LD_VAR 0 7
20787: PPUSH
20788: CALL_OW 488
20792: NOT
20793: IFFALSE 20815
// begin _x := x ;
20795: LD_ADDR_VAR 0 6
20799: PUSH
20800: LD_VAR 0 4
20804: ST_TO_ADDR
// _y := y ;
20805: LD_ADDR_VAR 0 7
20809: PUSH
20810: LD_VAR 0 5
20814: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
20815: LD_ADDR_VAR 0 3
20819: PUSH
20820: LD_INT 1
20822: PPUSH
20823: LD_VAR 0 14
20827: PPUSH
20828: CALL_OW 12
20832: ST_TO_ADDR
// case i of 1 :
20833: LD_VAR 0 3
20837: PUSH
20838: LD_INT 1
20840: DOUBLE
20841: EQUAL
20842: IFTRUE 20846
20844: GO 20863
20846: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
20847: LD_VAR 0 1
20851: PPUSH
20852: LD_VAR 0 10
20856: PPUSH
20857: CALL_OW 115
20861: GO 20924
20863: LD_INT 2
20865: DOUBLE
20866: EQUAL
20867: IFTRUE 20871
20869: GO 20893
20871: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
20872: LD_VAR 0 1
20876: PPUSH
20877: LD_VAR 0 6
20881: PPUSH
20882: LD_VAR 0 7
20886: PPUSH
20887: CALL_OW 153
20891: GO 20924
20893: LD_INT 3
20895: DOUBLE
20896: EQUAL
20897: IFTRUE 20901
20899: GO 20923
20901: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
20902: LD_VAR 0 1
20906: PPUSH
20907: LD_VAR 0 6
20911: PPUSH
20912: LD_VAR 0 7
20916: PPUSH
20917: CALL_OW 154
20921: GO 20924
20923: POP
// end ;
20924: LD_VAR 0 2
20928: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
20929: LD_INT 0
20931: PPUSH
20932: PPUSH
20933: PPUSH
20934: PPUSH
20935: PPUSH
20936: PPUSH
// if not unit or not building then
20937: LD_VAR 0 1
20941: NOT
20942: PUSH
20943: LD_VAR 0 2
20947: NOT
20948: OR
20949: IFFALSE 20953
// exit ;
20951: GO 21111
// x := GetX ( building ) ;
20953: LD_ADDR_VAR 0 5
20957: PUSH
20958: LD_VAR 0 2
20962: PPUSH
20963: CALL_OW 250
20967: ST_TO_ADDR
// y := GetY ( building ) ;
20968: LD_ADDR_VAR 0 6
20972: PUSH
20973: LD_VAR 0 2
20977: PPUSH
20978: CALL_OW 251
20982: ST_TO_ADDR
// for i = 0 to 5 do
20983: LD_ADDR_VAR 0 4
20987: PUSH
20988: DOUBLE
20989: LD_INT 0
20991: DEC
20992: ST_TO_ADDR
20993: LD_INT 5
20995: PUSH
20996: FOR_TO
20997: IFFALSE 21109
// begin _x := ShiftX ( x , i , 3 ) ;
20999: LD_ADDR_VAR 0 7
21003: PUSH
21004: LD_VAR 0 5
21008: PPUSH
21009: LD_VAR 0 4
21013: PPUSH
21014: LD_INT 3
21016: PPUSH
21017: CALL_OW 272
21021: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
21022: LD_ADDR_VAR 0 8
21026: PUSH
21027: LD_VAR 0 6
21031: PPUSH
21032: LD_VAR 0 4
21036: PPUSH
21037: LD_INT 3
21039: PPUSH
21040: CALL_OW 273
21044: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21045: LD_VAR 0 7
21049: PPUSH
21050: LD_VAR 0 8
21054: PPUSH
21055: CALL_OW 488
21059: NOT
21060: IFFALSE 21064
// continue ;
21062: GO 20996
// if HexInfo ( _x , _y ) = 0 then
21064: LD_VAR 0 7
21068: PPUSH
21069: LD_VAR 0 8
21073: PPUSH
21074: CALL_OW 428
21078: PUSH
21079: LD_INT 0
21081: EQUAL
21082: IFFALSE 21107
// begin ComMoveXY ( unit , _x , _y ) ;
21084: LD_VAR 0 1
21088: PPUSH
21089: LD_VAR 0 7
21093: PPUSH
21094: LD_VAR 0 8
21098: PPUSH
21099: CALL_OW 111
// exit ;
21103: POP
21104: POP
21105: GO 21111
// end ; end ;
21107: GO 20996
21109: POP
21110: POP
// end ;
21111: LD_VAR 0 3
21115: RET
// export function ScanBase ( side , base_area ) ; begin
21116: LD_INT 0
21118: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
21119: LD_ADDR_VAR 0 3
21123: PUSH
21124: LD_VAR 0 2
21128: PPUSH
21129: LD_INT 81
21131: PUSH
21132: LD_VAR 0 1
21136: PUSH
21137: EMPTY
21138: LIST
21139: LIST
21140: PPUSH
21141: CALL_OW 70
21145: ST_TO_ADDR
// end ;
21146: LD_VAR 0 3
21150: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
21151: LD_INT 0
21153: PPUSH
21154: PPUSH
21155: PPUSH
21156: PPUSH
// result := false ;
21157: LD_ADDR_VAR 0 2
21161: PUSH
21162: LD_INT 0
21164: ST_TO_ADDR
// side := GetSide ( unit ) ;
21165: LD_ADDR_VAR 0 3
21169: PUSH
21170: LD_VAR 0 1
21174: PPUSH
21175: CALL_OW 255
21179: ST_TO_ADDR
// nat := GetNation ( unit ) ;
21180: LD_ADDR_VAR 0 4
21184: PUSH
21185: LD_VAR 0 1
21189: PPUSH
21190: CALL_OW 248
21194: ST_TO_ADDR
// case nat of 1 :
21195: LD_VAR 0 4
21199: PUSH
21200: LD_INT 1
21202: DOUBLE
21203: EQUAL
21204: IFTRUE 21208
21206: GO 21219
21208: POP
// tech := tech_lassight ; 2 :
21209: LD_ADDR_VAR 0 5
21213: PUSH
21214: LD_INT 12
21216: ST_TO_ADDR
21217: GO 21258
21219: LD_INT 2
21221: DOUBLE
21222: EQUAL
21223: IFTRUE 21227
21225: GO 21238
21227: POP
// tech := tech_mortar ; 3 :
21228: LD_ADDR_VAR 0 5
21232: PUSH
21233: LD_INT 41
21235: ST_TO_ADDR
21236: GO 21258
21238: LD_INT 3
21240: DOUBLE
21241: EQUAL
21242: IFTRUE 21246
21244: GO 21257
21246: POP
// tech := tech_bazooka ; end ;
21247: LD_ADDR_VAR 0 5
21251: PUSH
21252: LD_INT 44
21254: ST_TO_ADDR
21255: GO 21258
21257: POP
// if Researched ( side , tech ) then
21258: LD_VAR 0 3
21262: PPUSH
21263: LD_VAR 0 5
21267: PPUSH
21268: CALL_OW 325
21272: IFFALSE 21299
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
21274: LD_ADDR_VAR 0 2
21278: PUSH
21279: LD_INT 5
21281: PUSH
21282: LD_INT 8
21284: PUSH
21285: LD_INT 9
21287: PUSH
21288: EMPTY
21289: LIST
21290: LIST
21291: LIST
21292: PUSH
21293: LD_VAR 0 4
21297: ARRAY
21298: ST_TO_ADDR
// end ;
21299: LD_VAR 0 2
21303: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
21304: LD_INT 0
21306: PPUSH
21307: PPUSH
21308: PPUSH
// if not mines then
21309: LD_VAR 0 2
21313: NOT
21314: IFFALSE 21318
// exit ;
21316: GO 21462
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21318: LD_ADDR_VAR 0 5
21322: PUSH
21323: LD_INT 81
21325: PUSH
21326: LD_VAR 0 1
21330: PUSH
21331: EMPTY
21332: LIST
21333: LIST
21334: PUSH
21335: LD_INT 3
21337: PUSH
21338: LD_INT 21
21340: PUSH
21341: LD_INT 3
21343: PUSH
21344: EMPTY
21345: LIST
21346: LIST
21347: PUSH
21348: EMPTY
21349: LIST
21350: LIST
21351: PUSH
21352: EMPTY
21353: LIST
21354: LIST
21355: PPUSH
21356: CALL_OW 69
21360: ST_TO_ADDR
// for i in mines do
21361: LD_ADDR_VAR 0 4
21365: PUSH
21366: LD_VAR 0 2
21370: PUSH
21371: FOR_IN
21372: IFFALSE 21460
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
21374: LD_VAR 0 4
21378: PUSH
21379: LD_INT 1
21381: ARRAY
21382: PPUSH
21383: LD_VAR 0 4
21387: PUSH
21388: LD_INT 2
21390: ARRAY
21391: PPUSH
21392: CALL_OW 458
21396: NOT
21397: IFFALSE 21401
// continue ;
21399: GO 21371
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
21401: LD_VAR 0 4
21405: PUSH
21406: LD_INT 1
21408: ARRAY
21409: PPUSH
21410: LD_VAR 0 4
21414: PUSH
21415: LD_INT 2
21417: ARRAY
21418: PPUSH
21419: CALL_OW 428
21423: PUSH
21424: LD_VAR 0 5
21428: IN
21429: IFFALSE 21458
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
21431: LD_VAR 0 4
21435: PUSH
21436: LD_INT 1
21438: ARRAY
21439: PPUSH
21440: LD_VAR 0 4
21444: PUSH
21445: LD_INT 2
21447: ARRAY
21448: PPUSH
21449: LD_VAR 0 1
21453: PPUSH
21454: CALL_OW 456
// end ;
21458: GO 21371
21460: POP
21461: POP
// end ;
21462: LD_VAR 0 3
21466: RET
// export function Count ( array ) ; var i ; begin
21467: LD_INT 0
21469: PPUSH
21470: PPUSH
// result := 0 ;
21471: LD_ADDR_VAR 0 2
21475: PUSH
21476: LD_INT 0
21478: ST_TO_ADDR
// for i in array do
21479: LD_ADDR_VAR 0 3
21483: PUSH
21484: LD_VAR 0 1
21488: PUSH
21489: FOR_IN
21490: IFFALSE 21514
// if i then
21492: LD_VAR 0 3
21496: IFFALSE 21512
// result := result + 1 ;
21498: LD_ADDR_VAR 0 2
21502: PUSH
21503: LD_VAR 0 2
21507: PUSH
21508: LD_INT 1
21510: PLUS
21511: ST_TO_ADDR
21512: GO 21489
21514: POP
21515: POP
// end ;
21516: LD_VAR 0 2
21520: RET
// export function IsEmpty ( building ) ; begin
21521: LD_INT 0
21523: PPUSH
// if not building then
21524: LD_VAR 0 1
21528: NOT
21529: IFFALSE 21533
// exit ;
21531: GO 21576
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
21533: LD_ADDR_VAR 0 2
21537: PUSH
21538: LD_VAR 0 1
21542: PUSH
21543: LD_INT 22
21545: PUSH
21546: LD_VAR 0 1
21550: PPUSH
21551: CALL_OW 255
21555: PUSH
21556: EMPTY
21557: LIST
21558: LIST
21559: PUSH
21560: LD_INT 58
21562: PUSH
21563: EMPTY
21564: LIST
21565: PUSH
21566: EMPTY
21567: LIST
21568: LIST
21569: PPUSH
21570: CALL_OW 69
21574: IN
21575: ST_TO_ADDR
// end ;
21576: LD_VAR 0 2
21580: RET
// export function IsNotFull ( building ) ; begin
21581: LD_INT 0
21583: PPUSH
// if not building then
21584: LD_VAR 0 1
21588: NOT
21589: IFFALSE 21593
// exit ;
21591: GO 21612
// result := UnitsInside ( building ) < 6 ;
21593: LD_ADDR_VAR 0 2
21597: PUSH
21598: LD_VAR 0 1
21602: PPUSH
21603: CALL_OW 313
21607: PUSH
21608: LD_INT 6
21610: LESS
21611: ST_TO_ADDR
// end ;
21612: LD_VAR 0 2
21616: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
21617: LD_INT 0
21619: PPUSH
21620: PPUSH
21621: PPUSH
21622: PPUSH
// tmp := [ ] ;
21623: LD_ADDR_VAR 0 3
21627: PUSH
21628: EMPTY
21629: ST_TO_ADDR
// list := [ ] ;
21630: LD_ADDR_VAR 0 5
21634: PUSH
21635: EMPTY
21636: ST_TO_ADDR
// for i = 16 to 25 do
21637: LD_ADDR_VAR 0 4
21641: PUSH
21642: DOUBLE
21643: LD_INT 16
21645: DEC
21646: ST_TO_ADDR
21647: LD_INT 25
21649: PUSH
21650: FOR_TO
21651: IFFALSE 21724
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
21653: LD_ADDR_VAR 0 3
21657: PUSH
21658: LD_VAR 0 3
21662: PUSH
21663: LD_INT 22
21665: PUSH
21666: LD_VAR 0 1
21670: PPUSH
21671: CALL_OW 255
21675: PUSH
21676: EMPTY
21677: LIST
21678: LIST
21679: PUSH
21680: LD_INT 91
21682: PUSH
21683: LD_VAR 0 1
21687: PUSH
21688: LD_INT 6
21690: PUSH
21691: EMPTY
21692: LIST
21693: LIST
21694: LIST
21695: PUSH
21696: LD_INT 30
21698: PUSH
21699: LD_VAR 0 4
21703: PUSH
21704: EMPTY
21705: LIST
21706: LIST
21707: PUSH
21708: EMPTY
21709: LIST
21710: LIST
21711: LIST
21712: PUSH
21713: EMPTY
21714: LIST
21715: PPUSH
21716: CALL_OW 69
21720: ADD
21721: ST_TO_ADDR
21722: GO 21650
21724: POP
21725: POP
// for i = 1 to tmp do
21726: LD_ADDR_VAR 0 4
21730: PUSH
21731: DOUBLE
21732: LD_INT 1
21734: DEC
21735: ST_TO_ADDR
21736: LD_VAR 0 3
21740: PUSH
21741: FOR_TO
21742: IFFALSE 21830
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
21744: LD_ADDR_VAR 0 5
21748: PUSH
21749: LD_VAR 0 5
21753: PUSH
21754: LD_VAR 0 3
21758: PUSH
21759: LD_VAR 0 4
21763: ARRAY
21764: PPUSH
21765: CALL_OW 266
21769: PUSH
21770: LD_VAR 0 3
21774: PUSH
21775: LD_VAR 0 4
21779: ARRAY
21780: PPUSH
21781: CALL_OW 250
21785: PUSH
21786: LD_VAR 0 3
21790: PUSH
21791: LD_VAR 0 4
21795: ARRAY
21796: PPUSH
21797: CALL_OW 251
21801: PUSH
21802: LD_VAR 0 3
21806: PUSH
21807: LD_VAR 0 4
21811: ARRAY
21812: PPUSH
21813: CALL_OW 254
21817: PUSH
21818: EMPTY
21819: LIST
21820: LIST
21821: LIST
21822: LIST
21823: PUSH
21824: EMPTY
21825: LIST
21826: ADD
21827: ST_TO_ADDR
21828: GO 21741
21830: POP
21831: POP
// result := list ;
21832: LD_ADDR_VAR 0 2
21836: PUSH
21837: LD_VAR 0 5
21841: ST_TO_ADDR
// end ;
21842: LD_VAR 0 2
21846: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
21847: LD_INT 0
21849: PPUSH
21850: PPUSH
21851: PPUSH
21852: PPUSH
21853: PPUSH
21854: PPUSH
21855: PPUSH
// if not factory then
21856: LD_VAR 0 1
21860: NOT
21861: IFFALSE 21865
// exit ;
21863: GO 22458
// if control = control_apeman then
21865: LD_VAR 0 4
21869: PUSH
21870: LD_INT 5
21872: EQUAL
21873: IFFALSE 21982
// begin tmp := UnitsInside ( factory ) ;
21875: LD_ADDR_VAR 0 8
21879: PUSH
21880: LD_VAR 0 1
21884: PPUSH
21885: CALL_OW 313
21889: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
21890: LD_VAR 0 8
21894: PPUSH
21895: LD_INT 25
21897: PUSH
21898: LD_INT 12
21900: PUSH
21901: EMPTY
21902: LIST
21903: LIST
21904: PPUSH
21905: CALL_OW 72
21909: NOT
21910: IFFALSE 21920
// control := control_manual ;
21912: LD_ADDR_VAR 0 4
21916: PUSH
21917: LD_INT 1
21919: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
21920: LD_ADDR_VAR 0 8
21924: PUSH
21925: LD_VAR 0 1
21929: PPUSH
21930: CALL 21617 0 1
21934: ST_TO_ADDR
// if tmp then
21935: LD_VAR 0 8
21939: IFFALSE 21982
// begin for i in tmp do
21941: LD_ADDR_VAR 0 7
21945: PUSH
21946: LD_VAR 0 8
21950: PUSH
21951: FOR_IN
21952: IFFALSE 21980
// if i [ 1 ] = b_ext_radio then
21954: LD_VAR 0 7
21958: PUSH
21959: LD_INT 1
21961: ARRAY
21962: PUSH
21963: LD_INT 22
21965: EQUAL
21966: IFFALSE 21978
// begin control := control_remote ;
21968: LD_ADDR_VAR 0 4
21972: PUSH
21973: LD_INT 2
21975: ST_TO_ADDR
// break ;
21976: GO 21980
// end ;
21978: GO 21951
21980: POP
21981: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
21982: LD_VAR 0 1
21986: PPUSH
21987: LD_VAR 0 2
21991: PPUSH
21992: LD_VAR 0 3
21996: PPUSH
21997: LD_VAR 0 4
22001: PPUSH
22002: LD_VAR 0 5
22006: PPUSH
22007: CALL_OW 448
22011: IFFALSE 22046
// begin result := [ chassis , engine , control , weapon ] ;
22013: LD_ADDR_VAR 0 6
22017: PUSH
22018: LD_VAR 0 2
22022: PUSH
22023: LD_VAR 0 3
22027: PUSH
22028: LD_VAR 0 4
22032: PUSH
22033: LD_VAR 0 5
22037: PUSH
22038: EMPTY
22039: LIST
22040: LIST
22041: LIST
22042: LIST
22043: ST_TO_ADDR
// exit ;
22044: GO 22458
// end ; _chassis := AvailableChassisList ( factory ) ;
22046: LD_ADDR_VAR 0 9
22050: PUSH
22051: LD_VAR 0 1
22055: PPUSH
22056: CALL_OW 475
22060: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
22061: LD_ADDR_VAR 0 11
22065: PUSH
22066: LD_VAR 0 1
22070: PPUSH
22071: CALL_OW 476
22075: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
22076: LD_ADDR_VAR 0 12
22080: PUSH
22081: LD_VAR 0 1
22085: PPUSH
22086: CALL_OW 477
22090: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
22091: LD_ADDR_VAR 0 10
22095: PUSH
22096: LD_VAR 0 1
22100: PPUSH
22101: CALL_OW 478
22105: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
22106: LD_VAR 0 9
22110: NOT
22111: PUSH
22112: LD_VAR 0 11
22116: NOT
22117: OR
22118: PUSH
22119: LD_VAR 0 12
22123: NOT
22124: OR
22125: PUSH
22126: LD_VAR 0 10
22130: NOT
22131: OR
22132: IFFALSE 22167
// begin result := [ chassis , engine , control , weapon ] ;
22134: LD_ADDR_VAR 0 6
22138: PUSH
22139: LD_VAR 0 2
22143: PUSH
22144: LD_VAR 0 3
22148: PUSH
22149: LD_VAR 0 4
22153: PUSH
22154: LD_VAR 0 5
22158: PUSH
22159: EMPTY
22160: LIST
22161: LIST
22162: LIST
22163: LIST
22164: ST_TO_ADDR
// exit ;
22165: GO 22458
// end ; if not chassis in _chassis then
22167: LD_VAR 0 2
22171: PUSH
22172: LD_VAR 0 9
22176: IN
22177: NOT
22178: IFFALSE 22204
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
22180: LD_ADDR_VAR 0 2
22184: PUSH
22185: LD_VAR 0 9
22189: PUSH
22190: LD_INT 1
22192: PPUSH
22193: LD_VAR 0 9
22197: PPUSH
22198: CALL_OW 12
22202: ARRAY
22203: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
22204: LD_VAR 0 2
22208: PPUSH
22209: LD_VAR 0 3
22213: PPUSH
22214: CALL 22463 0 2
22218: NOT
22219: IFFALSE 22278
// repeat engine := _engine [ 1 ] ;
22221: LD_ADDR_VAR 0 3
22225: PUSH
22226: LD_VAR 0 11
22230: PUSH
22231: LD_INT 1
22233: ARRAY
22234: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
22235: LD_ADDR_VAR 0 11
22239: PUSH
22240: LD_VAR 0 11
22244: PPUSH
22245: LD_INT 1
22247: PPUSH
22248: CALL_OW 3
22252: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
22253: LD_VAR 0 2
22257: PPUSH
22258: LD_VAR 0 3
22262: PPUSH
22263: CALL 22463 0 2
22267: PUSH
22268: LD_VAR 0 11
22272: PUSH
22273: EMPTY
22274: EQUAL
22275: OR
22276: IFFALSE 22221
// if not control in _control then
22278: LD_VAR 0 4
22282: PUSH
22283: LD_VAR 0 12
22287: IN
22288: NOT
22289: IFFALSE 22315
// control := _control [ rand ( 1 , _control ) ] ;
22291: LD_ADDR_VAR 0 4
22295: PUSH
22296: LD_VAR 0 12
22300: PUSH
22301: LD_INT 1
22303: PPUSH
22304: LD_VAR 0 12
22308: PPUSH
22309: CALL_OW 12
22313: ARRAY
22314: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
22315: LD_VAR 0 2
22319: PPUSH
22320: LD_VAR 0 5
22324: PPUSH
22325: CALL 22683 0 2
22329: NOT
22330: IFFALSE 22389
// repeat weapon := _weapon [ 1 ] ;
22332: LD_ADDR_VAR 0 5
22336: PUSH
22337: LD_VAR 0 10
22341: PUSH
22342: LD_INT 1
22344: ARRAY
22345: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
22346: LD_ADDR_VAR 0 10
22350: PUSH
22351: LD_VAR 0 10
22355: PPUSH
22356: LD_INT 1
22358: PPUSH
22359: CALL_OW 3
22363: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
22364: LD_VAR 0 2
22368: PPUSH
22369: LD_VAR 0 5
22373: PPUSH
22374: CALL 22683 0 2
22378: PUSH
22379: LD_VAR 0 10
22383: PUSH
22384: EMPTY
22385: EQUAL
22386: OR
22387: IFFALSE 22332
// result := [ ] ;
22389: LD_ADDR_VAR 0 6
22393: PUSH
22394: EMPTY
22395: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
22396: LD_VAR 0 1
22400: PPUSH
22401: LD_VAR 0 2
22405: PPUSH
22406: LD_VAR 0 3
22410: PPUSH
22411: LD_VAR 0 4
22415: PPUSH
22416: LD_VAR 0 5
22420: PPUSH
22421: CALL_OW 448
22425: IFFALSE 22458
// result := [ chassis , engine , control , weapon ] ;
22427: LD_ADDR_VAR 0 6
22431: PUSH
22432: LD_VAR 0 2
22436: PUSH
22437: LD_VAR 0 3
22441: PUSH
22442: LD_VAR 0 4
22446: PUSH
22447: LD_VAR 0 5
22451: PUSH
22452: EMPTY
22453: LIST
22454: LIST
22455: LIST
22456: LIST
22457: ST_TO_ADDR
// end ;
22458: LD_VAR 0 6
22462: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
22463: LD_INT 0
22465: PPUSH
// if not chassis or not engine then
22466: LD_VAR 0 1
22470: NOT
22471: PUSH
22472: LD_VAR 0 2
22476: NOT
22477: OR
22478: IFFALSE 22482
// exit ;
22480: GO 22678
// case engine of engine_solar :
22482: LD_VAR 0 2
22486: PUSH
22487: LD_INT 2
22489: DOUBLE
22490: EQUAL
22491: IFTRUE 22495
22493: GO 22533
22495: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
22496: LD_ADDR_VAR 0 3
22500: PUSH
22501: LD_INT 11
22503: PUSH
22504: LD_INT 12
22506: PUSH
22507: LD_INT 13
22509: PUSH
22510: LD_INT 14
22512: PUSH
22513: LD_INT 1
22515: PUSH
22516: LD_INT 2
22518: PUSH
22519: LD_INT 3
22521: PUSH
22522: EMPTY
22523: LIST
22524: LIST
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: ST_TO_ADDR
22531: GO 22662
22533: LD_INT 1
22535: DOUBLE
22536: EQUAL
22537: IFTRUE 22541
22539: GO 22603
22541: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
22542: LD_ADDR_VAR 0 3
22546: PUSH
22547: LD_INT 11
22549: PUSH
22550: LD_INT 12
22552: PUSH
22553: LD_INT 13
22555: PUSH
22556: LD_INT 14
22558: PUSH
22559: LD_INT 1
22561: PUSH
22562: LD_INT 2
22564: PUSH
22565: LD_INT 3
22567: PUSH
22568: LD_INT 4
22570: PUSH
22571: LD_INT 5
22573: PUSH
22574: LD_INT 21
22576: PUSH
22577: LD_INT 23
22579: PUSH
22580: LD_INT 22
22582: PUSH
22583: LD_INT 24
22585: PUSH
22586: EMPTY
22587: LIST
22588: LIST
22589: LIST
22590: LIST
22591: LIST
22592: LIST
22593: LIST
22594: LIST
22595: LIST
22596: LIST
22597: LIST
22598: LIST
22599: LIST
22600: ST_TO_ADDR
22601: GO 22662
22603: LD_INT 3
22605: DOUBLE
22606: EQUAL
22607: IFTRUE 22611
22609: GO 22661
22611: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
22612: LD_ADDR_VAR 0 3
22616: PUSH
22617: LD_INT 13
22619: PUSH
22620: LD_INT 14
22622: PUSH
22623: LD_INT 2
22625: PUSH
22626: LD_INT 3
22628: PUSH
22629: LD_INT 4
22631: PUSH
22632: LD_INT 5
22634: PUSH
22635: LD_INT 21
22637: PUSH
22638: LD_INT 22
22640: PUSH
22641: LD_INT 23
22643: PUSH
22644: LD_INT 24
22646: PUSH
22647: EMPTY
22648: LIST
22649: LIST
22650: LIST
22651: LIST
22652: LIST
22653: LIST
22654: LIST
22655: LIST
22656: LIST
22657: LIST
22658: ST_TO_ADDR
22659: GO 22662
22661: POP
// result := ( chassis in result ) ;
22662: LD_ADDR_VAR 0 3
22666: PUSH
22667: LD_VAR 0 1
22671: PUSH
22672: LD_VAR 0 3
22676: IN
22677: ST_TO_ADDR
// end ;
22678: LD_VAR 0 3
22682: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
22683: LD_INT 0
22685: PPUSH
// if not chassis or not weapon then
22686: LD_VAR 0 1
22690: NOT
22691: PUSH
22692: LD_VAR 0 2
22696: NOT
22697: OR
22698: IFFALSE 22702
// exit ;
22700: GO 23728
// case weapon of us_machine_gun :
22702: LD_VAR 0 2
22706: PUSH
22707: LD_INT 2
22709: DOUBLE
22710: EQUAL
22711: IFTRUE 22715
22713: GO 22745
22715: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
22716: LD_ADDR_VAR 0 3
22720: PUSH
22721: LD_INT 1
22723: PUSH
22724: LD_INT 2
22726: PUSH
22727: LD_INT 3
22729: PUSH
22730: LD_INT 4
22732: PUSH
22733: LD_INT 5
22735: PUSH
22736: EMPTY
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: ST_TO_ADDR
22743: GO 23712
22745: LD_INT 3
22747: DOUBLE
22748: EQUAL
22749: IFTRUE 22753
22751: GO 22783
22753: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
22754: LD_ADDR_VAR 0 3
22758: PUSH
22759: LD_INT 1
22761: PUSH
22762: LD_INT 2
22764: PUSH
22765: LD_INT 3
22767: PUSH
22768: LD_INT 4
22770: PUSH
22771: LD_INT 5
22773: PUSH
22774: EMPTY
22775: LIST
22776: LIST
22777: LIST
22778: LIST
22779: LIST
22780: ST_TO_ADDR
22781: GO 23712
22783: LD_INT 11
22785: DOUBLE
22786: EQUAL
22787: IFTRUE 22791
22789: GO 22821
22791: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
22792: LD_ADDR_VAR 0 3
22796: PUSH
22797: LD_INT 1
22799: PUSH
22800: LD_INT 2
22802: PUSH
22803: LD_INT 3
22805: PUSH
22806: LD_INT 4
22808: PUSH
22809: LD_INT 5
22811: PUSH
22812: EMPTY
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: ST_TO_ADDR
22819: GO 23712
22821: LD_INT 4
22823: DOUBLE
22824: EQUAL
22825: IFTRUE 22829
22827: GO 22855
22829: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
22830: LD_ADDR_VAR 0 3
22834: PUSH
22835: LD_INT 2
22837: PUSH
22838: LD_INT 3
22840: PUSH
22841: LD_INT 4
22843: PUSH
22844: LD_INT 5
22846: PUSH
22847: EMPTY
22848: LIST
22849: LIST
22850: LIST
22851: LIST
22852: ST_TO_ADDR
22853: GO 23712
22855: LD_INT 5
22857: DOUBLE
22858: EQUAL
22859: IFTRUE 22863
22861: GO 22889
22863: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
22864: LD_ADDR_VAR 0 3
22868: PUSH
22869: LD_INT 2
22871: PUSH
22872: LD_INT 3
22874: PUSH
22875: LD_INT 4
22877: PUSH
22878: LD_INT 5
22880: PUSH
22881: EMPTY
22882: LIST
22883: LIST
22884: LIST
22885: LIST
22886: ST_TO_ADDR
22887: GO 23712
22889: LD_INT 9
22891: DOUBLE
22892: EQUAL
22893: IFTRUE 22897
22895: GO 22923
22897: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
22898: LD_ADDR_VAR 0 3
22902: PUSH
22903: LD_INT 2
22905: PUSH
22906: LD_INT 3
22908: PUSH
22909: LD_INT 4
22911: PUSH
22912: LD_INT 5
22914: PUSH
22915: EMPTY
22916: LIST
22917: LIST
22918: LIST
22919: LIST
22920: ST_TO_ADDR
22921: GO 23712
22923: LD_INT 7
22925: DOUBLE
22926: EQUAL
22927: IFTRUE 22931
22929: GO 22957
22931: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
22932: LD_ADDR_VAR 0 3
22936: PUSH
22937: LD_INT 2
22939: PUSH
22940: LD_INT 3
22942: PUSH
22943: LD_INT 4
22945: PUSH
22946: LD_INT 5
22948: PUSH
22949: EMPTY
22950: LIST
22951: LIST
22952: LIST
22953: LIST
22954: ST_TO_ADDR
22955: GO 23712
22957: LD_INT 12
22959: DOUBLE
22960: EQUAL
22961: IFTRUE 22965
22963: GO 22991
22965: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
22966: LD_ADDR_VAR 0 3
22970: PUSH
22971: LD_INT 2
22973: PUSH
22974: LD_INT 3
22976: PUSH
22977: LD_INT 4
22979: PUSH
22980: LD_INT 5
22982: PUSH
22983: EMPTY
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: ST_TO_ADDR
22989: GO 23712
22991: LD_INT 13
22993: DOUBLE
22994: EQUAL
22995: IFTRUE 22999
22997: GO 23025
22999: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
23000: LD_ADDR_VAR 0 3
23004: PUSH
23005: LD_INT 2
23007: PUSH
23008: LD_INT 3
23010: PUSH
23011: LD_INT 4
23013: PUSH
23014: LD_INT 5
23016: PUSH
23017: EMPTY
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: ST_TO_ADDR
23023: GO 23712
23025: LD_INT 14
23027: DOUBLE
23028: EQUAL
23029: IFTRUE 23033
23031: GO 23051
23033: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
23034: LD_ADDR_VAR 0 3
23038: PUSH
23039: LD_INT 4
23041: PUSH
23042: LD_INT 5
23044: PUSH
23045: EMPTY
23046: LIST
23047: LIST
23048: ST_TO_ADDR
23049: GO 23712
23051: LD_INT 6
23053: DOUBLE
23054: EQUAL
23055: IFTRUE 23059
23057: GO 23077
23059: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
23060: LD_ADDR_VAR 0 3
23064: PUSH
23065: LD_INT 4
23067: PUSH
23068: LD_INT 5
23070: PUSH
23071: EMPTY
23072: LIST
23073: LIST
23074: ST_TO_ADDR
23075: GO 23712
23077: LD_INT 10
23079: DOUBLE
23080: EQUAL
23081: IFTRUE 23085
23083: GO 23103
23085: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
23086: LD_ADDR_VAR 0 3
23090: PUSH
23091: LD_INT 4
23093: PUSH
23094: LD_INT 5
23096: PUSH
23097: EMPTY
23098: LIST
23099: LIST
23100: ST_TO_ADDR
23101: GO 23712
23103: LD_INT 22
23105: DOUBLE
23106: EQUAL
23107: IFTRUE 23111
23109: GO 23137
23111: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
23112: LD_ADDR_VAR 0 3
23116: PUSH
23117: LD_INT 11
23119: PUSH
23120: LD_INT 12
23122: PUSH
23123: LD_INT 13
23125: PUSH
23126: LD_INT 14
23128: PUSH
23129: EMPTY
23130: LIST
23131: LIST
23132: LIST
23133: LIST
23134: ST_TO_ADDR
23135: GO 23712
23137: LD_INT 23
23139: DOUBLE
23140: EQUAL
23141: IFTRUE 23145
23143: GO 23171
23145: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
23146: LD_ADDR_VAR 0 3
23150: PUSH
23151: LD_INT 11
23153: PUSH
23154: LD_INT 12
23156: PUSH
23157: LD_INT 13
23159: PUSH
23160: LD_INT 14
23162: PUSH
23163: EMPTY
23164: LIST
23165: LIST
23166: LIST
23167: LIST
23168: ST_TO_ADDR
23169: GO 23712
23171: LD_INT 24
23173: DOUBLE
23174: EQUAL
23175: IFTRUE 23179
23177: GO 23205
23179: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
23180: LD_ADDR_VAR 0 3
23184: PUSH
23185: LD_INT 11
23187: PUSH
23188: LD_INT 12
23190: PUSH
23191: LD_INT 13
23193: PUSH
23194: LD_INT 14
23196: PUSH
23197: EMPTY
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: ST_TO_ADDR
23203: GO 23712
23205: LD_INT 30
23207: DOUBLE
23208: EQUAL
23209: IFTRUE 23213
23211: GO 23239
23213: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
23214: LD_ADDR_VAR 0 3
23218: PUSH
23219: LD_INT 11
23221: PUSH
23222: LD_INT 12
23224: PUSH
23225: LD_INT 13
23227: PUSH
23228: LD_INT 14
23230: PUSH
23231: EMPTY
23232: LIST
23233: LIST
23234: LIST
23235: LIST
23236: ST_TO_ADDR
23237: GO 23712
23239: LD_INT 25
23241: DOUBLE
23242: EQUAL
23243: IFTRUE 23247
23245: GO 23265
23247: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
23248: LD_ADDR_VAR 0 3
23252: PUSH
23253: LD_INT 13
23255: PUSH
23256: LD_INT 14
23258: PUSH
23259: EMPTY
23260: LIST
23261: LIST
23262: ST_TO_ADDR
23263: GO 23712
23265: LD_INT 27
23267: DOUBLE
23268: EQUAL
23269: IFTRUE 23273
23271: GO 23291
23273: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
23274: LD_ADDR_VAR 0 3
23278: PUSH
23279: LD_INT 13
23281: PUSH
23282: LD_INT 14
23284: PUSH
23285: EMPTY
23286: LIST
23287: LIST
23288: ST_TO_ADDR
23289: GO 23712
23291: LD_INT 28
23293: DOUBLE
23294: EQUAL
23295: IFTRUE 23299
23297: GO 23317
23299: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
23300: LD_ADDR_VAR 0 3
23304: PUSH
23305: LD_INT 13
23307: PUSH
23308: LD_INT 14
23310: PUSH
23311: EMPTY
23312: LIST
23313: LIST
23314: ST_TO_ADDR
23315: GO 23712
23317: LD_INT 29
23319: DOUBLE
23320: EQUAL
23321: IFTRUE 23325
23323: GO 23343
23325: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
23326: LD_ADDR_VAR 0 3
23330: PUSH
23331: LD_INT 13
23333: PUSH
23334: LD_INT 14
23336: PUSH
23337: EMPTY
23338: LIST
23339: LIST
23340: ST_TO_ADDR
23341: GO 23712
23343: LD_INT 31
23345: DOUBLE
23346: EQUAL
23347: IFTRUE 23351
23349: GO 23369
23351: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
23352: LD_ADDR_VAR 0 3
23356: PUSH
23357: LD_INT 13
23359: PUSH
23360: LD_INT 14
23362: PUSH
23363: EMPTY
23364: LIST
23365: LIST
23366: ST_TO_ADDR
23367: GO 23712
23369: LD_INT 26
23371: DOUBLE
23372: EQUAL
23373: IFTRUE 23377
23375: GO 23395
23377: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
23378: LD_ADDR_VAR 0 3
23382: PUSH
23383: LD_INT 13
23385: PUSH
23386: LD_INT 14
23388: PUSH
23389: EMPTY
23390: LIST
23391: LIST
23392: ST_TO_ADDR
23393: GO 23712
23395: LD_INT 42
23397: DOUBLE
23398: EQUAL
23399: IFTRUE 23403
23401: GO 23429
23403: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
23404: LD_ADDR_VAR 0 3
23408: PUSH
23409: LD_INT 21
23411: PUSH
23412: LD_INT 22
23414: PUSH
23415: LD_INT 23
23417: PUSH
23418: LD_INT 24
23420: PUSH
23421: EMPTY
23422: LIST
23423: LIST
23424: LIST
23425: LIST
23426: ST_TO_ADDR
23427: GO 23712
23429: LD_INT 43
23431: DOUBLE
23432: EQUAL
23433: IFTRUE 23437
23435: GO 23463
23437: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
23438: LD_ADDR_VAR 0 3
23442: PUSH
23443: LD_INT 21
23445: PUSH
23446: LD_INT 22
23448: PUSH
23449: LD_INT 23
23451: PUSH
23452: LD_INT 24
23454: PUSH
23455: EMPTY
23456: LIST
23457: LIST
23458: LIST
23459: LIST
23460: ST_TO_ADDR
23461: GO 23712
23463: LD_INT 44
23465: DOUBLE
23466: EQUAL
23467: IFTRUE 23471
23469: GO 23497
23471: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
23472: LD_ADDR_VAR 0 3
23476: PUSH
23477: LD_INT 21
23479: PUSH
23480: LD_INT 22
23482: PUSH
23483: LD_INT 23
23485: PUSH
23486: LD_INT 24
23488: PUSH
23489: EMPTY
23490: LIST
23491: LIST
23492: LIST
23493: LIST
23494: ST_TO_ADDR
23495: GO 23712
23497: LD_INT 45
23499: DOUBLE
23500: EQUAL
23501: IFTRUE 23505
23503: GO 23531
23505: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
23506: LD_ADDR_VAR 0 3
23510: PUSH
23511: LD_INT 21
23513: PUSH
23514: LD_INT 22
23516: PUSH
23517: LD_INT 23
23519: PUSH
23520: LD_INT 24
23522: PUSH
23523: EMPTY
23524: LIST
23525: LIST
23526: LIST
23527: LIST
23528: ST_TO_ADDR
23529: GO 23712
23531: LD_INT 49
23533: DOUBLE
23534: EQUAL
23535: IFTRUE 23539
23537: GO 23565
23539: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
23540: LD_ADDR_VAR 0 3
23544: PUSH
23545: LD_INT 21
23547: PUSH
23548: LD_INT 22
23550: PUSH
23551: LD_INT 23
23553: PUSH
23554: LD_INT 24
23556: PUSH
23557: EMPTY
23558: LIST
23559: LIST
23560: LIST
23561: LIST
23562: ST_TO_ADDR
23563: GO 23712
23565: LD_INT 51
23567: DOUBLE
23568: EQUAL
23569: IFTRUE 23573
23571: GO 23599
23573: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
23574: LD_ADDR_VAR 0 3
23578: PUSH
23579: LD_INT 21
23581: PUSH
23582: LD_INT 22
23584: PUSH
23585: LD_INT 23
23587: PUSH
23588: LD_INT 24
23590: PUSH
23591: EMPTY
23592: LIST
23593: LIST
23594: LIST
23595: LIST
23596: ST_TO_ADDR
23597: GO 23712
23599: LD_INT 52
23601: DOUBLE
23602: EQUAL
23603: IFTRUE 23607
23605: GO 23633
23607: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
23608: LD_ADDR_VAR 0 3
23612: PUSH
23613: LD_INT 21
23615: PUSH
23616: LD_INT 22
23618: PUSH
23619: LD_INT 23
23621: PUSH
23622: LD_INT 24
23624: PUSH
23625: EMPTY
23626: LIST
23627: LIST
23628: LIST
23629: LIST
23630: ST_TO_ADDR
23631: GO 23712
23633: LD_INT 53
23635: DOUBLE
23636: EQUAL
23637: IFTRUE 23641
23639: GO 23659
23641: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
23642: LD_ADDR_VAR 0 3
23646: PUSH
23647: LD_INT 23
23649: PUSH
23650: LD_INT 24
23652: PUSH
23653: EMPTY
23654: LIST
23655: LIST
23656: ST_TO_ADDR
23657: GO 23712
23659: LD_INT 46
23661: DOUBLE
23662: EQUAL
23663: IFTRUE 23667
23665: GO 23685
23667: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
23668: LD_ADDR_VAR 0 3
23672: PUSH
23673: LD_INT 23
23675: PUSH
23676: LD_INT 24
23678: PUSH
23679: EMPTY
23680: LIST
23681: LIST
23682: ST_TO_ADDR
23683: GO 23712
23685: LD_INT 47
23687: DOUBLE
23688: EQUAL
23689: IFTRUE 23693
23691: GO 23711
23693: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
23694: LD_ADDR_VAR 0 3
23698: PUSH
23699: LD_INT 23
23701: PUSH
23702: LD_INT 24
23704: PUSH
23705: EMPTY
23706: LIST
23707: LIST
23708: ST_TO_ADDR
23709: GO 23712
23711: POP
// result := ( chassis in result ) ;
23712: LD_ADDR_VAR 0 3
23716: PUSH
23717: LD_VAR 0 1
23721: PUSH
23722: LD_VAR 0 3
23726: IN
23727: ST_TO_ADDR
// end ;
23728: LD_VAR 0 3
23732: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
23733: LD_INT 0
23735: PPUSH
23736: PPUSH
23737: PPUSH
23738: PPUSH
23739: PPUSH
23740: PPUSH
23741: PPUSH
// result := array ;
23742: LD_ADDR_VAR 0 5
23746: PUSH
23747: LD_VAR 0 1
23751: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
23752: LD_VAR 0 1
23756: NOT
23757: PUSH
23758: LD_VAR 0 2
23762: NOT
23763: OR
23764: PUSH
23765: LD_VAR 0 3
23769: NOT
23770: OR
23771: PUSH
23772: LD_VAR 0 2
23776: PUSH
23777: LD_VAR 0 1
23781: GREATER
23782: OR
23783: PUSH
23784: LD_VAR 0 3
23788: PUSH
23789: LD_VAR 0 1
23793: GREATER
23794: OR
23795: IFFALSE 23799
// exit ;
23797: GO 24095
// if direction then
23799: LD_VAR 0 4
23803: IFFALSE 23867
// begin d := 1 ;
23805: LD_ADDR_VAR 0 9
23809: PUSH
23810: LD_INT 1
23812: ST_TO_ADDR
// if i_from > i_to then
23813: LD_VAR 0 2
23817: PUSH
23818: LD_VAR 0 3
23822: GREATER
23823: IFFALSE 23849
// length := ( array - i_from ) + i_to else
23825: LD_ADDR_VAR 0 11
23829: PUSH
23830: LD_VAR 0 1
23834: PUSH
23835: LD_VAR 0 2
23839: MINUS
23840: PUSH
23841: LD_VAR 0 3
23845: PLUS
23846: ST_TO_ADDR
23847: GO 23865
// length := i_to - i_from ;
23849: LD_ADDR_VAR 0 11
23853: PUSH
23854: LD_VAR 0 3
23858: PUSH
23859: LD_VAR 0 2
23863: MINUS
23864: ST_TO_ADDR
// end else
23865: GO 23928
// begin d := - 1 ;
23867: LD_ADDR_VAR 0 9
23871: PUSH
23872: LD_INT 1
23874: NEG
23875: ST_TO_ADDR
// if i_from > i_to then
23876: LD_VAR 0 2
23880: PUSH
23881: LD_VAR 0 3
23885: GREATER
23886: IFFALSE 23906
// length := i_from - i_to else
23888: LD_ADDR_VAR 0 11
23892: PUSH
23893: LD_VAR 0 2
23897: PUSH
23898: LD_VAR 0 3
23902: MINUS
23903: ST_TO_ADDR
23904: GO 23928
// length := ( array - i_to ) + i_from ;
23906: LD_ADDR_VAR 0 11
23910: PUSH
23911: LD_VAR 0 1
23915: PUSH
23916: LD_VAR 0 3
23920: MINUS
23921: PUSH
23922: LD_VAR 0 2
23926: PLUS
23927: ST_TO_ADDR
// end ; if not length then
23928: LD_VAR 0 11
23932: NOT
23933: IFFALSE 23937
// exit ;
23935: GO 24095
// tmp := array ;
23937: LD_ADDR_VAR 0 10
23941: PUSH
23942: LD_VAR 0 1
23946: ST_TO_ADDR
// for i = 1 to length do
23947: LD_ADDR_VAR 0 6
23951: PUSH
23952: DOUBLE
23953: LD_INT 1
23955: DEC
23956: ST_TO_ADDR
23957: LD_VAR 0 11
23961: PUSH
23962: FOR_TO
23963: IFFALSE 24083
// begin for j = 1 to array do
23965: LD_ADDR_VAR 0 7
23969: PUSH
23970: DOUBLE
23971: LD_INT 1
23973: DEC
23974: ST_TO_ADDR
23975: LD_VAR 0 1
23979: PUSH
23980: FOR_TO
23981: IFFALSE 24069
// begin k := j + d ;
23983: LD_ADDR_VAR 0 8
23987: PUSH
23988: LD_VAR 0 7
23992: PUSH
23993: LD_VAR 0 9
23997: PLUS
23998: ST_TO_ADDR
// if k > array then
23999: LD_VAR 0 8
24003: PUSH
24004: LD_VAR 0 1
24008: GREATER
24009: IFFALSE 24019
// k := 1 ;
24011: LD_ADDR_VAR 0 8
24015: PUSH
24016: LD_INT 1
24018: ST_TO_ADDR
// if not k then
24019: LD_VAR 0 8
24023: NOT
24024: IFFALSE 24036
// k := array ;
24026: LD_ADDR_VAR 0 8
24030: PUSH
24031: LD_VAR 0 1
24035: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
24036: LD_ADDR_VAR 0 10
24040: PUSH
24041: LD_VAR 0 10
24045: PPUSH
24046: LD_VAR 0 8
24050: PPUSH
24051: LD_VAR 0 1
24055: PUSH
24056: LD_VAR 0 7
24060: ARRAY
24061: PPUSH
24062: CALL_OW 1
24066: ST_TO_ADDR
// end ;
24067: GO 23980
24069: POP
24070: POP
// array := tmp ;
24071: LD_ADDR_VAR 0 1
24075: PUSH
24076: LD_VAR 0 10
24080: ST_TO_ADDR
// end ;
24081: GO 23962
24083: POP
24084: POP
// result := array ;
24085: LD_ADDR_VAR 0 5
24089: PUSH
24090: LD_VAR 0 1
24094: ST_TO_ADDR
// end ;
24095: LD_VAR 0 5
24099: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
24100: LD_INT 0
24102: PPUSH
24103: PPUSH
// result := 0 ;
24104: LD_ADDR_VAR 0 3
24108: PUSH
24109: LD_INT 0
24111: ST_TO_ADDR
// if not array or not value in array then
24112: LD_VAR 0 1
24116: NOT
24117: PUSH
24118: LD_VAR 0 2
24122: PUSH
24123: LD_VAR 0 1
24127: IN
24128: NOT
24129: OR
24130: IFFALSE 24134
// exit ;
24132: GO 24188
// for i = 1 to array do
24134: LD_ADDR_VAR 0 4
24138: PUSH
24139: DOUBLE
24140: LD_INT 1
24142: DEC
24143: ST_TO_ADDR
24144: LD_VAR 0 1
24148: PUSH
24149: FOR_TO
24150: IFFALSE 24186
// if value = array [ i ] then
24152: LD_VAR 0 2
24156: PUSH
24157: LD_VAR 0 1
24161: PUSH
24162: LD_VAR 0 4
24166: ARRAY
24167: EQUAL
24168: IFFALSE 24184
// begin result := i ;
24170: LD_ADDR_VAR 0 3
24174: PUSH
24175: LD_VAR 0 4
24179: ST_TO_ADDR
// exit ;
24180: POP
24181: POP
24182: GO 24188
// end ;
24184: GO 24149
24186: POP
24187: POP
// end ;
24188: LD_VAR 0 3
24192: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
24193: LD_INT 0
24195: PPUSH
// vc_chassis := chassis ;
24196: LD_ADDR_OWVAR 37
24200: PUSH
24201: LD_VAR 0 1
24205: ST_TO_ADDR
// vc_engine := engine ;
24206: LD_ADDR_OWVAR 39
24210: PUSH
24211: LD_VAR 0 2
24215: ST_TO_ADDR
// vc_control := control ;
24216: LD_ADDR_OWVAR 38
24220: PUSH
24221: LD_VAR 0 3
24225: ST_TO_ADDR
// vc_weapon := weapon ;
24226: LD_ADDR_OWVAR 40
24230: PUSH
24231: LD_VAR 0 4
24235: ST_TO_ADDR
// vc_fuel_battery := fuel ;
24236: LD_ADDR_OWVAR 41
24240: PUSH
24241: LD_VAR 0 5
24245: ST_TO_ADDR
// end ;
24246: LD_VAR 0 6
24250: RET
// export function WantPlant ( unit ) ; var task ; begin
24251: LD_INT 0
24253: PPUSH
24254: PPUSH
// result := false ;
24255: LD_ADDR_VAR 0 2
24259: PUSH
24260: LD_INT 0
24262: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
24263: LD_ADDR_VAR 0 3
24267: PUSH
24268: LD_VAR 0 1
24272: PPUSH
24273: CALL_OW 437
24277: ST_TO_ADDR
// if task then
24278: LD_VAR 0 3
24282: IFFALSE 24310
// if task [ 1 ] [ 1 ] = p then
24284: LD_VAR 0 3
24288: PUSH
24289: LD_INT 1
24291: ARRAY
24292: PUSH
24293: LD_INT 1
24295: ARRAY
24296: PUSH
24297: LD_STRING p
24299: EQUAL
24300: IFFALSE 24310
// result := true ;
24302: LD_ADDR_VAR 0 2
24306: PUSH
24307: LD_INT 1
24309: ST_TO_ADDR
// end ;
24310: LD_VAR 0 2
24314: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
24315: LD_INT 0
24317: PPUSH
24318: PPUSH
24319: PPUSH
24320: PPUSH
// if pos < 1 then
24321: LD_VAR 0 2
24325: PUSH
24326: LD_INT 1
24328: LESS
24329: IFFALSE 24333
// exit ;
24331: GO 24636
// if pos = 1 then
24333: LD_VAR 0 2
24337: PUSH
24338: LD_INT 1
24340: EQUAL
24341: IFFALSE 24374
// result := Replace ( arr , pos [ 1 ] , value ) else
24343: LD_ADDR_VAR 0 4
24347: PUSH
24348: LD_VAR 0 1
24352: PPUSH
24353: LD_VAR 0 2
24357: PUSH
24358: LD_INT 1
24360: ARRAY
24361: PPUSH
24362: LD_VAR 0 3
24366: PPUSH
24367: CALL_OW 1
24371: ST_TO_ADDR
24372: GO 24636
// begin tmp := arr ;
24374: LD_ADDR_VAR 0 6
24378: PUSH
24379: LD_VAR 0 1
24383: ST_TO_ADDR
// s_arr := [ tmp ] ;
24384: LD_ADDR_VAR 0 7
24388: PUSH
24389: LD_VAR 0 6
24393: PUSH
24394: EMPTY
24395: LIST
24396: ST_TO_ADDR
// for i = 1 to pos - 1 do
24397: LD_ADDR_VAR 0 5
24401: PUSH
24402: DOUBLE
24403: LD_INT 1
24405: DEC
24406: ST_TO_ADDR
24407: LD_VAR 0 2
24411: PUSH
24412: LD_INT 1
24414: MINUS
24415: PUSH
24416: FOR_TO
24417: IFFALSE 24462
// begin tmp := tmp [ pos [ i ] ] ;
24419: LD_ADDR_VAR 0 6
24423: PUSH
24424: LD_VAR 0 6
24428: PUSH
24429: LD_VAR 0 2
24433: PUSH
24434: LD_VAR 0 5
24438: ARRAY
24439: ARRAY
24440: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
24441: LD_ADDR_VAR 0 7
24445: PUSH
24446: LD_VAR 0 7
24450: PUSH
24451: LD_VAR 0 6
24455: PUSH
24456: EMPTY
24457: LIST
24458: ADD
24459: ST_TO_ADDR
// end ;
24460: GO 24416
24462: POP
24463: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
24464: LD_ADDR_VAR 0 6
24468: PUSH
24469: LD_VAR 0 6
24473: PPUSH
24474: LD_VAR 0 2
24478: PUSH
24479: LD_VAR 0 2
24483: ARRAY
24484: PPUSH
24485: LD_VAR 0 3
24489: PPUSH
24490: CALL_OW 1
24494: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
24495: LD_ADDR_VAR 0 7
24499: PUSH
24500: LD_VAR 0 7
24504: PPUSH
24505: LD_VAR 0 7
24509: PPUSH
24510: LD_VAR 0 6
24514: PPUSH
24515: CALL_OW 1
24519: ST_TO_ADDR
// for i = s_arr downto 2 do
24520: LD_ADDR_VAR 0 5
24524: PUSH
24525: DOUBLE
24526: LD_VAR 0 7
24530: INC
24531: ST_TO_ADDR
24532: LD_INT 2
24534: PUSH
24535: FOR_DOWNTO
24536: IFFALSE 24620
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
24538: LD_ADDR_VAR 0 6
24542: PUSH
24543: LD_VAR 0 7
24547: PUSH
24548: LD_VAR 0 5
24552: PUSH
24553: LD_INT 1
24555: MINUS
24556: ARRAY
24557: PPUSH
24558: LD_VAR 0 2
24562: PUSH
24563: LD_VAR 0 5
24567: PUSH
24568: LD_INT 1
24570: MINUS
24571: ARRAY
24572: PPUSH
24573: LD_VAR 0 7
24577: PUSH
24578: LD_VAR 0 5
24582: ARRAY
24583: PPUSH
24584: CALL_OW 1
24588: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
24589: LD_ADDR_VAR 0 7
24593: PUSH
24594: LD_VAR 0 7
24598: PPUSH
24599: LD_VAR 0 5
24603: PUSH
24604: LD_INT 1
24606: MINUS
24607: PPUSH
24608: LD_VAR 0 6
24612: PPUSH
24613: CALL_OW 1
24617: ST_TO_ADDR
// end ;
24618: GO 24535
24620: POP
24621: POP
// result := s_arr [ 1 ] ;
24622: LD_ADDR_VAR 0 4
24626: PUSH
24627: LD_VAR 0 7
24631: PUSH
24632: LD_INT 1
24634: ARRAY
24635: ST_TO_ADDR
// end ; end ;
24636: LD_VAR 0 4
24640: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
24641: LD_INT 0
24643: PPUSH
24644: PPUSH
// if not list then
24645: LD_VAR 0 1
24649: NOT
24650: IFFALSE 24654
// exit ;
24652: GO 24745
// i := list [ pos1 ] ;
24654: LD_ADDR_VAR 0 5
24658: PUSH
24659: LD_VAR 0 1
24663: PUSH
24664: LD_VAR 0 2
24668: ARRAY
24669: ST_TO_ADDR
// if not i then
24670: LD_VAR 0 5
24674: NOT
24675: IFFALSE 24679
// exit ;
24677: GO 24745
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
24679: LD_ADDR_VAR 0 1
24683: PUSH
24684: LD_VAR 0 1
24688: PPUSH
24689: LD_VAR 0 2
24693: PPUSH
24694: LD_VAR 0 1
24698: PUSH
24699: LD_VAR 0 3
24703: ARRAY
24704: PPUSH
24705: CALL_OW 1
24709: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
24710: LD_ADDR_VAR 0 1
24714: PUSH
24715: LD_VAR 0 1
24719: PPUSH
24720: LD_VAR 0 3
24724: PPUSH
24725: LD_VAR 0 5
24729: PPUSH
24730: CALL_OW 1
24734: ST_TO_ADDR
// result := list ;
24735: LD_ADDR_VAR 0 4
24739: PUSH
24740: LD_VAR 0 1
24744: ST_TO_ADDR
// end ;
24745: LD_VAR 0 4
24749: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
24750: LD_INT 0
24752: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
24753: LD_ADDR_VAR 0 5
24757: PUSH
24758: LD_VAR 0 1
24762: PPUSH
24763: CALL_OW 250
24767: PPUSH
24768: LD_VAR 0 1
24772: PPUSH
24773: CALL_OW 251
24777: PPUSH
24778: LD_VAR 0 2
24782: PPUSH
24783: LD_VAR 0 3
24787: PPUSH
24788: LD_VAR 0 4
24792: PPUSH
24793: CALL 24803 0 5
24797: ST_TO_ADDR
// end ;
24798: LD_VAR 0 5
24802: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
24803: LD_INT 0
24805: PPUSH
24806: PPUSH
24807: PPUSH
24808: PPUSH
// if not list then
24809: LD_VAR 0 3
24813: NOT
24814: IFFALSE 24818
// exit ;
24816: GO 25206
// result := [ ] ;
24818: LD_ADDR_VAR 0 6
24822: PUSH
24823: EMPTY
24824: ST_TO_ADDR
// for i in list do
24825: LD_ADDR_VAR 0 7
24829: PUSH
24830: LD_VAR 0 3
24834: PUSH
24835: FOR_IN
24836: IFFALSE 25038
// begin tmp := GetDistUnitXY ( i , x , y ) ;
24838: LD_ADDR_VAR 0 9
24842: PUSH
24843: LD_VAR 0 7
24847: PPUSH
24848: LD_VAR 0 1
24852: PPUSH
24853: LD_VAR 0 2
24857: PPUSH
24858: CALL_OW 297
24862: ST_TO_ADDR
// if not result then
24863: LD_VAR 0 6
24867: NOT
24868: IFFALSE 24894
// result := [ [ i , tmp ] ] else
24870: LD_ADDR_VAR 0 6
24874: PUSH
24875: LD_VAR 0 7
24879: PUSH
24880: LD_VAR 0 9
24884: PUSH
24885: EMPTY
24886: LIST
24887: LIST
24888: PUSH
24889: EMPTY
24890: LIST
24891: ST_TO_ADDR
24892: GO 25036
// begin if result [ result ] [ 2 ] < tmp then
24894: LD_VAR 0 6
24898: PUSH
24899: LD_VAR 0 6
24903: ARRAY
24904: PUSH
24905: LD_INT 2
24907: ARRAY
24908: PUSH
24909: LD_VAR 0 9
24913: LESS
24914: IFFALSE 24956
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
24916: LD_ADDR_VAR 0 6
24920: PUSH
24921: LD_VAR 0 6
24925: PPUSH
24926: LD_VAR 0 6
24930: PUSH
24931: LD_INT 1
24933: PLUS
24934: PPUSH
24935: LD_VAR 0 7
24939: PUSH
24940: LD_VAR 0 9
24944: PUSH
24945: EMPTY
24946: LIST
24947: LIST
24948: PPUSH
24949: CALL_OW 2
24953: ST_TO_ADDR
24954: GO 25036
// for j = 1 to result do
24956: LD_ADDR_VAR 0 8
24960: PUSH
24961: DOUBLE
24962: LD_INT 1
24964: DEC
24965: ST_TO_ADDR
24966: LD_VAR 0 6
24970: PUSH
24971: FOR_TO
24972: IFFALSE 25034
// begin if tmp < result [ j ] [ 2 ] then
24974: LD_VAR 0 9
24978: PUSH
24979: LD_VAR 0 6
24983: PUSH
24984: LD_VAR 0 8
24988: ARRAY
24989: PUSH
24990: LD_INT 2
24992: ARRAY
24993: LESS
24994: IFFALSE 25032
// begin result := Insert ( result , j , [ i , tmp ] ) ;
24996: LD_ADDR_VAR 0 6
25000: PUSH
25001: LD_VAR 0 6
25005: PPUSH
25006: LD_VAR 0 8
25010: PPUSH
25011: LD_VAR 0 7
25015: PUSH
25016: LD_VAR 0 9
25020: PUSH
25021: EMPTY
25022: LIST
25023: LIST
25024: PPUSH
25025: CALL_OW 2
25029: ST_TO_ADDR
// break ;
25030: GO 25034
// end ; end ;
25032: GO 24971
25034: POP
25035: POP
// end ; end ;
25036: GO 24835
25038: POP
25039: POP
// if result and not asc then
25040: LD_VAR 0 6
25044: PUSH
25045: LD_VAR 0 4
25049: NOT
25050: AND
25051: IFFALSE 25126
// begin tmp := result ;
25053: LD_ADDR_VAR 0 9
25057: PUSH
25058: LD_VAR 0 6
25062: ST_TO_ADDR
// for i = tmp downto 1 do
25063: LD_ADDR_VAR 0 7
25067: PUSH
25068: DOUBLE
25069: LD_VAR 0 9
25073: INC
25074: ST_TO_ADDR
25075: LD_INT 1
25077: PUSH
25078: FOR_DOWNTO
25079: IFFALSE 25124
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
25081: LD_ADDR_VAR 0 6
25085: PUSH
25086: LD_VAR 0 6
25090: PPUSH
25091: LD_VAR 0 9
25095: PUSH
25096: LD_VAR 0 7
25100: MINUS
25101: PUSH
25102: LD_INT 1
25104: PLUS
25105: PPUSH
25106: LD_VAR 0 9
25110: PUSH
25111: LD_VAR 0 7
25115: ARRAY
25116: PPUSH
25117: CALL_OW 1
25121: ST_TO_ADDR
25122: GO 25078
25124: POP
25125: POP
// end ; tmp := [ ] ;
25126: LD_ADDR_VAR 0 9
25130: PUSH
25131: EMPTY
25132: ST_TO_ADDR
// if mode then
25133: LD_VAR 0 5
25137: IFFALSE 25206
// begin for i = 1 to result do
25139: LD_ADDR_VAR 0 7
25143: PUSH
25144: DOUBLE
25145: LD_INT 1
25147: DEC
25148: ST_TO_ADDR
25149: LD_VAR 0 6
25153: PUSH
25154: FOR_TO
25155: IFFALSE 25194
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
25157: LD_ADDR_VAR 0 9
25161: PUSH
25162: LD_VAR 0 9
25166: PPUSH
25167: LD_VAR 0 7
25171: PPUSH
25172: LD_VAR 0 6
25176: PUSH
25177: LD_VAR 0 7
25181: ARRAY
25182: PUSH
25183: LD_INT 1
25185: ARRAY
25186: PPUSH
25187: CALL_OW 1
25191: ST_TO_ADDR
25192: GO 25154
25194: POP
25195: POP
// result := tmp ;
25196: LD_ADDR_VAR 0 6
25200: PUSH
25201: LD_VAR 0 9
25205: ST_TO_ADDR
// end ; end ;
25206: LD_VAR 0 6
25210: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
25211: LD_INT 0
25213: PPUSH
25214: PPUSH
25215: PPUSH
25216: PPUSH
25217: PPUSH
25218: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
25219: LD_ADDR_VAR 0 5
25223: PUSH
25224: LD_INT 0
25226: PUSH
25227: LD_INT 0
25229: PUSH
25230: LD_INT 0
25232: PUSH
25233: EMPTY
25234: PUSH
25235: EMPTY
25236: LIST
25237: LIST
25238: LIST
25239: LIST
25240: ST_TO_ADDR
// if not x or not y then
25241: LD_VAR 0 2
25245: NOT
25246: PUSH
25247: LD_VAR 0 3
25251: NOT
25252: OR
25253: IFFALSE 25257
// exit ;
25255: GO 26903
// if not range then
25257: LD_VAR 0 4
25261: NOT
25262: IFFALSE 25272
// range := 10 ;
25264: LD_ADDR_VAR 0 4
25268: PUSH
25269: LD_INT 10
25271: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25272: LD_ADDR_VAR 0 8
25276: PUSH
25277: LD_INT 81
25279: PUSH
25280: LD_VAR 0 1
25284: PUSH
25285: EMPTY
25286: LIST
25287: LIST
25288: PUSH
25289: LD_INT 92
25291: PUSH
25292: LD_VAR 0 2
25296: PUSH
25297: LD_VAR 0 3
25301: PUSH
25302: LD_VAR 0 4
25306: PUSH
25307: EMPTY
25308: LIST
25309: LIST
25310: LIST
25311: LIST
25312: PUSH
25313: LD_INT 3
25315: PUSH
25316: LD_INT 21
25318: PUSH
25319: LD_INT 3
25321: PUSH
25322: EMPTY
25323: LIST
25324: LIST
25325: PUSH
25326: EMPTY
25327: LIST
25328: LIST
25329: PUSH
25330: EMPTY
25331: LIST
25332: LIST
25333: LIST
25334: PPUSH
25335: CALL_OW 69
25339: ST_TO_ADDR
// if not tmp then
25340: LD_VAR 0 8
25344: NOT
25345: IFFALSE 25349
// exit ;
25347: GO 26903
// for i in tmp do
25349: LD_ADDR_VAR 0 6
25353: PUSH
25354: LD_VAR 0 8
25358: PUSH
25359: FOR_IN
25360: IFFALSE 26878
// begin points := [ 0 , 0 , 0 ] ;
25362: LD_ADDR_VAR 0 9
25366: PUSH
25367: LD_INT 0
25369: PUSH
25370: LD_INT 0
25372: PUSH
25373: LD_INT 0
25375: PUSH
25376: EMPTY
25377: LIST
25378: LIST
25379: LIST
25380: ST_TO_ADDR
// bpoints := 1 ;
25381: LD_ADDR_VAR 0 10
25385: PUSH
25386: LD_INT 1
25388: ST_TO_ADDR
// case GetType ( i ) of unit_human :
25389: LD_VAR 0 6
25393: PPUSH
25394: CALL_OW 247
25398: PUSH
25399: LD_INT 1
25401: DOUBLE
25402: EQUAL
25403: IFTRUE 25407
25405: GO 25985
25407: POP
// begin if GetClass ( i ) = 1 then
25408: LD_VAR 0 6
25412: PPUSH
25413: CALL_OW 257
25417: PUSH
25418: LD_INT 1
25420: EQUAL
25421: IFFALSE 25442
// points := [ 10 , 5 , 3 ] ;
25423: LD_ADDR_VAR 0 9
25427: PUSH
25428: LD_INT 10
25430: PUSH
25431: LD_INT 5
25433: PUSH
25434: LD_INT 3
25436: PUSH
25437: EMPTY
25438: LIST
25439: LIST
25440: LIST
25441: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
25442: LD_VAR 0 6
25446: PPUSH
25447: CALL_OW 257
25451: PUSH
25452: LD_INT 2
25454: PUSH
25455: LD_INT 3
25457: PUSH
25458: LD_INT 4
25460: PUSH
25461: EMPTY
25462: LIST
25463: LIST
25464: LIST
25465: IN
25466: IFFALSE 25487
// points := [ 3 , 2 , 1 ] ;
25468: LD_ADDR_VAR 0 9
25472: PUSH
25473: LD_INT 3
25475: PUSH
25476: LD_INT 2
25478: PUSH
25479: LD_INT 1
25481: PUSH
25482: EMPTY
25483: LIST
25484: LIST
25485: LIST
25486: ST_TO_ADDR
// if GetClass ( i ) = 5 then
25487: LD_VAR 0 6
25491: PPUSH
25492: CALL_OW 257
25496: PUSH
25497: LD_INT 5
25499: EQUAL
25500: IFFALSE 25521
// points := [ 130 , 5 , 2 ] ;
25502: LD_ADDR_VAR 0 9
25506: PUSH
25507: LD_INT 130
25509: PUSH
25510: LD_INT 5
25512: PUSH
25513: LD_INT 2
25515: PUSH
25516: EMPTY
25517: LIST
25518: LIST
25519: LIST
25520: ST_TO_ADDR
// if GetClass ( i ) = 8 then
25521: LD_VAR 0 6
25525: PPUSH
25526: CALL_OW 257
25530: PUSH
25531: LD_INT 8
25533: EQUAL
25534: IFFALSE 25555
// points := [ 35 , 35 , 30 ] ;
25536: LD_ADDR_VAR 0 9
25540: PUSH
25541: LD_INT 35
25543: PUSH
25544: LD_INT 35
25546: PUSH
25547: LD_INT 30
25549: PUSH
25550: EMPTY
25551: LIST
25552: LIST
25553: LIST
25554: ST_TO_ADDR
// if GetClass ( i ) = 9 then
25555: LD_VAR 0 6
25559: PPUSH
25560: CALL_OW 257
25564: PUSH
25565: LD_INT 9
25567: EQUAL
25568: IFFALSE 25589
// points := [ 20 , 55 , 40 ] ;
25570: LD_ADDR_VAR 0 9
25574: PUSH
25575: LD_INT 20
25577: PUSH
25578: LD_INT 55
25580: PUSH
25581: LD_INT 40
25583: PUSH
25584: EMPTY
25585: LIST
25586: LIST
25587: LIST
25588: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
25589: LD_VAR 0 6
25593: PPUSH
25594: CALL_OW 257
25598: PUSH
25599: LD_INT 12
25601: PUSH
25602: LD_INT 16
25604: PUSH
25605: EMPTY
25606: LIST
25607: LIST
25608: IN
25609: IFFALSE 25630
// points := [ 5 , 3 , 2 ] ;
25611: LD_ADDR_VAR 0 9
25615: PUSH
25616: LD_INT 5
25618: PUSH
25619: LD_INT 3
25621: PUSH
25622: LD_INT 2
25624: PUSH
25625: EMPTY
25626: LIST
25627: LIST
25628: LIST
25629: ST_TO_ADDR
// if GetClass ( i ) = 17 then
25630: LD_VAR 0 6
25634: PPUSH
25635: CALL_OW 257
25639: PUSH
25640: LD_INT 17
25642: EQUAL
25643: IFFALSE 25664
// points := [ 100 , 50 , 75 ] ;
25645: LD_ADDR_VAR 0 9
25649: PUSH
25650: LD_INT 100
25652: PUSH
25653: LD_INT 50
25655: PUSH
25656: LD_INT 75
25658: PUSH
25659: EMPTY
25660: LIST
25661: LIST
25662: LIST
25663: ST_TO_ADDR
// if GetClass ( i ) = 15 then
25664: LD_VAR 0 6
25668: PPUSH
25669: CALL_OW 257
25673: PUSH
25674: LD_INT 15
25676: EQUAL
25677: IFFALSE 25698
// points := [ 10 , 5 , 3 ] ;
25679: LD_ADDR_VAR 0 9
25683: PUSH
25684: LD_INT 10
25686: PUSH
25687: LD_INT 5
25689: PUSH
25690: LD_INT 3
25692: PUSH
25693: EMPTY
25694: LIST
25695: LIST
25696: LIST
25697: ST_TO_ADDR
// if GetClass ( i ) = 14 then
25698: LD_VAR 0 6
25702: PPUSH
25703: CALL_OW 257
25707: PUSH
25708: LD_INT 14
25710: EQUAL
25711: IFFALSE 25732
// points := [ 10 , 0 , 0 ] ;
25713: LD_ADDR_VAR 0 9
25717: PUSH
25718: LD_INT 10
25720: PUSH
25721: LD_INT 0
25723: PUSH
25724: LD_INT 0
25726: PUSH
25727: EMPTY
25728: LIST
25729: LIST
25730: LIST
25731: ST_TO_ADDR
// if GetClass ( i ) = 11 then
25732: LD_VAR 0 6
25736: PPUSH
25737: CALL_OW 257
25741: PUSH
25742: LD_INT 11
25744: EQUAL
25745: IFFALSE 25766
// points := [ 30 , 10 , 5 ] ;
25747: LD_ADDR_VAR 0 9
25751: PUSH
25752: LD_INT 30
25754: PUSH
25755: LD_INT 10
25757: PUSH
25758: LD_INT 5
25760: PUSH
25761: EMPTY
25762: LIST
25763: LIST
25764: LIST
25765: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
25766: LD_VAR 0 1
25770: PPUSH
25771: LD_INT 5
25773: PPUSH
25774: CALL_OW 321
25778: PUSH
25779: LD_INT 2
25781: EQUAL
25782: IFFALSE 25799
// bpoints := bpoints * 1.8 ;
25784: LD_ADDR_VAR 0 10
25788: PUSH
25789: LD_VAR 0 10
25793: PUSH
25794: LD_REAL  1.80000000000000E+0000
25797: MUL
25798: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
25799: LD_VAR 0 6
25803: PPUSH
25804: CALL_OW 257
25808: PUSH
25809: LD_INT 1
25811: PUSH
25812: LD_INT 2
25814: PUSH
25815: LD_INT 3
25817: PUSH
25818: LD_INT 4
25820: PUSH
25821: EMPTY
25822: LIST
25823: LIST
25824: LIST
25825: LIST
25826: IN
25827: PUSH
25828: LD_VAR 0 1
25832: PPUSH
25833: LD_INT 51
25835: PPUSH
25836: CALL_OW 321
25840: PUSH
25841: LD_INT 2
25843: EQUAL
25844: AND
25845: IFFALSE 25862
// bpoints := bpoints * 1.2 ;
25847: LD_ADDR_VAR 0 10
25851: PUSH
25852: LD_VAR 0 10
25856: PUSH
25857: LD_REAL  1.20000000000000E+0000
25860: MUL
25861: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
25862: LD_VAR 0 6
25866: PPUSH
25867: CALL_OW 257
25871: PUSH
25872: LD_INT 5
25874: PUSH
25875: LD_INT 7
25877: PUSH
25878: LD_INT 9
25880: PUSH
25881: EMPTY
25882: LIST
25883: LIST
25884: LIST
25885: IN
25886: PUSH
25887: LD_VAR 0 1
25891: PPUSH
25892: LD_INT 52
25894: PPUSH
25895: CALL_OW 321
25899: PUSH
25900: LD_INT 2
25902: EQUAL
25903: AND
25904: IFFALSE 25921
// bpoints := bpoints * 1.5 ;
25906: LD_ADDR_VAR 0 10
25910: PUSH
25911: LD_VAR 0 10
25915: PUSH
25916: LD_REAL  1.50000000000000E+0000
25919: MUL
25920: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
25921: LD_VAR 0 1
25925: PPUSH
25926: LD_INT 66
25928: PPUSH
25929: CALL_OW 321
25933: PUSH
25934: LD_INT 2
25936: EQUAL
25937: IFFALSE 25954
// bpoints := bpoints * 1.1 ;
25939: LD_ADDR_VAR 0 10
25943: PUSH
25944: LD_VAR 0 10
25948: PUSH
25949: LD_REAL  1.10000000000000E+0000
25952: MUL
25953: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
25954: LD_ADDR_VAR 0 10
25958: PUSH
25959: LD_VAR 0 10
25963: PUSH
25964: LD_VAR 0 6
25968: PPUSH
25969: LD_INT 1
25971: PPUSH
25972: CALL_OW 259
25976: PUSH
25977: LD_REAL  1.15000000000000E+0000
25980: MUL
25981: MUL
25982: ST_TO_ADDR
// end ; unit_vehicle :
25983: GO 26807
25985: LD_INT 2
25987: DOUBLE
25988: EQUAL
25989: IFTRUE 25993
25991: GO 26795
25993: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
25994: LD_VAR 0 6
25998: PPUSH
25999: CALL_OW 264
26003: PUSH
26004: LD_INT 2
26006: PUSH
26007: LD_INT 42
26009: PUSH
26010: LD_INT 24
26012: PUSH
26013: EMPTY
26014: LIST
26015: LIST
26016: LIST
26017: IN
26018: IFFALSE 26039
// points := [ 25 , 5 , 3 ] ;
26020: LD_ADDR_VAR 0 9
26024: PUSH
26025: LD_INT 25
26027: PUSH
26028: LD_INT 5
26030: PUSH
26031: LD_INT 3
26033: PUSH
26034: EMPTY
26035: LIST
26036: LIST
26037: LIST
26038: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
26039: LD_VAR 0 6
26043: PPUSH
26044: CALL_OW 264
26048: PUSH
26049: LD_INT 4
26051: PUSH
26052: LD_INT 43
26054: PUSH
26055: LD_INT 25
26057: PUSH
26058: EMPTY
26059: LIST
26060: LIST
26061: LIST
26062: IN
26063: IFFALSE 26084
// points := [ 40 , 15 , 5 ] ;
26065: LD_ADDR_VAR 0 9
26069: PUSH
26070: LD_INT 40
26072: PUSH
26073: LD_INT 15
26075: PUSH
26076: LD_INT 5
26078: PUSH
26079: EMPTY
26080: LIST
26081: LIST
26082: LIST
26083: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
26084: LD_VAR 0 6
26088: PPUSH
26089: CALL_OW 264
26093: PUSH
26094: LD_INT 3
26096: PUSH
26097: LD_INT 23
26099: PUSH
26100: EMPTY
26101: LIST
26102: LIST
26103: IN
26104: IFFALSE 26125
// points := [ 7 , 25 , 8 ] ;
26106: LD_ADDR_VAR 0 9
26110: PUSH
26111: LD_INT 7
26113: PUSH
26114: LD_INT 25
26116: PUSH
26117: LD_INT 8
26119: PUSH
26120: EMPTY
26121: LIST
26122: LIST
26123: LIST
26124: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
26125: LD_VAR 0 6
26129: PPUSH
26130: CALL_OW 264
26134: PUSH
26135: LD_INT 5
26137: PUSH
26138: LD_INT 27
26140: PUSH
26141: LD_INT 44
26143: PUSH
26144: EMPTY
26145: LIST
26146: LIST
26147: LIST
26148: IN
26149: IFFALSE 26170
// points := [ 14 , 50 , 16 ] ;
26151: LD_ADDR_VAR 0 9
26155: PUSH
26156: LD_INT 14
26158: PUSH
26159: LD_INT 50
26161: PUSH
26162: LD_INT 16
26164: PUSH
26165: EMPTY
26166: LIST
26167: LIST
26168: LIST
26169: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
26170: LD_VAR 0 6
26174: PPUSH
26175: CALL_OW 264
26179: PUSH
26180: LD_INT 6
26182: PUSH
26183: LD_INT 46
26185: PUSH
26186: EMPTY
26187: LIST
26188: LIST
26189: IN
26190: IFFALSE 26211
// points := [ 32 , 120 , 70 ] ;
26192: LD_ADDR_VAR 0 9
26196: PUSH
26197: LD_INT 32
26199: PUSH
26200: LD_INT 120
26202: PUSH
26203: LD_INT 70
26205: PUSH
26206: EMPTY
26207: LIST
26208: LIST
26209: LIST
26210: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
26211: LD_VAR 0 6
26215: PPUSH
26216: CALL_OW 264
26220: PUSH
26221: LD_INT 7
26223: PUSH
26224: LD_INT 28
26226: PUSH
26227: LD_INT 45
26229: PUSH
26230: EMPTY
26231: LIST
26232: LIST
26233: LIST
26234: IN
26235: IFFALSE 26256
// points := [ 35 , 20 , 45 ] ;
26237: LD_ADDR_VAR 0 9
26241: PUSH
26242: LD_INT 35
26244: PUSH
26245: LD_INT 20
26247: PUSH
26248: LD_INT 45
26250: PUSH
26251: EMPTY
26252: LIST
26253: LIST
26254: LIST
26255: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
26256: LD_VAR 0 6
26260: PPUSH
26261: CALL_OW 264
26265: PUSH
26266: LD_INT 47
26268: PUSH
26269: EMPTY
26270: LIST
26271: IN
26272: IFFALSE 26293
// points := [ 67 , 45 , 75 ] ;
26274: LD_ADDR_VAR 0 9
26278: PUSH
26279: LD_INT 67
26281: PUSH
26282: LD_INT 45
26284: PUSH
26285: LD_INT 75
26287: PUSH
26288: EMPTY
26289: LIST
26290: LIST
26291: LIST
26292: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
26293: LD_VAR 0 6
26297: PPUSH
26298: CALL_OW 264
26302: PUSH
26303: LD_INT 26
26305: PUSH
26306: EMPTY
26307: LIST
26308: IN
26309: IFFALSE 26330
// points := [ 120 , 30 , 80 ] ;
26311: LD_ADDR_VAR 0 9
26315: PUSH
26316: LD_INT 120
26318: PUSH
26319: LD_INT 30
26321: PUSH
26322: LD_INT 80
26324: PUSH
26325: EMPTY
26326: LIST
26327: LIST
26328: LIST
26329: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
26330: LD_VAR 0 6
26334: PPUSH
26335: CALL_OW 264
26339: PUSH
26340: LD_INT 22
26342: PUSH
26343: EMPTY
26344: LIST
26345: IN
26346: IFFALSE 26367
// points := [ 40 , 1 , 1 ] ;
26348: LD_ADDR_VAR 0 9
26352: PUSH
26353: LD_INT 40
26355: PUSH
26356: LD_INT 1
26358: PUSH
26359: LD_INT 1
26361: PUSH
26362: EMPTY
26363: LIST
26364: LIST
26365: LIST
26366: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
26367: LD_VAR 0 6
26371: PPUSH
26372: CALL_OW 264
26376: PUSH
26377: LD_INT 29
26379: PUSH
26380: EMPTY
26381: LIST
26382: IN
26383: IFFALSE 26404
// points := [ 70 , 200 , 400 ] ;
26385: LD_ADDR_VAR 0 9
26389: PUSH
26390: LD_INT 70
26392: PUSH
26393: LD_INT 200
26395: PUSH
26396: LD_INT 400
26398: PUSH
26399: EMPTY
26400: LIST
26401: LIST
26402: LIST
26403: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
26404: LD_VAR 0 6
26408: PPUSH
26409: CALL_OW 264
26413: PUSH
26414: LD_INT 14
26416: PUSH
26417: LD_INT 53
26419: PUSH
26420: EMPTY
26421: LIST
26422: LIST
26423: IN
26424: IFFALSE 26445
// points := [ 40 , 10 , 20 ] ;
26426: LD_ADDR_VAR 0 9
26430: PUSH
26431: LD_INT 40
26433: PUSH
26434: LD_INT 10
26436: PUSH
26437: LD_INT 20
26439: PUSH
26440: EMPTY
26441: LIST
26442: LIST
26443: LIST
26444: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
26445: LD_VAR 0 6
26449: PPUSH
26450: CALL_OW 264
26454: PUSH
26455: LD_INT 9
26457: PUSH
26458: EMPTY
26459: LIST
26460: IN
26461: IFFALSE 26482
// points := [ 5 , 70 , 20 ] ;
26463: LD_ADDR_VAR 0 9
26467: PUSH
26468: LD_INT 5
26470: PUSH
26471: LD_INT 70
26473: PUSH
26474: LD_INT 20
26476: PUSH
26477: EMPTY
26478: LIST
26479: LIST
26480: LIST
26481: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
26482: LD_VAR 0 6
26486: PPUSH
26487: CALL_OW 264
26491: PUSH
26492: LD_INT 10
26494: PUSH
26495: EMPTY
26496: LIST
26497: IN
26498: IFFALSE 26519
// points := [ 35 , 110 , 70 ] ;
26500: LD_ADDR_VAR 0 9
26504: PUSH
26505: LD_INT 35
26507: PUSH
26508: LD_INT 110
26510: PUSH
26511: LD_INT 70
26513: PUSH
26514: EMPTY
26515: LIST
26516: LIST
26517: LIST
26518: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
26519: LD_VAR 0 6
26523: PPUSH
26524: CALL_OW 265
26528: PUSH
26529: LD_INT 25
26531: EQUAL
26532: IFFALSE 26553
// points := [ 80 , 65 , 100 ] ;
26534: LD_ADDR_VAR 0 9
26538: PUSH
26539: LD_INT 80
26541: PUSH
26542: LD_INT 65
26544: PUSH
26545: LD_INT 100
26547: PUSH
26548: EMPTY
26549: LIST
26550: LIST
26551: LIST
26552: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
26553: LD_VAR 0 6
26557: PPUSH
26558: CALL_OW 263
26562: PUSH
26563: LD_INT 1
26565: EQUAL
26566: IFFALSE 26601
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
26568: LD_ADDR_VAR 0 10
26572: PUSH
26573: LD_VAR 0 10
26577: PUSH
26578: LD_VAR 0 6
26582: PPUSH
26583: CALL_OW 311
26587: PPUSH
26588: LD_INT 3
26590: PPUSH
26591: CALL_OW 259
26595: PUSH
26596: LD_INT 4
26598: MUL
26599: MUL
26600: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
26601: LD_VAR 0 6
26605: PPUSH
26606: CALL_OW 263
26610: PUSH
26611: LD_INT 2
26613: EQUAL
26614: IFFALSE 26665
// begin j := IsControledBy ( i ) ;
26616: LD_ADDR_VAR 0 7
26620: PUSH
26621: LD_VAR 0 6
26625: PPUSH
26626: CALL_OW 312
26630: ST_TO_ADDR
// if j then
26631: LD_VAR 0 7
26635: IFFALSE 26665
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
26637: LD_ADDR_VAR 0 10
26641: PUSH
26642: LD_VAR 0 10
26646: PUSH
26647: LD_VAR 0 7
26651: PPUSH
26652: LD_INT 3
26654: PPUSH
26655: CALL_OW 259
26659: PUSH
26660: LD_INT 3
26662: MUL
26663: MUL
26664: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
26665: LD_VAR 0 6
26669: PPUSH
26670: CALL_OW 264
26674: PUSH
26675: LD_INT 5
26677: PUSH
26678: LD_INT 6
26680: PUSH
26681: LD_INT 46
26683: PUSH
26684: LD_INT 44
26686: PUSH
26687: LD_INT 47
26689: PUSH
26690: LD_INT 45
26692: PUSH
26693: LD_INT 28
26695: PUSH
26696: LD_INT 7
26698: PUSH
26699: LD_INT 27
26701: PUSH
26702: LD_INT 29
26704: PUSH
26705: EMPTY
26706: LIST
26707: LIST
26708: LIST
26709: LIST
26710: LIST
26711: LIST
26712: LIST
26713: LIST
26714: LIST
26715: LIST
26716: IN
26717: PUSH
26718: LD_VAR 0 1
26722: PPUSH
26723: LD_INT 52
26725: PPUSH
26726: CALL_OW 321
26730: PUSH
26731: LD_INT 2
26733: EQUAL
26734: AND
26735: IFFALSE 26752
// bpoints := bpoints * 1.2 ;
26737: LD_ADDR_VAR 0 10
26741: PUSH
26742: LD_VAR 0 10
26746: PUSH
26747: LD_REAL  1.20000000000000E+0000
26750: MUL
26751: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
26752: LD_VAR 0 6
26756: PPUSH
26757: CALL_OW 264
26761: PUSH
26762: LD_INT 6
26764: PUSH
26765: LD_INT 46
26767: PUSH
26768: LD_INT 47
26770: PUSH
26771: EMPTY
26772: LIST
26773: LIST
26774: LIST
26775: IN
26776: IFFALSE 26793
// bpoints := bpoints * 1.2 ;
26778: LD_ADDR_VAR 0 10
26782: PUSH
26783: LD_VAR 0 10
26787: PUSH
26788: LD_REAL  1.20000000000000E+0000
26791: MUL
26792: ST_TO_ADDR
// end ; unit_building :
26793: GO 26807
26795: LD_INT 3
26797: DOUBLE
26798: EQUAL
26799: IFTRUE 26803
26801: GO 26806
26803: POP
// ; end ;
26804: GO 26807
26806: POP
// for j = 1 to 3 do
26807: LD_ADDR_VAR 0 7
26811: PUSH
26812: DOUBLE
26813: LD_INT 1
26815: DEC
26816: ST_TO_ADDR
26817: LD_INT 3
26819: PUSH
26820: FOR_TO
26821: IFFALSE 26874
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
26823: LD_ADDR_VAR 0 5
26827: PUSH
26828: LD_VAR 0 5
26832: PPUSH
26833: LD_VAR 0 7
26837: PPUSH
26838: LD_VAR 0 5
26842: PUSH
26843: LD_VAR 0 7
26847: ARRAY
26848: PUSH
26849: LD_VAR 0 9
26853: PUSH
26854: LD_VAR 0 7
26858: ARRAY
26859: PUSH
26860: LD_VAR 0 10
26864: MUL
26865: PLUS
26866: PPUSH
26867: CALL_OW 1
26871: ST_TO_ADDR
26872: GO 26820
26874: POP
26875: POP
// end ;
26876: GO 25359
26878: POP
26879: POP
// result := Replace ( result , 4 , tmp ) ;
26880: LD_ADDR_VAR 0 5
26884: PUSH
26885: LD_VAR 0 5
26889: PPUSH
26890: LD_INT 4
26892: PPUSH
26893: LD_VAR 0 8
26897: PPUSH
26898: CALL_OW 1
26902: ST_TO_ADDR
// end ;
26903: LD_VAR 0 5
26907: RET
// export function DangerAtRange ( unit , range ) ; begin
26908: LD_INT 0
26910: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
26911: LD_ADDR_VAR 0 3
26915: PUSH
26916: LD_VAR 0 1
26920: PPUSH
26921: CALL_OW 255
26925: PPUSH
26926: LD_VAR 0 1
26930: PPUSH
26931: CALL_OW 250
26935: PPUSH
26936: LD_VAR 0 1
26940: PPUSH
26941: CALL_OW 251
26945: PPUSH
26946: LD_VAR 0 2
26950: PPUSH
26951: CALL 25211 0 4
26955: ST_TO_ADDR
// end ;
26956: LD_VAR 0 3
26960: RET
// export function DangerInArea ( side , area ) ; begin
26961: LD_INT 0
26963: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
26964: LD_ADDR_VAR 0 3
26968: PUSH
26969: LD_VAR 0 2
26973: PPUSH
26974: LD_INT 81
26976: PUSH
26977: LD_VAR 0 1
26981: PUSH
26982: EMPTY
26983: LIST
26984: LIST
26985: PPUSH
26986: CALL_OW 70
26990: ST_TO_ADDR
// end ;
26991: LD_VAR 0 3
26995: RET
// export function IsExtension ( b ) ; begin
26996: LD_INT 0
26998: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
26999: LD_ADDR_VAR 0 2
27003: PUSH
27004: LD_VAR 0 1
27008: PUSH
27009: LD_INT 23
27011: PUSH
27012: LD_INT 20
27014: PUSH
27015: LD_INT 22
27017: PUSH
27018: LD_INT 17
27020: PUSH
27021: LD_INT 24
27023: PUSH
27024: LD_INT 21
27026: PUSH
27027: LD_INT 19
27029: PUSH
27030: LD_INT 16
27032: PUSH
27033: LD_INT 25
27035: PUSH
27036: LD_INT 18
27038: PUSH
27039: EMPTY
27040: LIST
27041: LIST
27042: LIST
27043: LIST
27044: LIST
27045: LIST
27046: LIST
27047: LIST
27048: LIST
27049: LIST
27050: IN
27051: ST_TO_ADDR
// end ;
27052: LD_VAR 0 2
27056: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
27057: LD_INT 0
27059: PPUSH
27060: PPUSH
27061: PPUSH
// result := [ ] ;
27062: LD_ADDR_VAR 0 3
27066: PUSH
27067: EMPTY
27068: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
27069: LD_ADDR_VAR 0 4
27073: PUSH
27074: LD_VAR 0 2
27078: PPUSH
27079: LD_INT 21
27081: PUSH
27082: LD_INT 3
27084: PUSH
27085: EMPTY
27086: LIST
27087: LIST
27088: PPUSH
27089: CALL_OW 70
27093: ST_TO_ADDR
// if not tmp then
27094: LD_VAR 0 4
27098: NOT
27099: IFFALSE 27103
// exit ;
27101: GO 27161
// for i in tmp do
27103: LD_ADDR_VAR 0 5
27107: PUSH
27108: LD_VAR 0 4
27112: PUSH
27113: FOR_IN
27114: IFFALSE 27149
// if GetBase ( i ) <> base then
27116: LD_VAR 0 5
27120: PPUSH
27121: CALL_OW 274
27125: PUSH
27126: LD_VAR 0 1
27130: NONEQUAL
27131: IFFALSE 27147
// ComLinkToBase ( base , i ) ;
27133: LD_VAR 0 1
27137: PPUSH
27138: LD_VAR 0 5
27142: PPUSH
27143: CALL_OW 169
27147: GO 27113
27149: POP
27150: POP
// result := tmp ;
27151: LD_ADDR_VAR 0 3
27155: PUSH
27156: LD_VAR 0 4
27160: ST_TO_ADDR
// end ;
27161: LD_VAR 0 3
27165: RET
// export function ComComplete ( unit , b ) ; var i ; begin
27166: LD_INT 0
27168: PPUSH
27169: PPUSH
// if BuildingStatus ( b ) = bs_build then
27170: LD_VAR 0 2
27174: PPUSH
27175: CALL_OW 461
27179: PUSH
27180: LD_INT 1
27182: EQUAL
27183: IFFALSE 27243
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
27185: LD_VAR 0 1
27189: PPUSH
27190: LD_STRING h
27192: PUSH
27193: LD_VAR 0 2
27197: PPUSH
27198: CALL_OW 250
27202: PUSH
27203: LD_VAR 0 2
27207: PPUSH
27208: CALL_OW 251
27212: PUSH
27213: LD_VAR 0 2
27217: PUSH
27218: LD_INT 0
27220: PUSH
27221: LD_INT 0
27223: PUSH
27224: LD_INT 0
27226: PUSH
27227: EMPTY
27228: LIST
27229: LIST
27230: LIST
27231: LIST
27232: LIST
27233: LIST
27234: LIST
27235: PUSH
27236: EMPTY
27237: LIST
27238: PPUSH
27239: CALL_OW 446
// end ;
27243: LD_VAR 0 3
27247: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
27248: LD_INT 0
27250: PPUSH
27251: PPUSH
27252: PPUSH
27253: PPUSH
27254: PPUSH
27255: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
27256: LD_VAR 0 1
27260: NOT
27261: PUSH
27262: LD_VAR 0 1
27266: PPUSH
27267: CALL_OW 263
27271: PUSH
27272: LD_INT 2
27274: EQUAL
27275: NOT
27276: OR
27277: IFFALSE 27281
// exit ;
27279: GO 27597
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
27281: LD_ADDR_VAR 0 6
27285: PUSH
27286: LD_INT 22
27288: PUSH
27289: LD_VAR 0 1
27293: PPUSH
27294: CALL_OW 255
27298: PUSH
27299: EMPTY
27300: LIST
27301: LIST
27302: PUSH
27303: LD_INT 2
27305: PUSH
27306: LD_INT 30
27308: PUSH
27309: LD_INT 36
27311: PUSH
27312: EMPTY
27313: LIST
27314: LIST
27315: PUSH
27316: LD_INT 34
27318: PUSH
27319: LD_INT 31
27321: PUSH
27322: EMPTY
27323: LIST
27324: LIST
27325: PUSH
27326: EMPTY
27327: LIST
27328: LIST
27329: LIST
27330: PUSH
27331: EMPTY
27332: LIST
27333: LIST
27334: PPUSH
27335: CALL_OW 69
27339: ST_TO_ADDR
// if not tmp then
27340: LD_VAR 0 6
27344: NOT
27345: IFFALSE 27349
// exit ;
27347: GO 27597
// result := [ ] ;
27349: LD_ADDR_VAR 0 2
27353: PUSH
27354: EMPTY
27355: ST_TO_ADDR
// for i in tmp do
27356: LD_ADDR_VAR 0 3
27360: PUSH
27361: LD_VAR 0 6
27365: PUSH
27366: FOR_IN
27367: IFFALSE 27438
// begin t := UnitsInside ( i ) ;
27369: LD_ADDR_VAR 0 4
27373: PUSH
27374: LD_VAR 0 3
27378: PPUSH
27379: CALL_OW 313
27383: ST_TO_ADDR
// if t then
27384: LD_VAR 0 4
27388: IFFALSE 27436
// for j in t do
27390: LD_ADDR_VAR 0 7
27394: PUSH
27395: LD_VAR 0 4
27399: PUSH
27400: FOR_IN
27401: IFFALSE 27434
// result := Insert ( result , result + 1 , j ) ;
27403: LD_ADDR_VAR 0 2
27407: PUSH
27408: LD_VAR 0 2
27412: PPUSH
27413: LD_VAR 0 2
27417: PUSH
27418: LD_INT 1
27420: PLUS
27421: PPUSH
27422: LD_VAR 0 7
27426: PPUSH
27427: CALL_OW 2
27431: ST_TO_ADDR
27432: GO 27400
27434: POP
27435: POP
// end ;
27436: GO 27366
27438: POP
27439: POP
// if not result then
27440: LD_VAR 0 2
27444: NOT
27445: IFFALSE 27449
// exit ;
27447: GO 27597
// mech := result [ 1 ] ;
27449: LD_ADDR_VAR 0 5
27453: PUSH
27454: LD_VAR 0 2
27458: PUSH
27459: LD_INT 1
27461: ARRAY
27462: ST_TO_ADDR
// if result > 1 then
27463: LD_VAR 0 2
27467: PUSH
27468: LD_INT 1
27470: GREATER
27471: IFFALSE 27583
// for i = 2 to result do
27473: LD_ADDR_VAR 0 3
27477: PUSH
27478: DOUBLE
27479: LD_INT 2
27481: DEC
27482: ST_TO_ADDR
27483: LD_VAR 0 2
27487: PUSH
27488: FOR_TO
27489: IFFALSE 27581
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
27491: LD_ADDR_VAR 0 4
27495: PUSH
27496: LD_VAR 0 2
27500: PUSH
27501: LD_VAR 0 3
27505: ARRAY
27506: PPUSH
27507: LD_INT 3
27509: PPUSH
27510: CALL_OW 259
27514: PUSH
27515: LD_VAR 0 2
27519: PUSH
27520: LD_VAR 0 3
27524: ARRAY
27525: PPUSH
27526: CALL_OW 432
27530: MINUS
27531: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
27532: LD_VAR 0 4
27536: PUSH
27537: LD_VAR 0 5
27541: PPUSH
27542: LD_INT 3
27544: PPUSH
27545: CALL_OW 259
27549: PUSH
27550: LD_VAR 0 5
27554: PPUSH
27555: CALL_OW 432
27559: MINUS
27560: GREATEREQUAL
27561: IFFALSE 27579
// mech := result [ i ] ;
27563: LD_ADDR_VAR 0 5
27567: PUSH
27568: LD_VAR 0 2
27572: PUSH
27573: LD_VAR 0 3
27577: ARRAY
27578: ST_TO_ADDR
// end ;
27579: GO 27488
27581: POP
27582: POP
// ComLinkTo ( vehicle , mech ) ;
27583: LD_VAR 0 1
27587: PPUSH
27588: LD_VAR 0 5
27592: PPUSH
27593: CALL_OW 135
// end ;
27597: LD_VAR 0 2
27601: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
27602: LD_INT 0
27604: PPUSH
27605: PPUSH
27606: PPUSH
27607: PPUSH
27608: PPUSH
27609: PPUSH
27610: PPUSH
27611: PPUSH
27612: PPUSH
27613: PPUSH
27614: PPUSH
27615: PPUSH
27616: PPUSH
// result := [ ] ;
27617: LD_ADDR_VAR 0 7
27621: PUSH
27622: EMPTY
27623: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
27624: LD_VAR 0 1
27628: PPUSH
27629: CALL_OW 266
27633: PUSH
27634: LD_INT 0
27636: PUSH
27637: LD_INT 1
27639: PUSH
27640: EMPTY
27641: LIST
27642: LIST
27643: IN
27644: NOT
27645: IFFALSE 27649
// exit ;
27647: GO 29280
// if name then
27649: LD_VAR 0 3
27653: IFFALSE 27669
// SetBName ( base_dep , name ) ;
27655: LD_VAR 0 1
27659: PPUSH
27660: LD_VAR 0 3
27664: PPUSH
27665: CALL_OW 500
// base := GetBase ( base_dep ) ;
27669: LD_ADDR_VAR 0 15
27673: PUSH
27674: LD_VAR 0 1
27678: PPUSH
27679: CALL_OW 274
27683: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
27684: LD_ADDR_VAR 0 16
27688: PUSH
27689: LD_VAR 0 1
27693: PPUSH
27694: CALL_OW 255
27698: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
27699: LD_ADDR_VAR 0 17
27703: PUSH
27704: LD_VAR 0 1
27708: PPUSH
27709: CALL_OW 248
27713: ST_TO_ADDR
// if sources then
27714: LD_VAR 0 5
27718: IFFALSE 27765
// for i = 1 to 3 do
27720: LD_ADDR_VAR 0 8
27724: PUSH
27725: DOUBLE
27726: LD_INT 1
27728: DEC
27729: ST_TO_ADDR
27730: LD_INT 3
27732: PUSH
27733: FOR_TO
27734: IFFALSE 27763
// AddResourceType ( base , i , sources [ i ] ) ;
27736: LD_VAR 0 15
27740: PPUSH
27741: LD_VAR 0 8
27745: PPUSH
27746: LD_VAR 0 5
27750: PUSH
27751: LD_VAR 0 8
27755: ARRAY
27756: PPUSH
27757: CALL_OW 276
27761: GO 27733
27763: POP
27764: POP
// buildings := GetBaseBuildings ( base , area ) ;
27765: LD_ADDR_VAR 0 18
27769: PUSH
27770: LD_VAR 0 15
27774: PPUSH
27775: LD_VAR 0 2
27779: PPUSH
27780: CALL 27057 0 2
27784: ST_TO_ADDR
// InitHc ;
27785: CALL_OW 19
// InitUc ;
27789: CALL_OW 18
// uc_side := side ;
27793: LD_ADDR_OWVAR 20
27797: PUSH
27798: LD_VAR 0 16
27802: ST_TO_ADDR
// uc_nation := nation ;
27803: LD_ADDR_OWVAR 21
27807: PUSH
27808: LD_VAR 0 17
27812: ST_TO_ADDR
// if buildings then
27813: LD_VAR 0 18
27817: IFFALSE 29139
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
27819: LD_ADDR_VAR 0 19
27823: PUSH
27824: LD_VAR 0 18
27828: PPUSH
27829: LD_INT 2
27831: PUSH
27832: LD_INT 30
27834: PUSH
27835: LD_INT 29
27837: PUSH
27838: EMPTY
27839: LIST
27840: LIST
27841: PUSH
27842: LD_INT 30
27844: PUSH
27845: LD_INT 30
27847: PUSH
27848: EMPTY
27849: LIST
27850: LIST
27851: PUSH
27852: EMPTY
27853: LIST
27854: LIST
27855: LIST
27856: PPUSH
27857: CALL_OW 72
27861: ST_TO_ADDR
// if tmp then
27862: LD_VAR 0 19
27866: IFFALSE 27914
// for i in tmp do
27868: LD_ADDR_VAR 0 8
27872: PUSH
27873: LD_VAR 0 19
27877: PUSH
27878: FOR_IN
27879: IFFALSE 27912
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
27881: LD_VAR 0 8
27885: PPUSH
27886: CALL_OW 250
27890: PPUSH
27891: LD_VAR 0 8
27895: PPUSH
27896: CALL_OW 251
27900: PPUSH
27901: LD_VAR 0 16
27905: PPUSH
27906: CALL_OW 441
27910: GO 27878
27912: POP
27913: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
27914: LD_VAR 0 18
27918: PPUSH
27919: LD_INT 2
27921: PUSH
27922: LD_INT 30
27924: PUSH
27925: LD_INT 32
27927: PUSH
27928: EMPTY
27929: LIST
27930: LIST
27931: PUSH
27932: LD_INT 30
27934: PUSH
27935: LD_INT 33
27937: PUSH
27938: EMPTY
27939: LIST
27940: LIST
27941: PUSH
27942: EMPTY
27943: LIST
27944: LIST
27945: LIST
27946: PPUSH
27947: CALL_OW 72
27951: IFFALSE 28039
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
27953: LD_ADDR_VAR 0 8
27957: PUSH
27958: LD_VAR 0 18
27962: PPUSH
27963: LD_INT 2
27965: PUSH
27966: LD_INT 30
27968: PUSH
27969: LD_INT 32
27971: PUSH
27972: EMPTY
27973: LIST
27974: LIST
27975: PUSH
27976: LD_INT 30
27978: PUSH
27979: LD_INT 33
27981: PUSH
27982: EMPTY
27983: LIST
27984: LIST
27985: PUSH
27986: EMPTY
27987: LIST
27988: LIST
27989: LIST
27990: PPUSH
27991: CALL_OW 72
27995: PUSH
27996: FOR_IN
27997: IFFALSE 28037
// begin if not GetBWeapon ( i ) then
27999: LD_VAR 0 8
28003: PPUSH
28004: CALL_OW 269
28008: NOT
28009: IFFALSE 28035
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
28011: LD_VAR 0 8
28015: PPUSH
28016: LD_VAR 0 8
28020: PPUSH
28021: LD_VAR 0 2
28025: PPUSH
28026: CALL 29285 0 2
28030: PPUSH
28031: CALL_OW 431
// end ;
28035: GO 27996
28037: POP
28038: POP
// end ; for i = 1 to personel do
28039: LD_ADDR_VAR 0 8
28043: PUSH
28044: DOUBLE
28045: LD_INT 1
28047: DEC
28048: ST_TO_ADDR
28049: LD_VAR 0 6
28053: PUSH
28054: FOR_TO
28055: IFFALSE 29119
// begin if i > 4 then
28057: LD_VAR 0 8
28061: PUSH
28062: LD_INT 4
28064: GREATER
28065: IFFALSE 28069
// break ;
28067: GO 29119
// case i of 1 :
28069: LD_VAR 0 8
28073: PUSH
28074: LD_INT 1
28076: DOUBLE
28077: EQUAL
28078: IFTRUE 28082
28080: GO 28162
28082: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
28083: LD_ADDR_VAR 0 12
28087: PUSH
28088: LD_VAR 0 18
28092: PPUSH
28093: LD_INT 22
28095: PUSH
28096: LD_VAR 0 16
28100: PUSH
28101: EMPTY
28102: LIST
28103: LIST
28104: PUSH
28105: LD_INT 58
28107: PUSH
28108: EMPTY
28109: LIST
28110: PUSH
28111: LD_INT 2
28113: PUSH
28114: LD_INT 30
28116: PUSH
28117: LD_INT 32
28119: PUSH
28120: EMPTY
28121: LIST
28122: LIST
28123: PUSH
28124: LD_INT 30
28126: PUSH
28127: LD_INT 4
28129: PUSH
28130: EMPTY
28131: LIST
28132: LIST
28133: PUSH
28134: LD_INT 30
28136: PUSH
28137: LD_INT 5
28139: PUSH
28140: EMPTY
28141: LIST
28142: LIST
28143: PUSH
28144: EMPTY
28145: LIST
28146: LIST
28147: LIST
28148: LIST
28149: PUSH
28150: EMPTY
28151: LIST
28152: LIST
28153: LIST
28154: PPUSH
28155: CALL_OW 72
28159: ST_TO_ADDR
28160: GO 28384
28162: LD_INT 2
28164: DOUBLE
28165: EQUAL
28166: IFTRUE 28170
28168: GO 28232
28170: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
28171: LD_ADDR_VAR 0 12
28175: PUSH
28176: LD_VAR 0 18
28180: PPUSH
28181: LD_INT 22
28183: PUSH
28184: LD_VAR 0 16
28188: PUSH
28189: EMPTY
28190: LIST
28191: LIST
28192: PUSH
28193: LD_INT 2
28195: PUSH
28196: LD_INT 30
28198: PUSH
28199: LD_INT 0
28201: PUSH
28202: EMPTY
28203: LIST
28204: LIST
28205: PUSH
28206: LD_INT 30
28208: PUSH
28209: LD_INT 1
28211: PUSH
28212: EMPTY
28213: LIST
28214: LIST
28215: PUSH
28216: EMPTY
28217: LIST
28218: LIST
28219: LIST
28220: PUSH
28221: EMPTY
28222: LIST
28223: LIST
28224: PPUSH
28225: CALL_OW 72
28229: ST_TO_ADDR
28230: GO 28384
28232: LD_INT 3
28234: DOUBLE
28235: EQUAL
28236: IFTRUE 28240
28238: GO 28302
28240: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
28241: LD_ADDR_VAR 0 12
28245: PUSH
28246: LD_VAR 0 18
28250: PPUSH
28251: LD_INT 22
28253: PUSH
28254: LD_VAR 0 16
28258: PUSH
28259: EMPTY
28260: LIST
28261: LIST
28262: PUSH
28263: LD_INT 2
28265: PUSH
28266: LD_INT 30
28268: PUSH
28269: LD_INT 2
28271: PUSH
28272: EMPTY
28273: LIST
28274: LIST
28275: PUSH
28276: LD_INT 30
28278: PUSH
28279: LD_INT 3
28281: PUSH
28282: EMPTY
28283: LIST
28284: LIST
28285: PUSH
28286: EMPTY
28287: LIST
28288: LIST
28289: LIST
28290: PUSH
28291: EMPTY
28292: LIST
28293: LIST
28294: PPUSH
28295: CALL_OW 72
28299: ST_TO_ADDR
28300: GO 28384
28302: LD_INT 4
28304: DOUBLE
28305: EQUAL
28306: IFTRUE 28310
28308: GO 28383
28310: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
28311: LD_ADDR_VAR 0 12
28315: PUSH
28316: LD_VAR 0 18
28320: PPUSH
28321: LD_INT 22
28323: PUSH
28324: LD_VAR 0 16
28328: PUSH
28329: EMPTY
28330: LIST
28331: LIST
28332: PUSH
28333: LD_INT 2
28335: PUSH
28336: LD_INT 30
28338: PUSH
28339: LD_INT 6
28341: PUSH
28342: EMPTY
28343: LIST
28344: LIST
28345: PUSH
28346: LD_INT 30
28348: PUSH
28349: LD_INT 7
28351: PUSH
28352: EMPTY
28353: LIST
28354: LIST
28355: PUSH
28356: LD_INT 30
28358: PUSH
28359: LD_INT 8
28361: PUSH
28362: EMPTY
28363: LIST
28364: LIST
28365: PUSH
28366: EMPTY
28367: LIST
28368: LIST
28369: LIST
28370: LIST
28371: PUSH
28372: EMPTY
28373: LIST
28374: LIST
28375: PPUSH
28376: CALL_OW 72
28380: ST_TO_ADDR
28381: GO 28384
28383: POP
// if i = 1 then
28384: LD_VAR 0 8
28388: PUSH
28389: LD_INT 1
28391: EQUAL
28392: IFFALSE 28503
// begin tmp := [ ] ;
28394: LD_ADDR_VAR 0 19
28398: PUSH
28399: EMPTY
28400: ST_TO_ADDR
// for j in f do
28401: LD_ADDR_VAR 0 9
28405: PUSH
28406: LD_VAR 0 12
28410: PUSH
28411: FOR_IN
28412: IFFALSE 28485
// if GetBType ( j ) = b_bunker then
28414: LD_VAR 0 9
28418: PPUSH
28419: CALL_OW 266
28423: PUSH
28424: LD_INT 32
28426: EQUAL
28427: IFFALSE 28454
// tmp := Insert ( tmp , 1 , j ) else
28429: LD_ADDR_VAR 0 19
28433: PUSH
28434: LD_VAR 0 19
28438: PPUSH
28439: LD_INT 1
28441: PPUSH
28442: LD_VAR 0 9
28446: PPUSH
28447: CALL_OW 2
28451: ST_TO_ADDR
28452: GO 28483
// tmp := Insert ( tmp , tmp + 1 , j ) ;
28454: LD_ADDR_VAR 0 19
28458: PUSH
28459: LD_VAR 0 19
28463: PPUSH
28464: LD_VAR 0 19
28468: PUSH
28469: LD_INT 1
28471: PLUS
28472: PPUSH
28473: LD_VAR 0 9
28477: PPUSH
28478: CALL_OW 2
28482: ST_TO_ADDR
28483: GO 28411
28485: POP
28486: POP
// if tmp then
28487: LD_VAR 0 19
28491: IFFALSE 28503
// f := tmp ;
28493: LD_ADDR_VAR 0 12
28497: PUSH
28498: LD_VAR 0 19
28502: ST_TO_ADDR
// end ; x := personel [ i ] ;
28503: LD_ADDR_VAR 0 13
28507: PUSH
28508: LD_VAR 0 6
28512: PUSH
28513: LD_VAR 0 8
28517: ARRAY
28518: ST_TO_ADDR
// if x = - 1 then
28519: LD_VAR 0 13
28523: PUSH
28524: LD_INT 1
28526: NEG
28527: EQUAL
28528: IFFALSE 28737
// begin for j in f do
28530: LD_ADDR_VAR 0 9
28534: PUSH
28535: LD_VAR 0 12
28539: PUSH
28540: FOR_IN
28541: IFFALSE 28733
// repeat InitHc ;
28543: CALL_OW 19
// if GetBType ( j ) = b_barracks then
28547: LD_VAR 0 9
28551: PPUSH
28552: CALL_OW 266
28556: PUSH
28557: LD_INT 5
28559: EQUAL
28560: IFFALSE 28630
// begin if UnitsInside ( j ) < 3 then
28562: LD_VAR 0 9
28566: PPUSH
28567: CALL_OW 313
28571: PUSH
28572: LD_INT 3
28574: LESS
28575: IFFALSE 28611
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
28577: LD_INT 0
28579: PPUSH
28580: LD_INT 5
28582: PUSH
28583: LD_INT 8
28585: PUSH
28586: LD_INT 9
28588: PUSH
28589: EMPTY
28590: LIST
28591: LIST
28592: LIST
28593: PUSH
28594: LD_VAR 0 17
28598: ARRAY
28599: PPUSH
28600: LD_VAR 0 4
28604: PPUSH
28605: CALL_OW 380
28609: GO 28628
// PrepareHuman ( false , i , skill ) ;
28611: LD_INT 0
28613: PPUSH
28614: LD_VAR 0 8
28618: PPUSH
28619: LD_VAR 0 4
28623: PPUSH
28624: CALL_OW 380
// end else
28628: GO 28647
// PrepareHuman ( false , i , skill ) ;
28630: LD_INT 0
28632: PPUSH
28633: LD_VAR 0 8
28637: PPUSH
28638: LD_VAR 0 4
28642: PPUSH
28643: CALL_OW 380
// un := CreateHuman ;
28647: LD_ADDR_VAR 0 14
28651: PUSH
28652: CALL_OW 44
28656: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
28657: LD_ADDR_VAR 0 7
28661: PUSH
28662: LD_VAR 0 7
28666: PPUSH
28667: LD_INT 1
28669: PPUSH
28670: LD_VAR 0 14
28674: PPUSH
28675: CALL_OW 2
28679: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
28680: LD_VAR 0 14
28684: PPUSH
28685: LD_VAR 0 9
28689: PPUSH
28690: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
28694: LD_VAR 0 9
28698: PPUSH
28699: CALL_OW 313
28703: PUSH
28704: LD_INT 6
28706: EQUAL
28707: PUSH
28708: LD_VAR 0 9
28712: PPUSH
28713: CALL_OW 266
28717: PUSH
28718: LD_INT 32
28720: PUSH
28721: LD_INT 31
28723: PUSH
28724: EMPTY
28725: LIST
28726: LIST
28727: IN
28728: OR
28729: IFFALSE 28543
28731: GO 28540
28733: POP
28734: POP
// end else
28735: GO 29117
// for j = 1 to x do
28737: LD_ADDR_VAR 0 9
28741: PUSH
28742: DOUBLE
28743: LD_INT 1
28745: DEC
28746: ST_TO_ADDR
28747: LD_VAR 0 13
28751: PUSH
28752: FOR_TO
28753: IFFALSE 29115
// begin InitHc ;
28755: CALL_OW 19
// if not f then
28759: LD_VAR 0 12
28763: NOT
28764: IFFALSE 28853
// begin PrepareHuman ( false , i , skill ) ;
28766: LD_INT 0
28768: PPUSH
28769: LD_VAR 0 8
28773: PPUSH
28774: LD_VAR 0 4
28778: PPUSH
28779: CALL_OW 380
// un := CreateHuman ;
28783: LD_ADDR_VAR 0 14
28787: PUSH
28788: CALL_OW 44
28792: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
28793: LD_ADDR_VAR 0 7
28797: PUSH
28798: LD_VAR 0 7
28802: PPUSH
28803: LD_INT 1
28805: PPUSH
28806: LD_VAR 0 14
28810: PPUSH
28811: CALL_OW 2
28815: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
28816: LD_VAR 0 14
28820: PPUSH
28821: LD_VAR 0 1
28825: PPUSH
28826: CALL_OW 250
28830: PPUSH
28831: LD_VAR 0 1
28835: PPUSH
28836: CALL_OW 251
28840: PPUSH
28841: LD_INT 10
28843: PPUSH
28844: LD_INT 0
28846: PPUSH
28847: CALL_OW 50
// continue ;
28851: GO 28752
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
28853: LD_VAR 0 12
28857: PUSH
28858: LD_INT 1
28860: ARRAY
28861: PPUSH
28862: CALL_OW 313
28866: PUSH
28867: LD_VAR 0 12
28871: PUSH
28872: LD_INT 1
28874: ARRAY
28875: PPUSH
28876: CALL_OW 266
28880: PUSH
28881: LD_INT 32
28883: PUSH
28884: LD_INT 31
28886: PUSH
28887: EMPTY
28888: LIST
28889: LIST
28890: IN
28891: AND
28892: PUSH
28893: LD_VAR 0 12
28897: PUSH
28898: LD_INT 1
28900: ARRAY
28901: PPUSH
28902: CALL_OW 313
28906: PUSH
28907: LD_INT 6
28909: EQUAL
28910: OR
28911: IFFALSE 28931
// f := Delete ( f , 1 ) ;
28913: LD_ADDR_VAR 0 12
28917: PUSH
28918: LD_VAR 0 12
28922: PPUSH
28923: LD_INT 1
28925: PPUSH
28926: CALL_OW 3
28930: ST_TO_ADDR
// if not f then
28931: LD_VAR 0 12
28935: NOT
28936: IFFALSE 28954
// begin x := x + 2 ;
28938: LD_ADDR_VAR 0 13
28942: PUSH
28943: LD_VAR 0 13
28947: PUSH
28948: LD_INT 2
28950: PLUS
28951: ST_TO_ADDR
// continue ;
28952: GO 28752
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
28954: LD_VAR 0 12
28958: PUSH
28959: LD_INT 1
28961: ARRAY
28962: PPUSH
28963: CALL_OW 266
28967: PUSH
28968: LD_INT 5
28970: EQUAL
28971: IFFALSE 29045
// begin if UnitsInside ( f [ 1 ] ) < 3 then
28973: LD_VAR 0 12
28977: PUSH
28978: LD_INT 1
28980: ARRAY
28981: PPUSH
28982: CALL_OW 313
28986: PUSH
28987: LD_INT 3
28989: LESS
28990: IFFALSE 29026
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
28992: LD_INT 0
28994: PPUSH
28995: LD_INT 5
28997: PUSH
28998: LD_INT 8
29000: PUSH
29001: LD_INT 9
29003: PUSH
29004: EMPTY
29005: LIST
29006: LIST
29007: LIST
29008: PUSH
29009: LD_VAR 0 17
29013: ARRAY
29014: PPUSH
29015: LD_VAR 0 4
29019: PPUSH
29020: CALL_OW 380
29024: GO 29043
// PrepareHuman ( false , i , skill ) ;
29026: LD_INT 0
29028: PPUSH
29029: LD_VAR 0 8
29033: PPUSH
29034: LD_VAR 0 4
29038: PPUSH
29039: CALL_OW 380
// end else
29043: GO 29062
// PrepareHuman ( false , i , skill ) ;
29045: LD_INT 0
29047: PPUSH
29048: LD_VAR 0 8
29052: PPUSH
29053: LD_VAR 0 4
29057: PPUSH
29058: CALL_OW 380
// un := CreateHuman ;
29062: LD_ADDR_VAR 0 14
29066: PUSH
29067: CALL_OW 44
29071: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29072: LD_ADDR_VAR 0 7
29076: PUSH
29077: LD_VAR 0 7
29081: PPUSH
29082: LD_INT 1
29084: PPUSH
29085: LD_VAR 0 14
29089: PPUSH
29090: CALL_OW 2
29094: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
29095: LD_VAR 0 14
29099: PPUSH
29100: LD_VAR 0 12
29104: PUSH
29105: LD_INT 1
29107: ARRAY
29108: PPUSH
29109: CALL_OW 52
// end ;
29113: GO 28752
29115: POP
29116: POP
// end ;
29117: GO 28054
29119: POP
29120: POP
// result := result ^ buildings ;
29121: LD_ADDR_VAR 0 7
29125: PUSH
29126: LD_VAR 0 7
29130: PUSH
29131: LD_VAR 0 18
29135: ADD
29136: ST_TO_ADDR
// end else
29137: GO 29280
// begin for i = 1 to personel do
29139: LD_ADDR_VAR 0 8
29143: PUSH
29144: DOUBLE
29145: LD_INT 1
29147: DEC
29148: ST_TO_ADDR
29149: LD_VAR 0 6
29153: PUSH
29154: FOR_TO
29155: IFFALSE 29278
// begin if i > 4 then
29157: LD_VAR 0 8
29161: PUSH
29162: LD_INT 4
29164: GREATER
29165: IFFALSE 29169
// break ;
29167: GO 29278
// x := personel [ i ] ;
29169: LD_ADDR_VAR 0 13
29173: PUSH
29174: LD_VAR 0 6
29178: PUSH
29179: LD_VAR 0 8
29183: ARRAY
29184: ST_TO_ADDR
// if x = - 1 then
29185: LD_VAR 0 13
29189: PUSH
29190: LD_INT 1
29192: NEG
29193: EQUAL
29194: IFFALSE 29198
// continue ;
29196: GO 29154
// PrepareHuman ( false , i , skill ) ;
29198: LD_INT 0
29200: PPUSH
29201: LD_VAR 0 8
29205: PPUSH
29206: LD_VAR 0 4
29210: PPUSH
29211: CALL_OW 380
// un := CreateHuman ;
29215: LD_ADDR_VAR 0 14
29219: PUSH
29220: CALL_OW 44
29224: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
29225: LD_VAR 0 14
29229: PPUSH
29230: LD_VAR 0 1
29234: PPUSH
29235: CALL_OW 250
29239: PPUSH
29240: LD_VAR 0 1
29244: PPUSH
29245: CALL_OW 251
29249: PPUSH
29250: LD_INT 10
29252: PPUSH
29253: LD_INT 0
29255: PPUSH
29256: CALL_OW 50
// result := result ^ un ;
29260: LD_ADDR_VAR 0 7
29264: PUSH
29265: LD_VAR 0 7
29269: PUSH
29270: LD_VAR 0 14
29274: ADD
29275: ST_TO_ADDR
// end ;
29276: GO 29154
29278: POP
29279: POP
// end ; end ;
29280: LD_VAR 0 7
29284: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
29285: LD_INT 0
29287: PPUSH
29288: PPUSH
29289: PPUSH
29290: PPUSH
29291: PPUSH
29292: PPUSH
29293: PPUSH
29294: PPUSH
29295: PPUSH
29296: PPUSH
29297: PPUSH
29298: PPUSH
29299: PPUSH
29300: PPUSH
29301: PPUSH
29302: PPUSH
// result := false ;
29303: LD_ADDR_VAR 0 3
29307: PUSH
29308: LD_INT 0
29310: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
29311: LD_VAR 0 1
29315: NOT
29316: PUSH
29317: LD_VAR 0 1
29321: PPUSH
29322: CALL_OW 266
29326: PUSH
29327: LD_INT 32
29329: PUSH
29330: LD_INT 33
29332: PUSH
29333: EMPTY
29334: LIST
29335: LIST
29336: IN
29337: NOT
29338: OR
29339: IFFALSE 29343
// exit ;
29341: GO 30479
// nat := GetNation ( tower ) ;
29343: LD_ADDR_VAR 0 12
29347: PUSH
29348: LD_VAR 0 1
29352: PPUSH
29353: CALL_OW 248
29357: ST_TO_ADDR
// side := GetSide ( tower ) ;
29358: LD_ADDR_VAR 0 16
29362: PUSH
29363: LD_VAR 0 1
29367: PPUSH
29368: CALL_OW 255
29372: ST_TO_ADDR
// x := GetX ( tower ) ;
29373: LD_ADDR_VAR 0 10
29377: PUSH
29378: LD_VAR 0 1
29382: PPUSH
29383: CALL_OW 250
29387: ST_TO_ADDR
// y := GetY ( tower ) ;
29388: LD_ADDR_VAR 0 11
29392: PUSH
29393: LD_VAR 0 1
29397: PPUSH
29398: CALL_OW 251
29402: ST_TO_ADDR
// if not x or not y then
29403: LD_VAR 0 10
29407: NOT
29408: PUSH
29409: LD_VAR 0 11
29413: NOT
29414: OR
29415: IFFALSE 29419
// exit ;
29417: GO 30479
// weapon := 0 ;
29419: LD_ADDR_VAR 0 18
29423: PUSH
29424: LD_INT 0
29426: ST_TO_ADDR
// fac_list := [ ] ;
29427: LD_ADDR_VAR 0 17
29431: PUSH
29432: EMPTY
29433: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
29434: LD_ADDR_VAR 0 6
29438: PUSH
29439: LD_VAR 0 1
29443: PPUSH
29444: CALL_OW 274
29448: PPUSH
29449: LD_VAR 0 2
29453: PPUSH
29454: CALL 27057 0 2
29458: PPUSH
29459: LD_INT 30
29461: PUSH
29462: LD_INT 3
29464: PUSH
29465: EMPTY
29466: LIST
29467: LIST
29468: PPUSH
29469: CALL_OW 72
29473: ST_TO_ADDR
// if not factories then
29474: LD_VAR 0 6
29478: NOT
29479: IFFALSE 29483
// exit ;
29481: GO 30479
// for i in factories do
29483: LD_ADDR_VAR 0 8
29487: PUSH
29488: LD_VAR 0 6
29492: PUSH
29493: FOR_IN
29494: IFFALSE 29519
// fac_list := fac_list union AvailableWeaponList ( i ) ;
29496: LD_ADDR_VAR 0 17
29500: PUSH
29501: LD_VAR 0 17
29505: PUSH
29506: LD_VAR 0 8
29510: PPUSH
29511: CALL_OW 478
29515: UNION
29516: ST_TO_ADDR
29517: GO 29493
29519: POP
29520: POP
// if not fac_list then
29521: LD_VAR 0 17
29525: NOT
29526: IFFALSE 29530
// exit ;
29528: GO 30479
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
29530: LD_ADDR_VAR 0 5
29534: PUSH
29535: LD_INT 4
29537: PUSH
29538: LD_INT 5
29540: PUSH
29541: LD_INT 9
29543: PUSH
29544: LD_INT 10
29546: PUSH
29547: LD_INT 6
29549: PUSH
29550: LD_INT 7
29552: PUSH
29553: LD_INT 11
29555: PUSH
29556: EMPTY
29557: LIST
29558: LIST
29559: LIST
29560: LIST
29561: LIST
29562: LIST
29563: LIST
29564: PUSH
29565: LD_INT 27
29567: PUSH
29568: LD_INT 28
29570: PUSH
29571: LD_INT 26
29573: PUSH
29574: LD_INT 30
29576: PUSH
29577: EMPTY
29578: LIST
29579: LIST
29580: LIST
29581: LIST
29582: PUSH
29583: LD_INT 43
29585: PUSH
29586: LD_INT 44
29588: PUSH
29589: LD_INT 46
29591: PUSH
29592: LD_INT 45
29594: PUSH
29595: LD_INT 47
29597: PUSH
29598: LD_INT 49
29600: PUSH
29601: EMPTY
29602: LIST
29603: LIST
29604: LIST
29605: LIST
29606: LIST
29607: LIST
29608: PUSH
29609: EMPTY
29610: LIST
29611: LIST
29612: LIST
29613: PUSH
29614: LD_VAR 0 12
29618: ARRAY
29619: ST_TO_ADDR
// for i in list do
29620: LD_ADDR_VAR 0 8
29624: PUSH
29625: LD_VAR 0 5
29629: PUSH
29630: FOR_IN
29631: IFFALSE 29664
// if not i in fac_list then
29633: LD_VAR 0 8
29637: PUSH
29638: LD_VAR 0 17
29642: IN
29643: NOT
29644: IFFALSE 29662
// list := list diff i ;
29646: LD_ADDR_VAR 0 5
29650: PUSH
29651: LD_VAR 0 5
29655: PUSH
29656: LD_VAR 0 8
29660: DIFF
29661: ST_TO_ADDR
29662: GO 29630
29664: POP
29665: POP
// if not list then
29666: LD_VAR 0 5
29670: NOT
29671: IFFALSE 29675
// exit ;
29673: GO 30479
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
29675: LD_VAR 0 12
29679: PUSH
29680: LD_INT 3
29682: EQUAL
29683: PUSH
29684: LD_INT 49
29686: PUSH
29687: LD_VAR 0 5
29691: IN
29692: AND
29693: PUSH
29694: LD_INT 31
29696: PPUSH
29697: LD_VAR 0 16
29701: PPUSH
29702: CALL_OW 321
29706: PUSH
29707: LD_INT 2
29709: EQUAL
29710: AND
29711: IFFALSE 29771
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
29713: LD_INT 22
29715: PUSH
29716: LD_VAR 0 16
29720: PUSH
29721: EMPTY
29722: LIST
29723: LIST
29724: PUSH
29725: LD_INT 35
29727: PUSH
29728: LD_INT 49
29730: PUSH
29731: EMPTY
29732: LIST
29733: LIST
29734: PUSH
29735: LD_INT 91
29737: PUSH
29738: LD_VAR 0 1
29742: PUSH
29743: LD_INT 10
29745: PUSH
29746: EMPTY
29747: LIST
29748: LIST
29749: LIST
29750: PUSH
29751: EMPTY
29752: LIST
29753: LIST
29754: LIST
29755: PPUSH
29756: CALL_OW 69
29760: NOT
29761: IFFALSE 29771
// weapon := ru_time_lapser ;
29763: LD_ADDR_VAR 0 18
29767: PUSH
29768: LD_INT 49
29770: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
29771: LD_VAR 0 12
29775: PUSH
29776: LD_INT 1
29778: PUSH
29779: LD_INT 2
29781: PUSH
29782: EMPTY
29783: LIST
29784: LIST
29785: IN
29786: PUSH
29787: LD_INT 11
29789: PUSH
29790: LD_VAR 0 5
29794: IN
29795: PUSH
29796: LD_INT 30
29798: PUSH
29799: LD_VAR 0 5
29803: IN
29804: OR
29805: AND
29806: PUSH
29807: LD_INT 6
29809: PPUSH
29810: LD_VAR 0 16
29814: PPUSH
29815: CALL_OW 321
29819: PUSH
29820: LD_INT 2
29822: EQUAL
29823: AND
29824: IFFALSE 29989
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
29826: LD_INT 22
29828: PUSH
29829: LD_VAR 0 16
29833: PUSH
29834: EMPTY
29835: LIST
29836: LIST
29837: PUSH
29838: LD_INT 2
29840: PUSH
29841: LD_INT 35
29843: PUSH
29844: LD_INT 11
29846: PUSH
29847: EMPTY
29848: LIST
29849: LIST
29850: PUSH
29851: LD_INT 35
29853: PUSH
29854: LD_INT 30
29856: PUSH
29857: EMPTY
29858: LIST
29859: LIST
29860: PUSH
29861: EMPTY
29862: LIST
29863: LIST
29864: LIST
29865: PUSH
29866: LD_INT 91
29868: PUSH
29869: LD_VAR 0 1
29873: PUSH
29874: LD_INT 18
29876: PUSH
29877: EMPTY
29878: LIST
29879: LIST
29880: LIST
29881: PUSH
29882: EMPTY
29883: LIST
29884: LIST
29885: LIST
29886: PPUSH
29887: CALL_OW 69
29891: NOT
29892: PUSH
29893: LD_INT 22
29895: PUSH
29896: LD_VAR 0 16
29900: PUSH
29901: EMPTY
29902: LIST
29903: LIST
29904: PUSH
29905: LD_INT 2
29907: PUSH
29908: LD_INT 30
29910: PUSH
29911: LD_INT 32
29913: PUSH
29914: EMPTY
29915: LIST
29916: LIST
29917: PUSH
29918: LD_INT 30
29920: PUSH
29921: LD_INT 33
29923: PUSH
29924: EMPTY
29925: LIST
29926: LIST
29927: PUSH
29928: EMPTY
29929: LIST
29930: LIST
29931: LIST
29932: PUSH
29933: LD_INT 91
29935: PUSH
29936: LD_VAR 0 1
29940: PUSH
29941: LD_INT 12
29943: PUSH
29944: EMPTY
29945: LIST
29946: LIST
29947: LIST
29948: PUSH
29949: EMPTY
29950: LIST
29951: LIST
29952: LIST
29953: PUSH
29954: EMPTY
29955: LIST
29956: PPUSH
29957: CALL_OW 69
29961: PUSH
29962: LD_INT 2
29964: GREATER
29965: AND
29966: IFFALSE 29989
// weapon := [ us_radar , ar_radar ] [ nat ] ;
29968: LD_ADDR_VAR 0 18
29972: PUSH
29973: LD_INT 11
29975: PUSH
29976: LD_INT 30
29978: PUSH
29979: EMPTY
29980: LIST
29981: LIST
29982: PUSH
29983: LD_VAR 0 12
29987: ARRAY
29988: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
29989: LD_VAR 0 18
29993: NOT
29994: PUSH
29995: LD_INT 40
29997: PPUSH
29998: LD_VAR 0 16
30002: PPUSH
30003: CALL_OW 321
30007: PUSH
30008: LD_INT 2
30010: EQUAL
30011: AND
30012: PUSH
30013: LD_INT 7
30015: PUSH
30016: LD_VAR 0 5
30020: IN
30021: PUSH
30022: LD_INT 28
30024: PUSH
30025: LD_VAR 0 5
30029: IN
30030: OR
30031: PUSH
30032: LD_INT 45
30034: PUSH
30035: LD_VAR 0 5
30039: IN
30040: OR
30041: AND
30042: IFFALSE 30296
// begin hex := GetHexInfo ( x , y ) ;
30044: LD_ADDR_VAR 0 4
30048: PUSH
30049: LD_VAR 0 10
30053: PPUSH
30054: LD_VAR 0 11
30058: PPUSH
30059: CALL_OW 546
30063: ST_TO_ADDR
// if hex [ 1 ] then
30064: LD_VAR 0 4
30068: PUSH
30069: LD_INT 1
30071: ARRAY
30072: IFFALSE 30076
// exit ;
30074: GO 30479
// height := hex [ 2 ] ;
30076: LD_ADDR_VAR 0 15
30080: PUSH
30081: LD_VAR 0 4
30085: PUSH
30086: LD_INT 2
30088: ARRAY
30089: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
30090: LD_ADDR_VAR 0 14
30094: PUSH
30095: LD_INT 0
30097: PUSH
30098: LD_INT 2
30100: PUSH
30101: LD_INT 3
30103: PUSH
30104: LD_INT 5
30106: PUSH
30107: EMPTY
30108: LIST
30109: LIST
30110: LIST
30111: LIST
30112: ST_TO_ADDR
// for i in tmp do
30113: LD_ADDR_VAR 0 8
30117: PUSH
30118: LD_VAR 0 14
30122: PUSH
30123: FOR_IN
30124: IFFALSE 30294
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
30126: LD_ADDR_VAR 0 9
30130: PUSH
30131: LD_VAR 0 10
30135: PPUSH
30136: LD_VAR 0 8
30140: PPUSH
30141: LD_INT 5
30143: PPUSH
30144: CALL_OW 272
30148: PUSH
30149: LD_VAR 0 11
30153: PPUSH
30154: LD_VAR 0 8
30158: PPUSH
30159: LD_INT 5
30161: PPUSH
30162: CALL_OW 273
30166: PUSH
30167: EMPTY
30168: LIST
30169: LIST
30170: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
30171: LD_VAR 0 9
30175: PUSH
30176: LD_INT 1
30178: ARRAY
30179: PPUSH
30180: LD_VAR 0 9
30184: PUSH
30185: LD_INT 2
30187: ARRAY
30188: PPUSH
30189: CALL_OW 488
30193: IFFALSE 30292
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
30195: LD_ADDR_VAR 0 4
30199: PUSH
30200: LD_VAR 0 9
30204: PUSH
30205: LD_INT 1
30207: ARRAY
30208: PPUSH
30209: LD_VAR 0 9
30213: PUSH
30214: LD_INT 2
30216: ARRAY
30217: PPUSH
30218: CALL_OW 546
30222: ST_TO_ADDR
// if hex [ 1 ] then
30223: LD_VAR 0 4
30227: PUSH
30228: LD_INT 1
30230: ARRAY
30231: IFFALSE 30235
// continue ;
30233: GO 30123
// h := hex [ 2 ] ;
30235: LD_ADDR_VAR 0 13
30239: PUSH
30240: LD_VAR 0 4
30244: PUSH
30245: LD_INT 2
30247: ARRAY
30248: ST_TO_ADDR
// if h + 7 < height then
30249: LD_VAR 0 13
30253: PUSH
30254: LD_INT 7
30256: PLUS
30257: PUSH
30258: LD_VAR 0 15
30262: LESS
30263: IFFALSE 30292
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
30265: LD_ADDR_VAR 0 18
30269: PUSH
30270: LD_INT 7
30272: PUSH
30273: LD_INT 28
30275: PUSH
30276: LD_INT 45
30278: PUSH
30279: EMPTY
30280: LIST
30281: LIST
30282: LIST
30283: PUSH
30284: LD_VAR 0 12
30288: ARRAY
30289: ST_TO_ADDR
// break ;
30290: GO 30294
// end ; end ; end ;
30292: GO 30123
30294: POP
30295: POP
// end ; if not weapon then
30296: LD_VAR 0 18
30300: NOT
30301: IFFALSE 30361
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
30303: LD_ADDR_VAR 0 5
30307: PUSH
30308: LD_VAR 0 5
30312: PUSH
30313: LD_INT 11
30315: PUSH
30316: LD_INT 30
30318: PUSH
30319: LD_INT 49
30321: PUSH
30322: EMPTY
30323: LIST
30324: LIST
30325: LIST
30326: DIFF
30327: ST_TO_ADDR
// if not list then
30328: LD_VAR 0 5
30332: NOT
30333: IFFALSE 30337
// exit ;
30335: GO 30479
// weapon := list [ rand ( 1 , list ) ] ;
30337: LD_ADDR_VAR 0 18
30341: PUSH
30342: LD_VAR 0 5
30346: PUSH
30347: LD_INT 1
30349: PPUSH
30350: LD_VAR 0 5
30354: PPUSH
30355: CALL_OW 12
30359: ARRAY
30360: ST_TO_ADDR
// end ; if weapon then
30361: LD_VAR 0 18
30365: IFFALSE 30479
// begin tmp := CostOfWeapon ( weapon ) ;
30367: LD_ADDR_VAR 0 14
30371: PUSH
30372: LD_VAR 0 18
30376: PPUSH
30377: CALL_OW 451
30381: ST_TO_ADDR
// j := GetBase ( tower ) ;
30382: LD_ADDR_VAR 0 9
30386: PUSH
30387: LD_VAR 0 1
30391: PPUSH
30392: CALL_OW 274
30396: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
30397: LD_VAR 0 9
30401: PPUSH
30402: LD_INT 1
30404: PPUSH
30405: CALL_OW 275
30409: PUSH
30410: LD_VAR 0 14
30414: PUSH
30415: LD_INT 1
30417: ARRAY
30418: GREATEREQUAL
30419: PUSH
30420: LD_VAR 0 9
30424: PPUSH
30425: LD_INT 2
30427: PPUSH
30428: CALL_OW 275
30432: PUSH
30433: LD_VAR 0 14
30437: PUSH
30438: LD_INT 2
30440: ARRAY
30441: GREATEREQUAL
30442: AND
30443: PUSH
30444: LD_VAR 0 9
30448: PPUSH
30449: LD_INT 3
30451: PPUSH
30452: CALL_OW 275
30456: PUSH
30457: LD_VAR 0 14
30461: PUSH
30462: LD_INT 3
30464: ARRAY
30465: GREATEREQUAL
30466: AND
30467: IFFALSE 30479
// result := weapon ;
30469: LD_ADDR_VAR 0 3
30473: PUSH
30474: LD_VAR 0 18
30478: ST_TO_ADDR
// end ; end ;
30479: LD_VAR 0 3
30483: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
30484: LD_INT 0
30486: PPUSH
30487: PPUSH
// result := true ;
30488: LD_ADDR_VAR 0 3
30492: PUSH
30493: LD_INT 1
30495: ST_TO_ADDR
// if array1 = array2 then
30496: LD_VAR 0 1
30500: PUSH
30501: LD_VAR 0 2
30505: EQUAL
30506: IFFALSE 30566
// begin for i = 1 to array1 do
30508: LD_ADDR_VAR 0 4
30512: PUSH
30513: DOUBLE
30514: LD_INT 1
30516: DEC
30517: ST_TO_ADDR
30518: LD_VAR 0 1
30522: PUSH
30523: FOR_TO
30524: IFFALSE 30562
// if array1 [ i ] <> array2 [ i ] then
30526: LD_VAR 0 1
30530: PUSH
30531: LD_VAR 0 4
30535: ARRAY
30536: PUSH
30537: LD_VAR 0 2
30541: PUSH
30542: LD_VAR 0 4
30546: ARRAY
30547: NONEQUAL
30548: IFFALSE 30560
// begin result := false ;
30550: LD_ADDR_VAR 0 3
30554: PUSH
30555: LD_INT 0
30557: ST_TO_ADDR
// break ;
30558: GO 30562
// end ;
30560: GO 30523
30562: POP
30563: POP
// end else
30564: GO 30574
// result := false ;
30566: LD_ADDR_VAR 0 3
30570: PUSH
30571: LD_INT 0
30573: ST_TO_ADDR
// end ;
30574: LD_VAR 0 3
30578: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
30579: LD_INT 0
30581: PPUSH
30582: PPUSH
30583: PPUSH
// pom := GetBase ( fac ) ;
30584: LD_ADDR_VAR 0 5
30588: PUSH
30589: LD_VAR 0 1
30593: PPUSH
30594: CALL_OW 274
30598: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
30599: LD_ADDR_VAR 0 4
30603: PUSH
30604: LD_VAR 0 2
30608: PUSH
30609: LD_INT 1
30611: ARRAY
30612: PPUSH
30613: LD_VAR 0 2
30617: PUSH
30618: LD_INT 2
30620: ARRAY
30621: PPUSH
30622: LD_VAR 0 2
30626: PUSH
30627: LD_INT 3
30629: ARRAY
30630: PPUSH
30631: LD_VAR 0 2
30635: PUSH
30636: LD_INT 4
30638: ARRAY
30639: PPUSH
30640: CALL_OW 449
30644: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
30645: LD_ADDR_VAR 0 3
30649: PUSH
30650: LD_VAR 0 5
30654: PPUSH
30655: LD_INT 1
30657: PPUSH
30658: CALL_OW 275
30662: PUSH
30663: LD_VAR 0 4
30667: PUSH
30668: LD_INT 1
30670: ARRAY
30671: GREATEREQUAL
30672: PUSH
30673: LD_VAR 0 5
30677: PPUSH
30678: LD_INT 2
30680: PPUSH
30681: CALL_OW 275
30685: PUSH
30686: LD_VAR 0 4
30690: PUSH
30691: LD_INT 2
30693: ARRAY
30694: GREATEREQUAL
30695: AND
30696: PUSH
30697: LD_VAR 0 5
30701: PPUSH
30702: LD_INT 3
30704: PPUSH
30705: CALL_OW 275
30709: PUSH
30710: LD_VAR 0 4
30714: PUSH
30715: LD_INT 3
30717: ARRAY
30718: GREATEREQUAL
30719: AND
30720: ST_TO_ADDR
// end ;
30721: LD_VAR 0 3
30725: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
30726: LD_INT 0
30728: PPUSH
30729: PPUSH
30730: PPUSH
30731: PPUSH
// pom := GetBase ( building ) ;
30732: LD_ADDR_VAR 0 3
30736: PUSH
30737: LD_VAR 0 1
30741: PPUSH
30742: CALL_OW 274
30746: ST_TO_ADDR
// if not pom then
30747: LD_VAR 0 3
30751: NOT
30752: IFFALSE 30756
// exit ;
30754: GO 30926
// btype := GetBType ( building ) ;
30756: LD_ADDR_VAR 0 5
30760: PUSH
30761: LD_VAR 0 1
30765: PPUSH
30766: CALL_OW 266
30770: ST_TO_ADDR
// if btype = b_armoury then
30771: LD_VAR 0 5
30775: PUSH
30776: LD_INT 4
30778: EQUAL
30779: IFFALSE 30789
// btype := b_barracks ;
30781: LD_ADDR_VAR 0 5
30785: PUSH
30786: LD_INT 5
30788: ST_TO_ADDR
// if btype = b_depot then
30789: LD_VAR 0 5
30793: PUSH
30794: LD_INT 0
30796: EQUAL
30797: IFFALSE 30807
// btype := b_warehouse ;
30799: LD_ADDR_VAR 0 5
30803: PUSH
30804: LD_INT 1
30806: ST_TO_ADDR
// if btype = b_workshop then
30807: LD_VAR 0 5
30811: PUSH
30812: LD_INT 2
30814: EQUAL
30815: IFFALSE 30825
// btype := b_factory ;
30817: LD_ADDR_VAR 0 5
30821: PUSH
30822: LD_INT 3
30824: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
30825: LD_ADDR_VAR 0 4
30829: PUSH
30830: LD_VAR 0 5
30834: PPUSH
30835: LD_VAR 0 1
30839: PPUSH
30840: CALL_OW 248
30844: PPUSH
30845: CALL_OW 450
30849: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
30850: LD_ADDR_VAR 0 2
30854: PUSH
30855: LD_VAR 0 3
30859: PPUSH
30860: LD_INT 1
30862: PPUSH
30863: CALL_OW 275
30867: PUSH
30868: LD_VAR 0 4
30872: PUSH
30873: LD_INT 1
30875: ARRAY
30876: GREATEREQUAL
30877: PUSH
30878: LD_VAR 0 3
30882: PPUSH
30883: LD_INT 2
30885: PPUSH
30886: CALL_OW 275
30890: PUSH
30891: LD_VAR 0 4
30895: PUSH
30896: LD_INT 2
30898: ARRAY
30899: GREATEREQUAL
30900: AND
30901: PUSH
30902: LD_VAR 0 3
30906: PPUSH
30907: LD_INT 3
30909: PPUSH
30910: CALL_OW 275
30914: PUSH
30915: LD_VAR 0 4
30919: PUSH
30920: LD_INT 3
30922: ARRAY
30923: GREATEREQUAL
30924: AND
30925: ST_TO_ADDR
// end ;
30926: LD_VAR 0 2
30930: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
30931: LD_INT 0
30933: PPUSH
30934: PPUSH
30935: PPUSH
// pom := GetBase ( building ) ;
30936: LD_ADDR_VAR 0 4
30940: PUSH
30941: LD_VAR 0 1
30945: PPUSH
30946: CALL_OW 274
30950: ST_TO_ADDR
// if not pom then
30951: LD_VAR 0 4
30955: NOT
30956: IFFALSE 30960
// exit ;
30958: GO 31061
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
30960: LD_ADDR_VAR 0 5
30964: PUSH
30965: LD_VAR 0 2
30969: PPUSH
30970: LD_VAR 0 1
30974: PPUSH
30975: CALL_OW 248
30979: PPUSH
30980: CALL_OW 450
30984: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
30985: LD_ADDR_VAR 0 3
30989: PUSH
30990: LD_VAR 0 4
30994: PPUSH
30995: LD_INT 1
30997: PPUSH
30998: CALL_OW 275
31002: PUSH
31003: LD_VAR 0 5
31007: PUSH
31008: LD_INT 1
31010: ARRAY
31011: GREATEREQUAL
31012: PUSH
31013: LD_VAR 0 4
31017: PPUSH
31018: LD_INT 2
31020: PPUSH
31021: CALL_OW 275
31025: PUSH
31026: LD_VAR 0 5
31030: PUSH
31031: LD_INT 2
31033: ARRAY
31034: GREATEREQUAL
31035: AND
31036: PUSH
31037: LD_VAR 0 4
31041: PPUSH
31042: LD_INT 3
31044: PPUSH
31045: CALL_OW 275
31049: PUSH
31050: LD_VAR 0 5
31054: PUSH
31055: LD_INT 3
31057: ARRAY
31058: GREATEREQUAL
31059: AND
31060: ST_TO_ADDR
// end ;
31061: LD_VAR 0 3
31065: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
31066: LD_INT 0
31068: PPUSH
31069: PPUSH
31070: PPUSH
31071: PPUSH
31072: PPUSH
31073: PPUSH
31074: PPUSH
31075: PPUSH
31076: PPUSH
31077: PPUSH
// result := false ;
31078: LD_ADDR_VAR 0 6
31082: PUSH
31083: LD_INT 0
31085: ST_TO_ADDR
// if not base or not btype or not x or not y then
31086: LD_VAR 0 1
31090: NOT
31091: PUSH
31092: LD_VAR 0 2
31096: NOT
31097: OR
31098: PUSH
31099: LD_VAR 0 3
31103: NOT
31104: OR
31105: PUSH
31106: LD_VAR 0 4
31110: NOT
31111: OR
31112: IFFALSE 31116
// exit ;
31114: GO 31725
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
31116: LD_ADDR_VAR 0 12
31120: PUSH
31121: LD_VAR 0 2
31125: PPUSH
31126: LD_VAR 0 3
31130: PPUSH
31131: LD_VAR 0 4
31135: PPUSH
31136: LD_VAR 0 5
31140: PPUSH
31141: LD_VAR 0 1
31145: PUSH
31146: LD_INT 1
31148: ARRAY
31149: PPUSH
31150: CALL_OW 248
31154: PPUSH
31155: LD_INT 0
31157: PPUSH
31158: CALL 32562 0 6
31162: ST_TO_ADDR
// if not hexes then
31163: LD_VAR 0 12
31167: NOT
31168: IFFALSE 31172
// exit ;
31170: GO 31725
// for i = 1 to hexes do
31172: LD_ADDR_VAR 0 7
31176: PUSH
31177: DOUBLE
31178: LD_INT 1
31180: DEC
31181: ST_TO_ADDR
31182: LD_VAR 0 12
31186: PUSH
31187: FOR_TO
31188: IFFALSE 31723
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
31190: LD_ADDR_VAR 0 11
31194: PUSH
31195: LD_VAR 0 12
31199: PUSH
31200: LD_VAR 0 7
31204: ARRAY
31205: PUSH
31206: LD_INT 1
31208: ARRAY
31209: PPUSH
31210: LD_VAR 0 12
31214: PUSH
31215: LD_VAR 0 7
31219: ARRAY
31220: PUSH
31221: LD_INT 2
31223: ARRAY
31224: PPUSH
31225: CALL_OW 428
31229: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
31230: LD_VAR 0 12
31234: PUSH
31235: LD_VAR 0 7
31239: ARRAY
31240: PUSH
31241: LD_INT 1
31243: ARRAY
31244: PPUSH
31245: LD_VAR 0 12
31249: PUSH
31250: LD_VAR 0 7
31254: ARRAY
31255: PUSH
31256: LD_INT 2
31258: ARRAY
31259: PPUSH
31260: CALL_OW 351
31264: PUSH
31265: LD_VAR 0 12
31269: PUSH
31270: LD_VAR 0 7
31274: ARRAY
31275: PUSH
31276: LD_INT 1
31278: ARRAY
31279: PPUSH
31280: LD_VAR 0 12
31284: PUSH
31285: LD_VAR 0 7
31289: ARRAY
31290: PUSH
31291: LD_INT 2
31293: ARRAY
31294: PPUSH
31295: CALL_OW 488
31299: NOT
31300: OR
31301: PUSH
31302: LD_VAR 0 11
31306: PPUSH
31307: CALL_OW 247
31311: PUSH
31312: LD_INT 3
31314: EQUAL
31315: OR
31316: IFFALSE 31322
// exit ;
31318: POP
31319: POP
31320: GO 31725
// if not tmp or not tmp in base then
31322: LD_VAR 0 11
31326: NOT
31327: PUSH
31328: LD_VAR 0 11
31332: PUSH
31333: LD_VAR 0 1
31337: IN
31338: NOT
31339: OR
31340: IFFALSE 31344
// continue ;
31342: GO 31187
// result := true ;
31344: LD_ADDR_VAR 0 6
31348: PUSH
31349: LD_INT 1
31351: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31352: LD_ADDR_VAR 0 15
31356: PUSH
31357: LD_VAR 0 1
31361: PPUSH
31362: LD_INT 22
31364: PUSH
31365: LD_VAR 0 11
31369: PPUSH
31370: CALL_OW 255
31374: PUSH
31375: EMPTY
31376: LIST
31377: LIST
31378: PUSH
31379: LD_INT 2
31381: PUSH
31382: LD_INT 30
31384: PUSH
31385: LD_INT 0
31387: PUSH
31388: EMPTY
31389: LIST
31390: LIST
31391: PUSH
31392: LD_INT 30
31394: PUSH
31395: LD_INT 1
31397: PUSH
31398: EMPTY
31399: LIST
31400: LIST
31401: PUSH
31402: EMPTY
31403: LIST
31404: LIST
31405: LIST
31406: PUSH
31407: EMPTY
31408: LIST
31409: LIST
31410: PPUSH
31411: CALL_OW 72
31415: ST_TO_ADDR
// if dep then
31416: LD_VAR 0 15
31420: IFFALSE 31556
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
31422: LD_ADDR_VAR 0 14
31426: PUSH
31427: LD_VAR 0 15
31431: PUSH
31432: LD_INT 1
31434: ARRAY
31435: PPUSH
31436: CALL_OW 250
31440: PPUSH
31441: LD_VAR 0 15
31445: PUSH
31446: LD_INT 1
31448: ARRAY
31449: PPUSH
31450: CALL_OW 254
31454: PPUSH
31455: LD_INT 5
31457: PPUSH
31458: CALL_OW 272
31462: PUSH
31463: LD_VAR 0 15
31467: PUSH
31468: LD_INT 1
31470: ARRAY
31471: PPUSH
31472: CALL_OW 251
31476: PPUSH
31477: LD_VAR 0 15
31481: PUSH
31482: LD_INT 1
31484: ARRAY
31485: PPUSH
31486: CALL_OW 254
31490: PPUSH
31491: LD_INT 5
31493: PPUSH
31494: CALL_OW 273
31498: PUSH
31499: EMPTY
31500: LIST
31501: LIST
31502: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
31503: LD_VAR 0 14
31507: PUSH
31508: LD_INT 1
31510: ARRAY
31511: PPUSH
31512: LD_VAR 0 14
31516: PUSH
31517: LD_INT 2
31519: ARRAY
31520: PPUSH
31521: CALL_OW 488
31525: IFFALSE 31556
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
31527: LD_VAR 0 11
31531: PPUSH
31532: LD_VAR 0 14
31536: PUSH
31537: LD_INT 1
31539: ARRAY
31540: PPUSH
31541: LD_VAR 0 14
31545: PUSH
31546: LD_INT 2
31548: ARRAY
31549: PPUSH
31550: CALL_OW 111
// continue ;
31554: GO 31187
// end ; end ; r := GetDir ( tmp ) ;
31556: LD_ADDR_VAR 0 13
31560: PUSH
31561: LD_VAR 0 11
31565: PPUSH
31566: CALL_OW 254
31570: ST_TO_ADDR
// if r = 5 then
31571: LD_VAR 0 13
31575: PUSH
31576: LD_INT 5
31578: EQUAL
31579: IFFALSE 31589
// r := 0 ;
31581: LD_ADDR_VAR 0 13
31585: PUSH
31586: LD_INT 0
31588: ST_TO_ADDR
// for j = r to 5 do
31589: LD_ADDR_VAR 0 8
31593: PUSH
31594: DOUBLE
31595: LD_VAR 0 13
31599: DEC
31600: ST_TO_ADDR
31601: LD_INT 5
31603: PUSH
31604: FOR_TO
31605: IFFALSE 31719
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
31607: LD_ADDR_VAR 0 9
31611: PUSH
31612: LD_VAR 0 11
31616: PPUSH
31617: CALL_OW 250
31621: PPUSH
31622: LD_VAR 0 8
31626: PPUSH
31627: LD_INT 2
31629: PPUSH
31630: CALL_OW 272
31634: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
31635: LD_ADDR_VAR 0 10
31639: PUSH
31640: LD_VAR 0 11
31644: PPUSH
31645: CALL_OW 251
31649: PPUSH
31650: LD_VAR 0 8
31654: PPUSH
31655: LD_INT 2
31657: PPUSH
31658: CALL_OW 273
31662: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
31663: LD_VAR 0 9
31667: PPUSH
31668: LD_VAR 0 10
31672: PPUSH
31673: CALL_OW 488
31677: PUSH
31678: LD_VAR 0 9
31682: PPUSH
31683: LD_VAR 0 10
31687: PPUSH
31688: CALL_OW 428
31692: NOT
31693: AND
31694: IFFALSE 31717
// begin ComMoveXY ( tmp , _x , _y ) ;
31696: LD_VAR 0 11
31700: PPUSH
31701: LD_VAR 0 9
31705: PPUSH
31706: LD_VAR 0 10
31710: PPUSH
31711: CALL_OW 111
// break ;
31715: GO 31719
// end ; end ;
31717: GO 31604
31719: POP
31720: POP
// end ;
31721: GO 31187
31723: POP
31724: POP
// end ;
31725: LD_VAR 0 6
31729: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
31730: LD_INT 0
31732: PPUSH
31733: PPUSH
31734: PPUSH
31735: PPUSH
31736: PPUSH
31737: PPUSH
31738: PPUSH
31739: PPUSH
31740: PPUSH
31741: PPUSH
// result := false ;
31742: LD_ADDR_VAR 0 6
31746: PUSH
31747: LD_INT 0
31749: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
31750: LD_VAR 0 1
31754: NOT
31755: PUSH
31756: LD_VAR 0 1
31760: PPUSH
31761: CALL_OW 266
31765: PUSH
31766: LD_INT 0
31768: PUSH
31769: LD_INT 1
31771: PUSH
31772: EMPTY
31773: LIST
31774: LIST
31775: IN
31776: NOT
31777: OR
31778: PUSH
31779: LD_VAR 0 2
31783: NOT
31784: OR
31785: PUSH
31786: LD_VAR 0 5
31790: PUSH
31791: LD_INT 0
31793: PUSH
31794: LD_INT 1
31796: PUSH
31797: LD_INT 2
31799: PUSH
31800: LD_INT 3
31802: PUSH
31803: LD_INT 4
31805: PUSH
31806: LD_INT 5
31808: PUSH
31809: EMPTY
31810: LIST
31811: LIST
31812: LIST
31813: LIST
31814: LIST
31815: LIST
31816: IN
31817: NOT
31818: OR
31819: PUSH
31820: LD_VAR 0 3
31824: PPUSH
31825: LD_VAR 0 4
31829: PPUSH
31830: CALL_OW 488
31834: NOT
31835: OR
31836: IFFALSE 31840
// exit ;
31838: GO 32557
// pom := GetBase ( depot ) ;
31840: LD_ADDR_VAR 0 10
31844: PUSH
31845: LD_VAR 0 1
31849: PPUSH
31850: CALL_OW 274
31854: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
31855: LD_ADDR_VAR 0 11
31859: PUSH
31860: LD_VAR 0 2
31864: PPUSH
31865: LD_VAR 0 1
31869: PPUSH
31870: CALL_OW 248
31874: PPUSH
31875: CALL_OW 450
31879: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
31880: LD_VAR 0 10
31884: PPUSH
31885: LD_INT 1
31887: PPUSH
31888: CALL_OW 275
31892: PUSH
31893: LD_VAR 0 11
31897: PUSH
31898: LD_INT 1
31900: ARRAY
31901: GREATEREQUAL
31902: PUSH
31903: LD_VAR 0 10
31907: PPUSH
31908: LD_INT 2
31910: PPUSH
31911: CALL_OW 275
31915: PUSH
31916: LD_VAR 0 11
31920: PUSH
31921: LD_INT 2
31923: ARRAY
31924: GREATEREQUAL
31925: AND
31926: PUSH
31927: LD_VAR 0 10
31931: PPUSH
31932: LD_INT 3
31934: PPUSH
31935: CALL_OW 275
31939: PUSH
31940: LD_VAR 0 11
31944: PUSH
31945: LD_INT 3
31947: ARRAY
31948: GREATEREQUAL
31949: AND
31950: NOT
31951: IFFALSE 31955
// exit ;
31953: GO 32557
// if GetBType ( depot ) = b_depot then
31955: LD_VAR 0 1
31959: PPUSH
31960: CALL_OW 266
31964: PUSH
31965: LD_INT 0
31967: EQUAL
31968: IFFALSE 31980
// dist := 28 else
31970: LD_ADDR_VAR 0 14
31974: PUSH
31975: LD_INT 28
31977: ST_TO_ADDR
31978: GO 31988
// dist := 36 ;
31980: LD_ADDR_VAR 0 14
31984: PUSH
31985: LD_INT 36
31987: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
31988: LD_VAR 0 1
31992: PPUSH
31993: LD_VAR 0 3
31997: PPUSH
31998: LD_VAR 0 4
32002: PPUSH
32003: CALL_OW 297
32007: PUSH
32008: LD_VAR 0 14
32012: GREATER
32013: IFFALSE 32017
// exit ;
32015: GO 32557
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
32017: LD_ADDR_VAR 0 12
32021: PUSH
32022: LD_VAR 0 2
32026: PPUSH
32027: LD_VAR 0 3
32031: PPUSH
32032: LD_VAR 0 4
32036: PPUSH
32037: LD_VAR 0 5
32041: PPUSH
32042: LD_VAR 0 1
32046: PPUSH
32047: CALL_OW 248
32051: PPUSH
32052: LD_INT 0
32054: PPUSH
32055: CALL 32562 0 6
32059: ST_TO_ADDR
// if not hexes then
32060: LD_VAR 0 12
32064: NOT
32065: IFFALSE 32069
// exit ;
32067: GO 32557
// hex := GetHexInfo ( x , y ) ;
32069: LD_ADDR_VAR 0 15
32073: PUSH
32074: LD_VAR 0 3
32078: PPUSH
32079: LD_VAR 0 4
32083: PPUSH
32084: CALL_OW 546
32088: ST_TO_ADDR
// if hex [ 1 ] then
32089: LD_VAR 0 15
32093: PUSH
32094: LD_INT 1
32096: ARRAY
32097: IFFALSE 32101
// exit ;
32099: GO 32557
// height := hex [ 2 ] ;
32101: LD_ADDR_VAR 0 13
32105: PUSH
32106: LD_VAR 0 15
32110: PUSH
32111: LD_INT 2
32113: ARRAY
32114: ST_TO_ADDR
// for i = 1 to hexes do
32115: LD_ADDR_VAR 0 7
32119: PUSH
32120: DOUBLE
32121: LD_INT 1
32123: DEC
32124: ST_TO_ADDR
32125: LD_VAR 0 12
32129: PUSH
32130: FOR_TO
32131: IFFALSE 32461
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
32133: LD_VAR 0 12
32137: PUSH
32138: LD_VAR 0 7
32142: ARRAY
32143: PUSH
32144: LD_INT 1
32146: ARRAY
32147: PPUSH
32148: LD_VAR 0 12
32152: PUSH
32153: LD_VAR 0 7
32157: ARRAY
32158: PUSH
32159: LD_INT 2
32161: ARRAY
32162: PPUSH
32163: CALL_OW 488
32167: NOT
32168: PUSH
32169: LD_VAR 0 12
32173: PUSH
32174: LD_VAR 0 7
32178: ARRAY
32179: PUSH
32180: LD_INT 1
32182: ARRAY
32183: PPUSH
32184: LD_VAR 0 12
32188: PUSH
32189: LD_VAR 0 7
32193: ARRAY
32194: PUSH
32195: LD_INT 2
32197: ARRAY
32198: PPUSH
32199: CALL_OW 428
32203: PUSH
32204: LD_INT 0
32206: GREATER
32207: OR
32208: PUSH
32209: LD_VAR 0 12
32213: PUSH
32214: LD_VAR 0 7
32218: ARRAY
32219: PUSH
32220: LD_INT 1
32222: ARRAY
32223: PPUSH
32224: LD_VAR 0 12
32228: PUSH
32229: LD_VAR 0 7
32233: ARRAY
32234: PUSH
32235: LD_INT 2
32237: ARRAY
32238: PPUSH
32239: CALL_OW 351
32243: OR
32244: IFFALSE 32250
// exit ;
32246: POP
32247: POP
32248: GO 32557
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
32250: LD_ADDR_VAR 0 8
32254: PUSH
32255: LD_VAR 0 12
32259: PUSH
32260: LD_VAR 0 7
32264: ARRAY
32265: PUSH
32266: LD_INT 1
32268: ARRAY
32269: PPUSH
32270: LD_VAR 0 12
32274: PUSH
32275: LD_VAR 0 7
32279: ARRAY
32280: PUSH
32281: LD_INT 2
32283: ARRAY
32284: PPUSH
32285: CALL_OW 546
32289: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
32290: LD_VAR 0 8
32294: PUSH
32295: LD_INT 1
32297: ARRAY
32298: PUSH
32299: LD_VAR 0 8
32303: PUSH
32304: LD_INT 2
32306: ARRAY
32307: PUSH
32308: LD_VAR 0 13
32312: PUSH
32313: LD_INT 2
32315: PLUS
32316: GREATER
32317: OR
32318: PUSH
32319: LD_VAR 0 8
32323: PUSH
32324: LD_INT 2
32326: ARRAY
32327: PUSH
32328: LD_VAR 0 13
32332: PUSH
32333: LD_INT 2
32335: MINUS
32336: LESS
32337: OR
32338: PUSH
32339: LD_VAR 0 8
32343: PUSH
32344: LD_INT 3
32346: ARRAY
32347: PUSH
32348: LD_INT 0
32350: PUSH
32351: LD_INT 8
32353: PUSH
32354: LD_INT 9
32356: PUSH
32357: LD_INT 10
32359: PUSH
32360: LD_INT 11
32362: PUSH
32363: LD_INT 12
32365: PUSH
32366: LD_INT 13
32368: PUSH
32369: LD_INT 16
32371: PUSH
32372: LD_INT 17
32374: PUSH
32375: LD_INT 18
32377: PUSH
32378: LD_INT 19
32380: PUSH
32381: LD_INT 20
32383: PUSH
32384: LD_INT 21
32386: PUSH
32387: EMPTY
32388: LIST
32389: LIST
32390: LIST
32391: LIST
32392: LIST
32393: LIST
32394: LIST
32395: LIST
32396: LIST
32397: LIST
32398: LIST
32399: LIST
32400: LIST
32401: IN
32402: NOT
32403: OR
32404: PUSH
32405: LD_VAR 0 8
32409: PUSH
32410: LD_INT 5
32412: ARRAY
32413: NOT
32414: OR
32415: PUSH
32416: LD_VAR 0 8
32420: PUSH
32421: LD_INT 6
32423: ARRAY
32424: PUSH
32425: LD_INT 1
32427: PUSH
32428: LD_INT 2
32430: PUSH
32431: LD_INT 7
32433: PUSH
32434: LD_INT 9
32436: PUSH
32437: LD_INT 10
32439: PUSH
32440: LD_INT 11
32442: PUSH
32443: EMPTY
32444: LIST
32445: LIST
32446: LIST
32447: LIST
32448: LIST
32449: LIST
32450: IN
32451: NOT
32452: OR
32453: IFFALSE 32459
// exit ;
32455: POP
32456: POP
32457: GO 32557
// end ;
32459: GO 32130
32461: POP
32462: POP
// side := GetSide ( depot ) ;
32463: LD_ADDR_VAR 0 9
32467: PUSH
32468: LD_VAR 0 1
32472: PPUSH
32473: CALL_OW 255
32477: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
32478: LD_VAR 0 9
32482: PPUSH
32483: LD_VAR 0 3
32487: PPUSH
32488: LD_VAR 0 4
32492: PPUSH
32493: LD_INT 20
32495: PPUSH
32496: CALL 25211 0 4
32500: PUSH
32501: LD_INT 4
32503: ARRAY
32504: IFFALSE 32508
// exit ;
32506: GO 32557
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
32508: LD_VAR 0 2
32512: PUSH
32513: LD_INT 29
32515: PUSH
32516: LD_INT 30
32518: PUSH
32519: EMPTY
32520: LIST
32521: LIST
32522: IN
32523: PUSH
32524: LD_VAR 0 3
32528: PPUSH
32529: LD_VAR 0 4
32533: PPUSH
32534: LD_VAR 0 9
32538: PPUSH
32539: CALL_OW 440
32543: NOT
32544: AND
32545: IFFALSE 32549
// exit ;
32547: GO 32557
// result := true ;
32549: LD_ADDR_VAR 0 6
32553: PUSH
32554: LD_INT 1
32556: ST_TO_ADDR
// end ;
32557: LD_VAR 0 6
32561: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
32562: LD_INT 0
32564: PPUSH
32565: PPUSH
32566: PPUSH
32567: PPUSH
32568: PPUSH
32569: PPUSH
32570: PPUSH
32571: PPUSH
32572: PPUSH
32573: PPUSH
32574: PPUSH
32575: PPUSH
32576: PPUSH
32577: PPUSH
32578: PPUSH
32579: PPUSH
32580: PPUSH
32581: PPUSH
32582: PPUSH
32583: PPUSH
32584: PPUSH
32585: PPUSH
32586: PPUSH
32587: PPUSH
32588: PPUSH
32589: PPUSH
32590: PPUSH
32591: PPUSH
32592: PPUSH
32593: PPUSH
32594: PPUSH
32595: PPUSH
32596: PPUSH
32597: PPUSH
32598: PPUSH
32599: PPUSH
32600: PPUSH
32601: PPUSH
32602: PPUSH
32603: PPUSH
32604: PPUSH
32605: PPUSH
32606: PPUSH
32607: PPUSH
32608: PPUSH
32609: PPUSH
32610: PPUSH
32611: PPUSH
32612: PPUSH
32613: PPUSH
32614: PPUSH
32615: PPUSH
32616: PPUSH
32617: PPUSH
32618: PPUSH
32619: PPUSH
32620: PPUSH
32621: PPUSH
// result = [ ] ;
32622: LD_ADDR_VAR 0 7
32626: PUSH
32627: EMPTY
32628: ST_TO_ADDR
// temp_list = [ ] ;
32629: LD_ADDR_VAR 0 9
32633: PUSH
32634: EMPTY
32635: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
32636: LD_VAR 0 4
32640: PUSH
32641: LD_INT 0
32643: PUSH
32644: LD_INT 1
32646: PUSH
32647: LD_INT 2
32649: PUSH
32650: LD_INT 3
32652: PUSH
32653: LD_INT 4
32655: PUSH
32656: LD_INT 5
32658: PUSH
32659: EMPTY
32660: LIST
32661: LIST
32662: LIST
32663: LIST
32664: LIST
32665: LIST
32666: IN
32667: NOT
32668: PUSH
32669: LD_VAR 0 1
32673: PUSH
32674: LD_INT 0
32676: PUSH
32677: LD_INT 1
32679: PUSH
32680: EMPTY
32681: LIST
32682: LIST
32683: IN
32684: PUSH
32685: LD_VAR 0 5
32689: PUSH
32690: LD_INT 1
32692: PUSH
32693: LD_INT 2
32695: PUSH
32696: LD_INT 3
32698: PUSH
32699: EMPTY
32700: LIST
32701: LIST
32702: LIST
32703: IN
32704: NOT
32705: AND
32706: OR
32707: IFFALSE 32711
// exit ;
32709: GO 51102
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
32711: LD_VAR 0 1
32715: PUSH
32716: LD_INT 6
32718: PUSH
32719: LD_INT 7
32721: PUSH
32722: LD_INT 8
32724: PUSH
32725: LD_INT 13
32727: PUSH
32728: LD_INT 12
32730: PUSH
32731: LD_INT 15
32733: PUSH
32734: LD_INT 11
32736: PUSH
32737: LD_INT 14
32739: PUSH
32740: LD_INT 10
32742: PUSH
32743: EMPTY
32744: LIST
32745: LIST
32746: LIST
32747: LIST
32748: LIST
32749: LIST
32750: LIST
32751: LIST
32752: LIST
32753: IN
32754: IFFALSE 32764
// btype = b_lab ;
32756: LD_ADDR_VAR 0 1
32760: PUSH
32761: LD_INT 6
32763: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
32764: LD_VAR 0 6
32768: PUSH
32769: LD_INT 0
32771: PUSH
32772: LD_INT 1
32774: PUSH
32775: LD_INT 2
32777: PUSH
32778: EMPTY
32779: LIST
32780: LIST
32781: LIST
32782: IN
32783: NOT
32784: PUSH
32785: LD_VAR 0 1
32789: PUSH
32790: LD_INT 0
32792: PUSH
32793: LD_INT 1
32795: PUSH
32796: LD_INT 2
32798: PUSH
32799: LD_INT 3
32801: PUSH
32802: LD_INT 6
32804: PUSH
32805: LD_INT 36
32807: PUSH
32808: LD_INT 4
32810: PUSH
32811: LD_INT 5
32813: PUSH
32814: LD_INT 31
32816: PUSH
32817: LD_INT 32
32819: PUSH
32820: LD_INT 33
32822: PUSH
32823: EMPTY
32824: LIST
32825: LIST
32826: LIST
32827: LIST
32828: LIST
32829: LIST
32830: LIST
32831: LIST
32832: LIST
32833: LIST
32834: LIST
32835: IN
32836: NOT
32837: PUSH
32838: LD_VAR 0 6
32842: PUSH
32843: LD_INT 1
32845: EQUAL
32846: AND
32847: OR
32848: PUSH
32849: LD_VAR 0 1
32853: PUSH
32854: LD_INT 2
32856: PUSH
32857: LD_INT 3
32859: PUSH
32860: EMPTY
32861: LIST
32862: LIST
32863: IN
32864: NOT
32865: PUSH
32866: LD_VAR 0 6
32870: PUSH
32871: LD_INT 2
32873: EQUAL
32874: AND
32875: OR
32876: IFFALSE 32886
// mode = 0 ;
32878: LD_ADDR_VAR 0 6
32882: PUSH
32883: LD_INT 0
32885: ST_TO_ADDR
// case mode of 0 :
32886: LD_VAR 0 6
32890: PUSH
32891: LD_INT 0
32893: DOUBLE
32894: EQUAL
32895: IFTRUE 32899
32897: GO 44352
32899: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
32900: LD_ADDR_VAR 0 11
32904: PUSH
32905: LD_INT 0
32907: PUSH
32908: LD_INT 0
32910: PUSH
32911: EMPTY
32912: LIST
32913: LIST
32914: PUSH
32915: LD_INT 0
32917: PUSH
32918: LD_INT 1
32920: NEG
32921: PUSH
32922: EMPTY
32923: LIST
32924: LIST
32925: PUSH
32926: LD_INT 1
32928: PUSH
32929: LD_INT 0
32931: PUSH
32932: EMPTY
32933: LIST
32934: LIST
32935: PUSH
32936: LD_INT 1
32938: PUSH
32939: LD_INT 1
32941: PUSH
32942: EMPTY
32943: LIST
32944: LIST
32945: PUSH
32946: LD_INT 0
32948: PUSH
32949: LD_INT 1
32951: PUSH
32952: EMPTY
32953: LIST
32954: LIST
32955: PUSH
32956: LD_INT 1
32958: NEG
32959: PUSH
32960: LD_INT 0
32962: PUSH
32963: EMPTY
32964: LIST
32965: LIST
32966: PUSH
32967: LD_INT 1
32969: NEG
32970: PUSH
32971: LD_INT 1
32973: NEG
32974: PUSH
32975: EMPTY
32976: LIST
32977: LIST
32978: PUSH
32979: LD_INT 1
32981: NEG
32982: PUSH
32983: LD_INT 2
32985: NEG
32986: PUSH
32987: EMPTY
32988: LIST
32989: LIST
32990: PUSH
32991: LD_INT 0
32993: PUSH
32994: LD_INT 2
32996: NEG
32997: PUSH
32998: EMPTY
32999: LIST
33000: LIST
33001: PUSH
33002: LD_INT 1
33004: PUSH
33005: LD_INT 1
33007: NEG
33008: PUSH
33009: EMPTY
33010: LIST
33011: LIST
33012: PUSH
33013: LD_INT 1
33015: PUSH
33016: LD_INT 2
33018: PUSH
33019: EMPTY
33020: LIST
33021: LIST
33022: PUSH
33023: LD_INT 0
33025: PUSH
33026: LD_INT 2
33028: PUSH
33029: EMPTY
33030: LIST
33031: LIST
33032: PUSH
33033: LD_INT 1
33035: NEG
33036: PUSH
33037: LD_INT 1
33039: PUSH
33040: EMPTY
33041: LIST
33042: LIST
33043: PUSH
33044: LD_INT 1
33046: PUSH
33047: LD_INT 3
33049: PUSH
33050: EMPTY
33051: LIST
33052: LIST
33053: PUSH
33054: LD_INT 0
33056: PUSH
33057: LD_INT 3
33059: PUSH
33060: EMPTY
33061: LIST
33062: LIST
33063: PUSH
33064: LD_INT 1
33066: NEG
33067: PUSH
33068: LD_INT 2
33070: PUSH
33071: EMPTY
33072: LIST
33073: LIST
33074: PUSH
33075: EMPTY
33076: LIST
33077: LIST
33078: LIST
33079: LIST
33080: LIST
33081: LIST
33082: LIST
33083: LIST
33084: LIST
33085: LIST
33086: LIST
33087: LIST
33088: LIST
33089: LIST
33090: LIST
33091: LIST
33092: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33093: LD_ADDR_VAR 0 12
33097: PUSH
33098: LD_INT 0
33100: PUSH
33101: LD_INT 0
33103: PUSH
33104: EMPTY
33105: LIST
33106: LIST
33107: PUSH
33108: LD_INT 0
33110: PUSH
33111: LD_INT 1
33113: NEG
33114: PUSH
33115: EMPTY
33116: LIST
33117: LIST
33118: PUSH
33119: LD_INT 1
33121: PUSH
33122: LD_INT 0
33124: PUSH
33125: EMPTY
33126: LIST
33127: LIST
33128: PUSH
33129: LD_INT 1
33131: PUSH
33132: LD_INT 1
33134: PUSH
33135: EMPTY
33136: LIST
33137: LIST
33138: PUSH
33139: LD_INT 0
33141: PUSH
33142: LD_INT 1
33144: PUSH
33145: EMPTY
33146: LIST
33147: LIST
33148: PUSH
33149: LD_INT 1
33151: NEG
33152: PUSH
33153: LD_INT 0
33155: PUSH
33156: EMPTY
33157: LIST
33158: LIST
33159: PUSH
33160: LD_INT 1
33162: NEG
33163: PUSH
33164: LD_INT 1
33166: NEG
33167: PUSH
33168: EMPTY
33169: LIST
33170: LIST
33171: PUSH
33172: LD_INT 1
33174: PUSH
33175: LD_INT 1
33177: NEG
33178: PUSH
33179: EMPTY
33180: LIST
33181: LIST
33182: PUSH
33183: LD_INT 2
33185: PUSH
33186: LD_INT 0
33188: PUSH
33189: EMPTY
33190: LIST
33191: LIST
33192: PUSH
33193: LD_INT 2
33195: PUSH
33196: LD_INT 1
33198: PUSH
33199: EMPTY
33200: LIST
33201: LIST
33202: PUSH
33203: LD_INT 1
33205: NEG
33206: PUSH
33207: LD_INT 1
33209: PUSH
33210: EMPTY
33211: LIST
33212: LIST
33213: PUSH
33214: LD_INT 2
33216: NEG
33217: PUSH
33218: LD_INT 0
33220: PUSH
33221: EMPTY
33222: LIST
33223: LIST
33224: PUSH
33225: LD_INT 2
33227: NEG
33228: PUSH
33229: LD_INT 1
33231: NEG
33232: PUSH
33233: EMPTY
33234: LIST
33235: LIST
33236: PUSH
33237: LD_INT 2
33239: NEG
33240: PUSH
33241: LD_INT 1
33243: PUSH
33244: EMPTY
33245: LIST
33246: LIST
33247: PUSH
33248: LD_INT 3
33250: NEG
33251: PUSH
33252: LD_INT 0
33254: PUSH
33255: EMPTY
33256: LIST
33257: LIST
33258: PUSH
33259: LD_INT 3
33261: NEG
33262: PUSH
33263: LD_INT 1
33265: NEG
33266: PUSH
33267: EMPTY
33268: LIST
33269: LIST
33270: PUSH
33271: EMPTY
33272: LIST
33273: LIST
33274: LIST
33275: LIST
33276: LIST
33277: LIST
33278: LIST
33279: LIST
33280: LIST
33281: LIST
33282: LIST
33283: LIST
33284: LIST
33285: LIST
33286: LIST
33287: LIST
33288: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33289: LD_ADDR_VAR 0 13
33293: PUSH
33294: LD_INT 0
33296: PUSH
33297: LD_INT 0
33299: PUSH
33300: EMPTY
33301: LIST
33302: LIST
33303: PUSH
33304: LD_INT 0
33306: PUSH
33307: LD_INT 1
33309: NEG
33310: PUSH
33311: EMPTY
33312: LIST
33313: LIST
33314: PUSH
33315: LD_INT 1
33317: PUSH
33318: LD_INT 0
33320: PUSH
33321: EMPTY
33322: LIST
33323: LIST
33324: PUSH
33325: LD_INT 1
33327: PUSH
33328: LD_INT 1
33330: PUSH
33331: EMPTY
33332: LIST
33333: LIST
33334: PUSH
33335: LD_INT 0
33337: PUSH
33338: LD_INT 1
33340: PUSH
33341: EMPTY
33342: LIST
33343: LIST
33344: PUSH
33345: LD_INT 1
33347: NEG
33348: PUSH
33349: LD_INT 0
33351: PUSH
33352: EMPTY
33353: LIST
33354: LIST
33355: PUSH
33356: LD_INT 1
33358: NEG
33359: PUSH
33360: LD_INT 1
33362: NEG
33363: PUSH
33364: EMPTY
33365: LIST
33366: LIST
33367: PUSH
33368: LD_INT 1
33370: NEG
33371: PUSH
33372: LD_INT 2
33374: NEG
33375: PUSH
33376: EMPTY
33377: LIST
33378: LIST
33379: PUSH
33380: LD_INT 2
33382: PUSH
33383: LD_INT 1
33385: PUSH
33386: EMPTY
33387: LIST
33388: LIST
33389: PUSH
33390: LD_INT 2
33392: PUSH
33393: LD_INT 2
33395: PUSH
33396: EMPTY
33397: LIST
33398: LIST
33399: PUSH
33400: LD_INT 1
33402: PUSH
33403: LD_INT 2
33405: PUSH
33406: EMPTY
33407: LIST
33408: LIST
33409: PUSH
33410: LD_INT 2
33412: NEG
33413: PUSH
33414: LD_INT 1
33416: NEG
33417: PUSH
33418: EMPTY
33419: LIST
33420: LIST
33421: PUSH
33422: LD_INT 2
33424: NEG
33425: PUSH
33426: LD_INT 2
33428: NEG
33429: PUSH
33430: EMPTY
33431: LIST
33432: LIST
33433: PUSH
33434: LD_INT 2
33436: NEG
33437: PUSH
33438: LD_INT 3
33440: NEG
33441: PUSH
33442: EMPTY
33443: LIST
33444: LIST
33445: PUSH
33446: LD_INT 3
33448: NEG
33449: PUSH
33450: LD_INT 2
33452: NEG
33453: PUSH
33454: EMPTY
33455: LIST
33456: LIST
33457: PUSH
33458: LD_INT 3
33460: NEG
33461: PUSH
33462: LD_INT 3
33464: NEG
33465: PUSH
33466: EMPTY
33467: LIST
33468: LIST
33469: PUSH
33470: EMPTY
33471: LIST
33472: LIST
33473: LIST
33474: LIST
33475: LIST
33476: LIST
33477: LIST
33478: LIST
33479: LIST
33480: LIST
33481: LIST
33482: LIST
33483: LIST
33484: LIST
33485: LIST
33486: LIST
33487: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
33488: LD_ADDR_VAR 0 14
33492: PUSH
33493: LD_INT 0
33495: PUSH
33496: LD_INT 0
33498: PUSH
33499: EMPTY
33500: LIST
33501: LIST
33502: PUSH
33503: LD_INT 0
33505: PUSH
33506: LD_INT 1
33508: NEG
33509: PUSH
33510: EMPTY
33511: LIST
33512: LIST
33513: PUSH
33514: LD_INT 1
33516: PUSH
33517: LD_INT 0
33519: PUSH
33520: EMPTY
33521: LIST
33522: LIST
33523: PUSH
33524: LD_INT 1
33526: PUSH
33527: LD_INT 1
33529: PUSH
33530: EMPTY
33531: LIST
33532: LIST
33533: PUSH
33534: LD_INT 0
33536: PUSH
33537: LD_INT 1
33539: PUSH
33540: EMPTY
33541: LIST
33542: LIST
33543: PUSH
33544: LD_INT 1
33546: NEG
33547: PUSH
33548: LD_INT 0
33550: PUSH
33551: EMPTY
33552: LIST
33553: LIST
33554: PUSH
33555: LD_INT 1
33557: NEG
33558: PUSH
33559: LD_INT 1
33561: NEG
33562: PUSH
33563: EMPTY
33564: LIST
33565: LIST
33566: PUSH
33567: LD_INT 1
33569: NEG
33570: PUSH
33571: LD_INT 2
33573: NEG
33574: PUSH
33575: EMPTY
33576: LIST
33577: LIST
33578: PUSH
33579: LD_INT 0
33581: PUSH
33582: LD_INT 2
33584: NEG
33585: PUSH
33586: EMPTY
33587: LIST
33588: LIST
33589: PUSH
33590: LD_INT 1
33592: PUSH
33593: LD_INT 1
33595: NEG
33596: PUSH
33597: EMPTY
33598: LIST
33599: LIST
33600: PUSH
33601: LD_INT 1
33603: PUSH
33604: LD_INT 2
33606: PUSH
33607: EMPTY
33608: LIST
33609: LIST
33610: PUSH
33611: LD_INT 0
33613: PUSH
33614: LD_INT 2
33616: PUSH
33617: EMPTY
33618: LIST
33619: LIST
33620: PUSH
33621: LD_INT 1
33623: NEG
33624: PUSH
33625: LD_INT 1
33627: PUSH
33628: EMPTY
33629: LIST
33630: LIST
33631: PUSH
33632: LD_INT 1
33634: NEG
33635: PUSH
33636: LD_INT 3
33638: NEG
33639: PUSH
33640: EMPTY
33641: LIST
33642: LIST
33643: PUSH
33644: LD_INT 0
33646: PUSH
33647: LD_INT 3
33649: NEG
33650: PUSH
33651: EMPTY
33652: LIST
33653: LIST
33654: PUSH
33655: LD_INT 1
33657: PUSH
33658: LD_INT 2
33660: NEG
33661: PUSH
33662: EMPTY
33663: LIST
33664: LIST
33665: PUSH
33666: EMPTY
33667: LIST
33668: LIST
33669: LIST
33670: LIST
33671: LIST
33672: LIST
33673: LIST
33674: LIST
33675: LIST
33676: LIST
33677: LIST
33678: LIST
33679: LIST
33680: LIST
33681: LIST
33682: LIST
33683: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
33684: LD_ADDR_VAR 0 15
33688: PUSH
33689: LD_INT 0
33691: PUSH
33692: LD_INT 0
33694: PUSH
33695: EMPTY
33696: LIST
33697: LIST
33698: PUSH
33699: LD_INT 0
33701: PUSH
33702: LD_INT 1
33704: NEG
33705: PUSH
33706: EMPTY
33707: LIST
33708: LIST
33709: PUSH
33710: LD_INT 1
33712: PUSH
33713: LD_INT 0
33715: PUSH
33716: EMPTY
33717: LIST
33718: LIST
33719: PUSH
33720: LD_INT 1
33722: PUSH
33723: LD_INT 1
33725: PUSH
33726: EMPTY
33727: LIST
33728: LIST
33729: PUSH
33730: LD_INT 0
33732: PUSH
33733: LD_INT 1
33735: PUSH
33736: EMPTY
33737: LIST
33738: LIST
33739: PUSH
33740: LD_INT 1
33742: NEG
33743: PUSH
33744: LD_INT 0
33746: PUSH
33747: EMPTY
33748: LIST
33749: LIST
33750: PUSH
33751: LD_INT 1
33753: NEG
33754: PUSH
33755: LD_INT 1
33757: NEG
33758: PUSH
33759: EMPTY
33760: LIST
33761: LIST
33762: PUSH
33763: LD_INT 1
33765: PUSH
33766: LD_INT 1
33768: NEG
33769: PUSH
33770: EMPTY
33771: LIST
33772: LIST
33773: PUSH
33774: LD_INT 2
33776: PUSH
33777: LD_INT 0
33779: PUSH
33780: EMPTY
33781: LIST
33782: LIST
33783: PUSH
33784: LD_INT 2
33786: PUSH
33787: LD_INT 1
33789: PUSH
33790: EMPTY
33791: LIST
33792: LIST
33793: PUSH
33794: LD_INT 1
33796: NEG
33797: PUSH
33798: LD_INT 1
33800: PUSH
33801: EMPTY
33802: LIST
33803: LIST
33804: PUSH
33805: LD_INT 2
33807: NEG
33808: PUSH
33809: LD_INT 0
33811: PUSH
33812: EMPTY
33813: LIST
33814: LIST
33815: PUSH
33816: LD_INT 2
33818: NEG
33819: PUSH
33820: LD_INT 1
33822: NEG
33823: PUSH
33824: EMPTY
33825: LIST
33826: LIST
33827: PUSH
33828: LD_INT 2
33830: PUSH
33831: LD_INT 1
33833: NEG
33834: PUSH
33835: EMPTY
33836: LIST
33837: LIST
33838: PUSH
33839: LD_INT 3
33841: PUSH
33842: LD_INT 0
33844: PUSH
33845: EMPTY
33846: LIST
33847: LIST
33848: PUSH
33849: LD_INT 3
33851: PUSH
33852: LD_INT 1
33854: PUSH
33855: EMPTY
33856: LIST
33857: LIST
33858: PUSH
33859: EMPTY
33860: LIST
33861: LIST
33862: LIST
33863: LIST
33864: LIST
33865: LIST
33866: LIST
33867: LIST
33868: LIST
33869: LIST
33870: LIST
33871: LIST
33872: LIST
33873: LIST
33874: LIST
33875: LIST
33876: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
33877: LD_ADDR_VAR 0 16
33881: PUSH
33882: LD_INT 0
33884: PUSH
33885: LD_INT 0
33887: PUSH
33888: EMPTY
33889: LIST
33890: LIST
33891: PUSH
33892: LD_INT 0
33894: PUSH
33895: LD_INT 1
33897: NEG
33898: PUSH
33899: EMPTY
33900: LIST
33901: LIST
33902: PUSH
33903: LD_INT 1
33905: PUSH
33906: LD_INT 0
33908: PUSH
33909: EMPTY
33910: LIST
33911: LIST
33912: PUSH
33913: LD_INT 1
33915: PUSH
33916: LD_INT 1
33918: PUSH
33919: EMPTY
33920: LIST
33921: LIST
33922: PUSH
33923: LD_INT 0
33925: PUSH
33926: LD_INT 1
33928: PUSH
33929: EMPTY
33930: LIST
33931: LIST
33932: PUSH
33933: LD_INT 1
33935: NEG
33936: PUSH
33937: LD_INT 0
33939: PUSH
33940: EMPTY
33941: LIST
33942: LIST
33943: PUSH
33944: LD_INT 1
33946: NEG
33947: PUSH
33948: LD_INT 1
33950: NEG
33951: PUSH
33952: EMPTY
33953: LIST
33954: LIST
33955: PUSH
33956: LD_INT 1
33958: NEG
33959: PUSH
33960: LD_INT 2
33962: NEG
33963: PUSH
33964: EMPTY
33965: LIST
33966: LIST
33967: PUSH
33968: LD_INT 2
33970: PUSH
33971: LD_INT 1
33973: PUSH
33974: EMPTY
33975: LIST
33976: LIST
33977: PUSH
33978: LD_INT 2
33980: PUSH
33981: LD_INT 2
33983: PUSH
33984: EMPTY
33985: LIST
33986: LIST
33987: PUSH
33988: LD_INT 1
33990: PUSH
33991: LD_INT 2
33993: PUSH
33994: EMPTY
33995: LIST
33996: LIST
33997: PUSH
33998: LD_INT 2
34000: NEG
34001: PUSH
34002: LD_INT 1
34004: NEG
34005: PUSH
34006: EMPTY
34007: LIST
34008: LIST
34009: PUSH
34010: LD_INT 2
34012: NEG
34013: PUSH
34014: LD_INT 2
34016: NEG
34017: PUSH
34018: EMPTY
34019: LIST
34020: LIST
34021: PUSH
34022: LD_INT 3
34024: PUSH
34025: LD_INT 2
34027: PUSH
34028: EMPTY
34029: LIST
34030: LIST
34031: PUSH
34032: LD_INT 3
34034: PUSH
34035: LD_INT 3
34037: PUSH
34038: EMPTY
34039: LIST
34040: LIST
34041: PUSH
34042: LD_INT 2
34044: PUSH
34045: LD_INT 3
34047: PUSH
34048: EMPTY
34049: LIST
34050: LIST
34051: PUSH
34052: EMPTY
34053: LIST
34054: LIST
34055: LIST
34056: LIST
34057: LIST
34058: LIST
34059: LIST
34060: LIST
34061: LIST
34062: LIST
34063: LIST
34064: LIST
34065: LIST
34066: LIST
34067: LIST
34068: LIST
34069: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34070: LD_ADDR_VAR 0 17
34074: PUSH
34075: LD_INT 0
34077: PUSH
34078: LD_INT 0
34080: PUSH
34081: EMPTY
34082: LIST
34083: LIST
34084: PUSH
34085: LD_INT 0
34087: PUSH
34088: LD_INT 1
34090: NEG
34091: PUSH
34092: EMPTY
34093: LIST
34094: LIST
34095: PUSH
34096: LD_INT 1
34098: PUSH
34099: LD_INT 0
34101: PUSH
34102: EMPTY
34103: LIST
34104: LIST
34105: PUSH
34106: LD_INT 1
34108: PUSH
34109: LD_INT 1
34111: PUSH
34112: EMPTY
34113: LIST
34114: LIST
34115: PUSH
34116: LD_INT 0
34118: PUSH
34119: LD_INT 1
34121: PUSH
34122: EMPTY
34123: LIST
34124: LIST
34125: PUSH
34126: LD_INT 1
34128: NEG
34129: PUSH
34130: LD_INT 0
34132: PUSH
34133: EMPTY
34134: LIST
34135: LIST
34136: PUSH
34137: LD_INT 1
34139: NEG
34140: PUSH
34141: LD_INT 1
34143: NEG
34144: PUSH
34145: EMPTY
34146: LIST
34147: LIST
34148: PUSH
34149: LD_INT 1
34151: NEG
34152: PUSH
34153: LD_INT 2
34155: NEG
34156: PUSH
34157: EMPTY
34158: LIST
34159: LIST
34160: PUSH
34161: LD_INT 0
34163: PUSH
34164: LD_INT 2
34166: NEG
34167: PUSH
34168: EMPTY
34169: LIST
34170: LIST
34171: PUSH
34172: LD_INT 1
34174: PUSH
34175: LD_INT 1
34177: NEG
34178: PUSH
34179: EMPTY
34180: LIST
34181: LIST
34182: PUSH
34183: LD_INT 2
34185: PUSH
34186: LD_INT 0
34188: PUSH
34189: EMPTY
34190: LIST
34191: LIST
34192: PUSH
34193: LD_INT 2
34195: PUSH
34196: LD_INT 1
34198: PUSH
34199: EMPTY
34200: LIST
34201: LIST
34202: PUSH
34203: LD_INT 2
34205: PUSH
34206: LD_INT 2
34208: PUSH
34209: EMPTY
34210: LIST
34211: LIST
34212: PUSH
34213: LD_INT 1
34215: PUSH
34216: LD_INT 2
34218: PUSH
34219: EMPTY
34220: LIST
34221: LIST
34222: PUSH
34223: LD_INT 0
34225: PUSH
34226: LD_INT 2
34228: PUSH
34229: EMPTY
34230: LIST
34231: LIST
34232: PUSH
34233: LD_INT 1
34235: NEG
34236: PUSH
34237: LD_INT 1
34239: PUSH
34240: EMPTY
34241: LIST
34242: LIST
34243: PUSH
34244: LD_INT 2
34246: NEG
34247: PUSH
34248: LD_INT 0
34250: PUSH
34251: EMPTY
34252: LIST
34253: LIST
34254: PUSH
34255: LD_INT 2
34257: NEG
34258: PUSH
34259: LD_INT 1
34261: NEG
34262: PUSH
34263: EMPTY
34264: LIST
34265: LIST
34266: PUSH
34267: LD_INT 2
34269: NEG
34270: PUSH
34271: LD_INT 2
34273: NEG
34274: PUSH
34275: EMPTY
34276: LIST
34277: LIST
34278: PUSH
34279: EMPTY
34280: LIST
34281: LIST
34282: LIST
34283: LIST
34284: LIST
34285: LIST
34286: LIST
34287: LIST
34288: LIST
34289: LIST
34290: LIST
34291: LIST
34292: LIST
34293: LIST
34294: LIST
34295: LIST
34296: LIST
34297: LIST
34298: LIST
34299: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34300: LD_ADDR_VAR 0 18
34304: PUSH
34305: LD_INT 0
34307: PUSH
34308: LD_INT 0
34310: PUSH
34311: EMPTY
34312: LIST
34313: LIST
34314: PUSH
34315: LD_INT 0
34317: PUSH
34318: LD_INT 1
34320: NEG
34321: PUSH
34322: EMPTY
34323: LIST
34324: LIST
34325: PUSH
34326: LD_INT 1
34328: PUSH
34329: LD_INT 0
34331: PUSH
34332: EMPTY
34333: LIST
34334: LIST
34335: PUSH
34336: LD_INT 1
34338: PUSH
34339: LD_INT 1
34341: PUSH
34342: EMPTY
34343: LIST
34344: LIST
34345: PUSH
34346: LD_INT 0
34348: PUSH
34349: LD_INT 1
34351: PUSH
34352: EMPTY
34353: LIST
34354: LIST
34355: PUSH
34356: LD_INT 1
34358: NEG
34359: PUSH
34360: LD_INT 0
34362: PUSH
34363: EMPTY
34364: LIST
34365: LIST
34366: PUSH
34367: LD_INT 1
34369: NEG
34370: PUSH
34371: LD_INT 1
34373: NEG
34374: PUSH
34375: EMPTY
34376: LIST
34377: LIST
34378: PUSH
34379: LD_INT 1
34381: NEG
34382: PUSH
34383: LD_INT 2
34385: NEG
34386: PUSH
34387: EMPTY
34388: LIST
34389: LIST
34390: PUSH
34391: LD_INT 0
34393: PUSH
34394: LD_INT 2
34396: NEG
34397: PUSH
34398: EMPTY
34399: LIST
34400: LIST
34401: PUSH
34402: LD_INT 1
34404: PUSH
34405: LD_INT 1
34407: NEG
34408: PUSH
34409: EMPTY
34410: LIST
34411: LIST
34412: PUSH
34413: LD_INT 2
34415: PUSH
34416: LD_INT 0
34418: PUSH
34419: EMPTY
34420: LIST
34421: LIST
34422: PUSH
34423: LD_INT 2
34425: PUSH
34426: LD_INT 1
34428: PUSH
34429: EMPTY
34430: LIST
34431: LIST
34432: PUSH
34433: LD_INT 2
34435: PUSH
34436: LD_INT 2
34438: PUSH
34439: EMPTY
34440: LIST
34441: LIST
34442: PUSH
34443: LD_INT 1
34445: PUSH
34446: LD_INT 2
34448: PUSH
34449: EMPTY
34450: LIST
34451: LIST
34452: PUSH
34453: LD_INT 0
34455: PUSH
34456: LD_INT 2
34458: PUSH
34459: EMPTY
34460: LIST
34461: LIST
34462: PUSH
34463: LD_INT 1
34465: NEG
34466: PUSH
34467: LD_INT 1
34469: PUSH
34470: EMPTY
34471: LIST
34472: LIST
34473: PUSH
34474: LD_INT 2
34476: NEG
34477: PUSH
34478: LD_INT 0
34480: PUSH
34481: EMPTY
34482: LIST
34483: LIST
34484: PUSH
34485: LD_INT 2
34487: NEG
34488: PUSH
34489: LD_INT 1
34491: NEG
34492: PUSH
34493: EMPTY
34494: LIST
34495: LIST
34496: PUSH
34497: LD_INT 2
34499: NEG
34500: PUSH
34501: LD_INT 2
34503: NEG
34504: PUSH
34505: EMPTY
34506: LIST
34507: LIST
34508: PUSH
34509: EMPTY
34510: LIST
34511: LIST
34512: LIST
34513: LIST
34514: LIST
34515: LIST
34516: LIST
34517: LIST
34518: LIST
34519: LIST
34520: LIST
34521: LIST
34522: LIST
34523: LIST
34524: LIST
34525: LIST
34526: LIST
34527: LIST
34528: LIST
34529: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34530: LD_ADDR_VAR 0 19
34534: PUSH
34535: LD_INT 0
34537: PUSH
34538: LD_INT 0
34540: PUSH
34541: EMPTY
34542: LIST
34543: LIST
34544: PUSH
34545: LD_INT 0
34547: PUSH
34548: LD_INT 1
34550: NEG
34551: PUSH
34552: EMPTY
34553: LIST
34554: LIST
34555: PUSH
34556: LD_INT 1
34558: PUSH
34559: LD_INT 0
34561: PUSH
34562: EMPTY
34563: LIST
34564: LIST
34565: PUSH
34566: LD_INT 1
34568: PUSH
34569: LD_INT 1
34571: PUSH
34572: EMPTY
34573: LIST
34574: LIST
34575: PUSH
34576: LD_INT 0
34578: PUSH
34579: LD_INT 1
34581: PUSH
34582: EMPTY
34583: LIST
34584: LIST
34585: PUSH
34586: LD_INT 1
34588: NEG
34589: PUSH
34590: LD_INT 0
34592: PUSH
34593: EMPTY
34594: LIST
34595: LIST
34596: PUSH
34597: LD_INT 1
34599: NEG
34600: PUSH
34601: LD_INT 1
34603: NEG
34604: PUSH
34605: EMPTY
34606: LIST
34607: LIST
34608: PUSH
34609: LD_INT 1
34611: NEG
34612: PUSH
34613: LD_INT 2
34615: NEG
34616: PUSH
34617: EMPTY
34618: LIST
34619: LIST
34620: PUSH
34621: LD_INT 0
34623: PUSH
34624: LD_INT 2
34626: NEG
34627: PUSH
34628: EMPTY
34629: LIST
34630: LIST
34631: PUSH
34632: LD_INT 1
34634: PUSH
34635: LD_INT 1
34637: NEG
34638: PUSH
34639: EMPTY
34640: LIST
34641: LIST
34642: PUSH
34643: LD_INT 2
34645: PUSH
34646: LD_INT 0
34648: PUSH
34649: EMPTY
34650: LIST
34651: LIST
34652: PUSH
34653: LD_INT 2
34655: PUSH
34656: LD_INT 1
34658: PUSH
34659: EMPTY
34660: LIST
34661: LIST
34662: PUSH
34663: LD_INT 2
34665: PUSH
34666: LD_INT 2
34668: PUSH
34669: EMPTY
34670: LIST
34671: LIST
34672: PUSH
34673: LD_INT 1
34675: PUSH
34676: LD_INT 2
34678: PUSH
34679: EMPTY
34680: LIST
34681: LIST
34682: PUSH
34683: LD_INT 0
34685: PUSH
34686: LD_INT 2
34688: PUSH
34689: EMPTY
34690: LIST
34691: LIST
34692: PUSH
34693: LD_INT 1
34695: NEG
34696: PUSH
34697: LD_INT 1
34699: PUSH
34700: EMPTY
34701: LIST
34702: LIST
34703: PUSH
34704: LD_INT 2
34706: NEG
34707: PUSH
34708: LD_INT 0
34710: PUSH
34711: EMPTY
34712: LIST
34713: LIST
34714: PUSH
34715: LD_INT 2
34717: NEG
34718: PUSH
34719: LD_INT 1
34721: NEG
34722: PUSH
34723: EMPTY
34724: LIST
34725: LIST
34726: PUSH
34727: LD_INT 2
34729: NEG
34730: PUSH
34731: LD_INT 2
34733: NEG
34734: PUSH
34735: EMPTY
34736: LIST
34737: LIST
34738: PUSH
34739: EMPTY
34740: LIST
34741: LIST
34742: LIST
34743: LIST
34744: LIST
34745: LIST
34746: LIST
34747: LIST
34748: LIST
34749: LIST
34750: LIST
34751: LIST
34752: LIST
34753: LIST
34754: LIST
34755: LIST
34756: LIST
34757: LIST
34758: LIST
34759: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34760: LD_ADDR_VAR 0 20
34764: PUSH
34765: LD_INT 0
34767: PUSH
34768: LD_INT 0
34770: PUSH
34771: EMPTY
34772: LIST
34773: LIST
34774: PUSH
34775: LD_INT 0
34777: PUSH
34778: LD_INT 1
34780: NEG
34781: PUSH
34782: EMPTY
34783: LIST
34784: LIST
34785: PUSH
34786: LD_INT 1
34788: PUSH
34789: LD_INT 0
34791: PUSH
34792: EMPTY
34793: LIST
34794: LIST
34795: PUSH
34796: LD_INT 1
34798: PUSH
34799: LD_INT 1
34801: PUSH
34802: EMPTY
34803: LIST
34804: LIST
34805: PUSH
34806: LD_INT 0
34808: PUSH
34809: LD_INT 1
34811: PUSH
34812: EMPTY
34813: LIST
34814: LIST
34815: PUSH
34816: LD_INT 1
34818: NEG
34819: PUSH
34820: LD_INT 0
34822: PUSH
34823: EMPTY
34824: LIST
34825: LIST
34826: PUSH
34827: LD_INT 1
34829: NEG
34830: PUSH
34831: LD_INT 1
34833: NEG
34834: PUSH
34835: EMPTY
34836: LIST
34837: LIST
34838: PUSH
34839: LD_INT 1
34841: NEG
34842: PUSH
34843: LD_INT 2
34845: NEG
34846: PUSH
34847: EMPTY
34848: LIST
34849: LIST
34850: PUSH
34851: LD_INT 0
34853: PUSH
34854: LD_INT 2
34856: NEG
34857: PUSH
34858: EMPTY
34859: LIST
34860: LIST
34861: PUSH
34862: LD_INT 1
34864: PUSH
34865: LD_INT 1
34867: NEG
34868: PUSH
34869: EMPTY
34870: LIST
34871: LIST
34872: PUSH
34873: LD_INT 2
34875: PUSH
34876: LD_INT 0
34878: PUSH
34879: EMPTY
34880: LIST
34881: LIST
34882: PUSH
34883: LD_INT 2
34885: PUSH
34886: LD_INT 1
34888: PUSH
34889: EMPTY
34890: LIST
34891: LIST
34892: PUSH
34893: LD_INT 2
34895: PUSH
34896: LD_INT 2
34898: PUSH
34899: EMPTY
34900: LIST
34901: LIST
34902: PUSH
34903: LD_INT 1
34905: PUSH
34906: LD_INT 2
34908: PUSH
34909: EMPTY
34910: LIST
34911: LIST
34912: PUSH
34913: LD_INT 0
34915: PUSH
34916: LD_INT 2
34918: PUSH
34919: EMPTY
34920: LIST
34921: LIST
34922: PUSH
34923: LD_INT 1
34925: NEG
34926: PUSH
34927: LD_INT 1
34929: PUSH
34930: EMPTY
34931: LIST
34932: LIST
34933: PUSH
34934: LD_INT 2
34936: NEG
34937: PUSH
34938: LD_INT 0
34940: PUSH
34941: EMPTY
34942: LIST
34943: LIST
34944: PUSH
34945: LD_INT 2
34947: NEG
34948: PUSH
34949: LD_INT 1
34951: NEG
34952: PUSH
34953: EMPTY
34954: LIST
34955: LIST
34956: PUSH
34957: LD_INT 2
34959: NEG
34960: PUSH
34961: LD_INT 2
34963: NEG
34964: PUSH
34965: EMPTY
34966: LIST
34967: LIST
34968: PUSH
34969: EMPTY
34970: LIST
34971: LIST
34972: LIST
34973: LIST
34974: LIST
34975: LIST
34976: LIST
34977: LIST
34978: LIST
34979: LIST
34980: LIST
34981: LIST
34982: LIST
34983: LIST
34984: LIST
34985: LIST
34986: LIST
34987: LIST
34988: LIST
34989: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34990: LD_ADDR_VAR 0 21
34994: PUSH
34995: LD_INT 0
34997: PUSH
34998: LD_INT 0
35000: PUSH
35001: EMPTY
35002: LIST
35003: LIST
35004: PUSH
35005: LD_INT 0
35007: PUSH
35008: LD_INT 1
35010: NEG
35011: PUSH
35012: EMPTY
35013: LIST
35014: LIST
35015: PUSH
35016: LD_INT 1
35018: PUSH
35019: LD_INT 0
35021: PUSH
35022: EMPTY
35023: LIST
35024: LIST
35025: PUSH
35026: LD_INT 1
35028: PUSH
35029: LD_INT 1
35031: PUSH
35032: EMPTY
35033: LIST
35034: LIST
35035: PUSH
35036: LD_INT 0
35038: PUSH
35039: LD_INT 1
35041: PUSH
35042: EMPTY
35043: LIST
35044: LIST
35045: PUSH
35046: LD_INT 1
35048: NEG
35049: PUSH
35050: LD_INT 0
35052: PUSH
35053: EMPTY
35054: LIST
35055: LIST
35056: PUSH
35057: LD_INT 1
35059: NEG
35060: PUSH
35061: LD_INT 1
35063: NEG
35064: PUSH
35065: EMPTY
35066: LIST
35067: LIST
35068: PUSH
35069: LD_INT 1
35071: NEG
35072: PUSH
35073: LD_INT 2
35075: NEG
35076: PUSH
35077: EMPTY
35078: LIST
35079: LIST
35080: PUSH
35081: LD_INT 0
35083: PUSH
35084: LD_INT 2
35086: NEG
35087: PUSH
35088: EMPTY
35089: LIST
35090: LIST
35091: PUSH
35092: LD_INT 1
35094: PUSH
35095: LD_INT 1
35097: NEG
35098: PUSH
35099: EMPTY
35100: LIST
35101: LIST
35102: PUSH
35103: LD_INT 2
35105: PUSH
35106: LD_INT 0
35108: PUSH
35109: EMPTY
35110: LIST
35111: LIST
35112: PUSH
35113: LD_INT 2
35115: PUSH
35116: LD_INT 1
35118: PUSH
35119: EMPTY
35120: LIST
35121: LIST
35122: PUSH
35123: LD_INT 2
35125: PUSH
35126: LD_INT 2
35128: PUSH
35129: EMPTY
35130: LIST
35131: LIST
35132: PUSH
35133: LD_INT 1
35135: PUSH
35136: LD_INT 2
35138: PUSH
35139: EMPTY
35140: LIST
35141: LIST
35142: PUSH
35143: LD_INT 0
35145: PUSH
35146: LD_INT 2
35148: PUSH
35149: EMPTY
35150: LIST
35151: LIST
35152: PUSH
35153: LD_INT 1
35155: NEG
35156: PUSH
35157: LD_INT 1
35159: PUSH
35160: EMPTY
35161: LIST
35162: LIST
35163: PUSH
35164: LD_INT 2
35166: NEG
35167: PUSH
35168: LD_INT 0
35170: PUSH
35171: EMPTY
35172: LIST
35173: LIST
35174: PUSH
35175: LD_INT 2
35177: NEG
35178: PUSH
35179: LD_INT 1
35181: NEG
35182: PUSH
35183: EMPTY
35184: LIST
35185: LIST
35186: PUSH
35187: LD_INT 2
35189: NEG
35190: PUSH
35191: LD_INT 2
35193: NEG
35194: PUSH
35195: EMPTY
35196: LIST
35197: LIST
35198: PUSH
35199: EMPTY
35200: LIST
35201: LIST
35202: LIST
35203: LIST
35204: LIST
35205: LIST
35206: LIST
35207: LIST
35208: LIST
35209: LIST
35210: LIST
35211: LIST
35212: LIST
35213: LIST
35214: LIST
35215: LIST
35216: LIST
35217: LIST
35218: LIST
35219: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35220: LD_ADDR_VAR 0 22
35224: PUSH
35225: LD_INT 0
35227: PUSH
35228: LD_INT 0
35230: PUSH
35231: EMPTY
35232: LIST
35233: LIST
35234: PUSH
35235: LD_INT 0
35237: PUSH
35238: LD_INT 1
35240: NEG
35241: PUSH
35242: EMPTY
35243: LIST
35244: LIST
35245: PUSH
35246: LD_INT 1
35248: PUSH
35249: LD_INT 0
35251: PUSH
35252: EMPTY
35253: LIST
35254: LIST
35255: PUSH
35256: LD_INT 1
35258: PUSH
35259: LD_INT 1
35261: PUSH
35262: EMPTY
35263: LIST
35264: LIST
35265: PUSH
35266: LD_INT 0
35268: PUSH
35269: LD_INT 1
35271: PUSH
35272: EMPTY
35273: LIST
35274: LIST
35275: PUSH
35276: LD_INT 1
35278: NEG
35279: PUSH
35280: LD_INT 0
35282: PUSH
35283: EMPTY
35284: LIST
35285: LIST
35286: PUSH
35287: LD_INT 1
35289: NEG
35290: PUSH
35291: LD_INT 1
35293: NEG
35294: PUSH
35295: EMPTY
35296: LIST
35297: LIST
35298: PUSH
35299: LD_INT 1
35301: NEG
35302: PUSH
35303: LD_INT 2
35305: NEG
35306: PUSH
35307: EMPTY
35308: LIST
35309: LIST
35310: PUSH
35311: LD_INT 0
35313: PUSH
35314: LD_INT 2
35316: NEG
35317: PUSH
35318: EMPTY
35319: LIST
35320: LIST
35321: PUSH
35322: LD_INT 1
35324: PUSH
35325: LD_INT 1
35327: NEG
35328: PUSH
35329: EMPTY
35330: LIST
35331: LIST
35332: PUSH
35333: LD_INT 2
35335: PUSH
35336: LD_INT 0
35338: PUSH
35339: EMPTY
35340: LIST
35341: LIST
35342: PUSH
35343: LD_INT 2
35345: PUSH
35346: LD_INT 1
35348: PUSH
35349: EMPTY
35350: LIST
35351: LIST
35352: PUSH
35353: LD_INT 2
35355: PUSH
35356: LD_INT 2
35358: PUSH
35359: EMPTY
35360: LIST
35361: LIST
35362: PUSH
35363: LD_INT 1
35365: PUSH
35366: LD_INT 2
35368: PUSH
35369: EMPTY
35370: LIST
35371: LIST
35372: PUSH
35373: LD_INT 0
35375: PUSH
35376: LD_INT 2
35378: PUSH
35379: EMPTY
35380: LIST
35381: LIST
35382: PUSH
35383: LD_INT 1
35385: NEG
35386: PUSH
35387: LD_INT 1
35389: PUSH
35390: EMPTY
35391: LIST
35392: LIST
35393: PUSH
35394: LD_INT 2
35396: NEG
35397: PUSH
35398: LD_INT 0
35400: PUSH
35401: EMPTY
35402: LIST
35403: LIST
35404: PUSH
35405: LD_INT 2
35407: NEG
35408: PUSH
35409: LD_INT 1
35411: NEG
35412: PUSH
35413: EMPTY
35414: LIST
35415: LIST
35416: PUSH
35417: LD_INT 2
35419: NEG
35420: PUSH
35421: LD_INT 2
35423: NEG
35424: PUSH
35425: EMPTY
35426: LIST
35427: LIST
35428: PUSH
35429: EMPTY
35430: LIST
35431: LIST
35432: LIST
35433: LIST
35434: LIST
35435: LIST
35436: LIST
35437: LIST
35438: LIST
35439: LIST
35440: LIST
35441: LIST
35442: LIST
35443: LIST
35444: LIST
35445: LIST
35446: LIST
35447: LIST
35448: LIST
35449: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
35450: LD_ADDR_VAR 0 23
35454: PUSH
35455: LD_INT 0
35457: PUSH
35458: LD_INT 0
35460: PUSH
35461: EMPTY
35462: LIST
35463: LIST
35464: PUSH
35465: LD_INT 0
35467: PUSH
35468: LD_INT 1
35470: NEG
35471: PUSH
35472: EMPTY
35473: LIST
35474: LIST
35475: PUSH
35476: LD_INT 1
35478: PUSH
35479: LD_INT 0
35481: PUSH
35482: EMPTY
35483: LIST
35484: LIST
35485: PUSH
35486: LD_INT 1
35488: PUSH
35489: LD_INT 1
35491: PUSH
35492: EMPTY
35493: LIST
35494: LIST
35495: PUSH
35496: LD_INT 0
35498: PUSH
35499: LD_INT 1
35501: PUSH
35502: EMPTY
35503: LIST
35504: LIST
35505: PUSH
35506: LD_INT 1
35508: NEG
35509: PUSH
35510: LD_INT 0
35512: PUSH
35513: EMPTY
35514: LIST
35515: LIST
35516: PUSH
35517: LD_INT 1
35519: NEG
35520: PUSH
35521: LD_INT 1
35523: NEG
35524: PUSH
35525: EMPTY
35526: LIST
35527: LIST
35528: PUSH
35529: LD_INT 1
35531: NEG
35532: PUSH
35533: LD_INT 2
35535: NEG
35536: PUSH
35537: EMPTY
35538: LIST
35539: LIST
35540: PUSH
35541: LD_INT 0
35543: PUSH
35544: LD_INT 2
35546: NEG
35547: PUSH
35548: EMPTY
35549: LIST
35550: LIST
35551: PUSH
35552: LD_INT 1
35554: PUSH
35555: LD_INT 1
35557: NEG
35558: PUSH
35559: EMPTY
35560: LIST
35561: LIST
35562: PUSH
35563: LD_INT 2
35565: PUSH
35566: LD_INT 0
35568: PUSH
35569: EMPTY
35570: LIST
35571: LIST
35572: PUSH
35573: LD_INT 2
35575: PUSH
35576: LD_INT 1
35578: PUSH
35579: EMPTY
35580: LIST
35581: LIST
35582: PUSH
35583: LD_INT 2
35585: PUSH
35586: LD_INT 2
35588: PUSH
35589: EMPTY
35590: LIST
35591: LIST
35592: PUSH
35593: LD_INT 1
35595: PUSH
35596: LD_INT 2
35598: PUSH
35599: EMPTY
35600: LIST
35601: LIST
35602: PUSH
35603: LD_INT 0
35605: PUSH
35606: LD_INT 2
35608: PUSH
35609: EMPTY
35610: LIST
35611: LIST
35612: PUSH
35613: LD_INT 1
35615: NEG
35616: PUSH
35617: LD_INT 1
35619: PUSH
35620: EMPTY
35621: LIST
35622: LIST
35623: PUSH
35624: LD_INT 2
35626: NEG
35627: PUSH
35628: LD_INT 0
35630: PUSH
35631: EMPTY
35632: LIST
35633: LIST
35634: PUSH
35635: LD_INT 2
35637: NEG
35638: PUSH
35639: LD_INT 1
35641: NEG
35642: PUSH
35643: EMPTY
35644: LIST
35645: LIST
35646: PUSH
35647: LD_INT 2
35649: NEG
35650: PUSH
35651: LD_INT 2
35653: NEG
35654: PUSH
35655: EMPTY
35656: LIST
35657: LIST
35658: PUSH
35659: LD_INT 2
35661: NEG
35662: PUSH
35663: LD_INT 3
35665: NEG
35666: PUSH
35667: EMPTY
35668: LIST
35669: LIST
35670: PUSH
35671: LD_INT 1
35673: NEG
35674: PUSH
35675: LD_INT 3
35677: NEG
35678: PUSH
35679: EMPTY
35680: LIST
35681: LIST
35682: PUSH
35683: LD_INT 1
35685: PUSH
35686: LD_INT 2
35688: NEG
35689: PUSH
35690: EMPTY
35691: LIST
35692: LIST
35693: PUSH
35694: LD_INT 2
35696: PUSH
35697: LD_INT 1
35699: NEG
35700: PUSH
35701: EMPTY
35702: LIST
35703: LIST
35704: PUSH
35705: EMPTY
35706: LIST
35707: LIST
35708: LIST
35709: LIST
35710: LIST
35711: LIST
35712: LIST
35713: LIST
35714: LIST
35715: LIST
35716: LIST
35717: LIST
35718: LIST
35719: LIST
35720: LIST
35721: LIST
35722: LIST
35723: LIST
35724: LIST
35725: LIST
35726: LIST
35727: LIST
35728: LIST
35729: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
35730: LD_ADDR_VAR 0 24
35734: PUSH
35735: LD_INT 0
35737: PUSH
35738: LD_INT 0
35740: PUSH
35741: EMPTY
35742: LIST
35743: LIST
35744: PUSH
35745: LD_INT 0
35747: PUSH
35748: LD_INT 1
35750: NEG
35751: PUSH
35752: EMPTY
35753: LIST
35754: LIST
35755: PUSH
35756: LD_INT 1
35758: PUSH
35759: LD_INT 0
35761: PUSH
35762: EMPTY
35763: LIST
35764: LIST
35765: PUSH
35766: LD_INT 1
35768: PUSH
35769: LD_INT 1
35771: PUSH
35772: EMPTY
35773: LIST
35774: LIST
35775: PUSH
35776: LD_INT 0
35778: PUSH
35779: LD_INT 1
35781: PUSH
35782: EMPTY
35783: LIST
35784: LIST
35785: PUSH
35786: LD_INT 1
35788: NEG
35789: PUSH
35790: LD_INT 0
35792: PUSH
35793: EMPTY
35794: LIST
35795: LIST
35796: PUSH
35797: LD_INT 1
35799: NEG
35800: PUSH
35801: LD_INT 1
35803: NEG
35804: PUSH
35805: EMPTY
35806: LIST
35807: LIST
35808: PUSH
35809: LD_INT 1
35811: NEG
35812: PUSH
35813: LD_INT 2
35815: NEG
35816: PUSH
35817: EMPTY
35818: LIST
35819: LIST
35820: PUSH
35821: LD_INT 0
35823: PUSH
35824: LD_INT 2
35826: NEG
35827: PUSH
35828: EMPTY
35829: LIST
35830: LIST
35831: PUSH
35832: LD_INT 1
35834: PUSH
35835: LD_INT 1
35837: NEG
35838: PUSH
35839: EMPTY
35840: LIST
35841: LIST
35842: PUSH
35843: LD_INT 2
35845: PUSH
35846: LD_INT 0
35848: PUSH
35849: EMPTY
35850: LIST
35851: LIST
35852: PUSH
35853: LD_INT 2
35855: PUSH
35856: LD_INT 1
35858: PUSH
35859: EMPTY
35860: LIST
35861: LIST
35862: PUSH
35863: LD_INT 2
35865: PUSH
35866: LD_INT 2
35868: PUSH
35869: EMPTY
35870: LIST
35871: LIST
35872: PUSH
35873: LD_INT 1
35875: PUSH
35876: LD_INT 2
35878: PUSH
35879: EMPTY
35880: LIST
35881: LIST
35882: PUSH
35883: LD_INT 0
35885: PUSH
35886: LD_INT 2
35888: PUSH
35889: EMPTY
35890: LIST
35891: LIST
35892: PUSH
35893: LD_INT 1
35895: NEG
35896: PUSH
35897: LD_INT 1
35899: PUSH
35900: EMPTY
35901: LIST
35902: LIST
35903: PUSH
35904: LD_INT 2
35906: NEG
35907: PUSH
35908: LD_INT 0
35910: PUSH
35911: EMPTY
35912: LIST
35913: LIST
35914: PUSH
35915: LD_INT 2
35917: NEG
35918: PUSH
35919: LD_INT 1
35921: NEG
35922: PUSH
35923: EMPTY
35924: LIST
35925: LIST
35926: PUSH
35927: LD_INT 2
35929: NEG
35930: PUSH
35931: LD_INT 2
35933: NEG
35934: PUSH
35935: EMPTY
35936: LIST
35937: LIST
35938: PUSH
35939: LD_INT 1
35941: PUSH
35942: LD_INT 2
35944: NEG
35945: PUSH
35946: EMPTY
35947: LIST
35948: LIST
35949: PUSH
35950: LD_INT 2
35952: PUSH
35953: LD_INT 1
35955: NEG
35956: PUSH
35957: EMPTY
35958: LIST
35959: LIST
35960: PUSH
35961: LD_INT 3
35963: PUSH
35964: LD_INT 1
35966: PUSH
35967: EMPTY
35968: LIST
35969: LIST
35970: PUSH
35971: LD_INT 3
35973: PUSH
35974: LD_INT 2
35976: PUSH
35977: EMPTY
35978: LIST
35979: LIST
35980: PUSH
35981: EMPTY
35982: LIST
35983: LIST
35984: LIST
35985: LIST
35986: LIST
35987: LIST
35988: LIST
35989: LIST
35990: LIST
35991: LIST
35992: LIST
35993: LIST
35994: LIST
35995: LIST
35996: LIST
35997: LIST
35998: LIST
35999: LIST
36000: LIST
36001: LIST
36002: LIST
36003: LIST
36004: LIST
36005: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
36006: LD_ADDR_VAR 0 25
36010: PUSH
36011: LD_INT 0
36013: PUSH
36014: LD_INT 0
36016: PUSH
36017: EMPTY
36018: LIST
36019: LIST
36020: PUSH
36021: LD_INT 0
36023: PUSH
36024: LD_INT 1
36026: NEG
36027: PUSH
36028: EMPTY
36029: LIST
36030: LIST
36031: PUSH
36032: LD_INT 1
36034: PUSH
36035: LD_INT 0
36037: PUSH
36038: EMPTY
36039: LIST
36040: LIST
36041: PUSH
36042: LD_INT 1
36044: PUSH
36045: LD_INT 1
36047: PUSH
36048: EMPTY
36049: LIST
36050: LIST
36051: PUSH
36052: LD_INT 0
36054: PUSH
36055: LD_INT 1
36057: PUSH
36058: EMPTY
36059: LIST
36060: LIST
36061: PUSH
36062: LD_INT 1
36064: NEG
36065: PUSH
36066: LD_INT 0
36068: PUSH
36069: EMPTY
36070: LIST
36071: LIST
36072: PUSH
36073: LD_INT 1
36075: NEG
36076: PUSH
36077: LD_INT 1
36079: NEG
36080: PUSH
36081: EMPTY
36082: LIST
36083: LIST
36084: PUSH
36085: LD_INT 1
36087: NEG
36088: PUSH
36089: LD_INT 2
36091: NEG
36092: PUSH
36093: EMPTY
36094: LIST
36095: LIST
36096: PUSH
36097: LD_INT 0
36099: PUSH
36100: LD_INT 2
36102: NEG
36103: PUSH
36104: EMPTY
36105: LIST
36106: LIST
36107: PUSH
36108: LD_INT 1
36110: PUSH
36111: LD_INT 1
36113: NEG
36114: PUSH
36115: EMPTY
36116: LIST
36117: LIST
36118: PUSH
36119: LD_INT 2
36121: PUSH
36122: LD_INT 0
36124: PUSH
36125: EMPTY
36126: LIST
36127: LIST
36128: PUSH
36129: LD_INT 2
36131: PUSH
36132: LD_INT 1
36134: PUSH
36135: EMPTY
36136: LIST
36137: LIST
36138: PUSH
36139: LD_INT 2
36141: PUSH
36142: LD_INT 2
36144: PUSH
36145: EMPTY
36146: LIST
36147: LIST
36148: PUSH
36149: LD_INT 1
36151: PUSH
36152: LD_INT 2
36154: PUSH
36155: EMPTY
36156: LIST
36157: LIST
36158: PUSH
36159: LD_INT 0
36161: PUSH
36162: LD_INT 2
36164: PUSH
36165: EMPTY
36166: LIST
36167: LIST
36168: PUSH
36169: LD_INT 1
36171: NEG
36172: PUSH
36173: LD_INT 1
36175: PUSH
36176: EMPTY
36177: LIST
36178: LIST
36179: PUSH
36180: LD_INT 2
36182: NEG
36183: PUSH
36184: LD_INT 0
36186: PUSH
36187: EMPTY
36188: LIST
36189: LIST
36190: PUSH
36191: LD_INT 2
36193: NEG
36194: PUSH
36195: LD_INT 1
36197: NEG
36198: PUSH
36199: EMPTY
36200: LIST
36201: LIST
36202: PUSH
36203: LD_INT 2
36205: NEG
36206: PUSH
36207: LD_INT 2
36209: NEG
36210: PUSH
36211: EMPTY
36212: LIST
36213: LIST
36214: PUSH
36215: LD_INT 3
36217: PUSH
36218: LD_INT 1
36220: PUSH
36221: EMPTY
36222: LIST
36223: LIST
36224: PUSH
36225: LD_INT 3
36227: PUSH
36228: LD_INT 2
36230: PUSH
36231: EMPTY
36232: LIST
36233: LIST
36234: PUSH
36235: LD_INT 2
36237: PUSH
36238: LD_INT 3
36240: PUSH
36241: EMPTY
36242: LIST
36243: LIST
36244: PUSH
36245: LD_INT 1
36247: PUSH
36248: LD_INT 3
36250: PUSH
36251: EMPTY
36252: LIST
36253: LIST
36254: PUSH
36255: EMPTY
36256: LIST
36257: LIST
36258: LIST
36259: LIST
36260: LIST
36261: LIST
36262: LIST
36263: LIST
36264: LIST
36265: LIST
36266: LIST
36267: LIST
36268: LIST
36269: LIST
36270: LIST
36271: LIST
36272: LIST
36273: LIST
36274: LIST
36275: LIST
36276: LIST
36277: LIST
36278: LIST
36279: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
36280: LD_ADDR_VAR 0 26
36284: PUSH
36285: LD_INT 0
36287: PUSH
36288: LD_INT 0
36290: PUSH
36291: EMPTY
36292: LIST
36293: LIST
36294: PUSH
36295: LD_INT 0
36297: PUSH
36298: LD_INT 1
36300: NEG
36301: PUSH
36302: EMPTY
36303: LIST
36304: LIST
36305: PUSH
36306: LD_INT 1
36308: PUSH
36309: LD_INT 0
36311: PUSH
36312: EMPTY
36313: LIST
36314: LIST
36315: PUSH
36316: LD_INT 1
36318: PUSH
36319: LD_INT 1
36321: PUSH
36322: EMPTY
36323: LIST
36324: LIST
36325: PUSH
36326: LD_INT 0
36328: PUSH
36329: LD_INT 1
36331: PUSH
36332: EMPTY
36333: LIST
36334: LIST
36335: PUSH
36336: LD_INT 1
36338: NEG
36339: PUSH
36340: LD_INT 0
36342: PUSH
36343: EMPTY
36344: LIST
36345: LIST
36346: PUSH
36347: LD_INT 1
36349: NEG
36350: PUSH
36351: LD_INT 1
36353: NEG
36354: PUSH
36355: EMPTY
36356: LIST
36357: LIST
36358: PUSH
36359: LD_INT 1
36361: NEG
36362: PUSH
36363: LD_INT 2
36365: NEG
36366: PUSH
36367: EMPTY
36368: LIST
36369: LIST
36370: PUSH
36371: LD_INT 0
36373: PUSH
36374: LD_INT 2
36376: NEG
36377: PUSH
36378: EMPTY
36379: LIST
36380: LIST
36381: PUSH
36382: LD_INT 1
36384: PUSH
36385: LD_INT 1
36387: NEG
36388: PUSH
36389: EMPTY
36390: LIST
36391: LIST
36392: PUSH
36393: LD_INT 2
36395: PUSH
36396: LD_INT 0
36398: PUSH
36399: EMPTY
36400: LIST
36401: LIST
36402: PUSH
36403: LD_INT 2
36405: PUSH
36406: LD_INT 1
36408: PUSH
36409: EMPTY
36410: LIST
36411: LIST
36412: PUSH
36413: LD_INT 2
36415: PUSH
36416: LD_INT 2
36418: PUSH
36419: EMPTY
36420: LIST
36421: LIST
36422: PUSH
36423: LD_INT 1
36425: PUSH
36426: LD_INT 2
36428: PUSH
36429: EMPTY
36430: LIST
36431: LIST
36432: PUSH
36433: LD_INT 0
36435: PUSH
36436: LD_INT 2
36438: PUSH
36439: EMPTY
36440: LIST
36441: LIST
36442: PUSH
36443: LD_INT 1
36445: NEG
36446: PUSH
36447: LD_INT 1
36449: PUSH
36450: EMPTY
36451: LIST
36452: LIST
36453: PUSH
36454: LD_INT 2
36456: NEG
36457: PUSH
36458: LD_INT 0
36460: PUSH
36461: EMPTY
36462: LIST
36463: LIST
36464: PUSH
36465: LD_INT 2
36467: NEG
36468: PUSH
36469: LD_INT 1
36471: NEG
36472: PUSH
36473: EMPTY
36474: LIST
36475: LIST
36476: PUSH
36477: LD_INT 2
36479: NEG
36480: PUSH
36481: LD_INT 2
36483: NEG
36484: PUSH
36485: EMPTY
36486: LIST
36487: LIST
36488: PUSH
36489: LD_INT 2
36491: PUSH
36492: LD_INT 3
36494: PUSH
36495: EMPTY
36496: LIST
36497: LIST
36498: PUSH
36499: LD_INT 1
36501: PUSH
36502: LD_INT 3
36504: PUSH
36505: EMPTY
36506: LIST
36507: LIST
36508: PUSH
36509: LD_INT 1
36511: NEG
36512: PUSH
36513: LD_INT 2
36515: PUSH
36516: EMPTY
36517: LIST
36518: LIST
36519: PUSH
36520: LD_INT 2
36522: NEG
36523: PUSH
36524: LD_INT 1
36526: PUSH
36527: EMPTY
36528: LIST
36529: LIST
36530: PUSH
36531: EMPTY
36532: LIST
36533: LIST
36534: LIST
36535: LIST
36536: LIST
36537: LIST
36538: LIST
36539: LIST
36540: LIST
36541: LIST
36542: LIST
36543: LIST
36544: LIST
36545: LIST
36546: LIST
36547: LIST
36548: LIST
36549: LIST
36550: LIST
36551: LIST
36552: LIST
36553: LIST
36554: LIST
36555: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
36556: LD_ADDR_VAR 0 27
36560: PUSH
36561: LD_INT 0
36563: PUSH
36564: LD_INT 0
36566: PUSH
36567: EMPTY
36568: LIST
36569: LIST
36570: PUSH
36571: LD_INT 0
36573: PUSH
36574: LD_INT 1
36576: NEG
36577: PUSH
36578: EMPTY
36579: LIST
36580: LIST
36581: PUSH
36582: LD_INT 1
36584: PUSH
36585: LD_INT 0
36587: PUSH
36588: EMPTY
36589: LIST
36590: LIST
36591: PUSH
36592: LD_INT 1
36594: PUSH
36595: LD_INT 1
36597: PUSH
36598: EMPTY
36599: LIST
36600: LIST
36601: PUSH
36602: LD_INT 0
36604: PUSH
36605: LD_INT 1
36607: PUSH
36608: EMPTY
36609: LIST
36610: LIST
36611: PUSH
36612: LD_INT 1
36614: NEG
36615: PUSH
36616: LD_INT 0
36618: PUSH
36619: EMPTY
36620: LIST
36621: LIST
36622: PUSH
36623: LD_INT 1
36625: NEG
36626: PUSH
36627: LD_INT 1
36629: NEG
36630: PUSH
36631: EMPTY
36632: LIST
36633: LIST
36634: PUSH
36635: LD_INT 1
36637: NEG
36638: PUSH
36639: LD_INT 2
36641: NEG
36642: PUSH
36643: EMPTY
36644: LIST
36645: LIST
36646: PUSH
36647: LD_INT 0
36649: PUSH
36650: LD_INT 2
36652: NEG
36653: PUSH
36654: EMPTY
36655: LIST
36656: LIST
36657: PUSH
36658: LD_INT 1
36660: PUSH
36661: LD_INT 1
36663: NEG
36664: PUSH
36665: EMPTY
36666: LIST
36667: LIST
36668: PUSH
36669: LD_INT 2
36671: PUSH
36672: LD_INT 0
36674: PUSH
36675: EMPTY
36676: LIST
36677: LIST
36678: PUSH
36679: LD_INT 2
36681: PUSH
36682: LD_INT 1
36684: PUSH
36685: EMPTY
36686: LIST
36687: LIST
36688: PUSH
36689: LD_INT 2
36691: PUSH
36692: LD_INT 2
36694: PUSH
36695: EMPTY
36696: LIST
36697: LIST
36698: PUSH
36699: LD_INT 1
36701: PUSH
36702: LD_INT 2
36704: PUSH
36705: EMPTY
36706: LIST
36707: LIST
36708: PUSH
36709: LD_INT 0
36711: PUSH
36712: LD_INT 2
36714: PUSH
36715: EMPTY
36716: LIST
36717: LIST
36718: PUSH
36719: LD_INT 1
36721: NEG
36722: PUSH
36723: LD_INT 1
36725: PUSH
36726: EMPTY
36727: LIST
36728: LIST
36729: PUSH
36730: LD_INT 2
36732: NEG
36733: PUSH
36734: LD_INT 0
36736: PUSH
36737: EMPTY
36738: LIST
36739: LIST
36740: PUSH
36741: LD_INT 2
36743: NEG
36744: PUSH
36745: LD_INT 1
36747: NEG
36748: PUSH
36749: EMPTY
36750: LIST
36751: LIST
36752: PUSH
36753: LD_INT 2
36755: NEG
36756: PUSH
36757: LD_INT 2
36759: NEG
36760: PUSH
36761: EMPTY
36762: LIST
36763: LIST
36764: PUSH
36765: LD_INT 1
36767: NEG
36768: PUSH
36769: LD_INT 2
36771: PUSH
36772: EMPTY
36773: LIST
36774: LIST
36775: PUSH
36776: LD_INT 2
36778: NEG
36779: PUSH
36780: LD_INT 1
36782: PUSH
36783: EMPTY
36784: LIST
36785: LIST
36786: PUSH
36787: LD_INT 3
36789: NEG
36790: PUSH
36791: LD_INT 1
36793: NEG
36794: PUSH
36795: EMPTY
36796: LIST
36797: LIST
36798: PUSH
36799: LD_INT 3
36801: NEG
36802: PUSH
36803: LD_INT 2
36805: NEG
36806: PUSH
36807: EMPTY
36808: LIST
36809: LIST
36810: PUSH
36811: EMPTY
36812: LIST
36813: LIST
36814: LIST
36815: LIST
36816: LIST
36817: LIST
36818: LIST
36819: LIST
36820: LIST
36821: LIST
36822: LIST
36823: LIST
36824: LIST
36825: LIST
36826: LIST
36827: LIST
36828: LIST
36829: LIST
36830: LIST
36831: LIST
36832: LIST
36833: LIST
36834: LIST
36835: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
36836: LD_ADDR_VAR 0 28
36840: PUSH
36841: LD_INT 0
36843: PUSH
36844: LD_INT 0
36846: PUSH
36847: EMPTY
36848: LIST
36849: LIST
36850: PUSH
36851: LD_INT 0
36853: PUSH
36854: LD_INT 1
36856: NEG
36857: PUSH
36858: EMPTY
36859: LIST
36860: LIST
36861: PUSH
36862: LD_INT 1
36864: PUSH
36865: LD_INT 0
36867: PUSH
36868: EMPTY
36869: LIST
36870: LIST
36871: PUSH
36872: LD_INT 1
36874: PUSH
36875: LD_INT 1
36877: PUSH
36878: EMPTY
36879: LIST
36880: LIST
36881: PUSH
36882: LD_INT 0
36884: PUSH
36885: LD_INT 1
36887: PUSH
36888: EMPTY
36889: LIST
36890: LIST
36891: PUSH
36892: LD_INT 1
36894: NEG
36895: PUSH
36896: LD_INT 0
36898: PUSH
36899: EMPTY
36900: LIST
36901: LIST
36902: PUSH
36903: LD_INT 1
36905: NEG
36906: PUSH
36907: LD_INT 1
36909: NEG
36910: PUSH
36911: EMPTY
36912: LIST
36913: LIST
36914: PUSH
36915: LD_INT 1
36917: NEG
36918: PUSH
36919: LD_INT 2
36921: NEG
36922: PUSH
36923: EMPTY
36924: LIST
36925: LIST
36926: PUSH
36927: LD_INT 0
36929: PUSH
36930: LD_INT 2
36932: NEG
36933: PUSH
36934: EMPTY
36935: LIST
36936: LIST
36937: PUSH
36938: LD_INT 1
36940: PUSH
36941: LD_INT 1
36943: NEG
36944: PUSH
36945: EMPTY
36946: LIST
36947: LIST
36948: PUSH
36949: LD_INT 2
36951: PUSH
36952: LD_INT 0
36954: PUSH
36955: EMPTY
36956: LIST
36957: LIST
36958: PUSH
36959: LD_INT 2
36961: PUSH
36962: LD_INT 1
36964: PUSH
36965: EMPTY
36966: LIST
36967: LIST
36968: PUSH
36969: LD_INT 2
36971: PUSH
36972: LD_INT 2
36974: PUSH
36975: EMPTY
36976: LIST
36977: LIST
36978: PUSH
36979: LD_INT 1
36981: PUSH
36982: LD_INT 2
36984: PUSH
36985: EMPTY
36986: LIST
36987: LIST
36988: PUSH
36989: LD_INT 0
36991: PUSH
36992: LD_INT 2
36994: PUSH
36995: EMPTY
36996: LIST
36997: LIST
36998: PUSH
36999: LD_INT 1
37001: NEG
37002: PUSH
37003: LD_INT 1
37005: PUSH
37006: EMPTY
37007: LIST
37008: LIST
37009: PUSH
37010: LD_INT 2
37012: NEG
37013: PUSH
37014: LD_INT 0
37016: PUSH
37017: EMPTY
37018: LIST
37019: LIST
37020: PUSH
37021: LD_INT 2
37023: NEG
37024: PUSH
37025: LD_INT 1
37027: NEG
37028: PUSH
37029: EMPTY
37030: LIST
37031: LIST
37032: PUSH
37033: LD_INT 2
37035: NEG
37036: PUSH
37037: LD_INT 2
37039: NEG
37040: PUSH
37041: EMPTY
37042: LIST
37043: LIST
37044: PUSH
37045: LD_INT 2
37047: NEG
37048: PUSH
37049: LD_INT 3
37051: NEG
37052: PUSH
37053: EMPTY
37054: LIST
37055: LIST
37056: PUSH
37057: LD_INT 1
37059: NEG
37060: PUSH
37061: LD_INT 3
37063: NEG
37064: PUSH
37065: EMPTY
37066: LIST
37067: LIST
37068: PUSH
37069: LD_INT 3
37071: NEG
37072: PUSH
37073: LD_INT 1
37075: NEG
37076: PUSH
37077: EMPTY
37078: LIST
37079: LIST
37080: PUSH
37081: LD_INT 3
37083: NEG
37084: PUSH
37085: LD_INT 2
37087: NEG
37088: PUSH
37089: EMPTY
37090: LIST
37091: LIST
37092: PUSH
37093: EMPTY
37094: LIST
37095: LIST
37096: LIST
37097: LIST
37098: LIST
37099: LIST
37100: LIST
37101: LIST
37102: LIST
37103: LIST
37104: LIST
37105: LIST
37106: LIST
37107: LIST
37108: LIST
37109: LIST
37110: LIST
37111: LIST
37112: LIST
37113: LIST
37114: LIST
37115: LIST
37116: LIST
37117: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
37118: LD_ADDR_VAR 0 29
37122: PUSH
37123: LD_INT 0
37125: PUSH
37126: LD_INT 0
37128: PUSH
37129: EMPTY
37130: LIST
37131: LIST
37132: PUSH
37133: LD_INT 0
37135: PUSH
37136: LD_INT 1
37138: NEG
37139: PUSH
37140: EMPTY
37141: LIST
37142: LIST
37143: PUSH
37144: LD_INT 1
37146: PUSH
37147: LD_INT 0
37149: PUSH
37150: EMPTY
37151: LIST
37152: LIST
37153: PUSH
37154: LD_INT 1
37156: PUSH
37157: LD_INT 1
37159: PUSH
37160: EMPTY
37161: LIST
37162: LIST
37163: PUSH
37164: LD_INT 0
37166: PUSH
37167: LD_INT 1
37169: PUSH
37170: EMPTY
37171: LIST
37172: LIST
37173: PUSH
37174: LD_INT 1
37176: NEG
37177: PUSH
37178: LD_INT 0
37180: PUSH
37181: EMPTY
37182: LIST
37183: LIST
37184: PUSH
37185: LD_INT 1
37187: NEG
37188: PUSH
37189: LD_INT 1
37191: NEG
37192: PUSH
37193: EMPTY
37194: LIST
37195: LIST
37196: PUSH
37197: LD_INT 1
37199: NEG
37200: PUSH
37201: LD_INT 2
37203: NEG
37204: PUSH
37205: EMPTY
37206: LIST
37207: LIST
37208: PUSH
37209: LD_INT 0
37211: PUSH
37212: LD_INT 2
37214: NEG
37215: PUSH
37216: EMPTY
37217: LIST
37218: LIST
37219: PUSH
37220: LD_INT 1
37222: PUSH
37223: LD_INT 1
37225: NEG
37226: PUSH
37227: EMPTY
37228: LIST
37229: LIST
37230: PUSH
37231: LD_INT 2
37233: PUSH
37234: LD_INT 0
37236: PUSH
37237: EMPTY
37238: LIST
37239: LIST
37240: PUSH
37241: LD_INT 2
37243: PUSH
37244: LD_INT 1
37246: PUSH
37247: EMPTY
37248: LIST
37249: LIST
37250: PUSH
37251: LD_INT 1
37253: PUSH
37254: LD_INT 2
37256: PUSH
37257: EMPTY
37258: LIST
37259: LIST
37260: PUSH
37261: LD_INT 0
37263: PUSH
37264: LD_INT 2
37266: PUSH
37267: EMPTY
37268: LIST
37269: LIST
37270: PUSH
37271: LD_INT 1
37273: NEG
37274: PUSH
37275: LD_INT 1
37277: PUSH
37278: EMPTY
37279: LIST
37280: LIST
37281: PUSH
37282: LD_INT 2
37284: NEG
37285: PUSH
37286: LD_INT 1
37288: NEG
37289: PUSH
37290: EMPTY
37291: LIST
37292: LIST
37293: PUSH
37294: LD_INT 2
37296: NEG
37297: PUSH
37298: LD_INT 2
37300: NEG
37301: PUSH
37302: EMPTY
37303: LIST
37304: LIST
37305: PUSH
37306: LD_INT 2
37308: NEG
37309: PUSH
37310: LD_INT 3
37312: NEG
37313: PUSH
37314: EMPTY
37315: LIST
37316: LIST
37317: PUSH
37318: LD_INT 2
37320: PUSH
37321: LD_INT 1
37323: NEG
37324: PUSH
37325: EMPTY
37326: LIST
37327: LIST
37328: PUSH
37329: LD_INT 3
37331: PUSH
37332: LD_INT 1
37334: PUSH
37335: EMPTY
37336: LIST
37337: LIST
37338: PUSH
37339: LD_INT 1
37341: PUSH
37342: LD_INT 3
37344: PUSH
37345: EMPTY
37346: LIST
37347: LIST
37348: PUSH
37349: LD_INT 1
37351: NEG
37352: PUSH
37353: LD_INT 2
37355: PUSH
37356: EMPTY
37357: LIST
37358: LIST
37359: PUSH
37360: LD_INT 3
37362: NEG
37363: PUSH
37364: LD_INT 2
37366: NEG
37367: PUSH
37368: EMPTY
37369: LIST
37370: LIST
37371: PUSH
37372: EMPTY
37373: LIST
37374: LIST
37375: LIST
37376: LIST
37377: LIST
37378: LIST
37379: LIST
37380: LIST
37381: LIST
37382: LIST
37383: LIST
37384: LIST
37385: LIST
37386: LIST
37387: LIST
37388: LIST
37389: LIST
37390: LIST
37391: LIST
37392: LIST
37393: LIST
37394: LIST
37395: LIST
37396: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37397: LD_ADDR_VAR 0 30
37401: PUSH
37402: LD_INT 0
37404: PUSH
37405: LD_INT 0
37407: PUSH
37408: EMPTY
37409: LIST
37410: LIST
37411: PUSH
37412: LD_INT 0
37414: PUSH
37415: LD_INT 1
37417: NEG
37418: PUSH
37419: EMPTY
37420: LIST
37421: LIST
37422: PUSH
37423: LD_INT 1
37425: PUSH
37426: LD_INT 0
37428: PUSH
37429: EMPTY
37430: LIST
37431: LIST
37432: PUSH
37433: LD_INT 1
37435: PUSH
37436: LD_INT 1
37438: PUSH
37439: EMPTY
37440: LIST
37441: LIST
37442: PUSH
37443: LD_INT 0
37445: PUSH
37446: LD_INT 1
37448: PUSH
37449: EMPTY
37450: LIST
37451: LIST
37452: PUSH
37453: LD_INT 1
37455: NEG
37456: PUSH
37457: LD_INT 0
37459: PUSH
37460: EMPTY
37461: LIST
37462: LIST
37463: PUSH
37464: LD_INT 1
37466: NEG
37467: PUSH
37468: LD_INT 1
37470: NEG
37471: PUSH
37472: EMPTY
37473: LIST
37474: LIST
37475: PUSH
37476: LD_INT 1
37478: NEG
37479: PUSH
37480: LD_INT 2
37482: NEG
37483: PUSH
37484: EMPTY
37485: LIST
37486: LIST
37487: PUSH
37488: LD_INT 0
37490: PUSH
37491: LD_INT 2
37493: NEG
37494: PUSH
37495: EMPTY
37496: LIST
37497: LIST
37498: PUSH
37499: LD_INT 1
37501: PUSH
37502: LD_INT 1
37504: NEG
37505: PUSH
37506: EMPTY
37507: LIST
37508: LIST
37509: PUSH
37510: LD_INT 2
37512: PUSH
37513: LD_INT 0
37515: PUSH
37516: EMPTY
37517: LIST
37518: LIST
37519: PUSH
37520: LD_INT 2
37522: PUSH
37523: LD_INT 1
37525: PUSH
37526: EMPTY
37527: LIST
37528: LIST
37529: PUSH
37530: LD_INT 2
37532: PUSH
37533: LD_INT 2
37535: PUSH
37536: EMPTY
37537: LIST
37538: LIST
37539: PUSH
37540: LD_INT 1
37542: PUSH
37543: LD_INT 2
37545: PUSH
37546: EMPTY
37547: LIST
37548: LIST
37549: PUSH
37550: LD_INT 1
37552: NEG
37553: PUSH
37554: LD_INT 1
37556: PUSH
37557: EMPTY
37558: LIST
37559: LIST
37560: PUSH
37561: LD_INT 2
37563: NEG
37564: PUSH
37565: LD_INT 0
37567: PUSH
37568: EMPTY
37569: LIST
37570: LIST
37571: PUSH
37572: LD_INT 2
37574: NEG
37575: PUSH
37576: LD_INT 1
37578: NEG
37579: PUSH
37580: EMPTY
37581: LIST
37582: LIST
37583: PUSH
37584: LD_INT 1
37586: NEG
37587: PUSH
37588: LD_INT 3
37590: NEG
37591: PUSH
37592: EMPTY
37593: LIST
37594: LIST
37595: PUSH
37596: LD_INT 1
37598: PUSH
37599: LD_INT 2
37601: NEG
37602: PUSH
37603: EMPTY
37604: LIST
37605: LIST
37606: PUSH
37607: LD_INT 3
37609: PUSH
37610: LD_INT 2
37612: PUSH
37613: EMPTY
37614: LIST
37615: LIST
37616: PUSH
37617: LD_INT 2
37619: PUSH
37620: LD_INT 3
37622: PUSH
37623: EMPTY
37624: LIST
37625: LIST
37626: PUSH
37627: LD_INT 2
37629: NEG
37630: PUSH
37631: LD_INT 1
37633: PUSH
37634: EMPTY
37635: LIST
37636: LIST
37637: PUSH
37638: LD_INT 3
37640: NEG
37641: PUSH
37642: LD_INT 1
37644: NEG
37645: PUSH
37646: EMPTY
37647: LIST
37648: LIST
37649: PUSH
37650: EMPTY
37651: LIST
37652: LIST
37653: LIST
37654: LIST
37655: LIST
37656: LIST
37657: LIST
37658: LIST
37659: LIST
37660: LIST
37661: LIST
37662: LIST
37663: LIST
37664: LIST
37665: LIST
37666: LIST
37667: LIST
37668: LIST
37669: LIST
37670: LIST
37671: LIST
37672: LIST
37673: LIST
37674: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
37675: LD_ADDR_VAR 0 31
37679: PUSH
37680: LD_INT 0
37682: PUSH
37683: LD_INT 0
37685: PUSH
37686: EMPTY
37687: LIST
37688: LIST
37689: PUSH
37690: LD_INT 0
37692: PUSH
37693: LD_INT 1
37695: NEG
37696: PUSH
37697: EMPTY
37698: LIST
37699: LIST
37700: PUSH
37701: LD_INT 1
37703: PUSH
37704: LD_INT 0
37706: PUSH
37707: EMPTY
37708: LIST
37709: LIST
37710: PUSH
37711: LD_INT 1
37713: PUSH
37714: LD_INT 1
37716: PUSH
37717: EMPTY
37718: LIST
37719: LIST
37720: PUSH
37721: LD_INT 0
37723: PUSH
37724: LD_INT 1
37726: PUSH
37727: EMPTY
37728: LIST
37729: LIST
37730: PUSH
37731: LD_INT 1
37733: NEG
37734: PUSH
37735: LD_INT 0
37737: PUSH
37738: EMPTY
37739: LIST
37740: LIST
37741: PUSH
37742: LD_INT 1
37744: NEG
37745: PUSH
37746: LD_INT 1
37748: NEG
37749: PUSH
37750: EMPTY
37751: LIST
37752: LIST
37753: PUSH
37754: LD_INT 1
37756: NEG
37757: PUSH
37758: LD_INT 2
37760: NEG
37761: PUSH
37762: EMPTY
37763: LIST
37764: LIST
37765: PUSH
37766: LD_INT 1
37768: PUSH
37769: LD_INT 1
37771: NEG
37772: PUSH
37773: EMPTY
37774: LIST
37775: LIST
37776: PUSH
37777: LD_INT 2
37779: PUSH
37780: LD_INT 0
37782: PUSH
37783: EMPTY
37784: LIST
37785: LIST
37786: PUSH
37787: LD_INT 2
37789: PUSH
37790: LD_INT 1
37792: PUSH
37793: EMPTY
37794: LIST
37795: LIST
37796: PUSH
37797: LD_INT 2
37799: PUSH
37800: LD_INT 2
37802: PUSH
37803: EMPTY
37804: LIST
37805: LIST
37806: PUSH
37807: LD_INT 1
37809: PUSH
37810: LD_INT 2
37812: PUSH
37813: EMPTY
37814: LIST
37815: LIST
37816: PUSH
37817: LD_INT 0
37819: PUSH
37820: LD_INT 2
37822: PUSH
37823: EMPTY
37824: LIST
37825: LIST
37826: PUSH
37827: LD_INT 1
37829: NEG
37830: PUSH
37831: LD_INT 1
37833: PUSH
37834: EMPTY
37835: LIST
37836: LIST
37837: PUSH
37838: LD_INT 2
37840: NEG
37841: PUSH
37842: LD_INT 1
37844: NEG
37845: PUSH
37846: EMPTY
37847: LIST
37848: LIST
37849: PUSH
37850: LD_INT 2
37852: NEG
37853: PUSH
37854: LD_INT 2
37856: NEG
37857: PUSH
37858: EMPTY
37859: LIST
37860: LIST
37861: PUSH
37862: LD_INT 2
37864: NEG
37865: PUSH
37866: LD_INT 3
37868: NEG
37869: PUSH
37870: EMPTY
37871: LIST
37872: LIST
37873: PUSH
37874: LD_INT 2
37876: PUSH
37877: LD_INT 1
37879: NEG
37880: PUSH
37881: EMPTY
37882: LIST
37883: LIST
37884: PUSH
37885: LD_INT 3
37887: PUSH
37888: LD_INT 1
37890: PUSH
37891: EMPTY
37892: LIST
37893: LIST
37894: PUSH
37895: LD_INT 1
37897: PUSH
37898: LD_INT 3
37900: PUSH
37901: EMPTY
37902: LIST
37903: LIST
37904: PUSH
37905: LD_INT 1
37907: NEG
37908: PUSH
37909: LD_INT 2
37911: PUSH
37912: EMPTY
37913: LIST
37914: LIST
37915: PUSH
37916: LD_INT 3
37918: NEG
37919: PUSH
37920: LD_INT 2
37922: NEG
37923: PUSH
37924: EMPTY
37925: LIST
37926: LIST
37927: PUSH
37928: EMPTY
37929: LIST
37930: LIST
37931: LIST
37932: LIST
37933: LIST
37934: LIST
37935: LIST
37936: LIST
37937: LIST
37938: LIST
37939: LIST
37940: LIST
37941: LIST
37942: LIST
37943: LIST
37944: LIST
37945: LIST
37946: LIST
37947: LIST
37948: LIST
37949: LIST
37950: LIST
37951: LIST
37952: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37953: LD_ADDR_VAR 0 32
37957: PUSH
37958: LD_INT 0
37960: PUSH
37961: LD_INT 0
37963: PUSH
37964: EMPTY
37965: LIST
37966: LIST
37967: PUSH
37968: LD_INT 0
37970: PUSH
37971: LD_INT 1
37973: NEG
37974: PUSH
37975: EMPTY
37976: LIST
37977: LIST
37978: PUSH
37979: LD_INT 1
37981: PUSH
37982: LD_INT 0
37984: PUSH
37985: EMPTY
37986: LIST
37987: LIST
37988: PUSH
37989: LD_INT 1
37991: PUSH
37992: LD_INT 1
37994: PUSH
37995: EMPTY
37996: LIST
37997: LIST
37998: PUSH
37999: LD_INT 0
38001: PUSH
38002: LD_INT 1
38004: PUSH
38005: EMPTY
38006: LIST
38007: LIST
38008: PUSH
38009: LD_INT 1
38011: NEG
38012: PUSH
38013: LD_INT 0
38015: PUSH
38016: EMPTY
38017: LIST
38018: LIST
38019: PUSH
38020: LD_INT 1
38022: NEG
38023: PUSH
38024: LD_INT 1
38026: NEG
38027: PUSH
38028: EMPTY
38029: LIST
38030: LIST
38031: PUSH
38032: LD_INT 1
38034: NEG
38035: PUSH
38036: LD_INT 2
38038: NEG
38039: PUSH
38040: EMPTY
38041: LIST
38042: LIST
38043: PUSH
38044: LD_INT 0
38046: PUSH
38047: LD_INT 2
38049: NEG
38050: PUSH
38051: EMPTY
38052: LIST
38053: LIST
38054: PUSH
38055: LD_INT 1
38057: PUSH
38058: LD_INT 1
38060: NEG
38061: PUSH
38062: EMPTY
38063: LIST
38064: LIST
38065: PUSH
38066: LD_INT 2
38068: PUSH
38069: LD_INT 1
38071: PUSH
38072: EMPTY
38073: LIST
38074: LIST
38075: PUSH
38076: LD_INT 2
38078: PUSH
38079: LD_INT 2
38081: PUSH
38082: EMPTY
38083: LIST
38084: LIST
38085: PUSH
38086: LD_INT 1
38088: PUSH
38089: LD_INT 2
38091: PUSH
38092: EMPTY
38093: LIST
38094: LIST
38095: PUSH
38096: LD_INT 0
38098: PUSH
38099: LD_INT 2
38101: PUSH
38102: EMPTY
38103: LIST
38104: LIST
38105: PUSH
38106: LD_INT 1
38108: NEG
38109: PUSH
38110: LD_INT 1
38112: PUSH
38113: EMPTY
38114: LIST
38115: LIST
38116: PUSH
38117: LD_INT 2
38119: NEG
38120: PUSH
38121: LD_INT 0
38123: PUSH
38124: EMPTY
38125: LIST
38126: LIST
38127: PUSH
38128: LD_INT 2
38130: NEG
38131: PUSH
38132: LD_INT 1
38134: NEG
38135: PUSH
38136: EMPTY
38137: LIST
38138: LIST
38139: PUSH
38140: LD_INT 1
38142: NEG
38143: PUSH
38144: LD_INT 3
38146: NEG
38147: PUSH
38148: EMPTY
38149: LIST
38150: LIST
38151: PUSH
38152: LD_INT 1
38154: PUSH
38155: LD_INT 2
38157: NEG
38158: PUSH
38159: EMPTY
38160: LIST
38161: LIST
38162: PUSH
38163: LD_INT 3
38165: PUSH
38166: LD_INT 2
38168: PUSH
38169: EMPTY
38170: LIST
38171: LIST
38172: PUSH
38173: LD_INT 2
38175: PUSH
38176: LD_INT 3
38178: PUSH
38179: EMPTY
38180: LIST
38181: LIST
38182: PUSH
38183: LD_INT 2
38185: NEG
38186: PUSH
38187: LD_INT 1
38189: PUSH
38190: EMPTY
38191: LIST
38192: LIST
38193: PUSH
38194: LD_INT 3
38196: NEG
38197: PUSH
38198: LD_INT 1
38200: NEG
38201: PUSH
38202: EMPTY
38203: LIST
38204: LIST
38205: PUSH
38206: EMPTY
38207: LIST
38208: LIST
38209: LIST
38210: LIST
38211: LIST
38212: LIST
38213: LIST
38214: LIST
38215: LIST
38216: LIST
38217: LIST
38218: LIST
38219: LIST
38220: LIST
38221: LIST
38222: LIST
38223: LIST
38224: LIST
38225: LIST
38226: LIST
38227: LIST
38228: LIST
38229: LIST
38230: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38231: LD_ADDR_VAR 0 33
38235: PUSH
38236: LD_INT 0
38238: PUSH
38239: LD_INT 0
38241: PUSH
38242: EMPTY
38243: LIST
38244: LIST
38245: PUSH
38246: LD_INT 0
38248: PUSH
38249: LD_INT 1
38251: NEG
38252: PUSH
38253: EMPTY
38254: LIST
38255: LIST
38256: PUSH
38257: LD_INT 1
38259: PUSH
38260: LD_INT 0
38262: PUSH
38263: EMPTY
38264: LIST
38265: LIST
38266: PUSH
38267: LD_INT 1
38269: PUSH
38270: LD_INT 1
38272: PUSH
38273: EMPTY
38274: LIST
38275: LIST
38276: PUSH
38277: LD_INT 0
38279: PUSH
38280: LD_INT 1
38282: PUSH
38283: EMPTY
38284: LIST
38285: LIST
38286: PUSH
38287: LD_INT 1
38289: NEG
38290: PUSH
38291: LD_INT 0
38293: PUSH
38294: EMPTY
38295: LIST
38296: LIST
38297: PUSH
38298: LD_INT 1
38300: NEG
38301: PUSH
38302: LD_INT 1
38304: NEG
38305: PUSH
38306: EMPTY
38307: LIST
38308: LIST
38309: PUSH
38310: LD_INT 1
38312: NEG
38313: PUSH
38314: LD_INT 2
38316: NEG
38317: PUSH
38318: EMPTY
38319: LIST
38320: LIST
38321: PUSH
38322: LD_INT 1
38324: PUSH
38325: LD_INT 1
38327: NEG
38328: PUSH
38329: EMPTY
38330: LIST
38331: LIST
38332: PUSH
38333: LD_INT 2
38335: PUSH
38336: LD_INT 0
38338: PUSH
38339: EMPTY
38340: LIST
38341: LIST
38342: PUSH
38343: LD_INT 2
38345: PUSH
38346: LD_INT 1
38348: PUSH
38349: EMPTY
38350: LIST
38351: LIST
38352: PUSH
38353: LD_INT 1
38355: PUSH
38356: LD_INT 2
38358: PUSH
38359: EMPTY
38360: LIST
38361: LIST
38362: PUSH
38363: LD_INT 0
38365: PUSH
38366: LD_INT 2
38368: PUSH
38369: EMPTY
38370: LIST
38371: LIST
38372: PUSH
38373: LD_INT 1
38375: NEG
38376: PUSH
38377: LD_INT 1
38379: PUSH
38380: EMPTY
38381: LIST
38382: LIST
38383: PUSH
38384: LD_INT 2
38386: NEG
38387: PUSH
38388: LD_INT 0
38390: PUSH
38391: EMPTY
38392: LIST
38393: LIST
38394: PUSH
38395: LD_INT 2
38397: NEG
38398: PUSH
38399: LD_INT 1
38401: NEG
38402: PUSH
38403: EMPTY
38404: LIST
38405: LIST
38406: PUSH
38407: LD_INT 2
38409: NEG
38410: PUSH
38411: LD_INT 2
38413: NEG
38414: PUSH
38415: EMPTY
38416: LIST
38417: LIST
38418: PUSH
38419: LD_INT 2
38421: NEG
38422: PUSH
38423: LD_INT 3
38425: NEG
38426: PUSH
38427: EMPTY
38428: LIST
38429: LIST
38430: PUSH
38431: LD_INT 2
38433: PUSH
38434: LD_INT 1
38436: NEG
38437: PUSH
38438: EMPTY
38439: LIST
38440: LIST
38441: PUSH
38442: LD_INT 3
38444: PUSH
38445: LD_INT 1
38447: PUSH
38448: EMPTY
38449: LIST
38450: LIST
38451: PUSH
38452: LD_INT 1
38454: PUSH
38455: LD_INT 3
38457: PUSH
38458: EMPTY
38459: LIST
38460: LIST
38461: PUSH
38462: LD_INT 1
38464: NEG
38465: PUSH
38466: LD_INT 2
38468: PUSH
38469: EMPTY
38470: LIST
38471: LIST
38472: PUSH
38473: LD_INT 3
38475: NEG
38476: PUSH
38477: LD_INT 2
38479: NEG
38480: PUSH
38481: EMPTY
38482: LIST
38483: LIST
38484: PUSH
38485: EMPTY
38486: LIST
38487: LIST
38488: LIST
38489: LIST
38490: LIST
38491: LIST
38492: LIST
38493: LIST
38494: LIST
38495: LIST
38496: LIST
38497: LIST
38498: LIST
38499: LIST
38500: LIST
38501: LIST
38502: LIST
38503: LIST
38504: LIST
38505: LIST
38506: LIST
38507: LIST
38508: LIST
38509: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38510: LD_ADDR_VAR 0 34
38514: PUSH
38515: LD_INT 0
38517: PUSH
38518: LD_INT 0
38520: PUSH
38521: EMPTY
38522: LIST
38523: LIST
38524: PUSH
38525: LD_INT 0
38527: PUSH
38528: LD_INT 1
38530: NEG
38531: PUSH
38532: EMPTY
38533: LIST
38534: LIST
38535: PUSH
38536: LD_INT 1
38538: PUSH
38539: LD_INT 0
38541: PUSH
38542: EMPTY
38543: LIST
38544: LIST
38545: PUSH
38546: LD_INT 1
38548: PUSH
38549: LD_INT 1
38551: PUSH
38552: EMPTY
38553: LIST
38554: LIST
38555: PUSH
38556: LD_INT 0
38558: PUSH
38559: LD_INT 1
38561: PUSH
38562: EMPTY
38563: LIST
38564: LIST
38565: PUSH
38566: LD_INT 1
38568: NEG
38569: PUSH
38570: LD_INT 0
38572: PUSH
38573: EMPTY
38574: LIST
38575: LIST
38576: PUSH
38577: LD_INT 1
38579: NEG
38580: PUSH
38581: LD_INT 1
38583: NEG
38584: PUSH
38585: EMPTY
38586: LIST
38587: LIST
38588: PUSH
38589: LD_INT 1
38591: NEG
38592: PUSH
38593: LD_INT 2
38595: NEG
38596: PUSH
38597: EMPTY
38598: LIST
38599: LIST
38600: PUSH
38601: LD_INT 0
38603: PUSH
38604: LD_INT 2
38606: NEG
38607: PUSH
38608: EMPTY
38609: LIST
38610: LIST
38611: PUSH
38612: LD_INT 1
38614: PUSH
38615: LD_INT 1
38617: NEG
38618: PUSH
38619: EMPTY
38620: LIST
38621: LIST
38622: PUSH
38623: LD_INT 2
38625: PUSH
38626: LD_INT 1
38628: PUSH
38629: EMPTY
38630: LIST
38631: LIST
38632: PUSH
38633: LD_INT 2
38635: PUSH
38636: LD_INT 2
38638: PUSH
38639: EMPTY
38640: LIST
38641: LIST
38642: PUSH
38643: LD_INT 1
38645: PUSH
38646: LD_INT 2
38648: PUSH
38649: EMPTY
38650: LIST
38651: LIST
38652: PUSH
38653: LD_INT 1
38655: NEG
38656: PUSH
38657: LD_INT 1
38659: PUSH
38660: EMPTY
38661: LIST
38662: LIST
38663: PUSH
38664: LD_INT 2
38666: NEG
38667: PUSH
38668: LD_INT 0
38670: PUSH
38671: EMPTY
38672: LIST
38673: LIST
38674: PUSH
38675: LD_INT 2
38677: NEG
38678: PUSH
38679: LD_INT 1
38681: NEG
38682: PUSH
38683: EMPTY
38684: LIST
38685: LIST
38686: PUSH
38687: LD_INT 2
38689: NEG
38690: PUSH
38691: LD_INT 2
38693: NEG
38694: PUSH
38695: EMPTY
38696: LIST
38697: LIST
38698: PUSH
38699: LD_INT 1
38701: NEG
38702: PUSH
38703: LD_INT 3
38705: NEG
38706: PUSH
38707: EMPTY
38708: LIST
38709: LIST
38710: PUSH
38711: LD_INT 1
38713: PUSH
38714: LD_INT 2
38716: NEG
38717: PUSH
38718: EMPTY
38719: LIST
38720: LIST
38721: PUSH
38722: LD_INT 3
38724: PUSH
38725: LD_INT 2
38727: PUSH
38728: EMPTY
38729: LIST
38730: LIST
38731: PUSH
38732: LD_INT 2
38734: PUSH
38735: LD_INT 3
38737: PUSH
38738: EMPTY
38739: LIST
38740: LIST
38741: PUSH
38742: LD_INT 2
38744: NEG
38745: PUSH
38746: LD_INT 1
38748: PUSH
38749: EMPTY
38750: LIST
38751: LIST
38752: PUSH
38753: LD_INT 3
38755: NEG
38756: PUSH
38757: LD_INT 1
38759: NEG
38760: PUSH
38761: EMPTY
38762: LIST
38763: LIST
38764: PUSH
38765: EMPTY
38766: LIST
38767: LIST
38768: LIST
38769: LIST
38770: LIST
38771: LIST
38772: LIST
38773: LIST
38774: LIST
38775: LIST
38776: LIST
38777: LIST
38778: LIST
38779: LIST
38780: LIST
38781: LIST
38782: LIST
38783: LIST
38784: LIST
38785: LIST
38786: LIST
38787: LIST
38788: LIST
38789: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
38790: LD_ADDR_VAR 0 35
38794: PUSH
38795: LD_INT 0
38797: PUSH
38798: LD_INT 0
38800: PUSH
38801: EMPTY
38802: LIST
38803: LIST
38804: PUSH
38805: LD_INT 0
38807: PUSH
38808: LD_INT 1
38810: NEG
38811: PUSH
38812: EMPTY
38813: LIST
38814: LIST
38815: PUSH
38816: LD_INT 1
38818: PUSH
38819: LD_INT 0
38821: PUSH
38822: EMPTY
38823: LIST
38824: LIST
38825: PUSH
38826: LD_INT 1
38828: PUSH
38829: LD_INT 1
38831: PUSH
38832: EMPTY
38833: LIST
38834: LIST
38835: PUSH
38836: LD_INT 0
38838: PUSH
38839: LD_INT 1
38841: PUSH
38842: EMPTY
38843: LIST
38844: LIST
38845: PUSH
38846: LD_INT 1
38848: NEG
38849: PUSH
38850: LD_INT 0
38852: PUSH
38853: EMPTY
38854: LIST
38855: LIST
38856: PUSH
38857: LD_INT 1
38859: NEG
38860: PUSH
38861: LD_INT 1
38863: NEG
38864: PUSH
38865: EMPTY
38866: LIST
38867: LIST
38868: PUSH
38869: LD_INT 2
38871: PUSH
38872: LD_INT 1
38874: PUSH
38875: EMPTY
38876: LIST
38877: LIST
38878: PUSH
38879: LD_INT 2
38881: NEG
38882: PUSH
38883: LD_INT 1
38885: NEG
38886: PUSH
38887: EMPTY
38888: LIST
38889: LIST
38890: PUSH
38891: EMPTY
38892: LIST
38893: LIST
38894: LIST
38895: LIST
38896: LIST
38897: LIST
38898: LIST
38899: LIST
38900: LIST
38901: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
38902: LD_ADDR_VAR 0 36
38906: PUSH
38907: LD_INT 0
38909: PUSH
38910: LD_INT 0
38912: PUSH
38913: EMPTY
38914: LIST
38915: LIST
38916: PUSH
38917: LD_INT 0
38919: PUSH
38920: LD_INT 1
38922: NEG
38923: PUSH
38924: EMPTY
38925: LIST
38926: LIST
38927: PUSH
38928: LD_INT 1
38930: PUSH
38931: LD_INT 0
38933: PUSH
38934: EMPTY
38935: LIST
38936: LIST
38937: PUSH
38938: LD_INT 1
38940: PUSH
38941: LD_INT 1
38943: PUSH
38944: EMPTY
38945: LIST
38946: LIST
38947: PUSH
38948: LD_INT 0
38950: PUSH
38951: LD_INT 1
38953: PUSH
38954: EMPTY
38955: LIST
38956: LIST
38957: PUSH
38958: LD_INT 1
38960: NEG
38961: PUSH
38962: LD_INT 0
38964: PUSH
38965: EMPTY
38966: LIST
38967: LIST
38968: PUSH
38969: LD_INT 1
38971: NEG
38972: PUSH
38973: LD_INT 1
38975: NEG
38976: PUSH
38977: EMPTY
38978: LIST
38979: LIST
38980: PUSH
38981: LD_INT 1
38983: NEG
38984: PUSH
38985: LD_INT 2
38987: NEG
38988: PUSH
38989: EMPTY
38990: LIST
38991: LIST
38992: PUSH
38993: LD_INT 1
38995: PUSH
38996: LD_INT 2
38998: PUSH
38999: EMPTY
39000: LIST
39001: LIST
39002: PUSH
39003: EMPTY
39004: LIST
39005: LIST
39006: LIST
39007: LIST
39008: LIST
39009: LIST
39010: LIST
39011: LIST
39012: LIST
39013: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
39014: LD_ADDR_VAR 0 37
39018: PUSH
39019: LD_INT 0
39021: PUSH
39022: LD_INT 0
39024: PUSH
39025: EMPTY
39026: LIST
39027: LIST
39028: PUSH
39029: LD_INT 0
39031: PUSH
39032: LD_INT 1
39034: NEG
39035: PUSH
39036: EMPTY
39037: LIST
39038: LIST
39039: PUSH
39040: LD_INT 1
39042: PUSH
39043: LD_INT 0
39045: PUSH
39046: EMPTY
39047: LIST
39048: LIST
39049: PUSH
39050: LD_INT 1
39052: PUSH
39053: LD_INT 1
39055: PUSH
39056: EMPTY
39057: LIST
39058: LIST
39059: PUSH
39060: LD_INT 0
39062: PUSH
39063: LD_INT 1
39065: PUSH
39066: EMPTY
39067: LIST
39068: LIST
39069: PUSH
39070: LD_INT 1
39072: NEG
39073: PUSH
39074: LD_INT 0
39076: PUSH
39077: EMPTY
39078: LIST
39079: LIST
39080: PUSH
39081: LD_INT 1
39083: NEG
39084: PUSH
39085: LD_INT 1
39087: NEG
39088: PUSH
39089: EMPTY
39090: LIST
39091: LIST
39092: PUSH
39093: LD_INT 1
39095: PUSH
39096: LD_INT 1
39098: NEG
39099: PUSH
39100: EMPTY
39101: LIST
39102: LIST
39103: PUSH
39104: LD_INT 1
39106: NEG
39107: PUSH
39108: LD_INT 1
39110: PUSH
39111: EMPTY
39112: LIST
39113: LIST
39114: PUSH
39115: EMPTY
39116: LIST
39117: LIST
39118: LIST
39119: LIST
39120: LIST
39121: LIST
39122: LIST
39123: LIST
39124: LIST
39125: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
39126: LD_ADDR_VAR 0 38
39130: PUSH
39131: LD_INT 0
39133: PUSH
39134: LD_INT 0
39136: PUSH
39137: EMPTY
39138: LIST
39139: LIST
39140: PUSH
39141: LD_INT 0
39143: PUSH
39144: LD_INT 1
39146: NEG
39147: PUSH
39148: EMPTY
39149: LIST
39150: LIST
39151: PUSH
39152: LD_INT 1
39154: PUSH
39155: LD_INT 0
39157: PUSH
39158: EMPTY
39159: LIST
39160: LIST
39161: PUSH
39162: LD_INT 1
39164: PUSH
39165: LD_INT 1
39167: PUSH
39168: EMPTY
39169: LIST
39170: LIST
39171: PUSH
39172: LD_INT 0
39174: PUSH
39175: LD_INT 1
39177: PUSH
39178: EMPTY
39179: LIST
39180: LIST
39181: PUSH
39182: LD_INT 1
39184: NEG
39185: PUSH
39186: LD_INT 0
39188: PUSH
39189: EMPTY
39190: LIST
39191: LIST
39192: PUSH
39193: LD_INT 1
39195: NEG
39196: PUSH
39197: LD_INT 1
39199: NEG
39200: PUSH
39201: EMPTY
39202: LIST
39203: LIST
39204: PUSH
39205: LD_INT 2
39207: PUSH
39208: LD_INT 1
39210: PUSH
39211: EMPTY
39212: LIST
39213: LIST
39214: PUSH
39215: LD_INT 2
39217: NEG
39218: PUSH
39219: LD_INT 1
39221: NEG
39222: PUSH
39223: EMPTY
39224: LIST
39225: LIST
39226: PUSH
39227: EMPTY
39228: LIST
39229: LIST
39230: LIST
39231: LIST
39232: LIST
39233: LIST
39234: LIST
39235: LIST
39236: LIST
39237: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
39238: LD_ADDR_VAR 0 39
39242: PUSH
39243: LD_INT 0
39245: PUSH
39246: LD_INT 0
39248: PUSH
39249: EMPTY
39250: LIST
39251: LIST
39252: PUSH
39253: LD_INT 0
39255: PUSH
39256: LD_INT 1
39258: NEG
39259: PUSH
39260: EMPTY
39261: LIST
39262: LIST
39263: PUSH
39264: LD_INT 1
39266: PUSH
39267: LD_INT 0
39269: PUSH
39270: EMPTY
39271: LIST
39272: LIST
39273: PUSH
39274: LD_INT 1
39276: PUSH
39277: LD_INT 1
39279: PUSH
39280: EMPTY
39281: LIST
39282: LIST
39283: PUSH
39284: LD_INT 0
39286: PUSH
39287: LD_INT 1
39289: PUSH
39290: EMPTY
39291: LIST
39292: LIST
39293: PUSH
39294: LD_INT 1
39296: NEG
39297: PUSH
39298: LD_INT 0
39300: PUSH
39301: EMPTY
39302: LIST
39303: LIST
39304: PUSH
39305: LD_INT 1
39307: NEG
39308: PUSH
39309: LD_INT 1
39311: NEG
39312: PUSH
39313: EMPTY
39314: LIST
39315: LIST
39316: PUSH
39317: LD_INT 1
39319: NEG
39320: PUSH
39321: LD_INT 2
39323: NEG
39324: PUSH
39325: EMPTY
39326: LIST
39327: LIST
39328: PUSH
39329: LD_INT 1
39331: PUSH
39332: LD_INT 2
39334: PUSH
39335: EMPTY
39336: LIST
39337: LIST
39338: PUSH
39339: EMPTY
39340: LIST
39341: LIST
39342: LIST
39343: LIST
39344: LIST
39345: LIST
39346: LIST
39347: LIST
39348: LIST
39349: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
39350: LD_ADDR_VAR 0 40
39354: PUSH
39355: LD_INT 0
39357: PUSH
39358: LD_INT 0
39360: PUSH
39361: EMPTY
39362: LIST
39363: LIST
39364: PUSH
39365: LD_INT 0
39367: PUSH
39368: LD_INT 1
39370: NEG
39371: PUSH
39372: EMPTY
39373: LIST
39374: LIST
39375: PUSH
39376: LD_INT 1
39378: PUSH
39379: LD_INT 0
39381: PUSH
39382: EMPTY
39383: LIST
39384: LIST
39385: PUSH
39386: LD_INT 1
39388: PUSH
39389: LD_INT 1
39391: PUSH
39392: EMPTY
39393: LIST
39394: LIST
39395: PUSH
39396: LD_INT 0
39398: PUSH
39399: LD_INT 1
39401: PUSH
39402: EMPTY
39403: LIST
39404: LIST
39405: PUSH
39406: LD_INT 1
39408: NEG
39409: PUSH
39410: LD_INT 0
39412: PUSH
39413: EMPTY
39414: LIST
39415: LIST
39416: PUSH
39417: LD_INT 1
39419: NEG
39420: PUSH
39421: LD_INT 1
39423: NEG
39424: PUSH
39425: EMPTY
39426: LIST
39427: LIST
39428: PUSH
39429: LD_INT 1
39431: PUSH
39432: LD_INT 1
39434: NEG
39435: PUSH
39436: EMPTY
39437: LIST
39438: LIST
39439: PUSH
39440: LD_INT 1
39442: NEG
39443: PUSH
39444: LD_INT 1
39446: PUSH
39447: EMPTY
39448: LIST
39449: LIST
39450: PUSH
39451: EMPTY
39452: LIST
39453: LIST
39454: LIST
39455: LIST
39456: LIST
39457: LIST
39458: LIST
39459: LIST
39460: LIST
39461: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39462: LD_ADDR_VAR 0 41
39466: PUSH
39467: LD_INT 0
39469: PUSH
39470: LD_INT 0
39472: PUSH
39473: EMPTY
39474: LIST
39475: LIST
39476: PUSH
39477: LD_INT 0
39479: PUSH
39480: LD_INT 1
39482: NEG
39483: PUSH
39484: EMPTY
39485: LIST
39486: LIST
39487: PUSH
39488: LD_INT 1
39490: PUSH
39491: LD_INT 0
39493: PUSH
39494: EMPTY
39495: LIST
39496: LIST
39497: PUSH
39498: LD_INT 1
39500: PUSH
39501: LD_INT 1
39503: PUSH
39504: EMPTY
39505: LIST
39506: LIST
39507: PUSH
39508: LD_INT 0
39510: PUSH
39511: LD_INT 1
39513: PUSH
39514: EMPTY
39515: LIST
39516: LIST
39517: PUSH
39518: LD_INT 1
39520: NEG
39521: PUSH
39522: LD_INT 0
39524: PUSH
39525: EMPTY
39526: LIST
39527: LIST
39528: PUSH
39529: LD_INT 1
39531: NEG
39532: PUSH
39533: LD_INT 1
39535: NEG
39536: PUSH
39537: EMPTY
39538: LIST
39539: LIST
39540: PUSH
39541: LD_INT 1
39543: NEG
39544: PUSH
39545: LD_INT 2
39547: NEG
39548: PUSH
39549: EMPTY
39550: LIST
39551: LIST
39552: PUSH
39553: LD_INT 1
39555: PUSH
39556: LD_INT 1
39558: NEG
39559: PUSH
39560: EMPTY
39561: LIST
39562: LIST
39563: PUSH
39564: LD_INT 2
39566: PUSH
39567: LD_INT 0
39569: PUSH
39570: EMPTY
39571: LIST
39572: LIST
39573: PUSH
39574: LD_INT 2
39576: PUSH
39577: LD_INT 1
39579: PUSH
39580: EMPTY
39581: LIST
39582: LIST
39583: PUSH
39584: LD_INT 2
39586: PUSH
39587: LD_INT 2
39589: PUSH
39590: EMPTY
39591: LIST
39592: LIST
39593: PUSH
39594: LD_INT 1
39596: PUSH
39597: LD_INT 2
39599: PUSH
39600: EMPTY
39601: LIST
39602: LIST
39603: PUSH
39604: LD_INT 1
39606: NEG
39607: PUSH
39608: LD_INT 1
39610: PUSH
39611: EMPTY
39612: LIST
39613: LIST
39614: PUSH
39615: LD_INT 2
39617: NEG
39618: PUSH
39619: LD_INT 0
39621: PUSH
39622: EMPTY
39623: LIST
39624: LIST
39625: PUSH
39626: LD_INT 2
39628: NEG
39629: PUSH
39630: LD_INT 1
39632: NEG
39633: PUSH
39634: EMPTY
39635: LIST
39636: LIST
39637: PUSH
39638: LD_INT 2
39640: NEG
39641: PUSH
39642: LD_INT 2
39644: NEG
39645: PUSH
39646: EMPTY
39647: LIST
39648: LIST
39649: PUSH
39650: LD_INT 2
39652: NEG
39653: PUSH
39654: LD_INT 3
39656: NEG
39657: PUSH
39658: EMPTY
39659: LIST
39660: LIST
39661: PUSH
39662: LD_INT 2
39664: PUSH
39665: LD_INT 1
39667: NEG
39668: PUSH
39669: EMPTY
39670: LIST
39671: LIST
39672: PUSH
39673: LD_INT 3
39675: PUSH
39676: LD_INT 0
39678: PUSH
39679: EMPTY
39680: LIST
39681: LIST
39682: PUSH
39683: LD_INT 3
39685: PUSH
39686: LD_INT 1
39688: PUSH
39689: EMPTY
39690: LIST
39691: LIST
39692: PUSH
39693: LD_INT 3
39695: PUSH
39696: LD_INT 2
39698: PUSH
39699: EMPTY
39700: LIST
39701: LIST
39702: PUSH
39703: LD_INT 3
39705: PUSH
39706: LD_INT 3
39708: PUSH
39709: EMPTY
39710: LIST
39711: LIST
39712: PUSH
39713: LD_INT 2
39715: PUSH
39716: LD_INT 3
39718: PUSH
39719: EMPTY
39720: LIST
39721: LIST
39722: PUSH
39723: LD_INT 2
39725: NEG
39726: PUSH
39727: LD_INT 1
39729: PUSH
39730: EMPTY
39731: LIST
39732: LIST
39733: PUSH
39734: LD_INT 3
39736: NEG
39737: PUSH
39738: LD_INT 0
39740: PUSH
39741: EMPTY
39742: LIST
39743: LIST
39744: PUSH
39745: LD_INT 3
39747: NEG
39748: PUSH
39749: LD_INT 1
39751: NEG
39752: PUSH
39753: EMPTY
39754: LIST
39755: LIST
39756: PUSH
39757: LD_INT 3
39759: NEG
39760: PUSH
39761: LD_INT 2
39763: NEG
39764: PUSH
39765: EMPTY
39766: LIST
39767: LIST
39768: PUSH
39769: LD_INT 3
39771: NEG
39772: PUSH
39773: LD_INT 3
39775: NEG
39776: PUSH
39777: EMPTY
39778: LIST
39779: LIST
39780: PUSH
39781: EMPTY
39782: LIST
39783: LIST
39784: LIST
39785: LIST
39786: LIST
39787: LIST
39788: LIST
39789: LIST
39790: LIST
39791: LIST
39792: LIST
39793: LIST
39794: LIST
39795: LIST
39796: LIST
39797: LIST
39798: LIST
39799: LIST
39800: LIST
39801: LIST
39802: LIST
39803: LIST
39804: LIST
39805: LIST
39806: LIST
39807: LIST
39808: LIST
39809: LIST
39810: LIST
39811: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39812: LD_ADDR_VAR 0 42
39816: PUSH
39817: LD_INT 0
39819: PUSH
39820: LD_INT 0
39822: PUSH
39823: EMPTY
39824: LIST
39825: LIST
39826: PUSH
39827: LD_INT 0
39829: PUSH
39830: LD_INT 1
39832: NEG
39833: PUSH
39834: EMPTY
39835: LIST
39836: LIST
39837: PUSH
39838: LD_INT 1
39840: PUSH
39841: LD_INT 0
39843: PUSH
39844: EMPTY
39845: LIST
39846: LIST
39847: PUSH
39848: LD_INT 1
39850: PUSH
39851: LD_INT 1
39853: PUSH
39854: EMPTY
39855: LIST
39856: LIST
39857: PUSH
39858: LD_INT 0
39860: PUSH
39861: LD_INT 1
39863: PUSH
39864: EMPTY
39865: LIST
39866: LIST
39867: PUSH
39868: LD_INT 1
39870: NEG
39871: PUSH
39872: LD_INT 0
39874: PUSH
39875: EMPTY
39876: LIST
39877: LIST
39878: PUSH
39879: LD_INT 1
39881: NEG
39882: PUSH
39883: LD_INT 1
39885: NEG
39886: PUSH
39887: EMPTY
39888: LIST
39889: LIST
39890: PUSH
39891: LD_INT 1
39893: NEG
39894: PUSH
39895: LD_INT 2
39897: NEG
39898: PUSH
39899: EMPTY
39900: LIST
39901: LIST
39902: PUSH
39903: LD_INT 0
39905: PUSH
39906: LD_INT 2
39908: NEG
39909: PUSH
39910: EMPTY
39911: LIST
39912: LIST
39913: PUSH
39914: LD_INT 1
39916: PUSH
39917: LD_INT 1
39919: NEG
39920: PUSH
39921: EMPTY
39922: LIST
39923: LIST
39924: PUSH
39925: LD_INT 2
39927: PUSH
39928: LD_INT 1
39930: PUSH
39931: EMPTY
39932: LIST
39933: LIST
39934: PUSH
39935: LD_INT 2
39937: PUSH
39938: LD_INT 2
39940: PUSH
39941: EMPTY
39942: LIST
39943: LIST
39944: PUSH
39945: LD_INT 1
39947: PUSH
39948: LD_INT 2
39950: PUSH
39951: EMPTY
39952: LIST
39953: LIST
39954: PUSH
39955: LD_INT 0
39957: PUSH
39958: LD_INT 2
39960: PUSH
39961: EMPTY
39962: LIST
39963: LIST
39964: PUSH
39965: LD_INT 1
39967: NEG
39968: PUSH
39969: LD_INT 1
39971: PUSH
39972: EMPTY
39973: LIST
39974: LIST
39975: PUSH
39976: LD_INT 2
39978: NEG
39979: PUSH
39980: LD_INT 1
39982: NEG
39983: PUSH
39984: EMPTY
39985: LIST
39986: LIST
39987: PUSH
39988: LD_INT 2
39990: NEG
39991: PUSH
39992: LD_INT 2
39994: NEG
39995: PUSH
39996: EMPTY
39997: LIST
39998: LIST
39999: PUSH
40000: LD_INT 2
40002: NEG
40003: PUSH
40004: LD_INT 3
40006: NEG
40007: PUSH
40008: EMPTY
40009: LIST
40010: LIST
40011: PUSH
40012: LD_INT 1
40014: NEG
40015: PUSH
40016: LD_INT 3
40018: NEG
40019: PUSH
40020: EMPTY
40021: LIST
40022: LIST
40023: PUSH
40024: LD_INT 0
40026: PUSH
40027: LD_INT 3
40029: NEG
40030: PUSH
40031: EMPTY
40032: LIST
40033: LIST
40034: PUSH
40035: LD_INT 1
40037: PUSH
40038: LD_INT 2
40040: NEG
40041: PUSH
40042: EMPTY
40043: LIST
40044: LIST
40045: PUSH
40046: LD_INT 3
40048: PUSH
40049: LD_INT 2
40051: PUSH
40052: EMPTY
40053: LIST
40054: LIST
40055: PUSH
40056: LD_INT 3
40058: PUSH
40059: LD_INT 3
40061: PUSH
40062: EMPTY
40063: LIST
40064: LIST
40065: PUSH
40066: LD_INT 2
40068: PUSH
40069: LD_INT 3
40071: PUSH
40072: EMPTY
40073: LIST
40074: LIST
40075: PUSH
40076: LD_INT 1
40078: PUSH
40079: LD_INT 3
40081: PUSH
40082: EMPTY
40083: LIST
40084: LIST
40085: PUSH
40086: LD_INT 0
40088: PUSH
40089: LD_INT 3
40091: PUSH
40092: EMPTY
40093: LIST
40094: LIST
40095: PUSH
40096: LD_INT 1
40098: NEG
40099: PUSH
40100: LD_INT 2
40102: PUSH
40103: EMPTY
40104: LIST
40105: LIST
40106: PUSH
40107: LD_INT 3
40109: NEG
40110: PUSH
40111: LD_INT 2
40113: NEG
40114: PUSH
40115: EMPTY
40116: LIST
40117: LIST
40118: PUSH
40119: LD_INT 3
40121: NEG
40122: PUSH
40123: LD_INT 3
40125: NEG
40126: PUSH
40127: EMPTY
40128: LIST
40129: LIST
40130: PUSH
40131: EMPTY
40132: LIST
40133: LIST
40134: LIST
40135: LIST
40136: LIST
40137: LIST
40138: LIST
40139: LIST
40140: LIST
40141: LIST
40142: LIST
40143: LIST
40144: LIST
40145: LIST
40146: LIST
40147: LIST
40148: LIST
40149: LIST
40150: LIST
40151: LIST
40152: LIST
40153: LIST
40154: LIST
40155: LIST
40156: LIST
40157: LIST
40158: LIST
40159: LIST
40160: LIST
40161: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40162: LD_ADDR_VAR 0 43
40166: PUSH
40167: LD_INT 0
40169: PUSH
40170: LD_INT 0
40172: PUSH
40173: EMPTY
40174: LIST
40175: LIST
40176: PUSH
40177: LD_INT 0
40179: PUSH
40180: LD_INT 1
40182: NEG
40183: PUSH
40184: EMPTY
40185: LIST
40186: LIST
40187: PUSH
40188: LD_INT 1
40190: PUSH
40191: LD_INT 0
40193: PUSH
40194: EMPTY
40195: LIST
40196: LIST
40197: PUSH
40198: LD_INT 1
40200: PUSH
40201: LD_INT 1
40203: PUSH
40204: EMPTY
40205: LIST
40206: LIST
40207: PUSH
40208: LD_INT 0
40210: PUSH
40211: LD_INT 1
40213: PUSH
40214: EMPTY
40215: LIST
40216: LIST
40217: PUSH
40218: LD_INT 1
40220: NEG
40221: PUSH
40222: LD_INT 0
40224: PUSH
40225: EMPTY
40226: LIST
40227: LIST
40228: PUSH
40229: LD_INT 1
40231: NEG
40232: PUSH
40233: LD_INT 1
40235: NEG
40236: PUSH
40237: EMPTY
40238: LIST
40239: LIST
40240: PUSH
40241: LD_INT 1
40243: NEG
40244: PUSH
40245: LD_INT 2
40247: NEG
40248: PUSH
40249: EMPTY
40250: LIST
40251: LIST
40252: PUSH
40253: LD_INT 0
40255: PUSH
40256: LD_INT 2
40258: NEG
40259: PUSH
40260: EMPTY
40261: LIST
40262: LIST
40263: PUSH
40264: LD_INT 1
40266: PUSH
40267: LD_INT 1
40269: NEG
40270: PUSH
40271: EMPTY
40272: LIST
40273: LIST
40274: PUSH
40275: LD_INT 2
40277: PUSH
40278: LD_INT 0
40280: PUSH
40281: EMPTY
40282: LIST
40283: LIST
40284: PUSH
40285: LD_INT 2
40287: PUSH
40288: LD_INT 1
40290: PUSH
40291: EMPTY
40292: LIST
40293: LIST
40294: PUSH
40295: LD_INT 1
40297: PUSH
40298: LD_INT 2
40300: PUSH
40301: EMPTY
40302: LIST
40303: LIST
40304: PUSH
40305: LD_INT 0
40307: PUSH
40308: LD_INT 2
40310: PUSH
40311: EMPTY
40312: LIST
40313: LIST
40314: PUSH
40315: LD_INT 1
40317: NEG
40318: PUSH
40319: LD_INT 1
40321: PUSH
40322: EMPTY
40323: LIST
40324: LIST
40325: PUSH
40326: LD_INT 2
40328: NEG
40329: PUSH
40330: LD_INT 0
40332: PUSH
40333: EMPTY
40334: LIST
40335: LIST
40336: PUSH
40337: LD_INT 2
40339: NEG
40340: PUSH
40341: LD_INT 1
40343: NEG
40344: PUSH
40345: EMPTY
40346: LIST
40347: LIST
40348: PUSH
40349: LD_INT 1
40351: NEG
40352: PUSH
40353: LD_INT 3
40355: NEG
40356: PUSH
40357: EMPTY
40358: LIST
40359: LIST
40360: PUSH
40361: LD_INT 0
40363: PUSH
40364: LD_INT 3
40366: NEG
40367: PUSH
40368: EMPTY
40369: LIST
40370: LIST
40371: PUSH
40372: LD_INT 1
40374: PUSH
40375: LD_INT 2
40377: NEG
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: PUSH
40383: LD_INT 2
40385: PUSH
40386: LD_INT 1
40388: NEG
40389: PUSH
40390: EMPTY
40391: LIST
40392: LIST
40393: PUSH
40394: LD_INT 3
40396: PUSH
40397: LD_INT 0
40399: PUSH
40400: EMPTY
40401: LIST
40402: LIST
40403: PUSH
40404: LD_INT 3
40406: PUSH
40407: LD_INT 1
40409: PUSH
40410: EMPTY
40411: LIST
40412: LIST
40413: PUSH
40414: LD_INT 1
40416: PUSH
40417: LD_INT 3
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: PUSH
40424: LD_INT 0
40426: PUSH
40427: LD_INT 3
40429: PUSH
40430: EMPTY
40431: LIST
40432: LIST
40433: PUSH
40434: LD_INT 1
40436: NEG
40437: PUSH
40438: LD_INT 2
40440: PUSH
40441: EMPTY
40442: LIST
40443: LIST
40444: PUSH
40445: LD_INT 2
40447: NEG
40448: PUSH
40449: LD_INT 1
40451: PUSH
40452: EMPTY
40453: LIST
40454: LIST
40455: PUSH
40456: LD_INT 3
40458: NEG
40459: PUSH
40460: LD_INT 0
40462: PUSH
40463: EMPTY
40464: LIST
40465: LIST
40466: PUSH
40467: LD_INT 3
40469: NEG
40470: PUSH
40471: LD_INT 1
40473: NEG
40474: PUSH
40475: EMPTY
40476: LIST
40477: LIST
40478: PUSH
40479: EMPTY
40480: LIST
40481: LIST
40482: LIST
40483: LIST
40484: LIST
40485: LIST
40486: LIST
40487: LIST
40488: LIST
40489: LIST
40490: LIST
40491: LIST
40492: LIST
40493: LIST
40494: LIST
40495: LIST
40496: LIST
40497: LIST
40498: LIST
40499: LIST
40500: LIST
40501: LIST
40502: LIST
40503: LIST
40504: LIST
40505: LIST
40506: LIST
40507: LIST
40508: LIST
40509: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40510: LD_ADDR_VAR 0 44
40514: PUSH
40515: LD_INT 0
40517: PUSH
40518: LD_INT 0
40520: PUSH
40521: EMPTY
40522: LIST
40523: LIST
40524: PUSH
40525: LD_INT 0
40527: PUSH
40528: LD_INT 1
40530: NEG
40531: PUSH
40532: EMPTY
40533: LIST
40534: LIST
40535: PUSH
40536: LD_INT 1
40538: PUSH
40539: LD_INT 0
40541: PUSH
40542: EMPTY
40543: LIST
40544: LIST
40545: PUSH
40546: LD_INT 1
40548: PUSH
40549: LD_INT 1
40551: PUSH
40552: EMPTY
40553: LIST
40554: LIST
40555: PUSH
40556: LD_INT 0
40558: PUSH
40559: LD_INT 1
40561: PUSH
40562: EMPTY
40563: LIST
40564: LIST
40565: PUSH
40566: LD_INT 1
40568: NEG
40569: PUSH
40570: LD_INT 0
40572: PUSH
40573: EMPTY
40574: LIST
40575: LIST
40576: PUSH
40577: LD_INT 1
40579: NEG
40580: PUSH
40581: LD_INT 1
40583: NEG
40584: PUSH
40585: EMPTY
40586: LIST
40587: LIST
40588: PUSH
40589: LD_INT 1
40591: NEG
40592: PUSH
40593: LD_INT 2
40595: NEG
40596: PUSH
40597: EMPTY
40598: LIST
40599: LIST
40600: PUSH
40601: LD_INT 1
40603: PUSH
40604: LD_INT 1
40606: NEG
40607: PUSH
40608: EMPTY
40609: LIST
40610: LIST
40611: PUSH
40612: LD_INT 2
40614: PUSH
40615: LD_INT 0
40617: PUSH
40618: EMPTY
40619: LIST
40620: LIST
40621: PUSH
40622: LD_INT 2
40624: PUSH
40625: LD_INT 1
40627: PUSH
40628: EMPTY
40629: LIST
40630: LIST
40631: PUSH
40632: LD_INT 2
40634: PUSH
40635: LD_INT 2
40637: PUSH
40638: EMPTY
40639: LIST
40640: LIST
40641: PUSH
40642: LD_INT 1
40644: PUSH
40645: LD_INT 2
40647: PUSH
40648: EMPTY
40649: LIST
40650: LIST
40651: PUSH
40652: LD_INT 1
40654: NEG
40655: PUSH
40656: LD_INT 1
40658: PUSH
40659: EMPTY
40660: LIST
40661: LIST
40662: PUSH
40663: LD_INT 2
40665: NEG
40666: PUSH
40667: LD_INT 0
40669: PUSH
40670: EMPTY
40671: LIST
40672: LIST
40673: PUSH
40674: LD_INT 2
40676: NEG
40677: PUSH
40678: LD_INT 1
40680: NEG
40681: PUSH
40682: EMPTY
40683: LIST
40684: LIST
40685: PUSH
40686: LD_INT 2
40688: NEG
40689: PUSH
40690: LD_INT 2
40692: NEG
40693: PUSH
40694: EMPTY
40695: LIST
40696: LIST
40697: PUSH
40698: LD_INT 2
40700: NEG
40701: PUSH
40702: LD_INT 3
40704: NEG
40705: PUSH
40706: EMPTY
40707: LIST
40708: LIST
40709: PUSH
40710: LD_INT 2
40712: PUSH
40713: LD_INT 1
40715: NEG
40716: PUSH
40717: EMPTY
40718: LIST
40719: LIST
40720: PUSH
40721: LD_INT 3
40723: PUSH
40724: LD_INT 0
40726: PUSH
40727: EMPTY
40728: LIST
40729: LIST
40730: PUSH
40731: LD_INT 3
40733: PUSH
40734: LD_INT 1
40736: PUSH
40737: EMPTY
40738: LIST
40739: LIST
40740: PUSH
40741: LD_INT 3
40743: PUSH
40744: LD_INT 2
40746: PUSH
40747: EMPTY
40748: LIST
40749: LIST
40750: PUSH
40751: LD_INT 3
40753: PUSH
40754: LD_INT 3
40756: PUSH
40757: EMPTY
40758: LIST
40759: LIST
40760: PUSH
40761: LD_INT 2
40763: PUSH
40764: LD_INT 3
40766: PUSH
40767: EMPTY
40768: LIST
40769: LIST
40770: PUSH
40771: LD_INT 2
40773: NEG
40774: PUSH
40775: LD_INT 1
40777: PUSH
40778: EMPTY
40779: LIST
40780: LIST
40781: PUSH
40782: LD_INT 3
40784: NEG
40785: PUSH
40786: LD_INT 0
40788: PUSH
40789: EMPTY
40790: LIST
40791: LIST
40792: PUSH
40793: LD_INT 3
40795: NEG
40796: PUSH
40797: LD_INT 1
40799: NEG
40800: PUSH
40801: EMPTY
40802: LIST
40803: LIST
40804: PUSH
40805: LD_INT 3
40807: NEG
40808: PUSH
40809: LD_INT 2
40811: NEG
40812: PUSH
40813: EMPTY
40814: LIST
40815: LIST
40816: PUSH
40817: LD_INT 3
40819: NEG
40820: PUSH
40821: LD_INT 3
40823: NEG
40824: PUSH
40825: EMPTY
40826: LIST
40827: LIST
40828: PUSH
40829: EMPTY
40830: LIST
40831: LIST
40832: LIST
40833: LIST
40834: LIST
40835: LIST
40836: LIST
40837: LIST
40838: LIST
40839: LIST
40840: LIST
40841: LIST
40842: LIST
40843: LIST
40844: LIST
40845: LIST
40846: LIST
40847: LIST
40848: LIST
40849: LIST
40850: LIST
40851: LIST
40852: LIST
40853: LIST
40854: LIST
40855: LIST
40856: LIST
40857: LIST
40858: LIST
40859: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40860: LD_ADDR_VAR 0 45
40864: PUSH
40865: LD_INT 0
40867: PUSH
40868: LD_INT 0
40870: PUSH
40871: EMPTY
40872: LIST
40873: LIST
40874: PUSH
40875: LD_INT 0
40877: PUSH
40878: LD_INT 1
40880: NEG
40881: PUSH
40882: EMPTY
40883: LIST
40884: LIST
40885: PUSH
40886: LD_INT 1
40888: PUSH
40889: LD_INT 0
40891: PUSH
40892: EMPTY
40893: LIST
40894: LIST
40895: PUSH
40896: LD_INT 1
40898: PUSH
40899: LD_INT 1
40901: PUSH
40902: EMPTY
40903: LIST
40904: LIST
40905: PUSH
40906: LD_INT 0
40908: PUSH
40909: LD_INT 1
40911: PUSH
40912: EMPTY
40913: LIST
40914: LIST
40915: PUSH
40916: LD_INT 1
40918: NEG
40919: PUSH
40920: LD_INT 0
40922: PUSH
40923: EMPTY
40924: LIST
40925: LIST
40926: PUSH
40927: LD_INT 1
40929: NEG
40930: PUSH
40931: LD_INT 1
40933: NEG
40934: PUSH
40935: EMPTY
40936: LIST
40937: LIST
40938: PUSH
40939: LD_INT 1
40941: NEG
40942: PUSH
40943: LD_INT 2
40945: NEG
40946: PUSH
40947: EMPTY
40948: LIST
40949: LIST
40950: PUSH
40951: LD_INT 0
40953: PUSH
40954: LD_INT 2
40956: NEG
40957: PUSH
40958: EMPTY
40959: LIST
40960: LIST
40961: PUSH
40962: LD_INT 1
40964: PUSH
40965: LD_INT 1
40967: NEG
40968: PUSH
40969: EMPTY
40970: LIST
40971: LIST
40972: PUSH
40973: LD_INT 2
40975: PUSH
40976: LD_INT 1
40978: PUSH
40979: EMPTY
40980: LIST
40981: LIST
40982: PUSH
40983: LD_INT 2
40985: PUSH
40986: LD_INT 2
40988: PUSH
40989: EMPTY
40990: LIST
40991: LIST
40992: PUSH
40993: LD_INT 1
40995: PUSH
40996: LD_INT 2
40998: PUSH
40999: EMPTY
41000: LIST
41001: LIST
41002: PUSH
41003: LD_INT 0
41005: PUSH
41006: LD_INT 2
41008: PUSH
41009: EMPTY
41010: LIST
41011: LIST
41012: PUSH
41013: LD_INT 1
41015: NEG
41016: PUSH
41017: LD_INT 1
41019: PUSH
41020: EMPTY
41021: LIST
41022: LIST
41023: PUSH
41024: LD_INT 2
41026: NEG
41027: PUSH
41028: LD_INT 1
41030: NEG
41031: PUSH
41032: EMPTY
41033: LIST
41034: LIST
41035: PUSH
41036: LD_INT 2
41038: NEG
41039: PUSH
41040: LD_INT 2
41042: NEG
41043: PUSH
41044: EMPTY
41045: LIST
41046: LIST
41047: PUSH
41048: LD_INT 2
41050: NEG
41051: PUSH
41052: LD_INT 3
41054: NEG
41055: PUSH
41056: EMPTY
41057: LIST
41058: LIST
41059: PUSH
41060: LD_INT 1
41062: NEG
41063: PUSH
41064: LD_INT 3
41066: NEG
41067: PUSH
41068: EMPTY
41069: LIST
41070: LIST
41071: PUSH
41072: LD_INT 0
41074: PUSH
41075: LD_INT 3
41077: NEG
41078: PUSH
41079: EMPTY
41080: LIST
41081: LIST
41082: PUSH
41083: LD_INT 1
41085: PUSH
41086: LD_INT 2
41088: NEG
41089: PUSH
41090: EMPTY
41091: LIST
41092: LIST
41093: PUSH
41094: LD_INT 3
41096: PUSH
41097: LD_INT 2
41099: PUSH
41100: EMPTY
41101: LIST
41102: LIST
41103: PUSH
41104: LD_INT 3
41106: PUSH
41107: LD_INT 3
41109: PUSH
41110: EMPTY
41111: LIST
41112: LIST
41113: PUSH
41114: LD_INT 2
41116: PUSH
41117: LD_INT 3
41119: PUSH
41120: EMPTY
41121: LIST
41122: LIST
41123: PUSH
41124: LD_INT 1
41126: PUSH
41127: LD_INT 3
41129: PUSH
41130: EMPTY
41131: LIST
41132: LIST
41133: PUSH
41134: LD_INT 0
41136: PUSH
41137: LD_INT 3
41139: PUSH
41140: EMPTY
41141: LIST
41142: LIST
41143: PUSH
41144: LD_INT 1
41146: NEG
41147: PUSH
41148: LD_INT 2
41150: PUSH
41151: EMPTY
41152: LIST
41153: LIST
41154: PUSH
41155: LD_INT 3
41157: NEG
41158: PUSH
41159: LD_INT 2
41161: NEG
41162: PUSH
41163: EMPTY
41164: LIST
41165: LIST
41166: PUSH
41167: LD_INT 3
41169: NEG
41170: PUSH
41171: LD_INT 3
41173: NEG
41174: PUSH
41175: EMPTY
41176: LIST
41177: LIST
41178: PUSH
41179: EMPTY
41180: LIST
41181: LIST
41182: LIST
41183: LIST
41184: LIST
41185: LIST
41186: LIST
41187: LIST
41188: LIST
41189: LIST
41190: LIST
41191: LIST
41192: LIST
41193: LIST
41194: LIST
41195: LIST
41196: LIST
41197: LIST
41198: LIST
41199: LIST
41200: LIST
41201: LIST
41202: LIST
41203: LIST
41204: LIST
41205: LIST
41206: LIST
41207: LIST
41208: LIST
41209: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41210: LD_ADDR_VAR 0 46
41214: PUSH
41215: LD_INT 0
41217: PUSH
41218: LD_INT 0
41220: PUSH
41221: EMPTY
41222: LIST
41223: LIST
41224: PUSH
41225: LD_INT 0
41227: PUSH
41228: LD_INT 1
41230: NEG
41231: PUSH
41232: EMPTY
41233: LIST
41234: LIST
41235: PUSH
41236: LD_INT 1
41238: PUSH
41239: LD_INT 0
41241: PUSH
41242: EMPTY
41243: LIST
41244: LIST
41245: PUSH
41246: LD_INT 1
41248: PUSH
41249: LD_INT 1
41251: PUSH
41252: EMPTY
41253: LIST
41254: LIST
41255: PUSH
41256: LD_INT 0
41258: PUSH
41259: LD_INT 1
41261: PUSH
41262: EMPTY
41263: LIST
41264: LIST
41265: PUSH
41266: LD_INT 1
41268: NEG
41269: PUSH
41270: LD_INT 0
41272: PUSH
41273: EMPTY
41274: LIST
41275: LIST
41276: PUSH
41277: LD_INT 1
41279: NEG
41280: PUSH
41281: LD_INT 1
41283: NEG
41284: PUSH
41285: EMPTY
41286: LIST
41287: LIST
41288: PUSH
41289: LD_INT 1
41291: NEG
41292: PUSH
41293: LD_INT 2
41295: NEG
41296: PUSH
41297: EMPTY
41298: LIST
41299: LIST
41300: PUSH
41301: LD_INT 0
41303: PUSH
41304: LD_INT 2
41306: NEG
41307: PUSH
41308: EMPTY
41309: LIST
41310: LIST
41311: PUSH
41312: LD_INT 1
41314: PUSH
41315: LD_INT 1
41317: NEG
41318: PUSH
41319: EMPTY
41320: LIST
41321: LIST
41322: PUSH
41323: LD_INT 2
41325: PUSH
41326: LD_INT 0
41328: PUSH
41329: EMPTY
41330: LIST
41331: LIST
41332: PUSH
41333: LD_INT 2
41335: PUSH
41336: LD_INT 1
41338: PUSH
41339: EMPTY
41340: LIST
41341: LIST
41342: PUSH
41343: LD_INT 1
41345: PUSH
41346: LD_INT 2
41348: PUSH
41349: EMPTY
41350: LIST
41351: LIST
41352: PUSH
41353: LD_INT 0
41355: PUSH
41356: LD_INT 2
41358: PUSH
41359: EMPTY
41360: LIST
41361: LIST
41362: PUSH
41363: LD_INT 1
41365: NEG
41366: PUSH
41367: LD_INT 1
41369: PUSH
41370: EMPTY
41371: LIST
41372: LIST
41373: PUSH
41374: LD_INT 2
41376: NEG
41377: PUSH
41378: LD_INT 0
41380: PUSH
41381: EMPTY
41382: LIST
41383: LIST
41384: PUSH
41385: LD_INT 2
41387: NEG
41388: PUSH
41389: LD_INT 1
41391: NEG
41392: PUSH
41393: EMPTY
41394: LIST
41395: LIST
41396: PUSH
41397: LD_INT 1
41399: NEG
41400: PUSH
41401: LD_INT 3
41403: NEG
41404: PUSH
41405: EMPTY
41406: LIST
41407: LIST
41408: PUSH
41409: LD_INT 0
41411: PUSH
41412: LD_INT 3
41414: NEG
41415: PUSH
41416: EMPTY
41417: LIST
41418: LIST
41419: PUSH
41420: LD_INT 1
41422: PUSH
41423: LD_INT 2
41425: NEG
41426: PUSH
41427: EMPTY
41428: LIST
41429: LIST
41430: PUSH
41431: LD_INT 2
41433: PUSH
41434: LD_INT 1
41436: NEG
41437: PUSH
41438: EMPTY
41439: LIST
41440: LIST
41441: PUSH
41442: LD_INT 3
41444: PUSH
41445: LD_INT 0
41447: PUSH
41448: EMPTY
41449: LIST
41450: LIST
41451: PUSH
41452: LD_INT 3
41454: PUSH
41455: LD_INT 1
41457: PUSH
41458: EMPTY
41459: LIST
41460: LIST
41461: PUSH
41462: LD_INT 1
41464: PUSH
41465: LD_INT 3
41467: PUSH
41468: EMPTY
41469: LIST
41470: LIST
41471: PUSH
41472: LD_INT 0
41474: PUSH
41475: LD_INT 3
41477: PUSH
41478: EMPTY
41479: LIST
41480: LIST
41481: PUSH
41482: LD_INT 1
41484: NEG
41485: PUSH
41486: LD_INT 2
41488: PUSH
41489: EMPTY
41490: LIST
41491: LIST
41492: PUSH
41493: LD_INT 2
41495: NEG
41496: PUSH
41497: LD_INT 1
41499: PUSH
41500: EMPTY
41501: LIST
41502: LIST
41503: PUSH
41504: LD_INT 3
41506: NEG
41507: PUSH
41508: LD_INT 0
41510: PUSH
41511: EMPTY
41512: LIST
41513: LIST
41514: PUSH
41515: LD_INT 3
41517: NEG
41518: PUSH
41519: LD_INT 1
41521: NEG
41522: PUSH
41523: EMPTY
41524: LIST
41525: LIST
41526: PUSH
41527: EMPTY
41528: LIST
41529: LIST
41530: LIST
41531: LIST
41532: LIST
41533: LIST
41534: LIST
41535: LIST
41536: LIST
41537: LIST
41538: LIST
41539: LIST
41540: LIST
41541: LIST
41542: LIST
41543: LIST
41544: LIST
41545: LIST
41546: LIST
41547: LIST
41548: LIST
41549: LIST
41550: LIST
41551: LIST
41552: LIST
41553: LIST
41554: LIST
41555: LIST
41556: LIST
41557: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41558: LD_ADDR_VAR 0 47
41562: PUSH
41563: LD_INT 0
41565: PUSH
41566: LD_INT 0
41568: PUSH
41569: EMPTY
41570: LIST
41571: LIST
41572: PUSH
41573: LD_INT 0
41575: PUSH
41576: LD_INT 1
41578: NEG
41579: PUSH
41580: EMPTY
41581: LIST
41582: LIST
41583: PUSH
41584: LD_INT 1
41586: PUSH
41587: LD_INT 0
41589: PUSH
41590: EMPTY
41591: LIST
41592: LIST
41593: PUSH
41594: LD_INT 1
41596: PUSH
41597: LD_INT 1
41599: PUSH
41600: EMPTY
41601: LIST
41602: LIST
41603: PUSH
41604: LD_INT 0
41606: PUSH
41607: LD_INT 1
41609: PUSH
41610: EMPTY
41611: LIST
41612: LIST
41613: PUSH
41614: LD_INT 1
41616: NEG
41617: PUSH
41618: LD_INT 0
41620: PUSH
41621: EMPTY
41622: LIST
41623: LIST
41624: PUSH
41625: LD_INT 1
41627: NEG
41628: PUSH
41629: LD_INT 1
41631: NEG
41632: PUSH
41633: EMPTY
41634: LIST
41635: LIST
41636: PUSH
41637: LD_INT 1
41639: NEG
41640: PUSH
41641: LD_INT 2
41643: NEG
41644: PUSH
41645: EMPTY
41646: LIST
41647: LIST
41648: PUSH
41649: LD_INT 0
41651: PUSH
41652: LD_INT 2
41654: NEG
41655: PUSH
41656: EMPTY
41657: LIST
41658: LIST
41659: PUSH
41660: LD_INT 1
41662: PUSH
41663: LD_INT 1
41665: NEG
41666: PUSH
41667: EMPTY
41668: LIST
41669: LIST
41670: PUSH
41671: LD_INT 2
41673: NEG
41674: PUSH
41675: LD_INT 1
41677: NEG
41678: PUSH
41679: EMPTY
41680: LIST
41681: LIST
41682: PUSH
41683: LD_INT 2
41685: NEG
41686: PUSH
41687: LD_INT 2
41689: NEG
41690: PUSH
41691: EMPTY
41692: LIST
41693: LIST
41694: PUSH
41695: EMPTY
41696: LIST
41697: LIST
41698: LIST
41699: LIST
41700: LIST
41701: LIST
41702: LIST
41703: LIST
41704: LIST
41705: LIST
41706: LIST
41707: LIST
41708: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
41709: LD_ADDR_VAR 0 48
41713: PUSH
41714: LD_INT 0
41716: PUSH
41717: LD_INT 0
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PUSH
41724: LD_INT 0
41726: PUSH
41727: LD_INT 1
41729: NEG
41730: PUSH
41731: EMPTY
41732: LIST
41733: LIST
41734: PUSH
41735: LD_INT 1
41737: PUSH
41738: LD_INT 0
41740: PUSH
41741: EMPTY
41742: LIST
41743: LIST
41744: PUSH
41745: LD_INT 1
41747: PUSH
41748: LD_INT 1
41750: PUSH
41751: EMPTY
41752: LIST
41753: LIST
41754: PUSH
41755: LD_INT 0
41757: PUSH
41758: LD_INT 1
41760: PUSH
41761: EMPTY
41762: LIST
41763: LIST
41764: PUSH
41765: LD_INT 1
41767: NEG
41768: PUSH
41769: LD_INT 0
41771: PUSH
41772: EMPTY
41773: LIST
41774: LIST
41775: PUSH
41776: LD_INT 1
41778: NEG
41779: PUSH
41780: LD_INT 1
41782: NEG
41783: PUSH
41784: EMPTY
41785: LIST
41786: LIST
41787: PUSH
41788: LD_INT 1
41790: NEG
41791: PUSH
41792: LD_INT 2
41794: NEG
41795: PUSH
41796: EMPTY
41797: LIST
41798: LIST
41799: PUSH
41800: LD_INT 0
41802: PUSH
41803: LD_INT 2
41805: NEG
41806: PUSH
41807: EMPTY
41808: LIST
41809: LIST
41810: PUSH
41811: LD_INT 1
41813: PUSH
41814: LD_INT 1
41816: NEG
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: PUSH
41822: LD_INT 2
41824: PUSH
41825: LD_INT 0
41827: PUSH
41828: EMPTY
41829: LIST
41830: LIST
41831: PUSH
41832: LD_INT 2
41834: PUSH
41835: LD_INT 1
41837: PUSH
41838: EMPTY
41839: LIST
41840: LIST
41841: PUSH
41842: EMPTY
41843: LIST
41844: LIST
41845: LIST
41846: LIST
41847: LIST
41848: LIST
41849: LIST
41850: LIST
41851: LIST
41852: LIST
41853: LIST
41854: LIST
41855: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
41856: LD_ADDR_VAR 0 49
41860: PUSH
41861: LD_INT 0
41863: PUSH
41864: LD_INT 0
41866: PUSH
41867: EMPTY
41868: LIST
41869: LIST
41870: PUSH
41871: LD_INT 0
41873: PUSH
41874: LD_INT 1
41876: NEG
41877: PUSH
41878: EMPTY
41879: LIST
41880: LIST
41881: PUSH
41882: LD_INT 1
41884: PUSH
41885: LD_INT 0
41887: PUSH
41888: EMPTY
41889: LIST
41890: LIST
41891: PUSH
41892: LD_INT 1
41894: PUSH
41895: LD_INT 1
41897: PUSH
41898: EMPTY
41899: LIST
41900: LIST
41901: PUSH
41902: LD_INT 0
41904: PUSH
41905: LD_INT 1
41907: PUSH
41908: EMPTY
41909: LIST
41910: LIST
41911: PUSH
41912: LD_INT 1
41914: NEG
41915: PUSH
41916: LD_INT 0
41918: PUSH
41919: EMPTY
41920: LIST
41921: LIST
41922: PUSH
41923: LD_INT 1
41925: NEG
41926: PUSH
41927: LD_INT 1
41929: NEG
41930: PUSH
41931: EMPTY
41932: LIST
41933: LIST
41934: PUSH
41935: LD_INT 1
41937: PUSH
41938: LD_INT 1
41940: NEG
41941: PUSH
41942: EMPTY
41943: LIST
41944: LIST
41945: PUSH
41946: LD_INT 2
41948: PUSH
41949: LD_INT 0
41951: PUSH
41952: EMPTY
41953: LIST
41954: LIST
41955: PUSH
41956: LD_INT 2
41958: PUSH
41959: LD_INT 1
41961: PUSH
41962: EMPTY
41963: LIST
41964: LIST
41965: PUSH
41966: LD_INT 2
41968: PUSH
41969: LD_INT 2
41971: PUSH
41972: EMPTY
41973: LIST
41974: LIST
41975: PUSH
41976: LD_INT 1
41978: PUSH
41979: LD_INT 2
41981: PUSH
41982: EMPTY
41983: LIST
41984: LIST
41985: PUSH
41986: EMPTY
41987: LIST
41988: LIST
41989: LIST
41990: LIST
41991: LIST
41992: LIST
41993: LIST
41994: LIST
41995: LIST
41996: LIST
41997: LIST
41998: LIST
41999: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
42000: LD_ADDR_VAR 0 50
42004: PUSH
42005: LD_INT 0
42007: PUSH
42008: LD_INT 0
42010: PUSH
42011: EMPTY
42012: LIST
42013: LIST
42014: PUSH
42015: LD_INT 0
42017: PUSH
42018: LD_INT 1
42020: NEG
42021: PUSH
42022: EMPTY
42023: LIST
42024: LIST
42025: PUSH
42026: LD_INT 1
42028: PUSH
42029: LD_INT 0
42031: PUSH
42032: EMPTY
42033: LIST
42034: LIST
42035: PUSH
42036: LD_INT 1
42038: PUSH
42039: LD_INT 1
42041: PUSH
42042: EMPTY
42043: LIST
42044: LIST
42045: PUSH
42046: LD_INT 0
42048: PUSH
42049: LD_INT 1
42051: PUSH
42052: EMPTY
42053: LIST
42054: LIST
42055: PUSH
42056: LD_INT 1
42058: NEG
42059: PUSH
42060: LD_INT 0
42062: PUSH
42063: EMPTY
42064: LIST
42065: LIST
42066: PUSH
42067: LD_INT 1
42069: NEG
42070: PUSH
42071: LD_INT 1
42073: NEG
42074: PUSH
42075: EMPTY
42076: LIST
42077: LIST
42078: PUSH
42079: LD_INT 2
42081: PUSH
42082: LD_INT 1
42084: PUSH
42085: EMPTY
42086: LIST
42087: LIST
42088: PUSH
42089: LD_INT 2
42091: PUSH
42092: LD_INT 2
42094: PUSH
42095: EMPTY
42096: LIST
42097: LIST
42098: PUSH
42099: LD_INT 1
42101: PUSH
42102: LD_INT 2
42104: PUSH
42105: EMPTY
42106: LIST
42107: LIST
42108: PUSH
42109: LD_INT 0
42111: PUSH
42112: LD_INT 2
42114: PUSH
42115: EMPTY
42116: LIST
42117: LIST
42118: PUSH
42119: LD_INT 1
42121: NEG
42122: PUSH
42123: LD_INT 1
42125: PUSH
42126: EMPTY
42127: LIST
42128: LIST
42129: PUSH
42130: EMPTY
42131: LIST
42132: LIST
42133: LIST
42134: LIST
42135: LIST
42136: LIST
42137: LIST
42138: LIST
42139: LIST
42140: LIST
42141: LIST
42142: LIST
42143: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
42144: LD_ADDR_VAR 0 51
42148: PUSH
42149: LD_INT 0
42151: PUSH
42152: LD_INT 0
42154: PUSH
42155: EMPTY
42156: LIST
42157: LIST
42158: PUSH
42159: LD_INT 0
42161: PUSH
42162: LD_INT 1
42164: NEG
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: PUSH
42170: LD_INT 1
42172: PUSH
42173: LD_INT 0
42175: PUSH
42176: EMPTY
42177: LIST
42178: LIST
42179: PUSH
42180: LD_INT 1
42182: PUSH
42183: LD_INT 1
42185: PUSH
42186: EMPTY
42187: LIST
42188: LIST
42189: PUSH
42190: LD_INT 0
42192: PUSH
42193: LD_INT 1
42195: PUSH
42196: EMPTY
42197: LIST
42198: LIST
42199: PUSH
42200: LD_INT 1
42202: NEG
42203: PUSH
42204: LD_INT 0
42206: PUSH
42207: EMPTY
42208: LIST
42209: LIST
42210: PUSH
42211: LD_INT 1
42213: NEG
42214: PUSH
42215: LD_INT 1
42217: NEG
42218: PUSH
42219: EMPTY
42220: LIST
42221: LIST
42222: PUSH
42223: LD_INT 1
42225: PUSH
42226: LD_INT 2
42228: PUSH
42229: EMPTY
42230: LIST
42231: LIST
42232: PUSH
42233: LD_INT 0
42235: PUSH
42236: LD_INT 2
42238: PUSH
42239: EMPTY
42240: LIST
42241: LIST
42242: PUSH
42243: LD_INT 1
42245: NEG
42246: PUSH
42247: LD_INT 1
42249: PUSH
42250: EMPTY
42251: LIST
42252: LIST
42253: PUSH
42254: LD_INT 2
42256: NEG
42257: PUSH
42258: LD_INT 0
42260: PUSH
42261: EMPTY
42262: LIST
42263: LIST
42264: PUSH
42265: LD_INT 2
42267: NEG
42268: PUSH
42269: LD_INT 1
42271: NEG
42272: PUSH
42273: EMPTY
42274: LIST
42275: LIST
42276: PUSH
42277: EMPTY
42278: LIST
42279: LIST
42280: LIST
42281: LIST
42282: LIST
42283: LIST
42284: LIST
42285: LIST
42286: LIST
42287: LIST
42288: LIST
42289: LIST
42290: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42291: LD_ADDR_VAR 0 52
42295: PUSH
42296: LD_INT 0
42298: PUSH
42299: LD_INT 0
42301: PUSH
42302: EMPTY
42303: LIST
42304: LIST
42305: PUSH
42306: LD_INT 0
42308: PUSH
42309: LD_INT 1
42311: NEG
42312: PUSH
42313: EMPTY
42314: LIST
42315: LIST
42316: PUSH
42317: LD_INT 1
42319: PUSH
42320: LD_INT 0
42322: PUSH
42323: EMPTY
42324: LIST
42325: LIST
42326: PUSH
42327: LD_INT 1
42329: PUSH
42330: LD_INT 1
42332: PUSH
42333: EMPTY
42334: LIST
42335: LIST
42336: PUSH
42337: LD_INT 0
42339: PUSH
42340: LD_INT 1
42342: PUSH
42343: EMPTY
42344: LIST
42345: LIST
42346: PUSH
42347: LD_INT 1
42349: NEG
42350: PUSH
42351: LD_INT 0
42353: PUSH
42354: EMPTY
42355: LIST
42356: LIST
42357: PUSH
42358: LD_INT 1
42360: NEG
42361: PUSH
42362: LD_INT 1
42364: NEG
42365: PUSH
42366: EMPTY
42367: LIST
42368: LIST
42369: PUSH
42370: LD_INT 1
42372: NEG
42373: PUSH
42374: LD_INT 2
42376: NEG
42377: PUSH
42378: EMPTY
42379: LIST
42380: LIST
42381: PUSH
42382: LD_INT 1
42384: NEG
42385: PUSH
42386: LD_INT 1
42388: PUSH
42389: EMPTY
42390: LIST
42391: LIST
42392: PUSH
42393: LD_INT 2
42395: NEG
42396: PUSH
42397: LD_INT 0
42399: PUSH
42400: EMPTY
42401: LIST
42402: LIST
42403: PUSH
42404: LD_INT 2
42406: NEG
42407: PUSH
42408: LD_INT 1
42410: NEG
42411: PUSH
42412: EMPTY
42413: LIST
42414: LIST
42415: PUSH
42416: LD_INT 2
42418: NEG
42419: PUSH
42420: LD_INT 2
42422: NEG
42423: PUSH
42424: EMPTY
42425: LIST
42426: LIST
42427: PUSH
42428: EMPTY
42429: LIST
42430: LIST
42431: LIST
42432: LIST
42433: LIST
42434: LIST
42435: LIST
42436: LIST
42437: LIST
42438: LIST
42439: LIST
42440: LIST
42441: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42442: LD_ADDR_VAR 0 53
42446: PUSH
42447: LD_INT 0
42449: PUSH
42450: LD_INT 0
42452: PUSH
42453: EMPTY
42454: LIST
42455: LIST
42456: PUSH
42457: LD_INT 0
42459: PUSH
42460: LD_INT 1
42462: NEG
42463: PUSH
42464: EMPTY
42465: LIST
42466: LIST
42467: PUSH
42468: LD_INT 1
42470: PUSH
42471: LD_INT 0
42473: PUSH
42474: EMPTY
42475: LIST
42476: LIST
42477: PUSH
42478: LD_INT 1
42480: PUSH
42481: LD_INT 1
42483: PUSH
42484: EMPTY
42485: LIST
42486: LIST
42487: PUSH
42488: LD_INT 0
42490: PUSH
42491: LD_INT 1
42493: PUSH
42494: EMPTY
42495: LIST
42496: LIST
42497: PUSH
42498: LD_INT 1
42500: NEG
42501: PUSH
42502: LD_INT 0
42504: PUSH
42505: EMPTY
42506: LIST
42507: LIST
42508: PUSH
42509: LD_INT 1
42511: NEG
42512: PUSH
42513: LD_INT 1
42515: NEG
42516: PUSH
42517: EMPTY
42518: LIST
42519: LIST
42520: PUSH
42521: LD_INT 1
42523: NEG
42524: PUSH
42525: LD_INT 2
42527: NEG
42528: PUSH
42529: EMPTY
42530: LIST
42531: LIST
42532: PUSH
42533: LD_INT 0
42535: PUSH
42536: LD_INT 2
42538: NEG
42539: PUSH
42540: EMPTY
42541: LIST
42542: LIST
42543: PUSH
42544: LD_INT 1
42546: PUSH
42547: LD_INT 1
42549: NEG
42550: PUSH
42551: EMPTY
42552: LIST
42553: LIST
42554: PUSH
42555: LD_INT 2
42557: PUSH
42558: LD_INT 0
42560: PUSH
42561: EMPTY
42562: LIST
42563: LIST
42564: PUSH
42565: LD_INT 2
42567: PUSH
42568: LD_INT 1
42570: PUSH
42571: EMPTY
42572: LIST
42573: LIST
42574: PUSH
42575: LD_INT 2
42577: PUSH
42578: LD_INT 2
42580: PUSH
42581: EMPTY
42582: LIST
42583: LIST
42584: PUSH
42585: LD_INT 1
42587: PUSH
42588: LD_INT 2
42590: PUSH
42591: EMPTY
42592: LIST
42593: LIST
42594: PUSH
42595: LD_INT 0
42597: PUSH
42598: LD_INT 2
42600: PUSH
42601: EMPTY
42602: LIST
42603: LIST
42604: PUSH
42605: LD_INT 1
42607: NEG
42608: PUSH
42609: LD_INT 1
42611: PUSH
42612: EMPTY
42613: LIST
42614: LIST
42615: PUSH
42616: LD_INT 2
42618: NEG
42619: PUSH
42620: LD_INT 0
42622: PUSH
42623: EMPTY
42624: LIST
42625: LIST
42626: PUSH
42627: LD_INT 2
42629: NEG
42630: PUSH
42631: LD_INT 1
42633: NEG
42634: PUSH
42635: EMPTY
42636: LIST
42637: LIST
42638: PUSH
42639: LD_INT 2
42641: NEG
42642: PUSH
42643: LD_INT 2
42645: NEG
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: PUSH
42651: EMPTY
42652: LIST
42653: LIST
42654: LIST
42655: LIST
42656: LIST
42657: LIST
42658: LIST
42659: LIST
42660: LIST
42661: LIST
42662: LIST
42663: LIST
42664: LIST
42665: LIST
42666: LIST
42667: LIST
42668: LIST
42669: LIST
42670: LIST
42671: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42672: LD_ADDR_VAR 0 54
42676: PUSH
42677: LD_INT 0
42679: PUSH
42680: LD_INT 0
42682: PUSH
42683: EMPTY
42684: LIST
42685: LIST
42686: PUSH
42687: LD_INT 0
42689: PUSH
42690: LD_INT 1
42692: NEG
42693: PUSH
42694: EMPTY
42695: LIST
42696: LIST
42697: PUSH
42698: LD_INT 1
42700: PUSH
42701: LD_INT 0
42703: PUSH
42704: EMPTY
42705: LIST
42706: LIST
42707: PUSH
42708: LD_INT 1
42710: PUSH
42711: LD_INT 1
42713: PUSH
42714: EMPTY
42715: LIST
42716: LIST
42717: PUSH
42718: LD_INT 0
42720: PUSH
42721: LD_INT 1
42723: PUSH
42724: EMPTY
42725: LIST
42726: LIST
42727: PUSH
42728: LD_INT 1
42730: NEG
42731: PUSH
42732: LD_INT 0
42734: PUSH
42735: EMPTY
42736: LIST
42737: LIST
42738: PUSH
42739: LD_INT 1
42741: NEG
42742: PUSH
42743: LD_INT 1
42745: NEG
42746: PUSH
42747: EMPTY
42748: LIST
42749: LIST
42750: PUSH
42751: LD_INT 1
42753: NEG
42754: PUSH
42755: LD_INT 2
42757: NEG
42758: PUSH
42759: EMPTY
42760: LIST
42761: LIST
42762: PUSH
42763: LD_INT 0
42765: PUSH
42766: LD_INT 2
42768: NEG
42769: PUSH
42770: EMPTY
42771: LIST
42772: LIST
42773: PUSH
42774: LD_INT 1
42776: PUSH
42777: LD_INT 1
42779: NEG
42780: PUSH
42781: EMPTY
42782: LIST
42783: LIST
42784: PUSH
42785: LD_INT 2
42787: PUSH
42788: LD_INT 0
42790: PUSH
42791: EMPTY
42792: LIST
42793: LIST
42794: PUSH
42795: LD_INT 2
42797: PUSH
42798: LD_INT 1
42800: PUSH
42801: EMPTY
42802: LIST
42803: LIST
42804: PUSH
42805: LD_INT 2
42807: PUSH
42808: LD_INT 2
42810: PUSH
42811: EMPTY
42812: LIST
42813: LIST
42814: PUSH
42815: LD_INT 1
42817: PUSH
42818: LD_INT 2
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: PUSH
42825: LD_INT 0
42827: PUSH
42828: LD_INT 2
42830: PUSH
42831: EMPTY
42832: LIST
42833: LIST
42834: PUSH
42835: LD_INT 1
42837: NEG
42838: PUSH
42839: LD_INT 1
42841: PUSH
42842: EMPTY
42843: LIST
42844: LIST
42845: PUSH
42846: LD_INT 2
42848: NEG
42849: PUSH
42850: LD_INT 0
42852: PUSH
42853: EMPTY
42854: LIST
42855: LIST
42856: PUSH
42857: LD_INT 2
42859: NEG
42860: PUSH
42861: LD_INT 1
42863: NEG
42864: PUSH
42865: EMPTY
42866: LIST
42867: LIST
42868: PUSH
42869: LD_INT 2
42871: NEG
42872: PUSH
42873: LD_INT 2
42875: NEG
42876: PUSH
42877: EMPTY
42878: LIST
42879: LIST
42880: PUSH
42881: EMPTY
42882: LIST
42883: LIST
42884: LIST
42885: LIST
42886: LIST
42887: LIST
42888: LIST
42889: LIST
42890: LIST
42891: LIST
42892: LIST
42893: LIST
42894: LIST
42895: LIST
42896: LIST
42897: LIST
42898: LIST
42899: LIST
42900: LIST
42901: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42902: LD_ADDR_VAR 0 55
42906: PUSH
42907: LD_INT 0
42909: PUSH
42910: LD_INT 0
42912: PUSH
42913: EMPTY
42914: LIST
42915: LIST
42916: PUSH
42917: LD_INT 0
42919: PUSH
42920: LD_INT 1
42922: NEG
42923: PUSH
42924: EMPTY
42925: LIST
42926: LIST
42927: PUSH
42928: LD_INT 1
42930: PUSH
42931: LD_INT 0
42933: PUSH
42934: EMPTY
42935: LIST
42936: LIST
42937: PUSH
42938: LD_INT 1
42940: PUSH
42941: LD_INT 1
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: PUSH
42948: LD_INT 0
42950: PUSH
42951: LD_INT 1
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: PUSH
42958: LD_INT 1
42960: NEG
42961: PUSH
42962: LD_INT 0
42964: PUSH
42965: EMPTY
42966: LIST
42967: LIST
42968: PUSH
42969: LD_INT 1
42971: NEG
42972: PUSH
42973: LD_INT 1
42975: NEG
42976: PUSH
42977: EMPTY
42978: LIST
42979: LIST
42980: PUSH
42981: LD_INT 1
42983: NEG
42984: PUSH
42985: LD_INT 2
42987: NEG
42988: PUSH
42989: EMPTY
42990: LIST
42991: LIST
42992: PUSH
42993: LD_INT 0
42995: PUSH
42996: LD_INT 2
42998: NEG
42999: PUSH
43000: EMPTY
43001: LIST
43002: LIST
43003: PUSH
43004: LD_INT 1
43006: PUSH
43007: LD_INT 1
43009: NEG
43010: PUSH
43011: EMPTY
43012: LIST
43013: LIST
43014: PUSH
43015: LD_INT 2
43017: PUSH
43018: LD_INT 0
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: PUSH
43025: LD_INT 2
43027: PUSH
43028: LD_INT 1
43030: PUSH
43031: EMPTY
43032: LIST
43033: LIST
43034: PUSH
43035: LD_INT 2
43037: PUSH
43038: LD_INT 2
43040: PUSH
43041: EMPTY
43042: LIST
43043: LIST
43044: PUSH
43045: LD_INT 1
43047: PUSH
43048: LD_INT 2
43050: PUSH
43051: EMPTY
43052: LIST
43053: LIST
43054: PUSH
43055: LD_INT 0
43057: PUSH
43058: LD_INT 2
43060: PUSH
43061: EMPTY
43062: LIST
43063: LIST
43064: PUSH
43065: LD_INT 1
43067: NEG
43068: PUSH
43069: LD_INT 1
43071: PUSH
43072: EMPTY
43073: LIST
43074: LIST
43075: PUSH
43076: LD_INT 2
43078: NEG
43079: PUSH
43080: LD_INT 0
43082: PUSH
43083: EMPTY
43084: LIST
43085: LIST
43086: PUSH
43087: LD_INT 2
43089: NEG
43090: PUSH
43091: LD_INT 1
43093: NEG
43094: PUSH
43095: EMPTY
43096: LIST
43097: LIST
43098: PUSH
43099: LD_INT 2
43101: NEG
43102: PUSH
43103: LD_INT 2
43105: NEG
43106: PUSH
43107: EMPTY
43108: LIST
43109: LIST
43110: PUSH
43111: EMPTY
43112: LIST
43113: LIST
43114: LIST
43115: LIST
43116: LIST
43117: LIST
43118: LIST
43119: LIST
43120: LIST
43121: LIST
43122: LIST
43123: LIST
43124: LIST
43125: LIST
43126: LIST
43127: LIST
43128: LIST
43129: LIST
43130: LIST
43131: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43132: LD_ADDR_VAR 0 56
43136: PUSH
43137: LD_INT 0
43139: PUSH
43140: LD_INT 0
43142: PUSH
43143: EMPTY
43144: LIST
43145: LIST
43146: PUSH
43147: LD_INT 0
43149: PUSH
43150: LD_INT 1
43152: NEG
43153: PUSH
43154: EMPTY
43155: LIST
43156: LIST
43157: PUSH
43158: LD_INT 1
43160: PUSH
43161: LD_INT 0
43163: PUSH
43164: EMPTY
43165: LIST
43166: LIST
43167: PUSH
43168: LD_INT 1
43170: PUSH
43171: LD_INT 1
43173: PUSH
43174: EMPTY
43175: LIST
43176: LIST
43177: PUSH
43178: LD_INT 0
43180: PUSH
43181: LD_INT 1
43183: PUSH
43184: EMPTY
43185: LIST
43186: LIST
43187: PUSH
43188: LD_INT 1
43190: NEG
43191: PUSH
43192: LD_INT 0
43194: PUSH
43195: EMPTY
43196: LIST
43197: LIST
43198: PUSH
43199: LD_INT 1
43201: NEG
43202: PUSH
43203: LD_INT 1
43205: NEG
43206: PUSH
43207: EMPTY
43208: LIST
43209: LIST
43210: PUSH
43211: LD_INT 1
43213: NEG
43214: PUSH
43215: LD_INT 2
43217: NEG
43218: PUSH
43219: EMPTY
43220: LIST
43221: LIST
43222: PUSH
43223: LD_INT 0
43225: PUSH
43226: LD_INT 2
43228: NEG
43229: PUSH
43230: EMPTY
43231: LIST
43232: LIST
43233: PUSH
43234: LD_INT 1
43236: PUSH
43237: LD_INT 1
43239: NEG
43240: PUSH
43241: EMPTY
43242: LIST
43243: LIST
43244: PUSH
43245: LD_INT 2
43247: PUSH
43248: LD_INT 0
43250: PUSH
43251: EMPTY
43252: LIST
43253: LIST
43254: PUSH
43255: LD_INT 2
43257: PUSH
43258: LD_INT 1
43260: PUSH
43261: EMPTY
43262: LIST
43263: LIST
43264: PUSH
43265: LD_INT 2
43267: PUSH
43268: LD_INT 2
43270: PUSH
43271: EMPTY
43272: LIST
43273: LIST
43274: PUSH
43275: LD_INT 1
43277: PUSH
43278: LD_INT 2
43280: PUSH
43281: EMPTY
43282: LIST
43283: LIST
43284: PUSH
43285: LD_INT 0
43287: PUSH
43288: LD_INT 2
43290: PUSH
43291: EMPTY
43292: LIST
43293: LIST
43294: PUSH
43295: LD_INT 1
43297: NEG
43298: PUSH
43299: LD_INT 1
43301: PUSH
43302: EMPTY
43303: LIST
43304: LIST
43305: PUSH
43306: LD_INT 2
43308: NEG
43309: PUSH
43310: LD_INT 0
43312: PUSH
43313: EMPTY
43314: LIST
43315: LIST
43316: PUSH
43317: LD_INT 2
43319: NEG
43320: PUSH
43321: LD_INT 1
43323: NEG
43324: PUSH
43325: EMPTY
43326: LIST
43327: LIST
43328: PUSH
43329: LD_INT 2
43331: NEG
43332: PUSH
43333: LD_INT 2
43335: NEG
43336: PUSH
43337: EMPTY
43338: LIST
43339: LIST
43340: PUSH
43341: EMPTY
43342: LIST
43343: LIST
43344: LIST
43345: LIST
43346: LIST
43347: LIST
43348: LIST
43349: LIST
43350: LIST
43351: LIST
43352: LIST
43353: LIST
43354: LIST
43355: LIST
43356: LIST
43357: LIST
43358: LIST
43359: LIST
43360: LIST
43361: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43362: LD_ADDR_VAR 0 57
43366: PUSH
43367: LD_INT 0
43369: PUSH
43370: LD_INT 0
43372: PUSH
43373: EMPTY
43374: LIST
43375: LIST
43376: PUSH
43377: LD_INT 0
43379: PUSH
43380: LD_INT 1
43382: NEG
43383: PUSH
43384: EMPTY
43385: LIST
43386: LIST
43387: PUSH
43388: LD_INT 1
43390: PUSH
43391: LD_INT 0
43393: PUSH
43394: EMPTY
43395: LIST
43396: LIST
43397: PUSH
43398: LD_INT 1
43400: PUSH
43401: LD_INT 1
43403: PUSH
43404: EMPTY
43405: LIST
43406: LIST
43407: PUSH
43408: LD_INT 0
43410: PUSH
43411: LD_INT 1
43413: PUSH
43414: EMPTY
43415: LIST
43416: LIST
43417: PUSH
43418: LD_INT 1
43420: NEG
43421: PUSH
43422: LD_INT 0
43424: PUSH
43425: EMPTY
43426: LIST
43427: LIST
43428: PUSH
43429: LD_INT 1
43431: NEG
43432: PUSH
43433: LD_INT 1
43435: NEG
43436: PUSH
43437: EMPTY
43438: LIST
43439: LIST
43440: PUSH
43441: LD_INT 1
43443: NEG
43444: PUSH
43445: LD_INT 2
43447: NEG
43448: PUSH
43449: EMPTY
43450: LIST
43451: LIST
43452: PUSH
43453: LD_INT 0
43455: PUSH
43456: LD_INT 2
43458: NEG
43459: PUSH
43460: EMPTY
43461: LIST
43462: LIST
43463: PUSH
43464: LD_INT 1
43466: PUSH
43467: LD_INT 1
43469: NEG
43470: PUSH
43471: EMPTY
43472: LIST
43473: LIST
43474: PUSH
43475: LD_INT 2
43477: PUSH
43478: LD_INT 0
43480: PUSH
43481: EMPTY
43482: LIST
43483: LIST
43484: PUSH
43485: LD_INT 2
43487: PUSH
43488: LD_INT 1
43490: PUSH
43491: EMPTY
43492: LIST
43493: LIST
43494: PUSH
43495: LD_INT 2
43497: PUSH
43498: LD_INT 2
43500: PUSH
43501: EMPTY
43502: LIST
43503: LIST
43504: PUSH
43505: LD_INT 1
43507: PUSH
43508: LD_INT 2
43510: PUSH
43511: EMPTY
43512: LIST
43513: LIST
43514: PUSH
43515: LD_INT 0
43517: PUSH
43518: LD_INT 2
43520: PUSH
43521: EMPTY
43522: LIST
43523: LIST
43524: PUSH
43525: LD_INT 1
43527: NEG
43528: PUSH
43529: LD_INT 1
43531: PUSH
43532: EMPTY
43533: LIST
43534: LIST
43535: PUSH
43536: LD_INT 2
43538: NEG
43539: PUSH
43540: LD_INT 0
43542: PUSH
43543: EMPTY
43544: LIST
43545: LIST
43546: PUSH
43547: LD_INT 2
43549: NEG
43550: PUSH
43551: LD_INT 1
43553: NEG
43554: PUSH
43555: EMPTY
43556: LIST
43557: LIST
43558: PUSH
43559: LD_INT 2
43561: NEG
43562: PUSH
43563: LD_INT 2
43565: NEG
43566: PUSH
43567: EMPTY
43568: LIST
43569: LIST
43570: PUSH
43571: EMPTY
43572: LIST
43573: LIST
43574: LIST
43575: LIST
43576: LIST
43577: LIST
43578: LIST
43579: LIST
43580: LIST
43581: LIST
43582: LIST
43583: LIST
43584: LIST
43585: LIST
43586: LIST
43587: LIST
43588: LIST
43589: LIST
43590: LIST
43591: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43592: LD_ADDR_VAR 0 58
43596: PUSH
43597: LD_INT 0
43599: PUSH
43600: LD_INT 0
43602: PUSH
43603: EMPTY
43604: LIST
43605: LIST
43606: PUSH
43607: LD_INT 0
43609: PUSH
43610: LD_INT 1
43612: NEG
43613: PUSH
43614: EMPTY
43615: LIST
43616: LIST
43617: PUSH
43618: LD_INT 1
43620: PUSH
43621: LD_INT 0
43623: PUSH
43624: EMPTY
43625: LIST
43626: LIST
43627: PUSH
43628: LD_INT 1
43630: PUSH
43631: LD_INT 1
43633: PUSH
43634: EMPTY
43635: LIST
43636: LIST
43637: PUSH
43638: LD_INT 0
43640: PUSH
43641: LD_INT 1
43643: PUSH
43644: EMPTY
43645: LIST
43646: LIST
43647: PUSH
43648: LD_INT 1
43650: NEG
43651: PUSH
43652: LD_INT 0
43654: PUSH
43655: EMPTY
43656: LIST
43657: LIST
43658: PUSH
43659: LD_INT 1
43661: NEG
43662: PUSH
43663: LD_INT 1
43665: NEG
43666: PUSH
43667: EMPTY
43668: LIST
43669: LIST
43670: PUSH
43671: LD_INT 1
43673: NEG
43674: PUSH
43675: LD_INT 2
43677: NEG
43678: PUSH
43679: EMPTY
43680: LIST
43681: LIST
43682: PUSH
43683: LD_INT 0
43685: PUSH
43686: LD_INT 2
43688: NEG
43689: PUSH
43690: EMPTY
43691: LIST
43692: LIST
43693: PUSH
43694: LD_INT 1
43696: PUSH
43697: LD_INT 1
43699: NEG
43700: PUSH
43701: EMPTY
43702: LIST
43703: LIST
43704: PUSH
43705: LD_INT 2
43707: PUSH
43708: LD_INT 0
43710: PUSH
43711: EMPTY
43712: LIST
43713: LIST
43714: PUSH
43715: LD_INT 2
43717: PUSH
43718: LD_INT 1
43720: PUSH
43721: EMPTY
43722: LIST
43723: LIST
43724: PUSH
43725: LD_INT 2
43727: PUSH
43728: LD_INT 2
43730: PUSH
43731: EMPTY
43732: LIST
43733: LIST
43734: PUSH
43735: LD_INT 1
43737: PUSH
43738: LD_INT 2
43740: PUSH
43741: EMPTY
43742: LIST
43743: LIST
43744: PUSH
43745: LD_INT 0
43747: PUSH
43748: LD_INT 2
43750: PUSH
43751: EMPTY
43752: LIST
43753: LIST
43754: PUSH
43755: LD_INT 1
43757: NEG
43758: PUSH
43759: LD_INT 1
43761: PUSH
43762: EMPTY
43763: LIST
43764: LIST
43765: PUSH
43766: LD_INT 2
43768: NEG
43769: PUSH
43770: LD_INT 0
43772: PUSH
43773: EMPTY
43774: LIST
43775: LIST
43776: PUSH
43777: LD_INT 2
43779: NEG
43780: PUSH
43781: LD_INT 1
43783: NEG
43784: PUSH
43785: EMPTY
43786: LIST
43787: LIST
43788: PUSH
43789: LD_INT 2
43791: NEG
43792: PUSH
43793: LD_INT 2
43795: NEG
43796: PUSH
43797: EMPTY
43798: LIST
43799: LIST
43800: PUSH
43801: EMPTY
43802: LIST
43803: LIST
43804: LIST
43805: LIST
43806: LIST
43807: LIST
43808: LIST
43809: LIST
43810: LIST
43811: LIST
43812: LIST
43813: LIST
43814: LIST
43815: LIST
43816: LIST
43817: LIST
43818: LIST
43819: LIST
43820: LIST
43821: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43822: LD_ADDR_VAR 0 59
43826: PUSH
43827: LD_INT 0
43829: PUSH
43830: LD_INT 0
43832: PUSH
43833: EMPTY
43834: LIST
43835: LIST
43836: PUSH
43837: LD_INT 0
43839: PUSH
43840: LD_INT 1
43842: NEG
43843: PUSH
43844: EMPTY
43845: LIST
43846: LIST
43847: PUSH
43848: LD_INT 1
43850: PUSH
43851: LD_INT 0
43853: PUSH
43854: EMPTY
43855: LIST
43856: LIST
43857: PUSH
43858: LD_INT 1
43860: PUSH
43861: LD_INT 1
43863: PUSH
43864: EMPTY
43865: LIST
43866: LIST
43867: PUSH
43868: LD_INT 0
43870: PUSH
43871: LD_INT 1
43873: PUSH
43874: EMPTY
43875: LIST
43876: LIST
43877: PUSH
43878: LD_INT 1
43880: NEG
43881: PUSH
43882: LD_INT 0
43884: PUSH
43885: EMPTY
43886: LIST
43887: LIST
43888: PUSH
43889: LD_INT 1
43891: NEG
43892: PUSH
43893: LD_INT 1
43895: NEG
43896: PUSH
43897: EMPTY
43898: LIST
43899: LIST
43900: PUSH
43901: EMPTY
43902: LIST
43903: LIST
43904: LIST
43905: LIST
43906: LIST
43907: LIST
43908: LIST
43909: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43910: LD_ADDR_VAR 0 60
43914: PUSH
43915: LD_INT 0
43917: PUSH
43918: LD_INT 0
43920: PUSH
43921: EMPTY
43922: LIST
43923: LIST
43924: PUSH
43925: LD_INT 0
43927: PUSH
43928: LD_INT 1
43930: NEG
43931: PUSH
43932: EMPTY
43933: LIST
43934: LIST
43935: PUSH
43936: LD_INT 1
43938: PUSH
43939: LD_INT 0
43941: PUSH
43942: EMPTY
43943: LIST
43944: LIST
43945: PUSH
43946: LD_INT 1
43948: PUSH
43949: LD_INT 1
43951: PUSH
43952: EMPTY
43953: LIST
43954: LIST
43955: PUSH
43956: LD_INT 0
43958: PUSH
43959: LD_INT 1
43961: PUSH
43962: EMPTY
43963: LIST
43964: LIST
43965: PUSH
43966: LD_INT 1
43968: NEG
43969: PUSH
43970: LD_INT 0
43972: PUSH
43973: EMPTY
43974: LIST
43975: LIST
43976: PUSH
43977: LD_INT 1
43979: NEG
43980: PUSH
43981: LD_INT 1
43983: NEG
43984: PUSH
43985: EMPTY
43986: LIST
43987: LIST
43988: PUSH
43989: EMPTY
43990: LIST
43991: LIST
43992: LIST
43993: LIST
43994: LIST
43995: LIST
43996: LIST
43997: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43998: LD_ADDR_VAR 0 61
44002: PUSH
44003: LD_INT 0
44005: PUSH
44006: LD_INT 0
44008: PUSH
44009: EMPTY
44010: LIST
44011: LIST
44012: PUSH
44013: LD_INT 0
44015: PUSH
44016: LD_INT 1
44018: NEG
44019: PUSH
44020: EMPTY
44021: LIST
44022: LIST
44023: PUSH
44024: LD_INT 1
44026: PUSH
44027: LD_INT 0
44029: PUSH
44030: EMPTY
44031: LIST
44032: LIST
44033: PUSH
44034: LD_INT 1
44036: PUSH
44037: LD_INT 1
44039: PUSH
44040: EMPTY
44041: LIST
44042: LIST
44043: PUSH
44044: LD_INT 0
44046: PUSH
44047: LD_INT 1
44049: PUSH
44050: EMPTY
44051: LIST
44052: LIST
44053: PUSH
44054: LD_INT 1
44056: NEG
44057: PUSH
44058: LD_INT 0
44060: PUSH
44061: EMPTY
44062: LIST
44063: LIST
44064: PUSH
44065: LD_INT 1
44067: NEG
44068: PUSH
44069: LD_INT 1
44071: NEG
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: LIST
44081: LIST
44082: LIST
44083: LIST
44084: LIST
44085: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44086: LD_ADDR_VAR 0 62
44090: PUSH
44091: LD_INT 0
44093: PUSH
44094: LD_INT 0
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: PUSH
44101: LD_INT 0
44103: PUSH
44104: LD_INT 1
44106: NEG
44107: PUSH
44108: EMPTY
44109: LIST
44110: LIST
44111: PUSH
44112: LD_INT 1
44114: PUSH
44115: LD_INT 0
44117: PUSH
44118: EMPTY
44119: LIST
44120: LIST
44121: PUSH
44122: LD_INT 1
44124: PUSH
44125: LD_INT 1
44127: PUSH
44128: EMPTY
44129: LIST
44130: LIST
44131: PUSH
44132: LD_INT 0
44134: PUSH
44135: LD_INT 1
44137: PUSH
44138: EMPTY
44139: LIST
44140: LIST
44141: PUSH
44142: LD_INT 1
44144: NEG
44145: PUSH
44146: LD_INT 0
44148: PUSH
44149: EMPTY
44150: LIST
44151: LIST
44152: PUSH
44153: LD_INT 1
44155: NEG
44156: PUSH
44157: LD_INT 1
44159: NEG
44160: PUSH
44161: EMPTY
44162: LIST
44163: LIST
44164: PUSH
44165: EMPTY
44166: LIST
44167: LIST
44168: LIST
44169: LIST
44170: LIST
44171: LIST
44172: LIST
44173: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44174: LD_ADDR_VAR 0 63
44178: PUSH
44179: LD_INT 0
44181: PUSH
44182: LD_INT 0
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: PUSH
44189: LD_INT 0
44191: PUSH
44192: LD_INT 1
44194: NEG
44195: PUSH
44196: EMPTY
44197: LIST
44198: LIST
44199: PUSH
44200: LD_INT 1
44202: PUSH
44203: LD_INT 0
44205: PUSH
44206: EMPTY
44207: LIST
44208: LIST
44209: PUSH
44210: LD_INT 1
44212: PUSH
44213: LD_INT 1
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: PUSH
44220: LD_INT 0
44222: PUSH
44223: LD_INT 1
44225: PUSH
44226: EMPTY
44227: LIST
44228: LIST
44229: PUSH
44230: LD_INT 1
44232: NEG
44233: PUSH
44234: LD_INT 0
44236: PUSH
44237: EMPTY
44238: LIST
44239: LIST
44240: PUSH
44241: LD_INT 1
44243: NEG
44244: PUSH
44245: LD_INT 1
44247: NEG
44248: PUSH
44249: EMPTY
44250: LIST
44251: LIST
44252: PUSH
44253: EMPTY
44254: LIST
44255: LIST
44256: LIST
44257: LIST
44258: LIST
44259: LIST
44260: LIST
44261: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44262: LD_ADDR_VAR 0 64
44266: PUSH
44267: LD_INT 0
44269: PUSH
44270: LD_INT 0
44272: PUSH
44273: EMPTY
44274: LIST
44275: LIST
44276: PUSH
44277: LD_INT 0
44279: PUSH
44280: LD_INT 1
44282: NEG
44283: PUSH
44284: EMPTY
44285: LIST
44286: LIST
44287: PUSH
44288: LD_INT 1
44290: PUSH
44291: LD_INT 0
44293: PUSH
44294: EMPTY
44295: LIST
44296: LIST
44297: PUSH
44298: LD_INT 1
44300: PUSH
44301: LD_INT 1
44303: PUSH
44304: EMPTY
44305: LIST
44306: LIST
44307: PUSH
44308: LD_INT 0
44310: PUSH
44311: LD_INT 1
44313: PUSH
44314: EMPTY
44315: LIST
44316: LIST
44317: PUSH
44318: LD_INT 1
44320: NEG
44321: PUSH
44322: LD_INT 0
44324: PUSH
44325: EMPTY
44326: LIST
44327: LIST
44328: PUSH
44329: LD_INT 1
44331: NEG
44332: PUSH
44333: LD_INT 1
44335: NEG
44336: PUSH
44337: EMPTY
44338: LIST
44339: LIST
44340: PUSH
44341: EMPTY
44342: LIST
44343: LIST
44344: LIST
44345: LIST
44346: LIST
44347: LIST
44348: LIST
44349: ST_TO_ADDR
// end ; 1 :
44350: GO 50247
44352: LD_INT 1
44354: DOUBLE
44355: EQUAL
44356: IFTRUE 44360
44358: GO 46983
44360: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44361: LD_ADDR_VAR 0 11
44365: PUSH
44366: LD_INT 1
44368: NEG
44369: PUSH
44370: LD_INT 3
44372: NEG
44373: PUSH
44374: EMPTY
44375: LIST
44376: LIST
44377: PUSH
44378: LD_INT 0
44380: PUSH
44381: LD_INT 3
44383: NEG
44384: PUSH
44385: EMPTY
44386: LIST
44387: LIST
44388: PUSH
44389: LD_INT 1
44391: PUSH
44392: LD_INT 2
44394: NEG
44395: PUSH
44396: EMPTY
44397: LIST
44398: LIST
44399: PUSH
44400: EMPTY
44401: LIST
44402: LIST
44403: LIST
44404: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44405: LD_ADDR_VAR 0 12
44409: PUSH
44410: LD_INT 2
44412: PUSH
44413: LD_INT 1
44415: NEG
44416: PUSH
44417: EMPTY
44418: LIST
44419: LIST
44420: PUSH
44421: LD_INT 3
44423: PUSH
44424: LD_INT 0
44426: PUSH
44427: EMPTY
44428: LIST
44429: LIST
44430: PUSH
44431: LD_INT 3
44433: PUSH
44434: LD_INT 1
44436: PUSH
44437: EMPTY
44438: LIST
44439: LIST
44440: PUSH
44441: EMPTY
44442: LIST
44443: LIST
44444: LIST
44445: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44446: LD_ADDR_VAR 0 13
44450: PUSH
44451: LD_INT 3
44453: PUSH
44454: LD_INT 2
44456: PUSH
44457: EMPTY
44458: LIST
44459: LIST
44460: PUSH
44461: LD_INT 3
44463: PUSH
44464: LD_INT 3
44466: PUSH
44467: EMPTY
44468: LIST
44469: LIST
44470: PUSH
44471: LD_INT 2
44473: PUSH
44474: LD_INT 3
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: PUSH
44481: EMPTY
44482: LIST
44483: LIST
44484: LIST
44485: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44486: LD_ADDR_VAR 0 14
44490: PUSH
44491: LD_INT 1
44493: PUSH
44494: LD_INT 3
44496: PUSH
44497: EMPTY
44498: LIST
44499: LIST
44500: PUSH
44501: LD_INT 0
44503: PUSH
44504: LD_INT 3
44506: PUSH
44507: EMPTY
44508: LIST
44509: LIST
44510: PUSH
44511: LD_INT 1
44513: NEG
44514: PUSH
44515: LD_INT 2
44517: PUSH
44518: EMPTY
44519: LIST
44520: LIST
44521: PUSH
44522: EMPTY
44523: LIST
44524: LIST
44525: LIST
44526: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44527: LD_ADDR_VAR 0 15
44531: PUSH
44532: LD_INT 2
44534: NEG
44535: PUSH
44536: LD_INT 1
44538: PUSH
44539: EMPTY
44540: LIST
44541: LIST
44542: PUSH
44543: LD_INT 3
44545: NEG
44546: PUSH
44547: LD_INT 0
44549: PUSH
44550: EMPTY
44551: LIST
44552: LIST
44553: PUSH
44554: LD_INT 3
44556: NEG
44557: PUSH
44558: LD_INT 1
44560: NEG
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: LIST
44570: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44571: LD_ADDR_VAR 0 16
44575: PUSH
44576: LD_INT 2
44578: NEG
44579: PUSH
44580: LD_INT 3
44582: NEG
44583: PUSH
44584: EMPTY
44585: LIST
44586: LIST
44587: PUSH
44588: LD_INT 3
44590: NEG
44591: PUSH
44592: LD_INT 2
44594: NEG
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: PUSH
44600: LD_INT 3
44602: NEG
44603: PUSH
44604: LD_INT 3
44606: NEG
44607: PUSH
44608: EMPTY
44609: LIST
44610: LIST
44611: PUSH
44612: EMPTY
44613: LIST
44614: LIST
44615: LIST
44616: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44617: LD_ADDR_VAR 0 17
44621: PUSH
44622: LD_INT 1
44624: NEG
44625: PUSH
44626: LD_INT 3
44628: NEG
44629: PUSH
44630: EMPTY
44631: LIST
44632: LIST
44633: PUSH
44634: LD_INT 0
44636: PUSH
44637: LD_INT 3
44639: NEG
44640: PUSH
44641: EMPTY
44642: LIST
44643: LIST
44644: PUSH
44645: LD_INT 1
44647: PUSH
44648: LD_INT 2
44650: NEG
44651: PUSH
44652: EMPTY
44653: LIST
44654: LIST
44655: PUSH
44656: EMPTY
44657: LIST
44658: LIST
44659: LIST
44660: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44661: LD_ADDR_VAR 0 18
44665: PUSH
44666: LD_INT 2
44668: PUSH
44669: LD_INT 1
44671: NEG
44672: PUSH
44673: EMPTY
44674: LIST
44675: LIST
44676: PUSH
44677: LD_INT 3
44679: PUSH
44680: LD_INT 0
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: PUSH
44687: LD_INT 3
44689: PUSH
44690: LD_INT 1
44692: PUSH
44693: EMPTY
44694: LIST
44695: LIST
44696: PUSH
44697: EMPTY
44698: LIST
44699: LIST
44700: LIST
44701: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44702: LD_ADDR_VAR 0 19
44706: PUSH
44707: LD_INT 3
44709: PUSH
44710: LD_INT 2
44712: PUSH
44713: EMPTY
44714: LIST
44715: LIST
44716: PUSH
44717: LD_INT 3
44719: PUSH
44720: LD_INT 3
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: PUSH
44727: LD_INT 2
44729: PUSH
44730: LD_INT 3
44732: PUSH
44733: EMPTY
44734: LIST
44735: LIST
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: LIST
44741: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44742: LD_ADDR_VAR 0 20
44746: PUSH
44747: LD_INT 1
44749: PUSH
44750: LD_INT 3
44752: PUSH
44753: EMPTY
44754: LIST
44755: LIST
44756: PUSH
44757: LD_INT 0
44759: PUSH
44760: LD_INT 3
44762: PUSH
44763: EMPTY
44764: LIST
44765: LIST
44766: PUSH
44767: LD_INT 1
44769: NEG
44770: PUSH
44771: LD_INT 2
44773: PUSH
44774: EMPTY
44775: LIST
44776: LIST
44777: PUSH
44778: EMPTY
44779: LIST
44780: LIST
44781: LIST
44782: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44783: LD_ADDR_VAR 0 21
44787: PUSH
44788: LD_INT 2
44790: NEG
44791: PUSH
44792: LD_INT 1
44794: PUSH
44795: EMPTY
44796: LIST
44797: LIST
44798: PUSH
44799: LD_INT 3
44801: NEG
44802: PUSH
44803: LD_INT 0
44805: PUSH
44806: EMPTY
44807: LIST
44808: LIST
44809: PUSH
44810: LD_INT 3
44812: NEG
44813: PUSH
44814: LD_INT 1
44816: NEG
44817: PUSH
44818: EMPTY
44819: LIST
44820: LIST
44821: PUSH
44822: EMPTY
44823: LIST
44824: LIST
44825: LIST
44826: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44827: LD_ADDR_VAR 0 22
44831: PUSH
44832: LD_INT 2
44834: NEG
44835: PUSH
44836: LD_INT 3
44838: NEG
44839: PUSH
44840: EMPTY
44841: LIST
44842: LIST
44843: PUSH
44844: LD_INT 3
44846: NEG
44847: PUSH
44848: LD_INT 2
44850: NEG
44851: PUSH
44852: EMPTY
44853: LIST
44854: LIST
44855: PUSH
44856: LD_INT 3
44858: NEG
44859: PUSH
44860: LD_INT 3
44862: NEG
44863: PUSH
44864: EMPTY
44865: LIST
44866: LIST
44867: PUSH
44868: EMPTY
44869: LIST
44870: LIST
44871: LIST
44872: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
44873: LD_ADDR_VAR 0 23
44877: PUSH
44878: LD_INT 0
44880: PUSH
44881: LD_INT 3
44883: NEG
44884: PUSH
44885: EMPTY
44886: LIST
44887: LIST
44888: PUSH
44889: LD_INT 1
44891: NEG
44892: PUSH
44893: LD_INT 4
44895: NEG
44896: PUSH
44897: EMPTY
44898: LIST
44899: LIST
44900: PUSH
44901: LD_INT 1
44903: PUSH
44904: LD_INT 3
44906: NEG
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: PUSH
44912: EMPTY
44913: LIST
44914: LIST
44915: LIST
44916: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
44917: LD_ADDR_VAR 0 24
44921: PUSH
44922: LD_INT 3
44924: PUSH
44925: LD_INT 0
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: PUSH
44932: LD_INT 3
44934: PUSH
44935: LD_INT 1
44937: NEG
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PUSH
44943: LD_INT 4
44945: PUSH
44946: LD_INT 1
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: PUSH
44953: EMPTY
44954: LIST
44955: LIST
44956: LIST
44957: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
44958: LD_ADDR_VAR 0 25
44962: PUSH
44963: LD_INT 3
44965: PUSH
44966: LD_INT 3
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: PUSH
44973: LD_INT 4
44975: PUSH
44976: LD_INT 3
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: PUSH
44983: LD_INT 3
44985: PUSH
44986: LD_INT 4
44988: PUSH
44989: EMPTY
44990: LIST
44991: LIST
44992: PUSH
44993: EMPTY
44994: LIST
44995: LIST
44996: LIST
44997: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
44998: LD_ADDR_VAR 0 26
45002: PUSH
45003: LD_INT 0
45005: PUSH
45006: LD_INT 3
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: PUSH
45013: LD_INT 1
45015: PUSH
45016: LD_INT 4
45018: PUSH
45019: EMPTY
45020: LIST
45021: LIST
45022: PUSH
45023: LD_INT 1
45025: NEG
45026: PUSH
45027: LD_INT 3
45029: PUSH
45030: EMPTY
45031: LIST
45032: LIST
45033: PUSH
45034: EMPTY
45035: LIST
45036: LIST
45037: LIST
45038: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
45039: LD_ADDR_VAR 0 27
45043: PUSH
45044: LD_INT 3
45046: NEG
45047: PUSH
45048: LD_INT 0
45050: PUSH
45051: EMPTY
45052: LIST
45053: LIST
45054: PUSH
45055: LD_INT 3
45057: NEG
45058: PUSH
45059: LD_INT 1
45061: PUSH
45062: EMPTY
45063: LIST
45064: LIST
45065: PUSH
45066: LD_INT 4
45068: NEG
45069: PUSH
45070: LD_INT 1
45072: NEG
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: LIST
45082: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
45083: LD_ADDR_VAR 0 28
45087: PUSH
45088: LD_INT 3
45090: NEG
45091: PUSH
45092: LD_INT 3
45094: NEG
45095: PUSH
45096: EMPTY
45097: LIST
45098: LIST
45099: PUSH
45100: LD_INT 3
45102: NEG
45103: PUSH
45104: LD_INT 4
45106: NEG
45107: PUSH
45108: EMPTY
45109: LIST
45110: LIST
45111: PUSH
45112: LD_INT 4
45114: NEG
45115: PUSH
45116: LD_INT 3
45118: NEG
45119: PUSH
45120: EMPTY
45121: LIST
45122: LIST
45123: PUSH
45124: EMPTY
45125: LIST
45126: LIST
45127: LIST
45128: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
45129: LD_ADDR_VAR 0 29
45133: PUSH
45134: LD_INT 1
45136: NEG
45137: PUSH
45138: LD_INT 3
45140: NEG
45141: PUSH
45142: EMPTY
45143: LIST
45144: LIST
45145: PUSH
45146: LD_INT 0
45148: PUSH
45149: LD_INT 3
45151: NEG
45152: PUSH
45153: EMPTY
45154: LIST
45155: LIST
45156: PUSH
45157: LD_INT 1
45159: PUSH
45160: LD_INT 2
45162: NEG
45163: PUSH
45164: EMPTY
45165: LIST
45166: LIST
45167: PUSH
45168: LD_INT 1
45170: NEG
45171: PUSH
45172: LD_INT 4
45174: NEG
45175: PUSH
45176: EMPTY
45177: LIST
45178: LIST
45179: PUSH
45180: LD_INT 0
45182: PUSH
45183: LD_INT 4
45185: NEG
45186: PUSH
45187: EMPTY
45188: LIST
45189: LIST
45190: PUSH
45191: LD_INT 1
45193: PUSH
45194: LD_INT 3
45196: NEG
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: PUSH
45202: LD_INT 1
45204: NEG
45205: PUSH
45206: LD_INT 5
45208: NEG
45209: PUSH
45210: EMPTY
45211: LIST
45212: LIST
45213: PUSH
45214: LD_INT 0
45216: PUSH
45217: LD_INT 5
45219: NEG
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: PUSH
45225: LD_INT 1
45227: PUSH
45228: LD_INT 4
45230: NEG
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: PUSH
45236: LD_INT 1
45238: NEG
45239: PUSH
45240: LD_INT 6
45242: NEG
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: PUSH
45248: LD_INT 0
45250: PUSH
45251: LD_INT 6
45253: NEG
45254: PUSH
45255: EMPTY
45256: LIST
45257: LIST
45258: PUSH
45259: LD_INT 1
45261: PUSH
45262: LD_INT 5
45264: NEG
45265: PUSH
45266: EMPTY
45267: LIST
45268: LIST
45269: PUSH
45270: EMPTY
45271: LIST
45272: LIST
45273: LIST
45274: LIST
45275: LIST
45276: LIST
45277: LIST
45278: LIST
45279: LIST
45280: LIST
45281: LIST
45282: LIST
45283: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
45284: LD_ADDR_VAR 0 30
45288: PUSH
45289: LD_INT 2
45291: PUSH
45292: LD_INT 1
45294: NEG
45295: PUSH
45296: EMPTY
45297: LIST
45298: LIST
45299: PUSH
45300: LD_INT 3
45302: PUSH
45303: LD_INT 0
45305: PUSH
45306: EMPTY
45307: LIST
45308: LIST
45309: PUSH
45310: LD_INT 3
45312: PUSH
45313: LD_INT 1
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: PUSH
45320: LD_INT 3
45322: PUSH
45323: LD_INT 1
45325: NEG
45326: PUSH
45327: EMPTY
45328: LIST
45329: LIST
45330: PUSH
45331: LD_INT 4
45333: PUSH
45334: LD_INT 0
45336: PUSH
45337: EMPTY
45338: LIST
45339: LIST
45340: PUSH
45341: LD_INT 4
45343: PUSH
45344: LD_INT 1
45346: PUSH
45347: EMPTY
45348: LIST
45349: LIST
45350: PUSH
45351: LD_INT 4
45353: PUSH
45354: LD_INT 1
45356: NEG
45357: PUSH
45358: EMPTY
45359: LIST
45360: LIST
45361: PUSH
45362: LD_INT 5
45364: PUSH
45365: LD_INT 0
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: PUSH
45372: LD_INT 5
45374: PUSH
45375: LD_INT 1
45377: PUSH
45378: EMPTY
45379: LIST
45380: LIST
45381: PUSH
45382: LD_INT 5
45384: PUSH
45385: LD_INT 1
45387: NEG
45388: PUSH
45389: EMPTY
45390: LIST
45391: LIST
45392: PUSH
45393: LD_INT 6
45395: PUSH
45396: LD_INT 0
45398: PUSH
45399: EMPTY
45400: LIST
45401: LIST
45402: PUSH
45403: LD_INT 6
45405: PUSH
45406: LD_INT 1
45408: PUSH
45409: EMPTY
45410: LIST
45411: LIST
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: LIST
45417: LIST
45418: LIST
45419: LIST
45420: LIST
45421: LIST
45422: LIST
45423: LIST
45424: LIST
45425: LIST
45426: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
45427: LD_ADDR_VAR 0 31
45431: PUSH
45432: LD_INT 3
45434: PUSH
45435: LD_INT 2
45437: PUSH
45438: EMPTY
45439: LIST
45440: LIST
45441: PUSH
45442: LD_INT 3
45444: PUSH
45445: LD_INT 3
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: PUSH
45452: LD_INT 2
45454: PUSH
45455: LD_INT 3
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: LD_INT 4
45464: PUSH
45465: LD_INT 3
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: PUSH
45472: LD_INT 4
45474: PUSH
45475: LD_INT 4
45477: PUSH
45478: EMPTY
45479: LIST
45480: LIST
45481: PUSH
45482: LD_INT 3
45484: PUSH
45485: LD_INT 4
45487: PUSH
45488: EMPTY
45489: LIST
45490: LIST
45491: PUSH
45492: LD_INT 5
45494: PUSH
45495: LD_INT 4
45497: PUSH
45498: EMPTY
45499: LIST
45500: LIST
45501: PUSH
45502: LD_INT 5
45504: PUSH
45505: LD_INT 5
45507: PUSH
45508: EMPTY
45509: LIST
45510: LIST
45511: PUSH
45512: LD_INT 4
45514: PUSH
45515: LD_INT 5
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: PUSH
45522: LD_INT 6
45524: PUSH
45525: LD_INT 5
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: PUSH
45532: LD_INT 6
45534: PUSH
45535: LD_INT 6
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: PUSH
45542: LD_INT 5
45544: PUSH
45545: LD_INT 6
45547: PUSH
45548: EMPTY
45549: LIST
45550: LIST
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: LIST
45556: LIST
45557: LIST
45558: LIST
45559: LIST
45560: LIST
45561: LIST
45562: LIST
45563: LIST
45564: LIST
45565: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
45566: LD_ADDR_VAR 0 32
45570: PUSH
45571: LD_INT 1
45573: PUSH
45574: LD_INT 3
45576: PUSH
45577: EMPTY
45578: LIST
45579: LIST
45580: PUSH
45581: LD_INT 0
45583: PUSH
45584: LD_INT 3
45586: PUSH
45587: EMPTY
45588: LIST
45589: LIST
45590: PUSH
45591: LD_INT 1
45593: NEG
45594: PUSH
45595: LD_INT 2
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: PUSH
45602: LD_INT 1
45604: PUSH
45605: LD_INT 4
45607: PUSH
45608: EMPTY
45609: LIST
45610: LIST
45611: PUSH
45612: LD_INT 0
45614: PUSH
45615: LD_INT 4
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: PUSH
45622: LD_INT 1
45624: NEG
45625: PUSH
45626: LD_INT 3
45628: PUSH
45629: EMPTY
45630: LIST
45631: LIST
45632: PUSH
45633: LD_INT 1
45635: PUSH
45636: LD_INT 5
45638: PUSH
45639: EMPTY
45640: LIST
45641: LIST
45642: PUSH
45643: LD_INT 0
45645: PUSH
45646: LD_INT 5
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: PUSH
45653: LD_INT 1
45655: NEG
45656: PUSH
45657: LD_INT 4
45659: PUSH
45660: EMPTY
45661: LIST
45662: LIST
45663: PUSH
45664: LD_INT 1
45666: PUSH
45667: LD_INT 6
45669: PUSH
45670: EMPTY
45671: LIST
45672: LIST
45673: PUSH
45674: LD_INT 0
45676: PUSH
45677: LD_INT 6
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: PUSH
45684: LD_INT 1
45686: NEG
45687: PUSH
45688: LD_INT 5
45690: PUSH
45691: EMPTY
45692: LIST
45693: LIST
45694: PUSH
45695: EMPTY
45696: LIST
45697: LIST
45698: LIST
45699: LIST
45700: LIST
45701: LIST
45702: LIST
45703: LIST
45704: LIST
45705: LIST
45706: LIST
45707: LIST
45708: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
45709: LD_ADDR_VAR 0 33
45713: PUSH
45714: LD_INT 2
45716: NEG
45717: PUSH
45718: LD_INT 1
45720: PUSH
45721: EMPTY
45722: LIST
45723: LIST
45724: PUSH
45725: LD_INT 3
45727: NEG
45728: PUSH
45729: LD_INT 0
45731: PUSH
45732: EMPTY
45733: LIST
45734: LIST
45735: PUSH
45736: LD_INT 3
45738: NEG
45739: PUSH
45740: LD_INT 1
45742: NEG
45743: PUSH
45744: EMPTY
45745: LIST
45746: LIST
45747: PUSH
45748: LD_INT 3
45750: NEG
45751: PUSH
45752: LD_INT 1
45754: PUSH
45755: EMPTY
45756: LIST
45757: LIST
45758: PUSH
45759: LD_INT 4
45761: NEG
45762: PUSH
45763: LD_INT 0
45765: PUSH
45766: EMPTY
45767: LIST
45768: LIST
45769: PUSH
45770: LD_INT 4
45772: NEG
45773: PUSH
45774: LD_INT 1
45776: NEG
45777: PUSH
45778: EMPTY
45779: LIST
45780: LIST
45781: PUSH
45782: LD_INT 4
45784: NEG
45785: PUSH
45786: LD_INT 1
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: PUSH
45793: LD_INT 5
45795: NEG
45796: PUSH
45797: LD_INT 0
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: PUSH
45804: LD_INT 5
45806: NEG
45807: PUSH
45808: LD_INT 1
45810: NEG
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: PUSH
45816: LD_INT 5
45818: NEG
45819: PUSH
45820: LD_INT 1
45822: PUSH
45823: EMPTY
45824: LIST
45825: LIST
45826: PUSH
45827: LD_INT 6
45829: NEG
45830: PUSH
45831: LD_INT 0
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: PUSH
45838: LD_INT 6
45840: NEG
45841: PUSH
45842: LD_INT 1
45844: NEG
45845: PUSH
45846: EMPTY
45847: LIST
45848: LIST
45849: PUSH
45850: EMPTY
45851: LIST
45852: LIST
45853: LIST
45854: LIST
45855: LIST
45856: LIST
45857: LIST
45858: LIST
45859: LIST
45860: LIST
45861: LIST
45862: LIST
45863: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
45864: LD_ADDR_VAR 0 34
45868: PUSH
45869: LD_INT 2
45871: NEG
45872: PUSH
45873: LD_INT 3
45875: NEG
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: PUSH
45881: LD_INT 3
45883: NEG
45884: PUSH
45885: LD_INT 2
45887: NEG
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: PUSH
45893: LD_INT 3
45895: NEG
45896: PUSH
45897: LD_INT 3
45899: NEG
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: PUSH
45905: LD_INT 3
45907: NEG
45908: PUSH
45909: LD_INT 4
45911: NEG
45912: PUSH
45913: EMPTY
45914: LIST
45915: LIST
45916: PUSH
45917: LD_INT 4
45919: NEG
45920: PUSH
45921: LD_INT 3
45923: NEG
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: PUSH
45929: LD_INT 4
45931: NEG
45932: PUSH
45933: LD_INT 4
45935: NEG
45936: PUSH
45937: EMPTY
45938: LIST
45939: LIST
45940: PUSH
45941: LD_INT 4
45943: NEG
45944: PUSH
45945: LD_INT 5
45947: NEG
45948: PUSH
45949: EMPTY
45950: LIST
45951: LIST
45952: PUSH
45953: LD_INT 5
45955: NEG
45956: PUSH
45957: LD_INT 4
45959: NEG
45960: PUSH
45961: EMPTY
45962: LIST
45963: LIST
45964: PUSH
45965: LD_INT 5
45967: NEG
45968: PUSH
45969: LD_INT 5
45971: NEG
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: PUSH
45977: LD_INT 5
45979: NEG
45980: PUSH
45981: LD_INT 6
45983: NEG
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: LD_INT 6
45991: NEG
45992: PUSH
45993: LD_INT 5
45995: NEG
45996: PUSH
45997: EMPTY
45998: LIST
45999: LIST
46000: PUSH
46001: LD_INT 6
46003: NEG
46004: PUSH
46005: LD_INT 6
46007: NEG
46008: PUSH
46009: EMPTY
46010: LIST
46011: LIST
46012: PUSH
46013: EMPTY
46014: LIST
46015: LIST
46016: LIST
46017: LIST
46018: LIST
46019: LIST
46020: LIST
46021: LIST
46022: LIST
46023: LIST
46024: LIST
46025: LIST
46026: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
46027: LD_ADDR_VAR 0 41
46031: PUSH
46032: LD_INT 0
46034: PUSH
46035: LD_INT 2
46037: NEG
46038: PUSH
46039: EMPTY
46040: LIST
46041: LIST
46042: PUSH
46043: LD_INT 1
46045: NEG
46046: PUSH
46047: LD_INT 3
46049: NEG
46050: PUSH
46051: EMPTY
46052: LIST
46053: LIST
46054: PUSH
46055: LD_INT 1
46057: PUSH
46058: LD_INT 2
46060: NEG
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: PUSH
46066: EMPTY
46067: LIST
46068: LIST
46069: LIST
46070: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
46071: LD_ADDR_VAR 0 42
46075: PUSH
46076: LD_INT 2
46078: PUSH
46079: LD_INT 0
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: LD_INT 2
46088: PUSH
46089: LD_INT 1
46091: NEG
46092: PUSH
46093: EMPTY
46094: LIST
46095: LIST
46096: PUSH
46097: LD_INT 3
46099: PUSH
46100: LD_INT 1
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: LIST
46111: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
46112: LD_ADDR_VAR 0 43
46116: PUSH
46117: LD_INT 2
46119: PUSH
46120: LD_INT 2
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: PUSH
46127: LD_INT 3
46129: PUSH
46130: LD_INT 2
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: PUSH
46137: LD_INT 2
46139: PUSH
46140: LD_INT 3
46142: PUSH
46143: EMPTY
46144: LIST
46145: LIST
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: LIST
46151: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
46152: LD_ADDR_VAR 0 44
46156: PUSH
46157: LD_INT 0
46159: PUSH
46160: LD_INT 2
46162: PUSH
46163: EMPTY
46164: LIST
46165: LIST
46166: PUSH
46167: LD_INT 1
46169: PUSH
46170: LD_INT 3
46172: PUSH
46173: EMPTY
46174: LIST
46175: LIST
46176: PUSH
46177: LD_INT 1
46179: NEG
46180: PUSH
46181: LD_INT 2
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: LIST
46192: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46193: LD_ADDR_VAR 0 45
46197: PUSH
46198: LD_INT 2
46200: NEG
46201: PUSH
46202: LD_INT 0
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: PUSH
46209: LD_INT 2
46211: NEG
46212: PUSH
46213: LD_INT 1
46215: PUSH
46216: EMPTY
46217: LIST
46218: LIST
46219: PUSH
46220: LD_INT 3
46222: NEG
46223: PUSH
46224: LD_INT 1
46226: NEG
46227: PUSH
46228: EMPTY
46229: LIST
46230: LIST
46231: PUSH
46232: EMPTY
46233: LIST
46234: LIST
46235: LIST
46236: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
46237: LD_ADDR_VAR 0 46
46241: PUSH
46242: LD_INT 2
46244: NEG
46245: PUSH
46246: LD_INT 2
46248: NEG
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: PUSH
46254: LD_INT 2
46256: NEG
46257: PUSH
46258: LD_INT 3
46260: NEG
46261: PUSH
46262: EMPTY
46263: LIST
46264: LIST
46265: PUSH
46266: LD_INT 3
46268: NEG
46269: PUSH
46270: LD_INT 2
46272: NEG
46273: PUSH
46274: EMPTY
46275: LIST
46276: LIST
46277: PUSH
46278: EMPTY
46279: LIST
46280: LIST
46281: LIST
46282: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
46283: LD_ADDR_VAR 0 47
46287: PUSH
46288: LD_INT 2
46290: NEG
46291: PUSH
46292: LD_INT 3
46294: NEG
46295: PUSH
46296: EMPTY
46297: LIST
46298: LIST
46299: PUSH
46300: LD_INT 1
46302: NEG
46303: PUSH
46304: LD_INT 3
46306: NEG
46307: PUSH
46308: EMPTY
46309: LIST
46310: LIST
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46316: LD_ADDR_VAR 0 48
46320: PUSH
46321: LD_INT 1
46323: PUSH
46324: LD_INT 2
46326: NEG
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: PUSH
46332: LD_INT 2
46334: PUSH
46335: LD_INT 1
46337: NEG
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
46347: LD_ADDR_VAR 0 49
46351: PUSH
46352: LD_INT 3
46354: PUSH
46355: LD_INT 1
46357: PUSH
46358: EMPTY
46359: LIST
46360: LIST
46361: PUSH
46362: LD_INT 3
46364: PUSH
46365: LD_INT 2
46367: PUSH
46368: EMPTY
46369: LIST
46370: LIST
46371: PUSH
46372: EMPTY
46373: LIST
46374: LIST
46375: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
46376: LD_ADDR_VAR 0 50
46380: PUSH
46381: LD_INT 2
46383: PUSH
46384: LD_INT 3
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: PUSH
46391: LD_INT 1
46393: PUSH
46394: LD_INT 3
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: PUSH
46401: EMPTY
46402: LIST
46403: LIST
46404: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
46405: LD_ADDR_VAR 0 51
46409: PUSH
46410: LD_INT 1
46412: NEG
46413: PUSH
46414: LD_INT 2
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: PUSH
46421: LD_INT 2
46423: NEG
46424: PUSH
46425: LD_INT 1
46427: PUSH
46428: EMPTY
46429: LIST
46430: LIST
46431: PUSH
46432: EMPTY
46433: LIST
46434: LIST
46435: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46436: LD_ADDR_VAR 0 52
46440: PUSH
46441: LD_INT 3
46443: NEG
46444: PUSH
46445: LD_INT 1
46447: NEG
46448: PUSH
46449: EMPTY
46450: LIST
46451: LIST
46452: PUSH
46453: LD_INT 3
46455: NEG
46456: PUSH
46457: LD_INT 2
46459: NEG
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46469: LD_ADDR_VAR 0 53
46473: PUSH
46474: LD_INT 1
46476: NEG
46477: PUSH
46478: LD_INT 3
46480: NEG
46481: PUSH
46482: EMPTY
46483: LIST
46484: LIST
46485: PUSH
46486: LD_INT 0
46488: PUSH
46489: LD_INT 3
46491: NEG
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: PUSH
46497: LD_INT 1
46499: PUSH
46500: LD_INT 2
46502: NEG
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: PUSH
46508: EMPTY
46509: LIST
46510: LIST
46511: LIST
46512: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46513: LD_ADDR_VAR 0 54
46517: PUSH
46518: LD_INT 2
46520: PUSH
46521: LD_INT 1
46523: NEG
46524: PUSH
46525: EMPTY
46526: LIST
46527: LIST
46528: PUSH
46529: LD_INT 3
46531: PUSH
46532: LD_INT 0
46534: PUSH
46535: EMPTY
46536: LIST
46537: LIST
46538: PUSH
46539: LD_INT 3
46541: PUSH
46542: LD_INT 1
46544: PUSH
46545: EMPTY
46546: LIST
46547: LIST
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: LIST
46553: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46554: LD_ADDR_VAR 0 55
46558: PUSH
46559: LD_INT 3
46561: PUSH
46562: LD_INT 2
46564: PUSH
46565: EMPTY
46566: LIST
46567: LIST
46568: PUSH
46569: LD_INT 3
46571: PUSH
46572: LD_INT 3
46574: PUSH
46575: EMPTY
46576: LIST
46577: LIST
46578: PUSH
46579: LD_INT 2
46581: PUSH
46582: LD_INT 3
46584: PUSH
46585: EMPTY
46586: LIST
46587: LIST
46588: PUSH
46589: EMPTY
46590: LIST
46591: LIST
46592: LIST
46593: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46594: LD_ADDR_VAR 0 56
46598: PUSH
46599: LD_INT 1
46601: PUSH
46602: LD_INT 3
46604: PUSH
46605: EMPTY
46606: LIST
46607: LIST
46608: PUSH
46609: LD_INT 0
46611: PUSH
46612: LD_INT 3
46614: PUSH
46615: EMPTY
46616: LIST
46617: LIST
46618: PUSH
46619: LD_INT 1
46621: NEG
46622: PUSH
46623: LD_INT 2
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: LIST
46634: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46635: LD_ADDR_VAR 0 57
46639: PUSH
46640: LD_INT 2
46642: NEG
46643: PUSH
46644: LD_INT 1
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: PUSH
46651: LD_INT 3
46653: NEG
46654: PUSH
46655: LD_INT 0
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: PUSH
46662: LD_INT 3
46664: NEG
46665: PUSH
46666: LD_INT 1
46668: NEG
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: LIST
46678: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46679: LD_ADDR_VAR 0 58
46683: PUSH
46684: LD_INT 2
46686: NEG
46687: PUSH
46688: LD_INT 3
46690: NEG
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: PUSH
46696: LD_INT 3
46698: NEG
46699: PUSH
46700: LD_INT 2
46702: NEG
46703: PUSH
46704: EMPTY
46705: LIST
46706: LIST
46707: PUSH
46708: LD_INT 3
46710: NEG
46711: PUSH
46712: LD_INT 3
46714: NEG
46715: PUSH
46716: EMPTY
46717: LIST
46718: LIST
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: LIST
46724: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
46725: LD_ADDR_VAR 0 59
46729: PUSH
46730: LD_INT 1
46732: NEG
46733: PUSH
46734: LD_INT 2
46736: NEG
46737: PUSH
46738: EMPTY
46739: LIST
46740: LIST
46741: PUSH
46742: LD_INT 0
46744: PUSH
46745: LD_INT 2
46747: NEG
46748: PUSH
46749: EMPTY
46750: LIST
46751: LIST
46752: PUSH
46753: LD_INT 1
46755: PUSH
46756: LD_INT 1
46758: NEG
46759: PUSH
46760: EMPTY
46761: LIST
46762: LIST
46763: PUSH
46764: EMPTY
46765: LIST
46766: LIST
46767: LIST
46768: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
46769: LD_ADDR_VAR 0 60
46773: PUSH
46774: LD_INT 1
46776: PUSH
46777: LD_INT 1
46779: NEG
46780: PUSH
46781: EMPTY
46782: LIST
46783: LIST
46784: PUSH
46785: LD_INT 2
46787: PUSH
46788: LD_INT 0
46790: PUSH
46791: EMPTY
46792: LIST
46793: LIST
46794: PUSH
46795: LD_INT 2
46797: PUSH
46798: LD_INT 1
46800: PUSH
46801: EMPTY
46802: LIST
46803: LIST
46804: PUSH
46805: EMPTY
46806: LIST
46807: LIST
46808: LIST
46809: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
46810: LD_ADDR_VAR 0 61
46814: PUSH
46815: LD_INT 2
46817: PUSH
46818: LD_INT 1
46820: PUSH
46821: EMPTY
46822: LIST
46823: LIST
46824: PUSH
46825: LD_INT 2
46827: PUSH
46828: LD_INT 2
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: PUSH
46835: LD_INT 1
46837: PUSH
46838: LD_INT 2
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: LIST
46849: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
46850: LD_ADDR_VAR 0 62
46854: PUSH
46855: LD_INT 1
46857: PUSH
46858: LD_INT 2
46860: PUSH
46861: EMPTY
46862: LIST
46863: LIST
46864: PUSH
46865: LD_INT 0
46867: PUSH
46868: LD_INT 2
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: PUSH
46875: LD_INT 1
46877: NEG
46878: PUSH
46879: LD_INT 1
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: LIST
46890: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
46891: LD_ADDR_VAR 0 63
46895: PUSH
46896: LD_INT 1
46898: NEG
46899: PUSH
46900: LD_INT 1
46902: PUSH
46903: EMPTY
46904: LIST
46905: LIST
46906: PUSH
46907: LD_INT 2
46909: NEG
46910: PUSH
46911: LD_INT 0
46913: PUSH
46914: EMPTY
46915: LIST
46916: LIST
46917: PUSH
46918: LD_INT 2
46920: NEG
46921: PUSH
46922: LD_INT 1
46924: NEG
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: PUSH
46930: EMPTY
46931: LIST
46932: LIST
46933: LIST
46934: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46935: LD_ADDR_VAR 0 64
46939: PUSH
46940: LD_INT 1
46942: NEG
46943: PUSH
46944: LD_INT 2
46946: NEG
46947: PUSH
46948: EMPTY
46949: LIST
46950: LIST
46951: PUSH
46952: LD_INT 2
46954: NEG
46955: PUSH
46956: LD_INT 1
46958: NEG
46959: PUSH
46960: EMPTY
46961: LIST
46962: LIST
46963: PUSH
46964: LD_INT 2
46966: NEG
46967: PUSH
46968: LD_INT 2
46970: NEG
46971: PUSH
46972: EMPTY
46973: LIST
46974: LIST
46975: PUSH
46976: EMPTY
46977: LIST
46978: LIST
46979: LIST
46980: ST_TO_ADDR
// end ; 2 :
46981: GO 50247
46983: LD_INT 2
46985: DOUBLE
46986: EQUAL
46987: IFTRUE 46991
46989: GO 50246
46991: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
46992: LD_ADDR_VAR 0 29
46996: PUSH
46997: LD_INT 4
46999: PUSH
47000: LD_INT 0
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: PUSH
47007: LD_INT 4
47009: PUSH
47010: LD_INT 1
47012: NEG
47013: PUSH
47014: EMPTY
47015: LIST
47016: LIST
47017: PUSH
47018: LD_INT 5
47020: PUSH
47021: LD_INT 0
47023: PUSH
47024: EMPTY
47025: LIST
47026: LIST
47027: PUSH
47028: LD_INT 5
47030: PUSH
47031: LD_INT 1
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: PUSH
47038: LD_INT 4
47040: PUSH
47041: LD_INT 1
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: PUSH
47048: LD_INT 3
47050: PUSH
47051: LD_INT 0
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 3
47060: PUSH
47061: LD_INT 1
47063: NEG
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: PUSH
47069: LD_INT 3
47071: PUSH
47072: LD_INT 2
47074: NEG
47075: PUSH
47076: EMPTY
47077: LIST
47078: LIST
47079: PUSH
47080: LD_INT 5
47082: PUSH
47083: LD_INT 2
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: PUSH
47090: LD_INT 3
47092: PUSH
47093: LD_INT 3
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: PUSH
47100: LD_INT 3
47102: PUSH
47103: LD_INT 2
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: PUSH
47110: LD_INT 4
47112: PUSH
47113: LD_INT 3
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: PUSH
47120: LD_INT 4
47122: PUSH
47123: LD_INT 4
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: PUSH
47130: LD_INT 3
47132: PUSH
47133: LD_INT 4
47135: PUSH
47136: EMPTY
47137: LIST
47138: LIST
47139: PUSH
47140: LD_INT 2
47142: PUSH
47143: LD_INT 3
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: PUSH
47150: LD_INT 2
47152: PUSH
47153: LD_INT 2
47155: PUSH
47156: EMPTY
47157: LIST
47158: LIST
47159: PUSH
47160: LD_INT 4
47162: PUSH
47163: LD_INT 2
47165: PUSH
47166: EMPTY
47167: LIST
47168: LIST
47169: PUSH
47170: LD_INT 2
47172: PUSH
47173: LD_INT 4
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: PUSH
47180: LD_INT 0
47182: PUSH
47183: LD_INT 4
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: PUSH
47190: LD_INT 0
47192: PUSH
47193: LD_INT 3
47195: PUSH
47196: EMPTY
47197: LIST
47198: LIST
47199: PUSH
47200: LD_INT 1
47202: PUSH
47203: LD_INT 4
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: PUSH
47210: LD_INT 1
47212: PUSH
47213: LD_INT 5
47215: PUSH
47216: EMPTY
47217: LIST
47218: LIST
47219: PUSH
47220: LD_INT 0
47222: PUSH
47223: LD_INT 5
47225: PUSH
47226: EMPTY
47227: LIST
47228: LIST
47229: PUSH
47230: LD_INT 1
47232: NEG
47233: PUSH
47234: LD_INT 4
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: PUSH
47241: LD_INT 1
47243: NEG
47244: PUSH
47245: LD_INT 3
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: PUSH
47252: LD_INT 2
47254: PUSH
47255: LD_INT 5
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: PUSH
47262: LD_INT 2
47264: NEG
47265: PUSH
47266: LD_INT 3
47268: PUSH
47269: EMPTY
47270: LIST
47271: LIST
47272: PUSH
47273: LD_INT 3
47275: NEG
47276: PUSH
47277: LD_INT 0
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: PUSH
47284: LD_INT 3
47286: NEG
47287: PUSH
47288: LD_INT 1
47290: NEG
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: PUSH
47296: LD_INT 2
47298: NEG
47299: PUSH
47300: LD_INT 0
47302: PUSH
47303: EMPTY
47304: LIST
47305: LIST
47306: PUSH
47307: LD_INT 2
47309: NEG
47310: PUSH
47311: LD_INT 1
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: PUSH
47318: LD_INT 3
47320: NEG
47321: PUSH
47322: LD_INT 1
47324: PUSH
47325: EMPTY
47326: LIST
47327: LIST
47328: PUSH
47329: LD_INT 4
47331: NEG
47332: PUSH
47333: LD_INT 0
47335: PUSH
47336: EMPTY
47337: LIST
47338: LIST
47339: PUSH
47340: LD_INT 4
47342: NEG
47343: PUSH
47344: LD_INT 1
47346: NEG
47347: PUSH
47348: EMPTY
47349: LIST
47350: LIST
47351: PUSH
47352: LD_INT 4
47354: NEG
47355: PUSH
47356: LD_INT 2
47358: NEG
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: PUSH
47364: LD_INT 2
47366: NEG
47367: PUSH
47368: LD_INT 2
47370: PUSH
47371: EMPTY
47372: LIST
47373: LIST
47374: PUSH
47375: LD_INT 4
47377: NEG
47378: PUSH
47379: LD_INT 4
47381: NEG
47382: PUSH
47383: EMPTY
47384: LIST
47385: LIST
47386: PUSH
47387: LD_INT 4
47389: NEG
47390: PUSH
47391: LD_INT 5
47393: NEG
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: PUSH
47399: LD_INT 3
47401: NEG
47402: PUSH
47403: LD_INT 4
47405: NEG
47406: PUSH
47407: EMPTY
47408: LIST
47409: LIST
47410: PUSH
47411: LD_INT 3
47413: NEG
47414: PUSH
47415: LD_INT 3
47417: NEG
47418: PUSH
47419: EMPTY
47420: LIST
47421: LIST
47422: PUSH
47423: LD_INT 4
47425: NEG
47426: PUSH
47427: LD_INT 3
47429: NEG
47430: PUSH
47431: EMPTY
47432: LIST
47433: LIST
47434: PUSH
47435: LD_INT 5
47437: NEG
47438: PUSH
47439: LD_INT 4
47441: NEG
47442: PUSH
47443: EMPTY
47444: LIST
47445: LIST
47446: PUSH
47447: LD_INT 5
47449: NEG
47450: PUSH
47451: LD_INT 5
47453: NEG
47454: PUSH
47455: EMPTY
47456: LIST
47457: LIST
47458: PUSH
47459: LD_INT 3
47461: NEG
47462: PUSH
47463: LD_INT 5
47465: NEG
47466: PUSH
47467: EMPTY
47468: LIST
47469: LIST
47470: PUSH
47471: LD_INT 5
47473: NEG
47474: PUSH
47475: LD_INT 3
47477: NEG
47478: PUSH
47479: EMPTY
47480: LIST
47481: LIST
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: LIST
47489: LIST
47490: LIST
47491: LIST
47492: LIST
47493: LIST
47494: LIST
47495: LIST
47496: LIST
47497: LIST
47498: LIST
47499: LIST
47500: LIST
47501: LIST
47502: LIST
47503: LIST
47504: LIST
47505: LIST
47506: LIST
47507: LIST
47508: LIST
47509: LIST
47510: LIST
47511: LIST
47512: LIST
47513: LIST
47514: LIST
47515: LIST
47516: LIST
47517: LIST
47518: LIST
47519: LIST
47520: LIST
47521: LIST
47522: LIST
47523: LIST
47524: LIST
47525: LIST
47526: LIST
47527: LIST
47528: LIST
47529: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
47530: LD_ADDR_VAR 0 30
47534: PUSH
47535: LD_INT 4
47537: PUSH
47538: LD_INT 4
47540: PUSH
47541: EMPTY
47542: LIST
47543: LIST
47544: PUSH
47545: LD_INT 4
47547: PUSH
47548: LD_INT 3
47550: PUSH
47551: EMPTY
47552: LIST
47553: LIST
47554: PUSH
47555: LD_INT 5
47557: PUSH
47558: LD_INT 4
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: PUSH
47565: LD_INT 5
47567: PUSH
47568: LD_INT 5
47570: PUSH
47571: EMPTY
47572: LIST
47573: LIST
47574: PUSH
47575: LD_INT 4
47577: PUSH
47578: LD_INT 5
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: PUSH
47585: LD_INT 3
47587: PUSH
47588: LD_INT 4
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: PUSH
47595: LD_INT 3
47597: PUSH
47598: LD_INT 3
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: PUSH
47605: LD_INT 5
47607: PUSH
47608: LD_INT 3
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: PUSH
47615: LD_INT 3
47617: PUSH
47618: LD_INT 5
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: PUSH
47625: LD_INT 0
47627: PUSH
47628: LD_INT 3
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: PUSH
47635: LD_INT 0
47637: PUSH
47638: LD_INT 2
47640: PUSH
47641: EMPTY
47642: LIST
47643: LIST
47644: PUSH
47645: LD_INT 1
47647: PUSH
47648: LD_INT 3
47650: PUSH
47651: EMPTY
47652: LIST
47653: LIST
47654: PUSH
47655: LD_INT 1
47657: PUSH
47658: LD_INT 4
47660: PUSH
47661: EMPTY
47662: LIST
47663: LIST
47664: PUSH
47665: LD_INT 0
47667: PUSH
47668: LD_INT 4
47670: PUSH
47671: EMPTY
47672: LIST
47673: LIST
47674: PUSH
47675: LD_INT 1
47677: NEG
47678: PUSH
47679: LD_INT 3
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: LD_INT 1
47688: NEG
47689: PUSH
47690: LD_INT 2
47692: PUSH
47693: EMPTY
47694: LIST
47695: LIST
47696: PUSH
47697: LD_INT 2
47699: PUSH
47700: LD_INT 4
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: PUSH
47707: LD_INT 2
47709: NEG
47710: PUSH
47711: LD_INT 2
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: PUSH
47718: LD_INT 4
47720: NEG
47721: PUSH
47722: LD_INT 0
47724: PUSH
47725: EMPTY
47726: LIST
47727: LIST
47728: PUSH
47729: LD_INT 4
47731: NEG
47732: PUSH
47733: LD_INT 1
47735: NEG
47736: PUSH
47737: EMPTY
47738: LIST
47739: LIST
47740: PUSH
47741: LD_INT 3
47743: NEG
47744: PUSH
47745: LD_INT 0
47747: PUSH
47748: EMPTY
47749: LIST
47750: LIST
47751: PUSH
47752: LD_INT 3
47754: NEG
47755: PUSH
47756: LD_INT 1
47758: PUSH
47759: EMPTY
47760: LIST
47761: LIST
47762: PUSH
47763: LD_INT 4
47765: NEG
47766: PUSH
47767: LD_INT 1
47769: PUSH
47770: EMPTY
47771: LIST
47772: LIST
47773: PUSH
47774: LD_INT 5
47776: NEG
47777: PUSH
47778: LD_INT 0
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: PUSH
47785: LD_INT 5
47787: NEG
47788: PUSH
47789: LD_INT 1
47791: NEG
47792: PUSH
47793: EMPTY
47794: LIST
47795: LIST
47796: PUSH
47797: LD_INT 5
47799: NEG
47800: PUSH
47801: LD_INT 2
47803: NEG
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: PUSH
47809: LD_INT 3
47811: NEG
47812: PUSH
47813: LD_INT 2
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: LD_INT 3
47822: NEG
47823: PUSH
47824: LD_INT 3
47826: NEG
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: PUSH
47832: LD_INT 3
47834: NEG
47835: PUSH
47836: LD_INT 4
47838: NEG
47839: PUSH
47840: EMPTY
47841: LIST
47842: LIST
47843: PUSH
47844: LD_INT 2
47846: NEG
47847: PUSH
47848: LD_INT 3
47850: NEG
47851: PUSH
47852: EMPTY
47853: LIST
47854: LIST
47855: PUSH
47856: LD_INT 2
47858: NEG
47859: PUSH
47860: LD_INT 2
47862: NEG
47863: PUSH
47864: EMPTY
47865: LIST
47866: LIST
47867: PUSH
47868: LD_INT 3
47870: NEG
47871: PUSH
47872: LD_INT 2
47874: NEG
47875: PUSH
47876: EMPTY
47877: LIST
47878: LIST
47879: PUSH
47880: LD_INT 4
47882: NEG
47883: PUSH
47884: LD_INT 3
47886: NEG
47887: PUSH
47888: EMPTY
47889: LIST
47890: LIST
47891: PUSH
47892: LD_INT 4
47894: NEG
47895: PUSH
47896: LD_INT 4
47898: NEG
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: PUSH
47904: LD_INT 2
47906: NEG
47907: PUSH
47908: LD_INT 4
47910: NEG
47911: PUSH
47912: EMPTY
47913: LIST
47914: LIST
47915: PUSH
47916: LD_INT 4
47918: NEG
47919: PUSH
47920: LD_INT 2
47922: NEG
47923: PUSH
47924: EMPTY
47925: LIST
47926: LIST
47927: PUSH
47928: LD_INT 0
47930: PUSH
47931: LD_INT 4
47933: NEG
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: PUSH
47939: LD_INT 0
47941: PUSH
47942: LD_INT 5
47944: NEG
47945: PUSH
47946: EMPTY
47947: LIST
47948: LIST
47949: PUSH
47950: LD_INT 1
47952: PUSH
47953: LD_INT 4
47955: NEG
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 1
47963: PUSH
47964: LD_INT 3
47966: NEG
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: PUSH
47972: LD_INT 0
47974: PUSH
47975: LD_INT 3
47977: NEG
47978: PUSH
47979: EMPTY
47980: LIST
47981: LIST
47982: PUSH
47983: LD_INT 1
47985: NEG
47986: PUSH
47987: LD_INT 4
47989: NEG
47990: PUSH
47991: EMPTY
47992: LIST
47993: LIST
47994: PUSH
47995: LD_INT 1
47997: NEG
47998: PUSH
47999: LD_INT 5
48001: NEG
48002: PUSH
48003: EMPTY
48004: LIST
48005: LIST
48006: PUSH
48007: LD_INT 2
48009: PUSH
48010: LD_INT 3
48012: NEG
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: PUSH
48018: LD_INT 2
48020: NEG
48021: PUSH
48022: LD_INT 5
48024: NEG
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: LIST
48034: LIST
48035: LIST
48036: LIST
48037: LIST
48038: LIST
48039: LIST
48040: LIST
48041: LIST
48042: LIST
48043: LIST
48044: LIST
48045: LIST
48046: LIST
48047: LIST
48048: LIST
48049: LIST
48050: LIST
48051: LIST
48052: LIST
48053: LIST
48054: LIST
48055: LIST
48056: LIST
48057: LIST
48058: LIST
48059: LIST
48060: LIST
48061: LIST
48062: LIST
48063: LIST
48064: LIST
48065: LIST
48066: LIST
48067: LIST
48068: LIST
48069: LIST
48070: LIST
48071: LIST
48072: LIST
48073: LIST
48074: LIST
48075: LIST
48076: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
48077: LD_ADDR_VAR 0 31
48081: PUSH
48082: LD_INT 0
48084: PUSH
48085: LD_INT 4
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PUSH
48092: LD_INT 0
48094: PUSH
48095: LD_INT 3
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: PUSH
48102: LD_INT 1
48104: PUSH
48105: LD_INT 4
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: PUSH
48112: LD_INT 1
48114: PUSH
48115: LD_INT 5
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: LD_INT 0
48124: PUSH
48125: LD_INT 5
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: PUSH
48132: LD_INT 1
48134: NEG
48135: PUSH
48136: LD_INT 4
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: PUSH
48143: LD_INT 1
48145: NEG
48146: PUSH
48147: LD_INT 3
48149: PUSH
48150: EMPTY
48151: LIST
48152: LIST
48153: PUSH
48154: LD_INT 2
48156: PUSH
48157: LD_INT 5
48159: PUSH
48160: EMPTY
48161: LIST
48162: LIST
48163: PUSH
48164: LD_INT 2
48166: NEG
48167: PUSH
48168: LD_INT 3
48170: PUSH
48171: EMPTY
48172: LIST
48173: LIST
48174: PUSH
48175: LD_INT 3
48177: NEG
48178: PUSH
48179: LD_INT 0
48181: PUSH
48182: EMPTY
48183: LIST
48184: LIST
48185: PUSH
48186: LD_INT 3
48188: NEG
48189: PUSH
48190: LD_INT 1
48192: NEG
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: PUSH
48198: LD_INT 2
48200: NEG
48201: PUSH
48202: LD_INT 0
48204: PUSH
48205: EMPTY
48206: LIST
48207: LIST
48208: PUSH
48209: LD_INT 2
48211: NEG
48212: PUSH
48213: LD_INT 1
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: PUSH
48220: LD_INT 3
48222: NEG
48223: PUSH
48224: LD_INT 1
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: LD_INT 4
48233: NEG
48234: PUSH
48235: LD_INT 0
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: PUSH
48242: LD_INT 4
48244: NEG
48245: PUSH
48246: LD_INT 1
48248: NEG
48249: PUSH
48250: EMPTY
48251: LIST
48252: LIST
48253: PUSH
48254: LD_INT 4
48256: NEG
48257: PUSH
48258: LD_INT 2
48260: NEG
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: PUSH
48266: LD_INT 2
48268: NEG
48269: PUSH
48270: LD_INT 2
48272: PUSH
48273: EMPTY
48274: LIST
48275: LIST
48276: PUSH
48277: LD_INT 4
48279: NEG
48280: PUSH
48281: LD_INT 4
48283: NEG
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: PUSH
48289: LD_INT 4
48291: NEG
48292: PUSH
48293: LD_INT 5
48295: NEG
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: LD_INT 3
48303: NEG
48304: PUSH
48305: LD_INT 4
48307: NEG
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: PUSH
48313: LD_INT 3
48315: NEG
48316: PUSH
48317: LD_INT 3
48319: NEG
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: PUSH
48325: LD_INT 4
48327: NEG
48328: PUSH
48329: LD_INT 3
48331: NEG
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: PUSH
48337: LD_INT 5
48339: NEG
48340: PUSH
48341: LD_INT 4
48343: NEG
48344: PUSH
48345: EMPTY
48346: LIST
48347: LIST
48348: PUSH
48349: LD_INT 5
48351: NEG
48352: PUSH
48353: LD_INT 5
48355: NEG
48356: PUSH
48357: EMPTY
48358: LIST
48359: LIST
48360: PUSH
48361: LD_INT 3
48363: NEG
48364: PUSH
48365: LD_INT 5
48367: NEG
48368: PUSH
48369: EMPTY
48370: LIST
48371: LIST
48372: PUSH
48373: LD_INT 5
48375: NEG
48376: PUSH
48377: LD_INT 3
48379: NEG
48380: PUSH
48381: EMPTY
48382: LIST
48383: LIST
48384: PUSH
48385: LD_INT 0
48387: PUSH
48388: LD_INT 3
48390: NEG
48391: PUSH
48392: EMPTY
48393: LIST
48394: LIST
48395: PUSH
48396: LD_INT 0
48398: PUSH
48399: LD_INT 4
48401: NEG
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: LD_INT 1
48409: PUSH
48410: LD_INT 3
48412: NEG
48413: PUSH
48414: EMPTY
48415: LIST
48416: LIST
48417: PUSH
48418: LD_INT 1
48420: PUSH
48421: LD_INT 2
48423: NEG
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: PUSH
48429: LD_INT 0
48431: PUSH
48432: LD_INT 2
48434: NEG
48435: PUSH
48436: EMPTY
48437: LIST
48438: LIST
48439: PUSH
48440: LD_INT 1
48442: NEG
48443: PUSH
48444: LD_INT 3
48446: NEG
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: PUSH
48452: LD_INT 1
48454: NEG
48455: PUSH
48456: LD_INT 4
48458: NEG
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: PUSH
48464: LD_INT 2
48466: PUSH
48467: LD_INT 2
48469: NEG
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: LD_INT 2
48477: NEG
48478: PUSH
48479: LD_INT 4
48481: NEG
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: PUSH
48487: LD_INT 4
48489: PUSH
48490: LD_INT 0
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 4
48499: PUSH
48500: LD_INT 1
48502: NEG
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: PUSH
48508: LD_INT 5
48510: PUSH
48511: LD_INT 0
48513: PUSH
48514: EMPTY
48515: LIST
48516: LIST
48517: PUSH
48518: LD_INT 5
48520: PUSH
48521: LD_INT 1
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: PUSH
48528: LD_INT 4
48530: PUSH
48531: LD_INT 1
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: PUSH
48538: LD_INT 3
48540: PUSH
48541: LD_INT 0
48543: PUSH
48544: EMPTY
48545: LIST
48546: LIST
48547: PUSH
48548: LD_INT 3
48550: PUSH
48551: LD_INT 1
48553: NEG
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: PUSH
48559: LD_INT 3
48561: PUSH
48562: LD_INT 2
48564: NEG
48565: PUSH
48566: EMPTY
48567: LIST
48568: LIST
48569: PUSH
48570: LD_INT 5
48572: PUSH
48573: LD_INT 2
48575: PUSH
48576: EMPTY
48577: LIST
48578: LIST
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: LIST
48584: LIST
48585: LIST
48586: LIST
48587: LIST
48588: LIST
48589: LIST
48590: LIST
48591: LIST
48592: LIST
48593: LIST
48594: LIST
48595: LIST
48596: LIST
48597: LIST
48598: LIST
48599: LIST
48600: LIST
48601: LIST
48602: LIST
48603: LIST
48604: LIST
48605: LIST
48606: LIST
48607: LIST
48608: LIST
48609: LIST
48610: LIST
48611: LIST
48612: LIST
48613: LIST
48614: LIST
48615: LIST
48616: LIST
48617: LIST
48618: LIST
48619: LIST
48620: LIST
48621: LIST
48622: LIST
48623: LIST
48624: LIST
48625: LIST
48626: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
48627: LD_ADDR_VAR 0 32
48631: PUSH
48632: LD_INT 4
48634: NEG
48635: PUSH
48636: LD_INT 0
48638: PUSH
48639: EMPTY
48640: LIST
48641: LIST
48642: PUSH
48643: LD_INT 4
48645: NEG
48646: PUSH
48647: LD_INT 1
48649: NEG
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: PUSH
48655: LD_INT 3
48657: NEG
48658: PUSH
48659: LD_INT 0
48661: PUSH
48662: EMPTY
48663: LIST
48664: LIST
48665: PUSH
48666: LD_INT 3
48668: NEG
48669: PUSH
48670: LD_INT 1
48672: PUSH
48673: EMPTY
48674: LIST
48675: LIST
48676: PUSH
48677: LD_INT 4
48679: NEG
48680: PUSH
48681: LD_INT 1
48683: PUSH
48684: EMPTY
48685: LIST
48686: LIST
48687: PUSH
48688: LD_INT 5
48690: NEG
48691: PUSH
48692: LD_INT 0
48694: PUSH
48695: EMPTY
48696: LIST
48697: LIST
48698: PUSH
48699: LD_INT 5
48701: NEG
48702: PUSH
48703: LD_INT 1
48705: NEG
48706: PUSH
48707: EMPTY
48708: LIST
48709: LIST
48710: PUSH
48711: LD_INT 5
48713: NEG
48714: PUSH
48715: LD_INT 2
48717: NEG
48718: PUSH
48719: EMPTY
48720: LIST
48721: LIST
48722: PUSH
48723: LD_INT 3
48725: NEG
48726: PUSH
48727: LD_INT 2
48729: PUSH
48730: EMPTY
48731: LIST
48732: LIST
48733: PUSH
48734: LD_INT 3
48736: NEG
48737: PUSH
48738: LD_INT 3
48740: NEG
48741: PUSH
48742: EMPTY
48743: LIST
48744: LIST
48745: PUSH
48746: LD_INT 3
48748: NEG
48749: PUSH
48750: LD_INT 4
48752: NEG
48753: PUSH
48754: EMPTY
48755: LIST
48756: LIST
48757: PUSH
48758: LD_INT 2
48760: NEG
48761: PUSH
48762: LD_INT 3
48764: NEG
48765: PUSH
48766: EMPTY
48767: LIST
48768: LIST
48769: PUSH
48770: LD_INT 2
48772: NEG
48773: PUSH
48774: LD_INT 2
48776: NEG
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: PUSH
48782: LD_INT 3
48784: NEG
48785: PUSH
48786: LD_INT 2
48788: NEG
48789: PUSH
48790: EMPTY
48791: LIST
48792: LIST
48793: PUSH
48794: LD_INT 4
48796: NEG
48797: PUSH
48798: LD_INT 3
48800: NEG
48801: PUSH
48802: EMPTY
48803: LIST
48804: LIST
48805: PUSH
48806: LD_INT 4
48808: NEG
48809: PUSH
48810: LD_INT 4
48812: NEG
48813: PUSH
48814: EMPTY
48815: LIST
48816: LIST
48817: PUSH
48818: LD_INT 2
48820: NEG
48821: PUSH
48822: LD_INT 4
48824: NEG
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PUSH
48830: LD_INT 4
48832: NEG
48833: PUSH
48834: LD_INT 2
48836: NEG
48837: PUSH
48838: EMPTY
48839: LIST
48840: LIST
48841: PUSH
48842: LD_INT 0
48844: PUSH
48845: LD_INT 4
48847: NEG
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: PUSH
48853: LD_INT 0
48855: PUSH
48856: LD_INT 5
48858: NEG
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: PUSH
48864: LD_INT 1
48866: PUSH
48867: LD_INT 4
48869: NEG
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: PUSH
48875: LD_INT 1
48877: PUSH
48878: LD_INT 3
48880: NEG
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: PUSH
48886: LD_INT 0
48888: PUSH
48889: LD_INT 3
48891: NEG
48892: PUSH
48893: EMPTY
48894: LIST
48895: LIST
48896: PUSH
48897: LD_INT 1
48899: NEG
48900: PUSH
48901: LD_INT 4
48903: NEG
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: PUSH
48909: LD_INT 1
48911: NEG
48912: PUSH
48913: LD_INT 5
48915: NEG
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: PUSH
48921: LD_INT 2
48923: PUSH
48924: LD_INT 3
48926: NEG
48927: PUSH
48928: EMPTY
48929: LIST
48930: LIST
48931: PUSH
48932: LD_INT 2
48934: NEG
48935: PUSH
48936: LD_INT 5
48938: NEG
48939: PUSH
48940: EMPTY
48941: LIST
48942: LIST
48943: PUSH
48944: LD_INT 3
48946: PUSH
48947: LD_INT 0
48949: PUSH
48950: EMPTY
48951: LIST
48952: LIST
48953: PUSH
48954: LD_INT 3
48956: PUSH
48957: LD_INT 1
48959: NEG
48960: PUSH
48961: EMPTY
48962: LIST
48963: LIST
48964: PUSH
48965: LD_INT 4
48967: PUSH
48968: LD_INT 0
48970: PUSH
48971: EMPTY
48972: LIST
48973: LIST
48974: PUSH
48975: LD_INT 4
48977: PUSH
48978: LD_INT 1
48980: PUSH
48981: EMPTY
48982: LIST
48983: LIST
48984: PUSH
48985: LD_INT 3
48987: PUSH
48988: LD_INT 1
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: PUSH
48995: LD_INT 2
48997: PUSH
48998: LD_INT 0
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: PUSH
49005: LD_INT 2
49007: PUSH
49008: LD_INT 1
49010: NEG
49011: PUSH
49012: EMPTY
49013: LIST
49014: LIST
49015: PUSH
49016: LD_INT 2
49018: PUSH
49019: LD_INT 2
49021: NEG
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: PUSH
49027: LD_INT 4
49029: PUSH
49030: LD_INT 2
49032: PUSH
49033: EMPTY
49034: LIST
49035: LIST
49036: PUSH
49037: LD_INT 4
49039: PUSH
49040: LD_INT 4
49042: PUSH
49043: EMPTY
49044: LIST
49045: LIST
49046: PUSH
49047: LD_INT 4
49049: PUSH
49050: LD_INT 3
49052: PUSH
49053: EMPTY
49054: LIST
49055: LIST
49056: PUSH
49057: LD_INT 5
49059: PUSH
49060: LD_INT 4
49062: PUSH
49063: EMPTY
49064: LIST
49065: LIST
49066: PUSH
49067: LD_INT 5
49069: PUSH
49070: LD_INT 5
49072: PUSH
49073: EMPTY
49074: LIST
49075: LIST
49076: PUSH
49077: LD_INT 4
49079: PUSH
49080: LD_INT 5
49082: PUSH
49083: EMPTY
49084: LIST
49085: LIST
49086: PUSH
49087: LD_INT 3
49089: PUSH
49090: LD_INT 4
49092: PUSH
49093: EMPTY
49094: LIST
49095: LIST
49096: PUSH
49097: LD_INT 3
49099: PUSH
49100: LD_INT 3
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: PUSH
49107: LD_INT 5
49109: PUSH
49110: LD_INT 3
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: PUSH
49117: LD_INT 3
49119: PUSH
49120: LD_INT 5
49122: PUSH
49123: EMPTY
49124: LIST
49125: LIST
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: LIST
49131: LIST
49132: LIST
49133: LIST
49134: LIST
49135: LIST
49136: LIST
49137: LIST
49138: LIST
49139: LIST
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: LIST
49145: LIST
49146: LIST
49147: LIST
49148: LIST
49149: LIST
49150: LIST
49151: LIST
49152: LIST
49153: LIST
49154: LIST
49155: LIST
49156: LIST
49157: LIST
49158: LIST
49159: LIST
49160: LIST
49161: LIST
49162: LIST
49163: LIST
49164: LIST
49165: LIST
49166: LIST
49167: LIST
49168: LIST
49169: LIST
49170: LIST
49171: LIST
49172: LIST
49173: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
49174: LD_ADDR_VAR 0 33
49178: PUSH
49179: LD_INT 4
49181: NEG
49182: PUSH
49183: LD_INT 4
49185: NEG
49186: PUSH
49187: EMPTY
49188: LIST
49189: LIST
49190: PUSH
49191: LD_INT 4
49193: NEG
49194: PUSH
49195: LD_INT 5
49197: NEG
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: PUSH
49203: LD_INT 3
49205: NEG
49206: PUSH
49207: LD_INT 4
49209: NEG
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: PUSH
49215: LD_INT 3
49217: NEG
49218: PUSH
49219: LD_INT 3
49221: NEG
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: PUSH
49227: LD_INT 4
49229: NEG
49230: PUSH
49231: LD_INT 3
49233: NEG
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: PUSH
49239: LD_INT 5
49241: NEG
49242: PUSH
49243: LD_INT 4
49245: NEG
49246: PUSH
49247: EMPTY
49248: LIST
49249: LIST
49250: PUSH
49251: LD_INT 5
49253: NEG
49254: PUSH
49255: LD_INT 5
49257: NEG
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: PUSH
49263: LD_INT 3
49265: NEG
49266: PUSH
49267: LD_INT 5
49269: NEG
49270: PUSH
49271: EMPTY
49272: LIST
49273: LIST
49274: PUSH
49275: LD_INT 5
49277: NEG
49278: PUSH
49279: LD_INT 3
49281: NEG
49282: PUSH
49283: EMPTY
49284: LIST
49285: LIST
49286: PUSH
49287: LD_INT 0
49289: PUSH
49290: LD_INT 3
49292: NEG
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: PUSH
49298: LD_INT 0
49300: PUSH
49301: LD_INT 4
49303: NEG
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: PUSH
49309: LD_INT 1
49311: PUSH
49312: LD_INT 3
49314: NEG
49315: PUSH
49316: EMPTY
49317: LIST
49318: LIST
49319: PUSH
49320: LD_INT 1
49322: PUSH
49323: LD_INT 2
49325: NEG
49326: PUSH
49327: EMPTY
49328: LIST
49329: LIST
49330: PUSH
49331: LD_INT 0
49333: PUSH
49334: LD_INT 2
49336: NEG
49337: PUSH
49338: EMPTY
49339: LIST
49340: LIST
49341: PUSH
49342: LD_INT 1
49344: NEG
49345: PUSH
49346: LD_INT 3
49348: NEG
49349: PUSH
49350: EMPTY
49351: LIST
49352: LIST
49353: PUSH
49354: LD_INT 1
49356: NEG
49357: PUSH
49358: LD_INT 4
49360: NEG
49361: PUSH
49362: EMPTY
49363: LIST
49364: LIST
49365: PUSH
49366: LD_INT 2
49368: PUSH
49369: LD_INT 2
49371: NEG
49372: PUSH
49373: EMPTY
49374: LIST
49375: LIST
49376: PUSH
49377: LD_INT 2
49379: NEG
49380: PUSH
49381: LD_INT 4
49383: NEG
49384: PUSH
49385: EMPTY
49386: LIST
49387: LIST
49388: PUSH
49389: LD_INT 4
49391: PUSH
49392: LD_INT 0
49394: PUSH
49395: EMPTY
49396: LIST
49397: LIST
49398: PUSH
49399: LD_INT 4
49401: PUSH
49402: LD_INT 1
49404: NEG
49405: PUSH
49406: EMPTY
49407: LIST
49408: LIST
49409: PUSH
49410: LD_INT 5
49412: PUSH
49413: LD_INT 0
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: PUSH
49420: LD_INT 5
49422: PUSH
49423: LD_INT 1
49425: PUSH
49426: EMPTY
49427: LIST
49428: LIST
49429: PUSH
49430: LD_INT 4
49432: PUSH
49433: LD_INT 1
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: PUSH
49440: LD_INT 3
49442: PUSH
49443: LD_INT 0
49445: PUSH
49446: EMPTY
49447: LIST
49448: LIST
49449: PUSH
49450: LD_INT 3
49452: PUSH
49453: LD_INT 1
49455: NEG
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: PUSH
49461: LD_INT 3
49463: PUSH
49464: LD_INT 2
49466: NEG
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: PUSH
49472: LD_INT 5
49474: PUSH
49475: LD_INT 2
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: PUSH
49482: LD_INT 3
49484: PUSH
49485: LD_INT 3
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: PUSH
49492: LD_INT 3
49494: PUSH
49495: LD_INT 2
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: PUSH
49502: LD_INT 4
49504: PUSH
49505: LD_INT 3
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: PUSH
49512: LD_INT 4
49514: PUSH
49515: LD_INT 4
49517: PUSH
49518: EMPTY
49519: LIST
49520: LIST
49521: PUSH
49522: LD_INT 3
49524: PUSH
49525: LD_INT 4
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: PUSH
49532: LD_INT 2
49534: PUSH
49535: LD_INT 3
49537: PUSH
49538: EMPTY
49539: LIST
49540: LIST
49541: PUSH
49542: LD_INT 2
49544: PUSH
49545: LD_INT 2
49547: PUSH
49548: EMPTY
49549: LIST
49550: LIST
49551: PUSH
49552: LD_INT 4
49554: PUSH
49555: LD_INT 2
49557: PUSH
49558: EMPTY
49559: LIST
49560: LIST
49561: PUSH
49562: LD_INT 2
49564: PUSH
49565: LD_INT 4
49567: PUSH
49568: EMPTY
49569: LIST
49570: LIST
49571: PUSH
49572: LD_INT 0
49574: PUSH
49575: LD_INT 4
49577: PUSH
49578: EMPTY
49579: LIST
49580: LIST
49581: PUSH
49582: LD_INT 0
49584: PUSH
49585: LD_INT 3
49587: PUSH
49588: EMPTY
49589: LIST
49590: LIST
49591: PUSH
49592: LD_INT 1
49594: PUSH
49595: LD_INT 4
49597: PUSH
49598: EMPTY
49599: LIST
49600: LIST
49601: PUSH
49602: LD_INT 1
49604: PUSH
49605: LD_INT 5
49607: PUSH
49608: EMPTY
49609: LIST
49610: LIST
49611: PUSH
49612: LD_INT 0
49614: PUSH
49615: LD_INT 5
49617: PUSH
49618: EMPTY
49619: LIST
49620: LIST
49621: PUSH
49622: LD_INT 1
49624: NEG
49625: PUSH
49626: LD_INT 4
49628: PUSH
49629: EMPTY
49630: LIST
49631: LIST
49632: PUSH
49633: LD_INT 1
49635: NEG
49636: PUSH
49637: LD_INT 3
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: PUSH
49644: LD_INT 2
49646: PUSH
49647: LD_INT 5
49649: PUSH
49650: EMPTY
49651: LIST
49652: LIST
49653: PUSH
49654: LD_INT 2
49656: NEG
49657: PUSH
49658: LD_INT 3
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: LIST
49676: LIST
49677: LIST
49678: LIST
49679: LIST
49680: LIST
49681: LIST
49682: LIST
49683: LIST
49684: LIST
49685: LIST
49686: LIST
49687: LIST
49688: LIST
49689: LIST
49690: LIST
49691: LIST
49692: LIST
49693: LIST
49694: LIST
49695: LIST
49696: LIST
49697: LIST
49698: LIST
49699: LIST
49700: LIST
49701: LIST
49702: LIST
49703: LIST
49704: LIST
49705: LIST
49706: LIST
49707: LIST
49708: LIST
49709: LIST
49710: LIST
49711: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
49712: LD_ADDR_VAR 0 34
49716: PUSH
49717: LD_INT 0
49719: PUSH
49720: LD_INT 4
49722: NEG
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: LD_INT 0
49730: PUSH
49731: LD_INT 5
49733: NEG
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: PUSH
49739: LD_INT 1
49741: PUSH
49742: LD_INT 4
49744: NEG
49745: PUSH
49746: EMPTY
49747: LIST
49748: LIST
49749: PUSH
49750: LD_INT 1
49752: PUSH
49753: LD_INT 3
49755: NEG
49756: PUSH
49757: EMPTY
49758: LIST
49759: LIST
49760: PUSH
49761: LD_INT 0
49763: PUSH
49764: LD_INT 3
49766: NEG
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: PUSH
49772: LD_INT 1
49774: NEG
49775: PUSH
49776: LD_INT 4
49778: NEG
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: PUSH
49784: LD_INT 1
49786: NEG
49787: PUSH
49788: LD_INT 5
49790: NEG
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: LD_INT 2
49798: PUSH
49799: LD_INT 3
49801: NEG
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PUSH
49807: LD_INT 2
49809: NEG
49810: PUSH
49811: LD_INT 5
49813: NEG
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: PUSH
49819: LD_INT 3
49821: PUSH
49822: LD_INT 0
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: PUSH
49829: LD_INT 3
49831: PUSH
49832: LD_INT 1
49834: NEG
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: PUSH
49840: LD_INT 4
49842: PUSH
49843: LD_INT 0
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: PUSH
49850: LD_INT 4
49852: PUSH
49853: LD_INT 1
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: PUSH
49860: LD_INT 3
49862: PUSH
49863: LD_INT 1
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: PUSH
49870: LD_INT 2
49872: PUSH
49873: LD_INT 0
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: PUSH
49880: LD_INT 2
49882: PUSH
49883: LD_INT 1
49885: NEG
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: PUSH
49891: LD_INT 2
49893: PUSH
49894: LD_INT 2
49896: NEG
49897: PUSH
49898: EMPTY
49899: LIST
49900: LIST
49901: PUSH
49902: LD_INT 4
49904: PUSH
49905: LD_INT 2
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: PUSH
49912: LD_INT 4
49914: PUSH
49915: LD_INT 4
49917: PUSH
49918: EMPTY
49919: LIST
49920: LIST
49921: PUSH
49922: LD_INT 4
49924: PUSH
49925: LD_INT 3
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: PUSH
49932: LD_INT 5
49934: PUSH
49935: LD_INT 4
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: LD_INT 5
49944: PUSH
49945: LD_INT 5
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: PUSH
49952: LD_INT 4
49954: PUSH
49955: LD_INT 5
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: PUSH
49962: LD_INT 3
49964: PUSH
49965: LD_INT 4
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: PUSH
49972: LD_INT 3
49974: PUSH
49975: LD_INT 3
49977: PUSH
49978: EMPTY
49979: LIST
49980: LIST
49981: PUSH
49982: LD_INT 5
49984: PUSH
49985: LD_INT 3
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: PUSH
49992: LD_INT 3
49994: PUSH
49995: LD_INT 5
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: PUSH
50002: LD_INT 0
50004: PUSH
50005: LD_INT 3
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: PUSH
50012: LD_INT 0
50014: PUSH
50015: LD_INT 2
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: PUSH
50022: LD_INT 1
50024: PUSH
50025: LD_INT 3
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: PUSH
50032: LD_INT 1
50034: PUSH
50035: LD_INT 4
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: PUSH
50042: LD_INT 0
50044: PUSH
50045: LD_INT 4
50047: PUSH
50048: EMPTY
50049: LIST
50050: LIST
50051: PUSH
50052: LD_INT 1
50054: NEG
50055: PUSH
50056: LD_INT 3
50058: PUSH
50059: EMPTY
50060: LIST
50061: LIST
50062: PUSH
50063: LD_INT 1
50065: NEG
50066: PUSH
50067: LD_INT 2
50069: PUSH
50070: EMPTY
50071: LIST
50072: LIST
50073: PUSH
50074: LD_INT 2
50076: PUSH
50077: LD_INT 4
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: PUSH
50084: LD_INT 2
50086: NEG
50087: PUSH
50088: LD_INT 2
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: PUSH
50095: LD_INT 4
50097: NEG
50098: PUSH
50099: LD_INT 0
50101: PUSH
50102: EMPTY
50103: LIST
50104: LIST
50105: PUSH
50106: LD_INT 4
50108: NEG
50109: PUSH
50110: LD_INT 1
50112: NEG
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: PUSH
50118: LD_INT 3
50120: NEG
50121: PUSH
50122: LD_INT 0
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: PUSH
50129: LD_INT 3
50131: NEG
50132: PUSH
50133: LD_INT 1
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: PUSH
50140: LD_INT 4
50142: NEG
50143: PUSH
50144: LD_INT 1
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: LD_INT 5
50153: NEG
50154: PUSH
50155: LD_INT 0
50157: PUSH
50158: EMPTY
50159: LIST
50160: LIST
50161: PUSH
50162: LD_INT 5
50164: NEG
50165: PUSH
50166: LD_INT 1
50168: NEG
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: PUSH
50174: LD_INT 5
50176: NEG
50177: PUSH
50178: LD_INT 2
50180: NEG
50181: PUSH
50182: EMPTY
50183: LIST
50184: LIST
50185: PUSH
50186: LD_INT 3
50188: NEG
50189: PUSH
50190: LD_INT 2
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: LIST
50209: LIST
50210: LIST
50211: LIST
50212: LIST
50213: LIST
50214: LIST
50215: LIST
50216: LIST
50217: LIST
50218: LIST
50219: LIST
50220: LIST
50221: LIST
50222: LIST
50223: LIST
50224: LIST
50225: LIST
50226: LIST
50227: LIST
50228: LIST
50229: LIST
50230: LIST
50231: LIST
50232: LIST
50233: LIST
50234: LIST
50235: LIST
50236: LIST
50237: LIST
50238: LIST
50239: LIST
50240: LIST
50241: LIST
50242: LIST
50243: ST_TO_ADDR
// end ; end ;
50244: GO 50247
50246: POP
// case btype of b_depot , b_warehouse :
50247: LD_VAR 0 1
50251: PUSH
50252: LD_INT 0
50254: DOUBLE
50255: EQUAL
50256: IFTRUE 50266
50258: LD_INT 1
50260: DOUBLE
50261: EQUAL
50262: IFTRUE 50266
50264: GO 50467
50266: POP
// case nation of nation_american :
50267: LD_VAR 0 5
50271: PUSH
50272: LD_INT 1
50274: DOUBLE
50275: EQUAL
50276: IFTRUE 50280
50278: GO 50336
50280: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
50281: LD_ADDR_VAR 0 9
50285: PUSH
50286: LD_VAR 0 11
50290: PUSH
50291: LD_VAR 0 12
50295: PUSH
50296: LD_VAR 0 13
50300: PUSH
50301: LD_VAR 0 14
50305: PUSH
50306: LD_VAR 0 15
50310: PUSH
50311: LD_VAR 0 16
50315: PUSH
50316: EMPTY
50317: LIST
50318: LIST
50319: LIST
50320: LIST
50321: LIST
50322: LIST
50323: PUSH
50324: LD_VAR 0 4
50328: PUSH
50329: LD_INT 1
50331: PLUS
50332: ARRAY
50333: ST_TO_ADDR
50334: GO 50465
50336: LD_INT 2
50338: DOUBLE
50339: EQUAL
50340: IFTRUE 50344
50342: GO 50400
50344: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
50345: LD_ADDR_VAR 0 9
50349: PUSH
50350: LD_VAR 0 17
50354: PUSH
50355: LD_VAR 0 18
50359: PUSH
50360: LD_VAR 0 19
50364: PUSH
50365: LD_VAR 0 20
50369: PUSH
50370: LD_VAR 0 21
50374: PUSH
50375: LD_VAR 0 22
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: LIST
50384: LIST
50385: LIST
50386: LIST
50387: PUSH
50388: LD_VAR 0 4
50392: PUSH
50393: LD_INT 1
50395: PLUS
50396: ARRAY
50397: ST_TO_ADDR
50398: GO 50465
50400: LD_INT 3
50402: DOUBLE
50403: EQUAL
50404: IFTRUE 50408
50406: GO 50464
50408: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
50409: LD_ADDR_VAR 0 9
50413: PUSH
50414: LD_VAR 0 23
50418: PUSH
50419: LD_VAR 0 24
50423: PUSH
50424: LD_VAR 0 25
50428: PUSH
50429: LD_VAR 0 26
50433: PUSH
50434: LD_VAR 0 27
50438: PUSH
50439: LD_VAR 0 28
50443: PUSH
50444: EMPTY
50445: LIST
50446: LIST
50447: LIST
50448: LIST
50449: LIST
50450: LIST
50451: PUSH
50452: LD_VAR 0 4
50456: PUSH
50457: LD_INT 1
50459: PLUS
50460: ARRAY
50461: ST_TO_ADDR
50462: GO 50465
50464: POP
50465: GO 51020
50467: LD_INT 2
50469: DOUBLE
50470: EQUAL
50471: IFTRUE 50481
50473: LD_INT 3
50475: DOUBLE
50476: EQUAL
50477: IFTRUE 50481
50479: GO 50537
50481: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
50482: LD_ADDR_VAR 0 9
50486: PUSH
50487: LD_VAR 0 29
50491: PUSH
50492: LD_VAR 0 30
50496: PUSH
50497: LD_VAR 0 31
50501: PUSH
50502: LD_VAR 0 32
50506: PUSH
50507: LD_VAR 0 33
50511: PUSH
50512: LD_VAR 0 34
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: LIST
50521: LIST
50522: LIST
50523: LIST
50524: PUSH
50525: LD_VAR 0 4
50529: PUSH
50530: LD_INT 1
50532: PLUS
50533: ARRAY
50534: ST_TO_ADDR
50535: GO 51020
50537: LD_INT 16
50539: DOUBLE
50540: EQUAL
50541: IFTRUE 50599
50543: LD_INT 17
50545: DOUBLE
50546: EQUAL
50547: IFTRUE 50599
50549: LD_INT 18
50551: DOUBLE
50552: EQUAL
50553: IFTRUE 50599
50555: LD_INT 19
50557: DOUBLE
50558: EQUAL
50559: IFTRUE 50599
50561: LD_INT 22
50563: DOUBLE
50564: EQUAL
50565: IFTRUE 50599
50567: LD_INT 20
50569: DOUBLE
50570: EQUAL
50571: IFTRUE 50599
50573: LD_INT 21
50575: DOUBLE
50576: EQUAL
50577: IFTRUE 50599
50579: LD_INT 23
50581: DOUBLE
50582: EQUAL
50583: IFTRUE 50599
50585: LD_INT 24
50587: DOUBLE
50588: EQUAL
50589: IFTRUE 50599
50591: LD_INT 25
50593: DOUBLE
50594: EQUAL
50595: IFTRUE 50599
50597: GO 50655
50599: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
50600: LD_ADDR_VAR 0 9
50604: PUSH
50605: LD_VAR 0 35
50609: PUSH
50610: LD_VAR 0 36
50614: PUSH
50615: LD_VAR 0 37
50619: PUSH
50620: LD_VAR 0 38
50624: PUSH
50625: LD_VAR 0 39
50629: PUSH
50630: LD_VAR 0 40
50634: PUSH
50635: EMPTY
50636: LIST
50637: LIST
50638: LIST
50639: LIST
50640: LIST
50641: LIST
50642: PUSH
50643: LD_VAR 0 4
50647: PUSH
50648: LD_INT 1
50650: PLUS
50651: ARRAY
50652: ST_TO_ADDR
50653: GO 51020
50655: LD_INT 6
50657: DOUBLE
50658: EQUAL
50659: IFTRUE 50711
50661: LD_INT 7
50663: DOUBLE
50664: EQUAL
50665: IFTRUE 50711
50667: LD_INT 8
50669: DOUBLE
50670: EQUAL
50671: IFTRUE 50711
50673: LD_INT 13
50675: DOUBLE
50676: EQUAL
50677: IFTRUE 50711
50679: LD_INT 12
50681: DOUBLE
50682: EQUAL
50683: IFTRUE 50711
50685: LD_INT 15
50687: DOUBLE
50688: EQUAL
50689: IFTRUE 50711
50691: LD_INT 11
50693: DOUBLE
50694: EQUAL
50695: IFTRUE 50711
50697: LD_INT 14
50699: DOUBLE
50700: EQUAL
50701: IFTRUE 50711
50703: LD_INT 10
50705: DOUBLE
50706: EQUAL
50707: IFTRUE 50711
50709: GO 50767
50711: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
50712: LD_ADDR_VAR 0 9
50716: PUSH
50717: LD_VAR 0 41
50721: PUSH
50722: LD_VAR 0 42
50726: PUSH
50727: LD_VAR 0 43
50731: PUSH
50732: LD_VAR 0 44
50736: PUSH
50737: LD_VAR 0 45
50741: PUSH
50742: LD_VAR 0 46
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: LIST
50751: LIST
50752: LIST
50753: LIST
50754: PUSH
50755: LD_VAR 0 4
50759: PUSH
50760: LD_INT 1
50762: PLUS
50763: ARRAY
50764: ST_TO_ADDR
50765: GO 51020
50767: LD_INT 36
50769: DOUBLE
50770: EQUAL
50771: IFTRUE 50775
50773: GO 50831
50775: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
50776: LD_ADDR_VAR 0 9
50780: PUSH
50781: LD_VAR 0 47
50785: PUSH
50786: LD_VAR 0 48
50790: PUSH
50791: LD_VAR 0 49
50795: PUSH
50796: LD_VAR 0 50
50800: PUSH
50801: LD_VAR 0 51
50805: PUSH
50806: LD_VAR 0 52
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: LIST
50815: LIST
50816: LIST
50817: LIST
50818: PUSH
50819: LD_VAR 0 4
50823: PUSH
50824: LD_INT 1
50826: PLUS
50827: ARRAY
50828: ST_TO_ADDR
50829: GO 51020
50831: LD_INT 4
50833: DOUBLE
50834: EQUAL
50835: IFTRUE 50857
50837: LD_INT 5
50839: DOUBLE
50840: EQUAL
50841: IFTRUE 50857
50843: LD_INT 34
50845: DOUBLE
50846: EQUAL
50847: IFTRUE 50857
50849: LD_INT 37
50851: DOUBLE
50852: EQUAL
50853: IFTRUE 50857
50855: GO 50913
50857: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
50858: LD_ADDR_VAR 0 9
50862: PUSH
50863: LD_VAR 0 53
50867: PUSH
50868: LD_VAR 0 54
50872: PUSH
50873: LD_VAR 0 55
50877: PUSH
50878: LD_VAR 0 56
50882: PUSH
50883: LD_VAR 0 57
50887: PUSH
50888: LD_VAR 0 58
50892: PUSH
50893: EMPTY
50894: LIST
50895: LIST
50896: LIST
50897: LIST
50898: LIST
50899: LIST
50900: PUSH
50901: LD_VAR 0 4
50905: PUSH
50906: LD_INT 1
50908: PLUS
50909: ARRAY
50910: ST_TO_ADDR
50911: GO 51020
50913: LD_INT 31
50915: DOUBLE
50916: EQUAL
50917: IFTRUE 50963
50919: LD_INT 32
50921: DOUBLE
50922: EQUAL
50923: IFTRUE 50963
50925: LD_INT 33
50927: DOUBLE
50928: EQUAL
50929: IFTRUE 50963
50931: LD_INT 27
50933: DOUBLE
50934: EQUAL
50935: IFTRUE 50963
50937: LD_INT 26
50939: DOUBLE
50940: EQUAL
50941: IFTRUE 50963
50943: LD_INT 28
50945: DOUBLE
50946: EQUAL
50947: IFTRUE 50963
50949: LD_INT 29
50951: DOUBLE
50952: EQUAL
50953: IFTRUE 50963
50955: LD_INT 30
50957: DOUBLE
50958: EQUAL
50959: IFTRUE 50963
50961: GO 51019
50963: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
50964: LD_ADDR_VAR 0 9
50968: PUSH
50969: LD_VAR 0 59
50973: PUSH
50974: LD_VAR 0 60
50978: PUSH
50979: LD_VAR 0 61
50983: PUSH
50984: LD_VAR 0 62
50988: PUSH
50989: LD_VAR 0 63
50993: PUSH
50994: LD_VAR 0 64
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: LIST
51003: LIST
51004: LIST
51005: LIST
51006: PUSH
51007: LD_VAR 0 4
51011: PUSH
51012: LD_INT 1
51014: PLUS
51015: ARRAY
51016: ST_TO_ADDR
51017: GO 51020
51019: POP
// temp_list2 = [ ] ;
51020: LD_ADDR_VAR 0 10
51024: PUSH
51025: EMPTY
51026: ST_TO_ADDR
// for i in temp_list do
51027: LD_ADDR_VAR 0 8
51031: PUSH
51032: LD_VAR 0 9
51036: PUSH
51037: FOR_IN
51038: IFFALSE 51090
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
51040: LD_ADDR_VAR 0 10
51044: PUSH
51045: LD_VAR 0 10
51049: PUSH
51050: LD_VAR 0 8
51054: PUSH
51055: LD_INT 1
51057: ARRAY
51058: PUSH
51059: LD_VAR 0 2
51063: PLUS
51064: PUSH
51065: LD_VAR 0 8
51069: PUSH
51070: LD_INT 2
51072: ARRAY
51073: PUSH
51074: LD_VAR 0 3
51078: PLUS
51079: PUSH
51080: EMPTY
51081: LIST
51082: LIST
51083: PUSH
51084: EMPTY
51085: LIST
51086: ADD
51087: ST_TO_ADDR
51088: GO 51037
51090: POP
51091: POP
// result = temp_list2 ;
51092: LD_ADDR_VAR 0 7
51096: PUSH
51097: LD_VAR 0 10
51101: ST_TO_ADDR
// end ;
51102: LD_VAR 0 7
51106: RET
// export function EnemyInRange ( unit , dist ) ; begin
51107: LD_INT 0
51109: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
51110: LD_ADDR_VAR 0 3
51114: PUSH
51115: LD_VAR 0 1
51119: PPUSH
51120: CALL_OW 255
51124: PPUSH
51125: LD_VAR 0 1
51129: PPUSH
51130: CALL_OW 250
51134: PPUSH
51135: LD_VAR 0 1
51139: PPUSH
51140: CALL_OW 251
51144: PPUSH
51145: LD_VAR 0 2
51149: PPUSH
51150: CALL 25211 0 4
51154: PUSH
51155: LD_INT 4
51157: ARRAY
51158: ST_TO_ADDR
// end ;
51159: LD_VAR 0 3
51163: RET
// export function PlayerSeeMe ( unit ) ; begin
51164: LD_INT 0
51166: PPUSH
// result := See ( your_side , unit ) ;
51167: LD_ADDR_VAR 0 2
51171: PUSH
51172: LD_OWVAR 2
51176: PPUSH
51177: LD_VAR 0 1
51181: PPUSH
51182: CALL_OW 292
51186: ST_TO_ADDR
// end ;
51187: LD_VAR 0 2
51191: RET
// export function ReverseDir ( unit ) ; begin
51192: LD_INT 0
51194: PPUSH
// if not unit then
51195: LD_VAR 0 1
51199: NOT
51200: IFFALSE 51204
// exit ;
51202: GO 51227
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
51204: LD_ADDR_VAR 0 2
51208: PUSH
51209: LD_VAR 0 1
51213: PPUSH
51214: CALL_OW 254
51218: PUSH
51219: LD_INT 3
51221: PLUS
51222: PUSH
51223: LD_INT 6
51225: MOD
51226: ST_TO_ADDR
// end ;
51227: LD_VAR 0 2
51231: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
51232: LD_INT 0
51234: PPUSH
51235: PPUSH
51236: PPUSH
51237: PPUSH
51238: PPUSH
// if not hexes then
51239: LD_VAR 0 2
51243: NOT
51244: IFFALSE 51248
// exit ;
51246: GO 51396
// dist := 9999 ;
51248: LD_ADDR_VAR 0 5
51252: PUSH
51253: LD_INT 9999
51255: ST_TO_ADDR
// for i = 1 to hexes do
51256: LD_ADDR_VAR 0 4
51260: PUSH
51261: DOUBLE
51262: LD_INT 1
51264: DEC
51265: ST_TO_ADDR
51266: LD_VAR 0 2
51270: PUSH
51271: FOR_TO
51272: IFFALSE 51384
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
51274: LD_VAR 0 1
51278: PPUSH
51279: LD_VAR 0 2
51283: PUSH
51284: LD_VAR 0 4
51288: ARRAY
51289: PUSH
51290: LD_INT 1
51292: ARRAY
51293: PPUSH
51294: LD_VAR 0 2
51298: PUSH
51299: LD_VAR 0 4
51303: ARRAY
51304: PUSH
51305: LD_INT 2
51307: ARRAY
51308: PPUSH
51309: CALL_OW 297
51313: PUSH
51314: LD_VAR 0 5
51318: LESS
51319: IFFALSE 51382
// begin hex := hexes [ i ] ;
51321: LD_ADDR_VAR 0 7
51325: PUSH
51326: LD_VAR 0 2
51330: PUSH
51331: LD_VAR 0 4
51335: ARRAY
51336: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51337: LD_ADDR_VAR 0 5
51341: PUSH
51342: LD_VAR 0 1
51346: PPUSH
51347: LD_VAR 0 2
51351: PUSH
51352: LD_VAR 0 4
51356: ARRAY
51357: PUSH
51358: LD_INT 1
51360: ARRAY
51361: PPUSH
51362: LD_VAR 0 2
51366: PUSH
51367: LD_VAR 0 4
51371: ARRAY
51372: PUSH
51373: LD_INT 2
51375: ARRAY
51376: PPUSH
51377: CALL_OW 297
51381: ST_TO_ADDR
// end ; end ;
51382: GO 51271
51384: POP
51385: POP
// result := hex ;
51386: LD_ADDR_VAR 0 3
51390: PUSH
51391: LD_VAR 0 7
51395: ST_TO_ADDR
// end ;
51396: LD_VAR 0 3
51400: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
51401: LD_INT 0
51403: PPUSH
51404: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
51405: LD_VAR 0 1
51409: NOT
51410: PUSH
51411: LD_VAR 0 1
51415: PUSH
51416: LD_INT 21
51418: PUSH
51419: LD_INT 2
51421: PUSH
51422: EMPTY
51423: LIST
51424: LIST
51425: PUSH
51426: LD_INT 23
51428: PUSH
51429: LD_INT 2
51431: PUSH
51432: EMPTY
51433: LIST
51434: LIST
51435: PUSH
51436: EMPTY
51437: LIST
51438: LIST
51439: PPUSH
51440: CALL_OW 69
51444: IN
51445: NOT
51446: OR
51447: IFFALSE 51451
// exit ;
51449: GO 51498
// for i = 1 to 3 do
51451: LD_ADDR_VAR 0 3
51455: PUSH
51456: DOUBLE
51457: LD_INT 1
51459: DEC
51460: ST_TO_ADDR
51461: LD_INT 3
51463: PUSH
51464: FOR_TO
51465: IFFALSE 51496
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
51467: LD_VAR 0 1
51471: PPUSH
51472: CALL_OW 250
51476: PPUSH
51477: LD_VAR 0 1
51481: PPUSH
51482: CALL_OW 251
51486: PPUSH
51487: LD_INT 1
51489: PPUSH
51490: CALL_OW 453
51494: GO 51464
51496: POP
51497: POP
// end ;
51498: LD_VAR 0 2
51502: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
51503: LD_INT 0
51505: PPUSH
51506: PPUSH
51507: PPUSH
51508: PPUSH
51509: PPUSH
51510: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
51511: LD_VAR 0 1
51515: NOT
51516: PUSH
51517: LD_VAR 0 2
51521: NOT
51522: OR
51523: PUSH
51524: LD_VAR 0 1
51528: PPUSH
51529: CALL_OW 314
51533: OR
51534: IFFALSE 51538
// exit ;
51536: GO 51979
// x := GetX ( enemy_unit ) ;
51538: LD_ADDR_VAR 0 7
51542: PUSH
51543: LD_VAR 0 2
51547: PPUSH
51548: CALL_OW 250
51552: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
51553: LD_ADDR_VAR 0 8
51557: PUSH
51558: LD_VAR 0 2
51562: PPUSH
51563: CALL_OW 251
51567: ST_TO_ADDR
// if not x or not y then
51568: LD_VAR 0 7
51572: NOT
51573: PUSH
51574: LD_VAR 0 8
51578: NOT
51579: OR
51580: IFFALSE 51584
// exit ;
51582: GO 51979
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
51584: LD_ADDR_VAR 0 6
51588: PUSH
51589: LD_VAR 0 7
51593: PPUSH
51594: LD_INT 0
51596: PPUSH
51597: LD_INT 4
51599: PPUSH
51600: CALL_OW 272
51604: PUSH
51605: LD_VAR 0 8
51609: PPUSH
51610: LD_INT 0
51612: PPUSH
51613: LD_INT 4
51615: PPUSH
51616: CALL_OW 273
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: PUSH
51625: LD_VAR 0 7
51629: PPUSH
51630: LD_INT 1
51632: PPUSH
51633: LD_INT 4
51635: PPUSH
51636: CALL_OW 272
51640: PUSH
51641: LD_VAR 0 8
51645: PPUSH
51646: LD_INT 1
51648: PPUSH
51649: LD_INT 4
51651: PPUSH
51652: CALL_OW 273
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: PUSH
51661: LD_VAR 0 7
51665: PPUSH
51666: LD_INT 2
51668: PPUSH
51669: LD_INT 4
51671: PPUSH
51672: CALL_OW 272
51676: PUSH
51677: LD_VAR 0 8
51681: PPUSH
51682: LD_INT 2
51684: PPUSH
51685: LD_INT 4
51687: PPUSH
51688: CALL_OW 273
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_VAR 0 7
51701: PPUSH
51702: LD_INT 3
51704: PPUSH
51705: LD_INT 4
51707: PPUSH
51708: CALL_OW 272
51712: PUSH
51713: LD_VAR 0 8
51717: PPUSH
51718: LD_INT 3
51720: PPUSH
51721: LD_INT 4
51723: PPUSH
51724: CALL_OW 273
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: PUSH
51733: LD_VAR 0 7
51737: PPUSH
51738: LD_INT 4
51740: PPUSH
51741: LD_INT 4
51743: PPUSH
51744: CALL_OW 272
51748: PUSH
51749: LD_VAR 0 8
51753: PPUSH
51754: LD_INT 4
51756: PPUSH
51757: LD_INT 4
51759: PPUSH
51760: CALL_OW 273
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: PUSH
51769: LD_VAR 0 7
51773: PPUSH
51774: LD_INT 5
51776: PPUSH
51777: LD_INT 4
51779: PPUSH
51780: CALL_OW 272
51784: PUSH
51785: LD_VAR 0 8
51789: PPUSH
51790: LD_INT 5
51792: PPUSH
51793: LD_INT 4
51795: PPUSH
51796: CALL_OW 273
51800: PUSH
51801: EMPTY
51802: LIST
51803: LIST
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: LIST
51809: LIST
51810: LIST
51811: LIST
51812: ST_TO_ADDR
// for i = tmp downto 1 do
51813: LD_ADDR_VAR 0 4
51817: PUSH
51818: DOUBLE
51819: LD_VAR 0 6
51823: INC
51824: ST_TO_ADDR
51825: LD_INT 1
51827: PUSH
51828: FOR_DOWNTO
51829: IFFALSE 51930
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
51831: LD_VAR 0 6
51835: PUSH
51836: LD_VAR 0 4
51840: ARRAY
51841: PUSH
51842: LD_INT 1
51844: ARRAY
51845: PPUSH
51846: LD_VAR 0 6
51850: PUSH
51851: LD_VAR 0 4
51855: ARRAY
51856: PUSH
51857: LD_INT 2
51859: ARRAY
51860: PPUSH
51861: CALL_OW 488
51865: NOT
51866: PUSH
51867: LD_VAR 0 6
51871: PUSH
51872: LD_VAR 0 4
51876: ARRAY
51877: PUSH
51878: LD_INT 1
51880: ARRAY
51881: PPUSH
51882: LD_VAR 0 6
51886: PUSH
51887: LD_VAR 0 4
51891: ARRAY
51892: PUSH
51893: LD_INT 2
51895: ARRAY
51896: PPUSH
51897: CALL_OW 428
51901: PUSH
51902: LD_INT 0
51904: NONEQUAL
51905: OR
51906: IFFALSE 51928
// tmp := Delete ( tmp , i ) ;
51908: LD_ADDR_VAR 0 6
51912: PUSH
51913: LD_VAR 0 6
51917: PPUSH
51918: LD_VAR 0 4
51922: PPUSH
51923: CALL_OW 3
51927: ST_TO_ADDR
51928: GO 51828
51930: POP
51931: POP
// j := GetClosestHex ( unit , tmp ) ;
51932: LD_ADDR_VAR 0 5
51936: PUSH
51937: LD_VAR 0 1
51941: PPUSH
51942: LD_VAR 0 6
51946: PPUSH
51947: CALL 51232 0 2
51951: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
51952: LD_VAR 0 1
51956: PPUSH
51957: LD_VAR 0 5
51961: PUSH
51962: LD_INT 1
51964: ARRAY
51965: PPUSH
51966: LD_VAR 0 5
51970: PUSH
51971: LD_INT 2
51973: ARRAY
51974: PPUSH
51975: CALL_OW 111
// end ;
51979: LD_VAR 0 3
51983: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
51984: LD_INT 0
51986: PPUSH
51987: PPUSH
51988: PPUSH
// uc_side = 0 ;
51989: LD_ADDR_OWVAR 20
51993: PUSH
51994: LD_INT 0
51996: ST_TO_ADDR
// uc_nation = 0 ;
51997: LD_ADDR_OWVAR 21
52001: PUSH
52002: LD_INT 0
52004: ST_TO_ADDR
// InitHc_All ( ) ;
52005: CALL_OW 584
// InitVc ;
52009: CALL_OW 20
// if mastodonts then
52013: LD_VAR 0 6
52017: IFFALSE 52084
// for i = 1 to mastodonts do
52019: LD_ADDR_VAR 0 11
52023: PUSH
52024: DOUBLE
52025: LD_INT 1
52027: DEC
52028: ST_TO_ADDR
52029: LD_VAR 0 6
52033: PUSH
52034: FOR_TO
52035: IFFALSE 52082
// begin vc_chassis := 31 ;
52037: LD_ADDR_OWVAR 37
52041: PUSH
52042: LD_INT 31
52044: ST_TO_ADDR
// vc_control := control_rider ;
52045: LD_ADDR_OWVAR 38
52049: PUSH
52050: LD_INT 4
52052: ST_TO_ADDR
// animal := CreateVehicle ;
52053: LD_ADDR_VAR 0 12
52057: PUSH
52058: CALL_OW 45
52062: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52063: LD_VAR 0 12
52067: PPUSH
52068: LD_VAR 0 8
52072: PPUSH
52073: LD_INT 0
52075: PPUSH
52076: CALL 54272 0 3
// end ;
52080: GO 52034
52082: POP
52083: POP
// if horses then
52084: LD_VAR 0 5
52088: IFFALSE 52155
// for i = 1 to horses do
52090: LD_ADDR_VAR 0 11
52094: PUSH
52095: DOUBLE
52096: LD_INT 1
52098: DEC
52099: ST_TO_ADDR
52100: LD_VAR 0 5
52104: PUSH
52105: FOR_TO
52106: IFFALSE 52153
// begin hc_class := 21 ;
52108: LD_ADDR_OWVAR 28
52112: PUSH
52113: LD_INT 21
52115: ST_TO_ADDR
// hc_gallery :=  ;
52116: LD_ADDR_OWVAR 33
52120: PUSH
52121: LD_STRING 
52123: ST_TO_ADDR
// animal := CreateHuman ;
52124: LD_ADDR_VAR 0 12
52128: PUSH
52129: CALL_OW 44
52133: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52134: LD_VAR 0 12
52138: PPUSH
52139: LD_VAR 0 8
52143: PPUSH
52144: LD_INT 0
52146: PPUSH
52147: CALL 54272 0 3
// end ;
52151: GO 52105
52153: POP
52154: POP
// if birds then
52155: LD_VAR 0 1
52159: IFFALSE 52226
// for i = 1 to birds do
52161: LD_ADDR_VAR 0 11
52165: PUSH
52166: DOUBLE
52167: LD_INT 1
52169: DEC
52170: ST_TO_ADDR
52171: LD_VAR 0 1
52175: PUSH
52176: FOR_TO
52177: IFFALSE 52224
// begin hc_class = 18 ;
52179: LD_ADDR_OWVAR 28
52183: PUSH
52184: LD_INT 18
52186: ST_TO_ADDR
// hc_gallery =  ;
52187: LD_ADDR_OWVAR 33
52191: PUSH
52192: LD_STRING 
52194: ST_TO_ADDR
// animal := CreateHuman ;
52195: LD_ADDR_VAR 0 12
52199: PUSH
52200: CALL_OW 44
52204: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52205: LD_VAR 0 12
52209: PPUSH
52210: LD_VAR 0 8
52214: PPUSH
52215: LD_INT 0
52217: PPUSH
52218: CALL 54272 0 3
// end ;
52222: GO 52176
52224: POP
52225: POP
// if tigers then
52226: LD_VAR 0 2
52230: IFFALSE 52314
// for i = 1 to tigers do
52232: LD_ADDR_VAR 0 11
52236: PUSH
52237: DOUBLE
52238: LD_INT 1
52240: DEC
52241: ST_TO_ADDR
52242: LD_VAR 0 2
52246: PUSH
52247: FOR_TO
52248: IFFALSE 52312
// begin hc_class = class_tiger ;
52250: LD_ADDR_OWVAR 28
52254: PUSH
52255: LD_INT 14
52257: ST_TO_ADDR
// hc_gallery =  ;
52258: LD_ADDR_OWVAR 33
52262: PUSH
52263: LD_STRING 
52265: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
52266: LD_ADDR_OWVAR 35
52270: PUSH
52271: LD_INT 7
52273: NEG
52274: PPUSH
52275: LD_INT 7
52277: PPUSH
52278: CALL_OW 12
52282: ST_TO_ADDR
// animal := CreateHuman ;
52283: LD_ADDR_VAR 0 12
52287: PUSH
52288: CALL_OW 44
52292: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52293: LD_VAR 0 12
52297: PPUSH
52298: LD_VAR 0 8
52302: PPUSH
52303: LD_INT 0
52305: PPUSH
52306: CALL 54272 0 3
// end ;
52310: GO 52247
52312: POP
52313: POP
// if apemans then
52314: LD_VAR 0 3
52318: IFFALSE 52441
// for i = 1 to apemans do
52320: LD_ADDR_VAR 0 11
52324: PUSH
52325: DOUBLE
52326: LD_INT 1
52328: DEC
52329: ST_TO_ADDR
52330: LD_VAR 0 3
52334: PUSH
52335: FOR_TO
52336: IFFALSE 52439
// begin hc_class = class_apeman ;
52338: LD_ADDR_OWVAR 28
52342: PUSH
52343: LD_INT 12
52345: ST_TO_ADDR
// hc_gallery =  ;
52346: LD_ADDR_OWVAR 33
52350: PUSH
52351: LD_STRING 
52353: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
52354: LD_ADDR_OWVAR 35
52358: PUSH
52359: LD_INT 5
52361: NEG
52362: PPUSH
52363: LD_INT 5
52365: PPUSH
52366: CALL_OW 12
52370: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
52371: LD_ADDR_OWVAR 31
52375: PUSH
52376: LD_INT 1
52378: PPUSH
52379: LD_INT 3
52381: PPUSH
52382: CALL_OW 12
52386: PUSH
52387: LD_INT 1
52389: PPUSH
52390: LD_INT 3
52392: PPUSH
52393: CALL_OW 12
52397: PUSH
52398: LD_INT 0
52400: PUSH
52401: LD_INT 0
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: LIST
52408: LIST
52409: ST_TO_ADDR
// animal := CreateHuman ;
52410: LD_ADDR_VAR 0 12
52414: PUSH
52415: CALL_OW 44
52419: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52420: LD_VAR 0 12
52424: PPUSH
52425: LD_VAR 0 8
52429: PPUSH
52430: LD_INT 0
52432: PPUSH
52433: CALL 54272 0 3
// end ;
52437: GO 52335
52439: POP
52440: POP
// if enchidnas then
52441: LD_VAR 0 4
52445: IFFALSE 52512
// for i = 1 to enchidnas do
52447: LD_ADDR_VAR 0 11
52451: PUSH
52452: DOUBLE
52453: LD_INT 1
52455: DEC
52456: ST_TO_ADDR
52457: LD_VAR 0 4
52461: PUSH
52462: FOR_TO
52463: IFFALSE 52510
// begin hc_class = 13 ;
52465: LD_ADDR_OWVAR 28
52469: PUSH
52470: LD_INT 13
52472: ST_TO_ADDR
// hc_gallery =  ;
52473: LD_ADDR_OWVAR 33
52477: PUSH
52478: LD_STRING 
52480: ST_TO_ADDR
// animal := CreateHuman ;
52481: LD_ADDR_VAR 0 12
52485: PUSH
52486: CALL_OW 44
52490: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52491: LD_VAR 0 12
52495: PPUSH
52496: LD_VAR 0 8
52500: PPUSH
52501: LD_INT 0
52503: PPUSH
52504: CALL 54272 0 3
// end ;
52508: GO 52462
52510: POP
52511: POP
// if fishes then
52512: LD_VAR 0 7
52516: IFFALSE 52583
// for i = 1 to fishes do
52518: LD_ADDR_VAR 0 11
52522: PUSH
52523: DOUBLE
52524: LD_INT 1
52526: DEC
52527: ST_TO_ADDR
52528: LD_VAR 0 7
52532: PUSH
52533: FOR_TO
52534: IFFALSE 52581
// begin hc_class = 20 ;
52536: LD_ADDR_OWVAR 28
52540: PUSH
52541: LD_INT 20
52543: ST_TO_ADDR
// hc_gallery =  ;
52544: LD_ADDR_OWVAR 33
52548: PUSH
52549: LD_STRING 
52551: ST_TO_ADDR
// animal := CreateHuman ;
52552: LD_ADDR_VAR 0 12
52556: PUSH
52557: CALL_OW 44
52561: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
52562: LD_VAR 0 12
52566: PPUSH
52567: LD_VAR 0 9
52571: PPUSH
52572: LD_INT 0
52574: PPUSH
52575: CALL 54272 0 3
// end ;
52579: GO 52533
52581: POP
52582: POP
// end ;
52583: LD_VAR 0 10
52587: RET
// export function WantHeal ( sci , unit ) ; begin
52588: LD_INT 0
52590: PPUSH
// if GetTaskList ( sci ) > 0 then
52591: LD_VAR 0 1
52595: PPUSH
52596: CALL_OW 437
52600: PUSH
52601: LD_INT 0
52603: GREATER
52604: IFFALSE 52674
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
52606: LD_VAR 0 1
52610: PPUSH
52611: CALL_OW 437
52615: PUSH
52616: LD_INT 1
52618: ARRAY
52619: PUSH
52620: LD_INT 1
52622: ARRAY
52623: PUSH
52624: LD_STRING l
52626: EQUAL
52627: PUSH
52628: LD_VAR 0 1
52632: PPUSH
52633: CALL_OW 437
52637: PUSH
52638: LD_INT 1
52640: ARRAY
52641: PUSH
52642: LD_INT 4
52644: ARRAY
52645: PUSH
52646: LD_VAR 0 2
52650: EQUAL
52651: AND
52652: IFFALSE 52664
// result := true else
52654: LD_ADDR_VAR 0 3
52658: PUSH
52659: LD_INT 1
52661: ST_TO_ADDR
52662: GO 52672
// result := false ;
52664: LD_ADDR_VAR 0 3
52668: PUSH
52669: LD_INT 0
52671: ST_TO_ADDR
// end else
52672: GO 52682
// result := false ;
52674: LD_ADDR_VAR 0 3
52678: PUSH
52679: LD_INT 0
52681: ST_TO_ADDR
// end ;
52682: LD_VAR 0 3
52686: RET
// export function HealTarget ( sci ) ; begin
52687: LD_INT 0
52689: PPUSH
// if not sci then
52690: LD_VAR 0 1
52694: NOT
52695: IFFALSE 52699
// exit ;
52697: GO 52764
// result := 0 ;
52699: LD_ADDR_VAR 0 2
52703: PUSH
52704: LD_INT 0
52706: ST_TO_ADDR
// if GetTaskList ( sci ) then
52707: LD_VAR 0 1
52711: PPUSH
52712: CALL_OW 437
52716: IFFALSE 52764
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
52718: LD_VAR 0 1
52722: PPUSH
52723: CALL_OW 437
52727: PUSH
52728: LD_INT 1
52730: ARRAY
52731: PUSH
52732: LD_INT 1
52734: ARRAY
52735: PUSH
52736: LD_STRING l
52738: EQUAL
52739: IFFALSE 52764
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
52741: LD_ADDR_VAR 0 2
52745: PUSH
52746: LD_VAR 0 1
52750: PPUSH
52751: CALL_OW 437
52755: PUSH
52756: LD_INT 1
52758: ARRAY
52759: PUSH
52760: LD_INT 4
52762: ARRAY
52763: ST_TO_ADDR
// end ;
52764: LD_VAR 0 2
52768: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
52769: LD_INT 0
52771: PPUSH
52772: PPUSH
52773: PPUSH
52774: PPUSH
// if not base_units then
52775: LD_VAR 0 1
52779: NOT
52780: IFFALSE 52784
// exit ;
52782: GO 52871
// result := false ;
52784: LD_ADDR_VAR 0 2
52788: PUSH
52789: LD_INT 0
52791: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
52792: LD_ADDR_VAR 0 5
52796: PUSH
52797: LD_VAR 0 1
52801: PPUSH
52802: LD_INT 21
52804: PUSH
52805: LD_INT 3
52807: PUSH
52808: EMPTY
52809: LIST
52810: LIST
52811: PPUSH
52812: CALL_OW 72
52816: ST_TO_ADDR
// if not tmp then
52817: LD_VAR 0 5
52821: NOT
52822: IFFALSE 52826
// exit ;
52824: GO 52871
// for i in tmp do
52826: LD_ADDR_VAR 0 3
52830: PUSH
52831: LD_VAR 0 5
52835: PUSH
52836: FOR_IN
52837: IFFALSE 52869
// begin result := EnemyInRange ( i , 22 ) ;
52839: LD_ADDR_VAR 0 2
52843: PUSH
52844: LD_VAR 0 3
52848: PPUSH
52849: LD_INT 22
52851: PPUSH
52852: CALL 51107 0 2
52856: ST_TO_ADDR
// if result then
52857: LD_VAR 0 2
52861: IFFALSE 52867
// exit ;
52863: POP
52864: POP
52865: GO 52871
// end ;
52867: GO 52836
52869: POP
52870: POP
// end ;
52871: LD_VAR 0 2
52875: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
52876: LD_INT 0
52878: PPUSH
52879: PPUSH
// if not units then
52880: LD_VAR 0 1
52884: NOT
52885: IFFALSE 52889
// exit ;
52887: GO 52959
// result := [ ] ;
52889: LD_ADDR_VAR 0 3
52893: PUSH
52894: EMPTY
52895: ST_TO_ADDR
// for i in units do
52896: LD_ADDR_VAR 0 4
52900: PUSH
52901: LD_VAR 0 1
52905: PUSH
52906: FOR_IN
52907: IFFALSE 52957
// if GetTag ( i ) = tag then
52909: LD_VAR 0 4
52913: PPUSH
52914: CALL_OW 110
52918: PUSH
52919: LD_VAR 0 2
52923: EQUAL
52924: IFFALSE 52955
// result := Insert ( result , result + 1 , i ) ;
52926: LD_ADDR_VAR 0 3
52930: PUSH
52931: LD_VAR 0 3
52935: PPUSH
52936: LD_VAR 0 3
52940: PUSH
52941: LD_INT 1
52943: PLUS
52944: PPUSH
52945: LD_VAR 0 4
52949: PPUSH
52950: CALL_OW 2
52954: ST_TO_ADDR
52955: GO 52906
52957: POP
52958: POP
// end ;
52959: LD_VAR 0 3
52963: RET
// export function IsDriver ( un ) ; begin
52964: LD_INT 0
52966: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
52967: LD_ADDR_VAR 0 2
52971: PUSH
52972: LD_VAR 0 1
52976: PUSH
52977: LD_INT 55
52979: PUSH
52980: EMPTY
52981: LIST
52982: PPUSH
52983: CALL_OW 69
52987: IN
52988: ST_TO_ADDR
// end ;
52989: LD_VAR 0 2
52993: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
52994: LD_INT 0
52996: PPUSH
52997: PPUSH
// list := [ ] ;
52998: LD_ADDR_VAR 0 5
53002: PUSH
53003: EMPTY
53004: ST_TO_ADDR
// case d of 0 :
53005: LD_VAR 0 3
53009: PUSH
53010: LD_INT 0
53012: DOUBLE
53013: EQUAL
53014: IFTRUE 53018
53016: GO 53151
53018: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
53019: LD_ADDR_VAR 0 5
53023: PUSH
53024: LD_VAR 0 1
53028: PUSH
53029: LD_INT 4
53031: MINUS
53032: PUSH
53033: LD_VAR 0 2
53037: PUSH
53038: LD_INT 4
53040: MINUS
53041: PUSH
53042: LD_INT 2
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: LIST
53049: PUSH
53050: LD_VAR 0 1
53054: PUSH
53055: LD_INT 3
53057: MINUS
53058: PUSH
53059: LD_VAR 0 2
53063: PUSH
53064: LD_INT 1
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: LIST
53071: PUSH
53072: LD_VAR 0 1
53076: PUSH
53077: LD_INT 4
53079: PLUS
53080: PUSH
53081: LD_VAR 0 2
53085: PUSH
53086: LD_INT 4
53088: PUSH
53089: EMPTY
53090: LIST
53091: LIST
53092: LIST
53093: PUSH
53094: LD_VAR 0 1
53098: PUSH
53099: LD_INT 3
53101: PLUS
53102: PUSH
53103: LD_VAR 0 2
53107: PUSH
53108: LD_INT 3
53110: PLUS
53111: PUSH
53112: LD_INT 5
53114: PUSH
53115: EMPTY
53116: LIST
53117: LIST
53118: LIST
53119: PUSH
53120: LD_VAR 0 1
53124: PUSH
53125: LD_VAR 0 2
53129: PUSH
53130: LD_INT 4
53132: PLUS
53133: PUSH
53134: LD_INT 0
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: LIST
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: LIST
53146: LIST
53147: LIST
53148: ST_TO_ADDR
// end ; 1 :
53149: GO 53849
53151: LD_INT 1
53153: DOUBLE
53154: EQUAL
53155: IFTRUE 53159
53157: GO 53292
53159: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
53160: LD_ADDR_VAR 0 5
53164: PUSH
53165: LD_VAR 0 1
53169: PUSH
53170: LD_VAR 0 2
53174: PUSH
53175: LD_INT 4
53177: MINUS
53178: PUSH
53179: LD_INT 3
53181: PUSH
53182: EMPTY
53183: LIST
53184: LIST
53185: LIST
53186: PUSH
53187: LD_VAR 0 1
53191: PUSH
53192: LD_INT 3
53194: MINUS
53195: PUSH
53196: LD_VAR 0 2
53200: PUSH
53201: LD_INT 3
53203: MINUS
53204: PUSH
53205: LD_INT 2
53207: PUSH
53208: EMPTY
53209: LIST
53210: LIST
53211: LIST
53212: PUSH
53213: LD_VAR 0 1
53217: PUSH
53218: LD_INT 4
53220: MINUS
53221: PUSH
53222: LD_VAR 0 2
53226: PUSH
53227: LD_INT 1
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: LIST
53234: PUSH
53235: LD_VAR 0 1
53239: PUSH
53240: LD_VAR 0 2
53244: PUSH
53245: LD_INT 3
53247: PLUS
53248: PUSH
53249: LD_INT 0
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: LIST
53256: PUSH
53257: LD_VAR 0 1
53261: PUSH
53262: LD_INT 4
53264: PLUS
53265: PUSH
53266: LD_VAR 0 2
53270: PUSH
53271: LD_INT 4
53273: PLUS
53274: PUSH
53275: LD_INT 5
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: LIST
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: LIST
53287: LIST
53288: LIST
53289: ST_TO_ADDR
// end ; 2 :
53290: GO 53849
53292: LD_INT 2
53294: DOUBLE
53295: EQUAL
53296: IFTRUE 53300
53298: GO 53429
53300: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
53301: LD_ADDR_VAR 0 5
53305: PUSH
53306: LD_VAR 0 1
53310: PUSH
53311: LD_VAR 0 2
53315: PUSH
53316: LD_INT 3
53318: MINUS
53319: PUSH
53320: LD_INT 3
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: LIST
53327: PUSH
53328: LD_VAR 0 1
53332: PUSH
53333: LD_INT 4
53335: PLUS
53336: PUSH
53337: LD_VAR 0 2
53341: PUSH
53342: LD_INT 4
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: LIST
53349: PUSH
53350: LD_VAR 0 1
53354: PUSH
53355: LD_VAR 0 2
53359: PUSH
53360: LD_INT 4
53362: PLUS
53363: PUSH
53364: LD_INT 0
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: LIST
53371: PUSH
53372: LD_VAR 0 1
53376: PUSH
53377: LD_INT 3
53379: MINUS
53380: PUSH
53381: LD_VAR 0 2
53385: PUSH
53386: LD_INT 1
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: LIST
53393: PUSH
53394: LD_VAR 0 1
53398: PUSH
53399: LD_INT 4
53401: MINUS
53402: PUSH
53403: LD_VAR 0 2
53407: PUSH
53408: LD_INT 4
53410: MINUS
53411: PUSH
53412: LD_INT 2
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: LIST
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: LIST
53424: LIST
53425: LIST
53426: ST_TO_ADDR
// end ; 3 :
53427: GO 53849
53429: LD_INT 3
53431: DOUBLE
53432: EQUAL
53433: IFTRUE 53437
53435: GO 53570
53437: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
53438: LD_ADDR_VAR 0 5
53442: PUSH
53443: LD_VAR 0 1
53447: PUSH
53448: LD_INT 3
53450: PLUS
53451: PUSH
53452: LD_VAR 0 2
53456: PUSH
53457: LD_INT 4
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: LIST
53464: PUSH
53465: LD_VAR 0 1
53469: PUSH
53470: LD_INT 4
53472: PLUS
53473: PUSH
53474: LD_VAR 0 2
53478: PUSH
53479: LD_INT 4
53481: PLUS
53482: PUSH
53483: LD_INT 5
53485: PUSH
53486: EMPTY
53487: LIST
53488: LIST
53489: LIST
53490: PUSH
53491: LD_VAR 0 1
53495: PUSH
53496: LD_INT 4
53498: MINUS
53499: PUSH
53500: LD_VAR 0 2
53504: PUSH
53505: LD_INT 1
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: LIST
53512: PUSH
53513: LD_VAR 0 1
53517: PUSH
53518: LD_VAR 0 2
53522: PUSH
53523: LD_INT 4
53525: MINUS
53526: PUSH
53527: LD_INT 3
53529: PUSH
53530: EMPTY
53531: LIST
53532: LIST
53533: LIST
53534: PUSH
53535: LD_VAR 0 1
53539: PUSH
53540: LD_INT 3
53542: MINUS
53543: PUSH
53544: LD_VAR 0 2
53548: PUSH
53549: LD_INT 3
53551: MINUS
53552: PUSH
53553: LD_INT 2
53555: PUSH
53556: EMPTY
53557: LIST
53558: LIST
53559: LIST
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: LIST
53565: LIST
53566: LIST
53567: ST_TO_ADDR
// end ; 4 :
53568: GO 53849
53570: LD_INT 4
53572: DOUBLE
53573: EQUAL
53574: IFTRUE 53578
53576: GO 53711
53578: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
53579: LD_ADDR_VAR 0 5
53583: PUSH
53584: LD_VAR 0 1
53588: PUSH
53589: LD_VAR 0 2
53593: PUSH
53594: LD_INT 4
53596: PLUS
53597: PUSH
53598: LD_INT 0
53600: PUSH
53601: EMPTY
53602: LIST
53603: LIST
53604: LIST
53605: PUSH
53606: LD_VAR 0 1
53610: PUSH
53611: LD_INT 3
53613: PLUS
53614: PUSH
53615: LD_VAR 0 2
53619: PUSH
53620: LD_INT 3
53622: PLUS
53623: PUSH
53624: LD_INT 5
53626: PUSH
53627: EMPTY
53628: LIST
53629: LIST
53630: LIST
53631: PUSH
53632: LD_VAR 0 1
53636: PUSH
53637: LD_INT 4
53639: PLUS
53640: PUSH
53641: LD_VAR 0 2
53645: PUSH
53646: LD_INT 4
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: LIST
53653: PUSH
53654: LD_VAR 0 1
53658: PUSH
53659: LD_VAR 0 2
53663: PUSH
53664: LD_INT 3
53666: MINUS
53667: PUSH
53668: LD_INT 3
53670: PUSH
53671: EMPTY
53672: LIST
53673: LIST
53674: LIST
53675: PUSH
53676: LD_VAR 0 1
53680: PUSH
53681: LD_INT 4
53683: MINUS
53684: PUSH
53685: LD_VAR 0 2
53689: PUSH
53690: LD_INT 4
53692: MINUS
53693: PUSH
53694: LD_INT 2
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: LIST
53701: PUSH
53702: EMPTY
53703: LIST
53704: LIST
53705: LIST
53706: LIST
53707: LIST
53708: ST_TO_ADDR
// end ; 5 :
53709: GO 53849
53711: LD_INT 5
53713: DOUBLE
53714: EQUAL
53715: IFTRUE 53719
53717: GO 53848
53719: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
53720: LD_ADDR_VAR 0 5
53724: PUSH
53725: LD_VAR 0 1
53729: PUSH
53730: LD_INT 4
53732: MINUS
53733: PUSH
53734: LD_VAR 0 2
53738: PUSH
53739: LD_INT 1
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: LIST
53746: PUSH
53747: LD_VAR 0 1
53751: PUSH
53752: LD_VAR 0 2
53756: PUSH
53757: LD_INT 4
53759: MINUS
53760: PUSH
53761: LD_INT 3
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: LIST
53768: PUSH
53769: LD_VAR 0 1
53773: PUSH
53774: LD_INT 4
53776: PLUS
53777: PUSH
53778: LD_VAR 0 2
53782: PUSH
53783: LD_INT 4
53785: PLUS
53786: PUSH
53787: LD_INT 5
53789: PUSH
53790: EMPTY
53791: LIST
53792: LIST
53793: LIST
53794: PUSH
53795: LD_VAR 0 1
53799: PUSH
53800: LD_INT 3
53802: PLUS
53803: PUSH
53804: LD_VAR 0 2
53808: PUSH
53809: LD_INT 4
53811: PUSH
53812: EMPTY
53813: LIST
53814: LIST
53815: LIST
53816: PUSH
53817: LD_VAR 0 1
53821: PUSH
53822: LD_VAR 0 2
53826: PUSH
53827: LD_INT 3
53829: PLUS
53830: PUSH
53831: LD_INT 0
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: LIST
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: LIST
53843: LIST
53844: LIST
53845: ST_TO_ADDR
// end ; end ;
53846: GO 53849
53848: POP
// result := list ;
53849: LD_ADDR_VAR 0 4
53853: PUSH
53854: LD_VAR 0 5
53858: ST_TO_ADDR
// end ;
53859: LD_VAR 0 4
53863: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
53864: LD_INT 0
53866: PPUSH
53867: PPUSH
53868: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
53869: LD_VAR 0 1
53873: NOT
53874: PUSH
53875: LD_VAR 0 2
53879: PUSH
53880: LD_INT 1
53882: PUSH
53883: LD_INT 2
53885: PUSH
53886: LD_INT 3
53888: PUSH
53889: LD_INT 4
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: LIST
53896: LIST
53897: IN
53898: NOT
53899: OR
53900: IFFALSE 53904
// exit ;
53902: GO 53996
// tmp := [ ] ;
53904: LD_ADDR_VAR 0 5
53908: PUSH
53909: EMPTY
53910: ST_TO_ADDR
// for i in units do
53911: LD_ADDR_VAR 0 4
53915: PUSH
53916: LD_VAR 0 1
53920: PUSH
53921: FOR_IN
53922: IFFALSE 53965
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
53924: LD_ADDR_VAR 0 5
53928: PUSH
53929: LD_VAR 0 5
53933: PPUSH
53934: LD_VAR 0 5
53938: PUSH
53939: LD_INT 1
53941: PLUS
53942: PPUSH
53943: LD_VAR 0 4
53947: PPUSH
53948: LD_VAR 0 2
53952: PPUSH
53953: CALL_OW 259
53957: PPUSH
53958: CALL_OW 2
53962: ST_TO_ADDR
53963: GO 53921
53965: POP
53966: POP
// if not tmp then
53967: LD_VAR 0 5
53971: NOT
53972: IFFALSE 53976
// exit ;
53974: GO 53996
// result := SortListByListDesc ( units , tmp ) ;
53976: LD_ADDR_VAR 0 3
53980: PUSH
53981: LD_VAR 0 1
53985: PPUSH
53986: LD_VAR 0 5
53990: PPUSH
53991: CALL_OW 77
53995: ST_TO_ADDR
// end ;
53996: LD_VAR 0 3
54000: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
54001: LD_INT 0
54003: PPUSH
54004: PPUSH
54005: PPUSH
// result := false ;
54006: LD_ADDR_VAR 0 3
54010: PUSH
54011: LD_INT 0
54013: ST_TO_ADDR
// x := GetX ( building ) ;
54014: LD_ADDR_VAR 0 4
54018: PUSH
54019: LD_VAR 0 2
54023: PPUSH
54024: CALL_OW 250
54028: ST_TO_ADDR
// y := GetY ( building ) ;
54029: LD_ADDR_VAR 0 5
54033: PUSH
54034: LD_VAR 0 2
54038: PPUSH
54039: CALL_OW 251
54043: ST_TO_ADDR
// if not building or not x or not y then
54044: LD_VAR 0 2
54048: NOT
54049: PUSH
54050: LD_VAR 0 4
54054: NOT
54055: OR
54056: PUSH
54057: LD_VAR 0 5
54061: NOT
54062: OR
54063: IFFALSE 54067
// exit ;
54065: GO 54159
// if GetTaskList ( unit ) then
54067: LD_VAR 0 1
54071: PPUSH
54072: CALL_OW 437
54076: IFFALSE 54159
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
54078: LD_STRING e
54080: PUSH
54081: LD_VAR 0 1
54085: PPUSH
54086: CALL_OW 437
54090: PUSH
54091: LD_INT 1
54093: ARRAY
54094: PUSH
54095: LD_INT 1
54097: ARRAY
54098: EQUAL
54099: PUSH
54100: LD_VAR 0 4
54104: PUSH
54105: LD_VAR 0 1
54109: PPUSH
54110: CALL_OW 437
54114: PUSH
54115: LD_INT 1
54117: ARRAY
54118: PUSH
54119: LD_INT 2
54121: ARRAY
54122: EQUAL
54123: AND
54124: PUSH
54125: LD_VAR 0 5
54129: PUSH
54130: LD_VAR 0 1
54134: PPUSH
54135: CALL_OW 437
54139: PUSH
54140: LD_INT 1
54142: ARRAY
54143: PUSH
54144: LD_INT 3
54146: ARRAY
54147: EQUAL
54148: AND
54149: IFFALSE 54159
// result := true end ;
54151: LD_ADDR_VAR 0 3
54155: PUSH
54156: LD_INT 1
54158: ST_TO_ADDR
// end ;
54159: LD_VAR 0 3
54163: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
54164: LD_INT 0
54166: PPUSH
// result := false ;
54167: LD_ADDR_VAR 0 4
54171: PUSH
54172: LD_INT 0
54174: ST_TO_ADDR
// if GetTaskList ( unit ) then
54175: LD_VAR 0 1
54179: PPUSH
54180: CALL_OW 437
54184: IFFALSE 54267
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
54186: LD_STRING M
54188: PUSH
54189: LD_VAR 0 1
54193: PPUSH
54194: CALL_OW 437
54198: PUSH
54199: LD_INT 1
54201: ARRAY
54202: PUSH
54203: LD_INT 1
54205: ARRAY
54206: EQUAL
54207: PUSH
54208: LD_VAR 0 2
54212: PUSH
54213: LD_VAR 0 1
54217: PPUSH
54218: CALL_OW 437
54222: PUSH
54223: LD_INT 1
54225: ARRAY
54226: PUSH
54227: LD_INT 2
54229: ARRAY
54230: EQUAL
54231: AND
54232: PUSH
54233: LD_VAR 0 3
54237: PUSH
54238: LD_VAR 0 1
54242: PPUSH
54243: CALL_OW 437
54247: PUSH
54248: LD_INT 1
54250: ARRAY
54251: PUSH
54252: LD_INT 3
54254: ARRAY
54255: EQUAL
54256: AND
54257: IFFALSE 54267
// result := true ;
54259: LD_ADDR_VAR 0 4
54263: PUSH
54264: LD_INT 1
54266: ST_TO_ADDR
// end ; end ;
54267: LD_VAR 0 4
54271: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
54272: LD_INT 0
54274: PPUSH
54275: PPUSH
54276: PPUSH
54277: PPUSH
// if not unit or not area then
54278: LD_VAR 0 1
54282: NOT
54283: PUSH
54284: LD_VAR 0 2
54288: NOT
54289: OR
54290: IFFALSE 54294
// exit ;
54292: GO 54458
// tmp := AreaToList ( area , i ) ;
54294: LD_ADDR_VAR 0 6
54298: PUSH
54299: LD_VAR 0 2
54303: PPUSH
54304: LD_VAR 0 5
54308: PPUSH
54309: CALL_OW 517
54313: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
54314: LD_ADDR_VAR 0 5
54318: PUSH
54319: DOUBLE
54320: LD_INT 1
54322: DEC
54323: ST_TO_ADDR
54324: LD_VAR 0 6
54328: PUSH
54329: LD_INT 1
54331: ARRAY
54332: PUSH
54333: FOR_TO
54334: IFFALSE 54456
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
54336: LD_ADDR_VAR 0 7
54340: PUSH
54341: LD_VAR 0 6
54345: PUSH
54346: LD_INT 1
54348: ARRAY
54349: PUSH
54350: LD_VAR 0 5
54354: ARRAY
54355: PUSH
54356: LD_VAR 0 6
54360: PUSH
54361: LD_INT 2
54363: ARRAY
54364: PUSH
54365: LD_VAR 0 5
54369: ARRAY
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
54375: LD_VAR 0 7
54379: PUSH
54380: LD_INT 1
54382: ARRAY
54383: PPUSH
54384: LD_VAR 0 7
54388: PUSH
54389: LD_INT 2
54391: ARRAY
54392: PPUSH
54393: CALL_OW 428
54397: PUSH
54398: LD_INT 0
54400: EQUAL
54401: IFFALSE 54454
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
54403: LD_VAR 0 1
54407: PPUSH
54408: LD_VAR 0 7
54412: PUSH
54413: LD_INT 1
54415: ARRAY
54416: PPUSH
54417: LD_VAR 0 7
54421: PUSH
54422: LD_INT 2
54424: ARRAY
54425: PPUSH
54426: LD_VAR 0 3
54430: PPUSH
54431: CALL_OW 48
// result := IsPlaced ( unit ) ;
54435: LD_ADDR_VAR 0 4
54439: PUSH
54440: LD_VAR 0 1
54444: PPUSH
54445: CALL_OW 305
54449: ST_TO_ADDR
// exit ;
54450: POP
54451: POP
54452: GO 54458
// end ; end ;
54454: GO 54333
54456: POP
54457: POP
// end ;
54458: LD_VAR 0 4
54462: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
54463: LD_INT 0
54465: PPUSH
54466: PPUSH
54467: PPUSH
// if not side or side > 8 then
54468: LD_VAR 0 1
54472: NOT
54473: PUSH
54474: LD_VAR 0 1
54478: PUSH
54479: LD_INT 8
54481: GREATER
54482: OR
54483: IFFALSE 54487
// exit ;
54485: GO 54674
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
54487: LD_ADDR_VAR 0 4
54491: PUSH
54492: LD_INT 22
54494: PUSH
54495: LD_VAR 0 1
54499: PUSH
54500: EMPTY
54501: LIST
54502: LIST
54503: PUSH
54504: LD_INT 21
54506: PUSH
54507: LD_INT 3
54509: PUSH
54510: EMPTY
54511: LIST
54512: LIST
54513: PUSH
54514: EMPTY
54515: LIST
54516: LIST
54517: PPUSH
54518: CALL_OW 69
54522: ST_TO_ADDR
// if not tmp then
54523: LD_VAR 0 4
54527: NOT
54528: IFFALSE 54532
// exit ;
54530: GO 54674
// enable_addtolog := true ;
54532: LD_ADDR_OWVAR 81
54536: PUSH
54537: LD_INT 1
54539: ST_TO_ADDR
// AddToLog ( [ ) ;
54540: LD_STRING [
54542: PPUSH
54543: CALL_OW 561
// for i in tmp do
54547: LD_ADDR_VAR 0 3
54551: PUSH
54552: LD_VAR 0 4
54556: PUSH
54557: FOR_IN
54558: IFFALSE 54665
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
54560: LD_STRING [
54562: PUSH
54563: LD_VAR 0 3
54567: PPUSH
54568: CALL_OW 266
54572: STR
54573: PUSH
54574: LD_STRING , 
54576: STR
54577: PUSH
54578: LD_VAR 0 3
54582: PPUSH
54583: CALL_OW 250
54587: STR
54588: PUSH
54589: LD_STRING , 
54591: STR
54592: PUSH
54593: LD_VAR 0 3
54597: PPUSH
54598: CALL_OW 251
54602: STR
54603: PUSH
54604: LD_STRING , 
54606: STR
54607: PUSH
54608: LD_VAR 0 3
54612: PPUSH
54613: CALL_OW 254
54617: STR
54618: PUSH
54619: LD_STRING , 
54621: STR
54622: PUSH
54623: LD_VAR 0 3
54627: PPUSH
54628: LD_INT 1
54630: PPUSH
54631: CALL_OW 268
54635: STR
54636: PUSH
54637: LD_STRING , 
54639: STR
54640: PUSH
54641: LD_VAR 0 3
54645: PPUSH
54646: LD_INT 2
54648: PPUSH
54649: CALL_OW 268
54653: STR
54654: PUSH
54655: LD_STRING ],
54657: STR
54658: PPUSH
54659: CALL_OW 561
// end ;
54663: GO 54557
54665: POP
54666: POP
// AddToLog ( ]; ) ;
54667: LD_STRING ];
54669: PPUSH
54670: CALL_OW 561
// end ;
54674: LD_VAR 0 2
54678: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
54679: LD_INT 0
54681: PPUSH
54682: PPUSH
54683: PPUSH
54684: PPUSH
54685: PPUSH
// if not area or not rate or not max then
54686: LD_VAR 0 1
54690: NOT
54691: PUSH
54692: LD_VAR 0 2
54696: NOT
54697: OR
54698: PUSH
54699: LD_VAR 0 4
54703: NOT
54704: OR
54705: IFFALSE 54709
// exit ;
54707: GO 54901
// while 1 do
54709: LD_INT 1
54711: IFFALSE 54901
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
54713: LD_ADDR_VAR 0 9
54717: PUSH
54718: LD_VAR 0 1
54722: PPUSH
54723: LD_INT 1
54725: PPUSH
54726: CALL_OW 287
54730: PUSH
54731: LD_INT 10
54733: MUL
54734: ST_TO_ADDR
// r := rate / 10 ;
54735: LD_ADDR_VAR 0 7
54739: PUSH
54740: LD_VAR 0 2
54744: PUSH
54745: LD_INT 10
54747: DIVREAL
54748: ST_TO_ADDR
// time := 1 1$00 ;
54749: LD_ADDR_VAR 0 8
54753: PUSH
54754: LD_INT 2100
54756: ST_TO_ADDR
// if amount < min then
54757: LD_VAR 0 9
54761: PUSH
54762: LD_VAR 0 3
54766: LESS
54767: IFFALSE 54785
// r := r * 2 else
54769: LD_ADDR_VAR 0 7
54773: PUSH
54774: LD_VAR 0 7
54778: PUSH
54779: LD_INT 2
54781: MUL
54782: ST_TO_ADDR
54783: GO 54811
// if amount > max then
54785: LD_VAR 0 9
54789: PUSH
54790: LD_VAR 0 4
54794: GREATER
54795: IFFALSE 54811
// r := r / 2 ;
54797: LD_ADDR_VAR 0 7
54801: PUSH
54802: LD_VAR 0 7
54806: PUSH
54807: LD_INT 2
54809: DIVREAL
54810: ST_TO_ADDR
// time := time / r ;
54811: LD_ADDR_VAR 0 8
54815: PUSH
54816: LD_VAR 0 8
54820: PUSH
54821: LD_VAR 0 7
54825: DIVREAL
54826: ST_TO_ADDR
// if time < 0 then
54827: LD_VAR 0 8
54831: PUSH
54832: LD_INT 0
54834: LESS
54835: IFFALSE 54852
// time := time * - 1 ;
54837: LD_ADDR_VAR 0 8
54841: PUSH
54842: LD_VAR 0 8
54846: PUSH
54847: LD_INT 1
54849: NEG
54850: MUL
54851: ST_TO_ADDR
// wait ( time ) ;
54852: LD_VAR 0 8
54856: PPUSH
54857: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
54861: LD_INT 35
54863: PPUSH
54864: LD_INT 875
54866: PPUSH
54867: CALL_OW 12
54871: PPUSH
54872: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
54876: LD_INT 1
54878: PPUSH
54879: LD_INT 5
54881: PPUSH
54882: CALL_OW 12
54886: PPUSH
54887: LD_VAR 0 1
54891: PPUSH
54892: LD_INT 1
54894: PPUSH
54895: CALL_OW 55
// end ;
54899: GO 54709
// end ;
54901: LD_VAR 0 5
54905: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
54906: LD_INT 0
54908: PPUSH
54909: PPUSH
54910: PPUSH
54911: PPUSH
54912: PPUSH
54913: PPUSH
54914: PPUSH
54915: PPUSH
// if not turrets or not factories then
54916: LD_VAR 0 1
54920: NOT
54921: PUSH
54922: LD_VAR 0 2
54926: NOT
54927: OR
54928: IFFALSE 54932
// exit ;
54930: GO 55239
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
54932: LD_ADDR_VAR 0 10
54936: PUSH
54937: LD_INT 5
54939: PUSH
54940: LD_INT 6
54942: PUSH
54943: EMPTY
54944: LIST
54945: LIST
54946: PUSH
54947: LD_INT 2
54949: PUSH
54950: LD_INT 4
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: PUSH
54957: LD_INT 3
54959: PUSH
54960: LD_INT 5
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: PUSH
54967: EMPTY
54968: LIST
54969: LIST
54970: LIST
54971: PUSH
54972: LD_INT 24
54974: PUSH
54975: LD_INT 25
54977: PUSH
54978: EMPTY
54979: LIST
54980: LIST
54981: PUSH
54982: LD_INT 23
54984: PUSH
54985: LD_INT 27
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: LD_INT 42
54998: PUSH
54999: LD_INT 43
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: LD_INT 44
55008: PUSH
55009: LD_INT 46
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: PUSH
55016: LD_INT 45
55018: PUSH
55019: LD_INT 47
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: LIST
55030: PUSH
55031: EMPTY
55032: LIST
55033: LIST
55034: LIST
55035: ST_TO_ADDR
// result := [ ] ;
55036: LD_ADDR_VAR 0 3
55040: PUSH
55041: EMPTY
55042: ST_TO_ADDR
// for i in turrets do
55043: LD_ADDR_VAR 0 4
55047: PUSH
55048: LD_VAR 0 1
55052: PUSH
55053: FOR_IN
55054: IFFALSE 55237
// begin nat := GetNation ( i ) ;
55056: LD_ADDR_VAR 0 7
55060: PUSH
55061: LD_VAR 0 4
55065: PPUSH
55066: CALL_OW 248
55070: ST_TO_ADDR
// weapon := 0 ;
55071: LD_ADDR_VAR 0 8
55075: PUSH
55076: LD_INT 0
55078: ST_TO_ADDR
// if not nat then
55079: LD_VAR 0 7
55083: NOT
55084: IFFALSE 55088
// continue ;
55086: GO 55053
// for j in list [ nat ] do
55088: LD_ADDR_VAR 0 5
55092: PUSH
55093: LD_VAR 0 10
55097: PUSH
55098: LD_VAR 0 7
55102: ARRAY
55103: PUSH
55104: FOR_IN
55105: IFFALSE 55146
// if GetBWeapon ( i ) = j [ 1 ] then
55107: LD_VAR 0 4
55111: PPUSH
55112: CALL_OW 269
55116: PUSH
55117: LD_VAR 0 5
55121: PUSH
55122: LD_INT 1
55124: ARRAY
55125: EQUAL
55126: IFFALSE 55144
// begin weapon := j [ 2 ] ;
55128: LD_ADDR_VAR 0 8
55132: PUSH
55133: LD_VAR 0 5
55137: PUSH
55138: LD_INT 2
55140: ARRAY
55141: ST_TO_ADDR
// break ;
55142: GO 55146
// end ;
55144: GO 55104
55146: POP
55147: POP
// if not weapon then
55148: LD_VAR 0 8
55152: NOT
55153: IFFALSE 55157
// continue ;
55155: GO 55053
// for k in factories do
55157: LD_ADDR_VAR 0 6
55161: PUSH
55162: LD_VAR 0 2
55166: PUSH
55167: FOR_IN
55168: IFFALSE 55233
// begin weapons := AvailableWeaponList ( k ) ;
55170: LD_ADDR_VAR 0 9
55174: PUSH
55175: LD_VAR 0 6
55179: PPUSH
55180: CALL_OW 478
55184: ST_TO_ADDR
// if not weapons then
55185: LD_VAR 0 9
55189: NOT
55190: IFFALSE 55194
// continue ;
55192: GO 55167
// if weapon in weapons then
55194: LD_VAR 0 8
55198: PUSH
55199: LD_VAR 0 9
55203: IN
55204: IFFALSE 55231
// begin result := [ i , weapon ] ;
55206: LD_ADDR_VAR 0 3
55210: PUSH
55211: LD_VAR 0 4
55215: PUSH
55216: LD_VAR 0 8
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: ST_TO_ADDR
// exit ;
55225: POP
55226: POP
55227: POP
55228: POP
55229: GO 55239
// end ; end ;
55231: GO 55167
55233: POP
55234: POP
// end ;
55235: GO 55053
55237: POP
55238: POP
// end ;
55239: LD_VAR 0 3
55243: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
55244: LD_INT 0
55246: PPUSH
// if not side or side > 8 then
55247: LD_VAR 0 3
55251: NOT
55252: PUSH
55253: LD_VAR 0 3
55257: PUSH
55258: LD_INT 8
55260: GREATER
55261: OR
55262: IFFALSE 55266
// exit ;
55264: GO 55325
// if not range then
55266: LD_VAR 0 4
55270: NOT
55271: IFFALSE 55282
// range := - 12 ;
55273: LD_ADDR_VAR 0 4
55277: PUSH
55278: LD_INT 12
55280: NEG
55281: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
55282: LD_VAR 0 1
55286: PPUSH
55287: LD_VAR 0 2
55291: PPUSH
55292: LD_VAR 0 3
55296: PPUSH
55297: LD_VAR 0 4
55301: PPUSH
55302: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
55306: LD_VAR 0 1
55310: PPUSH
55311: LD_VAR 0 2
55315: PPUSH
55316: LD_VAR 0 3
55320: PPUSH
55321: CALL_OW 331
// end ;
55325: LD_VAR 0 5
55329: RET
// export function Video ( mode ) ; begin
55330: LD_INT 0
55332: PPUSH
// ingame_video = mode ;
55333: LD_ADDR_OWVAR 52
55337: PUSH
55338: LD_VAR 0 1
55342: ST_TO_ADDR
// interface_hidden = mode ;
55343: LD_ADDR_OWVAR 54
55347: PUSH
55348: LD_VAR 0 1
55352: ST_TO_ADDR
// end ;
55353: LD_VAR 0 2
55357: RET
// export function Join ( array , element ) ; begin
55358: LD_INT 0
55360: PPUSH
// result := Replace ( array , array + 1 , element ) ;
55361: LD_ADDR_VAR 0 3
55365: PUSH
55366: LD_VAR 0 1
55370: PPUSH
55371: LD_VAR 0 1
55375: PUSH
55376: LD_INT 1
55378: PLUS
55379: PPUSH
55380: LD_VAR 0 2
55384: PPUSH
55385: CALL_OW 1
55389: ST_TO_ADDR
// end ;
55390: LD_VAR 0 3
55394: RET
// export function JoinUnion ( array , element ) ; begin
55395: LD_INT 0
55397: PPUSH
// result := array union element ;
55398: LD_ADDR_VAR 0 3
55402: PUSH
55403: LD_VAR 0 1
55407: PUSH
55408: LD_VAR 0 2
55412: UNION
55413: ST_TO_ADDR
// end ;
55414: LD_VAR 0 3
55418: RET
// export function GetBehemoths ( side ) ; begin
55419: LD_INT 0
55421: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
55422: LD_ADDR_VAR 0 2
55426: PUSH
55427: LD_INT 22
55429: PUSH
55430: LD_VAR 0 1
55434: PUSH
55435: EMPTY
55436: LIST
55437: LIST
55438: PUSH
55439: LD_INT 31
55441: PUSH
55442: LD_INT 25
55444: PUSH
55445: EMPTY
55446: LIST
55447: LIST
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PPUSH
55453: CALL_OW 69
55457: ST_TO_ADDR
// end ;
55458: LD_VAR 0 2
55462: RET
// export function Shuffle ( array ) ; var i , index ; begin
55463: LD_INT 0
55465: PPUSH
55466: PPUSH
55467: PPUSH
// result := [ ] ;
55468: LD_ADDR_VAR 0 2
55472: PUSH
55473: EMPTY
55474: ST_TO_ADDR
// if not array then
55475: LD_VAR 0 1
55479: NOT
55480: IFFALSE 55484
// exit ;
55482: GO 55583
// Randomize ;
55484: CALL_OW 10
// for i = array downto 1 do
55488: LD_ADDR_VAR 0 3
55492: PUSH
55493: DOUBLE
55494: LD_VAR 0 1
55498: INC
55499: ST_TO_ADDR
55500: LD_INT 1
55502: PUSH
55503: FOR_DOWNTO
55504: IFFALSE 55581
// begin index := rand ( 1 , array ) ;
55506: LD_ADDR_VAR 0 4
55510: PUSH
55511: LD_INT 1
55513: PPUSH
55514: LD_VAR 0 1
55518: PPUSH
55519: CALL_OW 12
55523: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
55524: LD_ADDR_VAR 0 2
55528: PUSH
55529: LD_VAR 0 2
55533: PPUSH
55534: LD_VAR 0 2
55538: PUSH
55539: LD_INT 1
55541: PLUS
55542: PPUSH
55543: LD_VAR 0 1
55547: PUSH
55548: LD_VAR 0 4
55552: ARRAY
55553: PPUSH
55554: CALL_OW 2
55558: ST_TO_ADDR
// array := Delete ( array , index ) ;
55559: LD_ADDR_VAR 0 1
55563: PUSH
55564: LD_VAR 0 1
55568: PPUSH
55569: LD_VAR 0 4
55573: PPUSH
55574: CALL_OW 3
55578: ST_TO_ADDR
// end ;
55579: GO 55503
55581: POP
55582: POP
// end ;
55583: LD_VAR 0 2
55587: RET
// export function GetBaseMaterials ( base ) ; begin
55588: LD_INT 0
55590: PPUSH
// result := [ 0 , 0 , 0 ] ;
55591: LD_ADDR_VAR 0 2
55595: PUSH
55596: LD_INT 0
55598: PUSH
55599: LD_INT 0
55601: PUSH
55602: LD_INT 0
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: LIST
55609: ST_TO_ADDR
// if not base then
55610: LD_VAR 0 1
55614: NOT
55615: IFFALSE 55619
// exit ;
55617: GO 55668
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
55619: LD_ADDR_VAR 0 2
55623: PUSH
55624: LD_VAR 0 1
55628: PPUSH
55629: LD_INT 1
55631: PPUSH
55632: CALL_OW 275
55636: PUSH
55637: LD_VAR 0 1
55641: PPUSH
55642: LD_INT 2
55644: PPUSH
55645: CALL_OW 275
55649: PUSH
55650: LD_VAR 0 1
55654: PPUSH
55655: LD_INT 3
55657: PPUSH
55658: CALL_OW 275
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: LIST
55667: ST_TO_ADDR
// end ;
55668: LD_VAR 0 2
55672: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
55673: LD_INT 0
55675: PPUSH
55676: PPUSH
// result := array ;
55677: LD_ADDR_VAR 0 3
55681: PUSH
55682: LD_VAR 0 1
55686: ST_TO_ADDR
// if size > 0 then
55687: LD_VAR 0 2
55691: PUSH
55692: LD_INT 0
55694: GREATER
55695: IFFALSE 55741
// for i := array downto size do
55697: LD_ADDR_VAR 0 4
55701: PUSH
55702: DOUBLE
55703: LD_VAR 0 1
55707: INC
55708: ST_TO_ADDR
55709: LD_VAR 0 2
55713: PUSH
55714: FOR_DOWNTO
55715: IFFALSE 55739
// result := Delete ( result , result ) ;
55717: LD_ADDR_VAR 0 3
55721: PUSH
55722: LD_VAR 0 3
55726: PPUSH
55727: LD_VAR 0 3
55731: PPUSH
55732: CALL_OW 3
55736: ST_TO_ADDR
55737: GO 55714
55739: POP
55740: POP
// end ;
55741: LD_VAR 0 3
55745: RET
// export function ComExit ( unit ) ; var tmp ; begin
55746: LD_INT 0
55748: PPUSH
55749: PPUSH
// if not IsInUnit ( unit ) then
55750: LD_VAR 0 1
55754: PPUSH
55755: CALL_OW 310
55759: NOT
55760: IFFALSE 55764
// exit ;
55762: GO 55824
// tmp := IsInUnit ( unit ) ;
55764: LD_ADDR_VAR 0 3
55768: PUSH
55769: LD_VAR 0 1
55773: PPUSH
55774: CALL_OW 310
55778: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
55779: LD_VAR 0 3
55783: PPUSH
55784: CALL_OW 247
55788: PUSH
55789: LD_INT 2
55791: EQUAL
55792: IFFALSE 55805
// ComExitVehicle ( unit ) else
55794: LD_VAR 0 1
55798: PPUSH
55799: CALL_OW 121
55803: GO 55814
// ComExitBuilding ( unit ) ;
55805: LD_VAR 0 1
55809: PPUSH
55810: CALL_OW 122
// result := tmp ;
55814: LD_ADDR_VAR 0 2
55818: PUSH
55819: LD_VAR 0 3
55823: ST_TO_ADDR
// end ;
55824: LD_VAR 0 2
55828: RET
// export function ResetHc ; begin
55829: LD_INT 0
55831: PPUSH
// InitHc ;
55832: CALL_OW 19
// hc_importance := 0 ;
55836: LD_ADDR_OWVAR 32
55840: PUSH
55841: LD_INT 0
55843: ST_TO_ADDR
// end ;
55844: LD_VAR 0 1
55848: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
55849: LD_INT 0
55851: PPUSH
55852: PPUSH
55853: PPUSH
// _x := ( x1 + x2 ) div 2 ;
55854: LD_ADDR_VAR 0 6
55858: PUSH
55859: LD_VAR 0 1
55863: PUSH
55864: LD_VAR 0 3
55868: PLUS
55869: PUSH
55870: LD_INT 2
55872: DIV
55873: ST_TO_ADDR
// if _x < 0 then
55874: LD_VAR 0 6
55878: PUSH
55879: LD_INT 0
55881: LESS
55882: IFFALSE 55899
// _x := _x * - 1 ;
55884: LD_ADDR_VAR 0 6
55888: PUSH
55889: LD_VAR 0 6
55893: PUSH
55894: LD_INT 1
55896: NEG
55897: MUL
55898: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
55899: LD_ADDR_VAR 0 7
55903: PUSH
55904: LD_VAR 0 2
55908: PUSH
55909: LD_VAR 0 4
55913: PLUS
55914: PUSH
55915: LD_INT 2
55917: DIV
55918: ST_TO_ADDR
// if _y < 0 then
55919: LD_VAR 0 7
55923: PUSH
55924: LD_INT 0
55926: LESS
55927: IFFALSE 55944
// _y := _y * - 1 ;
55929: LD_ADDR_VAR 0 7
55933: PUSH
55934: LD_VAR 0 7
55938: PUSH
55939: LD_INT 1
55941: NEG
55942: MUL
55943: ST_TO_ADDR
// result := [ _x , _y ] ;
55944: LD_ADDR_VAR 0 5
55948: PUSH
55949: LD_VAR 0 6
55953: PUSH
55954: LD_VAR 0 7
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: ST_TO_ADDR
// end ;
55963: LD_VAR 0 5
55967: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
55968: LD_INT 0
55970: PPUSH
55971: PPUSH
55972: PPUSH
55973: PPUSH
// task := GetTaskList ( unit ) ;
55974: LD_ADDR_VAR 0 7
55978: PUSH
55979: LD_VAR 0 1
55983: PPUSH
55984: CALL_OW 437
55988: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
55989: LD_VAR 0 7
55993: NOT
55994: PUSH
55995: LD_VAR 0 1
55999: PPUSH
56000: LD_VAR 0 2
56004: PPUSH
56005: CALL_OW 308
56009: NOT
56010: AND
56011: IFFALSE 56015
// exit ;
56013: GO 56133
// if IsInArea ( unit , area ) then
56015: LD_VAR 0 1
56019: PPUSH
56020: LD_VAR 0 2
56024: PPUSH
56025: CALL_OW 308
56029: IFFALSE 56047
// begin ComMoveToArea ( unit , goAway ) ;
56031: LD_VAR 0 1
56035: PPUSH
56036: LD_VAR 0 3
56040: PPUSH
56041: CALL_OW 113
// exit ;
56045: GO 56133
// end ; if task [ 1 ] [ 1 ] <> M then
56047: LD_VAR 0 7
56051: PUSH
56052: LD_INT 1
56054: ARRAY
56055: PUSH
56056: LD_INT 1
56058: ARRAY
56059: PUSH
56060: LD_STRING M
56062: NONEQUAL
56063: IFFALSE 56067
// exit ;
56065: GO 56133
// x := task [ 1 ] [ 2 ] ;
56067: LD_ADDR_VAR 0 5
56071: PUSH
56072: LD_VAR 0 7
56076: PUSH
56077: LD_INT 1
56079: ARRAY
56080: PUSH
56081: LD_INT 2
56083: ARRAY
56084: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
56085: LD_ADDR_VAR 0 6
56089: PUSH
56090: LD_VAR 0 7
56094: PUSH
56095: LD_INT 1
56097: ARRAY
56098: PUSH
56099: LD_INT 3
56101: ARRAY
56102: ST_TO_ADDR
// if InArea ( x , y , area ) then
56103: LD_VAR 0 5
56107: PPUSH
56108: LD_VAR 0 6
56112: PPUSH
56113: LD_VAR 0 2
56117: PPUSH
56118: CALL_OW 309
56122: IFFALSE 56133
// ComStop ( unit ) ;
56124: LD_VAR 0 1
56128: PPUSH
56129: CALL_OW 141
// end ;
56133: LD_VAR 0 4
56137: RET
// export function Abs ( value ) ; begin
56138: LD_INT 0
56140: PPUSH
// result := value ;
56141: LD_ADDR_VAR 0 2
56145: PUSH
56146: LD_VAR 0 1
56150: ST_TO_ADDR
// if value < 0 then
56151: LD_VAR 0 1
56155: PUSH
56156: LD_INT 0
56158: LESS
56159: IFFALSE 56176
// result := value * - 1 ;
56161: LD_ADDR_VAR 0 2
56165: PUSH
56166: LD_VAR 0 1
56170: PUSH
56171: LD_INT 1
56173: NEG
56174: MUL
56175: ST_TO_ADDR
// end ;
56176: LD_VAR 0 2
56180: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
56181: LD_INT 0
56183: PPUSH
56184: PPUSH
56185: PPUSH
56186: PPUSH
56187: PPUSH
56188: PPUSH
56189: PPUSH
56190: PPUSH
// if not unit or not building then
56191: LD_VAR 0 1
56195: NOT
56196: PUSH
56197: LD_VAR 0 2
56201: NOT
56202: OR
56203: IFFALSE 56207
// exit ;
56205: GO 56433
// x := GetX ( building ) ;
56207: LD_ADDR_VAR 0 4
56211: PUSH
56212: LD_VAR 0 2
56216: PPUSH
56217: CALL_OW 250
56221: ST_TO_ADDR
// y := GetY ( building ) ;
56222: LD_ADDR_VAR 0 6
56226: PUSH
56227: LD_VAR 0 2
56231: PPUSH
56232: CALL_OW 251
56236: ST_TO_ADDR
// d := GetDir ( building ) ;
56237: LD_ADDR_VAR 0 8
56241: PUSH
56242: LD_VAR 0 2
56246: PPUSH
56247: CALL_OW 254
56251: ST_TO_ADDR
// r := 4 ;
56252: LD_ADDR_VAR 0 9
56256: PUSH
56257: LD_INT 4
56259: ST_TO_ADDR
// for i := 1 to 5 do
56260: LD_ADDR_VAR 0 10
56264: PUSH
56265: DOUBLE
56266: LD_INT 1
56268: DEC
56269: ST_TO_ADDR
56270: LD_INT 5
56272: PUSH
56273: FOR_TO
56274: IFFALSE 56431
// begin _x := ShiftX ( x , d , r + i ) ;
56276: LD_ADDR_VAR 0 5
56280: PUSH
56281: LD_VAR 0 4
56285: PPUSH
56286: LD_VAR 0 8
56290: PPUSH
56291: LD_VAR 0 9
56295: PUSH
56296: LD_VAR 0 10
56300: PLUS
56301: PPUSH
56302: CALL_OW 272
56306: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
56307: LD_ADDR_VAR 0 7
56311: PUSH
56312: LD_VAR 0 6
56316: PPUSH
56317: LD_VAR 0 8
56321: PPUSH
56322: LD_VAR 0 9
56326: PUSH
56327: LD_VAR 0 10
56331: PLUS
56332: PPUSH
56333: CALL_OW 273
56337: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
56338: LD_VAR 0 5
56342: PPUSH
56343: LD_VAR 0 7
56347: PPUSH
56348: CALL_OW 488
56352: PUSH
56353: LD_VAR 0 5
56357: PPUSH
56358: LD_VAR 0 7
56362: PPUSH
56363: CALL_OW 428
56367: PPUSH
56368: CALL_OW 247
56372: PUSH
56373: LD_INT 3
56375: PUSH
56376: LD_INT 2
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: IN
56383: NOT
56384: AND
56385: IFFALSE 56429
// begin ComMoveXY ( unit , _x , _y ) ;
56387: LD_VAR 0 1
56391: PPUSH
56392: LD_VAR 0 5
56396: PPUSH
56397: LD_VAR 0 7
56401: PPUSH
56402: CALL_OW 111
// result := [ _x , _y ] ;
56406: LD_ADDR_VAR 0 3
56410: PUSH
56411: LD_VAR 0 5
56415: PUSH
56416: LD_VAR 0 7
56420: PUSH
56421: EMPTY
56422: LIST
56423: LIST
56424: ST_TO_ADDR
// exit ;
56425: POP
56426: POP
56427: GO 56433
// end ; end ;
56429: GO 56273
56431: POP
56432: POP
// end ; end_of_file
56433: LD_VAR 0 3
56437: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
56438: LD_INT 0
56440: PPUSH
// ar_miner := 81 ;
56441: LD_ADDR_EXP 36
56445: PUSH
56446: LD_INT 81
56448: ST_TO_ADDR
// ar_crane := 88 ;
56449: LD_ADDR_EXP 35
56453: PUSH
56454: LD_INT 88
56456: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
56457: LD_ADDR_EXP 30
56461: PUSH
56462: LD_INT 89
56464: ST_TO_ADDR
// us_hack := 99 ;
56465: LD_ADDR_EXP 31
56469: PUSH
56470: LD_INT 99
56472: ST_TO_ADDR
// us_artillery := 97 ;
56473: LD_ADDR_EXP 32
56477: PUSH
56478: LD_INT 97
56480: ST_TO_ADDR
// ar_bio_bomb := 91 ;
56481: LD_ADDR_EXP 33
56485: PUSH
56486: LD_INT 91
56488: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
56489: LD_ADDR_EXP 34
56493: PUSH
56494: LD_INT 92
56496: ST_TO_ADDR
// ru_radar := 98 ;
56497: LD_ADDR_EXP 29
56501: PUSH
56502: LD_INT 98
56504: ST_TO_ADDR
// tech_Artillery := 80 ;
56505: LD_ADDR_EXP 37
56509: PUSH
56510: LD_INT 80
56512: ST_TO_ADDR
// tech_RadMat := 81 ;
56513: LD_ADDR_EXP 38
56517: PUSH
56518: LD_INT 81
56520: ST_TO_ADDR
// tech_BasicTools := 82 ;
56521: LD_ADDR_EXP 39
56525: PUSH
56526: LD_INT 82
56528: ST_TO_ADDR
// tech_Cargo := 83 ;
56529: LD_ADDR_EXP 40
56533: PUSH
56534: LD_INT 83
56536: ST_TO_ADDR
// tech_Track := 84 ;
56537: LD_ADDR_EXP 41
56541: PUSH
56542: LD_INT 84
56544: ST_TO_ADDR
// tech_Crane := 85 ;
56545: LD_ADDR_EXP 42
56549: PUSH
56550: LD_INT 85
56552: ST_TO_ADDR
// tech_Bulldozer := 86 ;
56553: LD_ADDR_EXP 43
56557: PUSH
56558: LD_INT 86
56560: ST_TO_ADDR
// tech_Hovercraft := 87 ;
56561: LD_ADDR_EXP 44
56565: PUSH
56566: LD_INT 87
56568: ST_TO_ADDR
// end ;
56569: LD_VAR 0 1
56573: RET
// every 1 do
56574: GO 56576
56576: DISABLE
// InitGlobalVariables ; end_of_file
56577: CALL 56438 0 0
56581: END
// export skirmish , debug_mc ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_teleport_exit_set , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver , mc_class , mc_class_case_use ; export function InitMacro ; var i ; begin
56582: LD_INT 0
56584: PPUSH
56585: PPUSH
// skirmish := false ;
56586: LD_ADDR_EXP 45
56590: PUSH
56591: LD_INT 0
56593: ST_TO_ADDR
// debug_mc := false ;
56594: LD_ADDR_EXP 46
56598: PUSH
56599: LD_INT 0
56601: ST_TO_ADDR
// mc_bases := [ ] ;
56602: LD_ADDR_EXP 47
56606: PUSH
56607: EMPTY
56608: ST_TO_ADDR
// mc_sides := [ ] ;
56609: LD_ADDR_EXP 73
56613: PUSH
56614: EMPTY
56615: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
56616: LD_ADDR_EXP 48
56620: PUSH
56621: EMPTY
56622: ST_TO_ADDR
// mc_building_repairs := [ ] ;
56623: LD_ADDR_EXP 49
56627: PUSH
56628: EMPTY
56629: ST_TO_ADDR
// mc_need_heal := [ ] ;
56630: LD_ADDR_EXP 50
56634: PUSH
56635: EMPTY
56636: ST_TO_ADDR
// mc_healers := [ ] ;
56637: LD_ADDR_EXP 51
56641: PUSH
56642: EMPTY
56643: ST_TO_ADDR
// mc_build_list := [ ] ;
56644: LD_ADDR_EXP 52
56648: PUSH
56649: EMPTY
56650: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
56651: LD_ADDR_EXP 79
56655: PUSH
56656: EMPTY
56657: ST_TO_ADDR
// mc_builders := [ ] ;
56658: LD_ADDR_EXP 53
56662: PUSH
56663: EMPTY
56664: ST_TO_ADDR
// mc_construct_list := [ ] ;
56665: LD_ADDR_EXP 54
56669: PUSH
56670: EMPTY
56671: ST_TO_ADDR
// mc_turret_list := [ ] ;
56672: LD_ADDR_EXP 55
56676: PUSH
56677: EMPTY
56678: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
56679: LD_ADDR_EXP 56
56683: PUSH
56684: EMPTY
56685: ST_TO_ADDR
// mc_miners := [ ] ;
56686: LD_ADDR_EXP 61
56690: PUSH
56691: EMPTY
56692: ST_TO_ADDR
// mc_mines := [ ] ;
56693: LD_ADDR_EXP 60
56697: PUSH
56698: EMPTY
56699: ST_TO_ADDR
// mc_minefields := [ ] ;
56700: LD_ADDR_EXP 62
56704: PUSH
56705: EMPTY
56706: ST_TO_ADDR
// mc_crates := [ ] ;
56707: LD_ADDR_EXP 63
56711: PUSH
56712: EMPTY
56713: ST_TO_ADDR
// mc_crates_collector := [ ] ;
56714: LD_ADDR_EXP 64
56718: PUSH
56719: EMPTY
56720: ST_TO_ADDR
// mc_crates_area := [ ] ;
56721: LD_ADDR_EXP 65
56725: PUSH
56726: EMPTY
56727: ST_TO_ADDR
// mc_vehicles := [ ] ;
56728: LD_ADDR_EXP 66
56732: PUSH
56733: EMPTY
56734: ST_TO_ADDR
// mc_attack := [ ] ;
56735: LD_ADDR_EXP 67
56739: PUSH
56740: EMPTY
56741: ST_TO_ADDR
// mc_produce := [ ] ;
56742: LD_ADDR_EXP 68
56746: PUSH
56747: EMPTY
56748: ST_TO_ADDR
// mc_defender := [ ] ;
56749: LD_ADDR_EXP 69
56753: PUSH
56754: EMPTY
56755: ST_TO_ADDR
// mc_parking := [ ] ;
56756: LD_ADDR_EXP 71
56760: PUSH
56761: EMPTY
56762: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
56763: LD_ADDR_EXP 57
56767: PUSH
56768: EMPTY
56769: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
56770: LD_ADDR_EXP 59
56774: PUSH
56775: EMPTY
56776: ST_TO_ADDR
// mc_scan := [ ] ;
56777: LD_ADDR_EXP 70
56781: PUSH
56782: EMPTY
56783: ST_TO_ADDR
// mc_scan_area := [ ] ;
56784: LD_ADDR_EXP 72
56788: PUSH
56789: EMPTY
56790: ST_TO_ADDR
// mc_tech := [ ] ;
56791: LD_ADDR_EXP 74
56795: PUSH
56796: EMPTY
56797: ST_TO_ADDR
// mc_class := [ ] ;
56798: LD_ADDR_EXP 88
56802: PUSH
56803: EMPTY
56804: ST_TO_ADDR
// mc_class_case_use := [ ] ;
56805: LD_ADDR_EXP 89
56809: PUSH
56810: EMPTY
56811: ST_TO_ADDR
// end ;
56812: LD_VAR 0 1
56816: RET
// export function MC_Kill ( base ) ; begin
56817: LD_INT 0
56819: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
56820: LD_ADDR_EXP 47
56824: PUSH
56825: LD_EXP 47
56829: PPUSH
56830: LD_VAR 0 1
56834: PPUSH
56835: EMPTY
56836: PPUSH
56837: CALL_OW 1
56841: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
56842: LD_ADDR_EXP 48
56846: PUSH
56847: LD_EXP 48
56851: PPUSH
56852: LD_VAR 0 1
56856: PPUSH
56857: EMPTY
56858: PPUSH
56859: CALL_OW 1
56863: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
56864: LD_ADDR_EXP 49
56868: PUSH
56869: LD_EXP 49
56873: PPUSH
56874: LD_VAR 0 1
56878: PPUSH
56879: EMPTY
56880: PPUSH
56881: CALL_OW 1
56885: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
56886: LD_ADDR_EXP 50
56890: PUSH
56891: LD_EXP 50
56895: PPUSH
56896: LD_VAR 0 1
56900: PPUSH
56901: EMPTY
56902: PPUSH
56903: CALL_OW 1
56907: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
56908: LD_ADDR_EXP 51
56912: PUSH
56913: LD_EXP 51
56917: PPUSH
56918: LD_VAR 0 1
56922: PPUSH
56923: EMPTY
56924: PPUSH
56925: CALL_OW 1
56929: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
56930: LD_ADDR_EXP 52
56934: PUSH
56935: LD_EXP 52
56939: PPUSH
56940: LD_VAR 0 1
56944: PPUSH
56945: EMPTY
56946: PPUSH
56947: CALL_OW 1
56951: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
56952: LD_ADDR_EXP 53
56956: PUSH
56957: LD_EXP 53
56961: PPUSH
56962: LD_VAR 0 1
56966: PPUSH
56967: EMPTY
56968: PPUSH
56969: CALL_OW 1
56973: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
56974: LD_ADDR_EXP 54
56978: PUSH
56979: LD_EXP 54
56983: PPUSH
56984: LD_VAR 0 1
56988: PPUSH
56989: EMPTY
56990: PPUSH
56991: CALL_OW 1
56995: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
56996: LD_ADDR_EXP 55
57000: PUSH
57001: LD_EXP 55
57005: PPUSH
57006: LD_VAR 0 1
57010: PPUSH
57011: EMPTY
57012: PPUSH
57013: CALL_OW 1
57017: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
57018: LD_ADDR_EXP 56
57022: PUSH
57023: LD_EXP 56
57027: PPUSH
57028: LD_VAR 0 1
57032: PPUSH
57033: EMPTY
57034: PPUSH
57035: CALL_OW 1
57039: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
57040: LD_ADDR_EXP 57
57044: PUSH
57045: LD_EXP 57
57049: PPUSH
57050: LD_VAR 0 1
57054: PPUSH
57055: EMPTY
57056: PPUSH
57057: CALL_OW 1
57061: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
57062: LD_ADDR_EXP 58
57066: PUSH
57067: LD_EXP 58
57071: PPUSH
57072: LD_VAR 0 1
57076: PPUSH
57077: LD_INT 0
57079: PPUSH
57080: CALL_OW 1
57084: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
57085: LD_ADDR_EXP 59
57089: PUSH
57090: LD_EXP 59
57094: PPUSH
57095: LD_VAR 0 1
57099: PPUSH
57100: EMPTY
57101: PPUSH
57102: CALL_OW 1
57106: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
57107: LD_ADDR_EXP 60
57111: PUSH
57112: LD_EXP 60
57116: PPUSH
57117: LD_VAR 0 1
57121: PPUSH
57122: EMPTY
57123: PPUSH
57124: CALL_OW 1
57128: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
57129: LD_ADDR_EXP 61
57133: PUSH
57134: LD_EXP 61
57138: PPUSH
57139: LD_VAR 0 1
57143: PPUSH
57144: EMPTY
57145: PPUSH
57146: CALL_OW 1
57150: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
57151: LD_ADDR_EXP 62
57155: PUSH
57156: LD_EXP 62
57160: PPUSH
57161: LD_VAR 0 1
57165: PPUSH
57166: EMPTY
57167: PPUSH
57168: CALL_OW 1
57172: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
57173: LD_ADDR_EXP 63
57177: PUSH
57178: LD_EXP 63
57182: PPUSH
57183: LD_VAR 0 1
57187: PPUSH
57188: EMPTY
57189: PPUSH
57190: CALL_OW 1
57194: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
57195: LD_ADDR_EXP 64
57199: PUSH
57200: LD_EXP 64
57204: PPUSH
57205: LD_VAR 0 1
57209: PPUSH
57210: EMPTY
57211: PPUSH
57212: CALL_OW 1
57216: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
57217: LD_ADDR_EXP 65
57221: PUSH
57222: LD_EXP 65
57226: PPUSH
57227: LD_VAR 0 1
57231: PPUSH
57232: EMPTY
57233: PPUSH
57234: CALL_OW 1
57238: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
57239: LD_ADDR_EXP 66
57243: PUSH
57244: LD_EXP 66
57248: PPUSH
57249: LD_VAR 0 1
57253: PPUSH
57254: EMPTY
57255: PPUSH
57256: CALL_OW 1
57260: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
57261: LD_ADDR_EXP 67
57265: PUSH
57266: LD_EXP 67
57270: PPUSH
57271: LD_VAR 0 1
57275: PPUSH
57276: EMPTY
57277: PPUSH
57278: CALL_OW 1
57282: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
57283: LD_ADDR_EXP 68
57287: PUSH
57288: LD_EXP 68
57292: PPUSH
57293: LD_VAR 0 1
57297: PPUSH
57298: EMPTY
57299: PPUSH
57300: CALL_OW 1
57304: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
57305: LD_ADDR_EXP 69
57309: PUSH
57310: LD_EXP 69
57314: PPUSH
57315: LD_VAR 0 1
57319: PPUSH
57320: EMPTY
57321: PPUSH
57322: CALL_OW 1
57326: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
57327: LD_ADDR_EXP 70
57331: PUSH
57332: LD_EXP 70
57336: PPUSH
57337: LD_VAR 0 1
57341: PPUSH
57342: EMPTY
57343: PPUSH
57344: CALL_OW 1
57348: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
57349: LD_ADDR_EXP 71
57353: PUSH
57354: LD_EXP 71
57358: PPUSH
57359: LD_VAR 0 1
57363: PPUSH
57364: EMPTY
57365: PPUSH
57366: CALL_OW 1
57370: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
57371: LD_ADDR_EXP 72
57375: PUSH
57376: LD_EXP 72
57380: PPUSH
57381: LD_VAR 0 1
57385: PPUSH
57386: EMPTY
57387: PPUSH
57388: CALL_OW 1
57392: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
57393: LD_ADDR_EXP 74
57397: PUSH
57398: LD_EXP 74
57402: PPUSH
57403: LD_VAR 0 1
57407: PPUSH
57408: EMPTY
57409: PPUSH
57410: CALL_OW 1
57414: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
57415: LD_ADDR_EXP 76
57419: PUSH
57420: LD_EXP 76
57424: PPUSH
57425: LD_VAR 0 1
57429: PPUSH
57430: EMPTY
57431: PPUSH
57432: CALL_OW 1
57436: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
57437: LD_ADDR_EXP 77
57441: PUSH
57442: LD_EXP 77
57446: PPUSH
57447: LD_VAR 0 1
57451: PPUSH
57452: EMPTY
57453: PPUSH
57454: CALL_OW 1
57458: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
57459: LD_ADDR_EXP 78
57463: PUSH
57464: LD_EXP 78
57468: PPUSH
57469: LD_VAR 0 1
57473: PPUSH
57474: EMPTY
57475: PPUSH
57476: CALL_OW 1
57480: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
57481: LD_ADDR_EXP 79
57485: PUSH
57486: LD_EXP 79
57490: PPUSH
57491: LD_VAR 0 1
57495: PPUSH
57496: EMPTY
57497: PPUSH
57498: CALL_OW 1
57502: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
57503: LD_ADDR_EXP 80
57507: PUSH
57508: LD_EXP 80
57512: PPUSH
57513: LD_VAR 0 1
57517: PPUSH
57518: EMPTY
57519: PPUSH
57520: CALL_OW 1
57524: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
57525: LD_ADDR_EXP 81
57529: PUSH
57530: LD_EXP 81
57534: PPUSH
57535: LD_VAR 0 1
57539: PPUSH
57540: EMPTY
57541: PPUSH
57542: CALL_OW 1
57546: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
57547: LD_ADDR_EXP 82
57551: PUSH
57552: LD_EXP 82
57556: PPUSH
57557: LD_VAR 0 1
57561: PPUSH
57562: EMPTY
57563: PPUSH
57564: CALL_OW 1
57568: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
57569: LD_ADDR_EXP 83
57573: PUSH
57574: LD_EXP 83
57578: PPUSH
57579: LD_VAR 0 1
57583: PPUSH
57584: EMPTY
57585: PPUSH
57586: CALL_OW 1
57590: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
57591: LD_ADDR_EXP 84
57595: PUSH
57596: LD_EXP 84
57600: PPUSH
57601: LD_VAR 0 1
57605: PPUSH
57606: EMPTY
57607: PPUSH
57608: CALL_OW 1
57612: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
57613: LD_ADDR_EXP 85
57617: PUSH
57618: LD_EXP 85
57622: PPUSH
57623: LD_VAR 0 1
57627: PPUSH
57628: EMPTY
57629: PPUSH
57630: CALL_OW 1
57634: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
57635: LD_ADDR_EXP 86
57639: PUSH
57640: LD_EXP 86
57644: PPUSH
57645: LD_VAR 0 1
57649: PPUSH
57650: EMPTY
57651: PPUSH
57652: CALL_OW 1
57656: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
57657: LD_ADDR_EXP 87
57661: PUSH
57662: LD_EXP 87
57666: PPUSH
57667: LD_VAR 0 1
57671: PPUSH
57672: EMPTY
57673: PPUSH
57674: CALL_OW 1
57678: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
57679: LD_ADDR_EXP 88
57683: PUSH
57684: LD_EXP 88
57688: PPUSH
57689: LD_VAR 0 1
57693: PPUSH
57694: EMPTY
57695: PPUSH
57696: CALL_OW 1
57700: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
57701: LD_ADDR_EXP 89
57705: PUSH
57706: LD_EXP 89
57710: PPUSH
57711: LD_VAR 0 1
57715: PPUSH
57716: LD_INT 0
57718: PPUSH
57719: CALL_OW 1
57723: ST_TO_ADDR
// end ;
57724: LD_VAR 0 2
57728: RET
// export function MC_Add ( side , units ) ; var base ; begin
57729: LD_INT 0
57731: PPUSH
57732: PPUSH
// base := mc_bases + 1 ;
57733: LD_ADDR_VAR 0 4
57737: PUSH
57738: LD_EXP 47
57742: PUSH
57743: LD_INT 1
57745: PLUS
57746: ST_TO_ADDR
// mc_sides := Replace ( mc_sides , base , side ) ;
57747: LD_ADDR_EXP 73
57751: PUSH
57752: LD_EXP 73
57756: PPUSH
57757: LD_VAR 0 4
57761: PPUSH
57762: LD_VAR 0 1
57766: PPUSH
57767: CALL_OW 1
57771: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , base , units ) ;
57772: LD_ADDR_EXP 47
57776: PUSH
57777: LD_EXP 47
57781: PPUSH
57782: LD_VAR 0 4
57786: PPUSH
57787: LD_VAR 0 2
57791: PPUSH
57792: CALL_OW 1
57796: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
57797: LD_ADDR_EXP 48
57801: PUSH
57802: LD_EXP 48
57806: PPUSH
57807: LD_VAR 0 4
57811: PPUSH
57812: EMPTY
57813: PPUSH
57814: CALL_OW 1
57818: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
57819: LD_ADDR_EXP 49
57823: PUSH
57824: LD_EXP 49
57828: PPUSH
57829: LD_VAR 0 4
57833: PPUSH
57834: EMPTY
57835: PPUSH
57836: CALL_OW 1
57840: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
57841: LD_ADDR_EXP 50
57845: PUSH
57846: LD_EXP 50
57850: PPUSH
57851: LD_VAR 0 4
57855: PPUSH
57856: EMPTY
57857: PPUSH
57858: CALL_OW 1
57862: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
57863: LD_ADDR_EXP 51
57867: PUSH
57868: LD_EXP 51
57872: PPUSH
57873: LD_VAR 0 4
57877: PPUSH
57878: EMPTY
57879: PPUSH
57880: CALL_OW 1
57884: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
57885: LD_ADDR_EXP 52
57889: PUSH
57890: LD_EXP 52
57894: PPUSH
57895: LD_VAR 0 4
57899: PPUSH
57900: EMPTY
57901: PPUSH
57902: CALL_OW 1
57906: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
57907: LD_ADDR_EXP 53
57911: PUSH
57912: LD_EXP 53
57916: PPUSH
57917: LD_VAR 0 4
57921: PPUSH
57922: EMPTY
57923: PPUSH
57924: CALL_OW 1
57928: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
57929: LD_ADDR_EXP 54
57933: PUSH
57934: LD_EXP 54
57938: PPUSH
57939: LD_VAR 0 4
57943: PPUSH
57944: EMPTY
57945: PPUSH
57946: CALL_OW 1
57950: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
57951: LD_ADDR_EXP 55
57955: PUSH
57956: LD_EXP 55
57960: PPUSH
57961: LD_VAR 0 4
57965: PPUSH
57966: EMPTY
57967: PPUSH
57968: CALL_OW 1
57972: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
57973: LD_ADDR_EXP 56
57977: PUSH
57978: LD_EXP 56
57982: PPUSH
57983: LD_VAR 0 4
57987: PPUSH
57988: EMPTY
57989: PPUSH
57990: CALL_OW 1
57994: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
57995: LD_ADDR_EXP 57
57999: PUSH
58000: LD_EXP 57
58004: PPUSH
58005: LD_VAR 0 4
58009: PPUSH
58010: EMPTY
58011: PPUSH
58012: CALL_OW 1
58016: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
58017: LD_ADDR_EXP 58
58021: PUSH
58022: LD_EXP 58
58026: PPUSH
58027: LD_VAR 0 4
58031: PPUSH
58032: LD_INT 0
58034: PPUSH
58035: CALL_OW 1
58039: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
58040: LD_ADDR_EXP 59
58044: PUSH
58045: LD_EXP 59
58049: PPUSH
58050: LD_VAR 0 4
58054: PPUSH
58055: EMPTY
58056: PPUSH
58057: CALL_OW 1
58061: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
58062: LD_ADDR_EXP 60
58066: PUSH
58067: LD_EXP 60
58071: PPUSH
58072: LD_VAR 0 4
58076: PPUSH
58077: EMPTY
58078: PPUSH
58079: CALL_OW 1
58083: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
58084: LD_ADDR_EXP 61
58088: PUSH
58089: LD_EXP 61
58093: PPUSH
58094: LD_VAR 0 4
58098: PPUSH
58099: EMPTY
58100: PPUSH
58101: CALL_OW 1
58105: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
58106: LD_ADDR_EXP 62
58110: PUSH
58111: LD_EXP 62
58115: PPUSH
58116: LD_VAR 0 4
58120: PPUSH
58121: EMPTY
58122: PPUSH
58123: CALL_OW 1
58127: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
58128: LD_ADDR_EXP 63
58132: PUSH
58133: LD_EXP 63
58137: PPUSH
58138: LD_VAR 0 4
58142: PPUSH
58143: EMPTY
58144: PPUSH
58145: CALL_OW 1
58149: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
58150: LD_ADDR_EXP 64
58154: PUSH
58155: LD_EXP 64
58159: PPUSH
58160: LD_VAR 0 4
58164: PPUSH
58165: EMPTY
58166: PPUSH
58167: CALL_OW 1
58171: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
58172: LD_ADDR_EXP 65
58176: PUSH
58177: LD_EXP 65
58181: PPUSH
58182: LD_VAR 0 4
58186: PPUSH
58187: EMPTY
58188: PPUSH
58189: CALL_OW 1
58193: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
58194: LD_ADDR_EXP 66
58198: PUSH
58199: LD_EXP 66
58203: PPUSH
58204: LD_VAR 0 4
58208: PPUSH
58209: EMPTY
58210: PPUSH
58211: CALL_OW 1
58215: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
58216: LD_ADDR_EXP 67
58220: PUSH
58221: LD_EXP 67
58225: PPUSH
58226: LD_VAR 0 4
58230: PPUSH
58231: EMPTY
58232: PPUSH
58233: CALL_OW 1
58237: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
58238: LD_ADDR_EXP 68
58242: PUSH
58243: LD_EXP 68
58247: PPUSH
58248: LD_VAR 0 4
58252: PPUSH
58253: EMPTY
58254: PPUSH
58255: CALL_OW 1
58259: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
58260: LD_ADDR_EXP 69
58264: PUSH
58265: LD_EXP 69
58269: PPUSH
58270: LD_VAR 0 4
58274: PPUSH
58275: EMPTY
58276: PPUSH
58277: CALL_OW 1
58281: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
58282: LD_ADDR_EXP 70
58286: PUSH
58287: LD_EXP 70
58291: PPUSH
58292: LD_VAR 0 4
58296: PPUSH
58297: EMPTY
58298: PPUSH
58299: CALL_OW 1
58303: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
58304: LD_ADDR_EXP 71
58308: PUSH
58309: LD_EXP 71
58313: PPUSH
58314: LD_VAR 0 4
58318: PPUSH
58319: EMPTY
58320: PPUSH
58321: CALL_OW 1
58325: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
58326: LD_ADDR_EXP 72
58330: PUSH
58331: LD_EXP 72
58335: PPUSH
58336: LD_VAR 0 4
58340: PPUSH
58341: EMPTY
58342: PPUSH
58343: CALL_OW 1
58347: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
58348: LD_ADDR_EXP 74
58352: PUSH
58353: LD_EXP 74
58357: PPUSH
58358: LD_VAR 0 4
58362: PPUSH
58363: EMPTY
58364: PPUSH
58365: CALL_OW 1
58369: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
58370: LD_ADDR_EXP 76
58374: PUSH
58375: LD_EXP 76
58379: PPUSH
58380: LD_VAR 0 4
58384: PPUSH
58385: EMPTY
58386: PPUSH
58387: CALL_OW 1
58391: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
58392: LD_ADDR_EXP 77
58396: PUSH
58397: LD_EXP 77
58401: PPUSH
58402: LD_VAR 0 4
58406: PPUSH
58407: EMPTY
58408: PPUSH
58409: CALL_OW 1
58413: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
58414: LD_ADDR_EXP 78
58418: PUSH
58419: LD_EXP 78
58423: PPUSH
58424: LD_VAR 0 4
58428: PPUSH
58429: EMPTY
58430: PPUSH
58431: CALL_OW 1
58435: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
58436: LD_ADDR_EXP 79
58440: PUSH
58441: LD_EXP 79
58445: PPUSH
58446: LD_VAR 0 4
58450: PPUSH
58451: EMPTY
58452: PPUSH
58453: CALL_OW 1
58457: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
58458: LD_ADDR_EXP 80
58462: PUSH
58463: LD_EXP 80
58467: PPUSH
58468: LD_VAR 0 4
58472: PPUSH
58473: EMPTY
58474: PPUSH
58475: CALL_OW 1
58479: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
58480: LD_ADDR_EXP 81
58484: PUSH
58485: LD_EXP 81
58489: PPUSH
58490: LD_VAR 0 4
58494: PPUSH
58495: EMPTY
58496: PPUSH
58497: CALL_OW 1
58501: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
58502: LD_ADDR_EXP 82
58506: PUSH
58507: LD_EXP 82
58511: PPUSH
58512: LD_VAR 0 4
58516: PPUSH
58517: EMPTY
58518: PPUSH
58519: CALL_OW 1
58523: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
58524: LD_ADDR_EXP 83
58528: PUSH
58529: LD_EXP 83
58533: PPUSH
58534: LD_VAR 0 4
58538: PPUSH
58539: EMPTY
58540: PPUSH
58541: CALL_OW 1
58545: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
58546: LD_ADDR_EXP 84
58550: PUSH
58551: LD_EXP 84
58555: PPUSH
58556: LD_VAR 0 4
58560: PPUSH
58561: EMPTY
58562: PPUSH
58563: CALL_OW 1
58567: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
58568: LD_ADDR_EXP 85
58572: PUSH
58573: LD_EXP 85
58577: PPUSH
58578: LD_VAR 0 4
58582: PPUSH
58583: EMPTY
58584: PPUSH
58585: CALL_OW 1
58589: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
58590: LD_ADDR_EXP 86
58594: PUSH
58595: LD_EXP 86
58599: PPUSH
58600: LD_VAR 0 4
58604: PPUSH
58605: EMPTY
58606: PPUSH
58607: CALL_OW 1
58611: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
58612: LD_ADDR_EXP 87
58616: PUSH
58617: LD_EXP 87
58621: PPUSH
58622: LD_VAR 0 4
58626: PPUSH
58627: EMPTY
58628: PPUSH
58629: CALL_OW 1
58633: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
58634: LD_ADDR_EXP 88
58638: PUSH
58639: LD_EXP 88
58643: PPUSH
58644: LD_VAR 0 4
58648: PPUSH
58649: EMPTY
58650: PPUSH
58651: CALL_OW 1
58655: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
58656: LD_ADDR_EXP 89
58660: PUSH
58661: LD_EXP 89
58665: PPUSH
58666: LD_VAR 0 4
58670: PPUSH
58671: LD_INT 0
58673: PPUSH
58674: CALL_OW 1
58678: ST_TO_ADDR
// result := base ;
58679: LD_ADDR_VAR 0 3
58683: PUSH
58684: LD_VAR 0 4
58688: ST_TO_ADDR
// end ;
58689: LD_VAR 0 3
58693: RET
// export function MC_Start ( ) ; var i ; begin
58694: LD_INT 0
58696: PPUSH
58697: PPUSH
// for i = 1 to mc_bases do
58698: LD_ADDR_VAR 0 2
58702: PUSH
58703: DOUBLE
58704: LD_INT 1
58706: DEC
58707: ST_TO_ADDR
58708: LD_EXP 47
58712: PUSH
58713: FOR_TO
58714: IFFALSE 59791
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff 0 ) ;
58716: LD_ADDR_EXP 47
58720: PUSH
58721: LD_EXP 47
58725: PPUSH
58726: LD_VAR 0 2
58730: PPUSH
58731: LD_EXP 47
58735: PUSH
58736: LD_VAR 0 2
58740: ARRAY
58741: PUSH
58742: LD_INT 0
58744: DIFF
58745: PPUSH
58746: CALL_OW 1
58750: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
58751: LD_ADDR_EXP 48
58755: PUSH
58756: LD_EXP 48
58760: PPUSH
58761: LD_VAR 0 2
58765: PPUSH
58766: EMPTY
58767: PPUSH
58768: CALL_OW 1
58772: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
58773: LD_ADDR_EXP 49
58777: PUSH
58778: LD_EXP 49
58782: PPUSH
58783: LD_VAR 0 2
58787: PPUSH
58788: EMPTY
58789: PPUSH
58790: CALL_OW 1
58794: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
58795: LD_ADDR_EXP 50
58799: PUSH
58800: LD_EXP 50
58804: PPUSH
58805: LD_VAR 0 2
58809: PPUSH
58810: EMPTY
58811: PPUSH
58812: CALL_OW 1
58816: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
58817: LD_ADDR_EXP 51
58821: PUSH
58822: LD_EXP 51
58826: PPUSH
58827: LD_VAR 0 2
58831: PPUSH
58832: EMPTY
58833: PUSH
58834: EMPTY
58835: PUSH
58836: EMPTY
58837: LIST
58838: LIST
58839: PPUSH
58840: CALL_OW 1
58844: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
58845: LD_ADDR_EXP 52
58849: PUSH
58850: LD_EXP 52
58854: PPUSH
58855: LD_VAR 0 2
58859: PPUSH
58860: EMPTY
58861: PPUSH
58862: CALL_OW 1
58866: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
58867: LD_ADDR_EXP 79
58871: PUSH
58872: LD_EXP 79
58876: PPUSH
58877: LD_VAR 0 2
58881: PPUSH
58882: EMPTY
58883: PPUSH
58884: CALL_OW 1
58888: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
58889: LD_ADDR_EXP 53
58893: PUSH
58894: LD_EXP 53
58898: PPUSH
58899: LD_VAR 0 2
58903: PPUSH
58904: EMPTY
58905: PPUSH
58906: CALL_OW 1
58910: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
58911: LD_ADDR_EXP 54
58915: PUSH
58916: LD_EXP 54
58920: PPUSH
58921: LD_VAR 0 2
58925: PPUSH
58926: EMPTY
58927: PPUSH
58928: CALL_OW 1
58932: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ) ;
58933: LD_ADDR_EXP 55
58937: PUSH
58938: LD_EXP 55
58942: PPUSH
58943: LD_VAR 0 2
58947: PPUSH
58948: LD_EXP 47
58952: PUSH
58953: LD_VAR 0 2
58957: ARRAY
58958: PPUSH
58959: LD_INT 2
58961: PUSH
58962: LD_INT 30
58964: PUSH
58965: LD_INT 32
58967: PUSH
58968: EMPTY
58969: LIST
58970: LIST
58971: PUSH
58972: LD_INT 30
58974: PUSH
58975: LD_INT 33
58977: PUSH
58978: EMPTY
58979: LIST
58980: LIST
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: LIST
58986: PPUSH
58987: CALL_OW 72
58991: PPUSH
58992: CALL_OW 1
58996: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
58997: LD_ADDR_EXP 56
59001: PUSH
59002: LD_EXP 56
59006: PPUSH
59007: LD_VAR 0 2
59011: PPUSH
59012: LD_EXP 47
59016: PUSH
59017: LD_VAR 0 2
59021: ARRAY
59022: PPUSH
59023: LD_INT 2
59025: PUSH
59026: LD_INT 30
59028: PUSH
59029: LD_INT 32
59031: PUSH
59032: EMPTY
59033: LIST
59034: LIST
59035: PUSH
59036: LD_INT 30
59038: PUSH
59039: LD_INT 31
59041: PUSH
59042: EMPTY
59043: LIST
59044: LIST
59045: PUSH
59046: EMPTY
59047: LIST
59048: LIST
59049: LIST
59050: PUSH
59051: LD_INT 58
59053: PUSH
59054: EMPTY
59055: LIST
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: PPUSH
59061: CALL_OW 72
59065: PPUSH
59066: CALL_OW 1
59070: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
59071: LD_ADDR_EXP 57
59075: PUSH
59076: LD_EXP 57
59080: PPUSH
59081: LD_VAR 0 2
59085: PPUSH
59086: EMPTY
59087: PPUSH
59088: CALL_OW 1
59092: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
59093: LD_ADDR_EXP 61
59097: PUSH
59098: LD_EXP 61
59102: PPUSH
59103: LD_VAR 0 2
59107: PPUSH
59108: EMPTY
59109: PPUSH
59110: CALL_OW 1
59114: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
59115: LD_ADDR_EXP 60
59119: PUSH
59120: LD_EXP 60
59124: PPUSH
59125: LD_VAR 0 2
59129: PPUSH
59130: EMPTY
59131: PPUSH
59132: CALL_OW 1
59136: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
59137: LD_ADDR_EXP 62
59141: PUSH
59142: LD_EXP 62
59146: PPUSH
59147: LD_VAR 0 2
59151: PPUSH
59152: EMPTY
59153: PPUSH
59154: CALL_OW 1
59158: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
59159: LD_ADDR_EXP 63
59163: PUSH
59164: LD_EXP 63
59168: PPUSH
59169: LD_VAR 0 2
59173: PPUSH
59174: EMPTY
59175: PPUSH
59176: CALL_OW 1
59180: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
59181: LD_ADDR_EXP 64
59185: PUSH
59186: LD_EXP 64
59190: PPUSH
59191: LD_VAR 0 2
59195: PPUSH
59196: EMPTY
59197: PPUSH
59198: CALL_OW 1
59202: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
59203: LD_ADDR_EXP 65
59207: PUSH
59208: LD_EXP 65
59212: PPUSH
59213: LD_VAR 0 2
59217: PPUSH
59218: EMPTY
59219: PPUSH
59220: CALL_OW 1
59224: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
59225: LD_ADDR_EXP 66
59229: PUSH
59230: LD_EXP 66
59234: PPUSH
59235: LD_VAR 0 2
59239: PPUSH
59240: EMPTY
59241: PPUSH
59242: CALL_OW 1
59246: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
59247: LD_ADDR_EXP 67
59251: PUSH
59252: LD_EXP 67
59256: PPUSH
59257: LD_VAR 0 2
59261: PPUSH
59262: EMPTY
59263: PPUSH
59264: CALL_OW 1
59268: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
59269: LD_ADDR_EXP 68
59273: PUSH
59274: LD_EXP 68
59278: PPUSH
59279: LD_VAR 0 2
59283: PPUSH
59284: EMPTY
59285: PPUSH
59286: CALL_OW 1
59290: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
59291: LD_ADDR_EXP 69
59295: PUSH
59296: LD_EXP 69
59300: PPUSH
59301: LD_VAR 0 2
59305: PPUSH
59306: EMPTY
59307: PPUSH
59308: CALL_OW 1
59312: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
59313: LD_ADDR_EXP 58
59317: PUSH
59318: LD_EXP 58
59322: PPUSH
59323: LD_VAR 0 2
59327: PPUSH
59328: LD_INT 0
59330: PPUSH
59331: CALL_OW 1
59335: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
59336: LD_ADDR_EXP 71
59340: PUSH
59341: LD_EXP 71
59345: PPUSH
59346: LD_VAR 0 2
59350: PPUSH
59351: LD_INT 0
59353: PPUSH
59354: CALL_OW 1
59358: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
59359: LD_ADDR_EXP 59
59363: PUSH
59364: LD_EXP 59
59368: PPUSH
59369: LD_VAR 0 2
59373: PPUSH
59374: EMPTY
59375: PPUSH
59376: CALL_OW 1
59380: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
59381: LD_ADDR_EXP 70
59385: PUSH
59386: LD_EXP 70
59390: PPUSH
59391: LD_VAR 0 2
59395: PPUSH
59396: LD_INT 0
59398: PPUSH
59399: CALL_OW 1
59403: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
59404: LD_ADDR_EXP 72
59408: PUSH
59409: LD_EXP 72
59413: PPUSH
59414: LD_VAR 0 2
59418: PPUSH
59419: EMPTY
59420: PPUSH
59421: CALL_OW 1
59425: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
59426: LD_ADDR_EXP 75
59430: PUSH
59431: LD_EXP 75
59435: PPUSH
59436: LD_VAR 0 2
59440: PPUSH
59441: LD_INT 0
59443: PPUSH
59444: CALL_OW 1
59448: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
59449: LD_ADDR_EXP 76
59453: PUSH
59454: LD_EXP 76
59458: PPUSH
59459: LD_VAR 0 2
59463: PPUSH
59464: EMPTY
59465: PPUSH
59466: CALL_OW 1
59470: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
59471: LD_ADDR_EXP 77
59475: PUSH
59476: LD_EXP 77
59480: PPUSH
59481: LD_VAR 0 2
59485: PPUSH
59486: EMPTY
59487: PPUSH
59488: CALL_OW 1
59492: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
59493: LD_ADDR_EXP 78
59497: PUSH
59498: LD_EXP 78
59502: PPUSH
59503: LD_VAR 0 2
59507: PPUSH
59508: EMPTY
59509: PPUSH
59510: CALL_OW 1
59514: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
59515: LD_ADDR_EXP 80
59519: PUSH
59520: LD_EXP 80
59524: PPUSH
59525: LD_VAR 0 2
59529: PPUSH
59530: LD_EXP 47
59534: PUSH
59535: LD_VAR 0 2
59539: ARRAY
59540: PPUSH
59541: LD_INT 2
59543: PUSH
59544: LD_INT 30
59546: PUSH
59547: LD_INT 6
59549: PUSH
59550: EMPTY
59551: LIST
59552: LIST
59553: PUSH
59554: LD_INT 30
59556: PUSH
59557: LD_INT 7
59559: PUSH
59560: EMPTY
59561: LIST
59562: LIST
59563: PUSH
59564: LD_INT 30
59566: PUSH
59567: LD_INT 8
59569: PUSH
59570: EMPTY
59571: LIST
59572: LIST
59573: PUSH
59574: EMPTY
59575: LIST
59576: LIST
59577: LIST
59578: LIST
59579: PPUSH
59580: CALL_OW 72
59584: PPUSH
59585: CALL_OW 1
59589: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
59590: LD_ADDR_EXP 81
59594: PUSH
59595: LD_EXP 81
59599: PPUSH
59600: LD_VAR 0 2
59604: PPUSH
59605: EMPTY
59606: PPUSH
59607: CALL_OW 1
59611: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
59612: LD_ADDR_EXP 82
59616: PUSH
59617: LD_EXP 82
59621: PPUSH
59622: LD_VAR 0 2
59626: PPUSH
59627: EMPTY
59628: PPUSH
59629: CALL_OW 1
59633: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , i , [ ] ) ;
59634: LD_ADDR_EXP 83
59638: PUSH
59639: LD_EXP 83
59643: PPUSH
59644: LD_VAR 0 2
59648: PPUSH
59649: EMPTY
59650: PPUSH
59651: CALL_OW 1
59655: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
59656: LD_ADDR_EXP 84
59660: PUSH
59661: LD_EXP 84
59665: PPUSH
59666: LD_VAR 0 2
59670: PPUSH
59671: EMPTY
59672: PPUSH
59673: CALL_OW 1
59677: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
59678: LD_ADDR_EXP 85
59682: PUSH
59683: LD_EXP 85
59687: PPUSH
59688: LD_VAR 0 2
59692: PPUSH
59693: EMPTY
59694: PPUSH
59695: CALL_OW 1
59699: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
59700: LD_ADDR_EXP 86
59704: PUSH
59705: LD_EXP 86
59709: PPUSH
59710: LD_VAR 0 2
59714: PPUSH
59715: EMPTY
59716: PPUSH
59717: CALL_OW 1
59721: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
59722: LD_ADDR_EXP 87
59726: PUSH
59727: LD_EXP 87
59731: PPUSH
59732: LD_VAR 0 2
59736: PPUSH
59737: EMPTY
59738: PPUSH
59739: CALL_OW 1
59743: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , [ ] ) ;
59744: LD_ADDR_EXP 88
59748: PUSH
59749: LD_EXP 88
59753: PPUSH
59754: LD_VAR 0 2
59758: PPUSH
59759: EMPTY
59760: PPUSH
59761: CALL_OW 1
59765: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , i , 0 ) ;
59766: LD_ADDR_EXP 89
59770: PUSH
59771: LD_EXP 89
59775: PPUSH
59776: LD_VAR 0 2
59780: PPUSH
59781: LD_INT 0
59783: PPUSH
59784: CALL_OW 1
59788: ST_TO_ADDR
// end ;
59789: GO 58713
59791: POP
59792: POP
// MC_InitSides ( ) ;
59793: CALL 60079 0 0
// MC_InitResearch ( ) ;
59797: CALL 59818 0 0
// CustomInitMacro ( ) ;
59801: CALL 1400 0 0
// skirmish := true ;
59805: LD_ADDR_EXP 45
59809: PUSH
59810: LD_INT 1
59812: ST_TO_ADDR
// end ;
59813: LD_VAR 0 1
59817: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
59818: LD_INT 0
59820: PPUSH
59821: PPUSH
59822: PPUSH
59823: PPUSH
59824: PPUSH
59825: PPUSH
// if not mc_bases then
59826: LD_EXP 47
59830: NOT
59831: IFFALSE 59835
// exit ;
59833: GO 60074
// for i = 1 to 8 do
59835: LD_ADDR_VAR 0 2
59839: PUSH
59840: DOUBLE
59841: LD_INT 1
59843: DEC
59844: ST_TO_ADDR
59845: LD_INT 8
59847: PUSH
59848: FOR_TO
59849: IFFALSE 59875
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
59851: LD_ADDR_EXP 74
59855: PUSH
59856: LD_EXP 74
59860: PPUSH
59861: LD_VAR 0 2
59865: PPUSH
59866: EMPTY
59867: PPUSH
59868: CALL_OW 1
59872: ST_TO_ADDR
59873: GO 59848
59875: POP
59876: POP
// tmp := [ ] ;
59877: LD_ADDR_VAR 0 5
59881: PUSH
59882: EMPTY
59883: ST_TO_ADDR
// for i = 1 to mc_sides do
59884: LD_ADDR_VAR 0 2
59888: PUSH
59889: DOUBLE
59890: LD_INT 1
59892: DEC
59893: ST_TO_ADDR
59894: LD_EXP 73
59898: PUSH
59899: FOR_TO
59900: IFFALSE 59958
// if not mc_sides [ i ] in tmp then
59902: LD_EXP 73
59906: PUSH
59907: LD_VAR 0 2
59911: ARRAY
59912: PUSH
59913: LD_VAR 0 5
59917: IN
59918: NOT
59919: IFFALSE 59956
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
59921: LD_ADDR_VAR 0 5
59925: PUSH
59926: LD_VAR 0 5
59930: PPUSH
59931: LD_VAR 0 5
59935: PUSH
59936: LD_INT 1
59938: PLUS
59939: PPUSH
59940: LD_EXP 73
59944: PUSH
59945: LD_VAR 0 2
59949: ARRAY
59950: PPUSH
59951: CALL_OW 2
59955: ST_TO_ADDR
59956: GO 59899
59958: POP
59959: POP
// if not tmp then
59960: LD_VAR 0 5
59964: NOT
59965: IFFALSE 59969
// exit ;
59967: GO 60074
// for j in tmp do
59969: LD_ADDR_VAR 0 3
59973: PUSH
59974: LD_VAR 0 5
59978: PUSH
59979: FOR_IN
59980: IFFALSE 60072
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
59982: LD_ADDR_VAR 0 6
59986: PUSH
59987: LD_INT 22
59989: PUSH
59990: LD_VAR 0 3
59994: PUSH
59995: EMPTY
59996: LIST
59997: LIST
59998: PPUSH
59999: CALL_OW 69
60003: ST_TO_ADDR
// if not un then
60004: LD_VAR 0 6
60008: NOT
60009: IFFALSE 60013
// continue ;
60011: GO 59979
// nation := GetNation ( un [ 1 ] ) ;
60013: LD_ADDR_VAR 0 4
60017: PUSH
60018: LD_VAR 0 6
60022: PUSH
60023: LD_INT 1
60025: ARRAY
60026: PPUSH
60027: CALL_OW 248
60031: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
60032: LD_ADDR_EXP 74
60036: PUSH
60037: LD_EXP 74
60041: PPUSH
60042: LD_VAR 0 3
60046: PPUSH
60047: LD_VAR 0 3
60051: PPUSH
60052: LD_VAR 0 4
60056: PPUSH
60057: LD_INT 1
60059: PPUSH
60060: CALL 19432 0 3
60064: PPUSH
60065: CALL_OW 1
60069: ST_TO_ADDR
// end ;
60070: GO 59979
60072: POP
60073: POP
// end ;
60074: LD_VAR 0 1
60078: RET
// export function MC_InitSides ( ) ; var i ; begin
60079: LD_INT 0
60081: PPUSH
60082: PPUSH
// if not mc_bases then
60083: LD_EXP 47
60087: NOT
60088: IFFALSE 60092
// exit ;
60090: GO 60166
// for i = 1 to mc_bases do
60092: LD_ADDR_VAR 0 2
60096: PUSH
60097: DOUBLE
60098: LD_INT 1
60100: DEC
60101: ST_TO_ADDR
60102: LD_EXP 47
60106: PUSH
60107: FOR_TO
60108: IFFALSE 60164
// if mc_bases [ i ] then
60110: LD_EXP 47
60114: PUSH
60115: LD_VAR 0 2
60119: ARRAY
60120: IFFALSE 60162
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
60122: LD_ADDR_EXP 73
60126: PUSH
60127: LD_EXP 73
60131: PPUSH
60132: LD_VAR 0 2
60136: PPUSH
60137: LD_EXP 47
60141: PUSH
60142: LD_VAR 0 2
60146: ARRAY
60147: PUSH
60148: LD_INT 1
60150: ARRAY
60151: PPUSH
60152: CALL_OW 255
60156: PPUSH
60157: CALL_OW 1
60161: ST_TO_ADDR
60162: GO 60107
60164: POP
60165: POP
// end ;
60166: LD_VAR 0 1
60170: RET
// every 0 0$01 trigger skirmish do
60171: LD_EXP 45
60175: IFFALSE 60329
60177: GO 60179
60179: DISABLE
// begin enable ;
60180: ENABLE
// MC_CheckBuildings ( ) ;
60181: CALL 64827 0 0
// MC_CheckPeopleLife ( ) ;
60185: CALL 64952 0 0
// RaiseSailEvent ( 100 ) ;
60189: LD_INT 100
60191: PPUSH
60192: CALL_OW 427
// RaiseSailEvent ( 103 ) ;
60196: LD_INT 103
60198: PPUSH
60199: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
60203: LD_INT 104
60205: PPUSH
60206: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
60210: LD_INT 105
60212: PPUSH
60213: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
60217: LD_INT 106
60219: PPUSH
60220: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
60224: LD_INT 107
60226: PPUSH
60227: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
60231: LD_INT 108
60233: PPUSH
60234: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
60238: LD_INT 109
60240: PPUSH
60241: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
60245: LD_INT 110
60247: PPUSH
60248: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
60252: LD_INT 111
60254: PPUSH
60255: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
60259: LD_INT 112
60261: PPUSH
60262: CALL_OW 427
// RaiseSailEvent ( 113 ) ;
60266: LD_INT 113
60268: PPUSH
60269: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
60273: LD_INT 120
60275: PPUSH
60276: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
60280: LD_INT 121
60282: PPUSH
60283: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
60287: LD_INT 122
60289: PPUSH
60290: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
60294: LD_INT 123
60296: PPUSH
60297: CALL_OW 427
// RaiseSailEvent ( 124 ) ;
60301: LD_INT 124
60303: PPUSH
60304: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
60308: LD_INT 125
60310: PPUSH
60311: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
60315: LD_INT 126
60317: PPUSH
60318: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
60322: LD_INT 200
60324: PPUSH
60325: CALL_OW 427
// end ;
60329: END
// on SailEvent ( event ) do begin if event < 100 then
60330: LD_VAR 0 1
60334: PUSH
60335: LD_INT 100
60337: LESS
60338: IFFALSE 60349
// CustomEvent ( event ) ;
60340: LD_VAR 0 1
60344: PPUSH
60345: CALL 18610 0 1
// if event = 100 then
60349: LD_VAR 0 1
60353: PUSH
60354: LD_INT 100
60356: EQUAL
60357: IFFALSE 60363
// MC_ClassManager ( ) ;
60359: CALL 60755 0 0
// if event = 101 then
60363: LD_VAR 0 1
60367: PUSH
60368: LD_INT 101
60370: EQUAL
60371: IFFALSE 60377
// MC_RepairBuildings ( ) ;
60373: CALL 65537 0 0
// if event = 102 then
60377: LD_VAR 0 1
60381: PUSH
60382: LD_INT 102
60384: EQUAL
60385: IFFALSE 60391
// MC_Heal ( ) ;
60387: CALL 66422 0 0
// if event = 103 then
60391: LD_VAR 0 1
60395: PUSH
60396: LD_INT 103
60398: EQUAL
60399: IFFALSE 60405
// MC_Build ( ) ;
60401: CALL 66844 0 0
// if event = 104 then
60405: LD_VAR 0 1
60409: PUSH
60410: LD_INT 104
60412: EQUAL
60413: IFFALSE 60419
// MC_TurretWeapon ( ) ;
60415: CALL 68457 0 0
// if event = 105 then
60419: LD_VAR 0 1
60423: PUSH
60424: LD_INT 105
60426: EQUAL
60427: IFFALSE 60433
// MC_BuildUpgrade ( ) ;
60429: CALL 68008 0 0
// if event = 106 then
60433: LD_VAR 0 1
60437: PUSH
60438: LD_INT 106
60440: EQUAL
60441: IFFALSE 60447
// MC_PlantMines ( ) ;
60443: CALL 68887 0 0
// if event = 107 then
60447: LD_VAR 0 1
60451: PUSH
60452: LD_INT 107
60454: EQUAL
60455: IFFALSE 60461
// MC_CollectCrates ( ) ;
60457: CALL 69685 0 0
// if event = 108 then
60461: LD_VAR 0 1
60465: PUSH
60466: LD_INT 108
60468: EQUAL
60469: IFFALSE 60475
// MC_LinkRemoteControl ( ) ;
60471: CALL 71461 0 0
// if event = 109 then
60475: LD_VAR 0 1
60479: PUSH
60480: LD_INT 109
60482: EQUAL
60483: IFFALSE 60489
// MC_ProduceVehicle ( ) ;
60485: CALL 71642 0 0
// if event = 110 then
60489: LD_VAR 0 1
60493: PUSH
60494: LD_INT 110
60496: EQUAL
60497: IFFALSE 60503
// MC_SendAttack ( ) ;
60499: CALL 72108 0 0
// if event = 111 then
60503: LD_VAR 0 1
60507: PUSH
60508: LD_INT 111
60510: EQUAL
60511: IFFALSE 60517
// MC_Defend ( ) ;
60513: CALL 72216 0 0
// if event = 112 then
60517: LD_VAR 0 1
60521: PUSH
60522: LD_INT 112
60524: EQUAL
60525: IFFALSE 60531
// MC_Research ( ) ;
60527: CALL 72843 0 0
// if event = 113 then
60531: LD_VAR 0 1
60535: PUSH
60536: LD_INT 113
60538: EQUAL
60539: IFFALSE 60545
// MC_MinesTrigger ( ) ;
60541: CALL 73957 0 0
// if event = 120 then
60545: LD_VAR 0 1
60549: PUSH
60550: LD_INT 120
60552: EQUAL
60553: IFFALSE 60559
// MC_RepairVehicle ( ) ;
60555: CALL 74056 0 0
// if event = 121 then
60559: LD_VAR 0 1
60563: PUSH
60564: LD_INT 121
60566: EQUAL
60567: IFFALSE 60573
// MC_TameApe ( ) ;
60569: CALL 74786 0 0
// if event = 122 then
60573: LD_VAR 0 1
60577: PUSH
60578: LD_INT 122
60580: EQUAL
60581: IFFALSE 60587
// MC_ChangeApeClass ( ) ;
60583: CALL 75615 0 0
// if event = 123 then
60587: LD_VAR 0 1
60591: PUSH
60592: LD_INT 123
60594: EQUAL
60595: IFFALSE 60601
// MC_Bazooka ( ) ;
60597: CALL 76265 0 0
// if event = 124 then
60601: LD_VAR 0 1
60605: PUSH
60606: LD_INT 124
60608: EQUAL
60609: IFFALSE 60615
// MC_TeleportExit ( ) ;
60611: CALL 76463 0 0
// if event = 125 then
60615: LD_VAR 0 1
60619: PUSH
60620: LD_INT 125
60622: EQUAL
60623: IFFALSE 60629
// MC_Deposits ( ) ;
60625: CALL 77110 0 0
// if event = 126 then
60629: LD_VAR 0 1
60633: PUSH
60634: LD_INT 126
60636: EQUAL
60637: IFFALSE 60643
// MC_RemoteDriver ( ) ;
60639: CALL 77735 0 0
// if event = 200 then
60643: LD_VAR 0 1
60647: PUSH
60648: LD_INT 200
60650: EQUAL
60651: IFFALSE 60657
// MC_Idle ( ) ;
60653: CALL 79684 0 0
// end ;
60657: PPOPN 1
60659: END
// export function MC_Reset ( base , tag ) ; var i ; begin
60660: LD_INT 0
60662: PPUSH
60663: PPUSH
// if not mc_bases [ base ] or not tag then
60664: LD_EXP 47
60668: PUSH
60669: LD_VAR 0 1
60673: ARRAY
60674: NOT
60675: PUSH
60676: LD_VAR 0 2
60680: NOT
60681: OR
60682: IFFALSE 60686
// exit ;
60684: GO 60750
// for i in mc_bases [ base ] union mc_ape [ base ] do
60686: LD_ADDR_VAR 0 4
60690: PUSH
60691: LD_EXP 47
60695: PUSH
60696: LD_VAR 0 1
60700: ARRAY
60701: PUSH
60702: LD_EXP 76
60706: PUSH
60707: LD_VAR 0 1
60711: ARRAY
60712: UNION
60713: PUSH
60714: FOR_IN
60715: IFFALSE 60748
// if GetTag ( i ) = tag then
60717: LD_VAR 0 4
60721: PPUSH
60722: CALL_OW 110
60726: PUSH
60727: LD_VAR 0 2
60731: EQUAL
60732: IFFALSE 60746
// SetTag ( i , 0 ) ;
60734: LD_VAR 0 4
60738: PPUSH
60739: LD_INT 0
60741: PPUSH
60742: CALL_OW 109
60746: GO 60714
60748: POP
60749: POP
// end ;
60750: LD_VAR 0 3
60754: RET
// export function MC_ClassManager ( ) ; var i , j , tmp , p , b , e , k ; begin
60755: LD_INT 0
60757: PPUSH
60758: PPUSH
60759: PPUSH
60760: PPUSH
60761: PPUSH
60762: PPUSH
60763: PPUSH
60764: PPUSH
// if not mc_bases then
60765: LD_EXP 47
60769: NOT
60770: IFFALSE 60774
// exit ;
60772: GO 61232
// for i = 1 to mc_bases do
60774: LD_ADDR_VAR 0 2
60778: PUSH
60779: DOUBLE
60780: LD_INT 1
60782: DEC
60783: ST_TO_ADDR
60784: LD_EXP 47
60788: PUSH
60789: FOR_TO
60790: IFFALSE 61230
// begin tmp := MC_ClassCheckReq ( i ) ;
60792: LD_ADDR_VAR 0 4
60796: PUSH
60797: LD_VAR 0 2
60801: PPUSH
60802: CALL 61237 0 1
60806: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , tmp ) ;
60807: LD_ADDR_EXP 88
60811: PUSH
60812: LD_EXP 88
60816: PPUSH
60817: LD_VAR 0 2
60821: PPUSH
60822: LD_VAR 0 4
60826: PPUSH
60827: CALL_OW 1
60831: ST_TO_ADDR
// if not tmp then
60832: LD_VAR 0 4
60836: NOT
60837: IFFALSE 60841
// continue ;
60839: GO 60789
// b := [ UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ] ;
60841: LD_ADDR_VAR 0 6
60845: PUSH
60846: LD_EXP 47
60850: PUSH
60851: LD_VAR 0 2
60855: ARRAY
60856: PPUSH
60857: LD_INT 2
60859: PUSH
60860: LD_INT 30
60862: PUSH
60863: LD_INT 4
60865: PUSH
60866: EMPTY
60867: LIST
60868: LIST
60869: PUSH
60870: LD_INT 30
60872: PUSH
60873: LD_INT 5
60875: PUSH
60876: EMPTY
60877: LIST
60878: LIST
60879: PUSH
60880: EMPTY
60881: LIST
60882: LIST
60883: LIST
60884: PPUSH
60885: CALL_OW 72
60889: PUSH
60890: LD_EXP 47
60894: PUSH
60895: LD_VAR 0 2
60899: ARRAY
60900: PPUSH
60901: LD_INT 2
60903: PUSH
60904: LD_INT 30
60906: PUSH
60907: LD_INT 0
60909: PUSH
60910: EMPTY
60911: LIST
60912: LIST
60913: PUSH
60914: LD_INT 30
60916: PUSH
60917: LD_INT 1
60919: PUSH
60920: EMPTY
60921: LIST
60922: LIST
60923: PUSH
60924: EMPTY
60925: LIST
60926: LIST
60927: LIST
60928: PPUSH
60929: CALL_OW 72
60933: PUSH
60934: LD_EXP 47
60938: PUSH
60939: LD_VAR 0 2
60943: ARRAY
60944: PPUSH
60945: LD_INT 30
60947: PUSH
60948: LD_INT 3
60950: PUSH
60951: EMPTY
60952: LIST
60953: LIST
60954: PPUSH
60955: CALL_OW 72
60959: PUSH
60960: LD_EXP 47
60964: PUSH
60965: LD_VAR 0 2
60969: ARRAY
60970: PPUSH
60971: LD_INT 2
60973: PUSH
60974: LD_INT 30
60976: PUSH
60977: LD_INT 6
60979: PUSH
60980: EMPTY
60981: LIST
60982: LIST
60983: PUSH
60984: LD_INT 30
60986: PUSH
60987: LD_INT 7
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: PUSH
60994: LD_INT 30
60996: PUSH
60997: LD_INT 8
60999: PUSH
61000: EMPTY
61001: LIST
61002: LIST
61003: PUSH
61004: EMPTY
61005: LIST
61006: LIST
61007: LIST
61008: LIST
61009: PPUSH
61010: CALL_OW 72
61014: PUSH
61015: EMPTY
61016: LIST
61017: LIST
61018: LIST
61019: LIST
61020: ST_TO_ADDR
// for j = 1 to 4 do
61021: LD_ADDR_VAR 0 3
61025: PUSH
61026: DOUBLE
61027: LD_INT 1
61029: DEC
61030: ST_TO_ADDR
61031: LD_INT 4
61033: PUSH
61034: FOR_TO
61035: IFFALSE 61226
// begin if not tmp [ j ] then
61037: LD_VAR 0 4
61041: PUSH
61042: LD_VAR 0 3
61046: ARRAY
61047: NOT
61048: IFFALSE 61052
// continue ;
61050: GO 61034
// for p in tmp [ j ] do
61052: LD_ADDR_VAR 0 5
61056: PUSH
61057: LD_VAR 0 4
61061: PUSH
61062: LD_VAR 0 3
61066: ARRAY
61067: PUSH
61068: FOR_IN
61069: IFFALSE 61222
// begin if not b [ j ] then
61071: LD_VAR 0 6
61075: PUSH
61076: LD_VAR 0 3
61080: ARRAY
61081: NOT
61082: IFFALSE 61086
// break ;
61084: GO 61222
// e := 0 ;
61086: LD_ADDR_VAR 0 7
61090: PUSH
61091: LD_INT 0
61093: ST_TO_ADDR
// for k in b [ j ] do
61094: LD_ADDR_VAR 0 8
61098: PUSH
61099: LD_VAR 0 6
61103: PUSH
61104: LD_VAR 0 3
61108: ARRAY
61109: PUSH
61110: FOR_IN
61111: IFFALSE 61138
// if IsNotFull ( k ) then
61113: LD_VAR 0 8
61117: PPUSH
61118: CALL 21581 0 1
61122: IFFALSE 61136
// begin e := k ;
61124: LD_ADDR_VAR 0 7
61128: PUSH
61129: LD_VAR 0 8
61133: ST_TO_ADDR
// break ;
61134: GO 61138
// end ;
61136: GO 61110
61138: POP
61139: POP
// if e and not UnitGoingToBuilding ( p , e ) then
61140: LD_VAR 0 7
61144: PUSH
61145: LD_VAR 0 5
61149: PPUSH
61150: LD_VAR 0 7
61154: PPUSH
61155: CALL 54001 0 2
61159: NOT
61160: AND
61161: IFFALSE 61220
// begin if IsInUnit ( p ) then
61163: LD_VAR 0 5
61167: PPUSH
61168: CALL_OW 310
61172: IFFALSE 61183
// ComExitBuilding ( p ) ;
61174: LD_VAR 0 5
61178: PPUSH
61179: CALL_OW 122
// ComEnterUnit ( p , e ) ;
61183: LD_VAR 0 5
61187: PPUSH
61188: LD_VAR 0 7
61192: PPUSH
61193: CALL_OW 120
// AddComChangeProfession ( p , j ) ;
61197: LD_VAR 0 5
61201: PPUSH
61202: LD_VAR 0 3
61206: PPUSH
61207: CALL_OW 183
// AddComExitBuilding ( p ) ;
61211: LD_VAR 0 5
61215: PPUSH
61216: CALL_OW 182
// end ; end ;
61220: GO 61068
61222: POP
61223: POP
// end ;
61224: GO 61034
61226: POP
61227: POP
// end ;
61228: GO 60789
61230: POP
61231: POP
// end ;
61232: LD_VAR 0 1
61236: RET
// export function MC_ClassCheckReq ( base ) ; var i , tmp , sol , eng , mech , sci , sort , j , p , b , bcount ; begin
61237: LD_INT 0
61239: PPUSH
61240: PPUSH
61241: PPUSH
61242: PPUSH
61243: PPUSH
61244: PPUSH
61245: PPUSH
61246: PPUSH
61247: PPUSH
61248: PPUSH
61249: PPUSH
61250: PPUSH
// if not base or not mc_bases [ base ] or not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
61251: LD_VAR 0 1
61255: NOT
61256: PUSH
61257: LD_EXP 47
61261: PUSH
61262: LD_VAR 0 1
61266: ARRAY
61267: NOT
61268: OR
61269: PUSH
61270: LD_EXP 47
61274: PUSH
61275: LD_VAR 0 1
61279: ARRAY
61280: PPUSH
61281: LD_INT 2
61283: PUSH
61284: LD_INT 30
61286: PUSH
61287: LD_INT 0
61289: PUSH
61290: EMPTY
61291: LIST
61292: LIST
61293: PUSH
61294: LD_INT 30
61296: PUSH
61297: LD_INT 1
61299: PUSH
61300: EMPTY
61301: LIST
61302: LIST
61303: PUSH
61304: EMPTY
61305: LIST
61306: LIST
61307: LIST
61308: PPUSH
61309: CALL_OW 72
61313: NOT
61314: OR
61315: IFFALSE 61319
// exit ;
61317: GO 64822
// tmp := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
61319: LD_ADDR_VAR 0 4
61323: PUSH
61324: LD_EXP 47
61328: PUSH
61329: LD_VAR 0 1
61333: ARRAY
61334: PPUSH
61335: LD_INT 2
61337: PUSH
61338: LD_INT 25
61340: PUSH
61341: LD_INT 1
61343: PUSH
61344: EMPTY
61345: LIST
61346: LIST
61347: PUSH
61348: LD_INT 25
61350: PUSH
61351: LD_INT 2
61353: PUSH
61354: EMPTY
61355: LIST
61356: LIST
61357: PUSH
61358: LD_INT 25
61360: PUSH
61361: LD_INT 3
61363: PUSH
61364: EMPTY
61365: LIST
61366: LIST
61367: PUSH
61368: LD_INT 25
61370: PUSH
61371: LD_INT 4
61373: PUSH
61374: EMPTY
61375: LIST
61376: LIST
61377: PUSH
61378: LD_INT 25
61380: PUSH
61381: LD_INT 5
61383: PUSH
61384: EMPTY
61385: LIST
61386: LIST
61387: PUSH
61388: LD_INT 25
61390: PUSH
61391: LD_INT 8
61393: PUSH
61394: EMPTY
61395: LIST
61396: LIST
61397: PUSH
61398: LD_INT 25
61400: PUSH
61401: LD_INT 9
61403: PUSH
61404: EMPTY
61405: LIST
61406: LIST
61407: PUSH
61408: EMPTY
61409: LIST
61410: LIST
61411: LIST
61412: LIST
61413: LIST
61414: LIST
61415: LIST
61416: LIST
61417: PPUSH
61418: CALL_OW 72
61422: ST_TO_ADDR
// if not tmp then
61423: LD_VAR 0 4
61427: NOT
61428: IFFALSE 61432
// exit ;
61430: GO 64822
// for i in tmp do
61432: LD_ADDR_VAR 0 3
61436: PUSH
61437: LD_VAR 0 4
61441: PUSH
61442: FOR_IN
61443: IFFALSE 61474
// if GetTag ( i ) then
61445: LD_VAR 0 3
61449: PPUSH
61450: CALL_OW 110
61454: IFFALSE 61472
// tmp := tmp diff i ;
61456: LD_ADDR_VAR 0 4
61460: PUSH
61461: LD_VAR 0 4
61465: PUSH
61466: LD_VAR 0 3
61470: DIFF
61471: ST_TO_ADDR
61472: GO 61442
61474: POP
61475: POP
// if not tmp then
61476: LD_VAR 0 4
61480: NOT
61481: IFFALSE 61485
// exit ;
61483: GO 64822
// sol := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
61485: LD_ADDR_VAR 0 5
61489: PUSH
61490: LD_EXP 47
61494: PUSH
61495: LD_VAR 0 1
61499: ARRAY
61500: PPUSH
61501: LD_INT 2
61503: PUSH
61504: LD_INT 25
61506: PUSH
61507: LD_INT 1
61509: PUSH
61510: EMPTY
61511: LIST
61512: LIST
61513: PUSH
61514: LD_INT 25
61516: PUSH
61517: LD_INT 5
61519: PUSH
61520: EMPTY
61521: LIST
61522: LIST
61523: PUSH
61524: LD_INT 25
61526: PUSH
61527: LD_INT 8
61529: PUSH
61530: EMPTY
61531: LIST
61532: LIST
61533: PUSH
61534: LD_INT 25
61536: PUSH
61537: LD_INT 9
61539: PUSH
61540: EMPTY
61541: LIST
61542: LIST
61543: PUSH
61544: EMPTY
61545: LIST
61546: LIST
61547: LIST
61548: LIST
61549: LIST
61550: PPUSH
61551: CALL_OW 72
61555: ST_TO_ADDR
// eng := UnitFilter ( mc_bases [ base ] , [ f_class , 2 ] ) ;
61556: LD_ADDR_VAR 0 6
61560: PUSH
61561: LD_EXP 47
61565: PUSH
61566: LD_VAR 0 1
61570: ARRAY
61571: PPUSH
61572: LD_INT 25
61574: PUSH
61575: LD_INT 2
61577: PUSH
61578: EMPTY
61579: LIST
61580: LIST
61581: PPUSH
61582: CALL_OW 72
61586: ST_TO_ADDR
// mech := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
61587: LD_ADDR_VAR 0 7
61591: PUSH
61592: LD_EXP 47
61596: PUSH
61597: LD_VAR 0 1
61601: ARRAY
61602: PPUSH
61603: LD_INT 25
61605: PUSH
61606: LD_INT 3
61608: PUSH
61609: EMPTY
61610: LIST
61611: LIST
61612: PPUSH
61613: CALL_OW 72
61617: ST_TO_ADDR
// sci := UnitFilter ( mc_bases [ base ] , [ [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
61618: LD_ADDR_VAR 0 8
61622: PUSH
61623: LD_EXP 47
61627: PUSH
61628: LD_VAR 0 1
61632: ARRAY
61633: PPUSH
61634: LD_INT 25
61636: PUSH
61637: LD_INT 4
61639: PUSH
61640: EMPTY
61641: LIST
61642: LIST
61643: PUSH
61644: LD_INT 24
61646: PUSH
61647: LD_INT 251
61649: PUSH
61650: EMPTY
61651: LIST
61652: LIST
61653: PUSH
61654: EMPTY
61655: LIST
61656: LIST
61657: PPUSH
61658: CALL_OW 72
61662: ST_TO_ADDR
// if mc_scan [ base ] then
61663: LD_EXP 70
61667: PUSH
61668: LD_VAR 0 1
61672: ARRAY
61673: IFFALSE 62134
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 4 ) ;
61675: LD_ADDR_EXP 89
61679: PUSH
61680: LD_EXP 89
61684: PPUSH
61685: LD_VAR 0 1
61689: PPUSH
61690: LD_INT 4
61692: PPUSH
61693: CALL_OW 1
61697: ST_TO_ADDR
// b := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
61698: LD_ADDR_VAR 0 12
61702: PUSH
61703: LD_EXP 47
61707: PUSH
61708: LD_VAR 0 1
61712: ARRAY
61713: PPUSH
61714: LD_INT 2
61716: PUSH
61717: LD_INT 30
61719: PUSH
61720: LD_INT 4
61722: PUSH
61723: EMPTY
61724: LIST
61725: LIST
61726: PUSH
61727: LD_INT 30
61729: PUSH
61730: LD_INT 5
61732: PUSH
61733: EMPTY
61734: LIST
61735: LIST
61736: PUSH
61737: EMPTY
61738: LIST
61739: LIST
61740: LIST
61741: PPUSH
61742: CALL_OW 72
61746: ST_TO_ADDR
// if not b then
61747: LD_VAR 0 12
61751: NOT
61752: IFFALSE 61756
// exit ;
61754: GO 64822
// p := [ ] ;
61756: LD_ADDR_VAR 0 11
61760: PUSH
61761: EMPTY
61762: ST_TO_ADDR
// if sci >= 2 then
61763: LD_VAR 0 8
61767: PUSH
61768: LD_INT 2
61770: GREATEREQUAL
61771: IFFALSE 61802
// sci := [ sci [ 1 ] , sci [ 2 ] ] else
61773: LD_ADDR_VAR 0 8
61777: PUSH
61778: LD_VAR 0 8
61782: PUSH
61783: LD_INT 1
61785: ARRAY
61786: PUSH
61787: LD_VAR 0 8
61791: PUSH
61792: LD_INT 2
61794: ARRAY
61795: PUSH
61796: EMPTY
61797: LIST
61798: LIST
61799: ST_TO_ADDR
61800: GO 61863
// if sci = 1 then
61802: LD_VAR 0 8
61806: PUSH
61807: LD_INT 1
61809: EQUAL
61810: IFFALSE 61831
// sci := [ sci [ 1 ] ] else
61812: LD_ADDR_VAR 0 8
61816: PUSH
61817: LD_VAR 0 8
61821: PUSH
61822: LD_INT 1
61824: ARRAY
61825: PUSH
61826: EMPTY
61827: LIST
61828: ST_TO_ADDR
61829: GO 61863
// if sci = 0 then
61831: LD_VAR 0 8
61835: PUSH
61836: LD_INT 0
61838: EQUAL
61839: IFFALSE 61863
// p := SortBySkill ( tmp , 4 ) [ 1 ] ;
61841: LD_ADDR_VAR 0 11
61845: PUSH
61846: LD_VAR 0 4
61850: PPUSH
61851: LD_INT 4
61853: PPUSH
61854: CALL 53864 0 2
61858: PUSH
61859: LD_INT 1
61861: ARRAY
61862: ST_TO_ADDR
// if eng > 4 then
61863: LD_VAR 0 6
61867: PUSH
61868: LD_INT 4
61870: GREATER
61871: IFFALSE 61917
// for i = eng downto 4 do
61873: LD_ADDR_VAR 0 3
61877: PUSH
61878: DOUBLE
61879: LD_VAR 0 6
61883: INC
61884: ST_TO_ADDR
61885: LD_INT 4
61887: PUSH
61888: FOR_DOWNTO
61889: IFFALSE 61915
// eng := eng diff eng [ i ] ;
61891: LD_ADDR_VAR 0 6
61895: PUSH
61896: LD_VAR 0 6
61900: PUSH
61901: LD_VAR 0 6
61905: PUSH
61906: LD_VAR 0 3
61910: ARRAY
61911: DIFF
61912: ST_TO_ADDR
61913: GO 61888
61915: POP
61916: POP
// tmp := tmp diff ( sol union eng union mech union sci ) ;
61917: LD_ADDR_VAR 0 4
61921: PUSH
61922: LD_VAR 0 4
61926: PUSH
61927: LD_VAR 0 5
61931: PUSH
61932: LD_VAR 0 6
61936: UNION
61937: PUSH
61938: LD_VAR 0 7
61942: UNION
61943: PUSH
61944: LD_VAR 0 8
61948: UNION
61949: DIFF
61950: ST_TO_ADDR
// bcount := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) + UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) * 6 ;
61951: LD_ADDR_VAR 0 13
61955: PUSH
61956: LD_EXP 47
61960: PUSH
61961: LD_VAR 0 1
61965: ARRAY
61966: PPUSH
61967: LD_INT 2
61969: PUSH
61970: LD_INT 30
61972: PUSH
61973: LD_INT 32
61975: PUSH
61976: EMPTY
61977: LIST
61978: LIST
61979: PUSH
61980: LD_INT 30
61982: PUSH
61983: LD_INT 31
61985: PUSH
61986: EMPTY
61987: LIST
61988: LIST
61989: PUSH
61990: EMPTY
61991: LIST
61992: LIST
61993: LIST
61994: PPUSH
61995: CALL_OW 72
61999: PUSH
62000: LD_EXP 47
62004: PUSH
62005: LD_VAR 0 1
62009: ARRAY
62010: PPUSH
62011: LD_INT 2
62013: PUSH
62014: LD_INT 30
62016: PUSH
62017: LD_INT 4
62019: PUSH
62020: EMPTY
62021: LIST
62022: LIST
62023: PUSH
62024: LD_INT 30
62026: PUSH
62027: LD_INT 5
62029: PUSH
62030: EMPTY
62031: LIST
62032: LIST
62033: PUSH
62034: EMPTY
62035: LIST
62036: LIST
62037: LIST
62038: PPUSH
62039: CALL_OW 72
62043: PUSH
62044: LD_INT 6
62046: MUL
62047: PLUS
62048: ST_TO_ADDR
// if bcount < tmp then
62049: LD_VAR 0 13
62053: PUSH
62054: LD_VAR 0 4
62058: LESS
62059: IFFALSE 62105
// for i = tmp downto bcount do
62061: LD_ADDR_VAR 0 3
62065: PUSH
62066: DOUBLE
62067: LD_VAR 0 4
62071: INC
62072: ST_TO_ADDR
62073: LD_VAR 0 13
62077: PUSH
62078: FOR_DOWNTO
62079: IFFALSE 62103
// tmp := Delete ( tmp , tmp ) ;
62081: LD_ADDR_VAR 0 4
62085: PUSH
62086: LD_VAR 0 4
62090: PPUSH
62091: LD_VAR 0 4
62095: PPUSH
62096: CALL_OW 3
62100: ST_TO_ADDR
62101: GO 62078
62103: POP
62104: POP
// result := [ tmp , 0 , 0 , p ] ;
62105: LD_ADDR_VAR 0 2
62109: PUSH
62110: LD_VAR 0 4
62114: PUSH
62115: LD_INT 0
62117: PUSH
62118: LD_INT 0
62120: PUSH
62121: LD_VAR 0 11
62125: PUSH
62126: EMPTY
62127: LIST
62128: LIST
62129: LIST
62130: LIST
62131: ST_TO_ADDR
// exit ;
62132: GO 64822
// end ; if not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
62134: LD_EXP 47
62138: PUSH
62139: LD_VAR 0 1
62143: ARRAY
62144: PPUSH
62145: LD_INT 2
62147: PUSH
62148: LD_INT 30
62150: PUSH
62151: LD_INT 6
62153: PUSH
62154: EMPTY
62155: LIST
62156: LIST
62157: PUSH
62158: LD_INT 30
62160: PUSH
62161: LD_INT 7
62163: PUSH
62164: EMPTY
62165: LIST
62166: LIST
62167: PUSH
62168: LD_INT 30
62170: PUSH
62171: LD_INT 8
62173: PUSH
62174: EMPTY
62175: LIST
62176: LIST
62177: PUSH
62178: EMPTY
62179: LIST
62180: LIST
62181: LIST
62182: LIST
62183: PPUSH
62184: CALL_OW 72
62188: NOT
62189: PUSH
62190: LD_EXP 47
62194: PUSH
62195: LD_VAR 0 1
62199: ARRAY
62200: PPUSH
62201: LD_INT 30
62203: PUSH
62204: LD_INT 3
62206: PUSH
62207: EMPTY
62208: LIST
62209: LIST
62210: PPUSH
62211: CALL_OW 72
62215: NOT
62216: AND
62217: IFFALSE 62289
// begin if eng = tmp then
62219: LD_VAR 0 6
62223: PUSH
62224: LD_VAR 0 4
62228: EQUAL
62229: IFFALSE 62233
// exit ;
62231: GO 64822
// mc_class_case_use := Replace ( mc_class_case_use , base , 1 ) ;
62233: LD_ADDR_EXP 89
62237: PUSH
62238: LD_EXP 89
62242: PPUSH
62243: LD_VAR 0 1
62247: PPUSH
62248: LD_INT 1
62250: PPUSH
62251: CALL_OW 1
62255: ST_TO_ADDR
// result := [ 0 , tmp diff eng , 0 , 0 ] ;
62256: LD_ADDR_VAR 0 2
62260: PUSH
62261: LD_INT 0
62263: PUSH
62264: LD_VAR 0 4
62268: PUSH
62269: LD_VAR 0 6
62273: DIFF
62274: PUSH
62275: LD_INT 0
62277: PUSH
62278: LD_INT 0
62280: PUSH
62281: EMPTY
62282: LIST
62283: LIST
62284: LIST
62285: LIST
62286: ST_TO_ADDR
// exit ;
62287: GO 64822
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
62289: LD_EXP 74
62293: PUSH
62294: LD_EXP 73
62298: PUSH
62299: LD_VAR 0 1
62303: ARRAY
62304: ARRAY
62305: PUSH
62306: LD_EXP 47
62310: PUSH
62311: LD_VAR 0 1
62315: ARRAY
62316: PPUSH
62317: LD_INT 2
62319: PUSH
62320: LD_INT 30
62322: PUSH
62323: LD_INT 6
62325: PUSH
62326: EMPTY
62327: LIST
62328: LIST
62329: PUSH
62330: LD_INT 30
62332: PUSH
62333: LD_INT 7
62335: PUSH
62336: EMPTY
62337: LIST
62338: LIST
62339: PUSH
62340: LD_INT 30
62342: PUSH
62343: LD_INT 8
62345: PUSH
62346: EMPTY
62347: LIST
62348: LIST
62349: PUSH
62350: EMPTY
62351: LIST
62352: LIST
62353: LIST
62354: LIST
62355: PPUSH
62356: CALL_OW 72
62360: AND
62361: PUSH
62362: LD_EXP 47
62366: PUSH
62367: LD_VAR 0 1
62371: ARRAY
62372: PPUSH
62373: LD_INT 30
62375: PUSH
62376: LD_INT 3
62378: PUSH
62379: EMPTY
62380: LIST
62381: LIST
62382: PPUSH
62383: CALL_OW 72
62387: NOT
62388: AND
62389: IFFALSE 62603
// begin if sci >= 6 then
62391: LD_VAR 0 8
62395: PUSH
62396: LD_INT 6
62398: GREATEREQUAL
62399: IFFALSE 62403
// exit ;
62401: GO 64822
// mc_class_case_use := Replace ( mc_class_case_use , base , 2 ) ;
62403: LD_ADDR_EXP 89
62407: PUSH
62408: LD_EXP 89
62412: PPUSH
62413: LD_VAR 0 1
62417: PPUSH
62418: LD_INT 2
62420: PPUSH
62421: CALL_OW 1
62425: ST_TO_ADDR
// sort := SortBySkill ( tmp diff sci , 4 ) ;
62426: LD_ADDR_VAR 0 9
62430: PUSH
62431: LD_VAR 0 4
62435: PUSH
62436: LD_VAR 0 8
62440: DIFF
62441: PPUSH
62442: LD_INT 4
62444: PPUSH
62445: CALL 53864 0 2
62449: ST_TO_ADDR
// p := [ ] ;
62450: LD_ADDR_VAR 0 11
62454: PUSH
62455: EMPTY
62456: ST_TO_ADDR
// if sci < 6 and sort > 6 then
62457: LD_VAR 0 8
62461: PUSH
62462: LD_INT 6
62464: LESS
62465: PUSH
62466: LD_VAR 0 9
62470: PUSH
62471: LD_INT 6
62473: GREATER
62474: AND
62475: IFFALSE 62556
// begin for i = 1 to 6 - sci do
62477: LD_ADDR_VAR 0 3
62481: PUSH
62482: DOUBLE
62483: LD_INT 1
62485: DEC
62486: ST_TO_ADDR
62487: LD_INT 6
62489: PUSH
62490: LD_VAR 0 8
62494: MINUS
62495: PUSH
62496: FOR_TO
62497: IFFALSE 62552
// begin p := Insert ( p , p + 1 , sort [ 1 ] ) ;
62499: LD_ADDR_VAR 0 11
62503: PUSH
62504: LD_VAR 0 11
62508: PPUSH
62509: LD_VAR 0 11
62513: PUSH
62514: LD_INT 1
62516: PLUS
62517: PPUSH
62518: LD_VAR 0 9
62522: PUSH
62523: LD_INT 1
62525: ARRAY
62526: PPUSH
62527: CALL_OW 2
62531: ST_TO_ADDR
// sort := Delete ( sort , 1 ) ;
62532: LD_ADDR_VAR 0 9
62536: PUSH
62537: LD_VAR 0 9
62541: PPUSH
62542: LD_INT 1
62544: PPUSH
62545: CALL_OW 3
62549: ST_TO_ADDR
// end ;
62550: GO 62496
62552: POP
62553: POP
// end else
62554: GO 62576
// if sort then
62556: LD_VAR 0 9
62560: IFFALSE 62576
// p := sort [ 1 ] ;
62562: LD_ADDR_VAR 0 11
62566: PUSH
62567: LD_VAR 0 9
62571: PUSH
62572: LD_INT 1
62574: ARRAY
62575: ST_TO_ADDR
// result := [ 0 , 0 , 0 , p ] ;
62576: LD_ADDR_VAR 0 2
62580: PUSH
62581: LD_INT 0
62583: PUSH
62584: LD_INT 0
62586: PUSH
62587: LD_INT 0
62589: PUSH
62590: LD_VAR 0 11
62594: PUSH
62595: EMPTY
62596: LIST
62597: LIST
62598: LIST
62599: LIST
62600: ST_TO_ADDR
// exit ;
62601: GO 64822
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
62603: LD_EXP 74
62607: PUSH
62608: LD_EXP 73
62612: PUSH
62613: LD_VAR 0 1
62617: ARRAY
62618: ARRAY
62619: PUSH
62620: LD_EXP 47
62624: PUSH
62625: LD_VAR 0 1
62629: ARRAY
62630: PPUSH
62631: LD_INT 2
62633: PUSH
62634: LD_INT 30
62636: PUSH
62637: LD_INT 6
62639: PUSH
62640: EMPTY
62641: LIST
62642: LIST
62643: PUSH
62644: LD_INT 30
62646: PUSH
62647: LD_INT 7
62649: PUSH
62650: EMPTY
62651: LIST
62652: LIST
62653: PUSH
62654: LD_INT 30
62656: PUSH
62657: LD_INT 8
62659: PUSH
62660: EMPTY
62661: LIST
62662: LIST
62663: PUSH
62664: EMPTY
62665: LIST
62666: LIST
62667: LIST
62668: LIST
62669: PPUSH
62670: CALL_OW 72
62674: AND
62675: PUSH
62676: LD_EXP 47
62680: PUSH
62681: LD_VAR 0 1
62685: ARRAY
62686: PPUSH
62687: LD_INT 30
62689: PUSH
62690: LD_INT 3
62692: PUSH
62693: EMPTY
62694: LIST
62695: LIST
62696: PPUSH
62697: CALL_OW 72
62701: AND
62702: IFFALSE 63436
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 3 ) ;
62704: LD_ADDR_EXP 89
62708: PUSH
62709: LD_EXP 89
62713: PPUSH
62714: LD_VAR 0 1
62718: PPUSH
62719: LD_INT 3
62721: PPUSH
62722: CALL_OW 1
62726: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
62727: LD_ADDR_VAR 0 2
62731: PUSH
62732: LD_INT 0
62734: PUSH
62735: LD_INT 0
62737: PUSH
62738: LD_INT 0
62740: PUSH
62741: LD_INT 0
62743: PUSH
62744: EMPTY
62745: LIST
62746: LIST
62747: LIST
62748: LIST
62749: ST_TO_ADDR
// if not eng then
62750: LD_VAR 0 6
62754: NOT
62755: IFFALSE 62818
// begin p := SortBySkill ( tmp , 2 ) [ 1 ] ;
62757: LD_ADDR_VAR 0 11
62761: PUSH
62762: LD_VAR 0 4
62766: PPUSH
62767: LD_INT 2
62769: PPUSH
62770: CALL 53864 0 2
62774: PUSH
62775: LD_INT 1
62777: ARRAY
62778: ST_TO_ADDR
// result := Replace ( result , 2 , p ) ;
62779: LD_ADDR_VAR 0 2
62783: PUSH
62784: LD_VAR 0 2
62788: PPUSH
62789: LD_INT 2
62791: PPUSH
62792: LD_VAR 0 11
62796: PPUSH
62797: CALL_OW 1
62801: ST_TO_ADDR
// tmp := tmp diff p ;
62802: LD_ADDR_VAR 0 4
62806: PUSH
62807: LD_VAR 0 4
62811: PUSH
62812: LD_VAR 0 11
62816: DIFF
62817: ST_TO_ADDR
// end ; if tmp and sci < 6 then
62818: LD_VAR 0 4
62822: PUSH
62823: LD_VAR 0 8
62827: PUSH
62828: LD_INT 6
62830: LESS
62831: AND
62832: IFFALSE 63020
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 4 ) ;
62834: LD_ADDR_VAR 0 9
62838: PUSH
62839: LD_VAR 0 4
62843: PUSH
62844: LD_VAR 0 8
62848: PUSH
62849: LD_VAR 0 7
62853: UNION
62854: DIFF
62855: PPUSH
62856: LD_INT 4
62858: PPUSH
62859: CALL 53864 0 2
62863: ST_TO_ADDR
// p := [ ] ;
62864: LD_ADDR_VAR 0 11
62868: PUSH
62869: EMPTY
62870: ST_TO_ADDR
// if sort then
62871: LD_VAR 0 9
62875: IFFALSE 62991
// for i = 1 to 6 - sci do
62877: LD_ADDR_VAR 0 3
62881: PUSH
62882: DOUBLE
62883: LD_INT 1
62885: DEC
62886: ST_TO_ADDR
62887: LD_INT 6
62889: PUSH
62890: LD_VAR 0 8
62894: MINUS
62895: PUSH
62896: FOR_TO
62897: IFFALSE 62989
// begin if i = sort then
62899: LD_VAR 0 3
62903: PUSH
62904: LD_VAR 0 9
62908: EQUAL
62909: IFFALSE 62913
// break ;
62911: GO 62989
// if GetClass ( i ) = 4 then
62913: LD_VAR 0 3
62917: PPUSH
62918: CALL_OW 257
62922: PUSH
62923: LD_INT 4
62925: EQUAL
62926: IFFALSE 62930
// continue ;
62928: GO 62896
// p := Insert ( p , p + 1 , sort [ i ] ) ;
62930: LD_ADDR_VAR 0 11
62934: PUSH
62935: LD_VAR 0 11
62939: PPUSH
62940: LD_VAR 0 11
62944: PUSH
62945: LD_INT 1
62947: PLUS
62948: PPUSH
62949: LD_VAR 0 9
62953: PUSH
62954: LD_VAR 0 3
62958: ARRAY
62959: PPUSH
62960: CALL_OW 2
62964: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
62965: LD_ADDR_VAR 0 4
62969: PUSH
62970: LD_VAR 0 4
62974: PUSH
62975: LD_VAR 0 9
62979: PUSH
62980: LD_VAR 0 3
62984: ARRAY
62985: DIFF
62986: ST_TO_ADDR
// end ;
62987: GO 62896
62989: POP
62990: POP
// if p then
62991: LD_VAR 0 11
62995: IFFALSE 63020
// result := Replace ( result , 4 , p ) ;
62997: LD_ADDR_VAR 0 2
63001: PUSH
63002: LD_VAR 0 2
63006: PPUSH
63007: LD_INT 4
63009: PPUSH
63010: LD_VAR 0 11
63014: PPUSH
63015: CALL_OW 1
63019: ST_TO_ADDR
// end ; if tmp and mech < 6 then
63020: LD_VAR 0 4
63024: PUSH
63025: LD_VAR 0 7
63029: PUSH
63030: LD_INT 6
63032: LESS
63033: AND
63034: IFFALSE 63222
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
63036: LD_ADDR_VAR 0 9
63040: PUSH
63041: LD_VAR 0 4
63045: PUSH
63046: LD_VAR 0 8
63050: PUSH
63051: LD_VAR 0 7
63055: UNION
63056: DIFF
63057: PPUSH
63058: LD_INT 3
63060: PPUSH
63061: CALL 53864 0 2
63065: ST_TO_ADDR
// p := [ ] ;
63066: LD_ADDR_VAR 0 11
63070: PUSH
63071: EMPTY
63072: ST_TO_ADDR
// if sort then
63073: LD_VAR 0 9
63077: IFFALSE 63193
// for i = 1 to 6 - mech do
63079: LD_ADDR_VAR 0 3
63083: PUSH
63084: DOUBLE
63085: LD_INT 1
63087: DEC
63088: ST_TO_ADDR
63089: LD_INT 6
63091: PUSH
63092: LD_VAR 0 7
63096: MINUS
63097: PUSH
63098: FOR_TO
63099: IFFALSE 63191
// begin if i = sort then
63101: LD_VAR 0 3
63105: PUSH
63106: LD_VAR 0 9
63110: EQUAL
63111: IFFALSE 63115
// break ;
63113: GO 63191
// if GetClass ( i ) = 3 then
63115: LD_VAR 0 3
63119: PPUSH
63120: CALL_OW 257
63124: PUSH
63125: LD_INT 3
63127: EQUAL
63128: IFFALSE 63132
// continue ;
63130: GO 63098
// p := Insert ( p , p + 1 , sort [ i ] ) ;
63132: LD_ADDR_VAR 0 11
63136: PUSH
63137: LD_VAR 0 11
63141: PPUSH
63142: LD_VAR 0 11
63146: PUSH
63147: LD_INT 1
63149: PLUS
63150: PPUSH
63151: LD_VAR 0 9
63155: PUSH
63156: LD_VAR 0 3
63160: ARRAY
63161: PPUSH
63162: CALL_OW 2
63166: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
63167: LD_ADDR_VAR 0 4
63171: PUSH
63172: LD_VAR 0 4
63176: PUSH
63177: LD_VAR 0 9
63181: PUSH
63182: LD_VAR 0 3
63186: ARRAY
63187: DIFF
63188: ST_TO_ADDR
// end ;
63189: GO 63098
63191: POP
63192: POP
// if p then
63193: LD_VAR 0 11
63197: IFFALSE 63222
// result := Replace ( result , 3 , p ) ;
63199: LD_ADDR_VAR 0 2
63203: PUSH
63204: LD_VAR 0 2
63208: PPUSH
63209: LD_INT 3
63211: PPUSH
63212: LD_VAR 0 11
63216: PPUSH
63217: CALL_OW 1
63221: ST_TO_ADDR
// end ; if tmp > 6 and eng < 6 then
63222: LD_VAR 0 4
63226: PUSH
63227: LD_INT 6
63229: GREATER
63230: PUSH
63231: LD_VAR 0 6
63235: PUSH
63236: LD_INT 6
63238: LESS
63239: AND
63240: IFFALSE 63434
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
63242: LD_ADDR_VAR 0 9
63246: PUSH
63247: LD_VAR 0 4
63251: PUSH
63252: LD_VAR 0 8
63256: PUSH
63257: LD_VAR 0 7
63261: UNION
63262: PUSH
63263: LD_VAR 0 6
63267: UNION
63268: DIFF
63269: PPUSH
63270: LD_INT 2
63272: PPUSH
63273: CALL 53864 0 2
63277: ST_TO_ADDR
// p := [ ] ;
63278: LD_ADDR_VAR 0 11
63282: PUSH
63283: EMPTY
63284: ST_TO_ADDR
// if sort then
63285: LD_VAR 0 9
63289: IFFALSE 63405
// for i = 1 to 6 - eng do
63291: LD_ADDR_VAR 0 3
63295: PUSH
63296: DOUBLE
63297: LD_INT 1
63299: DEC
63300: ST_TO_ADDR
63301: LD_INT 6
63303: PUSH
63304: LD_VAR 0 6
63308: MINUS
63309: PUSH
63310: FOR_TO
63311: IFFALSE 63403
// begin if i = sort then
63313: LD_VAR 0 3
63317: PUSH
63318: LD_VAR 0 9
63322: EQUAL
63323: IFFALSE 63327
// break ;
63325: GO 63403
// if GetClass ( i ) = 2 then
63327: LD_VAR 0 3
63331: PPUSH
63332: CALL_OW 257
63336: PUSH
63337: LD_INT 2
63339: EQUAL
63340: IFFALSE 63344
// continue ;
63342: GO 63310
// p := Insert ( p , p + 1 , sort [ i ] ) ;
63344: LD_ADDR_VAR 0 11
63348: PUSH
63349: LD_VAR 0 11
63353: PPUSH
63354: LD_VAR 0 11
63358: PUSH
63359: LD_INT 1
63361: PLUS
63362: PPUSH
63363: LD_VAR 0 9
63367: PUSH
63368: LD_VAR 0 3
63372: ARRAY
63373: PPUSH
63374: CALL_OW 2
63378: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
63379: LD_ADDR_VAR 0 4
63383: PUSH
63384: LD_VAR 0 4
63388: PUSH
63389: LD_VAR 0 9
63393: PUSH
63394: LD_VAR 0 3
63398: ARRAY
63399: DIFF
63400: ST_TO_ADDR
// end ;
63401: GO 63310
63403: POP
63404: POP
// if p then
63405: LD_VAR 0 11
63409: IFFALSE 63434
// result := Replace ( result , 2 , p ) ;
63411: LD_ADDR_VAR 0 2
63415: PUSH
63416: LD_VAR 0 2
63420: PPUSH
63421: LD_INT 2
63423: PPUSH
63424: LD_VAR 0 11
63428: PPUSH
63429: CALL_OW 1
63433: ST_TO_ADDR
// end ; exit ;
63434: GO 64822
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and mc_build_list [ base ] then
63436: LD_EXP 74
63440: PUSH
63441: LD_EXP 73
63445: PUSH
63446: LD_VAR 0 1
63450: ARRAY
63451: ARRAY
63452: NOT
63453: PUSH
63454: LD_EXP 47
63458: PUSH
63459: LD_VAR 0 1
63463: ARRAY
63464: PPUSH
63465: LD_INT 30
63467: PUSH
63468: LD_INT 3
63470: PUSH
63471: EMPTY
63472: LIST
63473: LIST
63474: PPUSH
63475: CALL_OW 72
63479: AND
63480: PUSH
63481: LD_EXP 52
63485: PUSH
63486: LD_VAR 0 1
63490: ARRAY
63491: AND
63492: IFFALSE 64100
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 5 ) ;
63494: LD_ADDR_EXP 89
63498: PUSH
63499: LD_EXP 89
63503: PPUSH
63504: LD_VAR 0 1
63508: PPUSH
63509: LD_INT 5
63511: PPUSH
63512: CALL_OW 1
63516: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
63517: LD_ADDR_VAR 0 2
63521: PUSH
63522: LD_INT 0
63524: PUSH
63525: LD_INT 0
63527: PUSH
63528: LD_INT 0
63530: PUSH
63531: LD_INT 0
63533: PUSH
63534: EMPTY
63535: LIST
63536: LIST
63537: LIST
63538: LIST
63539: ST_TO_ADDR
// if sci > 1 then
63540: LD_VAR 0 8
63544: PUSH
63545: LD_INT 1
63547: GREATER
63548: IFFALSE 63576
// tmp := tmp diff ( sci diff sci [ 1 ] ) ;
63550: LD_ADDR_VAR 0 4
63554: PUSH
63555: LD_VAR 0 4
63559: PUSH
63560: LD_VAR 0 8
63564: PUSH
63565: LD_VAR 0 8
63569: PUSH
63570: LD_INT 1
63572: ARRAY
63573: DIFF
63574: DIFF
63575: ST_TO_ADDR
// if tmp and not sci then
63576: LD_VAR 0 4
63580: PUSH
63581: LD_VAR 0 8
63585: NOT
63586: AND
63587: IFFALSE 63656
// begin sort := SortBySkill ( tmp , 4 ) ;
63589: LD_ADDR_VAR 0 9
63593: PUSH
63594: LD_VAR 0 4
63598: PPUSH
63599: LD_INT 4
63601: PPUSH
63602: CALL 53864 0 2
63606: ST_TO_ADDR
// if sort then
63607: LD_VAR 0 9
63611: IFFALSE 63627
// p := sort [ 1 ] ;
63613: LD_ADDR_VAR 0 11
63617: PUSH
63618: LD_VAR 0 9
63622: PUSH
63623: LD_INT 1
63625: ARRAY
63626: ST_TO_ADDR
// if p then
63627: LD_VAR 0 11
63631: IFFALSE 63656
// result := Replace ( result , 4 , p ) ;
63633: LD_ADDR_VAR 0 2
63637: PUSH
63638: LD_VAR 0 2
63642: PPUSH
63643: LD_INT 4
63645: PPUSH
63646: LD_VAR 0 11
63650: PPUSH
63651: CALL_OW 1
63655: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
63656: LD_ADDR_VAR 0 4
63660: PUSH
63661: LD_VAR 0 4
63665: PUSH
63666: LD_VAR 0 7
63670: DIFF
63671: ST_TO_ADDR
// if tmp and mech < 6 then
63672: LD_VAR 0 4
63676: PUSH
63677: LD_VAR 0 7
63681: PUSH
63682: LD_INT 6
63684: LESS
63685: AND
63686: IFFALSE 63874
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
63688: LD_ADDR_VAR 0 9
63692: PUSH
63693: LD_VAR 0 4
63697: PUSH
63698: LD_VAR 0 8
63702: PUSH
63703: LD_VAR 0 7
63707: UNION
63708: DIFF
63709: PPUSH
63710: LD_INT 3
63712: PPUSH
63713: CALL 53864 0 2
63717: ST_TO_ADDR
// p := [ ] ;
63718: LD_ADDR_VAR 0 11
63722: PUSH
63723: EMPTY
63724: ST_TO_ADDR
// if sort then
63725: LD_VAR 0 9
63729: IFFALSE 63845
// for i = 1 to 6 - mech do
63731: LD_ADDR_VAR 0 3
63735: PUSH
63736: DOUBLE
63737: LD_INT 1
63739: DEC
63740: ST_TO_ADDR
63741: LD_INT 6
63743: PUSH
63744: LD_VAR 0 7
63748: MINUS
63749: PUSH
63750: FOR_TO
63751: IFFALSE 63843
// begin if i = sort then
63753: LD_VAR 0 3
63757: PUSH
63758: LD_VAR 0 9
63762: EQUAL
63763: IFFALSE 63767
// break ;
63765: GO 63843
// if GetClass ( i ) = 3 then
63767: LD_VAR 0 3
63771: PPUSH
63772: CALL_OW 257
63776: PUSH
63777: LD_INT 3
63779: EQUAL
63780: IFFALSE 63784
// continue ;
63782: GO 63750
// p := Insert ( p , p + 1 , sort [ i ] ) ;
63784: LD_ADDR_VAR 0 11
63788: PUSH
63789: LD_VAR 0 11
63793: PPUSH
63794: LD_VAR 0 11
63798: PUSH
63799: LD_INT 1
63801: PLUS
63802: PPUSH
63803: LD_VAR 0 9
63807: PUSH
63808: LD_VAR 0 3
63812: ARRAY
63813: PPUSH
63814: CALL_OW 2
63818: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
63819: LD_ADDR_VAR 0 4
63823: PUSH
63824: LD_VAR 0 4
63828: PUSH
63829: LD_VAR 0 9
63833: PUSH
63834: LD_VAR 0 3
63838: ARRAY
63839: DIFF
63840: ST_TO_ADDR
// end ;
63841: GO 63750
63843: POP
63844: POP
// if p then
63845: LD_VAR 0 11
63849: IFFALSE 63874
// result := Replace ( result , 3 , p ) ;
63851: LD_ADDR_VAR 0 2
63855: PUSH
63856: LD_VAR 0 2
63860: PPUSH
63861: LD_INT 3
63863: PPUSH
63864: LD_VAR 0 11
63868: PPUSH
63869: CALL_OW 1
63873: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
63874: LD_ADDR_VAR 0 4
63878: PUSH
63879: LD_VAR 0 4
63883: PUSH
63884: LD_VAR 0 6
63888: DIFF
63889: ST_TO_ADDR
// if tmp and eng < 6 then
63890: LD_VAR 0 4
63894: PUSH
63895: LD_VAR 0 6
63899: PUSH
63900: LD_INT 6
63902: LESS
63903: AND
63904: IFFALSE 64098
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
63906: LD_ADDR_VAR 0 9
63910: PUSH
63911: LD_VAR 0 4
63915: PUSH
63916: LD_VAR 0 8
63920: PUSH
63921: LD_VAR 0 7
63925: UNION
63926: PUSH
63927: LD_VAR 0 6
63931: UNION
63932: DIFF
63933: PPUSH
63934: LD_INT 2
63936: PPUSH
63937: CALL 53864 0 2
63941: ST_TO_ADDR
// p := [ ] ;
63942: LD_ADDR_VAR 0 11
63946: PUSH
63947: EMPTY
63948: ST_TO_ADDR
// if sort then
63949: LD_VAR 0 9
63953: IFFALSE 64069
// for i = 1 to 6 - eng do
63955: LD_ADDR_VAR 0 3
63959: PUSH
63960: DOUBLE
63961: LD_INT 1
63963: DEC
63964: ST_TO_ADDR
63965: LD_INT 6
63967: PUSH
63968: LD_VAR 0 6
63972: MINUS
63973: PUSH
63974: FOR_TO
63975: IFFALSE 64067
// begin if i = sort then
63977: LD_VAR 0 3
63981: PUSH
63982: LD_VAR 0 9
63986: EQUAL
63987: IFFALSE 63991
// break ;
63989: GO 64067
// if GetClass ( i ) = 2 then
63991: LD_VAR 0 3
63995: PPUSH
63996: CALL_OW 257
64000: PUSH
64001: LD_INT 2
64003: EQUAL
64004: IFFALSE 64008
// continue ;
64006: GO 63974
// p := Insert ( p , p + 1 , sort [ i ] ) ;
64008: LD_ADDR_VAR 0 11
64012: PUSH
64013: LD_VAR 0 11
64017: PPUSH
64018: LD_VAR 0 11
64022: PUSH
64023: LD_INT 1
64025: PLUS
64026: PPUSH
64027: LD_VAR 0 9
64031: PUSH
64032: LD_VAR 0 3
64036: ARRAY
64037: PPUSH
64038: CALL_OW 2
64042: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
64043: LD_ADDR_VAR 0 4
64047: PUSH
64048: LD_VAR 0 4
64052: PUSH
64053: LD_VAR 0 9
64057: PUSH
64058: LD_VAR 0 3
64062: ARRAY
64063: DIFF
64064: ST_TO_ADDR
// end ;
64065: GO 63974
64067: POP
64068: POP
// if p then
64069: LD_VAR 0 11
64073: IFFALSE 64098
// result := Replace ( result , 2 , p ) ;
64075: LD_ADDR_VAR 0 2
64079: PUSH
64080: LD_VAR 0 2
64084: PPUSH
64085: LD_INT 2
64087: PPUSH
64088: LD_VAR 0 11
64092: PPUSH
64093: CALL_OW 1
64097: ST_TO_ADDR
// end ; exit ;
64098: GO 64822
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and not mc_build_list [ base ] then
64100: LD_EXP 74
64104: PUSH
64105: LD_EXP 73
64109: PUSH
64110: LD_VAR 0 1
64114: ARRAY
64115: ARRAY
64116: NOT
64117: PUSH
64118: LD_EXP 47
64122: PUSH
64123: LD_VAR 0 1
64127: ARRAY
64128: PPUSH
64129: LD_INT 30
64131: PUSH
64132: LD_INT 3
64134: PUSH
64135: EMPTY
64136: LIST
64137: LIST
64138: PPUSH
64139: CALL_OW 72
64143: AND
64144: PUSH
64145: LD_EXP 52
64149: PUSH
64150: LD_VAR 0 1
64154: ARRAY
64155: NOT
64156: AND
64157: IFFALSE 64822
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 6 ) ;
64159: LD_ADDR_EXP 89
64163: PUSH
64164: LD_EXP 89
64168: PPUSH
64169: LD_VAR 0 1
64173: PPUSH
64174: LD_INT 6
64176: PPUSH
64177: CALL_OW 1
64181: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
64182: LD_ADDR_VAR 0 2
64186: PUSH
64187: LD_INT 0
64189: PUSH
64190: LD_INT 0
64192: PUSH
64193: LD_INT 0
64195: PUSH
64196: LD_INT 0
64198: PUSH
64199: EMPTY
64200: LIST
64201: LIST
64202: LIST
64203: LIST
64204: ST_TO_ADDR
// if sci >= 1 then
64205: LD_VAR 0 8
64209: PUSH
64210: LD_INT 1
64212: GREATEREQUAL
64213: IFFALSE 64235
// tmp := tmp diff sci [ 1 ] ;
64215: LD_ADDR_VAR 0 4
64219: PUSH
64220: LD_VAR 0 4
64224: PUSH
64225: LD_VAR 0 8
64229: PUSH
64230: LD_INT 1
64232: ARRAY
64233: DIFF
64234: ST_TO_ADDR
// if tmp and not sci then
64235: LD_VAR 0 4
64239: PUSH
64240: LD_VAR 0 8
64244: NOT
64245: AND
64246: IFFALSE 64315
// begin sort := SortBySkill ( tmp , 4 ) ;
64248: LD_ADDR_VAR 0 9
64252: PUSH
64253: LD_VAR 0 4
64257: PPUSH
64258: LD_INT 4
64260: PPUSH
64261: CALL 53864 0 2
64265: ST_TO_ADDR
// if sort then
64266: LD_VAR 0 9
64270: IFFALSE 64286
// p := sort [ 1 ] ;
64272: LD_ADDR_VAR 0 11
64276: PUSH
64277: LD_VAR 0 9
64281: PUSH
64282: LD_INT 1
64284: ARRAY
64285: ST_TO_ADDR
// if p then
64286: LD_VAR 0 11
64290: IFFALSE 64315
// result := Replace ( result , 4 , p ) ;
64292: LD_ADDR_VAR 0 2
64296: PUSH
64297: LD_VAR 0 2
64301: PPUSH
64302: LD_INT 4
64304: PPUSH
64305: LD_VAR 0 11
64309: PPUSH
64310: CALL_OW 1
64314: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
64315: LD_ADDR_VAR 0 4
64319: PUSH
64320: LD_VAR 0 4
64324: PUSH
64325: LD_VAR 0 7
64329: DIFF
64330: ST_TO_ADDR
// if tmp and mech < 6 then
64331: LD_VAR 0 4
64335: PUSH
64336: LD_VAR 0 7
64340: PUSH
64341: LD_INT 6
64343: LESS
64344: AND
64345: IFFALSE 64527
// begin sort := SortBySkill ( tmp diff mech , 3 ) ;
64347: LD_ADDR_VAR 0 9
64351: PUSH
64352: LD_VAR 0 4
64356: PUSH
64357: LD_VAR 0 7
64361: DIFF
64362: PPUSH
64363: LD_INT 3
64365: PPUSH
64366: CALL 53864 0 2
64370: ST_TO_ADDR
// p := [ ] ;
64371: LD_ADDR_VAR 0 11
64375: PUSH
64376: EMPTY
64377: ST_TO_ADDR
// if sort then
64378: LD_VAR 0 9
64382: IFFALSE 64498
// for i = 1 to 6 - mech do
64384: LD_ADDR_VAR 0 3
64388: PUSH
64389: DOUBLE
64390: LD_INT 1
64392: DEC
64393: ST_TO_ADDR
64394: LD_INT 6
64396: PUSH
64397: LD_VAR 0 7
64401: MINUS
64402: PUSH
64403: FOR_TO
64404: IFFALSE 64496
// begin if i = sort then
64406: LD_VAR 0 3
64410: PUSH
64411: LD_VAR 0 9
64415: EQUAL
64416: IFFALSE 64420
// break ;
64418: GO 64496
// if GetClass ( i ) = 3 then
64420: LD_VAR 0 3
64424: PPUSH
64425: CALL_OW 257
64429: PUSH
64430: LD_INT 3
64432: EQUAL
64433: IFFALSE 64437
// continue ;
64435: GO 64403
// p := Insert ( p , p + 1 , sort [ i ] ) ;
64437: LD_ADDR_VAR 0 11
64441: PUSH
64442: LD_VAR 0 11
64446: PPUSH
64447: LD_VAR 0 11
64451: PUSH
64452: LD_INT 1
64454: PLUS
64455: PPUSH
64456: LD_VAR 0 9
64460: PUSH
64461: LD_VAR 0 3
64465: ARRAY
64466: PPUSH
64467: CALL_OW 2
64471: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
64472: LD_ADDR_VAR 0 4
64476: PUSH
64477: LD_VAR 0 4
64481: PUSH
64482: LD_VAR 0 9
64486: PUSH
64487: LD_VAR 0 3
64491: ARRAY
64492: DIFF
64493: ST_TO_ADDR
// end ;
64494: GO 64403
64496: POP
64497: POP
// if p then
64498: LD_VAR 0 11
64502: IFFALSE 64527
// result := Replace ( result , 3 , p ) ;
64504: LD_ADDR_VAR 0 2
64508: PUSH
64509: LD_VAR 0 2
64513: PPUSH
64514: LD_INT 3
64516: PPUSH
64517: LD_VAR 0 11
64521: PPUSH
64522: CALL_OW 1
64526: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
64527: LD_ADDR_VAR 0 4
64531: PUSH
64532: LD_VAR 0 4
64536: PUSH
64537: LD_VAR 0 6
64541: DIFF
64542: ST_TO_ADDR
// if tmp and eng < 4 then
64543: LD_VAR 0 4
64547: PUSH
64548: LD_VAR 0 6
64552: PUSH
64553: LD_INT 4
64555: LESS
64556: AND
64557: IFFALSE 64747
// begin sort := SortBySkill ( tmp diff ( mech union eng ) , 2 ) ;
64559: LD_ADDR_VAR 0 9
64563: PUSH
64564: LD_VAR 0 4
64568: PUSH
64569: LD_VAR 0 7
64573: PUSH
64574: LD_VAR 0 6
64578: UNION
64579: DIFF
64580: PPUSH
64581: LD_INT 2
64583: PPUSH
64584: CALL 53864 0 2
64588: ST_TO_ADDR
// p := [ ] ;
64589: LD_ADDR_VAR 0 11
64593: PUSH
64594: EMPTY
64595: ST_TO_ADDR
// if sort then
64596: LD_VAR 0 9
64600: IFFALSE 64716
// for i = 1 to 4 - eng do
64602: LD_ADDR_VAR 0 3
64606: PUSH
64607: DOUBLE
64608: LD_INT 1
64610: DEC
64611: ST_TO_ADDR
64612: LD_INT 4
64614: PUSH
64615: LD_VAR 0 6
64619: MINUS
64620: PUSH
64621: FOR_TO
64622: IFFALSE 64714
// begin if i = sort then
64624: LD_VAR 0 3
64628: PUSH
64629: LD_VAR 0 9
64633: EQUAL
64634: IFFALSE 64638
// break ;
64636: GO 64714
// if GetClass ( i ) = 2 then
64638: LD_VAR 0 3
64642: PPUSH
64643: CALL_OW 257
64647: PUSH
64648: LD_INT 2
64650: EQUAL
64651: IFFALSE 64655
// continue ;
64653: GO 64621
// p := Insert ( p , p + 1 , sort [ i ] ) ;
64655: LD_ADDR_VAR 0 11
64659: PUSH
64660: LD_VAR 0 11
64664: PPUSH
64665: LD_VAR 0 11
64669: PUSH
64670: LD_INT 1
64672: PLUS
64673: PPUSH
64674: LD_VAR 0 9
64678: PUSH
64679: LD_VAR 0 3
64683: ARRAY
64684: PPUSH
64685: CALL_OW 2
64689: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
64690: LD_ADDR_VAR 0 4
64694: PUSH
64695: LD_VAR 0 4
64699: PUSH
64700: LD_VAR 0 9
64704: PUSH
64705: LD_VAR 0 3
64709: ARRAY
64710: DIFF
64711: ST_TO_ADDR
// end ;
64712: GO 64621
64714: POP
64715: POP
// if p then
64716: LD_VAR 0 11
64720: IFFALSE 64745
// result := Replace ( result , 2 , p ) ;
64722: LD_ADDR_VAR 0 2
64726: PUSH
64727: LD_VAR 0 2
64731: PPUSH
64732: LD_INT 2
64734: PPUSH
64735: LD_VAR 0 11
64739: PPUSH
64740: CALL_OW 1
64744: ST_TO_ADDR
// end else
64745: GO 64791
// for i = eng downto 5 do
64747: LD_ADDR_VAR 0 3
64751: PUSH
64752: DOUBLE
64753: LD_VAR 0 6
64757: INC
64758: ST_TO_ADDR
64759: LD_INT 5
64761: PUSH
64762: FOR_DOWNTO
64763: IFFALSE 64789
// tmp := tmp union eng [ i ] ;
64765: LD_ADDR_VAR 0 4
64769: PUSH
64770: LD_VAR 0 4
64774: PUSH
64775: LD_VAR 0 6
64779: PUSH
64780: LD_VAR 0 3
64784: ARRAY
64785: UNION
64786: ST_TO_ADDR
64787: GO 64762
64789: POP
64790: POP
// result := Replace ( result , 1 , tmp diff sol ) ;
64791: LD_ADDR_VAR 0 2
64795: PUSH
64796: LD_VAR 0 2
64800: PPUSH
64801: LD_INT 1
64803: PPUSH
64804: LD_VAR 0 4
64808: PUSH
64809: LD_VAR 0 5
64813: DIFF
64814: PPUSH
64815: CALL_OW 1
64819: ST_TO_ADDR
// exit ;
64820: GO 64822
// end ; end ;
64822: LD_VAR 0 2
64826: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
64827: LD_INT 0
64829: PPUSH
64830: PPUSH
64831: PPUSH
// if not mc_bases then
64832: LD_EXP 47
64836: NOT
64837: IFFALSE 64841
// exit ;
64839: GO 64947
// for i = 1 to mc_bases do
64841: LD_ADDR_VAR 0 2
64845: PUSH
64846: DOUBLE
64847: LD_INT 1
64849: DEC
64850: ST_TO_ADDR
64851: LD_EXP 47
64855: PUSH
64856: FOR_TO
64857: IFFALSE 64938
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
64859: LD_ADDR_VAR 0 3
64863: PUSH
64864: LD_EXP 47
64868: PUSH
64869: LD_VAR 0 2
64873: ARRAY
64874: PPUSH
64875: LD_INT 21
64877: PUSH
64878: LD_INT 3
64880: PUSH
64881: EMPTY
64882: LIST
64883: LIST
64884: PUSH
64885: LD_INT 3
64887: PUSH
64888: LD_INT 24
64890: PUSH
64891: LD_INT 1000
64893: PUSH
64894: EMPTY
64895: LIST
64896: LIST
64897: PUSH
64898: EMPTY
64899: LIST
64900: LIST
64901: PUSH
64902: EMPTY
64903: LIST
64904: LIST
64905: PPUSH
64906: CALL_OW 72
64910: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
64911: LD_ADDR_EXP 48
64915: PUSH
64916: LD_EXP 48
64920: PPUSH
64921: LD_VAR 0 2
64925: PPUSH
64926: LD_VAR 0 3
64930: PPUSH
64931: CALL_OW 1
64935: ST_TO_ADDR
// end ;
64936: GO 64856
64938: POP
64939: POP
// RaiseSailEvent ( 101 ) ;
64940: LD_INT 101
64942: PPUSH
64943: CALL_OW 427
// end ;
64947: LD_VAR 0 1
64951: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
64952: LD_INT 0
64954: PPUSH
64955: PPUSH
64956: PPUSH
64957: PPUSH
64958: PPUSH
64959: PPUSH
64960: PPUSH
// if not mc_bases then
64961: LD_EXP 47
64965: NOT
64966: IFFALSE 64970
// exit ;
64968: GO 65532
// for i = 1 to mc_bases do
64970: LD_ADDR_VAR 0 2
64974: PUSH
64975: DOUBLE
64976: LD_INT 1
64978: DEC
64979: ST_TO_ADDR
64980: LD_EXP 47
64984: PUSH
64985: FOR_TO
64986: IFFALSE 65523
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 800 ] ] ] ] ) ;
64988: LD_ADDR_VAR 0 5
64992: PUSH
64993: LD_EXP 47
64997: PUSH
64998: LD_VAR 0 2
65002: ARRAY
65003: PUSH
65004: LD_EXP 76
65008: PUSH
65009: LD_VAR 0 2
65013: ARRAY
65014: UNION
65015: PPUSH
65016: LD_INT 21
65018: PUSH
65019: LD_INT 1
65021: PUSH
65022: EMPTY
65023: LIST
65024: LIST
65025: PUSH
65026: LD_INT 1
65028: PUSH
65029: LD_INT 3
65031: PUSH
65032: LD_INT 54
65034: PUSH
65035: EMPTY
65036: LIST
65037: PUSH
65038: EMPTY
65039: LIST
65040: LIST
65041: PUSH
65042: LD_INT 3
65044: PUSH
65045: LD_INT 24
65047: PUSH
65048: LD_INT 800
65050: PUSH
65051: EMPTY
65052: LIST
65053: LIST
65054: PUSH
65055: EMPTY
65056: LIST
65057: LIST
65058: PUSH
65059: EMPTY
65060: LIST
65061: LIST
65062: LIST
65063: PUSH
65064: EMPTY
65065: LIST
65066: LIST
65067: PPUSH
65068: CALL_OW 72
65072: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
65073: LD_ADDR_VAR 0 6
65077: PUSH
65078: LD_EXP 47
65082: PUSH
65083: LD_VAR 0 2
65087: ARRAY
65088: PPUSH
65089: LD_INT 21
65091: PUSH
65092: LD_INT 1
65094: PUSH
65095: EMPTY
65096: LIST
65097: LIST
65098: PUSH
65099: LD_INT 1
65101: PUSH
65102: LD_INT 3
65104: PUSH
65105: LD_INT 54
65107: PUSH
65108: EMPTY
65109: LIST
65110: PUSH
65111: EMPTY
65112: LIST
65113: LIST
65114: PUSH
65115: LD_INT 3
65117: PUSH
65118: LD_INT 24
65120: PUSH
65121: LD_INT 250
65123: PUSH
65124: EMPTY
65125: LIST
65126: LIST
65127: PUSH
65128: EMPTY
65129: LIST
65130: LIST
65131: PUSH
65132: EMPTY
65133: LIST
65134: LIST
65135: LIST
65136: PUSH
65137: EMPTY
65138: LIST
65139: LIST
65140: PPUSH
65141: CALL_OW 72
65145: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
65146: LD_ADDR_VAR 0 7
65150: PUSH
65151: LD_VAR 0 5
65155: PUSH
65156: LD_VAR 0 6
65160: DIFF
65161: ST_TO_ADDR
// if not need_heal_1 then
65162: LD_VAR 0 6
65166: NOT
65167: IFFALSE 65200
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , [ ] ) else
65169: LD_ADDR_EXP 50
65173: PUSH
65174: LD_EXP 50
65178: PPUSH
65179: LD_VAR 0 2
65183: PUSH
65184: LD_INT 1
65186: PUSH
65187: EMPTY
65188: LIST
65189: LIST
65190: PPUSH
65191: EMPTY
65192: PPUSH
65193: CALL 24315 0 3
65197: ST_TO_ADDR
65198: GO 65270
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , UnitFilter ( mc_need_heal [ i ] [ 1 ] , [ f_not , [ f_lives , 1000 ] ] ) union need_heal_1 ) ;
65200: LD_ADDR_EXP 50
65204: PUSH
65205: LD_EXP 50
65209: PPUSH
65210: LD_VAR 0 2
65214: PUSH
65215: LD_INT 1
65217: PUSH
65218: EMPTY
65219: LIST
65220: LIST
65221: PPUSH
65222: LD_EXP 50
65226: PUSH
65227: LD_VAR 0 2
65231: ARRAY
65232: PUSH
65233: LD_INT 1
65235: ARRAY
65236: PPUSH
65237: LD_INT 3
65239: PUSH
65240: LD_INT 24
65242: PUSH
65243: LD_INT 1000
65245: PUSH
65246: EMPTY
65247: LIST
65248: LIST
65249: PUSH
65250: EMPTY
65251: LIST
65252: LIST
65253: PPUSH
65254: CALL_OW 72
65258: PUSH
65259: LD_VAR 0 6
65263: UNION
65264: PPUSH
65265: CALL 24315 0 3
65269: ST_TO_ADDR
// if not need_heal_2 then
65270: LD_VAR 0 7
65274: NOT
65275: IFFALSE 65308
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , [ ] ) else
65277: LD_ADDR_EXP 50
65281: PUSH
65282: LD_EXP 50
65286: PPUSH
65287: LD_VAR 0 2
65291: PUSH
65292: LD_INT 2
65294: PUSH
65295: EMPTY
65296: LIST
65297: LIST
65298: PPUSH
65299: EMPTY
65300: PPUSH
65301: CALL 24315 0 3
65305: ST_TO_ADDR
65306: GO 65340
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
65308: LD_ADDR_EXP 50
65312: PUSH
65313: LD_EXP 50
65317: PPUSH
65318: LD_VAR 0 2
65322: PUSH
65323: LD_INT 2
65325: PUSH
65326: EMPTY
65327: LIST
65328: LIST
65329: PPUSH
65330: LD_VAR 0 7
65334: PPUSH
65335: CALL 24315 0 3
65339: ST_TO_ADDR
// if need_heal_2 then
65340: LD_VAR 0 7
65344: IFFALSE 65505
// for j in need_heal_2 do
65346: LD_ADDR_VAR 0 3
65350: PUSH
65351: LD_VAR 0 7
65355: PUSH
65356: FOR_IN
65357: IFFALSE 65503
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
65359: LD_ADDR_VAR 0 5
65363: PUSH
65364: LD_EXP 47
65368: PUSH
65369: LD_VAR 0 2
65373: ARRAY
65374: PPUSH
65375: LD_INT 2
65377: PUSH
65378: LD_INT 30
65380: PUSH
65381: LD_INT 6
65383: PUSH
65384: EMPTY
65385: LIST
65386: LIST
65387: PUSH
65388: LD_INT 30
65390: PUSH
65391: LD_INT 7
65393: PUSH
65394: EMPTY
65395: LIST
65396: LIST
65397: PUSH
65398: LD_INT 30
65400: PUSH
65401: LD_INT 8
65403: PUSH
65404: EMPTY
65405: LIST
65406: LIST
65407: PUSH
65408: LD_INT 30
65410: PUSH
65411: LD_INT 0
65413: PUSH
65414: EMPTY
65415: LIST
65416: LIST
65417: PUSH
65418: LD_INT 30
65420: PUSH
65421: LD_INT 1
65423: PUSH
65424: EMPTY
65425: LIST
65426: LIST
65427: PUSH
65428: EMPTY
65429: LIST
65430: LIST
65431: LIST
65432: LIST
65433: LIST
65434: LIST
65435: PPUSH
65436: CALL_OW 72
65440: ST_TO_ADDR
// if tmp then
65441: LD_VAR 0 5
65445: IFFALSE 65501
// begin k := NearestUnitToUnit ( tmp , j ) ;
65447: LD_ADDR_VAR 0 4
65451: PUSH
65452: LD_VAR 0 5
65456: PPUSH
65457: LD_VAR 0 3
65461: PPUSH
65462: CALL_OW 74
65466: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 5 then
65467: LD_VAR 0 3
65471: PPUSH
65472: LD_VAR 0 4
65476: PPUSH
65477: CALL_OW 296
65481: PUSH
65482: LD_INT 5
65484: GREATER
65485: IFFALSE 65501
// ComMoveToNearbyEntrance ( j , k ) ;
65487: LD_VAR 0 3
65491: PPUSH
65492: LD_VAR 0 4
65496: PPUSH
65497: CALL 56181 0 2
// end ; end ;
65501: GO 65356
65503: POP
65504: POP
// if not need_heal_1 and not need_heal_2 then
65505: LD_VAR 0 6
65509: NOT
65510: PUSH
65511: LD_VAR 0 7
65515: NOT
65516: AND
65517: IFFALSE 65521
// continue ;
65519: GO 64985
// end ;
65521: GO 64985
65523: POP
65524: POP
// RaiseSailEvent ( 102 ) ;
65525: LD_INT 102
65527: PPUSH
65528: CALL_OW 427
// end ;
65532: LD_VAR 0 1
65536: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp , cranes , to_repair_tmp , to_repair ; begin
65537: LD_INT 0
65539: PPUSH
65540: PPUSH
65541: PPUSH
65542: PPUSH
65543: PPUSH
65544: PPUSH
65545: PPUSH
65546: PPUSH
// if not mc_bases then
65547: LD_EXP 47
65551: NOT
65552: IFFALSE 65556
// exit ;
65554: GO 66417
// for i = 1 to mc_bases do
65556: LD_ADDR_VAR 0 2
65560: PUSH
65561: DOUBLE
65562: LD_INT 1
65564: DEC
65565: ST_TO_ADDR
65566: LD_EXP 47
65570: PUSH
65571: FOR_TO
65572: IFFALSE 66415
// begin if not mc_building_need_repair [ i ] then
65574: LD_EXP 48
65578: PUSH
65579: LD_VAR 0 2
65583: ARRAY
65584: NOT
65585: IFFALSE 65772
// begin cranes := UnitFilter ( mc_vehicles [ i ] , [ [ f_not , [ f_lives , 1000 ] ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , ar_crane ] ] ] ) ;
65587: LD_ADDR_VAR 0 6
65591: PUSH
65592: LD_EXP 66
65596: PUSH
65597: LD_VAR 0 2
65601: ARRAY
65602: PPUSH
65603: LD_INT 3
65605: PUSH
65606: LD_INT 24
65608: PUSH
65609: LD_INT 1000
65611: PUSH
65612: EMPTY
65613: LIST
65614: LIST
65615: PUSH
65616: EMPTY
65617: LIST
65618: LIST
65619: PUSH
65620: LD_INT 2
65622: PUSH
65623: LD_INT 34
65625: PUSH
65626: LD_INT 13
65628: PUSH
65629: EMPTY
65630: LIST
65631: LIST
65632: PUSH
65633: LD_INT 34
65635: PUSH
65636: LD_INT 52
65638: PUSH
65639: EMPTY
65640: LIST
65641: LIST
65642: PUSH
65643: LD_INT 34
65645: PUSH
65646: LD_EXP 35
65650: PUSH
65651: EMPTY
65652: LIST
65653: LIST
65654: PUSH
65655: EMPTY
65656: LIST
65657: LIST
65658: LIST
65659: LIST
65660: PUSH
65661: EMPTY
65662: LIST
65663: LIST
65664: PPUSH
65665: CALL_OW 72
65669: ST_TO_ADDR
// if cranes then
65670: LD_VAR 0 6
65674: IFFALSE 65736
// for j in cranes do
65676: LD_ADDR_VAR 0 3
65680: PUSH
65681: LD_VAR 0 6
65685: PUSH
65686: FOR_IN
65687: IFFALSE 65734
// if not IsInArea ( j , mc_parking [ i ] ) then
65689: LD_VAR 0 3
65693: PPUSH
65694: LD_EXP 71
65698: PUSH
65699: LD_VAR 0 2
65703: ARRAY
65704: PPUSH
65705: CALL_OW 308
65709: NOT
65710: IFFALSE 65732
// ComMoveToArea ( j , mc_parking [ i ] ) ;
65712: LD_VAR 0 3
65716: PPUSH
65717: LD_EXP 71
65721: PUSH
65722: LD_VAR 0 2
65726: ARRAY
65727: PPUSH
65728: CALL_OW 113
65732: GO 65686
65734: POP
65735: POP
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
65736: LD_ADDR_EXP 49
65740: PUSH
65741: LD_EXP 49
65745: PPUSH
65746: LD_VAR 0 2
65750: PPUSH
65751: EMPTY
65752: PPUSH
65753: CALL_OW 1
65757: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
65758: LD_VAR 0 2
65762: PPUSH
65763: LD_INT 101
65765: PPUSH
65766: CALL 60660 0 2
// continue ;
65770: GO 65571
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
65772: LD_ADDR_EXP 53
65776: PUSH
65777: LD_EXP 53
65781: PPUSH
65782: LD_VAR 0 2
65786: PPUSH
65787: EMPTY
65788: PPUSH
65789: CALL_OW 1
65793: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
65794: LD_VAR 0 2
65798: PPUSH
65799: LD_INT 103
65801: PPUSH
65802: CALL 60660 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) diff ( mc_need_heal [ i ] [ 1 ] union mc_need_heal [ i ] [ 2 ] ) ;
65806: LD_ADDR_VAR 0 5
65810: PUSH
65811: LD_EXP 47
65815: PUSH
65816: LD_VAR 0 2
65820: ARRAY
65821: PUSH
65822: LD_EXP 76
65826: PUSH
65827: LD_VAR 0 2
65831: ARRAY
65832: UNION
65833: PPUSH
65834: LD_INT 2
65836: PUSH
65837: LD_INT 25
65839: PUSH
65840: LD_INT 2
65842: PUSH
65843: EMPTY
65844: LIST
65845: LIST
65846: PUSH
65847: LD_INT 25
65849: PUSH
65850: LD_INT 16
65852: PUSH
65853: EMPTY
65854: LIST
65855: LIST
65856: PUSH
65857: EMPTY
65858: LIST
65859: LIST
65860: LIST
65861: PUSH
65862: EMPTY
65863: LIST
65864: PPUSH
65865: CALL_OW 72
65869: PUSH
65870: LD_EXP 50
65874: PUSH
65875: LD_VAR 0 2
65879: ARRAY
65880: PUSH
65881: LD_INT 1
65883: ARRAY
65884: PUSH
65885: LD_EXP 50
65889: PUSH
65890: LD_VAR 0 2
65894: ARRAY
65895: PUSH
65896: LD_INT 2
65898: ARRAY
65899: UNION
65900: DIFF
65901: ST_TO_ADDR
// cranes := UnitFilter ( mc_vehicles [ i ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , ar_crane ] ] ) ;
65902: LD_ADDR_VAR 0 6
65906: PUSH
65907: LD_EXP 66
65911: PUSH
65912: LD_VAR 0 2
65916: ARRAY
65917: PPUSH
65918: LD_INT 2
65920: PUSH
65921: LD_INT 34
65923: PUSH
65924: LD_INT 13
65926: PUSH
65927: EMPTY
65928: LIST
65929: LIST
65930: PUSH
65931: LD_INT 34
65933: PUSH
65934: LD_INT 52
65936: PUSH
65937: EMPTY
65938: LIST
65939: LIST
65940: PUSH
65941: LD_INT 34
65943: PUSH
65944: LD_EXP 35
65948: PUSH
65949: EMPTY
65950: LIST
65951: LIST
65952: PUSH
65953: EMPTY
65954: LIST
65955: LIST
65956: LIST
65957: LIST
65958: PPUSH
65959: CALL_OW 72
65963: ST_TO_ADDR
// if cranes then
65964: LD_VAR 0 6
65968: IFFALSE 66104
// begin for j in cranes do
65970: LD_ADDR_VAR 0 3
65974: PUSH
65975: LD_VAR 0 6
65979: PUSH
65980: FOR_IN
65981: IFFALSE 66102
// begin if GetLives ( j ) = 1000 and not HasTask ( j ) then
65983: LD_VAR 0 3
65987: PPUSH
65988: CALL_OW 256
65992: PUSH
65993: LD_INT 1000
65995: EQUAL
65996: PUSH
65997: LD_VAR 0 3
66001: PPUSH
66002: CALL_OW 314
66006: NOT
66007: AND
66008: IFFALSE 66042
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) else
66010: LD_VAR 0 3
66014: PPUSH
66015: LD_EXP 48
66019: PUSH
66020: LD_VAR 0 2
66024: ARRAY
66025: PPUSH
66026: LD_VAR 0 3
66030: PPUSH
66031: CALL_OW 74
66035: PPUSH
66036: CALL_OW 130
66040: GO 66100
// if GetLives ( j ) < 500 and not IsInArea ( j , mc_parking [ i ] ) then
66042: LD_VAR 0 3
66046: PPUSH
66047: CALL_OW 256
66051: PUSH
66052: LD_INT 500
66054: LESS
66055: PUSH
66056: LD_VAR 0 3
66060: PPUSH
66061: LD_EXP 71
66065: PUSH
66066: LD_VAR 0 2
66070: ARRAY
66071: PPUSH
66072: CALL_OW 308
66076: NOT
66077: AND
66078: IFFALSE 66100
// ComMoveToArea ( j , mc_parking [ i ] ) ;
66080: LD_VAR 0 3
66084: PPUSH
66085: LD_EXP 71
66089: PUSH
66090: LD_VAR 0 2
66094: ARRAY
66095: PPUSH
66096: CALL_OW 113
// end ;
66100: GO 65980
66102: POP
66103: POP
// end ; if tmp > 3 then
66104: LD_VAR 0 5
66108: PUSH
66109: LD_INT 3
66111: GREATER
66112: IFFALSE 66132
// tmp := ShrinkArray ( tmp , 4 ) ;
66114: LD_ADDR_VAR 0 5
66118: PUSH
66119: LD_VAR 0 5
66123: PPUSH
66124: LD_INT 4
66126: PPUSH
66127: CALL 55673 0 2
66131: ST_TO_ADDR
// if not tmp then
66132: LD_VAR 0 5
66136: NOT
66137: IFFALSE 66141
// continue ;
66139: GO 65571
// for j in tmp do
66141: LD_ADDR_VAR 0 3
66145: PUSH
66146: LD_VAR 0 5
66150: PUSH
66151: FOR_IN
66152: IFFALSE 66411
// begin if IsInUnit ( j ) then
66154: LD_VAR 0 3
66158: PPUSH
66159: CALL_OW 310
66163: IFFALSE 66174
// ComExitBuilding ( j ) ;
66165: LD_VAR 0 3
66169: PPUSH
66170: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
66174: LD_VAR 0 3
66178: PUSH
66179: LD_EXP 49
66183: PUSH
66184: LD_VAR 0 2
66188: ARRAY
66189: IN
66190: NOT
66191: IFFALSE 66249
// begin SetTag ( j , 101 ) ;
66193: LD_VAR 0 3
66197: PPUSH
66198: LD_INT 101
66200: PPUSH
66201: CALL_OW 109
// mc_building_repairs := ReplaceIn ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
66205: LD_ADDR_EXP 49
66209: PUSH
66210: LD_EXP 49
66214: PPUSH
66215: LD_VAR 0 2
66219: PUSH
66220: LD_EXP 49
66224: PUSH
66225: LD_VAR 0 2
66229: ARRAY
66230: PUSH
66231: LD_INT 1
66233: PLUS
66234: PUSH
66235: EMPTY
66236: LIST
66237: LIST
66238: PPUSH
66239: LD_VAR 0 3
66243: PPUSH
66244: CALL 24315 0 3
66248: ST_TO_ADDR
// end ; wait ( 1 ) ;
66249: LD_INT 1
66251: PPUSH
66252: CALL_OW 67
// to_repair_tmp := mc_building_need_repair [ i ] ;
66256: LD_ADDR_VAR 0 7
66260: PUSH
66261: LD_EXP 48
66265: PUSH
66266: LD_VAR 0 2
66270: ARRAY
66271: ST_TO_ADDR
// if mc_scan [ i ] then
66272: LD_EXP 70
66276: PUSH
66277: LD_VAR 0 2
66281: ARRAY
66282: IFFALSE 66344
// to_repair_tmp := UnitFilter ( mc_building_need_repair [ i ] , [ f_not , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_breastwork ] ] ) ;
66284: LD_ADDR_VAR 0 7
66288: PUSH
66289: LD_EXP 48
66293: PUSH
66294: LD_VAR 0 2
66298: ARRAY
66299: PPUSH
66300: LD_INT 3
66302: PUSH
66303: LD_INT 30
66305: PUSH
66306: LD_INT 32
66308: PUSH
66309: EMPTY
66310: LIST
66311: LIST
66312: PUSH
66313: LD_INT 30
66315: PUSH
66316: LD_INT 33
66318: PUSH
66319: EMPTY
66320: LIST
66321: LIST
66322: PUSH
66323: LD_INT 30
66325: PUSH
66326: LD_INT 31
66328: PUSH
66329: EMPTY
66330: LIST
66331: LIST
66332: PUSH
66333: EMPTY
66334: LIST
66335: LIST
66336: LIST
66337: LIST
66338: PPUSH
66339: CALL_OW 72
66343: ST_TO_ADDR
// if not to_repair_tmp then
66344: LD_VAR 0 7
66348: NOT
66349: IFFALSE 66353
// continue ;
66351: GO 66151
// to_repair := NearestUnitToUnit ( to_repair_tmp , j ) ;
66353: LD_ADDR_VAR 0 8
66357: PUSH
66358: LD_VAR 0 7
66362: PPUSH
66363: LD_VAR 0 3
66367: PPUSH
66368: CALL_OW 74
66372: ST_TO_ADDR
// if DangerAtRange ( to_repair , 16 ) [ 4 ] < 10 then
66373: LD_VAR 0 8
66377: PPUSH
66378: LD_INT 16
66380: PPUSH
66381: CALL 26908 0 2
66385: PUSH
66386: LD_INT 4
66388: ARRAY
66389: PUSH
66390: LD_INT 10
66392: LESS
66393: IFFALSE 66409
// ComRepairBuilding ( j , to_repair ) ;
66395: LD_VAR 0 3
66399: PPUSH
66400: LD_VAR 0 8
66404: PPUSH
66405: CALL_OW 130
// end ;
66409: GO 66151
66411: POP
66412: POP
// end ;
66413: GO 65571
66415: POP
66416: POP
// end ;
66417: LD_VAR 0 1
66421: RET
// export function MC_Heal ; var i , j , tmp ; begin
66422: LD_INT 0
66424: PPUSH
66425: PPUSH
66426: PPUSH
66427: PPUSH
// if not mc_bases then
66428: LD_EXP 47
66432: NOT
66433: IFFALSE 66437
// exit ;
66435: GO 66839
// for i = 1 to mc_bases do
66437: LD_ADDR_VAR 0 2
66441: PUSH
66442: DOUBLE
66443: LD_INT 1
66445: DEC
66446: ST_TO_ADDR
66447: LD_EXP 47
66451: PUSH
66452: FOR_TO
66453: IFFALSE 66837
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
66455: LD_EXP 50
66459: PUSH
66460: LD_VAR 0 2
66464: ARRAY
66465: PUSH
66466: LD_INT 1
66468: ARRAY
66469: NOT
66470: PUSH
66471: LD_EXP 50
66475: PUSH
66476: LD_VAR 0 2
66480: ARRAY
66481: PUSH
66482: LD_INT 2
66484: ARRAY
66485: NOT
66486: AND
66487: IFFALSE 66525
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
66489: LD_ADDR_EXP 51
66493: PUSH
66494: LD_EXP 51
66498: PPUSH
66499: LD_VAR 0 2
66503: PPUSH
66504: EMPTY
66505: PPUSH
66506: CALL_OW 1
66510: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
66511: LD_VAR 0 2
66515: PPUSH
66516: LD_INT 102
66518: PPUSH
66519: CALL 60660 0 2
// continue ;
66523: GO 66452
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
66525: LD_ADDR_VAR 0 4
66529: PUSH
66530: LD_EXP 47
66534: PUSH
66535: LD_VAR 0 2
66539: ARRAY
66540: PPUSH
66541: LD_INT 25
66543: PUSH
66544: LD_INT 4
66546: PUSH
66547: EMPTY
66548: LIST
66549: LIST
66550: PPUSH
66551: CALL_OW 72
66555: ST_TO_ADDR
// if not tmp then
66556: LD_VAR 0 4
66560: NOT
66561: IFFALSE 66565
// continue ;
66563: GO 66452
// if mc_taming [ i ] then
66565: LD_EXP 78
66569: PUSH
66570: LD_VAR 0 2
66574: ARRAY
66575: IFFALSE 66599
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
66577: LD_ADDR_EXP 78
66581: PUSH
66582: LD_EXP 78
66586: PPUSH
66587: LD_VAR 0 2
66591: PPUSH
66592: EMPTY
66593: PPUSH
66594: CALL_OW 1
66598: ST_TO_ADDR
// for j in tmp do
66599: LD_ADDR_VAR 0 3
66603: PUSH
66604: LD_VAR 0 4
66608: PUSH
66609: FOR_IN
66610: IFFALSE 66833
// begin if IsInUnit ( j ) then
66612: LD_VAR 0 3
66616: PPUSH
66617: CALL_OW 310
66621: IFFALSE 66632
// ComExitBuilding ( j ) ;
66623: LD_VAR 0 3
66627: PPUSH
66628: CALL_OW 122
// if not j in mc_healers [ i ] then
66632: LD_VAR 0 3
66636: PUSH
66637: LD_EXP 51
66641: PUSH
66642: LD_VAR 0 2
66646: ARRAY
66647: IN
66648: NOT
66649: IFFALSE 66695
// mc_healers := ReplaceIn ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
66651: LD_ADDR_EXP 51
66655: PUSH
66656: LD_EXP 51
66660: PPUSH
66661: LD_VAR 0 2
66665: PUSH
66666: LD_EXP 51
66670: PUSH
66671: LD_VAR 0 2
66675: ARRAY
66676: PUSH
66677: LD_INT 1
66679: PLUS
66680: PUSH
66681: EMPTY
66682: LIST
66683: LIST
66684: PPUSH
66685: LD_VAR 0 3
66689: PPUSH
66690: CALL 24315 0 3
66694: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
66695: LD_VAR 0 3
66699: PPUSH
66700: CALL_OW 110
66704: PUSH
66705: LD_INT 102
66707: NONEQUAL
66708: IFFALSE 66722
// SetTag ( j , 102 ) ;
66710: LD_VAR 0 3
66714: PPUSH
66715: LD_INT 102
66717: PPUSH
66718: CALL_OW 109
// Wait ( 3 ) ;
66722: LD_INT 3
66724: PPUSH
66725: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
66729: LD_EXP 50
66733: PUSH
66734: LD_VAR 0 2
66738: ARRAY
66739: PUSH
66740: LD_INT 1
66742: ARRAY
66743: IFFALSE 66775
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
66745: LD_VAR 0 3
66749: PPUSH
66750: LD_EXP 50
66754: PUSH
66755: LD_VAR 0 2
66759: ARRAY
66760: PUSH
66761: LD_INT 1
66763: ARRAY
66764: PUSH
66765: LD_INT 1
66767: ARRAY
66768: PPUSH
66769: CALL_OW 128
66773: GO 66831
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
66775: LD_VAR 0 3
66779: PPUSH
66780: CALL_OW 314
66784: NOT
66785: PUSH
66786: LD_EXP 50
66790: PUSH
66791: LD_VAR 0 2
66795: ARRAY
66796: PUSH
66797: LD_INT 2
66799: ARRAY
66800: AND
66801: IFFALSE 66831
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
66803: LD_VAR 0 3
66807: PPUSH
66808: LD_EXP 50
66812: PUSH
66813: LD_VAR 0 2
66817: ARRAY
66818: PUSH
66819: LD_INT 2
66821: ARRAY
66822: PUSH
66823: LD_INT 1
66825: ARRAY
66826: PPUSH
66827: CALL_OW 128
// end ;
66831: GO 66609
66833: POP
66834: POP
// end ;
66835: GO 66452
66837: POP
66838: POP
// end ;
66839: LD_VAR 0 1
66843: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
66844: LD_INT 0
66846: PPUSH
66847: PPUSH
66848: PPUSH
66849: PPUSH
66850: PPUSH
// if not mc_bases then
66851: LD_EXP 47
66855: NOT
66856: IFFALSE 66860
// exit ;
66858: GO 68003
// for i = 1 to mc_bases do
66860: LD_ADDR_VAR 0 2
66864: PUSH
66865: DOUBLE
66866: LD_INT 1
66868: DEC
66869: ST_TO_ADDR
66870: LD_EXP 47
66874: PUSH
66875: FOR_TO
66876: IFFALSE 68001
// begin if mc_scan [ i ] then
66878: LD_EXP 70
66882: PUSH
66883: LD_VAR 0 2
66887: ARRAY
66888: IFFALSE 66892
// continue ;
66890: GO 66875
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
66892: LD_EXP 52
66896: PUSH
66897: LD_VAR 0 2
66901: ARRAY
66902: NOT
66903: PUSH
66904: LD_EXP 54
66908: PUSH
66909: LD_VAR 0 2
66913: ARRAY
66914: NOT
66915: AND
66916: PUSH
66917: LD_EXP 53
66921: PUSH
66922: LD_VAR 0 2
66926: ARRAY
66927: AND
66928: IFFALSE 66966
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
66930: LD_ADDR_EXP 53
66934: PUSH
66935: LD_EXP 53
66939: PPUSH
66940: LD_VAR 0 2
66944: PPUSH
66945: EMPTY
66946: PPUSH
66947: CALL_OW 1
66951: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
66952: LD_VAR 0 2
66956: PPUSH
66957: LD_INT 103
66959: PPUSH
66960: CALL 60660 0 2
// continue ;
66964: GO 66875
// end ; if mc_construct_list [ i ] then
66966: LD_EXP 54
66970: PUSH
66971: LD_VAR 0 2
66975: ARRAY
66976: IFFALSE 67196
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
66978: LD_ADDR_VAR 0 4
66982: PUSH
66983: LD_EXP 47
66987: PUSH
66988: LD_VAR 0 2
66992: ARRAY
66993: PPUSH
66994: LD_INT 25
66996: PUSH
66997: LD_INT 2
66999: PUSH
67000: EMPTY
67001: LIST
67002: LIST
67003: PPUSH
67004: CALL_OW 72
67008: PUSH
67009: LD_EXP 49
67013: PUSH
67014: LD_VAR 0 2
67018: ARRAY
67019: DIFF
67020: ST_TO_ADDR
// if not tmp then
67021: LD_VAR 0 4
67025: NOT
67026: IFFALSE 67030
// continue ;
67028: GO 66875
// for j in tmp do
67030: LD_ADDR_VAR 0 3
67034: PUSH
67035: LD_VAR 0 4
67039: PUSH
67040: FOR_IN
67041: IFFALSE 67192
// begin if not mc_builders [ i ] then
67043: LD_EXP 53
67047: PUSH
67048: LD_VAR 0 2
67052: ARRAY
67053: NOT
67054: IFFALSE 67112
// begin SetTag ( j , 103 ) ;
67056: LD_VAR 0 3
67060: PPUSH
67061: LD_INT 103
67063: PPUSH
67064: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
67068: LD_ADDR_EXP 53
67072: PUSH
67073: LD_EXP 53
67077: PPUSH
67078: LD_VAR 0 2
67082: PUSH
67083: LD_EXP 53
67087: PUSH
67088: LD_VAR 0 2
67092: ARRAY
67093: PUSH
67094: LD_INT 1
67096: PLUS
67097: PUSH
67098: EMPTY
67099: LIST
67100: LIST
67101: PPUSH
67102: LD_VAR 0 3
67106: PPUSH
67107: CALL 24315 0 3
67111: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
67112: LD_VAR 0 3
67116: PPUSH
67117: CALL_OW 310
67121: IFFALSE 67132
// ComExitBuilding ( j ) ;
67123: LD_VAR 0 3
67127: PPUSH
67128: CALL_OW 122
// wait ( 3 ) ;
67132: LD_INT 3
67134: PPUSH
67135: CALL_OW 67
// if not mc_construct_list [ i ] then
67139: LD_EXP 54
67143: PUSH
67144: LD_VAR 0 2
67148: ARRAY
67149: NOT
67150: IFFALSE 67154
// break ;
67152: GO 67192
// if not HasTask ( j ) then
67154: LD_VAR 0 3
67158: PPUSH
67159: CALL_OW 314
67163: NOT
67164: IFFALSE 67190
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
67166: LD_VAR 0 3
67170: PPUSH
67171: LD_EXP 54
67175: PUSH
67176: LD_VAR 0 2
67180: ARRAY
67181: PUSH
67182: LD_INT 1
67184: ARRAY
67185: PPUSH
67186: CALL 27166 0 2
// end ;
67190: GO 67040
67192: POP
67193: POP
// end else
67194: GO 67999
// if mc_build_list [ i ] then
67196: LD_EXP 52
67200: PUSH
67201: LD_VAR 0 2
67205: ARRAY
67206: IFFALSE 67999
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
67208: LD_ADDR_VAR 0 5
67212: PUSH
67213: LD_EXP 47
67217: PUSH
67218: LD_VAR 0 2
67222: ARRAY
67223: PPUSH
67224: LD_INT 2
67226: PUSH
67227: LD_INT 30
67229: PUSH
67230: LD_INT 0
67232: PUSH
67233: EMPTY
67234: LIST
67235: LIST
67236: PUSH
67237: LD_INT 30
67239: PUSH
67240: LD_INT 1
67242: PUSH
67243: EMPTY
67244: LIST
67245: LIST
67246: PUSH
67247: EMPTY
67248: LIST
67249: LIST
67250: LIST
67251: PPUSH
67252: CALL_OW 72
67256: ST_TO_ADDR
// if depot then
67257: LD_VAR 0 5
67261: IFFALSE 67279
// depot := depot [ 1 ] else
67263: LD_ADDR_VAR 0 5
67267: PUSH
67268: LD_VAR 0 5
67272: PUSH
67273: LD_INT 1
67275: ARRAY
67276: ST_TO_ADDR
67277: GO 67287
// depot := 0 ;
67279: LD_ADDR_VAR 0 5
67283: PUSH
67284: LD_INT 0
67286: ST_TO_ADDR
// if IsExtension ( mc_build_list [ i ] [ 1 ] [ 1 ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) then
67287: LD_EXP 52
67291: PUSH
67292: LD_VAR 0 2
67296: ARRAY
67297: PUSH
67298: LD_INT 1
67300: ARRAY
67301: PUSH
67302: LD_INT 1
67304: ARRAY
67305: PPUSH
67306: CALL 26996 0 1
67310: PUSH
67311: LD_EXP 47
67315: PUSH
67316: LD_VAR 0 2
67320: ARRAY
67321: PPUSH
67322: LD_INT 2
67324: PUSH
67325: LD_INT 30
67327: PUSH
67328: LD_INT 2
67330: PUSH
67331: EMPTY
67332: LIST
67333: LIST
67334: PUSH
67335: LD_INT 30
67337: PUSH
67338: LD_INT 3
67340: PUSH
67341: EMPTY
67342: LIST
67343: LIST
67344: PUSH
67345: EMPTY
67346: LIST
67347: LIST
67348: LIST
67349: PPUSH
67350: CALL_OW 72
67354: NOT
67355: AND
67356: IFFALSE 67461
// begin for j = 1 to mc_build_list [ i ] do
67358: LD_ADDR_VAR 0 3
67362: PUSH
67363: DOUBLE
67364: LD_INT 1
67366: DEC
67367: ST_TO_ADDR
67368: LD_EXP 52
67372: PUSH
67373: LD_VAR 0 2
67377: ARRAY
67378: PUSH
67379: FOR_TO
67380: IFFALSE 67459
// if mc_build_list [ i ] [ j ] [ 1 ] = b_workshop then
67382: LD_EXP 52
67386: PUSH
67387: LD_VAR 0 2
67391: ARRAY
67392: PUSH
67393: LD_VAR 0 3
67397: ARRAY
67398: PUSH
67399: LD_INT 1
67401: ARRAY
67402: PUSH
67403: LD_INT 2
67405: EQUAL
67406: IFFALSE 67457
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , j , 1 , false ) ) ;
67408: LD_ADDR_EXP 52
67412: PUSH
67413: LD_EXP 52
67417: PPUSH
67418: LD_VAR 0 2
67422: PPUSH
67423: LD_EXP 52
67427: PUSH
67428: LD_VAR 0 2
67432: ARRAY
67433: PPUSH
67434: LD_VAR 0 3
67438: PPUSH
67439: LD_INT 1
67441: PPUSH
67442: LD_INT 0
67444: PPUSH
67445: CALL 23733 0 4
67449: PPUSH
67450: CALL_OW 1
67454: ST_TO_ADDR
// break ;
67455: GO 67459
// end ;
67457: GO 67379
67459: POP
67460: POP
// end ; if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilt ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
67461: LD_EXP 52
67465: PUSH
67466: LD_VAR 0 2
67470: ARRAY
67471: PUSH
67472: LD_INT 1
67474: ARRAY
67475: PUSH
67476: LD_INT 1
67478: ARRAY
67479: PUSH
67480: LD_INT 0
67482: EQUAL
67483: PUSH
67484: LD_VAR 0 5
67488: PUSH
67489: LD_VAR 0 5
67493: PPUSH
67494: LD_EXP 52
67498: PUSH
67499: LD_VAR 0 2
67503: ARRAY
67504: PUSH
67505: LD_INT 1
67507: ARRAY
67508: PUSH
67509: LD_INT 1
67511: ARRAY
67512: PPUSH
67513: LD_EXP 52
67517: PUSH
67518: LD_VAR 0 2
67522: ARRAY
67523: PUSH
67524: LD_INT 1
67526: ARRAY
67527: PUSH
67528: LD_INT 2
67530: ARRAY
67531: PPUSH
67532: LD_EXP 52
67536: PUSH
67537: LD_VAR 0 2
67541: ARRAY
67542: PUSH
67543: LD_INT 1
67545: ARRAY
67546: PUSH
67547: LD_INT 3
67549: ARRAY
67550: PPUSH
67551: LD_EXP 52
67555: PUSH
67556: LD_VAR 0 2
67560: ARRAY
67561: PUSH
67562: LD_INT 1
67564: ARRAY
67565: PUSH
67566: LD_INT 4
67568: ARRAY
67569: PPUSH
67570: CALL 31730 0 5
67574: AND
67575: OR
67576: IFFALSE 67857
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
67578: LD_ADDR_VAR 0 4
67582: PUSH
67583: LD_EXP 47
67587: PUSH
67588: LD_VAR 0 2
67592: ARRAY
67593: PPUSH
67594: LD_INT 25
67596: PUSH
67597: LD_INT 2
67599: PUSH
67600: EMPTY
67601: LIST
67602: LIST
67603: PPUSH
67604: CALL_OW 72
67608: PUSH
67609: LD_EXP 49
67613: PUSH
67614: LD_VAR 0 2
67618: ARRAY
67619: DIFF
67620: ST_TO_ADDR
// if not tmp then
67621: LD_VAR 0 4
67625: NOT
67626: IFFALSE 67630
// continue ;
67628: GO 66875
// for j in tmp do
67630: LD_ADDR_VAR 0 3
67634: PUSH
67635: LD_VAR 0 4
67639: PUSH
67640: FOR_IN
67641: IFFALSE 67853
// begin if not mc_builders [ i ] then
67643: LD_EXP 53
67647: PUSH
67648: LD_VAR 0 2
67652: ARRAY
67653: NOT
67654: IFFALSE 67712
// begin SetTag ( j , 103 ) ;
67656: LD_VAR 0 3
67660: PPUSH
67661: LD_INT 103
67663: PPUSH
67664: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
67668: LD_ADDR_EXP 53
67672: PUSH
67673: LD_EXP 53
67677: PPUSH
67678: LD_VAR 0 2
67682: PUSH
67683: LD_EXP 53
67687: PUSH
67688: LD_VAR 0 2
67692: ARRAY
67693: PUSH
67694: LD_INT 1
67696: PLUS
67697: PUSH
67698: EMPTY
67699: LIST
67700: LIST
67701: PPUSH
67702: LD_VAR 0 3
67706: PPUSH
67707: CALL 24315 0 3
67711: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
67712: LD_VAR 0 3
67716: PPUSH
67717: CALL_OW 310
67721: IFFALSE 67732
// ComExitBuilding ( j ) ;
67723: LD_VAR 0 3
67727: PPUSH
67728: CALL_OW 122
// wait ( 3 ) ;
67732: LD_INT 3
67734: PPUSH
67735: CALL_OW 67
// if not mc_build_list [ i ] then
67739: LD_EXP 52
67743: PUSH
67744: LD_VAR 0 2
67748: ARRAY
67749: NOT
67750: IFFALSE 67754
// break ;
67752: GO 67853
// if not HasTask ( j ) then
67754: LD_VAR 0 3
67758: PPUSH
67759: CALL_OW 314
67763: NOT
67764: IFFALSE 67851
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
67766: LD_VAR 0 3
67770: PPUSH
67771: LD_EXP 52
67775: PUSH
67776: LD_VAR 0 2
67780: ARRAY
67781: PUSH
67782: LD_INT 1
67784: ARRAY
67785: PUSH
67786: LD_INT 1
67788: ARRAY
67789: PPUSH
67790: LD_EXP 52
67794: PUSH
67795: LD_VAR 0 2
67799: ARRAY
67800: PUSH
67801: LD_INT 1
67803: ARRAY
67804: PUSH
67805: LD_INT 2
67807: ARRAY
67808: PPUSH
67809: LD_EXP 52
67813: PUSH
67814: LD_VAR 0 2
67818: ARRAY
67819: PUSH
67820: LD_INT 1
67822: ARRAY
67823: PUSH
67824: LD_INT 3
67826: ARRAY
67827: PPUSH
67828: LD_EXP 52
67832: PUSH
67833: LD_VAR 0 2
67837: ARRAY
67838: PUSH
67839: LD_INT 1
67841: ARRAY
67842: PUSH
67843: LD_INT 4
67845: ARRAY
67846: PPUSH
67847: CALL_OW 145
// end ;
67851: GO 67640
67853: POP
67854: POP
// end else
67855: GO 67999
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
67857: LD_EXP 47
67861: PUSH
67862: LD_VAR 0 2
67866: ARRAY
67867: PPUSH
67868: LD_EXP 52
67872: PUSH
67873: LD_VAR 0 2
67877: ARRAY
67878: PUSH
67879: LD_INT 1
67881: ARRAY
67882: PUSH
67883: LD_INT 1
67885: ARRAY
67886: PPUSH
67887: LD_EXP 52
67891: PUSH
67892: LD_VAR 0 2
67896: ARRAY
67897: PUSH
67898: LD_INT 1
67900: ARRAY
67901: PUSH
67902: LD_INT 2
67904: ARRAY
67905: PPUSH
67906: LD_EXP 52
67910: PUSH
67911: LD_VAR 0 2
67915: ARRAY
67916: PUSH
67917: LD_INT 1
67919: ARRAY
67920: PUSH
67921: LD_INT 3
67923: ARRAY
67924: PPUSH
67925: LD_EXP 52
67929: PUSH
67930: LD_VAR 0 2
67934: ARRAY
67935: PUSH
67936: LD_INT 1
67938: ARRAY
67939: PUSH
67940: LD_INT 4
67942: ARRAY
67943: PPUSH
67944: CALL 31066 0 5
67948: NOT
67949: IFFALSE 67999
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
67951: LD_ADDR_EXP 52
67955: PUSH
67956: LD_EXP 52
67960: PPUSH
67961: LD_VAR 0 2
67965: PPUSH
67966: LD_EXP 52
67970: PUSH
67971: LD_VAR 0 2
67975: ARRAY
67976: PPUSH
67977: LD_INT 1
67979: PPUSH
67980: LD_INT 1
67982: NEG
67983: PPUSH
67984: LD_INT 0
67986: PPUSH
67987: CALL 23733 0 4
67991: PPUSH
67992: CALL_OW 1
67996: ST_TO_ADDR
// continue ;
67997: GO 66875
// end ; end ; end ;
67999: GO 66875
68001: POP
68002: POP
// end ;
68003: LD_VAR 0 1
68007: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
68008: LD_INT 0
68010: PPUSH
68011: PPUSH
68012: PPUSH
68013: PPUSH
68014: PPUSH
68015: PPUSH
// if not mc_bases then
68016: LD_EXP 47
68020: NOT
68021: IFFALSE 68025
// exit ;
68023: GO 68452
// for i = 1 to mc_bases do
68025: LD_ADDR_VAR 0 2
68029: PUSH
68030: DOUBLE
68031: LD_INT 1
68033: DEC
68034: ST_TO_ADDR
68035: LD_EXP 47
68039: PUSH
68040: FOR_TO
68041: IFFALSE 68450
// begin tmp := mc_build_upgrade [ i ] ;
68043: LD_ADDR_VAR 0 4
68047: PUSH
68048: LD_EXP 79
68052: PUSH
68053: LD_VAR 0 2
68057: ARRAY
68058: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
68059: LD_ADDR_VAR 0 6
68063: PUSH
68064: LD_EXP 80
68068: PUSH
68069: LD_VAR 0 2
68073: ARRAY
68074: PPUSH
68075: LD_INT 2
68077: PUSH
68078: LD_INT 30
68080: PUSH
68081: LD_INT 6
68083: PUSH
68084: EMPTY
68085: LIST
68086: LIST
68087: PUSH
68088: LD_INT 30
68090: PUSH
68091: LD_INT 7
68093: PUSH
68094: EMPTY
68095: LIST
68096: LIST
68097: PUSH
68098: EMPTY
68099: LIST
68100: LIST
68101: LIST
68102: PPUSH
68103: CALL_OW 72
68107: ST_TO_ADDR
// if not tmp and not lab then
68108: LD_VAR 0 4
68112: NOT
68113: PUSH
68114: LD_VAR 0 6
68118: NOT
68119: AND
68120: IFFALSE 68124
// continue ;
68122: GO 68040
// if tmp then
68124: LD_VAR 0 4
68128: IFFALSE 68248
// for j in tmp do
68130: LD_ADDR_VAR 0 3
68134: PUSH
68135: LD_VAR 0 4
68139: PUSH
68140: FOR_IN
68141: IFFALSE 68246
// begin if UpgradeCost ( j ) then
68143: LD_VAR 0 3
68147: PPUSH
68148: CALL 30726 0 1
68152: IFFALSE 68244
// begin ComUpgrade ( j ) ;
68154: LD_VAR 0 3
68158: PPUSH
68159: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
68163: LD_ADDR_EXP 79
68167: PUSH
68168: LD_EXP 79
68172: PPUSH
68173: LD_VAR 0 2
68177: PPUSH
68178: LD_EXP 79
68182: PUSH
68183: LD_VAR 0 2
68187: ARRAY
68188: PUSH
68189: LD_VAR 0 3
68193: DIFF
68194: PPUSH
68195: CALL_OW 1
68199: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
68200: LD_ADDR_EXP 54
68204: PUSH
68205: LD_EXP 54
68209: PPUSH
68210: LD_VAR 0 2
68214: PUSH
68215: LD_EXP 54
68219: PUSH
68220: LD_VAR 0 2
68224: ARRAY
68225: PUSH
68226: LD_INT 1
68228: PLUS
68229: PUSH
68230: EMPTY
68231: LIST
68232: LIST
68233: PPUSH
68234: LD_VAR 0 3
68238: PPUSH
68239: CALL 24315 0 3
68243: ST_TO_ADDR
// end ; end ;
68244: GO 68140
68246: POP
68247: POP
// if not lab or not mc_lab_upgrade [ i ] then
68248: LD_VAR 0 6
68252: NOT
68253: PUSH
68254: LD_EXP 81
68258: PUSH
68259: LD_VAR 0 2
68263: ARRAY
68264: NOT
68265: OR
68266: IFFALSE 68270
// continue ;
68268: GO 68040
// for j in lab do
68270: LD_ADDR_VAR 0 3
68274: PUSH
68275: LD_VAR 0 6
68279: PUSH
68280: FOR_IN
68281: IFFALSE 68446
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
68283: LD_VAR 0 3
68287: PPUSH
68288: CALL_OW 266
68292: PUSH
68293: LD_INT 6
68295: PUSH
68296: LD_INT 7
68298: PUSH
68299: EMPTY
68300: LIST
68301: LIST
68302: IN
68303: PUSH
68304: LD_VAR 0 3
68308: PPUSH
68309: CALL_OW 461
68313: PUSH
68314: LD_INT 1
68316: NONEQUAL
68317: AND
68318: IFFALSE 68444
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
68320: LD_VAR 0 3
68324: PPUSH
68325: LD_EXP 81
68329: PUSH
68330: LD_VAR 0 2
68334: ARRAY
68335: PUSH
68336: LD_INT 1
68338: ARRAY
68339: PPUSH
68340: CALL 30931 0 2
68344: IFFALSE 68444
// begin ComCancel ( j ) ;
68346: LD_VAR 0 3
68350: PPUSH
68351: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
68355: LD_VAR 0 3
68359: PPUSH
68360: LD_EXP 81
68364: PUSH
68365: LD_VAR 0 2
68369: ARRAY
68370: PUSH
68371: LD_INT 1
68373: ARRAY
68374: PPUSH
68375: CALL_OW 207
// if not j in mc_construct_list [ i ] then
68379: LD_VAR 0 3
68383: PUSH
68384: LD_EXP 54
68388: PUSH
68389: LD_VAR 0 2
68393: ARRAY
68394: IN
68395: NOT
68396: IFFALSE 68442
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
68398: LD_ADDR_EXP 54
68402: PUSH
68403: LD_EXP 54
68407: PPUSH
68408: LD_VAR 0 2
68412: PUSH
68413: LD_EXP 54
68417: PUSH
68418: LD_VAR 0 2
68422: ARRAY
68423: PUSH
68424: LD_INT 1
68426: PLUS
68427: PUSH
68428: EMPTY
68429: LIST
68430: LIST
68431: PPUSH
68432: LD_VAR 0 3
68436: PPUSH
68437: CALL 24315 0 3
68441: ST_TO_ADDR
// break ;
68442: GO 68446
// end ; end ; end ;
68444: GO 68280
68446: POP
68447: POP
// end ;
68448: GO 68040
68450: POP
68451: POP
// end ;
68452: LD_VAR 0 1
68456: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , tmp2 , t , tw , busy , weapon ; begin
68457: LD_INT 0
68459: PPUSH
68460: PPUSH
68461: PPUSH
68462: PPUSH
68463: PPUSH
68464: PPUSH
68465: PPUSH
68466: PPUSH
68467: PPUSH
// if not mc_bases then
68468: LD_EXP 47
68472: NOT
68473: IFFALSE 68477
// exit ;
68475: GO 68882
// for i = 1 to mc_bases do
68477: LD_ADDR_VAR 0 2
68481: PUSH
68482: DOUBLE
68483: LD_INT 1
68485: DEC
68486: ST_TO_ADDR
68487: LD_EXP 47
68491: PUSH
68492: FOR_TO
68493: IFFALSE 68880
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
68495: LD_EXP 55
68499: PUSH
68500: LD_VAR 0 2
68504: ARRAY
68505: NOT
68506: PUSH
68507: LD_EXP 47
68511: PUSH
68512: LD_VAR 0 2
68516: ARRAY
68517: PPUSH
68518: LD_INT 30
68520: PUSH
68521: LD_INT 3
68523: PUSH
68524: EMPTY
68525: LIST
68526: LIST
68527: PPUSH
68528: CALL_OW 72
68532: NOT
68533: OR
68534: IFFALSE 68538
// continue ;
68536: GO 68492
// busy := false ;
68538: LD_ADDR_VAR 0 8
68542: PUSH
68543: LD_INT 0
68545: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
68546: LD_ADDR_VAR 0 4
68550: PUSH
68551: LD_EXP 47
68555: PUSH
68556: LD_VAR 0 2
68560: ARRAY
68561: PPUSH
68562: LD_INT 30
68564: PUSH
68565: LD_INT 3
68567: PUSH
68568: EMPTY
68569: LIST
68570: LIST
68571: PPUSH
68572: CALL_OW 72
68576: ST_TO_ADDR
// t := UnitFilter ( mc_turret_list [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ;
68577: LD_ADDR_VAR 0 6
68581: PUSH
68582: LD_EXP 55
68586: PUSH
68587: LD_VAR 0 2
68591: ARRAY
68592: PPUSH
68593: LD_INT 2
68595: PUSH
68596: LD_INT 30
68598: PUSH
68599: LD_INT 32
68601: PUSH
68602: EMPTY
68603: LIST
68604: LIST
68605: PUSH
68606: LD_INT 30
68608: PUSH
68609: LD_INT 33
68611: PUSH
68612: EMPTY
68613: LIST
68614: LIST
68615: PUSH
68616: EMPTY
68617: LIST
68618: LIST
68619: LIST
68620: PPUSH
68621: CALL_OW 72
68625: ST_TO_ADDR
// if not t then
68626: LD_VAR 0 6
68630: NOT
68631: IFFALSE 68635
// continue ;
68633: GO 68492
// for j in tmp do
68635: LD_ADDR_VAR 0 3
68639: PUSH
68640: LD_VAR 0 4
68644: PUSH
68645: FOR_IN
68646: IFFALSE 68676
// if not BuildingStatus ( j ) = bs_idle then
68648: LD_VAR 0 3
68652: PPUSH
68653: CALL_OW 461
68657: PUSH
68658: LD_INT 2
68660: EQUAL
68661: NOT
68662: IFFALSE 68674
// begin busy := true ;
68664: LD_ADDR_VAR 0 8
68668: PUSH
68669: LD_INT 1
68671: ST_TO_ADDR
// break ;
68672: GO 68676
// end ;
68674: GO 68645
68676: POP
68677: POP
// if busy then
68678: LD_VAR 0 8
68682: IFFALSE 68686
// continue ;
68684: GO 68492
// tw := UnitFilter ( t , [ f_bweapon , 0 ] ) ;
68686: LD_ADDR_VAR 0 7
68690: PUSH
68691: LD_VAR 0 6
68695: PPUSH
68696: LD_INT 35
68698: PUSH
68699: LD_INT 0
68701: PUSH
68702: EMPTY
68703: LIST
68704: LIST
68705: PPUSH
68706: CALL_OW 72
68710: ST_TO_ADDR
// if tw then
68711: LD_VAR 0 7
68715: IFFALSE 68792
// begin tw := tw [ 1 ] ;
68717: LD_ADDR_VAR 0 7
68721: PUSH
68722: LD_VAR 0 7
68726: PUSH
68727: LD_INT 1
68729: ARRAY
68730: ST_TO_ADDR
// weapon := GetTurretWeapon ( tw , mc_scan_area [ i ] ) ;
68731: LD_ADDR_VAR 0 9
68735: PUSH
68736: LD_VAR 0 7
68740: PPUSH
68741: LD_EXP 72
68745: PUSH
68746: LD_VAR 0 2
68750: ARRAY
68751: PPUSH
68752: CALL 29285 0 2
68756: ST_TO_ADDR
// if mc_allowed_tower_weapons [ i ] then
68757: LD_EXP 86
68761: PUSH
68762: LD_VAR 0 2
68766: ARRAY
68767: IFFALSE 68790
// if not weapon in mc_allowed_tower_weapons [ i ] then
68769: LD_VAR 0 9
68773: PUSH
68774: LD_EXP 86
68778: PUSH
68779: LD_VAR 0 2
68783: ARRAY
68784: IN
68785: NOT
68786: IFFALSE 68790
// continue ;
68788: GO 68492
// end else
68790: GO 68855
// begin tmp2 := UpgradeTurretsWeapon ( mc_turret_list [ i ] , tmp ) ;
68792: LD_ADDR_VAR 0 5
68796: PUSH
68797: LD_EXP 55
68801: PUSH
68802: LD_VAR 0 2
68806: ARRAY
68807: PPUSH
68808: LD_VAR 0 4
68812: PPUSH
68813: CALL 54906 0 2
68817: ST_TO_ADDR
// if not tmp2 then
68818: LD_VAR 0 5
68822: NOT
68823: IFFALSE 68827
// continue ;
68825: GO 68492
// tw := tmp2 [ 1 ] ;
68827: LD_ADDR_VAR 0 7
68831: PUSH
68832: LD_VAR 0 5
68836: PUSH
68837: LD_INT 1
68839: ARRAY
68840: ST_TO_ADDR
// weapon := tmp2 [ 2 ] ;
68841: LD_ADDR_VAR 0 9
68845: PUSH
68846: LD_VAR 0 5
68850: PUSH
68851: LD_INT 2
68853: ARRAY
68854: ST_TO_ADDR
// end ; if not weapon then
68855: LD_VAR 0 9
68859: NOT
68860: IFFALSE 68864
// continue ;
68862: GO 68492
// ComPlaceWeapon ( tw , weapon ) ;
68864: LD_VAR 0 7
68868: PPUSH
68869: LD_VAR 0 9
68873: PPUSH
68874: CALL_OW 148
// end ;
68878: GO 68492
68880: POP
68881: POP
// end ;
68882: LD_VAR 0 1
68886: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
68887: LD_INT 0
68889: PPUSH
68890: PPUSH
68891: PPUSH
68892: PPUSH
68893: PPUSH
68894: PPUSH
// if not mc_bases then
68895: LD_EXP 47
68899: NOT
68900: IFFALSE 68904
// exit ;
68902: GO 69680
// for i = 1 to mc_bases do
68904: LD_ADDR_VAR 0 2
68908: PUSH
68909: DOUBLE
68910: LD_INT 1
68912: DEC
68913: ST_TO_ADDR
68914: LD_EXP 47
68918: PUSH
68919: FOR_TO
68920: IFFALSE 69678
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] or mc_scan [ i ] then
68922: LD_EXP 60
68926: PUSH
68927: LD_VAR 0 2
68931: ARRAY
68932: NOT
68933: PUSH
68934: LD_EXP 60
68938: PUSH
68939: LD_VAR 0 2
68943: ARRAY
68944: PUSH
68945: LD_EXP 61
68949: PUSH
68950: LD_VAR 0 2
68954: ARRAY
68955: EQUAL
68956: OR
68957: PUSH
68958: LD_EXP 70
68962: PUSH
68963: LD_VAR 0 2
68967: ARRAY
68968: OR
68969: IFFALSE 68973
// continue ;
68971: GO 68919
// if mc_miners [ i ] then
68973: LD_EXP 61
68977: PUSH
68978: LD_VAR 0 2
68982: ARRAY
68983: IFFALSE 69365
// begin for j = mc_miners [ i ] downto 1 do
68985: LD_ADDR_VAR 0 3
68989: PUSH
68990: DOUBLE
68991: LD_EXP 61
68995: PUSH
68996: LD_VAR 0 2
69000: ARRAY
69001: INC
69002: ST_TO_ADDR
69003: LD_INT 1
69005: PUSH
69006: FOR_DOWNTO
69007: IFFALSE 69363
// begin if IsDead ( mc_miners [ i ] [ j ] ) or GetClass ( mc_miners [ i ] [ j ] ) <> 1 then
69009: LD_EXP 61
69013: PUSH
69014: LD_VAR 0 2
69018: ARRAY
69019: PUSH
69020: LD_VAR 0 3
69024: ARRAY
69025: PPUSH
69026: CALL_OW 301
69030: PUSH
69031: LD_EXP 61
69035: PUSH
69036: LD_VAR 0 2
69040: ARRAY
69041: PUSH
69042: LD_VAR 0 3
69046: ARRAY
69047: PPUSH
69048: CALL_OW 257
69052: PUSH
69053: LD_INT 1
69055: NONEQUAL
69056: OR
69057: IFFALSE 69120
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
69059: LD_ADDR_VAR 0 5
69063: PUSH
69064: LD_EXP 61
69068: PUSH
69069: LD_VAR 0 2
69073: ARRAY
69074: PUSH
69075: LD_EXP 61
69079: PUSH
69080: LD_VAR 0 2
69084: ARRAY
69085: PUSH
69086: LD_VAR 0 3
69090: ARRAY
69091: DIFF
69092: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
69093: LD_ADDR_EXP 61
69097: PUSH
69098: LD_EXP 61
69102: PPUSH
69103: LD_VAR 0 2
69107: PPUSH
69108: LD_VAR 0 5
69112: PPUSH
69113: CALL_OW 1
69117: ST_TO_ADDR
// continue ;
69118: GO 69006
// end ; if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and not HasTask ( mc_miners [ i ] [ j ] ) then
69120: LD_EXP 61
69124: PUSH
69125: LD_VAR 0 2
69129: ARRAY
69130: PUSH
69131: LD_VAR 0 3
69135: ARRAY
69136: PPUSH
69137: CALL_OW 257
69141: PUSH
69142: LD_INT 1
69144: EQUAL
69145: PUSH
69146: LD_EXP 61
69150: PUSH
69151: LD_VAR 0 2
69155: ARRAY
69156: PUSH
69157: LD_VAR 0 3
69161: ARRAY
69162: PPUSH
69163: CALL_OW 459
69167: NOT
69168: AND
69169: PUSH
69170: LD_EXP 61
69174: PUSH
69175: LD_VAR 0 2
69179: ARRAY
69180: PUSH
69181: LD_VAR 0 3
69185: ARRAY
69186: PPUSH
69187: CALL_OW 314
69191: NOT
69192: AND
69193: IFFALSE 69361
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
69195: LD_EXP 61
69199: PUSH
69200: LD_VAR 0 2
69204: ARRAY
69205: PUSH
69206: LD_VAR 0 3
69210: ARRAY
69211: PPUSH
69212: CALL_OW 310
69216: IFFALSE 69239
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
69218: LD_EXP 61
69222: PUSH
69223: LD_VAR 0 2
69227: ARRAY
69228: PUSH
69229: LD_VAR 0 3
69233: ARRAY
69234: PPUSH
69235: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
69239: LD_EXP 61
69243: PUSH
69244: LD_VAR 0 2
69248: ARRAY
69249: PUSH
69250: LD_VAR 0 3
69254: ARRAY
69255: PPUSH
69256: CALL_OW 314
69260: NOT
69261: IFFALSE 69361
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ j mod mc_mines [ i ] + 1 ] [ 1 ] , mc_mines [ i ] [ j mod mc_mines [ i ] + 1 ] [ 2 ] , 0 ) ;
69263: LD_EXP 61
69267: PUSH
69268: LD_VAR 0 2
69272: ARRAY
69273: PUSH
69274: LD_VAR 0 3
69278: ARRAY
69279: PPUSH
69280: LD_EXP 60
69284: PUSH
69285: LD_VAR 0 2
69289: ARRAY
69290: PUSH
69291: LD_VAR 0 3
69295: PUSH
69296: LD_EXP 60
69300: PUSH
69301: LD_VAR 0 2
69305: ARRAY
69306: MOD
69307: PUSH
69308: LD_INT 1
69310: PLUS
69311: ARRAY
69312: PUSH
69313: LD_INT 1
69315: ARRAY
69316: PPUSH
69317: LD_EXP 60
69321: PUSH
69322: LD_VAR 0 2
69326: ARRAY
69327: PUSH
69328: LD_VAR 0 3
69332: PUSH
69333: LD_EXP 60
69337: PUSH
69338: LD_VAR 0 2
69342: ARRAY
69343: MOD
69344: PUSH
69345: LD_INT 1
69347: PLUS
69348: ARRAY
69349: PUSH
69350: LD_INT 2
69352: ARRAY
69353: PPUSH
69354: LD_INT 0
69356: PPUSH
69357: CALL_OW 193
// end ; end ;
69361: GO 69006
69363: POP
69364: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
69365: LD_ADDR_VAR 0 5
69369: PUSH
69370: LD_EXP 47
69374: PUSH
69375: LD_VAR 0 2
69379: ARRAY
69380: PPUSH
69381: LD_INT 2
69383: PUSH
69384: LD_INT 30
69386: PUSH
69387: LD_INT 4
69389: PUSH
69390: EMPTY
69391: LIST
69392: LIST
69393: PUSH
69394: LD_INT 30
69396: PUSH
69397: LD_INT 5
69399: PUSH
69400: EMPTY
69401: LIST
69402: LIST
69403: PUSH
69404: LD_INT 30
69406: PUSH
69407: LD_INT 32
69409: PUSH
69410: EMPTY
69411: LIST
69412: LIST
69413: PUSH
69414: EMPTY
69415: LIST
69416: LIST
69417: LIST
69418: LIST
69419: PPUSH
69420: CALL_OW 72
69424: ST_TO_ADDR
// if not tmp then
69425: LD_VAR 0 5
69429: NOT
69430: IFFALSE 69434
// continue ;
69432: GO 68919
// list := [ ] ;
69434: LD_ADDR_VAR 0 6
69438: PUSH
69439: EMPTY
69440: ST_TO_ADDR
// for j in tmp do
69441: LD_ADDR_VAR 0 3
69445: PUSH
69446: LD_VAR 0 5
69450: PUSH
69451: FOR_IN
69452: IFFALSE 69521
// begin for k in UnitsInside ( j ) do
69454: LD_ADDR_VAR 0 4
69458: PUSH
69459: LD_VAR 0 3
69463: PPUSH
69464: CALL_OW 313
69468: PUSH
69469: FOR_IN
69470: IFFALSE 69517
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
69472: LD_VAR 0 4
69476: PPUSH
69477: CALL_OW 257
69481: PUSH
69482: LD_INT 1
69484: EQUAL
69485: PUSH
69486: LD_VAR 0 4
69490: PPUSH
69491: CALL_OW 459
69495: NOT
69496: AND
69497: IFFALSE 69515
// list := list ^ k ;
69499: LD_ADDR_VAR 0 6
69503: PUSH
69504: LD_VAR 0 6
69508: PUSH
69509: LD_VAR 0 4
69513: ADD
69514: ST_TO_ADDR
69515: GO 69469
69517: POP
69518: POP
// end ;
69519: GO 69451
69521: POP
69522: POP
// list := list diff mc_miners [ i ] ;
69523: LD_ADDR_VAR 0 6
69527: PUSH
69528: LD_VAR 0 6
69532: PUSH
69533: LD_EXP 61
69537: PUSH
69538: LD_VAR 0 2
69542: ARRAY
69543: DIFF
69544: ST_TO_ADDR
// if not list then
69545: LD_VAR 0 6
69549: NOT
69550: IFFALSE 69554
// continue ;
69552: GO 68919
// k := mc_mines [ i ] - mc_miners [ i ] ;
69554: LD_ADDR_VAR 0 4
69558: PUSH
69559: LD_EXP 60
69563: PUSH
69564: LD_VAR 0 2
69568: ARRAY
69569: PUSH
69570: LD_EXP 61
69574: PUSH
69575: LD_VAR 0 2
69579: ARRAY
69580: MINUS
69581: ST_TO_ADDR
// if k > list then
69582: LD_VAR 0 4
69586: PUSH
69587: LD_VAR 0 6
69591: GREATER
69592: IFFALSE 69604
// k := list ;
69594: LD_ADDR_VAR 0 4
69598: PUSH
69599: LD_VAR 0 6
69603: ST_TO_ADDR
// for j = 1 to k do
69604: LD_ADDR_VAR 0 3
69608: PUSH
69609: DOUBLE
69610: LD_INT 1
69612: DEC
69613: ST_TO_ADDR
69614: LD_VAR 0 4
69618: PUSH
69619: FOR_TO
69620: IFFALSE 69674
// mc_miners := ReplaceIn ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
69622: LD_ADDR_EXP 61
69626: PUSH
69627: LD_EXP 61
69631: PPUSH
69632: LD_VAR 0 2
69636: PUSH
69637: LD_EXP 61
69641: PUSH
69642: LD_VAR 0 2
69646: ARRAY
69647: PUSH
69648: LD_INT 1
69650: PLUS
69651: PUSH
69652: EMPTY
69653: LIST
69654: LIST
69655: PPUSH
69656: LD_VAR 0 6
69660: PUSH
69661: LD_VAR 0 3
69665: ARRAY
69666: PPUSH
69667: CALL 24315 0 3
69671: ST_TO_ADDR
69672: GO 69619
69674: POP
69675: POP
// end ;
69676: GO 68919
69678: POP
69679: POP
// end ;
69680: LD_VAR 0 1
69684: RET
// export function MC_CollectCrates ( ) ; var i , j , k , tmp , target , cargo , depot , fac , components ; begin
69685: LD_INT 0
69687: PPUSH
69688: PPUSH
69689: PPUSH
69690: PPUSH
69691: PPUSH
69692: PPUSH
69693: PPUSH
69694: PPUSH
69695: PPUSH
69696: PPUSH
// if not mc_bases then
69697: LD_EXP 47
69701: NOT
69702: IFFALSE 69706
// exit ;
69704: GO 71456
// for i = 1 to mc_bases do
69706: LD_ADDR_VAR 0 2
69710: PUSH
69711: DOUBLE
69712: LD_INT 1
69714: DEC
69715: ST_TO_ADDR
69716: LD_EXP 47
69720: PUSH
69721: FOR_TO
69722: IFFALSE 71454
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
69724: LD_EXP 47
69728: PUSH
69729: LD_VAR 0 2
69733: ARRAY
69734: NOT
69735: PUSH
69736: LD_EXP 54
69740: PUSH
69741: LD_VAR 0 2
69745: ARRAY
69746: OR
69747: IFFALSE 69751
// continue ;
69749: GO 69721
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
69751: LD_EXP 63
69755: PUSH
69756: LD_VAR 0 2
69760: ARRAY
69761: NOT
69762: PUSH
69763: LD_EXP 64
69767: PUSH
69768: LD_VAR 0 2
69772: ARRAY
69773: AND
69774: IFFALSE 69812
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
69776: LD_ADDR_EXP 64
69780: PUSH
69781: LD_EXP 64
69785: PPUSH
69786: LD_VAR 0 2
69790: PPUSH
69791: EMPTY
69792: PPUSH
69793: CALL_OW 1
69797: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
69798: LD_VAR 0 2
69802: PPUSH
69803: LD_INT 107
69805: PPUSH
69806: CALL 60660 0 2
// continue ;
69810: GO 69721
// end ; target := [ ] ;
69812: LD_ADDR_VAR 0 6
69816: PUSH
69817: EMPTY
69818: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
69819: LD_ADDR_VAR 0 3
69823: PUSH
69824: DOUBLE
69825: LD_EXP 63
69829: PUSH
69830: LD_VAR 0 2
69834: ARRAY
69835: INC
69836: ST_TO_ADDR
69837: LD_INT 1
69839: PUSH
69840: FOR_DOWNTO
69841: IFFALSE 70101
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
69843: LD_EXP 63
69847: PUSH
69848: LD_VAR 0 2
69852: ARRAY
69853: PUSH
69854: LD_VAR 0 3
69858: ARRAY
69859: PUSH
69860: LD_INT 2
69862: ARRAY
69863: PPUSH
69864: LD_EXP 63
69868: PUSH
69869: LD_VAR 0 2
69873: ARRAY
69874: PUSH
69875: LD_VAR 0 3
69879: ARRAY
69880: PUSH
69881: LD_INT 3
69883: ARRAY
69884: PPUSH
69885: CALL_OW 488
69889: PUSH
69890: LD_EXP 63
69894: PUSH
69895: LD_VAR 0 2
69899: ARRAY
69900: PUSH
69901: LD_VAR 0 3
69905: ARRAY
69906: PUSH
69907: LD_INT 2
69909: ARRAY
69910: PPUSH
69911: LD_EXP 63
69915: PUSH
69916: LD_VAR 0 2
69920: ARRAY
69921: PUSH
69922: LD_VAR 0 3
69926: ARRAY
69927: PUSH
69928: LD_INT 3
69930: ARRAY
69931: PPUSH
69932: CALL_OW 284
69936: PUSH
69937: LD_INT 0
69939: EQUAL
69940: AND
69941: IFFALSE 69996
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
69943: LD_ADDR_VAR 0 5
69947: PUSH
69948: LD_EXP 63
69952: PUSH
69953: LD_VAR 0 2
69957: ARRAY
69958: PPUSH
69959: LD_VAR 0 3
69963: PPUSH
69964: CALL_OW 3
69968: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
69969: LD_ADDR_EXP 63
69973: PUSH
69974: LD_EXP 63
69978: PPUSH
69979: LD_VAR 0 2
69983: PPUSH
69984: LD_VAR 0 5
69988: PPUSH
69989: CALL_OW 1
69993: ST_TO_ADDR
// continue ;
69994: GO 69840
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 30 ) [ 4 ] = 0 then
69996: LD_EXP 47
70000: PUSH
70001: LD_VAR 0 2
70005: ARRAY
70006: PUSH
70007: LD_INT 1
70009: ARRAY
70010: PPUSH
70011: CALL_OW 255
70015: PPUSH
70016: LD_EXP 63
70020: PUSH
70021: LD_VAR 0 2
70025: ARRAY
70026: PUSH
70027: LD_VAR 0 3
70031: ARRAY
70032: PUSH
70033: LD_INT 2
70035: ARRAY
70036: PPUSH
70037: LD_EXP 63
70041: PUSH
70042: LD_VAR 0 2
70046: ARRAY
70047: PUSH
70048: LD_VAR 0 3
70052: ARRAY
70053: PUSH
70054: LD_INT 3
70056: ARRAY
70057: PPUSH
70058: LD_INT 30
70060: PPUSH
70061: CALL 25211 0 4
70065: PUSH
70066: LD_INT 4
70068: ARRAY
70069: PUSH
70070: LD_INT 0
70072: EQUAL
70073: IFFALSE 70099
// begin target := mc_crates [ i ] [ j ] ;
70075: LD_ADDR_VAR 0 6
70079: PUSH
70080: LD_EXP 63
70084: PUSH
70085: LD_VAR 0 2
70089: ARRAY
70090: PUSH
70091: LD_VAR 0 3
70095: ARRAY
70096: ST_TO_ADDR
// break ;
70097: GO 70101
// end ; end ;
70099: GO 69840
70101: POP
70102: POP
// if not target then
70103: LD_VAR 0 6
70107: NOT
70108: IFFALSE 70112
// continue ;
70110: GO 69721
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
70112: LD_ADDR_VAR 0 7
70116: PUSH
70117: LD_EXP 66
70121: PUSH
70122: LD_VAR 0 2
70126: ARRAY
70127: PPUSH
70128: LD_INT 2
70130: PUSH
70131: LD_INT 3
70133: PUSH
70134: LD_INT 58
70136: PUSH
70137: EMPTY
70138: LIST
70139: PUSH
70140: EMPTY
70141: LIST
70142: LIST
70143: PUSH
70144: LD_INT 61
70146: PUSH
70147: EMPTY
70148: LIST
70149: PUSH
70150: LD_INT 33
70152: PUSH
70153: LD_INT 5
70155: PUSH
70156: EMPTY
70157: LIST
70158: LIST
70159: PUSH
70160: LD_INT 33
70162: PUSH
70163: LD_INT 3
70165: PUSH
70166: EMPTY
70167: LIST
70168: LIST
70169: PUSH
70170: EMPTY
70171: LIST
70172: LIST
70173: LIST
70174: LIST
70175: LIST
70176: PUSH
70177: LD_INT 2
70179: PUSH
70180: LD_INT 34
70182: PUSH
70183: LD_INT 32
70185: PUSH
70186: EMPTY
70187: LIST
70188: LIST
70189: PUSH
70190: LD_INT 34
70192: PUSH
70193: LD_INT 51
70195: PUSH
70196: EMPTY
70197: LIST
70198: LIST
70199: PUSH
70200: LD_INT 34
70202: PUSH
70203: LD_INT 12
70205: PUSH
70206: EMPTY
70207: LIST
70208: LIST
70209: PUSH
70210: EMPTY
70211: LIST
70212: LIST
70213: LIST
70214: LIST
70215: PUSH
70216: EMPTY
70217: LIST
70218: LIST
70219: PPUSH
70220: CALL_OW 72
70224: ST_TO_ADDR
// if not cargo then
70225: LD_VAR 0 7
70229: NOT
70230: IFFALSE 70873
// begin if mc_crates_collector [ i ] < 5 then
70232: LD_EXP 64
70236: PUSH
70237: LD_VAR 0 2
70241: ARRAY
70242: PUSH
70243: LD_INT 5
70245: LESS
70246: IFFALSE 70612
// begin if mc_ape [ i ] then
70248: LD_EXP 76
70252: PUSH
70253: LD_VAR 0 2
70257: ARRAY
70258: IFFALSE 70305
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
70260: LD_ADDR_VAR 0 5
70264: PUSH
70265: LD_EXP 76
70269: PUSH
70270: LD_VAR 0 2
70274: ARRAY
70275: PPUSH
70276: LD_INT 25
70278: PUSH
70279: LD_INT 16
70281: PUSH
70282: EMPTY
70283: LIST
70284: LIST
70285: PUSH
70286: LD_INT 24
70288: PUSH
70289: LD_INT 750
70291: PUSH
70292: EMPTY
70293: LIST
70294: LIST
70295: PUSH
70296: EMPTY
70297: LIST
70298: LIST
70299: PPUSH
70300: CALL_OW 72
70304: ST_TO_ADDR
// if not tmp then
70305: LD_VAR 0 5
70309: NOT
70310: IFFALSE 70357
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
70312: LD_ADDR_VAR 0 5
70316: PUSH
70317: LD_EXP 47
70321: PUSH
70322: LD_VAR 0 2
70326: ARRAY
70327: PPUSH
70328: LD_INT 25
70330: PUSH
70331: LD_INT 2
70333: PUSH
70334: EMPTY
70335: LIST
70336: LIST
70337: PUSH
70338: LD_INT 24
70340: PUSH
70341: LD_INT 750
70343: PUSH
70344: EMPTY
70345: LIST
70346: LIST
70347: PUSH
70348: EMPTY
70349: LIST
70350: LIST
70351: PPUSH
70352: CALL_OW 72
70356: ST_TO_ADDR
// if mc_ape [ i ] and UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) and tmp < 5 then
70357: LD_EXP 76
70361: PUSH
70362: LD_VAR 0 2
70366: ARRAY
70367: PUSH
70368: LD_EXP 47
70372: PUSH
70373: LD_VAR 0 2
70377: ARRAY
70378: PPUSH
70379: LD_INT 25
70381: PUSH
70382: LD_INT 2
70384: PUSH
70385: EMPTY
70386: LIST
70387: LIST
70388: PUSH
70389: LD_INT 24
70391: PUSH
70392: LD_INT 750
70394: PUSH
70395: EMPTY
70396: LIST
70397: LIST
70398: PUSH
70399: EMPTY
70400: LIST
70401: LIST
70402: PPUSH
70403: CALL_OW 72
70407: AND
70408: PUSH
70409: LD_VAR 0 5
70413: PUSH
70414: LD_INT 5
70416: LESS
70417: AND
70418: IFFALSE 70500
// begin for j in UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) do
70420: LD_ADDR_VAR 0 3
70424: PUSH
70425: LD_EXP 47
70429: PUSH
70430: LD_VAR 0 2
70434: ARRAY
70435: PPUSH
70436: LD_INT 25
70438: PUSH
70439: LD_INT 2
70441: PUSH
70442: EMPTY
70443: LIST
70444: LIST
70445: PUSH
70446: LD_INT 24
70448: PUSH
70449: LD_INT 750
70451: PUSH
70452: EMPTY
70453: LIST
70454: LIST
70455: PUSH
70456: EMPTY
70457: LIST
70458: LIST
70459: PPUSH
70460: CALL_OW 72
70464: PUSH
70465: FOR_IN
70466: IFFALSE 70498
// begin tmp := tmp union j ;
70468: LD_ADDR_VAR 0 5
70472: PUSH
70473: LD_VAR 0 5
70477: PUSH
70478: LD_VAR 0 3
70482: UNION
70483: ST_TO_ADDR
// if tmp >= 5 then
70484: LD_VAR 0 5
70488: PUSH
70489: LD_INT 5
70491: GREATEREQUAL
70492: IFFALSE 70496
// break ;
70494: GO 70498
// end ;
70496: GO 70465
70498: POP
70499: POP
// end ; if not tmp then
70500: LD_VAR 0 5
70504: NOT
70505: IFFALSE 70509
// continue ;
70507: GO 69721
// for j in tmp do
70509: LD_ADDR_VAR 0 3
70513: PUSH
70514: LD_VAR 0 5
70518: PUSH
70519: FOR_IN
70520: IFFALSE 70610
// if not GetTag ( j ) then
70522: LD_VAR 0 3
70526: PPUSH
70527: CALL_OW 110
70531: NOT
70532: IFFALSE 70608
// begin mc_crates_collector := ReplaceIn ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
70534: LD_ADDR_EXP 64
70538: PUSH
70539: LD_EXP 64
70543: PPUSH
70544: LD_VAR 0 2
70548: PUSH
70549: LD_EXP 64
70553: PUSH
70554: LD_VAR 0 2
70558: ARRAY
70559: PUSH
70560: LD_INT 1
70562: PLUS
70563: PUSH
70564: EMPTY
70565: LIST
70566: LIST
70567: PPUSH
70568: LD_VAR 0 3
70572: PPUSH
70573: CALL 24315 0 3
70577: ST_TO_ADDR
// SetTag ( j , 107 ) ;
70578: LD_VAR 0 3
70582: PPUSH
70583: LD_INT 107
70585: PPUSH
70586: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
70590: LD_EXP 64
70594: PUSH
70595: LD_VAR 0 2
70599: ARRAY
70600: PUSH
70601: LD_INT 5
70603: GREATEREQUAL
70604: IFFALSE 70608
// break ;
70606: GO 70610
// end ;
70608: GO 70519
70610: POP
70611: POP
// end ; if mc_crates_collector [ i ] and target then
70612: LD_EXP 64
70616: PUSH
70617: LD_VAR 0 2
70621: ARRAY
70622: PUSH
70623: LD_VAR 0 6
70627: AND
70628: IFFALSE 70871
// begin if mc_crates_collector [ i ] < target [ 1 ] then
70630: LD_EXP 64
70634: PUSH
70635: LD_VAR 0 2
70639: ARRAY
70640: PUSH
70641: LD_VAR 0 6
70645: PUSH
70646: LD_INT 1
70648: ARRAY
70649: LESS
70650: IFFALSE 70670
// tmp := mc_crates_collector [ i ] else
70652: LD_ADDR_VAR 0 5
70656: PUSH
70657: LD_EXP 64
70661: PUSH
70662: LD_VAR 0 2
70666: ARRAY
70667: ST_TO_ADDR
70668: GO 70684
// tmp := target [ 1 ] ;
70670: LD_ADDR_VAR 0 5
70674: PUSH
70675: LD_VAR 0 6
70679: PUSH
70680: LD_INT 1
70682: ARRAY
70683: ST_TO_ADDR
// k := 0 ;
70684: LD_ADDR_VAR 0 4
70688: PUSH
70689: LD_INT 0
70691: ST_TO_ADDR
// for j in mc_crates_collector [ i ] do
70692: LD_ADDR_VAR 0 3
70696: PUSH
70697: LD_EXP 64
70701: PUSH
70702: LD_VAR 0 2
70706: ARRAY
70707: PUSH
70708: FOR_IN
70709: IFFALSE 70869
// begin k := k + 1 ;
70711: LD_ADDR_VAR 0 4
70715: PUSH
70716: LD_VAR 0 4
70720: PUSH
70721: LD_INT 1
70723: PLUS
70724: ST_TO_ADDR
// if k > tmp then
70725: LD_VAR 0 4
70729: PUSH
70730: LD_VAR 0 5
70734: GREATER
70735: IFFALSE 70739
// break ;
70737: GO 70869
// if not GetClass ( j ) in [ 2 , 16 ] then
70739: LD_VAR 0 3
70743: PPUSH
70744: CALL_OW 257
70748: PUSH
70749: LD_INT 2
70751: PUSH
70752: LD_INT 16
70754: PUSH
70755: EMPTY
70756: LIST
70757: LIST
70758: IN
70759: NOT
70760: IFFALSE 70813
// begin mc_crates_collector := Replace ( mc_crates_collector , i , mc_crates_collector [ i ] diff j ) ;
70762: LD_ADDR_EXP 64
70766: PUSH
70767: LD_EXP 64
70771: PPUSH
70772: LD_VAR 0 2
70776: PPUSH
70777: LD_EXP 64
70781: PUSH
70782: LD_VAR 0 2
70786: ARRAY
70787: PUSH
70788: LD_VAR 0 3
70792: DIFF
70793: PPUSH
70794: CALL_OW 1
70798: ST_TO_ADDR
// SetTag ( j , 0 ) ;
70799: LD_VAR 0 3
70803: PPUSH
70804: LD_INT 0
70806: PPUSH
70807: CALL_OW 109
// continue ;
70811: GO 70708
// end ; if IsInUnit ( j ) then
70813: LD_VAR 0 3
70817: PPUSH
70818: CALL_OW 310
70822: IFFALSE 70833
// ComExitBuilding ( j ) ;
70824: LD_VAR 0 3
70828: PPUSH
70829: CALL_OW 122
// wait ( 3 ) ;
70833: LD_INT 3
70835: PPUSH
70836: CALL_OW 67
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
70840: LD_VAR 0 3
70844: PPUSH
70845: LD_VAR 0 6
70849: PUSH
70850: LD_INT 2
70852: ARRAY
70853: PPUSH
70854: LD_VAR 0 6
70858: PUSH
70859: LD_INT 3
70861: ARRAY
70862: PPUSH
70863: CALL_OW 117
// end ;
70867: GO 70708
70869: POP
70870: POP
// end ; end else
70871: GO 71452
// begin for j in cargo do
70873: LD_ADDR_VAR 0 3
70877: PUSH
70878: LD_VAR 0 7
70882: PUSH
70883: FOR_IN
70884: IFFALSE 71450
// begin if GetTag ( j ) <> 0 then
70886: LD_VAR 0 3
70890: PPUSH
70891: CALL_OW 110
70895: PUSH
70896: LD_INT 0
70898: NONEQUAL
70899: IFFALSE 70903
// continue ;
70901: GO 70883
// if GetLives ( j ) < 1000 and not IsInArea ( j , mc_parking [ i ] ) then
70903: LD_VAR 0 3
70907: PPUSH
70908: CALL_OW 256
70912: PUSH
70913: LD_INT 1000
70915: LESS
70916: PUSH
70917: LD_VAR 0 3
70921: PPUSH
70922: LD_EXP 71
70926: PUSH
70927: LD_VAR 0 2
70931: ARRAY
70932: PPUSH
70933: CALL_OW 308
70937: NOT
70938: AND
70939: IFFALSE 70961
// ComMoveToArea ( j , mc_parking [ i ] ) ;
70941: LD_VAR 0 3
70945: PPUSH
70946: LD_EXP 71
70950: PUSH
70951: LD_VAR 0 2
70955: ARRAY
70956: PPUSH
70957: CALL_OW 113
// if GetLives ( j ) < 1000 and IsInArea ( j , mc_parking [ i ] ) then
70961: LD_VAR 0 3
70965: PPUSH
70966: CALL_OW 256
70970: PUSH
70971: LD_INT 1000
70973: LESS
70974: PUSH
70975: LD_VAR 0 3
70979: PPUSH
70980: LD_EXP 71
70984: PUSH
70985: LD_VAR 0 2
70989: ARRAY
70990: PPUSH
70991: CALL_OW 308
70995: AND
70996: IFFALSE 71000
// continue ;
70998: GO 70883
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
71000: LD_VAR 0 3
71004: PPUSH
71005: CALL_OW 262
71009: PUSH
71010: LD_INT 2
71012: EQUAL
71013: PUSH
71014: LD_VAR 0 3
71018: PPUSH
71019: CALL_OW 261
71023: PUSH
71024: LD_INT 15
71026: LESS
71027: AND
71028: IFFALSE 71032
// continue ;
71030: GO 70883
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
71032: LD_VAR 0 3
71036: PPUSH
71037: CALL_OW 262
71041: PUSH
71042: LD_INT 1
71044: EQUAL
71045: PUSH
71046: LD_VAR 0 3
71050: PPUSH
71051: CALL_OW 261
71055: PUSH
71056: LD_INT 10
71058: LESS
71059: AND
71060: IFFALSE 71389
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
71062: LD_ADDR_VAR 0 8
71066: PUSH
71067: LD_EXP 47
71071: PUSH
71072: LD_VAR 0 2
71076: ARRAY
71077: PPUSH
71078: LD_INT 2
71080: PUSH
71081: LD_INT 30
71083: PUSH
71084: LD_INT 0
71086: PUSH
71087: EMPTY
71088: LIST
71089: LIST
71090: PUSH
71091: LD_INT 30
71093: PUSH
71094: LD_INT 1
71096: PUSH
71097: EMPTY
71098: LIST
71099: LIST
71100: PUSH
71101: EMPTY
71102: LIST
71103: LIST
71104: LIST
71105: PPUSH
71106: CALL_OW 72
71110: ST_TO_ADDR
// if not depot then
71111: LD_VAR 0 8
71115: NOT
71116: IFFALSE 71120
// continue ;
71118: GO 70883
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
71120: LD_VAR 0 3
71124: PPUSH
71125: LD_VAR 0 8
71129: PPUSH
71130: LD_VAR 0 3
71134: PPUSH
71135: CALL_OW 74
71139: PPUSH
71140: CALL_OW 296
71144: PUSH
71145: LD_INT 6
71147: LESS
71148: IFFALSE 71164
// SetFuel ( j , 100 ) else
71150: LD_VAR 0 3
71154: PPUSH
71155: LD_INT 100
71157: PPUSH
71158: CALL_OW 240
71162: GO 71389
// if GetFuel ( j ) = 0 then
71164: LD_VAR 0 3
71168: PPUSH
71169: CALL_OW 261
71173: PUSH
71174: LD_INT 0
71176: EQUAL
71177: IFFALSE 71389
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
71179: LD_ADDR_EXP 66
71183: PUSH
71184: LD_EXP 66
71188: PPUSH
71189: LD_VAR 0 2
71193: PPUSH
71194: LD_EXP 66
71198: PUSH
71199: LD_VAR 0 2
71203: ARRAY
71204: PUSH
71205: LD_VAR 0 3
71209: DIFF
71210: PPUSH
71211: CALL_OW 1
71215: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
71216: LD_VAR 0 3
71220: PPUSH
71221: CALL_OW 263
71225: PUSH
71226: LD_INT 1
71228: EQUAL
71229: IFFALSE 71245
// ComExitVehicle ( IsInUnit ( j ) ) ;
71231: LD_VAR 0 3
71235: PPUSH
71236: CALL_OW 310
71240: PPUSH
71241: CALL_OW 121
// if GetControl ( j ) = control_remote then
71245: LD_VAR 0 3
71249: PPUSH
71250: CALL_OW 263
71254: PUSH
71255: LD_INT 2
71257: EQUAL
71258: IFFALSE 71269
// ComUnlink ( j ) ;
71260: LD_VAR 0 3
71264: PPUSH
71265: CALL_OW 136
// fac := MC_GetBuildings ( i , b_factory ) ;
71269: LD_ADDR_VAR 0 9
71273: PUSH
71274: LD_VAR 0 2
71278: PPUSH
71279: LD_INT 3
71281: PPUSH
71282: CALL 80764 0 2
71286: ST_TO_ADDR
// if fac then
71287: LD_VAR 0 9
71291: IFFALSE 71387
// begin for k in fac do
71293: LD_ADDR_VAR 0 4
71297: PUSH
71298: LD_VAR 0 9
71302: PUSH
71303: FOR_IN
71304: IFFALSE 71385
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
71306: LD_ADDR_VAR 0 10
71310: PUSH
71311: LD_VAR 0 9
71315: PPUSH
71316: LD_VAR 0 3
71320: PPUSH
71321: CALL_OW 265
71325: PPUSH
71326: LD_VAR 0 3
71330: PPUSH
71331: CALL_OW 262
71335: PPUSH
71336: LD_VAR 0 3
71340: PPUSH
71341: CALL_OW 263
71345: PPUSH
71346: LD_VAR 0 3
71350: PPUSH
71351: CALL_OW 264
71355: PPUSH
71356: CALL 21847 0 5
71360: ST_TO_ADDR
// if components then
71361: LD_VAR 0 10
71365: IFFALSE 71383
// begin MC_InsertProduceList ( i , components ) ;
71367: LD_VAR 0 2
71371: PPUSH
71372: LD_VAR 0 10
71376: PPUSH
71377: CALL 80309 0 2
// break ;
71381: GO 71385
// end ; end ;
71383: GO 71303
71385: POP
71386: POP
// end ; continue ;
71387: GO 70883
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
71389: LD_VAR 0 3
71393: PPUSH
71394: LD_INT 1
71396: PPUSH
71397: CALL_OW 289
71401: PUSH
71402: LD_INT 100
71404: LESS
71405: PUSH
71406: LD_VAR 0 3
71410: PPUSH
71411: CALL_OW 314
71415: NOT
71416: AND
71417: IFFALSE 71446
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
71419: LD_VAR 0 3
71423: PPUSH
71424: LD_VAR 0 6
71428: PUSH
71429: LD_INT 2
71431: ARRAY
71432: PPUSH
71433: LD_VAR 0 6
71437: PUSH
71438: LD_INT 3
71440: ARRAY
71441: PPUSH
71442: CALL_OW 117
// break ;
71446: GO 71450
// end ;
71448: GO 70883
71450: POP
71451: POP
// end ; end ;
71452: GO 69721
71454: POP
71455: POP
// end ;
71456: LD_VAR 0 1
71460: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
71461: LD_INT 0
71463: PPUSH
71464: PPUSH
71465: PPUSH
71466: PPUSH
// if not mc_bases then
71467: LD_EXP 47
71471: NOT
71472: IFFALSE 71476
// exit ;
71474: GO 71637
// for i = 1 to mc_bases do
71476: LD_ADDR_VAR 0 2
71480: PUSH
71481: DOUBLE
71482: LD_INT 1
71484: DEC
71485: ST_TO_ADDR
71486: LD_EXP 47
71490: PUSH
71491: FOR_TO
71492: IFFALSE 71635
// begin tmp := UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) ;
71494: LD_ADDR_VAR 0 4
71498: PUSH
71499: LD_EXP 66
71503: PUSH
71504: LD_VAR 0 2
71508: ARRAY
71509: PUSH
71510: LD_EXP 69
71514: PUSH
71515: LD_VAR 0 2
71519: ARRAY
71520: UNION
71521: PPUSH
71522: LD_INT 33
71524: PUSH
71525: LD_INT 2
71527: PUSH
71528: EMPTY
71529: LIST
71530: LIST
71531: PPUSH
71532: CALL_OW 72
71536: ST_TO_ADDR
// if tmp then
71537: LD_VAR 0 4
71541: IFFALSE 71633
// for j in tmp do
71543: LD_ADDR_VAR 0 3
71547: PUSH
71548: LD_VAR 0 4
71552: PUSH
71553: FOR_IN
71554: IFFALSE 71631
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
71556: LD_VAR 0 3
71560: PPUSH
71561: CALL_OW 312
71565: NOT
71566: PUSH
71567: LD_VAR 0 3
71571: PPUSH
71572: CALL_OW 256
71576: PUSH
71577: LD_INT 250
71579: GREATEREQUAL
71580: AND
71581: IFFALSE 71594
// Connect ( j ) else
71583: LD_VAR 0 3
71587: PPUSH
71588: CALL 27248 0 1
71592: GO 71629
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
71594: LD_VAR 0 3
71598: PPUSH
71599: CALL_OW 256
71603: PUSH
71604: LD_INT 250
71606: LESS
71607: PUSH
71608: LD_VAR 0 3
71612: PPUSH
71613: CALL_OW 312
71617: AND
71618: IFFALSE 71629
// ComUnlink ( j ) ;
71620: LD_VAR 0 3
71624: PPUSH
71625: CALL_OW 136
71629: GO 71553
71631: POP
71632: POP
// end ;
71633: GO 71491
71635: POP
71636: POP
// end ;
71637: LD_VAR 0 1
71641: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
71642: LD_INT 0
71644: PPUSH
71645: PPUSH
71646: PPUSH
71647: PPUSH
71648: PPUSH
// if not mc_bases then
71649: LD_EXP 47
71653: NOT
71654: IFFALSE 71658
// exit ;
71656: GO 72103
// for i = 1 to mc_bases do
71658: LD_ADDR_VAR 0 2
71662: PUSH
71663: DOUBLE
71664: LD_INT 1
71666: DEC
71667: ST_TO_ADDR
71668: LD_EXP 47
71672: PUSH
71673: FOR_TO
71674: IFFALSE 72101
// begin if not mc_produce [ i ] then
71676: LD_EXP 68
71680: PUSH
71681: LD_VAR 0 2
71685: ARRAY
71686: NOT
71687: IFFALSE 71691
// continue ;
71689: GO 71673
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
71691: LD_ADDR_VAR 0 5
71695: PUSH
71696: LD_EXP 47
71700: PUSH
71701: LD_VAR 0 2
71705: ARRAY
71706: PPUSH
71707: LD_INT 30
71709: PUSH
71710: LD_INT 3
71712: PUSH
71713: EMPTY
71714: LIST
71715: LIST
71716: PPUSH
71717: CALL_OW 72
71721: ST_TO_ADDR
// if not fac then
71722: LD_VAR 0 5
71726: NOT
71727: IFFALSE 71731
// continue ;
71729: GO 71673
// for j in fac do
71731: LD_ADDR_VAR 0 3
71735: PUSH
71736: LD_VAR 0 5
71740: PUSH
71741: FOR_IN
71742: IFFALSE 72097
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] then
71744: LD_VAR 0 3
71748: PPUSH
71749: CALL_OW 461
71753: PUSH
71754: LD_INT 2
71756: NONEQUAL
71757: PUSH
71758: LD_VAR 0 3
71762: PPUSH
71763: LD_INT 15
71765: PPUSH
71766: CALL 26908 0 2
71770: PUSH
71771: LD_INT 4
71773: ARRAY
71774: OR
71775: IFFALSE 71779
// continue ;
71777: GO 71741
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
71779: LD_VAR 0 3
71783: PPUSH
71784: LD_EXP 68
71788: PUSH
71789: LD_VAR 0 2
71793: ARRAY
71794: PUSH
71795: LD_INT 1
71797: ARRAY
71798: PUSH
71799: LD_INT 1
71801: ARRAY
71802: PPUSH
71803: LD_EXP 68
71807: PUSH
71808: LD_VAR 0 2
71812: ARRAY
71813: PUSH
71814: LD_INT 1
71816: ARRAY
71817: PUSH
71818: LD_INT 2
71820: ARRAY
71821: PPUSH
71822: LD_EXP 68
71826: PUSH
71827: LD_VAR 0 2
71831: ARRAY
71832: PUSH
71833: LD_INT 1
71835: ARRAY
71836: PUSH
71837: LD_INT 3
71839: ARRAY
71840: PPUSH
71841: LD_EXP 68
71845: PUSH
71846: LD_VAR 0 2
71850: ARRAY
71851: PUSH
71852: LD_INT 1
71854: ARRAY
71855: PUSH
71856: LD_INT 4
71858: ARRAY
71859: PPUSH
71860: CALL_OW 448
71864: PUSH
71865: LD_VAR 0 3
71869: PPUSH
71870: LD_EXP 68
71874: PUSH
71875: LD_VAR 0 2
71879: ARRAY
71880: PUSH
71881: LD_INT 1
71883: ARRAY
71884: PUSH
71885: LD_INT 1
71887: ARRAY
71888: PUSH
71889: LD_EXP 68
71893: PUSH
71894: LD_VAR 0 2
71898: ARRAY
71899: PUSH
71900: LD_INT 1
71902: ARRAY
71903: PUSH
71904: LD_INT 2
71906: ARRAY
71907: PUSH
71908: LD_EXP 68
71912: PUSH
71913: LD_VAR 0 2
71917: ARRAY
71918: PUSH
71919: LD_INT 1
71921: ARRAY
71922: PUSH
71923: LD_INT 3
71925: ARRAY
71926: PUSH
71927: LD_EXP 68
71931: PUSH
71932: LD_VAR 0 2
71936: ARRAY
71937: PUSH
71938: LD_INT 1
71940: ARRAY
71941: PUSH
71942: LD_INT 4
71944: ARRAY
71945: PUSH
71946: EMPTY
71947: LIST
71948: LIST
71949: LIST
71950: LIST
71951: PPUSH
71952: CALL 30579 0 2
71956: AND
71957: IFFALSE 72095
// begin AddComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
71959: LD_VAR 0 3
71963: PPUSH
71964: LD_EXP 68
71968: PUSH
71969: LD_VAR 0 2
71973: ARRAY
71974: PUSH
71975: LD_INT 1
71977: ARRAY
71978: PUSH
71979: LD_INT 1
71981: ARRAY
71982: PPUSH
71983: LD_EXP 68
71987: PUSH
71988: LD_VAR 0 2
71992: ARRAY
71993: PUSH
71994: LD_INT 1
71996: ARRAY
71997: PUSH
71998: LD_INT 2
72000: ARRAY
72001: PPUSH
72002: LD_EXP 68
72006: PUSH
72007: LD_VAR 0 2
72011: ARRAY
72012: PUSH
72013: LD_INT 1
72015: ARRAY
72016: PUSH
72017: LD_INT 3
72019: ARRAY
72020: PPUSH
72021: LD_EXP 68
72025: PUSH
72026: LD_VAR 0 2
72030: ARRAY
72031: PUSH
72032: LD_INT 1
72034: ARRAY
72035: PUSH
72036: LD_INT 4
72038: ARRAY
72039: PPUSH
72040: CALL_OW 185
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
72044: LD_ADDR_VAR 0 4
72048: PUSH
72049: LD_EXP 68
72053: PUSH
72054: LD_VAR 0 2
72058: ARRAY
72059: PPUSH
72060: LD_INT 1
72062: PPUSH
72063: CALL_OW 3
72067: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
72068: LD_ADDR_EXP 68
72072: PUSH
72073: LD_EXP 68
72077: PPUSH
72078: LD_VAR 0 2
72082: PPUSH
72083: LD_VAR 0 4
72087: PPUSH
72088: CALL_OW 1
72092: ST_TO_ADDR
// break ;
72093: GO 72097
// end ; end ;
72095: GO 71741
72097: POP
72098: POP
// end ;
72099: GO 71673
72101: POP
72102: POP
// end ;
72103: LD_VAR 0 1
72107: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
72108: LD_INT 0
72110: PPUSH
72111: PPUSH
72112: PPUSH
// if not mc_bases then
72113: LD_EXP 47
72117: NOT
72118: IFFALSE 72122
// exit ;
72120: GO 72211
// for i = 1 to mc_bases do
72122: LD_ADDR_VAR 0 2
72126: PUSH
72127: DOUBLE
72128: LD_INT 1
72130: DEC
72131: ST_TO_ADDR
72132: LD_EXP 47
72136: PUSH
72137: FOR_TO
72138: IFFALSE 72209
// begin if mc_attack [ i ] then
72140: LD_EXP 67
72144: PUSH
72145: LD_VAR 0 2
72149: ARRAY
72150: IFFALSE 72207
// begin tmp := mc_attack [ i ] [ 1 ] ;
72152: LD_ADDR_VAR 0 3
72156: PUSH
72157: LD_EXP 67
72161: PUSH
72162: LD_VAR 0 2
72166: ARRAY
72167: PUSH
72168: LD_INT 1
72170: ARRAY
72171: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
72172: LD_ADDR_EXP 67
72176: PUSH
72177: LD_EXP 67
72181: PPUSH
72182: LD_VAR 0 2
72186: PPUSH
72187: EMPTY
72188: PPUSH
72189: CALL_OW 1
72193: ST_TO_ADDR
// Attack ( tmp ) ;
72194: LD_VAR 0 3
72198: PPUSH
72199: CALL 103828 0 1
// exit ;
72203: POP
72204: POP
72205: GO 72211
// end ; end ;
72207: GO 72137
72209: POP
72210: POP
// end ;
72211: LD_VAR 0 1
72215: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
72216: LD_INT 0
72218: PPUSH
72219: PPUSH
72220: PPUSH
72221: PPUSH
72222: PPUSH
72223: PPUSH
72224: PPUSH
// if not mc_bases then
72225: LD_EXP 47
72229: NOT
72230: IFFALSE 72234
// exit ;
72232: GO 72838
// for i = 1 to mc_bases do
72234: LD_ADDR_VAR 0 2
72238: PUSH
72239: DOUBLE
72240: LD_INT 1
72242: DEC
72243: ST_TO_ADDR
72244: LD_EXP 47
72248: PUSH
72249: FOR_TO
72250: IFFALSE 72836
// begin if not mc_bases [ i ] then
72252: LD_EXP 47
72256: PUSH
72257: LD_VAR 0 2
72261: ARRAY
72262: NOT
72263: IFFALSE 72267
// continue ;
72265: GO 72249
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
72267: LD_ADDR_VAR 0 7
72271: PUSH
72272: LD_EXP 47
72276: PUSH
72277: LD_VAR 0 2
72281: ARRAY
72282: PUSH
72283: LD_INT 1
72285: ARRAY
72286: PPUSH
72287: CALL 21151 0 1
72291: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
72292: LD_ADDR_EXP 70
72296: PUSH
72297: LD_EXP 70
72301: PPUSH
72302: LD_VAR 0 2
72306: PPUSH
72307: LD_EXP 47
72311: PUSH
72312: LD_VAR 0 2
72316: ARRAY
72317: PUSH
72318: LD_INT 1
72320: ARRAY
72321: PPUSH
72322: CALL_OW 255
72326: PPUSH
72327: LD_EXP 72
72331: PUSH
72332: LD_VAR 0 2
72336: ARRAY
72337: PPUSH
72338: CALL 21116 0 2
72342: PPUSH
72343: CALL_OW 1
72347: ST_TO_ADDR
// if not mc_scan [ i ] then
72348: LD_EXP 70
72352: PUSH
72353: LD_VAR 0 2
72357: ARRAY
72358: NOT
72359: IFFALSE 72514
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
72361: LD_ADDR_VAR 0 4
72365: PUSH
72366: LD_EXP 47
72370: PUSH
72371: LD_VAR 0 2
72375: ARRAY
72376: PPUSH
72377: LD_INT 2
72379: PUSH
72380: LD_INT 25
72382: PUSH
72383: LD_INT 5
72385: PUSH
72386: EMPTY
72387: LIST
72388: LIST
72389: PUSH
72390: LD_INT 25
72392: PUSH
72393: LD_INT 8
72395: PUSH
72396: EMPTY
72397: LIST
72398: LIST
72399: PUSH
72400: LD_INT 25
72402: PUSH
72403: LD_INT 9
72405: PUSH
72406: EMPTY
72407: LIST
72408: LIST
72409: PUSH
72410: EMPTY
72411: LIST
72412: LIST
72413: LIST
72414: LIST
72415: PPUSH
72416: CALL_OW 72
72420: ST_TO_ADDR
// if not tmp then
72421: LD_VAR 0 4
72425: NOT
72426: IFFALSE 72430
// continue ;
72428: GO 72249
// for j in tmp do
72430: LD_ADDR_VAR 0 3
72434: PUSH
72435: LD_VAR 0 4
72439: PUSH
72440: FOR_IN
72441: IFFALSE 72512
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
72443: LD_VAR 0 3
72447: PPUSH
72448: CALL_OW 310
72452: PPUSH
72453: CALL_OW 266
72457: PUSH
72458: LD_INT 5
72460: EQUAL
72461: PUSH
72462: LD_VAR 0 3
72466: PPUSH
72467: CALL_OW 257
72471: PUSH
72472: LD_INT 1
72474: EQUAL
72475: AND
72476: PUSH
72477: LD_VAR 0 3
72481: PPUSH
72482: CALL_OW 459
72486: NOT
72487: AND
72488: PUSH
72489: LD_VAR 0 7
72493: AND
72494: IFFALSE 72510
// ComChangeProfession ( j , class ) ;
72496: LD_VAR 0 3
72500: PPUSH
72501: LD_VAR 0 7
72505: PPUSH
72506: CALL_OW 123
72510: GO 72440
72512: POP
72513: POP
// end ; if mc_scan [ i ] and not mc_defender [ i ] and not UnitFilter ( mc_bases [ i ] , [ f_btype , b_bunker ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) then
72514: LD_EXP 70
72518: PUSH
72519: LD_VAR 0 2
72523: ARRAY
72524: PUSH
72525: LD_EXP 69
72529: PUSH
72530: LD_VAR 0 2
72534: ARRAY
72535: NOT
72536: AND
72537: PUSH
72538: LD_EXP 47
72542: PUSH
72543: LD_VAR 0 2
72547: ARRAY
72548: PPUSH
72549: LD_INT 30
72551: PUSH
72552: LD_INT 32
72554: PUSH
72555: EMPTY
72556: LIST
72557: LIST
72558: PPUSH
72559: CALL_OW 72
72563: NOT
72564: AND
72565: PUSH
72566: LD_EXP 47
72570: PUSH
72571: LD_VAR 0 2
72575: ARRAY
72576: PPUSH
72577: LD_INT 2
72579: PUSH
72580: LD_INT 30
72582: PUSH
72583: LD_INT 4
72585: PUSH
72586: EMPTY
72587: LIST
72588: LIST
72589: PUSH
72590: LD_INT 30
72592: PUSH
72593: LD_INT 5
72595: PUSH
72596: EMPTY
72597: LIST
72598: LIST
72599: PUSH
72600: EMPTY
72601: LIST
72602: LIST
72603: LIST
72604: PPUSH
72605: CALL_OW 72
72609: NOT
72610: AND
72611: IFFALSE 72743
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
72613: LD_ADDR_VAR 0 4
72617: PUSH
72618: LD_EXP 47
72622: PUSH
72623: LD_VAR 0 2
72627: ARRAY
72628: PPUSH
72629: LD_INT 2
72631: PUSH
72632: LD_INT 25
72634: PUSH
72635: LD_INT 1
72637: PUSH
72638: EMPTY
72639: LIST
72640: LIST
72641: PUSH
72642: LD_INT 25
72644: PUSH
72645: LD_INT 5
72647: PUSH
72648: EMPTY
72649: LIST
72650: LIST
72651: PUSH
72652: LD_INT 25
72654: PUSH
72655: LD_INT 8
72657: PUSH
72658: EMPTY
72659: LIST
72660: LIST
72661: PUSH
72662: LD_INT 25
72664: PUSH
72665: LD_INT 9
72667: PUSH
72668: EMPTY
72669: LIST
72670: LIST
72671: PUSH
72672: EMPTY
72673: LIST
72674: LIST
72675: LIST
72676: LIST
72677: LIST
72678: PPUSH
72679: CALL_OW 72
72683: ST_TO_ADDR
// tmp := tmp diff FilterByTag ( tmp , 18 ) ;
72684: LD_ADDR_VAR 0 4
72688: PUSH
72689: LD_VAR 0 4
72693: PUSH
72694: LD_VAR 0 4
72698: PPUSH
72699: LD_INT 18
72701: PPUSH
72702: CALL 52876 0 2
72706: DIFF
72707: ST_TO_ADDR
// if tmp then
72708: LD_VAR 0 4
72712: IFFALSE 72743
// begin BasicDefend ( i , tmp , mc_scan_area [ i ] ) ;
72714: LD_VAR 0 2
72718: PPUSH
72719: LD_VAR 0 4
72723: PPUSH
72724: LD_EXP 72
72728: PUSH
72729: LD_VAR 0 2
72733: ARRAY
72734: PPUSH
72735: CALL 108537 0 3
// exit ;
72739: POP
72740: POP
72741: GO 72838
// end ; end ; if mc_scan [ i ] and mc_defender [ i ] then
72743: LD_EXP 70
72747: PUSH
72748: LD_VAR 0 2
72752: ARRAY
72753: PUSH
72754: LD_EXP 69
72758: PUSH
72759: LD_VAR 0 2
72763: ARRAY
72764: AND
72765: IFFALSE 72834
// begin tmp := mc_defender [ i ] ;
72767: LD_ADDR_VAR 0 4
72771: PUSH
72772: LD_EXP 69
72776: PUSH
72777: LD_VAR 0 2
72781: ARRAY
72782: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
72783: LD_ADDR_EXP 69
72787: PUSH
72788: LD_EXP 69
72792: PPUSH
72793: LD_VAR 0 2
72797: PPUSH
72798: EMPTY
72799: PPUSH
72800: CALL_OW 1
72804: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
72805: LD_VAR 0 2
72809: PPUSH
72810: LD_VAR 0 4
72814: PPUSH
72815: LD_EXP 70
72819: PUSH
72820: LD_VAR 0 2
72824: ARRAY
72825: PPUSH
72826: CALL 109098 0 3
// exit ;
72830: POP
72831: POP
72832: GO 72838
// end ; end ;
72834: GO 72249
72836: POP
72837: POP
// end ;
72838: LD_VAR 0 1
72842: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 , researching , idle_lab ; begin
72843: LD_INT 0
72845: PPUSH
72846: PPUSH
72847: PPUSH
72848: PPUSH
72849: PPUSH
72850: PPUSH
72851: PPUSH
72852: PPUSH
72853: PPUSH
72854: PPUSH
72855: PPUSH
// if not mc_bases then
72856: LD_EXP 47
72860: NOT
72861: IFFALSE 72865
// exit ;
72863: GO 73952
// for i = 1 to mc_bases do
72865: LD_ADDR_VAR 0 2
72869: PUSH
72870: DOUBLE
72871: LD_INT 1
72873: DEC
72874: ST_TO_ADDR
72875: LD_EXP 47
72879: PUSH
72880: FOR_TO
72881: IFFALSE 73950
// begin tmp := mc_lab [ i ] ;
72883: LD_ADDR_VAR 0 6
72887: PUSH
72888: LD_EXP 80
72892: PUSH
72893: LD_VAR 0 2
72897: ARRAY
72898: ST_TO_ADDR
// if not tmp then
72899: LD_VAR 0 6
72903: NOT
72904: IFFALSE 72908
// continue ;
72906: GO 72880
// idle_lab := 0 ;
72908: LD_ADDR_VAR 0 11
72912: PUSH
72913: LD_INT 0
72915: ST_TO_ADDR
// for j in tmp do
72916: LD_ADDR_VAR 0 3
72920: PUSH
72921: LD_VAR 0 6
72925: PUSH
72926: FOR_IN
72927: IFFALSE 73946
// begin researching := false ;
72929: LD_ADDR_VAR 0 10
72933: PUSH
72934: LD_INT 0
72936: ST_TO_ADDR
// side := GetSide ( j ) ;
72937: LD_ADDR_VAR 0 4
72941: PUSH
72942: LD_VAR 0 3
72946: PPUSH
72947: CALL_OW 255
72951: ST_TO_ADDR
// if not mc_tech [ side ] then
72952: LD_EXP 74
72956: PUSH
72957: LD_VAR 0 4
72961: ARRAY
72962: NOT
72963: IFFALSE 72967
// continue ;
72965: GO 72926
// if BuildingStatus ( j ) = bs_idle then
72967: LD_VAR 0 3
72971: PPUSH
72972: CALL_OW 461
72976: PUSH
72977: LD_INT 2
72979: EQUAL
72980: IFFALSE 73168
// begin if idle_lab and UnitsInside ( j ) < 6 then
72982: LD_VAR 0 11
72986: PUSH
72987: LD_VAR 0 3
72991: PPUSH
72992: CALL_OW 313
72996: PUSH
72997: LD_INT 6
72999: LESS
73000: AND
73001: IFFALSE 73072
// begin tmp2 := UnitsInside ( idle_lab ) ;
73003: LD_ADDR_VAR 0 9
73007: PUSH
73008: LD_VAR 0 11
73012: PPUSH
73013: CALL_OW 313
73017: ST_TO_ADDR
// if tmp2 then
73018: LD_VAR 0 9
73022: IFFALSE 73064
// for x in tmp2 do
73024: LD_ADDR_VAR 0 7
73028: PUSH
73029: LD_VAR 0 9
73033: PUSH
73034: FOR_IN
73035: IFFALSE 73062
// begin ComExitBuilding ( x ) ;
73037: LD_VAR 0 7
73041: PPUSH
73042: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
73046: LD_VAR 0 7
73050: PPUSH
73051: LD_VAR 0 3
73055: PPUSH
73056: CALL_OW 180
// end ;
73060: GO 73034
73062: POP
73063: POP
// idle_lab := 0 ;
73064: LD_ADDR_VAR 0 11
73068: PUSH
73069: LD_INT 0
73071: ST_TO_ADDR
// end ; for t in mc_tech [ side ] do
73072: LD_ADDR_VAR 0 5
73076: PUSH
73077: LD_EXP 74
73081: PUSH
73082: LD_VAR 0 4
73086: ARRAY
73087: PUSH
73088: FOR_IN
73089: IFFALSE 73149
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
73091: LD_VAR 0 3
73095: PPUSH
73096: LD_VAR 0 5
73100: PPUSH
73101: CALL_OW 430
73105: PUSH
73106: LD_VAR 0 4
73110: PPUSH
73111: LD_VAR 0 5
73115: PPUSH
73116: CALL 20221 0 2
73120: AND
73121: IFFALSE 73147
// begin researching := true ;
73123: LD_ADDR_VAR 0 10
73127: PUSH
73128: LD_INT 1
73130: ST_TO_ADDR
// ComResearch ( j , t ) ;
73131: LD_VAR 0 3
73135: PPUSH
73136: LD_VAR 0 5
73140: PPUSH
73141: CALL_OW 124
// break ;
73145: GO 73149
// end ;
73147: GO 73088
73149: POP
73150: POP
// if not researching then
73151: LD_VAR 0 10
73155: NOT
73156: IFFALSE 73168
// idle_lab := j ;
73158: LD_ADDR_VAR 0 11
73162: PUSH
73163: LD_VAR 0 3
73167: ST_TO_ADDR
// end ; if BuildingStatus ( j ) = bs_need_ape then
73168: LD_VAR 0 3
73172: PPUSH
73173: CALL_OW 461
73177: PUSH
73178: LD_INT 10
73180: EQUAL
73181: IFFALSE 73769
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
73183: LD_EXP 76
73187: PUSH
73188: LD_VAR 0 2
73192: ARRAY
73193: NOT
73194: PUSH
73195: LD_EXP 77
73199: PUSH
73200: LD_VAR 0 2
73204: ARRAY
73205: NOT
73206: AND
73207: PUSH
73208: LD_EXP 74
73212: PUSH
73213: LD_VAR 0 4
73217: ARRAY
73218: PUSH
73219: LD_INT 1
73221: GREATER
73222: AND
73223: IFFALSE 73354
// begin ComCancel ( j ) ;
73225: LD_VAR 0 3
73229: PPUSH
73230: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
73234: LD_ADDR_EXP 74
73238: PUSH
73239: LD_EXP 74
73243: PPUSH
73244: LD_VAR 0 4
73248: PPUSH
73249: LD_EXP 74
73253: PUSH
73254: LD_VAR 0 4
73258: ARRAY
73259: PPUSH
73260: LD_EXP 74
73264: PUSH
73265: LD_VAR 0 4
73269: ARRAY
73270: PUSH
73271: LD_INT 1
73273: MINUS
73274: PPUSH
73275: LD_EXP 74
73279: PUSH
73280: LD_VAR 0 4
73284: ARRAY
73285: PPUSH
73286: LD_INT 0
73288: PPUSH
73289: CALL 23733 0 4
73293: PPUSH
73294: CALL_OW 1
73298: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
73299: LD_ADDR_EXP 74
73303: PUSH
73304: LD_EXP 74
73308: PPUSH
73309: LD_VAR 0 4
73313: PPUSH
73314: LD_EXP 74
73318: PUSH
73319: LD_VAR 0 4
73323: ARRAY
73324: PPUSH
73325: LD_EXP 74
73329: PUSH
73330: LD_VAR 0 4
73334: ARRAY
73335: PPUSH
73336: LD_INT 1
73338: PPUSH
73339: LD_INT 0
73341: PPUSH
73342: CALL 23733 0 4
73346: PPUSH
73347: CALL_OW 1
73351: ST_TO_ADDR
// continue ;
73352: GO 72926
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
73354: LD_EXP 76
73358: PUSH
73359: LD_VAR 0 2
73363: ARRAY
73364: PUSH
73365: LD_EXP 77
73369: PUSH
73370: LD_VAR 0 2
73374: ARRAY
73375: NOT
73376: AND
73377: IFFALSE 73504
// begin mc_ape_in_lab := ReplaceIn ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
73379: LD_ADDR_EXP 77
73383: PUSH
73384: LD_EXP 77
73388: PPUSH
73389: LD_VAR 0 2
73393: PUSH
73394: LD_EXP 77
73398: PUSH
73399: LD_VAR 0 2
73403: ARRAY
73404: PUSH
73405: LD_INT 1
73407: PLUS
73408: PUSH
73409: EMPTY
73410: LIST
73411: LIST
73412: PPUSH
73413: LD_EXP 76
73417: PUSH
73418: LD_VAR 0 2
73422: ARRAY
73423: PUSH
73424: LD_INT 1
73426: ARRAY
73427: PPUSH
73428: CALL 24315 0 3
73432: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
73433: LD_EXP 76
73437: PUSH
73438: LD_VAR 0 2
73442: ARRAY
73443: PUSH
73444: LD_INT 1
73446: ARRAY
73447: PPUSH
73448: LD_INT 112
73450: PPUSH
73451: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
73455: LD_ADDR_VAR 0 9
73459: PUSH
73460: LD_EXP 76
73464: PUSH
73465: LD_VAR 0 2
73469: ARRAY
73470: PPUSH
73471: LD_INT 1
73473: PPUSH
73474: CALL_OW 3
73478: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
73479: LD_ADDR_EXP 76
73483: PUSH
73484: LD_EXP 76
73488: PPUSH
73489: LD_VAR 0 2
73493: PPUSH
73494: LD_VAR 0 9
73498: PPUSH
73499: CALL_OW 1
73503: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
73504: LD_EXP 76
73508: PUSH
73509: LD_VAR 0 2
73513: ARRAY
73514: PUSH
73515: LD_EXP 77
73519: PUSH
73520: LD_VAR 0 2
73524: ARRAY
73525: AND
73526: PUSH
73527: LD_EXP 77
73531: PUSH
73532: LD_VAR 0 2
73536: ARRAY
73537: PUSH
73538: LD_INT 1
73540: ARRAY
73541: PPUSH
73542: CALL_OW 310
73546: NOT
73547: AND
73548: PUSH
73549: LD_VAR 0 3
73553: PPUSH
73554: CALL_OW 313
73558: PUSH
73559: LD_INT 6
73561: EQUAL
73562: AND
73563: IFFALSE 73619
// begin tmp2 := UnitsInside ( j ) ;
73565: LD_ADDR_VAR 0 9
73569: PUSH
73570: LD_VAR 0 3
73574: PPUSH
73575: CALL_OW 313
73579: ST_TO_ADDR
// if tmp2 = 6 then
73580: LD_VAR 0 9
73584: PUSH
73585: LD_INT 6
73587: EQUAL
73588: IFFALSE 73619
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
73590: LD_VAR 0 9
73594: PUSH
73595: LD_INT 1
73597: ARRAY
73598: PPUSH
73599: LD_INT 112
73601: PPUSH
73602: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
73606: LD_VAR 0 9
73610: PUSH
73611: LD_INT 1
73613: ARRAY
73614: PPUSH
73615: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
73619: LD_EXP 77
73623: PUSH
73624: LD_VAR 0 2
73628: ARRAY
73629: PUSH
73630: LD_EXP 77
73634: PUSH
73635: LD_VAR 0 2
73639: ARRAY
73640: PUSH
73641: LD_INT 1
73643: ARRAY
73644: PPUSH
73645: CALL_OW 314
73649: NOT
73650: AND
73651: PUSH
73652: LD_EXP 77
73656: PUSH
73657: LD_VAR 0 2
73661: ARRAY
73662: PUSH
73663: LD_INT 1
73665: ARRAY
73666: PPUSH
73667: CALL_OW 310
73671: NOT
73672: AND
73673: IFFALSE 73699
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
73675: LD_EXP 77
73679: PUSH
73680: LD_VAR 0 2
73684: ARRAY
73685: PUSH
73686: LD_INT 1
73688: ARRAY
73689: PPUSH
73690: LD_VAR 0 3
73694: PPUSH
73695: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
73699: LD_EXP 77
73703: PUSH
73704: LD_VAR 0 2
73708: ARRAY
73709: PUSH
73710: LD_INT 1
73712: ARRAY
73713: PPUSH
73714: CALL_OW 310
73718: PUSH
73719: LD_EXP 77
73723: PUSH
73724: LD_VAR 0 2
73728: ARRAY
73729: PUSH
73730: LD_INT 1
73732: ARRAY
73733: PPUSH
73734: CALL_OW 310
73738: PPUSH
73739: CALL_OW 461
73743: PUSH
73744: LD_INT 3
73746: NONEQUAL
73747: AND
73748: IFFALSE 73769
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
73750: LD_EXP 77
73754: PUSH
73755: LD_VAR 0 2
73759: ARRAY
73760: PUSH
73761: LD_INT 1
73763: ARRAY
73764: PPUSH
73765: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
73769: LD_VAR 0 3
73773: PPUSH
73774: CALL_OW 461
73778: PUSH
73779: LD_INT 6
73781: EQUAL
73782: PUSH
73783: LD_VAR 0 6
73787: PUSH
73788: LD_INT 1
73790: GREATER
73791: AND
73792: IFFALSE 73944
// begin sci := [ ] ;
73794: LD_ADDR_VAR 0 8
73798: PUSH
73799: EMPTY
73800: ST_TO_ADDR
// for x in ( tmp diff j ) do
73801: LD_ADDR_VAR 0 7
73805: PUSH
73806: LD_VAR 0 6
73810: PUSH
73811: LD_VAR 0 3
73815: DIFF
73816: PUSH
73817: FOR_IN
73818: IFFALSE 73870
// begin if sci = 6 then
73820: LD_VAR 0 8
73824: PUSH
73825: LD_INT 6
73827: EQUAL
73828: IFFALSE 73832
// break ;
73830: GO 73870
// if BuildingStatus ( x ) = bs_idle then
73832: LD_VAR 0 7
73836: PPUSH
73837: CALL_OW 461
73841: PUSH
73842: LD_INT 2
73844: EQUAL
73845: IFFALSE 73868
// sci := sci ^ UnitsInside ( x ) ;
73847: LD_ADDR_VAR 0 8
73851: PUSH
73852: LD_VAR 0 8
73856: PUSH
73857: LD_VAR 0 7
73861: PPUSH
73862: CALL_OW 313
73866: ADD
73867: ST_TO_ADDR
// end ;
73868: GO 73817
73870: POP
73871: POP
// if not sci then
73872: LD_VAR 0 8
73876: NOT
73877: IFFALSE 73881
// continue ;
73879: GO 72926
// for x in sci do
73881: LD_ADDR_VAR 0 7
73885: PUSH
73886: LD_VAR 0 8
73890: PUSH
73891: FOR_IN
73892: IFFALSE 73942
// if IsInUnit ( x ) and not HasTask ( x ) then
73894: LD_VAR 0 7
73898: PPUSH
73899: CALL_OW 310
73903: PUSH
73904: LD_VAR 0 7
73908: PPUSH
73909: CALL_OW 314
73913: NOT
73914: AND
73915: IFFALSE 73940
// begin ComExitBuilding ( x ) ;
73917: LD_VAR 0 7
73921: PPUSH
73922: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
73926: LD_VAR 0 7
73930: PPUSH
73931: LD_VAR 0 3
73935: PPUSH
73936: CALL_OW 180
// end ;
73940: GO 73891
73942: POP
73943: POP
// end ; end ;
73944: GO 72926
73946: POP
73947: POP
// end ;
73948: GO 72880
73950: POP
73951: POP
// end ;
73952: LD_VAR 0 1
73956: RET
// export function MC_MinesTrigger ( ) ; var i ; begin
73957: LD_INT 0
73959: PPUSH
73960: PPUSH
// if not mc_bases then
73961: LD_EXP 47
73965: NOT
73966: IFFALSE 73970
// exit ;
73968: GO 74051
// for i = 1 to mc_bases do
73970: LD_ADDR_VAR 0 2
73974: PUSH
73975: DOUBLE
73976: LD_INT 1
73978: DEC
73979: ST_TO_ADDR
73980: LD_EXP 47
73984: PUSH
73985: FOR_TO
73986: IFFALSE 74049
// if mc_mines [ i ] and mc_miners [ i ] then
73988: LD_EXP 60
73992: PUSH
73993: LD_VAR 0 2
73997: ARRAY
73998: PUSH
73999: LD_EXP 61
74003: PUSH
74004: LD_VAR 0 2
74008: ARRAY
74009: AND
74010: IFFALSE 74047
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
74012: LD_EXP 61
74016: PUSH
74017: LD_VAR 0 2
74021: ARRAY
74022: PUSH
74023: LD_INT 1
74025: ARRAY
74026: PPUSH
74027: CALL_OW 255
74031: PPUSH
74032: LD_EXP 60
74036: PUSH
74037: LD_VAR 0 2
74041: ARRAY
74042: PPUSH
74043: CALL 21304 0 2
74047: GO 73985
74049: POP
74050: POP
// end ;
74051: LD_VAR 0 1
74055: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
74056: LD_INT 0
74058: PPUSH
74059: PPUSH
74060: PPUSH
74061: PPUSH
74062: PPUSH
74063: PPUSH
74064: PPUSH
74065: PPUSH
// if not mc_bases or not mc_parking then
74066: LD_EXP 47
74070: NOT
74071: PUSH
74072: LD_EXP 71
74076: NOT
74077: OR
74078: IFFALSE 74082
// exit ;
74080: GO 74781
// for i = 1 to mc_bases do
74082: LD_ADDR_VAR 0 2
74086: PUSH
74087: DOUBLE
74088: LD_INT 1
74090: DEC
74091: ST_TO_ADDR
74092: LD_EXP 47
74096: PUSH
74097: FOR_TO
74098: IFFALSE 74779
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
74100: LD_EXP 47
74104: PUSH
74105: LD_VAR 0 2
74109: ARRAY
74110: NOT
74111: PUSH
74112: LD_EXP 71
74116: PUSH
74117: LD_VAR 0 2
74121: ARRAY
74122: NOT
74123: OR
74124: IFFALSE 74128
// continue ;
74126: GO 74097
// side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
74128: LD_ADDR_VAR 0 5
74132: PUSH
74133: LD_EXP 47
74137: PUSH
74138: LD_VAR 0 2
74142: ARRAY
74143: PUSH
74144: LD_INT 1
74146: ARRAY
74147: PPUSH
74148: CALL_OW 255
74152: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
74153: LD_ADDR_VAR 0 6
74157: PUSH
74158: LD_EXP 47
74162: PUSH
74163: LD_VAR 0 2
74167: ARRAY
74168: PPUSH
74169: LD_INT 30
74171: PUSH
74172: LD_INT 3
74174: PUSH
74175: EMPTY
74176: LIST
74177: LIST
74178: PPUSH
74179: CALL_OW 72
74183: ST_TO_ADDR
// if not fac then
74184: LD_VAR 0 6
74188: NOT
74189: IFFALSE 74240
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
74191: LD_ADDR_VAR 0 6
74195: PUSH
74196: LD_EXP 47
74200: PUSH
74201: LD_VAR 0 2
74205: ARRAY
74206: PPUSH
74207: LD_INT 2
74209: PUSH
74210: LD_INT 30
74212: PUSH
74213: LD_INT 0
74215: PUSH
74216: EMPTY
74217: LIST
74218: LIST
74219: PUSH
74220: LD_INT 30
74222: PUSH
74223: LD_INT 1
74225: PUSH
74226: EMPTY
74227: LIST
74228: LIST
74229: PUSH
74230: EMPTY
74231: LIST
74232: LIST
74233: LIST
74234: PPUSH
74235: CALL_OW 72
74239: ST_TO_ADDR
// if not fac then
74240: LD_VAR 0 6
74244: NOT
74245: IFFALSE 74249
// continue ;
74247: GO 74097
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
74249: LD_ADDR_VAR 0 7
74253: PUSH
74254: LD_EXP 71
74258: PUSH
74259: LD_VAR 0 2
74263: ARRAY
74264: PPUSH
74265: LD_INT 22
74267: PUSH
74268: LD_VAR 0 5
74272: PUSH
74273: EMPTY
74274: LIST
74275: LIST
74276: PUSH
74277: LD_INT 21
74279: PUSH
74280: LD_INT 2
74282: PUSH
74283: EMPTY
74284: LIST
74285: LIST
74286: PUSH
74287: LD_INT 3
74289: PUSH
74290: LD_INT 24
74292: PUSH
74293: LD_INT 1000
74295: PUSH
74296: EMPTY
74297: LIST
74298: LIST
74299: PUSH
74300: EMPTY
74301: LIST
74302: LIST
74303: PUSH
74304: EMPTY
74305: LIST
74306: LIST
74307: LIST
74308: PPUSH
74309: CALL_OW 70
74313: ST_TO_ADDR
// for j in fac do
74314: LD_ADDR_VAR 0 3
74318: PUSH
74319: LD_VAR 0 6
74323: PUSH
74324: FOR_IN
74325: IFFALSE 74406
// vehs := vehs union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , j , 15 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
74327: LD_ADDR_VAR 0 7
74331: PUSH
74332: LD_VAR 0 7
74336: PUSH
74337: LD_INT 22
74339: PUSH
74340: LD_VAR 0 5
74344: PUSH
74345: EMPTY
74346: LIST
74347: LIST
74348: PUSH
74349: LD_INT 91
74351: PUSH
74352: LD_VAR 0 3
74356: PUSH
74357: LD_INT 15
74359: PUSH
74360: EMPTY
74361: LIST
74362: LIST
74363: LIST
74364: PUSH
74365: LD_INT 21
74367: PUSH
74368: LD_INT 2
74370: PUSH
74371: EMPTY
74372: LIST
74373: LIST
74374: PUSH
74375: LD_INT 3
74377: PUSH
74378: LD_INT 24
74380: PUSH
74381: LD_INT 1000
74383: PUSH
74384: EMPTY
74385: LIST
74386: LIST
74387: PUSH
74388: EMPTY
74389: LIST
74390: LIST
74391: PUSH
74392: EMPTY
74393: LIST
74394: LIST
74395: LIST
74396: LIST
74397: PPUSH
74398: CALL_OW 69
74402: UNION
74403: ST_TO_ADDR
74404: GO 74324
74406: POP
74407: POP
// if not vehs then
74408: LD_VAR 0 7
74412: NOT
74413: IFFALSE 74439
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
74415: LD_ADDR_EXP 59
74419: PUSH
74420: LD_EXP 59
74424: PPUSH
74425: LD_VAR 0 2
74429: PPUSH
74430: EMPTY
74431: PPUSH
74432: CALL_OW 1
74436: ST_TO_ADDR
// continue ;
74437: GO 74097
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
74439: LD_ADDR_VAR 0 8
74443: PUSH
74444: LD_EXP 47
74448: PUSH
74449: LD_VAR 0 2
74453: ARRAY
74454: PPUSH
74455: LD_INT 30
74457: PUSH
74458: LD_INT 3
74460: PUSH
74461: EMPTY
74462: LIST
74463: LIST
74464: PPUSH
74465: CALL_OW 72
74469: ST_TO_ADDR
// if tmp then
74470: LD_VAR 0 8
74474: IFFALSE 74577
// begin for j in tmp do
74476: LD_ADDR_VAR 0 3
74480: PUSH
74481: LD_VAR 0 8
74485: PUSH
74486: FOR_IN
74487: IFFALSE 74575
// for k in UnitsInside ( j ) do
74489: LD_ADDR_VAR 0 4
74493: PUSH
74494: LD_VAR 0 3
74498: PPUSH
74499: CALL_OW 313
74503: PUSH
74504: FOR_IN
74505: IFFALSE 74571
// if k then
74507: LD_VAR 0 4
74511: IFFALSE 74569
// if not k in mc_repair_vehicle [ i ] then
74513: LD_VAR 0 4
74517: PUSH
74518: LD_EXP 59
74522: PUSH
74523: LD_VAR 0 2
74527: ARRAY
74528: IN
74529: NOT
74530: IFFALSE 74569
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
74532: LD_ADDR_EXP 59
74536: PUSH
74537: LD_EXP 59
74541: PPUSH
74542: LD_VAR 0 2
74546: PPUSH
74547: LD_EXP 59
74551: PUSH
74552: LD_VAR 0 2
74556: ARRAY
74557: PUSH
74558: LD_VAR 0 4
74562: UNION
74563: PPUSH
74564: CALL_OW 1
74568: ST_TO_ADDR
74569: GO 74504
74571: POP
74572: POP
74573: GO 74486
74575: POP
74576: POP
// end ; if not mc_repair_vehicle [ i ] then
74577: LD_EXP 59
74581: PUSH
74582: LD_VAR 0 2
74586: ARRAY
74587: NOT
74588: IFFALSE 74592
// continue ;
74590: GO 74097
// for j in mc_repair_vehicle [ i ] do
74592: LD_ADDR_VAR 0 3
74596: PUSH
74597: LD_EXP 59
74601: PUSH
74602: LD_VAR 0 2
74606: ARRAY
74607: PUSH
74608: FOR_IN
74609: IFFALSE 74775
// begin if GetClass ( j ) <> 3 then
74611: LD_VAR 0 3
74615: PPUSH
74616: CALL_OW 257
74620: PUSH
74621: LD_INT 3
74623: NONEQUAL
74624: IFFALSE 74665
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] diff j ) ;
74626: LD_ADDR_EXP 59
74630: PUSH
74631: LD_EXP 59
74635: PPUSH
74636: LD_VAR 0 2
74640: PPUSH
74641: LD_EXP 59
74645: PUSH
74646: LD_VAR 0 2
74650: ARRAY
74651: PUSH
74652: LD_VAR 0 3
74656: DIFF
74657: PPUSH
74658: CALL_OW 1
74662: ST_TO_ADDR
// continue ;
74663: GO 74608
// end ; if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
74665: LD_VAR 0 3
74669: PPUSH
74670: CALL_OW 311
74674: NOT
74675: PUSH
74676: LD_VAR 0 3
74680: PUSH
74681: LD_EXP 50
74685: PUSH
74686: LD_VAR 0 2
74690: ARRAY
74691: PUSH
74692: LD_INT 1
74694: ARRAY
74695: IN
74696: NOT
74697: AND
74698: PUSH
74699: LD_VAR 0 3
74703: PUSH
74704: LD_EXP 50
74708: PUSH
74709: LD_VAR 0 2
74713: ARRAY
74714: PUSH
74715: LD_INT 2
74717: ARRAY
74718: IN
74719: NOT
74720: AND
74721: IFFALSE 74773
// begin if IsInUnit ( j ) then
74723: LD_VAR 0 3
74727: PPUSH
74728: CALL_OW 310
74732: IFFALSE 74743
// ComExitBuilding ( j ) ;
74734: LD_VAR 0 3
74738: PPUSH
74739: CALL_OW 122
// if not HasTask ( j ) then
74743: LD_VAR 0 3
74747: PPUSH
74748: CALL_OW 314
74752: NOT
74753: IFFALSE 74773
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
74755: LD_VAR 0 3
74759: PPUSH
74760: LD_VAR 0 7
74764: PUSH
74765: LD_INT 1
74767: ARRAY
74768: PPUSH
74769: CALL_OW 189
// end ; end ;
74773: GO 74608
74775: POP
74776: POP
// end ;
74777: GO 74097
74779: POP
74780: POP
// end ;
74781: LD_VAR 0 1
74785: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
74786: LD_INT 0
74788: PPUSH
74789: PPUSH
74790: PPUSH
74791: PPUSH
74792: PPUSH
74793: PPUSH
74794: PPUSH
74795: PPUSH
74796: PPUSH
74797: PPUSH
74798: PPUSH
// if not mc_bases then
74799: LD_EXP 47
74803: NOT
74804: IFFALSE 74808
// exit ;
74806: GO 75610
// for i = 1 to mc_bases do
74808: LD_ADDR_VAR 0 2
74812: PUSH
74813: DOUBLE
74814: LD_INT 1
74816: DEC
74817: ST_TO_ADDR
74818: LD_EXP 47
74822: PUSH
74823: FOR_TO
74824: IFFALSE 75608
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
74826: LD_EXP 75
74830: PUSH
74831: LD_VAR 0 2
74835: ARRAY
74836: NOT
74837: PUSH
74838: LD_EXP 50
74842: PUSH
74843: LD_VAR 0 2
74847: ARRAY
74848: PUSH
74849: LD_INT 1
74851: ARRAY
74852: OR
74853: PUSH
74854: LD_EXP 50
74858: PUSH
74859: LD_VAR 0 2
74863: ARRAY
74864: PUSH
74865: LD_INT 2
74867: ARRAY
74868: OR
74869: PUSH
74870: LD_EXP 73
74874: PUSH
74875: LD_VAR 0 2
74879: ARRAY
74880: PPUSH
74881: LD_INT 1
74883: PPUSH
74884: CALL_OW 325
74888: NOT
74889: OR
74890: PUSH
74891: LD_EXP 70
74895: PUSH
74896: LD_VAR 0 2
74900: ARRAY
74901: OR
74902: IFFALSE 74906
// continue ;
74904: GO 74823
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
74906: LD_ADDR_VAR 0 8
74910: PUSH
74911: LD_EXP 47
74915: PUSH
74916: LD_VAR 0 2
74920: ARRAY
74921: PPUSH
74922: LD_INT 25
74924: PUSH
74925: LD_INT 4
74927: PUSH
74928: EMPTY
74929: LIST
74930: LIST
74931: PUSH
74932: LD_INT 50
74934: PUSH
74935: EMPTY
74936: LIST
74937: PUSH
74938: LD_INT 3
74940: PUSH
74941: LD_INT 60
74943: PUSH
74944: EMPTY
74945: LIST
74946: PUSH
74947: EMPTY
74948: LIST
74949: LIST
74950: PUSH
74951: EMPTY
74952: LIST
74953: LIST
74954: LIST
74955: PPUSH
74956: CALL_OW 72
74960: PUSH
74961: LD_EXP 51
74965: PUSH
74966: LD_VAR 0 2
74970: ARRAY
74971: DIFF
74972: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
74973: LD_ADDR_VAR 0 9
74977: PUSH
74978: LD_EXP 47
74982: PUSH
74983: LD_VAR 0 2
74987: ARRAY
74988: PPUSH
74989: LD_INT 2
74991: PUSH
74992: LD_INT 30
74994: PUSH
74995: LD_INT 0
74997: PUSH
74998: EMPTY
74999: LIST
75000: LIST
75001: PUSH
75002: LD_INT 30
75004: PUSH
75005: LD_INT 1
75007: PUSH
75008: EMPTY
75009: LIST
75010: LIST
75011: PUSH
75012: EMPTY
75013: LIST
75014: LIST
75015: LIST
75016: PPUSH
75017: CALL_OW 72
75021: ST_TO_ADDR
// if not tmp or not dep then
75022: LD_VAR 0 8
75026: NOT
75027: PUSH
75028: LD_VAR 0 9
75032: NOT
75033: OR
75034: IFFALSE 75038
// continue ;
75036: GO 74823
// side := GetSide ( tmp [ 1 ] ) ;
75038: LD_ADDR_VAR 0 11
75042: PUSH
75043: LD_VAR 0 8
75047: PUSH
75048: LD_INT 1
75050: ARRAY
75051: PPUSH
75052: CALL_OW 255
75056: ST_TO_ADDR
// dep := dep [ 1 ] ;
75057: LD_ADDR_VAR 0 9
75061: PUSH
75062: LD_VAR 0 9
75066: PUSH
75067: LD_INT 1
75069: ARRAY
75070: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
75071: LD_ADDR_VAR 0 7
75075: PUSH
75076: LD_EXP 75
75080: PUSH
75081: LD_VAR 0 2
75085: ARRAY
75086: PPUSH
75087: LD_INT 22
75089: PUSH
75090: LD_INT 0
75092: PUSH
75093: EMPTY
75094: LIST
75095: LIST
75096: PUSH
75097: LD_INT 25
75099: PUSH
75100: LD_INT 12
75102: PUSH
75103: EMPTY
75104: LIST
75105: LIST
75106: PUSH
75107: EMPTY
75108: LIST
75109: LIST
75110: PPUSH
75111: CALL_OW 70
75115: PUSH
75116: LD_INT 22
75118: PUSH
75119: LD_INT 0
75121: PUSH
75122: EMPTY
75123: LIST
75124: LIST
75125: PUSH
75126: LD_INT 25
75128: PUSH
75129: LD_INT 12
75131: PUSH
75132: EMPTY
75133: LIST
75134: LIST
75135: PUSH
75136: LD_INT 91
75138: PUSH
75139: LD_VAR 0 9
75143: PUSH
75144: LD_INT 20
75146: PUSH
75147: EMPTY
75148: LIST
75149: LIST
75150: LIST
75151: PUSH
75152: EMPTY
75153: LIST
75154: LIST
75155: LIST
75156: PPUSH
75157: CALL_OW 69
75161: UNION
75162: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
75163: LD_ADDR_VAR 0 10
75167: PUSH
75168: LD_EXP 75
75172: PUSH
75173: LD_VAR 0 2
75177: ARRAY
75178: PPUSH
75179: LD_INT 81
75181: PUSH
75182: LD_VAR 0 11
75186: PUSH
75187: EMPTY
75188: LIST
75189: LIST
75190: PPUSH
75191: CALL_OW 70
75195: ST_TO_ADDR
// if not apes or danger_at_area then
75196: LD_VAR 0 7
75200: NOT
75201: PUSH
75202: LD_VAR 0 10
75206: OR
75207: IFFALSE 75257
// begin if mc_taming [ i ] then
75209: LD_EXP 78
75213: PUSH
75214: LD_VAR 0 2
75218: ARRAY
75219: IFFALSE 75255
// begin MC_Reset ( i , 121 ) ;
75221: LD_VAR 0 2
75225: PPUSH
75226: LD_INT 121
75228: PPUSH
75229: CALL 60660 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
75233: LD_ADDR_EXP 78
75237: PUSH
75238: LD_EXP 78
75242: PPUSH
75243: LD_VAR 0 2
75247: PPUSH
75248: EMPTY
75249: PPUSH
75250: CALL_OW 1
75254: ST_TO_ADDR
// end ; continue ;
75255: GO 74823
// end ; for j in tmp do
75257: LD_ADDR_VAR 0 3
75261: PUSH
75262: LD_VAR 0 8
75266: PUSH
75267: FOR_IN
75268: IFFALSE 75604
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
75270: LD_VAR 0 3
75274: PUSH
75275: LD_EXP 78
75279: PUSH
75280: LD_VAR 0 2
75284: ARRAY
75285: IN
75286: NOT
75287: PUSH
75288: LD_EXP 78
75292: PUSH
75293: LD_VAR 0 2
75297: ARRAY
75298: PUSH
75299: LD_INT 3
75301: LESS
75302: AND
75303: IFFALSE 75361
// begin SetTag ( j , 121 ) ;
75305: LD_VAR 0 3
75309: PPUSH
75310: LD_INT 121
75312: PPUSH
75313: CALL_OW 109
// mc_taming := ReplaceIn ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
75317: LD_ADDR_EXP 78
75321: PUSH
75322: LD_EXP 78
75326: PPUSH
75327: LD_VAR 0 2
75331: PUSH
75332: LD_EXP 78
75336: PUSH
75337: LD_VAR 0 2
75341: ARRAY
75342: PUSH
75343: LD_INT 1
75345: PLUS
75346: PUSH
75347: EMPTY
75348: LIST
75349: LIST
75350: PPUSH
75351: LD_VAR 0 3
75355: PPUSH
75356: CALL 24315 0 3
75360: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
75361: LD_VAR 0 3
75365: PUSH
75366: LD_EXP 78
75370: PUSH
75371: LD_VAR 0 2
75375: ARRAY
75376: IN
75377: IFFALSE 75602
// begin if GetClass ( j ) <> 4 then
75379: LD_VAR 0 3
75383: PPUSH
75384: CALL_OW 257
75388: PUSH
75389: LD_INT 4
75391: NONEQUAL
75392: IFFALSE 75445
// begin mc_taming := Replace ( mc_taming , i , mc_taming [ i ] diff j ) ;
75394: LD_ADDR_EXP 78
75398: PUSH
75399: LD_EXP 78
75403: PPUSH
75404: LD_VAR 0 2
75408: PPUSH
75409: LD_EXP 78
75413: PUSH
75414: LD_VAR 0 2
75418: ARRAY
75419: PUSH
75420: LD_VAR 0 3
75424: DIFF
75425: PPUSH
75426: CALL_OW 1
75430: ST_TO_ADDR
// SetTag ( j , 0 ) ;
75431: LD_VAR 0 3
75435: PPUSH
75436: LD_INT 0
75438: PPUSH
75439: CALL_OW 109
// continue ;
75443: GO 75267
// end ; if IsInUnit ( j ) then
75445: LD_VAR 0 3
75449: PPUSH
75450: CALL_OW 310
75454: IFFALSE 75465
// ComExitBuilding ( j ) ;
75456: LD_VAR 0 3
75460: PPUSH
75461: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
75465: LD_ADDR_VAR 0 6
75469: PUSH
75470: LD_VAR 0 7
75474: PPUSH
75475: LD_VAR 0 3
75479: PPUSH
75480: CALL_OW 74
75484: ST_TO_ADDR
// if not ape then
75485: LD_VAR 0 6
75489: NOT
75490: IFFALSE 75494
// break ;
75492: GO 75604
// x := GetX ( ape ) ;
75494: LD_ADDR_VAR 0 4
75498: PUSH
75499: LD_VAR 0 6
75503: PPUSH
75504: CALL_OW 250
75508: ST_TO_ADDR
// y := GetY ( ape ) ;
75509: LD_ADDR_VAR 0 5
75513: PUSH
75514: LD_VAR 0 6
75518: PPUSH
75519: CALL_OW 251
75523: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
75524: LD_VAR 0 4
75528: PPUSH
75529: LD_VAR 0 5
75533: PPUSH
75534: CALL_OW 488
75538: NOT
75539: PUSH
75540: LD_VAR 0 11
75544: PPUSH
75545: LD_VAR 0 4
75549: PPUSH
75550: LD_VAR 0 5
75554: PPUSH
75555: LD_INT 20
75557: PPUSH
75558: CALL 25211 0 4
75562: PUSH
75563: LD_INT 4
75565: ARRAY
75566: OR
75567: IFFALSE 75571
// break ;
75569: GO 75604
// if not HasTask ( j ) then
75571: LD_VAR 0 3
75575: PPUSH
75576: CALL_OW 314
75580: NOT
75581: IFFALSE 75602
// ComTameXY ( j , x , y ) ;
75583: LD_VAR 0 3
75587: PPUSH
75588: LD_VAR 0 4
75592: PPUSH
75593: LD_VAR 0 5
75597: PPUSH
75598: CALL_OW 131
// end ; end ;
75602: GO 75267
75604: POP
75605: POP
// end ;
75606: GO 74823
75608: POP
75609: POP
// end ;
75610: LD_VAR 0 1
75614: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
75615: LD_INT 0
75617: PPUSH
75618: PPUSH
75619: PPUSH
75620: PPUSH
75621: PPUSH
75622: PPUSH
75623: PPUSH
75624: PPUSH
// if not mc_bases then
75625: LD_EXP 47
75629: NOT
75630: IFFALSE 75634
// exit ;
75632: GO 76260
// for i = 1 to mc_bases do
75634: LD_ADDR_VAR 0 2
75638: PUSH
75639: DOUBLE
75640: LD_INT 1
75642: DEC
75643: ST_TO_ADDR
75644: LD_EXP 47
75648: PUSH
75649: FOR_TO
75650: IFFALSE 76258
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
75652: LD_EXP 76
75656: PUSH
75657: LD_VAR 0 2
75661: ARRAY
75662: NOT
75663: PUSH
75664: LD_EXP 76
75668: PUSH
75669: LD_VAR 0 2
75673: ARRAY
75674: PPUSH
75675: LD_INT 25
75677: PUSH
75678: LD_INT 12
75680: PUSH
75681: EMPTY
75682: LIST
75683: LIST
75684: PPUSH
75685: CALL_OW 72
75689: NOT
75690: OR
75691: IFFALSE 75695
// continue ;
75693: GO 75649
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
75695: LD_ADDR_VAR 0 5
75699: PUSH
75700: LD_EXP 76
75704: PUSH
75705: LD_VAR 0 2
75709: ARRAY
75710: PUSH
75711: LD_INT 1
75713: ARRAY
75714: PPUSH
75715: CALL_OW 255
75719: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
75720: LD_VAR 0 5
75724: PPUSH
75725: LD_INT 2
75727: PPUSH
75728: CALL_OW 325
75732: IFFALSE 75985
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
75734: LD_ADDR_VAR 0 4
75738: PUSH
75739: LD_EXP 76
75743: PUSH
75744: LD_VAR 0 2
75748: ARRAY
75749: PPUSH
75750: LD_INT 25
75752: PUSH
75753: LD_INT 16
75755: PUSH
75756: EMPTY
75757: LIST
75758: LIST
75759: PPUSH
75760: CALL_OW 72
75764: ST_TO_ADDR
// if tmp < 6 then
75765: LD_VAR 0 4
75769: PUSH
75770: LD_INT 6
75772: LESS
75773: IFFALSE 75985
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
75775: LD_ADDR_VAR 0 6
75779: PUSH
75780: LD_EXP 47
75784: PUSH
75785: LD_VAR 0 2
75789: ARRAY
75790: PPUSH
75791: LD_INT 2
75793: PUSH
75794: LD_INT 30
75796: PUSH
75797: LD_INT 0
75799: PUSH
75800: EMPTY
75801: LIST
75802: LIST
75803: PUSH
75804: LD_INT 30
75806: PUSH
75807: LD_INT 1
75809: PUSH
75810: EMPTY
75811: LIST
75812: LIST
75813: PUSH
75814: EMPTY
75815: LIST
75816: LIST
75817: LIST
75818: PPUSH
75819: CALL_OW 72
75823: ST_TO_ADDR
// if depot then
75824: LD_VAR 0 6
75828: IFFALSE 75985
// begin selected := 0 ;
75830: LD_ADDR_VAR 0 7
75834: PUSH
75835: LD_INT 0
75837: ST_TO_ADDR
// for j in depot do
75838: LD_ADDR_VAR 0 3
75842: PUSH
75843: LD_VAR 0 6
75847: PUSH
75848: FOR_IN
75849: IFFALSE 75880
// begin if UnitsInside ( j ) < 6 then
75851: LD_VAR 0 3
75855: PPUSH
75856: CALL_OW 313
75860: PUSH
75861: LD_INT 6
75863: LESS
75864: IFFALSE 75878
// begin selected := j ;
75866: LD_ADDR_VAR 0 7
75870: PUSH
75871: LD_VAR 0 3
75875: ST_TO_ADDR
// break ;
75876: GO 75880
// end ; end ;
75878: GO 75848
75880: POP
75881: POP
// if selected then
75882: LD_VAR 0 7
75886: IFFALSE 75985
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
75888: LD_ADDR_VAR 0 3
75892: PUSH
75893: LD_EXP 76
75897: PUSH
75898: LD_VAR 0 2
75902: ARRAY
75903: PPUSH
75904: LD_INT 25
75906: PUSH
75907: LD_INT 12
75909: PUSH
75910: EMPTY
75911: LIST
75912: LIST
75913: PPUSH
75914: CALL_OW 72
75918: PUSH
75919: FOR_IN
75920: IFFALSE 75983
// if not HasTask ( j ) then
75922: LD_VAR 0 3
75926: PPUSH
75927: CALL_OW 314
75931: NOT
75932: IFFALSE 75981
// begin if not IsInUnit ( j ) then
75934: LD_VAR 0 3
75938: PPUSH
75939: CALL_OW 310
75943: NOT
75944: IFFALSE 75960
// ComEnterUnit ( j , selected ) ;
75946: LD_VAR 0 3
75950: PPUSH
75951: LD_VAR 0 7
75955: PPUSH
75956: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
75960: LD_VAR 0 3
75964: PPUSH
75965: LD_INT 16
75967: PPUSH
75968: CALL_OW 183
// AddComExitBuilding ( j ) ;
75972: LD_VAR 0 3
75976: PPUSH
75977: CALL_OW 182
// end ;
75981: GO 75919
75983: POP
75984: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
75985: LD_VAR 0 5
75989: PPUSH
75990: LD_INT 11
75992: PPUSH
75993: CALL_OW 325
75997: IFFALSE 76256
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
75999: LD_ADDR_VAR 0 4
76003: PUSH
76004: LD_EXP 76
76008: PUSH
76009: LD_VAR 0 2
76013: ARRAY
76014: PPUSH
76015: LD_INT 25
76017: PUSH
76018: LD_INT 16
76020: PUSH
76021: EMPTY
76022: LIST
76023: LIST
76024: PPUSH
76025: CALL_OW 72
76029: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
76030: LD_VAR 0 4
76034: PUSH
76035: LD_INT 6
76037: GREATEREQUAL
76038: PUSH
76039: LD_VAR 0 5
76043: PPUSH
76044: LD_INT 2
76046: PPUSH
76047: CALL_OW 325
76051: NOT
76052: OR
76053: IFFALSE 76256
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
76055: LD_ADDR_VAR 0 8
76059: PUSH
76060: LD_EXP 47
76064: PUSH
76065: LD_VAR 0 2
76069: ARRAY
76070: PPUSH
76071: LD_INT 2
76073: PUSH
76074: LD_INT 30
76076: PUSH
76077: LD_INT 4
76079: PUSH
76080: EMPTY
76081: LIST
76082: LIST
76083: PUSH
76084: LD_INT 30
76086: PUSH
76087: LD_INT 5
76089: PUSH
76090: EMPTY
76091: LIST
76092: LIST
76093: PUSH
76094: EMPTY
76095: LIST
76096: LIST
76097: LIST
76098: PPUSH
76099: CALL_OW 72
76103: ST_TO_ADDR
// if barracks then
76104: LD_VAR 0 8
76108: IFFALSE 76256
// begin selected := 0 ;
76110: LD_ADDR_VAR 0 7
76114: PUSH
76115: LD_INT 0
76117: ST_TO_ADDR
// for j in barracks do
76118: LD_ADDR_VAR 0 3
76122: PUSH
76123: LD_VAR 0 8
76127: PUSH
76128: FOR_IN
76129: IFFALSE 76160
// begin if UnitsInside ( j ) < 6 then
76131: LD_VAR 0 3
76135: PPUSH
76136: CALL_OW 313
76140: PUSH
76141: LD_INT 6
76143: LESS
76144: IFFALSE 76158
// begin selected := j ;
76146: LD_ADDR_VAR 0 7
76150: PUSH
76151: LD_VAR 0 3
76155: ST_TO_ADDR
// break ;
76156: GO 76160
// end ; end ;
76158: GO 76128
76160: POP
76161: POP
// if selected then
76162: LD_VAR 0 7
76166: IFFALSE 76256
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
76168: LD_ADDR_VAR 0 3
76172: PUSH
76173: LD_EXP 76
76177: PUSH
76178: LD_VAR 0 2
76182: ARRAY
76183: PPUSH
76184: LD_INT 25
76186: PUSH
76187: LD_INT 12
76189: PUSH
76190: EMPTY
76191: LIST
76192: LIST
76193: PPUSH
76194: CALL_OW 72
76198: PUSH
76199: FOR_IN
76200: IFFALSE 76254
// if not IsInUnit ( j ) and not HasTask ( j ) then
76202: LD_VAR 0 3
76206: PPUSH
76207: CALL_OW 310
76211: NOT
76212: PUSH
76213: LD_VAR 0 3
76217: PPUSH
76218: CALL_OW 314
76222: NOT
76223: AND
76224: IFFALSE 76252
// begin ComEnterUnit ( j , selected ) ;
76226: LD_VAR 0 3
76230: PPUSH
76231: LD_VAR 0 7
76235: PPUSH
76236: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
76240: LD_VAR 0 3
76244: PPUSH
76245: LD_INT 15
76247: PPUSH
76248: CALL_OW 183
// end ;
76252: GO 76199
76254: POP
76255: POP
// end ; end ; end ; end ; end ;
76256: GO 75649
76258: POP
76259: POP
// end ;
76260: LD_VAR 0 1
76264: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
76265: LD_INT 0
76267: PPUSH
76268: PPUSH
76269: PPUSH
76270: PPUSH
// if not mc_bases then
76271: LD_EXP 47
76275: NOT
76276: IFFALSE 76280
// exit ;
76278: GO 76458
// for i = 1 to mc_bases do
76280: LD_ADDR_VAR 0 2
76284: PUSH
76285: DOUBLE
76286: LD_INT 1
76288: DEC
76289: ST_TO_ADDR
76290: LD_EXP 47
76294: PUSH
76295: FOR_TO
76296: IFFALSE 76456
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
76298: LD_ADDR_VAR 0 4
76302: PUSH
76303: LD_EXP 47
76307: PUSH
76308: LD_VAR 0 2
76312: ARRAY
76313: PPUSH
76314: LD_INT 25
76316: PUSH
76317: LD_INT 9
76319: PUSH
76320: EMPTY
76321: LIST
76322: LIST
76323: PPUSH
76324: CALL_OW 72
76328: ST_TO_ADDR
// if not tmp then
76329: LD_VAR 0 4
76333: NOT
76334: IFFALSE 76338
// continue ;
76336: GO 76295
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
76338: LD_EXP 73
76342: PUSH
76343: LD_VAR 0 2
76347: ARRAY
76348: PPUSH
76349: LD_INT 29
76351: PPUSH
76352: CALL_OW 325
76356: NOT
76357: PUSH
76358: LD_EXP 73
76362: PUSH
76363: LD_VAR 0 2
76367: ARRAY
76368: PPUSH
76369: LD_INT 28
76371: PPUSH
76372: CALL_OW 325
76376: NOT
76377: AND
76378: IFFALSE 76382
// continue ;
76380: GO 76295
// for j in tmp do
76382: LD_ADDR_VAR 0 3
76386: PUSH
76387: LD_VAR 0 4
76391: PUSH
76392: FOR_IN
76393: IFFALSE 76452
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
76395: LD_VAR 0 3
76399: PUSH
76400: LD_EXP 50
76404: PUSH
76405: LD_VAR 0 2
76409: ARRAY
76410: PUSH
76411: LD_INT 1
76413: ARRAY
76414: IN
76415: NOT
76416: PUSH
76417: LD_VAR 0 3
76421: PUSH
76422: LD_EXP 50
76426: PUSH
76427: LD_VAR 0 2
76431: ARRAY
76432: PUSH
76433: LD_INT 2
76435: ARRAY
76436: IN
76437: NOT
76438: AND
76439: IFFALSE 76450
// ComSpaceTimeShoot ( j ) ;
76441: LD_VAR 0 3
76445: PPUSH
76446: CALL 20312 0 1
76450: GO 76392
76452: POP
76453: POP
// end ;
76454: GO 76295
76456: POP
76457: POP
// end ;
76458: LD_VAR 0 1
76462: RET
// export function MC_TeleportExit ( ) ; var i , j , x , y , save_point , tmp , teleports , sci ; begin
76463: LD_INT 0
76465: PPUSH
76466: PPUSH
76467: PPUSH
76468: PPUSH
76469: PPUSH
76470: PPUSH
76471: PPUSH
76472: PPUSH
76473: PPUSH
// if not mc_bases then
76474: LD_EXP 47
76478: NOT
76479: IFFALSE 76483
// exit ;
76481: GO 77105
// for i = 1 to mc_bases do
76483: LD_ADDR_VAR 0 2
76487: PUSH
76488: DOUBLE
76489: LD_INT 1
76491: DEC
76492: ST_TO_ADDR
76493: LD_EXP 47
76497: PUSH
76498: FOR_TO
76499: IFFALSE 77103
// begin if not mc_teleport_exit [ i ] or GetTech ( tech_targTeleport , mc_sides [ i ] ) <> state_researched then
76501: LD_EXP 82
76505: PUSH
76506: LD_VAR 0 2
76510: ARRAY
76511: NOT
76512: PUSH
76513: LD_INT 38
76515: PPUSH
76516: LD_EXP 73
76520: PUSH
76521: LD_VAR 0 2
76525: ARRAY
76526: PPUSH
76527: CALL_OW 321
76531: PUSH
76532: LD_INT 2
76534: NONEQUAL
76535: OR
76536: IFFALSE 76540
// continue ;
76538: GO 76498
// teleports := UnitFilter ( mc_bases [ i ] , [ f_btype , b_teleport ] ) ;
76540: LD_ADDR_VAR 0 8
76544: PUSH
76545: LD_EXP 47
76549: PUSH
76550: LD_VAR 0 2
76554: ARRAY
76555: PPUSH
76556: LD_INT 30
76558: PUSH
76559: LD_INT 34
76561: PUSH
76562: EMPTY
76563: LIST
76564: LIST
76565: PPUSH
76566: CALL_OW 72
76570: ST_TO_ADDR
// sci := FilterByTag ( UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) , 0 ) ;
76571: LD_ADDR_VAR 0 9
76575: PUSH
76576: LD_EXP 47
76580: PUSH
76581: LD_VAR 0 2
76585: ARRAY
76586: PPUSH
76587: LD_INT 25
76589: PUSH
76590: LD_INT 4
76592: PUSH
76593: EMPTY
76594: LIST
76595: LIST
76596: PPUSH
76597: CALL_OW 72
76601: PPUSH
76602: LD_INT 0
76604: PPUSH
76605: CALL 52876 0 2
76609: ST_TO_ADDR
// if not sci or not teleports or FilterByTag ( mc_bases [ i ] , 124 ) then
76610: LD_VAR 0 9
76614: NOT
76615: PUSH
76616: LD_VAR 0 8
76620: NOT
76621: OR
76622: PUSH
76623: LD_EXP 47
76627: PUSH
76628: LD_VAR 0 2
76632: ARRAY
76633: PPUSH
76634: LD_INT 124
76636: PPUSH
76637: CALL 52876 0 2
76641: OR
76642: IFFALSE 76646
// continue ;
76644: GO 76498
// if mc_teleport_exit_set [ i ] < mc_teleport_exit [ i ] and mc_teleport_exit_set [ i ] < teleports then
76646: LD_EXP 83
76650: PUSH
76651: LD_VAR 0 2
76655: ARRAY
76656: PUSH
76657: LD_EXP 82
76661: PUSH
76662: LD_VAR 0 2
76666: ARRAY
76667: LESS
76668: PUSH
76669: LD_EXP 83
76673: PUSH
76674: LD_VAR 0 2
76678: ARRAY
76679: PUSH
76680: LD_VAR 0 8
76684: LESS
76685: AND
76686: IFFALSE 77101
// begin tmp := sci [ 1 ] ;
76688: LD_ADDR_VAR 0 7
76692: PUSH
76693: LD_VAR 0 9
76697: PUSH
76698: LD_INT 1
76700: ARRAY
76701: ST_TO_ADDR
// SetTag ( tmp , 124 ) ;
76702: LD_VAR 0 7
76706: PPUSH
76707: LD_INT 124
76709: PPUSH
76710: CALL_OW 109
// for j = mc_teleport_exit [ i ] downto mc_teleport_exit [ i ] do
76714: LD_ADDR_VAR 0 3
76718: PUSH
76719: DOUBLE
76720: LD_EXP 82
76724: PUSH
76725: LD_VAR 0 2
76729: ARRAY
76730: INC
76731: ST_TO_ADDR
76732: LD_EXP 82
76736: PUSH
76737: LD_VAR 0 2
76741: ARRAY
76742: PUSH
76743: FOR_DOWNTO
76744: IFFALSE 77087
// begin if IsInUnit ( tmp ) then
76746: LD_VAR 0 7
76750: PPUSH
76751: CALL_OW 310
76755: IFFALSE 76766
// ComExitBuilding ( tmp ) ;
76757: LD_VAR 0 7
76761: PPUSH
76762: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
76766: LD_INT 35
76768: PPUSH
76769: CALL_OW 67
// until not IsInUnit ( tmp ) and not HasTask ( tmp ) ;
76773: LD_VAR 0 7
76777: PPUSH
76778: CALL_OW 310
76782: NOT
76783: PUSH
76784: LD_VAR 0 7
76788: PPUSH
76789: CALL_OW 314
76793: NOT
76794: AND
76795: IFFALSE 76766
// save_point := [ GetX ( tmp ) , GetY ( tmp ) ] ;
76797: LD_ADDR_VAR 0 6
76801: PUSH
76802: LD_VAR 0 7
76806: PPUSH
76807: CALL_OW 250
76811: PUSH
76812: LD_VAR 0 7
76816: PPUSH
76817: CALL_OW 251
76821: PUSH
76822: EMPTY
76823: LIST
76824: LIST
76825: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
76826: LD_INT 35
76828: PPUSH
76829: CALL_OW 67
// x := mc_teleport_exit [ i ] [ j ] [ 1 ] ;
76833: LD_ADDR_VAR 0 4
76837: PUSH
76838: LD_EXP 82
76842: PUSH
76843: LD_VAR 0 2
76847: ARRAY
76848: PUSH
76849: LD_VAR 0 3
76853: ARRAY
76854: PUSH
76855: LD_INT 1
76857: ARRAY
76858: ST_TO_ADDR
// y := mc_teleport_exit [ i ] [ j ] [ 2 ] ;
76859: LD_ADDR_VAR 0 5
76863: PUSH
76864: LD_EXP 82
76868: PUSH
76869: LD_VAR 0 2
76873: ARRAY
76874: PUSH
76875: LD_VAR 0 3
76879: ARRAY
76880: PUSH
76881: LD_INT 2
76883: ARRAY
76884: ST_TO_ADDR
// if DangerAtRange ( tmp , 10 ) [ 4 ] then
76885: LD_VAR 0 7
76889: PPUSH
76890: LD_INT 10
76892: PPUSH
76893: CALL 26908 0 2
76897: PUSH
76898: LD_INT 4
76900: ARRAY
76901: IFFALSE 76939
// begin ComMoveXY ( tmp , save_point [ 1 ] , save_point [ 2 ] ) ;
76903: LD_VAR 0 7
76907: PPUSH
76908: LD_VAR 0 6
76912: PUSH
76913: LD_INT 1
76915: ARRAY
76916: PPUSH
76917: LD_VAR 0 6
76921: PUSH
76922: LD_INT 2
76924: ARRAY
76925: PPUSH
76926: CALL_OW 111
// wait ( 0 0$10 ) ;
76930: LD_INT 350
76932: PPUSH
76933: CALL_OW 67
// end else
76937: GO 76965
// begin ComMoveXY ( tmp , x , y ) ;
76939: LD_VAR 0 7
76943: PPUSH
76944: LD_VAR 0 4
76948: PPUSH
76949: LD_VAR 0 5
76953: PPUSH
76954: CALL_OW 111
// wait ( 0 0$3 ) ;
76958: LD_INT 105
76960: PPUSH
76961: CALL_OW 67
// end ; until IsAt ( tmp , x , y ) ;
76965: LD_VAR 0 7
76969: PPUSH
76970: LD_VAR 0 4
76974: PPUSH
76975: LD_VAR 0 5
76979: PPUSH
76980: CALL_OW 307
76984: IFFALSE 76826
// ComTeleportExit ( tmp , x , y , teleports [ j ] ) ;
76986: LD_VAR 0 7
76990: PPUSH
76991: LD_VAR 0 4
76995: PPUSH
76996: LD_VAR 0 5
77000: PPUSH
77001: LD_VAR 0 8
77005: PUSH
77006: LD_VAR 0 3
77010: ARRAY
77011: PPUSH
77012: CALL_OW 156
// repeat wait ( 0 0$1 ) ;
77016: LD_INT 35
77018: PPUSH
77019: CALL_OW 67
// until not HasTask ( tmp ) ;
77023: LD_VAR 0 7
77027: PPUSH
77028: CALL_OW 314
77032: NOT
77033: IFFALSE 77016
// mc_teleport_exit_set := ReplaceIn ( mc_teleport_exit_set , [ i , mc_teleport_exit_set [ i ] + 1 ] , teleports [ j ] ) ;
77035: LD_ADDR_EXP 83
77039: PUSH
77040: LD_EXP 83
77044: PPUSH
77045: LD_VAR 0 2
77049: PUSH
77050: LD_EXP 83
77054: PUSH
77055: LD_VAR 0 2
77059: ARRAY
77060: PUSH
77061: LD_INT 1
77063: PLUS
77064: PUSH
77065: EMPTY
77066: LIST
77067: LIST
77068: PPUSH
77069: LD_VAR 0 8
77073: PUSH
77074: LD_VAR 0 3
77078: ARRAY
77079: PPUSH
77080: CALL 24315 0 3
77084: ST_TO_ADDR
// end ;
77085: GO 76743
77087: POP
77088: POP
// MC_Reset ( i , 124 ) ;
77089: LD_VAR 0 2
77093: PPUSH
77094: LD_INT 124
77096: PPUSH
77097: CALL 60660 0 2
// end ; end ;
77101: GO 76498
77103: POP
77104: POP
// end ;
77105: LD_VAR 0 1
77109: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
77110: LD_INT 0
77112: PPUSH
77113: PPUSH
77114: PPUSH
// if not mc_bases then
77115: LD_EXP 47
77119: NOT
77120: IFFALSE 77124
// exit ;
77122: GO 77730
// for i = 1 to mc_bases do
77124: LD_ADDR_VAR 0 2
77128: PUSH
77129: DOUBLE
77130: LD_INT 1
77132: DEC
77133: ST_TO_ADDR
77134: LD_EXP 47
77138: PUSH
77139: FOR_TO
77140: IFFALSE 77728
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
77142: LD_ADDR_VAR 0 3
77146: PUSH
77147: LD_EXP 47
77151: PUSH
77152: LD_VAR 0 2
77156: ARRAY
77157: PPUSH
77158: LD_INT 25
77160: PUSH
77161: LD_INT 4
77163: PUSH
77164: EMPTY
77165: LIST
77166: LIST
77167: PPUSH
77168: CALL_OW 72
77172: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
77173: LD_VAR 0 3
77177: NOT
77178: PUSH
77179: LD_EXP 84
77183: PUSH
77184: LD_VAR 0 2
77188: ARRAY
77189: NOT
77190: OR
77191: PUSH
77192: LD_EXP 47
77196: PUSH
77197: LD_VAR 0 2
77201: ARRAY
77202: PPUSH
77203: LD_INT 2
77205: PUSH
77206: LD_INT 30
77208: PUSH
77209: LD_INT 0
77211: PUSH
77212: EMPTY
77213: LIST
77214: LIST
77215: PUSH
77216: LD_INT 30
77218: PUSH
77219: LD_INT 1
77221: PUSH
77222: EMPTY
77223: LIST
77224: LIST
77225: PUSH
77226: EMPTY
77227: LIST
77228: LIST
77229: LIST
77230: PPUSH
77231: CALL_OW 72
77235: NOT
77236: OR
77237: IFFALSE 77287
// begin if mc_deposits_finder [ i ] then
77239: LD_EXP 85
77243: PUSH
77244: LD_VAR 0 2
77248: ARRAY
77249: IFFALSE 77285
// begin MC_Reset ( i , 125 ) ;
77251: LD_VAR 0 2
77255: PPUSH
77256: LD_INT 125
77258: PPUSH
77259: CALL 60660 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
77263: LD_ADDR_EXP 85
77267: PUSH
77268: LD_EXP 85
77272: PPUSH
77273: LD_VAR 0 2
77277: PPUSH
77278: EMPTY
77279: PPUSH
77280: CALL_OW 1
77284: ST_TO_ADDR
// end ; continue ;
77285: GO 77139
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
77287: LD_EXP 84
77291: PUSH
77292: LD_VAR 0 2
77296: ARRAY
77297: PUSH
77298: LD_INT 1
77300: ARRAY
77301: PUSH
77302: LD_INT 3
77304: ARRAY
77305: PUSH
77306: LD_INT 1
77308: EQUAL
77309: PUSH
77310: LD_INT 20
77312: PPUSH
77313: LD_EXP 73
77317: PUSH
77318: LD_VAR 0 2
77322: ARRAY
77323: PPUSH
77324: CALL_OW 321
77328: PUSH
77329: LD_INT 2
77331: NONEQUAL
77332: AND
77333: IFFALSE 77383
// begin if mc_deposits_finder [ i ] then
77335: LD_EXP 85
77339: PUSH
77340: LD_VAR 0 2
77344: ARRAY
77345: IFFALSE 77381
// begin MC_Reset ( i , 125 ) ;
77347: LD_VAR 0 2
77351: PPUSH
77352: LD_INT 125
77354: PPUSH
77355: CALL 60660 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
77359: LD_ADDR_EXP 85
77363: PUSH
77364: LD_EXP 85
77368: PPUSH
77369: LD_VAR 0 2
77373: PPUSH
77374: EMPTY
77375: PPUSH
77376: CALL_OW 1
77380: ST_TO_ADDR
// end ; continue ;
77381: GO 77139
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
77383: LD_EXP 84
77387: PUSH
77388: LD_VAR 0 2
77392: ARRAY
77393: PUSH
77394: LD_INT 1
77396: ARRAY
77397: PUSH
77398: LD_INT 1
77400: ARRAY
77401: PPUSH
77402: LD_EXP 84
77406: PUSH
77407: LD_VAR 0 2
77411: ARRAY
77412: PUSH
77413: LD_INT 1
77415: ARRAY
77416: PUSH
77417: LD_INT 2
77419: ARRAY
77420: PPUSH
77421: LD_EXP 73
77425: PUSH
77426: LD_VAR 0 2
77430: ARRAY
77431: PPUSH
77432: CALL_OW 440
77436: IFFALSE 77479
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
77438: LD_ADDR_EXP 84
77442: PUSH
77443: LD_EXP 84
77447: PPUSH
77448: LD_VAR 0 2
77452: PPUSH
77453: LD_EXP 84
77457: PUSH
77458: LD_VAR 0 2
77462: ARRAY
77463: PPUSH
77464: LD_INT 1
77466: PPUSH
77467: CALL_OW 3
77471: PPUSH
77472: CALL_OW 1
77476: ST_TO_ADDR
77477: GO 77726
// begin if not mc_deposits_finder [ i ] then
77479: LD_EXP 85
77483: PUSH
77484: LD_VAR 0 2
77488: ARRAY
77489: NOT
77490: IFFALSE 77542
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
77492: LD_ADDR_EXP 85
77496: PUSH
77497: LD_EXP 85
77501: PPUSH
77502: LD_VAR 0 2
77506: PPUSH
77507: LD_VAR 0 3
77511: PUSH
77512: LD_INT 1
77514: ARRAY
77515: PUSH
77516: EMPTY
77517: LIST
77518: PPUSH
77519: CALL_OW 1
77523: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
77524: LD_VAR 0 3
77528: PUSH
77529: LD_INT 1
77531: ARRAY
77532: PPUSH
77533: LD_INT 125
77535: PPUSH
77536: CALL_OW 109
// end else
77540: GO 77726
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
77542: LD_EXP 85
77546: PUSH
77547: LD_VAR 0 2
77551: ARRAY
77552: PUSH
77553: LD_INT 1
77555: ARRAY
77556: PPUSH
77557: CALL_OW 310
77561: IFFALSE 77584
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
77563: LD_EXP 85
77567: PUSH
77568: LD_VAR 0 2
77572: ARRAY
77573: PUSH
77574: LD_INT 1
77576: ARRAY
77577: PPUSH
77578: CALL_OW 122
77582: GO 77726
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
77584: LD_EXP 85
77588: PUSH
77589: LD_VAR 0 2
77593: ARRAY
77594: PUSH
77595: LD_INT 1
77597: ARRAY
77598: PPUSH
77599: CALL_OW 314
77603: NOT
77604: PUSH
77605: LD_EXP 85
77609: PUSH
77610: LD_VAR 0 2
77614: ARRAY
77615: PUSH
77616: LD_INT 1
77618: ARRAY
77619: PPUSH
77620: LD_EXP 84
77624: PUSH
77625: LD_VAR 0 2
77629: ARRAY
77630: PUSH
77631: LD_INT 1
77633: ARRAY
77634: PUSH
77635: LD_INT 1
77637: ARRAY
77638: PPUSH
77639: LD_EXP 84
77643: PUSH
77644: LD_VAR 0 2
77648: ARRAY
77649: PUSH
77650: LD_INT 1
77652: ARRAY
77653: PUSH
77654: LD_INT 2
77656: ARRAY
77657: PPUSH
77658: CALL_OW 297
77662: PUSH
77663: LD_INT 6
77665: GREATER
77666: AND
77667: IFFALSE 77726
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
77669: LD_EXP 85
77673: PUSH
77674: LD_VAR 0 2
77678: ARRAY
77679: PUSH
77680: LD_INT 1
77682: ARRAY
77683: PPUSH
77684: LD_EXP 84
77688: PUSH
77689: LD_VAR 0 2
77693: ARRAY
77694: PUSH
77695: LD_INT 1
77697: ARRAY
77698: PUSH
77699: LD_INT 1
77701: ARRAY
77702: PPUSH
77703: LD_EXP 84
77707: PUSH
77708: LD_VAR 0 2
77712: ARRAY
77713: PUSH
77714: LD_INT 1
77716: ARRAY
77717: PUSH
77718: LD_INT 2
77720: ARRAY
77721: PPUSH
77722: CALL_OW 111
// end ; end ; end ;
77726: GO 77139
77728: POP
77729: POP
// end ;
77730: LD_VAR 0 1
77734: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts , mcts , x ; begin
77735: LD_INT 0
77737: PPUSH
77738: PPUSH
77739: PPUSH
77740: PPUSH
77741: PPUSH
77742: PPUSH
77743: PPUSH
77744: PPUSH
77745: PPUSH
77746: PPUSH
77747: PPUSH
// if not mc_bases then
77748: LD_EXP 47
77752: NOT
77753: IFFALSE 77757
// exit ;
77755: GO 78697
// for i = 1 to mc_bases do
77757: LD_ADDR_VAR 0 2
77761: PUSH
77762: DOUBLE
77763: LD_INT 1
77765: DEC
77766: ST_TO_ADDR
77767: LD_EXP 47
77771: PUSH
77772: FOR_TO
77773: IFFALSE 78695
// begin if not mc_bases [ i ] or mc_scan [ i ] then
77775: LD_EXP 47
77779: PUSH
77780: LD_VAR 0 2
77784: ARRAY
77785: NOT
77786: PUSH
77787: LD_EXP 70
77791: PUSH
77792: LD_VAR 0 2
77796: ARRAY
77797: OR
77798: IFFALSE 77802
// continue ;
77800: GO 77772
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
77802: LD_ADDR_VAR 0 7
77806: PUSH
77807: LD_EXP 47
77811: PUSH
77812: LD_VAR 0 2
77816: ARRAY
77817: PUSH
77818: LD_INT 1
77820: ARRAY
77821: PPUSH
77822: CALL_OW 248
77826: ST_TO_ADDR
// if nation = 3 or not UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) then
77827: LD_VAR 0 7
77831: PUSH
77832: LD_INT 3
77834: EQUAL
77835: PUSH
77836: LD_EXP 66
77840: PUSH
77841: LD_VAR 0 2
77845: ARRAY
77846: PUSH
77847: LD_EXP 69
77851: PUSH
77852: LD_VAR 0 2
77856: ARRAY
77857: UNION
77858: PPUSH
77859: LD_INT 33
77861: PUSH
77862: LD_INT 2
77864: PUSH
77865: EMPTY
77866: LIST
77867: LIST
77868: PPUSH
77869: CALL_OW 72
77873: NOT
77874: OR
77875: IFFALSE 77879
// continue ;
77877: GO 77772
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
77879: LD_ADDR_VAR 0 9
77883: PUSH
77884: LD_EXP 47
77888: PUSH
77889: LD_VAR 0 2
77893: ARRAY
77894: PPUSH
77895: LD_INT 30
77897: PUSH
77898: LD_INT 36
77900: PUSH
77901: EMPTY
77902: LIST
77903: LIST
77904: PPUSH
77905: CALL_OW 72
77909: ST_TO_ADDR
// mcts := UnitFilter ( mc_vehicles [ i ] , [ f_weapon , ar_control_tower ] ) ;
77910: LD_ADDR_VAR 0 10
77914: PUSH
77915: LD_EXP 66
77919: PUSH
77920: LD_VAR 0 2
77924: ARRAY
77925: PPUSH
77926: LD_INT 34
77928: PUSH
77929: LD_INT 31
77931: PUSH
77932: EMPTY
77933: LIST
77934: LIST
77935: PPUSH
77936: CALL_OW 72
77940: ST_TO_ADDR
// if not cts and not mcts then
77941: LD_VAR 0 9
77945: NOT
77946: PUSH
77947: LD_VAR 0 10
77951: NOT
77952: AND
77953: IFFALSE 77957
// continue ;
77955: GO 77772
// x := cts ;
77957: LD_ADDR_VAR 0 11
77961: PUSH
77962: LD_VAR 0 9
77966: ST_TO_ADDR
// if not x then
77967: LD_VAR 0 11
77971: NOT
77972: IFFALSE 77984
// x := mcts ;
77974: LD_ADDR_VAR 0 11
77978: PUSH
77979: LD_VAR 0 10
77983: ST_TO_ADDR
// if not x then
77984: LD_VAR 0 11
77988: NOT
77989: IFFALSE 77993
// continue ;
77991: GO 77772
// if mc_remote_driver [ i ] then
77993: LD_EXP 87
77997: PUSH
77998: LD_VAR 0 2
78002: ARRAY
78003: IFFALSE 78390
// for j in mc_remote_driver [ i ] do
78005: LD_ADDR_VAR 0 3
78009: PUSH
78010: LD_EXP 87
78014: PUSH
78015: LD_VAR 0 2
78019: ARRAY
78020: PUSH
78021: FOR_IN
78022: IFFALSE 78388
// begin if GetClass ( j ) <> 3 then
78024: LD_VAR 0 3
78028: PPUSH
78029: CALL_OW 257
78033: PUSH
78034: LD_INT 3
78036: NONEQUAL
78037: IFFALSE 78090
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff j ) ;
78039: LD_ADDR_EXP 87
78043: PUSH
78044: LD_EXP 87
78048: PPUSH
78049: LD_VAR 0 2
78053: PPUSH
78054: LD_EXP 87
78058: PUSH
78059: LD_VAR 0 2
78063: ARRAY
78064: PUSH
78065: LD_VAR 0 3
78069: DIFF
78070: PPUSH
78071: CALL_OW 1
78075: ST_TO_ADDR
// SetTag ( j , 0 ) ;
78076: LD_VAR 0 3
78080: PPUSH
78081: LD_INT 0
78083: PPUSH
78084: CALL_OW 109
// continue ;
78088: GO 78021
// end ; if UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) and not IsDriver ( j ) then
78090: LD_EXP 66
78094: PUSH
78095: LD_VAR 0 2
78099: ARRAY
78100: PPUSH
78101: LD_INT 34
78103: PUSH
78104: LD_INT 31
78106: PUSH
78107: EMPTY
78108: LIST
78109: LIST
78110: PUSH
78111: LD_INT 58
78113: PUSH
78114: EMPTY
78115: LIST
78116: PUSH
78117: EMPTY
78118: LIST
78119: LIST
78120: PPUSH
78121: CALL_OW 72
78125: PUSH
78126: LD_VAR 0 3
78130: PPUSH
78131: CALL 52964 0 1
78135: NOT
78136: AND
78137: IFFALSE 78208
// begin if IsInUnit ( j ) then
78139: LD_VAR 0 3
78143: PPUSH
78144: CALL_OW 310
78148: IFFALSE 78159
// ComExitBuilding ( j ) ;
78150: LD_VAR 0 3
78154: PPUSH
78155: CALL_OW 122
// AddComEnterUnit ( j , UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) [ 1 ] ) ;
78159: LD_VAR 0 3
78163: PPUSH
78164: LD_EXP 66
78168: PUSH
78169: LD_VAR 0 2
78173: ARRAY
78174: PPUSH
78175: LD_INT 34
78177: PUSH
78178: LD_INT 31
78180: PUSH
78181: EMPTY
78182: LIST
78183: LIST
78184: PUSH
78185: LD_INT 58
78187: PUSH
78188: EMPTY
78189: LIST
78190: PUSH
78191: EMPTY
78192: LIST
78193: LIST
78194: PPUSH
78195: CALL_OW 72
78199: PUSH
78200: LD_INT 1
78202: ARRAY
78203: PPUSH
78204: CALL_OW 180
// end ; if not IsInUnit ( j ) or ( GetBType ( IsInUnit ( j ) ) <> b_control_tower and not IsDriver ( j ) ) then
78208: LD_VAR 0 3
78212: PPUSH
78213: CALL_OW 310
78217: NOT
78218: PUSH
78219: LD_VAR 0 3
78223: PPUSH
78224: CALL_OW 310
78228: PPUSH
78229: CALL_OW 266
78233: PUSH
78234: LD_INT 36
78236: NONEQUAL
78237: PUSH
78238: LD_VAR 0 3
78242: PPUSH
78243: CALL 52964 0 1
78247: NOT
78248: AND
78249: OR
78250: IFFALSE 78386
// begin if IsInUnit ( j ) then
78252: LD_VAR 0 3
78256: PPUSH
78257: CALL_OW 310
78261: IFFALSE 78272
// ComExitBuilding ( j ) ;
78263: LD_VAR 0 3
78267: PPUSH
78268: CALL_OW 122
// ct := 0 ;
78272: LD_ADDR_VAR 0 8
78276: PUSH
78277: LD_INT 0
78279: ST_TO_ADDR
// for k in x do
78280: LD_ADDR_VAR 0 4
78284: PUSH
78285: LD_VAR 0 11
78289: PUSH
78290: FOR_IN
78291: IFFALSE 78364
// if ( GetWeapon ( k ) = ar_control_tower and not IsDrivenBy ( k ) ) or ( GetBType ( k ) = b_control_tower and UnitsInside ( k ) < 3 ) then
78293: LD_VAR 0 4
78297: PPUSH
78298: CALL_OW 264
78302: PUSH
78303: LD_INT 31
78305: EQUAL
78306: PUSH
78307: LD_VAR 0 4
78311: PPUSH
78312: CALL_OW 311
78316: NOT
78317: AND
78318: PUSH
78319: LD_VAR 0 4
78323: PPUSH
78324: CALL_OW 266
78328: PUSH
78329: LD_INT 36
78331: EQUAL
78332: PUSH
78333: LD_VAR 0 4
78337: PPUSH
78338: CALL_OW 313
78342: PUSH
78343: LD_INT 3
78345: LESS
78346: AND
78347: OR
78348: IFFALSE 78362
// begin ct := k ;
78350: LD_ADDR_VAR 0 8
78354: PUSH
78355: LD_VAR 0 4
78359: ST_TO_ADDR
// break ;
78360: GO 78364
// end ;
78362: GO 78290
78364: POP
78365: POP
// if ct then
78366: LD_VAR 0 8
78370: IFFALSE 78386
// ComEnterUnit ( j , ct ) ;
78372: LD_VAR 0 3
78376: PPUSH
78377: LD_VAR 0 8
78381: PPUSH
78382: CALL_OW 120
// end ; end ;
78386: GO 78021
78388: POP
78389: POP
// places := 0 ;
78390: LD_ADDR_VAR 0 5
78394: PUSH
78395: LD_INT 0
78397: ST_TO_ADDR
// for j = 1 to x do
78398: LD_ADDR_VAR 0 3
78402: PUSH
78403: DOUBLE
78404: LD_INT 1
78406: DEC
78407: ST_TO_ADDR
78408: LD_VAR 0 11
78412: PUSH
78413: FOR_TO
78414: IFFALSE 78490
// if GetWeapon ( x [ j ] ) = ar_control_tower then
78416: LD_VAR 0 11
78420: PUSH
78421: LD_VAR 0 3
78425: ARRAY
78426: PPUSH
78427: CALL_OW 264
78431: PUSH
78432: LD_INT 31
78434: EQUAL
78435: IFFALSE 78453
// places := places + 1 else
78437: LD_ADDR_VAR 0 5
78441: PUSH
78442: LD_VAR 0 5
78446: PUSH
78447: LD_INT 1
78449: PLUS
78450: ST_TO_ADDR
78451: GO 78488
// if GetBType ( x [ j ] ) = b_control_tower then
78453: LD_VAR 0 11
78457: PUSH
78458: LD_VAR 0 3
78462: ARRAY
78463: PPUSH
78464: CALL_OW 266
78468: PUSH
78469: LD_INT 36
78471: EQUAL
78472: IFFALSE 78488
// places := places + 3 ;
78474: LD_ADDR_VAR 0 5
78478: PUSH
78479: LD_VAR 0 5
78483: PUSH
78484: LD_INT 3
78486: PLUS
78487: ST_TO_ADDR
78488: GO 78413
78490: POP
78491: POP
// if places = 0 or places <= mc_remote_driver [ i ] then
78492: LD_VAR 0 5
78496: PUSH
78497: LD_INT 0
78499: EQUAL
78500: PUSH
78501: LD_VAR 0 5
78505: PUSH
78506: LD_EXP 87
78510: PUSH
78511: LD_VAR 0 2
78515: ARRAY
78516: LESSEQUAL
78517: OR
78518: IFFALSE 78522
// continue ;
78520: GO 77772
// tmp := SortBySkill ( UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] , 3 ) ;
78522: LD_ADDR_VAR 0 6
78526: PUSH
78527: LD_EXP 47
78531: PUSH
78532: LD_VAR 0 2
78536: ARRAY
78537: PPUSH
78538: LD_INT 25
78540: PUSH
78541: LD_INT 3
78543: PUSH
78544: EMPTY
78545: LIST
78546: LIST
78547: PPUSH
78548: CALL_OW 72
78552: PUSH
78553: LD_EXP 87
78557: PUSH
78558: LD_VAR 0 2
78562: ARRAY
78563: DIFF
78564: PPUSH
78565: LD_INT 3
78567: PPUSH
78568: CALL 53864 0 2
78572: ST_TO_ADDR
// for j in tmp do
78573: LD_ADDR_VAR 0 3
78577: PUSH
78578: LD_VAR 0 6
78582: PUSH
78583: FOR_IN
78584: IFFALSE 78619
// if GetTag ( j ) > 0 then
78586: LD_VAR 0 3
78590: PPUSH
78591: CALL_OW 110
78595: PUSH
78596: LD_INT 0
78598: GREATER
78599: IFFALSE 78617
// tmp := tmp diff j ;
78601: LD_ADDR_VAR 0 6
78605: PUSH
78606: LD_VAR 0 6
78610: PUSH
78611: LD_VAR 0 3
78615: DIFF
78616: ST_TO_ADDR
78617: GO 78583
78619: POP
78620: POP
// if not tmp then
78621: LD_VAR 0 6
78625: NOT
78626: IFFALSE 78630
// continue ;
78628: GO 77772
// if places then
78630: LD_VAR 0 5
78634: IFFALSE 78693
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
78636: LD_ADDR_EXP 87
78640: PUSH
78641: LD_EXP 87
78645: PPUSH
78646: LD_VAR 0 2
78650: PPUSH
78651: LD_EXP 87
78655: PUSH
78656: LD_VAR 0 2
78660: ARRAY
78661: PUSH
78662: LD_VAR 0 6
78666: PUSH
78667: LD_INT 1
78669: ARRAY
78670: UNION
78671: PPUSH
78672: CALL_OW 1
78676: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
78677: LD_VAR 0 6
78681: PUSH
78682: LD_INT 1
78684: ARRAY
78685: PPUSH
78686: LD_INT 126
78688: PPUSH
78689: CALL_OW 109
// end ; end ;
78693: GO 77772
78695: POP
78696: POP
// end ;
78697: LD_VAR 0 1
78701: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
78702: LD_INT 0
78704: PPUSH
78705: PPUSH
78706: PPUSH
78707: PPUSH
78708: PPUSH
78709: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
78710: LD_VAR 0 1
78714: NOT
78715: PUSH
78716: LD_VAR 0 2
78720: NOT
78721: OR
78722: PUSH
78723: LD_VAR 0 3
78727: NOT
78728: OR
78729: PUSH
78730: LD_VAR 0 4
78734: PUSH
78735: LD_INT 1
78737: PUSH
78738: LD_INT 2
78740: PUSH
78741: LD_INT 3
78743: PUSH
78744: LD_INT 4
78746: PUSH
78747: LD_INT 5
78749: PUSH
78750: LD_INT 8
78752: PUSH
78753: LD_INT 9
78755: PUSH
78756: LD_INT 15
78758: PUSH
78759: LD_INT 16
78761: PUSH
78762: EMPTY
78763: LIST
78764: LIST
78765: LIST
78766: LIST
78767: LIST
78768: LIST
78769: LIST
78770: LIST
78771: LIST
78772: IN
78773: NOT
78774: OR
78775: IFFALSE 78779
// exit ;
78777: GO 79679
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
78779: LD_ADDR_VAR 0 2
78783: PUSH
78784: LD_VAR 0 2
78788: PPUSH
78789: LD_INT 21
78791: PUSH
78792: LD_INT 3
78794: PUSH
78795: EMPTY
78796: LIST
78797: LIST
78798: PUSH
78799: LD_INT 24
78801: PUSH
78802: LD_INT 250
78804: PUSH
78805: EMPTY
78806: LIST
78807: LIST
78808: PUSH
78809: EMPTY
78810: LIST
78811: LIST
78812: PPUSH
78813: CALL_OW 72
78817: ST_TO_ADDR
// case class of 1 , 15 :
78818: LD_VAR 0 4
78822: PUSH
78823: LD_INT 1
78825: DOUBLE
78826: EQUAL
78827: IFTRUE 78837
78829: LD_INT 15
78831: DOUBLE
78832: EQUAL
78833: IFTRUE 78837
78835: GO 78922
78837: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
78838: LD_ADDR_VAR 0 8
78842: PUSH
78843: LD_VAR 0 2
78847: PPUSH
78848: LD_INT 2
78850: PUSH
78851: LD_INT 30
78853: PUSH
78854: LD_INT 32
78856: PUSH
78857: EMPTY
78858: LIST
78859: LIST
78860: PUSH
78861: LD_INT 30
78863: PUSH
78864: LD_INT 31
78866: PUSH
78867: EMPTY
78868: LIST
78869: LIST
78870: PUSH
78871: EMPTY
78872: LIST
78873: LIST
78874: LIST
78875: PPUSH
78876: CALL_OW 72
78880: PUSH
78881: LD_VAR 0 2
78885: PPUSH
78886: LD_INT 2
78888: PUSH
78889: LD_INT 30
78891: PUSH
78892: LD_INT 4
78894: PUSH
78895: EMPTY
78896: LIST
78897: LIST
78898: PUSH
78899: LD_INT 30
78901: PUSH
78902: LD_INT 5
78904: PUSH
78905: EMPTY
78906: LIST
78907: LIST
78908: PUSH
78909: EMPTY
78910: LIST
78911: LIST
78912: LIST
78913: PPUSH
78914: CALL_OW 72
78918: ADD
78919: ST_TO_ADDR
78920: GO 79168
78922: LD_INT 2
78924: DOUBLE
78925: EQUAL
78926: IFTRUE 78936
78928: LD_INT 16
78930: DOUBLE
78931: EQUAL
78932: IFTRUE 78936
78934: GO 78982
78936: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
78937: LD_ADDR_VAR 0 8
78941: PUSH
78942: LD_VAR 0 2
78946: PPUSH
78947: LD_INT 2
78949: PUSH
78950: LD_INT 30
78952: PUSH
78953: LD_INT 0
78955: PUSH
78956: EMPTY
78957: LIST
78958: LIST
78959: PUSH
78960: LD_INT 30
78962: PUSH
78963: LD_INT 1
78965: PUSH
78966: EMPTY
78967: LIST
78968: LIST
78969: PUSH
78970: EMPTY
78971: LIST
78972: LIST
78973: LIST
78974: PPUSH
78975: CALL_OW 72
78979: ST_TO_ADDR
78980: GO 79168
78982: LD_INT 3
78984: DOUBLE
78985: EQUAL
78986: IFTRUE 78990
78988: GO 79036
78990: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
78991: LD_ADDR_VAR 0 8
78995: PUSH
78996: LD_VAR 0 2
79000: PPUSH
79001: LD_INT 2
79003: PUSH
79004: LD_INT 30
79006: PUSH
79007: LD_INT 2
79009: PUSH
79010: EMPTY
79011: LIST
79012: LIST
79013: PUSH
79014: LD_INT 30
79016: PUSH
79017: LD_INT 3
79019: PUSH
79020: EMPTY
79021: LIST
79022: LIST
79023: PUSH
79024: EMPTY
79025: LIST
79026: LIST
79027: LIST
79028: PPUSH
79029: CALL_OW 72
79033: ST_TO_ADDR
79034: GO 79168
79036: LD_INT 4
79038: DOUBLE
79039: EQUAL
79040: IFTRUE 79044
79042: GO 79101
79044: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
79045: LD_ADDR_VAR 0 8
79049: PUSH
79050: LD_VAR 0 2
79054: PPUSH
79055: LD_INT 2
79057: PUSH
79058: LD_INT 30
79060: PUSH
79061: LD_INT 6
79063: PUSH
79064: EMPTY
79065: LIST
79066: LIST
79067: PUSH
79068: LD_INT 30
79070: PUSH
79071: LD_INT 7
79073: PUSH
79074: EMPTY
79075: LIST
79076: LIST
79077: PUSH
79078: LD_INT 30
79080: PUSH
79081: LD_INT 8
79083: PUSH
79084: EMPTY
79085: LIST
79086: LIST
79087: PUSH
79088: EMPTY
79089: LIST
79090: LIST
79091: LIST
79092: LIST
79093: PPUSH
79094: CALL_OW 72
79098: ST_TO_ADDR
79099: GO 79168
79101: LD_INT 5
79103: DOUBLE
79104: EQUAL
79105: IFTRUE 79121
79107: LD_INT 8
79109: DOUBLE
79110: EQUAL
79111: IFTRUE 79121
79113: LD_INT 9
79115: DOUBLE
79116: EQUAL
79117: IFTRUE 79121
79119: GO 79167
79121: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
79122: LD_ADDR_VAR 0 8
79126: PUSH
79127: LD_VAR 0 2
79131: PPUSH
79132: LD_INT 2
79134: PUSH
79135: LD_INT 30
79137: PUSH
79138: LD_INT 4
79140: PUSH
79141: EMPTY
79142: LIST
79143: LIST
79144: PUSH
79145: LD_INT 30
79147: PUSH
79148: LD_INT 5
79150: PUSH
79151: EMPTY
79152: LIST
79153: LIST
79154: PUSH
79155: EMPTY
79156: LIST
79157: LIST
79158: LIST
79159: PPUSH
79160: CALL_OW 72
79164: ST_TO_ADDR
79165: GO 79168
79167: POP
// if not tmp then
79168: LD_VAR 0 8
79172: NOT
79173: IFFALSE 79177
// exit ;
79175: GO 79679
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
79177: LD_VAR 0 4
79181: PUSH
79182: LD_INT 1
79184: PUSH
79185: LD_INT 15
79187: PUSH
79188: EMPTY
79189: LIST
79190: LIST
79191: IN
79192: PUSH
79193: LD_EXP 56
79197: PUSH
79198: LD_VAR 0 1
79202: ARRAY
79203: AND
79204: IFFALSE 79360
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
79206: LD_ADDR_VAR 0 9
79210: PUSH
79211: LD_EXP 56
79215: PUSH
79216: LD_VAR 0 1
79220: ARRAY
79221: PUSH
79222: LD_INT 1
79224: ARRAY
79225: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
79226: LD_VAR 0 9
79230: PUSH
79231: LD_EXP 57
79235: PUSH
79236: LD_VAR 0 1
79240: ARRAY
79241: IN
79242: NOT
79243: IFFALSE 79358
// begin mc_busy_turret_list := ReplaceIn ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
79245: LD_ADDR_EXP 57
79249: PUSH
79250: LD_EXP 57
79254: PPUSH
79255: LD_VAR 0 1
79259: PUSH
79260: LD_EXP 57
79264: PUSH
79265: LD_VAR 0 1
79269: ARRAY
79270: PUSH
79271: LD_INT 1
79273: PLUS
79274: PUSH
79275: EMPTY
79276: LIST
79277: LIST
79278: PPUSH
79279: LD_VAR 0 9
79283: PPUSH
79284: CALL 24315 0 3
79288: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
79289: LD_ADDR_EXP 56
79293: PUSH
79294: LD_EXP 56
79298: PPUSH
79299: LD_VAR 0 1
79303: PPUSH
79304: LD_EXP 56
79308: PUSH
79309: LD_VAR 0 1
79313: ARRAY
79314: PUSH
79315: LD_VAR 0 9
79319: DIFF
79320: PPUSH
79321: CALL_OW 1
79325: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
79326: LD_VAR 0 3
79330: PPUSH
79331: LD_EXP 57
79335: PUSH
79336: LD_VAR 0 1
79340: ARRAY
79341: PUSH
79342: LD_EXP 57
79346: PUSH
79347: LD_VAR 0 1
79351: ARRAY
79352: ARRAY
79353: PPUSH
79354: CALL_OW 120
// end ; exit ;
79358: GO 79679
// end ; if tmp > 1 then
79360: LD_VAR 0 8
79364: PUSH
79365: LD_INT 1
79367: GREATER
79368: IFFALSE 79472
// for i = 2 to tmp do
79370: LD_ADDR_VAR 0 6
79374: PUSH
79375: DOUBLE
79376: LD_INT 2
79378: DEC
79379: ST_TO_ADDR
79380: LD_VAR 0 8
79384: PUSH
79385: FOR_TO
79386: IFFALSE 79470
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
79388: LD_VAR 0 8
79392: PUSH
79393: LD_VAR 0 6
79397: ARRAY
79398: PPUSH
79399: CALL_OW 461
79403: PUSH
79404: LD_INT 6
79406: EQUAL
79407: IFFALSE 79468
// begin x := tmp [ i ] ;
79409: LD_ADDR_VAR 0 9
79413: PUSH
79414: LD_VAR 0 8
79418: PUSH
79419: LD_VAR 0 6
79423: ARRAY
79424: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
79425: LD_ADDR_VAR 0 8
79429: PUSH
79430: LD_VAR 0 8
79434: PPUSH
79435: LD_VAR 0 6
79439: PPUSH
79440: CALL_OW 3
79444: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
79445: LD_ADDR_VAR 0 8
79449: PUSH
79450: LD_VAR 0 8
79454: PPUSH
79455: LD_INT 1
79457: PPUSH
79458: LD_VAR 0 9
79462: PPUSH
79463: CALL_OW 2
79467: ST_TO_ADDR
// end ;
79468: GO 79385
79470: POP
79471: POP
// for i in tmp do
79472: LD_ADDR_VAR 0 6
79476: PUSH
79477: LD_VAR 0 8
79481: PUSH
79482: FOR_IN
79483: IFFALSE 79552
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
79485: LD_VAR 0 6
79489: PPUSH
79490: CALL_OW 313
79494: PUSH
79495: LD_INT 6
79497: LESS
79498: PUSH
79499: LD_VAR 0 6
79503: PPUSH
79504: CALL_OW 266
79508: PUSH
79509: LD_INT 31
79511: PUSH
79512: LD_INT 32
79514: PUSH
79515: EMPTY
79516: LIST
79517: LIST
79518: IN
79519: NOT
79520: AND
79521: PUSH
79522: LD_VAR 0 6
79526: PPUSH
79527: CALL_OW 313
79531: PUSH
79532: LD_INT 0
79534: EQUAL
79535: OR
79536: IFFALSE 79550
// begin j := i ;
79538: LD_ADDR_VAR 0 7
79542: PUSH
79543: LD_VAR 0 6
79547: ST_TO_ADDR
// break ;
79548: GO 79552
// end ; end ;
79550: GO 79482
79552: POP
79553: POP
// if j then
79554: LD_VAR 0 7
79558: IFFALSE 79576
// ComEnterUnit ( unit , j ) else
79560: LD_VAR 0 3
79564: PPUSH
79565: LD_VAR 0 7
79569: PPUSH
79570: CALL_OW 120
79574: GO 79679
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
79576: LD_ADDR_VAR 0 10
79580: PUSH
79581: LD_VAR 0 2
79585: PPUSH
79586: LD_INT 2
79588: PUSH
79589: LD_INT 30
79591: PUSH
79592: LD_INT 0
79594: PUSH
79595: EMPTY
79596: LIST
79597: LIST
79598: PUSH
79599: LD_INT 30
79601: PUSH
79602: LD_INT 1
79604: PUSH
79605: EMPTY
79606: LIST
79607: LIST
79608: PUSH
79609: EMPTY
79610: LIST
79611: LIST
79612: LIST
79613: PPUSH
79614: CALL_OW 72
79618: ST_TO_ADDR
// if depot then
79619: LD_VAR 0 10
79623: IFFALSE 79679
// begin depot := NearestUnitToUnit ( depot , unit ) ;
79625: LD_ADDR_VAR 0 10
79629: PUSH
79630: LD_VAR 0 10
79634: PPUSH
79635: LD_VAR 0 3
79639: PPUSH
79640: CALL_OW 74
79644: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
79645: LD_VAR 0 3
79649: PPUSH
79650: LD_VAR 0 10
79654: PPUSH
79655: CALL_OW 296
79659: PUSH
79660: LD_INT 10
79662: GREATER
79663: IFFALSE 79679
// ComStandNearbyBuilding ( unit , depot ) ;
79665: LD_VAR 0 3
79669: PPUSH
79670: LD_VAR 0 10
79674: PPUSH
79675: CALL 20929 0 2
// end ; end ; end ;
79679: LD_VAR 0 5
79683: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
79684: LD_INT 0
79686: PPUSH
79687: PPUSH
79688: PPUSH
79689: PPUSH
// if not mc_bases then
79690: LD_EXP 47
79694: NOT
79695: IFFALSE 79699
// exit ;
79697: GO 79938
// for i = 1 to mc_bases do
79699: LD_ADDR_VAR 0 2
79703: PUSH
79704: DOUBLE
79705: LD_INT 1
79707: DEC
79708: ST_TO_ADDR
79709: LD_EXP 47
79713: PUSH
79714: FOR_TO
79715: IFFALSE 79936
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
79717: LD_ADDR_VAR 0 4
79721: PUSH
79722: LD_EXP 47
79726: PUSH
79727: LD_VAR 0 2
79731: ARRAY
79732: PPUSH
79733: LD_INT 21
79735: PUSH
79736: LD_INT 1
79738: PUSH
79739: EMPTY
79740: LIST
79741: LIST
79742: PPUSH
79743: CALL_OW 72
79747: PUSH
79748: LD_EXP 76
79752: PUSH
79753: LD_VAR 0 2
79757: ARRAY
79758: UNION
79759: ST_TO_ADDR
// if not tmp then
79760: LD_VAR 0 4
79764: NOT
79765: IFFALSE 79769
// continue ;
79767: GO 79714
// for j in tmp do
79769: LD_ADDR_VAR 0 3
79773: PUSH
79774: LD_VAR 0 4
79778: PUSH
79779: FOR_IN
79780: IFFALSE 79932
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
79782: LD_VAR 0 3
79786: PPUSH
79787: CALL_OW 110
79791: NOT
79792: PUSH
79793: LD_VAR 0 3
79797: PPUSH
79798: CALL_OW 314
79802: NOT
79803: AND
79804: PUSH
79805: LD_VAR 0 3
79809: PPUSH
79810: CALL_OW 311
79814: NOT
79815: AND
79816: PUSH
79817: LD_VAR 0 3
79821: PPUSH
79822: CALL_OW 310
79826: NOT
79827: AND
79828: PUSH
79829: LD_VAR 0 3
79833: PUSH
79834: LD_EXP 50
79838: PUSH
79839: LD_VAR 0 2
79843: ARRAY
79844: PUSH
79845: LD_INT 1
79847: ARRAY
79848: IN
79849: NOT
79850: AND
79851: PUSH
79852: LD_VAR 0 3
79856: PUSH
79857: LD_EXP 50
79861: PUSH
79862: LD_VAR 0 2
79866: ARRAY
79867: PUSH
79868: LD_INT 2
79870: ARRAY
79871: IN
79872: NOT
79873: AND
79874: PUSH
79875: LD_VAR 0 3
79879: PUSH
79880: LD_EXP 59
79884: PUSH
79885: LD_VAR 0 2
79889: ARRAY
79890: IN
79891: NOT
79892: AND
79893: IFFALSE 79930
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
79895: LD_VAR 0 2
79899: PPUSH
79900: LD_EXP 47
79904: PUSH
79905: LD_VAR 0 2
79909: ARRAY
79910: PPUSH
79911: LD_VAR 0 3
79915: PPUSH
79916: LD_VAR 0 3
79920: PPUSH
79921: CALL_OW 257
79925: PPUSH
79926: CALL 78702 0 4
// end ;
79930: GO 79779
79932: POP
79933: POP
// end ;
79934: GO 79714
79936: POP
79937: POP
// end ;
79938: LD_VAR 0 1
79942: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
79943: LD_INT 0
79945: PPUSH
79946: PPUSH
79947: PPUSH
79948: PPUSH
79949: PPUSH
79950: PPUSH
// if not mc_bases [ base ] then
79951: LD_EXP 47
79955: PUSH
79956: LD_VAR 0 1
79960: ARRAY
79961: NOT
79962: IFFALSE 79966
// exit ;
79964: GO 80148
// tmp := [ ] ;
79966: LD_ADDR_VAR 0 6
79970: PUSH
79971: EMPTY
79972: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
79973: LD_ADDR_VAR 0 7
79977: PUSH
79978: LD_VAR 0 3
79982: PPUSH
79983: LD_INT 0
79985: PPUSH
79986: CALL_OW 517
79990: ST_TO_ADDR
// if not list then
79991: LD_VAR 0 7
79995: NOT
79996: IFFALSE 80000
// exit ;
79998: GO 80148
// for i = 1 to amount do
80000: LD_ADDR_VAR 0 5
80004: PUSH
80005: DOUBLE
80006: LD_INT 1
80008: DEC
80009: ST_TO_ADDR
80010: LD_VAR 0 2
80014: PUSH
80015: FOR_TO
80016: IFFALSE 80096
// begin x := rand ( 1 , list [ 1 ] ) ;
80018: LD_ADDR_VAR 0 8
80022: PUSH
80023: LD_INT 1
80025: PPUSH
80026: LD_VAR 0 7
80030: PUSH
80031: LD_INT 1
80033: ARRAY
80034: PPUSH
80035: CALL_OW 12
80039: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
80040: LD_ADDR_VAR 0 6
80044: PUSH
80045: LD_VAR 0 6
80049: PPUSH
80050: LD_VAR 0 5
80054: PPUSH
80055: LD_VAR 0 7
80059: PUSH
80060: LD_INT 1
80062: ARRAY
80063: PUSH
80064: LD_VAR 0 8
80068: ARRAY
80069: PUSH
80070: LD_VAR 0 7
80074: PUSH
80075: LD_INT 2
80077: ARRAY
80078: PUSH
80079: LD_VAR 0 8
80083: ARRAY
80084: PUSH
80085: EMPTY
80086: LIST
80087: LIST
80088: PPUSH
80089: CALL_OW 1
80093: ST_TO_ADDR
// end ;
80094: GO 80015
80096: POP
80097: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
80098: LD_ADDR_EXP 60
80102: PUSH
80103: LD_EXP 60
80107: PPUSH
80108: LD_VAR 0 1
80112: PPUSH
80113: LD_VAR 0 6
80117: PPUSH
80118: CALL_OW 1
80122: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
80123: LD_ADDR_EXP 62
80127: PUSH
80128: LD_EXP 62
80132: PPUSH
80133: LD_VAR 0 1
80137: PPUSH
80138: LD_VAR 0 3
80142: PPUSH
80143: CALL_OW 1
80147: ST_TO_ADDR
// end ;
80148: LD_VAR 0 4
80152: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
80153: LD_INT 0
80155: PPUSH
// if not mc_bases [ base ] then
80156: LD_EXP 47
80160: PUSH
80161: LD_VAR 0 1
80165: ARRAY
80166: NOT
80167: IFFALSE 80171
// exit ;
80169: GO 80196
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
80171: LD_ADDR_EXP 52
80175: PUSH
80176: LD_EXP 52
80180: PPUSH
80181: LD_VAR 0 1
80185: PPUSH
80186: LD_VAR 0 2
80190: PPUSH
80191: CALL_OW 1
80195: ST_TO_ADDR
// end ;
80196: LD_VAR 0 3
80200: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
80201: LD_INT 0
80203: PPUSH
// if not mc_bases [ base ] then
80204: LD_EXP 47
80208: PUSH
80209: LD_VAR 0 1
80213: ARRAY
80214: NOT
80215: IFFALSE 80219
// exit ;
80217: GO 80256
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union list ) ;
80219: LD_ADDR_EXP 52
80223: PUSH
80224: LD_EXP 52
80228: PPUSH
80229: LD_VAR 0 1
80233: PPUSH
80234: LD_EXP 52
80238: PUSH
80239: LD_VAR 0 1
80243: ARRAY
80244: PUSH
80245: LD_VAR 0 2
80249: UNION
80250: PPUSH
80251: CALL_OW 1
80255: ST_TO_ADDR
// end ;
80256: LD_VAR 0 3
80260: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
80261: LD_INT 0
80263: PPUSH
// if not mc_bases [ base ] then
80264: LD_EXP 47
80268: PUSH
80269: LD_VAR 0 1
80273: ARRAY
80274: NOT
80275: IFFALSE 80279
// exit ;
80277: GO 80304
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
80279: LD_ADDR_EXP 68
80283: PUSH
80284: LD_EXP 68
80288: PPUSH
80289: LD_VAR 0 1
80293: PPUSH
80294: LD_VAR 0 2
80298: PPUSH
80299: CALL_OW 1
80303: ST_TO_ADDR
// end ;
80304: LD_VAR 0 3
80308: RET
// export function MC_InsertProduceList ( base , components ) ; begin
80309: LD_INT 0
80311: PPUSH
// if not mc_bases [ base ] then
80312: LD_EXP 47
80316: PUSH
80317: LD_VAR 0 1
80321: ARRAY
80322: NOT
80323: IFFALSE 80327
// exit ;
80325: GO 80364
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ components ) ;
80327: LD_ADDR_EXP 68
80331: PUSH
80332: LD_EXP 68
80336: PPUSH
80337: LD_VAR 0 1
80341: PPUSH
80342: LD_EXP 68
80346: PUSH
80347: LD_VAR 0 1
80351: ARRAY
80352: PUSH
80353: LD_VAR 0 2
80357: ADD
80358: PPUSH
80359: CALL_OW 1
80363: ST_TO_ADDR
// end ;
80364: LD_VAR 0 3
80368: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
80369: LD_INT 0
80371: PPUSH
// if not mc_bases [ base ] then
80372: LD_EXP 47
80376: PUSH
80377: LD_VAR 0 1
80381: ARRAY
80382: NOT
80383: IFFALSE 80387
// exit ;
80385: GO 80441
// mc_defender := Replace ( mc_defender , base , deflist ) ;
80387: LD_ADDR_EXP 69
80391: PUSH
80392: LD_EXP 69
80396: PPUSH
80397: LD_VAR 0 1
80401: PPUSH
80402: LD_VAR 0 2
80406: PPUSH
80407: CALL_OW 1
80411: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
80412: LD_ADDR_EXP 58
80416: PUSH
80417: LD_EXP 58
80421: PPUSH
80422: LD_VAR 0 1
80426: PPUSH
80427: LD_VAR 0 2
80431: PUSH
80432: LD_INT 0
80434: PLUS
80435: PPUSH
80436: CALL_OW 1
80440: ST_TO_ADDR
// end ;
80441: LD_VAR 0 3
80445: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
80446: LD_INT 0
80448: PPUSH
// if not mc_bases [ base ] then
80449: LD_EXP 47
80453: PUSH
80454: LD_VAR 0 1
80458: ARRAY
80459: NOT
80460: IFFALSE 80464
// exit ;
80462: GO 80489
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
80464: LD_ADDR_EXP 58
80468: PUSH
80469: LD_EXP 58
80473: PPUSH
80474: LD_VAR 0 1
80478: PPUSH
80479: LD_VAR 0 2
80483: PPUSH
80484: CALL_OW 1
80488: ST_TO_ADDR
// end ;
80489: LD_VAR 0 3
80493: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
80494: LD_INT 0
80496: PPUSH
80497: PPUSH
80498: PPUSH
80499: PPUSH
// if not mc_bases [ base ] then
80500: LD_EXP 47
80504: PUSH
80505: LD_VAR 0 1
80509: ARRAY
80510: NOT
80511: IFFALSE 80515
// exit ;
80513: GO 80580
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
80515: LD_ADDR_EXP 67
80519: PUSH
80520: LD_EXP 67
80524: PPUSH
80525: LD_VAR 0 1
80529: PUSH
80530: LD_EXP 67
80534: PUSH
80535: LD_VAR 0 1
80539: ARRAY
80540: PUSH
80541: LD_INT 1
80543: PLUS
80544: PUSH
80545: EMPTY
80546: LIST
80547: LIST
80548: PPUSH
80549: LD_VAR 0 1
80553: PUSH
80554: LD_VAR 0 2
80558: PUSH
80559: LD_VAR 0 3
80563: PUSH
80564: LD_VAR 0 4
80568: PUSH
80569: EMPTY
80570: LIST
80571: LIST
80572: LIST
80573: LIST
80574: PPUSH
80575: CALL 24315 0 3
80579: ST_TO_ADDR
// end ;
80580: LD_VAR 0 5
80584: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
80585: LD_INT 0
80587: PPUSH
// if not mc_bases [ base ] then
80588: LD_EXP 47
80592: PUSH
80593: LD_VAR 0 1
80597: ARRAY
80598: NOT
80599: IFFALSE 80603
// exit ;
80601: GO 80628
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
80603: LD_ADDR_EXP 84
80607: PUSH
80608: LD_EXP 84
80612: PPUSH
80613: LD_VAR 0 1
80617: PPUSH
80618: LD_VAR 0 2
80622: PPUSH
80623: CALL_OW 1
80627: ST_TO_ADDR
// end ;
80628: LD_VAR 0 3
80632: RET
// export function MC_GetMinesField ( base ) ; begin
80633: LD_INT 0
80635: PPUSH
// result := mc_mines [ base ] ;
80636: LD_ADDR_VAR 0 2
80640: PUSH
80641: LD_EXP 60
80645: PUSH
80646: LD_VAR 0 1
80650: ARRAY
80651: ST_TO_ADDR
// end ;
80652: LD_VAR 0 2
80656: RET
// export function MC_GetProduceList ( base ) ; begin
80657: LD_INT 0
80659: PPUSH
// result := mc_produce [ base ] ;
80660: LD_ADDR_VAR 0 2
80664: PUSH
80665: LD_EXP 68
80669: PUSH
80670: LD_VAR 0 1
80674: ARRAY
80675: ST_TO_ADDR
// end ;
80676: LD_VAR 0 2
80680: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
80681: LD_INT 0
80683: PPUSH
80684: PPUSH
// if not mc_bases then
80685: LD_EXP 47
80689: NOT
80690: IFFALSE 80694
// exit ;
80692: GO 80759
// if mc_bases [ base ] then
80694: LD_EXP 47
80698: PUSH
80699: LD_VAR 0 1
80703: ARRAY
80704: IFFALSE 80759
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
80706: LD_ADDR_VAR 0 3
80710: PUSH
80711: LD_EXP 47
80715: PUSH
80716: LD_VAR 0 1
80720: ARRAY
80721: PPUSH
80722: LD_INT 30
80724: PUSH
80725: LD_VAR 0 2
80729: PUSH
80730: EMPTY
80731: LIST
80732: LIST
80733: PPUSH
80734: CALL_OW 72
80738: ST_TO_ADDR
// if result then
80739: LD_VAR 0 3
80743: IFFALSE 80759
// result := result [ 1 ] ;
80745: LD_ADDR_VAR 0 3
80749: PUSH
80750: LD_VAR 0 3
80754: PUSH
80755: LD_INT 1
80757: ARRAY
80758: ST_TO_ADDR
// end ; end ;
80759: LD_VAR 0 3
80763: RET
// export function MC_GetBuildings ( base , btype ) ; var i ; begin
80764: LD_INT 0
80766: PPUSH
80767: PPUSH
// if not mc_bases then
80768: LD_EXP 47
80772: NOT
80773: IFFALSE 80777
// exit ;
80775: GO 80822
// if mc_bases [ base ] then
80777: LD_EXP 47
80781: PUSH
80782: LD_VAR 0 1
80786: ARRAY
80787: IFFALSE 80822
// result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
80789: LD_ADDR_VAR 0 3
80793: PUSH
80794: LD_EXP 47
80798: PUSH
80799: LD_VAR 0 1
80803: ARRAY
80804: PPUSH
80805: LD_INT 30
80807: PUSH
80808: LD_VAR 0 2
80812: PUSH
80813: EMPTY
80814: LIST
80815: LIST
80816: PPUSH
80817: CALL_OW 72
80821: ST_TO_ADDR
// end ;
80822: LD_VAR 0 3
80826: RET
// export function MC_SetTame ( base , area ) ; begin
80827: LD_INT 0
80829: PPUSH
// if not mc_bases or not base then
80830: LD_EXP 47
80834: NOT
80835: PUSH
80836: LD_VAR 0 1
80840: NOT
80841: OR
80842: IFFALSE 80846
// exit ;
80844: GO 80871
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
80846: LD_ADDR_EXP 75
80850: PUSH
80851: LD_EXP 75
80855: PPUSH
80856: LD_VAR 0 1
80860: PPUSH
80861: LD_VAR 0 2
80865: PPUSH
80866: CALL_OW 1
80870: ST_TO_ADDR
// end ;
80871: LD_VAR 0 3
80875: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
80876: LD_INT 0
80878: PPUSH
80879: PPUSH
// if not mc_bases or not base then
80880: LD_EXP 47
80884: NOT
80885: PUSH
80886: LD_VAR 0 1
80890: NOT
80891: OR
80892: IFFALSE 80896
// exit ;
80894: GO 80998
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
80896: LD_ADDR_VAR 0 4
80900: PUSH
80901: LD_EXP 47
80905: PUSH
80906: LD_VAR 0 1
80910: ARRAY
80911: PPUSH
80912: LD_INT 30
80914: PUSH
80915: LD_VAR 0 2
80919: PUSH
80920: EMPTY
80921: LIST
80922: LIST
80923: PPUSH
80924: CALL_OW 72
80928: ST_TO_ADDR
// if not tmp then
80929: LD_VAR 0 4
80933: NOT
80934: IFFALSE 80938
// exit ;
80936: GO 80998
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
80938: LD_ADDR_EXP 79
80942: PUSH
80943: LD_EXP 79
80947: PPUSH
80948: LD_VAR 0 1
80952: PPUSH
80953: LD_EXP 79
80957: PUSH
80958: LD_VAR 0 1
80962: ARRAY
80963: PPUSH
80964: LD_EXP 79
80968: PUSH
80969: LD_VAR 0 1
80973: ARRAY
80974: PUSH
80975: LD_INT 1
80977: PLUS
80978: PPUSH
80979: LD_VAR 0 4
80983: PUSH
80984: LD_INT 1
80986: ARRAY
80987: PPUSH
80988: CALL_OW 2
80992: PPUSH
80993: CALL_OW 1
80997: ST_TO_ADDR
// end ;
80998: LD_VAR 0 3
81002: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
81003: LD_INT 0
81005: PPUSH
81006: PPUSH
// if not mc_bases or not base or not kinds then
81007: LD_EXP 47
81011: NOT
81012: PUSH
81013: LD_VAR 0 1
81017: NOT
81018: OR
81019: PUSH
81020: LD_VAR 0 2
81024: NOT
81025: OR
81026: IFFALSE 81030
// exit ;
81028: GO 81091
// for i in kinds do
81030: LD_ADDR_VAR 0 4
81034: PUSH
81035: LD_VAR 0 2
81039: PUSH
81040: FOR_IN
81041: IFFALSE 81089
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
81043: LD_ADDR_EXP 81
81047: PUSH
81048: LD_EXP 81
81052: PPUSH
81053: LD_VAR 0 1
81057: PUSH
81058: LD_EXP 81
81062: PUSH
81063: LD_VAR 0 1
81067: ARRAY
81068: PUSH
81069: LD_INT 1
81071: PLUS
81072: PUSH
81073: EMPTY
81074: LIST
81075: LIST
81076: PPUSH
81077: LD_VAR 0 4
81081: PPUSH
81082: CALL 24315 0 3
81086: ST_TO_ADDR
81087: GO 81040
81089: POP
81090: POP
// end ;
81091: LD_VAR 0 3
81095: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
81096: LD_INT 0
81098: PPUSH
// if not mc_bases or not base or not areas then
81099: LD_EXP 47
81103: NOT
81104: PUSH
81105: LD_VAR 0 1
81109: NOT
81110: OR
81111: PUSH
81112: LD_VAR 0 2
81116: NOT
81117: OR
81118: IFFALSE 81122
// exit ;
81120: GO 81147
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
81122: LD_ADDR_EXP 65
81126: PUSH
81127: LD_EXP 65
81131: PPUSH
81132: LD_VAR 0 1
81136: PPUSH
81137: LD_VAR 0 2
81141: PPUSH
81142: CALL_OW 1
81146: ST_TO_ADDR
// end ;
81147: LD_VAR 0 3
81151: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
81152: LD_INT 0
81154: PPUSH
// if not mc_bases or not base or not teleports_exit then
81155: LD_EXP 47
81159: NOT
81160: PUSH
81161: LD_VAR 0 1
81165: NOT
81166: OR
81167: PUSH
81168: LD_VAR 0 2
81172: NOT
81173: OR
81174: IFFALSE 81178
// exit ;
81176: GO 81203
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
81178: LD_ADDR_EXP 82
81182: PUSH
81183: LD_EXP 82
81187: PPUSH
81188: LD_VAR 0 1
81192: PPUSH
81193: LD_VAR 0 2
81197: PPUSH
81198: CALL_OW 1
81202: ST_TO_ADDR
// end ;
81203: LD_VAR 0 3
81207: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
81208: LD_INT 0
81210: PPUSH
81211: PPUSH
81212: PPUSH
// if not mc_bases or not base or not ext_list then
81213: LD_EXP 47
81217: NOT
81218: PUSH
81219: LD_VAR 0 1
81223: NOT
81224: OR
81225: PUSH
81226: LD_VAR 0 5
81230: NOT
81231: OR
81232: IFFALSE 81236
// exit ;
81234: GO 81409
// tmp := GetFacExtXYD ( x , y , d ) ;
81236: LD_ADDR_VAR 0 8
81240: PUSH
81241: LD_VAR 0 2
81245: PPUSH
81246: LD_VAR 0 3
81250: PPUSH
81251: LD_VAR 0 4
81255: PPUSH
81256: CALL 52994 0 3
81260: ST_TO_ADDR
// if not tmp then
81261: LD_VAR 0 8
81265: NOT
81266: IFFALSE 81270
// exit ;
81268: GO 81409
// for i in tmp do
81270: LD_ADDR_VAR 0 7
81274: PUSH
81275: LD_VAR 0 8
81279: PUSH
81280: FOR_IN
81281: IFFALSE 81407
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
81283: LD_ADDR_EXP 52
81287: PUSH
81288: LD_EXP 52
81292: PPUSH
81293: LD_VAR 0 1
81297: PPUSH
81298: LD_EXP 52
81302: PUSH
81303: LD_VAR 0 1
81307: ARRAY
81308: PPUSH
81309: LD_EXP 52
81313: PUSH
81314: LD_VAR 0 1
81318: ARRAY
81319: PUSH
81320: LD_INT 1
81322: PLUS
81323: PPUSH
81324: LD_VAR 0 5
81328: PUSH
81329: LD_INT 1
81331: ARRAY
81332: PUSH
81333: LD_VAR 0 7
81337: PUSH
81338: LD_INT 1
81340: ARRAY
81341: PUSH
81342: LD_VAR 0 7
81346: PUSH
81347: LD_INT 2
81349: ARRAY
81350: PUSH
81351: LD_VAR 0 7
81355: PUSH
81356: LD_INT 3
81358: ARRAY
81359: PUSH
81360: EMPTY
81361: LIST
81362: LIST
81363: LIST
81364: LIST
81365: PPUSH
81366: CALL_OW 2
81370: PPUSH
81371: CALL_OW 1
81375: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
81376: LD_ADDR_VAR 0 5
81380: PUSH
81381: LD_VAR 0 5
81385: PPUSH
81386: LD_INT 1
81388: PPUSH
81389: CALL_OW 3
81393: ST_TO_ADDR
// if not ext_list then
81394: LD_VAR 0 5
81398: NOT
81399: IFFALSE 81405
// exit ;
81401: POP
81402: POP
81403: GO 81409
// end ;
81405: GO 81280
81407: POP
81408: POP
// end ;
81409: LD_VAR 0 6
81413: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
81414: LD_INT 0
81416: PPUSH
// if not mc_bases or not base or not weapon_list then
81417: LD_EXP 47
81421: NOT
81422: PUSH
81423: LD_VAR 0 1
81427: NOT
81428: OR
81429: PUSH
81430: LD_VAR 0 2
81434: NOT
81435: OR
81436: IFFALSE 81440
// exit ;
81438: GO 81465
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
81440: LD_ADDR_EXP 86
81444: PUSH
81445: LD_EXP 86
81449: PPUSH
81450: LD_VAR 0 1
81454: PPUSH
81455: LD_VAR 0 2
81459: PPUSH
81460: CALL_OW 1
81464: ST_TO_ADDR
// end ;
81465: LD_VAR 0 3
81469: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
81470: LD_INT 0
81472: PPUSH
// if not mc_bases or not base or not tech_list then
81473: LD_EXP 47
81477: NOT
81478: PUSH
81479: LD_VAR 0 1
81483: NOT
81484: OR
81485: PUSH
81486: LD_VAR 0 2
81490: NOT
81491: OR
81492: IFFALSE 81496
// exit ;
81494: GO 81521
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
81496: LD_ADDR_EXP 74
81500: PUSH
81501: LD_EXP 74
81505: PPUSH
81506: LD_VAR 0 1
81510: PPUSH
81511: LD_VAR 0 2
81515: PPUSH
81516: CALL_OW 1
81520: ST_TO_ADDR
// end ;
81521: LD_VAR 0 3
81525: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
81526: LD_INT 0
81528: PPUSH
// if not mc_bases or not parking_area or not base then
81529: LD_EXP 47
81533: NOT
81534: PUSH
81535: LD_VAR 0 2
81539: NOT
81540: OR
81541: PUSH
81542: LD_VAR 0 1
81546: NOT
81547: OR
81548: IFFALSE 81552
// exit ;
81550: GO 81577
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
81552: LD_ADDR_EXP 71
81556: PUSH
81557: LD_EXP 71
81561: PPUSH
81562: LD_VAR 0 1
81566: PPUSH
81567: LD_VAR 0 2
81571: PPUSH
81572: CALL_OW 1
81576: ST_TO_ADDR
// end ;
81577: LD_VAR 0 3
81581: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
81582: LD_INT 0
81584: PPUSH
// if not mc_bases or not base or not scan_area then
81585: LD_EXP 47
81589: NOT
81590: PUSH
81591: LD_VAR 0 1
81595: NOT
81596: OR
81597: PUSH
81598: LD_VAR 0 2
81602: NOT
81603: OR
81604: IFFALSE 81608
// exit ;
81606: GO 81633
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
81608: LD_ADDR_EXP 72
81612: PUSH
81613: LD_EXP 72
81617: PPUSH
81618: LD_VAR 0 1
81622: PPUSH
81623: LD_VAR 0 2
81627: PPUSH
81628: CALL_OW 1
81632: ST_TO_ADDR
// end ;
81633: LD_VAR 0 3
81637: RET
// export function MC_NotTameApeman ( base ) ; var ape_techs ; begin
81638: LD_INT 0
81640: PPUSH
81641: PPUSH
// if not mc_bases or not base then
81642: LD_EXP 47
81646: NOT
81647: PUSH
81648: LD_VAR 0 1
81652: NOT
81653: OR
81654: IFFALSE 81658
// exit ;
81656: GO 81722
// ape_techs := [ 1 , 2 , 3 , 4 , 11 ] ;
81658: LD_ADDR_VAR 0 3
81662: PUSH
81663: LD_INT 1
81665: PUSH
81666: LD_INT 2
81668: PUSH
81669: LD_INT 3
81671: PUSH
81672: LD_INT 4
81674: PUSH
81675: LD_INT 11
81677: PUSH
81678: EMPTY
81679: LIST
81680: LIST
81681: LIST
81682: LIST
81683: LIST
81684: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , mc_tech [ base ] diff ape_techs ) ;
81685: LD_ADDR_EXP 74
81689: PUSH
81690: LD_EXP 74
81694: PPUSH
81695: LD_VAR 0 1
81699: PPUSH
81700: LD_EXP 74
81704: PUSH
81705: LD_VAR 0 1
81709: ARRAY
81710: PUSH
81711: LD_VAR 0 3
81715: DIFF
81716: PPUSH
81717: CALL_OW 1
81721: ST_TO_ADDR
// end ;
81722: LD_VAR 0 2
81726: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
81727: LD_INT 0
81729: PPUSH
// result := mc_vehicles [ base ] ;
81730: LD_ADDR_VAR 0 3
81734: PUSH
81735: LD_EXP 66
81739: PUSH
81740: LD_VAR 0 1
81744: ARRAY
81745: ST_TO_ADDR
// if onlyCombat then
81746: LD_VAR 0 2
81750: IFFALSE 81928
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , ar_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] , [ f_weapon , ru_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ) ;
81752: LD_ADDR_VAR 0 3
81756: PUSH
81757: LD_VAR 0 3
81761: PUSH
81762: LD_VAR 0 3
81766: PPUSH
81767: LD_INT 2
81769: PUSH
81770: LD_INT 34
81772: PUSH
81773: LD_INT 12
81775: PUSH
81776: EMPTY
81777: LIST
81778: LIST
81779: PUSH
81780: LD_INT 34
81782: PUSH
81783: LD_INT 51
81785: PUSH
81786: EMPTY
81787: LIST
81788: LIST
81789: PUSH
81790: LD_INT 34
81792: PUSH
81793: LD_EXP 30
81797: PUSH
81798: EMPTY
81799: LIST
81800: LIST
81801: PUSH
81802: LD_INT 34
81804: PUSH
81805: LD_INT 32
81807: PUSH
81808: EMPTY
81809: LIST
81810: LIST
81811: PUSH
81812: LD_INT 34
81814: PUSH
81815: LD_INT 13
81817: PUSH
81818: EMPTY
81819: LIST
81820: LIST
81821: PUSH
81822: LD_INT 34
81824: PUSH
81825: LD_INT 52
81827: PUSH
81828: EMPTY
81829: LIST
81830: LIST
81831: PUSH
81832: LD_INT 34
81834: PUSH
81835: LD_EXP 35
81839: PUSH
81840: EMPTY
81841: LIST
81842: LIST
81843: PUSH
81844: LD_INT 34
81846: PUSH
81847: LD_INT 14
81849: PUSH
81850: EMPTY
81851: LIST
81852: LIST
81853: PUSH
81854: LD_INT 34
81856: PUSH
81857: LD_INT 53
81859: PUSH
81860: EMPTY
81861: LIST
81862: LIST
81863: PUSH
81864: LD_INT 34
81866: PUSH
81867: LD_EXP 29
81871: PUSH
81872: EMPTY
81873: LIST
81874: LIST
81875: PUSH
81876: LD_INT 34
81878: PUSH
81879: LD_INT 31
81881: PUSH
81882: EMPTY
81883: LIST
81884: LIST
81885: PUSH
81886: LD_INT 34
81888: PUSH
81889: LD_INT 48
81891: PUSH
81892: EMPTY
81893: LIST
81894: LIST
81895: PUSH
81896: LD_INT 34
81898: PUSH
81899: LD_INT 8
81901: PUSH
81902: EMPTY
81903: LIST
81904: LIST
81905: PUSH
81906: EMPTY
81907: LIST
81908: LIST
81909: LIST
81910: LIST
81911: LIST
81912: LIST
81913: LIST
81914: LIST
81915: LIST
81916: LIST
81917: LIST
81918: LIST
81919: LIST
81920: LIST
81921: PPUSH
81922: CALL_OW 72
81926: DIFF
81927: ST_TO_ADDR
// end ; end_of_file
81928: LD_VAR 0 3
81932: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
81933: LD_INT 0
81935: PPUSH
81936: PPUSH
81937: PPUSH
// if not mc_bases or not skirmish then
81938: LD_EXP 47
81942: NOT
81943: PUSH
81944: LD_EXP 45
81948: NOT
81949: OR
81950: IFFALSE 81954
// exit ;
81952: GO 82119
// for i = 1 to mc_bases do
81954: LD_ADDR_VAR 0 4
81958: PUSH
81959: DOUBLE
81960: LD_INT 1
81962: DEC
81963: ST_TO_ADDR
81964: LD_EXP 47
81968: PUSH
81969: FOR_TO
81970: IFFALSE 82117
// begin if sci in mc_bases [ i ] then
81972: LD_VAR 0 2
81976: PUSH
81977: LD_EXP 47
81981: PUSH
81982: LD_VAR 0 4
81986: ARRAY
81987: IN
81988: IFFALSE 82115
// begin mc_ape := ReplaceIn ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
81990: LD_ADDR_EXP 76
81994: PUSH
81995: LD_EXP 76
81999: PPUSH
82000: LD_VAR 0 4
82004: PUSH
82005: LD_EXP 76
82009: PUSH
82010: LD_VAR 0 4
82014: ARRAY
82015: PUSH
82016: LD_INT 1
82018: PLUS
82019: PUSH
82020: EMPTY
82021: LIST
82022: LIST
82023: PPUSH
82024: LD_VAR 0 1
82028: PPUSH
82029: CALL 24315 0 3
82033: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
82034: LD_ADDR_VAR 0 5
82038: PUSH
82039: LD_EXP 47
82043: PUSH
82044: LD_VAR 0 4
82048: ARRAY
82049: PPUSH
82050: LD_INT 2
82052: PUSH
82053: LD_INT 30
82055: PUSH
82056: LD_INT 0
82058: PUSH
82059: EMPTY
82060: LIST
82061: LIST
82062: PUSH
82063: LD_INT 30
82065: PUSH
82066: LD_INT 1
82068: PUSH
82069: EMPTY
82070: LIST
82071: LIST
82072: PUSH
82073: EMPTY
82074: LIST
82075: LIST
82076: LIST
82077: PPUSH
82078: CALL_OW 72
82082: PPUSH
82083: LD_VAR 0 1
82087: PPUSH
82088: CALL_OW 74
82092: ST_TO_ADDR
// if tmp then
82093: LD_VAR 0 5
82097: IFFALSE 82113
// ComStandNearbyBuilding ( ape , tmp ) ;
82099: LD_VAR 0 1
82103: PPUSH
82104: LD_VAR 0 5
82108: PPUSH
82109: CALL 20929 0 2
// break ;
82113: GO 82117
// end ; end ;
82115: GO 81969
82117: POP
82118: POP
// end ;
82119: LD_VAR 0 3
82123: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
82124: LD_INT 0
82126: PPUSH
82127: PPUSH
82128: PPUSH
// if not mc_bases or not skirmish then
82129: LD_EXP 47
82133: NOT
82134: PUSH
82135: LD_EXP 45
82139: NOT
82140: OR
82141: IFFALSE 82145
// exit ;
82143: GO 82234
// for i = 1 to mc_bases do
82145: LD_ADDR_VAR 0 4
82149: PUSH
82150: DOUBLE
82151: LD_INT 1
82153: DEC
82154: ST_TO_ADDR
82155: LD_EXP 47
82159: PUSH
82160: FOR_TO
82161: IFFALSE 82232
// begin if building in mc_busy_turret_list [ i ] then
82163: LD_VAR 0 1
82167: PUSH
82168: LD_EXP 57
82172: PUSH
82173: LD_VAR 0 4
82177: ARRAY
82178: IN
82179: IFFALSE 82230
// begin tmp := mc_busy_turret_list [ i ] diff building ;
82181: LD_ADDR_VAR 0 5
82185: PUSH
82186: LD_EXP 57
82190: PUSH
82191: LD_VAR 0 4
82195: ARRAY
82196: PUSH
82197: LD_VAR 0 1
82201: DIFF
82202: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
82203: LD_ADDR_EXP 57
82207: PUSH
82208: LD_EXP 57
82212: PPUSH
82213: LD_VAR 0 4
82217: PPUSH
82218: LD_VAR 0 5
82222: PPUSH
82223: CALL_OW 1
82227: ST_TO_ADDR
// break ;
82228: GO 82232
// end ; end ;
82230: GO 82160
82232: POP
82233: POP
// end ;
82234: LD_VAR 0 3
82238: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
82239: LD_INT 0
82241: PPUSH
82242: PPUSH
82243: PPUSH
// if not mc_bases or not skirmish then
82244: LD_EXP 47
82248: NOT
82249: PUSH
82250: LD_EXP 45
82254: NOT
82255: OR
82256: IFFALSE 82260
// exit ;
82258: GO 82459
// for i = 1 to mc_bases do
82260: LD_ADDR_VAR 0 5
82264: PUSH
82265: DOUBLE
82266: LD_INT 1
82268: DEC
82269: ST_TO_ADDR
82270: LD_EXP 47
82274: PUSH
82275: FOR_TO
82276: IFFALSE 82457
// if building in mc_bases [ i ] then
82278: LD_VAR 0 1
82282: PUSH
82283: LD_EXP 47
82287: PUSH
82288: LD_VAR 0 5
82292: ARRAY
82293: IN
82294: IFFALSE 82455
// begin tmp := mc_bases [ i ] diff building ;
82296: LD_ADDR_VAR 0 6
82300: PUSH
82301: LD_EXP 47
82305: PUSH
82306: LD_VAR 0 5
82310: ARRAY
82311: PUSH
82312: LD_VAR 0 1
82316: DIFF
82317: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
82318: LD_ADDR_EXP 47
82322: PUSH
82323: LD_EXP 47
82327: PPUSH
82328: LD_VAR 0 5
82332: PPUSH
82333: LD_VAR 0 6
82337: PPUSH
82338: CALL_OW 1
82342: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
82343: LD_VAR 0 1
82347: PUSH
82348: LD_EXP 55
82352: PUSH
82353: LD_VAR 0 5
82357: ARRAY
82358: IN
82359: IFFALSE 82398
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
82361: LD_ADDR_EXP 55
82365: PUSH
82366: LD_EXP 55
82370: PPUSH
82371: LD_VAR 0 5
82375: PPUSH
82376: LD_EXP 55
82380: PUSH
82381: LD_VAR 0 5
82385: ARRAY
82386: PUSH
82387: LD_VAR 0 1
82391: DIFF
82392: PPUSH
82393: CALL_OW 1
82397: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
82398: LD_VAR 0 1
82402: PUSH
82403: LD_EXP 56
82407: PUSH
82408: LD_VAR 0 5
82412: ARRAY
82413: IN
82414: IFFALSE 82453
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
82416: LD_ADDR_EXP 56
82420: PUSH
82421: LD_EXP 56
82425: PPUSH
82426: LD_VAR 0 5
82430: PPUSH
82431: LD_EXP 56
82435: PUSH
82436: LD_VAR 0 5
82440: ARRAY
82441: PUSH
82442: LD_VAR 0 1
82446: DIFF
82447: PPUSH
82448: CALL_OW 1
82452: ST_TO_ADDR
// break ;
82453: GO 82457
// end ;
82455: GO 82275
82457: POP
82458: POP
// end ;
82459: LD_VAR 0 4
82463: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
82464: LD_INT 0
82466: PPUSH
82467: PPUSH
82468: PPUSH
// if not mc_bases or not skirmish or not side in mc_sides then
82469: LD_EXP 47
82473: NOT
82474: PUSH
82475: LD_EXP 45
82479: NOT
82480: OR
82481: PUSH
82482: LD_VAR 0 3
82486: PUSH
82487: LD_EXP 73
82491: IN
82492: NOT
82493: OR
82494: IFFALSE 82498
// exit ;
82496: GO 82621
// for i = 1 to mc_vehicles do
82498: LD_ADDR_VAR 0 6
82502: PUSH
82503: DOUBLE
82504: LD_INT 1
82506: DEC
82507: ST_TO_ADDR
82508: LD_EXP 66
82512: PUSH
82513: FOR_TO
82514: IFFALSE 82619
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
82516: LD_VAR 0 2
82520: PUSH
82521: LD_EXP 66
82525: PUSH
82526: LD_VAR 0 6
82530: ARRAY
82531: IN
82532: PUSH
82533: LD_VAR 0 1
82537: PUSH
82538: LD_EXP 66
82542: PUSH
82543: LD_VAR 0 6
82547: ARRAY
82548: IN
82549: OR
82550: IFFALSE 82617
// begin tmp := mc_vehicles [ i ] diff old ;
82552: LD_ADDR_VAR 0 7
82556: PUSH
82557: LD_EXP 66
82561: PUSH
82562: LD_VAR 0 6
82566: ARRAY
82567: PUSH
82568: LD_VAR 0 2
82572: DIFF
82573: ST_TO_ADDR
// tmp := tmp diff new ;
82574: LD_ADDR_VAR 0 7
82578: PUSH
82579: LD_VAR 0 7
82583: PUSH
82584: LD_VAR 0 1
82588: DIFF
82589: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
82590: LD_ADDR_EXP 66
82594: PUSH
82595: LD_EXP 66
82599: PPUSH
82600: LD_VAR 0 6
82604: PPUSH
82605: LD_VAR 0 7
82609: PPUSH
82610: CALL_OW 1
82614: ST_TO_ADDR
// break ;
82615: GO 82619
// end ;
82617: GO 82513
82619: POP
82620: POP
// end ;
82621: LD_VAR 0 5
82625: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
82626: LD_INT 0
82628: PPUSH
82629: PPUSH
82630: PPUSH
82631: PPUSH
// if not mc_bases or not skirmish then
82632: LD_EXP 47
82636: NOT
82637: PUSH
82638: LD_EXP 45
82642: NOT
82643: OR
82644: IFFALSE 82648
// exit ;
82646: GO 83031
// side := GetSide ( vehicle ) ;
82648: LD_ADDR_VAR 0 5
82652: PUSH
82653: LD_VAR 0 1
82657: PPUSH
82658: CALL_OW 255
82662: ST_TO_ADDR
// for i = 1 to mc_bases do
82663: LD_ADDR_VAR 0 4
82667: PUSH
82668: DOUBLE
82669: LD_INT 1
82671: DEC
82672: ST_TO_ADDR
82673: LD_EXP 47
82677: PUSH
82678: FOR_TO
82679: IFFALSE 83029
// begin if factory in mc_bases [ i ] then
82681: LD_VAR 0 2
82685: PUSH
82686: LD_EXP 47
82690: PUSH
82691: LD_VAR 0 4
82695: ARRAY
82696: IN
82697: IFFALSE 83027
// begin if mc_defender [ i ] < mc_defender_limit [ i ] and not GetWeapon ( vehicle ) in [ ar_control_tower , ar_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , us_cargo_bay , ar_radar , ru_radar , us_radar , ru_bulldozer , us_bulldozer , ar_bio_bomb , ar_selfpropelled_bomb , us_hack , us_crane , ru_crane , ar_crane , ru_siberium_rocket , us_siberium_rocket ] then
82699: LD_EXP 69
82703: PUSH
82704: LD_VAR 0 4
82708: ARRAY
82709: PUSH
82710: LD_EXP 58
82714: PUSH
82715: LD_VAR 0 4
82719: ARRAY
82720: LESS
82721: PUSH
82722: LD_VAR 0 1
82726: PPUSH
82727: CALL_OW 264
82731: PUSH
82732: LD_INT 31
82734: PUSH
82735: LD_INT 32
82737: PUSH
82738: LD_INT 51
82740: PUSH
82741: LD_EXP 30
82745: PUSH
82746: LD_INT 12
82748: PUSH
82749: LD_INT 30
82751: PUSH
82752: LD_EXP 29
82756: PUSH
82757: LD_INT 11
82759: PUSH
82760: LD_INT 53
82762: PUSH
82763: LD_INT 14
82765: PUSH
82766: LD_EXP 33
82770: PUSH
82771: LD_INT 29
82773: PUSH
82774: LD_EXP 31
82778: PUSH
82779: LD_INT 13
82781: PUSH
82782: LD_INT 52
82784: PUSH
82785: LD_EXP 35
82789: PUSH
82790: LD_INT 48
82792: PUSH
82793: LD_INT 8
82795: PUSH
82796: EMPTY
82797: LIST
82798: LIST
82799: LIST
82800: LIST
82801: LIST
82802: LIST
82803: LIST
82804: LIST
82805: LIST
82806: LIST
82807: LIST
82808: LIST
82809: LIST
82810: LIST
82811: LIST
82812: LIST
82813: LIST
82814: LIST
82815: IN
82816: NOT
82817: AND
82818: IFFALSE 82866
// mc_defender := ReplaceIn ( mc_defender , [ i , mc_defender [ i ] + 1 ] , vehicle ) else
82820: LD_ADDR_EXP 69
82824: PUSH
82825: LD_EXP 69
82829: PPUSH
82830: LD_VAR 0 4
82834: PUSH
82835: LD_EXP 69
82839: PUSH
82840: LD_VAR 0 4
82844: ARRAY
82845: PUSH
82846: LD_INT 1
82848: PLUS
82849: PUSH
82850: EMPTY
82851: LIST
82852: LIST
82853: PPUSH
82854: LD_VAR 0 1
82858: PPUSH
82859: CALL 24315 0 3
82863: ST_TO_ADDR
82864: GO 82910
// mc_vehicles := ReplaceIn ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
82866: LD_ADDR_EXP 66
82870: PUSH
82871: LD_EXP 66
82875: PPUSH
82876: LD_VAR 0 4
82880: PUSH
82881: LD_EXP 66
82885: PUSH
82886: LD_VAR 0 4
82890: ARRAY
82891: PUSH
82892: LD_INT 1
82894: PLUS
82895: PUSH
82896: EMPTY
82897: LIST
82898: LIST
82899: PPUSH
82900: LD_VAR 0 1
82904: PPUSH
82905: CALL 24315 0 3
82909: ST_TO_ADDR
// if GetControl ( vehicle ) = control_remote then
82910: LD_VAR 0 1
82914: PPUSH
82915: CALL_OW 263
82919: PUSH
82920: LD_INT 2
82922: EQUAL
82923: IFFALSE 82943
// begin repeat wait ( 0 0$1 ) ;
82925: LD_INT 35
82927: PPUSH
82928: CALL_OW 67
// until IsControledBy ( vehicle ) ;
82932: LD_VAR 0 1
82936: PPUSH
82937: CALL_OW 312
82941: IFFALSE 82925
// end ; ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
82943: LD_VAR 0 1
82947: PPUSH
82948: LD_EXP 71
82952: PUSH
82953: LD_VAR 0 4
82957: ARRAY
82958: PPUSH
82959: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
82963: LD_VAR 0 1
82967: PPUSH
82968: CALL_OW 263
82972: PUSH
82973: LD_INT 1
82975: NONEQUAL
82976: IFFALSE 82980
// break ;
82978: GO 83029
// repeat wait ( 0 0$1 ) ;
82980: LD_INT 35
82982: PPUSH
82983: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
82987: LD_VAR 0 1
82991: PPUSH
82992: LD_EXP 71
82996: PUSH
82997: LD_VAR 0 4
83001: ARRAY
83002: PPUSH
83003: CALL_OW 308
83007: IFFALSE 82980
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
83009: LD_VAR 0 1
83013: PPUSH
83014: CALL_OW 311
83018: PPUSH
83019: CALL_OW 121
// exit ;
83023: POP
83024: POP
83025: GO 83031
// end ; end ;
83027: GO 82678
83029: POP
83030: POP
// end ;
83031: LD_VAR 0 3
83035: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
83036: LD_INT 0
83038: PPUSH
83039: PPUSH
83040: PPUSH
83041: PPUSH
// if not mc_bases or not skirmish then
83042: LD_EXP 47
83046: NOT
83047: PUSH
83048: LD_EXP 45
83052: NOT
83053: OR
83054: IFFALSE 83058
// exit ;
83056: GO 83411
// repeat wait ( 0 0$1 ) ;
83058: LD_INT 35
83060: PPUSH
83061: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
83065: LD_VAR 0 2
83069: PPUSH
83070: LD_VAR 0 3
83074: PPUSH
83075: CALL_OW 284
83079: IFFALSE 83058
// if GetResourceTypeXY ( x , y ) = mat_artefact then
83081: LD_VAR 0 2
83085: PPUSH
83086: LD_VAR 0 3
83090: PPUSH
83091: CALL_OW 283
83095: PUSH
83096: LD_INT 4
83098: EQUAL
83099: IFFALSE 83103
// exit ;
83101: GO 83411
// for i = 1 to mc_bases do
83103: LD_ADDR_VAR 0 7
83107: PUSH
83108: DOUBLE
83109: LD_INT 1
83111: DEC
83112: ST_TO_ADDR
83113: LD_EXP 47
83117: PUSH
83118: FOR_TO
83119: IFFALSE 83409
// begin if mc_crates_area [ i ] then
83121: LD_EXP 65
83125: PUSH
83126: LD_VAR 0 7
83130: ARRAY
83131: IFFALSE 83242
// for j in mc_crates_area [ i ] do
83133: LD_ADDR_VAR 0 8
83137: PUSH
83138: LD_EXP 65
83142: PUSH
83143: LD_VAR 0 7
83147: ARRAY
83148: PUSH
83149: FOR_IN
83150: IFFALSE 83240
// if InArea ( x , y , j ) then
83152: LD_VAR 0 2
83156: PPUSH
83157: LD_VAR 0 3
83161: PPUSH
83162: LD_VAR 0 8
83166: PPUSH
83167: CALL_OW 309
83171: IFFALSE 83238
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
83173: LD_ADDR_EXP 63
83177: PUSH
83178: LD_EXP 63
83182: PPUSH
83183: LD_VAR 0 7
83187: PUSH
83188: LD_EXP 63
83192: PUSH
83193: LD_VAR 0 7
83197: ARRAY
83198: PUSH
83199: LD_INT 1
83201: PLUS
83202: PUSH
83203: EMPTY
83204: LIST
83205: LIST
83206: PPUSH
83207: LD_VAR 0 4
83211: PUSH
83212: LD_VAR 0 2
83216: PUSH
83217: LD_VAR 0 3
83221: PUSH
83222: EMPTY
83223: LIST
83224: LIST
83225: LIST
83226: PPUSH
83227: CALL 24315 0 3
83231: ST_TO_ADDR
// exit ;
83232: POP
83233: POP
83234: POP
83235: POP
83236: GO 83411
// end ;
83238: GO 83149
83240: POP
83241: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
83242: LD_ADDR_VAR 0 9
83246: PUSH
83247: LD_EXP 47
83251: PUSH
83252: LD_VAR 0 7
83256: ARRAY
83257: PPUSH
83258: LD_INT 2
83260: PUSH
83261: LD_INT 30
83263: PUSH
83264: LD_INT 0
83266: PUSH
83267: EMPTY
83268: LIST
83269: LIST
83270: PUSH
83271: LD_INT 30
83273: PUSH
83274: LD_INT 1
83276: PUSH
83277: EMPTY
83278: LIST
83279: LIST
83280: PUSH
83281: EMPTY
83282: LIST
83283: LIST
83284: LIST
83285: PPUSH
83286: CALL_OW 72
83290: ST_TO_ADDR
// if not depot then
83291: LD_VAR 0 9
83295: NOT
83296: IFFALSE 83300
// continue ;
83298: GO 83118
// for j in depot do
83300: LD_ADDR_VAR 0 8
83304: PUSH
83305: LD_VAR 0 9
83309: PUSH
83310: FOR_IN
83311: IFFALSE 83405
// if GetDistUnitXY ( j , x , y ) < 30 then
83313: LD_VAR 0 8
83317: PPUSH
83318: LD_VAR 0 2
83322: PPUSH
83323: LD_VAR 0 3
83327: PPUSH
83328: CALL_OW 297
83332: PUSH
83333: LD_INT 30
83335: LESS
83336: IFFALSE 83403
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
83338: LD_ADDR_EXP 63
83342: PUSH
83343: LD_EXP 63
83347: PPUSH
83348: LD_VAR 0 7
83352: PUSH
83353: LD_EXP 63
83357: PUSH
83358: LD_VAR 0 7
83362: ARRAY
83363: PUSH
83364: LD_INT 1
83366: PLUS
83367: PUSH
83368: EMPTY
83369: LIST
83370: LIST
83371: PPUSH
83372: LD_VAR 0 4
83376: PUSH
83377: LD_VAR 0 2
83381: PUSH
83382: LD_VAR 0 3
83386: PUSH
83387: EMPTY
83388: LIST
83389: LIST
83390: LIST
83391: PPUSH
83392: CALL 24315 0 3
83396: ST_TO_ADDR
// exit ;
83397: POP
83398: POP
83399: POP
83400: POP
83401: GO 83411
// end ;
83403: GO 83310
83405: POP
83406: POP
// end ;
83407: GO 83118
83409: POP
83410: POP
// end ;
83411: LD_VAR 0 6
83415: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
83416: LD_INT 0
83418: PPUSH
83419: PPUSH
83420: PPUSH
83421: PPUSH
// if not mc_bases or not skirmish then
83422: LD_EXP 47
83426: NOT
83427: PUSH
83428: LD_EXP 45
83432: NOT
83433: OR
83434: IFFALSE 83438
// exit ;
83436: GO 83715
// side := GetSide ( lab ) ;
83438: LD_ADDR_VAR 0 4
83442: PUSH
83443: LD_VAR 0 2
83447: PPUSH
83448: CALL_OW 255
83452: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
83453: LD_VAR 0 4
83457: PUSH
83458: LD_EXP 73
83462: IN
83463: NOT
83464: PUSH
83465: LD_EXP 74
83469: NOT
83470: OR
83471: PUSH
83472: LD_EXP 47
83476: NOT
83477: OR
83478: IFFALSE 83482
// exit ;
83480: GO 83715
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
83482: LD_ADDR_EXP 74
83486: PUSH
83487: LD_EXP 74
83491: PPUSH
83492: LD_VAR 0 4
83496: PPUSH
83497: LD_EXP 74
83501: PUSH
83502: LD_VAR 0 4
83506: ARRAY
83507: PUSH
83508: LD_VAR 0 1
83512: DIFF
83513: PPUSH
83514: CALL_OW 1
83518: ST_TO_ADDR
// for i = 1 to mc_bases do
83519: LD_ADDR_VAR 0 5
83523: PUSH
83524: DOUBLE
83525: LD_INT 1
83527: DEC
83528: ST_TO_ADDR
83529: LD_EXP 47
83533: PUSH
83534: FOR_TO
83535: IFFALSE 83713
// begin if lab in mc_bases [ i ] then
83537: LD_VAR 0 2
83541: PUSH
83542: LD_EXP 47
83546: PUSH
83547: LD_VAR 0 5
83551: ARRAY
83552: IN
83553: IFFALSE 83711
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
83555: LD_VAR 0 1
83559: PUSH
83560: LD_INT 11
83562: PUSH
83563: LD_INT 4
83565: PUSH
83566: LD_INT 3
83568: PUSH
83569: LD_INT 2
83571: PUSH
83572: EMPTY
83573: LIST
83574: LIST
83575: LIST
83576: LIST
83577: IN
83578: PUSH
83579: LD_EXP 77
83583: PUSH
83584: LD_VAR 0 5
83588: ARRAY
83589: AND
83590: IFFALSE 83711
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
83592: LD_ADDR_VAR 0 6
83596: PUSH
83597: LD_EXP 77
83601: PUSH
83602: LD_VAR 0 5
83606: ARRAY
83607: PUSH
83608: LD_INT 1
83610: ARRAY
83611: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
83612: LD_ADDR_EXP 77
83616: PUSH
83617: LD_EXP 77
83621: PPUSH
83622: LD_VAR 0 5
83626: PPUSH
83627: EMPTY
83628: PPUSH
83629: CALL_OW 1
83633: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
83634: LD_VAR 0 6
83638: PPUSH
83639: LD_INT 0
83641: PPUSH
83642: CALL_OW 109
// ComExitBuilding ( tmp ) ;
83646: LD_VAR 0 6
83650: PPUSH
83651: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
83655: LD_ADDR_EXP 76
83659: PUSH
83660: LD_EXP 76
83664: PPUSH
83665: LD_VAR 0 5
83669: PPUSH
83670: LD_EXP 76
83674: PUSH
83675: LD_VAR 0 5
83679: ARRAY
83680: PPUSH
83681: LD_INT 1
83683: PPUSH
83684: LD_VAR 0 6
83688: PPUSH
83689: CALL_OW 2
83693: PPUSH
83694: CALL_OW 1
83698: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
83699: LD_VAR 0 5
83703: PPUSH
83704: LD_INT 112
83706: PPUSH
83707: CALL 60660 0 2
// end ; end ; end ;
83711: GO 83534
83713: POP
83714: POP
// end ;
83715: LD_VAR 0 3
83719: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
83720: LD_INT 0
83722: PPUSH
83723: PPUSH
83724: PPUSH
83725: PPUSH
83726: PPUSH
83727: PPUSH
83728: PPUSH
83729: PPUSH
// if not mc_bases or not skirmish then
83730: LD_EXP 47
83734: NOT
83735: PUSH
83736: LD_EXP 45
83740: NOT
83741: OR
83742: IFFALSE 83746
// exit ;
83744: GO 85117
// for i = 1 to mc_bases do
83746: LD_ADDR_VAR 0 3
83750: PUSH
83751: DOUBLE
83752: LD_INT 1
83754: DEC
83755: ST_TO_ADDR
83756: LD_EXP 47
83760: PUSH
83761: FOR_TO
83762: IFFALSE 85115
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_defender [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
83764: LD_VAR 0 1
83768: PUSH
83769: LD_EXP 47
83773: PUSH
83774: LD_VAR 0 3
83778: ARRAY
83779: IN
83780: PUSH
83781: LD_VAR 0 1
83785: PUSH
83786: LD_EXP 54
83790: PUSH
83791: LD_VAR 0 3
83795: ARRAY
83796: IN
83797: OR
83798: PUSH
83799: LD_VAR 0 1
83803: PUSH
83804: LD_EXP 69
83808: PUSH
83809: LD_VAR 0 3
83813: ARRAY
83814: IN
83815: OR
83816: PUSH
83817: LD_VAR 0 1
83821: PUSH
83822: LD_EXP 66
83826: PUSH
83827: LD_VAR 0 3
83831: ARRAY
83832: IN
83833: OR
83834: PUSH
83835: LD_VAR 0 1
83839: PUSH
83840: LD_EXP 76
83844: PUSH
83845: LD_VAR 0 3
83849: ARRAY
83850: IN
83851: OR
83852: PUSH
83853: LD_VAR 0 1
83857: PUSH
83858: LD_EXP 77
83862: PUSH
83863: LD_VAR 0 3
83867: ARRAY
83868: IN
83869: OR
83870: IFFALSE 85113
// begin if un in mc_ape [ i ] then
83872: LD_VAR 0 1
83876: PUSH
83877: LD_EXP 76
83881: PUSH
83882: LD_VAR 0 3
83886: ARRAY
83887: IN
83888: IFFALSE 83927
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
83890: LD_ADDR_EXP 76
83894: PUSH
83895: LD_EXP 76
83899: PPUSH
83900: LD_VAR 0 3
83904: PPUSH
83905: LD_EXP 76
83909: PUSH
83910: LD_VAR 0 3
83914: ARRAY
83915: PUSH
83916: LD_VAR 0 1
83920: DIFF
83921: PPUSH
83922: CALL_OW 1
83926: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
83927: LD_VAR 0 1
83931: PUSH
83932: LD_EXP 77
83936: PUSH
83937: LD_VAR 0 3
83941: ARRAY
83942: IN
83943: IFFALSE 83967
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
83945: LD_ADDR_EXP 77
83949: PUSH
83950: LD_EXP 77
83954: PPUSH
83955: LD_VAR 0 3
83959: PPUSH
83960: EMPTY
83961: PPUSH
83962: CALL_OW 1
83966: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and ( GetTag ( un ) = 20 or un in mc_defender [ i ] or GetWeapon ( un ) in [ us_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , ar_cargo_bay , us_crane , ru_crane , ar_control_tower ] ) then
83967: LD_VAR 0 1
83971: PPUSH
83972: CALL_OW 247
83976: PUSH
83977: LD_INT 2
83979: EQUAL
83980: PUSH
83981: LD_VAR 0 1
83985: PPUSH
83986: CALL_OW 110
83990: PUSH
83991: LD_INT 20
83993: EQUAL
83994: PUSH
83995: LD_VAR 0 1
83999: PUSH
84000: LD_EXP 69
84004: PUSH
84005: LD_VAR 0 3
84009: ARRAY
84010: IN
84011: OR
84012: PUSH
84013: LD_VAR 0 1
84017: PPUSH
84018: CALL_OW 264
84022: PUSH
84023: LD_INT 12
84025: PUSH
84026: LD_INT 51
84028: PUSH
84029: LD_EXP 30
84033: PUSH
84034: LD_INT 32
84036: PUSH
84037: LD_INT 13
84039: PUSH
84040: LD_INT 52
84042: PUSH
84043: LD_INT 31
84045: PUSH
84046: EMPTY
84047: LIST
84048: LIST
84049: LIST
84050: LIST
84051: LIST
84052: LIST
84053: LIST
84054: IN
84055: OR
84056: AND
84057: IFFALSE 84365
// begin if un in mc_defender [ i ] then
84059: LD_VAR 0 1
84063: PUSH
84064: LD_EXP 69
84068: PUSH
84069: LD_VAR 0 3
84073: ARRAY
84074: IN
84075: IFFALSE 84114
// mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
84077: LD_ADDR_EXP 69
84081: PUSH
84082: LD_EXP 69
84086: PPUSH
84087: LD_VAR 0 3
84091: PPUSH
84092: LD_EXP 69
84096: PUSH
84097: LD_VAR 0 3
84101: ARRAY
84102: PUSH
84103: LD_VAR 0 1
84107: DIFF
84108: PPUSH
84109: CALL_OW 1
84113: ST_TO_ADDR
// fac := MC_GetBuildings ( i , b_factory ) ;
84114: LD_ADDR_VAR 0 8
84118: PUSH
84119: LD_VAR 0 3
84123: PPUSH
84124: LD_INT 3
84126: PPUSH
84127: CALL 80764 0 2
84131: ST_TO_ADDR
// if fac then
84132: LD_VAR 0 8
84136: IFFALSE 84365
// begin for j in fac do
84138: LD_ADDR_VAR 0 4
84142: PUSH
84143: LD_VAR 0 8
84147: PUSH
84148: FOR_IN
84149: IFFALSE 84363
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
84151: LD_ADDR_VAR 0 9
84155: PUSH
84156: LD_VAR 0 8
84160: PPUSH
84161: LD_VAR 0 1
84165: PPUSH
84166: CALL_OW 265
84170: PPUSH
84171: LD_VAR 0 1
84175: PPUSH
84176: CALL_OW 262
84180: PPUSH
84181: LD_VAR 0 1
84185: PPUSH
84186: CALL_OW 263
84190: PPUSH
84191: LD_VAR 0 1
84195: PPUSH
84196: CALL_OW 264
84200: PPUSH
84201: CALL 21847 0 5
84205: ST_TO_ADDR
// if components then
84206: LD_VAR 0 9
84210: IFFALSE 84361
// begin if GetWeapon ( un ) = ar_control_tower then
84212: LD_VAR 0 1
84216: PPUSH
84217: CALL_OW 264
84221: PUSH
84222: LD_INT 31
84224: EQUAL
84225: IFFALSE 84342
// begin SetTag ( IsDrivenBy ( un ) , 0 ) ;
84227: LD_VAR 0 1
84231: PPUSH
84232: CALL_OW 311
84236: PPUSH
84237: LD_INT 0
84239: PPUSH
84240: CALL_OW 109
// mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff IsDrivenBy ( un ) ) ;
84244: LD_ADDR_EXP 87
84248: PUSH
84249: LD_EXP 87
84253: PPUSH
84254: LD_VAR 0 3
84258: PPUSH
84259: LD_EXP 87
84263: PUSH
84264: LD_VAR 0 3
84268: ARRAY
84269: PUSH
84270: LD_VAR 0 1
84274: PPUSH
84275: CALL_OW 311
84279: DIFF
84280: PPUSH
84281: CALL_OW 1
84285: ST_TO_ADDR
// tmp := Insert ( mc_produce [ i ] , 1 , components ) ;
84286: LD_ADDR_VAR 0 7
84290: PUSH
84291: LD_EXP 68
84295: PUSH
84296: LD_VAR 0 3
84300: ARRAY
84301: PPUSH
84302: LD_INT 1
84304: PPUSH
84305: LD_VAR 0 9
84309: PPUSH
84310: CALL_OW 2
84314: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
84315: LD_ADDR_EXP 68
84319: PUSH
84320: LD_EXP 68
84324: PPUSH
84325: LD_VAR 0 3
84329: PPUSH
84330: LD_VAR 0 7
84334: PPUSH
84335: CALL_OW 1
84339: ST_TO_ADDR
// end else
84340: GO 84359
// MC_InsertProduceList ( i , [ components ] ) ;
84342: LD_VAR 0 3
84346: PPUSH
84347: LD_VAR 0 9
84351: PUSH
84352: EMPTY
84353: LIST
84354: PPUSH
84355: CALL 80309 0 2
// break ;
84359: GO 84363
// end ; end ;
84361: GO 84148
84363: POP
84364: POP
// end ; end ; if GetType ( un ) = unit_building then
84365: LD_VAR 0 1
84369: PPUSH
84370: CALL_OW 247
84374: PUSH
84375: LD_INT 3
84377: EQUAL
84378: IFFALSE 84781
// begin btype := GetBType ( un ) ;
84380: LD_ADDR_VAR 0 5
84384: PUSH
84385: LD_VAR 0 1
84389: PPUSH
84390: CALL_OW 266
84394: ST_TO_ADDR
// if btype in [ b_oil_mine , b_siberite_mine ] then
84395: LD_VAR 0 5
84399: PUSH
84400: LD_INT 29
84402: PUSH
84403: LD_INT 30
84405: PUSH
84406: EMPTY
84407: LIST
84408: LIST
84409: IN
84410: IFFALSE 84483
// begin if not GetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) then
84412: LD_VAR 0 1
84416: PPUSH
84417: CALL_OW 250
84421: PPUSH
84422: LD_VAR 0 1
84426: PPUSH
84427: CALL_OW 251
84431: PPUSH
84432: LD_VAR 0 1
84436: PPUSH
84437: CALL_OW 255
84441: PPUSH
84442: CALL_OW 440
84446: NOT
84447: IFFALSE 84483
// SetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) ;
84449: LD_VAR 0 1
84453: PPUSH
84454: CALL_OW 250
84458: PPUSH
84459: LD_VAR 0 1
84463: PPUSH
84464: CALL_OW 251
84468: PPUSH
84469: LD_VAR 0 1
84473: PPUSH
84474: CALL_OW 255
84478: PPUSH
84479: CALL_OW 441
// end ; if btype = b_warehouse then
84483: LD_VAR 0 5
84487: PUSH
84488: LD_INT 1
84490: EQUAL
84491: IFFALSE 84509
// begin btype := b_depot ;
84493: LD_ADDR_VAR 0 5
84497: PUSH
84498: LD_INT 0
84500: ST_TO_ADDR
// pos := 1 ;
84501: LD_ADDR_VAR 0 6
84505: PUSH
84506: LD_INT 1
84508: ST_TO_ADDR
// end ; if btype = b_factory then
84509: LD_VAR 0 5
84513: PUSH
84514: LD_INT 3
84516: EQUAL
84517: IFFALSE 84535
// begin btype := b_workshop ;
84519: LD_ADDR_VAR 0 5
84523: PUSH
84524: LD_INT 2
84526: ST_TO_ADDR
// pos := 1 ;
84527: LD_ADDR_VAR 0 6
84531: PUSH
84532: LD_INT 1
84534: ST_TO_ADDR
// end ; if btype = b_barracks then
84535: LD_VAR 0 5
84539: PUSH
84540: LD_INT 5
84542: EQUAL
84543: IFFALSE 84553
// btype := b_armoury ;
84545: LD_ADDR_VAR 0 5
84549: PUSH
84550: LD_INT 4
84552: ST_TO_ADDR
// if btype in [ b_lab_half , b_lab_full ] then
84553: LD_VAR 0 5
84557: PUSH
84558: LD_INT 7
84560: PUSH
84561: LD_INT 8
84563: PUSH
84564: EMPTY
84565: LIST
84566: LIST
84567: IN
84568: IFFALSE 84578
// btype := b_lab ;
84570: LD_ADDR_VAR 0 5
84574: PUSH
84575: LD_INT 6
84577: ST_TO_ADDR
// mc_build_list := ReplaceIn ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
84578: LD_ADDR_EXP 52
84582: PUSH
84583: LD_EXP 52
84587: PPUSH
84588: LD_VAR 0 3
84592: PUSH
84593: LD_EXP 52
84597: PUSH
84598: LD_VAR 0 3
84602: ARRAY
84603: PUSH
84604: LD_INT 1
84606: PLUS
84607: PUSH
84608: EMPTY
84609: LIST
84610: LIST
84611: PPUSH
84612: LD_VAR 0 5
84616: PUSH
84617: LD_VAR 0 1
84621: PPUSH
84622: CALL_OW 250
84626: PUSH
84627: LD_VAR 0 1
84631: PPUSH
84632: CALL_OW 251
84636: PUSH
84637: LD_VAR 0 1
84641: PPUSH
84642: CALL_OW 254
84646: PUSH
84647: EMPTY
84648: LIST
84649: LIST
84650: LIST
84651: LIST
84652: PPUSH
84653: CALL 24315 0 3
84657: ST_TO_ADDR
// if pos = 1 then
84658: LD_VAR 0 6
84662: PUSH
84663: LD_INT 1
84665: EQUAL
84666: IFFALSE 84781
// begin tmp := mc_build_list [ i ] ;
84668: LD_ADDR_VAR 0 7
84672: PUSH
84673: LD_EXP 52
84677: PUSH
84678: LD_VAR 0 3
84682: ARRAY
84683: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
84684: LD_VAR 0 7
84688: PPUSH
84689: LD_INT 2
84691: PUSH
84692: LD_INT 30
84694: PUSH
84695: LD_INT 0
84697: PUSH
84698: EMPTY
84699: LIST
84700: LIST
84701: PUSH
84702: LD_INT 30
84704: PUSH
84705: LD_INT 1
84707: PUSH
84708: EMPTY
84709: LIST
84710: LIST
84711: PUSH
84712: EMPTY
84713: LIST
84714: LIST
84715: LIST
84716: PPUSH
84717: CALL_OW 72
84721: IFFALSE 84731
// pos := 2 ;
84723: LD_ADDR_VAR 0 6
84727: PUSH
84728: LD_INT 2
84730: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
84731: LD_ADDR_VAR 0 7
84735: PUSH
84736: LD_VAR 0 7
84740: PPUSH
84741: LD_VAR 0 6
84745: PPUSH
84746: LD_VAR 0 7
84750: PPUSH
84751: CALL 24641 0 3
84755: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
84756: LD_ADDR_EXP 52
84760: PUSH
84761: LD_EXP 52
84765: PPUSH
84766: LD_VAR 0 3
84770: PPUSH
84771: LD_VAR 0 7
84775: PPUSH
84776: CALL_OW 1
84780: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
84781: LD_VAR 0 1
84785: PUSH
84786: LD_EXP 47
84790: PUSH
84791: LD_VAR 0 3
84795: ARRAY
84796: IN
84797: IFFALSE 84836
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
84799: LD_ADDR_EXP 47
84803: PUSH
84804: LD_EXP 47
84808: PPUSH
84809: LD_VAR 0 3
84813: PPUSH
84814: LD_EXP 47
84818: PUSH
84819: LD_VAR 0 3
84823: ARRAY
84824: PUSH
84825: LD_VAR 0 1
84829: DIFF
84830: PPUSH
84831: CALL_OW 1
84835: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
84836: LD_VAR 0 1
84840: PUSH
84841: LD_EXP 54
84845: PUSH
84846: LD_VAR 0 3
84850: ARRAY
84851: IN
84852: IFFALSE 84891
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
84854: LD_ADDR_EXP 54
84858: PUSH
84859: LD_EXP 54
84863: PPUSH
84864: LD_VAR 0 3
84868: PPUSH
84869: LD_EXP 54
84873: PUSH
84874: LD_VAR 0 3
84878: ARRAY
84879: PUSH
84880: LD_VAR 0 1
84884: DIFF
84885: PPUSH
84886: CALL_OW 1
84890: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
84891: LD_VAR 0 1
84895: PUSH
84896: LD_EXP 66
84900: PUSH
84901: LD_VAR 0 3
84905: ARRAY
84906: IN
84907: IFFALSE 84946
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
84909: LD_ADDR_EXP 66
84913: PUSH
84914: LD_EXP 66
84918: PPUSH
84919: LD_VAR 0 3
84923: PPUSH
84924: LD_EXP 66
84928: PUSH
84929: LD_VAR 0 3
84933: ARRAY
84934: PUSH
84935: LD_VAR 0 1
84939: DIFF
84940: PPUSH
84941: CALL_OW 1
84945: ST_TO_ADDR
// end ; if un in mc_defender [ i ] then
84946: LD_VAR 0 1
84950: PUSH
84951: LD_EXP 69
84955: PUSH
84956: LD_VAR 0 3
84960: ARRAY
84961: IN
84962: IFFALSE 85001
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
84964: LD_ADDR_EXP 69
84968: PUSH
84969: LD_EXP 69
84973: PPUSH
84974: LD_VAR 0 3
84978: PPUSH
84979: LD_EXP 69
84983: PUSH
84984: LD_VAR 0 3
84988: ARRAY
84989: PUSH
84990: LD_VAR 0 1
84994: DIFF
84995: PPUSH
84996: CALL_OW 1
85000: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
85001: LD_VAR 0 1
85005: PUSH
85006: LD_EXP 56
85010: PUSH
85011: LD_VAR 0 3
85015: ARRAY
85016: IN
85017: IFFALSE 85056
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
85019: LD_ADDR_EXP 56
85023: PUSH
85024: LD_EXP 56
85028: PPUSH
85029: LD_VAR 0 3
85033: PPUSH
85034: LD_EXP 56
85038: PUSH
85039: LD_VAR 0 3
85043: ARRAY
85044: PUSH
85045: LD_VAR 0 1
85049: DIFF
85050: PPUSH
85051: CALL_OW 1
85055: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
85056: LD_VAR 0 1
85060: PUSH
85061: LD_EXP 55
85065: PUSH
85066: LD_VAR 0 3
85070: ARRAY
85071: IN
85072: IFFALSE 85111
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
85074: LD_ADDR_EXP 55
85078: PUSH
85079: LD_EXP 55
85083: PPUSH
85084: LD_VAR 0 3
85088: PPUSH
85089: LD_EXP 55
85093: PUSH
85094: LD_VAR 0 3
85098: ARRAY
85099: PUSH
85100: LD_VAR 0 1
85104: DIFF
85105: PPUSH
85106: CALL_OW 1
85110: ST_TO_ADDR
// end ; break ;
85111: GO 85115
// end ;
85113: GO 83761
85115: POP
85116: POP
// end ;
85117: LD_VAR 0 2
85121: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
85122: LD_INT 0
85124: PPUSH
85125: PPUSH
85126: PPUSH
// if not mc_bases or not skirmish then
85127: LD_EXP 47
85131: NOT
85132: PUSH
85133: LD_EXP 45
85137: NOT
85138: OR
85139: IFFALSE 85143
// exit ;
85141: GO 85358
// for i = 1 to mc_bases do
85143: LD_ADDR_VAR 0 3
85147: PUSH
85148: DOUBLE
85149: LD_INT 1
85151: DEC
85152: ST_TO_ADDR
85153: LD_EXP 47
85157: PUSH
85158: FOR_TO
85159: IFFALSE 85356
// begin if building in mc_construct_list [ i ] then
85161: LD_VAR 0 1
85165: PUSH
85166: LD_EXP 54
85170: PUSH
85171: LD_VAR 0 3
85175: ARRAY
85176: IN
85177: IFFALSE 85354
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
85179: LD_ADDR_EXP 54
85183: PUSH
85184: LD_EXP 54
85188: PPUSH
85189: LD_VAR 0 3
85193: PPUSH
85194: LD_EXP 54
85198: PUSH
85199: LD_VAR 0 3
85203: ARRAY
85204: PUSH
85205: LD_VAR 0 1
85209: DIFF
85210: PPUSH
85211: CALL_OW 1
85215: ST_TO_ADDR
// if building in mc_lab [ i ] then
85216: LD_VAR 0 1
85220: PUSH
85221: LD_EXP 80
85225: PUSH
85226: LD_VAR 0 3
85230: ARRAY
85231: IN
85232: IFFALSE 85287
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
85234: LD_ADDR_EXP 81
85238: PUSH
85239: LD_EXP 81
85243: PPUSH
85244: LD_VAR 0 3
85248: PPUSH
85249: LD_EXP 81
85253: PUSH
85254: LD_VAR 0 3
85258: ARRAY
85259: PPUSH
85260: LD_INT 1
85262: PPUSH
85263: LD_EXP 81
85267: PUSH
85268: LD_VAR 0 3
85272: ARRAY
85273: PPUSH
85274: LD_INT 0
85276: PPUSH
85277: CALL 23733 0 4
85281: PPUSH
85282: CALL_OW 1
85286: ST_TO_ADDR
// if not building in mc_bases [ i ] then
85287: LD_VAR 0 1
85291: PUSH
85292: LD_EXP 47
85296: PUSH
85297: LD_VAR 0 3
85301: ARRAY
85302: IN
85303: NOT
85304: IFFALSE 85350
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
85306: LD_ADDR_EXP 47
85310: PUSH
85311: LD_EXP 47
85315: PPUSH
85316: LD_VAR 0 3
85320: PUSH
85321: LD_EXP 47
85325: PUSH
85326: LD_VAR 0 3
85330: ARRAY
85331: PUSH
85332: LD_INT 1
85334: PLUS
85335: PUSH
85336: EMPTY
85337: LIST
85338: LIST
85339: PPUSH
85340: LD_VAR 0 1
85344: PPUSH
85345: CALL 24315 0 3
85349: ST_TO_ADDR
// exit ;
85350: POP
85351: POP
85352: GO 85358
// end ; end ;
85354: GO 85158
85356: POP
85357: POP
// end ;
85358: LD_VAR 0 2
85362: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
85363: LD_INT 0
85365: PPUSH
85366: PPUSH
85367: PPUSH
85368: PPUSH
85369: PPUSH
85370: PPUSH
85371: PPUSH
// if not mc_bases or not skirmish then
85372: LD_EXP 47
85376: NOT
85377: PUSH
85378: LD_EXP 45
85382: NOT
85383: OR
85384: IFFALSE 85388
// exit ;
85386: GO 86049
// for i = 1 to mc_bases do
85388: LD_ADDR_VAR 0 3
85392: PUSH
85393: DOUBLE
85394: LD_INT 1
85396: DEC
85397: ST_TO_ADDR
85398: LD_EXP 47
85402: PUSH
85403: FOR_TO
85404: IFFALSE 86047
// begin if building in mc_construct_list [ i ] then
85406: LD_VAR 0 1
85410: PUSH
85411: LD_EXP 54
85415: PUSH
85416: LD_VAR 0 3
85420: ARRAY
85421: IN
85422: IFFALSE 86045
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
85424: LD_ADDR_EXP 54
85428: PUSH
85429: LD_EXP 54
85433: PPUSH
85434: LD_VAR 0 3
85438: PPUSH
85439: LD_EXP 54
85443: PUSH
85444: LD_VAR 0 3
85448: ARRAY
85449: PUSH
85450: LD_VAR 0 1
85454: DIFF
85455: PPUSH
85456: CALL_OW 1
85460: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
85461: LD_ADDR_EXP 47
85465: PUSH
85466: LD_EXP 47
85470: PPUSH
85471: LD_VAR 0 3
85475: PUSH
85476: LD_EXP 47
85480: PUSH
85481: LD_VAR 0 3
85485: ARRAY
85486: PUSH
85487: LD_INT 1
85489: PLUS
85490: PUSH
85491: EMPTY
85492: LIST
85493: LIST
85494: PPUSH
85495: LD_VAR 0 1
85499: PPUSH
85500: CALL 24315 0 3
85504: ST_TO_ADDR
// btype := GetBType ( building ) ;
85505: LD_ADDR_VAR 0 5
85509: PUSH
85510: LD_VAR 0 1
85514: PPUSH
85515: CALL_OW 266
85519: ST_TO_ADDR
// side := GetSide ( building ) ;
85520: LD_ADDR_VAR 0 8
85524: PUSH
85525: LD_VAR 0 1
85529: PPUSH
85530: CALL_OW 255
85534: ST_TO_ADDR
// if btype = b_lab then
85535: LD_VAR 0 5
85539: PUSH
85540: LD_INT 6
85542: EQUAL
85543: IFFALSE 85593
// begin mc_lab := ReplaceIn ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
85545: LD_ADDR_EXP 80
85549: PUSH
85550: LD_EXP 80
85554: PPUSH
85555: LD_VAR 0 3
85559: PUSH
85560: LD_EXP 80
85564: PUSH
85565: LD_VAR 0 3
85569: ARRAY
85570: PUSH
85571: LD_INT 1
85573: PLUS
85574: PUSH
85575: EMPTY
85576: LIST
85577: LIST
85578: PPUSH
85579: LD_VAR 0 1
85583: PPUSH
85584: CALL 24315 0 3
85588: ST_TO_ADDR
// exit ;
85589: POP
85590: POP
85591: GO 86049
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
85593: LD_VAR 0 5
85597: PUSH
85598: LD_INT 0
85600: PUSH
85601: LD_INT 2
85603: PUSH
85604: LD_INT 4
85606: PUSH
85607: EMPTY
85608: LIST
85609: LIST
85610: LIST
85611: IN
85612: IFFALSE 85736
// begin if btype = b_armoury then
85614: LD_VAR 0 5
85618: PUSH
85619: LD_INT 4
85621: EQUAL
85622: IFFALSE 85632
// btype := b_barracks ;
85624: LD_ADDR_VAR 0 5
85628: PUSH
85629: LD_INT 5
85631: ST_TO_ADDR
// if btype = b_depot then
85632: LD_VAR 0 5
85636: PUSH
85637: LD_INT 0
85639: EQUAL
85640: IFFALSE 85650
// btype := b_warehouse ;
85642: LD_ADDR_VAR 0 5
85646: PUSH
85647: LD_INT 1
85649: ST_TO_ADDR
// if btype = b_workshop then
85650: LD_VAR 0 5
85654: PUSH
85655: LD_INT 2
85657: EQUAL
85658: IFFALSE 85668
// btype := b_factory ;
85660: LD_ADDR_VAR 0 5
85664: PUSH
85665: LD_INT 3
85667: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
85668: LD_VAR 0 5
85672: PPUSH
85673: LD_VAR 0 8
85677: PPUSH
85678: CALL_OW 323
85682: PUSH
85683: LD_INT 1
85685: EQUAL
85686: IFFALSE 85732
// mc_build_upgrade := ReplaceIn ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
85688: LD_ADDR_EXP 79
85692: PUSH
85693: LD_EXP 79
85697: PPUSH
85698: LD_VAR 0 3
85702: PUSH
85703: LD_EXP 79
85707: PUSH
85708: LD_VAR 0 3
85712: ARRAY
85713: PUSH
85714: LD_INT 1
85716: PLUS
85717: PUSH
85718: EMPTY
85719: LIST
85720: LIST
85721: PPUSH
85722: LD_VAR 0 1
85726: PPUSH
85727: CALL 24315 0 3
85731: ST_TO_ADDR
// exit ;
85732: POP
85733: POP
85734: GO 86049
// end ; if btype in [ b_bunker , b_turret ] then
85736: LD_VAR 0 5
85740: PUSH
85741: LD_INT 32
85743: PUSH
85744: LD_INT 33
85746: PUSH
85747: EMPTY
85748: LIST
85749: LIST
85750: IN
85751: IFFALSE 86041
// begin mc_turret_list := ReplaceIn ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
85753: LD_ADDR_EXP 55
85757: PUSH
85758: LD_EXP 55
85762: PPUSH
85763: LD_VAR 0 3
85767: PUSH
85768: LD_EXP 55
85772: PUSH
85773: LD_VAR 0 3
85777: ARRAY
85778: PUSH
85779: LD_INT 1
85781: PLUS
85782: PUSH
85783: EMPTY
85784: LIST
85785: LIST
85786: PPUSH
85787: LD_VAR 0 1
85791: PPUSH
85792: CALL 24315 0 3
85796: ST_TO_ADDR
// if btype = b_bunker then
85797: LD_VAR 0 5
85801: PUSH
85802: LD_INT 32
85804: EQUAL
85805: IFFALSE 86041
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
85807: LD_ADDR_EXP 56
85811: PUSH
85812: LD_EXP 56
85816: PPUSH
85817: LD_VAR 0 3
85821: PUSH
85822: LD_EXP 56
85826: PUSH
85827: LD_VAR 0 3
85831: ARRAY
85832: PUSH
85833: LD_INT 1
85835: PLUS
85836: PUSH
85837: EMPTY
85838: LIST
85839: LIST
85840: PPUSH
85841: LD_VAR 0 1
85845: PPUSH
85846: CALL 24315 0 3
85850: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
85851: LD_ADDR_VAR 0 6
85855: PUSH
85856: LD_EXP 47
85860: PUSH
85861: LD_VAR 0 3
85865: ARRAY
85866: PPUSH
85867: LD_INT 25
85869: PUSH
85870: LD_INT 1
85872: PUSH
85873: EMPTY
85874: LIST
85875: LIST
85876: PUSH
85877: LD_INT 3
85879: PUSH
85880: LD_INT 54
85882: PUSH
85883: EMPTY
85884: LIST
85885: PUSH
85886: EMPTY
85887: LIST
85888: LIST
85889: PUSH
85890: EMPTY
85891: LIST
85892: LIST
85893: PPUSH
85894: CALL_OW 72
85898: ST_TO_ADDR
// if tmp then
85899: LD_VAR 0 6
85903: IFFALSE 85909
// exit ;
85905: POP
85906: POP
85907: GO 86049
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
85909: LD_ADDR_VAR 0 6
85913: PUSH
85914: LD_EXP 47
85918: PUSH
85919: LD_VAR 0 3
85923: ARRAY
85924: PPUSH
85925: LD_INT 2
85927: PUSH
85928: LD_INT 30
85930: PUSH
85931: LD_INT 4
85933: PUSH
85934: EMPTY
85935: LIST
85936: LIST
85937: PUSH
85938: LD_INT 30
85940: PUSH
85941: LD_INT 5
85943: PUSH
85944: EMPTY
85945: LIST
85946: LIST
85947: PUSH
85948: EMPTY
85949: LIST
85950: LIST
85951: LIST
85952: PPUSH
85953: CALL_OW 72
85957: ST_TO_ADDR
// if not tmp then
85958: LD_VAR 0 6
85962: NOT
85963: IFFALSE 85969
// exit ;
85965: POP
85966: POP
85967: GO 86049
// for j in tmp do
85969: LD_ADDR_VAR 0 4
85973: PUSH
85974: LD_VAR 0 6
85978: PUSH
85979: FOR_IN
85980: IFFALSE 86039
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
85982: LD_ADDR_VAR 0 7
85986: PUSH
85987: LD_VAR 0 4
85991: PPUSH
85992: CALL_OW 313
85996: PPUSH
85997: LD_INT 25
85999: PUSH
86000: LD_INT 1
86002: PUSH
86003: EMPTY
86004: LIST
86005: LIST
86006: PPUSH
86007: CALL_OW 72
86011: ST_TO_ADDR
// if units then
86012: LD_VAR 0 7
86016: IFFALSE 86037
// begin ComExitBuilding ( units [ 1 ] ) ;
86018: LD_VAR 0 7
86022: PUSH
86023: LD_INT 1
86025: ARRAY
86026: PPUSH
86027: CALL_OW 122
// exit ;
86031: POP
86032: POP
86033: POP
86034: POP
86035: GO 86049
// end ; end ;
86037: GO 85979
86039: POP
86040: POP
// end ; end ; exit ;
86041: POP
86042: POP
86043: GO 86049
// end ; end ;
86045: GO 85403
86047: POP
86048: POP
// end ;
86049: LD_VAR 0 2
86053: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
86054: LD_INT 0
86056: PPUSH
86057: PPUSH
86058: PPUSH
86059: PPUSH
86060: PPUSH
86061: PPUSH
86062: PPUSH
// if not mc_bases or not skirmish then
86063: LD_EXP 47
86067: NOT
86068: PUSH
86069: LD_EXP 45
86073: NOT
86074: OR
86075: IFFALSE 86079
// exit ;
86077: GO 86310
// btype := GetBType ( building ) ;
86079: LD_ADDR_VAR 0 6
86083: PUSH
86084: LD_VAR 0 1
86088: PPUSH
86089: CALL_OW 266
86093: ST_TO_ADDR
// x := GetX ( building ) ;
86094: LD_ADDR_VAR 0 7
86098: PUSH
86099: LD_VAR 0 1
86103: PPUSH
86104: CALL_OW 250
86108: ST_TO_ADDR
// y := GetY ( building ) ;
86109: LD_ADDR_VAR 0 8
86113: PUSH
86114: LD_VAR 0 1
86118: PPUSH
86119: CALL_OW 251
86123: ST_TO_ADDR
// d := GetDir ( building ) ;
86124: LD_ADDR_VAR 0 9
86128: PUSH
86129: LD_VAR 0 1
86133: PPUSH
86134: CALL_OW 254
86138: ST_TO_ADDR
// for i = 1 to mc_bases do
86139: LD_ADDR_VAR 0 4
86143: PUSH
86144: DOUBLE
86145: LD_INT 1
86147: DEC
86148: ST_TO_ADDR
86149: LD_EXP 47
86153: PUSH
86154: FOR_TO
86155: IFFALSE 86308
// begin if not mc_build_list [ i ] then
86157: LD_EXP 52
86161: PUSH
86162: LD_VAR 0 4
86166: ARRAY
86167: NOT
86168: IFFALSE 86172
// continue ;
86170: GO 86154
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
86172: LD_VAR 0 6
86176: PUSH
86177: LD_VAR 0 7
86181: PUSH
86182: LD_VAR 0 8
86186: PUSH
86187: LD_VAR 0 9
86191: PUSH
86192: EMPTY
86193: LIST
86194: LIST
86195: LIST
86196: LIST
86197: PPUSH
86198: LD_EXP 52
86202: PUSH
86203: LD_VAR 0 4
86207: ARRAY
86208: PUSH
86209: LD_INT 1
86211: ARRAY
86212: PPUSH
86213: CALL 30484 0 2
86217: IFFALSE 86306
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
86219: LD_ADDR_EXP 52
86223: PUSH
86224: LD_EXP 52
86228: PPUSH
86229: LD_VAR 0 4
86233: PPUSH
86234: LD_EXP 52
86238: PUSH
86239: LD_VAR 0 4
86243: ARRAY
86244: PPUSH
86245: LD_INT 1
86247: PPUSH
86248: CALL_OW 3
86252: PPUSH
86253: CALL_OW 1
86257: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
86258: LD_ADDR_EXP 54
86262: PUSH
86263: LD_EXP 54
86267: PPUSH
86268: LD_VAR 0 4
86272: PUSH
86273: LD_EXP 54
86277: PUSH
86278: LD_VAR 0 4
86282: ARRAY
86283: PUSH
86284: LD_INT 1
86286: PLUS
86287: PUSH
86288: EMPTY
86289: LIST
86290: LIST
86291: PPUSH
86292: LD_VAR 0 1
86296: PPUSH
86297: CALL 24315 0 3
86301: ST_TO_ADDR
// exit ;
86302: POP
86303: POP
86304: GO 86310
// end ; end ;
86306: GO 86154
86308: POP
86309: POP
// end ;
86310: LD_VAR 0 3
86314: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
86315: LD_INT 0
86317: PPUSH
86318: PPUSH
86319: PPUSH
// if not mc_bases or not skirmish then
86320: LD_EXP 47
86324: NOT
86325: PUSH
86326: LD_EXP 45
86330: NOT
86331: OR
86332: IFFALSE 86336
// exit ;
86334: GO 86526
// for i = 1 to mc_bases do
86336: LD_ADDR_VAR 0 4
86340: PUSH
86341: DOUBLE
86342: LD_INT 1
86344: DEC
86345: ST_TO_ADDR
86346: LD_EXP 47
86350: PUSH
86351: FOR_TO
86352: IFFALSE 86439
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
86354: LD_VAR 0 1
86358: PUSH
86359: LD_EXP 55
86363: PUSH
86364: LD_VAR 0 4
86368: ARRAY
86369: IN
86370: PUSH
86371: LD_VAR 0 1
86375: PUSH
86376: LD_EXP 56
86380: PUSH
86381: LD_VAR 0 4
86385: ARRAY
86386: IN
86387: NOT
86388: AND
86389: IFFALSE 86437
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
86391: LD_ADDR_EXP 56
86395: PUSH
86396: LD_EXP 56
86400: PPUSH
86401: LD_VAR 0 4
86405: PUSH
86406: LD_EXP 56
86410: PUSH
86411: LD_VAR 0 4
86415: ARRAY
86416: PUSH
86417: LD_INT 1
86419: PLUS
86420: PUSH
86421: EMPTY
86422: LIST
86423: LIST
86424: PPUSH
86425: LD_VAR 0 1
86429: PPUSH
86430: CALL 24315 0 3
86434: ST_TO_ADDR
// break ;
86435: GO 86439
// end ; end ;
86437: GO 86351
86439: POP
86440: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
86441: LD_VAR 0 1
86445: PPUSH
86446: CALL_OW 257
86450: PUSH
86451: LD_EXP 73
86455: IN
86456: PUSH
86457: LD_VAR 0 1
86461: PPUSH
86462: CALL_OW 266
86466: PUSH
86467: LD_INT 5
86469: EQUAL
86470: AND
86471: PUSH
86472: LD_VAR 0 2
86476: PPUSH
86477: CALL_OW 110
86481: PUSH
86482: LD_INT 18
86484: NONEQUAL
86485: AND
86486: IFFALSE 86526
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
86488: LD_VAR 0 2
86492: PPUSH
86493: CALL_OW 257
86497: PUSH
86498: LD_INT 5
86500: PUSH
86501: LD_INT 8
86503: PUSH
86504: LD_INT 9
86506: PUSH
86507: EMPTY
86508: LIST
86509: LIST
86510: LIST
86511: IN
86512: IFFALSE 86526
// SetClass ( unit , 1 ) ;
86514: LD_VAR 0 2
86518: PPUSH
86519: LD_INT 1
86521: PPUSH
86522: CALL_OW 336
// end ;
86526: LD_VAR 0 3
86530: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
86531: LD_INT 0
86533: PPUSH
86534: PPUSH
// if not mc_bases or not skirmish then
86535: LD_EXP 47
86539: NOT
86540: PUSH
86541: LD_EXP 45
86545: NOT
86546: OR
86547: IFFALSE 86551
// exit ;
86549: GO 86667
// if GetLives ( abandoned_vehicle ) > 250 then
86551: LD_VAR 0 2
86555: PPUSH
86556: CALL_OW 256
86560: PUSH
86561: LD_INT 250
86563: GREATER
86564: IFFALSE 86568
// exit ;
86566: GO 86667
// for i = 1 to mc_bases do
86568: LD_ADDR_VAR 0 6
86572: PUSH
86573: DOUBLE
86574: LD_INT 1
86576: DEC
86577: ST_TO_ADDR
86578: LD_EXP 47
86582: PUSH
86583: FOR_TO
86584: IFFALSE 86665
// begin if driver in mc_bases [ i ] then
86586: LD_VAR 0 1
86590: PUSH
86591: LD_EXP 47
86595: PUSH
86596: LD_VAR 0 6
86600: ARRAY
86601: IN
86602: IFFALSE 86663
// begin ComMoveToNearbyEntrance ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
86604: LD_VAR 0 1
86608: PPUSH
86609: LD_EXP 47
86613: PUSH
86614: LD_VAR 0 6
86618: ARRAY
86619: PPUSH
86620: LD_INT 2
86622: PUSH
86623: LD_INT 30
86625: PUSH
86626: LD_INT 0
86628: PUSH
86629: EMPTY
86630: LIST
86631: LIST
86632: PUSH
86633: LD_INT 30
86635: PUSH
86636: LD_INT 1
86638: PUSH
86639: EMPTY
86640: LIST
86641: LIST
86642: PUSH
86643: EMPTY
86644: LIST
86645: LIST
86646: LIST
86647: PPUSH
86648: CALL_OW 72
86652: PUSH
86653: LD_INT 1
86655: ARRAY
86656: PPUSH
86657: CALL 56181 0 2
// break ;
86661: GO 86665
// end ; end ;
86663: GO 86583
86665: POP
86666: POP
// end ; end_of_file end_of_file
86667: LD_VAR 0 5
86671: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
86672: LD_VAR 0 2
86676: PUSH
86677: LD_INT 100
86679: EQUAL
86680: IFFALSE 87629
// begin if not StreamModeActive then
86682: LD_EXP 90
86686: NOT
86687: IFFALSE 86697
// StreamModeActive := true ;
86689: LD_ADDR_EXP 90
86693: PUSH
86694: LD_INT 1
86696: ST_TO_ADDR
// if p3 = 0 then
86697: LD_VAR 0 3
86701: PUSH
86702: LD_INT 0
86704: EQUAL
86705: IFFALSE 86711
// InitStreamMode ;
86707: CALL 87787 0 0
// if p3 = 1 then
86711: LD_VAR 0 3
86715: PUSH
86716: LD_INT 1
86718: EQUAL
86719: IFFALSE 86729
// sRocket := true ;
86721: LD_ADDR_EXP 95
86725: PUSH
86726: LD_INT 1
86728: ST_TO_ADDR
// if p3 = 2 then
86729: LD_VAR 0 3
86733: PUSH
86734: LD_INT 2
86736: EQUAL
86737: IFFALSE 86747
// sSpeed := true ;
86739: LD_ADDR_EXP 94
86743: PUSH
86744: LD_INT 1
86746: ST_TO_ADDR
// if p3 = 3 then
86747: LD_VAR 0 3
86751: PUSH
86752: LD_INT 3
86754: EQUAL
86755: IFFALSE 86765
// sEngine := true ;
86757: LD_ADDR_EXP 96
86761: PUSH
86762: LD_INT 1
86764: ST_TO_ADDR
// if p3 = 4 then
86765: LD_VAR 0 3
86769: PUSH
86770: LD_INT 4
86772: EQUAL
86773: IFFALSE 86783
// sSpec := true ;
86775: LD_ADDR_EXP 93
86779: PUSH
86780: LD_INT 1
86782: ST_TO_ADDR
// if p3 = 5 then
86783: LD_VAR 0 3
86787: PUSH
86788: LD_INT 5
86790: EQUAL
86791: IFFALSE 86801
// sLevel := true ;
86793: LD_ADDR_EXP 97
86797: PUSH
86798: LD_INT 1
86800: ST_TO_ADDR
// if p3 = 6 then
86801: LD_VAR 0 3
86805: PUSH
86806: LD_INT 6
86808: EQUAL
86809: IFFALSE 86819
// sArmoury := true ;
86811: LD_ADDR_EXP 98
86815: PUSH
86816: LD_INT 1
86818: ST_TO_ADDR
// if p3 = 7 then
86819: LD_VAR 0 3
86823: PUSH
86824: LD_INT 7
86826: EQUAL
86827: IFFALSE 86837
// sRadar := true ;
86829: LD_ADDR_EXP 99
86833: PUSH
86834: LD_INT 1
86836: ST_TO_ADDR
// if p3 = 8 then
86837: LD_VAR 0 3
86841: PUSH
86842: LD_INT 8
86844: EQUAL
86845: IFFALSE 86855
// sBunker := true ;
86847: LD_ADDR_EXP 100
86851: PUSH
86852: LD_INT 1
86854: ST_TO_ADDR
// if p3 = 9 then
86855: LD_VAR 0 3
86859: PUSH
86860: LD_INT 9
86862: EQUAL
86863: IFFALSE 86873
// sHack := true ;
86865: LD_ADDR_EXP 101
86869: PUSH
86870: LD_INT 1
86872: ST_TO_ADDR
// if p3 = 10 then
86873: LD_VAR 0 3
86877: PUSH
86878: LD_INT 10
86880: EQUAL
86881: IFFALSE 86891
// sFire := true ;
86883: LD_ADDR_EXP 102
86887: PUSH
86888: LD_INT 1
86890: ST_TO_ADDR
// if p3 = 11 then
86891: LD_VAR 0 3
86895: PUSH
86896: LD_INT 11
86898: EQUAL
86899: IFFALSE 86909
// sRefresh := true ;
86901: LD_ADDR_EXP 103
86905: PUSH
86906: LD_INT 1
86908: ST_TO_ADDR
// if p3 = 12 then
86909: LD_VAR 0 3
86913: PUSH
86914: LD_INT 12
86916: EQUAL
86917: IFFALSE 86927
// sExp := true ;
86919: LD_ADDR_EXP 104
86923: PUSH
86924: LD_INT 1
86926: ST_TO_ADDR
// if p3 = 13 then
86927: LD_VAR 0 3
86931: PUSH
86932: LD_INT 13
86934: EQUAL
86935: IFFALSE 86945
// sDepot := true ;
86937: LD_ADDR_EXP 105
86941: PUSH
86942: LD_INT 1
86944: ST_TO_ADDR
// if p3 = 14 then
86945: LD_VAR 0 3
86949: PUSH
86950: LD_INT 14
86952: EQUAL
86953: IFFALSE 86963
// sFlag := true ;
86955: LD_ADDR_EXP 106
86959: PUSH
86960: LD_INT 1
86962: ST_TO_ADDR
// if p3 = 15 then
86963: LD_VAR 0 3
86967: PUSH
86968: LD_INT 15
86970: EQUAL
86971: IFFALSE 86981
// sKamikadze := true ;
86973: LD_ADDR_EXP 114
86977: PUSH
86978: LD_INT 1
86980: ST_TO_ADDR
// if p3 = 16 then
86981: LD_VAR 0 3
86985: PUSH
86986: LD_INT 16
86988: EQUAL
86989: IFFALSE 86999
// sTroll := true ;
86991: LD_ADDR_EXP 115
86995: PUSH
86996: LD_INT 1
86998: ST_TO_ADDR
// if p3 = 17 then
86999: LD_VAR 0 3
87003: PUSH
87004: LD_INT 17
87006: EQUAL
87007: IFFALSE 87017
// sSlow := true ;
87009: LD_ADDR_EXP 116
87013: PUSH
87014: LD_INT 1
87016: ST_TO_ADDR
// if p3 = 18 then
87017: LD_VAR 0 3
87021: PUSH
87022: LD_INT 18
87024: EQUAL
87025: IFFALSE 87035
// sLack := true ;
87027: LD_ADDR_EXP 117
87031: PUSH
87032: LD_INT 1
87034: ST_TO_ADDR
// if p3 = 19 then
87035: LD_VAR 0 3
87039: PUSH
87040: LD_INT 19
87042: EQUAL
87043: IFFALSE 87053
// sTank := true ;
87045: LD_ADDR_EXP 119
87049: PUSH
87050: LD_INT 1
87052: ST_TO_ADDR
// if p3 = 20 then
87053: LD_VAR 0 3
87057: PUSH
87058: LD_INT 20
87060: EQUAL
87061: IFFALSE 87071
// sRemote := true ;
87063: LD_ADDR_EXP 120
87067: PUSH
87068: LD_INT 1
87070: ST_TO_ADDR
// if p3 = 21 then
87071: LD_VAR 0 3
87075: PUSH
87076: LD_INT 21
87078: EQUAL
87079: IFFALSE 87089
// sPowell := true ;
87081: LD_ADDR_EXP 121
87085: PUSH
87086: LD_INT 1
87088: ST_TO_ADDR
// if p3 = 22 then
87089: LD_VAR 0 3
87093: PUSH
87094: LD_INT 22
87096: EQUAL
87097: IFFALSE 87107
// sTeleport := true ;
87099: LD_ADDR_EXP 124
87103: PUSH
87104: LD_INT 1
87106: ST_TO_ADDR
// if p3 = 23 then
87107: LD_VAR 0 3
87111: PUSH
87112: LD_INT 23
87114: EQUAL
87115: IFFALSE 87125
// sOilTower := true ;
87117: LD_ADDR_EXP 126
87121: PUSH
87122: LD_INT 1
87124: ST_TO_ADDR
// if p3 = 24 then
87125: LD_VAR 0 3
87129: PUSH
87130: LD_INT 24
87132: EQUAL
87133: IFFALSE 87143
// sShovel := true ;
87135: LD_ADDR_EXP 127
87139: PUSH
87140: LD_INT 1
87142: ST_TO_ADDR
// if p3 = 25 then
87143: LD_VAR 0 3
87147: PUSH
87148: LD_INT 25
87150: EQUAL
87151: IFFALSE 87161
// sSheik := true ;
87153: LD_ADDR_EXP 128
87157: PUSH
87158: LD_INT 1
87160: ST_TO_ADDR
// if p3 = 26 then
87161: LD_VAR 0 3
87165: PUSH
87166: LD_INT 26
87168: EQUAL
87169: IFFALSE 87179
// sEarthquake := true ;
87171: LD_ADDR_EXP 130
87175: PUSH
87176: LD_INT 1
87178: ST_TO_ADDR
// if p3 = 27 then
87179: LD_VAR 0 3
87183: PUSH
87184: LD_INT 27
87186: EQUAL
87187: IFFALSE 87197
// sAI := true ;
87189: LD_ADDR_EXP 131
87193: PUSH
87194: LD_INT 1
87196: ST_TO_ADDR
// if p3 = 28 then
87197: LD_VAR 0 3
87201: PUSH
87202: LD_INT 28
87204: EQUAL
87205: IFFALSE 87215
// sCargo := true ;
87207: LD_ADDR_EXP 134
87211: PUSH
87212: LD_INT 1
87214: ST_TO_ADDR
// if p3 = 29 then
87215: LD_VAR 0 3
87219: PUSH
87220: LD_INT 29
87222: EQUAL
87223: IFFALSE 87233
// sDLaser := true ;
87225: LD_ADDR_EXP 135
87229: PUSH
87230: LD_INT 1
87232: ST_TO_ADDR
// if p3 = 30 then
87233: LD_VAR 0 3
87237: PUSH
87238: LD_INT 30
87240: EQUAL
87241: IFFALSE 87251
// sExchange := true ;
87243: LD_ADDR_EXP 136
87247: PUSH
87248: LD_INT 1
87250: ST_TO_ADDR
// if p3 = 31 then
87251: LD_VAR 0 3
87255: PUSH
87256: LD_INT 31
87258: EQUAL
87259: IFFALSE 87269
// sFac := true ;
87261: LD_ADDR_EXP 137
87265: PUSH
87266: LD_INT 1
87268: ST_TO_ADDR
// if p3 = 32 then
87269: LD_VAR 0 3
87273: PUSH
87274: LD_INT 32
87276: EQUAL
87277: IFFALSE 87287
// sPower := true ;
87279: LD_ADDR_EXP 138
87283: PUSH
87284: LD_INT 1
87286: ST_TO_ADDR
// if p3 = 33 then
87287: LD_VAR 0 3
87291: PUSH
87292: LD_INT 33
87294: EQUAL
87295: IFFALSE 87305
// sRandom := true ;
87297: LD_ADDR_EXP 139
87301: PUSH
87302: LD_INT 1
87304: ST_TO_ADDR
// if p3 = 34 then
87305: LD_VAR 0 3
87309: PUSH
87310: LD_INT 34
87312: EQUAL
87313: IFFALSE 87323
// sShield := true ;
87315: LD_ADDR_EXP 140
87319: PUSH
87320: LD_INT 1
87322: ST_TO_ADDR
// if p3 = 35 then
87323: LD_VAR 0 3
87327: PUSH
87328: LD_INT 35
87330: EQUAL
87331: IFFALSE 87341
// sTime := true ;
87333: LD_ADDR_EXP 141
87337: PUSH
87338: LD_INT 1
87340: ST_TO_ADDR
// if p3 = 36 then
87341: LD_VAR 0 3
87345: PUSH
87346: LD_INT 36
87348: EQUAL
87349: IFFALSE 87359
// sTools := true ;
87351: LD_ADDR_EXP 142
87355: PUSH
87356: LD_INT 1
87358: ST_TO_ADDR
// if p3 = 101 then
87359: LD_VAR 0 3
87363: PUSH
87364: LD_INT 101
87366: EQUAL
87367: IFFALSE 87377
// sSold := true ;
87369: LD_ADDR_EXP 107
87373: PUSH
87374: LD_INT 1
87376: ST_TO_ADDR
// if p3 = 102 then
87377: LD_VAR 0 3
87381: PUSH
87382: LD_INT 102
87384: EQUAL
87385: IFFALSE 87395
// sDiff := true ;
87387: LD_ADDR_EXP 108
87391: PUSH
87392: LD_INT 1
87394: ST_TO_ADDR
// if p3 = 103 then
87395: LD_VAR 0 3
87399: PUSH
87400: LD_INT 103
87402: EQUAL
87403: IFFALSE 87413
// sFog := true ;
87405: LD_ADDR_EXP 111
87409: PUSH
87410: LD_INT 1
87412: ST_TO_ADDR
// if p3 = 104 then
87413: LD_VAR 0 3
87417: PUSH
87418: LD_INT 104
87420: EQUAL
87421: IFFALSE 87431
// sReset := true ;
87423: LD_ADDR_EXP 112
87427: PUSH
87428: LD_INT 1
87430: ST_TO_ADDR
// if p3 = 105 then
87431: LD_VAR 0 3
87435: PUSH
87436: LD_INT 105
87438: EQUAL
87439: IFFALSE 87449
// sSun := true ;
87441: LD_ADDR_EXP 113
87445: PUSH
87446: LD_INT 1
87448: ST_TO_ADDR
// if p3 = 106 then
87449: LD_VAR 0 3
87453: PUSH
87454: LD_INT 106
87456: EQUAL
87457: IFFALSE 87467
// sTiger := true ;
87459: LD_ADDR_EXP 109
87463: PUSH
87464: LD_INT 1
87466: ST_TO_ADDR
// if p3 = 107 then
87467: LD_VAR 0 3
87471: PUSH
87472: LD_INT 107
87474: EQUAL
87475: IFFALSE 87485
// sBomb := true ;
87477: LD_ADDR_EXP 110
87481: PUSH
87482: LD_INT 1
87484: ST_TO_ADDR
// if p3 = 108 then
87485: LD_VAR 0 3
87489: PUSH
87490: LD_INT 108
87492: EQUAL
87493: IFFALSE 87503
// sWound := true ;
87495: LD_ADDR_EXP 118
87499: PUSH
87500: LD_INT 1
87502: ST_TO_ADDR
// if p3 = 109 then
87503: LD_VAR 0 3
87507: PUSH
87508: LD_INT 109
87510: EQUAL
87511: IFFALSE 87521
// sBetray := true ;
87513: LD_ADDR_EXP 122
87517: PUSH
87518: LD_INT 1
87520: ST_TO_ADDR
// if p3 = 110 then
87521: LD_VAR 0 3
87525: PUSH
87526: LD_INT 110
87528: EQUAL
87529: IFFALSE 87539
// sContamin := true ;
87531: LD_ADDR_EXP 123
87535: PUSH
87536: LD_INT 1
87538: ST_TO_ADDR
// if p3 = 111 then
87539: LD_VAR 0 3
87543: PUSH
87544: LD_INT 111
87546: EQUAL
87547: IFFALSE 87557
// sOil := true ;
87549: LD_ADDR_EXP 125
87553: PUSH
87554: LD_INT 1
87556: ST_TO_ADDR
// if p3 = 112 then
87557: LD_VAR 0 3
87561: PUSH
87562: LD_INT 112
87564: EQUAL
87565: IFFALSE 87575
// sStu := true ;
87567: LD_ADDR_EXP 129
87571: PUSH
87572: LD_INT 1
87574: ST_TO_ADDR
// if p3 = 113 then
87575: LD_VAR 0 3
87579: PUSH
87580: LD_INT 113
87582: EQUAL
87583: IFFALSE 87593
// sBazooka := true ;
87585: LD_ADDR_EXP 132
87589: PUSH
87590: LD_INT 1
87592: ST_TO_ADDR
// if p3 = 114 then
87593: LD_VAR 0 3
87597: PUSH
87598: LD_INT 114
87600: EQUAL
87601: IFFALSE 87611
// sMortar := true ;
87603: LD_ADDR_EXP 133
87607: PUSH
87608: LD_INT 1
87610: ST_TO_ADDR
// if p3 = 115 then
87611: LD_VAR 0 3
87615: PUSH
87616: LD_INT 115
87618: EQUAL
87619: IFFALSE 87629
// sRanger := true ;
87621: LD_ADDR_EXP 143
87625: PUSH
87626: LD_INT 1
87628: ST_TO_ADDR
// end ; if p2 = 101 then
87629: LD_VAR 0 2
87633: PUSH
87634: LD_INT 101
87636: EQUAL
87637: IFFALSE 87765
// begin case p3 of 1 :
87639: LD_VAR 0 3
87643: PUSH
87644: LD_INT 1
87646: DOUBLE
87647: EQUAL
87648: IFTRUE 87652
87650: GO 87659
87652: POP
// hHackUnlimitedResources ; 2 :
87653: CALL 98800 0 0
87657: GO 87765
87659: LD_INT 2
87661: DOUBLE
87662: EQUAL
87663: IFTRUE 87667
87665: GO 87674
87667: POP
// hHackSetLevel10 ; 3 :
87668: CALL 98933 0 0
87672: GO 87765
87674: LD_INT 3
87676: DOUBLE
87677: EQUAL
87678: IFTRUE 87682
87680: GO 87689
87682: POP
// hHackSetLevel10YourUnits ; 4 :
87683: CALL 99018 0 0
87687: GO 87765
87689: LD_INT 4
87691: DOUBLE
87692: EQUAL
87693: IFTRUE 87697
87695: GO 87704
87697: POP
// hHackInvincible ; 5 :
87698: CALL 99466 0 0
87702: GO 87765
87704: LD_INT 5
87706: DOUBLE
87707: EQUAL
87708: IFTRUE 87712
87710: GO 87719
87712: POP
// hHackInvisible ; 6 :
87713: CALL 99577 0 0
87717: GO 87765
87719: LD_INT 6
87721: DOUBLE
87722: EQUAL
87723: IFTRUE 87727
87725: GO 87734
87727: POP
// hHackChangeYourSide ; 7 :
87728: CALL 99634 0 0
87732: GO 87765
87734: LD_INT 7
87736: DOUBLE
87737: EQUAL
87738: IFTRUE 87742
87740: GO 87749
87742: POP
// hHackChangeUnitSide ; 8 :
87743: CALL 99676 0 0
87747: GO 87765
87749: LD_INT 8
87751: DOUBLE
87752: EQUAL
87753: IFTRUE 87757
87755: GO 87764
87757: POP
// hHackFog ; end ;
87758: CALL 99777 0 0
87762: GO 87765
87764: POP
// end ; end ;
87765: PPOPN 6
87767: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
87768: GO 87770
87770: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
87771: LD_STRING initStreamRollete();
87773: PPUSH
87774: CALL_OW 559
// InitStreamMode ;
87778: CALL 87787 0 0
// DefineStreamItems ( ) ;
87782: CALL 88227 0 0
// end ;
87786: END
// function InitStreamMode ; begin
87787: LD_INT 0
87789: PPUSH
// streamModeActive := false ;
87790: LD_ADDR_EXP 90
87794: PUSH
87795: LD_INT 0
87797: ST_TO_ADDR
// normalCounter := 36 ;
87798: LD_ADDR_EXP 91
87802: PUSH
87803: LD_INT 36
87805: ST_TO_ADDR
// hardcoreCounter := 16 ;
87806: LD_ADDR_EXP 92
87810: PUSH
87811: LD_INT 16
87813: ST_TO_ADDR
// sRocket := false ;
87814: LD_ADDR_EXP 95
87818: PUSH
87819: LD_INT 0
87821: ST_TO_ADDR
// sSpeed := false ;
87822: LD_ADDR_EXP 94
87826: PUSH
87827: LD_INT 0
87829: ST_TO_ADDR
// sEngine := false ;
87830: LD_ADDR_EXP 96
87834: PUSH
87835: LD_INT 0
87837: ST_TO_ADDR
// sSpec := false ;
87838: LD_ADDR_EXP 93
87842: PUSH
87843: LD_INT 0
87845: ST_TO_ADDR
// sLevel := false ;
87846: LD_ADDR_EXP 97
87850: PUSH
87851: LD_INT 0
87853: ST_TO_ADDR
// sArmoury := false ;
87854: LD_ADDR_EXP 98
87858: PUSH
87859: LD_INT 0
87861: ST_TO_ADDR
// sRadar := false ;
87862: LD_ADDR_EXP 99
87866: PUSH
87867: LD_INT 0
87869: ST_TO_ADDR
// sBunker := false ;
87870: LD_ADDR_EXP 100
87874: PUSH
87875: LD_INT 0
87877: ST_TO_ADDR
// sHack := false ;
87878: LD_ADDR_EXP 101
87882: PUSH
87883: LD_INT 0
87885: ST_TO_ADDR
// sFire := false ;
87886: LD_ADDR_EXP 102
87890: PUSH
87891: LD_INT 0
87893: ST_TO_ADDR
// sRefresh := false ;
87894: LD_ADDR_EXP 103
87898: PUSH
87899: LD_INT 0
87901: ST_TO_ADDR
// sExp := false ;
87902: LD_ADDR_EXP 104
87906: PUSH
87907: LD_INT 0
87909: ST_TO_ADDR
// sDepot := false ;
87910: LD_ADDR_EXP 105
87914: PUSH
87915: LD_INT 0
87917: ST_TO_ADDR
// sFlag := false ;
87918: LD_ADDR_EXP 106
87922: PUSH
87923: LD_INT 0
87925: ST_TO_ADDR
// sKamikadze := false ;
87926: LD_ADDR_EXP 114
87930: PUSH
87931: LD_INT 0
87933: ST_TO_ADDR
// sTroll := false ;
87934: LD_ADDR_EXP 115
87938: PUSH
87939: LD_INT 0
87941: ST_TO_ADDR
// sSlow := false ;
87942: LD_ADDR_EXP 116
87946: PUSH
87947: LD_INT 0
87949: ST_TO_ADDR
// sLack := false ;
87950: LD_ADDR_EXP 117
87954: PUSH
87955: LD_INT 0
87957: ST_TO_ADDR
// sTank := false ;
87958: LD_ADDR_EXP 119
87962: PUSH
87963: LD_INT 0
87965: ST_TO_ADDR
// sRemote := false ;
87966: LD_ADDR_EXP 120
87970: PUSH
87971: LD_INT 0
87973: ST_TO_ADDR
// sPowell := false ;
87974: LD_ADDR_EXP 121
87978: PUSH
87979: LD_INT 0
87981: ST_TO_ADDR
// sTeleport := false ;
87982: LD_ADDR_EXP 124
87986: PUSH
87987: LD_INT 0
87989: ST_TO_ADDR
// sOilTower := false ;
87990: LD_ADDR_EXP 126
87994: PUSH
87995: LD_INT 0
87997: ST_TO_ADDR
// sShovel := false ;
87998: LD_ADDR_EXP 127
88002: PUSH
88003: LD_INT 0
88005: ST_TO_ADDR
// sSheik := false ;
88006: LD_ADDR_EXP 128
88010: PUSH
88011: LD_INT 0
88013: ST_TO_ADDR
// sEarthquake := false ;
88014: LD_ADDR_EXP 130
88018: PUSH
88019: LD_INT 0
88021: ST_TO_ADDR
// sAI := false ;
88022: LD_ADDR_EXP 131
88026: PUSH
88027: LD_INT 0
88029: ST_TO_ADDR
// sCargo := false ;
88030: LD_ADDR_EXP 134
88034: PUSH
88035: LD_INT 0
88037: ST_TO_ADDR
// sDLaser := false ;
88038: LD_ADDR_EXP 135
88042: PUSH
88043: LD_INT 0
88045: ST_TO_ADDR
// sExchange := false ;
88046: LD_ADDR_EXP 136
88050: PUSH
88051: LD_INT 0
88053: ST_TO_ADDR
// sFac := false ;
88054: LD_ADDR_EXP 137
88058: PUSH
88059: LD_INT 0
88061: ST_TO_ADDR
// sPower := false ;
88062: LD_ADDR_EXP 138
88066: PUSH
88067: LD_INT 0
88069: ST_TO_ADDR
// sRandom := false ;
88070: LD_ADDR_EXP 139
88074: PUSH
88075: LD_INT 0
88077: ST_TO_ADDR
// sShield := false ;
88078: LD_ADDR_EXP 140
88082: PUSH
88083: LD_INT 0
88085: ST_TO_ADDR
// sTime := false ;
88086: LD_ADDR_EXP 141
88090: PUSH
88091: LD_INT 0
88093: ST_TO_ADDR
// sTools := false ;
88094: LD_ADDR_EXP 142
88098: PUSH
88099: LD_INT 0
88101: ST_TO_ADDR
// sSold := false ;
88102: LD_ADDR_EXP 107
88106: PUSH
88107: LD_INT 0
88109: ST_TO_ADDR
// sDiff := false ;
88110: LD_ADDR_EXP 108
88114: PUSH
88115: LD_INT 0
88117: ST_TO_ADDR
// sFog := false ;
88118: LD_ADDR_EXP 111
88122: PUSH
88123: LD_INT 0
88125: ST_TO_ADDR
// sReset := false ;
88126: LD_ADDR_EXP 112
88130: PUSH
88131: LD_INT 0
88133: ST_TO_ADDR
// sSun := false ;
88134: LD_ADDR_EXP 113
88138: PUSH
88139: LD_INT 0
88141: ST_TO_ADDR
// sTiger := false ;
88142: LD_ADDR_EXP 109
88146: PUSH
88147: LD_INT 0
88149: ST_TO_ADDR
// sBomb := false ;
88150: LD_ADDR_EXP 110
88154: PUSH
88155: LD_INT 0
88157: ST_TO_ADDR
// sWound := false ;
88158: LD_ADDR_EXP 118
88162: PUSH
88163: LD_INT 0
88165: ST_TO_ADDR
// sBetray := false ;
88166: LD_ADDR_EXP 122
88170: PUSH
88171: LD_INT 0
88173: ST_TO_ADDR
// sContamin := false ;
88174: LD_ADDR_EXP 123
88178: PUSH
88179: LD_INT 0
88181: ST_TO_ADDR
// sOil := false ;
88182: LD_ADDR_EXP 125
88186: PUSH
88187: LD_INT 0
88189: ST_TO_ADDR
// sStu := false ;
88190: LD_ADDR_EXP 129
88194: PUSH
88195: LD_INT 0
88197: ST_TO_ADDR
// sBazooka := false ;
88198: LD_ADDR_EXP 132
88202: PUSH
88203: LD_INT 0
88205: ST_TO_ADDR
// sMortar := false ;
88206: LD_ADDR_EXP 133
88210: PUSH
88211: LD_INT 0
88213: ST_TO_ADDR
// sRanger := false ;
88214: LD_ADDR_EXP 143
88218: PUSH
88219: LD_INT 0
88221: ST_TO_ADDR
// end ;
88222: LD_VAR 0 1
88226: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
88227: LD_INT 0
88229: PPUSH
88230: PPUSH
88231: PPUSH
88232: PPUSH
88233: PPUSH
// result := [ ] ;
88234: LD_ADDR_VAR 0 1
88238: PUSH
88239: EMPTY
88240: ST_TO_ADDR
// if campaign_id = 1 then
88241: LD_OWVAR 69
88245: PUSH
88246: LD_INT 1
88248: EQUAL
88249: IFFALSE 91187
// begin case mission_number of 1 :
88251: LD_OWVAR 70
88255: PUSH
88256: LD_INT 1
88258: DOUBLE
88259: EQUAL
88260: IFTRUE 88264
88262: GO 88328
88264: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
88265: LD_ADDR_VAR 0 1
88269: PUSH
88270: LD_INT 2
88272: PUSH
88273: LD_INT 4
88275: PUSH
88276: LD_INT 11
88278: PUSH
88279: LD_INT 12
88281: PUSH
88282: LD_INT 15
88284: PUSH
88285: LD_INT 16
88287: PUSH
88288: LD_INT 22
88290: PUSH
88291: LD_INT 23
88293: PUSH
88294: LD_INT 26
88296: PUSH
88297: EMPTY
88298: LIST
88299: LIST
88300: LIST
88301: LIST
88302: LIST
88303: LIST
88304: LIST
88305: LIST
88306: LIST
88307: PUSH
88308: LD_INT 101
88310: PUSH
88311: LD_INT 102
88313: PUSH
88314: LD_INT 106
88316: PUSH
88317: EMPTY
88318: LIST
88319: LIST
88320: LIST
88321: PUSH
88322: EMPTY
88323: LIST
88324: LIST
88325: ST_TO_ADDR
88326: GO 91185
88328: LD_INT 2
88330: DOUBLE
88331: EQUAL
88332: IFTRUE 88336
88334: GO 88408
88336: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
88337: LD_ADDR_VAR 0 1
88341: PUSH
88342: LD_INT 2
88344: PUSH
88345: LD_INT 4
88347: PUSH
88348: LD_INT 11
88350: PUSH
88351: LD_INT 12
88353: PUSH
88354: LD_INT 15
88356: PUSH
88357: LD_INT 16
88359: PUSH
88360: LD_INT 22
88362: PUSH
88363: LD_INT 23
88365: PUSH
88366: LD_INT 26
88368: PUSH
88369: EMPTY
88370: LIST
88371: LIST
88372: LIST
88373: LIST
88374: LIST
88375: LIST
88376: LIST
88377: LIST
88378: LIST
88379: PUSH
88380: LD_INT 101
88382: PUSH
88383: LD_INT 102
88385: PUSH
88386: LD_INT 105
88388: PUSH
88389: LD_INT 106
88391: PUSH
88392: LD_INT 108
88394: PUSH
88395: EMPTY
88396: LIST
88397: LIST
88398: LIST
88399: LIST
88400: LIST
88401: PUSH
88402: EMPTY
88403: LIST
88404: LIST
88405: ST_TO_ADDR
88406: GO 91185
88408: LD_INT 3
88410: DOUBLE
88411: EQUAL
88412: IFTRUE 88416
88414: GO 88492
88416: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
88417: LD_ADDR_VAR 0 1
88421: PUSH
88422: LD_INT 2
88424: PUSH
88425: LD_INT 4
88427: PUSH
88428: LD_INT 5
88430: PUSH
88431: LD_INT 11
88433: PUSH
88434: LD_INT 12
88436: PUSH
88437: LD_INT 15
88439: PUSH
88440: LD_INT 16
88442: PUSH
88443: LD_INT 22
88445: PUSH
88446: LD_INT 26
88448: PUSH
88449: LD_INT 36
88451: PUSH
88452: EMPTY
88453: LIST
88454: LIST
88455: LIST
88456: LIST
88457: LIST
88458: LIST
88459: LIST
88460: LIST
88461: LIST
88462: LIST
88463: PUSH
88464: LD_INT 101
88466: PUSH
88467: LD_INT 102
88469: PUSH
88470: LD_INT 105
88472: PUSH
88473: LD_INT 106
88475: PUSH
88476: LD_INT 108
88478: PUSH
88479: EMPTY
88480: LIST
88481: LIST
88482: LIST
88483: LIST
88484: LIST
88485: PUSH
88486: EMPTY
88487: LIST
88488: LIST
88489: ST_TO_ADDR
88490: GO 91185
88492: LD_INT 4
88494: DOUBLE
88495: EQUAL
88496: IFTRUE 88500
88498: GO 88584
88500: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
88501: LD_ADDR_VAR 0 1
88505: PUSH
88506: LD_INT 2
88508: PUSH
88509: LD_INT 4
88511: PUSH
88512: LD_INT 5
88514: PUSH
88515: LD_INT 8
88517: PUSH
88518: LD_INT 11
88520: PUSH
88521: LD_INT 12
88523: PUSH
88524: LD_INT 15
88526: PUSH
88527: LD_INT 16
88529: PUSH
88530: LD_INT 22
88532: PUSH
88533: LD_INT 23
88535: PUSH
88536: LD_INT 26
88538: PUSH
88539: LD_INT 36
88541: PUSH
88542: EMPTY
88543: LIST
88544: LIST
88545: LIST
88546: LIST
88547: LIST
88548: LIST
88549: LIST
88550: LIST
88551: LIST
88552: LIST
88553: LIST
88554: LIST
88555: PUSH
88556: LD_INT 101
88558: PUSH
88559: LD_INT 102
88561: PUSH
88562: LD_INT 105
88564: PUSH
88565: LD_INT 106
88567: PUSH
88568: LD_INT 108
88570: PUSH
88571: EMPTY
88572: LIST
88573: LIST
88574: LIST
88575: LIST
88576: LIST
88577: PUSH
88578: EMPTY
88579: LIST
88580: LIST
88581: ST_TO_ADDR
88582: GO 91185
88584: LD_INT 5
88586: DOUBLE
88587: EQUAL
88588: IFTRUE 88592
88590: GO 88692
88592: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
88593: LD_ADDR_VAR 0 1
88597: PUSH
88598: LD_INT 2
88600: PUSH
88601: LD_INT 4
88603: PUSH
88604: LD_INT 5
88606: PUSH
88607: LD_INT 6
88609: PUSH
88610: LD_INT 8
88612: PUSH
88613: LD_INT 11
88615: PUSH
88616: LD_INT 12
88618: PUSH
88619: LD_INT 15
88621: PUSH
88622: LD_INT 16
88624: PUSH
88625: LD_INT 22
88627: PUSH
88628: LD_INT 23
88630: PUSH
88631: LD_INT 25
88633: PUSH
88634: LD_INT 26
88636: PUSH
88637: LD_INT 36
88639: PUSH
88640: EMPTY
88641: LIST
88642: LIST
88643: LIST
88644: LIST
88645: LIST
88646: LIST
88647: LIST
88648: LIST
88649: LIST
88650: LIST
88651: LIST
88652: LIST
88653: LIST
88654: LIST
88655: PUSH
88656: LD_INT 101
88658: PUSH
88659: LD_INT 102
88661: PUSH
88662: LD_INT 105
88664: PUSH
88665: LD_INT 106
88667: PUSH
88668: LD_INT 108
88670: PUSH
88671: LD_INT 109
88673: PUSH
88674: LD_INT 112
88676: PUSH
88677: EMPTY
88678: LIST
88679: LIST
88680: LIST
88681: LIST
88682: LIST
88683: LIST
88684: LIST
88685: PUSH
88686: EMPTY
88687: LIST
88688: LIST
88689: ST_TO_ADDR
88690: GO 91185
88692: LD_INT 6
88694: DOUBLE
88695: EQUAL
88696: IFTRUE 88700
88698: GO 88820
88700: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
88701: LD_ADDR_VAR 0 1
88705: PUSH
88706: LD_INT 2
88708: PUSH
88709: LD_INT 4
88711: PUSH
88712: LD_INT 5
88714: PUSH
88715: LD_INT 6
88717: PUSH
88718: LD_INT 8
88720: PUSH
88721: LD_INT 11
88723: PUSH
88724: LD_INT 12
88726: PUSH
88727: LD_INT 15
88729: PUSH
88730: LD_INT 16
88732: PUSH
88733: LD_INT 20
88735: PUSH
88736: LD_INT 21
88738: PUSH
88739: LD_INT 22
88741: PUSH
88742: LD_INT 23
88744: PUSH
88745: LD_INT 25
88747: PUSH
88748: LD_INT 26
88750: PUSH
88751: LD_INT 30
88753: PUSH
88754: LD_INT 31
88756: PUSH
88757: LD_INT 32
88759: PUSH
88760: LD_INT 36
88762: PUSH
88763: EMPTY
88764: LIST
88765: LIST
88766: LIST
88767: LIST
88768: LIST
88769: LIST
88770: LIST
88771: LIST
88772: LIST
88773: LIST
88774: LIST
88775: LIST
88776: LIST
88777: LIST
88778: LIST
88779: LIST
88780: LIST
88781: LIST
88782: LIST
88783: PUSH
88784: LD_INT 101
88786: PUSH
88787: LD_INT 102
88789: PUSH
88790: LD_INT 105
88792: PUSH
88793: LD_INT 106
88795: PUSH
88796: LD_INT 108
88798: PUSH
88799: LD_INT 109
88801: PUSH
88802: LD_INT 112
88804: PUSH
88805: EMPTY
88806: LIST
88807: LIST
88808: LIST
88809: LIST
88810: LIST
88811: LIST
88812: LIST
88813: PUSH
88814: EMPTY
88815: LIST
88816: LIST
88817: ST_TO_ADDR
88818: GO 91185
88820: LD_INT 7
88822: DOUBLE
88823: EQUAL
88824: IFTRUE 88828
88826: GO 88928
88828: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
88829: LD_ADDR_VAR 0 1
88833: PUSH
88834: LD_INT 2
88836: PUSH
88837: LD_INT 4
88839: PUSH
88840: LD_INT 5
88842: PUSH
88843: LD_INT 7
88845: PUSH
88846: LD_INT 11
88848: PUSH
88849: LD_INT 12
88851: PUSH
88852: LD_INT 15
88854: PUSH
88855: LD_INT 16
88857: PUSH
88858: LD_INT 20
88860: PUSH
88861: LD_INT 21
88863: PUSH
88864: LD_INT 22
88866: PUSH
88867: LD_INT 23
88869: PUSH
88870: LD_INT 25
88872: PUSH
88873: LD_INT 26
88875: PUSH
88876: EMPTY
88877: LIST
88878: LIST
88879: LIST
88880: LIST
88881: LIST
88882: LIST
88883: LIST
88884: LIST
88885: LIST
88886: LIST
88887: LIST
88888: LIST
88889: LIST
88890: LIST
88891: PUSH
88892: LD_INT 101
88894: PUSH
88895: LD_INT 102
88897: PUSH
88898: LD_INT 103
88900: PUSH
88901: LD_INT 105
88903: PUSH
88904: LD_INT 106
88906: PUSH
88907: LD_INT 108
88909: PUSH
88910: LD_INT 112
88912: PUSH
88913: EMPTY
88914: LIST
88915: LIST
88916: LIST
88917: LIST
88918: LIST
88919: LIST
88920: LIST
88921: PUSH
88922: EMPTY
88923: LIST
88924: LIST
88925: ST_TO_ADDR
88926: GO 91185
88928: LD_INT 8
88930: DOUBLE
88931: EQUAL
88932: IFTRUE 88936
88934: GO 89064
88936: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
88937: LD_ADDR_VAR 0 1
88941: PUSH
88942: LD_INT 2
88944: PUSH
88945: LD_INT 4
88947: PUSH
88948: LD_INT 5
88950: PUSH
88951: LD_INT 6
88953: PUSH
88954: LD_INT 7
88956: PUSH
88957: LD_INT 8
88959: PUSH
88960: LD_INT 11
88962: PUSH
88963: LD_INT 12
88965: PUSH
88966: LD_INT 15
88968: PUSH
88969: LD_INT 16
88971: PUSH
88972: LD_INT 20
88974: PUSH
88975: LD_INT 21
88977: PUSH
88978: LD_INT 22
88980: PUSH
88981: LD_INT 23
88983: PUSH
88984: LD_INT 25
88986: PUSH
88987: LD_INT 26
88989: PUSH
88990: LD_INT 30
88992: PUSH
88993: LD_INT 31
88995: PUSH
88996: LD_INT 32
88998: PUSH
88999: LD_INT 36
89001: PUSH
89002: EMPTY
89003: LIST
89004: LIST
89005: LIST
89006: LIST
89007: LIST
89008: LIST
89009: LIST
89010: LIST
89011: LIST
89012: LIST
89013: LIST
89014: LIST
89015: LIST
89016: LIST
89017: LIST
89018: LIST
89019: LIST
89020: LIST
89021: LIST
89022: LIST
89023: PUSH
89024: LD_INT 101
89026: PUSH
89027: LD_INT 102
89029: PUSH
89030: LD_INT 103
89032: PUSH
89033: LD_INT 105
89035: PUSH
89036: LD_INT 106
89038: PUSH
89039: LD_INT 108
89041: PUSH
89042: LD_INT 109
89044: PUSH
89045: LD_INT 112
89047: PUSH
89048: EMPTY
89049: LIST
89050: LIST
89051: LIST
89052: LIST
89053: LIST
89054: LIST
89055: LIST
89056: LIST
89057: PUSH
89058: EMPTY
89059: LIST
89060: LIST
89061: ST_TO_ADDR
89062: GO 91185
89064: LD_INT 9
89066: DOUBLE
89067: EQUAL
89068: IFTRUE 89072
89070: GO 89208
89072: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
89073: LD_ADDR_VAR 0 1
89077: PUSH
89078: LD_INT 2
89080: PUSH
89081: LD_INT 4
89083: PUSH
89084: LD_INT 5
89086: PUSH
89087: LD_INT 6
89089: PUSH
89090: LD_INT 7
89092: PUSH
89093: LD_INT 8
89095: PUSH
89096: LD_INT 11
89098: PUSH
89099: LD_INT 12
89101: PUSH
89102: LD_INT 15
89104: PUSH
89105: LD_INT 16
89107: PUSH
89108: LD_INT 20
89110: PUSH
89111: LD_INT 21
89113: PUSH
89114: LD_INT 22
89116: PUSH
89117: LD_INT 23
89119: PUSH
89120: LD_INT 25
89122: PUSH
89123: LD_INT 26
89125: PUSH
89126: LD_INT 28
89128: PUSH
89129: LD_INT 30
89131: PUSH
89132: LD_INT 31
89134: PUSH
89135: LD_INT 32
89137: PUSH
89138: LD_INT 36
89140: PUSH
89141: EMPTY
89142: LIST
89143: LIST
89144: LIST
89145: LIST
89146: LIST
89147: LIST
89148: LIST
89149: LIST
89150: LIST
89151: LIST
89152: LIST
89153: LIST
89154: LIST
89155: LIST
89156: LIST
89157: LIST
89158: LIST
89159: LIST
89160: LIST
89161: LIST
89162: LIST
89163: PUSH
89164: LD_INT 101
89166: PUSH
89167: LD_INT 102
89169: PUSH
89170: LD_INT 103
89172: PUSH
89173: LD_INT 105
89175: PUSH
89176: LD_INT 106
89178: PUSH
89179: LD_INT 108
89181: PUSH
89182: LD_INT 109
89184: PUSH
89185: LD_INT 112
89187: PUSH
89188: LD_INT 114
89190: PUSH
89191: EMPTY
89192: LIST
89193: LIST
89194: LIST
89195: LIST
89196: LIST
89197: LIST
89198: LIST
89199: LIST
89200: LIST
89201: PUSH
89202: EMPTY
89203: LIST
89204: LIST
89205: ST_TO_ADDR
89206: GO 91185
89208: LD_INT 10
89210: DOUBLE
89211: EQUAL
89212: IFTRUE 89216
89214: GO 89400
89216: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
89217: LD_ADDR_VAR 0 1
89221: PUSH
89222: LD_INT 2
89224: PUSH
89225: LD_INT 4
89227: PUSH
89228: LD_INT 5
89230: PUSH
89231: LD_INT 6
89233: PUSH
89234: LD_INT 7
89236: PUSH
89237: LD_INT 8
89239: PUSH
89240: LD_INT 9
89242: PUSH
89243: LD_INT 10
89245: PUSH
89246: LD_INT 11
89248: PUSH
89249: LD_INT 12
89251: PUSH
89252: LD_INT 13
89254: PUSH
89255: LD_INT 14
89257: PUSH
89258: LD_INT 15
89260: PUSH
89261: LD_INT 16
89263: PUSH
89264: LD_INT 17
89266: PUSH
89267: LD_INT 18
89269: PUSH
89270: LD_INT 19
89272: PUSH
89273: LD_INT 20
89275: PUSH
89276: LD_INT 21
89278: PUSH
89279: LD_INT 22
89281: PUSH
89282: LD_INT 23
89284: PUSH
89285: LD_INT 24
89287: PUSH
89288: LD_INT 25
89290: PUSH
89291: LD_INT 26
89293: PUSH
89294: LD_INT 28
89296: PUSH
89297: LD_INT 30
89299: PUSH
89300: LD_INT 31
89302: PUSH
89303: LD_INT 32
89305: PUSH
89306: LD_INT 36
89308: PUSH
89309: EMPTY
89310: LIST
89311: LIST
89312: LIST
89313: LIST
89314: LIST
89315: LIST
89316: LIST
89317: LIST
89318: LIST
89319: LIST
89320: LIST
89321: LIST
89322: LIST
89323: LIST
89324: LIST
89325: LIST
89326: LIST
89327: LIST
89328: LIST
89329: LIST
89330: LIST
89331: LIST
89332: LIST
89333: LIST
89334: LIST
89335: LIST
89336: LIST
89337: LIST
89338: LIST
89339: PUSH
89340: LD_INT 101
89342: PUSH
89343: LD_INT 102
89345: PUSH
89346: LD_INT 103
89348: PUSH
89349: LD_INT 104
89351: PUSH
89352: LD_INT 105
89354: PUSH
89355: LD_INT 106
89357: PUSH
89358: LD_INT 107
89360: PUSH
89361: LD_INT 108
89363: PUSH
89364: LD_INT 109
89366: PUSH
89367: LD_INT 110
89369: PUSH
89370: LD_INT 111
89372: PUSH
89373: LD_INT 112
89375: PUSH
89376: LD_INT 114
89378: PUSH
89379: EMPTY
89380: LIST
89381: LIST
89382: LIST
89383: LIST
89384: LIST
89385: LIST
89386: LIST
89387: LIST
89388: LIST
89389: LIST
89390: LIST
89391: LIST
89392: LIST
89393: PUSH
89394: EMPTY
89395: LIST
89396: LIST
89397: ST_TO_ADDR
89398: GO 91185
89400: LD_INT 11
89402: DOUBLE
89403: EQUAL
89404: IFTRUE 89408
89406: GO 89600
89408: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
89409: LD_ADDR_VAR 0 1
89413: PUSH
89414: LD_INT 2
89416: PUSH
89417: LD_INT 3
89419: PUSH
89420: LD_INT 4
89422: PUSH
89423: LD_INT 5
89425: PUSH
89426: LD_INT 6
89428: PUSH
89429: LD_INT 7
89431: PUSH
89432: LD_INT 8
89434: PUSH
89435: LD_INT 9
89437: PUSH
89438: LD_INT 10
89440: PUSH
89441: LD_INT 11
89443: PUSH
89444: LD_INT 12
89446: PUSH
89447: LD_INT 13
89449: PUSH
89450: LD_INT 14
89452: PUSH
89453: LD_INT 15
89455: PUSH
89456: LD_INT 16
89458: PUSH
89459: LD_INT 17
89461: PUSH
89462: LD_INT 18
89464: PUSH
89465: LD_INT 19
89467: PUSH
89468: LD_INT 20
89470: PUSH
89471: LD_INT 21
89473: PUSH
89474: LD_INT 22
89476: PUSH
89477: LD_INT 23
89479: PUSH
89480: LD_INT 24
89482: PUSH
89483: LD_INT 25
89485: PUSH
89486: LD_INT 26
89488: PUSH
89489: LD_INT 28
89491: PUSH
89492: LD_INT 30
89494: PUSH
89495: LD_INT 31
89497: PUSH
89498: LD_INT 32
89500: PUSH
89501: LD_INT 34
89503: PUSH
89504: LD_INT 36
89506: PUSH
89507: EMPTY
89508: LIST
89509: LIST
89510: LIST
89511: LIST
89512: LIST
89513: LIST
89514: LIST
89515: LIST
89516: LIST
89517: LIST
89518: LIST
89519: LIST
89520: LIST
89521: LIST
89522: LIST
89523: LIST
89524: LIST
89525: LIST
89526: LIST
89527: LIST
89528: LIST
89529: LIST
89530: LIST
89531: LIST
89532: LIST
89533: LIST
89534: LIST
89535: LIST
89536: LIST
89537: LIST
89538: LIST
89539: PUSH
89540: LD_INT 101
89542: PUSH
89543: LD_INT 102
89545: PUSH
89546: LD_INT 103
89548: PUSH
89549: LD_INT 104
89551: PUSH
89552: LD_INT 105
89554: PUSH
89555: LD_INT 106
89557: PUSH
89558: LD_INT 107
89560: PUSH
89561: LD_INT 108
89563: PUSH
89564: LD_INT 109
89566: PUSH
89567: LD_INT 110
89569: PUSH
89570: LD_INT 111
89572: PUSH
89573: LD_INT 112
89575: PUSH
89576: LD_INT 114
89578: PUSH
89579: EMPTY
89580: LIST
89581: LIST
89582: LIST
89583: LIST
89584: LIST
89585: LIST
89586: LIST
89587: LIST
89588: LIST
89589: LIST
89590: LIST
89591: LIST
89592: LIST
89593: PUSH
89594: EMPTY
89595: LIST
89596: LIST
89597: ST_TO_ADDR
89598: GO 91185
89600: LD_INT 12
89602: DOUBLE
89603: EQUAL
89604: IFTRUE 89608
89606: GO 89816
89608: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
89609: LD_ADDR_VAR 0 1
89613: PUSH
89614: LD_INT 1
89616: PUSH
89617: LD_INT 2
89619: PUSH
89620: LD_INT 3
89622: PUSH
89623: LD_INT 4
89625: PUSH
89626: LD_INT 5
89628: PUSH
89629: LD_INT 6
89631: PUSH
89632: LD_INT 7
89634: PUSH
89635: LD_INT 8
89637: PUSH
89638: LD_INT 9
89640: PUSH
89641: LD_INT 10
89643: PUSH
89644: LD_INT 11
89646: PUSH
89647: LD_INT 12
89649: PUSH
89650: LD_INT 13
89652: PUSH
89653: LD_INT 14
89655: PUSH
89656: LD_INT 15
89658: PUSH
89659: LD_INT 16
89661: PUSH
89662: LD_INT 17
89664: PUSH
89665: LD_INT 18
89667: PUSH
89668: LD_INT 19
89670: PUSH
89671: LD_INT 20
89673: PUSH
89674: LD_INT 21
89676: PUSH
89677: LD_INT 22
89679: PUSH
89680: LD_INT 23
89682: PUSH
89683: LD_INT 24
89685: PUSH
89686: LD_INT 25
89688: PUSH
89689: LD_INT 26
89691: PUSH
89692: LD_INT 27
89694: PUSH
89695: LD_INT 28
89697: PUSH
89698: LD_INT 30
89700: PUSH
89701: LD_INT 31
89703: PUSH
89704: LD_INT 32
89706: PUSH
89707: LD_INT 33
89709: PUSH
89710: LD_INT 34
89712: PUSH
89713: LD_INT 36
89715: PUSH
89716: EMPTY
89717: LIST
89718: LIST
89719: LIST
89720: LIST
89721: LIST
89722: LIST
89723: LIST
89724: LIST
89725: LIST
89726: LIST
89727: LIST
89728: LIST
89729: LIST
89730: LIST
89731: LIST
89732: LIST
89733: LIST
89734: LIST
89735: LIST
89736: LIST
89737: LIST
89738: LIST
89739: LIST
89740: LIST
89741: LIST
89742: LIST
89743: LIST
89744: LIST
89745: LIST
89746: LIST
89747: LIST
89748: LIST
89749: LIST
89750: LIST
89751: PUSH
89752: LD_INT 101
89754: PUSH
89755: LD_INT 102
89757: PUSH
89758: LD_INT 103
89760: PUSH
89761: LD_INT 104
89763: PUSH
89764: LD_INT 105
89766: PUSH
89767: LD_INT 106
89769: PUSH
89770: LD_INT 107
89772: PUSH
89773: LD_INT 108
89775: PUSH
89776: LD_INT 109
89778: PUSH
89779: LD_INT 110
89781: PUSH
89782: LD_INT 111
89784: PUSH
89785: LD_INT 112
89787: PUSH
89788: LD_INT 113
89790: PUSH
89791: LD_INT 114
89793: PUSH
89794: EMPTY
89795: LIST
89796: LIST
89797: LIST
89798: LIST
89799: LIST
89800: LIST
89801: LIST
89802: LIST
89803: LIST
89804: LIST
89805: LIST
89806: LIST
89807: LIST
89808: LIST
89809: PUSH
89810: EMPTY
89811: LIST
89812: LIST
89813: ST_TO_ADDR
89814: GO 91185
89816: LD_INT 13
89818: DOUBLE
89819: EQUAL
89820: IFTRUE 89824
89822: GO 90020
89824: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
89825: LD_ADDR_VAR 0 1
89829: PUSH
89830: LD_INT 1
89832: PUSH
89833: LD_INT 2
89835: PUSH
89836: LD_INT 3
89838: PUSH
89839: LD_INT 4
89841: PUSH
89842: LD_INT 5
89844: PUSH
89845: LD_INT 8
89847: PUSH
89848: LD_INT 9
89850: PUSH
89851: LD_INT 10
89853: PUSH
89854: LD_INT 11
89856: PUSH
89857: LD_INT 12
89859: PUSH
89860: LD_INT 14
89862: PUSH
89863: LD_INT 15
89865: PUSH
89866: LD_INT 16
89868: PUSH
89869: LD_INT 17
89871: PUSH
89872: LD_INT 18
89874: PUSH
89875: LD_INT 19
89877: PUSH
89878: LD_INT 20
89880: PUSH
89881: LD_INT 21
89883: PUSH
89884: LD_INT 22
89886: PUSH
89887: LD_INT 23
89889: PUSH
89890: LD_INT 24
89892: PUSH
89893: LD_INT 25
89895: PUSH
89896: LD_INT 26
89898: PUSH
89899: LD_INT 27
89901: PUSH
89902: LD_INT 28
89904: PUSH
89905: LD_INT 30
89907: PUSH
89908: LD_INT 31
89910: PUSH
89911: LD_INT 32
89913: PUSH
89914: LD_INT 33
89916: PUSH
89917: LD_INT 34
89919: PUSH
89920: LD_INT 36
89922: PUSH
89923: EMPTY
89924: LIST
89925: LIST
89926: LIST
89927: LIST
89928: LIST
89929: LIST
89930: LIST
89931: LIST
89932: LIST
89933: LIST
89934: LIST
89935: LIST
89936: LIST
89937: LIST
89938: LIST
89939: LIST
89940: LIST
89941: LIST
89942: LIST
89943: LIST
89944: LIST
89945: LIST
89946: LIST
89947: LIST
89948: LIST
89949: LIST
89950: LIST
89951: LIST
89952: LIST
89953: LIST
89954: LIST
89955: PUSH
89956: LD_INT 101
89958: PUSH
89959: LD_INT 102
89961: PUSH
89962: LD_INT 103
89964: PUSH
89965: LD_INT 104
89967: PUSH
89968: LD_INT 105
89970: PUSH
89971: LD_INT 106
89973: PUSH
89974: LD_INT 107
89976: PUSH
89977: LD_INT 108
89979: PUSH
89980: LD_INT 109
89982: PUSH
89983: LD_INT 110
89985: PUSH
89986: LD_INT 111
89988: PUSH
89989: LD_INT 112
89991: PUSH
89992: LD_INT 113
89994: PUSH
89995: LD_INT 114
89997: PUSH
89998: EMPTY
89999: LIST
90000: LIST
90001: LIST
90002: LIST
90003: LIST
90004: LIST
90005: LIST
90006: LIST
90007: LIST
90008: LIST
90009: LIST
90010: LIST
90011: LIST
90012: LIST
90013: PUSH
90014: EMPTY
90015: LIST
90016: LIST
90017: ST_TO_ADDR
90018: GO 91185
90020: LD_INT 14
90022: DOUBLE
90023: EQUAL
90024: IFTRUE 90028
90026: GO 90240
90028: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
90029: LD_ADDR_VAR 0 1
90033: PUSH
90034: LD_INT 1
90036: PUSH
90037: LD_INT 2
90039: PUSH
90040: LD_INT 3
90042: PUSH
90043: LD_INT 4
90045: PUSH
90046: LD_INT 5
90048: PUSH
90049: LD_INT 6
90051: PUSH
90052: LD_INT 7
90054: PUSH
90055: LD_INT 8
90057: PUSH
90058: LD_INT 9
90060: PUSH
90061: LD_INT 10
90063: PUSH
90064: LD_INT 11
90066: PUSH
90067: LD_INT 12
90069: PUSH
90070: LD_INT 13
90072: PUSH
90073: LD_INT 14
90075: PUSH
90076: LD_INT 15
90078: PUSH
90079: LD_INT 16
90081: PUSH
90082: LD_INT 17
90084: PUSH
90085: LD_INT 18
90087: PUSH
90088: LD_INT 19
90090: PUSH
90091: LD_INT 20
90093: PUSH
90094: LD_INT 21
90096: PUSH
90097: LD_INT 22
90099: PUSH
90100: LD_INT 23
90102: PUSH
90103: LD_INT 24
90105: PUSH
90106: LD_INT 25
90108: PUSH
90109: LD_INT 26
90111: PUSH
90112: LD_INT 27
90114: PUSH
90115: LD_INT 28
90117: PUSH
90118: LD_INT 29
90120: PUSH
90121: LD_INT 30
90123: PUSH
90124: LD_INT 31
90126: PUSH
90127: LD_INT 32
90129: PUSH
90130: LD_INT 33
90132: PUSH
90133: LD_INT 34
90135: PUSH
90136: LD_INT 36
90138: PUSH
90139: EMPTY
90140: LIST
90141: LIST
90142: LIST
90143: LIST
90144: LIST
90145: LIST
90146: LIST
90147: LIST
90148: LIST
90149: LIST
90150: LIST
90151: LIST
90152: LIST
90153: LIST
90154: LIST
90155: LIST
90156: LIST
90157: LIST
90158: LIST
90159: LIST
90160: LIST
90161: LIST
90162: LIST
90163: LIST
90164: LIST
90165: LIST
90166: LIST
90167: LIST
90168: LIST
90169: LIST
90170: LIST
90171: LIST
90172: LIST
90173: LIST
90174: LIST
90175: PUSH
90176: LD_INT 101
90178: PUSH
90179: LD_INT 102
90181: PUSH
90182: LD_INT 103
90184: PUSH
90185: LD_INT 104
90187: PUSH
90188: LD_INT 105
90190: PUSH
90191: LD_INT 106
90193: PUSH
90194: LD_INT 107
90196: PUSH
90197: LD_INT 108
90199: PUSH
90200: LD_INT 109
90202: PUSH
90203: LD_INT 110
90205: PUSH
90206: LD_INT 111
90208: PUSH
90209: LD_INT 112
90211: PUSH
90212: LD_INT 113
90214: PUSH
90215: LD_INT 114
90217: PUSH
90218: EMPTY
90219: LIST
90220: LIST
90221: LIST
90222: LIST
90223: LIST
90224: LIST
90225: LIST
90226: LIST
90227: LIST
90228: LIST
90229: LIST
90230: LIST
90231: LIST
90232: LIST
90233: PUSH
90234: EMPTY
90235: LIST
90236: LIST
90237: ST_TO_ADDR
90238: GO 91185
90240: LD_INT 15
90242: DOUBLE
90243: EQUAL
90244: IFTRUE 90248
90246: GO 90460
90248: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
90249: LD_ADDR_VAR 0 1
90253: PUSH
90254: LD_INT 1
90256: PUSH
90257: LD_INT 2
90259: PUSH
90260: LD_INT 3
90262: PUSH
90263: LD_INT 4
90265: PUSH
90266: LD_INT 5
90268: PUSH
90269: LD_INT 6
90271: PUSH
90272: LD_INT 7
90274: PUSH
90275: LD_INT 8
90277: PUSH
90278: LD_INT 9
90280: PUSH
90281: LD_INT 10
90283: PUSH
90284: LD_INT 11
90286: PUSH
90287: LD_INT 12
90289: PUSH
90290: LD_INT 13
90292: PUSH
90293: LD_INT 14
90295: PUSH
90296: LD_INT 15
90298: PUSH
90299: LD_INT 16
90301: PUSH
90302: LD_INT 17
90304: PUSH
90305: LD_INT 18
90307: PUSH
90308: LD_INT 19
90310: PUSH
90311: LD_INT 20
90313: PUSH
90314: LD_INT 21
90316: PUSH
90317: LD_INT 22
90319: PUSH
90320: LD_INT 23
90322: PUSH
90323: LD_INT 24
90325: PUSH
90326: LD_INT 25
90328: PUSH
90329: LD_INT 26
90331: PUSH
90332: LD_INT 27
90334: PUSH
90335: LD_INT 28
90337: PUSH
90338: LD_INT 29
90340: PUSH
90341: LD_INT 30
90343: PUSH
90344: LD_INT 31
90346: PUSH
90347: LD_INT 32
90349: PUSH
90350: LD_INT 33
90352: PUSH
90353: LD_INT 34
90355: PUSH
90356: LD_INT 36
90358: PUSH
90359: EMPTY
90360: LIST
90361: LIST
90362: LIST
90363: LIST
90364: LIST
90365: LIST
90366: LIST
90367: LIST
90368: LIST
90369: LIST
90370: LIST
90371: LIST
90372: LIST
90373: LIST
90374: LIST
90375: LIST
90376: LIST
90377: LIST
90378: LIST
90379: LIST
90380: LIST
90381: LIST
90382: LIST
90383: LIST
90384: LIST
90385: LIST
90386: LIST
90387: LIST
90388: LIST
90389: LIST
90390: LIST
90391: LIST
90392: LIST
90393: LIST
90394: LIST
90395: PUSH
90396: LD_INT 101
90398: PUSH
90399: LD_INT 102
90401: PUSH
90402: LD_INT 103
90404: PUSH
90405: LD_INT 104
90407: PUSH
90408: LD_INT 105
90410: PUSH
90411: LD_INT 106
90413: PUSH
90414: LD_INT 107
90416: PUSH
90417: LD_INT 108
90419: PUSH
90420: LD_INT 109
90422: PUSH
90423: LD_INT 110
90425: PUSH
90426: LD_INT 111
90428: PUSH
90429: LD_INT 112
90431: PUSH
90432: LD_INT 113
90434: PUSH
90435: LD_INT 114
90437: PUSH
90438: EMPTY
90439: LIST
90440: LIST
90441: LIST
90442: LIST
90443: LIST
90444: LIST
90445: LIST
90446: LIST
90447: LIST
90448: LIST
90449: LIST
90450: LIST
90451: LIST
90452: LIST
90453: PUSH
90454: EMPTY
90455: LIST
90456: LIST
90457: ST_TO_ADDR
90458: GO 91185
90460: LD_INT 16
90462: DOUBLE
90463: EQUAL
90464: IFTRUE 90468
90466: GO 90592
90468: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
90469: LD_ADDR_VAR 0 1
90473: PUSH
90474: LD_INT 2
90476: PUSH
90477: LD_INT 4
90479: PUSH
90480: LD_INT 5
90482: PUSH
90483: LD_INT 7
90485: PUSH
90486: LD_INT 11
90488: PUSH
90489: LD_INT 12
90491: PUSH
90492: LD_INT 15
90494: PUSH
90495: LD_INT 16
90497: PUSH
90498: LD_INT 20
90500: PUSH
90501: LD_INT 21
90503: PUSH
90504: LD_INT 22
90506: PUSH
90507: LD_INT 23
90509: PUSH
90510: LD_INT 25
90512: PUSH
90513: LD_INT 26
90515: PUSH
90516: LD_INT 30
90518: PUSH
90519: LD_INT 31
90521: PUSH
90522: LD_INT 32
90524: PUSH
90525: LD_INT 33
90527: PUSH
90528: LD_INT 34
90530: PUSH
90531: EMPTY
90532: LIST
90533: LIST
90534: LIST
90535: LIST
90536: LIST
90537: LIST
90538: LIST
90539: LIST
90540: LIST
90541: LIST
90542: LIST
90543: LIST
90544: LIST
90545: LIST
90546: LIST
90547: LIST
90548: LIST
90549: LIST
90550: LIST
90551: PUSH
90552: LD_INT 101
90554: PUSH
90555: LD_INT 102
90557: PUSH
90558: LD_INT 103
90560: PUSH
90561: LD_INT 106
90563: PUSH
90564: LD_INT 108
90566: PUSH
90567: LD_INT 112
90569: PUSH
90570: LD_INT 113
90572: PUSH
90573: LD_INT 114
90575: PUSH
90576: EMPTY
90577: LIST
90578: LIST
90579: LIST
90580: LIST
90581: LIST
90582: LIST
90583: LIST
90584: LIST
90585: PUSH
90586: EMPTY
90587: LIST
90588: LIST
90589: ST_TO_ADDR
90590: GO 91185
90592: LD_INT 17
90594: DOUBLE
90595: EQUAL
90596: IFTRUE 90600
90598: GO 90812
90600: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
90601: LD_ADDR_VAR 0 1
90605: PUSH
90606: LD_INT 1
90608: PUSH
90609: LD_INT 2
90611: PUSH
90612: LD_INT 3
90614: PUSH
90615: LD_INT 4
90617: PUSH
90618: LD_INT 5
90620: PUSH
90621: LD_INT 6
90623: PUSH
90624: LD_INT 7
90626: PUSH
90627: LD_INT 8
90629: PUSH
90630: LD_INT 9
90632: PUSH
90633: LD_INT 10
90635: PUSH
90636: LD_INT 11
90638: PUSH
90639: LD_INT 12
90641: PUSH
90642: LD_INT 13
90644: PUSH
90645: LD_INT 14
90647: PUSH
90648: LD_INT 15
90650: PUSH
90651: LD_INT 16
90653: PUSH
90654: LD_INT 17
90656: PUSH
90657: LD_INT 18
90659: PUSH
90660: LD_INT 19
90662: PUSH
90663: LD_INT 20
90665: PUSH
90666: LD_INT 21
90668: PUSH
90669: LD_INT 22
90671: PUSH
90672: LD_INT 23
90674: PUSH
90675: LD_INT 24
90677: PUSH
90678: LD_INT 25
90680: PUSH
90681: LD_INT 26
90683: PUSH
90684: LD_INT 27
90686: PUSH
90687: LD_INT 28
90689: PUSH
90690: LD_INT 29
90692: PUSH
90693: LD_INT 30
90695: PUSH
90696: LD_INT 31
90698: PUSH
90699: LD_INT 32
90701: PUSH
90702: LD_INT 33
90704: PUSH
90705: LD_INT 34
90707: PUSH
90708: LD_INT 36
90710: PUSH
90711: EMPTY
90712: LIST
90713: LIST
90714: LIST
90715: LIST
90716: LIST
90717: LIST
90718: LIST
90719: LIST
90720: LIST
90721: LIST
90722: LIST
90723: LIST
90724: LIST
90725: LIST
90726: LIST
90727: LIST
90728: LIST
90729: LIST
90730: LIST
90731: LIST
90732: LIST
90733: LIST
90734: LIST
90735: LIST
90736: LIST
90737: LIST
90738: LIST
90739: LIST
90740: LIST
90741: LIST
90742: LIST
90743: LIST
90744: LIST
90745: LIST
90746: LIST
90747: PUSH
90748: LD_INT 101
90750: PUSH
90751: LD_INT 102
90753: PUSH
90754: LD_INT 103
90756: PUSH
90757: LD_INT 104
90759: PUSH
90760: LD_INT 105
90762: PUSH
90763: LD_INT 106
90765: PUSH
90766: LD_INT 107
90768: PUSH
90769: LD_INT 108
90771: PUSH
90772: LD_INT 109
90774: PUSH
90775: LD_INT 110
90777: PUSH
90778: LD_INT 111
90780: PUSH
90781: LD_INT 112
90783: PUSH
90784: LD_INT 113
90786: PUSH
90787: LD_INT 114
90789: PUSH
90790: EMPTY
90791: LIST
90792: LIST
90793: LIST
90794: LIST
90795: LIST
90796: LIST
90797: LIST
90798: LIST
90799: LIST
90800: LIST
90801: LIST
90802: LIST
90803: LIST
90804: LIST
90805: PUSH
90806: EMPTY
90807: LIST
90808: LIST
90809: ST_TO_ADDR
90810: GO 91185
90812: LD_INT 18
90814: DOUBLE
90815: EQUAL
90816: IFTRUE 90820
90818: GO 90956
90820: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
90821: LD_ADDR_VAR 0 1
90825: PUSH
90826: LD_INT 2
90828: PUSH
90829: LD_INT 4
90831: PUSH
90832: LD_INT 5
90834: PUSH
90835: LD_INT 7
90837: PUSH
90838: LD_INT 11
90840: PUSH
90841: LD_INT 12
90843: PUSH
90844: LD_INT 15
90846: PUSH
90847: LD_INT 16
90849: PUSH
90850: LD_INT 20
90852: PUSH
90853: LD_INT 21
90855: PUSH
90856: LD_INT 22
90858: PUSH
90859: LD_INT 23
90861: PUSH
90862: LD_INT 25
90864: PUSH
90865: LD_INT 26
90867: PUSH
90868: LD_INT 30
90870: PUSH
90871: LD_INT 31
90873: PUSH
90874: LD_INT 32
90876: PUSH
90877: LD_INT 33
90879: PUSH
90880: LD_INT 34
90882: PUSH
90883: LD_INT 35
90885: PUSH
90886: LD_INT 36
90888: PUSH
90889: EMPTY
90890: LIST
90891: LIST
90892: LIST
90893: LIST
90894: LIST
90895: LIST
90896: LIST
90897: LIST
90898: LIST
90899: LIST
90900: LIST
90901: LIST
90902: LIST
90903: LIST
90904: LIST
90905: LIST
90906: LIST
90907: LIST
90908: LIST
90909: LIST
90910: LIST
90911: PUSH
90912: LD_INT 101
90914: PUSH
90915: LD_INT 102
90917: PUSH
90918: LD_INT 103
90920: PUSH
90921: LD_INT 106
90923: PUSH
90924: LD_INT 108
90926: PUSH
90927: LD_INT 112
90929: PUSH
90930: LD_INT 113
90932: PUSH
90933: LD_INT 114
90935: PUSH
90936: LD_INT 115
90938: PUSH
90939: EMPTY
90940: LIST
90941: LIST
90942: LIST
90943: LIST
90944: LIST
90945: LIST
90946: LIST
90947: LIST
90948: LIST
90949: PUSH
90950: EMPTY
90951: LIST
90952: LIST
90953: ST_TO_ADDR
90954: GO 91185
90956: LD_INT 19
90958: DOUBLE
90959: EQUAL
90960: IFTRUE 90964
90962: GO 91184
90964: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
90965: LD_ADDR_VAR 0 1
90969: PUSH
90970: LD_INT 1
90972: PUSH
90973: LD_INT 2
90975: PUSH
90976: LD_INT 3
90978: PUSH
90979: LD_INT 4
90981: PUSH
90982: LD_INT 5
90984: PUSH
90985: LD_INT 6
90987: PUSH
90988: LD_INT 7
90990: PUSH
90991: LD_INT 8
90993: PUSH
90994: LD_INT 9
90996: PUSH
90997: LD_INT 10
90999: PUSH
91000: LD_INT 11
91002: PUSH
91003: LD_INT 12
91005: PUSH
91006: LD_INT 13
91008: PUSH
91009: LD_INT 14
91011: PUSH
91012: LD_INT 15
91014: PUSH
91015: LD_INT 16
91017: PUSH
91018: LD_INT 17
91020: PUSH
91021: LD_INT 18
91023: PUSH
91024: LD_INT 19
91026: PUSH
91027: LD_INT 20
91029: PUSH
91030: LD_INT 21
91032: PUSH
91033: LD_INT 22
91035: PUSH
91036: LD_INT 23
91038: PUSH
91039: LD_INT 24
91041: PUSH
91042: LD_INT 25
91044: PUSH
91045: LD_INT 26
91047: PUSH
91048: LD_INT 27
91050: PUSH
91051: LD_INT 28
91053: PUSH
91054: LD_INT 29
91056: PUSH
91057: LD_INT 30
91059: PUSH
91060: LD_INT 31
91062: PUSH
91063: LD_INT 32
91065: PUSH
91066: LD_INT 33
91068: PUSH
91069: LD_INT 34
91071: PUSH
91072: LD_INT 35
91074: PUSH
91075: LD_INT 36
91077: PUSH
91078: EMPTY
91079: LIST
91080: LIST
91081: LIST
91082: LIST
91083: LIST
91084: LIST
91085: LIST
91086: LIST
91087: LIST
91088: LIST
91089: LIST
91090: LIST
91091: LIST
91092: LIST
91093: LIST
91094: LIST
91095: LIST
91096: LIST
91097: LIST
91098: LIST
91099: LIST
91100: LIST
91101: LIST
91102: LIST
91103: LIST
91104: LIST
91105: LIST
91106: LIST
91107: LIST
91108: LIST
91109: LIST
91110: LIST
91111: LIST
91112: LIST
91113: LIST
91114: LIST
91115: PUSH
91116: LD_INT 101
91118: PUSH
91119: LD_INT 102
91121: PUSH
91122: LD_INT 103
91124: PUSH
91125: LD_INT 104
91127: PUSH
91128: LD_INT 105
91130: PUSH
91131: LD_INT 106
91133: PUSH
91134: LD_INT 107
91136: PUSH
91137: LD_INT 108
91139: PUSH
91140: LD_INT 109
91142: PUSH
91143: LD_INT 110
91145: PUSH
91146: LD_INT 111
91148: PUSH
91149: LD_INT 112
91151: PUSH
91152: LD_INT 113
91154: PUSH
91155: LD_INT 114
91157: PUSH
91158: LD_INT 115
91160: PUSH
91161: EMPTY
91162: LIST
91163: LIST
91164: LIST
91165: LIST
91166: LIST
91167: LIST
91168: LIST
91169: LIST
91170: LIST
91171: LIST
91172: LIST
91173: LIST
91174: LIST
91175: LIST
91176: LIST
91177: PUSH
91178: EMPTY
91179: LIST
91180: LIST
91181: ST_TO_ADDR
91182: GO 91185
91184: POP
// end else
91185: GO 91404
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
91187: LD_ADDR_VAR 0 1
91191: PUSH
91192: LD_INT 1
91194: PUSH
91195: LD_INT 2
91197: PUSH
91198: LD_INT 3
91200: PUSH
91201: LD_INT 4
91203: PUSH
91204: LD_INT 5
91206: PUSH
91207: LD_INT 6
91209: PUSH
91210: LD_INT 7
91212: PUSH
91213: LD_INT 8
91215: PUSH
91216: LD_INT 9
91218: PUSH
91219: LD_INT 10
91221: PUSH
91222: LD_INT 11
91224: PUSH
91225: LD_INT 12
91227: PUSH
91228: LD_INT 13
91230: PUSH
91231: LD_INT 14
91233: PUSH
91234: LD_INT 15
91236: PUSH
91237: LD_INT 16
91239: PUSH
91240: LD_INT 17
91242: PUSH
91243: LD_INT 18
91245: PUSH
91246: LD_INT 19
91248: PUSH
91249: LD_INT 20
91251: PUSH
91252: LD_INT 21
91254: PUSH
91255: LD_INT 22
91257: PUSH
91258: LD_INT 23
91260: PUSH
91261: LD_INT 24
91263: PUSH
91264: LD_INT 25
91266: PUSH
91267: LD_INT 26
91269: PUSH
91270: LD_INT 27
91272: PUSH
91273: LD_INT 28
91275: PUSH
91276: LD_INT 29
91278: PUSH
91279: LD_INT 30
91281: PUSH
91282: LD_INT 31
91284: PUSH
91285: LD_INT 32
91287: PUSH
91288: LD_INT 33
91290: PUSH
91291: LD_INT 34
91293: PUSH
91294: LD_INT 35
91296: PUSH
91297: LD_INT 36
91299: PUSH
91300: EMPTY
91301: LIST
91302: LIST
91303: LIST
91304: LIST
91305: LIST
91306: LIST
91307: LIST
91308: LIST
91309: LIST
91310: LIST
91311: LIST
91312: LIST
91313: LIST
91314: LIST
91315: LIST
91316: LIST
91317: LIST
91318: LIST
91319: LIST
91320: LIST
91321: LIST
91322: LIST
91323: LIST
91324: LIST
91325: LIST
91326: LIST
91327: LIST
91328: LIST
91329: LIST
91330: LIST
91331: LIST
91332: LIST
91333: LIST
91334: LIST
91335: LIST
91336: LIST
91337: PUSH
91338: LD_INT 101
91340: PUSH
91341: LD_INT 102
91343: PUSH
91344: LD_INT 103
91346: PUSH
91347: LD_INT 104
91349: PUSH
91350: LD_INT 105
91352: PUSH
91353: LD_INT 106
91355: PUSH
91356: LD_INT 107
91358: PUSH
91359: LD_INT 108
91361: PUSH
91362: LD_INT 109
91364: PUSH
91365: LD_INT 110
91367: PUSH
91368: LD_INT 111
91370: PUSH
91371: LD_INT 112
91373: PUSH
91374: LD_INT 113
91376: PUSH
91377: LD_INT 114
91379: PUSH
91380: LD_INT 115
91382: PUSH
91383: EMPTY
91384: LIST
91385: LIST
91386: LIST
91387: LIST
91388: LIST
91389: LIST
91390: LIST
91391: LIST
91392: LIST
91393: LIST
91394: LIST
91395: LIST
91396: LIST
91397: LIST
91398: LIST
91399: PUSH
91400: EMPTY
91401: LIST
91402: LIST
91403: ST_TO_ADDR
// if result then
91404: LD_VAR 0 1
91408: IFFALSE 91697
// begin normal :=  ;
91410: LD_ADDR_VAR 0 3
91414: PUSH
91415: LD_STRING 
91417: ST_TO_ADDR
// hardcore :=  ;
91418: LD_ADDR_VAR 0 4
91422: PUSH
91423: LD_STRING 
91425: ST_TO_ADDR
// for i = 1 to normalCounter do
91426: LD_ADDR_VAR 0 5
91430: PUSH
91431: DOUBLE
91432: LD_INT 1
91434: DEC
91435: ST_TO_ADDR
91436: LD_EXP 91
91440: PUSH
91441: FOR_TO
91442: IFFALSE 91543
// begin tmp := 0 ;
91444: LD_ADDR_VAR 0 2
91448: PUSH
91449: LD_STRING 0
91451: ST_TO_ADDR
// if result [ 1 ] then
91452: LD_VAR 0 1
91456: PUSH
91457: LD_INT 1
91459: ARRAY
91460: IFFALSE 91525
// if result [ 1 ] [ 1 ] = i then
91462: LD_VAR 0 1
91466: PUSH
91467: LD_INT 1
91469: ARRAY
91470: PUSH
91471: LD_INT 1
91473: ARRAY
91474: PUSH
91475: LD_VAR 0 5
91479: EQUAL
91480: IFFALSE 91525
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
91482: LD_ADDR_VAR 0 1
91486: PUSH
91487: LD_VAR 0 1
91491: PPUSH
91492: LD_INT 1
91494: PPUSH
91495: LD_VAR 0 1
91499: PUSH
91500: LD_INT 1
91502: ARRAY
91503: PPUSH
91504: LD_INT 1
91506: PPUSH
91507: CALL_OW 3
91511: PPUSH
91512: CALL_OW 1
91516: ST_TO_ADDR
// tmp := 1 ;
91517: LD_ADDR_VAR 0 2
91521: PUSH
91522: LD_STRING 1
91524: ST_TO_ADDR
// end ; normal := normal & tmp ;
91525: LD_ADDR_VAR 0 3
91529: PUSH
91530: LD_VAR 0 3
91534: PUSH
91535: LD_VAR 0 2
91539: STR
91540: ST_TO_ADDR
// end ;
91541: GO 91441
91543: POP
91544: POP
// for i = 1 to hardcoreCounter do
91545: LD_ADDR_VAR 0 5
91549: PUSH
91550: DOUBLE
91551: LD_INT 1
91553: DEC
91554: ST_TO_ADDR
91555: LD_EXP 92
91559: PUSH
91560: FOR_TO
91561: IFFALSE 91666
// begin tmp := 0 ;
91563: LD_ADDR_VAR 0 2
91567: PUSH
91568: LD_STRING 0
91570: ST_TO_ADDR
// if result [ 2 ] then
91571: LD_VAR 0 1
91575: PUSH
91576: LD_INT 2
91578: ARRAY
91579: IFFALSE 91648
// if result [ 2 ] [ 1 ] = 100 + i then
91581: LD_VAR 0 1
91585: PUSH
91586: LD_INT 2
91588: ARRAY
91589: PUSH
91590: LD_INT 1
91592: ARRAY
91593: PUSH
91594: LD_INT 100
91596: PUSH
91597: LD_VAR 0 5
91601: PLUS
91602: EQUAL
91603: IFFALSE 91648
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
91605: LD_ADDR_VAR 0 1
91609: PUSH
91610: LD_VAR 0 1
91614: PPUSH
91615: LD_INT 2
91617: PPUSH
91618: LD_VAR 0 1
91622: PUSH
91623: LD_INT 2
91625: ARRAY
91626: PPUSH
91627: LD_INT 1
91629: PPUSH
91630: CALL_OW 3
91634: PPUSH
91635: CALL_OW 1
91639: ST_TO_ADDR
// tmp := 1 ;
91640: LD_ADDR_VAR 0 2
91644: PUSH
91645: LD_STRING 1
91647: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
91648: LD_ADDR_VAR 0 4
91652: PUSH
91653: LD_VAR 0 4
91657: PUSH
91658: LD_VAR 0 2
91662: STR
91663: ST_TO_ADDR
// end ;
91664: GO 91560
91666: POP
91667: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
91668: LD_STRING getStreamItemsFromMission("
91670: PUSH
91671: LD_VAR 0 3
91675: STR
91676: PUSH
91677: LD_STRING ","
91679: STR
91680: PUSH
91681: LD_VAR 0 4
91685: STR
91686: PUSH
91687: LD_STRING ")
91689: STR
91690: PPUSH
91691: CALL_OW 559
// end else
91695: GO 91704
// ToLua ( getStreamItemsFromMission("","") ) ;
91697: LD_STRING getStreamItemsFromMission("","")
91699: PPUSH
91700: CALL_OW 559
// end ;
91704: LD_VAR 0 1
91708: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
91709: LD_EXP 90
91713: PUSH
91714: LD_EXP 95
91718: AND
91719: IFFALSE 91843
91721: GO 91723
91723: DISABLE
91724: LD_INT 0
91726: PPUSH
91727: PPUSH
// begin enable ;
91728: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
91729: LD_ADDR_VAR 0 2
91733: PUSH
91734: LD_INT 22
91736: PUSH
91737: LD_OWVAR 2
91741: PUSH
91742: EMPTY
91743: LIST
91744: LIST
91745: PUSH
91746: LD_INT 2
91748: PUSH
91749: LD_INT 34
91751: PUSH
91752: LD_INT 7
91754: PUSH
91755: EMPTY
91756: LIST
91757: LIST
91758: PUSH
91759: LD_INT 34
91761: PUSH
91762: LD_INT 45
91764: PUSH
91765: EMPTY
91766: LIST
91767: LIST
91768: PUSH
91769: LD_INT 34
91771: PUSH
91772: LD_INT 28
91774: PUSH
91775: EMPTY
91776: LIST
91777: LIST
91778: PUSH
91779: LD_INT 34
91781: PUSH
91782: LD_INT 47
91784: PUSH
91785: EMPTY
91786: LIST
91787: LIST
91788: PUSH
91789: EMPTY
91790: LIST
91791: LIST
91792: LIST
91793: LIST
91794: LIST
91795: PUSH
91796: EMPTY
91797: LIST
91798: LIST
91799: PPUSH
91800: CALL_OW 69
91804: ST_TO_ADDR
// if not tmp then
91805: LD_VAR 0 2
91809: NOT
91810: IFFALSE 91814
// exit ;
91812: GO 91843
// for i in tmp do
91814: LD_ADDR_VAR 0 1
91818: PUSH
91819: LD_VAR 0 2
91823: PUSH
91824: FOR_IN
91825: IFFALSE 91841
// begin SetLives ( i , 0 ) ;
91827: LD_VAR 0 1
91831: PPUSH
91832: LD_INT 0
91834: PPUSH
91835: CALL_OW 234
// end ;
91839: GO 91824
91841: POP
91842: POP
// end ;
91843: PPOPN 2
91845: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
91846: LD_EXP 90
91850: PUSH
91851: LD_EXP 96
91855: AND
91856: IFFALSE 91940
91858: GO 91860
91860: DISABLE
91861: LD_INT 0
91863: PPUSH
91864: PPUSH
// begin enable ;
91865: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
91866: LD_ADDR_VAR 0 2
91870: PUSH
91871: LD_INT 22
91873: PUSH
91874: LD_OWVAR 2
91878: PUSH
91879: EMPTY
91880: LIST
91881: LIST
91882: PUSH
91883: LD_INT 32
91885: PUSH
91886: LD_INT 3
91888: PUSH
91889: EMPTY
91890: LIST
91891: LIST
91892: PUSH
91893: EMPTY
91894: LIST
91895: LIST
91896: PPUSH
91897: CALL_OW 69
91901: ST_TO_ADDR
// if not tmp then
91902: LD_VAR 0 2
91906: NOT
91907: IFFALSE 91911
// exit ;
91909: GO 91940
// for i in tmp do
91911: LD_ADDR_VAR 0 1
91915: PUSH
91916: LD_VAR 0 2
91920: PUSH
91921: FOR_IN
91922: IFFALSE 91938
// begin SetLives ( i , 0 ) ;
91924: LD_VAR 0 1
91928: PPUSH
91929: LD_INT 0
91931: PPUSH
91932: CALL_OW 234
// end ;
91936: GO 91921
91938: POP
91939: POP
// end ;
91940: PPOPN 2
91942: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
91943: LD_EXP 90
91947: PUSH
91948: LD_EXP 93
91952: AND
91953: IFFALSE 92046
91955: GO 91957
91957: DISABLE
91958: LD_INT 0
91960: PPUSH
// begin enable ;
91961: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
91962: LD_ADDR_VAR 0 1
91966: PUSH
91967: LD_INT 22
91969: PUSH
91970: LD_OWVAR 2
91974: PUSH
91975: EMPTY
91976: LIST
91977: LIST
91978: PUSH
91979: LD_INT 2
91981: PUSH
91982: LD_INT 25
91984: PUSH
91985: LD_INT 5
91987: PUSH
91988: EMPTY
91989: LIST
91990: LIST
91991: PUSH
91992: LD_INT 25
91994: PUSH
91995: LD_INT 9
91997: PUSH
91998: EMPTY
91999: LIST
92000: LIST
92001: PUSH
92002: LD_INT 25
92004: PUSH
92005: LD_INT 8
92007: PUSH
92008: EMPTY
92009: LIST
92010: LIST
92011: PUSH
92012: EMPTY
92013: LIST
92014: LIST
92015: LIST
92016: LIST
92017: PUSH
92018: EMPTY
92019: LIST
92020: LIST
92021: PPUSH
92022: CALL_OW 69
92026: PUSH
92027: FOR_IN
92028: IFFALSE 92044
// begin SetClass ( i , 1 ) ;
92030: LD_VAR 0 1
92034: PPUSH
92035: LD_INT 1
92037: PPUSH
92038: CALL_OW 336
// end ;
92042: GO 92027
92044: POP
92045: POP
// end ;
92046: PPOPN 1
92048: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
92049: LD_EXP 90
92053: PUSH
92054: LD_EXP 94
92058: AND
92059: PUSH
92060: LD_OWVAR 65
92064: PUSH
92065: LD_INT 7
92067: LESS
92068: AND
92069: IFFALSE 92083
92071: GO 92073
92073: DISABLE
// begin enable ;
92074: ENABLE
// game_speed := 7 ;
92075: LD_ADDR_OWVAR 65
92079: PUSH
92080: LD_INT 7
92082: ST_TO_ADDR
// end ;
92083: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
92084: LD_EXP 90
92088: PUSH
92089: LD_EXP 97
92093: AND
92094: IFFALSE 92296
92096: GO 92098
92098: DISABLE
92099: LD_INT 0
92101: PPUSH
92102: PPUSH
92103: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
92104: LD_ADDR_VAR 0 3
92108: PUSH
92109: LD_INT 81
92111: PUSH
92112: LD_OWVAR 2
92116: PUSH
92117: EMPTY
92118: LIST
92119: LIST
92120: PUSH
92121: LD_INT 21
92123: PUSH
92124: LD_INT 1
92126: PUSH
92127: EMPTY
92128: LIST
92129: LIST
92130: PUSH
92131: EMPTY
92132: LIST
92133: LIST
92134: PPUSH
92135: CALL_OW 69
92139: ST_TO_ADDR
// if not tmp then
92140: LD_VAR 0 3
92144: NOT
92145: IFFALSE 92149
// exit ;
92147: GO 92296
// if tmp > 5 then
92149: LD_VAR 0 3
92153: PUSH
92154: LD_INT 5
92156: GREATER
92157: IFFALSE 92169
// k := 5 else
92159: LD_ADDR_VAR 0 2
92163: PUSH
92164: LD_INT 5
92166: ST_TO_ADDR
92167: GO 92179
// k := tmp ;
92169: LD_ADDR_VAR 0 2
92173: PUSH
92174: LD_VAR 0 3
92178: ST_TO_ADDR
// for i := 1 to k do
92179: LD_ADDR_VAR 0 1
92183: PUSH
92184: DOUBLE
92185: LD_INT 1
92187: DEC
92188: ST_TO_ADDR
92189: LD_VAR 0 2
92193: PUSH
92194: FOR_TO
92195: IFFALSE 92294
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
92197: LD_VAR 0 3
92201: PUSH
92202: LD_VAR 0 1
92206: ARRAY
92207: PPUSH
92208: LD_VAR 0 1
92212: PUSH
92213: LD_INT 4
92215: MOD
92216: PUSH
92217: LD_INT 1
92219: PLUS
92220: PPUSH
92221: CALL_OW 259
92225: PUSH
92226: LD_INT 10
92228: LESS
92229: IFFALSE 92292
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
92231: LD_VAR 0 3
92235: PUSH
92236: LD_VAR 0 1
92240: ARRAY
92241: PPUSH
92242: LD_VAR 0 1
92246: PUSH
92247: LD_INT 4
92249: MOD
92250: PUSH
92251: LD_INT 1
92253: PLUS
92254: PPUSH
92255: LD_VAR 0 3
92259: PUSH
92260: LD_VAR 0 1
92264: ARRAY
92265: PPUSH
92266: LD_VAR 0 1
92270: PUSH
92271: LD_INT 4
92273: MOD
92274: PUSH
92275: LD_INT 1
92277: PLUS
92278: PPUSH
92279: CALL_OW 259
92283: PUSH
92284: LD_INT 1
92286: PLUS
92287: PPUSH
92288: CALL_OW 237
92292: GO 92194
92294: POP
92295: POP
// end ;
92296: PPOPN 3
92298: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
92299: LD_EXP 90
92303: PUSH
92304: LD_EXP 98
92308: AND
92309: IFFALSE 92329
92311: GO 92313
92313: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
92314: LD_INT 4
92316: PPUSH
92317: LD_OWVAR 2
92321: PPUSH
92322: LD_INT 0
92324: PPUSH
92325: CALL_OW 324
92329: END
// every 0 0$1 trigger StreamModeActive and sShovel do
92330: LD_EXP 90
92334: PUSH
92335: LD_EXP 127
92339: AND
92340: IFFALSE 92360
92342: GO 92344
92344: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
92345: LD_INT 19
92347: PPUSH
92348: LD_OWVAR 2
92352: PPUSH
92353: LD_INT 0
92355: PPUSH
92356: CALL_OW 324
92360: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
92361: LD_EXP 90
92365: PUSH
92366: LD_EXP 99
92370: AND
92371: IFFALSE 92473
92373: GO 92375
92375: DISABLE
92376: LD_INT 0
92378: PPUSH
92379: PPUSH
// begin enable ;
92380: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
92381: LD_ADDR_VAR 0 2
92385: PUSH
92386: LD_INT 22
92388: PUSH
92389: LD_OWVAR 2
92393: PUSH
92394: EMPTY
92395: LIST
92396: LIST
92397: PUSH
92398: LD_INT 2
92400: PUSH
92401: LD_INT 34
92403: PUSH
92404: LD_INT 11
92406: PUSH
92407: EMPTY
92408: LIST
92409: LIST
92410: PUSH
92411: LD_INT 34
92413: PUSH
92414: LD_INT 30
92416: PUSH
92417: EMPTY
92418: LIST
92419: LIST
92420: PUSH
92421: EMPTY
92422: LIST
92423: LIST
92424: LIST
92425: PUSH
92426: EMPTY
92427: LIST
92428: LIST
92429: PPUSH
92430: CALL_OW 69
92434: ST_TO_ADDR
// if not tmp then
92435: LD_VAR 0 2
92439: NOT
92440: IFFALSE 92444
// exit ;
92442: GO 92473
// for i in tmp do
92444: LD_ADDR_VAR 0 1
92448: PUSH
92449: LD_VAR 0 2
92453: PUSH
92454: FOR_IN
92455: IFFALSE 92471
// begin SetLives ( i , 0 ) ;
92457: LD_VAR 0 1
92461: PPUSH
92462: LD_INT 0
92464: PPUSH
92465: CALL_OW 234
// end ;
92469: GO 92454
92471: POP
92472: POP
// end ;
92473: PPOPN 2
92475: END
// every 0 0$1 trigger StreamModeActive and sBunker do
92476: LD_EXP 90
92480: PUSH
92481: LD_EXP 100
92485: AND
92486: IFFALSE 92506
92488: GO 92490
92490: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
92491: LD_INT 32
92493: PPUSH
92494: LD_OWVAR 2
92498: PPUSH
92499: LD_INT 0
92501: PPUSH
92502: CALL_OW 324
92506: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
92507: LD_EXP 90
92511: PUSH
92512: LD_EXP 101
92516: AND
92517: IFFALSE 92698
92519: GO 92521
92521: DISABLE
92522: LD_INT 0
92524: PPUSH
92525: PPUSH
92526: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
92527: LD_ADDR_VAR 0 2
92531: PUSH
92532: LD_INT 22
92534: PUSH
92535: LD_OWVAR 2
92539: PUSH
92540: EMPTY
92541: LIST
92542: LIST
92543: PUSH
92544: LD_INT 33
92546: PUSH
92547: LD_INT 3
92549: PUSH
92550: EMPTY
92551: LIST
92552: LIST
92553: PUSH
92554: EMPTY
92555: LIST
92556: LIST
92557: PPUSH
92558: CALL_OW 69
92562: ST_TO_ADDR
// if not tmp then
92563: LD_VAR 0 2
92567: NOT
92568: IFFALSE 92572
// exit ;
92570: GO 92698
// side := 0 ;
92572: LD_ADDR_VAR 0 3
92576: PUSH
92577: LD_INT 0
92579: ST_TO_ADDR
// for i := 1 to 8 do
92580: LD_ADDR_VAR 0 1
92584: PUSH
92585: DOUBLE
92586: LD_INT 1
92588: DEC
92589: ST_TO_ADDR
92590: LD_INT 8
92592: PUSH
92593: FOR_TO
92594: IFFALSE 92642
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
92596: LD_OWVAR 2
92600: PUSH
92601: LD_VAR 0 1
92605: NONEQUAL
92606: PUSH
92607: LD_OWVAR 2
92611: PPUSH
92612: LD_VAR 0 1
92616: PPUSH
92617: CALL_OW 81
92621: PUSH
92622: LD_INT 2
92624: EQUAL
92625: AND
92626: IFFALSE 92640
// begin side := i ;
92628: LD_ADDR_VAR 0 3
92632: PUSH
92633: LD_VAR 0 1
92637: ST_TO_ADDR
// break ;
92638: GO 92642
// end ;
92640: GO 92593
92642: POP
92643: POP
// if not side then
92644: LD_VAR 0 3
92648: NOT
92649: IFFALSE 92653
// exit ;
92651: GO 92698
// for i := 1 to tmp do
92653: LD_ADDR_VAR 0 1
92657: PUSH
92658: DOUBLE
92659: LD_INT 1
92661: DEC
92662: ST_TO_ADDR
92663: LD_VAR 0 2
92667: PUSH
92668: FOR_TO
92669: IFFALSE 92696
// if Prob ( 60 ) then
92671: LD_INT 60
92673: PPUSH
92674: CALL_OW 13
92678: IFFALSE 92694
// SetSide ( i , side ) ;
92680: LD_VAR 0 1
92684: PPUSH
92685: LD_VAR 0 3
92689: PPUSH
92690: CALL_OW 235
92694: GO 92668
92696: POP
92697: POP
// end ;
92698: PPOPN 3
92700: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
92701: LD_EXP 90
92705: PUSH
92706: LD_EXP 103
92710: AND
92711: IFFALSE 92830
92713: GO 92715
92715: DISABLE
92716: LD_INT 0
92718: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
92719: LD_ADDR_VAR 0 1
92723: PUSH
92724: LD_INT 22
92726: PUSH
92727: LD_OWVAR 2
92731: PUSH
92732: EMPTY
92733: LIST
92734: LIST
92735: PUSH
92736: LD_INT 21
92738: PUSH
92739: LD_INT 1
92741: PUSH
92742: EMPTY
92743: LIST
92744: LIST
92745: PUSH
92746: LD_INT 3
92748: PUSH
92749: LD_INT 23
92751: PUSH
92752: LD_INT 0
92754: PUSH
92755: EMPTY
92756: LIST
92757: LIST
92758: PUSH
92759: EMPTY
92760: LIST
92761: LIST
92762: PUSH
92763: EMPTY
92764: LIST
92765: LIST
92766: LIST
92767: PPUSH
92768: CALL_OW 69
92772: PUSH
92773: FOR_IN
92774: IFFALSE 92828
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
92776: LD_VAR 0 1
92780: PPUSH
92781: CALL_OW 257
92785: PUSH
92786: LD_INT 1
92788: PUSH
92789: LD_INT 2
92791: PUSH
92792: LD_INT 3
92794: PUSH
92795: LD_INT 4
92797: PUSH
92798: EMPTY
92799: LIST
92800: LIST
92801: LIST
92802: LIST
92803: IN
92804: IFFALSE 92826
// SetClass ( un , rand ( 1 , 4 ) ) ;
92806: LD_VAR 0 1
92810: PPUSH
92811: LD_INT 1
92813: PPUSH
92814: LD_INT 4
92816: PPUSH
92817: CALL_OW 12
92821: PPUSH
92822: CALL_OW 336
92826: GO 92773
92828: POP
92829: POP
// end ;
92830: PPOPN 1
92832: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
92833: LD_EXP 90
92837: PUSH
92838: LD_EXP 102
92842: AND
92843: IFFALSE 92922
92845: GO 92847
92847: DISABLE
92848: LD_INT 0
92850: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
92851: LD_ADDR_VAR 0 1
92855: PUSH
92856: LD_INT 22
92858: PUSH
92859: LD_OWVAR 2
92863: PUSH
92864: EMPTY
92865: LIST
92866: LIST
92867: PUSH
92868: LD_INT 21
92870: PUSH
92871: LD_INT 3
92873: PUSH
92874: EMPTY
92875: LIST
92876: LIST
92877: PUSH
92878: EMPTY
92879: LIST
92880: LIST
92881: PPUSH
92882: CALL_OW 69
92886: ST_TO_ADDR
// if not tmp then
92887: LD_VAR 0 1
92891: NOT
92892: IFFALSE 92896
// exit ;
92894: GO 92922
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
92896: LD_VAR 0 1
92900: PUSH
92901: LD_INT 1
92903: PPUSH
92904: LD_VAR 0 1
92908: PPUSH
92909: CALL_OW 12
92913: ARRAY
92914: PPUSH
92915: LD_INT 100
92917: PPUSH
92918: CALL_OW 234
// end ;
92922: PPOPN 1
92924: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
92925: LD_EXP 90
92929: PUSH
92930: LD_EXP 104
92934: AND
92935: IFFALSE 93033
92937: GO 92939
92939: DISABLE
92940: LD_INT 0
92942: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
92943: LD_ADDR_VAR 0 1
92947: PUSH
92948: LD_INT 22
92950: PUSH
92951: LD_OWVAR 2
92955: PUSH
92956: EMPTY
92957: LIST
92958: LIST
92959: PUSH
92960: LD_INT 21
92962: PUSH
92963: LD_INT 1
92965: PUSH
92966: EMPTY
92967: LIST
92968: LIST
92969: PUSH
92970: EMPTY
92971: LIST
92972: LIST
92973: PPUSH
92974: CALL_OW 69
92978: ST_TO_ADDR
// if not tmp then
92979: LD_VAR 0 1
92983: NOT
92984: IFFALSE 92988
// exit ;
92986: GO 93033
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
92988: LD_VAR 0 1
92992: PUSH
92993: LD_INT 1
92995: PPUSH
92996: LD_VAR 0 1
93000: PPUSH
93001: CALL_OW 12
93005: ARRAY
93006: PPUSH
93007: LD_INT 1
93009: PPUSH
93010: LD_INT 4
93012: PPUSH
93013: CALL_OW 12
93017: PPUSH
93018: LD_INT 3000
93020: PPUSH
93021: LD_INT 9000
93023: PPUSH
93024: CALL_OW 12
93028: PPUSH
93029: CALL_OW 492
// end ;
93033: PPOPN 1
93035: END
// every 0 0$1 trigger StreamModeActive and sDepot do
93036: LD_EXP 90
93040: PUSH
93041: LD_EXP 105
93045: AND
93046: IFFALSE 93066
93048: GO 93050
93050: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
93051: LD_INT 1
93053: PPUSH
93054: LD_OWVAR 2
93058: PPUSH
93059: LD_INT 0
93061: PPUSH
93062: CALL_OW 324
93066: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
93067: LD_EXP 90
93071: PUSH
93072: LD_EXP 106
93076: AND
93077: IFFALSE 93160
93079: GO 93081
93081: DISABLE
93082: LD_INT 0
93084: PPUSH
93085: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
93086: LD_ADDR_VAR 0 2
93090: PUSH
93091: LD_INT 22
93093: PUSH
93094: LD_OWVAR 2
93098: PUSH
93099: EMPTY
93100: LIST
93101: LIST
93102: PUSH
93103: LD_INT 21
93105: PUSH
93106: LD_INT 3
93108: PUSH
93109: EMPTY
93110: LIST
93111: LIST
93112: PUSH
93113: EMPTY
93114: LIST
93115: LIST
93116: PPUSH
93117: CALL_OW 69
93121: ST_TO_ADDR
// if not tmp then
93122: LD_VAR 0 2
93126: NOT
93127: IFFALSE 93131
// exit ;
93129: GO 93160
// for i in tmp do
93131: LD_ADDR_VAR 0 1
93135: PUSH
93136: LD_VAR 0 2
93140: PUSH
93141: FOR_IN
93142: IFFALSE 93158
// SetBLevel ( i , 10 ) ;
93144: LD_VAR 0 1
93148: PPUSH
93149: LD_INT 10
93151: PPUSH
93152: CALL_OW 241
93156: GO 93141
93158: POP
93159: POP
// end ;
93160: PPOPN 2
93162: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
93163: LD_EXP 90
93167: PUSH
93168: LD_EXP 107
93172: AND
93173: IFFALSE 93284
93175: GO 93177
93177: DISABLE
93178: LD_INT 0
93180: PPUSH
93181: PPUSH
93182: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
93183: LD_ADDR_VAR 0 3
93187: PUSH
93188: LD_INT 22
93190: PUSH
93191: LD_OWVAR 2
93195: PUSH
93196: EMPTY
93197: LIST
93198: LIST
93199: PUSH
93200: LD_INT 25
93202: PUSH
93203: LD_INT 1
93205: PUSH
93206: EMPTY
93207: LIST
93208: LIST
93209: PUSH
93210: EMPTY
93211: LIST
93212: LIST
93213: PPUSH
93214: CALL_OW 69
93218: ST_TO_ADDR
// if not tmp then
93219: LD_VAR 0 3
93223: NOT
93224: IFFALSE 93228
// exit ;
93226: GO 93284
// un := tmp [ rand ( 1 , tmp ) ] ;
93228: LD_ADDR_VAR 0 2
93232: PUSH
93233: LD_VAR 0 3
93237: PUSH
93238: LD_INT 1
93240: PPUSH
93241: LD_VAR 0 3
93245: PPUSH
93246: CALL_OW 12
93250: ARRAY
93251: ST_TO_ADDR
// if Crawls ( un ) then
93252: LD_VAR 0 2
93256: PPUSH
93257: CALL_OW 318
93261: IFFALSE 93272
// ComWalk ( un ) ;
93263: LD_VAR 0 2
93267: PPUSH
93268: CALL_OW 138
// SetClass ( un , class_sniper ) ;
93272: LD_VAR 0 2
93276: PPUSH
93277: LD_INT 5
93279: PPUSH
93280: CALL_OW 336
// end ;
93284: PPOPN 3
93286: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
93287: LD_EXP 90
93291: PUSH
93292: LD_EXP 108
93296: AND
93297: PUSH
93298: LD_OWVAR 67
93302: PUSH
93303: LD_INT 3
93305: LESS
93306: AND
93307: IFFALSE 93326
93309: GO 93311
93311: DISABLE
// Difficulty := Difficulty + 1 ;
93312: LD_ADDR_OWVAR 67
93316: PUSH
93317: LD_OWVAR 67
93321: PUSH
93322: LD_INT 1
93324: PLUS
93325: ST_TO_ADDR
93326: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
93327: LD_EXP 90
93331: PUSH
93332: LD_EXP 109
93336: AND
93337: IFFALSE 93440
93339: GO 93341
93341: DISABLE
93342: LD_INT 0
93344: PPUSH
// begin for i := 1 to 5 do
93345: LD_ADDR_VAR 0 1
93349: PUSH
93350: DOUBLE
93351: LD_INT 1
93353: DEC
93354: ST_TO_ADDR
93355: LD_INT 5
93357: PUSH
93358: FOR_TO
93359: IFFALSE 93438
// begin uc_nation := nation_nature ;
93361: LD_ADDR_OWVAR 21
93365: PUSH
93366: LD_INT 0
93368: ST_TO_ADDR
// uc_side := 0 ;
93369: LD_ADDR_OWVAR 20
93373: PUSH
93374: LD_INT 0
93376: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
93377: LD_ADDR_OWVAR 29
93381: PUSH
93382: LD_INT 12
93384: PUSH
93385: LD_INT 12
93387: PUSH
93388: EMPTY
93389: LIST
93390: LIST
93391: ST_TO_ADDR
// hc_agressivity := 20 ;
93392: LD_ADDR_OWVAR 35
93396: PUSH
93397: LD_INT 20
93399: ST_TO_ADDR
// hc_class := class_tiger ;
93400: LD_ADDR_OWVAR 28
93404: PUSH
93405: LD_INT 14
93407: ST_TO_ADDR
// hc_gallery :=  ;
93408: LD_ADDR_OWVAR 33
93412: PUSH
93413: LD_STRING 
93415: ST_TO_ADDR
// hc_name :=  ;
93416: LD_ADDR_OWVAR 26
93420: PUSH
93421: LD_STRING 
93423: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
93424: CALL_OW 44
93428: PPUSH
93429: LD_INT 0
93431: PPUSH
93432: CALL_OW 51
// end ;
93436: GO 93358
93438: POP
93439: POP
// end ;
93440: PPOPN 1
93442: END
// every 0 0$1 trigger StreamModeActive and sBomb do
93443: LD_EXP 90
93447: PUSH
93448: LD_EXP 110
93452: AND
93453: IFFALSE 93462
93455: GO 93457
93457: DISABLE
// StreamSibBomb ;
93458: CALL 93463 0 0
93462: END
// export function StreamSibBomb ; var i , x , y ; begin
93463: LD_INT 0
93465: PPUSH
93466: PPUSH
93467: PPUSH
93468: PPUSH
// result := false ;
93469: LD_ADDR_VAR 0 1
93473: PUSH
93474: LD_INT 0
93476: ST_TO_ADDR
// for i := 1 to 16 do
93477: LD_ADDR_VAR 0 2
93481: PUSH
93482: DOUBLE
93483: LD_INT 1
93485: DEC
93486: ST_TO_ADDR
93487: LD_INT 16
93489: PUSH
93490: FOR_TO
93491: IFFALSE 93690
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
93493: LD_ADDR_VAR 0 3
93497: PUSH
93498: LD_INT 10
93500: PUSH
93501: LD_INT 20
93503: PUSH
93504: LD_INT 30
93506: PUSH
93507: LD_INT 40
93509: PUSH
93510: LD_INT 50
93512: PUSH
93513: LD_INT 60
93515: PUSH
93516: LD_INT 70
93518: PUSH
93519: LD_INT 80
93521: PUSH
93522: LD_INT 90
93524: PUSH
93525: LD_INT 100
93527: PUSH
93528: LD_INT 110
93530: PUSH
93531: LD_INT 120
93533: PUSH
93534: LD_INT 130
93536: PUSH
93537: LD_INT 140
93539: PUSH
93540: LD_INT 150
93542: PUSH
93543: EMPTY
93544: LIST
93545: LIST
93546: LIST
93547: LIST
93548: LIST
93549: LIST
93550: LIST
93551: LIST
93552: LIST
93553: LIST
93554: LIST
93555: LIST
93556: LIST
93557: LIST
93558: LIST
93559: PUSH
93560: LD_INT 1
93562: PPUSH
93563: LD_INT 15
93565: PPUSH
93566: CALL_OW 12
93570: ARRAY
93571: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
93572: LD_ADDR_VAR 0 4
93576: PUSH
93577: LD_INT 10
93579: PUSH
93580: LD_INT 20
93582: PUSH
93583: LD_INT 30
93585: PUSH
93586: LD_INT 40
93588: PUSH
93589: LD_INT 50
93591: PUSH
93592: LD_INT 60
93594: PUSH
93595: LD_INT 70
93597: PUSH
93598: LD_INT 80
93600: PUSH
93601: LD_INT 90
93603: PUSH
93604: LD_INT 100
93606: PUSH
93607: LD_INT 110
93609: PUSH
93610: LD_INT 120
93612: PUSH
93613: LD_INT 130
93615: PUSH
93616: LD_INT 140
93618: PUSH
93619: LD_INT 150
93621: PUSH
93622: EMPTY
93623: LIST
93624: LIST
93625: LIST
93626: LIST
93627: LIST
93628: LIST
93629: LIST
93630: LIST
93631: LIST
93632: LIST
93633: LIST
93634: LIST
93635: LIST
93636: LIST
93637: LIST
93638: PUSH
93639: LD_INT 1
93641: PPUSH
93642: LD_INT 15
93644: PPUSH
93645: CALL_OW 12
93649: ARRAY
93650: ST_TO_ADDR
// if ValidHex ( x , y ) then
93651: LD_VAR 0 3
93655: PPUSH
93656: LD_VAR 0 4
93660: PPUSH
93661: CALL_OW 488
93665: IFFALSE 93688
// begin result := [ x , y ] ;
93667: LD_ADDR_VAR 0 1
93671: PUSH
93672: LD_VAR 0 3
93676: PUSH
93677: LD_VAR 0 4
93681: PUSH
93682: EMPTY
93683: LIST
93684: LIST
93685: ST_TO_ADDR
// break ;
93686: GO 93690
// end ; end ;
93688: GO 93490
93690: POP
93691: POP
// if result then
93692: LD_VAR 0 1
93696: IFFALSE 93756
// begin ToLua ( playSibBomb() ) ;
93698: LD_STRING playSibBomb()
93700: PPUSH
93701: CALL_OW 559
// wait ( 0 0$14 ) ;
93705: LD_INT 490
93707: PPUSH
93708: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
93712: LD_VAR 0 1
93716: PUSH
93717: LD_INT 1
93719: ARRAY
93720: PPUSH
93721: LD_VAR 0 1
93725: PUSH
93726: LD_INT 2
93728: ARRAY
93729: PPUSH
93730: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
93734: LD_VAR 0 1
93738: PUSH
93739: LD_INT 1
93741: ARRAY
93742: PPUSH
93743: LD_VAR 0 1
93747: PUSH
93748: LD_INT 2
93750: ARRAY
93751: PPUSH
93752: CALL_OW 429
// end ; end ;
93756: LD_VAR 0 1
93760: RET
// every 0 0$1 trigger StreamModeActive and sReset do
93761: LD_EXP 90
93765: PUSH
93766: LD_EXP 112
93770: AND
93771: IFFALSE 93783
93773: GO 93775
93775: DISABLE
// YouLost (  ) ;
93776: LD_STRING 
93778: PPUSH
93779: CALL_OW 104
93783: END
// every 0 0$1 trigger StreamModeActive and sFog do
93784: LD_EXP 90
93788: PUSH
93789: LD_EXP 111
93793: AND
93794: IFFALSE 93808
93796: GO 93798
93798: DISABLE
// FogOff ( your_side ) ;
93799: LD_OWVAR 2
93803: PPUSH
93804: CALL_OW 344
93808: END
// every 0 0$1 trigger StreamModeActive and sSun do
93809: LD_EXP 90
93813: PUSH
93814: LD_EXP 113
93818: AND
93819: IFFALSE 93847
93821: GO 93823
93823: DISABLE
// begin solar_recharge_percent := 0 ;
93824: LD_ADDR_OWVAR 79
93828: PUSH
93829: LD_INT 0
93831: ST_TO_ADDR
// wait ( 5 5$00 ) ;
93832: LD_INT 10500
93834: PPUSH
93835: CALL_OW 67
// solar_recharge_percent := 100 ;
93839: LD_ADDR_OWVAR 79
93843: PUSH
93844: LD_INT 100
93846: ST_TO_ADDR
// end ;
93847: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
93848: LD_EXP 90
93852: PUSH
93853: LD_EXP 114
93857: AND
93858: IFFALSE 94097
93860: GO 93862
93862: DISABLE
93863: LD_INT 0
93865: PPUSH
93866: PPUSH
93867: PPUSH
// begin tmp := [ ] ;
93868: LD_ADDR_VAR 0 3
93872: PUSH
93873: EMPTY
93874: ST_TO_ADDR
// for i := 1 to 6 do
93875: LD_ADDR_VAR 0 1
93879: PUSH
93880: DOUBLE
93881: LD_INT 1
93883: DEC
93884: ST_TO_ADDR
93885: LD_INT 6
93887: PUSH
93888: FOR_TO
93889: IFFALSE 93994
// begin uc_nation := nation_nature ;
93891: LD_ADDR_OWVAR 21
93895: PUSH
93896: LD_INT 0
93898: ST_TO_ADDR
// uc_side := 0 ;
93899: LD_ADDR_OWVAR 20
93903: PUSH
93904: LD_INT 0
93906: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
93907: LD_ADDR_OWVAR 29
93911: PUSH
93912: LD_INT 12
93914: PUSH
93915: LD_INT 12
93917: PUSH
93918: EMPTY
93919: LIST
93920: LIST
93921: ST_TO_ADDR
// hc_agressivity := 20 ;
93922: LD_ADDR_OWVAR 35
93926: PUSH
93927: LD_INT 20
93929: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
93930: LD_ADDR_OWVAR 28
93934: PUSH
93935: LD_INT 17
93937: ST_TO_ADDR
// hc_gallery :=  ;
93938: LD_ADDR_OWVAR 33
93942: PUSH
93943: LD_STRING 
93945: ST_TO_ADDR
// hc_name :=  ;
93946: LD_ADDR_OWVAR 26
93950: PUSH
93951: LD_STRING 
93953: ST_TO_ADDR
// un := CreateHuman ;
93954: LD_ADDR_VAR 0 2
93958: PUSH
93959: CALL_OW 44
93963: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
93964: LD_VAR 0 2
93968: PPUSH
93969: LD_INT 1
93971: PPUSH
93972: CALL_OW 51
// tmp := tmp ^ un ;
93976: LD_ADDR_VAR 0 3
93980: PUSH
93981: LD_VAR 0 3
93985: PUSH
93986: LD_VAR 0 2
93990: ADD
93991: ST_TO_ADDR
// end ;
93992: GO 93888
93994: POP
93995: POP
// repeat wait ( 0 0$1 ) ;
93996: LD_INT 35
93998: PPUSH
93999: CALL_OW 67
// for un in tmp do
94003: LD_ADDR_VAR 0 2
94007: PUSH
94008: LD_VAR 0 3
94012: PUSH
94013: FOR_IN
94014: IFFALSE 94088
// begin if IsDead ( un ) then
94016: LD_VAR 0 2
94020: PPUSH
94021: CALL_OW 301
94025: IFFALSE 94045
// begin tmp := tmp diff un ;
94027: LD_ADDR_VAR 0 3
94031: PUSH
94032: LD_VAR 0 3
94036: PUSH
94037: LD_VAR 0 2
94041: DIFF
94042: ST_TO_ADDR
// continue ;
94043: GO 94013
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
94045: LD_VAR 0 2
94049: PPUSH
94050: LD_INT 3
94052: PUSH
94053: LD_INT 22
94055: PUSH
94056: LD_INT 0
94058: PUSH
94059: EMPTY
94060: LIST
94061: LIST
94062: PUSH
94063: EMPTY
94064: LIST
94065: LIST
94066: PPUSH
94067: CALL_OW 69
94071: PPUSH
94072: LD_VAR 0 2
94076: PPUSH
94077: CALL_OW 74
94081: PPUSH
94082: CALL_OW 115
// end ;
94086: GO 94013
94088: POP
94089: POP
// until not tmp ;
94090: LD_VAR 0 3
94094: NOT
94095: IFFALSE 93996
// end ;
94097: PPOPN 3
94099: END
// every 0 0$1 trigger StreamModeActive and sTroll do
94100: LD_EXP 90
94104: PUSH
94105: LD_EXP 115
94109: AND
94110: IFFALSE 94164
94112: GO 94114
94114: DISABLE
// begin ToLua ( displayTroll(); ) ;
94115: LD_STRING displayTroll();
94117: PPUSH
94118: CALL_OW 559
// wait ( 3 3$00 ) ;
94122: LD_INT 6300
94124: PPUSH
94125: CALL_OW 67
// ToLua ( hideTroll(); ) ;
94129: LD_STRING hideTroll();
94131: PPUSH
94132: CALL_OW 559
// wait ( 1 1$00 ) ;
94136: LD_INT 2100
94138: PPUSH
94139: CALL_OW 67
// ToLua ( displayTroll(); ) ;
94143: LD_STRING displayTroll();
94145: PPUSH
94146: CALL_OW 559
// wait ( 1 1$00 ) ;
94150: LD_INT 2100
94152: PPUSH
94153: CALL_OW 67
// ToLua ( hideTroll(); ) ;
94157: LD_STRING hideTroll();
94159: PPUSH
94160: CALL_OW 559
// end ;
94164: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
94165: LD_EXP 90
94169: PUSH
94170: LD_EXP 116
94174: AND
94175: IFFALSE 94238
94177: GO 94179
94179: DISABLE
94180: LD_INT 0
94182: PPUSH
// begin p := 0 ;
94183: LD_ADDR_VAR 0 1
94187: PUSH
94188: LD_INT 0
94190: ST_TO_ADDR
// repeat game_speed := 1 ;
94191: LD_ADDR_OWVAR 65
94195: PUSH
94196: LD_INT 1
94198: ST_TO_ADDR
// wait ( 0 0$1 ) ;
94199: LD_INT 35
94201: PPUSH
94202: CALL_OW 67
// p := p + 1 ;
94206: LD_ADDR_VAR 0 1
94210: PUSH
94211: LD_VAR 0 1
94215: PUSH
94216: LD_INT 1
94218: PLUS
94219: ST_TO_ADDR
// until p >= 60 ;
94220: LD_VAR 0 1
94224: PUSH
94225: LD_INT 60
94227: GREATEREQUAL
94228: IFFALSE 94191
// game_speed := 4 ;
94230: LD_ADDR_OWVAR 65
94234: PUSH
94235: LD_INT 4
94237: ST_TO_ADDR
// end ;
94238: PPOPN 1
94240: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
94241: LD_EXP 90
94245: PUSH
94246: LD_EXP 117
94250: AND
94251: IFFALSE 94397
94253: GO 94255
94255: DISABLE
94256: LD_INT 0
94258: PPUSH
94259: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
94260: LD_ADDR_VAR 0 1
94264: PUSH
94265: LD_INT 22
94267: PUSH
94268: LD_OWVAR 2
94272: PUSH
94273: EMPTY
94274: LIST
94275: LIST
94276: PUSH
94277: LD_INT 2
94279: PUSH
94280: LD_INT 30
94282: PUSH
94283: LD_INT 0
94285: PUSH
94286: EMPTY
94287: LIST
94288: LIST
94289: PUSH
94290: LD_INT 30
94292: PUSH
94293: LD_INT 1
94295: PUSH
94296: EMPTY
94297: LIST
94298: LIST
94299: PUSH
94300: EMPTY
94301: LIST
94302: LIST
94303: LIST
94304: PUSH
94305: EMPTY
94306: LIST
94307: LIST
94308: PPUSH
94309: CALL_OW 69
94313: ST_TO_ADDR
// if not depot then
94314: LD_VAR 0 1
94318: NOT
94319: IFFALSE 94323
// exit ;
94321: GO 94397
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
94323: LD_ADDR_VAR 0 2
94327: PUSH
94328: LD_VAR 0 1
94332: PUSH
94333: LD_INT 1
94335: PPUSH
94336: LD_VAR 0 1
94340: PPUSH
94341: CALL_OW 12
94345: ARRAY
94346: PPUSH
94347: CALL_OW 274
94351: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
94352: LD_VAR 0 2
94356: PPUSH
94357: LD_INT 1
94359: PPUSH
94360: LD_INT 0
94362: PPUSH
94363: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
94367: LD_VAR 0 2
94371: PPUSH
94372: LD_INT 2
94374: PPUSH
94375: LD_INT 0
94377: PPUSH
94378: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
94382: LD_VAR 0 2
94386: PPUSH
94387: LD_INT 3
94389: PPUSH
94390: LD_INT 0
94392: PPUSH
94393: CALL_OW 277
// end ;
94397: PPOPN 2
94399: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
94400: LD_EXP 90
94404: PUSH
94405: LD_EXP 118
94409: AND
94410: IFFALSE 94507
94412: GO 94414
94414: DISABLE
94415: LD_INT 0
94417: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
94418: LD_ADDR_VAR 0 1
94422: PUSH
94423: LD_INT 22
94425: PUSH
94426: LD_OWVAR 2
94430: PUSH
94431: EMPTY
94432: LIST
94433: LIST
94434: PUSH
94435: LD_INT 21
94437: PUSH
94438: LD_INT 1
94440: PUSH
94441: EMPTY
94442: LIST
94443: LIST
94444: PUSH
94445: LD_INT 3
94447: PUSH
94448: LD_INT 23
94450: PUSH
94451: LD_INT 0
94453: PUSH
94454: EMPTY
94455: LIST
94456: LIST
94457: PUSH
94458: EMPTY
94459: LIST
94460: LIST
94461: PUSH
94462: EMPTY
94463: LIST
94464: LIST
94465: LIST
94466: PPUSH
94467: CALL_OW 69
94471: ST_TO_ADDR
// if not tmp then
94472: LD_VAR 0 1
94476: NOT
94477: IFFALSE 94481
// exit ;
94479: GO 94507
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
94481: LD_VAR 0 1
94485: PUSH
94486: LD_INT 1
94488: PPUSH
94489: LD_VAR 0 1
94493: PPUSH
94494: CALL_OW 12
94498: ARRAY
94499: PPUSH
94500: LD_INT 200
94502: PPUSH
94503: CALL_OW 234
// end ;
94507: PPOPN 1
94509: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
94510: LD_EXP 90
94514: PUSH
94515: LD_EXP 119
94519: AND
94520: IFFALSE 94599
94522: GO 94524
94524: DISABLE
94525: LD_INT 0
94527: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
94528: LD_ADDR_VAR 0 1
94532: PUSH
94533: LD_INT 22
94535: PUSH
94536: LD_OWVAR 2
94540: PUSH
94541: EMPTY
94542: LIST
94543: LIST
94544: PUSH
94545: LD_INT 21
94547: PUSH
94548: LD_INT 2
94550: PUSH
94551: EMPTY
94552: LIST
94553: LIST
94554: PUSH
94555: EMPTY
94556: LIST
94557: LIST
94558: PPUSH
94559: CALL_OW 69
94563: ST_TO_ADDR
// if not tmp then
94564: LD_VAR 0 1
94568: NOT
94569: IFFALSE 94573
// exit ;
94571: GO 94599
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
94573: LD_VAR 0 1
94577: PUSH
94578: LD_INT 1
94580: PPUSH
94581: LD_VAR 0 1
94585: PPUSH
94586: CALL_OW 12
94590: ARRAY
94591: PPUSH
94592: LD_INT 60
94594: PPUSH
94595: CALL_OW 234
// end ;
94599: PPOPN 1
94601: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
94602: LD_EXP 90
94606: PUSH
94607: LD_EXP 120
94611: AND
94612: IFFALSE 94711
94614: GO 94616
94616: DISABLE
94617: LD_INT 0
94619: PPUSH
94620: PPUSH
// begin enable ;
94621: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
94622: LD_ADDR_VAR 0 1
94626: PUSH
94627: LD_INT 22
94629: PUSH
94630: LD_OWVAR 2
94634: PUSH
94635: EMPTY
94636: LIST
94637: LIST
94638: PUSH
94639: LD_INT 61
94641: PUSH
94642: EMPTY
94643: LIST
94644: PUSH
94645: LD_INT 33
94647: PUSH
94648: LD_INT 2
94650: PUSH
94651: EMPTY
94652: LIST
94653: LIST
94654: PUSH
94655: EMPTY
94656: LIST
94657: LIST
94658: LIST
94659: PPUSH
94660: CALL_OW 69
94664: ST_TO_ADDR
// if not tmp then
94665: LD_VAR 0 1
94669: NOT
94670: IFFALSE 94674
// exit ;
94672: GO 94711
// for i in tmp do
94674: LD_ADDR_VAR 0 2
94678: PUSH
94679: LD_VAR 0 1
94683: PUSH
94684: FOR_IN
94685: IFFALSE 94709
// if IsControledBy ( i ) then
94687: LD_VAR 0 2
94691: PPUSH
94692: CALL_OW 312
94696: IFFALSE 94707
// ComUnlink ( i ) ;
94698: LD_VAR 0 2
94702: PPUSH
94703: CALL_OW 136
94707: GO 94684
94709: POP
94710: POP
// end ;
94711: PPOPN 2
94713: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
94714: LD_EXP 90
94718: PUSH
94719: LD_EXP 121
94723: AND
94724: IFFALSE 94864
94726: GO 94728
94728: DISABLE
94729: LD_INT 0
94731: PPUSH
94732: PPUSH
// begin ToLua ( displayPowell(); ) ;
94733: LD_STRING displayPowell();
94735: PPUSH
94736: CALL_OW 559
// uc_side := 0 ;
94740: LD_ADDR_OWVAR 20
94744: PUSH
94745: LD_INT 0
94747: ST_TO_ADDR
// uc_nation := 2 ;
94748: LD_ADDR_OWVAR 21
94752: PUSH
94753: LD_INT 2
94755: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
94756: LD_ADDR_OWVAR 37
94760: PUSH
94761: LD_INT 14
94763: ST_TO_ADDR
// vc_engine := engine_siberite ;
94764: LD_ADDR_OWVAR 39
94768: PUSH
94769: LD_INT 3
94771: ST_TO_ADDR
// vc_control := control_apeman ;
94772: LD_ADDR_OWVAR 38
94776: PUSH
94777: LD_INT 5
94779: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
94780: LD_ADDR_OWVAR 40
94784: PUSH
94785: LD_INT 29
94787: ST_TO_ADDR
// un := CreateVehicle ;
94788: LD_ADDR_VAR 0 2
94792: PUSH
94793: CALL_OW 45
94797: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
94798: LD_VAR 0 2
94802: PPUSH
94803: LD_INT 1
94805: PPUSH
94806: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
94810: LD_INT 35
94812: PPUSH
94813: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
94817: LD_VAR 0 2
94821: PPUSH
94822: LD_INT 22
94824: PUSH
94825: LD_OWVAR 2
94829: PUSH
94830: EMPTY
94831: LIST
94832: LIST
94833: PPUSH
94834: CALL_OW 69
94838: PPUSH
94839: LD_VAR 0 2
94843: PPUSH
94844: CALL_OW 74
94848: PPUSH
94849: CALL_OW 115
// until IsDead ( un ) ;
94853: LD_VAR 0 2
94857: PPUSH
94858: CALL_OW 301
94862: IFFALSE 94810
// end ;
94864: PPOPN 2
94866: END
// every 0 0$1 trigger StreamModeActive and sStu do
94867: LD_EXP 90
94871: PUSH
94872: LD_EXP 129
94876: AND
94877: IFFALSE 94893
94879: GO 94881
94881: DISABLE
// begin ToLua ( displayStucuk(); ) ;
94882: LD_STRING displayStucuk();
94884: PPUSH
94885: CALL_OW 559
// ResetFog ;
94889: CALL_OW 335
// end ;
94893: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
94894: LD_EXP 90
94898: PUSH
94899: LD_EXP 122
94903: AND
94904: IFFALSE 95045
94906: GO 94908
94908: DISABLE
94909: LD_INT 0
94911: PPUSH
94912: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
94913: LD_ADDR_VAR 0 2
94917: PUSH
94918: LD_INT 22
94920: PUSH
94921: LD_OWVAR 2
94925: PUSH
94926: EMPTY
94927: LIST
94928: LIST
94929: PUSH
94930: LD_INT 21
94932: PUSH
94933: LD_INT 1
94935: PUSH
94936: EMPTY
94937: LIST
94938: LIST
94939: PUSH
94940: EMPTY
94941: LIST
94942: LIST
94943: PPUSH
94944: CALL_OW 69
94948: ST_TO_ADDR
// if not tmp then
94949: LD_VAR 0 2
94953: NOT
94954: IFFALSE 94958
// exit ;
94956: GO 95045
// un := tmp [ rand ( 1 , tmp ) ] ;
94958: LD_ADDR_VAR 0 1
94962: PUSH
94963: LD_VAR 0 2
94967: PUSH
94968: LD_INT 1
94970: PPUSH
94971: LD_VAR 0 2
94975: PPUSH
94976: CALL_OW 12
94980: ARRAY
94981: ST_TO_ADDR
// SetSide ( un , 0 ) ;
94982: LD_VAR 0 1
94986: PPUSH
94987: LD_INT 0
94989: PPUSH
94990: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
94994: LD_VAR 0 1
94998: PPUSH
94999: LD_OWVAR 3
95003: PUSH
95004: LD_VAR 0 1
95008: DIFF
95009: PPUSH
95010: LD_VAR 0 1
95014: PPUSH
95015: CALL_OW 74
95019: PPUSH
95020: CALL_OW 115
// wait ( 0 0$20 ) ;
95024: LD_INT 700
95026: PPUSH
95027: CALL_OW 67
// SetSide ( un , your_side ) ;
95031: LD_VAR 0 1
95035: PPUSH
95036: LD_OWVAR 2
95040: PPUSH
95041: CALL_OW 235
// end ;
95045: PPOPN 2
95047: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
95048: LD_EXP 90
95052: PUSH
95053: LD_EXP 123
95057: AND
95058: IFFALSE 95164
95060: GO 95062
95062: DISABLE
95063: LD_INT 0
95065: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
95066: LD_ADDR_VAR 0 1
95070: PUSH
95071: LD_INT 22
95073: PUSH
95074: LD_OWVAR 2
95078: PUSH
95079: EMPTY
95080: LIST
95081: LIST
95082: PUSH
95083: LD_INT 2
95085: PUSH
95086: LD_INT 30
95088: PUSH
95089: LD_INT 0
95091: PUSH
95092: EMPTY
95093: LIST
95094: LIST
95095: PUSH
95096: LD_INT 30
95098: PUSH
95099: LD_INT 1
95101: PUSH
95102: EMPTY
95103: LIST
95104: LIST
95105: PUSH
95106: EMPTY
95107: LIST
95108: LIST
95109: LIST
95110: PUSH
95111: EMPTY
95112: LIST
95113: LIST
95114: PPUSH
95115: CALL_OW 69
95119: ST_TO_ADDR
// if not depot then
95120: LD_VAR 0 1
95124: NOT
95125: IFFALSE 95129
// exit ;
95127: GO 95164
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
95129: LD_VAR 0 1
95133: PUSH
95134: LD_INT 1
95136: ARRAY
95137: PPUSH
95138: CALL_OW 250
95142: PPUSH
95143: LD_VAR 0 1
95147: PUSH
95148: LD_INT 1
95150: ARRAY
95151: PPUSH
95152: CALL_OW 251
95156: PPUSH
95157: LD_INT 70
95159: PPUSH
95160: CALL_OW 495
// end ;
95164: PPOPN 1
95166: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
95167: LD_EXP 90
95171: PUSH
95172: LD_EXP 124
95176: AND
95177: IFFALSE 95388
95179: GO 95181
95181: DISABLE
95182: LD_INT 0
95184: PPUSH
95185: PPUSH
95186: PPUSH
95187: PPUSH
95188: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
95189: LD_ADDR_VAR 0 5
95193: PUSH
95194: LD_INT 22
95196: PUSH
95197: LD_OWVAR 2
95201: PUSH
95202: EMPTY
95203: LIST
95204: LIST
95205: PUSH
95206: LD_INT 21
95208: PUSH
95209: LD_INT 1
95211: PUSH
95212: EMPTY
95213: LIST
95214: LIST
95215: PUSH
95216: EMPTY
95217: LIST
95218: LIST
95219: PPUSH
95220: CALL_OW 69
95224: ST_TO_ADDR
// if not tmp then
95225: LD_VAR 0 5
95229: NOT
95230: IFFALSE 95234
// exit ;
95232: GO 95388
// for i in tmp do
95234: LD_ADDR_VAR 0 1
95238: PUSH
95239: LD_VAR 0 5
95243: PUSH
95244: FOR_IN
95245: IFFALSE 95386
// begin d := rand ( 0 , 5 ) ;
95247: LD_ADDR_VAR 0 4
95251: PUSH
95252: LD_INT 0
95254: PPUSH
95255: LD_INT 5
95257: PPUSH
95258: CALL_OW 12
95262: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
95263: LD_ADDR_VAR 0 2
95267: PUSH
95268: LD_VAR 0 1
95272: PPUSH
95273: CALL_OW 250
95277: PPUSH
95278: LD_VAR 0 4
95282: PPUSH
95283: LD_INT 3
95285: PPUSH
95286: LD_INT 12
95288: PPUSH
95289: CALL_OW 12
95293: PPUSH
95294: CALL_OW 272
95298: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
95299: LD_ADDR_VAR 0 3
95303: PUSH
95304: LD_VAR 0 1
95308: PPUSH
95309: CALL_OW 251
95313: PPUSH
95314: LD_VAR 0 4
95318: PPUSH
95319: LD_INT 3
95321: PPUSH
95322: LD_INT 12
95324: PPUSH
95325: CALL_OW 12
95329: PPUSH
95330: CALL_OW 273
95334: ST_TO_ADDR
// if ValidHex ( x , y ) then
95335: LD_VAR 0 2
95339: PPUSH
95340: LD_VAR 0 3
95344: PPUSH
95345: CALL_OW 488
95349: IFFALSE 95384
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
95351: LD_VAR 0 1
95355: PPUSH
95356: LD_VAR 0 2
95360: PPUSH
95361: LD_VAR 0 3
95365: PPUSH
95366: LD_INT 3
95368: PPUSH
95369: LD_INT 6
95371: PPUSH
95372: CALL_OW 12
95376: PPUSH
95377: LD_INT 1
95379: PPUSH
95380: CALL_OW 483
// end ;
95384: GO 95244
95386: POP
95387: POP
// end ;
95388: PPOPN 5
95390: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
95391: LD_EXP 90
95395: PUSH
95396: LD_EXP 125
95400: AND
95401: IFFALSE 95495
95403: GO 95405
95405: DISABLE
95406: LD_INT 0
95408: PPUSH
95409: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
95410: LD_ADDR_VAR 0 2
95414: PUSH
95415: LD_INT 22
95417: PUSH
95418: LD_OWVAR 2
95422: PUSH
95423: EMPTY
95424: LIST
95425: LIST
95426: PUSH
95427: LD_INT 32
95429: PUSH
95430: LD_INT 1
95432: PUSH
95433: EMPTY
95434: LIST
95435: LIST
95436: PUSH
95437: LD_INT 21
95439: PUSH
95440: LD_INT 2
95442: PUSH
95443: EMPTY
95444: LIST
95445: LIST
95446: PUSH
95447: EMPTY
95448: LIST
95449: LIST
95450: LIST
95451: PPUSH
95452: CALL_OW 69
95456: ST_TO_ADDR
// if not tmp then
95457: LD_VAR 0 2
95461: NOT
95462: IFFALSE 95466
// exit ;
95464: GO 95495
// for i in tmp do
95466: LD_ADDR_VAR 0 1
95470: PUSH
95471: LD_VAR 0 2
95475: PUSH
95476: FOR_IN
95477: IFFALSE 95493
// SetFuel ( i , 0 ) ;
95479: LD_VAR 0 1
95483: PPUSH
95484: LD_INT 0
95486: PPUSH
95487: CALL_OW 240
95491: GO 95476
95493: POP
95494: POP
// end ;
95495: PPOPN 2
95497: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
95498: LD_EXP 90
95502: PUSH
95503: LD_EXP 126
95507: AND
95508: IFFALSE 95574
95510: GO 95512
95512: DISABLE
95513: LD_INT 0
95515: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
95516: LD_ADDR_VAR 0 1
95520: PUSH
95521: LD_INT 22
95523: PUSH
95524: LD_OWVAR 2
95528: PUSH
95529: EMPTY
95530: LIST
95531: LIST
95532: PUSH
95533: LD_INT 30
95535: PUSH
95536: LD_INT 29
95538: PUSH
95539: EMPTY
95540: LIST
95541: LIST
95542: PUSH
95543: EMPTY
95544: LIST
95545: LIST
95546: PPUSH
95547: CALL_OW 69
95551: ST_TO_ADDR
// if not tmp then
95552: LD_VAR 0 1
95556: NOT
95557: IFFALSE 95561
// exit ;
95559: GO 95574
// DestroyUnit ( tmp [ 1 ] ) ;
95561: LD_VAR 0 1
95565: PUSH
95566: LD_INT 1
95568: ARRAY
95569: PPUSH
95570: CALL_OW 65
// end ;
95574: PPOPN 1
95576: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
95577: LD_EXP 90
95581: PUSH
95582: LD_EXP 128
95586: AND
95587: IFFALSE 95716
95589: GO 95591
95591: DISABLE
95592: LD_INT 0
95594: PPUSH
// begin uc_side := 0 ;
95595: LD_ADDR_OWVAR 20
95599: PUSH
95600: LD_INT 0
95602: ST_TO_ADDR
// uc_nation := nation_arabian ;
95603: LD_ADDR_OWVAR 21
95607: PUSH
95608: LD_INT 2
95610: ST_TO_ADDR
// hc_gallery :=  ;
95611: LD_ADDR_OWVAR 33
95615: PUSH
95616: LD_STRING 
95618: ST_TO_ADDR
// hc_name :=  ;
95619: LD_ADDR_OWVAR 26
95623: PUSH
95624: LD_STRING 
95626: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
95627: LD_INT 1
95629: PPUSH
95630: LD_INT 11
95632: PPUSH
95633: LD_INT 10
95635: PPUSH
95636: CALL_OW 380
// un := CreateHuman ;
95640: LD_ADDR_VAR 0 1
95644: PUSH
95645: CALL_OW 44
95649: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
95650: LD_VAR 0 1
95654: PPUSH
95655: LD_INT 1
95657: PPUSH
95658: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
95662: LD_INT 35
95664: PPUSH
95665: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
95669: LD_VAR 0 1
95673: PPUSH
95674: LD_INT 22
95676: PUSH
95677: LD_OWVAR 2
95681: PUSH
95682: EMPTY
95683: LIST
95684: LIST
95685: PPUSH
95686: CALL_OW 69
95690: PPUSH
95691: LD_VAR 0 1
95695: PPUSH
95696: CALL_OW 74
95700: PPUSH
95701: CALL_OW 115
// until IsDead ( un ) ;
95705: LD_VAR 0 1
95709: PPUSH
95710: CALL_OW 301
95714: IFFALSE 95662
// end ;
95716: PPOPN 1
95718: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
95719: LD_EXP 90
95723: PUSH
95724: LD_EXP 130
95728: AND
95729: IFFALSE 95741
95731: GO 95733
95733: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
95734: LD_STRING earthquake(getX(game), 0, 32)
95736: PPUSH
95737: CALL_OW 559
95741: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
95742: LD_EXP 90
95746: PUSH
95747: LD_EXP 131
95751: AND
95752: IFFALSE 95843
95754: GO 95756
95756: DISABLE
95757: LD_INT 0
95759: PPUSH
// begin enable ;
95760: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
95761: LD_ADDR_VAR 0 1
95765: PUSH
95766: LD_INT 22
95768: PUSH
95769: LD_OWVAR 2
95773: PUSH
95774: EMPTY
95775: LIST
95776: LIST
95777: PUSH
95778: LD_INT 21
95780: PUSH
95781: LD_INT 2
95783: PUSH
95784: EMPTY
95785: LIST
95786: LIST
95787: PUSH
95788: LD_INT 33
95790: PUSH
95791: LD_INT 3
95793: PUSH
95794: EMPTY
95795: LIST
95796: LIST
95797: PUSH
95798: EMPTY
95799: LIST
95800: LIST
95801: LIST
95802: PPUSH
95803: CALL_OW 69
95807: ST_TO_ADDR
// if not tmp then
95808: LD_VAR 0 1
95812: NOT
95813: IFFALSE 95817
// exit ;
95815: GO 95843
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
95817: LD_VAR 0 1
95821: PUSH
95822: LD_INT 1
95824: PPUSH
95825: LD_VAR 0 1
95829: PPUSH
95830: CALL_OW 12
95834: ARRAY
95835: PPUSH
95836: LD_INT 1
95838: PPUSH
95839: CALL_OW 234
// end ;
95843: PPOPN 1
95845: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
95846: LD_EXP 90
95850: PUSH
95851: LD_EXP 132
95855: AND
95856: IFFALSE 95997
95858: GO 95860
95860: DISABLE
95861: LD_INT 0
95863: PPUSH
95864: PPUSH
95865: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
95866: LD_ADDR_VAR 0 3
95870: PUSH
95871: LD_INT 22
95873: PUSH
95874: LD_OWVAR 2
95878: PUSH
95879: EMPTY
95880: LIST
95881: LIST
95882: PUSH
95883: LD_INT 25
95885: PUSH
95886: LD_INT 1
95888: PUSH
95889: EMPTY
95890: LIST
95891: LIST
95892: PUSH
95893: EMPTY
95894: LIST
95895: LIST
95896: PPUSH
95897: CALL_OW 69
95901: ST_TO_ADDR
// if not tmp then
95902: LD_VAR 0 3
95906: NOT
95907: IFFALSE 95911
// exit ;
95909: GO 95997
// un := tmp [ rand ( 1 , tmp ) ] ;
95911: LD_ADDR_VAR 0 2
95915: PUSH
95916: LD_VAR 0 3
95920: PUSH
95921: LD_INT 1
95923: PPUSH
95924: LD_VAR 0 3
95928: PPUSH
95929: CALL_OW 12
95933: ARRAY
95934: ST_TO_ADDR
// if Crawls ( un ) then
95935: LD_VAR 0 2
95939: PPUSH
95940: CALL_OW 318
95944: IFFALSE 95955
// ComWalk ( un ) ;
95946: LD_VAR 0 2
95950: PPUSH
95951: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
95955: LD_VAR 0 2
95959: PPUSH
95960: LD_INT 9
95962: PPUSH
95963: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
95967: LD_INT 28
95969: PPUSH
95970: LD_OWVAR 2
95974: PPUSH
95975: LD_INT 2
95977: PPUSH
95978: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
95982: LD_INT 29
95984: PPUSH
95985: LD_OWVAR 2
95989: PPUSH
95990: LD_INT 2
95992: PPUSH
95993: CALL_OW 322
// end ;
95997: PPOPN 3
95999: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
96000: LD_EXP 90
96004: PUSH
96005: LD_EXP 133
96009: AND
96010: IFFALSE 96121
96012: GO 96014
96014: DISABLE
96015: LD_INT 0
96017: PPUSH
96018: PPUSH
96019: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
96020: LD_ADDR_VAR 0 3
96024: PUSH
96025: LD_INT 22
96027: PUSH
96028: LD_OWVAR 2
96032: PUSH
96033: EMPTY
96034: LIST
96035: LIST
96036: PUSH
96037: LD_INT 25
96039: PUSH
96040: LD_INT 1
96042: PUSH
96043: EMPTY
96044: LIST
96045: LIST
96046: PUSH
96047: EMPTY
96048: LIST
96049: LIST
96050: PPUSH
96051: CALL_OW 69
96055: ST_TO_ADDR
// if not tmp then
96056: LD_VAR 0 3
96060: NOT
96061: IFFALSE 96065
// exit ;
96063: GO 96121
// un := tmp [ rand ( 1 , tmp ) ] ;
96065: LD_ADDR_VAR 0 2
96069: PUSH
96070: LD_VAR 0 3
96074: PUSH
96075: LD_INT 1
96077: PPUSH
96078: LD_VAR 0 3
96082: PPUSH
96083: CALL_OW 12
96087: ARRAY
96088: ST_TO_ADDR
// if Crawls ( un ) then
96089: LD_VAR 0 2
96093: PPUSH
96094: CALL_OW 318
96098: IFFALSE 96109
// ComWalk ( un ) ;
96100: LD_VAR 0 2
96104: PPUSH
96105: CALL_OW 138
// SetClass ( un , class_mortar ) ;
96109: LD_VAR 0 2
96113: PPUSH
96114: LD_INT 8
96116: PPUSH
96117: CALL_OW 336
// end ;
96121: PPOPN 3
96123: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
96124: LD_EXP 90
96128: PUSH
96129: LD_EXP 134
96133: AND
96134: IFFALSE 96278
96136: GO 96138
96138: DISABLE
96139: LD_INT 0
96141: PPUSH
96142: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
96143: LD_ADDR_VAR 0 2
96147: PUSH
96148: LD_INT 22
96150: PUSH
96151: LD_OWVAR 2
96155: PUSH
96156: EMPTY
96157: LIST
96158: LIST
96159: PUSH
96160: LD_INT 21
96162: PUSH
96163: LD_INT 2
96165: PUSH
96166: EMPTY
96167: LIST
96168: LIST
96169: PUSH
96170: LD_INT 2
96172: PUSH
96173: LD_INT 34
96175: PUSH
96176: LD_INT 12
96178: PUSH
96179: EMPTY
96180: LIST
96181: LIST
96182: PUSH
96183: LD_INT 34
96185: PUSH
96186: LD_INT 51
96188: PUSH
96189: EMPTY
96190: LIST
96191: LIST
96192: PUSH
96193: LD_INT 34
96195: PUSH
96196: LD_INT 32
96198: PUSH
96199: EMPTY
96200: LIST
96201: LIST
96202: PUSH
96203: EMPTY
96204: LIST
96205: LIST
96206: LIST
96207: LIST
96208: PUSH
96209: EMPTY
96210: LIST
96211: LIST
96212: LIST
96213: PPUSH
96214: CALL_OW 69
96218: ST_TO_ADDR
// if not tmp then
96219: LD_VAR 0 2
96223: NOT
96224: IFFALSE 96228
// exit ;
96226: GO 96278
// for i in tmp do
96228: LD_ADDR_VAR 0 1
96232: PUSH
96233: LD_VAR 0 2
96237: PUSH
96238: FOR_IN
96239: IFFALSE 96276
// if GetCargo ( i , mat_artifact ) = 0 then
96241: LD_VAR 0 1
96245: PPUSH
96246: LD_INT 4
96248: PPUSH
96249: CALL_OW 289
96253: PUSH
96254: LD_INT 0
96256: EQUAL
96257: IFFALSE 96274
// SetCargo ( i , mat_siberit , 100 ) ;
96259: LD_VAR 0 1
96263: PPUSH
96264: LD_INT 3
96266: PPUSH
96267: LD_INT 100
96269: PPUSH
96270: CALL_OW 290
96274: GO 96238
96276: POP
96277: POP
// end ;
96278: PPOPN 2
96280: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
96281: LD_EXP 90
96285: PUSH
96286: LD_EXP 135
96290: AND
96291: IFFALSE 96474
96293: GO 96295
96295: DISABLE
96296: LD_INT 0
96298: PPUSH
96299: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
96300: LD_ADDR_VAR 0 2
96304: PUSH
96305: LD_INT 22
96307: PUSH
96308: LD_OWVAR 2
96312: PUSH
96313: EMPTY
96314: LIST
96315: LIST
96316: PPUSH
96317: CALL_OW 69
96321: ST_TO_ADDR
// if not tmp then
96322: LD_VAR 0 2
96326: NOT
96327: IFFALSE 96331
// exit ;
96329: GO 96474
// for i := 1 to 2 do
96331: LD_ADDR_VAR 0 1
96335: PUSH
96336: DOUBLE
96337: LD_INT 1
96339: DEC
96340: ST_TO_ADDR
96341: LD_INT 2
96343: PUSH
96344: FOR_TO
96345: IFFALSE 96472
// begin uc_side := your_side ;
96347: LD_ADDR_OWVAR 20
96351: PUSH
96352: LD_OWVAR 2
96356: ST_TO_ADDR
// uc_nation := nation_american ;
96357: LD_ADDR_OWVAR 21
96361: PUSH
96362: LD_INT 1
96364: ST_TO_ADDR
// vc_chassis := us_morphling ;
96365: LD_ADDR_OWVAR 37
96369: PUSH
96370: LD_INT 5
96372: ST_TO_ADDR
// vc_engine := engine_siberite ;
96373: LD_ADDR_OWVAR 39
96377: PUSH
96378: LD_INT 3
96380: ST_TO_ADDR
// vc_control := control_computer ;
96381: LD_ADDR_OWVAR 38
96385: PUSH
96386: LD_INT 3
96388: ST_TO_ADDR
// vc_weapon := us_double_laser ;
96389: LD_ADDR_OWVAR 40
96393: PUSH
96394: LD_INT 10
96396: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
96397: LD_VAR 0 2
96401: PUSH
96402: LD_INT 1
96404: ARRAY
96405: PPUSH
96406: CALL_OW 310
96410: NOT
96411: IFFALSE 96458
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
96413: CALL_OW 45
96417: PPUSH
96418: LD_VAR 0 2
96422: PUSH
96423: LD_INT 1
96425: ARRAY
96426: PPUSH
96427: CALL_OW 250
96431: PPUSH
96432: LD_VAR 0 2
96436: PUSH
96437: LD_INT 1
96439: ARRAY
96440: PPUSH
96441: CALL_OW 251
96445: PPUSH
96446: LD_INT 12
96448: PPUSH
96449: LD_INT 1
96451: PPUSH
96452: CALL_OW 50
96456: GO 96470
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
96458: CALL_OW 45
96462: PPUSH
96463: LD_INT 1
96465: PPUSH
96466: CALL_OW 51
// end ;
96470: GO 96344
96472: POP
96473: POP
// end ;
96474: PPOPN 2
96476: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
96477: LD_EXP 90
96481: PUSH
96482: LD_EXP 136
96486: AND
96487: IFFALSE 96709
96489: GO 96491
96491: DISABLE
96492: LD_INT 0
96494: PPUSH
96495: PPUSH
96496: PPUSH
96497: PPUSH
96498: PPUSH
96499: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
96500: LD_ADDR_VAR 0 6
96504: PUSH
96505: LD_INT 22
96507: PUSH
96508: LD_OWVAR 2
96512: PUSH
96513: EMPTY
96514: LIST
96515: LIST
96516: PUSH
96517: LD_INT 21
96519: PUSH
96520: LD_INT 1
96522: PUSH
96523: EMPTY
96524: LIST
96525: LIST
96526: PUSH
96527: LD_INT 3
96529: PUSH
96530: LD_INT 23
96532: PUSH
96533: LD_INT 0
96535: PUSH
96536: EMPTY
96537: LIST
96538: LIST
96539: PUSH
96540: EMPTY
96541: LIST
96542: LIST
96543: PUSH
96544: EMPTY
96545: LIST
96546: LIST
96547: LIST
96548: PPUSH
96549: CALL_OW 69
96553: ST_TO_ADDR
// if not tmp then
96554: LD_VAR 0 6
96558: NOT
96559: IFFALSE 96563
// exit ;
96561: GO 96709
// s1 := rand ( 1 , 4 ) ;
96563: LD_ADDR_VAR 0 2
96567: PUSH
96568: LD_INT 1
96570: PPUSH
96571: LD_INT 4
96573: PPUSH
96574: CALL_OW 12
96578: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
96579: LD_ADDR_VAR 0 4
96583: PUSH
96584: LD_VAR 0 6
96588: PUSH
96589: LD_INT 1
96591: ARRAY
96592: PPUSH
96593: LD_VAR 0 2
96597: PPUSH
96598: CALL_OW 259
96602: ST_TO_ADDR
// if s1 = 1 then
96603: LD_VAR 0 2
96607: PUSH
96608: LD_INT 1
96610: EQUAL
96611: IFFALSE 96631
// s2 := rand ( 2 , 4 ) else
96613: LD_ADDR_VAR 0 3
96617: PUSH
96618: LD_INT 2
96620: PPUSH
96621: LD_INT 4
96623: PPUSH
96624: CALL_OW 12
96628: ST_TO_ADDR
96629: GO 96639
// s2 := 1 ;
96631: LD_ADDR_VAR 0 3
96635: PUSH
96636: LD_INT 1
96638: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
96639: LD_ADDR_VAR 0 5
96643: PUSH
96644: LD_VAR 0 6
96648: PUSH
96649: LD_INT 1
96651: ARRAY
96652: PPUSH
96653: LD_VAR 0 3
96657: PPUSH
96658: CALL_OW 259
96662: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
96663: LD_VAR 0 6
96667: PUSH
96668: LD_INT 1
96670: ARRAY
96671: PPUSH
96672: LD_VAR 0 2
96676: PPUSH
96677: LD_VAR 0 5
96681: PPUSH
96682: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
96686: LD_VAR 0 6
96690: PUSH
96691: LD_INT 1
96693: ARRAY
96694: PPUSH
96695: LD_VAR 0 3
96699: PPUSH
96700: LD_VAR 0 4
96704: PPUSH
96705: CALL_OW 237
// end ;
96709: PPOPN 6
96711: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
96712: LD_EXP 90
96716: PUSH
96717: LD_EXP 137
96721: AND
96722: IFFALSE 96801
96724: GO 96726
96726: DISABLE
96727: LD_INT 0
96729: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
96730: LD_ADDR_VAR 0 1
96734: PUSH
96735: LD_INT 22
96737: PUSH
96738: LD_OWVAR 2
96742: PUSH
96743: EMPTY
96744: LIST
96745: LIST
96746: PUSH
96747: LD_INT 30
96749: PUSH
96750: LD_INT 3
96752: PUSH
96753: EMPTY
96754: LIST
96755: LIST
96756: PUSH
96757: EMPTY
96758: LIST
96759: LIST
96760: PPUSH
96761: CALL_OW 69
96765: ST_TO_ADDR
// if not tmp then
96766: LD_VAR 0 1
96770: NOT
96771: IFFALSE 96775
// exit ;
96773: GO 96801
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
96775: LD_VAR 0 1
96779: PUSH
96780: LD_INT 1
96782: PPUSH
96783: LD_VAR 0 1
96787: PPUSH
96788: CALL_OW 12
96792: ARRAY
96793: PPUSH
96794: LD_INT 1
96796: PPUSH
96797: CALL_OW 234
// end ;
96801: PPOPN 1
96803: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
96804: LD_EXP 90
96808: PUSH
96809: LD_EXP 138
96813: AND
96814: IFFALSE 96926
96816: GO 96818
96818: DISABLE
96819: LD_INT 0
96821: PPUSH
96822: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
96823: LD_ADDR_VAR 0 2
96827: PUSH
96828: LD_INT 22
96830: PUSH
96831: LD_OWVAR 2
96835: PUSH
96836: EMPTY
96837: LIST
96838: LIST
96839: PUSH
96840: LD_INT 2
96842: PUSH
96843: LD_INT 30
96845: PUSH
96846: LD_INT 27
96848: PUSH
96849: EMPTY
96850: LIST
96851: LIST
96852: PUSH
96853: LD_INT 30
96855: PUSH
96856: LD_INT 26
96858: PUSH
96859: EMPTY
96860: LIST
96861: LIST
96862: PUSH
96863: LD_INT 30
96865: PUSH
96866: LD_INT 28
96868: PUSH
96869: EMPTY
96870: LIST
96871: LIST
96872: PUSH
96873: EMPTY
96874: LIST
96875: LIST
96876: LIST
96877: LIST
96878: PUSH
96879: EMPTY
96880: LIST
96881: LIST
96882: PPUSH
96883: CALL_OW 69
96887: ST_TO_ADDR
// if not tmp then
96888: LD_VAR 0 2
96892: NOT
96893: IFFALSE 96897
// exit ;
96895: GO 96926
// for i in tmp do
96897: LD_ADDR_VAR 0 1
96901: PUSH
96902: LD_VAR 0 2
96906: PUSH
96907: FOR_IN
96908: IFFALSE 96924
// SetLives ( i , 1 ) ;
96910: LD_VAR 0 1
96914: PPUSH
96915: LD_INT 1
96917: PPUSH
96918: CALL_OW 234
96922: GO 96907
96924: POP
96925: POP
// end ;
96926: PPOPN 2
96928: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
96929: LD_EXP 90
96933: PUSH
96934: LD_EXP 139
96938: AND
96939: IFFALSE 97213
96941: GO 96943
96943: DISABLE
96944: LD_INT 0
96946: PPUSH
96947: PPUSH
96948: PPUSH
// begin i := rand ( 1 , 7 ) ;
96949: LD_ADDR_VAR 0 1
96953: PUSH
96954: LD_INT 1
96956: PPUSH
96957: LD_INT 7
96959: PPUSH
96960: CALL_OW 12
96964: ST_TO_ADDR
// case i of 1 :
96965: LD_VAR 0 1
96969: PUSH
96970: LD_INT 1
96972: DOUBLE
96973: EQUAL
96974: IFTRUE 96978
96976: GO 96988
96978: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
96979: LD_STRING earthquake(getX(game), 0, 32)
96981: PPUSH
96982: CALL_OW 559
96986: GO 97213
96988: LD_INT 2
96990: DOUBLE
96991: EQUAL
96992: IFTRUE 96996
96994: GO 97010
96996: POP
// begin ToLua ( displayStucuk(); ) ;
96997: LD_STRING displayStucuk();
96999: PPUSH
97000: CALL_OW 559
// ResetFog ;
97004: CALL_OW 335
// end ; 3 :
97008: GO 97213
97010: LD_INT 3
97012: DOUBLE
97013: EQUAL
97014: IFTRUE 97018
97016: GO 97122
97018: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
97019: LD_ADDR_VAR 0 2
97023: PUSH
97024: LD_INT 22
97026: PUSH
97027: LD_OWVAR 2
97031: PUSH
97032: EMPTY
97033: LIST
97034: LIST
97035: PUSH
97036: LD_INT 25
97038: PUSH
97039: LD_INT 1
97041: PUSH
97042: EMPTY
97043: LIST
97044: LIST
97045: PUSH
97046: EMPTY
97047: LIST
97048: LIST
97049: PPUSH
97050: CALL_OW 69
97054: ST_TO_ADDR
// if not tmp then
97055: LD_VAR 0 2
97059: NOT
97060: IFFALSE 97064
// exit ;
97062: GO 97213
// un := tmp [ rand ( 1 , tmp ) ] ;
97064: LD_ADDR_VAR 0 3
97068: PUSH
97069: LD_VAR 0 2
97073: PUSH
97074: LD_INT 1
97076: PPUSH
97077: LD_VAR 0 2
97081: PPUSH
97082: CALL_OW 12
97086: ARRAY
97087: ST_TO_ADDR
// if Crawls ( un ) then
97088: LD_VAR 0 3
97092: PPUSH
97093: CALL_OW 318
97097: IFFALSE 97108
// ComWalk ( un ) ;
97099: LD_VAR 0 3
97103: PPUSH
97104: CALL_OW 138
// SetClass ( un , class_mortar ) ;
97108: LD_VAR 0 3
97112: PPUSH
97113: LD_INT 8
97115: PPUSH
97116: CALL_OW 336
// end ; 4 :
97120: GO 97213
97122: LD_INT 4
97124: DOUBLE
97125: EQUAL
97126: IFTRUE 97130
97128: GO 97191
97130: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
97131: LD_ADDR_VAR 0 2
97135: PUSH
97136: LD_INT 22
97138: PUSH
97139: LD_OWVAR 2
97143: PUSH
97144: EMPTY
97145: LIST
97146: LIST
97147: PUSH
97148: LD_INT 30
97150: PUSH
97151: LD_INT 29
97153: PUSH
97154: EMPTY
97155: LIST
97156: LIST
97157: PUSH
97158: EMPTY
97159: LIST
97160: LIST
97161: PPUSH
97162: CALL_OW 69
97166: ST_TO_ADDR
// if not tmp then
97167: LD_VAR 0 2
97171: NOT
97172: IFFALSE 97176
// exit ;
97174: GO 97213
// DestroyUnit ( tmp [ 1 ] ) ;
97176: LD_VAR 0 2
97180: PUSH
97181: LD_INT 1
97183: ARRAY
97184: PPUSH
97185: CALL_OW 65
// end ; 5 .. 7 :
97189: GO 97213
97191: LD_INT 5
97193: DOUBLE
97194: GREATEREQUAL
97195: IFFALSE 97203
97197: LD_INT 7
97199: DOUBLE
97200: LESSEQUAL
97201: IFTRUE 97205
97203: GO 97212
97205: POP
// StreamSibBomb ; end ;
97206: CALL 93463 0 0
97210: GO 97213
97212: POP
// end ;
97213: PPOPN 3
97215: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
97216: LD_EXP 90
97220: PUSH
97221: LD_EXP 140
97225: AND
97226: IFFALSE 97382
97228: GO 97230
97230: DISABLE
97231: LD_INT 0
97233: PPUSH
97234: PPUSH
97235: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
97236: LD_ADDR_VAR 0 2
97240: PUSH
97241: LD_INT 81
97243: PUSH
97244: LD_OWVAR 2
97248: PUSH
97249: EMPTY
97250: LIST
97251: LIST
97252: PUSH
97253: LD_INT 2
97255: PUSH
97256: LD_INT 21
97258: PUSH
97259: LD_INT 1
97261: PUSH
97262: EMPTY
97263: LIST
97264: LIST
97265: PUSH
97266: LD_INT 21
97268: PUSH
97269: LD_INT 2
97271: PUSH
97272: EMPTY
97273: LIST
97274: LIST
97275: PUSH
97276: EMPTY
97277: LIST
97278: LIST
97279: LIST
97280: PUSH
97281: EMPTY
97282: LIST
97283: LIST
97284: PPUSH
97285: CALL_OW 69
97289: ST_TO_ADDR
// if not tmp then
97290: LD_VAR 0 2
97294: NOT
97295: IFFALSE 97299
// exit ;
97297: GO 97382
// p := 0 ;
97299: LD_ADDR_VAR 0 3
97303: PUSH
97304: LD_INT 0
97306: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
97307: LD_INT 35
97309: PPUSH
97310: CALL_OW 67
// p := p + 1 ;
97314: LD_ADDR_VAR 0 3
97318: PUSH
97319: LD_VAR 0 3
97323: PUSH
97324: LD_INT 1
97326: PLUS
97327: ST_TO_ADDR
// for i in tmp do
97328: LD_ADDR_VAR 0 1
97332: PUSH
97333: LD_VAR 0 2
97337: PUSH
97338: FOR_IN
97339: IFFALSE 97370
// if GetLives ( i ) < 1000 then
97341: LD_VAR 0 1
97345: PPUSH
97346: CALL_OW 256
97350: PUSH
97351: LD_INT 1000
97353: LESS
97354: IFFALSE 97368
// SetLives ( i , 1000 ) ;
97356: LD_VAR 0 1
97360: PPUSH
97361: LD_INT 1000
97363: PPUSH
97364: CALL_OW 234
97368: GO 97338
97370: POP
97371: POP
// until p > 20 ;
97372: LD_VAR 0 3
97376: PUSH
97377: LD_INT 20
97379: GREATER
97380: IFFALSE 97307
// end ;
97382: PPOPN 3
97384: END
// every 0 0$1 trigger StreamModeActive and sTime do
97385: LD_EXP 90
97389: PUSH
97390: LD_EXP 141
97394: AND
97395: IFFALSE 97430
97397: GO 97399
97399: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
97400: LD_INT 28
97402: PPUSH
97403: LD_OWVAR 2
97407: PPUSH
97408: LD_INT 2
97410: PPUSH
97411: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
97415: LD_INT 30
97417: PPUSH
97418: LD_OWVAR 2
97422: PPUSH
97423: LD_INT 2
97425: PPUSH
97426: CALL_OW 322
// end ;
97430: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
97431: LD_EXP 90
97435: PUSH
97436: LD_EXP 142
97440: AND
97441: IFFALSE 97562
97443: GO 97445
97445: DISABLE
97446: LD_INT 0
97448: PPUSH
97449: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
97450: LD_ADDR_VAR 0 2
97454: PUSH
97455: LD_INT 22
97457: PUSH
97458: LD_OWVAR 2
97462: PUSH
97463: EMPTY
97464: LIST
97465: LIST
97466: PUSH
97467: LD_INT 21
97469: PUSH
97470: LD_INT 1
97472: PUSH
97473: EMPTY
97474: LIST
97475: LIST
97476: PUSH
97477: LD_INT 3
97479: PUSH
97480: LD_INT 23
97482: PUSH
97483: LD_INT 0
97485: PUSH
97486: EMPTY
97487: LIST
97488: LIST
97489: PUSH
97490: EMPTY
97491: LIST
97492: LIST
97493: PUSH
97494: EMPTY
97495: LIST
97496: LIST
97497: LIST
97498: PPUSH
97499: CALL_OW 69
97503: ST_TO_ADDR
// if not tmp then
97504: LD_VAR 0 2
97508: NOT
97509: IFFALSE 97513
// exit ;
97511: GO 97562
// for i in tmp do
97513: LD_ADDR_VAR 0 1
97517: PUSH
97518: LD_VAR 0 2
97522: PUSH
97523: FOR_IN
97524: IFFALSE 97560
// begin if Crawls ( i ) then
97526: LD_VAR 0 1
97530: PPUSH
97531: CALL_OW 318
97535: IFFALSE 97546
// ComWalk ( i ) ;
97537: LD_VAR 0 1
97541: PPUSH
97542: CALL_OW 138
// SetClass ( i , 2 ) ;
97546: LD_VAR 0 1
97550: PPUSH
97551: LD_INT 2
97553: PPUSH
97554: CALL_OW 336
// end ;
97558: GO 97523
97560: POP
97561: POP
// end ;
97562: PPOPN 2
97564: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
97565: LD_EXP 90
97569: PUSH
97570: LD_EXP 143
97574: AND
97575: IFFALSE 97856
97577: GO 97579
97579: DISABLE
97580: LD_INT 0
97582: PPUSH
97583: PPUSH
97584: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
97585: LD_OWVAR 2
97589: PPUSH
97590: LD_INT 9
97592: PPUSH
97593: LD_INT 1
97595: PPUSH
97596: LD_INT 1
97598: PPUSH
97599: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
97603: LD_INT 9
97605: PPUSH
97606: LD_OWVAR 2
97610: PPUSH
97611: CALL_OW 343
// uc_side := 9 ;
97615: LD_ADDR_OWVAR 20
97619: PUSH
97620: LD_INT 9
97622: ST_TO_ADDR
// uc_nation := 2 ;
97623: LD_ADDR_OWVAR 21
97627: PUSH
97628: LD_INT 2
97630: ST_TO_ADDR
// hc_name := Dark Warrior ;
97631: LD_ADDR_OWVAR 26
97635: PUSH
97636: LD_STRING Dark Warrior
97638: ST_TO_ADDR
// hc_gallery :=  ;
97639: LD_ADDR_OWVAR 33
97643: PUSH
97644: LD_STRING 
97646: ST_TO_ADDR
// hc_noskilllimit := true ;
97647: LD_ADDR_OWVAR 76
97651: PUSH
97652: LD_INT 1
97654: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
97655: LD_ADDR_OWVAR 31
97659: PUSH
97660: LD_INT 30
97662: PUSH
97663: LD_INT 30
97665: PUSH
97666: LD_INT 30
97668: PUSH
97669: LD_INT 30
97671: PUSH
97672: EMPTY
97673: LIST
97674: LIST
97675: LIST
97676: LIST
97677: ST_TO_ADDR
// un := CreateHuman ;
97678: LD_ADDR_VAR 0 3
97682: PUSH
97683: CALL_OW 44
97687: ST_TO_ADDR
// hc_noskilllimit := false ;
97688: LD_ADDR_OWVAR 76
97692: PUSH
97693: LD_INT 0
97695: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
97696: LD_VAR 0 3
97700: PPUSH
97701: LD_INT 1
97703: PPUSH
97704: CALL_OW 51
// p := 0 ;
97708: LD_ADDR_VAR 0 2
97712: PUSH
97713: LD_INT 0
97715: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
97716: LD_INT 35
97718: PPUSH
97719: CALL_OW 67
// p := p + 1 ;
97723: LD_ADDR_VAR 0 2
97727: PUSH
97728: LD_VAR 0 2
97732: PUSH
97733: LD_INT 1
97735: PLUS
97736: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
97737: LD_VAR 0 3
97741: PPUSH
97742: CALL_OW 256
97746: PUSH
97747: LD_INT 1000
97749: LESS
97750: IFFALSE 97764
// SetLives ( un , 1000 ) ;
97752: LD_VAR 0 3
97756: PPUSH
97757: LD_INT 1000
97759: PPUSH
97760: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
97764: LD_VAR 0 3
97768: PPUSH
97769: LD_INT 81
97771: PUSH
97772: LD_OWVAR 2
97776: PUSH
97777: EMPTY
97778: LIST
97779: LIST
97780: PUSH
97781: LD_INT 91
97783: PUSH
97784: LD_VAR 0 3
97788: PUSH
97789: LD_INT 30
97791: PUSH
97792: EMPTY
97793: LIST
97794: LIST
97795: LIST
97796: PUSH
97797: EMPTY
97798: LIST
97799: LIST
97800: PPUSH
97801: CALL_OW 69
97805: PPUSH
97806: LD_VAR 0 3
97810: PPUSH
97811: CALL_OW 74
97815: PPUSH
97816: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
97820: LD_VAR 0 2
97824: PUSH
97825: LD_INT 60
97827: GREATER
97828: PUSH
97829: LD_VAR 0 3
97833: PPUSH
97834: CALL_OW 301
97838: OR
97839: IFFALSE 97716
// if un then
97841: LD_VAR 0 3
97845: IFFALSE 97856
// RemoveUnit ( un ) ;
97847: LD_VAR 0 3
97851: PPUSH
97852: CALL_OW 64
// end ;
97856: PPOPN 3
97858: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
97859: LD_INT 0
97861: PPUSH
// case cmd of 301 :
97862: LD_VAR 0 1
97866: PUSH
97867: LD_INT 301
97869: DOUBLE
97870: EQUAL
97871: IFTRUE 97875
97873: GO 97907
97875: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
97876: LD_VAR 0 6
97880: PPUSH
97881: LD_VAR 0 7
97885: PPUSH
97886: LD_VAR 0 8
97890: PPUSH
97891: LD_VAR 0 4
97895: PPUSH
97896: LD_VAR 0 5
97900: PPUSH
97901: CALL 99108 0 5
97905: GO 98028
97907: LD_INT 302
97909: DOUBLE
97910: EQUAL
97911: IFTRUE 97915
97913: GO 97952
97915: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
97916: LD_VAR 0 6
97920: PPUSH
97921: LD_VAR 0 7
97925: PPUSH
97926: LD_VAR 0 8
97930: PPUSH
97931: LD_VAR 0 9
97935: PPUSH
97936: LD_VAR 0 4
97940: PPUSH
97941: LD_VAR 0 5
97945: PPUSH
97946: CALL 99199 0 6
97950: GO 98028
97952: LD_INT 303
97954: DOUBLE
97955: EQUAL
97956: IFTRUE 97960
97958: GO 97997
97960: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
97961: LD_VAR 0 6
97965: PPUSH
97966: LD_VAR 0 7
97970: PPUSH
97971: LD_VAR 0 8
97975: PPUSH
97976: LD_VAR 0 9
97980: PPUSH
97981: LD_VAR 0 4
97985: PPUSH
97986: LD_VAR 0 5
97990: PPUSH
97991: CALL 98033 0 6
97995: GO 98028
97997: LD_INT 304
97999: DOUBLE
98000: EQUAL
98001: IFTRUE 98005
98003: GO 98027
98005: POP
// hHackTeleport ( unit , x , y ) ; end ;
98006: LD_VAR 0 2
98010: PPUSH
98011: LD_VAR 0 4
98015: PPUSH
98016: LD_VAR 0 5
98020: PPUSH
98021: CALL 99792 0 3
98025: GO 98028
98027: POP
// end ;
98028: LD_VAR 0 12
98032: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
98033: LD_INT 0
98035: PPUSH
98036: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
98037: LD_VAR 0 1
98041: PUSH
98042: LD_INT 1
98044: LESS
98045: PUSH
98046: LD_VAR 0 1
98050: PUSH
98051: LD_INT 3
98053: GREATER
98054: OR
98055: PUSH
98056: LD_VAR 0 5
98060: PPUSH
98061: LD_VAR 0 6
98065: PPUSH
98066: CALL_OW 428
98070: OR
98071: IFFALSE 98075
// exit ;
98073: GO 98795
// uc_side := your_side ;
98075: LD_ADDR_OWVAR 20
98079: PUSH
98080: LD_OWVAR 2
98084: ST_TO_ADDR
// uc_nation := nation ;
98085: LD_ADDR_OWVAR 21
98089: PUSH
98090: LD_VAR 0 1
98094: ST_TO_ADDR
// bc_level = 1 ;
98095: LD_ADDR_OWVAR 43
98099: PUSH
98100: LD_INT 1
98102: ST_TO_ADDR
// case btype of 1 :
98103: LD_VAR 0 2
98107: PUSH
98108: LD_INT 1
98110: DOUBLE
98111: EQUAL
98112: IFTRUE 98116
98114: GO 98127
98116: POP
// bc_type := b_depot ; 2 :
98117: LD_ADDR_OWVAR 42
98121: PUSH
98122: LD_INT 0
98124: ST_TO_ADDR
98125: GO 98739
98127: LD_INT 2
98129: DOUBLE
98130: EQUAL
98131: IFTRUE 98135
98133: GO 98146
98135: POP
// bc_type := b_warehouse ; 3 :
98136: LD_ADDR_OWVAR 42
98140: PUSH
98141: LD_INT 1
98143: ST_TO_ADDR
98144: GO 98739
98146: LD_INT 3
98148: DOUBLE
98149: EQUAL
98150: IFTRUE 98154
98152: GO 98165
98154: POP
// bc_type := b_lab ; 4 .. 9 :
98155: LD_ADDR_OWVAR 42
98159: PUSH
98160: LD_INT 6
98162: ST_TO_ADDR
98163: GO 98739
98165: LD_INT 4
98167: DOUBLE
98168: GREATEREQUAL
98169: IFFALSE 98177
98171: LD_INT 9
98173: DOUBLE
98174: LESSEQUAL
98175: IFTRUE 98179
98177: GO 98231
98179: POP
// begin bc_type := b_lab_half ;
98180: LD_ADDR_OWVAR 42
98184: PUSH
98185: LD_INT 7
98187: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
98188: LD_ADDR_OWVAR 44
98192: PUSH
98193: LD_INT 10
98195: PUSH
98196: LD_INT 11
98198: PUSH
98199: LD_INT 12
98201: PUSH
98202: LD_INT 15
98204: PUSH
98205: LD_INT 14
98207: PUSH
98208: LD_INT 13
98210: PUSH
98211: EMPTY
98212: LIST
98213: LIST
98214: LIST
98215: LIST
98216: LIST
98217: LIST
98218: PUSH
98219: LD_VAR 0 2
98223: PUSH
98224: LD_INT 3
98226: MINUS
98227: ARRAY
98228: ST_TO_ADDR
// end ; 10 .. 13 :
98229: GO 98739
98231: LD_INT 10
98233: DOUBLE
98234: GREATEREQUAL
98235: IFFALSE 98243
98237: LD_INT 13
98239: DOUBLE
98240: LESSEQUAL
98241: IFTRUE 98245
98243: GO 98322
98245: POP
// begin bc_type := b_lab_full ;
98246: LD_ADDR_OWVAR 42
98250: PUSH
98251: LD_INT 8
98253: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
98254: LD_ADDR_OWVAR 44
98258: PUSH
98259: LD_INT 10
98261: PUSH
98262: LD_INT 12
98264: PUSH
98265: LD_INT 14
98267: PUSH
98268: LD_INT 13
98270: PUSH
98271: EMPTY
98272: LIST
98273: LIST
98274: LIST
98275: LIST
98276: PUSH
98277: LD_VAR 0 2
98281: PUSH
98282: LD_INT 9
98284: MINUS
98285: ARRAY
98286: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
98287: LD_ADDR_OWVAR 45
98291: PUSH
98292: LD_INT 11
98294: PUSH
98295: LD_INT 15
98297: PUSH
98298: LD_INT 12
98300: PUSH
98301: LD_INT 15
98303: PUSH
98304: EMPTY
98305: LIST
98306: LIST
98307: LIST
98308: LIST
98309: PUSH
98310: LD_VAR 0 2
98314: PUSH
98315: LD_INT 9
98317: MINUS
98318: ARRAY
98319: ST_TO_ADDR
// end ; 14 :
98320: GO 98739
98322: LD_INT 14
98324: DOUBLE
98325: EQUAL
98326: IFTRUE 98330
98328: GO 98341
98330: POP
// bc_type := b_workshop ; 15 :
98331: LD_ADDR_OWVAR 42
98335: PUSH
98336: LD_INT 2
98338: ST_TO_ADDR
98339: GO 98739
98341: LD_INT 15
98343: DOUBLE
98344: EQUAL
98345: IFTRUE 98349
98347: GO 98360
98349: POP
// bc_type := b_factory ; 16 :
98350: LD_ADDR_OWVAR 42
98354: PUSH
98355: LD_INT 3
98357: ST_TO_ADDR
98358: GO 98739
98360: LD_INT 16
98362: DOUBLE
98363: EQUAL
98364: IFTRUE 98368
98366: GO 98379
98368: POP
// bc_type := b_ext_gun ; 17 :
98369: LD_ADDR_OWVAR 42
98373: PUSH
98374: LD_INT 17
98376: ST_TO_ADDR
98377: GO 98739
98379: LD_INT 17
98381: DOUBLE
98382: EQUAL
98383: IFTRUE 98387
98385: GO 98415
98387: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
98388: LD_ADDR_OWVAR 42
98392: PUSH
98393: LD_INT 19
98395: PUSH
98396: LD_INT 23
98398: PUSH
98399: LD_INT 19
98401: PUSH
98402: EMPTY
98403: LIST
98404: LIST
98405: LIST
98406: PUSH
98407: LD_VAR 0 1
98411: ARRAY
98412: ST_TO_ADDR
98413: GO 98739
98415: LD_INT 18
98417: DOUBLE
98418: EQUAL
98419: IFTRUE 98423
98421: GO 98434
98423: POP
// bc_type := b_ext_radar ; 19 :
98424: LD_ADDR_OWVAR 42
98428: PUSH
98429: LD_INT 20
98431: ST_TO_ADDR
98432: GO 98739
98434: LD_INT 19
98436: DOUBLE
98437: EQUAL
98438: IFTRUE 98442
98440: GO 98453
98442: POP
// bc_type := b_ext_radio ; 20 :
98443: LD_ADDR_OWVAR 42
98447: PUSH
98448: LD_INT 22
98450: ST_TO_ADDR
98451: GO 98739
98453: LD_INT 20
98455: DOUBLE
98456: EQUAL
98457: IFTRUE 98461
98459: GO 98472
98461: POP
// bc_type := b_ext_siberium ; 21 :
98462: LD_ADDR_OWVAR 42
98466: PUSH
98467: LD_INT 21
98469: ST_TO_ADDR
98470: GO 98739
98472: LD_INT 21
98474: DOUBLE
98475: EQUAL
98476: IFTRUE 98480
98478: GO 98491
98480: POP
// bc_type := b_ext_computer ; 22 :
98481: LD_ADDR_OWVAR 42
98485: PUSH
98486: LD_INT 24
98488: ST_TO_ADDR
98489: GO 98739
98491: LD_INT 22
98493: DOUBLE
98494: EQUAL
98495: IFTRUE 98499
98497: GO 98510
98499: POP
// bc_type := b_ext_track ; 23 :
98500: LD_ADDR_OWVAR 42
98504: PUSH
98505: LD_INT 16
98507: ST_TO_ADDR
98508: GO 98739
98510: LD_INT 23
98512: DOUBLE
98513: EQUAL
98514: IFTRUE 98518
98516: GO 98529
98518: POP
// bc_type := b_ext_laser ; 24 :
98519: LD_ADDR_OWVAR 42
98523: PUSH
98524: LD_INT 25
98526: ST_TO_ADDR
98527: GO 98739
98529: LD_INT 24
98531: DOUBLE
98532: EQUAL
98533: IFTRUE 98537
98535: GO 98548
98537: POP
// bc_type := b_control_tower ; 25 :
98538: LD_ADDR_OWVAR 42
98542: PUSH
98543: LD_INT 36
98545: ST_TO_ADDR
98546: GO 98739
98548: LD_INT 25
98550: DOUBLE
98551: EQUAL
98552: IFTRUE 98556
98554: GO 98567
98556: POP
// bc_type := b_breastwork ; 26 :
98557: LD_ADDR_OWVAR 42
98561: PUSH
98562: LD_INT 31
98564: ST_TO_ADDR
98565: GO 98739
98567: LD_INT 26
98569: DOUBLE
98570: EQUAL
98571: IFTRUE 98575
98573: GO 98586
98575: POP
// bc_type := b_bunker ; 27 :
98576: LD_ADDR_OWVAR 42
98580: PUSH
98581: LD_INT 32
98583: ST_TO_ADDR
98584: GO 98739
98586: LD_INT 27
98588: DOUBLE
98589: EQUAL
98590: IFTRUE 98594
98592: GO 98605
98594: POP
// bc_type := b_turret ; 28 :
98595: LD_ADDR_OWVAR 42
98599: PUSH
98600: LD_INT 33
98602: ST_TO_ADDR
98603: GO 98739
98605: LD_INT 28
98607: DOUBLE
98608: EQUAL
98609: IFTRUE 98613
98611: GO 98624
98613: POP
// bc_type := b_armoury ; 29 :
98614: LD_ADDR_OWVAR 42
98618: PUSH
98619: LD_INT 4
98621: ST_TO_ADDR
98622: GO 98739
98624: LD_INT 29
98626: DOUBLE
98627: EQUAL
98628: IFTRUE 98632
98630: GO 98643
98632: POP
// bc_type := b_barracks ; 30 :
98633: LD_ADDR_OWVAR 42
98637: PUSH
98638: LD_INT 5
98640: ST_TO_ADDR
98641: GO 98739
98643: LD_INT 30
98645: DOUBLE
98646: EQUAL
98647: IFTRUE 98651
98649: GO 98662
98651: POP
// bc_type := b_solar_power ; 31 :
98652: LD_ADDR_OWVAR 42
98656: PUSH
98657: LD_INT 27
98659: ST_TO_ADDR
98660: GO 98739
98662: LD_INT 31
98664: DOUBLE
98665: EQUAL
98666: IFTRUE 98670
98668: GO 98681
98670: POP
// bc_type := b_oil_power ; 32 :
98671: LD_ADDR_OWVAR 42
98675: PUSH
98676: LD_INT 26
98678: ST_TO_ADDR
98679: GO 98739
98681: LD_INT 32
98683: DOUBLE
98684: EQUAL
98685: IFTRUE 98689
98687: GO 98700
98689: POP
// bc_type := b_siberite_power ; 33 :
98690: LD_ADDR_OWVAR 42
98694: PUSH
98695: LD_INT 28
98697: ST_TO_ADDR
98698: GO 98739
98700: LD_INT 33
98702: DOUBLE
98703: EQUAL
98704: IFTRUE 98708
98706: GO 98719
98708: POP
// bc_type := b_oil_mine ; 34 :
98709: LD_ADDR_OWVAR 42
98713: PUSH
98714: LD_INT 29
98716: ST_TO_ADDR
98717: GO 98739
98719: LD_INT 34
98721: DOUBLE
98722: EQUAL
98723: IFTRUE 98727
98725: GO 98738
98727: POP
// bc_type := b_siberite_mine ; end ;
98728: LD_ADDR_OWVAR 42
98732: PUSH
98733: LD_INT 30
98735: ST_TO_ADDR
98736: GO 98739
98738: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
98739: LD_ADDR_VAR 0 8
98743: PUSH
98744: LD_VAR 0 5
98748: PPUSH
98749: LD_VAR 0 6
98753: PPUSH
98754: LD_VAR 0 3
98758: PPUSH
98759: CALL_OW 47
98763: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
98764: LD_OWVAR 42
98768: PUSH
98769: LD_INT 32
98771: PUSH
98772: LD_INT 33
98774: PUSH
98775: EMPTY
98776: LIST
98777: LIST
98778: IN
98779: IFFALSE 98795
// PlaceWeaponTurret ( b , weapon ) ;
98781: LD_VAR 0 8
98785: PPUSH
98786: LD_VAR 0 4
98790: PPUSH
98791: CALL_OW 431
// end ;
98795: LD_VAR 0 7
98799: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
98800: LD_INT 0
98802: PPUSH
98803: PPUSH
98804: PPUSH
98805: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
98806: LD_ADDR_VAR 0 4
98810: PUSH
98811: LD_INT 22
98813: PUSH
98814: LD_OWVAR 2
98818: PUSH
98819: EMPTY
98820: LIST
98821: LIST
98822: PUSH
98823: LD_INT 2
98825: PUSH
98826: LD_INT 30
98828: PUSH
98829: LD_INT 0
98831: PUSH
98832: EMPTY
98833: LIST
98834: LIST
98835: PUSH
98836: LD_INT 30
98838: PUSH
98839: LD_INT 1
98841: PUSH
98842: EMPTY
98843: LIST
98844: LIST
98845: PUSH
98846: EMPTY
98847: LIST
98848: LIST
98849: LIST
98850: PUSH
98851: EMPTY
98852: LIST
98853: LIST
98854: PPUSH
98855: CALL_OW 69
98859: ST_TO_ADDR
// if not tmp then
98860: LD_VAR 0 4
98864: NOT
98865: IFFALSE 98869
// exit ;
98867: GO 98928
// for i in tmp do
98869: LD_ADDR_VAR 0 2
98873: PUSH
98874: LD_VAR 0 4
98878: PUSH
98879: FOR_IN
98880: IFFALSE 98926
// for j = 1 to 3 do
98882: LD_ADDR_VAR 0 3
98886: PUSH
98887: DOUBLE
98888: LD_INT 1
98890: DEC
98891: ST_TO_ADDR
98892: LD_INT 3
98894: PUSH
98895: FOR_TO
98896: IFFALSE 98922
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
98898: LD_VAR 0 2
98902: PPUSH
98903: CALL_OW 274
98907: PPUSH
98908: LD_VAR 0 3
98912: PPUSH
98913: LD_INT 99999
98915: PPUSH
98916: CALL_OW 277
98920: GO 98895
98922: POP
98923: POP
98924: GO 98879
98926: POP
98927: POP
// end ;
98928: LD_VAR 0 1
98932: RET
// export function hHackSetLevel10 ; var i , j ; begin
98933: LD_INT 0
98935: PPUSH
98936: PPUSH
98937: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
98938: LD_ADDR_VAR 0 2
98942: PUSH
98943: LD_INT 21
98945: PUSH
98946: LD_INT 1
98948: PUSH
98949: EMPTY
98950: LIST
98951: LIST
98952: PPUSH
98953: CALL_OW 69
98957: PUSH
98958: FOR_IN
98959: IFFALSE 99011
// if IsSelected ( i ) then
98961: LD_VAR 0 2
98965: PPUSH
98966: CALL_OW 306
98970: IFFALSE 99009
// begin for j := 1 to 4 do
98972: LD_ADDR_VAR 0 3
98976: PUSH
98977: DOUBLE
98978: LD_INT 1
98980: DEC
98981: ST_TO_ADDR
98982: LD_INT 4
98984: PUSH
98985: FOR_TO
98986: IFFALSE 99007
// SetSkill ( i , j , 10 ) ;
98988: LD_VAR 0 2
98992: PPUSH
98993: LD_VAR 0 3
98997: PPUSH
98998: LD_INT 10
99000: PPUSH
99001: CALL_OW 237
99005: GO 98985
99007: POP
99008: POP
// end ;
99009: GO 98958
99011: POP
99012: POP
// end ;
99013: LD_VAR 0 1
99017: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
99018: LD_INT 0
99020: PPUSH
99021: PPUSH
99022: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
99023: LD_ADDR_VAR 0 2
99027: PUSH
99028: LD_INT 22
99030: PUSH
99031: LD_OWVAR 2
99035: PUSH
99036: EMPTY
99037: LIST
99038: LIST
99039: PUSH
99040: LD_INT 21
99042: PUSH
99043: LD_INT 1
99045: PUSH
99046: EMPTY
99047: LIST
99048: LIST
99049: PUSH
99050: EMPTY
99051: LIST
99052: LIST
99053: PPUSH
99054: CALL_OW 69
99058: PUSH
99059: FOR_IN
99060: IFFALSE 99101
// begin for j := 1 to 4 do
99062: LD_ADDR_VAR 0 3
99066: PUSH
99067: DOUBLE
99068: LD_INT 1
99070: DEC
99071: ST_TO_ADDR
99072: LD_INT 4
99074: PUSH
99075: FOR_TO
99076: IFFALSE 99097
// SetSkill ( i , j , 10 ) ;
99078: LD_VAR 0 2
99082: PPUSH
99083: LD_VAR 0 3
99087: PPUSH
99088: LD_INT 10
99090: PPUSH
99091: CALL_OW 237
99095: GO 99075
99097: POP
99098: POP
// end ;
99099: GO 99059
99101: POP
99102: POP
// end ;
99103: LD_VAR 0 1
99107: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
99108: LD_INT 0
99110: PPUSH
// uc_side := your_side ;
99111: LD_ADDR_OWVAR 20
99115: PUSH
99116: LD_OWVAR 2
99120: ST_TO_ADDR
// uc_nation := nation ;
99121: LD_ADDR_OWVAR 21
99125: PUSH
99126: LD_VAR 0 1
99130: ST_TO_ADDR
// InitHc ;
99131: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
99135: LD_INT 0
99137: PPUSH
99138: LD_VAR 0 2
99142: PPUSH
99143: LD_VAR 0 3
99147: PPUSH
99148: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
99152: LD_VAR 0 4
99156: PPUSH
99157: LD_VAR 0 5
99161: PPUSH
99162: CALL_OW 428
99166: PUSH
99167: LD_INT 0
99169: EQUAL
99170: IFFALSE 99194
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
99172: CALL_OW 44
99176: PPUSH
99177: LD_VAR 0 4
99181: PPUSH
99182: LD_VAR 0 5
99186: PPUSH
99187: LD_INT 1
99189: PPUSH
99190: CALL_OW 48
// end ;
99194: LD_VAR 0 6
99198: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
99199: LD_INT 0
99201: PPUSH
99202: PPUSH
// uc_side := your_side ;
99203: LD_ADDR_OWVAR 20
99207: PUSH
99208: LD_OWVAR 2
99212: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
99213: LD_VAR 0 1
99217: PUSH
99218: LD_INT 1
99220: PUSH
99221: LD_INT 2
99223: PUSH
99224: LD_INT 3
99226: PUSH
99227: LD_INT 4
99229: PUSH
99230: LD_INT 5
99232: PUSH
99233: EMPTY
99234: LIST
99235: LIST
99236: LIST
99237: LIST
99238: LIST
99239: IN
99240: IFFALSE 99252
// uc_nation := nation_american else
99242: LD_ADDR_OWVAR 21
99246: PUSH
99247: LD_INT 1
99249: ST_TO_ADDR
99250: GO 99295
// if chassis in [ 11 , 12 , 13 , 14 ] then
99252: LD_VAR 0 1
99256: PUSH
99257: LD_INT 11
99259: PUSH
99260: LD_INT 12
99262: PUSH
99263: LD_INT 13
99265: PUSH
99266: LD_INT 14
99268: PUSH
99269: EMPTY
99270: LIST
99271: LIST
99272: LIST
99273: LIST
99274: IN
99275: IFFALSE 99287
// uc_nation := nation_arabian else
99277: LD_ADDR_OWVAR 21
99281: PUSH
99282: LD_INT 2
99284: ST_TO_ADDR
99285: GO 99295
// uc_nation := nation_russian ;
99287: LD_ADDR_OWVAR 21
99291: PUSH
99292: LD_INT 3
99294: ST_TO_ADDR
// vc_chassis := chassis ;
99295: LD_ADDR_OWVAR 37
99299: PUSH
99300: LD_VAR 0 1
99304: ST_TO_ADDR
// vc_engine := engine ;
99305: LD_ADDR_OWVAR 39
99309: PUSH
99310: LD_VAR 0 2
99314: ST_TO_ADDR
// vc_control := control ;
99315: LD_ADDR_OWVAR 38
99319: PUSH
99320: LD_VAR 0 3
99324: ST_TO_ADDR
// vc_weapon := weapon ;
99325: LD_ADDR_OWVAR 40
99329: PUSH
99330: LD_VAR 0 4
99334: ST_TO_ADDR
// un := CreateVehicle ;
99335: LD_ADDR_VAR 0 8
99339: PUSH
99340: CALL_OW 45
99344: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
99345: LD_VAR 0 8
99349: PPUSH
99350: LD_INT 0
99352: PPUSH
99353: LD_INT 5
99355: PPUSH
99356: CALL_OW 12
99360: PPUSH
99361: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
99365: LD_VAR 0 8
99369: PPUSH
99370: LD_VAR 0 5
99374: PPUSH
99375: LD_VAR 0 6
99379: PPUSH
99380: LD_INT 1
99382: PPUSH
99383: CALL_OW 48
// end ;
99387: LD_VAR 0 7
99391: RET
// export hInvincible ; every 1 do
99392: GO 99394
99394: DISABLE
// hInvincible := [ ] ;
99395: LD_ADDR_EXP 144
99399: PUSH
99400: EMPTY
99401: ST_TO_ADDR
99402: END
// every 10 do var i ;
99403: GO 99405
99405: DISABLE
99406: LD_INT 0
99408: PPUSH
// begin enable ;
99409: ENABLE
// if not hInvincible then
99410: LD_EXP 144
99414: NOT
99415: IFFALSE 99419
// exit ;
99417: GO 99463
// for i in hInvincible do
99419: LD_ADDR_VAR 0 1
99423: PUSH
99424: LD_EXP 144
99428: PUSH
99429: FOR_IN
99430: IFFALSE 99461
// if GetLives ( i ) < 1000 then
99432: LD_VAR 0 1
99436: PPUSH
99437: CALL_OW 256
99441: PUSH
99442: LD_INT 1000
99444: LESS
99445: IFFALSE 99459
// SetLives ( i , 1000 ) ;
99447: LD_VAR 0 1
99451: PPUSH
99452: LD_INT 1000
99454: PPUSH
99455: CALL_OW 234
99459: GO 99429
99461: POP
99462: POP
// end ;
99463: PPOPN 1
99465: END
// export function hHackInvincible ; var i ; begin
99466: LD_INT 0
99468: PPUSH
99469: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
99470: LD_ADDR_VAR 0 2
99474: PUSH
99475: LD_INT 2
99477: PUSH
99478: LD_INT 21
99480: PUSH
99481: LD_INT 1
99483: PUSH
99484: EMPTY
99485: LIST
99486: LIST
99487: PUSH
99488: LD_INT 21
99490: PUSH
99491: LD_INT 2
99493: PUSH
99494: EMPTY
99495: LIST
99496: LIST
99497: PUSH
99498: EMPTY
99499: LIST
99500: LIST
99501: LIST
99502: PPUSH
99503: CALL_OW 69
99507: PUSH
99508: FOR_IN
99509: IFFALSE 99570
// if IsSelected ( i ) then
99511: LD_VAR 0 2
99515: PPUSH
99516: CALL_OW 306
99520: IFFALSE 99568
// begin if i in hInvincible then
99522: LD_VAR 0 2
99526: PUSH
99527: LD_EXP 144
99531: IN
99532: IFFALSE 99552
// hInvincible := hInvincible diff i else
99534: LD_ADDR_EXP 144
99538: PUSH
99539: LD_EXP 144
99543: PUSH
99544: LD_VAR 0 2
99548: DIFF
99549: ST_TO_ADDR
99550: GO 99568
// hInvincible := hInvincible union i ;
99552: LD_ADDR_EXP 144
99556: PUSH
99557: LD_EXP 144
99561: PUSH
99562: LD_VAR 0 2
99566: UNION
99567: ST_TO_ADDR
// end ;
99568: GO 99508
99570: POP
99571: POP
// end ;
99572: LD_VAR 0 1
99576: RET
// export function hHackInvisible ; var i , j ; begin
99577: LD_INT 0
99579: PPUSH
99580: PPUSH
99581: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
99582: LD_ADDR_VAR 0 2
99586: PUSH
99587: LD_INT 21
99589: PUSH
99590: LD_INT 1
99592: PUSH
99593: EMPTY
99594: LIST
99595: LIST
99596: PPUSH
99597: CALL_OW 69
99601: PUSH
99602: FOR_IN
99603: IFFALSE 99627
// if IsSelected ( i ) then
99605: LD_VAR 0 2
99609: PPUSH
99610: CALL_OW 306
99614: IFFALSE 99625
// ComForceInvisible ( i ) ;
99616: LD_VAR 0 2
99620: PPUSH
99621: CALL_OW 496
99625: GO 99602
99627: POP
99628: POP
// end ;
99629: LD_VAR 0 1
99633: RET
// export function hHackChangeYourSide ; begin
99634: LD_INT 0
99636: PPUSH
// if your_side = 8 then
99637: LD_OWVAR 2
99641: PUSH
99642: LD_INT 8
99644: EQUAL
99645: IFFALSE 99657
// your_side := 0 else
99647: LD_ADDR_OWVAR 2
99651: PUSH
99652: LD_INT 0
99654: ST_TO_ADDR
99655: GO 99671
// your_side := your_side + 1 ;
99657: LD_ADDR_OWVAR 2
99661: PUSH
99662: LD_OWVAR 2
99666: PUSH
99667: LD_INT 1
99669: PLUS
99670: ST_TO_ADDR
// end ;
99671: LD_VAR 0 1
99675: RET
// export function hHackChangeUnitSide ; var i , j ; begin
99676: LD_INT 0
99678: PPUSH
99679: PPUSH
99680: PPUSH
// for i in all_units do
99681: LD_ADDR_VAR 0 2
99685: PUSH
99686: LD_OWVAR 3
99690: PUSH
99691: FOR_IN
99692: IFFALSE 99770
// if IsSelected ( i ) then
99694: LD_VAR 0 2
99698: PPUSH
99699: CALL_OW 306
99703: IFFALSE 99768
// begin j := GetSide ( i ) ;
99705: LD_ADDR_VAR 0 3
99709: PUSH
99710: LD_VAR 0 2
99714: PPUSH
99715: CALL_OW 255
99719: ST_TO_ADDR
// if j = 8 then
99720: LD_VAR 0 3
99724: PUSH
99725: LD_INT 8
99727: EQUAL
99728: IFFALSE 99740
// j := 0 else
99730: LD_ADDR_VAR 0 3
99734: PUSH
99735: LD_INT 0
99737: ST_TO_ADDR
99738: GO 99754
// j := j + 1 ;
99740: LD_ADDR_VAR 0 3
99744: PUSH
99745: LD_VAR 0 3
99749: PUSH
99750: LD_INT 1
99752: PLUS
99753: ST_TO_ADDR
// SetSide ( i , j ) ;
99754: LD_VAR 0 2
99758: PPUSH
99759: LD_VAR 0 3
99763: PPUSH
99764: CALL_OW 235
// end ;
99768: GO 99691
99770: POP
99771: POP
// end ;
99772: LD_VAR 0 1
99776: RET
// export function hHackFog ; begin
99777: LD_INT 0
99779: PPUSH
// FogOff ( true ) ;
99780: LD_INT 1
99782: PPUSH
99783: CALL_OW 344
// end ;
99787: LD_VAR 0 1
99791: RET
// export function hHackTeleport ( unit , x , y ) ; begin
99792: LD_INT 0
99794: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
99795: LD_VAR 0 1
99799: PPUSH
99800: LD_VAR 0 2
99804: PPUSH
99805: LD_VAR 0 3
99809: PPUSH
99810: LD_INT 1
99812: PPUSH
99813: LD_INT 1
99815: PPUSH
99816: CALL_OW 483
// CenterOnXY ( x , y ) ;
99820: LD_VAR 0 2
99824: PPUSH
99825: LD_VAR 0 3
99829: PPUSH
99830: CALL_OW 84
// end ; end_of_file
99834: LD_VAR 0 4
99838: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
99839: LD_INT 0
99841: PPUSH
99842: PPUSH
99843: PPUSH
99844: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
99845: LD_VAR 0 1
99849: PPUSH
99850: CALL_OW 264
99854: PUSH
99855: LD_EXP 33
99859: EQUAL
99860: IFFALSE 99932
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
99862: LD_INT 68
99864: PPUSH
99865: LD_VAR 0 1
99869: PPUSH
99870: CALL_OW 255
99874: PPUSH
99875: CALL_OW 321
99879: PUSH
99880: LD_INT 2
99882: EQUAL
99883: IFFALSE 99895
// eff := 70 else
99885: LD_ADDR_VAR 0 4
99889: PUSH
99890: LD_INT 70
99892: ST_TO_ADDR
99893: GO 99903
// eff := 30 ;
99895: LD_ADDR_VAR 0 4
99899: PUSH
99900: LD_INT 30
99902: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
99903: LD_VAR 0 1
99907: PPUSH
99908: CALL_OW 250
99912: PPUSH
99913: LD_VAR 0 1
99917: PPUSH
99918: CALL_OW 251
99922: PPUSH
99923: LD_VAR 0 4
99927: PPUSH
99928: CALL_OW 495
// end ; end ;
99932: LD_VAR 0 2
99936: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
99937: LD_INT 0
99939: PPUSH
// end ;
99940: LD_VAR 0 4
99944: RET
// export function SOS_Command ( cmd ) ; begin
99945: LD_INT 0
99947: PPUSH
// end ;
99948: LD_VAR 0 2
99952: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
99953: LD_INT 0
99955: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
99956: LD_VAR 0 1
99960: PUSH
99961: LD_INT 250
99963: EQUAL
99964: PUSH
99965: LD_VAR 0 2
99969: PPUSH
99970: CALL_OW 264
99974: PUSH
99975: LD_EXP 36
99979: EQUAL
99980: AND
99981: IFFALSE 100002
// MinerPlaceMine ( unit , x , y ) ;
99983: LD_VAR 0 2
99987: PPUSH
99988: LD_VAR 0 4
99992: PPUSH
99993: LD_VAR 0 5
99997: PPUSH
99998: CALL 102343 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
100002: LD_VAR 0 1
100006: PUSH
100007: LD_INT 251
100009: EQUAL
100010: PUSH
100011: LD_VAR 0 2
100015: PPUSH
100016: CALL_OW 264
100020: PUSH
100021: LD_EXP 36
100025: EQUAL
100026: AND
100027: IFFALSE 100048
// MinerDetonateMine ( unit , x , y ) ;
100029: LD_VAR 0 2
100033: PPUSH
100034: LD_VAR 0 4
100038: PPUSH
100039: LD_VAR 0 5
100043: PPUSH
100044: CALL 102620 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
100048: LD_VAR 0 1
100052: PUSH
100053: LD_INT 252
100055: EQUAL
100056: PUSH
100057: LD_VAR 0 2
100061: PPUSH
100062: CALL_OW 264
100066: PUSH
100067: LD_EXP 36
100071: EQUAL
100072: AND
100073: IFFALSE 100094
// MinerCreateMinefield ( unit , x , y ) ;
100075: LD_VAR 0 2
100079: PPUSH
100080: LD_VAR 0 4
100084: PPUSH
100085: LD_VAR 0 5
100089: PPUSH
100090: CALL 103037 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
100094: LD_VAR 0 1
100098: PUSH
100099: LD_INT 253
100101: EQUAL
100102: PUSH
100103: LD_VAR 0 2
100107: PPUSH
100108: CALL_OW 257
100112: PUSH
100113: LD_INT 5
100115: EQUAL
100116: AND
100117: IFFALSE 100138
// ComBinocular ( unit , x , y ) ;
100119: LD_VAR 0 2
100123: PPUSH
100124: LD_VAR 0 4
100128: PPUSH
100129: LD_VAR 0 5
100133: PPUSH
100134: CALL 103408 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
100138: LD_VAR 0 1
100142: PUSH
100143: LD_INT 254
100145: EQUAL
100146: PUSH
100147: LD_VAR 0 2
100151: PPUSH
100152: CALL_OW 264
100156: PUSH
100157: LD_EXP 31
100161: EQUAL
100162: AND
100163: PUSH
100164: LD_VAR 0 3
100168: PPUSH
100169: CALL_OW 263
100173: PUSH
100174: LD_INT 3
100176: EQUAL
100177: AND
100178: IFFALSE 100194
// HackDestroyVehicle ( unit , selectedUnit ) ;
100180: LD_VAR 0 2
100184: PPUSH
100185: LD_VAR 0 3
100189: PPUSH
100190: CALL 101703 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
100194: LD_VAR 0 1
100198: PUSH
100199: LD_INT 255
100201: EQUAL
100202: PUSH
100203: LD_VAR 0 2
100207: PPUSH
100208: CALL_OW 264
100212: PUSH
100213: LD_INT 14
100215: PUSH
100216: LD_INT 53
100218: PUSH
100219: EMPTY
100220: LIST
100221: LIST
100222: IN
100223: AND
100224: PUSH
100225: LD_VAR 0 4
100229: PPUSH
100230: LD_VAR 0 5
100234: PPUSH
100235: CALL_OW 488
100239: AND
100240: IFFALSE 100264
// CutTreeXYR ( unit , x , y , 12 ) ;
100242: LD_VAR 0 2
100246: PPUSH
100247: LD_VAR 0 4
100251: PPUSH
100252: LD_VAR 0 5
100256: PPUSH
100257: LD_INT 12
100259: PPUSH
100260: CALL 100269 0 4
// end ;
100264: LD_VAR 0 6
100268: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
100269: LD_INT 0
100271: PPUSH
100272: PPUSH
100273: PPUSH
100274: PPUSH
100275: PPUSH
100276: PPUSH
100277: PPUSH
100278: PPUSH
100279: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
100280: LD_VAR 0 1
100284: NOT
100285: PUSH
100286: LD_VAR 0 2
100290: PPUSH
100291: LD_VAR 0 3
100295: PPUSH
100296: CALL_OW 488
100300: NOT
100301: OR
100302: PUSH
100303: LD_VAR 0 4
100307: NOT
100308: OR
100309: IFFALSE 100313
// exit ;
100311: GO 100653
// list := [ ] ;
100313: LD_ADDR_VAR 0 13
100317: PUSH
100318: EMPTY
100319: ST_TO_ADDR
// if x - r < 0 then
100320: LD_VAR 0 2
100324: PUSH
100325: LD_VAR 0 4
100329: MINUS
100330: PUSH
100331: LD_INT 0
100333: LESS
100334: IFFALSE 100346
// min_x := 0 else
100336: LD_ADDR_VAR 0 7
100340: PUSH
100341: LD_INT 0
100343: ST_TO_ADDR
100344: GO 100362
// min_x := x - r ;
100346: LD_ADDR_VAR 0 7
100350: PUSH
100351: LD_VAR 0 2
100355: PUSH
100356: LD_VAR 0 4
100360: MINUS
100361: ST_TO_ADDR
// if y - r < 0 then
100362: LD_VAR 0 3
100366: PUSH
100367: LD_VAR 0 4
100371: MINUS
100372: PUSH
100373: LD_INT 0
100375: LESS
100376: IFFALSE 100388
// min_y := 0 else
100378: LD_ADDR_VAR 0 8
100382: PUSH
100383: LD_INT 0
100385: ST_TO_ADDR
100386: GO 100404
// min_y := y - r ;
100388: LD_ADDR_VAR 0 8
100392: PUSH
100393: LD_VAR 0 3
100397: PUSH
100398: LD_VAR 0 4
100402: MINUS
100403: ST_TO_ADDR
// max_x := x + r ;
100404: LD_ADDR_VAR 0 9
100408: PUSH
100409: LD_VAR 0 2
100413: PUSH
100414: LD_VAR 0 4
100418: PLUS
100419: ST_TO_ADDR
// max_y := y + r ;
100420: LD_ADDR_VAR 0 10
100424: PUSH
100425: LD_VAR 0 3
100429: PUSH
100430: LD_VAR 0 4
100434: PLUS
100435: ST_TO_ADDR
// for _x = min_x to max_x do
100436: LD_ADDR_VAR 0 11
100440: PUSH
100441: DOUBLE
100442: LD_VAR 0 7
100446: DEC
100447: ST_TO_ADDR
100448: LD_VAR 0 9
100452: PUSH
100453: FOR_TO
100454: IFFALSE 100571
// for _y = min_y to max_y do
100456: LD_ADDR_VAR 0 12
100460: PUSH
100461: DOUBLE
100462: LD_VAR 0 8
100466: DEC
100467: ST_TO_ADDR
100468: LD_VAR 0 10
100472: PUSH
100473: FOR_TO
100474: IFFALSE 100567
// begin if not ValidHex ( _x , _y ) then
100476: LD_VAR 0 11
100480: PPUSH
100481: LD_VAR 0 12
100485: PPUSH
100486: CALL_OW 488
100490: NOT
100491: IFFALSE 100495
// continue ;
100493: GO 100473
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
100495: LD_VAR 0 11
100499: PPUSH
100500: LD_VAR 0 12
100504: PPUSH
100505: CALL_OW 351
100509: PUSH
100510: LD_VAR 0 11
100514: PPUSH
100515: LD_VAR 0 12
100519: PPUSH
100520: CALL_OW 554
100524: AND
100525: IFFALSE 100565
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
100527: LD_ADDR_VAR 0 13
100531: PUSH
100532: LD_VAR 0 13
100536: PPUSH
100537: LD_VAR 0 13
100541: PUSH
100542: LD_INT 1
100544: PLUS
100545: PPUSH
100546: LD_VAR 0 11
100550: PUSH
100551: LD_VAR 0 12
100555: PUSH
100556: EMPTY
100557: LIST
100558: LIST
100559: PPUSH
100560: CALL_OW 2
100564: ST_TO_ADDR
// end ;
100565: GO 100473
100567: POP
100568: POP
100569: GO 100453
100571: POP
100572: POP
// if not list then
100573: LD_VAR 0 13
100577: NOT
100578: IFFALSE 100582
// exit ;
100580: GO 100653
// for i in list do
100582: LD_ADDR_VAR 0 6
100586: PUSH
100587: LD_VAR 0 13
100591: PUSH
100592: FOR_IN
100593: IFFALSE 100651
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
100595: LD_VAR 0 1
100599: PPUSH
100600: LD_STRING M
100602: PUSH
100603: LD_VAR 0 6
100607: PUSH
100608: LD_INT 1
100610: ARRAY
100611: PUSH
100612: LD_VAR 0 6
100616: PUSH
100617: LD_INT 2
100619: ARRAY
100620: PUSH
100621: LD_INT 0
100623: PUSH
100624: LD_INT 0
100626: PUSH
100627: LD_INT 0
100629: PUSH
100630: LD_INT 0
100632: PUSH
100633: EMPTY
100634: LIST
100635: LIST
100636: LIST
100637: LIST
100638: LIST
100639: LIST
100640: LIST
100641: PUSH
100642: EMPTY
100643: LIST
100644: PPUSH
100645: CALL_OW 447
100649: GO 100592
100651: POP
100652: POP
// end ;
100653: LD_VAR 0 5
100657: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
100658: LD_EXP 145
100662: NOT
100663: IFFALSE 100713
100665: GO 100667
100667: DISABLE
// begin initHack := true ;
100668: LD_ADDR_EXP 145
100672: PUSH
100673: LD_INT 1
100675: ST_TO_ADDR
// hackTanks := [ ] ;
100676: LD_ADDR_EXP 146
100680: PUSH
100681: EMPTY
100682: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
100683: LD_ADDR_EXP 147
100687: PUSH
100688: EMPTY
100689: ST_TO_ADDR
// hackLimit := 3 ;
100690: LD_ADDR_EXP 148
100694: PUSH
100695: LD_INT 3
100697: ST_TO_ADDR
// hackDist := 12 ;
100698: LD_ADDR_EXP 149
100702: PUSH
100703: LD_INT 12
100705: ST_TO_ADDR
// hackCounter := [ ] ;
100706: LD_ADDR_EXP 150
100710: PUSH
100711: EMPTY
100712: ST_TO_ADDR
// end ;
100713: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
100714: LD_EXP 145
100718: PUSH
100719: LD_INT 34
100721: PUSH
100722: LD_EXP 31
100726: PUSH
100727: EMPTY
100728: LIST
100729: LIST
100730: PPUSH
100731: CALL_OW 69
100735: AND
100736: IFFALSE 100991
100738: GO 100740
100740: DISABLE
100741: LD_INT 0
100743: PPUSH
100744: PPUSH
// begin enable ;
100745: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
100746: LD_ADDR_VAR 0 1
100750: PUSH
100751: LD_INT 34
100753: PUSH
100754: LD_EXP 31
100758: PUSH
100759: EMPTY
100760: LIST
100761: LIST
100762: PPUSH
100763: CALL_OW 69
100767: PUSH
100768: FOR_IN
100769: IFFALSE 100989
// begin if not i in hackTanks then
100771: LD_VAR 0 1
100775: PUSH
100776: LD_EXP 146
100780: IN
100781: NOT
100782: IFFALSE 100865
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
100784: LD_ADDR_EXP 146
100788: PUSH
100789: LD_EXP 146
100793: PPUSH
100794: LD_EXP 146
100798: PUSH
100799: LD_INT 1
100801: PLUS
100802: PPUSH
100803: LD_VAR 0 1
100807: PPUSH
100808: CALL_OW 1
100812: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
100813: LD_ADDR_EXP 147
100817: PUSH
100818: LD_EXP 147
100822: PPUSH
100823: LD_EXP 147
100827: PUSH
100828: LD_INT 1
100830: PLUS
100831: PPUSH
100832: EMPTY
100833: PPUSH
100834: CALL_OW 1
100838: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
100839: LD_ADDR_EXP 150
100843: PUSH
100844: LD_EXP 150
100848: PPUSH
100849: LD_EXP 150
100853: PUSH
100854: LD_INT 1
100856: PLUS
100857: PPUSH
100858: EMPTY
100859: PPUSH
100860: CALL_OW 1
100864: ST_TO_ADDR
// end ; if not IsOk ( i ) then
100865: LD_VAR 0 1
100869: PPUSH
100870: CALL_OW 302
100874: NOT
100875: IFFALSE 100888
// begin HackUnlinkAll ( i ) ;
100877: LD_VAR 0 1
100881: PPUSH
100882: CALL 100994 0 1
// continue ;
100886: GO 100768
// end ; HackCheckCapturedStatus ( i ) ;
100888: LD_VAR 0 1
100892: PPUSH
100893: CALL 101437 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
100897: LD_ADDR_VAR 0 2
100901: PUSH
100902: LD_INT 81
100904: PUSH
100905: LD_VAR 0 1
100909: PPUSH
100910: CALL_OW 255
100914: PUSH
100915: EMPTY
100916: LIST
100917: LIST
100918: PUSH
100919: LD_INT 33
100921: PUSH
100922: LD_INT 3
100924: PUSH
100925: EMPTY
100926: LIST
100927: LIST
100928: PUSH
100929: LD_INT 91
100931: PUSH
100932: LD_VAR 0 1
100936: PUSH
100937: LD_EXP 149
100941: PUSH
100942: EMPTY
100943: LIST
100944: LIST
100945: LIST
100946: PUSH
100947: LD_INT 50
100949: PUSH
100950: EMPTY
100951: LIST
100952: PUSH
100953: EMPTY
100954: LIST
100955: LIST
100956: LIST
100957: LIST
100958: PPUSH
100959: CALL_OW 69
100963: ST_TO_ADDR
// if not tmp then
100964: LD_VAR 0 2
100968: NOT
100969: IFFALSE 100973
// continue ;
100971: GO 100768
// HackLink ( i , tmp ) ;
100973: LD_VAR 0 1
100977: PPUSH
100978: LD_VAR 0 2
100982: PPUSH
100983: CALL 101130 0 2
// end ;
100987: GO 100768
100989: POP
100990: POP
// end ;
100991: PPOPN 2
100993: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
100994: LD_INT 0
100996: PPUSH
100997: PPUSH
100998: PPUSH
// if not hack in hackTanks then
100999: LD_VAR 0 1
101003: PUSH
101004: LD_EXP 146
101008: IN
101009: NOT
101010: IFFALSE 101014
// exit ;
101012: GO 101125
// index := GetElementIndex ( hackTanks , hack ) ;
101014: LD_ADDR_VAR 0 4
101018: PUSH
101019: LD_EXP 146
101023: PPUSH
101024: LD_VAR 0 1
101028: PPUSH
101029: CALL 24100 0 2
101033: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
101034: LD_EXP 147
101038: PUSH
101039: LD_VAR 0 4
101043: ARRAY
101044: IFFALSE 101125
// begin for i in hackTanksCaptured [ index ] do
101046: LD_ADDR_VAR 0 3
101050: PUSH
101051: LD_EXP 147
101055: PUSH
101056: LD_VAR 0 4
101060: ARRAY
101061: PUSH
101062: FOR_IN
101063: IFFALSE 101089
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
101065: LD_VAR 0 3
101069: PUSH
101070: LD_INT 1
101072: ARRAY
101073: PPUSH
101074: LD_VAR 0 3
101078: PUSH
101079: LD_INT 2
101081: ARRAY
101082: PPUSH
101083: CALL_OW 235
101087: GO 101062
101089: POP
101090: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
101091: LD_ADDR_EXP 147
101095: PUSH
101096: LD_EXP 147
101100: PPUSH
101101: LD_VAR 0 4
101105: PPUSH
101106: EMPTY
101107: PPUSH
101108: CALL_OW 1
101112: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
101113: LD_VAR 0 1
101117: PPUSH
101118: LD_INT 0
101120: PPUSH
101121: CALL_OW 505
// end ; end ;
101125: LD_VAR 0 2
101129: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
101130: LD_INT 0
101132: PPUSH
101133: PPUSH
101134: PPUSH
// if not hack in hackTanks or not vehicles then
101135: LD_VAR 0 1
101139: PUSH
101140: LD_EXP 146
101144: IN
101145: NOT
101146: PUSH
101147: LD_VAR 0 2
101151: NOT
101152: OR
101153: IFFALSE 101157
// exit ;
101155: GO 101432
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
101157: LD_ADDR_VAR 0 2
101161: PUSH
101162: LD_VAR 0 1
101166: PPUSH
101167: LD_VAR 0 2
101171: PPUSH
101172: LD_INT 1
101174: PPUSH
101175: LD_INT 1
101177: PPUSH
101178: CALL 24750 0 4
101182: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
101183: LD_ADDR_VAR 0 5
101187: PUSH
101188: LD_EXP 146
101192: PPUSH
101193: LD_VAR 0 1
101197: PPUSH
101198: CALL 24100 0 2
101202: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
101203: LD_EXP 147
101207: PUSH
101208: LD_VAR 0 5
101212: ARRAY
101213: PUSH
101214: LD_EXP 148
101218: LESS
101219: IFFALSE 101408
// begin for i := 1 to vehicles do
101221: LD_ADDR_VAR 0 4
101225: PUSH
101226: DOUBLE
101227: LD_INT 1
101229: DEC
101230: ST_TO_ADDR
101231: LD_VAR 0 2
101235: PUSH
101236: FOR_TO
101237: IFFALSE 101406
// begin if hackTanksCaptured [ index ] = hackLimit then
101239: LD_EXP 147
101243: PUSH
101244: LD_VAR 0 5
101248: ARRAY
101249: PUSH
101250: LD_EXP 148
101254: EQUAL
101255: IFFALSE 101259
// break ;
101257: GO 101406
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
101259: LD_ADDR_EXP 150
101263: PUSH
101264: LD_EXP 150
101268: PPUSH
101269: LD_VAR 0 5
101273: PPUSH
101274: LD_EXP 150
101278: PUSH
101279: LD_VAR 0 5
101283: ARRAY
101284: PUSH
101285: LD_INT 1
101287: PLUS
101288: PPUSH
101289: CALL_OW 1
101293: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
101294: LD_ADDR_EXP 147
101298: PUSH
101299: LD_EXP 147
101303: PPUSH
101304: LD_VAR 0 5
101308: PUSH
101309: LD_EXP 147
101313: PUSH
101314: LD_VAR 0 5
101318: ARRAY
101319: PUSH
101320: LD_INT 1
101322: PLUS
101323: PUSH
101324: EMPTY
101325: LIST
101326: LIST
101327: PPUSH
101328: LD_VAR 0 2
101332: PUSH
101333: LD_VAR 0 4
101337: ARRAY
101338: PUSH
101339: LD_VAR 0 2
101343: PUSH
101344: LD_VAR 0 4
101348: ARRAY
101349: PPUSH
101350: CALL_OW 255
101354: PUSH
101355: EMPTY
101356: LIST
101357: LIST
101358: PPUSH
101359: CALL 24315 0 3
101363: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
101364: LD_VAR 0 2
101368: PUSH
101369: LD_VAR 0 4
101373: ARRAY
101374: PPUSH
101375: LD_VAR 0 1
101379: PPUSH
101380: CALL_OW 255
101384: PPUSH
101385: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
101389: LD_VAR 0 2
101393: PUSH
101394: LD_VAR 0 4
101398: ARRAY
101399: PPUSH
101400: CALL_OW 141
// end ;
101404: GO 101236
101406: POP
101407: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
101408: LD_VAR 0 1
101412: PPUSH
101413: LD_EXP 147
101417: PUSH
101418: LD_VAR 0 5
101422: ARRAY
101423: PUSH
101424: LD_INT 0
101426: PLUS
101427: PPUSH
101428: CALL_OW 505
// end ;
101432: LD_VAR 0 3
101436: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
101437: LD_INT 0
101439: PPUSH
101440: PPUSH
101441: PPUSH
101442: PPUSH
// if not hack in hackTanks then
101443: LD_VAR 0 1
101447: PUSH
101448: LD_EXP 146
101452: IN
101453: NOT
101454: IFFALSE 101458
// exit ;
101456: GO 101698
// index := GetElementIndex ( hackTanks , hack ) ;
101458: LD_ADDR_VAR 0 4
101462: PUSH
101463: LD_EXP 146
101467: PPUSH
101468: LD_VAR 0 1
101472: PPUSH
101473: CALL 24100 0 2
101477: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
101478: LD_ADDR_VAR 0 3
101482: PUSH
101483: DOUBLE
101484: LD_EXP 147
101488: PUSH
101489: LD_VAR 0 4
101493: ARRAY
101494: INC
101495: ST_TO_ADDR
101496: LD_INT 1
101498: PUSH
101499: FOR_DOWNTO
101500: IFFALSE 101672
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
101502: LD_ADDR_VAR 0 5
101506: PUSH
101507: LD_EXP 147
101511: PUSH
101512: LD_VAR 0 4
101516: ARRAY
101517: PUSH
101518: LD_VAR 0 3
101522: ARRAY
101523: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
101524: LD_VAR 0 5
101528: PUSH
101529: LD_INT 1
101531: ARRAY
101532: PPUSH
101533: CALL_OW 302
101537: NOT
101538: PUSH
101539: LD_VAR 0 5
101543: PUSH
101544: LD_INT 1
101546: ARRAY
101547: PPUSH
101548: CALL_OW 255
101552: PUSH
101553: LD_VAR 0 1
101557: PPUSH
101558: CALL_OW 255
101562: NONEQUAL
101563: OR
101564: IFFALSE 101670
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
101566: LD_VAR 0 5
101570: PUSH
101571: LD_INT 1
101573: ARRAY
101574: PPUSH
101575: CALL_OW 305
101579: PUSH
101580: LD_VAR 0 5
101584: PUSH
101585: LD_INT 1
101587: ARRAY
101588: PPUSH
101589: CALL_OW 255
101593: PUSH
101594: LD_VAR 0 1
101598: PPUSH
101599: CALL_OW 255
101603: EQUAL
101604: AND
101605: IFFALSE 101629
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
101607: LD_VAR 0 5
101611: PUSH
101612: LD_INT 1
101614: ARRAY
101615: PPUSH
101616: LD_VAR 0 5
101620: PUSH
101621: LD_INT 2
101623: ARRAY
101624: PPUSH
101625: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
101629: LD_ADDR_EXP 147
101633: PUSH
101634: LD_EXP 147
101638: PPUSH
101639: LD_VAR 0 4
101643: PPUSH
101644: LD_EXP 147
101648: PUSH
101649: LD_VAR 0 4
101653: ARRAY
101654: PPUSH
101655: LD_VAR 0 3
101659: PPUSH
101660: CALL_OW 3
101664: PPUSH
101665: CALL_OW 1
101669: ST_TO_ADDR
// end ; end ;
101670: GO 101499
101672: POP
101673: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
101674: LD_VAR 0 1
101678: PPUSH
101679: LD_EXP 147
101683: PUSH
101684: LD_VAR 0 4
101688: ARRAY
101689: PUSH
101690: LD_INT 0
101692: PLUS
101693: PPUSH
101694: CALL_OW 505
// end ;
101698: LD_VAR 0 2
101702: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
101703: LD_INT 0
101705: PPUSH
101706: PPUSH
101707: PPUSH
101708: PPUSH
// if not hack in hackTanks then
101709: LD_VAR 0 1
101713: PUSH
101714: LD_EXP 146
101718: IN
101719: NOT
101720: IFFALSE 101724
// exit ;
101722: GO 101809
// index := GetElementIndex ( hackTanks , hack ) ;
101724: LD_ADDR_VAR 0 5
101728: PUSH
101729: LD_EXP 146
101733: PPUSH
101734: LD_VAR 0 1
101738: PPUSH
101739: CALL 24100 0 2
101743: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
101744: LD_ADDR_VAR 0 4
101748: PUSH
101749: DOUBLE
101750: LD_INT 1
101752: DEC
101753: ST_TO_ADDR
101754: LD_EXP 147
101758: PUSH
101759: LD_VAR 0 5
101763: ARRAY
101764: PUSH
101765: FOR_TO
101766: IFFALSE 101807
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
101768: LD_EXP 147
101772: PUSH
101773: LD_VAR 0 5
101777: ARRAY
101778: PUSH
101779: LD_VAR 0 4
101783: ARRAY
101784: PUSH
101785: LD_INT 1
101787: ARRAY
101788: PUSH
101789: LD_VAR 0 2
101793: EQUAL
101794: IFFALSE 101805
// KillUnit ( vehicle ) ;
101796: LD_VAR 0 2
101800: PPUSH
101801: CALL_OW 66
101805: GO 101765
101807: POP
101808: POP
// end ;
101809: LD_VAR 0 3
101813: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
101814: LD_EXP 151
101818: NOT
101819: IFFALSE 101854
101821: GO 101823
101823: DISABLE
// begin initMiner := true ;
101824: LD_ADDR_EXP 151
101828: PUSH
101829: LD_INT 1
101831: ST_TO_ADDR
// minersList := [ ] ;
101832: LD_ADDR_EXP 152
101836: PUSH
101837: EMPTY
101838: ST_TO_ADDR
// minerMinesList := [ ] ;
101839: LD_ADDR_EXP 153
101843: PUSH
101844: EMPTY
101845: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
101846: LD_ADDR_EXP 154
101850: PUSH
101851: LD_INT 5
101853: ST_TO_ADDR
// end ;
101854: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
101855: LD_EXP 151
101859: PUSH
101860: LD_INT 34
101862: PUSH
101863: LD_EXP 36
101867: PUSH
101868: EMPTY
101869: LIST
101870: LIST
101871: PPUSH
101872: CALL_OW 69
101876: AND
101877: IFFALSE 102340
101879: GO 101881
101881: DISABLE
101882: LD_INT 0
101884: PPUSH
101885: PPUSH
101886: PPUSH
101887: PPUSH
// begin enable ;
101888: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
101889: LD_ADDR_VAR 0 1
101893: PUSH
101894: LD_INT 34
101896: PUSH
101897: LD_EXP 36
101901: PUSH
101902: EMPTY
101903: LIST
101904: LIST
101905: PPUSH
101906: CALL_OW 69
101910: PUSH
101911: FOR_IN
101912: IFFALSE 101984
// begin if not i in minersList then
101914: LD_VAR 0 1
101918: PUSH
101919: LD_EXP 152
101923: IN
101924: NOT
101925: IFFALSE 101982
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
101927: LD_ADDR_EXP 152
101931: PUSH
101932: LD_EXP 152
101936: PPUSH
101937: LD_EXP 152
101941: PUSH
101942: LD_INT 1
101944: PLUS
101945: PPUSH
101946: LD_VAR 0 1
101950: PPUSH
101951: CALL_OW 1
101955: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
101956: LD_ADDR_EXP 153
101960: PUSH
101961: LD_EXP 153
101965: PPUSH
101966: LD_EXP 153
101970: PUSH
101971: LD_INT 1
101973: PLUS
101974: PPUSH
101975: EMPTY
101976: PPUSH
101977: CALL_OW 1
101981: ST_TO_ADDR
// end end ;
101982: GO 101911
101984: POP
101985: POP
// for i := minerMinesList downto 1 do
101986: LD_ADDR_VAR 0 1
101990: PUSH
101991: DOUBLE
101992: LD_EXP 153
101996: INC
101997: ST_TO_ADDR
101998: LD_INT 1
102000: PUSH
102001: FOR_DOWNTO
102002: IFFALSE 102338
// begin if IsLive ( minersList [ i ] ) then
102004: LD_EXP 152
102008: PUSH
102009: LD_VAR 0 1
102013: ARRAY
102014: PPUSH
102015: CALL_OW 300
102019: IFFALSE 102047
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
102021: LD_EXP 152
102025: PUSH
102026: LD_VAR 0 1
102030: ARRAY
102031: PPUSH
102032: LD_EXP 153
102036: PUSH
102037: LD_VAR 0 1
102041: ARRAY
102042: PPUSH
102043: CALL_OW 505
// if not minerMinesList [ i ] then
102047: LD_EXP 153
102051: PUSH
102052: LD_VAR 0 1
102056: ARRAY
102057: NOT
102058: IFFALSE 102062
// continue ;
102060: GO 102001
// for j := minerMinesList [ i ] downto 1 do
102062: LD_ADDR_VAR 0 2
102066: PUSH
102067: DOUBLE
102068: LD_EXP 153
102072: PUSH
102073: LD_VAR 0 1
102077: ARRAY
102078: INC
102079: ST_TO_ADDR
102080: LD_INT 1
102082: PUSH
102083: FOR_DOWNTO
102084: IFFALSE 102334
// begin side := GetSide ( minersList [ i ] ) ;
102086: LD_ADDR_VAR 0 3
102090: PUSH
102091: LD_EXP 152
102095: PUSH
102096: LD_VAR 0 1
102100: ARRAY
102101: PPUSH
102102: CALL_OW 255
102106: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
102107: LD_ADDR_VAR 0 4
102111: PUSH
102112: LD_EXP 153
102116: PUSH
102117: LD_VAR 0 1
102121: ARRAY
102122: PUSH
102123: LD_VAR 0 2
102127: ARRAY
102128: PUSH
102129: LD_INT 1
102131: ARRAY
102132: PPUSH
102133: LD_EXP 153
102137: PUSH
102138: LD_VAR 0 1
102142: ARRAY
102143: PUSH
102144: LD_VAR 0 2
102148: ARRAY
102149: PUSH
102150: LD_INT 2
102152: ARRAY
102153: PPUSH
102154: CALL_OW 428
102158: ST_TO_ADDR
// if not tmp then
102159: LD_VAR 0 4
102163: NOT
102164: IFFALSE 102168
// continue ;
102166: GO 102083
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
102168: LD_VAR 0 4
102172: PUSH
102173: LD_INT 81
102175: PUSH
102176: LD_VAR 0 3
102180: PUSH
102181: EMPTY
102182: LIST
102183: LIST
102184: PPUSH
102185: CALL_OW 69
102189: IN
102190: PUSH
102191: LD_EXP 153
102195: PUSH
102196: LD_VAR 0 1
102200: ARRAY
102201: PUSH
102202: LD_VAR 0 2
102206: ARRAY
102207: PUSH
102208: LD_INT 1
102210: ARRAY
102211: PPUSH
102212: LD_EXP 153
102216: PUSH
102217: LD_VAR 0 1
102221: ARRAY
102222: PUSH
102223: LD_VAR 0 2
102227: ARRAY
102228: PUSH
102229: LD_INT 2
102231: ARRAY
102232: PPUSH
102233: CALL_OW 458
102237: AND
102238: IFFALSE 102332
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
102240: LD_EXP 153
102244: PUSH
102245: LD_VAR 0 1
102249: ARRAY
102250: PUSH
102251: LD_VAR 0 2
102255: ARRAY
102256: PUSH
102257: LD_INT 1
102259: ARRAY
102260: PPUSH
102261: LD_EXP 153
102265: PUSH
102266: LD_VAR 0 1
102270: ARRAY
102271: PUSH
102272: LD_VAR 0 2
102276: ARRAY
102277: PUSH
102278: LD_INT 2
102280: ARRAY
102281: PPUSH
102282: LD_VAR 0 3
102286: PPUSH
102287: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
102291: LD_ADDR_EXP 153
102295: PUSH
102296: LD_EXP 153
102300: PPUSH
102301: LD_VAR 0 1
102305: PPUSH
102306: LD_EXP 153
102310: PUSH
102311: LD_VAR 0 1
102315: ARRAY
102316: PPUSH
102317: LD_VAR 0 2
102321: PPUSH
102322: CALL_OW 3
102326: PPUSH
102327: CALL_OW 1
102331: ST_TO_ADDR
// end ; end ;
102332: GO 102083
102334: POP
102335: POP
// end ;
102336: GO 102001
102338: POP
102339: POP
// end ;
102340: PPOPN 4
102342: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
102343: LD_INT 0
102345: PPUSH
102346: PPUSH
// result := false ;
102347: LD_ADDR_VAR 0 4
102351: PUSH
102352: LD_INT 0
102354: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
102355: LD_VAR 0 1
102359: PPUSH
102360: CALL_OW 264
102364: PUSH
102365: LD_EXP 36
102369: EQUAL
102370: NOT
102371: IFFALSE 102375
// exit ;
102373: GO 102615
// index := GetElementIndex ( minersList , unit ) ;
102375: LD_ADDR_VAR 0 5
102379: PUSH
102380: LD_EXP 152
102384: PPUSH
102385: LD_VAR 0 1
102389: PPUSH
102390: CALL 24100 0 2
102394: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
102395: LD_EXP 153
102399: PUSH
102400: LD_VAR 0 5
102404: ARRAY
102405: PUSH
102406: LD_EXP 154
102410: GREATEREQUAL
102411: IFFALSE 102415
// exit ;
102413: GO 102615
// ComMoveXY ( unit , x , y ) ;
102415: LD_VAR 0 1
102419: PPUSH
102420: LD_VAR 0 2
102424: PPUSH
102425: LD_VAR 0 3
102429: PPUSH
102430: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
102434: LD_INT 35
102436: PPUSH
102437: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
102441: LD_VAR 0 1
102445: PPUSH
102446: LD_VAR 0 2
102450: PPUSH
102451: LD_VAR 0 3
102455: PPUSH
102456: CALL 54164 0 3
102460: NOT
102461: PUSH
102462: LD_VAR 0 1
102466: PPUSH
102467: CALL_OW 314
102471: AND
102472: IFFALSE 102476
// exit ;
102474: GO 102615
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
102476: LD_VAR 0 2
102480: PPUSH
102481: LD_VAR 0 3
102485: PPUSH
102486: CALL_OW 428
102490: PUSH
102491: LD_VAR 0 1
102495: EQUAL
102496: PUSH
102497: LD_VAR 0 1
102501: PPUSH
102502: CALL_OW 314
102506: NOT
102507: AND
102508: IFFALSE 102434
// PlaySoundXY ( x , y , PlantMine ) ;
102510: LD_VAR 0 2
102514: PPUSH
102515: LD_VAR 0 3
102519: PPUSH
102520: LD_STRING PlantMine
102522: PPUSH
102523: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
102527: LD_VAR 0 2
102531: PPUSH
102532: LD_VAR 0 3
102536: PPUSH
102537: LD_VAR 0 1
102541: PPUSH
102542: CALL_OW 255
102546: PPUSH
102547: LD_INT 0
102549: PPUSH
102550: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
102554: LD_ADDR_EXP 153
102558: PUSH
102559: LD_EXP 153
102563: PPUSH
102564: LD_VAR 0 5
102568: PUSH
102569: LD_EXP 153
102573: PUSH
102574: LD_VAR 0 5
102578: ARRAY
102579: PUSH
102580: LD_INT 1
102582: PLUS
102583: PUSH
102584: EMPTY
102585: LIST
102586: LIST
102587: PPUSH
102588: LD_VAR 0 2
102592: PUSH
102593: LD_VAR 0 3
102597: PUSH
102598: EMPTY
102599: LIST
102600: LIST
102601: PPUSH
102602: CALL 24315 0 3
102606: ST_TO_ADDR
// result := true ;
102607: LD_ADDR_VAR 0 4
102611: PUSH
102612: LD_INT 1
102614: ST_TO_ADDR
// end ;
102615: LD_VAR 0 4
102619: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
102620: LD_INT 0
102622: PPUSH
102623: PPUSH
102624: PPUSH
// if not unit in minersList then
102625: LD_VAR 0 1
102629: PUSH
102630: LD_EXP 152
102634: IN
102635: NOT
102636: IFFALSE 102640
// exit ;
102638: GO 103032
// index := GetElementIndex ( minersList , unit ) ;
102640: LD_ADDR_VAR 0 6
102644: PUSH
102645: LD_EXP 152
102649: PPUSH
102650: LD_VAR 0 1
102654: PPUSH
102655: CALL 24100 0 2
102659: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
102660: LD_ADDR_VAR 0 5
102664: PUSH
102665: DOUBLE
102666: LD_EXP 153
102670: PUSH
102671: LD_VAR 0 6
102675: ARRAY
102676: INC
102677: ST_TO_ADDR
102678: LD_INT 1
102680: PUSH
102681: FOR_DOWNTO
102682: IFFALSE 102843
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
102684: LD_EXP 153
102688: PUSH
102689: LD_VAR 0 6
102693: ARRAY
102694: PUSH
102695: LD_VAR 0 5
102699: ARRAY
102700: PUSH
102701: LD_INT 1
102703: ARRAY
102704: PUSH
102705: LD_VAR 0 2
102709: EQUAL
102710: PUSH
102711: LD_EXP 153
102715: PUSH
102716: LD_VAR 0 6
102720: ARRAY
102721: PUSH
102722: LD_VAR 0 5
102726: ARRAY
102727: PUSH
102728: LD_INT 2
102730: ARRAY
102731: PUSH
102732: LD_VAR 0 3
102736: EQUAL
102737: AND
102738: IFFALSE 102841
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
102740: LD_EXP 153
102744: PUSH
102745: LD_VAR 0 6
102749: ARRAY
102750: PUSH
102751: LD_VAR 0 5
102755: ARRAY
102756: PUSH
102757: LD_INT 1
102759: ARRAY
102760: PPUSH
102761: LD_EXP 153
102765: PUSH
102766: LD_VAR 0 6
102770: ARRAY
102771: PUSH
102772: LD_VAR 0 5
102776: ARRAY
102777: PUSH
102778: LD_INT 2
102780: ARRAY
102781: PPUSH
102782: LD_VAR 0 1
102786: PPUSH
102787: CALL_OW 255
102791: PPUSH
102792: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
102796: LD_ADDR_EXP 153
102800: PUSH
102801: LD_EXP 153
102805: PPUSH
102806: LD_VAR 0 6
102810: PPUSH
102811: LD_EXP 153
102815: PUSH
102816: LD_VAR 0 6
102820: ARRAY
102821: PPUSH
102822: LD_VAR 0 5
102826: PPUSH
102827: CALL_OW 3
102831: PPUSH
102832: CALL_OW 1
102836: ST_TO_ADDR
// exit ;
102837: POP
102838: POP
102839: GO 103032
// end ; end ;
102841: GO 102681
102843: POP
102844: POP
// for i := minerMinesList [ index ] downto 1 do
102845: LD_ADDR_VAR 0 5
102849: PUSH
102850: DOUBLE
102851: LD_EXP 153
102855: PUSH
102856: LD_VAR 0 6
102860: ARRAY
102861: INC
102862: ST_TO_ADDR
102863: LD_INT 1
102865: PUSH
102866: FOR_DOWNTO
102867: IFFALSE 103030
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
102869: LD_EXP 153
102873: PUSH
102874: LD_VAR 0 6
102878: ARRAY
102879: PUSH
102880: LD_VAR 0 5
102884: ARRAY
102885: PUSH
102886: LD_INT 1
102888: ARRAY
102889: PPUSH
102890: LD_EXP 153
102894: PUSH
102895: LD_VAR 0 6
102899: ARRAY
102900: PUSH
102901: LD_VAR 0 5
102905: ARRAY
102906: PUSH
102907: LD_INT 2
102909: ARRAY
102910: PPUSH
102911: LD_VAR 0 2
102915: PPUSH
102916: LD_VAR 0 3
102920: PPUSH
102921: CALL_OW 298
102925: PUSH
102926: LD_INT 6
102928: LESS
102929: IFFALSE 103028
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
102931: LD_EXP 153
102935: PUSH
102936: LD_VAR 0 6
102940: ARRAY
102941: PUSH
102942: LD_VAR 0 5
102946: ARRAY
102947: PUSH
102948: LD_INT 1
102950: ARRAY
102951: PPUSH
102952: LD_EXP 153
102956: PUSH
102957: LD_VAR 0 6
102961: ARRAY
102962: PUSH
102963: LD_VAR 0 5
102967: ARRAY
102968: PUSH
102969: LD_INT 2
102971: ARRAY
102972: PPUSH
102973: LD_VAR 0 1
102977: PPUSH
102978: CALL_OW 255
102982: PPUSH
102983: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
102987: LD_ADDR_EXP 153
102991: PUSH
102992: LD_EXP 153
102996: PPUSH
102997: LD_VAR 0 6
103001: PPUSH
103002: LD_EXP 153
103006: PUSH
103007: LD_VAR 0 6
103011: ARRAY
103012: PPUSH
103013: LD_VAR 0 5
103017: PPUSH
103018: CALL_OW 3
103022: PPUSH
103023: CALL_OW 1
103027: ST_TO_ADDR
// end ; end ;
103028: GO 102866
103030: POP
103031: POP
// end ;
103032: LD_VAR 0 4
103036: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
103037: LD_INT 0
103039: PPUSH
103040: PPUSH
103041: PPUSH
103042: PPUSH
103043: PPUSH
103044: PPUSH
103045: PPUSH
103046: PPUSH
103047: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
103048: LD_VAR 0 1
103052: PPUSH
103053: CALL_OW 264
103057: PUSH
103058: LD_EXP 36
103062: EQUAL
103063: NOT
103064: PUSH
103065: LD_VAR 0 1
103069: PUSH
103070: LD_EXP 152
103074: IN
103075: NOT
103076: OR
103077: IFFALSE 103081
// exit ;
103079: GO 103403
// index := GetElementIndex ( minersList , unit ) ;
103081: LD_ADDR_VAR 0 6
103085: PUSH
103086: LD_EXP 152
103090: PPUSH
103091: LD_VAR 0 1
103095: PPUSH
103096: CALL 24100 0 2
103100: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
103101: LD_ADDR_VAR 0 8
103105: PUSH
103106: LD_EXP 154
103110: PUSH
103111: LD_EXP 153
103115: PUSH
103116: LD_VAR 0 6
103120: ARRAY
103121: MINUS
103122: ST_TO_ADDR
// if not minesFreeAmount then
103123: LD_VAR 0 8
103127: NOT
103128: IFFALSE 103132
// exit ;
103130: GO 103403
// tmp := [ ] ;
103132: LD_ADDR_VAR 0 7
103136: PUSH
103137: EMPTY
103138: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
103139: LD_ADDR_VAR 0 5
103143: PUSH
103144: DOUBLE
103145: LD_INT 1
103147: DEC
103148: ST_TO_ADDR
103149: LD_VAR 0 8
103153: PUSH
103154: FOR_TO
103155: IFFALSE 103350
// begin _d := rand ( 0 , 5 ) ;
103157: LD_ADDR_VAR 0 11
103161: PUSH
103162: LD_INT 0
103164: PPUSH
103165: LD_INT 5
103167: PPUSH
103168: CALL_OW 12
103172: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
103173: LD_ADDR_VAR 0 12
103177: PUSH
103178: LD_INT 2
103180: PPUSH
103181: LD_INT 6
103183: PPUSH
103184: CALL_OW 12
103188: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
103189: LD_ADDR_VAR 0 9
103193: PUSH
103194: LD_VAR 0 2
103198: PPUSH
103199: LD_VAR 0 11
103203: PPUSH
103204: LD_VAR 0 12
103208: PPUSH
103209: CALL_OW 272
103213: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
103214: LD_ADDR_VAR 0 10
103218: PUSH
103219: LD_VAR 0 3
103223: PPUSH
103224: LD_VAR 0 11
103228: PPUSH
103229: LD_VAR 0 12
103233: PPUSH
103234: CALL_OW 273
103238: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
103239: LD_VAR 0 9
103243: PPUSH
103244: LD_VAR 0 10
103248: PPUSH
103249: CALL_OW 488
103253: PUSH
103254: LD_VAR 0 9
103258: PUSH
103259: LD_VAR 0 10
103263: PUSH
103264: EMPTY
103265: LIST
103266: LIST
103267: PUSH
103268: LD_VAR 0 7
103272: IN
103273: NOT
103274: AND
103275: PUSH
103276: LD_VAR 0 9
103280: PPUSH
103281: LD_VAR 0 10
103285: PPUSH
103286: CALL_OW 458
103290: NOT
103291: AND
103292: IFFALSE 103334
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
103294: LD_ADDR_VAR 0 7
103298: PUSH
103299: LD_VAR 0 7
103303: PPUSH
103304: LD_VAR 0 7
103308: PUSH
103309: LD_INT 1
103311: PLUS
103312: PPUSH
103313: LD_VAR 0 9
103317: PUSH
103318: LD_VAR 0 10
103322: PUSH
103323: EMPTY
103324: LIST
103325: LIST
103326: PPUSH
103327: CALL_OW 1
103331: ST_TO_ADDR
103332: GO 103348
// i := i - 1 ;
103334: LD_ADDR_VAR 0 5
103338: PUSH
103339: LD_VAR 0 5
103343: PUSH
103344: LD_INT 1
103346: MINUS
103347: ST_TO_ADDR
// end ;
103348: GO 103154
103350: POP
103351: POP
// for i in tmp do
103352: LD_ADDR_VAR 0 5
103356: PUSH
103357: LD_VAR 0 7
103361: PUSH
103362: FOR_IN
103363: IFFALSE 103401
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
103365: LD_VAR 0 1
103369: PPUSH
103370: LD_VAR 0 5
103374: PUSH
103375: LD_INT 1
103377: ARRAY
103378: PPUSH
103379: LD_VAR 0 5
103383: PUSH
103384: LD_INT 2
103386: ARRAY
103387: PPUSH
103388: CALL 102343 0 3
103392: NOT
103393: IFFALSE 103399
// exit ;
103395: POP
103396: POP
103397: GO 103403
103399: GO 103362
103401: POP
103402: POP
// end ;
103403: LD_VAR 0 4
103407: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
103408: LD_INT 0
103410: PPUSH
103411: PPUSH
103412: PPUSH
103413: PPUSH
103414: PPUSH
103415: PPUSH
103416: PPUSH
// if not GetClass ( unit ) = class_sniper then
103417: LD_VAR 0 1
103421: PPUSH
103422: CALL_OW 257
103426: PUSH
103427: LD_INT 5
103429: EQUAL
103430: NOT
103431: IFFALSE 103435
// exit ;
103433: GO 103823
// dist := 8 ;
103435: LD_ADDR_VAR 0 5
103439: PUSH
103440: LD_INT 8
103442: ST_TO_ADDR
// viewRange := 12 ;
103443: LD_ADDR_VAR 0 7
103447: PUSH
103448: LD_INT 12
103450: ST_TO_ADDR
// side := GetSide ( unit ) ;
103451: LD_ADDR_VAR 0 6
103455: PUSH
103456: LD_VAR 0 1
103460: PPUSH
103461: CALL_OW 255
103465: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
103466: LD_INT 61
103468: PPUSH
103469: LD_VAR 0 6
103473: PPUSH
103474: CALL_OW 321
103478: PUSH
103479: LD_INT 2
103481: EQUAL
103482: IFFALSE 103492
// viewRange := 16 ;
103484: LD_ADDR_VAR 0 7
103488: PUSH
103489: LD_INT 16
103491: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
103492: LD_VAR 0 1
103496: PPUSH
103497: LD_VAR 0 2
103501: PPUSH
103502: LD_VAR 0 3
103506: PPUSH
103507: CALL_OW 297
103511: PUSH
103512: LD_VAR 0 5
103516: GREATER
103517: IFFALSE 103596
// begin ComMoveXY ( unit , x , y ) ;
103519: LD_VAR 0 1
103523: PPUSH
103524: LD_VAR 0 2
103528: PPUSH
103529: LD_VAR 0 3
103533: PPUSH
103534: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
103538: LD_INT 35
103540: PPUSH
103541: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
103545: LD_VAR 0 1
103549: PPUSH
103550: LD_VAR 0 2
103554: PPUSH
103555: LD_VAR 0 3
103559: PPUSH
103560: CALL 54164 0 3
103564: NOT
103565: IFFALSE 103569
// exit ;
103567: GO 103823
// until GetDistUnitXY ( unit , x , y ) < dist ;
103569: LD_VAR 0 1
103573: PPUSH
103574: LD_VAR 0 2
103578: PPUSH
103579: LD_VAR 0 3
103583: PPUSH
103584: CALL_OW 297
103588: PUSH
103589: LD_VAR 0 5
103593: LESS
103594: IFFALSE 103538
// end ; ComTurnXY ( unit , x , y ) ;
103596: LD_VAR 0 1
103600: PPUSH
103601: LD_VAR 0 2
103605: PPUSH
103606: LD_VAR 0 3
103610: PPUSH
103611: CALL_OW 118
// wait ( 5 ) ;
103615: LD_INT 5
103617: PPUSH
103618: CALL_OW 67
// _d := GetDir ( unit ) ;
103622: LD_ADDR_VAR 0 10
103626: PUSH
103627: LD_VAR 0 1
103631: PPUSH
103632: CALL_OW 254
103636: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
103637: LD_ADDR_VAR 0 8
103641: PUSH
103642: LD_VAR 0 1
103646: PPUSH
103647: CALL_OW 250
103651: PPUSH
103652: LD_VAR 0 10
103656: PPUSH
103657: LD_VAR 0 5
103661: PPUSH
103662: CALL_OW 272
103666: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
103667: LD_ADDR_VAR 0 9
103671: PUSH
103672: LD_VAR 0 1
103676: PPUSH
103677: CALL_OW 251
103681: PPUSH
103682: LD_VAR 0 10
103686: PPUSH
103687: LD_VAR 0 5
103691: PPUSH
103692: CALL_OW 273
103696: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
103697: LD_VAR 0 8
103701: PPUSH
103702: LD_VAR 0 9
103706: PPUSH
103707: CALL_OW 488
103711: NOT
103712: IFFALSE 103716
// exit ;
103714: GO 103823
// ComAnimCustom ( unit , 1 ) ;
103716: LD_VAR 0 1
103720: PPUSH
103721: LD_INT 1
103723: PPUSH
103724: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
103728: LD_VAR 0 8
103732: PPUSH
103733: LD_VAR 0 9
103737: PPUSH
103738: LD_VAR 0 6
103742: PPUSH
103743: LD_VAR 0 7
103747: PPUSH
103748: CALL_OW 330
// repeat wait ( 1 ) ;
103752: LD_INT 1
103754: PPUSH
103755: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
103759: LD_VAR 0 1
103763: PPUSH
103764: CALL_OW 316
103768: PUSH
103769: LD_VAR 0 1
103773: PPUSH
103774: CALL_OW 314
103778: OR
103779: PUSH
103780: LD_VAR 0 1
103784: PPUSH
103785: CALL_OW 302
103789: NOT
103790: OR
103791: PUSH
103792: LD_VAR 0 1
103796: PPUSH
103797: CALL_OW 301
103801: OR
103802: IFFALSE 103752
// RemoveSeeing ( _x , _y , side ) ;
103804: LD_VAR 0 8
103808: PPUSH
103809: LD_VAR 0 9
103813: PPUSH
103814: LD_VAR 0 6
103818: PPUSH
103819: CALL_OW 331
// end ; end_of_file
103823: LD_VAR 0 4
103827: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking , to_heal , healers , to_repair , repairs , empty_vehs , side ; begin
103828: LD_INT 0
103830: PPUSH
103831: PPUSH
103832: PPUSH
103833: PPUSH
103834: PPUSH
103835: PPUSH
103836: PPUSH
103837: PPUSH
103838: PPUSH
103839: PPUSH
103840: PPUSH
103841: PPUSH
103842: PPUSH
103843: PPUSH
103844: PPUSH
103845: PPUSH
103846: PPUSH
103847: PPUSH
103848: PPUSH
103849: PPUSH
103850: PPUSH
103851: PPUSH
103852: PPUSH
103853: PPUSH
103854: PPUSH
103855: PPUSH
103856: PPUSH
103857: PPUSH
103858: PPUSH
103859: PPUSH
103860: PPUSH
103861: PPUSH
103862: PPUSH
103863: PPUSH
// if not list then
103864: LD_VAR 0 1
103868: NOT
103869: IFFALSE 103873
// exit ;
103871: GO 108532
// base := list [ 1 ] ;
103873: LD_ADDR_VAR 0 3
103877: PUSH
103878: LD_VAR 0 1
103882: PUSH
103883: LD_INT 1
103885: ARRAY
103886: ST_TO_ADDR
// group := list [ 2 ] ;
103887: LD_ADDR_VAR 0 4
103891: PUSH
103892: LD_VAR 0 1
103896: PUSH
103897: LD_INT 2
103899: ARRAY
103900: ST_TO_ADDR
// path := list [ 3 ] ;
103901: LD_ADDR_VAR 0 5
103905: PUSH
103906: LD_VAR 0 1
103910: PUSH
103911: LD_INT 3
103913: ARRAY
103914: ST_TO_ADDR
// flags := list [ 4 ] ;
103915: LD_ADDR_VAR 0 6
103919: PUSH
103920: LD_VAR 0 1
103924: PUSH
103925: LD_INT 4
103927: ARRAY
103928: ST_TO_ADDR
// mined := [ ] ;
103929: LD_ADDR_VAR 0 27
103933: PUSH
103934: EMPTY
103935: ST_TO_ADDR
// bombed := [ ] ;
103936: LD_ADDR_VAR 0 28
103940: PUSH
103941: EMPTY
103942: ST_TO_ADDR
// healers := [ ] ;
103943: LD_ADDR_VAR 0 31
103947: PUSH
103948: EMPTY
103949: ST_TO_ADDR
// to_heal := [ ] ;
103950: LD_ADDR_VAR 0 30
103954: PUSH
103955: EMPTY
103956: ST_TO_ADDR
// repairs := [ ] ;
103957: LD_ADDR_VAR 0 33
103961: PUSH
103962: EMPTY
103963: ST_TO_ADDR
// to_repair := [ ] ;
103964: LD_ADDR_VAR 0 32
103968: PUSH
103969: EMPTY
103970: ST_TO_ADDR
// if not group or not path then
103971: LD_VAR 0 4
103975: NOT
103976: PUSH
103977: LD_VAR 0 5
103981: NOT
103982: OR
103983: IFFALSE 103987
// exit ;
103985: GO 108532
// side := GetSide ( group [ 1 ] ) ;
103987: LD_ADDR_VAR 0 35
103991: PUSH
103992: LD_VAR 0 4
103996: PUSH
103997: LD_INT 1
103999: ARRAY
104000: PPUSH
104001: CALL_OW 255
104005: ST_TO_ADDR
// if flags then
104006: LD_VAR 0 6
104010: IFFALSE 104154
// begin f_ignore_area := flags [ 1 ] ;
104012: LD_ADDR_VAR 0 17
104016: PUSH
104017: LD_VAR 0 6
104021: PUSH
104022: LD_INT 1
104024: ARRAY
104025: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
104026: LD_ADDR_VAR 0 18
104030: PUSH
104031: LD_VAR 0 6
104035: PUSH
104036: LD_INT 2
104038: ARRAY
104039: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
104040: LD_ADDR_VAR 0 19
104044: PUSH
104045: LD_VAR 0 6
104049: PUSH
104050: LD_INT 3
104052: ARRAY
104053: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
104054: LD_ADDR_VAR 0 20
104058: PUSH
104059: LD_VAR 0 6
104063: PUSH
104064: LD_INT 4
104066: ARRAY
104067: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
104068: LD_ADDR_VAR 0 21
104072: PUSH
104073: LD_VAR 0 6
104077: PUSH
104078: LD_INT 5
104080: ARRAY
104081: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
104082: LD_ADDR_VAR 0 22
104086: PUSH
104087: LD_VAR 0 6
104091: PUSH
104092: LD_INT 6
104094: ARRAY
104095: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
104096: LD_ADDR_VAR 0 23
104100: PUSH
104101: LD_VAR 0 6
104105: PUSH
104106: LD_INT 7
104108: ARRAY
104109: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
104110: LD_ADDR_VAR 0 24
104114: PUSH
104115: LD_VAR 0 6
104119: PUSH
104120: LD_INT 8
104122: ARRAY
104123: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
104124: LD_ADDR_VAR 0 25
104128: PUSH
104129: LD_VAR 0 6
104133: PUSH
104134: LD_INT 9
104136: ARRAY
104137: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
104138: LD_ADDR_VAR 0 26
104142: PUSH
104143: LD_VAR 0 6
104147: PUSH
104148: LD_INT 10
104150: ARRAY
104151: ST_TO_ADDR
// end else
104152: GO 104234
// begin f_ignore_area := false ;
104154: LD_ADDR_VAR 0 17
104158: PUSH
104159: LD_INT 0
104161: ST_TO_ADDR
// f_capture := false ;
104162: LD_ADDR_VAR 0 18
104166: PUSH
104167: LD_INT 0
104169: ST_TO_ADDR
// f_ignore_civ := false ;
104170: LD_ADDR_VAR 0 19
104174: PUSH
104175: LD_INT 0
104177: ST_TO_ADDR
// f_murder := false ;
104178: LD_ADDR_VAR 0 20
104182: PUSH
104183: LD_INT 0
104185: ST_TO_ADDR
// f_mines := false ;
104186: LD_ADDR_VAR 0 21
104190: PUSH
104191: LD_INT 0
104193: ST_TO_ADDR
// f_repair := false ;
104194: LD_ADDR_VAR 0 22
104198: PUSH
104199: LD_INT 0
104201: ST_TO_ADDR
// f_heal := false ;
104202: LD_ADDR_VAR 0 23
104206: PUSH
104207: LD_INT 0
104209: ST_TO_ADDR
// f_spacetime := false ;
104210: LD_ADDR_VAR 0 24
104214: PUSH
104215: LD_INT 0
104217: ST_TO_ADDR
// f_attack_depot := false ;
104218: LD_ADDR_VAR 0 25
104222: PUSH
104223: LD_INT 0
104225: ST_TO_ADDR
// f_crawl := false ;
104226: LD_ADDR_VAR 0 26
104230: PUSH
104231: LD_INT 0
104233: ST_TO_ADDR
// end ; if f_heal then
104234: LD_VAR 0 23
104238: IFFALSE 104265
// healers := UnitFilter ( group , [ f_class , 4 ] ) ;
104240: LD_ADDR_VAR 0 31
104244: PUSH
104245: LD_VAR 0 4
104249: PPUSH
104250: LD_INT 25
104252: PUSH
104253: LD_INT 4
104255: PUSH
104256: EMPTY
104257: LIST
104258: LIST
104259: PPUSH
104260: CALL_OW 72
104264: ST_TO_ADDR
// if f_repair then
104265: LD_VAR 0 22
104269: IFFALSE 104296
// repairs := UnitFilter ( group , [ f_class , 3 ] ) ;
104271: LD_ADDR_VAR 0 33
104275: PUSH
104276: LD_VAR 0 4
104280: PPUSH
104281: LD_INT 25
104283: PUSH
104284: LD_INT 3
104286: PUSH
104287: EMPTY
104288: LIST
104289: LIST
104290: PPUSH
104291: CALL_OW 72
104295: ST_TO_ADDR
// units_path := [ ] ;
104296: LD_ADDR_VAR 0 16
104300: PUSH
104301: EMPTY
104302: ST_TO_ADDR
// for i = 1 to group do
104303: LD_ADDR_VAR 0 7
104307: PUSH
104308: DOUBLE
104309: LD_INT 1
104311: DEC
104312: ST_TO_ADDR
104313: LD_VAR 0 4
104317: PUSH
104318: FOR_TO
104319: IFFALSE 104348
// units_path := Replace ( units_path , i , path ) ;
104321: LD_ADDR_VAR 0 16
104325: PUSH
104326: LD_VAR 0 16
104330: PPUSH
104331: LD_VAR 0 7
104335: PPUSH
104336: LD_VAR 0 5
104340: PPUSH
104341: CALL_OW 1
104345: ST_TO_ADDR
104346: GO 104318
104348: POP
104349: POP
// repeat for i = group downto 1 do
104350: LD_ADDR_VAR 0 7
104354: PUSH
104355: DOUBLE
104356: LD_VAR 0 4
104360: INC
104361: ST_TO_ADDR
104362: LD_INT 1
104364: PUSH
104365: FOR_DOWNTO
104366: IFFALSE 108488
// begin wait ( 5 ) ;
104368: LD_INT 5
104370: PPUSH
104371: CALL_OW 67
// tmp := [ ] ;
104375: LD_ADDR_VAR 0 14
104379: PUSH
104380: EMPTY
104381: ST_TO_ADDR
// attacking := false ;
104382: LD_ADDR_VAR 0 29
104386: PUSH
104387: LD_INT 0
104389: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
104390: LD_VAR 0 4
104394: PUSH
104395: LD_VAR 0 7
104399: ARRAY
104400: PPUSH
104401: CALL_OW 301
104405: PUSH
104406: LD_VAR 0 4
104410: PUSH
104411: LD_VAR 0 7
104415: ARRAY
104416: NOT
104417: OR
104418: IFFALSE 104527
// begin if GetType ( group [ i ] ) = unit_human then
104420: LD_VAR 0 4
104424: PUSH
104425: LD_VAR 0 7
104429: ARRAY
104430: PPUSH
104431: CALL_OW 247
104435: PUSH
104436: LD_INT 1
104438: EQUAL
104439: IFFALSE 104485
// begin to_heal := to_heal diff group [ i ] ;
104441: LD_ADDR_VAR 0 30
104445: PUSH
104446: LD_VAR 0 30
104450: PUSH
104451: LD_VAR 0 4
104455: PUSH
104456: LD_VAR 0 7
104460: ARRAY
104461: DIFF
104462: ST_TO_ADDR
// healers := healers diff group [ i ] ;
104463: LD_ADDR_VAR 0 31
104467: PUSH
104468: LD_VAR 0 31
104472: PUSH
104473: LD_VAR 0 4
104477: PUSH
104478: LD_VAR 0 7
104482: ARRAY
104483: DIFF
104484: ST_TO_ADDR
// end ; group := Delete ( group , i ) ;
104485: LD_ADDR_VAR 0 4
104489: PUSH
104490: LD_VAR 0 4
104494: PPUSH
104495: LD_VAR 0 7
104499: PPUSH
104500: CALL_OW 3
104504: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
104505: LD_ADDR_VAR 0 16
104509: PUSH
104510: LD_VAR 0 16
104514: PPUSH
104515: LD_VAR 0 7
104519: PPUSH
104520: CALL_OW 3
104524: ST_TO_ADDR
// continue ;
104525: GO 104365
// end ; if f_repair then
104527: LD_VAR 0 22
104531: IFFALSE 105020
// begin if GetType ( group [ i ] ) = unit_vehicle then
104533: LD_VAR 0 4
104537: PUSH
104538: LD_VAR 0 7
104542: ARRAY
104543: PPUSH
104544: CALL_OW 247
104548: PUSH
104549: LD_INT 2
104551: EQUAL
104552: IFFALSE 104742
// begin if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_repair then
104554: LD_VAR 0 4
104558: PUSH
104559: LD_VAR 0 7
104563: ARRAY
104564: PPUSH
104565: CALL_OW 256
104569: PUSH
104570: LD_INT 700
104572: LESS
104573: PUSH
104574: LD_VAR 0 4
104578: PUSH
104579: LD_VAR 0 7
104583: ARRAY
104584: PUSH
104585: LD_VAR 0 32
104589: IN
104590: NOT
104591: AND
104592: IFFALSE 104616
// to_repair := to_repair union group [ i ] ;
104594: LD_ADDR_VAR 0 32
104598: PUSH
104599: LD_VAR 0 32
104603: PUSH
104604: LD_VAR 0 4
104608: PUSH
104609: LD_VAR 0 7
104613: ARRAY
104614: UNION
104615: ST_TO_ADDR
// if GetLives ( group [ i ] ) = 1000 and group [ i ] in to_repair then
104616: LD_VAR 0 4
104620: PUSH
104621: LD_VAR 0 7
104625: ARRAY
104626: PPUSH
104627: CALL_OW 256
104631: PUSH
104632: LD_INT 1000
104634: EQUAL
104635: PUSH
104636: LD_VAR 0 4
104640: PUSH
104641: LD_VAR 0 7
104645: ARRAY
104646: PUSH
104647: LD_VAR 0 32
104651: IN
104652: AND
104653: IFFALSE 104677
// to_repair := to_repair diff group [ i ] ;
104655: LD_ADDR_VAR 0 32
104659: PUSH
104660: LD_VAR 0 32
104664: PUSH
104665: LD_VAR 0 4
104669: PUSH
104670: LD_VAR 0 7
104674: ARRAY
104675: DIFF
104676: ST_TO_ADDR
// if group [ i ] in to_repair then
104677: LD_VAR 0 4
104681: PUSH
104682: LD_VAR 0 7
104686: ARRAY
104687: PUSH
104688: LD_VAR 0 32
104692: IN
104693: IFFALSE 104740
// begin if not IsInArea ( group [ i ] , f_repair ) then
104695: LD_VAR 0 4
104699: PUSH
104700: LD_VAR 0 7
104704: ARRAY
104705: PPUSH
104706: LD_VAR 0 22
104710: PPUSH
104711: CALL_OW 308
104715: NOT
104716: IFFALSE 104738
// ComMoveToArea ( group [ i ] , f_repair ) ;
104718: LD_VAR 0 4
104722: PUSH
104723: LD_VAR 0 7
104727: ARRAY
104728: PPUSH
104729: LD_VAR 0 22
104733: PPUSH
104734: CALL_OW 113
// continue ;
104738: GO 104365
// end ; end else
104740: GO 105020
// if group [ i ] in repairs then
104742: LD_VAR 0 4
104746: PUSH
104747: LD_VAR 0 7
104751: ARRAY
104752: PUSH
104753: LD_VAR 0 33
104757: IN
104758: IFFALSE 105020
// begin if IsInUnit ( group [ i ] ) then
104760: LD_VAR 0 4
104764: PUSH
104765: LD_VAR 0 7
104769: ARRAY
104770: PPUSH
104771: CALL_OW 310
104775: IFFALSE 104843
// begin z := IsInUnit ( group [ i ] ) ;
104777: LD_ADDR_VAR 0 13
104781: PUSH
104782: LD_VAR 0 4
104786: PUSH
104787: LD_VAR 0 7
104791: ARRAY
104792: PPUSH
104793: CALL_OW 310
104797: ST_TO_ADDR
// if z in to_repair and IsInArea ( z , f_repair ) then
104798: LD_VAR 0 13
104802: PUSH
104803: LD_VAR 0 32
104807: IN
104808: PUSH
104809: LD_VAR 0 13
104813: PPUSH
104814: LD_VAR 0 22
104818: PPUSH
104819: CALL_OW 308
104823: AND
104824: IFFALSE 104841
// ComExitVehicle ( group [ i ] ) ;
104826: LD_VAR 0 4
104830: PUSH
104831: LD_VAR 0 7
104835: ARRAY
104836: PPUSH
104837: CALL_OW 121
// end else
104841: GO 105020
// begin z := UnitFilter ( group , [ [ f_inarea , f_repair ] , [ f_empty ] ] ) ;
104843: LD_ADDR_VAR 0 13
104847: PUSH
104848: LD_VAR 0 4
104852: PPUSH
104853: LD_INT 95
104855: PUSH
104856: LD_VAR 0 22
104860: PUSH
104861: EMPTY
104862: LIST
104863: LIST
104864: PUSH
104865: LD_INT 58
104867: PUSH
104868: EMPTY
104869: LIST
104870: PUSH
104871: EMPTY
104872: LIST
104873: LIST
104874: PPUSH
104875: CALL_OW 72
104879: ST_TO_ADDR
// if not HasTask ( group [ i ] ) then
104880: LD_VAR 0 4
104884: PUSH
104885: LD_VAR 0 7
104889: ARRAY
104890: PPUSH
104891: CALL_OW 314
104895: NOT
104896: IFFALSE 105018
// begin x := NearestUnitToUnit ( z , group [ i ] ) ;
104898: LD_ADDR_VAR 0 10
104902: PUSH
104903: LD_VAR 0 13
104907: PPUSH
104908: LD_VAR 0 4
104912: PUSH
104913: LD_VAR 0 7
104917: ARRAY
104918: PPUSH
104919: CALL_OW 74
104923: ST_TO_ADDR
// if not x then
104924: LD_VAR 0 10
104928: NOT
104929: IFFALSE 104933
// continue ;
104931: GO 104365
// if GetLives ( x ) < 1000 then
104933: LD_VAR 0 10
104937: PPUSH
104938: CALL_OW 256
104942: PUSH
104943: LD_INT 1000
104945: LESS
104946: IFFALSE 104970
// ComRepairVehicle ( group [ i ] , x ) else
104948: LD_VAR 0 4
104952: PUSH
104953: LD_VAR 0 7
104957: ARRAY
104958: PPUSH
104959: LD_VAR 0 10
104963: PPUSH
104964: CALL_OW 129
104968: GO 105018
// if not ( f_heal and GetLives ( group [ i ] ) < 1000 ) then
104970: LD_VAR 0 23
104974: PUSH
104975: LD_VAR 0 4
104979: PUSH
104980: LD_VAR 0 7
104984: ARRAY
104985: PPUSH
104986: CALL_OW 256
104990: PUSH
104991: LD_INT 1000
104993: LESS
104994: AND
104995: NOT
104996: IFFALSE 105018
// ComEnterUnit ( group [ i ] , x ) ;
104998: LD_VAR 0 4
105002: PUSH
105003: LD_VAR 0 7
105007: ARRAY
105008: PPUSH
105009: LD_VAR 0 10
105013: PPUSH
105014: CALL_OW 120
// end ; continue ;
105018: GO 104365
// end ; end ; end ; if f_heal and GetType ( group [ i ] ) = unit_human then
105020: LD_VAR 0 23
105024: PUSH
105025: LD_VAR 0 4
105029: PUSH
105030: LD_VAR 0 7
105034: ARRAY
105035: PPUSH
105036: CALL_OW 247
105040: PUSH
105041: LD_INT 1
105043: EQUAL
105044: AND
105045: IFFALSE 105523
// begin if group [ i ] in healers then
105047: LD_VAR 0 4
105051: PUSH
105052: LD_VAR 0 7
105056: ARRAY
105057: PUSH
105058: LD_VAR 0 31
105062: IN
105063: IFFALSE 105336
// begin if not IsInArea ( group [ i ] , f_heal ) and not HasTask ( group [ i ] ) then
105065: LD_VAR 0 4
105069: PUSH
105070: LD_VAR 0 7
105074: ARRAY
105075: PPUSH
105076: LD_VAR 0 23
105080: PPUSH
105081: CALL_OW 308
105085: NOT
105086: PUSH
105087: LD_VAR 0 4
105091: PUSH
105092: LD_VAR 0 7
105096: ARRAY
105097: PPUSH
105098: CALL_OW 314
105102: NOT
105103: AND
105104: IFFALSE 105128
// ComMoveToArea ( group [ i ] , f_heal ) else
105106: LD_VAR 0 4
105110: PUSH
105111: LD_VAR 0 7
105115: ARRAY
105116: PPUSH
105117: LD_VAR 0 23
105121: PPUSH
105122: CALL_OW 113
105126: GO 105334
// if GetLives ( HealTarget ( group [ i ] ) ) = 1000 then
105128: LD_VAR 0 4
105132: PUSH
105133: LD_VAR 0 7
105137: ARRAY
105138: PPUSH
105139: CALL 52687 0 1
105143: PPUSH
105144: CALL_OW 256
105148: PUSH
105149: LD_INT 1000
105151: EQUAL
105152: IFFALSE 105171
// ComStop ( group [ i ] ) else
105154: LD_VAR 0 4
105158: PUSH
105159: LD_VAR 0 7
105163: ARRAY
105164: PPUSH
105165: CALL_OW 141
105169: GO 105334
// if not HasTask ( group [ i ] ) and to_heal then
105171: LD_VAR 0 4
105175: PUSH
105176: LD_VAR 0 7
105180: ARRAY
105181: PPUSH
105182: CALL_OW 314
105186: NOT
105187: PUSH
105188: LD_VAR 0 30
105192: AND
105193: IFFALSE 105334
// begin z := NearestUnitToUnit ( UnitFilter ( to_heal , [ f_not , [ f_inside ] ] ) , group [ i ] ) ;
105195: LD_ADDR_VAR 0 13
105199: PUSH
105200: LD_VAR 0 30
105204: PPUSH
105205: LD_INT 3
105207: PUSH
105208: LD_INT 54
105210: PUSH
105211: EMPTY
105212: LIST
105213: PUSH
105214: EMPTY
105215: LIST
105216: LIST
105217: PPUSH
105218: CALL_OW 72
105222: PPUSH
105223: LD_VAR 0 4
105227: PUSH
105228: LD_VAR 0 7
105232: ARRAY
105233: PPUSH
105234: CALL_OW 74
105238: ST_TO_ADDR
// if z then
105239: LD_VAR 0 13
105243: IFFALSE 105334
// if FilterAllUnits ( [ [ f_dist , z , 10 ] , [ f_enemy , GetSide ( z ) ] ] ) = 0 then
105245: LD_INT 91
105247: PUSH
105248: LD_VAR 0 13
105252: PUSH
105253: LD_INT 10
105255: PUSH
105256: EMPTY
105257: LIST
105258: LIST
105259: LIST
105260: PUSH
105261: LD_INT 81
105263: PUSH
105264: LD_VAR 0 13
105268: PPUSH
105269: CALL_OW 255
105273: PUSH
105274: EMPTY
105275: LIST
105276: LIST
105277: PUSH
105278: EMPTY
105279: LIST
105280: LIST
105281: PPUSH
105282: CALL_OW 69
105286: PUSH
105287: LD_INT 0
105289: EQUAL
105290: IFFALSE 105314
// ComHeal ( group [ i ] , z ) else
105292: LD_VAR 0 4
105296: PUSH
105297: LD_VAR 0 7
105301: ARRAY
105302: PPUSH
105303: LD_VAR 0 13
105307: PPUSH
105308: CALL_OW 128
105312: GO 105334
// ComMoveToArea ( group [ i ] , f_heal ) ;
105314: LD_VAR 0 4
105318: PUSH
105319: LD_VAR 0 7
105323: ARRAY
105324: PPUSH
105325: LD_VAR 0 23
105329: PPUSH
105330: CALL_OW 113
// end ; continue ;
105334: GO 104365
// end ; if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_heal then
105336: LD_VAR 0 4
105340: PUSH
105341: LD_VAR 0 7
105345: ARRAY
105346: PPUSH
105347: CALL_OW 256
105351: PUSH
105352: LD_INT 700
105354: LESS
105355: PUSH
105356: LD_VAR 0 4
105360: PUSH
105361: LD_VAR 0 7
105365: ARRAY
105366: PUSH
105367: LD_VAR 0 30
105371: IN
105372: NOT
105373: AND
105374: IFFALSE 105398
// to_heal := to_heal union group [ i ] ;
105376: LD_ADDR_VAR 0 30
105380: PUSH
105381: LD_VAR 0 30
105385: PUSH
105386: LD_VAR 0 4
105390: PUSH
105391: LD_VAR 0 7
105395: ARRAY
105396: UNION
105397: ST_TO_ADDR
// if group [ i ] in to_heal then
105398: LD_VAR 0 4
105402: PUSH
105403: LD_VAR 0 7
105407: ARRAY
105408: PUSH
105409: LD_VAR 0 30
105413: IN
105414: IFFALSE 105523
// begin if GetLives ( group [ i ] ) = 1000 then
105416: LD_VAR 0 4
105420: PUSH
105421: LD_VAR 0 7
105425: ARRAY
105426: PPUSH
105427: CALL_OW 256
105431: PUSH
105432: LD_INT 1000
105434: EQUAL
105435: IFFALSE 105461
// to_heal := to_heal diff group [ i ] else
105437: LD_ADDR_VAR 0 30
105441: PUSH
105442: LD_VAR 0 30
105446: PUSH
105447: LD_VAR 0 4
105451: PUSH
105452: LD_VAR 0 7
105456: ARRAY
105457: DIFF
105458: ST_TO_ADDR
105459: GO 105523
// begin if not IsInArea ( group [ i ] , to_heal ) then
105461: LD_VAR 0 4
105465: PUSH
105466: LD_VAR 0 7
105470: ARRAY
105471: PPUSH
105472: LD_VAR 0 30
105476: PPUSH
105477: CALL_OW 308
105481: NOT
105482: IFFALSE 105506
// ComMoveToArea ( group [ i ] , f_heal ) else
105484: LD_VAR 0 4
105488: PUSH
105489: LD_VAR 0 7
105493: ARRAY
105494: PPUSH
105495: LD_VAR 0 23
105499: PPUSH
105500: CALL_OW 113
105504: GO 105521
// ComHold ( group [ i ] ) ;
105506: LD_VAR 0 4
105510: PUSH
105511: LD_VAR 0 7
105515: ARRAY
105516: PPUSH
105517: CALL_OW 140
// continue ;
105521: GO 104365
// end ; end ; end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
105523: LD_VAR 0 4
105527: PUSH
105528: LD_VAR 0 7
105532: ARRAY
105533: PPUSH
105534: LD_INT 10
105536: PPUSH
105537: CALL 51107 0 2
105541: NOT
105542: PUSH
105543: LD_VAR 0 16
105547: PUSH
105548: LD_VAR 0 7
105552: ARRAY
105553: PUSH
105554: EMPTY
105555: EQUAL
105556: NOT
105557: AND
105558: IFFALSE 105824
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
105560: LD_VAR 0 4
105564: PUSH
105565: LD_VAR 0 7
105569: ARRAY
105570: PPUSH
105571: CALL_OW 262
105575: PUSH
105576: LD_INT 1
105578: PUSH
105579: LD_INT 2
105581: PUSH
105582: EMPTY
105583: LIST
105584: LIST
105585: IN
105586: IFFALSE 105627
// if GetFuel ( group [ i ] ) < 10 then
105588: LD_VAR 0 4
105592: PUSH
105593: LD_VAR 0 7
105597: ARRAY
105598: PPUSH
105599: CALL_OW 261
105603: PUSH
105604: LD_INT 10
105606: LESS
105607: IFFALSE 105627
// SetFuel ( group [ i ] , 12 ) ;
105609: LD_VAR 0 4
105613: PUSH
105614: LD_VAR 0 7
105618: ARRAY
105619: PPUSH
105620: LD_INT 12
105622: PPUSH
105623: CALL_OW 240
// if units_path [ i ] then
105627: LD_VAR 0 16
105631: PUSH
105632: LD_VAR 0 7
105636: ARRAY
105637: IFFALSE 105822
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
105639: LD_VAR 0 4
105643: PUSH
105644: LD_VAR 0 7
105648: ARRAY
105649: PPUSH
105650: LD_VAR 0 16
105654: PUSH
105655: LD_VAR 0 7
105659: ARRAY
105660: PUSH
105661: LD_INT 1
105663: ARRAY
105664: PUSH
105665: LD_INT 1
105667: ARRAY
105668: PPUSH
105669: LD_VAR 0 16
105673: PUSH
105674: LD_VAR 0 7
105678: ARRAY
105679: PUSH
105680: LD_INT 1
105682: ARRAY
105683: PUSH
105684: LD_INT 2
105686: ARRAY
105687: PPUSH
105688: CALL_OW 297
105692: PUSH
105693: LD_INT 6
105695: GREATER
105696: IFFALSE 105771
// begin if not HasTask ( group [ i ] ) then
105698: LD_VAR 0 4
105702: PUSH
105703: LD_VAR 0 7
105707: ARRAY
105708: PPUSH
105709: CALL_OW 314
105713: NOT
105714: IFFALSE 105769
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
105716: LD_VAR 0 4
105720: PUSH
105721: LD_VAR 0 7
105725: ARRAY
105726: PPUSH
105727: LD_VAR 0 16
105731: PUSH
105732: LD_VAR 0 7
105736: ARRAY
105737: PUSH
105738: LD_INT 1
105740: ARRAY
105741: PUSH
105742: LD_INT 1
105744: ARRAY
105745: PPUSH
105746: LD_VAR 0 16
105750: PUSH
105751: LD_VAR 0 7
105755: ARRAY
105756: PUSH
105757: LD_INT 1
105759: ARRAY
105760: PUSH
105761: LD_INT 2
105763: ARRAY
105764: PPUSH
105765: CALL_OW 114
// end else
105769: GO 105822
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
105771: LD_ADDR_VAR 0 15
105775: PUSH
105776: LD_VAR 0 16
105780: PUSH
105781: LD_VAR 0 7
105785: ARRAY
105786: PPUSH
105787: LD_INT 1
105789: PPUSH
105790: CALL_OW 3
105794: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
105795: LD_ADDR_VAR 0 16
105799: PUSH
105800: LD_VAR 0 16
105804: PPUSH
105805: LD_VAR 0 7
105809: PPUSH
105810: LD_VAR 0 15
105814: PPUSH
105815: CALL_OW 1
105819: ST_TO_ADDR
// continue ;
105820: GO 104365
// end ; end ; end else
105822: GO 108486
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
105824: LD_ADDR_VAR 0 14
105828: PUSH
105829: LD_INT 81
105831: PUSH
105832: LD_VAR 0 4
105836: PUSH
105837: LD_VAR 0 7
105841: ARRAY
105842: PPUSH
105843: CALL_OW 255
105847: PUSH
105848: EMPTY
105849: LIST
105850: LIST
105851: PPUSH
105852: CALL_OW 69
105856: ST_TO_ADDR
// if not tmp then
105857: LD_VAR 0 14
105861: NOT
105862: IFFALSE 105866
// continue ;
105864: GO 104365
// if f_ignore_area then
105866: LD_VAR 0 17
105870: IFFALSE 105958
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
105872: LD_ADDR_VAR 0 15
105876: PUSH
105877: LD_VAR 0 14
105881: PPUSH
105882: LD_INT 3
105884: PUSH
105885: LD_INT 92
105887: PUSH
105888: LD_VAR 0 17
105892: PUSH
105893: LD_INT 1
105895: ARRAY
105896: PUSH
105897: LD_VAR 0 17
105901: PUSH
105902: LD_INT 2
105904: ARRAY
105905: PUSH
105906: LD_VAR 0 17
105910: PUSH
105911: LD_INT 3
105913: ARRAY
105914: PUSH
105915: EMPTY
105916: LIST
105917: LIST
105918: LIST
105919: LIST
105920: PUSH
105921: EMPTY
105922: LIST
105923: LIST
105924: PPUSH
105925: CALL_OW 72
105929: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
105930: LD_VAR 0 14
105934: PUSH
105935: LD_VAR 0 15
105939: DIFF
105940: IFFALSE 105958
// tmp := tmp diff tmp2 ;
105942: LD_ADDR_VAR 0 14
105946: PUSH
105947: LD_VAR 0 14
105951: PUSH
105952: LD_VAR 0 15
105956: DIFF
105957: ST_TO_ADDR
// end ; if not f_murder then
105958: LD_VAR 0 20
105962: NOT
105963: IFFALSE 106021
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
105965: LD_ADDR_VAR 0 15
105969: PUSH
105970: LD_VAR 0 14
105974: PPUSH
105975: LD_INT 3
105977: PUSH
105978: LD_INT 50
105980: PUSH
105981: EMPTY
105982: LIST
105983: PUSH
105984: EMPTY
105985: LIST
105986: LIST
105987: PPUSH
105988: CALL_OW 72
105992: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
105993: LD_VAR 0 14
105997: PUSH
105998: LD_VAR 0 15
106002: DIFF
106003: IFFALSE 106021
// tmp := tmp diff tmp2 ;
106005: LD_ADDR_VAR 0 14
106009: PUSH
106010: LD_VAR 0 14
106014: PUSH
106015: LD_VAR 0 15
106019: DIFF
106020: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
106021: LD_ADDR_VAR 0 14
106025: PUSH
106026: LD_VAR 0 4
106030: PUSH
106031: LD_VAR 0 7
106035: ARRAY
106036: PPUSH
106037: LD_VAR 0 14
106041: PPUSH
106042: LD_INT 1
106044: PPUSH
106045: LD_INT 1
106047: PPUSH
106048: CALL 24750 0 4
106052: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
106053: LD_VAR 0 4
106057: PUSH
106058: LD_VAR 0 7
106062: ARRAY
106063: PPUSH
106064: CALL_OW 257
106068: PUSH
106069: LD_INT 1
106071: EQUAL
106072: IFFALSE 106520
// begin if WantPlant ( group [ i ] ) then
106074: LD_VAR 0 4
106078: PUSH
106079: LD_VAR 0 7
106083: ARRAY
106084: PPUSH
106085: CALL 24251 0 1
106089: IFFALSE 106093
// continue ;
106091: GO 104365
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
106093: LD_VAR 0 18
106097: PUSH
106098: LD_VAR 0 4
106102: PUSH
106103: LD_VAR 0 7
106107: ARRAY
106108: PPUSH
106109: CALL_OW 310
106113: NOT
106114: AND
106115: PUSH
106116: LD_VAR 0 14
106120: PUSH
106121: LD_INT 1
106123: ARRAY
106124: PUSH
106125: LD_VAR 0 14
106129: PPUSH
106130: LD_INT 21
106132: PUSH
106133: LD_INT 2
106135: PUSH
106136: EMPTY
106137: LIST
106138: LIST
106139: PUSH
106140: LD_INT 58
106142: PUSH
106143: EMPTY
106144: LIST
106145: PUSH
106146: EMPTY
106147: LIST
106148: LIST
106149: PPUSH
106150: CALL_OW 72
106154: IN
106155: AND
106156: IFFALSE 106192
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
106158: LD_VAR 0 4
106162: PUSH
106163: LD_VAR 0 7
106167: ARRAY
106168: PPUSH
106169: LD_VAR 0 14
106173: PUSH
106174: LD_INT 1
106176: ARRAY
106177: PPUSH
106178: CALL_OW 120
// attacking := true ;
106182: LD_ADDR_VAR 0 29
106186: PUSH
106187: LD_INT 1
106189: ST_TO_ADDR
// continue ;
106190: GO 104365
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
106192: LD_VAR 0 26
106196: PUSH
106197: LD_VAR 0 4
106201: PUSH
106202: LD_VAR 0 7
106206: ARRAY
106207: PPUSH
106208: CALL_OW 257
106212: PUSH
106213: LD_INT 1
106215: EQUAL
106216: AND
106217: PUSH
106218: LD_VAR 0 4
106222: PUSH
106223: LD_VAR 0 7
106227: ARRAY
106228: PPUSH
106229: CALL_OW 256
106233: PUSH
106234: LD_INT 800
106236: LESS
106237: AND
106238: PUSH
106239: LD_VAR 0 4
106243: PUSH
106244: LD_VAR 0 7
106248: ARRAY
106249: PPUSH
106250: CALL_OW 318
106254: NOT
106255: AND
106256: IFFALSE 106273
// ComCrawl ( group [ i ] ) ;
106258: LD_VAR 0 4
106262: PUSH
106263: LD_VAR 0 7
106267: ARRAY
106268: PPUSH
106269: CALL_OW 137
// if f_mines then
106273: LD_VAR 0 21
106277: IFFALSE 106520
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
106279: LD_VAR 0 14
106283: PUSH
106284: LD_INT 1
106286: ARRAY
106287: PPUSH
106288: CALL_OW 247
106292: PUSH
106293: LD_INT 3
106295: EQUAL
106296: PUSH
106297: LD_VAR 0 14
106301: PUSH
106302: LD_INT 1
106304: ARRAY
106305: PUSH
106306: LD_VAR 0 27
106310: IN
106311: NOT
106312: AND
106313: IFFALSE 106520
// begin x := GetX ( tmp [ 1 ] ) ;
106315: LD_ADDR_VAR 0 10
106319: PUSH
106320: LD_VAR 0 14
106324: PUSH
106325: LD_INT 1
106327: ARRAY
106328: PPUSH
106329: CALL_OW 250
106333: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
106334: LD_ADDR_VAR 0 11
106338: PUSH
106339: LD_VAR 0 14
106343: PUSH
106344: LD_INT 1
106346: ARRAY
106347: PPUSH
106348: CALL_OW 251
106352: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
106353: LD_ADDR_VAR 0 12
106357: PUSH
106358: LD_VAR 0 4
106362: PUSH
106363: LD_VAR 0 7
106367: ARRAY
106368: PPUSH
106369: CALL 51192 0 1
106373: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
106374: LD_VAR 0 4
106378: PUSH
106379: LD_VAR 0 7
106383: ARRAY
106384: PPUSH
106385: LD_VAR 0 10
106389: PPUSH
106390: LD_VAR 0 11
106394: PPUSH
106395: LD_VAR 0 14
106399: PUSH
106400: LD_INT 1
106402: ARRAY
106403: PPUSH
106404: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
106408: LD_VAR 0 4
106412: PUSH
106413: LD_VAR 0 7
106417: ARRAY
106418: PPUSH
106419: LD_VAR 0 10
106423: PPUSH
106424: LD_VAR 0 12
106428: PPUSH
106429: LD_INT 7
106431: PPUSH
106432: CALL_OW 272
106436: PPUSH
106437: LD_VAR 0 11
106441: PPUSH
106442: LD_VAR 0 12
106446: PPUSH
106447: LD_INT 7
106449: PPUSH
106450: CALL_OW 273
106454: PPUSH
106455: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
106459: LD_VAR 0 4
106463: PUSH
106464: LD_VAR 0 7
106468: ARRAY
106469: PPUSH
106470: LD_INT 71
106472: PPUSH
106473: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
106477: LD_ADDR_VAR 0 27
106481: PUSH
106482: LD_VAR 0 27
106486: PPUSH
106487: LD_VAR 0 27
106491: PUSH
106492: LD_INT 1
106494: PLUS
106495: PPUSH
106496: LD_VAR 0 14
106500: PUSH
106501: LD_INT 1
106503: ARRAY
106504: PPUSH
106505: CALL_OW 1
106509: ST_TO_ADDR
// attacking := true ;
106510: LD_ADDR_VAR 0 29
106514: PUSH
106515: LD_INT 1
106517: ST_TO_ADDR
// continue ;
106518: GO 104365
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
106520: LD_VAR 0 4
106524: PUSH
106525: LD_VAR 0 7
106529: ARRAY
106530: PPUSH
106531: CALL_OW 257
106535: PUSH
106536: LD_INT 17
106538: EQUAL
106539: PUSH
106540: LD_VAR 0 4
106544: PUSH
106545: LD_VAR 0 7
106549: ARRAY
106550: PPUSH
106551: CALL_OW 110
106555: PUSH
106556: LD_INT 71
106558: EQUAL
106559: NOT
106560: AND
106561: IFFALSE 106707
// begin attacking := false ;
106563: LD_ADDR_VAR 0 29
106567: PUSH
106568: LD_INT 0
106570: ST_TO_ADDR
// k := 5 ;
106571: LD_ADDR_VAR 0 9
106575: PUSH
106576: LD_INT 5
106578: ST_TO_ADDR
// if tmp < k then
106579: LD_VAR 0 14
106583: PUSH
106584: LD_VAR 0 9
106588: LESS
106589: IFFALSE 106601
// k := tmp ;
106591: LD_ADDR_VAR 0 9
106595: PUSH
106596: LD_VAR 0 14
106600: ST_TO_ADDR
// for j = 1 to k do
106601: LD_ADDR_VAR 0 8
106605: PUSH
106606: DOUBLE
106607: LD_INT 1
106609: DEC
106610: ST_TO_ADDR
106611: LD_VAR 0 9
106615: PUSH
106616: FOR_TO
106617: IFFALSE 106705
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
106619: LD_VAR 0 14
106623: PUSH
106624: LD_VAR 0 8
106628: ARRAY
106629: PUSH
106630: LD_VAR 0 14
106634: PPUSH
106635: LD_INT 58
106637: PUSH
106638: EMPTY
106639: LIST
106640: PPUSH
106641: CALL_OW 72
106645: IN
106646: NOT
106647: IFFALSE 106703
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
106649: LD_VAR 0 4
106653: PUSH
106654: LD_VAR 0 7
106658: ARRAY
106659: PPUSH
106660: LD_VAR 0 14
106664: PUSH
106665: LD_VAR 0 8
106669: ARRAY
106670: PPUSH
106671: CALL_OW 115
// attacking := true ;
106675: LD_ADDR_VAR 0 29
106679: PUSH
106680: LD_INT 1
106682: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
106683: LD_VAR 0 4
106687: PUSH
106688: LD_VAR 0 7
106692: ARRAY
106693: PPUSH
106694: LD_INT 71
106696: PPUSH
106697: CALL_OW 109
// continue ;
106701: GO 106616
// end ; end ;
106703: GO 106616
106705: POP
106706: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
106707: LD_VAR 0 4
106711: PUSH
106712: LD_VAR 0 7
106716: ARRAY
106717: PPUSH
106718: CALL_OW 257
106722: PUSH
106723: LD_INT 8
106725: EQUAL
106726: PUSH
106727: LD_VAR 0 4
106731: PUSH
106732: LD_VAR 0 7
106736: ARRAY
106737: PPUSH
106738: CALL_OW 264
106742: PUSH
106743: LD_INT 28
106745: PUSH
106746: LD_INT 45
106748: PUSH
106749: LD_INT 7
106751: PUSH
106752: LD_INT 47
106754: PUSH
106755: EMPTY
106756: LIST
106757: LIST
106758: LIST
106759: LIST
106760: IN
106761: OR
106762: IFFALSE 107018
// begin attacking := false ;
106764: LD_ADDR_VAR 0 29
106768: PUSH
106769: LD_INT 0
106771: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
106772: LD_VAR 0 14
106776: PUSH
106777: LD_INT 1
106779: ARRAY
106780: PPUSH
106781: CALL_OW 266
106785: PUSH
106786: LD_INT 32
106788: PUSH
106789: LD_INT 31
106791: PUSH
106792: LD_INT 33
106794: PUSH
106795: LD_INT 4
106797: PUSH
106798: LD_INT 5
106800: PUSH
106801: EMPTY
106802: LIST
106803: LIST
106804: LIST
106805: LIST
106806: LIST
106807: IN
106808: IFFALSE 106994
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
106810: LD_ADDR_VAR 0 9
106814: PUSH
106815: LD_VAR 0 14
106819: PUSH
106820: LD_INT 1
106822: ARRAY
106823: PPUSH
106824: CALL_OW 266
106828: PPUSH
106829: LD_VAR 0 14
106833: PUSH
106834: LD_INT 1
106836: ARRAY
106837: PPUSH
106838: CALL_OW 250
106842: PPUSH
106843: LD_VAR 0 14
106847: PUSH
106848: LD_INT 1
106850: ARRAY
106851: PPUSH
106852: CALL_OW 251
106856: PPUSH
106857: LD_VAR 0 14
106861: PUSH
106862: LD_INT 1
106864: ARRAY
106865: PPUSH
106866: CALL_OW 254
106870: PPUSH
106871: LD_VAR 0 14
106875: PUSH
106876: LD_INT 1
106878: ARRAY
106879: PPUSH
106880: CALL_OW 248
106884: PPUSH
106885: LD_INT 0
106887: PPUSH
106888: CALL 32562 0 6
106892: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
106893: LD_ADDR_VAR 0 8
106897: PUSH
106898: LD_VAR 0 4
106902: PUSH
106903: LD_VAR 0 7
106907: ARRAY
106908: PPUSH
106909: LD_VAR 0 9
106913: PPUSH
106914: CALL 51232 0 2
106918: ST_TO_ADDR
// if j then
106919: LD_VAR 0 8
106923: IFFALSE 106992
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
106925: LD_VAR 0 8
106929: PUSH
106930: LD_INT 1
106932: ARRAY
106933: PPUSH
106934: LD_VAR 0 8
106938: PUSH
106939: LD_INT 2
106941: ARRAY
106942: PPUSH
106943: CALL_OW 488
106947: IFFALSE 106992
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
106949: LD_VAR 0 4
106953: PUSH
106954: LD_VAR 0 7
106958: ARRAY
106959: PPUSH
106960: LD_VAR 0 8
106964: PUSH
106965: LD_INT 1
106967: ARRAY
106968: PPUSH
106969: LD_VAR 0 8
106973: PUSH
106974: LD_INT 2
106976: ARRAY
106977: PPUSH
106978: CALL_OW 116
// attacking := true ;
106982: LD_ADDR_VAR 0 29
106986: PUSH
106987: LD_INT 1
106989: ST_TO_ADDR
// continue ;
106990: GO 104365
// end ; end else
106992: GO 107018
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
106994: LD_VAR 0 4
106998: PUSH
106999: LD_VAR 0 7
107003: ARRAY
107004: PPUSH
107005: LD_VAR 0 14
107009: PUSH
107010: LD_INT 1
107012: ARRAY
107013: PPUSH
107014: CALL_OW 115
// end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
107018: LD_VAR 0 4
107022: PUSH
107023: LD_VAR 0 7
107027: ARRAY
107028: PPUSH
107029: CALL_OW 265
107033: PUSH
107034: LD_INT 11
107036: EQUAL
107037: IFFALSE 107315
// begin k := 10 ;
107039: LD_ADDR_VAR 0 9
107043: PUSH
107044: LD_INT 10
107046: ST_TO_ADDR
// x := 0 ;
107047: LD_ADDR_VAR 0 10
107051: PUSH
107052: LD_INT 0
107054: ST_TO_ADDR
// if tmp < k then
107055: LD_VAR 0 14
107059: PUSH
107060: LD_VAR 0 9
107064: LESS
107065: IFFALSE 107077
// k := tmp ;
107067: LD_ADDR_VAR 0 9
107071: PUSH
107072: LD_VAR 0 14
107076: ST_TO_ADDR
// for j = k downto 1 do
107077: LD_ADDR_VAR 0 8
107081: PUSH
107082: DOUBLE
107083: LD_VAR 0 9
107087: INC
107088: ST_TO_ADDR
107089: LD_INT 1
107091: PUSH
107092: FOR_DOWNTO
107093: IFFALSE 107168
// begin if GetType ( tmp [ j ] ) = unit_human then
107095: LD_VAR 0 14
107099: PUSH
107100: LD_VAR 0 8
107104: ARRAY
107105: PPUSH
107106: CALL_OW 247
107110: PUSH
107111: LD_INT 1
107113: EQUAL
107114: IFFALSE 107166
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
107116: LD_VAR 0 4
107120: PUSH
107121: LD_VAR 0 7
107125: ARRAY
107126: PPUSH
107127: LD_VAR 0 14
107131: PUSH
107132: LD_VAR 0 8
107136: ARRAY
107137: PPUSH
107138: CALL 51503 0 2
// x := tmp [ j ] ;
107142: LD_ADDR_VAR 0 10
107146: PUSH
107147: LD_VAR 0 14
107151: PUSH
107152: LD_VAR 0 8
107156: ARRAY
107157: ST_TO_ADDR
// attacking := true ;
107158: LD_ADDR_VAR 0 29
107162: PUSH
107163: LD_INT 1
107165: ST_TO_ADDR
// end ; end ;
107166: GO 107092
107168: POP
107169: POP
// if not x then
107170: LD_VAR 0 10
107174: NOT
107175: IFFALSE 107315
// begin attacking := true ;
107177: LD_ADDR_VAR 0 29
107181: PUSH
107182: LD_INT 1
107184: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
107185: LD_VAR 0 4
107189: PUSH
107190: LD_VAR 0 7
107194: ARRAY
107195: PPUSH
107196: CALL_OW 250
107200: PPUSH
107201: LD_VAR 0 4
107205: PUSH
107206: LD_VAR 0 7
107210: ARRAY
107211: PPUSH
107212: CALL_OW 251
107216: PPUSH
107217: CALL_OW 546
107221: PUSH
107222: LD_INT 2
107224: ARRAY
107225: PUSH
107226: LD_VAR 0 14
107230: PUSH
107231: LD_INT 1
107233: ARRAY
107234: PPUSH
107235: CALL_OW 250
107239: PPUSH
107240: LD_VAR 0 14
107244: PUSH
107245: LD_INT 1
107247: ARRAY
107248: PPUSH
107249: CALL_OW 251
107253: PPUSH
107254: CALL_OW 546
107258: PUSH
107259: LD_INT 2
107261: ARRAY
107262: EQUAL
107263: IFFALSE 107291
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
107265: LD_VAR 0 4
107269: PUSH
107270: LD_VAR 0 7
107274: ARRAY
107275: PPUSH
107276: LD_VAR 0 14
107280: PUSH
107281: LD_INT 1
107283: ARRAY
107284: PPUSH
107285: CALL 51503 0 2
107289: GO 107315
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
107291: LD_VAR 0 4
107295: PUSH
107296: LD_VAR 0 7
107300: ARRAY
107301: PPUSH
107302: LD_VAR 0 14
107306: PUSH
107307: LD_INT 1
107309: ARRAY
107310: PPUSH
107311: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
107315: LD_VAR 0 4
107319: PUSH
107320: LD_VAR 0 7
107324: ARRAY
107325: PPUSH
107326: CALL_OW 264
107330: PUSH
107331: LD_INT 29
107333: EQUAL
107334: IFFALSE 107700
// begin if WantsToAttack ( group [ i ] ) in bombed then
107336: LD_VAR 0 4
107340: PUSH
107341: LD_VAR 0 7
107345: ARRAY
107346: PPUSH
107347: CALL_OW 319
107351: PUSH
107352: LD_VAR 0 28
107356: IN
107357: IFFALSE 107361
// continue ;
107359: GO 104365
// k := 8 ;
107361: LD_ADDR_VAR 0 9
107365: PUSH
107366: LD_INT 8
107368: ST_TO_ADDR
// x := 0 ;
107369: LD_ADDR_VAR 0 10
107373: PUSH
107374: LD_INT 0
107376: ST_TO_ADDR
// if tmp < k then
107377: LD_VAR 0 14
107381: PUSH
107382: LD_VAR 0 9
107386: LESS
107387: IFFALSE 107399
// k := tmp ;
107389: LD_ADDR_VAR 0 9
107393: PUSH
107394: LD_VAR 0 14
107398: ST_TO_ADDR
// for j = 1 to k do
107399: LD_ADDR_VAR 0 8
107403: PUSH
107404: DOUBLE
107405: LD_INT 1
107407: DEC
107408: ST_TO_ADDR
107409: LD_VAR 0 9
107413: PUSH
107414: FOR_TO
107415: IFFALSE 107547
// begin if GetType ( tmp [ j ] ) = unit_building then
107417: LD_VAR 0 14
107421: PUSH
107422: LD_VAR 0 8
107426: ARRAY
107427: PPUSH
107428: CALL_OW 247
107432: PUSH
107433: LD_INT 3
107435: EQUAL
107436: IFFALSE 107545
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
107438: LD_VAR 0 14
107442: PUSH
107443: LD_VAR 0 8
107447: ARRAY
107448: PUSH
107449: LD_VAR 0 28
107453: IN
107454: NOT
107455: PUSH
107456: LD_VAR 0 14
107460: PUSH
107461: LD_VAR 0 8
107465: ARRAY
107466: PPUSH
107467: CALL_OW 313
107471: AND
107472: IFFALSE 107545
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
107474: LD_VAR 0 4
107478: PUSH
107479: LD_VAR 0 7
107483: ARRAY
107484: PPUSH
107485: LD_VAR 0 14
107489: PUSH
107490: LD_VAR 0 8
107494: ARRAY
107495: PPUSH
107496: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
107500: LD_ADDR_VAR 0 28
107504: PUSH
107505: LD_VAR 0 28
107509: PPUSH
107510: LD_VAR 0 28
107514: PUSH
107515: LD_INT 1
107517: PLUS
107518: PPUSH
107519: LD_VAR 0 14
107523: PUSH
107524: LD_VAR 0 8
107528: ARRAY
107529: PPUSH
107530: CALL_OW 1
107534: ST_TO_ADDR
// attacking := true ;
107535: LD_ADDR_VAR 0 29
107539: PUSH
107540: LD_INT 1
107542: ST_TO_ADDR
// break ;
107543: GO 107547
// end ; end ;
107545: GO 107414
107547: POP
107548: POP
// if not attacking and f_attack_depot then
107549: LD_VAR 0 29
107553: NOT
107554: PUSH
107555: LD_VAR 0 25
107559: AND
107560: IFFALSE 107655
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
107562: LD_ADDR_VAR 0 13
107566: PUSH
107567: LD_VAR 0 14
107571: PPUSH
107572: LD_INT 2
107574: PUSH
107575: LD_INT 30
107577: PUSH
107578: LD_INT 0
107580: PUSH
107581: EMPTY
107582: LIST
107583: LIST
107584: PUSH
107585: LD_INT 30
107587: PUSH
107588: LD_INT 1
107590: PUSH
107591: EMPTY
107592: LIST
107593: LIST
107594: PUSH
107595: EMPTY
107596: LIST
107597: LIST
107598: LIST
107599: PPUSH
107600: CALL_OW 72
107604: ST_TO_ADDR
// if z then
107605: LD_VAR 0 13
107609: IFFALSE 107655
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
107611: LD_VAR 0 4
107615: PUSH
107616: LD_VAR 0 7
107620: ARRAY
107621: PPUSH
107622: LD_VAR 0 13
107626: PPUSH
107627: LD_VAR 0 4
107631: PUSH
107632: LD_VAR 0 7
107636: ARRAY
107637: PPUSH
107638: CALL_OW 74
107642: PPUSH
107643: CALL_OW 115
// attacking := true ;
107647: LD_ADDR_VAR 0 29
107651: PUSH
107652: LD_INT 1
107654: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
107655: LD_VAR 0 4
107659: PUSH
107660: LD_VAR 0 7
107664: ARRAY
107665: PPUSH
107666: CALL_OW 256
107670: PUSH
107671: LD_INT 500
107673: LESS
107674: IFFALSE 107700
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
107676: LD_VAR 0 4
107680: PUSH
107681: LD_VAR 0 7
107685: ARRAY
107686: PPUSH
107687: LD_VAR 0 14
107691: PUSH
107692: LD_INT 1
107694: ARRAY
107695: PPUSH
107696: CALL_OW 115
// end ; if GetWeapon ( group [ i ] ) = ru_time_lapser then
107700: LD_VAR 0 4
107704: PUSH
107705: LD_VAR 0 7
107709: ARRAY
107710: PPUSH
107711: CALL_OW 264
107715: PUSH
107716: LD_INT 49
107718: EQUAL
107719: IFFALSE 107840
// begin if not HasTask ( group [ i ] ) then
107721: LD_VAR 0 4
107725: PUSH
107726: LD_VAR 0 7
107730: ARRAY
107731: PPUSH
107732: CALL_OW 314
107736: NOT
107737: IFFALSE 107840
// begin k := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) , group [ i ] ) ;
107739: LD_ADDR_VAR 0 9
107743: PUSH
107744: LD_INT 81
107746: PUSH
107747: LD_VAR 0 4
107751: PUSH
107752: LD_VAR 0 7
107756: ARRAY
107757: PPUSH
107758: CALL_OW 255
107762: PUSH
107763: EMPTY
107764: LIST
107765: LIST
107766: PPUSH
107767: CALL_OW 69
107771: PPUSH
107772: LD_VAR 0 4
107776: PUSH
107777: LD_VAR 0 7
107781: ARRAY
107782: PPUSH
107783: CALL_OW 74
107787: ST_TO_ADDR
// if k then
107788: LD_VAR 0 9
107792: IFFALSE 107840
// if GetDistUnits ( group [ i ] , k ) > 10 then
107794: LD_VAR 0 4
107798: PUSH
107799: LD_VAR 0 7
107803: ARRAY
107804: PPUSH
107805: LD_VAR 0 9
107809: PPUSH
107810: CALL_OW 296
107814: PUSH
107815: LD_INT 10
107817: GREATER
107818: IFFALSE 107840
// ComMoveUnit ( group [ i ] , k ) ;
107820: LD_VAR 0 4
107824: PUSH
107825: LD_VAR 0 7
107829: ARRAY
107830: PPUSH
107831: LD_VAR 0 9
107835: PPUSH
107836: CALL_OW 112
// end ; end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
107840: LD_VAR 0 4
107844: PUSH
107845: LD_VAR 0 7
107849: ARRAY
107850: PPUSH
107851: CALL_OW 256
107855: PUSH
107856: LD_INT 250
107858: LESS
107859: PUSH
107860: LD_VAR 0 4
107864: PUSH
107865: LD_VAR 0 7
107869: ARRAY
107870: PUSH
107871: LD_INT 21
107873: PUSH
107874: LD_INT 2
107876: PUSH
107877: EMPTY
107878: LIST
107879: LIST
107880: PUSH
107881: LD_INT 23
107883: PUSH
107884: LD_INT 2
107886: PUSH
107887: EMPTY
107888: LIST
107889: LIST
107890: PUSH
107891: EMPTY
107892: LIST
107893: LIST
107894: PPUSH
107895: CALL_OW 69
107899: IN
107900: AND
107901: IFFALSE 108026
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
107903: LD_ADDR_VAR 0 9
107907: PUSH
107908: LD_OWVAR 3
107912: PUSH
107913: LD_VAR 0 4
107917: PUSH
107918: LD_VAR 0 7
107922: ARRAY
107923: DIFF
107924: PPUSH
107925: LD_VAR 0 4
107929: PUSH
107930: LD_VAR 0 7
107934: ARRAY
107935: PPUSH
107936: CALL_OW 74
107940: ST_TO_ADDR
// if not k then
107941: LD_VAR 0 9
107945: NOT
107946: IFFALSE 107950
// continue ;
107948: GO 104365
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
107950: LD_VAR 0 9
107954: PUSH
107955: LD_INT 81
107957: PUSH
107958: LD_VAR 0 4
107962: PUSH
107963: LD_VAR 0 7
107967: ARRAY
107968: PPUSH
107969: CALL_OW 255
107973: PUSH
107974: EMPTY
107975: LIST
107976: LIST
107977: PPUSH
107978: CALL_OW 69
107982: IN
107983: PUSH
107984: LD_VAR 0 9
107988: PPUSH
107989: LD_VAR 0 4
107993: PUSH
107994: LD_VAR 0 7
107998: ARRAY
107999: PPUSH
108000: CALL_OW 296
108004: PUSH
108005: LD_INT 5
108007: LESS
108008: AND
108009: IFFALSE 108026
// ComAutodestruct ( group [ i ] ) ;
108011: LD_VAR 0 4
108015: PUSH
108016: LD_VAR 0 7
108020: ARRAY
108021: PPUSH
108022: CALL 51401 0 1
// end ; if f_attack_depot then
108026: LD_VAR 0 25
108030: IFFALSE 108142
// begin k := 6 ;
108032: LD_ADDR_VAR 0 9
108036: PUSH
108037: LD_INT 6
108039: ST_TO_ADDR
// if tmp < k then
108040: LD_VAR 0 14
108044: PUSH
108045: LD_VAR 0 9
108049: LESS
108050: IFFALSE 108062
// k := tmp ;
108052: LD_ADDR_VAR 0 9
108056: PUSH
108057: LD_VAR 0 14
108061: ST_TO_ADDR
// for j = 1 to k do
108062: LD_ADDR_VAR 0 8
108066: PUSH
108067: DOUBLE
108068: LD_INT 1
108070: DEC
108071: ST_TO_ADDR
108072: LD_VAR 0 9
108076: PUSH
108077: FOR_TO
108078: IFFALSE 108140
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
108080: LD_VAR 0 8
108084: PPUSH
108085: CALL_OW 266
108089: PUSH
108090: LD_INT 0
108092: PUSH
108093: LD_INT 1
108095: PUSH
108096: EMPTY
108097: LIST
108098: LIST
108099: IN
108100: IFFALSE 108138
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
108102: LD_VAR 0 4
108106: PUSH
108107: LD_VAR 0 7
108111: ARRAY
108112: PPUSH
108113: LD_VAR 0 14
108117: PUSH
108118: LD_VAR 0 8
108122: ARRAY
108123: PPUSH
108124: CALL_OW 115
// attacking := true ;
108128: LD_ADDR_VAR 0 29
108132: PUSH
108133: LD_INT 1
108135: ST_TO_ADDR
// break ;
108136: GO 108140
// end ;
108138: GO 108077
108140: POP
108141: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
108142: LD_VAR 0 4
108146: PUSH
108147: LD_VAR 0 7
108151: ARRAY
108152: PPUSH
108153: CALL_OW 302
108157: PUSH
108158: LD_VAR 0 29
108162: NOT
108163: AND
108164: IFFALSE 108486
// begin if GetTag ( group [ i ] ) = 71 then
108166: LD_VAR 0 4
108170: PUSH
108171: LD_VAR 0 7
108175: ARRAY
108176: PPUSH
108177: CALL_OW 110
108181: PUSH
108182: LD_INT 71
108184: EQUAL
108185: IFFALSE 108226
// begin if HasTask ( group [ i ] ) then
108187: LD_VAR 0 4
108191: PUSH
108192: LD_VAR 0 7
108196: ARRAY
108197: PPUSH
108198: CALL_OW 314
108202: IFFALSE 108208
// continue else
108204: GO 104365
108206: GO 108226
// SetTag ( group [ i ] , 0 ) ;
108208: LD_VAR 0 4
108212: PUSH
108213: LD_VAR 0 7
108217: ARRAY
108218: PPUSH
108219: LD_INT 0
108221: PPUSH
108222: CALL_OW 109
// end ; k := 8 ;
108226: LD_ADDR_VAR 0 9
108230: PUSH
108231: LD_INT 8
108233: ST_TO_ADDR
// x := 0 ;
108234: LD_ADDR_VAR 0 10
108238: PUSH
108239: LD_INT 0
108241: ST_TO_ADDR
// if tmp < k then
108242: LD_VAR 0 14
108246: PUSH
108247: LD_VAR 0 9
108251: LESS
108252: IFFALSE 108264
// k := tmp ;
108254: LD_ADDR_VAR 0 9
108258: PUSH
108259: LD_VAR 0 14
108263: ST_TO_ADDR
// for j = 1 to k do
108264: LD_ADDR_VAR 0 8
108268: PUSH
108269: DOUBLE
108270: LD_INT 1
108272: DEC
108273: ST_TO_ADDR
108274: LD_VAR 0 9
108278: PUSH
108279: FOR_TO
108280: IFFALSE 108378
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
108282: LD_VAR 0 14
108286: PUSH
108287: LD_VAR 0 8
108291: ARRAY
108292: PPUSH
108293: CALL_OW 247
108297: PUSH
108298: LD_INT 1
108300: EQUAL
108301: PUSH
108302: LD_VAR 0 14
108306: PUSH
108307: LD_VAR 0 8
108311: ARRAY
108312: PPUSH
108313: CALL_OW 256
108317: PUSH
108318: LD_INT 250
108320: LESS
108321: PUSH
108322: LD_VAR 0 20
108326: AND
108327: PUSH
108328: LD_VAR 0 20
108332: NOT
108333: PUSH
108334: LD_VAR 0 14
108338: PUSH
108339: LD_VAR 0 8
108343: ARRAY
108344: PPUSH
108345: CALL_OW 256
108349: PUSH
108350: LD_INT 250
108352: GREATEREQUAL
108353: AND
108354: OR
108355: AND
108356: IFFALSE 108376
// begin x := tmp [ j ] ;
108358: LD_ADDR_VAR 0 10
108362: PUSH
108363: LD_VAR 0 14
108367: PUSH
108368: LD_VAR 0 8
108372: ARRAY
108373: ST_TO_ADDR
// break ;
108374: GO 108378
// end ;
108376: GO 108279
108378: POP
108379: POP
// if x then
108380: LD_VAR 0 10
108384: IFFALSE 108408
// ComAttackUnit ( group [ i ] , x ) else
108386: LD_VAR 0 4
108390: PUSH
108391: LD_VAR 0 7
108395: ARRAY
108396: PPUSH
108397: LD_VAR 0 10
108401: PPUSH
108402: CALL_OW 115
108406: GO 108432
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
108408: LD_VAR 0 4
108412: PUSH
108413: LD_VAR 0 7
108417: ARRAY
108418: PPUSH
108419: LD_VAR 0 14
108423: PUSH
108424: LD_INT 1
108426: ARRAY
108427: PPUSH
108428: CALL_OW 115
// if not HasTask ( group [ i ] ) then
108432: LD_VAR 0 4
108436: PUSH
108437: LD_VAR 0 7
108441: ARRAY
108442: PPUSH
108443: CALL_OW 314
108447: NOT
108448: IFFALSE 108486
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
108450: LD_VAR 0 4
108454: PUSH
108455: LD_VAR 0 7
108459: ARRAY
108460: PPUSH
108461: LD_VAR 0 14
108465: PPUSH
108466: LD_VAR 0 4
108470: PUSH
108471: LD_VAR 0 7
108475: ARRAY
108476: PPUSH
108477: CALL_OW 74
108481: PPUSH
108482: CALL_OW 115
// end ; end ; end ;
108486: GO 104365
108488: POP
108489: POP
// wait ( 0 0$2 ) ;
108490: LD_INT 70
108492: PPUSH
108493: CALL_OW 67
// until not group or group = [ ] or not FilterAllUnits ( [ f_enemy , side ] ) ;
108497: LD_VAR 0 4
108501: NOT
108502: PUSH
108503: LD_VAR 0 4
108507: PUSH
108508: EMPTY
108509: EQUAL
108510: OR
108511: PUSH
108512: LD_INT 81
108514: PUSH
108515: LD_VAR 0 35
108519: PUSH
108520: EMPTY
108521: LIST
108522: LIST
108523: PPUSH
108524: CALL_OW 69
108528: NOT
108529: OR
108530: IFFALSE 104350
// end ;
108532: LD_VAR 0 2
108536: RET
// export function BasicDefend ( base , solds , area ) ; var enemy , side , i , hex ; begin
108537: LD_INT 0
108539: PPUSH
108540: PPUSH
108541: PPUSH
108542: PPUSH
108543: PPUSH
// if not base or not mc_bases [ base ] or not solds or not area then
108544: LD_VAR 0 1
108548: NOT
108549: PUSH
108550: LD_EXP 47
108554: PUSH
108555: LD_VAR 0 1
108559: ARRAY
108560: NOT
108561: OR
108562: PUSH
108563: LD_VAR 0 2
108567: NOT
108568: OR
108569: PUSH
108570: LD_VAR 0 3
108574: NOT
108575: OR
108576: IFFALSE 108580
// exit ;
108578: GO 109093
// side := mc_sides [ base ] ;
108580: LD_ADDR_VAR 0 6
108584: PUSH
108585: LD_EXP 73
108589: PUSH
108590: LD_VAR 0 1
108594: ARRAY
108595: ST_TO_ADDR
// if not side then
108596: LD_VAR 0 6
108600: NOT
108601: IFFALSE 108605
// exit ;
108603: GO 109093
// for i in solds do
108605: LD_ADDR_VAR 0 7
108609: PUSH
108610: LD_VAR 0 2
108614: PUSH
108615: FOR_IN
108616: IFFALSE 108677
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
108618: LD_VAR 0 7
108622: PPUSH
108623: CALL_OW 310
108627: PPUSH
108628: CALL_OW 266
108632: PUSH
108633: LD_INT 32
108635: PUSH
108636: LD_INT 31
108638: PUSH
108639: EMPTY
108640: LIST
108641: LIST
108642: IN
108643: IFFALSE 108663
// solds := solds diff i else
108645: LD_ADDR_VAR 0 2
108649: PUSH
108650: LD_VAR 0 2
108654: PUSH
108655: LD_VAR 0 7
108659: DIFF
108660: ST_TO_ADDR
108661: GO 108675
// SetTag ( i , 18 ) ;
108663: LD_VAR 0 7
108667: PPUSH
108668: LD_INT 18
108670: PPUSH
108671: CALL_OW 109
108675: GO 108615
108677: POP
108678: POP
// if not solds then
108679: LD_VAR 0 2
108683: NOT
108684: IFFALSE 108688
// exit ;
108686: GO 109093
// repeat wait ( 0 0$2 ) ;
108688: LD_INT 70
108690: PPUSH
108691: CALL_OW 67
// enemy := ScanBase ( side , area ) ;
108695: LD_ADDR_VAR 0 5
108699: PUSH
108700: LD_VAR 0 6
108704: PPUSH
108705: LD_VAR 0 3
108709: PPUSH
108710: CALL 21116 0 2
108714: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
108715: LD_EXP 47
108719: PUSH
108720: LD_VAR 0 1
108724: ARRAY
108725: NOT
108726: PUSH
108727: LD_EXP 47
108731: PUSH
108732: LD_VAR 0 1
108736: ARRAY
108737: PUSH
108738: EMPTY
108739: EQUAL
108740: OR
108741: IFFALSE 108778
// begin for i in solds do
108743: LD_ADDR_VAR 0 7
108747: PUSH
108748: LD_VAR 0 2
108752: PUSH
108753: FOR_IN
108754: IFFALSE 108767
// ComStop ( i ) ;
108756: LD_VAR 0 7
108760: PPUSH
108761: CALL_OW 141
108765: GO 108753
108767: POP
108768: POP
// solds := [ ] ;
108769: LD_ADDR_VAR 0 2
108773: PUSH
108774: EMPTY
108775: ST_TO_ADDR
// exit ;
108776: GO 109093
// end ; if not enemy or enemy > 3 or mc_defender [ base ] then
108778: LD_VAR 0 5
108782: NOT
108783: PUSH
108784: LD_VAR 0 5
108788: PUSH
108789: LD_INT 3
108791: GREATER
108792: OR
108793: PUSH
108794: LD_EXP 69
108798: PUSH
108799: LD_VAR 0 1
108803: ARRAY
108804: OR
108805: IFFALSE 108846
// begin for i in solds do
108807: LD_ADDR_VAR 0 7
108811: PUSH
108812: LD_VAR 0 2
108816: PUSH
108817: FOR_IN
108818: IFFALSE 108842
// if HasTask ( i ) then
108820: LD_VAR 0 7
108824: PPUSH
108825: CALL_OW 314
108829: IFFALSE 108840
// ComStop ( i ) ;
108831: LD_VAR 0 7
108835: PPUSH
108836: CALL_OW 141
108840: GO 108817
108842: POP
108843: POP
// break ;
108844: GO 109081
// end ; for i in solds do
108846: LD_ADDR_VAR 0 7
108850: PUSH
108851: LD_VAR 0 2
108855: PUSH
108856: FOR_IN
108857: IFFALSE 109073
// begin if IsInUnit ( i ) then
108859: LD_VAR 0 7
108863: PPUSH
108864: CALL_OW 310
108868: IFFALSE 108879
// ComExitBuilding ( i ) ;
108870: LD_VAR 0 7
108874: PPUSH
108875: CALL_OW 122
// if GetLives ( i ) > 333 then
108879: LD_VAR 0 7
108883: PPUSH
108884: CALL_OW 256
108888: PUSH
108889: LD_INT 333
108891: GREATER
108892: IFFALSE 108920
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
108894: LD_VAR 0 7
108898: PPUSH
108899: LD_VAR 0 5
108903: PPUSH
108904: LD_VAR 0 7
108908: PPUSH
108909: CALL_OW 74
108913: PPUSH
108914: CALL_OW 115
108918: GO 109071
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
108920: LD_ADDR_VAR 0 8
108924: PUSH
108925: LD_EXP 47
108929: PUSH
108930: LD_VAR 0 1
108934: ARRAY
108935: PPUSH
108936: LD_INT 2
108938: PUSH
108939: LD_INT 30
108941: PUSH
108942: LD_INT 0
108944: PUSH
108945: EMPTY
108946: LIST
108947: LIST
108948: PUSH
108949: LD_INT 30
108951: PUSH
108952: LD_INT 1
108954: PUSH
108955: EMPTY
108956: LIST
108957: LIST
108958: PUSH
108959: LD_INT 30
108961: PUSH
108962: LD_INT 6
108964: PUSH
108965: EMPTY
108966: LIST
108967: LIST
108968: PUSH
108969: EMPTY
108970: LIST
108971: LIST
108972: LIST
108973: LIST
108974: PPUSH
108975: CALL_OW 72
108979: PPUSH
108980: LD_VAR 0 7
108984: PPUSH
108985: CALL_OW 74
108989: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
108990: LD_VAR 0 7
108994: PPUSH
108995: LD_VAR 0 8
108999: PPUSH
109000: CALL_OW 250
109004: PPUSH
109005: LD_INT 3
109007: PPUSH
109008: LD_INT 5
109010: PPUSH
109011: CALL_OW 272
109015: PPUSH
109016: LD_VAR 0 8
109020: PPUSH
109021: CALL_OW 251
109025: PPUSH
109026: LD_INT 3
109028: PPUSH
109029: LD_INT 5
109031: PPUSH
109032: CALL_OW 273
109036: PPUSH
109037: CALL_OW 111
// SetTag ( i , 0 ) ;
109041: LD_VAR 0 7
109045: PPUSH
109046: LD_INT 0
109048: PPUSH
109049: CALL_OW 109
// solds := solds diff i ;
109053: LD_ADDR_VAR 0 2
109057: PUSH
109058: LD_VAR 0 2
109062: PUSH
109063: LD_VAR 0 7
109067: DIFF
109068: ST_TO_ADDR
// continue ;
109069: GO 108856
// end ; end ;
109071: GO 108856
109073: POP
109074: POP
// until solds ;
109075: LD_VAR 0 2
109079: IFFALSE 108688
// MC_Reset ( base , 18 ) ;
109081: LD_VAR 0 1
109085: PPUSH
109086: LD_INT 18
109088: PPUSH
109089: CALL 60660 0 2
// end ;
109093: LD_VAR 0 4
109097: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , depot , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
109098: LD_INT 0
109100: PPUSH
109101: PPUSH
109102: PPUSH
109103: PPUSH
109104: PPUSH
109105: PPUSH
109106: PPUSH
109107: PPUSH
109108: PPUSH
109109: PPUSH
109110: PPUSH
109111: PPUSH
109112: PPUSH
109113: PPUSH
109114: PPUSH
109115: PPUSH
109116: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
109117: LD_ADDR_VAR 0 13
109121: PUSH
109122: LD_EXP 47
109126: PUSH
109127: LD_VAR 0 1
109131: ARRAY
109132: PPUSH
109133: LD_INT 25
109135: PUSH
109136: LD_INT 3
109138: PUSH
109139: EMPTY
109140: LIST
109141: LIST
109142: PPUSH
109143: CALL_OW 72
109147: ST_TO_ADDR
// if mc_remote_driver [ base ] then
109148: LD_EXP 87
109152: PUSH
109153: LD_VAR 0 1
109157: ARRAY
109158: IFFALSE 109182
// mechs := mechs diff mc_remote_driver [ base ] ;
109160: LD_ADDR_VAR 0 13
109164: PUSH
109165: LD_VAR 0 13
109169: PUSH
109170: LD_EXP 87
109174: PUSH
109175: LD_VAR 0 1
109179: ARRAY
109180: DIFF
109181: ST_TO_ADDR
// for i in mechs do
109182: LD_ADDR_VAR 0 5
109186: PUSH
109187: LD_VAR 0 13
109191: PUSH
109192: FOR_IN
109193: IFFALSE 109228
// if GetTag ( i ) > 0 then
109195: LD_VAR 0 5
109199: PPUSH
109200: CALL_OW 110
109204: PUSH
109205: LD_INT 0
109207: GREATER
109208: IFFALSE 109226
// mechs := mechs diff i ;
109210: LD_ADDR_VAR 0 13
109214: PUSH
109215: LD_VAR 0 13
109219: PUSH
109220: LD_VAR 0 5
109224: DIFF
109225: ST_TO_ADDR
109226: GO 109192
109228: POP
109229: POP
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
109230: LD_ADDR_VAR 0 9
109234: PUSH
109235: LD_EXP 47
109239: PUSH
109240: LD_VAR 0 1
109244: ARRAY
109245: PPUSH
109246: LD_INT 2
109248: PUSH
109249: LD_INT 25
109251: PUSH
109252: LD_INT 1
109254: PUSH
109255: EMPTY
109256: LIST
109257: LIST
109258: PUSH
109259: LD_INT 25
109261: PUSH
109262: LD_INT 5
109264: PUSH
109265: EMPTY
109266: LIST
109267: LIST
109268: PUSH
109269: LD_INT 25
109271: PUSH
109272: LD_INT 8
109274: PUSH
109275: EMPTY
109276: LIST
109277: LIST
109278: PUSH
109279: LD_INT 25
109281: PUSH
109282: LD_INT 9
109284: PUSH
109285: EMPTY
109286: LIST
109287: LIST
109288: PUSH
109289: EMPTY
109290: LIST
109291: LIST
109292: LIST
109293: LIST
109294: LIST
109295: PPUSH
109296: CALL_OW 72
109300: ST_TO_ADDR
// if not defenders and not solds then
109301: LD_VAR 0 2
109305: NOT
109306: PUSH
109307: LD_VAR 0 9
109311: NOT
109312: AND
109313: IFFALSE 109317
// exit ;
109315: GO 111007
// depot_under_attack := false ;
109317: LD_ADDR_VAR 0 17
109321: PUSH
109322: LD_INT 0
109324: ST_TO_ADDR
// sold_defenders := [ ] ;
109325: LD_ADDR_VAR 0 18
109329: PUSH
109330: EMPTY
109331: ST_TO_ADDR
// if mechs then
109332: LD_VAR 0 13
109336: IFFALSE 109489
// for i in UnitFilter ( defenders , [ f_type , unit_vehicle ] ) do
109338: LD_ADDR_VAR 0 5
109342: PUSH
109343: LD_VAR 0 2
109347: PPUSH
109348: LD_INT 21
109350: PUSH
109351: LD_INT 2
109353: PUSH
109354: EMPTY
109355: LIST
109356: LIST
109357: PPUSH
109358: CALL_OW 72
109362: PUSH
109363: FOR_IN
109364: IFFALSE 109487
// begin if GetTag ( i ) <> 20 then
109366: LD_VAR 0 5
109370: PPUSH
109371: CALL_OW 110
109375: PUSH
109376: LD_INT 20
109378: NONEQUAL
109379: IFFALSE 109393
// SetTag ( i , 20 ) ;
109381: LD_VAR 0 5
109385: PPUSH
109386: LD_INT 20
109388: PPUSH
109389: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) then
109393: LD_VAR 0 5
109397: PPUSH
109398: CALL_OW 263
109402: PUSH
109403: LD_INT 1
109405: EQUAL
109406: PUSH
109407: LD_VAR 0 5
109411: PPUSH
109412: CALL_OW 311
109416: NOT
109417: AND
109418: IFFALSE 109485
// begin un := mechs [ 1 ] ;
109420: LD_ADDR_VAR 0 11
109424: PUSH
109425: LD_VAR 0 13
109429: PUSH
109430: LD_INT 1
109432: ARRAY
109433: ST_TO_ADDR
// ComExit ( un ) ;
109434: LD_VAR 0 11
109438: PPUSH
109439: CALL 55746 0 1
// AddComEnterUnit ( un , i ) ;
109443: LD_VAR 0 11
109447: PPUSH
109448: LD_VAR 0 5
109452: PPUSH
109453: CALL_OW 180
// SetTag ( un , 19 ) ;
109457: LD_VAR 0 11
109461: PPUSH
109462: LD_INT 19
109464: PPUSH
109465: CALL_OW 109
// mechs := mechs diff un ;
109469: LD_ADDR_VAR 0 13
109473: PUSH
109474: LD_VAR 0 13
109478: PUSH
109479: LD_VAR 0 11
109483: DIFF
109484: ST_TO_ADDR
// end ; end ;
109485: GO 109363
109487: POP
109488: POP
// if solds then
109489: LD_VAR 0 9
109493: IFFALSE 109552
// for i in solds do
109495: LD_ADDR_VAR 0 5
109499: PUSH
109500: LD_VAR 0 9
109504: PUSH
109505: FOR_IN
109506: IFFALSE 109550
// if not GetTag ( i ) then
109508: LD_VAR 0 5
109512: PPUSH
109513: CALL_OW 110
109517: NOT
109518: IFFALSE 109548
// begin defenders := defenders union i ;
109520: LD_ADDR_VAR 0 2
109524: PUSH
109525: LD_VAR 0 2
109529: PUSH
109530: LD_VAR 0 5
109534: UNION
109535: ST_TO_ADDR
// SetTag ( i , 18 ) ;
109536: LD_VAR 0 5
109540: PPUSH
109541: LD_INT 18
109543: PPUSH
109544: CALL_OW 109
// end ;
109548: GO 109505
109550: POP
109551: POP
// repeat wait ( 0 0$2 ) ;
109552: LD_INT 70
109554: PPUSH
109555: CALL_OW 67
// enemy := mc_scan [ base ] ;
109559: LD_ADDR_VAR 0 3
109563: PUSH
109564: LD_EXP 70
109568: PUSH
109569: LD_VAR 0 1
109573: ARRAY
109574: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
109575: LD_EXP 47
109579: PUSH
109580: LD_VAR 0 1
109584: ARRAY
109585: NOT
109586: PUSH
109587: LD_EXP 47
109591: PUSH
109592: LD_VAR 0 1
109596: ARRAY
109597: PUSH
109598: EMPTY
109599: EQUAL
109600: OR
109601: IFFALSE 109638
// begin for i in defenders do
109603: LD_ADDR_VAR 0 5
109607: PUSH
109608: LD_VAR 0 2
109612: PUSH
109613: FOR_IN
109614: IFFALSE 109627
// ComStop ( i ) ;
109616: LD_VAR 0 5
109620: PPUSH
109621: CALL_OW 141
109625: GO 109613
109627: POP
109628: POP
// defenders := [ ] ;
109629: LD_ADDR_VAR 0 2
109633: PUSH
109634: EMPTY
109635: ST_TO_ADDR
// exit ;
109636: GO 111007
// end ; for i in defenders do
109638: LD_ADDR_VAR 0 5
109642: PUSH
109643: LD_VAR 0 2
109647: PUSH
109648: FOR_IN
109649: IFFALSE 110467
// begin e := NearestUnitToUnit ( enemy , i ) ;
109651: LD_ADDR_VAR 0 14
109655: PUSH
109656: LD_VAR 0 3
109660: PPUSH
109661: LD_VAR 0 5
109665: PPUSH
109666: CALL_OW 74
109670: ST_TO_ADDR
// depot := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
109671: LD_ADDR_VAR 0 8
109675: PUSH
109676: LD_EXP 47
109680: PUSH
109681: LD_VAR 0 1
109685: ARRAY
109686: PPUSH
109687: LD_INT 2
109689: PUSH
109690: LD_INT 30
109692: PUSH
109693: LD_INT 0
109695: PUSH
109696: EMPTY
109697: LIST
109698: LIST
109699: PUSH
109700: LD_INT 30
109702: PUSH
109703: LD_INT 1
109705: PUSH
109706: EMPTY
109707: LIST
109708: LIST
109709: PUSH
109710: EMPTY
109711: LIST
109712: LIST
109713: LIST
109714: PPUSH
109715: CALL_OW 72
109719: ST_TO_ADDR
// depot_under_attack := ( not depot or UnitFilter ( depot , [ f_not , [ f_lives , 600 ] ] ) ) ;
109720: LD_ADDR_VAR 0 17
109724: PUSH
109725: LD_VAR 0 8
109729: NOT
109730: PUSH
109731: LD_VAR 0 8
109735: PPUSH
109736: LD_INT 3
109738: PUSH
109739: LD_INT 24
109741: PUSH
109742: LD_INT 600
109744: PUSH
109745: EMPTY
109746: LIST
109747: LIST
109748: PUSH
109749: EMPTY
109750: LIST
109751: LIST
109752: PPUSH
109753: CALL_OW 72
109757: OR
109758: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
109759: LD_VAR 0 5
109763: PPUSH
109764: CALL_OW 247
109768: PUSH
109769: LD_INT 2
109771: DOUBLE
109772: EQUAL
109773: IFTRUE 109777
109775: GO 110173
109777: POP
// begin if GetLives ( i ) > 650 and ( GetDistUnits ( i , e ) < 40 or IsInArea ( e , mc_scan_area [ base ] ) ) then
109778: LD_VAR 0 5
109782: PPUSH
109783: CALL_OW 256
109787: PUSH
109788: LD_INT 650
109790: GREATER
109791: PUSH
109792: LD_VAR 0 5
109796: PPUSH
109797: LD_VAR 0 14
109801: PPUSH
109802: CALL_OW 296
109806: PUSH
109807: LD_INT 40
109809: LESS
109810: PUSH
109811: LD_VAR 0 14
109815: PPUSH
109816: LD_EXP 72
109820: PUSH
109821: LD_VAR 0 1
109825: ARRAY
109826: PPUSH
109827: CALL_OW 308
109831: OR
109832: AND
109833: IFFALSE 109955
// begin if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 30 and depot then
109835: LD_VAR 0 5
109839: PPUSH
109840: CALL_OW 262
109844: PUSH
109845: LD_INT 1
109847: EQUAL
109848: PUSH
109849: LD_VAR 0 5
109853: PPUSH
109854: CALL_OW 261
109858: PUSH
109859: LD_INT 30
109861: LESS
109862: AND
109863: PUSH
109864: LD_VAR 0 8
109868: AND
109869: IFFALSE 109939
// begin ComMoveUnit ( i , NearestUnitToUnit ( depot , i ) ) ;
109871: LD_VAR 0 5
109875: PPUSH
109876: LD_VAR 0 8
109880: PPUSH
109881: LD_VAR 0 5
109885: PPUSH
109886: CALL_OW 74
109890: PPUSH
109891: CALL_OW 112
// if GetDistUnits ( i , NearestUnitToUnit ( depot , i ) ) < 6 then
109895: LD_VAR 0 5
109899: PPUSH
109900: LD_VAR 0 8
109904: PPUSH
109905: LD_VAR 0 5
109909: PPUSH
109910: CALL_OW 74
109914: PPUSH
109915: CALL_OW 296
109919: PUSH
109920: LD_INT 6
109922: LESS
109923: IFFALSE 109937
// SetFuel ( i , 100 ) ;
109925: LD_VAR 0 5
109929: PPUSH
109930: LD_INT 100
109932: PPUSH
109933: CALL_OW 240
// end else
109937: GO 109953
// ComAttackUnit ( i , e ) ;
109939: LD_VAR 0 5
109943: PPUSH
109944: LD_VAR 0 14
109948: PPUSH
109949: CALL_OW 115
// end else
109953: GO 110056
// if ( ( not IsInArea ( e , mc_scan_area [ base ] ) and GetDistUnits ( i , e ) >= 40 ) or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
109955: LD_VAR 0 14
109959: PPUSH
109960: LD_EXP 72
109964: PUSH
109965: LD_VAR 0 1
109969: ARRAY
109970: PPUSH
109971: CALL_OW 308
109975: NOT
109976: PUSH
109977: LD_VAR 0 5
109981: PPUSH
109982: LD_VAR 0 14
109986: PPUSH
109987: CALL_OW 296
109991: PUSH
109992: LD_INT 40
109994: GREATEREQUAL
109995: AND
109996: PUSH
109997: LD_VAR 0 5
110001: PPUSH
110002: CALL_OW 256
110006: PUSH
110007: LD_INT 650
110009: LESSEQUAL
110010: OR
110011: PUSH
110012: LD_VAR 0 5
110016: PPUSH
110017: LD_EXP 71
110021: PUSH
110022: LD_VAR 0 1
110026: ARRAY
110027: PPUSH
110028: CALL_OW 308
110032: NOT
110033: AND
110034: IFFALSE 110056
// ComMoveToArea ( i , mc_parking [ base ] ) ;
110036: LD_VAR 0 5
110040: PPUSH
110041: LD_EXP 71
110045: PUSH
110046: LD_VAR 0 1
110050: ARRAY
110051: PPUSH
110052: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
110056: LD_VAR 0 5
110060: PPUSH
110061: CALL_OW 256
110065: PUSH
110066: LD_INT 998
110068: LESS
110069: PUSH
110070: LD_VAR 0 5
110074: PPUSH
110075: CALL_OW 263
110079: PUSH
110080: LD_INT 1
110082: EQUAL
110083: AND
110084: PUSH
110085: LD_VAR 0 5
110089: PPUSH
110090: CALL_OW 311
110094: AND
110095: PUSH
110096: LD_VAR 0 5
110100: PPUSH
110101: LD_EXP 71
110105: PUSH
110106: LD_VAR 0 1
110110: ARRAY
110111: PPUSH
110112: CALL_OW 308
110116: AND
110117: IFFALSE 110171
// begin mech := IsDrivenBy ( i ) ;
110119: LD_ADDR_VAR 0 10
110123: PUSH
110124: LD_VAR 0 5
110128: PPUSH
110129: CALL_OW 311
110133: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
110134: LD_VAR 0 10
110138: PPUSH
110139: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
110143: LD_VAR 0 10
110147: PPUSH
110148: LD_VAR 0 5
110152: PPUSH
110153: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
110157: LD_VAR 0 10
110161: PPUSH
110162: LD_VAR 0 5
110166: PPUSH
110167: CALL_OW 180
// end ; end ; unit_human :
110171: GO 110438
110173: LD_INT 1
110175: DOUBLE
110176: EQUAL
110177: IFTRUE 110181
110179: GO 110437
110181: POP
// begin b := IsInUnit ( i ) ;
110182: LD_ADDR_VAR 0 19
110186: PUSH
110187: LD_VAR 0 5
110191: PPUSH
110192: CALL_OW 310
110196: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
110197: LD_ADDR_VAR 0 20
110201: PUSH
110202: LD_VAR 0 19
110206: NOT
110207: PUSH
110208: LD_VAR 0 19
110212: PPUSH
110213: CALL_OW 266
110217: PUSH
110218: LD_INT 32
110220: PUSH
110221: LD_INT 31
110223: PUSH
110224: EMPTY
110225: LIST
110226: LIST
110227: IN
110228: OR
110229: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
110230: LD_VAR 0 17
110234: PUSH
110235: LD_VAR 0 2
110239: PPUSH
110240: LD_INT 21
110242: PUSH
110243: LD_INT 2
110245: PUSH
110246: EMPTY
110247: LIST
110248: LIST
110249: PPUSH
110250: CALL_OW 72
110254: PUSH
110255: LD_INT 1
110257: LESSEQUAL
110258: OR
110259: PUSH
110260: LD_VAR 0 20
110264: AND
110265: PUSH
110266: LD_VAR 0 5
110270: PUSH
110271: LD_VAR 0 18
110275: IN
110276: NOT
110277: AND
110278: IFFALSE 110371
// begin if b then
110280: LD_VAR 0 19
110284: IFFALSE 110333
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
110286: LD_VAR 0 19
110290: PPUSH
110291: LD_VAR 0 3
110295: PPUSH
110296: LD_VAR 0 19
110300: PPUSH
110301: CALL_OW 74
110305: PPUSH
110306: CALL_OW 296
110310: PUSH
110311: LD_INT 10
110313: LESS
110314: PUSH
110315: LD_VAR 0 19
110319: PPUSH
110320: CALL_OW 461
110324: PUSH
110325: LD_INT 7
110327: NONEQUAL
110328: AND
110329: IFFALSE 110333
// continue ;
110331: GO 109648
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
110333: LD_ADDR_VAR 0 18
110337: PUSH
110338: LD_VAR 0 18
110342: PPUSH
110343: LD_VAR 0 18
110347: PUSH
110348: LD_INT 1
110350: PLUS
110351: PPUSH
110352: LD_VAR 0 5
110356: PPUSH
110357: CALL_OW 1
110361: ST_TO_ADDR
// ComExitBuilding ( i ) ;
110362: LD_VAR 0 5
110366: PPUSH
110367: CALL_OW 122
// end ; if sold_defenders then
110371: LD_VAR 0 18
110375: IFFALSE 110435
// if i in sold_defenders then
110377: LD_VAR 0 5
110381: PUSH
110382: LD_VAR 0 18
110386: IN
110387: IFFALSE 110435
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
110389: LD_VAR 0 5
110393: PPUSH
110394: CALL_OW 314
110398: NOT
110399: PUSH
110400: LD_VAR 0 5
110404: PPUSH
110405: LD_VAR 0 14
110409: PPUSH
110410: CALL_OW 296
110414: PUSH
110415: LD_INT 30
110417: LESS
110418: AND
110419: IFFALSE 110435
// ComAttackUnit ( i , e ) ;
110421: LD_VAR 0 5
110425: PPUSH
110426: LD_VAR 0 14
110430: PPUSH
110431: CALL_OW 115
// end ; end ; end ;
110435: GO 110438
110437: POP
// if IsDead ( i ) then
110438: LD_VAR 0 5
110442: PPUSH
110443: CALL_OW 301
110447: IFFALSE 110465
// defenders := defenders diff i ;
110449: LD_ADDR_VAR 0 2
110453: PUSH
110454: LD_VAR 0 2
110458: PUSH
110459: LD_VAR 0 5
110463: DIFF
110464: ST_TO_ADDR
// end ;
110465: GO 109648
110467: POP
110468: POP
// until not enemy or not defenders or not mc_bases [ base ] ;
110469: LD_VAR 0 3
110473: NOT
110474: PUSH
110475: LD_VAR 0 2
110479: NOT
110480: OR
110481: PUSH
110482: LD_EXP 47
110486: PUSH
110487: LD_VAR 0 1
110491: ARRAY
110492: NOT
110493: OR
110494: IFFALSE 109552
// MC_Reset ( base , 18 ) ;
110496: LD_VAR 0 1
110500: PPUSH
110501: LD_INT 18
110503: PPUSH
110504: CALL 60660 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
110508: LD_ADDR_VAR 0 2
110512: PUSH
110513: LD_VAR 0 2
110517: PUSH
110518: LD_VAR 0 2
110522: PPUSH
110523: LD_INT 2
110525: PUSH
110526: LD_INT 25
110528: PUSH
110529: LD_INT 1
110531: PUSH
110532: EMPTY
110533: LIST
110534: LIST
110535: PUSH
110536: LD_INT 25
110538: PUSH
110539: LD_INT 5
110541: PUSH
110542: EMPTY
110543: LIST
110544: LIST
110545: PUSH
110546: LD_INT 25
110548: PUSH
110549: LD_INT 8
110551: PUSH
110552: EMPTY
110553: LIST
110554: LIST
110555: PUSH
110556: LD_INT 25
110558: PUSH
110559: LD_INT 9
110561: PUSH
110562: EMPTY
110563: LIST
110564: LIST
110565: PUSH
110566: EMPTY
110567: LIST
110568: LIST
110569: LIST
110570: LIST
110571: LIST
110572: PPUSH
110573: CALL_OW 72
110577: DIFF
110578: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
110579: LD_VAR 0 3
110583: NOT
110584: PUSH
110585: LD_VAR 0 2
110589: PPUSH
110590: LD_INT 21
110592: PUSH
110593: LD_INT 2
110595: PUSH
110596: EMPTY
110597: LIST
110598: LIST
110599: PPUSH
110600: CALL_OW 72
110604: AND
110605: IFFALSE 110943
// begin tmp := FilterByTag ( defenders , 19 ) ;
110607: LD_ADDR_VAR 0 12
110611: PUSH
110612: LD_VAR 0 2
110616: PPUSH
110617: LD_INT 19
110619: PPUSH
110620: CALL 52876 0 2
110624: ST_TO_ADDR
// if tmp then
110625: LD_VAR 0 12
110629: IFFALSE 110699
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
110631: LD_ADDR_VAR 0 12
110635: PUSH
110636: LD_VAR 0 12
110640: PPUSH
110641: LD_INT 25
110643: PUSH
110644: LD_INT 3
110646: PUSH
110647: EMPTY
110648: LIST
110649: LIST
110650: PPUSH
110651: CALL_OW 72
110655: ST_TO_ADDR
// if tmp then
110656: LD_VAR 0 12
110660: IFFALSE 110699
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
110662: LD_ADDR_EXP 59
110666: PUSH
110667: LD_EXP 59
110671: PPUSH
110672: LD_VAR 0 1
110676: PPUSH
110677: LD_EXP 59
110681: PUSH
110682: LD_VAR 0 1
110686: ARRAY
110687: PUSH
110688: LD_VAR 0 12
110692: UNION
110693: PPUSH
110694: CALL_OW 1
110698: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
110699: LD_VAR 0 1
110703: PPUSH
110704: LD_INT 19
110706: PPUSH
110707: CALL 60660 0 2
// repeat wait ( 0 0$1 ) ;
110711: LD_INT 35
110713: PPUSH
110714: CALL_OW 67
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
110718: LD_EXP 47
110722: PUSH
110723: LD_VAR 0 1
110727: ARRAY
110728: NOT
110729: PUSH
110730: LD_EXP 47
110734: PUSH
110735: LD_VAR 0 1
110739: ARRAY
110740: PUSH
110741: EMPTY
110742: EQUAL
110743: OR
110744: IFFALSE 110781
// begin for i in defenders do
110746: LD_ADDR_VAR 0 5
110750: PUSH
110751: LD_VAR 0 2
110755: PUSH
110756: FOR_IN
110757: IFFALSE 110770
// ComStop ( i ) ;
110759: LD_VAR 0 5
110763: PPUSH
110764: CALL_OW 141
110768: GO 110756
110770: POP
110771: POP
// defenders := [ ] ;
110772: LD_ADDR_VAR 0 2
110776: PUSH
110777: EMPTY
110778: ST_TO_ADDR
// exit ;
110779: GO 111007
// end ; for i in defenders do
110781: LD_ADDR_VAR 0 5
110785: PUSH
110786: LD_VAR 0 2
110790: PUSH
110791: FOR_IN
110792: IFFALSE 110881
// begin if not IsInArea ( i , mc_parking [ base ] ) then
110794: LD_VAR 0 5
110798: PPUSH
110799: LD_EXP 71
110803: PUSH
110804: LD_VAR 0 1
110808: ARRAY
110809: PPUSH
110810: CALL_OW 308
110814: NOT
110815: IFFALSE 110839
// ComMoveToArea ( i , mc_parking [ base ] ) else
110817: LD_VAR 0 5
110821: PPUSH
110822: LD_EXP 71
110826: PUSH
110827: LD_VAR 0 1
110831: ARRAY
110832: PPUSH
110833: CALL_OW 113
110837: GO 110879
// if GetControl ( i ) = control_manual then
110839: LD_VAR 0 5
110843: PPUSH
110844: CALL_OW 263
110848: PUSH
110849: LD_INT 1
110851: EQUAL
110852: IFFALSE 110879
// if IsDrivenBy ( i ) then
110854: LD_VAR 0 5
110858: PPUSH
110859: CALL_OW 311
110863: IFFALSE 110879
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
110865: LD_VAR 0 5
110869: PPUSH
110870: CALL_OW 311
110874: PPUSH
110875: CALL_OW 121
// end ;
110879: GO 110791
110881: POP
110882: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] or not mc_bases [ base ] ;
110883: LD_VAR 0 2
110887: PPUSH
110888: LD_INT 95
110890: PUSH
110891: LD_EXP 71
110895: PUSH
110896: LD_VAR 0 1
110900: ARRAY
110901: PUSH
110902: EMPTY
110903: LIST
110904: LIST
110905: PPUSH
110906: CALL_OW 72
110910: PUSH
110911: LD_VAR 0 2
110915: EQUAL
110916: PUSH
110917: LD_EXP 70
110921: PUSH
110922: LD_VAR 0 1
110926: ARRAY
110927: OR
110928: PUSH
110929: LD_EXP 47
110933: PUSH
110934: LD_VAR 0 1
110938: ARRAY
110939: NOT
110940: OR
110941: IFFALSE 110711
// end ; mc_defender := Replace ( mc_defender , base , UnitFilter ( defenders , [ f_type , unit_vehicle ] ) ) ;
110943: LD_ADDR_EXP 69
110947: PUSH
110948: LD_EXP 69
110952: PPUSH
110953: LD_VAR 0 1
110957: PPUSH
110958: LD_VAR 0 2
110962: PPUSH
110963: LD_INT 21
110965: PUSH
110966: LD_INT 2
110968: PUSH
110969: EMPTY
110970: LIST
110971: LIST
110972: PPUSH
110973: CALL_OW 72
110977: PPUSH
110978: CALL_OW 1
110982: ST_TO_ADDR
// MC_Reset ( base , 19 ) ;
110983: LD_VAR 0 1
110987: PPUSH
110988: LD_INT 19
110990: PPUSH
110991: CALL 60660 0 2
// MC_Reset ( base , 20 ) ;
110995: LD_VAR 0 1
110999: PPUSH
111000: LD_INT 20
111002: PPUSH
111003: CALL 60660 0 2
// end ;
111007: LD_VAR 0 4
111011: RET
