// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// InitSettings ;
  11: CALL 51 0 0
// if debug then
  15: LD_EXP 1
  19: IFFALSE 38
// begin PlaceSeeing ( 1 , 1 , 1 , - 372963 ) ;
  21: LD_INT 1
  23: PPUSH
  24: LD_INT 1
  26: PPUSH
  27: LD_INT 1
  29: PPUSH
  30: LD_INT 372963
  32: NEG
  33: PPUSH
  34: CALL_OW 330
// end ; SetTechnologies ;
  38: CALL 602 0 0
// SetDiplomacy ;
  42: CALL 814 0 0
// PrepareGame ;
  46: CALL 896 0 0
// end ;
  50: END
// export debug , GameType , game , disableGlobalTimer ; export mc_amer , mc_leg , mc_rus_1 , mc_rus_2 ; export playerCommander , playerForces , allyCommander , Powell , Farmer , ruOutpost , ruEscape , staticMines , baseCaptured , legDestCounter , cratesSpawns , legOfferAccepted , legChangeSide , allyDestCounter , sibBombAllowed , reinforceAllowed , commander , cratesSpawn , outpostEscape , dialogueMineDetected ; end_of_file export function InitSettings ; begin
  51: LD_INT 0
  53: PPUSH
// debug := false ;
  54: LD_ADDR_EXP 1
  58: PUSH
  59: LD_INT 0
  61: ST_TO_ADDR
// GameType := 1 ;
  62: LD_ADDR_EXP 2
  66: PUSH
  67: LD_INT 1
  69: ST_TO_ADDR
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  70: LD_ADDR_OWVAR 67
  74: PUSH
  75: LD_INT 0
  77: PPUSH
  78: CALL_OW 426
  82: ST_TO_ADDR
// sibBombAllowed := GetMultiPlayerSetting ( 1 ) - 1 ;
  83: LD_ADDR_EXP 23
  87: PUSH
  88: LD_INT 1
  90: PPUSH
  91: CALL_OW 426
  95: PUSH
  96: LD_INT 1
  98: MINUS
  99: ST_TO_ADDR
// reinforceAllowed := GetMultiPlayerSetting ( 2 ) - 1 ;
 100: LD_ADDR_EXP 24
 104: PUSH
 105: LD_INT 2
 107: PPUSH
 108: CALL_OW 426
 112: PUSH
 113: LD_INT 1
 115: MINUS
 116: ST_TO_ADDR
// cratesSpawn := GetMultiPlayerSetting ( 3 ) ;
 117: LD_ADDR_EXP 26
 121: PUSH
 122: LD_INT 3
 124: PPUSH
 125: CALL_OW 426
 129: ST_TO_ADDR
// commander := GetMultiPlayerSetting ( 4 ) ;
 130: LD_ADDR_EXP 25
 134: PUSH
 135: LD_INT 4
 137: PPUSH
 138: CALL_OW 426
 142: ST_TO_ADDR
// if not commander then
 143: LD_EXP 25
 147: NOT
 148: IFFALSE 158
// commander := 3 ;
 150: LD_ADDR_EXP 25
 154: PUSH
 155: LD_INT 3
 157: ST_TO_ADDR
// if not debug then
 158: LD_EXP 1
 162: NOT
 163: IFFALSE 167
// exit ;
 165: GO 224
// display_strings := [ Difficulty:  & Difficulty , sibBomb:  & sibBombAllowed , reinforceAllowed:  & reinforceAllowed , cratesSpawn:  & cratesSpawn , commander:  & commander ] ;
 167: LD_ADDR_OWVAR 47
 171: PUSH
 172: LD_STRING Difficulty: 
 174: PUSH
 175: LD_OWVAR 67
 179: STR
 180: PUSH
 181: LD_STRING sibBomb: 
 183: PUSH
 184: LD_EXP 23
 188: STR
 189: PUSH
 190: LD_STRING reinforceAllowed: 
 192: PUSH
 193: LD_EXP 24
 197: STR
 198: PUSH
 199: LD_STRING cratesSpawn: 
 201: PUSH
 202: LD_EXP 26
 206: STR
 207: PUSH
 208: LD_STRING commander: 
 210: PUSH
 211: LD_EXP 25
 215: STR
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: LIST
 223: ST_TO_ADDR
// end ;
 224: LD_VAR 0 1
 228: RET
// every 0 0$1 trigger game and GameType = 1 and not disableGlobalTimer do
 229: LD_EXP 3
 233: PUSH
 234: LD_EXP 2
 238: PUSH
 239: LD_INT 1
 241: EQUAL
 242: AND
 243: PUSH
 244: LD_EXP 4
 248: NOT
 249: AND
 250: IFFALSE 273
 252: GO 254
 254: DISABLE
// begin enable ;
 255: ENABLE
// display_strings := [ #SkrTime , tick ] ;
 256: LD_ADDR_OWVAR 47
 260: PUSH
 261: LD_STRING #SkrTime
 263: PUSH
 264: LD_OWVAR 1
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: ST_TO_ADDR
// end ;
 273: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 274: LD_EXP 19
 278: PUSH
 279: LD_EXP 3
 283: AND
 284: PUSH
 285: LD_EXP 2
 289: PUSH
 290: LD_INT 1
 292: EQUAL
 293: AND
 294: IFFALSE 355
 296: GO 298
 298: DISABLE
// Crates ( cratesSpawns [ 1 ] [ 1 ] , cratesSpawns [ 1 ] [ 2 ] , cratesSpawns [ 1 ] [ 3 ] , cratesSpawns [ 1 ] [ 4 ] ) ;
 299: LD_EXP 19
 303: PUSH
 304: LD_INT 1
 306: ARRAY
 307: PUSH
 308: LD_INT 1
 310: ARRAY
 311: PPUSH
 312: LD_EXP 19
 316: PUSH
 317: LD_INT 1
 319: ARRAY
 320: PUSH
 321: LD_INT 2
 323: ARRAY
 324: PPUSH
 325: LD_EXP 19
 329: PUSH
 330: LD_INT 1
 332: ARRAY
 333: PUSH
 334: LD_INT 3
 336: ARRAY
 337: PPUSH
 338: LD_EXP 19
 342: PUSH
 343: LD_INT 1
 345: ARRAY
 346: PUSH
 347: LD_INT 4
 349: ARRAY
 350: PPUSH
 351: CALL 61370 0 4
 355: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 356: LD_EXP 19
 360: PUSH
 361: LD_EXP 3
 365: AND
 366: PUSH
 367: LD_EXP 2
 371: PUSH
 372: LD_INT 1
 374: EQUAL
 375: AND
 376: IFFALSE 437
 378: GO 380
 380: DISABLE
// Crates ( cratesSpawns [ 2 ] [ 1 ] , cratesSpawns [ 2 ] [ 2 ] , cratesSpawns [ 2 ] [ 3 ] , cratesSpawns [ 2 ] [ 4 ] ) ;
 381: LD_EXP 19
 385: PUSH
 386: LD_INT 2
 388: ARRAY
 389: PUSH
 390: LD_INT 1
 392: ARRAY
 393: PPUSH
 394: LD_EXP 19
 398: PUSH
 399: LD_INT 2
 401: ARRAY
 402: PUSH
 403: LD_INT 2
 405: ARRAY
 406: PPUSH
 407: LD_EXP 19
 411: PUSH
 412: LD_INT 2
 414: ARRAY
 415: PUSH
 416: LD_INT 3
 418: ARRAY
 419: PPUSH
 420: LD_EXP 19
 424: PUSH
 425: LD_INT 2
 427: ARRAY
 428: PUSH
 429: LD_INT 4
 431: ARRAY
 432: PPUSH
 433: CALL 61370 0 4
 437: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 438: LD_EXP 19
 442: PUSH
 443: LD_EXP 3
 447: AND
 448: PUSH
 449: LD_EXP 2
 453: PUSH
 454: LD_INT 1
 456: EQUAL
 457: AND
 458: IFFALSE 519
 460: GO 462
 462: DISABLE
// Crates ( cratesSpawns [ 3 ] [ 1 ] , cratesSpawns [ 3 ] [ 2 ] , cratesSpawns [ 3 ] [ 3 ] , cratesSpawns [ 3 ] [ 4 ] ) ;
 463: LD_EXP 19
 467: PUSH
 468: LD_INT 3
 470: ARRAY
 471: PUSH
 472: LD_INT 1
 474: ARRAY
 475: PPUSH
 476: LD_EXP 19
 480: PUSH
 481: LD_INT 3
 483: ARRAY
 484: PUSH
 485: LD_INT 2
 487: ARRAY
 488: PPUSH
 489: LD_EXP 19
 493: PUSH
 494: LD_INT 3
 496: ARRAY
 497: PUSH
 498: LD_INT 3
 500: ARRAY
 501: PPUSH
 502: LD_EXP 19
 506: PUSH
 507: LD_INT 3
 509: ARRAY
 510: PUSH
 511: LD_INT 4
 513: ARRAY
 514: PPUSH
 515: CALL 61370 0 4
 519: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 520: LD_EXP 19
 524: PUSH
 525: LD_EXP 3
 529: AND
 530: PUSH
 531: LD_EXP 2
 535: PUSH
 536: LD_INT 1
 538: EQUAL
 539: AND
 540: IFFALSE 601
 542: GO 544
 544: DISABLE
// Crates ( cratesSpawns [ 4 ] [ 1 ] , cratesSpawns [ 4 ] [ 2 ] , cratesSpawns [ 4 ] [ 3 ] , cratesSpawns [ 4 ] [ 4 ] ) ;
 545: LD_EXP 19
 549: PUSH
 550: LD_INT 4
 552: ARRAY
 553: PUSH
 554: LD_INT 1
 556: ARRAY
 557: PPUSH
 558: LD_EXP 19
 562: PUSH
 563: LD_INT 4
 565: ARRAY
 566: PUSH
 567: LD_INT 2
 569: ARRAY
 570: PPUSH
 571: LD_EXP 19
 575: PUSH
 576: LD_INT 4
 578: ARRAY
 579: PUSH
 580: LD_INT 3
 582: ARRAY
 583: PPUSH
 584: LD_EXP 19
 588: PUSH
 589: LD_INT 4
 591: ARRAY
 592: PUSH
 593: LD_INT 4
 595: ARRAY
 596: PPUSH
 597: CALL 61370 0 4
 601: END
// export function SetTechnologies ; var i , j , ban_techs , res_techs ; begin
 602: LD_INT 0
 604: PPUSH
 605: PPUSH
 606: PPUSH
 607: PPUSH
 608: PPUSH
// if GameType = 1 then
 609: LD_EXP 2
 613: PUSH
 614: LD_INT 1
 616: EQUAL
 617: IFFALSE 686
// begin ban_techs := [ ] ;
 619: LD_ADDR_VAR 0 4
 623: PUSH
 624: EMPTY
 625: ST_TO_ADDR
// if sibBombAllowed < 2 then
 626: LD_EXP 23
 630: PUSH
 631: LD_INT 2
 633: LESS
 634: IFFALSE 647
// ban_techs := [ tech_sibFiss ] ;
 636: LD_ADDR_VAR 0 4
 640: PUSH
 641: LD_INT 25
 643: PUSH
 644: EMPTY
 645: LIST
 646: ST_TO_ADDR
// res_techs := [ tech_oilPow , tech_oilEng , tech_tech1 , tech_tech2 , tech_tech3 , tech_gun , tech_gatling , tech_rocket ] ;
 647: LD_ADDR_VAR 0 5
 651: PUSH
 652: LD_INT 46
 654: PUSH
 655: LD_INT 47
 657: PUSH
 658: LD_INT 48
 660: PUSH
 661: LD_INT 49
 663: PUSH
 664: LD_INT 50
 666: PUSH
 667: LD_INT 39
 669: PUSH
 670: LD_INT 69
 672: PUSH
 673: LD_INT 40
 675: PUSH
 676: EMPTY
 677: LIST
 678: LIST
 679: LIST
 680: LIST
 681: LIST
 682: LIST
 683: LIST
 684: LIST
 685: ST_TO_ADDR
// end ; for i = 1 to 8 do
 686: LD_ADDR_VAR 0 2
 690: PUSH
 691: DOUBLE
 692: LD_INT 1
 694: DEC
 695: ST_TO_ADDR
 696: LD_INT 8
 698: PUSH
 699: FOR_TO
 700: IFFALSE 784
// begin if res_techs then
 702: LD_VAR 0 5
 706: IFFALSE 742
// for j in res_techs do
 708: LD_ADDR_VAR 0 3
 712: PUSH
 713: LD_VAR 0 5
 717: PUSH
 718: FOR_IN
 719: IFFALSE 740
// SetTech ( j , i , state_researched ) ;
 721: LD_VAR 0 3
 725: PPUSH
 726: LD_VAR 0 2
 730: PPUSH
 731: LD_INT 2
 733: PPUSH
 734: CALL_OW 322
 738: GO 718
 740: POP
 741: POP
// if ban_techs then
 742: LD_VAR 0 4
 746: IFFALSE 782
// for j in ban_techs do
 748: LD_ADDR_VAR 0 3
 752: PUSH
 753: LD_VAR 0 4
 757: PUSH
 758: FOR_IN
 759: IFFALSE 780
// SetTech ( j , i , state_disabled ) ;
 761: LD_VAR 0 3
 765: PPUSH
 766: LD_VAR 0 2
 770: PPUSH
 771: LD_INT 0
 773: PPUSH
 774: CALL_OW 322
 778: GO 758
 780: POP
 781: POP
// end ;
 782: GO 699
 784: POP
 785: POP
// if sibBombAllowed = 1 then
 786: LD_EXP 23
 790: PUSH
 791: LD_INT 1
 793: EQUAL
 794: IFFALSE 809
// SetTech ( tech_sibFiss , 3 , state_enabled ) ;
 796: LD_INT 25
 798: PPUSH
 799: LD_INT 3
 801: PPUSH
 802: LD_INT 1
 804: PPUSH
 805: CALL_OW 322
// end ;
 809: LD_VAR 0 1
 813: RET
// export function SetDiplomacy ; begin
 814: LD_INT 0
 816: PPUSH
// if GameType = 1 then
 817: LD_EXP 2
 821: PUSH
 822: LD_INT 1
 824: EQUAL
 825: IFFALSE 891
// begin SetAttitude ( 1 , 4 , att_friend , true ) ;
 827: LD_INT 1
 829: PPUSH
 830: LD_INT 4
 832: PPUSH
 833: LD_INT 1
 835: PPUSH
 836: LD_INT 1
 838: PPUSH
 839: CALL_OW 80
// SetAttitude ( 3 , 6 , att_friend , true ) ;
 843: LD_INT 3
 845: PPUSH
 846: LD_INT 6
 848: PPUSH
 849: LD_INT 1
 851: PPUSH
 852: LD_INT 1
 854: PPUSH
 855: CALL_OW 80
// SetAttitude ( 3 , 8 , att_friend , true ) ;
 859: LD_INT 3
 861: PPUSH
 862: LD_INT 8
 864: PPUSH
 865: LD_INT 1
 867: PPUSH
 868: LD_INT 1
 870: PPUSH
 871: CALL_OW 80
// SetAttitude ( 6 , 8 , att_friend , true ) ;
 875: LD_INT 6
 877: PPUSH
 878: LD_INT 8
 880: PPUSH
 881: LD_INT 1
 883: PPUSH
 884: LD_INT 1
 886: PPUSH
 887: CALL_OW 80
// end ; end ;
 891: LD_VAR 0 1
 895: RET
// export function PrepareGame ; var i , tmp , sources ; begin
 896: LD_INT 0
 898: PPUSH
 899: PPUSH
 900: PPUSH
 901: PPUSH
// if GameType = 1 then
 902: LD_EXP 2
 906: PUSH
 907: LD_INT 1
 909: EQUAL
 910: IFFALSE 1402
// begin game := false ;
 912: LD_ADDR_EXP 3
 916: PUSH
 917: LD_INT 0
 919: ST_TO_ADDR
// your_side := 1 ;
 920: LD_ADDR_OWVAR 2
 924: PUSH
 925: LD_INT 1
 927: ST_TO_ADDR
// mc_amer := 1 ;
 928: LD_ADDR_EXP 5
 932: PUSH
 933: LD_INT 1
 935: ST_TO_ADDR
// mc_leg := 2 ;
 936: LD_ADDR_EXP 6
 940: PUSH
 941: LD_INT 2
 943: ST_TO_ADDR
// mc_rus_1 := 3 ;
 944: LD_ADDR_EXP 7
 948: PUSH
 949: LD_INT 3
 951: ST_TO_ADDR
// mc_rus_2 := 4 ;
 952: LD_ADDR_EXP 8
 956: PUSH
 957: LD_INT 4
 959: ST_TO_ADDR
// cratesSpawns := [ [ amerCrates , 1 , 0 , [ 200 , 250 , 300 ] [ cratesSpawn ] ] , [ rusCrates , 8 , 50 , 500 ] , [ legCrates , 5 , 50 , 300 ] , [ playerCrates , [ 4 , 5 , 6 ] [ cratesSpawn ] , 30 , [ 300 , 450 , 500 ] [ cratesSpawn ] ] ] ;
 960: LD_ADDR_EXP 19
 964: PUSH
 965: LD_INT 5
 967: PUSH
 968: LD_INT 1
 970: PUSH
 971: LD_INT 0
 973: PUSH
 974: LD_INT 200
 976: PUSH
 977: LD_INT 250
 979: PUSH
 980: LD_INT 300
 982: PUSH
 983: EMPTY
 984: LIST
 985: LIST
 986: LIST
 987: PUSH
 988: LD_EXP 26
 992: ARRAY
 993: PUSH
 994: EMPTY
 995: LIST
 996: LIST
 997: LIST
 998: LIST
 999: PUSH
1000: LD_INT 13
1002: PUSH
1003: LD_INT 8
1005: PUSH
1006: LD_INT 50
1008: PUSH
1009: LD_INT 500
1011: PUSH
1012: EMPTY
1013: LIST
1014: LIST
1015: LIST
1016: LIST
1017: PUSH
1018: LD_INT 17
1020: PUSH
1021: LD_INT 5
1023: PUSH
1024: LD_INT 50
1026: PUSH
1027: LD_INT 300
1029: PUSH
1030: EMPTY
1031: LIST
1032: LIST
1033: LIST
1034: LIST
1035: PUSH
1036: LD_INT 18
1038: PUSH
1039: LD_INT 4
1041: PUSH
1042: LD_INT 5
1044: PUSH
1045: LD_INT 6
1047: PUSH
1048: EMPTY
1049: LIST
1050: LIST
1051: LIST
1052: PUSH
1053: LD_EXP 26
1057: ARRAY
1058: PUSH
1059: LD_INT 30
1061: PUSH
1062: LD_INT 300
1064: PUSH
1065: LD_INT 450
1067: PUSH
1068: LD_INT 500
1070: PUSH
1071: EMPTY
1072: LIST
1073: LIST
1074: LIST
1075: PUSH
1076: LD_EXP 26
1080: ARRAY
1081: PUSH
1082: EMPTY
1083: LIST
1084: LIST
1085: LIST
1086: LIST
1087: PUSH
1088: EMPTY
1089: LIST
1090: LIST
1091: LIST
1092: LIST
1093: ST_TO_ADDR
// sources := [ [ 190 , 193 , mat_siberit ] , [ 182 , 117 , mat_siberit ] , [ 43 , 2 , mat_siberit ] , [ 114 , 152 , mat_oil ] , [ 85 , 38 , mat_oil ] ] ;
1094: LD_ADDR_VAR 0 4
1098: PUSH
1099: LD_INT 190
1101: PUSH
1102: LD_INT 193
1104: PUSH
1105: LD_INT 3
1107: PUSH
1108: EMPTY
1109: LIST
1110: LIST
1111: LIST
1112: PUSH
1113: LD_INT 182
1115: PUSH
1116: LD_INT 117
1118: PUSH
1119: LD_INT 3
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: LIST
1126: PUSH
1127: LD_INT 43
1129: PUSH
1130: LD_INT 2
1132: PUSH
1133: LD_INT 3
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: LIST
1140: PUSH
1141: LD_INT 114
1143: PUSH
1144: LD_INT 152
1146: PUSH
1147: LD_INT 2
1149: PUSH
1150: EMPTY
1151: LIST
1152: LIST
1153: LIST
1154: PUSH
1155: LD_INT 85
1157: PUSH
1158: LD_INT 38
1160: PUSH
1161: LD_INT 2
1163: PUSH
1164: EMPTY
1165: LIST
1166: LIST
1167: LIST
1168: PUSH
1169: EMPTY
1170: LIST
1171: LIST
1172: LIST
1173: LIST
1174: LIST
1175: ST_TO_ADDR
// for i in sources do
1176: LD_ADDR_VAR 0 2
1180: PUSH
1181: LD_VAR 0 4
1185: PUSH
1186: FOR_IN
1187: IFFALSE 1222
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
1189: LD_VAR 0 2
1193: PUSH
1194: LD_INT 1
1196: ARRAY
1197: PPUSH
1198: LD_VAR 0 2
1202: PUSH
1203: LD_INT 2
1205: ARRAY
1206: PPUSH
1207: LD_VAR 0 2
1211: PUSH
1212: LD_INT 3
1214: ARRAY
1215: PPUSH
1216: CALL_OW 62
1220: GO 1186
1222: POP
1223: POP
// disableGlobalTimer := false ;
1224: LD_ADDR_EXP 4
1228: PUSH
1229: LD_INT 0
1231: ST_TO_ADDR
// ruEscape := [ 0 , [ 5 , 6 , 7 ] [ Difficulty ] ] ;
1232: LD_ADDR_EXP 15
1236: PUSH
1237: LD_INT 0
1239: PUSH
1240: LD_INT 5
1242: PUSH
1243: LD_INT 6
1245: PUSH
1246: LD_INT 7
1248: PUSH
1249: EMPTY
1250: LIST
1251: LIST
1252: LIST
1253: PUSH
1254: LD_OWVAR 67
1258: ARRAY
1259: PUSH
1260: EMPTY
1261: LIST
1262: LIST
1263: ST_TO_ADDR
// ruOutpost := [ ] ;
1264: LD_ADDR_EXP 14
1268: PUSH
1269: EMPTY
1270: ST_TO_ADDR
// staticMines := [ ] ;
1271: LD_ADDR_EXP 16
1275: PUSH
1276: EMPTY
1277: ST_TO_ADDR
// baseCaptured := false ;
1278: LD_ADDR_EXP 17
1282: PUSH
1283: LD_INT 0
1285: ST_TO_ADDR
// legDestCounter := 0 ;
1286: LD_ADDR_EXP 18
1290: PUSH
1291: LD_INT 0
1293: ST_TO_ADDR
// legOfferAccepted := false ;
1294: LD_ADDR_EXP 20
1298: PUSH
1299: LD_INT 0
1301: ST_TO_ADDR
// legChangeSide := false ;
1302: LD_ADDR_EXP 21
1306: PUSH
1307: LD_INT 0
1309: ST_TO_ADDR
// allyDestCounter := 0 ;
1310: LD_ADDR_EXP 22
1314: PUSH
1315: LD_INT 0
1317: ST_TO_ADDR
// outpostEscape := false ;
1318: LD_ADDR_EXP 27
1322: PUSH
1323: LD_INT 0
1325: ST_TO_ADDR
// dialogueMineDetected := false ;
1326: LD_ADDR_EXP 28
1330: PUSH
1331: LD_INT 0
1333: ST_TO_ADDR
// PrepareAmericans ;
1334: CALL 7218 0 0
// PrepareLegion ;
1338: CALL 5483 0 0
// PrepareRussians ;
1342: CALL 2449 0 0
// playerForces := PreparePlayer ;
1346: LD_ADDR_EXP 10
1350: PUSH
1351: CALL 8461 0 0
1355: ST_TO_ADDR
// AnimateTrees ( true ) ;
1356: LD_INT 1
1358: PPUSH
1359: CALL_OW 573
// PrepareNature ( 4 , 3 , 8 , 5 , 3 , 1 , 8 , natureGroundArea , natureWaterArea ) ;
1363: LD_INT 4
1365: PPUSH
1366: LD_INT 3
1368: PPUSH
1369: LD_INT 8
1371: PPUSH
1372: LD_INT 5
1374: PPUSH
1375: LD_INT 3
1377: PPUSH
1378: LD_INT 1
1380: PPUSH
1381: LD_INT 8
1383: PPUSH
1384: LD_INT 2
1386: PPUSH
1387: LD_INT 1
1389: PPUSH
1390: CALL 54118 0 9
// MC_Start ;
1394: CALL 64507 0 0
// Action ;
1398: CALL 10657 0 0
// end ; end ;
1402: LD_VAR 0 1
1406: RET
// export function CustomInitMacro ; begin
1407: LD_INT 0
1409: PPUSH
// if GameType <> 1 then
1410: LD_EXP 2
1414: PUSH
1415: LD_INT 1
1417: NONEQUAL
1418: IFFALSE 1422
// exit ;
1420: GO 2444
// MC_SetScanArea ( mc_amer , amerBase ) ;
1422: LD_EXP 5
1426: PPUSH
1427: LD_INT 3
1429: PPUSH
1430: CALL 87251 0 2
// MC_SetParkingArea ( mc_amer , amerParking ) ;
1434: LD_EXP 5
1438: PPUSH
1439: LD_INT 4
1441: PPUSH
1442: CALL 87195 0 2
// MC_SetAllowedTurretWeapons ( mc_amer , [ us_radar , us_heavy_gun , us_rocket_launcher , us_laser , us_double_laser ] ) ;
1446: LD_EXP 5
1450: PPUSH
1451: LD_INT 11
1453: PUSH
1454: LD_INT 6
1456: PUSH
1457: LD_INT 7
1459: PUSH
1460: LD_INT 9
1462: PUSH
1463: LD_INT 10
1465: PUSH
1466: EMPTY
1467: LIST
1468: LIST
1469: LIST
1470: LIST
1471: LIST
1472: PPUSH
1473: CALL 87083 0 2
// MC_SetCratesArea ( mc_amer , amerCrates ) ;
1477: LD_EXP 5
1481: PPUSH
1482: LD_INT 5
1484: PPUSH
1485: CALL 86765 0 2
// MC_SetTame ( mc_amer , amerBase ) ;
1489: LD_EXP 5
1493: PPUSH
1494: LD_INT 3
1496: PPUSH
1497: CALL 86496 0 2
// MC_SetDefenderLimit ( mc_amer , 4 ) ;
1501: LD_EXP 5
1505: PPUSH
1506: LD_INT 4
1508: PPUSH
1509: CALL 86115 0 2
// MC_SetProduceList ( mc_amer , [ [ us_medium_tracked , engine_combustion , control_remote , us_double_gun ] , [ us_medium_tracked , engine_solar , control_remote , us_laser ] , [ us_heavy_tracked , engine_combustion , control_remote , us_rocket_launcher ] , [ us_heavy_tracked , engine_combustion , control_remote , us_heavy_gun ] , ] ) ;
1513: LD_EXP 5
1517: PPUSH
1518: LD_INT 3
1520: PUSH
1521: LD_INT 1
1523: PUSH
1524: LD_INT 2
1526: PUSH
1527: LD_INT 5
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: LIST
1534: LIST
1535: PUSH
1536: LD_INT 3
1538: PUSH
1539: LD_INT 2
1541: PUSH
1542: LD_INT 2
1544: PUSH
1545: LD_INT 9
1547: PUSH
1548: EMPTY
1549: LIST
1550: LIST
1551: LIST
1552: LIST
1553: PUSH
1554: LD_INT 4
1556: PUSH
1557: LD_INT 1
1559: PUSH
1560: LD_INT 2
1562: PUSH
1563: LD_INT 7
1565: PUSH
1566: EMPTY
1567: LIST
1568: LIST
1569: LIST
1570: LIST
1571: PUSH
1572: LD_INT 4
1574: PUSH
1575: LD_INT 1
1577: PUSH
1578: LD_INT 2
1580: PUSH
1581: LD_INT 6
1583: PUSH
1584: EMPTY
1585: LIST
1586: LIST
1587: LIST
1588: LIST
1589: PUSH
1590: EMPTY
1591: LIST
1592: LIST
1593: LIST
1594: LIST
1595: PPUSH
1596: CALL 85930 0 2
// MC_SetBuildingList ( mc_amer , [ [ b_turret , 114 , 16 , 0 ] , [ b_bunker , 110 , 12 , 0 ] ] ) ;
1600: LD_EXP 5
1604: PPUSH
1605: LD_INT 33
1607: PUSH
1608: LD_INT 114
1610: PUSH
1611: LD_INT 16
1613: PUSH
1614: LD_INT 0
1616: PUSH
1617: EMPTY
1618: LIST
1619: LIST
1620: LIST
1621: LIST
1622: PUSH
1623: LD_INT 32
1625: PUSH
1626: LD_INT 110
1628: PUSH
1629: LD_INT 12
1631: PUSH
1632: LD_INT 0
1634: PUSH
1635: EMPTY
1636: LIST
1637: LIST
1638: LIST
1639: LIST
1640: PUSH
1641: EMPTY
1642: LIST
1643: LIST
1644: PPUSH
1645: CALL 85822 0 2
// MC_SetLabKind ( mc_amer , [ b_lab_weapon , b_lab_opto , b_lab_computer , b_lab_siberium ] ) ;
1649: LD_EXP 5
1653: PPUSH
1654: LD_INT 10
1656: PUSH
1657: LD_INT 15
1659: PUSH
1660: LD_INT 12
1662: PUSH
1663: LD_INT 11
1665: PUSH
1666: EMPTY
1667: LIST
1668: LIST
1669: LIST
1670: LIST
1671: PPUSH
1672: CALL 86672 0 2
// MC_SetScanArea ( mc_leg , legBase ) ;
1676: LD_EXP 6
1680: PPUSH
1681: LD_INT 6
1683: PPUSH
1684: CALL 87251 0 2
// MC_SetParkingArea ( mc_leg , legParking ) ;
1688: LD_EXP 6
1692: PPUSH
1693: LD_INT 7
1695: PPUSH
1696: CALL 87195 0 2
// MC_SetAllowedTurretWeapons ( mc_leg , [ ar_radar , ar_gun , ar_rocket_launcher , ar_gatling_gun ] ) ;
1700: LD_EXP 6
1704: PPUSH
1705: LD_INT 30
1707: PUSH
1708: LD_INT 27
1710: PUSH
1711: LD_INT 28
1713: PUSH
1714: LD_INT 25
1716: PUSH
1717: EMPTY
1718: LIST
1719: LIST
1720: LIST
1721: LIST
1722: PPUSH
1723: CALL 87083 0 2
// MC_SetCratesArea ( mc_leg , legCrates ) ;
1727: LD_EXP 6
1731: PPUSH
1732: LD_INT 17
1734: PPUSH
1735: CALL 86765 0 2
// MC_SetTame ( mc_leg , legBase ) ;
1739: LD_EXP 6
1743: PPUSH
1744: LD_INT 6
1746: PPUSH
1747: CALL 86496 0 2
// MC_SetDefenderLimit ( mc_leg , 5 ) ;
1751: LD_EXP 6
1755: PPUSH
1756: LD_INT 5
1758: PPUSH
1759: CALL 86115 0 2
// MC_SetMinesField ( mc_leg , 10 , legMines ) ;
1763: LD_EXP 6
1767: PPUSH
1768: LD_INT 10
1770: PPUSH
1771: LD_INT 9
1773: PPUSH
1774: CALL 85612 0 3
// MC_SetBuildingList ( mc_leg , [ [ b_armoury , 157 , 144 , 0 ] , [ b_bunker , 151 , 142 , 0 ] , [ b_bunker , 161 , 145 , 0 ] , [ b_bunker , 140 , 133 , 0 ] ] ) ;
1778: LD_EXP 6
1782: PPUSH
1783: LD_INT 4
1785: PUSH
1786: LD_INT 157
1788: PUSH
1789: LD_INT 144
1791: PUSH
1792: LD_INT 0
1794: PUSH
1795: EMPTY
1796: LIST
1797: LIST
1798: LIST
1799: LIST
1800: PUSH
1801: LD_INT 32
1803: PUSH
1804: LD_INT 151
1806: PUSH
1807: LD_INT 142
1809: PUSH
1810: LD_INT 0
1812: PUSH
1813: EMPTY
1814: LIST
1815: LIST
1816: LIST
1817: LIST
1818: PUSH
1819: LD_INT 32
1821: PUSH
1822: LD_INT 161
1824: PUSH
1825: LD_INT 145
1827: PUSH
1828: LD_INT 0
1830: PUSH
1831: EMPTY
1832: LIST
1833: LIST
1834: LIST
1835: LIST
1836: PUSH
1837: LD_INT 32
1839: PUSH
1840: LD_INT 140
1842: PUSH
1843: LD_INT 133
1845: PUSH
1846: LD_INT 0
1848: PUSH
1849: EMPTY
1850: LIST
1851: LIST
1852: LIST
1853: LIST
1854: PUSH
1855: EMPTY
1856: LIST
1857: LIST
1858: LIST
1859: LIST
1860: PPUSH
1861: CALL 85822 0 2
// MC_SetProduceList ( mc_leg , [ [ ar_medium_trike , engine_solar , control_manual , ar_control_tower ] , [ ar_medium_trike , engine_solar , control_manual , ar_control_tower ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_cargo_bay ] ] ) ;
1865: LD_EXP 6
1869: PPUSH
1870: LD_INT 13
1872: PUSH
1873: LD_INT 2
1875: PUSH
1876: LD_INT 1
1878: PUSH
1879: LD_INT 31
1881: PUSH
1882: EMPTY
1883: LIST
1884: LIST
1885: LIST
1886: LIST
1887: PUSH
1888: LD_INT 13
1890: PUSH
1891: LD_INT 2
1893: PUSH
1894: LD_INT 1
1896: PUSH
1897: LD_INT 31
1899: PUSH
1900: EMPTY
1901: LIST
1902: LIST
1903: LIST
1904: LIST
1905: PUSH
1906: LD_INT 13
1908: PUSH
1909: LD_INT 1
1911: PUSH
1912: LD_INT 1
1914: PUSH
1915: LD_INT 27
1917: PUSH
1918: EMPTY
1919: LIST
1920: LIST
1921: LIST
1922: LIST
1923: PUSH
1924: LD_INT 13
1926: PUSH
1927: LD_INT 1
1929: PUSH
1930: LD_INT 2
1932: PUSH
1933: LD_INT 27
1935: PUSH
1936: EMPTY
1937: LIST
1938: LIST
1939: LIST
1940: LIST
1941: PUSH
1942: LD_INT 13
1944: PUSH
1945: LD_INT 1
1947: PUSH
1948: LD_INT 2
1950: PUSH
1951: LD_INT 27
1953: PUSH
1954: EMPTY
1955: LIST
1956: LIST
1957: LIST
1958: LIST
1959: PUSH
1960: LD_INT 13
1962: PUSH
1963: LD_INT 1
1965: PUSH
1966: LD_INT 2
1968: PUSH
1969: LD_INT 28
1971: PUSH
1972: EMPTY
1973: LIST
1974: LIST
1975: LIST
1976: LIST
1977: PUSH
1978: LD_INT 13
1980: PUSH
1981: LD_INT 1
1983: PUSH
1984: LD_INT 2
1986: PUSH
1987: LD_INT 28
1989: PUSH
1990: EMPTY
1991: LIST
1992: LIST
1993: LIST
1994: LIST
1995: PUSH
1996: LD_INT 13
1998: PUSH
1999: LD_INT 1
2001: PUSH
2002: LD_INT 2
2004: PUSH
2005: LD_INT 32
2007: PUSH
2008: EMPTY
2009: LIST
2010: LIST
2011: LIST
2012: LIST
2013: PUSH
2014: EMPTY
2015: LIST
2016: LIST
2017: LIST
2018: LIST
2019: LIST
2020: LIST
2021: LIST
2022: LIST
2023: PPUSH
2024: CALL 85930 0 2
// MC_SetScanArea ( mc_rus_1 , rus1Base ) ;
2028: LD_EXP 7
2032: PPUSH
2033: LD_INT 15
2035: PPUSH
2036: CALL 87251 0 2
// MC_SetParkingArea ( mc_rus_1 , rus1Parking ) ;
2040: LD_EXP 7
2044: PPUSH
2045: LD_INT 16
2047: PPUSH
2048: CALL 87195 0 2
// MC_SetAllowedTurretWeapons ( mc_rus_1 , [ ru_gatling_gun , ru_rocket , ru_rocket_launcher , ru_time_lapser , ru_heavy_gun ] ) ;
2052: LD_EXP 7
2056: PPUSH
2057: LD_INT 43
2059: PUSH
2060: LD_INT 47
2062: PUSH
2063: LD_INT 45
2065: PUSH
2066: LD_INT 49
2068: PUSH
2069: LD_INT 46
2071: PUSH
2072: EMPTY
2073: LIST
2074: LIST
2075: LIST
2076: LIST
2077: LIST
2078: PPUSH
2079: CALL 87083 0 2
// MC_SetCratesArea ( mc_rus_1 , rusCrates ) ;
2083: LD_EXP 7
2087: PPUSH
2088: LD_INT 13
2090: PPUSH
2091: CALL 86765 0 2
// MC_SetTame ( mc_rus_1 , rus1Base ) ;
2095: LD_EXP 7
2099: PPUSH
2100: LD_INT 15
2102: PPUSH
2103: CALL 86496 0 2
// MC_SetDefenderLimit ( mc_rus_1 , 5 ) ;
2107: LD_EXP 7
2111: PPUSH
2112: LD_INT 5
2114: PPUSH
2115: CALL 86115 0 2
// MC_SetProduceList ( mc_rus_1 , [ [ ru_heavy_wheeled , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_wheeled , engine_combustion , control_manual , ru_heavy_gun ] , [ ru_heavy_wheeled , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_heavy_wheeled , engine_combustion , control_manual , ru_rocket ] , [ ru_medium_wheeled , engine_combustion , control_computer , ru_cargo_bay ] ] ) ;
2119: LD_EXP 7
2123: PPUSH
2124: LD_INT 23
2126: PUSH
2127: LD_INT 1
2129: PUSH
2130: LD_INT 3
2132: PUSH
2133: LD_INT 46
2135: PUSH
2136: EMPTY
2137: LIST
2138: LIST
2139: LIST
2140: LIST
2141: PUSH
2142: LD_INT 23
2144: PUSH
2145: LD_INT 1
2147: PUSH
2148: LD_INT 1
2150: PUSH
2151: LD_INT 46
2153: PUSH
2154: EMPTY
2155: LIST
2156: LIST
2157: LIST
2158: LIST
2159: PUSH
2160: LD_INT 23
2162: PUSH
2163: LD_INT 1
2165: PUSH
2166: LD_INT 3
2168: PUSH
2169: LD_INT 45
2171: PUSH
2172: EMPTY
2173: LIST
2174: LIST
2175: LIST
2176: LIST
2177: PUSH
2178: LD_INT 23
2180: PUSH
2181: LD_INT 1
2183: PUSH
2184: LD_INT 1
2186: PUSH
2187: LD_INT 47
2189: PUSH
2190: EMPTY
2191: LIST
2192: LIST
2193: LIST
2194: LIST
2195: PUSH
2196: LD_INT 21
2198: PUSH
2199: LD_INT 1
2201: PUSH
2202: LD_INT 3
2204: PUSH
2205: LD_INT 51
2207: PUSH
2208: EMPTY
2209: LIST
2210: LIST
2211: LIST
2212: LIST
2213: PUSH
2214: EMPTY
2215: LIST
2216: LIST
2217: LIST
2218: LIST
2219: LIST
2220: PPUSH
2221: CALL 85930 0 2
// MC_SetScanArea ( mc_rus_2 , rus2Base ) ;
2225: LD_EXP 8
2229: PPUSH
2230: LD_INT 11
2232: PPUSH
2233: CALL 87251 0 2
// MC_SetParkingArea ( mc_rus_2 , rus2Parking ) ;
2237: LD_EXP 8
2241: PPUSH
2242: LD_INT 12
2244: PPUSH
2245: CALL 87195 0 2
// MC_SetAllowedTurretWeapons ( mc_rus_2 , [ ru_gatling_gun , ru_rocket , ru_rocket_launcher , ru_time_lapser , ru_heavy_gun ] ) ;
2249: LD_EXP 8
2253: PPUSH
2254: LD_INT 43
2256: PUSH
2257: LD_INT 47
2259: PUSH
2260: LD_INT 45
2262: PUSH
2263: LD_INT 49
2265: PUSH
2266: LD_INT 46
2268: PUSH
2269: EMPTY
2270: LIST
2271: LIST
2272: LIST
2273: LIST
2274: LIST
2275: PPUSH
2276: CALL 87083 0 2
// MC_SetCratesArea ( mc_rus_2 , rusCrates ) ;
2280: LD_EXP 8
2284: PPUSH
2285: LD_INT 13
2287: PPUSH
2288: CALL 86765 0 2
// MC_SetTame ( mc_rus_2 , rus2Base ) ;
2292: LD_EXP 8
2296: PPUSH
2297: LD_INT 11
2299: PPUSH
2300: CALL 86496 0 2
// MC_SetDefenderLimit ( mc_rus_2 , 4 ) ;
2304: LD_EXP 8
2308: PPUSH
2309: LD_INT 4
2311: PPUSH
2312: CALL 86115 0 2
// MC_SetTeleportExit ( mc_rus_2 , [ [ 115 , 201 ] ] ) ;
2316: LD_EXP 8
2320: PPUSH
2321: LD_INT 115
2323: PUSH
2324: LD_INT 201
2326: PUSH
2327: EMPTY
2328: LIST
2329: LIST
2330: PUSH
2331: EMPTY
2332: LIST
2333: PPUSH
2334: CALL 86821 0 2
// MC_SetProduceList ( mc_rus_2 , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , ] ) ;
2338: LD_EXP 8
2342: PPUSH
2343: LD_INT 24
2345: PUSH
2346: LD_INT 3
2348: PUSH
2349: LD_INT 3
2351: PUSH
2352: LD_INT 46
2354: PUSH
2355: EMPTY
2356: LIST
2357: LIST
2358: LIST
2359: LIST
2360: PUSH
2361: LD_INT 24
2363: PUSH
2364: LD_INT 3
2366: PUSH
2367: LD_INT 3
2369: PUSH
2370: LD_INT 46
2372: PUSH
2373: EMPTY
2374: LIST
2375: LIST
2376: LIST
2377: LIST
2378: PUSH
2379: LD_INT 24
2381: PUSH
2382: LD_INT 3
2384: PUSH
2385: LD_INT 3
2387: PUSH
2388: LD_INT 46
2390: PUSH
2391: EMPTY
2392: LIST
2393: LIST
2394: LIST
2395: LIST
2396: PUSH
2397: LD_INT 24
2399: PUSH
2400: LD_INT 3
2402: PUSH
2403: LD_INT 3
2405: PUSH
2406: LD_INT 46
2408: PUSH
2409: EMPTY
2410: LIST
2411: LIST
2412: LIST
2413: LIST
2414: PUSH
2415: LD_INT 24
2417: PUSH
2418: LD_INT 3
2420: PUSH
2421: LD_INT 3
2423: PUSH
2424: LD_INT 46
2426: PUSH
2427: EMPTY
2428: LIST
2429: LIST
2430: LIST
2431: LIST
2432: PUSH
2433: EMPTY
2434: LIST
2435: LIST
2436: LIST
2437: LIST
2438: LIST
2439: PPUSH
2440: CALL 85930 0 2
// end ;
2444: LD_VAR 0 1
2448: RET
// export function PrepareRussians ; var i , b , tmp , side , sr , depot , base ; begin
2449: LD_INT 0
2451: PPUSH
2452: PPUSH
2453: PPUSH
2454: PPUSH
2455: PPUSH
2456: PPUSH
2457: PPUSH
2458: PPUSH
// PrepareNature ( 0 , 0 , 3 , 0 , 0 , 0 , 0 , rusApe , 0 ) ;
2459: LD_INT 0
2461: PPUSH
2462: LD_INT 0
2464: PPUSH
2465: LD_INT 3
2467: PPUSH
2468: LD_INT 0
2470: PPUSH
2471: LD_INT 0
2473: PPUSH
2474: LD_INT 0
2476: PPUSH
2477: LD_INT 0
2479: PPUSH
2480: LD_INT 14
2482: PPUSH
2483: LD_INT 0
2485: PPUSH
2486: CALL 54118 0 9
// side := 3 ;
2490: LD_ADDR_VAR 0 5
2494: PUSH
2495: LD_INT 3
2497: ST_TO_ADDR
// SetTech ( tech_targTeleport , side , state_researched ) ;
2498: LD_INT 38
2500: PPUSH
2501: LD_VAR 0 5
2505: PPUSH
2506: LD_INT 2
2508: PPUSH
2509: CALL_OW 322
// SetTech ( tech_gun , side , state_researched ) ;
2513: LD_INT 39
2515: PPUSH
2516: LD_VAR 0 5
2520: PPUSH
2521: LD_INT 2
2523: PPUSH
2524: CALL_OW 322
// SetTech ( tech_advMet , side , state_researched ) ;
2528: LD_INT 34
2530: PPUSH
2531: LD_VAR 0 5
2535: PPUSH
2536: LD_INT 2
2538: PPUSH
2539: CALL_OW 322
// tmp := [ [ 0 , 208 , 163 , 4 , 0 , 0 ] , [ 3 , 194 , 161 , 1 , 0 , 0 ] , [ 17 , 190 , 161 , 1 , 0 , 0 ] , [ 5 , 200 , 145 , 3 , 0 , 0 ] , [ 32 , 192 , 144 , 3 , 0 , 0 ] , [ 26 , 216 , 172 , 3 , 0 , 0 ] , [ 26 , 218 , 176 , 3 , 0 , 0 ] , [ 29 , 182 , 149 , 3 , 0 , 0 ] , [ 8 , 201 , 171 , 0 , 10 , 11 ] , [ 32 , 188 , 167 , 0 , 0 , 0 ] , [ 32 , 202 , 179 , 0 , 0 , 0 ] , [ 32 , 209 , 182 , 0 , 0 , 0 ] , [ 32 , 220 , 183 , 5 , 0 , 0 ] , [ 32 , 225 , 181 , 5 , 0 , 0 ] , [ 26 , 220 , 174 , 5 , 0 , 0 ] , [ 1 , 84 , 128 , 4 , 0 , 0 ] , [ 3 , 68 , 121 , 1 , 0 , 0 ] , [ 19 , 72 , 125 , 5 , 0 , 0 ] , [ 18 , 68 , 124 , 0 , 0 , 0 ] , [ 24 , 64 , 121 , 1 , 0 , 0 ] , [ 17 , 65 , 118 , 2 , 0 , 0 ] , [ 21 , 68 , 117 , 3 , 0 , 0 ] , [ 8 , 68 , 130 , 1 , 14 , 10 ] , [ 8 , 67 , 110 , 2 , 11 , 12 ] , [ 28 , 85 , 108 , 2 , 0 , 0 ] , [ 28 , 85 , 124 , 2 , 0 , 0 ] , [ 30 , 97 , 119 , 2 , 0 , 0 ] , [ 5 , 111 , 138 , 4 , 0 , 0 ] , [ 33 , 104 , 130 , 3 , 0 , 0 ] , [ 33 , 110 , 142 , 5 , 0 , 0 ] , [ 33 , 91 , 131 , 5 , 0 , 0 ] , [ 33 , 107 , 157 , 5 , 0 , 0 ] , [ 33 , 104 , 160 , 5 , 0 , 0 ] , [ 33 , 101 , 162 , 5 , 0 , 0 ] , [ 32 , 87 , 157 , 5 , 0 , 0 ] , [ 32 , 105 , 158 , 5 , 0 , 0 ] , [ 33 , 91 , 118 , 4 , 0 , 0 ] , [ 33 , 89 , 107 , 4 , 0 , 0 ] , [ 5 , 86 , 96 , 3 , 0 , 0 ] , [ 33 , 91 , 102 , 4 , 0 , 0 ] , [ 32 , 80 , 95 , 3 , 0 , 0 ] , [ 28 , 77 , 105 , 3 , 0 , 0 ] , [ 28 , 85 , 113 , 3 , 0 , 0 ] , [ 28 , 55 , 97 , 3 , 0 , 0 ] , [ 28 , 88 , 128 , 3 , 0 , 0 ] , [ 32 , 69 , 101 , 2 , 0 , 0 ] , [ 1 , 34 , 23 , 4 , 0 , 0 ] , [ 8 , 25 , 4 , 3 , 11 , 10 ] , [ 8 , 15 , 4 , 2 , 14 , 12 ] , [ 29 , 55 , 35 , 2 , 0 , 0 ] , [ 29 , 24 , 44 , 2 , 0 , 0 ] , [ 34 , 34 , 32 , 4 , 0 , 0 ] , [ 3 , 14 , 16 , 1 , 0 , 0 ] , [ 24 , 10 , 16 , 1 , 0 , 0 ] , [ 21 , 11 , 13 , 2 , 0 , 0 ] , [ 18 , 14 , 12 , 3 , 0 , 0 ] , [ 16 , 14 , 19 , 0 , 0 , 0 ] , [ 17 , 18 , 20 , 5 , 0 , 0 ] , [ 28 , 10 , 5 , 1 , 0 , 0 ] , [ 28 , 8 , 8 , 1 , 0 , 0 ] , [ 26 , 19 , 2 , 1 , 0 , 0 ] , [ 26 , 30 , 2 , 1 , 0 , 0 ] , [ 5 , 59 , 20 , 4 , 0 , 0 ] , [ 32 , 60 , 24 , 4 , 0 , 0 ] , [ 32 , 61 , 45 , 5 , 0 , 0 ] , [ 32 , 52 , 51 , 5 , 0 , 0 ] , [ 33 , 56 , 51 , 5 , 0 , 0 ] , [ 33 , 62 , 49 , 5 , 0 , 0 ] , [ 33 , 41 , 47 , 5 , 0 , 0 ] , [ 33 , 33 , 52 , 5 , 0 , 0 ] , [ 5 , 31 , 40 , 0 , 0 , 0 ] , [ 33 , 65 , 37 , 5 , 0 , 0 ] , [ 33 , 63 , 29 , 4 , 0 , 0 ] , [ 33 , 54 , 11 , 4 , 0 , 0 ] , [ 33 , 56 , 15 , 4 , 0 , 0 ] , [ 33 , 51 , 6 , 4 , 0 , 0 ] , [ 26 , 39 , 25 , 0 , 0 , 0 ] , [ 26 , 37 , 21 , 0 , 0 , 0 ] , [ 32 , 35 , 17 , 4 , 0 , 0 ] , [ 33 , 35 , 28 , 4 , 0 , 0 ] , [ 33 , 28 , 46 , 5 , 0 , 0 ] , [ 33 , 31 , 6 , 4 , 0 , 0 ] , [ 26 , 54 , 38 , 4 , 0 , 0 ] , [ 33 , 207 , 167 , 3 , 0 , 0 ] , [ 30 , 43 , 2 , 4 , 0 , 0 ] ] ;
2543: LD_ADDR_VAR 0 4
2547: PUSH
2548: LD_INT 0
2550: PUSH
2551: LD_INT 208
2553: PUSH
2554: LD_INT 163
2556: PUSH
2557: LD_INT 4
2559: PUSH
2560: LD_INT 0
2562: PUSH
2563: LD_INT 0
2565: PUSH
2566: EMPTY
2567: LIST
2568: LIST
2569: LIST
2570: LIST
2571: LIST
2572: LIST
2573: PUSH
2574: LD_INT 3
2576: PUSH
2577: LD_INT 194
2579: PUSH
2580: LD_INT 161
2582: PUSH
2583: LD_INT 1
2585: PUSH
2586: LD_INT 0
2588: PUSH
2589: LD_INT 0
2591: PUSH
2592: EMPTY
2593: LIST
2594: LIST
2595: LIST
2596: LIST
2597: LIST
2598: LIST
2599: PUSH
2600: LD_INT 17
2602: PUSH
2603: LD_INT 190
2605: PUSH
2606: LD_INT 161
2608: PUSH
2609: LD_INT 1
2611: PUSH
2612: LD_INT 0
2614: PUSH
2615: LD_INT 0
2617: PUSH
2618: EMPTY
2619: LIST
2620: LIST
2621: LIST
2622: LIST
2623: LIST
2624: LIST
2625: PUSH
2626: LD_INT 5
2628: PUSH
2629: LD_INT 200
2631: PUSH
2632: LD_INT 145
2634: PUSH
2635: LD_INT 3
2637: PUSH
2638: LD_INT 0
2640: PUSH
2641: LD_INT 0
2643: PUSH
2644: EMPTY
2645: LIST
2646: LIST
2647: LIST
2648: LIST
2649: LIST
2650: LIST
2651: PUSH
2652: LD_INT 32
2654: PUSH
2655: LD_INT 192
2657: PUSH
2658: LD_INT 144
2660: PUSH
2661: LD_INT 3
2663: PUSH
2664: LD_INT 0
2666: PUSH
2667: LD_INT 0
2669: PUSH
2670: EMPTY
2671: LIST
2672: LIST
2673: LIST
2674: LIST
2675: LIST
2676: LIST
2677: PUSH
2678: LD_INT 26
2680: PUSH
2681: LD_INT 216
2683: PUSH
2684: LD_INT 172
2686: PUSH
2687: LD_INT 3
2689: PUSH
2690: LD_INT 0
2692: PUSH
2693: LD_INT 0
2695: PUSH
2696: EMPTY
2697: LIST
2698: LIST
2699: LIST
2700: LIST
2701: LIST
2702: LIST
2703: PUSH
2704: LD_INT 26
2706: PUSH
2707: LD_INT 218
2709: PUSH
2710: LD_INT 176
2712: PUSH
2713: LD_INT 3
2715: PUSH
2716: LD_INT 0
2718: PUSH
2719: LD_INT 0
2721: PUSH
2722: EMPTY
2723: LIST
2724: LIST
2725: LIST
2726: LIST
2727: LIST
2728: LIST
2729: PUSH
2730: LD_INT 29
2732: PUSH
2733: LD_INT 182
2735: PUSH
2736: LD_INT 149
2738: PUSH
2739: LD_INT 3
2741: PUSH
2742: LD_INT 0
2744: PUSH
2745: LD_INT 0
2747: PUSH
2748: EMPTY
2749: LIST
2750: LIST
2751: LIST
2752: LIST
2753: LIST
2754: LIST
2755: PUSH
2756: LD_INT 8
2758: PUSH
2759: LD_INT 201
2761: PUSH
2762: LD_INT 171
2764: PUSH
2765: LD_INT 0
2767: PUSH
2768: LD_INT 10
2770: PUSH
2771: LD_INT 11
2773: PUSH
2774: EMPTY
2775: LIST
2776: LIST
2777: LIST
2778: LIST
2779: LIST
2780: LIST
2781: PUSH
2782: LD_INT 32
2784: PUSH
2785: LD_INT 188
2787: PUSH
2788: LD_INT 167
2790: PUSH
2791: LD_INT 0
2793: PUSH
2794: LD_INT 0
2796: PUSH
2797: LD_INT 0
2799: PUSH
2800: EMPTY
2801: LIST
2802: LIST
2803: LIST
2804: LIST
2805: LIST
2806: LIST
2807: PUSH
2808: LD_INT 32
2810: PUSH
2811: LD_INT 202
2813: PUSH
2814: LD_INT 179
2816: PUSH
2817: LD_INT 0
2819: PUSH
2820: LD_INT 0
2822: PUSH
2823: LD_INT 0
2825: PUSH
2826: EMPTY
2827: LIST
2828: LIST
2829: LIST
2830: LIST
2831: LIST
2832: LIST
2833: PUSH
2834: LD_INT 32
2836: PUSH
2837: LD_INT 209
2839: PUSH
2840: LD_INT 182
2842: PUSH
2843: LD_INT 0
2845: PUSH
2846: LD_INT 0
2848: PUSH
2849: LD_INT 0
2851: PUSH
2852: EMPTY
2853: LIST
2854: LIST
2855: LIST
2856: LIST
2857: LIST
2858: LIST
2859: PUSH
2860: LD_INT 32
2862: PUSH
2863: LD_INT 220
2865: PUSH
2866: LD_INT 183
2868: PUSH
2869: LD_INT 5
2871: PUSH
2872: LD_INT 0
2874: PUSH
2875: LD_INT 0
2877: PUSH
2878: EMPTY
2879: LIST
2880: LIST
2881: LIST
2882: LIST
2883: LIST
2884: LIST
2885: PUSH
2886: LD_INT 32
2888: PUSH
2889: LD_INT 225
2891: PUSH
2892: LD_INT 181
2894: PUSH
2895: LD_INT 5
2897: PUSH
2898: LD_INT 0
2900: PUSH
2901: LD_INT 0
2903: PUSH
2904: EMPTY
2905: LIST
2906: LIST
2907: LIST
2908: LIST
2909: LIST
2910: LIST
2911: PUSH
2912: LD_INT 26
2914: PUSH
2915: LD_INT 220
2917: PUSH
2918: LD_INT 174
2920: PUSH
2921: LD_INT 5
2923: PUSH
2924: LD_INT 0
2926: PUSH
2927: LD_INT 0
2929: PUSH
2930: EMPTY
2931: LIST
2932: LIST
2933: LIST
2934: LIST
2935: LIST
2936: LIST
2937: PUSH
2938: LD_INT 1
2940: PUSH
2941: LD_INT 84
2943: PUSH
2944: LD_INT 128
2946: PUSH
2947: LD_INT 4
2949: PUSH
2950: LD_INT 0
2952: PUSH
2953: LD_INT 0
2955: PUSH
2956: EMPTY
2957: LIST
2958: LIST
2959: LIST
2960: LIST
2961: LIST
2962: LIST
2963: PUSH
2964: LD_INT 3
2966: PUSH
2967: LD_INT 68
2969: PUSH
2970: LD_INT 121
2972: PUSH
2973: LD_INT 1
2975: PUSH
2976: LD_INT 0
2978: PUSH
2979: LD_INT 0
2981: PUSH
2982: EMPTY
2983: LIST
2984: LIST
2985: LIST
2986: LIST
2987: LIST
2988: LIST
2989: PUSH
2990: LD_INT 19
2992: PUSH
2993: LD_INT 72
2995: PUSH
2996: LD_INT 125
2998: PUSH
2999: LD_INT 5
3001: PUSH
3002: LD_INT 0
3004: PUSH
3005: LD_INT 0
3007: PUSH
3008: EMPTY
3009: LIST
3010: LIST
3011: LIST
3012: LIST
3013: LIST
3014: LIST
3015: PUSH
3016: LD_INT 18
3018: PUSH
3019: LD_INT 68
3021: PUSH
3022: LD_INT 124
3024: PUSH
3025: LD_INT 0
3027: PUSH
3028: LD_INT 0
3030: PUSH
3031: LD_INT 0
3033: PUSH
3034: EMPTY
3035: LIST
3036: LIST
3037: LIST
3038: LIST
3039: LIST
3040: LIST
3041: PUSH
3042: LD_INT 24
3044: PUSH
3045: LD_INT 64
3047: PUSH
3048: LD_INT 121
3050: PUSH
3051: LD_INT 1
3053: PUSH
3054: LD_INT 0
3056: PUSH
3057: LD_INT 0
3059: PUSH
3060: EMPTY
3061: LIST
3062: LIST
3063: LIST
3064: LIST
3065: LIST
3066: LIST
3067: PUSH
3068: LD_INT 17
3070: PUSH
3071: LD_INT 65
3073: PUSH
3074: LD_INT 118
3076: PUSH
3077: LD_INT 2
3079: PUSH
3080: LD_INT 0
3082: PUSH
3083: LD_INT 0
3085: PUSH
3086: EMPTY
3087: LIST
3088: LIST
3089: LIST
3090: LIST
3091: LIST
3092: LIST
3093: PUSH
3094: LD_INT 21
3096: PUSH
3097: LD_INT 68
3099: PUSH
3100: LD_INT 117
3102: PUSH
3103: LD_INT 3
3105: PUSH
3106: LD_INT 0
3108: PUSH
3109: LD_INT 0
3111: PUSH
3112: EMPTY
3113: LIST
3114: LIST
3115: LIST
3116: LIST
3117: LIST
3118: LIST
3119: PUSH
3120: LD_INT 8
3122: PUSH
3123: LD_INT 68
3125: PUSH
3126: LD_INT 130
3128: PUSH
3129: LD_INT 1
3131: PUSH
3132: LD_INT 14
3134: PUSH
3135: LD_INT 10
3137: PUSH
3138: EMPTY
3139: LIST
3140: LIST
3141: LIST
3142: LIST
3143: LIST
3144: LIST
3145: PUSH
3146: LD_INT 8
3148: PUSH
3149: LD_INT 67
3151: PUSH
3152: LD_INT 110
3154: PUSH
3155: LD_INT 2
3157: PUSH
3158: LD_INT 11
3160: PUSH
3161: LD_INT 12
3163: PUSH
3164: EMPTY
3165: LIST
3166: LIST
3167: LIST
3168: LIST
3169: LIST
3170: LIST
3171: PUSH
3172: LD_INT 28
3174: PUSH
3175: LD_INT 85
3177: PUSH
3178: LD_INT 108
3180: PUSH
3181: LD_INT 2
3183: PUSH
3184: LD_INT 0
3186: PUSH
3187: LD_INT 0
3189: PUSH
3190: EMPTY
3191: LIST
3192: LIST
3193: LIST
3194: LIST
3195: LIST
3196: LIST
3197: PUSH
3198: LD_INT 28
3200: PUSH
3201: LD_INT 85
3203: PUSH
3204: LD_INT 124
3206: PUSH
3207: LD_INT 2
3209: PUSH
3210: LD_INT 0
3212: PUSH
3213: LD_INT 0
3215: PUSH
3216: EMPTY
3217: LIST
3218: LIST
3219: LIST
3220: LIST
3221: LIST
3222: LIST
3223: PUSH
3224: LD_INT 30
3226: PUSH
3227: LD_INT 97
3229: PUSH
3230: LD_INT 119
3232: PUSH
3233: LD_INT 2
3235: PUSH
3236: LD_INT 0
3238: PUSH
3239: LD_INT 0
3241: PUSH
3242: EMPTY
3243: LIST
3244: LIST
3245: LIST
3246: LIST
3247: LIST
3248: LIST
3249: PUSH
3250: LD_INT 5
3252: PUSH
3253: LD_INT 111
3255: PUSH
3256: LD_INT 138
3258: PUSH
3259: LD_INT 4
3261: PUSH
3262: LD_INT 0
3264: PUSH
3265: LD_INT 0
3267: PUSH
3268: EMPTY
3269: LIST
3270: LIST
3271: LIST
3272: LIST
3273: LIST
3274: LIST
3275: PUSH
3276: LD_INT 33
3278: PUSH
3279: LD_INT 104
3281: PUSH
3282: LD_INT 130
3284: PUSH
3285: LD_INT 3
3287: PUSH
3288: LD_INT 0
3290: PUSH
3291: LD_INT 0
3293: PUSH
3294: EMPTY
3295: LIST
3296: LIST
3297: LIST
3298: LIST
3299: LIST
3300: LIST
3301: PUSH
3302: LD_INT 33
3304: PUSH
3305: LD_INT 110
3307: PUSH
3308: LD_INT 142
3310: PUSH
3311: LD_INT 5
3313: PUSH
3314: LD_INT 0
3316: PUSH
3317: LD_INT 0
3319: PUSH
3320: EMPTY
3321: LIST
3322: LIST
3323: LIST
3324: LIST
3325: LIST
3326: LIST
3327: PUSH
3328: LD_INT 33
3330: PUSH
3331: LD_INT 91
3333: PUSH
3334: LD_INT 131
3336: PUSH
3337: LD_INT 5
3339: PUSH
3340: LD_INT 0
3342: PUSH
3343: LD_INT 0
3345: PUSH
3346: EMPTY
3347: LIST
3348: LIST
3349: LIST
3350: LIST
3351: LIST
3352: LIST
3353: PUSH
3354: LD_INT 33
3356: PUSH
3357: LD_INT 107
3359: PUSH
3360: LD_INT 157
3362: PUSH
3363: LD_INT 5
3365: PUSH
3366: LD_INT 0
3368: PUSH
3369: LD_INT 0
3371: PUSH
3372: EMPTY
3373: LIST
3374: LIST
3375: LIST
3376: LIST
3377: LIST
3378: LIST
3379: PUSH
3380: LD_INT 33
3382: PUSH
3383: LD_INT 104
3385: PUSH
3386: LD_INT 160
3388: PUSH
3389: LD_INT 5
3391: PUSH
3392: LD_INT 0
3394: PUSH
3395: LD_INT 0
3397: PUSH
3398: EMPTY
3399: LIST
3400: LIST
3401: LIST
3402: LIST
3403: LIST
3404: LIST
3405: PUSH
3406: LD_INT 33
3408: PUSH
3409: LD_INT 101
3411: PUSH
3412: LD_INT 162
3414: PUSH
3415: LD_INT 5
3417: PUSH
3418: LD_INT 0
3420: PUSH
3421: LD_INT 0
3423: PUSH
3424: EMPTY
3425: LIST
3426: LIST
3427: LIST
3428: LIST
3429: LIST
3430: LIST
3431: PUSH
3432: LD_INT 32
3434: PUSH
3435: LD_INT 87
3437: PUSH
3438: LD_INT 157
3440: PUSH
3441: LD_INT 5
3443: PUSH
3444: LD_INT 0
3446: PUSH
3447: LD_INT 0
3449: PUSH
3450: EMPTY
3451: LIST
3452: LIST
3453: LIST
3454: LIST
3455: LIST
3456: LIST
3457: PUSH
3458: LD_INT 32
3460: PUSH
3461: LD_INT 105
3463: PUSH
3464: LD_INT 158
3466: PUSH
3467: LD_INT 5
3469: PUSH
3470: LD_INT 0
3472: PUSH
3473: LD_INT 0
3475: PUSH
3476: EMPTY
3477: LIST
3478: LIST
3479: LIST
3480: LIST
3481: LIST
3482: LIST
3483: PUSH
3484: LD_INT 33
3486: PUSH
3487: LD_INT 91
3489: PUSH
3490: LD_INT 118
3492: PUSH
3493: LD_INT 4
3495: PUSH
3496: LD_INT 0
3498: PUSH
3499: LD_INT 0
3501: PUSH
3502: EMPTY
3503: LIST
3504: LIST
3505: LIST
3506: LIST
3507: LIST
3508: LIST
3509: PUSH
3510: LD_INT 33
3512: PUSH
3513: LD_INT 89
3515: PUSH
3516: LD_INT 107
3518: PUSH
3519: LD_INT 4
3521: PUSH
3522: LD_INT 0
3524: PUSH
3525: LD_INT 0
3527: PUSH
3528: EMPTY
3529: LIST
3530: LIST
3531: LIST
3532: LIST
3533: LIST
3534: LIST
3535: PUSH
3536: LD_INT 5
3538: PUSH
3539: LD_INT 86
3541: PUSH
3542: LD_INT 96
3544: PUSH
3545: LD_INT 3
3547: PUSH
3548: LD_INT 0
3550: PUSH
3551: LD_INT 0
3553: PUSH
3554: EMPTY
3555: LIST
3556: LIST
3557: LIST
3558: LIST
3559: LIST
3560: LIST
3561: PUSH
3562: LD_INT 33
3564: PUSH
3565: LD_INT 91
3567: PUSH
3568: LD_INT 102
3570: PUSH
3571: LD_INT 4
3573: PUSH
3574: LD_INT 0
3576: PUSH
3577: LD_INT 0
3579: PUSH
3580: EMPTY
3581: LIST
3582: LIST
3583: LIST
3584: LIST
3585: LIST
3586: LIST
3587: PUSH
3588: LD_INT 32
3590: PUSH
3591: LD_INT 80
3593: PUSH
3594: LD_INT 95
3596: PUSH
3597: LD_INT 3
3599: PUSH
3600: LD_INT 0
3602: PUSH
3603: LD_INT 0
3605: PUSH
3606: EMPTY
3607: LIST
3608: LIST
3609: LIST
3610: LIST
3611: LIST
3612: LIST
3613: PUSH
3614: LD_INT 28
3616: PUSH
3617: LD_INT 77
3619: PUSH
3620: LD_INT 105
3622: PUSH
3623: LD_INT 3
3625: PUSH
3626: LD_INT 0
3628: PUSH
3629: LD_INT 0
3631: PUSH
3632: EMPTY
3633: LIST
3634: LIST
3635: LIST
3636: LIST
3637: LIST
3638: LIST
3639: PUSH
3640: LD_INT 28
3642: PUSH
3643: LD_INT 85
3645: PUSH
3646: LD_INT 113
3648: PUSH
3649: LD_INT 3
3651: PUSH
3652: LD_INT 0
3654: PUSH
3655: LD_INT 0
3657: PUSH
3658: EMPTY
3659: LIST
3660: LIST
3661: LIST
3662: LIST
3663: LIST
3664: LIST
3665: PUSH
3666: LD_INT 28
3668: PUSH
3669: LD_INT 55
3671: PUSH
3672: LD_INT 97
3674: PUSH
3675: LD_INT 3
3677: PUSH
3678: LD_INT 0
3680: PUSH
3681: LD_INT 0
3683: PUSH
3684: EMPTY
3685: LIST
3686: LIST
3687: LIST
3688: LIST
3689: LIST
3690: LIST
3691: PUSH
3692: LD_INT 28
3694: PUSH
3695: LD_INT 88
3697: PUSH
3698: LD_INT 128
3700: PUSH
3701: LD_INT 3
3703: PUSH
3704: LD_INT 0
3706: PUSH
3707: LD_INT 0
3709: PUSH
3710: EMPTY
3711: LIST
3712: LIST
3713: LIST
3714: LIST
3715: LIST
3716: LIST
3717: PUSH
3718: LD_INT 32
3720: PUSH
3721: LD_INT 69
3723: PUSH
3724: LD_INT 101
3726: PUSH
3727: LD_INT 2
3729: PUSH
3730: LD_INT 0
3732: PUSH
3733: LD_INT 0
3735: PUSH
3736: EMPTY
3737: LIST
3738: LIST
3739: LIST
3740: LIST
3741: LIST
3742: LIST
3743: PUSH
3744: LD_INT 1
3746: PUSH
3747: LD_INT 34
3749: PUSH
3750: LD_INT 23
3752: PUSH
3753: LD_INT 4
3755: PUSH
3756: LD_INT 0
3758: PUSH
3759: LD_INT 0
3761: PUSH
3762: EMPTY
3763: LIST
3764: LIST
3765: LIST
3766: LIST
3767: LIST
3768: LIST
3769: PUSH
3770: LD_INT 8
3772: PUSH
3773: LD_INT 25
3775: PUSH
3776: LD_INT 4
3778: PUSH
3779: LD_INT 3
3781: PUSH
3782: LD_INT 11
3784: PUSH
3785: LD_INT 10
3787: PUSH
3788: EMPTY
3789: LIST
3790: LIST
3791: LIST
3792: LIST
3793: LIST
3794: LIST
3795: PUSH
3796: LD_INT 8
3798: PUSH
3799: LD_INT 15
3801: PUSH
3802: LD_INT 4
3804: PUSH
3805: LD_INT 2
3807: PUSH
3808: LD_INT 14
3810: PUSH
3811: LD_INT 12
3813: PUSH
3814: EMPTY
3815: LIST
3816: LIST
3817: LIST
3818: LIST
3819: LIST
3820: LIST
3821: PUSH
3822: LD_INT 29
3824: PUSH
3825: LD_INT 55
3827: PUSH
3828: LD_INT 35
3830: PUSH
3831: LD_INT 2
3833: PUSH
3834: LD_INT 0
3836: PUSH
3837: LD_INT 0
3839: PUSH
3840: EMPTY
3841: LIST
3842: LIST
3843: LIST
3844: LIST
3845: LIST
3846: LIST
3847: PUSH
3848: LD_INT 29
3850: PUSH
3851: LD_INT 24
3853: PUSH
3854: LD_INT 44
3856: PUSH
3857: LD_INT 2
3859: PUSH
3860: LD_INT 0
3862: PUSH
3863: LD_INT 0
3865: PUSH
3866: EMPTY
3867: LIST
3868: LIST
3869: LIST
3870: LIST
3871: LIST
3872: LIST
3873: PUSH
3874: LD_INT 34
3876: PUSH
3877: LD_INT 34
3879: PUSH
3880: LD_INT 32
3882: PUSH
3883: LD_INT 4
3885: PUSH
3886: LD_INT 0
3888: PUSH
3889: LD_INT 0
3891: PUSH
3892: EMPTY
3893: LIST
3894: LIST
3895: LIST
3896: LIST
3897: LIST
3898: LIST
3899: PUSH
3900: LD_INT 3
3902: PUSH
3903: LD_INT 14
3905: PUSH
3906: LD_INT 16
3908: PUSH
3909: LD_INT 1
3911: PUSH
3912: LD_INT 0
3914: PUSH
3915: LD_INT 0
3917: PUSH
3918: EMPTY
3919: LIST
3920: LIST
3921: LIST
3922: LIST
3923: LIST
3924: LIST
3925: PUSH
3926: LD_INT 24
3928: PUSH
3929: LD_INT 10
3931: PUSH
3932: LD_INT 16
3934: PUSH
3935: LD_INT 1
3937: PUSH
3938: LD_INT 0
3940: PUSH
3941: LD_INT 0
3943: PUSH
3944: EMPTY
3945: LIST
3946: LIST
3947: LIST
3948: LIST
3949: LIST
3950: LIST
3951: PUSH
3952: LD_INT 21
3954: PUSH
3955: LD_INT 11
3957: PUSH
3958: LD_INT 13
3960: PUSH
3961: LD_INT 2
3963: PUSH
3964: LD_INT 0
3966: PUSH
3967: LD_INT 0
3969: PUSH
3970: EMPTY
3971: LIST
3972: LIST
3973: LIST
3974: LIST
3975: LIST
3976: LIST
3977: PUSH
3978: LD_INT 18
3980: PUSH
3981: LD_INT 14
3983: PUSH
3984: LD_INT 12
3986: PUSH
3987: LD_INT 3
3989: PUSH
3990: LD_INT 0
3992: PUSH
3993: LD_INT 0
3995: PUSH
3996: EMPTY
3997: LIST
3998: LIST
3999: LIST
4000: LIST
4001: LIST
4002: LIST
4003: PUSH
4004: LD_INT 16
4006: PUSH
4007: LD_INT 14
4009: PUSH
4010: LD_INT 19
4012: PUSH
4013: LD_INT 0
4015: PUSH
4016: LD_INT 0
4018: PUSH
4019: LD_INT 0
4021: PUSH
4022: EMPTY
4023: LIST
4024: LIST
4025: LIST
4026: LIST
4027: LIST
4028: LIST
4029: PUSH
4030: LD_INT 17
4032: PUSH
4033: LD_INT 18
4035: PUSH
4036: LD_INT 20
4038: PUSH
4039: LD_INT 5
4041: PUSH
4042: LD_INT 0
4044: PUSH
4045: LD_INT 0
4047: PUSH
4048: EMPTY
4049: LIST
4050: LIST
4051: LIST
4052: LIST
4053: LIST
4054: LIST
4055: PUSH
4056: LD_INT 28
4058: PUSH
4059: LD_INT 10
4061: PUSH
4062: LD_INT 5
4064: PUSH
4065: LD_INT 1
4067: PUSH
4068: LD_INT 0
4070: PUSH
4071: LD_INT 0
4073: PUSH
4074: EMPTY
4075: LIST
4076: LIST
4077: LIST
4078: LIST
4079: LIST
4080: LIST
4081: PUSH
4082: LD_INT 28
4084: PUSH
4085: LD_INT 8
4087: PUSH
4088: LD_INT 8
4090: PUSH
4091: LD_INT 1
4093: PUSH
4094: LD_INT 0
4096: PUSH
4097: LD_INT 0
4099: PUSH
4100: EMPTY
4101: LIST
4102: LIST
4103: LIST
4104: LIST
4105: LIST
4106: LIST
4107: PUSH
4108: LD_INT 26
4110: PUSH
4111: LD_INT 19
4113: PUSH
4114: LD_INT 2
4116: PUSH
4117: LD_INT 1
4119: PUSH
4120: LD_INT 0
4122: PUSH
4123: LD_INT 0
4125: PUSH
4126: EMPTY
4127: LIST
4128: LIST
4129: LIST
4130: LIST
4131: LIST
4132: LIST
4133: PUSH
4134: LD_INT 26
4136: PUSH
4137: LD_INT 30
4139: PUSH
4140: LD_INT 2
4142: PUSH
4143: LD_INT 1
4145: PUSH
4146: LD_INT 0
4148: PUSH
4149: LD_INT 0
4151: PUSH
4152: EMPTY
4153: LIST
4154: LIST
4155: LIST
4156: LIST
4157: LIST
4158: LIST
4159: PUSH
4160: LD_INT 5
4162: PUSH
4163: LD_INT 59
4165: PUSH
4166: LD_INT 20
4168: PUSH
4169: LD_INT 4
4171: PUSH
4172: LD_INT 0
4174: PUSH
4175: LD_INT 0
4177: PUSH
4178: EMPTY
4179: LIST
4180: LIST
4181: LIST
4182: LIST
4183: LIST
4184: LIST
4185: PUSH
4186: LD_INT 32
4188: PUSH
4189: LD_INT 60
4191: PUSH
4192: LD_INT 24
4194: PUSH
4195: LD_INT 4
4197: PUSH
4198: LD_INT 0
4200: PUSH
4201: LD_INT 0
4203: PUSH
4204: EMPTY
4205: LIST
4206: LIST
4207: LIST
4208: LIST
4209: LIST
4210: LIST
4211: PUSH
4212: LD_INT 32
4214: PUSH
4215: LD_INT 61
4217: PUSH
4218: LD_INT 45
4220: PUSH
4221: LD_INT 5
4223: PUSH
4224: LD_INT 0
4226: PUSH
4227: LD_INT 0
4229: PUSH
4230: EMPTY
4231: LIST
4232: LIST
4233: LIST
4234: LIST
4235: LIST
4236: LIST
4237: PUSH
4238: LD_INT 32
4240: PUSH
4241: LD_INT 52
4243: PUSH
4244: LD_INT 51
4246: PUSH
4247: LD_INT 5
4249: PUSH
4250: LD_INT 0
4252: PUSH
4253: LD_INT 0
4255: PUSH
4256: EMPTY
4257: LIST
4258: LIST
4259: LIST
4260: LIST
4261: LIST
4262: LIST
4263: PUSH
4264: LD_INT 33
4266: PUSH
4267: LD_INT 56
4269: PUSH
4270: LD_INT 51
4272: PUSH
4273: LD_INT 5
4275: PUSH
4276: LD_INT 0
4278: PUSH
4279: LD_INT 0
4281: PUSH
4282: EMPTY
4283: LIST
4284: LIST
4285: LIST
4286: LIST
4287: LIST
4288: LIST
4289: PUSH
4290: LD_INT 33
4292: PUSH
4293: LD_INT 62
4295: PUSH
4296: LD_INT 49
4298: PUSH
4299: LD_INT 5
4301: PUSH
4302: LD_INT 0
4304: PUSH
4305: LD_INT 0
4307: PUSH
4308: EMPTY
4309: LIST
4310: LIST
4311: LIST
4312: LIST
4313: LIST
4314: LIST
4315: PUSH
4316: LD_INT 33
4318: PUSH
4319: LD_INT 41
4321: PUSH
4322: LD_INT 47
4324: PUSH
4325: LD_INT 5
4327: PUSH
4328: LD_INT 0
4330: PUSH
4331: LD_INT 0
4333: PUSH
4334: EMPTY
4335: LIST
4336: LIST
4337: LIST
4338: LIST
4339: LIST
4340: LIST
4341: PUSH
4342: LD_INT 33
4344: PUSH
4345: LD_INT 33
4347: PUSH
4348: LD_INT 52
4350: PUSH
4351: LD_INT 5
4353: PUSH
4354: LD_INT 0
4356: PUSH
4357: LD_INT 0
4359: PUSH
4360: EMPTY
4361: LIST
4362: LIST
4363: LIST
4364: LIST
4365: LIST
4366: LIST
4367: PUSH
4368: LD_INT 5
4370: PUSH
4371: LD_INT 31
4373: PUSH
4374: LD_INT 40
4376: PUSH
4377: LD_INT 0
4379: PUSH
4380: LD_INT 0
4382: PUSH
4383: LD_INT 0
4385: PUSH
4386: EMPTY
4387: LIST
4388: LIST
4389: LIST
4390: LIST
4391: LIST
4392: LIST
4393: PUSH
4394: LD_INT 33
4396: PUSH
4397: LD_INT 65
4399: PUSH
4400: LD_INT 37
4402: PUSH
4403: LD_INT 5
4405: PUSH
4406: LD_INT 0
4408: PUSH
4409: LD_INT 0
4411: PUSH
4412: EMPTY
4413: LIST
4414: LIST
4415: LIST
4416: LIST
4417: LIST
4418: LIST
4419: PUSH
4420: LD_INT 33
4422: PUSH
4423: LD_INT 63
4425: PUSH
4426: LD_INT 29
4428: PUSH
4429: LD_INT 4
4431: PUSH
4432: LD_INT 0
4434: PUSH
4435: LD_INT 0
4437: PUSH
4438: EMPTY
4439: LIST
4440: LIST
4441: LIST
4442: LIST
4443: LIST
4444: LIST
4445: PUSH
4446: LD_INT 33
4448: PUSH
4449: LD_INT 54
4451: PUSH
4452: LD_INT 11
4454: PUSH
4455: LD_INT 4
4457: PUSH
4458: LD_INT 0
4460: PUSH
4461: LD_INT 0
4463: PUSH
4464: EMPTY
4465: LIST
4466: LIST
4467: LIST
4468: LIST
4469: LIST
4470: LIST
4471: PUSH
4472: LD_INT 33
4474: PUSH
4475: LD_INT 56
4477: PUSH
4478: LD_INT 15
4480: PUSH
4481: LD_INT 4
4483: PUSH
4484: LD_INT 0
4486: PUSH
4487: LD_INT 0
4489: PUSH
4490: EMPTY
4491: LIST
4492: LIST
4493: LIST
4494: LIST
4495: LIST
4496: LIST
4497: PUSH
4498: LD_INT 33
4500: PUSH
4501: LD_INT 51
4503: PUSH
4504: LD_INT 6
4506: PUSH
4507: LD_INT 4
4509: PUSH
4510: LD_INT 0
4512: PUSH
4513: LD_INT 0
4515: PUSH
4516: EMPTY
4517: LIST
4518: LIST
4519: LIST
4520: LIST
4521: LIST
4522: LIST
4523: PUSH
4524: LD_INT 26
4526: PUSH
4527: LD_INT 39
4529: PUSH
4530: LD_INT 25
4532: PUSH
4533: LD_INT 0
4535: PUSH
4536: LD_INT 0
4538: PUSH
4539: LD_INT 0
4541: PUSH
4542: EMPTY
4543: LIST
4544: LIST
4545: LIST
4546: LIST
4547: LIST
4548: LIST
4549: PUSH
4550: LD_INT 26
4552: PUSH
4553: LD_INT 37
4555: PUSH
4556: LD_INT 21
4558: PUSH
4559: LD_INT 0
4561: PUSH
4562: LD_INT 0
4564: PUSH
4565: LD_INT 0
4567: PUSH
4568: EMPTY
4569: LIST
4570: LIST
4571: LIST
4572: LIST
4573: LIST
4574: LIST
4575: PUSH
4576: LD_INT 32
4578: PUSH
4579: LD_INT 35
4581: PUSH
4582: LD_INT 17
4584: PUSH
4585: LD_INT 4
4587: PUSH
4588: LD_INT 0
4590: PUSH
4591: LD_INT 0
4593: PUSH
4594: EMPTY
4595: LIST
4596: LIST
4597: LIST
4598: LIST
4599: LIST
4600: LIST
4601: PUSH
4602: LD_INT 33
4604: PUSH
4605: LD_INT 35
4607: PUSH
4608: LD_INT 28
4610: PUSH
4611: LD_INT 4
4613: PUSH
4614: LD_INT 0
4616: PUSH
4617: LD_INT 0
4619: PUSH
4620: EMPTY
4621: LIST
4622: LIST
4623: LIST
4624: LIST
4625: LIST
4626: LIST
4627: PUSH
4628: LD_INT 33
4630: PUSH
4631: LD_INT 28
4633: PUSH
4634: LD_INT 46
4636: PUSH
4637: LD_INT 5
4639: PUSH
4640: LD_INT 0
4642: PUSH
4643: LD_INT 0
4645: PUSH
4646: EMPTY
4647: LIST
4648: LIST
4649: LIST
4650: LIST
4651: LIST
4652: LIST
4653: PUSH
4654: LD_INT 33
4656: PUSH
4657: LD_INT 31
4659: PUSH
4660: LD_INT 6
4662: PUSH
4663: LD_INT 4
4665: PUSH
4666: LD_INT 0
4668: PUSH
4669: LD_INT 0
4671: PUSH
4672: EMPTY
4673: LIST
4674: LIST
4675: LIST
4676: LIST
4677: LIST
4678: LIST
4679: PUSH
4680: LD_INT 26
4682: PUSH
4683: LD_INT 54
4685: PUSH
4686: LD_INT 38
4688: PUSH
4689: LD_INT 4
4691: PUSH
4692: LD_INT 0
4694: PUSH
4695: LD_INT 0
4697: PUSH
4698: EMPTY
4699: LIST
4700: LIST
4701: LIST
4702: LIST
4703: LIST
4704: LIST
4705: PUSH
4706: LD_INT 33
4708: PUSH
4709: LD_INT 207
4711: PUSH
4712: LD_INT 167
4714: PUSH
4715: LD_INT 3
4717: PUSH
4718: LD_INT 0
4720: PUSH
4721: LD_INT 0
4723: PUSH
4724: EMPTY
4725: LIST
4726: LIST
4727: LIST
4728: LIST
4729: LIST
4730: LIST
4731: PUSH
4732: LD_INT 30
4734: PUSH
4735: LD_INT 43
4737: PUSH
4738: LD_INT 2
4740: PUSH
4741: LD_INT 4
4743: PUSH
4744: LD_INT 0
4746: PUSH
4747: LD_INT 0
4749: PUSH
4750: EMPTY
4751: LIST
4752: LIST
4753: LIST
4754: LIST
4755: LIST
4756: LIST
4757: PUSH
4758: EMPTY
4759: LIST
4760: LIST
4761: LIST
4762: LIST
4763: LIST
4764: LIST
4765: LIST
4766: LIST
4767: LIST
4768: LIST
4769: LIST
4770: LIST
4771: LIST
4772: LIST
4773: LIST
4774: LIST
4775: LIST
4776: LIST
4777: LIST
4778: LIST
4779: LIST
4780: LIST
4781: LIST
4782: LIST
4783: LIST
4784: LIST
4785: LIST
4786: LIST
4787: LIST
4788: LIST
4789: LIST
4790: LIST
4791: LIST
4792: LIST
4793: LIST
4794: LIST
4795: LIST
4796: LIST
4797: LIST
4798: LIST
4799: LIST
4800: LIST
4801: LIST
4802: LIST
4803: LIST
4804: LIST
4805: LIST
4806: LIST
4807: LIST
4808: LIST
4809: LIST
4810: LIST
4811: LIST
4812: LIST
4813: LIST
4814: LIST
4815: LIST
4816: LIST
4817: LIST
4818: LIST
4819: LIST
4820: LIST
4821: LIST
4822: LIST
4823: LIST
4824: LIST
4825: LIST
4826: LIST
4827: LIST
4828: LIST
4829: LIST
4830: LIST
4831: LIST
4832: LIST
4833: LIST
4834: LIST
4835: LIST
4836: LIST
4837: LIST
4838: LIST
4839: LIST
4840: LIST
4841: LIST
4842: LIST
4843: LIST
4844: ST_TO_ADDR
// for i in tmp do
4845: LD_ADDR_VAR 0 2
4849: PUSH
4850: LD_VAR 0 4
4854: PUSH
4855: FOR_IN
4856: IFFALSE 5087
// begin uc_side := side ;
4858: LD_ADDR_OWVAR 20
4862: PUSH
4863: LD_VAR 0 5
4867: ST_TO_ADDR
// uc_nation := nation_russian ;
4868: LD_ADDR_OWVAR 21
4872: PUSH
4873: LD_INT 3
4875: ST_TO_ADDR
// bc_type := i [ 1 ] ;
4876: LD_ADDR_OWVAR 42
4880: PUSH
4881: LD_VAR 0 2
4885: PUSH
4886: LD_INT 1
4888: ARRAY
4889: ST_TO_ADDR
// bc_level := rand ( 5 , 6 ) ;
4890: LD_ADDR_OWVAR 43
4894: PUSH
4895: LD_INT 5
4897: PPUSH
4898: LD_INT 6
4900: PPUSH
4901: CALL_OW 12
4905: ST_TO_ADDR
// bc_kind1 := i [ 5 ] ;
4906: LD_ADDR_OWVAR 44
4910: PUSH
4911: LD_VAR 0 2
4915: PUSH
4916: LD_INT 5
4918: ARRAY
4919: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
4920: LD_ADDR_OWVAR 45
4924: PUSH
4925: LD_VAR 0 2
4929: PUSH
4930: LD_INT 6
4932: ARRAY
4933: ST_TO_ADDR
// sr := 0 ;
4934: LD_ADDR_VAR 0 6
4938: PUSH
4939: LD_INT 0
4941: ST_TO_ADDR
// if i [ 1 ] = b_oil_mine then
4942: LD_VAR 0 2
4946: PUSH
4947: LD_INT 1
4949: ARRAY
4950: PUSH
4951: LD_INT 29
4953: EQUAL
4954: IFFALSE 4966
// sr := mat_oil else
4956: LD_ADDR_VAR 0 6
4960: PUSH
4961: LD_INT 2
4963: ST_TO_ADDR
4964: GO 4988
// if i [ 1 ] = b_siberite_mine then
4966: LD_VAR 0 2
4970: PUSH
4971: LD_INT 1
4973: ARRAY
4974: PUSH
4975: LD_INT 30
4977: EQUAL
4978: IFFALSE 4988
// sr := mat_siberit ;
4980: LD_ADDR_VAR 0 6
4984: PUSH
4985: LD_INT 3
4987: ST_TO_ADDR
// if sr then
4988: LD_VAR 0 6
4992: IFFALSE 5048
// begin CreateDepositXY ( i [ 2 ] , i [ 3 ] , sr ) ;
4994: LD_VAR 0 2
4998: PUSH
4999: LD_INT 2
5001: ARRAY
5002: PPUSH
5003: LD_VAR 0 2
5007: PUSH
5008: LD_INT 3
5010: ARRAY
5011: PPUSH
5012: LD_VAR 0 6
5016: PPUSH
5017: CALL_OW 62
// SetResourceVisibility ( i [ 2 ] , i [ 3 ] , side ) ;
5021: LD_VAR 0 2
5025: PUSH
5026: LD_INT 2
5028: ARRAY
5029: PPUSH
5030: LD_VAR 0 2
5034: PUSH
5035: LD_INT 3
5037: ARRAY
5038: PPUSH
5039: LD_VAR 0 5
5043: PPUSH
5044: CALL_OW 441
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
5048: LD_ADDR_VAR 0 3
5052: PUSH
5053: LD_VAR 0 2
5057: PUSH
5058: LD_INT 2
5060: ARRAY
5061: PPUSH
5062: LD_VAR 0 2
5066: PUSH
5067: LD_INT 3
5069: ARRAY
5070: PPUSH
5071: LD_VAR 0 2
5075: PUSH
5076: LD_INT 4
5078: ARRAY
5079: PPUSH
5080: CALL_OW 47
5084: ST_TO_ADDR
// end ;
5085: GO 4855
5087: POP
5088: POP
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
5089: LD_ADDR_VAR 0 7
5093: PUSH
5094: LD_INT 22
5096: PUSH
5097: LD_VAR 0 5
5101: PUSH
5102: EMPTY
5103: LIST
5104: LIST
5105: PUSH
5106: LD_INT 30
5108: PUSH
5109: LD_INT 1
5111: PUSH
5112: EMPTY
5113: LIST
5114: LIST
5115: PUSH
5116: EMPTY
5117: LIST
5118: LIST
5119: PPUSH
5120: CALL_OW 69
5124: ST_TO_ADDR
// if not depot then
5125: LD_VAR 0 7
5129: NOT
5130: IFFALSE 5134
// exit ;
5132: GO 5478
// base := PrepareBase ( HexInfo ( 84 , 128 ) , rus1Base , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 3000 , 300 , 100 ] , [ 12 , 6 , 6 , 4 ] ) ;
5134: LD_ADDR_VAR 0 8
5138: PUSH
5139: LD_INT 84
5141: PPUSH
5142: LD_INT 128
5144: PPUSH
5145: CALL_OW 428
5149: PPUSH
5150: LD_INT 15
5152: PPUSH
5153: LD_INT 0
5155: PPUSH
5156: LD_INT 6
5158: PUSH
5159: LD_INT 7
5161: PUSH
5162: LD_INT 8
5164: PUSH
5165: EMPTY
5166: LIST
5167: LIST
5168: LIST
5169: PUSH
5170: LD_OWVAR 67
5174: ARRAY
5175: PPUSH
5176: LD_INT 3000
5178: PUSH
5179: LD_INT 300
5181: PUSH
5182: LD_INT 100
5184: PUSH
5185: EMPTY
5186: LIST
5187: LIST
5188: LIST
5189: PPUSH
5190: LD_INT 12
5192: PUSH
5193: LD_INT 6
5195: PUSH
5196: LD_INT 6
5198: PUSH
5199: LD_INT 4
5201: PUSH
5202: EMPTY
5203: LIST
5204: LIST
5205: LIST
5206: LIST
5207: PPUSH
5208: CALL 29713 0 6
5212: ST_TO_ADDR
// if not base then
5213: LD_VAR 0 8
5217: NOT
5218: IFFALSE 5222
// exit ;
5220: GO 5478
// mc_bases := Replace ( mc_bases , mc_rus_1 , base ) ;
5222: LD_ADDR_EXP 36
5226: PUSH
5227: LD_EXP 36
5231: PPUSH
5232: LD_EXP 7
5236: PPUSH
5237: LD_VAR 0 8
5241: PPUSH
5242: CALL_OW 1
5246: ST_TO_ADDR
// base := PrepareBase ( HexInfo ( 34 , 23 ) , rus2Base , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 20000 , 3000 , 1000 ] , [ 12 , 6 , 6 , 4 ] ) ;
5247: LD_ADDR_VAR 0 8
5251: PUSH
5252: LD_INT 34
5254: PPUSH
5255: LD_INT 23
5257: PPUSH
5258: CALL_OW 428
5262: PPUSH
5263: LD_INT 11
5265: PPUSH
5266: LD_INT 0
5268: PPUSH
5269: LD_INT 6
5271: PUSH
5272: LD_INT 7
5274: PUSH
5275: LD_INT 8
5277: PUSH
5278: EMPTY
5279: LIST
5280: LIST
5281: LIST
5282: PUSH
5283: LD_OWVAR 67
5287: ARRAY
5288: PPUSH
5289: LD_INT 20000
5291: PUSH
5292: LD_INT 3000
5294: PUSH
5295: LD_INT 1000
5297: PUSH
5298: EMPTY
5299: LIST
5300: LIST
5301: LIST
5302: PPUSH
5303: LD_INT 12
5305: PUSH
5306: LD_INT 6
5308: PUSH
5309: LD_INT 6
5311: PUSH
5312: LD_INT 4
5314: PUSH
5315: EMPTY
5316: LIST
5317: LIST
5318: LIST
5319: LIST
5320: PPUSH
5321: CALL 29713 0 6
5325: ST_TO_ADDR
// if not base then
5326: LD_VAR 0 8
5330: NOT
5331: IFFALSE 5335
// exit ;
5333: GO 5478
// mc_bases := Replace ( mc_bases , mc_rus_2 , base ) ;
5335: LD_ADDR_EXP 36
5339: PUSH
5340: LD_EXP 36
5344: PPUSH
5345: LD_EXP 8
5349: PPUSH
5350: LD_VAR 0 8
5354: PPUSH
5355: CALL_OW 1
5359: ST_TO_ADDR
// ruOutpost := PrepareBase ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_depot ] ] ) [ 1 ] , ruOutpostArea , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 500 , 100 , 10 ] , [ [ 6 , 7 , 8 ] [ Difficulty ] , 2 , 0 , 1 ] ) ;
5360: LD_ADDR_EXP 14
5364: PUSH
5365: LD_INT 22
5367: PUSH
5368: LD_INT 3
5370: PUSH
5371: EMPTY
5372: LIST
5373: LIST
5374: PUSH
5375: LD_INT 30
5377: PUSH
5378: LD_INT 0
5380: PUSH
5381: EMPTY
5382: LIST
5383: LIST
5384: PUSH
5385: EMPTY
5386: LIST
5387: LIST
5388: PPUSH
5389: CALL_OW 69
5393: PUSH
5394: LD_INT 1
5396: ARRAY
5397: PPUSH
5398: LD_INT 25
5400: PPUSH
5401: LD_INT 0
5403: PPUSH
5404: LD_INT 6
5406: PUSH
5407: LD_INT 7
5409: PUSH
5410: LD_INT 8
5412: PUSH
5413: EMPTY
5414: LIST
5415: LIST
5416: LIST
5417: PUSH
5418: LD_OWVAR 67
5422: ARRAY
5423: PPUSH
5424: LD_INT 500
5426: PUSH
5427: LD_INT 100
5429: PUSH
5430: LD_INT 10
5432: PUSH
5433: EMPTY
5434: LIST
5435: LIST
5436: LIST
5437: PPUSH
5438: LD_INT 6
5440: PUSH
5441: LD_INT 7
5443: PUSH
5444: LD_INT 8
5446: PUSH
5447: EMPTY
5448: LIST
5449: LIST
5450: LIST
5451: PUSH
5452: LD_OWVAR 67
5456: ARRAY
5457: PUSH
5458: LD_INT 2
5460: PUSH
5461: LD_INT 0
5463: PUSH
5464: LD_INT 1
5466: PUSH
5467: EMPTY
5468: LIST
5469: LIST
5470: LIST
5471: LIST
5472: PPUSH
5473: CALL 29713 0 6
5477: ST_TO_ADDR
// end ;
5478: LD_VAR 0 1
5482: RET
// export function PrepareLegion ; var i , b , veh , tmp , tmp2 , cameras , side , sr , depot , base ; begin
5483: LD_INT 0
5485: PPUSH
5486: PPUSH
5487: PPUSH
5488: PPUSH
5489: PPUSH
5490: PPUSH
5491: PPUSH
5492: PPUSH
5493: PPUSH
5494: PPUSH
5495: PPUSH
// PrepareNature ( 0 , 0 , 6 , 0 , 0 , 0 , 0 , legApe , 0 ) ;
5496: LD_INT 0
5498: PPUSH
5499: LD_INT 0
5501: PPUSH
5502: LD_INT 6
5504: PPUSH
5505: LD_INT 0
5507: PPUSH
5508: LD_INT 0
5510: PPUSH
5511: LD_INT 0
5513: PPUSH
5514: LD_INT 0
5516: PPUSH
5517: LD_INT 8
5519: PPUSH
5520: LD_INT 0
5522: PPUSH
5523: CALL 54118 0 9
// side := 8 ;
5527: LD_ADDR_VAR 0 8
5531: PUSH
5532: LD_INT 8
5534: ST_TO_ADDR
// tmp := AreaToList ( minesArea , 0 ) ;
5535: LD_ADDR_VAR 0 5
5539: PUSH
5540: LD_INT 20
5542: PPUSH
5543: LD_INT 0
5545: PPUSH
5546: CALL_OW 517
5550: ST_TO_ADDR
// if Difficulty > 2 then
5551: LD_OWVAR 67
5555: PUSH
5556: LD_INT 2
5558: GREATER
5559: IFFALSE 5703
// begin tmp2 := AreaToList ( minesArea2 , 0 ) ;
5561: LD_ADDR_VAR 0 6
5565: PUSH
5566: LD_INT 27
5568: PPUSH
5569: LD_INT 0
5571: PPUSH
5572: CALL_OW 517
5576: ST_TO_ADDR
// for i = 1 to tmp2 [ 1 ] do
5577: LD_ADDR_VAR 0 2
5581: PUSH
5582: DOUBLE
5583: LD_INT 1
5585: DEC
5586: ST_TO_ADDR
5587: LD_VAR 0 6
5591: PUSH
5592: LD_INT 1
5594: ARRAY
5595: PUSH
5596: FOR_TO
5597: IFFALSE 5701
// begin tmp := ReplaceIn ( tmp , [ 1 , tmp [ 1 ] + 1 ] , tmp2 [ 1 ] [ i ] ) ;
5599: LD_ADDR_VAR 0 5
5603: PUSH
5604: LD_VAR 0 5
5608: PPUSH
5609: LD_INT 1
5611: PUSH
5612: LD_VAR 0 5
5616: PUSH
5617: LD_INT 1
5619: ARRAY
5620: PUSH
5621: LD_INT 1
5623: PLUS
5624: PUSH
5625: EMPTY
5626: LIST
5627: LIST
5628: PPUSH
5629: LD_VAR 0 6
5633: PUSH
5634: LD_INT 1
5636: ARRAY
5637: PUSH
5638: LD_VAR 0 2
5642: ARRAY
5643: PPUSH
5644: CALL 26426 0 3
5648: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 2 , tmp [ 2 ] + 1 ] , tmp2 [ 2 ] [ i ] ) ;
5649: LD_ADDR_VAR 0 5
5653: PUSH
5654: LD_VAR 0 5
5658: PPUSH
5659: LD_INT 2
5661: PUSH
5662: LD_VAR 0 5
5666: PUSH
5667: LD_INT 2
5669: ARRAY
5670: PUSH
5671: LD_INT 1
5673: PLUS
5674: PUSH
5675: EMPTY
5676: LIST
5677: LIST
5678: PPUSH
5679: LD_VAR 0 6
5683: PUSH
5684: LD_INT 2
5686: ARRAY
5687: PUSH
5688: LD_VAR 0 2
5692: ARRAY
5693: PPUSH
5694: CALL 26426 0 3
5698: ST_TO_ADDR
// end ;
5699: GO 5596
5701: POP
5702: POP
// end ; if tmp then
5703: LD_VAR 0 5
5707: IFFALSE 5835
// begin for i = 1 to tmp [ 1 ] do
5709: LD_ADDR_VAR 0 2
5713: PUSH
5714: DOUBLE
5715: LD_INT 1
5717: DEC
5718: ST_TO_ADDR
5719: LD_VAR 0 5
5723: PUSH
5724: LD_INT 1
5726: ARRAY
5727: PUSH
5728: FOR_TO
5729: IFFALSE 5833
// begin PlaceMine ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side , 0 ) ;
5731: LD_VAR 0 5
5735: PUSH
5736: LD_INT 1
5738: ARRAY
5739: PUSH
5740: LD_VAR 0 2
5744: ARRAY
5745: PPUSH
5746: LD_VAR 0 5
5750: PUSH
5751: LD_INT 2
5753: ARRAY
5754: PUSH
5755: LD_VAR 0 2
5759: ARRAY
5760: PPUSH
5761: LD_VAR 0 8
5765: PPUSH
5766: LD_INT 0
5768: PPUSH
5769: CALL_OW 454
// staticMines := Insert ( staticMines , staticMines + 1 , [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ) ;
5773: LD_ADDR_EXP 16
5777: PUSH
5778: LD_EXP 16
5782: PPUSH
5783: LD_EXP 16
5787: PUSH
5788: LD_INT 1
5790: PLUS
5791: PPUSH
5792: LD_VAR 0 5
5796: PUSH
5797: LD_INT 1
5799: ARRAY
5800: PUSH
5801: LD_VAR 0 2
5805: ARRAY
5806: PUSH
5807: LD_VAR 0 5
5811: PUSH
5812: LD_INT 2
5814: ARRAY
5815: PUSH
5816: LD_VAR 0 2
5820: ARRAY
5821: PUSH
5822: EMPTY
5823: LIST
5824: LIST
5825: PPUSH
5826: CALL_OW 2
5830: ST_TO_ADDR
// end ;
5831: GO 5728
5833: POP
5834: POP
// end ; cameras := [ [ 165 , 156 ] , [ 143 , 145 ] , [ 152 , 165 ] , [ 123 , 153 ] , [ 161 , 215 ] , [ 172 , 100 ] , [ 148 , 83 ] , [ 122 , 68 ] , [ 105 , 74 ] , [ 113 , 97 ] ] ;
5835: LD_ADDR_VAR 0 7
5839: PUSH
5840: LD_INT 165
5842: PUSH
5843: LD_INT 156
5845: PUSH
5846: EMPTY
5847: LIST
5848: LIST
5849: PUSH
5850: LD_INT 143
5852: PUSH
5853: LD_INT 145
5855: PUSH
5856: EMPTY
5857: LIST
5858: LIST
5859: PUSH
5860: LD_INT 152
5862: PUSH
5863: LD_INT 165
5865: PUSH
5866: EMPTY
5867: LIST
5868: LIST
5869: PUSH
5870: LD_INT 123
5872: PUSH
5873: LD_INT 153
5875: PUSH
5876: EMPTY
5877: LIST
5878: LIST
5879: PUSH
5880: LD_INT 161
5882: PUSH
5883: LD_INT 215
5885: PUSH
5886: EMPTY
5887: LIST
5888: LIST
5889: PUSH
5890: LD_INT 172
5892: PUSH
5893: LD_INT 100
5895: PUSH
5896: EMPTY
5897: LIST
5898: LIST
5899: PUSH
5900: LD_INT 148
5902: PUSH
5903: LD_INT 83
5905: PUSH
5906: EMPTY
5907: LIST
5908: LIST
5909: PUSH
5910: LD_INT 122
5912: PUSH
5913: LD_INT 68
5915: PUSH
5916: EMPTY
5917: LIST
5918: LIST
5919: PUSH
5920: LD_INT 105
5922: PUSH
5923: LD_INT 74
5925: PUSH
5926: EMPTY
5927: LIST
5928: LIST
5929: PUSH
5930: LD_INT 113
5932: PUSH
5933: LD_INT 97
5935: PUSH
5936: EMPTY
5937: LIST
5938: LIST
5939: PUSH
5940: EMPTY
5941: LIST
5942: LIST
5943: LIST
5944: LIST
5945: LIST
5946: LIST
5947: LIST
5948: LIST
5949: LIST
5950: LIST
5951: ST_TO_ADDR
// for i in cameras do
5952: LD_ADDR_VAR 0 2
5956: PUSH
5957: LD_VAR 0 7
5961: PUSH
5962: FOR_IN
5963: IFFALSE 5994
// HiddenCamera ( i [ 1 ] , i [ 2 ] , side ) ;
5965: LD_VAR 0 2
5969: PUSH
5970: LD_INT 1
5972: ARRAY
5973: PPUSH
5974: LD_VAR 0 2
5978: PUSH
5979: LD_INT 2
5981: ARRAY
5982: PPUSH
5983: LD_VAR 0 8
5987: PPUSH
5988: CALL_OW 244
5992: GO 5962
5994: POP
5995: POP
// tmp := [ [ 1 , 144 , 110 , 1 , 0 , 0 ] , [ 3 , 151 , 118 , 0 , 0 , 0 ] , [ 8 , 158 , 110 , 4 , 10 , 15 ] , [ 23 , 154 , 121 , 5 , 0 , 0 ] , [ 22 , 155 , 118 , 4 , 0 , 0 ] , [ 21 , 151 , 122 , 0 , 0 , 0 ] , [ 18 , 148 , 118 , 1 , 0 , 0 ] , [ 17 , 147 , 114 , 2 , 0 , 0 ] , [ 29 , 163 , 120 , 5 , 0 , 0 ] , [ 27 , 137 , 116 , 3 , 0 , 0 ] , [ 27 , 133 , 111 , 1 , 0 , 0 ] , [ 27 , 132 , 106 , 4 , 0 , 0 ] , [ 26 , 137 , 111 , 0 , 0 , 0 ] , [ 8 , 141 , 117 , 1 , 13 , 11 ] , [ 30 , 140 , 128 , 1 , 0 , 0 ] , [ 5 , 146 , 96 , 3 , 0 , 0 ] , [ 32 , 150 , 98 , 3 , 0 , 0 ] , [ 32 , 142 , 95 , 3 , 0 , 0 ] , [ 32 , 159 , 104 , 3 , 0 , 0 ] , [ 32 , 133 , 95 , 3 , 0 , 0 ] , [ 32 , 131 , 102 , 2 , 0 , 0 ] , [ 32 , 164 , 144 , 0 , 0 , 0 ] , [ 32 , 146 , 139 , 0 , 0 , 0 ] , [ 26 , 143 , 122 , 4 , 0 , 0 ] , [ 26 , 164 , 116 , 2 , 0 , 0 ] , ] ;
5996: LD_ADDR_VAR 0 5
6000: PUSH
6001: LD_INT 1
6003: PUSH
6004: LD_INT 144
6006: PUSH
6007: LD_INT 110
6009: PUSH
6010: LD_INT 1
6012: PUSH
6013: LD_INT 0
6015: PUSH
6016: LD_INT 0
6018: PUSH
6019: EMPTY
6020: LIST
6021: LIST
6022: LIST
6023: LIST
6024: LIST
6025: LIST
6026: PUSH
6027: LD_INT 3
6029: PUSH
6030: LD_INT 151
6032: PUSH
6033: LD_INT 118
6035: PUSH
6036: LD_INT 0
6038: PUSH
6039: LD_INT 0
6041: PUSH
6042: LD_INT 0
6044: PUSH
6045: EMPTY
6046: LIST
6047: LIST
6048: LIST
6049: LIST
6050: LIST
6051: LIST
6052: PUSH
6053: LD_INT 8
6055: PUSH
6056: LD_INT 158
6058: PUSH
6059: LD_INT 110
6061: PUSH
6062: LD_INT 4
6064: PUSH
6065: LD_INT 10
6067: PUSH
6068: LD_INT 15
6070: PUSH
6071: EMPTY
6072: LIST
6073: LIST
6074: LIST
6075: LIST
6076: LIST
6077: LIST
6078: PUSH
6079: LD_INT 23
6081: PUSH
6082: LD_INT 154
6084: PUSH
6085: LD_INT 121
6087: PUSH
6088: LD_INT 5
6090: PUSH
6091: LD_INT 0
6093: PUSH
6094: LD_INT 0
6096: PUSH
6097: EMPTY
6098: LIST
6099: LIST
6100: LIST
6101: LIST
6102: LIST
6103: LIST
6104: PUSH
6105: LD_INT 22
6107: PUSH
6108: LD_INT 155
6110: PUSH
6111: LD_INT 118
6113: PUSH
6114: LD_INT 4
6116: PUSH
6117: LD_INT 0
6119: PUSH
6120: LD_INT 0
6122: PUSH
6123: EMPTY
6124: LIST
6125: LIST
6126: LIST
6127: LIST
6128: LIST
6129: LIST
6130: PUSH
6131: LD_INT 21
6133: PUSH
6134: LD_INT 151
6136: PUSH
6137: LD_INT 122
6139: PUSH
6140: LD_INT 0
6142: PUSH
6143: LD_INT 0
6145: PUSH
6146: LD_INT 0
6148: PUSH
6149: EMPTY
6150: LIST
6151: LIST
6152: LIST
6153: LIST
6154: LIST
6155: LIST
6156: PUSH
6157: LD_INT 18
6159: PUSH
6160: LD_INT 148
6162: PUSH
6163: LD_INT 118
6165: PUSH
6166: LD_INT 1
6168: PUSH
6169: LD_INT 0
6171: PUSH
6172: LD_INT 0
6174: PUSH
6175: EMPTY
6176: LIST
6177: LIST
6178: LIST
6179: LIST
6180: LIST
6181: LIST
6182: PUSH
6183: LD_INT 17
6185: PUSH
6186: LD_INT 147
6188: PUSH
6189: LD_INT 114
6191: PUSH
6192: LD_INT 2
6194: PUSH
6195: LD_INT 0
6197: PUSH
6198: LD_INT 0
6200: PUSH
6201: EMPTY
6202: LIST
6203: LIST
6204: LIST
6205: LIST
6206: LIST
6207: LIST
6208: PUSH
6209: LD_INT 29
6211: PUSH
6212: LD_INT 163
6214: PUSH
6215: LD_INT 120
6217: PUSH
6218: LD_INT 5
6220: PUSH
6221: LD_INT 0
6223: PUSH
6224: LD_INT 0
6226: PUSH
6227: EMPTY
6228: LIST
6229: LIST
6230: LIST
6231: LIST
6232: LIST
6233: LIST
6234: PUSH
6235: LD_INT 27
6237: PUSH
6238: LD_INT 137
6240: PUSH
6241: LD_INT 116
6243: PUSH
6244: LD_INT 3
6246: PUSH
6247: LD_INT 0
6249: PUSH
6250: LD_INT 0
6252: PUSH
6253: EMPTY
6254: LIST
6255: LIST
6256: LIST
6257: LIST
6258: LIST
6259: LIST
6260: PUSH
6261: LD_INT 27
6263: PUSH
6264: LD_INT 133
6266: PUSH
6267: LD_INT 111
6269: PUSH
6270: LD_INT 1
6272: PUSH
6273: LD_INT 0
6275: PUSH
6276: LD_INT 0
6278: PUSH
6279: EMPTY
6280: LIST
6281: LIST
6282: LIST
6283: LIST
6284: LIST
6285: LIST
6286: PUSH
6287: LD_INT 27
6289: PUSH
6290: LD_INT 132
6292: PUSH
6293: LD_INT 106
6295: PUSH
6296: LD_INT 4
6298: PUSH
6299: LD_INT 0
6301: PUSH
6302: LD_INT 0
6304: PUSH
6305: EMPTY
6306: LIST
6307: LIST
6308: LIST
6309: LIST
6310: LIST
6311: LIST
6312: PUSH
6313: LD_INT 26
6315: PUSH
6316: LD_INT 137
6318: PUSH
6319: LD_INT 111
6321: PUSH
6322: LD_INT 0
6324: PUSH
6325: LD_INT 0
6327: PUSH
6328: LD_INT 0
6330: PUSH
6331: EMPTY
6332: LIST
6333: LIST
6334: LIST
6335: LIST
6336: LIST
6337: LIST
6338: PUSH
6339: LD_INT 8
6341: PUSH
6342: LD_INT 141
6344: PUSH
6345: LD_INT 117
6347: PUSH
6348: LD_INT 1
6350: PUSH
6351: LD_INT 13
6353: PUSH
6354: LD_INT 11
6356: PUSH
6357: EMPTY
6358: LIST
6359: LIST
6360: LIST
6361: LIST
6362: LIST
6363: LIST
6364: PUSH
6365: LD_INT 30
6367: PUSH
6368: LD_INT 140
6370: PUSH
6371: LD_INT 128
6373: PUSH
6374: LD_INT 1
6376: PUSH
6377: LD_INT 0
6379: PUSH
6380: LD_INT 0
6382: PUSH
6383: EMPTY
6384: LIST
6385: LIST
6386: LIST
6387: LIST
6388: LIST
6389: LIST
6390: PUSH
6391: LD_INT 5
6393: PUSH
6394: LD_INT 146
6396: PUSH
6397: LD_INT 96
6399: PUSH
6400: LD_INT 3
6402: PUSH
6403: LD_INT 0
6405: PUSH
6406: LD_INT 0
6408: PUSH
6409: EMPTY
6410: LIST
6411: LIST
6412: LIST
6413: LIST
6414: LIST
6415: LIST
6416: PUSH
6417: LD_INT 32
6419: PUSH
6420: LD_INT 150
6422: PUSH
6423: LD_INT 98
6425: PUSH
6426: LD_INT 3
6428: PUSH
6429: LD_INT 0
6431: PUSH
6432: LD_INT 0
6434: PUSH
6435: EMPTY
6436: LIST
6437: LIST
6438: LIST
6439: LIST
6440: LIST
6441: LIST
6442: PUSH
6443: LD_INT 32
6445: PUSH
6446: LD_INT 142
6448: PUSH
6449: LD_INT 95
6451: PUSH
6452: LD_INT 3
6454: PUSH
6455: LD_INT 0
6457: PUSH
6458: LD_INT 0
6460: PUSH
6461: EMPTY
6462: LIST
6463: LIST
6464: LIST
6465: LIST
6466: LIST
6467: LIST
6468: PUSH
6469: LD_INT 32
6471: PUSH
6472: LD_INT 159
6474: PUSH
6475: LD_INT 104
6477: PUSH
6478: LD_INT 3
6480: PUSH
6481: LD_INT 0
6483: PUSH
6484: LD_INT 0
6486: PUSH
6487: EMPTY
6488: LIST
6489: LIST
6490: LIST
6491: LIST
6492: LIST
6493: LIST
6494: PUSH
6495: LD_INT 32
6497: PUSH
6498: LD_INT 133
6500: PUSH
6501: LD_INT 95
6503: PUSH
6504: LD_INT 3
6506: PUSH
6507: LD_INT 0
6509: PUSH
6510: LD_INT 0
6512: PUSH
6513: EMPTY
6514: LIST
6515: LIST
6516: LIST
6517: LIST
6518: LIST
6519: LIST
6520: PUSH
6521: LD_INT 32
6523: PUSH
6524: LD_INT 131
6526: PUSH
6527: LD_INT 102
6529: PUSH
6530: LD_INT 2
6532: PUSH
6533: LD_INT 0
6535: PUSH
6536: LD_INT 0
6538: PUSH
6539: EMPTY
6540: LIST
6541: LIST
6542: LIST
6543: LIST
6544: LIST
6545: LIST
6546: PUSH
6547: LD_INT 32
6549: PUSH
6550: LD_INT 164
6552: PUSH
6553: LD_INT 144
6555: PUSH
6556: LD_INT 0
6558: PUSH
6559: LD_INT 0
6561: PUSH
6562: LD_INT 0
6564: PUSH
6565: EMPTY
6566: LIST
6567: LIST
6568: LIST
6569: LIST
6570: LIST
6571: LIST
6572: PUSH
6573: LD_INT 32
6575: PUSH
6576: LD_INT 146
6578: PUSH
6579: LD_INT 139
6581: PUSH
6582: LD_INT 0
6584: PUSH
6585: LD_INT 0
6587: PUSH
6588: LD_INT 0
6590: PUSH
6591: EMPTY
6592: LIST
6593: LIST
6594: LIST
6595: LIST
6596: LIST
6597: LIST
6598: PUSH
6599: LD_INT 26
6601: PUSH
6602: LD_INT 143
6604: PUSH
6605: LD_INT 122
6607: PUSH
6608: LD_INT 4
6610: PUSH
6611: LD_INT 0
6613: PUSH
6614: LD_INT 0
6616: PUSH
6617: EMPTY
6618: LIST
6619: LIST
6620: LIST
6621: LIST
6622: LIST
6623: LIST
6624: PUSH
6625: LD_INT 26
6627: PUSH
6628: LD_INT 164
6630: PUSH
6631: LD_INT 116
6633: PUSH
6634: LD_INT 2
6636: PUSH
6637: LD_INT 0
6639: PUSH
6640: LD_INT 0
6642: PUSH
6643: EMPTY
6644: LIST
6645: LIST
6646: LIST
6647: LIST
6648: LIST
6649: LIST
6650: PUSH
6651: EMPTY
6652: LIST
6653: LIST
6654: LIST
6655: LIST
6656: LIST
6657: LIST
6658: LIST
6659: LIST
6660: LIST
6661: LIST
6662: LIST
6663: LIST
6664: LIST
6665: LIST
6666: LIST
6667: LIST
6668: LIST
6669: LIST
6670: LIST
6671: LIST
6672: LIST
6673: LIST
6674: LIST
6675: LIST
6676: LIST
6677: ST_TO_ADDR
// for i in tmp do
6678: LD_ADDR_VAR 0 2
6682: PUSH
6683: LD_VAR 0 5
6687: PUSH
6688: FOR_IN
6689: IFFALSE 6920
// begin uc_side := side ;
6691: LD_ADDR_OWVAR 20
6695: PUSH
6696: LD_VAR 0 8
6700: ST_TO_ADDR
// uc_nation := nation_arabian ;
6701: LD_ADDR_OWVAR 21
6705: PUSH
6706: LD_INT 2
6708: ST_TO_ADDR
// bc_type := i [ 1 ] ;
6709: LD_ADDR_OWVAR 42
6713: PUSH
6714: LD_VAR 0 2
6718: PUSH
6719: LD_INT 1
6721: ARRAY
6722: ST_TO_ADDR
// bc_level := rand ( 5 , 6 ) ;
6723: LD_ADDR_OWVAR 43
6727: PUSH
6728: LD_INT 5
6730: PPUSH
6731: LD_INT 6
6733: PPUSH
6734: CALL_OW 12
6738: ST_TO_ADDR
// bc_kind1 := i [ 5 ] ;
6739: LD_ADDR_OWVAR 44
6743: PUSH
6744: LD_VAR 0 2
6748: PUSH
6749: LD_INT 5
6751: ARRAY
6752: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
6753: LD_ADDR_OWVAR 45
6757: PUSH
6758: LD_VAR 0 2
6762: PUSH
6763: LD_INT 6
6765: ARRAY
6766: ST_TO_ADDR
// sr := 0 ;
6767: LD_ADDR_VAR 0 9
6771: PUSH
6772: LD_INT 0
6774: ST_TO_ADDR
// if i [ 1 ] = b_oil_mine then
6775: LD_VAR 0 2
6779: PUSH
6780: LD_INT 1
6782: ARRAY
6783: PUSH
6784: LD_INT 29
6786: EQUAL
6787: IFFALSE 6799
// sr := mat_oil else
6789: LD_ADDR_VAR 0 9
6793: PUSH
6794: LD_INT 2
6796: ST_TO_ADDR
6797: GO 6821
// if i [ 1 ] = b_siberite_mine then
6799: LD_VAR 0 2
6803: PUSH
6804: LD_INT 1
6806: ARRAY
6807: PUSH
6808: LD_INT 30
6810: EQUAL
6811: IFFALSE 6821
// sr := mat_siberit ;
6813: LD_ADDR_VAR 0 9
6817: PUSH
6818: LD_INT 3
6820: ST_TO_ADDR
// if sr then
6821: LD_VAR 0 9
6825: IFFALSE 6881
// begin CreateDepositXY ( i [ 2 ] , i [ 3 ] , sr ) ;
6827: LD_VAR 0 2
6831: PUSH
6832: LD_INT 2
6834: ARRAY
6835: PPUSH
6836: LD_VAR 0 2
6840: PUSH
6841: LD_INT 3
6843: ARRAY
6844: PPUSH
6845: LD_VAR 0 9
6849: PPUSH
6850: CALL_OW 62
// SetResourceVisibility ( i [ 2 ] , i [ 3 ] , side ) ;
6854: LD_VAR 0 2
6858: PUSH
6859: LD_INT 2
6861: ARRAY
6862: PPUSH
6863: LD_VAR 0 2
6867: PUSH
6868: LD_INT 3
6870: ARRAY
6871: PPUSH
6872: LD_VAR 0 8
6876: PPUSH
6877: CALL_OW 441
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
6881: LD_ADDR_VAR 0 3
6885: PUSH
6886: LD_VAR 0 2
6890: PUSH
6891: LD_INT 2
6893: ARRAY
6894: PPUSH
6895: LD_VAR 0 2
6899: PUSH
6900: LD_INT 3
6902: ARRAY
6903: PPUSH
6904: LD_VAR 0 2
6908: PUSH
6909: LD_INT 4
6911: ARRAY
6912: PPUSH
6913: CALL_OW 47
6917: ST_TO_ADDR
// end ;
6918: GO 6688
6920: POP
6921: POP
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
6922: LD_ADDR_VAR 0 10
6926: PUSH
6927: LD_INT 22
6929: PUSH
6930: LD_VAR 0 8
6934: PUSH
6935: EMPTY
6936: LIST
6937: LIST
6938: PUSH
6939: LD_INT 30
6941: PUSH
6942: LD_INT 1
6944: PUSH
6945: EMPTY
6946: LIST
6947: LIST
6948: PUSH
6949: EMPTY
6950: LIST
6951: LIST
6952: PPUSH
6953: CALL_OW 69
6957: ST_TO_ADDR
// if not depot then
6958: LD_VAR 0 10
6962: NOT
6963: IFFALSE 6967
// exit ;
6965: GO 7213
// base := PrepareBase ( depot [ 1 ] , legBase , 0 , [ 7 , 8 , 10 ] [ Difficulty ] , [ 3000 , 300 , 100 ] , [ 14 , 6 , 6 , 5 ] ) ;
6967: LD_ADDR_VAR 0 11
6971: PUSH
6972: LD_VAR 0 10
6976: PUSH
6977: LD_INT 1
6979: ARRAY
6980: PPUSH
6981: LD_INT 6
6983: PPUSH
6984: LD_INT 0
6986: PPUSH
6987: LD_INT 7
6989: PUSH
6990: LD_INT 8
6992: PUSH
6993: LD_INT 10
6995: PUSH
6996: EMPTY
6997: LIST
6998: LIST
6999: LIST
7000: PUSH
7001: LD_OWVAR 67
7005: ARRAY
7006: PPUSH
7007: LD_INT 3000
7009: PUSH
7010: LD_INT 300
7012: PUSH
7013: LD_INT 100
7015: PUSH
7016: EMPTY
7017: LIST
7018: LIST
7019: LIST
7020: PPUSH
7021: LD_INT 14
7023: PUSH
7024: LD_INT 6
7026: PUSH
7027: LD_INT 6
7029: PUSH
7030: LD_INT 5
7032: PUSH
7033: EMPTY
7034: LIST
7035: LIST
7036: LIST
7037: LIST
7038: PPUSH
7039: CALL 29713 0 6
7043: ST_TO_ADDR
// if not base then
7044: LD_VAR 0 11
7048: NOT
7049: IFFALSE 7053
// exit ;
7051: GO 7213
// if Difficulty > 1 then
7053: LD_OWVAR 67
7057: PUSH
7058: LD_INT 1
7060: GREATER
7061: IFFALSE 7134
// begin InitHc ;
7063: CALL_OW 19
// PrepareHuman ( sex_male , class_sniper , [ 5 , 8 ] [ Difficulty - 1 ] ) ;
7067: LD_INT 1
7069: PPUSH
7070: LD_INT 5
7072: PPUSH
7073: LD_INT 5
7075: PUSH
7076: LD_INT 8
7078: PUSH
7079: EMPTY
7080: LIST
7081: LIST
7082: PUSH
7083: LD_OWVAR 67
7087: PUSH
7088: LD_INT 1
7090: MINUS
7091: ARRAY
7092: PPUSH
7093: CALL_OW 380
// for i = 1 to Difficulty do
7097: LD_ADDR_VAR 0 2
7101: PUSH
7102: DOUBLE
7103: LD_INT 1
7105: DEC
7106: ST_TO_ADDR
7107: LD_OWVAR 67
7111: PUSH
7112: FOR_TO
7113: IFFALSE 7132
// PlaceUnitArea ( CreateHuman , sniperGuardArea , false ) ;
7115: CALL_OW 44
7119: PPUSH
7120: LD_INT 24
7122: PPUSH
7123: LD_INT 0
7125: PPUSH
7126: CALL_OW 49
7130: GO 7112
7132: POP
7133: POP
// end ; mc_bases := Replace ( mc_bases , mc_leg , base ) ;
7134: LD_ADDR_EXP 36
7138: PUSH
7139: LD_EXP 36
7143: PPUSH
7144: LD_EXP 6
7148: PPUSH
7149: LD_VAR 0 11
7153: PPUSH
7154: CALL_OW 1
7158: ST_TO_ADDR
// hc_gallery := ru ;
7159: LD_ADDR_OWVAR 33
7163: PUSH
7164: LD_STRING ru
7166: ST_TO_ADDR
// hc_face_number := 44 ;
7167: LD_ADDR_OWVAR 34
7171: PUSH
7172: LD_INT 44
7174: ST_TO_ADDR
// hc_name := Robert Farmer ;
7175: LD_ADDR_OWVAR 26
7179: PUSH
7180: LD_STRING Robert Farmer
7182: ST_TO_ADDR
// hc_sex := sex_male ;
7183: LD_ADDR_OWVAR 27
7187: PUSH
7188: LD_INT 1
7190: ST_TO_ADDR
// hc_class := 1 ;
7191: LD_ADDR_OWVAR 28
7195: PUSH
7196: LD_INT 1
7198: ST_TO_ADDR
// Farmer := CreateHuman ;
7199: LD_ADDR_EXP 13
7203: PUSH
7204: CALL_OW 44
7208: ST_TO_ADDR
// InitHc ;
7209: CALL_OW 19
// end ;
7213: LD_VAR 0 1
7217: RET
// export function PrepareAmericans ; var i , b , tmp , side , sr , base , depot ; begin
7218: LD_INT 0
7220: PPUSH
7221: PPUSH
7222: PPUSH
7223: PPUSH
7224: PPUSH
7225: PPUSH
7226: PPUSH
7227: PPUSH
// PrepareNature ( 0 , 0 , 4 , 0 , 0 , 0 , 0 , amerApe , 0 ) ;
7228: LD_INT 0
7230: PPUSH
7231: LD_INT 0
7233: PPUSH
7234: LD_INT 4
7236: PPUSH
7237: LD_INT 0
7239: PPUSH
7240: LD_INT 0
7242: PPUSH
7243: LD_INT 0
7245: PPUSH
7246: LD_INT 0
7248: PPUSH
7249: LD_INT 10
7251: PPUSH
7252: LD_INT 0
7254: PPUSH
7255: CALL 54118 0 9
// side := 4 ;
7259: LD_ADDR_VAR 0 5
7263: PUSH
7264: LD_INT 4
7266: ST_TO_ADDR
// tmp := [ [ 1 , 144 , 18 , 4 , 0 , 0 ] , [ 3 , 137 , 8 , 4 , 0 , 0 ] , [ 22 , 141 , 8 , 4 , 0 , 0 ] , [ 25 , 137 , 5 , 3 , 0 , 0 ] , [ 18 , 137 , 12 , 0 , 0 , 0 ] , [ 17 , 133 , 4 , 2 , 0 , 0 ] , [ 16 , 140 , 11 , 5 , 0 , 0 ] , [ 8 , 149 , 26 , 4 , 10 , 15 ] , [ 8 , 142 , 26 , 1 , 11 , 12 ] , [ 27 , 153 , 32 , 5 , 0 , 0 ] , [ 27 , 145 , 32 , 3 , 0 , 0 ] , [ 27 , 138 , 2 , 4 , 0 , 0 ] , [ 27 , 144 , 13 , 0 , 0 , 0 ] , [ 26 , 124 , 2 , 4 , 0 , 0 ] , [ 26 , 121 , 2 , 2 , 0 , 0 ] , [ 26 , 118 , 2 , 1 , 0 , 0 ] , [ 29 , 159 , 47 , 2 , 0 , 0 ] , [ 32 , 146 , 41 , 0 , 0 , 0 ] , [ 33 , 136 , 37 , 0 , 0 , 0 ] , [ 33 , 132 , 34 , 0 , 0 , 0 ] , [ 36 , 124 , 7 , 1 , 0 , 0 ] , [ 5 , 124 , 19 , 0 , 0 , 0 ] , [ 32 , 127 , 23 , 0 , 0 , 0 ] ] ;
7267: LD_ADDR_VAR 0 4
7271: PUSH
7272: LD_INT 1
7274: PUSH
7275: LD_INT 144
7277: PUSH
7278: LD_INT 18
7280: PUSH
7281: LD_INT 4
7283: PUSH
7284: LD_INT 0
7286: PUSH
7287: LD_INT 0
7289: PUSH
7290: EMPTY
7291: LIST
7292: LIST
7293: LIST
7294: LIST
7295: LIST
7296: LIST
7297: PUSH
7298: LD_INT 3
7300: PUSH
7301: LD_INT 137
7303: PUSH
7304: LD_INT 8
7306: PUSH
7307: LD_INT 4
7309: PUSH
7310: LD_INT 0
7312: PUSH
7313: LD_INT 0
7315: PUSH
7316: EMPTY
7317: LIST
7318: LIST
7319: LIST
7320: LIST
7321: LIST
7322: LIST
7323: PUSH
7324: LD_INT 22
7326: PUSH
7327: LD_INT 141
7329: PUSH
7330: LD_INT 8
7332: PUSH
7333: LD_INT 4
7335: PUSH
7336: LD_INT 0
7338: PUSH
7339: LD_INT 0
7341: PUSH
7342: EMPTY
7343: LIST
7344: LIST
7345: LIST
7346: LIST
7347: LIST
7348: LIST
7349: PUSH
7350: LD_INT 25
7352: PUSH
7353: LD_INT 137
7355: PUSH
7356: LD_INT 5
7358: PUSH
7359: LD_INT 3
7361: PUSH
7362: LD_INT 0
7364: PUSH
7365: LD_INT 0
7367: PUSH
7368: EMPTY
7369: LIST
7370: LIST
7371: LIST
7372: LIST
7373: LIST
7374: LIST
7375: PUSH
7376: LD_INT 18
7378: PUSH
7379: LD_INT 137
7381: PUSH
7382: LD_INT 12
7384: PUSH
7385: LD_INT 0
7387: PUSH
7388: LD_INT 0
7390: PUSH
7391: LD_INT 0
7393: PUSH
7394: EMPTY
7395: LIST
7396: LIST
7397: LIST
7398: LIST
7399: LIST
7400: LIST
7401: PUSH
7402: LD_INT 17
7404: PUSH
7405: LD_INT 133
7407: PUSH
7408: LD_INT 4
7410: PUSH
7411: LD_INT 2
7413: PUSH
7414: LD_INT 0
7416: PUSH
7417: LD_INT 0
7419: PUSH
7420: EMPTY
7421: LIST
7422: LIST
7423: LIST
7424: LIST
7425: LIST
7426: LIST
7427: PUSH
7428: LD_INT 16
7430: PUSH
7431: LD_INT 140
7433: PUSH
7434: LD_INT 11
7436: PUSH
7437: LD_INT 5
7439: PUSH
7440: LD_INT 0
7442: PUSH
7443: LD_INT 0
7445: PUSH
7446: EMPTY
7447: LIST
7448: LIST
7449: LIST
7450: LIST
7451: LIST
7452: LIST
7453: PUSH
7454: LD_INT 8
7456: PUSH
7457: LD_INT 149
7459: PUSH
7460: LD_INT 26
7462: PUSH
7463: LD_INT 4
7465: PUSH
7466: LD_INT 10
7468: PUSH
7469: LD_INT 15
7471: PUSH
7472: EMPTY
7473: LIST
7474: LIST
7475: LIST
7476: LIST
7477: LIST
7478: LIST
7479: PUSH
7480: LD_INT 8
7482: PUSH
7483: LD_INT 142
7485: PUSH
7486: LD_INT 26
7488: PUSH
7489: LD_INT 1
7491: PUSH
7492: LD_INT 11
7494: PUSH
7495: LD_INT 12
7497: PUSH
7498: EMPTY
7499: LIST
7500: LIST
7501: LIST
7502: LIST
7503: LIST
7504: LIST
7505: PUSH
7506: LD_INT 27
7508: PUSH
7509: LD_INT 153
7511: PUSH
7512: LD_INT 32
7514: PUSH
7515: LD_INT 5
7517: PUSH
7518: LD_INT 0
7520: PUSH
7521: LD_INT 0
7523: PUSH
7524: EMPTY
7525: LIST
7526: LIST
7527: LIST
7528: LIST
7529: LIST
7530: LIST
7531: PUSH
7532: LD_INT 27
7534: PUSH
7535: LD_INT 145
7537: PUSH
7538: LD_INT 32
7540: PUSH
7541: LD_INT 3
7543: PUSH
7544: LD_INT 0
7546: PUSH
7547: LD_INT 0
7549: PUSH
7550: EMPTY
7551: LIST
7552: LIST
7553: LIST
7554: LIST
7555: LIST
7556: LIST
7557: PUSH
7558: LD_INT 27
7560: PUSH
7561: LD_INT 138
7563: PUSH
7564: LD_INT 2
7566: PUSH
7567: LD_INT 4
7569: PUSH
7570: LD_INT 0
7572: PUSH
7573: LD_INT 0
7575: PUSH
7576: EMPTY
7577: LIST
7578: LIST
7579: LIST
7580: LIST
7581: LIST
7582: LIST
7583: PUSH
7584: LD_INT 27
7586: PUSH
7587: LD_INT 144
7589: PUSH
7590: LD_INT 13
7592: PUSH
7593: LD_INT 0
7595: PUSH
7596: LD_INT 0
7598: PUSH
7599: LD_INT 0
7601: PUSH
7602: EMPTY
7603: LIST
7604: LIST
7605: LIST
7606: LIST
7607: LIST
7608: LIST
7609: PUSH
7610: LD_INT 26
7612: PUSH
7613: LD_INT 124
7615: PUSH
7616: LD_INT 2
7618: PUSH
7619: LD_INT 4
7621: PUSH
7622: LD_INT 0
7624: PUSH
7625: LD_INT 0
7627: PUSH
7628: EMPTY
7629: LIST
7630: LIST
7631: LIST
7632: LIST
7633: LIST
7634: LIST
7635: PUSH
7636: LD_INT 26
7638: PUSH
7639: LD_INT 121
7641: PUSH
7642: LD_INT 2
7644: PUSH
7645: LD_INT 2
7647: PUSH
7648: LD_INT 0
7650: PUSH
7651: LD_INT 0
7653: PUSH
7654: EMPTY
7655: LIST
7656: LIST
7657: LIST
7658: LIST
7659: LIST
7660: LIST
7661: PUSH
7662: LD_INT 26
7664: PUSH
7665: LD_INT 118
7667: PUSH
7668: LD_INT 2
7670: PUSH
7671: LD_INT 1
7673: PUSH
7674: LD_INT 0
7676: PUSH
7677: LD_INT 0
7679: PUSH
7680: EMPTY
7681: LIST
7682: LIST
7683: LIST
7684: LIST
7685: LIST
7686: LIST
7687: PUSH
7688: LD_INT 29
7690: PUSH
7691: LD_INT 159
7693: PUSH
7694: LD_INT 47
7696: PUSH
7697: LD_INT 2
7699: PUSH
7700: LD_INT 0
7702: PUSH
7703: LD_INT 0
7705: PUSH
7706: EMPTY
7707: LIST
7708: LIST
7709: LIST
7710: LIST
7711: LIST
7712: LIST
7713: PUSH
7714: LD_INT 32
7716: PUSH
7717: LD_INT 146
7719: PUSH
7720: LD_INT 41
7722: PUSH
7723: LD_INT 0
7725: PUSH
7726: LD_INT 0
7728: PUSH
7729: LD_INT 0
7731: PUSH
7732: EMPTY
7733: LIST
7734: LIST
7735: LIST
7736: LIST
7737: LIST
7738: LIST
7739: PUSH
7740: LD_INT 33
7742: PUSH
7743: LD_INT 136
7745: PUSH
7746: LD_INT 37
7748: PUSH
7749: LD_INT 0
7751: PUSH
7752: LD_INT 0
7754: PUSH
7755: LD_INT 0
7757: PUSH
7758: EMPTY
7759: LIST
7760: LIST
7761: LIST
7762: LIST
7763: LIST
7764: LIST
7765: PUSH
7766: LD_INT 33
7768: PUSH
7769: LD_INT 132
7771: PUSH
7772: LD_INT 34
7774: PUSH
7775: LD_INT 0
7777: PUSH
7778: LD_INT 0
7780: PUSH
7781: LD_INT 0
7783: PUSH
7784: EMPTY
7785: LIST
7786: LIST
7787: LIST
7788: LIST
7789: LIST
7790: LIST
7791: PUSH
7792: LD_INT 36
7794: PUSH
7795: LD_INT 124
7797: PUSH
7798: LD_INT 7
7800: PUSH
7801: LD_INT 1
7803: PUSH
7804: LD_INT 0
7806: PUSH
7807: LD_INT 0
7809: PUSH
7810: EMPTY
7811: LIST
7812: LIST
7813: LIST
7814: LIST
7815: LIST
7816: LIST
7817: PUSH
7818: LD_INT 5
7820: PUSH
7821: LD_INT 124
7823: PUSH
7824: LD_INT 19
7826: PUSH
7827: LD_INT 0
7829: PUSH
7830: LD_INT 0
7832: PUSH
7833: LD_INT 0
7835: PUSH
7836: EMPTY
7837: LIST
7838: LIST
7839: LIST
7840: LIST
7841: LIST
7842: LIST
7843: PUSH
7844: LD_INT 32
7846: PUSH
7847: LD_INT 127
7849: PUSH
7850: LD_INT 23
7852: PUSH
7853: LD_INT 0
7855: PUSH
7856: LD_INT 0
7858: PUSH
7859: LD_INT 0
7861: PUSH
7862: EMPTY
7863: LIST
7864: LIST
7865: LIST
7866: LIST
7867: LIST
7868: LIST
7869: PUSH
7870: EMPTY
7871: LIST
7872: LIST
7873: LIST
7874: LIST
7875: LIST
7876: LIST
7877: LIST
7878: LIST
7879: LIST
7880: LIST
7881: LIST
7882: LIST
7883: LIST
7884: LIST
7885: LIST
7886: LIST
7887: LIST
7888: LIST
7889: LIST
7890: LIST
7891: LIST
7892: LIST
7893: LIST
7894: ST_TO_ADDR
// for i in tmp do
7895: LD_ADDR_VAR 0 2
7899: PUSH
7900: LD_VAR 0 4
7904: PUSH
7905: FOR_IN
7906: IFFALSE 8137
// begin uc_side := side ;
7908: LD_ADDR_OWVAR 20
7912: PUSH
7913: LD_VAR 0 5
7917: ST_TO_ADDR
// uc_nation := nation_american ;
7918: LD_ADDR_OWVAR 21
7922: PUSH
7923: LD_INT 1
7925: ST_TO_ADDR
// bc_type := i [ 1 ] ;
7926: LD_ADDR_OWVAR 42
7930: PUSH
7931: LD_VAR 0 2
7935: PUSH
7936: LD_INT 1
7938: ARRAY
7939: ST_TO_ADDR
// bc_level := rand ( 5 , 6 ) ;
7940: LD_ADDR_OWVAR 43
7944: PUSH
7945: LD_INT 5
7947: PPUSH
7948: LD_INT 6
7950: PPUSH
7951: CALL_OW 12
7955: ST_TO_ADDR
// bc_kind1 := i [ 5 ] ;
7956: LD_ADDR_OWVAR 44
7960: PUSH
7961: LD_VAR 0 2
7965: PUSH
7966: LD_INT 5
7968: ARRAY
7969: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
7970: LD_ADDR_OWVAR 45
7974: PUSH
7975: LD_VAR 0 2
7979: PUSH
7980: LD_INT 6
7982: ARRAY
7983: ST_TO_ADDR
// sr := 0 ;
7984: LD_ADDR_VAR 0 6
7988: PUSH
7989: LD_INT 0
7991: ST_TO_ADDR
// if i [ 1 ] = b_oil_mine then
7992: LD_VAR 0 2
7996: PUSH
7997: LD_INT 1
7999: ARRAY
8000: PUSH
8001: LD_INT 29
8003: EQUAL
8004: IFFALSE 8016
// sr := mat_oil else
8006: LD_ADDR_VAR 0 6
8010: PUSH
8011: LD_INT 2
8013: ST_TO_ADDR
8014: GO 8038
// if i [ 1 ] = b_siberite_mine then
8016: LD_VAR 0 2
8020: PUSH
8021: LD_INT 1
8023: ARRAY
8024: PUSH
8025: LD_INT 30
8027: EQUAL
8028: IFFALSE 8038
// sr := mat_siberit ;
8030: LD_ADDR_VAR 0 6
8034: PUSH
8035: LD_INT 3
8037: ST_TO_ADDR
// if sr then
8038: LD_VAR 0 6
8042: IFFALSE 8098
// begin CreateDepositXY ( i [ 2 ] , i [ 3 ] , sr ) ;
8044: LD_VAR 0 2
8048: PUSH
8049: LD_INT 2
8051: ARRAY
8052: PPUSH
8053: LD_VAR 0 2
8057: PUSH
8058: LD_INT 3
8060: ARRAY
8061: PPUSH
8062: LD_VAR 0 6
8066: PPUSH
8067: CALL_OW 62
// SetResourceVisibility ( i [ 2 ] , i [ 3 ] , side ) ;
8071: LD_VAR 0 2
8075: PUSH
8076: LD_INT 2
8078: ARRAY
8079: PPUSH
8080: LD_VAR 0 2
8084: PUSH
8085: LD_INT 3
8087: ARRAY
8088: PPUSH
8089: LD_VAR 0 5
8093: PPUSH
8094: CALL_OW 441
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
8098: LD_ADDR_VAR 0 3
8102: PUSH
8103: LD_VAR 0 2
8107: PUSH
8108: LD_INT 2
8110: ARRAY
8111: PPUSH
8112: LD_VAR 0 2
8116: PUSH
8117: LD_INT 3
8119: ARRAY
8120: PPUSH
8121: LD_VAR 0 2
8125: PUSH
8126: LD_INT 4
8128: ARRAY
8129: PPUSH
8130: CALL_OW 47
8134: ST_TO_ADDR
// end ;
8135: GO 7905
8137: POP
8138: POP
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
8139: LD_ADDR_VAR 0 8
8143: PUSH
8144: LD_INT 22
8146: PUSH
8147: LD_VAR 0 5
8151: PUSH
8152: EMPTY
8153: LIST
8154: LIST
8155: PUSH
8156: LD_INT 30
8158: PUSH
8159: LD_INT 1
8161: PUSH
8162: EMPTY
8163: LIST
8164: LIST
8165: PUSH
8166: EMPTY
8167: LIST
8168: LIST
8169: PPUSH
8170: CALL_OW 69
8174: ST_TO_ADDR
// if not depot then
8175: LD_VAR 0 8
8179: NOT
8180: IFFALSE 8184
// exit ;
8182: GO 8456
// base := PrepareBase ( depot [ 1 ] , amerBase , theta3 , [ 8 , 7 , 6 ] [ Difficulty ] , [ [ 2500 , 2000 , 1750 ] [ Difficulty ] , [ 300 , 250 , 200 ] [ Difficulty ] , [ 80 , 60 , 50 ] [ Difficulty ] ] , [ 7 , 6 , 5 , 5 ] ) ;
8184: LD_ADDR_VAR 0 7
8188: PUSH
8189: LD_VAR 0 8
8193: PUSH
8194: LD_INT 1
8196: ARRAY
8197: PPUSH
8198: LD_INT 3
8200: PPUSH
8201: LD_STRING theta3
8203: PPUSH
8204: LD_INT 8
8206: PUSH
8207: LD_INT 7
8209: PUSH
8210: LD_INT 6
8212: PUSH
8213: EMPTY
8214: LIST
8215: LIST
8216: LIST
8217: PUSH
8218: LD_OWVAR 67
8222: ARRAY
8223: PPUSH
8224: LD_INT 2500
8226: PUSH
8227: LD_INT 2000
8229: PUSH
8230: LD_INT 1750
8232: PUSH
8233: EMPTY
8234: LIST
8235: LIST
8236: LIST
8237: PUSH
8238: LD_OWVAR 67
8242: ARRAY
8243: PUSH
8244: LD_INT 300
8246: PUSH
8247: LD_INT 250
8249: PUSH
8250: LD_INT 200
8252: PUSH
8253: EMPTY
8254: LIST
8255: LIST
8256: LIST
8257: PUSH
8258: LD_OWVAR 67
8262: ARRAY
8263: PUSH
8264: LD_INT 80
8266: PUSH
8267: LD_INT 60
8269: PUSH
8270: LD_INT 50
8272: PUSH
8273: EMPTY
8274: LIST
8275: LIST
8276: LIST
8277: PUSH
8278: LD_OWVAR 67
8282: ARRAY
8283: PUSH
8284: EMPTY
8285: LIST
8286: LIST
8287: LIST
8288: PPUSH
8289: LD_INT 7
8291: PUSH
8292: LD_INT 6
8294: PUSH
8295: LD_INT 5
8297: PUSH
8298: LD_INT 5
8300: PUSH
8301: EMPTY
8302: LIST
8303: LIST
8304: LIST
8305: LIST
8306: PPUSH
8307: CALL 29713 0 6
8311: ST_TO_ADDR
// if not base then
8312: LD_VAR 0 7
8316: NOT
8317: IFFALSE 8321
// exit ;
8319: GO 8456
// mc_bases := Replace ( mc_bases , mc_amer , base ) ;
8321: LD_ADDR_EXP 36
8325: PUSH
8326: LD_EXP 36
8330: PPUSH
8331: LD_EXP 5
8335: PPUSH
8336: LD_VAR 0 7
8340: PPUSH
8341: CALL_OW 1
8345: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 7 ) ;
8346: LD_INT 1
8348: PPUSH
8349: LD_INT 1
8351: PPUSH
8352: LD_INT 7
8354: PPUSH
8355: CALL_OW 380
// allyCommander := CreateHuman ;
8359: LD_ADDR_EXP 11
8363: PUSH
8364: CALL_OW 44
8368: ST_TO_ADDR
// PlaceUnitXY ( allyCommander , 139 , 15 , false ) ;
8369: LD_EXP 11
8373: PPUSH
8374: LD_INT 139
8376: PPUSH
8377: LD_INT 15
8379: PPUSH
8380: LD_INT 0
8382: PPUSH
8383: CALL_OW 48
// ComTurnXY ( allyCommander , 137 , 15 ) ;
8387: LD_EXP 11
8391: PPUSH
8392: LD_INT 137
8394: PPUSH
8395: LD_INT 15
8397: PPUSH
8398: CALL_OW 118
// hc_gallery := us ;
8402: LD_ADDR_OWVAR 33
8406: PUSH
8407: LD_STRING us
8409: ST_TO_ADDR
// hc_face_number := 7 ;
8410: LD_ADDR_OWVAR 34
8414: PUSH
8415: LD_INT 7
8417: ST_TO_ADDR
// hc_name := Arthur Powell ;
8418: LD_ADDR_OWVAR 26
8422: PUSH
8423: LD_STRING Arthur Powell
8425: ST_TO_ADDR
// hc_sex := sex_male ;
8426: LD_ADDR_OWVAR 27
8430: PUSH
8431: LD_INT 1
8433: ST_TO_ADDR
// hc_class := 1 ;
8434: LD_ADDR_OWVAR 28
8438: PUSH
8439: LD_INT 1
8441: ST_TO_ADDR
// Powell := CreateHuman ;
8442: LD_ADDR_EXP 12
8446: PUSH
8447: CALL_OW 44
8451: ST_TO_ADDR
// InitHc ;
8452: CALL_OW 19
// end ;
8456: LD_VAR 0 1
8460: RET
// export function PreparePlayer ; var i , side , techs , tanks , cl , chassis , engines , weapons ; begin
8461: LD_INT 0
8463: PPUSH
8464: PPUSH
8465: PPUSH
8466: PPUSH
8467: PPUSH
8468: PPUSH
8469: PPUSH
8470: PPUSH
8471: PPUSH
// side := 1 ;
8472: LD_ADDR_VAR 0 3
8476: PUSH
8477: LD_INT 1
8479: ST_TO_ADDR
// result := [ [ ] , [ ] ] ;
8480: LD_ADDR_VAR 0 1
8484: PUSH
8485: EMPTY
8486: PUSH
8487: EMPTY
8488: PUSH
8489: EMPTY
8490: LIST
8491: LIST
8492: ST_TO_ADDR
// uc_side := side ;
8493: LD_ADDR_OWVAR 20
8497: PUSH
8498: LD_VAR 0 3
8502: ST_TO_ADDR
// uc_nation := nation_american ;
8503: LD_ADDR_OWVAR 21
8507: PUSH
8508: LD_INT 1
8510: ST_TO_ADDR
// InitHc ;
8511: CALL_OW 19
// InitVc ;
8515: CALL_OW 20
// hc_importance := 0 ;
8519: LD_ADDR_OWVAR 32
8523: PUSH
8524: LD_INT 0
8526: ST_TO_ADDR
// chassis := [ us_medium_wheeled , us_medium_tracked , us_medium_tracked ] ;
8527: LD_ADDR_VAR 0 7
8531: PUSH
8532: LD_INT 2
8534: PUSH
8535: LD_INT 3
8537: PUSH
8538: LD_INT 3
8540: PUSH
8541: EMPTY
8542: LIST
8543: LIST
8544: LIST
8545: ST_TO_ADDR
// if commander = 2 then
8546: LD_EXP 25
8550: PUSH
8551: LD_INT 2
8553: EQUAL
8554: IFFALSE 8575
// chassis := [ us_medium_tracked , us_heavy_tracked , us_heavy_tracked ] ;
8556: LD_ADDR_VAR 0 7
8560: PUSH
8561: LD_INT 3
8563: PUSH
8564: LD_INT 4
8566: PUSH
8567: LD_INT 4
8569: PUSH
8570: EMPTY
8571: LIST
8572: LIST
8573: LIST
8574: ST_TO_ADDR
// if commander = 3 then
8575: LD_EXP 25
8579: PUSH
8580: LD_INT 3
8582: EQUAL
8583: IFFALSE 8604
// chassis := [ us_medium_wheeled , us_morphling , us_morphling ] ;
8585: LD_ADDR_VAR 0 7
8589: PUSH
8590: LD_INT 2
8592: PUSH
8593: LD_INT 5
8595: PUSH
8596: LD_INT 5
8598: PUSH
8599: EMPTY
8600: LIST
8601: LIST
8602: LIST
8603: ST_TO_ADDR
// engines := [ engine_solar , engine_solar , engine_combustion ] ;
8604: LD_ADDR_VAR 0 8
8608: PUSH
8609: LD_INT 2
8611: PUSH
8612: LD_INT 2
8614: PUSH
8615: LD_INT 1
8617: PUSH
8618: EMPTY
8619: LIST
8620: LIST
8621: LIST
8622: ST_TO_ADDR
// if commander = 2 then
8623: LD_EXP 25
8627: PUSH
8628: LD_INT 2
8630: EQUAL
8631: IFFALSE 8652
// engines := [ engine_combustion , engine_combustion , engine_siberite ] ;
8633: LD_ADDR_VAR 0 8
8637: PUSH
8638: LD_INT 1
8640: PUSH
8641: LD_INT 1
8643: PUSH
8644: LD_INT 3
8646: PUSH
8647: EMPTY
8648: LIST
8649: LIST
8650: LIST
8651: ST_TO_ADDR
// if commander = 3 then
8652: LD_EXP 25
8656: PUSH
8657: LD_INT 3
8659: EQUAL
8660: IFFALSE 8681
// engines := [ engine_siberite , engine_siberite , engine_combustion ] ;
8662: LD_ADDR_VAR 0 8
8666: PUSH
8667: LD_INT 3
8669: PUSH
8670: LD_INT 3
8672: PUSH
8673: LD_INT 1
8675: PUSH
8676: EMPTY
8677: LIST
8678: LIST
8679: LIST
8680: ST_TO_ADDR
// weapons := [ us_double_gun , us_light_gun , us_gatling_gun ] ;
8681: LD_ADDR_VAR 0 9
8685: PUSH
8686: LD_INT 5
8688: PUSH
8689: LD_INT 3
8691: PUSH
8692: LD_INT 4
8694: PUSH
8695: EMPTY
8696: LIST
8697: LIST
8698: LIST
8699: ST_TO_ADDR
// if commander = 2 then
8700: LD_EXP 25
8704: PUSH
8705: LD_INT 2
8707: EQUAL
8708: IFFALSE 8729
// weapons := [ us_rocket_launcher , us_double_gun , us_heavy_gun ] ;
8710: LD_ADDR_VAR 0 9
8714: PUSH
8715: LD_INT 7
8717: PUSH
8718: LD_INT 5
8720: PUSH
8721: LD_INT 6
8723: PUSH
8724: EMPTY
8725: LIST
8726: LIST
8727: LIST
8728: ST_TO_ADDR
// if commander = 3 then
8729: LD_EXP 25
8733: PUSH
8734: LD_INT 3
8736: EQUAL
8737: IFFALSE 8758
// weapons := [ us_laser , us_double_laser , us_rocket_launcher ] ;
8739: LD_ADDR_VAR 0 9
8743: PUSH
8744: LD_INT 9
8746: PUSH
8747: LD_INT 10
8749: PUSH
8750: LD_INT 7
8752: PUSH
8753: EMPTY
8754: LIST
8755: LIST
8756: LIST
8757: ST_TO_ADDR
// tanks := [ 5 , 5 , 4 ] [ Difficulty ] ;
8758: LD_ADDR_VAR 0 5
8762: PUSH
8763: LD_INT 5
8765: PUSH
8766: LD_INT 5
8768: PUSH
8769: LD_INT 4
8771: PUSH
8772: EMPTY
8773: LIST
8774: LIST
8775: LIST
8776: PUSH
8777: LD_OWVAR 67
8781: ARRAY
8782: ST_TO_ADDR
// if commander = 2 then
8783: LD_EXP 25
8787: PUSH
8788: LD_INT 2
8790: EQUAL
8791: IFFALSE 8807
// tanks := tanks + 3 ;
8793: LD_ADDR_VAR 0 5
8797: PUSH
8798: LD_VAR 0 5
8802: PUSH
8803: LD_INT 3
8805: PLUS
8806: ST_TO_ADDR
// for i = 1 to tanks do
8807: LD_ADDR_VAR 0 2
8811: PUSH
8812: DOUBLE
8813: LD_INT 1
8815: DEC
8816: ST_TO_ADDR
8817: LD_VAR 0 5
8821: PUSH
8822: FOR_TO
8823: IFFALSE 8933
// begin PrepareVehicle ( chassis [ i mod 3 + 1 ] , engines [ rand ( 1 , 3 ) ] , control_manual , weapons [ i mod 3 + 1 ] , rand ( 60 , 70 ) ) ;
8825: LD_VAR 0 7
8829: PUSH
8830: LD_VAR 0 2
8834: PUSH
8835: LD_INT 3
8837: MOD
8838: PUSH
8839: LD_INT 1
8841: PLUS
8842: ARRAY
8843: PPUSH
8844: LD_VAR 0 8
8848: PUSH
8849: LD_INT 1
8851: PPUSH
8852: LD_INT 3
8854: PPUSH
8855: CALL_OW 12
8859: ARRAY
8860: PPUSH
8861: LD_INT 1
8863: PPUSH
8864: LD_VAR 0 9
8868: PUSH
8869: LD_VAR 0 2
8873: PUSH
8874: LD_INT 3
8876: MOD
8877: PUSH
8878: LD_INT 1
8880: PLUS
8881: ARRAY
8882: PPUSH
8883: LD_INT 60
8885: PPUSH
8886: LD_INT 70
8888: PPUSH
8889: CALL_OW 12
8893: PPUSH
8894: CALL 26304 0 5
// result := Replace ( result , 1 , result [ 1 ] ^ CreateVehicle ) ;
8898: LD_ADDR_VAR 0 1
8902: PUSH
8903: LD_VAR 0 1
8907: PPUSH
8908: LD_INT 1
8910: PPUSH
8911: LD_VAR 0 1
8915: PUSH
8916: LD_INT 1
8918: ARRAY
8919: PUSH
8920: CALL_OW 45
8924: ADD
8925: PPUSH
8926: CALL_OW 1
8930: ST_TO_ADDR
// end ;
8931: GO 8822
8933: POP
8934: POP
// cl := 1 ;
8935: LD_ADDR_VAR 0 6
8939: PUSH
8940: LD_INT 1
8942: ST_TO_ADDR
// for i = 1 to 10 do
8943: LD_ADDR_VAR 0 2
8947: PUSH
8948: DOUBLE
8949: LD_INT 1
8951: DEC
8952: ST_TO_ADDR
8953: LD_INT 10
8955: PUSH
8956: FOR_TO
8957: IFFALSE 9072
// begin if i mod 4 = 0 then
8959: LD_VAR 0 2
8963: PUSH
8964: LD_INT 4
8966: MOD
8967: PUSH
8968: LD_INT 0
8970: EQUAL
8971: IFFALSE 8987
// cl := cl + 1 ;
8973: LD_ADDR_VAR 0 6
8977: PUSH
8978: LD_VAR 0 6
8982: PUSH
8983: LD_INT 1
8985: PLUS
8986: ST_TO_ADDR
// if cl = 2 then
8987: LD_VAR 0 6
8991: PUSH
8992: LD_INT 2
8994: EQUAL
8995: IFFALSE 9005
// cl := 3 ;
8997: LD_ADDR_VAR 0 6
9001: PUSH
9002: LD_INT 3
9004: ST_TO_ADDR
// PrepareHuman ( false , cl , [ 6 , 6 , 5 ] [ Difficulty ] ) ;
9005: LD_INT 0
9007: PPUSH
9008: LD_VAR 0 6
9012: PPUSH
9013: LD_INT 6
9015: PUSH
9016: LD_INT 6
9018: PUSH
9019: LD_INT 5
9021: PUSH
9022: EMPTY
9023: LIST
9024: LIST
9025: LIST
9026: PUSH
9027: LD_OWVAR 67
9031: ARRAY
9032: PPUSH
9033: CALL_OW 380
// result := Replace ( result , 2 , result [ 2 ] ^ CreateHuman ) ;
9037: LD_ADDR_VAR 0 1
9041: PUSH
9042: LD_VAR 0 1
9046: PPUSH
9047: LD_INT 2
9049: PPUSH
9050: LD_VAR 0 1
9054: PUSH
9055: LD_INT 2
9057: ARRAY
9058: PUSH
9059: CALL_OW 44
9063: ADD
9064: PPUSH
9065: CALL_OW 1
9069: ST_TO_ADDR
// end ;
9070: GO 8956
9072: POP
9073: POP
// if commander = 1 then
9074: LD_EXP 25
9078: PUSH
9079: LD_INT 1
9081: EQUAL
9082: IFFALSE 9150
// for i = 1 to 4 do
9084: LD_ADDR_VAR 0 2
9088: PUSH
9089: DOUBLE
9090: LD_INT 1
9092: DEC
9093: ST_TO_ADDR
9094: LD_INT 4
9096: PUSH
9097: FOR_TO
9098: IFFALSE 9148
// begin PrepareHuman ( false , class_soldier , 8 ) ;
9100: LD_INT 0
9102: PPUSH
9103: LD_INT 1
9105: PPUSH
9106: LD_INT 8
9108: PPUSH
9109: CALL_OW 380
// result := Replace ( result , 2 , result [ 2 ] ^ CreateHuman ) ;
9113: LD_ADDR_VAR 0 1
9117: PUSH
9118: LD_VAR 0 1
9122: PPUSH
9123: LD_INT 2
9125: PPUSH
9126: LD_VAR 0 1
9130: PUSH
9131: LD_INT 2
9133: ARRAY
9134: PUSH
9135: CALL_OW 44
9139: ADD
9140: PPUSH
9141: CALL_OW 1
9145: ST_TO_ADDR
// end ;
9146: GO 9097
9148: POP
9149: POP
// techs := [ ] ;
9150: LD_ADDR_VAR 0 4
9154: PUSH
9155: EMPTY
9156: ST_TO_ADDR
// if commander = 1 then
9157: LD_EXP 25
9161: PUSH
9162: LD_INT 1
9164: EQUAL
9165: IFFALSE 9190
// techs := [ tech_weap1 , tech_weap2 , tech_weap3 , tech_lasSight ] ;
9167: LD_ADDR_VAR 0 4
9171: PUSH
9172: LD_INT 51
9174: PUSH
9175: LD_INT 52
9177: PUSH
9178: LD_INT 53
9180: PUSH
9181: LD_INT 12
9183: PUSH
9184: EMPTY
9185: LIST
9186: LIST
9187: LIST
9188: LIST
9189: ST_TO_ADDR
// if commander = 2 then
9190: LD_EXP 25
9194: PUSH
9195: LD_INT 2
9197: EQUAL
9198: IFFALSE 9235
// techs := [ tech_tech1 , tech_oilEng , tech_oilPow , tech_solEng , tech_solPow , tech_opto1 , tech_radar ] ;
9200: LD_ADDR_VAR 0 4
9204: PUSH
9205: LD_INT 48
9207: PUSH
9208: LD_INT 47
9210: PUSH
9211: LD_INT 46
9213: PUSH
9214: LD_INT 45
9216: PUSH
9217: LD_INT 35
9219: PUSH
9220: LD_INT 60
9222: PUSH
9223: LD_INT 6
9225: PUSH
9226: EMPTY
9227: LIST
9228: LIST
9229: LIST
9230: LIST
9231: LIST
9232: LIST
9233: LIST
9234: ST_TO_ADDR
// if commander = 3 then
9235: LD_EXP 25
9239: PUSH
9240: LD_INT 3
9242: EQUAL
9243: IFFALSE 9292
// techs := [ tech_advAI , tech_advchassis , tech_ai , tech_comp1 , tech_comp2 , tech_oilEng , tech_oilPow , tech_weap1 , tech_gatling , tech_gun ] ;
9245: LD_ADDR_VAR 0 4
9249: PUSH
9250: LD_INT 27
9252: PUSH
9253: LD_INT 36
9255: PUSH
9256: LD_INT 32
9258: PUSH
9259: LD_INT 57
9261: PUSH
9262: LD_INT 58
9264: PUSH
9265: LD_INT 47
9267: PUSH
9268: LD_INT 46
9270: PUSH
9271: LD_INT 51
9273: PUSH
9274: LD_INT 69
9276: PUSH
9277: LD_INT 39
9279: PUSH
9280: EMPTY
9281: LIST
9282: LIST
9283: LIST
9284: LIST
9285: LIST
9286: LIST
9287: LIST
9288: LIST
9289: LIST
9290: LIST
9291: ST_TO_ADDR
// if techs then
9292: LD_VAR 0 4
9296: IFFALSE 9330
// for i in techs do
9298: LD_ADDR_VAR 0 2
9302: PUSH
9303: LD_VAR 0 4
9307: PUSH
9308: FOR_IN
9309: IFFALSE 9328
// SetTech ( i , 1 , state_researched ) ;
9311: LD_VAR 0 2
9315: PPUSH
9316: LD_INT 1
9318: PPUSH
9319: LD_INT 2
9321: PPUSH
9322: CALL_OW 322
9326: GO 9308
9328: POP
9329: POP
// hc_gallery := skirmish ;
9330: LD_ADDR_OWVAR 33
9334: PUSH
9335: LD_STRING skirmish
9337: ST_TO_ADDR
// hc_face_number := commander ;
9338: LD_ADDR_OWVAR 34
9342: PUSH
9343: LD_EXP 25
9347: ST_TO_ADDR
// hc_importance := 100 ;
9348: LD_ADDR_OWVAR 32
9352: PUSH
9353: LD_INT 100
9355: ST_TO_ADDR
// case commander of 1 :
9356: LD_EXP 25
9360: PUSH
9361: LD_INT 1
9363: DOUBLE
9364: EQUAL
9365: IFTRUE 9369
9367: GO 9393
9369: POP
// begin hc_name := Jeff Ironside ;
9370: LD_ADDR_OWVAR 26
9374: PUSH
9375: LD_STRING Jeff Ironside
9377: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 7 ) ;
9378: LD_INT 1
9380: PPUSH
9381: LD_INT 1
9383: PPUSH
9384: LD_INT 7
9386: PPUSH
9387: CALL_OW 380
// end ; 2 :
9391: GO 9458
9393: LD_INT 2
9395: DOUBLE
9396: EQUAL
9397: IFTRUE 9401
9399: GO 9425
9401: POP
// begin hc_name := Paul Johnson ;
9402: LD_ADDR_OWVAR 26
9406: PUSH
9407: LD_STRING Paul Johnson
9409: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 7 ) ;
9410: LD_INT 1
9412: PPUSH
9413: LD_INT 3
9415: PPUSH
9416: LD_INT 7
9418: PPUSH
9419: CALL_OW 380
// end ; 3 :
9423: GO 9458
9425: LD_INT 3
9427: DOUBLE
9428: EQUAL
9429: IFTRUE 9433
9431: GO 9457
9433: POP
// begin hc_name := Lisa Stuart ;
9434: LD_ADDR_OWVAR 26
9438: PUSH
9439: LD_STRING Lisa Stuart
9441: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , 7 ) ;
9442: LD_INT 2
9444: PPUSH
9445: LD_INT 4
9447: PPUSH
9448: LD_INT 7
9450: PPUSH
9451: CALL_OW 380
// end ; end ;
9455: GO 9458
9457: POP
// playerCommander := CreateHuman ;
9458: LD_ADDR_EXP 9
9462: PUSH
9463: CALL_OW 44
9467: ST_TO_ADDR
// hc_importance := 0 ;
9468: LD_ADDR_OWVAR 32
9472: PUSH
9473: LD_INT 0
9475: ST_TO_ADDR
// hc_gallery :=  ;
9476: LD_ADDR_OWVAR 33
9480: PUSH
9481: LD_STRING 
9483: ST_TO_ADDR
// result := Replace ( result , 2 , result [ 2 ] ^ playerCommander ) ;
9484: LD_ADDR_VAR 0 1
9488: PUSH
9489: LD_VAR 0 1
9493: PPUSH
9494: LD_INT 2
9496: PPUSH
9497: LD_VAR 0 1
9501: PUSH
9502: LD_INT 2
9504: ARRAY
9505: PUSH
9506: LD_EXP 9
9510: ADD
9511: PPUSH
9512: CALL_OW 1
9516: ST_TO_ADDR
// end ;
9517: LD_VAR 0 1
9521: RET
// export function PrepareReinforcements ; var i , peopleAmount , tmp , un , veh ; begin
9522: LD_INT 0
9524: PPUSH
9525: PPUSH
9526: PPUSH
9527: PPUSH
9528: PPUSH
9529: PPUSH
// uc_side := 1 ;
9530: LD_ADDR_OWVAR 20
9534: PUSH
9535: LD_INT 1
9537: ST_TO_ADDR
// uc_nation := 1 ;
9538: LD_ADDR_OWVAR 21
9542: PUSH
9543: LD_INT 1
9545: ST_TO_ADDR
// InitHc ;
9546: CALL_OW 19
// peopleAmount := [ 3 , 3 , 2 ] [ Difficulty ] ;
9550: LD_ADDR_VAR 0 3
9554: PUSH
9555: LD_INT 3
9557: PUSH
9558: LD_INT 3
9560: PUSH
9561: LD_INT 2
9563: PUSH
9564: EMPTY
9565: LIST
9566: LIST
9567: LIST
9568: PUSH
9569: LD_OWVAR 67
9573: ARRAY
9574: ST_TO_ADDR
// for i = 1 to peopleAmount do
9575: LD_ADDR_VAR 0 2
9579: PUSH
9580: DOUBLE
9581: LD_INT 1
9583: DEC
9584: ST_TO_ADDR
9585: LD_VAR 0 3
9589: PUSH
9590: FOR_TO
9591: IFFALSE 9640
// begin PrepareHuman ( false , 2 , [ 7 , 6 , 5 ] [ Difficulty ] ) ;
9593: LD_INT 0
9595: PPUSH
9596: LD_INT 2
9598: PPUSH
9599: LD_INT 7
9601: PUSH
9602: LD_INT 6
9604: PUSH
9605: LD_INT 5
9607: PUSH
9608: EMPTY
9609: LIST
9610: LIST
9611: LIST
9612: PUSH
9613: LD_OWVAR 67
9617: ARRAY
9618: PPUSH
9619: CALL_OW 380
// PlaceUnitInArea ( CreateHuman , startArea , false ) ;
9623: CALL_OW 44
9627: PPUSH
9628: LD_INT 19
9630: PPUSH
9631: LD_INT 0
9633: PPUSH
9634: CALL 60963 0 3
// end ;
9638: GO 9590
9640: POP
9641: POP
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_computer , us_crane , 58 ) ;
9642: LD_INT 2
9644: PPUSH
9645: LD_INT 1
9647: PPUSH
9648: LD_INT 3
9650: PPUSH
9651: LD_INT 13
9653: PPUSH
9654: LD_INT 58
9656: PPUSH
9657: CALL 26304 0 5
// PlaceUnitInArea ( CreateVehicle , startArea , false ) ;
9661: CALL_OW 45
9665: PPUSH
9666: LD_INT 19
9668: PPUSH
9669: LD_INT 0
9671: PPUSH
9672: CALL 60963 0 3
// if commander = 1 then
9676: LD_EXP 25
9680: PUSH
9681: LD_INT 1
9683: EQUAL
9684: IFFALSE 9695
// wait ( 6 6$00 ) else
9686: LD_INT 12600
9688: PPUSH
9689: CALL_OW 67
9693: GO 9702
// wait ( 8 8$00 ) ;
9695: LD_INT 16800
9697: PPUSH
9698: CALL_OW 67
// uc_side := 1 ;
9702: LD_ADDR_OWVAR 20
9706: PUSH
9707: LD_INT 1
9709: ST_TO_ADDR
// uc_nation := 1 ;
9710: LD_ADDR_OWVAR 21
9714: PUSH
9715: LD_INT 1
9717: ST_TO_ADDR
// InitVc ;
9718: CALL_OW 20
// InitHc ;
9722: CALL_OW 19
// for i = 1 to 5 do
9726: LD_ADDR_VAR 0 2
9730: PUSH
9731: DOUBLE
9732: LD_INT 1
9734: DEC
9735: ST_TO_ADDR
9736: LD_INT 5
9738: PUSH
9739: FOR_TO
9740: IFFALSE 9984
// begin PrepareVehicle ( [ us_heavy_tracked , us_medium_tracked , us_light_wheeled ] [ i mod 3 + 1 ] , engine_combustion , [ control_manual , control_computer , control_computer ] [ i mod 3 + 1 ] , [ us_heavy_gun , us_cargo_bay , us_radar ] [ i mod 3 + 1 ] , rand ( 40 , 55 ) ) ;
9742: LD_INT 4
9744: PUSH
9745: LD_INT 3
9747: PUSH
9748: LD_INT 1
9750: PUSH
9751: EMPTY
9752: LIST
9753: LIST
9754: LIST
9755: PUSH
9756: LD_VAR 0 2
9760: PUSH
9761: LD_INT 3
9763: MOD
9764: PUSH
9765: LD_INT 1
9767: PLUS
9768: ARRAY
9769: PPUSH
9770: LD_INT 1
9772: PPUSH
9773: LD_INT 1
9775: PUSH
9776: LD_INT 3
9778: PUSH
9779: LD_INT 3
9781: PUSH
9782: EMPTY
9783: LIST
9784: LIST
9785: LIST
9786: PUSH
9787: LD_VAR 0 2
9791: PUSH
9792: LD_INT 3
9794: MOD
9795: PUSH
9796: LD_INT 1
9798: PLUS
9799: ARRAY
9800: PPUSH
9801: LD_INT 6
9803: PUSH
9804: LD_INT 12
9806: PUSH
9807: LD_INT 11
9809: PUSH
9810: EMPTY
9811: LIST
9812: LIST
9813: LIST
9814: PUSH
9815: LD_VAR 0 2
9819: PUSH
9820: LD_INT 3
9822: MOD
9823: PUSH
9824: LD_INT 1
9826: PLUS
9827: ARRAY
9828: PPUSH
9829: LD_INT 40
9831: PPUSH
9832: LD_INT 55
9834: PPUSH
9835: CALL_OW 12
9839: PPUSH
9840: CALL 26304 0 5
// veh := CreateVehicle ;
9844: LD_ADDR_VAR 0 6
9848: PUSH
9849: CALL_OW 45
9853: ST_TO_ADDR
// PlaceUnitInArea ( veh , startArea , false ) ;
9854: LD_VAR 0 6
9858: PPUSH
9859: LD_INT 19
9861: PPUSH
9862: LD_INT 0
9864: PPUSH
9865: CALL 60963 0 3
// if GetWeapon ( veh ) = us_cargo_bay then
9869: LD_VAR 0 6
9873: PPUSH
9874: CALL_OW 264
9878: PUSH
9879: LD_INT 12
9881: EQUAL
9882: IFFALSE 9914
// begin AddCargo ( veh , mat_cans , 70 ) ;
9884: LD_VAR 0 6
9888: PPUSH
9889: LD_INT 1
9891: PPUSH
9892: LD_INT 70
9894: PPUSH
9895: CALL_OW 291
// AddCargo ( veh , mat_siberit , 30 ) ;
9899: LD_VAR 0 6
9903: PPUSH
9904: LD_INT 3
9906: PPUSH
9907: LD_INT 30
9909: PPUSH
9910: CALL_OW 291
// end ; if GetControl ( veh ) = control_manual then
9914: LD_VAR 0 6
9918: PPUSH
9919: CALL_OW 263
9923: PUSH
9924: LD_INT 1
9926: EQUAL
9927: IFFALSE 9982
// begin PrepareHuman ( sex_male , 3 , 6 ) ;
9929: LD_INT 1
9931: PPUSH
9932: LD_INT 3
9934: PPUSH
9935: LD_INT 6
9937: PPUSH
9938: CALL_OW 380
// un := CreateHuman ;
9942: LD_ADDR_VAR 0 5
9946: PUSH
9947: CALL_OW 44
9951: ST_TO_ADDR
// tmp := tmp ^ un ;
9952: LD_ADDR_VAR 0 4
9956: PUSH
9957: LD_VAR 0 4
9961: PUSH
9962: LD_VAR 0 5
9966: ADD
9967: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9968: LD_VAR 0 5
9972: PPUSH
9973: LD_VAR 0 6
9977: PPUSH
9978: CALL_OW 52
// end ; end ;
9982: GO 9739
9984: POP
9985: POP
// if tmp then
9986: LD_VAR 0 4
9990: IFFALSE 10054
// begin CenterNowOnUnits ( tmp ) ;
9992: LD_VAR 0 4
9996: PPUSH
9997: CALL_OW 87
// Say ( tmp [ 1 ] , DAR-1 ) ;
10001: LD_VAR 0 4
10005: PUSH
10006: LD_INT 1
10008: ARRAY
10009: PPUSH
10010: LD_STRING DAR-1
10012: PPUSH
10013: CALL_OW 88
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-DAR ) ;
10017: LD_EXP 9
10021: PPUSH
10022: LD_STRING D
10024: PUSH
10025: LD_STRING I
10027: PUSH
10028: LD_STRING J
10030: PUSH
10031: LD_STRING S
10033: PUSH
10034: EMPTY
10035: LIST
10036: LIST
10037: LIST
10038: PUSH
10039: LD_EXP 25
10043: ARRAY
10044: STR
10045: PUSH
10046: LD_STRING -1-DAR
10048: STR
10049: PPUSH
10050: CALL_OW 88
// end ; if not reinforceAllowed then
10054: LD_EXP 24
10058: NOT
10059: IFFALSE 10063
// exit ;
10061: GO 10217
// wait ( 25 25$00 ) ;
10063: LD_INT 52500
10065: PPUSH
10066: CALL_OW 67
// uc_side := 1 ;
10070: LD_ADDR_OWVAR 20
10074: PUSH
10075: LD_INT 1
10077: ST_TO_ADDR
// uc_nation := 1 ;
10078: LD_ADDR_OWVAR 21
10082: PUSH
10083: LD_INT 1
10085: ST_TO_ADDR
// InitVc ;
10086: CALL_OW 20
// InitHc ;
10090: CALL_OW 19
// for i = 1 to 4 do
10094: LD_ADDR_VAR 0 2
10098: PUSH
10099: DOUBLE
10100: LD_INT 1
10102: DEC
10103: ST_TO_ADDR
10104: LD_INT 4
10106: PUSH
10107: FOR_TO
10108: IFFALSE 10215
// begin PrepareVehicle ( us_morphling , engine_siberite , control_manual , us_heavy_gun , 1 ) ;
10110: LD_INT 5
10112: PPUSH
10113: LD_INT 3
10115: PPUSH
10116: LD_INT 1
10118: PPUSH
10119: LD_INT 6
10121: PPUSH
10122: LD_INT 1
10124: PPUSH
10125: CALL 26304 0 5
// veh := CreateVehicle ;
10129: LD_ADDR_VAR 0 6
10133: PUSH
10134: CALL_OW 45
10138: ST_TO_ADDR
// PlaceUnitInArea ( veh , startArea , false ) ;
10139: LD_VAR 0 6
10143: PPUSH
10144: LD_INT 19
10146: PPUSH
10147: LD_INT 0
10149: PPUSH
10150: CALL 60963 0 3
// if GetControl ( veh ) = control_manual then
10154: LD_VAR 0 6
10158: PPUSH
10159: CALL_OW 263
10163: PUSH
10164: LD_INT 1
10166: EQUAL
10167: IFFALSE 10213
// begin PrepareHuman ( false , 3 , [ 7 , 6 , 5 ] [ Difficulty ] ) ;
10169: LD_INT 0
10171: PPUSH
10172: LD_INT 3
10174: PPUSH
10175: LD_INT 7
10177: PUSH
10178: LD_INT 6
10180: PUSH
10181: LD_INT 5
10183: PUSH
10184: EMPTY
10185: LIST
10186: LIST
10187: LIST
10188: PUSH
10189: LD_OWVAR 67
10193: ARRAY
10194: PPUSH
10195: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
10199: CALL_OW 44
10203: PPUSH
10204: LD_VAR 0 6
10208: PPUSH
10209: CALL_OW 52
// end ; end ;
10213: GO 10107
10215: POP
10216: POP
// end ;
10217: LD_VAR 0 1
10221: RET
// export function PrepareLegionReinforcements ; var i , un , j , tmp ; begin
10222: LD_INT 0
10224: PPUSH
10225: PPUSH
10226: PPUSH
10227: PPUSH
10228: PPUSH
// uc_side := 8 ;
10229: LD_ADDR_OWVAR 20
10233: PUSH
10234: LD_INT 8
10236: ST_TO_ADDR
// uc_nation := nation_arabian ;
10237: LD_ADDR_OWVAR 21
10241: PUSH
10242: LD_INT 2
10244: ST_TO_ADDR
// for i = 1 to 2 do
10245: LD_ADDR_VAR 0 2
10249: PUSH
10250: DOUBLE
10251: LD_INT 1
10253: DEC
10254: ST_TO_ADDR
10255: LD_INT 2
10257: PUSH
10258: FOR_TO
10259: IFFALSE 10339
// for j = 1 to 4 do
10261: LD_ADDR_VAR 0 4
10265: PUSH
10266: DOUBLE
10267: LD_INT 1
10269: DEC
10270: ST_TO_ADDR
10271: LD_INT 4
10273: PUSH
10274: FOR_TO
10275: IFFALSE 10335
// begin PrepareHuman ( false , j , 8 ) ;
10277: LD_INT 0
10279: PPUSH
10280: LD_VAR 0 4
10284: PPUSH
10285: LD_INT 8
10287: PPUSH
10288: CALL_OW 380
// un := CreateHuman ;
10292: LD_ADDR_VAR 0 3
10296: PUSH
10297: CALL_OW 44
10301: ST_TO_ADDR
// PlaceUnitArea ( un , legionSpawn , false ) ;
10302: LD_VAR 0 3
10306: PPUSH
10307: LD_INT 23
10309: PPUSH
10310: LD_INT 0
10312: PPUSH
10313: CALL_OW 49
// tmp := tmp union un ;
10317: LD_ADDR_VAR 0 5
10321: PUSH
10322: LD_VAR 0 5
10326: PUSH
10327: LD_VAR 0 3
10331: UNION
10332: ST_TO_ADDR
// end ;
10333: GO 10274
10335: POP
10336: POP
10337: GO 10258
10339: POP
10340: POP
// for i in tmp do
10341: LD_ADDR_VAR 0 2
10345: PUSH
10346: LD_VAR 0 5
10350: PUSH
10351: FOR_IN
10352: IFFALSE 10371
// ComMoveXY ( i , 150 , 136 ) ;
10354: LD_VAR 0 2
10358: PPUSH
10359: LD_INT 150
10361: PPUSH
10362: LD_INT 136
10364: PPUSH
10365: CALL_OW 111
10369: GO 10351
10371: POP
10372: POP
// mc_bases := Replace ( mc_bases , mc_leg , mc_bases [ mc_leg ] union tmp ) ;
10373: LD_ADDR_EXP 36
10377: PUSH
10378: LD_EXP 36
10382: PPUSH
10383: LD_EXP 6
10387: PPUSH
10388: LD_EXP 36
10392: PUSH
10393: LD_EXP 6
10397: ARRAY
10398: PUSH
10399: LD_VAR 0 5
10403: UNION
10404: PPUSH
10405: CALL_OW 1
10409: ST_TO_ADDR
// end ;
10410: LD_VAR 0 1
10414: RET
// every 0 0$10 trigger Difficulty > 1 and GetTech ( tech_lapser , 3 ) = state_researched do
10415: LD_OWVAR 67
10419: PUSH
10420: LD_INT 1
10422: GREATER
10423: PUSH
10424: LD_INT 31
10426: PPUSH
10427: LD_INT 3
10429: PPUSH
10430: CALL_OW 321
10434: PUSH
10435: LD_INT 2
10437: EQUAL
10438: AND
10439: IFFALSE 10656
10441: GO 10443
10443: DISABLE
// begin MC_InsertBuildingList ( mc_rus_1 , [ [ b_turret , 101 , 159 , 5 ] , [ b_turret , 105 , 158 , 5 ] , [ b_turret , 96 , 136 , 5 ] , [ b_turret , 94 , 133 , 4 ] , [ b_turret , 84 , 102 , 4 ] ] ) ;
10444: LD_EXP 7
10448: PPUSH
10449: LD_INT 33
10451: PUSH
10452: LD_INT 101
10454: PUSH
10455: LD_INT 159
10457: PUSH
10458: LD_INT 5
10460: PUSH
10461: EMPTY
10462: LIST
10463: LIST
10464: LIST
10465: LIST
10466: PUSH
10467: LD_INT 33
10469: PUSH
10470: LD_INT 105
10472: PUSH
10473: LD_INT 158
10475: PUSH
10476: LD_INT 5
10478: PUSH
10479: EMPTY
10480: LIST
10481: LIST
10482: LIST
10483: LIST
10484: PUSH
10485: LD_INT 33
10487: PUSH
10488: LD_INT 96
10490: PUSH
10491: LD_INT 136
10493: PUSH
10494: LD_INT 5
10496: PUSH
10497: EMPTY
10498: LIST
10499: LIST
10500: LIST
10501: LIST
10502: PUSH
10503: LD_INT 33
10505: PUSH
10506: LD_INT 94
10508: PUSH
10509: LD_INT 133
10511: PUSH
10512: LD_INT 4
10514: PUSH
10515: EMPTY
10516: LIST
10517: LIST
10518: LIST
10519: LIST
10520: PUSH
10521: LD_INT 33
10523: PUSH
10524: LD_INT 84
10526: PUSH
10527: LD_INT 102
10529: PUSH
10530: LD_INT 4
10532: PUSH
10533: EMPTY
10534: LIST
10535: LIST
10536: LIST
10537: LIST
10538: PUSH
10539: EMPTY
10540: LIST
10541: LIST
10542: LIST
10543: LIST
10544: LIST
10545: PPUSH
10546: CALL 85870 0 2
// MC_InsertBuildingList ( mc_rus_2 , [ [ b_turret , 50 , 17 , 4 ] , [ b_turret , 52 , 20 , 4 ] , [ b_turret , 53 , 23 , 4 ] , [ b_turret , 45 , 32 , 4 ] , [ b_turret , 45 , 39 , 4 ] ] ) ;
10550: LD_EXP 8
10554: PPUSH
10555: LD_INT 33
10557: PUSH
10558: LD_INT 50
10560: PUSH
10561: LD_INT 17
10563: PUSH
10564: LD_INT 4
10566: PUSH
10567: EMPTY
10568: LIST
10569: LIST
10570: LIST
10571: LIST
10572: PUSH
10573: LD_INT 33
10575: PUSH
10576: LD_INT 52
10578: PUSH
10579: LD_INT 20
10581: PUSH
10582: LD_INT 4
10584: PUSH
10585: EMPTY
10586: LIST
10587: LIST
10588: LIST
10589: LIST
10590: PUSH
10591: LD_INT 33
10593: PUSH
10594: LD_INT 53
10596: PUSH
10597: LD_INT 23
10599: PUSH
10600: LD_INT 4
10602: PUSH
10603: EMPTY
10604: LIST
10605: LIST
10606: LIST
10607: LIST
10608: PUSH
10609: LD_INT 33
10611: PUSH
10612: LD_INT 45
10614: PUSH
10615: LD_INT 32
10617: PUSH
10618: LD_INT 4
10620: PUSH
10621: EMPTY
10622: LIST
10623: LIST
10624: LIST
10625: LIST
10626: PUSH
10627: LD_INT 33
10629: PUSH
10630: LD_INT 45
10632: PUSH
10633: LD_INT 39
10635: PUSH
10636: LD_INT 4
10638: PUSH
10639: EMPTY
10640: LIST
10641: LIST
10642: LIST
10643: LIST
10644: PUSH
10645: EMPTY
10646: LIST
10647: LIST
10648: LIST
10649: LIST
10650: LIST
10651: PPUSH
10652: CALL 85870 0 2
// end ; end_of_file
10656: END
// export function Action ; var i , tmp ; begin
10657: LD_INT 0
10659: PPUSH
10660: PPUSH
10661: PPUSH
// InGameOn ;
10662: CALL_OW 8
// CenterNowOnXY ( 225 , 217 ) ;
10666: LD_INT 225
10668: PPUSH
10669: LD_INT 217
10671: PPUSH
10672: CALL_OW 86
// for i in playerForces [ 2 ] do
10676: LD_ADDR_VAR 0 2
10680: PUSH
10681: LD_EXP 10
10685: PUSH
10686: LD_INT 2
10688: ARRAY
10689: PUSH
10690: FOR_IN
10691: IFFALSE 10824
// begin if playerForces [ 1 ] and GetClass ( i ) in [ 3 , 4 ] then
10693: LD_EXP 10
10697: PUSH
10698: LD_INT 1
10700: ARRAY
10701: PUSH
10702: LD_VAR 0 2
10706: PPUSH
10707: CALL_OW 257
10711: PUSH
10712: LD_INT 3
10714: PUSH
10715: LD_INT 4
10717: PUSH
10718: EMPTY
10719: LIST
10720: LIST
10721: IN
10722: AND
10723: IFFALSE 10807
// begin PlaceUnitInArea ( playerForces [ 1 ] [ 1 ] , startArea , false ) ;
10725: LD_EXP 10
10729: PUSH
10730: LD_INT 1
10732: ARRAY
10733: PUSH
10734: LD_INT 1
10736: ARRAY
10737: PPUSH
10738: LD_INT 19
10740: PPUSH
10741: LD_INT 0
10743: PPUSH
10744: CALL 60963 0 3
// PlaceHumanInUnit ( i , playerForces [ 1 ] [ 1 ] ) ;
10748: LD_VAR 0 2
10752: PPUSH
10753: LD_EXP 10
10757: PUSH
10758: LD_INT 1
10760: ARRAY
10761: PUSH
10762: LD_INT 1
10764: ARRAY
10765: PPUSH
10766: CALL_OW 52
// playerForces := Replace ( playerForces , 1 , Delete ( playerForces [ 1 ] , 1 ) ) ;
10770: LD_ADDR_EXP 10
10774: PUSH
10775: LD_EXP 10
10779: PPUSH
10780: LD_INT 1
10782: PPUSH
10783: LD_EXP 10
10787: PUSH
10788: LD_INT 1
10790: ARRAY
10791: PPUSH
10792: LD_INT 1
10794: PPUSH
10795: CALL_OW 3
10799: PPUSH
10800: CALL_OW 1
10804: ST_TO_ADDR
// end else
10805: GO 10822
// PlaceUnitInArea ( i , startArea , false ) ;
10807: LD_VAR 0 2
10811: PPUSH
10812: LD_INT 19
10814: PPUSH
10815: LD_INT 0
10817: PPUSH
10818: CALL 60963 0 3
// end ;
10822: GO 10690
10824: POP
10825: POP
// wait ( 0 0$2 ) ;
10826: LD_INT 70
10828: PPUSH
10829: CALL_OW 67
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1 ) ;
10833: LD_EXP 9
10837: PPUSH
10838: LD_STRING D
10840: PUSH
10841: LD_STRING I
10843: PUSH
10844: LD_STRING J
10846: PUSH
10847: LD_STRING S
10849: PUSH
10850: EMPTY
10851: LIST
10852: LIST
10853: LIST
10854: PUSH
10855: LD_EXP 25
10859: ARRAY
10860: STR
10861: PUSH
10862: LD_STRING -1
10864: STR
10865: PPUSH
10866: CALL_OW 88
// SayRadio ( Powell , DP-1 ) ;
10870: LD_EXP 12
10874: PPUSH
10875: LD_STRING DP-1
10877: PPUSH
10878: CALL_OW 94
// SayRadio ( Powell , DP-2 ) ;
10882: LD_EXP 12
10886: PPUSH
10887: LD_STRING DP-2
10889: PPUSH
10890: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -2 ) ;
10894: LD_EXP 9
10898: PPUSH
10899: LD_STRING D
10901: PUSH
10902: LD_STRING I
10904: PUSH
10905: LD_STRING J
10907: PUSH
10908: LD_STRING S
10910: PUSH
10911: EMPTY
10912: LIST
10913: LIST
10914: LIST
10915: PUSH
10916: LD_EXP 25
10920: ARRAY
10921: STR
10922: PUSH
10923: LD_STRING -2
10925: STR
10926: PPUSH
10927: CALL_OW 88
// InGameOff ;
10931: CALL_OW 9
// ChangeMissionObjectives ( O1 ) ;
10935: LD_STRING O1
10937: PPUSH
10938: CALL_OW 337
// game := true ;
10942: LD_ADDR_EXP 3
10946: PUSH
10947: LD_INT 1
10949: ST_TO_ADDR
// SaveForQuickRestart ;
10950: CALL_OW 22
// wait ( 0 0$5 ) ;
10954: LD_INT 175
10956: PPUSH
10957: CALL_OW 67
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -3 ) ;
10961: LD_EXP 9
10965: PPUSH
10966: LD_STRING D
10968: PUSH
10969: LD_STRING I
10971: PUSH
10972: LD_STRING J
10974: PUSH
10975: LD_STRING S
10977: PUSH
10978: EMPTY
10979: LIST
10980: LIST
10981: LIST
10982: PUSH
10983: LD_EXP 25
10987: ARRAY
10988: STR
10989: PUSH
10990: LD_STRING -3
10992: STR
10993: PPUSH
10994: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
10998: LD_INT 35
11000: PPUSH
11001: CALL_OW 67
// until ruEscape [ 1 ] >= ruEscape [ 2 ] ;
11005: LD_EXP 15
11009: PUSH
11010: LD_INT 1
11012: ARRAY
11013: PUSH
11014: LD_EXP 15
11018: PUSH
11019: LD_INT 2
11021: ARRAY
11022: GREATEREQUAL
11023: IFFALSE 10998
// outpostEscape := true ;
11025: LD_ADDR_EXP 27
11029: PUSH
11030: LD_INT 1
11032: ST_TO_ADDR
// tmp := UnitFilter ( ruOutpost , [ f_sex , sex_male ] ) ;
11033: LD_ADDR_VAR 0 3
11037: PUSH
11038: LD_EXP 14
11042: PPUSH
11043: LD_INT 26
11045: PUSH
11046: LD_INT 1
11048: PUSH
11049: EMPTY
11050: LIST
11051: LIST
11052: PPUSH
11053: CALL_OW 72
11057: ST_TO_ADDR
// if tmp then
11058: LD_VAR 0 3
11062: IFFALSE 11080
// Say ( tmp [ 1 ] , DR-1-Escape ) ;
11064: LD_VAR 0 3
11068: PUSH
11069: LD_INT 1
11071: ARRAY
11072: PPUSH
11073: LD_STRING DR-1-Escape
11075: PPUSH
11076: CALL_OW 88
// wait ( 0 0$1 ) ;
11080: LD_INT 35
11082: PPUSH
11083: CALL_OW 67
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Escape ) ;
11087: LD_EXP 9
11091: PPUSH
11092: LD_STRING D
11094: PUSH
11095: LD_STRING I
11097: PUSH
11098: LD_STRING J
11100: PUSH
11101: LD_STRING S
11103: PUSH
11104: EMPTY
11105: LIST
11106: LIST
11107: LIST
11108: PUSH
11109: LD_EXP 25
11113: ARRAY
11114: STR
11115: PUSH
11116: LD_STRING -1-Escape
11118: STR
11119: PPUSH
11120: CALL_OW 88
// for i in ruOutpost do
11124: LD_ADDR_VAR 0 2
11128: PUSH
11129: LD_EXP 14
11133: PUSH
11134: FOR_IN
11135: IFFALSE 11189
// begin if IsInUnit ( i ) then
11137: LD_VAR 0 2
11141: PPUSH
11142: CALL_OW 310
11146: IFFALSE 11157
// ComExitBuilding ( i ) ;
11148: LD_VAR 0 2
11152: PPUSH
11153: CALL_OW 122
// AddComMoveXY ( i , 179 , 102 ) ;
11157: LD_VAR 0 2
11161: PPUSH
11162: LD_INT 179
11164: PPUSH
11165: LD_INT 102
11167: PPUSH
11168: CALL_OW 171
// AddComMoveXY ( i , 28 , 20 ) ;
11172: LD_VAR 0 2
11176: PPUSH
11177: LD_INT 28
11179: PPUSH
11180: LD_INT 20
11182: PPUSH
11183: CALL_OW 171
// end ;
11187: GO 11134
11189: POP
11190: POP
// tmp := [ ] ;
11191: LD_ADDR_VAR 0 3
11195: PUSH
11196: EMPTY
11197: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11198: LD_INT 35
11200: PPUSH
11201: CALL_OW 67
// tmp := UnitFilter ( ruOutpost , [ f_inarea , rus2Base ] ) ;
11205: LD_ADDR_VAR 0 3
11209: PUSH
11210: LD_EXP 14
11214: PPUSH
11215: LD_INT 95
11217: PUSH
11218: LD_INT 11
11220: PUSH
11221: EMPTY
11222: LIST
11223: LIST
11224: PPUSH
11225: CALL_OW 72
11229: ST_TO_ADDR
// if tmp then
11230: LD_VAR 0 3
11234: IFFALSE 11313
// for i in tmp do
11236: LD_ADDR_VAR 0 2
11240: PUSH
11241: LD_VAR 0 3
11245: PUSH
11246: FOR_IN
11247: IFFALSE 11311
// begin ruOutpost := ruOutpost diff i ;
11249: LD_ADDR_EXP 14
11253: PUSH
11254: LD_EXP 14
11258: PUSH
11259: LD_VAR 0 2
11263: DIFF
11264: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ mc_rus_2 , mc_bases [ mc_rus_2 ] + 1 ] , i ) ;
11265: LD_ADDR_EXP 36
11269: PUSH
11270: LD_EXP 36
11274: PPUSH
11275: LD_EXP 8
11279: PUSH
11280: LD_EXP 36
11284: PUSH
11285: LD_EXP 8
11289: ARRAY
11290: PUSH
11291: LD_INT 1
11293: PLUS
11294: PUSH
11295: EMPTY
11296: LIST
11297: LIST
11298: PPUSH
11299: LD_VAR 0 2
11303: PPUSH
11304: CALL 26426 0 3
11308: ST_TO_ADDR
// end ;
11309: GO 11246
11311: POP
11312: POP
// until not UnitFilter ( ruOutpost , [ f_type , unit_human ] ) ;
11313: LD_EXP 14
11317: PPUSH
11318: LD_INT 21
11320: PUSH
11321: LD_INT 1
11323: PUSH
11324: EMPTY
11325: LIST
11326: LIST
11327: PPUSH
11328: CALL_OW 72
11332: NOT
11333: IFFALSE 11198
// ruOutpost := [ ] ;
11335: LD_ADDR_EXP 14
11339: PUSH
11340: EMPTY
11341: ST_TO_ADDR
// end ;
11342: LD_VAR 0 1
11346: RET
// every 0 0$1 trigger outpostEscape do var i , tmp ;
11347: LD_EXP 27
11351: IFFALSE 11540
11353: GO 11355
11355: DISABLE
11356: LD_INT 0
11358: PPUSH
11359: PPUSH
// begin wait ( rand ( 0 0$25 , 0 0$35 ) ) ;
11360: LD_INT 875
11362: PPUSH
11363: LD_INT 1225
11365: PPUSH
11366: CALL_OW 12
11370: PPUSH
11371: CALL_OW 67
// tmp := [ [ 208 , 166 ] , [ 218 , 174 ] , [ 201 , 173 ] , [ 189 , 167 ] , [ 191 , 160 ] , [ 209 , 181 ] , [ 192 , 162 ] , [ 197 , 166 ] ] ;
11375: LD_ADDR_VAR 0 2
11379: PUSH
11380: LD_INT 208
11382: PUSH
11383: LD_INT 166
11385: PUSH
11386: EMPTY
11387: LIST
11388: LIST
11389: PUSH
11390: LD_INT 218
11392: PUSH
11393: LD_INT 174
11395: PUSH
11396: EMPTY
11397: LIST
11398: LIST
11399: PUSH
11400: LD_INT 201
11402: PUSH
11403: LD_INT 173
11405: PUSH
11406: EMPTY
11407: LIST
11408: LIST
11409: PUSH
11410: LD_INT 189
11412: PUSH
11413: LD_INT 167
11415: PUSH
11416: EMPTY
11417: LIST
11418: LIST
11419: PUSH
11420: LD_INT 191
11422: PUSH
11423: LD_INT 160
11425: PUSH
11426: EMPTY
11427: LIST
11428: LIST
11429: PUSH
11430: LD_INT 209
11432: PUSH
11433: LD_INT 181
11435: PUSH
11436: EMPTY
11437: LIST
11438: LIST
11439: PUSH
11440: LD_INT 192
11442: PUSH
11443: LD_INT 162
11445: PUSH
11446: EMPTY
11447: LIST
11448: LIST
11449: PUSH
11450: LD_INT 197
11452: PUSH
11453: LD_INT 166
11455: PUSH
11456: EMPTY
11457: LIST
11458: LIST
11459: PUSH
11460: EMPTY
11461: LIST
11462: LIST
11463: LIST
11464: LIST
11465: LIST
11466: LIST
11467: LIST
11468: LIST
11469: ST_TO_ADDR
// for i = 1 to 5 + Difficulty do
11470: LD_ADDR_VAR 0 1
11474: PUSH
11475: DOUBLE
11476: LD_INT 1
11478: DEC
11479: ST_TO_ADDR
11480: LD_INT 5
11482: PUSH
11483: LD_OWVAR 67
11487: PLUS
11488: PUSH
11489: FOR_TO
11490: IFFALSE 11538
// begin MineExplosion ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , 1 ) ;
11492: LD_VAR 0 2
11496: PUSH
11497: LD_VAR 0 1
11501: ARRAY
11502: PUSH
11503: LD_INT 1
11505: ARRAY
11506: PPUSH
11507: LD_VAR 0 2
11511: PUSH
11512: LD_VAR 0 1
11516: ARRAY
11517: PUSH
11518: LD_INT 2
11520: ARRAY
11521: PPUSH
11522: LD_INT 1
11524: PPUSH
11525: CALL_OW 453
// wait ( 0 0$0.8 ) ;
11529: LD_INT 28
11531: PPUSH
11532: CALL_OW 67
// end ;
11536: GO 11489
11538: POP
11539: POP
// end ;
11540: PPOPN 2
11542: END
// every 0 0$3 trigger not outpostEscape do var tmp , engs , buildings , empty , i , j , k ;
11543: LD_EXP 27
11547: NOT
11548: IFFALSE 12202
11550: GO 11552
11552: DISABLE
11553: LD_INT 0
11555: PPUSH
11556: PPUSH
11557: PPUSH
11558: PPUSH
11559: PPUSH
11560: PPUSH
11561: PPUSH
// begin enable ;
11562: ENABLE
// tmp := UnitFilter ( ruOutpost , [ [ f_side , 3 ] , [ f_class , 1 ] ] ) ;
11563: LD_ADDR_VAR 0 1
11567: PUSH
11568: LD_EXP 14
11572: PPUSH
11573: LD_INT 22
11575: PUSH
11576: LD_INT 3
11578: PUSH
11579: EMPTY
11580: LIST
11581: LIST
11582: PUSH
11583: LD_INT 25
11585: PUSH
11586: LD_INT 1
11588: PUSH
11589: EMPTY
11590: LIST
11591: LIST
11592: PUSH
11593: EMPTY
11594: LIST
11595: LIST
11596: PPUSH
11597: CALL_OW 72
11601: ST_TO_ADDR
// engs := UnitFilter ( ruOutpost , [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
11602: LD_ADDR_VAR 0 2
11606: PUSH
11607: LD_EXP 14
11611: PPUSH
11612: LD_INT 22
11614: PUSH
11615: LD_INT 3
11617: PUSH
11618: EMPTY
11619: LIST
11620: LIST
11621: PUSH
11622: LD_INT 25
11624: PUSH
11625: LD_INT 2
11627: PUSH
11628: EMPTY
11629: LIST
11630: LIST
11631: PUSH
11632: EMPTY
11633: LIST
11634: LIST
11635: PPUSH
11636: CALL_OW 72
11640: ST_TO_ADDR
// buildings := UnitFilter ( ruOutpost , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
11641: LD_ADDR_VAR 0 3
11645: PUSH
11646: LD_EXP 14
11650: PPUSH
11651: LD_INT 22
11653: PUSH
11654: LD_INT 3
11656: PUSH
11657: EMPTY
11658: LIST
11659: LIST
11660: PUSH
11661: LD_INT 21
11663: PUSH
11664: LD_INT 3
11666: PUSH
11667: EMPTY
11668: LIST
11669: LIST
11670: PUSH
11671: LD_INT 3
11673: PUSH
11674: LD_INT 24
11676: PUSH
11677: LD_INT 1000
11679: PUSH
11680: EMPTY
11681: LIST
11682: LIST
11683: PUSH
11684: EMPTY
11685: LIST
11686: LIST
11687: PUSH
11688: EMPTY
11689: LIST
11690: LIST
11691: LIST
11692: PPUSH
11693: CALL_OW 72
11697: ST_TO_ADDR
// if engs and buildings then
11698: LD_VAR 0 2
11702: PUSH
11703: LD_VAR 0 3
11707: AND
11708: IFFALSE 11781
// begin for i in engs do
11710: LD_ADDR_VAR 0 5
11714: PUSH
11715: LD_VAR 0 2
11719: PUSH
11720: FOR_IN
11721: IFFALSE 11777
// if IsInUnit ( i ) then
11723: LD_VAR 0 5
11727: PPUSH
11728: CALL_OW 310
11732: IFFALSE 11745
// ComExitBuilding ( i ) else
11734: LD_VAR 0 5
11738: PPUSH
11739: CALL_OW 122
11743: GO 11775
// if not HasTask ( i ) then
11745: LD_VAR 0 5
11749: PPUSH
11750: CALL_OW 314
11754: NOT
11755: IFFALSE 11775
// ComRepairBuilding ( i , buildings [ 1 ] ) ;
11757: LD_VAR 0 5
11761: PPUSH
11762: LD_VAR 0 3
11766: PUSH
11767: LD_INT 1
11769: ARRAY
11770: PPUSH
11771: CALL_OW 130
11775: GO 11720
11777: POP
11778: POP
// end else
11779: GO 11884
// if not buildings and UnitFilter ( ruOutpost , [ f_btype , b_depot ] ) and UnitFilter ( engs , [ f_not , [ f_inside ] ] ) then
11781: LD_VAR 0 3
11785: NOT
11786: PUSH
11787: LD_EXP 14
11791: PPUSH
11792: LD_INT 30
11794: PUSH
11795: LD_INT 0
11797: PUSH
11798: EMPTY
11799: LIST
11800: LIST
11801: PPUSH
11802: CALL_OW 72
11806: AND
11807: PUSH
11808: LD_VAR 0 2
11812: PPUSH
11813: LD_INT 3
11815: PUSH
11816: LD_INT 54
11818: PUSH
11819: EMPTY
11820: LIST
11821: PUSH
11822: EMPTY
11823: LIST
11824: LIST
11825: PPUSH
11826: CALL_OW 72
11830: AND
11831: IFFALSE 11884
// ComEnterUnit ( UnitFilter ( engs , [ f_not , [ f_inside ] ] ) , UnitFilter ( ruOutpost , [ f_btype , b_depot ] ) [ 1 ] ) ;
11833: LD_VAR 0 2
11837: PPUSH
11838: LD_INT 3
11840: PUSH
11841: LD_INT 54
11843: PUSH
11844: EMPTY
11845: LIST
11846: PUSH
11847: EMPTY
11848: LIST
11849: LIST
11850: PPUSH
11851: CALL_OW 72
11855: PPUSH
11856: LD_EXP 14
11860: PPUSH
11861: LD_INT 30
11863: PUSH
11864: LD_INT 0
11866: PUSH
11867: EMPTY
11868: LIST
11869: LIST
11870: PPUSH
11871: CALL_OW 72
11875: PUSH
11876: LD_INT 1
11878: ARRAY
11879: PPUSH
11880: CALL_OW 120
// if not tmp then
11884: LD_VAR 0 1
11888: NOT
11889: IFFALSE 11893
// exit ;
11891: GO 12202
// if FilterUnitsInArea ( ruOutpostCenterArea , [ f_enemy , 3 ] ) > 1 then
11893: LD_INT 26
11895: PPUSH
11896: LD_INT 81
11898: PUSH
11899: LD_INT 3
11901: PUSH
11902: EMPTY
11903: LIST
11904: LIST
11905: PPUSH
11906: CALL_OW 70
11910: PUSH
11911: LD_INT 1
11913: GREATER
11914: IFFALSE 11970
// begin for i in tmp do
11916: LD_ADDR_VAR 0 5
11920: PUSH
11921: LD_VAR 0 1
11925: PUSH
11926: FOR_IN
11927: IFFALSE 11966
// begin if IsInUnit ( i ) then
11929: LD_VAR 0 5
11933: PPUSH
11934: CALL_OW 310
11938: IFFALSE 11949
// ComExitBuilding ( i ) ;
11940: LD_VAR 0 5
11944: PPUSH
11945: CALL_OW 122
// AddComAgressiveMove ( i , 204 , 164 ) ;
11949: LD_VAR 0 5
11953: PPUSH
11954: LD_INT 204
11956: PPUSH
11957: LD_INT 164
11959: PPUSH
11960: CALL_OW 174
// end ;
11964: GO 11926
11966: POP
11967: POP
// end else
11968: GO 12202
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
11970: LD_VAR 0 1
11974: PPUSH
11975: LD_INT 3
11977: PUSH
11978: LD_INT 54
11980: PUSH
11981: EMPTY
11982: LIST
11983: PUSH
11984: EMPTY
11985: LIST
11986: LIST
11987: PPUSH
11988: CALL_OW 72
11992: IFFALSE 12202
// begin empty := UnitFilter ( ruOutpost , [ [ f_btype , b_bunker ] , [ f_empty ] ] ) ;
11994: LD_ADDR_VAR 0 4
11998: PUSH
11999: LD_EXP 14
12003: PPUSH
12004: LD_INT 30
12006: PUSH
12007: LD_INT 32
12009: PUSH
12010: EMPTY
12011: LIST
12012: LIST
12013: PUSH
12014: LD_INT 58
12016: PUSH
12017: EMPTY
12018: LIST
12019: PUSH
12020: EMPTY
12021: LIST
12022: LIST
12023: PPUSH
12024: CALL_OW 72
12028: ST_TO_ADDR
// if not empty and UnitFilter ( ruOutpost , [ f_btype , b_barracks ] ) then
12029: LD_VAR 0 4
12033: NOT
12034: PUSH
12035: LD_EXP 14
12039: PPUSH
12040: LD_INT 30
12042: PUSH
12043: LD_INT 5
12045: PUSH
12046: EMPTY
12047: LIST
12048: LIST
12049: PPUSH
12050: CALL_OW 72
12054: AND
12055: IFFALSE 12092
// begin ComEnterUnit ( tmp , UnitFilter ( ruOutpost , [ f_btype , b_barracks ] ) [ 1 ] ) ;
12057: LD_VAR 0 1
12061: PPUSH
12062: LD_EXP 14
12066: PPUSH
12067: LD_INT 30
12069: PUSH
12070: LD_INT 5
12072: PUSH
12073: EMPTY
12074: LIST
12075: LIST
12076: PPUSH
12077: CALL_OW 72
12081: PUSH
12082: LD_INT 1
12084: ARRAY
12085: PPUSH
12086: CALL_OW 120
// exit ;
12090: GO 12202
// end ; j := UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) ;
12092: LD_ADDR_VAR 0 6
12096: PUSH
12097: LD_VAR 0 1
12101: PPUSH
12102: LD_INT 3
12104: PUSH
12105: LD_INT 54
12107: PUSH
12108: EMPTY
12109: LIST
12110: PUSH
12111: EMPTY
12112: LIST
12113: LIST
12114: PPUSH
12115: CALL_OW 72
12119: ST_TO_ADDR
// if j < empty then
12120: LD_VAR 0 6
12124: PUSH
12125: LD_VAR 0 4
12129: LESS
12130: IFFALSE 12144
// k := j else
12132: LD_ADDR_VAR 0 7
12136: PUSH
12137: LD_VAR 0 6
12141: ST_TO_ADDR
12142: GO 12154
// k := empty ;
12144: LD_ADDR_VAR 0 7
12148: PUSH
12149: LD_VAR 0 4
12153: ST_TO_ADDR
// for i = 1 to k do
12154: LD_ADDR_VAR 0 5
12158: PUSH
12159: DOUBLE
12160: LD_INT 1
12162: DEC
12163: ST_TO_ADDR
12164: LD_VAR 0 7
12168: PUSH
12169: FOR_TO
12170: IFFALSE 12200
// ComEnterUnit ( j [ i ] , empty [ i ] ) ;
12172: LD_VAR 0 6
12176: PUSH
12177: LD_VAR 0 5
12181: ARRAY
12182: PPUSH
12183: LD_VAR 0 4
12187: PUSH
12188: LD_VAR 0 5
12192: ARRAY
12193: PPUSH
12194: CALL_OW 120
12198: GO 12169
12200: POP
12201: POP
// end ; end ;
12202: PPOPN 7
12204: END
// every 0 0$2 trigger GameType = 1 and outpostEscape and FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , 208 , 163 , 8 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_distxy , 208 , 163 , 14 ] ] ) do var i ;
12205: LD_EXP 2
12209: PUSH
12210: LD_INT 1
12212: EQUAL
12213: PUSH
12214: LD_EXP 27
12218: AND
12219: PUSH
12220: LD_INT 22
12222: PUSH
12223: LD_INT 1
12225: PUSH
12226: EMPTY
12227: LIST
12228: LIST
12229: PUSH
12230: LD_INT 92
12232: PUSH
12233: LD_INT 208
12235: PUSH
12236: LD_INT 163
12238: PUSH
12239: LD_INT 8
12241: PUSH
12242: EMPTY
12243: LIST
12244: LIST
12245: LIST
12246: LIST
12247: PUSH
12248: EMPTY
12249: LIST
12250: LIST
12251: PPUSH
12252: CALL_OW 69
12256: AND
12257: PUSH
12258: LD_INT 22
12260: PUSH
12261: LD_INT 3
12263: PUSH
12264: EMPTY
12265: LIST
12266: LIST
12267: PUSH
12268: LD_INT 21
12270: PUSH
12271: LD_INT 1
12273: PUSH
12274: EMPTY
12275: LIST
12276: LIST
12277: PUSH
12278: LD_INT 92
12280: PUSH
12281: LD_INT 208
12283: PUSH
12284: LD_INT 163
12286: PUSH
12287: LD_INT 14
12289: PUSH
12290: EMPTY
12291: LIST
12292: LIST
12293: LIST
12294: LIST
12295: PUSH
12296: EMPTY
12297: LIST
12298: LIST
12299: LIST
12300: PPUSH
12301: CALL_OW 69
12305: NOT
12306: AND
12307: IFFALSE 12612
12309: GO 12311
12311: DISABLE
12312: LD_INT 0
12314: PPUSH
// begin InGameOn ;
12315: CALL_OW 8
// CenterNowOnUnits ( playerCommander ) ;
12319: LD_EXP 9
12323: PPUSH
12324: CALL_OW 87
// wait ( 0 0$1 ) ;
12328: LD_INT 35
12330: PPUSH
12331: CALL_OW 67
// DialogueOn ;
12335: CALL_OW 6
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-BaseCaptured ) ;
12339: LD_EXP 9
12343: PPUSH
12344: LD_STRING D
12346: PUSH
12347: LD_STRING I
12349: PUSH
12350: LD_STRING J
12352: PUSH
12353: LD_STRING S
12355: PUSH
12356: EMPTY
12357: LIST
12358: LIST
12359: LIST
12360: PUSH
12361: LD_EXP 25
12365: ARRAY
12366: STR
12367: PUSH
12368: LD_STRING -1-BaseCaptured
12370: STR
12371: PPUSH
12372: CALL_OW 88
// SayRadio ( Powell , DP-1-BaseCaptured ) ;
12376: LD_EXP 12
12380: PPUSH
12381: LD_STRING DP-1-BaseCaptured
12383: PPUSH
12384: CALL_OW 94
// if sibBombAllowed then
12388: LD_EXP 23
12392: IFFALSE 12534
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -2-BaseCaptured ) ;
12394: LD_EXP 9
12398: PPUSH
12399: LD_STRING D
12401: PUSH
12402: LD_STRING I
12404: PUSH
12405: LD_STRING J
12407: PUSH
12408: LD_STRING S
12410: PUSH
12411: EMPTY
12412: LIST
12413: LIST
12414: LIST
12415: PUSH
12416: LD_EXP 25
12420: ARRAY
12421: STR
12422: PUSH
12423: LD_STRING -2-BaseCaptured
12425: STR
12426: PPUSH
12427: CALL_OW 88
// if commander = 1 then
12431: LD_EXP 25
12435: PUSH
12436: LD_INT 1
12438: EQUAL
12439: IFFALSE 12453
// SayRadio ( Powell , DP-2b-BaseCaptured ) ;
12441: LD_EXP 12
12445: PPUSH
12446: LD_STRING DP-2b-BaseCaptured
12448: PPUSH
12449: CALL_OW 94
// if commander = 2 then
12453: LD_EXP 25
12457: PUSH
12458: LD_INT 2
12460: EQUAL
12461: IFFALSE 12475
// SayRadio ( Powell , DP-2-BaseCaptured ) ;
12463: LD_EXP 12
12467: PPUSH
12468: LD_STRING DP-2-BaseCaptured
12470: PPUSH
12471: CALL_OW 94
// if commander = 3 then
12475: LD_EXP 25
12479: PUSH
12480: LD_INT 3
12482: EQUAL
12483: IFFALSE 12497
// SayRadio ( Powell , DP-2a-BaseCaptured ) ;
12485: LD_EXP 12
12489: PPUSH
12490: LD_STRING DP-2a-BaseCaptured
12492: PPUSH
12493: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -3-BaseCaptured ) ;
12497: LD_EXP 9
12501: PPUSH
12502: LD_STRING D
12504: PUSH
12505: LD_STRING I
12507: PUSH
12508: LD_STRING J
12510: PUSH
12511: LD_STRING S
12513: PUSH
12514: EMPTY
12515: LIST
12516: LIST
12517: LIST
12518: PUSH
12519: LD_EXP 25
12523: ARRAY
12524: STR
12525: PUSH
12526: LD_STRING -3-BaseCaptured
12528: STR
12529: PPUSH
12530: CALL_OW 88
// end ; DialogueOff ;
12534: CALL_OW 7
// InGameOff ;
12538: CALL_OW 9
// ChangeMissionObjectives ( O2 ) ;
12542: LD_STRING O2
12544: PPUSH
12545: CALL_OW 337
// for i in UnitFilter ( ruOutpost , [ f_type , unit_building ] ) do
12549: LD_ADDR_VAR 0 1
12553: PUSH
12554: LD_EXP 14
12558: PPUSH
12559: LD_INT 21
12561: PUSH
12562: LD_INT 3
12564: PUSH
12565: EMPTY
12566: LIST
12567: LIST
12568: PPUSH
12569: CALL_OW 72
12573: PUSH
12574: FOR_IN
12575: IFFALSE 12591
// SetSide ( i , 1 ) ;
12577: LD_VAR 0 1
12581: PPUSH
12582: LD_INT 1
12584: PPUSH
12585: CALL_OW 235
12589: GO 12574
12591: POP
12592: POP
// baseCaptured := true ;
12593: LD_ADDR_EXP 17
12597: PUSH
12598: LD_INT 1
12600: ST_TO_ADDR
// wait ( 0 0$35 ) ;
12601: LD_INT 1225
12603: PPUSH
12604: CALL_OW 67
// PrepareReinforcements ;
12608: CALL 9522 0 0
// end ;
12612: PPOPN 1
12614: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 167 , 197 , 20 ] ] ) > 3 do
12615: LD_INT 22
12617: PUSH
12618: LD_INT 3
12620: PUSH
12621: EMPTY
12622: LIST
12623: LIST
12624: PUSH
12625: LD_INT 92
12627: PUSH
12628: LD_INT 167
12630: PUSH
12631: LD_INT 197
12633: PUSH
12634: LD_INT 20
12636: PUSH
12637: EMPTY
12638: LIST
12639: LIST
12640: LIST
12641: LIST
12642: PUSH
12643: EMPTY
12644: LIST
12645: LIST
12646: PPUSH
12647: CALL_OW 69
12651: PUSH
12652: LD_INT 3
12654: GREATER
12655: IFFALSE 12672
12657: GO 12659
12659: DISABLE
// SayRadio ( Powell , DP-RuAttack ) ;
12660: LD_EXP 12
12664: PPUSH
12665: LD_STRING DP-RuAttack
12667: PPUSH
12668: CALL_OW 94
12672: END
// every 0 0$2 trigger not debug and SeeXY ( 1 , 168 , 74 ) and GetEnvironmentType ( 168 , 72 ) do
12673: LD_EXP 1
12677: NOT
12678: PUSH
12679: LD_INT 1
12681: PPUSH
12682: LD_INT 168
12684: PPUSH
12685: LD_INT 74
12687: PPUSH
12688: CALL_OW 293
12692: AND
12693: PUSH
12694: LD_INT 168
12696: PPUSH
12697: LD_INT 72
12699: PPUSH
12700: CALL_OW 553
12704: AND
12705: IFFALSE 12757
12707: GO 12709
12709: DISABLE
// begin CenterOnXY ( 168 , 72 ) ;
12710: LD_INT 168
12712: PPUSH
12713: LD_INT 72
12715: PPUSH
12716: CALL_OW 84
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Blockade ) ;
12720: LD_EXP 9
12724: PPUSH
12725: LD_STRING D
12727: PUSH
12728: LD_STRING I
12730: PUSH
12731: LD_STRING J
12733: PUSH
12734: LD_STRING S
12736: PUSH
12737: EMPTY
12738: LIST
12739: LIST
12740: LIST
12741: PUSH
12742: LD_EXP 25
12746: ARRAY
12747: STR
12748: PUSH
12749: LD_STRING -1-Blockade
12751: STR
12752: PPUSH
12753: CALL_OW 88
// end ;
12757: END
// every 0 0$2 trigger GameType = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_see , 4 ] ] ) do
12758: LD_EXP 2
12762: PUSH
12763: LD_INT 1
12765: EQUAL
12766: PUSH
12767: LD_INT 22
12769: PUSH
12770: LD_INT 1
12772: PUSH
12773: EMPTY
12774: LIST
12775: LIST
12776: PUSH
12777: LD_INT 101
12779: PUSH
12780: LD_INT 4
12782: PUSH
12783: EMPTY
12784: LIST
12785: LIST
12786: PUSH
12787: EMPTY
12788: LIST
12789: LIST
12790: PPUSH
12791: CALL_OW 69
12795: AND
12796: IFFALSE 13328
12798: GO 12800
12800: DISABLE
// begin ChangeSideFog ( 4 , 1 ) ;
12801: LD_INT 4
12803: PPUSH
12804: LD_INT 1
12806: PPUSH
12807: CALL_OW 343
// DialogueOn ;
12811: CALL_OW 6
// CenterNowOnUnits ( allyCommander ) ;
12815: LD_EXP 11
12819: PPUSH
12820: CALL_OW 87
// SayRadio ( allyCommander , DM-1-Contact ) ;
12824: LD_EXP 11
12828: PPUSH
12829: LD_STRING DM-1-Contact
12831: PPUSH
12832: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Contact ) ;
12836: LD_EXP 9
12840: PPUSH
12841: LD_STRING D
12843: PUSH
12844: LD_STRING I
12846: PUSH
12847: LD_STRING J
12849: PUSH
12850: LD_STRING S
12852: PUSH
12853: EMPTY
12854: LIST
12855: LIST
12856: LIST
12857: PUSH
12858: LD_EXP 25
12862: ARRAY
12863: STR
12864: PUSH
12865: LD_STRING -1-Contact
12867: STR
12868: PPUSH
12869: CALL_OW 88
// if commander = 1 then
12873: LD_EXP 25
12877: PUSH
12878: LD_INT 1
12880: EQUAL
12881: IFFALSE 13013
// begin SayRadio ( allyCommander , DM-2-Contact ) ;
12883: LD_EXP 11
12887: PPUSH
12888: LD_STRING DM-2-Contact
12890: PPUSH
12891: CALL_OW 94
// Say ( playerCommander , DI-2-Contact ) ;
12895: LD_EXP 9
12899: PPUSH
12900: LD_STRING DI-2-Contact
12902: PPUSH
12903: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) and GetAttitude ( 8 , 1 ) = att_enemy then
12907: LD_INT 22
12909: PUSH
12910: LD_INT 8
12912: PUSH
12913: EMPTY
12914: LIST
12915: LIST
12916: PUSH
12917: LD_INT 21
12919: PUSH
12920: LD_INT 1
12922: PUSH
12923: EMPTY
12924: LIST
12925: LIST
12926: PUSH
12927: EMPTY
12928: LIST
12929: LIST
12930: PPUSH
12931: CALL_OW 69
12935: PUSH
12936: LD_INT 8
12938: PPUSH
12939: LD_INT 1
12941: PPUSH
12942: CALL_OW 81
12946: PUSH
12947: LD_INT 2
12949: EQUAL
12950: AND
12951: IFFALSE 12977
// begin SayRadio ( allyCommander , DM-3-Contact ) ;
12953: LD_EXP 11
12957: PPUSH
12958: LD_STRING DM-3-Contact
12960: PPUSH
12961: CALL_OW 94
// Say ( playerCommander , DI-3-Contact ) ;
12965: LD_EXP 9
12969: PPUSH
12970: LD_STRING DI-3-Contact
12972: PPUSH
12973: CALL_OW 88
// end ; SayRadio ( allyCommander , DM-4-Contact ) ;
12977: LD_EXP 11
12981: PPUSH
12982: LD_STRING DM-4-Contact
12984: PPUSH
12985: CALL_OW 94
// Say ( playerCommander , DI-4-Contact ) ;
12989: LD_EXP 9
12993: PPUSH
12994: LD_STRING DI-4-Contact
12996: PPUSH
12997: CALL_OW 88
// SayRadio ( allyCommander , DM-5-Contact ) ;
13001: LD_EXP 11
13005: PPUSH
13006: LD_STRING DM-5-Contact
13008: PPUSH
13009: CALL_OW 94
// end ; if commander = 2 then
13013: LD_EXP 25
13017: PUSH
13018: LD_INT 2
13020: EQUAL
13021: IFFALSE 13153
// begin SayRadio ( allyCommander , DM-2c-Contact ) ;
13023: LD_EXP 11
13027: PPUSH
13028: LD_STRING DM-2c-Contact
13030: PPUSH
13031: CALL_OW 94
// Say ( playerCommander , DJ-2-Contact ) ;
13035: LD_EXP 9
13039: PPUSH
13040: LD_STRING DJ-2-Contact
13042: PPUSH
13043: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) and GetAttitude ( 8 , 1 ) = att_enemy then
13047: LD_INT 22
13049: PUSH
13050: LD_INT 8
13052: PUSH
13053: EMPTY
13054: LIST
13055: LIST
13056: PUSH
13057: LD_INT 21
13059: PUSH
13060: LD_INT 1
13062: PUSH
13063: EMPTY
13064: LIST
13065: LIST
13066: PUSH
13067: EMPTY
13068: LIST
13069: LIST
13070: PPUSH
13071: CALL_OW 69
13075: PUSH
13076: LD_INT 8
13078: PPUSH
13079: LD_INT 1
13081: PPUSH
13082: CALL_OW 81
13086: PUSH
13087: LD_INT 2
13089: EQUAL
13090: AND
13091: IFFALSE 13117
// begin SayRadio ( allyCommander , DM-3-Contact ) ;
13093: LD_EXP 11
13097: PPUSH
13098: LD_STRING DM-3-Contact
13100: PPUSH
13101: CALL_OW 94
// Say ( playerCommander , DJ-3-Contact ) ;
13105: LD_EXP 9
13109: PPUSH
13110: LD_STRING DJ-3-Contact
13112: PPUSH
13113: CALL_OW 88
// end ; SayRadio ( allyCommander , DM-4-Contact ) ;
13117: LD_EXP 11
13121: PPUSH
13122: LD_STRING DM-4-Contact
13124: PPUSH
13125: CALL_OW 94
// Say ( playerCommander , DJ-4-Contact ) ;
13129: LD_EXP 9
13133: PPUSH
13134: LD_STRING DJ-4-Contact
13136: PPUSH
13137: CALL_OW 88
// SayRadio ( allyCommander , DM-5a-Contact ) ;
13141: LD_EXP 11
13145: PPUSH
13146: LD_STRING DM-5a-Contact
13148: PPUSH
13149: CALL_OW 94
// end ; if commander = 3 then
13153: LD_EXP 25
13157: PUSH
13158: LD_INT 3
13160: EQUAL
13161: IFFALSE 13317
// begin SayRadio ( allyCommander , DM-2a-Contact ) ;
13163: LD_EXP 11
13167: PPUSH
13168: LD_STRING DM-2a-Contact
13170: PPUSH
13171: CALL_OW 94
// Say ( playerCommander , DS-2a-Contact ) ;
13175: LD_EXP 9
13179: PPUSH
13180: LD_STRING DS-2a-Contact
13182: PPUSH
13183: CALL_OW 88
// SayRadio ( allyCommander , DM-2b-Contact ) ;
13187: LD_EXP 11
13191: PPUSH
13192: LD_STRING DM-2b-Contact
13194: PPUSH
13195: CALL_OW 94
// Say ( playerCommander , DS-2b-Contact ) ;
13199: LD_EXP 9
13203: PPUSH
13204: LD_STRING DS-2b-Contact
13206: PPUSH
13207: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) and GetAttitude ( 8 , 1 ) = att_enemy then
13211: LD_INT 22
13213: PUSH
13214: LD_INT 8
13216: PUSH
13217: EMPTY
13218: LIST
13219: LIST
13220: PUSH
13221: LD_INT 21
13223: PUSH
13224: LD_INT 1
13226: PUSH
13227: EMPTY
13228: LIST
13229: LIST
13230: PUSH
13231: EMPTY
13232: LIST
13233: LIST
13234: PPUSH
13235: CALL_OW 69
13239: PUSH
13240: LD_INT 8
13242: PPUSH
13243: LD_INT 1
13245: PPUSH
13246: CALL_OW 81
13250: PUSH
13251: LD_INT 2
13253: EQUAL
13254: AND
13255: IFFALSE 13281
// begin SayRadio ( allyCommander , DM-3-Contact ) ;
13257: LD_EXP 11
13261: PPUSH
13262: LD_STRING DM-3-Contact
13264: PPUSH
13265: CALL_OW 94
// Say ( playerCommander , DS-3-Contact ) ;
13269: LD_EXP 9
13273: PPUSH
13274: LD_STRING DS-3-Contact
13276: PPUSH
13277: CALL_OW 88
// end ; SayRadio ( allyCommander , DM-4-Contact ) ;
13281: LD_EXP 11
13285: PPUSH
13286: LD_STRING DM-4-Contact
13288: PPUSH
13289: CALL_OW 94
// Say ( playerCommander , DS-4-Contact ) ;
13293: LD_EXP 9
13297: PPUSH
13298: LD_STRING DS-4-Contact
13300: PPUSH
13301: CALL_OW 88
// SayRadio ( allyCommander , DM-5-Contact ) ;
13305: LD_EXP 11
13309: PPUSH
13310: LD_STRING DM-5-Contact
13312: PPUSH
13313: CALL_OW 94
// end ; DialogueOff ;
13317: CALL_OW 7
// ChangeMissionObjectives ( O3 ) ;
13321: LD_STRING O3
13323: PPUSH
13324: CALL_OW 337
// end ;
13328: END
// every 0 0$10 trigger GameType = 1 and legDestCounter >= [ 15 , 20 , 25 ] [ Difficulty ] and FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_warehouse ] ] ) and FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] ] ) >= 5 do var time , sib , sources , i ;
13329: LD_EXP 2
13333: PUSH
13334: LD_INT 1
13336: EQUAL
13337: PUSH
13338: LD_EXP 18
13342: PUSH
13343: LD_INT 15
13345: PUSH
13346: LD_INT 20
13348: PUSH
13349: LD_INT 25
13351: PUSH
13352: EMPTY
13353: LIST
13354: LIST
13355: LIST
13356: PUSH
13357: LD_OWVAR 67
13361: ARRAY
13362: GREATEREQUAL
13363: AND
13364: PUSH
13365: LD_INT 22
13367: PUSH
13368: LD_INT 8
13370: PUSH
13371: EMPTY
13372: LIST
13373: LIST
13374: PUSH
13375: LD_INT 30
13377: PUSH
13378: LD_INT 1
13380: PUSH
13381: EMPTY
13382: LIST
13383: LIST
13384: PUSH
13385: EMPTY
13386: LIST
13387: LIST
13388: PPUSH
13389: CALL_OW 69
13393: AND
13394: PUSH
13395: LD_INT 22
13397: PUSH
13398: LD_INT 8
13400: PUSH
13401: EMPTY
13402: LIST
13403: LIST
13404: PUSH
13405: LD_INT 21
13407: PUSH
13408: LD_INT 3
13410: PUSH
13411: EMPTY
13412: LIST
13413: LIST
13414: PUSH
13415: EMPTY
13416: LIST
13417: LIST
13418: PPUSH
13419: CALL_OW 69
13423: PUSH
13424: LD_INT 5
13426: GREATEREQUAL
13427: AND
13428: IFFALSE 13951
13430: GO 13432
13432: DISABLE
13433: LD_INT 0
13435: PPUSH
13436: PPUSH
13437: PPUSH
13438: PPUSH
// begin DialogueOn ;
13439: CALL_OW 6
// SayRadio ( Farmer , DF-1-Leg ) ;
13443: LD_EXP 13
13447: PPUSH
13448: LD_STRING DF-1-Leg
13450: PPUSH
13451: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Leg ) ;
13455: LD_EXP 9
13459: PPUSH
13460: LD_STRING D
13462: PUSH
13463: LD_STRING I
13465: PUSH
13466: LD_STRING J
13468: PUSH
13469: LD_STRING S
13471: PUSH
13472: EMPTY
13473: LIST
13474: LIST
13475: LIST
13476: PUSH
13477: LD_EXP 25
13481: ARRAY
13482: STR
13483: PUSH
13484: LD_STRING -1-Leg
13486: STR
13487: PPUSH
13488: CALL_OW 88
// SayRadio ( Farmer , DF-2-Leg ) ;
13492: LD_EXP 13
13496: PPUSH
13497: LD_STRING DF-2-Leg
13499: PPUSH
13500: CALL_OW 94
// DialogueOff ;
13504: CALL_OW 7
// case Query ( QLegionOffer ) of 1 :
13508: LD_STRING QLegionOffer
13510: PPUSH
13511: CALL_OW 97
13515: PUSH
13516: LD_INT 1
13518: DOUBLE
13519: EQUAL
13520: IFTRUE 13524
13522: GO 13527
13524: POP
// ; 2 :
13525: GO 13541
13527: LD_INT 2
13529: DOUBLE
13530: EQUAL
13531: IFTRUE 13535
13533: GO 13540
13535: POP
// exit ; end ;
13536: GO 13951
13538: GO 13541
13540: POP
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -2-Leg ) ;
13541: LD_EXP 9
13545: PPUSH
13546: LD_STRING D
13548: PUSH
13549: LD_STRING I
13551: PUSH
13552: LD_STRING J
13554: PUSH
13555: LD_STRING S
13557: PUSH
13558: EMPTY
13559: LIST
13560: LIST
13561: LIST
13562: PUSH
13563: LD_EXP 25
13567: ARRAY
13568: STR
13569: PUSH
13570: LD_STRING -2-Leg
13572: STR
13573: PPUSH
13574: CALL_OW 88
// legOfferAccepted := true ;
13578: LD_ADDR_EXP 20
13582: PUSH
13583: LD_INT 1
13585: ST_TO_ADDR
// SetAreaMapShow ( legOfferArea , 1 ) ;
13586: LD_INT 21
13588: PPUSH
13589: LD_INT 1
13591: PPUSH
13592: CALL_OW 424
// CenterOnXY ( 190 , 227 ) ;
13596: LD_INT 190
13598: PPUSH
13599: LD_INT 227
13601: PPUSH
13602: CALL_OW 84
// time := [ 8 8$00 , 7 7$00 , 6 6$00 ] [ Difficulty ] ;
13606: LD_ADDR_VAR 0 1
13610: PUSH
13611: LD_INT 16800
13613: PUSH
13614: LD_INT 14700
13616: PUSH
13617: LD_INT 12600
13619: PUSH
13620: EMPTY
13621: LIST
13622: LIST
13623: LIST
13624: PUSH
13625: LD_OWVAR 67
13629: ARRAY
13630: ST_TO_ADDR
// sib := 100 ;
13631: LD_ADDR_VAR 0 2
13635: PUSH
13636: LD_INT 100
13638: ST_TO_ADDR
// disableGlobalTimer := true ;
13639: LD_ADDR_EXP 4
13643: PUSH
13644: LD_INT 1
13646: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13647: LD_INT 35
13649: PPUSH
13650: CALL_OW 67
// time := time - 0 0$1 ;
13654: LD_ADDR_VAR 0 1
13658: PUSH
13659: LD_VAR 0 1
13663: PUSH
13664: LD_INT 35
13666: MINUS
13667: ST_TO_ADDR
// sources := GetResourceArea ( legOfferArea , mat_siberit ) ;
13668: LD_ADDR_VAR 0 3
13672: PUSH
13673: LD_INT 21
13675: PPUSH
13676: LD_INT 3
13678: PPUSH
13679: CALL_OW 287
13683: ST_TO_ADDR
// display_strings := [ #SkrTime , tick , #Skr-LegOffer , sib , time ] ;
13684: LD_ADDR_OWVAR 47
13688: PUSH
13689: LD_STRING #SkrTime
13691: PUSH
13692: LD_OWVAR 1
13696: PUSH
13697: LD_STRING #Skr-LegOffer
13699: PUSH
13700: LD_VAR 0 2
13704: PUSH
13705: LD_VAR 0 1
13709: PUSH
13710: EMPTY
13711: LIST
13712: LIST
13713: LIST
13714: LIST
13715: LIST
13716: ST_TO_ADDR
// if sources then
13717: LD_VAR 0 3
13721: IFFALSE 13753
// begin sib := sib - sources * 10 ;
13723: LD_ADDR_VAR 0 2
13727: PUSH
13728: LD_VAR 0 2
13732: PUSH
13733: LD_VAR 0 3
13737: PUSH
13738: LD_INT 10
13740: MUL
13741: MINUS
13742: ST_TO_ADDR
// EraseResourceArea ( legOfferArea , mat_siberit ) ;
13743: LD_INT 21
13745: PPUSH
13746: LD_INT 3
13748: PPUSH
13749: CALL_OW 286
// end ; until time = 0 0$00 or sib <= 0 or not FilterAllUnits ( [ f_side , 8 ] ) ;
13753: LD_VAR 0 1
13757: PUSH
13758: LD_INT 0
13760: EQUAL
13761: PUSH
13762: LD_VAR 0 2
13766: PUSH
13767: LD_INT 0
13769: LESSEQUAL
13770: OR
13771: PUSH
13772: LD_INT 22
13774: PUSH
13775: LD_INT 8
13777: PUSH
13778: EMPTY
13779: LIST
13780: LIST
13781: PPUSH
13782: CALL_OW 69
13786: NOT
13787: OR
13788: IFFALSE 13647
// SetAreaMapShow ( legOfferArea , 0 ) ;
13790: LD_INT 21
13792: PPUSH
13793: LD_INT 0
13795: PPUSH
13796: CALL_OW 424
// disableGlobalTimer := false ;
13800: LD_ADDR_EXP 4
13804: PUSH
13805: LD_INT 0
13807: ST_TO_ADDR
// if sib <= 0 then
13808: LD_VAR 0 2
13812: PUSH
13813: LD_INT 0
13815: LESSEQUAL
13816: IFFALSE 13932
// begin legChangeSide := true ;
13818: LD_ADDR_EXP 21
13822: PUSH
13823: LD_INT 1
13825: ST_TO_ADDR
// SayRadio ( Farmer , DF-4y-Leg ) ;
13826: LD_EXP 13
13830: PPUSH
13831: LD_STRING DF-4y-Leg
13833: PPUSH
13834: CALL_OW 94
// ChangeMissionObjectives ( O3a ) ;
13838: LD_STRING O3a
13840: PPUSH
13841: CALL_OW 337
// ChangeSideFog ( 8 , 1 ) ;
13845: LD_INT 8
13847: PPUSH
13848: LD_INT 1
13850: PPUSH
13851: CALL_OW 343
// SetAttitude ( 8 , 1 , att_friend , true ) ;
13855: LD_INT 8
13857: PPUSH
13858: LD_INT 1
13860: PPUSH
13861: LD_INT 1
13863: PPUSH
13864: LD_INT 1
13866: PPUSH
13867: CALL_OW 80
// SetAttitude ( 8 , 4 , att_friend , true ) ;
13871: LD_INT 8
13873: PPUSH
13874: LD_INT 4
13876: PPUSH
13877: LD_INT 1
13879: PPUSH
13880: LD_INT 1
13882: PPUSH
13883: CALL_OW 80
// SetAttitude ( 8 , 6 , att_enemy , true ) ;
13887: LD_INT 8
13889: PPUSH
13890: LD_INT 6
13892: PPUSH
13893: LD_INT 2
13895: PPUSH
13896: LD_INT 1
13898: PPUSH
13899: CALL_OW 80
// SetAttitude ( 8 , 3 , att_enemy , true ) ;
13903: LD_INT 8
13905: PPUSH
13906: LD_INT 3
13908: PPUSH
13909: LD_INT 2
13911: PPUSH
13912: LD_INT 1
13914: PPUSH
13915: CALL_OW 80
// wait ( 0 0$30 ) ;
13919: LD_INT 1050
13921: PPUSH
13922: CALL_OW 67
// PrepareLegionReinforcements ;
13926: CALL 10222 0 0
// end else
13930: GO 13951
// begin ChangeMissionObjectives ( O3 ) ;
13932: LD_STRING O3
13934: PPUSH
13935: CALL_OW 337
// SayRadio ( Farmer , DF-4n-Leg ) ;
13939: LD_EXP 13
13943: PPUSH
13944: LD_STRING DF-4n-Leg
13946: PPUSH
13947: CALL_OW 94
// end ; end ;
13951: PPOPN 4
13953: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) = 0 and GetAttitude ( 8 , 1 ) = att_enemy do
13954: LD_INT 22
13956: PUSH
13957: LD_INT 8
13959: PUSH
13960: EMPTY
13961: LIST
13962: LIST
13963: PUSH
13964: LD_INT 21
13966: PUSH
13967: LD_INT 1
13969: PUSH
13970: EMPTY
13971: LIST
13972: LIST
13973: PUSH
13974: EMPTY
13975: LIST
13976: LIST
13977: PPUSH
13978: CALL_OW 69
13982: PUSH
13983: LD_INT 0
13985: EQUAL
13986: PUSH
13987: LD_INT 8
13989: PPUSH
13990: LD_INT 1
13992: PPUSH
13993: CALL_OW 81
13997: PUSH
13998: LD_INT 2
14000: EQUAL
14001: AND
14002: IFFALSE 14014
14004: GO 14006
14006: DISABLE
// ChangeMissionObjectives ( O3a ) ;
14007: LD_STRING O3a
14009: PPUSH
14010: CALL_OW 337
14014: END
// every 0 0$1 trigger GameType = 1 and game and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) = 0 do
14015: LD_EXP 2
14019: PUSH
14020: LD_INT 1
14022: EQUAL
14023: PUSH
14024: LD_EXP 3
14028: AND
14029: PUSH
14030: LD_INT 22
14032: PUSH
14033: LD_INT 3
14035: PUSH
14036: EMPTY
14037: LIST
14038: LIST
14039: PUSH
14040: LD_INT 21
14042: PUSH
14043: LD_INT 1
14045: PUSH
14046: EMPTY
14047: LIST
14048: LIST
14049: PUSH
14050: EMPTY
14051: LIST
14052: LIST
14053: PPUSH
14054: CALL_OW 69
14058: PUSH
14059: LD_INT 0
14061: EQUAL
14062: AND
14063: PUSH
14064: LD_INT 22
14066: PUSH
14067: LD_INT 3
14069: PUSH
14070: EMPTY
14071: LIST
14072: LIST
14073: PUSH
14074: LD_INT 30
14076: PUSH
14077: LD_INT 1
14079: PUSH
14080: EMPTY
14081: LIST
14082: LIST
14083: PUSH
14084: EMPTY
14085: LIST
14086: LIST
14087: PPUSH
14088: CALL_OW 69
14092: PUSH
14093: LD_INT 0
14095: EQUAL
14096: AND
14097: IFFALSE 14335
14099: GO 14101
14101: DISABLE
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Win ) ;
14102: LD_EXP 9
14106: PPUSH
14107: LD_STRING D
14109: PUSH
14110: LD_STRING I
14112: PUSH
14113: LD_STRING J
14115: PUSH
14116: LD_STRING S
14118: PUSH
14119: EMPTY
14120: LIST
14121: LIST
14122: LIST
14123: PUSH
14124: LD_EXP 25
14128: ARRAY
14129: STR
14130: PUSH
14131: LD_STRING -1-Win
14133: STR
14134: PPUSH
14135: CALL_OW 88
// if tick >= [ 150 150$0 , 130 130$0 , 110 110$0 ] [ Difficulty ] then
14139: LD_OWVAR 1
14143: PUSH
14144: LD_INT 315000
14146: PUSH
14147: LD_INT 273000
14149: PUSH
14150: LD_INT 231000
14152: PUSH
14153: EMPTY
14154: LIST
14155: LIST
14156: LIST
14157: PUSH
14158: LD_OWVAR 67
14162: ARRAY
14163: GREATEREQUAL
14164: IFFALSE 14179
// AddMedal ( med1 , - 1 ) else
14166: LD_STRING med1
14168: PPUSH
14169: LD_INT 1
14171: NEG
14172: PPUSH
14173: CALL_OW 101
14177: GO 14189
// AddMedal ( med1 , 1 ) ;
14179: LD_STRING med1
14181: PPUSH
14182: LD_INT 1
14184: PPUSH
14185: CALL_OW 101
// if allyDestCounter >= [ 20 , 15 , 10 ] [ Difficulty ] then
14189: LD_EXP 22
14193: PUSH
14194: LD_INT 20
14196: PUSH
14197: LD_INT 15
14199: PUSH
14200: LD_INT 10
14202: PUSH
14203: EMPTY
14204: LIST
14205: LIST
14206: LIST
14207: PUSH
14208: LD_OWVAR 67
14212: ARRAY
14213: GREATEREQUAL
14214: IFFALSE 14229
// AddMedal ( med2 , - 1 ) else
14216: LD_STRING med2
14218: PPUSH
14219: LD_INT 1
14221: NEG
14222: PPUSH
14223: CALL_OW 101
14227: GO 14239
// AddMedal ( med2 , 1 ) ;
14229: LD_STRING med2
14231: PPUSH
14232: LD_INT 1
14234: PPUSH
14235: CALL_OW 101
// if GetAttitude ( 8 , 1 ) = att_friend then
14239: LD_INT 8
14241: PPUSH
14242: LD_INT 1
14244: PPUSH
14245: CALL_OW 81
14249: PUSH
14250: LD_INT 1
14252: EQUAL
14253: IFFALSE 14267
// AddMedal ( med3 , 1 ) else
14255: LD_STRING med3
14257: PPUSH
14258: LD_INT 1
14260: PPUSH
14261: CALL_OW 101
14265: GO 14324
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) = 0 then
14267: LD_INT 22
14269: PUSH
14270: LD_INT 8
14272: PUSH
14273: EMPTY
14274: LIST
14275: LIST
14276: PUSH
14277: LD_INT 21
14279: PUSH
14280: LD_INT 1
14282: PUSH
14283: EMPTY
14284: LIST
14285: LIST
14286: PUSH
14287: EMPTY
14288: LIST
14289: LIST
14290: PPUSH
14291: CALL_OW 69
14295: PUSH
14296: LD_INT 0
14298: EQUAL
14299: IFFALSE 14313
// AddMedal ( med3 , 2 ) else
14301: LD_STRING med3
14303: PPUSH
14304: LD_INT 2
14306: PPUSH
14307: CALL_OW 101
14311: GO 14324
// AddMedal ( med3 , - 1 ) ;
14313: LD_STRING med3
14315: PPUSH
14316: LD_INT 1
14318: NEG
14319: PPUSH
14320: CALL_OW 101
// GiveMedals ( MAIN ) ;
14324: LD_STRING MAIN
14326: PPUSH
14327: CALL_OW 102
// YouWin ;
14331: CALL_OW 103
// end ;
14335: END
// every 10 trigger GameType = 1 and staticMines and FilterUnitsInArea ( minesArea , [ f_enemy , 8 ] ) do var i , j , tmp , x , y ;
14336: LD_EXP 2
14340: PUSH
14341: LD_INT 1
14343: EQUAL
14344: PUSH
14345: LD_EXP 16
14349: AND
14350: PUSH
14351: LD_INT 20
14353: PPUSH
14354: LD_INT 81
14356: PUSH
14357: LD_INT 8
14359: PUSH
14360: EMPTY
14361: LIST
14362: LIST
14363: PPUSH
14364: CALL_OW 70
14368: AND
14369: IFFALSE 14648
14371: GO 14373
14373: DISABLE
14374: LD_INT 0
14376: PPUSH
14377: PPUSH
14378: PPUSH
14379: PPUSH
14380: PPUSH
// begin enable ;
14381: ENABLE
// tmp := FilterUnitsInArea ( minesArea , [ f_enemy , 8 ] ) ;
14382: LD_ADDR_VAR 0 3
14386: PUSH
14387: LD_INT 20
14389: PPUSH
14390: LD_INT 81
14392: PUSH
14393: LD_INT 8
14395: PUSH
14396: EMPTY
14397: LIST
14398: LIST
14399: PPUSH
14400: CALL_OW 70
14404: ST_TO_ADDR
// if not tmp then
14405: LD_VAR 0 3
14409: NOT
14410: IFFALSE 14414
// exit ;
14412: GO 14648
// for i in tmp do
14414: LD_ADDR_VAR 0 1
14418: PUSH
14419: LD_VAR 0 3
14423: PUSH
14424: FOR_IN
14425: IFFALSE 14646
// begin x := GetX ( i ) ;
14427: LD_ADDR_VAR 0 4
14431: PUSH
14432: LD_VAR 0 1
14436: PPUSH
14437: CALL_OW 250
14441: ST_TO_ADDR
// y := GetY ( i ) ;
14442: LD_ADDR_VAR 0 5
14446: PUSH
14447: LD_VAR 0 1
14451: PPUSH
14452: CALL_OW 251
14456: ST_TO_ADDR
// if MineAtPos ( x , y ) then
14457: LD_VAR 0 4
14461: PPUSH
14462: LD_VAR 0 5
14466: PPUSH
14467: CALL_OW 458
14471: IFFALSE 14644
// begin LaunchMineAtPos ( x , y , 8 ) ;
14473: LD_VAR 0 4
14477: PPUSH
14478: LD_VAR 0 5
14482: PPUSH
14483: LD_INT 8
14485: PPUSH
14486: CALL_OW 456
// if not dialogueMineDetected then
14490: LD_EXP 28
14494: NOT
14495: IFFALSE 14556
// begin CenterNowOnXY ( x , y ) ;
14497: LD_VAR 0 4
14501: PPUSH
14502: LD_VAR 0 5
14506: PPUSH
14507: CALL_OW 86
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Mine ) ;
14511: LD_EXP 9
14515: PPUSH
14516: LD_STRING D
14518: PUSH
14519: LD_STRING I
14521: PUSH
14522: LD_STRING J
14524: PUSH
14525: LD_STRING S
14527: PUSH
14528: EMPTY
14529: LIST
14530: LIST
14531: LIST
14532: PUSH
14533: LD_EXP 25
14537: ARRAY
14538: STR
14539: PUSH
14540: LD_STRING -1-Mine
14542: STR
14543: PPUSH
14544: CALL_OW 88
// dialogueMineDetected := true ;
14548: LD_ADDR_EXP 28
14552: PUSH
14553: LD_INT 1
14555: ST_TO_ADDR
// end ; for j = 1 to staticMines do
14556: LD_ADDR_VAR 0 2
14560: PUSH
14561: DOUBLE
14562: LD_INT 1
14564: DEC
14565: ST_TO_ADDR
14566: LD_EXP 16
14570: PUSH
14571: FOR_TO
14572: IFFALSE 14642
// if staticMines [ j ] [ 1 ] = x and staticMines [ j ] [ 2 ] = y then
14574: LD_EXP 16
14578: PUSH
14579: LD_VAR 0 2
14583: ARRAY
14584: PUSH
14585: LD_INT 1
14587: ARRAY
14588: PUSH
14589: LD_VAR 0 4
14593: EQUAL
14594: PUSH
14595: LD_EXP 16
14599: PUSH
14600: LD_VAR 0 2
14604: ARRAY
14605: PUSH
14606: LD_INT 2
14608: ARRAY
14609: PUSH
14610: LD_VAR 0 5
14614: EQUAL
14615: AND
14616: IFFALSE 14640
// begin staticMines := Delete ( staticMines , j ) ;
14618: LD_ADDR_EXP 16
14622: PUSH
14623: LD_EXP 16
14627: PPUSH
14628: LD_VAR 0 2
14632: PPUSH
14633: CALL_OW 3
14637: ST_TO_ADDR
// break ;
14638: GO 14642
// end ;
14640: GO 14571
14642: POP
14643: POP
// end ; end ;
14644: GO 14424
14646: POP
14647: POP
// end ;
14648: PPOPN 5
14650: END
// every 30 30$00 + 50 50$00 trigger GameType = 1 and game and sibBombAllowed and UnitFilter ( mc_bases [ mc_rus_1 ] , [ f_btype , b_factory ] ) do var bomb , e ;
14651: LD_EXP 2
14655: PUSH
14656: LD_INT 1
14658: EQUAL
14659: PUSH
14660: LD_EXP 3
14664: AND
14665: PUSH
14666: LD_EXP 23
14670: AND
14671: PUSH
14672: LD_EXP 36
14676: PUSH
14677: LD_EXP 7
14681: ARRAY
14682: PPUSH
14683: LD_INT 30
14685: PUSH
14686: LD_INT 3
14688: PUSH
14689: EMPTY
14690: LIST
14691: LIST
14692: PPUSH
14693: CALL_OW 72
14697: AND
14698: IFFALSE 14902
14700: GO 14702
14702: DISABLE
14703: LD_INT 0
14705: PPUSH
14706: PPUSH
// begin enable ;
14707: ENABLE
// MC_InsertProduceList ( mc_rus_1 , [ [ ru_heavy_wheeled , engine_siberite , control_computer , ru_siberium_rocket ] ] ) ;
14708: LD_EXP 7
14712: PPUSH
14713: LD_INT 23
14715: PUSH
14716: LD_INT 3
14718: PUSH
14719: LD_INT 3
14721: PUSH
14722: LD_INT 48
14724: PUSH
14725: EMPTY
14726: LIST
14727: LIST
14728: LIST
14729: LIST
14730: PUSH
14731: EMPTY
14732: LIST
14733: PPUSH
14734: CALL 85978 0 2
// repeat wait ( 0 0$1 ) ;
14738: LD_INT 35
14740: PPUSH
14741: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) ;
14745: LD_INT 22
14747: PUSH
14748: LD_INT 3
14750: PUSH
14751: EMPTY
14752: LIST
14753: LIST
14754: PUSH
14755: LD_INT 34
14757: PUSH
14758: LD_INT 48
14760: PUSH
14761: EMPTY
14762: LIST
14763: LIST
14764: PUSH
14765: EMPTY
14766: LIST
14767: LIST
14768: PPUSH
14769: CALL_OW 69
14773: IFFALSE 14738
// bomb := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) ;
14775: LD_ADDR_VAR 0 1
14779: PUSH
14780: LD_INT 22
14782: PUSH
14783: LD_INT 3
14785: PUSH
14786: EMPTY
14787: LIST
14788: LIST
14789: PUSH
14790: LD_INT 34
14792: PUSH
14793: LD_INT 48
14795: PUSH
14796: EMPTY
14797: LIST
14798: LIST
14799: PUSH
14800: EMPTY
14801: LIST
14802: LIST
14803: PPUSH
14804: CALL_OW 69
14808: ST_TO_ADDR
// e := FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_type , unit_building ] ] ) ;
14809: LD_ADDR_VAR 0 2
14813: PUSH
14814: LD_INT 81
14816: PUSH
14817: LD_INT 3
14819: PUSH
14820: EMPTY
14821: LIST
14822: LIST
14823: PUSH
14824: LD_INT 21
14826: PUSH
14827: LD_INT 3
14829: PUSH
14830: EMPTY
14831: LIST
14832: LIST
14833: PUSH
14834: EMPTY
14835: LIST
14836: LIST
14837: PPUSH
14838: CALL_OW 69
14842: ST_TO_ADDR
// if e then
14843: LD_VAR 0 2
14847: IFFALSE 14873
// e := NearestUnitToUnit ( e , bomb [ 1 ] ) ;
14849: LD_ADDR_VAR 0 2
14853: PUSH
14854: LD_VAR 0 2
14858: PPUSH
14859: LD_VAR 0 1
14863: PUSH
14864: LD_INT 1
14866: ARRAY
14867: PPUSH
14868: CALL_OW 74
14872: ST_TO_ADDR
// ComAttackPlace ( bomb , GetX ( e ) , GetY ( e ) ) ;
14873: LD_VAR 0 1
14877: PPUSH
14878: LD_VAR 0 2
14882: PPUSH
14883: CALL_OW 250
14887: PPUSH
14888: LD_VAR 0 2
14892: PPUSH
14893: CALL_OW 251
14897: PPUSH
14898: CALL_OW 116
// end ;
14902: PPOPN 2
14904: END
// every 0 0$2 trigger Difficulty > 1 and UnitFilter ( mc_bases [ mc_rus_1 ] , [ f_class , 3 ] ) and GameType = 1 and game and GetTech ( tech_Behemoth , 3 ) = state_researched do var tmp , i ;
14905: LD_OWVAR 67
14909: PUSH
14910: LD_INT 1
14912: GREATER
14913: PUSH
14914: LD_EXP 36
14918: PUSH
14919: LD_EXP 7
14923: ARRAY
14924: PPUSH
14925: LD_INT 25
14927: PUSH
14928: LD_INT 3
14930: PUSH
14931: EMPTY
14932: LIST
14933: LIST
14934: PPUSH
14935: CALL_OW 72
14939: AND
14940: PUSH
14941: LD_EXP 2
14945: PUSH
14946: LD_INT 1
14948: EQUAL
14949: AND
14950: PUSH
14951: LD_EXP 3
14955: AND
14956: PUSH
14957: LD_INT 23
14959: PPUSH
14960: LD_INT 3
14962: PPUSH
14963: CALL_OW 321
14967: PUSH
14968: LD_INT 2
14970: EQUAL
14971: AND
14972: IFFALSE 15099
14974: GO 14976
14976: DISABLE
14977: LD_INT 0
14979: PPUSH
14980: PPUSH
// begin tmp := UnitFilter ( mc_bases [ mc_rus_1 ] , [ f_class , 3 ] ) ;
14981: LD_ADDR_VAR 0 1
14985: PUSH
14986: LD_EXP 36
14990: PUSH
14991: LD_EXP 7
14995: ARRAY
14996: PPUSH
14997: LD_INT 25
14999: PUSH
15000: LD_INT 3
15002: PUSH
15003: EMPTY
15004: LIST
15005: LIST
15006: PPUSH
15007: CALL_OW 72
15011: ST_TO_ADDR
// if not tmp then
15012: LD_VAR 0 1
15016: NOT
15017: IFFALSE 15021
// exit ;
15019: GO 15099
// for i in tmp do
15021: LD_ADDR_VAR 0 2
15025: PUSH
15026: LD_VAR 0 1
15030: PUSH
15031: FOR_IN
15032: IFFALSE 15078
// begin SetTag ( i , 29 ) ;
15034: LD_VAR 0 2
15038: PPUSH
15039: LD_INT 29
15041: PPUSH
15042: CALL_OW 109
// ComExitBuilding ( i ) ;
15046: LD_VAR 0 2
15050: PPUSH
15051: CALL_OW 122
// AddComBuildBehemoth ( i , b_behemoth , 97 , 133 , 0 ) ;
15055: LD_VAR 0 2
15059: PPUSH
15060: LD_INT 37
15062: PPUSH
15063: LD_INT 97
15065: PPUSH
15066: LD_INT 133
15068: PPUSH
15069: LD_INT 0
15071: PPUSH
15072: CALL_OW 230
// end ;
15076: GO 15031
15078: POP
15079: POP
// wait ( 1 1$00 ) ;
15080: LD_INT 2100
15082: PPUSH
15083: CALL_OW 67
// MC_Reset ( mc_rus_1 , 29 ) ;
15087: LD_EXP 7
15091: PPUSH
15092: LD_INT 29
15094: PPUSH
15095: CALL 66473 0 2
// end ;
15099: PPOPN 2
15101: END
// every 7 7$00 trigger GameType = 1 and GetBType ( HexInfo ( 84 , 128 ) ) = b_warehouse do var veh , depot ;
15102: LD_EXP 2
15106: PUSH
15107: LD_INT 1
15109: EQUAL
15110: PUSH
15111: LD_INT 84
15113: PPUSH
15114: LD_INT 128
15116: PPUSH
15117: CALL_OW 428
15121: PPUSH
15122: CALL_OW 266
15126: PUSH
15127: LD_INT 1
15129: EQUAL
15130: AND
15131: IFFALSE 15304
15133: GO 15135
15135: DISABLE
15136: LD_INT 0
15138: PPUSH
15139: PPUSH
// begin enable ;
15140: ENABLE
// depot := HexInfo ( 84 , 128 ) ;
15141: LD_ADDR_VAR 0 2
15145: PUSH
15146: LD_INT 84
15148: PPUSH
15149: LD_INT 128
15151: PPUSH
15152: CALL_OW 428
15156: ST_TO_ADDR
// uc_side := 3 ;
15157: LD_ADDR_OWVAR 20
15161: PUSH
15162: LD_INT 3
15164: ST_TO_ADDR
// uc_nation := 3 ;
15165: LD_ADDR_OWVAR 21
15169: PUSH
15170: LD_INT 3
15172: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_siberite , control_computer , ru_cargo_bay , 0 ) ;
15173: LD_INT 21
15175: PPUSH
15176: LD_INT 3
15178: PPUSH
15179: LD_INT 3
15181: PPUSH
15182: LD_INT 51
15184: PPUSH
15185: LD_INT 0
15187: PPUSH
15188: CALL 26304 0 5
// veh := CreateVehicle ;
15192: LD_ADDR_VAR 0 1
15196: PUSH
15197: CALL_OW 45
15201: ST_TO_ADDR
// PlaceUnitXY ( veh , 126 , 227 , false ) ;
15202: LD_VAR 0 1
15206: PPUSH
15207: LD_INT 126
15209: PPUSH
15210: LD_INT 227
15212: PPUSH
15213: LD_INT 0
15215: PPUSH
15216: CALL_OW 48
// SetCargo ( veh , mat_oil , 100 ) ;
15220: LD_VAR 0 1
15224: PPUSH
15225: LD_INT 2
15227: PPUSH
15228: LD_INT 100
15230: PPUSH
15231: CALL_OW 290
// ComGive ( veh , depot ) ;
15235: LD_VAR 0 1
15239: PPUSH
15240: LD_VAR 0 2
15244: PPUSH
15245: CALL_OW 161
// AddComMoveXY ( veh , 126 , 227 ) ;
15249: LD_VAR 0 1
15253: PPUSH
15254: LD_INT 126
15256: PPUSH
15257: LD_INT 227
15259: PPUSH
15260: CALL_OW 171
// wait ( 0 0$10 ) ;
15264: LD_INT 350
15266: PPUSH
15267: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
15271: LD_INT 35
15273: PPUSH
15274: CALL_OW 67
// until IsAt ( veh , 126 , 227 ) ;
15278: LD_VAR 0 1
15282: PPUSH
15283: LD_INT 126
15285: PPUSH
15286: LD_INT 227
15288: PPUSH
15289: CALL_OW 307
15293: IFFALSE 15271
// RemoveUnit ( veh ) ;
15295: LD_VAR 0 1
15299: PPUSH
15300: CALL_OW 64
// end ;
15304: PPOPN 2
15306: END
// every 9 9$00 trigger GameType = 1 and outpostEscape and commander = 2 do var veh , depot ;
15307: LD_EXP 2
15311: PUSH
15312: LD_INT 1
15314: EQUAL
15315: PUSH
15316: LD_EXP 27
15320: AND
15321: PUSH
15322: LD_EXP 25
15326: PUSH
15327: LD_INT 2
15329: EQUAL
15330: AND
15331: IFFALSE 15523
15333: GO 15335
15335: DISABLE
15336: LD_INT 0
15338: PPUSH
15339: PPUSH
// begin enable ;
15340: ENABLE
// if tick >= [ 50 50$00 , 40 40$00 , 30 30$00 ] [ Difficulty ] then
15341: LD_OWVAR 1
15345: PUSH
15346: LD_INT 105000
15348: PUSH
15349: LD_INT 84000
15351: PUSH
15352: LD_INT 63000
15354: PUSH
15355: EMPTY
15356: LIST
15357: LIST
15358: LIST
15359: PUSH
15360: LD_OWVAR 67
15364: ARRAY
15365: GREATEREQUAL
15366: IFFALSE 15369
// disable ;
15368: DISABLE
// uc_side := 4 ;
15369: LD_ADDR_OWVAR 20
15373: PUSH
15374: LD_INT 4
15376: ST_TO_ADDR
// uc_nation := 1 ;
15377: LD_ADDR_OWVAR 21
15381: PUSH
15382: LD_INT 1
15384: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_cargo_bay , 0 ) ;
15385: LD_INT 2
15387: PPUSH
15388: LD_INT 3
15390: PPUSH
15391: LD_INT 3
15393: PPUSH
15394: LD_INT 12
15396: PPUSH
15397: LD_INT 0
15399: PPUSH
15400: CALL 26304 0 5
// veh := CreateVehicle ;
15404: LD_ADDR_VAR 0 1
15408: PUSH
15409: CALL_OW 45
15413: ST_TO_ADDR
// PlaceUnitXY ( veh , 229 , 226 , false ) ;
15414: LD_VAR 0 1
15418: PPUSH
15419: LD_INT 229
15421: PPUSH
15422: LD_INT 226
15424: PPUSH
15425: LD_INT 0
15427: PPUSH
15428: CALL_OW 48
// SetCargo ( veh , mat_cans , 100 ) ;
15432: LD_VAR 0 1
15436: PPUSH
15437: LD_INT 1
15439: PPUSH
15440: LD_INT 100
15442: PPUSH
15443: CALL_OW 290
// AddComMoveToArea ( veh , ruOutpostArea ) ;
15447: LD_VAR 0 1
15451: PPUSH
15452: LD_INT 25
15454: PPUSH
15455: CALL_OW 173
// AddComUnload ( veh ) ;
15459: LD_VAR 0 1
15463: PPUSH
15464: CALL_OW 219
// AddComMoveXY ( veh , 229 , 226 ) ;
15468: LD_VAR 0 1
15472: PPUSH
15473: LD_INT 229
15475: PPUSH
15476: LD_INT 226
15478: PPUSH
15479: CALL_OW 171
// wait ( 0 0$10 ) ;
15483: LD_INT 350
15485: PPUSH
15486: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
15490: LD_INT 35
15492: PPUSH
15493: CALL_OW 67
// until IsAt ( veh , 229 , 226 ) ;
15497: LD_VAR 0 1
15501: PPUSH
15502: LD_INT 229
15504: PPUSH
15505: LD_INT 226
15507: PPUSH
15508: CALL_OW 307
15512: IFFALSE 15490
// RemoveUnit ( veh ) ;
15514: LD_VAR 0 1
15518: PPUSH
15519: CALL_OW 64
// end ;
15523: PPOPN 2
15525: END
// every 15 15$00 trigger GameType = 1 and game and reinforceAllowed do var i , j , veh , tmp , amount ;
15526: LD_EXP 2
15530: PUSH
15531: LD_INT 1
15533: EQUAL
15534: PUSH
15535: LD_EXP 3
15539: AND
15540: PUSH
15541: LD_EXP 24
15545: AND
15546: IFFALSE 15879
15548: GO 15550
15550: DISABLE
15551: LD_INT 0
15553: PPUSH
15554: PPUSH
15555: PPUSH
15556: PPUSH
15557: PPUSH
// begin enable ;
15558: ENABLE
// tmp := [ ] ;
15559: LD_ADDR_VAR 0 4
15563: PUSH
15564: EMPTY
15565: ST_TO_ADDR
// if commander = 1 then
15566: LD_EXP 25
15570: PUSH
15571: LD_INT 1
15573: EQUAL
15574: IFFALSE 15586
// amount := 3 else
15576: LD_ADDR_VAR 0 5
15580: PUSH
15581: LD_INT 3
15583: ST_TO_ADDR
15584: GO 15594
// amount := 2 ;
15586: LD_ADDR_VAR 0 5
15590: PUSH
15591: LD_INT 2
15593: ST_TO_ADDR
// for i = 1 to amount do
15594: LD_ADDR_VAR 0 1
15598: PUSH
15599: DOUBLE
15600: LD_INT 1
15602: DEC
15603: ST_TO_ADDR
15604: LD_VAR 0 5
15608: PUSH
15609: FOR_TO
15610: IFFALSE 15774
// begin wait ( 0 0$5 ) ;
15612: LD_INT 175
15614: PPUSH
15615: CALL_OW 67
// for j = 1 to 3 do
15619: LD_ADDR_VAR 0 2
15623: PUSH
15624: DOUBLE
15625: LD_INT 1
15627: DEC
15628: ST_TO_ADDR
15629: LD_INT 3
15631: PUSH
15632: FOR_TO
15633: IFFALSE 15770
// begin uc_side := 4 ;
15635: LD_ADDR_OWVAR 20
15639: PUSH
15640: LD_INT 4
15642: ST_TO_ADDR
// uc_nation := 1 ;
15643: LD_ADDR_OWVAR 21
15647: PUSH
15648: LD_INT 1
15650: ST_TO_ADDR
// PrepareVehicle ( [ us_medium_tracked , us_morphling ] [ rand ( 1 , 2 ) ] , engine_siberite , control_computer , [ us_laser , us_double_gun , us_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
15651: LD_INT 3
15653: PUSH
15654: LD_INT 5
15656: PUSH
15657: EMPTY
15658: LIST
15659: LIST
15660: PUSH
15661: LD_INT 1
15663: PPUSH
15664: LD_INT 2
15666: PPUSH
15667: CALL_OW 12
15671: ARRAY
15672: PPUSH
15673: LD_INT 3
15675: PPUSH
15676: LD_INT 3
15678: PPUSH
15679: LD_INT 9
15681: PUSH
15682: LD_INT 5
15684: PUSH
15685: LD_INT 7
15687: PUSH
15688: EMPTY
15689: LIST
15690: LIST
15691: LIST
15692: PUSH
15693: LD_INT 1
15695: PPUSH
15696: LD_INT 3
15698: PPUSH
15699: CALL_OW 12
15703: ARRAY
15704: PPUSH
15705: LD_INT 100
15707: PPUSH
15708: CALL 26304 0 5
// veh := CreateVehicle ;
15712: LD_ADDR_VAR 0 3
15716: PUSH
15717: CALL_OW 45
15721: ST_TO_ADDR
// tmp := tmp ^ veh ;
15722: LD_ADDR_VAR 0 4
15726: PUSH
15727: LD_VAR 0 4
15731: PUSH
15732: LD_VAR 0 3
15736: ADD
15737: ST_TO_ADDR
// PlaceUnitArea ( veh , westSpawn , false ) ;
15738: LD_VAR 0 3
15742: PPUSH
15743: LD_INT 22
15745: PPUSH
15746: LD_INT 0
15748: PPUSH
15749: CALL_OW 49
// ComMoveXY ( veh , 119 , 215 ) ;
15753: LD_VAR 0 3
15757: PPUSH
15758: LD_INT 119
15760: PPUSH
15761: LD_INT 215
15763: PPUSH
15764: CALL_OW 111
// end ;
15768: GO 15632
15770: POP
15771: POP
// end ;
15772: GO 15609
15774: POP
15775: POP
// wait ( 0 0$3 ) ;
15776: LD_INT 105
15778: PPUSH
15779: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
15783: LD_INT 35
15785: PPUSH
15786: CALL_OW 67
// for i in tmp do
15790: LD_ADDR_VAR 0 1
15794: PUSH
15795: LD_VAR 0 4
15799: PUSH
15800: FOR_IN
15801: IFFALSE 15868
// if IsDead ( i ) then
15803: LD_VAR 0 1
15807: PPUSH
15808: CALL_OW 301
15812: IFFALSE 15832
// tmp := tmp diff i else
15814: LD_ADDR_VAR 0 4
15818: PUSH
15819: LD_VAR 0 4
15823: PUSH
15824: LD_VAR 0 1
15828: DIFF
15829: ST_TO_ADDR
15830: GO 15866
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 4 ] ) , i ) ) ;
15832: LD_VAR 0 1
15836: PPUSH
15837: LD_INT 81
15839: PUSH
15840: LD_INT 4
15842: PUSH
15843: EMPTY
15844: LIST
15845: LIST
15846: PPUSH
15847: CALL_OW 69
15851: PPUSH
15852: LD_VAR 0 1
15856: PPUSH
15857: CALL_OW 74
15861: PPUSH
15862: CALL_OW 115
15866: GO 15800
15868: POP
15869: POP
// until tmp = [ ] ;
15870: LD_VAR 0 4
15874: PUSH
15875: EMPTY
15876: EQUAL
15877: IFFALSE 15783
// end ;
15879: PPOPN 5
15881: END
// every 0 0$1 trigger GameType = 1 and game do var i , tmp ;
15882: LD_EXP 2
15886: PUSH
15887: LD_INT 1
15889: EQUAL
15890: PUSH
15891: LD_EXP 3
15895: AND
15896: IFFALSE 15997
15898: GO 15900
15900: DISABLE
15901: LD_INT 0
15903: PPUSH
15904: PPUSH
// begin enable ;
15905: ENABLE
// tmp := FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) ;
15906: LD_ADDR_VAR 0 2
15910: PUSH
15911: LD_INT 3
15913: PUSH
15914: LD_INT 22
15916: PUSH
15917: LD_INT 1
15919: PUSH
15920: EMPTY
15921: LIST
15922: LIST
15923: PUSH
15924: EMPTY
15925: LIST
15926: LIST
15927: PUSH
15928: LD_INT 32
15930: PUSH
15931: LD_INT 1
15933: PUSH
15934: EMPTY
15935: LIST
15936: LIST
15937: PUSH
15938: EMPTY
15939: LIST
15940: LIST
15941: PPUSH
15942: CALL_OW 69
15946: ST_TO_ADDR
// if tmp then
15947: LD_VAR 0 2
15951: IFFALSE 15997
// for i in tmp do
15953: LD_ADDR_VAR 0 1
15957: PUSH
15958: LD_VAR 0 2
15962: PUSH
15963: FOR_IN
15964: IFFALSE 15995
// if GetFuel ( i ) < 3 then
15966: LD_VAR 0 1
15970: PPUSH
15971: CALL_OW 261
15975: PUSH
15976: LD_INT 3
15978: LESS
15979: IFFALSE 15993
// SetFuel ( i , 3 ) ;
15981: LD_VAR 0 1
15985: PPUSH
15986: LD_INT 3
15988: PPUSH
15989: CALL_OW 240
15993: GO 15963
15995: POP
15996: POP
// end ;
15997: PPOPN 2
15999: END
// every 15 15$00 trigger game and GetAttitude ( 8 , 4 ) = att_enemy do var i , un , tmp ;
16000: LD_EXP 3
16004: PUSH
16005: LD_INT 8
16007: PPUSH
16008: LD_INT 4
16010: PPUSH
16011: CALL_OW 81
16015: PUSH
16016: LD_INT 2
16018: EQUAL
16019: AND
16020: IFFALSE 16230
16022: GO 16024
16024: DISABLE
16025: LD_INT 0
16027: PPUSH
16028: PPUSH
16029: PPUSH
// begin enable ;
16030: ENABLE
// tmp := [ ] ;
16031: LD_ADDR_VAR 0 3
16035: PUSH
16036: EMPTY
16037: ST_TO_ADDR
// for i = 1 to 4 do
16038: LD_ADDR_VAR 0 1
16042: PUSH
16043: DOUBLE
16044: LD_INT 1
16046: DEC
16047: ST_TO_ADDR
16048: LD_INT 4
16050: PUSH
16051: FOR_TO
16052: IFFALSE 16196
// begin uc_side := 8 ;
16054: LD_ADDR_OWVAR 20
16058: PUSH
16059: LD_INT 8
16061: ST_TO_ADDR
// uc_nation := nation_arabian ;
16062: LD_ADDR_OWVAR 21
16066: PUSH
16067: LD_INT 2
16069: ST_TO_ADDR
// PrepareVehicle ( ar_hovercraft , engine_combustion , control_apeman , [ ar_double_machine_gun , ar_light_gun ] [ rand ( 1 , 2 ) ] , rand ( 60 , 80 ) ) ;
16070: LD_INT 11
16072: PPUSH
16073: LD_INT 1
16075: PPUSH
16076: LD_INT 5
16078: PPUSH
16079: LD_INT 24
16081: PUSH
16082: LD_INT 23
16084: PUSH
16085: EMPTY
16086: LIST
16087: LIST
16088: PUSH
16089: LD_INT 1
16091: PPUSH
16092: LD_INT 2
16094: PPUSH
16095: CALL_OW 12
16099: ARRAY
16100: PPUSH
16101: LD_INT 60
16103: PPUSH
16104: LD_INT 80
16106: PPUSH
16107: CALL_OW 12
16111: PPUSH
16112: CALL 26304 0 5
// un := CreateVehicle ;
16116: LD_ADDR_VAR 0 2
16120: PUSH
16121: CALL_OW 45
16125: ST_TO_ADDR
// SetDir ( un , 2 ) ;
16126: LD_VAR 0 2
16130: PPUSH
16131: LD_INT 2
16133: PPUSH
16134: CALL_OW 233
// tmp := tmp ^ un ;
16138: LD_ADDR_VAR 0 3
16142: PUSH
16143: LD_VAR 0 3
16147: PUSH
16148: LD_VAR 0 2
16152: ADD
16153: ST_TO_ADDR
// PlaceUnitXY ( un , 88 , 2 , false ) ;
16154: LD_VAR 0 2
16158: PPUSH
16159: LD_INT 88
16161: PPUSH
16162: LD_INT 2
16164: PPUSH
16165: LD_INT 0
16167: PPUSH
16168: CALL_OW 48
// ComMoveXY ( un , 93 , 13 ) ;
16172: LD_VAR 0 2
16176: PPUSH
16177: LD_INT 93
16179: PPUSH
16180: LD_INT 13
16182: PPUSH
16183: CALL_OW 111
// wait ( 0 0$2 ) ;
16187: LD_INT 70
16189: PPUSH
16190: CALL_OW 67
// end ;
16194: GO 16051
16196: POP
16197: POP
// for i in tmp do
16198: LD_ADDR_VAR 0 1
16202: PUSH
16203: LD_VAR 0 3
16207: PUSH
16208: FOR_IN
16209: IFFALSE 16228
// AddComMoveXY ( i , 136 , 19 ) ;
16211: LD_VAR 0 1
16215: PPUSH
16216: LD_INT 136
16218: PPUSH
16219: LD_INT 19
16221: PPUSH
16222: CALL_OW 171
16226: GO 16208
16228: POP
16229: POP
// end ;
16230: PPOPN 3
16232: END
// every 7 7$30 + 7 7$30 trigger game and not MC_GetVehicles ( mc_leg , true ) do var i , base , tmp , target ;
16233: LD_EXP 3
16237: PUSH
16238: LD_EXP 6
16242: PPUSH
16243: LD_INT 1
16245: PPUSH
16246: CALL 87396 0 2
16250: NOT
16251: AND
16252: IFFALSE 17171
16254: GO 16256
16256: DISABLE
16257: LD_INT 0
16259: PPUSH
16260: PPUSH
16261: PPUSH
16262: PPUSH
// begin enable ;
16263: ENABLE
// base := mc_leg ;
16264: LD_ADDR_VAR 0 2
16268: PUSH
16269: LD_EXP 6
16273: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 8 ] , [ f_nation , 2 ] , [ f_btype , b_factory ] ] ) then
16274: LD_INT 22
16276: PUSH
16277: LD_INT 8
16279: PUSH
16280: EMPTY
16281: LIST
16282: LIST
16283: PUSH
16284: LD_INT 23
16286: PUSH
16287: LD_INT 2
16289: PUSH
16290: EMPTY
16291: LIST
16292: LIST
16293: PUSH
16294: LD_INT 30
16296: PUSH
16297: LD_INT 3
16299: PUSH
16300: EMPTY
16301: LIST
16302: LIST
16303: PUSH
16304: EMPTY
16305: LIST
16306: LIST
16307: LIST
16308: PPUSH
16309: CALL_OW 69
16313: NOT
16314: IFFALSE 16318
// exit ;
16316: GO 17171
// if Prob ( 40 ) then
16318: LD_INT 40
16320: PPUSH
16321: CALL_OW 13
16325: IFFALSE 16454
// begin MC_InsertProduceList ( base , [ [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_flame_thrower ] , ] ) ;
16327: LD_VAR 0 2
16331: PPUSH
16332: LD_INT 13
16334: PUSH
16335: LD_INT 1
16337: PUSH
16338: LD_INT 2
16340: PUSH
16341: LD_INT 28
16343: PUSH
16344: EMPTY
16345: LIST
16346: LIST
16347: LIST
16348: LIST
16349: PUSH
16350: LD_INT 13
16352: PUSH
16353: LD_INT 1
16355: PUSH
16356: LD_INT 2
16358: PUSH
16359: LD_INT 28
16361: PUSH
16362: EMPTY
16363: LIST
16364: LIST
16365: LIST
16366: LIST
16367: PUSH
16368: LD_INT 13
16370: PUSH
16371: LD_INT 1
16373: PUSH
16374: LD_INT 2
16376: PUSH
16377: LD_INT 28
16379: PUSH
16380: EMPTY
16381: LIST
16382: LIST
16383: LIST
16384: LIST
16385: PUSH
16386: LD_INT 13
16388: PUSH
16389: LD_INT 1
16391: PUSH
16392: LD_INT 2
16394: PUSH
16395: LD_INT 28
16397: PUSH
16398: EMPTY
16399: LIST
16400: LIST
16401: LIST
16402: LIST
16403: PUSH
16404: LD_INT 13
16406: PUSH
16407: LD_INT 1
16409: PUSH
16410: LD_INT 2
16412: PUSH
16413: LD_INT 28
16415: PUSH
16416: EMPTY
16417: LIST
16418: LIST
16419: LIST
16420: LIST
16421: PUSH
16422: LD_INT 13
16424: PUSH
16425: LD_INT 1
16427: PUSH
16428: LD_INT 2
16430: PUSH
16431: LD_INT 26
16433: PUSH
16434: EMPTY
16435: LIST
16436: LIST
16437: LIST
16438: LIST
16439: PUSH
16440: EMPTY
16441: LIST
16442: LIST
16443: LIST
16444: LIST
16445: LIST
16446: LIST
16447: PPUSH
16448: CALL 85978 0 2
// end else
16452: GO 16671
// begin MC_InsertProduceList ( base , [ [ ar_medium_trike , engine_combustion , control_remote , [ ar_gun , ar_flame_thrower , ar_flame_thrower ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_gun , ar_flame_thrower , ar_flame_thrower ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_flame_thrower , ar_flame_thrower , ar_selfpropelled_bomb ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_flame_thrower , ar_selfpropelled_bomb , ar_selfpropelled_bomb ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , ar_selfpropelled_bomb ] , [ ar_medium_trike , engine_combustion , control_remote , ar_flame_thrower ] , ] ) ;
16454: LD_VAR 0 2
16458: PPUSH
16459: LD_INT 13
16461: PUSH
16462: LD_INT 1
16464: PUSH
16465: LD_INT 2
16467: PUSH
16468: LD_INT 27
16470: PUSH
16471: LD_INT 26
16473: PUSH
16474: LD_INT 26
16476: PUSH
16477: EMPTY
16478: LIST
16479: LIST
16480: LIST
16481: PUSH
16482: LD_INT 1
16484: PPUSH
16485: LD_INT 3
16487: PPUSH
16488: CALL_OW 12
16492: ARRAY
16493: PUSH
16494: EMPTY
16495: LIST
16496: LIST
16497: LIST
16498: LIST
16499: PUSH
16500: LD_INT 13
16502: PUSH
16503: LD_INT 1
16505: PUSH
16506: LD_INT 2
16508: PUSH
16509: LD_INT 27
16511: PUSH
16512: LD_INT 26
16514: PUSH
16515: LD_INT 26
16517: PUSH
16518: EMPTY
16519: LIST
16520: LIST
16521: LIST
16522: PUSH
16523: LD_INT 1
16525: PPUSH
16526: LD_INT 3
16528: PPUSH
16529: CALL_OW 12
16533: ARRAY
16534: PUSH
16535: EMPTY
16536: LIST
16537: LIST
16538: LIST
16539: LIST
16540: PUSH
16541: LD_INT 13
16543: PUSH
16544: LD_INT 1
16546: PUSH
16547: LD_INT 2
16549: PUSH
16550: LD_INT 26
16552: PUSH
16553: LD_INT 26
16555: PUSH
16556: LD_INT 29
16558: PUSH
16559: EMPTY
16560: LIST
16561: LIST
16562: LIST
16563: PUSH
16564: LD_INT 1
16566: PPUSH
16567: LD_INT 3
16569: PPUSH
16570: CALL_OW 12
16574: ARRAY
16575: PUSH
16576: EMPTY
16577: LIST
16578: LIST
16579: LIST
16580: LIST
16581: PUSH
16582: LD_INT 13
16584: PUSH
16585: LD_INT 1
16587: PUSH
16588: LD_INT 2
16590: PUSH
16591: LD_INT 26
16593: PUSH
16594: LD_INT 29
16596: PUSH
16597: LD_INT 29
16599: PUSH
16600: EMPTY
16601: LIST
16602: LIST
16603: LIST
16604: PUSH
16605: LD_INT 1
16607: PPUSH
16608: LD_INT 3
16610: PPUSH
16611: CALL_OW 12
16615: ARRAY
16616: PUSH
16617: EMPTY
16618: LIST
16619: LIST
16620: LIST
16621: LIST
16622: PUSH
16623: LD_INT 13
16625: PUSH
16626: LD_INT 1
16628: PUSH
16629: LD_INT 2
16631: PUSH
16632: LD_INT 29
16634: PUSH
16635: EMPTY
16636: LIST
16637: LIST
16638: LIST
16639: LIST
16640: PUSH
16641: LD_INT 13
16643: PUSH
16644: LD_INT 1
16646: PUSH
16647: LD_INT 2
16649: PUSH
16650: LD_INT 26
16652: PUSH
16653: EMPTY
16654: LIST
16655: LIST
16656: LIST
16657: LIST
16658: PUSH
16659: EMPTY
16660: LIST
16661: LIST
16662: LIST
16663: LIST
16664: LIST
16665: LIST
16666: PPUSH
16667: CALL 85978 0 2
// end ; repeat wait ( 0 0$1 ) ;
16671: LD_INT 35
16673: PPUSH
16674: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= 6 or tick mod 10 10$00 = 0 ;
16678: LD_VAR 0 2
16682: PPUSH
16683: LD_INT 1
16685: PPUSH
16686: CALL 87396 0 2
16690: PUSH
16691: LD_INT 6
16693: GREATEREQUAL
16694: PUSH
16695: LD_OWVAR 1
16699: PUSH
16700: LD_INT 21000
16702: MOD
16703: PUSH
16704: LD_INT 0
16706: EQUAL
16707: OR
16708: IFFALSE 16671
// wait ( 0 0$30 ) ;
16710: LD_INT 1050
16712: PPUSH
16713: CALL_OW 67
// tmp := MC_GetVehicles ( base , true ) ;
16717: LD_ADDR_VAR 0 3
16721: PUSH
16722: LD_VAR 0 2
16726: PPUSH
16727: LD_INT 1
16729: PPUSH
16730: CALL 87396 0 2
16734: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff tmp ) ;
16735: LD_ADDR_EXP 55
16739: PUSH
16740: LD_EXP 55
16744: PPUSH
16745: LD_VAR 0 2
16749: PPUSH
16750: LD_EXP 55
16754: PUSH
16755: LD_VAR 0 2
16759: ARRAY
16760: PUSH
16761: LD_VAR 0 3
16765: DIFF
16766: PPUSH
16767: CALL_OW 1
16771: ST_TO_ADDR
// target := rand ( 0 , 2 ) ;
16772: LD_ADDR_VAR 0 4
16776: PUSH
16777: LD_INT 0
16779: PPUSH
16780: LD_INT 2
16782: PPUSH
16783: CALL_OW 12
16787: ST_TO_ADDR
// if legChangeSide then
16788: LD_EXP 21
16792: IFFALSE 16802
// target := 2 ;
16794: LD_ADDR_VAR 0 4
16798: PUSH
16799: LD_INT 2
16801: ST_TO_ADDR
// if target = 2 then
16802: LD_VAR 0 4
16806: PUSH
16807: LD_INT 2
16809: EQUAL
16810: IFFALSE 16938
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
16812: LD_ADDR_VAR 0 3
16816: PUSH
16817: LD_VAR 0 3
16821: PPUSH
16822: LD_INT 24
16824: PUSH
16825: LD_INT 250
16827: PUSH
16828: EMPTY
16829: LIST
16830: LIST
16831: PPUSH
16832: CALL_OW 72
16836: ST_TO_ADDR
// for i in tmp do
16837: LD_ADDR_VAR 0 1
16841: PUSH
16842: LD_VAR 0 3
16846: PUSH
16847: FOR_IN
16848: IFFALSE 16888
// if GetDistUnitXY ( i , 112 , 64 ) > 9 then
16850: LD_VAR 0 1
16854: PPUSH
16855: LD_INT 112
16857: PPUSH
16858: LD_INT 64
16860: PPUSH
16861: CALL_OW 297
16865: PUSH
16866: LD_INT 9
16868: GREATER
16869: IFFALSE 16886
// ComMoveXY ( i , 112 , 64 ) ;
16871: LD_VAR 0 1
16875: PPUSH
16876: LD_INT 112
16878: PPUSH
16879: LD_INT 64
16881: PPUSH
16882: CALL_OW 111
16886: GO 16847
16888: POP
16889: POP
// wait ( 0 0$1 ) ;
16890: LD_INT 35
16892: PPUSH
16893: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 112 , 64 , 9 ] ) >= ( tmp - 1 ) ;
16897: LD_VAR 0 3
16901: PPUSH
16902: LD_INT 92
16904: PUSH
16905: LD_INT 112
16907: PUSH
16908: LD_INT 64
16910: PUSH
16911: LD_INT 9
16913: PUSH
16914: EMPTY
16915: LIST
16916: LIST
16917: LIST
16918: LIST
16919: PPUSH
16920: CALL_OW 72
16924: PUSH
16925: LD_VAR 0 3
16929: PUSH
16930: LD_INT 1
16932: MINUS
16933: GREATEREQUAL
16934: IFFALSE 16812
// end else
16936: GO 17062
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
16938: LD_ADDR_VAR 0 3
16942: PUSH
16943: LD_VAR 0 3
16947: PPUSH
16948: LD_INT 24
16950: PUSH
16951: LD_INT 250
16953: PUSH
16954: EMPTY
16955: LIST
16956: LIST
16957: PPUSH
16958: CALL_OW 72
16962: ST_TO_ADDR
// for i in tmp do
16963: LD_ADDR_VAR 0 1
16967: PUSH
16968: LD_VAR 0 3
16972: PUSH
16973: FOR_IN
16974: IFFALSE 17014
// if GetDistUnitXY ( i , 174 , 94 ) > 9 then
16976: LD_VAR 0 1
16980: PPUSH
16981: LD_INT 174
16983: PPUSH
16984: LD_INT 94
16986: PPUSH
16987: CALL_OW 297
16991: PUSH
16992: LD_INT 9
16994: GREATER
16995: IFFALSE 17012
// ComMoveXY ( i , 174 , 94 ) ;
16997: LD_VAR 0 1
17001: PPUSH
17002: LD_INT 174
17004: PPUSH
17005: LD_INT 94
17007: PPUSH
17008: CALL_OW 111
17012: GO 16973
17014: POP
17015: POP
// wait ( 0 0$1 ) ;
17016: LD_INT 35
17018: PPUSH
17019: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 174 , 94 , 9 ] ) >= ( tmp - 1 ) ;
17023: LD_VAR 0 3
17027: PPUSH
17028: LD_INT 92
17030: PUSH
17031: LD_INT 174
17033: PUSH
17034: LD_INT 94
17036: PUSH
17037: LD_INT 9
17039: PUSH
17040: EMPTY
17041: LIST
17042: LIST
17043: LIST
17044: LIST
17045: PPUSH
17046: CALL_OW 72
17050: PUSH
17051: LD_VAR 0 3
17055: PUSH
17056: LD_INT 1
17058: MINUS
17059: GREATEREQUAL
17060: IFFALSE 16938
// end ; repeat wait ( 0 0$1 ) ;
17062: LD_INT 35
17064: PPUSH
17065: CALL_OW 67
// for i in tmp do
17069: LD_ADDR_VAR 0 1
17073: PUSH
17074: LD_VAR 0 3
17078: PUSH
17079: FOR_IN
17080: IFFALSE 17162
// begin if GetLives ( i ) > 251 then
17082: LD_VAR 0 1
17086: PPUSH
17087: CALL_OW 256
17091: PUSH
17092: LD_INT 251
17094: GREATER
17095: IFFALSE 17133
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 8 ] ) , i ) ) else
17097: LD_VAR 0 1
17101: PPUSH
17102: LD_INT 81
17104: PUSH
17105: LD_INT 8
17107: PUSH
17108: EMPTY
17109: LIST
17110: LIST
17111: PPUSH
17112: CALL_OW 69
17116: PPUSH
17117: LD_VAR 0 1
17121: PPUSH
17122: CALL_OW 74
17126: PPUSH
17127: CALL_OW 115
17131: GO 17160
// if IsDead ( i ) then
17133: LD_VAR 0 1
17137: PPUSH
17138: CALL_OW 301
17142: IFFALSE 17160
// tmp := tmp diff i ;
17144: LD_ADDR_VAR 0 3
17148: PUSH
17149: LD_VAR 0 3
17153: PUSH
17154: LD_VAR 0 1
17158: DIFF
17159: ST_TO_ADDR
// end ;
17160: GO 17079
17162: POP
17163: POP
// until not tmp ;
17164: LD_VAR 0 3
17168: NOT
17169: IFFALSE 17062
// end ;
17171: PPOPN 4
17173: END
// every 7 7$30 trigger game and not MC_GetVehicles ( mc_rus_2 , true ) do var i , base , tmp , target , teleport ;
17174: LD_EXP 3
17178: PUSH
17179: LD_EXP 8
17183: PPUSH
17184: LD_INT 1
17186: PPUSH
17187: CALL 87396 0 2
17191: NOT
17192: AND
17193: IFFALSE 18181
17195: GO 17197
17197: DISABLE
17198: LD_INT 0
17200: PPUSH
17201: PPUSH
17202: PPUSH
17203: PPUSH
17204: PPUSH
// begin enable ;
17205: ENABLE
// if not UnitFilter ( mc_bases [ mc_rus_2 ] , [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) then
17206: LD_EXP 36
17210: PUSH
17211: LD_EXP 8
17215: ARRAY
17216: PPUSH
17217: LD_INT 22
17219: PUSH
17220: LD_INT 3
17222: PUSH
17223: EMPTY
17224: LIST
17225: LIST
17226: PUSH
17227: LD_INT 30
17229: PUSH
17230: LD_INT 3
17232: PUSH
17233: EMPTY
17234: LIST
17235: LIST
17236: PUSH
17237: EMPTY
17238: LIST
17239: LIST
17240: PPUSH
17241: CALL_OW 72
17245: NOT
17246: IFFALSE 17250
// exit ;
17248: GO 18181
// base := mc_rus_2 ;
17250: LD_ADDR_VAR 0 2
17254: PUSH
17255: LD_EXP 8
17259: ST_TO_ADDR
// teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) ;
17260: LD_ADDR_VAR 0 5
17264: PUSH
17265: LD_INT 22
17267: PUSH
17268: LD_INT 3
17270: PUSH
17271: EMPTY
17272: LIST
17273: LIST
17274: PUSH
17275: LD_INT 30
17277: PUSH
17278: LD_INT 34
17280: PUSH
17281: EMPTY
17282: LIST
17283: LIST
17284: PUSH
17285: EMPTY
17286: LIST
17287: LIST
17288: PPUSH
17289: CALL_OW 69
17293: ST_TO_ADDR
// if Prob ( 40 ) then
17294: LD_INT 40
17296: PPUSH
17297: CALL_OW 13
17301: IFFALSE 17430
// begin MC_InsertProduceList ( base , [ [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] ] ) ;
17303: LD_VAR 0 2
17307: PPUSH
17308: LD_INT 22
17310: PUSH
17311: LD_INT 3
17313: PUSH
17314: LD_INT 3
17316: PUSH
17317: LD_INT 49
17319: PUSH
17320: EMPTY
17321: LIST
17322: LIST
17323: LIST
17324: LIST
17325: PUSH
17326: LD_INT 22
17328: PUSH
17329: LD_INT 3
17331: PUSH
17332: LD_INT 3
17334: PUSH
17335: LD_INT 49
17337: PUSH
17338: EMPTY
17339: LIST
17340: LIST
17341: LIST
17342: LIST
17343: PUSH
17344: LD_INT 22
17346: PUSH
17347: LD_INT 3
17349: PUSH
17350: LD_INT 3
17352: PUSH
17353: LD_INT 49
17355: PUSH
17356: EMPTY
17357: LIST
17358: LIST
17359: LIST
17360: LIST
17361: PUSH
17362: LD_INT 24
17364: PUSH
17365: LD_INT 3
17367: PUSH
17368: LD_INT 3
17370: PUSH
17371: LD_INT 46
17373: PUSH
17374: EMPTY
17375: LIST
17376: LIST
17377: LIST
17378: LIST
17379: PUSH
17380: LD_INT 24
17382: PUSH
17383: LD_INT 3
17385: PUSH
17386: LD_INT 3
17388: PUSH
17389: LD_INT 46
17391: PUSH
17392: EMPTY
17393: LIST
17394: LIST
17395: LIST
17396: LIST
17397: PUSH
17398: LD_INT 24
17400: PUSH
17401: LD_INT 3
17403: PUSH
17404: LD_INT 3
17406: PUSH
17407: LD_INT 46
17409: PUSH
17410: EMPTY
17411: LIST
17412: LIST
17413: LIST
17414: LIST
17415: PUSH
17416: EMPTY
17417: LIST
17418: LIST
17419: LIST
17420: LIST
17421: LIST
17422: LIST
17423: PPUSH
17424: CALL 85978 0 2
// end else
17428: GO 17555
// begin MC_InsertProduceList ( base , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] ] ) ;
17430: LD_VAR 0 2
17434: PPUSH
17435: LD_INT 24
17437: PUSH
17438: LD_INT 3
17440: PUSH
17441: LD_INT 3
17443: PUSH
17444: LD_INT 47
17446: PUSH
17447: EMPTY
17448: LIST
17449: LIST
17450: LIST
17451: LIST
17452: PUSH
17453: LD_INT 24
17455: PUSH
17456: LD_INT 3
17458: PUSH
17459: LD_INT 3
17461: PUSH
17462: LD_INT 47
17464: PUSH
17465: EMPTY
17466: LIST
17467: LIST
17468: LIST
17469: LIST
17470: PUSH
17471: LD_INT 24
17473: PUSH
17474: LD_INT 3
17476: PUSH
17477: LD_INT 3
17479: PUSH
17480: LD_INT 47
17482: PUSH
17483: EMPTY
17484: LIST
17485: LIST
17486: LIST
17487: LIST
17488: PUSH
17489: LD_INT 24
17491: PUSH
17492: LD_INT 3
17494: PUSH
17495: LD_INT 3
17497: PUSH
17498: LD_INT 46
17500: PUSH
17501: EMPTY
17502: LIST
17503: LIST
17504: LIST
17505: LIST
17506: PUSH
17507: LD_INT 24
17509: PUSH
17510: LD_INT 3
17512: PUSH
17513: LD_INT 3
17515: PUSH
17516: LD_INT 46
17518: PUSH
17519: EMPTY
17520: LIST
17521: LIST
17522: LIST
17523: LIST
17524: PUSH
17525: LD_INT 24
17527: PUSH
17528: LD_INT 3
17530: PUSH
17531: LD_INT 3
17533: PUSH
17534: LD_INT 46
17536: PUSH
17537: EMPTY
17538: LIST
17539: LIST
17540: LIST
17541: LIST
17542: PUSH
17543: EMPTY
17544: LIST
17545: LIST
17546: LIST
17547: LIST
17548: LIST
17549: LIST
17550: PPUSH
17551: CALL 85978 0 2
// end ; if Difficulty > 1 then
17555: LD_OWVAR 67
17559: PUSH
17560: LD_INT 1
17562: GREATER
17563: IFFALSE 17595
// MC_InsertProduceList ( base , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] ] ) ;
17565: LD_VAR 0 2
17569: PPUSH
17570: LD_INT 24
17572: PUSH
17573: LD_INT 3
17575: PUSH
17576: LD_INT 3
17578: PUSH
17579: LD_INT 47
17581: PUSH
17582: EMPTY
17583: LIST
17584: LIST
17585: LIST
17586: LIST
17587: PUSH
17588: EMPTY
17589: LIST
17590: PPUSH
17591: CALL 85978 0 2
// repeat wait ( 0 0$1 ) ;
17595: LD_INT 35
17597: PPUSH
17598: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= [ 6 , 7 , 7 ] [ Difficulty ] or tick mod 10 10$00 = 0 ;
17602: LD_VAR 0 2
17606: PPUSH
17607: LD_INT 1
17609: PPUSH
17610: CALL 87396 0 2
17614: PUSH
17615: LD_INT 6
17617: PUSH
17618: LD_INT 7
17620: PUSH
17621: LD_INT 7
17623: PUSH
17624: EMPTY
17625: LIST
17626: LIST
17627: LIST
17628: PUSH
17629: LD_OWVAR 67
17633: ARRAY
17634: GREATEREQUAL
17635: PUSH
17636: LD_OWVAR 1
17640: PUSH
17641: LD_INT 21000
17643: MOD
17644: PUSH
17645: LD_INT 0
17647: EQUAL
17648: OR
17649: IFFALSE 17595
// wait ( 0 0$45 ) ;
17651: LD_INT 1575
17653: PPUSH
17654: CALL_OW 67
// tmp := MC_GetVehicles ( base , true ) ;
17658: LD_ADDR_VAR 0 3
17662: PUSH
17663: LD_VAR 0 2
17667: PPUSH
17668: LD_INT 1
17670: PPUSH
17671: CALL 87396 0 2
17675: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff tmp ) ;
17676: LD_ADDR_EXP 55
17680: PUSH
17681: LD_EXP 55
17685: PPUSH
17686: LD_VAR 0 2
17690: PPUSH
17691: LD_EXP 55
17695: PUSH
17696: LD_VAR 0 2
17700: ARRAY
17701: PUSH
17702: LD_VAR 0 3
17706: DIFF
17707: PPUSH
17708: CALL_OW 1
17712: ST_TO_ADDR
// target := rand ( 0 , 1 ) ;
17713: LD_ADDR_VAR 0 4
17717: PUSH
17718: LD_INT 0
17720: PPUSH
17721: LD_INT 1
17723: PPUSH
17724: CALL_OW 12
17728: ST_TO_ADDR
// if target then
17729: LD_VAR 0 4
17733: IFFALSE 17861
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
17735: LD_ADDR_VAR 0 3
17739: PUSH
17740: LD_VAR 0 3
17744: PPUSH
17745: LD_INT 24
17747: PUSH
17748: LD_INT 250
17750: PUSH
17751: EMPTY
17752: LIST
17753: LIST
17754: PPUSH
17755: CALL_OW 72
17759: ST_TO_ADDR
// for i in tmp do
17760: LD_ADDR_VAR 0 1
17764: PUSH
17765: LD_VAR 0 3
17769: PUSH
17770: FOR_IN
17771: IFFALSE 17811
// if GetDistUnitXY ( i , 84 , 32 ) > 9 then
17773: LD_VAR 0 1
17777: PPUSH
17778: LD_INT 84
17780: PPUSH
17781: LD_INT 32
17783: PPUSH
17784: CALL_OW 297
17788: PUSH
17789: LD_INT 9
17791: GREATER
17792: IFFALSE 17809
// ComMoveXY ( i , 84 , 32 ) ;
17794: LD_VAR 0 1
17798: PPUSH
17799: LD_INT 84
17801: PPUSH
17802: LD_INT 32
17804: PPUSH
17805: CALL_OW 111
17809: GO 17770
17811: POP
17812: POP
// wait ( 0 0$1 ) ;
17813: LD_INT 35
17815: PPUSH
17816: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 84 , 32 , 9 ] ) >= ( tmp - 1 ) ;
17820: LD_VAR 0 3
17824: PPUSH
17825: LD_INT 92
17827: PUSH
17828: LD_INT 84
17830: PUSH
17831: LD_INT 32
17833: PUSH
17834: LD_INT 9
17836: PUSH
17837: EMPTY
17838: LIST
17839: LIST
17840: LIST
17841: LIST
17842: PPUSH
17843: CALL_OW 72
17847: PUSH
17848: LD_VAR 0 3
17852: PUSH
17853: LD_INT 1
17855: MINUS
17856: GREATEREQUAL
17857: IFFALSE 17735
// end else
17859: GO 18021
// begin if teleport then
17861: LD_VAR 0 5
17865: IFFALSE 17885
// ComEnterUnit ( tmp , teleport [ 1 ] ) ;
17867: LD_VAR 0 3
17871: PPUSH
17872: LD_VAR 0 5
17876: PUSH
17877: LD_INT 1
17879: ARRAY
17880: PPUSH
17881: CALL_OW 120
// repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
17885: LD_ADDR_VAR 0 3
17889: PUSH
17890: LD_VAR 0 3
17894: PPUSH
17895: LD_INT 24
17897: PUSH
17898: LD_INT 250
17900: PUSH
17901: EMPTY
17902: LIST
17903: LIST
17904: PPUSH
17905: CALL_OW 72
17909: ST_TO_ADDR
// for i in tmp do
17910: LD_ADDR_VAR 0 1
17914: PUSH
17915: LD_VAR 0 3
17919: PUSH
17920: FOR_IN
17921: IFFALSE 17973
// if GetDistUnitXY ( i , 140 , 219 ) > 9 and not HasTask ( i ) then
17923: LD_VAR 0 1
17927: PPUSH
17928: LD_INT 140
17930: PPUSH
17931: LD_INT 219
17933: PPUSH
17934: CALL_OW 297
17938: PUSH
17939: LD_INT 9
17941: GREATER
17942: PUSH
17943: LD_VAR 0 1
17947: PPUSH
17948: CALL_OW 314
17952: NOT
17953: AND
17954: IFFALSE 17971
// AddComMoveXY ( i , 140 , 219 ) ;
17956: LD_VAR 0 1
17960: PPUSH
17961: LD_INT 140
17963: PPUSH
17964: LD_INT 219
17966: PPUSH
17967: CALL_OW 171
17971: GO 17920
17973: POP
17974: POP
// wait ( 0 0$1 ) ;
17975: LD_INT 35
17977: PPUSH
17978: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 140 , 219 , 9 ] ) >= ( tmp - 1 ) ;
17982: LD_VAR 0 3
17986: PPUSH
17987: LD_INT 92
17989: PUSH
17990: LD_INT 140
17992: PUSH
17993: LD_INT 219
17995: PUSH
17996: LD_INT 9
17998: PUSH
17999: EMPTY
18000: LIST
18001: LIST
18002: LIST
18003: LIST
18004: PPUSH
18005: CALL_OW 72
18009: PUSH
18010: LD_VAR 0 3
18014: PUSH
18015: LD_INT 1
18017: MINUS
18018: GREATEREQUAL
18019: IFFALSE 17885
// end ; repeat wait ( 0 0$1 ) ;
18021: LD_INT 35
18023: PPUSH
18024: CALL_OW 67
// for i in tmp do
18028: LD_ADDR_VAR 0 1
18032: PUSH
18033: LD_VAR 0 3
18037: PUSH
18038: FOR_IN
18039: IFFALSE 18172
// begin if GetLives ( i ) > 251 then
18041: LD_VAR 0 1
18045: PPUSH
18046: CALL_OW 256
18050: PUSH
18051: LD_INT 251
18053: GREATER
18054: IFFALSE 18143
// begin if GetWeapon ( i ) = ru_time_lapser then
18056: LD_VAR 0 1
18060: PPUSH
18061: CALL_OW 264
18065: PUSH
18066: LD_INT 49
18068: EQUAL
18069: IFFALSE 18107
// ComMoveUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) else
18071: LD_VAR 0 1
18075: PPUSH
18076: LD_INT 81
18078: PUSH
18079: LD_INT 3
18081: PUSH
18082: EMPTY
18083: LIST
18084: LIST
18085: PPUSH
18086: CALL_OW 69
18090: PPUSH
18091: LD_VAR 0 1
18095: PPUSH
18096: CALL_OW 74
18100: PPUSH
18101: CALL_OW 112
18105: GO 18141
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
18107: LD_VAR 0 1
18111: PPUSH
18112: LD_INT 81
18114: PUSH
18115: LD_INT 3
18117: PUSH
18118: EMPTY
18119: LIST
18120: LIST
18121: PPUSH
18122: CALL_OW 69
18126: PPUSH
18127: LD_VAR 0 1
18131: PPUSH
18132: CALL_OW 74
18136: PPUSH
18137: CALL_OW 115
// end else
18141: GO 18170
// if IsDead ( i ) then
18143: LD_VAR 0 1
18147: PPUSH
18148: CALL_OW 301
18152: IFFALSE 18170
// tmp := tmp diff i ;
18154: LD_ADDR_VAR 0 3
18158: PUSH
18159: LD_VAR 0 3
18163: PUSH
18164: LD_VAR 0 1
18168: DIFF
18169: ST_TO_ADDR
// end ;
18170: GO 18038
18172: POP
18173: POP
// until not tmp ;
18174: LD_VAR 0 3
18178: NOT
18179: IFFALSE 18021
// end ;
18181: PPOPN 5
18183: END
// every 12 12$30 + 11 11$30 trigger game and not MC_GetVehicles ( mc_amer , true ) do var i , base , tmp , target ;
18184: LD_EXP 3
18188: PUSH
18189: LD_EXP 5
18193: PPUSH
18194: LD_INT 1
18196: PPUSH
18197: CALL 87396 0 2
18201: NOT
18202: AND
18203: IFFALSE 18585
18205: GO 18207
18207: DISABLE
18208: LD_INT 0
18210: PPUSH
18211: PPUSH
18212: PPUSH
18213: PPUSH
// begin enable ;
18214: ENABLE
// base := mc_amer ;
18215: LD_ADDR_VAR 0 2
18219: PUSH
18220: LD_EXP 5
18224: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 4 ] , [ f_nation , 1 ] , [ f_btype , b_factory ] ] ) then
18225: LD_INT 22
18227: PUSH
18228: LD_INT 4
18230: PUSH
18231: EMPTY
18232: LIST
18233: LIST
18234: PUSH
18235: LD_INT 23
18237: PUSH
18238: LD_INT 1
18240: PUSH
18241: EMPTY
18242: LIST
18243: LIST
18244: PUSH
18245: LD_INT 30
18247: PUSH
18248: LD_INT 3
18250: PUSH
18251: EMPTY
18252: LIST
18253: LIST
18254: PUSH
18255: EMPTY
18256: LIST
18257: LIST
18258: LIST
18259: PPUSH
18260: CALL_OW 69
18264: NOT
18265: IFFALSE 18269
// exit ;
18267: GO 18585
// MC_InsertProduceList ( base , [ [ us_medium_tracked , engine_combustion , control_remote , us_double_gun ] , [ us_medium_tracked , engine_combustion , control_remote , us_laser ] , [ us_medium_tracked , engine_combustion , control_remote , us_rocket_launcher ] , [ us_medium_tracked , engine_combustion , control_remote , us_rocket_launcher ] , [ us_medium_tracked , engine_combustion , control_remote , us_rocket_launcher ] ] ) ;
18269: LD_VAR 0 2
18273: PPUSH
18274: LD_INT 3
18276: PUSH
18277: LD_INT 1
18279: PUSH
18280: LD_INT 2
18282: PUSH
18283: LD_INT 5
18285: PUSH
18286: EMPTY
18287: LIST
18288: LIST
18289: LIST
18290: LIST
18291: PUSH
18292: LD_INT 3
18294: PUSH
18295: LD_INT 1
18297: PUSH
18298: LD_INT 2
18300: PUSH
18301: LD_INT 9
18303: PUSH
18304: EMPTY
18305: LIST
18306: LIST
18307: LIST
18308: LIST
18309: PUSH
18310: LD_INT 3
18312: PUSH
18313: LD_INT 1
18315: PUSH
18316: LD_INT 2
18318: PUSH
18319: LD_INT 7
18321: PUSH
18322: EMPTY
18323: LIST
18324: LIST
18325: LIST
18326: LIST
18327: PUSH
18328: LD_INT 3
18330: PUSH
18331: LD_INT 1
18333: PUSH
18334: LD_INT 2
18336: PUSH
18337: LD_INT 7
18339: PUSH
18340: EMPTY
18341: LIST
18342: LIST
18343: LIST
18344: LIST
18345: PUSH
18346: LD_INT 3
18348: PUSH
18349: LD_INT 1
18351: PUSH
18352: LD_INT 2
18354: PUSH
18355: LD_INT 7
18357: PUSH
18358: EMPTY
18359: LIST
18360: LIST
18361: LIST
18362: LIST
18363: PUSH
18364: EMPTY
18365: LIST
18366: LIST
18367: LIST
18368: LIST
18369: LIST
18370: PPUSH
18371: CALL 85978 0 2
// repeat wait ( 0 0$1 ) ;
18375: LD_INT 35
18377: PPUSH
18378: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= 5 or tick mod 10 10$00 = 0 ;
18382: LD_VAR 0 2
18386: PPUSH
18387: LD_INT 1
18389: PPUSH
18390: CALL 87396 0 2
18394: PUSH
18395: LD_INT 5
18397: GREATEREQUAL
18398: PUSH
18399: LD_OWVAR 1
18403: PUSH
18404: LD_INT 21000
18406: MOD
18407: PUSH
18408: LD_INT 0
18410: EQUAL
18411: OR
18412: IFFALSE 18375
// wait ( 0 0$30 ) ;
18414: LD_INT 1050
18416: PPUSH
18417: CALL_OW 67
// tmp := MC_GetVehicles ( base , true ) ;
18421: LD_ADDR_VAR 0 3
18425: PUSH
18426: LD_VAR 0 2
18430: PPUSH
18431: LD_INT 1
18433: PPUSH
18434: CALL 87396 0 2
18438: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff tmp ) ;
18439: LD_ADDR_EXP 55
18443: PUSH
18444: LD_EXP 55
18448: PPUSH
18449: LD_VAR 0 2
18453: PPUSH
18454: LD_EXP 55
18458: PUSH
18459: LD_VAR 0 2
18463: ARRAY
18464: PUSH
18465: LD_VAR 0 3
18469: DIFF
18470: PPUSH
18471: CALL_OW 1
18475: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18476: LD_INT 35
18478: PPUSH
18479: CALL_OW 67
// for i in tmp do
18483: LD_ADDR_VAR 0 1
18487: PUSH
18488: LD_VAR 0 3
18492: PUSH
18493: FOR_IN
18494: IFFALSE 18576
// begin if GetLives ( i ) > 251 then
18496: LD_VAR 0 1
18500: PPUSH
18501: CALL_OW 256
18505: PUSH
18506: LD_INT 251
18508: GREATER
18509: IFFALSE 18547
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 4 ] ) , i ) ) else
18511: LD_VAR 0 1
18515: PPUSH
18516: LD_INT 81
18518: PUSH
18519: LD_INT 4
18521: PUSH
18522: EMPTY
18523: LIST
18524: LIST
18525: PPUSH
18526: CALL_OW 69
18530: PPUSH
18531: LD_VAR 0 1
18535: PPUSH
18536: CALL_OW 74
18540: PPUSH
18541: CALL_OW 115
18545: GO 18574
// if IsDead ( i ) then
18547: LD_VAR 0 1
18551: PPUSH
18552: CALL_OW 301
18556: IFFALSE 18574
// tmp := tmp diff i ;
18558: LD_ADDR_VAR 0 3
18562: PUSH
18563: LD_VAR 0 3
18567: PUSH
18568: LD_VAR 0 1
18572: DIFF
18573: ST_TO_ADDR
// end ;
18574: GO 18493
18576: POP
18577: POP
// until not tmp ;
18578: LD_VAR 0 3
18582: NOT
18583: IFFALSE 18476
// end ; end_of_file
18585: PPOPN 4
18587: END
// export function CustomEvent ( event ) ; begin
18588: LD_INT 0
18590: PPUSH
// end ;
18591: LD_VAR 0 2
18595: RET
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 = 4 then
18596: LD_VAR 0 1
18600: PUSH
18601: LD_INT 1
18603: EQUAL
18604: PUSH
18605: LD_VAR 0 2
18609: PUSH
18610: LD_INT 4
18612: EQUAL
18613: AND
18614: IFFALSE 18642
// begin SayRadio ( Powell , DP-Lost ) ;
18616: LD_EXP 12
18620: PPUSH
18621: LD_STRING DP-Lost
18623: PPUSH
18624: CALL_OW 94
// wait ( 0 0$2 ) ;
18628: LD_INT 70
18630: PPUSH
18631: CALL_OW 67
// YouLost ( FriendlyFire ) ;
18635: LD_STRING FriendlyFire
18637: PPUSH
18638: CALL_OW 104
// end ; end ;
18642: PPOPN 2
18644: END
// on UnitDestroyed ( un ) do begin if GameType = 1 then
18645: LD_EXP 2
18649: PUSH
18650: LD_INT 1
18652: EQUAL
18653: IFFALSE 18888
// begin if un = playerCommander then
18655: LD_VAR 0 1
18659: PUSH
18660: LD_EXP 9
18664: EQUAL
18665: IFFALSE 18674
// YouLost ( commanderDied ) ;
18667: LD_STRING commanderDied
18669: PPUSH
18670: CALL_OW 104
// if un = allyCommander then
18674: LD_VAR 0 1
18678: PUSH
18679: LD_EXP 11
18683: EQUAL
18684: IFFALSE 18693
// YouLost ( Theta ) ;
18686: LD_STRING Theta
18688: PPUSH
18689: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_building ] ] ] ) then
18693: LD_VAR 0 1
18697: PUSH
18698: LD_INT 22
18700: PUSH
18701: LD_INT 8
18703: PUSH
18704: EMPTY
18705: LIST
18706: LIST
18707: PUSH
18708: LD_INT 2
18710: PUSH
18711: LD_INT 21
18713: PUSH
18714: LD_INT 1
18716: PUSH
18717: EMPTY
18718: LIST
18719: LIST
18720: PUSH
18721: LD_INT 21
18723: PUSH
18724: LD_INT 3
18726: PUSH
18727: EMPTY
18728: LIST
18729: LIST
18730: PUSH
18731: EMPTY
18732: LIST
18733: LIST
18734: LIST
18735: PUSH
18736: EMPTY
18737: LIST
18738: LIST
18739: PPUSH
18740: CALL_OW 69
18744: IN
18745: IFFALSE 18761
// legDestCounter := legDestCounter + 1 ;
18747: LD_ADDR_EXP 18
18751: PUSH
18752: LD_EXP 18
18756: PUSH
18757: LD_INT 1
18759: PLUS
18760: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_building ] ] ] ) then
18761: LD_VAR 0 1
18765: PUSH
18766: LD_INT 22
18768: PUSH
18769: LD_INT 4
18771: PUSH
18772: EMPTY
18773: LIST
18774: LIST
18775: PUSH
18776: LD_INT 2
18778: PUSH
18779: LD_INT 21
18781: PUSH
18782: LD_INT 1
18784: PUSH
18785: EMPTY
18786: LIST
18787: LIST
18788: PUSH
18789: LD_INT 21
18791: PUSH
18792: LD_INT 3
18794: PUSH
18795: EMPTY
18796: LIST
18797: LIST
18798: PUSH
18799: EMPTY
18800: LIST
18801: LIST
18802: LIST
18803: PUSH
18804: EMPTY
18805: LIST
18806: LIST
18807: PPUSH
18808: CALL_OW 69
18812: IN
18813: IFFALSE 18829
// allyDestCounter := allyDestCounter + 1 ;
18815: LD_ADDR_EXP 22
18819: PUSH
18820: LD_EXP 22
18824: PUSH
18825: LD_INT 1
18827: PLUS
18828: ST_TO_ADDR
// if un in ruOutpost then
18829: LD_VAR 0 1
18833: PUSH
18834: LD_EXP 14
18838: IN
18839: IFFALSE 18888
// begin ruOutpost := ruOutpost diff un ;
18841: LD_ADDR_EXP 14
18845: PUSH
18846: LD_EXP 14
18850: PUSH
18851: LD_VAR 0 1
18855: DIFF
18856: ST_TO_ADDR
// ruEscape := Replace ( ruEscape , 1 , ruEscape [ 1 ] + 1 ) ;
18857: LD_ADDR_EXP 15
18861: PUSH
18862: LD_EXP 15
18866: PPUSH
18867: LD_INT 1
18869: PPUSH
18870: LD_EXP 15
18874: PUSH
18875: LD_INT 1
18877: ARRAY
18878: PUSH
18879: LD_INT 1
18881: PLUS
18882: PPUSH
18883: CALL_OW 1
18887: ST_TO_ADDR
// end ; end ; MCE_UnitDestroyed ( un ) ;
18888: LD_VAR 0 1
18892: PPUSH
18893: CALL 89370 0 1
// end ;
18897: PPOPN 1
18899: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
18900: LD_VAR 0 1
18904: PPUSH
18905: LD_VAR 0 2
18909: PPUSH
18910: CALL 91570 0 2
// end ;
18914: PPOPN 2
18916: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
18917: LD_VAR 0 1
18921: PPUSH
18922: CALL 90638 0 1
// end ;
18926: PPOPN 1
18928: END
// on BuildingComplete ( building ) do begin MCE_BuildingComplete ( building ) ;
18929: LD_VAR 0 1
18933: PPUSH
18934: CALL 90879 0 1
// end ;
18938: PPOPN 1
18940: END
// on ResearchComplete ( tech , lab ) do begin if tech = tech_LasDouble and GetSide ( lab ) = 1 then
18941: LD_VAR 0 1
18945: PUSH
18946: LD_INT 14
18948: EQUAL
18949: PUSH
18950: LD_VAR 0 2
18954: PPUSH
18955: CALL_OW 255
18959: PUSH
18960: LD_INT 1
18962: EQUAL
18963: AND
18964: IFFALSE 19005
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Laser ) ;
18966: LD_EXP 9
18970: PPUSH
18971: LD_STRING D
18973: PUSH
18974: LD_STRING I
18976: PUSH
18977: LD_STRING J
18979: PUSH
18980: LD_STRING S
18982: PUSH
18983: EMPTY
18984: LIST
18985: LIST
18986: LIST
18987: PUSH
18988: LD_EXP 25
18992: ARRAY
18993: STR
18994: PUSH
18995: LD_STRING -1-Laser
18997: STR
18998: PPUSH
18999: CALL_OW 88
// exit ;
19003: GO 19147
// end ; if tech = tech_MatDet and GetSide ( lab ) = 1 then
19005: LD_VAR 0 1
19009: PUSH
19010: LD_INT 7
19012: EQUAL
19013: PUSH
19014: LD_VAR 0 2
19018: PPUSH
19019: CALL_OW 255
19023: PUSH
19024: LD_INT 1
19026: EQUAL
19027: AND
19028: IFFALSE 19069
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Materialization ) ;
19030: LD_EXP 9
19034: PPUSH
19035: LD_STRING D
19037: PUSH
19038: LD_STRING I
19040: PUSH
19041: LD_STRING J
19043: PUSH
19044: LD_STRING S
19046: PUSH
19047: EMPTY
19048: LIST
19049: LIST
19050: LIST
19051: PUSH
19052: LD_EXP 25
19056: ARRAY
19057: STR
19058: PUSH
19059: LD_STRING -1-Materialization
19061: STR
19062: PPUSH
19063: CALL_OW 88
// exit ;
19067: GO 19147
// end ; if tech = tech_SibFiss and GetSide ( lab ) = 1 then
19069: LD_VAR 0 1
19073: PUSH
19074: LD_INT 25
19076: EQUAL
19077: PUSH
19078: LD_VAR 0 2
19082: PPUSH
19083: CALL_OW 255
19087: PUSH
19088: LD_INT 1
19090: EQUAL
19091: AND
19092: IFFALSE 19133
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Rocket ) ;
19094: LD_EXP 9
19098: PPUSH
19099: LD_STRING D
19101: PUSH
19102: LD_STRING I
19104: PUSH
19105: LD_STRING J
19107: PUSH
19108: LD_STRING S
19110: PUSH
19111: EMPTY
19112: LIST
19113: LIST
19114: LIST
19115: PUSH
19116: LD_EXP 25
19120: ARRAY
19121: STR
19122: PUSH
19123: LD_STRING -1-Rocket
19125: STR
19126: PPUSH
19127: CALL_OW 88
// exit ;
19131: GO 19147
// end ; MCE_ResearchComplete ( tech , lab ) ;
19133: LD_VAR 0 1
19137: PPUSH
19138: LD_VAR 0 2
19142: PPUSH
19143: CALL 89066 0 2
// end ;
19147: PPOPN 2
19149: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
19150: LD_VAR 0 1
19154: PPUSH
19155: LD_VAR 0 2
19159: PPUSH
19160: LD_VAR 0 3
19164: PPUSH
19165: LD_VAR 0 4
19169: PPUSH
19170: LD_VAR 0 5
19174: PPUSH
19175: CALL 88686 0 5
// end ;
19179: PPOPN 5
19181: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
19182: LD_VAR 0 1
19186: PPUSH
19187: LD_VAR 0 2
19191: PPUSH
19192: CALL 88282 0 2
// end ;
19196: PPOPN 2
19198: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
19199: LD_VAR 0 1
19203: PPUSH
19204: LD_VAR 0 2
19208: PPUSH
19209: LD_VAR 0 3
19213: PPUSH
19214: LD_VAR 0 4
19218: PPUSH
19219: CALL 88120 0 4
// end ;
19223: PPOPN 4
19225: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
19226: LD_VAR 0 1
19230: PPUSH
19231: LD_VAR 0 2
19235: PPUSH
19236: LD_VAR 0 3
19240: PPUSH
19241: CALL 87895 0 3
// end ;
19245: PPOPN 3
19247: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
19248: LD_VAR 0 1
19252: PPUSH
19253: LD_VAR 0 2
19257: PPUSH
19258: CALL 87780 0 2
// end ;
19262: PPOPN 2
19264: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
19265: LD_VAR 0 1
19269: PPUSH
19270: LD_VAR 0 2
19274: PPUSH
19275: CALL 91831 0 2
// end ;
19279: PPOPN 2
19281: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
19282: LD_VAR 0 1
19286: PPUSH
19287: LD_VAR 0 2
19291: PPUSH
19292: LD_VAR 0 3
19296: PPUSH
19297: LD_VAR 0 4
19301: PPUSH
19302: CALL 92047 0 4
// end ;
19306: PPOPN 4
19308: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
19309: LD_VAR 0 1
19313: PPUSH
19314: LD_VAR 0 2
19318: PPUSH
19319: CALL 87589 0 2
// end ;
19323: PPOPN 2
19325: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
19326: LD_VAR 0 1
19330: PPUSH
19331: CALL 92286 0 1
// end ; end_of_file
19335: PPOPN 1
19337: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
19338: LD_INT 0
19340: PPUSH
19341: PPUSH
// if exist_mode then
19342: LD_VAR 0 2
19346: IFFALSE 19371
// unit := CreateCharacter ( prefix & ident ) else
19348: LD_ADDR_VAR 0 5
19352: PUSH
19353: LD_VAR 0 3
19357: PUSH
19358: LD_VAR 0 1
19362: STR
19363: PPUSH
19364: CALL_OW 34
19368: ST_TO_ADDR
19369: GO 19386
// unit := NewCharacter ( ident ) ;
19371: LD_ADDR_VAR 0 5
19375: PUSH
19376: LD_VAR 0 1
19380: PPUSH
19381: CALL_OW 25
19385: ST_TO_ADDR
// result := unit ;
19386: LD_ADDR_VAR 0 4
19390: PUSH
19391: LD_VAR 0 5
19395: ST_TO_ADDR
// end ;
19396: LD_VAR 0 4
19400: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
19401: LD_INT 0
19403: PPUSH
19404: PPUSH
// if not side or not nation then
19405: LD_VAR 0 1
19409: NOT
19410: PUSH
19411: LD_VAR 0 2
19415: NOT
19416: OR
19417: IFFALSE 19421
// exit ;
19419: GO 20065
// case nation of nation_american :
19421: LD_VAR 0 2
19425: PUSH
19426: LD_INT 1
19428: DOUBLE
19429: EQUAL
19430: IFTRUE 19434
19432: GO 19608
19434: POP
// result := [ 35 , 45 , 46 , 47 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 ] ; nation_arabian :
19435: LD_ADDR_VAR 0 4
19439: PUSH
19440: LD_INT 35
19442: PUSH
19443: LD_INT 45
19445: PUSH
19446: LD_INT 46
19448: PUSH
19449: LD_INT 47
19451: PUSH
19452: LD_INT 1
19454: PUSH
19455: LD_INT 2
19457: PUSH
19458: LD_INT 6
19460: PUSH
19461: LD_INT 15
19463: PUSH
19464: LD_INT 16
19466: PUSH
19467: LD_INT 7
19469: PUSH
19470: LD_INT 12
19472: PUSH
19473: LD_INT 13
19475: PUSH
19476: LD_INT 10
19478: PUSH
19479: LD_INT 14
19481: PUSH
19482: LD_INT 20
19484: PUSH
19485: LD_INT 21
19487: PUSH
19488: LD_INT 22
19490: PUSH
19491: LD_INT 25
19493: PUSH
19494: LD_INT 32
19496: PUSH
19497: LD_INT 27
19499: PUSH
19500: LD_INT 36
19502: PUSH
19503: LD_INT 69
19505: PUSH
19506: LD_INT 39
19508: PUSH
19509: LD_INT 34
19511: PUSH
19512: LD_INT 40
19514: PUSH
19515: LD_INT 48
19517: PUSH
19518: LD_INT 49
19520: PUSH
19521: LD_INT 50
19523: PUSH
19524: LD_INT 51
19526: PUSH
19527: LD_INT 52
19529: PUSH
19530: LD_INT 53
19532: PUSH
19533: LD_INT 54
19535: PUSH
19536: LD_INT 55
19538: PUSH
19539: LD_INT 56
19541: PUSH
19542: LD_INT 57
19544: PUSH
19545: LD_INT 58
19547: PUSH
19548: LD_INT 59
19550: PUSH
19551: LD_INT 60
19553: PUSH
19554: LD_INT 61
19556: PUSH
19557: LD_INT 62
19559: PUSH
19560: LD_INT 80
19562: PUSH
19563: EMPTY
19564: LIST
19565: LIST
19566: LIST
19567: LIST
19568: LIST
19569: LIST
19570: LIST
19571: LIST
19572: LIST
19573: LIST
19574: LIST
19575: LIST
19576: LIST
19577: LIST
19578: LIST
19579: LIST
19580: LIST
19581: LIST
19582: LIST
19583: LIST
19584: LIST
19585: LIST
19586: LIST
19587: LIST
19588: LIST
19589: LIST
19590: LIST
19591: LIST
19592: LIST
19593: LIST
19594: LIST
19595: LIST
19596: LIST
19597: LIST
19598: LIST
19599: LIST
19600: LIST
19601: LIST
19602: LIST
19603: LIST
19604: LIST
19605: ST_TO_ADDR
19606: GO 19989
19608: LD_INT 2
19610: DOUBLE
19611: EQUAL
19612: IFTRUE 19616
19614: GO 19798
19616: POP
// result := [ 35 , 45 , 46 , 47 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 ] ; nation_russian :
19617: LD_ADDR_VAR 0 4
19621: PUSH
19622: LD_INT 35
19624: PUSH
19625: LD_INT 45
19627: PUSH
19628: LD_INT 46
19630: PUSH
19631: LD_INT 47
19633: PUSH
19634: LD_INT 70
19636: PUSH
19637: LD_INT 1
19639: PUSH
19640: LD_INT 11
19642: PUSH
19643: LD_INT 3
19645: PUSH
19646: LD_INT 4
19648: PUSH
19649: LD_INT 5
19651: PUSH
19652: LD_INT 6
19654: PUSH
19655: LD_INT 15
19657: PUSH
19658: LD_INT 18
19660: PUSH
19661: LD_INT 7
19663: PUSH
19664: LD_INT 17
19666: PUSH
19667: LD_INT 8
19669: PUSH
19670: LD_INT 20
19672: PUSH
19673: LD_INT 21
19675: PUSH
19676: LD_INT 22
19678: PUSH
19679: LD_INT 72
19681: PUSH
19682: LD_INT 26
19684: PUSH
19685: LD_INT 69
19687: PUSH
19688: LD_INT 39
19690: PUSH
19691: LD_INT 40
19693: PUSH
19694: LD_INT 41
19696: PUSH
19697: LD_INT 42
19699: PUSH
19700: LD_INT 43
19702: PUSH
19703: LD_INT 48
19705: PUSH
19706: LD_INT 49
19708: PUSH
19709: LD_INT 50
19711: PUSH
19712: LD_INT 51
19714: PUSH
19715: LD_INT 52
19717: PUSH
19718: LD_INT 53
19720: PUSH
19721: LD_INT 54
19723: PUSH
19724: LD_INT 55
19726: PUSH
19727: LD_INT 56
19729: PUSH
19730: LD_INT 60
19732: PUSH
19733: LD_INT 61
19735: PUSH
19736: LD_INT 62
19738: PUSH
19739: LD_INT 66
19741: PUSH
19742: LD_INT 67
19744: PUSH
19745: LD_INT 68
19747: PUSH
19748: LD_INT 81
19750: PUSH
19751: EMPTY
19752: LIST
19753: LIST
19754: LIST
19755: LIST
19756: LIST
19757: LIST
19758: LIST
19759: LIST
19760: LIST
19761: LIST
19762: LIST
19763: LIST
19764: LIST
19765: LIST
19766: LIST
19767: LIST
19768: LIST
19769: LIST
19770: LIST
19771: LIST
19772: LIST
19773: LIST
19774: LIST
19775: LIST
19776: LIST
19777: LIST
19778: LIST
19779: LIST
19780: LIST
19781: LIST
19782: LIST
19783: LIST
19784: LIST
19785: LIST
19786: LIST
19787: LIST
19788: LIST
19789: LIST
19790: LIST
19791: LIST
19792: LIST
19793: LIST
19794: LIST
19795: ST_TO_ADDR
19796: GO 19989
19798: LD_INT 3
19800: DOUBLE
19801: EQUAL
19802: IFTRUE 19806
19804: GO 19988
19806: POP
// result := [ 46 , 47 , 1 , 2 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 ] ; end ;
19807: LD_ADDR_VAR 0 4
19811: PUSH
19812: LD_INT 46
19814: PUSH
19815: LD_INT 47
19817: PUSH
19818: LD_INT 1
19820: PUSH
19821: LD_INT 2
19823: PUSH
19824: LD_INT 11
19826: PUSH
19827: LD_INT 9
19829: PUSH
19830: LD_INT 20
19832: PUSH
19833: LD_INT 19
19835: PUSH
19836: LD_INT 21
19838: PUSH
19839: LD_INT 24
19841: PUSH
19842: LD_INT 22
19844: PUSH
19845: LD_INT 25
19847: PUSH
19848: LD_INT 28
19850: PUSH
19851: LD_INT 29
19853: PUSH
19854: LD_INT 30
19856: PUSH
19857: LD_INT 31
19859: PUSH
19860: LD_INT 37
19862: PUSH
19863: LD_INT 38
19865: PUSH
19866: LD_INT 32
19868: PUSH
19869: LD_INT 27
19871: PUSH
19872: LD_INT 33
19874: PUSH
19875: LD_INT 69
19877: PUSH
19878: LD_INT 39
19880: PUSH
19881: LD_INT 34
19883: PUSH
19884: LD_INT 40
19886: PUSH
19887: LD_INT 71
19889: PUSH
19890: LD_INT 23
19892: PUSH
19893: LD_INT 44
19895: PUSH
19896: LD_INT 48
19898: PUSH
19899: LD_INT 49
19901: PUSH
19902: LD_INT 50
19904: PUSH
19905: LD_INT 51
19907: PUSH
19908: LD_INT 52
19910: PUSH
19911: LD_INT 53
19913: PUSH
19914: LD_INT 54
19916: PUSH
19917: LD_INT 55
19919: PUSH
19920: LD_INT 56
19922: PUSH
19923: LD_INT 57
19925: PUSH
19926: LD_INT 58
19928: PUSH
19929: LD_INT 59
19931: PUSH
19932: LD_INT 63
19934: PUSH
19935: LD_INT 64
19937: PUSH
19938: LD_INT 65
19940: PUSH
19941: EMPTY
19942: LIST
19943: LIST
19944: LIST
19945: LIST
19946: LIST
19947: LIST
19948: LIST
19949: LIST
19950: LIST
19951: LIST
19952: LIST
19953: LIST
19954: LIST
19955: LIST
19956: LIST
19957: LIST
19958: LIST
19959: LIST
19960: LIST
19961: LIST
19962: LIST
19963: LIST
19964: LIST
19965: LIST
19966: LIST
19967: LIST
19968: LIST
19969: LIST
19970: LIST
19971: LIST
19972: LIST
19973: LIST
19974: LIST
19975: LIST
19976: LIST
19977: LIST
19978: LIST
19979: LIST
19980: LIST
19981: LIST
19982: LIST
19983: LIST
19984: LIST
19985: ST_TO_ADDR
19986: GO 19989
19988: POP
// if state > - 1 and state < 3 then
19989: LD_VAR 0 3
19993: PUSH
19994: LD_INT 1
19996: NEG
19997: GREATER
19998: PUSH
19999: LD_VAR 0 3
20003: PUSH
20004: LD_INT 3
20006: LESS
20007: AND
20008: IFFALSE 20065
// for i in result do
20010: LD_ADDR_VAR 0 5
20014: PUSH
20015: LD_VAR 0 4
20019: PUSH
20020: FOR_IN
20021: IFFALSE 20063
// if GetTech ( i , side ) <> state then
20023: LD_VAR 0 5
20027: PPUSH
20028: LD_VAR 0 1
20032: PPUSH
20033: CALL_OW 321
20037: PUSH
20038: LD_VAR 0 3
20042: NONEQUAL
20043: IFFALSE 20061
// result := result diff i ;
20045: LD_ADDR_VAR 0 4
20049: PUSH
20050: LD_VAR 0 4
20054: PUSH
20055: LD_VAR 0 5
20059: DIFF
20060: ST_TO_ADDR
20061: GO 20020
20063: POP
20064: POP
// end ;
20065: LD_VAR 0 4
20069: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
20070: LD_INT 0
20072: PPUSH
20073: PPUSH
20074: PPUSH
// result := true ;
20075: LD_ADDR_VAR 0 3
20079: PUSH
20080: LD_INT 1
20082: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
20083: LD_ADDR_VAR 0 5
20087: PUSH
20088: LD_VAR 0 2
20092: PPUSH
20093: CALL_OW 480
20097: ST_TO_ADDR
// if not tmp then
20098: LD_VAR 0 5
20102: NOT
20103: IFFALSE 20107
// exit ;
20105: GO 20156
// for i in tmp do
20107: LD_ADDR_VAR 0 4
20111: PUSH
20112: LD_VAR 0 5
20116: PUSH
20117: FOR_IN
20118: IFFALSE 20154
// if GetTech ( i , side ) <> state_researched then
20120: LD_VAR 0 4
20124: PPUSH
20125: LD_VAR 0 1
20129: PPUSH
20130: CALL_OW 321
20134: PUSH
20135: LD_INT 2
20137: NONEQUAL
20138: IFFALSE 20152
// begin result := false ;
20140: LD_ADDR_VAR 0 3
20144: PUSH
20145: LD_INT 0
20147: ST_TO_ADDR
// exit ;
20148: POP
20149: POP
20150: GO 20156
// end ;
20152: GO 20117
20154: POP
20155: POP
// end ;
20156: LD_VAR 0 3
20160: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
20161: LD_INT 0
20163: PPUSH
20164: PPUSH
20165: PPUSH
20166: PPUSH
20167: PPUSH
20168: PPUSH
20169: PPUSH
20170: PPUSH
20171: PPUSH
20172: PPUSH
20173: PPUSH
20174: PPUSH
20175: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
20176: LD_VAR 0 1
20180: NOT
20181: PUSH
20182: LD_VAR 0 1
20186: PPUSH
20187: CALL_OW 257
20191: PUSH
20192: LD_INT 9
20194: NONEQUAL
20195: OR
20196: IFFALSE 20200
// exit ;
20198: GO 20773
// side := GetSide ( unit ) ;
20200: LD_ADDR_VAR 0 9
20204: PUSH
20205: LD_VAR 0 1
20209: PPUSH
20210: CALL_OW 255
20214: ST_TO_ADDR
// tech_space := tech_spacanom ;
20215: LD_ADDR_VAR 0 12
20219: PUSH
20220: LD_INT 29
20222: ST_TO_ADDR
// tech_time := tech_taurad ;
20223: LD_ADDR_VAR 0 13
20227: PUSH
20228: LD_INT 28
20230: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
20231: LD_ADDR_VAR 0 11
20235: PUSH
20236: LD_VAR 0 1
20240: PPUSH
20241: CALL_OW 310
20245: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
20246: LD_VAR 0 11
20250: PPUSH
20251: CALL_OW 247
20255: PUSH
20256: LD_INT 2
20258: EQUAL
20259: IFFALSE 20263
// exit ;
20261: GO 20773
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
20263: LD_ADDR_VAR 0 8
20267: PUSH
20268: LD_INT 81
20270: PUSH
20271: LD_VAR 0 9
20275: PUSH
20276: EMPTY
20277: LIST
20278: LIST
20279: PUSH
20280: LD_INT 3
20282: PUSH
20283: LD_INT 21
20285: PUSH
20286: LD_INT 3
20288: PUSH
20289: EMPTY
20290: LIST
20291: LIST
20292: PUSH
20293: EMPTY
20294: LIST
20295: LIST
20296: PUSH
20297: EMPTY
20298: LIST
20299: LIST
20300: PPUSH
20301: CALL_OW 69
20305: ST_TO_ADDR
// if not tmp then
20306: LD_VAR 0 8
20310: NOT
20311: IFFALSE 20315
// exit ;
20313: GO 20773
// if in_unit then
20315: LD_VAR 0 11
20319: IFFALSE 20343
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
20321: LD_ADDR_VAR 0 10
20325: PUSH
20326: LD_VAR 0 8
20330: PPUSH
20331: LD_VAR 0 11
20335: PPUSH
20336: CALL_OW 74
20340: ST_TO_ADDR
20341: GO 20363
// enemy := NearestUnitToUnit ( tmp , unit ) ;
20343: LD_ADDR_VAR 0 10
20347: PUSH
20348: LD_VAR 0 8
20352: PPUSH
20353: LD_VAR 0 1
20357: PPUSH
20358: CALL_OW 74
20362: ST_TO_ADDR
// if not enemy then
20363: LD_VAR 0 10
20367: NOT
20368: IFFALSE 20372
// exit ;
20370: GO 20773
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
20372: LD_VAR 0 11
20376: PUSH
20377: LD_VAR 0 11
20381: PPUSH
20382: LD_VAR 0 10
20386: PPUSH
20387: CALL_OW 296
20391: PUSH
20392: LD_INT 13
20394: GREATER
20395: AND
20396: PUSH
20397: LD_VAR 0 1
20401: PPUSH
20402: LD_VAR 0 10
20406: PPUSH
20407: CALL_OW 296
20411: PUSH
20412: LD_INT 12
20414: GREATER
20415: OR
20416: IFFALSE 20420
// exit ;
20418: GO 20773
// missile := [ 1 ] ;
20420: LD_ADDR_VAR 0 14
20424: PUSH
20425: LD_INT 1
20427: PUSH
20428: EMPTY
20429: LIST
20430: ST_TO_ADDR
// if Researched ( side , tech_space ) then
20431: LD_VAR 0 9
20435: PPUSH
20436: LD_VAR 0 12
20440: PPUSH
20441: CALL_OW 325
20445: IFFALSE 20474
// missile := Insert ( missile , missile + 1 , 2 ) ;
20447: LD_ADDR_VAR 0 14
20451: PUSH
20452: LD_VAR 0 14
20456: PPUSH
20457: LD_VAR 0 14
20461: PUSH
20462: LD_INT 1
20464: PLUS
20465: PPUSH
20466: LD_INT 2
20468: PPUSH
20469: CALL_OW 2
20473: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
20474: LD_VAR 0 9
20478: PPUSH
20479: LD_VAR 0 13
20483: PPUSH
20484: CALL_OW 325
20488: PUSH
20489: LD_VAR 0 10
20493: PPUSH
20494: CALL_OW 255
20498: PPUSH
20499: LD_VAR 0 13
20503: PPUSH
20504: CALL_OW 325
20508: NOT
20509: AND
20510: IFFALSE 20539
// missile := Insert ( missile , missile + 1 , 3 ) ;
20512: LD_ADDR_VAR 0 14
20516: PUSH
20517: LD_VAR 0 14
20521: PPUSH
20522: LD_VAR 0 14
20526: PUSH
20527: LD_INT 1
20529: PLUS
20530: PPUSH
20531: LD_INT 3
20533: PPUSH
20534: CALL_OW 2
20538: ST_TO_ADDR
// if missile < 2 then
20539: LD_VAR 0 14
20543: PUSH
20544: LD_INT 2
20546: LESS
20547: IFFALSE 20551
// exit ;
20549: GO 20773
// x := GetX ( enemy ) ;
20551: LD_ADDR_VAR 0 4
20555: PUSH
20556: LD_VAR 0 10
20560: PPUSH
20561: CALL_OW 250
20565: ST_TO_ADDR
// y := GetY ( enemy ) ;
20566: LD_ADDR_VAR 0 5
20570: PUSH
20571: LD_VAR 0 10
20575: PPUSH
20576: CALL_OW 251
20580: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
20581: LD_ADDR_VAR 0 6
20585: PUSH
20586: LD_VAR 0 4
20590: PUSH
20591: LD_INT 1
20593: NEG
20594: PPUSH
20595: LD_INT 1
20597: PPUSH
20598: CALL_OW 12
20602: PLUS
20603: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
20604: LD_ADDR_VAR 0 7
20608: PUSH
20609: LD_VAR 0 5
20613: PUSH
20614: LD_INT 1
20616: NEG
20617: PPUSH
20618: LD_INT 1
20620: PPUSH
20621: CALL_OW 12
20625: PLUS
20626: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
20627: LD_VAR 0 6
20631: PPUSH
20632: LD_VAR 0 7
20636: PPUSH
20637: CALL_OW 488
20641: NOT
20642: IFFALSE 20664
// begin _x := x ;
20644: LD_ADDR_VAR 0 6
20648: PUSH
20649: LD_VAR 0 4
20653: ST_TO_ADDR
// _y := y ;
20654: LD_ADDR_VAR 0 7
20658: PUSH
20659: LD_VAR 0 5
20663: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
20664: LD_ADDR_VAR 0 3
20668: PUSH
20669: LD_INT 1
20671: PPUSH
20672: LD_VAR 0 14
20676: PPUSH
20677: CALL_OW 12
20681: ST_TO_ADDR
// case i of 1 :
20682: LD_VAR 0 3
20686: PUSH
20687: LD_INT 1
20689: DOUBLE
20690: EQUAL
20691: IFTRUE 20695
20693: GO 20712
20695: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
20696: LD_VAR 0 1
20700: PPUSH
20701: LD_VAR 0 10
20705: PPUSH
20706: CALL_OW 115
20710: GO 20773
20712: LD_INT 2
20714: DOUBLE
20715: EQUAL
20716: IFTRUE 20720
20718: GO 20742
20720: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
20721: LD_VAR 0 1
20725: PPUSH
20726: LD_VAR 0 6
20730: PPUSH
20731: LD_VAR 0 7
20735: PPUSH
20736: CALL_OW 153
20740: GO 20773
20742: LD_INT 3
20744: DOUBLE
20745: EQUAL
20746: IFTRUE 20750
20748: GO 20772
20750: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
20751: LD_VAR 0 1
20755: PPUSH
20756: LD_VAR 0 6
20760: PPUSH
20761: LD_VAR 0 7
20765: PPUSH
20766: CALL_OW 154
20770: GO 20773
20772: POP
// end ;
20773: LD_VAR 0 2
20777: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
20778: LD_INT 0
20780: PPUSH
20781: PPUSH
20782: PPUSH
20783: PPUSH
20784: PPUSH
20785: PPUSH
// if not unit or not building then
20786: LD_VAR 0 1
20790: NOT
20791: PUSH
20792: LD_VAR 0 2
20796: NOT
20797: OR
20798: IFFALSE 20802
// exit ;
20800: GO 20960
// x := GetX ( building ) ;
20802: LD_ADDR_VAR 0 5
20806: PUSH
20807: LD_VAR 0 2
20811: PPUSH
20812: CALL_OW 250
20816: ST_TO_ADDR
// y := GetY ( building ) ;
20817: LD_ADDR_VAR 0 6
20821: PUSH
20822: LD_VAR 0 2
20826: PPUSH
20827: CALL_OW 251
20831: ST_TO_ADDR
// for i = 0 to 5 do
20832: LD_ADDR_VAR 0 4
20836: PUSH
20837: DOUBLE
20838: LD_INT 0
20840: DEC
20841: ST_TO_ADDR
20842: LD_INT 5
20844: PUSH
20845: FOR_TO
20846: IFFALSE 20958
// begin _x := ShiftX ( x , i , 3 ) ;
20848: LD_ADDR_VAR 0 7
20852: PUSH
20853: LD_VAR 0 5
20857: PPUSH
20858: LD_VAR 0 4
20862: PPUSH
20863: LD_INT 3
20865: PPUSH
20866: CALL_OW 272
20870: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
20871: LD_ADDR_VAR 0 8
20875: PUSH
20876: LD_VAR 0 6
20880: PPUSH
20881: LD_VAR 0 4
20885: PPUSH
20886: LD_INT 3
20888: PPUSH
20889: CALL_OW 273
20893: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
20894: LD_VAR 0 7
20898: PPUSH
20899: LD_VAR 0 8
20903: PPUSH
20904: CALL_OW 488
20908: NOT
20909: IFFALSE 20913
// continue ;
20911: GO 20845
// if HexInfo ( _x , _y ) = 0 then
20913: LD_VAR 0 7
20917: PPUSH
20918: LD_VAR 0 8
20922: PPUSH
20923: CALL_OW 428
20927: PUSH
20928: LD_INT 0
20930: EQUAL
20931: IFFALSE 20956
// begin ComMoveXY ( unit , _x , _y ) ;
20933: LD_VAR 0 1
20937: PPUSH
20938: LD_VAR 0 7
20942: PPUSH
20943: LD_VAR 0 8
20947: PPUSH
20948: CALL_OW 111
// exit ;
20952: POP
20953: POP
20954: GO 20960
// end ; end ;
20956: GO 20845
20958: POP
20959: POP
// end ;
20960: LD_VAR 0 3
20964: RET
// export function ScanBase ( side , base_area ) ; begin
20965: LD_INT 0
20967: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
20968: LD_ADDR_VAR 0 3
20972: PUSH
20973: LD_VAR 0 2
20977: PPUSH
20978: LD_INT 81
20980: PUSH
20981: LD_VAR 0 1
20985: PUSH
20986: EMPTY
20987: LIST
20988: LIST
20989: PPUSH
20990: CALL_OW 70
20994: ST_TO_ADDR
// end ;
20995: LD_VAR 0 3
20999: RET
// export function BasicDefend ( base , solds , area ) ; var enemy , side , i , hex ; begin
21000: LD_INT 0
21002: PPUSH
21003: PPUSH
21004: PPUSH
21005: PPUSH
21006: PPUSH
// if not base or not mc_bases [ base ] or not solds or not area then
21007: LD_VAR 0 1
21011: NOT
21012: PUSH
21013: LD_EXP 36
21017: PUSH
21018: LD_VAR 0 1
21022: ARRAY
21023: NOT
21024: OR
21025: PUSH
21026: LD_VAR 0 2
21030: NOT
21031: OR
21032: PUSH
21033: LD_VAR 0 3
21037: NOT
21038: OR
21039: IFFALSE 21043
// exit ;
21041: GO 21556
// side := mc_sides [ base ] ;
21043: LD_ADDR_VAR 0 6
21047: PUSH
21048: LD_EXP 62
21052: PUSH
21053: LD_VAR 0 1
21057: ARRAY
21058: ST_TO_ADDR
// if not side then
21059: LD_VAR 0 6
21063: NOT
21064: IFFALSE 21068
// exit ;
21066: GO 21556
// for i in solds do
21068: LD_ADDR_VAR 0 7
21072: PUSH
21073: LD_VAR 0 2
21077: PUSH
21078: FOR_IN
21079: IFFALSE 21140
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
21081: LD_VAR 0 7
21085: PPUSH
21086: CALL_OW 310
21090: PPUSH
21091: CALL_OW 266
21095: PUSH
21096: LD_INT 32
21098: PUSH
21099: LD_INT 31
21101: PUSH
21102: EMPTY
21103: LIST
21104: LIST
21105: IN
21106: IFFALSE 21126
// solds := solds diff i else
21108: LD_ADDR_VAR 0 2
21112: PUSH
21113: LD_VAR 0 2
21117: PUSH
21118: LD_VAR 0 7
21122: DIFF
21123: ST_TO_ADDR
21124: GO 21138
// SetTag ( i , 18 ) ;
21126: LD_VAR 0 7
21130: PPUSH
21131: LD_INT 18
21133: PPUSH
21134: CALL_OW 109
21138: GO 21078
21140: POP
21141: POP
// if not solds then
21142: LD_VAR 0 2
21146: NOT
21147: IFFALSE 21151
// exit ;
21149: GO 21556
// repeat wait ( 0 0$1 ) ;
21151: LD_INT 35
21153: PPUSH
21154: CALL_OW 67
// enemy := ScanBase ( side , area ) ;
21158: LD_ADDR_VAR 0 5
21162: PUSH
21163: LD_VAR 0 6
21167: PPUSH
21168: LD_VAR 0 3
21172: PPUSH
21173: CALL 20965 0 2
21177: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
21178: LD_EXP 36
21182: PUSH
21183: LD_VAR 0 1
21187: ARRAY
21188: NOT
21189: PUSH
21190: LD_EXP 36
21194: PUSH
21195: LD_VAR 0 1
21199: ARRAY
21200: PUSH
21201: EMPTY
21202: EQUAL
21203: OR
21204: IFFALSE 21241
// begin for i in solds do
21206: LD_ADDR_VAR 0 7
21210: PUSH
21211: LD_VAR 0 2
21215: PUSH
21216: FOR_IN
21217: IFFALSE 21230
// ComStop ( i ) ;
21219: LD_VAR 0 7
21223: PPUSH
21224: CALL_OW 141
21228: GO 21216
21230: POP
21231: POP
// solds := [ ] ;
21232: LD_ADDR_VAR 0 2
21236: PUSH
21237: EMPTY
21238: ST_TO_ADDR
// exit ;
21239: GO 21556
// end ; if not enemy or enemy > 3 or mc_defender [ base ] then
21241: LD_VAR 0 5
21245: NOT
21246: PUSH
21247: LD_VAR 0 5
21251: PUSH
21252: LD_INT 3
21254: GREATER
21255: OR
21256: PUSH
21257: LD_EXP 58
21261: PUSH
21262: LD_VAR 0 1
21266: ARRAY
21267: OR
21268: IFFALSE 21309
// begin for i in solds do
21270: LD_ADDR_VAR 0 7
21274: PUSH
21275: LD_VAR 0 2
21279: PUSH
21280: FOR_IN
21281: IFFALSE 21305
// if HasTask ( i ) then
21283: LD_VAR 0 7
21287: PPUSH
21288: CALL_OW 314
21292: IFFALSE 21303
// ComStop ( i ) ;
21294: LD_VAR 0 7
21298: PPUSH
21299: CALL_OW 141
21303: GO 21280
21305: POP
21306: POP
// break ;
21307: GO 21544
// end ; for i in solds do
21309: LD_ADDR_VAR 0 7
21313: PUSH
21314: LD_VAR 0 2
21318: PUSH
21319: FOR_IN
21320: IFFALSE 21536
// begin if IsInUnit ( i ) then
21322: LD_VAR 0 7
21326: PPUSH
21327: CALL_OW 310
21331: IFFALSE 21342
// ComExitBuilding ( i ) ;
21333: LD_VAR 0 7
21337: PPUSH
21338: CALL_OW 122
// if GetLives ( i ) > 333 then
21342: LD_VAR 0 7
21346: PPUSH
21347: CALL_OW 256
21351: PUSH
21352: LD_INT 333
21354: GREATER
21355: IFFALSE 21383
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
21357: LD_VAR 0 7
21361: PPUSH
21362: LD_VAR 0 5
21366: PPUSH
21367: LD_VAR 0 7
21371: PPUSH
21372: CALL_OW 74
21376: PPUSH
21377: CALL_OW 115
21381: GO 21534
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
21383: LD_ADDR_VAR 0 8
21387: PUSH
21388: LD_EXP 36
21392: PUSH
21393: LD_VAR 0 1
21397: ARRAY
21398: PPUSH
21399: LD_INT 2
21401: PUSH
21402: LD_INT 30
21404: PUSH
21405: LD_INT 0
21407: PUSH
21408: EMPTY
21409: LIST
21410: LIST
21411: PUSH
21412: LD_INT 30
21414: PUSH
21415: LD_INT 1
21417: PUSH
21418: EMPTY
21419: LIST
21420: LIST
21421: PUSH
21422: LD_INT 30
21424: PUSH
21425: LD_INT 6
21427: PUSH
21428: EMPTY
21429: LIST
21430: LIST
21431: PUSH
21432: EMPTY
21433: LIST
21434: LIST
21435: LIST
21436: LIST
21437: PPUSH
21438: CALL_OW 72
21442: PPUSH
21443: LD_VAR 0 7
21447: PPUSH
21448: CALL_OW 74
21452: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
21453: LD_VAR 0 7
21457: PPUSH
21458: LD_VAR 0 8
21462: PPUSH
21463: CALL_OW 250
21467: PPUSH
21468: LD_INT 3
21470: PPUSH
21471: LD_INT 5
21473: PPUSH
21474: CALL_OW 272
21478: PPUSH
21479: LD_VAR 0 8
21483: PPUSH
21484: CALL_OW 251
21488: PPUSH
21489: LD_INT 3
21491: PPUSH
21492: LD_INT 5
21494: PPUSH
21495: CALL_OW 273
21499: PPUSH
21500: CALL_OW 111
// SetTag ( i , 0 ) ;
21504: LD_VAR 0 7
21508: PPUSH
21509: LD_INT 0
21511: PPUSH
21512: CALL_OW 109
// solds := solds diff i ;
21516: LD_ADDR_VAR 0 2
21520: PUSH
21521: LD_VAR 0 2
21525: PUSH
21526: LD_VAR 0 7
21530: DIFF
21531: ST_TO_ADDR
// continue ;
21532: GO 21319
// end ; end ;
21534: GO 21319
21536: POP
21537: POP
// until solds ;
21538: LD_VAR 0 2
21542: IFFALSE 21151
// MC_Reset ( base , 18 ) ;
21544: LD_VAR 0 1
21548: PPUSH
21549: LD_INT 18
21551: PPUSH
21552: CALL 66473 0 2
// end ;
21556: LD_VAR 0 4
21560: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
21561: LD_INT 0
21563: PPUSH
21564: PPUSH
21565: PPUSH
21566: PPUSH
21567: PPUSH
21568: PPUSH
21569: PPUSH
21570: PPUSH
21571: PPUSH
21572: PPUSH
21573: PPUSH
21574: PPUSH
21575: PPUSH
21576: PPUSH
21577: PPUSH
21578: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
21579: LD_ADDR_VAR 0 12
21583: PUSH
21584: LD_EXP 36
21588: PUSH
21589: LD_VAR 0 1
21593: ARRAY
21594: PPUSH
21595: LD_INT 25
21597: PUSH
21598: LD_INT 3
21600: PUSH
21601: EMPTY
21602: LIST
21603: LIST
21604: PPUSH
21605: CALL_OW 72
21609: ST_TO_ADDR
// if mc_remote_driver [ base ] then
21610: LD_EXP 76
21614: PUSH
21615: LD_VAR 0 1
21619: ARRAY
21620: IFFALSE 21644
// mechs := mechs diff mc_remote_driver [ base ] ;
21622: LD_ADDR_VAR 0 12
21626: PUSH
21627: LD_VAR 0 12
21631: PUSH
21632: LD_EXP 76
21636: PUSH
21637: LD_VAR 0 1
21641: ARRAY
21642: DIFF
21643: ST_TO_ADDR
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
21644: LD_ADDR_VAR 0 8
21648: PUSH
21649: LD_EXP 36
21653: PUSH
21654: LD_VAR 0 1
21658: ARRAY
21659: PPUSH
21660: LD_INT 2
21662: PUSH
21663: LD_INT 25
21665: PUSH
21666: LD_INT 1
21668: PUSH
21669: EMPTY
21670: LIST
21671: LIST
21672: PUSH
21673: LD_INT 25
21675: PUSH
21676: LD_INT 5
21678: PUSH
21679: EMPTY
21680: LIST
21681: LIST
21682: PUSH
21683: LD_INT 25
21685: PUSH
21686: LD_INT 8
21688: PUSH
21689: EMPTY
21690: LIST
21691: LIST
21692: PUSH
21693: LD_INT 25
21695: PUSH
21696: LD_INT 9
21698: PUSH
21699: EMPTY
21700: LIST
21701: LIST
21702: PUSH
21703: EMPTY
21704: LIST
21705: LIST
21706: LIST
21707: LIST
21708: LIST
21709: PPUSH
21710: CALL_OW 72
21714: ST_TO_ADDR
// if not defenders and not solds then
21715: LD_VAR 0 2
21719: NOT
21720: PUSH
21721: LD_VAR 0 8
21725: NOT
21726: AND
21727: IFFALSE 21731
// exit ;
21729: GO 23257
// depot_under_attack := false ;
21731: LD_ADDR_VAR 0 16
21735: PUSH
21736: LD_INT 0
21738: ST_TO_ADDR
// sold_defenders := [ ] ;
21739: LD_ADDR_VAR 0 17
21743: PUSH
21744: EMPTY
21745: ST_TO_ADDR
// if mechs then
21746: LD_VAR 0 12
21750: IFFALSE 21879
// for i in defenders do
21752: LD_ADDR_VAR 0 5
21756: PUSH
21757: LD_VAR 0 2
21761: PUSH
21762: FOR_IN
21763: IFFALSE 21877
// begin SetTag ( i , 20 ) ;
21765: LD_VAR 0 5
21769: PPUSH
21770: LD_INT 20
21772: PPUSH
21773: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
21777: LD_VAR 0 5
21781: PPUSH
21782: CALL_OW 263
21786: PUSH
21787: LD_INT 1
21789: EQUAL
21790: PUSH
21791: LD_VAR 0 5
21795: PPUSH
21796: CALL_OW 311
21800: NOT
21801: AND
21802: PUSH
21803: LD_VAR 0 12
21807: AND
21808: IFFALSE 21875
// begin un := mechs [ 1 ] ;
21810: LD_ADDR_VAR 0 10
21814: PUSH
21815: LD_VAR 0 12
21819: PUSH
21820: LD_INT 1
21822: ARRAY
21823: ST_TO_ADDR
// ComExitBuilding ( un ) ;
21824: LD_VAR 0 10
21828: PPUSH
21829: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
21833: LD_VAR 0 10
21837: PPUSH
21838: LD_VAR 0 5
21842: PPUSH
21843: CALL_OW 180
// SetTag ( un , 19 ) ;
21847: LD_VAR 0 10
21851: PPUSH
21852: LD_INT 19
21854: PPUSH
21855: CALL_OW 109
// mechs := mechs diff un ;
21859: LD_ADDR_VAR 0 12
21863: PUSH
21864: LD_VAR 0 12
21868: PUSH
21869: LD_VAR 0 10
21873: DIFF
21874: ST_TO_ADDR
// end ; end ;
21875: GO 21762
21877: POP
21878: POP
// if solds then
21879: LD_VAR 0 8
21883: IFFALSE 21942
// for i in solds do
21885: LD_ADDR_VAR 0 5
21889: PUSH
21890: LD_VAR 0 8
21894: PUSH
21895: FOR_IN
21896: IFFALSE 21940
// if not GetTag ( i ) then
21898: LD_VAR 0 5
21902: PPUSH
21903: CALL_OW 110
21907: NOT
21908: IFFALSE 21938
// begin defenders := defenders union i ;
21910: LD_ADDR_VAR 0 2
21914: PUSH
21915: LD_VAR 0 2
21919: PUSH
21920: LD_VAR 0 5
21924: UNION
21925: ST_TO_ADDR
// SetTag ( i , 18 ) ;
21926: LD_VAR 0 5
21930: PPUSH
21931: LD_INT 18
21933: PPUSH
21934: CALL_OW 109
// end ;
21938: GO 21895
21940: POP
21941: POP
// repeat wait ( 0 0$1 ) ;
21942: LD_INT 35
21944: PPUSH
21945: CALL_OW 67
// enemy := mc_scan [ base ] ;
21949: LD_ADDR_VAR 0 3
21953: PUSH
21954: LD_EXP 59
21958: PUSH
21959: LD_VAR 0 1
21963: ARRAY
21964: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
21965: LD_EXP 36
21969: PUSH
21970: LD_VAR 0 1
21974: ARRAY
21975: NOT
21976: PUSH
21977: LD_EXP 36
21981: PUSH
21982: LD_VAR 0 1
21986: ARRAY
21987: PUSH
21988: EMPTY
21989: EQUAL
21990: OR
21991: IFFALSE 22028
// begin for i in defenders do
21993: LD_ADDR_VAR 0 5
21997: PUSH
21998: LD_VAR 0 2
22002: PUSH
22003: FOR_IN
22004: IFFALSE 22017
// ComStop ( i ) ;
22006: LD_VAR 0 5
22010: PPUSH
22011: CALL_OW 141
22015: GO 22003
22017: POP
22018: POP
// defenders := [ ] ;
22019: LD_ADDR_VAR 0 2
22023: PUSH
22024: EMPTY
22025: ST_TO_ADDR
// exit ;
22026: GO 23257
// end ; for i in defenders do
22028: LD_ADDR_VAR 0 5
22032: PUSH
22033: LD_VAR 0 2
22037: PUSH
22038: FOR_IN
22039: IFFALSE 22769
// begin e := NearestUnitToUnit ( enemy , i ) ;
22041: LD_ADDR_VAR 0 13
22045: PUSH
22046: LD_VAR 0 3
22050: PPUSH
22051: LD_VAR 0 5
22055: PPUSH
22056: CALL_OW 74
22060: ST_TO_ADDR
// depot_under_attack := ( not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) or GetLives ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ) < 600 ) ;
22061: LD_ADDR_VAR 0 16
22065: PUSH
22066: LD_EXP 36
22070: PUSH
22071: LD_VAR 0 1
22075: ARRAY
22076: PPUSH
22077: LD_INT 2
22079: PUSH
22080: LD_INT 30
22082: PUSH
22083: LD_INT 0
22085: PUSH
22086: EMPTY
22087: LIST
22088: LIST
22089: PUSH
22090: LD_INT 30
22092: PUSH
22093: LD_INT 1
22095: PUSH
22096: EMPTY
22097: LIST
22098: LIST
22099: PUSH
22100: EMPTY
22101: LIST
22102: LIST
22103: LIST
22104: PPUSH
22105: CALL_OW 72
22109: NOT
22110: PUSH
22111: LD_EXP 36
22115: PUSH
22116: LD_VAR 0 1
22120: ARRAY
22121: PPUSH
22122: LD_INT 2
22124: PUSH
22125: LD_INT 30
22127: PUSH
22128: LD_INT 0
22130: PUSH
22131: EMPTY
22132: LIST
22133: LIST
22134: PUSH
22135: LD_INT 30
22137: PUSH
22138: LD_INT 1
22140: PUSH
22141: EMPTY
22142: LIST
22143: LIST
22144: PUSH
22145: EMPTY
22146: LIST
22147: LIST
22148: LIST
22149: PPUSH
22150: CALL_OW 72
22154: PPUSH
22155: CALL_OW 256
22159: PUSH
22160: LD_INT 600
22162: LESS
22163: OR
22164: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
22165: LD_VAR 0 5
22169: PPUSH
22170: CALL_OW 247
22174: PUSH
22175: LD_INT 2
22177: DOUBLE
22178: EQUAL
22179: IFTRUE 22183
22181: GO 22475
22183: POP
// begin if GetLives ( i ) > 650 and ( GetDistUnits ( i , e ) < 40 or IsInArea ( e , mc_scan_area [ base ] ) ) then
22184: LD_VAR 0 5
22188: PPUSH
22189: CALL_OW 256
22193: PUSH
22194: LD_INT 650
22196: GREATER
22197: PUSH
22198: LD_VAR 0 5
22202: PPUSH
22203: LD_VAR 0 13
22207: PPUSH
22208: CALL_OW 296
22212: PUSH
22213: LD_INT 40
22215: LESS
22216: PUSH
22217: LD_VAR 0 13
22221: PPUSH
22222: LD_EXP 61
22226: PUSH
22227: LD_VAR 0 1
22231: ARRAY
22232: PPUSH
22233: CALL_OW 308
22237: OR
22238: AND
22239: IFFALSE 22257
// ComAttackUnit ( i , e ) else
22241: LD_VAR 0 5
22245: PPUSH
22246: LD_VAR 0 13
22250: PPUSH
22251: CALL_OW 115
22255: GO 22358
// if ( ( not IsInArea ( e , mc_scan_area [ base ] ) and GetDistUnits ( i , e ) >= 40 ) or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
22257: LD_VAR 0 13
22261: PPUSH
22262: LD_EXP 61
22266: PUSH
22267: LD_VAR 0 1
22271: ARRAY
22272: PPUSH
22273: CALL_OW 308
22277: NOT
22278: PUSH
22279: LD_VAR 0 5
22283: PPUSH
22284: LD_VAR 0 13
22288: PPUSH
22289: CALL_OW 296
22293: PUSH
22294: LD_INT 40
22296: GREATEREQUAL
22297: AND
22298: PUSH
22299: LD_VAR 0 5
22303: PPUSH
22304: CALL_OW 256
22308: PUSH
22309: LD_INT 650
22311: LESSEQUAL
22312: OR
22313: PUSH
22314: LD_VAR 0 5
22318: PPUSH
22319: LD_EXP 60
22323: PUSH
22324: LD_VAR 0 1
22328: ARRAY
22329: PPUSH
22330: CALL_OW 308
22334: NOT
22335: AND
22336: IFFALSE 22358
// ComMoveToArea ( i , mc_parking [ base ] ) ;
22338: LD_VAR 0 5
22342: PPUSH
22343: LD_EXP 60
22347: PUSH
22348: LD_VAR 0 1
22352: ARRAY
22353: PPUSH
22354: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
22358: LD_VAR 0 5
22362: PPUSH
22363: CALL_OW 256
22367: PUSH
22368: LD_INT 998
22370: LESS
22371: PUSH
22372: LD_VAR 0 5
22376: PPUSH
22377: CALL_OW 263
22381: PUSH
22382: LD_INT 1
22384: EQUAL
22385: AND
22386: PUSH
22387: LD_VAR 0 5
22391: PPUSH
22392: CALL_OW 311
22396: AND
22397: PUSH
22398: LD_VAR 0 5
22402: PPUSH
22403: LD_EXP 60
22407: PUSH
22408: LD_VAR 0 1
22412: ARRAY
22413: PPUSH
22414: CALL_OW 308
22418: AND
22419: IFFALSE 22473
// begin mech := IsDrivenBy ( i ) ;
22421: LD_ADDR_VAR 0 9
22425: PUSH
22426: LD_VAR 0 5
22430: PPUSH
22431: CALL_OW 311
22435: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
22436: LD_VAR 0 9
22440: PPUSH
22441: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
22445: LD_VAR 0 9
22449: PPUSH
22450: LD_VAR 0 5
22454: PPUSH
22455: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
22459: LD_VAR 0 9
22463: PPUSH
22464: LD_VAR 0 5
22468: PPUSH
22469: CALL_OW 180
// end ; end ; unit_human :
22473: GO 22740
22475: LD_INT 1
22477: DOUBLE
22478: EQUAL
22479: IFTRUE 22483
22481: GO 22739
22483: POP
// begin b := IsInUnit ( i ) ;
22484: LD_ADDR_VAR 0 18
22488: PUSH
22489: LD_VAR 0 5
22493: PPUSH
22494: CALL_OW 310
22498: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
22499: LD_ADDR_VAR 0 19
22503: PUSH
22504: LD_VAR 0 18
22508: NOT
22509: PUSH
22510: LD_VAR 0 18
22514: PPUSH
22515: CALL_OW 266
22519: PUSH
22520: LD_INT 32
22522: PUSH
22523: LD_INT 31
22525: PUSH
22526: EMPTY
22527: LIST
22528: LIST
22529: IN
22530: OR
22531: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
22532: LD_VAR 0 16
22536: PUSH
22537: LD_VAR 0 2
22541: PPUSH
22542: LD_INT 21
22544: PUSH
22545: LD_INT 2
22547: PUSH
22548: EMPTY
22549: LIST
22550: LIST
22551: PPUSH
22552: CALL_OW 72
22556: PUSH
22557: LD_INT 1
22559: LESSEQUAL
22560: OR
22561: PUSH
22562: LD_VAR 0 19
22566: AND
22567: PUSH
22568: LD_VAR 0 5
22572: PUSH
22573: LD_VAR 0 17
22577: IN
22578: NOT
22579: AND
22580: IFFALSE 22673
// begin if b then
22582: LD_VAR 0 18
22586: IFFALSE 22635
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
22588: LD_VAR 0 18
22592: PPUSH
22593: LD_VAR 0 3
22597: PPUSH
22598: LD_VAR 0 18
22602: PPUSH
22603: CALL_OW 74
22607: PPUSH
22608: CALL_OW 296
22612: PUSH
22613: LD_INT 10
22615: LESS
22616: PUSH
22617: LD_VAR 0 18
22621: PPUSH
22622: CALL_OW 461
22626: PUSH
22627: LD_INT 7
22629: NONEQUAL
22630: AND
22631: IFFALSE 22635
// continue ;
22633: GO 22038
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
22635: LD_ADDR_VAR 0 17
22639: PUSH
22640: LD_VAR 0 17
22644: PPUSH
22645: LD_VAR 0 17
22649: PUSH
22650: LD_INT 1
22652: PLUS
22653: PPUSH
22654: LD_VAR 0 5
22658: PPUSH
22659: CALL_OW 1
22663: ST_TO_ADDR
// ComExitBuilding ( i ) ;
22664: LD_VAR 0 5
22668: PPUSH
22669: CALL_OW 122
// end ; if sold_defenders then
22673: LD_VAR 0 17
22677: IFFALSE 22737
// if i in sold_defenders then
22679: LD_VAR 0 5
22683: PUSH
22684: LD_VAR 0 17
22688: IN
22689: IFFALSE 22737
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
22691: LD_VAR 0 5
22695: PPUSH
22696: CALL_OW 314
22700: NOT
22701: PUSH
22702: LD_VAR 0 5
22706: PPUSH
22707: LD_VAR 0 13
22711: PPUSH
22712: CALL_OW 296
22716: PUSH
22717: LD_INT 30
22719: LESS
22720: AND
22721: IFFALSE 22737
// ComAttackUnit ( i , e ) ;
22723: LD_VAR 0 5
22727: PPUSH
22728: LD_VAR 0 13
22732: PPUSH
22733: CALL_OW 115
// end ; end ; end ;
22737: GO 22740
22739: POP
// if IsDead ( i ) then
22740: LD_VAR 0 5
22744: PPUSH
22745: CALL_OW 301
22749: IFFALSE 22767
// defenders := defenders diff i ;
22751: LD_ADDR_VAR 0 2
22755: PUSH
22756: LD_VAR 0 2
22760: PUSH
22761: LD_VAR 0 5
22765: DIFF
22766: ST_TO_ADDR
// end ;
22767: GO 22038
22769: POP
22770: POP
// until not enemy or not defenders or not mc_bases [ base ] ;
22771: LD_VAR 0 3
22775: NOT
22776: PUSH
22777: LD_VAR 0 2
22781: NOT
22782: OR
22783: PUSH
22784: LD_EXP 36
22788: PUSH
22789: LD_VAR 0 1
22793: ARRAY
22794: NOT
22795: OR
22796: IFFALSE 21942
// MC_Reset ( base , 18 ) ;
22798: LD_VAR 0 1
22802: PPUSH
22803: LD_INT 18
22805: PPUSH
22806: CALL 66473 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
22810: LD_ADDR_VAR 0 2
22814: PUSH
22815: LD_VAR 0 2
22819: PUSH
22820: LD_VAR 0 2
22824: PPUSH
22825: LD_INT 2
22827: PUSH
22828: LD_INT 25
22830: PUSH
22831: LD_INT 1
22833: PUSH
22834: EMPTY
22835: LIST
22836: LIST
22837: PUSH
22838: LD_INT 25
22840: PUSH
22841: LD_INT 5
22843: PUSH
22844: EMPTY
22845: LIST
22846: LIST
22847: PUSH
22848: LD_INT 25
22850: PUSH
22851: LD_INT 8
22853: PUSH
22854: EMPTY
22855: LIST
22856: LIST
22857: PUSH
22858: LD_INT 25
22860: PUSH
22861: LD_INT 9
22863: PUSH
22864: EMPTY
22865: LIST
22866: LIST
22867: PUSH
22868: EMPTY
22869: LIST
22870: LIST
22871: LIST
22872: LIST
22873: LIST
22874: PPUSH
22875: CALL_OW 72
22879: DIFF
22880: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
22881: LD_VAR 0 3
22885: NOT
22886: PUSH
22887: LD_VAR 0 2
22891: PPUSH
22892: LD_INT 21
22894: PUSH
22895: LD_INT 2
22897: PUSH
22898: EMPTY
22899: LIST
22900: LIST
22901: PPUSH
22902: CALL_OW 72
22906: AND
22907: IFFALSE 23245
// begin tmp := FilterByTag ( defenders , 19 ) ;
22909: LD_ADDR_VAR 0 11
22913: PUSH
22914: LD_VAR 0 2
22918: PPUSH
22919: LD_INT 19
22921: PPUSH
22922: CALL 59686 0 2
22926: ST_TO_ADDR
// if tmp then
22927: LD_VAR 0 11
22931: IFFALSE 23001
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
22933: LD_ADDR_VAR 0 11
22937: PUSH
22938: LD_VAR 0 11
22942: PPUSH
22943: LD_INT 25
22945: PUSH
22946: LD_INT 3
22948: PUSH
22949: EMPTY
22950: LIST
22951: LIST
22952: PPUSH
22953: CALL_OW 72
22957: ST_TO_ADDR
// if tmp then
22958: LD_VAR 0 11
22962: IFFALSE 23001
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
22964: LD_ADDR_EXP 48
22968: PUSH
22969: LD_EXP 48
22973: PPUSH
22974: LD_VAR 0 1
22978: PPUSH
22979: LD_EXP 48
22983: PUSH
22984: LD_VAR 0 1
22988: ARRAY
22989: PUSH
22990: LD_VAR 0 11
22994: UNION
22995: PPUSH
22996: CALL_OW 1
23000: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
23001: LD_VAR 0 1
23005: PPUSH
23006: LD_INT 19
23008: PPUSH
23009: CALL 66473 0 2
// repeat wait ( 0 0$1 ) ;
23013: LD_INT 35
23015: PPUSH
23016: CALL_OW 67
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
23020: LD_EXP 36
23024: PUSH
23025: LD_VAR 0 1
23029: ARRAY
23030: NOT
23031: PUSH
23032: LD_EXP 36
23036: PUSH
23037: LD_VAR 0 1
23041: ARRAY
23042: PUSH
23043: EMPTY
23044: EQUAL
23045: OR
23046: IFFALSE 23083
// begin for i in defenders do
23048: LD_ADDR_VAR 0 5
23052: PUSH
23053: LD_VAR 0 2
23057: PUSH
23058: FOR_IN
23059: IFFALSE 23072
// ComStop ( i ) ;
23061: LD_VAR 0 5
23065: PPUSH
23066: CALL_OW 141
23070: GO 23058
23072: POP
23073: POP
// defenders := [ ] ;
23074: LD_ADDR_VAR 0 2
23078: PUSH
23079: EMPTY
23080: ST_TO_ADDR
// exit ;
23081: GO 23257
// end ; for i in defenders do
23083: LD_ADDR_VAR 0 5
23087: PUSH
23088: LD_VAR 0 2
23092: PUSH
23093: FOR_IN
23094: IFFALSE 23183
// begin if not IsInArea ( i , mc_parking [ base ] ) then
23096: LD_VAR 0 5
23100: PPUSH
23101: LD_EXP 60
23105: PUSH
23106: LD_VAR 0 1
23110: ARRAY
23111: PPUSH
23112: CALL_OW 308
23116: NOT
23117: IFFALSE 23141
// ComMoveToArea ( i , mc_parking [ base ] ) else
23119: LD_VAR 0 5
23123: PPUSH
23124: LD_EXP 60
23128: PUSH
23129: LD_VAR 0 1
23133: ARRAY
23134: PPUSH
23135: CALL_OW 113
23139: GO 23181
// if GetControl ( i ) = control_manual then
23141: LD_VAR 0 5
23145: PPUSH
23146: CALL_OW 263
23150: PUSH
23151: LD_INT 1
23153: EQUAL
23154: IFFALSE 23181
// if IsDrivenBy ( i ) then
23156: LD_VAR 0 5
23160: PPUSH
23161: CALL_OW 311
23165: IFFALSE 23181
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
23167: LD_VAR 0 5
23171: PPUSH
23172: CALL_OW 311
23176: PPUSH
23177: CALL_OW 121
// end ;
23181: GO 23093
23183: POP
23184: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] or not mc_bases [ base ] ;
23185: LD_VAR 0 2
23189: PPUSH
23190: LD_INT 95
23192: PUSH
23193: LD_EXP 60
23197: PUSH
23198: LD_VAR 0 1
23202: ARRAY
23203: PUSH
23204: EMPTY
23205: LIST
23206: LIST
23207: PPUSH
23208: CALL_OW 72
23212: PUSH
23213: LD_VAR 0 2
23217: EQUAL
23218: PUSH
23219: LD_EXP 59
23223: PUSH
23224: LD_VAR 0 1
23228: ARRAY
23229: OR
23230: PUSH
23231: LD_EXP 36
23235: PUSH
23236: LD_VAR 0 1
23240: ARRAY
23241: NOT
23242: OR
23243: IFFALSE 23013
// end ; MC_Reset ( base , 20 ) ;
23245: LD_VAR 0 1
23249: PPUSH
23250: LD_INT 20
23252: PPUSH
23253: CALL 66473 0 2
// end ;
23257: LD_VAR 0 4
23261: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
23262: LD_INT 0
23264: PPUSH
23265: PPUSH
23266: PPUSH
23267: PPUSH
// result := false ;
23268: LD_ADDR_VAR 0 2
23272: PUSH
23273: LD_INT 0
23275: ST_TO_ADDR
// side := GetSide ( unit ) ;
23276: LD_ADDR_VAR 0 3
23280: PUSH
23281: LD_VAR 0 1
23285: PPUSH
23286: CALL_OW 255
23290: ST_TO_ADDR
// nat := GetNation ( unit ) ;
23291: LD_ADDR_VAR 0 4
23295: PUSH
23296: LD_VAR 0 1
23300: PPUSH
23301: CALL_OW 248
23305: ST_TO_ADDR
// case nat of 1 :
23306: LD_VAR 0 4
23310: PUSH
23311: LD_INT 1
23313: DOUBLE
23314: EQUAL
23315: IFTRUE 23319
23317: GO 23330
23319: POP
// tech := tech_lassight ; 2 :
23320: LD_ADDR_VAR 0 5
23324: PUSH
23325: LD_INT 12
23327: ST_TO_ADDR
23328: GO 23369
23330: LD_INT 2
23332: DOUBLE
23333: EQUAL
23334: IFTRUE 23338
23336: GO 23349
23338: POP
// tech := tech_mortar ; 3 :
23339: LD_ADDR_VAR 0 5
23343: PUSH
23344: LD_INT 41
23346: ST_TO_ADDR
23347: GO 23369
23349: LD_INT 3
23351: DOUBLE
23352: EQUAL
23353: IFTRUE 23357
23355: GO 23368
23357: POP
// tech := tech_bazooka ; end ;
23358: LD_ADDR_VAR 0 5
23362: PUSH
23363: LD_INT 44
23365: ST_TO_ADDR
23366: GO 23369
23368: POP
// if Researched ( side , tech ) then
23369: LD_VAR 0 3
23373: PPUSH
23374: LD_VAR 0 5
23378: PPUSH
23379: CALL_OW 325
23383: IFFALSE 23410
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
23385: LD_ADDR_VAR 0 2
23389: PUSH
23390: LD_INT 5
23392: PUSH
23393: LD_INT 8
23395: PUSH
23396: LD_INT 9
23398: PUSH
23399: EMPTY
23400: LIST
23401: LIST
23402: LIST
23403: PUSH
23404: LD_VAR 0 4
23408: ARRAY
23409: ST_TO_ADDR
// end ;
23410: LD_VAR 0 2
23414: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
23415: LD_INT 0
23417: PPUSH
23418: PPUSH
23419: PPUSH
// if not mines then
23420: LD_VAR 0 2
23424: NOT
23425: IFFALSE 23429
// exit ;
23427: GO 23573
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23429: LD_ADDR_VAR 0 5
23433: PUSH
23434: LD_INT 81
23436: PUSH
23437: LD_VAR 0 1
23441: PUSH
23442: EMPTY
23443: LIST
23444: LIST
23445: PUSH
23446: LD_INT 3
23448: PUSH
23449: LD_INT 21
23451: PUSH
23452: LD_INT 3
23454: PUSH
23455: EMPTY
23456: LIST
23457: LIST
23458: PUSH
23459: EMPTY
23460: LIST
23461: LIST
23462: PUSH
23463: EMPTY
23464: LIST
23465: LIST
23466: PPUSH
23467: CALL_OW 69
23471: ST_TO_ADDR
// for i in mines do
23472: LD_ADDR_VAR 0 4
23476: PUSH
23477: LD_VAR 0 2
23481: PUSH
23482: FOR_IN
23483: IFFALSE 23571
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
23485: LD_VAR 0 4
23489: PUSH
23490: LD_INT 1
23492: ARRAY
23493: PPUSH
23494: LD_VAR 0 4
23498: PUSH
23499: LD_INT 2
23501: ARRAY
23502: PPUSH
23503: CALL_OW 458
23507: NOT
23508: IFFALSE 23512
// continue ;
23510: GO 23482
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
23512: LD_VAR 0 4
23516: PUSH
23517: LD_INT 1
23519: ARRAY
23520: PPUSH
23521: LD_VAR 0 4
23525: PUSH
23526: LD_INT 2
23528: ARRAY
23529: PPUSH
23530: CALL_OW 428
23534: PUSH
23535: LD_VAR 0 5
23539: IN
23540: IFFALSE 23569
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
23542: LD_VAR 0 4
23546: PUSH
23547: LD_INT 1
23549: ARRAY
23550: PPUSH
23551: LD_VAR 0 4
23555: PUSH
23556: LD_INT 2
23558: ARRAY
23559: PPUSH
23560: LD_VAR 0 1
23564: PPUSH
23565: CALL_OW 456
// end ;
23569: GO 23482
23571: POP
23572: POP
// end ;
23573: LD_VAR 0 3
23577: RET
// export function Count ( array ) ; var i ; begin
23578: LD_INT 0
23580: PPUSH
23581: PPUSH
// result := 0 ;
23582: LD_ADDR_VAR 0 2
23586: PUSH
23587: LD_INT 0
23589: ST_TO_ADDR
// for i in array do
23590: LD_ADDR_VAR 0 3
23594: PUSH
23595: LD_VAR 0 1
23599: PUSH
23600: FOR_IN
23601: IFFALSE 23625
// if i then
23603: LD_VAR 0 3
23607: IFFALSE 23623
// result := result + 1 ;
23609: LD_ADDR_VAR 0 2
23613: PUSH
23614: LD_VAR 0 2
23618: PUSH
23619: LD_INT 1
23621: PLUS
23622: ST_TO_ADDR
23623: GO 23600
23625: POP
23626: POP
// end ;
23627: LD_VAR 0 2
23631: RET
// export function IsEmpty ( building ) ; begin
23632: LD_INT 0
23634: PPUSH
// if not building then
23635: LD_VAR 0 1
23639: NOT
23640: IFFALSE 23644
// exit ;
23642: GO 23687
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
23644: LD_ADDR_VAR 0 2
23648: PUSH
23649: LD_VAR 0 1
23653: PUSH
23654: LD_INT 22
23656: PUSH
23657: LD_VAR 0 1
23661: PPUSH
23662: CALL_OW 255
23666: PUSH
23667: EMPTY
23668: LIST
23669: LIST
23670: PUSH
23671: LD_INT 58
23673: PUSH
23674: EMPTY
23675: LIST
23676: PUSH
23677: EMPTY
23678: LIST
23679: LIST
23680: PPUSH
23681: CALL_OW 69
23685: IN
23686: ST_TO_ADDR
// end ;
23687: LD_VAR 0 2
23691: RET
// export function IsNotFull ( building ) ; begin
23692: LD_INT 0
23694: PPUSH
// if not building then
23695: LD_VAR 0 1
23699: NOT
23700: IFFALSE 23704
// exit ;
23702: GO 23723
// result := UnitsInside ( building ) < 6 ;
23704: LD_ADDR_VAR 0 2
23708: PUSH
23709: LD_VAR 0 1
23713: PPUSH
23714: CALL_OW 313
23718: PUSH
23719: LD_INT 6
23721: LESS
23722: ST_TO_ADDR
// end ;
23723: LD_VAR 0 2
23727: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
23728: LD_INT 0
23730: PPUSH
23731: PPUSH
23732: PPUSH
23733: PPUSH
// tmp := [ ] ;
23734: LD_ADDR_VAR 0 3
23738: PUSH
23739: EMPTY
23740: ST_TO_ADDR
// list := [ ] ;
23741: LD_ADDR_VAR 0 5
23745: PUSH
23746: EMPTY
23747: ST_TO_ADDR
// for i = 16 to 25 do
23748: LD_ADDR_VAR 0 4
23752: PUSH
23753: DOUBLE
23754: LD_INT 16
23756: DEC
23757: ST_TO_ADDR
23758: LD_INT 25
23760: PUSH
23761: FOR_TO
23762: IFFALSE 23835
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
23764: LD_ADDR_VAR 0 3
23768: PUSH
23769: LD_VAR 0 3
23773: PUSH
23774: LD_INT 22
23776: PUSH
23777: LD_VAR 0 1
23781: PPUSH
23782: CALL_OW 255
23786: PUSH
23787: EMPTY
23788: LIST
23789: LIST
23790: PUSH
23791: LD_INT 91
23793: PUSH
23794: LD_VAR 0 1
23798: PUSH
23799: LD_INT 6
23801: PUSH
23802: EMPTY
23803: LIST
23804: LIST
23805: LIST
23806: PUSH
23807: LD_INT 30
23809: PUSH
23810: LD_VAR 0 4
23814: PUSH
23815: EMPTY
23816: LIST
23817: LIST
23818: PUSH
23819: EMPTY
23820: LIST
23821: LIST
23822: LIST
23823: PUSH
23824: EMPTY
23825: LIST
23826: PPUSH
23827: CALL_OW 69
23831: ADD
23832: ST_TO_ADDR
23833: GO 23761
23835: POP
23836: POP
// for i = 1 to tmp do
23837: LD_ADDR_VAR 0 4
23841: PUSH
23842: DOUBLE
23843: LD_INT 1
23845: DEC
23846: ST_TO_ADDR
23847: LD_VAR 0 3
23851: PUSH
23852: FOR_TO
23853: IFFALSE 23941
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
23855: LD_ADDR_VAR 0 5
23859: PUSH
23860: LD_VAR 0 5
23864: PUSH
23865: LD_VAR 0 3
23869: PUSH
23870: LD_VAR 0 4
23874: ARRAY
23875: PPUSH
23876: CALL_OW 266
23880: PUSH
23881: LD_VAR 0 3
23885: PUSH
23886: LD_VAR 0 4
23890: ARRAY
23891: PPUSH
23892: CALL_OW 250
23896: PUSH
23897: LD_VAR 0 3
23901: PUSH
23902: LD_VAR 0 4
23906: ARRAY
23907: PPUSH
23908: CALL_OW 251
23912: PUSH
23913: LD_VAR 0 3
23917: PUSH
23918: LD_VAR 0 4
23922: ARRAY
23923: PPUSH
23924: CALL_OW 254
23928: PUSH
23929: EMPTY
23930: LIST
23931: LIST
23932: LIST
23933: LIST
23934: PUSH
23935: EMPTY
23936: LIST
23937: ADD
23938: ST_TO_ADDR
23939: GO 23852
23941: POP
23942: POP
// result := list ;
23943: LD_ADDR_VAR 0 2
23947: PUSH
23948: LD_VAR 0 5
23952: ST_TO_ADDR
// end ;
23953: LD_VAR 0 2
23957: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
23958: LD_INT 0
23960: PPUSH
23961: PPUSH
23962: PPUSH
23963: PPUSH
23964: PPUSH
23965: PPUSH
23966: PPUSH
// if not factory then
23967: LD_VAR 0 1
23971: NOT
23972: IFFALSE 23976
// exit ;
23974: GO 24569
// if control = control_apeman then
23976: LD_VAR 0 4
23980: PUSH
23981: LD_INT 5
23983: EQUAL
23984: IFFALSE 24093
// begin tmp := UnitsInside ( factory ) ;
23986: LD_ADDR_VAR 0 8
23990: PUSH
23991: LD_VAR 0 1
23995: PPUSH
23996: CALL_OW 313
24000: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
24001: LD_VAR 0 8
24005: PPUSH
24006: LD_INT 25
24008: PUSH
24009: LD_INT 12
24011: PUSH
24012: EMPTY
24013: LIST
24014: LIST
24015: PPUSH
24016: CALL_OW 72
24020: NOT
24021: IFFALSE 24031
// control := control_manual ;
24023: LD_ADDR_VAR 0 4
24027: PUSH
24028: LD_INT 1
24030: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
24031: LD_ADDR_VAR 0 8
24035: PUSH
24036: LD_VAR 0 1
24040: PPUSH
24041: CALL 23728 0 1
24045: ST_TO_ADDR
// if tmp then
24046: LD_VAR 0 8
24050: IFFALSE 24093
// begin for i in tmp do
24052: LD_ADDR_VAR 0 7
24056: PUSH
24057: LD_VAR 0 8
24061: PUSH
24062: FOR_IN
24063: IFFALSE 24091
// if i [ 1 ] = b_ext_radio then
24065: LD_VAR 0 7
24069: PUSH
24070: LD_INT 1
24072: ARRAY
24073: PUSH
24074: LD_INT 22
24076: EQUAL
24077: IFFALSE 24089
// begin control := control_remote ;
24079: LD_ADDR_VAR 0 4
24083: PUSH
24084: LD_INT 2
24086: ST_TO_ADDR
// break ;
24087: GO 24091
// end ;
24089: GO 24062
24091: POP
24092: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24093: LD_VAR 0 1
24097: PPUSH
24098: LD_VAR 0 2
24102: PPUSH
24103: LD_VAR 0 3
24107: PPUSH
24108: LD_VAR 0 4
24112: PPUSH
24113: LD_VAR 0 5
24117: PPUSH
24118: CALL_OW 448
24122: IFFALSE 24157
// begin result := [ chassis , engine , control , weapon ] ;
24124: LD_ADDR_VAR 0 6
24128: PUSH
24129: LD_VAR 0 2
24133: PUSH
24134: LD_VAR 0 3
24138: PUSH
24139: LD_VAR 0 4
24143: PUSH
24144: LD_VAR 0 5
24148: PUSH
24149: EMPTY
24150: LIST
24151: LIST
24152: LIST
24153: LIST
24154: ST_TO_ADDR
// exit ;
24155: GO 24569
// end ; _chassis := AvailableChassisList ( factory ) ;
24157: LD_ADDR_VAR 0 9
24161: PUSH
24162: LD_VAR 0 1
24166: PPUSH
24167: CALL_OW 475
24171: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
24172: LD_ADDR_VAR 0 11
24176: PUSH
24177: LD_VAR 0 1
24181: PPUSH
24182: CALL_OW 476
24186: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
24187: LD_ADDR_VAR 0 12
24191: PUSH
24192: LD_VAR 0 1
24196: PPUSH
24197: CALL_OW 477
24201: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
24202: LD_ADDR_VAR 0 10
24206: PUSH
24207: LD_VAR 0 1
24211: PPUSH
24212: CALL_OW 478
24216: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
24217: LD_VAR 0 9
24221: NOT
24222: PUSH
24223: LD_VAR 0 11
24227: NOT
24228: OR
24229: PUSH
24230: LD_VAR 0 12
24234: NOT
24235: OR
24236: PUSH
24237: LD_VAR 0 10
24241: NOT
24242: OR
24243: IFFALSE 24278
// begin result := [ chassis , engine , control , weapon ] ;
24245: LD_ADDR_VAR 0 6
24249: PUSH
24250: LD_VAR 0 2
24254: PUSH
24255: LD_VAR 0 3
24259: PUSH
24260: LD_VAR 0 4
24264: PUSH
24265: LD_VAR 0 5
24269: PUSH
24270: EMPTY
24271: LIST
24272: LIST
24273: LIST
24274: LIST
24275: ST_TO_ADDR
// exit ;
24276: GO 24569
// end ; if not chassis in _chassis then
24278: LD_VAR 0 2
24282: PUSH
24283: LD_VAR 0 9
24287: IN
24288: NOT
24289: IFFALSE 24315
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
24291: LD_ADDR_VAR 0 2
24295: PUSH
24296: LD_VAR 0 9
24300: PUSH
24301: LD_INT 1
24303: PPUSH
24304: LD_VAR 0 9
24308: PPUSH
24309: CALL_OW 12
24313: ARRAY
24314: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
24315: LD_VAR 0 2
24319: PPUSH
24320: LD_VAR 0 3
24324: PPUSH
24325: CALL 24574 0 2
24329: NOT
24330: IFFALSE 24389
// repeat engine := _engine [ 1 ] ;
24332: LD_ADDR_VAR 0 3
24336: PUSH
24337: LD_VAR 0 11
24341: PUSH
24342: LD_INT 1
24344: ARRAY
24345: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
24346: LD_ADDR_VAR 0 11
24350: PUSH
24351: LD_VAR 0 11
24355: PPUSH
24356: LD_INT 1
24358: PPUSH
24359: CALL_OW 3
24363: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
24364: LD_VAR 0 2
24368: PPUSH
24369: LD_VAR 0 3
24373: PPUSH
24374: CALL 24574 0 2
24378: PUSH
24379: LD_VAR 0 11
24383: PUSH
24384: EMPTY
24385: EQUAL
24386: OR
24387: IFFALSE 24332
// if not control in _control then
24389: LD_VAR 0 4
24393: PUSH
24394: LD_VAR 0 12
24398: IN
24399: NOT
24400: IFFALSE 24426
// control := _control [ rand ( 1 , _control ) ] ;
24402: LD_ADDR_VAR 0 4
24406: PUSH
24407: LD_VAR 0 12
24411: PUSH
24412: LD_INT 1
24414: PPUSH
24415: LD_VAR 0 12
24419: PPUSH
24420: CALL_OW 12
24424: ARRAY
24425: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
24426: LD_VAR 0 2
24430: PPUSH
24431: LD_VAR 0 5
24435: PPUSH
24436: CALL 24794 0 2
24440: NOT
24441: IFFALSE 24500
// repeat weapon := _weapon [ 1 ] ;
24443: LD_ADDR_VAR 0 5
24447: PUSH
24448: LD_VAR 0 10
24452: PUSH
24453: LD_INT 1
24455: ARRAY
24456: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
24457: LD_ADDR_VAR 0 10
24461: PUSH
24462: LD_VAR 0 10
24466: PPUSH
24467: LD_INT 1
24469: PPUSH
24470: CALL_OW 3
24474: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
24475: LD_VAR 0 2
24479: PPUSH
24480: LD_VAR 0 5
24484: PPUSH
24485: CALL 24794 0 2
24489: PUSH
24490: LD_VAR 0 10
24494: PUSH
24495: EMPTY
24496: EQUAL
24497: OR
24498: IFFALSE 24443
// result := [ ] ;
24500: LD_ADDR_VAR 0 6
24504: PUSH
24505: EMPTY
24506: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24507: LD_VAR 0 1
24511: PPUSH
24512: LD_VAR 0 2
24516: PPUSH
24517: LD_VAR 0 3
24521: PPUSH
24522: LD_VAR 0 4
24526: PPUSH
24527: LD_VAR 0 5
24531: PPUSH
24532: CALL_OW 448
24536: IFFALSE 24569
// result := [ chassis , engine , control , weapon ] ;
24538: LD_ADDR_VAR 0 6
24542: PUSH
24543: LD_VAR 0 2
24547: PUSH
24548: LD_VAR 0 3
24552: PUSH
24553: LD_VAR 0 4
24557: PUSH
24558: LD_VAR 0 5
24562: PUSH
24563: EMPTY
24564: LIST
24565: LIST
24566: LIST
24567: LIST
24568: ST_TO_ADDR
// end ;
24569: LD_VAR 0 6
24573: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
24574: LD_INT 0
24576: PPUSH
// if not chassis or not engine then
24577: LD_VAR 0 1
24581: NOT
24582: PUSH
24583: LD_VAR 0 2
24587: NOT
24588: OR
24589: IFFALSE 24593
// exit ;
24591: GO 24789
// case engine of engine_solar :
24593: LD_VAR 0 2
24597: PUSH
24598: LD_INT 2
24600: DOUBLE
24601: EQUAL
24602: IFTRUE 24606
24604: GO 24644
24606: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
24607: LD_ADDR_VAR 0 3
24611: PUSH
24612: LD_INT 11
24614: PUSH
24615: LD_INT 12
24617: PUSH
24618: LD_INT 13
24620: PUSH
24621: LD_INT 14
24623: PUSH
24624: LD_INT 1
24626: PUSH
24627: LD_INT 2
24629: PUSH
24630: LD_INT 3
24632: PUSH
24633: EMPTY
24634: LIST
24635: LIST
24636: LIST
24637: LIST
24638: LIST
24639: LIST
24640: LIST
24641: ST_TO_ADDR
24642: GO 24773
24644: LD_INT 1
24646: DOUBLE
24647: EQUAL
24648: IFTRUE 24652
24650: GO 24714
24652: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
24653: LD_ADDR_VAR 0 3
24657: PUSH
24658: LD_INT 11
24660: PUSH
24661: LD_INT 12
24663: PUSH
24664: LD_INT 13
24666: PUSH
24667: LD_INT 14
24669: PUSH
24670: LD_INT 1
24672: PUSH
24673: LD_INT 2
24675: PUSH
24676: LD_INT 3
24678: PUSH
24679: LD_INT 4
24681: PUSH
24682: LD_INT 5
24684: PUSH
24685: LD_INT 21
24687: PUSH
24688: LD_INT 23
24690: PUSH
24691: LD_INT 22
24693: PUSH
24694: LD_INT 24
24696: PUSH
24697: EMPTY
24698: LIST
24699: LIST
24700: LIST
24701: LIST
24702: LIST
24703: LIST
24704: LIST
24705: LIST
24706: LIST
24707: LIST
24708: LIST
24709: LIST
24710: LIST
24711: ST_TO_ADDR
24712: GO 24773
24714: LD_INT 3
24716: DOUBLE
24717: EQUAL
24718: IFTRUE 24722
24720: GO 24772
24722: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24723: LD_ADDR_VAR 0 3
24727: PUSH
24728: LD_INT 13
24730: PUSH
24731: LD_INT 14
24733: PUSH
24734: LD_INT 2
24736: PUSH
24737: LD_INT 3
24739: PUSH
24740: LD_INT 4
24742: PUSH
24743: LD_INT 5
24745: PUSH
24746: LD_INT 21
24748: PUSH
24749: LD_INT 22
24751: PUSH
24752: LD_INT 23
24754: PUSH
24755: LD_INT 24
24757: PUSH
24758: EMPTY
24759: LIST
24760: LIST
24761: LIST
24762: LIST
24763: LIST
24764: LIST
24765: LIST
24766: LIST
24767: LIST
24768: LIST
24769: ST_TO_ADDR
24770: GO 24773
24772: POP
// result := ( chassis in result ) ;
24773: LD_ADDR_VAR 0 3
24777: PUSH
24778: LD_VAR 0 1
24782: PUSH
24783: LD_VAR 0 3
24787: IN
24788: ST_TO_ADDR
// end ;
24789: LD_VAR 0 3
24793: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
24794: LD_INT 0
24796: PPUSH
// if not chassis or not weapon then
24797: LD_VAR 0 1
24801: NOT
24802: PUSH
24803: LD_VAR 0 2
24807: NOT
24808: OR
24809: IFFALSE 24813
// exit ;
24811: GO 25839
// case weapon of us_machine_gun :
24813: LD_VAR 0 2
24817: PUSH
24818: LD_INT 2
24820: DOUBLE
24821: EQUAL
24822: IFTRUE 24826
24824: GO 24856
24826: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
24827: LD_ADDR_VAR 0 3
24831: PUSH
24832: LD_INT 1
24834: PUSH
24835: LD_INT 2
24837: PUSH
24838: LD_INT 3
24840: PUSH
24841: LD_INT 4
24843: PUSH
24844: LD_INT 5
24846: PUSH
24847: EMPTY
24848: LIST
24849: LIST
24850: LIST
24851: LIST
24852: LIST
24853: ST_TO_ADDR
24854: GO 25823
24856: LD_INT 3
24858: DOUBLE
24859: EQUAL
24860: IFTRUE 24864
24862: GO 24894
24864: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
24865: LD_ADDR_VAR 0 3
24869: PUSH
24870: LD_INT 1
24872: PUSH
24873: LD_INT 2
24875: PUSH
24876: LD_INT 3
24878: PUSH
24879: LD_INT 4
24881: PUSH
24882: LD_INT 5
24884: PUSH
24885: EMPTY
24886: LIST
24887: LIST
24888: LIST
24889: LIST
24890: LIST
24891: ST_TO_ADDR
24892: GO 25823
24894: LD_INT 11
24896: DOUBLE
24897: EQUAL
24898: IFTRUE 24902
24900: GO 24932
24902: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
24903: LD_ADDR_VAR 0 3
24907: PUSH
24908: LD_INT 1
24910: PUSH
24911: LD_INT 2
24913: PUSH
24914: LD_INT 3
24916: PUSH
24917: LD_INT 4
24919: PUSH
24920: LD_INT 5
24922: PUSH
24923: EMPTY
24924: LIST
24925: LIST
24926: LIST
24927: LIST
24928: LIST
24929: ST_TO_ADDR
24930: GO 25823
24932: LD_INT 4
24934: DOUBLE
24935: EQUAL
24936: IFTRUE 24940
24938: GO 24966
24940: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
24941: LD_ADDR_VAR 0 3
24945: PUSH
24946: LD_INT 2
24948: PUSH
24949: LD_INT 3
24951: PUSH
24952: LD_INT 4
24954: PUSH
24955: LD_INT 5
24957: PUSH
24958: EMPTY
24959: LIST
24960: LIST
24961: LIST
24962: LIST
24963: ST_TO_ADDR
24964: GO 25823
24966: LD_INT 5
24968: DOUBLE
24969: EQUAL
24970: IFTRUE 24974
24972: GO 25000
24974: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
24975: LD_ADDR_VAR 0 3
24979: PUSH
24980: LD_INT 2
24982: PUSH
24983: LD_INT 3
24985: PUSH
24986: LD_INT 4
24988: PUSH
24989: LD_INT 5
24991: PUSH
24992: EMPTY
24993: LIST
24994: LIST
24995: LIST
24996: LIST
24997: ST_TO_ADDR
24998: GO 25823
25000: LD_INT 9
25002: DOUBLE
25003: EQUAL
25004: IFTRUE 25008
25006: GO 25034
25008: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
25009: LD_ADDR_VAR 0 3
25013: PUSH
25014: LD_INT 2
25016: PUSH
25017: LD_INT 3
25019: PUSH
25020: LD_INT 4
25022: PUSH
25023: LD_INT 5
25025: PUSH
25026: EMPTY
25027: LIST
25028: LIST
25029: LIST
25030: LIST
25031: ST_TO_ADDR
25032: GO 25823
25034: LD_INT 7
25036: DOUBLE
25037: EQUAL
25038: IFTRUE 25042
25040: GO 25068
25042: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
25043: LD_ADDR_VAR 0 3
25047: PUSH
25048: LD_INT 2
25050: PUSH
25051: LD_INT 3
25053: PUSH
25054: LD_INT 4
25056: PUSH
25057: LD_INT 5
25059: PUSH
25060: EMPTY
25061: LIST
25062: LIST
25063: LIST
25064: LIST
25065: ST_TO_ADDR
25066: GO 25823
25068: LD_INT 12
25070: DOUBLE
25071: EQUAL
25072: IFTRUE 25076
25074: GO 25102
25076: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
25077: LD_ADDR_VAR 0 3
25081: PUSH
25082: LD_INT 2
25084: PUSH
25085: LD_INT 3
25087: PUSH
25088: LD_INT 4
25090: PUSH
25091: LD_INT 5
25093: PUSH
25094: EMPTY
25095: LIST
25096: LIST
25097: LIST
25098: LIST
25099: ST_TO_ADDR
25100: GO 25823
25102: LD_INT 13
25104: DOUBLE
25105: EQUAL
25106: IFTRUE 25110
25108: GO 25136
25110: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
25111: LD_ADDR_VAR 0 3
25115: PUSH
25116: LD_INT 2
25118: PUSH
25119: LD_INT 3
25121: PUSH
25122: LD_INT 4
25124: PUSH
25125: LD_INT 5
25127: PUSH
25128: EMPTY
25129: LIST
25130: LIST
25131: LIST
25132: LIST
25133: ST_TO_ADDR
25134: GO 25823
25136: LD_INT 14
25138: DOUBLE
25139: EQUAL
25140: IFTRUE 25144
25142: GO 25162
25144: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
25145: LD_ADDR_VAR 0 3
25149: PUSH
25150: LD_INT 4
25152: PUSH
25153: LD_INT 5
25155: PUSH
25156: EMPTY
25157: LIST
25158: LIST
25159: ST_TO_ADDR
25160: GO 25823
25162: LD_INT 6
25164: DOUBLE
25165: EQUAL
25166: IFTRUE 25170
25168: GO 25188
25170: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
25171: LD_ADDR_VAR 0 3
25175: PUSH
25176: LD_INT 4
25178: PUSH
25179: LD_INT 5
25181: PUSH
25182: EMPTY
25183: LIST
25184: LIST
25185: ST_TO_ADDR
25186: GO 25823
25188: LD_INT 10
25190: DOUBLE
25191: EQUAL
25192: IFTRUE 25196
25194: GO 25214
25196: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
25197: LD_ADDR_VAR 0 3
25201: PUSH
25202: LD_INT 4
25204: PUSH
25205: LD_INT 5
25207: PUSH
25208: EMPTY
25209: LIST
25210: LIST
25211: ST_TO_ADDR
25212: GO 25823
25214: LD_INT 22
25216: DOUBLE
25217: EQUAL
25218: IFTRUE 25222
25220: GO 25248
25222: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
25223: LD_ADDR_VAR 0 3
25227: PUSH
25228: LD_INT 11
25230: PUSH
25231: LD_INT 12
25233: PUSH
25234: LD_INT 13
25236: PUSH
25237: LD_INT 14
25239: PUSH
25240: EMPTY
25241: LIST
25242: LIST
25243: LIST
25244: LIST
25245: ST_TO_ADDR
25246: GO 25823
25248: LD_INT 23
25250: DOUBLE
25251: EQUAL
25252: IFTRUE 25256
25254: GO 25282
25256: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
25257: LD_ADDR_VAR 0 3
25261: PUSH
25262: LD_INT 11
25264: PUSH
25265: LD_INT 12
25267: PUSH
25268: LD_INT 13
25270: PUSH
25271: LD_INT 14
25273: PUSH
25274: EMPTY
25275: LIST
25276: LIST
25277: LIST
25278: LIST
25279: ST_TO_ADDR
25280: GO 25823
25282: LD_INT 24
25284: DOUBLE
25285: EQUAL
25286: IFTRUE 25290
25288: GO 25316
25290: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
25291: LD_ADDR_VAR 0 3
25295: PUSH
25296: LD_INT 11
25298: PUSH
25299: LD_INT 12
25301: PUSH
25302: LD_INT 13
25304: PUSH
25305: LD_INT 14
25307: PUSH
25308: EMPTY
25309: LIST
25310: LIST
25311: LIST
25312: LIST
25313: ST_TO_ADDR
25314: GO 25823
25316: LD_INT 30
25318: DOUBLE
25319: EQUAL
25320: IFTRUE 25324
25322: GO 25350
25324: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
25325: LD_ADDR_VAR 0 3
25329: PUSH
25330: LD_INT 11
25332: PUSH
25333: LD_INT 12
25335: PUSH
25336: LD_INT 13
25338: PUSH
25339: LD_INT 14
25341: PUSH
25342: EMPTY
25343: LIST
25344: LIST
25345: LIST
25346: LIST
25347: ST_TO_ADDR
25348: GO 25823
25350: LD_INT 25
25352: DOUBLE
25353: EQUAL
25354: IFTRUE 25358
25356: GO 25376
25358: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
25359: LD_ADDR_VAR 0 3
25363: PUSH
25364: LD_INT 13
25366: PUSH
25367: LD_INT 14
25369: PUSH
25370: EMPTY
25371: LIST
25372: LIST
25373: ST_TO_ADDR
25374: GO 25823
25376: LD_INT 27
25378: DOUBLE
25379: EQUAL
25380: IFTRUE 25384
25382: GO 25402
25384: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
25385: LD_ADDR_VAR 0 3
25389: PUSH
25390: LD_INT 13
25392: PUSH
25393: LD_INT 14
25395: PUSH
25396: EMPTY
25397: LIST
25398: LIST
25399: ST_TO_ADDR
25400: GO 25823
25402: LD_INT 28
25404: DOUBLE
25405: EQUAL
25406: IFTRUE 25410
25408: GO 25428
25410: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
25411: LD_ADDR_VAR 0 3
25415: PUSH
25416: LD_INT 13
25418: PUSH
25419: LD_INT 14
25421: PUSH
25422: EMPTY
25423: LIST
25424: LIST
25425: ST_TO_ADDR
25426: GO 25823
25428: LD_INT 29
25430: DOUBLE
25431: EQUAL
25432: IFTRUE 25436
25434: GO 25454
25436: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
25437: LD_ADDR_VAR 0 3
25441: PUSH
25442: LD_INT 13
25444: PUSH
25445: LD_INT 14
25447: PUSH
25448: EMPTY
25449: LIST
25450: LIST
25451: ST_TO_ADDR
25452: GO 25823
25454: LD_INT 31
25456: DOUBLE
25457: EQUAL
25458: IFTRUE 25462
25460: GO 25480
25462: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
25463: LD_ADDR_VAR 0 3
25467: PUSH
25468: LD_INT 13
25470: PUSH
25471: LD_INT 14
25473: PUSH
25474: EMPTY
25475: LIST
25476: LIST
25477: ST_TO_ADDR
25478: GO 25823
25480: LD_INT 26
25482: DOUBLE
25483: EQUAL
25484: IFTRUE 25488
25486: GO 25506
25488: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
25489: LD_ADDR_VAR 0 3
25493: PUSH
25494: LD_INT 13
25496: PUSH
25497: LD_INT 14
25499: PUSH
25500: EMPTY
25501: LIST
25502: LIST
25503: ST_TO_ADDR
25504: GO 25823
25506: LD_INT 42
25508: DOUBLE
25509: EQUAL
25510: IFTRUE 25514
25512: GO 25540
25514: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
25515: LD_ADDR_VAR 0 3
25519: PUSH
25520: LD_INT 21
25522: PUSH
25523: LD_INT 22
25525: PUSH
25526: LD_INT 23
25528: PUSH
25529: LD_INT 24
25531: PUSH
25532: EMPTY
25533: LIST
25534: LIST
25535: LIST
25536: LIST
25537: ST_TO_ADDR
25538: GO 25823
25540: LD_INT 43
25542: DOUBLE
25543: EQUAL
25544: IFTRUE 25548
25546: GO 25574
25548: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
25549: LD_ADDR_VAR 0 3
25553: PUSH
25554: LD_INT 21
25556: PUSH
25557: LD_INT 22
25559: PUSH
25560: LD_INT 23
25562: PUSH
25563: LD_INT 24
25565: PUSH
25566: EMPTY
25567: LIST
25568: LIST
25569: LIST
25570: LIST
25571: ST_TO_ADDR
25572: GO 25823
25574: LD_INT 44
25576: DOUBLE
25577: EQUAL
25578: IFTRUE 25582
25580: GO 25608
25582: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
25583: LD_ADDR_VAR 0 3
25587: PUSH
25588: LD_INT 21
25590: PUSH
25591: LD_INT 22
25593: PUSH
25594: LD_INT 23
25596: PUSH
25597: LD_INT 24
25599: PUSH
25600: EMPTY
25601: LIST
25602: LIST
25603: LIST
25604: LIST
25605: ST_TO_ADDR
25606: GO 25823
25608: LD_INT 45
25610: DOUBLE
25611: EQUAL
25612: IFTRUE 25616
25614: GO 25642
25616: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
25617: LD_ADDR_VAR 0 3
25621: PUSH
25622: LD_INT 21
25624: PUSH
25625: LD_INT 22
25627: PUSH
25628: LD_INT 23
25630: PUSH
25631: LD_INT 24
25633: PUSH
25634: EMPTY
25635: LIST
25636: LIST
25637: LIST
25638: LIST
25639: ST_TO_ADDR
25640: GO 25823
25642: LD_INT 49
25644: DOUBLE
25645: EQUAL
25646: IFTRUE 25650
25648: GO 25676
25650: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
25651: LD_ADDR_VAR 0 3
25655: PUSH
25656: LD_INT 21
25658: PUSH
25659: LD_INT 22
25661: PUSH
25662: LD_INT 23
25664: PUSH
25665: LD_INT 24
25667: PUSH
25668: EMPTY
25669: LIST
25670: LIST
25671: LIST
25672: LIST
25673: ST_TO_ADDR
25674: GO 25823
25676: LD_INT 51
25678: DOUBLE
25679: EQUAL
25680: IFTRUE 25684
25682: GO 25710
25684: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
25685: LD_ADDR_VAR 0 3
25689: PUSH
25690: LD_INT 21
25692: PUSH
25693: LD_INT 22
25695: PUSH
25696: LD_INT 23
25698: PUSH
25699: LD_INT 24
25701: PUSH
25702: EMPTY
25703: LIST
25704: LIST
25705: LIST
25706: LIST
25707: ST_TO_ADDR
25708: GO 25823
25710: LD_INT 52
25712: DOUBLE
25713: EQUAL
25714: IFTRUE 25718
25716: GO 25744
25718: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
25719: LD_ADDR_VAR 0 3
25723: PUSH
25724: LD_INT 21
25726: PUSH
25727: LD_INT 22
25729: PUSH
25730: LD_INT 23
25732: PUSH
25733: LD_INT 24
25735: PUSH
25736: EMPTY
25737: LIST
25738: LIST
25739: LIST
25740: LIST
25741: ST_TO_ADDR
25742: GO 25823
25744: LD_INT 53
25746: DOUBLE
25747: EQUAL
25748: IFTRUE 25752
25750: GO 25770
25752: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
25753: LD_ADDR_VAR 0 3
25757: PUSH
25758: LD_INT 23
25760: PUSH
25761: LD_INT 24
25763: PUSH
25764: EMPTY
25765: LIST
25766: LIST
25767: ST_TO_ADDR
25768: GO 25823
25770: LD_INT 46
25772: DOUBLE
25773: EQUAL
25774: IFTRUE 25778
25776: GO 25796
25778: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
25779: LD_ADDR_VAR 0 3
25783: PUSH
25784: LD_INT 23
25786: PUSH
25787: LD_INT 24
25789: PUSH
25790: EMPTY
25791: LIST
25792: LIST
25793: ST_TO_ADDR
25794: GO 25823
25796: LD_INT 47
25798: DOUBLE
25799: EQUAL
25800: IFTRUE 25804
25802: GO 25822
25804: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25805: LD_ADDR_VAR 0 3
25809: PUSH
25810: LD_INT 23
25812: PUSH
25813: LD_INT 24
25815: PUSH
25816: EMPTY
25817: LIST
25818: LIST
25819: ST_TO_ADDR
25820: GO 25823
25822: POP
// result := ( chassis in result ) ;
25823: LD_ADDR_VAR 0 3
25827: PUSH
25828: LD_VAR 0 1
25832: PUSH
25833: LD_VAR 0 3
25837: IN
25838: ST_TO_ADDR
// end ;
25839: LD_VAR 0 3
25843: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
25844: LD_INT 0
25846: PPUSH
25847: PPUSH
25848: PPUSH
25849: PPUSH
25850: PPUSH
25851: PPUSH
25852: PPUSH
// result := array ;
25853: LD_ADDR_VAR 0 5
25857: PUSH
25858: LD_VAR 0 1
25862: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
25863: LD_VAR 0 1
25867: NOT
25868: PUSH
25869: LD_VAR 0 2
25873: NOT
25874: OR
25875: PUSH
25876: LD_VAR 0 3
25880: NOT
25881: OR
25882: PUSH
25883: LD_VAR 0 2
25887: PUSH
25888: LD_VAR 0 1
25892: GREATER
25893: OR
25894: PUSH
25895: LD_VAR 0 3
25899: PUSH
25900: LD_VAR 0 1
25904: GREATER
25905: OR
25906: IFFALSE 25910
// exit ;
25908: GO 26206
// if direction then
25910: LD_VAR 0 4
25914: IFFALSE 25978
// begin d := 1 ;
25916: LD_ADDR_VAR 0 9
25920: PUSH
25921: LD_INT 1
25923: ST_TO_ADDR
// if i_from > i_to then
25924: LD_VAR 0 2
25928: PUSH
25929: LD_VAR 0 3
25933: GREATER
25934: IFFALSE 25960
// length := ( array - i_from ) + i_to else
25936: LD_ADDR_VAR 0 11
25940: PUSH
25941: LD_VAR 0 1
25945: PUSH
25946: LD_VAR 0 2
25950: MINUS
25951: PUSH
25952: LD_VAR 0 3
25956: PLUS
25957: ST_TO_ADDR
25958: GO 25976
// length := i_to - i_from ;
25960: LD_ADDR_VAR 0 11
25964: PUSH
25965: LD_VAR 0 3
25969: PUSH
25970: LD_VAR 0 2
25974: MINUS
25975: ST_TO_ADDR
// end else
25976: GO 26039
// begin d := - 1 ;
25978: LD_ADDR_VAR 0 9
25982: PUSH
25983: LD_INT 1
25985: NEG
25986: ST_TO_ADDR
// if i_from > i_to then
25987: LD_VAR 0 2
25991: PUSH
25992: LD_VAR 0 3
25996: GREATER
25997: IFFALSE 26017
// length := i_from - i_to else
25999: LD_ADDR_VAR 0 11
26003: PUSH
26004: LD_VAR 0 2
26008: PUSH
26009: LD_VAR 0 3
26013: MINUS
26014: ST_TO_ADDR
26015: GO 26039
// length := ( array - i_to ) + i_from ;
26017: LD_ADDR_VAR 0 11
26021: PUSH
26022: LD_VAR 0 1
26026: PUSH
26027: LD_VAR 0 3
26031: MINUS
26032: PUSH
26033: LD_VAR 0 2
26037: PLUS
26038: ST_TO_ADDR
// end ; if not length then
26039: LD_VAR 0 11
26043: NOT
26044: IFFALSE 26048
// exit ;
26046: GO 26206
// tmp := array ;
26048: LD_ADDR_VAR 0 10
26052: PUSH
26053: LD_VAR 0 1
26057: ST_TO_ADDR
// for i = 1 to length do
26058: LD_ADDR_VAR 0 6
26062: PUSH
26063: DOUBLE
26064: LD_INT 1
26066: DEC
26067: ST_TO_ADDR
26068: LD_VAR 0 11
26072: PUSH
26073: FOR_TO
26074: IFFALSE 26194
// begin for j = 1 to array do
26076: LD_ADDR_VAR 0 7
26080: PUSH
26081: DOUBLE
26082: LD_INT 1
26084: DEC
26085: ST_TO_ADDR
26086: LD_VAR 0 1
26090: PUSH
26091: FOR_TO
26092: IFFALSE 26180
// begin k := j + d ;
26094: LD_ADDR_VAR 0 8
26098: PUSH
26099: LD_VAR 0 7
26103: PUSH
26104: LD_VAR 0 9
26108: PLUS
26109: ST_TO_ADDR
// if k > array then
26110: LD_VAR 0 8
26114: PUSH
26115: LD_VAR 0 1
26119: GREATER
26120: IFFALSE 26130
// k := 1 ;
26122: LD_ADDR_VAR 0 8
26126: PUSH
26127: LD_INT 1
26129: ST_TO_ADDR
// if not k then
26130: LD_VAR 0 8
26134: NOT
26135: IFFALSE 26147
// k := array ;
26137: LD_ADDR_VAR 0 8
26141: PUSH
26142: LD_VAR 0 1
26146: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
26147: LD_ADDR_VAR 0 10
26151: PUSH
26152: LD_VAR 0 10
26156: PPUSH
26157: LD_VAR 0 8
26161: PPUSH
26162: LD_VAR 0 1
26166: PUSH
26167: LD_VAR 0 7
26171: ARRAY
26172: PPUSH
26173: CALL_OW 1
26177: ST_TO_ADDR
// end ;
26178: GO 26091
26180: POP
26181: POP
// array := tmp ;
26182: LD_ADDR_VAR 0 1
26186: PUSH
26187: LD_VAR 0 10
26191: ST_TO_ADDR
// end ;
26192: GO 26073
26194: POP
26195: POP
// result := array ;
26196: LD_ADDR_VAR 0 5
26200: PUSH
26201: LD_VAR 0 1
26205: ST_TO_ADDR
// end ;
26206: LD_VAR 0 5
26210: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
26211: LD_INT 0
26213: PPUSH
26214: PPUSH
// result := 0 ;
26215: LD_ADDR_VAR 0 3
26219: PUSH
26220: LD_INT 0
26222: ST_TO_ADDR
// if not array or not value in array then
26223: LD_VAR 0 1
26227: NOT
26228: PUSH
26229: LD_VAR 0 2
26233: PUSH
26234: LD_VAR 0 1
26238: IN
26239: NOT
26240: OR
26241: IFFALSE 26245
// exit ;
26243: GO 26299
// for i = 1 to array do
26245: LD_ADDR_VAR 0 4
26249: PUSH
26250: DOUBLE
26251: LD_INT 1
26253: DEC
26254: ST_TO_ADDR
26255: LD_VAR 0 1
26259: PUSH
26260: FOR_TO
26261: IFFALSE 26297
// if value = array [ i ] then
26263: LD_VAR 0 2
26267: PUSH
26268: LD_VAR 0 1
26272: PUSH
26273: LD_VAR 0 4
26277: ARRAY
26278: EQUAL
26279: IFFALSE 26295
// begin result := i ;
26281: LD_ADDR_VAR 0 3
26285: PUSH
26286: LD_VAR 0 4
26290: ST_TO_ADDR
// exit ;
26291: POP
26292: POP
26293: GO 26299
// end ;
26295: GO 26260
26297: POP
26298: POP
// end ;
26299: LD_VAR 0 3
26303: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
26304: LD_INT 0
26306: PPUSH
// vc_chassis := chassis ;
26307: LD_ADDR_OWVAR 37
26311: PUSH
26312: LD_VAR 0 1
26316: ST_TO_ADDR
// vc_engine := engine ;
26317: LD_ADDR_OWVAR 39
26321: PUSH
26322: LD_VAR 0 2
26326: ST_TO_ADDR
// vc_control := control ;
26327: LD_ADDR_OWVAR 38
26331: PUSH
26332: LD_VAR 0 3
26336: ST_TO_ADDR
// vc_weapon := weapon ;
26337: LD_ADDR_OWVAR 40
26341: PUSH
26342: LD_VAR 0 4
26346: ST_TO_ADDR
// vc_fuel_battery := fuel ;
26347: LD_ADDR_OWVAR 41
26351: PUSH
26352: LD_VAR 0 5
26356: ST_TO_ADDR
// end ;
26357: LD_VAR 0 6
26361: RET
// export function WantPlant ( unit ) ; var task ; begin
26362: LD_INT 0
26364: PPUSH
26365: PPUSH
// result := false ;
26366: LD_ADDR_VAR 0 2
26370: PUSH
26371: LD_INT 0
26373: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
26374: LD_ADDR_VAR 0 3
26378: PUSH
26379: LD_VAR 0 1
26383: PPUSH
26384: CALL_OW 437
26388: ST_TO_ADDR
// if task then
26389: LD_VAR 0 3
26393: IFFALSE 26421
// if task [ 1 ] [ 1 ] = p then
26395: LD_VAR 0 3
26399: PUSH
26400: LD_INT 1
26402: ARRAY
26403: PUSH
26404: LD_INT 1
26406: ARRAY
26407: PUSH
26408: LD_STRING p
26410: EQUAL
26411: IFFALSE 26421
// result := true ;
26413: LD_ADDR_VAR 0 2
26417: PUSH
26418: LD_INT 1
26420: ST_TO_ADDR
// end ;
26421: LD_VAR 0 2
26425: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
26426: LD_INT 0
26428: PPUSH
26429: PPUSH
26430: PPUSH
26431: PPUSH
// if pos < 1 then
26432: LD_VAR 0 2
26436: PUSH
26437: LD_INT 1
26439: LESS
26440: IFFALSE 26444
// exit ;
26442: GO 26747
// if pos = 1 then
26444: LD_VAR 0 2
26448: PUSH
26449: LD_INT 1
26451: EQUAL
26452: IFFALSE 26485
// result := Replace ( arr , pos [ 1 ] , value ) else
26454: LD_ADDR_VAR 0 4
26458: PUSH
26459: LD_VAR 0 1
26463: PPUSH
26464: LD_VAR 0 2
26468: PUSH
26469: LD_INT 1
26471: ARRAY
26472: PPUSH
26473: LD_VAR 0 3
26477: PPUSH
26478: CALL_OW 1
26482: ST_TO_ADDR
26483: GO 26747
// begin tmp := arr ;
26485: LD_ADDR_VAR 0 6
26489: PUSH
26490: LD_VAR 0 1
26494: ST_TO_ADDR
// s_arr := [ tmp ] ;
26495: LD_ADDR_VAR 0 7
26499: PUSH
26500: LD_VAR 0 6
26504: PUSH
26505: EMPTY
26506: LIST
26507: ST_TO_ADDR
// for i = 1 to pos - 1 do
26508: LD_ADDR_VAR 0 5
26512: PUSH
26513: DOUBLE
26514: LD_INT 1
26516: DEC
26517: ST_TO_ADDR
26518: LD_VAR 0 2
26522: PUSH
26523: LD_INT 1
26525: MINUS
26526: PUSH
26527: FOR_TO
26528: IFFALSE 26573
// begin tmp := tmp [ pos [ i ] ] ;
26530: LD_ADDR_VAR 0 6
26534: PUSH
26535: LD_VAR 0 6
26539: PUSH
26540: LD_VAR 0 2
26544: PUSH
26545: LD_VAR 0 5
26549: ARRAY
26550: ARRAY
26551: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
26552: LD_ADDR_VAR 0 7
26556: PUSH
26557: LD_VAR 0 7
26561: PUSH
26562: LD_VAR 0 6
26566: PUSH
26567: EMPTY
26568: LIST
26569: ADD
26570: ST_TO_ADDR
// end ;
26571: GO 26527
26573: POP
26574: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
26575: LD_ADDR_VAR 0 6
26579: PUSH
26580: LD_VAR 0 6
26584: PPUSH
26585: LD_VAR 0 2
26589: PUSH
26590: LD_VAR 0 2
26594: ARRAY
26595: PPUSH
26596: LD_VAR 0 3
26600: PPUSH
26601: CALL_OW 1
26605: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
26606: LD_ADDR_VAR 0 7
26610: PUSH
26611: LD_VAR 0 7
26615: PPUSH
26616: LD_VAR 0 7
26620: PPUSH
26621: LD_VAR 0 6
26625: PPUSH
26626: CALL_OW 1
26630: ST_TO_ADDR
// for i = s_arr downto 2 do
26631: LD_ADDR_VAR 0 5
26635: PUSH
26636: DOUBLE
26637: LD_VAR 0 7
26641: INC
26642: ST_TO_ADDR
26643: LD_INT 2
26645: PUSH
26646: FOR_DOWNTO
26647: IFFALSE 26731
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
26649: LD_ADDR_VAR 0 6
26653: PUSH
26654: LD_VAR 0 7
26658: PUSH
26659: LD_VAR 0 5
26663: PUSH
26664: LD_INT 1
26666: MINUS
26667: ARRAY
26668: PPUSH
26669: LD_VAR 0 2
26673: PUSH
26674: LD_VAR 0 5
26678: PUSH
26679: LD_INT 1
26681: MINUS
26682: ARRAY
26683: PPUSH
26684: LD_VAR 0 7
26688: PUSH
26689: LD_VAR 0 5
26693: ARRAY
26694: PPUSH
26695: CALL_OW 1
26699: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
26700: LD_ADDR_VAR 0 7
26704: PUSH
26705: LD_VAR 0 7
26709: PPUSH
26710: LD_VAR 0 5
26714: PUSH
26715: LD_INT 1
26717: MINUS
26718: PPUSH
26719: LD_VAR 0 6
26723: PPUSH
26724: CALL_OW 1
26728: ST_TO_ADDR
// end ;
26729: GO 26646
26731: POP
26732: POP
// result := s_arr [ 1 ] ;
26733: LD_ADDR_VAR 0 4
26737: PUSH
26738: LD_VAR 0 7
26742: PUSH
26743: LD_INT 1
26745: ARRAY
26746: ST_TO_ADDR
// end ; end ;
26747: LD_VAR 0 4
26751: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
26752: LD_INT 0
26754: PPUSH
26755: PPUSH
// if not list then
26756: LD_VAR 0 1
26760: NOT
26761: IFFALSE 26765
// exit ;
26763: GO 26856
// i := list [ pos1 ] ;
26765: LD_ADDR_VAR 0 5
26769: PUSH
26770: LD_VAR 0 1
26774: PUSH
26775: LD_VAR 0 2
26779: ARRAY
26780: ST_TO_ADDR
// if not i then
26781: LD_VAR 0 5
26785: NOT
26786: IFFALSE 26790
// exit ;
26788: GO 26856
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
26790: LD_ADDR_VAR 0 1
26794: PUSH
26795: LD_VAR 0 1
26799: PPUSH
26800: LD_VAR 0 2
26804: PPUSH
26805: LD_VAR 0 1
26809: PUSH
26810: LD_VAR 0 3
26814: ARRAY
26815: PPUSH
26816: CALL_OW 1
26820: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
26821: LD_ADDR_VAR 0 1
26825: PUSH
26826: LD_VAR 0 1
26830: PPUSH
26831: LD_VAR 0 3
26835: PPUSH
26836: LD_VAR 0 5
26840: PPUSH
26841: CALL_OW 1
26845: ST_TO_ADDR
// result := list ;
26846: LD_ADDR_VAR 0 4
26850: PUSH
26851: LD_VAR 0 1
26855: ST_TO_ADDR
// end ;
26856: LD_VAR 0 4
26860: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
26861: LD_INT 0
26863: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
26864: LD_ADDR_VAR 0 5
26868: PUSH
26869: LD_VAR 0 1
26873: PPUSH
26874: CALL_OW 250
26878: PPUSH
26879: LD_VAR 0 1
26883: PPUSH
26884: CALL_OW 251
26888: PPUSH
26889: LD_VAR 0 2
26893: PPUSH
26894: LD_VAR 0 3
26898: PPUSH
26899: LD_VAR 0 4
26903: PPUSH
26904: CALL 26914 0 5
26908: ST_TO_ADDR
// end ;
26909: LD_VAR 0 5
26913: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
26914: LD_INT 0
26916: PPUSH
26917: PPUSH
26918: PPUSH
26919: PPUSH
// if not list then
26920: LD_VAR 0 3
26924: NOT
26925: IFFALSE 26929
// exit ;
26927: GO 27317
// result := [ ] ;
26929: LD_ADDR_VAR 0 6
26933: PUSH
26934: EMPTY
26935: ST_TO_ADDR
// for i in list do
26936: LD_ADDR_VAR 0 7
26940: PUSH
26941: LD_VAR 0 3
26945: PUSH
26946: FOR_IN
26947: IFFALSE 27149
// begin tmp := GetDistUnitXY ( i , x , y ) ;
26949: LD_ADDR_VAR 0 9
26953: PUSH
26954: LD_VAR 0 7
26958: PPUSH
26959: LD_VAR 0 1
26963: PPUSH
26964: LD_VAR 0 2
26968: PPUSH
26969: CALL_OW 297
26973: ST_TO_ADDR
// if not result then
26974: LD_VAR 0 6
26978: NOT
26979: IFFALSE 27005
// result := [ [ i , tmp ] ] else
26981: LD_ADDR_VAR 0 6
26985: PUSH
26986: LD_VAR 0 7
26990: PUSH
26991: LD_VAR 0 9
26995: PUSH
26996: EMPTY
26997: LIST
26998: LIST
26999: PUSH
27000: EMPTY
27001: LIST
27002: ST_TO_ADDR
27003: GO 27147
// begin if result [ result ] [ 2 ] < tmp then
27005: LD_VAR 0 6
27009: PUSH
27010: LD_VAR 0 6
27014: ARRAY
27015: PUSH
27016: LD_INT 2
27018: ARRAY
27019: PUSH
27020: LD_VAR 0 9
27024: LESS
27025: IFFALSE 27067
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
27027: LD_ADDR_VAR 0 6
27031: PUSH
27032: LD_VAR 0 6
27036: PPUSH
27037: LD_VAR 0 6
27041: PUSH
27042: LD_INT 1
27044: PLUS
27045: PPUSH
27046: LD_VAR 0 7
27050: PUSH
27051: LD_VAR 0 9
27055: PUSH
27056: EMPTY
27057: LIST
27058: LIST
27059: PPUSH
27060: CALL_OW 2
27064: ST_TO_ADDR
27065: GO 27147
// for j = 1 to result do
27067: LD_ADDR_VAR 0 8
27071: PUSH
27072: DOUBLE
27073: LD_INT 1
27075: DEC
27076: ST_TO_ADDR
27077: LD_VAR 0 6
27081: PUSH
27082: FOR_TO
27083: IFFALSE 27145
// begin if tmp < result [ j ] [ 2 ] then
27085: LD_VAR 0 9
27089: PUSH
27090: LD_VAR 0 6
27094: PUSH
27095: LD_VAR 0 8
27099: ARRAY
27100: PUSH
27101: LD_INT 2
27103: ARRAY
27104: LESS
27105: IFFALSE 27143
// begin result := Insert ( result , j , [ i , tmp ] ) ;
27107: LD_ADDR_VAR 0 6
27111: PUSH
27112: LD_VAR 0 6
27116: PPUSH
27117: LD_VAR 0 8
27121: PPUSH
27122: LD_VAR 0 7
27126: PUSH
27127: LD_VAR 0 9
27131: PUSH
27132: EMPTY
27133: LIST
27134: LIST
27135: PPUSH
27136: CALL_OW 2
27140: ST_TO_ADDR
// break ;
27141: GO 27145
// end ; end ;
27143: GO 27082
27145: POP
27146: POP
// end ; end ;
27147: GO 26946
27149: POP
27150: POP
// if result and not asc then
27151: LD_VAR 0 6
27155: PUSH
27156: LD_VAR 0 4
27160: NOT
27161: AND
27162: IFFALSE 27237
// begin tmp := result ;
27164: LD_ADDR_VAR 0 9
27168: PUSH
27169: LD_VAR 0 6
27173: ST_TO_ADDR
// for i = tmp downto 1 do
27174: LD_ADDR_VAR 0 7
27178: PUSH
27179: DOUBLE
27180: LD_VAR 0 9
27184: INC
27185: ST_TO_ADDR
27186: LD_INT 1
27188: PUSH
27189: FOR_DOWNTO
27190: IFFALSE 27235
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
27192: LD_ADDR_VAR 0 6
27196: PUSH
27197: LD_VAR 0 6
27201: PPUSH
27202: LD_VAR 0 9
27206: PUSH
27207: LD_VAR 0 7
27211: MINUS
27212: PUSH
27213: LD_INT 1
27215: PLUS
27216: PPUSH
27217: LD_VAR 0 9
27221: PUSH
27222: LD_VAR 0 7
27226: ARRAY
27227: PPUSH
27228: CALL_OW 1
27232: ST_TO_ADDR
27233: GO 27189
27235: POP
27236: POP
// end ; tmp := [ ] ;
27237: LD_ADDR_VAR 0 9
27241: PUSH
27242: EMPTY
27243: ST_TO_ADDR
// if mode then
27244: LD_VAR 0 5
27248: IFFALSE 27317
// begin for i = 1 to result do
27250: LD_ADDR_VAR 0 7
27254: PUSH
27255: DOUBLE
27256: LD_INT 1
27258: DEC
27259: ST_TO_ADDR
27260: LD_VAR 0 6
27264: PUSH
27265: FOR_TO
27266: IFFALSE 27305
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
27268: LD_ADDR_VAR 0 9
27272: PUSH
27273: LD_VAR 0 9
27277: PPUSH
27278: LD_VAR 0 7
27282: PPUSH
27283: LD_VAR 0 6
27287: PUSH
27288: LD_VAR 0 7
27292: ARRAY
27293: PUSH
27294: LD_INT 1
27296: ARRAY
27297: PPUSH
27298: CALL_OW 1
27302: ST_TO_ADDR
27303: GO 27265
27305: POP
27306: POP
// result := tmp ;
27307: LD_ADDR_VAR 0 6
27311: PUSH
27312: LD_VAR 0 9
27316: ST_TO_ADDR
// end ; end ;
27317: LD_VAR 0 6
27321: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
27322: LD_INT 0
27324: PPUSH
27325: PPUSH
27326: PPUSH
27327: PPUSH
27328: PPUSH
27329: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
27330: LD_ADDR_VAR 0 5
27334: PUSH
27335: LD_INT 0
27337: PUSH
27338: LD_INT 0
27340: PUSH
27341: LD_INT 0
27343: PUSH
27344: EMPTY
27345: PUSH
27346: EMPTY
27347: LIST
27348: LIST
27349: LIST
27350: LIST
27351: ST_TO_ADDR
// if not x or not y then
27352: LD_VAR 0 2
27356: NOT
27357: PUSH
27358: LD_VAR 0 3
27362: NOT
27363: OR
27364: IFFALSE 27368
// exit ;
27366: GO 29014
// if not range then
27368: LD_VAR 0 4
27372: NOT
27373: IFFALSE 27383
// range := 10 ;
27375: LD_ADDR_VAR 0 4
27379: PUSH
27380: LD_INT 10
27382: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27383: LD_ADDR_VAR 0 8
27387: PUSH
27388: LD_INT 81
27390: PUSH
27391: LD_VAR 0 1
27395: PUSH
27396: EMPTY
27397: LIST
27398: LIST
27399: PUSH
27400: LD_INT 92
27402: PUSH
27403: LD_VAR 0 2
27407: PUSH
27408: LD_VAR 0 3
27412: PUSH
27413: LD_VAR 0 4
27417: PUSH
27418: EMPTY
27419: LIST
27420: LIST
27421: LIST
27422: LIST
27423: PUSH
27424: LD_INT 3
27426: PUSH
27427: LD_INT 21
27429: PUSH
27430: LD_INT 3
27432: PUSH
27433: EMPTY
27434: LIST
27435: LIST
27436: PUSH
27437: EMPTY
27438: LIST
27439: LIST
27440: PUSH
27441: EMPTY
27442: LIST
27443: LIST
27444: LIST
27445: PPUSH
27446: CALL_OW 69
27450: ST_TO_ADDR
// if not tmp then
27451: LD_VAR 0 8
27455: NOT
27456: IFFALSE 27460
// exit ;
27458: GO 29014
// for i in tmp do
27460: LD_ADDR_VAR 0 6
27464: PUSH
27465: LD_VAR 0 8
27469: PUSH
27470: FOR_IN
27471: IFFALSE 28989
// begin points := [ 0 , 0 , 0 ] ;
27473: LD_ADDR_VAR 0 9
27477: PUSH
27478: LD_INT 0
27480: PUSH
27481: LD_INT 0
27483: PUSH
27484: LD_INT 0
27486: PUSH
27487: EMPTY
27488: LIST
27489: LIST
27490: LIST
27491: ST_TO_ADDR
// bpoints := 1 ;
27492: LD_ADDR_VAR 0 10
27496: PUSH
27497: LD_INT 1
27499: ST_TO_ADDR
// case GetType ( i ) of unit_human :
27500: LD_VAR 0 6
27504: PPUSH
27505: CALL_OW 247
27509: PUSH
27510: LD_INT 1
27512: DOUBLE
27513: EQUAL
27514: IFTRUE 27518
27516: GO 28096
27518: POP
// begin if GetClass ( i ) = 1 then
27519: LD_VAR 0 6
27523: PPUSH
27524: CALL_OW 257
27528: PUSH
27529: LD_INT 1
27531: EQUAL
27532: IFFALSE 27553
// points := [ 10 , 5 , 3 ] ;
27534: LD_ADDR_VAR 0 9
27538: PUSH
27539: LD_INT 10
27541: PUSH
27542: LD_INT 5
27544: PUSH
27545: LD_INT 3
27547: PUSH
27548: EMPTY
27549: LIST
27550: LIST
27551: LIST
27552: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
27553: LD_VAR 0 6
27557: PPUSH
27558: CALL_OW 257
27562: PUSH
27563: LD_INT 2
27565: PUSH
27566: LD_INT 3
27568: PUSH
27569: LD_INT 4
27571: PUSH
27572: EMPTY
27573: LIST
27574: LIST
27575: LIST
27576: IN
27577: IFFALSE 27598
// points := [ 3 , 2 , 1 ] ;
27579: LD_ADDR_VAR 0 9
27583: PUSH
27584: LD_INT 3
27586: PUSH
27587: LD_INT 2
27589: PUSH
27590: LD_INT 1
27592: PUSH
27593: EMPTY
27594: LIST
27595: LIST
27596: LIST
27597: ST_TO_ADDR
// if GetClass ( i ) = 5 then
27598: LD_VAR 0 6
27602: PPUSH
27603: CALL_OW 257
27607: PUSH
27608: LD_INT 5
27610: EQUAL
27611: IFFALSE 27632
// points := [ 130 , 5 , 2 ] ;
27613: LD_ADDR_VAR 0 9
27617: PUSH
27618: LD_INT 130
27620: PUSH
27621: LD_INT 5
27623: PUSH
27624: LD_INT 2
27626: PUSH
27627: EMPTY
27628: LIST
27629: LIST
27630: LIST
27631: ST_TO_ADDR
// if GetClass ( i ) = 8 then
27632: LD_VAR 0 6
27636: PPUSH
27637: CALL_OW 257
27641: PUSH
27642: LD_INT 8
27644: EQUAL
27645: IFFALSE 27666
// points := [ 35 , 35 , 30 ] ;
27647: LD_ADDR_VAR 0 9
27651: PUSH
27652: LD_INT 35
27654: PUSH
27655: LD_INT 35
27657: PUSH
27658: LD_INT 30
27660: PUSH
27661: EMPTY
27662: LIST
27663: LIST
27664: LIST
27665: ST_TO_ADDR
// if GetClass ( i ) = 9 then
27666: LD_VAR 0 6
27670: PPUSH
27671: CALL_OW 257
27675: PUSH
27676: LD_INT 9
27678: EQUAL
27679: IFFALSE 27700
// points := [ 20 , 55 , 40 ] ;
27681: LD_ADDR_VAR 0 9
27685: PUSH
27686: LD_INT 20
27688: PUSH
27689: LD_INT 55
27691: PUSH
27692: LD_INT 40
27694: PUSH
27695: EMPTY
27696: LIST
27697: LIST
27698: LIST
27699: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
27700: LD_VAR 0 6
27704: PPUSH
27705: CALL_OW 257
27709: PUSH
27710: LD_INT 12
27712: PUSH
27713: LD_INT 16
27715: PUSH
27716: EMPTY
27717: LIST
27718: LIST
27719: IN
27720: IFFALSE 27741
// points := [ 5 , 3 , 2 ] ;
27722: LD_ADDR_VAR 0 9
27726: PUSH
27727: LD_INT 5
27729: PUSH
27730: LD_INT 3
27732: PUSH
27733: LD_INT 2
27735: PUSH
27736: EMPTY
27737: LIST
27738: LIST
27739: LIST
27740: ST_TO_ADDR
// if GetClass ( i ) = 17 then
27741: LD_VAR 0 6
27745: PPUSH
27746: CALL_OW 257
27750: PUSH
27751: LD_INT 17
27753: EQUAL
27754: IFFALSE 27775
// points := [ 100 , 50 , 75 ] ;
27756: LD_ADDR_VAR 0 9
27760: PUSH
27761: LD_INT 100
27763: PUSH
27764: LD_INT 50
27766: PUSH
27767: LD_INT 75
27769: PUSH
27770: EMPTY
27771: LIST
27772: LIST
27773: LIST
27774: ST_TO_ADDR
// if GetClass ( i ) = 15 then
27775: LD_VAR 0 6
27779: PPUSH
27780: CALL_OW 257
27784: PUSH
27785: LD_INT 15
27787: EQUAL
27788: IFFALSE 27809
// points := [ 10 , 5 , 3 ] ;
27790: LD_ADDR_VAR 0 9
27794: PUSH
27795: LD_INT 10
27797: PUSH
27798: LD_INT 5
27800: PUSH
27801: LD_INT 3
27803: PUSH
27804: EMPTY
27805: LIST
27806: LIST
27807: LIST
27808: ST_TO_ADDR
// if GetClass ( i ) = 14 then
27809: LD_VAR 0 6
27813: PPUSH
27814: CALL_OW 257
27818: PUSH
27819: LD_INT 14
27821: EQUAL
27822: IFFALSE 27843
// points := [ 10 , 0 , 0 ] ;
27824: LD_ADDR_VAR 0 9
27828: PUSH
27829: LD_INT 10
27831: PUSH
27832: LD_INT 0
27834: PUSH
27835: LD_INT 0
27837: PUSH
27838: EMPTY
27839: LIST
27840: LIST
27841: LIST
27842: ST_TO_ADDR
// if GetClass ( i ) = 11 then
27843: LD_VAR 0 6
27847: PPUSH
27848: CALL_OW 257
27852: PUSH
27853: LD_INT 11
27855: EQUAL
27856: IFFALSE 27877
// points := [ 30 , 10 , 5 ] ;
27858: LD_ADDR_VAR 0 9
27862: PUSH
27863: LD_INT 30
27865: PUSH
27866: LD_INT 10
27868: PUSH
27869: LD_INT 5
27871: PUSH
27872: EMPTY
27873: LIST
27874: LIST
27875: LIST
27876: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
27877: LD_VAR 0 1
27881: PPUSH
27882: LD_INT 5
27884: PPUSH
27885: CALL_OW 321
27889: PUSH
27890: LD_INT 2
27892: EQUAL
27893: IFFALSE 27910
// bpoints := bpoints * 1.8 ;
27895: LD_ADDR_VAR 0 10
27899: PUSH
27900: LD_VAR 0 10
27904: PUSH
27905: LD_REAL  1.80000000000000E+0000
27908: MUL
27909: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
27910: LD_VAR 0 6
27914: PPUSH
27915: CALL_OW 257
27919: PUSH
27920: LD_INT 1
27922: PUSH
27923: LD_INT 2
27925: PUSH
27926: LD_INT 3
27928: PUSH
27929: LD_INT 4
27931: PUSH
27932: EMPTY
27933: LIST
27934: LIST
27935: LIST
27936: LIST
27937: IN
27938: PUSH
27939: LD_VAR 0 1
27943: PPUSH
27944: LD_INT 51
27946: PPUSH
27947: CALL_OW 321
27951: PUSH
27952: LD_INT 2
27954: EQUAL
27955: AND
27956: IFFALSE 27973
// bpoints := bpoints * 1.2 ;
27958: LD_ADDR_VAR 0 10
27962: PUSH
27963: LD_VAR 0 10
27967: PUSH
27968: LD_REAL  1.20000000000000E+0000
27971: MUL
27972: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
27973: LD_VAR 0 6
27977: PPUSH
27978: CALL_OW 257
27982: PUSH
27983: LD_INT 5
27985: PUSH
27986: LD_INT 7
27988: PUSH
27989: LD_INT 9
27991: PUSH
27992: EMPTY
27993: LIST
27994: LIST
27995: LIST
27996: IN
27997: PUSH
27998: LD_VAR 0 1
28002: PPUSH
28003: LD_INT 52
28005: PPUSH
28006: CALL_OW 321
28010: PUSH
28011: LD_INT 2
28013: EQUAL
28014: AND
28015: IFFALSE 28032
// bpoints := bpoints * 1.5 ;
28017: LD_ADDR_VAR 0 10
28021: PUSH
28022: LD_VAR 0 10
28026: PUSH
28027: LD_REAL  1.50000000000000E+0000
28030: MUL
28031: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
28032: LD_VAR 0 1
28036: PPUSH
28037: LD_INT 66
28039: PPUSH
28040: CALL_OW 321
28044: PUSH
28045: LD_INT 2
28047: EQUAL
28048: IFFALSE 28065
// bpoints := bpoints * 1.1 ;
28050: LD_ADDR_VAR 0 10
28054: PUSH
28055: LD_VAR 0 10
28059: PUSH
28060: LD_REAL  1.10000000000000E+0000
28063: MUL
28064: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
28065: LD_ADDR_VAR 0 10
28069: PUSH
28070: LD_VAR 0 10
28074: PUSH
28075: LD_VAR 0 6
28079: PPUSH
28080: LD_INT 1
28082: PPUSH
28083: CALL_OW 259
28087: PUSH
28088: LD_REAL  1.15000000000000E+0000
28091: MUL
28092: MUL
28093: ST_TO_ADDR
// end ; unit_vehicle :
28094: GO 28918
28096: LD_INT 2
28098: DOUBLE
28099: EQUAL
28100: IFTRUE 28104
28102: GO 28906
28104: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
28105: LD_VAR 0 6
28109: PPUSH
28110: CALL_OW 264
28114: PUSH
28115: LD_INT 2
28117: PUSH
28118: LD_INT 42
28120: PUSH
28121: LD_INT 24
28123: PUSH
28124: EMPTY
28125: LIST
28126: LIST
28127: LIST
28128: IN
28129: IFFALSE 28150
// points := [ 25 , 5 , 3 ] ;
28131: LD_ADDR_VAR 0 9
28135: PUSH
28136: LD_INT 25
28138: PUSH
28139: LD_INT 5
28141: PUSH
28142: LD_INT 3
28144: PUSH
28145: EMPTY
28146: LIST
28147: LIST
28148: LIST
28149: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
28150: LD_VAR 0 6
28154: PPUSH
28155: CALL_OW 264
28159: PUSH
28160: LD_INT 4
28162: PUSH
28163: LD_INT 43
28165: PUSH
28166: LD_INT 25
28168: PUSH
28169: EMPTY
28170: LIST
28171: LIST
28172: LIST
28173: IN
28174: IFFALSE 28195
// points := [ 40 , 15 , 5 ] ;
28176: LD_ADDR_VAR 0 9
28180: PUSH
28181: LD_INT 40
28183: PUSH
28184: LD_INT 15
28186: PUSH
28187: LD_INT 5
28189: PUSH
28190: EMPTY
28191: LIST
28192: LIST
28193: LIST
28194: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
28195: LD_VAR 0 6
28199: PPUSH
28200: CALL_OW 264
28204: PUSH
28205: LD_INT 3
28207: PUSH
28208: LD_INT 23
28210: PUSH
28211: EMPTY
28212: LIST
28213: LIST
28214: IN
28215: IFFALSE 28236
// points := [ 7 , 25 , 8 ] ;
28217: LD_ADDR_VAR 0 9
28221: PUSH
28222: LD_INT 7
28224: PUSH
28225: LD_INT 25
28227: PUSH
28228: LD_INT 8
28230: PUSH
28231: EMPTY
28232: LIST
28233: LIST
28234: LIST
28235: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
28236: LD_VAR 0 6
28240: PPUSH
28241: CALL_OW 264
28245: PUSH
28246: LD_INT 5
28248: PUSH
28249: LD_INT 27
28251: PUSH
28252: LD_INT 44
28254: PUSH
28255: EMPTY
28256: LIST
28257: LIST
28258: LIST
28259: IN
28260: IFFALSE 28281
// points := [ 14 , 50 , 16 ] ;
28262: LD_ADDR_VAR 0 9
28266: PUSH
28267: LD_INT 14
28269: PUSH
28270: LD_INT 50
28272: PUSH
28273: LD_INT 16
28275: PUSH
28276: EMPTY
28277: LIST
28278: LIST
28279: LIST
28280: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
28281: LD_VAR 0 6
28285: PPUSH
28286: CALL_OW 264
28290: PUSH
28291: LD_INT 6
28293: PUSH
28294: LD_INT 46
28296: PUSH
28297: EMPTY
28298: LIST
28299: LIST
28300: IN
28301: IFFALSE 28322
// points := [ 32 , 120 , 70 ] ;
28303: LD_ADDR_VAR 0 9
28307: PUSH
28308: LD_INT 32
28310: PUSH
28311: LD_INT 120
28313: PUSH
28314: LD_INT 70
28316: PUSH
28317: EMPTY
28318: LIST
28319: LIST
28320: LIST
28321: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
28322: LD_VAR 0 6
28326: PPUSH
28327: CALL_OW 264
28331: PUSH
28332: LD_INT 7
28334: PUSH
28335: LD_INT 28
28337: PUSH
28338: LD_INT 45
28340: PUSH
28341: EMPTY
28342: LIST
28343: LIST
28344: LIST
28345: IN
28346: IFFALSE 28367
// points := [ 35 , 20 , 45 ] ;
28348: LD_ADDR_VAR 0 9
28352: PUSH
28353: LD_INT 35
28355: PUSH
28356: LD_INT 20
28358: PUSH
28359: LD_INT 45
28361: PUSH
28362: EMPTY
28363: LIST
28364: LIST
28365: LIST
28366: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
28367: LD_VAR 0 6
28371: PPUSH
28372: CALL_OW 264
28376: PUSH
28377: LD_INT 47
28379: PUSH
28380: EMPTY
28381: LIST
28382: IN
28383: IFFALSE 28404
// points := [ 67 , 45 , 75 ] ;
28385: LD_ADDR_VAR 0 9
28389: PUSH
28390: LD_INT 67
28392: PUSH
28393: LD_INT 45
28395: PUSH
28396: LD_INT 75
28398: PUSH
28399: EMPTY
28400: LIST
28401: LIST
28402: LIST
28403: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
28404: LD_VAR 0 6
28408: PPUSH
28409: CALL_OW 264
28413: PUSH
28414: LD_INT 26
28416: PUSH
28417: EMPTY
28418: LIST
28419: IN
28420: IFFALSE 28441
// points := [ 120 , 30 , 80 ] ;
28422: LD_ADDR_VAR 0 9
28426: PUSH
28427: LD_INT 120
28429: PUSH
28430: LD_INT 30
28432: PUSH
28433: LD_INT 80
28435: PUSH
28436: EMPTY
28437: LIST
28438: LIST
28439: LIST
28440: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
28441: LD_VAR 0 6
28445: PPUSH
28446: CALL_OW 264
28450: PUSH
28451: LD_INT 22
28453: PUSH
28454: EMPTY
28455: LIST
28456: IN
28457: IFFALSE 28478
// points := [ 40 , 1 , 1 ] ;
28459: LD_ADDR_VAR 0 9
28463: PUSH
28464: LD_INT 40
28466: PUSH
28467: LD_INT 1
28469: PUSH
28470: LD_INT 1
28472: PUSH
28473: EMPTY
28474: LIST
28475: LIST
28476: LIST
28477: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
28478: LD_VAR 0 6
28482: PPUSH
28483: CALL_OW 264
28487: PUSH
28488: LD_INT 29
28490: PUSH
28491: EMPTY
28492: LIST
28493: IN
28494: IFFALSE 28515
// points := [ 70 , 200 , 400 ] ;
28496: LD_ADDR_VAR 0 9
28500: PUSH
28501: LD_INT 70
28503: PUSH
28504: LD_INT 200
28506: PUSH
28507: LD_INT 400
28509: PUSH
28510: EMPTY
28511: LIST
28512: LIST
28513: LIST
28514: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
28515: LD_VAR 0 6
28519: PPUSH
28520: CALL_OW 264
28524: PUSH
28525: LD_INT 14
28527: PUSH
28528: LD_INT 53
28530: PUSH
28531: EMPTY
28532: LIST
28533: LIST
28534: IN
28535: IFFALSE 28556
// points := [ 40 , 10 , 20 ] ;
28537: LD_ADDR_VAR 0 9
28541: PUSH
28542: LD_INT 40
28544: PUSH
28545: LD_INT 10
28547: PUSH
28548: LD_INT 20
28550: PUSH
28551: EMPTY
28552: LIST
28553: LIST
28554: LIST
28555: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
28556: LD_VAR 0 6
28560: PPUSH
28561: CALL_OW 264
28565: PUSH
28566: LD_INT 9
28568: PUSH
28569: EMPTY
28570: LIST
28571: IN
28572: IFFALSE 28593
// points := [ 5 , 70 , 20 ] ;
28574: LD_ADDR_VAR 0 9
28578: PUSH
28579: LD_INT 5
28581: PUSH
28582: LD_INT 70
28584: PUSH
28585: LD_INT 20
28587: PUSH
28588: EMPTY
28589: LIST
28590: LIST
28591: LIST
28592: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
28593: LD_VAR 0 6
28597: PPUSH
28598: CALL_OW 264
28602: PUSH
28603: LD_INT 10
28605: PUSH
28606: EMPTY
28607: LIST
28608: IN
28609: IFFALSE 28630
// points := [ 35 , 110 , 70 ] ;
28611: LD_ADDR_VAR 0 9
28615: PUSH
28616: LD_INT 35
28618: PUSH
28619: LD_INT 110
28621: PUSH
28622: LD_INT 70
28624: PUSH
28625: EMPTY
28626: LIST
28627: LIST
28628: LIST
28629: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
28630: LD_VAR 0 6
28634: PPUSH
28635: CALL_OW 265
28639: PUSH
28640: LD_INT 25
28642: EQUAL
28643: IFFALSE 28664
// points := [ 80 , 65 , 100 ] ;
28645: LD_ADDR_VAR 0 9
28649: PUSH
28650: LD_INT 80
28652: PUSH
28653: LD_INT 65
28655: PUSH
28656: LD_INT 100
28658: PUSH
28659: EMPTY
28660: LIST
28661: LIST
28662: LIST
28663: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
28664: LD_VAR 0 6
28668: PPUSH
28669: CALL_OW 263
28673: PUSH
28674: LD_INT 1
28676: EQUAL
28677: IFFALSE 28712
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
28679: LD_ADDR_VAR 0 10
28683: PUSH
28684: LD_VAR 0 10
28688: PUSH
28689: LD_VAR 0 6
28693: PPUSH
28694: CALL_OW 311
28698: PPUSH
28699: LD_INT 3
28701: PPUSH
28702: CALL_OW 259
28706: PUSH
28707: LD_INT 4
28709: MUL
28710: MUL
28711: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
28712: LD_VAR 0 6
28716: PPUSH
28717: CALL_OW 263
28721: PUSH
28722: LD_INT 2
28724: EQUAL
28725: IFFALSE 28776
// begin j := IsControledBy ( i ) ;
28727: LD_ADDR_VAR 0 7
28731: PUSH
28732: LD_VAR 0 6
28736: PPUSH
28737: CALL_OW 312
28741: ST_TO_ADDR
// if j then
28742: LD_VAR 0 7
28746: IFFALSE 28776
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
28748: LD_ADDR_VAR 0 10
28752: PUSH
28753: LD_VAR 0 10
28757: PUSH
28758: LD_VAR 0 7
28762: PPUSH
28763: LD_INT 3
28765: PPUSH
28766: CALL_OW 259
28770: PUSH
28771: LD_INT 3
28773: MUL
28774: MUL
28775: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
28776: LD_VAR 0 6
28780: PPUSH
28781: CALL_OW 264
28785: PUSH
28786: LD_INT 5
28788: PUSH
28789: LD_INT 6
28791: PUSH
28792: LD_INT 46
28794: PUSH
28795: LD_INT 44
28797: PUSH
28798: LD_INT 47
28800: PUSH
28801: LD_INT 45
28803: PUSH
28804: LD_INT 28
28806: PUSH
28807: LD_INT 7
28809: PUSH
28810: LD_INT 27
28812: PUSH
28813: LD_INT 29
28815: PUSH
28816: EMPTY
28817: LIST
28818: LIST
28819: LIST
28820: LIST
28821: LIST
28822: LIST
28823: LIST
28824: LIST
28825: LIST
28826: LIST
28827: IN
28828: PUSH
28829: LD_VAR 0 1
28833: PPUSH
28834: LD_INT 52
28836: PPUSH
28837: CALL_OW 321
28841: PUSH
28842: LD_INT 2
28844: EQUAL
28845: AND
28846: IFFALSE 28863
// bpoints := bpoints * 1.2 ;
28848: LD_ADDR_VAR 0 10
28852: PUSH
28853: LD_VAR 0 10
28857: PUSH
28858: LD_REAL  1.20000000000000E+0000
28861: MUL
28862: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
28863: LD_VAR 0 6
28867: PPUSH
28868: CALL_OW 264
28872: PUSH
28873: LD_INT 6
28875: PUSH
28876: LD_INT 46
28878: PUSH
28879: LD_INT 47
28881: PUSH
28882: EMPTY
28883: LIST
28884: LIST
28885: LIST
28886: IN
28887: IFFALSE 28904
// bpoints := bpoints * 1.2 ;
28889: LD_ADDR_VAR 0 10
28893: PUSH
28894: LD_VAR 0 10
28898: PUSH
28899: LD_REAL  1.20000000000000E+0000
28902: MUL
28903: ST_TO_ADDR
// end ; unit_building :
28904: GO 28918
28906: LD_INT 3
28908: DOUBLE
28909: EQUAL
28910: IFTRUE 28914
28912: GO 28917
28914: POP
// ; end ;
28915: GO 28918
28917: POP
// for j = 1 to 3 do
28918: LD_ADDR_VAR 0 7
28922: PUSH
28923: DOUBLE
28924: LD_INT 1
28926: DEC
28927: ST_TO_ADDR
28928: LD_INT 3
28930: PUSH
28931: FOR_TO
28932: IFFALSE 28985
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
28934: LD_ADDR_VAR 0 5
28938: PUSH
28939: LD_VAR 0 5
28943: PPUSH
28944: LD_VAR 0 7
28948: PPUSH
28949: LD_VAR 0 5
28953: PUSH
28954: LD_VAR 0 7
28958: ARRAY
28959: PUSH
28960: LD_VAR 0 9
28964: PUSH
28965: LD_VAR 0 7
28969: ARRAY
28970: PUSH
28971: LD_VAR 0 10
28975: MUL
28976: PLUS
28977: PPUSH
28978: CALL_OW 1
28982: ST_TO_ADDR
28983: GO 28931
28985: POP
28986: POP
// end ;
28987: GO 27470
28989: POP
28990: POP
// result := Replace ( result , 4 , tmp ) ;
28991: LD_ADDR_VAR 0 5
28995: PUSH
28996: LD_VAR 0 5
29000: PPUSH
29001: LD_INT 4
29003: PPUSH
29004: LD_VAR 0 8
29008: PPUSH
29009: CALL_OW 1
29013: ST_TO_ADDR
// end ;
29014: LD_VAR 0 5
29018: RET
// export function DangerAtRange ( unit , range ) ; begin
29019: LD_INT 0
29021: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
29022: LD_ADDR_VAR 0 3
29026: PUSH
29027: LD_VAR 0 1
29031: PPUSH
29032: CALL_OW 255
29036: PPUSH
29037: LD_VAR 0 1
29041: PPUSH
29042: CALL_OW 250
29046: PPUSH
29047: LD_VAR 0 1
29051: PPUSH
29052: CALL_OW 251
29056: PPUSH
29057: LD_VAR 0 2
29061: PPUSH
29062: CALL 27322 0 4
29066: ST_TO_ADDR
// end ;
29067: LD_VAR 0 3
29071: RET
// export function DangerInArea ( side , area ) ; begin
29072: LD_INT 0
29074: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
29075: LD_ADDR_VAR 0 3
29079: PUSH
29080: LD_VAR 0 2
29084: PPUSH
29085: LD_INT 81
29087: PUSH
29088: LD_VAR 0 1
29092: PUSH
29093: EMPTY
29094: LIST
29095: LIST
29096: PPUSH
29097: CALL_OW 70
29101: ST_TO_ADDR
// end ;
29102: LD_VAR 0 3
29106: RET
// export function IsExtension ( b ) ; begin
29107: LD_INT 0
29109: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
29110: LD_ADDR_VAR 0 2
29114: PUSH
29115: LD_VAR 0 1
29119: PUSH
29120: LD_INT 23
29122: PUSH
29123: LD_INT 20
29125: PUSH
29126: LD_INT 22
29128: PUSH
29129: LD_INT 17
29131: PUSH
29132: LD_INT 24
29134: PUSH
29135: LD_INT 21
29137: PUSH
29138: LD_INT 19
29140: PUSH
29141: LD_INT 16
29143: PUSH
29144: LD_INT 25
29146: PUSH
29147: LD_INT 18
29149: PUSH
29150: EMPTY
29151: LIST
29152: LIST
29153: LIST
29154: LIST
29155: LIST
29156: LIST
29157: LIST
29158: LIST
29159: LIST
29160: LIST
29161: IN
29162: ST_TO_ADDR
// end ;
29163: LD_VAR 0 2
29167: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
29168: LD_INT 0
29170: PPUSH
29171: PPUSH
29172: PPUSH
// result := [ ] ;
29173: LD_ADDR_VAR 0 3
29177: PUSH
29178: EMPTY
29179: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
29180: LD_ADDR_VAR 0 4
29184: PUSH
29185: LD_VAR 0 2
29189: PPUSH
29190: LD_INT 21
29192: PUSH
29193: LD_INT 3
29195: PUSH
29196: EMPTY
29197: LIST
29198: LIST
29199: PPUSH
29200: CALL_OW 70
29204: ST_TO_ADDR
// if not tmp then
29205: LD_VAR 0 4
29209: NOT
29210: IFFALSE 29214
// exit ;
29212: GO 29272
// for i in tmp do
29214: LD_ADDR_VAR 0 5
29218: PUSH
29219: LD_VAR 0 4
29223: PUSH
29224: FOR_IN
29225: IFFALSE 29260
// if GetBase ( i ) <> base then
29227: LD_VAR 0 5
29231: PPUSH
29232: CALL_OW 274
29236: PUSH
29237: LD_VAR 0 1
29241: NONEQUAL
29242: IFFALSE 29258
// ComLinkToBase ( base , i ) ;
29244: LD_VAR 0 1
29248: PPUSH
29249: LD_VAR 0 5
29253: PPUSH
29254: CALL_OW 169
29258: GO 29224
29260: POP
29261: POP
// result := tmp ;
29262: LD_ADDR_VAR 0 3
29266: PUSH
29267: LD_VAR 0 4
29271: ST_TO_ADDR
// end ;
29272: LD_VAR 0 3
29276: RET
// export function ComComplete ( unit , b ) ; var i ; begin
29277: LD_INT 0
29279: PPUSH
29280: PPUSH
// if BuildingStatus ( b ) = bs_build then
29281: LD_VAR 0 2
29285: PPUSH
29286: CALL_OW 461
29290: PUSH
29291: LD_INT 1
29293: EQUAL
29294: IFFALSE 29354
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
29296: LD_VAR 0 1
29300: PPUSH
29301: LD_STRING h
29303: PUSH
29304: LD_VAR 0 2
29308: PPUSH
29309: CALL_OW 250
29313: PUSH
29314: LD_VAR 0 2
29318: PPUSH
29319: CALL_OW 251
29323: PUSH
29324: LD_VAR 0 2
29328: PUSH
29329: LD_INT 0
29331: PUSH
29332: LD_INT 0
29334: PUSH
29335: LD_INT 0
29337: PUSH
29338: EMPTY
29339: LIST
29340: LIST
29341: LIST
29342: LIST
29343: LIST
29344: LIST
29345: LIST
29346: PUSH
29347: EMPTY
29348: LIST
29349: PPUSH
29350: CALL_OW 446
// end ;
29354: LD_VAR 0 3
29358: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
29359: LD_INT 0
29361: PPUSH
29362: PPUSH
29363: PPUSH
29364: PPUSH
29365: PPUSH
29366: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
29367: LD_VAR 0 1
29371: NOT
29372: PUSH
29373: LD_VAR 0 1
29377: PPUSH
29378: CALL_OW 263
29382: PUSH
29383: LD_INT 2
29385: EQUAL
29386: NOT
29387: OR
29388: IFFALSE 29392
// exit ;
29390: GO 29708
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
29392: LD_ADDR_VAR 0 6
29396: PUSH
29397: LD_INT 22
29399: PUSH
29400: LD_VAR 0 1
29404: PPUSH
29405: CALL_OW 255
29409: PUSH
29410: EMPTY
29411: LIST
29412: LIST
29413: PUSH
29414: LD_INT 2
29416: PUSH
29417: LD_INT 30
29419: PUSH
29420: LD_INT 36
29422: PUSH
29423: EMPTY
29424: LIST
29425: LIST
29426: PUSH
29427: LD_INT 34
29429: PUSH
29430: LD_INT 31
29432: PUSH
29433: EMPTY
29434: LIST
29435: LIST
29436: PUSH
29437: EMPTY
29438: LIST
29439: LIST
29440: LIST
29441: PUSH
29442: EMPTY
29443: LIST
29444: LIST
29445: PPUSH
29446: CALL_OW 69
29450: ST_TO_ADDR
// if not tmp then
29451: LD_VAR 0 6
29455: NOT
29456: IFFALSE 29460
// exit ;
29458: GO 29708
// result := [ ] ;
29460: LD_ADDR_VAR 0 2
29464: PUSH
29465: EMPTY
29466: ST_TO_ADDR
// for i in tmp do
29467: LD_ADDR_VAR 0 3
29471: PUSH
29472: LD_VAR 0 6
29476: PUSH
29477: FOR_IN
29478: IFFALSE 29549
// begin t := UnitsInside ( i ) ;
29480: LD_ADDR_VAR 0 4
29484: PUSH
29485: LD_VAR 0 3
29489: PPUSH
29490: CALL_OW 313
29494: ST_TO_ADDR
// if t then
29495: LD_VAR 0 4
29499: IFFALSE 29547
// for j in t do
29501: LD_ADDR_VAR 0 7
29505: PUSH
29506: LD_VAR 0 4
29510: PUSH
29511: FOR_IN
29512: IFFALSE 29545
// result := Insert ( result , result + 1 , j ) ;
29514: LD_ADDR_VAR 0 2
29518: PUSH
29519: LD_VAR 0 2
29523: PPUSH
29524: LD_VAR 0 2
29528: PUSH
29529: LD_INT 1
29531: PLUS
29532: PPUSH
29533: LD_VAR 0 7
29537: PPUSH
29538: CALL_OW 2
29542: ST_TO_ADDR
29543: GO 29511
29545: POP
29546: POP
// end ;
29547: GO 29477
29549: POP
29550: POP
// if not result then
29551: LD_VAR 0 2
29555: NOT
29556: IFFALSE 29560
// exit ;
29558: GO 29708
// mech := result [ 1 ] ;
29560: LD_ADDR_VAR 0 5
29564: PUSH
29565: LD_VAR 0 2
29569: PUSH
29570: LD_INT 1
29572: ARRAY
29573: ST_TO_ADDR
// if result > 1 then
29574: LD_VAR 0 2
29578: PUSH
29579: LD_INT 1
29581: GREATER
29582: IFFALSE 29694
// for i = 2 to result do
29584: LD_ADDR_VAR 0 3
29588: PUSH
29589: DOUBLE
29590: LD_INT 2
29592: DEC
29593: ST_TO_ADDR
29594: LD_VAR 0 2
29598: PUSH
29599: FOR_TO
29600: IFFALSE 29692
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
29602: LD_ADDR_VAR 0 4
29606: PUSH
29607: LD_VAR 0 2
29611: PUSH
29612: LD_VAR 0 3
29616: ARRAY
29617: PPUSH
29618: LD_INT 3
29620: PPUSH
29621: CALL_OW 259
29625: PUSH
29626: LD_VAR 0 2
29630: PUSH
29631: LD_VAR 0 3
29635: ARRAY
29636: PPUSH
29637: CALL_OW 432
29641: MINUS
29642: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
29643: LD_VAR 0 4
29647: PUSH
29648: LD_VAR 0 5
29652: PPUSH
29653: LD_INT 3
29655: PPUSH
29656: CALL_OW 259
29660: PUSH
29661: LD_VAR 0 5
29665: PPUSH
29666: CALL_OW 432
29670: MINUS
29671: GREATEREQUAL
29672: IFFALSE 29690
// mech := result [ i ] ;
29674: LD_ADDR_VAR 0 5
29678: PUSH
29679: LD_VAR 0 2
29683: PUSH
29684: LD_VAR 0 3
29688: ARRAY
29689: ST_TO_ADDR
// end ;
29690: GO 29599
29692: POP
29693: POP
// ComLinkTo ( vehicle , mech ) ;
29694: LD_VAR 0 1
29698: PPUSH
29699: LD_VAR 0 5
29703: PPUSH
29704: CALL_OW 135
// end ;
29708: LD_VAR 0 2
29712: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
29713: LD_INT 0
29715: PPUSH
29716: PPUSH
29717: PPUSH
29718: PPUSH
29719: PPUSH
29720: PPUSH
29721: PPUSH
29722: PPUSH
29723: PPUSH
29724: PPUSH
29725: PPUSH
29726: PPUSH
29727: PPUSH
// result := [ ] ;
29728: LD_ADDR_VAR 0 7
29732: PUSH
29733: EMPTY
29734: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
29735: LD_VAR 0 1
29739: PPUSH
29740: CALL_OW 266
29744: PUSH
29745: LD_INT 0
29747: PUSH
29748: LD_INT 1
29750: PUSH
29751: EMPTY
29752: LIST
29753: LIST
29754: IN
29755: NOT
29756: IFFALSE 29760
// exit ;
29758: GO 31391
// if name then
29760: LD_VAR 0 3
29764: IFFALSE 29780
// SetBName ( base_dep , name ) ;
29766: LD_VAR 0 1
29770: PPUSH
29771: LD_VAR 0 3
29775: PPUSH
29776: CALL_OW 500
// base := GetBase ( base_dep ) ;
29780: LD_ADDR_VAR 0 15
29784: PUSH
29785: LD_VAR 0 1
29789: PPUSH
29790: CALL_OW 274
29794: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
29795: LD_ADDR_VAR 0 16
29799: PUSH
29800: LD_VAR 0 1
29804: PPUSH
29805: CALL_OW 255
29809: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
29810: LD_ADDR_VAR 0 17
29814: PUSH
29815: LD_VAR 0 1
29819: PPUSH
29820: CALL_OW 248
29824: ST_TO_ADDR
// if sources then
29825: LD_VAR 0 5
29829: IFFALSE 29876
// for i = 1 to 3 do
29831: LD_ADDR_VAR 0 8
29835: PUSH
29836: DOUBLE
29837: LD_INT 1
29839: DEC
29840: ST_TO_ADDR
29841: LD_INT 3
29843: PUSH
29844: FOR_TO
29845: IFFALSE 29874
// AddResourceType ( base , i , sources [ i ] ) ;
29847: LD_VAR 0 15
29851: PPUSH
29852: LD_VAR 0 8
29856: PPUSH
29857: LD_VAR 0 5
29861: PUSH
29862: LD_VAR 0 8
29866: ARRAY
29867: PPUSH
29868: CALL_OW 276
29872: GO 29844
29874: POP
29875: POP
// buildings := GetBaseBuildings ( base , area ) ;
29876: LD_ADDR_VAR 0 18
29880: PUSH
29881: LD_VAR 0 15
29885: PPUSH
29886: LD_VAR 0 2
29890: PPUSH
29891: CALL 29168 0 2
29895: ST_TO_ADDR
// InitHc ;
29896: CALL_OW 19
// InitUc ;
29900: CALL_OW 18
// uc_side := side ;
29904: LD_ADDR_OWVAR 20
29908: PUSH
29909: LD_VAR 0 16
29913: ST_TO_ADDR
// uc_nation := nation ;
29914: LD_ADDR_OWVAR 21
29918: PUSH
29919: LD_VAR 0 17
29923: ST_TO_ADDR
// if buildings then
29924: LD_VAR 0 18
29928: IFFALSE 31250
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
29930: LD_ADDR_VAR 0 19
29934: PUSH
29935: LD_VAR 0 18
29939: PPUSH
29940: LD_INT 2
29942: PUSH
29943: LD_INT 30
29945: PUSH
29946: LD_INT 29
29948: PUSH
29949: EMPTY
29950: LIST
29951: LIST
29952: PUSH
29953: LD_INT 30
29955: PUSH
29956: LD_INT 30
29958: PUSH
29959: EMPTY
29960: LIST
29961: LIST
29962: PUSH
29963: EMPTY
29964: LIST
29965: LIST
29966: LIST
29967: PPUSH
29968: CALL_OW 72
29972: ST_TO_ADDR
// if tmp then
29973: LD_VAR 0 19
29977: IFFALSE 30025
// for i in tmp do
29979: LD_ADDR_VAR 0 8
29983: PUSH
29984: LD_VAR 0 19
29988: PUSH
29989: FOR_IN
29990: IFFALSE 30023
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
29992: LD_VAR 0 8
29996: PPUSH
29997: CALL_OW 250
30001: PPUSH
30002: LD_VAR 0 8
30006: PPUSH
30007: CALL_OW 251
30011: PPUSH
30012: LD_VAR 0 16
30016: PPUSH
30017: CALL_OW 441
30021: GO 29989
30023: POP
30024: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
30025: LD_VAR 0 18
30029: PPUSH
30030: LD_INT 2
30032: PUSH
30033: LD_INT 30
30035: PUSH
30036: LD_INT 32
30038: PUSH
30039: EMPTY
30040: LIST
30041: LIST
30042: PUSH
30043: LD_INT 30
30045: PUSH
30046: LD_INT 33
30048: PUSH
30049: EMPTY
30050: LIST
30051: LIST
30052: PUSH
30053: EMPTY
30054: LIST
30055: LIST
30056: LIST
30057: PPUSH
30058: CALL_OW 72
30062: IFFALSE 30150
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
30064: LD_ADDR_VAR 0 8
30068: PUSH
30069: LD_VAR 0 18
30073: PPUSH
30074: LD_INT 2
30076: PUSH
30077: LD_INT 30
30079: PUSH
30080: LD_INT 32
30082: PUSH
30083: EMPTY
30084: LIST
30085: LIST
30086: PUSH
30087: LD_INT 30
30089: PUSH
30090: LD_INT 33
30092: PUSH
30093: EMPTY
30094: LIST
30095: LIST
30096: PUSH
30097: EMPTY
30098: LIST
30099: LIST
30100: LIST
30101: PPUSH
30102: CALL_OW 72
30106: PUSH
30107: FOR_IN
30108: IFFALSE 30148
// begin if not GetBWeapon ( i ) then
30110: LD_VAR 0 8
30114: PPUSH
30115: CALL_OW 269
30119: NOT
30120: IFFALSE 30146
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
30122: LD_VAR 0 8
30126: PPUSH
30127: LD_VAR 0 8
30131: PPUSH
30132: LD_VAR 0 2
30136: PPUSH
30137: CALL 31396 0 2
30141: PPUSH
30142: CALL_OW 431
// end ;
30146: GO 30107
30148: POP
30149: POP
// end ; for i = 1 to personel do
30150: LD_ADDR_VAR 0 8
30154: PUSH
30155: DOUBLE
30156: LD_INT 1
30158: DEC
30159: ST_TO_ADDR
30160: LD_VAR 0 6
30164: PUSH
30165: FOR_TO
30166: IFFALSE 31230
// begin if i > 4 then
30168: LD_VAR 0 8
30172: PUSH
30173: LD_INT 4
30175: GREATER
30176: IFFALSE 30180
// break ;
30178: GO 31230
// case i of 1 :
30180: LD_VAR 0 8
30184: PUSH
30185: LD_INT 1
30187: DOUBLE
30188: EQUAL
30189: IFTRUE 30193
30191: GO 30273
30193: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
30194: LD_ADDR_VAR 0 12
30198: PUSH
30199: LD_VAR 0 18
30203: PPUSH
30204: LD_INT 22
30206: PUSH
30207: LD_VAR 0 16
30211: PUSH
30212: EMPTY
30213: LIST
30214: LIST
30215: PUSH
30216: LD_INT 58
30218: PUSH
30219: EMPTY
30220: LIST
30221: PUSH
30222: LD_INT 2
30224: PUSH
30225: LD_INT 30
30227: PUSH
30228: LD_INT 32
30230: PUSH
30231: EMPTY
30232: LIST
30233: LIST
30234: PUSH
30235: LD_INT 30
30237: PUSH
30238: LD_INT 4
30240: PUSH
30241: EMPTY
30242: LIST
30243: LIST
30244: PUSH
30245: LD_INT 30
30247: PUSH
30248: LD_INT 5
30250: PUSH
30251: EMPTY
30252: LIST
30253: LIST
30254: PUSH
30255: EMPTY
30256: LIST
30257: LIST
30258: LIST
30259: LIST
30260: PUSH
30261: EMPTY
30262: LIST
30263: LIST
30264: LIST
30265: PPUSH
30266: CALL_OW 72
30270: ST_TO_ADDR
30271: GO 30495
30273: LD_INT 2
30275: DOUBLE
30276: EQUAL
30277: IFTRUE 30281
30279: GO 30343
30281: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
30282: LD_ADDR_VAR 0 12
30286: PUSH
30287: LD_VAR 0 18
30291: PPUSH
30292: LD_INT 22
30294: PUSH
30295: LD_VAR 0 16
30299: PUSH
30300: EMPTY
30301: LIST
30302: LIST
30303: PUSH
30304: LD_INT 2
30306: PUSH
30307: LD_INT 30
30309: PUSH
30310: LD_INT 0
30312: PUSH
30313: EMPTY
30314: LIST
30315: LIST
30316: PUSH
30317: LD_INT 30
30319: PUSH
30320: LD_INT 1
30322: PUSH
30323: EMPTY
30324: LIST
30325: LIST
30326: PUSH
30327: EMPTY
30328: LIST
30329: LIST
30330: LIST
30331: PUSH
30332: EMPTY
30333: LIST
30334: LIST
30335: PPUSH
30336: CALL_OW 72
30340: ST_TO_ADDR
30341: GO 30495
30343: LD_INT 3
30345: DOUBLE
30346: EQUAL
30347: IFTRUE 30351
30349: GO 30413
30351: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
30352: LD_ADDR_VAR 0 12
30356: PUSH
30357: LD_VAR 0 18
30361: PPUSH
30362: LD_INT 22
30364: PUSH
30365: LD_VAR 0 16
30369: PUSH
30370: EMPTY
30371: LIST
30372: LIST
30373: PUSH
30374: LD_INT 2
30376: PUSH
30377: LD_INT 30
30379: PUSH
30380: LD_INT 2
30382: PUSH
30383: EMPTY
30384: LIST
30385: LIST
30386: PUSH
30387: LD_INT 30
30389: PUSH
30390: LD_INT 3
30392: PUSH
30393: EMPTY
30394: LIST
30395: LIST
30396: PUSH
30397: EMPTY
30398: LIST
30399: LIST
30400: LIST
30401: PUSH
30402: EMPTY
30403: LIST
30404: LIST
30405: PPUSH
30406: CALL_OW 72
30410: ST_TO_ADDR
30411: GO 30495
30413: LD_INT 4
30415: DOUBLE
30416: EQUAL
30417: IFTRUE 30421
30419: GO 30494
30421: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
30422: LD_ADDR_VAR 0 12
30426: PUSH
30427: LD_VAR 0 18
30431: PPUSH
30432: LD_INT 22
30434: PUSH
30435: LD_VAR 0 16
30439: PUSH
30440: EMPTY
30441: LIST
30442: LIST
30443: PUSH
30444: LD_INT 2
30446: PUSH
30447: LD_INT 30
30449: PUSH
30450: LD_INT 6
30452: PUSH
30453: EMPTY
30454: LIST
30455: LIST
30456: PUSH
30457: LD_INT 30
30459: PUSH
30460: LD_INT 7
30462: PUSH
30463: EMPTY
30464: LIST
30465: LIST
30466: PUSH
30467: LD_INT 30
30469: PUSH
30470: LD_INT 8
30472: PUSH
30473: EMPTY
30474: LIST
30475: LIST
30476: PUSH
30477: EMPTY
30478: LIST
30479: LIST
30480: LIST
30481: LIST
30482: PUSH
30483: EMPTY
30484: LIST
30485: LIST
30486: PPUSH
30487: CALL_OW 72
30491: ST_TO_ADDR
30492: GO 30495
30494: POP
// if i = 1 then
30495: LD_VAR 0 8
30499: PUSH
30500: LD_INT 1
30502: EQUAL
30503: IFFALSE 30614
// begin tmp := [ ] ;
30505: LD_ADDR_VAR 0 19
30509: PUSH
30510: EMPTY
30511: ST_TO_ADDR
// for j in f do
30512: LD_ADDR_VAR 0 9
30516: PUSH
30517: LD_VAR 0 12
30521: PUSH
30522: FOR_IN
30523: IFFALSE 30596
// if GetBType ( j ) = b_bunker then
30525: LD_VAR 0 9
30529: PPUSH
30530: CALL_OW 266
30534: PUSH
30535: LD_INT 32
30537: EQUAL
30538: IFFALSE 30565
// tmp := Insert ( tmp , 1 , j ) else
30540: LD_ADDR_VAR 0 19
30544: PUSH
30545: LD_VAR 0 19
30549: PPUSH
30550: LD_INT 1
30552: PPUSH
30553: LD_VAR 0 9
30557: PPUSH
30558: CALL_OW 2
30562: ST_TO_ADDR
30563: GO 30594
// tmp := Insert ( tmp , tmp + 1 , j ) ;
30565: LD_ADDR_VAR 0 19
30569: PUSH
30570: LD_VAR 0 19
30574: PPUSH
30575: LD_VAR 0 19
30579: PUSH
30580: LD_INT 1
30582: PLUS
30583: PPUSH
30584: LD_VAR 0 9
30588: PPUSH
30589: CALL_OW 2
30593: ST_TO_ADDR
30594: GO 30522
30596: POP
30597: POP
// if tmp then
30598: LD_VAR 0 19
30602: IFFALSE 30614
// f := tmp ;
30604: LD_ADDR_VAR 0 12
30608: PUSH
30609: LD_VAR 0 19
30613: ST_TO_ADDR
// end ; x := personel [ i ] ;
30614: LD_ADDR_VAR 0 13
30618: PUSH
30619: LD_VAR 0 6
30623: PUSH
30624: LD_VAR 0 8
30628: ARRAY
30629: ST_TO_ADDR
// if x = - 1 then
30630: LD_VAR 0 13
30634: PUSH
30635: LD_INT 1
30637: NEG
30638: EQUAL
30639: IFFALSE 30848
// begin for j in f do
30641: LD_ADDR_VAR 0 9
30645: PUSH
30646: LD_VAR 0 12
30650: PUSH
30651: FOR_IN
30652: IFFALSE 30844
// repeat InitHc ;
30654: CALL_OW 19
// if GetBType ( j ) = b_barracks then
30658: LD_VAR 0 9
30662: PPUSH
30663: CALL_OW 266
30667: PUSH
30668: LD_INT 5
30670: EQUAL
30671: IFFALSE 30741
// begin if UnitsInside ( j ) < 3 then
30673: LD_VAR 0 9
30677: PPUSH
30678: CALL_OW 313
30682: PUSH
30683: LD_INT 3
30685: LESS
30686: IFFALSE 30722
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30688: LD_INT 0
30690: PPUSH
30691: LD_INT 5
30693: PUSH
30694: LD_INT 8
30696: PUSH
30697: LD_INT 9
30699: PUSH
30700: EMPTY
30701: LIST
30702: LIST
30703: LIST
30704: PUSH
30705: LD_VAR 0 17
30709: ARRAY
30710: PPUSH
30711: LD_VAR 0 4
30715: PPUSH
30716: CALL_OW 380
30720: GO 30739
// PrepareHuman ( false , i , skill ) ;
30722: LD_INT 0
30724: PPUSH
30725: LD_VAR 0 8
30729: PPUSH
30730: LD_VAR 0 4
30734: PPUSH
30735: CALL_OW 380
// end else
30739: GO 30758
// PrepareHuman ( false , i , skill ) ;
30741: LD_INT 0
30743: PPUSH
30744: LD_VAR 0 8
30748: PPUSH
30749: LD_VAR 0 4
30753: PPUSH
30754: CALL_OW 380
// un := CreateHuman ;
30758: LD_ADDR_VAR 0 14
30762: PUSH
30763: CALL_OW 44
30767: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30768: LD_ADDR_VAR 0 7
30772: PUSH
30773: LD_VAR 0 7
30777: PPUSH
30778: LD_INT 1
30780: PPUSH
30781: LD_VAR 0 14
30785: PPUSH
30786: CALL_OW 2
30790: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
30791: LD_VAR 0 14
30795: PPUSH
30796: LD_VAR 0 9
30800: PPUSH
30801: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
30805: LD_VAR 0 9
30809: PPUSH
30810: CALL_OW 313
30814: PUSH
30815: LD_INT 6
30817: EQUAL
30818: PUSH
30819: LD_VAR 0 9
30823: PPUSH
30824: CALL_OW 266
30828: PUSH
30829: LD_INT 32
30831: PUSH
30832: LD_INT 31
30834: PUSH
30835: EMPTY
30836: LIST
30837: LIST
30838: IN
30839: OR
30840: IFFALSE 30654
30842: GO 30651
30844: POP
30845: POP
// end else
30846: GO 31228
// for j = 1 to x do
30848: LD_ADDR_VAR 0 9
30852: PUSH
30853: DOUBLE
30854: LD_INT 1
30856: DEC
30857: ST_TO_ADDR
30858: LD_VAR 0 13
30862: PUSH
30863: FOR_TO
30864: IFFALSE 31226
// begin InitHc ;
30866: CALL_OW 19
// if not f then
30870: LD_VAR 0 12
30874: NOT
30875: IFFALSE 30964
// begin PrepareHuman ( false , i , skill ) ;
30877: LD_INT 0
30879: PPUSH
30880: LD_VAR 0 8
30884: PPUSH
30885: LD_VAR 0 4
30889: PPUSH
30890: CALL_OW 380
// un := CreateHuman ;
30894: LD_ADDR_VAR 0 14
30898: PUSH
30899: CALL_OW 44
30903: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30904: LD_ADDR_VAR 0 7
30908: PUSH
30909: LD_VAR 0 7
30913: PPUSH
30914: LD_INT 1
30916: PPUSH
30917: LD_VAR 0 14
30921: PPUSH
30922: CALL_OW 2
30926: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30927: LD_VAR 0 14
30931: PPUSH
30932: LD_VAR 0 1
30936: PPUSH
30937: CALL_OW 250
30941: PPUSH
30942: LD_VAR 0 1
30946: PPUSH
30947: CALL_OW 251
30951: PPUSH
30952: LD_INT 10
30954: PPUSH
30955: LD_INT 0
30957: PPUSH
30958: CALL_OW 50
// continue ;
30962: GO 30863
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
30964: LD_VAR 0 12
30968: PUSH
30969: LD_INT 1
30971: ARRAY
30972: PPUSH
30973: CALL_OW 313
30977: PUSH
30978: LD_VAR 0 12
30982: PUSH
30983: LD_INT 1
30985: ARRAY
30986: PPUSH
30987: CALL_OW 266
30991: PUSH
30992: LD_INT 32
30994: PUSH
30995: LD_INT 31
30997: PUSH
30998: EMPTY
30999: LIST
31000: LIST
31001: IN
31002: AND
31003: PUSH
31004: LD_VAR 0 12
31008: PUSH
31009: LD_INT 1
31011: ARRAY
31012: PPUSH
31013: CALL_OW 313
31017: PUSH
31018: LD_INT 6
31020: EQUAL
31021: OR
31022: IFFALSE 31042
// f := Delete ( f , 1 ) ;
31024: LD_ADDR_VAR 0 12
31028: PUSH
31029: LD_VAR 0 12
31033: PPUSH
31034: LD_INT 1
31036: PPUSH
31037: CALL_OW 3
31041: ST_TO_ADDR
// if not f then
31042: LD_VAR 0 12
31046: NOT
31047: IFFALSE 31065
// begin x := x + 2 ;
31049: LD_ADDR_VAR 0 13
31053: PUSH
31054: LD_VAR 0 13
31058: PUSH
31059: LD_INT 2
31061: PLUS
31062: ST_TO_ADDR
// continue ;
31063: GO 30863
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
31065: LD_VAR 0 12
31069: PUSH
31070: LD_INT 1
31072: ARRAY
31073: PPUSH
31074: CALL_OW 266
31078: PUSH
31079: LD_INT 5
31081: EQUAL
31082: IFFALSE 31156
// begin if UnitsInside ( f [ 1 ] ) < 3 then
31084: LD_VAR 0 12
31088: PUSH
31089: LD_INT 1
31091: ARRAY
31092: PPUSH
31093: CALL_OW 313
31097: PUSH
31098: LD_INT 3
31100: LESS
31101: IFFALSE 31137
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31103: LD_INT 0
31105: PPUSH
31106: LD_INT 5
31108: PUSH
31109: LD_INT 8
31111: PUSH
31112: LD_INT 9
31114: PUSH
31115: EMPTY
31116: LIST
31117: LIST
31118: LIST
31119: PUSH
31120: LD_VAR 0 17
31124: ARRAY
31125: PPUSH
31126: LD_VAR 0 4
31130: PPUSH
31131: CALL_OW 380
31135: GO 31154
// PrepareHuman ( false , i , skill ) ;
31137: LD_INT 0
31139: PPUSH
31140: LD_VAR 0 8
31144: PPUSH
31145: LD_VAR 0 4
31149: PPUSH
31150: CALL_OW 380
// end else
31154: GO 31173
// PrepareHuman ( false , i , skill ) ;
31156: LD_INT 0
31158: PPUSH
31159: LD_VAR 0 8
31163: PPUSH
31164: LD_VAR 0 4
31168: PPUSH
31169: CALL_OW 380
// un := CreateHuman ;
31173: LD_ADDR_VAR 0 14
31177: PUSH
31178: CALL_OW 44
31182: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31183: LD_ADDR_VAR 0 7
31187: PUSH
31188: LD_VAR 0 7
31192: PPUSH
31193: LD_INT 1
31195: PPUSH
31196: LD_VAR 0 14
31200: PPUSH
31201: CALL_OW 2
31205: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
31206: LD_VAR 0 14
31210: PPUSH
31211: LD_VAR 0 12
31215: PUSH
31216: LD_INT 1
31218: ARRAY
31219: PPUSH
31220: CALL_OW 52
// end ;
31224: GO 30863
31226: POP
31227: POP
// end ;
31228: GO 30165
31230: POP
31231: POP
// result := result ^ buildings ;
31232: LD_ADDR_VAR 0 7
31236: PUSH
31237: LD_VAR 0 7
31241: PUSH
31242: LD_VAR 0 18
31246: ADD
31247: ST_TO_ADDR
// end else
31248: GO 31391
// begin for i = 1 to personel do
31250: LD_ADDR_VAR 0 8
31254: PUSH
31255: DOUBLE
31256: LD_INT 1
31258: DEC
31259: ST_TO_ADDR
31260: LD_VAR 0 6
31264: PUSH
31265: FOR_TO
31266: IFFALSE 31389
// begin if i > 4 then
31268: LD_VAR 0 8
31272: PUSH
31273: LD_INT 4
31275: GREATER
31276: IFFALSE 31280
// break ;
31278: GO 31389
// x := personel [ i ] ;
31280: LD_ADDR_VAR 0 13
31284: PUSH
31285: LD_VAR 0 6
31289: PUSH
31290: LD_VAR 0 8
31294: ARRAY
31295: ST_TO_ADDR
// if x = - 1 then
31296: LD_VAR 0 13
31300: PUSH
31301: LD_INT 1
31303: NEG
31304: EQUAL
31305: IFFALSE 31309
// continue ;
31307: GO 31265
// PrepareHuman ( false , i , skill ) ;
31309: LD_INT 0
31311: PPUSH
31312: LD_VAR 0 8
31316: PPUSH
31317: LD_VAR 0 4
31321: PPUSH
31322: CALL_OW 380
// un := CreateHuman ;
31326: LD_ADDR_VAR 0 14
31330: PUSH
31331: CALL_OW 44
31335: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31336: LD_VAR 0 14
31340: PPUSH
31341: LD_VAR 0 1
31345: PPUSH
31346: CALL_OW 250
31350: PPUSH
31351: LD_VAR 0 1
31355: PPUSH
31356: CALL_OW 251
31360: PPUSH
31361: LD_INT 10
31363: PPUSH
31364: LD_INT 0
31366: PPUSH
31367: CALL_OW 50
// result := result ^ un ;
31371: LD_ADDR_VAR 0 7
31375: PUSH
31376: LD_VAR 0 7
31380: PUSH
31381: LD_VAR 0 14
31385: ADD
31386: ST_TO_ADDR
// end ;
31387: GO 31265
31389: POP
31390: POP
// end ; end ;
31391: LD_VAR 0 7
31395: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
31396: LD_INT 0
31398: PPUSH
31399: PPUSH
31400: PPUSH
31401: PPUSH
31402: PPUSH
31403: PPUSH
31404: PPUSH
31405: PPUSH
31406: PPUSH
31407: PPUSH
31408: PPUSH
31409: PPUSH
31410: PPUSH
31411: PPUSH
31412: PPUSH
31413: PPUSH
// result := false ;
31414: LD_ADDR_VAR 0 3
31418: PUSH
31419: LD_INT 0
31421: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
31422: LD_VAR 0 1
31426: NOT
31427: PUSH
31428: LD_VAR 0 1
31432: PPUSH
31433: CALL_OW 266
31437: PUSH
31438: LD_INT 32
31440: PUSH
31441: LD_INT 33
31443: PUSH
31444: EMPTY
31445: LIST
31446: LIST
31447: IN
31448: NOT
31449: OR
31450: IFFALSE 31454
// exit ;
31452: GO 32590
// nat := GetNation ( tower ) ;
31454: LD_ADDR_VAR 0 12
31458: PUSH
31459: LD_VAR 0 1
31463: PPUSH
31464: CALL_OW 248
31468: ST_TO_ADDR
// side := GetSide ( tower ) ;
31469: LD_ADDR_VAR 0 16
31473: PUSH
31474: LD_VAR 0 1
31478: PPUSH
31479: CALL_OW 255
31483: ST_TO_ADDR
// x := GetX ( tower ) ;
31484: LD_ADDR_VAR 0 10
31488: PUSH
31489: LD_VAR 0 1
31493: PPUSH
31494: CALL_OW 250
31498: ST_TO_ADDR
// y := GetY ( tower ) ;
31499: LD_ADDR_VAR 0 11
31503: PUSH
31504: LD_VAR 0 1
31508: PPUSH
31509: CALL_OW 251
31513: ST_TO_ADDR
// if not x or not y then
31514: LD_VAR 0 10
31518: NOT
31519: PUSH
31520: LD_VAR 0 11
31524: NOT
31525: OR
31526: IFFALSE 31530
// exit ;
31528: GO 32590
// weapon := 0 ;
31530: LD_ADDR_VAR 0 18
31534: PUSH
31535: LD_INT 0
31537: ST_TO_ADDR
// fac_list := [ ] ;
31538: LD_ADDR_VAR 0 17
31542: PUSH
31543: EMPTY
31544: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
31545: LD_ADDR_VAR 0 6
31549: PUSH
31550: LD_VAR 0 1
31554: PPUSH
31555: CALL_OW 274
31559: PPUSH
31560: LD_VAR 0 2
31564: PPUSH
31565: CALL 29168 0 2
31569: PPUSH
31570: LD_INT 30
31572: PUSH
31573: LD_INT 3
31575: PUSH
31576: EMPTY
31577: LIST
31578: LIST
31579: PPUSH
31580: CALL_OW 72
31584: ST_TO_ADDR
// if not factories then
31585: LD_VAR 0 6
31589: NOT
31590: IFFALSE 31594
// exit ;
31592: GO 32590
// for i in factories do
31594: LD_ADDR_VAR 0 8
31598: PUSH
31599: LD_VAR 0 6
31603: PUSH
31604: FOR_IN
31605: IFFALSE 31630
// fac_list := fac_list union AvailableWeaponList ( i ) ;
31607: LD_ADDR_VAR 0 17
31611: PUSH
31612: LD_VAR 0 17
31616: PUSH
31617: LD_VAR 0 8
31621: PPUSH
31622: CALL_OW 478
31626: UNION
31627: ST_TO_ADDR
31628: GO 31604
31630: POP
31631: POP
// if not fac_list then
31632: LD_VAR 0 17
31636: NOT
31637: IFFALSE 31641
// exit ;
31639: GO 32590
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
31641: LD_ADDR_VAR 0 5
31645: PUSH
31646: LD_INT 4
31648: PUSH
31649: LD_INT 5
31651: PUSH
31652: LD_INT 9
31654: PUSH
31655: LD_INT 10
31657: PUSH
31658: LD_INT 6
31660: PUSH
31661: LD_INT 7
31663: PUSH
31664: LD_INT 11
31666: PUSH
31667: EMPTY
31668: LIST
31669: LIST
31670: LIST
31671: LIST
31672: LIST
31673: LIST
31674: LIST
31675: PUSH
31676: LD_INT 27
31678: PUSH
31679: LD_INT 28
31681: PUSH
31682: LD_INT 26
31684: PUSH
31685: LD_INT 30
31687: PUSH
31688: EMPTY
31689: LIST
31690: LIST
31691: LIST
31692: LIST
31693: PUSH
31694: LD_INT 43
31696: PUSH
31697: LD_INT 44
31699: PUSH
31700: LD_INT 46
31702: PUSH
31703: LD_INT 45
31705: PUSH
31706: LD_INT 47
31708: PUSH
31709: LD_INT 49
31711: PUSH
31712: EMPTY
31713: LIST
31714: LIST
31715: LIST
31716: LIST
31717: LIST
31718: LIST
31719: PUSH
31720: EMPTY
31721: LIST
31722: LIST
31723: LIST
31724: PUSH
31725: LD_VAR 0 12
31729: ARRAY
31730: ST_TO_ADDR
// for i in list do
31731: LD_ADDR_VAR 0 8
31735: PUSH
31736: LD_VAR 0 5
31740: PUSH
31741: FOR_IN
31742: IFFALSE 31775
// if not i in fac_list then
31744: LD_VAR 0 8
31748: PUSH
31749: LD_VAR 0 17
31753: IN
31754: NOT
31755: IFFALSE 31773
// list := list diff i ;
31757: LD_ADDR_VAR 0 5
31761: PUSH
31762: LD_VAR 0 5
31766: PUSH
31767: LD_VAR 0 8
31771: DIFF
31772: ST_TO_ADDR
31773: GO 31741
31775: POP
31776: POP
// if not list then
31777: LD_VAR 0 5
31781: NOT
31782: IFFALSE 31786
// exit ;
31784: GO 32590
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
31786: LD_VAR 0 12
31790: PUSH
31791: LD_INT 3
31793: EQUAL
31794: PUSH
31795: LD_INT 49
31797: PUSH
31798: LD_VAR 0 5
31802: IN
31803: AND
31804: PUSH
31805: LD_INT 31
31807: PPUSH
31808: LD_VAR 0 16
31812: PPUSH
31813: CALL_OW 321
31817: PUSH
31818: LD_INT 2
31820: EQUAL
31821: AND
31822: IFFALSE 31882
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
31824: LD_INT 22
31826: PUSH
31827: LD_VAR 0 16
31831: PUSH
31832: EMPTY
31833: LIST
31834: LIST
31835: PUSH
31836: LD_INT 35
31838: PUSH
31839: LD_INT 49
31841: PUSH
31842: EMPTY
31843: LIST
31844: LIST
31845: PUSH
31846: LD_INT 91
31848: PUSH
31849: LD_VAR 0 1
31853: PUSH
31854: LD_INT 10
31856: PUSH
31857: EMPTY
31858: LIST
31859: LIST
31860: LIST
31861: PUSH
31862: EMPTY
31863: LIST
31864: LIST
31865: LIST
31866: PPUSH
31867: CALL_OW 69
31871: NOT
31872: IFFALSE 31882
// weapon := ru_time_lapser ;
31874: LD_ADDR_VAR 0 18
31878: PUSH
31879: LD_INT 49
31881: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
31882: LD_VAR 0 12
31886: PUSH
31887: LD_INT 1
31889: PUSH
31890: LD_INT 2
31892: PUSH
31893: EMPTY
31894: LIST
31895: LIST
31896: IN
31897: PUSH
31898: LD_INT 11
31900: PUSH
31901: LD_VAR 0 5
31905: IN
31906: PUSH
31907: LD_INT 30
31909: PUSH
31910: LD_VAR 0 5
31914: IN
31915: OR
31916: AND
31917: PUSH
31918: LD_INT 6
31920: PPUSH
31921: LD_VAR 0 16
31925: PPUSH
31926: CALL_OW 321
31930: PUSH
31931: LD_INT 2
31933: EQUAL
31934: AND
31935: IFFALSE 32100
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
31937: LD_INT 22
31939: PUSH
31940: LD_VAR 0 16
31944: PUSH
31945: EMPTY
31946: LIST
31947: LIST
31948: PUSH
31949: LD_INT 2
31951: PUSH
31952: LD_INT 35
31954: PUSH
31955: LD_INT 11
31957: PUSH
31958: EMPTY
31959: LIST
31960: LIST
31961: PUSH
31962: LD_INT 35
31964: PUSH
31965: LD_INT 30
31967: PUSH
31968: EMPTY
31969: LIST
31970: LIST
31971: PUSH
31972: EMPTY
31973: LIST
31974: LIST
31975: LIST
31976: PUSH
31977: LD_INT 91
31979: PUSH
31980: LD_VAR 0 1
31984: PUSH
31985: LD_INT 18
31987: PUSH
31988: EMPTY
31989: LIST
31990: LIST
31991: LIST
31992: PUSH
31993: EMPTY
31994: LIST
31995: LIST
31996: LIST
31997: PPUSH
31998: CALL_OW 69
32002: NOT
32003: PUSH
32004: LD_INT 22
32006: PUSH
32007: LD_VAR 0 16
32011: PUSH
32012: EMPTY
32013: LIST
32014: LIST
32015: PUSH
32016: LD_INT 2
32018: PUSH
32019: LD_INT 30
32021: PUSH
32022: LD_INT 32
32024: PUSH
32025: EMPTY
32026: LIST
32027: LIST
32028: PUSH
32029: LD_INT 30
32031: PUSH
32032: LD_INT 33
32034: PUSH
32035: EMPTY
32036: LIST
32037: LIST
32038: PUSH
32039: EMPTY
32040: LIST
32041: LIST
32042: LIST
32043: PUSH
32044: LD_INT 91
32046: PUSH
32047: LD_VAR 0 1
32051: PUSH
32052: LD_INT 12
32054: PUSH
32055: EMPTY
32056: LIST
32057: LIST
32058: LIST
32059: PUSH
32060: EMPTY
32061: LIST
32062: LIST
32063: LIST
32064: PUSH
32065: EMPTY
32066: LIST
32067: PPUSH
32068: CALL_OW 69
32072: PUSH
32073: LD_INT 2
32075: GREATER
32076: AND
32077: IFFALSE 32100
// weapon := [ us_radar , ar_radar ] [ nat ] ;
32079: LD_ADDR_VAR 0 18
32083: PUSH
32084: LD_INT 11
32086: PUSH
32087: LD_INT 30
32089: PUSH
32090: EMPTY
32091: LIST
32092: LIST
32093: PUSH
32094: LD_VAR 0 12
32098: ARRAY
32099: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
32100: LD_VAR 0 18
32104: NOT
32105: PUSH
32106: LD_INT 40
32108: PPUSH
32109: LD_VAR 0 16
32113: PPUSH
32114: CALL_OW 321
32118: PUSH
32119: LD_INT 2
32121: EQUAL
32122: AND
32123: PUSH
32124: LD_INT 7
32126: PUSH
32127: LD_VAR 0 5
32131: IN
32132: PUSH
32133: LD_INT 28
32135: PUSH
32136: LD_VAR 0 5
32140: IN
32141: OR
32142: PUSH
32143: LD_INT 45
32145: PUSH
32146: LD_VAR 0 5
32150: IN
32151: OR
32152: AND
32153: IFFALSE 32407
// begin hex := GetHexInfo ( x , y ) ;
32155: LD_ADDR_VAR 0 4
32159: PUSH
32160: LD_VAR 0 10
32164: PPUSH
32165: LD_VAR 0 11
32169: PPUSH
32170: CALL_OW 546
32174: ST_TO_ADDR
// if hex [ 1 ] then
32175: LD_VAR 0 4
32179: PUSH
32180: LD_INT 1
32182: ARRAY
32183: IFFALSE 32187
// exit ;
32185: GO 32590
// height := hex [ 2 ] ;
32187: LD_ADDR_VAR 0 15
32191: PUSH
32192: LD_VAR 0 4
32196: PUSH
32197: LD_INT 2
32199: ARRAY
32200: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
32201: LD_ADDR_VAR 0 14
32205: PUSH
32206: LD_INT 0
32208: PUSH
32209: LD_INT 2
32211: PUSH
32212: LD_INT 3
32214: PUSH
32215: LD_INT 5
32217: PUSH
32218: EMPTY
32219: LIST
32220: LIST
32221: LIST
32222: LIST
32223: ST_TO_ADDR
// for i in tmp do
32224: LD_ADDR_VAR 0 8
32228: PUSH
32229: LD_VAR 0 14
32233: PUSH
32234: FOR_IN
32235: IFFALSE 32405
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
32237: LD_ADDR_VAR 0 9
32241: PUSH
32242: LD_VAR 0 10
32246: PPUSH
32247: LD_VAR 0 8
32251: PPUSH
32252: LD_INT 5
32254: PPUSH
32255: CALL_OW 272
32259: PUSH
32260: LD_VAR 0 11
32264: PPUSH
32265: LD_VAR 0 8
32269: PPUSH
32270: LD_INT 5
32272: PPUSH
32273: CALL_OW 273
32277: PUSH
32278: EMPTY
32279: LIST
32280: LIST
32281: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
32282: LD_VAR 0 9
32286: PUSH
32287: LD_INT 1
32289: ARRAY
32290: PPUSH
32291: LD_VAR 0 9
32295: PUSH
32296: LD_INT 2
32298: ARRAY
32299: PPUSH
32300: CALL_OW 488
32304: IFFALSE 32403
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
32306: LD_ADDR_VAR 0 4
32310: PUSH
32311: LD_VAR 0 9
32315: PUSH
32316: LD_INT 1
32318: ARRAY
32319: PPUSH
32320: LD_VAR 0 9
32324: PUSH
32325: LD_INT 2
32327: ARRAY
32328: PPUSH
32329: CALL_OW 546
32333: ST_TO_ADDR
// if hex [ 1 ] then
32334: LD_VAR 0 4
32338: PUSH
32339: LD_INT 1
32341: ARRAY
32342: IFFALSE 32346
// continue ;
32344: GO 32234
// h := hex [ 2 ] ;
32346: LD_ADDR_VAR 0 13
32350: PUSH
32351: LD_VAR 0 4
32355: PUSH
32356: LD_INT 2
32358: ARRAY
32359: ST_TO_ADDR
// if h + 7 < height then
32360: LD_VAR 0 13
32364: PUSH
32365: LD_INT 7
32367: PLUS
32368: PUSH
32369: LD_VAR 0 15
32373: LESS
32374: IFFALSE 32403
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
32376: LD_ADDR_VAR 0 18
32380: PUSH
32381: LD_INT 7
32383: PUSH
32384: LD_INT 28
32386: PUSH
32387: LD_INT 45
32389: PUSH
32390: EMPTY
32391: LIST
32392: LIST
32393: LIST
32394: PUSH
32395: LD_VAR 0 12
32399: ARRAY
32400: ST_TO_ADDR
// break ;
32401: GO 32405
// end ; end ; end ;
32403: GO 32234
32405: POP
32406: POP
// end ; if not weapon then
32407: LD_VAR 0 18
32411: NOT
32412: IFFALSE 32472
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
32414: LD_ADDR_VAR 0 5
32418: PUSH
32419: LD_VAR 0 5
32423: PUSH
32424: LD_INT 11
32426: PUSH
32427: LD_INT 30
32429: PUSH
32430: LD_INT 49
32432: PUSH
32433: EMPTY
32434: LIST
32435: LIST
32436: LIST
32437: DIFF
32438: ST_TO_ADDR
// if not list then
32439: LD_VAR 0 5
32443: NOT
32444: IFFALSE 32448
// exit ;
32446: GO 32590
// weapon := list [ rand ( 1 , list ) ] ;
32448: LD_ADDR_VAR 0 18
32452: PUSH
32453: LD_VAR 0 5
32457: PUSH
32458: LD_INT 1
32460: PPUSH
32461: LD_VAR 0 5
32465: PPUSH
32466: CALL_OW 12
32470: ARRAY
32471: ST_TO_ADDR
// end ; if weapon then
32472: LD_VAR 0 18
32476: IFFALSE 32590
// begin tmp := CostOfWeapon ( weapon ) ;
32478: LD_ADDR_VAR 0 14
32482: PUSH
32483: LD_VAR 0 18
32487: PPUSH
32488: CALL_OW 451
32492: ST_TO_ADDR
// j := GetBase ( tower ) ;
32493: LD_ADDR_VAR 0 9
32497: PUSH
32498: LD_VAR 0 1
32502: PPUSH
32503: CALL_OW 274
32507: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
32508: LD_VAR 0 9
32512: PPUSH
32513: LD_INT 1
32515: PPUSH
32516: CALL_OW 275
32520: PUSH
32521: LD_VAR 0 14
32525: PUSH
32526: LD_INT 1
32528: ARRAY
32529: GREATEREQUAL
32530: PUSH
32531: LD_VAR 0 9
32535: PPUSH
32536: LD_INT 2
32538: PPUSH
32539: CALL_OW 275
32543: PUSH
32544: LD_VAR 0 14
32548: PUSH
32549: LD_INT 2
32551: ARRAY
32552: GREATEREQUAL
32553: AND
32554: PUSH
32555: LD_VAR 0 9
32559: PPUSH
32560: LD_INT 3
32562: PPUSH
32563: CALL_OW 275
32567: PUSH
32568: LD_VAR 0 14
32572: PUSH
32573: LD_INT 3
32575: ARRAY
32576: GREATEREQUAL
32577: AND
32578: IFFALSE 32590
// result := weapon ;
32580: LD_ADDR_VAR 0 3
32584: PUSH
32585: LD_VAR 0 18
32589: ST_TO_ADDR
// end ; end ;
32590: LD_VAR 0 3
32594: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
32595: LD_INT 0
32597: PPUSH
32598: PPUSH
// result := true ;
32599: LD_ADDR_VAR 0 3
32603: PUSH
32604: LD_INT 1
32606: ST_TO_ADDR
// if array1 = array2 then
32607: LD_VAR 0 1
32611: PUSH
32612: LD_VAR 0 2
32616: EQUAL
32617: IFFALSE 32677
// begin for i = 1 to array1 do
32619: LD_ADDR_VAR 0 4
32623: PUSH
32624: DOUBLE
32625: LD_INT 1
32627: DEC
32628: ST_TO_ADDR
32629: LD_VAR 0 1
32633: PUSH
32634: FOR_TO
32635: IFFALSE 32673
// if array1 [ i ] <> array2 [ i ] then
32637: LD_VAR 0 1
32641: PUSH
32642: LD_VAR 0 4
32646: ARRAY
32647: PUSH
32648: LD_VAR 0 2
32652: PUSH
32653: LD_VAR 0 4
32657: ARRAY
32658: NONEQUAL
32659: IFFALSE 32671
// begin result := false ;
32661: LD_ADDR_VAR 0 3
32665: PUSH
32666: LD_INT 0
32668: ST_TO_ADDR
// break ;
32669: GO 32673
// end ;
32671: GO 32634
32673: POP
32674: POP
// end else
32675: GO 32685
// result := false ;
32677: LD_ADDR_VAR 0 3
32681: PUSH
32682: LD_INT 0
32684: ST_TO_ADDR
// end ;
32685: LD_VAR 0 3
32689: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
32690: LD_INT 0
32692: PPUSH
32693: PPUSH
32694: PPUSH
// pom := GetBase ( fac ) ;
32695: LD_ADDR_VAR 0 5
32699: PUSH
32700: LD_VAR 0 1
32704: PPUSH
32705: CALL_OW 274
32709: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
32710: LD_ADDR_VAR 0 4
32714: PUSH
32715: LD_VAR 0 2
32719: PUSH
32720: LD_INT 1
32722: ARRAY
32723: PPUSH
32724: LD_VAR 0 2
32728: PUSH
32729: LD_INT 2
32731: ARRAY
32732: PPUSH
32733: LD_VAR 0 2
32737: PUSH
32738: LD_INT 3
32740: ARRAY
32741: PPUSH
32742: LD_VAR 0 2
32746: PUSH
32747: LD_INT 4
32749: ARRAY
32750: PPUSH
32751: CALL_OW 449
32755: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32756: LD_ADDR_VAR 0 3
32760: PUSH
32761: LD_VAR 0 5
32765: PPUSH
32766: LD_INT 1
32768: PPUSH
32769: CALL_OW 275
32773: PUSH
32774: LD_VAR 0 4
32778: PUSH
32779: LD_INT 1
32781: ARRAY
32782: GREATEREQUAL
32783: PUSH
32784: LD_VAR 0 5
32788: PPUSH
32789: LD_INT 2
32791: PPUSH
32792: CALL_OW 275
32796: PUSH
32797: LD_VAR 0 4
32801: PUSH
32802: LD_INT 2
32804: ARRAY
32805: GREATEREQUAL
32806: AND
32807: PUSH
32808: LD_VAR 0 5
32812: PPUSH
32813: LD_INT 3
32815: PPUSH
32816: CALL_OW 275
32820: PUSH
32821: LD_VAR 0 4
32825: PUSH
32826: LD_INT 3
32828: ARRAY
32829: GREATEREQUAL
32830: AND
32831: ST_TO_ADDR
// end ;
32832: LD_VAR 0 3
32836: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
32837: LD_INT 0
32839: PPUSH
32840: PPUSH
32841: PPUSH
32842: PPUSH
// pom := GetBase ( building ) ;
32843: LD_ADDR_VAR 0 3
32847: PUSH
32848: LD_VAR 0 1
32852: PPUSH
32853: CALL_OW 274
32857: ST_TO_ADDR
// if not pom then
32858: LD_VAR 0 3
32862: NOT
32863: IFFALSE 32867
// exit ;
32865: GO 33037
// btype := GetBType ( building ) ;
32867: LD_ADDR_VAR 0 5
32871: PUSH
32872: LD_VAR 0 1
32876: PPUSH
32877: CALL_OW 266
32881: ST_TO_ADDR
// if btype = b_armoury then
32882: LD_VAR 0 5
32886: PUSH
32887: LD_INT 4
32889: EQUAL
32890: IFFALSE 32900
// btype := b_barracks ;
32892: LD_ADDR_VAR 0 5
32896: PUSH
32897: LD_INT 5
32899: ST_TO_ADDR
// if btype = b_depot then
32900: LD_VAR 0 5
32904: PUSH
32905: LD_INT 0
32907: EQUAL
32908: IFFALSE 32918
// btype := b_warehouse ;
32910: LD_ADDR_VAR 0 5
32914: PUSH
32915: LD_INT 1
32917: ST_TO_ADDR
// if btype = b_workshop then
32918: LD_VAR 0 5
32922: PUSH
32923: LD_INT 2
32925: EQUAL
32926: IFFALSE 32936
// btype := b_factory ;
32928: LD_ADDR_VAR 0 5
32932: PUSH
32933: LD_INT 3
32935: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32936: LD_ADDR_VAR 0 4
32940: PUSH
32941: LD_VAR 0 5
32945: PPUSH
32946: LD_VAR 0 1
32950: PPUSH
32951: CALL_OW 248
32955: PPUSH
32956: CALL_OW 450
32960: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32961: LD_ADDR_VAR 0 2
32965: PUSH
32966: LD_VAR 0 3
32970: PPUSH
32971: LD_INT 1
32973: PPUSH
32974: CALL_OW 275
32978: PUSH
32979: LD_VAR 0 4
32983: PUSH
32984: LD_INT 1
32986: ARRAY
32987: GREATEREQUAL
32988: PUSH
32989: LD_VAR 0 3
32993: PPUSH
32994: LD_INT 2
32996: PPUSH
32997: CALL_OW 275
33001: PUSH
33002: LD_VAR 0 4
33006: PUSH
33007: LD_INT 2
33009: ARRAY
33010: GREATEREQUAL
33011: AND
33012: PUSH
33013: LD_VAR 0 3
33017: PPUSH
33018: LD_INT 3
33020: PPUSH
33021: CALL_OW 275
33025: PUSH
33026: LD_VAR 0 4
33030: PUSH
33031: LD_INT 3
33033: ARRAY
33034: GREATEREQUAL
33035: AND
33036: ST_TO_ADDR
// end ;
33037: LD_VAR 0 2
33041: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
33042: LD_INT 0
33044: PPUSH
33045: PPUSH
33046: PPUSH
// pom := GetBase ( building ) ;
33047: LD_ADDR_VAR 0 4
33051: PUSH
33052: LD_VAR 0 1
33056: PPUSH
33057: CALL_OW 274
33061: ST_TO_ADDR
// if not pom then
33062: LD_VAR 0 4
33066: NOT
33067: IFFALSE 33071
// exit ;
33069: GO 33172
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33071: LD_ADDR_VAR 0 5
33075: PUSH
33076: LD_VAR 0 2
33080: PPUSH
33081: LD_VAR 0 1
33085: PPUSH
33086: CALL_OW 248
33090: PPUSH
33091: CALL_OW 450
33095: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33096: LD_ADDR_VAR 0 3
33100: PUSH
33101: LD_VAR 0 4
33105: PPUSH
33106: LD_INT 1
33108: PPUSH
33109: CALL_OW 275
33113: PUSH
33114: LD_VAR 0 5
33118: PUSH
33119: LD_INT 1
33121: ARRAY
33122: GREATEREQUAL
33123: PUSH
33124: LD_VAR 0 4
33128: PPUSH
33129: LD_INT 2
33131: PPUSH
33132: CALL_OW 275
33136: PUSH
33137: LD_VAR 0 5
33141: PUSH
33142: LD_INT 2
33144: ARRAY
33145: GREATEREQUAL
33146: AND
33147: PUSH
33148: LD_VAR 0 4
33152: PPUSH
33153: LD_INT 3
33155: PPUSH
33156: CALL_OW 275
33160: PUSH
33161: LD_VAR 0 5
33165: PUSH
33166: LD_INT 3
33168: ARRAY
33169: GREATEREQUAL
33170: AND
33171: ST_TO_ADDR
// end ;
33172: LD_VAR 0 3
33176: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
33177: LD_INT 0
33179: PPUSH
33180: PPUSH
33181: PPUSH
33182: PPUSH
33183: PPUSH
33184: PPUSH
33185: PPUSH
33186: PPUSH
33187: PPUSH
33188: PPUSH
// result := false ;
33189: LD_ADDR_VAR 0 6
33193: PUSH
33194: LD_INT 0
33196: ST_TO_ADDR
// if not base or not btype or not x or not y then
33197: LD_VAR 0 1
33201: NOT
33202: PUSH
33203: LD_VAR 0 2
33207: NOT
33208: OR
33209: PUSH
33210: LD_VAR 0 3
33214: NOT
33215: OR
33216: PUSH
33217: LD_VAR 0 4
33221: NOT
33222: OR
33223: IFFALSE 33227
// exit ;
33225: GO 33836
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
33227: LD_ADDR_VAR 0 12
33231: PUSH
33232: LD_VAR 0 2
33236: PPUSH
33237: LD_VAR 0 3
33241: PPUSH
33242: LD_VAR 0 4
33246: PPUSH
33247: LD_VAR 0 5
33251: PPUSH
33252: LD_VAR 0 1
33256: PUSH
33257: LD_INT 1
33259: ARRAY
33260: PPUSH
33261: CALL_OW 248
33265: PPUSH
33266: LD_INT 0
33268: PPUSH
33269: CALL 34673 0 6
33273: ST_TO_ADDR
// if not hexes then
33274: LD_VAR 0 12
33278: NOT
33279: IFFALSE 33283
// exit ;
33281: GO 33836
// for i = 1 to hexes do
33283: LD_ADDR_VAR 0 7
33287: PUSH
33288: DOUBLE
33289: LD_INT 1
33291: DEC
33292: ST_TO_ADDR
33293: LD_VAR 0 12
33297: PUSH
33298: FOR_TO
33299: IFFALSE 33834
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33301: LD_ADDR_VAR 0 11
33305: PUSH
33306: LD_VAR 0 12
33310: PUSH
33311: LD_VAR 0 7
33315: ARRAY
33316: PUSH
33317: LD_INT 1
33319: ARRAY
33320: PPUSH
33321: LD_VAR 0 12
33325: PUSH
33326: LD_VAR 0 7
33330: ARRAY
33331: PUSH
33332: LD_INT 2
33334: ARRAY
33335: PPUSH
33336: CALL_OW 428
33340: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
33341: LD_VAR 0 12
33345: PUSH
33346: LD_VAR 0 7
33350: ARRAY
33351: PUSH
33352: LD_INT 1
33354: ARRAY
33355: PPUSH
33356: LD_VAR 0 12
33360: PUSH
33361: LD_VAR 0 7
33365: ARRAY
33366: PUSH
33367: LD_INT 2
33369: ARRAY
33370: PPUSH
33371: CALL_OW 351
33375: PUSH
33376: LD_VAR 0 12
33380: PUSH
33381: LD_VAR 0 7
33385: ARRAY
33386: PUSH
33387: LD_INT 1
33389: ARRAY
33390: PPUSH
33391: LD_VAR 0 12
33395: PUSH
33396: LD_VAR 0 7
33400: ARRAY
33401: PUSH
33402: LD_INT 2
33404: ARRAY
33405: PPUSH
33406: CALL_OW 488
33410: NOT
33411: OR
33412: PUSH
33413: LD_VAR 0 11
33417: PPUSH
33418: CALL_OW 247
33422: PUSH
33423: LD_INT 3
33425: EQUAL
33426: OR
33427: IFFALSE 33433
// exit ;
33429: POP
33430: POP
33431: GO 33836
// if not tmp or not tmp in base then
33433: LD_VAR 0 11
33437: NOT
33438: PUSH
33439: LD_VAR 0 11
33443: PUSH
33444: LD_VAR 0 1
33448: IN
33449: NOT
33450: OR
33451: IFFALSE 33455
// continue ;
33453: GO 33298
// result := true ;
33455: LD_ADDR_VAR 0 6
33459: PUSH
33460: LD_INT 1
33462: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33463: LD_ADDR_VAR 0 15
33467: PUSH
33468: LD_VAR 0 1
33472: PPUSH
33473: LD_INT 22
33475: PUSH
33476: LD_VAR 0 11
33480: PPUSH
33481: CALL_OW 255
33485: PUSH
33486: EMPTY
33487: LIST
33488: LIST
33489: PUSH
33490: LD_INT 2
33492: PUSH
33493: LD_INT 30
33495: PUSH
33496: LD_INT 0
33498: PUSH
33499: EMPTY
33500: LIST
33501: LIST
33502: PUSH
33503: LD_INT 30
33505: PUSH
33506: LD_INT 1
33508: PUSH
33509: EMPTY
33510: LIST
33511: LIST
33512: PUSH
33513: EMPTY
33514: LIST
33515: LIST
33516: LIST
33517: PUSH
33518: EMPTY
33519: LIST
33520: LIST
33521: PPUSH
33522: CALL_OW 72
33526: ST_TO_ADDR
// if dep then
33527: LD_VAR 0 15
33531: IFFALSE 33667
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
33533: LD_ADDR_VAR 0 14
33537: PUSH
33538: LD_VAR 0 15
33542: PUSH
33543: LD_INT 1
33545: ARRAY
33546: PPUSH
33547: CALL_OW 250
33551: PPUSH
33552: LD_VAR 0 15
33556: PUSH
33557: LD_INT 1
33559: ARRAY
33560: PPUSH
33561: CALL_OW 254
33565: PPUSH
33566: LD_INT 5
33568: PPUSH
33569: CALL_OW 272
33573: PUSH
33574: LD_VAR 0 15
33578: PUSH
33579: LD_INT 1
33581: ARRAY
33582: PPUSH
33583: CALL_OW 251
33587: PPUSH
33588: LD_VAR 0 15
33592: PUSH
33593: LD_INT 1
33595: ARRAY
33596: PPUSH
33597: CALL_OW 254
33601: PPUSH
33602: LD_INT 5
33604: PPUSH
33605: CALL_OW 273
33609: PUSH
33610: EMPTY
33611: LIST
33612: LIST
33613: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
33614: LD_VAR 0 14
33618: PUSH
33619: LD_INT 1
33621: ARRAY
33622: PPUSH
33623: LD_VAR 0 14
33627: PUSH
33628: LD_INT 2
33630: ARRAY
33631: PPUSH
33632: CALL_OW 488
33636: IFFALSE 33667
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
33638: LD_VAR 0 11
33642: PPUSH
33643: LD_VAR 0 14
33647: PUSH
33648: LD_INT 1
33650: ARRAY
33651: PPUSH
33652: LD_VAR 0 14
33656: PUSH
33657: LD_INT 2
33659: ARRAY
33660: PPUSH
33661: CALL_OW 111
// continue ;
33665: GO 33298
// end ; end ; r := GetDir ( tmp ) ;
33667: LD_ADDR_VAR 0 13
33671: PUSH
33672: LD_VAR 0 11
33676: PPUSH
33677: CALL_OW 254
33681: ST_TO_ADDR
// if r = 5 then
33682: LD_VAR 0 13
33686: PUSH
33687: LD_INT 5
33689: EQUAL
33690: IFFALSE 33700
// r := 0 ;
33692: LD_ADDR_VAR 0 13
33696: PUSH
33697: LD_INT 0
33699: ST_TO_ADDR
// for j = r to 5 do
33700: LD_ADDR_VAR 0 8
33704: PUSH
33705: DOUBLE
33706: LD_VAR 0 13
33710: DEC
33711: ST_TO_ADDR
33712: LD_INT 5
33714: PUSH
33715: FOR_TO
33716: IFFALSE 33830
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
33718: LD_ADDR_VAR 0 9
33722: PUSH
33723: LD_VAR 0 11
33727: PPUSH
33728: CALL_OW 250
33732: PPUSH
33733: LD_VAR 0 8
33737: PPUSH
33738: LD_INT 2
33740: PPUSH
33741: CALL_OW 272
33745: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
33746: LD_ADDR_VAR 0 10
33750: PUSH
33751: LD_VAR 0 11
33755: PPUSH
33756: CALL_OW 251
33760: PPUSH
33761: LD_VAR 0 8
33765: PPUSH
33766: LD_INT 2
33768: PPUSH
33769: CALL_OW 273
33773: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
33774: LD_VAR 0 9
33778: PPUSH
33779: LD_VAR 0 10
33783: PPUSH
33784: CALL_OW 488
33788: PUSH
33789: LD_VAR 0 9
33793: PPUSH
33794: LD_VAR 0 10
33798: PPUSH
33799: CALL_OW 428
33803: NOT
33804: AND
33805: IFFALSE 33828
// begin ComMoveXY ( tmp , _x , _y ) ;
33807: LD_VAR 0 11
33811: PPUSH
33812: LD_VAR 0 9
33816: PPUSH
33817: LD_VAR 0 10
33821: PPUSH
33822: CALL_OW 111
// break ;
33826: GO 33830
// end ; end ;
33828: GO 33715
33830: POP
33831: POP
// end ;
33832: GO 33298
33834: POP
33835: POP
// end ;
33836: LD_VAR 0 6
33840: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
33841: LD_INT 0
33843: PPUSH
33844: PPUSH
33845: PPUSH
33846: PPUSH
33847: PPUSH
33848: PPUSH
33849: PPUSH
33850: PPUSH
33851: PPUSH
33852: PPUSH
// result := false ;
33853: LD_ADDR_VAR 0 6
33857: PUSH
33858: LD_INT 0
33860: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
33861: LD_VAR 0 1
33865: NOT
33866: PUSH
33867: LD_VAR 0 1
33871: PPUSH
33872: CALL_OW 266
33876: PUSH
33877: LD_INT 0
33879: PUSH
33880: LD_INT 1
33882: PUSH
33883: EMPTY
33884: LIST
33885: LIST
33886: IN
33887: NOT
33888: OR
33889: PUSH
33890: LD_VAR 0 2
33894: NOT
33895: OR
33896: PUSH
33897: LD_VAR 0 5
33901: PUSH
33902: LD_INT 0
33904: PUSH
33905: LD_INT 1
33907: PUSH
33908: LD_INT 2
33910: PUSH
33911: LD_INT 3
33913: PUSH
33914: LD_INT 4
33916: PUSH
33917: LD_INT 5
33919: PUSH
33920: EMPTY
33921: LIST
33922: LIST
33923: LIST
33924: LIST
33925: LIST
33926: LIST
33927: IN
33928: NOT
33929: OR
33930: PUSH
33931: LD_VAR 0 3
33935: PPUSH
33936: LD_VAR 0 4
33940: PPUSH
33941: CALL_OW 488
33945: NOT
33946: OR
33947: IFFALSE 33951
// exit ;
33949: GO 34668
// pom := GetBase ( depot ) ;
33951: LD_ADDR_VAR 0 10
33955: PUSH
33956: LD_VAR 0 1
33960: PPUSH
33961: CALL_OW 274
33965: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
33966: LD_ADDR_VAR 0 11
33970: PUSH
33971: LD_VAR 0 2
33975: PPUSH
33976: LD_VAR 0 1
33980: PPUSH
33981: CALL_OW 248
33985: PPUSH
33986: CALL_OW 450
33990: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
33991: LD_VAR 0 10
33995: PPUSH
33996: LD_INT 1
33998: PPUSH
33999: CALL_OW 275
34003: PUSH
34004: LD_VAR 0 11
34008: PUSH
34009: LD_INT 1
34011: ARRAY
34012: GREATEREQUAL
34013: PUSH
34014: LD_VAR 0 10
34018: PPUSH
34019: LD_INT 2
34021: PPUSH
34022: CALL_OW 275
34026: PUSH
34027: LD_VAR 0 11
34031: PUSH
34032: LD_INT 2
34034: ARRAY
34035: GREATEREQUAL
34036: AND
34037: PUSH
34038: LD_VAR 0 10
34042: PPUSH
34043: LD_INT 3
34045: PPUSH
34046: CALL_OW 275
34050: PUSH
34051: LD_VAR 0 11
34055: PUSH
34056: LD_INT 3
34058: ARRAY
34059: GREATEREQUAL
34060: AND
34061: NOT
34062: IFFALSE 34066
// exit ;
34064: GO 34668
// if GetBType ( depot ) = b_depot then
34066: LD_VAR 0 1
34070: PPUSH
34071: CALL_OW 266
34075: PUSH
34076: LD_INT 0
34078: EQUAL
34079: IFFALSE 34091
// dist := 28 else
34081: LD_ADDR_VAR 0 14
34085: PUSH
34086: LD_INT 28
34088: ST_TO_ADDR
34089: GO 34099
// dist := 36 ;
34091: LD_ADDR_VAR 0 14
34095: PUSH
34096: LD_INT 36
34098: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
34099: LD_VAR 0 1
34103: PPUSH
34104: LD_VAR 0 3
34108: PPUSH
34109: LD_VAR 0 4
34113: PPUSH
34114: CALL_OW 297
34118: PUSH
34119: LD_VAR 0 14
34123: GREATER
34124: IFFALSE 34128
// exit ;
34126: GO 34668
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
34128: LD_ADDR_VAR 0 12
34132: PUSH
34133: LD_VAR 0 2
34137: PPUSH
34138: LD_VAR 0 3
34142: PPUSH
34143: LD_VAR 0 4
34147: PPUSH
34148: LD_VAR 0 5
34152: PPUSH
34153: LD_VAR 0 1
34157: PPUSH
34158: CALL_OW 248
34162: PPUSH
34163: LD_INT 0
34165: PPUSH
34166: CALL 34673 0 6
34170: ST_TO_ADDR
// if not hexes then
34171: LD_VAR 0 12
34175: NOT
34176: IFFALSE 34180
// exit ;
34178: GO 34668
// hex := GetHexInfo ( x , y ) ;
34180: LD_ADDR_VAR 0 15
34184: PUSH
34185: LD_VAR 0 3
34189: PPUSH
34190: LD_VAR 0 4
34194: PPUSH
34195: CALL_OW 546
34199: ST_TO_ADDR
// if hex [ 1 ] then
34200: LD_VAR 0 15
34204: PUSH
34205: LD_INT 1
34207: ARRAY
34208: IFFALSE 34212
// exit ;
34210: GO 34668
// height := hex [ 2 ] ;
34212: LD_ADDR_VAR 0 13
34216: PUSH
34217: LD_VAR 0 15
34221: PUSH
34222: LD_INT 2
34224: ARRAY
34225: ST_TO_ADDR
// for i = 1 to hexes do
34226: LD_ADDR_VAR 0 7
34230: PUSH
34231: DOUBLE
34232: LD_INT 1
34234: DEC
34235: ST_TO_ADDR
34236: LD_VAR 0 12
34240: PUSH
34241: FOR_TO
34242: IFFALSE 34572
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
34244: LD_VAR 0 12
34248: PUSH
34249: LD_VAR 0 7
34253: ARRAY
34254: PUSH
34255: LD_INT 1
34257: ARRAY
34258: PPUSH
34259: LD_VAR 0 12
34263: PUSH
34264: LD_VAR 0 7
34268: ARRAY
34269: PUSH
34270: LD_INT 2
34272: ARRAY
34273: PPUSH
34274: CALL_OW 488
34278: NOT
34279: PUSH
34280: LD_VAR 0 12
34284: PUSH
34285: LD_VAR 0 7
34289: ARRAY
34290: PUSH
34291: LD_INT 1
34293: ARRAY
34294: PPUSH
34295: LD_VAR 0 12
34299: PUSH
34300: LD_VAR 0 7
34304: ARRAY
34305: PUSH
34306: LD_INT 2
34308: ARRAY
34309: PPUSH
34310: CALL_OW 428
34314: PUSH
34315: LD_INT 0
34317: GREATER
34318: OR
34319: PUSH
34320: LD_VAR 0 12
34324: PUSH
34325: LD_VAR 0 7
34329: ARRAY
34330: PUSH
34331: LD_INT 1
34333: ARRAY
34334: PPUSH
34335: LD_VAR 0 12
34339: PUSH
34340: LD_VAR 0 7
34344: ARRAY
34345: PUSH
34346: LD_INT 2
34348: ARRAY
34349: PPUSH
34350: CALL_OW 351
34354: OR
34355: IFFALSE 34361
// exit ;
34357: POP
34358: POP
34359: GO 34668
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34361: LD_ADDR_VAR 0 8
34365: PUSH
34366: LD_VAR 0 12
34370: PUSH
34371: LD_VAR 0 7
34375: ARRAY
34376: PUSH
34377: LD_INT 1
34379: ARRAY
34380: PPUSH
34381: LD_VAR 0 12
34385: PUSH
34386: LD_VAR 0 7
34390: ARRAY
34391: PUSH
34392: LD_INT 2
34394: ARRAY
34395: PPUSH
34396: CALL_OW 546
34400: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
34401: LD_VAR 0 8
34405: PUSH
34406: LD_INT 1
34408: ARRAY
34409: PUSH
34410: LD_VAR 0 8
34414: PUSH
34415: LD_INT 2
34417: ARRAY
34418: PUSH
34419: LD_VAR 0 13
34423: PUSH
34424: LD_INT 2
34426: PLUS
34427: GREATER
34428: OR
34429: PUSH
34430: LD_VAR 0 8
34434: PUSH
34435: LD_INT 2
34437: ARRAY
34438: PUSH
34439: LD_VAR 0 13
34443: PUSH
34444: LD_INT 2
34446: MINUS
34447: LESS
34448: OR
34449: PUSH
34450: LD_VAR 0 8
34454: PUSH
34455: LD_INT 3
34457: ARRAY
34458: PUSH
34459: LD_INT 0
34461: PUSH
34462: LD_INT 8
34464: PUSH
34465: LD_INT 9
34467: PUSH
34468: LD_INT 10
34470: PUSH
34471: LD_INT 11
34473: PUSH
34474: LD_INT 12
34476: PUSH
34477: LD_INT 13
34479: PUSH
34480: LD_INT 16
34482: PUSH
34483: LD_INT 17
34485: PUSH
34486: LD_INT 18
34488: PUSH
34489: LD_INT 19
34491: PUSH
34492: LD_INT 20
34494: PUSH
34495: LD_INT 21
34497: PUSH
34498: EMPTY
34499: LIST
34500: LIST
34501: LIST
34502: LIST
34503: LIST
34504: LIST
34505: LIST
34506: LIST
34507: LIST
34508: LIST
34509: LIST
34510: LIST
34511: LIST
34512: IN
34513: NOT
34514: OR
34515: PUSH
34516: LD_VAR 0 8
34520: PUSH
34521: LD_INT 5
34523: ARRAY
34524: NOT
34525: OR
34526: PUSH
34527: LD_VAR 0 8
34531: PUSH
34532: LD_INT 6
34534: ARRAY
34535: PUSH
34536: LD_INT 1
34538: PUSH
34539: LD_INT 2
34541: PUSH
34542: LD_INT 7
34544: PUSH
34545: LD_INT 9
34547: PUSH
34548: LD_INT 10
34550: PUSH
34551: LD_INT 11
34553: PUSH
34554: EMPTY
34555: LIST
34556: LIST
34557: LIST
34558: LIST
34559: LIST
34560: LIST
34561: IN
34562: NOT
34563: OR
34564: IFFALSE 34570
// exit ;
34566: POP
34567: POP
34568: GO 34668
// end ;
34570: GO 34241
34572: POP
34573: POP
// side := GetSide ( depot ) ;
34574: LD_ADDR_VAR 0 9
34578: PUSH
34579: LD_VAR 0 1
34583: PPUSH
34584: CALL_OW 255
34588: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
34589: LD_VAR 0 9
34593: PPUSH
34594: LD_VAR 0 3
34598: PPUSH
34599: LD_VAR 0 4
34603: PPUSH
34604: LD_INT 20
34606: PPUSH
34607: CALL 27322 0 4
34611: PUSH
34612: LD_INT 4
34614: ARRAY
34615: IFFALSE 34619
// exit ;
34617: GO 34668
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
34619: LD_VAR 0 2
34623: PUSH
34624: LD_INT 29
34626: PUSH
34627: LD_INT 30
34629: PUSH
34630: EMPTY
34631: LIST
34632: LIST
34633: IN
34634: PUSH
34635: LD_VAR 0 3
34639: PPUSH
34640: LD_VAR 0 4
34644: PPUSH
34645: LD_VAR 0 9
34649: PPUSH
34650: CALL_OW 440
34654: NOT
34655: AND
34656: IFFALSE 34660
// exit ;
34658: GO 34668
// result := true ;
34660: LD_ADDR_VAR 0 6
34664: PUSH
34665: LD_INT 1
34667: ST_TO_ADDR
// end ;
34668: LD_VAR 0 6
34672: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
34673: LD_INT 0
34675: PPUSH
34676: PPUSH
34677: PPUSH
34678: PPUSH
34679: PPUSH
34680: PPUSH
34681: PPUSH
34682: PPUSH
34683: PPUSH
34684: PPUSH
34685: PPUSH
34686: PPUSH
34687: PPUSH
34688: PPUSH
34689: PPUSH
34690: PPUSH
34691: PPUSH
34692: PPUSH
34693: PPUSH
34694: PPUSH
34695: PPUSH
34696: PPUSH
34697: PPUSH
34698: PPUSH
34699: PPUSH
34700: PPUSH
34701: PPUSH
34702: PPUSH
34703: PPUSH
34704: PPUSH
34705: PPUSH
34706: PPUSH
34707: PPUSH
34708: PPUSH
34709: PPUSH
34710: PPUSH
34711: PPUSH
34712: PPUSH
34713: PPUSH
34714: PPUSH
34715: PPUSH
34716: PPUSH
34717: PPUSH
34718: PPUSH
34719: PPUSH
34720: PPUSH
34721: PPUSH
34722: PPUSH
34723: PPUSH
34724: PPUSH
34725: PPUSH
34726: PPUSH
34727: PPUSH
34728: PPUSH
34729: PPUSH
34730: PPUSH
34731: PPUSH
34732: PPUSH
// result = [ ] ;
34733: LD_ADDR_VAR 0 7
34737: PUSH
34738: EMPTY
34739: ST_TO_ADDR
// temp_list = [ ] ;
34740: LD_ADDR_VAR 0 9
34744: PUSH
34745: EMPTY
34746: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
34747: LD_VAR 0 4
34751: PUSH
34752: LD_INT 0
34754: PUSH
34755: LD_INT 1
34757: PUSH
34758: LD_INT 2
34760: PUSH
34761: LD_INT 3
34763: PUSH
34764: LD_INT 4
34766: PUSH
34767: LD_INT 5
34769: PUSH
34770: EMPTY
34771: LIST
34772: LIST
34773: LIST
34774: LIST
34775: LIST
34776: LIST
34777: IN
34778: NOT
34779: PUSH
34780: LD_VAR 0 1
34784: PUSH
34785: LD_INT 0
34787: PUSH
34788: LD_INT 1
34790: PUSH
34791: EMPTY
34792: LIST
34793: LIST
34794: IN
34795: PUSH
34796: LD_VAR 0 5
34800: PUSH
34801: LD_INT 1
34803: PUSH
34804: LD_INT 2
34806: PUSH
34807: LD_INT 3
34809: PUSH
34810: EMPTY
34811: LIST
34812: LIST
34813: LIST
34814: IN
34815: NOT
34816: AND
34817: OR
34818: IFFALSE 34822
// exit ;
34820: GO 53213
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
34822: LD_VAR 0 1
34826: PUSH
34827: LD_INT 6
34829: PUSH
34830: LD_INT 7
34832: PUSH
34833: LD_INT 8
34835: PUSH
34836: LD_INT 13
34838: PUSH
34839: LD_INT 12
34841: PUSH
34842: LD_INT 15
34844: PUSH
34845: LD_INT 11
34847: PUSH
34848: LD_INT 14
34850: PUSH
34851: LD_INT 10
34853: PUSH
34854: EMPTY
34855: LIST
34856: LIST
34857: LIST
34858: LIST
34859: LIST
34860: LIST
34861: LIST
34862: LIST
34863: LIST
34864: IN
34865: IFFALSE 34875
// btype = b_lab ;
34867: LD_ADDR_VAR 0 1
34871: PUSH
34872: LD_INT 6
34874: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
34875: LD_VAR 0 6
34879: PUSH
34880: LD_INT 0
34882: PUSH
34883: LD_INT 1
34885: PUSH
34886: LD_INT 2
34888: PUSH
34889: EMPTY
34890: LIST
34891: LIST
34892: LIST
34893: IN
34894: NOT
34895: PUSH
34896: LD_VAR 0 1
34900: PUSH
34901: LD_INT 0
34903: PUSH
34904: LD_INT 1
34906: PUSH
34907: LD_INT 2
34909: PUSH
34910: LD_INT 3
34912: PUSH
34913: LD_INT 6
34915: PUSH
34916: LD_INT 36
34918: PUSH
34919: LD_INT 4
34921: PUSH
34922: LD_INT 5
34924: PUSH
34925: LD_INT 31
34927: PUSH
34928: LD_INT 32
34930: PUSH
34931: LD_INT 33
34933: PUSH
34934: EMPTY
34935: LIST
34936: LIST
34937: LIST
34938: LIST
34939: LIST
34940: LIST
34941: LIST
34942: LIST
34943: LIST
34944: LIST
34945: LIST
34946: IN
34947: NOT
34948: PUSH
34949: LD_VAR 0 6
34953: PUSH
34954: LD_INT 1
34956: EQUAL
34957: AND
34958: OR
34959: PUSH
34960: LD_VAR 0 1
34964: PUSH
34965: LD_INT 2
34967: PUSH
34968: LD_INT 3
34970: PUSH
34971: EMPTY
34972: LIST
34973: LIST
34974: IN
34975: NOT
34976: PUSH
34977: LD_VAR 0 6
34981: PUSH
34982: LD_INT 2
34984: EQUAL
34985: AND
34986: OR
34987: IFFALSE 34997
// mode = 0 ;
34989: LD_ADDR_VAR 0 6
34993: PUSH
34994: LD_INT 0
34996: ST_TO_ADDR
// case mode of 0 :
34997: LD_VAR 0 6
35001: PUSH
35002: LD_INT 0
35004: DOUBLE
35005: EQUAL
35006: IFTRUE 35010
35008: GO 46463
35010: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35011: LD_ADDR_VAR 0 11
35015: PUSH
35016: LD_INT 0
35018: PUSH
35019: LD_INT 0
35021: PUSH
35022: EMPTY
35023: LIST
35024: LIST
35025: PUSH
35026: LD_INT 0
35028: PUSH
35029: LD_INT 1
35031: NEG
35032: PUSH
35033: EMPTY
35034: LIST
35035: LIST
35036: PUSH
35037: LD_INT 1
35039: PUSH
35040: LD_INT 0
35042: PUSH
35043: EMPTY
35044: LIST
35045: LIST
35046: PUSH
35047: LD_INT 1
35049: PUSH
35050: LD_INT 1
35052: PUSH
35053: EMPTY
35054: LIST
35055: LIST
35056: PUSH
35057: LD_INT 0
35059: PUSH
35060: LD_INT 1
35062: PUSH
35063: EMPTY
35064: LIST
35065: LIST
35066: PUSH
35067: LD_INT 1
35069: NEG
35070: PUSH
35071: LD_INT 0
35073: PUSH
35074: EMPTY
35075: LIST
35076: LIST
35077: PUSH
35078: LD_INT 1
35080: NEG
35081: PUSH
35082: LD_INT 1
35084: NEG
35085: PUSH
35086: EMPTY
35087: LIST
35088: LIST
35089: PUSH
35090: LD_INT 1
35092: NEG
35093: PUSH
35094: LD_INT 2
35096: NEG
35097: PUSH
35098: EMPTY
35099: LIST
35100: LIST
35101: PUSH
35102: LD_INT 0
35104: PUSH
35105: LD_INT 2
35107: NEG
35108: PUSH
35109: EMPTY
35110: LIST
35111: LIST
35112: PUSH
35113: LD_INT 1
35115: PUSH
35116: LD_INT 1
35118: NEG
35119: PUSH
35120: EMPTY
35121: LIST
35122: LIST
35123: PUSH
35124: LD_INT 1
35126: PUSH
35127: LD_INT 2
35129: PUSH
35130: EMPTY
35131: LIST
35132: LIST
35133: PUSH
35134: LD_INT 0
35136: PUSH
35137: LD_INT 2
35139: PUSH
35140: EMPTY
35141: LIST
35142: LIST
35143: PUSH
35144: LD_INT 1
35146: NEG
35147: PUSH
35148: LD_INT 1
35150: PUSH
35151: EMPTY
35152: LIST
35153: LIST
35154: PUSH
35155: LD_INT 1
35157: PUSH
35158: LD_INT 3
35160: PUSH
35161: EMPTY
35162: LIST
35163: LIST
35164: PUSH
35165: LD_INT 0
35167: PUSH
35168: LD_INT 3
35170: PUSH
35171: EMPTY
35172: LIST
35173: LIST
35174: PUSH
35175: LD_INT 1
35177: NEG
35178: PUSH
35179: LD_INT 2
35181: PUSH
35182: EMPTY
35183: LIST
35184: LIST
35185: PUSH
35186: EMPTY
35187: LIST
35188: LIST
35189: LIST
35190: LIST
35191: LIST
35192: LIST
35193: LIST
35194: LIST
35195: LIST
35196: LIST
35197: LIST
35198: LIST
35199: LIST
35200: LIST
35201: LIST
35202: LIST
35203: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35204: LD_ADDR_VAR 0 12
35208: PUSH
35209: LD_INT 0
35211: PUSH
35212: LD_INT 0
35214: PUSH
35215: EMPTY
35216: LIST
35217: LIST
35218: PUSH
35219: LD_INT 0
35221: PUSH
35222: LD_INT 1
35224: NEG
35225: PUSH
35226: EMPTY
35227: LIST
35228: LIST
35229: PUSH
35230: LD_INT 1
35232: PUSH
35233: LD_INT 0
35235: PUSH
35236: EMPTY
35237: LIST
35238: LIST
35239: PUSH
35240: LD_INT 1
35242: PUSH
35243: LD_INT 1
35245: PUSH
35246: EMPTY
35247: LIST
35248: LIST
35249: PUSH
35250: LD_INT 0
35252: PUSH
35253: LD_INT 1
35255: PUSH
35256: EMPTY
35257: LIST
35258: LIST
35259: PUSH
35260: LD_INT 1
35262: NEG
35263: PUSH
35264: LD_INT 0
35266: PUSH
35267: EMPTY
35268: LIST
35269: LIST
35270: PUSH
35271: LD_INT 1
35273: NEG
35274: PUSH
35275: LD_INT 1
35277: NEG
35278: PUSH
35279: EMPTY
35280: LIST
35281: LIST
35282: PUSH
35283: LD_INT 1
35285: PUSH
35286: LD_INT 1
35288: NEG
35289: PUSH
35290: EMPTY
35291: LIST
35292: LIST
35293: PUSH
35294: LD_INT 2
35296: PUSH
35297: LD_INT 0
35299: PUSH
35300: EMPTY
35301: LIST
35302: LIST
35303: PUSH
35304: LD_INT 2
35306: PUSH
35307: LD_INT 1
35309: PUSH
35310: EMPTY
35311: LIST
35312: LIST
35313: PUSH
35314: LD_INT 1
35316: NEG
35317: PUSH
35318: LD_INT 1
35320: PUSH
35321: EMPTY
35322: LIST
35323: LIST
35324: PUSH
35325: LD_INT 2
35327: NEG
35328: PUSH
35329: LD_INT 0
35331: PUSH
35332: EMPTY
35333: LIST
35334: LIST
35335: PUSH
35336: LD_INT 2
35338: NEG
35339: PUSH
35340: LD_INT 1
35342: NEG
35343: PUSH
35344: EMPTY
35345: LIST
35346: LIST
35347: PUSH
35348: LD_INT 2
35350: NEG
35351: PUSH
35352: LD_INT 1
35354: PUSH
35355: EMPTY
35356: LIST
35357: LIST
35358: PUSH
35359: LD_INT 3
35361: NEG
35362: PUSH
35363: LD_INT 0
35365: PUSH
35366: EMPTY
35367: LIST
35368: LIST
35369: PUSH
35370: LD_INT 3
35372: NEG
35373: PUSH
35374: LD_INT 1
35376: NEG
35377: PUSH
35378: EMPTY
35379: LIST
35380: LIST
35381: PUSH
35382: EMPTY
35383: LIST
35384: LIST
35385: LIST
35386: LIST
35387: LIST
35388: LIST
35389: LIST
35390: LIST
35391: LIST
35392: LIST
35393: LIST
35394: LIST
35395: LIST
35396: LIST
35397: LIST
35398: LIST
35399: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35400: LD_ADDR_VAR 0 13
35404: PUSH
35405: LD_INT 0
35407: PUSH
35408: LD_INT 0
35410: PUSH
35411: EMPTY
35412: LIST
35413: LIST
35414: PUSH
35415: LD_INT 0
35417: PUSH
35418: LD_INT 1
35420: NEG
35421: PUSH
35422: EMPTY
35423: LIST
35424: LIST
35425: PUSH
35426: LD_INT 1
35428: PUSH
35429: LD_INT 0
35431: PUSH
35432: EMPTY
35433: LIST
35434: LIST
35435: PUSH
35436: LD_INT 1
35438: PUSH
35439: LD_INT 1
35441: PUSH
35442: EMPTY
35443: LIST
35444: LIST
35445: PUSH
35446: LD_INT 0
35448: PUSH
35449: LD_INT 1
35451: PUSH
35452: EMPTY
35453: LIST
35454: LIST
35455: PUSH
35456: LD_INT 1
35458: NEG
35459: PUSH
35460: LD_INT 0
35462: PUSH
35463: EMPTY
35464: LIST
35465: LIST
35466: PUSH
35467: LD_INT 1
35469: NEG
35470: PUSH
35471: LD_INT 1
35473: NEG
35474: PUSH
35475: EMPTY
35476: LIST
35477: LIST
35478: PUSH
35479: LD_INT 1
35481: NEG
35482: PUSH
35483: LD_INT 2
35485: NEG
35486: PUSH
35487: EMPTY
35488: LIST
35489: LIST
35490: PUSH
35491: LD_INT 2
35493: PUSH
35494: LD_INT 1
35496: PUSH
35497: EMPTY
35498: LIST
35499: LIST
35500: PUSH
35501: LD_INT 2
35503: PUSH
35504: LD_INT 2
35506: PUSH
35507: EMPTY
35508: LIST
35509: LIST
35510: PUSH
35511: LD_INT 1
35513: PUSH
35514: LD_INT 2
35516: PUSH
35517: EMPTY
35518: LIST
35519: LIST
35520: PUSH
35521: LD_INT 2
35523: NEG
35524: PUSH
35525: LD_INT 1
35527: NEG
35528: PUSH
35529: EMPTY
35530: LIST
35531: LIST
35532: PUSH
35533: LD_INT 2
35535: NEG
35536: PUSH
35537: LD_INT 2
35539: NEG
35540: PUSH
35541: EMPTY
35542: LIST
35543: LIST
35544: PUSH
35545: LD_INT 2
35547: NEG
35548: PUSH
35549: LD_INT 3
35551: NEG
35552: PUSH
35553: EMPTY
35554: LIST
35555: LIST
35556: PUSH
35557: LD_INT 3
35559: NEG
35560: PUSH
35561: LD_INT 2
35563: NEG
35564: PUSH
35565: EMPTY
35566: LIST
35567: LIST
35568: PUSH
35569: LD_INT 3
35571: NEG
35572: PUSH
35573: LD_INT 3
35575: NEG
35576: PUSH
35577: EMPTY
35578: LIST
35579: LIST
35580: PUSH
35581: EMPTY
35582: LIST
35583: LIST
35584: LIST
35585: LIST
35586: LIST
35587: LIST
35588: LIST
35589: LIST
35590: LIST
35591: LIST
35592: LIST
35593: LIST
35594: LIST
35595: LIST
35596: LIST
35597: LIST
35598: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35599: LD_ADDR_VAR 0 14
35603: PUSH
35604: LD_INT 0
35606: PUSH
35607: LD_INT 0
35609: PUSH
35610: EMPTY
35611: LIST
35612: LIST
35613: PUSH
35614: LD_INT 0
35616: PUSH
35617: LD_INT 1
35619: NEG
35620: PUSH
35621: EMPTY
35622: LIST
35623: LIST
35624: PUSH
35625: LD_INT 1
35627: PUSH
35628: LD_INT 0
35630: PUSH
35631: EMPTY
35632: LIST
35633: LIST
35634: PUSH
35635: LD_INT 1
35637: PUSH
35638: LD_INT 1
35640: PUSH
35641: EMPTY
35642: LIST
35643: LIST
35644: PUSH
35645: LD_INT 0
35647: PUSH
35648: LD_INT 1
35650: PUSH
35651: EMPTY
35652: LIST
35653: LIST
35654: PUSH
35655: LD_INT 1
35657: NEG
35658: PUSH
35659: LD_INT 0
35661: PUSH
35662: EMPTY
35663: LIST
35664: LIST
35665: PUSH
35666: LD_INT 1
35668: NEG
35669: PUSH
35670: LD_INT 1
35672: NEG
35673: PUSH
35674: EMPTY
35675: LIST
35676: LIST
35677: PUSH
35678: LD_INT 1
35680: NEG
35681: PUSH
35682: LD_INT 2
35684: NEG
35685: PUSH
35686: EMPTY
35687: LIST
35688: LIST
35689: PUSH
35690: LD_INT 0
35692: PUSH
35693: LD_INT 2
35695: NEG
35696: PUSH
35697: EMPTY
35698: LIST
35699: LIST
35700: PUSH
35701: LD_INT 1
35703: PUSH
35704: LD_INT 1
35706: NEG
35707: PUSH
35708: EMPTY
35709: LIST
35710: LIST
35711: PUSH
35712: LD_INT 1
35714: PUSH
35715: LD_INT 2
35717: PUSH
35718: EMPTY
35719: LIST
35720: LIST
35721: PUSH
35722: LD_INT 0
35724: PUSH
35725: LD_INT 2
35727: PUSH
35728: EMPTY
35729: LIST
35730: LIST
35731: PUSH
35732: LD_INT 1
35734: NEG
35735: PUSH
35736: LD_INT 1
35738: PUSH
35739: EMPTY
35740: LIST
35741: LIST
35742: PUSH
35743: LD_INT 1
35745: NEG
35746: PUSH
35747: LD_INT 3
35749: NEG
35750: PUSH
35751: EMPTY
35752: LIST
35753: LIST
35754: PUSH
35755: LD_INT 0
35757: PUSH
35758: LD_INT 3
35760: NEG
35761: PUSH
35762: EMPTY
35763: LIST
35764: LIST
35765: PUSH
35766: LD_INT 1
35768: PUSH
35769: LD_INT 2
35771: NEG
35772: PUSH
35773: EMPTY
35774: LIST
35775: LIST
35776: PUSH
35777: EMPTY
35778: LIST
35779: LIST
35780: LIST
35781: LIST
35782: LIST
35783: LIST
35784: LIST
35785: LIST
35786: LIST
35787: LIST
35788: LIST
35789: LIST
35790: LIST
35791: LIST
35792: LIST
35793: LIST
35794: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35795: LD_ADDR_VAR 0 15
35799: PUSH
35800: LD_INT 0
35802: PUSH
35803: LD_INT 0
35805: PUSH
35806: EMPTY
35807: LIST
35808: LIST
35809: PUSH
35810: LD_INT 0
35812: PUSH
35813: LD_INT 1
35815: NEG
35816: PUSH
35817: EMPTY
35818: LIST
35819: LIST
35820: PUSH
35821: LD_INT 1
35823: PUSH
35824: LD_INT 0
35826: PUSH
35827: EMPTY
35828: LIST
35829: LIST
35830: PUSH
35831: LD_INT 1
35833: PUSH
35834: LD_INT 1
35836: PUSH
35837: EMPTY
35838: LIST
35839: LIST
35840: PUSH
35841: LD_INT 0
35843: PUSH
35844: LD_INT 1
35846: PUSH
35847: EMPTY
35848: LIST
35849: LIST
35850: PUSH
35851: LD_INT 1
35853: NEG
35854: PUSH
35855: LD_INT 0
35857: PUSH
35858: EMPTY
35859: LIST
35860: LIST
35861: PUSH
35862: LD_INT 1
35864: NEG
35865: PUSH
35866: LD_INT 1
35868: NEG
35869: PUSH
35870: EMPTY
35871: LIST
35872: LIST
35873: PUSH
35874: LD_INT 1
35876: PUSH
35877: LD_INT 1
35879: NEG
35880: PUSH
35881: EMPTY
35882: LIST
35883: LIST
35884: PUSH
35885: LD_INT 2
35887: PUSH
35888: LD_INT 0
35890: PUSH
35891: EMPTY
35892: LIST
35893: LIST
35894: PUSH
35895: LD_INT 2
35897: PUSH
35898: LD_INT 1
35900: PUSH
35901: EMPTY
35902: LIST
35903: LIST
35904: PUSH
35905: LD_INT 1
35907: NEG
35908: PUSH
35909: LD_INT 1
35911: PUSH
35912: EMPTY
35913: LIST
35914: LIST
35915: PUSH
35916: LD_INT 2
35918: NEG
35919: PUSH
35920: LD_INT 0
35922: PUSH
35923: EMPTY
35924: LIST
35925: LIST
35926: PUSH
35927: LD_INT 2
35929: NEG
35930: PUSH
35931: LD_INT 1
35933: NEG
35934: PUSH
35935: EMPTY
35936: LIST
35937: LIST
35938: PUSH
35939: LD_INT 2
35941: PUSH
35942: LD_INT 1
35944: NEG
35945: PUSH
35946: EMPTY
35947: LIST
35948: LIST
35949: PUSH
35950: LD_INT 3
35952: PUSH
35953: LD_INT 0
35955: PUSH
35956: EMPTY
35957: LIST
35958: LIST
35959: PUSH
35960: LD_INT 3
35962: PUSH
35963: LD_INT 1
35965: PUSH
35966: EMPTY
35967: LIST
35968: LIST
35969: PUSH
35970: EMPTY
35971: LIST
35972: LIST
35973: LIST
35974: LIST
35975: LIST
35976: LIST
35977: LIST
35978: LIST
35979: LIST
35980: LIST
35981: LIST
35982: LIST
35983: LIST
35984: LIST
35985: LIST
35986: LIST
35987: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35988: LD_ADDR_VAR 0 16
35992: PUSH
35993: LD_INT 0
35995: PUSH
35996: LD_INT 0
35998: PUSH
35999: EMPTY
36000: LIST
36001: LIST
36002: PUSH
36003: LD_INT 0
36005: PUSH
36006: LD_INT 1
36008: NEG
36009: PUSH
36010: EMPTY
36011: LIST
36012: LIST
36013: PUSH
36014: LD_INT 1
36016: PUSH
36017: LD_INT 0
36019: PUSH
36020: EMPTY
36021: LIST
36022: LIST
36023: PUSH
36024: LD_INT 1
36026: PUSH
36027: LD_INT 1
36029: PUSH
36030: EMPTY
36031: LIST
36032: LIST
36033: PUSH
36034: LD_INT 0
36036: PUSH
36037: LD_INT 1
36039: PUSH
36040: EMPTY
36041: LIST
36042: LIST
36043: PUSH
36044: LD_INT 1
36046: NEG
36047: PUSH
36048: LD_INT 0
36050: PUSH
36051: EMPTY
36052: LIST
36053: LIST
36054: PUSH
36055: LD_INT 1
36057: NEG
36058: PUSH
36059: LD_INT 1
36061: NEG
36062: PUSH
36063: EMPTY
36064: LIST
36065: LIST
36066: PUSH
36067: LD_INT 1
36069: NEG
36070: PUSH
36071: LD_INT 2
36073: NEG
36074: PUSH
36075: EMPTY
36076: LIST
36077: LIST
36078: PUSH
36079: LD_INT 2
36081: PUSH
36082: LD_INT 1
36084: PUSH
36085: EMPTY
36086: LIST
36087: LIST
36088: PUSH
36089: LD_INT 2
36091: PUSH
36092: LD_INT 2
36094: PUSH
36095: EMPTY
36096: LIST
36097: LIST
36098: PUSH
36099: LD_INT 1
36101: PUSH
36102: LD_INT 2
36104: PUSH
36105: EMPTY
36106: LIST
36107: LIST
36108: PUSH
36109: LD_INT 2
36111: NEG
36112: PUSH
36113: LD_INT 1
36115: NEG
36116: PUSH
36117: EMPTY
36118: LIST
36119: LIST
36120: PUSH
36121: LD_INT 2
36123: NEG
36124: PUSH
36125: LD_INT 2
36127: NEG
36128: PUSH
36129: EMPTY
36130: LIST
36131: LIST
36132: PUSH
36133: LD_INT 3
36135: PUSH
36136: LD_INT 2
36138: PUSH
36139: EMPTY
36140: LIST
36141: LIST
36142: PUSH
36143: LD_INT 3
36145: PUSH
36146: LD_INT 3
36148: PUSH
36149: EMPTY
36150: LIST
36151: LIST
36152: PUSH
36153: LD_INT 2
36155: PUSH
36156: LD_INT 3
36158: PUSH
36159: EMPTY
36160: LIST
36161: LIST
36162: PUSH
36163: EMPTY
36164: LIST
36165: LIST
36166: LIST
36167: LIST
36168: LIST
36169: LIST
36170: LIST
36171: LIST
36172: LIST
36173: LIST
36174: LIST
36175: LIST
36176: LIST
36177: LIST
36178: LIST
36179: LIST
36180: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36181: LD_ADDR_VAR 0 17
36185: PUSH
36186: LD_INT 0
36188: PUSH
36189: LD_INT 0
36191: PUSH
36192: EMPTY
36193: LIST
36194: LIST
36195: PUSH
36196: LD_INT 0
36198: PUSH
36199: LD_INT 1
36201: NEG
36202: PUSH
36203: EMPTY
36204: LIST
36205: LIST
36206: PUSH
36207: LD_INT 1
36209: PUSH
36210: LD_INT 0
36212: PUSH
36213: EMPTY
36214: LIST
36215: LIST
36216: PUSH
36217: LD_INT 1
36219: PUSH
36220: LD_INT 1
36222: PUSH
36223: EMPTY
36224: LIST
36225: LIST
36226: PUSH
36227: LD_INT 0
36229: PUSH
36230: LD_INT 1
36232: PUSH
36233: EMPTY
36234: LIST
36235: LIST
36236: PUSH
36237: LD_INT 1
36239: NEG
36240: PUSH
36241: LD_INT 0
36243: PUSH
36244: EMPTY
36245: LIST
36246: LIST
36247: PUSH
36248: LD_INT 1
36250: NEG
36251: PUSH
36252: LD_INT 1
36254: NEG
36255: PUSH
36256: EMPTY
36257: LIST
36258: LIST
36259: PUSH
36260: LD_INT 1
36262: NEG
36263: PUSH
36264: LD_INT 2
36266: NEG
36267: PUSH
36268: EMPTY
36269: LIST
36270: LIST
36271: PUSH
36272: LD_INT 0
36274: PUSH
36275: LD_INT 2
36277: NEG
36278: PUSH
36279: EMPTY
36280: LIST
36281: LIST
36282: PUSH
36283: LD_INT 1
36285: PUSH
36286: LD_INT 1
36288: NEG
36289: PUSH
36290: EMPTY
36291: LIST
36292: LIST
36293: PUSH
36294: LD_INT 2
36296: PUSH
36297: LD_INT 0
36299: PUSH
36300: EMPTY
36301: LIST
36302: LIST
36303: PUSH
36304: LD_INT 2
36306: PUSH
36307: LD_INT 1
36309: PUSH
36310: EMPTY
36311: LIST
36312: LIST
36313: PUSH
36314: LD_INT 2
36316: PUSH
36317: LD_INT 2
36319: PUSH
36320: EMPTY
36321: LIST
36322: LIST
36323: PUSH
36324: LD_INT 1
36326: PUSH
36327: LD_INT 2
36329: PUSH
36330: EMPTY
36331: LIST
36332: LIST
36333: PUSH
36334: LD_INT 0
36336: PUSH
36337: LD_INT 2
36339: PUSH
36340: EMPTY
36341: LIST
36342: LIST
36343: PUSH
36344: LD_INT 1
36346: NEG
36347: PUSH
36348: LD_INT 1
36350: PUSH
36351: EMPTY
36352: LIST
36353: LIST
36354: PUSH
36355: LD_INT 2
36357: NEG
36358: PUSH
36359: LD_INT 0
36361: PUSH
36362: EMPTY
36363: LIST
36364: LIST
36365: PUSH
36366: LD_INT 2
36368: NEG
36369: PUSH
36370: LD_INT 1
36372: NEG
36373: PUSH
36374: EMPTY
36375: LIST
36376: LIST
36377: PUSH
36378: LD_INT 2
36380: NEG
36381: PUSH
36382: LD_INT 2
36384: NEG
36385: PUSH
36386: EMPTY
36387: LIST
36388: LIST
36389: PUSH
36390: EMPTY
36391: LIST
36392: LIST
36393: LIST
36394: LIST
36395: LIST
36396: LIST
36397: LIST
36398: LIST
36399: LIST
36400: LIST
36401: LIST
36402: LIST
36403: LIST
36404: LIST
36405: LIST
36406: LIST
36407: LIST
36408: LIST
36409: LIST
36410: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36411: LD_ADDR_VAR 0 18
36415: PUSH
36416: LD_INT 0
36418: PUSH
36419: LD_INT 0
36421: PUSH
36422: EMPTY
36423: LIST
36424: LIST
36425: PUSH
36426: LD_INT 0
36428: PUSH
36429: LD_INT 1
36431: NEG
36432: PUSH
36433: EMPTY
36434: LIST
36435: LIST
36436: PUSH
36437: LD_INT 1
36439: PUSH
36440: LD_INT 0
36442: PUSH
36443: EMPTY
36444: LIST
36445: LIST
36446: PUSH
36447: LD_INT 1
36449: PUSH
36450: LD_INT 1
36452: PUSH
36453: EMPTY
36454: LIST
36455: LIST
36456: PUSH
36457: LD_INT 0
36459: PUSH
36460: LD_INT 1
36462: PUSH
36463: EMPTY
36464: LIST
36465: LIST
36466: PUSH
36467: LD_INT 1
36469: NEG
36470: PUSH
36471: LD_INT 0
36473: PUSH
36474: EMPTY
36475: LIST
36476: LIST
36477: PUSH
36478: LD_INT 1
36480: NEG
36481: PUSH
36482: LD_INT 1
36484: NEG
36485: PUSH
36486: EMPTY
36487: LIST
36488: LIST
36489: PUSH
36490: LD_INT 1
36492: NEG
36493: PUSH
36494: LD_INT 2
36496: NEG
36497: PUSH
36498: EMPTY
36499: LIST
36500: LIST
36501: PUSH
36502: LD_INT 0
36504: PUSH
36505: LD_INT 2
36507: NEG
36508: PUSH
36509: EMPTY
36510: LIST
36511: LIST
36512: PUSH
36513: LD_INT 1
36515: PUSH
36516: LD_INT 1
36518: NEG
36519: PUSH
36520: EMPTY
36521: LIST
36522: LIST
36523: PUSH
36524: LD_INT 2
36526: PUSH
36527: LD_INT 0
36529: PUSH
36530: EMPTY
36531: LIST
36532: LIST
36533: PUSH
36534: LD_INT 2
36536: PUSH
36537: LD_INT 1
36539: PUSH
36540: EMPTY
36541: LIST
36542: LIST
36543: PUSH
36544: LD_INT 2
36546: PUSH
36547: LD_INT 2
36549: PUSH
36550: EMPTY
36551: LIST
36552: LIST
36553: PUSH
36554: LD_INT 1
36556: PUSH
36557: LD_INT 2
36559: PUSH
36560: EMPTY
36561: LIST
36562: LIST
36563: PUSH
36564: LD_INT 0
36566: PUSH
36567: LD_INT 2
36569: PUSH
36570: EMPTY
36571: LIST
36572: LIST
36573: PUSH
36574: LD_INT 1
36576: NEG
36577: PUSH
36578: LD_INT 1
36580: PUSH
36581: EMPTY
36582: LIST
36583: LIST
36584: PUSH
36585: LD_INT 2
36587: NEG
36588: PUSH
36589: LD_INT 0
36591: PUSH
36592: EMPTY
36593: LIST
36594: LIST
36595: PUSH
36596: LD_INT 2
36598: NEG
36599: PUSH
36600: LD_INT 1
36602: NEG
36603: PUSH
36604: EMPTY
36605: LIST
36606: LIST
36607: PUSH
36608: LD_INT 2
36610: NEG
36611: PUSH
36612: LD_INT 2
36614: NEG
36615: PUSH
36616: EMPTY
36617: LIST
36618: LIST
36619: PUSH
36620: EMPTY
36621: LIST
36622: LIST
36623: LIST
36624: LIST
36625: LIST
36626: LIST
36627: LIST
36628: LIST
36629: LIST
36630: LIST
36631: LIST
36632: LIST
36633: LIST
36634: LIST
36635: LIST
36636: LIST
36637: LIST
36638: LIST
36639: LIST
36640: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36641: LD_ADDR_VAR 0 19
36645: PUSH
36646: LD_INT 0
36648: PUSH
36649: LD_INT 0
36651: PUSH
36652: EMPTY
36653: LIST
36654: LIST
36655: PUSH
36656: LD_INT 0
36658: PUSH
36659: LD_INT 1
36661: NEG
36662: PUSH
36663: EMPTY
36664: LIST
36665: LIST
36666: PUSH
36667: LD_INT 1
36669: PUSH
36670: LD_INT 0
36672: PUSH
36673: EMPTY
36674: LIST
36675: LIST
36676: PUSH
36677: LD_INT 1
36679: PUSH
36680: LD_INT 1
36682: PUSH
36683: EMPTY
36684: LIST
36685: LIST
36686: PUSH
36687: LD_INT 0
36689: PUSH
36690: LD_INT 1
36692: PUSH
36693: EMPTY
36694: LIST
36695: LIST
36696: PUSH
36697: LD_INT 1
36699: NEG
36700: PUSH
36701: LD_INT 0
36703: PUSH
36704: EMPTY
36705: LIST
36706: LIST
36707: PUSH
36708: LD_INT 1
36710: NEG
36711: PUSH
36712: LD_INT 1
36714: NEG
36715: PUSH
36716: EMPTY
36717: LIST
36718: LIST
36719: PUSH
36720: LD_INT 1
36722: NEG
36723: PUSH
36724: LD_INT 2
36726: NEG
36727: PUSH
36728: EMPTY
36729: LIST
36730: LIST
36731: PUSH
36732: LD_INT 0
36734: PUSH
36735: LD_INT 2
36737: NEG
36738: PUSH
36739: EMPTY
36740: LIST
36741: LIST
36742: PUSH
36743: LD_INT 1
36745: PUSH
36746: LD_INT 1
36748: NEG
36749: PUSH
36750: EMPTY
36751: LIST
36752: LIST
36753: PUSH
36754: LD_INT 2
36756: PUSH
36757: LD_INT 0
36759: PUSH
36760: EMPTY
36761: LIST
36762: LIST
36763: PUSH
36764: LD_INT 2
36766: PUSH
36767: LD_INT 1
36769: PUSH
36770: EMPTY
36771: LIST
36772: LIST
36773: PUSH
36774: LD_INT 2
36776: PUSH
36777: LD_INT 2
36779: PUSH
36780: EMPTY
36781: LIST
36782: LIST
36783: PUSH
36784: LD_INT 1
36786: PUSH
36787: LD_INT 2
36789: PUSH
36790: EMPTY
36791: LIST
36792: LIST
36793: PUSH
36794: LD_INT 0
36796: PUSH
36797: LD_INT 2
36799: PUSH
36800: EMPTY
36801: LIST
36802: LIST
36803: PUSH
36804: LD_INT 1
36806: NEG
36807: PUSH
36808: LD_INT 1
36810: PUSH
36811: EMPTY
36812: LIST
36813: LIST
36814: PUSH
36815: LD_INT 2
36817: NEG
36818: PUSH
36819: LD_INT 0
36821: PUSH
36822: EMPTY
36823: LIST
36824: LIST
36825: PUSH
36826: LD_INT 2
36828: NEG
36829: PUSH
36830: LD_INT 1
36832: NEG
36833: PUSH
36834: EMPTY
36835: LIST
36836: LIST
36837: PUSH
36838: LD_INT 2
36840: NEG
36841: PUSH
36842: LD_INT 2
36844: NEG
36845: PUSH
36846: EMPTY
36847: LIST
36848: LIST
36849: PUSH
36850: EMPTY
36851: LIST
36852: LIST
36853: LIST
36854: LIST
36855: LIST
36856: LIST
36857: LIST
36858: LIST
36859: LIST
36860: LIST
36861: LIST
36862: LIST
36863: LIST
36864: LIST
36865: LIST
36866: LIST
36867: LIST
36868: LIST
36869: LIST
36870: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36871: LD_ADDR_VAR 0 20
36875: PUSH
36876: LD_INT 0
36878: PUSH
36879: LD_INT 0
36881: PUSH
36882: EMPTY
36883: LIST
36884: LIST
36885: PUSH
36886: LD_INT 0
36888: PUSH
36889: LD_INT 1
36891: NEG
36892: PUSH
36893: EMPTY
36894: LIST
36895: LIST
36896: PUSH
36897: LD_INT 1
36899: PUSH
36900: LD_INT 0
36902: PUSH
36903: EMPTY
36904: LIST
36905: LIST
36906: PUSH
36907: LD_INT 1
36909: PUSH
36910: LD_INT 1
36912: PUSH
36913: EMPTY
36914: LIST
36915: LIST
36916: PUSH
36917: LD_INT 0
36919: PUSH
36920: LD_INT 1
36922: PUSH
36923: EMPTY
36924: LIST
36925: LIST
36926: PUSH
36927: LD_INT 1
36929: NEG
36930: PUSH
36931: LD_INT 0
36933: PUSH
36934: EMPTY
36935: LIST
36936: LIST
36937: PUSH
36938: LD_INT 1
36940: NEG
36941: PUSH
36942: LD_INT 1
36944: NEG
36945: PUSH
36946: EMPTY
36947: LIST
36948: LIST
36949: PUSH
36950: LD_INT 1
36952: NEG
36953: PUSH
36954: LD_INT 2
36956: NEG
36957: PUSH
36958: EMPTY
36959: LIST
36960: LIST
36961: PUSH
36962: LD_INT 0
36964: PUSH
36965: LD_INT 2
36967: NEG
36968: PUSH
36969: EMPTY
36970: LIST
36971: LIST
36972: PUSH
36973: LD_INT 1
36975: PUSH
36976: LD_INT 1
36978: NEG
36979: PUSH
36980: EMPTY
36981: LIST
36982: LIST
36983: PUSH
36984: LD_INT 2
36986: PUSH
36987: LD_INT 0
36989: PUSH
36990: EMPTY
36991: LIST
36992: LIST
36993: PUSH
36994: LD_INT 2
36996: PUSH
36997: LD_INT 1
36999: PUSH
37000: EMPTY
37001: LIST
37002: LIST
37003: PUSH
37004: LD_INT 2
37006: PUSH
37007: LD_INT 2
37009: PUSH
37010: EMPTY
37011: LIST
37012: LIST
37013: PUSH
37014: LD_INT 1
37016: PUSH
37017: LD_INT 2
37019: PUSH
37020: EMPTY
37021: LIST
37022: LIST
37023: PUSH
37024: LD_INT 0
37026: PUSH
37027: LD_INT 2
37029: PUSH
37030: EMPTY
37031: LIST
37032: LIST
37033: PUSH
37034: LD_INT 1
37036: NEG
37037: PUSH
37038: LD_INT 1
37040: PUSH
37041: EMPTY
37042: LIST
37043: LIST
37044: PUSH
37045: LD_INT 2
37047: NEG
37048: PUSH
37049: LD_INT 0
37051: PUSH
37052: EMPTY
37053: LIST
37054: LIST
37055: PUSH
37056: LD_INT 2
37058: NEG
37059: PUSH
37060: LD_INT 1
37062: NEG
37063: PUSH
37064: EMPTY
37065: LIST
37066: LIST
37067: PUSH
37068: LD_INT 2
37070: NEG
37071: PUSH
37072: LD_INT 2
37074: NEG
37075: PUSH
37076: EMPTY
37077: LIST
37078: LIST
37079: PUSH
37080: EMPTY
37081: LIST
37082: LIST
37083: LIST
37084: LIST
37085: LIST
37086: LIST
37087: LIST
37088: LIST
37089: LIST
37090: LIST
37091: LIST
37092: LIST
37093: LIST
37094: LIST
37095: LIST
37096: LIST
37097: LIST
37098: LIST
37099: LIST
37100: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37101: LD_ADDR_VAR 0 21
37105: PUSH
37106: LD_INT 0
37108: PUSH
37109: LD_INT 0
37111: PUSH
37112: EMPTY
37113: LIST
37114: LIST
37115: PUSH
37116: LD_INT 0
37118: PUSH
37119: LD_INT 1
37121: NEG
37122: PUSH
37123: EMPTY
37124: LIST
37125: LIST
37126: PUSH
37127: LD_INT 1
37129: PUSH
37130: LD_INT 0
37132: PUSH
37133: EMPTY
37134: LIST
37135: LIST
37136: PUSH
37137: LD_INT 1
37139: PUSH
37140: LD_INT 1
37142: PUSH
37143: EMPTY
37144: LIST
37145: LIST
37146: PUSH
37147: LD_INT 0
37149: PUSH
37150: LD_INT 1
37152: PUSH
37153: EMPTY
37154: LIST
37155: LIST
37156: PUSH
37157: LD_INT 1
37159: NEG
37160: PUSH
37161: LD_INT 0
37163: PUSH
37164: EMPTY
37165: LIST
37166: LIST
37167: PUSH
37168: LD_INT 1
37170: NEG
37171: PUSH
37172: LD_INT 1
37174: NEG
37175: PUSH
37176: EMPTY
37177: LIST
37178: LIST
37179: PUSH
37180: LD_INT 1
37182: NEG
37183: PUSH
37184: LD_INT 2
37186: NEG
37187: PUSH
37188: EMPTY
37189: LIST
37190: LIST
37191: PUSH
37192: LD_INT 0
37194: PUSH
37195: LD_INT 2
37197: NEG
37198: PUSH
37199: EMPTY
37200: LIST
37201: LIST
37202: PUSH
37203: LD_INT 1
37205: PUSH
37206: LD_INT 1
37208: NEG
37209: PUSH
37210: EMPTY
37211: LIST
37212: LIST
37213: PUSH
37214: LD_INT 2
37216: PUSH
37217: LD_INT 0
37219: PUSH
37220: EMPTY
37221: LIST
37222: LIST
37223: PUSH
37224: LD_INT 2
37226: PUSH
37227: LD_INT 1
37229: PUSH
37230: EMPTY
37231: LIST
37232: LIST
37233: PUSH
37234: LD_INT 2
37236: PUSH
37237: LD_INT 2
37239: PUSH
37240: EMPTY
37241: LIST
37242: LIST
37243: PUSH
37244: LD_INT 1
37246: PUSH
37247: LD_INT 2
37249: PUSH
37250: EMPTY
37251: LIST
37252: LIST
37253: PUSH
37254: LD_INT 0
37256: PUSH
37257: LD_INT 2
37259: PUSH
37260: EMPTY
37261: LIST
37262: LIST
37263: PUSH
37264: LD_INT 1
37266: NEG
37267: PUSH
37268: LD_INT 1
37270: PUSH
37271: EMPTY
37272: LIST
37273: LIST
37274: PUSH
37275: LD_INT 2
37277: NEG
37278: PUSH
37279: LD_INT 0
37281: PUSH
37282: EMPTY
37283: LIST
37284: LIST
37285: PUSH
37286: LD_INT 2
37288: NEG
37289: PUSH
37290: LD_INT 1
37292: NEG
37293: PUSH
37294: EMPTY
37295: LIST
37296: LIST
37297: PUSH
37298: LD_INT 2
37300: NEG
37301: PUSH
37302: LD_INT 2
37304: NEG
37305: PUSH
37306: EMPTY
37307: LIST
37308: LIST
37309: PUSH
37310: EMPTY
37311: LIST
37312: LIST
37313: LIST
37314: LIST
37315: LIST
37316: LIST
37317: LIST
37318: LIST
37319: LIST
37320: LIST
37321: LIST
37322: LIST
37323: LIST
37324: LIST
37325: LIST
37326: LIST
37327: LIST
37328: LIST
37329: LIST
37330: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37331: LD_ADDR_VAR 0 22
37335: PUSH
37336: LD_INT 0
37338: PUSH
37339: LD_INT 0
37341: PUSH
37342: EMPTY
37343: LIST
37344: LIST
37345: PUSH
37346: LD_INT 0
37348: PUSH
37349: LD_INT 1
37351: NEG
37352: PUSH
37353: EMPTY
37354: LIST
37355: LIST
37356: PUSH
37357: LD_INT 1
37359: PUSH
37360: LD_INT 0
37362: PUSH
37363: EMPTY
37364: LIST
37365: LIST
37366: PUSH
37367: LD_INT 1
37369: PUSH
37370: LD_INT 1
37372: PUSH
37373: EMPTY
37374: LIST
37375: LIST
37376: PUSH
37377: LD_INT 0
37379: PUSH
37380: LD_INT 1
37382: PUSH
37383: EMPTY
37384: LIST
37385: LIST
37386: PUSH
37387: LD_INT 1
37389: NEG
37390: PUSH
37391: LD_INT 0
37393: PUSH
37394: EMPTY
37395: LIST
37396: LIST
37397: PUSH
37398: LD_INT 1
37400: NEG
37401: PUSH
37402: LD_INT 1
37404: NEG
37405: PUSH
37406: EMPTY
37407: LIST
37408: LIST
37409: PUSH
37410: LD_INT 1
37412: NEG
37413: PUSH
37414: LD_INT 2
37416: NEG
37417: PUSH
37418: EMPTY
37419: LIST
37420: LIST
37421: PUSH
37422: LD_INT 0
37424: PUSH
37425: LD_INT 2
37427: NEG
37428: PUSH
37429: EMPTY
37430: LIST
37431: LIST
37432: PUSH
37433: LD_INT 1
37435: PUSH
37436: LD_INT 1
37438: NEG
37439: PUSH
37440: EMPTY
37441: LIST
37442: LIST
37443: PUSH
37444: LD_INT 2
37446: PUSH
37447: LD_INT 0
37449: PUSH
37450: EMPTY
37451: LIST
37452: LIST
37453: PUSH
37454: LD_INT 2
37456: PUSH
37457: LD_INT 1
37459: PUSH
37460: EMPTY
37461: LIST
37462: LIST
37463: PUSH
37464: LD_INT 2
37466: PUSH
37467: LD_INT 2
37469: PUSH
37470: EMPTY
37471: LIST
37472: LIST
37473: PUSH
37474: LD_INT 1
37476: PUSH
37477: LD_INT 2
37479: PUSH
37480: EMPTY
37481: LIST
37482: LIST
37483: PUSH
37484: LD_INT 0
37486: PUSH
37487: LD_INT 2
37489: PUSH
37490: EMPTY
37491: LIST
37492: LIST
37493: PUSH
37494: LD_INT 1
37496: NEG
37497: PUSH
37498: LD_INT 1
37500: PUSH
37501: EMPTY
37502: LIST
37503: LIST
37504: PUSH
37505: LD_INT 2
37507: NEG
37508: PUSH
37509: LD_INT 0
37511: PUSH
37512: EMPTY
37513: LIST
37514: LIST
37515: PUSH
37516: LD_INT 2
37518: NEG
37519: PUSH
37520: LD_INT 1
37522: NEG
37523: PUSH
37524: EMPTY
37525: LIST
37526: LIST
37527: PUSH
37528: LD_INT 2
37530: NEG
37531: PUSH
37532: LD_INT 2
37534: NEG
37535: PUSH
37536: EMPTY
37537: LIST
37538: LIST
37539: PUSH
37540: EMPTY
37541: LIST
37542: LIST
37543: LIST
37544: LIST
37545: LIST
37546: LIST
37547: LIST
37548: LIST
37549: LIST
37550: LIST
37551: LIST
37552: LIST
37553: LIST
37554: LIST
37555: LIST
37556: LIST
37557: LIST
37558: LIST
37559: LIST
37560: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
37561: LD_ADDR_VAR 0 23
37565: PUSH
37566: LD_INT 0
37568: PUSH
37569: LD_INT 0
37571: PUSH
37572: EMPTY
37573: LIST
37574: LIST
37575: PUSH
37576: LD_INT 0
37578: PUSH
37579: LD_INT 1
37581: NEG
37582: PUSH
37583: EMPTY
37584: LIST
37585: LIST
37586: PUSH
37587: LD_INT 1
37589: PUSH
37590: LD_INT 0
37592: PUSH
37593: EMPTY
37594: LIST
37595: LIST
37596: PUSH
37597: LD_INT 1
37599: PUSH
37600: LD_INT 1
37602: PUSH
37603: EMPTY
37604: LIST
37605: LIST
37606: PUSH
37607: LD_INT 0
37609: PUSH
37610: LD_INT 1
37612: PUSH
37613: EMPTY
37614: LIST
37615: LIST
37616: PUSH
37617: LD_INT 1
37619: NEG
37620: PUSH
37621: LD_INT 0
37623: PUSH
37624: EMPTY
37625: LIST
37626: LIST
37627: PUSH
37628: LD_INT 1
37630: NEG
37631: PUSH
37632: LD_INT 1
37634: NEG
37635: PUSH
37636: EMPTY
37637: LIST
37638: LIST
37639: PUSH
37640: LD_INT 1
37642: NEG
37643: PUSH
37644: LD_INT 2
37646: NEG
37647: PUSH
37648: EMPTY
37649: LIST
37650: LIST
37651: PUSH
37652: LD_INT 0
37654: PUSH
37655: LD_INT 2
37657: NEG
37658: PUSH
37659: EMPTY
37660: LIST
37661: LIST
37662: PUSH
37663: LD_INT 1
37665: PUSH
37666: LD_INT 1
37668: NEG
37669: PUSH
37670: EMPTY
37671: LIST
37672: LIST
37673: PUSH
37674: LD_INT 2
37676: PUSH
37677: LD_INT 0
37679: PUSH
37680: EMPTY
37681: LIST
37682: LIST
37683: PUSH
37684: LD_INT 2
37686: PUSH
37687: LD_INT 1
37689: PUSH
37690: EMPTY
37691: LIST
37692: LIST
37693: PUSH
37694: LD_INT 2
37696: PUSH
37697: LD_INT 2
37699: PUSH
37700: EMPTY
37701: LIST
37702: LIST
37703: PUSH
37704: LD_INT 1
37706: PUSH
37707: LD_INT 2
37709: PUSH
37710: EMPTY
37711: LIST
37712: LIST
37713: PUSH
37714: LD_INT 0
37716: PUSH
37717: LD_INT 2
37719: PUSH
37720: EMPTY
37721: LIST
37722: LIST
37723: PUSH
37724: LD_INT 1
37726: NEG
37727: PUSH
37728: LD_INT 1
37730: PUSH
37731: EMPTY
37732: LIST
37733: LIST
37734: PUSH
37735: LD_INT 2
37737: NEG
37738: PUSH
37739: LD_INT 0
37741: PUSH
37742: EMPTY
37743: LIST
37744: LIST
37745: PUSH
37746: LD_INT 2
37748: NEG
37749: PUSH
37750: LD_INT 1
37752: NEG
37753: PUSH
37754: EMPTY
37755: LIST
37756: LIST
37757: PUSH
37758: LD_INT 2
37760: NEG
37761: PUSH
37762: LD_INT 2
37764: NEG
37765: PUSH
37766: EMPTY
37767: LIST
37768: LIST
37769: PUSH
37770: LD_INT 2
37772: NEG
37773: PUSH
37774: LD_INT 3
37776: NEG
37777: PUSH
37778: EMPTY
37779: LIST
37780: LIST
37781: PUSH
37782: LD_INT 1
37784: NEG
37785: PUSH
37786: LD_INT 3
37788: NEG
37789: PUSH
37790: EMPTY
37791: LIST
37792: LIST
37793: PUSH
37794: LD_INT 1
37796: PUSH
37797: LD_INT 2
37799: NEG
37800: PUSH
37801: EMPTY
37802: LIST
37803: LIST
37804: PUSH
37805: LD_INT 2
37807: PUSH
37808: LD_INT 1
37810: NEG
37811: PUSH
37812: EMPTY
37813: LIST
37814: LIST
37815: PUSH
37816: EMPTY
37817: LIST
37818: LIST
37819: LIST
37820: LIST
37821: LIST
37822: LIST
37823: LIST
37824: LIST
37825: LIST
37826: LIST
37827: LIST
37828: LIST
37829: LIST
37830: LIST
37831: LIST
37832: LIST
37833: LIST
37834: LIST
37835: LIST
37836: LIST
37837: LIST
37838: LIST
37839: LIST
37840: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
37841: LD_ADDR_VAR 0 24
37845: PUSH
37846: LD_INT 0
37848: PUSH
37849: LD_INT 0
37851: PUSH
37852: EMPTY
37853: LIST
37854: LIST
37855: PUSH
37856: LD_INT 0
37858: PUSH
37859: LD_INT 1
37861: NEG
37862: PUSH
37863: EMPTY
37864: LIST
37865: LIST
37866: PUSH
37867: LD_INT 1
37869: PUSH
37870: LD_INT 0
37872: PUSH
37873: EMPTY
37874: LIST
37875: LIST
37876: PUSH
37877: LD_INT 1
37879: PUSH
37880: LD_INT 1
37882: PUSH
37883: EMPTY
37884: LIST
37885: LIST
37886: PUSH
37887: LD_INT 0
37889: PUSH
37890: LD_INT 1
37892: PUSH
37893: EMPTY
37894: LIST
37895: LIST
37896: PUSH
37897: LD_INT 1
37899: NEG
37900: PUSH
37901: LD_INT 0
37903: PUSH
37904: EMPTY
37905: LIST
37906: LIST
37907: PUSH
37908: LD_INT 1
37910: NEG
37911: PUSH
37912: LD_INT 1
37914: NEG
37915: PUSH
37916: EMPTY
37917: LIST
37918: LIST
37919: PUSH
37920: LD_INT 1
37922: NEG
37923: PUSH
37924: LD_INT 2
37926: NEG
37927: PUSH
37928: EMPTY
37929: LIST
37930: LIST
37931: PUSH
37932: LD_INT 0
37934: PUSH
37935: LD_INT 2
37937: NEG
37938: PUSH
37939: EMPTY
37940: LIST
37941: LIST
37942: PUSH
37943: LD_INT 1
37945: PUSH
37946: LD_INT 1
37948: NEG
37949: PUSH
37950: EMPTY
37951: LIST
37952: LIST
37953: PUSH
37954: LD_INT 2
37956: PUSH
37957: LD_INT 0
37959: PUSH
37960: EMPTY
37961: LIST
37962: LIST
37963: PUSH
37964: LD_INT 2
37966: PUSH
37967: LD_INT 1
37969: PUSH
37970: EMPTY
37971: LIST
37972: LIST
37973: PUSH
37974: LD_INT 2
37976: PUSH
37977: LD_INT 2
37979: PUSH
37980: EMPTY
37981: LIST
37982: LIST
37983: PUSH
37984: LD_INT 1
37986: PUSH
37987: LD_INT 2
37989: PUSH
37990: EMPTY
37991: LIST
37992: LIST
37993: PUSH
37994: LD_INT 0
37996: PUSH
37997: LD_INT 2
37999: PUSH
38000: EMPTY
38001: LIST
38002: LIST
38003: PUSH
38004: LD_INT 1
38006: NEG
38007: PUSH
38008: LD_INT 1
38010: PUSH
38011: EMPTY
38012: LIST
38013: LIST
38014: PUSH
38015: LD_INT 2
38017: NEG
38018: PUSH
38019: LD_INT 0
38021: PUSH
38022: EMPTY
38023: LIST
38024: LIST
38025: PUSH
38026: LD_INT 2
38028: NEG
38029: PUSH
38030: LD_INT 1
38032: NEG
38033: PUSH
38034: EMPTY
38035: LIST
38036: LIST
38037: PUSH
38038: LD_INT 2
38040: NEG
38041: PUSH
38042: LD_INT 2
38044: NEG
38045: PUSH
38046: EMPTY
38047: LIST
38048: LIST
38049: PUSH
38050: LD_INT 1
38052: PUSH
38053: LD_INT 2
38055: NEG
38056: PUSH
38057: EMPTY
38058: LIST
38059: LIST
38060: PUSH
38061: LD_INT 2
38063: PUSH
38064: LD_INT 1
38066: NEG
38067: PUSH
38068: EMPTY
38069: LIST
38070: LIST
38071: PUSH
38072: LD_INT 3
38074: PUSH
38075: LD_INT 1
38077: PUSH
38078: EMPTY
38079: LIST
38080: LIST
38081: PUSH
38082: LD_INT 3
38084: PUSH
38085: LD_INT 2
38087: PUSH
38088: EMPTY
38089: LIST
38090: LIST
38091: PUSH
38092: EMPTY
38093: LIST
38094: LIST
38095: LIST
38096: LIST
38097: LIST
38098: LIST
38099: LIST
38100: LIST
38101: LIST
38102: LIST
38103: LIST
38104: LIST
38105: LIST
38106: LIST
38107: LIST
38108: LIST
38109: LIST
38110: LIST
38111: LIST
38112: LIST
38113: LIST
38114: LIST
38115: LIST
38116: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
38117: LD_ADDR_VAR 0 25
38121: PUSH
38122: LD_INT 0
38124: PUSH
38125: LD_INT 0
38127: PUSH
38128: EMPTY
38129: LIST
38130: LIST
38131: PUSH
38132: LD_INT 0
38134: PUSH
38135: LD_INT 1
38137: NEG
38138: PUSH
38139: EMPTY
38140: LIST
38141: LIST
38142: PUSH
38143: LD_INT 1
38145: PUSH
38146: LD_INT 0
38148: PUSH
38149: EMPTY
38150: LIST
38151: LIST
38152: PUSH
38153: LD_INT 1
38155: PUSH
38156: LD_INT 1
38158: PUSH
38159: EMPTY
38160: LIST
38161: LIST
38162: PUSH
38163: LD_INT 0
38165: PUSH
38166: LD_INT 1
38168: PUSH
38169: EMPTY
38170: LIST
38171: LIST
38172: PUSH
38173: LD_INT 1
38175: NEG
38176: PUSH
38177: LD_INT 0
38179: PUSH
38180: EMPTY
38181: LIST
38182: LIST
38183: PUSH
38184: LD_INT 1
38186: NEG
38187: PUSH
38188: LD_INT 1
38190: NEG
38191: PUSH
38192: EMPTY
38193: LIST
38194: LIST
38195: PUSH
38196: LD_INT 1
38198: NEG
38199: PUSH
38200: LD_INT 2
38202: NEG
38203: PUSH
38204: EMPTY
38205: LIST
38206: LIST
38207: PUSH
38208: LD_INT 0
38210: PUSH
38211: LD_INT 2
38213: NEG
38214: PUSH
38215: EMPTY
38216: LIST
38217: LIST
38218: PUSH
38219: LD_INT 1
38221: PUSH
38222: LD_INT 1
38224: NEG
38225: PUSH
38226: EMPTY
38227: LIST
38228: LIST
38229: PUSH
38230: LD_INT 2
38232: PUSH
38233: LD_INT 0
38235: PUSH
38236: EMPTY
38237: LIST
38238: LIST
38239: PUSH
38240: LD_INT 2
38242: PUSH
38243: LD_INT 1
38245: PUSH
38246: EMPTY
38247: LIST
38248: LIST
38249: PUSH
38250: LD_INT 2
38252: PUSH
38253: LD_INT 2
38255: PUSH
38256: EMPTY
38257: LIST
38258: LIST
38259: PUSH
38260: LD_INT 1
38262: PUSH
38263: LD_INT 2
38265: PUSH
38266: EMPTY
38267: LIST
38268: LIST
38269: PUSH
38270: LD_INT 0
38272: PUSH
38273: LD_INT 2
38275: PUSH
38276: EMPTY
38277: LIST
38278: LIST
38279: PUSH
38280: LD_INT 1
38282: NEG
38283: PUSH
38284: LD_INT 1
38286: PUSH
38287: EMPTY
38288: LIST
38289: LIST
38290: PUSH
38291: LD_INT 2
38293: NEG
38294: PUSH
38295: LD_INT 0
38297: PUSH
38298: EMPTY
38299: LIST
38300: LIST
38301: PUSH
38302: LD_INT 2
38304: NEG
38305: PUSH
38306: LD_INT 1
38308: NEG
38309: PUSH
38310: EMPTY
38311: LIST
38312: LIST
38313: PUSH
38314: LD_INT 2
38316: NEG
38317: PUSH
38318: LD_INT 2
38320: NEG
38321: PUSH
38322: EMPTY
38323: LIST
38324: LIST
38325: PUSH
38326: LD_INT 3
38328: PUSH
38329: LD_INT 1
38331: PUSH
38332: EMPTY
38333: LIST
38334: LIST
38335: PUSH
38336: LD_INT 3
38338: PUSH
38339: LD_INT 2
38341: PUSH
38342: EMPTY
38343: LIST
38344: LIST
38345: PUSH
38346: LD_INT 2
38348: PUSH
38349: LD_INT 3
38351: PUSH
38352: EMPTY
38353: LIST
38354: LIST
38355: PUSH
38356: LD_INT 1
38358: PUSH
38359: LD_INT 3
38361: PUSH
38362: EMPTY
38363: LIST
38364: LIST
38365: PUSH
38366: EMPTY
38367: LIST
38368: LIST
38369: LIST
38370: LIST
38371: LIST
38372: LIST
38373: LIST
38374: LIST
38375: LIST
38376: LIST
38377: LIST
38378: LIST
38379: LIST
38380: LIST
38381: LIST
38382: LIST
38383: LIST
38384: LIST
38385: LIST
38386: LIST
38387: LIST
38388: LIST
38389: LIST
38390: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
38391: LD_ADDR_VAR 0 26
38395: PUSH
38396: LD_INT 0
38398: PUSH
38399: LD_INT 0
38401: PUSH
38402: EMPTY
38403: LIST
38404: LIST
38405: PUSH
38406: LD_INT 0
38408: PUSH
38409: LD_INT 1
38411: NEG
38412: PUSH
38413: EMPTY
38414: LIST
38415: LIST
38416: PUSH
38417: LD_INT 1
38419: PUSH
38420: LD_INT 0
38422: PUSH
38423: EMPTY
38424: LIST
38425: LIST
38426: PUSH
38427: LD_INT 1
38429: PUSH
38430: LD_INT 1
38432: PUSH
38433: EMPTY
38434: LIST
38435: LIST
38436: PUSH
38437: LD_INT 0
38439: PUSH
38440: LD_INT 1
38442: PUSH
38443: EMPTY
38444: LIST
38445: LIST
38446: PUSH
38447: LD_INT 1
38449: NEG
38450: PUSH
38451: LD_INT 0
38453: PUSH
38454: EMPTY
38455: LIST
38456: LIST
38457: PUSH
38458: LD_INT 1
38460: NEG
38461: PUSH
38462: LD_INT 1
38464: NEG
38465: PUSH
38466: EMPTY
38467: LIST
38468: LIST
38469: PUSH
38470: LD_INT 1
38472: NEG
38473: PUSH
38474: LD_INT 2
38476: NEG
38477: PUSH
38478: EMPTY
38479: LIST
38480: LIST
38481: PUSH
38482: LD_INT 0
38484: PUSH
38485: LD_INT 2
38487: NEG
38488: PUSH
38489: EMPTY
38490: LIST
38491: LIST
38492: PUSH
38493: LD_INT 1
38495: PUSH
38496: LD_INT 1
38498: NEG
38499: PUSH
38500: EMPTY
38501: LIST
38502: LIST
38503: PUSH
38504: LD_INT 2
38506: PUSH
38507: LD_INT 0
38509: PUSH
38510: EMPTY
38511: LIST
38512: LIST
38513: PUSH
38514: LD_INT 2
38516: PUSH
38517: LD_INT 1
38519: PUSH
38520: EMPTY
38521: LIST
38522: LIST
38523: PUSH
38524: LD_INT 2
38526: PUSH
38527: LD_INT 2
38529: PUSH
38530: EMPTY
38531: LIST
38532: LIST
38533: PUSH
38534: LD_INT 1
38536: PUSH
38537: LD_INT 2
38539: PUSH
38540: EMPTY
38541: LIST
38542: LIST
38543: PUSH
38544: LD_INT 0
38546: PUSH
38547: LD_INT 2
38549: PUSH
38550: EMPTY
38551: LIST
38552: LIST
38553: PUSH
38554: LD_INT 1
38556: NEG
38557: PUSH
38558: LD_INT 1
38560: PUSH
38561: EMPTY
38562: LIST
38563: LIST
38564: PUSH
38565: LD_INT 2
38567: NEG
38568: PUSH
38569: LD_INT 0
38571: PUSH
38572: EMPTY
38573: LIST
38574: LIST
38575: PUSH
38576: LD_INT 2
38578: NEG
38579: PUSH
38580: LD_INT 1
38582: NEG
38583: PUSH
38584: EMPTY
38585: LIST
38586: LIST
38587: PUSH
38588: LD_INT 2
38590: NEG
38591: PUSH
38592: LD_INT 2
38594: NEG
38595: PUSH
38596: EMPTY
38597: LIST
38598: LIST
38599: PUSH
38600: LD_INT 2
38602: PUSH
38603: LD_INT 3
38605: PUSH
38606: EMPTY
38607: LIST
38608: LIST
38609: PUSH
38610: LD_INT 1
38612: PUSH
38613: LD_INT 3
38615: PUSH
38616: EMPTY
38617: LIST
38618: LIST
38619: PUSH
38620: LD_INT 1
38622: NEG
38623: PUSH
38624: LD_INT 2
38626: PUSH
38627: EMPTY
38628: LIST
38629: LIST
38630: PUSH
38631: LD_INT 2
38633: NEG
38634: PUSH
38635: LD_INT 1
38637: PUSH
38638: EMPTY
38639: LIST
38640: LIST
38641: PUSH
38642: EMPTY
38643: LIST
38644: LIST
38645: LIST
38646: LIST
38647: LIST
38648: LIST
38649: LIST
38650: LIST
38651: LIST
38652: LIST
38653: LIST
38654: LIST
38655: LIST
38656: LIST
38657: LIST
38658: LIST
38659: LIST
38660: LIST
38661: LIST
38662: LIST
38663: LIST
38664: LIST
38665: LIST
38666: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38667: LD_ADDR_VAR 0 27
38671: PUSH
38672: LD_INT 0
38674: PUSH
38675: LD_INT 0
38677: PUSH
38678: EMPTY
38679: LIST
38680: LIST
38681: PUSH
38682: LD_INT 0
38684: PUSH
38685: LD_INT 1
38687: NEG
38688: PUSH
38689: EMPTY
38690: LIST
38691: LIST
38692: PUSH
38693: LD_INT 1
38695: PUSH
38696: LD_INT 0
38698: PUSH
38699: EMPTY
38700: LIST
38701: LIST
38702: PUSH
38703: LD_INT 1
38705: PUSH
38706: LD_INT 1
38708: PUSH
38709: EMPTY
38710: LIST
38711: LIST
38712: PUSH
38713: LD_INT 0
38715: PUSH
38716: LD_INT 1
38718: PUSH
38719: EMPTY
38720: LIST
38721: LIST
38722: PUSH
38723: LD_INT 1
38725: NEG
38726: PUSH
38727: LD_INT 0
38729: PUSH
38730: EMPTY
38731: LIST
38732: LIST
38733: PUSH
38734: LD_INT 1
38736: NEG
38737: PUSH
38738: LD_INT 1
38740: NEG
38741: PUSH
38742: EMPTY
38743: LIST
38744: LIST
38745: PUSH
38746: LD_INT 1
38748: NEG
38749: PUSH
38750: LD_INT 2
38752: NEG
38753: PUSH
38754: EMPTY
38755: LIST
38756: LIST
38757: PUSH
38758: LD_INT 0
38760: PUSH
38761: LD_INT 2
38763: NEG
38764: PUSH
38765: EMPTY
38766: LIST
38767: LIST
38768: PUSH
38769: LD_INT 1
38771: PUSH
38772: LD_INT 1
38774: NEG
38775: PUSH
38776: EMPTY
38777: LIST
38778: LIST
38779: PUSH
38780: LD_INT 2
38782: PUSH
38783: LD_INT 0
38785: PUSH
38786: EMPTY
38787: LIST
38788: LIST
38789: PUSH
38790: LD_INT 2
38792: PUSH
38793: LD_INT 1
38795: PUSH
38796: EMPTY
38797: LIST
38798: LIST
38799: PUSH
38800: LD_INT 2
38802: PUSH
38803: LD_INT 2
38805: PUSH
38806: EMPTY
38807: LIST
38808: LIST
38809: PUSH
38810: LD_INT 1
38812: PUSH
38813: LD_INT 2
38815: PUSH
38816: EMPTY
38817: LIST
38818: LIST
38819: PUSH
38820: LD_INT 0
38822: PUSH
38823: LD_INT 2
38825: PUSH
38826: EMPTY
38827: LIST
38828: LIST
38829: PUSH
38830: LD_INT 1
38832: NEG
38833: PUSH
38834: LD_INT 1
38836: PUSH
38837: EMPTY
38838: LIST
38839: LIST
38840: PUSH
38841: LD_INT 2
38843: NEG
38844: PUSH
38845: LD_INT 0
38847: PUSH
38848: EMPTY
38849: LIST
38850: LIST
38851: PUSH
38852: LD_INT 2
38854: NEG
38855: PUSH
38856: LD_INT 1
38858: NEG
38859: PUSH
38860: EMPTY
38861: LIST
38862: LIST
38863: PUSH
38864: LD_INT 2
38866: NEG
38867: PUSH
38868: LD_INT 2
38870: NEG
38871: PUSH
38872: EMPTY
38873: LIST
38874: LIST
38875: PUSH
38876: LD_INT 1
38878: NEG
38879: PUSH
38880: LD_INT 2
38882: PUSH
38883: EMPTY
38884: LIST
38885: LIST
38886: PUSH
38887: LD_INT 2
38889: NEG
38890: PUSH
38891: LD_INT 1
38893: PUSH
38894: EMPTY
38895: LIST
38896: LIST
38897: PUSH
38898: LD_INT 3
38900: NEG
38901: PUSH
38902: LD_INT 1
38904: NEG
38905: PUSH
38906: EMPTY
38907: LIST
38908: LIST
38909: PUSH
38910: LD_INT 3
38912: NEG
38913: PUSH
38914: LD_INT 2
38916: NEG
38917: PUSH
38918: EMPTY
38919: LIST
38920: LIST
38921: PUSH
38922: EMPTY
38923: LIST
38924: LIST
38925: LIST
38926: LIST
38927: LIST
38928: LIST
38929: LIST
38930: LIST
38931: LIST
38932: LIST
38933: LIST
38934: LIST
38935: LIST
38936: LIST
38937: LIST
38938: LIST
38939: LIST
38940: LIST
38941: LIST
38942: LIST
38943: LIST
38944: LIST
38945: LIST
38946: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38947: LD_ADDR_VAR 0 28
38951: PUSH
38952: LD_INT 0
38954: PUSH
38955: LD_INT 0
38957: PUSH
38958: EMPTY
38959: LIST
38960: LIST
38961: PUSH
38962: LD_INT 0
38964: PUSH
38965: LD_INT 1
38967: NEG
38968: PUSH
38969: EMPTY
38970: LIST
38971: LIST
38972: PUSH
38973: LD_INT 1
38975: PUSH
38976: LD_INT 0
38978: PUSH
38979: EMPTY
38980: LIST
38981: LIST
38982: PUSH
38983: LD_INT 1
38985: PUSH
38986: LD_INT 1
38988: PUSH
38989: EMPTY
38990: LIST
38991: LIST
38992: PUSH
38993: LD_INT 0
38995: PUSH
38996: LD_INT 1
38998: PUSH
38999: EMPTY
39000: LIST
39001: LIST
39002: PUSH
39003: LD_INT 1
39005: NEG
39006: PUSH
39007: LD_INT 0
39009: PUSH
39010: EMPTY
39011: LIST
39012: LIST
39013: PUSH
39014: LD_INT 1
39016: NEG
39017: PUSH
39018: LD_INT 1
39020: NEG
39021: PUSH
39022: EMPTY
39023: LIST
39024: LIST
39025: PUSH
39026: LD_INT 1
39028: NEG
39029: PUSH
39030: LD_INT 2
39032: NEG
39033: PUSH
39034: EMPTY
39035: LIST
39036: LIST
39037: PUSH
39038: LD_INT 0
39040: PUSH
39041: LD_INT 2
39043: NEG
39044: PUSH
39045: EMPTY
39046: LIST
39047: LIST
39048: PUSH
39049: LD_INT 1
39051: PUSH
39052: LD_INT 1
39054: NEG
39055: PUSH
39056: EMPTY
39057: LIST
39058: LIST
39059: PUSH
39060: LD_INT 2
39062: PUSH
39063: LD_INT 0
39065: PUSH
39066: EMPTY
39067: LIST
39068: LIST
39069: PUSH
39070: LD_INT 2
39072: PUSH
39073: LD_INT 1
39075: PUSH
39076: EMPTY
39077: LIST
39078: LIST
39079: PUSH
39080: LD_INT 2
39082: PUSH
39083: LD_INT 2
39085: PUSH
39086: EMPTY
39087: LIST
39088: LIST
39089: PUSH
39090: LD_INT 1
39092: PUSH
39093: LD_INT 2
39095: PUSH
39096: EMPTY
39097: LIST
39098: LIST
39099: PUSH
39100: LD_INT 0
39102: PUSH
39103: LD_INT 2
39105: PUSH
39106: EMPTY
39107: LIST
39108: LIST
39109: PUSH
39110: LD_INT 1
39112: NEG
39113: PUSH
39114: LD_INT 1
39116: PUSH
39117: EMPTY
39118: LIST
39119: LIST
39120: PUSH
39121: LD_INT 2
39123: NEG
39124: PUSH
39125: LD_INT 0
39127: PUSH
39128: EMPTY
39129: LIST
39130: LIST
39131: PUSH
39132: LD_INT 2
39134: NEG
39135: PUSH
39136: LD_INT 1
39138: NEG
39139: PUSH
39140: EMPTY
39141: LIST
39142: LIST
39143: PUSH
39144: LD_INT 2
39146: NEG
39147: PUSH
39148: LD_INT 2
39150: NEG
39151: PUSH
39152: EMPTY
39153: LIST
39154: LIST
39155: PUSH
39156: LD_INT 2
39158: NEG
39159: PUSH
39160: LD_INT 3
39162: NEG
39163: PUSH
39164: EMPTY
39165: LIST
39166: LIST
39167: PUSH
39168: LD_INT 1
39170: NEG
39171: PUSH
39172: LD_INT 3
39174: NEG
39175: PUSH
39176: EMPTY
39177: LIST
39178: LIST
39179: PUSH
39180: LD_INT 3
39182: NEG
39183: PUSH
39184: LD_INT 1
39186: NEG
39187: PUSH
39188: EMPTY
39189: LIST
39190: LIST
39191: PUSH
39192: LD_INT 3
39194: NEG
39195: PUSH
39196: LD_INT 2
39198: NEG
39199: PUSH
39200: EMPTY
39201: LIST
39202: LIST
39203: PUSH
39204: EMPTY
39205: LIST
39206: LIST
39207: LIST
39208: LIST
39209: LIST
39210: LIST
39211: LIST
39212: LIST
39213: LIST
39214: LIST
39215: LIST
39216: LIST
39217: LIST
39218: LIST
39219: LIST
39220: LIST
39221: LIST
39222: LIST
39223: LIST
39224: LIST
39225: LIST
39226: LIST
39227: LIST
39228: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39229: LD_ADDR_VAR 0 29
39233: PUSH
39234: LD_INT 0
39236: PUSH
39237: LD_INT 0
39239: PUSH
39240: EMPTY
39241: LIST
39242: LIST
39243: PUSH
39244: LD_INT 0
39246: PUSH
39247: LD_INT 1
39249: NEG
39250: PUSH
39251: EMPTY
39252: LIST
39253: LIST
39254: PUSH
39255: LD_INT 1
39257: PUSH
39258: LD_INT 0
39260: PUSH
39261: EMPTY
39262: LIST
39263: LIST
39264: PUSH
39265: LD_INT 1
39267: PUSH
39268: LD_INT 1
39270: PUSH
39271: EMPTY
39272: LIST
39273: LIST
39274: PUSH
39275: LD_INT 0
39277: PUSH
39278: LD_INT 1
39280: PUSH
39281: EMPTY
39282: LIST
39283: LIST
39284: PUSH
39285: LD_INT 1
39287: NEG
39288: PUSH
39289: LD_INT 0
39291: PUSH
39292: EMPTY
39293: LIST
39294: LIST
39295: PUSH
39296: LD_INT 1
39298: NEG
39299: PUSH
39300: LD_INT 1
39302: NEG
39303: PUSH
39304: EMPTY
39305: LIST
39306: LIST
39307: PUSH
39308: LD_INT 1
39310: NEG
39311: PUSH
39312: LD_INT 2
39314: NEG
39315: PUSH
39316: EMPTY
39317: LIST
39318: LIST
39319: PUSH
39320: LD_INT 0
39322: PUSH
39323: LD_INT 2
39325: NEG
39326: PUSH
39327: EMPTY
39328: LIST
39329: LIST
39330: PUSH
39331: LD_INT 1
39333: PUSH
39334: LD_INT 1
39336: NEG
39337: PUSH
39338: EMPTY
39339: LIST
39340: LIST
39341: PUSH
39342: LD_INT 2
39344: PUSH
39345: LD_INT 0
39347: PUSH
39348: EMPTY
39349: LIST
39350: LIST
39351: PUSH
39352: LD_INT 2
39354: PUSH
39355: LD_INT 1
39357: PUSH
39358: EMPTY
39359: LIST
39360: LIST
39361: PUSH
39362: LD_INT 1
39364: PUSH
39365: LD_INT 2
39367: PUSH
39368: EMPTY
39369: LIST
39370: LIST
39371: PUSH
39372: LD_INT 0
39374: PUSH
39375: LD_INT 2
39377: PUSH
39378: EMPTY
39379: LIST
39380: LIST
39381: PUSH
39382: LD_INT 1
39384: NEG
39385: PUSH
39386: LD_INT 1
39388: PUSH
39389: EMPTY
39390: LIST
39391: LIST
39392: PUSH
39393: LD_INT 2
39395: NEG
39396: PUSH
39397: LD_INT 1
39399: NEG
39400: PUSH
39401: EMPTY
39402: LIST
39403: LIST
39404: PUSH
39405: LD_INT 2
39407: NEG
39408: PUSH
39409: LD_INT 2
39411: NEG
39412: PUSH
39413: EMPTY
39414: LIST
39415: LIST
39416: PUSH
39417: LD_INT 2
39419: NEG
39420: PUSH
39421: LD_INT 3
39423: NEG
39424: PUSH
39425: EMPTY
39426: LIST
39427: LIST
39428: PUSH
39429: LD_INT 2
39431: PUSH
39432: LD_INT 1
39434: NEG
39435: PUSH
39436: EMPTY
39437: LIST
39438: LIST
39439: PUSH
39440: LD_INT 3
39442: PUSH
39443: LD_INT 1
39445: PUSH
39446: EMPTY
39447: LIST
39448: LIST
39449: PUSH
39450: LD_INT 1
39452: PUSH
39453: LD_INT 3
39455: PUSH
39456: EMPTY
39457: LIST
39458: LIST
39459: PUSH
39460: LD_INT 1
39462: NEG
39463: PUSH
39464: LD_INT 2
39466: PUSH
39467: EMPTY
39468: LIST
39469: LIST
39470: PUSH
39471: LD_INT 3
39473: NEG
39474: PUSH
39475: LD_INT 2
39477: NEG
39478: PUSH
39479: EMPTY
39480: LIST
39481: LIST
39482: PUSH
39483: EMPTY
39484: LIST
39485: LIST
39486: LIST
39487: LIST
39488: LIST
39489: LIST
39490: LIST
39491: LIST
39492: LIST
39493: LIST
39494: LIST
39495: LIST
39496: LIST
39497: LIST
39498: LIST
39499: LIST
39500: LIST
39501: LIST
39502: LIST
39503: LIST
39504: LIST
39505: LIST
39506: LIST
39507: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39508: LD_ADDR_VAR 0 30
39512: PUSH
39513: LD_INT 0
39515: PUSH
39516: LD_INT 0
39518: PUSH
39519: EMPTY
39520: LIST
39521: LIST
39522: PUSH
39523: LD_INT 0
39525: PUSH
39526: LD_INT 1
39528: NEG
39529: PUSH
39530: EMPTY
39531: LIST
39532: LIST
39533: PUSH
39534: LD_INT 1
39536: PUSH
39537: LD_INT 0
39539: PUSH
39540: EMPTY
39541: LIST
39542: LIST
39543: PUSH
39544: LD_INT 1
39546: PUSH
39547: LD_INT 1
39549: PUSH
39550: EMPTY
39551: LIST
39552: LIST
39553: PUSH
39554: LD_INT 0
39556: PUSH
39557: LD_INT 1
39559: PUSH
39560: EMPTY
39561: LIST
39562: LIST
39563: PUSH
39564: LD_INT 1
39566: NEG
39567: PUSH
39568: LD_INT 0
39570: PUSH
39571: EMPTY
39572: LIST
39573: LIST
39574: PUSH
39575: LD_INT 1
39577: NEG
39578: PUSH
39579: LD_INT 1
39581: NEG
39582: PUSH
39583: EMPTY
39584: LIST
39585: LIST
39586: PUSH
39587: LD_INT 1
39589: NEG
39590: PUSH
39591: LD_INT 2
39593: NEG
39594: PUSH
39595: EMPTY
39596: LIST
39597: LIST
39598: PUSH
39599: LD_INT 0
39601: PUSH
39602: LD_INT 2
39604: NEG
39605: PUSH
39606: EMPTY
39607: LIST
39608: LIST
39609: PUSH
39610: LD_INT 1
39612: PUSH
39613: LD_INT 1
39615: NEG
39616: PUSH
39617: EMPTY
39618: LIST
39619: LIST
39620: PUSH
39621: LD_INT 2
39623: PUSH
39624: LD_INT 0
39626: PUSH
39627: EMPTY
39628: LIST
39629: LIST
39630: PUSH
39631: LD_INT 2
39633: PUSH
39634: LD_INT 1
39636: PUSH
39637: EMPTY
39638: LIST
39639: LIST
39640: PUSH
39641: LD_INT 2
39643: PUSH
39644: LD_INT 2
39646: PUSH
39647: EMPTY
39648: LIST
39649: LIST
39650: PUSH
39651: LD_INT 1
39653: PUSH
39654: LD_INT 2
39656: PUSH
39657: EMPTY
39658: LIST
39659: LIST
39660: PUSH
39661: LD_INT 1
39663: NEG
39664: PUSH
39665: LD_INT 1
39667: PUSH
39668: EMPTY
39669: LIST
39670: LIST
39671: PUSH
39672: LD_INT 2
39674: NEG
39675: PUSH
39676: LD_INT 0
39678: PUSH
39679: EMPTY
39680: LIST
39681: LIST
39682: PUSH
39683: LD_INT 2
39685: NEG
39686: PUSH
39687: LD_INT 1
39689: NEG
39690: PUSH
39691: EMPTY
39692: LIST
39693: LIST
39694: PUSH
39695: LD_INT 1
39697: NEG
39698: PUSH
39699: LD_INT 3
39701: NEG
39702: PUSH
39703: EMPTY
39704: LIST
39705: LIST
39706: PUSH
39707: LD_INT 1
39709: PUSH
39710: LD_INT 2
39712: NEG
39713: PUSH
39714: EMPTY
39715: LIST
39716: LIST
39717: PUSH
39718: LD_INT 3
39720: PUSH
39721: LD_INT 2
39723: PUSH
39724: EMPTY
39725: LIST
39726: LIST
39727: PUSH
39728: LD_INT 2
39730: PUSH
39731: LD_INT 3
39733: PUSH
39734: EMPTY
39735: LIST
39736: LIST
39737: PUSH
39738: LD_INT 2
39740: NEG
39741: PUSH
39742: LD_INT 1
39744: PUSH
39745: EMPTY
39746: LIST
39747: LIST
39748: PUSH
39749: LD_INT 3
39751: NEG
39752: PUSH
39753: LD_INT 1
39755: NEG
39756: PUSH
39757: EMPTY
39758: LIST
39759: LIST
39760: PUSH
39761: EMPTY
39762: LIST
39763: LIST
39764: LIST
39765: LIST
39766: LIST
39767: LIST
39768: LIST
39769: LIST
39770: LIST
39771: LIST
39772: LIST
39773: LIST
39774: LIST
39775: LIST
39776: LIST
39777: LIST
39778: LIST
39779: LIST
39780: LIST
39781: LIST
39782: LIST
39783: LIST
39784: LIST
39785: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39786: LD_ADDR_VAR 0 31
39790: PUSH
39791: LD_INT 0
39793: PUSH
39794: LD_INT 0
39796: PUSH
39797: EMPTY
39798: LIST
39799: LIST
39800: PUSH
39801: LD_INT 0
39803: PUSH
39804: LD_INT 1
39806: NEG
39807: PUSH
39808: EMPTY
39809: LIST
39810: LIST
39811: PUSH
39812: LD_INT 1
39814: PUSH
39815: LD_INT 0
39817: PUSH
39818: EMPTY
39819: LIST
39820: LIST
39821: PUSH
39822: LD_INT 1
39824: PUSH
39825: LD_INT 1
39827: PUSH
39828: EMPTY
39829: LIST
39830: LIST
39831: PUSH
39832: LD_INT 0
39834: PUSH
39835: LD_INT 1
39837: PUSH
39838: EMPTY
39839: LIST
39840: LIST
39841: PUSH
39842: LD_INT 1
39844: NEG
39845: PUSH
39846: LD_INT 0
39848: PUSH
39849: EMPTY
39850: LIST
39851: LIST
39852: PUSH
39853: LD_INT 1
39855: NEG
39856: PUSH
39857: LD_INT 1
39859: NEG
39860: PUSH
39861: EMPTY
39862: LIST
39863: LIST
39864: PUSH
39865: LD_INT 1
39867: NEG
39868: PUSH
39869: LD_INT 2
39871: NEG
39872: PUSH
39873: EMPTY
39874: LIST
39875: LIST
39876: PUSH
39877: LD_INT 1
39879: PUSH
39880: LD_INT 1
39882: NEG
39883: PUSH
39884: EMPTY
39885: LIST
39886: LIST
39887: PUSH
39888: LD_INT 2
39890: PUSH
39891: LD_INT 0
39893: PUSH
39894: EMPTY
39895: LIST
39896: LIST
39897: PUSH
39898: LD_INT 2
39900: PUSH
39901: LD_INT 1
39903: PUSH
39904: EMPTY
39905: LIST
39906: LIST
39907: PUSH
39908: LD_INT 2
39910: PUSH
39911: LD_INT 2
39913: PUSH
39914: EMPTY
39915: LIST
39916: LIST
39917: PUSH
39918: LD_INT 1
39920: PUSH
39921: LD_INT 2
39923: PUSH
39924: EMPTY
39925: LIST
39926: LIST
39927: PUSH
39928: LD_INT 0
39930: PUSH
39931: LD_INT 2
39933: PUSH
39934: EMPTY
39935: LIST
39936: LIST
39937: PUSH
39938: LD_INT 1
39940: NEG
39941: PUSH
39942: LD_INT 1
39944: PUSH
39945: EMPTY
39946: LIST
39947: LIST
39948: PUSH
39949: LD_INT 2
39951: NEG
39952: PUSH
39953: LD_INT 1
39955: NEG
39956: PUSH
39957: EMPTY
39958: LIST
39959: LIST
39960: PUSH
39961: LD_INT 2
39963: NEG
39964: PUSH
39965: LD_INT 2
39967: NEG
39968: PUSH
39969: EMPTY
39970: LIST
39971: LIST
39972: PUSH
39973: LD_INT 2
39975: NEG
39976: PUSH
39977: LD_INT 3
39979: NEG
39980: PUSH
39981: EMPTY
39982: LIST
39983: LIST
39984: PUSH
39985: LD_INT 2
39987: PUSH
39988: LD_INT 1
39990: NEG
39991: PUSH
39992: EMPTY
39993: LIST
39994: LIST
39995: PUSH
39996: LD_INT 3
39998: PUSH
39999: LD_INT 1
40001: PUSH
40002: EMPTY
40003: LIST
40004: LIST
40005: PUSH
40006: LD_INT 1
40008: PUSH
40009: LD_INT 3
40011: PUSH
40012: EMPTY
40013: LIST
40014: LIST
40015: PUSH
40016: LD_INT 1
40018: NEG
40019: PUSH
40020: LD_INT 2
40022: PUSH
40023: EMPTY
40024: LIST
40025: LIST
40026: PUSH
40027: LD_INT 3
40029: NEG
40030: PUSH
40031: LD_INT 2
40033: NEG
40034: PUSH
40035: EMPTY
40036: LIST
40037: LIST
40038: PUSH
40039: EMPTY
40040: LIST
40041: LIST
40042: LIST
40043: LIST
40044: LIST
40045: LIST
40046: LIST
40047: LIST
40048: LIST
40049: LIST
40050: LIST
40051: LIST
40052: LIST
40053: LIST
40054: LIST
40055: LIST
40056: LIST
40057: LIST
40058: LIST
40059: LIST
40060: LIST
40061: LIST
40062: LIST
40063: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40064: LD_ADDR_VAR 0 32
40068: PUSH
40069: LD_INT 0
40071: PUSH
40072: LD_INT 0
40074: PUSH
40075: EMPTY
40076: LIST
40077: LIST
40078: PUSH
40079: LD_INT 0
40081: PUSH
40082: LD_INT 1
40084: NEG
40085: PUSH
40086: EMPTY
40087: LIST
40088: LIST
40089: PUSH
40090: LD_INT 1
40092: PUSH
40093: LD_INT 0
40095: PUSH
40096: EMPTY
40097: LIST
40098: LIST
40099: PUSH
40100: LD_INT 1
40102: PUSH
40103: LD_INT 1
40105: PUSH
40106: EMPTY
40107: LIST
40108: LIST
40109: PUSH
40110: LD_INT 0
40112: PUSH
40113: LD_INT 1
40115: PUSH
40116: EMPTY
40117: LIST
40118: LIST
40119: PUSH
40120: LD_INT 1
40122: NEG
40123: PUSH
40124: LD_INT 0
40126: PUSH
40127: EMPTY
40128: LIST
40129: LIST
40130: PUSH
40131: LD_INT 1
40133: NEG
40134: PUSH
40135: LD_INT 1
40137: NEG
40138: PUSH
40139: EMPTY
40140: LIST
40141: LIST
40142: PUSH
40143: LD_INT 1
40145: NEG
40146: PUSH
40147: LD_INT 2
40149: NEG
40150: PUSH
40151: EMPTY
40152: LIST
40153: LIST
40154: PUSH
40155: LD_INT 0
40157: PUSH
40158: LD_INT 2
40160: NEG
40161: PUSH
40162: EMPTY
40163: LIST
40164: LIST
40165: PUSH
40166: LD_INT 1
40168: PUSH
40169: LD_INT 1
40171: NEG
40172: PUSH
40173: EMPTY
40174: LIST
40175: LIST
40176: PUSH
40177: LD_INT 2
40179: PUSH
40180: LD_INT 1
40182: PUSH
40183: EMPTY
40184: LIST
40185: LIST
40186: PUSH
40187: LD_INT 2
40189: PUSH
40190: LD_INT 2
40192: PUSH
40193: EMPTY
40194: LIST
40195: LIST
40196: PUSH
40197: LD_INT 1
40199: PUSH
40200: LD_INT 2
40202: PUSH
40203: EMPTY
40204: LIST
40205: LIST
40206: PUSH
40207: LD_INT 0
40209: PUSH
40210: LD_INT 2
40212: PUSH
40213: EMPTY
40214: LIST
40215: LIST
40216: PUSH
40217: LD_INT 1
40219: NEG
40220: PUSH
40221: LD_INT 1
40223: PUSH
40224: EMPTY
40225: LIST
40226: LIST
40227: PUSH
40228: LD_INT 2
40230: NEG
40231: PUSH
40232: LD_INT 0
40234: PUSH
40235: EMPTY
40236: LIST
40237: LIST
40238: PUSH
40239: LD_INT 2
40241: NEG
40242: PUSH
40243: LD_INT 1
40245: NEG
40246: PUSH
40247: EMPTY
40248: LIST
40249: LIST
40250: PUSH
40251: LD_INT 1
40253: NEG
40254: PUSH
40255: LD_INT 3
40257: NEG
40258: PUSH
40259: EMPTY
40260: LIST
40261: LIST
40262: PUSH
40263: LD_INT 1
40265: PUSH
40266: LD_INT 2
40268: NEG
40269: PUSH
40270: EMPTY
40271: LIST
40272: LIST
40273: PUSH
40274: LD_INT 3
40276: PUSH
40277: LD_INT 2
40279: PUSH
40280: EMPTY
40281: LIST
40282: LIST
40283: PUSH
40284: LD_INT 2
40286: PUSH
40287: LD_INT 3
40289: PUSH
40290: EMPTY
40291: LIST
40292: LIST
40293: PUSH
40294: LD_INT 2
40296: NEG
40297: PUSH
40298: LD_INT 1
40300: PUSH
40301: EMPTY
40302: LIST
40303: LIST
40304: PUSH
40305: LD_INT 3
40307: NEG
40308: PUSH
40309: LD_INT 1
40311: NEG
40312: PUSH
40313: EMPTY
40314: LIST
40315: LIST
40316: PUSH
40317: EMPTY
40318: LIST
40319: LIST
40320: LIST
40321: LIST
40322: LIST
40323: LIST
40324: LIST
40325: LIST
40326: LIST
40327: LIST
40328: LIST
40329: LIST
40330: LIST
40331: LIST
40332: LIST
40333: LIST
40334: LIST
40335: LIST
40336: LIST
40337: LIST
40338: LIST
40339: LIST
40340: LIST
40341: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40342: LD_ADDR_VAR 0 33
40346: PUSH
40347: LD_INT 0
40349: PUSH
40350: LD_INT 0
40352: PUSH
40353: EMPTY
40354: LIST
40355: LIST
40356: PUSH
40357: LD_INT 0
40359: PUSH
40360: LD_INT 1
40362: NEG
40363: PUSH
40364: EMPTY
40365: LIST
40366: LIST
40367: PUSH
40368: LD_INT 1
40370: PUSH
40371: LD_INT 0
40373: PUSH
40374: EMPTY
40375: LIST
40376: LIST
40377: PUSH
40378: LD_INT 1
40380: PUSH
40381: LD_INT 1
40383: PUSH
40384: EMPTY
40385: LIST
40386: LIST
40387: PUSH
40388: LD_INT 0
40390: PUSH
40391: LD_INT 1
40393: PUSH
40394: EMPTY
40395: LIST
40396: LIST
40397: PUSH
40398: LD_INT 1
40400: NEG
40401: PUSH
40402: LD_INT 0
40404: PUSH
40405: EMPTY
40406: LIST
40407: LIST
40408: PUSH
40409: LD_INT 1
40411: NEG
40412: PUSH
40413: LD_INT 1
40415: NEG
40416: PUSH
40417: EMPTY
40418: LIST
40419: LIST
40420: PUSH
40421: LD_INT 1
40423: NEG
40424: PUSH
40425: LD_INT 2
40427: NEG
40428: PUSH
40429: EMPTY
40430: LIST
40431: LIST
40432: PUSH
40433: LD_INT 1
40435: PUSH
40436: LD_INT 1
40438: NEG
40439: PUSH
40440: EMPTY
40441: LIST
40442: LIST
40443: PUSH
40444: LD_INT 2
40446: PUSH
40447: LD_INT 0
40449: PUSH
40450: EMPTY
40451: LIST
40452: LIST
40453: PUSH
40454: LD_INT 2
40456: PUSH
40457: LD_INT 1
40459: PUSH
40460: EMPTY
40461: LIST
40462: LIST
40463: PUSH
40464: LD_INT 1
40466: PUSH
40467: LD_INT 2
40469: PUSH
40470: EMPTY
40471: LIST
40472: LIST
40473: PUSH
40474: LD_INT 0
40476: PUSH
40477: LD_INT 2
40479: PUSH
40480: EMPTY
40481: LIST
40482: LIST
40483: PUSH
40484: LD_INT 1
40486: NEG
40487: PUSH
40488: LD_INT 1
40490: PUSH
40491: EMPTY
40492: LIST
40493: LIST
40494: PUSH
40495: LD_INT 2
40497: NEG
40498: PUSH
40499: LD_INT 0
40501: PUSH
40502: EMPTY
40503: LIST
40504: LIST
40505: PUSH
40506: LD_INT 2
40508: NEG
40509: PUSH
40510: LD_INT 1
40512: NEG
40513: PUSH
40514: EMPTY
40515: LIST
40516: LIST
40517: PUSH
40518: LD_INT 2
40520: NEG
40521: PUSH
40522: LD_INT 2
40524: NEG
40525: PUSH
40526: EMPTY
40527: LIST
40528: LIST
40529: PUSH
40530: LD_INT 2
40532: NEG
40533: PUSH
40534: LD_INT 3
40536: NEG
40537: PUSH
40538: EMPTY
40539: LIST
40540: LIST
40541: PUSH
40542: LD_INT 2
40544: PUSH
40545: LD_INT 1
40547: NEG
40548: PUSH
40549: EMPTY
40550: LIST
40551: LIST
40552: PUSH
40553: LD_INT 3
40555: PUSH
40556: LD_INT 1
40558: PUSH
40559: EMPTY
40560: LIST
40561: LIST
40562: PUSH
40563: LD_INT 1
40565: PUSH
40566: LD_INT 3
40568: PUSH
40569: EMPTY
40570: LIST
40571: LIST
40572: PUSH
40573: LD_INT 1
40575: NEG
40576: PUSH
40577: LD_INT 2
40579: PUSH
40580: EMPTY
40581: LIST
40582: LIST
40583: PUSH
40584: LD_INT 3
40586: NEG
40587: PUSH
40588: LD_INT 2
40590: NEG
40591: PUSH
40592: EMPTY
40593: LIST
40594: LIST
40595: PUSH
40596: EMPTY
40597: LIST
40598: LIST
40599: LIST
40600: LIST
40601: LIST
40602: LIST
40603: LIST
40604: LIST
40605: LIST
40606: LIST
40607: LIST
40608: LIST
40609: LIST
40610: LIST
40611: LIST
40612: LIST
40613: LIST
40614: LIST
40615: LIST
40616: LIST
40617: LIST
40618: LIST
40619: LIST
40620: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40621: LD_ADDR_VAR 0 34
40625: PUSH
40626: LD_INT 0
40628: PUSH
40629: LD_INT 0
40631: PUSH
40632: EMPTY
40633: LIST
40634: LIST
40635: PUSH
40636: LD_INT 0
40638: PUSH
40639: LD_INT 1
40641: NEG
40642: PUSH
40643: EMPTY
40644: LIST
40645: LIST
40646: PUSH
40647: LD_INT 1
40649: PUSH
40650: LD_INT 0
40652: PUSH
40653: EMPTY
40654: LIST
40655: LIST
40656: PUSH
40657: LD_INT 1
40659: PUSH
40660: LD_INT 1
40662: PUSH
40663: EMPTY
40664: LIST
40665: LIST
40666: PUSH
40667: LD_INT 0
40669: PUSH
40670: LD_INT 1
40672: PUSH
40673: EMPTY
40674: LIST
40675: LIST
40676: PUSH
40677: LD_INT 1
40679: NEG
40680: PUSH
40681: LD_INT 0
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: PUSH
40688: LD_INT 1
40690: NEG
40691: PUSH
40692: LD_INT 1
40694: NEG
40695: PUSH
40696: EMPTY
40697: LIST
40698: LIST
40699: PUSH
40700: LD_INT 1
40702: NEG
40703: PUSH
40704: LD_INT 2
40706: NEG
40707: PUSH
40708: EMPTY
40709: LIST
40710: LIST
40711: PUSH
40712: LD_INT 0
40714: PUSH
40715: LD_INT 2
40717: NEG
40718: PUSH
40719: EMPTY
40720: LIST
40721: LIST
40722: PUSH
40723: LD_INT 1
40725: PUSH
40726: LD_INT 1
40728: NEG
40729: PUSH
40730: EMPTY
40731: LIST
40732: LIST
40733: PUSH
40734: LD_INT 2
40736: PUSH
40737: LD_INT 1
40739: PUSH
40740: EMPTY
40741: LIST
40742: LIST
40743: PUSH
40744: LD_INT 2
40746: PUSH
40747: LD_INT 2
40749: PUSH
40750: EMPTY
40751: LIST
40752: LIST
40753: PUSH
40754: LD_INT 1
40756: PUSH
40757: LD_INT 2
40759: PUSH
40760: EMPTY
40761: LIST
40762: LIST
40763: PUSH
40764: LD_INT 1
40766: NEG
40767: PUSH
40768: LD_INT 1
40770: PUSH
40771: EMPTY
40772: LIST
40773: LIST
40774: PUSH
40775: LD_INT 2
40777: NEG
40778: PUSH
40779: LD_INT 0
40781: PUSH
40782: EMPTY
40783: LIST
40784: LIST
40785: PUSH
40786: LD_INT 2
40788: NEG
40789: PUSH
40790: LD_INT 1
40792: NEG
40793: PUSH
40794: EMPTY
40795: LIST
40796: LIST
40797: PUSH
40798: LD_INT 2
40800: NEG
40801: PUSH
40802: LD_INT 2
40804: NEG
40805: PUSH
40806: EMPTY
40807: LIST
40808: LIST
40809: PUSH
40810: LD_INT 1
40812: NEG
40813: PUSH
40814: LD_INT 3
40816: NEG
40817: PUSH
40818: EMPTY
40819: LIST
40820: LIST
40821: PUSH
40822: LD_INT 1
40824: PUSH
40825: LD_INT 2
40827: NEG
40828: PUSH
40829: EMPTY
40830: LIST
40831: LIST
40832: PUSH
40833: LD_INT 3
40835: PUSH
40836: LD_INT 2
40838: PUSH
40839: EMPTY
40840: LIST
40841: LIST
40842: PUSH
40843: LD_INT 2
40845: PUSH
40846: LD_INT 3
40848: PUSH
40849: EMPTY
40850: LIST
40851: LIST
40852: PUSH
40853: LD_INT 2
40855: NEG
40856: PUSH
40857: LD_INT 1
40859: PUSH
40860: EMPTY
40861: LIST
40862: LIST
40863: PUSH
40864: LD_INT 3
40866: NEG
40867: PUSH
40868: LD_INT 1
40870: NEG
40871: PUSH
40872: EMPTY
40873: LIST
40874: LIST
40875: PUSH
40876: EMPTY
40877: LIST
40878: LIST
40879: LIST
40880: LIST
40881: LIST
40882: LIST
40883: LIST
40884: LIST
40885: LIST
40886: LIST
40887: LIST
40888: LIST
40889: LIST
40890: LIST
40891: LIST
40892: LIST
40893: LIST
40894: LIST
40895: LIST
40896: LIST
40897: LIST
40898: LIST
40899: LIST
40900: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40901: LD_ADDR_VAR 0 35
40905: PUSH
40906: LD_INT 0
40908: PUSH
40909: LD_INT 0
40911: PUSH
40912: EMPTY
40913: LIST
40914: LIST
40915: PUSH
40916: LD_INT 0
40918: PUSH
40919: LD_INT 1
40921: NEG
40922: PUSH
40923: EMPTY
40924: LIST
40925: LIST
40926: PUSH
40927: LD_INT 1
40929: PUSH
40930: LD_INT 0
40932: PUSH
40933: EMPTY
40934: LIST
40935: LIST
40936: PUSH
40937: LD_INT 1
40939: PUSH
40940: LD_INT 1
40942: PUSH
40943: EMPTY
40944: LIST
40945: LIST
40946: PUSH
40947: LD_INT 0
40949: PUSH
40950: LD_INT 1
40952: PUSH
40953: EMPTY
40954: LIST
40955: LIST
40956: PUSH
40957: LD_INT 1
40959: NEG
40960: PUSH
40961: LD_INT 0
40963: PUSH
40964: EMPTY
40965: LIST
40966: LIST
40967: PUSH
40968: LD_INT 1
40970: NEG
40971: PUSH
40972: LD_INT 1
40974: NEG
40975: PUSH
40976: EMPTY
40977: LIST
40978: LIST
40979: PUSH
40980: LD_INT 2
40982: PUSH
40983: LD_INT 1
40985: PUSH
40986: EMPTY
40987: LIST
40988: LIST
40989: PUSH
40990: LD_INT 2
40992: NEG
40993: PUSH
40994: LD_INT 1
40996: NEG
40997: PUSH
40998: EMPTY
40999: LIST
41000: LIST
41001: PUSH
41002: EMPTY
41003: LIST
41004: LIST
41005: LIST
41006: LIST
41007: LIST
41008: LIST
41009: LIST
41010: LIST
41011: LIST
41012: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41013: LD_ADDR_VAR 0 36
41017: PUSH
41018: LD_INT 0
41020: PUSH
41021: LD_INT 0
41023: PUSH
41024: EMPTY
41025: LIST
41026: LIST
41027: PUSH
41028: LD_INT 0
41030: PUSH
41031: LD_INT 1
41033: NEG
41034: PUSH
41035: EMPTY
41036: LIST
41037: LIST
41038: PUSH
41039: LD_INT 1
41041: PUSH
41042: LD_INT 0
41044: PUSH
41045: EMPTY
41046: LIST
41047: LIST
41048: PUSH
41049: LD_INT 1
41051: PUSH
41052: LD_INT 1
41054: PUSH
41055: EMPTY
41056: LIST
41057: LIST
41058: PUSH
41059: LD_INT 0
41061: PUSH
41062: LD_INT 1
41064: PUSH
41065: EMPTY
41066: LIST
41067: LIST
41068: PUSH
41069: LD_INT 1
41071: NEG
41072: PUSH
41073: LD_INT 0
41075: PUSH
41076: EMPTY
41077: LIST
41078: LIST
41079: PUSH
41080: LD_INT 1
41082: NEG
41083: PUSH
41084: LD_INT 1
41086: NEG
41087: PUSH
41088: EMPTY
41089: LIST
41090: LIST
41091: PUSH
41092: LD_INT 1
41094: NEG
41095: PUSH
41096: LD_INT 2
41098: NEG
41099: PUSH
41100: EMPTY
41101: LIST
41102: LIST
41103: PUSH
41104: LD_INT 1
41106: PUSH
41107: LD_INT 2
41109: PUSH
41110: EMPTY
41111: LIST
41112: LIST
41113: PUSH
41114: EMPTY
41115: LIST
41116: LIST
41117: LIST
41118: LIST
41119: LIST
41120: LIST
41121: LIST
41122: LIST
41123: LIST
41124: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41125: LD_ADDR_VAR 0 37
41129: PUSH
41130: LD_INT 0
41132: PUSH
41133: LD_INT 0
41135: PUSH
41136: EMPTY
41137: LIST
41138: LIST
41139: PUSH
41140: LD_INT 0
41142: PUSH
41143: LD_INT 1
41145: NEG
41146: PUSH
41147: EMPTY
41148: LIST
41149: LIST
41150: PUSH
41151: LD_INT 1
41153: PUSH
41154: LD_INT 0
41156: PUSH
41157: EMPTY
41158: LIST
41159: LIST
41160: PUSH
41161: LD_INT 1
41163: PUSH
41164: LD_INT 1
41166: PUSH
41167: EMPTY
41168: LIST
41169: LIST
41170: PUSH
41171: LD_INT 0
41173: PUSH
41174: LD_INT 1
41176: PUSH
41177: EMPTY
41178: LIST
41179: LIST
41180: PUSH
41181: LD_INT 1
41183: NEG
41184: PUSH
41185: LD_INT 0
41187: PUSH
41188: EMPTY
41189: LIST
41190: LIST
41191: PUSH
41192: LD_INT 1
41194: NEG
41195: PUSH
41196: LD_INT 1
41198: NEG
41199: PUSH
41200: EMPTY
41201: LIST
41202: LIST
41203: PUSH
41204: LD_INT 1
41206: PUSH
41207: LD_INT 1
41209: NEG
41210: PUSH
41211: EMPTY
41212: LIST
41213: LIST
41214: PUSH
41215: LD_INT 1
41217: NEG
41218: PUSH
41219: LD_INT 1
41221: PUSH
41222: EMPTY
41223: LIST
41224: LIST
41225: PUSH
41226: EMPTY
41227: LIST
41228: LIST
41229: LIST
41230: LIST
41231: LIST
41232: LIST
41233: LIST
41234: LIST
41235: LIST
41236: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41237: LD_ADDR_VAR 0 38
41241: PUSH
41242: LD_INT 0
41244: PUSH
41245: LD_INT 0
41247: PUSH
41248: EMPTY
41249: LIST
41250: LIST
41251: PUSH
41252: LD_INT 0
41254: PUSH
41255: LD_INT 1
41257: NEG
41258: PUSH
41259: EMPTY
41260: LIST
41261: LIST
41262: PUSH
41263: LD_INT 1
41265: PUSH
41266: LD_INT 0
41268: PUSH
41269: EMPTY
41270: LIST
41271: LIST
41272: PUSH
41273: LD_INT 1
41275: PUSH
41276: LD_INT 1
41278: PUSH
41279: EMPTY
41280: LIST
41281: LIST
41282: PUSH
41283: LD_INT 0
41285: PUSH
41286: LD_INT 1
41288: PUSH
41289: EMPTY
41290: LIST
41291: LIST
41292: PUSH
41293: LD_INT 1
41295: NEG
41296: PUSH
41297: LD_INT 0
41299: PUSH
41300: EMPTY
41301: LIST
41302: LIST
41303: PUSH
41304: LD_INT 1
41306: NEG
41307: PUSH
41308: LD_INT 1
41310: NEG
41311: PUSH
41312: EMPTY
41313: LIST
41314: LIST
41315: PUSH
41316: LD_INT 2
41318: PUSH
41319: LD_INT 1
41321: PUSH
41322: EMPTY
41323: LIST
41324: LIST
41325: PUSH
41326: LD_INT 2
41328: NEG
41329: PUSH
41330: LD_INT 1
41332: NEG
41333: PUSH
41334: EMPTY
41335: LIST
41336: LIST
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: LIST
41342: LIST
41343: LIST
41344: LIST
41345: LIST
41346: LIST
41347: LIST
41348: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41349: LD_ADDR_VAR 0 39
41353: PUSH
41354: LD_INT 0
41356: PUSH
41357: LD_INT 0
41359: PUSH
41360: EMPTY
41361: LIST
41362: LIST
41363: PUSH
41364: LD_INT 0
41366: PUSH
41367: LD_INT 1
41369: NEG
41370: PUSH
41371: EMPTY
41372: LIST
41373: LIST
41374: PUSH
41375: LD_INT 1
41377: PUSH
41378: LD_INT 0
41380: PUSH
41381: EMPTY
41382: LIST
41383: LIST
41384: PUSH
41385: LD_INT 1
41387: PUSH
41388: LD_INT 1
41390: PUSH
41391: EMPTY
41392: LIST
41393: LIST
41394: PUSH
41395: LD_INT 0
41397: PUSH
41398: LD_INT 1
41400: PUSH
41401: EMPTY
41402: LIST
41403: LIST
41404: PUSH
41405: LD_INT 1
41407: NEG
41408: PUSH
41409: LD_INT 0
41411: PUSH
41412: EMPTY
41413: LIST
41414: LIST
41415: PUSH
41416: LD_INT 1
41418: NEG
41419: PUSH
41420: LD_INT 1
41422: NEG
41423: PUSH
41424: EMPTY
41425: LIST
41426: LIST
41427: PUSH
41428: LD_INT 1
41430: NEG
41431: PUSH
41432: LD_INT 2
41434: NEG
41435: PUSH
41436: EMPTY
41437: LIST
41438: LIST
41439: PUSH
41440: LD_INT 1
41442: PUSH
41443: LD_INT 2
41445: PUSH
41446: EMPTY
41447: LIST
41448: LIST
41449: PUSH
41450: EMPTY
41451: LIST
41452: LIST
41453: LIST
41454: LIST
41455: LIST
41456: LIST
41457: LIST
41458: LIST
41459: LIST
41460: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41461: LD_ADDR_VAR 0 40
41465: PUSH
41466: LD_INT 0
41468: PUSH
41469: LD_INT 0
41471: PUSH
41472: EMPTY
41473: LIST
41474: LIST
41475: PUSH
41476: LD_INT 0
41478: PUSH
41479: LD_INT 1
41481: NEG
41482: PUSH
41483: EMPTY
41484: LIST
41485: LIST
41486: PUSH
41487: LD_INT 1
41489: PUSH
41490: LD_INT 0
41492: PUSH
41493: EMPTY
41494: LIST
41495: LIST
41496: PUSH
41497: LD_INT 1
41499: PUSH
41500: LD_INT 1
41502: PUSH
41503: EMPTY
41504: LIST
41505: LIST
41506: PUSH
41507: LD_INT 0
41509: PUSH
41510: LD_INT 1
41512: PUSH
41513: EMPTY
41514: LIST
41515: LIST
41516: PUSH
41517: LD_INT 1
41519: NEG
41520: PUSH
41521: LD_INT 0
41523: PUSH
41524: EMPTY
41525: LIST
41526: LIST
41527: PUSH
41528: LD_INT 1
41530: NEG
41531: PUSH
41532: LD_INT 1
41534: NEG
41535: PUSH
41536: EMPTY
41537: LIST
41538: LIST
41539: PUSH
41540: LD_INT 1
41542: PUSH
41543: LD_INT 1
41545: NEG
41546: PUSH
41547: EMPTY
41548: LIST
41549: LIST
41550: PUSH
41551: LD_INT 1
41553: NEG
41554: PUSH
41555: LD_INT 1
41557: PUSH
41558: EMPTY
41559: LIST
41560: LIST
41561: PUSH
41562: EMPTY
41563: LIST
41564: LIST
41565: LIST
41566: LIST
41567: LIST
41568: LIST
41569: LIST
41570: LIST
41571: LIST
41572: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41573: LD_ADDR_VAR 0 41
41577: PUSH
41578: LD_INT 0
41580: PUSH
41581: LD_INT 0
41583: PUSH
41584: EMPTY
41585: LIST
41586: LIST
41587: PUSH
41588: LD_INT 0
41590: PUSH
41591: LD_INT 1
41593: NEG
41594: PUSH
41595: EMPTY
41596: LIST
41597: LIST
41598: PUSH
41599: LD_INT 1
41601: PUSH
41602: LD_INT 0
41604: PUSH
41605: EMPTY
41606: LIST
41607: LIST
41608: PUSH
41609: LD_INT 1
41611: PUSH
41612: LD_INT 1
41614: PUSH
41615: EMPTY
41616: LIST
41617: LIST
41618: PUSH
41619: LD_INT 0
41621: PUSH
41622: LD_INT 1
41624: PUSH
41625: EMPTY
41626: LIST
41627: LIST
41628: PUSH
41629: LD_INT 1
41631: NEG
41632: PUSH
41633: LD_INT 0
41635: PUSH
41636: EMPTY
41637: LIST
41638: LIST
41639: PUSH
41640: LD_INT 1
41642: NEG
41643: PUSH
41644: LD_INT 1
41646: NEG
41647: PUSH
41648: EMPTY
41649: LIST
41650: LIST
41651: PUSH
41652: LD_INT 1
41654: NEG
41655: PUSH
41656: LD_INT 2
41658: NEG
41659: PUSH
41660: EMPTY
41661: LIST
41662: LIST
41663: PUSH
41664: LD_INT 1
41666: PUSH
41667: LD_INT 1
41669: NEG
41670: PUSH
41671: EMPTY
41672: LIST
41673: LIST
41674: PUSH
41675: LD_INT 2
41677: PUSH
41678: LD_INT 0
41680: PUSH
41681: EMPTY
41682: LIST
41683: LIST
41684: PUSH
41685: LD_INT 2
41687: PUSH
41688: LD_INT 1
41690: PUSH
41691: EMPTY
41692: LIST
41693: LIST
41694: PUSH
41695: LD_INT 2
41697: PUSH
41698: LD_INT 2
41700: PUSH
41701: EMPTY
41702: LIST
41703: LIST
41704: PUSH
41705: LD_INT 1
41707: PUSH
41708: LD_INT 2
41710: PUSH
41711: EMPTY
41712: LIST
41713: LIST
41714: PUSH
41715: LD_INT 1
41717: NEG
41718: PUSH
41719: LD_INT 1
41721: PUSH
41722: EMPTY
41723: LIST
41724: LIST
41725: PUSH
41726: LD_INT 2
41728: NEG
41729: PUSH
41730: LD_INT 0
41732: PUSH
41733: EMPTY
41734: LIST
41735: LIST
41736: PUSH
41737: LD_INT 2
41739: NEG
41740: PUSH
41741: LD_INT 1
41743: NEG
41744: PUSH
41745: EMPTY
41746: LIST
41747: LIST
41748: PUSH
41749: LD_INT 2
41751: NEG
41752: PUSH
41753: LD_INT 2
41755: NEG
41756: PUSH
41757: EMPTY
41758: LIST
41759: LIST
41760: PUSH
41761: LD_INT 2
41763: NEG
41764: PUSH
41765: LD_INT 3
41767: NEG
41768: PUSH
41769: EMPTY
41770: LIST
41771: LIST
41772: PUSH
41773: LD_INT 2
41775: PUSH
41776: LD_INT 1
41778: NEG
41779: PUSH
41780: EMPTY
41781: LIST
41782: LIST
41783: PUSH
41784: LD_INT 3
41786: PUSH
41787: LD_INT 0
41789: PUSH
41790: EMPTY
41791: LIST
41792: LIST
41793: PUSH
41794: LD_INT 3
41796: PUSH
41797: LD_INT 1
41799: PUSH
41800: EMPTY
41801: LIST
41802: LIST
41803: PUSH
41804: LD_INT 3
41806: PUSH
41807: LD_INT 2
41809: PUSH
41810: EMPTY
41811: LIST
41812: LIST
41813: PUSH
41814: LD_INT 3
41816: PUSH
41817: LD_INT 3
41819: PUSH
41820: EMPTY
41821: LIST
41822: LIST
41823: PUSH
41824: LD_INT 2
41826: PUSH
41827: LD_INT 3
41829: PUSH
41830: EMPTY
41831: LIST
41832: LIST
41833: PUSH
41834: LD_INT 2
41836: NEG
41837: PUSH
41838: LD_INT 1
41840: PUSH
41841: EMPTY
41842: LIST
41843: LIST
41844: PUSH
41845: LD_INT 3
41847: NEG
41848: PUSH
41849: LD_INT 0
41851: PUSH
41852: EMPTY
41853: LIST
41854: LIST
41855: PUSH
41856: LD_INT 3
41858: NEG
41859: PUSH
41860: LD_INT 1
41862: NEG
41863: PUSH
41864: EMPTY
41865: LIST
41866: LIST
41867: PUSH
41868: LD_INT 3
41870: NEG
41871: PUSH
41872: LD_INT 2
41874: NEG
41875: PUSH
41876: EMPTY
41877: LIST
41878: LIST
41879: PUSH
41880: LD_INT 3
41882: NEG
41883: PUSH
41884: LD_INT 3
41886: NEG
41887: PUSH
41888: EMPTY
41889: LIST
41890: LIST
41891: PUSH
41892: EMPTY
41893: LIST
41894: LIST
41895: LIST
41896: LIST
41897: LIST
41898: LIST
41899: LIST
41900: LIST
41901: LIST
41902: LIST
41903: LIST
41904: LIST
41905: LIST
41906: LIST
41907: LIST
41908: LIST
41909: LIST
41910: LIST
41911: LIST
41912: LIST
41913: LIST
41914: LIST
41915: LIST
41916: LIST
41917: LIST
41918: LIST
41919: LIST
41920: LIST
41921: LIST
41922: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41923: LD_ADDR_VAR 0 42
41927: PUSH
41928: LD_INT 0
41930: PUSH
41931: LD_INT 0
41933: PUSH
41934: EMPTY
41935: LIST
41936: LIST
41937: PUSH
41938: LD_INT 0
41940: PUSH
41941: LD_INT 1
41943: NEG
41944: PUSH
41945: EMPTY
41946: LIST
41947: LIST
41948: PUSH
41949: LD_INT 1
41951: PUSH
41952: LD_INT 0
41954: PUSH
41955: EMPTY
41956: LIST
41957: LIST
41958: PUSH
41959: LD_INT 1
41961: PUSH
41962: LD_INT 1
41964: PUSH
41965: EMPTY
41966: LIST
41967: LIST
41968: PUSH
41969: LD_INT 0
41971: PUSH
41972: LD_INT 1
41974: PUSH
41975: EMPTY
41976: LIST
41977: LIST
41978: PUSH
41979: LD_INT 1
41981: NEG
41982: PUSH
41983: LD_INT 0
41985: PUSH
41986: EMPTY
41987: LIST
41988: LIST
41989: PUSH
41990: LD_INT 1
41992: NEG
41993: PUSH
41994: LD_INT 1
41996: NEG
41997: PUSH
41998: EMPTY
41999: LIST
42000: LIST
42001: PUSH
42002: LD_INT 1
42004: NEG
42005: PUSH
42006: LD_INT 2
42008: NEG
42009: PUSH
42010: EMPTY
42011: LIST
42012: LIST
42013: PUSH
42014: LD_INT 0
42016: PUSH
42017: LD_INT 2
42019: NEG
42020: PUSH
42021: EMPTY
42022: LIST
42023: LIST
42024: PUSH
42025: LD_INT 1
42027: PUSH
42028: LD_INT 1
42030: NEG
42031: PUSH
42032: EMPTY
42033: LIST
42034: LIST
42035: PUSH
42036: LD_INT 2
42038: PUSH
42039: LD_INT 1
42041: PUSH
42042: EMPTY
42043: LIST
42044: LIST
42045: PUSH
42046: LD_INT 2
42048: PUSH
42049: LD_INT 2
42051: PUSH
42052: EMPTY
42053: LIST
42054: LIST
42055: PUSH
42056: LD_INT 1
42058: PUSH
42059: LD_INT 2
42061: PUSH
42062: EMPTY
42063: LIST
42064: LIST
42065: PUSH
42066: LD_INT 0
42068: PUSH
42069: LD_INT 2
42071: PUSH
42072: EMPTY
42073: LIST
42074: LIST
42075: PUSH
42076: LD_INT 1
42078: NEG
42079: PUSH
42080: LD_INT 1
42082: PUSH
42083: EMPTY
42084: LIST
42085: LIST
42086: PUSH
42087: LD_INT 2
42089: NEG
42090: PUSH
42091: LD_INT 1
42093: NEG
42094: PUSH
42095: EMPTY
42096: LIST
42097: LIST
42098: PUSH
42099: LD_INT 2
42101: NEG
42102: PUSH
42103: LD_INT 2
42105: NEG
42106: PUSH
42107: EMPTY
42108: LIST
42109: LIST
42110: PUSH
42111: LD_INT 2
42113: NEG
42114: PUSH
42115: LD_INT 3
42117: NEG
42118: PUSH
42119: EMPTY
42120: LIST
42121: LIST
42122: PUSH
42123: LD_INT 1
42125: NEG
42126: PUSH
42127: LD_INT 3
42129: NEG
42130: PUSH
42131: EMPTY
42132: LIST
42133: LIST
42134: PUSH
42135: LD_INT 0
42137: PUSH
42138: LD_INT 3
42140: NEG
42141: PUSH
42142: EMPTY
42143: LIST
42144: LIST
42145: PUSH
42146: LD_INT 1
42148: PUSH
42149: LD_INT 2
42151: NEG
42152: PUSH
42153: EMPTY
42154: LIST
42155: LIST
42156: PUSH
42157: LD_INT 3
42159: PUSH
42160: LD_INT 2
42162: PUSH
42163: EMPTY
42164: LIST
42165: LIST
42166: PUSH
42167: LD_INT 3
42169: PUSH
42170: LD_INT 3
42172: PUSH
42173: EMPTY
42174: LIST
42175: LIST
42176: PUSH
42177: LD_INT 2
42179: PUSH
42180: LD_INT 3
42182: PUSH
42183: EMPTY
42184: LIST
42185: LIST
42186: PUSH
42187: LD_INT 1
42189: PUSH
42190: LD_INT 3
42192: PUSH
42193: EMPTY
42194: LIST
42195: LIST
42196: PUSH
42197: LD_INT 0
42199: PUSH
42200: LD_INT 3
42202: PUSH
42203: EMPTY
42204: LIST
42205: LIST
42206: PUSH
42207: LD_INT 1
42209: NEG
42210: PUSH
42211: LD_INT 2
42213: PUSH
42214: EMPTY
42215: LIST
42216: LIST
42217: PUSH
42218: LD_INT 3
42220: NEG
42221: PUSH
42222: LD_INT 2
42224: NEG
42225: PUSH
42226: EMPTY
42227: LIST
42228: LIST
42229: PUSH
42230: LD_INT 3
42232: NEG
42233: PUSH
42234: LD_INT 3
42236: NEG
42237: PUSH
42238: EMPTY
42239: LIST
42240: LIST
42241: PUSH
42242: EMPTY
42243: LIST
42244: LIST
42245: LIST
42246: LIST
42247: LIST
42248: LIST
42249: LIST
42250: LIST
42251: LIST
42252: LIST
42253: LIST
42254: LIST
42255: LIST
42256: LIST
42257: LIST
42258: LIST
42259: LIST
42260: LIST
42261: LIST
42262: LIST
42263: LIST
42264: LIST
42265: LIST
42266: LIST
42267: LIST
42268: LIST
42269: LIST
42270: LIST
42271: LIST
42272: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42273: LD_ADDR_VAR 0 43
42277: PUSH
42278: LD_INT 0
42280: PUSH
42281: LD_INT 0
42283: PUSH
42284: EMPTY
42285: LIST
42286: LIST
42287: PUSH
42288: LD_INT 0
42290: PUSH
42291: LD_INT 1
42293: NEG
42294: PUSH
42295: EMPTY
42296: LIST
42297: LIST
42298: PUSH
42299: LD_INT 1
42301: PUSH
42302: LD_INT 0
42304: PUSH
42305: EMPTY
42306: LIST
42307: LIST
42308: PUSH
42309: LD_INT 1
42311: PUSH
42312: LD_INT 1
42314: PUSH
42315: EMPTY
42316: LIST
42317: LIST
42318: PUSH
42319: LD_INT 0
42321: PUSH
42322: LD_INT 1
42324: PUSH
42325: EMPTY
42326: LIST
42327: LIST
42328: PUSH
42329: LD_INT 1
42331: NEG
42332: PUSH
42333: LD_INT 0
42335: PUSH
42336: EMPTY
42337: LIST
42338: LIST
42339: PUSH
42340: LD_INT 1
42342: NEG
42343: PUSH
42344: LD_INT 1
42346: NEG
42347: PUSH
42348: EMPTY
42349: LIST
42350: LIST
42351: PUSH
42352: LD_INT 1
42354: NEG
42355: PUSH
42356: LD_INT 2
42358: NEG
42359: PUSH
42360: EMPTY
42361: LIST
42362: LIST
42363: PUSH
42364: LD_INT 0
42366: PUSH
42367: LD_INT 2
42369: NEG
42370: PUSH
42371: EMPTY
42372: LIST
42373: LIST
42374: PUSH
42375: LD_INT 1
42377: PUSH
42378: LD_INT 1
42380: NEG
42381: PUSH
42382: EMPTY
42383: LIST
42384: LIST
42385: PUSH
42386: LD_INT 2
42388: PUSH
42389: LD_INT 0
42391: PUSH
42392: EMPTY
42393: LIST
42394: LIST
42395: PUSH
42396: LD_INT 2
42398: PUSH
42399: LD_INT 1
42401: PUSH
42402: EMPTY
42403: LIST
42404: LIST
42405: PUSH
42406: LD_INT 1
42408: PUSH
42409: LD_INT 2
42411: PUSH
42412: EMPTY
42413: LIST
42414: LIST
42415: PUSH
42416: LD_INT 0
42418: PUSH
42419: LD_INT 2
42421: PUSH
42422: EMPTY
42423: LIST
42424: LIST
42425: PUSH
42426: LD_INT 1
42428: NEG
42429: PUSH
42430: LD_INT 1
42432: PUSH
42433: EMPTY
42434: LIST
42435: LIST
42436: PUSH
42437: LD_INT 2
42439: NEG
42440: PUSH
42441: LD_INT 0
42443: PUSH
42444: EMPTY
42445: LIST
42446: LIST
42447: PUSH
42448: LD_INT 2
42450: NEG
42451: PUSH
42452: LD_INT 1
42454: NEG
42455: PUSH
42456: EMPTY
42457: LIST
42458: LIST
42459: PUSH
42460: LD_INT 1
42462: NEG
42463: PUSH
42464: LD_INT 3
42466: NEG
42467: PUSH
42468: EMPTY
42469: LIST
42470: LIST
42471: PUSH
42472: LD_INT 0
42474: PUSH
42475: LD_INT 3
42477: NEG
42478: PUSH
42479: EMPTY
42480: LIST
42481: LIST
42482: PUSH
42483: LD_INT 1
42485: PUSH
42486: LD_INT 2
42488: NEG
42489: PUSH
42490: EMPTY
42491: LIST
42492: LIST
42493: PUSH
42494: LD_INT 2
42496: PUSH
42497: LD_INT 1
42499: NEG
42500: PUSH
42501: EMPTY
42502: LIST
42503: LIST
42504: PUSH
42505: LD_INT 3
42507: PUSH
42508: LD_INT 0
42510: PUSH
42511: EMPTY
42512: LIST
42513: LIST
42514: PUSH
42515: LD_INT 3
42517: PUSH
42518: LD_INT 1
42520: PUSH
42521: EMPTY
42522: LIST
42523: LIST
42524: PUSH
42525: LD_INT 1
42527: PUSH
42528: LD_INT 3
42530: PUSH
42531: EMPTY
42532: LIST
42533: LIST
42534: PUSH
42535: LD_INT 0
42537: PUSH
42538: LD_INT 3
42540: PUSH
42541: EMPTY
42542: LIST
42543: LIST
42544: PUSH
42545: LD_INT 1
42547: NEG
42548: PUSH
42549: LD_INT 2
42551: PUSH
42552: EMPTY
42553: LIST
42554: LIST
42555: PUSH
42556: LD_INT 2
42558: NEG
42559: PUSH
42560: LD_INT 1
42562: PUSH
42563: EMPTY
42564: LIST
42565: LIST
42566: PUSH
42567: LD_INT 3
42569: NEG
42570: PUSH
42571: LD_INT 0
42573: PUSH
42574: EMPTY
42575: LIST
42576: LIST
42577: PUSH
42578: LD_INT 3
42580: NEG
42581: PUSH
42582: LD_INT 1
42584: NEG
42585: PUSH
42586: EMPTY
42587: LIST
42588: LIST
42589: PUSH
42590: EMPTY
42591: LIST
42592: LIST
42593: LIST
42594: LIST
42595: LIST
42596: LIST
42597: LIST
42598: LIST
42599: LIST
42600: LIST
42601: LIST
42602: LIST
42603: LIST
42604: LIST
42605: LIST
42606: LIST
42607: LIST
42608: LIST
42609: LIST
42610: LIST
42611: LIST
42612: LIST
42613: LIST
42614: LIST
42615: LIST
42616: LIST
42617: LIST
42618: LIST
42619: LIST
42620: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42621: LD_ADDR_VAR 0 44
42625: PUSH
42626: LD_INT 0
42628: PUSH
42629: LD_INT 0
42631: PUSH
42632: EMPTY
42633: LIST
42634: LIST
42635: PUSH
42636: LD_INT 0
42638: PUSH
42639: LD_INT 1
42641: NEG
42642: PUSH
42643: EMPTY
42644: LIST
42645: LIST
42646: PUSH
42647: LD_INT 1
42649: PUSH
42650: LD_INT 0
42652: PUSH
42653: EMPTY
42654: LIST
42655: LIST
42656: PUSH
42657: LD_INT 1
42659: PUSH
42660: LD_INT 1
42662: PUSH
42663: EMPTY
42664: LIST
42665: LIST
42666: PUSH
42667: LD_INT 0
42669: PUSH
42670: LD_INT 1
42672: PUSH
42673: EMPTY
42674: LIST
42675: LIST
42676: PUSH
42677: LD_INT 1
42679: NEG
42680: PUSH
42681: LD_INT 0
42683: PUSH
42684: EMPTY
42685: LIST
42686: LIST
42687: PUSH
42688: LD_INT 1
42690: NEG
42691: PUSH
42692: LD_INT 1
42694: NEG
42695: PUSH
42696: EMPTY
42697: LIST
42698: LIST
42699: PUSH
42700: LD_INT 1
42702: NEG
42703: PUSH
42704: LD_INT 2
42706: NEG
42707: PUSH
42708: EMPTY
42709: LIST
42710: LIST
42711: PUSH
42712: LD_INT 1
42714: PUSH
42715: LD_INT 1
42717: NEG
42718: PUSH
42719: EMPTY
42720: LIST
42721: LIST
42722: PUSH
42723: LD_INT 2
42725: PUSH
42726: LD_INT 0
42728: PUSH
42729: EMPTY
42730: LIST
42731: LIST
42732: PUSH
42733: LD_INT 2
42735: PUSH
42736: LD_INT 1
42738: PUSH
42739: EMPTY
42740: LIST
42741: LIST
42742: PUSH
42743: LD_INT 2
42745: PUSH
42746: LD_INT 2
42748: PUSH
42749: EMPTY
42750: LIST
42751: LIST
42752: PUSH
42753: LD_INT 1
42755: PUSH
42756: LD_INT 2
42758: PUSH
42759: EMPTY
42760: LIST
42761: LIST
42762: PUSH
42763: LD_INT 1
42765: NEG
42766: PUSH
42767: LD_INT 1
42769: PUSH
42770: EMPTY
42771: LIST
42772: LIST
42773: PUSH
42774: LD_INT 2
42776: NEG
42777: PUSH
42778: LD_INT 0
42780: PUSH
42781: EMPTY
42782: LIST
42783: LIST
42784: PUSH
42785: LD_INT 2
42787: NEG
42788: PUSH
42789: LD_INT 1
42791: NEG
42792: PUSH
42793: EMPTY
42794: LIST
42795: LIST
42796: PUSH
42797: LD_INT 2
42799: NEG
42800: PUSH
42801: LD_INT 2
42803: NEG
42804: PUSH
42805: EMPTY
42806: LIST
42807: LIST
42808: PUSH
42809: LD_INT 2
42811: NEG
42812: PUSH
42813: LD_INT 3
42815: NEG
42816: PUSH
42817: EMPTY
42818: LIST
42819: LIST
42820: PUSH
42821: LD_INT 2
42823: PUSH
42824: LD_INT 1
42826: NEG
42827: PUSH
42828: EMPTY
42829: LIST
42830: LIST
42831: PUSH
42832: LD_INT 3
42834: PUSH
42835: LD_INT 0
42837: PUSH
42838: EMPTY
42839: LIST
42840: LIST
42841: PUSH
42842: LD_INT 3
42844: PUSH
42845: LD_INT 1
42847: PUSH
42848: EMPTY
42849: LIST
42850: LIST
42851: PUSH
42852: LD_INT 3
42854: PUSH
42855: LD_INT 2
42857: PUSH
42858: EMPTY
42859: LIST
42860: LIST
42861: PUSH
42862: LD_INT 3
42864: PUSH
42865: LD_INT 3
42867: PUSH
42868: EMPTY
42869: LIST
42870: LIST
42871: PUSH
42872: LD_INT 2
42874: PUSH
42875: LD_INT 3
42877: PUSH
42878: EMPTY
42879: LIST
42880: LIST
42881: PUSH
42882: LD_INT 2
42884: NEG
42885: PUSH
42886: LD_INT 1
42888: PUSH
42889: EMPTY
42890: LIST
42891: LIST
42892: PUSH
42893: LD_INT 3
42895: NEG
42896: PUSH
42897: LD_INT 0
42899: PUSH
42900: EMPTY
42901: LIST
42902: LIST
42903: PUSH
42904: LD_INT 3
42906: NEG
42907: PUSH
42908: LD_INT 1
42910: NEG
42911: PUSH
42912: EMPTY
42913: LIST
42914: LIST
42915: PUSH
42916: LD_INT 3
42918: NEG
42919: PUSH
42920: LD_INT 2
42922: NEG
42923: PUSH
42924: EMPTY
42925: LIST
42926: LIST
42927: PUSH
42928: LD_INT 3
42930: NEG
42931: PUSH
42932: LD_INT 3
42934: NEG
42935: PUSH
42936: EMPTY
42937: LIST
42938: LIST
42939: PUSH
42940: EMPTY
42941: LIST
42942: LIST
42943: LIST
42944: LIST
42945: LIST
42946: LIST
42947: LIST
42948: LIST
42949: LIST
42950: LIST
42951: LIST
42952: LIST
42953: LIST
42954: LIST
42955: LIST
42956: LIST
42957: LIST
42958: LIST
42959: LIST
42960: LIST
42961: LIST
42962: LIST
42963: LIST
42964: LIST
42965: LIST
42966: LIST
42967: LIST
42968: LIST
42969: LIST
42970: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42971: LD_ADDR_VAR 0 45
42975: PUSH
42976: LD_INT 0
42978: PUSH
42979: LD_INT 0
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: PUSH
42986: LD_INT 0
42988: PUSH
42989: LD_INT 1
42991: NEG
42992: PUSH
42993: EMPTY
42994: LIST
42995: LIST
42996: PUSH
42997: LD_INT 1
42999: PUSH
43000: LD_INT 0
43002: PUSH
43003: EMPTY
43004: LIST
43005: LIST
43006: PUSH
43007: LD_INT 1
43009: PUSH
43010: LD_INT 1
43012: PUSH
43013: EMPTY
43014: LIST
43015: LIST
43016: PUSH
43017: LD_INT 0
43019: PUSH
43020: LD_INT 1
43022: PUSH
43023: EMPTY
43024: LIST
43025: LIST
43026: PUSH
43027: LD_INT 1
43029: NEG
43030: PUSH
43031: LD_INT 0
43033: PUSH
43034: EMPTY
43035: LIST
43036: LIST
43037: PUSH
43038: LD_INT 1
43040: NEG
43041: PUSH
43042: LD_INT 1
43044: NEG
43045: PUSH
43046: EMPTY
43047: LIST
43048: LIST
43049: PUSH
43050: LD_INT 1
43052: NEG
43053: PUSH
43054: LD_INT 2
43056: NEG
43057: PUSH
43058: EMPTY
43059: LIST
43060: LIST
43061: PUSH
43062: LD_INT 0
43064: PUSH
43065: LD_INT 2
43067: NEG
43068: PUSH
43069: EMPTY
43070: LIST
43071: LIST
43072: PUSH
43073: LD_INT 1
43075: PUSH
43076: LD_INT 1
43078: NEG
43079: PUSH
43080: EMPTY
43081: LIST
43082: LIST
43083: PUSH
43084: LD_INT 2
43086: PUSH
43087: LD_INT 1
43089: PUSH
43090: EMPTY
43091: LIST
43092: LIST
43093: PUSH
43094: LD_INT 2
43096: PUSH
43097: LD_INT 2
43099: PUSH
43100: EMPTY
43101: LIST
43102: LIST
43103: PUSH
43104: LD_INT 1
43106: PUSH
43107: LD_INT 2
43109: PUSH
43110: EMPTY
43111: LIST
43112: LIST
43113: PUSH
43114: LD_INT 0
43116: PUSH
43117: LD_INT 2
43119: PUSH
43120: EMPTY
43121: LIST
43122: LIST
43123: PUSH
43124: LD_INT 1
43126: NEG
43127: PUSH
43128: LD_INT 1
43130: PUSH
43131: EMPTY
43132: LIST
43133: LIST
43134: PUSH
43135: LD_INT 2
43137: NEG
43138: PUSH
43139: LD_INT 1
43141: NEG
43142: PUSH
43143: EMPTY
43144: LIST
43145: LIST
43146: PUSH
43147: LD_INT 2
43149: NEG
43150: PUSH
43151: LD_INT 2
43153: NEG
43154: PUSH
43155: EMPTY
43156: LIST
43157: LIST
43158: PUSH
43159: LD_INT 2
43161: NEG
43162: PUSH
43163: LD_INT 3
43165: NEG
43166: PUSH
43167: EMPTY
43168: LIST
43169: LIST
43170: PUSH
43171: LD_INT 1
43173: NEG
43174: PUSH
43175: LD_INT 3
43177: NEG
43178: PUSH
43179: EMPTY
43180: LIST
43181: LIST
43182: PUSH
43183: LD_INT 0
43185: PUSH
43186: LD_INT 3
43188: NEG
43189: PUSH
43190: EMPTY
43191: LIST
43192: LIST
43193: PUSH
43194: LD_INT 1
43196: PUSH
43197: LD_INT 2
43199: NEG
43200: PUSH
43201: EMPTY
43202: LIST
43203: LIST
43204: PUSH
43205: LD_INT 3
43207: PUSH
43208: LD_INT 2
43210: PUSH
43211: EMPTY
43212: LIST
43213: LIST
43214: PUSH
43215: LD_INT 3
43217: PUSH
43218: LD_INT 3
43220: PUSH
43221: EMPTY
43222: LIST
43223: LIST
43224: PUSH
43225: LD_INT 2
43227: PUSH
43228: LD_INT 3
43230: PUSH
43231: EMPTY
43232: LIST
43233: LIST
43234: PUSH
43235: LD_INT 1
43237: PUSH
43238: LD_INT 3
43240: PUSH
43241: EMPTY
43242: LIST
43243: LIST
43244: PUSH
43245: LD_INT 0
43247: PUSH
43248: LD_INT 3
43250: PUSH
43251: EMPTY
43252: LIST
43253: LIST
43254: PUSH
43255: LD_INT 1
43257: NEG
43258: PUSH
43259: LD_INT 2
43261: PUSH
43262: EMPTY
43263: LIST
43264: LIST
43265: PUSH
43266: LD_INT 3
43268: NEG
43269: PUSH
43270: LD_INT 2
43272: NEG
43273: PUSH
43274: EMPTY
43275: LIST
43276: LIST
43277: PUSH
43278: LD_INT 3
43280: NEG
43281: PUSH
43282: LD_INT 3
43284: NEG
43285: PUSH
43286: EMPTY
43287: LIST
43288: LIST
43289: PUSH
43290: EMPTY
43291: LIST
43292: LIST
43293: LIST
43294: LIST
43295: LIST
43296: LIST
43297: LIST
43298: LIST
43299: LIST
43300: LIST
43301: LIST
43302: LIST
43303: LIST
43304: LIST
43305: LIST
43306: LIST
43307: LIST
43308: LIST
43309: LIST
43310: LIST
43311: LIST
43312: LIST
43313: LIST
43314: LIST
43315: LIST
43316: LIST
43317: LIST
43318: LIST
43319: LIST
43320: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43321: LD_ADDR_VAR 0 46
43325: PUSH
43326: LD_INT 0
43328: PUSH
43329: LD_INT 0
43331: PUSH
43332: EMPTY
43333: LIST
43334: LIST
43335: PUSH
43336: LD_INT 0
43338: PUSH
43339: LD_INT 1
43341: NEG
43342: PUSH
43343: EMPTY
43344: LIST
43345: LIST
43346: PUSH
43347: LD_INT 1
43349: PUSH
43350: LD_INT 0
43352: PUSH
43353: EMPTY
43354: LIST
43355: LIST
43356: PUSH
43357: LD_INT 1
43359: PUSH
43360: LD_INT 1
43362: PUSH
43363: EMPTY
43364: LIST
43365: LIST
43366: PUSH
43367: LD_INT 0
43369: PUSH
43370: LD_INT 1
43372: PUSH
43373: EMPTY
43374: LIST
43375: LIST
43376: PUSH
43377: LD_INT 1
43379: NEG
43380: PUSH
43381: LD_INT 0
43383: PUSH
43384: EMPTY
43385: LIST
43386: LIST
43387: PUSH
43388: LD_INT 1
43390: NEG
43391: PUSH
43392: LD_INT 1
43394: NEG
43395: PUSH
43396: EMPTY
43397: LIST
43398: LIST
43399: PUSH
43400: LD_INT 1
43402: NEG
43403: PUSH
43404: LD_INT 2
43406: NEG
43407: PUSH
43408: EMPTY
43409: LIST
43410: LIST
43411: PUSH
43412: LD_INT 0
43414: PUSH
43415: LD_INT 2
43417: NEG
43418: PUSH
43419: EMPTY
43420: LIST
43421: LIST
43422: PUSH
43423: LD_INT 1
43425: PUSH
43426: LD_INT 1
43428: NEG
43429: PUSH
43430: EMPTY
43431: LIST
43432: LIST
43433: PUSH
43434: LD_INT 2
43436: PUSH
43437: LD_INT 0
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: PUSH
43444: LD_INT 2
43446: PUSH
43447: LD_INT 1
43449: PUSH
43450: EMPTY
43451: LIST
43452: LIST
43453: PUSH
43454: LD_INT 1
43456: PUSH
43457: LD_INT 2
43459: PUSH
43460: EMPTY
43461: LIST
43462: LIST
43463: PUSH
43464: LD_INT 0
43466: PUSH
43467: LD_INT 2
43469: PUSH
43470: EMPTY
43471: LIST
43472: LIST
43473: PUSH
43474: LD_INT 1
43476: NEG
43477: PUSH
43478: LD_INT 1
43480: PUSH
43481: EMPTY
43482: LIST
43483: LIST
43484: PUSH
43485: LD_INT 2
43487: NEG
43488: PUSH
43489: LD_INT 0
43491: PUSH
43492: EMPTY
43493: LIST
43494: LIST
43495: PUSH
43496: LD_INT 2
43498: NEG
43499: PUSH
43500: LD_INT 1
43502: NEG
43503: PUSH
43504: EMPTY
43505: LIST
43506: LIST
43507: PUSH
43508: LD_INT 1
43510: NEG
43511: PUSH
43512: LD_INT 3
43514: NEG
43515: PUSH
43516: EMPTY
43517: LIST
43518: LIST
43519: PUSH
43520: LD_INT 0
43522: PUSH
43523: LD_INT 3
43525: NEG
43526: PUSH
43527: EMPTY
43528: LIST
43529: LIST
43530: PUSH
43531: LD_INT 1
43533: PUSH
43534: LD_INT 2
43536: NEG
43537: PUSH
43538: EMPTY
43539: LIST
43540: LIST
43541: PUSH
43542: LD_INT 2
43544: PUSH
43545: LD_INT 1
43547: NEG
43548: PUSH
43549: EMPTY
43550: LIST
43551: LIST
43552: PUSH
43553: LD_INT 3
43555: PUSH
43556: LD_INT 0
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: PUSH
43563: LD_INT 3
43565: PUSH
43566: LD_INT 1
43568: PUSH
43569: EMPTY
43570: LIST
43571: LIST
43572: PUSH
43573: LD_INT 1
43575: PUSH
43576: LD_INT 3
43578: PUSH
43579: EMPTY
43580: LIST
43581: LIST
43582: PUSH
43583: LD_INT 0
43585: PUSH
43586: LD_INT 3
43588: PUSH
43589: EMPTY
43590: LIST
43591: LIST
43592: PUSH
43593: LD_INT 1
43595: NEG
43596: PUSH
43597: LD_INT 2
43599: PUSH
43600: EMPTY
43601: LIST
43602: LIST
43603: PUSH
43604: LD_INT 2
43606: NEG
43607: PUSH
43608: LD_INT 1
43610: PUSH
43611: EMPTY
43612: LIST
43613: LIST
43614: PUSH
43615: LD_INT 3
43617: NEG
43618: PUSH
43619: LD_INT 0
43621: PUSH
43622: EMPTY
43623: LIST
43624: LIST
43625: PUSH
43626: LD_INT 3
43628: NEG
43629: PUSH
43630: LD_INT 1
43632: NEG
43633: PUSH
43634: EMPTY
43635: LIST
43636: LIST
43637: PUSH
43638: EMPTY
43639: LIST
43640: LIST
43641: LIST
43642: LIST
43643: LIST
43644: LIST
43645: LIST
43646: LIST
43647: LIST
43648: LIST
43649: LIST
43650: LIST
43651: LIST
43652: LIST
43653: LIST
43654: LIST
43655: LIST
43656: LIST
43657: LIST
43658: LIST
43659: LIST
43660: LIST
43661: LIST
43662: LIST
43663: LIST
43664: LIST
43665: LIST
43666: LIST
43667: LIST
43668: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43669: LD_ADDR_VAR 0 47
43673: PUSH
43674: LD_INT 0
43676: PUSH
43677: LD_INT 0
43679: PUSH
43680: EMPTY
43681: LIST
43682: LIST
43683: PUSH
43684: LD_INT 0
43686: PUSH
43687: LD_INT 1
43689: NEG
43690: PUSH
43691: EMPTY
43692: LIST
43693: LIST
43694: PUSH
43695: LD_INT 1
43697: PUSH
43698: LD_INT 0
43700: PUSH
43701: EMPTY
43702: LIST
43703: LIST
43704: PUSH
43705: LD_INT 1
43707: PUSH
43708: LD_INT 1
43710: PUSH
43711: EMPTY
43712: LIST
43713: LIST
43714: PUSH
43715: LD_INT 0
43717: PUSH
43718: LD_INT 1
43720: PUSH
43721: EMPTY
43722: LIST
43723: LIST
43724: PUSH
43725: LD_INT 1
43727: NEG
43728: PUSH
43729: LD_INT 0
43731: PUSH
43732: EMPTY
43733: LIST
43734: LIST
43735: PUSH
43736: LD_INT 1
43738: NEG
43739: PUSH
43740: LD_INT 1
43742: NEG
43743: PUSH
43744: EMPTY
43745: LIST
43746: LIST
43747: PUSH
43748: LD_INT 1
43750: NEG
43751: PUSH
43752: LD_INT 2
43754: NEG
43755: PUSH
43756: EMPTY
43757: LIST
43758: LIST
43759: PUSH
43760: LD_INT 0
43762: PUSH
43763: LD_INT 2
43765: NEG
43766: PUSH
43767: EMPTY
43768: LIST
43769: LIST
43770: PUSH
43771: LD_INT 1
43773: PUSH
43774: LD_INT 1
43776: NEG
43777: PUSH
43778: EMPTY
43779: LIST
43780: LIST
43781: PUSH
43782: LD_INT 2
43784: NEG
43785: PUSH
43786: LD_INT 1
43788: NEG
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: PUSH
43794: LD_INT 2
43796: NEG
43797: PUSH
43798: LD_INT 2
43800: NEG
43801: PUSH
43802: EMPTY
43803: LIST
43804: LIST
43805: PUSH
43806: EMPTY
43807: LIST
43808: LIST
43809: LIST
43810: LIST
43811: LIST
43812: LIST
43813: LIST
43814: LIST
43815: LIST
43816: LIST
43817: LIST
43818: LIST
43819: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
43820: LD_ADDR_VAR 0 48
43824: PUSH
43825: LD_INT 0
43827: PUSH
43828: LD_INT 0
43830: PUSH
43831: EMPTY
43832: LIST
43833: LIST
43834: PUSH
43835: LD_INT 0
43837: PUSH
43838: LD_INT 1
43840: NEG
43841: PUSH
43842: EMPTY
43843: LIST
43844: LIST
43845: PUSH
43846: LD_INT 1
43848: PUSH
43849: LD_INT 0
43851: PUSH
43852: EMPTY
43853: LIST
43854: LIST
43855: PUSH
43856: LD_INT 1
43858: PUSH
43859: LD_INT 1
43861: PUSH
43862: EMPTY
43863: LIST
43864: LIST
43865: PUSH
43866: LD_INT 0
43868: PUSH
43869: LD_INT 1
43871: PUSH
43872: EMPTY
43873: LIST
43874: LIST
43875: PUSH
43876: LD_INT 1
43878: NEG
43879: PUSH
43880: LD_INT 0
43882: PUSH
43883: EMPTY
43884: LIST
43885: LIST
43886: PUSH
43887: LD_INT 1
43889: NEG
43890: PUSH
43891: LD_INT 1
43893: NEG
43894: PUSH
43895: EMPTY
43896: LIST
43897: LIST
43898: PUSH
43899: LD_INT 1
43901: NEG
43902: PUSH
43903: LD_INT 2
43905: NEG
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: PUSH
43911: LD_INT 0
43913: PUSH
43914: LD_INT 2
43916: NEG
43917: PUSH
43918: EMPTY
43919: LIST
43920: LIST
43921: PUSH
43922: LD_INT 1
43924: PUSH
43925: LD_INT 1
43927: NEG
43928: PUSH
43929: EMPTY
43930: LIST
43931: LIST
43932: PUSH
43933: LD_INT 2
43935: PUSH
43936: LD_INT 0
43938: PUSH
43939: EMPTY
43940: LIST
43941: LIST
43942: PUSH
43943: LD_INT 2
43945: PUSH
43946: LD_INT 1
43948: PUSH
43949: EMPTY
43950: LIST
43951: LIST
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: LIST
43957: LIST
43958: LIST
43959: LIST
43960: LIST
43961: LIST
43962: LIST
43963: LIST
43964: LIST
43965: LIST
43966: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
43967: LD_ADDR_VAR 0 49
43971: PUSH
43972: LD_INT 0
43974: PUSH
43975: LD_INT 0
43977: PUSH
43978: EMPTY
43979: LIST
43980: LIST
43981: PUSH
43982: LD_INT 0
43984: PUSH
43985: LD_INT 1
43987: NEG
43988: PUSH
43989: EMPTY
43990: LIST
43991: LIST
43992: PUSH
43993: LD_INT 1
43995: PUSH
43996: LD_INT 0
43998: PUSH
43999: EMPTY
44000: LIST
44001: LIST
44002: PUSH
44003: LD_INT 1
44005: PUSH
44006: LD_INT 1
44008: PUSH
44009: EMPTY
44010: LIST
44011: LIST
44012: PUSH
44013: LD_INT 0
44015: PUSH
44016: LD_INT 1
44018: PUSH
44019: EMPTY
44020: LIST
44021: LIST
44022: PUSH
44023: LD_INT 1
44025: NEG
44026: PUSH
44027: LD_INT 0
44029: PUSH
44030: EMPTY
44031: LIST
44032: LIST
44033: PUSH
44034: LD_INT 1
44036: NEG
44037: PUSH
44038: LD_INT 1
44040: NEG
44041: PUSH
44042: EMPTY
44043: LIST
44044: LIST
44045: PUSH
44046: LD_INT 1
44048: PUSH
44049: LD_INT 1
44051: NEG
44052: PUSH
44053: EMPTY
44054: LIST
44055: LIST
44056: PUSH
44057: LD_INT 2
44059: PUSH
44060: LD_INT 0
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: PUSH
44067: LD_INT 2
44069: PUSH
44070: LD_INT 1
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: PUSH
44077: LD_INT 2
44079: PUSH
44080: LD_INT 2
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: PUSH
44087: LD_INT 1
44089: PUSH
44090: LD_INT 2
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: LIST
44101: LIST
44102: LIST
44103: LIST
44104: LIST
44105: LIST
44106: LIST
44107: LIST
44108: LIST
44109: LIST
44110: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44111: LD_ADDR_VAR 0 50
44115: PUSH
44116: LD_INT 0
44118: PUSH
44119: LD_INT 0
44121: PUSH
44122: EMPTY
44123: LIST
44124: LIST
44125: PUSH
44126: LD_INT 0
44128: PUSH
44129: LD_INT 1
44131: NEG
44132: PUSH
44133: EMPTY
44134: LIST
44135: LIST
44136: PUSH
44137: LD_INT 1
44139: PUSH
44140: LD_INT 0
44142: PUSH
44143: EMPTY
44144: LIST
44145: LIST
44146: PUSH
44147: LD_INT 1
44149: PUSH
44150: LD_INT 1
44152: PUSH
44153: EMPTY
44154: LIST
44155: LIST
44156: PUSH
44157: LD_INT 0
44159: PUSH
44160: LD_INT 1
44162: PUSH
44163: EMPTY
44164: LIST
44165: LIST
44166: PUSH
44167: LD_INT 1
44169: NEG
44170: PUSH
44171: LD_INT 0
44173: PUSH
44174: EMPTY
44175: LIST
44176: LIST
44177: PUSH
44178: LD_INT 1
44180: NEG
44181: PUSH
44182: LD_INT 1
44184: NEG
44185: PUSH
44186: EMPTY
44187: LIST
44188: LIST
44189: PUSH
44190: LD_INT 2
44192: PUSH
44193: LD_INT 1
44195: PUSH
44196: EMPTY
44197: LIST
44198: LIST
44199: PUSH
44200: LD_INT 2
44202: PUSH
44203: LD_INT 2
44205: PUSH
44206: EMPTY
44207: LIST
44208: LIST
44209: PUSH
44210: LD_INT 1
44212: PUSH
44213: LD_INT 2
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: PUSH
44220: LD_INT 0
44222: PUSH
44223: LD_INT 2
44225: PUSH
44226: EMPTY
44227: LIST
44228: LIST
44229: PUSH
44230: LD_INT 1
44232: NEG
44233: PUSH
44234: LD_INT 1
44236: PUSH
44237: EMPTY
44238: LIST
44239: LIST
44240: PUSH
44241: EMPTY
44242: LIST
44243: LIST
44244: LIST
44245: LIST
44246: LIST
44247: LIST
44248: LIST
44249: LIST
44250: LIST
44251: LIST
44252: LIST
44253: LIST
44254: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44255: LD_ADDR_VAR 0 51
44259: PUSH
44260: LD_INT 0
44262: PUSH
44263: LD_INT 0
44265: PUSH
44266: EMPTY
44267: LIST
44268: LIST
44269: PUSH
44270: LD_INT 0
44272: PUSH
44273: LD_INT 1
44275: NEG
44276: PUSH
44277: EMPTY
44278: LIST
44279: LIST
44280: PUSH
44281: LD_INT 1
44283: PUSH
44284: LD_INT 0
44286: PUSH
44287: EMPTY
44288: LIST
44289: LIST
44290: PUSH
44291: LD_INT 1
44293: PUSH
44294: LD_INT 1
44296: PUSH
44297: EMPTY
44298: LIST
44299: LIST
44300: PUSH
44301: LD_INT 0
44303: PUSH
44304: LD_INT 1
44306: PUSH
44307: EMPTY
44308: LIST
44309: LIST
44310: PUSH
44311: LD_INT 1
44313: NEG
44314: PUSH
44315: LD_INT 0
44317: PUSH
44318: EMPTY
44319: LIST
44320: LIST
44321: PUSH
44322: LD_INT 1
44324: NEG
44325: PUSH
44326: LD_INT 1
44328: NEG
44329: PUSH
44330: EMPTY
44331: LIST
44332: LIST
44333: PUSH
44334: LD_INT 1
44336: PUSH
44337: LD_INT 2
44339: PUSH
44340: EMPTY
44341: LIST
44342: LIST
44343: PUSH
44344: LD_INT 0
44346: PUSH
44347: LD_INT 2
44349: PUSH
44350: EMPTY
44351: LIST
44352: LIST
44353: PUSH
44354: LD_INT 1
44356: NEG
44357: PUSH
44358: LD_INT 1
44360: PUSH
44361: EMPTY
44362: LIST
44363: LIST
44364: PUSH
44365: LD_INT 2
44367: NEG
44368: PUSH
44369: LD_INT 0
44371: PUSH
44372: EMPTY
44373: LIST
44374: LIST
44375: PUSH
44376: LD_INT 2
44378: NEG
44379: PUSH
44380: LD_INT 1
44382: NEG
44383: PUSH
44384: EMPTY
44385: LIST
44386: LIST
44387: PUSH
44388: EMPTY
44389: LIST
44390: LIST
44391: LIST
44392: LIST
44393: LIST
44394: LIST
44395: LIST
44396: LIST
44397: LIST
44398: LIST
44399: LIST
44400: LIST
44401: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44402: LD_ADDR_VAR 0 52
44406: PUSH
44407: LD_INT 0
44409: PUSH
44410: LD_INT 0
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: PUSH
44417: LD_INT 0
44419: PUSH
44420: LD_INT 1
44422: NEG
44423: PUSH
44424: EMPTY
44425: LIST
44426: LIST
44427: PUSH
44428: LD_INT 1
44430: PUSH
44431: LD_INT 0
44433: PUSH
44434: EMPTY
44435: LIST
44436: LIST
44437: PUSH
44438: LD_INT 1
44440: PUSH
44441: LD_INT 1
44443: PUSH
44444: EMPTY
44445: LIST
44446: LIST
44447: PUSH
44448: LD_INT 0
44450: PUSH
44451: LD_INT 1
44453: PUSH
44454: EMPTY
44455: LIST
44456: LIST
44457: PUSH
44458: LD_INT 1
44460: NEG
44461: PUSH
44462: LD_INT 0
44464: PUSH
44465: EMPTY
44466: LIST
44467: LIST
44468: PUSH
44469: LD_INT 1
44471: NEG
44472: PUSH
44473: LD_INT 1
44475: NEG
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: PUSH
44481: LD_INT 1
44483: NEG
44484: PUSH
44485: LD_INT 2
44487: NEG
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: PUSH
44493: LD_INT 1
44495: NEG
44496: PUSH
44497: LD_INT 1
44499: PUSH
44500: EMPTY
44501: LIST
44502: LIST
44503: PUSH
44504: LD_INT 2
44506: NEG
44507: PUSH
44508: LD_INT 0
44510: PUSH
44511: EMPTY
44512: LIST
44513: LIST
44514: PUSH
44515: LD_INT 2
44517: NEG
44518: PUSH
44519: LD_INT 1
44521: NEG
44522: PUSH
44523: EMPTY
44524: LIST
44525: LIST
44526: PUSH
44527: LD_INT 2
44529: NEG
44530: PUSH
44531: LD_INT 2
44533: NEG
44534: PUSH
44535: EMPTY
44536: LIST
44537: LIST
44538: PUSH
44539: EMPTY
44540: LIST
44541: LIST
44542: LIST
44543: LIST
44544: LIST
44545: LIST
44546: LIST
44547: LIST
44548: LIST
44549: LIST
44550: LIST
44551: LIST
44552: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44553: LD_ADDR_VAR 0 53
44557: PUSH
44558: LD_INT 0
44560: PUSH
44561: LD_INT 0
44563: PUSH
44564: EMPTY
44565: LIST
44566: LIST
44567: PUSH
44568: LD_INT 0
44570: PUSH
44571: LD_INT 1
44573: NEG
44574: PUSH
44575: EMPTY
44576: LIST
44577: LIST
44578: PUSH
44579: LD_INT 1
44581: PUSH
44582: LD_INT 0
44584: PUSH
44585: EMPTY
44586: LIST
44587: LIST
44588: PUSH
44589: LD_INT 1
44591: PUSH
44592: LD_INT 1
44594: PUSH
44595: EMPTY
44596: LIST
44597: LIST
44598: PUSH
44599: LD_INT 0
44601: PUSH
44602: LD_INT 1
44604: PUSH
44605: EMPTY
44606: LIST
44607: LIST
44608: PUSH
44609: LD_INT 1
44611: NEG
44612: PUSH
44613: LD_INT 0
44615: PUSH
44616: EMPTY
44617: LIST
44618: LIST
44619: PUSH
44620: LD_INT 1
44622: NEG
44623: PUSH
44624: LD_INT 1
44626: NEG
44627: PUSH
44628: EMPTY
44629: LIST
44630: LIST
44631: PUSH
44632: LD_INT 1
44634: NEG
44635: PUSH
44636: LD_INT 2
44638: NEG
44639: PUSH
44640: EMPTY
44641: LIST
44642: LIST
44643: PUSH
44644: LD_INT 0
44646: PUSH
44647: LD_INT 2
44649: NEG
44650: PUSH
44651: EMPTY
44652: LIST
44653: LIST
44654: PUSH
44655: LD_INT 1
44657: PUSH
44658: LD_INT 1
44660: NEG
44661: PUSH
44662: EMPTY
44663: LIST
44664: LIST
44665: PUSH
44666: LD_INT 2
44668: PUSH
44669: LD_INT 0
44671: PUSH
44672: EMPTY
44673: LIST
44674: LIST
44675: PUSH
44676: LD_INT 2
44678: PUSH
44679: LD_INT 1
44681: PUSH
44682: EMPTY
44683: LIST
44684: LIST
44685: PUSH
44686: LD_INT 2
44688: PUSH
44689: LD_INT 2
44691: PUSH
44692: EMPTY
44693: LIST
44694: LIST
44695: PUSH
44696: LD_INT 1
44698: PUSH
44699: LD_INT 2
44701: PUSH
44702: EMPTY
44703: LIST
44704: LIST
44705: PUSH
44706: LD_INT 0
44708: PUSH
44709: LD_INT 2
44711: PUSH
44712: EMPTY
44713: LIST
44714: LIST
44715: PUSH
44716: LD_INT 1
44718: NEG
44719: PUSH
44720: LD_INT 1
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: PUSH
44727: LD_INT 2
44729: NEG
44730: PUSH
44731: LD_INT 0
44733: PUSH
44734: EMPTY
44735: LIST
44736: LIST
44737: PUSH
44738: LD_INT 2
44740: NEG
44741: PUSH
44742: LD_INT 1
44744: NEG
44745: PUSH
44746: EMPTY
44747: LIST
44748: LIST
44749: PUSH
44750: LD_INT 2
44752: NEG
44753: PUSH
44754: LD_INT 2
44756: NEG
44757: PUSH
44758: EMPTY
44759: LIST
44760: LIST
44761: PUSH
44762: EMPTY
44763: LIST
44764: LIST
44765: LIST
44766: LIST
44767: LIST
44768: LIST
44769: LIST
44770: LIST
44771: LIST
44772: LIST
44773: LIST
44774: LIST
44775: LIST
44776: LIST
44777: LIST
44778: LIST
44779: LIST
44780: LIST
44781: LIST
44782: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44783: LD_ADDR_VAR 0 54
44787: PUSH
44788: LD_INT 0
44790: PUSH
44791: LD_INT 0
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: PUSH
44798: LD_INT 0
44800: PUSH
44801: LD_INT 1
44803: NEG
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: PUSH
44809: LD_INT 1
44811: PUSH
44812: LD_INT 0
44814: PUSH
44815: EMPTY
44816: LIST
44817: LIST
44818: PUSH
44819: LD_INT 1
44821: PUSH
44822: LD_INT 1
44824: PUSH
44825: EMPTY
44826: LIST
44827: LIST
44828: PUSH
44829: LD_INT 0
44831: PUSH
44832: LD_INT 1
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: PUSH
44839: LD_INT 1
44841: NEG
44842: PUSH
44843: LD_INT 0
44845: PUSH
44846: EMPTY
44847: LIST
44848: LIST
44849: PUSH
44850: LD_INT 1
44852: NEG
44853: PUSH
44854: LD_INT 1
44856: NEG
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: PUSH
44862: LD_INT 1
44864: NEG
44865: PUSH
44866: LD_INT 2
44868: NEG
44869: PUSH
44870: EMPTY
44871: LIST
44872: LIST
44873: PUSH
44874: LD_INT 0
44876: PUSH
44877: LD_INT 2
44879: NEG
44880: PUSH
44881: EMPTY
44882: LIST
44883: LIST
44884: PUSH
44885: LD_INT 1
44887: PUSH
44888: LD_INT 1
44890: NEG
44891: PUSH
44892: EMPTY
44893: LIST
44894: LIST
44895: PUSH
44896: LD_INT 2
44898: PUSH
44899: LD_INT 0
44901: PUSH
44902: EMPTY
44903: LIST
44904: LIST
44905: PUSH
44906: LD_INT 2
44908: PUSH
44909: LD_INT 1
44911: PUSH
44912: EMPTY
44913: LIST
44914: LIST
44915: PUSH
44916: LD_INT 2
44918: PUSH
44919: LD_INT 2
44921: PUSH
44922: EMPTY
44923: LIST
44924: LIST
44925: PUSH
44926: LD_INT 1
44928: PUSH
44929: LD_INT 2
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: PUSH
44936: LD_INT 0
44938: PUSH
44939: LD_INT 2
44941: PUSH
44942: EMPTY
44943: LIST
44944: LIST
44945: PUSH
44946: LD_INT 1
44948: NEG
44949: PUSH
44950: LD_INT 1
44952: PUSH
44953: EMPTY
44954: LIST
44955: LIST
44956: PUSH
44957: LD_INT 2
44959: NEG
44960: PUSH
44961: LD_INT 0
44963: PUSH
44964: EMPTY
44965: LIST
44966: LIST
44967: PUSH
44968: LD_INT 2
44970: NEG
44971: PUSH
44972: LD_INT 1
44974: NEG
44975: PUSH
44976: EMPTY
44977: LIST
44978: LIST
44979: PUSH
44980: LD_INT 2
44982: NEG
44983: PUSH
44984: LD_INT 2
44986: NEG
44987: PUSH
44988: EMPTY
44989: LIST
44990: LIST
44991: PUSH
44992: EMPTY
44993: LIST
44994: LIST
44995: LIST
44996: LIST
44997: LIST
44998: LIST
44999: LIST
45000: LIST
45001: LIST
45002: LIST
45003: LIST
45004: LIST
45005: LIST
45006: LIST
45007: LIST
45008: LIST
45009: LIST
45010: LIST
45011: LIST
45012: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45013: LD_ADDR_VAR 0 55
45017: PUSH
45018: LD_INT 0
45020: PUSH
45021: LD_INT 0
45023: PUSH
45024: EMPTY
45025: LIST
45026: LIST
45027: PUSH
45028: LD_INT 0
45030: PUSH
45031: LD_INT 1
45033: NEG
45034: PUSH
45035: EMPTY
45036: LIST
45037: LIST
45038: PUSH
45039: LD_INT 1
45041: PUSH
45042: LD_INT 0
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: PUSH
45049: LD_INT 1
45051: PUSH
45052: LD_INT 1
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: PUSH
45059: LD_INT 0
45061: PUSH
45062: LD_INT 1
45064: PUSH
45065: EMPTY
45066: LIST
45067: LIST
45068: PUSH
45069: LD_INT 1
45071: NEG
45072: PUSH
45073: LD_INT 0
45075: PUSH
45076: EMPTY
45077: LIST
45078: LIST
45079: PUSH
45080: LD_INT 1
45082: NEG
45083: PUSH
45084: LD_INT 1
45086: NEG
45087: PUSH
45088: EMPTY
45089: LIST
45090: LIST
45091: PUSH
45092: LD_INT 1
45094: NEG
45095: PUSH
45096: LD_INT 2
45098: NEG
45099: PUSH
45100: EMPTY
45101: LIST
45102: LIST
45103: PUSH
45104: LD_INT 0
45106: PUSH
45107: LD_INT 2
45109: NEG
45110: PUSH
45111: EMPTY
45112: LIST
45113: LIST
45114: PUSH
45115: LD_INT 1
45117: PUSH
45118: LD_INT 1
45120: NEG
45121: PUSH
45122: EMPTY
45123: LIST
45124: LIST
45125: PUSH
45126: LD_INT 2
45128: PUSH
45129: LD_INT 0
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: PUSH
45136: LD_INT 2
45138: PUSH
45139: LD_INT 1
45141: PUSH
45142: EMPTY
45143: LIST
45144: LIST
45145: PUSH
45146: LD_INT 2
45148: PUSH
45149: LD_INT 2
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: PUSH
45156: LD_INT 1
45158: PUSH
45159: LD_INT 2
45161: PUSH
45162: EMPTY
45163: LIST
45164: LIST
45165: PUSH
45166: LD_INT 0
45168: PUSH
45169: LD_INT 2
45171: PUSH
45172: EMPTY
45173: LIST
45174: LIST
45175: PUSH
45176: LD_INT 1
45178: NEG
45179: PUSH
45180: LD_INT 1
45182: PUSH
45183: EMPTY
45184: LIST
45185: LIST
45186: PUSH
45187: LD_INT 2
45189: NEG
45190: PUSH
45191: LD_INT 0
45193: PUSH
45194: EMPTY
45195: LIST
45196: LIST
45197: PUSH
45198: LD_INT 2
45200: NEG
45201: PUSH
45202: LD_INT 1
45204: NEG
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: PUSH
45210: LD_INT 2
45212: NEG
45213: PUSH
45214: LD_INT 2
45216: NEG
45217: PUSH
45218: EMPTY
45219: LIST
45220: LIST
45221: PUSH
45222: EMPTY
45223: LIST
45224: LIST
45225: LIST
45226: LIST
45227: LIST
45228: LIST
45229: LIST
45230: LIST
45231: LIST
45232: LIST
45233: LIST
45234: LIST
45235: LIST
45236: LIST
45237: LIST
45238: LIST
45239: LIST
45240: LIST
45241: LIST
45242: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45243: LD_ADDR_VAR 0 56
45247: PUSH
45248: LD_INT 0
45250: PUSH
45251: LD_INT 0
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: PUSH
45258: LD_INT 0
45260: PUSH
45261: LD_INT 1
45263: NEG
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: PUSH
45269: LD_INT 1
45271: PUSH
45272: LD_INT 0
45274: PUSH
45275: EMPTY
45276: LIST
45277: LIST
45278: PUSH
45279: LD_INT 1
45281: PUSH
45282: LD_INT 1
45284: PUSH
45285: EMPTY
45286: LIST
45287: LIST
45288: PUSH
45289: LD_INT 0
45291: PUSH
45292: LD_INT 1
45294: PUSH
45295: EMPTY
45296: LIST
45297: LIST
45298: PUSH
45299: LD_INT 1
45301: NEG
45302: PUSH
45303: LD_INT 0
45305: PUSH
45306: EMPTY
45307: LIST
45308: LIST
45309: PUSH
45310: LD_INT 1
45312: NEG
45313: PUSH
45314: LD_INT 1
45316: NEG
45317: PUSH
45318: EMPTY
45319: LIST
45320: LIST
45321: PUSH
45322: LD_INT 1
45324: NEG
45325: PUSH
45326: LD_INT 2
45328: NEG
45329: PUSH
45330: EMPTY
45331: LIST
45332: LIST
45333: PUSH
45334: LD_INT 0
45336: PUSH
45337: LD_INT 2
45339: NEG
45340: PUSH
45341: EMPTY
45342: LIST
45343: LIST
45344: PUSH
45345: LD_INT 1
45347: PUSH
45348: LD_INT 1
45350: NEG
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: PUSH
45356: LD_INT 2
45358: PUSH
45359: LD_INT 0
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: LD_INT 2
45368: PUSH
45369: LD_INT 1
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: PUSH
45376: LD_INT 2
45378: PUSH
45379: LD_INT 2
45381: PUSH
45382: EMPTY
45383: LIST
45384: LIST
45385: PUSH
45386: LD_INT 1
45388: PUSH
45389: LD_INT 2
45391: PUSH
45392: EMPTY
45393: LIST
45394: LIST
45395: PUSH
45396: LD_INT 0
45398: PUSH
45399: LD_INT 2
45401: PUSH
45402: EMPTY
45403: LIST
45404: LIST
45405: PUSH
45406: LD_INT 1
45408: NEG
45409: PUSH
45410: LD_INT 1
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: PUSH
45417: LD_INT 2
45419: NEG
45420: PUSH
45421: LD_INT 0
45423: PUSH
45424: EMPTY
45425: LIST
45426: LIST
45427: PUSH
45428: LD_INT 2
45430: NEG
45431: PUSH
45432: LD_INT 1
45434: NEG
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: PUSH
45440: LD_INT 2
45442: NEG
45443: PUSH
45444: LD_INT 2
45446: NEG
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: PUSH
45452: EMPTY
45453: LIST
45454: LIST
45455: LIST
45456: LIST
45457: LIST
45458: LIST
45459: LIST
45460: LIST
45461: LIST
45462: LIST
45463: LIST
45464: LIST
45465: LIST
45466: LIST
45467: LIST
45468: LIST
45469: LIST
45470: LIST
45471: LIST
45472: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45473: LD_ADDR_VAR 0 57
45477: PUSH
45478: LD_INT 0
45480: PUSH
45481: LD_INT 0
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: PUSH
45488: LD_INT 0
45490: PUSH
45491: LD_INT 1
45493: NEG
45494: PUSH
45495: EMPTY
45496: LIST
45497: LIST
45498: PUSH
45499: LD_INT 1
45501: PUSH
45502: LD_INT 0
45504: PUSH
45505: EMPTY
45506: LIST
45507: LIST
45508: PUSH
45509: LD_INT 1
45511: PUSH
45512: LD_INT 1
45514: PUSH
45515: EMPTY
45516: LIST
45517: LIST
45518: PUSH
45519: LD_INT 0
45521: PUSH
45522: LD_INT 1
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: PUSH
45529: LD_INT 1
45531: NEG
45532: PUSH
45533: LD_INT 0
45535: PUSH
45536: EMPTY
45537: LIST
45538: LIST
45539: PUSH
45540: LD_INT 1
45542: NEG
45543: PUSH
45544: LD_INT 1
45546: NEG
45547: PUSH
45548: EMPTY
45549: LIST
45550: LIST
45551: PUSH
45552: LD_INT 1
45554: NEG
45555: PUSH
45556: LD_INT 2
45558: NEG
45559: PUSH
45560: EMPTY
45561: LIST
45562: LIST
45563: PUSH
45564: LD_INT 0
45566: PUSH
45567: LD_INT 2
45569: NEG
45570: PUSH
45571: EMPTY
45572: LIST
45573: LIST
45574: PUSH
45575: LD_INT 1
45577: PUSH
45578: LD_INT 1
45580: NEG
45581: PUSH
45582: EMPTY
45583: LIST
45584: LIST
45585: PUSH
45586: LD_INT 2
45588: PUSH
45589: LD_INT 0
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: PUSH
45596: LD_INT 2
45598: PUSH
45599: LD_INT 1
45601: PUSH
45602: EMPTY
45603: LIST
45604: LIST
45605: PUSH
45606: LD_INT 2
45608: PUSH
45609: LD_INT 2
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: PUSH
45616: LD_INT 1
45618: PUSH
45619: LD_INT 2
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: PUSH
45626: LD_INT 0
45628: PUSH
45629: LD_INT 2
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: PUSH
45636: LD_INT 1
45638: NEG
45639: PUSH
45640: LD_INT 1
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: PUSH
45647: LD_INT 2
45649: NEG
45650: PUSH
45651: LD_INT 0
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: PUSH
45658: LD_INT 2
45660: NEG
45661: PUSH
45662: LD_INT 1
45664: NEG
45665: PUSH
45666: EMPTY
45667: LIST
45668: LIST
45669: PUSH
45670: LD_INT 2
45672: NEG
45673: PUSH
45674: LD_INT 2
45676: NEG
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: PUSH
45682: EMPTY
45683: LIST
45684: LIST
45685: LIST
45686: LIST
45687: LIST
45688: LIST
45689: LIST
45690: LIST
45691: LIST
45692: LIST
45693: LIST
45694: LIST
45695: LIST
45696: LIST
45697: LIST
45698: LIST
45699: LIST
45700: LIST
45701: LIST
45702: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45703: LD_ADDR_VAR 0 58
45707: PUSH
45708: LD_INT 0
45710: PUSH
45711: LD_INT 0
45713: PUSH
45714: EMPTY
45715: LIST
45716: LIST
45717: PUSH
45718: LD_INT 0
45720: PUSH
45721: LD_INT 1
45723: NEG
45724: PUSH
45725: EMPTY
45726: LIST
45727: LIST
45728: PUSH
45729: LD_INT 1
45731: PUSH
45732: LD_INT 0
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: PUSH
45739: LD_INT 1
45741: PUSH
45742: LD_INT 1
45744: PUSH
45745: EMPTY
45746: LIST
45747: LIST
45748: PUSH
45749: LD_INT 0
45751: PUSH
45752: LD_INT 1
45754: PUSH
45755: EMPTY
45756: LIST
45757: LIST
45758: PUSH
45759: LD_INT 1
45761: NEG
45762: PUSH
45763: LD_INT 0
45765: PUSH
45766: EMPTY
45767: LIST
45768: LIST
45769: PUSH
45770: LD_INT 1
45772: NEG
45773: PUSH
45774: LD_INT 1
45776: NEG
45777: PUSH
45778: EMPTY
45779: LIST
45780: LIST
45781: PUSH
45782: LD_INT 1
45784: NEG
45785: PUSH
45786: LD_INT 2
45788: NEG
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: PUSH
45794: LD_INT 0
45796: PUSH
45797: LD_INT 2
45799: NEG
45800: PUSH
45801: EMPTY
45802: LIST
45803: LIST
45804: PUSH
45805: LD_INT 1
45807: PUSH
45808: LD_INT 1
45810: NEG
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: PUSH
45816: LD_INT 2
45818: PUSH
45819: LD_INT 0
45821: PUSH
45822: EMPTY
45823: LIST
45824: LIST
45825: PUSH
45826: LD_INT 2
45828: PUSH
45829: LD_INT 1
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: PUSH
45836: LD_INT 2
45838: PUSH
45839: LD_INT 2
45841: PUSH
45842: EMPTY
45843: LIST
45844: LIST
45845: PUSH
45846: LD_INT 1
45848: PUSH
45849: LD_INT 2
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: PUSH
45856: LD_INT 0
45858: PUSH
45859: LD_INT 2
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: PUSH
45866: LD_INT 1
45868: NEG
45869: PUSH
45870: LD_INT 1
45872: PUSH
45873: EMPTY
45874: LIST
45875: LIST
45876: PUSH
45877: LD_INT 2
45879: NEG
45880: PUSH
45881: LD_INT 0
45883: PUSH
45884: EMPTY
45885: LIST
45886: LIST
45887: PUSH
45888: LD_INT 2
45890: NEG
45891: PUSH
45892: LD_INT 1
45894: NEG
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: PUSH
45900: LD_INT 2
45902: NEG
45903: PUSH
45904: LD_INT 2
45906: NEG
45907: PUSH
45908: EMPTY
45909: LIST
45910: LIST
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: LIST
45916: LIST
45917: LIST
45918: LIST
45919: LIST
45920: LIST
45921: LIST
45922: LIST
45923: LIST
45924: LIST
45925: LIST
45926: LIST
45927: LIST
45928: LIST
45929: LIST
45930: LIST
45931: LIST
45932: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45933: LD_ADDR_VAR 0 59
45937: PUSH
45938: LD_INT 0
45940: PUSH
45941: LD_INT 0
45943: PUSH
45944: EMPTY
45945: LIST
45946: LIST
45947: PUSH
45948: LD_INT 0
45950: PUSH
45951: LD_INT 1
45953: NEG
45954: PUSH
45955: EMPTY
45956: LIST
45957: LIST
45958: PUSH
45959: LD_INT 1
45961: PUSH
45962: LD_INT 0
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: PUSH
45969: LD_INT 1
45971: PUSH
45972: LD_INT 1
45974: PUSH
45975: EMPTY
45976: LIST
45977: LIST
45978: PUSH
45979: LD_INT 0
45981: PUSH
45982: LD_INT 1
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: LD_INT 1
45991: NEG
45992: PUSH
45993: LD_INT 0
45995: PUSH
45996: EMPTY
45997: LIST
45998: LIST
45999: PUSH
46000: LD_INT 1
46002: NEG
46003: PUSH
46004: LD_INT 1
46006: NEG
46007: PUSH
46008: EMPTY
46009: LIST
46010: LIST
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: LIST
46016: LIST
46017: LIST
46018: LIST
46019: LIST
46020: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46021: LD_ADDR_VAR 0 60
46025: PUSH
46026: LD_INT 0
46028: PUSH
46029: LD_INT 0
46031: PUSH
46032: EMPTY
46033: LIST
46034: LIST
46035: PUSH
46036: LD_INT 0
46038: PUSH
46039: LD_INT 1
46041: NEG
46042: PUSH
46043: EMPTY
46044: LIST
46045: LIST
46046: PUSH
46047: LD_INT 1
46049: PUSH
46050: LD_INT 0
46052: PUSH
46053: EMPTY
46054: LIST
46055: LIST
46056: PUSH
46057: LD_INT 1
46059: PUSH
46060: LD_INT 1
46062: PUSH
46063: EMPTY
46064: LIST
46065: LIST
46066: PUSH
46067: LD_INT 0
46069: PUSH
46070: LD_INT 1
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: PUSH
46077: LD_INT 1
46079: NEG
46080: PUSH
46081: LD_INT 0
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: PUSH
46088: LD_INT 1
46090: NEG
46091: PUSH
46092: LD_INT 1
46094: NEG
46095: PUSH
46096: EMPTY
46097: LIST
46098: LIST
46099: PUSH
46100: EMPTY
46101: LIST
46102: LIST
46103: LIST
46104: LIST
46105: LIST
46106: LIST
46107: LIST
46108: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46109: LD_ADDR_VAR 0 61
46113: PUSH
46114: LD_INT 0
46116: PUSH
46117: LD_INT 0
46119: PUSH
46120: EMPTY
46121: LIST
46122: LIST
46123: PUSH
46124: LD_INT 0
46126: PUSH
46127: LD_INT 1
46129: NEG
46130: PUSH
46131: EMPTY
46132: LIST
46133: LIST
46134: PUSH
46135: LD_INT 1
46137: PUSH
46138: LD_INT 0
46140: PUSH
46141: EMPTY
46142: LIST
46143: LIST
46144: PUSH
46145: LD_INT 1
46147: PUSH
46148: LD_INT 1
46150: PUSH
46151: EMPTY
46152: LIST
46153: LIST
46154: PUSH
46155: LD_INT 0
46157: PUSH
46158: LD_INT 1
46160: PUSH
46161: EMPTY
46162: LIST
46163: LIST
46164: PUSH
46165: LD_INT 1
46167: NEG
46168: PUSH
46169: LD_INT 0
46171: PUSH
46172: EMPTY
46173: LIST
46174: LIST
46175: PUSH
46176: LD_INT 1
46178: NEG
46179: PUSH
46180: LD_INT 1
46182: NEG
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: LIST
46192: LIST
46193: LIST
46194: LIST
46195: LIST
46196: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46197: LD_ADDR_VAR 0 62
46201: PUSH
46202: LD_INT 0
46204: PUSH
46205: LD_INT 0
46207: PUSH
46208: EMPTY
46209: LIST
46210: LIST
46211: PUSH
46212: LD_INT 0
46214: PUSH
46215: LD_INT 1
46217: NEG
46218: PUSH
46219: EMPTY
46220: LIST
46221: LIST
46222: PUSH
46223: LD_INT 1
46225: PUSH
46226: LD_INT 0
46228: PUSH
46229: EMPTY
46230: LIST
46231: LIST
46232: PUSH
46233: LD_INT 1
46235: PUSH
46236: LD_INT 1
46238: PUSH
46239: EMPTY
46240: LIST
46241: LIST
46242: PUSH
46243: LD_INT 0
46245: PUSH
46246: LD_INT 1
46248: PUSH
46249: EMPTY
46250: LIST
46251: LIST
46252: PUSH
46253: LD_INT 1
46255: NEG
46256: PUSH
46257: LD_INT 0
46259: PUSH
46260: EMPTY
46261: LIST
46262: LIST
46263: PUSH
46264: LD_INT 1
46266: NEG
46267: PUSH
46268: LD_INT 1
46270: NEG
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: LIST
46280: LIST
46281: LIST
46282: LIST
46283: LIST
46284: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46285: LD_ADDR_VAR 0 63
46289: PUSH
46290: LD_INT 0
46292: PUSH
46293: LD_INT 0
46295: PUSH
46296: EMPTY
46297: LIST
46298: LIST
46299: PUSH
46300: LD_INT 0
46302: PUSH
46303: LD_INT 1
46305: NEG
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: PUSH
46311: LD_INT 1
46313: PUSH
46314: LD_INT 0
46316: PUSH
46317: EMPTY
46318: LIST
46319: LIST
46320: PUSH
46321: LD_INT 1
46323: PUSH
46324: LD_INT 1
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: PUSH
46331: LD_INT 0
46333: PUSH
46334: LD_INT 1
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: PUSH
46341: LD_INT 1
46343: NEG
46344: PUSH
46345: LD_INT 0
46347: PUSH
46348: EMPTY
46349: LIST
46350: LIST
46351: PUSH
46352: LD_INT 1
46354: NEG
46355: PUSH
46356: LD_INT 1
46358: NEG
46359: PUSH
46360: EMPTY
46361: LIST
46362: LIST
46363: PUSH
46364: EMPTY
46365: LIST
46366: LIST
46367: LIST
46368: LIST
46369: LIST
46370: LIST
46371: LIST
46372: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46373: LD_ADDR_VAR 0 64
46377: PUSH
46378: LD_INT 0
46380: PUSH
46381: LD_INT 0
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: PUSH
46388: LD_INT 0
46390: PUSH
46391: LD_INT 1
46393: NEG
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: PUSH
46399: LD_INT 1
46401: PUSH
46402: LD_INT 0
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: PUSH
46409: LD_INT 1
46411: PUSH
46412: LD_INT 1
46414: PUSH
46415: EMPTY
46416: LIST
46417: LIST
46418: PUSH
46419: LD_INT 0
46421: PUSH
46422: LD_INT 1
46424: PUSH
46425: EMPTY
46426: LIST
46427: LIST
46428: PUSH
46429: LD_INT 1
46431: NEG
46432: PUSH
46433: LD_INT 0
46435: PUSH
46436: EMPTY
46437: LIST
46438: LIST
46439: PUSH
46440: LD_INT 1
46442: NEG
46443: PUSH
46444: LD_INT 1
46446: NEG
46447: PUSH
46448: EMPTY
46449: LIST
46450: LIST
46451: PUSH
46452: EMPTY
46453: LIST
46454: LIST
46455: LIST
46456: LIST
46457: LIST
46458: LIST
46459: LIST
46460: ST_TO_ADDR
// end ; 1 :
46461: GO 52358
46463: LD_INT 1
46465: DOUBLE
46466: EQUAL
46467: IFTRUE 46471
46469: GO 49094
46471: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46472: LD_ADDR_VAR 0 11
46476: PUSH
46477: LD_INT 1
46479: NEG
46480: PUSH
46481: LD_INT 3
46483: NEG
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: PUSH
46489: LD_INT 0
46491: PUSH
46492: LD_INT 3
46494: NEG
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: LD_INT 1
46502: PUSH
46503: LD_INT 2
46505: NEG
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: LIST
46515: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46516: LD_ADDR_VAR 0 12
46520: PUSH
46521: LD_INT 2
46523: PUSH
46524: LD_INT 1
46526: NEG
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: LD_INT 3
46534: PUSH
46535: LD_INT 0
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: PUSH
46542: LD_INT 3
46544: PUSH
46545: LD_INT 1
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: LIST
46556: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46557: LD_ADDR_VAR 0 13
46561: PUSH
46562: LD_INT 3
46564: PUSH
46565: LD_INT 2
46567: PUSH
46568: EMPTY
46569: LIST
46570: LIST
46571: PUSH
46572: LD_INT 3
46574: PUSH
46575: LD_INT 3
46577: PUSH
46578: EMPTY
46579: LIST
46580: LIST
46581: PUSH
46582: LD_INT 2
46584: PUSH
46585: LD_INT 3
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: PUSH
46592: EMPTY
46593: LIST
46594: LIST
46595: LIST
46596: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46597: LD_ADDR_VAR 0 14
46601: PUSH
46602: LD_INT 1
46604: PUSH
46605: LD_INT 3
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: PUSH
46612: LD_INT 0
46614: PUSH
46615: LD_INT 3
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: PUSH
46622: LD_INT 1
46624: NEG
46625: PUSH
46626: LD_INT 2
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: LIST
46637: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46638: LD_ADDR_VAR 0 15
46642: PUSH
46643: LD_INT 2
46645: NEG
46646: PUSH
46647: LD_INT 1
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: LD_INT 3
46656: NEG
46657: PUSH
46658: LD_INT 0
46660: PUSH
46661: EMPTY
46662: LIST
46663: LIST
46664: PUSH
46665: LD_INT 3
46667: NEG
46668: PUSH
46669: LD_INT 1
46671: NEG
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: PUSH
46677: EMPTY
46678: LIST
46679: LIST
46680: LIST
46681: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46682: LD_ADDR_VAR 0 16
46686: PUSH
46687: LD_INT 2
46689: NEG
46690: PUSH
46691: LD_INT 3
46693: NEG
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: LD_INT 3
46701: NEG
46702: PUSH
46703: LD_INT 2
46705: NEG
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: PUSH
46711: LD_INT 3
46713: NEG
46714: PUSH
46715: LD_INT 3
46717: NEG
46718: PUSH
46719: EMPTY
46720: LIST
46721: LIST
46722: PUSH
46723: EMPTY
46724: LIST
46725: LIST
46726: LIST
46727: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46728: LD_ADDR_VAR 0 17
46732: PUSH
46733: LD_INT 1
46735: NEG
46736: PUSH
46737: LD_INT 3
46739: NEG
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: PUSH
46745: LD_INT 0
46747: PUSH
46748: LD_INT 3
46750: NEG
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: PUSH
46756: LD_INT 1
46758: PUSH
46759: LD_INT 2
46761: NEG
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: PUSH
46767: EMPTY
46768: LIST
46769: LIST
46770: LIST
46771: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46772: LD_ADDR_VAR 0 18
46776: PUSH
46777: LD_INT 2
46779: PUSH
46780: LD_INT 1
46782: NEG
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: PUSH
46788: LD_INT 3
46790: PUSH
46791: LD_INT 0
46793: PUSH
46794: EMPTY
46795: LIST
46796: LIST
46797: PUSH
46798: LD_INT 3
46800: PUSH
46801: LD_INT 1
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: LIST
46812: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46813: LD_ADDR_VAR 0 19
46817: PUSH
46818: LD_INT 3
46820: PUSH
46821: LD_INT 2
46823: PUSH
46824: EMPTY
46825: LIST
46826: LIST
46827: PUSH
46828: LD_INT 3
46830: PUSH
46831: LD_INT 3
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PUSH
46838: LD_INT 2
46840: PUSH
46841: LD_INT 3
46843: PUSH
46844: EMPTY
46845: LIST
46846: LIST
46847: PUSH
46848: EMPTY
46849: LIST
46850: LIST
46851: LIST
46852: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46853: LD_ADDR_VAR 0 20
46857: PUSH
46858: LD_INT 1
46860: PUSH
46861: LD_INT 3
46863: PUSH
46864: EMPTY
46865: LIST
46866: LIST
46867: PUSH
46868: LD_INT 0
46870: PUSH
46871: LD_INT 3
46873: PUSH
46874: EMPTY
46875: LIST
46876: LIST
46877: PUSH
46878: LD_INT 1
46880: NEG
46881: PUSH
46882: LD_INT 2
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: LIST
46893: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46894: LD_ADDR_VAR 0 21
46898: PUSH
46899: LD_INT 2
46901: NEG
46902: PUSH
46903: LD_INT 1
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: PUSH
46910: LD_INT 3
46912: NEG
46913: PUSH
46914: LD_INT 0
46916: PUSH
46917: EMPTY
46918: LIST
46919: LIST
46920: PUSH
46921: LD_INT 3
46923: NEG
46924: PUSH
46925: LD_INT 1
46927: NEG
46928: PUSH
46929: EMPTY
46930: LIST
46931: LIST
46932: PUSH
46933: EMPTY
46934: LIST
46935: LIST
46936: LIST
46937: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46938: LD_ADDR_VAR 0 22
46942: PUSH
46943: LD_INT 2
46945: NEG
46946: PUSH
46947: LD_INT 3
46949: NEG
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: PUSH
46955: LD_INT 3
46957: NEG
46958: PUSH
46959: LD_INT 2
46961: NEG
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: PUSH
46967: LD_INT 3
46969: NEG
46970: PUSH
46971: LD_INT 3
46973: NEG
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: LIST
46983: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
46984: LD_ADDR_VAR 0 23
46988: PUSH
46989: LD_INT 0
46991: PUSH
46992: LD_INT 3
46994: NEG
46995: PUSH
46996: EMPTY
46997: LIST
46998: LIST
46999: PUSH
47000: LD_INT 1
47002: NEG
47003: PUSH
47004: LD_INT 4
47006: NEG
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: PUSH
47012: LD_INT 1
47014: PUSH
47015: LD_INT 3
47017: NEG
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: LIST
47027: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
47028: LD_ADDR_VAR 0 24
47032: PUSH
47033: LD_INT 3
47035: PUSH
47036: LD_INT 0
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: PUSH
47043: LD_INT 3
47045: PUSH
47046: LD_INT 1
47048: NEG
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: PUSH
47054: LD_INT 4
47056: PUSH
47057: LD_INT 1
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: LIST
47068: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
47069: LD_ADDR_VAR 0 25
47073: PUSH
47074: LD_INT 3
47076: PUSH
47077: LD_INT 3
47079: PUSH
47080: EMPTY
47081: LIST
47082: LIST
47083: PUSH
47084: LD_INT 4
47086: PUSH
47087: LD_INT 3
47089: PUSH
47090: EMPTY
47091: LIST
47092: LIST
47093: PUSH
47094: LD_INT 3
47096: PUSH
47097: LD_INT 4
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: LIST
47108: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
47109: LD_ADDR_VAR 0 26
47113: PUSH
47114: LD_INT 0
47116: PUSH
47117: LD_INT 3
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 1
47126: PUSH
47127: LD_INT 4
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: LD_INT 1
47136: NEG
47137: PUSH
47138: LD_INT 3
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: EMPTY
47146: LIST
47147: LIST
47148: LIST
47149: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
47150: LD_ADDR_VAR 0 27
47154: PUSH
47155: LD_INT 3
47157: NEG
47158: PUSH
47159: LD_INT 0
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PUSH
47166: LD_INT 3
47168: NEG
47169: PUSH
47170: LD_INT 1
47172: PUSH
47173: EMPTY
47174: LIST
47175: LIST
47176: PUSH
47177: LD_INT 4
47179: NEG
47180: PUSH
47181: LD_INT 1
47183: NEG
47184: PUSH
47185: EMPTY
47186: LIST
47187: LIST
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: LIST
47193: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
47194: LD_ADDR_VAR 0 28
47198: PUSH
47199: LD_INT 3
47201: NEG
47202: PUSH
47203: LD_INT 3
47205: NEG
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: PUSH
47211: LD_INT 3
47213: NEG
47214: PUSH
47215: LD_INT 4
47217: NEG
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: PUSH
47223: LD_INT 4
47225: NEG
47226: PUSH
47227: LD_INT 3
47229: NEG
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: PUSH
47235: EMPTY
47236: LIST
47237: LIST
47238: LIST
47239: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
47240: LD_ADDR_VAR 0 29
47244: PUSH
47245: LD_INT 1
47247: NEG
47248: PUSH
47249: LD_INT 3
47251: NEG
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PUSH
47257: LD_INT 0
47259: PUSH
47260: LD_INT 3
47262: NEG
47263: PUSH
47264: EMPTY
47265: LIST
47266: LIST
47267: PUSH
47268: LD_INT 1
47270: PUSH
47271: LD_INT 2
47273: NEG
47274: PUSH
47275: EMPTY
47276: LIST
47277: LIST
47278: PUSH
47279: LD_INT 1
47281: NEG
47282: PUSH
47283: LD_INT 4
47285: NEG
47286: PUSH
47287: EMPTY
47288: LIST
47289: LIST
47290: PUSH
47291: LD_INT 0
47293: PUSH
47294: LD_INT 4
47296: NEG
47297: PUSH
47298: EMPTY
47299: LIST
47300: LIST
47301: PUSH
47302: LD_INT 1
47304: PUSH
47305: LD_INT 3
47307: NEG
47308: PUSH
47309: EMPTY
47310: LIST
47311: LIST
47312: PUSH
47313: LD_INT 1
47315: NEG
47316: PUSH
47317: LD_INT 5
47319: NEG
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: PUSH
47325: LD_INT 0
47327: PUSH
47328: LD_INT 5
47330: NEG
47331: PUSH
47332: EMPTY
47333: LIST
47334: LIST
47335: PUSH
47336: LD_INT 1
47338: PUSH
47339: LD_INT 4
47341: NEG
47342: PUSH
47343: EMPTY
47344: LIST
47345: LIST
47346: PUSH
47347: LD_INT 1
47349: NEG
47350: PUSH
47351: LD_INT 6
47353: NEG
47354: PUSH
47355: EMPTY
47356: LIST
47357: LIST
47358: PUSH
47359: LD_INT 0
47361: PUSH
47362: LD_INT 6
47364: NEG
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: PUSH
47370: LD_INT 1
47372: PUSH
47373: LD_INT 5
47375: NEG
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: LIST
47385: LIST
47386: LIST
47387: LIST
47388: LIST
47389: LIST
47390: LIST
47391: LIST
47392: LIST
47393: LIST
47394: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
47395: LD_ADDR_VAR 0 30
47399: PUSH
47400: LD_INT 2
47402: PUSH
47403: LD_INT 1
47405: NEG
47406: PUSH
47407: EMPTY
47408: LIST
47409: LIST
47410: PUSH
47411: LD_INT 3
47413: PUSH
47414: LD_INT 0
47416: PUSH
47417: EMPTY
47418: LIST
47419: LIST
47420: PUSH
47421: LD_INT 3
47423: PUSH
47424: LD_INT 1
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: PUSH
47431: LD_INT 3
47433: PUSH
47434: LD_INT 1
47436: NEG
47437: PUSH
47438: EMPTY
47439: LIST
47440: LIST
47441: PUSH
47442: LD_INT 4
47444: PUSH
47445: LD_INT 0
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: LD_INT 4
47454: PUSH
47455: LD_INT 1
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: PUSH
47462: LD_INT 4
47464: PUSH
47465: LD_INT 1
47467: NEG
47468: PUSH
47469: EMPTY
47470: LIST
47471: LIST
47472: PUSH
47473: LD_INT 5
47475: PUSH
47476: LD_INT 0
47478: PUSH
47479: EMPTY
47480: LIST
47481: LIST
47482: PUSH
47483: LD_INT 5
47485: PUSH
47486: LD_INT 1
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PUSH
47493: LD_INT 5
47495: PUSH
47496: LD_INT 1
47498: NEG
47499: PUSH
47500: EMPTY
47501: LIST
47502: LIST
47503: PUSH
47504: LD_INT 6
47506: PUSH
47507: LD_INT 0
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: PUSH
47514: LD_INT 6
47516: PUSH
47517: LD_INT 1
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: LIST
47528: LIST
47529: LIST
47530: LIST
47531: LIST
47532: LIST
47533: LIST
47534: LIST
47535: LIST
47536: LIST
47537: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
47538: LD_ADDR_VAR 0 31
47542: PUSH
47543: LD_INT 3
47545: PUSH
47546: LD_INT 2
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: PUSH
47553: LD_INT 3
47555: PUSH
47556: LD_INT 3
47558: PUSH
47559: EMPTY
47560: LIST
47561: LIST
47562: PUSH
47563: LD_INT 2
47565: PUSH
47566: LD_INT 3
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: LD_INT 4
47575: PUSH
47576: LD_INT 3
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: PUSH
47583: LD_INT 4
47585: PUSH
47586: LD_INT 4
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: PUSH
47593: LD_INT 3
47595: PUSH
47596: LD_INT 4
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: PUSH
47603: LD_INT 5
47605: PUSH
47606: LD_INT 4
47608: PUSH
47609: EMPTY
47610: LIST
47611: LIST
47612: PUSH
47613: LD_INT 5
47615: PUSH
47616: LD_INT 5
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: PUSH
47623: LD_INT 4
47625: PUSH
47626: LD_INT 5
47628: PUSH
47629: EMPTY
47630: LIST
47631: LIST
47632: PUSH
47633: LD_INT 6
47635: PUSH
47636: LD_INT 5
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: PUSH
47643: LD_INT 6
47645: PUSH
47646: LD_INT 6
47648: PUSH
47649: EMPTY
47650: LIST
47651: LIST
47652: PUSH
47653: LD_INT 5
47655: PUSH
47656: LD_INT 6
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: PUSH
47663: EMPTY
47664: LIST
47665: LIST
47666: LIST
47667: LIST
47668: LIST
47669: LIST
47670: LIST
47671: LIST
47672: LIST
47673: LIST
47674: LIST
47675: LIST
47676: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
47677: LD_ADDR_VAR 0 32
47681: PUSH
47682: LD_INT 1
47684: PUSH
47685: LD_INT 3
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: PUSH
47692: LD_INT 0
47694: PUSH
47695: LD_INT 3
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: PUSH
47702: LD_INT 1
47704: NEG
47705: PUSH
47706: LD_INT 2
47708: PUSH
47709: EMPTY
47710: LIST
47711: LIST
47712: PUSH
47713: LD_INT 1
47715: PUSH
47716: LD_INT 4
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: PUSH
47723: LD_INT 0
47725: PUSH
47726: LD_INT 4
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: PUSH
47733: LD_INT 1
47735: NEG
47736: PUSH
47737: LD_INT 3
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: LD_INT 1
47746: PUSH
47747: LD_INT 5
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: PUSH
47754: LD_INT 0
47756: PUSH
47757: LD_INT 5
47759: PUSH
47760: EMPTY
47761: LIST
47762: LIST
47763: PUSH
47764: LD_INT 1
47766: NEG
47767: PUSH
47768: LD_INT 4
47770: PUSH
47771: EMPTY
47772: LIST
47773: LIST
47774: PUSH
47775: LD_INT 1
47777: PUSH
47778: LD_INT 6
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: PUSH
47785: LD_INT 0
47787: PUSH
47788: LD_INT 6
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: PUSH
47795: LD_INT 1
47797: NEG
47798: PUSH
47799: LD_INT 5
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PUSH
47806: EMPTY
47807: LIST
47808: LIST
47809: LIST
47810: LIST
47811: LIST
47812: LIST
47813: LIST
47814: LIST
47815: LIST
47816: LIST
47817: LIST
47818: LIST
47819: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
47820: LD_ADDR_VAR 0 33
47824: PUSH
47825: LD_INT 2
47827: NEG
47828: PUSH
47829: LD_INT 1
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: PUSH
47836: LD_INT 3
47838: NEG
47839: PUSH
47840: LD_INT 0
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: PUSH
47847: LD_INT 3
47849: NEG
47850: PUSH
47851: LD_INT 1
47853: NEG
47854: PUSH
47855: EMPTY
47856: LIST
47857: LIST
47858: PUSH
47859: LD_INT 3
47861: NEG
47862: PUSH
47863: LD_INT 1
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: PUSH
47870: LD_INT 4
47872: NEG
47873: PUSH
47874: LD_INT 0
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: PUSH
47881: LD_INT 4
47883: NEG
47884: PUSH
47885: LD_INT 1
47887: NEG
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: LD_INT 4
47895: NEG
47896: PUSH
47897: LD_INT 1
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: PUSH
47904: LD_INT 5
47906: NEG
47907: PUSH
47908: LD_INT 0
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: PUSH
47915: LD_INT 5
47917: NEG
47918: PUSH
47919: LD_INT 1
47921: NEG
47922: PUSH
47923: EMPTY
47924: LIST
47925: LIST
47926: PUSH
47927: LD_INT 5
47929: NEG
47930: PUSH
47931: LD_INT 1
47933: PUSH
47934: EMPTY
47935: LIST
47936: LIST
47937: PUSH
47938: LD_INT 6
47940: NEG
47941: PUSH
47942: LD_INT 0
47944: PUSH
47945: EMPTY
47946: LIST
47947: LIST
47948: PUSH
47949: LD_INT 6
47951: NEG
47952: PUSH
47953: LD_INT 1
47955: NEG
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: LIST
47965: LIST
47966: LIST
47967: LIST
47968: LIST
47969: LIST
47970: LIST
47971: LIST
47972: LIST
47973: LIST
47974: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
47975: LD_ADDR_VAR 0 34
47979: PUSH
47980: LD_INT 2
47982: NEG
47983: PUSH
47984: LD_INT 3
47986: NEG
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: PUSH
47992: LD_INT 3
47994: NEG
47995: PUSH
47996: LD_INT 2
47998: NEG
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: PUSH
48004: LD_INT 3
48006: NEG
48007: PUSH
48008: LD_INT 3
48010: NEG
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: LD_INT 3
48018: NEG
48019: PUSH
48020: LD_INT 4
48022: NEG
48023: PUSH
48024: EMPTY
48025: LIST
48026: LIST
48027: PUSH
48028: LD_INT 4
48030: NEG
48031: PUSH
48032: LD_INT 3
48034: NEG
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: PUSH
48040: LD_INT 4
48042: NEG
48043: PUSH
48044: LD_INT 4
48046: NEG
48047: PUSH
48048: EMPTY
48049: LIST
48050: LIST
48051: PUSH
48052: LD_INT 4
48054: NEG
48055: PUSH
48056: LD_INT 5
48058: NEG
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PUSH
48064: LD_INT 5
48066: NEG
48067: PUSH
48068: LD_INT 4
48070: NEG
48071: PUSH
48072: EMPTY
48073: LIST
48074: LIST
48075: PUSH
48076: LD_INT 5
48078: NEG
48079: PUSH
48080: LD_INT 5
48082: NEG
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: PUSH
48088: LD_INT 5
48090: NEG
48091: PUSH
48092: LD_INT 6
48094: NEG
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: PUSH
48100: LD_INT 6
48102: NEG
48103: PUSH
48104: LD_INT 5
48106: NEG
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: PUSH
48112: LD_INT 6
48114: NEG
48115: PUSH
48116: LD_INT 6
48118: NEG
48119: PUSH
48120: EMPTY
48121: LIST
48122: LIST
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: LIST
48128: LIST
48129: LIST
48130: LIST
48131: LIST
48132: LIST
48133: LIST
48134: LIST
48135: LIST
48136: LIST
48137: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
48138: LD_ADDR_VAR 0 41
48142: PUSH
48143: LD_INT 0
48145: PUSH
48146: LD_INT 2
48148: NEG
48149: PUSH
48150: EMPTY
48151: LIST
48152: LIST
48153: PUSH
48154: LD_INT 1
48156: NEG
48157: PUSH
48158: LD_INT 3
48160: NEG
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: PUSH
48166: LD_INT 1
48168: PUSH
48169: LD_INT 2
48171: NEG
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: PUSH
48177: EMPTY
48178: LIST
48179: LIST
48180: LIST
48181: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
48182: LD_ADDR_VAR 0 42
48186: PUSH
48187: LD_INT 2
48189: PUSH
48190: LD_INT 0
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: PUSH
48197: LD_INT 2
48199: PUSH
48200: LD_INT 1
48202: NEG
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: PUSH
48208: LD_INT 3
48210: PUSH
48211: LD_INT 1
48213: PUSH
48214: EMPTY
48215: LIST
48216: LIST
48217: PUSH
48218: EMPTY
48219: LIST
48220: LIST
48221: LIST
48222: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
48223: LD_ADDR_VAR 0 43
48227: PUSH
48228: LD_INT 2
48230: PUSH
48231: LD_INT 2
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: PUSH
48238: LD_INT 3
48240: PUSH
48241: LD_INT 2
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: PUSH
48248: LD_INT 2
48250: PUSH
48251: LD_INT 3
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: LIST
48262: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
48263: LD_ADDR_VAR 0 44
48267: PUSH
48268: LD_INT 0
48270: PUSH
48271: LD_INT 2
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: LD_INT 1
48280: PUSH
48281: LD_INT 3
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PUSH
48288: LD_INT 1
48290: NEG
48291: PUSH
48292: LD_INT 2
48294: PUSH
48295: EMPTY
48296: LIST
48297: LIST
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: LIST
48303: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48304: LD_ADDR_VAR 0 45
48308: PUSH
48309: LD_INT 2
48311: NEG
48312: PUSH
48313: LD_INT 0
48315: PUSH
48316: EMPTY
48317: LIST
48318: LIST
48319: PUSH
48320: LD_INT 2
48322: NEG
48323: PUSH
48324: LD_INT 1
48326: PUSH
48327: EMPTY
48328: LIST
48329: LIST
48330: PUSH
48331: LD_INT 3
48333: NEG
48334: PUSH
48335: LD_INT 1
48337: NEG
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: LIST
48347: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
48348: LD_ADDR_VAR 0 46
48352: PUSH
48353: LD_INT 2
48355: NEG
48356: PUSH
48357: LD_INT 2
48359: NEG
48360: PUSH
48361: EMPTY
48362: LIST
48363: LIST
48364: PUSH
48365: LD_INT 2
48367: NEG
48368: PUSH
48369: LD_INT 3
48371: NEG
48372: PUSH
48373: EMPTY
48374: LIST
48375: LIST
48376: PUSH
48377: LD_INT 3
48379: NEG
48380: PUSH
48381: LD_INT 2
48383: NEG
48384: PUSH
48385: EMPTY
48386: LIST
48387: LIST
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: LIST
48393: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
48394: LD_ADDR_VAR 0 47
48398: PUSH
48399: LD_INT 2
48401: NEG
48402: PUSH
48403: LD_INT 3
48405: NEG
48406: PUSH
48407: EMPTY
48408: LIST
48409: LIST
48410: PUSH
48411: LD_INT 1
48413: NEG
48414: PUSH
48415: LD_INT 3
48417: NEG
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48427: LD_ADDR_VAR 0 48
48431: PUSH
48432: LD_INT 1
48434: PUSH
48435: LD_INT 2
48437: NEG
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: PUSH
48443: LD_INT 2
48445: PUSH
48446: LD_INT 1
48448: NEG
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: PUSH
48454: EMPTY
48455: LIST
48456: LIST
48457: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
48458: LD_ADDR_VAR 0 49
48462: PUSH
48463: LD_INT 3
48465: PUSH
48466: LD_INT 1
48468: PUSH
48469: EMPTY
48470: LIST
48471: LIST
48472: PUSH
48473: LD_INT 3
48475: PUSH
48476: LD_INT 2
48478: PUSH
48479: EMPTY
48480: LIST
48481: LIST
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
48487: LD_ADDR_VAR 0 50
48491: PUSH
48492: LD_INT 2
48494: PUSH
48495: LD_INT 3
48497: PUSH
48498: EMPTY
48499: LIST
48500: LIST
48501: PUSH
48502: LD_INT 1
48504: PUSH
48505: LD_INT 3
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: PUSH
48512: EMPTY
48513: LIST
48514: LIST
48515: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48516: LD_ADDR_VAR 0 51
48520: PUSH
48521: LD_INT 1
48523: NEG
48524: PUSH
48525: LD_INT 2
48527: PUSH
48528: EMPTY
48529: LIST
48530: LIST
48531: PUSH
48532: LD_INT 2
48534: NEG
48535: PUSH
48536: LD_INT 1
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: EMPTY
48544: LIST
48545: LIST
48546: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48547: LD_ADDR_VAR 0 52
48551: PUSH
48552: LD_INT 3
48554: NEG
48555: PUSH
48556: LD_INT 1
48558: NEG
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: PUSH
48564: LD_INT 3
48566: NEG
48567: PUSH
48568: LD_INT 2
48570: NEG
48571: PUSH
48572: EMPTY
48573: LIST
48574: LIST
48575: PUSH
48576: EMPTY
48577: LIST
48578: LIST
48579: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48580: LD_ADDR_VAR 0 53
48584: PUSH
48585: LD_INT 1
48587: NEG
48588: PUSH
48589: LD_INT 3
48591: NEG
48592: PUSH
48593: EMPTY
48594: LIST
48595: LIST
48596: PUSH
48597: LD_INT 0
48599: PUSH
48600: LD_INT 3
48602: NEG
48603: PUSH
48604: EMPTY
48605: LIST
48606: LIST
48607: PUSH
48608: LD_INT 1
48610: PUSH
48611: LD_INT 2
48613: NEG
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: PUSH
48619: EMPTY
48620: LIST
48621: LIST
48622: LIST
48623: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48624: LD_ADDR_VAR 0 54
48628: PUSH
48629: LD_INT 2
48631: PUSH
48632: LD_INT 1
48634: NEG
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: LD_INT 3
48642: PUSH
48643: LD_INT 0
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 3
48652: PUSH
48653: LD_INT 1
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: PUSH
48660: EMPTY
48661: LIST
48662: LIST
48663: LIST
48664: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48665: LD_ADDR_VAR 0 55
48669: PUSH
48670: LD_INT 3
48672: PUSH
48673: LD_INT 2
48675: PUSH
48676: EMPTY
48677: LIST
48678: LIST
48679: PUSH
48680: LD_INT 3
48682: PUSH
48683: LD_INT 3
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: PUSH
48690: LD_INT 2
48692: PUSH
48693: LD_INT 3
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: PUSH
48700: EMPTY
48701: LIST
48702: LIST
48703: LIST
48704: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48705: LD_ADDR_VAR 0 56
48709: PUSH
48710: LD_INT 1
48712: PUSH
48713: LD_INT 3
48715: PUSH
48716: EMPTY
48717: LIST
48718: LIST
48719: PUSH
48720: LD_INT 0
48722: PUSH
48723: LD_INT 3
48725: PUSH
48726: EMPTY
48727: LIST
48728: LIST
48729: PUSH
48730: LD_INT 1
48732: NEG
48733: PUSH
48734: LD_INT 2
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: PUSH
48741: EMPTY
48742: LIST
48743: LIST
48744: LIST
48745: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48746: LD_ADDR_VAR 0 57
48750: PUSH
48751: LD_INT 2
48753: NEG
48754: PUSH
48755: LD_INT 1
48757: PUSH
48758: EMPTY
48759: LIST
48760: LIST
48761: PUSH
48762: LD_INT 3
48764: NEG
48765: PUSH
48766: LD_INT 0
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: PUSH
48773: LD_INT 3
48775: NEG
48776: PUSH
48777: LD_INT 1
48779: NEG
48780: PUSH
48781: EMPTY
48782: LIST
48783: LIST
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: LIST
48789: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48790: LD_ADDR_VAR 0 58
48794: PUSH
48795: LD_INT 2
48797: NEG
48798: PUSH
48799: LD_INT 3
48801: NEG
48802: PUSH
48803: EMPTY
48804: LIST
48805: LIST
48806: PUSH
48807: LD_INT 3
48809: NEG
48810: PUSH
48811: LD_INT 2
48813: NEG
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: PUSH
48819: LD_INT 3
48821: NEG
48822: PUSH
48823: LD_INT 3
48825: NEG
48826: PUSH
48827: EMPTY
48828: LIST
48829: LIST
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: LIST
48835: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
48836: LD_ADDR_VAR 0 59
48840: PUSH
48841: LD_INT 1
48843: NEG
48844: PUSH
48845: LD_INT 2
48847: NEG
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: PUSH
48853: LD_INT 0
48855: PUSH
48856: LD_INT 2
48858: NEG
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: PUSH
48864: LD_INT 1
48866: PUSH
48867: LD_INT 1
48869: NEG
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: LIST
48879: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48880: LD_ADDR_VAR 0 60
48884: PUSH
48885: LD_INT 1
48887: PUSH
48888: LD_INT 1
48890: NEG
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: LD_INT 2
48898: PUSH
48899: LD_INT 0
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: PUSH
48906: LD_INT 2
48908: PUSH
48909: LD_INT 1
48911: PUSH
48912: EMPTY
48913: LIST
48914: LIST
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: LIST
48920: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48921: LD_ADDR_VAR 0 61
48925: PUSH
48926: LD_INT 2
48928: PUSH
48929: LD_INT 1
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 2
48938: PUSH
48939: LD_INT 2
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: LD_INT 1
48948: PUSH
48949: LD_INT 2
48951: PUSH
48952: EMPTY
48953: LIST
48954: LIST
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: LIST
48960: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48961: LD_ADDR_VAR 0 62
48965: PUSH
48966: LD_INT 1
48968: PUSH
48969: LD_INT 2
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PUSH
48976: LD_INT 0
48978: PUSH
48979: LD_INT 2
48981: PUSH
48982: EMPTY
48983: LIST
48984: LIST
48985: PUSH
48986: LD_INT 1
48988: NEG
48989: PUSH
48990: LD_INT 1
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: PUSH
48997: EMPTY
48998: LIST
48999: LIST
49000: LIST
49001: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49002: LD_ADDR_VAR 0 63
49006: PUSH
49007: LD_INT 1
49009: NEG
49010: PUSH
49011: LD_INT 1
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: PUSH
49018: LD_INT 2
49020: NEG
49021: PUSH
49022: LD_INT 0
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: PUSH
49029: LD_INT 2
49031: NEG
49032: PUSH
49033: LD_INT 1
49035: NEG
49036: PUSH
49037: EMPTY
49038: LIST
49039: LIST
49040: PUSH
49041: EMPTY
49042: LIST
49043: LIST
49044: LIST
49045: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49046: LD_ADDR_VAR 0 64
49050: PUSH
49051: LD_INT 1
49053: NEG
49054: PUSH
49055: LD_INT 2
49057: NEG
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PUSH
49063: LD_INT 2
49065: NEG
49066: PUSH
49067: LD_INT 1
49069: NEG
49070: PUSH
49071: EMPTY
49072: LIST
49073: LIST
49074: PUSH
49075: LD_INT 2
49077: NEG
49078: PUSH
49079: LD_INT 2
49081: NEG
49082: PUSH
49083: EMPTY
49084: LIST
49085: LIST
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: LIST
49091: ST_TO_ADDR
// end ; 2 :
49092: GO 52358
49094: LD_INT 2
49096: DOUBLE
49097: EQUAL
49098: IFTRUE 49102
49100: GO 52357
49102: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
49103: LD_ADDR_VAR 0 29
49107: PUSH
49108: LD_INT 4
49110: PUSH
49111: LD_INT 0
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: PUSH
49118: LD_INT 4
49120: PUSH
49121: LD_INT 1
49123: NEG
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: PUSH
49129: LD_INT 5
49131: PUSH
49132: LD_INT 0
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: PUSH
49139: LD_INT 5
49141: PUSH
49142: LD_INT 1
49144: PUSH
49145: EMPTY
49146: LIST
49147: LIST
49148: PUSH
49149: LD_INT 4
49151: PUSH
49152: LD_INT 1
49154: PUSH
49155: EMPTY
49156: LIST
49157: LIST
49158: PUSH
49159: LD_INT 3
49161: PUSH
49162: LD_INT 0
49164: PUSH
49165: EMPTY
49166: LIST
49167: LIST
49168: PUSH
49169: LD_INT 3
49171: PUSH
49172: LD_INT 1
49174: NEG
49175: PUSH
49176: EMPTY
49177: LIST
49178: LIST
49179: PUSH
49180: LD_INT 3
49182: PUSH
49183: LD_INT 2
49185: NEG
49186: PUSH
49187: EMPTY
49188: LIST
49189: LIST
49190: PUSH
49191: LD_INT 5
49193: PUSH
49194: LD_INT 2
49196: PUSH
49197: EMPTY
49198: LIST
49199: LIST
49200: PUSH
49201: LD_INT 3
49203: PUSH
49204: LD_INT 3
49206: PUSH
49207: EMPTY
49208: LIST
49209: LIST
49210: PUSH
49211: LD_INT 3
49213: PUSH
49214: LD_INT 2
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: PUSH
49221: LD_INT 4
49223: PUSH
49224: LD_INT 3
49226: PUSH
49227: EMPTY
49228: LIST
49229: LIST
49230: PUSH
49231: LD_INT 4
49233: PUSH
49234: LD_INT 4
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: LD_INT 3
49243: PUSH
49244: LD_INT 4
49246: PUSH
49247: EMPTY
49248: LIST
49249: LIST
49250: PUSH
49251: LD_INT 2
49253: PUSH
49254: LD_INT 3
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: PUSH
49261: LD_INT 2
49263: PUSH
49264: LD_INT 2
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: PUSH
49271: LD_INT 4
49273: PUSH
49274: LD_INT 2
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: PUSH
49281: LD_INT 2
49283: PUSH
49284: LD_INT 4
49286: PUSH
49287: EMPTY
49288: LIST
49289: LIST
49290: PUSH
49291: LD_INT 0
49293: PUSH
49294: LD_INT 4
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: PUSH
49301: LD_INT 0
49303: PUSH
49304: LD_INT 3
49306: PUSH
49307: EMPTY
49308: LIST
49309: LIST
49310: PUSH
49311: LD_INT 1
49313: PUSH
49314: LD_INT 4
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: PUSH
49321: LD_INT 1
49323: PUSH
49324: LD_INT 5
49326: PUSH
49327: EMPTY
49328: LIST
49329: LIST
49330: PUSH
49331: LD_INT 0
49333: PUSH
49334: LD_INT 5
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: PUSH
49341: LD_INT 1
49343: NEG
49344: PUSH
49345: LD_INT 4
49347: PUSH
49348: EMPTY
49349: LIST
49350: LIST
49351: PUSH
49352: LD_INT 1
49354: NEG
49355: PUSH
49356: LD_INT 3
49358: PUSH
49359: EMPTY
49360: LIST
49361: LIST
49362: PUSH
49363: LD_INT 2
49365: PUSH
49366: LD_INT 5
49368: PUSH
49369: EMPTY
49370: LIST
49371: LIST
49372: PUSH
49373: LD_INT 2
49375: NEG
49376: PUSH
49377: LD_INT 3
49379: PUSH
49380: EMPTY
49381: LIST
49382: LIST
49383: PUSH
49384: LD_INT 3
49386: NEG
49387: PUSH
49388: LD_INT 0
49390: PUSH
49391: EMPTY
49392: LIST
49393: LIST
49394: PUSH
49395: LD_INT 3
49397: NEG
49398: PUSH
49399: LD_INT 1
49401: NEG
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: PUSH
49407: LD_INT 2
49409: NEG
49410: PUSH
49411: LD_INT 0
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: PUSH
49418: LD_INT 2
49420: NEG
49421: PUSH
49422: LD_INT 1
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: PUSH
49429: LD_INT 3
49431: NEG
49432: PUSH
49433: LD_INT 1
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: PUSH
49440: LD_INT 4
49442: NEG
49443: PUSH
49444: LD_INT 0
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: LD_INT 4
49453: NEG
49454: PUSH
49455: LD_INT 1
49457: NEG
49458: PUSH
49459: EMPTY
49460: LIST
49461: LIST
49462: PUSH
49463: LD_INT 4
49465: NEG
49466: PUSH
49467: LD_INT 2
49469: NEG
49470: PUSH
49471: EMPTY
49472: LIST
49473: LIST
49474: PUSH
49475: LD_INT 2
49477: NEG
49478: PUSH
49479: LD_INT 2
49481: PUSH
49482: EMPTY
49483: LIST
49484: LIST
49485: PUSH
49486: LD_INT 4
49488: NEG
49489: PUSH
49490: LD_INT 4
49492: NEG
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: PUSH
49498: LD_INT 4
49500: NEG
49501: PUSH
49502: LD_INT 5
49504: NEG
49505: PUSH
49506: EMPTY
49507: LIST
49508: LIST
49509: PUSH
49510: LD_INT 3
49512: NEG
49513: PUSH
49514: LD_INT 4
49516: NEG
49517: PUSH
49518: EMPTY
49519: LIST
49520: LIST
49521: PUSH
49522: LD_INT 3
49524: NEG
49525: PUSH
49526: LD_INT 3
49528: NEG
49529: PUSH
49530: EMPTY
49531: LIST
49532: LIST
49533: PUSH
49534: LD_INT 4
49536: NEG
49537: PUSH
49538: LD_INT 3
49540: NEG
49541: PUSH
49542: EMPTY
49543: LIST
49544: LIST
49545: PUSH
49546: LD_INT 5
49548: NEG
49549: PUSH
49550: LD_INT 4
49552: NEG
49553: PUSH
49554: EMPTY
49555: LIST
49556: LIST
49557: PUSH
49558: LD_INT 5
49560: NEG
49561: PUSH
49562: LD_INT 5
49564: NEG
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: PUSH
49570: LD_INT 3
49572: NEG
49573: PUSH
49574: LD_INT 5
49576: NEG
49577: PUSH
49578: EMPTY
49579: LIST
49580: LIST
49581: PUSH
49582: LD_INT 5
49584: NEG
49585: PUSH
49586: LD_INT 3
49588: NEG
49589: PUSH
49590: EMPTY
49591: LIST
49592: LIST
49593: PUSH
49594: EMPTY
49595: LIST
49596: LIST
49597: LIST
49598: LIST
49599: LIST
49600: LIST
49601: LIST
49602: LIST
49603: LIST
49604: LIST
49605: LIST
49606: LIST
49607: LIST
49608: LIST
49609: LIST
49610: LIST
49611: LIST
49612: LIST
49613: LIST
49614: LIST
49615: LIST
49616: LIST
49617: LIST
49618: LIST
49619: LIST
49620: LIST
49621: LIST
49622: LIST
49623: LIST
49624: LIST
49625: LIST
49626: LIST
49627: LIST
49628: LIST
49629: LIST
49630: LIST
49631: LIST
49632: LIST
49633: LIST
49634: LIST
49635: LIST
49636: LIST
49637: LIST
49638: LIST
49639: LIST
49640: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
49641: LD_ADDR_VAR 0 30
49645: PUSH
49646: LD_INT 4
49648: PUSH
49649: LD_INT 4
49651: PUSH
49652: EMPTY
49653: LIST
49654: LIST
49655: PUSH
49656: LD_INT 4
49658: PUSH
49659: LD_INT 3
49661: PUSH
49662: EMPTY
49663: LIST
49664: LIST
49665: PUSH
49666: LD_INT 5
49668: PUSH
49669: LD_INT 4
49671: PUSH
49672: EMPTY
49673: LIST
49674: LIST
49675: PUSH
49676: LD_INT 5
49678: PUSH
49679: LD_INT 5
49681: PUSH
49682: EMPTY
49683: LIST
49684: LIST
49685: PUSH
49686: LD_INT 4
49688: PUSH
49689: LD_INT 5
49691: PUSH
49692: EMPTY
49693: LIST
49694: LIST
49695: PUSH
49696: LD_INT 3
49698: PUSH
49699: LD_INT 4
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: PUSH
49706: LD_INT 3
49708: PUSH
49709: LD_INT 3
49711: PUSH
49712: EMPTY
49713: LIST
49714: LIST
49715: PUSH
49716: LD_INT 5
49718: PUSH
49719: LD_INT 3
49721: PUSH
49722: EMPTY
49723: LIST
49724: LIST
49725: PUSH
49726: LD_INT 3
49728: PUSH
49729: LD_INT 5
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: PUSH
49736: LD_INT 0
49738: PUSH
49739: LD_INT 3
49741: PUSH
49742: EMPTY
49743: LIST
49744: LIST
49745: PUSH
49746: LD_INT 0
49748: PUSH
49749: LD_INT 2
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: PUSH
49756: LD_INT 1
49758: PUSH
49759: LD_INT 3
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PUSH
49766: LD_INT 1
49768: PUSH
49769: LD_INT 4
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: PUSH
49776: LD_INT 0
49778: PUSH
49779: LD_INT 4
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: LD_INT 1
49788: NEG
49789: PUSH
49790: LD_INT 3
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PUSH
49797: LD_INT 1
49799: NEG
49800: PUSH
49801: LD_INT 2
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: PUSH
49808: LD_INT 2
49810: PUSH
49811: LD_INT 4
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: PUSH
49818: LD_INT 2
49820: NEG
49821: PUSH
49822: LD_INT 2
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: PUSH
49829: LD_INT 4
49831: NEG
49832: PUSH
49833: LD_INT 0
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: PUSH
49840: LD_INT 4
49842: NEG
49843: PUSH
49844: LD_INT 1
49846: NEG
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: PUSH
49852: LD_INT 3
49854: NEG
49855: PUSH
49856: LD_INT 0
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: LD_INT 3
49865: NEG
49866: PUSH
49867: LD_INT 1
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: PUSH
49874: LD_INT 4
49876: NEG
49877: PUSH
49878: LD_INT 1
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: PUSH
49885: LD_INT 5
49887: NEG
49888: PUSH
49889: LD_INT 0
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: LD_INT 5
49898: NEG
49899: PUSH
49900: LD_INT 1
49902: NEG
49903: PUSH
49904: EMPTY
49905: LIST
49906: LIST
49907: PUSH
49908: LD_INT 5
49910: NEG
49911: PUSH
49912: LD_INT 2
49914: NEG
49915: PUSH
49916: EMPTY
49917: LIST
49918: LIST
49919: PUSH
49920: LD_INT 3
49922: NEG
49923: PUSH
49924: LD_INT 2
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: PUSH
49931: LD_INT 3
49933: NEG
49934: PUSH
49935: LD_INT 3
49937: NEG
49938: PUSH
49939: EMPTY
49940: LIST
49941: LIST
49942: PUSH
49943: LD_INT 3
49945: NEG
49946: PUSH
49947: LD_INT 4
49949: NEG
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: PUSH
49955: LD_INT 2
49957: NEG
49958: PUSH
49959: LD_INT 3
49961: NEG
49962: PUSH
49963: EMPTY
49964: LIST
49965: LIST
49966: PUSH
49967: LD_INT 2
49969: NEG
49970: PUSH
49971: LD_INT 2
49973: NEG
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 3
49981: NEG
49982: PUSH
49983: LD_INT 2
49985: NEG
49986: PUSH
49987: EMPTY
49988: LIST
49989: LIST
49990: PUSH
49991: LD_INT 4
49993: NEG
49994: PUSH
49995: LD_INT 3
49997: NEG
49998: PUSH
49999: EMPTY
50000: LIST
50001: LIST
50002: PUSH
50003: LD_INT 4
50005: NEG
50006: PUSH
50007: LD_INT 4
50009: NEG
50010: PUSH
50011: EMPTY
50012: LIST
50013: LIST
50014: PUSH
50015: LD_INT 2
50017: NEG
50018: PUSH
50019: LD_INT 4
50021: NEG
50022: PUSH
50023: EMPTY
50024: LIST
50025: LIST
50026: PUSH
50027: LD_INT 4
50029: NEG
50030: PUSH
50031: LD_INT 2
50033: NEG
50034: PUSH
50035: EMPTY
50036: LIST
50037: LIST
50038: PUSH
50039: LD_INT 0
50041: PUSH
50042: LD_INT 4
50044: NEG
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: PUSH
50050: LD_INT 0
50052: PUSH
50053: LD_INT 5
50055: NEG
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: PUSH
50061: LD_INT 1
50063: PUSH
50064: LD_INT 4
50066: NEG
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: PUSH
50072: LD_INT 1
50074: PUSH
50075: LD_INT 3
50077: NEG
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: PUSH
50083: LD_INT 0
50085: PUSH
50086: LD_INT 3
50088: NEG
50089: PUSH
50090: EMPTY
50091: LIST
50092: LIST
50093: PUSH
50094: LD_INT 1
50096: NEG
50097: PUSH
50098: LD_INT 4
50100: NEG
50101: PUSH
50102: EMPTY
50103: LIST
50104: LIST
50105: PUSH
50106: LD_INT 1
50108: NEG
50109: PUSH
50110: LD_INT 5
50112: NEG
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: PUSH
50118: LD_INT 2
50120: PUSH
50121: LD_INT 3
50123: NEG
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: PUSH
50129: LD_INT 2
50131: NEG
50132: PUSH
50133: LD_INT 5
50135: NEG
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: PUSH
50141: EMPTY
50142: LIST
50143: LIST
50144: LIST
50145: LIST
50146: LIST
50147: LIST
50148: LIST
50149: LIST
50150: LIST
50151: LIST
50152: LIST
50153: LIST
50154: LIST
50155: LIST
50156: LIST
50157: LIST
50158: LIST
50159: LIST
50160: LIST
50161: LIST
50162: LIST
50163: LIST
50164: LIST
50165: LIST
50166: LIST
50167: LIST
50168: LIST
50169: LIST
50170: LIST
50171: LIST
50172: LIST
50173: LIST
50174: LIST
50175: LIST
50176: LIST
50177: LIST
50178: LIST
50179: LIST
50180: LIST
50181: LIST
50182: LIST
50183: LIST
50184: LIST
50185: LIST
50186: LIST
50187: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
50188: LD_ADDR_VAR 0 31
50192: PUSH
50193: LD_INT 0
50195: PUSH
50196: LD_INT 4
50198: PUSH
50199: EMPTY
50200: LIST
50201: LIST
50202: PUSH
50203: LD_INT 0
50205: PUSH
50206: LD_INT 3
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: PUSH
50213: LD_INT 1
50215: PUSH
50216: LD_INT 4
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: LD_INT 1
50225: PUSH
50226: LD_INT 5
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: PUSH
50233: LD_INT 0
50235: PUSH
50236: LD_INT 5
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: PUSH
50243: LD_INT 1
50245: NEG
50246: PUSH
50247: LD_INT 4
50249: PUSH
50250: EMPTY
50251: LIST
50252: LIST
50253: PUSH
50254: LD_INT 1
50256: NEG
50257: PUSH
50258: LD_INT 3
50260: PUSH
50261: EMPTY
50262: LIST
50263: LIST
50264: PUSH
50265: LD_INT 2
50267: PUSH
50268: LD_INT 5
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: PUSH
50275: LD_INT 2
50277: NEG
50278: PUSH
50279: LD_INT 3
50281: PUSH
50282: EMPTY
50283: LIST
50284: LIST
50285: PUSH
50286: LD_INT 3
50288: NEG
50289: PUSH
50290: LD_INT 0
50292: PUSH
50293: EMPTY
50294: LIST
50295: LIST
50296: PUSH
50297: LD_INT 3
50299: NEG
50300: PUSH
50301: LD_INT 1
50303: NEG
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: PUSH
50309: LD_INT 2
50311: NEG
50312: PUSH
50313: LD_INT 0
50315: PUSH
50316: EMPTY
50317: LIST
50318: LIST
50319: PUSH
50320: LD_INT 2
50322: NEG
50323: PUSH
50324: LD_INT 1
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: PUSH
50331: LD_INT 3
50333: NEG
50334: PUSH
50335: LD_INT 1
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: PUSH
50342: LD_INT 4
50344: NEG
50345: PUSH
50346: LD_INT 0
50348: PUSH
50349: EMPTY
50350: LIST
50351: LIST
50352: PUSH
50353: LD_INT 4
50355: NEG
50356: PUSH
50357: LD_INT 1
50359: NEG
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: PUSH
50365: LD_INT 4
50367: NEG
50368: PUSH
50369: LD_INT 2
50371: NEG
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: PUSH
50377: LD_INT 2
50379: NEG
50380: PUSH
50381: LD_INT 2
50383: PUSH
50384: EMPTY
50385: LIST
50386: LIST
50387: PUSH
50388: LD_INT 4
50390: NEG
50391: PUSH
50392: LD_INT 4
50394: NEG
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: PUSH
50400: LD_INT 4
50402: NEG
50403: PUSH
50404: LD_INT 5
50406: NEG
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: PUSH
50412: LD_INT 3
50414: NEG
50415: PUSH
50416: LD_INT 4
50418: NEG
50419: PUSH
50420: EMPTY
50421: LIST
50422: LIST
50423: PUSH
50424: LD_INT 3
50426: NEG
50427: PUSH
50428: LD_INT 3
50430: NEG
50431: PUSH
50432: EMPTY
50433: LIST
50434: LIST
50435: PUSH
50436: LD_INT 4
50438: NEG
50439: PUSH
50440: LD_INT 3
50442: NEG
50443: PUSH
50444: EMPTY
50445: LIST
50446: LIST
50447: PUSH
50448: LD_INT 5
50450: NEG
50451: PUSH
50452: LD_INT 4
50454: NEG
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: PUSH
50460: LD_INT 5
50462: NEG
50463: PUSH
50464: LD_INT 5
50466: NEG
50467: PUSH
50468: EMPTY
50469: LIST
50470: LIST
50471: PUSH
50472: LD_INT 3
50474: NEG
50475: PUSH
50476: LD_INT 5
50478: NEG
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: PUSH
50484: LD_INT 5
50486: NEG
50487: PUSH
50488: LD_INT 3
50490: NEG
50491: PUSH
50492: EMPTY
50493: LIST
50494: LIST
50495: PUSH
50496: LD_INT 0
50498: PUSH
50499: LD_INT 3
50501: NEG
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: PUSH
50507: LD_INT 0
50509: PUSH
50510: LD_INT 4
50512: NEG
50513: PUSH
50514: EMPTY
50515: LIST
50516: LIST
50517: PUSH
50518: LD_INT 1
50520: PUSH
50521: LD_INT 3
50523: NEG
50524: PUSH
50525: EMPTY
50526: LIST
50527: LIST
50528: PUSH
50529: LD_INT 1
50531: PUSH
50532: LD_INT 2
50534: NEG
50535: PUSH
50536: EMPTY
50537: LIST
50538: LIST
50539: PUSH
50540: LD_INT 0
50542: PUSH
50543: LD_INT 2
50545: NEG
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: PUSH
50551: LD_INT 1
50553: NEG
50554: PUSH
50555: LD_INT 3
50557: NEG
50558: PUSH
50559: EMPTY
50560: LIST
50561: LIST
50562: PUSH
50563: LD_INT 1
50565: NEG
50566: PUSH
50567: LD_INT 4
50569: NEG
50570: PUSH
50571: EMPTY
50572: LIST
50573: LIST
50574: PUSH
50575: LD_INT 2
50577: PUSH
50578: LD_INT 2
50580: NEG
50581: PUSH
50582: EMPTY
50583: LIST
50584: LIST
50585: PUSH
50586: LD_INT 2
50588: NEG
50589: PUSH
50590: LD_INT 4
50592: NEG
50593: PUSH
50594: EMPTY
50595: LIST
50596: LIST
50597: PUSH
50598: LD_INT 4
50600: PUSH
50601: LD_INT 0
50603: PUSH
50604: EMPTY
50605: LIST
50606: LIST
50607: PUSH
50608: LD_INT 4
50610: PUSH
50611: LD_INT 1
50613: NEG
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: PUSH
50619: LD_INT 5
50621: PUSH
50622: LD_INT 0
50624: PUSH
50625: EMPTY
50626: LIST
50627: LIST
50628: PUSH
50629: LD_INT 5
50631: PUSH
50632: LD_INT 1
50634: PUSH
50635: EMPTY
50636: LIST
50637: LIST
50638: PUSH
50639: LD_INT 4
50641: PUSH
50642: LD_INT 1
50644: PUSH
50645: EMPTY
50646: LIST
50647: LIST
50648: PUSH
50649: LD_INT 3
50651: PUSH
50652: LD_INT 0
50654: PUSH
50655: EMPTY
50656: LIST
50657: LIST
50658: PUSH
50659: LD_INT 3
50661: PUSH
50662: LD_INT 1
50664: NEG
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: PUSH
50670: LD_INT 3
50672: PUSH
50673: LD_INT 2
50675: NEG
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: PUSH
50681: LD_INT 5
50683: PUSH
50684: LD_INT 2
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: PUSH
50691: EMPTY
50692: LIST
50693: LIST
50694: LIST
50695: LIST
50696: LIST
50697: LIST
50698: LIST
50699: LIST
50700: LIST
50701: LIST
50702: LIST
50703: LIST
50704: LIST
50705: LIST
50706: LIST
50707: LIST
50708: LIST
50709: LIST
50710: LIST
50711: LIST
50712: LIST
50713: LIST
50714: LIST
50715: LIST
50716: LIST
50717: LIST
50718: LIST
50719: LIST
50720: LIST
50721: LIST
50722: LIST
50723: LIST
50724: LIST
50725: LIST
50726: LIST
50727: LIST
50728: LIST
50729: LIST
50730: LIST
50731: LIST
50732: LIST
50733: LIST
50734: LIST
50735: LIST
50736: LIST
50737: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
50738: LD_ADDR_VAR 0 32
50742: PUSH
50743: LD_INT 4
50745: NEG
50746: PUSH
50747: LD_INT 0
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: PUSH
50754: LD_INT 4
50756: NEG
50757: PUSH
50758: LD_INT 1
50760: NEG
50761: PUSH
50762: EMPTY
50763: LIST
50764: LIST
50765: PUSH
50766: LD_INT 3
50768: NEG
50769: PUSH
50770: LD_INT 0
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: PUSH
50777: LD_INT 3
50779: NEG
50780: PUSH
50781: LD_INT 1
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: PUSH
50788: LD_INT 4
50790: NEG
50791: PUSH
50792: LD_INT 1
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PUSH
50799: LD_INT 5
50801: NEG
50802: PUSH
50803: LD_INT 0
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: PUSH
50810: LD_INT 5
50812: NEG
50813: PUSH
50814: LD_INT 1
50816: NEG
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: PUSH
50822: LD_INT 5
50824: NEG
50825: PUSH
50826: LD_INT 2
50828: NEG
50829: PUSH
50830: EMPTY
50831: LIST
50832: LIST
50833: PUSH
50834: LD_INT 3
50836: NEG
50837: PUSH
50838: LD_INT 2
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: PUSH
50845: LD_INT 3
50847: NEG
50848: PUSH
50849: LD_INT 3
50851: NEG
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 3
50859: NEG
50860: PUSH
50861: LD_INT 4
50863: NEG
50864: PUSH
50865: EMPTY
50866: LIST
50867: LIST
50868: PUSH
50869: LD_INT 2
50871: NEG
50872: PUSH
50873: LD_INT 3
50875: NEG
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: PUSH
50881: LD_INT 2
50883: NEG
50884: PUSH
50885: LD_INT 2
50887: NEG
50888: PUSH
50889: EMPTY
50890: LIST
50891: LIST
50892: PUSH
50893: LD_INT 3
50895: NEG
50896: PUSH
50897: LD_INT 2
50899: NEG
50900: PUSH
50901: EMPTY
50902: LIST
50903: LIST
50904: PUSH
50905: LD_INT 4
50907: NEG
50908: PUSH
50909: LD_INT 3
50911: NEG
50912: PUSH
50913: EMPTY
50914: LIST
50915: LIST
50916: PUSH
50917: LD_INT 4
50919: NEG
50920: PUSH
50921: LD_INT 4
50923: NEG
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: PUSH
50929: LD_INT 2
50931: NEG
50932: PUSH
50933: LD_INT 4
50935: NEG
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: PUSH
50941: LD_INT 4
50943: NEG
50944: PUSH
50945: LD_INT 2
50947: NEG
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: PUSH
50953: LD_INT 0
50955: PUSH
50956: LD_INT 4
50958: NEG
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: PUSH
50964: LD_INT 0
50966: PUSH
50967: LD_INT 5
50969: NEG
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: PUSH
50975: LD_INT 1
50977: PUSH
50978: LD_INT 4
50980: NEG
50981: PUSH
50982: EMPTY
50983: LIST
50984: LIST
50985: PUSH
50986: LD_INT 1
50988: PUSH
50989: LD_INT 3
50991: NEG
50992: PUSH
50993: EMPTY
50994: LIST
50995: LIST
50996: PUSH
50997: LD_INT 0
50999: PUSH
51000: LD_INT 3
51002: NEG
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: PUSH
51008: LD_INT 1
51010: NEG
51011: PUSH
51012: LD_INT 4
51014: NEG
51015: PUSH
51016: EMPTY
51017: LIST
51018: LIST
51019: PUSH
51020: LD_INT 1
51022: NEG
51023: PUSH
51024: LD_INT 5
51026: NEG
51027: PUSH
51028: EMPTY
51029: LIST
51030: LIST
51031: PUSH
51032: LD_INT 2
51034: PUSH
51035: LD_INT 3
51037: NEG
51038: PUSH
51039: EMPTY
51040: LIST
51041: LIST
51042: PUSH
51043: LD_INT 2
51045: NEG
51046: PUSH
51047: LD_INT 5
51049: NEG
51050: PUSH
51051: EMPTY
51052: LIST
51053: LIST
51054: PUSH
51055: LD_INT 3
51057: PUSH
51058: LD_INT 0
51060: PUSH
51061: EMPTY
51062: LIST
51063: LIST
51064: PUSH
51065: LD_INT 3
51067: PUSH
51068: LD_INT 1
51070: NEG
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: LD_INT 4
51078: PUSH
51079: LD_INT 0
51081: PUSH
51082: EMPTY
51083: LIST
51084: LIST
51085: PUSH
51086: LD_INT 4
51088: PUSH
51089: LD_INT 1
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: PUSH
51096: LD_INT 3
51098: PUSH
51099: LD_INT 1
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: PUSH
51106: LD_INT 2
51108: PUSH
51109: LD_INT 0
51111: PUSH
51112: EMPTY
51113: LIST
51114: LIST
51115: PUSH
51116: LD_INT 2
51118: PUSH
51119: LD_INT 1
51121: NEG
51122: PUSH
51123: EMPTY
51124: LIST
51125: LIST
51126: PUSH
51127: LD_INT 2
51129: PUSH
51130: LD_INT 2
51132: NEG
51133: PUSH
51134: EMPTY
51135: LIST
51136: LIST
51137: PUSH
51138: LD_INT 4
51140: PUSH
51141: LD_INT 2
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: PUSH
51148: LD_INT 4
51150: PUSH
51151: LD_INT 4
51153: PUSH
51154: EMPTY
51155: LIST
51156: LIST
51157: PUSH
51158: LD_INT 4
51160: PUSH
51161: LD_INT 3
51163: PUSH
51164: EMPTY
51165: LIST
51166: LIST
51167: PUSH
51168: LD_INT 5
51170: PUSH
51171: LD_INT 4
51173: PUSH
51174: EMPTY
51175: LIST
51176: LIST
51177: PUSH
51178: LD_INT 5
51180: PUSH
51181: LD_INT 5
51183: PUSH
51184: EMPTY
51185: LIST
51186: LIST
51187: PUSH
51188: LD_INT 4
51190: PUSH
51191: LD_INT 5
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: LD_INT 3
51200: PUSH
51201: LD_INT 4
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: LD_INT 3
51210: PUSH
51211: LD_INT 3
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: PUSH
51218: LD_INT 5
51220: PUSH
51221: LD_INT 3
51223: PUSH
51224: EMPTY
51225: LIST
51226: LIST
51227: PUSH
51228: LD_INT 3
51230: PUSH
51231: LD_INT 5
51233: PUSH
51234: EMPTY
51235: LIST
51236: LIST
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: LIST
51242: LIST
51243: LIST
51244: LIST
51245: LIST
51246: LIST
51247: LIST
51248: LIST
51249: LIST
51250: LIST
51251: LIST
51252: LIST
51253: LIST
51254: LIST
51255: LIST
51256: LIST
51257: LIST
51258: LIST
51259: LIST
51260: LIST
51261: LIST
51262: LIST
51263: LIST
51264: LIST
51265: LIST
51266: LIST
51267: LIST
51268: LIST
51269: LIST
51270: LIST
51271: LIST
51272: LIST
51273: LIST
51274: LIST
51275: LIST
51276: LIST
51277: LIST
51278: LIST
51279: LIST
51280: LIST
51281: LIST
51282: LIST
51283: LIST
51284: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
51285: LD_ADDR_VAR 0 33
51289: PUSH
51290: LD_INT 4
51292: NEG
51293: PUSH
51294: LD_INT 4
51296: NEG
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: LD_INT 4
51304: NEG
51305: PUSH
51306: LD_INT 5
51308: NEG
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: LD_INT 3
51316: NEG
51317: PUSH
51318: LD_INT 4
51320: NEG
51321: PUSH
51322: EMPTY
51323: LIST
51324: LIST
51325: PUSH
51326: LD_INT 3
51328: NEG
51329: PUSH
51330: LD_INT 3
51332: NEG
51333: PUSH
51334: EMPTY
51335: LIST
51336: LIST
51337: PUSH
51338: LD_INT 4
51340: NEG
51341: PUSH
51342: LD_INT 3
51344: NEG
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: PUSH
51350: LD_INT 5
51352: NEG
51353: PUSH
51354: LD_INT 4
51356: NEG
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: PUSH
51362: LD_INT 5
51364: NEG
51365: PUSH
51366: LD_INT 5
51368: NEG
51369: PUSH
51370: EMPTY
51371: LIST
51372: LIST
51373: PUSH
51374: LD_INT 3
51376: NEG
51377: PUSH
51378: LD_INT 5
51380: NEG
51381: PUSH
51382: EMPTY
51383: LIST
51384: LIST
51385: PUSH
51386: LD_INT 5
51388: NEG
51389: PUSH
51390: LD_INT 3
51392: NEG
51393: PUSH
51394: EMPTY
51395: LIST
51396: LIST
51397: PUSH
51398: LD_INT 0
51400: PUSH
51401: LD_INT 3
51403: NEG
51404: PUSH
51405: EMPTY
51406: LIST
51407: LIST
51408: PUSH
51409: LD_INT 0
51411: PUSH
51412: LD_INT 4
51414: NEG
51415: PUSH
51416: EMPTY
51417: LIST
51418: LIST
51419: PUSH
51420: LD_INT 1
51422: PUSH
51423: LD_INT 3
51425: NEG
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: PUSH
51431: LD_INT 1
51433: PUSH
51434: LD_INT 2
51436: NEG
51437: PUSH
51438: EMPTY
51439: LIST
51440: LIST
51441: PUSH
51442: LD_INT 0
51444: PUSH
51445: LD_INT 2
51447: NEG
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: LD_INT 1
51455: NEG
51456: PUSH
51457: LD_INT 3
51459: NEG
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: PUSH
51465: LD_INT 1
51467: NEG
51468: PUSH
51469: LD_INT 4
51471: NEG
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: PUSH
51477: LD_INT 2
51479: PUSH
51480: LD_INT 2
51482: NEG
51483: PUSH
51484: EMPTY
51485: LIST
51486: LIST
51487: PUSH
51488: LD_INT 2
51490: NEG
51491: PUSH
51492: LD_INT 4
51494: NEG
51495: PUSH
51496: EMPTY
51497: LIST
51498: LIST
51499: PUSH
51500: LD_INT 4
51502: PUSH
51503: LD_INT 0
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: PUSH
51510: LD_INT 4
51512: PUSH
51513: LD_INT 1
51515: NEG
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: PUSH
51521: LD_INT 5
51523: PUSH
51524: LD_INT 0
51526: PUSH
51527: EMPTY
51528: LIST
51529: LIST
51530: PUSH
51531: LD_INT 5
51533: PUSH
51534: LD_INT 1
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PUSH
51541: LD_INT 4
51543: PUSH
51544: LD_INT 1
51546: PUSH
51547: EMPTY
51548: LIST
51549: LIST
51550: PUSH
51551: LD_INT 3
51553: PUSH
51554: LD_INT 0
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: PUSH
51561: LD_INT 3
51563: PUSH
51564: LD_INT 1
51566: NEG
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: PUSH
51572: LD_INT 3
51574: PUSH
51575: LD_INT 2
51577: NEG
51578: PUSH
51579: EMPTY
51580: LIST
51581: LIST
51582: PUSH
51583: LD_INT 5
51585: PUSH
51586: LD_INT 2
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: LD_INT 3
51595: PUSH
51596: LD_INT 3
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: PUSH
51603: LD_INT 3
51605: PUSH
51606: LD_INT 2
51608: PUSH
51609: EMPTY
51610: LIST
51611: LIST
51612: PUSH
51613: LD_INT 4
51615: PUSH
51616: LD_INT 3
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: PUSH
51623: LD_INT 4
51625: PUSH
51626: LD_INT 4
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: PUSH
51633: LD_INT 3
51635: PUSH
51636: LD_INT 4
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PUSH
51643: LD_INT 2
51645: PUSH
51646: LD_INT 3
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: PUSH
51653: LD_INT 2
51655: PUSH
51656: LD_INT 2
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: PUSH
51663: LD_INT 4
51665: PUSH
51666: LD_INT 2
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: LD_INT 2
51675: PUSH
51676: LD_INT 4
51678: PUSH
51679: EMPTY
51680: LIST
51681: LIST
51682: PUSH
51683: LD_INT 0
51685: PUSH
51686: LD_INT 4
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: PUSH
51693: LD_INT 0
51695: PUSH
51696: LD_INT 3
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: PUSH
51703: LD_INT 1
51705: PUSH
51706: LD_INT 4
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: PUSH
51713: LD_INT 1
51715: PUSH
51716: LD_INT 5
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: LD_INT 0
51725: PUSH
51726: LD_INT 5
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: PUSH
51733: LD_INT 1
51735: NEG
51736: PUSH
51737: LD_INT 4
51739: PUSH
51740: EMPTY
51741: LIST
51742: LIST
51743: PUSH
51744: LD_INT 1
51746: NEG
51747: PUSH
51748: LD_INT 3
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: PUSH
51755: LD_INT 2
51757: PUSH
51758: LD_INT 5
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: PUSH
51765: LD_INT 2
51767: NEG
51768: PUSH
51769: LD_INT 3
51771: PUSH
51772: EMPTY
51773: LIST
51774: LIST
51775: PUSH
51776: EMPTY
51777: LIST
51778: LIST
51779: LIST
51780: LIST
51781: LIST
51782: LIST
51783: LIST
51784: LIST
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: LIST
51798: LIST
51799: LIST
51800: LIST
51801: LIST
51802: LIST
51803: LIST
51804: LIST
51805: LIST
51806: LIST
51807: LIST
51808: LIST
51809: LIST
51810: LIST
51811: LIST
51812: LIST
51813: LIST
51814: LIST
51815: LIST
51816: LIST
51817: LIST
51818: LIST
51819: LIST
51820: LIST
51821: LIST
51822: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
51823: LD_ADDR_VAR 0 34
51827: PUSH
51828: LD_INT 0
51830: PUSH
51831: LD_INT 4
51833: NEG
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: PUSH
51839: LD_INT 0
51841: PUSH
51842: LD_INT 5
51844: NEG
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: LD_INT 1
51852: PUSH
51853: LD_INT 4
51855: NEG
51856: PUSH
51857: EMPTY
51858: LIST
51859: LIST
51860: PUSH
51861: LD_INT 1
51863: PUSH
51864: LD_INT 3
51866: NEG
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: PUSH
51872: LD_INT 0
51874: PUSH
51875: LD_INT 3
51877: NEG
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: PUSH
51883: LD_INT 1
51885: NEG
51886: PUSH
51887: LD_INT 4
51889: NEG
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: PUSH
51895: LD_INT 1
51897: NEG
51898: PUSH
51899: LD_INT 5
51901: NEG
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: PUSH
51907: LD_INT 2
51909: PUSH
51910: LD_INT 3
51912: NEG
51913: PUSH
51914: EMPTY
51915: LIST
51916: LIST
51917: PUSH
51918: LD_INT 2
51920: NEG
51921: PUSH
51922: LD_INT 5
51924: NEG
51925: PUSH
51926: EMPTY
51927: LIST
51928: LIST
51929: PUSH
51930: LD_INT 3
51932: PUSH
51933: LD_INT 0
51935: PUSH
51936: EMPTY
51937: LIST
51938: LIST
51939: PUSH
51940: LD_INT 3
51942: PUSH
51943: LD_INT 1
51945: NEG
51946: PUSH
51947: EMPTY
51948: LIST
51949: LIST
51950: PUSH
51951: LD_INT 4
51953: PUSH
51954: LD_INT 0
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: PUSH
51961: LD_INT 4
51963: PUSH
51964: LD_INT 1
51966: PUSH
51967: EMPTY
51968: LIST
51969: LIST
51970: PUSH
51971: LD_INT 3
51973: PUSH
51974: LD_INT 1
51976: PUSH
51977: EMPTY
51978: LIST
51979: LIST
51980: PUSH
51981: LD_INT 2
51983: PUSH
51984: LD_INT 0
51986: PUSH
51987: EMPTY
51988: LIST
51989: LIST
51990: PUSH
51991: LD_INT 2
51993: PUSH
51994: LD_INT 1
51996: NEG
51997: PUSH
51998: EMPTY
51999: LIST
52000: LIST
52001: PUSH
52002: LD_INT 2
52004: PUSH
52005: LD_INT 2
52007: NEG
52008: PUSH
52009: EMPTY
52010: LIST
52011: LIST
52012: PUSH
52013: LD_INT 4
52015: PUSH
52016: LD_INT 2
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: LD_INT 4
52025: PUSH
52026: LD_INT 4
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: PUSH
52033: LD_INT 4
52035: PUSH
52036: LD_INT 3
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: PUSH
52043: LD_INT 5
52045: PUSH
52046: LD_INT 4
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: PUSH
52053: LD_INT 5
52055: PUSH
52056: LD_INT 5
52058: PUSH
52059: EMPTY
52060: LIST
52061: LIST
52062: PUSH
52063: LD_INT 4
52065: PUSH
52066: LD_INT 5
52068: PUSH
52069: EMPTY
52070: LIST
52071: LIST
52072: PUSH
52073: LD_INT 3
52075: PUSH
52076: LD_INT 4
52078: PUSH
52079: EMPTY
52080: LIST
52081: LIST
52082: PUSH
52083: LD_INT 3
52085: PUSH
52086: LD_INT 3
52088: PUSH
52089: EMPTY
52090: LIST
52091: LIST
52092: PUSH
52093: LD_INT 5
52095: PUSH
52096: LD_INT 3
52098: PUSH
52099: EMPTY
52100: LIST
52101: LIST
52102: PUSH
52103: LD_INT 3
52105: PUSH
52106: LD_INT 5
52108: PUSH
52109: EMPTY
52110: LIST
52111: LIST
52112: PUSH
52113: LD_INT 0
52115: PUSH
52116: LD_INT 3
52118: PUSH
52119: EMPTY
52120: LIST
52121: LIST
52122: PUSH
52123: LD_INT 0
52125: PUSH
52126: LD_INT 2
52128: PUSH
52129: EMPTY
52130: LIST
52131: LIST
52132: PUSH
52133: LD_INT 1
52135: PUSH
52136: LD_INT 3
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: PUSH
52143: LD_INT 1
52145: PUSH
52146: LD_INT 4
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: PUSH
52153: LD_INT 0
52155: PUSH
52156: LD_INT 4
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: PUSH
52163: LD_INT 1
52165: NEG
52166: PUSH
52167: LD_INT 3
52169: PUSH
52170: EMPTY
52171: LIST
52172: LIST
52173: PUSH
52174: LD_INT 1
52176: NEG
52177: PUSH
52178: LD_INT 2
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: PUSH
52185: LD_INT 2
52187: PUSH
52188: LD_INT 4
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: PUSH
52195: LD_INT 2
52197: NEG
52198: PUSH
52199: LD_INT 2
52201: PUSH
52202: EMPTY
52203: LIST
52204: LIST
52205: PUSH
52206: LD_INT 4
52208: NEG
52209: PUSH
52210: LD_INT 0
52212: PUSH
52213: EMPTY
52214: LIST
52215: LIST
52216: PUSH
52217: LD_INT 4
52219: NEG
52220: PUSH
52221: LD_INT 1
52223: NEG
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: PUSH
52229: LD_INT 3
52231: NEG
52232: PUSH
52233: LD_INT 0
52235: PUSH
52236: EMPTY
52237: LIST
52238: LIST
52239: PUSH
52240: LD_INT 3
52242: NEG
52243: PUSH
52244: LD_INT 1
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: PUSH
52251: LD_INT 4
52253: NEG
52254: PUSH
52255: LD_INT 1
52257: PUSH
52258: EMPTY
52259: LIST
52260: LIST
52261: PUSH
52262: LD_INT 5
52264: NEG
52265: PUSH
52266: LD_INT 0
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: PUSH
52273: LD_INT 5
52275: NEG
52276: PUSH
52277: LD_INT 1
52279: NEG
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: PUSH
52285: LD_INT 5
52287: NEG
52288: PUSH
52289: LD_INT 2
52291: NEG
52292: PUSH
52293: EMPTY
52294: LIST
52295: LIST
52296: PUSH
52297: LD_INT 3
52299: NEG
52300: PUSH
52301: LD_INT 2
52303: PUSH
52304: EMPTY
52305: LIST
52306: LIST
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: LIST
52312: LIST
52313: LIST
52314: LIST
52315: LIST
52316: LIST
52317: LIST
52318: LIST
52319: LIST
52320: LIST
52321: LIST
52322: LIST
52323: LIST
52324: LIST
52325: LIST
52326: LIST
52327: LIST
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: LIST
52333: LIST
52334: LIST
52335: LIST
52336: LIST
52337: LIST
52338: LIST
52339: LIST
52340: LIST
52341: LIST
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: LIST
52354: ST_TO_ADDR
// end ; end ;
52355: GO 52358
52357: POP
// case btype of b_depot , b_warehouse :
52358: LD_VAR 0 1
52362: PUSH
52363: LD_INT 0
52365: DOUBLE
52366: EQUAL
52367: IFTRUE 52377
52369: LD_INT 1
52371: DOUBLE
52372: EQUAL
52373: IFTRUE 52377
52375: GO 52578
52377: POP
// case nation of nation_american :
52378: LD_VAR 0 5
52382: PUSH
52383: LD_INT 1
52385: DOUBLE
52386: EQUAL
52387: IFTRUE 52391
52389: GO 52447
52391: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
52392: LD_ADDR_VAR 0 9
52396: PUSH
52397: LD_VAR 0 11
52401: PUSH
52402: LD_VAR 0 12
52406: PUSH
52407: LD_VAR 0 13
52411: PUSH
52412: LD_VAR 0 14
52416: PUSH
52417: LD_VAR 0 15
52421: PUSH
52422: LD_VAR 0 16
52426: PUSH
52427: EMPTY
52428: LIST
52429: LIST
52430: LIST
52431: LIST
52432: LIST
52433: LIST
52434: PUSH
52435: LD_VAR 0 4
52439: PUSH
52440: LD_INT 1
52442: PLUS
52443: ARRAY
52444: ST_TO_ADDR
52445: GO 52576
52447: LD_INT 2
52449: DOUBLE
52450: EQUAL
52451: IFTRUE 52455
52453: GO 52511
52455: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
52456: LD_ADDR_VAR 0 9
52460: PUSH
52461: LD_VAR 0 17
52465: PUSH
52466: LD_VAR 0 18
52470: PUSH
52471: LD_VAR 0 19
52475: PUSH
52476: LD_VAR 0 20
52480: PUSH
52481: LD_VAR 0 21
52485: PUSH
52486: LD_VAR 0 22
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: LIST
52495: LIST
52496: LIST
52497: LIST
52498: PUSH
52499: LD_VAR 0 4
52503: PUSH
52504: LD_INT 1
52506: PLUS
52507: ARRAY
52508: ST_TO_ADDR
52509: GO 52576
52511: LD_INT 3
52513: DOUBLE
52514: EQUAL
52515: IFTRUE 52519
52517: GO 52575
52519: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
52520: LD_ADDR_VAR 0 9
52524: PUSH
52525: LD_VAR 0 23
52529: PUSH
52530: LD_VAR 0 24
52534: PUSH
52535: LD_VAR 0 25
52539: PUSH
52540: LD_VAR 0 26
52544: PUSH
52545: LD_VAR 0 27
52549: PUSH
52550: LD_VAR 0 28
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: LIST
52559: LIST
52560: LIST
52561: LIST
52562: PUSH
52563: LD_VAR 0 4
52567: PUSH
52568: LD_INT 1
52570: PLUS
52571: ARRAY
52572: ST_TO_ADDR
52573: GO 52576
52575: POP
52576: GO 53131
52578: LD_INT 2
52580: DOUBLE
52581: EQUAL
52582: IFTRUE 52592
52584: LD_INT 3
52586: DOUBLE
52587: EQUAL
52588: IFTRUE 52592
52590: GO 52648
52592: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
52593: LD_ADDR_VAR 0 9
52597: PUSH
52598: LD_VAR 0 29
52602: PUSH
52603: LD_VAR 0 30
52607: PUSH
52608: LD_VAR 0 31
52612: PUSH
52613: LD_VAR 0 32
52617: PUSH
52618: LD_VAR 0 33
52622: PUSH
52623: LD_VAR 0 34
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: PUSH
52636: LD_VAR 0 4
52640: PUSH
52641: LD_INT 1
52643: PLUS
52644: ARRAY
52645: ST_TO_ADDR
52646: GO 53131
52648: LD_INT 16
52650: DOUBLE
52651: EQUAL
52652: IFTRUE 52710
52654: LD_INT 17
52656: DOUBLE
52657: EQUAL
52658: IFTRUE 52710
52660: LD_INT 18
52662: DOUBLE
52663: EQUAL
52664: IFTRUE 52710
52666: LD_INT 19
52668: DOUBLE
52669: EQUAL
52670: IFTRUE 52710
52672: LD_INT 22
52674: DOUBLE
52675: EQUAL
52676: IFTRUE 52710
52678: LD_INT 20
52680: DOUBLE
52681: EQUAL
52682: IFTRUE 52710
52684: LD_INT 21
52686: DOUBLE
52687: EQUAL
52688: IFTRUE 52710
52690: LD_INT 23
52692: DOUBLE
52693: EQUAL
52694: IFTRUE 52710
52696: LD_INT 24
52698: DOUBLE
52699: EQUAL
52700: IFTRUE 52710
52702: LD_INT 25
52704: DOUBLE
52705: EQUAL
52706: IFTRUE 52710
52708: GO 52766
52710: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
52711: LD_ADDR_VAR 0 9
52715: PUSH
52716: LD_VAR 0 35
52720: PUSH
52721: LD_VAR 0 36
52725: PUSH
52726: LD_VAR 0 37
52730: PUSH
52731: LD_VAR 0 38
52735: PUSH
52736: LD_VAR 0 39
52740: PUSH
52741: LD_VAR 0 40
52745: PUSH
52746: EMPTY
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: PUSH
52754: LD_VAR 0 4
52758: PUSH
52759: LD_INT 1
52761: PLUS
52762: ARRAY
52763: ST_TO_ADDR
52764: GO 53131
52766: LD_INT 6
52768: DOUBLE
52769: EQUAL
52770: IFTRUE 52822
52772: LD_INT 7
52774: DOUBLE
52775: EQUAL
52776: IFTRUE 52822
52778: LD_INT 8
52780: DOUBLE
52781: EQUAL
52782: IFTRUE 52822
52784: LD_INT 13
52786: DOUBLE
52787: EQUAL
52788: IFTRUE 52822
52790: LD_INT 12
52792: DOUBLE
52793: EQUAL
52794: IFTRUE 52822
52796: LD_INT 15
52798: DOUBLE
52799: EQUAL
52800: IFTRUE 52822
52802: LD_INT 11
52804: DOUBLE
52805: EQUAL
52806: IFTRUE 52822
52808: LD_INT 14
52810: DOUBLE
52811: EQUAL
52812: IFTRUE 52822
52814: LD_INT 10
52816: DOUBLE
52817: EQUAL
52818: IFTRUE 52822
52820: GO 52878
52822: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
52823: LD_ADDR_VAR 0 9
52827: PUSH
52828: LD_VAR 0 41
52832: PUSH
52833: LD_VAR 0 42
52837: PUSH
52838: LD_VAR 0 43
52842: PUSH
52843: LD_VAR 0 44
52847: PUSH
52848: LD_VAR 0 45
52852: PUSH
52853: LD_VAR 0 46
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: LIST
52862: LIST
52863: LIST
52864: LIST
52865: PUSH
52866: LD_VAR 0 4
52870: PUSH
52871: LD_INT 1
52873: PLUS
52874: ARRAY
52875: ST_TO_ADDR
52876: GO 53131
52878: LD_INT 36
52880: DOUBLE
52881: EQUAL
52882: IFTRUE 52886
52884: GO 52942
52886: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
52887: LD_ADDR_VAR 0 9
52891: PUSH
52892: LD_VAR 0 47
52896: PUSH
52897: LD_VAR 0 48
52901: PUSH
52902: LD_VAR 0 49
52906: PUSH
52907: LD_VAR 0 50
52911: PUSH
52912: LD_VAR 0 51
52916: PUSH
52917: LD_VAR 0 52
52921: PUSH
52922: EMPTY
52923: LIST
52924: LIST
52925: LIST
52926: LIST
52927: LIST
52928: LIST
52929: PUSH
52930: LD_VAR 0 4
52934: PUSH
52935: LD_INT 1
52937: PLUS
52938: ARRAY
52939: ST_TO_ADDR
52940: GO 53131
52942: LD_INT 4
52944: DOUBLE
52945: EQUAL
52946: IFTRUE 52968
52948: LD_INT 5
52950: DOUBLE
52951: EQUAL
52952: IFTRUE 52968
52954: LD_INT 34
52956: DOUBLE
52957: EQUAL
52958: IFTRUE 52968
52960: LD_INT 37
52962: DOUBLE
52963: EQUAL
52964: IFTRUE 52968
52966: GO 53024
52968: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
52969: LD_ADDR_VAR 0 9
52973: PUSH
52974: LD_VAR 0 53
52978: PUSH
52979: LD_VAR 0 54
52983: PUSH
52984: LD_VAR 0 55
52988: PUSH
52989: LD_VAR 0 56
52993: PUSH
52994: LD_VAR 0 57
52998: PUSH
52999: LD_VAR 0 58
53003: PUSH
53004: EMPTY
53005: LIST
53006: LIST
53007: LIST
53008: LIST
53009: LIST
53010: LIST
53011: PUSH
53012: LD_VAR 0 4
53016: PUSH
53017: LD_INT 1
53019: PLUS
53020: ARRAY
53021: ST_TO_ADDR
53022: GO 53131
53024: LD_INT 31
53026: DOUBLE
53027: EQUAL
53028: IFTRUE 53074
53030: LD_INT 32
53032: DOUBLE
53033: EQUAL
53034: IFTRUE 53074
53036: LD_INT 33
53038: DOUBLE
53039: EQUAL
53040: IFTRUE 53074
53042: LD_INT 27
53044: DOUBLE
53045: EQUAL
53046: IFTRUE 53074
53048: LD_INT 26
53050: DOUBLE
53051: EQUAL
53052: IFTRUE 53074
53054: LD_INT 28
53056: DOUBLE
53057: EQUAL
53058: IFTRUE 53074
53060: LD_INT 29
53062: DOUBLE
53063: EQUAL
53064: IFTRUE 53074
53066: LD_INT 30
53068: DOUBLE
53069: EQUAL
53070: IFTRUE 53074
53072: GO 53130
53074: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
53075: LD_ADDR_VAR 0 9
53079: PUSH
53080: LD_VAR 0 59
53084: PUSH
53085: LD_VAR 0 60
53089: PUSH
53090: LD_VAR 0 61
53094: PUSH
53095: LD_VAR 0 62
53099: PUSH
53100: LD_VAR 0 63
53104: PUSH
53105: LD_VAR 0 64
53109: PUSH
53110: EMPTY
53111: LIST
53112: LIST
53113: LIST
53114: LIST
53115: LIST
53116: LIST
53117: PUSH
53118: LD_VAR 0 4
53122: PUSH
53123: LD_INT 1
53125: PLUS
53126: ARRAY
53127: ST_TO_ADDR
53128: GO 53131
53130: POP
// temp_list2 = [ ] ;
53131: LD_ADDR_VAR 0 10
53135: PUSH
53136: EMPTY
53137: ST_TO_ADDR
// for i in temp_list do
53138: LD_ADDR_VAR 0 8
53142: PUSH
53143: LD_VAR 0 9
53147: PUSH
53148: FOR_IN
53149: IFFALSE 53201
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
53151: LD_ADDR_VAR 0 10
53155: PUSH
53156: LD_VAR 0 10
53160: PUSH
53161: LD_VAR 0 8
53165: PUSH
53166: LD_INT 1
53168: ARRAY
53169: PUSH
53170: LD_VAR 0 2
53174: PLUS
53175: PUSH
53176: LD_VAR 0 8
53180: PUSH
53181: LD_INT 2
53183: ARRAY
53184: PUSH
53185: LD_VAR 0 3
53189: PLUS
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: PUSH
53195: EMPTY
53196: LIST
53197: ADD
53198: ST_TO_ADDR
53199: GO 53148
53201: POP
53202: POP
// result = temp_list2 ;
53203: LD_ADDR_VAR 0 7
53207: PUSH
53208: LD_VAR 0 10
53212: ST_TO_ADDR
// end ;
53213: LD_VAR 0 7
53217: RET
// export function EnemyInRange ( unit , dist ) ; begin
53218: LD_INT 0
53220: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
53221: LD_ADDR_VAR 0 3
53225: PUSH
53226: LD_VAR 0 1
53230: PPUSH
53231: CALL_OW 255
53235: PPUSH
53236: LD_VAR 0 1
53240: PPUSH
53241: CALL_OW 250
53245: PPUSH
53246: LD_VAR 0 1
53250: PPUSH
53251: CALL_OW 251
53255: PPUSH
53256: LD_VAR 0 2
53260: PPUSH
53261: CALL 27322 0 4
53265: PUSH
53266: LD_INT 4
53268: ARRAY
53269: ST_TO_ADDR
// end ;
53270: LD_VAR 0 3
53274: RET
// export function PlayerSeeMe ( unit ) ; begin
53275: LD_INT 0
53277: PPUSH
// result := See ( your_side , unit ) ;
53278: LD_ADDR_VAR 0 2
53282: PUSH
53283: LD_OWVAR 2
53287: PPUSH
53288: LD_VAR 0 1
53292: PPUSH
53293: CALL_OW 292
53297: ST_TO_ADDR
// end ;
53298: LD_VAR 0 2
53302: RET
// export function ReverseDir ( unit ) ; begin
53303: LD_INT 0
53305: PPUSH
// if not unit then
53306: LD_VAR 0 1
53310: NOT
53311: IFFALSE 53315
// exit ;
53313: GO 53361
// result := [ 3 , 4 , 5 , 0 , 1 , 2 ] [ GetDir ( unit ) + 1 ] ;
53315: LD_ADDR_VAR 0 2
53319: PUSH
53320: LD_INT 3
53322: PUSH
53323: LD_INT 4
53325: PUSH
53326: LD_INT 5
53328: PUSH
53329: LD_INT 0
53331: PUSH
53332: LD_INT 1
53334: PUSH
53335: LD_INT 2
53337: PUSH
53338: EMPTY
53339: LIST
53340: LIST
53341: LIST
53342: LIST
53343: LIST
53344: LIST
53345: PUSH
53346: LD_VAR 0 1
53350: PPUSH
53351: CALL_OW 254
53355: PUSH
53356: LD_INT 1
53358: PLUS
53359: ARRAY
53360: ST_TO_ADDR
// end ;
53361: LD_VAR 0 2
53365: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
53366: LD_INT 0
53368: PPUSH
53369: PPUSH
53370: PPUSH
53371: PPUSH
53372: PPUSH
// if not hexes then
53373: LD_VAR 0 2
53377: NOT
53378: IFFALSE 53382
// exit ;
53380: GO 53530
// dist := 9999 ;
53382: LD_ADDR_VAR 0 5
53386: PUSH
53387: LD_INT 9999
53389: ST_TO_ADDR
// for i = 1 to hexes do
53390: LD_ADDR_VAR 0 4
53394: PUSH
53395: DOUBLE
53396: LD_INT 1
53398: DEC
53399: ST_TO_ADDR
53400: LD_VAR 0 2
53404: PUSH
53405: FOR_TO
53406: IFFALSE 53518
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
53408: LD_VAR 0 1
53412: PPUSH
53413: LD_VAR 0 2
53417: PUSH
53418: LD_VAR 0 4
53422: ARRAY
53423: PUSH
53424: LD_INT 1
53426: ARRAY
53427: PPUSH
53428: LD_VAR 0 2
53432: PUSH
53433: LD_VAR 0 4
53437: ARRAY
53438: PUSH
53439: LD_INT 2
53441: ARRAY
53442: PPUSH
53443: CALL_OW 297
53447: PUSH
53448: LD_VAR 0 5
53452: LESS
53453: IFFALSE 53516
// begin hex := hexes [ i ] ;
53455: LD_ADDR_VAR 0 7
53459: PUSH
53460: LD_VAR 0 2
53464: PUSH
53465: LD_VAR 0 4
53469: ARRAY
53470: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53471: LD_ADDR_VAR 0 5
53475: PUSH
53476: LD_VAR 0 1
53480: PPUSH
53481: LD_VAR 0 2
53485: PUSH
53486: LD_VAR 0 4
53490: ARRAY
53491: PUSH
53492: LD_INT 1
53494: ARRAY
53495: PPUSH
53496: LD_VAR 0 2
53500: PUSH
53501: LD_VAR 0 4
53505: ARRAY
53506: PUSH
53507: LD_INT 2
53509: ARRAY
53510: PPUSH
53511: CALL_OW 297
53515: ST_TO_ADDR
// end ; end ;
53516: GO 53405
53518: POP
53519: POP
// result := hex ;
53520: LD_ADDR_VAR 0 3
53524: PUSH
53525: LD_VAR 0 7
53529: ST_TO_ADDR
// end ;
53530: LD_VAR 0 3
53534: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
53535: LD_INT 0
53537: PPUSH
53538: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
53539: LD_VAR 0 1
53543: NOT
53544: PUSH
53545: LD_VAR 0 1
53549: PUSH
53550: LD_INT 21
53552: PUSH
53553: LD_INT 2
53555: PUSH
53556: EMPTY
53557: LIST
53558: LIST
53559: PUSH
53560: LD_INT 23
53562: PUSH
53563: LD_INT 2
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: EMPTY
53571: LIST
53572: LIST
53573: PPUSH
53574: CALL_OW 69
53578: IN
53579: NOT
53580: OR
53581: IFFALSE 53585
// exit ;
53583: GO 53632
// for i = 1 to 3 do
53585: LD_ADDR_VAR 0 3
53589: PUSH
53590: DOUBLE
53591: LD_INT 1
53593: DEC
53594: ST_TO_ADDR
53595: LD_INT 3
53597: PUSH
53598: FOR_TO
53599: IFFALSE 53630
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
53601: LD_VAR 0 1
53605: PPUSH
53606: CALL_OW 250
53610: PPUSH
53611: LD_VAR 0 1
53615: PPUSH
53616: CALL_OW 251
53620: PPUSH
53621: LD_INT 1
53623: PPUSH
53624: CALL_OW 453
53628: GO 53598
53630: POP
53631: POP
// end ;
53632: LD_VAR 0 2
53636: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
53637: LD_INT 0
53639: PPUSH
53640: PPUSH
53641: PPUSH
53642: PPUSH
53643: PPUSH
53644: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
53645: LD_VAR 0 1
53649: NOT
53650: PUSH
53651: LD_VAR 0 2
53655: NOT
53656: OR
53657: PUSH
53658: LD_VAR 0 1
53662: PPUSH
53663: CALL_OW 314
53667: OR
53668: IFFALSE 53672
// exit ;
53670: GO 54113
// x := GetX ( enemy_unit ) ;
53672: LD_ADDR_VAR 0 7
53676: PUSH
53677: LD_VAR 0 2
53681: PPUSH
53682: CALL_OW 250
53686: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
53687: LD_ADDR_VAR 0 8
53691: PUSH
53692: LD_VAR 0 2
53696: PPUSH
53697: CALL_OW 251
53701: ST_TO_ADDR
// if not x or not y then
53702: LD_VAR 0 7
53706: NOT
53707: PUSH
53708: LD_VAR 0 8
53712: NOT
53713: OR
53714: IFFALSE 53718
// exit ;
53716: GO 54113
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
53718: LD_ADDR_VAR 0 6
53722: PUSH
53723: LD_VAR 0 7
53727: PPUSH
53728: LD_INT 0
53730: PPUSH
53731: LD_INT 4
53733: PPUSH
53734: CALL_OW 272
53738: PUSH
53739: LD_VAR 0 8
53743: PPUSH
53744: LD_INT 0
53746: PPUSH
53747: LD_INT 4
53749: PPUSH
53750: CALL_OW 273
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: PUSH
53759: LD_VAR 0 7
53763: PPUSH
53764: LD_INT 1
53766: PPUSH
53767: LD_INT 4
53769: PPUSH
53770: CALL_OW 272
53774: PUSH
53775: LD_VAR 0 8
53779: PPUSH
53780: LD_INT 1
53782: PPUSH
53783: LD_INT 4
53785: PPUSH
53786: CALL_OW 273
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: PUSH
53795: LD_VAR 0 7
53799: PPUSH
53800: LD_INT 2
53802: PPUSH
53803: LD_INT 4
53805: PPUSH
53806: CALL_OW 272
53810: PUSH
53811: LD_VAR 0 8
53815: PPUSH
53816: LD_INT 2
53818: PPUSH
53819: LD_INT 4
53821: PPUSH
53822: CALL_OW 273
53826: PUSH
53827: EMPTY
53828: LIST
53829: LIST
53830: PUSH
53831: LD_VAR 0 7
53835: PPUSH
53836: LD_INT 3
53838: PPUSH
53839: LD_INT 4
53841: PPUSH
53842: CALL_OW 272
53846: PUSH
53847: LD_VAR 0 8
53851: PPUSH
53852: LD_INT 3
53854: PPUSH
53855: LD_INT 4
53857: PPUSH
53858: CALL_OW 273
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: PUSH
53867: LD_VAR 0 7
53871: PPUSH
53872: LD_INT 4
53874: PPUSH
53875: LD_INT 4
53877: PPUSH
53878: CALL_OW 272
53882: PUSH
53883: LD_VAR 0 8
53887: PPUSH
53888: LD_INT 4
53890: PPUSH
53891: LD_INT 4
53893: PPUSH
53894: CALL_OW 273
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: PUSH
53903: LD_VAR 0 7
53907: PPUSH
53908: LD_INT 5
53910: PPUSH
53911: LD_INT 4
53913: PPUSH
53914: CALL_OW 272
53918: PUSH
53919: LD_VAR 0 8
53923: PPUSH
53924: LD_INT 5
53926: PPUSH
53927: LD_INT 4
53929: PPUSH
53930: CALL_OW 273
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: LIST
53943: LIST
53944: LIST
53945: LIST
53946: ST_TO_ADDR
// for i = tmp downto 1 do
53947: LD_ADDR_VAR 0 4
53951: PUSH
53952: DOUBLE
53953: LD_VAR 0 6
53957: INC
53958: ST_TO_ADDR
53959: LD_INT 1
53961: PUSH
53962: FOR_DOWNTO
53963: IFFALSE 54064
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
53965: LD_VAR 0 6
53969: PUSH
53970: LD_VAR 0 4
53974: ARRAY
53975: PUSH
53976: LD_INT 1
53978: ARRAY
53979: PPUSH
53980: LD_VAR 0 6
53984: PUSH
53985: LD_VAR 0 4
53989: ARRAY
53990: PUSH
53991: LD_INT 2
53993: ARRAY
53994: PPUSH
53995: CALL_OW 488
53999: NOT
54000: PUSH
54001: LD_VAR 0 6
54005: PUSH
54006: LD_VAR 0 4
54010: ARRAY
54011: PUSH
54012: LD_INT 1
54014: ARRAY
54015: PPUSH
54016: LD_VAR 0 6
54020: PUSH
54021: LD_VAR 0 4
54025: ARRAY
54026: PUSH
54027: LD_INT 2
54029: ARRAY
54030: PPUSH
54031: CALL_OW 428
54035: PUSH
54036: LD_INT 0
54038: NONEQUAL
54039: OR
54040: IFFALSE 54062
// tmp := Delete ( tmp , i ) ;
54042: LD_ADDR_VAR 0 6
54046: PUSH
54047: LD_VAR 0 6
54051: PPUSH
54052: LD_VAR 0 4
54056: PPUSH
54057: CALL_OW 3
54061: ST_TO_ADDR
54062: GO 53962
54064: POP
54065: POP
// j := GetClosestHex ( unit , tmp ) ;
54066: LD_ADDR_VAR 0 5
54070: PUSH
54071: LD_VAR 0 1
54075: PPUSH
54076: LD_VAR 0 6
54080: PPUSH
54081: CALL 53366 0 2
54085: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
54086: LD_VAR 0 1
54090: PPUSH
54091: LD_VAR 0 5
54095: PUSH
54096: LD_INT 1
54098: ARRAY
54099: PPUSH
54100: LD_VAR 0 5
54104: PUSH
54105: LD_INT 2
54107: ARRAY
54108: PPUSH
54109: CALL_OW 111
// end ;
54113: LD_VAR 0 3
54117: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
54118: LD_INT 0
54120: PPUSH
54121: PPUSH
54122: PPUSH
// uc_side = 0 ;
54123: LD_ADDR_OWVAR 20
54127: PUSH
54128: LD_INT 0
54130: ST_TO_ADDR
// uc_nation = 0 ;
54131: LD_ADDR_OWVAR 21
54135: PUSH
54136: LD_INT 0
54138: ST_TO_ADDR
// InitHc ;
54139: CALL_OW 19
// InitVc ;
54143: CALL_OW 20
// if mastodonts then
54147: LD_VAR 0 6
54151: IFFALSE 54218
// for i = 1 to mastodonts do
54153: LD_ADDR_VAR 0 11
54157: PUSH
54158: DOUBLE
54159: LD_INT 1
54161: DEC
54162: ST_TO_ADDR
54163: LD_VAR 0 6
54167: PUSH
54168: FOR_TO
54169: IFFALSE 54216
// begin vc_chassis := 31 ;
54171: LD_ADDR_OWVAR 37
54175: PUSH
54176: LD_INT 31
54178: ST_TO_ADDR
// vc_control := control_rider ;
54179: LD_ADDR_OWVAR 38
54183: PUSH
54184: LD_INT 4
54186: ST_TO_ADDR
// animal := CreateVehicle ;
54187: LD_ADDR_VAR 0 12
54191: PUSH
54192: CALL_OW 45
54196: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54197: LD_VAR 0 12
54201: PPUSH
54202: LD_VAR 0 8
54206: PPUSH
54207: LD_INT 0
54209: PPUSH
54210: CALL 60963 0 3
// end ;
54214: GO 54168
54216: POP
54217: POP
// if horses then
54218: LD_VAR 0 5
54222: IFFALSE 54289
// for i = 1 to horses do
54224: LD_ADDR_VAR 0 11
54228: PUSH
54229: DOUBLE
54230: LD_INT 1
54232: DEC
54233: ST_TO_ADDR
54234: LD_VAR 0 5
54238: PUSH
54239: FOR_TO
54240: IFFALSE 54287
// begin hc_class := 21 ;
54242: LD_ADDR_OWVAR 28
54246: PUSH
54247: LD_INT 21
54249: ST_TO_ADDR
// hc_gallery :=  ;
54250: LD_ADDR_OWVAR 33
54254: PUSH
54255: LD_STRING 
54257: ST_TO_ADDR
// animal := CreateHuman ;
54258: LD_ADDR_VAR 0 12
54262: PUSH
54263: CALL_OW 44
54267: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54268: LD_VAR 0 12
54272: PPUSH
54273: LD_VAR 0 8
54277: PPUSH
54278: LD_INT 0
54280: PPUSH
54281: CALL 60963 0 3
// end ;
54285: GO 54239
54287: POP
54288: POP
// if birds then
54289: LD_VAR 0 1
54293: IFFALSE 54360
// for i = 1 to birds do
54295: LD_ADDR_VAR 0 11
54299: PUSH
54300: DOUBLE
54301: LD_INT 1
54303: DEC
54304: ST_TO_ADDR
54305: LD_VAR 0 1
54309: PUSH
54310: FOR_TO
54311: IFFALSE 54358
// begin hc_class = 18 ;
54313: LD_ADDR_OWVAR 28
54317: PUSH
54318: LD_INT 18
54320: ST_TO_ADDR
// hc_gallery =  ;
54321: LD_ADDR_OWVAR 33
54325: PUSH
54326: LD_STRING 
54328: ST_TO_ADDR
// animal := CreateHuman ;
54329: LD_ADDR_VAR 0 12
54333: PUSH
54334: CALL_OW 44
54338: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54339: LD_VAR 0 12
54343: PPUSH
54344: LD_VAR 0 8
54348: PPUSH
54349: LD_INT 0
54351: PPUSH
54352: CALL 60963 0 3
// end ;
54356: GO 54310
54358: POP
54359: POP
// if tigers then
54360: LD_VAR 0 2
54364: IFFALSE 54448
// for i = 1 to tigers do
54366: LD_ADDR_VAR 0 11
54370: PUSH
54371: DOUBLE
54372: LD_INT 1
54374: DEC
54375: ST_TO_ADDR
54376: LD_VAR 0 2
54380: PUSH
54381: FOR_TO
54382: IFFALSE 54446
// begin hc_class = class_tiger ;
54384: LD_ADDR_OWVAR 28
54388: PUSH
54389: LD_INT 14
54391: ST_TO_ADDR
// hc_gallery =  ;
54392: LD_ADDR_OWVAR 33
54396: PUSH
54397: LD_STRING 
54399: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
54400: LD_ADDR_OWVAR 35
54404: PUSH
54405: LD_INT 7
54407: NEG
54408: PPUSH
54409: LD_INT 7
54411: PPUSH
54412: CALL_OW 12
54416: ST_TO_ADDR
// animal := CreateHuman ;
54417: LD_ADDR_VAR 0 12
54421: PUSH
54422: CALL_OW 44
54426: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54427: LD_VAR 0 12
54431: PPUSH
54432: LD_VAR 0 8
54436: PPUSH
54437: LD_INT 0
54439: PPUSH
54440: CALL 60963 0 3
// end ;
54444: GO 54381
54446: POP
54447: POP
// if apemans then
54448: LD_VAR 0 3
54452: IFFALSE 54575
// for i = 1 to apemans do
54454: LD_ADDR_VAR 0 11
54458: PUSH
54459: DOUBLE
54460: LD_INT 1
54462: DEC
54463: ST_TO_ADDR
54464: LD_VAR 0 3
54468: PUSH
54469: FOR_TO
54470: IFFALSE 54573
// begin hc_class = class_apeman ;
54472: LD_ADDR_OWVAR 28
54476: PUSH
54477: LD_INT 12
54479: ST_TO_ADDR
// hc_gallery =  ;
54480: LD_ADDR_OWVAR 33
54484: PUSH
54485: LD_STRING 
54487: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
54488: LD_ADDR_OWVAR 35
54492: PUSH
54493: LD_INT 5
54495: NEG
54496: PPUSH
54497: LD_INT 5
54499: PPUSH
54500: CALL_OW 12
54504: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
54505: LD_ADDR_OWVAR 31
54509: PUSH
54510: LD_INT 1
54512: PPUSH
54513: LD_INT 3
54515: PPUSH
54516: CALL_OW 12
54520: PUSH
54521: LD_INT 1
54523: PPUSH
54524: LD_INT 3
54526: PPUSH
54527: CALL_OW 12
54531: PUSH
54532: LD_INT 0
54534: PUSH
54535: LD_INT 0
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: LIST
54542: LIST
54543: ST_TO_ADDR
// animal := CreateHuman ;
54544: LD_ADDR_VAR 0 12
54548: PUSH
54549: CALL_OW 44
54553: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54554: LD_VAR 0 12
54558: PPUSH
54559: LD_VAR 0 8
54563: PPUSH
54564: LD_INT 0
54566: PPUSH
54567: CALL 60963 0 3
// end ;
54571: GO 54469
54573: POP
54574: POP
// if enchidnas then
54575: LD_VAR 0 4
54579: IFFALSE 54646
// for i = 1 to enchidnas do
54581: LD_ADDR_VAR 0 11
54585: PUSH
54586: DOUBLE
54587: LD_INT 1
54589: DEC
54590: ST_TO_ADDR
54591: LD_VAR 0 4
54595: PUSH
54596: FOR_TO
54597: IFFALSE 54644
// begin hc_class = 13 ;
54599: LD_ADDR_OWVAR 28
54603: PUSH
54604: LD_INT 13
54606: ST_TO_ADDR
// hc_gallery =  ;
54607: LD_ADDR_OWVAR 33
54611: PUSH
54612: LD_STRING 
54614: ST_TO_ADDR
// animal := CreateHuman ;
54615: LD_ADDR_VAR 0 12
54619: PUSH
54620: CALL_OW 44
54624: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54625: LD_VAR 0 12
54629: PPUSH
54630: LD_VAR 0 8
54634: PPUSH
54635: LD_INT 0
54637: PPUSH
54638: CALL 60963 0 3
// end ;
54642: GO 54596
54644: POP
54645: POP
// if fishes then
54646: LD_VAR 0 7
54650: IFFALSE 54717
// for i = 1 to fishes do
54652: LD_ADDR_VAR 0 11
54656: PUSH
54657: DOUBLE
54658: LD_INT 1
54660: DEC
54661: ST_TO_ADDR
54662: LD_VAR 0 7
54666: PUSH
54667: FOR_TO
54668: IFFALSE 54715
// begin hc_class = 20 ;
54670: LD_ADDR_OWVAR 28
54674: PUSH
54675: LD_INT 20
54677: ST_TO_ADDR
// hc_gallery =  ;
54678: LD_ADDR_OWVAR 33
54682: PUSH
54683: LD_STRING 
54685: ST_TO_ADDR
// animal := CreateHuman ;
54686: LD_ADDR_VAR 0 12
54690: PUSH
54691: CALL_OW 44
54695: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
54696: LD_VAR 0 12
54700: PPUSH
54701: LD_VAR 0 9
54705: PPUSH
54706: LD_INT 0
54708: PPUSH
54709: CALL 60963 0 3
// end ;
54713: GO 54667
54715: POP
54716: POP
// end ;
54717: LD_VAR 0 10
54721: RET
// export function WantHeal ( sci , unit ) ; begin
54722: LD_INT 0
54724: PPUSH
// if GetTaskList ( sci ) > 0 then
54725: LD_VAR 0 1
54729: PPUSH
54730: CALL_OW 437
54734: PUSH
54735: LD_INT 0
54737: GREATER
54738: IFFALSE 54808
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
54740: LD_VAR 0 1
54744: PPUSH
54745: CALL_OW 437
54749: PUSH
54750: LD_INT 1
54752: ARRAY
54753: PUSH
54754: LD_INT 1
54756: ARRAY
54757: PUSH
54758: LD_STRING l
54760: EQUAL
54761: PUSH
54762: LD_VAR 0 1
54766: PPUSH
54767: CALL_OW 437
54771: PUSH
54772: LD_INT 1
54774: ARRAY
54775: PUSH
54776: LD_INT 4
54778: ARRAY
54779: PUSH
54780: LD_VAR 0 2
54784: EQUAL
54785: AND
54786: IFFALSE 54798
// result := true else
54788: LD_ADDR_VAR 0 3
54792: PUSH
54793: LD_INT 1
54795: ST_TO_ADDR
54796: GO 54806
// result := false ;
54798: LD_ADDR_VAR 0 3
54802: PUSH
54803: LD_INT 0
54805: ST_TO_ADDR
// end else
54806: GO 54816
// result := false ;
54808: LD_ADDR_VAR 0 3
54812: PUSH
54813: LD_INT 0
54815: ST_TO_ADDR
// end ;
54816: LD_VAR 0 3
54820: RET
// export function HealTarget ( sci ) ; begin
54821: LD_INT 0
54823: PPUSH
// if not sci then
54824: LD_VAR 0 1
54828: NOT
54829: IFFALSE 54833
// exit ;
54831: GO 54898
// result := 0 ;
54833: LD_ADDR_VAR 0 2
54837: PUSH
54838: LD_INT 0
54840: ST_TO_ADDR
// if GetTaskList ( sci ) then
54841: LD_VAR 0 1
54845: PPUSH
54846: CALL_OW 437
54850: IFFALSE 54898
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
54852: LD_VAR 0 1
54856: PPUSH
54857: CALL_OW 437
54861: PUSH
54862: LD_INT 1
54864: ARRAY
54865: PUSH
54866: LD_INT 1
54868: ARRAY
54869: PUSH
54870: LD_STRING l
54872: EQUAL
54873: IFFALSE 54898
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
54875: LD_ADDR_VAR 0 2
54879: PUSH
54880: LD_VAR 0 1
54884: PPUSH
54885: CALL_OW 437
54889: PUSH
54890: LD_INT 1
54892: ARRAY
54893: PUSH
54894: LD_INT 4
54896: ARRAY
54897: ST_TO_ADDR
// end ;
54898: LD_VAR 0 2
54902: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking , to_heal , healers , to_repair , repairs , empty_vehs , side ; begin
54903: LD_INT 0
54905: PPUSH
54906: PPUSH
54907: PPUSH
54908: PPUSH
54909: PPUSH
54910: PPUSH
54911: PPUSH
54912: PPUSH
54913: PPUSH
54914: PPUSH
54915: PPUSH
54916: PPUSH
54917: PPUSH
54918: PPUSH
54919: PPUSH
54920: PPUSH
54921: PPUSH
54922: PPUSH
54923: PPUSH
54924: PPUSH
54925: PPUSH
54926: PPUSH
54927: PPUSH
54928: PPUSH
54929: PPUSH
54930: PPUSH
54931: PPUSH
54932: PPUSH
54933: PPUSH
54934: PPUSH
54935: PPUSH
54936: PPUSH
54937: PPUSH
54938: PPUSH
// if not list then
54939: LD_VAR 0 1
54943: NOT
54944: IFFALSE 54948
// exit ;
54946: GO 59574
// base := list [ 1 ] ;
54948: LD_ADDR_VAR 0 3
54952: PUSH
54953: LD_VAR 0 1
54957: PUSH
54958: LD_INT 1
54960: ARRAY
54961: ST_TO_ADDR
// group := list [ 2 ] ;
54962: LD_ADDR_VAR 0 4
54966: PUSH
54967: LD_VAR 0 1
54971: PUSH
54972: LD_INT 2
54974: ARRAY
54975: ST_TO_ADDR
// path := list [ 3 ] ;
54976: LD_ADDR_VAR 0 5
54980: PUSH
54981: LD_VAR 0 1
54985: PUSH
54986: LD_INT 3
54988: ARRAY
54989: ST_TO_ADDR
// flags := list [ 4 ] ;
54990: LD_ADDR_VAR 0 6
54994: PUSH
54995: LD_VAR 0 1
54999: PUSH
55000: LD_INT 4
55002: ARRAY
55003: ST_TO_ADDR
// mined := [ ] ;
55004: LD_ADDR_VAR 0 27
55008: PUSH
55009: EMPTY
55010: ST_TO_ADDR
// bombed := [ ] ;
55011: LD_ADDR_VAR 0 28
55015: PUSH
55016: EMPTY
55017: ST_TO_ADDR
// healers := [ ] ;
55018: LD_ADDR_VAR 0 31
55022: PUSH
55023: EMPTY
55024: ST_TO_ADDR
// to_heal := [ ] ;
55025: LD_ADDR_VAR 0 30
55029: PUSH
55030: EMPTY
55031: ST_TO_ADDR
// repairs := [ ] ;
55032: LD_ADDR_VAR 0 33
55036: PUSH
55037: EMPTY
55038: ST_TO_ADDR
// to_repair := [ ] ;
55039: LD_ADDR_VAR 0 32
55043: PUSH
55044: EMPTY
55045: ST_TO_ADDR
// if not group or not path then
55046: LD_VAR 0 4
55050: NOT
55051: PUSH
55052: LD_VAR 0 5
55056: NOT
55057: OR
55058: IFFALSE 55062
// exit ;
55060: GO 59574
// side := GetSide ( group [ 1 ] ) ;
55062: LD_ADDR_VAR 0 35
55066: PUSH
55067: LD_VAR 0 4
55071: PUSH
55072: LD_INT 1
55074: ARRAY
55075: PPUSH
55076: CALL_OW 255
55080: ST_TO_ADDR
// if flags then
55081: LD_VAR 0 6
55085: IFFALSE 55229
// begin f_ignore_area := flags [ 1 ] ;
55087: LD_ADDR_VAR 0 17
55091: PUSH
55092: LD_VAR 0 6
55096: PUSH
55097: LD_INT 1
55099: ARRAY
55100: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
55101: LD_ADDR_VAR 0 18
55105: PUSH
55106: LD_VAR 0 6
55110: PUSH
55111: LD_INT 2
55113: ARRAY
55114: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
55115: LD_ADDR_VAR 0 19
55119: PUSH
55120: LD_VAR 0 6
55124: PUSH
55125: LD_INT 3
55127: ARRAY
55128: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
55129: LD_ADDR_VAR 0 20
55133: PUSH
55134: LD_VAR 0 6
55138: PUSH
55139: LD_INT 4
55141: ARRAY
55142: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
55143: LD_ADDR_VAR 0 21
55147: PUSH
55148: LD_VAR 0 6
55152: PUSH
55153: LD_INT 5
55155: ARRAY
55156: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
55157: LD_ADDR_VAR 0 22
55161: PUSH
55162: LD_VAR 0 6
55166: PUSH
55167: LD_INT 6
55169: ARRAY
55170: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
55171: LD_ADDR_VAR 0 23
55175: PUSH
55176: LD_VAR 0 6
55180: PUSH
55181: LD_INT 7
55183: ARRAY
55184: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
55185: LD_ADDR_VAR 0 24
55189: PUSH
55190: LD_VAR 0 6
55194: PUSH
55195: LD_INT 8
55197: ARRAY
55198: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
55199: LD_ADDR_VAR 0 25
55203: PUSH
55204: LD_VAR 0 6
55208: PUSH
55209: LD_INT 9
55211: ARRAY
55212: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
55213: LD_ADDR_VAR 0 26
55217: PUSH
55218: LD_VAR 0 6
55222: PUSH
55223: LD_INT 10
55225: ARRAY
55226: ST_TO_ADDR
// end else
55227: GO 55309
// begin f_ignore_area := false ;
55229: LD_ADDR_VAR 0 17
55233: PUSH
55234: LD_INT 0
55236: ST_TO_ADDR
// f_capture := false ;
55237: LD_ADDR_VAR 0 18
55241: PUSH
55242: LD_INT 0
55244: ST_TO_ADDR
// f_ignore_civ := false ;
55245: LD_ADDR_VAR 0 19
55249: PUSH
55250: LD_INT 0
55252: ST_TO_ADDR
// f_murder := false ;
55253: LD_ADDR_VAR 0 20
55257: PUSH
55258: LD_INT 0
55260: ST_TO_ADDR
// f_mines := false ;
55261: LD_ADDR_VAR 0 21
55265: PUSH
55266: LD_INT 0
55268: ST_TO_ADDR
// f_repair := false ;
55269: LD_ADDR_VAR 0 22
55273: PUSH
55274: LD_INT 0
55276: ST_TO_ADDR
// f_heal := false ;
55277: LD_ADDR_VAR 0 23
55281: PUSH
55282: LD_INT 0
55284: ST_TO_ADDR
// f_spacetime := false ;
55285: LD_ADDR_VAR 0 24
55289: PUSH
55290: LD_INT 0
55292: ST_TO_ADDR
// f_attack_depot := false ;
55293: LD_ADDR_VAR 0 25
55297: PUSH
55298: LD_INT 0
55300: ST_TO_ADDR
// f_crawl := false ;
55301: LD_ADDR_VAR 0 26
55305: PUSH
55306: LD_INT 0
55308: ST_TO_ADDR
// end ; if f_heal then
55309: LD_VAR 0 23
55313: IFFALSE 55340
// healers := UnitFilter ( group , [ f_class , 4 ] ) ;
55315: LD_ADDR_VAR 0 31
55319: PUSH
55320: LD_VAR 0 4
55324: PPUSH
55325: LD_INT 25
55327: PUSH
55328: LD_INT 4
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PPUSH
55335: CALL_OW 72
55339: ST_TO_ADDR
// if f_repair then
55340: LD_VAR 0 22
55344: IFFALSE 55371
// repairs := UnitFilter ( group , [ f_class , 3 ] ) ;
55346: LD_ADDR_VAR 0 33
55350: PUSH
55351: LD_VAR 0 4
55355: PPUSH
55356: LD_INT 25
55358: PUSH
55359: LD_INT 3
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: PPUSH
55366: CALL_OW 72
55370: ST_TO_ADDR
// units_path := [ ] ;
55371: LD_ADDR_VAR 0 16
55375: PUSH
55376: EMPTY
55377: ST_TO_ADDR
// for i = 1 to group do
55378: LD_ADDR_VAR 0 7
55382: PUSH
55383: DOUBLE
55384: LD_INT 1
55386: DEC
55387: ST_TO_ADDR
55388: LD_VAR 0 4
55392: PUSH
55393: FOR_TO
55394: IFFALSE 55423
// units_path := Replace ( units_path , i , path ) ;
55396: LD_ADDR_VAR 0 16
55400: PUSH
55401: LD_VAR 0 16
55405: PPUSH
55406: LD_VAR 0 7
55410: PPUSH
55411: LD_VAR 0 5
55415: PPUSH
55416: CALL_OW 1
55420: ST_TO_ADDR
55421: GO 55393
55423: POP
55424: POP
// repeat for i = group downto 1 do
55425: LD_ADDR_VAR 0 7
55429: PUSH
55430: DOUBLE
55431: LD_VAR 0 4
55435: INC
55436: ST_TO_ADDR
55437: LD_INT 1
55439: PUSH
55440: FOR_DOWNTO
55441: IFFALSE 59537
// begin wait ( 5 ) ;
55443: LD_INT 5
55445: PPUSH
55446: CALL_OW 67
// tmp := [ ] ;
55450: LD_ADDR_VAR 0 14
55454: PUSH
55455: EMPTY
55456: ST_TO_ADDR
// attacking := false ;
55457: LD_ADDR_VAR 0 29
55461: PUSH
55462: LD_INT 0
55464: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
55465: LD_VAR 0 4
55469: PUSH
55470: LD_VAR 0 7
55474: ARRAY
55475: PPUSH
55476: CALL_OW 301
55480: PUSH
55481: LD_VAR 0 4
55485: PUSH
55486: LD_VAR 0 7
55490: ARRAY
55491: NOT
55492: OR
55493: IFFALSE 55602
// begin if GetType ( group [ i ] ) = unit_human then
55495: LD_VAR 0 4
55499: PUSH
55500: LD_VAR 0 7
55504: ARRAY
55505: PPUSH
55506: CALL_OW 247
55510: PUSH
55511: LD_INT 1
55513: EQUAL
55514: IFFALSE 55560
// begin to_heal := to_heal diff group [ i ] ;
55516: LD_ADDR_VAR 0 30
55520: PUSH
55521: LD_VAR 0 30
55525: PUSH
55526: LD_VAR 0 4
55530: PUSH
55531: LD_VAR 0 7
55535: ARRAY
55536: DIFF
55537: ST_TO_ADDR
// healers := healers diff group [ i ] ;
55538: LD_ADDR_VAR 0 31
55542: PUSH
55543: LD_VAR 0 31
55547: PUSH
55548: LD_VAR 0 4
55552: PUSH
55553: LD_VAR 0 7
55557: ARRAY
55558: DIFF
55559: ST_TO_ADDR
// end ; group := Delete ( group , i ) ;
55560: LD_ADDR_VAR 0 4
55564: PUSH
55565: LD_VAR 0 4
55569: PPUSH
55570: LD_VAR 0 7
55574: PPUSH
55575: CALL_OW 3
55579: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
55580: LD_ADDR_VAR 0 16
55584: PUSH
55585: LD_VAR 0 16
55589: PPUSH
55590: LD_VAR 0 7
55594: PPUSH
55595: CALL_OW 3
55599: ST_TO_ADDR
// continue ;
55600: GO 55440
// end ; if f_repair then
55602: LD_VAR 0 22
55606: IFFALSE 56095
// begin if GetType ( group [ i ] ) = unit_vehicle then
55608: LD_VAR 0 4
55612: PUSH
55613: LD_VAR 0 7
55617: ARRAY
55618: PPUSH
55619: CALL_OW 247
55623: PUSH
55624: LD_INT 2
55626: EQUAL
55627: IFFALSE 55817
// begin if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_repair then
55629: LD_VAR 0 4
55633: PUSH
55634: LD_VAR 0 7
55638: ARRAY
55639: PPUSH
55640: CALL_OW 256
55644: PUSH
55645: LD_INT 700
55647: LESS
55648: PUSH
55649: LD_VAR 0 4
55653: PUSH
55654: LD_VAR 0 7
55658: ARRAY
55659: PUSH
55660: LD_VAR 0 32
55664: IN
55665: NOT
55666: AND
55667: IFFALSE 55691
// to_repair := to_repair union group [ i ] ;
55669: LD_ADDR_VAR 0 32
55673: PUSH
55674: LD_VAR 0 32
55678: PUSH
55679: LD_VAR 0 4
55683: PUSH
55684: LD_VAR 0 7
55688: ARRAY
55689: UNION
55690: ST_TO_ADDR
// if GetLives ( group [ i ] ) = 1000 and group [ i ] in to_repair then
55691: LD_VAR 0 4
55695: PUSH
55696: LD_VAR 0 7
55700: ARRAY
55701: PPUSH
55702: CALL_OW 256
55706: PUSH
55707: LD_INT 1000
55709: EQUAL
55710: PUSH
55711: LD_VAR 0 4
55715: PUSH
55716: LD_VAR 0 7
55720: ARRAY
55721: PUSH
55722: LD_VAR 0 32
55726: IN
55727: AND
55728: IFFALSE 55752
// to_repair := to_repair diff group [ i ] ;
55730: LD_ADDR_VAR 0 32
55734: PUSH
55735: LD_VAR 0 32
55739: PUSH
55740: LD_VAR 0 4
55744: PUSH
55745: LD_VAR 0 7
55749: ARRAY
55750: DIFF
55751: ST_TO_ADDR
// if group [ i ] in to_repair then
55752: LD_VAR 0 4
55756: PUSH
55757: LD_VAR 0 7
55761: ARRAY
55762: PUSH
55763: LD_VAR 0 32
55767: IN
55768: IFFALSE 55815
// begin if not IsInArea ( group [ i ] , f_repair ) then
55770: LD_VAR 0 4
55774: PUSH
55775: LD_VAR 0 7
55779: ARRAY
55780: PPUSH
55781: LD_VAR 0 22
55785: PPUSH
55786: CALL_OW 308
55790: NOT
55791: IFFALSE 55813
// ComMoveToArea ( group [ i ] , f_repair ) ;
55793: LD_VAR 0 4
55797: PUSH
55798: LD_VAR 0 7
55802: ARRAY
55803: PPUSH
55804: LD_VAR 0 22
55808: PPUSH
55809: CALL_OW 113
// continue ;
55813: GO 55440
// end ; end else
55815: GO 56095
// if group [ i ] in repairs then
55817: LD_VAR 0 4
55821: PUSH
55822: LD_VAR 0 7
55826: ARRAY
55827: PUSH
55828: LD_VAR 0 33
55832: IN
55833: IFFALSE 56095
// begin if IsInUnit ( group [ i ] ) then
55835: LD_VAR 0 4
55839: PUSH
55840: LD_VAR 0 7
55844: ARRAY
55845: PPUSH
55846: CALL_OW 310
55850: IFFALSE 55918
// begin z := IsInUnit ( group [ i ] ) ;
55852: LD_ADDR_VAR 0 13
55856: PUSH
55857: LD_VAR 0 4
55861: PUSH
55862: LD_VAR 0 7
55866: ARRAY
55867: PPUSH
55868: CALL_OW 310
55872: ST_TO_ADDR
// if z in to_repair and IsInArea ( z , f_repair ) then
55873: LD_VAR 0 13
55877: PUSH
55878: LD_VAR 0 32
55882: IN
55883: PUSH
55884: LD_VAR 0 13
55888: PPUSH
55889: LD_VAR 0 22
55893: PPUSH
55894: CALL_OW 308
55898: AND
55899: IFFALSE 55916
// ComExitVehicle ( group [ i ] ) ;
55901: LD_VAR 0 4
55905: PUSH
55906: LD_VAR 0 7
55910: ARRAY
55911: PPUSH
55912: CALL_OW 121
// end else
55916: GO 56095
// begin z := UnitFilter ( group , [ [ f_inarea , f_repair ] , [ f_empty ] ] ) ;
55918: LD_ADDR_VAR 0 13
55922: PUSH
55923: LD_VAR 0 4
55927: PPUSH
55928: LD_INT 95
55930: PUSH
55931: LD_VAR 0 22
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: PUSH
55940: LD_INT 58
55942: PUSH
55943: EMPTY
55944: LIST
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: PPUSH
55950: CALL_OW 72
55954: ST_TO_ADDR
// if not HasTask ( group [ i ] ) then
55955: LD_VAR 0 4
55959: PUSH
55960: LD_VAR 0 7
55964: ARRAY
55965: PPUSH
55966: CALL_OW 314
55970: NOT
55971: IFFALSE 56093
// begin x := NearestUnitToUnit ( z , group [ i ] ) ;
55973: LD_ADDR_VAR 0 10
55977: PUSH
55978: LD_VAR 0 13
55982: PPUSH
55983: LD_VAR 0 4
55987: PUSH
55988: LD_VAR 0 7
55992: ARRAY
55993: PPUSH
55994: CALL_OW 74
55998: ST_TO_ADDR
// if not x then
55999: LD_VAR 0 10
56003: NOT
56004: IFFALSE 56008
// continue ;
56006: GO 55440
// if GetLives ( x ) < 1000 then
56008: LD_VAR 0 10
56012: PPUSH
56013: CALL_OW 256
56017: PUSH
56018: LD_INT 1000
56020: LESS
56021: IFFALSE 56045
// ComRepairVehicle ( group [ i ] , x ) else
56023: LD_VAR 0 4
56027: PUSH
56028: LD_VAR 0 7
56032: ARRAY
56033: PPUSH
56034: LD_VAR 0 10
56038: PPUSH
56039: CALL_OW 129
56043: GO 56093
// if not ( f_heal and GetLives ( group [ i ] ) < 1000 ) then
56045: LD_VAR 0 23
56049: PUSH
56050: LD_VAR 0 4
56054: PUSH
56055: LD_VAR 0 7
56059: ARRAY
56060: PPUSH
56061: CALL_OW 256
56065: PUSH
56066: LD_INT 1000
56068: LESS
56069: AND
56070: NOT
56071: IFFALSE 56093
// ComEnterUnit ( group [ i ] , x ) ;
56073: LD_VAR 0 4
56077: PUSH
56078: LD_VAR 0 7
56082: ARRAY
56083: PPUSH
56084: LD_VAR 0 10
56088: PPUSH
56089: CALL_OW 120
// end ; continue ;
56093: GO 55440
// end ; end ; end ; if f_heal and GetType ( group [ i ] ) = unit_human then
56095: LD_VAR 0 23
56099: PUSH
56100: LD_VAR 0 4
56104: PUSH
56105: LD_VAR 0 7
56109: ARRAY
56110: PPUSH
56111: CALL_OW 247
56115: PUSH
56116: LD_INT 1
56118: EQUAL
56119: AND
56120: IFFALSE 56598
// begin if group [ i ] in healers then
56122: LD_VAR 0 4
56126: PUSH
56127: LD_VAR 0 7
56131: ARRAY
56132: PUSH
56133: LD_VAR 0 31
56137: IN
56138: IFFALSE 56411
// begin if not IsInArea ( group [ i ] , f_heal ) and not HasTask ( group [ i ] ) then
56140: LD_VAR 0 4
56144: PUSH
56145: LD_VAR 0 7
56149: ARRAY
56150: PPUSH
56151: LD_VAR 0 23
56155: PPUSH
56156: CALL_OW 308
56160: NOT
56161: PUSH
56162: LD_VAR 0 4
56166: PUSH
56167: LD_VAR 0 7
56171: ARRAY
56172: PPUSH
56173: CALL_OW 314
56177: NOT
56178: AND
56179: IFFALSE 56203
// ComMoveToArea ( group [ i ] , f_heal ) else
56181: LD_VAR 0 4
56185: PUSH
56186: LD_VAR 0 7
56190: ARRAY
56191: PPUSH
56192: LD_VAR 0 23
56196: PPUSH
56197: CALL_OW 113
56201: GO 56409
// if GetLives ( HealTarget ( group [ i ] ) ) = 1000 then
56203: LD_VAR 0 4
56207: PUSH
56208: LD_VAR 0 7
56212: ARRAY
56213: PPUSH
56214: CALL 54821 0 1
56218: PPUSH
56219: CALL_OW 256
56223: PUSH
56224: LD_INT 1000
56226: EQUAL
56227: IFFALSE 56246
// ComStop ( group [ i ] ) else
56229: LD_VAR 0 4
56233: PUSH
56234: LD_VAR 0 7
56238: ARRAY
56239: PPUSH
56240: CALL_OW 141
56244: GO 56409
// if not HasTask ( group [ i ] ) and to_heal then
56246: LD_VAR 0 4
56250: PUSH
56251: LD_VAR 0 7
56255: ARRAY
56256: PPUSH
56257: CALL_OW 314
56261: NOT
56262: PUSH
56263: LD_VAR 0 30
56267: AND
56268: IFFALSE 56409
// begin z := NearestUnitToUnit ( UnitFilter ( to_heal , [ f_not , [ f_inside ] ] ) , group [ i ] ) ;
56270: LD_ADDR_VAR 0 13
56274: PUSH
56275: LD_VAR 0 30
56279: PPUSH
56280: LD_INT 3
56282: PUSH
56283: LD_INT 54
56285: PUSH
56286: EMPTY
56287: LIST
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: PPUSH
56293: CALL_OW 72
56297: PPUSH
56298: LD_VAR 0 4
56302: PUSH
56303: LD_VAR 0 7
56307: ARRAY
56308: PPUSH
56309: CALL_OW 74
56313: ST_TO_ADDR
// if z then
56314: LD_VAR 0 13
56318: IFFALSE 56409
// if FilterAllUnits ( [ [ f_dist , z , 10 ] , [ f_enemy , GetSide ( z ) ] ] ) = 0 then
56320: LD_INT 91
56322: PUSH
56323: LD_VAR 0 13
56327: PUSH
56328: LD_INT 10
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: LIST
56335: PUSH
56336: LD_INT 81
56338: PUSH
56339: LD_VAR 0 13
56343: PPUSH
56344: CALL_OW 255
56348: PUSH
56349: EMPTY
56350: LIST
56351: LIST
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: PPUSH
56357: CALL_OW 69
56361: PUSH
56362: LD_INT 0
56364: EQUAL
56365: IFFALSE 56389
// ComHeal ( group [ i ] , z ) else
56367: LD_VAR 0 4
56371: PUSH
56372: LD_VAR 0 7
56376: ARRAY
56377: PPUSH
56378: LD_VAR 0 13
56382: PPUSH
56383: CALL_OW 128
56387: GO 56409
// ComMoveToArea ( group [ i ] , f_heal ) ;
56389: LD_VAR 0 4
56393: PUSH
56394: LD_VAR 0 7
56398: ARRAY
56399: PPUSH
56400: LD_VAR 0 23
56404: PPUSH
56405: CALL_OW 113
// end ; continue ;
56409: GO 55440
// end ; if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_heal then
56411: LD_VAR 0 4
56415: PUSH
56416: LD_VAR 0 7
56420: ARRAY
56421: PPUSH
56422: CALL_OW 256
56426: PUSH
56427: LD_INT 700
56429: LESS
56430: PUSH
56431: LD_VAR 0 4
56435: PUSH
56436: LD_VAR 0 7
56440: ARRAY
56441: PUSH
56442: LD_VAR 0 30
56446: IN
56447: NOT
56448: AND
56449: IFFALSE 56473
// to_heal := to_heal union group [ i ] ;
56451: LD_ADDR_VAR 0 30
56455: PUSH
56456: LD_VAR 0 30
56460: PUSH
56461: LD_VAR 0 4
56465: PUSH
56466: LD_VAR 0 7
56470: ARRAY
56471: UNION
56472: ST_TO_ADDR
// if group [ i ] in to_heal then
56473: LD_VAR 0 4
56477: PUSH
56478: LD_VAR 0 7
56482: ARRAY
56483: PUSH
56484: LD_VAR 0 30
56488: IN
56489: IFFALSE 56598
// begin if GetLives ( group [ i ] ) = 1000 then
56491: LD_VAR 0 4
56495: PUSH
56496: LD_VAR 0 7
56500: ARRAY
56501: PPUSH
56502: CALL_OW 256
56506: PUSH
56507: LD_INT 1000
56509: EQUAL
56510: IFFALSE 56536
// to_heal := to_heal diff group [ i ] else
56512: LD_ADDR_VAR 0 30
56516: PUSH
56517: LD_VAR 0 30
56521: PUSH
56522: LD_VAR 0 4
56526: PUSH
56527: LD_VAR 0 7
56531: ARRAY
56532: DIFF
56533: ST_TO_ADDR
56534: GO 56598
// begin if not IsInArea ( group [ i ] , to_heal ) then
56536: LD_VAR 0 4
56540: PUSH
56541: LD_VAR 0 7
56545: ARRAY
56546: PPUSH
56547: LD_VAR 0 30
56551: PPUSH
56552: CALL_OW 308
56556: NOT
56557: IFFALSE 56581
// ComMoveToArea ( group [ i ] , f_heal ) else
56559: LD_VAR 0 4
56563: PUSH
56564: LD_VAR 0 7
56568: ARRAY
56569: PPUSH
56570: LD_VAR 0 23
56574: PPUSH
56575: CALL_OW 113
56579: GO 56596
// ComHold ( group [ i ] ) ;
56581: LD_VAR 0 4
56585: PUSH
56586: LD_VAR 0 7
56590: ARRAY
56591: PPUSH
56592: CALL_OW 140
// continue ;
56596: GO 55440
// end ; end ; end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
56598: LD_VAR 0 4
56602: PUSH
56603: LD_VAR 0 7
56607: ARRAY
56608: PPUSH
56609: LD_INT 10
56611: PPUSH
56612: CALL 53218 0 2
56616: NOT
56617: PUSH
56618: LD_VAR 0 16
56622: PUSH
56623: LD_VAR 0 7
56627: ARRAY
56628: PUSH
56629: EMPTY
56630: EQUAL
56631: NOT
56632: AND
56633: IFFALSE 56899
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
56635: LD_VAR 0 4
56639: PUSH
56640: LD_VAR 0 7
56644: ARRAY
56645: PPUSH
56646: CALL_OW 262
56650: PUSH
56651: LD_INT 1
56653: PUSH
56654: LD_INT 2
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: IN
56661: IFFALSE 56702
// if GetFuel ( group [ i ] ) < 10 then
56663: LD_VAR 0 4
56667: PUSH
56668: LD_VAR 0 7
56672: ARRAY
56673: PPUSH
56674: CALL_OW 261
56678: PUSH
56679: LD_INT 10
56681: LESS
56682: IFFALSE 56702
// SetFuel ( group [ i ] , 12 ) ;
56684: LD_VAR 0 4
56688: PUSH
56689: LD_VAR 0 7
56693: ARRAY
56694: PPUSH
56695: LD_INT 12
56697: PPUSH
56698: CALL_OW 240
// if units_path [ i ] then
56702: LD_VAR 0 16
56706: PUSH
56707: LD_VAR 0 7
56711: ARRAY
56712: IFFALSE 56897
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
56714: LD_VAR 0 4
56718: PUSH
56719: LD_VAR 0 7
56723: ARRAY
56724: PPUSH
56725: LD_VAR 0 16
56729: PUSH
56730: LD_VAR 0 7
56734: ARRAY
56735: PUSH
56736: LD_INT 1
56738: ARRAY
56739: PUSH
56740: LD_INT 1
56742: ARRAY
56743: PPUSH
56744: LD_VAR 0 16
56748: PUSH
56749: LD_VAR 0 7
56753: ARRAY
56754: PUSH
56755: LD_INT 1
56757: ARRAY
56758: PUSH
56759: LD_INT 2
56761: ARRAY
56762: PPUSH
56763: CALL_OW 297
56767: PUSH
56768: LD_INT 6
56770: GREATER
56771: IFFALSE 56846
// begin if not HasTask ( group [ i ] ) then
56773: LD_VAR 0 4
56777: PUSH
56778: LD_VAR 0 7
56782: ARRAY
56783: PPUSH
56784: CALL_OW 314
56788: NOT
56789: IFFALSE 56844
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
56791: LD_VAR 0 4
56795: PUSH
56796: LD_VAR 0 7
56800: ARRAY
56801: PPUSH
56802: LD_VAR 0 16
56806: PUSH
56807: LD_VAR 0 7
56811: ARRAY
56812: PUSH
56813: LD_INT 1
56815: ARRAY
56816: PUSH
56817: LD_INT 1
56819: ARRAY
56820: PPUSH
56821: LD_VAR 0 16
56825: PUSH
56826: LD_VAR 0 7
56830: ARRAY
56831: PUSH
56832: LD_INT 1
56834: ARRAY
56835: PUSH
56836: LD_INT 2
56838: ARRAY
56839: PPUSH
56840: CALL_OW 114
// end else
56844: GO 56897
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
56846: LD_ADDR_VAR 0 15
56850: PUSH
56851: LD_VAR 0 16
56855: PUSH
56856: LD_VAR 0 7
56860: ARRAY
56861: PPUSH
56862: LD_INT 1
56864: PPUSH
56865: CALL_OW 3
56869: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
56870: LD_ADDR_VAR 0 16
56874: PUSH
56875: LD_VAR 0 16
56879: PPUSH
56880: LD_VAR 0 7
56884: PPUSH
56885: LD_VAR 0 15
56889: PPUSH
56890: CALL_OW 1
56894: ST_TO_ADDR
// continue ;
56895: GO 55440
// end ; end ; end else
56897: GO 59535
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
56899: LD_ADDR_VAR 0 14
56903: PUSH
56904: LD_INT 81
56906: PUSH
56907: LD_VAR 0 4
56911: PUSH
56912: LD_VAR 0 7
56916: ARRAY
56917: PPUSH
56918: CALL_OW 255
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: PPUSH
56927: CALL_OW 69
56931: ST_TO_ADDR
// if not tmp then
56932: LD_VAR 0 14
56936: NOT
56937: IFFALSE 56941
// continue ;
56939: GO 55440
// if f_ignore_area then
56941: LD_VAR 0 17
56945: IFFALSE 57033
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
56947: LD_ADDR_VAR 0 15
56951: PUSH
56952: LD_VAR 0 14
56956: PPUSH
56957: LD_INT 3
56959: PUSH
56960: LD_INT 92
56962: PUSH
56963: LD_VAR 0 17
56967: PUSH
56968: LD_INT 1
56970: ARRAY
56971: PUSH
56972: LD_VAR 0 17
56976: PUSH
56977: LD_INT 2
56979: ARRAY
56980: PUSH
56981: LD_VAR 0 17
56985: PUSH
56986: LD_INT 3
56988: ARRAY
56989: PUSH
56990: EMPTY
56991: LIST
56992: LIST
56993: LIST
56994: LIST
56995: PUSH
56996: EMPTY
56997: LIST
56998: LIST
56999: PPUSH
57000: CALL_OW 72
57004: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
57005: LD_VAR 0 14
57009: PUSH
57010: LD_VAR 0 15
57014: DIFF
57015: IFFALSE 57033
// tmp := tmp diff tmp2 ;
57017: LD_ADDR_VAR 0 14
57021: PUSH
57022: LD_VAR 0 14
57026: PUSH
57027: LD_VAR 0 15
57031: DIFF
57032: ST_TO_ADDR
// end ; if not f_murder then
57033: LD_VAR 0 20
57037: NOT
57038: IFFALSE 57096
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
57040: LD_ADDR_VAR 0 15
57044: PUSH
57045: LD_VAR 0 14
57049: PPUSH
57050: LD_INT 3
57052: PUSH
57053: LD_INT 50
57055: PUSH
57056: EMPTY
57057: LIST
57058: PUSH
57059: EMPTY
57060: LIST
57061: LIST
57062: PPUSH
57063: CALL_OW 72
57067: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
57068: LD_VAR 0 14
57072: PUSH
57073: LD_VAR 0 15
57077: DIFF
57078: IFFALSE 57096
// tmp := tmp diff tmp2 ;
57080: LD_ADDR_VAR 0 14
57084: PUSH
57085: LD_VAR 0 14
57089: PUSH
57090: LD_VAR 0 15
57094: DIFF
57095: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
57096: LD_ADDR_VAR 0 14
57100: PUSH
57101: LD_VAR 0 4
57105: PUSH
57106: LD_VAR 0 7
57110: ARRAY
57111: PPUSH
57112: LD_VAR 0 14
57116: PPUSH
57117: LD_INT 1
57119: PPUSH
57120: LD_INT 1
57122: PPUSH
57123: CALL 26861 0 4
57127: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
57128: LD_VAR 0 4
57132: PUSH
57133: LD_VAR 0 7
57137: ARRAY
57138: PPUSH
57139: CALL_OW 257
57143: PUSH
57144: LD_INT 1
57146: EQUAL
57147: IFFALSE 57595
// begin if WantPlant ( group [ i ] ) then
57149: LD_VAR 0 4
57153: PUSH
57154: LD_VAR 0 7
57158: ARRAY
57159: PPUSH
57160: CALL 26362 0 1
57164: IFFALSE 57168
// continue ;
57166: GO 55440
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
57168: LD_VAR 0 18
57172: PUSH
57173: LD_VAR 0 4
57177: PUSH
57178: LD_VAR 0 7
57182: ARRAY
57183: PPUSH
57184: CALL_OW 310
57188: NOT
57189: AND
57190: PUSH
57191: LD_VAR 0 14
57195: PUSH
57196: LD_INT 1
57198: ARRAY
57199: PUSH
57200: LD_VAR 0 14
57204: PPUSH
57205: LD_INT 21
57207: PUSH
57208: LD_INT 2
57210: PUSH
57211: EMPTY
57212: LIST
57213: LIST
57214: PUSH
57215: LD_INT 58
57217: PUSH
57218: EMPTY
57219: LIST
57220: PUSH
57221: EMPTY
57222: LIST
57223: LIST
57224: PPUSH
57225: CALL_OW 72
57229: IN
57230: AND
57231: IFFALSE 57267
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
57233: LD_VAR 0 4
57237: PUSH
57238: LD_VAR 0 7
57242: ARRAY
57243: PPUSH
57244: LD_VAR 0 14
57248: PUSH
57249: LD_INT 1
57251: ARRAY
57252: PPUSH
57253: CALL_OW 120
// attacking := true ;
57257: LD_ADDR_VAR 0 29
57261: PUSH
57262: LD_INT 1
57264: ST_TO_ADDR
// continue ;
57265: GO 55440
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
57267: LD_VAR 0 26
57271: PUSH
57272: LD_VAR 0 4
57276: PUSH
57277: LD_VAR 0 7
57281: ARRAY
57282: PPUSH
57283: CALL_OW 257
57287: PUSH
57288: LD_INT 1
57290: EQUAL
57291: AND
57292: PUSH
57293: LD_VAR 0 4
57297: PUSH
57298: LD_VAR 0 7
57302: ARRAY
57303: PPUSH
57304: CALL_OW 256
57308: PUSH
57309: LD_INT 800
57311: LESS
57312: AND
57313: PUSH
57314: LD_VAR 0 4
57318: PUSH
57319: LD_VAR 0 7
57323: ARRAY
57324: PPUSH
57325: CALL_OW 318
57329: NOT
57330: AND
57331: IFFALSE 57348
// ComCrawl ( group [ i ] ) ;
57333: LD_VAR 0 4
57337: PUSH
57338: LD_VAR 0 7
57342: ARRAY
57343: PPUSH
57344: CALL_OW 137
// if f_mines then
57348: LD_VAR 0 21
57352: IFFALSE 57595
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
57354: LD_VAR 0 14
57358: PUSH
57359: LD_INT 1
57361: ARRAY
57362: PPUSH
57363: CALL_OW 247
57367: PUSH
57368: LD_INT 3
57370: EQUAL
57371: PUSH
57372: LD_VAR 0 14
57376: PUSH
57377: LD_INT 1
57379: ARRAY
57380: PUSH
57381: LD_VAR 0 27
57385: IN
57386: NOT
57387: AND
57388: IFFALSE 57595
// begin x := GetX ( tmp [ 1 ] ) ;
57390: LD_ADDR_VAR 0 10
57394: PUSH
57395: LD_VAR 0 14
57399: PUSH
57400: LD_INT 1
57402: ARRAY
57403: PPUSH
57404: CALL_OW 250
57408: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
57409: LD_ADDR_VAR 0 11
57413: PUSH
57414: LD_VAR 0 14
57418: PUSH
57419: LD_INT 1
57421: ARRAY
57422: PPUSH
57423: CALL_OW 251
57427: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
57428: LD_ADDR_VAR 0 12
57432: PUSH
57433: LD_VAR 0 4
57437: PUSH
57438: LD_VAR 0 7
57442: ARRAY
57443: PPUSH
57444: CALL 53303 0 1
57448: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
57449: LD_VAR 0 4
57453: PUSH
57454: LD_VAR 0 7
57458: ARRAY
57459: PPUSH
57460: LD_VAR 0 10
57464: PPUSH
57465: LD_VAR 0 11
57469: PPUSH
57470: LD_VAR 0 14
57474: PUSH
57475: LD_INT 1
57477: ARRAY
57478: PPUSH
57479: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
57483: LD_VAR 0 4
57487: PUSH
57488: LD_VAR 0 7
57492: ARRAY
57493: PPUSH
57494: LD_VAR 0 10
57498: PPUSH
57499: LD_VAR 0 12
57503: PPUSH
57504: LD_INT 7
57506: PPUSH
57507: CALL_OW 272
57511: PPUSH
57512: LD_VAR 0 11
57516: PPUSH
57517: LD_VAR 0 12
57521: PPUSH
57522: LD_INT 7
57524: PPUSH
57525: CALL_OW 273
57529: PPUSH
57530: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
57534: LD_VAR 0 4
57538: PUSH
57539: LD_VAR 0 7
57543: ARRAY
57544: PPUSH
57545: LD_INT 71
57547: PPUSH
57548: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
57552: LD_ADDR_VAR 0 27
57556: PUSH
57557: LD_VAR 0 27
57561: PPUSH
57562: LD_VAR 0 27
57566: PUSH
57567: LD_INT 1
57569: PLUS
57570: PPUSH
57571: LD_VAR 0 14
57575: PUSH
57576: LD_INT 1
57578: ARRAY
57579: PPUSH
57580: CALL_OW 1
57584: ST_TO_ADDR
// attacking := true ;
57585: LD_ADDR_VAR 0 29
57589: PUSH
57590: LD_INT 1
57592: ST_TO_ADDR
// continue ;
57593: GO 55440
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
57595: LD_VAR 0 4
57599: PUSH
57600: LD_VAR 0 7
57604: ARRAY
57605: PPUSH
57606: CALL_OW 257
57610: PUSH
57611: LD_INT 17
57613: EQUAL
57614: PUSH
57615: LD_VAR 0 4
57619: PUSH
57620: LD_VAR 0 7
57624: ARRAY
57625: PPUSH
57626: CALL_OW 110
57630: PUSH
57631: LD_INT 71
57633: EQUAL
57634: NOT
57635: AND
57636: IFFALSE 57782
// begin attacking := false ;
57638: LD_ADDR_VAR 0 29
57642: PUSH
57643: LD_INT 0
57645: ST_TO_ADDR
// k := 5 ;
57646: LD_ADDR_VAR 0 9
57650: PUSH
57651: LD_INT 5
57653: ST_TO_ADDR
// if tmp < k then
57654: LD_VAR 0 14
57658: PUSH
57659: LD_VAR 0 9
57663: LESS
57664: IFFALSE 57676
// k := tmp ;
57666: LD_ADDR_VAR 0 9
57670: PUSH
57671: LD_VAR 0 14
57675: ST_TO_ADDR
// for j = 1 to k do
57676: LD_ADDR_VAR 0 8
57680: PUSH
57681: DOUBLE
57682: LD_INT 1
57684: DEC
57685: ST_TO_ADDR
57686: LD_VAR 0 9
57690: PUSH
57691: FOR_TO
57692: IFFALSE 57780
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
57694: LD_VAR 0 14
57698: PUSH
57699: LD_VAR 0 8
57703: ARRAY
57704: PUSH
57705: LD_VAR 0 14
57709: PPUSH
57710: LD_INT 58
57712: PUSH
57713: EMPTY
57714: LIST
57715: PPUSH
57716: CALL_OW 72
57720: IN
57721: NOT
57722: IFFALSE 57778
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
57724: LD_VAR 0 4
57728: PUSH
57729: LD_VAR 0 7
57733: ARRAY
57734: PPUSH
57735: LD_VAR 0 14
57739: PUSH
57740: LD_VAR 0 8
57744: ARRAY
57745: PPUSH
57746: CALL_OW 115
// attacking := true ;
57750: LD_ADDR_VAR 0 29
57754: PUSH
57755: LD_INT 1
57757: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
57758: LD_VAR 0 4
57762: PUSH
57763: LD_VAR 0 7
57767: ARRAY
57768: PPUSH
57769: LD_INT 71
57771: PPUSH
57772: CALL_OW 109
// continue ;
57776: GO 57691
// end ; end ;
57778: GO 57691
57780: POP
57781: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
57782: LD_VAR 0 4
57786: PUSH
57787: LD_VAR 0 7
57791: ARRAY
57792: PPUSH
57793: CALL_OW 257
57797: PUSH
57798: LD_INT 8
57800: EQUAL
57801: PUSH
57802: LD_VAR 0 4
57806: PUSH
57807: LD_VAR 0 7
57811: ARRAY
57812: PPUSH
57813: CALL_OW 264
57817: PUSH
57818: LD_INT 28
57820: PUSH
57821: LD_INT 45
57823: PUSH
57824: LD_INT 7
57826: PUSH
57827: LD_INT 47
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: LIST
57834: LIST
57835: IN
57836: OR
57837: IFFALSE 58067
// begin attacking := false ;
57839: LD_ADDR_VAR 0 29
57843: PUSH
57844: LD_INT 0
57846: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
57847: LD_VAR 0 14
57851: PUSH
57852: LD_INT 1
57854: ARRAY
57855: PPUSH
57856: CALL_OW 266
57860: PUSH
57861: LD_INT 32
57863: PUSH
57864: LD_INT 31
57866: PUSH
57867: LD_INT 33
57869: PUSH
57870: LD_INT 4
57872: PUSH
57873: LD_INT 5
57875: PUSH
57876: EMPTY
57877: LIST
57878: LIST
57879: LIST
57880: LIST
57881: LIST
57882: IN
57883: IFFALSE 58067
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
57885: LD_ADDR_VAR 0 9
57889: PUSH
57890: LD_VAR 0 14
57894: PUSH
57895: LD_INT 1
57897: ARRAY
57898: PPUSH
57899: CALL_OW 266
57903: PPUSH
57904: LD_VAR 0 14
57908: PUSH
57909: LD_INT 1
57911: ARRAY
57912: PPUSH
57913: CALL_OW 250
57917: PPUSH
57918: LD_VAR 0 14
57922: PUSH
57923: LD_INT 1
57925: ARRAY
57926: PPUSH
57927: CALL_OW 251
57931: PPUSH
57932: LD_VAR 0 14
57936: PUSH
57937: LD_INT 1
57939: ARRAY
57940: PPUSH
57941: CALL_OW 254
57945: PPUSH
57946: LD_VAR 0 14
57950: PUSH
57951: LD_INT 1
57953: ARRAY
57954: PPUSH
57955: CALL_OW 248
57959: PPUSH
57960: LD_INT 0
57962: PPUSH
57963: CALL 34673 0 6
57967: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
57968: LD_ADDR_VAR 0 8
57972: PUSH
57973: LD_VAR 0 4
57977: PUSH
57978: LD_VAR 0 7
57982: ARRAY
57983: PPUSH
57984: LD_VAR 0 9
57988: PPUSH
57989: CALL 53366 0 2
57993: ST_TO_ADDR
// if j then
57994: LD_VAR 0 8
57998: IFFALSE 58067
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
58000: LD_VAR 0 8
58004: PUSH
58005: LD_INT 1
58007: ARRAY
58008: PPUSH
58009: LD_VAR 0 8
58013: PUSH
58014: LD_INT 2
58016: ARRAY
58017: PPUSH
58018: CALL_OW 488
58022: IFFALSE 58067
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
58024: LD_VAR 0 4
58028: PUSH
58029: LD_VAR 0 7
58033: ARRAY
58034: PPUSH
58035: LD_VAR 0 8
58039: PUSH
58040: LD_INT 1
58042: ARRAY
58043: PPUSH
58044: LD_VAR 0 8
58048: PUSH
58049: LD_INT 2
58051: ARRAY
58052: PPUSH
58053: CALL_OW 116
// attacking := true ;
58057: LD_ADDR_VAR 0 29
58061: PUSH
58062: LD_INT 1
58064: ST_TO_ADDR
// continue ;
58065: GO 55440
// end ; end ; end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
58067: LD_VAR 0 4
58071: PUSH
58072: LD_VAR 0 7
58076: ARRAY
58077: PPUSH
58078: CALL_OW 265
58082: PUSH
58083: LD_INT 11
58085: EQUAL
58086: IFFALSE 58364
// begin k := 10 ;
58088: LD_ADDR_VAR 0 9
58092: PUSH
58093: LD_INT 10
58095: ST_TO_ADDR
// x := 0 ;
58096: LD_ADDR_VAR 0 10
58100: PUSH
58101: LD_INT 0
58103: ST_TO_ADDR
// if tmp < k then
58104: LD_VAR 0 14
58108: PUSH
58109: LD_VAR 0 9
58113: LESS
58114: IFFALSE 58126
// k := tmp ;
58116: LD_ADDR_VAR 0 9
58120: PUSH
58121: LD_VAR 0 14
58125: ST_TO_ADDR
// for j = k downto 1 do
58126: LD_ADDR_VAR 0 8
58130: PUSH
58131: DOUBLE
58132: LD_VAR 0 9
58136: INC
58137: ST_TO_ADDR
58138: LD_INT 1
58140: PUSH
58141: FOR_DOWNTO
58142: IFFALSE 58217
// begin if GetType ( tmp [ j ] ) = unit_human then
58144: LD_VAR 0 14
58148: PUSH
58149: LD_VAR 0 8
58153: ARRAY
58154: PPUSH
58155: CALL_OW 247
58159: PUSH
58160: LD_INT 1
58162: EQUAL
58163: IFFALSE 58215
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
58165: LD_VAR 0 4
58169: PUSH
58170: LD_VAR 0 7
58174: ARRAY
58175: PPUSH
58176: LD_VAR 0 14
58180: PUSH
58181: LD_VAR 0 8
58185: ARRAY
58186: PPUSH
58187: CALL 53637 0 2
// x := tmp [ j ] ;
58191: LD_ADDR_VAR 0 10
58195: PUSH
58196: LD_VAR 0 14
58200: PUSH
58201: LD_VAR 0 8
58205: ARRAY
58206: ST_TO_ADDR
// attacking := true ;
58207: LD_ADDR_VAR 0 29
58211: PUSH
58212: LD_INT 1
58214: ST_TO_ADDR
// end ; end ;
58215: GO 58141
58217: POP
58218: POP
// if not x then
58219: LD_VAR 0 10
58223: NOT
58224: IFFALSE 58364
// begin attacking := true ;
58226: LD_ADDR_VAR 0 29
58230: PUSH
58231: LD_INT 1
58233: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
58234: LD_VAR 0 4
58238: PUSH
58239: LD_VAR 0 7
58243: ARRAY
58244: PPUSH
58245: CALL_OW 250
58249: PPUSH
58250: LD_VAR 0 4
58254: PUSH
58255: LD_VAR 0 7
58259: ARRAY
58260: PPUSH
58261: CALL_OW 251
58265: PPUSH
58266: CALL_OW 546
58270: PUSH
58271: LD_INT 2
58273: ARRAY
58274: PUSH
58275: LD_VAR 0 14
58279: PUSH
58280: LD_INT 1
58282: ARRAY
58283: PPUSH
58284: CALL_OW 250
58288: PPUSH
58289: LD_VAR 0 14
58293: PUSH
58294: LD_INT 1
58296: ARRAY
58297: PPUSH
58298: CALL_OW 251
58302: PPUSH
58303: CALL_OW 546
58307: PUSH
58308: LD_INT 2
58310: ARRAY
58311: EQUAL
58312: IFFALSE 58340
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
58314: LD_VAR 0 4
58318: PUSH
58319: LD_VAR 0 7
58323: ARRAY
58324: PPUSH
58325: LD_VAR 0 14
58329: PUSH
58330: LD_INT 1
58332: ARRAY
58333: PPUSH
58334: CALL 53637 0 2
58338: GO 58364
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
58340: LD_VAR 0 4
58344: PUSH
58345: LD_VAR 0 7
58349: ARRAY
58350: PPUSH
58351: LD_VAR 0 14
58355: PUSH
58356: LD_INT 1
58358: ARRAY
58359: PPUSH
58360: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
58364: LD_VAR 0 4
58368: PUSH
58369: LD_VAR 0 7
58373: ARRAY
58374: PPUSH
58375: CALL_OW 264
58379: PUSH
58380: LD_INT 29
58382: EQUAL
58383: IFFALSE 58749
// begin if WantsToAttack ( group [ i ] ) in bombed then
58385: LD_VAR 0 4
58389: PUSH
58390: LD_VAR 0 7
58394: ARRAY
58395: PPUSH
58396: CALL_OW 319
58400: PUSH
58401: LD_VAR 0 28
58405: IN
58406: IFFALSE 58410
// continue ;
58408: GO 55440
// k := 8 ;
58410: LD_ADDR_VAR 0 9
58414: PUSH
58415: LD_INT 8
58417: ST_TO_ADDR
// x := 0 ;
58418: LD_ADDR_VAR 0 10
58422: PUSH
58423: LD_INT 0
58425: ST_TO_ADDR
// if tmp < k then
58426: LD_VAR 0 14
58430: PUSH
58431: LD_VAR 0 9
58435: LESS
58436: IFFALSE 58448
// k := tmp ;
58438: LD_ADDR_VAR 0 9
58442: PUSH
58443: LD_VAR 0 14
58447: ST_TO_ADDR
// for j = 1 to k do
58448: LD_ADDR_VAR 0 8
58452: PUSH
58453: DOUBLE
58454: LD_INT 1
58456: DEC
58457: ST_TO_ADDR
58458: LD_VAR 0 9
58462: PUSH
58463: FOR_TO
58464: IFFALSE 58596
// begin if GetType ( tmp [ j ] ) = unit_building then
58466: LD_VAR 0 14
58470: PUSH
58471: LD_VAR 0 8
58475: ARRAY
58476: PPUSH
58477: CALL_OW 247
58481: PUSH
58482: LD_INT 3
58484: EQUAL
58485: IFFALSE 58594
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
58487: LD_VAR 0 14
58491: PUSH
58492: LD_VAR 0 8
58496: ARRAY
58497: PUSH
58498: LD_VAR 0 28
58502: IN
58503: NOT
58504: PUSH
58505: LD_VAR 0 14
58509: PUSH
58510: LD_VAR 0 8
58514: ARRAY
58515: PPUSH
58516: CALL_OW 313
58520: AND
58521: IFFALSE 58594
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
58523: LD_VAR 0 4
58527: PUSH
58528: LD_VAR 0 7
58532: ARRAY
58533: PPUSH
58534: LD_VAR 0 14
58538: PUSH
58539: LD_VAR 0 8
58543: ARRAY
58544: PPUSH
58545: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
58549: LD_ADDR_VAR 0 28
58553: PUSH
58554: LD_VAR 0 28
58558: PPUSH
58559: LD_VAR 0 28
58563: PUSH
58564: LD_INT 1
58566: PLUS
58567: PPUSH
58568: LD_VAR 0 14
58572: PUSH
58573: LD_VAR 0 8
58577: ARRAY
58578: PPUSH
58579: CALL_OW 1
58583: ST_TO_ADDR
// attacking := true ;
58584: LD_ADDR_VAR 0 29
58588: PUSH
58589: LD_INT 1
58591: ST_TO_ADDR
// break ;
58592: GO 58596
// end ; end ;
58594: GO 58463
58596: POP
58597: POP
// if not attacking and f_attack_depot then
58598: LD_VAR 0 29
58602: NOT
58603: PUSH
58604: LD_VAR 0 25
58608: AND
58609: IFFALSE 58704
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
58611: LD_ADDR_VAR 0 13
58615: PUSH
58616: LD_VAR 0 14
58620: PPUSH
58621: LD_INT 2
58623: PUSH
58624: LD_INT 30
58626: PUSH
58627: LD_INT 0
58629: PUSH
58630: EMPTY
58631: LIST
58632: LIST
58633: PUSH
58634: LD_INT 30
58636: PUSH
58637: LD_INT 1
58639: PUSH
58640: EMPTY
58641: LIST
58642: LIST
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: LIST
58648: PPUSH
58649: CALL_OW 72
58653: ST_TO_ADDR
// if z then
58654: LD_VAR 0 13
58658: IFFALSE 58704
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
58660: LD_VAR 0 4
58664: PUSH
58665: LD_VAR 0 7
58669: ARRAY
58670: PPUSH
58671: LD_VAR 0 13
58675: PPUSH
58676: LD_VAR 0 4
58680: PUSH
58681: LD_VAR 0 7
58685: ARRAY
58686: PPUSH
58687: CALL_OW 74
58691: PPUSH
58692: CALL_OW 115
// attacking := true ;
58696: LD_ADDR_VAR 0 29
58700: PUSH
58701: LD_INT 1
58703: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
58704: LD_VAR 0 4
58708: PUSH
58709: LD_VAR 0 7
58713: ARRAY
58714: PPUSH
58715: CALL_OW 256
58719: PUSH
58720: LD_INT 500
58722: LESS
58723: IFFALSE 58749
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
58725: LD_VAR 0 4
58729: PUSH
58730: LD_VAR 0 7
58734: ARRAY
58735: PPUSH
58736: LD_VAR 0 14
58740: PUSH
58741: LD_INT 1
58743: ARRAY
58744: PPUSH
58745: CALL_OW 115
// end ; if GetWeapon ( group [ i ] ) = ru_time_lapser then
58749: LD_VAR 0 4
58753: PUSH
58754: LD_VAR 0 7
58758: ARRAY
58759: PPUSH
58760: CALL_OW 264
58764: PUSH
58765: LD_INT 49
58767: EQUAL
58768: IFFALSE 58889
// begin if not HasTask ( group [ i ] ) then
58770: LD_VAR 0 4
58774: PUSH
58775: LD_VAR 0 7
58779: ARRAY
58780: PPUSH
58781: CALL_OW 314
58785: NOT
58786: IFFALSE 58889
// begin k := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) , group [ i ] ) ;
58788: LD_ADDR_VAR 0 9
58792: PUSH
58793: LD_INT 81
58795: PUSH
58796: LD_VAR 0 4
58800: PUSH
58801: LD_VAR 0 7
58805: ARRAY
58806: PPUSH
58807: CALL_OW 255
58811: PUSH
58812: EMPTY
58813: LIST
58814: LIST
58815: PPUSH
58816: CALL_OW 69
58820: PPUSH
58821: LD_VAR 0 4
58825: PUSH
58826: LD_VAR 0 7
58830: ARRAY
58831: PPUSH
58832: CALL_OW 74
58836: ST_TO_ADDR
// if k then
58837: LD_VAR 0 9
58841: IFFALSE 58889
// if GetDistUnits ( group [ i ] , k ) > 10 then
58843: LD_VAR 0 4
58847: PUSH
58848: LD_VAR 0 7
58852: ARRAY
58853: PPUSH
58854: LD_VAR 0 9
58858: PPUSH
58859: CALL_OW 296
58863: PUSH
58864: LD_INT 10
58866: GREATER
58867: IFFALSE 58889
// ComMoveUnit ( group [ i ] , k ) ;
58869: LD_VAR 0 4
58873: PUSH
58874: LD_VAR 0 7
58878: ARRAY
58879: PPUSH
58880: LD_VAR 0 9
58884: PPUSH
58885: CALL_OW 112
// end ; end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
58889: LD_VAR 0 4
58893: PUSH
58894: LD_VAR 0 7
58898: ARRAY
58899: PPUSH
58900: CALL_OW 256
58904: PUSH
58905: LD_INT 250
58907: LESS
58908: PUSH
58909: LD_VAR 0 4
58913: PUSH
58914: LD_VAR 0 7
58918: ARRAY
58919: PUSH
58920: LD_INT 21
58922: PUSH
58923: LD_INT 2
58925: PUSH
58926: EMPTY
58927: LIST
58928: LIST
58929: PUSH
58930: LD_INT 23
58932: PUSH
58933: LD_INT 2
58935: PUSH
58936: EMPTY
58937: LIST
58938: LIST
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: PPUSH
58944: CALL_OW 69
58948: IN
58949: AND
58950: IFFALSE 59075
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
58952: LD_ADDR_VAR 0 9
58956: PUSH
58957: LD_OWVAR 3
58961: PUSH
58962: LD_VAR 0 4
58966: PUSH
58967: LD_VAR 0 7
58971: ARRAY
58972: DIFF
58973: PPUSH
58974: LD_VAR 0 4
58978: PUSH
58979: LD_VAR 0 7
58983: ARRAY
58984: PPUSH
58985: CALL_OW 74
58989: ST_TO_ADDR
// if not k then
58990: LD_VAR 0 9
58994: NOT
58995: IFFALSE 58999
// continue ;
58997: GO 55440
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
58999: LD_VAR 0 9
59003: PUSH
59004: LD_INT 81
59006: PUSH
59007: LD_VAR 0 4
59011: PUSH
59012: LD_VAR 0 7
59016: ARRAY
59017: PPUSH
59018: CALL_OW 255
59022: PUSH
59023: EMPTY
59024: LIST
59025: LIST
59026: PPUSH
59027: CALL_OW 69
59031: IN
59032: PUSH
59033: LD_VAR 0 9
59037: PPUSH
59038: LD_VAR 0 4
59042: PUSH
59043: LD_VAR 0 7
59047: ARRAY
59048: PPUSH
59049: CALL_OW 296
59053: PUSH
59054: LD_INT 5
59056: LESS
59057: AND
59058: IFFALSE 59075
// ComAutodestruct ( group [ i ] ) ;
59060: LD_VAR 0 4
59064: PUSH
59065: LD_VAR 0 7
59069: ARRAY
59070: PPUSH
59071: CALL 53535 0 1
// end ; if f_attack_depot then
59075: LD_VAR 0 25
59079: IFFALSE 59191
// begin k := 6 ;
59081: LD_ADDR_VAR 0 9
59085: PUSH
59086: LD_INT 6
59088: ST_TO_ADDR
// if tmp < k then
59089: LD_VAR 0 14
59093: PUSH
59094: LD_VAR 0 9
59098: LESS
59099: IFFALSE 59111
// k := tmp ;
59101: LD_ADDR_VAR 0 9
59105: PUSH
59106: LD_VAR 0 14
59110: ST_TO_ADDR
// for j = 1 to k do
59111: LD_ADDR_VAR 0 8
59115: PUSH
59116: DOUBLE
59117: LD_INT 1
59119: DEC
59120: ST_TO_ADDR
59121: LD_VAR 0 9
59125: PUSH
59126: FOR_TO
59127: IFFALSE 59189
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
59129: LD_VAR 0 8
59133: PPUSH
59134: CALL_OW 266
59138: PUSH
59139: LD_INT 0
59141: PUSH
59142: LD_INT 1
59144: PUSH
59145: EMPTY
59146: LIST
59147: LIST
59148: IN
59149: IFFALSE 59187
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
59151: LD_VAR 0 4
59155: PUSH
59156: LD_VAR 0 7
59160: ARRAY
59161: PPUSH
59162: LD_VAR 0 14
59166: PUSH
59167: LD_VAR 0 8
59171: ARRAY
59172: PPUSH
59173: CALL_OW 115
// attacking := true ;
59177: LD_ADDR_VAR 0 29
59181: PUSH
59182: LD_INT 1
59184: ST_TO_ADDR
// break ;
59185: GO 59189
// end ;
59187: GO 59126
59189: POP
59190: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
59191: LD_VAR 0 4
59195: PUSH
59196: LD_VAR 0 7
59200: ARRAY
59201: PPUSH
59202: CALL_OW 302
59206: PUSH
59207: LD_VAR 0 29
59211: NOT
59212: AND
59213: IFFALSE 59535
// begin if GetTag ( group [ i ] ) = 71 then
59215: LD_VAR 0 4
59219: PUSH
59220: LD_VAR 0 7
59224: ARRAY
59225: PPUSH
59226: CALL_OW 110
59230: PUSH
59231: LD_INT 71
59233: EQUAL
59234: IFFALSE 59275
// begin if HasTask ( group [ i ] ) then
59236: LD_VAR 0 4
59240: PUSH
59241: LD_VAR 0 7
59245: ARRAY
59246: PPUSH
59247: CALL_OW 314
59251: IFFALSE 59257
// continue else
59253: GO 55440
59255: GO 59275
// SetTag ( group [ i ] , 0 ) ;
59257: LD_VAR 0 4
59261: PUSH
59262: LD_VAR 0 7
59266: ARRAY
59267: PPUSH
59268: LD_INT 0
59270: PPUSH
59271: CALL_OW 109
// end ; k := 8 ;
59275: LD_ADDR_VAR 0 9
59279: PUSH
59280: LD_INT 8
59282: ST_TO_ADDR
// x := 0 ;
59283: LD_ADDR_VAR 0 10
59287: PUSH
59288: LD_INT 0
59290: ST_TO_ADDR
// if tmp < k then
59291: LD_VAR 0 14
59295: PUSH
59296: LD_VAR 0 9
59300: LESS
59301: IFFALSE 59313
// k := tmp ;
59303: LD_ADDR_VAR 0 9
59307: PUSH
59308: LD_VAR 0 14
59312: ST_TO_ADDR
// for j = 1 to k do
59313: LD_ADDR_VAR 0 8
59317: PUSH
59318: DOUBLE
59319: LD_INT 1
59321: DEC
59322: ST_TO_ADDR
59323: LD_VAR 0 9
59327: PUSH
59328: FOR_TO
59329: IFFALSE 59427
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
59331: LD_VAR 0 14
59335: PUSH
59336: LD_VAR 0 8
59340: ARRAY
59341: PPUSH
59342: CALL_OW 247
59346: PUSH
59347: LD_INT 1
59349: EQUAL
59350: PUSH
59351: LD_VAR 0 14
59355: PUSH
59356: LD_VAR 0 8
59360: ARRAY
59361: PPUSH
59362: CALL_OW 256
59366: PUSH
59367: LD_INT 250
59369: LESS
59370: PUSH
59371: LD_VAR 0 20
59375: AND
59376: PUSH
59377: LD_VAR 0 20
59381: NOT
59382: PUSH
59383: LD_VAR 0 14
59387: PUSH
59388: LD_VAR 0 8
59392: ARRAY
59393: PPUSH
59394: CALL_OW 256
59398: PUSH
59399: LD_INT 250
59401: GREATEREQUAL
59402: AND
59403: OR
59404: AND
59405: IFFALSE 59425
// begin x := tmp [ j ] ;
59407: LD_ADDR_VAR 0 10
59411: PUSH
59412: LD_VAR 0 14
59416: PUSH
59417: LD_VAR 0 8
59421: ARRAY
59422: ST_TO_ADDR
// break ;
59423: GO 59427
// end ;
59425: GO 59328
59427: POP
59428: POP
// if x then
59429: LD_VAR 0 10
59433: IFFALSE 59457
// ComAttackUnit ( group [ i ] , x ) else
59435: LD_VAR 0 4
59439: PUSH
59440: LD_VAR 0 7
59444: ARRAY
59445: PPUSH
59446: LD_VAR 0 10
59450: PPUSH
59451: CALL_OW 115
59455: GO 59481
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
59457: LD_VAR 0 4
59461: PUSH
59462: LD_VAR 0 7
59466: ARRAY
59467: PPUSH
59468: LD_VAR 0 14
59472: PUSH
59473: LD_INT 1
59475: ARRAY
59476: PPUSH
59477: CALL_OW 115
// if not HasTask ( group [ i ] ) then
59481: LD_VAR 0 4
59485: PUSH
59486: LD_VAR 0 7
59490: ARRAY
59491: PPUSH
59492: CALL_OW 314
59496: NOT
59497: IFFALSE 59535
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
59499: LD_VAR 0 4
59503: PUSH
59504: LD_VAR 0 7
59508: ARRAY
59509: PPUSH
59510: LD_VAR 0 14
59514: PPUSH
59515: LD_VAR 0 4
59519: PUSH
59520: LD_VAR 0 7
59524: ARRAY
59525: PPUSH
59526: CALL_OW 74
59530: PPUSH
59531: CALL_OW 115
// end ; end ; end ;
59535: GO 55440
59537: POP
59538: POP
// wait ( 0 0$1 ) ;
59539: LD_INT 35
59541: PPUSH
59542: CALL_OW 67
// until group = [ ] or not FilterAllUnits ( [ f_enemy , side ] ) ;
59546: LD_VAR 0 4
59550: PUSH
59551: EMPTY
59552: EQUAL
59553: PUSH
59554: LD_INT 81
59556: PUSH
59557: LD_VAR 0 35
59561: PUSH
59562: EMPTY
59563: LIST
59564: LIST
59565: PPUSH
59566: CALL_OW 69
59570: NOT
59571: OR
59572: IFFALSE 55425
// end ;
59574: LD_VAR 0 2
59578: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
59579: LD_INT 0
59581: PPUSH
59582: PPUSH
59583: PPUSH
59584: PPUSH
// if not base_units then
59585: LD_VAR 0 1
59589: NOT
59590: IFFALSE 59594
// exit ;
59592: GO 59681
// result := false ;
59594: LD_ADDR_VAR 0 2
59598: PUSH
59599: LD_INT 0
59601: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
59602: LD_ADDR_VAR 0 5
59606: PUSH
59607: LD_VAR 0 1
59611: PPUSH
59612: LD_INT 21
59614: PUSH
59615: LD_INT 3
59617: PUSH
59618: EMPTY
59619: LIST
59620: LIST
59621: PPUSH
59622: CALL_OW 72
59626: ST_TO_ADDR
// if not tmp then
59627: LD_VAR 0 5
59631: NOT
59632: IFFALSE 59636
// exit ;
59634: GO 59681
// for i in tmp do
59636: LD_ADDR_VAR 0 3
59640: PUSH
59641: LD_VAR 0 5
59645: PUSH
59646: FOR_IN
59647: IFFALSE 59679
// begin result := EnemyInRange ( i , 22 ) ;
59649: LD_ADDR_VAR 0 2
59653: PUSH
59654: LD_VAR 0 3
59658: PPUSH
59659: LD_INT 22
59661: PPUSH
59662: CALL 53218 0 2
59666: ST_TO_ADDR
// if result then
59667: LD_VAR 0 2
59671: IFFALSE 59677
// exit ;
59673: POP
59674: POP
59675: GO 59681
// end ;
59677: GO 59646
59679: POP
59680: POP
// end ;
59681: LD_VAR 0 2
59685: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
59686: LD_INT 0
59688: PPUSH
59689: PPUSH
// if not units then
59690: LD_VAR 0 1
59694: NOT
59695: IFFALSE 59699
// exit ;
59697: GO 59769
// result := [ ] ;
59699: LD_ADDR_VAR 0 3
59703: PUSH
59704: EMPTY
59705: ST_TO_ADDR
// for i in units do
59706: LD_ADDR_VAR 0 4
59710: PUSH
59711: LD_VAR 0 1
59715: PUSH
59716: FOR_IN
59717: IFFALSE 59767
// if GetTag ( i ) = tag then
59719: LD_VAR 0 4
59723: PPUSH
59724: CALL_OW 110
59728: PUSH
59729: LD_VAR 0 2
59733: EQUAL
59734: IFFALSE 59765
// result := Insert ( result , result + 1 , i ) ;
59736: LD_ADDR_VAR 0 3
59740: PUSH
59741: LD_VAR 0 3
59745: PPUSH
59746: LD_VAR 0 3
59750: PUSH
59751: LD_INT 1
59753: PLUS
59754: PPUSH
59755: LD_VAR 0 4
59759: PPUSH
59760: CALL_OW 2
59764: ST_TO_ADDR
59765: GO 59716
59767: POP
59768: POP
// end ;
59769: LD_VAR 0 3
59773: RET
// export function IsDriver ( un ) ; begin
59774: LD_INT 0
59776: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
59777: LD_ADDR_VAR 0 2
59781: PUSH
59782: LD_VAR 0 1
59786: PUSH
59787: LD_INT 55
59789: PUSH
59790: EMPTY
59791: LIST
59792: PPUSH
59793: CALL_OW 69
59797: IN
59798: ST_TO_ADDR
// end ;
59799: LD_VAR 0 2
59803: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
59804: LD_INT 0
59806: PPUSH
59807: PPUSH
// list := [ ] ;
59808: LD_ADDR_VAR 0 5
59812: PUSH
59813: EMPTY
59814: ST_TO_ADDR
// case d of 0 :
59815: LD_VAR 0 3
59819: PUSH
59820: LD_INT 0
59822: DOUBLE
59823: EQUAL
59824: IFTRUE 59828
59826: GO 59961
59828: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
59829: LD_ADDR_VAR 0 5
59833: PUSH
59834: LD_VAR 0 1
59838: PUSH
59839: LD_INT 4
59841: MINUS
59842: PUSH
59843: LD_VAR 0 2
59847: PUSH
59848: LD_INT 4
59850: MINUS
59851: PUSH
59852: LD_INT 2
59854: PUSH
59855: EMPTY
59856: LIST
59857: LIST
59858: LIST
59859: PUSH
59860: LD_VAR 0 1
59864: PUSH
59865: LD_INT 3
59867: MINUS
59868: PUSH
59869: LD_VAR 0 2
59873: PUSH
59874: LD_INT 1
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: LIST
59881: PUSH
59882: LD_VAR 0 1
59886: PUSH
59887: LD_INT 4
59889: PLUS
59890: PUSH
59891: LD_VAR 0 2
59895: PUSH
59896: LD_INT 4
59898: PUSH
59899: EMPTY
59900: LIST
59901: LIST
59902: LIST
59903: PUSH
59904: LD_VAR 0 1
59908: PUSH
59909: LD_INT 3
59911: PLUS
59912: PUSH
59913: LD_VAR 0 2
59917: PUSH
59918: LD_INT 3
59920: PLUS
59921: PUSH
59922: LD_INT 5
59924: PUSH
59925: EMPTY
59926: LIST
59927: LIST
59928: LIST
59929: PUSH
59930: LD_VAR 0 1
59934: PUSH
59935: LD_VAR 0 2
59939: PUSH
59940: LD_INT 4
59942: PLUS
59943: PUSH
59944: LD_INT 0
59946: PUSH
59947: EMPTY
59948: LIST
59949: LIST
59950: LIST
59951: PUSH
59952: EMPTY
59953: LIST
59954: LIST
59955: LIST
59956: LIST
59957: LIST
59958: ST_TO_ADDR
// end ; 1 :
59959: GO 60659
59961: LD_INT 1
59963: DOUBLE
59964: EQUAL
59965: IFTRUE 59969
59967: GO 60102
59969: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
59970: LD_ADDR_VAR 0 5
59974: PUSH
59975: LD_VAR 0 1
59979: PUSH
59980: LD_VAR 0 2
59984: PUSH
59985: LD_INT 4
59987: MINUS
59988: PUSH
59989: LD_INT 3
59991: PUSH
59992: EMPTY
59993: LIST
59994: LIST
59995: LIST
59996: PUSH
59997: LD_VAR 0 1
60001: PUSH
60002: LD_INT 3
60004: MINUS
60005: PUSH
60006: LD_VAR 0 2
60010: PUSH
60011: LD_INT 3
60013: MINUS
60014: PUSH
60015: LD_INT 2
60017: PUSH
60018: EMPTY
60019: LIST
60020: LIST
60021: LIST
60022: PUSH
60023: LD_VAR 0 1
60027: PUSH
60028: LD_INT 4
60030: MINUS
60031: PUSH
60032: LD_VAR 0 2
60036: PUSH
60037: LD_INT 1
60039: PUSH
60040: EMPTY
60041: LIST
60042: LIST
60043: LIST
60044: PUSH
60045: LD_VAR 0 1
60049: PUSH
60050: LD_VAR 0 2
60054: PUSH
60055: LD_INT 3
60057: PLUS
60058: PUSH
60059: LD_INT 0
60061: PUSH
60062: EMPTY
60063: LIST
60064: LIST
60065: LIST
60066: PUSH
60067: LD_VAR 0 1
60071: PUSH
60072: LD_INT 4
60074: PLUS
60075: PUSH
60076: LD_VAR 0 2
60080: PUSH
60081: LD_INT 4
60083: PLUS
60084: PUSH
60085: LD_INT 5
60087: PUSH
60088: EMPTY
60089: LIST
60090: LIST
60091: LIST
60092: PUSH
60093: EMPTY
60094: LIST
60095: LIST
60096: LIST
60097: LIST
60098: LIST
60099: ST_TO_ADDR
// end ; 2 :
60100: GO 60659
60102: LD_INT 2
60104: DOUBLE
60105: EQUAL
60106: IFTRUE 60110
60108: GO 60239
60110: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
60111: LD_ADDR_VAR 0 5
60115: PUSH
60116: LD_VAR 0 1
60120: PUSH
60121: LD_VAR 0 2
60125: PUSH
60126: LD_INT 3
60128: MINUS
60129: PUSH
60130: LD_INT 3
60132: PUSH
60133: EMPTY
60134: LIST
60135: LIST
60136: LIST
60137: PUSH
60138: LD_VAR 0 1
60142: PUSH
60143: LD_INT 4
60145: PLUS
60146: PUSH
60147: LD_VAR 0 2
60151: PUSH
60152: LD_INT 4
60154: PUSH
60155: EMPTY
60156: LIST
60157: LIST
60158: LIST
60159: PUSH
60160: LD_VAR 0 1
60164: PUSH
60165: LD_VAR 0 2
60169: PUSH
60170: LD_INT 4
60172: PLUS
60173: PUSH
60174: LD_INT 0
60176: PUSH
60177: EMPTY
60178: LIST
60179: LIST
60180: LIST
60181: PUSH
60182: LD_VAR 0 1
60186: PUSH
60187: LD_INT 3
60189: MINUS
60190: PUSH
60191: LD_VAR 0 2
60195: PUSH
60196: LD_INT 1
60198: PUSH
60199: EMPTY
60200: LIST
60201: LIST
60202: LIST
60203: PUSH
60204: LD_VAR 0 1
60208: PUSH
60209: LD_INT 4
60211: MINUS
60212: PUSH
60213: LD_VAR 0 2
60217: PUSH
60218: LD_INT 4
60220: MINUS
60221: PUSH
60222: LD_INT 2
60224: PUSH
60225: EMPTY
60226: LIST
60227: LIST
60228: LIST
60229: PUSH
60230: EMPTY
60231: LIST
60232: LIST
60233: LIST
60234: LIST
60235: LIST
60236: ST_TO_ADDR
// end ; 3 :
60237: GO 60659
60239: LD_INT 3
60241: DOUBLE
60242: EQUAL
60243: IFTRUE 60247
60245: GO 60380
60247: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
60248: LD_ADDR_VAR 0 5
60252: PUSH
60253: LD_VAR 0 1
60257: PUSH
60258: LD_INT 3
60260: PLUS
60261: PUSH
60262: LD_VAR 0 2
60266: PUSH
60267: LD_INT 4
60269: PUSH
60270: EMPTY
60271: LIST
60272: LIST
60273: LIST
60274: PUSH
60275: LD_VAR 0 1
60279: PUSH
60280: LD_INT 4
60282: PLUS
60283: PUSH
60284: LD_VAR 0 2
60288: PUSH
60289: LD_INT 4
60291: PLUS
60292: PUSH
60293: LD_INT 5
60295: PUSH
60296: EMPTY
60297: LIST
60298: LIST
60299: LIST
60300: PUSH
60301: LD_VAR 0 1
60305: PUSH
60306: LD_INT 4
60308: MINUS
60309: PUSH
60310: LD_VAR 0 2
60314: PUSH
60315: LD_INT 1
60317: PUSH
60318: EMPTY
60319: LIST
60320: LIST
60321: LIST
60322: PUSH
60323: LD_VAR 0 1
60327: PUSH
60328: LD_VAR 0 2
60332: PUSH
60333: LD_INT 4
60335: MINUS
60336: PUSH
60337: LD_INT 3
60339: PUSH
60340: EMPTY
60341: LIST
60342: LIST
60343: LIST
60344: PUSH
60345: LD_VAR 0 1
60349: PUSH
60350: LD_INT 3
60352: MINUS
60353: PUSH
60354: LD_VAR 0 2
60358: PUSH
60359: LD_INT 3
60361: MINUS
60362: PUSH
60363: LD_INT 2
60365: PUSH
60366: EMPTY
60367: LIST
60368: LIST
60369: LIST
60370: PUSH
60371: EMPTY
60372: LIST
60373: LIST
60374: LIST
60375: LIST
60376: LIST
60377: ST_TO_ADDR
// end ; 4 :
60378: GO 60659
60380: LD_INT 4
60382: DOUBLE
60383: EQUAL
60384: IFTRUE 60388
60386: GO 60521
60388: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
60389: LD_ADDR_VAR 0 5
60393: PUSH
60394: LD_VAR 0 1
60398: PUSH
60399: LD_VAR 0 2
60403: PUSH
60404: LD_INT 4
60406: PLUS
60407: PUSH
60408: LD_INT 0
60410: PUSH
60411: EMPTY
60412: LIST
60413: LIST
60414: LIST
60415: PUSH
60416: LD_VAR 0 1
60420: PUSH
60421: LD_INT 3
60423: PLUS
60424: PUSH
60425: LD_VAR 0 2
60429: PUSH
60430: LD_INT 3
60432: PLUS
60433: PUSH
60434: LD_INT 5
60436: PUSH
60437: EMPTY
60438: LIST
60439: LIST
60440: LIST
60441: PUSH
60442: LD_VAR 0 1
60446: PUSH
60447: LD_INT 4
60449: PLUS
60450: PUSH
60451: LD_VAR 0 2
60455: PUSH
60456: LD_INT 4
60458: PUSH
60459: EMPTY
60460: LIST
60461: LIST
60462: LIST
60463: PUSH
60464: LD_VAR 0 1
60468: PUSH
60469: LD_VAR 0 2
60473: PUSH
60474: LD_INT 3
60476: MINUS
60477: PUSH
60478: LD_INT 3
60480: PUSH
60481: EMPTY
60482: LIST
60483: LIST
60484: LIST
60485: PUSH
60486: LD_VAR 0 1
60490: PUSH
60491: LD_INT 4
60493: MINUS
60494: PUSH
60495: LD_VAR 0 2
60499: PUSH
60500: LD_INT 4
60502: MINUS
60503: PUSH
60504: LD_INT 2
60506: PUSH
60507: EMPTY
60508: LIST
60509: LIST
60510: LIST
60511: PUSH
60512: EMPTY
60513: LIST
60514: LIST
60515: LIST
60516: LIST
60517: LIST
60518: ST_TO_ADDR
// end ; 5 :
60519: GO 60659
60521: LD_INT 5
60523: DOUBLE
60524: EQUAL
60525: IFTRUE 60529
60527: GO 60658
60529: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
60530: LD_ADDR_VAR 0 5
60534: PUSH
60535: LD_VAR 0 1
60539: PUSH
60540: LD_INT 4
60542: MINUS
60543: PUSH
60544: LD_VAR 0 2
60548: PUSH
60549: LD_INT 1
60551: PUSH
60552: EMPTY
60553: LIST
60554: LIST
60555: LIST
60556: PUSH
60557: LD_VAR 0 1
60561: PUSH
60562: LD_VAR 0 2
60566: PUSH
60567: LD_INT 4
60569: MINUS
60570: PUSH
60571: LD_INT 3
60573: PUSH
60574: EMPTY
60575: LIST
60576: LIST
60577: LIST
60578: PUSH
60579: LD_VAR 0 1
60583: PUSH
60584: LD_INT 4
60586: PLUS
60587: PUSH
60588: LD_VAR 0 2
60592: PUSH
60593: LD_INT 4
60595: PLUS
60596: PUSH
60597: LD_INT 5
60599: PUSH
60600: EMPTY
60601: LIST
60602: LIST
60603: LIST
60604: PUSH
60605: LD_VAR 0 1
60609: PUSH
60610: LD_INT 3
60612: PLUS
60613: PUSH
60614: LD_VAR 0 2
60618: PUSH
60619: LD_INT 4
60621: PUSH
60622: EMPTY
60623: LIST
60624: LIST
60625: LIST
60626: PUSH
60627: LD_VAR 0 1
60631: PUSH
60632: LD_VAR 0 2
60636: PUSH
60637: LD_INT 3
60639: PLUS
60640: PUSH
60641: LD_INT 0
60643: PUSH
60644: EMPTY
60645: LIST
60646: LIST
60647: LIST
60648: PUSH
60649: EMPTY
60650: LIST
60651: LIST
60652: LIST
60653: LIST
60654: LIST
60655: ST_TO_ADDR
// end ; end ;
60656: GO 60659
60658: POP
// result := list ;
60659: LD_ADDR_VAR 0 4
60663: PUSH
60664: LD_VAR 0 5
60668: ST_TO_ADDR
// end ;
60669: LD_VAR 0 4
60673: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
60674: LD_INT 0
60676: PPUSH
60677: PPUSH
60678: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
60679: LD_VAR 0 1
60683: NOT
60684: PUSH
60685: LD_VAR 0 2
60689: PUSH
60690: LD_INT 1
60692: PUSH
60693: LD_INT 2
60695: PUSH
60696: LD_INT 3
60698: PUSH
60699: LD_INT 4
60701: PUSH
60702: EMPTY
60703: LIST
60704: LIST
60705: LIST
60706: LIST
60707: IN
60708: NOT
60709: OR
60710: IFFALSE 60714
// exit ;
60712: GO 60806
// tmp := [ ] ;
60714: LD_ADDR_VAR 0 5
60718: PUSH
60719: EMPTY
60720: ST_TO_ADDR
// for i in units do
60721: LD_ADDR_VAR 0 4
60725: PUSH
60726: LD_VAR 0 1
60730: PUSH
60731: FOR_IN
60732: IFFALSE 60775
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
60734: LD_ADDR_VAR 0 5
60738: PUSH
60739: LD_VAR 0 5
60743: PPUSH
60744: LD_VAR 0 5
60748: PUSH
60749: LD_INT 1
60751: PLUS
60752: PPUSH
60753: LD_VAR 0 4
60757: PPUSH
60758: LD_VAR 0 2
60762: PPUSH
60763: CALL_OW 259
60767: PPUSH
60768: CALL_OW 2
60772: ST_TO_ADDR
60773: GO 60731
60775: POP
60776: POP
// if not tmp then
60777: LD_VAR 0 5
60781: NOT
60782: IFFALSE 60786
// exit ;
60784: GO 60806
// result := SortListByListDesc ( units , tmp ) ;
60786: LD_ADDR_VAR 0 3
60790: PUSH
60791: LD_VAR 0 1
60795: PPUSH
60796: LD_VAR 0 5
60800: PPUSH
60801: CALL_OW 77
60805: ST_TO_ADDR
// end ;
60806: LD_VAR 0 3
60810: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
60811: LD_INT 0
60813: PPUSH
60814: PPUSH
60815: PPUSH
// x := GetX ( building ) ;
60816: LD_ADDR_VAR 0 4
60820: PUSH
60821: LD_VAR 0 2
60825: PPUSH
60826: CALL_OW 250
60830: ST_TO_ADDR
// y := GetY ( building ) ;
60831: LD_ADDR_VAR 0 5
60835: PUSH
60836: LD_VAR 0 2
60840: PPUSH
60841: CALL_OW 251
60845: ST_TO_ADDR
// if GetTaskList ( unit ) then
60846: LD_VAR 0 1
60850: PPUSH
60851: CALL_OW 437
60855: IFFALSE 60950
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60857: LD_STRING e
60859: PUSH
60860: LD_VAR 0 1
60864: PPUSH
60865: CALL_OW 437
60869: PUSH
60870: LD_INT 1
60872: ARRAY
60873: PUSH
60874: LD_INT 1
60876: ARRAY
60877: EQUAL
60878: PUSH
60879: LD_VAR 0 4
60883: PUSH
60884: LD_VAR 0 1
60888: PPUSH
60889: CALL_OW 437
60893: PUSH
60894: LD_INT 1
60896: ARRAY
60897: PUSH
60898: LD_INT 2
60900: ARRAY
60901: EQUAL
60902: AND
60903: PUSH
60904: LD_VAR 0 5
60908: PUSH
60909: LD_VAR 0 1
60913: PPUSH
60914: CALL_OW 437
60918: PUSH
60919: LD_INT 1
60921: ARRAY
60922: PUSH
60923: LD_INT 3
60925: ARRAY
60926: EQUAL
60927: AND
60928: IFFALSE 60940
// result := true else
60930: LD_ADDR_VAR 0 3
60934: PUSH
60935: LD_INT 1
60937: ST_TO_ADDR
60938: GO 60948
// result := false ;
60940: LD_ADDR_VAR 0 3
60944: PUSH
60945: LD_INT 0
60947: ST_TO_ADDR
// end else
60948: GO 60958
// result := false ;
60950: LD_ADDR_VAR 0 3
60954: PUSH
60955: LD_INT 0
60957: ST_TO_ADDR
// end ;
60958: LD_VAR 0 3
60962: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
60963: LD_INT 0
60965: PPUSH
60966: PPUSH
60967: PPUSH
60968: PPUSH
// if not unit or not area then
60969: LD_VAR 0 1
60973: NOT
60974: PUSH
60975: LD_VAR 0 2
60979: NOT
60980: OR
60981: IFFALSE 60985
// exit ;
60983: GO 61149
// tmp := AreaToList ( area , i ) ;
60985: LD_ADDR_VAR 0 6
60989: PUSH
60990: LD_VAR 0 2
60994: PPUSH
60995: LD_VAR 0 5
60999: PPUSH
61000: CALL_OW 517
61004: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
61005: LD_ADDR_VAR 0 5
61009: PUSH
61010: DOUBLE
61011: LD_INT 1
61013: DEC
61014: ST_TO_ADDR
61015: LD_VAR 0 6
61019: PUSH
61020: LD_INT 1
61022: ARRAY
61023: PUSH
61024: FOR_TO
61025: IFFALSE 61147
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
61027: LD_ADDR_VAR 0 7
61031: PUSH
61032: LD_VAR 0 6
61036: PUSH
61037: LD_INT 1
61039: ARRAY
61040: PUSH
61041: LD_VAR 0 5
61045: ARRAY
61046: PUSH
61047: LD_VAR 0 6
61051: PUSH
61052: LD_INT 2
61054: ARRAY
61055: PUSH
61056: LD_VAR 0 5
61060: ARRAY
61061: PUSH
61062: EMPTY
61063: LIST
61064: LIST
61065: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
61066: LD_VAR 0 7
61070: PUSH
61071: LD_INT 1
61073: ARRAY
61074: PPUSH
61075: LD_VAR 0 7
61079: PUSH
61080: LD_INT 2
61082: ARRAY
61083: PPUSH
61084: CALL_OW 428
61088: PUSH
61089: LD_INT 0
61091: EQUAL
61092: IFFALSE 61145
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
61094: LD_VAR 0 1
61098: PPUSH
61099: LD_VAR 0 7
61103: PUSH
61104: LD_INT 1
61106: ARRAY
61107: PPUSH
61108: LD_VAR 0 7
61112: PUSH
61113: LD_INT 2
61115: ARRAY
61116: PPUSH
61117: LD_VAR 0 3
61121: PPUSH
61122: CALL_OW 48
// result := IsPlaced ( unit ) ;
61126: LD_ADDR_VAR 0 4
61130: PUSH
61131: LD_VAR 0 1
61135: PPUSH
61136: CALL_OW 305
61140: ST_TO_ADDR
// exit ;
61141: POP
61142: POP
61143: GO 61149
// end ; end ;
61145: GO 61024
61147: POP
61148: POP
// end ;
61149: LD_VAR 0 4
61153: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
61154: LD_INT 0
61156: PPUSH
61157: PPUSH
61158: PPUSH
// if not side or side > 8 then
61159: LD_VAR 0 1
61163: NOT
61164: PUSH
61165: LD_VAR 0 1
61169: PUSH
61170: LD_INT 8
61172: GREATER
61173: OR
61174: IFFALSE 61178
// exit ;
61176: GO 61365
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
61178: LD_ADDR_VAR 0 4
61182: PUSH
61183: LD_INT 22
61185: PUSH
61186: LD_VAR 0 1
61190: PUSH
61191: EMPTY
61192: LIST
61193: LIST
61194: PUSH
61195: LD_INT 21
61197: PUSH
61198: LD_INT 3
61200: PUSH
61201: EMPTY
61202: LIST
61203: LIST
61204: PUSH
61205: EMPTY
61206: LIST
61207: LIST
61208: PPUSH
61209: CALL_OW 69
61213: ST_TO_ADDR
// if not tmp then
61214: LD_VAR 0 4
61218: NOT
61219: IFFALSE 61223
// exit ;
61221: GO 61365
// enable_addtolog := true ;
61223: LD_ADDR_OWVAR 81
61227: PUSH
61228: LD_INT 1
61230: ST_TO_ADDR
// AddToLog ( [ ) ;
61231: LD_STRING [
61233: PPUSH
61234: CALL_OW 561
// for i in tmp do
61238: LD_ADDR_VAR 0 3
61242: PUSH
61243: LD_VAR 0 4
61247: PUSH
61248: FOR_IN
61249: IFFALSE 61356
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
61251: LD_STRING [
61253: PUSH
61254: LD_VAR 0 3
61258: PPUSH
61259: CALL_OW 266
61263: STR
61264: PUSH
61265: LD_STRING , 
61267: STR
61268: PUSH
61269: LD_VAR 0 3
61273: PPUSH
61274: CALL_OW 250
61278: STR
61279: PUSH
61280: LD_STRING , 
61282: STR
61283: PUSH
61284: LD_VAR 0 3
61288: PPUSH
61289: CALL_OW 251
61293: STR
61294: PUSH
61295: LD_STRING , 
61297: STR
61298: PUSH
61299: LD_VAR 0 3
61303: PPUSH
61304: CALL_OW 254
61308: STR
61309: PUSH
61310: LD_STRING , 
61312: STR
61313: PUSH
61314: LD_VAR 0 3
61318: PPUSH
61319: LD_INT 1
61321: PPUSH
61322: CALL_OW 268
61326: STR
61327: PUSH
61328: LD_STRING , 
61330: STR
61331: PUSH
61332: LD_VAR 0 3
61336: PPUSH
61337: LD_INT 2
61339: PPUSH
61340: CALL_OW 268
61344: STR
61345: PUSH
61346: LD_STRING ],
61348: STR
61349: PPUSH
61350: CALL_OW 561
// end ;
61354: GO 61248
61356: POP
61357: POP
// AddToLog ( ]; ) ;
61358: LD_STRING ];
61360: PPUSH
61361: CALL_OW 561
// end ;
61365: LD_VAR 0 2
61369: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
61370: LD_INT 0
61372: PPUSH
61373: PPUSH
61374: PPUSH
61375: PPUSH
61376: PPUSH
// if not area or not rate or not max then
61377: LD_VAR 0 1
61381: NOT
61382: PUSH
61383: LD_VAR 0 2
61387: NOT
61388: OR
61389: PUSH
61390: LD_VAR 0 4
61394: NOT
61395: OR
61396: IFFALSE 61400
// exit ;
61398: GO 61592
// while 1 do
61400: LD_INT 1
61402: IFFALSE 61592
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
61404: LD_ADDR_VAR 0 9
61408: PUSH
61409: LD_VAR 0 1
61413: PPUSH
61414: LD_INT 1
61416: PPUSH
61417: CALL_OW 287
61421: PUSH
61422: LD_INT 10
61424: MUL
61425: ST_TO_ADDR
// r := rate / 10 ;
61426: LD_ADDR_VAR 0 7
61430: PUSH
61431: LD_VAR 0 2
61435: PUSH
61436: LD_INT 10
61438: DIVREAL
61439: ST_TO_ADDR
// time := 1 1$00 ;
61440: LD_ADDR_VAR 0 8
61444: PUSH
61445: LD_INT 2100
61447: ST_TO_ADDR
// if amount < min then
61448: LD_VAR 0 9
61452: PUSH
61453: LD_VAR 0 3
61457: LESS
61458: IFFALSE 61476
// r := r * 2 else
61460: LD_ADDR_VAR 0 7
61464: PUSH
61465: LD_VAR 0 7
61469: PUSH
61470: LD_INT 2
61472: MUL
61473: ST_TO_ADDR
61474: GO 61502
// if amount > max then
61476: LD_VAR 0 9
61480: PUSH
61481: LD_VAR 0 4
61485: GREATER
61486: IFFALSE 61502
// r := r / 2 ;
61488: LD_ADDR_VAR 0 7
61492: PUSH
61493: LD_VAR 0 7
61497: PUSH
61498: LD_INT 2
61500: DIVREAL
61501: ST_TO_ADDR
// time := time / r ;
61502: LD_ADDR_VAR 0 8
61506: PUSH
61507: LD_VAR 0 8
61511: PUSH
61512: LD_VAR 0 7
61516: DIVREAL
61517: ST_TO_ADDR
// if time < 0 then
61518: LD_VAR 0 8
61522: PUSH
61523: LD_INT 0
61525: LESS
61526: IFFALSE 61543
// time := time * - 1 ;
61528: LD_ADDR_VAR 0 8
61532: PUSH
61533: LD_VAR 0 8
61537: PUSH
61538: LD_INT 1
61540: NEG
61541: MUL
61542: ST_TO_ADDR
// wait ( time ) ;
61543: LD_VAR 0 8
61547: PPUSH
61548: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
61552: LD_INT 35
61554: PPUSH
61555: LD_INT 875
61557: PPUSH
61558: CALL_OW 12
61562: PPUSH
61563: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
61567: LD_INT 1
61569: PPUSH
61570: LD_INT 5
61572: PPUSH
61573: CALL_OW 12
61577: PPUSH
61578: LD_VAR 0 1
61582: PPUSH
61583: LD_INT 1
61585: PPUSH
61586: CALL_OW 55
// end ;
61590: GO 61400
// end ;
61592: LD_VAR 0 5
61596: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
61597: LD_INT 0
61599: PPUSH
61600: PPUSH
61601: PPUSH
61602: PPUSH
61603: PPUSH
61604: PPUSH
61605: PPUSH
61606: PPUSH
// if not turrets or not factories then
61607: LD_VAR 0 1
61611: NOT
61612: PUSH
61613: LD_VAR 0 2
61617: NOT
61618: OR
61619: IFFALSE 61623
// exit ;
61621: GO 61930
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
61623: LD_ADDR_VAR 0 10
61627: PUSH
61628: LD_INT 5
61630: PUSH
61631: LD_INT 6
61633: PUSH
61634: EMPTY
61635: LIST
61636: LIST
61637: PUSH
61638: LD_INT 2
61640: PUSH
61641: LD_INT 4
61643: PUSH
61644: EMPTY
61645: LIST
61646: LIST
61647: PUSH
61648: LD_INT 3
61650: PUSH
61651: LD_INT 5
61653: PUSH
61654: EMPTY
61655: LIST
61656: LIST
61657: PUSH
61658: EMPTY
61659: LIST
61660: LIST
61661: LIST
61662: PUSH
61663: LD_INT 24
61665: PUSH
61666: LD_INT 25
61668: PUSH
61669: EMPTY
61670: LIST
61671: LIST
61672: PUSH
61673: LD_INT 23
61675: PUSH
61676: LD_INT 27
61678: PUSH
61679: EMPTY
61680: LIST
61681: LIST
61682: PUSH
61683: EMPTY
61684: LIST
61685: LIST
61686: PUSH
61687: LD_INT 42
61689: PUSH
61690: LD_INT 43
61692: PUSH
61693: EMPTY
61694: LIST
61695: LIST
61696: PUSH
61697: LD_INT 44
61699: PUSH
61700: LD_INT 46
61702: PUSH
61703: EMPTY
61704: LIST
61705: LIST
61706: PUSH
61707: LD_INT 45
61709: PUSH
61710: LD_INT 47
61712: PUSH
61713: EMPTY
61714: LIST
61715: LIST
61716: PUSH
61717: EMPTY
61718: LIST
61719: LIST
61720: LIST
61721: PUSH
61722: EMPTY
61723: LIST
61724: LIST
61725: LIST
61726: ST_TO_ADDR
// result := [ ] ;
61727: LD_ADDR_VAR 0 3
61731: PUSH
61732: EMPTY
61733: ST_TO_ADDR
// for i in turrets do
61734: LD_ADDR_VAR 0 4
61738: PUSH
61739: LD_VAR 0 1
61743: PUSH
61744: FOR_IN
61745: IFFALSE 61928
// begin nat := GetNation ( i ) ;
61747: LD_ADDR_VAR 0 7
61751: PUSH
61752: LD_VAR 0 4
61756: PPUSH
61757: CALL_OW 248
61761: ST_TO_ADDR
// weapon := 0 ;
61762: LD_ADDR_VAR 0 8
61766: PUSH
61767: LD_INT 0
61769: ST_TO_ADDR
// if not nat then
61770: LD_VAR 0 7
61774: NOT
61775: IFFALSE 61779
// continue ;
61777: GO 61744
// for j in list [ nat ] do
61779: LD_ADDR_VAR 0 5
61783: PUSH
61784: LD_VAR 0 10
61788: PUSH
61789: LD_VAR 0 7
61793: ARRAY
61794: PUSH
61795: FOR_IN
61796: IFFALSE 61837
// if GetBWeapon ( i ) = j [ 1 ] then
61798: LD_VAR 0 4
61802: PPUSH
61803: CALL_OW 269
61807: PUSH
61808: LD_VAR 0 5
61812: PUSH
61813: LD_INT 1
61815: ARRAY
61816: EQUAL
61817: IFFALSE 61835
// begin weapon := j [ 2 ] ;
61819: LD_ADDR_VAR 0 8
61823: PUSH
61824: LD_VAR 0 5
61828: PUSH
61829: LD_INT 2
61831: ARRAY
61832: ST_TO_ADDR
// break ;
61833: GO 61837
// end ;
61835: GO 61795
61837: POP
61838: POP
// if not weapon then
61839: LD_VAR 0 8
61843: NOT
61844: IFFALSE 61848
// continue ;
61846: GO 61744
// for k in factories do
61848: LD_ADDR_VAR 0 6
61852: PUSH
61853: LD_VAR 0 2
61857: PUSH
61858: FOR_IN
61859: IFFALSE 61924
// begin weapons := AvailableWeaponList ( k ) ;
61861: LD_ADDR_VAR 0 9
61865: PUSH
61866: LD_VAR 0 6
61870: PPUSH
61871: CALL_OW 478
61875: ST_TO_ADDR
// if not weapons then
61876: LD_VAR 0 9
61880: NOT
61881: IFFALSE 61885
// continue ;
61883: GO 61858
// if weapon in weapons then
61885: LD_VAR 0 8
61889: PUSH
61890: LD_VAR 0 9
61894: IN
61895: IFFALSE 61922
// begin result := [ i , weapon ] ;
61897: LD_ADDR_VAR 0 3
61901: PUSH
61902: LD_VAR 0 4
61906: PUSH
61907: LD_VAR 0 8
61911: PUSH
61912: EMPTY
61913: LIST
61914: LIST
61915: ST_TO_ADDR
// exit ;
61916: POP
61917: POP
61918: POP
61919: POP
61920: GO 61930
// end ; end ;
61922: GO 61858
61924: POP
61925: POP
// end ;
61926: GO 61744
61928: POP
61929: POP
// end ;
61930: LD_VAR 0 3
61934: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
61935: LD_INT 0
61937: PPUSH
// if not side or side > 8 then
61938: LD_VAR 0 3
61942: NOT
61943: PUSH
61944: LD_VAR 0 3
61948: PUSH
61949: LD_INT 8
61951: GREATER
61952: OR
61953: IFFALSE 61957
// exit ;
61955: GO 62016
// if not range then
61957: LD_VAR 0 4
61961: NOT
61962: IFFALSE 61973
// range := - 12 ;
61964: LD_ADDR_VAR 0 4
61968: PUSH
61969: LD_INT 12
61971: NEG
61972: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
61973: LD_VAR 0 1
61977: PPUSH
61978: LD_VAR 0 2
61982: PPUSH
61983: LD_VAR 0 3
61987: PPUSH
61988: LD_VAR 0 4
61992: PPUSH
61993: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
61997: LD_VAR 0 1
62001: PPUSH
62002: LD_VAR 0 2
62006: PPUSH
62007: LD_VAR 0 3
62011: PPUSH
62012: CALL_OW 331
// end ;
62016: LD_VAR 0 5
62020: RET
// export function Video ( mode ) ; begin
62021: LD_INT 0
62023: PPUSH
// ingame_video = mode ;
62024: LD_ADDR_OWVAR 52
62028: PUSH
62029: LD_VAR 0 1
62033: ST_TO_ADDR
// interface_hidden = mode ;
62034: LD_ADDR_OWVAR 54
62038: PUSH
62039: LD_VAR 0 1
62043: ST_TO_ADDR
// end ;
62044: LD_VAR 0 2
62048: RET
// export function Join ( array , element ) ; begin
62049: LD_INT 0
62051: PPUSH
// result := array ^ element ;
62052: LD_ADDR_VAR 0 3
62056: PUSH
62057: LD_VAR 0 1
62061: PUSH
62062: LD_VAR 0 2
62066: ADD
62067: ST_TO_ADDR
// end ;
62068: LD_VAR 0 3
62072: RET
// export function JoinUnion ( array , element ) ; begin
62073: LD_INT 0
62075: PPUSH
// result := array union element ;
62076: LD_ADDR_VAR 0 3
62080: PUSH
62081: LD_VAR 0 1
62085: PUSH
62086: LD_VAR 0 2
62090: UNION
62091: ST_TO_ADDR
// end ;
62092: LD_VAR 0 3
62096: RET
// export function GetBehemoths ( side ) ; begin
62097: LD_INT 0
62099: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
62100: LD_ADDR_VAR 0 2
62104: PUSH
62105: LD_INT 22
62107: PUSH
62108: LD_VAR 0 1
62112: PUSH
62113: EMPTY
62114: LIST
62115: LIST
62116: PUSH
62117: LD_INT 31
62119: PUSH
62120: LD_INT 25
62122: PUSH
62123: EMPTY
62124: LIST
62125: LIST
62126: PUSH
62127: EMPTY
62128: LIST
62129: LIST
62130: PPUSH
62131: CALL_OW 69
62135: ST_TO_ADDR
// end ;
62136: LD_VAR 0 2
62140: RET
// export function Shuffle ( array ) ; var i , index ; begin
62141: LD_INT 0
62143: PPUSH
62144: PPUSH
62145: PPUSH
// result := [ ] ;
62146: LD_ADDR_VAR 0 2
62150: PUSH
62151: EMPTY
62152: ST_TO_ADDR
// if not array then
62153: LD_VAR 0 1
62157: NOT
62158: IFFALSE 62162
// exit ;
62160: GO 62261
// Randomize ;
62162: CALL_OW 10
// for i = array downto 1 do
62166: LD_ADDR_VAR 0 3
62170: PUSH
62171: DOUBLE
62172: LD_VAR 0 1
62176: INC
62177: ST_TO_ADDR
62178: LD_INT 1
62180: PUSH
62181: FOR_DOWNTO
62182: IFFALSE 62259
// begin index := rand ( 1 , array ) ;
62184: LD_ADDR_VAR 0 4
62188: PUSH
62189: LD_INT 1
62191: PPUSH
62192: LD_VAR 0 1
62196: PPUSH
62197: CALL_OW 12
62201: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
62202: LD_ADDR_VAR 0 2
62206: PUSH
62207: LD_VAR 0 2
62211: PPUSH
62212: LD_VAR 0 2
62216: PUSH
62217: LD_INT 1
62219: PLUS
62220: PPUSH
62221: LD_VAR 0 1
62225: PUSH
62226: LD_VAR 0 4
62230: ARRAY
62231: PPUSH
62232: CALL_OW 2
62236: ST_TO_ADDR
// array := Delete ( array , index ) ;
62237: LD_ADDR_VAR 0 1
62241: PUSH
62242: LD_VAR 0 1
62246: PPUSH
62247: LD_VAR 0 4
62251: PPUSH
62252: CALL_OW 3
62256: ST_TO_ADDR
// end ;
62257: GO 62181
62259: POP
62260: POP
// end ;
62261: LD_VAR 0 2
62265: RET
// export function GetBaseMaterials ( base ) ; begin
62266: LD_INT 0
62268: PPUSH
// result := [ 0 , 0 , 0 ] ;
62269: LD_ADDR_VAR 0 2
62273: PUSH
62274: LD_INT 0
62276: PUSH
62277: LD_INT 0
62279: PUSH
62280: LD_INT 0
62282: PUSH
62283: EMPTY
62284: LIST
62285: LIST
62286: LIST
62287: ST_TO_ADDR
// if not base then
62288: LD_VAR 0 1
62292: NOT
62293: IFFALSE 62297
// exit ;
62295: GO 62346
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
62297: LD_ADDR_VAR 0 2
62301: PUSH
62302: LD_VAR 0 1
62306: PPUSH
62307: LD_INT 1
62309: PPUSH
62310: CALL_OW 275
62314: PUSH
62315: LD_VAR 0 1
62319: PPUSH
62320: LD_INT 2
62322: PPUSH
62323: CALL_OW 275
62327: PUSH
62328: LD_VAR 0 1
62332: PPUSH
62333: LD_INT 3
62335: PPUSH
62336: CALL_OW 275
62340: PUSH
62341: EMPTY
62342: LIST
62343: LIST
62344: LIST
62345: ST_TO_ADDR
// end ; end_of_file
62346: LD_VAR 0 2
62350: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
62351: GO 62353
62353: DISABLE
// begin ru_radar := 98 ;
62354: LD_ADDR_EXP 29
62358: PUSH
62359: LD_INT 98
62361: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
62362: LD_ADDR_EXP 30
62366: PUSH
62367: LD_INT 89
62369: ST_TO_ADDR
// us_hack := 99 ;
62370: LD_ADDR_EXP 31
62374: PUSH
62375: LD_INT 99
62377: ST_TO_ADDR
// us_artillery := 97 ;
62378: LD_ADDR_EXP 32
62382: PUSH
62383: LD_INT 97
62385: ST_TO_ADDR
// ar_bio_bomb := 91 ;
62386: LD_ADDR_EXP 33
62390: PUSH
62391: LD_INT 91
62393: ST_TO_ADDR
// end ; end_of_file
62394: END
// export skirmish , debug_mc ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_teleport_exit_set , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver , mc_class , mc_class_case_use ; export function InitMacro ; var i ; begin
62395: LD_INT 0
62397: PPUSH
62398: PPUSH
// skirmish := false ;
62399: LD_ADDR_EXP 34
62403: PUSH
62404: LD_INT 0
62406: ST_TO_ADDR
// debug_mc := false ;
62407: LD_ADDR_EXP 35
62411: PUSH
62412: LD_INT 0
62414: ST_TO_ADDR
// mc_bases := [ ] ;
62415: LD_ADDR_EXP 36
62419: PUSH
62420: EMPTY
62421: ST_TO_ADDR
// mc_sides := [ ] ;
62422: LD_ADDR_EXP 62
62426: PUSH
62427: EMPTY
62428: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
62429: LD_ADDR_EXP 37
62433: PUSH
62434: EMPTY
62435: ST_TO_ADDR
// mc_building_repairs := [ ] ;
62436: LD_ADDR_EXP 38
62440: PUSH
62441: EMPTY
62442: ST_TO_ADDR
// mc_need_heal := [ ] ;
62443: LD_ADDR_EXP 39
62447: PUSH
62448: EMPTY
62449: ST_TO_ADDR
// mc_healers := [ ] ;
62450: LD_ADDR_EXP 40
62454: PUSH
62455: EMPTY
62456: ST_TO_ADDR
// mc_build_list := [ ] ;
62457: LD_ADDR_EXP 41
62461: PUSH
62462: EMPTY
62463: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
62464: LD_ADDR_EXP 68
62468: PUSH
62469: EMPTY
62470: ST_TO_ADDR
// mc_builders := [ ] ;
62471: LD_ADDR_EXP 42
62475: PUSH
62476: EMPTY
62477: ST_TO_ADDR
// mc_construct_list := [ ] ;
62478: LD_ADDR_EXP 43
62482: PUSH
62483: EMPTY
62484: ST_TO_ADDR
// mc_turret_list := [ ] ;
62485: LD_ADDR_EXP 44
62489: PUSH
62490: EMPTY
62491: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
62492: LD_ADDR_EXP 45
62496: PUSH
62497: EMPTY
62498: ST_TO_ADDR
// mc_miners := [ ] ;
62499: LD_ADDR_EXP 50
62503: PUSH
62504: EMPTY
62505: ST_TO_ADDR
// mc_mines := [ ] ;
62506: LD_ADDR_EXP 49
62510: PUSH
62511: EMPTY
62512: ST_TO_ADDR
// mc_minefields := [ ] ;
62513: LD_ADDR_EXP 51
62517: PUSH
62518: EMPTY
62519: ST_TO_ADDR
// mc_crates := [ ] ;
62520: LD_ADDR_EXP 52
62524: PUSH
62525: EMPTY
62526: ST_TO_ADDR
// mc_crates_collector := [ ] ;
62527: LD_ADDR_EXP 53
62531: PUSH
62532: EMPTY
62533: ST_TO_ADDR
// mc_crates_area := [ ] ;
62534: LD_ADDR_EXP 54
62538: PUSH
62539: EMPTY
62540: ST_TO_ADDR
// mc_vehicles := [ ] ;
62541: LD_ADDR_EXP 55
62545: PUSH
62546: EMPTY
62547: ST_TO_ADDR
// mc_attack := [ ] ;
62548: LD_ADDR_EXP 56
62552: PUSH
62553: EMPTY
62554: ST_TO_ADDR
// mc_produce := [ ] ;
62555: LD_ADDR_EXP 57
62559: PUSH
62560: EMPTY
62561: ST_TO_ADDR
// mc_defender := [ ] ;
62562: LD_ADDR_EXP 58
62566: PUSH
62567: EMPTY
62568: ST_TO_ADDR
// mc_parking := [ ] ;
62569: LD_ADDR_EXP 60
62573: PUSH
62574: EMPTY
62575: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
62576: LD_ADDR_EXP 46
62580: PUSH
62581: EMPTY
62582: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
62583: LD_ADDR_EXP 48
62587: PUSH
62588: EMPTY
62589: ST_TO_ADDR
// mc_scan := [ ] ;
62590: LD_ADDR_EXP 59
62594: PUSH
62595: EMPTY
62596: ST_TO_ADDR
// mc_scan_area := [ ] ;
62597: LD_ADDR_EXP 61
62601: PUSH
62602: EMPTY
62603: ST_TO_ADDR
// mc_tech := [ ] ;
62604: LD_ADDR_EXP 63
62608: PUSH
62609: EMPTY
62610: ST_TO_ADDR
// mc_class := [ ] ;
62611: LD_ADDR_EXP 77
62615: PUSH
62616: EMPTY
62617: ST_TO_ADDR
// mc_class_case_use := [ ] ;
62618: LD_ADDR_EXP 78
62622: PUSH
62623: EMPTY
62624: ST_TO_ADDR
// end ;
62625: LD_VAR 0 1
62629: RET
// export function MC_Kill ( base ) ; begin
62630: LD_INT 0
62632: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
62633: LD_ADDR_EXP 36
62637: PUSH
62638: LD_EXP 36
62642: PPUSH
62643: LD_VAR 0 1
62647: PPUSH
62648: EMPTY
62649: PPUSH
62650: CALL_OW 1
62654: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
62655: LD_ADDR_EXP 37
62659: PUSH
62660: LD_EXP 37
62664: PPUSH
62665: LD_VAR 0 1
62669: PPUSH
62670: EMPTY
62671: PPUSH
62672: CALL_OW 1
62676: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
62677: LD_ADDR_EXP 38
62681: PUSH
62682: LD_EXP 38
62686: PPUSH
62687: LD_VAR 0 1
62691: PPUSH
62692: EMPTY
62693: PPUSH
62694: CALL_OW 1
62698: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
62699: LD_ADDR_EXP 39
62703: PUSH
62704: LD_EXP 39
62708: PPUSH
62709: LD_VAR 0 1
62713: PPUSH
62714: EMPTY
62715: PPUSH
62716: CALL_OW 1
62720: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
62721: LD_ADDR_EXP 40
62725: PUSH
62726: LD_EXP 40
62730: PPUSH
62731: LD_VAR 0 1
62735: PPUSH
62736: EMPTY
62737: PPUSH
62738: CALL_OW 1
62742: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
62743: LD_ADDR_EXP 41
62747: PUSH
62748: LD_EXP 41
62752: PPUSH
62753: LD_VAR 0 1
62757: PPUSH
62758: EMPTY
62759: PPUSH
62760: CALL_OW 1
62764: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
62765: LD_ADDR_EXP 42
62769: PUSH
62770: LD_EXP 42
62774: PPUSH
62775: LD_VAR 0 1
62779: PPUSH
62780: EMPTY
62781: PPUSH
62782: CALL_OW 1
62786: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
62787: LD_ADDR_EXP 43
62791: PUSH
62792: LD_EXP 43
62796: PPUSH
62797: LD_VAR 0 1
62801: PPUSH
62802: EMPTY
62803: PPUSH
62804: CALL_OW 1
62808: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
62809: LD_ADDR_EXP 44
62813: PUSH
62814: LD_EXP 44
62818: PPUSH
62819: LD_VAR 0 1
62823: PPUSH
62824: EMPTY
62825: PPUSH
62826: CALL_OW 1
62830: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
62831: LD_ADDR_EXP 45
62835: PUSH
62836: LD_EXP 45
62840: PPUSH
62841: LD_VAR 0 1
62845: PPUSH
62846: EMPTY
62847: PPUSH
62848: CALL_OW 1
62852: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
62853: LD_ADDR_EXP 46
62857: PUSH
62858: LD_EXP 46
62862: PPUSH
62863: LD_VAR 0 1
62867: PPUSH
62868: EMPTY
62869: PPUSH
62870: CALL_OW 1
62874: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
62875: LD_ADDR_EXP 47
62879: PUSH
62880: LD_EXP 47
62884: PPUSH
62885: LD_VAR 0 1
62889: PPUSH
62890: LD_INT 0
62892: PPUSH
62893: CALL_OW 1
62897: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
62898: LD_ADDR_EXP 48
62902: PUSH
62903: LD_EXP 48
62907: PPUSH
62908: LD_VAR 0 1
62912: PPUSH
62913: EMPTY
62914: PPUSH
62915: CALL_OW 1
62919: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
62920: LD_ADDR_EXP 49
62924: PUSH
62925: LD_EXP 49
62929: PPUSH
62930: LD_VAR 0 1
62934: PPUSH
62935: EMPTY
62936: PPUSH
62937: CALL_OW 1
62941: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
62942: LD_ADDR_EXP 50
62946: PUSH
62947: LD_EXP 50
62951: PPUSH
62952: LD_VAR 0 1
62956: PPUSH
62957: EMPTY
62958: PPUSH
62959: CALL_OW 1
62963: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
62964: LD_ADDR_EXP 51
62968: PUSH
62969: LD_EXP 51
62973: PPUSH
62974: LD_VAR 0 1
62978: PPUSH
62979: EMPTY
62980: PPUSH
62981: CALL_OW 1
62985: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
62986: LD_ADDR_EXP 52
62990: PUSH
62991: LD_EXP 52
62995: PPUSH
62996: LD_VAR 0 1
63000: PPUSH
63001: EMPTY
63002: PPUSH
63003: CALL_OW 1
63007: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
63008: LD_ADDR_EXP 53
63012: PUSH
63013: LD_EXP 53
63017: PPUSH
63018: LD_VAR 0 1
63022: PPUSH
63023: EMPTY
63024: PPUSH
63025: CALL_OW 1
63029: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
63030: LD_ADDR_EXP 54
63034: PUSH
63035: LD_EXP 54
63039: PPUSH
63040: LD_VAR 0 1
63044: PPUSH
63045: EMPTY
63046: PPUSH
63047: CALL_OW 1
63051: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
63052: LD_ADDR_EXP 55
63056: PUSH
63057: LD_EXP 55
63061: PPUSH
63062: LD_VAR 0 1
63066: PPUSH
63067: EMPTY
63068: PPUSH
63069: CALL_OW 1
63073: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
63074: LD_ADDR_EXP 56
63078: PUSH
63079: LD_EXP 56
63083: PPUSH
63084: LD_VAR 0 1
63088: PPUSH
63089: EMPTY
63090: PPUSH
63091: CALL_OW 1
63095: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
63096: LD_ADDR_EXP 57
63100: PUSH
63101: LD_EXP 57
63105: PPUSH
63106: LD_VAR 0 1
63110: PPUSH
63111: EMPTY
63112: PPUSH
63113: CALL_OW 1
63117: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
63118: LD_ADDR_EXP 58
63122: PUSH
63123: LD_EXP 58
63127: PPUSH
63128: LD_VAR 0 1
63132: PPUSH
63133: EMPTY
63134: PPUSH
63135: CALL_OW 1
63139: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
63140: LD_ADDR_EXP 59
63144: PUSH
63145: LD_EXP 59
63149: PPUSH
63150: LD_VAR 0 1
63154: PPUSH
63155: EMPTY
63156: PPUSH
63157: CALL_OW 1
63161: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
63162: LD_ADDR_EXP 60
63166: PUSH
63167: LD_EXP 60
63171: PPUSH
63172: LD_VAR 0 1
63176: PPUSH
63177: EMPTY
63178: PPUSH
63179: CALL_OW 1
63183: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
63184: LD_ADDR_EXP 61
63188: PUSH
63189: LD_EXP 61
63193: PPUSH
63194: LD_VAR 0 1
63198: PPUSH
63199: EMPTY
63200: PPUSH
63201: CALL_OW 1
63205: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
63206: LD_ADDR_EXP 63
63210: PUSH
63211: LD_EXP 63
63215: PPUSH
63216: LD_VAR 0 1
63220: PPUSH
63221: EMPTY
63222: PPUSH
63223: CALL_OW 1
63227: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
63228: LD_ADDR_EXP 65
63232: PUSH
63233: LD_EXP 65
63237: PPUSH
63238: LD_VAR 0 1
63242: PPUSH
63243: EMPTY
63244: PPUSH
63245: CALL_OW 1
63249: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
63250: LD_ADDR_EXP 66
63254: PUSH
63255: LD_EXP 66
63259: PPUSH
63260: LD_VAR 0 1
63264: PPUSH
63265: EMPTY
63266: PPUSH
63267: CALL_OW 1
63271: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
63272: LD_ADDR_EXP 67
63276: PUSH
63277: LD_EXP 67
63281: PPUSH
63282: LD_VAR 0 1
63286: PPUSH
63287: EMPTY
63288: PPUSH
63289: CALL_OW 1
63293: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
63294: LD_ADDR_EXP 68
63298: PUSH
63299: LD_EXP 68
63303: PPUSH
63304: LD_VAR 0 1
63308: PPUSH
63309: EMPTY
63310: PPUSH
63311: CALL_OW 1
63315: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
63316: LD_ADDR_EXP 69
63320: PUSH
63321: LD_EXP 69
63325: PPUSH
63326: LD_VAR 0 1
63330: PPUSH
63331: EMPTY
63332: PPUSH
63333: CALL_OW 1
63337: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
63338: LD_ADDR_EXP 70
63342: PUSH
63343: LD_EXP 70
63347: PPUSH
63348: LD_VAR 0 1
63352: PPUSH
63353: EMPTY
63354: PPUSH
63355: CALL_OW 1
63359: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
63360: LD_ADDR_EXP 71
63364: PUSH
63365: LD_EXP 71
63369: PPUSH
63370: LD_VAR 0 1
63374: PPUSH
63375: EMPTY
63376: PPUSH
63377: CALL_OW 1
63381: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
63382: LD_ADDR_EXP 72
63386: PUSH
63387: LD_EXP 72
63391: PPUSH
63392: LD_VAR 0 1
63396: PPUSH
63397: EMPTY
63398: PPUSH
63399: CALL_OW 1
63403: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
63404: LD_ADDR_EXP 73
63408: PUSH
63409: LD_EXP 73
63413: PPUSH
63414: LD_VAR 0 1
63418: PPUSH
63419: EMPTY
63420: PPUSH
63421: CALL_OW 1
63425: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
63426: LD_ADDR_EXP 74
63430: PUSH
63431: LD_EXP 74
63435: PPUSH
63436: LD_VAR 0 1
63440: PPUSH
63441: EMPTY
63442: PPUSH
63443: CALL_OW 1
63447: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
63448: LD_ADDR_EXP 75
63452: PUSH
63453: LD_EXP 75
63457: PPUSH
63458: LD_VAR 0 1
63462: PPUSH
63463: EMPTY
63464: PPUSH
63465: CALL_OW 1
63469: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
63470: LD_ADDR_EXP 76
63474: PUSH
63475: LD_EXP 76
63479: PPUSH
63480: LD_VAR 0 1
63484: PPUSH
63485: EMPTY
63486: PPUSH
63487: CALL_OW 1
63491: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
63492: LD_ADDR_EXP 77
63496: PUSH
63497: LD_EXP 77
63501: PPUSH
63502: LD_VAR 0 1
63506: PPUSH
63507: EMPTY
63508: PPUSH
63509: CALL_OW 1
63513: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
63514: LD_ADDR_EXP 78
63518: PUSH
63519: LD_EXP 78
63523: PPUSH
63524: LD_VAR 0 1
63528: PPUSH
63529: LD_INT 0
63531: PPUSH
63532: CALL_OW 1
63536: ST_TO_ADDR
// end ;
63537: LD_VAR 0 2
63541: RET
// export function MC_Add ( side , units ) ; var base ; begin
63542: LD_INT 0
63544: PPUSH
63545: PPUSH
// base := mc_bases + 1 ;
63546: LD_ADDR_VAR 0 4
63550: PUSH
63551: LD_EXP 36
63555: PUSH
63556: LD_INT 1
63558: PLUS
63559: ST_TO_ADDR
// mc_sides := Replace ( mc_sides , base , side ) ;
63560: LD_ADDR_EXP 62
63564: PUSH
63565: LD_EXP 62
63569: PPUSH
63570: LD_VAR 0 4
63574: PPUSH
63575: LD_VAR 0 1
63579: PPUSH
63580: CALL_OW 1
63584: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , base , units ) ;
63585: LD_ADDR_EXP 36
63589: PUSH
63590: LD_EXP 36
63594: PPUSH
63595: LD_VAR 0 4
63599: PPUSH
63600: LD_VAR 0 2
63604: PPUSH
63605: CALL_OW 1
63609: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
63610: LD_ADDR_EXP 37
63614: PUSH
63615: LD_EXP 37
63619: PPUSH
63620: LD_VAR 0 4
63624: PPUSH
63625: EMPTY
63626: PPUSH
63627: CALL_OW 1
63631: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
63632: LD_ADDR_EXP 38
63636: PUSH
63637: LD_EXP 38
63641: PPUSH
63642: LD_VAR 0 4
63646: PPUSH
63647: EMPTY
63648: PPUSH
63649: CALL_OW 1
63653: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
63654: LD_ADDR_EXP 39
63658: PUSH
63659: LD_EXP 39
63663: PPUSH
63664: LD_VAR 0 4
63668: PPUSH
63669: EMPTY
63670: PPUSH
63671: CALL_OW 1
63675: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
63676: LD_ADDR_EXP 40
63680: PUSH
63681: LD_EXP 40
63685: PPUSH
63686: LD_VAR 0 4
63690: PPUSH
63691: EMPTY
63692: PPUSH
63693: CALL_OW 1
63697: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
63698: LD_ADDR_EXP 41
63702: PUSH
63703: LD_EXP 41
63707: PPUSH
63708: LD_VAR 0 4
63712: PPUSH
63713: EMPTY
63714: PPUSH
63715: CALL_OW 1
63719: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
63720: LD_ADDR_EXP 42
63724: PUSH
63725: LD_EXP 42
63729: PPUSH
63730: LD_VAR 0 4
63734: PPUSH
63735: EMPTY
63736: PPUSH
63737: CALL_OW 1
63741: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
63742: LD_ADDR_EXP 43
63746: PUSH
63747: LD_EXP 43
63751: PPUSH
63752: LD_VAR 0 4
63756: PPUSH
63757: EMPTY
63758: PPUSH
63759: CALL_OW 1
63763: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
63764: LD_ADDR_EXP 44
63768: PUSH
63769: LD_EXP 44
63773: PPUSH
63774: LD_VAR 0 4
63778: PPUSH
63779: EMPTY
63780: PPUSH
63781: CALL_OW 1
63785: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
63786: LD_ADDR_EXP 45
63790: PUSH
63791: LD_EXP 45
63795: PPUSH
63796: LD_VAR 0 4
63800: PPUSH
63801: EMPTY
63802: PPUSH
63803: CALL_OW 1
63807: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
63808: LD_ADDR_EXP 46
63812: PUSH
63813: LD_EXP 46
63817: PPUSH
63818: LD_VAR 0 4
63822: PPUSH
63823: EMPTY
63824: PPUSH
63825: CALL_OW 1
63829: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
63830: LD_ADDR_EXP 47
63834: PUSH
63835: LD_EXP 47
63839: PPUSH
63840: LD_VAR 0 4
63844: PPUSH
63845: LD_INT 0
63847: PPUSH
63848: CALL_OW 1
63852: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
63853: LD_ADDR_EXP 48
63857: PUSH
63858: LD_EXP 48
63862: PPUSH
63863: LD_VAR 0 4
63867: PPUSH
63868: EMPTY
63869: PPUSH
63870: CALL_OW 1
63874: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
63875: LD_ADDR_EXP 49
63879: PUSH
63880: LD_EXP 49
63884: PPUSH
63885: LD_VAR 0 4
63889: PPUSH
63890: EMPTY
63891: PPUSH
63892: CALL_OW 1
63896: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
63897: LD_ADDR_EXP 50
63901: PUSH
63902: LD_EXP 50
63906: PPUSH
63907: LD_VAR 0 4
63911: PPUSH
63912: EMPTY
63913: PPUSH
63914: CALL_OW 1
63918: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
63919: LD_ADDR_EXP 51
63923: PUSH
63924: LD_EXP 51
63928: PPUSH
63929: LD_VAR 0 4
63933: PPUSH
63934: EMPTY
63935: PPUSH
63936: CALL_OW 1
63940: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
63941: LD_ADDR_EXP 52
63945: PUSH
63946: LD_EXP 52
63950: PPUSH
63951: LD_VAR 0 4
63955: PPUSH
63956: EMPTY
63957: PPUSH
63958: CALL_OW 1
63962: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
63963: LD_ADDR_EXP 53
63967: PUSH
63968: LD_EXP 53
63972: PPUSH
63973: LD_VAR 0 4
63977: PPUSH
63978: EMPTY
63979: PPUSH
63980: CALL_OW 1
63984: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
63985: LD_ADDR_EXP 54
63989: PUSH
63990: LD_EXP 54
63994: PPUSH
63995: LD_VAR 0 4
63999: PPUSH
64000: EMPTY
64001: PPUSH
64002: CALL_OW 1
64006: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
64007: LD_ADDR_EXP 55
64011: PUSH
64012: LD_EXP 55
64016: PPUSH
64017: LD_VAR 0 4
64021: PPUSH
64022: EMPTY
64023: PPUSH
64024: CALL_OW 1
64028: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
64029: LD_ADDR_EXP 56
64033: PUSH
64034: LD_EXP 56
64038: PPUSH
64039: LD_VAR 0 4
64043: PPUSH
64044: EMPTY
64045: PPUSH
64046: CALL_OW 1
64050: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
64051: LD_ADDR_EXP 57
64055: PUSH
64056: LD_EXP 57
64060: PPUSH
64061: LD_VAR 0 4
64065: PPUSH
64066: EMPTY
64067: PPUSH
64068: CALL_OW 1
64072: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
64073: LD_ADDR_EXP 58
64077: PUSH
64078: LD_EXP 58
64082: PPUSH
64083: LD_VAR 0 4
64087: PPUSH
64088: EMPTY
64089: PPUSH
64090: CALL_OW 1
64094: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
64095: LD_ADDR_EXP 59
64099: PUSH
64100: LD_EXP 59
64104: PPUSH
64105: LD_VAR 0 4
64109: PPUSH
64110: EMPTY
64111: PPUSH
64112: CALL_OW 1
64116: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
64117: LD_ADDR_EXP 60
64121: PUSH
64122: LD_EXP 60
64126: PPUSH
64127: LD_VAR 0 4
64131: PPUSH
64132: EMPTY
64133: PPUSH
64134: CALL_OW 1
64138: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
64139: LD_ADDR_EXP 61
64143: PUSH
64144: LD_EXP 61
64148: PPUSH
64149: LD_VAR 0 4
64153: PPUSH
64154: EMPTY
64155: PPUSH
64156: CALL_OW 1
64160: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
64161: LD_ADDR_EXP 63
64165: PUSH
64166: LD_EXP 63
64170: PPUSH
64171: LD_VAR 0 4
64175: PPUSH
64176: EMPTY
64177: PPUSH
64178: CALL_OW 1
64182: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
64183: LD_ADDR_EXP 65
64187: PUSH
64188: LD_EXP 65
64192: PPUSH
64193: LD_VAR 0 4
64197: PPUSH
64198: EMPTY
64199: PPUSH
64200: CALL_OW 1
64204: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
64205: LD_ADDR_EXP 66
64209: PUSH
64210: LD_EXP 66
64214: PPUSH
64215: LD_VAR 0 4
64219: PPUSH
64220: EMPTY
64221: PPUSH
64222: CALL_OW 1
64226: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
64227: LD_ADDR_EXP 67
64231: PUSH
64232: LD_EXP 67
64236: PPUSH
64237: LD_VAR 0 4
64241: PPUSH
64242: EMPTY
64243: PPUSH
64244: CALL_OW 1
64248: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
64249: LD_ADDR_EXP 68
64253: PUSH
64254: LD_EXP 68
64258: PPUSH
64259: LD_VAR 0 4
64263: PPUSH
64264: EMPTY
64265: PPUSH
64266: CALL_OW 1
64270: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
64271: LD_ADDR_EXP 69
64275: PUSH
64276: LD_EXP 69
64280: PPUSH
64281: LD_VAR 0 4
64285: PPUSH
64286: EMPTY
64287: PPUSH
64288: CALL_OW 1
64292: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
64293: LD_ADDR_EXP 70
64297: PUSH
64298: LD_EXP 70
64302: PPUSH
64303: LD_VAR 0 4
64307: PPUSH
64308: EMPTY
64309: PPUSH
64310: CALL_OW 1
64314: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
64315: LD_ADDR_EXP 71
64319: PUSH
64320: LD_EXP 71
64324: PPUSH
64325: LD_VAR 0 4
64329: PPUSH
64330: EMPTY
64331: PPUSH
64332: CALL_OW 1
64336: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
64337: LD_ADDR_EXP 72
64341: PUSH
64342: LD_EXP 72
64346: PPUSH
64347: LD_VAR 0 4
64351: PPUSH
64352: EMPTY
64353: PPUSH
64354: CALL_OW 1
64358: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
64359: LD_ADDR_EXP 73
64363: PUSH
64364: LD_EXP 73
64368: PPUSH
64369: LD_VAR 0 4
64373: PPUSH
64374: EMPTY
64375: PPUSH
64376: CALL_OW 1
64380: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
64381: LD_ADDR_EXP 74
64385: PUSH
64386: LD_EXP 74
64390: PPUSH
64391: LD_VAR 0 4
64395: PPUSH
64396: EMPTY
64397: PPUSH
64398: CALL_OW 1
64402: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
64403: LD_ADDR_EXP 75
64407: PUSH
64408: LD_EXP 75
64412: PPUSH
64413: LD_VAR 0 4
64417: PPUSH
64418: EMPTY
64419: PPUSH
64420: CALL_OW 1
64424: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
64425: LD_ADDR_EXP 76
64429: PUSH
64430: LD_EXP 76
64434: PPUSH
64435: LD_VAR 0 4
64439: PPUSH
64440: EMPTY
64441: PPUSH
64442: CALL_OW 1
64446: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
64447: LD_ADDR_EXP 77
64451: PUSH
64452: LD_EXP 77
64456: PPUSH
64457: LD_VAR 0 4
64461: PPUSH
64462: EMPTY
64463: PPUSH
64464: CALL_OW 1
64468: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
64469: LD_ADDR_EXP 78
64473: PUSH
64474: LD_EXP 78
64478: PPUSH
64479: LD_VAR 0 4
64483: PPUSH
64484: LD_INT 0
64486: PPUSH
64487: CALL_OW 1
64491: ST_TO_ADDR
// result := base ;
64492: LD_ADDR_VAR 0 3
64496: PUSH
64497: LD_VAR 0 4
64501: ST_TO_ADDR
// end ;
64502: LD_VAR 0 3
64506: RET
// export function MC_Start ( ) ; var i ; begin
64507: LD_INT 0
64509: PPUSH
64510: PPUSH
// for i = 1 to mc_bases do
64511: LD_ADDR_VAR 0 2
64515: PUSH
64516: DOUBLE
64517: LD_INT 1
64519: DEC
64520: ST_TO_ADDR
64521: LD_EXP 36
64525: PUSH
64526: FOR_TO
64527: IFFALSE 65604
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff 0 ) ;
64529: LD_ADDR_EXP 36
64533: PUSH
64534: LD_EXP 36
64538: PPUSH
64539: LD_VAR 0 2
64543: PPUSH
64544: LD_EXP 36
64548: PUSH
64549: LD_VAR 0 2
64553: ARRAY
64554: PUSH
64555: LD_INT 0
64557: DIFF
64558: PPUSH
64559: CALL_OW 1
64563: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
64564: LD_ADDR_EXP 37
64568: PUSH
64569: LD_EXP 37
64573: PPUSH
64574: LD_VAR 0 2
64578: PPUSH
64579: EMPTY
64580: PPUSH
64581: CALL_OW 1
64585: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
64586: LD_ADDR_EXP 38
64590: PUSH
64591: LD_EXP 38
64595: PPUSH
64596: LD_VAR 0 2
64600: PPUSH
64601: EMPTY
64602: PPUSH
64603: CALL_OW 1
64607: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
64608: LD_ADDR_EXP 39
64612: PUSH
64613: LD_EXP 39
64617: PPUSH
64618: LD_VAR 0 2
64622: PPUSH
64623: EMPTY
64624: PPUSH
64625: CALL_OW 1
64629: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
64630: LD_ADDR_EXP 40
64634: PUSH
64635: LD_EXP 40
64639: PPUSH
64640: LD_VAR 0 2
64644: PPUSH
64645: EMPTY
64646: PUSH
64647: EMPTY
64648: PUSH
64649: EMPTY
64650: LIST
64651: LIST
64652: PPUSH
64653: CALL_OW 1
64657: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
64658: LD_ADDR_EXP 41
64662: PUSH
64663: LD_EXP 41
64667: PPUSH
64668: LD_VAR 0 2
64672: PPUSH
64673: EMPTY
64674: PPUSH
64675: CALL_OW 1
64679: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
64680: LD_ADDR_EXP 68
64684: PUSH
64685: LD_EXP 68
64689: PPUSH
64690: LD_VAR 0 2
64694: PPUSH
64695: EMPTY
64696: PPUSH
64697: CALL_OW 1
64701: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
64702: LD_ADDR_EXP 42
64706: PUSH
64707: LD_EXP 42
64711: PPUSH
64712: LD_VAR 0 2
64716: PPUSH
64717: EMPTY
64718: PPUSH
64719: CALL_OW 1
64723: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
64724: LD_ADDR_EXP 43
64728: PUSH
64729: LD_EXP 43
64733: PPUSH
64734: LD_VAR 0 2
64738: PPUSH
64739: EMPTY
64740: PPUSH
64741: CALL_OW 1
64745: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ) ;
64746: LD_ADDR_EXP 44
64750: PUSH
64751: LD_EXP 44
64755: PPUSH
64756: LD_VAR 0 2
64760: PPUSH
64761: LD_EXP 36
64765: PUSH
64766: LD_VAR 0 2
64770: ARRAY
64771: PPUSH
64772: LD_INT 2
64774: PUSH
64775: LD_INT 30
64777: PUSH
64778: LD_INT 32
64780: PUSH
64781: EMPTY
64782: LIST
64783: LIST
64784: PUSH
64785: LD_INT 30
64787: PUSH
64788: LD_INT 33
64790: PUSH
64791: EMPTY
64792: LIST
64793: LIST
64794: PUSH
64795: EMPTY
64796: LIST
64797: LIST
64798: LIST
64799: PPUSH
64800: CALL_OW 72
64804: PPUSH
64805: CALL_OW 1
64809: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
64810: LD_ADDR_EXP 45
64814: PUSH
64815: LD_EXP 45
64819: PPUSH
64820: LD_VAR 0 2
64824: PPUSH
64825: LD_EXP 36
64829: PUSH
64830: LD_VAR 0 2
64834: ARRAY
64835: PPUSH
64836: LD_INT 2
64838: PUSH
64839: LD_INT 30
64841: PUSH
64842: LD_INT 32
64844: PUSH
64845: EMPTY
64846: LIST
64847: LIST
64848: PUSH
64849: LD_INT 30
64851: PUSH
64852: LD_INT 31
64854: PUSH
64855: EMPTY
64856: LIST
64857: LIST
64858: PUSH
64859: EMPTY
64860: LIST
64861: LIST
64862: LIST
64863: PUSH
64864: LD_INT 58
64866: PUSH
64867: EMPTY
64868: LIST
64869: PUSH
64870: EMPTY
64871: LIST
64872: LIST
64873: PPUSH
64874: CALL_OW 72
64878: PPUSH
64879: CALL_OW 1
64883: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
64884: LD_ADDR_EXP 46
64888: PUSH
64889: LD_EXP 46
64893: PPUSH
64894: LD_VAR 0 2
64898: PPUSH
64899: EMPTY
64900: PPUSH
64901: CALL_OW 1
64905: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
64906: LD_ADDR_EXP 50
64910: PUSH
64911: LD_EXP 50
64915: PPUSH
64916: LD_VAR 0 2
64920: PPUSH
64921: EMPTY
64922: PPUSH
64923: CALL_OW 1
64927: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
64928: LD_ADDR_EXP 49
64932: PUSH
64933: LD_EXP 49
64937: PPUSH
64938: LD_VAR 0 2
64942: PPUSH
64943: EMPTY
64944: PPUSH
64945: CALL_OW 1
64949: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
64950: LD_ADDR_EXP 51
64954: PUSH
64955: LD_EXP 51
64959: PPUSH
64960: LD_VAR 0 2
64964: PPUSH
64965: EMPTY
64966: PPUSH
64967: CALL_OW 1
64971: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
64972: LD_ADDR_EXP 52
64976: PUSH
64977: LD_EXP 52
64981: PPUSH
64982: LD_VAR 0 2
64986: PPUSH
64987: EMPTY
64988: PPUSH
64989: CALL_OW 1
64993: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
64994: LD_ADDR_EXP 53
64998: PUSH
64999: LD_EXP 53
65003: PPUSH
65004: LD_VAR 0 2
65008: PPUSH
65009: EMPTY
65010: PPUSH
65011: CALL_OW 1
65015: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
65016: LD_ADDR_EXP 54
65020: PUSH
65021: LD_EXP 54
65025: PPUSH
65026: LD_VAR 0 2
65030: PPUSH
65031: EMPTY
65032: PPUSH
65033: CALL_OW 1
65037: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
65038: LD_ADDR_EXP 55
65042: PUSH
65043: LD_EXP 55
65047: PPUSH
65048: LD_VAR 0 2
65052: PPUSH
65053: EMPTY
65054: PPUSH
65055: CALL_OW 1
65059: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
65060: LD_ADDR_EXP 56
65064: PUSH
65065: LD_EXP 56
65069: PPUSH
65070: LD_VAR 0 2
65074: PPUSH
65075: EMPTY
65076: PPUSH
65077: CALL_OW 1
65081: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
65082: LD_ADDR_EXP 57
65086: PUSH
65087: LD_EXP 57
65091: PPUSH
65092: LD_VAR 0 2
65096: PPUSH
65097: EMPTY
65098: PPUSH
65099: CALL_OW 1
65103: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
65104: LD_ADDR_EXP 58
65108: PUSH
65109: LD_EXP 58
65113: PPUSH
65114: LD_VAR 0 2
65118: PPUSH
65119: EMPTY
65120: PPUSH
65121: CALL_OW 1
65125: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
65126: LD_ADDR_EXP 47
65130: PUSH
65131: LD_EXP 47
65135: PPUSH
65136: LD_VAR 0 2
65140: PPUSH
65141: LD_INT 0
65143: PPUSH
65144: CALL_OW 1
65148: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
65149: LD_ADDR_EXP 60
65153: PUSH
65154: LD_EXP 60
65158: PPUSH
65159: LD_VAR 0 2
65163: PPUSH
65164: LD_INT 0
65166: PPUSH
65167: CALL_OW 1
65171: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
65172: LD_ADDR_EXP 48
65176: PUSH
65177: LD_EXP 48
65181: PPUSH
65182: LD_VAR 0 2
65186: PPUSH
65187: EMPTY
65188: PPUSH
65189: CALL_OW 1
65193: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
65194: LD_ADDR_EXP 59
65198: PUSH
65199: LD_EXP 59
65203: PPUSH
65204: LD_VAR 0 2
65208: PPUSH
65209: LD_INT 0
65211: PPUSH
65212: CALL_OW 1
65216: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
65217: LD_ADDR_EXP 61
65221: PUSH
65222: LD_EXP 61
65226: PPUSH
65227: LD_VAR 0 2
65231: PPUSH
65232: EMPTY
65233: PPUSH
65234: CALL_OW 1
65238: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
65239: LD_ADDR_EXP 64
65243: PUSH
65244: LD_EXP 64
65248: PPUSH
65249: LD_VAR 0 2
65253: PPUSH
65254: LD_INT 0
65256: PPUSH
65257: CALL_OW 1
65261: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
65262: LD_ADDR_EXP 65
65266: PUSH
65267: LD_EXP 65
65271: PPUSH
65272: LD_VAR 0 2
65276: PPUSH
65277: EMPTY
65278: PPUSH
65279: CALL_OW 1
65283: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
65284: LD_ADDR_EXP 66
65288: PUSH
65289: LD_EXP 66
65293: PPUSH
65294: LD_VAR 0 2
65298: PPUSH
65299: EMPTY
65300: PPUSH
65301: CALL_OW 1
65305: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
65306: LD_ADDR_EXP 67
65310: PUSH
65311: LD_EXP 67
65315: PPUSH
65316: LD_VAR 0 2
65320: PPUSH
65321: EMPTY
65322: PPUSH
65323: CALL_OW 1
65327: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
65328: LD_ADDR_EXP 69
65332: PUSH
65333: LD_EXP 69
65337: PPUSH
65338: LD_VAR 0 2
65342: PPUSH
65343: LD_EXP 36
65347: PUSH
65348: LD_VAR 0 2
65352: ARRAY
65353: PPUSH
65354: LD_INT 2
65356: PUSH
65357: LD_INT 30
65359: PUSH
65360: LD_INT 6
65362: PUSH
65363: EMPTY
65364: LIST
65365: LIST
65366: PUSH
65367: LD_INT 30
65369: PUSH
65370: LD_INT 7
65372: PUSH
65373: EMPTY
65374: LIST
65375: LIST
65376: PUSH
65377: LD_INT 30
65379: PUSH
65380: LD_INT 8
65382: PUSH
65383: EMPTY
65384: LIST
65385: LIST
65386: PUSH
65387: EMPTY
65388: LIST
65389: LIST
65390: LIST
65391: LIST
65392: PPUSH
65393: CALL_OW 72
65397: PPUSH
65398: CALL_OW 1
65402: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
65403: LD_ADDR_EXP 70
65407: PUSH
65408: LD_EXP 70
65412: PPUSH
65413: LD_VAR 0 2
65417: PPUSH
65418: EMPTY
65419: PPUSH
65420: CALL_OW 1
65424: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
65425: LD_ADDR_EXP 71
65429: PUSH
65430: LD_EXP 71
65434: PPUSH
65435: LD_VAR 0 2
65439: PPUSH
65440: EMPTY
65441: PPUSH
65442: CALL_OW 1
65446: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , i , [ ] ) ;
65447: LD_ADDR_EXP 72
65451: PUSH
65452: LD_EXP 72
65456: PPUSH
65457: LD_VAR 0 2
65461: PPUSH
65462: EMPTY
65463: PPUSH
65464: CALL_OW 1
65468: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
65469: LD_ADDR_EXP 73
65473: PUSH
65474: LD_EXP 73
65478: PPUSH
65479: LD_VAR 0 2
65483: PPUSH
65484: EMPTY
65485: PPUSH
65486: CALL_OW 1
65490: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
65491: LD_ADDR_EXP 74
65495: PUSH
65496: LD_EXP 74
65500: PPUSH
65501: LD_VAR 0 2
65505: PPUSH
65506: EMPTY
65507: PPUSH
65508: CALL_OW 1
65512: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
65513: LD_ADDR_EXP 75
65517: PUSH
65518: LD_EXP 75
65522: PPUSH
65523: LD_VAR 0 2
65527: PPUSH
65528: EMPTY
65529: PPUSH
65530: CALL_OW 1
65534: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
65535: LD_ADDR_EXP 76
65539: PUSH
65540: LD_EXP 76
65544: PPUSH
65545: LD_VAR 0 2
65549: PPUSH
65550: EMPTY
65551: PPUSH
65552: CALL_OW 1
65556: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , [ ] ) ;
65557: LD_ADDR_EXP 77
65561: PUSH
65562: LD_EXP 77
65566: PPUSH
65567: LD_VAR 0 2
65571: PPUSH
65572: EMPTY
65573: PPUSH
65574: CALL_OW 1
65578: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , i , 0 ) ;
65579: LD_ADDR_EXP 78
65583: PUSH
65584: LD_EXP 78
65588: PPUSH
65589: LD_VAR 0 2
65593: PPUSH
65594: LD_INT 0
65596: PPUSH
65597: CALL_OW 1
65601: ST_TO_ADDR
// end ;
65602: GO 64526
65604: POP
65605: POP
// MC_InitSides ( ) ;
65606: CALL 65892 0 0
// MC_InitResearch ( ) ;
65610: CALL 65631 0 0
// CustomInitMacro ( ) ;
65614: CALL 1407 0 0
// skirmish := true ;
65618: LD_ADDR_EXP 34
65622: PUSH
65623: LD_INT 1
65625: ST_TO_ADDR
// end ;
65626: LD_VAR 0 1
65630: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
65631: LD_INT 0
65633: PPUSH
65634: PPUSH
65635: PPUSH
65636: PPUSH
65637: PPUSH
65638: PPUSH
// if not mc_bases then
65639: LD_EXP 36
65643: NOT
65644: IFFALSE 65648
// exit ;
65646: GO 65887
// for i = 1 to 8 do
65648: LD_ADDR_VAR 0 2
65652: PUSH
65653: DOUBLE
65654: LD_INT 1
65656: DEC
65657: ST_TO_ADDR
65658: LD_INT 8
65660: PUSH
65661: FOR_TO
65662: IFFALSE 65688
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
65664: LD_ADDR_EXP 63
65668: PUSH
65669: LD_EXP 63
65673: PPUSH
65674: LD_VAR 0 2
65678: PPUSH
65679: EMPTY
65680: PPUSH
65681: CALL_OW 1
65685: ST_TO_ADDR
65686: GO 65661
65688: POP
65689: POP
// tmp := [ ] ;
65690: LD_ADDR_VAR 0 5
65694: PUSH
65695: EMPTY
65696: ST_TO_ADDR
// for i = 1 to mc_sides do
65697: LD_ADDR_VAR 0 2
65701: PUSH
65702: DOUBLE
65703: LD_INT 1
65705: DEC
65706: ST_TO_ADDR
65707: LD_EXP 62
65711: PUSH
65712: FOR_TO
65713: IFFALSE 65771
// if not mc_sides [ i ] in tmp then
65715: LD_EXP 62
65719: PUSH
65720: LD_VAR 0 2
65724: ARRAY
65725: PUSH
65726: LD_VAR 0 5
65730: IN
65731: NOT
65732: IFFALSE 65769
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
65734: LD_ADDR_VAR 0 5
65738: PUSH
65739: LD_VAR 0 5
65743: PPUSH
65744: LD_VAR 0 5
65748: PUSH
65749: LD_INT 1
65751: PLUS
65752: PPUSH
65753: LD_EXP 62
65757: PUSH
65758: LD_VAR 0 2
65762: ARRAY
65763: PPUSH
65764: CALL_OW 2
65768: ST_TO_ADDR
65769: GO 65712
65771: POP
65772: POP
// if not tmp then
65773: LD_VAR 0 5
65777: NOT
65778: IFFALSE 65782
// exit ;
65780: GO 65887
// for j in tmp do
65782: LD_ADDR_VAR 0 3
65786: PUSH
65787: LD_VAR 0 5
65791: PUSH
65792: FOR_IN
65793: IFFALSE 65885
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
65795: LD_ADDR_VAR 0 6
65799: PUSH
65800: LD_INT 22
65802: PUSH
65803: LD_VAR 0 3
65807: PUSH
65808: EMPTY
65809: LIST
65810: LIST
65811: PPUSH
65812: CALL_OW 69
65816: ST_TO_ADDR
// if not un then
65817: LD_VAR 0 6
65821: NOT
65822: IFFALSE 65826
// continue ;
65824: GO 65792
// nation := GetNation ( un [ 1 ] ) ;
65826: LD_ADDR_VAR 0 4
65830: PUSH
65831: LD_VAR 0 6
65835: PUSH
65836: LD_INT 1
65838: ARRAY
65839: PPUSH
65840: CALL_OW 248
65844: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
65845: LD_ADDR_EXP 63
65849: PUSH
65850: LD_EXP 63
65854: PPUSH
65855: LD_VAR 0 3
65859: PPUSH
65860: LD_VAR 0 3
65864: PPUSH
65865: LD_VAR 0 4
65869: PPUSH
65870: LD_INT 1
65872: PPUSH
65873: CALL 19401 0 3
65877: PPUSH
65878: CALL_OW 1
65882: ST_TO_ADDR
// end ;
65883: GO 65792
65885: POP
65886: POP
// end ;
65887: LD_VAR 0 1
65891: RET
// export function MC_InitSides ( ) ; var i ; begin
65892: LD_INT 0
65894: PPUSH
65895: PPUSH
// if not mc_bases then
65896: LD_EXP 36
65900: NOT
65901: IFFALSE 65905
// exit ;
65903: GO 65979
// for i = 1 to mc_bases do
65905: LD_ADDR_VAR 0 2
65909: PUSH
65910: DOUBLE
65911: LD_INT 1
65913: DEC
65914: ST_TO_ADDR
65915: LD_EXP 36
65919: PUSH
65920: FOR_TO
65921: IFFALSE 65977
// if mc_bases [ i ] then
65923: LD_EXP 36
65927: PUSH
65928: LD_VAR 0 2
65932: ARRAY
65933: IFFALSE 65975
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
65935: LD_ADDR_EXP 62
65939: PUSH
65940: LD_EXP 62
65944: PPUSH
65945: LD_VAR 0 2
65949: PPUSH
65950: LD_EXP 36
65954: PUSH
65955: LD_VAR 0 2
65959: ARRAY
65960: PUSH
65961: LD_INT 1
65963: ARRAY
65964: PPUSH
65965: CALL_OW 255
65969: PPUSH
65970: CALL_OW 1
65974: ST_TO_ADDR
65975: GO 65920
65977: POP
65978: POP
// end ;
65979: LD_VAR 0 1
65983: RET
// every 0 0$01 trigger skirmish do
65984: LD_EXP 34
65988: IFFALSE 66142
65990: GO 65992
65992: DISABLE
// begin enable ;
65993: ENABLE
// MC_CheckBuildings ( ) ;
65994: CALL 70640 0 0
// MC_CheckPeopleLife ( ) ;
65998: CALL 70765 0 0
// RaiseSailEvent ( 100 ) ;
66002: LD_INT 100
66004: PPUSH
66005: CALL_OW 427
// RaiseSailEvent ( 103 ) ;
66009: LD_INT 103
66011: PPUSH
66012: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
66016: LD_INT 104
66018: PPUSH
66019: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
66023: LD_INT 105
66025: PPUSH
66026: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
66030: LD_INT 106
66032: PPUSH
66033: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
66037: LD_INT 107
66039: PPUSH
66040: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
66044: LD_INT 108
66046: PPUSH
66047: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
66051: LD_INT 109
66053: PPUSH
66054: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
66058: LD_INT 110
66060: PPUSH
66061: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
66065: LD_INT 111
66067: PPUSH
66068: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
66072: LD_INT 112
66074: PPUSH
66075: CALL_OW 427
// RaiseSailEvent ( 113 ) ;
66079: LD_INT 113
66081: PPUSH
66082: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
66086: LD_INT 120
66088: PPUSH
66089: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
66093: LD_INT 121
66095: PPUSH
66096: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
66100: LD_INT 122
66102: PPUSH
66103: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
66107: LD_INT 123
66109: PPUSH
66110: CALL_OW 427
// RaiseSailEvent ( 124 ) ;
66114: LD_INT 124
66116: PPUSH
66117: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
66121: LD_INT 125
66123: PPUSH
66124: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
66128: LD_INT 126
66130: PPUSH
66131: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
66135: LD_INT 200
66137: PPUSH
66138: CALL_OW 427
// end ;
66142: END
// on SailEvent ( event ) do begin if event < 100 then
66143: LD_VAR 0 1
66147: PUSH
66148: LD_INT 100
66150: LESS
66151: IFFALSE 66162
// CustomEvent ( event ) ;
66153: LD_VAR 0 1
66157: PPUSH
66158: CALL 18588 0 1
// if event = 100 then
66162: LD_VAR 0 1
66166: PUSH
66167: LD_INT 100
66169: EQUAL
66170: IFFALSE 66176
// MC_ClassManager ( ) ;
66172: CALL 66568 0 0
// if event = 101 then
66176: LD_VAR 0 1
66180: PUSH
66181: LD_INT 101
66183: EQUAL
66184: IFFALSE 66190
// MC_RepairBuildings ( ) ;
66186: CALL 71361 0 0
// if event = 102 then
66190: LD_VAR 0 1
66194: PUSH
66195: LD_INT 102
66197: EQUAL
66198: IFFALSE 66204
// MC_Heal ( ) ;
66200: CALL 72093 0 0
// if event = 103 then
66204: LD_VAR 0 1
66208: PUSH
66209: LD_INT 103
66211: EQUAL
66212: IFFALSE 66218
// MC_Build ( ) ;
66214: CALL 72515 0 0
// if event = 104 then
66218: LD_VAR 0 1
66222: PUSH
66223: LD_INT 104
66225: EQUAL
66226: IFFALSE 66232
// MC_TurretWeapon ( ) ;
66228: CALL 74128 0 0
// if event = 105 then
66232: LD_VAR 0 1
66236: PUSH
66237: LD_INT 105
66239: EQUAL
66240: IFFALSE 66246
// MC_BuildUpgrade ( ) ;
66242: CALL 73679 0 0
// if event = 106 then
66246: LD_VAR 0 1
66250: PUSH
66251: LD_INT 106
66253: EQUAL
66254: IFFALSE 66260
// MC_PlantMines ( ) ;
66256: CALL 74558 0 0
// if event = 107 then
66260: LD_VAR 0 1
66264: PUSH
66265: LD_INT 107
66267: EQUAL
66268: IFFALSE 66274
// MC_CollectCrates ( ) ;
66270: CALL 75592 0 0
// if event = 108 then
66274: LD_VAR 0 1
66278: PUSH
66279: LD_INT 108
66281: EQUAL
66282: IFFALSE 66288
// MC_LinkRemoteControl ( ) ;
66284: CALL 77368 0 0
// if event = 109 then
66288: LD_VAR 0 1
66292: PUSH
66293: LD_INT 109
66295: EQUAL
66296: IFFALSE 66302
// MC_ProduceVehicle ( ) ;
66298: CALL 77549 0 0
// if event = 110 then
66302: LD_VAR 0 1
66306: PUSH
66307: LD_INT 110
66309: EQUAL
66310: IFFALSE 66316
// MC_SendAttack ( ) ;
66312: CALL 78015 0 0
// if event = 111 then
66316: LD_VAR 0 1
66320: PUSH
66321: LD_INT 111
66323: EQUAL
66324: IFFALSE 66330
// MC_Defend ( ) ;
66326: CALL 78123 0 0
// if event = 112 then
66330: LD_VAR 0 1
66334: PUSH
66335: LD_INT 112
66337: EQUAL
66338: IFFALSE 66344
// MC_Research ( ) ;
66340: CALL 78728 0 0
// if event = 113 then
66344: LD_VAR 0 1
66348: PUSH
66349: LD_INT 113
66351: EQUAL
66352: IFFALSE 66358
// MC_MinesTrigger ( ) ;
66354: CALL 79842 0 0
// if event = 120 then
66358: LD_VAR 0 1
66362: PUSH
66363: LD_INT 120
66365: EQUAL
66366: IFFALSE 66372
// MC_RepairVehicle ( ) ;
66368: CALL 79941 0 0
// if event = 121 then
66372: LD_VAR 0 1
66376: PUSH
66377: LD_INT 121
66379: EQUAL
66380: IFFALSE 66386
// MC_TameApe ( ) ;
66382: CALL 80671 0 0
// if event = 122 then
66386: LD_VAR 0 1
66390: PUSH
66391: LD_INT 122
66393: EQUAL
66394: IFFALSE 66400
// MC_ChangeApeClass ( ) ;
66396: CALL 81500 0 0
// if event = 123 then
66400: LD_VAR 0 1
66404: PUSH
66405: LD_INT 123
66407: EQUAL
66408: IFFALSE 66414
// MC_Bazooka ( ) ;
66410: CALL 82150 0 0
// if event = 124 then
66414: LD_VAR 0 1
66418: PUSH
66419: LD_INT 124
66421: EQUAL
66422: IFFALSE 66428
// MC_TeleportExit ( ) ;
66424: CALL 82348 0 0
// if event = 125 then
66428: LD_VAR 0 1
66432: PUSH
66433: LD_INT 125
66435: EQUAL
66436: IFFALSE 66442
// MC_Deposits ( ) ;
66438: CALL 82995 0 0
// if event = 126 then
66442: LD_VAR 0 1
66446: PUSH
66447: LD_INT 126
66449: EQUAL
66450: IFFALSE 66456
// MC_RemoteDriver ( ) ;
66452: CALL 83620 0 0
// if event = 200 then
66456: LD_VAR 0 1
66460: PUSH
66461: LD_INT 200
66463: EQUAL
66464: IFFALSE 66470
// MC_Idle ( ) ;
66466: CALL 85353 0 0
// end ;
66470: PPOPN 1
66472: END
// export function MC_Reset ( base , tag ) ; var i ; begin
66473: LD_INT 0
66475: PPUSH
66476: PPUSH
// if not mc_bases [ base ] or not tag then
66477: LD_EXP 36
66481: PUSH
66482: LD_VAR 0 1
66486: ARRAY
66487: NOT
66488: PUSH
66489: LD_VAR 0 2
66493: NOT
66494: OR
66495: IFFALSE 66499
// exit ;
66497: GO 66563
// for i in mc_bases [ base ] union mc_ape [ base ] do
66499: LD_ADDR_VAR 0 4
66503: PUSH
66504: LD_EXP 36
66508: PUSH
66509: LD_VAR 0 1
66513: ARRAY
66514: PUSH
66515: LD_EXP 65
66519: PUSH
66520: LD_VAR 0 1
66524: ARRAY
66525: UNION
66526: PUSH
66527: FOR_IN
66528: IFFALSE 66561
// if GetTag ( i ) = tag then
66530: LD_VAR 0 4
66534: PPUSH
66535: CALL_OW 110
66539: PUSH
66540: LD_VAR 0 2
66544: EQUAL
66545: IFFALSE 66559
// SetTag ( i , 0 ) ;
66547: LD_VAR 0 4
66551: PPUSH
66552: LD_INT 0
66554: PPUSH
66555: CALL_OW 109
66559: GO 66527
66561: POP
66562: POP
// end ;
66563: LD_VAR 0 3
66567: RET
// export function MC_ClassManager ( ) ; var i , j , tmp , p , b , e , k ; begin
66568: LD_INT 0
66570: PPUSH
66571: PPUSH
66572: PPUSH
66573: PPUSH
66574: PPUSH
66575: PPUSH
66576: PPUSH
66577: PPUSH
// if not mc_bases then
66578: LD_EXP 36
66582: NOT
66583: IFFALSE 66587
// exit ;
66585: GO 67045
// for i = 1 to mc_bases do
66587: LD_ADDR_VAR 0 2
66591: PUSH
66592: DOUBLE
66593: LD_INT 1
66595: DEC
66596: ST_TO_ADDR
66597: LD_EXP 36
66601: PUSH
66602: FOR_TO
66603: IFFALSE 67043
// begin tmp := MC_ClassCheckReq ( i ) ;
66605: LD_ADDR_VAR 0 4
66609: PUSH
66610: LD_VAR 0 2
66614: PPUSH
66615: CALL 67050 0 1
66619: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , tmp ) ;
66620: LD_ADDR_EXP 77
66624: PUSH
66625: LD_EXP 77
66629: PPUSH
66630: LD_VAR 0 2
66634: PPUSH
66635: LD_VAR 0 4
66639: PPUSH
66640: CALL_OW 1
66644: ST_TO_ADDR
// if not tmp then
66645: LD_VAR 0 4
66649: NOT
66650: IFFALSE 66654
// continue ;
66652: GO 66602
// b := [ UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ] ;
66654: LD_ADDR_VAR 0 6
66658: PUSH
66659: LD_EXP 36
66663: PUSH
66664: LD_VAR 0 2
66668: ARRAY
66669: PPUSH
66670: LD_INT 2
66672: PUSH
66673: LD_INT 30
66675: PUSH
66676: LD_INT 4
66678: PUSH
66679: EMPTY
66680: LIST
66681: LIST
66682: PUSH
66683: LD_INT 30
66685: PUSH
66686: LD_INT 5
66688: PUSH
66689: EMPTY
66690: LIST
66691: LIST
66692: PUSH
66693: EMPTY
66694: LIST
66695: LIST
66696: LIST
66697: PPUSH
66698: CALL_OW 72
66702: PUSH
66703: LD_EXP 36
66707: PUSH
66708: LD_VAR 0 2
66712: ARRAY
66713: PPUSH
66714: LD_INT 2
66716: PUSH
66717: LD_INT 30
66719: PUSH
66720: LD_INT 0
66722: PUSH
66723: EMPTY
66724: LIST
66725: LIST
66726: PUSH
66727: LD_INT 30
66729: PUSH
66730: LD_INT 1
66732: PUSH
66733: EMPTY
66734: LIST
66735: LIST
66736: PUSH
66737: EMPTY
66738: LIST
66739: LIST
66740: LIST
66741: PPUSH
66742: CALL_OW 72
66746: PUSH
66747: LD_EXP 36
66751: PUSH
66752: LD_VAR 0 2
66756: ARRAY
66757: PPUSH
66758: LD_INT 30
66760: PUSH
66761: LD_INT 3
66763: PUSH
66764: EMPTY
66765: LIST
66766: LIST
66767: PPUSH
66768: CALL_OW 72
66772: PUSH
66773: LD_EXP 36
66777: PUSH
66778: LD_VAR 0 2
66782: ARRAY
66783: PPUSH
66784: LD_INT 2
66786: PUSH
66787: LD_INT 30
66789: PUSH
66790: LD_INT 6
66792: PUSH
66793: EMPTY
66794: LIST
66795: LIST
66796: PUSH
66797: LD_INT 30
66799: PUSH
66800: LD_INT 7
66802: PUSH
66803: EMPTY
66804: LIST
66805: LIST
66806: PUSH
66807: LD_INT 30
66809: PUSH
66810: LD_INT 8
66812: PUSH
66813: EMPTY
66814: LIST
66815: LIST
66816: PUSH
66817: EMPTY
66818: LIST
66819: LIST
66820: LIST
66821: LIST
66822: PPUSH
66823: CALL_OW 72
66827: PUSH
66828: EMPTY
66829: LIST
66830: LIST
66831: LIST
66832: LIST
66833: ST_TO_ADDR
// for j = 1 to 4 do
66834: LD_ADDR_VAR 0 3
66838: PUSH
66839: DOUBLE
66840: LD_INT 1
66842: DEC
66843: ST_TO_ADDR
66844: LD_INT 4
66846: PUSH
66847: FOR_TO
66848: IFFALSE 67039
// begin if not tmp [ j ] then
66850: LD_VAR 0 4
66854: PUSH
66855: LD_VAR 0 3
66859: ARRAY
66860: NOT
66861: IFFALSE 66865
// continue ;
66863: GO 66847
// for p in tmp [ j ] do
66865: LD_ADDR_VAR 0 5
66869: PUSH
66870: LD_VAR 0 4
66874: PUSH
66875: LD_VAR 0 3
66879: ARRAY
66880: PUSH
66881: FOR_IN
66882: IFFALSE 67035
// begin if not b [ j ] then
66884: LD_VAR 0 6
66888: PUSH
66889: LD_VAR 0 3
66893: ARRAY
66894: NOT
66895: IFFALSE 66899
// break ;
66897: GO 67035
// e := 0 ;
66899: LD_ADDR_VAR 0 7
66903: PUSH
66904: LD_INT 0
66906: ST_TO_ADDR
// for k in b [ j ] do
66907: LD_ADDR_VAR 0 8
66911: PUSH
66912: LD_VAR 0 6
66916: PUSH
66917: LD_VAR 0 3
66921: ARRAY
66922: PUSH
66923: FOR_IN
66924: IFFALSE 66951
// if IsNotFull ( k ) then
66926: LD_VAR 0 8
66930: PPUSH
66931: CALL 23692 0 1
66935: IFFALSE 66949
// begin e := k ;
66937: LD_ADDR_VAR 0 7
66941: PUSH
66942: LD_VAR 0 8
66946: ST_TO_ADDR
// break ;
66947: GO 66951
// end ;
66949: GO 66923
66951: POP
66952: POP
// if e and not UnitGoingToBuilding ( p , e ) then
66953: LD_VAR 0 7
66957: PUSH
66958: LD_VAR 0 5
66962: PPUSH
66963: LD_VAR 0 7
66967: PPUSH
66968: CALL 60811 0 2
66972: NOT
66973: AND
66974: IFFALSE 67033
// begin if IsInUnit ( p ) then
66976: LD_VAR 0 5
66980: PPUSH
66981: CALL_OW 310
66985: IFFALSE 66996
// ComExitBuilding ( p ) ;
66987: LD_VAR 0 5
66991: PPUSH
66992: CALL_OW 122
// ComEnterUnit ( p , e ) ;
66996: LD_VAR 0 5
67000: PPUSH
67001: LD_VAR 0 7
67005: PPUSH
67006: CALL_OW 120
// AddComChangeProfession ( p , j ) ;
67010: LD_VAR 0 5
67014: PPUSH
67015: LD_VAR 0 3
67019: PPUSH
67020: CALL_OW 183
// AddComExitBuilding ( p ) ;
67024: LD_VAR 0 5
67028: PPUSH
67029: CALL_OW 182
// end ; end ;
67033: GO 66881
67035: POP
67036: POP
// end ;
67037: GO 66847
67039: POP
67040: POP
// end ;
67041: GO 66602
67043: POP
67044: POP
// end ;
67045: LD_VAR 0 1
67049: RET
// export function MC_ClassCheckReq ( base ) ; var i , tmp , sol , eng , mech , sci , sort , j , p , b , bcount ; begin
67050: LD_INT 0
67052: PPUSH
67053: PPUSH
67054: PPUSH
67055: PPUSH
67056: PPUSH
67057: PPUSH
67058: PPUSH
67059: PPUSH
67060: PPUSH
67061: PPUSH
67062: PPUSH
67063: PPUSH
// if not base or not mc_bases [ base ] or not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
67064: LD_VAR 0 1
67068: NOT
67069: PUSH
67070: LD_EXP 36
67074: PUSH
67075: LD_VAR 0 1
67079: ARRAY
67080: NOT
67081: OR
67082: PUSH
67083: LD_EXP 36
67087: PUSH
67088: LD_VAR 0 1
67092: ARRAY
67093: PPUSH
67094: LD_INT 2
67096: PUSH
67097: LD_INT 30
67099: PUSH
67100: LD_INT 0
67102: PUSH
67103: EMPTY
67104: LIST
67105: LIST
67106: PUSH
67107: LD_INT 30
67109: PUSH
67110: LD_INT 1
67112: PUSH
67113: EMPTY
67114: LIST
67115: LIST
67116: PUSH
67117: EMPTY
67118: LIST
67119: LIST
67120: LIST
67121: PPUSH
67122: CALL_OW 72
67126: NOT
67127: OR
67128: IFFALSE 67132
// exit ;
67130: GO 70635
// tmp := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
67132: LD_ADDR_VAR 0 4
67136: PUSH
67137: LD_EXP 36
67141: PUSH
67142: LD_VAR 0 1
67146: ARRAY
67147: PPUSH
67148: LD_INT 2
67150: PUSH
67151: LD_INT 25
67153: PUSH
67154: LD_INT 1
67156: PUSH
67157: EMPTY
67158: LIST
67159: LIST
67160: PUSH
67161: LD_INT 25
67163: PUSH
67164: LD_INT 2
67166: PUSH
67167: EMPTY
67168: LIST
67169: LIST
67170: PUSH
67171: LD_INT 25
67173: PUSH
67174: LD_INT 3
67176: PUSH
67177: EMPTY
67178: LIST
67179: LIST
67180: PUSH
67181: LD_INT 25
67183: PUSH
67184: LD_INT 4
67186: PUSH
67187: EMPTY
67188: LIST
67189: LIST
67190: PUSH
67191: LD_INT 25
67193: PUSH
67194: LD_INT 5
67196: PUSH
67197: EMPTY
67198: LIST
67199: LIST
67200: PUSH
67201: LD_INT 25
67203: PUSH
67204: LD_INT 8
67206: PUSH
67207: EMPTY
67208: LIST
67209: LIST
67210: PUSH
67211: LD_INT 25
67213: PUSH
67214: LD_INT 9
67216: PUSH
67217: EMPTY
67218: LIST
67219: LIST
67220: PUSH
67221: EMPTY
67222: LIST
67223: LIST
67224: LIST
67225: LIST
67226: LIST
67227: LIST
67228: LIST
67229: LIST
67230: PPUSH
67231: CALL_OW 72
67235: ST_TO_ADDR
// if not tmp then
67236: LD_VAR 0 4
67240: NOT
67241: IFFALSE 67245
// exit ;
67243: GO 70635
// for i in tmp do
67245: LD_ADDR_VAR 0 3
67249: PUSH
67250: LD_VAR 0 4
67254: PUSH
67255: FOR_IN
67256: IFFALSE 67287
// if GetTag ( i ) then
67258: LD_VAR 0 3
67262: PPUSH
67263: CALL_OW 110
67267: IFFALSE 67285
// tmp := tmp diff i ;
67269: LD_ADDR_VAR 0 4
67273: PUSH
67274: LD_VAR 0 4
67278: PUSH
67279: LD_VAR 0 3
67283: DIFF
67284: ST_TO_ADDR
67285: GO 67255
67287: POP
67288: POP
// if not tmp then
67289: LD_VAR 0 4
67293: NOT
67294: IFFALSE 67298
// exit ;
67296: GO 70635
// sol := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
67298: LD_ADDR_VAR 0 5
67302: PUSH
67303: LD_EXP 36
67307: PUSH
67308: LD_VAR 0 1
67312: ARRAY
67313: PPUSH
67314: LD_INT 2
67316: PUSH
67317: LD_INT 25
67319: PUSH
67320: LD_INT 1
67322: PUSH
67323: EMPTY
67324: LIST
67325: LIST
67326: PUSH
67327: LD_INT 25
67329: PUSH
67330: LD_INT 5
67332: PUSH
67333: EMPTY
67334: LIST
67335: LIST
67336: PUSH
67337: LD_INT 25
67339: PUSH
67340: LD_INT 8
67342: PUSH
67343: EMPTY
67344: LIST
67345: LIST
67346: PUSH
67347: LD_INT 25
67349: PUSH
67350: LD_INT 9
67352: PUSH
67353: EMPTY
67354: LIST
67355: LIST
67356: PUSH
67357: EMPTY
67358: LIST
67359: LIST
67360: LIST
67361: LIST
67362: LIST
67363: PPUSH
67364: CALL_OW 72
67368: ST_TO_ADDR
// eng := UnitFilter ( mc_bases [ base ] , [ f_class , 2 ] ) ;
67369: LD_ADDR_VAR 0 6
67373: PUSH
67374: LD_EXP 36
67378: PUSH
67379: LD_VAR 0 1
67383: ARRAY
67384: PPUSH
67385: LD_INT 25
67387: PUSH
67388: LD_INT 2
67390: PUSH
67391: EMPTY
67392: LIST
67393: LIST
67394: PPUSH
67395: CALL_OW 72
67399: ST_TO_ADDR
// mech := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
67400: LD_ADDR_VAR 0 7
67404: PUSH
67405: LD_EXP 36
67409: PUSH
67410: LD_VAR 0 1
67414: ARRAY
67415: PPUSH
67416: LD_INT 25
67418: PUSH
67419: LD_INT 3
67421: PUSH
67422: EMPTY
67423: LIST
67424: LIST
67425: PPUSH
67426: CALL_OW 72
67430: ST_TO_ADDR
// sci := UnitFilter ( mc_bases [ base ] , [ [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
67431: LD_ADDR_VAR 0 8
67435: PUSH
67436: LD_EXP 36
67440: PUSH
67441: LD_VAR 0 1
67445: ARRAY
67446: PPUSH
67447: LD_INT 25
67449: PUSH
67450: LD_INT 4
67452: PUSH
67453: EMPTY
67454: LIST
67455: LIST
67456: PUSH
67457: LD_INT 24
67459: PUSH
67460: LD_INT 251
67462: PUSH
67463: EMPTY
67464: LIST
67465: LIST
67466: PUSH
67467: EMPTY
67468: LIST
67469: LIST
67470: PPUSH
67471: CALL_OW 72
67475: ST_TO_ADDR
// if mc_scan [ base ] then
67476: LD_EXP 59
67480: PUSH
67481: LD_VAR 0 1
67485: ARRAY
67486: IFFALSE 67947
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 4 ) ;
67488: LD_ADDR_EXP 78
67492: PUSH
67493: LD_EXP 78
67497: PPUSH
67498: LD_VAR 0 1
67502: PPUSH
67503: LD_INT 4
67505: PPUSH
67506: CALL_OW 1
67510: ST_TO_ADDR
// b := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
67511: LD_ADDR_VAR 0 12
67515: PUSH
67516: LD_EXP 36
67520: PUSH
67521: LD_VAR 0 1
67525: ARRAY
67526: PPUSH
67527: LD_INT 2
67529: PUSH
67530: LD_INT 30
67532: PUSH
67533: LD_INT 4
67535: PUSH
67536: EMPTY
67537: LIST
67538: LIST
67539: PUSH
67540: LD_INT 30
67542: PUSH
67543: LD_INT 5
67545: PUSH
67546: EMPTY
67547: LIST
67548: LIST
67549: PUSH
67550: EMPTY
67551: LIST
67552: LIST
67553: LIST
67554: PPUSH
67555: CALL_OW 72
67559: ST_TO_ADDR
// if not b then
67560: LD_VAR 0 12
67564: NOT
67565: IFFALSE 67569
// exit ;
67567: GO 70635
// p := [ ] ;
67569: LD_ADDR_VAR 0 11
67573: PUSH
67574: EMPTY
67575: ST_TO_ADDR
// if sci >= 2 then
67576: LD_VAR 0 8
67580: PUSH
67581: LD_INT 2
67583: GREATEREQUAL
67584: IFFALSE 67615
// sci := [ sci [ 1 ] , sci [ 2 ] ] else
67586: LD_ADDR_VAR 0 8
67590: PUSH
67591: LD_VAR 0 8
67595: PUSH
67596: LD_INT 1
67598: ARRAY
67599: PUSH
67600: LD_VAR 0 8
67604: PUSH
67605: LD_INT 2
67607: ARRAY
67608: PUSH
67609: EMPTY
67610: LIST
67611: LIST
67612: ST_TO_ADDR
67613: GO 67676
// if sci = 1 then
67615: LD_VAR 0 8
67619: PUSH
67620: LD_INT 1
67622: EQUAL
67623: IFFALSE 67644
// sci := [ sci [ 1 ] ] else
67625: LD_ADDR_VAR 0 8
67629: PUSH
67630: LD_VAR 0 8
67634: PUSH
67635: LD_INT 1
67637: ARRAY
67638: PUSH
67639: EMPTY
67640: LIST
67641: ST_TO_ADDR
67642: GO 67676
// if sci = 0 then
67644: LD_VAR 0 8
67648: PUSH
67649: LD_INT 0
67651: EQUAL
67652: IFFALSE 67676
// p := SortBySkill ( tmp , 4 ) [ 1 ] ;
67654: LD_ADDR_VAR 0 11
67658: PUSH
67659: LD_VAR 0 4
67663: PPUSH
67664: LD_INT 4
67666: PPUSH
67667: CALL 60674 0 2
67671: PUSH
67672: LD_INT 1
67674: ARRAY
67675: ST_TO_ADDR
// if eng > 4 then
67676: LD_VAR 0 6
67680: PUSH
67681: LD_INT 4
67683: GREATER
67684: IFFALSE 67730
// for i = eng downto 4 do
67686: LD_ADDR_VAR 0 3
67690: PUSH
67691: DOUBLE
67692: LD_VAR 0 6
67696: INC
67697: ST_TO_ADDR
67698: LD_INT 4
67700: PUSH
67701: FOR_DOWNTO
67702: IFFALSE 67728
// eng := eng diff eng [ i ] ;
67704: LD_ADDR_VAR 0 6
67708: PUSH
67709: LD_VAR 0 6
67713: PUSH
67714: LD_VAR 0 6
67718: PUSH
67719: LD_VAR 0 3
67723: ARRAY
67724: DIFF
67725: ST_TO_ADDR
67726: GO 67701
67728: POP
67729: POP
// tmp := tmp diff ( sol union eng union mech union sci ) ;
67730: LD_ADDR_VAR 0 4
67734: PUSH
67735: LD_VAR 0 4
67739: PUSH
67740: LD_VAR 0 5
67744: PUSH
67745: LD_VAR 0 6
67749: UNION
67750: PUSH
67751: LD_VAR 0 7
67755: UNION
67756: PUSH
67757: LD_VAR 0 8
67761: UNION
67762: DIFF
67763: ST_TO_ADDR
// bcount := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) + UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) * 6 ;
67764: LD_ADDR_VAR 0 13
67768: PUSH
67769: LD_EXP 36
67773: PUSH
67774: LD_VAR 0 1
67778: ARRAY
67779: PPUSH
67780: LD_INT 2
67782: PUSH
67783: LD_INT 30
67785: PUSH
67786: LD_INT 32
67788: PUSH
67789: EMPTY
67790: LIST
67791: LIST
67792: PUSH
67793: LD_INT 30
67795: PUSH
67796: LD_INT 31
67798: PUSH
67799: EMPTY
67800: LIST
67801: LIST
67802: PUSH
67803: EMPTY
67804: LIST
67805: LIST
67806: LIST
67807: PPUSH
67808: CALL_OW 72
67812: PUSH
67813: LD_EXP 36
67817: PUSH
67818: LD_VAR 0 1
67822: ARRAY
67823: PPUSH
67824: LD_INT 2
67826: PUSH
67827: LD_INT 30
67829: PUSH
67830: LD_INT 4
67832: PUSH
67833: EMPTY
67834: LIST
67835: LIST
67836: PUSH
67837: LD_INT 30
67839: PUSH
67840: LD_INT 5
67842: PUSH
67843: EMPTY
67844: LIST
67845: LIST
67846: PUSH
67847: EMPTY
67848: LIST
67849: LIST
67850: LIST
67851: PPUSH
67852: CALL_OW 72
67856: PUSH
67857: LD_INT 6
67859: MUL
67860: PLUS
67861: ST_TO_ADDR
// if bcount < tmp then
67862: LD_VAR 0 13
67866: PUSH
67867: LD_VAR 0 4
67871: LESS
67872: IFFALSE 67918
// for i = tmp downto bcount do
67874: LD_ADDR_VAR 0 3
67878: PUSH
67879: DOUBLE
67880: LD_VAR 0 4
67884: INC
67885: ST_TO_ADDR
67886: LD_VAR 0 13
67890: PUSH
67891: FOR_DOWNTO
67892: IFFALSE 67916
// tmp := Delete ( tmp , tmp ) ;
67894: LD_ADDR_VAR 0 4
67898: PUSH
67899: LD_VAR 0 4
67903: PPUSH
67904: LD_VAR 0 4
67908: PPUSH
67909: CALL_OW 3
67913: ST_TO_ADDR
67914: GO 67891
67916: POP
67917: POP
// result := [ tmp , 0 , 0 , p ] ;
67918: LD_ADDR_VAR 0 2
67922: PUSH
67923: LD_VAR 0 4
67927: PUSH
67928: LD_INT 0
67930: PUSH
67931: LD_INT 0
67933: PUSH
67934: LD_VAR 0 11
67938: PUSH
67939: EMPTY
67940: LIST
67941: LIST
67942: LIST
67943: LIST
67944: ST_TO_ADDR
// exit ;
67945: GO 70635
// end ; if not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
67947: LD_EXP 36
67951: PUSH
67952: LD_VAR 0 1
67956: ARRAY
67957: PPUSH
67958: LD_INT 2
67960: PUSH
67961: LD_INT 30
67963: PUSH
67964: LD_INT 6
67966: PUSH
67967: EMPTY
67968: LIST
67969: LIST
67970: PUSH
67971: LD_INT 30
67973: PUSH
67974: LD_INT 7
67976: PUSH
67977: EMPTY
67978: LIST
67979: LIST
67980: PUSH
67981: LD_INT 30
67983: PUSH
67984: LD_INT 8
67986: PUSH
67987: EMPTY
67988: LIST
67989: LIST
67990: PUSH
67991: EMPTY
67992: LIST
67993: LIST
67994: LIST
67995: LIST
67996: PPUSH
67997: CALL_OW 72
68001: NOT
68002: PUSH
68003: LD_EXP 36
68007: PUSH
68008: LD_VAR 0 1
68012: ARRAY
68013: PPUSH
68014: LD_INT 30
68016: PUSH
68017: LD_INT 3
68019: PUSH
68020: EMPTY
68021: LIST
68022: LIST
68023: PPUSH
68024: CALL_OW 72
68028: NOT
68029: AND
68030: IFFALSE 68102
// begin if eng = tmp then
68032: LD_VAR 0 6
68036: PUSH
68037: LD_VAR 0 4
68041: EQUAL
68042: IFFALSE 68046
// exit ;
68044: GO 70635
// mc_class_case_use := Replace ( mc_class_case_use , base , 1 ) ;
68046: LD_ADDR_EXP 78
68050: PUSH
68051: LD_EXP 78
68055: PPUSH
68056: LD_VAR 0 1
68060: PPUSH
68061: LD_INT 1
68063: PPUSH
68064: CALL_OW 1
68068: ST_TO_ADDR
// result := [ 0 , tmp diff eng , 0 , 0 ] ;
68069: LD_ADDR_VAR 0 2
68073: PUSH
68074: LD_INT 0
68076: PUSH
68077: LD_VAR 0 4
68081: PUSH
68082: LD_VAR 0 6
68086: DIFF
68087: PUSH
68088: LD_INT 0
68090: PUSH
68091: LD_INT 0
68093: PUSH
68094: EMPTY
68095: LIST
68096: LIST
68097: LIST
68098: LIST
68099: ST_TO_ADDR
// exit ;
68100: GO 70635
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
68102: LD_EXP 63
68106: PUSH
68107: LD_EXP 62
68111: PUSH
68112: LD_VAR 0 1
68116: ARRAY
68117: ARRAY
68118: PUSH
68119: LD_EXP 36
68123: PUSH
68124: LD_VAR 0 1
68128: ARRAY
68129: PPUSH
68130: LD_INT 2
68132: PUSH
68133: LD_INT 30
68135: PUSH
68136: LD_INT 6
68138: PUSH
68139: EMPTY
68140: LIST
68141: LIST
68142: PUSH
68143: LD_INT 30
68145: PUSH
68146: LD_INT 7
68148: PUSH
68149: EMPTY
68150: LIST
68151: LIST
68152: PUSH
68153: LD_INT 30
68155: PUSH
68156: LD_INT 8
68158: PUSH
68159: EMPTY
68160: LIST
68161: LIST
68162: PUSH
68163: EMPTY
68164: LIST
68165: LIST
68166: LIST
68167: LIST
68168: PPUSH
68169: CALL_OW 72
68173: AND
68174: PUSH
68175: LD_EXP 36
68179: PUSH
68180: LD_VAR 0 1
68184: ARRAY
68185: PPUSH
68186: LD_INT 30
68188: PUSH
68189: LD_INT 3
68191: PUSH
68192: EMPTY
68193: LIST
68194: LIST
68195: PPUSH
68196: CALL_OW 72
68200: NOT
68201: AND
68202: IFFALSE 68416
// begin if sci >= 6 then
68204: LD_VAR 0 8
68208: PUSH
68209: LD_INT 6
68211: GREATEREQUAL
68212: IFFALSE 68216
// exit ;
68214: GO 70635
// mc_class_case_use := Replace ( mc_class_case_use , base , 2 ) ;
68216: LD_ADDR_EXP 78
68220: PUSH
68221: LD_EXP 78
68225: PPUSH
68226: LD_VAR 0 1
68230: PPUSH
68231: LD_INT 2
68233: PPUSH
68234: CALL_OW 1
68238: ST_TO_ADDR
// sort := SortBySkill ( tmp diff sci , 4 ) ;
68239: LD_ADDR_VAR 0 9
68243: PUSH
68244: LD_VAR 0 4
68248: PUSH
68249: LD_VAR 0 8
68253: DIFF
68254: PPUSH
68255: LD_INT 4
68257: PPUSH
68258: CALL 60674 0 2
68262: ST_TO_ADDR
// p := [ ] ;
68263: LD_ADDR_VAR 0 11
68267: PUSH
68268: EMPTY
68269: ST_TO_ADDR
// if sci < 6 and sort > 6 then
68270: LD_VAR 0 8
68274: PUSH
68275: LD_INT 6
68277: LESS
68278: PUSH
68279: LD_VAR 0 9
68283: PUSH
68284: LD_INT 6
68286: GREATER
68287: AND
68288: IFFALSE 68369
// begin for i = 1 to 6 - sci do
68290: LD_ADDR_VAR 0 3
68294: PUSH
68295: DOUBLE
68296: LD_INT 1
68298: DEC
68299: ST_TO_ADDR
68300: LD_INT 6
68302: PUSH
68303: LD_VAR 0 8
68307: MINUS
68308: PUSH
68309: FOR_TO
68310: IFFALSE 68365
// begin p := Insert ( p , p + 1 , sort [ 1 ] ) ;
68312: LD_ADDR_VAR 0 11
68316: PUSH
68317: LD_VAR 0 11
68321: PPUSH
68322: LD_VAR 0 11
68326: PUSH
68327: LD_INT 1
68329: PLUS
68330: PPUSH
68331: LD_VAR 0 9
68335: PUSH
68336: LD_INT 1
68338: ARRAY
68339: PPUSH
68340: CALL_OW 2
68344: ST_TO_ADDR
// sort := Delete ( sort , 1 ) ;
68345: LD_ADDR_VAR 0 9
68349: PUSH
68350: LD_VAR 0 9
68354: PPUSH
68355: LD_INT 1
68357: PPUSH
68358: CALL_OW 3
68362: ST_TO_ADDR
// end ;
68363: GO 68309
68365: POP
68366: POP
// end else
68367: GO 68389
// if sort then
68369: LD_VAR 0 9
68373: IFFALSE 68389
// p := sort [ 1 ] ;
68375: LD_ADDR_VAR 0 11
68379: PUSH
68380: LD_VAR 0 9
68384: PUSH
68385: LD_INT 1
68387: ARRAY
68388: ST_TO_ADDR
// result := [ 0 , 0 , 0 , p ] ;
68389: LD_ADDR_VAR 0 2
68393: PUSH
68394: LD_INT 0
68396: PUSH
68397: LD_INT 0
68399: PUSH
68400: LD_INT 0
68402: PUSH
68403: LD_VAR 0 11
68407: PUSH
68408: EMPTY
68409: LIST
68410: LIST
68411: LIST
68412: LIST
68413: ST_TO_ADDR
// exit ;
68414: GO 70635
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
68416: LD_EXP 63
68420: PUSH
68421: LD_EXP 62
68425: PUSH
68426: LD_VAR 0 1
68430: ARRAY
68431: ARRAY
68432: PUSH
68433: LD_EXP 36
68437: PUSH
68438: LD_VAR 0 1
68442: ARRAY
68443: PPUSH
68444: LD_INT 2
68446: PUSH
68447: LD_INT 30
68449: PUSH
68450: LD_INT 6
68452: PUSH
68453: EMPTY
68454: LIST
68455: LIST
68456: PUSH
68457: LD_INT 30
68459: PUSH
68460: LD_INT 7
68462: PUSH
68463: EMPTY
68464: LIST
68465: LIST
68466: PUSH
68467: LD_INT 30
68469: PUSH
68470: LD_INT 8
68472: PUSH
68473: EMPTY
68474: LIST
68475: LIST
68476: PUSH
68477: EMPTY
68478: LIST
68479: LIST
68480: LIST
68481: LIST
68482: PPUSH
68483: CALL_OW 72
68487: AND
68488: PUSH
68489: LD_EXP 36
68493: PUSH
68494: LD_VAR 0 1
68498: ARRAY
68499: PPUSH
68500: LD_INT 30
68502: PUSH
68503: LD_INT 3
68505: PUSH
68506: EMPTY
68507: LIST
68508: LIST
68509: PPUSH
68510: CALL_OW 72
68514: AND
68515: IFFALSE 69249
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 3 ) ;
68517: LD_ADDR_EXP 78
68521: PUSH
68522: LD_EXP 78
68526: PPUSH
68527: LD_VAR 0 1
68531: PPUSH
68532: LD_INT 3
68534: PPUSH
68535: CALL_OW 1
68539: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
68540: LD_ADDR_VAR 0 2
68544: PUSH
68545: LD_INT 0
68547: PUSH
68548: LD_INT 0
68550: PUSH
68551: LD_INT 0
68553: PUSH
68554: LD_INT 0
68556: PUSH
68557: EMPTY
68558: LIST
68559: LIST
68560: LIST
68561: LIST
68562: ST_TO_ADDR
// if not eng then
68563: LD_VAR 0 6
68567: NOT
68568: IFFALSE 68631
// begin p := SortBySkill ( tmp , 2 ) [ 1 ] ;
68570: LD_ADDR_VAR 0 11
68574: PUSH
68575: LD_VAR 0 4
68579: PPUSH
68580: LD_INT 2
68582: PPUSH
68583: CALL 60674 0 2
68587: PUSH
68588: LD_INT 1
68590: ARRAY
68591: ST_TO_ADDR
// result := Replace ( result , 2 , p ) ;
68592: LD_ADDR_VAR 0 2
68596: PUSH
68597: LD_VAR 0 2
68601: PPUSH
68602: LD_INT 2
68604: PPUSH
68605: LD_VAR 0 11
68609: PPUSH
68610: CALL_OW 1
68614: ST_TO_ADDR
// tmp := tmp diff p ;
68615: LD_ADDR_VAR 0 4
68619: PUSH
68620: LD_VAR 0 4
68624: PUSH
68625: LD_VAR 0 11
68629: DIFF
68630: ST_TO_ADDR
// end ; if tmp and sci < 6 then
68631: LD_VAR 0 4
68635: PUSH
68636: LD_VAR 0 8
68640: PUSH
68641: LD_INT 6
68643: LESS
68644: AND
68645: IFFALSE 68833
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 4 ) ;
68647: LD_ADDR_VAR 0 9
68651: PUSH
68652: LD_VAR 0 4
68656: PUSH
68657: LD_VAR 0 8
68661: PUSH
68662: LD_VAR 0 7
68666: UNION
68667: DIFF
68668: PPUSH
68669: LD_INT 4
68671: PPUSH
68672: CALL 60674 0 2
68676: ST_TO_ADDR
// p := [ ] ;
68677: LD_ADDR_VAR 0 11
68681: PUSH
68682: EMPTY
68683: ST_TO_ADDR
// if sort then
68684: LD_VAR 0 9
68688: IFFALSE 68804
// for i = 1 to 6 - sci do
68690: LD_ADDR_VAR 0 3
68694: PUSH
68695: DOUBLE
68696: LD_INT 1
68698: DEC
68699: ST_TO_ADDR
68700: LD_INT 6
68702: PUSH
68703: LD_VAR 0 8
68707: MINUS
68708: PUSH
68709: FOR_TO
68710: IFFALSE 68802
// begin if i = sort then
68712: LD_VAR 0 3
68716: PUSH
68717: LD_VAR 0 9
68721: EQUAL
68722: IFFALSE 68726
// break ;
68724: GO 68802
// if GetClass ( i ) = 4 then
68726: LD_VAR 0 3
68730: PPUSH
68731: CALL_OW 257
68735: PUSH
68736: LD_INT 4
68738: EQUAL
68739: IFFALSE 68743
// continue ;
68741: GO 68709
// p := Insert ( p , p + 1 , sort [ i ] ) ;
68743: LD_ADDR_VAR 0 11
68747: PUSH
68748: LD_VAR 0 11
68752: PPUSH
68753: LD_VAR 0 11
68757: PUSH
68758: LD_INT 1
68760: PLUS
68761: PPUSH
68762: LD_VAR 0 9
68766: PUSH
68767: LD_VAR 0 3
68771: ARRAY
68772: PPUSH
68773: CALL_OW 2
68777: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
68778: LD_ADDR_VAR 0 4
68782: PUSH
68783: LD_VAR 0 4
68787: PUSH
68788: LD_VAR 0 9
68792: PUSH
68793: LD_VAR 0 3
68797: ARRAY
68798: DIFF
68799: ST_TO_ADDR
// end ;
68800: GO 68709
68802: POP
68803: POP
// if p then
68804: LD_VAR 0 11
68808: IFFALSE 68833
// result := Replace ( result , 4 , p ) ;
68810: LD_ADDR_VAR 0 2
68814: PUSH
68815: LD_VAR 0 2
68819: PPUSH
68820: LD_INT 4
68822: PPUSH
68823: LD_VAR 0 11
68827: PPUSH
68828: CALL_OW 1
68832: ST_TO_ADDR
// end ; if tmp and mech < 6 then
68833: LD_VAR 0 4
68837: PUSH
68838: LD_VAR 0 7
68842: PUSH
68843: LD_INT 6
68845: LESS
68846: AND
68847: IFFALSE 69035
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
68849: LD_ADDR_VAR 0 9
68853: PUSH
68854: LD_VAR 0 4
68858: PUSH
68859: LD_VAR 0 8
68863: PUSH
68864: LD_VAR 0 7
68868: UNION
68869: DIFF
68870: PPUSH
68871: LD_INT 3
68873: PPUSH
68874: CALL 60674 0 2
68878: ST_TO_ADDR
// p := [ ] ;
68879: LD_ADDR_VAR 0 11
68883: PUSH
68884: EMPTY
68885: ST_TO_ADDR
// if sort then
68886: LD_VAR 0 9
68890: IFFALSE 69006
// for i = 1 to 6 - mech do
68892: LD_ADDR_VAR 0 3
68896: PUSH
68897: DOUBLE
68898: LD_INT 1
68900: DEC
68901: ST_TO_ADDR
68902: LD_INT 6
68904: PUSH
68905: LD_VAR 0 7
68909: MINUS
68910: PUSH
68911: FOR_TO
68912: IFFALSE 69004
// begin if i = sort then
68914: LD_VAR 0 3
68918: PUSH
68919: LD_VAR 0 9
68923: EQUAL
68924: IFFALSE 68928
// break ;
68926: GO 69004
// if GetClass ( i ) = 3 then
68928: LD_VAR 0 3
68932: PPUSH
68933: CALL_OW 257
68937: PUSH
68938: LD_INT 3
68940: EQUAL
68941: IFFALSE 68945
// continue ;
68943: GO 68911
// p := Insert ( p , p + 1 , sort [ i ] ) ;
68945: LD_ADDR_VAR 0 11
68949: PUSH
68950: LD_VAR 0 11
68954: PPUSH
68955: LD_VAR 0 11
68959: PUSH
68960: LD_INT 1
68962: PLUS
68963: PPUSH
68964: LD_VAR 0 9
68968: PUSH
68969: LD_VAR 0 3
68973: ARRAY
68974: PPUSH
68975: CALL_OW 2
68979: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
68980: LD_ADDR_VAR 0 4
68984: PUSH
68985: LD_VAR 0 4
68989: PUSH
68990: LD_VAR 0 9
68994: PUSH
68995: LD_VAR 0 3
68999: ARRAY
69000: DIFF
69001: ST_TO_ADDR
// end ;
69002: GO 68911
69004: POP
69005: POP
// if p then
69006: LD_VAR 0 11
69010: IFFALSE 69035
// result := Replace ( result , 3 , p ) ;
69012: LD_ADDR_VAR 0 2
69016: PUSH
69017: LD_VAR 0 2
69021: PPUSH
69022: LD_INT 3
69024: PPUSH
69025: LD_VAR 0 11
69029: PPUSH
69030: CALL_OW 1
69034: ST_TO_ADDR
// end ; if tmp > 6 and eng < 6 then
69035: LD_VAR 0 4
69039: PUSH
69040: LD_INT 6
69042: GREATER
69043: PUSH
69044: LD_VAR 0 6
69048: PUSH
69049: LD_INT 6
69051: LESS
69052: AND
69053: IFFALSE 69247
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
69055: LD_ADDR_VAR 0 9
69059: PUSH
69060: LD_VAR 0 4
69064: PUSH
69065: LD_VAR 0 8
69069: PUSH
69070: LD_VAR 0 7
69074: UNION
69075: PUSH
69076: LD_VAR 0 6
69080: UNION
69081: DIFF
69082: PPUSH
69083: LD_INT 2
69085: PPUSH
69086: CALL 60674 0 2
69090: ST_TO_ADDR
// p := [ ] ;
69091: LD_ADDR_VAR 0 11
69095: PUSH
69096: EMPTY
69097: ST_TO_ADDR
// if sort then
69098: LD_VAR 0 9
69102: IFFALSE 69218
// for i = 1 to 6 - eng do
69104: LD_ADDR_VAR 0 3
69108: PUSH
69109: DOUBLE
69110: LD_INT 1
69112: DEC
69113: ST_TO_ADDR
69114: LD_INT 6
69116: PUSH
69117: LD_VAR 0 6
69121: MINUS
69122: PUSH
69123: FOR_TO
69124: IFFALSE 69216
// begin if i = sort then
69126: LD_VAR 0 3
69130: PUSH
69131: LD_VAR 0 9
69135: EQUAL
69136: IFFALSE 69140
// break ;
69138: GO 69216
// if GetClass ( i ) = 2 then
69140: LD_VAR 0 3
69144: PPUSH
69145: CALL_OW 257
69149: PUSH
69150: LD_INT 2
69152: EQUAL
69153: IFFALSE 69157
// continue ;
69155: GO 69123
// p := Insert ( p , p + 1 , sort [ i ] ) ;
69157: LD_ADDR_VAR 0 11
69161: PUSH
69162: LD_VAR 0 11
69166: PPUSH
69167: LD_VAR 0 11
69171: PUSH
69172: LD_INT 1
69174: PLUS
69175: PPUSH
69176: LD_VAR 0 9
69180: PUSH
69181: LD_VAR 0 3
69185: ARRAY
69186: PPUSH
69187: CALL_OW 2
69191: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
69192: LD_ADDR_VAR 0 4
69196: PUSH
69197: LD_VAR 0 4
69201: PUSH
69202: LD_VAR 0 9
69206: PUSH
69207: LD_VAR 0 3
69211: ARRAY
69212: DIFF
69213: ST_TO_ADDR
// end ;
69214: GO 69123
69216: POP
69217: POP
// if p then
69218: LD_VAR 0 11
69222: IFFALSE 69247
// result := Replace ( result , 2 , p ) ;
69224: LD_ADDR_VAR 0 2
69228: PUSH
69229: LD_VAR 0 2
69233: PPUSH
69234: LD_INT 2
69236: PPUSH
69237: LD_VAR 0 11
69241: PPUSH
69242: CALL_OW 1
69246: ST_TO_ADDR
// end ; exit ;
69247: GO 70635
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and mc_build_list [ base ] then
69249: LD_EXP 63
69253: PUSH
69254: LD_EXP 62
69258: PUSH
69259: LD_VAR 0 1
69263: ARRAY
69264: ARRAY
69265: NOT
69266: PUSH
69267: LD_EXP 36
69271: PUSH
69272: LD_VAR 0 1
69276: ARRAY
69277: PPUSH
69278: LD_INT 30
69280: PUSH
69281: LD_INT 3
69283: PUSH
69284: EMPTY
69285: LIST
69286: LIST
69287: PPUSH
69288: CALL_OW 72
69292: AND
69293: PUSH
69294: LD_EXP 41
69298: PUSH
69299: LD_VAR 0 1
69303: ARRAY
69304: AND
69305: IFFALSE 69913
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 5 ) ;
69307: LD_ADDR_EXP 78
69311: PUSH
69312: LD_EXP 78
69316: PPUSH
69317: LD_VAR 0 1
69321: PPUSH
69322: LD_INT 5
69324: PPUSH
69325: CALL_OW 1
69329: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
69330: LD_ADDR_VAR 0 2
69334: PUSH
69335: LD_INT 0
69337: PUSH
69338: LD_INT 0
69340: PUSH
69341: LD_INT 0
69343: PUSH
69344: LD_INT 0
69346: PUSH
69347: EMPTY
69348: LIST
69349: LIST
69350: LIST
69351: LIST
69352: ST_TO_ADDR
// if sci > 1 then
69353: LD_VAR 0 8
69357: PUSH
69358: LD_INT 1
69360: GREATER
69361: IFFALSE 69389
// tmp := tmp diff ( sci diff sci [ 1 ] ) ;
69363: LD_ADDR_VAR 0 4
69367: PUSH
69368: LD_VAR 0 4
69372: PUSH
69373: LD_VAR 0 8
69377: PUSH
69378: LD_VAR 0 8
69382: PUSH
69383: LD_INT 1
69385: ARRAY
69386: DIFF
69387: DIFF
69388: ST_TO_ADDR
// if tmp and not sci then
69389: LD_VAR 0 4
69393: PUSH
69394: LD_VAR 0 8
69398: NOT
69399: AND
69400: IFFALSE 69469
// begin sort := SortBySkill ( tmp , 4 ) ;
69402: LD_ADDR_VAR 0 9
69406: PUSH
69407: LD_VAR 0 4
69411: PPUSH
69412: LD_INT 4
69414: PPUSH
69415: CALL 60674 0 2
69419: ST_TO_ADDR
// if sort then
69420: LD_VAR 0 9
69424: IFFALSE 69440
// p := sort [ 1 ] ;
69426: LD_ADDR_VAR 0 11
69430: PUSH
69431: LD_VAR 0 9
69435: PUSH
69436: LD_INT 1
69438: ARRAY
69439: ST_TO_ADDR
// if p then
69440: LD_VAR 0 11
69444: IFFALSE 69469
// result := Replace ( result , 4 , p ) ;
69446: LD_ADDR_VAR 0 2
69450: PUSH
69451: LD_VAR 0 2
69455: PPUSH
69456: LD_INT 4
69458: PPUSH
69459: LD_VAR 0 11
69463: PPUSH
69464: CALL_OW 1
69468: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
69469: LD_ADDR_VAR 0 4
69473: PUSH
69474: LD_VAR 0 4
69478: PUSH
69479: LD_VAR 0 7
69483: DIFF
69484: ST_TO_ADDR
// if tmp and mech < 6 then
69485: LD_VAR 0 4
69489: PUSH
69490: LD_VAR 0 7
69494: PUSH
69495: LD_INT 6
69497: LESS
69498: AND
69499: IFFALSE 69687
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
69501: LD_ADDR_VAR 0 9
69505: PUSH
69506: LD_VAR 0 4
69510: PUSH
69511: LD_VAR 0 8
69515: PUSH
69516: LD_VAR 0 7
69520: UNION
69521: DIFF
69522: PPUSH
69523: LD_INT 3
69525: PPUSH
69526: CALL 60674 0 2
69530: ST_TO_ADDR
// p := [ ] ;
69531: LD_ADDR_VAR 0 11
69535: PUSH
69536: EMPTY
69537: ST_TO_ADDR
// if sort then
69538: LD_VAR 0 9
69542: IFFALSE 69658
// for i = 1 to 6 - mech do
69544: LD_ADDR_VAR 0 3
69548: PUSH
69549: DOUBLE
69550: LD_INT 1
69552: DEC
69553: ST_TO_ADDR
69554: LD_INT 6
69556: PUSH
69557: LD_VAR 0 7
69561: MINUS
69562: PUSH
69563: FOR_TO
69564: IFFALSE 69656
// begin if i = sort then
69566: LD_VAR 0 3
69570: PUSH
69571: LD_VAR 0 9
69575: EQUAL
69576: IFFALSE 69580
// break ;
69578: GO 69656
// if GetClass ( i ) = 3 then
69580: LD_VAR 0 3
69584: PPUSH
69585: CALL_OW 257
69589: PUSH
69590: LD_INT 3
69592: EQUAL
69593: IFFALSE 69597
// continue ;
69595: GO 69563
// p := Insert ( p , p + 1 , sort [ i ] ) ;
69597: LD_ADDR_VAR 0 11
69601: PUSH
69602: LD_VAR 0 11
69606: PPUSH
69607: LD_VAR 0 11
69611: PUSH
69612: LD_INT 1
69614: PLUS
69615: PPUSH
69616: LD_VAR 0 9
69620: PUSH
69621: LD_VAR 0 3
69625: ARRAY
69626: PPUSH
69627: CALL_OW 2
69631: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
69632: LD_ADDR_VAR 0 4
69636: PUSH
69637: LD_VAR 0 4
69641: PUSH
69642: LD_VAR 0 9
69646: PUSH
69647: LD_VAR 0 3
69651: ARRAY
69652: DIFF
69653: ST_TO_ADDR
// end ;
69654: GO 69563
69656: POP
69657: POP
// if p then
69658: LD_VAR 0 11
69662: IFFALSE 69687
// result := Replace ( result , 3 , p ) ;
69664: LD_ADDR_VAR 0 2
69668: PUSH
69669: LD_VAR 0 2
69673: PPUSH
69674: LD_INT 3
69676: PPUSH
69677: LD_VAR 0 11
69681: PPUSH
69682: CALL_OW 1
69686: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
69687: LD_ADDR_VAR 0 4
69691: PUSH
69692: LD_VAR 0 4
69696: PUSH
69697: LD_VAR 0 6
69701: DIFF
69702: ST_TO_ADDR
// if tmp and eng < 6 then
69703: LD_VAR 0 4
69707: PUSH
69708: LD_VAR 0 6
69712: PUSH
69713: LD_INT 6
69715: LESS
69716: AND
69717: IFFALSE 69911
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
69719: LD_ADDR_VAR 0 9
69723: PUSH
69724: LD_VAR 0 4
69728: PUSH
69729: LD_VAR 0 8
69733: PUSH
69734: LD_VAR 0 7
69738: UNION
69739: PUSH
69740: LD_VAR 0 6
69744: UNION
69745: DIFF
69746: PPUSH
69747: LD_INT 2
69749: PPUSH
69750: CALL 60674 0 2
69754: ST_TO_ADDR
// p := [ ] ;
69755: LD_ADDR_VAR 0 11
69759: PUSH
69760: EMPTY
69761: ST_TO_ADDR
// if sort then
69762: LD_VAR 0 9
69766: IFFALSE 69882
// for i = 1 to 6 - eng do
69768: LD_ADDR_VAR 0 3
69772: PUSH
69773: DOUBLE
69774: LD_INT 1
69776: DEC
69777: ST_TO_ADDR
69778: LD_INT 6
69780: PUSH
69781: LD_VAR 0 6
69785: MINUS
69786: PUSH
69787: FOR_TO
69788: IFFALSE 69880
// begin if i = sort then
69790: LD_VAR 0 3
69794: PUSH
69795: LD_VAR 0 9
69799: EQUAL
69800: IFFALSE 69804
// break ;
69802: GO 69880
// if GetClass ( i ) = 2 then
69804: LD_VAR 0 3
69808: PPUSH
69809: CALL_OW 257
69813: PUSH
69814: LD_INT 2
69816: EQUAL
69817: IFFALSE 69821
// continue ;
69819: GO 69787
// p := Insert ( p , p + 1 , sort [ i ] ) ;
69821: LD_ADDR_VAR 0 11
69825: PUSH
69826: LD_VAR 0 11
69830: PPUSH
69831: LD_VAR 0 11
69835: PUSH
69836: LD_INT 1
69838: PLUS
69839: PPUSH
69840: LD_VAR 0 9
69844: PUSH
69845: LD_VAR 0 3
69849: ARRAY
69850: PPUSH
69851: CALL_OW 2
69855: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
69856: LD_ADDR_VAR 0 4
69860: PUSH
69861: LD_VAR 0 4
69865: PUSH
69866: LD_VAR 0 9
69870: PUSH
69871: LD_VAR 0 3
69875: ARRAY
69876: DIFF
69877: ST_TO_ADDR
// end ;
69878: GO 69787
69880: POP
69881: POP
// if p then
69882: LD_VAR 0 11
69886: IFFALSE 69911
// result := Replace ( result , 2 , p ) ;
69888: LD_ADDR_VAR 0 2
69892: PUSH
69893: LD_VAR 0 2
69897: PPUSH
69898: LD_INT 2
69900: PPUSH
69901: LD_VAR 0 11
69905: PPUSH
69906: CALL_OW 1
69910: ST_TO_ADDR
// end ; exit ;
69911: GO 70635
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and not mc_build_list [ base ] then
69913: LD_EXP 63
69917: PUSH
69918: LD_EXP 62
69922: PUSH
69923: LD_VAR 0 1
69927: ARRAY
69928: ARRAY
69929: NOT
69930: PUSH
69931: LD_EXP 36
69935: PUSH
69936: LD_VAR 0 1
69940: ARRAY
69941: PPUSH
69942: LD_INT 30
69944: PUSH
69945: LD_INT 3
69947: PUSH
69948: EMPTY
69949: LIST
69950: LIST
69951: PPUSH
69952: CALL_OW 72
69956: AND
69957: PUSH
69958: LD_EXP 41
69962: PUSH
69963: LD_VAR 0 1
69967: ARRAY
69968: NOT
69969: AND
69970: IFFALSE 70635
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 6 ) ;
69972: LD_ADDR_EXP 78
69976: PUSH
69977: LD_EXP 78
69981: PPUSH
69982: LD_VAR 0 1
69986: PPUSH
69987: LD_INT 6
69989: PPUSH
69990: CALL_OW 1
69994: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
69995: LD_ADDR_VAR 0 2
69999: PUSH
70000: LD_INT 0
70002: PUSH
70003: LD_INT 0
70005: PUSH
70006: LD_INT 0
70008: PUSH
70009: LD_INT 0
70011: PUSH
70012: EMPTY
70013: LIST
70014: LIST
70015: LIST
70016: LIST
70017: ST_TO_ADDR
// if sci >= 1 then
70018: LD_VAR 0 8
70022: PUSH
70023: LD_INT 1
70025: GREATEREQUAL
70026: IFFALSE 70048
// tmp := tmp diff sci [ 1 ] ;
70028: LD_ADDR_VAR 0 4
70032: PUSH
70033: LD_VAR 0 4
70037: PUSH
70038: LD_VAR 0 8
70042: PUSH
70043: LD_INT 1
70045: ARRAY
70046: DIFF
70047: ST_TO_ADDR
// if tmp and not sci then
70048: LD_VAR 0 4
70052: PUSH
70053: LD_VAR 0 8
70057: NOT
70058: AND
70059: IFFALSE 70128
// begin sort := SortBySkill ( tmp , 4 ) ;
70061: LD_ADDR_VAR 0 9
70065: PUSH
70066: LD_VAR 0 4
70070: PPUSH
70071: LD_INT 4
70073: PPUSH
70074: CALL 60674 0 2
70078: ST_TO_ADDR
// if sort then
70079: LD_VAR 0 9
70083: IFFALSE 70099
// p := sort [ 1 ] ;
70085: LD_ADDR_VAR 0 11
70089: PUSH
70090: LD_VAR 0 9
70094: PUSH
70095: LD_INT 1
70097: ARRAY
70098: ST_TO_ADDR
// if p then
70099: LD_VAR 0 11
70103: IFFALSE 70128
// result := Replace ( result , 4 , p ) ;
70105: LD_ADDR_VAR 0 2
70109: PUSH
70110: LD_VAR 0 2
70114: PPUSH
70115: LD_INT 4
70117: PPUSH
70118: LD_VAR 0 11
70122: PPUSH
70123: CALL_OW 1
70127: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
70128: LD_ADDR_VAR 0 4
70132: PUSH
70133: LD_VAR 0 4
70137: PUSH
70138: LD_VAR 0 7
70142: DIFF
70143: ST_TO_ADDR
// if tmp and mech < 6 then
70144: LD_VAR 0 4
70148: PUSH
70149: LD_VAR 0 7
70153: PUSH
70154: LD_INT 6
70156: LESS
70157: AND
70158: IFFALSE 70340
// begin sort := SortBySkill ( tmp diff mech , 3 ) ;
70160: LD_ADDR_VAR 0 9
70164: PUSH
70165: LD_VAR 0 4
70169: PUSH
70170: LD_VAR 0 7
70174: DIFF
70175: PPUSH
70176: LD_INT 3
70178: PPUSH
70179: CALL 60674 0 2
70183: ST_TO_ADDR
// p := [ ] ;
70184: LD_ADDR_VAR 0 11
70188: PUSH
70189: EMPTY
70190: ST_TO_ADDR
// if sort then
70191: LD_VAR 0 9
70195: IFFALSE 70311
// for i = 1 to 6 - mech do
70197: LD_ADDR_VAR 0 3
70201: PUSH
70202: DOUBLE
70203: LD_INT 1
70205: DEC
70206: ST_TO_ADDR
70207: LD_INT 6
70209: PUSH
70210: LD_VAR 0 7
70214: MINUS
70215: PUSH
70216: FOR_TO
70217: IFFALSE 70309
// begin if i = sort then
70219: LD_VAR 0 3
70223: PUSH
70224: LD_VAR 0 9
70228: EQUAL
70229: IFFALSE 70233
// break ;
70231: GO 70309
// if GetClass ( i ) = 3 then
70233: LD_VAR 0 3
70237: PPUSH
70238: CALL_OW 257
70242: PUSH
70243: LD_INT 3
70245: EQUAL
70246: IFFALSE 70250
// continue ;
70248: GO 70216
// p := Insert ( p , p + 1 , sort [ i ] ) ;
70250: LD_ADDR_VAR 0 11
70254: PUSH
70255: LD_VAR 0 11
70259: PPUSH
70260: LD_VAR 0 11
70264: PUSH
70265: LD_INT 1
70267: PLUS
70268: PPUSH
70269: LD_VAR 0 9
70273: PUSH
70274: LD_VAR 0 3
70278: ARRAY
70279: PPUSH
70280: CALL_OW 2
70284: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
70285: LD_ADDR_VAR 0 4
70289: PUSH
70290: LD_VAR 0 4
70294: PUSH
70295: LD_VAR 0 9
70299: PUSH
70300: LD_VAR 0 3
70304: ARRAY
70305: DIFF
70306: ST_TO_ADDR
// end ;
70307: GO 70216
70309: POP
70310: POP
// if p then
70311: LD_VAR 0 11
70315: IFFALSE 70340
// result := Replace ( result , 3 , p ) ;
70317: LD_ADDR_VAR 0 2
70321: PUSH
70322: LD_VAR 0 2
70326: PPUSH
70327: LD_INT 3
70329: PPUSH
70330: LD_VAR 0 11
70334: PPUSH
70335: CALL_OW 1
70339: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
70340: LD_ADDR_VAR 0 4
70344: PUSH
70345: LD_VAR 0 4
70349: PUSH
70350: LD_VAR 0 6
70354: DIFF
70355: ST_TO_ADDR
// if tmp and eng < 4 then
70356: LD_VAR 0 4
70360: PUSH
70361: LD_VAR 0 6
70365: PUSH
70366: LD_INT 4
70368: LESS
70369: AND
70370: IFFALSE 70560
// begin sort := SortBySkill ( tmp diff ( mech union eng ) , 2 ) ;
70372: LD_ADDR_VAR 0 9
70376: PUSH
70377: LD_VAR 0 4
70381: PUSH
70382: LD_VAR 0 7
70386: PUSH
70387: LD_VAR 0 6
70391: UNION
70392: DIFF
70393: PPUSH
70394: LD_INT 2
70396: PPUSH
70397: CALL 60674 0 2
70401: ST_TO_ADDR
// p := [ ] ;
70402: LD_ADDR_VAR 0 11
70406: PUSH
70407: EMPTY
70408: ST_TO_ADDR
// if sort then
70409: LD_VAR 0 9
70413: IFFALSE 70529
// for i = 1 to 4 - eng do
70415: LD_ADDR_VAR 0 3
70419: PUSH
70420: DOUBLE
70421: LD_INT 1
70423: DEC
70424: ST_TO_ADDR
70425: LD_INT 4
70427: PUSH
70428: LD_VAR 0 6
70432: MINUS
70433: PUSH
70434: FOR_TO
70435: IFFALSE 70527
// begin if i = sort then
70437: LD_VAR 0 3
70441: PUSH
70442: LD_VAR 0 9
70446: EQUAL
70447: IFFALSE 70451
// break ;
70449: GO 70527
// if GetClass ( i ) = 2 then
70451: LD_VAR 0 3
70455: PPUSH
70456: CALL_OW 257
70460: PUSH
70461: LD_INT 2
70463: EQUAL
70464: IFFALSE 70468
// continue ;
70466: GO 70434
// p := Insert ( p , p + 1 , sort [ i ] ) ;
70468: LD_ADDR_VAR 0 11
70472: PUSH
70473: LD_VAR 0 11
70477: PPUSH
70478: LD_VAR 0 11
70482: PUSH
70483: LD_INT 1
70485: PLUS
70486: PPUSH
70487: LD_VAR 0 9
70491: PUSH
70492: LD_VAR 0 3
70496: ARRAY
70497: PPUSH
70498: CALL_OW 2
70502: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
70503: LD_ADDR_VAR 0 4
70507: PUSH
70508: LD_VAR 0 4
70512: PUSH
70513: LD_VAR 0 9
70517: PUSH
70518: LD_VAR 0 3
70522: ARRAY
70523: DIFF
70524: ST_TO_ADDR
// end ;
70525: GO 70434
70527: POP
70528: POP
// if p then
70529: LD_VAR 0 11
70533: IFFALSE 70558
// result := Replace ( result , 2 , p ) ;
70535: LD_ADDR_VAR 0 2
70539: PUSH
70540: LD_VAR 0 2
70544: PPUSH
70545: LD_INT 2
70547: PPUSH
70548: LD_VAR 0 11
70552: PPUSH
70553: CALL_OW 1
70557: ST_TO_ADDR
// end else
70558: GO 70604
// for i = eng downto 5 do
70560: LD_ADDR_VAR 0 3
70564: PUSH
70565: DOUBLE
70566: LD_VAR 0 6
70570: INC
70571: ST_TO_ADDR
70572: LD_INT 5
70574: PUSH
70575: FOR_DOWNTO
70576: IFFALSE 70602
// tmp := tmp union eng [ i ] ;
70578: LD_ADDR_VAR 0 4
70582: PUSH
70583: LD_VAR 0 4
70587: PUSH
70588: LD_VAR 0 6
70592: PUSH
70593: LD_VAR 0 3
70597: ARRAY
70598: UNION
70599: ST_TO_ADDR
70600: GO 70575
70602: POP
70603: POP
// result := Replace ( result , 1 , tmp diff sol ) ;
70604: LD_ADDR_VAR 0 2
70608: PUSH
70609: LD_VAR 0 2
70613: PPUSH
70614: LD_INT 1
70616: PPUSH
70617: LD_VAR 0 4
70621: PUSH
70622: LD_VAR 0 5
70626: DIFF
70627: PPUSH
70628: CALL_OW 1
70632: ST_TO_ADDR
// exit ;
70633: GO 70635
// end ; end ;
70635: LD_VAR 0 2
70639: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
70640: LD_INT 0
70642: PPUSH
70643: PPUSH
70644: PPUSH
// if not mc_bases then
70645: LD_EXP 36
70649: NOT
70650: IFFALSE 70654
// exit ;
70652: GO 70760
// for i = 1 to mc_bases do
70654: LD_ADDR_VAR 0 2
70658: PUSH
70659: DOUBLE
70660: LD_INT 1
70662: DEC
70663: ST_TO_ADDR
70664: LD_EXP 36
70668: PUSH
70669: FOR_TO
70670: IFFALSE 70751
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
70672: LD_ADDR_VAR 0 3
70676: PUSH
70677: LD_EXP 36
70681: PUSH
70682: LD_VAR 0 2
70686: ARRAY
70687: PPUSH
70688: LD_INT 21
70690: PUSH
70691: LD_INT 3
70693: PUSH
70694: EMPTY
70695: LIST
70696: LIST
70697: PUSH
70698: LD_INT 3
70700: PUSH
70701: LD_INT 24
70703: PUSH
70704: LD_INT 1000
70706: PUSH
70707: EMPTY
70708: LIST
70709: LIST
70710: PUSH
70711: EMPTY
70712: LIST
70713: LIST
70714: PUSH
70715: EMPTY
70716: LIST
70717: LIST
70718: PPUSH
70719: CALL_OW 72
70723: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
70724: LD_ADDR_EXP 37
70728: PUSH
70729: LD_EXP 37
70733: PPUSH
70734: LD_VAR 0 2
70738: PPUSH
70739: LD_VAR 0 3
70743: PPUSH
70744: CALL_OW 1
70748: ST_TO_ADDR
// end ;
70749: GO 70669
70751: POP
70752: POP
// RaiseSailEvent ( 101 ) ;
70753: LD_INT 101
70755: PPUSH
70756: CALL_OW 427
// end ;
70760: LD_VAR 0 1
70764: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
70765: LD_INT 0
70767: PPUSH
70768: PPUSH
70769: PPUSH
70770: PPUSH
70771: PPUSH
70772: PPUSH
70773: PPUSH
// if not mc_bases then
70774: LD_EXP 36
70778: NOT
70779: IFFALSE 70783
// exit ;
70781: GO 71356
// for i = 1 to mc_bases do
70783: LD_ADDR_VAR 0 2
70787: PUSH
70788: DOUBLE
70789: LD_INT 1
70791: DEC
70792: ST_TO_ADDR
70793: LD_EXP 36
70797: PUSH
70798: FOR_TO
70799: IFFALSE 71347
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 800 ] ] ] ] ) ;
70801: LD_ADDR_VAR 0 5
70805: PUSH
70806: LD_EXP 36
70810: PUSH
70811: LD_VAR 0 2
70815: ARRAY
70816: PUSH
70817: LD_EXP 65
70821: PUSH
70822: LD_VAR 0 2
70826: ARRAY
70827: UNION
70828: PPUSH
70829: LD_INT 21
70831: PUSH
70832: LD_INT 1
70834: PUSH
70835: EMPTY
70836: LIST
70837: LIST
70838: PUSH
70839: LD_INT 1
70841: PUSH
70842: LD_INT 3
70844: PUSH
70845: LD_INT 54
70847: PUSH
70848: EMPTY
70849: LIST
70850: PUSH
70851: EMPTY
70852: LIST
70853: LIST
70854: PUSH
70855: LD_INT 3
70857: PUSH
70858: LD_INT 24
70860: PUSH
70861: LD_INT 800
70863: PUSH
70864: EMPTY
70865: LIST
70866: LIST
70867: PUSH
70868: EMPTY
70869: LIST
70870: LIST
70871: PUSH
70872: EMPTY
70873: LIST
70874: LIST
70875: LIST
70876: PUSH
70877: EMPTY
70878: LIST
70879: LIST
70880: PPUSH
70881: CALL_OW 72
70885: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
70886: LD_ADDR_VAR 0 6
70890: PUSH
70891: LD_EXP 36
70895: PUSH
70896: LD_VAR 0 2
70900: ARRAY
70901: PPUSH
70902: LD_INT 21
70904: PUSH
70905: LD_INT 1
70907: PUSH
70908: EMPTY
70909: LIST
70910: LIST
70911: PUSH
70912: LD_INT 1
70914: PUSH
70915: LD_INT 3
70917: PUSH
70918: LD_INT 54
70920: PUSH
70921: EMPTY
70922: LIST
70923: PUSH
70924: EMPTY
70925: LIST
70926: LIST
70927: PUSH
70928: LD_INT 3
70930: PUSH
70931: LD_INT 24
70933: PUSH
70934: LD_INT 250
70936: PUSH
70937: EMPTY
70938: LIST
70939: LIST
70940: PUSH
70941: EMPTY
70942: LIST
70943: LIST
70944: PUSH
70945: EMPTY
70946: LIST
70947: LIST
70948: LIST
70949: PUSH
70950: EMPTY
70951: LIST
70952: LIST
70953: PPUSH
70954: CALL_OW 72
70958: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
70959: LD_ADDR_VAR 0 7
70963: PUSH
70964: LD_VAR 0 5
70968: PUSH
70969: LD_VAR 0 6
70973: DIFF
70974: ST_TO_ADDR
// if not need_heal_1 then
70975: LD_VAR 0 6
70979: NOT
70980: IFFALSE 71013
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , [ ] ) else
70982: LD_ADDR_EXP 39
70986: PUSH
70987: LD_EXP 39
70991: PPUSH
70992: LD_VAR 0 2
70996: PUSH
70997: LD_INT 1
70999: PUSH
71000: EMPTY
71001: LIST
71002: LIST
71003: PPUSH
71004: EMPTY
71005: PPUSH
71006: CALL 26426 0 3
71010: ST_TO_ADDR
71011: GO 71083
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , UnitFilter ( mc_need_heal [ i ] [ 1 ] , [ f_not , [ f_lives , 1000 ] ] ) union need_heal_1 ) ;
71013: LD_ADDR_EXP 39
71017: PUSH
71018: LD_EXP 39
71022: PPUSH
71023: LD_VAR 0 2
71027: PUSH
71028: LD_INT 1
71030: PUSH
71031: EMPTY
71032: LIST
71033: LIST
71034: PPUSH
71035: LD_EXP 39
71039: PUSH
71040: LD_VAR 0 2
71044: ARRAY
71045: PUSH
71046: LD_INT 1
71048: ARRAY
71049: PPUSH
71050: LD_INT 3
71052: PUSH
71053: LD_INT 24
71055: PUSH
71056: LD_INT 1000
71058: PUSH
71059: EMPTY
71060: LIST
71061: LIST
71062: PUSH
71063: EMPTY
71064: LIST
71065: LIST
71066: PPUSH
71067: CALL_OW 72
71071: PUSH
71072: LD_VAR 0 6
71076: UNION
71077: PPUSH
71078: CALL 26426 0 3
71082: ST_TO_ADDR
// if not need_heal_2 then
71083: LD_VAR 0 7
71087: NOT
71088: IFFALSE 71121
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , [ ] ) else
71090: LD_ADDR_EXP 39
71094: PUSH
71095: LD_EXP 39
71099: PPUSH
71100: LD_VAR 0 2
71104: PUSH
71105: LD_INT 2
71107: PUSH
71108: EMPTY
71109: LIST
71110: LIST
71111: PPUSH
71112: EMPTY
71113: PPUSH
71114: CALL 26426 0 3
71118: ST_TO_ADDR
71119: GO 71153
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
71121: LD_ADDR_EXP 39
71125: PUSH
71126: LD_EXP 39
71130: PPUSH
71131: LD_VAR 0 2
71135: PUSH
71136: LD_INT 2
71138: PUSH
71139: EMPTY
71140: LIST
71141: LIST
71142: PPUSH
71143: LD_VAR 0 7
71147: PPUSH
71148: CALL 26426 0 3
71152: ST_TO_ADDR
// if need_heal_2 then
71153: LD_VAR 0 7
71157: IFFALSE 71329
// for j in need_heal_2 do
71159: LD_ADDR_VAR 0 3
71163: PUSH
71164: LD_VAR 0 7
71168: PUSH
71169: FOR_IN
71170: IFFALSE 71327
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
71172: LD_ADDR_VAR 0 5
71176: PUSH
71177: LD_EXP 36
71181: PUSH
71182: LD_VAR 0 2
71186: ARRAY
71187: PPUSH
71188: LD_INT 2
71190: PUSH
71191: LD_INT 30
71193: PUSH
71194: LD_INT 6
71196: PUSH
71197: EMPTY
71198: LIST
71199: LIST
71200: PUSH
71201: LD_INT 30
71203: PUSH
71204: LD_INT 7
71206: PUSH
71207: EMPTY
71208: LIST
71209: LIST
71210: PUSH
71211: LD_INT 30
71213: PUSH
71214: LD_INT 8
71216: PUSH
71217: EMPTY
71218: LIST
71219: LIST
71220: PUSH
71221: LD_INT 30
71223: PUSH
71224: LD_INT 0
71226: PUSH
71227: EMPTY
71228: LIST
71229: LIST
71230: PUSH
71231: LD_INT 30
71233: PUSH
71234: LD_INT 1
71236: PUSH
71237: EMPTY
71238: LIST
71239: LIST
71240: PUSH
71241: LD_INT 25
71243: PUSH
71244: LD_INT 4
71246: PUSH
71247: EMPTY
71248: LIST
71249: LIST
71250: PUSH
71251: EMPTY
71252: LIST
71253: LIST
71254: LIST
71255: LIST
71256: LIST
71257: LIST
71258: LIST
71259: PPUSH
71260: CALL_OW 72
71264: ST_TO_ADDR
// if tmp then
71265: LD_VAR 0 5
71269: IFFALSE 71325
// begin k := NearestUnitToUnit ( tmp , j ) ;
71271: LD_ADDR_VAR 0 4
71275: PUSH
71276: LD_VAR 0 5
71280: PPUSH
71281: LD_VAR 0 3
71285: PPUSH
71286: CALL_OW 74
71290: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
71291: LD_VAR 0 3
71295: PPUSH
71296: LD_VAR 0 4
71300: PPUSH
71301: CALL_OW 296
71305: PUSH
71306: LD_INT 7
71308: GREATER
71309: IFFALSE 71325
// ComMoveUnit ( j , k ) ;
71311: LD_VAR 0 3
71315: PPUSH
71316: LD_VAR 0 4
71320: PPUSH
71321: CALL_OW 112
// end ; end ;
71325: GO 71169
71327: POP
71328: POP
// if not need_heal_1 and not need_heal_2 then
71329: LD_VAR 0 6
71333: NOT
71334: PUSH
71335: LD_VAR 0 7
71339: NOT
71340: AND
71341: IFFALSE 71345
// continue ;
71343: GO 70798
// end ;
71345: GO 70798
71347: POP
71348: POP
// RaiseSailEvent ( 102 ) ;
71349: LD_INT 102
71351: PPUSH
71352: CALL_OW 427
// end ;
71356: LD_VAR 0 1
71360: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp , cranes ; begin
71361: LD_INT 0
71363: PPUSH
71364: PPUSH
71365: PPUSH
71366: PPUSH
71367: PPUSH
71368: PPUSH
// if not mc_bases then
71369: LD_EXP 36
71373: NOT
71374: IFFALSE 71378
// exit ;
71376: GO 72088
// for i = 1 to mc_bases do
71378: LD_ADDR_VAR 0 2
71382: PUSH
71383: DOUBLE
71384: LD_INT 1
71386: DEC
71387: ST_TO_ADDR
71388: LD_EXP 36
71392: PUSH
71393: FOR_TO
71394: IFFALSE 72086
// begin if not mc_building_need_repair [ i ] then
71396: LD_EXP 37
71400: PUSH
71401: LD_VAR 0 2
71405: ARRAY
71406: NOT
71407: IFFALSE 71581
// begin cranes := UnitFilter ( mc_vehicles [ i ] , [ [ f_not , [ f_lives , 1000 ] ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ] ) ;
71409: LD_ADDR_VAR 0 6
71413: PUSH
71414: LD_EXP 55
71418: PUSH
71419: LD_VAR 0 2
71423: ARRAY
71424: PPUSH
71425: LD_INT 3
71427: PUSH
71428: LD_INT 24
71430: PUSH
71431: LD_INT 1000
71433: PUSH
71434: EMPTY
71435: LIST
71436: LIST
71437: PUSH
71438: EMPTY
71439: LIST
71440: LIST
71441: PUSH
71442: LD_INT 2
71444: PUSH
71445: LD_INT 34
71447: PUSH
71448: LD_INT 13
71450: PUSH
71451: EMPTY
71452: LIST
71453: LIST
71454: PUSH
71455: LD_INT 34
71457: PUSH
71458: LD_INT 52
71460: PUSH
71461: EMPTY
71462: LIST
71463: LIST
71464: PUSH
71465: EMPTY
71466: LIST
71467: LIST
71468: LIST
71469: PUSH
71470: EMPTY
71471: LIST
71472: LIST
71473: PPUSH
71474: CALL_OW 72
71478: ST_TO_ADDR
// if cranes then
71479: LD_VAR 0 6
71483: IFFALSE 71545
// for j in cranes do
71485: LD_ADDR_VAR 0 3
71489: PUSH
71490: LD_VAR 0 6
71494: PUSH
71495: FOR_IN
71496: IFFALSE 71543
// if not IsInArea ( j , mc_parking [ i ] ) then
71498: LD_VAR 0 3
71502: PPUSH
71503: LD_EXP 60
71507: PUSH
71508: LD_VAR 0 2
71512: ARRAY
71513: PPUSH
71514: CALL_OW 308
71518: NOT
71519: IFFALSE 71541
// ComMoveToArea ( j , mc_parking [ i ] ) ;
71521: LD_VAR 0 3
71525: PPUSH
71526: LD_EXP 60
71530: PUSH
71531: LD_VAR 0 2
71535: ARRAY
71536: PPUSH
71537: CALL_OW 113
71541: GO 71495
71543: POP
71544: POP
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
71545: LD_ADDR_EXP 38
71549: PUSH
71550: LD_EXP 38
71554: PPUSH
71555: LD_VAR 0 2
71559: PPUSH
71560: EMPTY
71561: PPUSH
71562: CALL_OW 1
71566: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
71567: LD_VAR 0 2
71571: PPUSH
71572: LD_INT 101
71574: PPUSH
71575: CALL 66473 0 2
// continue ;
71579: GO 71393
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
71581: LD_ADDR_EXP 42
71585: PUSH
71586: LD_EXP 42
71590: PPUSH
71591: LD_VAR 0 2
71595: PPUSH
71596: EMPTY
71597: PPUSH
71598: CALL_OW 1
71602: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
71603: LD_VAR 0 2
71607: PPUSH
71608: LD_INT 103
71610: PPUSH
71611: CALL 66473 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
71615: LD_ADDR_VAR 0 5
71619: PUSH
71620: LD_EXP 36
71624: PUSH
71625: LD_VAR 0 2
71629: ARRAY
71630: PUSH
71631: LD_EXP 65
71635: PUSH
71636: LD_VAR 0 2
71640: ARRAY
71641: UNION
71642: PPUSH
71643: LD_INT 2
71645: PUSH
71646: LD_INT 25
71648: PUSH
71649: LD_INT 2
71651: PUSH
71652: EMPTY
71653: LIST
71654: LIST
71655: PUSH
71656: LD_INT 25
71658: PUSH
71659: LD_INT 16
71661: PUSH
71662: EMPTY
71663: LIST
71664: LIST
71665: PUSH
71666: EMPTY
71667: LIST
71668: LIST
71669: LIST
71670: PUSH
71671: EMPTY
71672: LIST
71673: PPUSH
71674: CALL_OW 72
71678: ST_TO_ADDR
// cranes := UnitFilter ( mc_vehicles [ i ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ) ;
71679: LD_ADDR_VAR 0 6
71683: PUSH
71684: LD_EXP 55
71688: PUSH
71689: LD_VAR 0 2
71693: ARRAY
71694: PPUSH
71695: LD_INT 2
71697: PUSH
71698: LD_INT 34
71700: PUSH
71701: LD_INT 13
71703: PUSH
71704: EMPTY
71705: LIST
71706: LIST
71707: PUSH
71708: LD_INT 34
71710: PUSH
71711: LD_INT 52
71713: PUSH
71714: EMPTY
71715: LIST
71716: LIST
71717: PUSH
71718: EMPTY
71719: LIST
71720: LIST
71721: LIST
71722: PPUSH
71723: CALL_OW 72
71727: ST_TO_ADDR
// if cranes then
71728: LD_VAR 0 6
71732: IFFALSE 71868
// begin for j in cranes do
71734: LD_ADDR_VAR 0 3
71738: PUSH
71739: LD_VAR 0 6
71743: PUSH
71744: FOR_IN
71745: IFFALSE 71866
// if GetLives ( j ) >= 500 and not HasTask ( j ) then
71747: LD_VAR 0 3
71751: PPUSH
71752: CALL_OW 256
71756: PUSH
71757: LD_INT 500
71759: GREATEREQUAL
71760: PUSH
71761: LD_VAR 0 3
71765: PPUSH
71766: CALL_OW 314
71770: NOT
71771: AND
71772: IFFALSE 71806
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) else
71774: LD_VAR 0 3
71778: PPUSH
71779: LD_EXP 37
71783: PUSH
71784: LD_VAR 0 2
71788: ARRAY
71789: PPUSH
71790: LD_VAR 0 3
71794: PPUSH
71795: CALL_OW 74
71799: PPUSH
71800: CALL_OW 130
71804: GO 71864
// if GetLives ( j ) < 500 and not IsInArea ( j , mc_parking [ i ] ) then
71806: LD_VAR 0 3
71810: PPUSH
71811: CALL_OW 256
71815: PUSH
71816: LD_INT 500
71818: LESS
71819: PUSH
71820: LD_VAR 0 3
71824: PPUSH
71825: LD_EXP 60
71829: PUSH
71830: LD_VAR 0 2
71834: ARRAY
71835: PPUSH
71836: CALL_OW 308
71840: NOT
71841: AND
71842: IFFALSE 71864
// ComMoveToArea ( j , mc_parking [ i ] ) ;
71844: LD_VAR 0 3
71848: PPUSH
71849: LD_EXP 60
71853: PUSH
71854: LD_VAR 0 2
71858: ARRAY
71859: PPUSH
71860: CALL_OW 113
71864: GO 71744
71866: POP
71867: POP
// end ; if not tmp then
71868: LD_VAR 0 5
71872: NOT
71873: IFFALSE 71877
// continue ;
71875: GO 71393
// for j in tmp do
71877: LD_ADDR_VAR 0 3
71881: PUSH
71882: LD_VAR 0 5
71886: PUSH
71887: FOR_IN
71888: IFFALSE 72082
// begin if mc_need_heal [ i ] then
71890: LD_EXP 39
71894: PUSH
71895: LD_VAR 0 2
71899: ARRAY
71900: IFFALSE 71948
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
71902: LD_VAR 0 3
71906: PUSH
71907: LD_EXP 39
71911: PUSH
71912: LD_VAR 0 2
71916: ARRAY
71917: PUSH
71918: LD_INT 1
71920: ARRAY
71921: IN
71922: PUSH
71923: LD_VAR 0 3
71927: PUSH
71928: LD_EXP 39
71932: PUSH
71933: LD_VAR 0 2
71937: ARRAY
71938: PUSH
71939: LD_INT 2
71941: ARRAY
71942: IN
71943: OR
71944: IFFALSE 71948
// continue ;
71946: GO 71887
// if IsInUnit ( j ) then
71948: LD_VAR 0 3
71952: PPUSH
71953: CALL_OW 310
71957: IFFALSE 71968
// ComExitBuilding ( j ) ;
71959: LD_VAR 0 3
71963: PPUSH
71964: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
71968: LD_VAR 0 3
71972: PUSH
71973: LD_EXP 38
71977: PUSH
71978: LD_VAR 0 2
71982: ARRAY
71983: IN
71984: NOT
71985: IFFALSE 72043
// begin SetTag ( j , 101 ) ;
71987: LD_VAR 0 3
71991: PPUSH
71992: LD_INT 101
71994: PPUSH
71995: CALL_OW 109
// mc_building_repairs := ReplaceIn ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
71999: LD_ADDR_EXP 38
72003: PUSH
72004: LD_EXP 38
72008: PPUSH
72009: LD_VAR 0 2
72013: PUSH
72014: LD_EXP 38
72018: PUSH
72019: LD_VAR 0 2
72023: ARRAY
72024: PUSH
72025: LD_INT 1
72027: PLUS
72028: PUSH
72029: EMPTY
72030: LIST
72031: LIST
72032: PPUSH
72033: LD_VAR 0 3
72037: PPUSH
72038: CALL 26426 0 3
72042: ST_TO_ADDR
// end ; wait ( 1 ) ;
72043: LD_INT 1
72045: PPUSH
72046: CALL_OW 67
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) ;
72050: LD_VAR 0 3
72054: PPUSH
72055: LD_EXP 37
72059: PUSH
72060: LD_VAR 0 2
72064: ARRAY
72065: PPUSH
72066: LD_VAR 0 3
72070: PPUSH
72071: CALL_OW 74
72075: PPUSH
72076: CALL_OW 130
// end ;
72080: GO 71887
72082: POP
72083: POP
// end ;
72084: GO 71393
72086: POP
72087: POP
// end ;
72088: LD_VAR 0 1
72092: RET
// export function MC_Heal ; var i , j , tmp ; begin
72093: LD_INT 0
72095: PPUSH
72096: PPUSH
72097: PPUSH
72098: PPUSH
// if not mc_bases then
72099: LD_EXP 36
72103: NOT
72104: IFFALSE 72108
// exit ;
72106: GO 72510
// for i = 1 to mc_bases do
72108: LD_ADDR_VAR 0 2
72112: PUSH
72113: DOUBLE
72114: LD_INT 1
72116: DEC
72117: ST_TO_ADDR
72118: LD_EXP 36
72122: PUSH
72123: FOR_TO
72124: IFFALSE 72508
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
72126: LD_EXP 39
72130: PUSH
72131: LD_VAR 0 2
72135: ARRAY
72136: PUSH
72137: LD_INT 1
72139: ARRAY
72140: NOT
72141: PUSH
72142: LD_EXP 39
72146: PUSH
72147: LD_VAR 0 2
72151: ARRAY
72152: PUSH
72153: LD_INT 2
72155: ARRAY
72156: NOT
72157: AND
72158: IFFALSE 72196
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
72160: LD_ADDR_EXP 40
72164: PUSH
72165: LD_EXP 40
72169: PPUSH
72170: LD_VAR 0 2
72174: PPUSH
72175: EMPTY
72176: PPUSH
72177: CALL_OW 1
72181: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
72182: LD_VAR 0 2
72186: PPUSH
72187: LD_INT 102
72189: PPUSH
72190: CALL 66473 0 2
// continue ;
72194: GO 72123
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
72196: LD_ADDR_VAR 0 4
72200: PUSH
72201: LD_EXP 36
72205: PUSH
72206: LD_VAR 0 2
72210: ARRAY
72211: PPUSH
72212: LD_INT 25
72214: PUSH
72215: LD_INT 4
72217: PUSH
72218: EMPTY
72219: LIST
72220: LIST
72221: PPUSH
72222: CALL_OW 72
72226: ST_TO_ADDR
// if not tmp then
72227: LD_VAR 0 4
72231: NOT
72232: IFFALSE 72236
// continue ;
72234: GO 72123
// if mc_taming [ i ] then
72236: LD_EXP 67
72240: PUSH
72241: LD_VAR 0 2
72245: ARRAY
72246: IFFALSE 72270
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
72248: LD_ADDR_EXP 67
72252: PUSH
72253: LD_EXP 67
72257: PPUSH
72258: LD_VAR 0 2
72262: PPUSH
72263: EMPTY
72264: PPUSH
72265: CALL_OW 1
72269: ST_TO_ADDR
// for j in tmp do
72270: LD_ADDR_VAR 0 3
72274: PUSH
72275: LD_VAR 0 4
72279: PUSH
72280: FOR_IN
72281: IFFALSE 72504
// begin if IsInUnit ( j ) then
72283: LD_VAR 0 3
72287: PPUSH
72288: CALL_OW 310
72292: IFFALSE 72303
// ComExitBuilding ( j ) ;
72294: LD_VAR 0 3
72298: PPUSH
72299: CALL_OW 122
// if not j in mc_healers [ i ] then
72303: LD_VAR 0 3
72307: PUSH
72308: LD_EXP 40
72312: PUSH
72313: LD_VAR 0 2
72317: ARRAY
72318: IN
72319: NOT
72320: IFFALSE 72366
// mc_healers := ReplaceIn ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
72322: LD_ADDR_EXP 40
72326: PUSH
72327: LD_EXP 40
72331: PPUSH
72332: LD_VAR 0 2
72336: PUSH
72337: LD_EXP 40
72341: PUSH
72342: LD_VAR 0 2
72346: ARRAY
72347: PUSH
72348: LD_INT 1
72350: PLUS
72351: PUSH
72352: EMPTY
72353: LIST
72354: LIST
72355: PPUSH
72356: LD_VAR 0 3
72360: PPUSH
72361: CALL 26426 0 3
72365: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
72366: LD_VAR 0 3
72370: PPUSH
72371: CALL_OW 110
72375: PUSH
72376: LD_INT 102
72378: NONEQUAL
72379: IFFALSE 72393
// SetTag ( j , 102 ) ;
72381: LD_VAR 0 3
72385: PPUSH
72386: LD_INT 102
72388: PPUSH
72389: CALL_OW 109
// Wait ( 3 ) ;
72393: LD_INT 3
72395: PPUSH
72396: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
72400: LD_EXP 39
72404: PUSH
72405: LD_VAR 0 2
72409: ARRAY
72410: PUSH
72411: LD_INT 1
72413: ARRAY
72414: IFFALSE 72446
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
72416: LD_VAR 0 3
72420: PPUSH
72421: LD_EXP 39
72425: PUSH
72426: LD_VAR 0 2
72430: ARRAY
72431: PUSH
72432: LD_INT 1
72434: ARRAY
72435: PUSH
72436: LD_INT 1
72438: ARRAY
72439: PPUSH
72440: CALL_OW 128
72444: GO 72502
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
72446: LD_VAR 0 3
72450: PPUSH
72451: CALL_OW 314
72455: NOT
72456: PUSH
72457: LD_EXP 39
72461: PUSH
72462: LD_VAR 0 2
72466: ARRAY
72467: PUSH
72468: LD_INT 2
72470: ARRAY
72471: AND
72472: IFFALSE 72502
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
72474: LD_VAR 0 3
72478: PPUSH
72479: LD_EXP 39
72483: PUSH
72484: LD_VAR 0 2
72488: ARRAY
72489: PUSH
72490: LD_INT 2
72492: ARRAY
72493: PUSH
72494: LD_INT 1
72496: ARRAY
72497: PPUSH
72498: CALL_OW 128
// end ;
72502: GO 72280
72504: POP
72505: POP
// end ;
72506: GO 72123
72508: POP
72509: POP
// end ;
72510: LD_VAR 0 1
72514: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
72515: LD_INT 0
72517: PPUSH
72518: PPUSH
72519: PPUSH
72520: PPUSH
72521: PPUSH
// if not mc_bases then
72522: LD_EXP 36
72526: NOT
72527: IFFALSE 72531
// exit ;
72529: GO 73674
// for i = 1 to mc_bases do
72531: LD_ADDR_VAR 0 2
72535: PUSH
72536: DOUBLE
72537: LD_INT 1
72539: DEC
72540: ST_TO_ADDR
72541: LD_EXP 36
72545: PUSH
72546: FOR_TO
72547: IFFALSE 73672
// begin if mc_scan [ i ] then
72549: LD_EXP 59
72553: PUSH
72554: LD_VAR 0 2
72558: ARRAY
72559: IFFALSE 72563
// continue ;
72561: GO 72546
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
72563: LD_EXP 41
72567: PUSH
72568: LD_VAR 0 2
72572: ARRAY
72573: NOT
72574: PUSH
72575: LD_EXP 43
72579: PUSH
72580: LD_VAR 0 2
72584: ARRAY
72585: NOT
72586: AND
72587: PUSH
72588: LD_EXP 42
72592: PUSH
72593: LD_VAR 0 2
72597: ARRAY
72598: AND
72599: IFFALSE 72637
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
72601: LD_ADDR_EXP 42
72605: PUSH
72606: LD_EXP 42
72610: PPUSH
72611: LD_VAR 0 2
72615: PPUSH
72616: EMPTY
72617: PPUSH
72618: CALL_OW 1
72622: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
72623: LD_VAR 0 2
72627: PPUSH
72628: LD_INT 103
72630: PPUSH
72631: CALL 66473 0 2
// continue ;
72635: GO 72546
// end ; if mc_construct_list [ i ] then
72637: LD_EXP 43
72641: PUSH
72642: LD_VAR 0 2
72646: ARRAY
72647: IFFALSE 72867
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
72649: LD_ADDR_VAR 0 4
72653: PUSH
72654: LD_EXP 36
72658: PUSH
72659: LD_VAR 0 2
72663: ARRAY
72664: PPUSH
72665: LD_INT 25
72667: PUSH
72668: LD_INT 2
72670: PUSH
72671: EMPTY
72672: LIST
72673: LIST
72674: PPUSH
72675: CALL_OW 72
72679: PUSH
72680: LD_EXP 38
72684: PUSH
72685: LD_VAR 0 2
72689: ARRAY
72690: DIFF
72691: ST_TO_ADDR
// if not tmp then
72692: LD_VAR 0 4
72696: NOT
72697: IFFALSE 72701
// continue ;
72699: GO 72546
// for j in tmp do
72701: LD_ADDR_VAR 0 3
72705: PUSH
72706: LD_VAR 0 4
72710: PUSH
72711: FOR_IN
72712: IFFALSE 72863
// begin if not mc_builders [ i ] then
72714: LD_EXP 42
72718: PUSH
72719: LD_VAR 0 2
72723: ARRAY
72724: NOT
72725: IFFALSE 72783
// begin SetTag ( j , 103 ) ;
72727: LD_VAR 0 3
72731: PPUSH
72732: LD_INT 103
72734: PPUSH
72735: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
72739: LD_ADDR_EXP 42
72743: PUSH
72744: LD_EXP 42
72748: PPUSH
72749: LD_VAR 0 2
72753: PUSH
72754: LD_EXP 42
72758: PUSH
72759: LD_VAR 0 2
72763: ARRAY
72764: PUSH
72765: LD_INT 1
72767: PLUS
72768: PUSH
72769: EMPTY
72770: LIST
72771: LIST
72772: PPUSH
72773: LD_VAR 0 3
72777: PPUSH
72778: CALL 26426 0 3
72782: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
72783: LD_VAR 0 3
72787: PPUSH
72788: CALL_OW 310
72792: IFFALSE 72803
// ComExitBuilding ( j ) ;
72794: LD_VAR 0 3
72798: PPUSH
72799: CALL_OW 122
// wait ( 3 ) ;
72803: LD_INT 3
72805: PPUSH
72806: CALL_OW 67
// if not mc_construct_list [ i ] then
72810: LD_EXP 43
72814: PUSH
72815: LD_VAR 0 2
72819: ARRAY
72820: NOT
72821: IFFALSE 72825
// break ;
72823: GO 72863
// if not HasTask ( j ) then
72825: LD_VAR 0 3
72829: PPUSH
72830: CALL_OW 314
72834: NOT
72835: IFFALSE 72861
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
72837: LD_VAR 0 3
72841: PPUSH
72842: LD_EXP 43
72846: PUSH
72847: LD_VAR 0 2
72851: ARRAY
72852: PUSH
72853: LD_INT 1
72855: ARRAY
72856: PPUSH
72857: CALL 29277 0 2
// end ;
72861: GO 72711
72863: POP
72864: POP
// end else
72865: GO 73670
// if mc_build_list [ i ] then
72867: LD_EXP 41
72871: PUSH
72872: LD_VAR 0 2
72876: ARRAY
72877: IFFALSE 73670
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
72879: LD_ADDR_VAR 0 5
72883: PUSH
72884: LD_EXP 36
72888: PUSH
72889: LD_VAR 0 2
72893: ARRAY
72894: PPUSH
72895: LD_INT 2
72897: PUSH
72898: LD_INT 30
72900: PUSH
72901: LD_INT 0
72903: PUSH
72904: EMPTY
72905: LIST
72906: LIST
72907: PUSH
72908: LD_INT 30
72910: PUSH
72911: LD_INT 1
72913: PUSH
72914: EMPTY
72915: LIST
72916: LIST
72917: PUSH
72918: EMPTY
72919: LIST
72920: LIST
72921: LIST
72922: PPUSH
72923: CALL_OW 72
72927: ST_TO_ADDR
// if depot then
72928: LD_VAR 0 5
72932: IFFALSE 72950
// depot := depot [ 1 ] else
72934: LD_ADDR_VAR 0 5
72938: PUSH
72939: LD_VAR 0 5
72943: PUSH
72944: LD_INT 1
72946: ARRAY
72947: ST_TO_ADDR
72948: GO 72958
// depot := 0 ;
72950: LD_ADDR_VAR 0 5
72954: PUSH
72955: LD_INT 0
72957: ST_TO_ADDR
// if IsExtension ( mc_build_list [ i ] [ 1 ] [ 1 ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) then
72958: LD_EXP 41
72962: PUSH
72963: LD_VAR 0 2
72967: ARRAY
72968: PUSH
72969: LD_INT 1
72971: ARRAY
72972: PUSH
72973: LD_INT 1
72975: ARRAY
72976: PPUSH
72977: CALL 29107 0 1
72981: PUSH
72982: LD_EXP 36
72986: PUSH
72987: LD_VAR 0 2
72991: ARRAY
72992: PPUSH
72993: LD_INT 2
72995: PUSH
72996: LD_INT 30
72998: PUSH
72999: LD_INT 2
73001: PUSH
73002: EMPTY
73003: LIST
73004: LIST
73005: PUSH
73006: LD_INT 30
73008: PUSH
73009: LD_INT 3
73011: PUSH
73012: EMPTY
73013: LIST
73014: LIST
73015: PUSH
73016: EMPTY
73017: LIST
73018: LIST
73019: LIST
73020: PPUSH
73021: CALL_OW 72
73025: NOT
73026: AND
73027: IFFALSE 73132
// begin for j = 1 to mc_build_list [ i ] do
73029: LD_ADDR_VAR 0 3
73033: PUSH
73034: DOUBLE
73035: LD_INT 1
73037: DEC
73038: ST_TO_ADDR
73039: LD_EXP 41
73043: PUSH
73044: LD_VAR 0 2
73048: ARRAY
73049: PUSH
73050: FOR_TO
73051: IFFALSE 73130
// if mc_build_list [ i ] [ j ] [ 1 ] = b_workshop then
73053: LD_EXP 41
73057: PUSH
73058: LD_VAR 0 2
73062: ARRAY
73063: PUSH
73064: LD_VAR 0 3
73068: ARRAY
73069: PUSH
73070: LD_INT 1
73072: ARRAY
73073: PUSH
73074: LD_INT 2
73076: EQUAL
73077: IFFALSE 73128
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , j , 1 , false ) ) ;
73079: LD_ADDR_EXP 41
73083: PUSH
73084: LD_EXP 41
73088: PPUSH
73089: LD_VAR 0 2
73093: PPUSH
73094: LD_EXP 41
73098: PUSH
73099: LD_VAR 0 2
73103: ARRAY
73104: PPUSH
73105: LD_VAR 0 3
73109: PPUSH
73110: LD_INT 1
73112: PPUSH
73113: LD_INT 0
73115: PPUSH
73116: CALL 25844 0 4
73120: PPUSH
73121: CALL_OW 1
73125: ST_TO_ADDR
// break ;
73126: GO 73130
// end ;
73128: GO 73050
73130: POP
73131: POP
// end ; if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilt ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
73132: LD_EXP 41
73136: PUSH
73137: LD_VAR 0 2
73141: ARRAY
73142: PUSH
73143: LD_INT 1
73145: ARRAY
73146: PUSH
73147: LD_INT 1
73149: ARRAY
73150: PUSH
73151: LD_INT 0
73153: EQUAL
73154: PUSH
73155: LD_VAR 0 5
73159: PUSH
73160: LD_VAR 0 5
73164: PPUSH
73165: LD_EXP 41
73169: PUSH
73170: LD_VAR 0 2
73174: ARRAY
73175: PUSH
73176: LD_INT 1
73178: ARRAY
73179: PUSH
73180: LD_INT 1
73182: ARRAY
73183: PPUSH
73184: LD_EXP 41
73188: PUSH
73189: LD_VAR 0 2
73193: ARRAY
73194: PUSH
73195: LD_INT 1
73197: ARRAY
73198: PUSH
73199: LD_INT 2
73201: ARRAY
73202: PPUSH
73203: LD_EXP 41
73207: PUSH
73208: LD_VAR 0 2
73212: ARRAY
73213: PUSH
73214: LD_INT 1
73216: ARRAY
73217: PUSH
73218: LD_INT 3
73220: ARRAY
73221: PPUSH
73222: LD_EXP 41
73226: PUSH
73227: LD_VAR 0 2
73231: ARRAY
73232: PUSH
73233: LD_INT 1
73235: ARRAY
73236: PUSH
73237: LD_INT 4
73239: ARRAY
73240: PPUSH
73241: CALL 33841 0 5
73245: AND
73246: OR
73247: IFFALSE 73528
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
73249: LD_ADDR_VAR 0 4
73253: PUSH
73254: LD_EXP 36
73258: PUSH
73259: LD_VAR 0 2
73263: ARRAY
73264: PPUSH
73265: LD_INT 25
73267: PUSH
73268: LD_INT 2
73270: PUSH
73271: EMPTY
73272: LIST
73273: LIST
73274: PPUSH
73275: CALL_OW 72
73279: PUSH
73280: LD_EXP 38
73284: PUSH
73285: LD_VAR 0 2
73289: ARRAY
73290: DIFF
73291: ST_TO_ADDR
// if not tmp then
73292: LD_VAR 0 4
73296: NOT
73297: IFFALSE 73301
// continue ;
73299: GO 72546
// for j in tmp do
73301: LD_ADDR_VAR 0 3
73305: PUSH
73306: LD_VAR 0 4
73310: PUSH
73311: FOR_IN
73312: IFFALSE 73524
// begin if not mc_builders [ i ] then
73314: LD_EXP 42
73318: PUSH
73319: LD_VAR 0 2
73323: ARRAY
73324: NOT
73325: IFFALSE 73383
// begin SetTag ( j , 103 ) ;
73327: LD_VAR 0 3
73331: PPUSH
73332: LD_INT 103
73334: PPUSH
73335: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
73339: LD_ADDR_EXP 42
73343: PUSH
73344: LD_EXP 42
73348: PPUSH
73349: LD_VAR 0 2
73353: PUSH
73354: LD_EXP 42
73358: PUSH
73359: LD_VAR 0 2
73363: ARRAY
73364: PUSH
73365: LD_INT 1
73367: PLUS
73368: PUSH
73369: EMPTY
73370: LIST
73371: LIST
73372: PPUSH
73373: LD_VAR 0 3
73377: PPUSH
73378: CALL 26426 0 3
73382: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
73383: LD_VAR 0 3
73387: PPUSH
73388: CALL_OW 310
73392: IFFALSE 73403
// ComExitBuilding ( j ) ;
73394: LD_VAR 0 3
73398: PPUSH
73399: CALL_OW 122
// wait ( 3 ) ;
73403: LD_INT 3
73405: PPUSH
73406: CALL_OW 67
// if not mc_build_list [ i ] then
73410: LD_EXP 41
73414: PUSH
73415: LD_VAR 0 2
73419: ARRAY
73420: NOT
73421: IFFALSE 73425
// break ;
73423: GO 73524
// if not HasTask ( j ) then
73425: LD_VAR 0 3
73429: PPUSH
73430: CALL_OW 314
73434: NOT
73435: IFFALSE 73522
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
73437: LD_VAR 0 3
73441: PPUSH
73442: LD_EXP 41
73446: PUSH
73447: LD_VAR 0 2
73451: ARRAY
73452: PUSH
73453: LD_INT 1
73455: ARRAY
73456: PUSH
73457: LD_INT 1
73459: ARRAY
73460: PPUSH
73461: LD_EXP 41
73465: PUSH
73466: LD_VAR 0 2
73470: ARRAY
73471: PUSH
73472: LD_INT 1
73474: ARRAY
73475: PUSH
73476: LD_INT 2
73478: ARRAY
73479: PPUSH
73480: LD_EXP 41
73484: PUSH
73485: LD_VAR 0 2
73489: ARRAY
73490: PUSH
73491: LD_INT 1
73493: ARRAY
73494: PUSH
73495: LD_INT 3
73497: ARRAY
73498: PPUSH
73499: LD_EXP 41
73503: PUSH
73504: LD_VAR 0 2
73508: ARRAY
73509: PUSH
73510: LD_INT 1
73512: ARRAY
73513: PUSH
73514: LD_INT 4
73516: ARRAY
73517: PPUSH
73518: CALL_OW 145
// end ;
73522: GO 73311
73524: POP
73525: POP
// end else
73526: GO 73670
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
73528: LD_EXP 36
73532: PUSH
73533: LD_VAR 0 2
73537: ARRAY
73538: PPUSH
73539: LD_EXP 41
73543: PUSH
73544: LD_VAR 0 2
73548: ARRAY
73549: PUSH
73550: LD_INT 1
73552: ARRAY
73553: PUSH
73554: LD_INT 1
73556: ARRAY
73557: PPUSH
73558: LD_EXP 41
73562: PUSH
73563: LD_VAR 0 2
73567: ARRAY
73568: PUSH
73569: LD_INT 1
73571: ARRAY
73572: PUSH
73573: LD_INT 2
73575: ARRAY
73576: PPUSH
73577: LD_EXP 41
73581: PUSH
73582: LD_VAR 0 2
73586: ARRAY
73587: PUSH
73588: LD_INT 1
73590: ARRAY
73591: PUSH
73592: LD_INT 3
73594: ARRAY
73595: PPUSH
73596: LD_EXP 41
73600: PUSH
73601: LD_VAR 0 2
73605: ARRAY
73606: PUSH
73607: LD_INT 1
73609: ARRAY
73610: PUSH
73611: LD_INT 4
73613: ARRAY
73614: PPUSH
73615: CALL 33177 0 5
73619: NOT
73620: IFFALSE 73670
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
73622: LD_ADDR_EXP 41
73626: PUSH
73627: LD_EXP 41
73631: PPUSH
73632: LD_VAR 0 2
73636: PPUSH
73637: LD_EXP 41
73641: PUSH
73642: LD_VAR 0 2
73646: ARRAY
73647: PPUSH
73648: LD_INT 1
73650: PPUSH
73651: LD_INT 1
73653: NEG
73654: PPUSH
73655: LD_INT 0
73657: PPUSH
73658: CALL 25844 0 4
73662: PPUSH
73663: CALL_OW 1
73667: ST_TO_ADDR
// continue ;
73668: GO 72546
// end ; end ; end ;
73670: GO 72546
73672: POP
73673: POP
// end ;
73674: LD_VAR 0 1
73678: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
73679: LD_INT 0
73681: PPUSH
73682: PPUSH
73683: PPUSH
73684: PPUSH
73685: PPUSH
73686: PPUSH
// if not mc_bases then
73687: LD_EXP 36
73691: NOT
73692: IFFALSE 73696
// exit ;
73694: GO 74123
// for i = 1 to mc_bases do
73696: LD_ADDR_VAR 0 2
73700: PUSH
73701: DOUBLE
73702: LD_INT 1
73704: DEC
73705: ST_TO_ADDR
73706: LD_EXP 36
73710: PUSH
73711: FOR_TO
73712: IFFALSE 74121
// begin tmp := mc_build_upgrade [ i ] ;
73714: LD_ADDR_VAR 0 4
73718: PUSH
73719: LD_EXP 68
73723: PUSH
73724: LD_VAR 0 2
73728: ARRAY
73729: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
73730: LD_ADDR_VAR 0 6
73734: PUSH
73735: LD_EXP 69
73739: PUSH
73740: LD_VAR 0 2
73744: ARRAY
73745: PPUSH
73746: LD_INT 2
73748: PUSH
73749: LD_INT 30
73751: PUSH
73752: LD_INT 6
73754: PUSH
73755: EMPTY
73756: LIST
73757: LIST
73758: PUSH
73759: LD_INT 30
73761: PUSH
73762: LD_INT 7
73764: PUSH
73765: EMPTY
73766: LIST
73767: LIST
73768: PUSH
73769: EMPTY
73770: LIST
73771: LIST
73772: LIST
73773: PPUSH
73774: CALL_OW 72
73778: ST_TO_ADDR
// if not tmp and not lab then
73779: LD_VAR 0 4
73783: NOT
73784: PUSH
73785: LD_VAR 0 6
73789: NOT
73790: AND
73791: IFFALSE 73795
// continue ;
73793: GO 73711
// if tmp then
73795: LD_VAR 0 4
73799: IFFALSE 73919
// for j in tmp do
73801: LD_ADDR_VAR 0 3
73805: PUSH
73806: LD_VAR 0 4
73810: PUSH
73811: FOR_IN
73812: IFFALSE 73917
// begin if UpgradeCost ( j ) then
73814: LD_VAR 0 3
73818: PPUSH
73819: CALL 32837 0 1
73823: IFFALSE 73915
// begin ComUpgrade ( j ) ;
73825: LD_VAR 0 3
73829: PPUSH
73830: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
73834: LD_ADDR_EXP 68
73838: PUSH
73839: LD_EXP 68
73843: PPUSH
73844: LD_VAR 0 2
73848: PPUSH
73849: LD_EXP 68
73853: PUSH
73854: LD_VAR 0 2
73858: ARRAY
73859: PUSH
73860: LD_VAR 0 3
73864: DIFF
73865: PPUSH
73866: CALL_OW 1
73870: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
73871: LD_ADDR_EXP 43
73875: PUSH
73876: LD_EXP 43
73880: PPUSH
73881: LD_VAR 0 2
73885: PUSH
73886: LD_EXP 43
73890: PUSH
73891: LD_VAR 0 2
73895: ARRAY
73896: PUSH
73897: LD_INT 1
73899: PLUS
73900: PUSH
73901: EMPTY
73902: LIST
73903: LIST
73904: PPUSH
73905: LD_VAR 0 3
73909: PPUSH
73910: CALL 26426 0 3
73914: ST_TO_ADDR
// end ; end ;
73915: GO 73811
73917: POP
73918: POP
// if not lab or not mc_lab_upgrade [ i ] then
73919: LD_VAR 0 6
73923: NOT
73924: PUSH
73925: LD_EXP 70
73929: PUSH
73930: LD_VAR 0 2
73934: ARRAY
73935: NOT
73936: OR
73937: IFFALSE 73941
// continue ;
73939: GO 73711
// for j in lab do
73941: LD_ADDR_VAR 0 3
73945: PUSH
73946: LD_VAR 0 6
73950: PUSH
73951: FOR_IN
73952: IFFALSE 74117
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
73954: LD_VAR 0 3
73958: PPUSH
73959: CALL_OW 266
73963: PUSH
73964: LD_INT 6
73966: PUSH
73967: LD_INT 7
73969: PUSH
73970: EMPTY
73971: LIST
73972: LIST
73973: IN
73974: PUSH
73975: LD_VAR 0 3
73979: PPUSH
73980: CALL_OW 461
73984: PUSH
73985: LD_INT 1
73987: NONEQUAL
73988: AND
73989: IFFALSE 74115
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
73991: LD_VAR 0 3
73995: PPUSH
73996: LD_EXP 70
74000: PUSH
74001: LD_VAR 0 2
74005: ARRAY
74006: PUSH
74007: LD_INT 1
74009: ARRAY
74010: PPUSH
74011: CALL 33042 0 2
74015: IFFALSE 74115
// begin ComCancel ( j ) ;
74017: LD_VAR 0 3
74021: PPUSH
74022: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
74026: LD_VAR 0 3
74030: PPUSH
74031: LD_EXP 70
74035: PUSH
74036: LD_VAR 0 2
74040: ARRAY
74041: PUSH
74042: LD_INT 1
74044: ARRAY
74045: PPUSH
74046: CALL_OW 207
// if not j in mc_construct_list [ i ] then
74050: LD_VAR 0 3
74054: PUSH
74055: LD_EXP 43
74059: PUSH
74060: LD_VAR 0 2
74064: ARRAY
74065: IN
74066: NOT
74067: IFFALSE 74113
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
74069: LD_ADDR_EXP 43
74073: PUSH
74074: LD_EXP 43
74078: PPUSH
74079: LD_VAR 0 2
74083: PUSH
74084: LD_EXP 43
74088: PUSH
74089: LD_VAR 0 2
74093: ARRAY
74094: PUSH
74095: LD_INT 1
74097: PLUS
74098: PUSH
74099: EMPTY
74100: LIST
74101: LIST
74102: PPUSH
74103: LD_VAR 0 3
74107: PPUSH
74108: CALL 26426 0 3
74112: ST_TO_ADDR
// break ;
74113: GO 74117
// end ; end ; end ;
74115: GO 73951
74117: POP
74118: POP
// end ;
74119: GO 73711
74121: POP
74122: POP
// end ;
74123: LD_VAR 0 1
74127: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , tmp2 , t , tw , busy , weapon ; begin
74128: LD_INT 0
74130: PPUSH
74131: PPUSH
74132: PPUSH
74133: PPUSH
74134: PPUSH
74135: PPUSH
74136: PPUSH
74137: PPUSH
74138: PPUSH
// if not mc_bases then
74139: LD_EXP 36
74143: NOT
74144: IFFALSE 74148
// exit ;
74146: GO 74553
// for i = 1 to mc_bases do
74148: LD_ADDR_VAR 0 2
74152: PUSH
74153: DOUBLE
74154: LD_INT 1
74156: DEC
74157: ST_TO_ADDR
74158: LD_EXP 36
74162: PUSH
74163: FOR_TO
74164: IFFALSE 74551
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
74166: LD_EXP 44
74170: PUSH
74171: LD_VAR 0 2
74175: ARRAY
74176: NOT
74177: PUSH
74178: LD_EXP 36
74182: PUSH
74183: LD_VAR 0 2
74187: ARRAY
74188: PPUSH
74189: LD_INT 30
74191: PUSH
74192: LD_INT 3
74194: PUSH
74195: EMPTY
74196: LIST
74197: LIST
74198: PPUSH
74199: CALL_OW 72
74203: NOT
74204: OR
74205: IFFALSE 74209
// continue ;
74207: GO 74163
// busy := false ;
74209: LD_ADDR_VAR 0 8
74213: PUSH
74214: LD_INT 0
74216: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
74217: LD_ADDR_VAR 0 4
74221: PUSH
74222: LD_EXP 36
74226: PUSH
74227: LD_VAR 0 2
74231: ARRAY
74232: PPUSH
74233: LD_INT 30
74235: PUSH
74236: LD_INT 3
74238: PUSH
74239: EMPTY
74240: LIST
74241: LIST
74242: PPUSH
74243: CALL_OW 72
74247: ST_TO_ADDR
// t := UnitFilter ( mc_turret_list [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ;
74248: LD_ADDR_VAR 0 6
74252: PUSH
74253: LD_EXP 44
74257: PUSH
74258: LD_VAR 0 2
74262: ARRAY
74263: PPUSH
74264: LD_INT 2
74266: PUSH
74267: LD_INT 30
74269: PUSH
74270: LD_INT 32
74272: PUSH
74273: EMPTY
74274: LIST
74275: LIST
74276: PUSH
74277: LD_INT 30
74279: PUSH
74280: LD_INT 33
74282: PUSH
74283: EMPTY
74284: LIST
74285: LIST
74286: PUSH
74287: EMPTY
74288: LIST
74289: LIST
74290: LIST
74291: PPUSH
74292: CALL_OW 72
74296: ST_TO_ADDR
// if not t then
74297: LD_VAR 0 6
74301: NOT
74302: IFFALSE 74306
// continue ;
74304: GO 74163
// for j in tmp do
74306: LD_ADDR_VAR 0 3
74310: PUSH
74311: LD_VAR 0 4
74315: PUSH
74316: FOR_IN
74317: IFFALSE 74347
// if not BuildingStatus ( j ) = bs_idle then
74319: LD_VAR 0 3
74323: PPUSH
74324: CALL_OW 461
74328: PUSH
74329: LD_INT 2
74331: EQUAL
74332: NOT
74333: IFFALSE 74345
// begin busy := true ;
74335: LD_ADDR_VAR 0 8
74339: PUSH
74340: LD_INT 1
74342: ST_TO_ADDR
// break ;
74343: GO 74347
// end ;
74345: GO 74316
74347: POP
74348: POP
// if busy then
74349: LD_VAR 0 8
74353: IFFALSE 74357
// continue ;
74355: GO 74163
// tw := UnitFilter ( t , [ f_bweapon , 0 ] ) ;
74357: LD_ADDR_VAR 0 7
74361: PUSH
74362: LD_VAR 0 6
74366: PPUSH
74367: LD_INT 35
74369: PUSH
74370: LD_INT 0
74372: PUSH
74373: EMPTY
74374: LIST
74375: LIST
74376: PPUSH
74377: CALL_OW 72
74381: ST_TO_ADDR
// if tw then
74382: LD_VAR 0 7
74386: IFFALSE 74463
// begin tw := tw [ 1 ] ;
74388: LD_ADDR_VAR 0 7
74392: PUSH
74393: LD_VAR 0 7
74397: PUSH
74398: LD_INT 1
74400: ARRAY
74401: ST_TO_ADDR
// weapon := GetTurretWeapon ( tw , mc_scan_area [ i ] ) ;
74402: LD_ADDR_VAR 0 9
74406: PUSH
74407: LD_VAR 0 7
74411: PPUSH
74412: LD_EXP 61
74416: PUSH
74417: LD_VAR 0 2
74421: ARRAY
74422: PPUSH
74423: CALL 31396 0 2
74427: ST_TO_ADDR
// if mc_allowed_tower_weapons [ i ] then
74428: LD_EXP 75
74432: PUSH
74433: LD_VAR 0 2
74437: ARRAY
74438: IFFALSE 74461
// if not weapon in mc_allowed_tower_weapons [ i ] then
74440: LD_VAR 0 9
74444: PUSH
74445: LD_EXP 75
74449: PUSH
74450: LD_VAR 0 2
74454: ARRAY
74455: IN
74456: NOT
74457: IFFALSE 74461
// continue ;
74459: GO 74163
// end else
74461: GO 74526
// begin tmp2 := UpgradeTurretsWeapon ( mc_turret_list [ i ] , tmp ) ;
74463: LD_ADDR_VAR 0 5
74467: PUSH
74468: LD_EXP 44
74472: PUSH
74473: LD_VAR 0 2
74477: ARRAY
74478: PPUSH
74479: LD_VAR 0 4
74483: PPUSH
74484: CALL 61597 0 2
74488: ST_TO_ADDR
// if not tmp2 then
74489: LD_VAR 0 5
74493: NOT
74494: IFFALSE 74498
// continue ;
74496: GO 74163
// tw := tmp2 [ 1 ] ;
74498: LD_ADDR_VAR 0 7
74502: PUSH
74503: LD_VAR 0 5
74507: PUSH
74508: LD_INT 1
74510: ARRAY
74511: ST_TO_ADDR
// weapon := tmp2 [ 2 ] ;
74512: LD_ADDR_VAR 0 9
74516: PUSH
74517: LD_VAR 0 5
74521: PUSH
74522: LD_INT 2
74524: ARRAY
74525: ST_TO_ADDR
// end ; if not weapon then
74526: LD_VAR 0 9
74530: NOT
74531: IFFALSE 74535
// continue ;
74533: GO 74163
// ComPlaceWeapon ( tw , weapon ) ;
74535: LD_VAR 0 7
74539: PPUSH
74540: LD_VAR 0 9
74544: PPUSH
74545: CALL_OW 148
// end ;
74549: GO 74163
74551: POP
74552: POP
// end ;
74553: LD_VAR 0 1
74557: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
74558: LD_INT 0
74560: PPUSH
74561: PPUSH
74562: PPUSH
74563: PPUSH
74564: PPUSH
74565: PPUSH
// if not mc_bases then
74566: LD_EXP 36
74570: NOT
74571: IFFALSE 74575
// exit ;
74573: GO 75587
// for i = 1 to mc_bases do
74575: LD_ADDR_VAR 0 2
74579: PUSH
74580: DOUBLE
74581: LD_INT 1
74583: DEC
74584: ST_TO_ADDR
74585: LD_EXP 36
74589: PUSH
74590: FOR_TO
74591: IFFALSE 75585
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] then
74593: LD_EXP 49
74597: PUSH
74598: LD_VAR 0 2
74602: ARRAY
74603: NOT
74604: PUSH
74605: LD_EXP 49
74609: PUSH
74610: LD_VAR 0 2
74614: ARRAY
74615: PUSH
74616: LD_EXP 50
74620: PUSH
74621: LD_VAR 0 2
74625: ARRAY
74626: EQUAL
74627: OR
74628: IFFALSE 74632
// continue ;
74630: GO 74590
// if mc_miners [ i ] then
74632: LD_EXP 50
74636: PUSH
74637: LD_VAR 0 2
74641: ARRAY
74642: IFFALSE 75272
// begin k := 1 ;
74644: LD_ADDR_VAR 0 4
74648: PUSH
74649: LD_INT 1
74651: ST_TO_ADDR
// for j = mc_miners [ i ] downto 1 do
74652: LD_ADDR_VAR 0 3
74656: PUSH
74657: DOUBLE
74658: LD_EXP 50
74662: PUSH
74663: LD_VAR 0 2
74667: ARRAY
74668: INC
74669: ST_TO_ADDR
74670: LD_INT 1
74672: PUSH
74673: FOR_DOWNTO
74674: IFFALSE 75270
// begin if IsDead ( mc_miners [ i ] [ j ] ) or GetClass ( mc_miners [ i ] [ j ] ) <> 1 then
74676: LD_EXP 50
74680: PUSH
74681: LD_VAR 0 2
74685: ARRAY
74686: PUSH
74687: LD_VAR 0 3
74691: ARRAY
74692: PPUSH
74693: CALL_OW 301
74697: PUSH
74698: LD_EXP 50
74702: PUSH
74703: LD_VAR 0 2
74707: ARRAY
74708: PUSH
74709: LD_VAR 0 3
74713: ARRAY
74714: PPUSH
74715: CALL_OW 257
74719: PUSH
74720: LD_INT 1
74722: NONEQUAL
74723: OR
74724: IFFALSE 74787
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
74726: LD_ADDR_VAR 0 5
74730: PUSH
74731: LD_EXP 50
74735: PUSH
74736: LD_VAR 0 2
74740: ARRAY
74741: PUSH
74742: LD_EXP 50
74746: PUSH
74747: LD_VAR 0 2
74751: ARRAY
74752: PUSH
74753: LD_VAR 0 3
74757: ARRAY
74758: DIFF
74759: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
74760: LD_ADDR_EXP 50
74764: PUSH
74765: LD_EXP 50
74769: PPUSH
74770: LD_VAR 0 2
74774: PPUSH
74775: LD_VAR 0 5
74779: PPUSH
74780: CALL_OW 1
74784: ST_TO_ADDR
// continue ;
74785: GO 74673
// end ; if WantPlant ( mc_miners [ i ] [ j ] ) and ( DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] or DangerAtRange ( mc_miners [ i ] [ j ] , 10 ) [ 4 ] ) then
74787: LD_EXP 50
74791: PUSH
74792: LD_VAR 0 2
74796: ARRAY
74797: PUSH
74798: LD_VAR 0 3
74802: ARRAY
74803: PPUSH
74804: CALL 26362 0 1
74808: PUSH
74809: LD_EXP 50
74813: PUSH
74814: LD_VAR 0 2
74818: ARRAY
74819: PUSH
74820: LD_VAR 0 3
74824: ARRAY
74825: PPUSH
74826: CALL_OW 255
74830: PPUSH
74831: LD_EXP 49
74835: PUSH
74836: LD_VAR 0 2
74840: ARRAY
74841: PUSH
74842: LD_VAR 0 4
74846: ARRAY
74847: PUSH
74848: LD_INT 1
74850: ARRAY
74851: PPUSH
74852: LD_EXP 49
74856: PUSH
74857: LD_VAR 0 2
74861: ARRAY
74862: PUSH
74863: LD_VAR 0 4
74867: ARRAY
74868: PUSH
74869: LD_INT 2
74871: ARRAY
74872: PPUSH
74873: LD_INT 15
74875: PPUSH
74876: CALL 27322 0 4
74880: PUSH
74881: LD_INT 4
74883: ARRAY
74884: PUSH
74885: LD_EXP 50
74889: PUSH
74890: LD_VAR 0 2
74894: ARRAY
74895: PUSH
74896: LD_VAR 0 3
74900: ARRAY
74901: PPUSH
74902: LD_INT 10
74904: PPUSH
74905: CALL 29019 0 2
74909: PUSH
74910: LD_INT 4
74912: ARRAY
74913: OR
74914: AND
74915: IFFALSE 74938
// ComStop ( mc_miners [ i ] [ j ] ) ;
74917: LD_EXP 50
74921: PUSH
74922: LD_VAR 0 2
74926: ARRAY
74927: PUSH
74928: LD_VAR 0 3
74932: ARRAY
74933: PPUSH
74934: CALL_OW 141
// if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] = 0 and not HasTask ( mc_miners [ i ] [ j ] ) then
74938: LD_EXP 50
74942: PUSH
74943: LD_VAR 0 2
74947: ARRAY
74948: PUSH
74949: LD_VAR 0 3
74953: ARRAY
74954: PPUSH
74955: CALL_OW 257
74959: PUSH
74960: LD_INT 1
74962: EQUAL
74963: PUSH
74964: LD_EXP 50
74968: PUSH
74969: LD_VAR 0 2
74973: ARRAY
74974: PUSH
74975: LD_VAR 0 3
74979: ARRAY
74980: PPUSH
74981: CALL_OW 459
74985: NOT
74986: AND
74987: PUSH
74988: LD_EXP 50
74992: PUSH
74993: LD_VAR 0 2
74997: ARRAY
74998: PUSH
74999: LD_VAR 0 3
75003: ARRAY
75004: PPUSH
75005: CALL_OW 255
75009: PPUSH
75010: LD_EXP 49
75014: PUSH
75015: LD_VAR 0 2
75019: ARRAY
75020: PUSH
75021: LD_VAR 0 4
75025: ARRAY
75026: PUSH
75027: LD_INT 1
75029: ARRAY
75030: PPUSH
75031: LD_EXP 49
75035: PUSH
75036: LD_VAR 0 2
75040: ARRAY
75041: PUSH
75042: LD_VAR 0 4
75046: ARRAY
75047: PUSH
75048: LD_INT 2
75050: ARRAY
75051: PPUSH
75052: LD_INT 15
75054: PPUSH
75055: CALL 27322 0 4
75059: PUSH
75060: LD_INT 4
75062: ARRAY
75063: PUSH
75064: LD_INT 0
75066: EQUAL
75067: AND
75068: PUSH
75069: LD_EXP 50
75073: PUSH
75074: LD_VAR 0 2
75078: ARRAY
75079: PUSH
75080: LD_VAR 0 3
75084: ARRAY
75085: PPUSH
75086: CALL_OW 314
75090: NOT
75091: AND
75092: IFFALSE 75268
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
75094: LD_EXP 50
75098: PUSH
75099: LD_VAR 0 2
75103: ARRAY
75104: PUSH
75105: LD_VAR 0 3
75109: ARRAY
75110: PPUSH
75111: CALL_OW 310
75115: IFFALSE 75138
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
75117: LD_EXP 50
75121: PUSH
75122: LD_VAR 0 2
75126: ARRAY
75127: PUSH
75128: LD_VAR 0 3
75132: ARRAY
75133: PPUSH
75134: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
75138: LD_EXP 50
75142: PUSH
75143: LD_VAR 0 2
75147: ARRAY
75148: PUSH
75149: LD_VAR 0 3
75153: ARRAY
75154: PPUSH
75155: CALL_OW 314
75159: NOT
75160: IFFALSE 75228
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 0 ) ;
75162: LD_EXP 50
75166: PUSH
75167: LD_VAR 0 2
75171: ARRAY
75172: PUSH
75173: LD_VAR 0 3
75177: ARRAY
75178: PPUSH
75179: LD_EXP 49
75183: PUSH
75184: LD_VAR 0 2
75188: ARRAY
75189: PUSH
75190: LD_VAR 0 4
75194: ARRAY
75195: PUSH
75196: LD_INT 1
75198: ARRAY
75199: PPUSH
75200: LD_EXP 49
75204: PUSH
75205: LD_VAR 0 2
75209: ARRAY
75210: PUSH
75211: LD_VAR 0 4
75215: ARRAY
75216: PUSH
75217: LD_INT 2
75219: ARRAY
75220: PPUSH
75221: LD_INT 0
75223: PPUSH
75224: CALL_OW 193
// k := k + 1 ;
75228: LD_ADDR_VAR 0 4
75232: PUSH
75233: LD_VAR 0 4
75237: PUSH
75238: LD_INT 1
75240: PLUS
75241: ST_TO_ADDR
// if k > mc_mines [ i ] then
75242: LD_VAR 0 4
75246: PUSH
75247: LD_EXP 49
75251: PUSH
75252: LD_VAR 0 2
75256: ARRAY
75257: GREATER
75258: IFFALSE 75268
// k := 1 ;
75260: LD_ADDR_VAR 0 4
75264: PUSH
75265: LD_INT 1
75267: ST_TO_ADDR
// end ; end ;
75268: GO 74673
75270: POP
75271: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
75272: LD_ADDR_VAR 0 5
75276: PUSH
75277: LD_EXP 36
75281: PUSH
75282: LD_VAR 0 2
75286: ARRAY
75287: PPUSH
75288: LD_INT 2
75290: PUSH
75291: LD_INT 30
75293: PUSH
75294: LD_INT 4
75296: PUSH
75297: EMPTY
75298: LIST
75299: LIST
75300: PUSH
75301: LD_INT 30
75303: PUSH
75304: LD_INT 5
75306: PUSH
75307: EMPTY
75308: LIST
75309: LIST
75310: PUSH
75311: LD_INT 30
75313: PUSH
75314: LD_INT 32
75316: PUSH
75317: EMPTY
75318: LIST
75319: LIST
75320: PUSH
75321: EMPTY
75322: LIST
75323: LIST
75324: LIST
75325: LIST
75326: PPUSH
75327: CALL_OW 72
75331: ST_TO_ADDR
// if not tmp then
75332: LD_VAR 0 5
75336: NOT
75337: IFFALSE 75341
// continue ;
75339: GO 74590
// list := [ ] ;
75341: LD_ADDR_VAR 0 6
75345: PUSH
75346: EMPTY
75347: ST_TO_ADDR
// for j in tmp do
75348: LD_ADDR_VAR 0 3
75352: PUSH
75353: LD_VAR 0 5
75357: PUSH
75358: FOR_IN
75359: IFFALSE 75428
// begin for k in UnitsInside ( j ) do
75361: LD_ADDR_VAR 0 4
75365: PUSH
75366: LD_VAR 0 3
75370: PPUSH
75371: CALL_OW 313
75375: PUSH
75376: FOR_IN
75377: IFFALSE 75424
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
75379: LD_VAR 0 4
75383: PPUSH
75384: CALL_OW 257
75388: PUSH
75389: LD_INT 1
75391: EQUAL
75392: PUSH
75393: LD_VAR 0 4
75397: PPUSH
75398: CALL_OW 459
75402: NOT
75403: AND
75404: IFFALSE 75422
// list := list ^ k ;
75406: LD_ADDR_VAR 0 6
75410: PUSH
75411: LD_VAR 0 6
75415: PUSH
75416: LD_VAR 0 4
75420: ADD
75421: ST_TO_ADDR
75422: GO 75376
75424: POP
75425: POP
// end ;
75426: GO 75358
75428: POP
75429: POP
// list := list diff mc_miners [ i ] ;
75430: LD_ADDR_VAR 0 6
75434: PUSH
75435: LD_VAR 0 6
75439: PUSH
75440: LD_EXP 50
75444: PUSH
75445: LD_VAR 0 2
75449: ARRAY
75450: DIFF
75451: ST_TO_ADDR
// if not list then
75452: LD_VAR 0 6
75456: NOT
75457: IFFALSE 75461
// continue ;
75459: GO 74590
// k := mc_mines [ i ] - mc_miners [ i ] ;
75461: LD_ADDR_VAR 0 4
75465: PUSH
75466: LD_EXP 49
75470: PUSH
75471: LD_VAR 0 2
75475: ARRAY
75476: PUSH
75477: LD_EXP 50
75481: PUSH
75482: LD_VAR 0 2
75486: ARRAY
75487: MINUS
75488: ST_TO_ADDR
// if k > list then
75489: LD_VAR 0 4
75493: PUSH
75494: LD_VAR 0 6
75498: GREATER
75499: IFFALSE 75511
// k := list ;
75501: LD_ADDR_VAR 0 4
75505: PUSH
75506: LD_VAR 0 6
75510: ST_TO_ADDR
// for j = 1 to k do
75511: LD_ADDR_VAR 0 3
75515: PUSH
75516: DOUBLE
75517: LD_INT 1
75519: DEC
75520: ST_TO_ADDR
75521: LD_VAR 0 4
75525: PUSH
75526: FOR_TO
75527: IFFALSE 75581
// mc_miners := ReplaceIn ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
75529: LD_ADDR_EXP 50
75533: PUSH
75534: LD_EXP 50
75538: PPUSH
75539: LD_VAR 0 2
75543: PUSH
75544: LD_EXP 50
75548: PUSH
75549: LD_VAR 0 2
75553: ARRAY
75554: PUSH
75555: LD_INT 1
75557: PLUS
75558: PUSH
75559: EMPTY
75560: LIST
75561: LIST
75562: PPUSH
75563: LD_VAR 0 6
75567: PUSH
75568: LD_VAR 0 3
75572: ARRAY
75573: PPUSH
75574: CALL 26426 0 3
75578: ST_TO_ADDR
75579: GO 75526
75581: POP
75582: POP
// end ;
75583: GO 74590
75585: POP
75586: POP
// end ;
75587: LD_VAR 0 1
75591: RET
// export function MC_CollectCrates ( ) ; var i , j , k , tmp , target , cargo , depot , fac , components ; begin
75592: LD_INT 0
75594: PPUSH
75595: PPUSH
75596: PPUSH
75597: PPUSH
75598: PPUSH
75599: PPUSH
75600: PPUSH
75601: PPUSH
75602: PPUSH
75603: PPUSH
// if not mc_bases then
75604: LD_EXP 36
75608: NOT
75609: IFFALSE 75613
// exit ;
75611: GO 77363
// for i = 1 to mc_bases do
75613: LD_ADDR_VAR 0 2
75617: PUSH
75618: DOUBLE
75619: LD_INT 1
75621: DEC
75622: ST_TO_ADDR
75623: LD_EXP 36
75627: PUSH
75628: FOR_TO
75629: IFFALSE 77361
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
75631: LD_EXP 36
75635: PUSH
75636: LD_VAR 0 2
75640: ARRAY
75641: NOT
75642: PUSH
75643: LD_EXP 43
75647: PUSH
75648: LD_VAR 0 2
75652: ARRAY
75653: OR
75654: IFFALSE 75658
// continue ;
75656: GO 75628
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
75658: LD_EXP 52
75662: PUSH
75663: LD_VAR 0 2
75667: ARRAY
75668: NOT
75669: PUSH
75670: LD_EXP 53
75674: PUSH
75675: LD_VAR 0 2
75679: ARRAY
75680: AND
75681: IFFALSE 75719
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
75683: LD_ADDR_EXP 53
75687: PUSH
75688: LD_EXP 53
75692: PPUSH
75693: LD_VAR 0 2
75697: PPUSH
75698: EMPTY
75699: PPUSH
75700: CALL_OW 1
75704: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
75705: LD_VAR 0 2
75709: PPUSH
75710: LD_INT 107
75712: PPUSH
75713: CALL 66473 0 2
// continue ;
75717: GO 75628
// end ; target := [ ] ;
75719: LD_ADDR_VAR 0 6
75723: PUSH
75724: EMPTY
75725: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
75726: LD_ADDR_VAR 0 3
75730: PUSH
75731: DOUBLE
75732: LD_EXP 52
75736: PUSH
75737: LD_VAR 0 2
75741: ARRAY
75742: INC
75743: ST_TO_ADDR
75744: LD_INT 1
75746: PUSH
75747: FOR_DOWNTO
75748: IFFALSE 76008
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
75750: LD_EXP 52
75754: PUSH
75755: LD_VAR 0 2
75759: ARRAY
75760: PUSH
75761: LD_VAR 0 3
75765: ARRAY
75766: PUSH
75767: LD_INT 2
75769: ARRAY
75770: PPUSH
75771: LD_EXP 52
75775: PUSH
75776: LD_VAR 0 2
75780: ARRAY
75781: PUSH
75782: LD_VAR 0 3
75786: ARRAY
75787: PUSH
75788: LD_INT 3
75790: ARRAY
75791: PPUSH
75792: CALL_OW 488
75796: PUSH
75797: LD_EXP 52
75801: PUSH
75802: LD_VAR 0 2
75806: ARRAY
75807: PUSH
75808: LD_VAR 0 3
75812: ARRAY
75813: PUSH
75814: LD_INT 2
75816: ARRAY
75817: PPUSH
75818: LD_EXP 52
75822: PUSH
75823: LD_VAR 0 2
75827: ARRAY
75828: PUSH
75829: LD_VAR 0 3
75833: ARRAY
75834: PUSH
75835: LD_INT 3
75837: ARRAY
75838: PPUSH
75839: CALL_OW 284
75843: PUSH
75844: LD_INT 0
75846: EQUAL
75847: AND
75848: IFFALSE 75903
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
75850: LD_ADDR_VAR 0 5
75854: PUSH
75855: LD_EXP 52
75859: PUSH
75860: LD_VAR 0 2
75864: ARRAY
75865: PPUSH
75866: LD_VAR 0 3
75870: PPUSH
75871: CALL_OW 3
75875: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
75876: LD_ADDR_EXP 52
75880: PUSH
75881: LD_EXP 52
75885: PPUSH
75886: LD_VAR 0 2
75890: PPUSH
75891: LD_VAR 0 5
75895: PPUSH
75896: CALL_OW 1
75900: ST_TO_ADDR
// continue ;
75901: GO 75747
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 30 ) [ 4 ] = 0 then
75903: LD_EXP 36
75907: PUSH
75908: LD_VAR 0 2
75912: ARRAY
75913: PUSH
75914: LD_INT 1
75916: ARRAY
75917: PPUSH
75918: CALL_OW 255
75922: PPUSH
75923: LD_EXP 52
75927: PUSH
75928: LD_VAR 0 2
75932: ARRAY
75933: PUSH
75934: LD_VAR 0 3
75938: ARRAY
75939: PUSH
75940: LD_INT 2
75942: ARRAY
75943: PPUSH
75944: LD_EXP 52
75948: PUSH
75949: LD_VAR 0 2
75953: ARRAY
75954: PUSH
75955: LD_VAR 0 3
75959: ARRAY
75960: PUSH
75961: LD_INT 3
75963: ARRAY
75964: PPUSH
75965: LD_INT 30
75967: PPUSH
75968: CALL 27322 0 4
75972: PUSH
75973: LD_INT 4
75975: ARRAY
75976: PUSH
75977: LD_INT 0
75979: EQUAL
75980: IFFALSE 76006
// begin target := mc_crates [ i ] [ j ] ;
75982: LD_ADDR_VAR 0 6
75986: PUSH
75987: LD_EXP 52
75991: PUSH
75992: LD_VAR 0 2
75996: ARRAY
75997: PUSH
75998: LD_VAR 0 3
76002: ARRAY
76003: ST_TO_ADDR
// break ;
76004: GO 76008
// end ; end ;
76006: GO 75747
76008: POP
76009: POP
// if not target then
76010: LD_VAR 0 6
76014: NOT
76015: IFFALSE 76019
// continue ;
76017: GO 75628
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
76019: LD_ADDR_VAR 0 7
76023: PUSH
76024: LD_EXP 55
76028: PUSH
76029: LD_VAR 0 2
76033: ARRAY
76034: PPUSH
76035: LD_INT 2
76037: PUSH
76038: LD_INT 3
76040: PUSH
76041: LD_INT 58
76043: PUSH
76044: EMPTY
76045: LIST
76046: PUSH
76047: EMPTY
76048: LIST
76049: LIST
76050: PUSH
76051: LD_INT 61
76053: PUSH
76054: EMPTY
76055: LIST
76056: PUSH
76057: LD_INT 33
76059: PUSH
76060: LD_INT 5
76062: PUSH
76063: EMPTY
76064: LIST
76065: LIST
76066: PUSH
76067: LD_INT 33
76069: PUSH
76070: LD_INT 3
76072: PUSH
76073: EMPTY
76074: LIST
76075: LIST
76076: PUSH
76077: EMPTY
76078: LIST
76079: LIST
76080: LIST
76081: LIST
76082: LIST
76083: PUSH
76084: LD_INT 2
76086: PUSH
76087: LD_INT 34
76089: PUSH
76090: LD_INT 32
76092: PUSH
76093: EMPTY
76094: LIST
76095: LIST
76096: PUSH
76097: LD_INT 34
76099: PUSH
76100: LD_INT 51
76102: PUSH
76103: EMPTY
76104: LIST
76105: LIST
76106: PUSH
76107: LD_INT 34
76109: PUSH
76110: LD_INT 12
76112: PUSH
76113: EMPTY
76114: LIST
76115: LIST
76116: PUSH
76117: EMPTY
76118: LIST
76119: LIST
76120: LIST
76121: LIST
76122: PUSH
76123: EMPTY
76124: LIST
76125: LIST
76126: PPUSH
76127: CALL_OW 72
76131: ST_TO_ADDR
// if not cargo then
76132: LD_VAR 0 7
76136: NOT
76137: IFFALSE 76780
// begin if mc_crates_collector [ i ] < 5 then
76139: LD_EXP 53
76143: PUSH
76144: LD_VAR 0 2
76148: ARRAY
76149: PUSH
76150: LD_INT 5
76152: LESS
76153: IFFALSE 76519
// begin if mc_ape [ i ] then
76155: LD_EXP 65
76159: PUSH
76160: LD_VAR 0 2
76164: ARRAY
76165: IFFALSE 76212
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
76167: LD_ADDR_VAR 0 5
76171: PUSH
76172: LD_EXP 65
76176: PUSH
76177: LD_VAR 0 2
76181: ARRAY
76182: PPUSH
76183: LD_INT 25
76185: PUSH
76186: LD_INT 16
76188: PUSH
76189: EMPTY
76190: LIST
76191: LIST
76192: PUSH
76193: LD_INT 24
76195: PUSH
76196: LD_INT 750
76198: PUSH
76199: EMPTY
76200: LIST
76201: LIST
76202: PUSH
76203: EMPTY
76204: LIST
76205: LIST
76206: PPUSH
76207: CALL_OW 72
76211: ST_TO_ADDR
// if not tmp then
76212: LD_VAR 0 5
76216: NOT
76217: IFFALSE 76264
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
76219: LD_ADDR_VAR 0 5
76223: PUSH
76224: LD_EXP 36
76228: PUSH
76229: LD_VAR 0 2
76233: ARRAY
76234: PPUSH
76235: LD_INT 25
76237: PUSH
76238: LD_INT 2
76240: PUSH
76241: EMPTY
76242: LIST
76243: LIST
76244: PUSH
76245: LD_INT 24
76247: PUSH
76248: LD_INT 750
76250: PUSH
76251: EMPTY
76252: LIST
76253: LIST
76254: PUSH
76255: EMPTY
76256: LIST
76257: LIST
76258: PPUSH
76259: CALL_OW 72
76263: ST_TO_ADDR
// if mc_ape [ i ] and UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) and tmp < 5 then
76264: LD_EXP 65
76268: PUSH
76269: LD_VAR 0 2
76273: ARRAY
76274: PUSH
76275: LD_EXP 36
76279: PUSH
76280: LD_VAR 0 2
76284: ARRAY
76285: PPUSH
76286: LD_INT 25
76288: PUSH
76289: LD_INT 2
76291: PUSH
76292: EMPTY
76293: LIST
76294: LIST
76295: PUSH
76296: LD_INT 24
76298: PUSH
76299: LD_INT 750
76301: PUSH
76302: EMPTY
76303: LIST
76304: LIST
76305: PUSH
76306: EMPTY
76307: LIST
76308: LIST
76309: PPUSH
76310: CALL_OW 72
76314: AND
76315: PUSH
76316: LD_VAR 0 5
76320: PUSH
76321: LD_INT 5
76323: LESS
76324: AND
76325: IFFALSE 76407
// begin for j in UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) do
76327: LD_ADDR_VAR 0 3
76331: PUSH
76332: LD_EXP 36
76336: PUSH
76337: LD_VAR 0 2
76341: ARRAY
76342: PPUSH
76343: LD_INT 25
76345: PUSH
76346: LD_INT 2
76348: PUSH
76349: EMPTY
76350: LIST
76351: LIST
76352: PUSH
76353: LD_INT 24
76355: PUSH
76356: LD_INT 750
76358: PUSH
76359: EMPTY
76360: LIST
76361: LIST
76362: PUSH
76363: EMPTY
76364: LIST
76365: LIST
76366: PPUSH
76367: CALL_OW 72
76371: PUSH
76372: FOR_IN
76373: IFFALSE 76405
// begin tmp := tmp union j ;
76375: LD_ADDR_VAR 0 5
76379: PUSH
76380: LD_VAR 0 5
76384: PUSH
76385: LD_VAR 0 3
76389: UNION
76390: ST_TO_ADDR
// if tmp >= 5 then
76391: LD_VAR 0 5
76395: PUSH
76396: LD_INT 5
76398: GREATEREQUAL
76399: IFFALSE 76403
// break ;
76401: GO 76405
// end ;
76403: GO 76372
76405: POP
76406: POP
// end ; if not tmp then
76407: LD_VAR 0 5
76411: NOT
76412: IFFALSE 76416
// continue ;
76414: GO 75628
// for j in tmp do
76416: LD_ADDR_VAR 0 3
76420: PUSH
76421: LD_VAR 0 5
76425: PUSH
76426: FOR_IN
76427: IFFALSE 76517
// if not GetTag ( j ) then
76429: LD_VAR 0 3
76433: PPUSH
76434: CALL_OW 110
76438: NOT
76439: IFFALSE 76515
// begin mc_crates_collector := ReplaceIn ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
76441: LD_ADDR_EXP 53
76445: PUSH
76446: LD_EXP 53
76450: PPUSH
76451: LD_VAR 0 2
76455: PUSH
76456: LD_EXP 53
76460: PUSH
76461: LD_VAR 0 2
76465: ARRAY
76466: PUSH
76467: LD_INT 1
76469: PLUS
76470: PUSH
76471: EMPTY
76472: LIST
76473: LIST
76474: PPUSH
76475: LD_VAR 0 3
76479: PPUSH
76480: CALL 26426 0 3
76484: ST_TO_ADDR
// SetTag ( j , 107 ) ;
76485: LD_VAR 0 3
76489: PPUSH
76490: LD_INT 107
76492: PPUSH
76493: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
76497: LD_EXP 53
76501: PUSH
76502: LD_VAR 0 2
76506: ARRAY
76507: PUSH
76508: LD_INT 5
76510: GREATEREQUAL
76511: IFFALSE 76515
// break ;
76513: GO 76517
// end ;
76515: GO 76426
76517: POP
76518: POP
// end ; if mc_crates_collector [ i ] and target then
76519: LD_EXP 53
76523: PUSH
76524: LD_VAR 0 2
76528: ARRAY
76529: PUSH
76530: LD_VAR 0 6
76534: AND
76535: IFFALSE 76778
// begin if mc_crates_collector [ i ] < target [ 1 ] then
76537: LD_EXP 53
76541: PUSH
76542: LD_VAR 0 2
76546: ARRAY
76547: PUSH
76548: LD_VAR 0 6
76552: PUSH
76553: LD_INT 1
76555: ARRAY
76556: LESS
76557: IFFALSE 76577
// tmp := mc_crates_collector [ i ] else
76559: LD_ADDR_VAR 0 5
76563: PUSH
76564: LD_EXP 53
76568: PUSH
76569: LD_VAR 0 2
76573: ARRAY
76574: ST_TO_ADDR
76575: GO 76591
// tmp := target [ 1 ] ;
76577: LD_ADDR_VAR 0 5
76581: PUSH
76582: LD_VAR 0 6
76586: PUSH
76587: LD_INT 1
76589: ARRAY
76590: ST_TO_ADDR
// k := 0 ;
76591: LD_ADDR_VAR 0 4
76595: PUSH
76596: LD_INT 0
76598: ST_TO_ADDR
// for j in mc_crates_collector [ i ] do
76599: LD_ADDR_VAR 0 3
76603: PUSH
76604: LD_EXP 53
76608: PUSH
76609: LD_VAR 0 2
76613: ARRAY
76614: PUSH
76615: FOR_IN
76616: IFFALSE 76776
// begin k := k + 1 ;
76618: LD_ADDR_VAR 0 4
76622: PUSH
76623: LD_VAR 0 4
76627: PUSH
76628: LD_INT 1
76630: PLUS
76631: ST_TO_ADDR
// if k > tmp then
76632: LD_VAR 0 4
76636: PUSH
76637: LD_VAR 0 5
76641: GREATER
76642: IFFALSE 76646
// break ;
76644: GO 76776
// if not GetClass ( j ) in [ 2 , 16 ] then
76646: LD_VAR 0 3
76650: PPUSH
76651: CALL_OW 257
76655: PUSH
76656: LD_INT 2
76658: PUSH
76659: LD_INT 16
76661: PUSH
76662: EMPTY
76663: LIST
76664: LIST
76665: IN
76666: NOT
76667: IFFALSE 76720
// begin mc_crates_collector := Replace ( mc_crates_collector , i , mc_crates_collector [ i ] diff j ) ;
76669: LD_ADDR_EXP 53
76673: PUSH
76674: LD_EXP 53
76678: PPUSH
76679: LD_VAR 0 2
76683: PPUSH
76684: LD_EXP 53
76688: PUSH
76689: LD_VAR 0 2
76693: ARRAY
76694: PUSH
76695: LD_VAR 0 3
76699: DIFF
76700: PPUSH
76701: CALL_OW 1
76705: ST_TO_ADDR
// SetTag ( j , 0 ) ;
76706: LD_VAR 0 3
76710: PPUSH
76711: LD_INT 0
76713: PPUSH
76714: CALL_OW 109
// continue ;
76718: GO 76615
// end ; if IsInUnit ( j ) then
76720: LD_VAR 0 3
76724: PPUSH
76725: CALL_OW 310
76729: IFFALSE 76740
// ComExitBuilding ( j ) ;
76731: LD_VAR 0 3
76735: PPUSH
76736: CALL_OW 122
// wait ( 3 ) ;
76740: LD_INT 3
76742: PPUSH
76743: CALL_OW 67
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
76747: LD_VAR 0 3
76751: PPUSH
76752: LD_VAR 0 6
76756: PUSH
76757: LD_INT 2
76759: ARRAY
76760: PPUSH
76761: LD_VAR 0 6
76765: PUSH
76766: LD_INT 3
76768: ARRAY
76769: PPUSH
76770: CALL_OW 117
// end ;
76774: GO 76615
76776: POP
76777: POP
// end ; end else
76778: GO 77359
// begin for j in cargo do
76780: LD_ADDR_VAR 0 3
76784: PUSH
76785: LD_VAR 0 7
76789: PUSH
76790: FOR_IN
76791: IFFALSE 77357
// begin if GetTag ( j ) <> 0 then
76793: LD_VAR 0 3
76797: PPUSH
76798: CALL_OW 110
76802: PUSH
76803: LD_INT 0
76805: NONEQUAL
76806: IFFALSE 76810
// continue ;
76808: GO 76790
// if GetLives ( j ) < 1000 and not IsInArea ( j , mc_parking [ i ] ) then
76810: LD_VAR 0 3
76814: PPUSH
76815: CALL_OW 256
76819: PUSH
76820: LD_INT 1000
76822: LESS
76823: PUSH
76824: LD_VAR 0 3
76828: PPUSH
76829: LD_EXP 60
76833: PUSH
76834: LD_VAR 0 2
76838: ARRAY
76839: PPUSH
76840: CALL_OW 308
76844: NOT
76845: AND
76846: IFFALSE 76868
// ComMoveToArea ( j , mc_parking [ i ] ) ;
76848: LD_VAR 0 3
76852: PPUSH
76853: LD_EXP 60
76857: PUSH
76858: LD_VAR 0 2
76862: ARRAY
76863: PPUSH
76864: CALL_OW 113
// if GetLives ( j ) < 1000 and IsInArea ( j , mc_parking [ i ] ) then
76868: LD_VAR 0 3
76872: PPUSH
76873: CALL_OW 256
76877: PUSH
76878: LD_INT 1000
76880: LESS
76881: PUSH
76882: LD_VAR 0 3
76886: PPUSH
76887: LD_EXP 60
76891: PUSH
76892: LD_VAR 0 2
76896: ARRAY
76897: PPUSH
76898: CALL_OW 308
76902: AND
76903: IFFALSE 76907
// continue ;
76905: GO 76790
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
76907: LD_VAR 0 3
76911: PPUSH
76912: CALL_OW 262
76916: PUSH
76917: LD_INT 2
76919: EQUAL
76920: PUSH
76921: LD_VAR 0 3
76925: PPUSH
76926: CALL_OW 261
76930: PUSH
76931: LD_INT 15
76933: LESS
76934: AND
76935: IFFALSE 76939
// continue ;
76937: GO 76790
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
76939: LD_VAR 0 3
76943: PPUSH
76944: CALL_OW 262
76948: PUSH
76949: LD_INT 1
76951: EQUAL
76952: PUSH
76953: LD_VAR 0 3
76957: PPUSH
76958: CALL_OW 261
76962: PUSH
76963: LD_INT 10
76965: LESS
76966: AND
76967: IFFALSE 77296
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
76969: LD_ADDR_VAR 0 8
76973: PUSH
76974: LD_EXP 36
76978: PUSH
76979: LD_VAR 0 2
76983: ARRAY
76984: PPUSH
76985: LD_INT 2
76987: PUSH
76988: LD_INT 30
76990: PUSH
76991: LD_INT 0
76993: PUSH
76994: EMPTY
76995: LIST
76996: LIST
76997: PUSH
76998: LD_INT 30
77000: PUSH
77001: LD_INT 1
77003: PUSH
77004: EMPTY
77005: LIST
77006: LIST
77007: PUSH
77008: EMPTY
77009: LIST
77010: LIST
77011: LIST
77012: PPUSH
77013: CALL_OW 72
77017: ST_TO_ADDR
// if not depot then
77018: LD_VAR 0 8
77022: NOT
77023: IFFALSE 77027
// continue ;
77025: GO 76790
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
77027: LD_VAR 0 3
77031: PPUSH
77032: LD_VAR 0 8
77036: PPUSH
77037: LD_VAR 0 3
77041: PPUSH
77042: CALL_OW 74
77046: PPUSH
77047: CALL_OW 296
77051: PUSH
77052: LD_INT 6
77054: LESS
77055: IFFALSE 77071
// SetFuel ( j , 100 ) else
77057: LD_VAR 0 3
77061: PPUSH
77062: LD_INT 100
77064: PPUSH
77065: CALL_OW 240
77069: GO 77296
// if GetFuel ( j ) = 0 then
77071: LD_VAR 0 3
77075: PPUSH
77076: CALL_OW 261
77080: PUSH
77081: LD_INT 0
77083: EQUAL
77084: IFFALSE 77296
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
77086: LD_ADDR_EXP 55
77090: PUSH
77091: LD_EXP 55
77095: PPUSH
77096: LD_VAR 0 2
77100: PPUSH
77101: LD_EXP 55
77105: PUSH
77106: LD_VAR 0 2
77110: ARRAY
77111: PUSH
77112: LD_VAR 0 3
77116: DIFF
77117: PPUSH
77118: CALL_OW 1
77122: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
77123: LD_VAR 0 3
77127: PPUSH
77128: CALL_OW 263
77132: PUSH
77133: LD_INT 1
77135: EQUAL
77136: IFFALSE 77152
// ComExitVehicle ( IsInUnit ( j ) ) ;
77138: LD_VAR 0 3
77142: PPUSH
77143: CALL_OW 310
77147: PPUSH
77148: CALL_OW 121
// if GetControl ( j ) = control_remote then
77152: LD_VAR 0 3
77156: PPUSH
77157: CALL_OW 263
77161: PUSH
77162: LD_INT 2
77164: EQUAL
77165: IFFALSE 77176
// ComUnlink ( j ) ;
77167: LD_VAR 0 3
77171: PPUSH
77172: CALL_OW 136
// fac := MC_GetBuildings ( i , b_factory ) ;
77176: LD_ADDR_VAR 0 9
77180: PUSH
77181: LD_VAR 0 2
77185: PPUSH
77186: LD_INT 3
77188: PPUSH
77189: CALL 86433 0 2
77193: ST_TO_ADDR
// if fac then
77194: LD_VAR 0 9
77198: IFFALSE 77294
// begin for k in fac do
77200: LD_ADDR_VAR 0 4
77204: PUSH
77205: LD_VAR 0 9
77209: PUSH
77210: FOR_IN
77211: IFFALSE 77292
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
77213: LD_ADDR_VAR 0 10
77217: PUSH
77218: LD_VAR 0 9
77222: PPUSH
77223: LD_VAR 0 3
77227: PPUSH
77228: CALL_OW 265
77232: PPUSH
77233: LD_VAR 0 3
77237: PPUSH
77238: CALL_OW 262
77242: PPUSH
77243: LD_VAR 0 3
77247: PPUSH
77248: CALL_OW 263
77252: PPUSH
77253: LD_VAR 0 3
77257: PPUSH
77258: CALL_OW 264
77262: PPUSH
77263: CALL 23958 0 5
77267: ST_TO_ADDR
// if components then
77268: LD_VAR 0 10
77272: IFFALSE 77290
// begin MC_InsertProduceList ( i , components ) ;
77274: LD_VAR 0 2
77278: PPUSH
77279: LD_VAR 0 10
77283: PPUSH
77284: CALL 85978 0 2
// break ;
77288: GO 77292
// end ; end ;
77290: GO 77210
77292: POP
77293: POP
// end ; continue ;
77294: GO 76790
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
77296: LD_VAR 0 3
77300: PPUSH
77301: LD_INT 1
77303: PPUSH
77304: CALL_OW 289
77308: PUSH
77309: LD_INT 100
77311: LESS
77312: PUSH
77313: LD_VAR 0 3
77317: PPUSH
77318: CALL_OW 314
77322: NOT
77323: AND
77324: IFFALSE 77353
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
77326: LD_VAR 0 3
77330: PPUSH
77331: LD_VAR 0 6
77335: PUSH
77336: LD_INT 2
77338: ARRAY
77339: PPUSH
77340: LD_VAR 0 6
77344: PUSH
77345: LD_INT 3
77347: ARRAY
77348: PPUSH
77349: CALL_OW 117
// break ;
77353: GO 77357
// end ;
77355: GO 76790
77357: POP
77358: POP
// end ; end ;
77359: GO 75628
77361: POP
77362: POP
// end ;
77363: LD_VAR 0 1
77367: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
77368: LD_INT 0
77370: PPUSH
77371: PPUSH
77372: PPUSH
77373: PPUSH
// if not mc_bases then
77374: LD_EXP 36
77378: NOT
77379: IFFALSE 77383
// exit ;
77381: GO 77544
// for i = 1 to mc_bases do
77383: LD_ADDR_VAR 0 2
77387: PUSH
77388: DOUBLE
77389: LD_INT 1
77391: DEC
77392: ST_TO_ADDR
77393: LD_EXP 36
77397: PUSH
77398: FOR_TO
77399: IFFALSE 77542
// begin tmp := UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) ;
77401: LD_ADDR_VAR 0 4
77405: PUSH
77406: LD_EXP 55
77410: PUSH
77411: LD_VAR 0 2
77415: ARRAY
77416: PUSH
77417: LD_EXP 58
77421: PUSH
77422: LD_VAR 0 2
77426: ARRAY
77427: UNION
77428: PPUSH
77429: LD_INT 33
77431: PUSH
77432: LD_INT 2
77434: PUSH
77435: EMPTY
77436: LIST
77437: LIST
77438: PPUSH
77439: CALL_OW 72
77443: ST_TO_ADDR
// if tmp then
77444: LD_VAR 0 4
77448: IFFALSE 77540
// for j in tmp do
77450: LD_ADDR_VAR 0 3
77454: PUSH
77455: LD_VAR 0 4
77459: PUSH
77460: FOR_IN
77461: IFFALSE 77538
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
77463: LD_VAR 0 3
77467: PPUSH
77468: CALL_OW 312
77472: NOT
77473: PUSH
77474: LD_VAR 0 3
77478: PPUSH
77479: CALL_OW 256
77483: PUSH
77484: LD_INT 250
77486: GREATEREQUAL
77487: AND
77488: IFFALSE 77501
// Connect ( j ) else
77490: LD_VAR 0 3
77494: PPUSH
77495: CALL 29359 0 1
77499: GO 77536
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
77501: LD_VAR 0 3
77505: PPUSH
77506: CALL_OW 256
77510: PUSH
77511: LD_INT 250
77513: LESS
77514: PUSH
77515: LD_VAR 0 3
77519: PPUSH
77520: CALL_OW 312
77524: AND
77525: IFFALSE 77536
// ComUnlink ( j ) ;
77527: LD_VAR 0 3
77531: PPUSH
77532: CALL_OW 136
77536: GO 77460
77538: POP
77539: POP
// end ;
77540: GO 77398
77542: POP
77543: POP
// end ;
77544: LD_VAR 0 1
77548: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
77549: LD_INT 0
77551: PPUSH
77552: PPUSH
77553: PPUSH
77554: PPUSH
77555: PPUSH
// if not mc_bases then
77556: LD_EXP 36
77560: NOT
77561: IFFALSE 77565
// exit ;
77563: GO 78010
// for i = 1 to mc_bases do
77565: LD_ADDR_VAR 0 2
77569: PUSH
77570: DOUBLE
77571: LD_INT 1
77573: DEC
77574: ST_TO_ADDR
77575: LD_EXP 36
77579: PUSH
77580: FOR_TO
77581: IFFALSE 78008
// begin if not mc_produce [ i ] then
77583: LD_EXP 57
77587: PUSH
77588: LD_VAR 0 2
77592: ARRAY
77593: NOT
77594: IFFALSE 77598
// continue ;
77596: GO 77580
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
77598: LD_ADDR_VAR 0 5
77602: PUSH
77603: LD_EXP 36
77607: PUSH
77608: LD_VAR 0 2
77612: ARRAY
77613: PPUSH
77614: LD_INT 30
77616: PUSH
77617: LD_INT 3
77619: PUSH
77620: EMPTY
77621: LIST
77622: LIST
77623: PPUSH
77624: CALL_OW 72
77628: ST_TO_ADDR
// if not fac then
77629: LD_VAR 0 5
77633: NOT
77634: IFFALSE 77638
// continue ;
77636: GO 77580
// for j in fac do
77638: LD_ADDR_VAR 0 3
77642: PUSH
77643: LD_VAR 0 5
77647: PUSH
77648: FOR_IN
77649: IFFALSE 78004
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] then
77651: LD_VAR 0 3
77655: PPUSH
77656: CALL_OW 461
77660: PUSH
77661: LD_INT 2
77663: NONEQUAL
77664: PUSH
77665: LD_VAR 0 3
77669: PPUSH
77670: LD_INT 15
77672: PPUSH
77673: CALL 29019 0 2
77677: PUSH
77678: LD_INT 4
77680: ARRAY
77681: OR
77682: IFFALSE 77686
// continue ;
77684: GO 77648
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
77686: LD_VAR 0 3
77690: PPUSH
77691: LD_EXP 57
77695: PUSH
77696: LD_VAR 0 2
77700: ARRAY
77701: PUSH
77702: LD_INT 1
77704: ARRAY
77705: PUSH
77706: LD_INT 1
77708: ARRAY
77709: PPUSH
77710: LD_EXP 57
77714: PUSH
77715: LD_VAR 0 2
77719: ARRAY
77720: PUSH
77721: LD_INT 1
77723: ARRAY
77724: PUSH
77725: LD_INT 2
77727: ARRAY
77728: PPUSH
77729: LD_EXP 57
77733: PUSH
77734: LD_VAR 0 2
77738: ARRAY
77739: PUSH
77740: LD_INT 1
77742: ARRAY
77743: PUSH
77744: LD_INT 3
77746: ARRAY
77747: PPUSH
77748: LD_EXP 57
77752: PUSH
77753: LD_VAR 0 2
77757: ARRAY
77758: PUSH
77759: LD_INT 1
77761: ARRAY
77762: PUSH
77763: LD_INT 4
77765: ARRAY
77766: PPUSH
77767: CALL_OW 448
77771: PUSH
77772: LD_VAR 0 3
77776: PPUSH
77777: LD_EXP 57
77781: PUSH
77782: LD_VAR 0 2
77786: ARRAY
77787: PUSH
77788: LD_INT 1
77790: ARRAY
77791: PUSH
77792: LD_INT 1
77794: ARRAY
77795: PUSH
77796: LD_EXP 57
77800: PUSH
77801: LD_VAR 0 2
77805: ARRAY
77806: PUSH
77807: LD_INT 1
77809: ARRAY
77810: PUSH
77811: LD_INT 2
77813: ARRAY
77814: PUSH
77815: LD_EXP 57
77819: PUSH
77820: LD_VAR 0 2
77824: ARRAY
77825: PUSH
77826: LD_INT 1
77828: ARRAY
77829: PUSH
77830: LD_INT 3
77832: ARRAY
77833: PUSH
77834: LD_EXP 57
77838: PUSH
77839: LD_VAR 0 2
77843: ARRAY
77844: PUSH
77845: LD_INT 1
77847: ARRAY
77848: PUSH
77849: LD_INT 4
77851: ARRAY
77852: PUSH
77853: EMPTY
77854: LIST
77855: LIST
77856: LIST
77857: LIST
77858: PPUSH
77859: CALL 32690 0 2
77863: AND
77864: IFFALSE 78002
// begin AddComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
77866: LD_VAR 0 3
77870: PPUSH
77871: LD_EXP 57
77875: PUSH
77876: LD_VAR 0 2
77880: ARRAY
77881: PUSH
77882: LD_INT 1
77884: ARRAY
77885: PUSH
77886: LD_INT 1
77888: ARRAY
77889: PPUSH
77890: LD_EXP 57
77894: PUSH
77895: LD_VAR 0 2
77899: ARRAY
77900: PUSH
77901: LD_INT 1
77903: ARRAY
77904: PUSH
77905: LD_INT 2
77907: ARRAY
77908: PPUSH
77909: LD_EXP 57
77913: PUSH
77914: LD_VAR 0 2
77918: ARRAY
77919: PUSH
77920: LD_INT 1
77922: ARRAY
77923: PUSH
77924: LD_INT 3
77926: ARRAY
77927: PPUSH
77928: LD_EXP 57
77932: PUSH
77933: LD_VAR 0 2
77937: ARRAY
77938: PUSH
77939: LD_INT 1
77941: ARRAY
77942: PUSH
77943: LD_INT 4
77945: ARRAY
77946: PPUSH
77947: CALL_OW 185
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
77951: LD_ADDR_VAR 0 4
77955: PUSH
77956: LD_EXP 57
77960: PUSH
77961: LD_VAR 0 2
77965: ARRAY
77966: PPUSH
77967: LD_INT 1
77969: PPUSH
77970: CALL_OW 3
77974: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
77975: LD_ADDR_EXP 57
77979: PUSH
77980: LD_EXP 57
77984: PPUSH
77985: LD_VAR 0 2
77989: PPUSH
77990: LD_VAR 0 4
77994: PPUSH
77995: CALL_OW 1
77999: ST_TO_ADDR
// break ;
78000: GO 78004
// end ; end ;
78002: GO 77648
78004: POP
78005: POP
// end ;
78006: GO 77580
78008: POP
78009: POP
// end ;
78010: LD_VAR 0 1
78014: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
78015: LD_INT 0
78017: PPUSH
78018: PPUSH
78019: PPUSH
// if not mc_bases then
78020: LD_EXP 36
78024: NOT
78025: IFFALSE 78029
// exit ;
78027: GO 78118
// for i = 1 to mc_bases do
78029: LD_ADDR_VAR 0 2
78033: PUSH
78034: DOUBLE
78035: LD_INT 1
78037: DEC
78038: ST_TO_ADDR
78039: LD_EXP 36
78043: PUSH
78044: FOR_TO
78045: IFFALSE 78116
// begin if mc_attack [ i ] then
78047: LD_EXP 56
78051: PUSH
78052: LD_VAR 0 2
78056: ARRAY
78057: IFFALSE 78114
// begin tmp := mc_attack [ i ] [ 1 ] ;
78059: LD_ADDR_VAR 0 3
78063: PUSH
78064: LD_EXP 56
78068: PUSH
78069: LD_VAR 0 2
78073: ARRAY
78074: PUSH
78075: LD_INT 1
78077: ARRAY
78078: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
78079: LD_ADDR_EXP 56
78083: PUSH
78084: LD_EXP 56
78088: PPUSH
78089: LD_VAR 0 2
78093: PPUSH
78094: EMPTY
78095: PPUSH
78096: CALL_OW 1
78100: ST_TO_ADDR
// Attack ( tmp ) ;
78101: LD_VAR 0 3
78105: PPUSH
78106: CALL 54903 0 1
// exit ;
78110: POP
78111: POP
78112: GO 78118
// end ; end ;
78114: GO 78044
78116: POP
78117: POP
// end ;
78118: LD_VAR 0 1
78122: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
78123: LD_INT 0
78125: PPUSH
78126: PPUSH
78127: PPUSH
78128: PPUSH
78129: PPUSH
78130: PPUSH
78131: PPUSH
// if not mc_bases then
78132: LD_EXP 36
78136: NOT
78137: IFFALSE 78141
// exit ;
78139: GO 78723
// for i = 1 to mc_bases do
78141: LD_ADDR_VAR 0 2
78145: PUSH
78146: DOUBLE
78147: LD_INT 1
78149: DEC
78150: ST_TO_ADDR
78151: LD_EXP 36
78155: PUSH
78156: FOR_TO
78157: IFFALSE 78721
// begin if not mc_bases [ i ] then
78159: LD_EXP 36
78163: PUSH
78164: LD_VAR 0 2
78168: ARRAY
78169: NOT
78170: IFFALSE 78174
// continue ;
78172: GO 78156
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
78174: LD_ADDR_VAR 0 7
78178: PUSH
78179: LD_EXP 36
78183: PUSH
78184: LD_VAR 0 2
78188: ARRAY
78189: PUSH
78190: LD_INT 1
78192: ARRAY
78193: PPUSH
78194: CALL 23262 0 1
78198: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
78199: LD_ADDR_EXP 59
78203: PUSH
78204: LD_EXP 59
78208: PPUSH
78209: LD_VAR 0 2
78213: PPUSH
78214: LD_EXP 36
78218: PUSH
78219: LD_VAR 0 2
78223: ARRAY
78224: PUSH
78225: LD_INT 1
78227: ARRAY
78228: PPUSH
78229: CALL_OW 255
78233: PPUSH
78234: LD_EXP 61
78238: PUSH
78239: LD_VAR 0 2
78243: ARRAY
78244: PPUSH
78245: CALL 20965 0 2
78249: PPUSH
78250: CALL_OW 1
78254: ST_TO_ADDR
// if not mc_scan [ i ] then
78255: LD_EXP 59
78259: PUSH
78260: LD_VAR 0 2
78264: ARRAY
78265: NOT
78266: IFFALSE 78421
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
78268: LD_ADDR_VAR 0 4
78272: PUSH
78273: LD_EXP 36
78277: PUSH
78278: LD_VAR 0 2
78282: ARRAY
78283: PPUSH
78284: LD_INT 2
78286: PUSH
78287: LD_INT 25
78289: PUSH
78290: LD_INT 5
78292: PUSH
78293: EMPTY
78294: LIST
78295: LIST
78296: PUSH
78297: LD_INT 25
78299: PUSH
78300: LD_INT 8
78302: PUSH
78303: EMPTY
78304: LIST
78305: LIST
78306: PUSH
78307: LD_INT 25
78309: PUSH
78310: LD_INT 9
78312: PUSH
78313: EMPTY
78314: LIST
78315: LIST
78316: PUSH
78317: EMPTY
78318: LIST
78319: LIST
78320: LIST
78321: LIST
78322: PPUSH
78323: CALL_OW 72
78327: ST_TO_ADDR
// if not tmp then
78328: LD_VAR 0 4
78332: NOT
78333: IFFALSE 78337
// continue ;
78335: GO 78156
// for j in tmp do
78337: LD_ADDR_VAR 0 3
78341: PUSH
78342: LD_VAR 0 4
78346: PUSH
78347: FOR_IN
78348: IFFALSE 78419
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
78350: LD_VAR 0 3
78354: PPUSH
78355: CALL_OW 310
78359: PPUSH
78360: CALL_OW 266
78364: PUSH
78365: LD_INT 5
78367: EQUAL
78368: PUSH
78369: LD_VAR 0 3
78373: PPUSH
78374: CALL_OW 257
78378: PUSH
78379: LD_INT 1
78381: EQUAL
78382: AND
78383: PUSH
78384: LD_VAR 0 3
78388: PPUSH
78389: CALL_OW 459
78393: NOT
78394: AND
78395: PUSH
78396: LD_VAR 0 7
78400: AND
78401: IFFALSE 78417
// ComChangeProfession ( j , class ) ;
78403: LD_VAR 0 3
78407: PPUSH
78408: LD_VAR 0 7
78412: PPUSH
78413: CALL_OW 123
78417: GO 78347
78419: POP
78420: POP
// end ; if mc_scan [ i ] and not mc_defender [ i ] and not UnitFilter ( mc_bases [ i ] , [ f_btype , b_bunker ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) then
78421: LD_EXP 59
78425: PUSH
78426: LD_VAR 0 2
78430: ARRAY
78431: PUSH
78432: LD_EXP 58
78436: PUSH
78437: LD_VAR 0 2
78441: ARRAY
78442: NOT
78443: AND
78444: PUSH
78445: LD_EXP 36
78449: PUSH
78450: LD_VAR 0 2
78454: ARRAY
78455: PPUSH
78456: LD_INT 30
78458: PUSH
78459: LD_INT 32
78461: PUSH
78462: EMPTY
78463: LIST
78464: LIST
78465: PPUSH
78466: CALL_OW 72
78470: NOT
78471: AND
78472: PUSH
78473: LD_EXP 36
78477: PUSH
78478: LD_VAR 0 2
78482: ARRAY
78483: PPUSH
78484: LD_INT 2
78486: PUSH
78487: LD_INT 30
78489: PUSH
78490: LD_INT 4
78492: PUSH
78493: EMPTY
78494: LIST
78495: LIST
78496: PUSH
78497: LD_INT 30
78499: PUSH
78500: LD_INT 5
78502: PUSH
78503: EMPTY
78504: LIST
78505: LIST
78506: PUSH
78507: EMPTY
78508: LIST
78509: LIST
78510: LIST
78511: PPUSH
78512: CALL_OW 72
78516: NOT
78517: AND
78518: IFFALSE 78650
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
78520: LD_ADDR_VAR 0 4
78524: PUSH
78525: LD_EXP 36
78529: PUSH
78530: LD_VAR 0 2
78534: ARRAY
78535: PPUSH
78536: LD_INT 2
78538: PUSH
78539: LD_INT 25
78541: PUSH
78542: LD_INT 1
78544: PUSH
78545: EMPTY
78546: LIST
78547: LIST
78548: PUSH
78549: LD_INT 25
78551: PUSH
78552: LD_INT 5
78554: PUSH
78555: EMPTY
78556: LIST
78557: LIST
78558: PUSH
78559: LD_INT 25
78561: PUSH
78562: LD_INT 8
78564: PUSH
78565: EMPTY
78566: LIST
78567: LIST
78568: PUSH
78569: LD_INT 25
78571: PUSH
78572: LD_INT 9
78574: PUSH
78575: EMPTY
78576: LIST
78577: LIST
78578: PUSH
78579: EMPTY
78580: LIST
78581: LIST
78582: LIST
78583: LIST
78584: LIST
78585: PPUSH
78586: CALL_OW 72
78590: ST_TO_ADDR
// tmp := tmp diff FilterByTag ( tmp , 18 ) ;
78591: LD_ADDR_VAR 0 4
78595: PUSH
78596: LD_VAR 0 4
78600: PUSH
78601: LD_VAR 0 4
78605: PPUSH
78606: LD_INT 18
78608: PPUSH
78609: CALL 59686 0 2
78613: DIFF
78614: ST_TO_ADDR
// if tmp then
78615: LD_VAR 0 4
78619: IFFALSE 78650
// begin BasicDefend ( i , tmp , mc_scan_area [ i ] ) ;
78621: LD_VAR 0 2
78625: PPUSH
78626: LD_VAR 0 4
78630: PPUSH
78631: LD_EXP 61
78635: PUSH
78636: LD_VAR 0 2
78640: ARRAY
78641: PPUSH
78642: CALL 21000 0 3
// exit ;
78646: POP
78647: POP
78648: GO 78723
// end ; end ; if mc_scan [ i ] and mc_defender [ i ] then
78650: LD_EXP 59
78654: PUSH
78655: LD_VAR 0 2
78659: ARRAY
78660: PUSH
78661: LD_EXP 58
78665: PUSH
78666: LD_VAR 0 2
78670: ARRAY
78671: AND
78672: IFFALSE 78719
// begin tmp := mc_defender [ i ] ;
78674: LD_ADDR_VAR 0 4
78678: PUSH
78679: LD_EXP 58
78683: PUSH
78684: LD_VAR 0 2
78688: ARRAY
78689: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
78690: LD_VAR 0 2
78694: PPUSH
78695: LD_VAR 0 4
78699: PPUSH
78700: LD_EXP 59
78704: PUSH
78705: LD_VAR 0 2
78709: ARRAY
78710: PPUSH
78711: CALL 21561 0 3
// exit ;
78715: POP
78716: POP
78717: GO 78723
// end ; end ;
78719: GO 78156
78721: POP
78722: POP
// end ;
78723: LD_VAR 0 1
78727: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 , researching , idle_lab ; begin
78728: LD_INT 0
78730: PPUSH
78731: PPUSH
78732: PPUSH
78733: PPUSH
78734: PPUSH
78735: PPUSH
78736: PPUSH
78737: PPUSH
78738: PPUSH
78739: PPUSH
78740: PPUSH
// if not mc_bases then
78741: LD_EXP 36
78745: NOT
78746: IFFALSE 78750
// exit ;
78748: GO 79837
// for i = 1 to mc_bases do
78750: LD_ADDR_VAR 0 2
78754: PUSH
78755: DOUBLE
78756: LD_INT 1
78758: DEC
78759: ST_TO_ADDR
78760: LD_EXP 36
78764: PUSH
78765: FOR_TO
78766: IFFALSE 79835
// begin tmp := mc_lab [ i ] ;
78768: LD_ADDR_VAR 0 6
78772: PUSH
78773: LD_EXP 69
78777: PUSH
78778: LD_VAR 0 2
78782: ARRAY
78783: ST_TO_ADDR
// if not tmp then
78784: LD_VAR 0 6
78788: NOT
78789: IFFALSE 78793
// continue ;
78791: GO 78765
// idle_lab := 0 ;
78793: LD_ADDR_VAR 0 11
78797: PUSH
78798: LD_INT 0
78800: ST_TO_ADDR
// for j in tmp do
78801: LD_ADDR_VAR 0 3
78805: PUSH
78806: LD_VAR 0 6
78810: PUSH
78811: FOR_IN
78812: IFFALSE 79831
// begin researching := false ;
78814: LD_ADDR_VAR 0 10
78818: PUSH
78819: LD_INT 0
78821: ST_TO_ADDR
// side := GetSide ( j ) ;
78822: LD_ADDR_VAR 0 4
78826: PUSH
78827: LD_VAR 0 3
78831: PPUSH
78832: CALL_OW 255
78836: ST_TO_ADDR
// if not mc_tech [ side ] then
78837: LD_EXP 63
78841: PUSH
78842: LD_VAR 0 4
78846: ARRAY
78847: NOT
78848: IFFALSE 78852
// continue ;
78850: GO 78811
// if BuildingStatus ( j ) = bs_idle then
78852: LD_VAR 0 3
78856: PPUSH
78857: CALL_OW 461
78861: PUSH
78862: LD_INT 2
78864: EQUAL
78865: IFFALSE 79053
// begin if idle_lab and UnitsInside ( j ) < 6 then
78867: LD_VAR 0 11
78871: PUSH
78872: LD_VAR 0 3
78876: PPUSH
78877: CALL_OW 313
78881: PUSH
78882: LD_INT 6
78884: LESS
78885: AND
78886: IFFALSE 78957
// begin tmp2 := UnitsInside ( idle_lab ) ;
78888: LD_ADDR_VAR 0 9
78892: PUSH
78893: LD_VAR 0 11
78897: PPUSH
78898: CALL_OW 313
78902: ST_TO_ADDR
// if tmp2 then
78903: LD_VAR 0 9
78907: IFFALSE 78949
// for x in tmp2 do
78909: LD_ADDR_VAR 0 7
78913: PUSH
78914: LD_VAR 0 9
78918: PUSH
78919: FOR_IN
78920: IFFALSE 78947
// begin ComExitBuilding ( x ) ;
78922: LD_VAR 0 7
78926: PPUSH
78927: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
78931: LD_VAR 0 7
78935: PPUSH
78936: LD_VAR 0 3
78940: PPUSH
78941: CALL_OW 180
// end ;
78945: GO 78919
78947: POP
78948: POP
// idle_lab := 0 ;
78949: LD_ADDR_VAR 0 11
78953: PUSH
78954: LD_INT 0
78956: ST_TO_ADDR
// end ; for t in mc_tech [ side ] do
78957: LD_ADDR_VAR 0 5
78961: PUSH
78962: LD_EXP 63
78966: PUSH
78967: LD_VAR 0 4
78971: ARRAY
78972: PUSH
78973: FOR_IN
78974: IFFALSE 79034
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
78976: LD_VAR 0 3
78980: PPUSH
78981: LD_VAR 0 5
78985: PPUSH
78986: CALL_OW 430
78990: PUSH
78991: LD_VAR 0 4
78995: PPUSH
78996: LD_VAR 0 5
79000: PPUSH
79001: CALL 20070 0 2
79005: AND
79006: IFFALSE 79032
// begin researching := true ;
79008: LD_ADDR_VAR 0 10
79012: PUSH
79013: LD_INT 1
79015: ST_TO_ADDR
// ComResearch ( j , t ) ;
79016: LD_VAR 0 3
79020: PPUSH
79021: LD_VAR 0 5
79025: PPUSH
79026: CALL_OW 124
// break ;
79030: GO 79034
// end ;
79032: GO 78973
79034: POP
79035: POP
// if not researching then
79036: LD_VAR 0 10
79040: NOT
79041: IFFALSE 79053
// idle_lab := j ;
79043: LD_ADDR_VAR 0 11
79047: PUSH
79048: LD_VAR 0 3
79052: ST_TO_ADDR
// end ; if BuildingStatus ( j ) = bs_need_ape then
79053: LD_VAR 0 3
79057: PPUSH
79058: CALL_OW 461
79062: PUSH
79063: LD_INT 10
79065: EQUAL
79066: IFFALSE 79654
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
79068: LD_EXP 65
79072: PUSH
79073: LD_VAR 0 2
79077: ARRAY
79078: NOT
79079: PUSH
79080: LD_EXP 66
79084: PUSH
79085: LD_VAR 0 2
79089: ARRAY
79090: NOT
79091: AND
79092: PUSH
79093: LD_EXP 63
79097: PUSH
79098: LD_VAR 0 4
79102: ARRAY
79103: PUSH
79104: LD_INT 1
79106: GREATER
79107: AND
79108: IFFALSE 79239
// begin ComCancel ( j ) ;
79110: LD_VAR 0 3
79114: PPUSH
79115: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
79119: LD_ADDR_EXP 63
79123: PUSH
79124: LD_EXP 63
79128: PPUSH
79129: LD_VAR 0 4
79133: PPUSH
79134: LD_EXP 63
79138: PUSH
79139: LD_VAR 0 4
79143: ARRAY
79144: PPUSH
79145: LD_EXP 63
79149: PUSH
79150: LD_VAR 0 4
79154: ARRAY
79155: PUSH
79156: LD_INT 1
79158: MINUS
79159: PPUSH
79160: LD_EXP 63
79164: PUSH
79165: LD_VAR 0 4
79169: ARRAY
79170: PPUSH
79171: LD_INT 0
79173: PPUSH
79174: CALL 25844 0 4
79178: PPUSH
79179: CALL_OW 1
79183: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
79184: LD_ADDR_EXP 63
79188: PUSH
79189: LD_EXP 63
79193: PPUSH
79194: LD_VAR 0 4
79198: PPUSH
79199: LD_EXP 63
79203: PUSH
79204: LD_VAR 0 4
79208: ARRAY
79209: PPUSH
79210: LD_EXP 63
79214: PUSH
79215: LD_VAR 0 4
79219: ARRAY
79220: PPUSH
79221: LD_INT 1
79223: PPUSH
79224: LD_INT 0
79226: PPUSH
79227: CALL 25844 0 4
79231: PPUSH
79232: CALL_OW 1
79236: ST_TO_ADDR
// continue ;
79237: GO 78811
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
79239: LD_EXP 65
79243: PUSH
79244: LD_VAR 0 2
79248: ARRAY
79249: PUSH
79250: LD_EXP 66
79254: PUSH
79255: LD_VAR 0 2
79259: ARRAY
79260: NOT
79261: AND
79262: IFFALSE 79389
// begin mc_ape_in_lab := ReplaceIn ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
79264: LD_ADDR_EXP 66
79268: PUSH
79269: LD_EXP 66
79273: PPUSH
79274: LD_VAR 0 2
79278: PUSH
79279: LD_EXP 66
79283: PUSH
79284: LD_VAR 0 2
79288: ARRAY
79289: PUSH
79290: LD_INT 1
79292: PLUS
79293: PUSH
79294: EMPTY
79295: LIST
79296: LIST
79297: PPUSH
79298: LD_EXP 65
79302: PUSH
79303: LD_VAR 0 2
79307: ARRAY
79308: PUSH
79309: LD_INT 1
79311: ARRAY
79312: PPUSH
79313: CALL 26426 0 3
79317: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
79318: LD_EXP 65
79322: PUSH
79323: LD_VAR 0 2
79327: ARRAY
79328: PUSH
79329: LD_INT 1
79331: ARRAY
79332: PPUSH
79333: LD_INT 112
79335: PPUSH
79336: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
79340: LD_ADDR_VAR 0 9
79344: PUSH
79345: LD_EXP 65
79349: PUSH
79350: LD_VAR 0 2
79354: ARRAY
79355: PPUSH
79356: LD_INT 1
79358: PPUSH
79359: CALL_OW 3
79363: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
79364: LD_ADDR_EXP 65
79368: PUSH
79369: LD_EXP 65
79373: PPUSH
79374: LD_VAR 0 2
79378: PPUSH
79379: LD_VAR 0 9
79383: PPUSH
79384: CALL_OW 1
79388: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
79389: LD_EXP 65
79393: PUSH
79394: LD_VAR 0 2
79398: ARRAY
79399: PUSH
79400: LD_EXP 66
79404: PUSH
79405: LD_VAR 0 2
79409: ARRAY
79410: AND
79411: PUSH
79412: LD_EXP 66
79416: PUSH
79417: LD_VAR 0 2
79421: ARRAY
79422: PUSH
79423: LD_INT 1
79425: ARRAY
79426: PPUSH
79427: CALL_OW 310
79431: NOT
79432: AND
79433: PUSH
79434: LD_VAR 0 3
79438: PPUSH
79439: CALL_OW 313
79443: PUSH
79444: LD_INT 6
79446: EQUAL
79447: AND
79448: IFFALSE 79504
// begin tmp2 := UnitsInside ( j ) ;
79450: LD_ADDR_VAR 0 9
79454: PUSH
79455: LD_VAR 0 3
79459: PPUSH
79460: CALL_OW 313
79464: ST_TO_ADDR
// if tmp2 = 6 then
79465: LD_VAR 0 9
79469: PUSH
79470: LD_INT 6
79472: EQUAL
79473: IFFALSE 79504
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
79475: LD_VAR 0 9
79479: PUSH
79480: LD_INT 1
79482: ARRAY
79483: PPUSH
79484: LD_INT 112
79486: PPUSH
79487: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
79491: LD_VAR 0 9
79495: PUSH
79496: LD_INT 1
79498: ARRAY
79499: PPUSH
79500: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
79504: LD_EXP 66
79508: PUSH
79509: LD_VAR 0 2
79513: ARRAY
79514: PUSH
79515: LD_EXP 66
79519: PUSH
79520: LD_VAR 0 2
79524: ARRAY
79525: PUSH
79526: LD_INT 1
79528: ARRAY
79529: PPUSH
79530: CALL_OW 314
79534: NOT
79535: AND
79536: PUSH
79537: LD_EXP 66
79541: PUSH
79542: LD_VAR 0 2
79546: ARRAY
79547: PUSH
79548: LD_INT 1
79550: ARRAY
79551: PPUSH
79552: CALL_OW 310
79556: NOT
79557: AND
79558: IFFALSE 79584
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
79560: LD_EXP 66
79564: PUSH
79565: LD_VAR 0 2
79569: ARRAY
79570: PUSH
79571: LD_INT 1
79573: ARRAY
79574: PPUSH
79575: LD_VAR 0 3
79579: PPUSH
79580: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
79584: LD_EXP 66
79588: PUSH
79589: LD_VAR 0 2
79593: ARRAY
79594: PUSH
79595: LD_INT 1
79597: ARRAY
79598: PPUSH
79599: CALL_OW 310
79603: PUSH
79604: LD_EXP 66
79608: PUSH
79609: LD_VAR 0 2
79613: ARRAY
79614: PUSH
79615: LD_INT 1
79617: ARRAY
79618: PPUSH
79619: CALL_OW 310
79623: PPUSH
79624: CALL_OW 461
79628: PUSH
79629: LD_INT 3
79631: NONEQUAL
79632: AND
79633: IFFALSE 79654
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
79635: LD_EXP 66
79639: PUSH
79640: LD_VAR 0 2
79644: ARRAY
79645: PUSH
79646: LD_INT 1
79648: ARRAY
79649: PPUSH
79650: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
79654: LD_VAR 0 3
79658: PPUSH
79659: CALL_OW 461
79663: PUSH
79664: LD_INT 6
79666: EQUAL
79667: PUSH
79668: LD_VAR 0 6
79672: PUSH
79673: LD_INT 1
79675: GREATER
79676: AND
79677: IFFALSE 79829
// begin sci := [ ] ;
79679: LD_ADDR_VAR 0 8
79683: PUSH
79684: EMPTY
79685: ST_TO_ADDR
// for x in ( tmp diff j ) do
79686: LD_ADDR_VAR 0 7
79690: PUSH
79691: LD_VAR 0 6
79695: PUSH
79696: LD_VAR 0 3
79700: DIFF
79701: PUSH
79702: FOR_IN
79703: IFFALSE 79755
// begin if sci = 6 then
79705: LD_VAR 0 8
79709: PUSH
79710: LD_INT 6
79712: EQUAL
79713: IFFALSE 79717
// break ;
79715: GO 79755
// if BuildingStatus ( x ) = bs_idle then
79717: LD_VAR 0 7
79721: PPUSH
79722: CALL_OW 461
79726: PUSH
79727: LD_INT 2
79729: EQUAL
79730: IFFALSE 79753
// sci := sci ^ UnitsInside ( x ) ;
79732: LD_ADDR_VAR 0 8
79736: PUSH
79737: LD_VAR 0 8
79741: PUSH
79742: LD_VAR 0 7
79746: PPUSH
79747: CALL_OW 313
79751: ADD
79752: ST_TO_ADDR
// end ;
79753: GO 79702
79755: POP
79756: POP
// if not sci then
79757: LD_VAR 0 8
79761: NOT
79762: IFFALSE 79766
// continue ;
79764: GO 78811
// for x in sci do
79766: LD_ADDR_VAR 0 7
79770: PUSH
79771: LD_VAR 0 8
79775: PUSH
79776: FOR_IN
79777: IFFALSE 79827
// if IsInUnit ( x ) and not HasTask ( x ) then
79779: LD_VAR 0 7
79783: PPUSH
79784: CALL_OW 310
79788: PUSH
79789: LD_VAR 0 7
79793: PPUSH
79794: CALL_OW 314
79798: NOT
79799: AND
79800: IFFALSE 79825
// begin ComExitBuilding ( x ) ;
79802: LD_VAR 0 7
79806: PPUSH
79807: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
79811: LD_VAR 0 7
79815: PPUSH
79816: LD_VAR 0 3
79820: PPUSH
79821: CALL_OW 180
// end ;
79825: GO 79776
79827: POP
79828: POP
// end ; end ;
79829: GO 78811
79831: POP
79832: POP
// end ;
79833: GO 78765
79835: POP
79836: POP
// end ;
79837: LD_VAR 0 1
79841: RET
// export function MC_MinesTrigger ( ) ; var i ; begin
79842: LD_INT 0
79844: PPUSH
79845: PPUSH
// if not mc_bases then
79846: LD_EXP 36
79850: NOT
79851: IFFALSE 79855
// exit ;
79853: GO 79936
// for i = 1 to mc_bases do
79855: LD_ADDR_VAR 0 2
79859: PUSH
79860: DOUBLE
79861: LD_INT 1
79863: DEC
79864: ST_TO_ADDR
79865: LD_EXP 36
79869: PUSH
79870: FOR_TO
79871: IFFALSE 79934
// if mc_mines [ i ] and mc_miners [ i ] then
79873: LD_EXP 49
79877: PUSH
79878: LD_VAR 0 2
79882: ARRAY
79883: PUSH
79884: LD_EXP 50
79888: PUSH
79889: LD_VAR 0 2
79893: ARRAY
79894: AND
79895: IFFALSE 79932
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
79897: LD_EXP 50
79901: PUSH
79902: LD_VAR 0 2
79906: ARRAY
79907: PUSH
79908: LD_INT 1
79910: ARRAY
79911: PPUSH
79912: CALL_OW 255
79916: PPUSH
79917: LD_EXP 49
79921: PUSH
79922: LD_VAR 0 2
79926: ARRAY
79927: PPUSH
79928: CALL 23415 0 2
79932: GO 79870
79934: POP
79935: POP
// end ;
79936: LD_VAR 0 1
79940: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
79941: LD_INT 0
79943: PPUSH
79944: PPUSH
79945: PPUSH
79946: PPUSH
79947: PPUSH
79948: PPUSH
79949: PPUSH
79950: PPUSH
// if not mc_bases or not mc_parking then
79951: LD_EXP 36
79955: NOT
79956: PUSH
79957: LD_EXP 60
79961: NOT
79962: OR
79963: IFFALSE 79967
// exit ;
79965: GO 80666
// for i = 1 to mc_bases do
79967: LD_ADDR_VAR 0 2
79971: PUSH
79972: DOUBLE
79973: LD_INT 1
79975: DEC
79976: ST_TO_ADDR
79977: LD_EXP 36
79981: PUSH
79982: FOR_TO
79983: IFFALSE 80664
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
79985: LD_EXP 36
79989: PUSH
79990: LD_VAR 0 2
79994: ARRAY
79995: NOT
79996: PUSH
79997: LD_EXP 60
80001: PUSH
80002: LD_VAR 0 2
80006: ARRAY
80007: NOT
80008: OR
80009: IFFALSE 80013
// continue ;
80011: GO 79982
// side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
80013: LD_ADDR_VAR 0 5
80017: PUSH
80018: LD_EXP 36
80022: PUSH
80023: LD_VAR 0 2
80027: ARRAY
80028: PUSH
80029: LD_INT 1
80031: ARRAY
80032: PPUSH
80033: CALL_OW 255
80037: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
80038: LD_ADDR_VAR 0 6
80042: PUSH
80043: LD_EXP 36
80047: PUSH
80048: LD_VAR 0 2
80052: ARRAY
80053: PPUSH
80054: LD_INT 30
80056: PUSH
80057: LD_INT 3
80059: PUSH
80060: EMPTY
80061: LIST
80062: LIST
80063: PPUSH
80064: CALL_OW 72
80068: ST_TO_ADDR
// if not fac then
80069: LD_VAR 0 6
80073: NOT
80074: IFFALSE 80125
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
80076: LD_ADDR_VAR 0 6
80080: PUSH
80081: LD_EXP 36
80085: PUSH
80086: LD_VAR 0 2
80090: ARRAY
80091: PPUSH
80092: LD_INT 2
80094: PUSH
80095: LD_INT 30
80097: PUSH
80098: LD_INT 0
80100: PUSH
80101: EMPTY
80102: LIST
80103: LIST
80104: PUSH
80105: LD_INT 30
80107: PUSH
80108: LD_INT 1
80110: PUSH
80111: EMPTY
80112: LIST
80113: LIST
80114: PUSH
80115: EMPTY
80116: LIST
80117: LIST
80118: LIST
80119: PPUSH
80120: CALL_OW 72
80124: ST_TO_ADDR
// if not fac then
80125: LD_VAR 0 6
80129: NOT
80130: IFFALSE 80134
// continue ;
80132: GO 79982
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
80134: LD_ADDR_VAR 0 7
80138: PUSH
80139: LD_EXP 60
80143: PUSH
80144: LD_VAR 0 2
80148: ARRAY
80149: PPUSH
80150: LD_INT 22
80152: PUSH
80153: LD_VAR 0 5
80157: PUSH
80158: EMPTY
80159: LIST
80160: LIST
80161: PUSH
80162: LD_INT 21
80164: PUSH
80165: LD_INT 2
80167: PUSH
80168: EMPTY
80169: LIST
80170: LIST
80171: PUSH
80172: LD_INT 3
80174: PUSH
80175: LD_INT 24
80177: PUSH
80178: LD_INT 1000
80180: PUSH
80181: EMPTY
80182: LIST
80183: LIST
80184: PUSH
80185: EMPTY
80186: LIST
80187: LIST
80188: PUSH
80189: EMPTY
80190: LIST
80191: LIST
80192: LIST
80193: PPUSH
80194: CALL_OW 70
80198: ST_TO_ADDR
// for j in fac do
80199: LD_ADDR_VAR 0 3
80203: PUSH
80204: LD_VAR 0 6
80208: PUSH
80209: FOR_IN
80210: IFFALSE 80291
// vehs := vehs union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , j , 15 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
80212: LD_ADDR_VAR 0 7
80216: PUSH
80217: LD_VAR 0 7
80221: PUSH
80222: LD_INT 22
80224: PUSH
80225: LD_VAR 0 5
80229: PUSH
80230: EMPTY
80231: LIST
80232: LIST
80233: PUSH
80234: LD_INT 91
80236: PUSH
80237: LD_VAR 0 3
80241: PUSH
80242: LD_INT 15
80244: PUSH
80245: EMPTY
80246: LIST
80247: LIST
80248: LIST
80249: PUSH
80250: LD_INT 21
80252: PUSH
80253: LD_INT 2
80255: PUSH
80256: EMPTY
80257: LIST
80258: LIST
80259: PUSH
80260: LD_INT 3
80262: PUSH
80263: LD_INT 24
80265: PUSH
80266: LD_INT 1000
80268: PUSH
80269: EMPTY
80270: LIST
80271: LIST
80272: PUSH
80273: EMPTY
80274: LIST
80275: LIST
80276: PUSH
80277: EMPTY
80278: LIST
80279: LIST
80280: LIST
80281: LIST
80282: PPUSH
80283: CALL_OW 69
80287: UNION
80288: ST_TO_ADDR
80289: GO 80209
80291: POP
80292: POP
// if not vehs then
80293: LD_VAR 0 7
80297: NOT
80298: IFFALSE 80324
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
80300: LD_ADDR_EXP 48
80304: PUSH
80305: LD_EXP 48
80309: PPUSH
80310: LD_VAR 0 2
80314: PPUSH
80315: EMPTY
80316: PPUSH
80317: CALL_OW 1
80321: ST_TO_ADDR
// continue ;
80322: GO 79982
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
80324: LD_ADDR_VAR 0 8
80328: PUSH
80329: LD_EXP 36
80333: PUSH
80334: LD_VAR 0 2
80338: ARRAY
80339: PPUSH
80340: LD_INT 30
80342: PUSH
80343: LD_INT 3
80345: PUSH
80346: EMPTY
80347: LIST
80348: LIST
80349: PPUSH
80350: CALL_OW 72
80354: ST_TO_ADDR
// if tmp then
80355: LD_VAR 0 8
80359: IFFALSE 80462
// begin for j in tmp do
80361: LD_ADDR_VAR 0 3
80365: PUSH
80366: LD_VAR 0 8
80370: PUSH
80371: FOR_IN
80372: IFFALSE 80460
// for k in UnitsInside ( j ) do
80374: LD_ADDR_VAR 0 4
80378: PUSH
80379: LD_VAR 0 3
80383: PPUSH
80384: CALL_OW 313
80388: PUSH
80389: FOR_IN
80390: IFFALSE 80456
// if k then
80392: LD_VAR 0 4
80396: IFFALSE 80454
// if not k in mc_repair_vehicle [ i ] then
80398: LD_VAR 0 4
80402: PUSH
80403: LD_EXP 48
80407: PUSH
80408: LD_VAR 0 2
80412: ARRAY
80413: IN
80414: NOT
80415: IFFALSE 80454
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
80417: LD_ADDR_EXP 48
80421: PUSH
80422: LD_EXP 48
80426: PPUSH
80427: LD_VAR 0 2
80431: PPUSH
80432: LD_EXP 48
80436: PUSH
80437: LD_VAR 0 2
80441: ARRAY
80442: PUSH
80443: LD_VAR 0 4
80447: UNION
80448: PPUSH
80449: CALL_OW 1
80453: ST_TO_ADDR
80454: GO 80389
80456: POP
80457: POP
80458: GO 80371
80460: POP
80461: POP
// end ; if not mc_repair_vehicle [ i ] then
80462: LD_EXP 48
80466: PUSH
80467: LD_VAR 0 2
80471: ARRAY
80472: NOT
80473: IFFALSE 80477
// continue ;
80475: GO 79982
// for j in mc_repair_vehicle [ i ] do
80477: LD_ADDR_VAR 0 3
80481: PUSH
80482: LD_EXP 48
80486: PUSH
80487: LD_VAR 0 2
80491: ARRAY
80492: PUSH
80493: FOR_IN
80494: IFFALSE 80660
// begin if GetClass ( j ) <> 3 then
80496: LD_VAR 0 3
80500: PPUSH
80501: CALL_OW 257
80505: PUSH
80506: LD_INT 3
80508: NONEQUAL
80509: IFFALSE 80550
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] diff j ) ;
80511: LD_ADDR_EXP 48
80515: PUSH
80516: LD_EXP 48
80520: PPUSH
80521: LD_VAR 0 2
80525: PPUSH
80526: LD_EXP 48
80530: PUSH
80531: LD_VAR 0 2
80535: ARRAY
80536: PUSH
80537: LD_VAR 0 3
80541: DIFF
80542: PPUSH
80543: CALL_OW 1
80547: ST_TO_ADDR
// continue ;
80548: GO 80493
// end ; if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
80550: LD_VAR 0 3
80554: PPUSH
80555: CALL_OW 311
80559: NOT
80560: PUSH
80561: LD_VAR 0 3
80565: PUSH
80566: LD_EXP 39
80570: PUSH
80571: LD_VAR 0 2
80575: ARRAY
80576: PUSH
80577: LD_INT 1
80579: ARRAY
80580: IN
80581: NOT
80582: AND
80583: PUSH
80584: LD_VAR 0 3
80588: PUSH
80589: LD_EXP 39
80593: PUSH
80594: LD_VAR 0 2
80598: ARRAY
80599: PUSH
80600: LD_INT 2
80602: ARRAY
80603: IN
80604: NOT
80605: AND
80606: IFFALSE 80658
// begin if IsInUnit ( j ) then
80608: LD_VAR 0 3
80612: PPUSH
80613: CALL_OW 310
80617: IFFALSE 80628
// ComExitBuilding ( j ) ;
80619: LD_VAR 0 3
80623: PPUSH
80624: CALL_OW 122
// if not HasTask ( j ) then
80628: LD_VAR 0 3
80632: PPUSH
80633: CALL_OW 314
80637: NOT
80638: IFFALSE 80658
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
80640: LD_VAR 0 3
80644: PPUSH
80645: LD_VAR 0 7
80649: PUSH
80650: LD_INT 1
80652: ARRAY
80653: PPUSH
80654: CALL_OW 189
// end ; end ;
80658: GO 80493
80660: POP
80661: POP
// end ;
80662: GO 79982
80664: POP
80665: POP
// end ;
80666: LD_VAR 0 1
80670: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
80671: LD_INT 0
80673: PPUSH
80674: PPUSH
80675: PPUSH
80676: PPUSH
80677: PPUSH
80678: PPUSH
80679: PPUSH
80680: PPUSH
80681: PPUSH
80682: PPUSH
80683: PPUSH
// if not mc_bases then
80684: LD_EXP 36
80688: NOT
80689: IFFALSE 80693
// exit ;
80691: GO 81495
// for i = 1 to mc_bases do
80693: LD_ADDR_VAR 0 2
80697: PUSH
80698: DOUBLE
80699: LD_INT 1
80701: DEC
80702: ST_TO_ADDR
80703: LD_EXP 36
80707: PUSH
80708: FOR_TO
80709: IFFALSE 81493
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
80711: LD_EXP 64
80715: PUSH
80716: LD_VAR 0 2
80720: ARRAY
80721: NOT
80722: PUSH
80723: LD_EXP 39
80727: PUSH
80728: LD_VAR 0 2
80732: ARRAY
80733: PUSH
80734: LD_INT 1
80736: ARRAY
80737: OR
80738: PUSH
80739: LD_EXP 39
80743: PUSH
80744: LD_VAR 0 2
80748: ARRAY
80749: PUSH
80750: LD_INT 2
80752: ARRAY
80753: OR
80754: PUSH
80755: LD_EXP 62
80759: PUSH
80760: LD_VAR 0 2
80764: ARRAY
80765: PPUSH
80766: LD_INT 1
80768: PPUSH
80769: CALL_OW 325
80773: NOT
80774: OR
80775: PUSH
80776: LD_EXP 59
80780: PUSH
80781: LD_VAR 0 2
80785: ARRAY
80786: OR
80787: IFFALSE 80791
// continue ;
80789: GO 80708
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
80791: LD_ADDR_VAR 0 8
80795: PUSH
80796: LD_EXP 36
80800: PUSH
80801: LD_VAR 0 2
80805: ARRAY
80806: PPUSH
80807: LD_INT 25
80809: PUSH
80810: LD_INT 4
80812: PUSH
80813: EMPTY
80814: LIST
80815: LIST
80816: PUSH
80817: LD_INT 50
80819: PUSH
80820: EMPTY
80821: LIST
80822: PUSH
80823: LD_INT 3
80825: PUSH
80826: LD_INT 60
80828: PUSH
80829: EMPTY
80830: LIST
80831: PUSH
80832: EMPTY
80833: LIST
80834: LIST
80835: PUSH
80836: EMPTY
80837: LIST
80838: LIST
80839: LIST
80840: PPUSH
80841: CALL_OW 72
80845: PUSH
80846: LD_EXP 40
80850: PUSH
80851: LD_VAR 0 2
80855: ARRAY
80856: DIFF
80857: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
80858: LD_ADDR_VAR 0 9
80862: PUSH
80863: LD_EXP 36
80867: PUSH
80868: LD_VAR 0 2
80872: ARRAY
80873: PPUSH
80874: LD_INT 2
80876: PUSH
80877: LD_INT 30
80879: PUSH
80880: LD_INT 0
80882: PUSH
80883: EMPTY
80884: LIST
80885: LIST
80886: PUSH
80887: LD_INT 30
80889: PUSH
80890: LD_INT 1
80892: PUSH
80893: EMPTY
80894: LIST
80895: LIST
80896: PUSH
80897: EMPTY
80898: LIST
80899: LIST
80900: LIST
80901: PPUSH
80902: CALL_OW 72
80906: ST_TO_ADDR
// if not tmp or not dep then
80907: LD_VAR 0 8
80911: NOT
80912: PUSH
80913: LD_VAR 0 9
80917: NOT
80918: OR
80919: IFFALSE 80923
// continue ;
80921: GO 80708
// side := GetSide ( tmp [ 1 ] ) ;
80923: LD_ADDR_VAR 0 11
80927: PUSH
80928: LD_VAR 0 8
80932: PUSH
80933: LD_INT 1
80935: ARRAY
80936: PPUSH
80937: CALL_OW 255
80941: ST_TO_ADDR
// dep := dep [ 1 ] ;
80942: LD_ADDR_VAR 0 9
80946: PUSH
80947: LD_VAR 0 9
80951: PUSH
80952: LD_INT 1
80954: ARRAY
80955: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
80956: LD_ADDR_VAR 0 7
80960: PUSH
80961: LD_EXP 64
80965: PUSH
80966: LD_VAR 0 2
80970: ARRAY
80971: PPUSH
80972: LD_INT 22
80974: PUSH
80975: LD_INT 0
80977: PUSH
80978: EMPTY
80979: LIST
80980: LIST
80981: PUSH
80982: LD_INT 25
80984: PUSH
80985: LD_INT 12
80987: PUSH
80988: EMPTY
80989: LIST
80990: LIST
80991: PUSH
80992: EMPTY
80993: LIST
80994: LIST
80995: PPUSH
80996: CALL_OW 70
81000: PUSH
81001: LD_INT 22
81003: PUSH
81004: LD_INT 0
81006: PUSH
81007: EMPTY
81008: LIST
81009: LIST
81010: PUSH
81011: LD_INT 25
81013: PUSH
81014: LD_INT 12
81016: PUSH
81017: EMPTY
81018: LIST
81019: LIST
81020: PUSH
81021: LD_INT 91
81023: PUSH
81024: LD_VAR 0 9
81028: PUSH
81029: LD_INT 20
81031: PUSH
81032: EMPTY
81033: LIST
81034: LIST
81035: LIST
81036: PUSH
81037: EMPTY
81038: LIST
81039: LIST
81040: LIST
81041: PPUSH
81042: CALL_OW 69
81046: UNION
81047: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
81048: LD_ADDR_VAR 0 10
81052: PUSH
81053: LD_EXP 64
81057: PUSH
81058: LD_VAR 0 2
81062: ARRAY
81063: PPUSH
81064: LD_INT 81
81066: PUSH
81067: LD_VAR 0 11
81071: PUSH
81072: EMPTY
81073: LIST
81074: LIST
81075: PPUSH
81076: CALL_OW 70
81080: ST_TO_ADDR
// if not apes or danger_at_area then
81081: LD_VAR 0 7
81085: NOT
81086: PUSH
81087: LD_VAR 0 10
81091: OR
81092: IFFALSE 81142
// begin if mc_taming [ i ] then
81094: LD_EXP 67
81098: PUSH
81099: LD_VAR 0 2
81103: ARRAY
81104: IFFALSE 81140
// begin MC_Reset ( i , 121 ) ;
81106: LD_VAR 0 2
81110: PPUSH
81111: LD_INT 121
81113: PPUSH
81114: CALL 66473 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
81118: LD_ADDR_EXP 67
81122: PUSH
81123: LD_EXP 67
81127: PPUSH
81128: LD_VAR 0 2
81132: PPUSH
81133: EMPTY
81134: PPUSH
81135: CALL_OW 1
81139: ST_TO_ADDR
// end ; continue ;
81140: GO 80708
// end ; for j in tmp do
81142: LD_ADDR_VAR 0 3
81146: PUSH
81147: LD_VAR 0 8
81151: PUSH
81152: FOR_IN
81153: IFFALSE 81489
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
81155: LD_VAR 0 3
81159: PUSH
81160: LD_EXP 67
81164: PUSH
81165: LD_VAR 0 2
81169: ARRAY
81170: IN
81171: NOT
81172: PUSH
81173: LD_EXP 67
81177: PUSH
81178: LD_VAR 0 2
81182: ARRAY
81183: PUSH
81184: LD_INT 3
81186: LESS
81187: AND
81188: IFFALSE 81246
// begin SetTag ( j , 121 ) ;
81190: LD_VAR 0 3
81194: PPUSH
81195: LD_INT 121
81197: PPUSH
81198: CALL_OW 109
// mc_taming := ReplaceIn ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
81202: LD_ADDR_EXP 67
81206: PUSH
81207: LD_EXP 67
81211: PPUSH
81212: LD_VAR 0 2
81216: PUSH
81217: LD_EXP 67
81221: PUSH
81222: LD_VAR 0 2
81226: ARRAY
81227: PUSH
81228: LD_INT 1
81230: PLUS
81231: PUSH
81232: EMPTY
81233: LIST
81234: LIST
81235: PPUSH
81236: LD_VAR 0 3
81240: PPUSH
81241: CALL 26426 0 3
81245: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
81246: LD_VAR 0 3
81250: PUSH
81251: LD_EXP 67
81255: PUSH
81256: LD_VAR 0 2
81260: ARRAY
81261: IN
81262: IFFALSE 81487
// begin if GetClass ( j ) <> 4 then
81264: LD_VAR 0 3
81268: PPUSH
81269: CALL_OW 257
81273: PUSH
81274: LD_INT 4
81276: NONEQUAL
81277: IFFALSE 81330
// begin mc_taming := Replace ( mc_taming , i , mc_taming [ i ] diff j ) ;
81279: LD_ADDR_EXP 67
81283: PUSH
81284: LD_EXP 67
81288: PPUSH
81289: LD_VAR 0 2
81293: PPUSH
81294: LD_EXP 67
81298: PUSH
81299: LD_VAR 0 2
81303: ARRAY
81304: PUSH
81305: LD_VAR 0 3
81309: DIFF
81310: PPUSH
81311: CALL_OW 1
81315: ST_TO_ADDR
// SetTag ( j , 0 ) ;
81316: LD_VAR 0 3
81320: PPUSH
81321: LD_INT 0
81323: PPUSH
81324: CALL_OW 109
// continue ;
81328: GO 81152
// end ; if IsInUnit ( j ) then
81330: LD_VAR 0 3
81334: PPUSH
81335: CALL_OW 310
81339: IFFALSE 81350
// ComExitBuilding ( j ) ;
81341: LD_VAR 0 3
81345: PPUSH
81346: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
81350: LD_ADDR_VAR 0 6
81354: PUSH
81355: LD_VAR 0 7
81359: PPUSH
81360: LD_VAR 0 3
81364: PPUSH
81365: CALL_OW 74
81369: ST_TO_ADDR
// if not ape then
81370: LD_VAR 0 6
81374: NOT
81375: IFFALSE 81379
// break ;
81377: GO 81489
// x := GetX ( ape ) ;
81379: LD_ADDR_VAR 0 4
81383: PUSH
81384: LD_VAR 0 6
81388: PPUSH
81389: CALL_OW 250
81393: ST_TO_ADDR
// y := GetY ( ape ) ;
81394: LD_ADDR_VAR 0 5
81398: PUSH
81399: LD_VAR 0 6
81403: PPUSH
81404: CALL_OW 251
81408: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
81409: LD_VAR 0 4
81413: PPUSH
81414: LD_VAR 0 5
81418: PPUSH
81419: CALL_OW 488
81423: NOT
81424: PUSH
81425: LD_VAR 0 11
81429: PPUSH
81430: LD_VAR 0 4
81434: PPUSH
81435: LD_VAR 0 5
81439: PPUSH
81440: LD_INT 20
81442: PPUSH
81443: CALL 27322 0 4
81447: PUSH
81448: LD_INT 4
81450: ARRAY
81451: OR
81452: IFFALSE 81456
// break ;
81454: GO 81489
// if not HasTask ( j ) then
81456: LD_VAR 0 3
81460: PPUSH
81461: CALL_OW 314
81465: NOT
81466: IFFALSE 81487
// ComTameXY ( j , x , y ) ;
81468: LD_VAR 0 3
81472: PPUSH
81473: LD_VAR 0 4
81477: PPUSH
81478: LD_VAR 0 5
81482: PPUSH
81483: CALL_OW 131
// end ; end ;
81487: GO 81152
81489: POP
81490: POP
// end ;
81491: GO 80708
81493: POP
81494: POP
// end ;
81495: LD_VAR 0 1
81499: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
81500: LD_INT 0
81502: PPUSH
81503: PPUSH
81504: PPUSH
81505: PPUSH
81506: PPUSH
81507: PPUSH
81508: PPUSH
81509: PPUSH
// if not mc_bases then
81510: LD_EXP 36
81514: NOT
81515: IFFALSE 81519
// exit ;
81517: GO 82145
// for i = 1 to mc_bases do
81519: LD_ADDR_VAR 0 2
81523: PUSH
81524: DOUBLE
81525: LD_INT 1
81527: DEC
81528: ST_TO_ADDR
81529: LD_EXP 36
81533: PUSH
81534: FOR_TO
81535: IFFALSE 82143
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
81537: LD_EXP 65
81541: PUSH
81542: LD_VAR 0 2
81546: ARRAY
81547: NOT
81548: PUSH
81549: LD_EXP 65
81553: PUSH
81554: LD_VAR 0 2
81558: ARRAY
81559: PPUSH
81560: LD_INT 25
81562: PUSH
81563: LD_INT 12
81565: PUSH
81566: EMPTY
81567: LIST
81568: LIST
81569: PPUSH
81570: CALL_OW 72
81574: NOT
81575: OR
81576: IFFALSE 81580
// continue ;
81578: GO 81534
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
81580: LD_ADDR_VAR 0 5
81584: PUSH
81585: LD_EXP 65
81589: PUSH
81590: LD_VAR 0 2
81594: ARRAY
81595: PUSH
81596: LD_INT 1
81598: ARRAY
81599: PPUSH
81600: CALL_OW 255
81604: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
81605: LD_VAR 0 5
81609: PPUSH
81610: LD_INT 2
81612: PPUSH
81613: CALL_OW 325
81617: IFFALSE 81870
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
81619: LD_ADDR_VAR 0 4
81623: PUSH
81624: LD_EXP 65
81628: PUSH
81629: LD_VAR 0 2
81633: ARRAY
81634: PPUSH
81635: LD_INT 25
81637: PUSH
81638: LD_INT 16
81640: PUSH
81641: EMPTY
81642: LIST
81643: LIST
81644: PPUSH
81645: CALL_OW 72
81649: ST_TO_ADDR
// if tmp < 6 then
81650: LD_VAR 0 4
81654: PUSH
81655: LD_INT 6
81657: LESS
81658: IFFALSE 81870
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
81660: LD_ADDR_VAR 0 6
81664: PUSH
81665: LD_EXP 36
81669: PUSH
81670: LD_VAR 0 2
81674: ARRAY
81675: PPUSH
81676: LD_INT 2
81678: PUSH
81679: LD_INT 30
81681: PUSH
81682: LD_INT 0
81684: PUSH
81685: EMPTY
81686: LIST
81687: LIST
81688: PUSH
81689: LD_INT 30
81691: PUSH
81692: LD_INT 1
81694: PUSH
81695: EMPTY
81696: LIST
81697: LIST
81698: PUSH
81699: EMPTY
81700: LIST
81701: LIST
81702: LIST
81703: PPUSH
81704: CALL_OW 72
81708: ST_TO_ADDR
// if depot then
81709: LD_VAR 0 6
81713: IFFALSE 81870
// begin selected := 0 ;
81715: LD_ADDR_VAR 0 7
81719: PUSH
81720: LD_INT 0
81722: ST_TO_ADDR
// for j in depot do
81723: LD_ADDR_VAR 0 3
81727: PUSH
81728: LD_VAR 0 6
81732: PUSH
81733: FOR_IN
81734: IFFALSE 81765
// begin if UnitsInside ( j ) < 6 then
81736: LD_VAR 0 3
81740: PPUSH
81741: CALL_OW 313
81745: PUSH
81746: LD_INT 6
81748: LESS
81749: IFFALSE 81763
// begin selected := j ;
81751: LD_ADDR_VAR 0 7
81755: PUSH
81756: LD_VAR 0 3
81760: ST_TO_ADDR
// break ;
81761: GO 81765
// end ; end ;
81763: GO 81733
81765: POP
81766: POP
// if selected then
81767: LD_VAR 0 7
81771: IFFALSE 81870
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
81773: LD_ADDR_VAR 0 3
81777: PUSH
81778: LD_EXP 65
81782: PUSH
81783: LD_VAR 0 2
81787: ARRAY
81788: PPUSH
81789: LD_INT 25
81791: PUSH
81792: LD_INT 12
81794: PUSH
81795: EMPTY
81796: LIST
81797: LIST
81798: PPUSH
81799: CALL_OW 72
81803: PUSH
81804: FOR_IN
81805: IFFALSE 81868
// if not HasTask ( j ) then
81807: LD_VAR 0 3
81811: PPUSH
81812: CALL_OW 314
81816: NOT
81817: IFFALSE 81866
// begin if not IsInUnit ( j ) then
81819: LD_VAR 0 3
81823: PPUSH
81824: CALL_OW 310
81828: NOT
81829: IFFALSE 81845
// ComEnterUnit ( j , selected ) ;
81831: LD_VAR 0 3
81835: PPUSH
81836: LD_VAR 0 7
81840: PPUSH
81841: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
81845: LD_VAR 0 3
81849: PPUSH
81850: LD_INT 16
81852: PPUSH
81853: CALL_OW 183
// AddComExitBuilding ( j ) ;
81857: LD_VAR 0 3
81861: PPUSH
81862: CALL_OW 182
// end ;
81866: GO 81804
81868: POP
81869: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
81870: LD_VAR 0 5
81874: PPUSH
81875: LD_INT 11
81877: PPUSH
81878: CALL_OW 325
81882: IFFALSE 82141
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
81884: LD_ADDR_VAR 0 4
81888: PUSH
81889: LD_EXP 65
81893: PUSH
81894: LD_VAR 0 2
81898: ARRAY
81899: PPUSH
81900: LD_INT 25
81902: PUSH
81903: LD_INT 16
81905: PUSH
81906: EMPTY
81907: LIST
81908: LIST
81909: PPUSH
81910: CALL_OW 72
81914: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
81915: LD_VAR 0 4
81919: PUSH
81920: LD_INT 6
81922: GREATEREQUAL
81923: PUSH
81924: LD_VAR 0 5
81928: PPUSH
81929: LD_INT 2
81931: PPUSH
81932: CALL_OW 325
81936: NOT
81937: OR
81938: IFFALSE 82141
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
81940: LD_ADDR_VAR 0 8
81944: PUSH
81945: LD_EXP 36
81949: PUSH
81950: LD_VAR 0 2
81954: ARRAY
81955: PPUSH
81956: LD_INT 2
81958: PUSH
81959: LD_INT 30
81961: PUSH
81962: LD_INT 4
81964: PUSH
81965: EMPTY
81966: LIST
81967: LIST
81968: PUSH
81969: LD_INT 30
81971: PUSH
81972: LD_INT 5
81974: PUSH
81975: EMPTY
81976: LIST
81977: LIST
81978: PUSH
81979: EMPTY
81980: LIST
81981: LIST
81982: LIST
81983: PPUSH
81984: CALL_OW 72
81988: ST_TO_ADDR
// if barracks then
81989: LD_VAR 0 8
81993: IFFALSE 82141
// begin selected := 0 ;
81995: LD_ADDR_VAR 0 7
81999: PUSH
82000: LD_INT 0
82002: ST_TO_ADDR
// for j in barracks do
82003: LD_ADDR_VAR 0 3
82007: PUSH
82008: LD_VAR 0 8
82012: PUSH
82013: FOR_IN
82014: IFFALSE 82045
// begin if UnitsInside ( j ) < 6 then
82016: LD_VAR 0 3
82020: PPUSH
82021: CALL_OW 313
82025: PUSH
82026: LD_INT 6
82028: LESS
82029: IFFALSE 82043
// begin selected := j ;
82031: LD_ADDR_VAR 0 7
82035: PUSH
82036: LD_VAR 0 3
82040: ST_TO_ADDR
// break ;
82041: GO 82045
// end ; end ;
82043: GO 82013
82045: POP
82046: POP
// if selected then
82047: LD_VAR 0 7
82051: IFFALSE 82141
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
82053: LD_ADDR_VAR 0 3
82057: PUSH
82058: LD_EXP 65
82062: PUSH
82063: LD_VAR 0 2
82067: ARRAY
82068: PPUSH
82069: LD_INT 25
82071: PUSH
82072: LD_INT 12
82074: PUSH
82075: EMPTY
82076: LIST
82077: LIST
82078: PPUSH
82079: CALL_OW 72
82083: PUSH
82084: FOR_IN
82085: IFFALSE 82139
// if not IsInUnit ( j ) and not HasTask ( j ) then
82087: LD_VAR 0 3
82091: PPUSH
82092: CALL_OW 310
82096: NOT
82097: PUSH
82098: LD_VAR 0 3
82102: PPUSH
82103: CALL_OW 314
82107: NOT
82108: AND
82109: IFFALSE 82137
// begin ComEnterUnit ( j , selected ) ;
82111: LD_VAR 0 3
82115: PPUSH
82116: LD_VAR 0 7
82120: PPUSH
82121: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
82125: LD_VAR 0 3
82129: PPUSH
82130: LD_INT 15
82132: PPUSH
82133: CALL_OW 183
// end ;
82137: GO 82084
82139: POP
82140: POP
// end ; end ; end ; end ; end ;
82141: GO 81534
82143: POP
82144: POP
// end ;
82145: LD_VAR 0 1
82149: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
82150: LD_INT 0
82152: PPUSH
82153: PPUSH
82154: PPUSH
82155: PPUSH
// if not mc_bases then
82156: LD_EXP 36
82160: NOT
82161: IFFALSE 82165
// exit ;
82163: GO 82343
// for i = 1 to mc_bases do
82165: LD_ADDR_VAR 0 2
82169: PUSH
82170: DOUBLE
82171: LD_INT 1
82173: DEC
82174: ST_TO_ADDR
82175: LD_EXP 36
82179: PUSH
82180: FOR_TO
82181: IFFALSE 82341
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
82183: LD_ADDR_VAR 0 4
82187: PUSH
82188: LD_EXP 36
82192: PUSH
82193: LD_VAR 0 2
82197: ARRAY
82198: PPUSH
82199: LD_INT 25
82201: PUSH
82202: LD_INT 9
82204: PUSH
82205: EMPTY
82206: LIST
82207: LIST
82208: PPUSH
82209: CALL_OW 72
82213: ST_TO_ADDR
// if not tmp then
82214: LD_VAR 0 4
82218: NOT
82219: IFFALSE 82223
// continue ;
82221: GO 82180
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
82223: LD_EXP 62
82227: PUSH
82228: LD_VAR 0 2
82232: ARRAY
82233: PPUSH
82234: LD_INT 29
82236: PPUSH
82237: CALL_OW 325
82241: NOT
82242: PUSH
82243: LD_EXP 62
82247: PUSH
82248: LD_VAR 0 2
82252: ARRAY
82253: PPUSH
82254: LD_INT 28
82256: PPUSH
82257: CALL_OW 325
82261: NOT
82262: AND
82263: IFFALSE 82267
// continue ;
82265: GO 82180
// for j in tmp do
82267: LD_ADDR_VAR 0 3
82271: PUSH
82272: LD_VAR 0 4
82276: PUSH
82277: FOR_IN
82278: IFFALSE 82337
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
82280: LD_VAR 0 3
82284: PUSH
82285: LD_EXP 39
82289: PUSH
82290: LD_VAR 0 2
82294: ARRAY
82295: PUSH
82296: LD_INT 1
82298: ARRAY
82299: IN
82300: NOT
82301: PUSH
82302: LD_VAR 0 3
82306: PUSH
82307: LD_EXP 39
82311: PUSH
82312: LD_VAR 0 2
82316: ARRAY
82317: PUSH
82318: LD_INT 2
82320: ARRAY
82321: IN
82322: NOT
82323: AND
82324: IFFALSE 82335
// ComSpaceTimeShoot ( j ) ;
82326: LD_VAR 0 3
82330: PPUSH
82331: CALL 20161 0 1
82335: GO 82277
82337: POP
82338: POP
// end ;
82339: GO 82180
82341: POP
82342: POP
// end ;
82343: LD_VAR 0 1
82347: RET
// export function MC_TeleportExit ( ) ; var i , j , x , y , save_point , tmp , teleports , sci ; begin
82348: LD_INT 0
82350: PPUSH
82351: PPUSH
82352: PPUSH
82353: PPUSH
82354: PPUSH
82355: PPUSH
82356: PPUSH
82357: PPUSH
82358: PPUSH
// if not mc_bases then
82359: LD_EXP 36
82363: NOT
82364: IFFALSE 82368
// exit ;
82366: GO 82990
// for i = 1 to mc_bases do
82368: LD_ADDR_VAR 0 2
82372: PUSH
82373: DOUBLE
82374: LD_INT 1
82376: DEC
82377: ST_TO_ADDR
82378: LD_EXP 36
82382: PUSH
82383: FOR_TO
82384: IFFALSE 82988
// begin if not mc_teleport_exit [ i ] or GetTech ( tech_targTeleport , mc_sides [ i ] ) <> state_researched then
82386: LD_EXP 71
82390: PUSH
82391: LD_VAR 0 2
82395: ARRAY
82396: NOT
82397: PUSH
82398: LD_INT 38
82400: PPUSH
82401: LD_EXP 62
82405: PUSH
82406: LD_VAR 0 2
82410: ARRAY
82411: PPUSH
82412: CALL_OW 321
82416: PUSH
82417: LD_INT 2
82419: NONEQUAL
82420: OR
82421: IFFALSE 82425
// continue ;
82423: GO 82383
// teleports := UnitFilter ( mc_bases [ i ] , [ f_btype , b_teleport ] ) ;
82425: LD_ADDR_VAR 0 8
82429: PUSH
82430: LD_EXP 36
82434: PUSH
82435: LD_VAR 0 2
82439: ARRAY
82440: PPUSH
82441: LD_INT 30
82443: PUSH
82444: LD_INT 34
82446: PUSH
82447: EMPTY
82448: LIST
82449: LIST
82450: PPUSH
82451: CALL_OW 72
82455: ST_TO_ADDR
// sci := FilterByTag ( UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) , 0 ) ;
82456: LD_ADDR_VAR 0 9
82460: PUSH
82461: LD_EXP 36
82465: PUSH
82466: LD_VAR 0 2
82470: ARRAY
82471: PPUSH
82472: LD_INT 25
82474: PUSH
82475: LD_INT 4
82477: PUSH
82478: EMPTY
82479: LIST
82480: LIST
82481: PPUSH
82482: CALL_OW 72
82486: PPUSH
82487: LD_INT 0
82489: PPUSH
82490: CALL 59686 0 2
82494: ST_TO_ADDR
// if not sci or not teleports or FilterByTag ( mc_bases [ i ] , 124 ) then
82495: LD_VAR 0 9
82499: NOT
82500: PUSH
82501: LD_VAR 0 8
82505: NOT
82506: OR
82507: PUSH
82508: LD_EXP 36
82512: PUSH
82513: LD_VAR 0 2
82517: ARRAY
82518: PPUSH
82519: LD_INT 124
82521: PPUSH
82522: CALL 59686 0 2
82526: OR
82527: IFFALSE 82531
// continue ;
82529: GO 82383
// if mc_teleport_exit_set [ i ] < mc_teleport_exit [ i ] and mc_teleport_exit_set [ i ] < teleports then
82531: LD_EXP 72
82535: PUSH
82536: LD_VAR 0 2
82540: ARRAY
82541: PUSH
82542: LD_EXP 71
82546: PUSH
82547: LD_VAR 0 2
82551: ARRAY
82552: LESS
82553: PUSH
82554: LD_EXP 72
82558: PUSH
82559: LD_VAR 0 2
82563: ARRAY
82564: PUSH
82565: LD_VAR 0 8
82569: LESS
82570: AND
82571: IFFALSE 82986
// begin tmp := sci [ 1 ] ;
82573: LD_ADDR_VAR 0 7
82577: PUSH
82578: LD_VAR 0 9
82582: PUSH
82583: LD_INT 1
82585: ARRAY
82586: ST_TO_ADDR
// SetTag ( tmp , 124 ) ;
82587: LD_VAR 0 7
82591: PPUSH
82592: LD_INT 124
82594: PPUSH
82595: CALL_OW 109
// for j = mc_teleport_exit [ i ] downto mc_teleport_exit [ i ] do
82599: LD_ADDR_VAR 0 3
82603: PUSH
82604: DOUBLE
82605: LD_EXP 71
82609: PUSH
82610: LD_VAR 0 2
82614: ARRAY
82615: INC
82616: ST_TO_ADDR
82617: LD_EXP 71
82621: PUSH
82622: LD_VAR 0 2
82626: ARRAY
82627: PUSH
82628: FOR_DOWNTO
82629: IFFALSE 82972
// begin if IsInUnit ( tmp ) then
82631: LD_VAR 0 7
82635: PPUSH
82636: CALL_OW 310
82640: IFFALSE 82651
// ComExitBuilding ( tmp ) ;
82642: LD_VAR 0 7
82646: PPUSH
82647: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
82651: LD_INT 35
82653: PPUSH
82654: CALL_OW 67
// until not IsInUnit ( tmp ) and not HasTask ( tmp ) ;
82658: LD_VAR 0 7
82662: PPUSH
82663: CALL_OW 310
82667: NOT
82668: PUSH
82669: LD_VAR 0 7
82673: PPUSH
82674: CALL_OW 314
82678: NOT
82679: AND
82680: IFFALSE 82651
// save_point := [ GetX ( tmp ) , GetY ( tmp ) ] ;
82682: LD_ADDR_VAR 0 6
82686: PUSH
82687: LD_VAR 0 7
82691: PPUSH
82692: CALL_OW 250
82696: PUSH
82697: LD_VAR 0 7
82701: PPUSH
82702: CALL_OW 251
82706: PUSH
82707: EMPTY
82708: LIST
82709: LIST
82710: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
82711: LD_INT 35
82713: PPUSH
82714: CALL_OW 67
// x := mc_teleport_exit [ i ] [ j ] [ 1 ] ;
82718: LD_ADDR_VAR 0 4
82722: PUSH
82723: LD_EXP 71
82727: PUSH
82728: LD_VAR 0 2
82732: ARRAY
82733: PUSH
82734: LD_VAR 0 3
82738: ARRAY
82739: PUSH
82740: LD_INT 1
82742: ARRAY
82743: ST_TO_ADDR
// y := mc_teleport_exit [ i ] [ j ] [ 2 ] ;
82744: LD_ADDR_VAR 0 5
82748: PUSH
82749: LD_EXP 71
82753: PUSH
82754: LD_VAR 0 2
82758: ARRAY
82759: PUSH
82760: LD_VAR 0 3
82764: ARRAY
82765: PUSH
82766: LD_INT 2
82768: ARRAY
82769: ST_TO_ADDR
// if DangerAtRange ( tmp , 10 ) [ 4 ] then
82770: LD_VAR 0 7
82774: PPUSH
82775: LD_INT 10
82777: PPUSH
82778: CALL 29019 0 2
82782: PUSH
82783: LD_INT 4
82785: ARRAY
82786: IFFALSE 82824
// begin ComMoveXY ( tmp , save_point [ 1 ] , save_point [ 2 ] ) ;
82788: LD_VAR 0 7
82792: PPUSH
82793: LD_VAR 0 6
82797: PUSH
82798: LD_INT 1
82800: ARRAY
82801: PPUSH
82802: LD_VAR 0 6
82806: PUSH
82807: LD_INT 2
82809: ARRAY
82810: PPUSH
82811: CALL_OW 111
// wait ( 0 0$10 ) ;
82815: LD_INT 350
82817: PPUSH
82818: CALL_OW 67
// end else
82822: GO 82850
// begin ComMoveXY ( tmp , x , y ) ;
82824: LD_VAR 0 7
82828: PPUSH
82829: LD_VAR 0 4
82833: PPUSH
82834: LD_VAR 0 5
82838: PPUSH
82839: CALL_OW 111
// wait ( 0 0$3 ) ;
82843: LD_INT 105
82845: PPUSH
82846: CALL_OW 67
// end ; until IsAt ( tmp , x , y ) ;
82850: LD_VAR 0 7
82854: PPUSH
82855: LD_VAR 0 4
82859: PPUSH
82860: LD_VAR 0 5
82864: PPUSH
82865: CALL_OW 307
82869: IFFALSE 82711
// ComTeleportExit ( tmp , x , y , teleports [ j ] ) ;
82871: LD_VAR 0 7
82875: PPUSH
82876: LD_VAR 0 4
82880: PPUSH
82881: LD_VAR 0 5
82885: PPUSH
82886: LD_VAR 0 8
82890: PUSH
82891: LD_VAR 0 3
82895: ARRAY
82896: PPUSH
82897: CALL_OW 156
// repeat wait ( 0 0$1 ) ;
82901: LD_INT 35
82903: PPUSH
82904: CALL_OW 67
// until not HasTask ( tmp ) ;
82908: LD_VAR 0 7
82912: PPUSH
82913: CALL_OW 314
82917: NOT
82918: IFFALSE 82901
// mc_teleport_exit_set := ReplaceIn ( mc_teleport_exit_set , [ i , mc_teleport_exit_set [ i ] + 1 ] , teleports [ j ] ) ;
82920: LD_ADDR_EXP 72
82924: PUSH
82925: LD_EXP 72
82929: PPUSH
82930: LD_VAR 0 2
82934: PUSH
82935: LD_EXP 72
82939: PUSH
82940: LD_VAR 0 2
82944: ARRAY
82945: PUSH
82946: LD_INT 1
82948: PLUS
82949: PUSH
82950: EMPTY
82951: LIST
82952: LIST
82953: PPUSH
82954: LD_VAR 0 8
82958: PUSH
82959: LD_VAR 0 3
82963: ARRAY
82964: PPUSH
82965: CALL 26426 0 3
82969: ST_TO_ADDR
// end ;
82970: GO 82628
82972: POP
82973: POP
// MC_Reset ( i , 124 ) ;
82974: LD_VAR 0 2
82978: PPUSH
82979: LD_INT 124
82981: PPUSH
82982: CALL 66473 0 2
// end ; end ;
82986: GO 82383
82988: POP
82989: POP
// end ;
82990: LD_VAR 0 1
82994: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
82995: LD_INT 0
82997: PPUSH
82998: PPUSH
82999: PPUSH
// if not mc_bases then
83000: LD_EXP 36
83004: NOT
83005: IFFALSE 83009
// exit ;
83007: GO 83615
// for i = 1 to mc_bases do
83009: LD_ADDR_VAR 0 2
83013: PUSH
83014: DOUBLE
83015: LD_INT 1
83017: DEC
83018: ST_TO_ADDR
83019: LD_EXP 36
83023: PUSH
83024: FOR_TO
83025: IFFALSE 83613
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
83027: LD_ADDR_VAR 0 3
83031: PUSH
83032: LD_EXP 36
83036: PUSH
83037: LD_VAR 0 2
83041: ARRAY
83042: PPUSH
83043: LD_INT 25
83045: PUSH
83046: LD_INT 4
83048: PUSH
83049: EMPTY
83050: LIST
83051: LIST
83052: PPUSH
83053: CALL_OW 72
83057: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
83058: LD_VAR 0 3
83062: NOT
83063: PUSH
83064: LD_EXP 73
83068: PUSH
83069: LD_VAR 0 2
83073: ARRAY
83074: NOT
83075: OR
83076: PUSH
83077: LD_EXP 36
83081: PUSH
83082: LD_VAR 0 2
83086: ARRAY
83087: PPUSH
83088: LD_INT 2
83090: PUSH
83091: LD_INT 30
83093: PUSH
83094: LD_INT 0
83096: PUSH
83097: EMPTY
83098: LIST
83099: LIST
83100: PUSH
83101: LD_INT 30
83103: PUSH
83104: LD_INT 1
83106: PUSH
83107: EMPTY
83108: LIST
83109: LIST
83110: PUSH
83111: EMPTY
83112: LIST
83113: LIST
83114: LIST
83115: PPUSH
83116: CALL_OW 72
83120: NOT
83121: OR
83122: IFFALSE 83172
// begin if mc_deposits_finder [ i ] then
83124: LD_EXP 74
83128: PUSH
83129: LD_VAR 0 2
83133: ARRAY
83134: IFFALSE 83170
// begin MC_Reset ( i , 125 ) ;
83136: LD_VAR 0 2
83140: PPUSH
83141: LD_INT 125
83143: PPUSH
83144: CALL 66473 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
83148: LD_ADDR_EXP 74
83152: PUSH
83153: LD_EXP 74
83157: PPUSH
83158: LD_VAR 0 2
83162: PPUSH
83163: EMPTY
83164: PPUSH
83165: CALL_OW 1
83169: ST_TO_ADDR
// end ; continue ;
83170: GO 83024
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
83172: LD_EXP 73
83176: PUSH
83177: LD_VAR 0 2
83181: ARRAY
83182: PUSH
83183: LD_INT 1
83185: ARRAY
83186: PUSH
83187: LD_INT 3
83189: ARRAY
83190: PUSH
83191: LD_INT 1
83193: EQUAL
83194: PUSH
83195: LD_INT 20
83197: PPUSH
83198: LD_EXP 62
83202: PUSH
83203: LD_VAR 0 2
83207: ARRAY
83208: PPUSH
83209: CALL_OW 321
83213: PUSH
83214: LD_INT 2
83216: NONEQUAL
83217: AND
83218: IFFALSE 83268
// begin if mc_deposits_finder [ i ] then
83220: LD_EXP 74
83224: PUSH
83225: LD_VAR 0 2
83229: ARRAY
83230: IFFALSE 83266
// begin MC_Reset ( i , 125 ) ;
83232: LD_VAR 0 2
83236: PPUSH
83237: LD_INT 125
83239: PPUSH
83240: CALL 66473 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
83244: LD_ADDR_EXP 74
83248: PUSH
83249: LD_EXP 74
83253: PPUSH
83254: LD_VAR 0 2
83258: PPUSH
83259: EMPTY
83260: PPUSH
83261: CALL_OW 1
83265: ST_TO_ADDR
// end ; continue ;
83266: GO 83024
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
83268: LD_EXP 73
83272: PUSH
83273: LD_VAR 0 2
83277: ARRAY
83278: PUSH
83279: LD_INT 1
83281: ARRAY
83282: PUSH
83283: LD_INT 1
83285: ARRAY
83286: PPUSH
83287: LD_EXP 73
83291: PUSH
83292: LD_VAR 0 2
83296: ARRAY
83297: PUSH
83298: LD_INT 1
83300: ARRAY
83301: PUSH
83302: LD_INT 2
83304: ARRAY
83305: PPUSH
83306: LD_EXP 62
83310: PUSH
83311: LD_VAR 0 2
83315: ARRAY
83316: PPUSH
83317: CALL_OW 440
83321: IFFALSE 83364
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
83323: LD_ADDR_EXP 73
83327: PUSH
83328: LD_EXP 73
83332: PPUSH
83333: LD_VAR 0 2
83337: PPUSH
83338: LD_EXP 73
83342: PUSH
83343: LD_VAR 0 2
83347: ARRAY
83348: PPUSH
83349: LD_INT 1
83351: PPUSH
83352: CALL_OW 3
83356: PPUSH
83357: CALL_OW 1
83361: ST_TO_ADDR
83362: GO 83611
// begin if not mc_deposits_finder [ i ] then
83364: LD_EXP 74
83368: PUSH
83369: LD_VAR 0 2
83373: ARRAY
83374: NOT
83375: IFFALSE 83427
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
83377: LD_ADDR_EXP 74
83381: PUSH
83382: LD_EXP 74
83386: PPUSH
83387: LD_VAR 0 2
83391: PPUSH
83392: LD_VAR 0 3
83396: PUSH
83397: LD_INT 1
83399: ARRAY
83400: PUSH
83401: EMPTY
83402: LIST
83403: PPUSH
83404: CALL_OW 1
83408: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
83409: LD_VAR 0 3
83413: PUSH
83414: LD_INT 1
83416: ARRAY
83417: PPUSH
83418: LD_INT 125
83420: PPUSH
83421: CALL_OW 109
// end else
83425: GO 83611
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
83427: LD_EXP 74
83431: PUSH
83432: LD_VAR 0 2
83436: ARRAY
83437: PUSH
83438: LD_INT 1
83440: ARRAY
83441: PPUSH
83442: CALL_OW 310
83446: IFFALSE 83469
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
83448: LD_EXP 74
83452: PUSH
83453: LD_VAR 0 2
83457: ARRAY
83458: PUSH
83459: LD_INT 1
83461: ARRAY
83462: PPUSH
83463: CALL_OW 122
83467: GO 83611
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
83469: LD_EXP 74
83473: PUSH
83474: LD_VAR 0 2
83478: ARRAY
83479: PUSH
83480: LD_INT 1
83482: ARRAY
83483: PPUSH
83484: CALL_OW 314
83488: NOT
83489: PUSH
83490: LD_EXP 74
83494: PUSH
83495: LD_VAR 0 2
83499: ARRAY
83500: PUSH
83501: LD_INT 1
83503: ARRAY
83504: PPUSH
83505: LD_EXP 73
83509: PUSH
83510: LD_VAR 0 2
83514: ARRAY
83515: PUSH
83516: LD_INT 1
83518: ARRAY
83519: PUSH
83520: LD_INT 1
83522: ARRAY
83523: PPUSH
83524: LD_EXP 73
83528: PUSH
83529: LD_VAR 0 2
83533: ARRAY
83534: PUSH
83535: LD_INT 1
83537: ARRAY
83538: PUSH
83539: LD_INT 2
83541: ARRAY
83542: PPUSH
83543: CALL_OW 297
83547: PUSH
83548: LD_INT 6
83550: GREATER
83551: AND
83552: IFFALSE 83611
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
83554: LD_EXP 74
83558: PUSH
83559: LD_VAR 0 2
83563: ARRAY
83564: PUSH
83565: LD_INT 1
83567: ARRAY
83568: PPUSH
83569: LD_EXP 73
83573: PUSH
83574: LD_VAR 0 2
83578: ARRAY
83579: PUSH
83580: LD_INT 1
83582: ARRAY
83583: PUSH
83584: LD_INT 1
83586: ARRAY
83587: PPUSH
83588: LD_EXP 73
83592: PUSH
83593: LD_VAR 0 2
83597: ARRAY
83598: PUSH
83599: LD_INT 1
83601: ARRAY
83602: PUSH
83603: LD_INT 2
83605: ARRAY
83606: PPUSH
83607: CALL_OW 111
// end ; end ; end ;
83611: GO 83024
83613: POP
83614: POP
// end ;
83615: LD_VAR 0 1
83619: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts , mcts , x ; begin
83620: LD_INT 0
83622: PPUSH
83623: PPUSH
83624: PPUSH
83625: PPUSH
83626: PPUSH
83627: PPUSH
83628: PPUSH
83629: PPUSH
83630: PPUSH
83631: PPUSH
83632: PPUSH
// if not mc_bases then
83633: LD_EXP 36
83637: NOT
83638: IFFALSE 83642
// exit ;
83640: GO 84366
// for i = 1 to mc_bases do
83642: LD_ADDR_VAR 0 2
83646: PUSH
83647: DOUBLE
83648: LD_INT 1
83650: DEC
83651: ST_TO_ADDR
83652: LD_EXP 36
83656: PUSH
83657: FOR_TO
83658: IFFALSE 84364
// begin if not mc_bases [ i ] then
83660: LD_EXP 36
83664: PUSH
83665: LD_VAR 0 2
83669: ARRAY
83670: NOT
83671: IFFALSE 83675
// continue ;
83673: GO 83657
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
83675: LD_ADDR_VAR 0 7
83679: PUSH
83680: LD_EXP 36
83684: PUSH
83685: LD_VAR 0 2
83689: ARRAY
83690: PUSH
83691: LD_INT 1
83693: ARRAY
83694: PPUSH
83695: CALL_OW 248
83699: ST_TO_ADDR
// if nation = 3 or not UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) then
83700: LD_VAR 0 7
83704: PUSH
83705: LD_INT 3
83707: EQUAL
83708: PUSH
83709: LD_EXP 55
83713: PUSH
83714: LD_VAR 0 2
83718: ARRAY
83719: PUSH
83720: LD_EXP 58
83724: PUSH
83725: LD_VAR 0 2
83729: ARRAY
83730: UNION
83731: PPUSH
83732: LD_INT 33
83734: PUSH
83735: LD_INT 2
83737: PUSH
83738: EMPTY
83739: LIST
83740: LIST
83741: PPUSH
83742: CALL_OW 72
83746: NOT
83747: OR
83748: IFFALSE 83752
// continue ;
83750: GO 83657
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
83752: LD_ADDR_VAR 0 9
83756: PUSH
83757: LD_EXP 36
83761: PUSH
83762: LD_VAR 0 2
83766: ARRAY
83767: PPUSH
83768: LD_INT 30
83770: PUSH
83771: LD_INT 36
83773: PUSH
83774: EMPTY
83775: LIST
83776: LIST
83777: PPUSH
83778: CALL_OW 72
83782: ST_TO_ADDR
// mcts := UnitFilter ( mc_vehicles [ i ] , [ f_weapon , ar_control_tower ] ) ;
83783: LD_ADDR_VAR 0 10
83787: PUSH
83788: LD_EXP 55
83792: PUSH
83793: LD_VAR 0 2
83797: ARRAY
83798: PPUSH
83799: LD_INT 34
83801: PUSH
83802: LD_INT 31
83804: PUSH
83805: EMPTY
83806: LIST
83807: LIST
83808: PPUSH
83809: CALL_OW 72
83813: ST_TO_ADDR
// if not cts and not mcts then
83814: LD_VAR 0 9
83818: NOT
83819: PUSH
83820: LD_VAR 0 10
83824: NOT
83825: AND
83826: IFFALSE 83830
// continue ;
83828: GO 83657
// x := cts ;
83830: LD_ADDR_VAR 0 11
83834: PUSH
83835: LD_VAR 0 9
83839: ST_TO_ADDR
// if not x then
83840: LD_VAR 0 11
83844: NOT
83845: IFFALSE 83857
// x := mcts ;
83847: LD_ADDR_VAR 0 11
83851: PUSH
83852: LD_VAR 0 10
83856: ST_TO_ADDR
// if mc_remote_driver [ i ] then
83857: LD_EXP 76
83861: PUSH
83862: LD_VAR 0 2
83866: ARRAY
83867: IFFALSE 84136
// for j in mc_remote_driver [ i ] do
83869: LD_ADDR_VAR 0 3
83873: PUSH
83874: LD_EXP 76
83878: PUSH
83879: LD_VAR 0 2
83883: ARRAY
83884: PUSH
83885: FOR_IN
83886: IFFALSE 84134
// begin if GetClass ( j ) <> 3 then
83888: LD_VAR 0 3
83892: PPUSH
83893: CALL_OW 257
83897: PUSH
83898: LD_INT 3
83900: NONEQUAL
83901: IFFALSE 83954
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff j ) ;
83903: LD_ADDR_EXP 76
83907: PUSH
83908: LD_EXP 76
83912: PPUSH
83913: LD_VAR 0 2
83917: PPUSH
83918: LD_EXP 76
83922: PUSH
83923: LD_VAR 0 2
83927: ARRAY
83928: PUSH
83929: LD_VAR 0 3
83933: DIFF
83934: PPUSH
83935: CALL_OW 1
83939: ST_TO_ADDR
// SetTag ( j , 0 ) ;
83940: LD_VAR 0 3
83944: PPUSH
83945: LD_INT 0
83947: PPUSH
83948: CALL_OW 109
// continue ;
83952: GO 83885
// end ; if not IsInUnit ( j ) or ( GetBType ( IsInUnit ( j ) ) <> b_control_tower and not IsDriver ( j ) ) then
83954: LD_VAR 0 3
83958: PPUSH
83959: CALL_OW 310
83963: NOT
83964: PUSH
83965: LD_VAR 0 3
83969: PPUSH
83970: CALL_OW 310
83974: PPUSH
83975: CALL_OW 266
83979: PUSH
83980: LD_INT 36
83982: NONEQUAL
83983: PUSH
83984: LD_VAR 0 3
83988: PPUSH
83989: CALL 59774 0 1
83993: NOT
83994: AND
83995: OR
83996: IFFALSE 84132
// begin if IsInUnit ( j ) then
83998: LD_VAR 0 3
84002: PPUSH
84003: CALL_OW 310
84007: IFFALSE 84018
// ComExitBuilding ( j ) ;
84009: LD_VAR 0 3
84013: PPUSH
84014: CALL_OW 122
// ct := 0 ;
84018: LD_ADDR_VAR 0 8
84022: PUSH
84023: LD_INT 0
84025: ST_TO_ADDR
// for k in x do
84026: LD_ADDR_VAR 0 4
84030: PUSH
84031: LD_VAR 0 11
84035: PUSH
84036: FOR_IN
84037: IFFALSE 84110
// if ( GetWeapon ( k ) = ar_control_tower and not IsDrivenBy ( k ) ) or ( GetBType ( k ) = b_control_tower and UnitsInside ( k ) < 3 ) then
84039: LD_VAR 0 4
84043: PPUSH
84044: CALL_OW 264
84048: PUSH
84049: LD_INT 31
84051: EQUAL
84052: PUSH
84053: LD_VAR 0 4
84057: PPUSH
84058: CALL_OW 311
84062: NOT
84063: AND
84064: PUSH
84065: LD_VAR 0 4
84069: PPUSH
84070: CALL_OW 266
84074: PUSH
84075: LD_INT 36
84077: EQUAL
84078: PUSH
84079: LD_VAR 0 4
84083: PPUSH
84084: CALL_OW 313
84088: PUSH
84089: LD_INT 3
84091: LESS
84092: AND
84093: OR
84094: IFFALSE 84108
// begin ct := k ;
84096: LD_ADDR_VAR 0 8
84100: PUSH
84101: LD_VAR 0 4
84105: ST_TO_ADDR
// break ;
84106: GO 84110
// end ;
84108: GO 84036
84110: POP
84111: POP
// if ct then
84112: LD_VAR 0 8
84116: IFFALSE 84132
// ComEnterUnit ( j , ct ) ;
84118: LD_VAR 0 3
84122: PPUSH
84123: LD_VAR 0 8
84127: PPUSH
84128: CALL_OW 120
// end ; end ;
84132: GO 83885
84134: POP
84135: POP
// places := 0 ;
84136: LD_ADDR_VAR 0 5
84140: PUSH
84141: LD_INT 0
84143: ST_TO_ADDR
// for j = 1 to x do
84144: LD_ADDR_VAR 0 3
84148: PUSH
84149: DOUBLE
84150: LD_INT 1
84152: DEC
84153: ST_TO_ADDR
84154: LD_VAR 0 11
84158: PUSH
84159: FOR_TO
84160: IFFALSE 84215
// if GetWeapon ( x [ j ] ) = ar_control_tower then
84162: LD_VAR 0 11
84166: PUSH
84167: LD_VAR 0 3
84171: ARRAY
84172: PPUSH
84173: CALL_OW 264
84177: PUSH
84178: LD_INT 31
84180: EQUAL
84181: IFFALSE 84199
// places := places + 1 else
84183: LD_ADDR_VAR 0 5
84187: PUSH
84188: LD_VAR 0 5
84192: PUSH
84193: LD_INT 1
84195: PLUS
84196: ST_TO_ADDR
84197: GO 84213
// places := places + 3 ;
84199: LD_ADDR_VAR 0 5
84203: PUSH
84204: LD_VAR 0 5
84208: PUSH
84209: LD_INT 3
84211: PLUS
84212: ST_TO_ADDR
84213: GO 84159
84215: POP
84216: POP
// tmp := SortBySkill ( UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] , 3 ) ;
84217: LD_ADDR_VAR 0 6
84221: PUSH
84222: LD_EXP 36
84226: PUSH
84227: LD_VAR 0 2
84231: ARRAY
84232: PPUSH
84233: LD_INT 25
84235: PUSH
84236: LD_INT 3
84238: PUSH
84239: EMPTY
84240: LIST
84241: LIST
84242: PPUSH
84243: CALL_OW 72
84247: PUSH
84248: LD_EXP 76
84252: PUSH
84253: LD_VAR 0 2
84257: ARRAY
84258: DIFF
84259: PPUSH
84260: LD_INT 3
84262: PPUSH
84263: CALL 60674 0 2
84267: ST_TO_ADDR
// if not tmp then
84268: LD_VAR 0 6
84272: NOT
84273: IFFALSE 84277
// continue ;
84275: GO 83657
// places := places - mc_remote_driver [ i ] ;
84277: LD_ADDR_VAR 0 5
84281: PUSH
84282: LD_VAR 0 5
84286: PUSH
84287: LD_EXP 76
84291: PUSH
84292: LD_VAR 0 2
84296: ARRAY
84297: MINUS
84298: ST_TO_ADDR
// if places then
84299: LD_VAR 0 5
84303: IFFALSE 84362
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
84305: LD_ADDR_EXP 76
84309: PUSH
84310: LD_EXP 76
84314: PPUSH
84315: LD_VAR 0 2
84319: PPUSH
84320: LD_EXP 76
84324: PUSH
84325: LD_VAR 0 2
84329: ARRAY
84330: PUSH
84331: LD_VAR 0 6
84335: PUSH
84336: LD_INT 1
84338: ARRAY
84339: UNION
84340: PPUSH
84341: CALL_OW 1
84345: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
84346: LD_VAR 0 6
84350: PUSH
84351: LD_INT 1
84353: ARRAY
84354: PPUSH
84355: LD_INT 126
84357: PPUSH
84358: CALL_OW 109
// end ; end ;
84362: GO 83657
84364: POP
84365: POP
// end ;
84366: LD_VAR 0 1
84370: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
84371: LD_INT 0
84373: PPUSH
84374: PPUSH
84375: PPUSH
84376: PPUSH
84377: PPUSH
84378: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
84379: LD_VAR 0 1
84383: NOT
84384: PUSH
84385: LD_VAR 0 2
84389: NOT
84390: OR
84391: PUSH
84392: LD_VAR 0 3
84396: NOT
84397: OR
84398: PUSH
84399: LD_VAR 0 4
84403: PUSH
84404: LD_INT 1
84406: PUSH
84407: LD_INT 2
84409: PUSH
84410: LD_INT 3
84412: PUSH
84413: LD_INT 4
84415: PUSH
84416: LD_INT 5
84418: PUSH
84419: LD_INT 8
84421: PUSH
84422: LD_INT 9
84424: PUSH
84425: LD_INT 15
84427: PUSH
84428: LD_INT 16
84430: PUSH
84431: EMPTY
84432: LIST
84433: LIST
84434: LIST
84435: LIST
84436: LIST
84437: LIST
84438: LIST
84439: LIST
84440: LIST
84441: IN
84442: NOT
84443: OR
84444: IFFALSE 84448
// exit ;
84446: GO 85348
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
84448: LD_ADDR_VAR 0 2
84452: PUSH
84453: LD_VAR 0 2
84457: PPUSH
84458: LD_INT 21
84460: PUSH
84461: LD_INT 3
84463: PUSH
84464: EMPTY
84465: LIST
84466: LIST
84467: PUSH
84468: LD_INT 24
84470: PUSH
84471: LD_INT 250
84473: PUSH
84474: EMPTY
84475: LIST
84476: LIST
84477: PUSH
84478: EMPTY
84479: LIST
84480: LIST
84481: PPUSH
84482: CALL_OW 72
84486: ST_TO_ADDR
// case class of 1 , 15 :
84487: LD_VAR 0 4
84491: PUSH
84492: LD_INT 1
84494: DOUBLE
84495: EQUAL
84496: IFTRUE 84506
84498: LD_INT 15
84500: DOUBLE
84501: EQUAL
84502: IFTRUE 84506
84504: GO 84591
84506: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
84507: LD_ADDR_VAR 0 8
84511: PUSH
84512: LD_VAR 0 2
84516: PPUSH
84517: LD_INT 2
84519: PUSH
84520: LD_INT 30
84522: PUSH
84523: LD_INT 32
84525: PUSH
84526: EMPTY
84527: LIST
84528: LIST
84529: PUSH
84530: LD_INT 30
84532: PUSH
84533: LD_INT 31
84535: PUSH
84536: EMPTY
84537: LIST
84538: LIST
84539: PUSH
84540: EMPTY
84541: LIST
84542: LIST
84543: LIST
84544: PPUSH
84545: CALL_OW 72
84549: PUSH
84550: LD_VAR 0 2
84554: PPUSH
84555: LD_INT 2
84557: PUSH
84558: LD_INT 30
84560: PUSH
84561: LD_INT 4
84563: PUSH
84564: EMPTY
84565: LIST
84566: LIST
84567: PUSH
84568: LD_INT 30
84570: PUSH
84571: LD_INT 5
84573: PUSH
84574: EMPTY
84575: LIST
84576: LIST
84577: PUSH
84578: EMPTY
84579: LIST
84580: LIST
84581: LIST
84582: PPUSH
84583: CALL_OW 72
84587: ADD
84588: ST_TO_ADDR
84589: GO 84837
84591: LD_INT 2
84593: DOUBLE
84594: EQUAL
84595: IFTRUE 84605
84597: LD_INT 16
84599: DOUBLE
84600: EQUAL
84601: IFTRUE 84605
84603: GO 84651
84605: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
84606: LD_ADDR_VAR 0 8
84610: PUSH
84611: LD_VAR 0 2
84615: PPUSH
84616: LD_INT 2
84618: PUSH
84619: LD_INT 30
84621: PUSH
84622: LD_INT 0
84624: PUSH
84625: EMPTY
84626: LIST
84627: LIST
84628: PUSH
84629: LD_INT 30
84631: PUSH
84632: LD_INT 1
84634: PUSH
84635: EMPTY
84636: LIST
84637: LIST
84638: PUSH
84639: EMPTY
84640: LIST
84641: LIST
84642: LIST
84643: PPUSH
84644: CALL_OW 72
84648: ST_TO_ADDR
84649: GO 84837
84651: LD_INT 3
84653: DOUBLE
84654: EQUAL
84655: IFTRUE 84659
84657: GO 84705
84659: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
84660: LD_ADDR_VAR 0 8
84664: PUSH
84665: LD_VAR 0 2
84669: PPUSH
84670: LD_INT 2
84672: PUSH
84673: LD_INT 30
84675: PUSH
84676: LD_INT 2
84678: PUSH
84679: EMPTY
84680: LIST
84681: LIST
84682: PUSH
84683: LD_INT 30
84685: PUSH
84686: LD_INT 3
84688: PUSH
84689: EMPTY
84690: LIST
84691: LIST
84692: PUSH
84693: EMPTY
84694: LIST
84695: LIST
84696: LIST
84697: PPUSH
84698: CALL_OW 72
84702: ST_TO_ADDR
84703: GO 84837
84705: LD_INT 4
84707: DOUBLE
84708: EQUAL
84709: IFTRUE 84713
84711: GO 84770
84713: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
84714: LD_ADDR_VAR 0 8
84718: PUSH
84719: LD_VAR 0 2
84723: PPUSH
84724: LD_INT 2
84726: PUSH
84727: LD_INT 30
84729: PUSH
84730: LD_INT 6
84732: PUSH
84733: EMPTY
84734: LIST
84735: LIST
84736: PUSH
84737: LD_INT 30
84739: PUSH
84740: LD_INT 7
84742: PUSH
84743: EMPTY
84744: LIST
84745: LIST
84746: PUSH
84747: LD_INT 30
84749: PUSH
84750: LD_INT 8
84752: PUSH
84753: EMPTY
84754: LIST
84755: LIST
84756: PUSH
84757: EMPTY
84758: LIST
84759: LIST
84760: LIST
84761: LIST
84762: PPUSH
84763: CALL_OW 72
84767: ST_TO_ADDR
84768: GO 84837
84770: LD_INT 5
84772: DOUBLE
84773: EQUAL
84774: IFTRUE 84790
84776: LD_INT 8
84778: DOUBLE
84779: EQUAL
84780: IFTRUE 84790
84782: LD_INT 9
84784: DOUBLE
84785: EQUAL
84786: IFTRUE 84790
84788: GO 84836
84790: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
84791: LD_ADDR_VAR 0 8
84795: PUSH
84796: LD_VAR 0 2
84800: PPUSH
84801: LD_INT 2
84803: PUSH
84804: LD_INT 30
84806: PUSH
84807: LD_INT 4
84809: PUSH
84810: EMPTY
84811: LIST
84812: LIST
84813: PUSH
84814: LD_INT 30
84816: PUSH
84817: LD_INT 5
84819: PUSH
84820: EMPTY
84821: LIST
84822: LIST
84823: PUSH
84824: EMPTY
84825: LIST
84826: LIST
84827: LIST
84828: PPUSH
84829: CALL_OW 72
84833: ST_TO_ADDR
84834: GO 84837
84836: POP
// if not tmp then
84837: LD_VAR 0 8
84841: NOT
84842: IFFALSE 84846
// exit ;
84844: GO 85348
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
84846: LD_VAR 0 4
84850: PUSH
84851: LD_INT 1
84853: PUSH
84854: LD_INT 15
84856: PUSH
84857: EMPTY
84858: LIST
84859: LIST
84860: IN
84861: PUSH
84862: LD_EXP 45
84866: PUSH
84867: LD_VAR 0 1
84871: ARRAY
84872: AND
84873: IFFALSE 85029
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
84875: LD_ADDR_VAR 0 9
84879: PUSH
84880: LD_EXP 45
84884: PUSH
84885: LD_VAR 0 1
84889: ARRAY
84890: PUSH
84891: LD_INT 1
84893: ARRAY
84894: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
84895: LD_VAR 0 9
84899: PUSH
84900: LD_EXP 46
84904: PUSH
84905: LD_VAR 0 1
84909: ARRAY
84910: IN
84911: NOT
84912: IFFALSE 85027
// begin mc_busy_turret_list := ReplaceIn ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
84914: LD_ADDR_EXP 46
84918: PUSH
84919: LD_EXP 46
84923: PPUSH
84924: LD_VAR 0 1
84928: PUSH
84929: LD_EXP 46
84933: PUSH
84934: LD_VAR 0 1
84938: ARRAY
84939: PUSH
84940: LD_INT 1
84942: PLUS
84943: PUSH
84944: EMPTY
84945: LIST
84946: LIST
84947: PPUSH
84948: LD_VAR 0 9
84952: PPUSH
84953: CALL 26426 0 3
84957: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
84958: LD_ADDR_EXP 45
84962: PUSH
84963: LD_EXP 45
84967: PPUSH
84968: LD_VAR 0 1
84972: PPUSH
84973: LD_EXP 45
84977: PUSH
84978: LD_VAR 0 1
84982: ARRAY
84983: PUSH
84984: LD_VAR 0 9
84988: DIFF
84989: PPUSH
84990: CALL_OW 1
84994: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
84995: LD_VAR 0 3
84999: PPUSH
85000: LD_EXP 46
85004: PUSH
85005: LD_VAR 0 1
85009: ARRAY
85010: PUSH
85011: LD_EXP 46
85015: PUSH
85016: LD_VAR 0 1
85020: ARRAY
85021: ARRAY
85022: PPUSH
85023: CALL_OW 120
// end ; exit ;
85027: GO 85348
// end ; if tmp > 1 then
85029: LD_VAR 0 8
85033: PUSH
85034: LD_INT 1
85036: GREATER
85037: IFFALSE 85141
// for i = 2 to tmp do
85039: LD_ADDR_VAR 0 6
85043: PUSH
85044: DOUBLE
85045: LD_INT 2
85047: DEC
85048: ST_TO_ADDR
85049: LD_VAR 0 8
85053: PUSH
85054: FOR_TO
85055: IFFALSE 85139
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
85057: LD_VAR 0 8
85061: PUSH
85062: LD_VAR 0 6
85066: ARRAY
85067: PPUSH
85068: CALL_OW 461
85072: PUSH
85073: LD_INT 6
85075: EQUAL
85076: IFFALSE 85137
// begin x := tmp [ i ] ;
85078: LD_ADDR_VAR 0 9
85082: PUSH
85083: LD_VAR 0 8
85087: PUSH
85088: LD_VAR 0 6
85092: ARRAY
85093: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
85094: LD_ADDR_VAR 0 8
85098: PUSH
85099: LD_VAR 0 8
85103: PPUSH
85104: LD_VAR 0 6
85108: PPUSH
85109: CALL_OW 3
85113: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
85114: LD_ADDR_VAR 0 8
85118: PUSH
85119: LD_VAR 0 8
85123: PPUSH
85124: LD_INT 1
85126: PPUSH
85127: LD_VAR 0 9
85131: PPUSH
85132: CALL_OW 2
85136: ST_TO_ADDR
// end ;
85137: GO 85054
85139: POP
85140: POP
// for i in tmp do
85141: LD_ADDR_VAR 0 6
85145: PUSH
85146: LD_VAR 0 8
85150: PUSH
85151: FOR_IN
85152: IFFALSE 85221
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
85154: LD_VAR 0 6
85158: PPUSH
85159: CALL_OW 313
85163: PUSH
85164: LD_INT 6
85166: LESS
85167: PUSH
85168: LD_VAR 0 6
85172: PPUSH
85173: CALL_OW 266
85177: PUSH
85178: LD_INT 31
85180: PUSH
85181: LD_INT 32
85183: PUSH
85184: EMPTY
85185: LIST
85186: LIST
85187: IN
85188: NOT
85189: AND
85190: PUSH
85191: LD_VAR 0 6
85195: PPUSH
85196: CALL_OW 313
85200: PUSH
85201: LD_INT 0
85203: EQUAL
85204: OR
85205: IFFALSE 85219
// begin j := i ;
85207: LD_ADDR_VAR 0 7
85211: PUSH
85212: LD_VAR 0 6
85216: ST_TO_ADDR
// break ;
85217: GO 85221
// end ; end ;
85219: GO 85151
85221: POP
85222: POP
// if j then
85223: LD_VAR 0 7
85227: IFFALSE 85245
// ComEnterUnit ( unit , j ) else
85229: LD_VAR 0 3
85233: PPUSH
85234: LD_VAR 0 7
85238: PPUSH
85239: CALL_OW 120
85243: GO 85348
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
85245: LD_ADDR_VAR 0 10
85249: PUSH
85250: LD_VAR 0 2
85254: PPUSH
85255: LD_INT 2
85257: PUSH
85258: LD_INT 30
85260: PUSH
85261: LD_INT 0
85263: PUSH
85264: EMPTY
85265: LIST
85266: LIST
85267: PUSH
85268: LD_INT 30
85270: PUSH
85271: LD_INT 1
85273: PUSH
85274: EMPTY
85275: LIST
85276: LIST
85277: PUSH
85278: EMPTY
85279: LIST
85280: LIST
85281: LIST
85282: PPUSH
85283: CALL_OW 72
85287: ST_TO_ADDR
// if depot then
85288: LD_VAR 0 10
85292: IFFALSE 85348
// begin depot := NearestUnitToUnit ( depot , unit ) ;
85294: LD_ADDR_VAR 0 10
85298: PUSH
85299: LD_VAR 0 10
85303: PPUSH
85304: LD_VAR 0 3
85308: PPUSH
85309: CALL_OW 74
85313: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
85314: LD_VAR 0 3
85318: PPUSH
85319: LD_VAR 0 10
85323: PPUSH
85324: CALL_OW 296
85328: PUSH
85329: LD_INT 10
85331: GREATER
85332: IFFALSE 85348
// ComStandNearbyBuilding ( unit , depot ) ;
85334: LD_VAR 0 3
85338: PPUSH
85339: LD_VAR 0 10
85343: PPUSH
85344: CALL 20778 0 2
// end ; end ; end ;
85348: LD_VAR 0 5
85352: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
85353: LD_INT 0
85355: PPUSH
85356: PPUSH
85357: PPUSH
85358: PPUSH
// if not mc_bases then
85359: LD_EXP 36
85363: NOT
85364: IFFALSE 85368
// exit ;
85366: GO 85607
// for i = 1 to mc_bases do
85368: LD_ADDR_VAR 0 2
85372: PUSH
85373: DOUBLE
85374: LD_INT 1
85376: DEC
85377: ST_TO_ADDR
85378: LD_EXP 36
85382: PUSH
85383: FOR_TO
85384: IFFALSE 85605
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
85386: LD_ADDR_VAR 0 4
85390: PUSH
85391: LD_EXP 36
85395: PUSH
85396: LD_VAR 0 2
85400: ARRAY
85401: PPUSH
85402: LD_INT 21
85404: PUSH
85405: LD_INT 1
85407: PUSH
85408: EMPTY
85409: LIST
85410: LIST
85411: PPUSH
85412: CALL_OW 72
85416: PUSH
85417: LD_EXP 65
85421: PUSH
85422: LD_VAR 0 2
85426: ARRAY
85427: UNION
85428: ST_TO_ADDR
// if not tmp then
85429: LD_VAR 0 4
85433: NOT
85434: IFFALSE 85438
// continue ;
85436: GO 85383
// for j in tmp do
85438: LD_ADDR_VAR 0 3
85442: PUSH
85443: LD_VAR 0 4
85447: PUSH
85448: FOR_IN
85449: IFFALSE 85601
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
85451: LD_VAR 0 3
85455: PPUSH
85456: CALL_OW 110
85460: NOT
85461: PUSH
85462: LD_VAR 0 3
85466: PPUSH
85467: CALL_OW 314
85471: NOT
85472: AND
85473: PUSH
85474: LD_VAR 0 3
85478: PPUSH
85479: CALL_OW 311
85483: NOT
85484: AND
85485: PUSH
85486: LD_VAR 0 3
85490: PPUSH
85491: CALL_OW 310
85495: NOT
85496: AND
85497: PUSH
85498: LD_VAR 0 3
85502: PUSH
85503: LD_EXP 39
85507: PUSH
85508: LD_VAR 0 2
85512: ARRAY
85513: PUSH
85514: LD_INT 1
85516: ARRAY
85517: IN
85518: NOT
85519: AND
85520: PUSH
85521: LD_VAR 0 3
85525: PUSH
85526: LD_EXP 39
85530: PUSH
85531: LD_VAR 0 2
85535: ARRAY
85536: PUSH
85537: LD_INT 2
85539: ARRAY
85540: IN
85541: NOT
85542: AND
85543: PUSH
85544: LD_VAR 0 3
85548: PUSH
85549: LD_EXP 48
85553: PUSH
85554: LD_VAR 0 2
85558: ARRAY
85559: IN
85560: NOT
85561: AND
85562: IFFALSE 85599
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
85564: LD_VAR 0 2
85568: PPUSH
85569: LD_EXP 36
85573: PUSH
85574: LD_VAR 0 2
85578: ARRAY
85579: PPUSH
85580: LD_VAR 0 3
85584: PPUSH
85585: LD_VAR 0 3
85589: PPUSH
85590: CALL_OW 257
85594: PPUSH
85595: CALL 84371 0 4
// end ;
85599: GO 85448
85601: POP
85602: POP
// end ;
85603: GO 85383
85605: POP
85606: POP
// end ;
85607: LD_VAR 0 1
85611: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
85612: LD_INT 0
85614: PPUSH
85615: PPUSH
85616: PPUSH
85617: PPUSH
85618: PPUSH
85619: PPUSH
// if not mc_bases [ base ] then
85620: LD_EXP 36
85624: PUSH
85625: LD_VAR 0 1
85629: ARRAY
85630: NOT
85631: IFFALSE 85635
// exit ;
85633: GO 85817
// tmp := [ ] ;
85635: LD_ADDR_VAR 0 6
85639: PUSH
85640: EMPTY
85641: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
85642: LD_ADDR_VAR 0 7
85646: PUSH
85647: LD_VAR 0 3
85651: PPUSH
85652: LD_INT 0
85654: PPUSH
85655: CALL_OW 517
85659: ST_TO_ADDR
// if not list then
85660: LD_VAR 0 7
85664: NOT
85665: IFFALSE 85669
// exit ;
85667: GO 85817
// for i = 1 to amount do
85669: LD_ADDR_VAR 0 5
85673: PUSH
85674: DOUBLE
85675: LD_INT 1
85677: DEC
85678: ST_TO_ADDR
85679: LD_VAR 0 2
85683: PUSH
85684: FOR_TO
85685: IFFALSE 85765
// begin x := rand ( 1 , list [ 1 ] ) ;
85687: LD_ADDR_VAR 0 8
85691: PUSH
85692: LD_INT 1
85694: PPUSH
85695: LD_VAR 0 7
85699: PUSH
85700: LD_INT 1
85702: ARRAY
85703: PPUSH
85704: CALL_OW 12
85708: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
85709: LD_ADDR_VAR 0 6
85713: PUSH
85714: LD_VAR 0 6
85718: PPUSH
85719: LD_VAR 0 5
85723: PPUSH
85724: LD_VAR 0 7
85728: PUSH
85729: LD_INT 1
85731: ARRAY
85732: PUSH
85733: LD_VAR 0 8
85737: ARRAY
85738: PUSH
85739: LD_VAR 0 7
85743: PUSH
85744: LD_INT 2
85746: ARRAY
85747: PUSH
85748: LD_VAR 0 8
85752: ARRAY
85753: PUSH
85754: EMPTY
85755: LIST
85756: LIST
85757: PPUSH
85758: CALL_OW 1
85762: ST_TO_ADDR
// end ;
85763: GO 85684
85765: POP
85766: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
85767: LD_ADDR_EXP 49
85771: PUSH
85772: LD_EXP 49
85776: PPUSH
85777: LD_VAR 0 1
85781: PPUSH
85782: LD_VAR 0 6
85786: PPUSH
85787: CALL_OW 1
85791: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
85792: LD_ADDR_EXP 51
85796: PUSH
85797: LD_EXP 51
85801: PPUSH
85802: LD_VAR 0 1
85806: PPUSH
85807: LD_VAR 0 3
85811: PPUSH
85812: CALL_OW 1
85816: ST_TO_ADDR
// end ;
85817: LD_VAR 0 4
85821: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
85822: LD_INT 0
85824: PPUSH
// if not mc_bases [ base ] then
85825: LD_EXP 36
85829: PUSH
85830: LD_VAR 0 1
85834: ARRAY
85835: NOT
85836: IFFALSE 85840
// exit ;
85838: GO 85865
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
85840: LD_ADDR_EXP 41
85844: PUSH
85845: LD_EXP 41
85849: PPUSH
85850: LD_VAR 0 1
85854: PPUSH
85855: LD_VAR 0 2
85859: PPUSH
85860: CALL_OW 1
85864: ST_TO_ADDR
// end ;
85865: LD_VAR 0 3
85869: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
85870: LD_INT 0
85872: PPUSH
// if not mc_bases [ base ] then
85873: LD_EXP 36
85877: PUSH
85878: LD_VAR 0 1
85882: ARRAY
85883: NOT
85884: IFFALSE 85888
// exit ;
85886: GO 85925
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union list ) ;
85888: LD_ADDR_EXP 41
85892: PUSH
85893: LD_EXP 41
85897: PPUSH
85898: LD_VAR 0 1
85902: PPUSH
85903: LD_EXP 41
85907: PUSH
85908: LD_VAR 0 1
85912: ARRAY
85913: PUSH
85914: LD_VAR 0 2
85918: UNION
85919: PPUSH
85920: CALL_OW 1
85924: ST_TO_ADDR
// end ;
85925: LD_VAR 0 3
85929: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
85930: LD_INT 0
85932: PPUSH
// if not mc_bases [ base ] then
85933: LD_EXP 36
85937: PUSH
85938: LD_VAR 0 1
85942: ARRAY
85943: NOT
85944: IFFALSE 85948
// exit ;
85946: GO 85973
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
85948: LD_ADDR_EXP 57
85952: PUSH
85953: LD_EXP 57
85957: PPUSH
85958: LD_VAR 0 1
85962: PPUSH
85963: LD_VAR 0 2
85967: PPUSH
85968: CALL_OW 1
85972: ST_TO_ADDR
// end ;
85973: LD_VAR 0 3
85977: RET
// export function MC_InsertProduceList ( base , components ) ; begin
85978: LD_INT 0
85980: PPUSH
// if not mc_bases [ base ] then
85981: LD_EXP 36
85985: PUSH
85986: LD_VAR 0 1
85990: ARRAY
85991: NOT
85992: IFFALSE 85996
// exit ;
85994: GO 86033
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ components ) ;
85996: LD_ADDR_EXP 57
86000: PUSH
86001: LD_EXP 57
86005: PPUSH
86006: LD_VAR 0 1
86010: PPUSH
86011: LD_EXP 57
86015: PUSH
86016: LD_VAR 0 1
86020: ARRAY
86021: PUSH
86022: LD_VAR 0 2
86026: ADD
86027: PPUSH
86028: CALL_OW 1
86032: ST_TO_ADDR
// end ;
86033: LD_VAR 0 3
86037: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
86038: LD_INT 0
86040: PPUSH
// if not mc_bases [ base ] then
86041: LD_EXP 36
86045: PUSH
86046: LD_VAR 0 1
86050: ARRAY
86051: NOT
86052: IFFALSE 86056
// exit ;
86054: GO 86110
// mc_defender := Replace ( mc_defender , base , deflist ) ;
86056: LD_ADDR_EXP 58
86060: PUSH
86061: LD_EXP 58
86065: PPUSH
86066: LD_VAR 0 1
86070: PPUSH
86071: LD_VAR 0 2
86075: PPUSH
86076: CALL_OW 1
86080: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
86081: LD_ADDR_EXP 47
86085: PUSH
86086: LD_EXP 47
86090: PPUSH
86091: LD_VAR 0 1
86095: PPUSH
86096: LD_VAR 0 2
86100: PUSH
86101: LD_INT 0
86103: PLUS
86104: PPUSH
86105: CALL_OW 1
86109: ST_TO_ADDR
// end ;
86110: LD_VAR 0 3
86114: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
86115: LD_INT 0
86117: PPUSH
// if not mc_bases [ base ] then
86118: LD_EXP 36
86122: PUSH
86123: LD_VAR 0 1
86127: ARRAY
86128: NOT
86129: IFFALSE 86133
// exit ;
86131: GO 86158
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
86133: LD_ADDR_EXP 47
86137: PUSH
86138: LD_EXP 47
86142: PPUSH
86143: LD_VAR 0 1
86147: PPUSH
86148: LD_VAR 0 2
86152: PPUSH
86153: CALL_OW 1
86157: ST_TO_ADDR
// end ;
86158: LD_VAR 0 3
86162: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
86163: LD_INT 0
86165: PPUSH
86166: PPUSH
86167: PPUSH
86168: PPUSH
// if not mc_bases [ base ] then
86169: LD_EXP 36
86173: PUSH
86174: LD_VAR 0 1
86178: ARRAY
86179: NOT
86180: IFFALSE 86184
// exit ;
86182: GO 86249
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
86184: LD_ADDR_EXP 56
86188: PUSH
86189: LD_EXP 56
86193: PPUSH
86194: LD_VAR 0 1
86198: PUSH
86199: LD_EXP 56
86203: PUSH
86204: LD_VAR 0 1
86208: ARRAY
86209: PUSH
86210: LD_INT 1
86212: PLUS
86213: PUSH
86214: EMPTY
86215: LIST
86216: LIST
86217: PPUSH
86218: LD_VAR 0 1
86222: PUSH
86223: LD_VAR 0 2
86227: PUSH
86228: LD_VAR 0 3
86232: PUSH
86233: LD_VAR 0 4
86237: PUSH
86238: EMPTY
86239: LIST
86240: LIST
86241: LIST
86242: LIST
86243: PPUSH
86244: CALL 26426 0 3
86248: ST_TO_ADDR
// end ;
86249: LD_VAR 0 5
86253: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
86254: LD_INT 0
86256: PPUSH
// if not mc_bases [ base ] then
86257: LD_EXP 36
86261: PUSH
86262: LD_VAR 0 1
86266: ARRAY
86267: NOT
86268: IFFALSE 86272
// exit ;
86270: GO 86297
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
86272: LD_ADDR_EXP 73
86276: PUSH
86277: LD_EXP 73
86281: PPUSH
86282: LD_VAR 0 1
86286: PPUSH
86287: LD_VAR 0 2
86291: PPUSH
86292: CALL_OW 1
86296: ST_TO_ADDR
// end ;
86297: LD_VAR 0 3
86301: RET
// export function MC_GetMinesField ( base ) ; begin
86302: LD_INT 0
86304: PPUSH
// result := mc_mines [ base ] ;
86305: LD_ADDR_VAR 0 2
86309: PUSH
86310: LD_EXP 49
86314: PUSH
86315: LD_VAR 0 1
86319: ARRAY
86320: ST_TO_ADDR
// end ;
86321: LD_VAR 0 2
86325: RET
// export function MC_GetProduceList ( base ) ; begin
86326: LD_INT 0
86328: PPUSH
// result := mc_produce [ base ] ;
86329: LD_ADDR_VAR 0 2
86333: PUSH
86334: LD_EXP 57
86338: PUSH
86339: LD_VAR 0 1
86343: ARRAY
86344: ST_TO_ADDR
// end ;
86345: LD_VAR 0 2
86349: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
86350: LD_INT 0
86352: PPUSH
86353: PPUSH
// if not mc_bases then
86354: LD_EXP 36
86358: NOT
86359: IFFALSE 86363
// exit ;
86361: GO 86428
// if mc_bases [ base ] then
86363: LD_EXP 36
86367: PUSH
86368: LD_VAR 0 1
86372: ARRAY
86373: IFFALSE 86428
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
86375: LD_ADDR_VAR 0 3
86379: PUSH
86380: LD_EXP 36
86384: PUSH
86385: LD_VAR 0 1
86389: ARRAY
86390: PPUSH
86391: LD_INT 30
86393: PUSH
86394: LD_VAR 0 2
86398: PUSH
86399: EMPTY
86400: LIST
86401: LIST
86402: PPUSH
86403: CALL_OW 72
86407: ST_TO_ADDR
// if result then
86408: LD_VAR 0 3
86412: IFFALSE 86428
// result := result [ 1 ] ;
86414: LD_ADDR_VAR 0 3
86418: PUSH
86419: LD_VAR 0 3
86423: PUSH
86424: LD_INT 1
86426: ARRAY
86427: ST_TO_ADDR
// end ; end ;
86428: LD_VAR 0 3
86432: RET
// export function MC_GetBuildings ( base , btype ) ; var i ; begin
86433: LD_INT 0
86435: PPUSH
86436: PPUSH
// if not mc_bases then
86437: LD_EXP 36
86441: NOT
86442: IFFALSE 86446
// exit ;
86444: GO 86491
// if mc_bases [ base ] then
86446: LD_EXP 36
86450: PUSH
86451: LD_VAR 0 1
86455: ARRAY
86456: IFFALSE 86491
// result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
86458: LD_ADDR_VAR 0 3
86462: PUSH
86463: LD_EXP 36
86467: PUSH
86468: LD_VAR 0 1
86472: ARRAY
86473: PPUSH
86474: LD_INT 30
86476: PUSH
86477: LD_VAR 0 2
86481: PUSH
86482: EMPTY
86483: LIST
86484: LIST
86485: PPUSH
86486: CALL_OW 72
86490: ST_TO_ADDR
// end ;
86491: LD_VAR 0 3
86495: RET
// export function MC_SetTame ( base , area ) ; begin
86496: LD_INT 0
86498: PPUSH
// if not mc_bases or not base then
86499: LD_EXP 36
86503: NOT
86504: PUSH
86505: LD_VAR 0 1
86509: NOT
86510: OR
86511: IFFALSE 86515
// exit ;
86513: GO 86540
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
86515: LD_ADDR_EXP 64
86519: PUSH
86520: LD_EXP 64
86524: PPUSH
86525: LD_VAR 0 1
86529: PPUSH
86530: LD_VAR 0 2
86534: PPUSH
86535: CALL_OW 1
86539: ST_TO_ADDR
// end ;
86540: LD_VAR 0 3
86544: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
86545: LD_INT 0
86547: PPUSH
86548: PPUSH
// if not mc_bases or not base then
86549: LD_EXP 36
86553: NOT
86554: PUSH
86555: LD_VAR 0 1
86559: NOT
86560: OR
86561: IFFALSE 86565
// exit ;
86563: GO 86667
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
86565: LD_ADDR_VAR 0 4
86569: PUSH
86570: LD_EXP 36
86574: PUSH
86575: LD_VAR 0 1
86579: ARRAY
86580: PPUSH
86581: LD_INT 30
86583: PUSH
86584: LD_VAR 0 2
86588: PUSH
86589: EMPTY
86590: LIST
86591: LIST
86592: PPUSH
86593: CALL_OW 72
86597: ST_TO_ADDR
// if not tmp then
86598: LD_VAR 0 4
86602: NOT
86603: IFFALSE 86607
// exit ;
86605: GO 86667
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
86607: LD_ADDR_EXP 68
86611: PUSH
86612: LD_EXP 68
86616: PPUSH
86617: LD_VAR 0 1
86621: PPUSH
86622: LD_EXP 68
86626: PUSH
86627: LD_VAR 0 1
86631: ARRAY
86632: PPUSH
86633: LD_EXP 68
86637: PUSH
86638: LD_VAR 0 1
86642: ARRAY
86643: PUSH
86644: LD_INT 1
86646: PLUS
86647: PPUSH
86648: LD_VAR 0 4
86652: PUSH
86653: LD_INT 1
86655: ARRAY
86656: PPUSH
86657: CALL_OW 2
86661: PPUSH
86662: CALL_OW 1
86666: ST_TO_ADDR
// end ;
86667: LD_VAR 0 3
86671: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
86672: LD_INT 0
86674: PPUSH
86675: PPUSH
// if not mc_bases or not base or not kinds then
86676: LD_EXP 36
86680: NOT
86681: PUSH
86682: LD_VAR 0 1
86686: NOT
86687: OR
86688: PUSH
86689: LD_VAR 0 2
86693: NOT
86694: OR
86695: IFFALSE 86699
// exit ;
86697: GO 86760
// for i in kinds do
86699: LD_ADDR_VAR 0 4
86703: PUSH
86704: LD_VAR 0 2
86708: PUSH
86709: FOR_IN
86710: IFFALSE 86758
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
86712: LD_ADDR_EXP 70
86716: PUSH
86717: LD_EXP 70
86721: PPUSH
86722: LD_VAR 0 1
86726: PUSH
86727: LD_EXP 70
86731: PUSH
86732: LD_VAR 0 1
86736: ARRAY
86737: PUSH
86738: LD_INT 1
86740: PLUS
86741: PUSH
86742: EMPTY
86743: LIST
86744: LIST
86745: PPUSH
86746: LD_VAR 0 4
86750: PPUSH
86751: CALL 26426 0 3
86755: ST_TO_ADDR
86756: GO 86709
86758: POP
86759: POP
// end ;
86760: LD_VAR 0 3
86764: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
86765: LD_INT 0
86767: PPUSH
// if not mc_bases or not base or not areas then
86768: LD_EXP 36
86772: NOT
86773: PUSH
86774: LD_VAR 0 1
86778: NOT
86779: OR
86780: PUSH
86781: LD_VAR 0 2
86785: NOT
86786: OR
86787: IFFALSE 86791
// exit ;
86789: GO 86816
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
86791: LD_ADDR_EXP 54
86795: PUSH
86796: LD_EXP 54
86800: PPUSH
86801: LD_VAR 0 1
86805: PPUSH
86806: LD_VAR 0 2
86810: PPUSH
86811: CALL_OW 1
86815: ST_TO_ADDR
// end ;
86816: LD_VAR 0 3
86820: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
86821: LD_INT 0
86823: PPUSH
// if not mc_bases or not base or not teleports_exit then
86824: LD_EXP 36
86828: NOT
86829: PUSH
86830: LD_VAR 0 1
86834: NOT
86835: OR
86836: PUSH
86837: LD_VAR 0 2
86841: NOT
86842: OR
86843: IFFALSE 86847
// exit ;
86845: GO 86872
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
86847: LD_ADDR_EXP 71
86851: PUSH
86852: LD_EXP 71
86856: PPUSH
86857: LD_VAR 0 1
86861: PPUSH
86862: LD_VAR 0 2
86866: PPUSH
86867: CALL_OW 1
86871: ST_TO_ADDR
// end ;
86872: LD_VAR 0 3
86876: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
86877: LD_INT 0
86879: PPUSH
86880: PPUSH
86881: PPUSH
// if not mc_bases or not base or not ext_list then
86882: LD_EXP 36
86886: NOT
86887: PUSH
86888: LD_VAR 0 1
86892: NOT
86893: OR
86894: PUSH
86895: LD_VAR 0 5
86899: NOT
86900: OR
86901: IFFALSE 86905
// exit ;
86903: GO 87078
// tmp := GetFacExtXYD ( x , y , d ) ;
86905: LD_ADDR_VAR 0 8
86909: PUSH
86910: LD_VAR 0 2
86914: PPUSH
86915: LD_VAR 0 3
86919: PPUSH
86920: LD_VAR 0 4
86924: PPUSH
86925: CALL 59804 0 3
86929: ST_TO_ADDR
// if not tmp then
86930: LD_VAR 0 8
86934: NOT
86935: IFFALSE 86939
// exit ;
86937: GO 87078
// for i in tmp do
86939: LD_ADDR_VAR 0 7
86943: PUSH
86944: LD_VAR 0 8
86948: PUSH
86949: FOR_IN
86950: IFFALSE 87076
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
86952: LD_ADDR_EXP 41
86956: PUSH
86957: LD_EXP 41
86961: PPUSH
86962: LD_VAR 0 1
86966: PPUSH
86967: LD_EXP 41
86971: PUSH
86972: LD_VAR 0 1
86976: ARRAY
86977: PPUSH
86978: LD_EXP 41
86982: PUSH
86983: LD_VAR 0 1
86987: ARRAY
86988: PUSH
86989: LD_INT 1
86991: PLUS
86992: PPUSH
86993: LD_VAR 0 5
86997: PUSH
86998: LD_INT 1
87000: ARRAY
87001: PUSH
87002: LD_VAR 0 7
87006: PUSH
87007: LD_INT 1
87009: ARRAY
87010: PUSH
87011: LD_VAR 0 7
87015: PUSH
87016: LD_INT 2
87018: ARRAY
87019: PUSH
87020: LD_VAR 0 7
87024: PUSH
87025: LD_INT 3
87027: ARRAY
87028: PUSH
87029: EMPTY
87030: LIST
87031: LIST
87032: LIST
87033: LIST
87034: PPUSH
87035: CALL_OW 2
87039: PPUSH
87040: CALL_OW 1
87044: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
87045: LD_ADDR_VAR 0 5
87049: PUSH
87050: LD_VAR 0 5
87054: PPUSH
87055: LD_INT 1
87057: PPUSH
87058: CALL_OW 3
87062: ST_TO_ADDR
// if not ext_list then
87063: LD_VAR 0 5
87067: NOT
87068: IFFALSE 87074
// exit ;
87070: POP
87071: POP
87072: GO 87078
// end ;
87074: GO 86949
87076: POP
87077: POP
// end ;
87078: LD_VAR 0 6
87082: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
87083: LD_INT 0
87085: PPUSH
// if not mc_bases or not base or not weapon_list then
87086: LD_EXP 36
87090: NOT
87091: PUSH
87092: LD_VAR 0 1
87096: NOT
87097: OR
87098: PUSH
87099: LD_VAR 0 2
87103: NOT
87104: OR
87105: IFFALSE 87109
// exit ;
87107: GO 87134
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
87109: LD_ADDR_EXP 75
87113: PUSH
87114: LD_EXP 75
87118: PPUSH
87119: LD_VAR 0 1
87123: PPUSH
87124: LD_VAR 0 2
87128: PPUSH
87129: CALL_OW 1
87133: ST_TO_ADDR
// end ;
87134: LD_VAR 0 3
87138: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
87139: LD_INT 0
87141: PPUSH
// if not mc_bases or not base or not tech_list then
87142: LD_EXP 36
87146: NOT
87147: PUSH
87148: LD_VAR 0 1
87152: NOT
87153: OR
87154: PUSH
87155: LD_VAR 0 2
87159: NOT
87160: OR
87161: IFFALSE 87165
// exit ;
87163: GO 87190
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
87165: LD_ADDR_EXP 63
87169: PUSH
87170: LD_EXP 63
87174: PPUSH
87175: LD_VAR 0 1
87179: PPUSH
87180: LD_VAR 0 2
87184: PPUSH
87185: CALL_OW 1
87189: ST_TO_ADDR
// end ;
87190: LD_VAR 0 3
87194: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
87195: LD_INT 0
87197: PPUSH
// if not mc_bases or not parking_area or not base then
87198: LD_EXP 36
87202: NOT
87203: PUSH
87204: LD_VAR 0 2
87208: NOT
87209: OR
87210: PUSH
87211: LD_VAR 0 1
87215: NOT
87216: OR
87217: IFFALSE 87221
// exit ;
87219: GO 87246
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
87221: LD_ADDR_EXP 60
87225: PUSH
87226: LD_EXP 60
87230: PPUSH
87231: LD_VAR 0 1
87235: PPUSH
87236: LD_VAR 0 2
87240: PPUSH
87241: CALL_OW 1
87245: ST_TO_ADDR
// end ;
87246: LD_VAR 0 3
87250: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
87251: LD_INT 0
87253: PPUSH
// if not mc_bases or not base or not scan_area then
87254: LD_EXP 36
87258: NOT
87259: PUSH
87260: LD_VAR 0 1
87264: NOT
87265: OR
87266: PUSH
87267: LD_VAR 0 2
87271: NOT
87272: OR
87273: IFFALSE 87277
// exit ;
87275: GO 87302
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
87277: LD_ADDR_EXP 61
87281: PUSH
87282: LD_EXP 61
87286: PPUSH
87287: LD_VAR 0 1
87291: PPUSH
87292: LD_VAR 0 2
87296: PPUSH
87297: CALL_OW 1
87301: ST_TO_ADDR
// end ;
87302: LD_VAR 0 3
87306: RET
// export function MC_NotTameApeman ( base ) ; var ape_techs ; begin
87307: LD_INT 0
87309: PPUSH
87310: PPUSH
// if not mc_bases or not base then
87311: LD_EXP 36
87315: NOT
87316: PUSH
87317: LD_VAR 0 1
87321: NOT
87322: OR
87323: IFFALSE 87327
// exit ;
87325: GO 87391
// ape_techs := [ 1 , 2 , 3 , 4 , 11 ] ;
87327: LD_ADDR_VAR 0 3
87331: PUSH
87332: LD_INT 1
87334: PUSH
87335: LD_INT 2
87337: PUSH
87338: LD_INT 3
87340: PUSH
87341: LD_INT 4
87343: PUSH
87344: LD_INT 11
87346: PUSH
87347: EMPTY
87348: LIST
87349: LIST
87350: LIST
87351: LIST
87352: LIST
87353: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , mc_tech [ base ] diff ape_techs ) ;
87354: LD_ADDR_EXP 63
87358: PUSH
87359: LD_EXP 63
87363: PPUSH
87364: LD_VAR 0 1
87368: PPUSH
87369: LD_EXP 63
87373: PUSH
87374: LD_VAR 0 1
87378: ARRAY
87379: PUSH
87380: LD_VAR 0 3
87384: DIFF
87385: PPUSH
87386: CALL_OW 1
87390: ST_TO_ADDR
// end ;
87391: LD_VAR 0 2
87395: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
87396: LD_INT 0
87398: PPUSH
// result := mc_vehicles [ base ] ;
87399: LD_ADDR_VAR 0 3
87403: PUSH
87404: LD_EXP 55
87408: PUSH
87409: LD_VAR 0 1
87413: ARRAY
87414: ST_TO_ADDR
// if onlyCombat then
87415: LD_VAR 0 2
87419: IFFALSE 87584
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] , [ f_weapon , ru_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ) ;
87421: LD_ADDR_VAR 0 3
87425: PUSH
87426: LD_VAR 0 3
87430: PUSH
87431: LD_VAR 0 3
87435: PPUSH
87436: LD_INT 2
87438: PUSH
87439: LD_INT 34
87441: PUSH
87442: LD_INT 12
87444: PUSH
87445: EMPTY
87446: LIST
87447: LIST
87448: PUSH
87449: LD_INT 34
87451: PUSH
87452: LD_INT 51
87454: PUSH
87455: EMPTY
87456: LIST
87457: LIST
87458: PUSH
87459: LD_INT 34
87461: PUSH
87462: LD_EXP 30
87466: PUSH
87467: EMPTY
87468: LIST
87469: LIST
87470: PUSH
87471: LD_INT 34
87473: PUSH
87474: LD_INT 32
87476: PUSH
87477: EMPTY
87478: LIST
87479: LIST
87480: PUSH
87481: LD_INT 34
87483: PUSH
87484: LD_INT 13
87486: PUSH
87487: EMPTY
87488: LIST
87489: LIST
87490: PUSH
87491: LD_INT 34
87493: PUSH
87494: LD_INT 52
87496: PUSH
87497: EMPTY
87498: LIST
87499: LIST
87500: PUSH
87501: LD_INT 34
87503: PUSH
87504: LD_INT 14
87506: PUSH
87507: EMPTY
87508: LIST
87509: LIST
87510: PUSH
87511: LD_INT 34
87513: PUSH
87514: LD_INT 53
87516: PUSH
87517: EMPTY
87518: LIST
87519: LIST
87520: PUSH
87521: LD_INT 34
87523: PUSH
87524: LD_EXP 29
87528: PUSH
87529: EMPTY
87530: LIST
87531: LIST
87532: PUSH
87533: LD_INT 34
87535: PUSH
87536: LD_INT 31
87538: PUSH
87539: EMPTY
87540: LIST
87541: LIST
87542: PUSH
87543: LD_INT 34
87545: PUSH
87546: LD_INT 48
87548: PUSH
87549: EMPTY
87550: LIST
87551: LIST
87552: PUSH
87553: LD_INT 34
87555: PUSH
87556: LD_INT 8
87558: PUSH
87559: EMPTY
87560: LIST
87561: LIST
87562: PUSH
87563: EMPTY
87564: LIST
87565: LIST
87566: LIST
87567: LIST
87568: LIST
87569: LIST
87570: LIST
87571: LIST
87572: LIST
87573: LIST
87574: LIST
87575: LIST
87576: LIST
87577: PPUSH
87578: CALL_OW 72
87582: DIFF
87583: ST_TO_ADDR
// end ; end_of_file
87584: LD_VAR 0 3
87588: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
87589: LD_INT 0
87591: PPUSH
87592: PPUSH
87593: PPUSH
// if not mc_bases or not skirmish then
87594: LD_EXP 36
87598: NOT
87599: PUSH
87600: LD_EXP 34
87604: NOT
87605: OR
87606: IFFALSE 87610
// exit ;
87608: GO 87775
// for i = 1 to mc_bases do
87610: LD_ADDR_VAR 0 4
87614: PUSH
87615: DOUBLE
87616: LD_INT 1
87618: DEC
87619: ST_TO_ADDR
87620: LD_EXP 36
87624: PUSH
87625: FOR_TO
87626: IFFALSE 87773
// begin if sci in mc_bases [ i ] then
87628: LD_VAR 0 2
87632: PUSH
87633: LD_EXP 36
87637: PUSH
87638: LD_VAR 0 4
87642: ARRAY
87643: IN
87644: IFFALSE 87771
// begin mc_ape := ReplaceIn ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
87646: LD_ADDR_EXP 65
87650: PUSH
87651: LD_EXP 65
87655: PPUSH
87656: LD_VAR 0 4
87660: PUSH
87661: LD_EXP 65
87665: PUSH
87666: LD_VAR 0 4
87670: ARRAY
87671: PUSH
87672: LD_INT 1
87674: PLUS
87675: PUSH
87676: EMPTY
87677: LIST
87678: LIST
87679: PPUSH
87680: LD_VAR 0 1
87684: PPUSH
87685: CALL 26426 0 3
87689: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
87690: LD_ADDR_VAR 0 5
87694: PUSH
87695: LD_EXP 36
87699: PUSH
87700: LD_VAR 0 4
87704: ARRAY
87705: PPUSH
87706: LD_INT 2
87708: PUSH
87709: LD_INT 30
87711: PUSH
87712: LD_INT 0
87714: PUSH
87715: EMPTY
87716: LIST
87717: LIST
87718: PUSH
87719: LD_INT 30
87721: PUSH
87722: LD_INT 1
87724: PUSH
87725: EMPTY
87726: LIST
87727: LIST
87728: PUSH
87729: EMPTY
87730: LIST
87731: LIST
87732: LIST
87733: PPUSH
87734: CALL_OW 72
87738: PPUSH
87739: LD_VAR 0 1
87743: PPUSH
87744: CALL_OW 74
87748: ST_TO_ADDR
// if tmp then
87749: LD_VAR 0 5
87753: IFFALSE 87769
// ComStandNearbyBuilding ( ape , tmp ) ;
87755: LD_VAR 0 1
87759: PPUSH
87760: LD_VAR 0 5
87764: PPUSH
87765: CALL 20778 0 2
// break ;
87769: GO 87773
// end ; end ;
87771: GO 87625
87773: POP
87774: POP
// end ;
87775: LD_VAR 0 3
87779: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
87780: LD_INT 0
87782: PPUSH
87783: PPUSH
87784: PPUSH
// if not mc_bases or not skirmish then
87785: LD_EXP 36
87789: NOT
87790: PUSH
87791: LD_EXP 34
87795: NOT
87796: OR
87797: IFFALSE 87801
// exit ;
87799: GO 87890
// for i = 1 to mc_bases do
87801: LD_ADDR_VAR 0 4
87805: PUSH
87806: DOUBLE
87807: LD_INT 1
87809: DEC
87810: ST_TO_ADDR
87811: LD_EXP 36
87815: PUSH
87816: FOR_TO
87817: IFFALSE 87888
// begin if building in mc_busy_turret_list [ i ] then
87819: LD_VAR 0 1
87823: PUSH
87824: LD_EXP 46
87828: PUSH
87829: LD_VAR 0 4
87833: ARRAY
87834: IN
87835: IFFALSE 87886
// begin tmp := mc_busy_turret_list [ i ] diff building ;
87837: LD_ADDR_VAR 0 5
87841: PUSH
87842: LD_EXP 46
87846: PUSH
87847: LD_VAR 0 4
87851: ARRAY
87852: PUSH
87853: LD_VAR 0 1
87857: DIFF
87858: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
87859: LD_ADDR_EXP 46
87863: PUSH
87864: LD_EXP 46
87868: PPUSH
87869: LD_VAR 0 4
87873: PPUSH
87874: LD_VAR 0 5
87878: PPUSH
87879: CALL_OW 1
87883: ST_TO_ADDR
// break ;
87884: GO 87888
// end ; end ;
87886: GO 87816
87888: POP
87889: POP
// end ;
87890: LD_VAR 0 3
87894: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
87895: LD_INT 0
87897: PPUSH
87898: PPUSH
87899: PPUSH
// if not mc_bases or not skirmish then
87900: LD_EXP 36
87904: NOT
87905: PUSH
87906: LD_EXP 34
87910: NOT
87911: OR
87912: IFFALSE 87916
// exit ;
87914: GO 88115
// for i = 1 to mc_bases do
87916: LD_ADDR_VAR 0 5
87920: PUSH
87921: DOUBLE
87922: LD_INT 1
87924: DEC
87925: ST_TO_ADDR
87926: LD_EXP 36
87930: PUSH
87931: FOR_TO
87932: IFFALSE 88113
// if building in mc_bases [ i ] then
87934: LD_VAR 0 1
87938: PUSH
87939: LD_EXP 36
87943: PUSH
87944: LD_VAR 0 5
87948: ARRAY
87949: IN
87950: IFFALSE 88111
// begin tmp := mc_bases [ i ] diff building ;
87952: LD_ADDR_VAR 0 6
87956: PUSH
87957: LD_EXP 36
87961: PUSH
87962: LD_VAR 0 5
87966: ARRAY
87967: PUSH
87968: LD_VAR 0 1
87972: DIFF
87973: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
87974: LD_ADDR_EXP 36
87978: PUSH
87979: LD_EXP 36
87983: PPUSH
87984: LD_VAR 0 5
87988: PPUSH
87989: LD_VAR 0 6
87993: PPUSH
87994: CALL_OW 1
87998: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
87999: LD_VAR 0 1
88003: PUSH
88004: LD_EXP 44
88008: PUSH
88009: LD_VAR 0 5
88013: ARRAY
88014: IN
88015: IFFALSE 88054
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
88017: LD_ADDR_EXP 44
88021: PUSH
88022: LD_EXP 44
88026: PPUSH
88027: LD_VAR 0 5
88031: PPUSH
88032: LD_EXP 44
88036: PUSH
88037: LD_VAR 0 5
88041: ARRAY
88042: PUSH
88043: LD_VAR 0 1
88047: DIFF
88048: PPUSH
88049: CALL_OW 1
88053: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
88054: LD_VAR 0 1
88058: PUSH
88059: LD_EXP 45
88063: PUSH
88064: LD_VAR 0 5
88068: ARRAY
88069: IN
88070: IFFALSE 88109
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
88072: LD_ADDR_EXP 45
88076: PUSH
88077: LD_EXP 45
88081: PPUSH
88082: LD_VAR 0 5
88086: PPUSH
88087: LD_EXP 45
88091: PUSH
88092: LD_VAR 0 5
88096: ARRAY
88097: PUSH
88098: LD_VAR 0 1
88102: DIFF
88103: PPUSH
88104: CALL_OW 1
88108: ST_TO_ADDR
// break ;
88109: GO 88113
// end ;
88111: GO 87931
88113: POP
88114: POP
// end ;
88115: LD_VAR 0 4
88119: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
88120: LD_INT 0
88122: PPUSH
88123: PPUSH
88124: PPUSH
// if not mc_bases or not skirmish or not side in mc_sides then
88125: LD_EXP 36
88129: NOT
88130: PUSH
88131: LD_EXP 34
88135: NOT
88136: OR
88137: PUSH
88138: LD_VAR 0 3
88142: PUSH
88143: LD_EXP 62
88147: IN
88148: NOT
88149: OR
88150: IFFALSE 88154
// exit ;
88152: GO 88277
// for i = 1 to mc_vehicles do
88154: LD_ADDR_VAR 0 6
88158: PUSH
88159: DOUBLE
88160: LD_INT 1
88162: DEC
88163: ST_TO_ADDR
88164: LD_EXP 55
88168: PUSH
88169: FOR_TO
88170: IFFALSE 88275
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
88172: LD_VAR 0 2
88176: PUSH
88177: LD_EXP 55
88181: PUSH
88182: LD_VAR 0 6
88186: ARRAY
88187: IN
88188: PUSH
88189: LD_VAR 0 1
88193: PUSH
88194: LD_EXP 55
88198: PUSH
88199: LD_VAR 0 6
88203: ARRAY
88204: IN
88205: OR
88206: IFFALSE 88273
// begin tmp := mc_vehicles [ i ] diff old ;
88208: LD_ADDR_VAR 0 7
88212: PUSH
88213: LD_EXP 55
88217: PUSH
88218: LD_VAR 0 6
88222: ARRAY
88223: PUSH
88224: LD_VAR 0 2
88228: DIFF
88229: ST_TO_ADDR
// tmp := tmp diff new ;
88230: LD_ADDR_VAR 0 7
88234: PUSH
88235: LD_VAR 0 7
88239: PUSH
88240: LD_VAR 0 1
88244: DIFF
88245: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
88246: LD_ADDR_EXP 55
88250: PUSH
88251: LD_EXP 55
88255: PPUSH
88256: LD_VAR 0 6
88260: PPUSH
88261: LD_VAR 0 7
88265: PPUSH
88266: CALL_OW 1
88270: ST_TO_ADDR
// break ;
88271: GO 88275
// end ;
88273: GO 88169
88275: POP
88276: POP
// end ;
88277: LD_VAR 0 5
88281: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
88282: LD_INT 0
88284: PPUSH
88285: PPUSH
88286: PPUSH
88287: PPUSH
// if not mc_bases or not skirmish then
88288: LD_EXP 36
88292: NOT
88293: PUSH
88294: LD_EXP 34
88298: NOT
88299: OR
88300: IFFALSE 88304
// exit ;
88302: GO 88681
// side := GetSide ( vehicle ) ;
88304: LD_ADDR_VAR 0 5
88308: PUSH
88309: LD_VAR 0 1
88313: PPUSH
88314: CALL_OW 255
88318: ST_TO_ADDR
// for i = 1 to mc_bases do
88319: LD_ADDR_VAR 0 4
88323: PUSH
88324: DOUBLE
88325: LD_INT 1
88327: DEC
88328: ST_TO_ADDR
88329: LD_EXP 36
88333: PUSH
88334: FOR_TO
88335: IFFALSE 88679
// begin if factory in mc_bases [ i ] then
88337: LD_VAR 0 2
88341: PUSH
88342: LD_EXP 36
88346: PUSH
88347: LD_VAR 0 4
88351: ARRAY
88352: IN
88353: IFFALSE 88677
// begin if mc_defender [ i ] < mc_defender_limit [ i ] and not GetWeapon ( vehicle ) in [ ar_control_tower , ar_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , us_cargo_bay , ar_radar , ru_radar , us_radar , ru_bulldozer , us_bulldozer , ar_bio_bomb , ar_selfpropelled_bomb , us_hack , us_crane , ru_crane , ru_siberium_rocket , us_siberium_rocket ] then
88355: LD_EXP 58
88359: PUSH
88360: LD_VAR 0 4
88364: ARRAY
88365: PUSH
88366: LD_EXP 47
88370: PUSH
88371: LD_VAR 0 4
88375: ARRAY
88376: LESS
88377: PUSH
88378: LD_VAR 0 1
88382: PPUSH
88383: CALL_OW 264
88387: PUSH
88388: LD_INT 31
88390: PUSH
88391: LD_INT 32
88393: PUSH
88394: LD_INT 51
88396: PUSH
88397: LD_EXP 30
88401: PUSH
88402: LD_INT 12
88404: PUSH
88405: LD_INT 30
88407: PUSH
88408: LD_EXP 29
88412: PUSH
88413: LD_INT 11
88415: PUSH
88416: LD_INT 53
88418: PUSH
88419: LD_INT 14
88421: PUSH
88422: LD_EXP 33
88426: PUSH
88427: LD_INT 29
88429: PUSH
88430: LD_EXP 31
88434: PUSH
88435: LD_INT 13
88437: PUSH
88438: LD_INT 52
88440: PUSH
88441: LD_INT 48
88443: PUSH
88444: LD_INT 8
88446: PUSH
88447: EMPTY
88448: LIST
88449: LIST
88450: LIST
88451: LIST
88452: LIST
88453: LIST
88454: LIST
88455: LIST
88456: LIST
88457: LIST
88458: LIST
88459: LIST
88460: LIST
88461: LIST
88462: LIST
88463: LIST
88464: LIST
88465: IN
88466: NOT
88467: AND
88468: IFFALSE 88516
// mc_defender := ReplaceIn ( mc_defender , [ i , mc_defender [ i ] + 1 ] , vehicle ) else
88470: LD_ADDR_EXP 58
88474: PUSH
88475: LD_EXP 58
88479: PPUSH
88480: LD_VAR 0 4
88484: PUSH
88485: LD_EXP 58
88489: PUSH
88490: LD_VAR 0 4
88494: ARRAY
88495: PUSH
88496: LD_INT 1
88498: PLUS
88499: PUSH
88500: EMPTY
88501: LIST
88502: LIST
88503: PPUSH
88504: LD_VAR 0 1
88508: PPUSH
88509: CALL 26426 0 3
88513: ST_TO_ADDR
88514: GO 88560
// mc_vehicles := ReplaceIn ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
88516: LD_ADDR_EXP 55
88520: PUSH
88521: LD_EXP 55
88525: PPUSH
88526: LD_VAR 0 4
88530: PUSH
88531: LD_EXP 55
88535: PUSH
88536: LD_VAR 0 4
88540: ARRAY
88541: PUSH
88542: LD_INT 1
88544: PLUS
88545: PUSH
88546: EMPTY
88547: LIST
88548: LIST
88549: PPUSH
88550: LD_VAR 0 1
88554: PPUSH
88555: CALL 26426 0 3
88559: ST_TO_ADDR
// if GetControl ( vehicle ) = control_remote then
88560: LD_VAR 0 1
88564: PPUSH
88565: CALL_OW 263
88569: PUSH
88570: LD_INT 2
88572: EQUAL
88573: IFFALSE 88593
// begin repeat wait ( 0 0$1 ) ;
88575: LD_INT 35
88577: PPUSH
88578: CALL_OW 67
// until IsControledBy ( vehicle ) ;
88582: LD_VAR 0 1
88586: PPUSH
88587: CALL_OW 312
88591: IFFALSE 88575
// end ; ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
88593: LD_VAR 0 1
88597: PPUSH
88598: LD_EXP 60
88602: PUSH
88603: LD_VAR 0 4
88607: ARRAY
88608: PPUSH
88609: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
88613: LD_VAR 0 1
88617: PPUSH
88618: CALL_OW 263
88622: PUSH
88623: LD_INT 1
88625: NONEQUAL
88626: IFFALSE 88630
// break ;
88628: GO 88679
// repeat wait ( 0 0$1 ) ;
88630: LD_INT 35
88632: PPUSH
88633: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
88637: LD_VAR 0 1
88641: PPUSH
88642: LD_EXP 60
88646: PUSH
88647: LD_VAR 0 4
88651: ARRAY
88652: PPUSH
88653: CALL_OW 308
88657: IFFALSE 88630
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
88659: LD_VAR 0 1
88663: PPUSH
88664: CALL_OW 311
88668: PPUSH
88669: CALL_OW 121
// exit ;
88673: POP
88674: POP
88675: GO 88681
// end ; end ;
88677: GO 88334
88679: POP
88680: POP
// end ;
88681: LD_VAR 0 3
88685: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
88686: LD_INT 0
88688: PPUSH
88689: PPUSH
88690: PPUSH
88691: PPUSH
// if not mc_bases or not skirmish then
88692: LD_EXP 36
88696: NOT
88697: PUSH
88698: LD_EXP 34
88702: NOT
88703: OR
88704: IFFALSE 88708
// exit ;
88706: GO 89061
// repeat wait ( 0 0$1 ) ;
88708: LD_INT 35
88710: PPUSH
88711: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
88715: LD_VAR 0 2
88719: PPUSH
88720: LD_VAR 0 3
88724: PPUSH
88725: CALL_OW 284
88729: IFFALSE 88708
// if GetResourceTypeXY ( x , y ) = mat_artefact then
88731: LD_VAR 0 2
88735: PPUSH
88736: LD_VAR 0 3
88740: PPUSH
88741: CALL_OW 283
88745: PUSH
88746: LD_INT 4
88748: EQUAL
88749: IFFALSE 88753
// exit ;
88751: GO 89061
// for i = 1 to mc_bases do
88753: LD_ADDR_VAR 0 7
88757: PUSH
88758: DOUBLE
88759: LD_INT 1
88761: DEC
88762: ST_TO_ADDR
88763: LD_EXP 36
88767: PUSH
88768: FOR_TO
88769: IFFALSE 89059
// begin if mc_crates_area [ i ] then
88771: LD_EXP 54
88775: PUSH
88776: LD_VAR 0 7
88780: ARRAY
88781: IFFALSE 88892
// for j in mc_crates_area [ i ] do
88783: LD_ADDR_VAR 0 8
88787: PUSH
88788: LD_EXP 54
88792: PUSH
88793: LD_VAR 0 7
88797: ARRAY
88798: PUSH
88799: FOR_IN
88800: IFFALSE 88890
// if InArea ( x , y , j ) then
88802: LD_VAR 0 2
88806: PPUSH
88807: LD_VAR 0 3
88811: PPUSH
88812: LD_VAR 0 8
88816: PPUSH
88817: CALL_OW 309
88821: IFFALSE 88888
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
88823: LD_ADDR_EXP 52
88827: PUSH
88828: LD_EXP 52
88832: PPUSH
88833: LD_VAR 0 7
88837: PUSH
88838: LD_EXP 52
88842: PUSH
88843: LD_VAR 0 7
88847: ARRAY
88848: PUSH
88849: LD_INT 1
88851: PLUS
88852: PUSH
88853: EMPTY
88854: LIST
88855: LIST
88856: PPUSH
88857: LD_VAR 0 4
88861: PUSH
88862: LD_VAR 0 2
88866: PUSH
88867: LD_VAR 0 3
88871: PUSH
88872: EMPTY
88873: LIST
88874: LIST
88875: LIST
88876: PPUSH
88877: CALL 26426 0 3
88881: ST_TO_ADDR
// exit ;
88882: POP
88883: POP
88884: POP
88885: POP
88886: GO 89061
// end ;
88888: GO 88799
88890: POP
88891: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
88892: LD_ADDR_VAR 0 9
88896: PUSH
88897: LD_EXP 36
88901: PUSH
88902: LD_VAR 0 7
88906: ARRAY
88907: PPUSH
88908: LD_INT 2
88910: PUSH
88911: LD_INT 30
88913: PUSH
88914: LD_INT 0
88916: PUSH
88917: EMPTY
88918: LIST
88919: LIST
88920: PUSH
88921: LD_INT 30
88923: PUSH
88924: LD_INT 1
88926: PUSH
88927: EMPTY
88928: LIST
88929: LIST
88930: PUSH
88931: EMPTY
88932: LIST
88933: LIST
88934: LIST
88935: PPUSH
88936: CALL_OW 72
88940: ST_TO_ADDR
// if not depot then
88941: LD_VAR 0 9
88945: NOT
88946: IFFALSE 88950
// continue ;
88948: GO 88768
// for j in depot do
88950: LD_ADDR_VAR 0 8
88954: PUSH
88955: LD_VAR 0 9
88959: PUSH
88960: FOR_IN
88961: IFFALSE 89055
// if GetDistUnitXY ( j , x , y ) < 30 then
88963: LD_VAR 0 8
88967: PPUSH
88968: LD_VAR 0 2
88972: PPUSH
88973: LD_VAR 0 3
88977: PPUSH
88978: CALL_OW 297
88982: PUSH
88983: LD_INT 30
88985: LESS
88986: IFFALSE 89053
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
88988: LD_ADDR_EXP 52
88992: PUSH
88993: LD_EXP 52
88997: PPUSH
88998: LD_VAR 0 7
89002: PUSH
89003: LD_EXP 52
89007: PUSH
89008: LD_VAR 0 7
89012: ARRAY
89013: PUSH
89014: LD_INT 1
89016: PLUS
89017: PUSH
89018: EMPTY
89019: LIST
89020: LIST
89021: PPUSH
89022: LD_VAR 0 4
89026: PUSH
89027: LD_VAR 0 2
89031: PUSH
89032: LD_VAR 0 3
89036: PUSH
89037: EMPTY
89038: LIST
89039: LIST
89040: LIST
89041: PPUSH
89042: CALL 26426 0 3
89046: ST_TO_ADDR
// exit ;
89047: POP
89048: POP
89049: POP
89050: POP
89051: GO 89061
// end ;
89053: GO 88960
89055: POP
89056: POP
// end ;
89057: GO 88768
89059: POP
89060: POP
// end ;
89061: LD_VAR 0 6
89065: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
89066: LD_INT 0
89068: PPUSH
89069: PPUSH
89070: PPUSH
89071: PPUSH
// if not mc_bases or not skirmish then
89072: LD_EXP 36
89076: NOT
89077: PUSH
89078: LD_EXP 34
89082: NOT
89083: OR
89084: IFFALSE 89088
// exit ;
89086: GO 89365
// side := GetSide ( lab ) ;
89088: LD_ADDR_VAR 0 4
89092: PUSH
89093: LD_VAR 0 2
89097: PPUSH
89098: CALL_OW 255
89102: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
89103: LD_VAR 0 4
89107: PUSH
89108: LD_EXP 62
89112: IN
89113: NOT
89114: PUSH
89115: LD_EXP 63
89119: NOT
89120: OR
89121: PUSH
89122: LD_EXP 36
89126: NOT
89127: OR
89128: IFFALSE 89132
// exit ;
89130: GO 89365
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
89132: LD_ADDR_EXP 63
89136: PUSH
89137: LD_EXP 63
89141: PPUSH
89142: LD_VAR 0 4
89146: PPUSH
89147: LD_EXP 63
89151: PUSH
89152: LD_VAR 0 4
89156: ARRAY
89157: PUSH
89158: LD_VAR 0 1
89162: DIFF
89163: PPUSH
89164: CALL_OW 1
89168: ST_TO_ADDR
// for i = 1 to mc_bases do
89169: LD_ADDR_VAR 0 5
89173: PUSH
89174: DOUBLE
89175: LD_INT 1
89177: DEC
89178: ST_TO_ADDR
89179: LD_EXP 36
89183: PUSH
89184: FOR_TO
89185: IFFALSE 89363
// begin if lab in mc_bases [ i ] then
89187: LD_VAR 0 2
89191: PUSH
89192: LD_EXP 36
89196: PUSH
89197: LD_VAR 0 5
89201: ARRAY
89202: IN
89203: IFFALSE 89361
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
89205: LD_VAR 0 1
89209: PUSH
89210: LD_INT 11
89212: PUSH
89213: LD_INT 4
89215: PUSH
89216: LD_INT 3
89218: PUSH
89219: LD_INT 2
89221: PUSH
89222: EMPTY
89223: LIST
89224: LIST
89225: LIST
89226: LIST
89227: IN
89228: PUSH
89229: LD_EXP 66
89233: PUSH
89234: LD_VAR 0 5
89238: ARRAY
89239: AND
89240: IFFALSE 89361
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
89242: LD_ADDR_VAR 0 6
89246: PUSH
89247: LD_EXP 66
89251: PUSH
89252: LD_VAR 0 5
89256: ARRAY
89257: PUSH
89258: LD_INT 1
89260: ARRAY
89261: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
89262: LD_ADDR_EXP 66
89266: PUSH
89267: LD_EXP 66
89271: PPUSH
89272: LD_VAR 0 5
89276: PPUSH
89277: EMPTY
89278: PPUSH
89279: CALL_OW 1
89283: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
89284: LD_VAR 0 6
89288: PPUSH
89289: LD_INT 0
89291: PPUSH
89292: CALL_OW 109
// ComExitBuilding ( tmp ) ;
89296: LD_VAR 0 6
89300: PPUSH
89301: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
89305: LD_ADDR_EXP 65
89309: PUSH
89310: LD_EXP 65
89314: PPUSH
89315: LD_VAR 0 5
89319: PPUSH
89320: LD_EXP 65
89324: PUSH
89325: LD_VAR 0 5
89329: ARRAY
89330: PPUSH
89331: LD_INT 1
89333: PPUSH
89334: LD_VAR 0 6
89338: PPUSH
89339: CALL_OW 2
89343: PPUSH
89344: CALL_OW 1
89348: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
89349: LD_VAR 0 5
89353: PPUSH
89354: LD_INT 112
89356: PPUSH
89357: CALL 66473 0 2
// end ; end ; end ;
89361: GO 89184
89363: POP
89364: POP
// end ;
89365: LD_VAR 0 3
89369: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
89370: LD_INT 0
89372: PPUSH
89373: PPUSH
89374: PPUSH
89375: PPUSH
89376: PPUSH
89377: PPUSH
89378: PPUSH
89379: PPUSH
// if not mc_bases or not skirmish then
89380: LD_EXP 36
89384: NOT
89385: PUSH
89386: LD_EXP 34
89390: NOT
89391: OR
89392: IFFALSE 89396
// exit ;
89394: GO 90633
// for i = 1 to mc_bases do
89396: LD_ADDR_VAR 0 3
89400: PUSH
89401: DOUBLE
89402: LD_INT 1
89404: DEC
89405: ST_TO_ADDR
89406: LD_EXP 36
89410: PUSH
89411: FOR_TO
89412: IFFALSE 90631
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_defender [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
89414: LD_VAR 0 1
89418: PUSH
89419: LD_EXP 36
89423: PUSH
89424: LD_VAR 0 3
89428: ARRAY
89429: IN
89430: PUSH
89431: LD_VAR 0 1
89435: PUSH
89436: LD_EXP 43
89440: PUSH
89441: LD_VAR 0 3
89445: ARRAY
89446: IN
89447: OR
89448: PUSH
89449: LD_VAR 0 1
89453: PUSH
89454: LD_EXP 58
89458: PUSH
89459: LD_VAR 0 3
89463: ARRAY
89464: IN
89465: OR
89466: PUSH
89467: LD_VAR 0 1
89471: PUSH
89472: LD_EXP 55
89476: PUSH
89477: LD_VAR 0 3
89481: ARRAY
89482: IN
89483: OR
89484: PUSH
89485: LD_VAR 0 1
89489: PUSH
89490: LD_EXP 65
89494: PUSH
89495: LD_VAR 0 3
89499: ARRAY
89500: IN
89501: OR
89502: PUSH
89503: LD_VAR 0 1
89507: PUSH
89508: LD_EXP 66
89512: PUSH
89513: LD_VAR 0 3
89517: ARRAY
89518: IN
89519: OR
89520: IFFALSE 90629
// begin if un in mc_ape [ i ] then
89522: LD_VAR 0 1
89526: PUSH
89527: LD_EXP 65
89531: PUSH
89532: LD_VAR 0 3
89536: ARRAY
89537: IN
89538: IFFALSE 89577
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
89540: LD_ADDR_EXP 65
89544: PUSH
89545: LD_EXP 65
89549: PPUSH
89550: LD_VAR 0 3
89554: PPUSH
89555: LD_EXP 65
89559: PUSH
89560: LD_VAR 0 3
89564: ARRAY
89565: PUSH
89566: LD_VAR 0 1
89570: DIFF
89571: PPUSH
89572: CALL_OW 1
89576: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
89577: LD_VAR 0 1
89581: PUSH
89582: LD_EXP 66
89586: PUSH
89587: LD_VAR 0 3
89591: ARRAY
89592: IN
89593: IFFALSE 89617
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
89595: LD_ADDR_EXP 66
89599: PUSH
89600: LD_EXP 66
89604: PPUSH
89605: LD_VAR 0 3
89609: PPUSH
89610: EMPTY
89611: PPUSH
89612: CALL_OW 1
89616: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and ( GetTag ( un ) = 20 or un in mc_defender [ i ] or GetWeapon ( un ) in [ us_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , ar_cargo_bay , us_crane , ru_crane ] ) then
89617: LD_VAR 0 1
89621: PPUSH
89622: CALL_OW 247
89626: PUSH
89627: LD_INT 2
89629: EQUAL
89630: PUSH
89631: LD_VAR 0 1
89635: PPUSH
89636: CALL_OW 110
89640: PUSH
89641: LD_INT 20
89643: EQUAL
89644: PUSH
89645: LD_VAR 0 1
89649: PUSH
89650: LD_EXP 58
89654: PUSH
89655: LD_VAR 0 3
89659: ARRAY
89660: IN
89661: OR
89662: PUSH
89663: LD_VAR 0 1
89667: PPUSH
89668: CALL_OW 264
89672: PUSH
89673: LD_INT 12
89675: PUSH
89676: LD_INT 51
89678: PUSH
89679: LD_EXP 30
89683: PUSH
89684: LD_INT 32
89686: PUSH
89687: LD_INT 13
89689: PUSH
89690: LD_INT 52
89692: PUSH
89693: EMPTY
89694: LIST
89695: LIST
89696: LIST
89697: LIST
89698: LIST
89699: LIST
89700: IN
89701: OR
89702: AND
89703: IFFALSE 89881
// begin if un in mc_defender [ i ] then
89705: LD_VAR 0 1
89709: PUSH
89710: LD_EXP 58
89714: PUSH
89715: LD_VAR 0 3
89719: ARRAY
89720: IN
89721: IFFALSE 89760
// mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
89723: LD_ADDR_EXP 58
89727: PUSH
89728: LD_EXP 58
89732: PPUSH
89733: LD_VAR 0 3
89737: PPUSH
89738: LD_EXP 58
89742: PUSH
89743: LD_VAR 0 3
89747: ARRAY
89748: PUSH
89749: LD_VAR 0 1
89753: DIFF
89754: PPUSH
89755: CALL_OW 1
89759: ST_TO_ADDR
// fac := MC_GetBuildings ( i , b_factory ) ;
89760: LD_ADDR_VAR 0 8
89764: PUSH
89765: LD_VAR 0 3
89769: PPUSH
89770: LD_INT 3
89772: PPUSH
89773: CALL 86433 0 2
89777: ST_TO_ADDR
// if fac then
89778: LD_VAR 0 8
89782: IFFALSE 89881
// begin for j in fac do
89784: LD_ADDR_VAR 0 4
89788: PUSH
89789: LD_VAR 0 8
89793: PUSH
89794: FOR_IN
89795: IFFALSE 89879
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
89797: LD_ADDR_VAR 0 9
89801: PUSH
89802: LD_VAR 0 8
89806: PPUSH
89807: LD_VAR 0 1
89811: PPUSH
89812: CALL_OW 265
89816: PPUSH
89817: LD_VAR 0 1
89821: PPUSH
89822: CALL_OW 262
89826: PPUSH
89827: LD_VAR 0 1
89831: PPUSH
89832: CALL_OW 263
89836: PPUSH
89837: LD_VAR 0 1
89841: PPUSH
89842: CALL_OW 264
89846: PPUSH
89847: CALL 23958 0 5
89851: ST_TO_ADDR
// if components then
89852: LD_VAR 0 9
89856: IFFALSE 89877
// begin MC_InsertProduceList ( i , [ components ] ) ;
89858: LD_VAR 0 3
89862: PPUSH
89863: LD_VAR 0 9
89867: PUSH
89868: EMPTY
89869: LIST
89870: PPUSH
89871: CALL 85978 0 2
// break ;
89875: GO 89879
// end ; end ;
89877: GO 89794
89879: POP
89880: POP
// end ; end ; if GetType ( un ) = unit_building then
89881: LD_VAR 0 1
89885: PPUSH
89886: CALL_OW 247
89890: PUSH
89891: LD_INT 3
89893: EQUAL
89894: IFFALSE 90297
// begin btype := GetBType ( un ) ;
89896: LD_ADDR_VAR 0 5
89900: PUSH
89901: LD_VAR 0 1
89905: PPUSH
89906: CALL_OW 266
89910: ST_TO_ADDR
// if btype in [ b_oil_mine , b_siberite_mine ] then
89911: LD_VAR 0 5
89915: PUSH
89916: LD_INT 29
89918: PUSH
89919: LD_INT 30
89921: PUSH
89922: EMPTY
89923: LIST
89924: LIST
89925: IN
89926: IFFALSE 89999
// begin if not GetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) then
89928: LD_VAR 0 1
89932: PPUSH
89933: CALL_OW 250
89937: PPUSH
89938: LD_VAR 0 1
89942: PPUSH
89943: CALL_OW 251
89947: PPUSH
89948: LD_VAR 0 1
89952: PPUSH
89953: CALL_OW 255
89957: PPUSH
89958: CALL_OW 440
89962: NOT
89963: IFFALSE 89999
// SetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) ;
89965: LD_VAR 0 1
89969: PPUSH
89970: CALL_OW 250
89974: PPUSH
89975: LD_VAR 0 1
89979: PPUSH
89980: CALL_OW 251
89984: PPUSH
89985: LD_VAR 0 1
89989: PPUSH
89990: CALL_OW 255
89994: PPUSH
89995: CALL_OW 441
// end ; if btype = b_warehouse then
89999: LD_VAR 0 5
90003: PUSH
90004: LD_INT 1
90006: EQUAL
90007: IFFALSE 90025
// begin btype := b_depot ;
90009: LD_ADDR_VAR 0 5
90013: PUSH
90014: LD_INT 0
90016: ST_TO_ADDR
// pos := 1 ;
90017: LD_ADDR_VAR 0 6
90021: PUSH
90022: LD_INT 1
90024: ST_TO_ADDR
// end ; if btype = b_factory then
90025: LD_VAR 0 5
90029: PUSH
90030: LD_INT 3
90032: EQUAL
90033: IFFALSE 90051
// begin btype := b_workshop ;
90035: LD_ADDR_VAR 0 5
90039: PUSH
90040: LD_INT 2
90042: ST_TO_ADDR
// pos := 1 ;
90043: LD_ADDR_VAR 0 6
90047: PUSH
90048: LD_INT 1
90050: ST_TO_ADDR
// end ; if btype = b_barracks then
90051: LD_VAR 0 5
90055: PUSH
90056: LD_INT 5
90058: EQUAL
90059: IFFALSE 90069
// btype := b_armoury ;
90061: LD_ADDR_VAR 0 5
90065: PUSH
90066: LD_INT 4
90068: ST_TO_ADDR
// if btype in [ b_lab_half , b_lab_full ] then
90069: LD_VAR 0 5
90073: PUSH
90074: LD_INT 7
90076: PUSH
90077: LD_INT 8
90079: PUSH
90080: EMPTY
90081: LIST
90082: LIST
90083: IN
90084: IFFALSE 90094
// btype := b_lab ;
90086: LD_ADDR_VAR 0 5
90090: PUSH
90091: LD_INT 6
90093: ST_TO_ADDR
// mc_build_list := ReplaceIn ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
90094: LD_ADDR_EXP 41
90098: PUSH
90099: LD_EXP 41
90103: PPUSH
90104: LD_VAR 0 3
90108: PUSH
90109: LD_EXP 41
90113: PUSH
90114: LD_VAR 0 3
90118: ARRAY
90119: PUSH
90120: LD_INT 1
90122: PLUS
90123: PUSH
90124: EMPTY
90125: LIST
90126: LIST
90127: PPUSH
90128: LD_VAR 0 5
90132: PUSH
90133: LD_VAR 0 1
90137: PPUSH
90138: CALL_OW 250
90142: PUSH
90143: LD_VAR 0 1
90147: PPUSH
90148: CALL_OW 251
90152: PUSH
90153: LD_VAR 0 1
90157: PPUSH
90158: CALL_OW 254
90162: PUSH
90163: EMPTY
90164: LIST
90165: LIST
90166: LIST
90167: LIST
90168: PPUSH
90169: CALL 26426 0 3
90173: ST_TO_ADDR
// if pos = 1 then
90174: LD_VAR 0 6
90178: PUSH
90179: LD_INT 1
90181: EQUAL
90182: IFFALSE 90297
// begin tmp := mc_build_list [ i ] ;
90184: LD_ADDR_VAR 0 7
90188: PUSH
90189: LD_EXP 41
90193: PUSH
90194: LD_VAR 0 3
90198: ARRAY
90199: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
90200: LD_VAR 0 7
90204: PPUSH
90205: LD_INT 2
90207: PUSH
90208: LD_INT 30
90210: PUSH
90211: LD_INT 0
90213: PUSH
90214: EMPTY
90215: LIST
90216: LIST
90217: PUSH
90218: LD_INT 30
90220: PUSH
90221: LD_INT 1
90223: PUSH
90224: EMPTY
90225: LIST
90226: LIST
90227: PUSH
90228: EMPTY
90229: LIST
90230: LIST
90231: LIST
90232: PPUSH
90233: CALL_OW 72
90237: IFFALSE 90247
// pos := 2 ;
90239: LD_ADDR_VAR 0 6
90243: PUSH
90244: LD_INT 2
90246: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
90247: LD_ADDR_VAR 0 7
90251: PUSH
90252: LD_VAR 0 7
90256: PPUSH
90257: LD_VAR 0 6
90261: PPUSH
90262: LD_VAR 0 7
90266: PPUSH
90267: CALL 26752 0 3
90271: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
90272: LD_ADDR_EXP 41
90276: PUSH
90277: LD_EXP 41
90281: PPUSH
90282: LD_VAR 0 3
90286: PPUSH
90287: LD_VAR 0 7
90291: PPUSH
90292: CALL_OW 1
90296: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
90297: LD_VAR 0 1
90301: PUSH
90302: LD_EXP 36
90306: PUSH
90307: LD_VAR 0 3
90311: ARRAY
90312: IN
90313: IFFALSE 90352
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
90315: LD_ADDR_EXP 36
90319: PUSH
90320: LD_EXP 36
90324: PPUSH
90325: LD_VAR 0 3
90329: PPUSH
90330: LD_EXP 36
90334: PUSH
90335: LD_VAR 0 3
90339: ARRAY
90340: PUSH
90341: LD_VAR 0 1
90345: DIFF
90346: PPUSH
90347: CALL_OW 1
90351: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
90352: LD_VAR 0 1
90356: PUSH
90357: LD_EXP 43
90361: PUSH
90362: LD_VAR 0 3
90366: ARRAY
90367: IN
90368: IFFALSE 90407
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
90370: LD_ADDR_EXP 43
90374: PUSH
90375: LD_EXP 43
90379: PPUSH
90380: LD_VAR 0 3
90384: PPUSH
90385: LD_EXP 43
90389: PUSH
90390: LD_VAR 0 3
90394: ARRAY
90395: PUSH
90396: LD_VAR 0 1
90400: DIFF
90401: PPUSH
90402: CALL_OW 1
90406: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
90407: LD_VAR 0 1
90411: PUSH
90412: LD_EXP 55
90416: PUSH
90417: LD_VAR 0 3
90421: ARRAY
90422: IN
90423: IFFALSE 90462
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
90425: LD_ADDR_EXP 55
90429: PUSH
90430: LD_EXP 55
90434: PPUSH
90435: LD_VAR 0 3
90439: PPUSH
90440: LD_EXP 55
90444: PUSH
90445: LD_VAR 0 3
90449: ARRAY
90450: PUSH
90451: LD_VAR 0 1
90455: DIFF
90456: PPUSH
90457: CALL_OW 1
90461: ST_TO_ADDR
// end ; if un in mc_defender [ i ] then
90462: LD_VAR 0 1
90466: PUSH
90467: LD_EXP 58
90471: PUSH
90472: LD_VAR 0 3
90476: ARRAY
90477: IN
90478: IFFALSE 90517
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
90480: LD_ADDR_EXP 58
90484: PUSH
90485: LD_EXP 58
90489: PPUSH
90490: LD_VAR 0 3
90494: PPUSH
90495: LD_EXP 58
90499: PUSH
90500: LD_VAR 0 3
90504: ARRAY
90505: PUSH
90506: LD_VAR 0 1
90510: DIFF
90511: PPUSH
90512: CALL_OW 1
90516: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
90517: LD_VAR 0 1
90521: PUSH
90522: LD_EXP 45
90526: PUSH
90527: LD_VAR 0 3
90531: ARRAY
90532: IN
90533: IFFALSE 90572
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
90535: LD_ADDR_EXP 45
90539: PUSH
90540: LD_EXP 45
90544: PPUSH
90545: LD_VAR 0 3
90549: PPUSH
90550: LD_EXP 45
90554: PUSH
90555: LD_VAR 0 3
90559: ARRAY
90560: PUSH
90561: LD_VAR 0 1
90565: DIFF
90566: PPUSH
90567: CALL_OW 1
90571: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
90572: LD_VAR 0 1
90576: PUSH
90577: LD_EXP 44
90581: PUSH
90582: LD_VAR 0 3
90586: ARRAY
90587: IN
90588: IFFALSE 90627
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
90590: LD_ADDR_EXP 44
90594: PUSH
90595: LD_EXP 44
90599: PPUSH
90600: LD_VAR 0 3
90604: PPUSH
90605: LD_EXP 44
90609: PUSH
90610: LD_VAR 0 3
90614: ARRAY
90615: PUSH
90616: LD_VAR 0 1
90620: DIFF
90621: PPUSH
90622: CALL_OW 1
90626: ST_TO_ADDR
// end ; break ;
90627: GO 90631
// end ;
90629: GO 89411
90631: POP
90632: POP
// end ;
90633: LD_VAR 0 2
90637: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
90638: LD_INT 0
90640: PPUSH
90641: PPUSH
90642: PPUSH
// if not mc_bases or not skirmish then
90643: LD_EXP 36
90647: NOT
90648: PUSH
90649: LD_EXP 34
90653: NOT
90654: OR
90655: IFFALSE 90659
// exit ;
90657: GO 90874
// for i = 1 to mc_bases do
90659: LD_ADDR_VAR 0 3
90663: PUSH
90664: DOUBLE
90665: LD_INT 1
90667: DEC
90668: ST_TO_ADDR
90669: LD_EXP 36
90673: PUSH
90674: FOR_TO
90675: IFFALSE 90872
// begin if building in mc_construct_list [ i ] then
90677: LD_VAR 0 1
90681: PUSH
90682: LD_EXP 43
90686: PUSH
90687: LD_VAR 0 3
90691: ARRAY
90692: IN
90693: IFFALSE 90870
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
90695: LD_ADDR_EXP 43
90699: PUSH
90700: LD_EXP 43
90704: PPUSH
90705: LD_VAR 0 3
90709: PPUSH
90710: LD_EXP 43
90714: PUSH
90715: LD_VAR 0 3
90719: ARRAY
90720: PUSH
90721: LD_VAR 0 1
90725: DIFF
90726: PPUSH
90727: CALL_OW 1
90731: ST_TO_ADDR
// if building in mc_lab [ i ] then
90732: LD_VAR 0 1
90736: PUSH
90737: LD_EXP 69
90741: PUSH
90742: LD_VAR 0 3
90746: ARRAY
90747: IN
90748: IFFALSE 90803
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
90750: LD_ADDR_EXP 70
90754: PUSH
90755: LD_EXP 70
90759: PPUSH
90760: LD_VAR 0 3
90764: PPUSH
90765: LD_EXP 70
90769: PUSH
90770: LD_VAR 0 3
90774: ARRAY
90775: PPUSH
90776: LD_INT 1
90778: PPUSH
90779: LD_EXP 70
90783: PUSH
90784: LD_VAR 0 3
90788: ARRAY
90789: PPUSH
90790: LD_INT 0
90792: PPUSH
90793: CALL 25844 0 4
90797: PPUSH
90798: CALL_OW 1
90802: ST_TO_ADDR
// if not building in mc_bases [ i ] then
90803: LD_VAR 0 1
90807: PUSH
90808: LD_EXP 36
90812: PUSH
90813: LD_VAR 0 3
90817: ARRAY
90818: IN
90819: NOT
90820: IFFALSE 90866
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
90822: LD_ADDR_EXP 36
90826: PUSH
90827: LD_EXP 36
90831: PPUSH
90832: LD_VAR 0 3
90836: PUSH
90837: LD_EXP 36
90841: PUSH
90842: LD_VAR 0 3
90846: ARRAY
90847: PUSH
90848: LD_INT 1
90850: PLUS
90851: PUSH
90852: EMPTY
90853: LIST
90854: LIST
90855: PPUSH
90856: LD_VAR 0 1
90860: PPUSH
90861: CALL 26426 0 3
90865: ST_TO_ADDR
// exit ;
90866: POP
90867: POP
90868: GO 90874
// end ; end ;
90870: GO 90674
90872: POP
90873: POP
// end ;
90874: LD_VAR 0 2
90878: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
90879: LD_INT 0
90881: PPUSH
90882: PPUSH
90883: PPUSH
90884: PPUSH
90885: PPUSH
90886: PPUSH
90887: PPUSH
// if not mc_bases or not skirmish then
90888: LD_EXP 36
90892: NOT
90893: PUSH
90894: LD_EXP 34
90898: NOT
90899: OR
90900: IFFALSE 90904
// exit ;
90902: GO 91565
// for i = 1 to mc_bases do
90904: LD_ADDR_VAR 0 3
90908: PUSH
90909: DOUBLE
90910: LD_INT 1
90912: DEC
90913: ST_TO_ADDR
90914: LD_EXP 36
90918: PUSH
90919: FOR_TO
90920: IFFALSE 91563
// begin if building in mc_construct_list [ i ] then
90922: LD_VAR 0 1
90926: PUSH
90927: LD_EXP 43
90931: PUSH
90932: LD_VAR 0 3
90936: ARRAY
90937: IN
90938: IFFALSE 91561
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
90940: LD_ADDR_EXP 43
90944: PUSH
90945: LD_EXP 43
90949: PPUSH
90950: LD_VAR 0 3
90954: PPUSH
90955: LD_EXP 43
90959: PUSH
90960: LD_VAR 0 3
90964: ARRAY
90965: PUSH
90966: LD_VAR 0 1
90970: DIFF
90971: PPUSH
90972: CALL_OW 1
90976: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
90977: LD_ADDR_EXP 36
90981: PUSH
90982: LD_EXP 36
90986: PPUSH
90987: LD_VAR 0 3
90991: PUSH
90992: LD_EXP 36
90996: PUSH
90997: LD_VAR 0 3
91001: ARRAY
91002: PUSH
91003: LD_INT 1
91005: PLUS
91006: PUSH
91007: EMPTY
91008: LIST
91009: LIST
91010: PPUSH
91011: LD_VAR 0 1
91015: PPUSH
91016: CALL 26426 0 3
91020: ST_TO_ADDR
// btype := GetBType ( building ) ;
91021: LD_ADDR_VAR 0 5
91025: PUSH
91026: LD_VAR 0 1
91030: PPUSH
91031: CALL_OW 266
91035: ST_TO_ADDR
// side := GetSide ( building ) ;
91036: LD_ADDR_VAR 0 8
91040: PUSH
91041: LD_VAR 0 1
91045: PPUSH
91046: CALL_OW 255
91050: ST_TO_ADDR
// if btype = b_lab then
91051: LD_VAR 0 5
91055: PUSH
91056: LD_INT 6
91058: EQUAL
91059: IFFALSE 91109
// begin mc_lab := ReplaceIn ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
91061: LD_ADDR_EXP 69
91065: PUSH
91066: LD_EXP 69
91070: PPUSH
91071: LD_VAR 0 3
91075: PUSH
91076: LD_EXP 69
91080: PUSH
91081: LD_VAR 0 3
91085: ARRAY
91086: PUSH
91087: LD_INT 1
91089: PLUS
91090: PUSH
91091: EMPTY
91092: LIST
91093: LIST
91094: PPUSH
91095: LD_VAR 0 1
91099: PPUSH
91100: CALL 26426 0 3
91104: ST_TO_ADDR
// exit ;
91105: POP
91106: POP
91107: GO 91565
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
91109: LD_VAR 0 5
91113: PUSH
91114: LD_INT 0
91116: PUSH
91117: LD_INT 2
91119: PUSH
91120: LD_INT 4
91122: PUSH
91123: EMPTY
91124: LIST
91125: LIST
91126: LIST
91127: IN
91128: IFFALSE 91252
// begin if btype = b_armoury then
91130: LD_VAR 0 5
91134: PUSH
91135: LD_INT 4
91137: EQUAL
91138: IFFALSE 91148
// btype := b_barracks ;
91140: LD_ADDR_VAR 0 5
91144: PUSH
91145: LD_INT 5
91147: ST_TO_ADDR
// if btype = b_depot then
91148: LD_VAR 0 5
91152: PUSH
91153: LD_INT 0
91155: EQUAL
91156: IFFALSE 91166
// btype := b_warehouse ;
91158: LD_ADDR_VAR 0 5
91162: PUSH
91163: LD_INT 1
91165: ST_TO_ADDR
// if btype = b_workshop then
91166: LD_VAR 0 5
91170: PUSH
91171: LD_INT 2
91173: EQUAL
91174: IFFALSE 91184
// btype := b_factory ;
91176: LD_ADDR_VAR 0 5
91180: PUSH
91181: LD_INT 3
91183: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
91184: LD_VAR 0 5
91188: PPUSH
91189: LD_VAR 0 8
91193: PPUSH
91194: CALL_OW 323
91198: PUSH
91199: LD_INT 1
91201: EQUAL
91202: IFFALSE 91248
// mc_build_upgrade := ReplaceIn ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
91204: LD_ADDR_EXP 68
91208: PUSH
91209: LD_EXP 68
91213: PPUSH
91214: LD_VAR 0 3
91218: PUSH
91219: LD_EXP 68
91223: PUSH
91224: LD_VAR 0 3
91228: ARRAY
91229: PUSH
91230: LD_INT 1
91232: PLUS
91233: PUSH
91234: EMPTY
91235: LIST
91236: LIST
91237: PPUSH
91238: LD_VAR 0 1
91242: PPUSH
91243: CALL 26426 0 3
91247: ST_TO_ADDR
// exit ;
91248: POP
91249: POP
91250: GO 91565
// end ; if btype in [ b_bunker , b_turret ] then
91252: LD_VAR 0 5
91256: PUSH
91257: LD_INT 32
91259: PUSH
91260: LD_INT 33
91262: PUSH
91263: EMPTY
91264: LIST
91265: LIST
91266: IN
91267: IFFALSE 91557
// begin mc_turret_list := ReplaceIn ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
91269: LD_ADDR_EXP 44
91273: PUSH
91274: LD_EXP 44
91278: PPUSH
91279: LD_VAR 0 3
91283: PUSH
91284: LD_EXP 44
91288: PUSH
91289: LD_VAR 0 3
91293: ARRAY
91294: PUSH
91295: LD_INT 1
91297: PLUS
91298: PUSH
91299: EMPTY
91300: LIST
91301: LIST
91302: PPUSH
91303: LD_VAR 0 1
91307: PPUSH
91308: CALL 26426 0 3
91312: ST_TO_ADDR
// if btype = b_bunker then
91313: LD_VAR 0 5
91317: PUSH
91318: LD_INT 32
91320: EQUAL
91321: IFFALSE 91557
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
91323: LD_ADDR_EXP 45
91327: PUSH
91328: LD_EXP 45
91332: PPUSH
91333: LD_VAR 0 3
91337: PUSH
91338: LD_EXP 45
91342: PUSH
91343: LD_VAR 0 3
91347: ARRAY
91348: PUSH
91349: LD_INT 1
91351: PLUS
91352: PUSH
91353: EMPTY
91354: LIST
91355: LIST
91356: PPUSH
91357: LD_VAR 0 1
91361: PPUSH
91362: CALL 26426 0 3
91366: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
91367: LD_ADDR_VAR 0 6
91371: PUSH
91372: LD_EXP 36
91376: PUSH
91377: LD_VAR 0 3
91381: ARRAY
91382: PPUSH
91383: LD_INT 25
91385: PUSH
91386: LD_INT 1
91388: PUSH
91389: EMPTY
91390: LIST
91391: LIST
91392: PUSH
91393: LD_INT 3
91395: PUSH
91396: LD_INT 54
91398: PUSH
91399: EMPTY
91400: LIST
91401: PUSH
91402: EMPTY
91403: LIST
91404: LIST
91405: PUSH
91406: EMPTY
91407: LIST
91408: LIST
91409: PPUSH
91410: CALL_OW 72
91414: ST_TO_ADDR
// if tmp then
91415: LD_VAR 0 6
91419: IFFALSE 91425
// exit ;
91421: POP
91422: POP
91423: GO 91565
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
91425: LD_ADDR_VAR 0 6
91429: PUSH
91430: LD_EXP 36
91434: PUSH
91435: LD_VAR 0 3
91439: ARRAY
91440: PPUSH
91441: LD_INT 2
91443: PUSH
91444: LD_INT 30
91446: PUSH
91447: LD_INT 4
91449: PUSH
91450: EMPTY
91451: LIST
91452: LIST
91453: PUSH
91454: LD_INT 30
91456: PUSH
91457: LD_INT 5
91459: PUSH
91460: EMPTY
91461: LIST
91462: LIST
91463: PUSH
91464: EMPTY
91465: LIST
91466: LIST
91467: LIST
91468: PPUSH
91469: CALL_OW 72
91473: ST_TO_ADDR
// if not tmp then
91474: LD_VAR 0 6
91478: NOT
91479: IFFALSE 91485
// exit ;
91481: POP
91482: POP
91483: GO 91565
// for j in tmp do
91485: LD_ADDR_VAR 0 4
91489: PUSH
91490: LD_VAR 0 6
91494: PUSH
91495: FOR_IN
91496: IFFALSE 91555
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
91498: LD_ADDR_VAR 0 7
91502: PUSH
91503: LD_VAR 0 4
91507: PPUSH
91508: CALL_OW 313
91512: PPUSH
91513: LD_INT 25
91515: PUSH
91516: LD_INT 1
91518: PUSH
91519: EMPTY
91520: LIST
91521: LIST
91522: PPUSH
91523: CALL_OW 72
91527: ST_TO_ADDR
// if units then
91528: LD_VAR 0 7
91532: IFFALSE 91553
// begin ComExitBuilding ( units [ 1 ] ) ;
91534: LD_VAR 0 7
91538: PUSH
91539: LD_INT 1
91541: ARRAY
91542: PPUSH
91543: CALL_OW 122
// exit ;
91547: POP
91548: POP
91549: POP
91550: POP
91551: GO 91565
// end ; end ;
91553: GO 91495
91555: POP
91556: POP
// end ; end ; exit ;
91557: POP
91558: POP
91559: GO 91565
// end ; end ;
91561: GO 90919
91563: POP
91564: POP
// end ;
91565: LD_VAR 0 2
91569: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
91570: LD_INT 0
91572: PPUSH
91573: PPUSH
91574: PPUSH
91575: PPUSH
91576: PPUSH
91577: PPUSH
91578: PPUSH
// if not mc_bases or not skirmish then
91579: LD_EXP 36
91583: NOT
91584: PUSH
91585: LD_EXP 34
91589: NOT
91590: OR
91591: IFFALSE 91595
// exit ;
91593: GO 91826
// btype := GetBType ( building ) ;
91595: LD_ADDR_VAR 0 6
91599: PUSH
91600: LD_VAR 0 1
91604: PPUSH
91605: CALL_OW 266
91609: ST_TO_ADDR
// x := GetX ( building ) ;
91610: LD_ADDR_VAR 0 7
91614: PUSH
91615: LD_VAR 0 1
91619: PPUSH
91620: CALL_OW 250
91624: ST_TO_ADDR
// y := GetY ( building ) ;
91625: LD_ADDR_VAR 0 8
91629: PUSH
91630: LD_VAR 0 1
91634: PPUSH
91635: CALL_OW 251
91639: ST_TO_ADDR
// d := GetDir ( building ) ;
91640: LD_ADDR_VAR 0 9
91644: PUSH
91645: LD_VAR 0 1
91649: PPUSH
91650: CALL_OW 254
91654: ST_TO_ADDR
// for i = 1 to mc_bases do
91655: LD_ADDR_VAR 0 4
91659: PUSH
91660: DOUBLE
91661: LD_INT 1
91663: DEC
91664: ST_TO_ADDR
91665: LD_EXP 36
91669: PUSH
91670: FOR_TO
91671: IFFALSE 91824
// begin if not mc_build_list [ i ] then
91673: LD_EXP 41
91677: PUSH
91678: LD_VAR 0 4
91682: ARRAY
91683: NOT
91684: IFFALSE 91688
// continue ;
91686: GO 91670
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
91688: LD_VAR 0 6
91692: PUSH
91693: LD_VAR 0 7
91697: PUSH
91698: LD_VAR 0 8
91702: PUSH
91703: LD_VAR 0 9
91707: PUSH
91708: EMPTY
91709: LIST
91710: LIST
91711: LIST
91712: LIST
91713: PPUSH
91714: LD_EXP 41
91718: PUSH
91719: LD_VAR 0 4
91723: ARRAY
91724: PUSH
91725: LD_INT 1
91727: ARRAY
91728: PPUSH
91729: CALL 32595 0 2
91733: IFFALSE 91822
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
91735: LD_ADDR_EXP 41
91739: PUSH
91740: LD_EXP 41
91744: PPUSH
91745: LD_VAR 0 4
91749: PPUSH
91750: LD_EXP 41
91754: PUSH
91755: LD_VAR 0 4
91759: ARRAY
91760: PPUSH
91761: LD_INT 1
91763: PPUSH
91764: CALL_OW 3
91768: PPUSH
91769: CALL_OW 1
91773: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
91774: LD_ADDR_EXP 43
91778: PUSH
91779: LD_EXP 43
91783: PPUSH
91784: LD_VAR 0 4
91788: PUSH
91789: LD_EXP 43
91793: PUSH
91794: LD_VAR 0 4
91798: ARRAY
91799: PUSH
91800: LD_INT 1
91802: PLUS
91803: PUSH
91804: EMPTY
91805: LIST
91806: LIST
91807: PPUSH
91808: LD_VAR 0 1
91812: PPUSH
91813: CALL 26426 0 3
91817: ST_TO_ADDR
// exit ;
91818: POP
91819: POP
91820: GO 91826
// end ; end ;
91822: GO 91670
91824: POP
91825: POP
// end ;
91826: LD_VAR 0 3
91830: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
91831: LD_INT 0
91833: PPUSH
91834: PPUSH
91835: PPUSH
// if not mc_bases or not skirmish then
91836: LD_EXP 36
91840: NOT
91841: PUSH
91842: LD_EXP 34
91846: NOT
91847: OR
91848: IFFALSE 91852
// exit ;
91850: GO 92042
// for i = 1 to mc_bases do
91852: LD_ADDR_VAR 0 4
91856: PUSH
91857: DOUBLE
91858: LD_INT 1
91860: DEC
91861: ST_TO_ADDR
91862: LD_EXP 36
91866: PUSH
91867: FOR_TO
91868: IFFALSE 91955
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
91870: LD_VAR 0 1
91874: PUSH
91875: LD_EXP 44
91879: PUSH
91880: LD_VAR 0 4
91884: ARRAY
91885: IN
91886: PUSH
91887: LD_VAR 0 1
91891: PUSH
91892: LD_EXP 45
91896: PUSH
91897: LD_VAR 0 4
91901: ARRAY
91902: IN
91903: NOT
91904: AND
91905: IFFALSE 91953
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
91907: LD_ADDR_EXP 45
91911: PUSH
91912: LD_EXP 45
91916: PPUSH
91917: LD_VAR 0 4
91921: PUSH
91922: LD_EXP 45
91926: PUSH
91927: LD_VAR 0 4
91931: ARRAY
91932: PUSH
91933: LD_INT 1
91935: PLUS
91936: PUSH
91937: EMPTY
91938: LIST
91939: LIST
91940: PPUSH
91941: LD_VAR 0 1
91945: PPUSH
91946: CALL 26426 0 3
91950: ST_TO_ADDR
// break ;
91951: GO 91955
// end ; end ;
91953: GO 91867
91955: POP
91956: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
91957: LD_VAR 0 1
91961: PPUSH
91962: CALL_OW 257
91966: PUSH
91967: LD_EXP 62
91971: IN
91972: PUSH
91973: LD_VAR 0 1
91977: PPUSH
91978: CALL_OW 266
91982: PUSH
91983: LD_INT 5
91985: EQUAL
91986: AND
91987: PUSH
91988: LD_VAR 0 2
91992: PPUSH
91993: CALL_OW 110
91997: PUSH
91998: LD_INT 18
92000: NONEQUAL
92001: AND
92002: IFFALSE 92042
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
92004: LD_VAR 0 2
92008: PPUSH
92009: CALL_OW 257
92013: PUSH
92014: LD_INT 5
92016: PUSH
92017: LD_INT 8
92019: PUSH
92020: LD_INT 9
92022: PUSH
92023: EMPTY
92024: LIST
92025: LIST
92026: LIST
92027: IN
92028: IFFALSE 92042
// SetClass ( unit , 1 ) ;
92030: LD_VAR 0 2
92034: PPUSH
92035: LD_INT 1
92037: PPUSH
92038: CALL_OW 336
// end ;
92042: LD_VAR 0 3
92046: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
92047: LD_INT 0
92049: PPUSH
92050: PPUSH
// if not mc_bases or not skirmish then
92051: LD_EXP 36
92055: NOT
92056: PUSH
92057: LD_EXP 34
92061: NOT
92062: OR
92063: IFFALSE 92067
// exit ;
92065: GO 92183
// if GetLives ( abandoned_vehicle ) > 250 then
92067: LD_VAR 0 2
92071: PPUSH
92072: CALL_OW 256
92076: PUSH
92077: LD_INT 250
92079: GREATER
92080: IFFALSE 92084
// exit ;
92082: GO 92183
// for i = 1 to mc_bases do
92084: LD_ADDR_VAR 0 6
92088: PUSH
92089: DOUBLE
92090: LD_INT 1
92092: DEC
92093: ST_TO_ADDR
92094: LD_EXP 36
92098: PUSH
92099: FOR_TO
92100: IFFALSE 92181
// begin if driver in mc_bases [ i ] then
92102: LD_VAR 0 1
92106: PUSH
92107: LD_EXP 36
92111: PUSH
92112: LD_VAR 0 6
92116: ARRAY
92117: IN
92118: IFFALSE 92179
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
92120: LD_VAR 0 1
92124: PPUSH
92125: LD_EXP 36
92129: PUSH
92130: LD_VAR 0 6
92134: ARRAY
92135: PPUSH
92136: LD_INT 2
92138: PUSH
92139: LD_INT 30
92141: PUSH
92142: LD_INT 0
92144: PUSH
92145: EMPTY
92146: LIST
92147: LIST
92148: PUSH
92149: LD_INT 30
92151: PUSH
92152: LD_INT 1
92154: PUSH
92155: EMPTY
92156: LIST
92157: LIST
92158: PUSH
92159: EMPTY
92160: LIST
92161: LIST
92162: LIST
92163: PPUSH
92164: CALL_OW 72
92168: PUSH
92169: LD_INT 1
92171: ARRAY
92172: PPUSH
92173: CALL_OW 112
// break ;
92177: GO 92181
// end ; end ;
92179: GO 92099
92181: POP
92182: POP
// end ; end_of_file end_of_file end_of_file
92183: LD_VAR 0 5
92187: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; var i , eff , side ; begin
92188: LD_INT 0
92190: PPUSH
92191: PPUSH
92192: PPUSH
92193: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
92194: LD_VAR 0 1
92198: PPUSH
92199: CALL_OW 264
92203: PUSH
92204: LD_EXP 33
92208: EQUAL
92209: IFFALSE 92281
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
92211: LD_INT 68
92213: PPUSH
92214: LD_VAR 0 1
92218: PPUSH
92219: CALL_OW 255
92223: PPUSH
92224: CALL_OW 321
92228: PUSH
92229: LD_INT 2
92231: EQUAL
92232: IFFALSE 92244
// eff := 70 else
92234: LD_ADDR_VAR 0 6
92238: PUSH
92239: LD_INT 70
92241: ST_TO_ADDR
92242: GO 92252
// eff := 30 ;
92244: LD_ADDR_VAR 0 6
92248: PUSH
92249: LD_INT 30
92251: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
92252: LD_VAR 0 1
92256: PPUSH
92257: CALL_OW 250
92261: PPUSH
92262: LD_VAR 0 1
92266: PPUSH
92267: CALL_OW 251
92271: PPUSH
92272: LD_VAR 0 6
92276: PPUSH
92277: CALL_OW 495
// end ; end ;
92281: LD_VAR 0 4
92285: RET
// export function SOS_Command ( cmd ) ; var i , j , tmp , taskList , _taskList ; begin
92286: LD_INT 0
92288: PPUSH
92289: PPUSH
92290: PPUSH
92291: PPUSH
92292: PPUSH
92293: PPUSH
// if cmd = 124 then
92294: LD_VAR 0 1
92298: PUSH
92299: LD_INT 124
92301: EQUAL
92302: IFFALSE 92508
// begin tmp := FilterAllUnits ( [ f_or , [ f_weapon , ru_bulldozer ] , [ f_weapon , us_bulldozer ] ] ) ;
92304: LD_ADDR_VAR 0 5
92308: PUSH
92309: LD_INT 2
92311: PUSH
92312: LD_INT 34
92314: PUSH
92315: LD_INT 53
92317: PUSH
92318: EMPTY
92319: LIST
92320: LIST
92321: PUSH
92322: LD_INT 34
92324: PUSH
92325: LD_INT 14
92327: PUSH
92328: EMPTY
92329: LIST
92330: LIST
92331: PUSH
92332: EMPTY
92333: LIST
92334: LIST
92335: LIST
92336: PPUSH
92337: CALL_OW 69
92341: ST_TO_ADDR
// if not tmp then
92342: LD_VAR 0 5
92346: NOT
92347: IFFALSE 92351
// exit ;
92349: GO 92508
// for i in tmp do
92351: LD_ADDR_VAR 0 3
92355: PUSH
92356: LD_VAR 0 5
92360: PUSH
92361: FOR_IN
92362: IFFALSE 92506
// begin taskList := GetTaskList ( i ) ;
92364: LD_ADDR_VAR 0 6
92368: PUSH
92369: LD_VAR 0 3
92373: PPUSH
92374: CALL_OW 437
92378: ST_TO_ADDR
// if not taskList then
92379: LD_VAR 0 6
92383: NOT
92384: IFFALSE 92388
// continue ;
92386: GO 92361
// for j = 1 to taskList do
92388: LD_ADDR_VAR 0 4
92392: PUSH
92393: DOUBLE
92394: LD_INT 1
92396: DEC
92397: ST_TO_ADDR
92398: LD_VAR 0 6
92402: PUSH
92403: FOR_TO
92404: IFFALSE 92502
// if taskList [ j ] [ 1 ] = | then
92406: LD_VAR 0 6
92410: PUSH
92411: LD_VAR 0 4
92415: ARRAY
92416: PUSH
92417: LD_INT 1
92419: ARRAY
92420: PUSH
92421: LD_STRING |
92423: EQUAL
92424: IFFALSE 92500
// begin _taskList := Delete ( taskList , 1 ) ;
92426: LD_ADDR_VAR 0 7
92430: PUSH
92431: LD_VAR 0 6
92435: PPUSH
92436: LD_INT 1
92438: PPUSH
92439: CALL_OW 3
92443: ST_TO_ADDR
// SetTaskList ( i , _taskList ) ;
92444: LD_VAR 0 3
92448: PPUSH
92449: LD_VAR 0 7
92453: PPUSH
92454: CALL_OW 446
// CutTreeXYR ( i , taskList [ j ] [ 2 ] , taskList [ j ] [ 3 ] , 8 ) ;
92458: LD_VAR 0 3
92462: PPUSH
92463: LD_VAR 0 6
92467: PUSH
92468: LD_VAR 0 4
92472: ARRAY
92473: PUSH
92474: LD_INT 2
92476: ARRAY
92477: PPUSH
92478: LD_VAR 0 6
92482: PUSH
92483: LD_VAR 0 4
92487: ARRAY
92488: PUSH
92489: LD_INT 3
92491: ARRAY
92492: PPUSH
92493: LD_INT 8
92495: PPUSH
92496: CALL 92513 0 4
// end ;
92500: GO 92403
92502: POP
92503: POP
// end ;
92504: GO 92361
92506: POP
92507: POP
// end ; end ;
92508: LD_VAR 0 2
92512: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
92513: LD_INT 0
92515: PPUSH
92516: PPUSH
92517: PPUSH
92518: PPUSH
92519: PPUSH
92520: PPUSH
92521: PPUSH
92522: PPUSH
92523: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
92524: LD_VAR 0 1
92528: NOT
92529: PUSH
92530: LD_VAR 0 2
92534: PPUSH
92535: LD_VAR 0 3
92539: PPUSH
92540: CALL_OW 488
92544: NOT
92545: OR
92546: PUSH
92547: LD_VAR 0 4
92551: NOT
92552: OR
92553: IFFALSE 92557
// exit ;
92555: GO 92897
// list := [ ] ;
92557: LD_ADDR_VAR 0 13
92561: PUSH
92562: EMPTY
92563: ST_TO_ADDR
// if x - r < 0 then
92564: LD_VAR 0 2
92568: PUSH
92569: LD_VAR 0 4
92573: MINUS
92574: PUSH
92575: LD_INT 0
92577: LESS
92578: IFFALSE 92590
// min_x := 0 else
92580: LD_ADDR_VAR 0 7
92584: PUSH
92585: LD_INT 0
92587: ST_TO_ADDR
92588: GO 92606
// min_x := x - r ;
92590: LD_ADDR_VAR 0 7
92594: PUSH
92595: LD_VAR 0 2
92599: PUSH
92600: LD_VAR 0 4
92604: MINUS
92605: ST_TO_ADDR
// if y - r < 0 then
92606: LD_VAR 0 3
92610: PUSH
92611: LD_VAR 0 4
92615: MINUS
92616: PUSH
92617: LD_INT 0
92619: LESS
92620: IFFALSE 92632
// min_y := 0 else
92622: LD_ADDR_VAR 0 8
92626: PUSH
92627: LD_INT 0
92629: ST_TO_ADDR
92630: GO 92648
// min_y := y - r ;
92632: LD_ADDR_VAR 0 8
92636: PUSH
92637: LD_VAR 0 3
92641: PUSH
92642: LD_VAR 0 4
92646: MINUS
92647: ST_TO_ADDR
// max_x := x + r ;
92648: LD_ADDR_VAR 0 9
92652: PUSH
92653: LD_VAR 0 2
92657: PUSH
92658: LD_VAR 0 4
92662: PLUS
92663: ST_TO_ADDR
// max_y := y + r ;
92664: LD_ADDR_VAR 0 10
92668: PUSH
92669: LD_VAR 0 3
92673: PUSH
92674: LD_VAR 0 4
92678: PLUS
92679: ST_TO_ADDR
// for _x = min_x to max_x do
92680: LD_ADDR_VAR 0 11
92684: PUSH
92685: DOUBLE
92686: LD_VAR 0 7
92690: DEC
92691: ST_TO_ADDR
92692: LD_VAR 0 9
92696: PUSH
92697: FOR_TO
92698: IFFALSE 92815
// for _y = min_y to max_y do
92700: LD_ADDR_VAR 0 12
92704: PUSH
92705: DOUBLE
92706: LD_VAR 0 8
92710: DEC
92711: ST_TO_ADDR
92712: LD_VAR 0 10
92716: PUSH
92717: FOR_TO
92718: IFFALSE 92811
// begin if not ValidHex ( _x , _y ) then
92720: LD_VAR 0 11
92724: PPUSH
92725: LD_VAR 0 12
92729: PPUSH
92730: CALL_OW 488
92734: NOT
92735: IFFALSE 92739
// continue ;
92737: GO 92717
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
92739: LD_VAR 0 11
92743: PPUSH
92744: LD_VAR 0 12
92748: PPUSH
92749: CALL_OW 351
92753: PUSH
92754: LD_VAR 0 11
92758: PPUSH
92759: LD_VAR 0 12
92763: PPUSH
92764: CALL_OW 554
92768: AND
92769: IFFALSE 92809
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
92771: LD_ADDR_VAR 0 13
92775: PUSH
92776: LD_VAR 0 13
92780: PPUSH
92781: LD_VAR 0 13
92785: PUSH
92786: LD_INT 1
92788: PLUS
92789: PPUSH
92790: LD_VAR 0 11
92794: PUSH
92795: LD_VAR 0 12
92799: PUSH
92800: EMPTY
92801: LIST
92802: LIST
92803: PPUSH
92804: CALL_OW 2
92808: ST_TO_ADDR
// end ;
92809: GO 92717
92811: POP
92812: POP
92813: GO 92697
92815: POP
92816: POP
// if not list then
92817: LD_VAR 0 13
92821: NOT
92822: IFFALSE 92826
// exit ;
92824: GO 92897
// for i in list do
92826: LD_ADDR_VAR 0 6
92830: PUSH
92831: LD_VAR 0 13
92835: PUSH
92836: FOR_IN
92837: IFFALSE 92895
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
92839: LD_VAR 0 1
92843: PPUSH
92844: LD_STRING M
92846: PUSH
92847: LD_VAR 0 6
92851: PUSH
92852: LD_INT 1
92854: ARRAY
92855: PUSH
92856: LD_VAR 0 6
92860: PUSH
92861: LD_INT 2
92863: ARRAY
92864: PUSH
92865: LD_INT 0
92867: PUSH
92868: LD_INT 0
92870: PUSH
92871: LD_INT 0
92873: PUSH
92874: LD_INT 0
92876: PUSH
92877: EMPTY
92878: LIST
92879: LIST
92880: LIST
92881: LIST
92882: LIST
92883: LIST
92884: LIST
92885: PUSH
92886: EMPTY
92887: LIST
92888: PPUSH
92889: CALL_OW 447
92893: GO 92836
92895: POP
92896: POP
// end ;
92897: LD_VAR 0 5
92901: RET
