// starting begin ResetFog ;
   0: CALL_OW 335
// InitSettings ;
   4: CALL 44 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 31
// begin PlaceSeeing ( 1 , 1 , 1 , - 372963 ) ;
  14: LD_INT 1
  16: PPUSH
  17: LD_INT 1
  19: PPUSH
  20: LD_INT 1
  22: PPUSH
  23: LD_INT 372963
  25: NEG
  26: PPUSH
  27: CALL_OW 330
// end ; SetTechnologies ;
  31: CALL 618 0 0
// SetDiplomacy ;
  35: CALL 830 0 0
// PrepareGame ;
  39: CALL 912 0 0
// end ;
  43: END
// export debug , GameType , game , disableGlobalTimer ; export mc_amer , mc_leg , mc_rus_1 , mc_rus_2 ; export playerCommander , playerForces , allyCommander , Powell , Farmer , ruOutpost , ruEscape , staticMines , baseCaptured , legDestCounter , cratesSpawns , legOfferAccepted , legChangeSide , allyDestCounter , sibBombAllowed , reinforceAllowed , commander , cratesSpawn , outpostEscape , dialogueMineDetected ; end_of_file export function InitSettings ; begin
  44: LD_INT 0
  46: PPUSH
// debug := 0 ;
  47: LD_ADDR_EXP 1
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// GameType := 1 ;
  55: LD_ADDR_EXP 2
  59: PUSH
  60: LD_INT 1
  62: ST_TO_ADDR
// Difficulty := GetMultiplayerSetting ( 0 ) + 1 ;
  63: LD_ADDR_OWVAR 67
  67: PUSH
  68: LD_INT 0
  70: PPUSH
  71: CALL_OW 426
  75: PUSH
  76: LD_INT 1
  78: PLUS
  79: ST_TO_ADDR
// if not Difficulty or debug then
  80: LD_OWVAR 67
  84: NOT
  85: PUSH
  86: LD_EXP 1
  90: OR
  91: IFFALSE 101
// Difficulty := 2 ;
  93: LD_ADDR_OWVAR 67
  97: PUSH
  98: LD_INT 2
 100: ST_TO_ADDR
// sibBombAllowed := GetMultiPlayerSetting ( 1 ) ;
 101: LD_ADDR_EXP 23
 105: PUSH
 106: LD_INT 1
 108: PPUSH
 109: CALL_OW 426
 113: ST_TO_ADDR
// reinforceAllowed := GetMultiPlayerSetting ( 2 ) ;
 114: LD_ADDR_EXP 24
 118: PUSH
 119: LD_INT 2
 121: PPUSH
 122: CALL_OW 426
 126: ST_TO_ADDR
// cratesSpawn := GetMultiPlayerSetting ( 3 ) + 1 ;
 127: LD_ADDR_EXP 26
 131: PUSH
 132: LD_INT 3
 134: PPUSH
 135: CALL_OW 426
 139: PUSH
 140: LD_INT 1
 142: PLUS
 143: ST_TO_ADDR
// if not cratesSpawn then
 144: LD_EXP 26
 148: NOT
 149: IFFALSE 159
// cratesSpawn := 2 ;
 151: LD_ADDR_EXP 26
 155: PUSH
 156: LD_INT 2
 158: ST_TO_ADDR
// if not commander then
 159: LD_EXP 25
 163: NOT
 164: IFFALSE 174
// commander := 3 ;
 166: LD_ADDR_EXP 25
 170: PUSH
 171: LD_INT 3
 173: ST_TO_ADDR
// if not debug then
 174: LD_EXP 1
 178: NOT
 179: IFFALSE 183
// exit ;
 181: GO 240
// display_strings := [ Difficulty:  & Difficulty , sibBomb:  & sibBombAllowed , reinforceAllowed:  & reinforceAllowed , cratesSpawn:  & cratesSpawn , commander:  & commander ] ;
 183: LD_ADDR_OWVAR 47
 187: PUSH
 188: LD_STRING Difficulty: 
 190: PUSH
 191: LD_OWVAR 67
 195: STR
 196: PUSH
 197: LD_STRING sibBomb: 
 199: PUSH
 200: LD_EXP 23
 204: STR
 205: PUSH
 206: LD_STRING reinforceAllowed: 
 208: PUSH
 209: LD_EXP 24
 213: STR
 214: PUSH
 215: LD_STRING cratesSpawn: 
 217: PUSH
 218: LD_EXP 26
 222: STR
 223: PUSH
 224: LD_STRING commander: 
 226: PUSH
 227: LD_EXP 25
 231: STR
 232: PUSH
 233: EMPTY
 234: LIST
 235: LIST
 236: LIST
 237: LIST
 238: LIST
 239: ST_TO_ADDR
// end ;
 240: LD_VAR 0 1
 244: RET
// every 0 0$1 trigger game and GameType = 1 and not disableGlobalTimer do
 245: LD_EXP 3
 249: PUSH
 250: LD_EXP 2
 254: PUSH
 255: LD_INT 1
 257: EQUAL
 258: AND
 259: PUSH
 260: LD_EXP 4
 264: NOT
 265: AND
 266: IFFALSE 289
 268: GO 270
 270: DISABLE
// begin enable ;
 271: ENABLE
// display_strings := [ #SkrTime , tick ] ;
 272: LD_ADDR_OWVAR 47
 276: PUSH
 277: LD_STRING #SkrTime
 279: PUSH
 280: LD_OWVAR 1
 284: PUSH
 285: EMPTY
 286: LIST
 287: LIST
 288: ST_TO_ADDR
// end ;
 289: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 290: LD_EXP 19
 294: PUSH
 295: LD_EXP 3
 299: AND
 300: PUSH
 301: LD_EXP 2
 305: PUSH
 306: LD_INT 1
 308: EQUAL
 309: AND
 310: IFFALSE 371
 312: GO 314
 314: DISABLE
// Crates ( cratesSpawns [ 1 ] [ 1 ] , cratesSpawns [ 1 ] [ 2 ] , cratesSpawns [ 1 ] [ 3 ] , cratesSpawns [ 1 ] [ 4 ] ) ;
 315: LD_EXP 19
 319: PUSH
 320: LD_INT 1
 322: ARRAY
 323: PUSH
 324: LD_INT 1
 326: ARRAY
 327: PPUSH
 328: LD_EXP 19
 332: PUSH
 333: LD_INT 1
 335: ARRAY
 336: PUSH
 337: LD_INT 2
 339: ARRAY
 340: PPUSH
 341: LD_EXP 19
 345: PUSH
 346: LD_INT 1
 348: ARRAY
 349: PUSH
 350: LD_INT 3
 352: ARRAY
 353: PPUSH
 354: LD_EXP 19
 358: PUSH
 359: LD_INT 1
 361: ARRAY
 362: PUSH
 363: LD_INT 4
 365: ARRAY
 366: PPUSH
 367: CALL 61479 0 4
 371: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 372: LD_EXP 19
 376: PUSH
 377: LD_EXP 3
 381: AND
 382: PUSH
 383: LD_EXP 2
 387: PUSH
 388: LD_INT 1
 390: EQUAL
 391: AND
 392: IFFALSE 453
 394: GO 396
 396: DISABLE
// Crates ( cratesSpawns [ 2 ] [ 1 ] , cratesSpawns [ 2 ] [ 2 ] , cratesSpawns [ 2 ] [ 3 ] , cratesSpawns [ 2 ] [ 4 ] ) ;
 397: LD_EXP 19
 401: PUSH
 402: LD_INT 2
 404: ARRAY
 405: PUSH
 406: LD_INT 1
 408: ARRAY
 409: PPUSH
 410: LD_EXP 19
 414: PUSH
 415: LD_INT 2
 417: ARRAY
 418: PUSH
 419: LD_INT 2
 421: ARRAY
 422: PPUSH
 423: LD_EXP 19
 427: PUSH
 428: LD_INT 2
 430: ARRAY
 431: PUSH
 432: LD_INT 3
 434: ARRAY
 435: PPUSH
 436: LD_EXP 19
 440: PUSH
 441: LD_INT 2
 443: ARRAY
 444: PUSH
 445: LD_INT 4
 447: ARRAY
 448: PPUSH
 449: CALL 61479 0 4
 453: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 454: LD_EXP 19
 458: PUSH
 459: LD_EXP 3
 463: AND
 464: PUSH
 465: LD_EXP 2
 469: PUSH
 470: LD_INT 1
 472: EQUAL
 473: AND
 474: IFFALSE 535
 476: GO 478
 478: DISABLE
// Crates ( cratesSpawns [ 3 ] [ 1 ] , cratesSpawns [ 3 ] [ 2 ] , cratesSpawns [ 3 ] [ 3 ] , cratesSpawns [ 3 ] [ 4 ] ) ;
 479: LD_EXP 19
 483: PUSH
 484: LD_INT 3
 486: ARRAY
 487: PUSH
 488: LD_INT 1
 490: ARRAY
 491: PPUSH
 492: LD_EXP 19
 496: PUSH
 497: LD_INT 3
 499: ARRAY
 500: PUSH
 501: LD_INT 2
 503: ARRAY
 504: PPUSH
 505: LD_EXP 19
 509: PUSH
 510: LD_INT 3
 512: ARRAY
 513: PUSH
 514: LD_INT 3
 516: ARRAY
 517: PPUSH
 518: LD_EXP 19
 522: PUSH
 523: LD_INT 3
 525: ARRAY
 526: PUSH
 527: LD_INT 4
 529: ARRAY
 530: PPUSH
 531: CALL 61479 0 4
 535: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 536: LD_EXP 19
 540: PUSH
 541: LD_EXP 3
 545: AND
 546: PUSH
 547: LD_EXP 2
 551: PUSH
 552: LD_INT 1
 554: EQUAL
 555: AND
 556: IFFALSE 617
 558: GO 560
 560: DISABLE
// Crates ( cratesSpawns [ 4 ] [ 1 ] , cratesSpawns [ 4 ] [ 2 ] , cratesSpawns [ 4 ] [ 3 ] , cratesSpawns [ 4 ] [ 4 ] ) ;
 561: LD_EXP 19
 565: PUSH
 566: LD_INT 4
 568: ARRAY
 569: PUSH
 570: LD_INT 1
 572: ARRAY
 573: PPUSH
 574: LD_EXP 19
 578: PUSH
 579: LD_INT 4
 581: ARRAY
 582: PUSH
 583: LD_INT 2
 585: ARRAY
 586: PPUSH
 587: LD_EXP 19
 591: PUSH
 592: LD_INT 4
 594: ARRAY
 595: PUSH
 596: LD_INT 3
 598: ARRAY
 599: PPUSH
 600: LD_EXP 19
 604: PUSH
 605: LD_INT 4
 607: ARRAY
 608: PUSH
 609: LD_INT 4
 611: ARRAY
 612: PPUSH
 613: CALL 61479 0 4
 617: END
// export function SetTechnologies ; var i , j , ban_techs , res_techs ; begin
 618: LD_INT 0
 620: PPUSH
 621: PPUSH
 622: PPUSH
 623: PPUSH
 624: PPUSH
// if GameType = 1 then
 625: LD_EXP 2
 629: PUSH
 630: LD_INT 1
 632: EQUAL
 633: IFFALSE 702
// begin ban_techs := [ ] ;
 635: LD_ADDR_VAR 0 4
 639: PUSH
 640: EMPTY
 641: ST_TO_ADDR
// if sibBombAllowed < 2 then
 642: LD_EXP 23
 646: PUSH
 647: LD_INT 2
 649: LESS
 650: IFFALSE 663
// ban_techs := [ tech_sibFiss ] ;
 652: LD_ADDR_VAR 0 4
 656: PUSH
 657: LD_INT 25
 659: PUSH
 660: EMPTY
 661: LIST
 662: ST_TO_ADDR
// res_techs := [ tech_oilPow , tech_oilEng , tech_tech1 , tech_tech2 , tech_tech3 , tech_gun , tech_gatling , tech_rocket ] ;
 663: LD_ADDR_VAR 0 5
 667: PUSH
 668: LD_INT 46
 670: PUSH
 671: LD_INT 47
 673: PUSH
 674: LD_INT 48
 676: PUSH
 677: LD_INT 49
 679: PUSH
 680: LD_INT 50
 682: PUSH
 683: LD_INT 39
 685: PUSH
 686: LD_INT 69
 688: PUSH
 689: LD_INT 40
 691: PUSH
 692: EMPTY
 693: LIST
 694: LIST
 695: LIST
 696: LIST
 697: LIST
 698: LIST
 699: LIST
 700: LIST
 701: ST_TO_ADDR
// end ; for i = 1 to 8 do
 702: LD_ADDR_VAR 0 2
 706: PUSH
 707: DOUBLE
 708: LD_INT 1
 710: DEC
 711: ST_TO_ADDR
 712: LD_INT 8
 714: PUSH
 715: FOR_TO
 716: IFFALSE 800
// begin if res_techs then
 718: LD_VAR 0 5
 722: IFFALSE 758
// for j in res_techs do
 724: LD_ADDR_VAR 0 3
 728: PUSH
 729: LD_VAR 0 5
 733: PUSH
 734: FOR_IN
 735: IFFALSE 756
// SetTech ( j , i , state_researched ) ;
 737: LD_VAR 0 3
 741: PPUSH
 742: LD_VAR 0 2
 746: PPUSH
 747: LD_INT 2
 749: PPUSH
 750: CALL_OW 322
 754: GO 734
 756: POP
 757: POP
// if ban_techs then
 758: LD_VAR 0 4
 762: IFFALSE 798
// for j in ban_techs do
 764: LD_ADDR_VAR 0 3
 768: PUSH
 769: LD_VAR 0 4
 773: PUSH
 774: FOR_IN
 775: IFFALSE 796
// SetTech ( j , i , state_disabled ) ;
 777: LD_VAR 0 3
 781: PPUSH
 782: LD_VAR 0 2
 786: PPUSH
 787: LD_INT 0
 789: PPUSH
 790: CALL_OW 322
 794: GO 774
 796: POP
 797: POP
// end ;
 798: GO 715
 800: POP
 801: POP
// if sibBombAllowed = 1 then
 802: LD_EXP 23
 806: PUSH
 807: LD_INT 1
 809: EQUAL
 810: IFFALSE 825
// SetTech ( tech_sibFiss , 3 , state_enabled ) ;
 812: LD_INT 25
 814: PPUSH
 815: LD_INT 3
 817: PPUSH
 818: LD_INT 1
 820: PPUSH
 821: CALL_OW 322
// end ;
 825: LD_VAR 0 1
 829: RET
// export function SetDiplomacy ; begin
 830: LD_INT 0
 832: PPUSH
// if GameType = 1 then
 833: LD_EXP 2
 837: PUSH
 838: LD_INT 1
 840: EQUAL
 841: IFFALSE 907
// begin SetAttitude ( 1 , 4 , att_friend , true ) ;
 843: LD_INT 1
 845: PPUSH
 846: LD_INT 4
 848: PPUSH
 849: LD_INT 1
 851: PPUSH
 852: LD_INT 1
 854: PPUSH
 855: CALL_OW 80
// SetAttitude ( 3 , 6 , att_friend , true ) ;
 859: LD_INT 3
 861: PPUSH
 862: LD_INT 6
 864: PPUSH
 865: LD_INT 1
 867: PPUSH
 868: LD_INT 1
 870: PPUSH
 871: CALL_OW 80
// SetAttitude ( 3 , 8 , att_friend , true ) ;
 875: LD_INT 3
 877: PPUSH
 878: LD_INT 8
 880: PPUSH
 881: LD_INT 1
 883: PPUSH
 884: LD_INT 1
 886: PPUSH
 887: CALL_OW 80
// SetAttitude ( 6 , 8 , att_friend , true ) ;
 891: LD_INT 6
 893: PPUSH
 894: LD_INT 8
 896: PPUSH
 897: LD_INT 1
 899: PPUSH
 900: LD_INT 1
 902: PPUSH
 903: CALL_OW 80
// end ; end ;
 907: LD_VAR 0 1
 911: RET
// export function PrepareGame ; var i , tmp , sources ; begin
 912: LD_INT 0
 914: PPUSH
 915: PPUSH
 916: PPUSH
 917: PPUSH
// if GameType = 1 then
 918: LD_EXP 2
 922: PUSH
 923: LD_INT 1
 925: EQUAL
 926: IFFALSE 1403
// begin game := false ;
 928: LD_ADDR_EXP 3
 932: PUSH
 933: LD_INT 0
 935: ST_TO_ADDR
// your_side := 1 ;
 936: LD_ADDR_OWVAR 2
 940: PUSH
 941: LD_INT 1
 943: ST_TO_ADDR
// mc_amer := 1 ;
 944: LD_ADDR_EXP 5
 948: PUSH
 949: LD_INT 1
 951: ST_TO_ADDR
// mc_leg := 2 ;
 952: LD_ADDR_EXP 6
 956: PUSH
 957: LD_INT 2
 959: ST_TO_ADDR
// mc_rus_1 := 3 ;
 960: LD_ADDR_EXP 7
 964: PUSH
 965: LD_INT 3
 967: ST_TO_ADDR
// mc_rus_2 := 4 ;
 968: LD_ADDR_EXP 8
 972: PUSH
 973: LD_INT 4
 975: ST_TO_ADDR
// cratesSpawns := [ [ amerCrates , 1 , 0 , [ 200 , 250 , 300 ] [ cratesSpawn ] ] , [ rusCrates , 8 , 50 , 500 ] , [ legCrates , 5 , 50 , 300 ] , [ playerCrates , [ 4 , 5 , 6 ] [ cratesSpawn ] , 30 , [ 300 , 450 , 500 ] [ cratesSpawn ] ] ] ;
 976: LD_ADDR_EXP 19
 980: PUSH
 981: LD_INT 5
 983: PUSH
 984: LD_INT 1
 986: PUSH
 987: LD_INT 0
 989: PUSH
 990: LD_INT 200
 992: PUSH
 993: LD_INT 250
 995: PUSH
 996: LD_INT 300
 998: PUSH
 999: EMPTY
1000: LIST
1001: LIST
1002: LIST
1003: PUSH
1004: LD_EXP 26
1008: ARRAY
1009: PUSH
1010: EMPTY
1011: LIST
1012: LIST
1013: LIST
1014: LIST
1015: PUSH
1016: LD_INT 13
1018: PUSH
1019: LD_INT 8
1021: PUSH
1022: LD_INT 50
1024: PUSH
1025: LD_INT 500
1027: PUSH
1028: EMPTY
1029: LIST
1030: LIST
1031: LIST
1032: LIST
1033: PUSH
1034: LD_INT 17
1036: PUSH
1037: LD_INT 5
1039: PUSH
1040: LD_INT 50
1042: PUSH
1043: LD_INT 300
1045: PUSH
1046: EMPTY
1047: LIST
1048: LIST
1049: LIST
1050: LIST
1051: PUSH
1052: LD_INT 18
1054: PUSH
1055: LD_INT 4
1057: PUSH
1058: LD_INT 5
1060: PUSH
1061: LD_INT 6
1063: PUSH
1064: EMPTY
1065: LIST
1066: LIST
1067: LIST
1068: PUSH
1069: LD_EXP 26
1073: ARRAY
1074: PUSH
1075: LD_INT 30
1077: PUSH
1078: LD_INT 300
1080: PUSH
1081: LD_INT 450
1083: PUSH
1084: LD_INT 500
1086: PUSH
1087: EMPTY
1088: LIST
1089: LIST
1090: LIST
1091: PUSH
1092: LD_EXP 26
1096: ARRAY
1097: PUSH
1098: EMPTY
1099: LIST
1100: LIST
1101: LIST
1102: LIST
1103: PUSH
1104: EMPTY
1105: LIST
1106: LIST
1107: LIST
1108: LIST
1109: ST_TO_ADDR
// sources := [ [ 190 , 193 , mat_siberit ] , [ 182 , 117 , mat_siberit ] , [ 114 , 152 , mat_oil ] , [ 85 , 38 , mat_oil ] ] ;
1110: LD_ADDR_VAR 0 4
1114: PUSH
1115: LD_INT 190
1117: PUSH
1118: LD_INT 193
1120: PUSH
1121: LD_INT 3
1123: PUSH
1124: EMPTY
1125: LIST
1126: LIST
1127: LIST
1128: PUSH
1129: LD_INT 182
1131: PUSH
1132: LD_INT 117
1134: PUSH
1135: LD_INT 3
1137: PUSH
1138: EMPTY
1139: LIST
1140: LIST
1141: LIST
1142: PUSH
1143: LD_INT 114
1145: PUSH
1146: LD_INT 152
1148: PUSH
1149: LD_INT 2
1151: PUSH
1152: EMPTY
1153: LIST
1154: LIST
1155: LIST
1156: PUSH
1157: LD_INT 85
1159: PUSH
1160: LD_INT 38
1162: PUSH
1163: LD_INT 2
1165: PUSH
1166: EMPTY
1167: LIST
1168: LIST
1169: LIST
1170: PUSH
1171: EMPTY
1172: LIST
1173: LIST
1174: LIST
1175: LIST
1176: ST_TO_ADDR
// for i in sources do
1177: LD_ADDR_VAR 0 2
1181: PUSH
1182: LD_VAR 0 4
1186: PUSH
1187: FOR_IN
1188: IFFALSE 1223
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
1190: LD_VAR 0 2
1194: PUSH
1195: LD_INT 1
1197: ARRAY
1198: PPUSH
1199: LD_VAR 0 2
1203: PUSH
1204: LD_INT 2
1206: ARRAY
1207: PPUSH
1208: LD_VAR 0 2
1212: PUSH
1213: LD_INT 3
1215: ARRAY
1216: PPUSH
1217: CALL_OW 62
1221: GO 1187
1223: POP
1224: POP
// disableGlobalTimer := false ;
1225: LD_ADDR_EXP 4
1229: PUSH
1230: LD_INT 0
1232: ST_TO_ADDR
// ruEscape := [ 0 , [ 5 , 6 , 7 ] [ Difficulty ] ] ;
1233: LD_ADDR_EXP 15
1237: PUSH
1238: LD_INT 0
1240: PUSH
1241: LD_INT 5
1243: PUSH
1244: LD_INT 6
1246: PUSH
1247: LD_INT 7
1249: PUSH
1250: EMPTY
1251: LIST
1252: LIST
1253: LIST
1254: PUSH
1255: LD_OWVAR 67
1259: ARRAY
1260: PUSH
1261: EMPTY
1262: LIST
1263: LIST
1264: ST_TO_ADDR
// ruOutpost := [ ] ;
1265: LD_ADDR_EXP 14
1269: PUSH
1270: EMPTY
1271: ST_TO_ADDR
// staticMines := [ ] ;
1272: LD_ADDR_EXP 16
1276: PUSH
1277: EMPTY
1278: ST_TO_ADDR
// baseCaptured := false ;
1279: LD_ADDR_EXP 17
1283: PUSH
1284: LD_INT 0
1286: ST_TO_ADDR
// legDestCounter := 0 ;
1287: LD_ADDR_EXP 18
1291: PUSH
1292: LD_INT 0
1294: ST_TO_ADDR
// legOfferAccepted := false ;
1295: LD_ADDR_EXP 20
1299: PUSH
1300: LD_INT 0
1302: ST_TO_ADDR
// legChangeSide := false ;
1303: LD_ADDR_EXP 21
1307: PUSH
1308: LD_INT 0
1310: ST_TO_ADDR
// allyDestCounter := 0 ;
1311: LD_ADDR_EXP 22
1315: PUSH
1316: LD_INT 0
1318: ST_TO_ADDR
// outpostEscape := false ;
1319: LD_ADDR_EXP 27
1323: PUSH
1324: LD_INT 0
1326: ST_TO_ADDR
// dialogueMineDetected := false ;
1327: LD_ADDR_EXP 28
1331: PUSH
1332: LD_INT 0
1334: ST_TO_ADDR
// PrepareAmericans ;
1335: CALL 6989 0 0
// PrepareLegion ;
1339: CALL 5407 0 0
// PrepareRussians ;
1343: CALL 2431 0 0
// playerForces := PreparePlayer ;
1347: LD_ADDR_EXP 10
1351: PUSH
1352: CALL 8262 0 0
1356: ST_TO_ADDR
// AnimateTrees ( true ) ;
1357: LD_INT 1
1359: PPUSH
1360: CALL_OW 573
// PrepareNature ( 4 , 3 , 8 , 5 , 3 , 1 , 8 , natureGroundArea , natureWaterArea ) ;
1364: LD_INT 4
1366: PPUSH
1367: LD_INT 3
1369: PPUSH
1370: LD_INT 8
1372: PPUSH
1373: LD_INT 5
1375: PPUSH
1376: LD_INT 3
1378: PPUSH
1379: LD_INT 1
1381: PPUSH
1382: LD_INT 8
1384: PPUSH
1385: LD_INT 2
1387: PPUSH
1388: LD_INT 1
1390: PPUSH
1391: CALL 54227 0 9
// MC_Start ;
1395: CALL 64531 0 0
// Action ;
1399: CALL 10361 0 0
// end ; end ;
1403: LD_VAR 0 1
1407: RET
// export function CustomInitMacro ; begin
1408: LD_INT 0
1410: PPUSH
// if GameType <> 1 then
1411: LD_EXP 2
1415: PUSH
1416: LD_INT 1
1418: NONEQUAL
1419: IFFALSE 1423
// exit ;
1421: GO 2426
// MC_SetScanArea ( mc_amer , amerBase ) ;
1423: LD_EXP 5
1427: PPUSH
1428: LD_INT 3
1430: PPUSH
1431: CALL 86908 0 2
// MC_SetParkingArea ( mc_amer , amerParking ) ;
1435: LD_EXP 5
1439: PPUSH
1440: LD_INT 4
1442: PPUSH
1443: CALL 86852 0 2
// MC_SetAllowedTurretWeapons ( mc_amer , [ us_radar , us_heavy_gun , us_rocket_launcher , us_laser , us_double_laser ] ) ;
1447: LD_EXP 5
1451: PPUSH
1452: LD_INT 11
1454: PUSH
1455: LD_INT 6
1457: PUSH
1458: LD_INT 7
1460: PUSH
1461: LD_INT 9
1463: PUSH
1464: LD_INT 10
1466: PUSH
1467: EMPTY
1468: LIST
1469: LIST
1470: LIST
1471: LIST
1472: LIST
1473: PPUSH
1474: CALL 86740 0 2
// MC_SetCratesArea ( mc_amer , amerCrates ) ;
1478: LD_EXP 5
1482: PPUSH
1483: LD_INT 5
1485: PPUSH
1486: CALL 86422 0 2
// MC_SetTame ( mc_amer , amerBase ) ;
1490: LD_EXP 5
1494: PPUSH
1495: LD_INT 3
1497: PPUSH
1498: CALL 86153 0 2
// MC_SetDefenderLimit ( mc_amer , 3 ) ;
1502: LD_EXP 5
1506: PPUSH
1507: LD_INT 3
1509: PPUSH
1510: CALL 85835 0 2
// MC_SetProduceList ( mc_amer , [ [ us_medium_tracked , engine_combustion , control_remote , us_double_gun ] , [ us_heavy_tracked , engine_combustion , control_remote , us_heavy_gun ] , [ us_heavy_tracked , engine_combustion , control_remote , us_rocket_launcher ] , [ us_heavy_tracked , engine_combustion , control_remote , us_heavy_gun ] , [ us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay ] ] ) ;
1514: LD_EXP 5
1518: PPUSH
1519: LD_INT 3
1521: PUSH
1522: LD_INT 1
1524: PUSH
1525: LD_INT 2
1527: PUSH
1528: LD_INT 5
1530: PUSH
1531: EMPTY
1532: LIST
1533: LIST
1534: LIST
1535: LIST
1536: PUSH
1537: LD_INT 4
1539: PUSH
1540: LD_INT 1
1542: PUSH
1543: LD_INT 2
1545: PUSH
1546: LD_INT 6
1548: PUSH
1549: EMPTY
1550: LIST
1551: LIST
1552: LIST
1553: LIST
1554: PUSH
1555: LD_INT 4
1557: PUSH
1558: LD_INT 1
1560: PUSH
1561: LD_INT 2
1563: PUSH
1564: LD_INT 7
1566: PUSH
1567: EMPTY
1568: LIST
1569: LIST
1570: LIST
1571: LIST
1572: PUSH
1573: LD_INT 4
1575: PUSH
1576: LD_INT 1
1578: PUSH
1579: LD_INT 2
1581: PUSH
1582: LD_INT 6
1584: PUSH
1585: EMPTY
1586: LIST
1587: LIST
1588: LIST
1589: LIST
1590: PUSH
1591: LD_INT 2
1593: PUSH
1594: LD_INT 1
1596: PUSH
1597: LD_INT 2
1599: PUSH
1600: LD_INT 12
1602: PUSH
1603: EMPTY
1604: LIST
1605: LIST
1606: LIST
1607: LIST
1608: PUSH
1609: EMPTY
1610: LIST
1611: LIST
1612: LIST
1613: LIST
1614: LIST
1615: PPUSH
1616: CALL 85650 0 2
// MC_SetBuildingList ( mc_amer , [ [ b_turret , 114 , 16 , 0 ] , [ b_bunker , 110 , 12 , 0 ] ] ) ;
1620: LD_EXP 5
1624: PPUSH
1625: LD_INT 33
1627: PUSH
1628: LD_INT 114
1630: PUSH
1631: LD_INT 16
1633: PUSH
1634: LD_INT 0
1636: PUSH
1637: EMPTY
1638: LIST
1639: LIST
1640: LIST
1641: LIST
1642: PUSH
1643: LD_INT 32
1645: PUSH
1646: LD_INT 110
1648: PUSH
1649: LD_INT 12
1651: PUSH
1652: LD_INT 0
1654: PUSH
1655: EMPTY
1656: LIST
1657: LIST
1658: LIST
1659: LIST
1660: PUSH
1661: EMPTY
1662: LIST
1663: LIST
1664: PPUSH
1665: CALL 85542 0 2
// MC_SetLabKind ( mc_amer , [ b_lab_weapon , b_lab_opto , b_lab_computer , b_lab_siberium ] ) ;
1669: LD_EXP 5
1673: PPUSH
1674: LD_INT 10
1676: PUSH
1677: LD_INT 15
1679: PUSH
1680: LD_INT 12
1682: PUSH
1683: LD_INT 11
1685: PUSH
1686: EMPTY
1687: LIST
1688: LIST
1689: LIST
1690: LIST
1691: PPUSH
1692: CALL 86329 0 2
// MC_SetScanArea ( mc_leg , legBase ) ;
1696: LD_EXP 6
1700: PPUSH
1701: LD_INT 6
1703: PPUSH
1704: CALL 86908 0 2
// MC_SetParkingArea ( mc_leg , legParking ) ;
1708: LD_EXP 6
1712: PPUSH
1713: LD_INT 7
1715: PPUSH
1716: CALL 86852 0 2
// MC_SetAllowedTurretWeapons ( mc_leg , [ ar_radar , ar_gun , ar_rocket_launcher , ar_gatling_gun ] ) ;
1720: LD_EXP 6
1724: PPUSH
1725: LD_INT 30
1727: PUSH
1728: LD_INT 27
1730: PUSH
1731: LD_INT 28
1733: PUSH
1734: LD_INT 25
1736: PUSH
1737: EMPTY
1738: LIST
1739: LIST
1740: LIST
1741: LIST
1742: PPUSH
1743: CALL 86740 0 2
// MC_SetCratesArea ( mc_leg , legCrates ) ;
1747: LD_EXP 6
1751: PPUSH
1752: LD_INT 17
1754: PPUSH
1755: CALL 86422 0 2
// MC_SetTame ( mc_leg , legBase ) ;
1759: LD_EXP 6
1763: PPUSH
1764: LD_INT 6
1766: PPUSH
1767: CALL 86153 0 2
// MC_SetDefenderLimit ( mc_leg , 5 ) ;
1771: LD_EXP 6
1775: PPUSH
1776: LD_INT 5
1778: PPUSH
1779: CALL 85835 0 2
// MC_SetMinesField ( mc_leg , 10 , legMines ) ;
1783: LD_EXP 6
1787: PPUSH
1788: LD_INT 10
1790: PPUSH
1791: LD_INT 9
1793: PPUSH
1794: CALL 85332 0 3
// MC_SetBuildingList ( mc_leg , [ [ b_armoury , 155 , 133 , 0 ] ] ) ;
1798: LD_EXP 6
1802: PPUSH
1803: LD_INT 4
1805: PUSH
1806: LD_INT 155
1808: PUSH
1809: LD_INT 133
1811: PUSH
1812: LD_INT 0
1814: PUSH
1815: EMPTY
1816: LIST
1817: LIST
1818: LIST
1819: LIST
1820: PUSH
1821: EMPTY
1822: LIST
1823: PPUSH
1824: CALL 85542 0 2
// MC_SetProduceList ( mc_leg , [ [ ar_medium_trike , engine_solar , control_manual , ar_control_tower ] , [ ar_medium_trike , engine_solar , control_manual , ar_control_tower ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_cargo_bay ] ] ) ;
1828: LD_EXP 6
1832: PPUSH
1833: LD_INT 13
1835: PUSH
1836: LD_INT 2
1838: PUSH
1839: LD_INT 1
1841: PUSH
1842: LD_INT 31
1844: PUSH
1845: EMPTY
1846: LIST
1847: LIST
1848: LIST
1849: LIST
1850: PUSH
1851: LD_INT 13
1853: PUSH
1854: LD_INT 2
1856: PUSH
1857: LD_INT 1
1859: PUSH
1860: LD_INT 31
1862: PUSH
1863: EMPTY
1864: LIST
1865: LIST
1866: LIST
1867: LIST
1868: PUSH
1869: LD_INT 13
1871: PUSH
1872: LD_INT 1
1874: PUSH
1875: LD_INT 1
1877: PUSH
1878: LD_INT 27
1880: PUSH
1881: EMPTY
1882: LIST
1883: LIST
1884: LIST
1885: LIST
1886: PUSH
1887: LD_INT 13
1889: PUSH
1890: LD_INT 1
1892: PUSH
1893: LD_INT 2
1895: PUSH
1896: LD_INT 27
1898: PUSH
1899: EMPTY
1900: LIST
1901: LIST
1902: LIST
1903: LIST
1904: PUSH
1905: LD_INT 13
1907: PUSH
1908: LD_INT 1
1910: PUSH
1911: LD_INT 2
1913: PUSH
1914: LD_INT 27
1916: PUSH
1917: EMPTY
1918: LIST
1919: LIST
1920: LIST
1921: LIST
1922: PUSH
1923: LD_INT 13
1925: PUSH
1926: LD_INT 1
1928: PUSH
1929: LD_INT 2
1931: PUSH
1932: LD_INT 28
1934: PUSH
1935: EMPTY
1936: LIST
1937: LIST
1938: LIST
1939: LIST
1940: PUSH
1941: LD_INT 13
1943: PUSH
1944: LD_INT 1
1946: PUSH
1947: LD_INT 2
1949: PUSH
1950: LD_INT 28
1952: PUSH
1953: EMPTY
1954: LIST
1955: LIST
1956: LIST
1957: LIST
1958: PUSH
1959: LD_INT 13
1961: PUSH
1962: LD_INT 1
1964: PUSH
1965: LD_INT 2
1967: PUSH
1968: LD_INT 32
1970: PUSH
1971: EMPTY
1972: LIST
1973: LIST
1974: LIST
1975: LIST
1976: PUSH
1977: EMPTY
1978: LIST
1979: LIST
1980: LIST
1981: LIST
1982: LIST
1983: LIST
1984: LIST
1985: LIST
1986: PPUSH
1987: CALL 85650 0 2
// MC_SetScanArea ( mc_rus_1 , rus1Base ) ;
1991: LD_EXP 7
1995: PPUSH
1996: LD_INT 11
1998: PPUSH
1999: CALL 86908 0 2
// MC_SetParkingArea ( mc_rus_1 , rus1Parking ) ;
2003: LD_EXP 7
2007: PPUSH
2008: LD_INT 12
2010: PPUSH
2011: CALL 86852 0 2
// MC_SetAllowedTurretWeapons ( mc_rus_1 , [ ru_gatling_gun , ru_rocket , ru_rocket_launcher , ru_time_lapser , ru_heavy_gun ] ) ;
2015: LD_EXP 7
2019: PPUSH
2020: LD_INT 43
2022: PUSH
2023: LD_INT 47
2025: PUSH
2026: LD_INT 45
2028: PUSH
2029: LD_INT 49
2031: PUSH
2032: LD_INT 46
2034: PUSH
2035: EMPTY
2036: LIST
2037: LIST
2038: LIST
2039: LIST
2040: LIST
2041: PPUSH
2042: CALL 86740 0 2
// MC_SetCratesArea ( mc_rus_1 , rusCrates ) ;
2046: LD_EXP 7
2050: PPUSH
2051: LD_INT 13
2053: PPUSH
2054: CALL 86422 0 2
// MC_SetTame ( mc_rus_1 , rus1Base ) ;
2058: LD_EXP 7
2062: PPUSH
2063: LD_INT 11
2065: PPUSH
2066: CALL 86153 0 2
// MC_SetDefenderLimit ( mc_rus_1 , 5 ) ;
2070: LD_EXP 7
2074: PPUSH
2075: LD_INT 5
2077: PPUSH
2078: CALL 85835 0 2
// MC_SetProduceList ( mc_rus_1 , [ [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_cargo_bay ] ] ) ;
2082: LD_EXP 7
2086: PPUSH
2087: LD_INT 24
2089: PUSH
2090: LD_INT 1
2092: PUSH
2093: LD_INT 3
2095: PUSH
2096: LD_INT 46
2098: PUSH
2099: EMPTY
2100: LIST
2101: LIST
2102: LIST
2103: LIST
2104: PUSH
2105: LD_INT 24
2107: PUSH
2108: LD_INT 1
2110: PUSH
2111: LD_INT 3
2113: PUSH
2114: LD_INT 46
2116: PUSH
2117: EMPTY
2118: LIST
2119: LIST
2120: LIST
2121: LIST
2122: PUSH
2123: LD_INT 24
2125: PUSH
2126: LD_INT 1
2128: PUSH
2129: LD_INT 3
2131: PUSH
2132: LD_INT 46
2134: PUSH
2135: EMPTY
2136: LIST
2137: LIST
2138: LIST
2139: LIST
2140: PUSH
2141: LD_INT 24
2143: PUSH
2144: LD_INT 1
2146: PUSH
2147: LD_INT 3
2149: PUSH
2150: LD_INT 46
2152: PUSH
2153: EMPTY
2154: LIST
2155: LIST
2156: LIST
2157: LIST
2158: PUSH
2159: LD_INT 24
2161: PUSH
2162: LD_INT 1
2164: PUSH
2165: LD_INT 3
2167: PUSH
2168: LD_INT 46
2170: PUSH
2171: EMPTY
2172: LIST
2173: LIST
2174: LIST
2175: LIST
2176: PUSH
2177: LD_INT 22
2179: PUSH
2180: LD_INT 1
2182: PUSH
2183: LD_INT 3
2185: PUSH
2186: LD_INT 51
2188: PUSH
2189: EMPTY
2190: LIST
2191: LIST
2192: LIST
2193: LIST
2194: PUSH
2195: EMPTY
2196: LIST
2197: LIST
2198: LIST
2199: LIST
2200: LIST
2201: LIST
2202: PPUSH
2203: CALL 85650 0 2
// MC_SetTeleportExit ( mc_rus_1 , [ [ 115 , 201 ] ] ) ;
2207: LD_EXP 7
2211: PPUSH
2212: LD_INT 115
2214: PUSH
2215: LD_INT 201
2217: PUSH
2218: EMPTY
2219: LIST
2220: LIST
2221: PUSH
2222: EMPTY
2223: LIST
2224: PPUSH
2225: CALL 86478 0 2
// MC_SetScanArea ( mc_rus_2 , rus2Base ) ;
2229: LD_EXP 8
2233: PPUSH
2234: LD_INT 15
2236: PPUSH
2237: CALL 86908 0 2
// MC_SetParkingArea ( mc_rus_2 , rus2Parking ) ;
2241: LD_EXP 8
2245: PPUSH
2246: LD_INT 16
2248: PPUSH
2249: CALL 86852 0 2
// MC_SetAllowedTurretWeapons ( mc_rus_2 , [ ru_gatling_gun , ru_rocket , ru_rocket_launcher , ru_time_lapser , ru_heavy_gun ] ) ;
2253: LD_EXP 8
2257: PPUSH
2258: LD_INT 43
2260: PUSH
2261: LD_INT 47
2263: PUSH
2264: LD_INT 45
2266: PUSH
2267: LD_INT 49
2269: PUSH
2270: LD_INT 46
2272: PUSH
2273: EMPTY
2274: LIST
2275: LIST
2276: LIST
2277: LIST
2278: LIST
2279: PPUSH
2280: CALL 86740 0 2
// MC_SetCratesArea ( mc_rus_2 , rusCrates ) ;
2284: LD_EXP 8
2288: PPUSH
2289: LD_INT 13
2291: PPUSH
2292: CALL 86422 0 2
// MC_SetTame ( mc_rus_2 , rus2Base ) ;
2296: LD_EXP 8
2300: PPUSH
2301: LD_INT 15
2303: PPUSH
2304: CALL 86153 0 2
// MC_SetDefenderLimit ( mc_rus_2 , 4 ) ;
2308: LD_EXP 8
2312: PPUSH
2313: LD_INT 4
2315: PPUSH
2316: CALL 85835 0 2
// MC_SetProduceList ( mc_rus_2 , [ [ ru_heavy_wheeled , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_wheeled , engine_combustion , control_manual , ru_heavy_gun ] , [ ru_heavy_wheeled , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_heavy_wheeled , engine_combustion , control_manual , ru_rocket ] , [ ru_medium_wheeled , engine_combustion , control_computer , ru_cargo_bay ] ] ) ;
2320: LD_EXP 8
2324: PPUSH
2325: LD_INT 23
2327: PUSH
2328: LD_INT 1
2330: PUSH
2331: LD_INT 3
2333: PUSH
2334: LD_INT 46
2336: PUSH
2337: EMPTY
2338: LIST
2339: LIST
2340: LIST
2341: LIST
2342: PUSH
2343: LD_INT 23
2345: PUSH
2346: LD_INT 1
2348: PUSH
2349: LD_INT 1
2351: PUSH
2352: LD_INT 46
2354: PUSH
2355: EMPTY
2356: LIST
2357: LIST
2358: LIST
2359: LIST
2360: PUSH
2361: LD_INT 23
2363: PUSH
2364: LD_INT 1
2366: PUSH
2367: LD_INT 3
2369: PUSH
2370: LD_INT 45
2372: PUSH
2373: EMPTY
2374: LIST
2375: LIST
2376: LIST
2377: LIST
2378: PUSH
2379: LD_INT 23
2381: PUSH
2382: LD_INT 1
2384: PUSH
2385: LD_INT 1
2387: PUSH
2388: LD_INT 47
2390: PUSH
2391: EMPTY
2392: LIST
2393: LIST
2394: LIST
2395: LIST
2396: PUSH
2397: LD_INT 21
2399: PUSH
2400: LD_INT 1
2402: PUSH
2403: LD_INT 3
2405: PUSH
2406: LD_INT 51
2408: PUSH
2409: EMPTY
2410: LIST
2411: LIST
2412: LIST
2413: LIST
2414: PUSH
2415: EMPTY
2416: LIST
2417: LIST
2418: LIST
2419: LIST
2420: LIST
2421: PPUSH
2422: CALL 85650 0 2
// end ;
2426: LD_VAR 0 1
2430: RET
// export function PrepareRussians ; var i , b , tmp , side , sr , depot , base ; begin
2431: LD_INT 0
2433: PPUSH
2434: PPUSH
2435: PPUSH
2436: PPUSH
2437: PPUSH
2438: PPUSH
2439: PPUSH
2440: PPUSH
// PrepareNature ( 0 , 0 , 3 , 0 , 0 , 0 , 0 , rusApe , 0 ) ;
2441: LD_INT 0
2443: PPUSH
2444: LD_INT 0
2446: PPUSH
2447: LD_INT 3
2449: PPUSH
2450: LD_INT 0
2452: PPUSH
2453: LD_INT 0
2455: PPUSH
2456: LD_INT 0
2458: PPUSH
2459: LD_INT 0
2461: PPUSH
2462: LD_INT 14
2464: PPUSH
2465: LD_INT 0
2467: PPUSH
2468: CALL 54227 0 9
// side := 3 ;
2472: LD_ADDR_VAR 0 5
2476: PUSH
2477: LD_INT 3
2479: ST_TO_ADDR
// SetTech ( tech_targTeleport , side , state_researched ) ;
2480: LD_INT 38
2482: PPUSH
2483: LD_VAR 0 5
2487: PPUSH
2488: LD_INT 2
2490: PPUSH
2491: CALL_OW 322
// SetTech ( tech_gun , side , state_researched ) ;
2495: LD_INT 39
2497: PPUSH
2498: LD_VAR 0 5
2502: PPUSH
2503: LD_INT 2
2505: PPUSH
2506: CALL_OW 322
// SetTech ( tech_advMet , side , state_researched ) ;
2510: LD_INT 34
2512: PPUSH
2513: LD_VAR 0 5
2517: PPUSH
2518: LD_INT 2
2520: PPUSH
2521: CALL_OW 322
// tmp := [ [ 0 , 208 , 163 , 4 , 0 , 0 ] , [ 3 , 194 , 161 , 1 , 0 , 0 ] , [ 17 , 190 , 161 , 1 , 0 , 0 ] , [ 5 , 200 , 145 , 3 , 0 , 0 ] , [ 32 , 192 , 144 , 3 , 0 , 0 ] , [ 26 , 216 , 172 , 3 , 0 , 0 ] , [ 26 , 218 , 176 , 3 , 0 , 0 ] , [ 29 , 182 , 149 , 3 , 0 , 0 ] , [ 8 , 201 , 171 , 0 , 10 , 11 ] , [ 32 , 188 , 167 , 0 , 0 , 0 ] , [ 32 , 202 , 179 , 0 , 0 , 0 ] , [ 32 , 209 , 182 , 0 , 0 , 0 ] , [ 32 , 220 , 183 , 5 , 0 , 0 ] , [ 32 , 225 , 181 , 5 , 0 , 0 ] , [ 26 , 220 , 174 , 5 , 0 , 0 ] , [ 1 , 84 , 128 , 4 , 0 , 0 ] , [ 3 , 68 , 121 , 1 , 0 , 0 ] , [ 19 , 72 , 125 , 5 , 0 , 0 ] , [ 18 , 68 , 124 , 0 , 0 , 0 ] , [ 24 , 64 , 121 , 1 , 0 , 0 ] , [ 17 , 65 , 118 , 2 , 0 , 0 ] , [ 21 , 68 , 117 , 3 , 0 , 0 ] , [ 8 , 68 , 130 , 1 , 14 , 10 ] , [ 8 , 67 , 110 , 2 , 11 , 12 ] , [ 28 , 71 , 136 , 2 , 0 , 0 ] , [ 28 , 73 , 141 , 2 , 0 , 0 ] , [ 30 , 75 , 145 , 2 , 0 , 0 ] , [ 5 , 111 , 138 , 4 , 0 , 0 ] , [ 33 , 104 , 130 , 3 , 0 , 0 ] , [ 33 , 110 , 142 , 5 , 0 , 0 ] , [ 33 , 91 , 131 , 5 , 0 , 0 ] , [ 33 , 107 , 157 , 5 , 0 , 0 ] , [ 33 , 104 , 160 , 5 , 0 , 0 ] , [ 33 , 101 , 162 , 5 , 0 , 0 ] , [ 32 , 87 , 157 , 5 , 0 , 0 ] , [ 32 , 82 , 158 , 5 , 0 , 0 ] , [ 33 , 91 , 118 , 4 , 0 , 0 ] , [ 33 , 89 , 107 , 4 , 0 , 0 ] , [ 5 , 86 , 96 , 3 , 0 , 0 ] , [ 33 , 91 , 102 , 4 , 0 , 0 ] , [ 32 , 80 , 95 , 3 , 0 , 0 ] , [ 28 , 77 , 105 , 3 , 0 , 0 ] , [ 28 , 85 , 113 , 3 , 0 , 0 ] , [ 28 , 55 , 97 , 3 , 0 , 0 ] , [ 28 , 88 , 128 , 3 , 0 , 0 ] , [ 32 , 69 , 101 , 2 , 0 , 0 ] , [ 1 , 34 , 23 , 4 , 0 , 0 ] , [ 8 , 25 , 4 , 3 , 11 , 10 ] , [ 8 , 15 , 4 , 2 , 14 , 12 ] , [ 29 , 55 , 35 , 2 , 0 , 0 ] , [ 29 , 24 , 44 , 2 , 0 , 0 ] , [ 34 , 34 , 32 , 4 , 0 , 0 ] , [ 3 , 14 , 16 , 1 , 0 , 0 ] , [ 24 , 10 , 16 , 1 , 0 , 0 ] , [ 19 , 11 , 13 , 2 , 0 , 0 ] , [ 18 , 14 , 12 , 3 , 0 , 0 ] , [ 16 , 14 , 19 , 0 , 0 , 0 ] , [ 17 , 18 , 20 , 5 , 0 , 0 ] , [ 28 , 10 , 5 , 1 , 0 , 0 ] , [ 28 , 8 , 8 , 1 , 0 , 0 ] , [ 26 , 19 , 2 , 1 , 0 , 0 ] , [ 26 , 30 , 2 , 1 , 0 , 0 ] , [ 5 , 53 , 20 , 4 , 0 , 0 ] , [ 32 , 55 , 24 , 4 , 0 , 0 ] , [ 32 , 61 , 45 , 5 , 0 , 0 ] , [ 32 , 52 , 51 , 5 , 0 , 0 ] , [ 33 , 56 , 51 , 5 , 0 , 0 ] , [ 33 , 62 , 49 , 5 , 0 , 0 ] , [ 33 , 41 , 47 , 5 , 0 , 0 ] , [ 33 , 33 , 52 , 5 , 0 , 0 ] , [ 5 , 31 , 40 , 0 , 0 , 0 ] , [ 33 , 65 , 37 , 5 , 0 , 0 ] , [ 33 , 63 , 29 , 4 , 0 , 0 ] , [ 33 , 54 , 11 , 4 , 0 , 0 ] , [ 33 , 51 , 6 , 4 , 0 , 0 ] , [ 26 , 39 , 25 , 0 , 0 , 0 ] , [ 26 , 37 , 21 , 0 , 0 , 0 ] , [ 32 , 35 , 17 , 4 , 0 , 0 ] , [ 33 , 35 , 28 , 4 , 0 , 0 ] , [ 33 , 28 , 46 , 5 , 0 , 0 ] , [ 33 , 31 , 6 , 4 , 0 , 0 ] , [ 26 , 54 , 38 , 4 , 0 , 0 ] , [ 33 , 207 , 167 , 3 , 0 , 0 ] ] ;
2525: LD_ADDR_VAR 0 4
2529: PUSH
2530: LD_INT 0
2532: PUSH
2533: LD_INT 208
2535: PUSH
2536: LD_INT 163
2538: PUSH
2539: LD_INT 4
2541: PUSH
2542: LD_INT 0
2544: PUSH
2545: LD_INT 0
2547: PUSH
2548: EMPTY
2549: LIST
2550: LIST
2551: LIST
2552: LIST
2553: LIST
2554: LIST
2555: PUSH
2556: LD_INT 3
2558: PUSH
2559: LD_INT 194
2561: PUSH
2562: LD_INT 161
2564: PUSH
2565: LD_INT 1
2567: PUSH
2568: LD_INT 0
2570: PUSH
2571: LD_INT 0
2573: PUSH
2574: EMPTY
2575: LIST
2576: LIST
2577: LIST
2578: LIST
2579: LIST
2580: LIST
2581: PUSH
2582: LD_INT 17
2584: PUSH
2585: LD_INT 190
2587: PUSH
2588: LD_INT 161
2590: PUSH
2591: LD_INT 1
2593: PUSH
2594: LD_INT 0
2596: PUSH
2597: LD_INT 0
2599: PUSH
2600: EMPTY
2601: LIST
2602: LIST
2603: LIST
2604: LIST
2605: LIST
2606: LIST
2607: PUSH
2608: LD_INT 5
2610: PUSH
2611: LD_INT 200
2613: PUSH
2614: LD_INT 145
2616: PUSH
2617: LD_INT 3
2619: PUSH
2620: LD_INT 0
2622: PUSH
2623: LD_INT 0
2625: PUSH
2626: EMPTY
2627: LIST
2628: LIST
2629: LIST
2630: LIST
2631: LIST
2632: LIST
2633: PUSH
2634: LD_INT 32
2636: PUSH
2637: LD_INT 192
2639: PUSH
2640: LD_INT 144
2642: PUSH
2643: LD_INT 3
2645: PUSH
2646: LD_INT 0
2648: PUSH
2649: LD_INT 0
2651: PUSH
2652: EMPTY
2653: LIST
2654: LIST
2655: LIST
2656: LIST
2657: LIST
2658: LIST
2659: PUSH
2660: LD_INT 26
2662: PUSH
2663: LD_INT 216
2665: PUSH
2666: LD_INT 172
2668: PUSH
2669: LD_INT 3
2671: PUSH
2672: LD_INT 0
2674: PUSH
2675: LD_INT 0
2677: PUSH
2678: EMPTY
2679: LIST
2680: LIST
2681: LIST
2682: LIST
2683: LIST
2684: LIST
2685: PUSH
2686: LD_INT 26
2688: PUSH
2689: LD_INT 218
2691: PUSH
2692: LD_INT 176
2694: PUSH
2695: LD_INT 3
2697: PUSH
2698: LD_INT 0
2700: PUSH
2701: LD_INT 0
2703: PUSH
2704: EMPTY
2705: LIST
2706: LIST
2707: LIST
2708: LIST
2709: LIST
2710: LIST
2711: PUSH
2712: LD_INT 29
2714: PUSH
2715: LD_INT 182
2717: PUSH
2718: LD_INT 149
2720: PUSH
2721: LD_INT 3
2723: PUSH
2724: LD_INT 0
2726: PUSH
2727: LD_INT 0
2729: PUSH
2730: EMPTY
2731: LIST
2732: LIST
2733: LIST
2734: LIST
2735: LIST
2736: LIST
2737: PUSH
2738: LD_INT 8
2740: PUSH
2741: LD_INT 201
2743: PUSH
2744: LD_INT 171
2746: PUSH
2747: LD_INT 0
2749: PUSH
2750: LD_INT 10
2752: PUSH
2753: LD_INT 11
2755: PUSH
2756: EMPTY
2757: LIST
2758: LIST
2759: LIST
2760: LIST
2761: LIST
2762: LIST
2763: PUSH
2764: LD_INT 32
2766: PUSH
2767: LD_INT 188
2769: PUSH
2770: LD_INT 167
2772: PUSH
2773: LD_INT 0
2775: PUSH
2776: LD_INT 0
2778: PUSH
2779: LD_INT 0
2781: PUSH
2782: EMPTY
2783: LIST
2784: LIST
2785: LIST
2786: LIST
2787: LIST
2788: LIST
2789: PUSH
2790: LD_INT 32
2792: PUSH
2793: LD_INT 202
2795: PUSH
2796: LD_INT 179
2798: PUSH
2799: LD_INT 0
2801: PUSH
2802: LD_INT 0
2804: PUSH
2805: LD_INT 0
2807: PUSH
2808: EMPTY
2809: LIST
2810: LIST
2811: LIST
2812: LIST
2813: LIST
2814: LIST
2815: PUSH
2816: LD_INT 32
2818: PUSH
2819: LD_INT 209
2821: PUSH
2822: LD_INT 182
2824: PUSH
2825: LD_INT 0
2827: PUSH
2828: LD_INT 0
2830: PUSH
2831: LD_INT 0
2833: PUSH
2834: EMPTY
2835: LIST
2836: LIST
2837: LIST
2838: LIST
2839: LIST
2840: LIST
2841: PUSH
2842: LD_INT 32
2844: PUSH
2845: LD_INT 220
2847: PUSH
2848: LD_INT 183
2850: PUSH
2851: LD_INT 5
2853: PUSH
2854: LD_INT 0
2856: PUSH
2857: LD_INT 0
2859: PUSH
2860: EMPTY
2861: LIST
2862: LIST
2863: LIST
2864: LIST
2865: LIST
2866: LIST
2867: PUSH
2868: LD_INT 32
2870: PUSH
2871: LD_INT 225
2873: PUSH
2874: LD_INT 181
2876: PUSH
2877: LD_INT 5
2879: PUSH
2880: LD_INT 0
2882: PUSH
2883: LD_INT 0
2885: PUSH
2886: EMPTY
2887: LIST
2888: LIST
2889: LIST
2890: LIST
2891: LIST
2892: LIST
2893: PUSH
2894: LD_INT 26
2896: PUSH
2897: LD_INT 220
2899: PUSH
2900: LD_INT 174
2902: PUSH
2903: LD_INT 5
2905: PUSH
2906: LD_INT 0
2908: PUSH
2909: LD_INT 0
2911: PUSH
2912: EMPTY
2913: LIST
2914: LIST
2915: LIST
2916: LIST
2917: LIST
2918: LIST
2919: PUSH
2920: LD_INT 1
2922: PUSH
2923: LD_INT 84
2925: PUSH
2926: LD_INT 128
2928: PUSH
2929: LD_INT 4
2931: PUSH
2932: LD_INT 0
2934: PUSH
2935: LD_INT 0
2937: PUSH
2938: EMPTY
2939: LIST
2940: LIST
2941: LIST
2942: LIST
2943: LIST
2944: LIST
2945: PUSH
2946: LD_INT 3
2948: PUSH
2949: LD_INT 68
2951: PUSH
2952: LD_INT 121
2954: PUSH
2955: LD_INT 1
2957: PUSH
2958: LD_INT 0
2960: PUSH
2961: LD_INT 0
2963: PUSH
2964: EMPTY
2965: LIST
2966: LIST
2967: LIST
2968: LIST
2969: LIST
2970: LIST
2971: PUSH
2972: LD_INT 19
2974: PUSH
2975: LD_INT 72
2977: PUSH
2978: LD_INT 125
2980: PUSH
2981: LD_INT 5
2983: PUSH
2984: LD_INT 0
2986: PUSH
2987: LD_INT 0
2989: PUSH
2990: EMPTY
2991: LIST
2992: LIST
2993: LIST
2994: LIST
2995: LIST
2996: LIST
2997: PUSH
2998: LD_INT 18
3000: PUSH
3001: LD_INT 68
3003: PUSH
3004: LD_INT 124
3006: PUSH
3007: LD_INT 0
3009: PUSH
3010: LD_INT 0
3012: PUSH
3013: LD_INT 0
3015: PUSH
3016: EMPTY
3017: LIST
3018: LIST
3019: LIST
3020: LIST
3021: LIST
3022: LIST
3023: PUSH
3024: LD_INT 24
3026: PUSH
3027: LD_INT 64
3029: PUSH
3030: LD_INT 121
3032: PUSH
3033: LD_INT 1
3035: PUSH
3036: LD_INT 0
3038: PUSH
3039: LD_INT 0
3041: PUSH
3042: EMPTY
3043: LIST
3044: LIST
3045: LIST
3046: LIST
3047: LIST
3048: LIST
3049: PUSH
3050: LD_INT 17
3052: PUSH
3053: LD_INT 65
3055: PUSH
3056: LD_INT 118
3058: PUSH
3059: LD_INT 2
3061: PUSH
3062: LD_INT 0
3064: PUSH
3065: LD_INT 0
3067: PUSH
3068: EMPTY
3069: LIST
3070: LIST
3071: LIST
3072: LIST
3073: LIST
3074: LIST
3075: PUSH
3076: LD_INT 21
3078: PUSH
3079: LD_INT 68
3081: PUSH
3082: LD_INT 117
3084: PUSH
3085: LD_INT 3
3087: PUSH
3088: LD_INT 0
3090: PUSH
3091: LD_INT 0
3093: PUSH
3094: EMPTY
3095: LIST
3096: LIST
3097: LIST
3098: LIST
3099: LIST
3100: LIST
3101: PUSH
3102: LD_INT 8
3104: PUSH
3105: LD_INT 68
3107: PUSH
3108: LD_INT 130
3110: PUSH
3111: LD_INT 1
3113: PUSH
3114: LD_INT 14
3116: PUSH
3117: LD_INT 10
3119: PUSH
3120: EMPTY
3121: LIST
3122: LIST
3123: LIST
3124: LIST
3125: LIST
3126: LIST
3127: PUSH
3128: LD_INT 8
3130: PUSH
3131: LD_INT 67
3133: PUSH
3134: LD_INT 110
3136: PUSH
3137: LD_INT 2
3139: PUSH
3140: LD_INT 11
3142: PUSH
3143: LD_INT 12
3145: PUSH
3146: EMPTY
3147: LIST
3148: LIST
3149: LIST
3150: LIST
3151: LIST
3152: LIST
3153: PUSH
3154: LD_INT 28
3156: PUSH
3157: LD_INT 71
3159: PUSH
3160: LD_INT 136
3162: PUSH
3163: LD_INT 2
3165: PUSH
3166: LD_INT 0
3168: PUSH
3169: LD_INT 0
3171: PUSH
3172: EMPTY
3173: LIST
3174: LIST
3175: LIST
3176: LIST
3177: LIST
3178: LIST
3179: PUSH
3180: LD_INT 28
3182: PUSH
3183: LD_INT 73
3185: PUSH
3186: LD_INT 141
3188: PUSH
3189: LD_INT 2
3191: PUSH
3192: LD_INT 0
3194: PUSH
3195: LD_INT 0
3197: PUSH
3198: EMPTY
3199: LIST
3200: LIST
3201: LIST
3202: LIST
3203: LIST
3204: LIST
3205: PUSH
3206: LD_INT 30
3208: PUSH
3209: LD_INT 75
3211: PUSH
3212: LD_INT 145
3214: PUSH
3215: LD_INT 2
3217: PUSH
3218: LD_INT 0
3220: PUSH
3221: LD_INT 0
3223: PUSH
3224: EMPTY
3225: LIST
3226: LIST
3227: LIST
3228: LIST
3229: LIST
3230: LIST
3231: PUSH
3232: LD_INT 5
3234: PUSH
3235: LD_INT 111
3237: PUSH
3238: LD_INT 138
3240: PUSH
3241: LD_INT 4
3243: PUSH
3244: LD_INT 0
3246: PUSH
3247: LD_INT 0
3249: PUSH
3250: EMPTY
3251: LIST
3252: LIST
3253: LIST
3254: LIST
3255: LIST
3256: LIST
3257: PUSH
3258: LD_INT 33
3260: PUSH
3261: LD_INT 104
3263: PUSH
3264: LD_INT 130
3266: PUSH
3267: LD_INT 3
3269: PUSH
3270: LD_INT 0
3272: PUSH
3273: LD_INT 0
3275: PUSH
3276: EMPTY
3277: LIST
3278: LIST
3279: LIST
3280: LIST
3281: LIST
3282: LIST
3283: PUSH
3284: LD_INT 33
3286: PUSH
3287: LD_INT 110
3289: PUSH
3290: LD_INT 142
3292: PUSH
3293: LD_INT 5
3295: PUSH
3296: LD_INT 0
3298: PUSH
3299: LD_INT 0
3301: PUSH
3302: EMPTY
3303: LIST
3304: LIST
3305: LIST
3306: LIST
3307: LIST
3308: LIST
3309: PUSH
3310: LD_INT 33
3312: PUSH
3313: LD_INT 91
3315: PUSH
3316: LD_INT 131
3318: PUSH
3319: LD_INT 5
3321: PUSH
3322: LD_INT 0
3324: PUSH
3325: LD_INT 0
3327: PUSH
3328: EMPTY
3329: LIST
3330: LIST
3331: LIST
3332: LIST
3333: LIST
3334: LIST
3335: PUSH
3336: LD_INT 33
3338: PUSH
3339: LD_INT 107
3341: PUSH
3342: LD_INT 157
3344: PUSH
3345: LD_INT 5
3347: PUSH
3348: LD_INT 0
3350: PUSH
3351: LD_INT 0
3353: PUSH
3354: EMPTY
3355: LIST
3356: LIST
3357: LIST
3358: LIST
3359: LIST
3360: LIST
3361: PUSH
3362: LD_INT 33
3364: PUSH
3365: LD_INT 104
3367: PUSH
3368: LD_INT 160
3370: PUSH
3371: LD_INT 5
3373: PUSH
3374: LD_INT 0
3376: PUSH
3377: LD_INT 0
3379: PUSH
3380: EMPTY
3381: LIST
3382: LIST
3383: LIST
3384: LIST
3385: LIST
3386: LIST
3387: PUSH
3388: LD_INT 33
3390: PUSH
3391: LD_INT 101
3393: PUSH
3394: LD_INT 162
3396: PUSH
3397: LD_INT 5
3399: PUSH
3400: LD_INT 0
3402: PUSH
3403: LD_INT 0
3405: PUSH
3406: EMPTY
3407: LIST
3408: LIST
3409: LIST
3410: LIST
3411: LIST
3412: LIST
3413: PUSH
3414: LD_INT 32
3416: PUSH
3417: LD_INT 87
3419: PUSH
3420: LD_INT 157
3422: PUSH
3423: LD_INT 5
3425: PUSH
3426: LD_INT 0
3428: PUSH
3429: LD_INT 0
3431: PUSH
3432: EMPTY
3433: LIST
3434: LIST
3435: LIST
3436: LIST
3437: LIST
3438: LIST
3439: PUSH
3440: LD_INT 32
3442: PUSH
3443: LD_INT 82
3445: PUSH
3446: LD_INT 158
3448: PUSH
3449: LD_INT 5
3451: PUSH
3452: LD_INT 0
3454: PUSH
3455: LD_INT 0
3457: PUSH
3458: EMPTY
3459: LIST
3460: LIST
3461: LIST
3462: LIST
3463: LIST
3464: LIST
3465: PUSH
3466: LD_INT 33
3468: PUSH
3469: LD_INT 91
3471: PUSH
3472: LD_INT 118
3474: PUSH
3475: LD_INT 4
3477: PUSH
3478: LD_INT 0
3480: PUSH
3481: LD_INT 0
3483: PUSH
3484: EMPTY
3485: LIST
3486: LIST
3487: LIST
3488: LIST
3489: LIST
3490: LIST
3491: PUSH
3492: LD_INT 33
3494: PUSH
3495: LD_INT 89
3497: PUSH
3498: LD_INT 107
3500: PUSH
3501: LD_INT 4
3503: PUSH
3504: LD_INT 0
3506: PUSH
3507: LD_INT 0
3509: PUSH
3510: EMPTY
3511: LIST
3512: LIST
3513: LIST
3514: LIST
3515: LIST
3516: LIST
3517: PUSH
3518: LD_INT 5
3520: PUSH
3521: LD_INT 86
3523: PUSH
3524: LD_INT 96
3526: PUSH
3527: LD_INT 3
3529: PUSH
3530: LD_INT 0
3532: PUSH
3533: LD_INT 0
3535: PUSH
3536: EMPTY
3537: LIST
3538: LIST
3539: LIST
3540: LIST
3541: LIST
3542: LIST
3543: PUSH
3544: LD_INT 33
3546: PUSH
3547: LD_INT 91
3549: PUSH
3550: LD_INT 102
3552: PUSH
3553: LD_INT 4
3555: PUSH
3556: LD_INT 0
3558: PUSH
3559: LD_INT 0
3561: PUSH
3562: EMPTY
3563: LIST
3564: LIST
3565: LIST
3566: LIST
3567: LIST
3568: LIST
3569: PUSH
3570: LD_INT 32
3572: PUSH
3573: LD_INT 80
3575: PUSH
3576: LD_INT 95
3578: PUSH
3579: LD_INT 3
3581: PUSH
3582: LD_INT 0
3584: PUSH
3585: LD_INT 0
3587: PUSH
3588: EMPTY
3589: LIST
3590: LIST
3591: LIST
3592: LIST
3593: LIST
3594: LIST
3595: PUSH
3596: LD_INT 28
3598: PUSH
3599: LD_INT 77
3601: PUSH
3602: LD_INT 105
3604: PUSH
3605: LD_INT 3
3607: PUSH
3608: LD_INT 0
3610: PUSH
3611: LD_INT 0
3613: PUSH
3614: EMPTY
3615: LIST
3616: LIST
3617: LIST
3618: LIST
3619: LIST
3620: LIST
3621: PUSH
3622: LD_INT 28
3624: PUSH
3625: LD_INT 85
3627: PUSH
3628: LD_INT 113
3630: PUSH
3631: LD_INT 3
3633: PUSH
3634: LD_INT 0
3636: PUSH
3637: LD_INT 0
3639: PUSH
3640: EMPTY
3641: LIST
3642: LIST
3643: LIST
3644: LIST
3645: LIST
3646: LIST
3647: PUSH
3648: LD_INT 28
3650: PUSH
3651: LD_INT 55
3653: PUSH
3654: LD_INT 97
3656: PUSH
3657: LD_INT 3
3659: PUSH
3660: LD_INT 0
3662: PUSH
3663: LD_INT 0
3665: PUSH
3666: EMPTY
3667: LIST
3668: LIST
3669: LIST
3670: LIST
3671: LIST
3672: LIST
3673: PUSH
3674: LD_INT 28
3676: PUSH
3677: LD_INT 88
3679: PUSH
3680: LD_INT 128
3682: PUSH
3683: LD_INT 3
3685: PUSH
3686: LD_INT 0
3688: PUSH
3689: LD_INT 0
3691: PUSH
3692: EMPTY
3693: LIST
3694: LIST
3695: LIST
3696: LIST
3697: LIST
3698: LIST
3699: PUSH
3700: LD_INT 32
3702: PUSH
3703: LD_INT 69
3705: PUSH
3706: LD_INT 101
3708: PUSH
3709: LD_INT 2
3711: PUSH
3712: LD_INT 0
3714: PUSH
3715: LD_INT 0
3717: PUSH
3718: EMPTY
3719: LIST
3720: LIST
3721: LIST
3722: LIST
3723: LIST
3724: LIST
3725: PUSH
3726: LD_INT 1
3728: PUSH
3729: LD_INT 34
3731: PUSH
3732: LD_INT 23
3734: PUSH
3735: LD_INT 4
3737: PUSH
3738: LD_INT 0
3740: PUSH
3741: LD_INT 0
3743: PUSH
3744: EMPTY
3745: LIST
3746: LIST
3747: LIST
3748: LIST
3749: LIST
3750: LIST
3751: PUSH
3752: LD_INT 8
3754: PUSH
3755: LD_INT 25
3757: PUSH
3758: LD_INT 4
3760: PUSH
3761: LD_INT 3
3763: PUSH
3764: LD_INT 11
3766: PUSH
3767: LD_INT 10
3769: PUSH
3770: EMPTY
3771: LIST
3772: LIST
3773: LIST
3774: LIST
3775: LIST
3776: LIST
3777: PUSH
3778: LD_INT 8
3780: PUSH
3781: LD_INT 15
3783: PUSH
3784: LD_INT 4
3786: PUSH
3787: LD_INT 2
3789: PUSH
3790: LD_INT 14
3792: PUSH
3793: LD_INT 12
3795: PUSH
3796: EMPTY
3797: LIST
3798: LIST
3799: LIST
3800: LIST
3801: LIST
3802: LIST
3803: PUSH
3804: LD_INT 29
3806: PUSH
3807: LD_INT 55
3809: PUSH
3810: LD_INT 35
3812: PUSH
3813: LD_INT 2
3815: PUSH
3816: LD_INT 0
3818: PUSH
3819: LD_INT 0
3821: PUSH
3822: EMPTY
3823: LIST
3824: LIST
3825: LIST
3826: LIST
3827: LIST
3828: LIST
3829: PUSH
3830: LD_INT 29
3832: PUSH
3833: LD_INT 24
3835: PUSH
3836: LD_INT 44
3838: PUSH
3839: LD_INT 2
3841: PUSH
3842: LD_INT 0
3844: PUSH
3845: LD_INT 0
3847: PUSH
3848: EMPTY
3849: LIST
3850: LIST
3851: LIST
3852: LIST
3853: LIST
3854: LIST
3855: PUSH
3856: LD_INT 34
3858: PUSH
3859: LD_INT 34
3861: PUSH
3862: LD_INT 32
3864: PUSH
3865: LD_INT 4
3867: PUSH
3868: LD_INT 0
3870: PUSH
3871: LD_INT 0
3873: PUSH
3874: EMPTY
3875: LIST
3876: LIST
3877: LIST
3878: LIST
3879: LIST
3880: LIST
3881: PUSH
3882: LD_INT 3
3884: PUSH
3885: LD_INT 14
3887: PUSH
3888: LD_INT 16
3890: PUSH
3891: LD_INT 1
3893: PUSH
3894: LD_INT 0
3896: PUSH
3897: LD_INT 0
3899: PUSH
3900: EMPTY
3901: LIST
3902: LIST
3903: LIST
3904: LIST
3905: LIST
3906: LIST
3907: PUSH
3908: LD_INT 24
3910: PUSH
3911: LD_INT 10
3913: PUSH
3914: LD_INT 16
3916: PUSH
3917: LD_INT 1
3919: PUSH
3920: LD_INT 0
3922: PUSH
3923: LD_INT 0
3925: PUSH
3926: EMPTY
3927: LIST
3928: LIST
3929: LIST
3930: LIST
3931: LIST
3932: LIST
3933: PUSH
3934: LD_INT 19
3936: PUSH
3937: LD_INT 11
3939: PUSH
3940: LD_INT 13
3942: PUSH
3943: LD_INT 2
3945: PUSH
3946: LD_INT 0
3948: PUSH
3949: LD_INT 0
3951: PUSH
3952: EMPTY
3953: LIST
3954: LIST
3955: LIST
3956: LIST
3957: LIST
3958: LIST
3959: PUSH
3960: LD_INT 18
3962: PUSH
3963: LD_INT 14
3965: PUSH
3966: LD_INT 12
3968: PUSH
3969: LD_INT 3
3971: PUSH
3972: LD_INT 0
3974: PUSH
3975: LD_INT 0
3977: PUSH
3978: EMPTY
3979: LIST
3980: LIST
3981: LIST
3982: LIST
3983: LIST
3984: LIST
3985: PUSH
3986: LD_INT 16
3988: PUSH
3989: LD_INT 14
3991: PUSH
3992: LD_INT 19
3994: PUSH
3995: LD_INT 0
3997: PUSH
3998: LD_INT 0
4000: PUSH
4001: LD_INT 0
4003: PUSH
4004: EMPTY
4005: LIST
4006: LIST
4007: LIST
4008: LIST
4009: LIST
4010: LIST
4011: PUSH
4012: LD_INT 17
4014: PUSH
4015: LD_INT 18
4017: PUSH
4018: LD_INT 20
4020: PUSH
4021: LD_INT 5
4023: PUSH
4024: LD_INT 0
4026: PUSH
4027: LD_INT 0
4029: PUSH
4030: EMPTY
4031: LIST
4032: LIST
4033: LIST
4034: LIST
4035: LIST
4036: LIST
4037: PUSH
4038: LD_INT 28
4040: PUSH
4041: LD_INT 10
4043: PUSH
4044: LD_INT 5
4046: PUSH
4047: LD_INT 1
4049: PUSH
4050: LD_INT 0
4052: PUSH
4053: LD_INT 0
4055: PUSH
4056: EMPTY
4057: LIST
4058: LIST
4059: LIST
4060: LIST
4061: LIST
4062: LIST
4063: PUSH
4064: LD_INT 28
4066: PUSH
4067: LD_INT 8
4069: PUSH
4070: LD_INT 8
4072: PUSH
4073: LD_INT 1
4075: PUSH
4076: LD_INT 0
4078: PUSH
4079: LD_INT 0
4081: PUSH
4082: EMPTY
4083: LIST
4084: LIST
4085: LIST
4086: LIST
4087: LIST
4088: LIST
4089: PUSH
4090: LD_INT 26
4092: PUSH
4093: LD_INT 19
4095: PUSH
4096: LD_INT 2
4098: PUSH
4099: LD_INT 1
4101: PUSH
4102: LD_INT 0
4104: PUSH
4105: LD_INT 0
4107: PUSH
4108: EMPTY
4109: LIST
4110: LIST
4111: LIST
4112: LIST
4113: LIST
4114: LIST
4115: PUSH
4116: LD_INT 26
4118: PUSH
4119: LD_INT 30
4121: PUSH
4122: LD_INT 2
4124: PUSH
4125: LD_INT 1
4127: PUSH
4128: LD_INT 0
4130: PUSH
4131: LD_INT 0
4133: PUSH
4134: EMPTY
4135: LIST
4136: LIST
4137: LIST
4138: LIST
4139: LIST
4140: LIST
4141: PUSH
4142: LD_INT 5
4144: PUSH
4145: LD_INT 53
4147: PUSH
4148: LD_INT 20
4150: PUSH
4151: LD_INT 4
4153: PUSH
4154: LD_INT 0
4156: PUSH
4157: LD_INT 0
4159: PUSH
4160: EMPTY
4161: LIST
4162: LIST
4163: LIST
4164: LIST
4165: LIST
4166: LIST
4167: PUSH
4168: LD_INT 32
4170: PUSH
4171: LD_INT 55
4173: PUSH
4174: LD_INT 24
4176: PUSH
4177: LD_INT 4
4179: PUSH
4180: LD_INT 0
4182: PUSH
4183: LD_INT 0
4185: PUSH
4186: EMPTY
4187: LIST
4188: LIST
4189: LIST
4190: LIST
4191: LIST
4192: LIST
4193: PUSH
4194: LD_INT 32
4196: PUSH
4197: LD_INT 61
4199: PUSH
4200: LD_INT 45
4202: PUSH
4203: LD_INT 5
4205: PUSH
4206: LD_INT 0
4208: PUSH
4209: LD_INT 0
4211: PUSH
4212: EMPTY
4213: LIST
4214: LIST
4215: LIST
4216: LIST
4217: LIST
4218: LIST
4219: PUSH
4220: LD_INT 32
4222: PUSH
4223: LD_INT 52
4225: PUSH
4226: LD_INT 51
4228: PUSH
4229: LD_INT 5
4231: PUSH
4232: LD_INT 0
4234: PUSH
4235: LD_INT 0
4237: PUSH
4238: EMPTY
4239: LIST
4240: LIST
4241: LIST
4242: LIST
4243: LIST
4244: LIST
4245: PUSH
4246: LD_INT 33
4248: PUSH
4249: LD_INT 56
4251: PUSH
4252: LD_INT 51
4254: PUSH
4255: LD_INT 5
4257: PUSH
4258: LD_INT 0
4260: PUSH
4261: LD_INT 0
4263: PUSH
4264: EMPTY
4265: LIST
4266: LIST
4267: LIST
4268: LIST
4269: LIST
4270: LIST
4271: PUSH
4272: LD_INT 33
4274: PUSH
4275: LD_INT 62
4277: PUSH
4278: LD_INT 49
4280: PUSH
4281: LD_INT 5
4283: PUSH
4284: LD_INT 0
4286: PUSH
4287: LD_INT 0
4289: PUSH
4290: EMPTY
4291: LIST
4292: LIST
4293: LIST
4294: LIST
4295: LIST
4296: LIST
4297: PUSH
4298: LD_INT 33
4300: PUSH
4301: LD_INT 41
4303: PUSH
4304: LD_INT 47
4306: PUSH
4307: LD_INT 5
4309: PUSH
4310: LD_INT 0
4312: PUSH
4313: LD_INT 0
4315: PUSH
4316: EMPTY
4317: LIST
4318: LIST
4319: LIST
4320: LIST
4321: LIST
4322: LIST
4323: PUSH
4324: LD_INT 33
4326: PUSH
4327: LD_INT 33
4329: PUSH
4330: LD_INT 52
4332: PUSH
4333: LD_INT 5
4335: PUSH
4336: LD_INT 0
4338: PUSH
4339: LD_INT 0
4341: PUSH
4342: EMPTY
4343: LIST
4344: LIST
4345: LIST
4346: LIST
4347: LIST
4348: LIST
4349: PUSH
4350: LD_INT 5
4352: PUSH
4353: LD_INT 31
4355: PUSH
4356: LD_INT 40
4358: PUSH
4359: LD_INT 0
4361: PUSH
4362: LD_INT 0
4364: PUSH
4365: LD_INT 0
4367: PUSH
4368: EMPTY
4369: LIST
4370: LIST
4371: LIST
4372: LIST
4373: LIST
4374: LIST
4375: PUSH
4376: LD_INT 33
4378: PUSH
4379: LD_INT 65
4381: PUSH
4382: LD_INT 37
4384: PUSH
4385: LD_INT 5
4387: PUSH
4388: LD_INT 0
4390: PUSH
4391: LD_INT 0
4393: PUSH
4394: EMPTY
4395: LIST
4396: LIST
4397: LIST
4398: LIST
4399: LIST
4400: LIST
4401: PUSH
4402: LD_INT 33
4404: PUSH
4405: LD_INT 63
4407: PUSH
4408: LD_INT 29
4410: PUSH
4411: LD_INT 4
4413: PUSH
4414: LD_INT 0
4416: PUSH
4417: LD_INT 0
4419: PUSH
4420: EMPTY
4421: LIST
4422: LIST
4423: LIST
4424: LIST
4425: LIST
4426: LIST
4427: PUSH
4428: LD_INT 33
4430: PUSH
4431: LD_INT 54
4433: PUSH
4434: LD_INT 11
4436: PUSH
4437: LD_INT 4
4439: PUSH
4440: LD_INT 0
4442: PUSH
4443: LD_INT 0
4445: PUSH
4446: EMPTY
4447: LIST
4448: LIST
4449: LIST
4450: LIST
4451: LIST
4452: LIST
4453: PUSH
4454: LD_INT 33
4456: PUSH
4457: LD_INT 51
4459: PUSH
4460: LD_INT 6
4462: PUSH
4463: LD_INT 4
4465: PUSH
4466: LD_INT 0
4468: PUSH
4469: LD_INT 0
4471: PUSH
4472: EMPTY
4473: LIST
4474: LIST
4475: LIST
4476: LIST
4477: LIST
4478: LIST
4479: PUSH
4480: LD_INT 26
4482: PUSH
4483: LD_INT 39
4485: PUSH
4486: LD_INT 25
4488: PUSH
4489: LD_INT 0
4491: PUSH
4492: LD_INT 0
4494: PUSH
4495: LD_INT 0
4497: PUSH
4498: EMPTY
4499: LIST
4500: LIST
4501: LIST
4502: LIST
4503: LIST
4504: LIST
4505: PUSH
4506: LD_INT 26
4508: PUSH
4509: LD_INT 37
4511: PUSH
4512: LD_INT 21
4514: PUSH
4515: LD_INT 0
4517: PUSH
4518: LD_INT 0
4520: PUSH
4521: LD_INT 0
4523: PUSH
4524: EMPTY
4525: LIST
4526: LIST
4527: LIST
4528: LIST
4529: LIST
4530: LIST
4531: PUSH
4532: LD_INT 32
4534: PUSH
4535: LD_INT 35
4537: PUSH
4538: LD_INT 17
4540: PUSH
4541: LD_INT 4
4543: PUSH
4544: LD_INT 0
4546: PUSH
4547: LD_INT 0
4549: PUSH
4550: EMPTY
4551: LIST
4552: LIST
4553: LIST
4554: LIST
4555: LIST
4556: LIST
4557: PUSH
4558: LD_INT 33
4560: PUSH
4561: LD_INT 35
4563: PUSH
4564: LD_INT 28
4566: PUSH
4567: LD_INT 4
4569: PUSH
4570: LD_INT 0
4572: PUSH
4573: LD_INT 0
4575: PUSH
4576: EMPTY
4577: LIST
4578: LIST
4579: LIST
4580: LIST
4581: LIST
4582: LIST
4583: PUSH
4584: LD_INT 33
4586: PUSH
4587: LD_INT 28
4589: PUSH
4590: LD_INT 46
4592: PUSH
4593: LD_INT 5
4595: PUSH
4596: LD_INT 0
4598: PUSH
4599: LD_INT 0
4601: PUSH
4602: EMPTY
4603: LIST
4604: LIST
4605: LIST
4606: LIST
4607: LIST
4608: LIST
4609: PUSH
4610: LD_INT 33
4612: PUSH
4613: LD_INT 31
4615: PUSH
4616: LD_INT 6
4618: PUSH
4619: LD_INT 4
4621: PUSH
4622: LD_INT 0
4624: PUSH
4625: LD_INT 0
4627: PUSH
4628: EMPTY
4629: LIST
4630: LIST
4631: LIST
4632: LIST
4633: LIST
4634: LIST
4635: PUSH
4636: LD_INT 26
4638: PUSH
4639: LD_INT 54
4641: PUSH
4642: LD_INT 38
4644: PUSH
4645: LD_INT 4
4647: PUSH
4648: LD_INT 0
4650: PUSH
4651: LD_INT 0
4653: PUSH
4654: EMPTY
4655: LIST
4656: LIST
4657: LIST
4658: LIST
4659: LIST
4660: LIST
4661: PUSH
4662: LD_INT 33
4664: PUSH
4665: LD_INT 207
4667: PUSH
4668: LD_INT 167
4670: PUSH
4671: LD_INT 3
4673: PUSH
4674: LD_INT 0
4676: PUSH
4677: LD_INT 0
4679: PUSH
4680: EMPTY
4681: LIST
4682: LIST
4683: LIST
4684: LIST
4685: LIST
4686: LIST
4687: PUSH
4688: EMPTY
4689: LIST
4690: LIST
4691: LIST
4692: LIST
4693: LIST
4694: LIST
4695: LIST
4696: LIST
4697: LIST
4698: LIST
4699: LIST
4700: LIST
4701: LIST
4702: LIST
4703: LIST
4704: LIST
4705: LIST
4706: LIST
4707: LIST
4708: LIST
4709: LIST
4710: LIST
4711: LIST
4712: LIST
4713: LIST
4714: LIST
4715: LIST
4716: LIST
4717: LIST
4718: LIST
4719: LIST
4720: LIST
4721: LIST
4722: LIST
4723: LIST
4724: LIST
4725: LIST
4726: LIST
4727: LIST
4728: LIST
4729: LIST
4730: LIST
4731: LIST
4732: LIST
4733: LIST
4734: LIST
4735: LIST
4736: LIST
4737: LIST
4738: LIST
4739: LIST
4740: LIST
4741: LIST
4742: LIST
4743: LIST
4744: LIST
4745: LIST
4746: LIST
4747: LIST
4748: LIST
4749: LIST
4750: LIST
4751: LIST
4752: LIST
4753: LIST
4754: LIST
4755: LIST
4756: LIST
4757: LIST
4758: LIST
4759: LIST
4760: LIST
4761: LIST
4762: LIST
4763: LIST
4764: LIST
4765: LIST
4766: LIST
4767: LIST
4768: LIST
4769: LIST
4770: LIST
4771: LIST
4772: ST_TO_ADDR
// for i in tmp do
4773: LD_ADDR_VAR 0 2
4777: PUSH
4778: LD_VAR 0 4
4782: PUSH
4783: FOR_IN
4784: IFFALSE 5015
// begin uc_side := side ;
4786: LD_ADDR_OWVAR 20
4790: PUSH
4791: LD_VAR 0 5
4795: ST_TO_ADDR
// uc_nation := nation_russian ;
4796: LD_ADDR_OWVAR 21
4800: PUSH
4801: LD_INT 3
4803: ST_TO_ADDR
// bc_type := i [ 1 ] ;
4804: LD_ADDR_OWVAR 42
4808: PUSH
4809: LD_VAR 0 2
4813: PUSH
4814: LD_INT 1
4816: ARRAY
4817: ST_TO_ADDR
// bc_level := rand ( 5 , 6 ) ;
4818: LD_ADDR_OWVAR 43
4822: PUSH
4823: LD_INT 5
4825: PPUSH
4826: LD_INT 6
4828: PPUSH
4829: CALL_OW 12
4833: ST_TO_ADDR
// bc_kind1 := i [ 5 ] ;
4834: LD_ADDR_OWVAR 44
4838: PUSH
4839: LD_VAR 0 2
4843: PUSH
4844: LD_INT 5
4846: ARRAY
4847: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
4848: LD_ADDR_OWVAR 45
4852: PUSH
4853: LD_VAR 0 2
4857: PUSH
4858: LD_INT 6
4860: ARRAY
4861: ST_TO_ADDR
// sr := 0 ;
4862: LD_ADDR_VAR 0 6
4866: PUSH
4867: LD_INT 0
4869: ST_TO_ADDR
// if i [ 1 ] = b_oil_mine then
4870: LD_VAR 0 2
4874: PUSH
4875: LD_INT 1
4877: ARRAY
4878: PUSH
4879: LD_INT 29
4881: EQUAL
4882: IFFALSE 4894
// sr := mat_oil else
4884: LD_ADDR_VAR 0 6
4888: PUSH
4889: LD_INT 2
4891: ST_TO_ADDR
4892: GO 4916
// if i [ 1 ] = b_siberite_mine then
4894: LD_VAR 0 2
4898: PUSH
4899: LD_INT 1
4901: ARRAY
4902: PUSH
4903: LD_INT 30
4905: EQUAL
4906: IFFALSE 4916
// sr := mat_siberit ;
4908: LD_ADDR_VAR 0 6
4912: PUSH
4913: LD_INT 3
4915: ST_TO_ADDR
// if sr then
4916: LD_VAR 0 6
4920: IFFALSE 4976
// begin CreateDepositXY ( i [ 2 ] , i [ 3 ] , sr ) ;
4922: LD_VAR 0 2
4926: PUSH
4927: LD_INT 2
4929: ARRAY
4930: PPUSH
4931: LD_VAR 0 2
4935: PUSH
4936: LD_INT 3
4938: ARRAY
4939: PPUSH
4940: LD_VAR 0 6
4944: PPUSH
4945: CALL_OW 62
// SetResourceVisibility ( i [ 2 ] , i [ 3 ] , side ) ;
4949: LD_VAR 0 2
4953: PUSH
4954: LD_INT 2
4956: ARRAY
4957: PPUSH
4958: LD_VAR 0 2
4962: PUSH
4963: LD_INT 3
4965: ARRAY
4966: PPUSH
4967: LD_VAR 0 5
4971: PPUSH
4972: CALL_OW 441
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
4976: LD_ADDR_VAR 0 3
4980: PUSH
4981: LD_VAR 0 2
4985: PUSH
4986: LD_INT 2
4988: ARRAY
4989: PPUSH
4990: LD_VAR 0 2
4994: PUSH
4995: LD_INT 3
4997: ARRAY
4998: PPUSH
4999: LD_VAR 0 2
5003: PUSH
5004: LD_INT 4
5006: ARRAY
5007: PPUSH
5008: CALL_OW 47
5012: ST_TO_ADDR
// end ;
5013: GO 4783
5015: POP
5016: POP
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
5017: LD_ADDR_VAR 0 7
5021: PUSH
5022: LD_INT 22
5024: PUSH
5025: LD_VAR 0 5
5029: PUSH
5030: EMPTY
5031: LIST
5032: LIST
5033: PUSH
5034: LD_INT 30
5036: PUSH
5037: LD_INT 1
5039: PUSH
5040: EMPTY
5041: LIST
5042: LIST
5043: PUSH
5044: EMPTY
5045: LIST
5046: LIST
5047: PPUSH
5048: CALL_OW 69
5052: ST_TO_ADDR
// if not depot then
5053: LD_VAR 0 7
5057: NOT
5058: IFFALSE 5062
// exit ;
5060: GO 5402
// base := PrepareBase ( depot [ 2 ] , rus2Base , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 3000 , 300 , 100 ] , [ 12 , 6 , 6 , 4 ] ) ;
5062: LD_ADDR_VAR 0 8
5066: PUSH
5067: LD_VAR 0 7
5071: PUSH
5072: LD_INT 2
5074: ARRAY
5075: PPUSH
5076: LD_INT 15
5078: PPUSH
5079: LD_INT 0
5081: PPUSH
5082: LD_INT 6
5084: PUSH
5085: LD_INT 7
5087: PUSH
5088: LD_INT 8
5090: PUSH
5091: EMPTY
5092: LIST
5093: LIST
5094: LIST
5095: PUSH
5096: LD_OWVAR 67
5100: ARRAY
5101: PPUSH
5102: LD_INT 3000
5104: PUSH
5105: LD_INT 300
5107: PUSH
5108: LD_INT 100
5110: PUSH
5111: EMPTY
5112: LIST
5113: LIST
5114: LIST
5115: PPUSH
5116: LD_INT 12
5118: PUSH
5119: LD_INT 6
5121: PUSH
5122: LD_INT 6
5124: PUSH
5125: LD_INT 4
5127: PUSH
5128: EMPTY
5129: LIST
5130: LIST
5131: LIST
5132: LIST
5133: PPUSH
5134: CALL 29846 0 6
5138: ST_TO_ADDR
// if not base then
5139: LD_VAR 0 8
5143: NOT
5144: IFFALSE 5148
// exit ;
5146: GO 5402
// mc_bases := Replace ( mc_bases , mc_rus_1 , base ) ;
5148: LD_ADDR_EXP 36
5152: PUSH
5153: LD_EXP 36
5157: PPUSH
5158: LD_EXP 7
5162: PPUSH
5163: LD_VAR 0 8
5167: PPUSH
5168: CALL_OW 1
5172: ST_TO_ADDR
// base := PrepareBase ( depot [ 1 ] , rus1Base , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 3000 , 300 , 100 ] , [ 12 , 6 , 6 , 4 ] ) ;
5173: LD_ADDR_VAR 0 8
5177: PUSH
5178: LD_VAR 0 7
5182: PUSH
5183: LD_INT 1
5185: ARRAY
5186: PPUSH
5187: LD_INT 11
5189: PPUSH
5190: LD_INT 0
5192: PPUSH
5193: LD_INT 6
5195: PUSH
5196: LD_INT 7
5198: PUSH
5199: LD_INT 8
5201: PUSH
5202: EMPTY
5203: LIST
5204: LIST
5205: LIST
5206: PUSH
5207: LD_OWVAR 67
5211: ARRAY
5212: PPUSH
5213: LD_INT 3000
5215: PUSH
5216: LD_INT 300
5218: PUSH
5219: LD_INT 100
5221: PUSH
5222: EMPTY
5223: LIST
5224: LIST
5225: LIST
5226: PPUSH
5227: LD_INT 12
5229: PUSH
5230: LD_INT 6
5232: PUSH
5233: LD_INT 6
5235: PUSH
5236: LD_INT 4
5238: PUSH
5239: EMPTY
5240: LIST
5241: LIST
5242: LIST
5243: LIST
5244: PPUSH
5245: CALL 29846 0 6
5249: ST_TO_ADDR
// if not base then
5250: LD_VAR 0 8
5254: NOT
5255: IFFALSE 5259
// exit ;
5257: GO 5402
// mc_bases := Replace ( mc_bases , mc_rus_2 , base ) ;
5259: LD_ADDR_EXP 36
5263: PUSH
5264: LD_EXP 36
5268: PPUSH
5269: LD_EXP 8
5273: PPUSH
5274: LD_VAR 0 8
5278: PPUSH
5279: CALL_OW 1
5283: ST_TO_ADDR
// ruOutpost := PrepareBase ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_depot ] ] ) [ 1 ] , ruOutpostArea , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 500 , 100 , 10 ] , [ [ 6 , 7 , 8 ] [ Difficulty ] , 2 , 0 , 1 ] ) ;
5284: LD_ADDR_EXP 14
5288: PUSH
5289: LD_INT 22
5291: PUSH
5292: LD_INT 3
5294: PUSH
5295: EMPTY
5296: LIST
5297: LIST
5298: PUSH
5299: LD_INT 30
5301: PUSH
5302: LD_INT 0
5304: PUSH
5305: EMPTY
5306: LIST
5307: LIST
5308: PUSH
5309: EMPTY
5310: LIST
5311: LIST
5312: PPUSH
5313: CALL_OW 69
5317: PUSH
5318: LD_INT 1
5320: ARRAY
5321: PPUSH
5322: LD_INT 25
5324: PPUSH
5325: LD_INT 0
5327: PPUSH
5328: LD_INT 6
5330: PUSH
5331: LD_INT 7
5333: PUSH
5334: LD_INT 8
5336: PUSH
5337: EMPTY
5338: LIST
5339: LIST
5340: LIST
5341: PUSH
5342: LD_OWVAR 67
5346: ARRAY
5347: PPUSH
5348: LD_INT 500
5350: PUSH
5351: LD_INT 100
5353: PUSH
5354: LD_INT 10
5356: PUSH
5357: EMPTY
5358: LIST
5359: LIST
5360: LIST
5361: PPUSH
5362: LD_INT 6
5364: PUSH
5365: LD_INT 7
5367: PUSH
5368: LD_INT 8
5370: PUSH
5371: EMPTY
5372: LIST
5373: LIST
5374: LIST
5375: PUSH
5376: LD_OWVAR 67
5380: ARRAY
5381: PUSH
5382: LD_INT 2
5384: PUSH
5385: LD_INT 0
5387: PUSH
5388: LD_INT 1
5390: PUSH
5391: EMPTY
5392: LIST
5393: LIST
5394: LIST
5395: LIST
5396: PPUSH
5397: CALL 29846 0 6
5401: ST_TO_ADDR
// end ;
5402: LD_VAR 0 1
5406: RET
// export function PrepareLegion ; var i , b , veh , tmp , cameras , side , sr , depot , base ; begin
5407: LD_INT 0
5409: PPUSH
5410: PPUSH
5411: PPUSH
5412: PPUSH
5413: PPUSH
5414: PPUSH
5415: PPUSH
5416: PPUSH
5417: PPUSH
5418: PPUSH
// PrepareNature ( 0 , 0 , 6 , 0 , 0 , 0 , 0 , legApe , 0 ) ;
5419: LD_INT 0
5421: PPUSH
5422: LD_INT 0
5424: PPUSH
5425: LD_INT 6
5427: PPUSH
5428: LD_INT 0
5430: PPUSH
5431: LD_INT 0
5433: PPUSH
5434: LD_INT 0
5436: PPUSH
5437: LD_INT 0
5439: PPUSH
5440: LD_INT 8
5442: PPUSH
5443: LD_INT 0
5445: PPUSH
5446: CALL 54227 0 9
// side := 8 ;
5450: LD_ADDR_VAR 0 7
5454: PUSH
5455: LD_INT 8
5457: ST_TO_ADDR
// tmp := AreaToList ( minesArea , 0 ) ;
5458: LD_ADDR_VAR 0 5
5462: PUSH
5463: LD_INT 20
5465: PPUSH
5466: LD_INT 0
5468: PPUSH
5469: CALL_OW 517
5473: ST_TO_ADDR
// if tmp then
5474: LD_VAR 0 5
5478: IFFALSE 5606
// begin for i = 1 to tmp [ 1 ] do
5480: LD_ADDR_VAR 0 2
5484: PUSH
5485: DOUBLE
5486: LD_INT 1
5488: DEC
5489: ST_TO_ADDR
5490: LD_VAR 0 5
5494: PUSH
5495: LD_INT 1
5497: ARRAY
5498: PUSH
5499: FOR_TO
5500: IFFALSE 5604
// begin PlaceMine ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side , 0 ) ;
5502: LD_VAR 0 5
5506: PUSH
5507: LD_INT 1
5509: ARRAY
5510: PUSH
5511: LD_VAR 0 2
5515: ARRAY
5516: PPUSH
5517: LD_VAR 0 5
5521: PUSH
5522: LD_INT 2
5524: ARRAY
5525: PUSH
5526: LD_VAR 0 2
5530: ARRAY
5531: PPUSH
5532: LD_VAR 0 7
5536: PPUSH
5537: LD_INT 0
5539: PPUSH
5540: CALL_OW 454
// staticMines := Insert ( staticMines , staticMines + 1 , [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ) ;
5544: LD_ADDR_EXP 16
5548: PUSH
5549: LD_EXP 16
5553: PPUSH
5554: LD_EXP 16
5558: PUSH
5559: LD_INT 1
5561: PLUS
5562: PPUSH
5563: LD_VAR 0 5
5567: PUSH
5568: LD_INT 1
5570: ARRAY
5571: PUSH
5572: LD_VAR 0 2
5576: ARRAY
5577: PUSH
5578: LD_VAR 0 5
5582: PUSH
5583: LD_INT 2
5585: ARRAY
5586: PUSH
5587: LD_VAR 0 2
5591: ARRAY
5592: PUSH
5593: EMPTY
5594: LIST
5595: LIST
5596: PPUSH
5597: CALL_OW 2
5601: ST_TO_ADDR
// end ;
5602: GO 5499
5604: POP
5605: POP
// end ; cameras := [ [ 165 , 156 ] , [ 143 , 145 ] , [ 152 , 165 ] , [ 123 , 153 ] , [ 161 , 215 ] , [ 172 , 100 ] , [ 148 , 83 ] , [ 122 , 68 ] , [ 105 , 74 ] , [ 113 , 97 ] ] ;
5606: LD_ADDR_VAR 0 6
5610: PUSH
5611: LD_INT 165
5613: PUSH
5614: LD_INT 156
5616: PUSH
5617: EMPTY
5618: LIST
5619: LIST
5620: PUSH
5621: LD_INT 143
5623: PUSH
5624: LD_INT 145
5626: PUSH
5627: EMPTY
5628: LIST
5629: LIST
5630: PUSH
5631: LD_INT 152
5633: PUSH
5634: LD_INT 165
5636: PUSH
5637: EMPTY
5638: LIST
5639: LIST
5640: PUSH
5641: LD_INT 123
5643: PUSH
5644: LD_INT 153
5646: PUSH
5647: EMPTY
5648: LIST
5649: LIST
5650: PUSH
5651: LD_INT 161
5653: PUSH
5654: LD_INT 215
5656: PUSH
5657: EMPTY
5658: LIST
5659: LIST
5660: PUSH
5661: LD_INT 172
5663: PUSH
5664: LD_INT 100
5666: PUSH
5667: EMPTY
5668: LIST
5669: LIST
5670: PUSH
5671: LD_INT 148
5673: PUSH
5674: LD_INT 83
5676: PUSH
5677: EMPTY
5678: LIST
5679: LIST
5680: PUSH
5681: LD_INT 122
5683: PUSH
5684: LD_INT 68
5686: PUSH
5687: EMPTY
5688: LIST
5689: LIST
5690: PUSH
5691: LD_INT 105
5693: PUSH
5694: LD_INT 74
5696: PUSH
5697: EMPTY
5698: LIST
5699: LIST
5700: PUSH
5701: LD_INT 113
5703: PUSH
5704: LD_INT 97
5706: PUSH
5707: EMPTY
5708: LIST
5709: LIST
5710: PUSH
5711: EMPTY
5712: LIST
5713: LIST
5714: LIST
5715: LIST
5716: LIST
5717: LIST
5718: LIST
5719: LIST
5720: LIST
5721: LIST
5722: ST_TO_ADDR
// for i in cameras do
5723: LD_ADDR_VAR 0 2
5727: PUSH
5728: LD_VAR 0 6
5732: PUSH
5733: FOR_IN
5734: IFFALSE 5765
// HiddenCamera ( i [ 1 ] , i [ 2 ] , side ) ;
5736: LD_VAR 0 2
5740: PUSH
5741: LD_INT 1
5743: ARRAY
5744: PPUSH
5745: LD_VAR 0 2
5749: PUSH
5750: LD_INT 2
5752: ARRAY
5753: PPUSH
5754: LD_VAR 0 7
5758: PPUSH
5759: CALL_OW 244
5763: GO 5733
5765: POP
5766: POP
// tmp := [ [ 1 , 144 , 110 , 1 , 0 , 0 ] , [ 3 , 151 , 118 , 0 , 0 , 0 ] , [ 8 , 158 , 110 , 4 , 10 , 15 ] , [ 23 , 154 , 121 , 5 , 0 , 0 ] , [ 20 , 155 , 118 , 4 , 0 , 0 ] , [ 21 , 151 , 122 , 0 , 0 , 0 ] , [ 18 , 148 , 118 , 1 , 0 , 0 ] , [ 17 , 147 , 114 , 2 , 0 , 0 ] , [ 29 , 163 , 120 , 5 , 0 , 0 ] , [ 27 , 137 , 116 , 3 , 0 , 0 ] , [ 27 , 133 , 111 , 1 , 0 , 0 ] , [ 27 , 132 , 106 , 4 , 0 , 0 ] , [ 26 , 137 , 111 , 0 , 0 , 0 ] , [ 8 , 141 , 117 , 1 , 13 , 11 ] , [ 30 , 140 , 128 , 1 , 0 , 0 ] , [ 5 , 146 , 96 , 3 , 0 , 0 ] , [ 32 , 150 , 98 , 3 , 0 , 0 ] , [ 32 , 142 , 95 , 3 , 0 , 0 ] , [ 32 , 159 , 104 , 3 , 0 , 0 ] , [ 32 , 133 , 95 , 3 , 0 , 0 ] , [ 32 , 131 , 102 , 2 , 0 , 0 ] , [ 32 , 162 , 134 , 0 , 0 , 0 ] , [ 32 , 149 , 132 , 0 , 0 , 0 ] , [ 26 , 143 , 122 , 4 , 0 , 0 ] , [ 26 , 164 , 116 , 2 , 0 , 0 ] , ] ;
5767: LD_ADDR_VAR 0 5
5771: PUSH
5772: LD_INT 1
5774: PUSH
5775: LD_INT 144
5777: PUSH
5778: LD_INT 110
5780: PUSH
5781: LD_INT 1
5783: PUSH
5784: LD_INT 0
5786: PUSH
5787: LD_INT 0
5789: PUSH
5790: EMPTY
5791: LIST
5792: LIST
5793: LIST
5794: LIST
5795: LIST
5796: LIST
5797: PUSH
5798: LD_INT 3
5800: PUSH
5801: LD_INT 151
5803: PUSH
5804: LD_INT 118
5806: PUSH
5807: LD_INT 0
5809: PUSH
5810: LD_INT 0
5812: PUSH
5813: LD_INT 0
5815: PUSH
5816: EMPTY
5817: LIST
5818: LIST
5819: LIST
5820: LIST
5821: LIST
5822: LIST
5823: PUSH
5824: LD_INT 8
5826: PUSH
5827: LD_INT 158
5829: PUSH
5830: LD_INT 110
5832: PUSH
5833: LD_INT 4
5835: PUSH
5836: LD_INT 10
5838: PUSH
5839: LD_INT 15
5841: PUSH
5842: EMPTY
5843: LIST
5844: LIST
5845: LIST
5846: LIST
5847: LIST
5848: LIST
5849: PUSH
5850: LD_INT 23
5852: PUSH
5853: LD_INT 154
5855: PUSH
5856: LD_INT 121
5858: PUSH
5859: LD_INT 5
5861: PUSH
5862: LD_INT 0
5864: PUSH
5865: LD_INT 0
5867: PUSH
5868: EMPTY
5869: LIST
5870: LIST
5871: LIST
5872: LIST
5873: LIST
5874: LIST
5875: PUSH
5876: LD_INT 20
5878: PUSH
5879: LD_INT 155
5881: PUSH
5882: LD_INT 118
5884: PUSH
5885: LD_INT 4
5887: PUSH
5888: LD_INT 0
5890: PUSH
5891: LD_INT 0
5893: PUSH
5894: EMPTY
5895: LIST
5896: LIST
5897: LIST
5898: LIST
5899: LIST
5900: LIST
5901: PUSH
5902: LD_INT 21
5904: PUSH
5905: LD_INT 151
5907: PUSH
5908: LD_INT 122
5910: PUSH
5911: LD_INT 0
5913: PUSH
5914: LD_INT 0
5916: PUSH
5917: LD_INT 0
5919: PUSH
5920: EMPTY
5921: LIST
5922: LIST
5923: LIST
5924: LIST
5925: LIST
5926: LIST
5927: PUSH
5928: LD_INT 18
5930: PUSH
5931: LD_INT 148
5933: PUSH
5934: LD_INT 118
5936: PUSH
5937: LD_INT 1
5939: PUSH
5940: LD_INT 0
5942: PUSH
5943: LD_INT 0
5945: PUSH
5946: EMPTY
5947: LIST
5948: LIST
5949: LIST
5950: LIST
5951: LIST
5952: LIST
5953: PUSH
5954: LD_INT 17
5956: PUSH
5957: LD_INT 147
5959: PUSH
5960: LD_INT 114
5962: PUSH
5963: LD_INT 2
5965: PUSH
5966: LD_INT 0
5968: PUSH
5969: LD_INT 0
5971: PUSH
5972: EMPTY
5973: LIST
5974: LIST
5975: LIST
5976: LIST
5977: LIST
5978: LIST
5979: PUSH
5980: LD_INT 29
5982: PUSH
5983: LD_INT 163
5985: PUSH
5986: LD_INT 120
5988: PUSH
5989: LD_INT 5
5991: PUSH
5992: LD_INT 0
5994: PUSH
5995: LD_INT 0
5997: PUSH
5998: EMPTY
5999: LIST
6000: LIST
6001: LIST
6002: LIST
6003: LIST
6004: LIST
6005: PUSH
6006: LD_INT 27
6008: PUSH
6009: LD_INT 137
6011: PUSH
6012: LD_INT 116
6014: PUSH
6015: LD_INT 3
6017: PUSH
6018: LD_INT 0
6020: PUSH
6021: LD_INT 0
6023: PUSH
6024: EMPTY
6025: LIST
6026: LIST
6027: LIST
6028: LIST
6029: LIST
6030: LIST
6031: PUSH
6032: LD_INT 27
6034: PUSH
6035: LD_INT 133
6037: PUSH
6038: LD_INT 111
6040: PUSH
6041: LD_INT 1
6043: PUSH
6044: LD_INT 0
6046: PUSH
6047: LD_INT 0
6049: PUSH
6050: EMPTY
6051: LIST
6052: LIST
6053: LIST
6054: LIST
6055: LIST
6056: LIST
6057: PUSH
6058: LD_INT 27
6060: PUSH
6061: LD_INT 132
6063: PUSH
6064: LD_INT 106
6066: PUSH
6067: LD_INT 4
6069: PUSH
6070: LD_INT 0
6072: PUSH
6073: LD_INT 0
6075: PUSH
6076: EMPTY
6077: LIST
6078: LIST
6079: LIST
6080: LIST
6081: LIST
6082: LIST
6083: PUSH
6084: LD_INT 26
6086: PUSH
6087: LD_INT 137
6089: PUSH
6090: LD_INT 111
6092: PUSH
6093: LD_INT 0
6095: PUSH
6096: LD_INT 0
6098: PUSH
6099: LD_INT 0
6101: PUSH
6102: EMPTY
6103: LIST
6104: LIST
6105: LIST
6106: LIST
6107: LIST
6108: LIST
6109: PUSH
6110: LD_INT 8
6112: PUSH
6113: LD_INT 141
6115: PUSH
6116: LD_INT 117
6118: PUSH
6119: LD_INT 1
6121: PUSH
6122: LD_INT 13
6124: PUSH
6125: LD_INT 11
6127: PUSH
6128: EMPTY
6129: LIST
6130: LIST
6131: LIST
6132: LIST
6133: LIST
6134: LIST
6135: PUSH
6136: LD_INT 30
6138: PUSH
6139: LD_INT 140
6141: PUSH
6142: LD_INT 128
6144: PUSH
6145: LD_INT 1
6147: PUSH
6148: LD_INT 0
6150: PUSH
6151: LD_INT 0
6153: PUSH
6154: EMPTY
6155: LIST
6156: LIST
6157: LIST
6158: LIST
6159: LIST
6160: LIST
6161: PUSH
6162: LD_INT 5
6164: PUSH
6165: LD_INT 146
6167: PUSH
6168: LD_INT 96
6170: PUSH
6171: LD_INT 3
6173: PUSH
6174: LD_INT 0
6176: PUSH
6177: LD_INT 0
6179: PUSH
6180: EMPTY
6181: LIST
6182: LIST
6183: LIST
6184: LIST
6185: LIST
6186: LIST
6187: PUSH
6188: LD_INT 32
6190: PUSH
6191: LD_INT 150
6193: PUSH
6194: LD_INT 98
6196: PUSH
6197: LD_INT 3
6199: PUSH
6200: LD_INT 0
6202: PUSH
6203: LD_INT 0
6205: PUSH
6206: EMPTY
6207: LIST
6208: LIST
6209: LIST
6210: LIST
6211: LIST
6212: LIST
6213: PUSH
6214: LD_INT 32
6216: PUSH
6217: LD_INT 142
6219: PUSH
6220: LD_INT 95
6222: PUSH
6223: LD_INT 3
6225: PUSH
6226: LD_INT 0
6228: PUSH
6229: LD_INT 0
6231: PUSH
6232: EMPTY
6233: LIST
6234: LIST
6235: LIST
6236: LIST
6237: LIST
6238: LIST
6239: PUSH
6240: LD_INT 32
6242: PUSH
6243: LD_INT 159
6245: PUSH
6246: LD_INT 104
6248: PUSH
6249: LD_INT 3
6251: PUSH
6252: LD_INT 0
6254: PUSH
6255: LD_INT 0
6257: PUSH
6258: EMPTY
6259: LIST
6260: LIST
6261: LIST
6262: LIST
6263: LIST
6264: LIST
6265: PUSH
6266: LD_INT 32
6268: PUSH
6269: LD_INT 133
6271: PUSH
6272: LD_INT 95
6274: PUSH
6275: LD_INT 3
6277: PUSH
6278: LD_INT 0
6280: PUSH
6281: LD_INT 0
6283: PUSH
6284: EMPTY
6285: LIST
6286: LIST
6287: LIST
6288: LIST
6289: LIST
6290: LIST
6291: PUSH
6292: LD_INT 32
6294: PUSH
6295: LD_INT 131
6297: PUSH
6298: LD_INT 102
6300: PUSH
6301: LD_INT 2
6303: PUSH
6304: LD_INT 0
6306: PUSH
6307: LD_INT 0
6309: PUSH
6310: EMPTY
6311: LIST
6312: LIST
6313: LIST
6314: LIST
6315: LIST
6316: LIST
6317: PUSH
6318: LD_INT 32
6320: PUSH
6321: LD_INT 162
6323: PUSH
6324: LD_INT 134
6326: PUSH
6327: LD_INT 0
6329: PUSH
6330: LD_INT 0
6332: PUSH
6333: LD_INT 0
6335: PUSH
6336: EMPTY
6337: LIST
6338: LIST
6339: LIST
6340: LIST
6341: LIST
6342: LIST
6343: PUSH
6344: LD_INT 32
6346: PUSH
6347: LD_INT 149
6349: PUSH
6350: LD_INT 132
6352: PUSH
6353: LD_INT 0
6355: PUSH
6356: LD_INT 0
6358: PUSH
6359: LD_INT 0
6361: PUSH
6362: EMPTY
6363: LIST
6364: LIST
6365: LIST
6366: LIST
6367: LIST
6368: LIST
6369: PUSH
6370: LD_INT 26
6372: PUSH
6373: LD_INT 143
6375: PUSH
6376: LD_INT 122
6378: PUSH
6379: LD_INT 4
6381: PUSH
6382: LD_INT 0
6384: PUSH
6385: LD_INT 0
6387: PUSH
6388: EMPTY
6389: LIST
6390: LIST
6391: LIST
6392: LIST
6393: LIST
6394: LIST
6395: PUSH
6396: LD_INT 26
6398: PUSH
6399: LD_INT 164
6401: PUSH
6402: LD_INT 116
6404: PUSH
6405: LD_INT 2
6407: PUSH
6408: LD_INT 0
6410: PUSH
6411: LD_INT 0
6413: PUSH
6414: EMPTY
6415: LIST
6416: LIST
6417: LIST
6418: LIST
6419: LIST
6420: LIST
6421: PUSH
6422: EMPTY
6423: LIST
6424: LIST
6425: LIST
6426: LIST
6427: LIST
6428: LIST
6429: LIST
6430: LIST
6431: LIST
6432: LIST
6433: LIST
6434: LIST
6435: LIST
6436: LIST
6437: LIST
6438: LIST
6439: LIST
6440: LIST
6441: LIST
6442: LIST
6443: LIST
6444: LIST
6445: LIST
6446: LIST
6447: LIST
6448: ST_TO_ADDR
// for i in tmp do
6449: LD_ADDR_VAR 0 2
6453: PUSH
6454: LD_VAR 0 5
6458: PUSH
6459: FOR_IN
6460: IFFALSE 6691
// begin uc_side := side ;
6462: LD_ADDR_OWVAR 20
6466: PUSH
6467: LD_VAR 0 7
6471: ST_TO_ADDR
// uc_nation := nation_arabian ;
6472: LD_ADDR_OWVAR 21
6476: PUSH
6477: LD_INT 2
6479: ST_TO_ADDR
// bc_type := i [ 1 ] ;
6480: LD_ADDR_OWVAR 42
6484: PUSH
6485: LD_VAR 0 2
6489: PUSH
6490: LD_INT 1
6492: ARRAY
6493: ST_TO_ADDR
// bc_level := rand ( 5 , 6 ) ;
6494: LD_ADDR_OWVAR 43
6498: PUSH
6499: LD_INT 5
6501: PPUSH
6502: LD_INT 6
6504: PPUSH
6505: CALL_OW 12
6509: ST_TO_ADDR
// bc_kind1 := i [ 5 ] ;
6510: LD_ADDR_OWVAR 44
6514: PUSH
6515: LD_VAR 0 2
6519: PUSH
6520: LD_INT 5
6522: ARRAY
6523: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
6524: LD_ADDR_OWVAR 45
6528: PUSH
6529: LD_VAR 0 2
6533: PUSH
6534: LD_INT 6
6536: ARRAY
6537: ST_TO_ADDR
// sr := 0 ;
6538: LD_ADDR_VAR 0 8
6542: PUSH
6543: LD_INT 0
6545: ST_TO_ADDR
// if i [ 1 ] = b_oil_mine then
6546: LD_VAR 0 2
6550: PUSH
6551: LD_INT 1
6553: ARRAY
6554: PUSH
6555: LD_INT 29
6557: EQUAL
6558: IFFALSE 6570
// sr := mat_oil else
6560: LD_ADDR_VAR 0 8
6564: PUSH
6565: LD_INT 2
6567: ST_TO_ADDR
6568: GO 6592
// if i [ 1 ] = b_siberite_mine then
6570: LD_VAR 0 2
6574: PUSH
6575: LD_INT 1
6577: ARRAY
6578: PUSH
6579: LD_INT 30
6581: EQUAL
6582: IFFALSE 6592
// sr := mat_siberit ;
6584: LD_ADDR_VAR 0 8
6588: PUSH
6589: LD_INT 3
6591: ST_TO_ADDR
// if sr then
6592: LD_VAR 0 8
6596: IFFALSE 6652
// begin CreateDepositXY ( i [ 2 ] , i [ 3 ] , sr ) ;
6598: LD_VAR 0 2
6602: PUSH
6603: LD_INT 2
6605: ARRAY
6606: PPUSH
6607: LD_VAR 0 2
6611: PUSH
6612: LD_INT 3
6614: ARRAY
6615: PPUSH
6616: LD_VAR 0 8
6620: PPUSH
6621: CALL_OW 62
// SetResourceVisibility ( i [ 2 ] , i [ 3 ] , side ) ;
6625: LD_VAR 0 2
6629: PUSH
6630: LD_INT 2
6632: ARRAY
6633: PPUSH
6634: LD_VAR 0 2
6638: PUSH
6639: LD_INT 3
6641: ARRAY
6642: PPUSH
6643: LD_VAR 0 7
6647: PPUSH
6648: CALL_OW 441
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
6652: LD_ADDR_VAR 0 3
6656: PUSH
6657: LD_VAR 0 2
6661: PUSH
6662: LD_INT 2
6664: ARRAY
6665: PPUSH
6666: LD_VAR 0 2
6670: PUSH
6671: LD_INT 3
6673: ARRAY
6674: PPUSH
6675: LD_VAR 0 2
6679: PUSH
6680: LD_INT 4
6682: ARRAY
6683: PPUSH
6684: CALL_OW 47
6688: ST_TO_ADDR
// end ;
6689: GO 6459
6691: POP
6692: POP
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
6693: LD_ADDR_VAR 0 9
6697: PUSH
6698: LD_INT 22
6700: PUSH
6701: LD_VAR 0 7
6705: PUSH
6706: EMPTY
6707: LIST
6708: LIST
6709: PUSH
6710: LD_INT 30
6712: PUSH
6713: LD_INT 1
6715: PUSH
6716: EMPTY
6717: LIST
6718: LIST
6719: PUSH
6720: EMPTY
6721: LIST
6722: LIST
6723: PPUSH
6724: CALL_OW 69
6728: ST_TO_ADDR
// if not depot then
6729: LD_VAR 0 9
6733: NOT
6734: IFFALSE 6738
// exit ;
6736: GO 6984
// base := PrepareBase ( depot [ 1 ] , legBase , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 3000 , 300 , 100 ] , [ 12 , 6 , 6 , 5 ] ) ;
6738: LD_ADDR_VAR 0 10
6742: PUSH
6743: LD_VAR 0 9
6747: PUSH
6748: LD_INT 1
6750: ARRAY
6751: PPUSH
6752: LD_INT 6
6754: PPUSH
6755: LD_INT 0
6757: PPUSH
6758: LD_INT 6
6760: PUSH
6761: LD_INT 7
6763: PUSH
6764: LD_INT 8
6766: PUSH
6767: EMPTY
6768: LIST
6769: LIST
6770: LIST
6771: PUSH
6772: LD_OWVAR 67
6776: ARRAY
6777: PPUSH
6778: LD_INT 3000
6780: PUSH
6781: LD_INT 300
6783: PUSH
6784: LD_INT 100
6786: PUSH
6787: EMPTY
6788: LIST
6789: LIST
6790: LIST
6791: PPUSH
6792: LD_INT 12
6794: PUSH
6795: LD_INT 6
6797: PUSH
6798: LD_INT 6
6800: PUSH
6801: LD_INT 5
6803: PUSH
6804: EMPTY
6805: LIST
6806: LIST
6807: LIST
6808: LIST
6809: PPUSH
6810: CALL 29846 0 6
6814: ST_TO_ADDR
// if not base then
6815: LD_VAR 0 10
6819: NOT
6820: IFFALSE 6824
// exit ;
6822: GO 6984
// if Difficulty > 1 then
6824: LD_OWVAR 67
6828: PUSH
6829: LD_INT 1
6831: GREATER
6832: IFFALSE 6905
// begin InitHc ;
6834: CALL_OW 19
// PrepareHuman ( sex_male , class_sniper , [ 5 , 8 ] [ Difficulty - 1 ] ) ;
6838: LD_INT 1
6840: PPUSH
6841: LD_INT 5
6843: PPUSH
6844: LD_INT 5
6846: PUSH
6847: LD_INT 8
6849: PUSH
6850: EMPTY
6851: LIST
6852: LIST
6853: PUSH
6854: LD_OWVAR 67
6858: PUSH
6859: LD_INT 1
6861: MINUS
6862: ARRAY
6863: PPUSH
6864: CALL_OW 380
// for i = 1 to Difficulty do
6868: LD_ADDR_VAR 0 2
6872: PUSH
6873: DOUBLE
6874: LD_INT 1
6876: DEC
6877: ST_TO_ADDR
6878: LD_OWVAR 67
6882: PUSH
6883: FOR_TO
6884: IFFALSE 6903
// PlaceUnitArea ( CreateHuman , sniperGuardArea , false ) ;
6886: CALL_OW 44
6890: PPUSH
6891: LD_INT 24
6893: PPUSH
6894: LD_INT 0
6896: PPUSH
6897: CALL_OW 49
6901: GO 6883
6903: POP
6904: POP
// end ; mc_bases := Replace ( mc_bases , mc_leg , base ) ;
6905: LD_ADDR_EXP 36
6909: PUSH
6910: LD_EXP 36
6914: PPUSH
6915: LD_EXP 6
6919: PPUSH
6920: LD_VAR 0 10
6924: PPUSH
6925: CALL_OW 1
6929: ST_TO_ADDR
// hc_gallery := ru ;
6930: LD_ADDR_OWVAR 33
6934: PUSH
6935: LD_STRING ru
6937: ST_TO_ADDR
// hc_face_number := 44 ;
6938: LD_ADDR_OWVAR 34
6942: PUSH
6943: LD_INT 44
6945: ST_TO_ADDR
// hc_name := Robert Farmer ;
6946: LD_ADDR_OWVAR 26
6950: PUSH
6951: LD_STRING Robert Farmer
6953: ST_TO_ADDR
// hc_sex := sex_male ;
6954: LD_ADDR_OWVAR 27
6958: PUSH
6959: LD_INT 1
6961: ST_TO_ADDR
// hc_class := 1 ;
6962: LD_ADDR_OWVAR 28
6966: PUSH
6967: LD_INT 1
6969: ST_TO_ADDR
// Farmer := CreateHuman ;
6970: LD_ADDR_EXP 13
6974: PUSH
6975: CALL_OW 44
6979: ST_TO_ADDR
// InitHc ;
6980: CALL_OW 19
// end ;
6984: LD_VAR 0 1
6988: RET
// export function PrepareAmericans ; var i , b , tmp , side , sr , base , depot ; begin
6989: LD_INT 0
6991: PPUSH
6992: PPUSH
6993: PPUSH
6994: PPUSH
6995: PPUSH
6996: PPUSH
6997: PPUSH
6998: PPUSH
// PrepareNature ( 0 , 0 , 4 , 0 , 0 , 0 , 0 , amerApe , 0 ) ;
6999: LD_INT 0
7001: PPUSH
7002: LD_INT 0
7004: PPUSH
7005: LD_INT 4
7007: PPUSH
7008: LD_INT 0
7010: PPUSH
7011: LD_INT 0
7013: PPUSH
7014: LD_INT 0
7016: PPUSH
7017: LD_INT 0
7019: PPUSH
7020: LD_INT 10
7022: PPUSH
7023: LD_INT 0
7025: PPUSH
7026: CALL 54227 0 9
// side := 4 ;
7030: LD_ADDR_VAR 0 5
7034: PUSH
7035: LD_INT 4
7037: ST_TO_ADDR
// SetTech ( tech_gun , side , state_researched ) ;
7038: LD_INT 39
7040: PPUSH
7041: LD_VAR 0 5
7045: PPUSH
7046: LD_INT 2
7048: PPUSH
7049: CALL_OW 322
// SetTech ( tech_advMet , side , state_researched ) ;
7053: LD_INT 34
7055: PPUSH
7056: LD_VAR 0 5
7060: PPUSH
7061: LD_INT 2
7063: PPUSH
7064: CALL_OW 322
// tmp := [ [ 1 , 144 , 18 , 4 , 0 , 0 ] , [ 3 , 137 , 8 , 4 , 0 , 0 ] , [ 20 , 141 , 8 , 4 , 0 , 0 ] , [ 19 , 137 , 5 , 3 , 0 , 0 ] , [ 18 , 137 , 12 , 0 , 0 , 0 ] , [ 17 , 133 , 4 , 2 , 0 , 0 ] , [ 16 , 140 , 11 , 5 , 0 , 0 ] , [ 8 , 149 , 26 , 4 , 10 , 15 ] , [ 8 , 142 , 26 , 1 , 11 , 12 ] , [ 27 , 153 , 32 , 5 , 0 , 0 ] , [ 27 , 145 , 32 , 3 , 0 , 0 ] , [ 27 , 138 , 2 , 4 , 0 , 0 ] , [ 27 , 144 , 13 , 0 , 0 , 0 ] , [ 26 , 124 , 2 , 4 , 0 , 0 ] , [ 26 , 121 , 2 , 2 , 0 , 0 ] , [ 26 , 118 , 2 , 1 , 0 , 0 ] , [ 29 , 159 , 47 , 2 , 0 , 0 ] , [ 32 , 146 , 41 , 0 , 0 , 0 ] , [ 33 , 136 , 37 , 0 , 0 , 0 ] , [ 33 , 132 , 34 , 0 , 0 , 0 ] , [ 36 , 124 , 7 , 1 , 0 , 0 ] , [ 5 , 124 , 19 , 0 , 0 , 0 ] , [ 32 , 127 , 23 , 0 , 0 , 0 ] ] ;
7068: LD_ADDR_VAR 0 4
7072: PUSH
7073: LD_INT 1
7075: PUSH
7076: LD_INT 144
7078: PUSH
7079: LD_INT 18
7081: PUSH
7082: LD_INT 4
7084: PUSH
7085: LD_INT 0
7087: PUSH
7088: LD_INT 0
7090: PUSH
7091: EMPTY
7092: LIST
7093: LIST
7094: LIST
7095: LIST
7096: LIST
7097: LIST
7098: PUSH
7099: LD_INT 3
7101: PUSH
7102: LD_INT 137
7104: PUSH
7105: LD_INT 8
7107: PUSH
7108: LD_INT 4
7110: PUSH
7111: LD_INT 0
7113: PUSH
7114: LD_INT 0
7116: PUSH
7117: EMPTY
7118: LIST
7119: LIST
7120: LIST
7121: LIST
7122: LIST
7123: LIST
7124: PUSH
7125: LD_INT 20
7127: PUSH
7128: LD_INT 141
7130: PUSH
7131: LD_INT 8
7133: PUSH
7134: LD_INT 4
7136: PUSH
7137: LD_INT 0
7139: PUSH
7140: LD_INT 0
7142: PUSH
7143: EMPTY
7144: LIST
7145: LIST
7146: LIST
7147: LIST
7148: LIST
7149: LIST
7150: PUSH
7151: LD_INT 19
7153: PUSH
7154: LD_INT 137
7156: PUSH
7157: LD_INT 5
7159: PUSH
7160: LD_INT 3
7162: PUSH
7163: LD_INT 0
7165: PUSH
7166: LD_INT 0
7168: PUSH
7169: EMPTY
7170: LIST
7171: LIST
7172: LIST
7173: LIST
7174: LIST
7175: LIST
7176: PUSH
7177: LD_INT 18
7179: PUSH
7180: LD_INT 137
7182: PUSH
7183: LD_INT 12
7185: PUSH
7186: LD_INT 0
7188: PUSH
7189: LD_INT 0
7191: PUSH
7192: LD_INT 0
7194: PUSH
7195: EMPTY
7196: LIST
7197: LIST
7198: LIST
7199: LIST
7200: LIST
7201: LIST
7202: PUSH
7203: LD_INT 17
7205: PUSH
7206: LD_INT 133
7208: PUSH
7209: LD_INT 4
7211: PUSH
7212: LD_INT 2
7214: PUSH
7215: LD_INT 0
7217: PUSH
7218: LD_INT 0
7220: PUSH
7221: EMPTY
7222: LIST
7223: LIST
7224: LIST
7225: LIST
7226: LIST
7227: LIST
7228: PUSH
7229: LD_INT 16
7231: PUSH
7232: LD_INT 140
7234: PUSH
7235: LD_INT 11
7237: PUSH
7238: LD_INT 5
7240: PUSH
7241: LD_INT 0
7243: PUSH
7244: LD_INT 0
7246: PUSH
7247: EMPTY
7248: LIST
7249: LIST
7250: LIST
7251: LIST
7252: LIST
7253: LIST
7254: PUSH
7255: LD_INT 8
7257: PUSH
7258: LD_INT 149
7260: PUSH
7261: LD_INT 26
7263: PUSH
7264: LD_INT 4
7266: PUSH
7267: LD_INT 10
7269: PUSH
7270: LD_INT 15
7272: PUSH
7273: EMPTY
7274: LIST
7275: LIST
7276: LIST
7277: LIST
7278: LIST
7279: LIST
7280: PUSH
7281: LD_INT 8
7283: PUSH
7284: LD_INT 142
7286: PUSH
7287: LD_INT 26
7289: PUSH
7290: LD_INT 1
7292: PUSH
7293: LD_INT 11
7295: PUSH
7296: LD_INT 12
7298: PUSH
7299: EMPTY
7300: LIST
7301: LIST
7302: LIST
7303: LIST
7304: LIST
7305: LIST
7306: PUSH
7307: LD_INT 27
7309: PUSH
7310: LD_INT 153
7312: PUSH
7313: LD_INT 32
7315: PUSH
7316: LD_INT 5
7318: PUSH
7319: LD_INT 0
7321: PUSH
7322: LD_INT 0
7324: PUSH
7325: EMPTY
7326: LIST
7327: LIST
7328: LIST
7329: LIST
7330: LIST
7331: LIST
7332: PUSH
7333: LD_INT 27
7335: PUSH
7336: LD_INT 145
7338: PUSH
7339: LD_INT 32
7341: PUSH
7342: LD_INT 3
7344: PUSH
7345: LD_INT 0
7347: PUSH
7348: LD_INT 0
7350: PUSH
7351: EMPTY
7352: LIST
7353: LIST
7354: LIST
7355: LIST
7356: LIST
7357: LIST
7358: PUSH
7359: LD_INT 27
7361: PUSH
7362: LD_INT 138
7364: PUSH
7365: LD_INT 2
7367: PUSH
7368: LD_INT 4
7370: PUSH
7371: LD_INT 0
7373: PUSH
7374: LD_INT 0
7376: PUSH
7377: EMPTY
7378: LIST
7379: LIST
7380: LIST
7381: LIST
7382: LIST
7383: LIST
7384: PUSH
7385: LD_INT 27
7387: PUSH
7388: LD_INT 144
7390: PUSH
7391: LD_INT 13
7393: PUSH
7394: LD_INT 0
7396: PUSH
7397: LD_INT 0
7399: PUSH
7400: LD_INT 0
7402: PUSH
7403: EMPTY
7404: LIST
7405: LIST
7406: LIST
7407: LIST
7408: LIST
7409: LIST
7410: PUSH
7411: LD_INT 26
7413: PUSH
7414: LD_INT 124
7416: PUSH
7417: LD_INT 2
7419: PUSH
7420: LD_INT 4
7422: PUSH
7423: LD_INT 0
7425: PUSH
7426: LD_INT 0
7428: PUSH
7429: EMPTY
7430: LIST
7431: LIST
7432: LIST
7433: LIST
7434: LIST
7435: LIST
7436: PUSH
7437: LD_INT 26
7439: PUSH
7440: LD_INT 121
7442: PUSH
7443: LD_INT 2
7445: PUSH
7446: LD_INT 2
7448: PUSH
7449: LD_INT 0
7451: PUSH
7452: LD_INT 0
7454: PUSH
7455: EMPTY
7456: LIST
7457: LIST
7458: LIST
7459: LIST
7460: LIST
7461: LIST
7462: PUSH
7463: LD_INT 26
7465: PUSH
7466: LD_INT 118
7468: PUSH
7469: LD_INT 2
7471: PUSH
7472: LD_INT 1
7474: PUSH
7475: LD_INT 0
7477: PUSH
7478: LD_INT 0
7480: PUSH
7481: EMPTY
7482: LIST
7483: LIST
7484: LIST
7485: LIST
7486: LIST
7487: LIST
7488: PUSH
7489: LD_INT 29
7491: PUSH
7492: LD_INT 159
7494: PUSH
7495: LD_INT 47
7497: PUSH
7498: LD_INT 2
7500: PUSH
7501: LD_INT 0
7503: PUSH
7504: LD_INT 0
7506: PUSH
7507: EMPTY
7508: LIST
7509: LIST
7510: LIST
7511: LIST
7512: LIST
7513: LIST
7514: PUSH
7515: LD_INT 32
7517: PUSH
7518: LD_INT 146
7520: PUSH
7521: LD_INT 41
7523: PUSH
7524: LD_INT 0
7526: PUSH
7527: LD_INT 0
7529: PUSH
7530: LD_INT 0
7532: PUSH
7533: EMPTY
7534: LIST
7535: LIST
7536: LIST
7537: LIST
7538: LIST
7539: LIST
7540: PUSH
7541: LD_INT 33
7543: PUSH
7544: LD_INT 136
7546: PUSH
7547: LD_INT 37
7549: PUSH
7550: LD_INT 0
7552: PUSH
7553: LD_INT 0
7555: PUSH
7556: LD_INT 0
7558: PUSH
7559: EMPTY
7560: LIST
7561: LIST
7562: LIST
7563: LIST
7564: LIST
7565: LIST
7566: PUSH
7567: LD_INT 33
7569: PUSH
7570: LD_INT 132
7572: PUSH
7573: LD_INT 34
7575: PUSH
7576: LD_INT 0
7578: PUSH
7579: LD_INT 0
7581: PUSH
7582: LD_INT 0
7584: PUSH
7585: EMPTY
7586: LIST
7587: LIST
7588: LIST
7589: LIST
7590: LIST
7591: LIST
7592: PUSH
7593: LD_INT 36
7595: PUSH
7596: LD_INT 124
7598: PUSH
7599: LD_INT 7
7601: PUSH
7602: LD_INT 1
7604: PUSH
7605: LD_INT 0
7607: PUSH
7608: LD_INT 0
7610: PUSH
7611: EMPTY
7612: LIST
7613: LIST
7614: LIST
7615: LIST
7616: LIST
7617: LIST
7618: PUSH
7619: LD_INT 5
7621: PUSH
7622: LD_INT 124
7624: PUSH
7625: LD_INT 19
7627: PUSH
7628: LD_INT 0
7630: PUSH
7631: LD_INT 0
7633: PUSH
7634: LD_INT 0
7636: PUSH
7637: EMPTY
7638: LIST
7639: LIST
7640: LIST
7641: LIST
7642: LIST
7643: LIST
7644: PUSH
7645: LD_INT 32
7647: PUSH
7648: LD_INT 127
7650: PUSH
7651: LD_INT 23
7653: PUSH
7654: LD_INT 0
7656: PUSH
7657: LD_INT 0
7659: PUSH
7660: LD_INT 0
7662: PUSH
7663: EMPTY
7664: LIST
7665: LIST
7666: LIST
7667: LIST
7668: LIST
7669: LIST
7670: PUSH
7671: EMPTY
7672: LIST
7673: LIST
7674: LIST
7675: LIST
7676: LIST
7677: LIST
7678: LIST
7679: LIST
7680: LIST
7681: LIST
7682: LIST
7683: LIST
7684: LIST
7685: LIST
7686: LIST
7687: LIST
7688: LIST
7689: LIST
7690: LIST
7691: LIST
7692: LIST
7693: LIST
7694: LIST
7695: ST_TO_ADDR
// for i in tmp do
7696: LD_ADDR_VAR 0 2
7700: PUSH
7701: LD_VAR 0 4
7705: PUSH
7706: FOR_IN
7707: IFFALSE 7938
// begin uc_side := side ;
7709: LD_ADDR_OWVAR 20
7713: PUSH
7714: LD_VAR 0 5
7718: ST_TO_ADDR
// uc_nation := nation_american ;
7719: LD_ADDR_OWVAR 21
7723: PUSH
7724: LD_INT 1
7726: ST_TO_ADDR
// bc_type := i [ 1 ] ;
7727: LD_ADDR_OWVAR 42
7731: PUSH
7732: LD_VAR 0 2
7736: PUSH
7737: LD_INT 1
7739: ARRAY
7740: ST_TO_ADDR
// bc_level := rand ( 5 , 6 ) ;
7741: LD_ADDR_OWVAR 43
7745: PUSH
7746: LD_INT 5
7748: PPUSH
7749: LD_INT 6
7751: PPUSH
7752: CALL_OW 12
7756: ST_TO_ADDR
// bc_kind1 := i [ 5 ] ;
7757: LD_ADDR_OWVAR 44
7761: PUSH
7762: LD_VAR 0 2
7766: PUSH
7767: LD_INT 5
7769: ARRAY
7770: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
7771: LD_ADDR_OWVAR 45
7775: PUSH
7776: LD_VAR 0 2
7780: PUSH
7781: LD_INT 6
7783: ARRAY
7784: ST_TO_ADDR
// sr := 0 ;
7785: LD_ADDR_VAR 0 6
7789: PUSH
7790: LD_INT 0
7792: ST_TO_ADDR
// if i [ 1 ] = b_oil_mine then
7793: LD_VAR 0 2
7797: PUSH
7798: LD_INT 1
7800: ARRAY
7801: PUSH
7802: LD_INT 29
7804: EQUAL
7805: IFFALSE 7817
// sr := mat_oil else
7807: LD_ADDR_VAR 0 6
7811: PUSH
7812: LD_INT 2
7814: ST_TO_ADDR
7815: GO 7839
// if i [ 1 ] = b_siberite_mine then
7817: LD_VAR 0 2
7821: PUSH
7822: LD_INT 1
7824: ARRAY
7825: PUSH
7826: LD_INT 30
7828: EQUAL
7829: IFFALSE 7839
// sr := mat_siberit ;
7831: LD_ADDR_VAR 0 6
7835: PUSH
7836: LD_INT 3
7838: ST_TO_ADDR
// if sr then
7839: LD_VAR 0 6
7843: IFFALSE 7899
// begin CreateDepositXY ( i [ 2 ] , i [ 3 ] , sr ) ;
7845: LD_VAR 0 2
7849: PUSH
7850: LD_INT 2
7852: ARRAY
7853: PPUSH
7854: LD_VAR 0 2
7858: PUSH
7859: LD_INT 3
7861: ARRAY
7862: PPUSH
7863: LD_VAR 0 6
7867: PPUSH
7868: CALL_OW 62
// SetResourceVisibility ( i [ 2 ] , i [ 3 ] , side ) ;
7872: LD_VAR 0 2
7876: PUSH
7877: LD_INT 2
7879: ARRAY
7880: PPUSH
7881: LD_VAR 0 2
7885: PUSH
7886: LD_INT 3
7888: ARRAY
7889: PPUSH
7890: LD_VAR 0 5
7894: PPUSH
7895: CALL_OW 441
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
7899: LD_ADDR_VAR 0 3
7903: PUSH
7904: LD_VAR 0 2
7908: PUSH
7909: LD_INT 2
7911: ARRAY
7912: PPUSH
7913: LD_VAR 0 2
7917: PUSH
7918: LD_INT 3
7920: ARRAY
7921: PPUSH
7922: LD_VAR 0 2
7926: PUSH
7927: LD_INT 4
7929: ARRAY
7930: PPUSH
7931: CALL_OW 47
7935: ST_TO_ADDR
// end ;
7936: GO 7706
7938: POP
7939: POP
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
7940: LD_ADDR_VAR 0 8
7944: PUSH
7945: LD_INT 22
7947: PUSH
7948: LD_VAR 0 5
7952: PUSH
7953: EMPTY
7954: LIST
7955: LIST
7956: PUSH
7957: LD_INT 30
7959: PUSH
7960: LD_INT 1
7962: PUSH
7963: EMPTY
7964: LIST
7965: LIST
7966: PUSH
7967: EMPTY
7968: LIST
7969: LIST
7970: PPUSH
7971: CALL_OW 69
7975: ST_TO_ADDR
// if not depot then
7976: LD_VAR 0 8
7980: NOT
7981: IFFALSE 7985
// exit ;
7983: GO 8257
// base := PrepareBase ( depot [ 1 ] , amerBase , theta3 , [ 8 , 7 , 6 ] [ Difficulty ] , [ [ 2500 , 2000 , 1750 ] [ Difficulty ] , [ 300 , 250 , 200 ] [ Difficulty ] , [ 50 , 50 , 40 ] [ Difficulty ] ] , [ 7 , 6 , 5 , 5 ] ) ;
7985: LD_ADDR_VAR 0 7
7989: PUSH
7990: LD_VAR 0 8
7994: PUSH
7995: LD_INT 1
7997: ARRAY
7998: PPUSH
7999: LD_INT 3
8001: PPUSH
8002: LD_STRING theta3
8004: PPUSH
8005: LD_INT 8
8007: PUSH
8008: LD_INT 7
8010: PUSH
8011: LD_INT 6
8013: PUSH
8014: EMPTY
8015: LIST
8016: LIST
8017: LIST
8018: PUSH
8019: LD_OWVAR 67
8023: ARRAY
8024: PPUSH
8025: LD_INT 2500
8027: PUSH
8028: LD_INT 2000
8030: PUSH
8031: LD_INT 1750
8033: PUSH
8034: EMPTY
8035: LIST
8036: LIST
8037: LIST
8038: PUSH
8039: LD_OWVAR 67
8043: ARRAY
8044: PUSH
8045: LD_INT 300
8047: PUSH
8048: LD_INT 250
8050: PUSH
8051: LD_INT 200
8053: PUSH
8054: EMPTY
8055: LIST
8056: LIST
8057: LIST
8058: PUSH
8059: LD_OWVAR 67
8063: ARRAY
8064: PUSH
8065: LD_INT 50
8067: PUSH
8068: LD_INT 50
8070: PUSH
8071: LD_INT 40
8073: PUSH
8074: EMPTY
8075: LIST
8076: LIST
8077: LIST
8078: PUSH
8079: LD_OWVAR 67
8083: ARRAY
8084: PUSH
8085: EMPTY
8086: LIST
8087: LIST
8088: LIST
8089: PPUSH
8090: LD_INT 7
8092: PUSH
8093: LD_INT 6
8095: PUSH
8096: LD_INT 5
8098: PUSH
8099: LD_INT 5
8101: PUSH
8102: EMPTY
8103: LIST
8104: LIST
8105: LIST
8106: LIST
8107: PPUSH
8108: CALL 29846 0 6
8112: ST_TO_ADDR
// if not base then
8113: LD_VAR 0 7
8117: NOT
8118: IFFALSE 8122
// exit ;
8120: GO 8257
// mc_bases := Replace ( mc_bases , mc_amer , base ) ;
8122: LD_ADDR_EXP 36
8126: PUSH
8127: LD_EXP 36
8131: PPUSH
8132: LD_EXP 5
8136: PPUSH
8137: LD_VAR 0 7
8141: PPUSH
8142: CALL_OW 1
8146: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 7 ) ;
8147: LD_INT 1
8149: PPUSH
8150: LD_INT 1
8152: PPUSH
8153: LD_INT 7
8155: PPUSH
8156: CALL_OW 380
// allyCommander := CreateHuman ;
8160: LD_ADDR_EXP 11
8164: PUSH
8165: CALL_OW 44
8169: ST_TO_ADDR
// PlaceUnitXY ( allyCommander , 139 , 15 , false ) ;
8170: LD_EXP 11
8174: PPUSH
8175: LD_INT 139
8177: PPUSH
8178: LD_INT 15
8180: PPUSH
8181: LD_INT 0
8183: PPUSH
8184: CALL_OW 48
// ComTurnXY ( allyCommander , 137 , 15 ) ;
8188: LD_EXP 11
8192: PPUSH
8193: LD_INT 137
8195: PPUSH
8196: LD_INT 15
8198: PPUSH
8199: CALL_OW 118
// hc_gallery := us ;
8203: LD_ADDR_OWVAR 33
8207: PUSH
8208: LD_STRING us
8210: ST_TO_ADDR
// hc_face_number := 7 ;
8211: LD_ADDR_OWVAR 34
8215: PUSH
8216: LD_INT 7
8218: ST_TO_ADDR
// hc_name := Arthur Powell ;
8219: LD_ADDR_OWVAR 26
8223: PUSH
8224: LD_STRING Arthur Powell
8226: ST_TO_ADDR
// hc_sex := sex_male ;
8227: LD_ADDR_OWVAR 27
8231: PUSH
8232: LD_INT 1
8234: ST_TO_ADDR
// hc_class := 1 ;
8235: LD_ADDR_OWVAR 28
8239: PUSH
8240: LD_INT 1
8242: ST_TO_ADDR
// Powell := CreateHuman ;
8243: LD_ADDR_EXP 12
8247: PUSH
8248: CALL_OW 44
8252: ST_TO_ADDR
// InitHc ;
8253: CALL_OW 19
// end ;
8257: LD_VAR 0 1
8261: RET
// export function PreparePlayer ; var i , side , techs , tanks , cl , chassis , engines , weapons ; begin
8262: LD_INT 0
8264: PPUSH
8265: PPUSH
8266: PPUSH
8267: PPUSH
8268: PPUSH
8269: PPUSH
8270: PPUSH
8271: PPUSH
8272: PPUSH
// side := 1 ;
8273: LD_ADDR_VAR 0 3
8277: PUSH
8278: LD_INT 1
8280: ST_TO_ADDR
// result := [ [ ] , [ ] ] ;
8281: LD_ADDR_VAR 0 1
8285: PUSH
8286: EMPTY
8287: PUSH
8288: EMPTY
8289: PUSH
8290: EMPTY
8291: LIST
8292: LIST
8293: ST_TO_ADDR
// uc_side := side ;
8294: LD_ADDR_OWVAR 20
8298: PUSH
8299: LD_VAR 0 3
8303: ST_TO_ADDR
// uc_nation := nation_american ;
8304: LD_ADDR_OWVAR 21
8308: PUSH
8309: LD_INT 1
8311: ST_TO_ADDR
// InitHc ;
8312: CALL_OW 19
// InitVc ;
8316: CALL_OW 20
// hc_importance := 0 ;
8320: LD_ADDR_OWVAR 32
8324: PUSH
8325: LD_INT 0
8327: ST_TO_ADDR
// chassis := [ us_medium_wheeled , us_medium_tracked , us_medium_tracked ] ;
8328: LD_ADDR_VAR 0 7
8332: PUSH
8333: LD_INT 2
8335: PUSH
8336: LD_INT 3
8338: PUSH
8339: LD_INT 3
8341: PUSH
8342: EMPTY
8343: LIST
8344: LIST
8345: LIST
8346: ST_TO_ADDR
// if commander = 2 then
8347: LD_EXP 25
8351: PUSH
8352: LD_INT 2
8354: EQUAL
8355: IFFALSE 8376
// chassis := [ us_medium_tracked , us_heavy_tracked , us_heavy_tracked ] ;
8357: LD_ADDR_VAR 0 7
8361: PUSH
8362: LD_INT 3
8364: PUSH
8365: LD_INT 4
8367: PUSH
8368: LD_INT 4
8370: PUSH
8371: EMPTY
8372: LIST
8373: LIST
8374: LIST
8375: ST_TO_ADDR
// if commander = 3 then
8376: LD_EXP 25
8380: PUSH
8381: LD_INT 3
8383: EQUAL
8384: IFFALSE 8405
// chassis := [ us_medium_wheeled , us_morphling , us_morphling ] ;
8386: LD_ADDR_VAR 0 7
8390: PUSH
8391: LD_INT 2
8393: PUSH
8394: LD_INT 5
8396: PUSH
8397: LD_INT 5
8399: PUSH
8400: EMPTY
8401: LIST
8402: LIST
8403: LIST
8404: ST_TO_ADDR
// engines := [ engine_solar , engine_solar , engine_combustion ] ;
8405: LD_ADDR_VAR 0 8
8409: PUSH
8410: LD_INT 2
8412: PUSH
8413: LD_INT 2
8415: PUSH
8416: LD_INT 1
8418: PUSH
8419: EMPTY
8420: LIST
8421: LIST
8422: LIST
8423: ST_TO_ADDR
// if commander = 2 then
8424: LD_EXP 25
8428: PUSH
8429: LD_INT 2
8431: EQUAL
8432: IFFALSE 8453
// engines := [ engine_combustion , engine_combustion , engine_siberite ] ;
8434: LD_ADDR_VAR 0 8
8438: PUSH
8439: LD_INT 1
8441: PUSH
8442: LD_INT 1
8444: PUSH
8445: LD_INT 3
8447: PUSH
8448: EMPTY
8449: LIST
8450: LIST
8451: LIST
8452: ST_TO_ADDR
// if commander = 3 then
8453: LD_EXP 25
8457: PUSH
8458: LD_INT 3
8460: EQUAL
8461: IFFALSE 8482
// engines := [ engine_siberite , engine_siberite , engine_combustion ] ;
8463: LD_ADDR_VAR 0 8
8467: PUSH
8468: LD_INT 3
8470: PUSH
8471: LD_INT 3
8473: PUSH
8474: LD_INT 1
8476: PUSH
8477: EMPTY
8478: LIST
8479: LIST
8480: LIST
8481: ST_TO_ADDR
// weapons := [ us_double_gun , us_light_gun , us_gatling_gun ] ;
8482: LD_ADDR_VAR 0 9
8486: PUSH
8487: LD_INT 5
8489: PUSH
8490: LD_INT 3
8492: PUSH
8493: LD_INT 4
8495: PUSH
8496: EMPTY
8497: LIST
8498: LIST
8499: LIST
8500: ST_TO_ADDR
// if commander = 2 then
8501: LD_EXP 25
8505: PUSH
8506: LD_INT 2
8508: EQUAL
8509: IFFALSE 8530
// weapons := [ us_rocket_launcher , us_double_gun , us_heavy_gun ] ;
8511: LD_ADDR_VAR 0 9
8515: PUSH
8516: LD_INT 7
8518: PUSH
8519: LD_INT 5
8521: PUSH
8522: LD_INT 6
8524: PUSH
8525: EMPTY
8526: LIST
8527: LIST
8528: LIST
8529: ST_TO_ADDR
// if commander = 3 then
8530: LD_EXP 25
8534: PUSH
8535: LD_INT 3
8537: EQUAL
8538: IFFALSE 8559
// weapons := [ us_laser , us_double_laser , us_rocket_launcher ] ;
8540: LD_ADDR_VAR 0 9
8544: PUSH
8545: LD_INT 9
8547: PUSH
8548: LD_INT 10
8550: PUSH
8551: LD_INT 7
8553: PUSH
8554: EMPTY
8555: LIST
8556: LIST
8557: LIST
8558: ST_TO_ADDR
// tanks := [ 5 , 5 , 4 ] [ Difficulty ] ;
8559: LD_ADDR_VAR 0 5
8563: PUSH
8564: LD_INT 5
8566: PUSH
8567: LD_INT 5
8569: PUSH
8570: LD_INT 4
8572: PUSH
8573: EMPTY
8574: LIST
8575: LIST
8576: LIST
8577: PUSH
8578: LD_OWVAR 67
8582: ARRAY
8583: ST_TO_ADDR
// if commander = 2 then
8584: LD_EXP 25
8588: PUSH
8589: LD_INT 2
8591: EQUAL
8592: IFFALSE 8608
// tanks := tanks + 3 ;
8594: LD_ADDR_VAR 0 5
8598: PUSH
8599: LD_VAR 0 5
8603: PUSH
8604: LD_INT 3
8606: PLUS
8607: ST_TO_ADDR
// for i = 1 to tanks do
8608: LD_ADDR_VAR 0 2
8612: PUSH
8613: DOUBLE
8614: LD_INT 1
8616: DEC
8617: ST_TO_ADDR
8618: LD_VAR 0 5
8622: PUSH
8623: FOR_TO
8624: IFFALSE 8734
// begin PrepareVehicle ( chassis [ i mod 3 + 1 ] , engines [ rand ( 1 , 3 ) ] , control_manual , weapons [ i mod 3 + 1 ] , rand ( 60 , 70 ) ) ;
8626: LD_VAR 0 7
8630: PUSH
8631: LD_VAR 0 2
8635: PUSH
8636: LD_INT 3
8638: MOD
8639: PUSH
8640: LD_INT 1
8642: PLUS
8643: ARRAY
8644: PPUSH
8645: LD_VAR 0 8
8649: PUSH
8650: LD_INT 1
8652: PPUSH
8653: LD_INT 3
8655: PPUSH
8656: CALL_OW 12
8660: ARRAY
8661: PPUSH
8662: LD_INT 1
8664: PPUSH
8665: LD_VAR 0 9
8669: PUSH
8670: LD_VAR 0 2
8674: PUSH
8675: LD_INT 3
8677: MOD
8678: PUSH
8679: LD_INT 1
8681: PLUS
8682: ARRAY
8683: PPUSH
8684: LD_INT 60
8686: PPUSH
8687: LD_INT 70
8689: PPUSH
8690: CALL_OW 12
8694: PPUSH
8695: CALL 26437 0 5
// result := Replace ( result , 1 , result [ 1 ] ^ CreateVehicle ) ;
8699: LD_ADDR_VAR 0 1
8703: PUSH
8704: LD_VAR 0 1
8708: PPUSH
8709: LD_INT 1
8711: PPUSH
8712: LD_VAR 0 1
8716: PUSH
8717: LD_INT 1
8719: ARRAY
8720: PUSH
8721: CALL_OW 45
8725: ADD
8726: PPUSH
8727: CALL_OW 1
8731: ST_TO_ADDR
// end ;
8732: GO 8623
8734: POP
8735: POP
// cl := 1 ;
8736: LD_ADDR_VAR 0 6
8740: PUSH
8741: LD_INT 1
8743: ST_TO_ADDR
// for i = 1 to 10 do
8744: LD_ADDR_VAR 0 2
8748: PUSH
8749: DOUBLE
8750: LD_INT 1
8752: DEC
8753: ST_TO_ADDR
8754: LD_INT 10
8756: PUSH
8757: FOR_TO
8758: IFFALSE 8873
// begin if i mod 4 = 0 then
8760: LD_VAR 0 2
8764: PUSH
8765: LD_INT 4
8767: MOD
8768: PUSH
8769: LD_INT 0
8771: EQUAL
8772: IFFALSE 8788
// cl := cl + 1 ;
8774: LD_ADDR_VAR 0 6
8778: PUSH
8779: LD_VAR 0 6
8783: PUSH
8784: LD_INT 1
8786: PLUS
8787: ST_TO_ADDR
// if cl = 2 then
8788: LD_VAR 0 6
8792: PUSH
8793: LD_INT 2
8795: EQUAL
8796: IFFALSE 8806
// cl := 3 ;
8798: LD_ADDR_VAR 0 6
8802: PUSH
8803: LD_INT 3
8805: ST_TO_ADDR
// PrepareHuman ( false , cl , [ 6 , 6 , 5 ] [ Difficulty ] ) ;
8806: LD_INT 0
8808: PPUSH
8809: LD_VAR 0 6
8813: PPUSH
8814: LD_INT 6
8816: PUSH
8817: LD_INT 6
8819: PUSH
8820: LD_INT 5
8822: PUSH
8823: EMPTY
8824: LIST
8825: LIST
8826: LIST
8827: PUSH
8828: LD_OWVAR 67
8832: ARRAY
8833: PPUSH
8834: CALL_OW 380
// result := Replace ( result , 2 , result [ 2 ] ^ CreateHuman ) ;
8838: LD_ADDR_VAR 0 1
8842: PUSH
8843: LD_VAR 0 1
8847: PPUSH
8848: LD_INT 2
8850: PPUSH
8851: LD_VAR 0 1
8855: PUSH
8856: LD_INT 2
8858: ARRAY
8859: PUSH
8860: CALL_OW 44
8864: ADD
8865: PPUSH
8866: CALL_OW 1
8870: ST_TO_ADDR
// end ;
8871: GO 8757
8873: POP
8874: POP
// if commander = 1 then
8875: LD_EXP 25
8879: PUSH
8880: LD_INT 1
8882: EQUAL
8883: IFFALSE 8951
// for i = 1 to 4 do
8885: LD_ADDR_VAR 0 2
8889: PUSH
8890: DOUBLE
8891: LD_INT 1
8893: DEC
8894: ST_TO_ADDR
8895: LD_INT 4
8897: PUSH
8898: FOR_TO
8899: IFFALSE 8949
// begin PrepareHuman ( false , class_soldier , 8 ) ;
8901: LD_INT 0
8903: PPUSH
8904: LD_INT 1
8906: PPUSH
8907: LD_INT 8
8909: PPUSH
8910: CALL_OW 380
// result := Replace ( result , 2 , result [ 2 ] ^ CreateHuman ) ;
8914: LD_ADDR_VAR 0 1
8918: PUSH
8919: LD_VAR 0 1
8923: PPUSH
8924: LD_INT 2
8926: PPUSH
8927: LD_VAR 0 1
8931: PUSH
8932: LD_INT 2
8934: ARRAY
8935: PUSH
8936: CALL_OW 44
8940: ADD
8941: PPUSH
8942: CALL_OW 1
8946: ST_TO_ADDR
// end ;
8947: GO 8898
8949: POP
8950: POP
// techs := [ ] ;
8951: LD_ADDR_VAR 0 4
8955: PUSH
8956: EMPTY
8957: ST_TO_ADDR
// if commander = 1 then
8958: LD_EXP 25
8962: PUSH
8963: LD_INT 1
8965: EQUAL
8966: IFFALSE 8991
// techs := [ tech_weap1 , tech_weap2 , tech_weap3 , tech_lasSight ] ;
8968: LD_ADDR_VAR 0 4
8972: PUSH
8973: LD_INT 51
8975: PUSH
8976: LD_INT 52
8978: PUSH
8979: LD_INT 53
8981: PUSH
8982: LD_INT 12
8984: PUSH
8985: EMPTY
8986: LIST
8987: LIST
8988: LIST
8989: LIST
8990: ST_TO_ADDR
// if commander = 2 then
8991: LD_EXP 25
8995: PUSH
8996: LD_INT 2
8998: EQUAL
8999: IFFALSE 9036
// techs := [ tech_tech1 , tech_oilEng , tech_oilPow , tech_solEng , tech_solPow , tech_opto1 , tech_radar ] ;
9001: LD_ADDR_VAR 0 4
9005: PUSH
9006: LD_INT 48
9008: PUSH
9009: LD_INT 47
9011: PUSH
9012: LD_INT 46
9014: PUSH
9015: LD_INT 45
9017: PUSH
9018: LD_INT 35
9020: PUSH
9021: LD_INT 60
9023: PUSH
9024: LD_INT 6
9026: PUSH
9027: EMPTY
9028: LIST
9029: LIST
9030: LIST
9031: LIST
9032: LIST
9033: LIST
9034: LIST
9035: ST_TO_ADDR
// if commander = 3 then
9036: LD_EXP 25
9040: PUSH
9041: LD_INT 3
9043: EQUAL
9044: IFFALSE 9093
// techs := [ tech_advAI , tech_advchassis , tech_ai , tech_comp1 , tech_comp2 , tech_oilEng , tech_oilPow , tech_weap1 , tech_gatling , tech_gun ] ;
9046: LD_ADDR_VAR 0 4
9050: PUSH
9051: LD_INT 27
9053: PUSH
9054: LD_INT 36
9056: PUSH
9057: LD_INT 32
9059: PUSH
9060: LD_INT 57
9062: PUSH
9063: LD_INT 58
9065: PUSH
9066: LD_INT 47
9068: PUSH
9069: LD_INT 46
9071: PUSH
9072: LD_INT 51
9074: PUSH
9075: LD_INT 69
9077: PUSH
9078: LD_INT 39
9080: PUSH
9081: EMPTY
9082: LIST
9083: LIST
9084: LIST
9085: LIST
9086: LIST
9087: LIST
9088: LIST
9089: LIST
9090: LIST
9091: LIST
9092: ST_TO_ADDR
// if techs then
9093: LD_VAR 0 4
9097: IFFALSE 9131
// for i in techs do
9099: LD_ADDR_VAR 0 2
9103: PUSH
9104: LD_VAR 0 4
9108: PUSH
9109: FOR_IN
9110: IFFALSE 9129
// SetTech ( i , 1 , state_researched ) ;
9112: LD_VAR 0 2
9116: PPUSH
9117: LD_INT 1
9119: PPUSH
9120: LD_INT 2
9122: PPUSH
9123: CALL_OW 322
9127: GO 9109
9129: POP
9130: POP
// hc_gallery := skirmish ;
9131: LD_ADDR_OWVAR 33
9135: PUSH
9136: LD_STRING skirmish
9138: ST_TO_ADDR
// hc_face_number := commander ;
9139: LD_ADDR_OWVAR 34
9143: PUSH
9144: LD_EXP 25
9148: ST_TO_ADDR
// hc_importance := 100 ;
9149: LD_ADDR_OWVAR 32
9153: PUSH
9154: LD_INT 100
9156: ST_TO_ADDR
// case commander of 1 :
9157: LD_EXP 25
9161: PUSH
9162: LD_INT 1
9164: DOUBLE
9165: EQUAL
9166: IFTRUE 9170
9168: GO 9194
9170: POP
// begin hc_name := Jeff Ironside ;
9171: LD_ADDR_OWVAR 26
9175: PUSH
9176: LD_STRING Jeff Ironside
9178: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 7 ) ;
9179: LD_INT 1
9181: PPUSH
9182: LD_INT 1
9184: PPUSH
9185: LD_INT 7
9187: PPUSH
9188: CALL_OW 380
// end ; 2 :
9192: GO 9259
9194: LD_INT 2
9196: DOUBLE
9197: EQUAL
9198: IFTRUE 9202
9200: GO 9226
9202: POP
// begin hc_name := Paul Johnson ;
9203: LD_ADDR_OWVAR 26
9207: PUSH
9208: LD_STRING Paul Johnson
9210: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 7 ) ;
9211: LD_INT 1
9213: PPUSH
9214: LD_INT 3
9216: PPUSH
9217: LD_INT 7
9219: PPUSH
9220: CALL_OW 380
// end ; 3 :
9224: GO 9259
9226: LD_INT 3
9228: DOUBLE
9229: EQUAL
9230: IFTRUE 9234
9232: GO 9258
9234: POP
// begin hc_name := Lisa Stuart ;
9235: LD_ADDR_OWVAR 26
9239: PUSH
9240: LD_STRING Lisa Stuart
9242: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , 7 ) ;
9243: LD_INT 2
9245: PPUSH
9246: LD_INT 4
9248: PPUSH
9249: LD_INT 7
9251: PPUSH
9252: CALL_OW 380
// end ; end ;
9256: GO 9259
9258: POP
// playerCommander := CreateHuman ;
9259: LD_ADDR_EXP 9
9263: PUSH
9264: CALL_OW 44
9268: ST_TO_ADDR
// hc_importance := 0 ;
9269: LD_ADDR_OWVAR 32
9273: PUSH
9274: LD_INT 0
9276: ST_TO_ADDR
// hc_gallery :=  ;
9277: LD_ADDR_OWVAR 33
9281: PUSH
9282: LD_STRING 
9284: ST_TO_ADDR
// result := Replace ( result , 2 , result [ 2 ] ^ playerCommander ) ;
9285: LD_ADDR_VAR 0 1
9289: PUSH
9290: LD_VAR 0 1
9294: PPUSH
9295: LD_INT 2
9297: PPUSH
9298: LD_VAR 0 1
9302: PUSH
9303: LD_INT 2
9305: ARRAY
9306: PUSH
9307: LD_EXP 9
9311: ADD
9312: PPUSH
9313: CALL_OW 1
9317: ST_TO_ADDR
// end ;
9318: LD_VAR 0 1
9322: RET
// export function PrepareReinforcements ; var i , peopleAmount , tmp , un , veh ; begin
9323: LD_INT 0
9325: PPUSH
9326: PPUSH
9327: PPUSH
9328: PPUSH
9329: PPUSH
9330: PPUSH
// uc_side := 1 ;
9331: LD_ADDR_OWVAR 20
9335: PUSH
9336: LD_INT 1
9338: ST_TO_ADDR
// uc_nation := 1 ;
9339: LD_ADDR_OWVAR 21
9343: PUSH
9344: LD_INT 1
9346: ST_TO_ADDR
// InitHc ;
9347: CALL_OW 19
// peopleAmount := [ 3 , 3 , 2 ] [ Difficulty ] ;
9351: LD_ADDR_VAR 0 3
9355: PUSH
9356: LD_INT 3
9358: PUSH
9359: LD_INT 3
9361: PUSH
9362: LD_INT 2
9364: PUSH
9365: EMPTY
9366: LIST
9367: LIST
9368: LIST
9369: PUSH
9370: LD_OWVAR 67
9374: ARRAY
9375: ST_TO_ADDR
// for i = 1 to peopleAmount do
9376: LD_ADDR_VAR 0 2
9380: PUSH
9381: DOUBLE
9382: LD_INT 1
9384: DEC
9385: ST_TO_ADDR
9386: LD_VAR 0 3
9390: PUSH
9391: FOR_TO
9392: IFFALSE 9441
// begin PrepareHuman ( false , 2 , [ 7 , 6 , 5 ] [ Difficulty ] ) ;
9394: LD_INT 0
9396: PPUSH
9397: LD_INT 2
9399: PPUSH
9400: LD_INT 7
9402: PUSH
9403: LD_INT 6
9405: PUSH
9406: LD_INT 5
9408: PUSH
9409: EMPTY
9410: LIST
9411: LIST
9412: LIST
9413: PUSH
9414: LD_OWVAR 67
9418: ARRAY
9419: PPUSH
9420: CALL_OW 380
// PlaceUnitInArea ( CreateHuman , startArea , false ) ;
9424: CALL_OW 44
9428: PPUSH
9429: LD_INT 19
9431: PPUSH
9432: LD_INT 0
9434: PPUSH
9435: CALL 61072 0 3
// end ;
9439: GO 9391
9441: POP
9442: POP
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_computer , us_crane , 58 ) ;
9443: LD_INT 2
9445: PPUSH
9446: LD_INT 1
9448: PPUSH
9449: LD_INT 3
9451: PPUSH
9452: LD_INT 13
9454: PPUSH
9455: LD_INT 58
9457: PPUSH
9458: CALL 26437 0 5
// PlaceUnitInArea ( CreateVehicle , startArea , false ) ;
9462: CALL_OW 45
9466: PPUSH
9467: LD_INT 19
9469: PPUSH
9470: LD_INT 0
9472: PPUSH
9473: CALL 61072 0 3
// if commander = 1 then
9477: LD_EXP 25
9481: PUSH
9482: LD_INT 1
9484: EQUAL
9485: IFFALSE 9496
// wait ( 6 6$00 ) else
9487: LD_INT 12600
9489: PPUSH
9490: CALL_OW 67
9494: GO 9503
// wait ( 8 8$00 ) ;
9496: LD_INT 16800
9498: PPUSH
9499: CALL_OW 67
// uc_side := 1 ;
9503: LD_ADDR_OWVAR 20
9507: PUSH
9508: LD_INT 1
9510: ST_TO_ADDR
// uc_nation := 1 ;
9511: LD_ADDR_OWVAR 21
9515: PUSH
9516: LD_INT 1
9518: ST_TO_ADDR
// InitVc ;
9519: CALL_OW 20
// InitHc ;
9523: CALL_OW 19
// for i = 1 to 5 do
9527: LD_ADDR_VAR 0 2
9531: PUSH
9532: DOUBLE
9533: LD_INT 1
9535: DEC
9536: ST_TO_ADDR
9537: LD_INT 5
9539: PUSH
9540: FOR_TO
9541: IFFALSE 9785
// begin PrepareVehicle ( [ us_heavy_tracked , us_medium_tracked , us_light_wheeled ] [ i mod 3 + 1 ] , engine_combustion , [ control_manual , control_computer , control_computer ] [ i mod 3 + 1 ] , [ us_heavy_gun , us_cargo_bay , us_radar ] [ i mod 3 + 1 ] , rand ( 40 , 55 ) ) ;
9543: LD_INT 4
9545: PUSH
9546: LD_INT 3
9548: PUSH
9549: LD_INT 1
9551: PUSH
9552: EMPTY
9553: LIST
9554: LIST
9555: LIST
9556: PUSH
9557: LD_VAR 0 2
9561: PUSH
9562: LD_INT 3
9564: MOD
9565: PUSH
9566: LD_INT 1
9568: PLUS
9569: ARRAY
9570: PPUSH
9571: LD_INT 1
9573: PPUSH
9574: LD_INT 1
9576: PUSH
9577: LD_INT 3
9579: PUSH
9580: LD_INT 3
9582: PUSH
9583: EMPTY
9584: LIST
9585: LIST
9586: LIST
9587: PUSH
9588: LD_VAR 0 2
9592: PUSH
9593: LD_INT 3
9595: MOD
9596: PUSH
9597: LD_INT 1
9599: PLUS
9600: ARRAY
9601: PPUSH
9602: LD_INT 6
9604: PUSH
9605: LD_INT 12
9607: PUSH
9608: LD_INT 11
9610: PUSH
9611: EMPTY
9612: LIST
9613: LIST
9614: LIST
9615: PUSH
9616: LD_VAR 0 2
9620: PUSH
9621: LD_INT 3
9623: MOD
9624: PUSH
9625: LD_INT 1
9627: PLUS
9628: ARRAY
9629: PPUSH
9630: LD_INT 40
9632: PPUSH
9633: LD_INT 55
9635: PPUSH
9636: CALL_OW 12
9640: PPUSH
9641: CALL 26437 0 5
// veh := CreateVehicle ;
9645: LD_ADDR_VAR 0 6
9649: PUSH
9650: CALL_OW 45
9654: ST_TO_ADDR
// PlaceUnitInArea ( veh , startArea , false ) ;
9655: LD_VAR 0 6
9659: PPUSH
9660: LD_INT 19
9662: PPUSH
9663: LD_INT 0
9665: PPUSH
9666: CALL 61072 0 3
// if GetWeapon ( veh ) = us_cargo_bay then
9670: LD_VAR 0 6
9674: PPUSH
9675: CALL_OW 264
9679: PUSH
9680: LD_INT 12
9682: EQUAL
9683: IFFALSE 9715
// begin AddCargo ( veh , mat_cans , 70 ) ;
9685: LD_VAR 0 6
9689: PPUSH
9690: LD_INT 1
9692: PPUSH
9693: LD_INT 70
9695: PPUSH
9696: CALL_OW 291
// AddCargo ( veh , mat_siberit , 30 ) ;
9700: LD_VAR 0 6
9704: PPUSH
9705: LD_INT 3
9707: PPUSH
9708: LD_INT 30
9710: PPUSH
9711: CALL_OW 291
// end ; if GetControl ( veh ) = control_manual then
9715: LD_VAR 0 6
9719: PPUSH
9720: CALL_OW 263
9724: PUSH
9725: LD_INT 1
9727: EQUAL
9728: IFFALSE 9783
// begin PrepareHuman ( sex_male , 3 , 6 ) ;
9730: LD_INT 1
9732: PPUSH
9733: LD_INT 3
9735: PPUSH
9736: LD_INT 6
9738: PPUSH
9739: CALL_OW 380
// un := CreateHuman ;
9743: LD_ADDR_VAR 0 5
9747: PUSH
9748: CALL_OW 44
9752: ST_TO_ADDR
// tmp := tmp ^ un ;
9753: LD_ADDR_VAR 0 4
9757: PUSH
9758: LD_VAR 0 4
9762: PUSH
9763: LD_VAR 0 5
9767: ADD
9768: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9769: LD_VAR 0 5
9773: PPUSH
9774: LD_VAR 0 6
9778: PPUSH
9779: CALL_OW 52
// end ; end ;
9783: GO 9540
9785: POP
9786: POP
// if tmp then
9787: LD_VAR 0 4
9791: IFFALSE 9855
// begin CenterNowOnUnits ( tmp ) ;
9793: LD_VAR 0 4
9797: PPUSH
9798: CALL_OW 87
// Say ( tmp [ 1 ] , DAR-1 ) ;
9802: LD_VAR 0 4
9806: PUSH
9807: LD_INT 1
9809: ARRAY
9810: PPUSH
9811: LD_STRING DAR-1
9813: PPUSH
9814: CALL_OW 88
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-DAR ) ;
9818: LD_EXP 9
9822: PPUSH
9823: LD_STRING D
9825: PUSH
9826: LD_STRING I
9828: PUSH
9829: LD_STRING J
9831: PUSH
9832: LD_STRING S
9834: PUSH
9835: EMPTY
9836: LIST
9837: LIST
9838: LIST
9839: PUSH
9840: LD_EXP 25
9844: ARRAY
9845: STR
9846: PUSH
9847: LD_STRING -1-DAR
9849: STR
9850: PPUSH
9851: CALL_OW 88
// end ; if not reinforceAllowed then
9855: LD_EXP 24
9859: NOT
9860: IFFALSE 9864
// exit ;
9862: GO 10018
// wait ( 25 25$00 ) ;
9864: LD_INT 52500
9866: PPUSH
9867: CALL_OW 67
// uc_side := 1 ;
9871: LD_ADDR_OWVAR 20
9875: PUSH
9876: LD_INT 1
9878: ST_TO_ADDR
// uc_nation := 1 ;
9879: LD_ADDR_OWVAR 21
9883: PUSH
9884: LD_INT 1
9886: ST_TO_ADDR
// InitVc ;
9887: CALL_OW 20
// InitHc ;
9891: CALL_OW 19
// for i = 1 to 4 do
9895: LD_ADDR_VAR 0 2
9899: PUSH
9900: DOUBLE
9901: LD_INT 1
9903: DEC
9904: ST_TO_ADDR
9905: LD_INT 4
9907: PUSH
9908: FOR_TO
9909: IFFALSE 10016
// begin PrepareVehicle ( us_morphling , engine_siberite , control_manual , us_heavy_gun , 1 ) ;
9911: LD_INT 5
9913: PPUSH
9914: LD_INT 3
9916: PPUSH
9917: LD_INT 1
9919: PPUSH
9920: LD_INT 6
9922: PPUSH
9923: LD_INT 1
9925: PPUSH
9926: CALL 26437 0 5
// veh := CreateVehicle ;
9930: LD_ADDR_VAR 0 6
9934: PUSH
9935: CALL_OW 45
9939: ST_TO_ADDR
// PlaceUnitInArea ( veh , startArea , false ) ;
9940: LD_VAR 0 6
9944: PPUSH
9945: LD_INT 19
9947: PPUSH
9948: LD_INT 0
9950: PPUSH
9951: CALL 61072 0 3
// if GetControl ( veh ) = control_manual then
9955: LD_VAR 0 6
9959: PPUSH
9960: CALL_OW 263
9964: PUSH
9965: LD_INT 1
9967: EQUAL
9968: IFFALSE 10014
// begin PrepareHuman ( false , 3 , [ 7 , 6 , 5 ] [ Difficulty ] ) ;
9970: LD_INT 0
9972: PPUSH
9973: LD_INT 3
9975: PPUSH
9976: LD_INT 7
9978: PUSH
9979: LD_INT 6
9981: PUSH
9982: LD_INT 5
9984: PUSH
9985: EMPTY
9986: LIST
9987: LIST
9988: LIST
9989: PUSH
9990: LD_OWVAR 67
9994: ARRAY
9995: PPUSH
9996: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
10000: CALL_OW 44
10004: PPUSH
10005: LD_VAR 0 6
10009: PPUSH
10010: CALL_OW 52
// end ; end ;
10014: GO 9908
10016: POP
10017: POP
// end ;
10018: LD_VAR 0 1
10022: RET
// export function PrepareLegionReinforcements ; var i , un , j , tmp ; begin
10023: LD_INT 0
10025: PPUSH
10026: PPUSH
10027: PPUSH
10028: PPUSH
10029: PPUSH
// uc_side := 8 ;
10030: LD_ADDR_OWVAR 20
10034: PUSH
10035: LD_INT 8
10037: ST_TO_ADDR
// uc_nation := nation_arabian ;
10038: LD_ADDR_OWVAR 21
10042: PUSH
10043: LD_INT 2
10045: ST_TO_ADDR
// for i = 1 to 2 do
10046: LD_ADDR_VAR 0 2
10050: PUSH
10051: DOUBLE
10052: LD_INT 1
10054: DEC
10055: ST_TO_ADDR
10056: LD_INT 2
10058: PUSH
10059: FOR_TO
10060: IFFALSE 10140
// for j = 1 to 4 do
10062: LD_ADDR_VAR 0 4
10066: PUSH
10067: DOUBLE
10068: LD_INT 1
10070: DEC
10071: ST_TO_ADDR
10072: LD_INT 4
10074: PUSH
10075: FOR_TO
10076: IFFALSE 10136
// begin PrepareHuman ( false , j , 8 ) ;
10078: LD_INT 0
10080: PPUSH
10081: LD_VAR 0 4
10085: PPUSH
10086: LD_INT 8
10088: PPUSH
10089: CALL_OW 380
// un := CreateHuman ;
10093: LD_ADDR_VAR 0 3
10097: PUSH
10098: CALL_OW 44
10102: ST_TO_ADDR
// PlaceUnitArea ( un , legionSpawn , false ) ;
10103: LD_VAR 0 3
10107: PPUSH
10108: LD_INT 23
10110: PPUSH
10111: LD_INT 0
10113: PPUSH
10114: CALL_OW 49
// tmp := tmp union un ;
10118: LD_ADDR_VAR 0 5
10122: PUSH
10123: LD_VAR 0 5
10127: PUSH
10128: LD_VAR 0 3
10132: UNION
10133: ST_TO_ADDR
// end ;
10134: GO 10075
10136: POP
10137: POP
10138: GO 10059
10140: POP
10141: POP
// for i in tmp do
10142: LD_ADDR_VAR 0 2
10146: PUSH
10147: LD_VAR 0 5
10151: PUSH
10152: FOR_IN
10153: IFFALSE 10172
// ComMoveXY ( i , 150 , 136 ) ;
10155: LD_VAR 0 2
10159: PPUSH
10160: LD_INT 150
10162: PPUSH
10163: LD_INT 136
10165: PPUSH
10166: CALL_OW 111
10170: GO 10152
10172: POP
10173: POP
// mc_bases := Replace ( mc_bases , mc_leg , mc_bases [ mc_leg ] union tmp ) ;
10174: LD_ADDR_EXP 36
10178: PUSH
10179: LD_EXP 36
10183: PPUSH
10184: LD_EXP 6
10188: PPUSH
10189: LD_EXP 36
10193: PUSH
10194: LD_EXP 6
10198: ARRAY
10199: PUSH
10200: LD_VAR 0 5
10204: UNION
10205: PPUSH
10206: CALL_OW 1
10210: ST_TO_ADDR
// end ;
10211: LD_VAR 0 1
10215: RET
// every 0 0$10 trigger GetTech ( tech_lapser , 3 ) = state_researched do
10216: LD_INT 31
10218: PPUSH
10219: LD_INT 3
10221: PPUSH
10222: CALL_OW 321
10226: PUSH
10227: LD_INT 2
10229: EQUAL
10230: IFFALSE 10360
10232: GO 10234
10234: DISABLE
// begin MC_InsertBuildingList ( mc_rus_2 , [ [ b_turret , 78 , 151 , 5 ] , [ b_turret , 101 , 159 , 5 ] , [ b_turret , 105 , 158 , 5 ] , [ b_turret , 96 , 136 , 5 ] , [ b_turret , 94 , 133 , 4 ] , [ b_turret , 84 , 102 , 4 ] ] ) ;
10235: LD_EXP 8
10239: PPUSH
10240: LD_INT 33
10242: PUSH
10243: LD_INT 78
10245: PUSH
10246: LD_INT 151
10248: PUSH
10249: LD_INT 5
10251: PUSH
10252: EMPTY
10253: LIST
10254: LIST
10255: LIST
10256: LIST
10257: PUSH
10258: LD_INT 33
10260: PUSH
10261: LD_INT 101
10263: PUSH
10264: LD_INT 159
10266: PUSH
10267: LD_INT 5
10269: PUSH
10270: EMPTY
10271: LIST
10272: LIST
10273: LIST
10274: LIST
10275: PUSH
10276: LD_INT 33
10278: PUSH
10279: LD_INT 105
10281: PUSH
10282: LD_INT 158
10284: PUSH
10285: LD_INT 5
10287: PUSH
10288: EMPTY
10289: LIST
10290: LIST
10291: LIST
10292: LIST
10293: PUSH
10294: LD_INT 33
10296: PUSH
10297: LD_INT 96
10299: PUSH
10300: LD_INT 136
10302: PUSH
10303: LD_INT 5
10305: PUSH
10306: EMPTY
10307: LIST
10308: LIST
10309: LIST
10310: LIST
10311: PUSH
10312: LD_INT 33
10314: PUSH
10315: LD_INT 94
10317: PUSH
10318: LD_INT 133
10320: PUSH
10321: LD_INT 4
10323: PUSH
10324: EMPTY
10325: LIST
10326: LIST
10327: LIST
10328: LIST
10329: PUSH
10330: LD_INT 33
10332: PUSH
10333: LD_INT 84
10335: PUSH
10336: LD_INT 102
10338: PUSH
10339: LD_INT 4
10341: PUSH
10342: EMPTY
10343: LIST
10344: LIST
10345: LIST
10346: LIST
10347: PUSH
10348: EMPTY
10349: LIST
10350: LIST
10351: LIST
10352: LIST
10353: LIST
10354: LIST
10355: PPUSH
10356: CALL 85590 0 2
// end ; end_of_file
10360: END
// export function Action ; var i , tmp ; begin
10361: LD_INT 0
10363: PPUSH
10364: PPUSH
10365: PPUSH
// InGameOn ;
10366: CALL_OW 8
// CenterNowOnXY ( 225 , 217 ) ;
10370: LD_INT 225
10372: PPUSH
10373: LD_INT 217
10375: PPUSH
10376: CALL_OW 86
// for i in playerForces [ 2 ] do
10380: LD_ADDR_VAR 0 2
10384: PUSH
10385: LD_EXP 10
10389: PUSH
10390: LD_INT 2
10392: ARRAY
10393: PUSH
10394: FOR_IN
10395: IFFALSE 10528
// begin if playerForces [ 1 ] and GetClass ( i ) in [ 3 , 4 ] then
10397: LD_EXP 10
10401: PUSH
10402: LD_INT 1
10404: ARRAY
10405: PUSH
10406: LD_VAR 0 2
10410: PPUSH
10411: CALL_OW 257
10415: PUSH
10416: LD_INT 3
10418: PUSH
10419: LD_INT 4
10421: PUSH
10422: EMPTY
10423: LIST
10424: LIST
10425: IN
10426: AND
10427: IFFALSE 10511
// begin PlaceUnitInArea ( playerForces [ 1 ] [ 1 ] , startArea , false ) ;
10429: LD_EXP 10
10433: PUSH
10434: LD_INT 1
10436: ARRAY
10437: PUSH
10438: LD_INT 1
10440: ARRAY
10441: PPUSH
10442: LD_INT 19
10444: PPUSH
10445: LD_INT 0
10447: PPUSH
10448: CALL 61072 0 3
// PlaceHumanInUnit ( i , playerForces [ 1 ] [ 1 ] ) ;
10452: LD_VAR 0 2
10456: PPUSH
10457: LD_EXP 10
10461: PUSH
10462: LD_INT 1
10464: ARRAY
10465: PUSH
10466: LD_INT 1
10468: ARRAY
10469: PPUSH
10470: CALL_OW 52
// playerForces := Replace ( playerForces , 1 , Delete ( playerForces [ 1 ] , 1 ) ) ;
10474: LD_ADDR_EXP 10
10478: PUSH
10479: LD_EXP 10
10483: PPUSH
10484: LD_INT 1
10486: PPUSH
10487: LD_EXP 10
10491: PUSH
10492: LD_INT 1
10494: ARRAY
10495: PPUSH
10496: LD_INT 1
10498: PPUSH
10499: CALL_OW 3
10503: PPUSH
10504: CALL_OW 1
10508: ST_TO_ADDR
// end else
10509: GO 10526
// PlaceUnitInArea ( i , startArea , false ) ;
10511: LD_VAR 0 2
10515: PPUSH
10516: LD_INT 19
10518: PPUSH
10519: LD_INT 0
10521: PPUSH
10522: CALL 61072 0 3
// end ;
10526: GO 10394
10528: POP
10529: POP
// wait ( 0 0$2 ) ;
10530: LD_INT 70
10532: PPUSH
10533: CALL_OW 67
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1 ) ;
10537: LD_EXP 9
10541: PPUSH
10542: LD_STRING D
10544: PUSH
10545: LD_STRING I
10547: PUSH
10548: LD_STRING J
10550: PUSH
10551: LD_STRING S
10553: PUSH
10554: EMPTY
10555: LIST
10556: LIST
10557: LIST
10558: PUSH
10559: LD_EXP 25
10563: ARRAY
10564: STR
10565: PUSH
10566: LD_STRING -1
10568: STR
10569: PPUSH
10570: CALL_OW 88
// SayRadio ( Powell , DP-1 ) ;
10574: LD_EXP 12
10578: PPUSH
10579: LD_STRING DP-1
10581: PPUSH
10582: CALL_OW 94
// SayRadio ( Powell , DP-2 ) ;
10586: LD_EXP 12
10590: PPUSH
10591: LD_STRING DP-2
10593: PPUSH
10594: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -2 ) ;
10598: LD_EXP 9
10602: PPUSH
10603: LD_STRING D
10605: PUSH
10606: LD_STRING I
10608: PUSH
10609: LD_STRING J
10611: PUSH
10612: LD_STRING S
10614: PUSH
10615: EMPTY
10616: LIST
10617: LIST
10618: LIST
10619: PUSH
10620: LD_EXP 25
10624: ARRAY
10625: STR
10626: PUSH
10627: LD_STRING -2
10629: STR
10630: PPUSH
10631: CALL_OW 88
// InGameOff ;
10635: CALL_OW 9
// ChangeMissionObjectives ( O1 ) ;
10639: LD_STRING O1
10641: PPUSH
10642: CALL_OW 337
// game := true ;
10646: LD_ADDR_EXP 3
10650: PUSH
10651: LD_INT 1
10653: ST_TO_ADDR
// wait ( 0 0$5 ) ;
10654: LD_INT 175
10656: PPUSH
10657: CALL_OW 67
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -3 ) ;
10661: LD_EXP 9
10665: PPUSH
10666: LD_STRING D
10668: PUSH
10669: LD_STRING I
10671: PUSH
10672: LD_STRING J
10674: PUSH
10675: LD_STRING S
10677: PUSH
10678: EMPTY
10679: LIST
10680: LIST
10681: LIST
10682: PUSH
10683: LD_EXP 25
10687: ARRAY
10688: STR
10689: PUSH
10690: LD_STRING -3
10692: STR
10693: PPUSH
10694: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
10698: LD_INT 35
10700: PPUSH
10701: CALL_OW 67
// until ruEscape [ 1 ] >= ruEscape [ 2 ] ;
10705: LD_EXP 15
10709: PUSH
10710: LD_INT 1
10712: ARRAY
10713: PUSH
10714: LD_EXP 15
10718: PUSH
10719: LD_INT 2
10721: ARRAY
10722: GREATEREQUAL
10723: IFFALSE 10698
// outpostEscape := true ;
10725: LD_ADDR_EXP 27
10729: PUSH
10730: LD_INT 1
10732: ST_TO_ADDR
// tmp := UnitFilter ( ruOutpost , [ f_sex , sex_male ] ) ;
10733: LD_ADDR_VAR 0 3
10737: PUSH
10738: LD_EXP 14
10742: PPUSH
10743: LD_INT 26
10745: PUSH
10746: LD_INT 1
10748: PUSH
10749: EMPTY
10750: LIST
10751: LIST
10752: PPUSH
10753: CALL_OW 72
10757: ST_TO_ADDR
// if tmp then
10758: LD_VAR 0 3
10762: IFFALSE 10780
// Say ( tmp [ 1 ] , DR-1-Escape ) ;
10764: LD_VAR 0 3
10768: PUSH
10769: LD_INT 1
10771: ARRAY
10772: PPUSH
10773: LD_STRING DR-1-Escape
10775: PPUSH
10776: CALL_OW 88
// wait ( 0 0$1 ) ;
10780: LD_INT 35
10782: PPUSH
10783: CALL_OW 67
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Escape ) ;
10787: LD_EXP 9
10791: PPUSH
10792: LD_STRING D
10794: PUSH
10795: LD_STRING I
10797: PUSH
10798: LD_STRING J
10800: PUSH
10801: LD_STRING S
10803: PUSH
10804: EMPTY
10805: LIST
10806: LIST
10807: LIST
10808: PUSH
10809: LD_EXP 25
10813: ARRAY
10814: STR
10815: PUSH
10816: LD_STRING -1-Escape
10818: STR
10819: PPUSH
10820: CALL_OW 88
// for i in ruOutpost do
10824: LD_ADDR_VAR 0 2
10828: PUSH
10829: LD_EXP 14
10833: PUSH
10834: FOR_IN
10835: IFFALSE 10889
// begin if IsInUnit ( i ) then
10837: LD_VAR 0 2
10841: PPUSH
10842: CALL_OW 310
10846: IFFALSE 10857
// ComExitBuilding ( i ) ;
10848: LD_VAR 0 2
10852: PPUSH
10853: CALL_OW 122
// AddComMoveXY ( i , 179 , 102 ) ;
10857: LD_VAR 0 2
10861: PPUSH
10862: LD_INT 179
10864: PPUSH
10865: LD_INT 102
10867: PPUSH
10868: CALL_OW 171
// AddComMoveXY ( i , 28 , 20 ) ;
10872: LD_VAR 0 2
10876: PPUSH
10877: LD_INT 28
10879: PPUSH
10880: LD_INT 20
10882: PPUSH
10883: CALL_OW 171
// end ;
10887: GO 10834
10889: POP
10890: POP
// tmp := [ ] ;
10891: LD_ADDR_VAR 0 3
10895: PUSH
10896: EMPTY
10897: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
10898: LD_INT 35
10900: PPUSH
10901: CALL_OW 67
// tmp := UnitFilter ( ruOutpost , [ f_inarea , rus1Base ] ) ;
10905: LD_ADDR_VAR 0 3
10909: PUSH
10910: LD_EXP 14
10914: PPUSH
10915: LD_INT 95
10917: PUSH
10918: LD_INT 11
10920: PUSH
10921: EMPTY
10922: LIST
10923: LIST
10924: PPUSH
10925: CALL_OW 72
10929: ST_TO_ADDR
// if tmp then
10930: LD_VAR 0 3
10934: IFFALSE 11006
// for i in tmp do
10936: LD_ADDR_VAR 0 2
10940: PUSH
10941: LD_VAR 0 3
10945: PUSH
10946: FOR_IN
10947: IFFALSE 11004
// begin ruOutpost := ruOutpost diff i ;
10949: LD_ADDR_EXP 14
10953: PUSH
10954: LD_EXP 14
10958: PUSH
10959: LD_VAR 0 2
10963: DIFF
10964: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , mc_rus_1 , mc_bases [ mc_rus_1 ] union i ) ;
10965: LD_ADDR_EXP 36
10969: PUSH
10970: LD_EXP 36
10974: PPUSH
10975: LD_EXP 7
10979: PPUSH
10980: LD_EXP 36
10984: PUSH
10985: LD_EXP 7
10989: ARRAY
10990: PUSH
10991: LD_VAR 0 2
10995: UNION
10996: PPUSH
10997: CALL_OW 1
11001: ST_TO_ADDR
// end ;
11002: GO 10946
11004: POP
11005: POP
// until not ruOutpost ;
11006: LD_EXP 14
11010: NOT
11011: IFFALSE 10898
// end ;
11013: LD_VAR 0 1
11017: RET
// every 0 0$1 trigger outpostEscape do var i , tmp ;
11018: LD_EXP 27
11022: IFFALSE 11211
11024: GO 11026
11026: DISABLE
11027: LD_INT 0
11029: PPUSH
11030: PPUSH
// begin wait ( rand ( 0 0$25 , 0 0$35 ) ) ;
11031: LD_INT 875
11033: PPUSH
11034: LD_INT 1225
11036: PPUSH
11037: CALL_OW 12
11041: PPUSH
11042: CALL_OW 67
// tmp := [ [ 208 , 166 ] , [ 218 , 174 ] , [ 201 , 173 ] , [ 189 , 167 ] , [ 191 , 160 ] , [ 209 , 181 ] , [ 192 , 162 ] , [ 197 , 166 ] ] ;
11046: LD_ADDR_VAR 0 2
11050: PUSH
11051: LD_INT 208
11053: PUSH
11054: LD_INT 166
11056: PUSH
11057: EMPTY
11058: LIST
11059: LIST
11060: PUSH
11061: LD_INT 218
11063: PUSH
11064: LD_INT 174
11066: PUSH
11067: EMPTY
11068: LIST
11069: LIST
11070: PUSH
11071: LD_INT 201
11073: PUSH
11074: LD_INT 173
11076: PUSH
11077: EMPTY
11078: LIST
11079: LIST
11080: PUSH
11081: LD_INT 189
11083: PUSH
11084: LD_INT 167
11086: PUSH
11087: EMPTY
11088: LIST
11089: LIST
11090: PUSH
11091: LD_INT 191
11093: PUSH
11094: LD_INT 160
11096: PUSH
11097: EMPTY
11098: LIST
11099: LIST
11100: PUSH
11101: LD_INT 209
11103: PUSH
11104: LD_INT 181
11106: PUSH
11107: EMPTY
11108: LIST
11109: LIST
11110: PUSH
11111: LD_INT 192
11113: PUSH
11114: LD_INT 162
11116: PUSH
11117: EMPTY
11118: LIST
11119: LIST
11120: PUSH
11121: LD_INT 197
11123: PUSH
11124: LD_INT 166
11126: PUSH
11127: EMPTY
11128: LIST
11129: LIST
11130: PUSH
11131: EMPTY
11132: LIST
11133: LIST
11134: LIST
11135: LIST
11136: LIST
11137: LIST
11138: LIST
11139: LIST
11140: ST_TO_ADDR
// for i = 1 to 5 + Difficulty do
11141: LD_ADDR_VAR 0 1
11145: PUSH
11146: DOUBLE
11147: LD_INT 1
11149: DEC
11150: ST_TO_ADDR
11151: LD_INT 5
11153: PUSH
11154: LD_OWVAR 67
11158: PLUS
11159: PUSH
11160: FOR_TO
11161: IFFALSE 11209
// begin MineExplosion ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , 1 ) ;
11163: LD_VAR 0 2
11167: PUSH
11168: LD_VAR 0 1
11172: ARRAY
11173: PUSH
11174: LD_INT 1
11176: ARRAY
11177: PPUSH
11178: LD_VAR 0 2
11182: PUSH
11183: LD_VAR 0 1
11187: ARRAY
11188: PUSH
11189: LD_INT 2
11191: ARRAY
11192: PPUSH
11193: LD_INT 1
11195: PPUSH
11196: CALL_OW 453
// wait ( 0 0$0.8 ) ;
11200: LD_INT 28
11202: PPUSH
11203: CALL_OW 67
// end ;
11207: GO 11160
11209: POP
11210: POP
// end ;
11211: PPOPN 2
11213: END
// every 0 0$3 trigger not outpostEscape do var tmp , engs , buildings , empty , i , j , k ;
11214: LD_EXP 27
11218: NOT
11219: IFFALSE 11834
11221: GO 11223
11223: DISABLE
11224: LD_INT 0
11226: PPUSH
11227: PPUSH
11228: PPUSH
11229: PPUSH
11230: PPUSH
11231: PPUSH
11232: PPUSH
// begin enable ;
11233: ENABLE
// tmp := UnitFilter ( ruOutpost , [ f_class , 1 ] ) ;
11234: LD_ADDR_VAR 0 1
11238: PUSH
11239: LD_EXP 14
11243: PPUSH
11244: LD_INT 25
11246: PUSH
11247: LD_INT 1
11249: PUSH
11250: EMPTY
11251: LIST
11252: LIST
11253: PPUSH
11254: CALL_OW 72
11258: ST_TO_ADDR
// engs := UnitFilter ( ruOutpost , [ f_class , 2 ] ) ;
11259: LD_ADDR_VAR 0 2
11263: PUSH
11264: LD_EXP 14
11268: PPUSH
11269: LD_INT 25
11271: PUSH
11272: LD_INT 2
11274: PUSH
11275: EMPTY
11276: LIST
11277: LIST
11278: PPUSH
11279: CALL_OW 72
11283: ST_TO_ADDR
// buildings := UnitFilter ( ruOutpost , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
11284: LD_ADDR_VAR 0 3
11288: PUSH
11289: LD_EXP 14
11293: PPUSH
11294: LD_INT 21
11296: PUSH
11297: LD_INT 3
11299: PUSH
11300: EMPTY
11301: LIST
11302: LIST
11303: PUSH
11304: LD_INT 3
11306: PUSH
11307: LD_INT 24
11309: PUSH
11310: LD_INT 1000
11312: PUSH
11313: EMPTY
11314: LIST
11315: LIST
11316: PUSH
11317: EMPTY
11318: LIST
11319: LIST
11320: PUSH
11321: EMPTY
11322: LIST
11323: LIST
11324: PPUSH
11325: CALL_OW 72
11329: ST_TO_ADDR
// if engs and buildings then
11330: LD_VAR 0 2
11334: PUSH
11335: LD_VAR 0 3
11339: AND
11340: IFFALSE 11413
// begin for i in engs do
11342: LD_ADDR_VAR 0 5
11346: PUSH
11347: LD_VAR 0 2
11351: PUSH
11352: FOR_IN
11353: IFFALSE 11409
// if IsInUnit ( i ) then
11355: LD_VAR 0 5
11359: PPUSH
11360: CALL_OW 310
11364: IFFALSE 11377
// ComExitBuilding ( i ) else
11366: LD_VAR 0 5
11370: PPUSH
11371: CALL_OW 122
11375: GO 11407
// if not HasTask ( i ) then
11377: LD_VAR 0 5
11381: PPUSH
11382: CALL_OW 314
11386: NOT
11387: IFFALSE 11407
// ComRepairBuilding ( i , buildings [ 1 ] ) ;
11389: LD_VAR 0 5
11393: PPUSH
11394: LD_VAR 0 3
11398: PUSH
11399: LD_INT 1
11401: ARRAY
11402: PPUSH
11403: CALL_OW 130
11407: GO 11352
11409: POP
11410: POP
// end else
11411: GO 11516
// if not buildings and UnitFilter ( ruOutpost , [ f_btype , b_depot ] ) and UnitFilter ( engs , [ f_not , [ f_inside ] ] ) then
11413: LD_VAR 0 3
11417: NOT
11418: PUSH
11419: LD_EXP 14
11423: PPUSH
11424: LD_INT 30
11426: PUSH
11427: LD_INT 0
11429: PUSH
11430: EMPTY
11431: LIST
11432: LIST
11433: PPUSH
11434: CALL_OW 72
11438: AND
11439: PUSH
11440: LD_VAR 0 2
11444: PPUSH
11445: LD_INT 3
11447: PUSH
11448: LD_INT 54
11450: PUSH
11451: EMPTY
11452: LIST
11453: PUSH
11454: EMPTY
11455: LIST
11456: LIST
11457: PPUSH
11458: CALL_OW 72
11462: AND
11463: IFFALSE 11516
// ComEnterUnit ( UnitFilter ( engs , [ f_not , [ f_inside ] ] ) , UnitFilter ( ruOutpost , [ f_btype , b_depot ] ) [ 1 ] ) ;
11465: LD_VAR 0 2
11469: PPUSH
11470: LD_INT 3
11472: PUSH
11473: LD_INT 54
11475: PUSH
11476: EMPTY
11477: LIST
11478: PUSH
11479: EMPTY
11480: LIST
11481: LIST
11482: PPUSH
11483: CALL_OW 72
11487: PPUSH
11488: LD_EXP 14
11492: PPUSH
11493: LD_INT 30
11495: PUSH
11496: LD_INT 0
11498: PUSH
11499: EMPTY
11500: LIST
11501: LIST
11502: PPUSH
11503: CALL_OW 72
11507: PUSH
11508: LD_INT 1
11510: ARRAY
11511: PPUSH
11512: CALL_OW 120
// if not tmp then
11516: LD_VAR 0 1
11520: NOT
11521: IFFALSE 11525
// exit ;
11523: GO 11834
// if FilterUnitsInArea ( ruOutpostArea , [ f_enemy , 3 ] ) > 1 then
11525: LD_INT 25
11527: PPUSH
11528: LD_INT 81
11530: PUSH
11531: LD_INT 3
11533: PUSH
11534: EMPTY
11535: LIST
11536: LIST
11537: PPUSH
11538: CALL_OW 70
11542: PUSH
11543: LD_INT 1
11545: GREATER
11546: IFFALSE 11602
// begin for i in tmp do
11548: LD_ADDR_VAR 0 5
11552: PUSH
11553: LD_VAR 0 1
11557: PUSH
11558: FOR_IN
11559: IFFALSE 11598
// begin if IsInUnit ( i ) then
11561: LD_VAR 0 5
11565: PPUSH
11566: CALL_OW 310
11570: IFFALSE 11581
// ComExitBuilding ( i ) ;
11572: LD_VAR 0 5
11576: PPUSH
11577: CALL_OW 122
// AddComAgressiveMove ( i , 204 , 164 ) ;
11581: LD_VAR 0 5
11585: PPUSH
11586: LD_INT 204
11588: PPUSH
11589: LD_INT 164
11591: PPUSH
11592: CALL_OW 174
// end ;
11596: GO 11558
11598: POP
11599: POP
// end else
11600: GO 11834
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
11602: LD_VAR 0 1
11606: PPUSH
11607: LD_INT 3
11609: PUSH
11610: LD_INT 54
11612: PUSH
11613: EMPTY
11614: LIST
11615: PUSH
11616: EMPTY
11617: LIST
11618: LIST
11619: PPUSH
11620: CALL_OW 72
11624: IFFALSE 11834
// begin empty := UnitFilter ( ruOutpost , [ [ f_btype , b_bunker ] , [ f_empty ] ] ) ;
11626: LD_ADDR_VAR 0 4
11630: PUSH
11631: LD_EXP 14
11635: PPUSH
11636: LD_INT 30
11638: PUSH
11639: LD_INT 32
11641: PUSH
11642: EMPTY
11643: LIST
11644: LIST
11645: PUSH
11646: LD_INT 58
11648: PUSH
11649: EMPTY
11650: LIST
11651: PUSH
11652: EMPTY
11653: LIST
11654: LIST
11655: PPUSH
11656: CALL_OW 72
11660: ST_TO_ADDR
// if not empty and UnitFilter ( ruOutpost , [ f_btype , b_barracks ] ) then
11661: LD_VAR 0 4
11665: NOT
11666: PUSH
11667: LD_EXP 14
11671: PPUSH
11672: LD_INT 30
11674: PUSH
11675: LD_INT 5
11677: PUSH
11678: EMPTY
11679: LIST
11680: LIST
11681: PPUSH
11682: CALL_OW 72
11686: AND
11687: IFFALSE 11724
// begin ComEnterUnit ( tmp , UnitFilter ( ruOutpost , [ f_btype , b_barracks ] ) [ 1 ] ) ;
11689: LD_VAR 0 1
11693: PPUSH
11694: LD_EXP 14
11698: PPUSH
11699: LD_INT 30
11701: PUSH
11702: LD_INT 5
11704: PUSH
11705: EMPTY
11706: LIST
11707: LIST
11708: PPUSH
11709: CALL_OW 72
11713: PUSH
11714: LD_INT 1
11716: ARRAY
11717: PPUSH
11718: CALL_OW 120
// exit ;
11722: GO 11834
// end ; j := UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) ;
11724: LD_ADDR_VAR 0 6
11728: PUSH
11729: LD_VAR 0 1
11733: PPUSH
11734: LD_INT 3
11736: PUSH
11737: LD_INT 54
11739: PUSH
11740: EMPTY
11741: LIST
11742: PUSH
11743: EMPTY
11744: LIST
11745: LIST
11746: PPUSH
11747: CALL_OW 72
11751: ST_TO_ADDR
// if j < empty then
11752: LD_VAR 0 6
11756: PUSH
11757: LD_VAR 0 4
11761: LESS
11762: IFFALSE 11776
// k := j else
11764: LD_ADDR_VAR 0 7
11768: PUSH
11769: LD_VAR 0 6
11773: ST_TO_ADDR
11774: GO 11786
// k := empty ;
11776: LD_ADDR_VAR 0 7
11780: PUSH
11781: LD_VAR 0 4
11785: ST_TO_ADDR
// for i = 1 to k do
11786: LD_ADDR_VAR 0 5
11790: PUSH
11791: DOUBLE
11792: LD_INT 1
11794: DEC
11795: ST_TO_ADDR
11796: LD_VAR 0 7
11800: PUSH
11801: FOR_TO
11802: IFFALSE 11832
// ComEnterUnit ( j [ i ] , empty [ i ] ) ;
11804: LD_VAR 0 6
11808: PUSH
11809: LD_VAR 0 5
11813: ARRAY
11814: PPUSH
11815: LD_VAR 0 4
11819: PUSH
11820: LD_VAR 0 5
11824: ARRAY
11825: PPUSH
11826: CALL_OW 120
11830: GO 11801
11832: POP
11833: POP
// end ; end ;
11834: PPOPN 7
11836: END
// every 0 0$2 trigger GameType = 1 and outpostEscape and FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , 208 , 163 , 8 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_distxy , 208 , 163 , 14 ] ] ) do var i ;
11837: LD_EXP 2
11841: PUSH
11842: LD_INT 1
11844: EQUAL
11845: PUSH
11846: LD_EXP 27
11850: AND
11851: PUSH
11852: LD_INT 22
11854: PUSH
11855: LD_INT 1
11857: PUSH
11858: EMPTY
11859: LIST
11860: LIST
11861: PUSH
11862: LD_INT 92
11864: PUSH
11865: LD_INT 208
11867: PUSH
11868: LD_INT 163
11870: PUSH
11871: LD_INT 8
11873: PUSH
11874: EMPTY
11875: LIST
11876: LIST
11877: LIST
11878: LIST
11879: PUSH
11880: EMPTY
11881: LIST
11882: LIST
11883: PPUSH
11884: CALL_OW 69
11888: AND
11889: PUSH
11890: LD_INT 22
11892: PUSH
11893: LD_INT 3
11895: PUSH
11896: EMPTY
11897: LIST
11898: LIST
11899: PUSH
11900: LD_INT 21
11902: PUSH
11903: LD_INT 1
11905: PUSH
11906: EMPTY
11907: LIST
11908: LIST
11909: PUSH
11910: LD_INT 92
11912: PUSH
11913: LD_INT 208
11915: PUSH
11916: LD_INT 163
11918: PUSH
11919: LD_INT 14
11921: PUSH
11922: EMPTY
11923: LIST
11924: LIST
11925: LIST
11926: LIST
11927: PUSH
11928: EMPTY
11929: LIST
11930: LIST
11931: LIST
11932: PPUSH
11933: CALL_OW 69
11937: NOT
11938: AND
11939: IFFALSE 12184
11941: GO 11943
11943: DISABLE
11944: LD_INT 0
11946: PPUSH
// begin InGameOn ;
11947: CALL_OW 8
// CenterNowOnUnits ( playerCommander ) ;
11951: LD_EXP 9
11955: PPUSH
11956: CALL_OW 87
// wait ( 0 0$1 ) ;
11960: LD_INT 35
11962: PPUSH
11963: CALL_OW 67
// DialogueOn ;
11967: CALL_OW 6
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-BaseCaptured ) ;
11971: LD_EXP 9
11975: PPUSH
11976: LD_STRING D
11978: PUSH
11979: LD_STRING I
11981: PUSH
11982: LD_STRING J
11984: PUSH
11985: LD_STRING S
11987: PUSH
11988: EMPTY
11989: LIST
11990: LIST
11991: LIST
11992: PUSH
11993: LD_EXP 25
11997: ARRAY
11998: STR
11999: PUSH
12000: LD_STRING -1-BaseCaptured
12002: STR
12003: PPUSH
12004: CALL_OW 88
// SayRadio ( Powell , DP-1-BaseCaptured ) ;
12008: LD_EXP 12
12012: PPUSH
12013: LD_STRING DP-1-BaseCaptured
12015: PPUSH
12016: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -2-BaseCaptured ) ;
12020: LD_EXP 9
12024: PPUSH
12025: LD_STRING D
12027: PUSH
12028: LD_STRING I
12030: PUSH
12031: LD_STRING J
12033: PUSH
12034: LD_STRING S
12036: PUSH
12037: EMPTY
12038: LIST
12039: LIST
12040: LIST
12041: PUSH
12042: LD_EXP 25
12046: ARRAY
12047: STR
12048: PUSH
12049: LD_STRING -2-BaseCaptured
12051: STR
12052: PPUSH
12053: CALL_OW 88
// SayRadio ( Powell , DP-2-BaseCaptured ) ;
12057: LD_EXP 12
12061: PPUSH
12062: LD_STRING DP-2-BaseCaptured
12064: PPUSH
12065: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -3-BaseCaptured ) ;
12069: LD_EXP 9
12073: PPUSH
12074: LD_STRING D
12076: PUSH
12077: LD_STRING I
12079: PUSH
12080: LD_STRING J
12082: PUSH
12083: LD_STRING S
12085: PUSH
12086: EMPTY
12087: LIST
12088: LIST
12089: LIST
12090: PUSH
12091: LD_EXP 25
12095: ARRAY
12096: STR
12097: PUSH
12098: LD_STRING -3-BaseCaptured
12100: STR
12101: PPUSH
12102: CALL_OW 88
// DialogueOff ;
12106: CALL_OW 7
// InGameOff ;
12110: CALL_OW 9
// ChangeMissionObjectives ( O2 ) ;
12114: LD_STRING O2
12116: PPUSH
12117: CALL_OW 337
// for i in UnitFilter ( ruOutpost , [ f_type , unit_building ] ) do
12121: LD_ADDR_VAR 0 1
12125: PUSH
12126: LD_EXP 14
12130: PPUSH
12131: LD_INT 21
12133: PUSH
12134: LD_INT 3
12136: PUSH
12137: EMPTY
12138: LIST
12139: LIST
12140: PPUSH
12141: CALL_OW 72
12145: PUSH
12146: FOR_IN
12147: IFFALSE 12163
// SetSide ( i , 1 ) ;
12149: LD_VAR 0 1
12153: PPUSH
12154: LD_INT 1
12156: PPUSH
12157: CALL_OW 235
12161: GO 12146
12163: POP
12164: POP
// baseCaptured := true ;
12165: LD_ADDR_EXP 17
12169: PUSH
12170: LD_INT 1
12172: ST_TO_ADDR
// wait ( 0 0$35 ) ;
12173: LD_INT 1225
12175: PPUSH
12176: CALL_OW 67
// PrepareReinforcements ;
12180: CALL 9323 0 0
// end ;
12184: PPOPN 1
12186: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 167 , 197 , 20 ] ] ) > 3 do
12187: LD_INT 22
12189: PUSH
12190: LD_INT 3
12192: PUSH
12193: EMPTY
12194: LIST
12195: LIST
12196: PUSH
12197: LD_INT 92
12199: PUSH
12200: LD_INT 167
12202: PUSH
12203: LD_INT 197
12205: PUSH
12206: LD_INT 20
12208: PUSH
12209: EMPTY
12210: LIST
12211: LIST
12212: LIST
12213: LIST
12214: PUSH
12215: EMPTY
12216: LIST
12217: LIST
12218: PPUSH
12219: CALL_OW 69
12223: PUSH
12224: LD_INT 3
12226: GREATER
12227: IFFALSE 12244
12229: GO 12231
12231: DISABLE
// begin SayRadio ( Powell , DP-RuAttack ) ;
12232: LD_EXP 12
12236: PPUSH
12237: LD_STRING DP-RuAttack
12239: PPUSH
12240: CALL_OW 94
// end ;
12244: END
// every 0 0$2 trigger GameType = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_see , 4 ] ] ) do
12245: LD_EXP 2
12249: PUSH
12250: LD_INT 1
12252: EQUAL
12253: PUSH
12254: LD_INT 22
12256: PUSH
12257: LD_INT 1
12259: PUSH
12260: EMPTY
12261: LIST
12262: LIST
12263: PUSH
12264: LD_INT 101
12266: PUSH
12267: LD_INT 4
12269: PUSH
12270: EMPTY
12271: LIST
12272: LIST
12273: PUSH
12274: EMPTY
12275: LIST
12276: LIST
12277: PPUSH
12278: CALL_OW 69
12282: AND
12283: IFFALSE 12677
12285: GO 12287
12287: DISABLE
// begin ChangeSideFog ( 4 , 1 ) ;
12288: LD_INT 4
12290: PPUSH
12291: LD_INT 1
12293: PPUSH
12294: CALL_OW 343
// DialogueOn ;
12298: CALL_OW 6
// CenterNowOnUnits ( allyCommander ) ;
12302: LD_EXP 11
12306: PPUSH
12307: CALL_OW 87
// SayRadio ( allyCommander , DM-1-Contact ) ;
12311: LD_EXP 11
12315: PPUSH
12316: LD_STRING DM-1-Contact
12318: PPUSH
12319: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Contact ) ;
12323: LD_EXP 9
12327: PPUSH
12328: LD_STRING D
12330: PUSH
12331: LD_STRING I
12333: PUSH
12334: LD_STRING J
12336: PUSH
12337: LD_STRING S
12339: PUSH
12340: EMPTY
12341: LIST
12342: LIST
12343: LIST
12344: PUSH
12345: LD_EXP 25
12349: ARRAY
12350: STR
12351: PUSH
12352: LD_STRING -1-Contact
12354: STR
12355: PPUSH
12356: CALL_OW 88
// if commander = 1 then
12360: LD_EXP 25
12364: PUSH
12365: LD_INT 1
12367: EQUAL
12368: IFFALSE 12454
// begin SayRadio ( allyCommander , DM-2-Contact ) ;
12370: LD_EXP 11
12374: PPUSH
12375: LD_STRING DM-2-Contact
12377: PPUSH
12378: CALL_OW 94
// Say ( playerCommander , DI-2-Contact ) ;
12382: LD_EXP 9
12386: PPUSH
12387: LD_STRING DI-2-Contact
12389: PPUSH
12390: CALL_OW 88
// SayRadio ( allyCommander , DM-3-Contact ) ;
12394: LD_EXP 11
12398: PPUSH
12399: LD_STRING DM-3-Contact
12401: PPUSH
12402: CALL_OW 94
// Say ( playerCommander , DI-3-Contact ) ;
12406: LD_EXP 9
12410: PPUSH
12411: LD_STRING DI-3-Contact
12413: PPUSH
12414: CALL_OW 88
// SayRadio ( allyCommander , DM-4-Contact ) ;
12418: LD_EXP 11
12422: PPUSH
12423: LD_STRING DM-4-Contact
12425: PPUSH
12426: CALL_OW 94
// Say ( playerCommander , DI-4-Contact ) ;
12430: LD_EXP 9
12434: PPUSH
12435: LD_STRING DI-4-Contact
12437: PPUSH
12438: CALL_OW 88
// SayRadio ( allyCommander , DM-5-Contact ) ;
12442: LD_EXP 11
12446: PPUSH
12447: LD_STRING DM-5-Contact
12449: PPUSH
12450: CALL_OW 94
// end ; if commander = 2 then
12454: LD_EXP 25
12458: PUSH
12459: LD_INT 2
12461: EQUAL
12462: IFFALSE 12548
// begin SayRadio ( allyCommander , DM-2c-Contact ) ;
12464: LD_EXP 11
12468: PPUSH
12469: LD_STRING DM-2c-Contact
12471: PPUSH
12472: CALL_OW 94
// Say ( playerCommander , DJ-2-Contact ) ;
12476: LD_EXP 9
12480: PPUSH
12481: LD_STRING DJ-2-Contact
12483: PPUSH
12484: CALL_OW 88
// SayRadio ( allyCommander , DM-3-Contact ) ;
12488: LD_EXP 11
12492: PPUSH
12493: LD_STRING DM-3-Contact
12495: PPUSH
12496: CALL_OW 94
// Say ( playerCommander , DJ-3-Contact ) ;
12500: LD_EXP 9
12504: PPUSH
12505: LD_STRING DJ-3-Contact
12507: PPUSH
12508: CALL_OW 88
// SayRadio ( allyCommander , DM-4-Contact ) ;
12512: LD_EXP 11
12516: PPUSH
12517: LD_STRING DM-4-Contact
12519: PPUSH
12520: CALL_OW 94
// Say ( playerCommander , DJ-4-Contact ) ;
12524: LD_EXP 9
12528: PPUSH
12529: LD_STRING DJ-4-Contact
12531: PPUSH
12532: CALL_OW 88
// SayRadio ( allyCommander , DM-5a-Contact ) ;
12536: LD_EXP 11
12540: PPUSH
12541: LD_STRING DM-5a-Contact
12543: PPUSH
12544: CALL_OW 94
// end ; if commander = 3 then
12548: LD_EXP 25
12552: PUSH
12553: LD_INT 3
12555: EQUAL
12556: IFFALSE 12666
// begin SayRadio ( allyCommander , DM-2a-Contact ) ;
12558: LD_EXP 11
12562: PPUSH
12563: LD_STRING DM-2a-Contact
12565: PPUSH
12566: CALL_OW 94
// Say ( playerCommander , DS-2a-Contact ) ;
12570: LD_EXP 9
12574: PPUSH
12575: LD_STRING DS-2a-Contact
12577: PPUSH
12578: CALL_OW 88
// SayRadio ( allyCommander , DM-2b-Contact ) ;
12582: LD_EXP 11
12586: PPUSH
12587: LD_STRING DM-2b-Contact
12589: PPUSH
12590: CALL_OW 94
// Say ( playerCommander , DS-2b-Contact ) ;
12594: LD_EXP 9
12598: PPUSH
12599: LD_STRING DS-2b-Contact
12601: PPUSH
12602: CALL_OW 88
// SayRadio ( allyCommander , DM-3-Contact ) ;
12606: LD_EXP 11
12610: PPUSH
12611: LD_STRING DM-3-Contact
12613: PPUSH
12614: CALL_OW 94
// Say ( playerCommander , DS-3-Contact ) ;
12618: LD_EXP 9
12622: PPUSH
12623: LD_STRING DS-3-Contact
12625: PPUSH
12626: CALL_OW 88
// SayRadio ( allyCommander , DM-4-Contact ) ;
12630: LD_EXP 11
12634: PPUSH
12635: LD_STRING DM-4-Contact
12637: PPUSH
12638: CALL_OW 94
// Say ( playerCommander , DS-4-Contact ) ;
12642: LD_EXP 9
12646: PPUSH
12647: LD_STRING DS-4-Contact
12649: PPUSH
12650: CALL_OW 88
// SayRadio ( allyCommander , DM-5-Contact ) ;
12654: LD_EXP 11
12658: PPUSH
12659: LD_STRING DM-5-Contact
12661: PPUSH
12662: CALL_OW 94
// end ; DialogueOff ;
12666: CALL_OW 7
// ChangeMissionObjectives ( O3 ) ;
12670: LD_STRING O3
12672: PPUSH
12673: CALL_OW 337
// end ;
12677: END
// every 0 0$10 trigger GameType = 1 and legDestCounter >= [ 15 , 20 , 25 ] [ Difficulty ] and FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_warehouse ] ] ) and FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] ] ) >= 5 do var time , sib , sources , i ;
12678: LD_EXP 2
12682: PUSH
12683: LD_INT 1
12685: EQUAL
12686: PUSH
12687: LD_EXP 18
12691: PUSH
12692: LD_INT 15
12694: PUSH
12695: LD_INT 20
12697: PUSH
12698: LD_INT 25
12700: PUSH
12701: EMPTY
12702: LIST
12703: LIST
12704: LIST
12705: PUSH
12706: LD_OWVAR 67
12710: ARRAY
12711: GREATEREQUAL
12712: AND
12713: PUSH
12714: LD_INT 22
12716: PUSH
12717: LD_INT 8
12719: PUSH
12720: EMPTY
12721: LIST
12722: LIST
12723: PUSH
12724: LD_INT 30
12726: PUSH
12727: LD_INT 1
12729: PUSH
12730: EMPTY
12731: LIST
12732: LIST
12733: PUSH
12734: EMPTY
12735: LIST
12736: LIST
12737: PPUSH
12738: CALL_OW 69
12742: AND
12743: PUSH
12744: LD_INT 22
12746: PUSH
12747: LD_INT 8
12749: PUSH
12750: EMPTY
12751: LIST
12752: LIST
12753: PUSH
12754: LD_INT 21
12756: PUSH
12757: LD_INT 3
12759: PUSH
12760: EMPTY
12761: LIST
12762: LIST
12763: PUSH
12764: EMPTY
12765: LIST
12766: LIST
12767: PPUSH
12768: CALL_OW 69
12772: PUSH
12773: LD_INT 5
12775: GREATEREQUAL
12776: AND
12777: IFFALSE 13300
12779: GO 12781
12781: DISABLE
12782: LD_INT 0
12784: PPUSH
12785: PPUSH
12786: PPUSH
12787: PPUSH
// begin DialogueOn ;
12788: CALL_OW 6
// SayRadio ( Farmer , DF-1-Leg ) ;
12792: LD_EXP 13
12796: PPUSH
12797: LD_STRING DF-1-Leg
12799: PPUSH
12800: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Leg ) ;
12804: LD_EXP 9
12808: PPUSH
12809: LD_STRING D
12811: PUSH
12812: LD_STRING I
12814: PUSH
12815: LD_STRING J
12817: PUSH
12818: LD_STRING S
12820: PUSH
12821: EMPTY
12822: LIST
12823: LIST
12824: LIST
12825: PUSH
12826: LD_EXP 25
12830: ARRAY
12831: STR
12832: PUSH
12833: LD_STRING -1-Leg
12835: STR
12836: PPUSH
12837: CALL_OW 88
// SayRadio ( Farmer , DF-2-Leg ) ;
12841: LD_EXP 13
12845: PPUSH
12846: LD_STRING DF-2-Leg
12848: PPUSH
12849: CALL_OW 94
// DialogueOff ;
12853: CALL_OW 7
// case Query ( QLegionOffer ) of 1 :
12857: LD_STRING QLegionOffer
12859: PPUSH
12860: CALL_OW 97
12864: PUSH
12865: LD_INT 1
12867: DOUBLE
12868: EQUAL
12869: IFTRUE 12873
12871: GO 12876
12873: POP
// ; 2 :
12874: GO 12890
12876: LD_INT 2
12878: DOUBLE
12879: EQUAL
12880: IFTRUE 12884
12882: GO 12889
12884: POP
// exit ; end ;
12885: GO 13300
12887: GO 12890
12889: POP
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -2-Leg ) ;
12890: LD_EXP 9
12894: PPUSH
12895: LD_STRING D
12897: PUSH
12898: LD_STRING I
12900: PUSH
12901: LD_STRING J
12903: PUSH
12904: LD_STRING S
12906: PUSH
12907: EMPTY
12908: LIST
12909: LIST
12910: LIST
12911: PUSH
12912: LD_EXP 25
12916: ARRAY
12917: STR
12918: PUSH
12919: LD_STRING -2-Leg
12921: STR
12922: PPUSH
12923: CALL_OW 88
// legOfferAccepted := true ;
12927: LD_ADDR_EXP 20
12931: PUSH
12932: LD_INT 1
12934: ST_TO_ADDR
// SetAreaMapShow ( legOfferArea , 1 ) ;
12935: LD_INT 21
12937: PPUSH
12938: LD_INT 1
12940: PPUSH
12941: CALL_OW 424
// CenterOnXY ( 190 , 227 ) ;
12945: LD_INT 190
12947: PPUSH
12948: LD_INT 227
12950: PPUSH
12951: CALL_OW 84
// time := [ 8 8$00 , 7 7$00 , 6 6$00 ] [ Difficulty ] ;
12955: LD_ADDR_VAR 0 1
12959: PUSH
12960: LD_INT 16800
12962: PUSH
12963: LD_INT 14700
12965: PUSH
12966: LD_INT 12600
12968: PUSH
12969: EMPTY
12970: LIST
12971: LIST
12972: LIST
12973: PUSH
12974: LD_OWVAR 67
12978: ARRAY
12979: ST_TO_ADDR
// sib := 100 ;
12980: LD_ADDR_VAR 0 2
12984: PUSH
12985: LD_INT 100
12987: ST_TO_ADDR
// disableGlobalTimer := true ;
12988: LD_ADDR_EXP 4
12992: PUSH
12993: LD_INT 1
12995: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12996: LD_INT 35
12998: PPUSH
12999: CALL_OW 67
// time := time - 0 0$1 ;
13003: LD_ADDR_VAR 0 1
13007: PUSH
13008: LD_VAR 0 1
13012: PUSH
13013: LD_INT 35
13015: MINUS
13016: ST_TO_ADDR
// sources := GetResourceArea ( legOfferArea , mat_siberit ) ;
13017: LD_ADDR_VAR 0 3
13021: PUSH
13022: LD_INT 21
13024: PPUSH
13025: LD_INT 3
13027: PPUSH
13028: CALL_OW 287
13032: ST_TO_ADDR
// display_strings := [ #SkrTime , tick , #Skr-LegOffer , sib , time ] ;
13033: LD_ADDR_OWVAR 47
13037: PUSH
13038: LD_STRING #SkrTime
13040: PUSH
13041: LD_OWVAR 1
13045: PUSH
13046: LD_STRING #Skr-LegOffer
13048: PUSH
13049: LD_VAR 0 2
13053: PUSH
13054: LD_VAR 0 1
13058: PUSH
13059: EMPTY
13060: LIST
13061: LIST
13062: LIST
13063: LIST
13064: LIST
13065: ST_TO_ADDR
// if sources then
13066: LD_VAR 0 3
13070: IFFALSE 13102
// begin sib := sib - sources * 10 ;
13072: LD_ADDR_VAR 0 2
13076: PUSH
13077: LD_VAR 0 2
13081: PUSH
13082: LD_VAR 0 3
13086: PUSH
13087: LD_INT 10
13089: MUL
13090: MINUS
13091: ST_TO_ADDR
// EraseResourceArea ( legOfferArea , mat_siberit ) ;
13092: LD_INT 21
13094: PPUSH
13095: LD_INT 3
13097: PPUSH
13098: CALL_OW 286
// end ; until time = 0 0$00 or sib <= 0 or not FilterAllUnits ( [ f_side , 8 ] ) ;
13102: LD_VAR 0 1
13106: PUSH
13107: LD_INT 0
13109: EQUAL
13110: PUSH
13111: LD_VAR 0 2
13115: PUSH
13116: LD_INT 0
13118: LESSEQUAL
13119: OR
13120: PUSH
13121: LD_INT 22
13123: PUSH
13124: LD_INT 8
13126: PUSH
13127: EMPTY
13128: LIST
13129: LIST
13130: PPUSH
13131: CALL_OW 69
13135: NOT
13136: OR
13137: IFFALSE 12996
// SetAreaMapShow ( legOfferArea , 0 ) ;
13139: LD_INT 21
13141: PPUSH
13142: LD_INT 0
13144: PPUSH
13145: CALL_OW 424
// disableGlobalTimer := false ;
13149: LD_ADDR_EXP 4
13153: PUSH
13154: LD_INT 0
13156: ST_TO_ADDR
// if sib <= 0 then
13157: LD_VAR 0 2
13161: PUSH
13162: LD_INT 0
13164: LESSEQUAL
13165: IFFALSE 13281
// begin legChangeSide := true ;
13167: LD_ADDR_EXP 21
13171: PUSH
13172: LD_INT 1
13174: ST_TO_ADDR
// SayRadio ( Farmer , DF-4y-Leg ) ;
13175: LD_EXP 13
13179: PPUSH
13180: LD_STRING DF-4y-Leg
13182: PPUSH
13183: CALL_OW 94
// ChangeMissionObjectives ( O3a ) ;
13187: LD_STRING O3a
13189: PPUSH
13190: CALL_OW 337
// ChangeSideFog ( 8 , 1 ) ;
13194: LD_INT 8
13196: PPUSH
13197: LD_INT 1
13199: PPUSH
13200: CALL_OW 343
// SetAttitude ( 8 , 1 , att_friend , true ) ;
13204: LD_INT 8
13206: PPUSH
13207: LD_INT 1
13209: PPUSH
13210: LD_INT 1
13212: PPUSH
13213: LD_INT 1
13215: PPUSH
13216: CALL_OW 80
// SetAttitude ( 8 , 4 , att_friend , true ) ;
13220: LD_INT 8
13222: PPUSH
13223: LD_INT 4
13225: PPUSH
13226: LD_INT 1
13228: PPUSH
13229: LD_INT 1
13231: PPUSH
13232: CALL_OW 80
// SetAttitude ( 8 , 6 , att_enemy , true ) ;
13236: LD_INT 8
13238: PPUSH
13239: LD_INT 6
13241: PPUSH
13242: LD_INT 2
13244: PPUSH
13245: LD_INT 1
13247: PPUSH
13248: CALL_OW 80
// SetAttitude ( 8 , 3 , att_enemy , true ) ;
13252: LD_INT 8
13254: PPUSH
13255: LD_INT 3
13257: PPUSH
13258: LD_INT 2
13260: PPUSH
13261: LD_INT 1
13263: PPUSH
13264: CALL_OW 80
// wait ( 0 0$30 ) ;
13268: LD_INT 1050
13270: PPUSH
13271: CALL_OW 67
// PrepareLegionReinforcements ;
13275: CALL 10023 0 0
// end else
13279: GO 13300
// begin ChangeMissionObjectives ( O3a ) ;
13281: LD_STRING O3a
13283: PPUSH
13284: CALL_OW 337
// SayRadio ( Farmer , DF-4n-Leg ) ;
13288: LD_EXP 13
13292: PPUSH
13293: LD_STRING DF-4n-Leg
13295: PPUSH
13296: CALL_OW 94
// end ; end ;
13300: PPOPN 4
13302: END
// every 0 0$1 trigger GameType = 1 and game and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) = 0 do
13303: LD_EXP 2
13307: PUSH
13308: LD_INT 1
13310: EQUAL
13311: PUSH
13312: LD_EXP 3
13316: AND
13317: PUSH
13318: LD_INT 22
13320: PUSH
13321: LD_INT 3
13323: PUSH
13324: EMPTY
13325: LIST
13326: LIST
13327: PUSH
13328: LD_INT 21
13330: PUSH
13331: LD_INT 1
13333: PUSH
13334: EMPTY
13335: LIST
13336: LIST
13337: PUSH
13338: EMPTY
13339: LIST
13340: LIST
13341: PPUSH
13342: CALL_OW 69
13346: PUSH
13347: LD_INT 0
13349: EQUAL
13350: AND
13351: PUSH
13352: LD_INT 22
13354: PUSH
13355: LD_INT 3
13357: PUSH
13358: EMPTY
13359: LIST
13360: LIST
13361: PUSH
13362: LD_INT 30
13364: PUSH
13365: LD_INT 1
13367: PUSH
13368: EMPTY
13369: LIST
13370: LIST
13371: PUSH
13372: EMPTY
13373: LIST
13374: LIST
13375: PPUSH
13376: CALL_OW 69
13380: PUSH
13381: LD_INT 0
13383: EQUAL
13384: AND
13385: IFFALSE 13629
13387: GO 13389
13389: DISABLE
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Win ) ;
13390: LD_EXP 9
13394: PPUSH
13395: LD_STRING D
13397: PUSH
13398: LD_STRING I
13400: PUSH
13401: LD_STRING J
13403: PUSH
13404: LD_STRING S
13406: PUSH
13407: EMPTY
13408: LIST
13409: LIST
13410: LIST
13411: PUSH
13412: LD_EXP 25
13416: ARRAY
13417: STR
13418: PUSH
13419: LD_STRING -1-Win
13421: STR
13422: PPUSH
13423: CALL_OW 88
// if tick >= [ 150 150$0 , 130 130$0 , 110 110$0 ] [ Difficulty ] then
13427: LD_OWVAR 1
13431: PUSH
13432: LD_INT 315000
13434: PUSH
13435: LD_INT 273000
13437: PUSH
13438: LD_INT 231000
13440: PUSH
13441: EMPTY
13442: LIST
13443: LIST
13444: LIST
13445: PUSH
13446: LD_OWVAR 67
13450: ARRAY
13451: GREATEREQUAL
13452: IFFALSE 13467
// AddMedal ( med1 , - 1 ) else
13454: LD_STRING med1
13456: PPUSH
13457: LD_INT 1
13459: NEG
13460: PPUSH
13461: CALL_OW 101
13465: GO 13477
// AddMedal ( med1 , 1 ) ;
13467: LD_STRING med1
13469: PPUSH
13470: LD_INT 1
13472: PPUSH
13473: CALL_OW 101
// if allyDestCounter >= [ 20 , 15 , 10 ] [ Difficulty ] then
13477: LD_EXP 22
13481: PUSH
13482: LD_INT 20
13484: PUSH
13485: LD_INT 15
13487: PUSH
13488: LD_INT 10
13490: PUSH
13491: EMPTY
13492: LIST
13493: LIST
13494: LIST
13495: PUSH
13496: LD_OWVAR 67
13500: ARRAY
13501: GREATEREQUAL
13502: IFFALSE 13517
// AddMedal ( med2 , - 1 ) else
13504: LD_STRING med2
13506: PPUSH
13507: LD_INT 1
13509: NEG
13510: PPUSH
13511: CALL_OW 101
13515: GO 13527
// AddMedal ( med2 , 1 ) ;
13517: LD_STRING med2
13519: PPUSH
13520: LD_INT 1
13522: PPUSH
13523: CALL_OW 101
// if legChangeSide and GetAttitude ( 8 , 1 ) = att_friend then
13527: LD_EXP 21
13531: PUSH
13532: LD_INT 8
13534: PPUSH
13535: LD_INT 1
13537: PPUSH
13538: CALL_OW 81
13542: PUSH
13543: LD_INT 1
13545: EQUAL
13546: AND
13547: IFFALSE 13561
// AddMedal ( med3 , 2 ) else
13549: LD_STRING med3
13551: PPUSH
13552: LD_INT 2
13554: PPUSH
13555: CALL_OW 101
13559: GO 13618
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) = 0 then
13561: LD_INT 22
13563: PUSH
13564: LD_INT 8
13566: PUSH
13567: EMPTY
13568: LIST
13569: LIST
13570: PUSH
13571: LD_INT 21
13573: PUSH
13574: LD_INT 1
13576: PUSH
13577: EMPTY
13578: LIST
13579: LIST
13580: PUSH
13581: EMPTY
13582: LIST
13583: LIST
13584: PPUSH
13585: CALL_OW 69
13589: PUSH
13590: LD_INT 0
13592: EQUAL
13593: IFFALSE 13607
// AddMedal ( med3 , 1 ) else
13595: LD_STRING med3
13597: PPUSH
13598: LD_INT 1
13600: PPUSH
13601: CALL_OW 101
13605: GO 13618
// AddMedal ( med3 , - 1 ) ;
13607: LD_STRING med3
13609: PPUSH
13610: LD_INT 1
13612: NEG
13613: PPUSH
13614: CALL_OW 101
// GiveMedals ( MAIN ) ;
13618: LD_STRING MAIN
13620: PPUSH
13621: CALL_OW 102
// YouWin ;
13625: CALL_OW 103
// end ;
13629: END
// every 10 trigger GameType = 1 and staticMines and FilterUnitsInArea ( minesArea , [ f_enemy , 8 ] ) do var i , j , tmp , x , y ;
13630: LD_EXP 2
13634: PUSH
13635: LD_INT 1
13637: EQUAL
13638: PUSH
13639: LD_EXP 16
13643: AND
13644: PUSH
13645: LD_INT 20
13647: PPUSH
13648: LD_INT 81
13650: PUSH
13651: LD_INT 8
13653: PUSH
13654: EMPTY
13655: LIST
13656: LIST
13657: PPUSH
13658: CALL_OW 70
13662: AND
13663: IFFALSE 13942
13665: GO 13667
13667: DISABLE
13668: LD_INT 0
13670: PPUSH
13671: PPUSH
13672: PPUSH
13673: PPUSH
13674: PPUSH
// begin enable ;
13675: ENABLE
// tmp := FilterUnitsInArea ( minesArea , [ f_enemy , 8 ] ) ;
13676: LD_ADDR_VAR 0 3
13680: PUSH
13681: LD_INT 20
13683: PPUSH
13684: LD_INT 81
13686: PUSH
13687: LD_INT 8
13689: PUSH
13690: EMPTY
13691: LIST
13692: LIST
13693: PPUSH
13694: CALL_OW 70
13698: ST_TO_ADDR
// if not tmp then
13699: LD_VAR 0 3
13703: NOT
13704: IFFALSE 13708
// exit ;
13706: GO 13942
// for i in tmp do
13708: LD_ADDR_VAR 0 1
13712: PUSH
13713: LD_VAR 0 3
13717: PUSH
13718: FOR_IN
13719: IFFALSE 13940
// begin x := GetX ( i ) ;
13721: LD_ADDR_VAR 0 4
13725: PUSH
13726: LD_VAR 0 1
13730: PPUSH
13731: CALL_OW 250
13735: ST_TO_ADDR
// y := GetY ( i ) ;
13736: LD_ADDR_VAR 0 5
13740: PUSH
13741: LD_VAR 0 1
13745: PPUSH
13746: CALL_OW 251
13750: ST_TO_ADDR
// if MineAtPos ( x , y ) then
13751: LD_VAR 0 4
13755: PPUSH
13756: LD_VAR 0 5
13760: PPUSH
13761: CALL_OW 458
13765: IFFALSE 13938
// begin LaunchMineAtPos ( x , y , 8 ) ;
13767: LD_VAR 0 4
13771: PPUSH
13772: LD_VAR 0 5
13776: PPUSH
13777: LD_INT 8
13779: PPUSH
13780: CALL_OW 456
// if not dialogueMineDetected then
13784: LD_EXP 28
13788: NOT
13789: IFFALSE 13850
// begin CenterNowOnXY ( x , y ) ;
13791: LD_VAR 0 4
13795: PPUSH
13796: LD_VAR 0 5
13800: PPUSH
13801: CALL_OW 86
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Mine ) ;
13805: LD_EXP 9
13809: PPUSH
13810: LD_STRING D
13812: PUSH
13813: LD_STRING I
13815: PUSH
13816: LD_STRING J
13818: PUSH
13819: LD_STRING S
13821: PUSH
13822: EMPTY
13823: LIST
13824: LIST
13825: LIST
13826: PUSH
13827: LD_EXP 25
13831: ARRAY
13832: STR
13833: PUSH
13834: LD_STRING -1-Mine
13836: STR
13837: PPUSH
13838: CALL_OW 88
// dialogueMineDetected := true ;
13842: LD_ADDR_EXP 28
13846: PUSH
13847: LD_INT 1
13849: ST_TO_ADDR
// end ; for j = 1 to staticMines do
13850: LD_ADDR_VAR 0 2
13854: PUSH
13855: DOUBLE
13856: LD_INT 1
13858: DEC
13859: ST_TO_ADDR
13860: LD_EXP 16
13864: PUSH
13865: FOR_TO
13866: IFFALSE 13936
// if staticMines [ j ] [ 1 ] = x and staticMines [ j ] [ 2 ] = y then
13868: LD_EXP 16
13872: PUSH
13873: LD_VAR 0 2
13877: ARRAY
13878: PUSH
13879: LD_INT 1
13881: ARRAY
13882: PUSH
13883: LD_VAR 0 4
13887: EQUAL
13888: PUSH
13889: LD_EXP 16
13893: PUSH
13894: LD_VAR 0 2
13898: ARRAY
13899: PUSH
13900: LD_INT 2
13902: ARRAY
13903: PUSH
13904: LD_VAR 0 5
13908: EQUAL
13909: AND
13910: IFFALSE 13934
// begin staticMines := Delete ( staticMines , j ) ;
13912: LD_ADDR_EXP 16
13916: PUSH
13917: LD_EXP 16
13921: PPUSH
13922: LD_VAR 0 2
13926: PPUSH
13927: CALL_OW 3
13931: ST_TO_ADDR
// break ;
13932: GO 13936
// end ;
13934: GO 13865
13936: POP
13937: POP
// end ; end ;
13938: GO 13718
13940: POP
13941: POP
// end ;
13942: PPOPN 5
13944: END
// every 1 1$00 trigger GameType = 1 and game and UnitFilter ( mc_bases [ mc_rus_1 ] , [ f_btype , b_factory ] ) do var i , base , tmp , _target , _targetAlt , attackers , e ;
13945: LD_EXP 2
13949: PUSH
13950: LD_INT 1
13952: EQUAL
13953: PUSH
13954: LD_EXP 3
13958: AND
13959: PUSH
13960: LD_EXP 36
13964: PUSH
13965: LD_EXP 7
13969: ARRAY
13970: PPUSH
13971: LD_INT 30
13973: PUSH
13974: LD_INT 3
13976: PUSH
13977: EMPTY
13978: LIST
13979: LIST
13980: PPUSH
13981: CALL_OW 72
13985: AND
13986: IFFALSE 14690
13988: GO 13990
13990: DISABLE
13991: LD_INT 0
13993: PPUSH
13994: PPUSH
13995: PPUSH
13996: PPUSH
13997: PPUSH
13998: PPUSH
13999: PPUSH
// begin repeat wait ( 9 9$00 ) ;
14000: LD_INT 18900
14002: PPUSH
14003: CALL_OW 67
// base := mc_rus_1 ;
14007: LD_ADDR_VAR 0 2
14011: PUSH
14012: LD_EXP 7
14016: ST_TO_ADDR
// if not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
14017: LD_EXP 36
14021: PUSH
14022: LD_VAR 0 2
14026: ARRAY
14027: PPUSH
14028: LD_INT 30
14030: PUSH
14031: LD_INT 3
14033: PUSH
14034: EMPTY
14035: LIST
14036: LIST
14037: PPUSH
14038: CALL_OW 72
14042: NOT
14043: IFFALSE 14047
// continue ;
14045: GO 14000
// tmp := [ [ ru_heavy_tracked , engine_combustion , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] ] ;
14047: LD_ADDR_VAR 0 3
14051: PUSH
14052: LD_INT 24
14054: PUSH
14055: LD_INT 1
14057: PUSH
14058: LD_INT 3
14060: PUSH
14061: LD_INT 47
14063: PUSH
14064: EMPTY
14065: LIST
14066: LIST
14067: LIST
14068: LIST
14069: PUSH
14070: LD_INT 24
14072: PUSH
14073: LD_INT 1
14075: PUSH
14076: LD_INT 3
14078: PUSH
14079: LD_INT 47
14081: PUSH
14082: EMPTY
14083: LIST
14084: LIST
14085: LIST
14086: LIST
14087: PUSH
14088: LD_INT 24
14090: PUSH
14091: LD_INT 1
14093: PUSH
14094: LD_INT 3
14096: PUSH
14097: LD_INT 47
14099: PUSH
14100: EMPTY
14101: LIST
14102: LIST
14103: LIST
14104: LIST
14105: PUSH
14106: LD_INT 24
14108: PUSH
14109: LD_INT 1
14111: PUSH
14112: LD_INT 3
14114: PUSH
14115: LD_INT 46
14117: PUSH
14118: EMPTY
14119: LIST
14120: LIST
14121: LIST
14122: LIST
14123: PUSH
14124: EMPTY
14125: LIST
14126: LIST
14127: LIST
14128: LIST
14129: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
14130: LD_VAR 0 2
14134: PPUSH
14135: LD_VAR 0 3
14139: PPUSH
14140: CALL 85698 0 2
// repeat wait ( 0 0$1 ) ;
14144: LD_INT 35
14146: PPUSH
14147: CALL_OW 67
// until MC_GetProduceList ( base ) < 2 ;
14151: LD_VAR 0 2
14155: PPUSH
14156: CALL 86046 0 1
14160: PUSH
14161: LD_INT 2
14163: LESS
14164: IFFALSE 14144
// wait ( 0 0$30 ) ;
14166: LD_INT 1050
14168: PPUSH
14169: CALL_OW 67
// if legChangeSide and FilterAllUnits ( [ f_side , 8 ] ) then
14173: LD_EXP 21
14177: PUSH
14178: LD_INT 22
14180: PUSH
14181: LD_INT 8
14183: PUSH
14184: EMPTY
14185: LIST
14186: LIST
14187: PPUSH
14188: CALL_OW 69
14192: AND
14193: IFFALSE 14224
// _targetAlt := [ [ 107 , 58 ] , [ 128 , 79 ] ] ;
14195: LD_ADDR_VAR 0 5
14199: PUSH
14200: LD_INT 107
14202: PUSH
14203: LD_INT 58
14205: PUSH
14206: EMPTY
14207: LIST
14208: LIST
14209: PUSH
14210: LD_INT 128
14212: PUSH
14213: LD_INT 79
14215: PUSH
14216: EMPTY
14217: LIST
14218: LIST
14219: PUSH
14220: EMPTY
14221: LIST
14222: LIST
14223: ST_TO_ADDR
// _target := [ [ 99 , 35 ] , [ 111 , 29 ] , [ 122 , 22 ] ] ;
14224: LD_ADDR_VAR 0 4
14228: PUSH
14229: LD_INT 99
14231: PUSH
14232: LD_INT 35
14234: PUSH
14235: EMPTY
14236: LIST
14237: LIST
14238: PUSH
14239: LD_INT 111
14241: PUSH
14242: LD_INT 29
14244: PUSH
14245: EMPTY
14246: LIST
14247: LIST
14248: PUSH
14249: LD_INT 122
14251: PUSH
14252: LD_INT 22
14254: PUSH
14255: EMPTY
14256: LIST
14257: LIST
14258: PUSH
14259: EMPTY
14260: LIST
14261: LIST
14262: LIST
14263: ST_TO_ADDR
// if _targetAlt then
14264: LD_VAR 0 5
14268: IFFALSE 14301
// _target := [ _target , _targetAlt ] [ rand ( 1 , 2 ) ] ;
14270: LD_ADDR_VAR 0 4
14274: PUSH
14275: LD_VAR 0 4
14279: PUSH
14280: LD_VAR 0 5
14284: PUSH
14285: EMPTY
14286: LIST
14287: LIST
14288: PUSH
14289: LD_INT 1
14291: PPUSH
14292: LD_INT 2
14294: PPUSH
14295: CALL_OW 12
14299: ARRAY
14300: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] union UnitFilter ( mc_vehicles [ base ] , [ f_or , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_crane ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_siberium_rocket ] ] ) ) ;
14301: LD_ADDR_VAR 0 6
14305: PUSH
14306: LD_EXP 55
14310: PUSH
14311: LD_VAR 0 2
14315: ARRAY
14316: PUSH
14317: LD_EXP 58
14321: PUSH
14322: LD_VAR 0 2
14326: ARRAY
14327: PUSH
14328: LD_EXP 55
14332: PUSH
14333: LD_VAR 0 2
14337: ARRAY
14338: PPUSH
14339: LD_INT 2
14341: PUSH
14342: LD_INT 34
14344: PUSH
14345: LD_INT 51
14347: PUSH
14348: EMPTY
14349: LIST
14350: LIST
14351: PUSH
14352: LD_INT 34
14354: PUSH
14355: LD_INT 52
14357: PUSH
14358: EMPTY
14359: LIST
14360: LIST
14361: PUSH
14362: LD_INT 34
14364: PUSH
14365: LD_INT 53
14367: PUSH
14368: EMPTY
14369: LIST
14370: LIST
14371: PUSH
14372: LD_INT 34
14374: PUSH
14375: LD_INT 48
14377: PUSH
14378: EMPTY
14379: LIST
14380: LIST
14381: PUSH
14382: EMPTY
14383: LIST
14384: LIST
14385: LIST
14386: LIST
14387: LIST
14388: PPUSH
14389: CALL_OW 72
14393: UNION
14394: DIFF
14395: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff attackers ) ;
14396: LD_ADDR_EXP 55
14400: PUSH
14401: LD_EXP 55
14405: PPUSH
14406: LD_VAR 0 2
14410: PPUSH
14411: LD_EXP 55
14415: PUSH
14416: LD_VAR 0 2
14420: ARRAY
14421: PUSH
14422: LD_VAR 0 6
14426: DIFF
14427: PPUSH
14428: CALL_OW 1
14432: ST_TO_ADDR
// if not attackers then
14433: LD_VAR 0 6
14437: NOT
14438: IFFALSE 14442
// continue ;
14440: GO 14000
// ComAgressiveMove ( attackers , 84 , 36 ) ;
14442: LD_VAR 0 6
14446: PPUSH
14447: LD_INT 84
14449: PPUSH
14450: LD_INT 36
14452: PPUSH
14453: CALL_OW 114
// for i = 1 to _target do
14457: LD_ADDR_VAR 0 1
14461: PUSH
14462: DOUBLE
14463: LD_INT 1
14465: DEC
14466: ST_TO_ADDR
14467: LD_VAR 0 4
14471: PUSH
14472: FOR_TO
14473: IFFALSE 14516
// AddComAgressiveMove ( attackers , _target [ i ] [ 1 ] , _target [ i ] [ 2 ] ) ;
14475: LD_VAR 0 6
14479: PPUSH
14480: LD_VAR 0 4
14484: PUSH
14485: LD_VAR 0 1
14489: ARRAY
14490: PUSH
14491: LD_INT 1
14493: ARRAY
14494: PPUSH
14495: LD_VAR 0 4
14499: PUSH
14500: LD_VAR 0 1
14504: ARRAY
14505: PUSH
14506: LD_INT 2
14508: ARRAY
14509: PPUSH
14510: CALL_OW 174
14514: GO 14472
14516: POP
14517: POP
// repeat wait ( 0 0$1 ) ;
14518: LD_INT 35
14520: PPUSH
14521: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
14525: LD_VAR 0 6
14529: PPUSH
14530: LD_INT 60
14532: PUSH
14533: EMPTY
14534: LIST
14535: PPUSH
14536: CALL_OW 72
14540: NOT
14541: IFFALSE 14518
// repeat wait ( 0 0$1 ) ;
14543: LD_INT 35
14545: PPUSH
14546: CALL_OW 67
// for i in attackers do
14550: LD_ADDR_VAR 0 1
14554: PUSH
14555: LD_VAR 0 6
14559: PUSH
14560: FOR_IN
14561: IFFALSE 14657
// begin if IsDead ( i ) then
14563: LD_VAR 0 1
14567: PPUSH
14568: CALL_OW 301
14572: IFFALSE 14592
// begin attackers := attackers diff i ;
14574: LD_ADDR_VAR 0 6
14578: PUSH
14579: LD_VAR 0 6
14583: PUSH
14584: LD_VAR 0 1
14588: DIFF
14589: ST_TO_ADDR
// continue ;
14590: GO 14560
// end ; if HasTask ( i ) then
14592: LD_VAR 0 1
14596: PPUSH
14597: CALL_OW 314
14601: IFFALSE 14605
// continue ;
14603: GO 14560
// e := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ;
14605: LD_ADDR_VAR 0 7
14609: PUSH
14610: LD_INT 81
14612: PUSH
14613: LD_INT 3
14615: PUSH
14616: EMPTY
14617: LIST
14618: LIST
14619: PPUSH
14620: CALL_OW 69
14624: PPUSH
14625: LD_VAR 0 1
14629: PPUSH
14630: CALL_OW 74
14634: ST_TO_ADDR
// if e then
14635: LD_VAR 0 7
14639: IFFALSE 14655
// ComAttackUnit ( i , e ) ;
14641: LD_VAR 0 1
14645: PPUSH
14646: LD_VAR 0 7
14650: PPUSH
14651: CALL_OW 115
// end ;
14655: GO 14560
14657: POP
14658: POP
// until not attackers ;
14659: LD_VAR 0 6
14663: NOT
14664: IFFALSE 14543
// until not UnitFilter ( mc_bases [ base ] , [ f_ok ] ) ;
14666: LD_EXP 36
14670: PUSH
14671: LD_VAR 0 2
14675: ARRAY
14676: PPUSH
14677: LD_INT 50
14679: PUSH
14680: EMPTY
14681: LIST
14682: PPUSH
14683: CALL_OW 72
14687: NOT
14688: IFFALSE 14000
// end ;
14690: PPOPN 7
14692: END
// every 1 1$00 trigger GameType = 1 and game and UnitFilter ( mc_bases [ mc_rus_2 ] , [ f_btype , b_factory ] ) do var i , base , tmp , _target , attackers , teleport , e ;
14693: LD_EXP 2
14697: PUSH
14698: LD_INT 1
14700: EQUAL
14701: PUSH
14702: LD_EXP 3
14706: AND
14707: PUSH
14708: LD_EXP 36
14712: PUSH
14713: LD_EXP 8
14717: ARRAY
14718: PPUSH
14719: LD_INT 30
14721: PUSH
14722: LD_INT 3
14724: PUSH
14725: EMPTY
14726: LIST
14727: LIST
14728: PPUSH
14729: CALL_OW 72
14733: AND
14734: IFFALSE 15475
14736: GO 14738
14738: DISABLE
14739: LD_INT 0
14741: PPUSH
14742: PPUSH
14743: PPUSH
14744: PPUSH
14745: PPUSH
14746: PPUSH
14747: PPUSH
// begin repeat wait ( 9 9$00 ) ;
14748: LD_INT 18900
14750: PPUSH
14751: CALL_OW 67
// base := mc_rus_2 ;
14755: LD_ADDR_VAR 0 2
14759: PUSH
14760: LD_EXP 8
14764: ST_TO_ADDR
// if not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
14765: LD_EXP 36
14769: PUSH
14770: LD_VAR 0 2
14774: ARRAY
14775: PPUSH
14776: LD_INT 30
14778: PUSH
14779: LD_INT 3
14781: PUSH
14782: EMPTY
14783: LIST
14784: LIST
14785: PPUSH
14786: CALL_OW 72
14790: NOT
14791: IFFALSE 14795
// continue ;
14793: GO 14748
// tmp := [ [ ru_heavy_wheeled , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_wheeled , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_wheeled , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_wheeled , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_wheeled , engine_combustion , control_computer , ru_time_lapser ] ] ;
14795: LD_ADDR_VAR 0 3
14799: PUSH
14800: LD_INT 23
14802: PUSH
14803: LD_INT 3
14805: PUSH
14806: LD_INT 3
14808: PUSH
14809: LD_INT 47
14811: PUSH
14812: EMPTY
14813: LIST
14814: LIST
14815: LIST
14816: LIST
14817: PUSH
14818: LD_INT 23
14820: PUSH
14821: LD_INT 3
14823: PUSH
14824: LD_INT 3
14826: PUSH
14827: LD_INT 47
14829: PUSH
14830: EMPTY
14831: LIST
14832: LIST
14833: LIST
14834: LIST
14835: PUSH
14836: LD_INT 23
14838: PUSH
14839: LD_INT 3
14841: PUSH
14842: LD_INT 3
14844: PUSH
14845: LD_INT 46
14847: PUSH
14848: EMPTY
14849: LIST
14850: LIST
14851: LIST
14852: LIST
14853: PUSH
14854: LD_INT 23
14856: PUSH
14857: LD_INT 1
14859: PUSH
14860: LD_INT 3
14862: PUSH
14863: LD_INT 46
14865: PUSH
14866: EMPTY
14867: LIST
14868: LIST
14869: LIST
14870: LIST
14871: PUSH
14872: LD_INT 21
14874: PUSH
14875: LD_INT 1
14877: PUSH
14878: LD_INT 3
14880: PUSH
14881: LD_INT 49
14883: PUSH
14884: EMPTY
14885: LIST
14886: LIST
14887: LIST
14888: LIST
14889: PUSH
14890: EMPTY
14891: LIST
14892: LIST
14893: LIST
14894: LIST
14895: LIST
14896: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
14897: LD_VAR 0 2
14901: PPUSH
14902: LD_VAR 0 3
14906: PPUSH
14907: CALL 85698 0 2
// repeat wait ( 0 0$1 ) ;
14911: LD_INT 35
14913: PPUSH
14914: CALL_OW 67
// until MC_GetProduceList ( base ) = 0 ;
14918: LD_VAR 0 2
14922: PPUSH
14923: CALL 86046 0 1
14927: PUSH
14928: LD_INT 0
14930: EQUAL
14931: IFFALSE 14911
// wait ( 0 0$30 ) ;
14933: LD_INT 1050
14935: PPUSH
14936: CALL_OW 67
// _target := [ [ 164 , 198 ] , [ 176 , 180 ] ] ;
14940: LD_ADDR_VAR 0 4
14944: PUSH
14945: LD_INT 164
14947: PUSH
14948: LD_INT 198
14950: PUSH
14951: EMPTY
14952: LIST
14953: LIST
14954: PUSH
14955: LD_INT 176
14957: PUSH
14958: LD_INT 180
14960: PUSH
14961: EMPTY
14962: LIST
14963: LIST
14964: PUSH
14965: EMPTY
14966: LIST
14967: LIST
14968: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] union UnitFilter ( mc_vehicles [ base ] , [ f_or , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_crane ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_siberium_rocket ] ] ) ) ;
14969: LD_ADDR_VAR 0 5
14973: PUSH
14974: LD_EXP 55
14978: PUSH
14979: LD_VAR 0 2
14983: ARRAY
14984: PUSH
14985: LD_EXP 58
14989: PUSH
14990: LD_VAR 0 2
14994: ARRAY
14995: PUSH
14996: LD_EXP 55
15000: PUSH
15001: LD_VAR 0 2
15005: ARRAY
15006: PPUSH
15007: LD_INT 2
15009: PUSH
15010: LD_INT 34
15012: PUSH
15013: LD_INT 51
15015: PUSH
15016: EMPTY
15017: LIST
15018: LIST
15019: PUSH
15020: LD_INT 34
15022: PUSH
15023: LD_INT 52
15025: PUSH
15026: EMPTY
15027: LIST
15028: LIST
15029: PUSH
15030: LD_INT 34
15032: PUSH
15033: LD_INT 53
15035: PUSH
15036: EMPTY
15037: LIST
15038: LIST
15039: PUSH
15040: LD_INT 34
15042: PUSH
15043: LD_INT 48
15045: PUSH
15046: EMPTY
15047: LIST
15048: LIST
15049: PUSH
15050: EMPTY
15051: LIST
15052: LIST
15053: LIST
15054: LIST
15055: LIST
15056: PPUSH
15057: CALL_OW 72
15061: UNION
15062: DIFF
15063: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff attackers ) ;
15064: LD_ADDR_EXP 55
15068: PUSH
15069: LD_EXP 55
15073: PPUSH
15074: LD_VAR 0 2
15078: PPUSH
15079: LD_EXP 55
15083: PUSH
15084: LD_VAR 0 2
15088: ARRAY
15089: PUSH
15090: LD_VAR 0 5
15094: DIFF
15095: PPUSH
15096: CALL_OW 1
15100: ST_TO_ADDR
// if not attackers then
15101: LD_VAR 0 5
15105: NOT
15106: IFFALSE 15110
// continue ;
15108: GO 14748
// teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) ;
15110: LD_ADDR_VAR 0 6
15114: PUSH
15115: LD_INT 22
15117: PUSH
15118: LD_INT 3
15120: PUSH
15121: EMPTY
15122: LIST
15123: LIST
15124: PUSH
15125: LD_INT 30
15127: PUSH
15128: LD_INT 34
15130: PUSH
15131: EMPTY
15132: LIST
15133: LIST
15134: PUSH
15135: EMPTY
15136: LIST
15137: LIST
15138: PPUSH
15139: CALL_OW 69
15143: ST_TO_ADDR
// for i in attackers do
15144: LD_ADDR_VAR 0 1
15148: PUSH
15149: LD_VAR 0 5
15153: PUSH
15154: FOR_IN
15155: IFFALSE 15215
// begin if teleport then
15157: LD_VAR 0 6
15161: IFFALSE 15198
// begin ComEnterUnit ( i , teleport [ 1 ] ) ;
15163: LD_VAR 0 1
15167: PPUSH
15168: LD_VAR 0 6
15172: PUSH
15173: LD_INT 1
15175: ARRAY
15176: PPUSH
15177: CALL_OW 120
// AddComAgressiveMove ( i , 129 , 215 ) ;
15181: LD_VAR 0 1
15185: PPUSH
15186: LD_INT 129
15188: PPUSH
15189: LD_INT 215
15191: PPUSH
15192: CALL_OW 174
// end else
15196: GO 15213
// AddComAgressiveMove ( i , 125 , 157 ) ;
15198: LD_VAR 0 1
15202: PPUSH
15203: LD_INT 125
15205: PPUSH
15206: LD_INT 157
15208: PPUSH
15209: CALL_OW 174
// end ;
15213: GO 15154
15215: POP
15216: POP
// repeat wait ( 0 0$1 ) ;
15217: LD_INT 35
15219: PPUSH
15220: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
15224: LD_VAR 0 5
15228: PPUSH
15229: LD_INT 60
15231: PUSH
15232: EMPTY
15233: LIST
15234: PPUSH
15235: CALL_OW 72
15239: NOT
15240: IFFALSE 15217
// for i = 1 to _target do
15242: LD_ADDR_VAR 0 1
15246: PUSH
15247: DOUBLE
15248: LD_INT 1
15250: DEC
15251: ST_TO_ADDR
15252: LD_VAR 0 4
15256: PUSH
15257: FOR_TO
15258: IFFALSE 15301
// AddComAgressiveMove ( attackers , _target [ i ] [ 1 ] , _target [ i ] [ 2 ] ) ;
15260: LD_VAR 0 5
15264: PPUSH
15265: LD_VAR 0 4
15269: PUSH
15270: LD_VAR 0 1
15274: ARRAY
15275: PUSH
15276: LD_INT 1
15278: ARRAY
15279: PPUSH
15280: LD_VAR 0 4
15284: PUSH
15285: LD_VAR 0 1
15289: ARRAY
15290: PUSH
15291: LD_INT 2
15293: ARRAY
15294: PPUSH
15295: CALL_OW 174
15299: GO 15257
15301: POP
15302: POP
// repeat wait ( 0 0$1 ) ;
15303: LD_INT 35
15305: PPUSH
15306: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
15310: LD_VAR 0 5
15314: PPUSH
15315: LD_INT 60
15317: PUSH
15318: EMPTY
15319: LIST
15320: PPUSH
15321: CALL_OW 72
15325: NOT
15326: IFFALSE 15303
// repeat wait ( 0 0$1 ) ;
15328: LD_INT 35
15330: PPUSH
15331: CALL_OW 67
// for i in attackers do
15335: LD_ADDR_VAR 0 1
15339: PUSH
15340: LD_VAR 0 5
15344: PUSH
15345: FOR_IN
15346: IFFALSE 15442
// begin if IsDead ( i ) then
15348: LD_VAR 0 1
15352: PPUSH
15353: CALL_OW 301
15357: IFFALSE 15377
// begin attackers := attackers diff i ;
15359: LD_ADDR_VAR 0 5
15363: PUSH
15364: LD_VAR 0 5
15368: PUSH
15369: LD_VAR 0 1
15373: DIFF
15374: ST_TO_ADDR
// continue ;
15375: GO 15345
// end ; if HasTask ( i ) then
15377: LD_VAR 0 1
15381: PPUSH
15382: CALL_OW 314
15386: IFFALSE 15390
// continue ;
15388: GO 15345
// e := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ;
15390: LD_ADDR_VAR 0 7
15394: PUSH
15395: LD_INT 81
15397: PUSH
15398: LD_INT 3
15400: PUSH
15401: EMPTY
15402: LIST
15403: LIST
15404: PPUSH
15405: CALL_OW 69
15409: PPUSH
15410: LD_VAR 0 1
15414: PPUSH
15415: CALL_OW 74
15419: ST_TO_ADDR
// if e then
15420: LD_VAR 0 7
15424: IFFALSE 15440
// ComAttackUnit ( i , e ) ;
15426: LD_VAR 0 1
15430: PPUSH
15431: LD_VAR 0 7
15435: PPUSH
15436: CALL_OW 115
// end ;
15440: GO 15345
15442: POP
15443: POP
// until not attackers ;
15444: LD_VAR 0 5
15448: NOT
15449: IFFALSE 15328
// until not UnitFilter ( mc_bases [ base ] , [ f_ok ] ) ;
15451: LD_EXP 36
15455: PUSH
15456: LD_VAR 0 2
15460: ARRAY
15461: PPUSH
15462: LD_INT 50
15464: PUSH
15465: EMPTY
15466: LIST
15467: PPUSH
15468: CALL_OW 72
15472: NOT
15473: IFFALSE 14748
// end ;
15475: PPOPN 7
15477: END
// every 1 1$00 trigger GameType = 1 and game and not legChangeSide and FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) and UnitFilter ( mc_bases [ mc_leg ] , [ f_btype , b_factory ] ) do var i , base , tmp , flags , _target , attackers ;
15478: LD_EXP 2
15482: PUSH
15483: LD_INT 1
15485: EQUAL
15486: PUSH
15487: LD_EXP 3
15491: AND
15492: PUSH
15493: LD_EXP 21
15497: NOT
15498: AND
15499: PUSH
15500: LD_INT 22
15502: PUSH
15503: LD_INT 8
15505: PUSH
15506: EMPTY
15507: LIST
15508: LIST
15509: PUSH
15510: LD_INT 34
15512: PUSH
15513: LD_INT 31
15515: PUSH
15516: EMPTY
15517: LIST
15518: LIST
15519: PUSH
15520: EMPTY
15521: LIST
15522: LIST
15523: PPUSH
15524: CALL_OW 69
15528: AND
15529: PUSH
15530: LD_EXP 36
15534: PUSH
15535: LD_EXP 6
15539: ARRAY
15540: PPUSH
15541: LD_INT 30
15543: PUSH
15544: LD_INT 3
15546: PUSH
15547: EMPTY
15548: LIST
15549: LIST
15550: PPUSH
15551: CALL_OW 72
15555: AND
15556: IFFALSE 16054
15558: GO 15560
15560: DISABLE
15561: LD_INT 0
15563: PPUSH
15564: PPUSH
15565: PPUSH
15566: PPUSH
15567: PPUSH
15568: PPUSH
// begin repeat wait ( [ 10 10$00 , 9 9$30 , 9 9$00 ] [ Difficulty ] ) ;
15569: LD_INT 21000
15571: PUSH
15572: LD_INT 19950
15574: PUSH
15575: LD_INT 18900
15577: PUSH
15578: EMPTY
15579: LIST
15580: LIST
15581: LIST
15582: PUSH
15583: LD_OWVAR 67
15587: ARRAY
15588: PPUSH
15589: CALL_OW 67
// base := mc_leg ;
15593: LD_ADDR_VAR 0 2
15597: PUSH
15598: LD_EXP 6
15602: ST_TO_ADDR
// if not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
15603: LD_EXP 36
15607: PUSH
15608: LD_VAR 0 2
15612: ARRAY
15613: PPUSH
15614: LD_INT 30
15616: PUSH
15617: LD_INT 3
15619: PUSH
15620: EMPTY
15621: LIST
15622: LIST
15623: PPUSH
15624: CALL_OW 72
15628: NOT
15629: IFFALSE 15633
// continue ;
15631: GO 15569
// if legChangeSide then
15633: LD_EXP 21
15637: IFFALSE 15641
// exit ;
15639: GO 16054
// tmp := [ [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] ] ;
15641: LD_ADDR_VAR 0 3
15645: PUSH
15646: LD_INT 11
15648: PUSH
15649: LD_INT 1
15651: PUSH
15652: LD_INT 2
15654: PUSH
15655: LD_INT 24
15657: PUSH
15658: EMPTY
15659: LIST
15660: LIST
15661: LIST
15662: LIST
15663: PUSH
15664: LD_INT 11
15666: PUSH
15667: LD_INT 1
15669: PUSH
15670: LD_INT 2
15672: PUSH
15673: LD_INT 24
15675: PUSH
15676: EMPTY
15677: LIST
15678: LIST
15679: LIST
15680: LIST
15681: PUSH
15682: LD_INT 11
15684: PUSH
15685: LD_INT 1
15687: PUSH
15688: LD_INT 2
15690: PUSH
15691: LD_INT 24
15693: PUSH
15694: EMPTY
15695: LIST
15696: LIST
15697: LIST
15698: LIST
15699: PUSH
15700: LD_INT 11
15702: PUSH
15703: LD_INT 1
15705: PUSH
15706: LD_INT 2
15708: PUSH
15709: LD_INT 24
15711: PUSH
15712: EMPTY
15713: LIST
15714: LIST
15715: LIST
15716: LIST
15717: PUSH
15718: LD_INT 11
15720: PUSH
15721: LD_INT 1
15723: PUSH
15724: LD_INT 2
15726: PUSH
15727: LD_INT 24
15729: PUSH
15730: EMPTY
15731: LIST
15732: LIST
15733: LIST
15734: LIST
15735: PUSH
15736: EMPTY
15737: LIST
15738: LIST
15739: LIST
15740: LIST
15741: LIST
15742: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
15743: LD_VAR 0 2
15747: PPUSH
15748: LD_VAR 0 3
15752: PPUSH
15753: CALL 85698 0 2
// repeat wait ( 0 0$1 ) ;
15757: LD_INT 35
15759: PPUSH
15760: CALL_OW 67
// until MC_GetProduceList ( base ) = 0 ;
15764: LD_VAR 0 2
15768: PPUSH
15769: CALL 86046 0 1
15773: PUSH
15774: LD_INT 0
15776: EQUAL
15777: IFFALSE 15757
// wait ( 0 0$30 ) ;
15779: LD_INT 1050
15781: PPUSH
15782: CALL_OW 67
// _target := [ [ 113 , 63 ] , [ 119 , 15 ] ] ;
15786: LD_ADDR_VAR 0 5
15790: PUSH
15791: LD_INT 113
15793: PUSH
15794: LD_INT 63
15796: PUSH
15797: EMPTY
15798: LIST
15799: LIST
15800: PUSH
15801: LD_INT 119
15803: PUSH
15804: LD_INT 15
15806: PUSH
15807: EMPTY
15808: LIST
15809: LIST
15810: PUSH
15811: EMPTY
15812: LIST
15813: LIST
15814: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 ] ;
15815: LD_ADDR_VAR 0 4
15819: PUSH
15820: LD_INT 0
15822: PUSH
15823: LD_INT 0
15825: PUSH
15826: LD_INT 0
15828: PUSH
15829: LD_INT 0
15831: PUSH
15832: LD_INT 0
15834: PUSH
15835: LD_INT 0
15837: PUSH
15838: LD_INT 0
15840: PUSH
15841: LD_INT 0
15843: PUSH
15844: LD_INT 1
15846: PUSH
15847: LD_INT 0
15849: PUSH
15850: EMPTY
15851: LIST
15852: LIST
15853: LIST
15854: LIST
15855: LIST
15856: LIST
15857: LIST
15858: LIST
15859: LIST
15860: LIST
15861: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] union UnitFilter ( mc_vehicles [ base ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ar_control_tower ] ] ) ) ;
15862: LD_ADDR_VAR 0 6
15866: PUSH
15867: LD_EXP 55
15871: PUSH
15872: LD_VAR 0 2
15876: ARRAY
15877: PUSH
15878: LD_EXP 58
15882: PUSH
15883: LD_VAR 0 2
15887: ARRAY
15888: PUSH
15889: LD_EXP 55
15893: PUSH
15894: LD_VAR 0 2
15898: ARRAY
15899: PPUSH
15900: LD_INT 2
15902: PUSH
15903: LD_INT 34
15905: PUSH
15906: LD_INT 32
15908: PUSH
15909: EMPTY
15910: LIST
15911: LIST
15912: PUSH
15913: LD_INT 34
15915: PUSH
15916: LD_INT 31
15918: PUSH
15919: EMPTY
15920: LIST
15921: LIST
15922: PUSH
15923: EMPTY
15924: LIST
15925: LIST
15926: LIST
15927: PPUSH
15928: CALL_OW 72
15932: UNION
15933: DIFF
15934: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff attackers ) ;
15935: LD_ADDR_EXP 55
15939: PUSH
15940: LD_EXP 55
15944: PPUSH
15945: LD_VAR 0 2
15949: PPUSH
15950: LD_EXP 55
15954: PUSH
15955: LD_VAR 0 2
15959: ARRAY
15960: PUSH
15961: LD_VAR 0 6
15965: DIFF
15966: PPUSH
15967: CALL_OW 1
15971: ST_TO_ADDR
// if not attackers then
15972: LD_VAR 0 6
15976: NOT
15977: IFFALSE 15981
// continue ;
15979: GO 15569
// repeat wait ( 0 0$1 ) ;
15981: LD_INT 35
15983: PPUSH
15984: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
15988: LD_VAR 0 6
15992: PPUSH
15993: LD_INT 60
15995: PUSH
15996: EMPTY
15997: LIST
15998: PPUSH
15999: CALL_OW 72
16003: NOT
16004: IFFALSE 15981
// MC_PrepareAttack ( base , attackers , _target , flags ) ;
16006: LD_VAR 0 2
16010: PPUSH
16011: LD_VAR 0 6
16015: PPUSH
16016: LD_VAR 0 5
16020: PPUSH
16021: LD_VAR 0 4
16025: PPUSH
16026: CALL 85883 0 4
// until not UnitFilter ( mc_bases [ base ] , [ f_ok ] ) ;
16030: LD_EXP 36
16034: PUSH
16035: LD_VAR 0 2
16039: ARRAY
16040: PPUSH
16041: LD_INT 50
16043: PUSH
16044: EMPTY
16045: LIST
16046: PPUSH
16047: CALL_OW 72
16051: NOT
16052: IFFALSE 15569
// end ;
16054: PPOPN 6
16056: END
// every 1 1$00 trigger GameType = 1 and game and FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) and UnitFilter ( mc_bases [ mc_leg ] , [ f_btype , b_factory ] ) do var i , base , flags , tmp , _target , attackers ;
16057: LD_EXP 2
16061: PUSH
16062: LD_INT 1
16064: EQUAL
16065: PUSH
16066: LD_EXP 3
16070: AND
16071: PUSH
16072: LD_INT 22
16074: PUSH
16075: LD_INT 8
16077: PUSH
16078: EMPTY
16079: LIST
16080: LIST
16081: PUSH
16082: LD_INT 34
16084: PUSH
16085: LD_INT 31
16087: PUSH
16088: EMPTY
16089: LIST
16090: LIST
16091: PUSH
16092: EMPTY
16093: LIST
16094: LIST
16095: PPUSH
16096: CALL_OW 69
16100: AND
16101: PUSH
16102: LD_EXP 36
16106: PUSH
16107: LD_EXP 6
16111: ARRAY
16112: PPUSH
16113: LD_INT 30
16115: PUSH
16116: LD_INT 3
16118: PUSH
16119: EMPTY
16120: LIST
16121: LIST
16122: PPUSH
16123: CALL_OW 72
16127: AND
16128: IFFALSE 16659
16130: GO 16132
16132: DISABLE
16133: LD_INT 0
16135: PPUSH
16136: PPUSH
16137: PPUSH
16138: PPUSH
16139: PPUSH
16140: PPUSH
// begin repeat wait ( 9 9$00 ) ;
16141: LD_INT 18900
16143: PPUSH
16144: CALL_OW 67
// base := mc_leg ;
16148: LD_ADDR_VAR 0 2
16152: PUSH
16153: LD_EXP 6
16157: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) or not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
16158: LD_INT 22
16160: PUSH
16161: LD_INT 8
16163: PUSH
16164: EMPTY
16165: LIST
16166: LIST
16167: PUSH
16168: LD_INT 34
16170: PUSH
16171: LD_INT 31
16173: PUSH
16174: EMPTY
16175: LIST
16176: LIST
16177: PUSH
16178: EMPTY
16179: LIST
16180: LIST
16181: PPUSH
16182: CALL_OW 69
16186: NOT
16187: PUSH
16188: LD_EXP 36
16192: PUSH
16193: LD_VAR 0 2
16197: ARRAY
16198: PPUSH
16199: LD_INT 30
16201: PUSH
16202: LD_INT 3
16204: PUSH
16205: EMPTY
16206: LIST
16207: LIST
16208: PPUSH
16209: CALL_OW 72
16213: NOT
16214: OR
16215: IFFALSE 16219
// continue ;
16217: GO 16141
// if legChangeSide then
16219: LD_EXP 21
16223: IFFALSE 16227
// exit ;
16225: GO 16659
// tmp := [ [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_selfpropelled_bomb ] ] ;
16227: LD_ADDR_VAR 0 4
16231: PUSH
16232: LD_INT 13
16234: PUSH
16235: LD_INT 1
16237: PUSH
16238: LD_INT 2
16240: PUSH
16241: LD_INT 28
16243: PUSH
16244: EMPTY
16245: LIST
16246: LIST
16247: LIST
16248: LIST
16249: PUSH
16250: LD_INT 13
16252: PUSH
16253: LD_INT 1
16255: PUSH
16256: LD_INT 2
16258: PUSH
16259: LD_INT 28
16261: PUSH
16262: EMPTY
16263: LIST
16264: LIST
16265: LIST
16266: LIST
16267: PUSH
16268: LD_INT 13
16270: PUSH
16271: LD_INT 1
16273: PUSH
16274: LD_INT 2
16276: PUSH
16277: LD_INT 28
16279: PUSH
16280: EMPTY
16281: LIST
16282: LIST
16283: LIST
16284: LIST
16285: PUSH
16286: LD_INT 13
16288: PUSH
16289: LD_INT 1
16291: PUSH
16292: LD_INT 2
16294: PUSH
16295: LD_INT 27
16297: PUSH
16298: EMPTY
16299: LIST
16300: LIST
16301: LIST
16302: LIST
16303: PUSH
16304: LD_INT 13
16306: PUSH
16307: LD_INT 1
16309: PUSH
16310: LD_INT 2
16312: PUSH
16313: LD_INT 27
16315: PUSH
16316: EMPTY
16317: LIST
16318: LIST
16319: LIST
16320: LIST
16321: PUSH
16322: LD_INT 13
16324: PUSH
16325: LD_INT 1
16327: PUSH
16328: LD_INT 2
16330: PUSH
16331: LD_INT 29
16333: PUSH
16334: EMPTY
16335: LIST
16336: LIST
16337: LIST
16338: LIST
16339: PUSH
16340: EMPTY
16341: LIST
16342: LIST
16343: LIST
16344: LIST
16345: LIST
16346: LIST
16347: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
16348: LD_VAR 0 2
16352: PPUSH
16353: LD_VAR 0 4
16357: PPUSH
16358: CALL 85698 0 2
// repeat wait ( 0 0$1 ) ;
16362: LD_INT 35
16364: PPUSH
16365: CALL_OW 67
// until MC_GetProduceList ( base ) = 0 ;
16369: LD_VAR 0 2
16373: PPUSH
16374: CALL 86046 0 1
16378: PUSH
16379: LD_INT 0
16381: EQUAL
16382: IFFALSE 16362
// wait ( 0 0$30 ) ;
16384: LD_INT 1050
16386: PPUSH
16387: CALL_OW 67
// _target := [ [ 165 , 89 ] , [ 190 , 123 ] ] ;
16391: LD_ADDR_VAR 0 5
16395: PUSH
16396: LD_INT 165
16398: PUSH
16399: LD_INT 89
16401: PUSH
16402: EMPTY
16403: LIST
16404: LIST
16405: PUSH
16406: LD_INT 190
16408: PUSH
16409: LD_INT 123
16411: PUSH
16412: EMPTY
16413: LIST
16414: LIST
16415: PUSH
16416: EMPTY
16417: LIST
16418: LIST
16419: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 ] ;
16420: LD_ADDR_VAR 0 3
16424: PUSH
16425: LD_INT 0
16427: PUSH
16428: LD_INT 0
16430: PUSH
16431: LD_INT 0
16433: PUSH
16434: LD_INT 0
16436: PUSH
16437: LD_INT 0
16439: PUSH
16440: LD_INT 0
16442: PUSH
16443: LD_INT 0
16445: PUSH
16446: LD_INT 0
16448: PUSH
16449: LD_INT 1
16451: PUSH
16452: LD_INT 0
16454: PUSH
16455: EMPTY
16456: LIST
16457: LIST
16458: LIST
16459: LIST
16460: LIST
16461: LIST
16462: LIST
16463: LIST
16464: LIST
16465: LIST
16466: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] union UnitFilter ( mc_vehicles [ base ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ar_control_tower ] ] ) ) ;
16467: LD_ADDR_VAR 0 6
16471: PUSH
16472: LD_EXP 55
16476: PUSH
16477: LD_VAR 0 2
16481: ARRAY
16482: PUSH
16483: LD_EXP 58
16487: PUSH
16488: LD_VAR 0 2
16492: ARRAY
16493: PUSH
16494: LD_EXP 55
16498: PUSH
16499: LD_VAR 0 2
16503: ARRAY
16504: PPUSH
16505: LD_INT 2
16507: PUSH
16508: LD_INT 34
16510: PUSH
16511: LD_INT 32
16513: PUSH
16514: EMPTY
16515: LIST
16516: LIST
16517: PUSH
16518: LD_INT 34
16520: PUSH
16521: LD_INT 31
16523: PUSH
16524: EMPTY
16525: LIST
16526: LIST
16527: PUSH
16528: EMPTY
16529: LIST
16530: LIST
16531: LIST
16532: PPUSH
16533: CALL_OW 72
16537: UNION
16538: DIFF
16539: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff attackers ) ;
16540: LD_ADDR_EXP 55
16544: PUSH
16545: LD_EXP 55
16549: PPUSH
16550: LD_VAR 0 2
16554: PPUSH
16555: LD_EXP 55
16559: PUSH
16560: LD_VAR 0 2
16564: ARRAY
16565: PUSH
16566: LD_VAR 0 6
16570: DIFF
16571: PPUSH
16572: CALL_OW 1
16576: ST_TO_ADDR
// if not attackers then
16577: LD_VAR 0 6
16581: NOT
16582: IFFALSE 16586
// continue ;
16584: GO 16141
// repeat wait ( 0 0$1 ) ;
16586: LD_INT 35
16588: PPUSH
16589: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
16593: LD_VAR 0 6
16597: PPUSH
16598: LD_INT 60
16600: PUSH
16601: EMPTY
16602: LIST
16603: PPUSH
16604: CALL_OW 72
16608: NOT
16609: IFFALSE 16586
// MC_PrepareAttack ( base , attackers , _target , flags ) ;
16611: LD_VAR 0 2
16615: PPUSH
16616: LD_VAR 0 6
16620: PPUSH
16621: LD_VAR 0 5
16625: PPUSH
16626: LD_VAR 0 3
16630: PPUSH
16631: CALL 85883 0 4
// until not UnitFilter ( mc_bases [ base ] , [ f_ok ] ) ;
16635: LD_EXP 36
16639: PUSH
16640: LD_VAR 0 2
16644: ARRAY
16645: PPUSH
16646: LD_INT 50
16648: PUSH
16649: EMPTY
16650: LIST
16651: PPUSH
16652: CALL_OW 72
16656: NOT
16657: IFFALSE 16141
// end ;
16659: PPOPN 6
16661: END
// every 1 1$00 trigger GameType = 1 and game and legChangeSide and FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) and UnitFilter ( mc_bases [ mc_leg ] , [ f_btype , b_factory ] ) do var i , base , tmp , _target , attackers , flags ;
16662: LD_EXP 2
16666: PUSH
16667: LD_INT 1
16669: EQUAL
16670: PUSH
16671: LD_EXP 3
16675: AND
16676: PUSH
16677: LD_EXP 21
16681: AND
16682: PUSH
16683: LD_INT 22
16685: PUSH
16686: LD_INT 8
16688: PUSH
16689: EMPTY
16690: LIST
16691: LIST
16692: PUSH
16693: LD_INT 34
16695: PUSH
16696: LD_INT 31
16698: PUSH
16699: EMPTY
16700: LIST
16701: LIST
16702: PUSH
16703: EMPTY
16704: LIST
16705: LIST
16706: PPUSH
16707: CALL_OW 69
16711: AND
16712: PUSH
16713: LD_EXP 36
16717: PUSH
16718: LD_EXP 6
16722: ARRAY
16723: PPUSH
16724: LD_INT 30
16726: PUSH
16727: LD_INT 3
16729: PUSH
16730: EMPTY
16731: LIST
16732: LIST
16733: PPUSH
16734: CALL_OW 72
16738: AND
16739: IFFALSE 17281
16741: GO 16743
16743: DISABLE
16744: LD_INT 0
16746: PPUSH
16747: PPUSH
16748: PPUSH
16749: PPUSH
16750: PPUSH
16751: PPUSH
// begin repeat wait ( 12 12$00 ) ;
16752: LD_INT 25200
16754: PPUSH
16755: CALL_OW 67
// base := mc_leg ;
16759: LD_ADDR_VAR 0 2
16763: PUSH
16764: LD_EXP 6
16768: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) or not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
16769: LD_INT 22
16771: PUSH
16772: LD_INT 8
16774: PUSH
16775: EMPTY
16776: LIST
16777: LIST
16778: PUSH
16779: LD_INT 34
16781: PUSH
16782: LD_INT 31
16784: PUSH
16785: EMPTY
16786: LIST
16787: LIST
16788: PUSH
16789: EMPTY
16790: LIST
16791: LIST
16792: PPUSH
16793: CALL_OW 69
16797: NOT
16798: PUSH
16799: LD_EXP 36
16803: PUSH
16804: LD_VAR 0 2
16808: ARRAY
16809: PPUSH
16810: LD_INT 30
16812: PUSH
16813: LD_INT 3
16815: PUSH
16816: EMPTY
16817: LIST
16818: LIST
16819: PPUSH
16820: CALL_OW 72
16824: NOT
16825: OR
16826: IFFALSE 16830
// continue ;
16828: GO 16752
// tmp := [ [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_selfpropelled_bomb ] , [ ar_medium_trike , engine_combustion , control_remote , ar_selfpropelled_bomb ] ] ;
16830: LD_ADDR_VAR 0 3
16834: PUSH
16835: LD_INT 13
16837: PUSH
16838: LD_INT 1
16840: PUSH
16841: LD_INT 2
16843: PUSH
16844: LD_INT 28
16846: PUSH
16847: EMPTY
16848: LIST
16849: LIST
16850: LIST
16851: LIST
16852: PUSH
16853: LD_INT 13
16855: PUSH
16856: LD_INT 1
16858: PUSH
16859: LD_INT 2
16861: PUSH
16862: LD_INT 28
16864: PUSH
16865: EMPTY
16866: LIST
16867: LIST
16868: LIST
16869: LIST
16870: PUSH
16871: LD_INT 13
16873: PUSH
16874: LD_INT 1
16876: PUSH
16877: LD_INT 2
16879: PUSH
16880: LD_INT 28
16882: PUSH
16883: EMPTY
16884: LIST
16885: LIST
16886: LIST
16887: LIST
16888: PUSH
16889: LD_INT 13
16891: PUSH
16892: LD_INT 1
16894: PUSH
16895: LD_INT 2
16897: PUSH
16898: LD_INT 27
16900: PUSH
16901: EMPTY
16902: LIST
16903: LIST
16904: LIST
16905: LIST
16906: PUSH
16907: LD_INT 13
16909: PUSH
16910: LD_INT 1
16912: PUSH
16913: LD_INT 2
16915: PUSH
16916: LD_INT 27
16918: PUSH
16919: EMPTY
16920: LIST
16921: LIST
16922: LIST
16923: LIST
16924: PUSH
16925: LD_INT 13
16927: PUSH
16928: LD_INT 1
16930: PUSH
16931: LD_INT 2
16933: PUSH
16934: LD_INT 29
16936: PUSH
16937: EMPTY
16938: LIST
16939: LIST
16940: LIST
16941: LIST
16942: PUSH
16943: LD_INT 13
16945: PUSH
16946: LD_INT 1
16948: PUSH
16949: LD_INT 2
16951: PUSH
16952: LD_INT 29
16954: PUSH
16955: EMPTY
16956: LIST
16957: LIST
16958: LIST
16959: LIST
16960: PUSH
16961: EMPTY
16962: LIST
16963: LIST
16964: LIST
16965: LIST
16966: LIST
16967: LIST
16968: LIST
16969: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
16970: LD_VAR 0 2
16974: PPUSH
16975: LD_VAR 0 3
16979: PPUSH
16980: CALL 85698 0 2
// repeat wait ( 0 0$1 ) ;
16984: LD_INT 35
16986: PPUSH
16987: CALL_OW 67
// until MC_GetProduceList ( base ) = 0 ;
16991: LD_VAR 0 2
16995: PPUSH
16996: CALL 86046 0 1
17000: PUSH
17001: LD_INT 0
17003: EQUAL
17004: IFFALSE 16984
// wait ( 0 0$30 ) ;
17006: LD_INT 1050
17008: PPUSH
17009: CALL_OW 67
// _target := [ [ 110 , 63 ] , [ 92 , 72 ] ] ;
17013: LD_ADDR_VAR 0 4
17017: PUSH
17018: LD_INT 110
17020: PUSH
17021: LD_INT 63
17023: PUSH
17024: EMPTY
17025: LIST
17026: LIST
17027: PUSH
17028: LD_INT 92
17030: PUSH
17031: LD_INT 72
17033: PUSH
17034: EMPTY
17035: LIST
17036: LIST
17037: PUSH
17038: EMPTY
17039: LIST
17040: LIST
17041: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 ] ;
17042: LD_ADDR_VAR 0 6
17046: PUSH
17047: LD_INT 0
17049: PUSH
17050: LD_INT 0
17052: PUSH
17053: LD_INT 0
17055: PUSH
17056: LD_INT 0
17058: PUSH
17059: LD_INT 0
17061: PUSH
17062: LD_INT 0
17064: PUSH
17065: LD_INT 0
17067: PUSH
17068: LD_INT 0
17070: PUSH
17071: LD_INT 1
17073: PUSH
17074: LD_INT 0
17076: PUSH
17077: EMPTY
17078: LIST
17079: LIST
17080: LIST
17081: LIST
17082: LIST
17083: LIST
17084: LIST
17085: LIST
17086: LIST
17087: LIST
17088: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] union UnitFilter ( mc_vehicles [ base ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ar_control_tower ] ] ) ) ;
17089: LD_ADDR_VAR 0 5
17093: PUSH
17094: LD_EXP 55
17098: PUSH
17099: LD_VAR 0 2
17103: ARRAY
17104: PUSH
17105: LD_EXP 58
17109: PUSH
17110: LD_VAR 0 2
17114: ARRAY
17115: PUSH
17116: LD_EXP 55
17120: PUSH
17121: LD_VAR 0 2
17125: ARRAY
17126: PPUSH
17127: LD_INT 2
17129: PUSH
17130: LD_INT 34
17132: PUSH
17133: LD_INT 32
17135: PUSH
17136: EMPTY
17137: LIST
17138: LIST
17139: PUSH
17140: LD_INT 34
17142: PUSH
17143: LD_INT 31
17145: PUSH
17146: EMPTY
17147: LIST
17148: LIST
17149: PUSH
17150: EMPTY
17151: LIST
17152: LIST
17153: LIST
17154: PPUSH
17155: CALL_OW 72
17159: UNION
17160: DIFF
17161: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff attackers ) ;
17162: LD_ADDR_EXP 55
17166: PUSH
17167: LD_EXP 55
17171: PPUSH
17172: LD_VAR 0 2
17176: PPUSH
17177: LD_EXP 55
17181: PUSH
17182: LD_VAR 0 2
17186: ARRAY
17187: PUSH
17188: LD_VAR 0 5
17192: DIFF
17193: PPUSH
17194: CALL_OW 1
17198: ST_TO_ADDR
// if not attackers then
17199: LD_VAR 0 5
17203: NOT
17204: IFFALSE 17208
// continue ;
17206: GO 16752
// repeat wait ( 0 0$1 ) ;
17208: LD_INT 35
17210: PPUSH
17211: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
17215: LD_VAR 0 5
17219: PPUSH
17220: LD_INT 60
17222: PUSH
17223: EMPTY
17224: LIST
17225: PPUSH
17226: CALL_OW 72
17230: NOT
17231: IFFALSE 17208
// MC_PrepareAttack ( base , attackers , _target , flags ) ;
17233: LD_VAR 0 2
17237: PPUSH
17238: LD_VAR 0 5
17242: PPUSH
17243: LD_VAR 0 4
17247: PPUSH
17248: LD_VAR 0 6
17252: PPUSH
17253: CALL 85883 0 4
// until not UnitFilter ( mc_bases [ base ] , [ f_ok ] ) ;
17257: LD_EXP 36
17261: PUSH
17262: LD_VAR 0 2
17266: ARRAY
17267: PPUSH
17268: LD_INT 50
17270: PUSH
17271: EMPTY
17272: LIST
17273: PPUSH
17274: CALL_OW 72
17278: NOT
17279: IFFALSE 16752
// end ;
17281: PPOPN 6
17283: END
// every 1 1$00 trigger GameType = 1 and game and UnitFilter ( mc_bases [ mc_amer ] , [ f_btype , b_factory ] ) do var i , base , tmp , _target , attackers , e ;
17284: LD_EXP 2
17288: PUSH
17289: LD_INT 1
17291: EQUAL
17292: PUSH
17293: LD_EXP 3
17297: AND
17298: PUSH
17299: LD_EXP 36
17303: PUSH
17304: LD_EXP 5
17308: ARRAY
17309: PPUSH
17310: LD_INT 30
17312: PUSH
17313: LD_INT 3
17315: PUSH
17316: EMPTY
17317: LIST
17318: LIST
17319: PPUSH
17320: CALL_OW 72
17324: AND
17325: IFFALSE 17907
17327: GO 17329
17329: DISABLE
17330: LD_INT 0
17332: PPUSH
17333: PPUSH
17334: PPUSH
17335: PPUSH
17336: PPUSH
17337: PPUSH
// begin repeat wait ( 12 12$00 ) ;
17338: LD_INT 25200
17340: PPUSH
17341: CALL_OW 67
// base := mc_amer ;
17345: LD_ADDR_VAR 0 2
17349: PUSH
17350: LD_EXP 5
17354: ST_TO_ADDR
// if not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
17355: LD_EXP 36
17359: PUSH
17360: LD_VAR 0 2
17364: ARRAY
17365: PPUSH
17366: LD_INT 30
17368: PUSH
17369: LD_INT 3
17371: PUSH
17372: EMPTY
17373: LIST
17374: LIST
17375: PPUSH
17376: CALL_OW 72
17380: NOT
17381: IFFALSE 17385
// continue ;
17383: GO 17338
// tmp := [ [ us_heavy_tracked , engine_combustion , control_remote , us_heavy_gun ] , [ us_heavy_tracked , engine_combustion , control_remote , us_heavy_gun ] , [ us_medium_wheeled , engine_combustion , control_remote , us_rocket_launcher ] , [ us_medium_wheeled , engine_combustion , control_remote , us_rocket_launcher ] , [ us_medium_wheeled , engine_combustion , control_remote , us_rocket_launcher ] ] ;
17385: LD_ADDR_VAR 0 3
17389: PUSH
17390: LD_INT 4
17392: PUSH
17393: LD_INT 1
17395: PUSH
17396: LD_INT 2
17398: PUSH
17399: LD_INT 6
17401: PUSH
17402: EMPTY
17403: LIST
17404: LIST
17405: LIST
17406: LIST
17407: PUSH
17408: LD_INT 4
17410: PUSH
17411: LD_INT 1
17413: PUSH
17414: LD_INT 2
17416: PUSH
17417: LD_INT 6
17419: PUSH
17420: EMPTY
17421: LIST
17422: LIST
17423: LIST
17424: LIST
17425: PUSH
17426: LD_INT 2
17428: PUSH
17429: LD_INT 1
17431: PUSH
17432: LD_INT 2
17434: PUSH
17435: LD_INT 7
17437: PUSH
17438: EMPTY
17439: LIST
17440: LIST
17441: LIST
17442: LIST
17443: PUSH
17444: LD_INT 2
17446: PUSH
17447: LD_INT 1
17449: PUSH
17450: LD_INT 2
17452: PUSH
17453: LD_INT 7
17455: PUSH
17456: EMPTY
17457: LIST
17458: LIST
17459: LIST
17460: LIST
17461: PUSH
17462: LD_INT 2
17464: PUSH
17465: LD_INT 1
17467: PUSH
17468: LD_INT 2
17470: PUSH
17471: LD_INT 7
17473: PUSH
17474: EMPTY
17475: LIST
17476: LIST
17477: LIST
17478: LIST
17479: PUSH
17480: EMPTY
17481: LIST
17482: LIST
17483: LIST
17484: LIST
17485: LIST
17486: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
17487: LD_VAR 0 2
17491: PPUSH
17492: LD_VAR 0 3
17496: PPUSH
17497: CALL 85698 0 2
// repeat wait ( 0 0$1 ) ;
17501: LD_INT 35
17503: PPUSH
17504: CALL_OW 67
// until MC_GetProduceList ( base ) = 0 ;
17508: LD_VAR 0 2
17512: PPUSH
17513: CALL 86046 0 1
17517: PUSH
17518: LD_INT 0
17520: EQUAL
17521: IFFALSE 17501
// wait ( 0 0$30 ) ;
17523: LD_INT 1050
17525: PPUSH
17526: CALL_OW 67
// _target := [ [ 92 , 34 ] ] ;
17530: LD_ADDR_VAR 0 4
17534: PUSH
17535: LD_INT 92
17537: PUSH
17538: LD_INT 34
17540: PUSH
17541: EMPTY
17542: LIST
17543: LIST
17544: PUSH
17545: EMPTY
17546: LIST
17547: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] union UnitFilter ( mc_vehicles [ base ] , [ f_weapon , us_cargo_bay ] ) ) ;
17548: LD_ADDR_VAR 0 5
17552: PUSH
17553: LD_EXP 55
17557: PUSH
17558: LD_VAR 0 2
17562: ARRAY
17563: PUSH
17564: LD_EXP 58
17568: PUSH
17569: LD_VAR 0 2
17573: ARRAY
17574: PUSH
17575: LD_EXP 55
17579: PUSH
17580: LD_VAR 0 2
17584: ARRAY
17585: PPUSH
17586: LD_INT 34
17588: PUSH
17589: LD_INT 12
17591: PUSH
17592: EMPTY
17593: LIST
17594: LIST
17595: PPUSH
17596: CALL_OW 72
17600: UNION
17601: DIFF
17602: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff attackers ) ;
17603: LD_ADDR_EXP 55
17607: PUSH
17608: LD_EXP 55
17612: PPUSH
17613: LD_VAR 0 2
17617: PPUSH
17618: LD_EXP 55
17622: PUSH
17623: LD_VAR 0 2
17627: ARRAY
17628: PUSH
17629: LD_VAR 0 5
17633: DIFF
17634: PPUSH
17635: CALL_OW 1
17639: ST_TO_ADDR
// if not attackers then
17640: LD_VAR 0 5
17644: NOT
17645: IFFALSE 17649
// continue ;
17647: GO 17338
// repeat wait ( 0 0$1 ) ;
17649: LD_INT 35
17651: PPUSH
17652: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
17656: LD_VAR 0 5
17660: PPUSH
17661: LD_INT 60
17663: PUSH
17664: EMPTY
17665: LIST
17666: PPUSH
17667: CALL_OW 72
17671: NOT
17672: IFFALSE 17649
// for i = 1 to _target do
17674: LD_ADDR_VAR 0 1
17678: PUSH
17679: DOUBLE
17680: LD_INT 1
17682: DEC
17683: ST_TO_ADDR
17684: LD_VAR 0 4
17688: PUSH
17689: FOR_TO
17690: IFFALSE 17733
// AddComAgressiveMove ( attackers , _target [ i ] [ 1 ] , _target [ i ] [ 2 ] ) ;
17692: LD_VAR 0 5
17696: PPUSH
17697: LD_VAR 0 4
17701: PUSH
17702: LD_VAR 0 1
17706: ARRAY
17707: PUSH
17708: LD_INT 1
17710: ARRAY
17711: PPUSH
17712: LD_VAR 0 4
17716: PUSH
17717: LD_VAR 0 1
17721: ARRAY
17722: PUSH
17723: LD_INT 2
17725: ARRAY
17726: PPUSH
17727: CALL_OW 174
17731: GO 17689
17733: POP
17734: POP
// repeat wait ( 0 0$1 ) ;
17735: LD_INT 35
17737: PPUSH
17738: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
17742: LD_VAR 0 5
17746: PPUSH
17747: LD_INT 60
17749: PUSH
17750: EMPTY
17751: LIST
17752: PPUSH
17753: CALL_OW 72
17757: NOT
17758: IFFALSE 17735
// repeat wait ( 0 0$1 ) ;
17760: LD_INT 35
17762: PPUSH
17763: CALL_OW 67
// for i in attackers do
17767: LD_ADDR_VAR 0 1
17771: PUSH
17772: LD_VAR 0 5
17776: PUSH
17777: FOR_IN
17778: IFFALSE 17874
// begin if IsDead ( i ) then
17780: LD_VAR 0 1
17784: PPUSH
17785: CALL_OW 301
17789: IFFALSE 17809
// begin attackers := attackers diff i ;
17791: LD_ADDR_VAR 0 5
17795: PUSH
17796: LD_VAR 0 5
17800: PUSH
17801: LD_VAR 0 1
17805: DIFF
17806: ST_TO_ADDR
// continue ;
17807: GO 17777
// end ; if HasTask ( i ) then
17809: LD_VAR 0 1
17813: PPUSH
17814: CALL_OW 314
17818: IFFALSE 17822
// continue ;
17820: GO 17777
// e := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 4 ] ) , i ) ;
17822: LD_ADDR_VAR 0 6
17826: PUSH
17827: LD_INT 81
17829: PUSH
17830: LD_INT 4
17832: PUSH
17833: EMPTY
17834: LIST
17835: LIST
17836: PPUSH
17837: CALL_OW 69
17841: PPUSH
17842: LD_VAR 0 1
17846: PPUSH
17847: CALL_OW 74
17851: ST_TO_ADDR
// if e then
17852: LD_VAR 0 6
17856: IFFALSE 17872
// ComAttackUnit ( i , e ) ;
17858: LD_VAR 0 1
17862: PPUSH
17863: LD_VAR 0 6
17867: PPUSH
17868: CALL_OW 115
// end ;
17872: GO 17777
17874: POP
17875: POP
// until not attackers ;
17876: LD_VAR 0 5
17880: NOT
17881: IFFALSE 17760
// until not UnitFilter ( mc_bases [ base ] , [ f_ok ] ) ;
17883: LD_EXP 36
17887: PUSH
17888: LD_VAR 0 2
17892: ARRAY
17893: PPUSH
17894: LD_INT 50
17896: PUSH
17897: EMPTY
17898: LIST
17899: PPUSH
17900: CALL_OW 72
17904: NOT
17905: IFFALSE 17338
// end ;
17907: PPOPN 6
17909: END
// every 30 30$00 + 50 50$00 trigger GameType = 1 and game and sibBombAllowed > 0 and UnitFilter ( mc_bases [ mc_rus_2 ] , [ f_btype , b_factory ] ) do var bomb , e ;
17910: LD_EXP 2
17914: PUSH
17915: LD_INT 1
17917: EQUAL
17918: PUSH
17919: LD_EXP 3
17923: AND
17924: PUSH
17925: LD_EXP 23
17929: PUSH
17930: LD_INT 0
17932: GREATER
17933: AND
17934: PUSH
17935: LD_EXP 36
17939: PUSH
17940: LD_EXP 8
17944: ARRAY
17945: PPUSH
17946: LD_INT 30
17948: PUSH
17949: LD_INT 3
17951: PUSH
17952: EMPTY
17953: LIST
17954: LIST
17955: PPUSH
17956: CALL_OW 72
17960: AND
17961: IFFALSE 18165
17963: GO 17965
17965: DISABLE
17966: LD_INT 0
17968: PPUSH
17969: PPUSH
// begin enable ;
17970: ENABLE
// MC_InsertProduceList ( mc_rus_2 , [ [ ru_heavy_wheeled , engine_siberite , control_computer , ru_siberium_rocket ] ] ) ;
17971: LD_EXP 8
17975: PPUSH
17976: LD_INT 23
17978: PUSH
17979: LD_INT 3
17981: PUSH
17982: LD_INT 3
17984: PUSH
17985: LD_INT 48
17987: PUSH
17988: EMPTY
17989: LIST
17990: LIST
17991: LIST
17992: LIST
17993: PUSH
17994: EMPTY
17995: LIST
17996: PPUSH
17997: CALL 85698 0 2
// repeat wait ( 0 0$1 ) ;
18001: LD_INT 35
18003: PPUSH
18004: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) ;
18008: LD_INT 22
18010: PUSH
18011: LD_INT 3
18013: PUSH
18014: EMPTY
18015: LIST
18016: LIST
18017: PUSH
18018: LD_INT 34
18020: PUSH
18021: LD_INT 48
18023: PUSH
18024: EMPTY
18025: LIST
18026: LIST
18027: PUSH
18028: EMPTY
18029: LIST
18030: LIST
18031: PPUSH
18032: CALL_OW 69
18036: IFFALSE 18001
// bomb := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) ;
18038: LD_ADDR_VAR 0 1
18042: PUSH
18043: LD_INT 22
18045: PUSH
18046: LD_INT 3
18048: PUSH
18049: EMPTY
18050: LIST
18051: LIST
18052: PUSH
18053: LD_INT 34
18055: PUSH
18056: LD_INT 48
18058: PUSH
18059: EMPTY
18060: LIST
18061: LIST
18062: PUSH
18063: EMPTY
18064: LIST
18065: LIST
18066: PPUSH
18067: CALL_OW 69
18071: ST_TO_ADDR
// e := FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_type , unit_building ] ] ) ;
18072: LD_ADDR_VAR 0 2
18076: PUSH
18077: LD_INT 81
18079: PUSH
18080: LD_INT 3
18082: PUSH
18083: EMPTY
18084: LIST
18085: LIST
18086: PUSH
18087: LD_INT 21
18089: PUSH
18090: LD_INT 3
18092: PUSH
18093: EMPTY
18094: LIST
18095: LIST
18096: PUSH
18097: EMPTY
18098: LIST
18099: LIST
18100: PPUSH
18101: CALL_OW 69
18105: ST_TO_ADDR
// if e then
18106: LD_VAR 0 2
18110: IFFALSE 18136
// e := NearestUnitToUnit ( e , bomb [ 1 ] ) ;
18112: LD_ADDR_VAR 0 2
18116: PUSH
18117: LD_VAR 0 2
18121: PPUSH
18122: LD_VAR 0 1
18126: PUSH
18127: LD_INT 1
18129: ARRAY
18130: PPUSH
18131: CALL_OW 74
18135: ST_TO_ADDR
// ComAttackPlace ( bomb , GetX ( e ) , GetY ( e ) ) ;
18136: LD_VAR 0 1
18140: PPUSH
18141: LD_VAR 0 2
18145: PPUSH
18146: CALL_OW 250
18150: PPUSH
18151: LD_VAR 0 2
18155: PPUSH
18156: CALL_OW 251
18160: PPUSH
18161: CALL_OW 116
// end ;
18165: PPOPN 2
18167: END
// every 7 7$00 trigger GameType = 1 and GetBType ( HexInfo ( 84 , 128 ) ) = b_warehouse do var veh , depot ;
18168: LD_EXP 2
18172: PUSH
18173: LD_INT 1
18175: EQUAL
18176: PUSH
18177: LD_INT 84
18179: PPUSH
18180: LD_INT 128
18182: PPUSH
18183: CALL_OW 428
18187: PPUSH
18188: CALL_OW 266
18192: PUSH
18193: LD_INT 1
18195: EQUAL
18196: AND
18197: IFFALSE 18370
18199: GO 18201
18201: DISABLE
18202: LD_INT 0
18204: PPUSH
18205: PPUSH
// begin enable ;
18206: ENABLE
// depot := HexInfo ( 84 , 128 ) ;
18207: LD_ADDR_VAR 0 2
18211: PUSH
18212: LD_INT 84
18214: PPUSH
18215: LD_INT 128
18217: PPUSH
18218: CALL_OW 428
18222: ST_TO_ADDR
// uc_side := 3 ;
18223: LD_ADDR_OWVAR 20
18227: PUSH
18228: LD_INT 3
18230: ST_TO_ADDR
// uc_nation := 3 ;
18231: LD_ADDR_OWVAR 21
18235: PUSH
18236: LD_INT 3
18238: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_siberite , control_computer , ru_cargo_bay , 0 ) ;
18239: LD_INT 21
18241: PPUSH
18242: LD_INT 3
18244: PPUSH
18245: LD_INT 3
18247: PPUSH
18248: LD_INT 51
18250: PPUSH
18251: LD_INT 0
18253: PPUSH
18254: CALL 26437 0 5
// veh := CreateVehicle ;
18258: LD_ADDR_VAR 0 1
18262: PUSH
18263: CALL_OW 45
18267: ST_TO_ADDR
// PlaceUnitXY ( veh , 126 , 227 , false ) ;
18268: LD_VAR 0 1
18272: PPUSH
18273: LD_INT 126
18275: PPUSH
18276: LD_INT 227
18278: PPUSH
18279: LD_INT 0
18281: PPUSH
18282: CALL_OW 48
// SetCargo ( veh , mat_oil , 100 ) ;
18286: LD_VAR 0 1
18290: PPUSH
18291: LD_INT 2
18293: PPUSH
18294: LD_INT 100
18296: PPUSH
18297: CALL_OW 290
// ComGive ( veh , depot ) ;
18301: LD_VAR 0 1
18305: PPUSH
18306: LD_VAR 0 2
18310: PPUSH
18311: CALL_OW 161
// AddComMoveXY ( veh , 126 , 227 ) ;
18315: LD_VAR 0 1
18319: PPUSH
18320: LD_INT 126
18322: PPUSH
18323: LD_INT 227
18325: PPUSH
18326: CALL_OW 171
// wait ( 0 0$10 ) ;
18330: LD_INT 350
18332: PPUSH
18333: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
18337: LD_INT 35
18339: PPUSH
18340: CALL_OW 67
// until IsAt ( veh , 126 , 227 ) ;
18344: LD_VAR 0 1
18348: PPUSH
18349: LD_INT 126
18351: PPUSH
18352: LD_INT 227
18354: PPUSH
18355: CALL_OW 307
18359: IFFALSE 18337
// RemoveUnit ( veh ) ;
18361: LD_VAR 0 1
18365: PPUSH
18366: CALL_OW 64
// end ;
18370: PPOPN 2
18372: END
// every 9 9$00 trigger GameType = 1 and outpostEscape and commander = 2 do var veh , depot ;
18373: LD_EXP 2
18377: PUSH
18378: LD_INT 1
18380: EQUAL
18381: PUSH
18382: LD_EXP 27
18386: AND
18387: PUSH
18388: LD_EXP 25
18392: PUSH
18393: LD_INT 2
18395: EQUAL
18396: AND
18397: IFFALSE 18589
18399: GO 18401
18401: DISABLE
18402: LD_INT 0
18404: PPUSH
18405: PPUSH
// begin enable ;
18406: ENABLE
// if tick >= [ 50 50$00 , 40 40$00 , 30 30$00 ] [ Difficulty ] then
18407: LD_OWVAR 1
18411: PUSH
18412: LD_INT 105000
18414: PUSH
18415: LD_INT 84000
18417: PUSH
18418: LD_INT 63000
18420: PUSH
18421: EMPTY
18422: LIST
18423: LIST
18424: LIST
18425: PUSH
18426: LD_OWVAR 67
18430: ARRAY
18431: GREATEREQUAL
18432: IFFALSE 18435
// disable ;
18434: DISABLE
// uc_side := 4 ;
18435: LD_ADDR_OWVAR 20
18439: PUSH
18440: LD_INT 4
18442: ST_TO_ADDR
// uc_nation := 1 ;
18443: LD_ADDR_OWVAR 21
18447: PUSH
18448: LD_INT 1
18450: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_cargo_bay , 0 ) ;
18451: LD_INT 2
18453: PPUSH
18454: LD_INT 3
18456: PPUSH
18457: LD_INT 3
18459: PPUSH
18460: LD_INT 12
18462: PPUSH
18463: LD_INT 0
18465: PPUSH
18466: CALL 26437 0 5
// veh := CreateVehicle ;
18470: LD_ADDR_VAR 0 1
18474: PUSH
18475: CALL_OW 45
18479: ST_TO_ADDR
// PlaceUnitXY ( veh , 229 , 226 , false ) ;
18480: LD_VAR 0 1
18484: PPUSH
18485: LD_INT 229
18487: PPUSH
18488: LD_INT 226
18490: PPUSH
18491: LD_INT 0
18493: PPUSH
18494: CALL_OW 48
// SetCargo ( veh , mat_cans , 100 ) ;
18498: LD_VAR 0 1
18502: PPUSH
18503: LD_INT 1
18505: PPUSH
18506: LD_INT 100
18508: PPUSH
18509: CALL_OW 290
// AddComMoveToArea ( veh , ruOutpostArea ) ;
18513: LD_VAR 0 1
18517: PPUSH
18518: LD_INT 25
18520: PPUSH
18521: CALL_OW 173
// AddComUnload ( veh ) ;
18525: LD_VAR 0 1
18529: PPUSH
18530: CALL_OW 219
// AddComMoveXY ( veh , 229 , 226 ) ;
18534: LD_VAR 0 1
18538: PPUSH
18539: LD_INT 229
18541: PPUSH
18542: LD_INT 226
18544: PPUSH
18545: CALL_OW 171
// wait ( 0 0$10 ) ;
18549: LD_INT 350
18551: PPUSH
18552: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
18556: LD_INT 35
18558: PPUSH
18559: CALL_OW 67
// until IsAt ( veh , 229 , 226 ) ;
18563: LD_VAR 0 1
18567: PPUSH
18568: LD_INT 229
18570: PPUSH
18571: LD_INT 226
18573: PPUSH
18574: CALL_OW 307
18578: IFFALSE 18556
// RemoveUnit ( veh ) ;
18580: LD_VAR 0 1
18584: PPUSH
18585: CALL_OW 64
// end ;
18589: PPOPN 2
18591: END
// every 15 15$00 trigger GameType = 1 and game and reinforceAllowed do var i , j , veh , tmp , amount ;
18592: LD_EXP 2
18596: PUSH
18597: LD_INT 1
18599: EQUAL
18600: PUSH
18601: LD_EXP 3
18605: AND
18606: PUSH
18607: LD_EXP 24
18611: AND
18612: IFFALSE 18945
18614: GO 18616
18616: DISABLE
18617: LD_INT 0
18619: PPUSH
18620: PPUSH
18621: PPUSH
18622: PPUSH
18623: PPUSH
// begin enable ;
18624: ENABLE
// tmp := [ ] ;
18625: LD_ADDR_VAR 0 4
18629: PUSH
18630: EMPTY
18631: ST_TO_ADDR
// if commander = 1 then
18632: LD_EXP 25
18636: PUSH
18637: LD_INT 1
18639: EQUAL
18640: IFFALSE 18652
// amount := 3 else
18642: LD_ADDR_VAR 0 5
18646: PUSH
18647: LD_INT 3
18649: ST_TO_ADDR
18650: GO 18660
// amount := 2 ;
18652: LD_ADDR_VAR 0 5
18656: PUSH
18657: LD_INT 2
18659: ST_TO_ADDR
// for i = 1 to amount do
18660: LD_ADDR_VAR 0 1
18664: PUSH
18665: DOUBLE
18666: LD_INT 1
18668: DEC
18669: ST_TO_ADDR
18670: LD_VAR 0 5
18674: PUSH
18675: FOR_TO
18676: IFFALSE 18840
// begin wait ( 0 0$5 ) ;
18678: LD_INT 175
18680: PPUSH
18681: CALL_OW 67
// for j = 1 to 3 do
18685: LD_ADDR_VAR 0 2
18689: PUSH
18690: DOUBLE
18691: LD_INT 1
18693: DEC
18694: ST_TO_ADDR
18695: LD_INT 3
18697: PUSH
18698: FOR_TO
18699: IFFALSE 18836
// begin uc_side := 4 ;
18701: LD_ADDR_OWVAR 20
18705: PUSH
18706: LD_INT 4
18708: ST_TO_ADDR
// uc_nation := 1 ;
18709: LD_ADDR_OWVAR 21
18713: PUSH
18714: LD_INT 1
18716: ST_TO_ADDR
// PrepareVehicle ( [ us_medium_tracked , us_morphling ] [ rand ( 1 , 2 ) ] , engine_siberite , control_computer , [ us_laser , us_double_gun , us_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
18717: LD_INT 3
18719: PUSH
18720: LD_INT 5
18722: PUSH
18723: EMPTY
18724: LIST
18725: LIST
18726: PUSH
18727: LD_INT 1
18729: PPUSH
18730: LD_INT 2
18732: PPUSH
18733: CALL_OW 12
18737: ARRAY
18738: PPUSH
18739: LD_INT 3
18741: PPUSH
18742: LD_INT 3
18744: PPUSH
18745: LD_INT 9
18747: PUSH
18748: LD_INT 5
18750: PUSH
18751: LD_INT 7
18753: PUSH
18754: EMPTY
18755: LIST
18756: LIST
18757: LIST
18758: PUSH
18759: LD_INT 1
18761: PPUSH
18762: LD_INT 3
18764: PPUSH
18765: CALL_OW 12
18769: ARRAY
18770: PPUSH
18771: LD_INT 100
18773: PPUSH
18774: CALL 26437 0 5
// veh := CreateVehicle ;
18778: LD_ADDR_VAR 0 3
18782: PUSH
18783: CALL_OW 45
18787: ST_TO_ADDR
// tmp := tmp ^ veh ;
18788: LD_ADDR_VAR 0 4
18792: PUSH
18793: LD_VAR 0 4
18797: PUSH
18798: LD_VAR 0 3
18802: ADD
18803: ST_TO_ADDR
// PlaceUnitArea ( veh , westSpawn , false ) ;
18804: LD_VAR 0 3
18808: PPUSH
18809: LD_INT 22
18811: PPUSH
18812: LD_INT 0
18814: PPUSH
18815: CALL_OW 49
// ComMoveXY ( veh , 119 , 215 ) ;
18819: LD_VAR 0 3
18823: PPUSH
18824: LD_INT 119
18826: PPUSH
18827: LD_INT 215
18829: PPUSH
18830: CALL_OW 111
// end ;
18834: GO 18698
18836: POP
18837: POP
// end ;
18838: GO 18675
18840: POP
18841: POP
// wait ( 0 0$3 ) ;
18842: LD_INT 105
18844: PPUSH
18845: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
18849: LD_INT 35
18851: PPUSH
18852: CALL_OW 67
// for i in tmp do
18856: LD_ADDR_VAR 0 1
18860: PUSH
18861: LD_VAR 0 4
18865: PUSH
18866: FOR_IN
18867: IFFALSE 18934
// if IsDead ( i ) then
18869: LD_VAR 0 1
18873: PPUSH
18874: CALL_OW 301
18878: IFFALSE 18898
// tmp := tmp diff i else
18880: LD_ADDR_VAR 0 4
18884: PUSH
18885: LD_VAR 0 4
18889: PUSH
18890: LD_VAR 0 1
18894: DIFF
18895: ST_TO_ADDR
18896: GO 18932
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 4 ] ) , i ) ) ;
18898: LD_VAR 0 1
18902: PPUSH
18903: LD_INT 81
18905: PUSH
18906: LD_INT 4
18908: PUSH
18909: EMPTY
18910: LIST
18911: LIST
18912: PPUSH
18913: CALL_OW 69
18917: PPUSH
18918: LD_VAR 0 1
18922: PPUSH
18923: CALL_OW 74
18927: PPUSH
18928: CALL_OW 115
18932: GO 18866
18934: POP
18935: POP
// until tmp = [ ] ;
18936: LD_VAR 0 4
18940: PUSH
18941: EMPTY
18942: EQUAL
18943: IFFALSE 18849
// end ;
18945: PPOPN 5
18947: END
// every 0 0$1 trigger GameType = 1 and game do var i , tmp ;
18948: LD_EXP 2
18952: PUSH
18953: LD_INT 1
18955: EQUAL
18956: PUSH
18957: LD_EXP 3
18961: AND
18962: IFFALSE 19063
18964: GO 18966
18966: DISABLE
18967: LD_INT 0
18969: PPUSH
18970: PPUSH
// begin enable ;
18971: ENABLE
// tmp := FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) ;
18972: LD_ADDR_VAR 0 2
18976: PUSH
18977: LD_INT 3
18979: PUSH
18980: LD_INT 22
18982: PUSH
18983: LD_INT 1
18985: PUSH
18986: EMPTY
18987: LIST
18988: LIST
18989: PUSH
18990: EMPTY
18991: LIST
18992: LIST
18993: PUSH
18994: LD_INT 32
18996: PUSH
18997: LD_INT 1
18999: PUSH
19000: EMPTY
19001: LIST
19002: LIST
19003: PUSH
19004: EMPTY
19005: LIST
19006: LIST
19007: PPUSH
19008: CALL_OW 69
19012: ST_TO_ADDR
// if tmp then
19013: LD_VAR 0 2
19017: IFFALSE 19063
// for i in tmp do
19019: LD_ADDR_VAR 0 1
19023: PUSH
19024: LD_VAR 0 2
19028: PUSH
19029: FOR_IN
19030: IFFALSE 19061
// if GetFuel ( i ) < 3 then
19032: LD_VAR 0 1
19036: PPUSH
19037: CALL_OW 261
19041: PUSH
19042: LD_INT 3
19044: LESS
19045: IFFALSE 19059
// SetFuel ( i , 3 ) ;
19047: LD_VAR 0 1
19051: PPUSH
19052: LD_INT 3
19054: PPUSH
19055: CALL_OW 240
19059: GO 19029
19061: POP
19062: POP
// end ; end_of_file
19063: PPOPN 2
19065: END
// export function CustomEvent ( event ) ; begin
19066: LD_INT 0
19068: PPUSH
// end ;
19069: LD_VAR 0 2
19073: RET
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 = 4 then
19074: LD_VAR 0 1
19078: PUSH
19079: LD_INT 1
19081: EQUAL
19082: PUSH
19083: LD_VAR 0 2
19087: PUSH
19088: LD_INT 4
19090: EQUAL
19091: AND
19092: IFFALSE 19120
// begin SayRadio ( Powell , DP-Lost ) ;
19094: LD_EXP 12
19098: PPUSH
19099: LD_STRING DP-Lost
19101: PPUSH
19102: CALL_OW 94
// wait ( 0 0$2 ) ;
19106: LD_INT 70
19108: PPUSH
19109: CALL_OW 67
// YouLost ( FriendlyFire ) ;
19113: LD_STRING FriendlyFire
19115: PPUSH
19116: CALL_OW 104
// end ; end ;
19120: PPOPN 2
19122: END
// on UnitDestroyed ( un ) do begin if GameType = 1 then
19123: LD_EXP 2
19127: PUSH
19128: LD_INT 1
19130: EQUAL
19131: IFFALSE 19366
// begin if un = playerCommander then
19133: LD_VAR 0 1
19137: PUSH
19138: LD_EXP 9
19142: EQUAL
19143: IFFALSE 19152
// YouLost ( commanderDied ) ;
19145: LD_STRING commanderDied
19147: PPUSH
19148: CALL_OW 104
// if un = allyCommander then
19152: LD_VAR 0 1
19156: PUSH
19157: LD_EXP 11
19161: EQUAL
19162: IFFALSE 19171
// YouLost ( Theta ) ;
19164: LD_STRING Theta
19166: PPUSH
19167: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_building ] ] ] ) then
19171: LD_VAR 0 1
19175: PUSH
19176: LD_INT 22
19178: PUSH
19179: LD_INT 8
19181: PUSH
19182: EMPTY
19183: LIST
19184: LIST
19185: PUSH
19186: LD_INT 2
19188: PUSH
19189: LD_INT 21
19191: PUSH
19192: LD_INT 1
19194: PUSH
19195: EMPTY
19196: LIST
19197: LIST
19198: PUSH
19199: LD_INT 21
19201: PUSH
19202: LD_INT 3
19204: PUSH
19205: EMPTY
19206: LIST
19207: LIST
19208: PUSH
19209: EMPTY
19210: LIST
19211: LIST
19212: LIST
19213: PUSH
19214: EMPTY
19215: LIST
19216: LIST
19217: PPUSH
19218: CALL_OW 69
19222: IN
19223: IFFALSE 19239
// legDestCounter := legDestCounter + 1 ;
19225: LD_ADDR_EXP 18
19229: PUSH
19230: LD_EXP 18
19234: PUSH
19235: LD_INT 1
19237: PLUS
19238: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_building ] ] ] ) then
19239: LD_VAR 0 1
19243: PUSH
19244: LD_INT 22
19246: PUSH
19247: LD_INT 4
19249: PUSH
19250: EMPTY
19251: LIST
19252: LIST
19253: PUSH
19254: LD_INT 2
19256: PUSH
19257: LD_INT 21
19259: PUSH
19260: LD_INT 1
19262: PUSH
19263: EMPTY
19264: LIST
19265: LIST
19266: PUSH
19267: LD_INT 21
19269: PUSH
19270: LD_INT 3
19272: PUSH
19273: EMPTY
19274: LIST
19275: LIST
19276: PUSH
19277: EMPTY
19278: LIST
19279: LIST
19280: LIST
19281: PUSH
19282: EMPTY
19283: LIST
19284: LIST
19285: PPUSH
19286: CALL_OW 69
19290: IN
19291: IFFALSE 19307
// allyDestCounter := allyDestCounter + 1 ;
19293: LD_ADDR_EXP 22
19297: PUSH
19298: LD_EXP 22
19302: PUSH
19303: LD_INT 1
19305: PLUS
19306: ST_TO_ADDR
// if un in ruOutpost then
19307: LD_VAR 0 1
19311: PUSH
19312: LD_EXP 14
19316: IN
19317: IFFALSE 19366
// begin ruOutpost := ruOutpost diff un ;
19319: LD_ADDR_EXP 14
19323: PUSH
19324: LD_EXP 14
19328: PUSH
19329: LD_VAR 0 1
19333: DIFF
19334: ST_TO_ADDR
// ruEscape := Replace ( ruEscape , 1 , ruEscape [ 1 ] + 1 ) ;
19335: LD_ADDR_EXP 15
19339: PUSH
19340: LD_EXP 15
19344: PPUSH
19345: LD_INT 1
19347: PPUSH
19348: LD_EXP 15
19352: PUSH
19353: LD_INT 1
19355: ARRAY
19356: PUSH
19357: LD_INT 1
19359: PLUS
19360: PPUSH
19361: CALL_OW 1
19365: ST_TO_ADDR
// end ; end ; MCE_UnitDestroyed ( un ) ;
19366: LD_VAR 0 1
19370: PPUSH
19371: CALL 89033 0 1
// end ;
19375: PPOPN 1
19377: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
19378: LD_VAR 0 1
19382: PPUSH
19383: LD_VAR 0 2
19387: PPUSH
19388: CALL 91012 0 2
// end ;
19392: PPOPN 2
19394: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
19395: LD_VAR 0 1
19399: PPUSH
19400: CALL 90080 0 1
// end ;
19404: PPOPN 1
19406: END
// on BuildingComplete ( building ) do begin MCE_BuildingComplete ( building ) ;
19407: LD_VAR 0 1
19411: PPUSH
19412: CALL 90321 0 1
// end ;
19416: PPOPN 1
19418: END
// on ResearchComplete ( tech , lab ) do begin if tech = tech_LasDouble and GetSide ( lab ) = 1 then
19419: LD_VAR 0 1
19423: PUSH
19424: LD_INT 14
19426: EQUAL
19427: PUSH
19428: LD_VAR 0 2
19432: PPUSH
19433: CALL_OW 255
19437: PUSH
19438: LD_INT 1
19440: EQUAL
19441: AND
19442: IFFALSE 19483
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Laser ) ;
19444: LD_EXP 9
19448: PPUSH
19449: LD_STRING D
19451: PUSH
19452: LD_STRING I
19454: PUSH
19455: LD_STRING J
19457: PUSH
19458: LD_STRING S
19460: PUSH
19461: EMPTY
19462: LIST
19463: LIST
19464: LIST
19465: PUSH
19466: LD_EXP 25
19470: ARRAY
19471: STR
19472: PUSH
19473: LD_STRING -1-Laser
19475: STR
19476: PPUSH
19477: CALL_OW 88
// exit ;
19481: GO 19625
// end ; if tech = tech_MatDet and GetSide ( lab ) = 1 then
19483: LD_VAR 0 1
19487: PUSH
19488: LD_INT 7
19490: EQUAL
19491: PUSH
19492: LD_VAR 0 2
19496: PPUSH
19497: CALL_OW 255
19501: PUSH
19502: LD_INT 1
19504: EQUAL
19505: AND
19506: IFFALSE 19547
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Materialization ) ;
19508: LD_EXP 9
19512: PPUSH
19513: LD_STRING D
19515: PUSH
19516: LD_STRING I
19518: PUSH
19519: LD_STRING J
19521: PUSH
19522: LD_STRING S
19524: PUSH
19525: EMPTY
19526: LIST
19527: LIST
19528: LIST
19529: PUSH
19530: LD_EXP 25
19534: ARRAY
19535: STR
19536: PUSH
19537: LD_STRING -1-Materialization
19539: STR
19540: PPUSH
19541: CALL_OW 88
// exit ;
19545: GO 19625
// end ; if tech = tech_SibFiss and GetSide ( lab ) = 1 then
19547: LD_VAR 0 1
19551: PUSH
19552: LD_INT 25
19554: EQUAL
19555: PUSH
19556: LD_VAR 0 2
19560: PPUSH
19561: CALL_OW 255
19565: PUSH
19566: LD_INT 1
19568: EQUAL
19569: AND
19570: IFFALSE 19611
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Rocket ) ;
19572: LD_EXP 9
19576: PPUSH
19577: LD_STRING D
19579: PUSH
19580: LD_STRING I
19582: PUSH
19583: LD_STRING J
19585: PUSH
19586: LD_STRING S
19588: PUSH
19589: EMPTY
19590: LIST
19591: LIST
19592: LIST
19593: PUSH
19594: LD_EXP 25
19598: ARRAY
19599: STR
19600: PUSH
19601: LD_STRING -1-Rocket
19603: STR
19604: PPUSH
19605: CALL_OW 88
// exit ;
19609: GO 19625
// end ; MCE_ResearchComplete ( tech , lab ) ;
19611: LD_VAR 0 1
19615: PPUSH
19616: LD_VAR 0 2
19620: PPUSH
19621: CALL 88729 0 2
// end ;
19625: PPOPN 2
19627: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
19628: LD_VAR 0 1
19632: PPUSH
19633: LD_VAR 0 2
19637: PPUSH
19638: LD_VAR 0 3
19642: PPUSH
19643: LD_VAR 0 4
19647: PPUSH
19648: LD_VAR 0 5
19652: PPUSH
19653: CALL 88349 0 5
// end ;
19657: PPOPN 5
19659: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
19660: LD_VAR 0 1
19664: PPUSH
19665: LD_VAR 0 2
19669: PPUSH
19670: CALL 87939 0 2
// end ;
19674: PPOPN 2
19676: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
19677: LD_VAR 0 1
19681: PPUSH
19682: LD_VAR 0 2
19686: PPUSH
19687: LD_VAR 0 3
19691: PPUSH
19692: LD_VAR 0 4
19696: PPUSH
19697: CALL 87777 0 4
// end ;
19701: PPOPN 4
19703: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
19704: LD_VAR 0 1
19708: PPUSH
19709: LD_VAR 0 2
19713: PPUSH
19714: LD_VAR 0 3
19718: PPUSH
19719: CALL 87552 0 3
// end ;
19723: PPOPN 3
19725: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
19726: LD_VAR 0 1
19730: PPUSH
19731: LD_VAR 0 2
19735: PPUSH
19736: CALL 87437 0 2
// end ;
19740: PPOPN 2
19742: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
19743: LD_VAR 0 1
19747: PPUSH
19748: LD_VAR 0 2
19752: PPUSH
19753: CALL 91273 0 2
// end ;
19757: PPOPN 2
19759: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
19760: LD_VAR 0 1
19764: PPUSH
19765: LD_VAR 0 2
19769: PPUSH
19770: LD_VAR 0 3
19774: PPUSH
19775: LD_VAR 0 4
19779: PPUSH
19780: CALL 91489 0 4
// end ;
19784: PPOPN 4
19786: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
19787: LD_VAR 0 1
19791: PPUSH
19792: LD_VAR 0 2
19796: PPUSH
19797: CALL 87246 0 2
// end ; end_of_file
19801: PPOPN 2
19803: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
19804: LD_INT 0
19806: PPUSH
19807: PPUSH
// if exist_mode then
19808: LD_VAR 0 2
19812: IFFALSE 19837
// unit := CreateCharacter ( prefix & ident ) else
19814: LD_ADDR_VAR 0 5
19818: PUSH
19819: LD_VAR 0 3
19823: PUSH
19824: LD_VAR 0 1
19828: STR
19829: PPUSH
19830: CALL_OW 34
19834: ST_TO_ADDR
19835: GO 19852
// unit := NewCharacter ( ident ) ;
19837: LD_ADDR_VAR 0 5
19841: PUSH
19842: LD_VAR 0 1
19846: PPUSH
19847: CALL_OW 25
19851: ST_TO_ADDR
// result := unit ;
19852: LD_ADDR_VAR 0 4
19856: PUSH
19857: LD_VAR 0 5
19861: ST_TO_ADDR
// end ;
19862: LD_VAR 0 4
19866: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
19867: LD_INT 0
19869: PPUSH
19870: PPUSH
// if not side or not nation then
19871: LD_VAR 0 1
19875: NOT
19876: PUSH
19877: LD_VAR 0 2
19881: NOT
19882: OR
19883: IFFALSE 19887
// exit ;
19885: GO 20523
// case nation of nation_american :
19887: LD_VAR 0 2
19891: PUSH
19892: LD_INT 1
19894: DOUBLE
19895: EQUAL
19896: IFTRUE 19900
19898: GO 20070
19900: POP
// result := [ 35 , 45 , 46 , 47 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 ] ; nation_arabian :
19901: LD_ADDR_VAR 0 4
19905: PUSH
19906: LD_INT 35
19908: PUSH
19909: LD_INT 45
19911: PUSH
19912: LD_INT 46
19914: PUSH
19915: LD_INT 47
19917: PUSH
19918: LD_INT 1
19920: PUSH
19921: LD_INT 2
19923: PUSH
19924: LD_INT 6
19926: PUSH
19927: LD_INT 15
19929: PUSH
19930: LD_INT 16
19932: PUSH
19933: LD_INT 7
19935: PUSH
19936: LD_INT 12
19938: PUSH
19939: LD_INT 13
19941: PUSH
19942: LD_INT 10
19944: PUSH
19945: LD_INT 14
19947: PUSH
19948: LD_INT 20
19950: PUSH
19951: LD_INT 21
19953: PUSH
19954: LD_INT 22
19956: PUSH
19957: LD_INT 25
19959: PUSH
19960: LD_INT 32
19962: PUSH
19963: LD_INT 27
19965: PUSH
19966: LD_INT 36
19968: PUSH
19969: LD_INT 69
19971: PUSH
19972: LD_INT 39
19974: PUSH
19975: LD_INT 34
19977: PUSH
19978: LD_INT 40
19980: PUSH
19981: LD_INT 48
19983: PUSH
19984: LD_INT 49
19986: PUSH
19987: LD_INT 50
19989: PUSH
19990: LD_INT 51
19992: PUSH
19993: LD_INT 52
19995: PUSH
19996: LD_INT 53
19998: PUSH
19999: LD_INT 54
20001: PUSH
20002: LD_INT 55
20004: PUSH
20005: LD_INT 56
20007: PUSH
20008: LD_INT 57
20010: PUSH
20011: LD_INT 58
20013: PUSH
20014: LD_INT 59
20016: PUSH
20017: LD_INT 60
20019: PUSH
20020: LD_INT 61
20022: PUSH
20023: LD_INT 62
20025: PUSH
20026: EMPTY
20027: LIST
20028: LIST
20029: LIST
20030: LIST
20031: LIST
20032: LIST
20033: LIST
20034: LIST
20035: LIST
20036: LIST
20037: LIST
20038: LIST
20039: LIST
20040: LIST
20041: LIST
20042: LIST
20043: LIST
20044: LIST
20045: LIST
20046: LIST
20047: LIST
20048: LIST
20049: LIST
20050: LIST
20051: LIST
20052: LIST
20053: LIST
20054: LIST
20055: LIST
20056: LIST
20057: LIST
20058: LIST
20059: LIST
20060: LIST
20061: LIST
20062: LIST
20063: LIST
20064: LIST
20065: LIST
20066: LIST
20067: ST_TO_ADDR
20068: GO 20447
20070: LD_INT 2
20072: DOUBLE
20073: EQUAL
20074: IFTRUE 20078
20076: GO 20256
20078: POP
// result := [ 35 , 45 , 46 , 47 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 ] ; nation_russian :
20079: LD_ADDR_VAR 0 4
20083: PUSH
20084: LD_INT 35
20086: PUSH
20087: LD_INT 45
20089: PUSH
20090: LD_INT 46
20092: PUSH
20093: LD_INT 47
20095: PUSH
20096: LD_INT 70
20098: PUSH
20099: LD_INT 1
20101: PUSH
20102: LD_INT 11
20104: PUSH
20105: LD_INT 3
20107: PUSH
20108: LD_INT 4
20110: PUSH
20111: LD_INT 5
20113: PUSH
20114: LD_INT 6
20116: PUSH
20117: LD_INT 15
20119: PUSH
20120: LD_INT 18
20122: PUSH
20123: LD_INT 7
20125: PUSH
20126: LD_INT 17
20128: PUSH
20129: LD_INT 8
20131: PUSH
20132: LD_INT 20
20134: PUSH
20135: LD_INT 21
20137: PUSH
20138: LD_INT 22
20140: PUSH
20141: LD_INT 72
20143: PUSH
20144: LD_INT 26
20146: PUSH
20147: LD_INT 69
20149: PUSH
20150: LD_INT 39
20152: PUSH
20153: LD_INT 40
20155: PUSH
20156: LD_INT 41
20158: PUSH
20159: LD_INT 42
20161: PUSH
20162: LD_INT 43
20164: PUSH
20165: LD_INT 48
20167: PUSH
20168: LD_INT 49
20170: PUSH
20171: LD_INT 50
20173: PUSH
20174: LD_INT 51
20176: PUSH
20177: LD_INT 52
20179: PUSH
20180: LD_INT 53
20182: PUSH
20183: LD_INT 54
20185: PUSH
20186: LD_INT 55
20188: PUSH
20189: LD_INT 56
20191: PUSH
20192: LD_INT 60
20194: PUSH
20195: LD_INT 61
20197: PUSH
20198: LD_INT 62
20200: PUSH
20201: LD_INT 66
20203: PUSH
20204: LD_INT 67
20206: PUSH
20207: LD_INT 68
20209: PUSH
20210: EMPTY
20211: LIST
20212: LIST
20213: LIST
20214: LIST
20215: LIST
20216: LIST
20217: LIST
20218: LIST
20219: LIST
20220: LIST
20221: LIST
20222: LIST
20223: LIST
20224: LIST
20225: LIST
20226: LIST
20227: LIST
20228: LIST
20229: LIST
20230: LIST
20231: LIST
20232: LIST
20233: LIST
20234: LIST
20235: LIST
20236: LIST
20237: LIST
20238: LIST
20239: LIST
20240: LIST
20241: LIST
20242: LIST
20243: LIST
20244: LIST
20245: LIST
20246: LIST
20247: LIST
20248: LIST
20249: LIST
20250: LIST
20251: LIST
20252: LIST
20253: ST_TO_ADDR
20254: GO 20447
20256: LD_INT 3
20258: DOUBLE
20259: EQUAL
20260: IFTRUE 20264
20262: GO 20446
20264: POP
// result := [ 46 , 47 , 1 , 2 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 ] ; end ;
20265: LD_ADDR_VAR 0 4
20269: PUSH
20270: LD_INT 46
20272: PUSH
20273: LD_INT 47
20275: PUSH
20276: LD_INT 1
20278: PUSH
20279: LD_INT 2
20281: PUSH
20282: LD_INT 11
20284: PUSH
20285: LD_INT 9
20287: PUSH
20288: LD_INT 20
20290: PUSH
20291: LD_INT 19
20293: PUSH
20294: LD_INT 21
20296: PUSH
20297: LD_INT 24
20299: PUSH
20300: LD_INT 22
20302: PUSH
20303: LD_INT 25
20305: PUSH
20306: LD_INT 28
20308: PUSH
20309: LD_INT 29
20311: PUSH
20312: LD_INT 30
20314: PUSH
20315: LD_INT 31
20317: PUSH
20318: LD_INT 37
20320: PUSH
20321: LD_INT 38
20323: PUSH
20324: LD_INT 32
20326: PUSH
20327: LD_INT 27
20329: PUSH
20330: LD_INT 33
20332: PUSH
20333: LD_INT 69
20335: PUSH
20336: LD_INT 39
20338: PUSH
20339: LD_INT 34
20341: PUSH
20342: LD_INT 40
20344: PUSH
20345: LD_INT 71
20347: PUSH
20348: LD_INT 23
20350: PUSH
20351: LD_INT 44
20353: PUSH
20354: LD_INT 48
20356: PUSH
20357: LD_INT 49
20359: PUSH
20360: LD_INT 50
20362: PUSH
20363: LD_INT 51
20365: PUSH
20366: LD_INT 52
20368: PUSH
20369: LD_INT 53
20371: PUSH
20372: LD_INT 54
20374: PUSH
20375: LD_INT 55
20377: PUSH
20378: LD_INT 56
20380: PUSH
20381: LD_INT 57
20383: PUSH
20384: LD_INT 58
20386: PUSH
20387: LD_INT 59
20389: PUSH
20390: LD_INT 63
20392: PUSH
20393: LD_INT 64
20395: PUSH
20396: LD_INT 65
20398: PUSH
20399: EMPTY
20400: LIST
20401: LIST
20402: LIST
20403: LIST
20404: LIST
20405: LIST
20406: LIST
20407: LIST
20408: LIST
20409: LIST
20410: LIST
20411: LIST
20412: LIST
20413: LIST
20414: LIST
20415: LIST
20416: LIST
20417: LIST
20418: LIST
20419: LIST
20420: LIST
20421: LIST
20422: LIST
20423: LIST
20424: LIST
20425: LIST
20426: LIST
20427: LIST
20428: LIST
20429: LIST
20430: LIST
20431: LIST
20432: LIST
20433: LIST
20434: LIST
20435: LIST
20436: LIST
20437: LIST
20438: LIST
20439: LIST
20440: LIST
20441: LIST
20442: LIST
20443: ST_TO_ADDR
20444: GO 20447
20446: POP
// if state > - 1 and state < 3 then
20447: LD_VAR 0 3
20451: PUSH
20452: LD_INT 1
20454: NEG
20455: GREATER
20456: PUSH
20457: LD_VAR 0 3
20461: PUSH
20462: LD_INT 3
20464: LESS
20465: AND
20466: IFFALSE 20523
// for i in result do
20468: LD_ADDR_VAR 0 5
20472: PUSH
20473: LD_VAR 0 4
20477: PUSH
20478: FOR_IN
20479: IFFALSE 20521
// if GetTech ( i , side ) <> state then
20481: LD_VAR 0 5
20485: PPUSH
20486: LD_VAR 0 1
20490: PPUSH
20491: CALL_OW 321
20495: PUSH
20496: LD_VAR 0 3
20500: NONEQUAL
20501: IFFALSE 20519
// result := result diff i ;
20503: LD_ADDR_VAR 0 4
20507: PUSH
20508: LD_VAR 0 4
20512: PUSH
20513: LD_VAR 0 5
20517: DIFF
20518: ST_TO_ADDR
20519: GO 20478
20521: POP
20522: POP
// end ;
20523: LD_VAR 0 4
20527: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
20528: LD_INT 0
20530: PPUSH
20531: PPUSH
20532: PPUSH
// result := true ;
20533: LD_ADDR_VAR 0 3
20537: PUSH
20538: LD_INT 1
20540: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
20541: LD_ADDR_VAR 0 5
20545: PUSH
20546: LD_VAR 0 2
20550: PPUSH
20551: CALL_OW 480
20555: ST_TO_ADDR
// if not tmp then
20556: LD_VAR 0 5
20560: NOT
20561: IFFALSE 20565
// exit ;
20563: GO 20614
// for i in tmp do
20565: LD_ADDR_VAR 0 4
20569: PUSH
20570: LD_VAR 0 5
20574: PUSH
20575: FOR_IN
20576: IFFALSE 20612
// if GetTech ( i , side ) <> state_researched then
20578: LD_VAR 0 4
20582: PPUSH
20583: LD_VAR 0 1
20587: PPUSH
20588: CALL_OW 321
20592: PUSH
20593: LD_INT 2
20595: NONEQUAL
20596: IFFALSE 20610
// begin result := false ;
20598: LD_ADDR_VAR 0 3
20602: PUSH
20603: LD_INT 0
20605: ST_TO_ADDR
// exit ;
20606: POP
20607: POP
20608: GO 20614
// end ;
20610: GO 20575
20612: POP
20613: POP
// end ;
20614: LD_VAR 0 3
20618: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
20619: LD_INT 0
20621: PPUSH
20622: PPUSH
20623: PPUSH
20624: PPUSH
20625: PPUSH
20626: PPUSH
20627: PPUSH
20628: PPUSH
20629: PPUSH
20630: PPUSH
20631: PPUSH
20632: PPUSH
20633: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
20634: LD_VAR 0 1
20638: NOT
20639: PUSH
20640: LD_VAR 0 1
20644: PPUSH
20645: CALL_OW 257
20649: PUSH
20650: LD_INT 9
20652: NONEQUAL
20653: OR
20654: IFFALSE 20658
// exit ;
20656: GO 21231
// side := GetSide ( unit ) ;
20658: LD_ADDR_VAR 0 9
20662: PUSH
20663: LD_VAR 0 1
20667: PPUSH
20668: CALL_OW 255
20672: ST_TO_ADDR
// tech_space := tech_spacanom ;
20673: LD_ADDR_VAR 0 12
20677: PUSH
20678: LD_INT 29
20680: ST_TO_ADDR
// tech_time := tech_taurad ;
20681: LD_ADDR_VAR 0 13
20685: PUSH
20686: LD_INT 28
20688: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
20689: LD_ADDR_VAR 0 11
20693: PUSH
20694: LD_VAR 0 1
20698: PPUSH
20699: CALL_OW 310
20703: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
20704: LD_VAR 0 11
20708: PPUSH
20709: CALL_OW 247
20713: PUSH
20714: LD_INT 2
20716: EQUAL
20717: IFFALSE 20721
// exit ;
20719: GO 21231
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
20721: LD_ADDR_VAR 0 8
20725: PUSH
20726: LD_INT 81
20728: PUSH
20729: LD_VAR 0 9
20733: PUSH
20734: EMPTY
20735: LIST
20736: LIST
20737: PUSH
20738: LD_INT 3
20740: PUSH
20741: LD_INT 21
20743: PUSH
20744: LD_INT 3
20746: PUSH
20747: EMPTY
20748: LIST
20749: LIST
20750: PUSH
20751: EMPTY
20752: LIST
20753: LIST
20754: PUSH
20755: EMPTY
20756: LIST
20757: LIST
20758: PPUSH
20759: CALL_OW 69
20763: ST_TO_ADDR
// if not tmp then
20764: LD_VAR 0 8
20768: NOT
20769: IFFALSE 20773
// exit ;
20771: GO 21231
// if in_unit then
20773: LD_VAR 0 11
20777: IFFALSE 20801
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
20779: LD_ADDR_VAR 0 10
20783: PUSH
20784: LD_VAR 0 8
20788: PPUSH
20789: LD_VAR 0 11
20793: PPUSH
20794: CALL_OW 74
20798: ST_TO_ADDR
20799: GO 20821
// enemy := NearestUnitToUnit ( tmp , unit ) ;
20801: LD_ADDR_VAR 0 10
20805: PUSH
20806: LD_VAR 0 8
20810: PPUSH
20811: LD_VAR 0 1
20815: PPUSH
20816: CALL_OW 74
20820: ST_TO_ADDR
// if not enemy then
20821: LD_VAR 0 10
20825: NOT
20826: IFFALSE 20830
// exit ;
20828: GO 21231
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
20830: LD_VAR 0 11
20834: PUSH
20835: LD_VAR 0 11
20839: PPUSH
20840: LD_VAR 0 10
20844: PPUSH
20845: CALL_OW 296
20849: PUSH
20850: LD_INT 13
20852: GREATER
20853: AND
20854: PUSH
20855: LD_VAR 0 1
20859: PPUSH
20860: LD_VAR 0 10
20864: PPUSH
20865: CALL_OW 296
20869: PUSH
20870: LD_INT 12
20872: GREATER
20873: OR
20874: IFFALSE 20878
// exit ;
20876: GO 21231
// missile := [ 1 ] ;
20878: LD_ADDR_VAR 0 14
20882: PUSH
20883: LD_INT 1
20885: PUSH
20886: EMPTY
20887: LIST
20888: ST_TO_ADDR
// if Researched ( side , tech_space ) then
20889: LD_VAR 0 9
20893: PPUSH
20894: LD_VAR 0 12
20898: PPUSH
20899: CALL_OW 325
20903: IFFALSE 20932
// missile := Insert ( missile , missile + 1 , 2 ) ;
20905: LD_ADDR_VAR 0 14
20909: PUSH
20910: LD_VAR 0 14
20914: PPUSH
20915: LD_VAR 0 14
20919: PUSH
20920: LD_INT 1
20922: PLUS
20923: PPUSH
20924: LD_INT 2
20926: PPUSH
20927: CALL_OW 2
20931: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
20932: LD_VAR 0 9
20936: PPUSH
20937: LD_VAR 0 13
20941: PPUSH
20942: CALL_OW 325
20946: PUSH
20947: LD_VAR 0 10
20951: PPUSH
20952: CALL_OW 255
20956: PPUSH
20957: LD_VAR 0 13
20961: PPUSH
20962: CALL_OW 325
20966: NOT
20967: AND
20968: IFFALSE 20997
// missile := Insert ( missile , missile + 1 , 3 ) ;
20970: LD_ADDR_VAR 0 14
20974: PUSH
20975: LD_VAR 0 14
20979: PPUSH
20980: LD_VAR 0 14
20984: PUSH
20985: LD_INT 1
20987: PLUS
20988: PPUSH
20989: LD_INT 3
20991: PPUSH
20992: CALL_OW 2
20996: ST_TO_ADDR
// if missile < 2 then
20997: LD_VAR 0 14
21001: PUSH
21002: LD_INT 2
21004: LESS
21005: IFFALSE 21009
// exit ;
21007: GO 21231
// x := GetX ( enemy ) ;
21009: LD_ADDR_VAR 0 4
21013: PUSH
21014: LD_VAR 0 10
21018: PPUSH
21019: CALL_OW 250
21023: ST_TO_ADDR
// y := GetY ( enemy ) ;
21024: LD_ADDR_VAR 0 5
21028: PUSH
21029: LD_VAR 0 10
21033: PPUSH
21034: CALL_OW 251
21038: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
21039: LD_ADDR_VAR 0 6
21043: PUSH
21044: LD_VAR 0 4
21048: PUSH
21049: LD_INT 1
21051: NEG
21052: PPUSH
21053: LD_INT 1
21055: PPUSH
21056: CALL_OW 12
21060: PLUS
21061: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
21062: LD_ADDR_VAR 0 7
21066: PUSH
21067: LD_VAR 0 5
21071: PUSH
21072: LD_INT 1
21074: NEG
21075: PPUSH
21076: LD_INT 1
21078: PPUSH
21079: CALL_OW 12
21083: PLUS
21084: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21085: LD_VAR 0 6
21089: PPUSH
21090: LD_VAR 0 7
21094: PPUSH
21095: CALL_OW 488
21099: NOT
21100: IFFALSE 21122
// begin _x := x ;
21102: LD_ADDR_VAR 0 6
21106: PUSH
21107: LD_VAR 0 4
21111: ST_TO_ADDR
// _y := y ;
21112: LD_ADDR_VAR 0 7
21116: PUSH
21117: LD_VAR 0 5
21121: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
21122: LD_ADDR_VAR 0 3
21126: PUSH
21127: LD_INT 1
21129: PPUSH
21130: LD_VAR 0 14
21134: PPUSH
21135: CALL_OW 12
21139: ST_TO_ADDR
// case i of 1 :
21140: LD_VAR 0 3
21144: PUSH
21145: LD_INT 1
21147: DOUBLE
21148: EQUAL
21149: IFTRUE 21153
21151: GO 21170
21153: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
21154: LD_VAR 0 1
21158: PPUSH
21159: LD_VAR 0 10
21163: PPUSH
21164: CALL_OW 115
21168: GO 21231
21170: LD_INT 2
21172: DOUBLE
21173: EQUAL
21174: IFTRUE 21178
21176: GO 21200
21178: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
21179: LD_VAR 0 1
21183: PPUSH
21184: LD_VAR 0 6
21188: PPUSH
21189: LD_VAR 0 7
21193: PPUSH
21194: CALL_OW 153
21198: GO 21231
21200: LD_INT 3
21202: DOUBLE
21203: EQUAL
21204: IFTRUE 21208
21206: GO 21230
21208: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
21209: LD_VAR 0 1
21213: PPUSH
21214: LD_VAR 0 6
21218: PPUSH
21219: LD_VAR 0 7
21223: PPUSH
21224: CALL_OW 154
21228: GO 21231
21230: POP
// end ;
21231: LD_VAR 0 2
21235: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
21236: LD_INT 0
21238: PPUSH
21239: PPUSH
21240: PPUSH
21241: PPUSH
21242: PPUSH
21243: PPUSH
// if not unit or not building then
21244: LD_VAR 0 1
21248: NOT
21249: PUSH
21250: LD_VAR 0 2
21254: NOT
21255: OR
21256: IFFALSE 21260
// exit ;
21258: GO 21418
// x := GetX ( building ) ;
21260: LD_ADDR_VAR 0 5
21264: PUSH
21265: LD_VAR 0 2
21269: PPUSH
21270: CALL_OW 250
21274: ST_TO_ADDR
// y := GetY ( building ) ;
21275: LD_ADDR_VAR 0 6
21279: PUSH
21280: LD_VAR 0 2
21284: PPUSH
21285: CALL_OW 251
21289: ST_TO_ADDR
// for i = 0 to 5 do
21290: LD_ADDR_VAR 0 4
21294: PUSH
21295: DOUBLE
21296: LD_INT 0
21298: DEC
21299: ST_TO_ADDR
21300: LD_INT 5
21302: PUSH
21303: FOR_TO
21304: IFFALSE 21416
// begin _x := ShiftX ( x , i , 3 ) ;
21306: LD_ADDR_VAR 0 7
21310: PUSH
21311: LD_VAR 0 5
21315: PPUSH
21316: LD_VAR 0 4
21320: PPUSH
21321: LD_INT 3
21323: PPUSH
21324: CALL_OW 272
21328: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
21329: LD_ADDR_VAR 0 8
21333: PUSH
21334: LD_VAR 0 6
21338: PPUSH
21339: LD_VAR 0 4
21343: PPUSH
21344: LD_INT 3
21346: PPUSH
21347: CALL_OW 273
21351: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21352: LD_VAR 0 7
21356: PPUSH
21357: LD_VAR 0 8
21361: PPUSH
21362: CALL_OW 488
21366: NOT
21367: IFFALSE 21371
// continue ;
21369: GO 21303
// if HexInfo ( _x , _y ) = 0 then
21371: LD_VAR 0 7
21375: PPUSH
21376: LD_VAR 0 8
21380: PPUSH
21381: CALL_OW 428
21385: PUSH
21386: LD_INT 0
21388: EQUAL
21389: IFFALSE 21414
// begin ComMoveXY ( unit , _x , _y ) ;
21391: LD_VAR 0 1
21395: PPUSH
21396: LD_VAR 0 7
21400: PPUSH
21401: LD_VAR 0 8
21405: PPUSH
21406: CALL_OW 111
// exit ;
21410: POP
21411: POP
21412: GO 21418
// end ; end ;
21414: GO 21303
21416: POP
21417: POP
// end ;
21418: LD_VAR 0 3
21422: RET
// export function ScanBase ( side , base_area ) ; begin
21423: LD_INT 0
21425: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
21426: LD_ADDR_VAR 0 3
21430: PUSH
21431: LD_VAR 0 2
21435: PPUSH
21436: LD_INT 81
21438: PUSH
21439: LD_VAR 0 1
21443: PUSH
21444: EMPTY
21445: LIST
21446: LIST
21447: PPUSH
21448: CALL_OW 70
21452: ST_TO_ADDR
// end ;
21453: LD_VAR 0 3
21457: RET
// export function BasicDefend ( base , solds , area ) ; var enemy , side , i , hex ; begin
21458: LD_INT 0
21460: PPUSH
21461: PPUSH
21462: PPUSH
21463: PPUSH
21464: PPUSH
// if not base or not mc_bases [ base ] or not solds or not area then
21465: LD_VAR 0 1
21469: NOT
21470: PUSH
21471: LD_EXP 36
21475: PUSH
21476: LD_VAR 0 1
21480: ARRAY
21481: NOT
21482: OR
21483: PUSH
21484: LD_VAR 0 2
21488: NOT
21489: OR
21490: PUSH
21491: LD_VAR 0 3
21495: NOT
21496: OR
21497: IFFALSE 21501
// exit ;
21499: GO 21951
// side := mc_sides [ base ] ;
21501: LD_ADDR_VAR 0 6
21505: PUSH
21506: LD_EXP 62
21510: PUSH
21511: LD_VAR 0 1
21515: ARRAY
21516: ST_TO_ADDR
// if not side then
21517: LD_VAR 0 6
21521: NOT
21522: IFFALSE 21526
// exit ;
21524: GO 21951
// for i in solds do
21526: LD_ADDR_VAR 0 7
21530: PUSH
21531: LD_VAR 0 2
21535: PUSH
21536: FOR_IN
21537: IFFALSE 21598
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
21539: LD_VAR 0 7
21543: PPUSH
21544: CALL_OW 310
21548: PPUSH
21549: CALL_OW 266
21553: PUSH
21554: LD_INT 32
21556: PUSH
21557: LD_INT 31
21559: PUSH
21560: EMPTY
21561: LIST
21562: LIST
21563: IN
21564: IFFALSE 21584
// solds := solds diff i else
21566: LD_ADDR_VAR 0 2
21570: PUSH
21571: LD_VAR 0 2
21575: PUSH
21576: LD_VAR 0 7
21580: DIFF
21581: ST_TO_ADDR
21582: GO 21596
// SetTag ( i , 18 ) ;
21584: LD_VAR 0 7
21588: PPUSH
21589: LD_INT 18
21591: PPUSH
21592: CALL_OW 109
21596: GO 21536
21598: POP
21599: POP
// if not solds then
21600: LD_VAR 0 2
21604: NOT
21605: IFFALSE 21609
// exit ;
21607: GO 21951
// repeat wait ( 0 0$1 ) ;
21609: LD_INT 35
21611: PPUSH
21612: CALL_OW 67
// enemy := ScanBase ( side , area ) ;
21616: LD_ADDR_VAR 0 5
21620: PUSH
21621: LD_VAR 0 6
21625: PPUSH
21626: LD_VAR 0 3
21630: PPUSH
21631: CALL 21423 0 2
21635: ST_TO_ADDR
// if not enemy or enemy > 3 or mc_defender [ base ] then
21636: LD_VAR 0 5
21640: NOT
21641: PUSH
21642: LD_VAR 0 5
21646: PUSH
21647: LD_INT 3
21649: GREATER
21650: OR
21651: PUSH
21652: LD_EXP 58
21656: PUSH
21657: LD_VAR 0 1
21661: ARRAY
21662: OR
21663: IFFALSE 21704
// begin for i in solds do
21665: LD_ADDR_VAR 0 7
21669: PUSH
21670: LD_VAR 0 2
21674: PUSH
21675: FOR_IN
21676: IFFALSE 21700
// if HasTask ( i ) then
21678: LD_VAR 0 7
21682: PPUSH
21683: CALL_OW 314
21687: IFFALSE 21698
// ComStop ( i ) ;
21689: LD_VAR 0 7
21693: PPUSH
21694: CALL_OW 141
21698: GO 21675
21700: POP
21701: POP
// break ;
21702: GO 21939
// end ; for i in solds do
21704: LD_ADDR_VAR 0 7
21708: PUSH
21709: LD_VAR 0 2
21713: PUSH
21714: FOR_IN
21715: IFFALSE 21931
// begin if IsInUnit ( i ) then
21717: LD_VAR 0 7
21721: PPUSH
21722: CALL_OW 310
21726: IFFALSE 21737
// ComExitBuilding ( i ) ;
21728: LD_VAR 0 7
21732: PPUSH
21733: CALL_OW 122
// if GetLives ( i ) > 333 then
21737: LD_VAR 0 7
21741: PPUSH
21742: CALL_OW 256
21746: PUSH
21747: LD_INT 333
21749: GREATER
21750: IFFALSE 21778
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
21752: LD_VAR 0 7
21756: PPUSH
21757: LD_VAR 0 5
21761: PPUSH
21762: LD_VAR 0 7
21766: PPUSH
21767: CALL_OW 74
21771: PPUSH
21772: CALL_OW 115
21776: GO 21929
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
21778: LD_ADDR_VAR 0 8
21782: PUSH
21783: LD_EXP 36
21787: PUSH
21788: LD_VAR 0 1
21792: ARRAY
21793: PPUSH
21794: LD_INT 2
21796: PUSH
21797: LD_INT 30
21799: PUSH
21800: LD_INT 0
21802: PUSH
21803: EMPTY
21804: LIST
21805: LIST
21806: PUSH
21807: LD_INT 30
21809: PUSH
21810: LD_INT 1
21812: PUSH
21813: EMPTY
21814: LIST
21815: LIST
21816: PUSH
21817: LD_INT 30
21819: PUSH
21820: LD_INT 6
21822: PUSH
21823: EMPTY
21824: LIST
21825: LIST
21826: PUSH
21827: EMPTY
21828: LIST
21829: LIST
21830: LIST
21831: LIST
21832: PPUSH
21833: CALL_OW 72
21837: PPUSH
21838: LD_VAR 0 7
21842: PPUSH
21843: CALL_OW 74
21847: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
21848: LD_VAR 0 7
21852: PPUSH
21853: LD_VAR 0 8
21857: PPUSH
21858: CALL_OW 250
21862: PPUSH
21863: LD_INT 3
21865: PPUSH
21866: LD_INT 5
21868: PPUSH
21869: CALL_OW 272
21873: PPUSH
21874: LD_VAR 0 8
21878: PPUSH
21879: CALL_OW 251
21883: PPUSH
21884: LD_INT 3
21886: PPUSH
21887: LD_INT 5
21889: PPUSH
21890: CALL_OW 273
21894: PPUSH
21895: CALL_OW 111
// SetTag ( i , 0 ) ;
21899: LD_VAR 0 7
21903: PPUSH
21904: LD_INT 0
21906: PPUSH
21907: CALL_OW 109
// solds := solds diff i ;
21911: LD_ADDR_VAR 0 2
21915: PUSH
21916: LD_VAR 0 2
21920: PUSH
21921: LD_VAR 0 7
21925: DIFF
21926: ST_TO_ADDR
// continue ;
21927: GO 21714
// end ; end ;
21929: GO 21714
21931: POP
21932: POP
// until solds ;
21933: LD_VAR 0 2
21937: IFFALSE 21609
// MC_Reset ( base , 18 ) ;
21939: LD_VAR 0 1
21943: PPUSH
21944: LD_INT 18
21946: PPUSH
21947: CALL 66497 0 2
// end ;
21951: LD_VAR 0 4
21955: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
21956: LD_INT 0
21958: PPUSH
21959: PPUSH
21960: PPUSH
21961: PPUSH
21962: PPUSH
21963: PPUSH
21964: PPUSH
21965: PPUSH
21966: PPUSH
21967: PPUSH
21968: PPUSH
21969: PPUSH
21970: PPUSH
21971: PPUSH
21972: PPUSH
21973: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
21974: LD_ADDR_VAR 0 12
21978: PUSH
21979: LD_EXP 36
21983: PUSH
21984: LD_VAR 0 1
21988: ARRAY
21989: PPUSH
21990: LD_INT 25
21992: PUSH
21993: LD_INT 3
21995: PUSH
21996: EMPTY
21997: LIST
21998: LIST
21999: PPUSH
22000: CALL_OW 72
22004: ST_TO_ADDR
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
22005: LD_ADDR_VAR 0 8
22009: PUSH
22010: LD_EXP 36
22014: PUSH
22015: LD_VAR 0 1
22019: ARRAY
22020: PPUSH
22021: LD_INT 2
22023: PUSH
22024: LD_INT 25
22026: PUSH
22027: LD_INT 1
22029: PUSH
22030: EMPTY
22031: LIST
22032: LIST
22033: PUSH
22034: LD_INT 25
22036: PUSH
22037: LD_INT 5
22039: PUSH
22040: EMPTY
22041: LIST
22042: LIST
22043: PUSH
22044: LD_INT 25
22046: PUSH
22047: LD_INT 8
22049: PUSH
22050: EMPTY
22051: LIST
22052: LIST
22053: PUSH
22054: LD_INT 25
22056: PUSH
22057: LD_INT 9
22059: PUSH
22060: EMPTY
22061: LIST
22062: LIST
22063: PUSH
22064: EMPTY
22065: LIST
22066: LIST
22067: LIST
22068: LIST
22069: LIST
22070: PPUSH
22071: CALL_OW 72
22075: ST_TO_ADDR
// if not defenders and not solds then
22076: LD_VAR 0 2
22080: NOT
22081: PUSH
22082: LD_VAR 0 8
22086: NOT
22087: AND
22088: IFFALSE 22092
// exit ;
22090: GO 23458
// depot_under_attack := false ;
22092: LD_ADDR_VAR 0 16
22096: PUSH
22097: LD_INT 0
22099: ST_TO_ADDR
// sold_defenders := [ ] ;
22100: LD_ADDR_VAR 0 17
22104: PUSH
22105: EMPTY
22106: ST_TO_ADDR
// if mechs then
22107: LD_VAR 0 12
22111: IFFALSE 22240
// for i in defenders do
22113: LD_ADDR_VAR 0 5
22117: PUSH
22118: LD_VAR 0 2
22122: PUSH
22123: FOR_IN
22124: IFFALSE 22238
// begin SetTag ( i , 20 ) ;
22126: LD_VAR 0 5
22130: PPUSH
22131: LD_INT 20
22133: PPUSH
22134: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
22138: LD_VAR 0 5
22142: PPUSH
22143: CALL_OW 263
22147: PUSH
22148: LD_INT 1
22150: EQUAL
22151: PUSH
22152: LD_VAR 0 5
22156: PPUSH
22157: CALL_OW 311
22161: NOT
22162: AND
22163: PUSH
22164: LD_VAR 0 12
22168: AND
22169: IFFALSE 22236
// begin un := mechs [ 1 ] ;
22171: LD_ADDR_VAR 0 10
22175: PUSH
22176: LD_VAR 0 12
22180: PUSH
22181: LD_INT 1
22183: ARRAY
22184: ST_TO_ADDR
// ComExitBuilding ( un ) ;
22185: LD_VAR 0 10
22189: PPUSH
22190: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
22194: LD_VAR 0 10
22198: PPUSH
22199: LD_VAR 0 5
22203: PPUSH
22204: CALL_OW 180
// SetTag ( un , 19 ) ;
22208: LD_VAR 0 10
22212: PPUSH
22213: LD_INT 19
22215: PPUSH
22216: CALL_OW 109
// mechs := mechs diff un ;
22220: LD_ADDR_VAR 0 12
22224: PUSH
22225: LD_VAR 0 12
22229: PUSH
22230: LD_VAR 0 10
22234: DIFF
22235: ST_TO_ADDR
// end ; end ;
22236: GO 22123
22238: POP
22239: POP
// if solds then
22240: LD_VAR 0 8
22244: IFFALSE 22303
// for i in solds do
22246: LD_ADDR_VAR 0 5
22250: PUSH
22251: LD_VAR 0 8
22255: PUSH
22256: FOR_IN
22257: IFFALSE 22301
// if not GetTag ( i ) then
22259: LD_VAR 0 5
22263: PPUSH
22264: CALL_OW 110
22268: NOT
22269: IFFALSE 22299
// begin defenders := defenders union i ;
22271: LD_ADDR_VAR 0 2
22275: PUSH
22276: LD_VAR 0 2
22280: PUSH
22281: LD_VAR 0 5
22285: UNION
22286: ST_TO_ADDR
// SetTag ( i , 18 ) ;
22287: LD_VAR 0 5
22291: PPUSH
22292: LD_INT 18
22294: PPUSH
22295: CALL_OW 109
// end ;
22299: GO 22256
22301: POP
22302: POP
// repeat wait ( 0 0$1 ) ;
22303: LD_INT 35
22305: PPUSH
22306: CALL_OW 67
// enemy := mc_scan [ base ] ;
22310: LD_ADDR_VAR 0 3
22314: PUSH
22315: LD_EXP 59
22319: PUSH
22320: LD_VAR 0 1
22324: ARRAY
22325: ST_TO_ADDR
// for i in defenders do
22326: LD_ADDR_VAR 0 5
22330: PUSH
22331: LD_VAR 0 2
22335: PUSH
22336: FOR_IN
22337: IFFALSE 23022
// begin e := NearestUnitToUnit ( enemy , i ) ;
22339: LD_ADDR_VAR 0 13
22343: PUSH
22344: LD_VAR 0 3
22348: PPUSH
22349: LD_VAR 0 5
22353: PPUSH
22354: CALL_OW 74
22358: ST_TO_ADDR
// depot_under_attack := ( not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) or GetLives ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ) < 600 ) ;
22359: LD_ADDR_VAR 0 16
22363: PUSH
22364: LD_EXP 36
22368: PUSH
22369: LD_VAR 0 1
22373: ARRAY
22374: PPUSH
22375: LD_INT 2
22377: PUSH
22378: LD_INT 30
22380: PUSH
22381: LD_INT 0
22383: PUSH
22384: EMPTY
22385: LIST
22386: LIST
22387: PUSH
22388: LD_INT 30
22390: PUSH
22391: LD_INT 1
22393: PUSH
22394: EMPTY
22395: LIST
22396: LIST
22397: PUSH
22398: EMPTY
22399: LIST
22400: LIST
22401: LIST
22402: PPUSH
22403: CALL_OW 72
22407: NOT
22408: PUSH
22409: LD_EXP 36
22413: PUSH
22414: LD_VAR 0 1
22418: ARRAY
22419: PPUSH
22420: LD_INT 2
22422: PUSH
22423: LD_INT 30
22425: PUSH
22426: LD_INT 0
22428: PUSH
22429: EMPTY
22430: LIST
22431: LIST
22432: PUSH
22433: LD_INT 30
22435: PUSH
22436: LD_INT 1
22438: PUSH
22439: EMPTY
22440: LIST
22441: LIST
22442: PUSH
22443: EMPTY
22444: LIST
22445: LIST
22446: LIST
22447: PPUSH
22448: CALL_OW 72
22452: PPUSH
22453: CALL_OW 256
22457: PUSH
22458: LD_INT 600
22460: LESS
22461: OR
22462: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
22463: LD_VAR 0 5
22467: PPUSH
22468: CALL_OW 247
22472: PUSH
22473: LD_INT 2
22475: DOUBLE
22476: EQUAL
22477: IFTRUE 22481
22479: GO 22728
22481: POP
// begin if GetLives ( i ) > 650 and GetDistUnits ( i , e ) < 40 then
22482: LD_VAR 0 5
22486: PPUSH
22487: CALL_OW 256
22491: PUSH
22492: LD_INT 650
22494: GREATER
22495: PUSH
22496: LD_VAR 0 5
22500: PPUSH
22501: LD_VAR 0 13
22505: PPUSH
22506: CALL_OW 296
22510: PUSH
22511: LD_INT 40
22513: LESS
22514: AND
22515: IFFALSE 22533
// ComAttackUnit ( i , e ) else
22517: LD_VAR 0 5
22521: PPUSH
22522: LD_VAR 0 13
22526: PPUSH
22527: CALL_OW 115
22531: GO 22611
// if ( GetDistUnits ( i , e ) >= 30 or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
22533: LD_VAR 0 5
22537: PPUSH
22538: LD_VAR 0 13
22542: PPUSH
22543: CALL_OW 296
22547: PUSH
22548: LD_INT 30
22550: GREATEREQUAL
22551: PUSH
22552: LD_VAR 0 5
22556: PPUSH
22557: CALL_OW 256
22561: PUSH
22562: LD_INT 650
22564: LESSEQUAL
22565: OR
22566: PUSH
22567: LD_VAR 0 5
22571: PPUSH
22572: LD_EXP 60
22576: PUSH
22577: LD_VAR 0 1
22581: ARRAY
22582: PPUSH
22583: CALL_OW 308
22587: NOT
22588: AND
22589: IFFALSE 22611
// ComMoveToArea ( i , mc_parking [ base ] ) ;
22591: LD_VAR 0 5
22595: PPUSH
22596: LD_EXP 60
22600: PUSH
22601: LD_VAR 0 1
22605: ARRAY
22606: PPUSH
22607: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
22611: LD_VAR 0 5
22615: PPUSH
22616: CALL_OW 256
22620: PUSH
22621: LD_INT 998
22623: LESS
22624: PUSH
22625: LD_VAR 0 5
22629: PPUSH
22630: CALL_OW 263
22634: PUSH
22635: LD_INT 1
22637: EQUAL
22638: AND
22639: PUSH
22640: LD_VAR 0 5
22644: PPUSH
22645: CALL_OW 311
22649: AND
22650: PUSH
22651: LD_VAR 0 5
22655: PPUSH
22656: LD_EXP 60
22660: PUSH
22661: LD_VAR 0 1
22665: ARRAY
22666: PPUSH
22667: CALL_OW 308
22671: AND
22672: IFFALSE 22726
// begin mech := IsDrivenBy ( i ) ;
22674: LD_ADDR_VAR 0 9
22678: PUSH
22679: LD_VAR 0 5
22683: PPUSH
22684: CALL_OW 311
22688: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
22689: LD_VAR 0 9
22693: PPUSH
22694: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
22698: LD_VAR 0 9
22702: PPUSH
22703: LD_VAR 0 5
22707: PPUSH
22708: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
22712: LD_VAR 0 9
22716: PPUSH
22717: LD_VAR 0 5
22721: PPUSH
22722: CALL_OW 180
// end ; end ; unit_human :
22726: GO 22993
22728: LD_INT 1
22730: DOUBLE
22731: EQUAL
22732: IFTRUE 22736
22734: GO 22992
22736: POP
// begin b := IsInUnit ( i ) ;
22737: LD_ADDR_VAR 0 18
22741: PUSH
22742: LD_VAR 0 5
22746: PPUSH
22747: CALL_OW 310
22751: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
22752: LD_ADDR_VAR 0 19
22756: PUSH
22757: LD_VAR 0 18
22761: NOT
22762: PUSH
22763: LD_VAR 0 18
22767: PPUSH
22768: CALL_OW 266
22772: PUSH
22773: LD_INT 32
22775: PUSH
22776: LD_INT 31
22778: PUSH
22779: EMPTY
22780: LIST
22781: LIST
22782: IN
22783: OR
22784: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
22785: LD_VAR 0 16
22789: PUSH
22790: LD_VAR 0 2
22794: PPUSH
22795: LD_INT 21
22797: PUSH
22798: LD_INT 2
22800: PUSH
22801: EMPTY
22802: LIST
22803: LIST
22804: PPUSH
22805: CALL_OW 72
22809: PUSH
22810: LD_INT 1
22812: LESSEQUAL
22813: OR
22814: PUSH
22815: LD_VAR 0 19
22819: AND
22820: PUSH
22821: LD_VAR 0 5
22825: PUSH
22826: LD_VAR 0 17
22830: IN
22831: NOT
22832: AND
22833: IFFALSE 22926
// begin if b then
22835: LD_VAR 0 18
22839: IFFALSE 22888
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
22841: LD_VAR 0 18
22845: PPUSH
22846: LD_VAR 0 3
22850: PPUSH
22851: LD_VAR 0 18
22855: PPUSH
22856: CALL_OW 74
22860: PPUSH
22861: CALL_OW 296
22865: PUSH
22866: LD_INT 10
22868: LESS
22869: PUSH
22870: LD_VAR 0 18
22874: PPUSH
22875: CALL_OW 461
22879: PUSH
22880: LD_INT 7
22882: NONEQUAL
22883: AND
22884: IFFALSE 22888
// continue ;
22886: GO 22336
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
22888: LD_ADDR_VAR 0 17
22892: PUSH
22893: LD_VAR 0 17
22897: PPUSH
22898: LD_VAR 0 17
22902: PUSH
22903: LD_INT 1
22905: PLUS
22906: PPUSH
22907: LD_VAR 0 5
22911: PPUSH
22912: CALL_OW 1
22916: ST_TO_ADDR
// ComExitBuilding ( i ) ;
22917: LD_VAR 0 5
22921: PPUSH
22922: CALL_OW 122
// end ; if sold_defenders then
22926: LD_VAR 0 17
22930: IFFALSE 22990
// if i in sold_defenders then
22932: LD_VAR 0 5
22936: PUSH
22937: LD_VAR 0 17
22941: IN
22942: IFFALSE 22990
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
22944: LD_VAR 0 5
22948: PPUSH
22949: CALL_OW 314
22953: NOT
22954: PUSH
22955: LD_VAR 0 5
22959: PPUSH
22960: LD_VAR 0 13
22964: PPUSH
22965: CALL_OW 296
22969: PUSH
22970: LD_INT 30
22972: LESS
22973: AND
22974: IFFALSE 22990
// ComAttackUnit ( i , e ) ;
22976: LD_VAR 0 5
22980: PPUSH
22981: LD_VAR 0 13
22985: PPUSH
22986: CALL_OW 115
// end ; end ; end ;
22990: GO 22993
22992: POP
// if IsDead ( i ) then
22993: LD_VAR 0 5
22997: PPUSH
22998: CALL_OW 301
23002: IFFALSE 23020
// defenders := defenders diff i ;
23004: LD_ADDR_VAR 0 2
23008: PUSH
23009: LD_VAR 0 2
23013: PUSH
23014: LD_VAR 0 5
23018: DIFF
23019: ST_TO_ADDR
// end ;
23020: GO 22336
23022: POP
23023: POP
// until not enemy or not defenders ;
23024: LD_VAR 0 3
23028: NOT
23029: PUSH
23030: LD_VAR 0 2
23034: NOT
23035: OR
23036: IFFALSE 22303
// MC_Reset ( base , 18 ) ;
23038: LD_VAR 0 1
23042: PPUSH
23043: LD_INT 18
23045: PPUSH
23046: CALL 66497 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
23050: LD_ADDR_VAR 0 2
23054: PUSH
23055: LD_VAR 0 2
23059: PUSH
23060: LD_VAR 0 2
23064: PPUSH
23065: LD_INT 2
23067: PUSH
23068: LD_INT 25
23070: PUSH
23071: LD_INT 1
23073: PUSH
23074: EMPTY
23075: LIST
23076: LIST
23077: PUSH
23078: LD_INT 25
23080: PUSH
23081: LD_INT 5
23083: PUSH
23084: EMPTY
23085: LIST
23086: LIST
23087: PUSH
23088: LD_INT 25
23090: PUSH
23091: LD_INT 8
23093: PUSH
23094: EMPTY
23095: LIST
23096: LIST
23097: PUSH
23098: LD_INT 25
23100: PUSH
23101: LD_INT 9
23103: PUSH
23104: EMPTY
23105: LIST
23106: LIST
23107: PUSH
23108: EMPTY
23109: LIST
23110: LIST
23111: LIST
23112: LIST
23113: LIST
23114: PPUSH
23115: CALL_OW 72
23119: DIFF
23120: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
23121: LD_VAR 0 3
23125: NOT
23126: PUSH
23127: LD_VAR 0 2
23131: PPUSH
23132: LD_INT 21
23134: PUSH
23135: LD_INT 2
23137: PUSH
23138: EMPTY
23139: LIST
23140: LIST
23141: PPUSH
23142: CALL_OW 72
23146: AND
23147: IFFALSE 23409
// begin tmp := FilterByTag ( defenders , 19 ) ;
23149: LD_ADDR_VAR 0 11
23153: PUSH
23154: LD_VAR 0 2
23158: PPUSH
23159: LD_INT 19
23161: PPUSH
23162: CALL 59795 0 2
23166: ST_TO_ADDR
// if tmp then
23167: LD_VAR 0 11
23171: IFFALSE 23241
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
23173: LD_ADDR_VAR 0 11
23177: PUSH
23178: LD_VAR 0 11
23182: PPUSH
23183: LD_INT 25
23185: PUSH
23186: LD_INT 3
23188: PUSH
23189: EMPTY
23190: LIST
23191: LIST
23192: PPUSH
23193: CALL_OW 72
23197: ST_TO_ADDR
// if tmp then
23198: LD_VAR 0 11
23202: IFFALSE 23241
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
23204: LD_ADDR_EXP 48
23208: PUSH
23209: LD_EXP 48
23213: PPUSH
23214: LD_VAR 0 1
23218: PPUSH
23219: LD_EXP 48
23223: PUSH
23224: LD_VAR 0 1
23228: ARRAY
23229: PUSH
23230: LD_VAR 0 11
23234: UNION
23235: PPUSH
23236: CALL_OW 1
23240: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
23241: LD_VAR 0 1
23245: PPUSH
23246: LD_INT 19
23248: PPUSH
23249: CALL 66497 0 2
// repeat wait ( 0 0$1 ) ;
23253: LD_INT 35
23255: PPUSH
23256: CALL_OW 67
// for i in defenders do
23260: LD_ADDR_VAR 0 5
23264: PUSH
23265: LD_VAR 0 2
23269: PUSH
23270: FOR_IN
23271: IFFALSE 23360
// begin if not IsInArea ( i , mc_parking [ base ] ) then
23273: LD_VAR 0 5
23277: PPUSH
23278: LD_EXP 60
23282: PUSH
23283: LD_VAR 0 1
23287: ARRAY
23288: PPUSH
23289: CALL_OW 308
23293: NOT
23294: IFFALSE 23318
// ComMoveToArea ( i , mc_parking [ base ] ) else
23296: LD_VAR 0 5
23300: PPUSH
23301: LD_EXP 60
23305: PUSH
23306: LD_VAR 0 1
23310: ARRAY
23311: PPUSH
23312: CALL_OW 113
23316: GO 23358
// if GetControl ( i ) = control_manual then
23318: LD_VAR 0 5
23322: PPUSH
23323: CALL_OW 263
23327: PUSH
23328: LD_INT 1
23330: EQUAL
23331: IFFALSE 23358
// if IsDrivenBy ( i ) then
23333: LD_VAR 0 5
23337: PPUSH
23338: CALL_OW 311
23342: IFFALSE 23358
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
23344: LD_VAR 0 5
23348: PPUSH
23349: CALL_OW 311
23353: PPUSH
23354: CALL_OW 121
// end ;
23358: GO 23270
23360: POP
23361: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] ;
23362: LD_VAR 0 2
23366: PPUSH
23367: LD_INT 95
23369: PUSH
23370: LD_EXP 60
23374: PUSH
23375: LD_VAR 0 1
23379: ARRAY
23380: PUSH
23381: EMPTY
23382: LIST
23383: LIST
23384: PPUSH
23385: CALL_OW 72
23389: PUSH
23390: LD_VAR 0 2
23394: EQUAL
23395: PUSH
23396: LD_EXP 59
23400: PUSH
23401: LD_VAR 0 1
23405: ARRAY
23406: OR
23407: IFFALSE 23253
// end ; mc_defender := Replace ( mc_defender , base , mc_defender [ base ] union defenders ) ;
23409: LD_ADDR_EXP 58
23413: PUSH
23414: LD_EXP 58
23418: PPUSH
23419: LD_VAR 0 1
23423: PPUSH
23424: LD_EXP 58
23428: PUSH
23429: LD_VAR 0 1
23433: ARRAY
23434: PUSH
23435: LD_VAR 0 2
23439: UNION
23440: PPUSH
23441: CALL_OW 1
23445: ST_TO_ADDR
// MC_Reset ( base , 20 ) ;
23446: LD_VAR 0 1
23450: PPUSH
23451: LD_INT 20
23453: PPUSH
23454: CALL 66497 0 2
// end ;
23458: LD_VAR 0 4
23462: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
23463: LD_INT 0
23465: PPUSH
23466: PPUSH
23467: PPUSH
23468: PPUSH
// result := false ;
23469: LD_ADDR_VAR 0 2
23473: PUSH
23474: LD_INT 0
23476: ST_TO_ADDR
// side := GetSide ( unit ) ;
23477: LD_ADDR_VAR 0 3
23481: PUSH
23482: LD_VAR 0 1
23486: PPUSH
23487: CALL_OW 255
23491: ST_TO_ADDR
// nat := GetNation ( unit ) ;
23492: LD_ADDR_VAR 0 4
23496: PUSH
23497: LD_VAR 0 1
23501: PPUSH
23502: CALL_OW 248
23506: ST_TO_ADDR
// case nat of 1 :
23507: LD_VAR 0 4
23511: PUSH
23512: LD_INT 1
23514: DOUBLE
23515: EQUAL
23516: IFTRUE 23520
23518: GO 23531
23520: POP
// tech := tech_lassight ; 2 :
23521: LD_ADDR_VAR 0 5
23525: PUSH
23526: LD_INT 12
23528: ST_TO_ADDR
23529: GO 23570
23531: LD_INT 2
23533: DOUBLE
23534: EQUAL
23535: IFTRUE 23539
23537: GO 23550
23539: POP
// tech := tech_mortar ; 3 :
23540: LD_ADDR_VAR 0 5
23544: PUSH
23545: LD_INT 41
23547: ST_TO_ADDR
23548: GO 23570
23550: LD_INT 3
23552: DOUBLE
23553: EQUAL
23554: IFTRUE 23558
23556: GO 23569
23558: POP
// tech := tech_bazooka ; end ;
23559: LD_ADDR_VAR 0 5
23563: PUSH
23564: LD_INT 44
23566: ST_TO_ADDR
23567: GO 23570
23569: POP
// if Researched ( side , tech ) then
23570: LD_VAR 0 3
23574: PPUSH
23575: LD_VAR 0 5
23579: PPUSH
23580: CALL_OW 325
23584: IFFALSE 23611
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
23586: LD_ADDR_VAR 0 2
23590: PUSH
23591: LD_INT 5
23593: PUSH
23594: LD_INT 8
23596: PUSH
23597: LD_INT 9
23599: PUSH
23600: EMPTY
23601: LIST
23602: LIST
23603: LIST
23604: PUSH
23605: LD_VAR 0 4
23609: ARRAY
23610: ST_TO_ADDR
// end ;
23611: LD_VAR 0 2
23615: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
23616: LD_INT 0
23618: PPUSH
23619: PPUSH
23620: PPUSH
// if not mines then
23621: LD_VAR 0 2
23625: NOT
23626: IFFALSE 23630
// exit ;
23628: GO 23774
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23630: LD_ADDR_VAR 0 5
23634: PUSH
23635: LD_INT 81
23637: PUSH
23638: LD_VAR 0 1
23642: PUSH
23643: EMPTY
23644: LIST
23645: LIST
23646: PUSH
23647: LD_INT 3
23649: PUSH
23650: LD_INT 21
23652: PUSH
23653: LD_INT 3
23655: PUSH
23656: EMPTY
23657: LIST
23658: LIST
23659: PUSH
23660: EMPTY
23661: LIST
23662: LIST
23663: PUSH
23664: EMPTY
23665: LIST
23666: LIST
23667: PPUSH
23668: CALL_OW 69
23672: ST_TO_ADDR
// for i in mines do
23673: LD_ADDR_VAR 0 4
23677: PUSH
23678: LD_VAR 0 2
23682: PUSH
23683: FOR_IN
23684: IFFALSE 23772
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
23686: LD_VAR 0 4
23690: PUSH
23691: LD_INT 1
23693: ARRAY
23694: PPUSH
23695: LD_VAR 0 4
23699: PUSH
23700: LD_INT 2
23702: ARRAY
23703: PPUSH
23704: CALL_OW 458
23708: NOT
23709: IFFALSE 23713
// continue ;
23711: GO 23683
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
23713: LD_VAR 0 4
23717: PUSH
23718: LD_INT 1
23720: ARRAY
23721: PPUSH
23722: LD_VAR 0 4
23726: PUSH
23727: LD_INT 2
23729: ARRAY
23730: PPUSH
23731: CALL_OW 428
23735: PUSH
23736: LD_VAR 0 5
23740: IN
23741: IFFALSE 23770
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
23743: LD_VAR 0 4
23747: PUSH
23748: LD_INT 1
23750: ARRAY
23751: PPUSH
23752: LD_VAR 0 4
23756: PUSH
23757: LD_INT 2
23759: ARRAY
23760: PPUSH
23761: LD_VAR 0 1
23765: PPUSH
23766: CALL_OW 456
// end ;
23770: GO 23683
23772: POP
23773: POP
// end ;
23774: LD_VAR 0 3
23778: RET
// export function Count ( array ) ; var i ; begin
23779: LD_INT 0
23781: PPUSH
23782: PPUSH
// result := 0 ;
23783: LD_ADDR_VAR 0 2
23787: PUSH
23788: LD_INT 0
23790: ST_TO_ADDR
// for i in array do
23791: LD_ADDR_VAR 0 3
23795: PUSH
23796: LD_VAR 0 1
23800: PUSH
23801: FOR_IN
23802: IFFALSE 23826
// if i then
23804: LD_VAR 0 3
23808: IFFALSE 23824
// result := result + 1 ;
23810: LD_ADDR_VAR 0 2
23814: PUSH
23815: LD_VAR 0 2
23819: PUSH
23820: LD_INT 1
23822: PLUS
23823: ST_TO_ADDR
23824: GO 23801
23826: POP
23827: POP
// end ;
23828: LD_VAR 0 2
23832: RET
// export function IsEmpty ( building ) ; begin
23833: LD_INT 0
23835: PPUSH
// if not building then
23836: LD_VAR 0 1
23840: NOT
23841: IFFALSE 23845
// exit ;
23843: GO 23888
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
23845: LD_ADDR_VAR 0 2
23849: PUSH
23850: LD_VAR 0 1
23854: PUSH
23855: LD_INT 22
23857: PUSH
23858: LD_VAR 0 1
23862: PPUSH
23863: CALL_OW 255
23867: PUSH
23868: EMPTY
23869: LIST
23870: LIST
23871: PUSH
23872: LD_INT 58
23874: PUSH
23875: EMPTY
23876: LIST
23877: PUSH
23878: EMPTY
23879: LIST
23880: LIST
23881: PPUSH
23882: CALL_OW 69
23886: IN
23887: ST_TO_ADDR
// end ;
23888: LD_VAR 0 2
23892: RET
// export function IsNotFull ( building ) ; begin
23893: LD_INT 0
23895: PPUSH
// if not building then
23896: LD_VAR 0 1
23900: NOT
23901: IFFALSE 23905
// exit ;
23903: GO 23924
// result := UnitsInside ( building ) < 6 ;
23905: LD_ADDR_VAR 0 2
23909: PUSH
23910: LD_VAR 0 1
23914: PPUSH
23915: CALL_OW 313
23919: PUSH
23920: LD_INT 6
23922: LESS
23923: ST_TO_ADDR
// end ;
23924: LD_VAR 0 2
23928: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
23929: LD_INT 0
23931: PPUSH
23932: PPUSH
23933: PPUSH
23934: PPUSH
// tmp := [ ] ;
23935: LD_ADDR_VAR 0 3
23939: PUSH
23940: EMPTY
23941: ST_TO_ADDR
// list := [ ] ;
23942: LD_ADDR_VAR 0 5
23946: PUSH
23947: EMPTY
23948: ST_TO_ADDR
// for i = 16 to 25 do
23949: LD_ADDR_VAR 0 4
23953: PUSH
23954: DOUBLE
23955: LD_INT 16
23957: DEC
23958: ST_TO_ADDR
23959: LD_INT 25
23961: PUSH
23962: FOR_TO
23963: IFFALSE 24036
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
23965: LD_ADDR_VAR 0 3
23969: PUSH
23970: LD_VAR 0 3
23974: PUSH
23975: LD_INT 22
23977: PUSH
23978: LD_VAR 0 1
23982: PPUSH
23983: CALL_OW 255
23987: PUSH
23988: EMPTY
23989: LIST
23990: LIST
23991: PUSH
23992: LD_INT 91
23994: PUSH
23995: LD_VAR 0 1
23999: PUSH
24000: LD_INT 6
24002: PUSH
24003: EMPTY
24004: LIST
24005: LIST
24006: LIST
24007: PUSH
24008: LD_INT 30
24010: PUSH
24011: LD_VAR 0 4
24015: PUSH
24016: EMPTY
24017: LIST
24018: LIST
24019: PUSH
24020: EMPTY
24021: LIST
24022: LIST
24023: LIST
24024: PUSH
24025: EMPTY
24026: LIST
24027: PPUSH
24028: CALL_OW 69
24032: ADD
24033: ST_TO_ADDR
24034: GO 23962
24036: POP
24037: POP
// for i = 1 to tmp do
24038: LD_ADDR_VAR 0 4
24042: PUSH
24043: DOUBLE
24044: LD_INT 1
24046: DEC
24047: ST_TO_ADDR
24048: LD_VAR 0 3
24052: PUSH
24053: FOR_TO
24054: IFFALSE 24142
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
24056: LD_ADDR_VAR 0 5
24060: PUSH
24061: LD_VAR 0 5
24065: PUSH
24066: LD_VAR 0 3
24070: PUSH
24071: LD_VAR 0 4
24075: ARRAY
24076: PPUSH
24077: CALL_OW 266
24081: PUSH
24082: LD_VAR 0 3
24086: PUSH
24087: LD_VAR 0 4
24091: ARRAY
24092: PPUSH
24093: CALL_OW 250
24097: PUSH
24098: LD_VAR 0 3
24102: PUSH
24103: LD_VAR 0 4
24107: ARRAY
24108: PPUSH
24109: CALL_OW 251
24113: PUSH
24114: LD_VAR 0 3
24118: PUSH
24119: LD_VAR 0 4
24123: ARRAY
24124: PPUSH
24125: CALL_OW 254
24129: PUSH
24130: EMPTY
24131: LIST
24132: LIST
24133: LIST
24134: LIST
24135: PUSH
24136: EMPTY
24137: LIST
24138: ADD
24139: ST_TO_ADDR
24140: GO 24053
24142: POP
24143: POP
// result := list ;
24144: LD_ADDR_VAR 0 2
24148: PUSH
24149: LD_VAR 0 5
24153: ST_TO_ADDR
// end ;
24154: LD_VAR 0 2
24158: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
24159: LD_INT 0
24161: PPUSH
24162: PPUSH
24163: PPUSH
24164: PPUSH
24165: PPUSH
24166: PPUSH
24167: PPUSH
// if not factory then
24168: LD_VAR 0 1
24172: NOT
24173: IFFALSE 24177
// exit ;
24175: GO 24702
// if control = control_apeman then
24177: LD_VAR 0 4
24181: PUSH
24182: LD_INT 5
24184: EQUAL
24185: IFFALSE 24294
// begin tmp := UnitsInside ( factory ) ;
24187: LD_ADDR_VAR 0 8
24191: PUSH
24192: LD_VAR 0 1
24196: PPUSH
24197: CALL_OW 313
24201: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
24202: LD_VAR 0 8
24206: PPUSH
24207: LD_INT 25
24209: PUSH
24210: LD_INT 12
24212: PUSH
24213: EMPTY
24214: LIST
24215: LIST
24216: PPUSH
24217: CALL_OW 72
24221: NOT
24222: IFFALSE 24232
// control := control_manual ;
24224: LD_ADDR_VAR 0 4
24228: PUSH
24229: LD_INT 1
24231: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
24232: LD_ADDR_VAR 0 8
24236: PUSH
24237: LD_VAR 0 1
24241: PPUSH
24242: CALL 23929 0 1
24246: ST_TO_ADDR
// if tmp then
24247: LD_VAR 0 8
24251: IFFALSE 24294
// begin for i in tmp do
24253: LD_ADDR_VAR 0 7
24257: PUSH
24258: LD_VAR 0 8
24262: PUSH
24263: FOR_IN
24264: IFFALSE 24292
// if i [ 1 ] = b_ext_radar then
24266: LD_VAR 0 7
24270: PUSH
24271: LD_INT 1
24273: ARRAY
24274: PUSH
24275: LD_INT 20
24277: EQUAL
24278: IFFALSE 24290
// begin control := control_remote ;
24280: LD_ADDR_VAR 0 4
24284: PUSH
24285: LD_INT 2
24287: ST_TO_ADDR
// break ;
24288: GO 24292
// end ;
24290: GO 24263
24292: POP
24293: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24294: LD_VAR 0 1
24298: PPUSH
24299: LD_VAR 0 2
24303: PPUSH
24304: LD_VAR 0 3
24308: PPUSH
24309: LD_VAR 0 4
24313: PPUSH
24314: LD_VAR 0 5
24318: PPUSH
24319: CALL_OW 448
24323: IFFALSE 24358
// begin result := [ chassis , engine , control , weapon ] ;
24325: LD_ADDR_VAR 0 6
24329: PUSH
24330: LD_VAR 0 2
24334: PUSH
24335: LD_VAR 0 3
24339: PUSH
24340: LD_VAR 0 4
24344: PUSH
24345: LD_VAR 0 5
24349: PUSH
24350: EMPTY
24351: LIST
24352: LIST
24353: LIST
24354: LIST
24355: ST_TO_ADDR
// exit ;
24356: GO 24702
// end ; _chassis := AvailableChassisList ( factory ) ;
24358: LD_ADDR_VAR 0 9
24362: PUSH
24363: LD_VAR 0 1
24367: PPUSH
24368: CALL_OW 475
24372: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
24373: LD_ADDR_VAR 0 11
24377: PUSH
24378: LD_VAR 0 1
24382: PPUSH
24383: CALL_OW 476
24387: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
24388: LD_ADDR_VAR 0 12
24392: PUSH
24393: LD_VAR 0 1
24397: PPUSH
24398: CALL_OW 477
24402: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
24403: LD_ADDR_VAR 0 10
24407: PUSH
24408: LD_VAR 0 1
24412: PPUSH
24413: CALL_OW 478
24417: ST_TO_ADDR
// if not chassis in _chassis then
24418: LD_VAR 0 2
24422: PUSH
24423: LD_VAR 0 9
24427: IN
24428: NOT
24429: IFFALSE 24455
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
24431: LD_ADDR_VAR 0 2
24435: PUSH
24436: LD_VAR 0 9
24440: PUSH
24441: LD_INT 1
24443: PPUSH
24444: LD_VAR 0 9
24448: PPUSH
24449: CALL_OW 12
24453: ARRAY
24454: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
24455: LD_VAR 0 2
24459: PPUSH
24460: LD_VAR 0 3
24464: PPUSH
24465: CALL 24707 0 2
24469: NOT
24470: IFFALSE 24529
// repeat engine := _engine [ 1 ] ;
24472: LD_ADDR_VAR 0 3
24476: PUSH
24477: LD_VAR 0 11
24481: PUSH
24482: LD_INT 1
24484: ARRAY
24485: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
24486: LD_ADDR_VAR 0 11
24490: PUSH
24491: LD_VAR 0 11
24495: PPUSH
24496: LD_INT 1
24498: PPUSH
24499: CALL_OW 3
24503: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
24504: LD_VAR 0 2
24508: PPUSH
24509: LD_VAR 0 3
24513: PPUSH
24514: CALL 24707 0 2
24518: PUSH
24519: LD_VAR 0 11
24523: PUSH
24524: EMPTY
24525: EQUAL
24526: OR
24527: IFFALSE 24472
// if not control in _control then
24529: LD_VAR 0 4
24533: PUSH
24534: LD_VAR 0 12
24538: IN
24539: NOT
24540: IFFALSE 24566
// control := _control [ rand ( 1 , _control ) ] ;
24542: LD_ADDR_VAR 0 4
24546: PUSH
24547: LD_VAR 0 12
24551: PUSH
24552: LD_INT 1
24554: PPUSH
24555: LD_VAR 0 12
24559: PPUSH
24560: CALL_OW 12
24564: ARRAY
24565: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
24566: LD_VAR 0 2
24570: PPUSH
24571: LD_VAR 0 5
24575: PPUSH
24576: CALL 24927 0 2
24580: NOT
24581: IFFALSE 24640
// repeat weapon := _weapon [ 1 ] ;
24583: LD_ADDR_VAR 0 5
24587: PUSH
24588: LD_VAR 0 10
24592: PUSH
24593: LD_INT 1
24595: ARRAY
24596: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
24597: LD_ADDR_VAR 0 10
24601: PUSH
24602: LD_VAR 0 10
24606: PPUSH
24607: LD_INT 1
24609: PPUSH
24610: CALL_OW 3
24614: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
24615: LD_VAR 0 2
24619: PPUSH
24620: LD_VAR 0 5
24624: PPUSH
24625: CALL 24927 0 2
24629: PUSH
24630: LD_VAR 0 10
24634: PUSH
24635: EMPTY
24636: EQUAL
24637: OR
24638: IFFALSE 24583
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24640: LD_VAR 0 1
24644: PPUSH
24645: LD_VAR 0 2
24649: PPUSH
24650: LD_VAR 0 3
24654: PPUSH
24655: LD_VAR 0 4
24659: PPUSH
24660: LD_VAR 0 5
24664: PPUSH
24665: CALL_OW 448
24669: IFFALSE 24702
// result := [ chassis , engine , control , weapon ] ;
24671: LD_ADDR_VAR 0 6
24675: PUSH
24676: LD_VAR 0 2
24680: PUSH
24681: LD_VAR 0 3
24685: PUSH
24686: LD_VAR 0 4
24690: PUSH
24691: LD_VAR 0 5
24695: PUSH
24696: EMPTY
24697: LIST
24698: LIST
24699: LIST
24700: LIST
24701: ST_TO_ADDR
// end ;
24702: LD_VAR 0 6
24706: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
24707: LD_INT 0
24709: PPUSH
// if not chassis or not engine then
24710: LD_VAR 0 1
24714: NOT
24715: PUSH
24716: LD_VAR 0 2
24720: NOT
24721: OR
24722: IFFALSE 24726
// exit ;
24724: GO 24922
// case engine of engine_solar :
24726: LD_VAR 0 2
24730: PUSH
24731: LD_INT 2
24733: DOUBLE
24734: EQUAL
24735: IFTRUE 24739
24737: GO 24777
24739: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
24740: LD_ADDR_VAR 0 3
24744: PUSH
24745: LD_INT 11
24747: PUSH
24748: LD_INT 12
24750: PUSH
24751: LD_INT 13
24753: PUSH
24754: LD_INT 14
24756: PUSH
24757: LD_INT 1
24759: PUSH
24760: LD_INT 2
24762: PUSH
24763: LD_INT 3
24765: PUSH
24766: EMPTY
24767: LIST
24768: LIST
24769: LIST
24770: LIST
24771: LIST
24772: LIST
24773: LIST
24774: ST_TO_ADDR
24775: GO 24906
24777: LD_INT 1
24779: DOUBLE
24780: EQUAL
24781: IFTRUE 24785
24783: GO 24847
24785: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
24786: LD_ADDR_VAR 0 3
24790: PUSH
24791: LD_INT 11
24793: PUSH
24794: LD_INT 12
24796: PUSH
24797: LD_INT 13
24799: PUSH
24800: LD_INT 14
24802: PUSH
24803: LD_INT 1
24805: PUSH
24806: LD_INT 2
24808: PUSH
24809: LD_INT 3
24811: PUSH
24812: LD_INT 4
24814: PUSH
24815: LD_INT 5
24817: PUSH
24818: LD_INT 21
24820: PUSH
24821: LD_INT 23
24823: PUSH
24824: LD_INT 22
24826: PUSH
24827: LD_INT 24
24829: PUSH
24830: EMPTY
24831: LIST
24832: LIST
24833: LIST
24834: LIST
24835: LIST
24836: LIST
24837: LIST
24838: LIST
24839: LIST
24840: LIST
24841: LIST
24842: LIST
24843: LIST
24844: ST_TO_ADDR
24845: GO 24906
24847: LD_INT 3
24849: DOUBLE
24850: EQUAL
24851: IFTRUE 24855
24853: GO 24905
24855: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24856: LD_ADDR_VAR 0 3
24860: PUSH
24861: LD_INT 13
24863: PUSH
24864: LD_INT 14
24866: PUSH
24867: LD_INT 2
24869: PUSH
24870: LD_INT 3
24872: PUSH
24873: LD_INT 4
24875: PUSH
24876: LD_INT 5
24878: PUSH
24879: LD_INT 21
24881: PUSH
24882: LD_INT 22
24884: PUSH
24885: LD_INT 23
24887: PUSH
24888: LD_INT 24
24890: PUSH
24891: EMPTY
24892: LIST
24893: LIST
24894: LIST
24895: LIST
24896: LIST
24897: LIST
24898: LIST
24899: LIST
24900: LIST
24901: LIST
24902: ST_TO_ADDR
24903: GO 24906
24905: POP
// result := ( chassis in result ) ;
24906: LD_ADDR_VAR 0 3
24910: PUSH
24911: LD_VAR 0 1
24915: PUSH
24916: LD_VAR 0 3
24920: IN
24921: ST_TO_ADDR
// end ;
24922: LD_VAR 0 3
24926: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
24927: LD_INT 0
24929: PPUSH
// if not chassis or not weapon then
24930: LD_VAR 0 1
24934: NOT
24935: PUSH
24936: LD_VAR 0 2
24940: NOT
24941: OR
24942: IFFALSE 24946
// exit ;
24944: GO 25972
// case weapon of us_machine_gun :
24946: LD_VAR 0 2
24950: PUSH
24951: LD_INT 2
24953: DOUBLE
24954: EQUAL
24955: IFTRUE 24959
24957: GO 24989
24959: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
24960: LD_ADDR_VAR 0 3
24964: PUSH
24965: LD_INT 1
24967: PUSH
24968: LD_INT 2
24970: PUSH
24971: LD_INT 3
24973: PUSH
24974: LD_INT 4
24976: PUSH
24977: LD_INT 5
24979: PUSH
24980: EMPTY
24981: LIST
24982: LIST
24983: LIST
24984: LIST
24985: LIST
24986: ST_TO_ADDR
24987: GO 25956
24989: LD_INT 3
24991: DOUBLE
24992: EQUAL
24993: IFTRUE 24997
24995: GO 25027
24997: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
24998: LD_ADDR_VAR 0 3
25002: PUSH
25003: LD_INT 1
25005: PUSH
25006: LD_INT 2
25008: PUSH
25009: LD_INT 3
25011: PUSH
25012: LD_INT 4
25014: PUSH
25015: LD_INT 5
25017: PUSH
25018: EMPTY
25019: LIST
25020: LIST
25021: LIST
25022: LIST
25023: LIST
25024: ST_TO_ADDR
25025: GO 25956
25027: LD_INT 11
25029: DOUBLE
25030: EQUAL
25031: IFTRUE 25035
25033: GO 25065
25035: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
25036: LD_ADDR_VAR 0 3
25040: PUSH
25041: LD_INT 1
25043: PUSH
25044: LD_INT 2
25046: PUSH
25047: LD_INT 3
25049: PUSH
25050: LD_INT 4
25052: PUSH
25053: LD_INT 5
25055: PUSH
25056: EMPTY
25057: LIST
25058: LIST
25059: LIST
25060: LIST
25061: LIST
25062: ST_TO_ADDR
25063: GO 25956
25065: LD_INT 4
25067: DOUBLE
25068: EQUAL
25069: IFTRUE 25073
25071: GO 25099
25073: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
25074: LD_ADDR_VAR 0 3
25078: PUSH
25079: LD_INT 2
25081: PUSH
25082: LD_INT 3
25084: PUSH
25085: LD_INT 4
25087: PUSH
25088: LD_INT 5
25090: PUSH
25091: EMPTY
25092: LIST
25093: LIST
25094: LIST
25095: LIST
25096: ST_TO_ADDR
25097: GO 25956
25099: LD_INT 5
25101: DOUBLE
25102: EQUAL
25103: IFTRUE 25107
25105: GO 25133
25107: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
25108: LD_ADDR_VAR 0 3
25112: PUSH
25113: LD_INT 2
25115: PUSH
25116: LD_INT 3
25118: PUSH
25119: LD_INT 4
25121: PUSH
25122: LD_INT 5
25124: PUSH
25125: EMPTY
25126: LIST
25127: LIST
25128: LIST
25129: LIST
25130: ST_TO_ADDR
25131: GO 25956
25133: LD_INT 9
25135: DOUBLE
25136: EQUAL
25137: IFTRUE 25141
25139: GO 25167
25141: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
25142: LD_ADDR_VAR 0 3
25146: PUSH
25147: LD_INT 2
25149: PUSH
25150: LD_INT 3
25152: PUSH
25153: LD_INT 4
25155: PUSH
25156: LD_INT 5
25158: PUSH
25159: EMPTY
25160: LIST
25161: LIST
25162: LIST
25163: LIST
25164: ST_TO_ADDR
25165: GO 25956
25167: LD_INT 7
25169: DOUBLE
25170: EQUAL
25171: IFTRUE 25175
25173: GO 25201
25175: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
25176: LD_ADDR_VAR 0 3
25180: PUSH
25181: LD_INT 2
25183: PUSH
25184: LD_INT 3
25186: PUSH
25187: LD_INT 4
25189: PUSH
25190: LD_INT 5
25192: PUSH
25193: EMPTY
25194: LIST
25195: LIST
25196: LIST
25197: LIST
25198: ST_TO_ADDR
25199: GO 25956
25201: LD_INT 12
25203: DOUBLE
25204: EQUAL
25205: IFTRUE 25209
25207: GO 25235
25209: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
25210: LD_ADDR_VAR 0 3
25214: PUSH
25215: LD_INT 2
25217: PUSH
25218: LD_INT 3
25220: PUSH
25221: LD_INT 4
25223: PUSH
25224: LD_INT 5
25226: PUSH
25227: EMPTY
25228: LIST
25229: LIST
25230: LIST
25231: LIST
25232: ST_TO_ADDR
25233: GO 25956
25235: LD_INT 13
25237: DOUBLE
25238: EQUAL
25239: IFTRUE 25243
25241: GO 25269
25243: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
25244: LD_ADDR_VAR 0 3
25248: PUSH
25249: LD_INT 2
25251: PUSH
25252: LD_INT 3
25254: PUSH
25255: LD_INT 4
25257: PUSH
25258: LD_INT 5
25260: PUSH
25261: EMPTY
25262: LIST
25263: LIST
25264: LIST
25265: LIST
25266: ST_TO_ADDR
25267: GO 25956
25269: LD_INT 14
25271: DOUBLE
25272: EQUAL
25273: IFTRUE 25277
25275: GO 25295
25277: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
25278: LD_ADDR_VAR 0 3
25282: PUSH
25283: LD_INT 4
25285: PUSH
25286: LD_INT 5
25288: PUSH
25289: EMPTY
25290: LIST
25291: LIST
25292: ST_TO_ADDR
25293: GO 25956
25295: LD_INT 6
25297: DOUBLE
25298: EQUAL
25299: IFTRUE 25303
25301: GO 25321
25303: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
25304: LD_ADDR_VAR 0 3
25308: PUSH
25309: LD_INT 4
25311: PUSH
25312: LD_INT 5
25314: PUSH
25315: EMPTY
25316: LIST
25317: LIST
25318: ST_TO_ADDR
25319: GO 25956
25321: LD_INT 10
25323: DOUBLE
25324: EQUAL
25325: IFTRUE 25329
25327: GO 25347
25329: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
25330: LD_ADDR_VAR 0 3
25334: PUSH
25335: LD_INT 4
25337: PUSH
25338: LD_INT 5
25340: PUSH
25341: EMPTY
25342: LIST
25343: LIST
25344: ST_TO_ADDR
25345: GO 25956
25347: LD_INT 22
25349: DOUBLE
25350: EQUAL
25351: IFTRUE 25355
25353: GO 25381
25355: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
25356: LD_ADDR_VAR 0 3
25360: PUSH
25361: LD_INT 11
25363: PUSH
25364: LD_INT 12
25366: PUSH
25367: LD_INT 13
25369: PUSH
25370: LD_INT 14
25372: PUSH
25373: EMPTY
25374: LIST
25375: LIST
25376: LIST
25377: LIST
25378: ST_TO_ADDR
25379: GO 25956
25381: LD_INT 23
25383: DOUBLE
25384: EQUAL
25385: IFTRUE 25389
25387: GO 25415
25389: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
25390: LD_ADDR_VAR 0 3
25394: PUSH
25395: LD_INT 11
25397: PUSH
25398: LD_INT 12
25400: PUSH
25401: LD_INT 13
25403: PUSH
25404: LD_INT 14
25406: PUSH
25407: EMPTY
25408: LIST
25409: LIST
25410: LIST
25411: LIST
25412: ST_TO_ADDR
25413: GO 25956
25415: LD_INT 24
25417: DOUBLE
25418: EQUAL
25419: IFTRUE 25423
25421: GO 25449
25423: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
25424: LD_ADDR_VAR 0 3
25428: PUSH
25429: LD_INT 11
25431: PUSH
25432: LD_INT 12
25434: PUSH
25435: LD_INT 13
25437: PUSH
25438: LD_INT 14
25440: PUSH
25441: EMPTY
25442: LIST
25443: LIST
25444: LIST
25445: LIST
25446: ST_TO_ADDR
25447: GO 25956
25449: LD_INT 30
25451: DOUBLE
25452: EQUAL
25453: IFTRUE 25457
25455: GO 25483
25457: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
25458: LD_ADDR_VAR 0 3
25462: PUSH
25463: LD_INT 11
25465: PUSH
25466: LD_INT 12
25468: PUSH
25469: LD_INT 13
25471: PUSH
25472: LD_INT 14
25474: PUSH
25475: EMPTY
25476: LIST
25477: LIST
25478: LIST
25479: LIST
25480: ST_TO_ADDR
25481: GO 25956
25483: LD_INT 25
25485: DOUBLE
25486: EQUAL
25487: IFTRUE 25491
25489: GO 25509
25491: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
25492: LD_ADDR_VAR 0 3
25496: PUSH
25497: LD_INT 13
25499: PUSH
25500: LD_INT 14
25502: PUSH
25503: EMPTY
25504: LIST
25505: LIST
25506: ST_TO_ADDR
25507: GO 25956
25509: LD_INT 27
25511: DOUBLE
25512: EQUAL
25513: IFTRUE 25517
25515: GO 25535
25517: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
25518: LD_ADDR_VAR 0 3
25522: PUSH
25523: LD_INT 13
25525: PUSH
25526: LD_INT 14
25528: PUSH
25529: EMPTY
25530: LIST
25531: LIST
25532: ST_TO_ADDR
25533: GO 25956
25535: LD_INT 28
25537: DOUBLE
25538: EQUAL
25539: IFTRUE 25543
25541: GO 25561
25543: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
25544: LD_ADDR_VAR 0 3
25548: PUSH
25549: LD_INT 13
25551: PUSH
25552: LD_INT 14
25554: PUSH
25555: EMPTY
25556: LIST
25557: LIST
25558: ST_TO_ADDR
25559: GO 25956
25561: LD_INT 29
25563: DOUBLE
25564: EQUAL
25565: IFTRUE 25569
25567: GO 25587
25569: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
25570: LD_ADDR_VAR 0 3
25574: PUSH
25575: LD_INT 13
25577: PUSH
25578: LD_INT 14
25580: PUSH
25581: EMPTY
25582: LIST
25583: LIST
25584: ST_TO_ADDR
25585: GO 25956
25587: LD_INT 31
25589: DOUBLE
25590: EQUAL
25591: IFTRUE 25595
25593: GO 25613
25595: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
25596: LD_ADDR_VAR 0 3
25600: PUSH
25601: LD_INT 13
25603: PUSH
25604: LD_INT 14
25606: PUSH
25607: EMPTY
25608: LIST
25609: LIST
25610: ST_TO_ADDR
25611: GO 25956
25613: LD_INT 26
25615: DOUBLE
25616: EQUAL
25617: IFTRUE 25621
25619: GO 25639
25621: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
25622: LD_ADDR_VAR 0 3
25626: PUSH
25627: LD_INT 13
25629: PUSH
25630: LD_INT 14
25632: PUSH
25633: EMPTY
25634: LIST
25635: LIST
25636: ST_TO_ADDR
25637: GO 25956
25639: LD_INT 42
25641: DOUBLE
25642: EQUAL
25643: IFTRUE 25647
25645: GO 25673
25647: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
25648: LD_ADDR_VAR 0 3
25652: PUSH
25653: LD_INT 21
25655: PUSH
25656: LD_INT 22
25658: PUSH
25659: LD_INT 23
25661: PUSH
25662: LD_INT 24
25664: PUSH
25665: EMPTY
25666: LIST
25667: LIST
25668: LIST
25669: LIST
25670: ST_TO_ADDR
25671: GO 25956
25673: LD_INT 43
25675: DOUBLE
25676: EQUAL
25677: IFTRUE 25681
25679: GO 25707
25681: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
25682: LD_ADDR_VAR 0 3
25686: PUSH
25687: LD_INT 21
25689: PUSH
25690: LD_INT 22
25692: PUSH
25693: LD_INT 23
25695: PUSH
25696: LD_INT 24
25698: PUSH
25699: EMPTY
25700: LIST
25701: LIST
25702: LIST
25703: LIST
25704: ST_TO_ADDR
25705: GO 25956
25707: LD_INT 44
25709: DOUBLE
25710: EQUAL
25711: IFTRUE 25715
25713: GO 25741
25715: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
25716: LD_ADDR_VAR 0 3
25720: PUSH
25721: LD_INT 21
25723: PUSH
25724: LD_INT 22
25726: PUSH
25727: LD_INT 23
25729: PUSH
25730: LD_INT 24
25732: PUSH
25733: EMPTY
25734: LIST
25735: LIST
25736: LIST
25737: LIST
25738: ST_TO_ADDR
25739: GO 25956
25741: LD_INT 45
25743: DOUBLE
25744: EQUAL
25745: IFTRUE 25749
25747: GO 25775
25749: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
25750: LD_ADDR_VAR 0 3
25754: PUSH
25755: LD_INT 21
25757: PUSH
25758: LD_INT 22
25760: PUSH
25761: LD_INT 23
25763: PUSH
25764: LD_INT 24
25766: PUSH
25767: EMPTY
25768: LIST
25769: LIST
25770: LIST
25771: LIST
25772: ST_TO_ADDR
25773: GO 25956
25775: LD_INT 49
25777: DOUBLE
25778: EQUAL
25779: IFTRUE 25783
25781: GO 25809
25783: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
25784: LD_ADDR_VAR 0 3
25788: PUSH
25789: LD_INT 21
25791: PUSH
25792: LD_INT 22
25794: PUSH
25795: LD_INT 23
25797: PUSH
25798: LD_INT 24
25800: PUSH
25801: EMPTY
25802: LIST
25803: LIST
25804: LIST
25805: LIST
25806: ST_TO_ADDR
25807: GO 25956
25809: LD_INT 51
25811: DOUBLE
25812: EQUAL
25813: IFTRUE 25817
25815: GO 25843
25817: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
25818: LD_ADDR_VAR 0 3
25822: PUSH
25823: LD_INT 21
25825: PUSH
25826: LD_INT 22
25828: PUSH
25829: LD_INT 23
25831: PUSH
25832: LD_INT 24
25834: PUSH
25835: EMPTY
25836: LIST
25837: LIST
25838: LIST
25839: LIST
25840: ST_TO_ADDR
25841: GO 25956
25843: LD_INT 52
25845: DOUBLE
25846: EQUAL
25847: IFTRUE 25851
25849: GO 25877
25851: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
25852: LD_ADDR_VAR 0 3
25856: PUSH
25857: LD_INT 21
25859: PUSH
25860: LD_INT 22
25862: PUSH
25863: LD_INT 23
25865: PUSH
25866: LD_INT 24
25868: PUSH
25869: EMPTY
25870: LIST
25871: LIST
25872: LIST
25873: LIST
25874: ST_TO_ADDR
25875: GO 25956
25877: LD_INT 53
25879: DOUBLE
25880: EQUAL
25881: IFTRUE 25885
25883: GO 25903
25885: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
25886: LD_ADDR_VAR 0 3
25890: PUSH
25891: LD_INT 23
25893: PUSH
25894: LD_INT 24
25896: PUSH
25897: EMPTY
25898: LIST
25899: LIST
25900: ST_TO_ADDR
25901: GO 25956
25903: LD_INT 46
25905: DOUBLE
25906: EQUAL
25907: IFTRUE 25911
25909: GO 25929
25911: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
25912: LD_ADDR_VAR 0 3
25916: PUSH
25917: LD_INT 23
25919: PUSH
25920: LD_INT 24
25922: PUSH
25923: EMPTY
25924: LIST
25925: LIST
25926: ST_TO_ADDR
25927: GO 25956
25929: LD_INT 47
25931: DOUBLE
25932: EQUAL
25933: IFTRUE 25937
25935: GO 25955
25937: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25938: LD_ADDR_VAR 0 3
25942: PUSH
25943: LD_INT 23
25945: PUSH
25946: LD_INT 24
25948: PUSH
25949: EMPTY
25950: LIST
25951: LIST
25952: ST_TO_ADDR
25953: GO 25956
25955: POP
// result := ( chassis in result ) ;
25956: LD_ADDR_VAR 0 3
25960: PUSH
25961: LD_VAR 0 1
25965: PUSH
25966: LD_VAR 0 3
25970: IN
25971: ST_TO_ADDR
// end ;
25972: LD_VAR 0 3
25976: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
25977: LD_INT 0
25979: PPUSH
25980: PPUSH
25981: PPUSH
25982: PPUSH
25983: PPUSH
25984: PPUSH
25985: PPUSH
// result := array ;
25986: LD_ADDR_VAR 0 5
25990: PUSH
25991: LD_VAR 0 1
25995: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
25996: LD_VAR 0 1
26000: NOT
26001: PUSH
26002: LD_VAR 0 2
26006: NOT
26007: OR
26008: PUSH
26009: LD_VAR 0 3
26013: NOT
26014: OR
26015: PUSH
26016: LD_VAR 0 2
26020: PUSH
26021: LD_VAR 0 1
26025: GREATER
26026: OR
26027: PUSH
26028: LD_VAR 0 3
26032: PUSH
26033: LD_VAR 0 1
26037: GREATER
26038: OR
26039: IFFALSE 26043
// exit ;
26041: GO 26339
// if direction then
26043: LD_VAR 0 4
26047: IFFALSE 26111
// begin d := 1 ;
26049: LD_ADDR_VAR 0 9
26053: PUSH
26054: LD_INT 1
26056: ST_TO_ADDR
// if i_from > i_to then
26057: LD_VAR 0 2
26061: PUSH
26062: LD_VAR 0 3
26066: GREATER
26067: IFFALSE 26093
// length := ( array - i_from ) + i_to else
26069: LD_ADDR_VAR 0 11
26073: PUSH
26074: LD_VAR 0 1
26078: PUSH
26079: LD_VAR 0 2
26083: MINUS
26084: PUSH
26085: LD_VAR 0 3
26089: PLUS
26090: ST_TO_ADDR
26091: GO 26109
// length := i_to - i_from ;
26093: LD_ADDR_VAR 0 11
26097: PUSH
26098: LD_VAR 0 3
26102: PUSH
26103: LD_VAR 0 2
26107: MINUS
26108: ST_TO_ADDR
// end else
26109: GO 26172
// begin d := - 1 ;
26111: LD_ADDR_VAR 0 9
26115: PUSH
26116: LD_INT 1
26118: NEG
26119: ST_TO_ADDR
// if i_from > i_to then
26120: LD_VAR 0 2
26124: PUSH
26125: LD_VAR 0 3
26129: GREATER
26130: IFFALSE 26150
// length := i_from - i_to else
26132: LD_ADDR_VAR 0 11
26136: PUSH
26137: LD_VAR 0 2
26141: PUSH
26142: LD_VAR 0 3
26146: MINUS
26147: ST_TO_ADDR
26148: GO 26172
// length := ( array - i_to ) + i_from ;
26150: LD_ADDR_VAR 0 11
26154: PUSH
26155: LD_VAR 0 1
26159: PUSH
26160: LD_VAR 0 3
26164: MINUS
26165: PUSH
26166: LD_VAR 0 2
26170: PLUS
26171: ST_TO_ADDR
// end ; if not length then
26172: LD_VAR 0 11
26176: NOT
26177: IFFALSE 26181
// exit ;
26179: GO 26339
// tmp := array ;
26181: LD_ADDR_VAR 0 10
26185: PUSH
26186: LD_VAR 0 1
26190: ST_TO_ADDR
// for i = 1 to length do
26191: LD_ADDR_VAR 0 6
26195: PUSH
26196: DOUBLE
26197: LD_INT 1
26199: DEC
26200: ST_TO_ADDR
26201: LD_VAR 0 11
26205: PUSH
26206: FOR_TO
26207: IFFALSE 26327
// begin for j = 1 to array do
26209: LD_ADDR_VAR 0 7
26213: PUSH
26214: DOUBLE
26215: LD_INT 1
26217: DEC
26218: ST_TO_ADDR
26219: LD_VAR 0 1
26223: PUSH
26224: FOR_TO
26225: IFFALSE 26313
// begin k := j + d ;
26227: LD_ADDR_VAR 0 8
26231: PUSH
26232: LD_VAR 0 7
26236: PUSH
26237: LD_VAR 0 9
26241: PLUS
26242: ST_TO_ADDR
// if k > array then
26243: LD_VAR 0 8
26247: PUSH
26248: LD_VAR 0 1
26252: GREATER
26253: IFFALSE 26263
// k := 1 ;
26255: LD_ADDR_VAR 0 8
26259: PUSH
26260: LD_INT 1
26262: ST_TO_ADDR
// if not k then
26263: LD_VAR 0 8
26267: NOT
26268: IFFALSE 26280
// k := array ;
26270: LD_ADDR_VAR 0 8
26274: PUSH
26275: LD_VAR 0 1
26279: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
26280: LD_ADDR_VAR 0 10
26284: PUSH
26285: LD_VAR 0 10
26289: PPUSH
26290: LD_VAR 0 8
26294: PPUSH
26295: LD_VAR 0 1
26299: PUSH
26300: LD_VAR 0 7
26304: ARRAY
26305: PPUSH
26306: CALL_OW 1
26310: ST_TO_ADDR
// end ;
26311: GO 26224
26313: POP
26314: POP
// array := tmp ;
26315: LD_ADDR_VAR 0 1
26319: PUSH
26320: LD_VAR 0 10
26324: ST_TO_ADDR
// end ;
26325: GO 26206
26327: POP
26328: POP
// result := array ;
26329: LD_ADDR_VAR 0 5
26333: PUSH
26334: LD_VAR 0 1
26338: ST_TO_ADDR
// end ;
26339: LD_VAR 0 5
26343: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
26344: LD_INT 0
26346: PPUSH
26347: PPUSH
// result := 0 ;
26348: LD_ADDR_VAR 0 3
26352: PUSH
26353: LD_INT 0
26355: ST_TO_ADDR
// if not array or not value in array then
26356: LD_VAR 0 1
26360: NOT
26361: PUSH
26362: LD_VAR 0 2
26366: PUSH
26367: LD_VAR 0 1
26371: IN
26372: NOT
26373: OR
26374: IFFALSE 26378
// exit ;
26376: GO 26432
// for i = 1 to array do
26378: LD_ADDR_VAR 0 4
26382: PUSH
26383: DOUBLE
26384: LD_INT 1
26386: DEC
26387: ST_TO_ADDR
26388: LD_VAR 0 1
26392: PUSH
26393: FOR_TO
26394: IFFALSE 26430
// if value = array [ i ] then
26396: LD_VAR 0 2
26400: PUSH
26401: LD_VAR 0 1
26405: PUSH
26406: LD_VAR 0 4
26410: ARRAY
26411: EQUAL
26412: IFFALSE 26428
// begin result := i ;
26414: LD_ADDR_VAR 0 3
26418: PUSH
26419: LD_VAR 0 4
26423: ST_TO_ADDR
// exit ;
26424: POP
26425: POP
26426: GO 26432
// end ;
26428: GO 26393
26430: POP
26431: POP
// end ;
26432: LD_VAR 0 3
26436: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
26437: LD_INT 0
26439: PPUSH
// vc_chassis := chassis ;
26440: LD_ADDR_OWVAR 37
26444: PUSH
26445: LD_VAR 0 1
26449: ST_TO_ADDR
// vc_engine := engine ;
26450: LD_ADDR_OWVAR 39
26454: PUSH
26455: LD_VAR 0 2
26459: ST_TO_ADDR
// vc_control := control ;
26460: LD_ADDR_OWVAR 38
26464: PUSH
26465: LD_VAR 0 3
26469: ST_TO_ADDR
// vc_weapon := weapon ;
26470: LD_ADDR_OWVAR 40
26474: PUSH
26475: LD_VAR 0 4
26479: ST_TO_ADDR
// vc_fuel_battery := fuel ;
26480: LD_ADDR_OWVAR 41
26484: PUSH
26485: LD_VAR 0 5
26489: ST_TO_ADDR
// end ;
26490: LD_VAR 0 6
26494: RET
// export function WantPlant ( unit ) ; var task ; begin
26495: LD_INT 0
26497: PPUSH
26498: PPUSH
// result := false ;
26499: LD_ADDR_VAR 0 2
26503: PUSH
26504: LD_INT 0
26506: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
26507: LD_ADDR_VAR 0 3
26511: PUSH
26512: LD_VAR 0 1
26516: PPUSH
26517: CALL_OW 437
26521: ST_TO_ADDR
// if task then
26522: LD_VAR 0 3
26526: IFFALSE 26554
// if task [ 1 ] [ 1 ] = p then
26528: LD_VAR 0 3
26532: PUSH
26533: LD_INT 1
26535: ARRAY
26536: PUSH
26537: LD_INT 1
26539: ARRAY
26540: PUSH
26541: LD_STRING p
26543: EQUAL
26544: IFFALSE 26554
// result := true ;
26546: LD_ADDR_VAR 0 2
26550: PUSH
26551: LD_INT 1
26553: ST_TO_ADDR
// end ;
26554: LD_VAR 0 2
26558: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
26559: LD_INT 0
26561: PPUSH
26562: PPUSH
26563: PPUSH
26564: PPUSH
// if pos < 1 then
26565: LD_VAR 0 2
26569: PUSH
26570: LD_INT 1
26572: LESS
26573: IFFALSE 26577
// exit ;
26575: GO 26880
// if pos = 1 then
26577: LD_VAR 0 2
26581: PUSH
26582: LD_INT 1
26584: EQUAL
26585: IFFALSE 26618
// result := Replace ( arr , pos [ 1 ] , value ) else
26587: LD_ADDR_VAR 0 4
26591: PUSH
26592: LD_VAR 0 1
26596: PPUSH
26597: LD_VAR 0 2
26601: PUSH
26602: LD_INT 1
26604: ARRAY
26605: PPUSH
26606: LD_VAR 0 3
26610: PPUSH
26611: CALL_OW 1
26615: ST_TO_ADDR
26616: GO 26880
// begin tmp := arr ;
26618: LD_ADDR_VAR 0 6
26622: PUSH
26623: LD_VAR 0 1
26627: ST_TO_ADDR
// s_arr := [ tmp ] ;
26628: LD_ADDR_VAR 0 7
26632: PUSH
26633: LD_VAR 0 6
26637: PUSH
26638: EMPTY
26639: LIST
26640: ST_TO_ADDR
// for i = 1 to pos - 1 do
26641: LD_ADDR_VAR 0 5
26645: PUSH
26646: DOUBLE
26647: LD_INT 1
26649: DEC
26650: ST_TO_ADDR
26651: LD_VAR 0 2
26655: PUSH
26656: LD_INT 1
26658: MINUS
26659: PUSH
26660: FOR_TO
26661: IFFALSE 26706
// begin tmp := tmp [ pos [ i ] ] ;
26663: LD_ADDR_VAR 0 6
26667: PUSH
26668: LD_VAR 0 6
26672: PUSH
26673: LD_VAR 0 2
26677: PUSH
26678: LD_VAR 0 5
26682: ARRAY
26683: ARRAY
26684: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
26685: LD_ADDR_VAR 0 7
26689: PUSH
26690: LD_VAR 0 7
26694: PUSH
26695: LD_VAR 0 6
26699: PUSH
26700: EMPTY
26701: LIST
26702: ADD
26703: ST_TO_ADDR
// end ;
26704: GO 26660
26706: POP
26707: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
26708: LD_ADDR_VAR 0 6
26712: PUSH
26713: LD_VAR 0 6
26717: PPUSH
26718: LD_VAR 0 2
26722: PUSH
26723: LD_VAR 0 2
26727: ARRAY
26728: PPUSH
26729: LD_VAR 0 3
26733: PPUSH
26734: CALL_OW 1
26738: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
26739: LD_ADDR_VAR 0 7
26743: PUSH
26744: LD_VAR 0 7
26748: PPUSH
26749: LD_VAR 0 7
26753: PPUSH
26754: LD_VAR 0 6
26758: PPUSH
26759: CALL_OW 1
26763: ST_TO_ADDR
// for i = s_arr downto 2 do
26764: LD_ADDR_VAR 0 5
26768: PUSH
26769: DOUBLE
26770: LD_VAR 0 7
26774: INC
26775: ST_TO_ADDR
26776: LD_INT 2
26778: PUSH
26779: FOR_DOWNTO
26780: IFFALSE 26864
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
26782: LD_ADDR_VAR 0 6
26786: PUSH
26787: LD_VAR 0 7
26791: PUSH
26792: LD_VAR 0 5
26796: PUSH
26797: LD_INT 1
26799: MINUS
26800: ARRAY
26801: PPUSH
26802: LD_VAR 0 2
26806: PUSH
26807: LD_VAR 0 5
26811: PUSH
26812: LD_INT 1
26814: MINUS
26815: ARRAY
26816: PPUSH
26817: LD_VAR 0 7
26821: PUSH
26822: LD_VAR 0 5
26826: ARRAY
26827: PPUSH
26828: CALL_OW 1
26832: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
26833: LD_ADDR_VAR 0 7
26837: PUSH
26838: LD_VAR 0 7
26842: PPUSH
26843: LD_VAR 0 5
26847: PUSH
26848: LD_INT 1
26850: MINUS
26851: PPUSH
26852: LD_VAR 0 6
26856: PPUSH
26857: CALL_OW 1
26861: ST_TO_ADDR
// end ;
26862: GO 26779
26864: POP
26865: POP
// result := s_arr [ 1 ] ;
26866: LD_ADDR_VAR 0 4
26870: PUSH
26871: LD_VAR 0 7
26875: PUSH
26876: LD_INT 1
26878: ARRAY
26879: ST_TO_ADDR
// end ; end ;
26880: LD_VAR 0 4
26884: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
26885: LD_INT 0
26887: PPUSH
26888: PPUSH
// if not list then
26889: LD_VAR 0 1
26893: NOT
26894: IFFALSE 26898
// exit ;
26896: GO 26989
// i := list [ pos1 ] ;
26898: LD_ADDR_VAR 0 5
26902: PUSH
26903: LD_VAR 0 1
26907: PUSH
26908: LD_VAR 0 2
26912: ARRAY
26913: ST_TO_ADDR
// if not i then
26914: LD_VAR 0 5
26918: NOT
26919: IFFALSE 26923
// exit ;
26921: GO 26989
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
26923: LD_ADDR_VAR 0 1
26927: PUSH
26928: LD_VAR 0 1
26932: PPUSH
26933: LD_VAR 0 2
26937: PPUSH
26938: LD_VAR 0 1
26942: PUSH
26943: LD_VAR 0 3
26947: ARRAY
26948: PPUSH
26949: CALL_OW 1
26953: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
26954: LD_ADDR_VAR 0 1
26958: PUSH
26959: LD_VAR 0 1
26963: PPUSH
26964: LD_VAR 0 3
26968: PPUSH
26969: LD_VAR 0 5
26973: PPUSH
26974: CALL_OW 1
26978: ST_TO_ADDR
// result := list ;
26979: LD_ADDR_VAR 0 4
26983: PUSH
26984: LD_VAR 0 1
26988: ST_TO_ADDR
// end ;
26989: LD_VAR 0 4
26993: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
26994: LD_INT 0
26996: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
26997: LD_ADDR_VAR 0 5
27001: PUSH
27002: LD_VAR 0 1
27006: PPUSH
27007: CALL_OW 250
27011: PPUSH
27012: LD_VAR 0 1
27016: PPUSH
27017: CALL_OW 251
27021: PPUSH
27022: LD_VAR 0 2
27026: PPUSH
27027: LD_VAR 0 3
27031: PPUSH
27032: LD_VAR 0 4
27036: PPUSH
27037: CALL 27047 0 5
27041: ST_TO_ADDR
// end ;
27042: LD_VAR 0 5
27046: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
27047: LD_INT 0
27049: PPUSH
27050: PPUSH
27051: PPUSH
27052: PPUSH
// if not list then
27053: LD_VAR 0 3
27057: NOT
27058: IFFALSE 27062
// exit ;
27060: GO 27450
// result := [ ] ;
27062: LD_ADDR_VAR 0 6
27066: PUSH
27067: EMPTY
27068: ST_TO_ADDR
// for i in list do
27069: LD_ADDR_VAR 0 7
27073: PUSH
27074: LD_VAR 0 3
27078: PUSH
27079: FOR_IN
27080: IFFALSE 27282
// begin tmp := GetDistUnitXY ( i , x , y ) ;
27082: LD_ADDR_VAR 0 9
27086: PUSH
27087: LD_VAR 0 7
27091: PPUSH
27092: LD_VAR 0 1
27096: PPUSH
27097: LD_VAR 0 2
27101: PPUSH
27102: CALL_OW 297
27106: ST_TO_ADDR
// if not result then
27107: LD_VAR 0 6
27111: NOT
27112: IFFALSE 27138
// result := [ [ i , tmp ] ] else
27114: LD_ADDR_VAR 0 6
27118: PUSH
27119: LD_VAR 0 7
27123: PUSH
27124: LD_VAR 0 9
27128: PUSH
27129: EMPTY
27130: LIST
27131: LIST
27132: PUSH
27133: EMPTY
27134: LIST
27135: ST_TO_ADDR
27136: GO 27280
// begin if result [ result ] [ 2 ] < tmp then
27138: LD_VAR 0 6
27142: PUSH
27143: LD_VAR 0 6
27147: ARRAY
27148: PUSH
27149: LD_INT 2
27151: ARRAY
27152: PUSH
27153: LD_VAR 0 9
27157: LESS
27158: IFFALSE 27200
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
27160: LD_ADDR_VAR 0 6
27164: PUSH
27165: LD_VAR 0 6
27169: PPUSH
27170: LD_VAR 0 6
27174: PUSH
27175: LD_INT 1
27177: PLUS
27178: PPUSH
27179: LD_VAR 0 7
27183: PUSH
27184: LD_VAR 0 9
27188: PUSH
27189: EMPTY
27190: LIST
27191: LIST
27192: PPUSH
27193: CALL_OW 2
27197: ST_TO_ADDR
27198: GO 27280
// for j = 1 to result do
27200: LD_ADDR_VAR 0 8
27204: PUSH
27205: DOUBLE
27206: LD_INT 1
27208: DEC
27209: ST_TO_ADDR
27210: LD_VAR 0 6
27214: PUSH
27215: FOR_TO
27216: IFFALSE 27278
// begin if tmp < result [ j ] [ 2 ] then
27218: LD_VAR 0 9
27222: PUSH
27223: LD_VAR 0 6
27227: PUSH
27228: LD_VAR 0 8
27232: ARRAY
27233: PUSH
27234: LD_INT 2
27236: ARRAY
27237: LESS
27238: IFFALSE 27276
// begin result := Insert ( result , j , [ i , tmp ] ) ;
27240: LD_ADDR_VAR 0 6
27244: PUSH
27245: LD_VAR 0 6
27249: PPUSH
27250: LD_VAR 0 8
27254: PPUSH
27255: LD_VAR 0 7
27259: PUSH
27260: LD_VAR 0 9
27264: PUSH
27265: EMPTY
27266: LIST
27267: LIST
27268: PPUSH
27269: CALL_OW 2
27273: ST_TO_ADDR
// break ;
27274: GO 27278
// end ; end ;
27276: GO 27215
27278: POP
27279: POP
// end ; end ;
27280: GO 27079
27282: POP
27283: POP
// if result and not asc then
27284: LD_VAR 0 6
27288: PUSH
27289: LD_VAR 0 4
27293: NOT
27294: AND
27295: IFFALSE 27370
// begin tmp := result ;
27297: LD_ADDR_VAR 0 9
27301: PUSH
27302: LD_VAR 0 6
27306: ST_TO_ADDR
// for i = tmp downto 1 do
27307: LD_ADDR_VAR 0 7
27311: PUSH
27312: DOUBLE
27313: LD_VAR 0 9
27317: INC
27318: ST_TO_ADDR
27319: LD_INT 1
27321: PUSH
27322: FOR_DOWNTO
27323: IFFALSE 27368
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
27325: LD_ADDR_VAR 0 6
27329: PUSH
27330: LD_VAR 0 6
27334: PPUSH
27335: LD_VAR 0 9
27339: PUSH
27340: LD_VAR 0 7
27344: MINUS
27345: PUSH
27346: LD_INT 1
27348: PLUS
27349: PPUSH
27350: LD_VAR 0 9
27354: PUSH
27355: LD_VAR 0 7
27359: ARRAY
27360: PPUSH
27361: CALL_OW 1
27365: ST_TO_ADDR
27366: GO 27322
27368: POP
27369: POP
// end ; tmp := [ ] ;
27370: LD_ADDR_VAR 0 9
27374: PUSH
27375: EMPTY
27376: ST_TO_ADDR
// if mode then
27377: LD_VAR 0 5
27381: IFFALSE 27450
// begin for i = 1 to result do
27383: LD_ADDR_VAR 0 7
27387: PUSH
27388: DOUBLE
27389: LD_INT 1
27391: DEC
27392: ST_TO_ADDR
27393: LD_VAR 0 6
27397: PUSH
27398: FOR_TO
27399: IFFALSE 27438
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
27401: LD_ADDR_VAR 0 9
27405: PUSH
27406: LD_VAR 0 9
27410: PPUSH
27411: LD_VAR 0 7
27415: PPUSH
27416: LD_VAR 0 6
27420: PUSH
27421: LD_VAR 0 7
27425: ARRAY
27426: PUSH
27427: LD_INT 1
27429: ARRAY
27430: PPUSH
27431: CALL_OW 1
27435: ST_TO_ADDR
27436: GO 27398
27438: POP
27439: POP
// result := tmp ;
27440: LD_ADDR_VAR 0 6
27444: PUSH
27445: LD_VAR 0 9
27449: ST_TO_ADDR
// end ; end ;
27450: LD_VAR 0 6
27454: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
27455: LD_INT 0
27457: PPUSH
27458: PPUSH
27459: PPUSH
27460: PPUSH
27461: PPUSH
27462: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
27463: LD_ADDR_VAR 0 5
27467: PUSH
27468: LD_INT 0
27470: PUSH
27471: LD_INT 0
27473: PUSH
27474: LD_INT 0
27476: PUSH
27477: EMPTY
27478: PUSH
27479: EMPTY
27480: LIST
27481: LIST
27482: LIST
27483: LIST
27484: ST_TO_ADDR
// if not x or not y then
27485: LD_VAR 0 2
27489: NOT
27490: PUSH
27491: LD_VAR 0 3
27495: NOT
27496: OR
27497: IFFALSE 27501
// exit ;
27499: GO 29147
// if not range then
27501: LD_VAR 0 4
27505: NOT
27506: IFFALSE 27516
// range := 10 ;
27508: LD_ADDR_VAR 0 4
27512: PUSH
27513: LD_INT 10
27515: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27516: LD_ADDR_VAR 0 8
27520: PUSH
27521: LD_INT 81
27523: PUSH
27524: LD_VAR 0 1
27528: PUSH
27529: EMPTY
27530: LIST
27531: LIST
27532: PUSH
27533: LD_INT 92
27535: PUSH
27536: LD_VAR 0 2
27540: PUSH
27541: LD_VAR 0 3
27545: PUSH
27546: LD_VAR 0 4
27550: PUSH
27551: EMPTY
27552: LIST
27553: LIST
27554: LIST
27555: LIST
27556: PUSH
27557: LD_INT 3
27559: PUSH
27560: LD_INT 21
27562: PUSH
27563: LD_INT 3
27565: PUSH
27566: EMPTY
27567: LIST
27568: LIST
27569: PUSH
27570: EMPTY
27571: LIST
27572: LIST
27573: PUSH
27574: EMPTY
27575: LIST
27576: LIST
27577: LIST
27578: PPUSH
27579: CALL_OW 69
27583: ST_TO_ADDR
// if not tmp then
27584: LD_VAR 0 8
27588: NOT
27589: IFFALSE 27593
// exit ;
27591: GO 29147
// for i in tmp do
27593: LD_ADDR_VAR 0 6
27597: PUSH
27598: LD_VAR 0 8
27602: PUSH
27603: FOR_IN
27604: IFFALSE 29122
// begin points := [ 0 , 0 , 0 ] ;
27606: LD_ADDR_VAR 0 9
27610: PUSH
27611: LD_INT 0
27613: PUSH
27614: LD_INT 0
27616: PUSH
27617: LD_INT 0
27619: PUSH
27620: EMPTY
27621: LIST
27622: LIST
27623: LIST
27624: ST_TO_ADDR
// bpoints := 1 ;
27625: LD_ADDR_VAR 0 10
27629: PUSH
27630: LD_INT 1
27632: ST_TO_ADDR
// case GetType ( i ) of unit_human :
27633: LD_VAR 0 6
27637: PPUSH
27638: CALL_OW 247
27642: PUSH
27643: LD_INT 1
27645: DOUBLE
27646: EQUAL
27647: IFTRUE 27651
27649: GO 28229
27651: POP
// begin if GetClass ( i ) = 1 then
27652: LD_VAR 0 6
27656: PPUSH
27657: CALL_OW 257
27661: PUSH
27662: LD_INT 1
27664: EQUAL
27665: IFFALSE 27686
// points := [ 10 , 5 , 3 ] ;
27667: LD_ADDR_VAR 0 9
27671: PUSH
27672: LD_INT 10
27674: PUSH
27675: LD_INT 5
27677: PUSH
27678: LD_INT 3
27680: PUSH
27681: EMPTY
27682: LIST
27683: LIST
27684: LIST
27685: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
27686: LD_VAR 0 6
27690: PPUSH
27691: CALL_OW 257
27695: PUSH
27696: LD_INT 2
27698: PUSH
27699: LD_INT 3
27701: PUSH
27702: LD_INT 4
27704: PUSH
27705: EMPTY
27706: LIST
27707: LIST
27708: LIST
27709: IN
27710: IFFALSE 27731
// points := [ 3 , 2 , 1 ] ;
27712: LD_ADDR_VAR 0 9
27716: PUSH
27717: LD_INT 3
27719: PUSH
27720: LD_INT 2
27722: PUSH
27723: LD_INT 1
27725: PUSH
27726: EMPTY
27727: LIST
27728: LIST
27729: LIST
27730: ST_TO_ADDR
// if GetClass ( i ) = 5 then
27731: LD_VAR 0 6
27735: PPUSH
27736: CALL_OW 257
27740: PUSH
27741: LD_INT 5
27743: EQUAL
27744: IFFALSE 27765
// points := [ 130 , 5 , 2 ] ;
27746: LD_ADDR_VAR 0 9
27750: PUSH
27751: LD_INT 130
27753: PUSH
27754: LD_INT 5
27756: PUSH
27757: LD_INT 2
27759: PUSH
27760: EMPTY
27761: LIST
27762: LIST
27763: LIST
27764: ST_TO_ADDR
// if GetClass ( i ) = 8 then
27765: LD_VAR 0 6
27769: PPUSH
27770: CALL_OW 257
27774: PUSH
27775: LD_INT 8
27777: EQUAL
27778: IFFALSE 27799
// points := [ 35 , 35 , 30 ] ;
27780: LD_ADDR_VAR 0 9
27784: PUSH
27785: LD_INT 35
27787: PUSH
27788: LD_INT 35
27790: PUSH
27791: LD_INT 30
27793: PUSH
27794: EMPTY
27795: LIST
27796: LIST
27797: LIST
27798: ST_TO_ADDR
// if GetClass ( i ) = 9 then
27799: LD_VAR 0 6
27803: PPUSH
27804: CALL_OW 257
27808: PUSH
27809: LD_INT 9
27811: EQUAL
27812: IFFALSE 27833
// points := [ 20 , 55 , 40 ] ;
27814: LD_ADDR_VAR 0 9
27818: PUSH
27819: LD_INT 20
27821: PUSH
27822: LD_INT 55
27824: PUSH
27825: LD_INT 40
27827: PUSH
27828: EMPTY
27829: LIST
27830: LIST
27831: LIST
27832: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
27833: LD_VAR 0 6
27837: PPUSH
27838: CALL_OW 257
27842: PUSH
27843: LD_INT 12
27845: PUSH
27846: LD_INT 16
27848: PUSH
27849: EMPTY
27850: LIST
27851: LIST
27852: IN
27853: IFFALSE 27874
// points := [ 5 , 3 , 2 ] ;
27855: LD_ADDR_VAR 0 9
27859: PUSH
27860: LD_INT 5
27862: PUSH
27863: LD_INT 3
27865: PUSH
27866: LD_INT 2
27868: PUSH
27869: EMPTY
27870: LIST
27871: LIST
27872: LIST
27873: ST_TO_ADDR
// if GetClass ( i ) = 17 then
27874: LD_VAR 0 6
27878: PPUSH
27879: CALL_OW 257
27883: PUSH
27884: LD_INT 17
27886: EQUAL
27887: IFFALSE 27908
// points := [ 100 , 50 , 75 ] ;
27889: LD_ADDR_VAR 0 9
27893: PUSH
27894: LD_INT 100
27896: PUSH
27897: LD_INT 50
27899: PUSH
27900: LD_INT 75
27902: PUSH
27903: EMPTY
27904: LIST
27905: LIST
27906: LIST
27907: ST_TO_ADDR
// if GetClass ( i ) = 15 then
27908: LD_VAR 0 6
27912: PPUSH
27913: CALL_OW 257
27917: PUSH
27918: LD_INT 15
27920: EQUAL
27921: IFFALSE 27942
// points := [ 10 , 5 , 3 ] ;
27923: LD_ADDR_VAR 0 9
27927: PUSH
27928: LD_INT 10
27930: PUSH
27931: LD_INT 5
27933: PUSH
27934: LD_INT 3
27936: PUSH
27937: EMPTY
27938: LIST
27939: LIST
27940: LIST
27941: ST_TO_ADDR
// if GetClass ( i ) = 14 then
27942: LD_VAR 0 6
27946: PPUSH
27947: CALL_OW 257
27951: PUSH
27952: LD_INT 14
27954: EQUAL
27955: IFFALSE 27976
// points := [ 10 , 0 , 0 ] ;
27957: LD_ADDR_VAR 0 9
27961: PUSH
27962: LD_INT 10
27964: PUSH
27965: LD_INT 0
27967: PUSH
27968: LD_INT 0
27970: PUSH
27971: EMPTY
27972: LIST
27973: LIST
27974: LIST
27975: ST_TO_ADDR
// if GetClass ( i ) = 11 then
27976: LD_VAR 0 6
27980: PPUSH
27981: CALL_OW 257
27985: PUSH
27986: LD_INT 11
27988: EQUAL
27989: IFFALSE 28010
// points := [ 30 , 10 , 5 ] ;
27991: LD_ADDR_VAR 0 9
27995: PUSH
27996: LD_INT 30
27998: PUSH
27999: LD_INT 10
28001: PUSH
28002: LD_INT 5
28004: PUSH
28005: EMPTY
28006: LIST
28007: LIST
28008: LIST
28009: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
28010: LD_VAR 0 1
28014: PPUSH
28015: LD_INT 5
28017: PPUSH
28018: CALL_OW 321
28022: PUSH
28023: LD_INT 2
28025: EQUAL
28026: IFFALSE 28043
// bpoints := bpoints * 1.8 ;
28028: LD_ADDR_VAR 0 10
28032: PUSH
28033: LD_VAR 0 10
28037: PUSH
28038: LD_REAL  1.80000000000000E+0000
28041: MUL
28042: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
28043: LD_VAR 0 6
28047: PPUSH
28048: CALL_OW 257
28052: PUSH
28053: LD_INT 1
28055: PUSH
28056: LD_INT 2
28058: PUSH
28059: LD_INT 3
28061: PUSH
28062: LD_INT 4
28064: PUSH
28065: EMPTY
28066: LIST
28067: LIST
28068: LIST
28069: LIST
28070: IN
28071: PUSH
28072: LD_VAR 0 1
28076: PPUSH
28077: LD_INT 51
28079: PPUSH
28080: CALL_OW 321
28084: PUSH
28085: LD_INT 2
28087: EQUAL
28088: AND
28089: IFFALSE 28106
// bpoints := bpoints * 1.2 ;
28091: LD_ADDR_VAR 0 10
28095: PUSH
28096: LD_VAR 0 10
28100: PUSH
28101: LD_REAL  1.20000000000000E+0000
28104: MUL
28105: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
28106: LD_VAR 0 6
28110: PPUSH
28111: CALL_OW 257
28115: PUSH
28116: LD_INT 5
28118: PUSH
28119: LD_INT 7
28121: PUSH
28122: LD_INT 9
28124: PUSH
28125: EMPTY
28126: LIST
28127: LIST
28128: LIST
28129: IN
28130: PUSH
28131: LD_VAR 0 1
28135: PPUSH
28136: LD_INT 52
28138: PPUSH
28139: CALL_OW 321
28143: PUSH
28144: LD_INT 2
28146: EQUAL
28147: AND
28148: IFFALSE 28165
// bpoints := bpoints * 1.5 ;
28150: LD_ADDR_VAR 0 10
28154: PUSH
28155: LD_VAR 0 10
28159: PUSH
28160: LD_REAL  1.50000000000000E+0000
28163: MUL
28164: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
28165: LD_VAR 0 1
28169: PPUSH
28170: LD_INT 66
28172: PPUSH
28173: CALL_OW 321
28177: PUSH
28178: LD_INT 2
28180: EQUAL
28181: IFFALSE 28198
// bpoints := bpoints * 1.1 ;
28183: LD_ADDR_VAR 0 10
28187: PUSH
28188: LD_VAR 0 10
28192: PUSH
28193: LD_REAL  1.10000000000000E+0000
28196: MUL
28197: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
28198: LD_ADDR_VAR 0 10
28202: PUSH
28203: LD_VAR 0 10
28207: PUSH
28208: LD_VAR 0 6
28212: PPUSH
28213: LD_INT 1
28215: PPUSH
28216: CALL_OW 259
28220: PUSH
28221: LD_REAL  1.15000000000000E+0000
28224: MUL
28225: MUL
28226: ST_TO_ADDR
// end ; unit_vehicle :
28227: GO 29051
28229: LD_INT 2
28231: DOUBLE
28232: EQUAL
28233: IFTRUE 28237
28235: GO 29039
28237: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
28238: LD_VAR 0 6
28242: PPUSH
28243: CALL_OW 264
28247: PUSH
28248: LD_INT 2
28250: PUSH
28251: LD_INT 42
28253: PUSH
28254: LD_INT 24
28256: PUSH
28257: EMPTY
28258: LIST
28259: LIST
28260: LIST
28261: IN
28262: IFFALSE 28283
// points := [ 25 , 5 , 3 ] ;
28264: LD_ADDR_VAR 0 9
28268: PUSH
28269: LD_INT 25
28271: PUSH
28272: LD_INT 5
28274: PUSH
28275: LD_INT 3
28277: PUSH
28278: EMPTY
28279: LIST
28280: LIST
28281: LIST
28282: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
28283: LD_VAR 0 6
28287: PPUSH
28288: CALL_OW 264
28292: PUSH
28293: LD_INT 4
28295: PUSH
28296: LD_INT 43
28298: PUSH
28299: LD_INT 25
28301: PUSH
28302: EMPTY
28303: LIST
28304: LIST
28305: LIST
28306: IN
28307: IFFALSE 28328
// points := [ 40 , 15 , 5 ] ;
28309: LD_ADDR_VAR 0 9
28313: PUSH
28314: LD_INT 40
28316: PUSH
28317: LD_INT 15
28319: PUSH
28320: LD_INT 5
28322: PUSH
28323: EMPTY
28324: LIST
28325: LIST
28326: LIST
28327: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
28328: LD_VAR 0 6
28332: PPUSH
28333: CALL_OW 264
28337: PUSH
28338: LD_INT 3
28340: PUSH
28341: LD_INT 23
28343: PUSH
28344: EMPTY
28345: LIST
28346: LIST
28347: IN
28348: IFFALSE 28369
// points := [ 7 , 25 , 8 ] ;
28350: LD_ADDR_VAR 0 9
28354: PUSH
28355: LD_INT 7
28357: PUSH
28358: LD_INT 25
28360: PUSH
28361: LD_INT 8
28363: PUSH
28364: EMPTY
28365: LIST
28366: LIST
28367: LIST
28368: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
28369: LD_VAR 0 6
28373: PPUSH
28374: CALL_OW 264
28378: PUSH
28379: LD_INT 5
28381: PUSH
28382: LD_INT 27
28384: PUSH
28385: LD_INT 44
28387: PUSH
28388: EMPTY
28389: LIST
28390: LIST
28391: LIST
28392: IN
28393: IFFALSE 28414
// points := [ 14 , 50 , 16 ] ;
28395: LD_ADDR_VAR 0 9
28399: PUSH
28400: LD_INT 14
28402: PUSH
28403: LD_INT 50
28405: PUSH
28406: LD_INT 16
28408: PUSH
28409: EMPTY
28410: LIST
28411: LIST
28412: LIST
28413: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
28414: LD_VAR 0 6
28418: PPUSH
28419: CALL_OW 264
28423: PUSH
28424: LD_INT 6
28426: PUSH
28427: LD_INT 46
28429: PUSH
28430: EMPTY
28431: LIST
28432: LIST
28433: IN
28434: IFFALSE 28455
// points := [ 32 , 120 , 70 ] ;
28436: LD_ADDR_VAR 0 9
28440: PUSH
28441: LD_INT 32
28443: PUSH
28444: LD_INT 120
28446: PUSH
28447: LD_INT 70
28449: PUSH
28450: EMPTY
28451: LIST
28452: LIST
28453: LIST
28454: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
28455: LD_VAR 0 6
28459: PPUSH
28460: CALL_OW 264
28464: PUSH
28465: LD_INT 7
28467: PUSH
28468: LD_INT 28
28470: PUSH
28471: LD_INT 45
28473: PUSH
28474: EMPTY
28475: LIST
28476: LIST
28477: LIST
28478: IN
28479: IFFALSE 28500
// points := [ 35 , 20 , 45 ] ;
28481: LD_ADDR_VAR 0 9
28485: PUSH
28486: LD_INT 35
28488: PUSH
28489: LD_INT 20
28491: PUSH
28492: LD_INT 45
28494: PUSH
28495: EMPTY
28496: LIST
28497: LIST
28498: LIST
28499: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
28500: LD_VAR 0 6
28504: PPUSH
28505: CALL_OW 264
28509: PUSH
28510: LD_INT 47
28512: PUSH
28513: EMPTY
28514: LIST
28515: IN
28516: IFFALSE 28537
// points := [ 67 , 45 , 75 ] ;
28518: LD_ADDR_VAR 0 9
28522: PUSH
28523: LD_INT 67
28525: PUSH
28526: LD_INT 45
28528: PUSH
28529: LD_INT 75
28531: PUSH
28532: EMPTY
28533: LIST
28534: LIST
28535: LIST
28536: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
28537: LD_VAR 0 6
28541: PPUSH
28542: CALL_OW 264
28546: PUSH
28547: LD_INT 26
28549: PUSH
28550: EMPTY
28551: LIST
28552: IN
28553: IFFALSE 28574
// points := [ 120 , 30 , 80 ] ;
28555: LD_ADDR_VAR 0 9
28559: PUSH
28560: LD_INT 120
28562: PUSH
28563: LD_INT 30
28565: PUSH
28566: LD_INT 80
28568: PUSH
28569: EMPTY
28570: LIST
28571: LIST
28572: LIST
28573: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
28574: LD_VAR 0 6
28578: PPUSH
28579: CALL_OW 264
28583: PUSH
28584: LD_INT 22
28586: PUSH
28587: EMPTY
28588: LIST
28589: IN
28590: IFFALSE 28611
// points := [ 40 , 1 , 1 ] ;
28592: LD_ADDR_VAR 0 9
28596: PUSH
28597: LD_INT 40
28599: PUSH
28600: LD_INT 1
28602: PUSH
28603: LD_INT 1
28605: PUSH
28606: EMPTY
28607: LIST
28608: LIST
28609: LIST
28610: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
28611: LD_VAR 0 6
28615: PPUSH
28616: CALL_OW 264
28620: PUSH
28621: LD_INT 29
28623: PUSH
28624: EMPTY
28625: LIST
28626: IN
28627: IFFALSE 28648
// points := [ 70 , 200 , 400 ] ;
28629: LD_ADDR_VAR 0 9
28633: PUSH
28634: LD_INT 70
28636: PUSH
28637: LD_INT 200
28639: PUSH
28640: LD_INT 400
28642: PUSH
28643: EMPTY
28644: LIST
28645: LIST
28646: LIST
28647: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
28648: LD_VAR 0 6
28652: PPUSH
28653: CALL_OW 264
28657: PUSH
28658: LD_INT 14
28660: PUSH
28661: LD_INT 53
28663: PUSH
28664: EMPTY
28665: LIST
28666: LIST
28667: IN
28668: IFFALSE 28689
// points := [ 40 , 10 , 20 ] ;
28670: LD_ADDR_VAR 0 9
28674: PUSH
28675: LD_INT 40
28677: PUSH
28678: LD_INT 10
28680: PUSH
28681: LD_INT 20
28683: PUSH
28684: EMPTY
28685: LIST
28686: LIST
28687: LIST
28688: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
28689: LD_VAR 0 6
28693: PPUSH
28694: CALL_OW 264
28698: PUSH
28699: LD_INT 9
28701: PUSH
28702: EMPTY
28703: LIST
28704: IN
28705: IFFALSE 28726
// points := [ 5 , 70 , 20 ] ;
28707: LD_ADDR_VAR 0 9
28711: PUSH
28712: LD_INT 5
28714: PUSH
28715: LD_INT 70
28717: PUSH
28718: LD_INT 20
28720: PUSH
28721: EMPTY
28722: LIST
28723: LIST
28724: LIST
28725: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
28726: LD_VAR 0 6
28730: PPUSH
28731: CALL_OW 264
28735: PUSH
28736: LD_INT 10
28738: PUSH
28739: EMPTY
28740: LIST
28741: IN
28742: IFFALSE 28763
// points := [ 35 , 110 , 70 ] ;
28744: LD_ADDR_VAR 0 9
28748: PUSH
28749: LD_INT 35
28751: PUSH
28752: LD_INT 110
28754: PUSH
28755: LD_INT 70
28757: PUSH
28758: EMPTY
28759: LIST
28760: LIST
28761: LIST
28762: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
28763: LD_VAR 0 6
28767: PPUSH
28768: CALL_OW 265
28772: PUSH
28773: LD_INT 25
28775: EQUAL
28776: IFFALSE 28797
// points := [ 80 , 65 , 100 ] ;
28778: LD_ADDR_VAR 0 9
28782: PUSH
28783: LD_INT 80
28785: PUSH
28786: LD_INT 65
28788: PUSH
28789: LD_INT 100
28791: PUSH
28792: EMPTY
28793: LIST
28794: LIST
28795: LIST
28796: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
28797: LD_VAR 0 6
28801: PPUSH
28802: CALL_OW 263
28806: PUSH
28807: LD_INT 1
28809: EQUAL
28810: IFFALSE 28845
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
28812: LD_ADDR_VAR 0 10
28816: PUSH
28817: LD_VAR 0 10
28821: PUSH
28822: LD_VAR 0 6
28826: PPUSH
28827: CALL_OW 311
28831: PPUSH
28832: LD_INT 3
28834: PPUSH
28835: CALL_OW 259
28839: PUSH
28840: LD_INT 4
28842: MUL
28843: MUL
28844: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
28845: LD_VAR 0 6
28849: PPUSH
28850: CALL_OW 263
28854: PUSH
28855: LD_INT 2
28857: EQUAL
28858: IFFALSE 28909
// begin j := IsControledBy ( i ) ;
28860: LD_ADDR_VAR 0 7
28864: PUSH
28865: LD_VAR 0 6
28869: PPUSH
28870: CALL_OW 312
28874: ST_TO_ADDR
// if j then
28875: LD_VAR 0 7
28879: IFFALSE 28909
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
28881: LD_ADDR_VAR 0 10
28885: PUSH
28886: LD_VAR 0 10
28890: PUSH
28891: LD_VAR 0 7
28895: PPUSH
28896: LD_INT 3
28898: PPUSH
28899: CALL_OW 259
28903: PUSH
28904: LD_INT 3
28906: MUL
28907: MUL
28908: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
28909: LD_VAR 0 6
28913: PPUSH
28914: CALL_OW 264
28918: PUSH
28919: LD_INT 5
28921: PUSH
28922: LD_INT 6
28924: PUSH
28925: LD_INT 46
28927: PUSH
28928: LD_INT 44
28930: PUSH
28931: LD_INT 47
28933: PUSH
28934: LD_INT 45
28936: PUSH
28937: LD_INT 28
28939: PUSH
28940: LD_INT 7
28942: PUSH
28943: LD_INT 27
28945: PUSH
28946: LD_INT 29
28948: PUSH
28949: EMPTY
28950: LIST
28951: LIST
28952: LIST
28953: LIST
28954: LIST
28955: LIST
28956: LIST
28957: LIST
28958: LIST
28959: LIST
28960: IN
28961: PUSH
28962: LD_VAR 0 1
28966: PPUSH
28967: LD_INT 52
28969: PPUSH
28970: CALL_OW 321
28974: PUSH
28975: LD_INT 2
28977: EQUAL
28978: AND
28979: IFFALSE 28996
// bpoints := bpoints * 1.2 ;
28981: LD_ADDR_VAR 0 10
28985: PUSH
28986: LD_VAR 0 10
28990: PUSH
28991: LD_REAL  1.20000000000000E+0000
28994: MUL
28995: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
28996: LD_VAR 0 6
29000: PPUSH
29001: CALL_OW 264
29005: PUSH
29006: LD_INT 6
29008: PUSH
29009: LD_INT 46
29011: PUSH
29012: LD_INT 47
29014: PUSH
29015: EMPTY
29016: LIST
29017: LIST
29018: LIST
29019: IN
29020: IFFALSE 29037
// bpoints := bpoints * 1.2 ;
29022: LD_ADDR_VAR 0 10
29026: PUSH
29027: LD_VAR 0 10
29031: PUSH
29032: LD_REAL  1.20000000000000E+0000
29035: MUL
29036: ST_TO_ADDR
// end ; unit_building :
29037: GO 29051
29039: LD_INT 3
29041: DOUBLE
29042: EQUAL
29043: IFTRUE 29047
29045: GO 29050
29047: POP
// ; end ;
29048: GO 29051
29050: POP
// for j = 1 to 3 do
29051: LD_ADDR_VAR 0 7
29055: PUSH
29056: DOUBLE
29057: LD_INT 1
29059: DEC
29060: ST_TO_ADDR
29061: LD_INT 3
29063: PUSH
29064: FOR_TO
29065: IFFALSE 29118
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
29067: LD_ADDR_VAR 0 5
29071: PUSH
29072: LD_VAR 0 5
29076: PPUSH
29077: LD_VAR 0 7
29081: PPUSH
29082: LD_VAR 0 5
29086: PUSH
29087: LD_VAR 0 7
29091: ARRAY
29092: PUSH
29093: LD_VAR 0 9
29097: PUSH
29098: LD_VAR 0 7
29102: ARRAY
29103: PUSH
29104: LD_VAR 0 10
29108: MUL
29109: PLUS
29110: PPUSH
29111: CALL_OW 1
29115: ST_TO_ADDR
29116: GO 29064
29118: POP
29119: POP
// end ;
29120: GO 27603
29122: POP
29123: POP
// result := Replace ( result , 4 , tmp ) ;
29124: LD_ADDR_VAR 0 5
29128: PUSH
29129: LD_VAR 0 5
29133: PPUSH
29134: LD_INT 4
29136: PPUSH
29137: LD_VAR 0 8
29141: PPUSH
29142: CALL_OW 1
29146: ST_TO_ADDR
// end ;
29147: LD_VAR 0 5
29151: RET
// export function DangerAtRange ( unit , range ) ; begin
29152: LD_INT 0
29154: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
29155: LD_ADDR_VAR 0 3
29159: PUSH
29160: LD_VAR 0 1
29164: PPUSH
29165: CALL_OW 255
29169: PPUSH
29170: LD_VAR 0 1
29174: PPUSH
29175: CALL_OW 250
29179: PPUSH
29180: LD_VAR 0 1
29184: PPUSH
29185: CALL_OW 251
29189: PPUSH
29190: LD_VAR 0 2
29194: PPUSH
29195: CALL 27455 0 4
29199: ST_TO_ADDR
// end ;
29200: LD_VAR 0 3
29204: RET
// export function DangerInArea ( side , area ) ; begin
29205: LD_INT 0
29207: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
29208: LD_ADDR_VAR 0 3
29212: PUSH
29213: LD_VAR 0 2
29217: PPUSH
29218: LD_INT 81
29220: PUSH
29221: LD_VAR 0 1
29225: PUSH
29226: EMPTY
29227: LIST
29228: LIST
29229: PPUSH
29230: CALL_OW 70
29234: ST_TO_ADDR
// end ;
29235: LD_VAR 0 3
29239: RET
// export function IsExtension ( b ) ; begin
29240: LD_INT 0
29242: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
29243: LD_ADDR_VAR 0 2
29247: PUSH
29248: LD_VAR 0 1
29252: PUSH
29253: LD_INT 23
29255: PUSH
29256: LD_INT 20
29258: PUSH
29259: LD_INT 22
29261: PUSH
29262: LD_INT 17
29264: PUSH
29265: LD_INT 24
29267: PUSH
29268: LD_INT 21
29270: PUSH
29271: LD_INT 19
29273: PUSH
29274: LD_INT 16
29276: PUSH
29277: LD_INT 25
29279: PUSH
29280: LD_INT 18
29282: PUSH
29283: EMPTY
29284: LIST
29285: LIST
29286: LIST
29287: LIST
29288: LIST
29289: LIST
29290: LIST
29291: LIST
29292: LIST
29293: LIST
29294: IN
29295: ST_TO_ADDR
// end ;
29296: LD_VAR 0 2
29300: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
29301: LD_INT 0
29303: PPUSH
29304: PPUSH
29305: PPUSH
// result := [ ] ;
29306: LD_ADDR_VAR 0 3
29310: PUSH
29311: EMPTY
29312: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
29313: LD_ADDR_VAR 0 4
29317: PUSH
29318: LD_VAR 0 2
29322: PPUSH
29323: LD_INT 21
29325: PUSH
29326: LD_INT 3
29328: PUSH
29329: EMPTY
29330: LIST
29331: LIST
29332: PPUSH
29333: CALL_OW 70
29337: ST_TO_ADDR
// if not tmp then
29338: LD_VAR 0 4
29342: NOT
29343: IFFALSE 29347
// exit ;
29345: GO 29405
// for i in tmp do
29347: LD_ADDR_VAR 0 5
29351: PUSH
29352: LD_VAR 0 4
29356: PUSH
29357: FOR_IN
29358: IFFALSE 29393
// if GetBase ( i ) <> base then
29360: LD_VAR 0 5
29364: PPUSH
29365: CALL_OW 274
29369: PUSH
29370: LD_VAR 0 1
29374: NONEQUAL
29375: IFFALSE 29391
// ComLinkToBase ( base , i ) ;
29377: LD_VAR 0 1
29381: PPUSH
29382: LD_VAR 0 5
29386: PPUSH
29387: CALL_OW 169
29391: GO 29357
29393: POP
29394: POP
// result := tmp ;
29395: LD_ADDR_VAR 0 3
29399: PUSH
29400: LD_VAR 0 4
29404: ST_TO_ADDR
// end ;
29405: LD_VAR 0 3
29409: RET
// export function ComComplete ( unit , b ) ; var i ; begin
29410: LD_INT 0
29412: PPUSH
29413: PPUSH
// if BuildingStatus ( b ) = bs_build then
29414: LD_VAR 0 2
29418: PPUSH
29419: CALL_OW 461
29423: PUSH
29424: LD_INT 1
29426: EQUAL
29427: IFFALSE 29487
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
29429: LD_VAR 0 1
29433: PPUSH
29434: LD_STRING h
29436: PUSH
29437: LD_VAR 0 2
29441: PPUSH
29442: CALL_OW 250
29446: PUSH
29447: LD_VAR 0 2
29451: PPUSH
29452: CALL_OW 251
29456: PUSH
29457: LD_VAR 0 2
29461: PUSH
29462: LD_INT 0
29464: PUSH
29465: LD_INT 0
29467: PUSH
29468: LD_INT 0
29470: PUSH
29471: EMPTY
29472: LIST
29473: LIST
29474: LIST
29475: LIST
29476: LIST
29477: LIST
29478: LIST
29479: PUSH
29480: EMPTY
29481: LIST
29482: PPUSH
29483: CALL_OW 446
// end ;
29487: LD_VAR 0 3
29491: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
29492: LD_INT 0
29494: PPUSH
29495: PPUSH
29496: PPUSH
29497: PPUSH
29498: PPUSH
29499: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
29500: LD_VAR 0 1
29504: NOT
29505: PUSH
29506: LD_VAR 0 1
29510: PPUSH
29511: CALL_OW 263
29515: PUSH
29516: LD_INT 2
29518: EQUAL
29519: NOT
29520: OR
29521: IFFALSE 29525
// exit ;
29523: GO 29841
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
29525: LD_ADDR_VAR 0 6
29529: PUSH
29530: LD_INT 22
29532: PUSH
29533: LD_VAR 0 1
29537: PPUSH
29538: CALL_OW 255
29542: PUSH
29543: EMPTY
29544: LIST
29545: LIST
29546: PUSH
29547: LD_INT 2
29549: PUSH
29550: LD_INT 30
29552: PUSH
29553: LD_INT 36
29555: PUSH
29556: EMPTY
29557: LIST
29558: LIST
29559: PUSH
29560: LD_INT 34
29562: PUSH
29563: LD_INT 31
29565: PUSH
29566: EMPTY
29567: LIST
29568: LIST
29569: PUSH
29570: EMPTY
29571: LIST
29572: LIST
29573: LIST
29574: PUSH
29575: EMPTY
29576: LIST
29577: LIST
29578: PPUSH
29579: CALL_OW 69
29583: ST_TO_ADDR
// if not tmp then
29584: LD_VAR 0 6
29588: NOT
29589: IFFALSE 29593
// exit ;
29591: GO 29841
// result := [ ] ;
29593: LD_ADDR_VAR 0 2
29597: PUSH
29598: EMPTY
29599: ST_TO_ADDR
// for i in tmp do
29600: LD_ADDR_VAR 0 3
29604: PUSH
29605: LD_VAR 0 6
29609: PUSH
29610: FOR_IN
29611: IFFALSE 29682
// begin t := UnitsInside ( i ) ;
29613: LD_ADDR_VAR 0 4
29617: PUSH
29618: LD_VAR 0 3
29622: PPUSH
29623: CALL_OW 313
29627: ST_TO_ADDR
// if t then
29628: LD_VAR 0 4
29632: IFFALSE 29680
// for j in t do
29634: LD_ADDR_VAR 0 7
29638: PUSH
29639: LD_VAR 0 4
29643: PUSH
29644: FOR_IN
29645: IFFALSE 29678
// result := Insert ( result , result + 1 , j ) ;
29647: LD_ADDR_VAR 0 2
29651: PUSH
29652: LD_VAR 0 2
29656: PPUSH
29657: LD_VAR 0 2
29661: PUSH
29662: LD_INT 1
29664: PLUS
29665: PPUSH
29666: LD_VAR 0 7
29670: PPUSH
29671: CALL_OW 2
29675: ST_TO_ADDR
29676: GO 29644
29678: POP
29679: POP
// end ;
29680: GO 29610
29682: POP
29683: POP
// if not result then
29684: LD_VAR 0 2
29688: NOT
29689: IFFALSE 29693
// exit ;
29691: GO 29841
// mech := result [ 1 ] ;
29693: LD_ADDR_VAR 0 5
29697: PUSH
29698: LD_VAR 0 2
29702: PUSH
29703: LD_INT 1
29705: ARRAY
29706: ST_TO_ADDR
// if result > 1 then
29707: LD_VAR 0 2
29711: PUSH
29712: LD_INT 1
29714: GREATER
29715: IFFALSE 29827
// for i = 2 to result do
29717: LD_ADDR_VAR 0 3
29721: PUSH
29722: DOUBLE
29723: LD_INT 2
29725: DEC
29726: ST_TO_ADDR
29727: LD_VAR 0 2
29731: PUSH
29732: FOR_TO
29733: IFFALSE 29825
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
29735: LD_ADDR_VAR 0 4
29739: PUSH
29740: LD_VAR 0 2
29744: PUSH
29745: LD_VAR 0 3
29749: ARRAY
29750: PPUSH
29751: LD_INT 3
29753: PPUSH
29754: CALL_OW 259
29758: PUSH
29759: LD_VAR 0 2
29763: PUSH
29764: LD_VAR 0 3
29768: ARRAY
29769: PPUSH
29770: CALL_OW 432
29774: MINUS
29775: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
29776: LD_VAR 0 4
29780: PUSH
29781: LD_VAR 0 5
29785: PPUSH
29786: LD_INT 3
29788: PPUSH
29789: CALL_OW 259
29793: PUSH
29794: LD_VAR 0 5
29798: PPUSH
29799: CALL_OW 432
29803: MINUS
29804: GREATEREQUAL
29805: IFFALSE 29823
// mech := result [ i ] ;
29807: LD_ADDR_VAR 0 5
29811: PUSH
29812: LD_VAR 0 2
29816: PUSH
29817: LD_VAR 0 3
29821: ARRAY
29822: ST_TO_ADDR
// end ;
29823: GO 29732
29825: POP
29826: POP
// ComLinkTo ( vehicle , mech ) ;
29827: LD_VAR 0 1
29831: PPUSH
29832: LD_VAR 0 5
29836: PPUSH
29837: CALL_OW 135
// end ;
29841: LD_VAR 0 2
29845: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
29846: LD_INT 0
29848: PPUSH
29849: PPUSH
29850: PPUSH
29851: PPUSH
29852: PPUSH
29853: PPUSH
29854: PPUSH
29855: PPUSH
29856: PPUSH
29857: PPUSH
29858: PPUSH
29859: PPUSH
29860: PPUSH
// result := [ ] ;
29861: LD_ADDR_VAR 0 7
29865: PUSH
29866: EMPTY
29867: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
29868: LD_VAR 0 1
29872: PPUSH
29873: CALL_OW 266
29877: PUSH
29878: LD_INT 0
29880: PUSH
29881: LD_INT 1
29883: PUSH
29884: EMPTY
29885: LIST
29886: LIST
29887: IN
29888: NOT
29889: IFFALSE 29893
// exit ;
29891: GO 31524
// if name then
29893: LD_VAR 0 3
29897: IFFALSE 29913
// SetBName ( base_dep , name ) ;
29899: LD_VAR 0 1
29903: PPUSH
29904: LD_VAR 0 3
29908: PPUSH
29909: CALL_OW 500
// base := GetBase ( base_dep ) ;
29913: LD_ADDR_VAR 0 15
29917: PUSH
29918: LD_VAR 0 1
29922: PPUSH
29923: CALL_OW 274
29927: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
29928: LD_ADDR_VAR 0 16
29932: PUSH
29933: LD_VAR 0 1
29937: PPUSH
29938: CALL_OW 255
29942: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
29943: LD_ADDR_VAR 0 17
29947: PUSH
29948: LD_VAR 0 1
29952: PPUSH
29953: CALL_OW 248
29957: ST_TO_ADDR
// if sources then
29958: LD_VAR 0 5
29962: IFFALSE 30009
// for i = 1 to 3 do
29964: LD_ADDR_VAR 0 8
29968: PUSH
29969: DOUBLE
29970: LD_INT 1
29972: DEC
29973: ST_TO_ADDR
29974: LD_INT 3
29976: PUSH
29977: FOR_TO
29978: IFFALSE 30007
// AddResourceType ( base , i , sources [ i ] ) ;
29980: LD_VAR 0 15
29984: PPUSH
29985: LD_VAR 0 8
29989: PPUSH
29990: LD_VAR 0 5
29994: PUSH
29995: LD_VAR 0 8
29999: ARRAY
30000: PPUSH
30001: CALL_OW 276
30005: GO 29977
30007: POP
30008: POP
// buildings := GetBaseBuildings ( base , area ) ;
30009: LD_ADDR_VAR 0 18
30013: PUSH
30014: LD_VAR 0 15
30018: PPUSH
30019: LD_VAR 0 2
30023: PPUSH
30024: CALL 29301 0 2
30028: ST_TO_ADDR
// InitHc ;
30029: CALL_OW 19
// InitUc ;
30033: CALL_OW 18
// uc_side := side ;
30037: LD_ADDR_OWVAR 20
30041: PUSH
30042: LD_VAR 0 16
30046: ST_TO_ADDR
// uc_nation := nation ;
30047: LD_ADDR_OWVAR 21
30051: PUSH
30052: LD_VAR 0 17
30056: ST_TO_ADDR
// if buildings then
30057: LD_VAR 0 18
30061: IFFALSE 31383
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
30063: LD_ADDR_VAR 0 19
30067: PUSH
30068: LD_VAR 0 18
30072: PPUSH
30073: LD_INT 2
30075: PUSH
30076: LD_INT 30
30078: PUSH
30079: LD_INT 29
30081: PUSH
30082: EMPTY
30083: LIST
30084: LIST
30085: PUSH
30086: LD_INT 30
30088: PUSH
30089: LD_INT 30
30091: PUSH
30092: EMPTY
30093: LIST
30094: LIST
30095: PUSH
30096: EMPTY
30097: LIST
30098: LIST
30099: LIST
30100: PPUSH
30101: CALL_OW 72
30105: ST_TO_ADDR
// if tmp then
30106: LD_VAR 0 19
30110: IFFALSE 30158
// for i in tmp do
30112: LD_ADDR_VAR 0 8
30116: PUSH
30117: LD_VAR 0 19
30121: PUSH
30122: FOR_IN
30123: IFFALSE 30156
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
30125: LD_VAR 0 8
30129: PPUSH
30130: CALL_OW 250
30134: PPUSH
30135: LD_VAR 0 8
30139: PPUSH
30140: CALL_OW 251
30144: PPUSH
30145: LD_VAR 0 16
30149: PPUSH
30150: CALL_OW 441
30154: GO 30122
30156: POP
30157: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
30158: LD_VAR 0 18
30162: PPUSH
30163: LD_INT 2
30165: PUSH
30166: LD_INT 30
30168: PUSH
30169: LD_INT 32
30171: PUSH
30172: EMPTY
30173: LIST
30174: LIST
30175: PUSH
30176: LD_INT 30
30178: PUSH
30179: LD_INT 33
30181: PUSH
30182: EMPTY
30183: LIST
30184: LIST
30185: PUSH
30186: EMPTY
30187: LIST
30188: LIST
30189: LIST
30190: PPUSH
30191: CALL_OW 72
30195: IFFALSE 30283
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
30197: LD_ADDR_VAR 0 8
30201: PUSH
30202: LD_VAR 0 18
30206: PPUSH
30207: LD_INT 2
30209: PUSH
30210: LD_INT 30
30212: PUSH
30213: LD_INT 32
30215: PUSH
30216: EMPTY
30217: LIST
30218: LIST
30219: PUSH
30220: LD_INT 30
30222: PUSH
30223: LD_INT 33
30225: PUSH
30226: EMPTY
30227: LIST
30228: LIST
30229: PUSH
30230: EMPTY
30231: LIST
30232: LIST
30233: LIST
30234: PPUSH
30235: CALL_OW 72
30239: PUSH
30240: FOR_IN
30241: IFFALSE 30281
// begin if not GetBWeapon ( i ) then
30243: LD_VAR 0 8
30247: PPUSH
30248: CALL_OW 269
30252: NOT
30253: IFFALSE 30279
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
30255: LD_VAR 0 8
30259: PPUSH
30260: LD_VAR 0 8
30264: PPUSH
30265: LD_VAR 0 2
30269: PPUSH
30270: CALL 31529 0 2
30274: PPUSH
30275: CALL_OW 431
// end ;
30279: GO 30240
30281: POP
30282: POP
// end ; for i = 1 to personel do
30283: LD_ADDR_VAR 0 8
30287: PUSH
30288: DOUBLE
30289: LD_INT 1
30291: DEC
30292: ST_TO_ADDR
30293: LD_VAR 0 6
30297: PUSH
30298: FOR_TO
30299: IFFALSE 31363
// begin if i > 4 then
30301: LD_VAR 0 8
30305: PUSH
30306: LD_INT 4
30308: GREATER
30309: IFFALSE 30313
// break ;
30311: GO 31363
// case i of 1 :
30313: LD_VAR 0 8
30317: PUSH
30318: LD_INT 1
30320: DOUBLE
30321: EQUAL
30322: IFTRUE 30326
30324: GO 30406
30326: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
30327: LD_ADDR_VAR 0 12
30331: PUSH
30332: LD_VAR 0 18
30336: PPUSH
30337: LD_INT 22
30339: PUSH
30340: LD_VAR 0 16
30344: PUSH
30345: EMPTY
30346: LIST
30347: LIST
30348: PUSH
30349: LD_INT 58
30351: PUSH
30352: EMPTY
30353: LIST
30354: PUSH
30355: LD_INT 2
30357: PUSH
30358: LD_INT 30
30360: PUSH
30361: LD_INT 32
30363: PUSH
30364: EMPTY
30365: LIST
30366: LIST
30367: PUSH
30368: LD_INT 30
30370: PUSH
30371: LD_INT 4
30373: PUSH
30374: EMPTY
30375: LIST
30376: LIST
30377: PUSH
30378: LD_INT 30
30380: PUSH
30381: LD_INT 5
30383: PUSH
30384: EMPTY
30385: LIST
30386: LIST
30387: PUSH
30388: EMPTY
30389: LIST
30390: LIST
30391: LIST
30392: LIST
30393: PUSH
30394: EMPTY
30395: LIST
30396: LIST
30397: LIST
30398: PPUSH
30399: CALL_OW 72
30403: ST_TO_ADDR
30404: GO 30628
30406: LD_INT 2
30408: DOUBLE
30409: EQUAL
30410: IFTRUE 30414
30412: GO 30476
30414: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
30415: LD_ADDR_VAR 0 12
30419: PUSH
30420: LD_VAR 0 18
30424: PPUSH
30425: LD_INT 22
30427: PUSH
30428: LD_VAR 0 16
30432: PUSH
30433: EMPTY
30434: LIST
30435: LIST
30436: PUSH
30437: LD_INT 2
30439: PUSH
30440: LD_INT 30
30442: PUSH
30443: LD_INT 0
30445: PUSH
30446: EMPTY
30447: LIST
30448: LIST
30449: PUSH
30450: LD_INT 30
30452: PUSH
30453: LD_INT 1
30455: PUSH
30456: EMPTY
30457: LIST
30458: LIST
30459: PUSH
30460: EMPTY
30461: LIST
30462: LIST
30463: LIST
30464: PUSH
30465: EMPTY
30466: LIST
30467: LIST
30468: PPUSH
30469: CALL_OW 72
30473: ST_TO_ADDR
30474: GO 30628
30476: LD_INT 3
30478: DOUBLE
30479: EQUAL
30480: IFTRUE 30484
30482: GO 30546
30484: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
30485: LD_ADDR_VAR 0 12
30489: PUSH
30490: LD_VAR 0 18
30494: PPUSH
30495: LD_INT 22
30497: PUSH
30498: LD_VAR 0 16
30502: PUSH
30503: EMPTY
30504: LIST
30505: LIST
30506: PUSH
30507: LD_INT 2
30509: PUSH
30510: LD_INT 30
30512: PUSH
30513: LD_INT 2
30515: PUSH
30516: EMPTY
30517: LIST
30518: LIST
30519: PUSH
30520: LD_INT 30
30522: PUSH
30523: LD_INT 3
30525: PUSH
30526: EMPTY
30527: LIST
30528: LIST
30529: PUSH
30530: EMPTY
30531: LIST
30532: LIST
30533: LIST
30534: PUSH
30535: EMPTY
30536: LIST
30537: LIST
30538: PPUSH
30539: CALL_OW 72
30543: ST_TO_ADDR
30544: GO 30628
30546: LD_INT 4
30548: DOUBLE
30549: EQUAL
30550: IFTRUE 30554
30552: GO 30627
30554: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
30555: LD_ADDR_VAR 0 12
30559: PUSH
30560: LD_VAR 0 18
30564: PPUSH
30565: LD_INT 22
30567: PUSH
30568: LD_VAR 0 16
30572: PUSH
30573: EMPTY
30574: LIST
30575: LIST
30576: PUSH
30577: LD_INT 2
30579: PUSH
30580: LD_INT 30
30582: PUSH
30583: LD_INT 6
30585: PUSH
30586: EMPTY
30587: LIST
30588: LIST
30589: PUSH
30590: LD_INT 30
30592: PUSH
30593: LD_INT 7
30595: PUSH
30596: EMPTY
30597: LIST
30598: LIST
30599: PUSH
30600: LD_INT 30
30602: PUSH
30603: LD_INT 8
30605: PUSH
30606: EMPTY
30607: LIST
30608: LIST
30609: PUSH
30610: EMPTY
30611: LIST
30612: LIST
30613: LIST
30614: LIST
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: PPUSH
30620: CALL_OW 72
30624: ST_TO_ADDR
30625: GO 30628
30627: POP
// if i = 1 then
30628: LD_VAR 0 8
30632: PUSH
30633: LD_INT 1
30635: EQUAL
30636: IFFALSE 30747
// begin tmp := [ ] ;
30638: LD_ADDR_VAR 0 19
30642: PUSH
30643: EMPTY
30644: ST_TO_ADDR
// for j in f do
30645: LD_ADDR_VAR 0 9
30649: PUSH
30650: LD_VAR 0 12
30654: PUSH
30655: FOR_IN
30656: IFFALSE 30729
// if GetBType ( j ) = b_bunker then
30658: LD_VAR 0 9
30662: PPUSH
30663: CALL_OW 266
30667: PUSH
30668: LD_INT 32
30670: EQUAL
30671: IFFALSE 30698
// tmp := Insert ( tmp , 1 , j ) else
30673: LD_ADDR_VAR 0 19
30677: PUSH
30678: LD_VAR 0 19
30682: PPUSH
30683: LD_INT 1
30685: PPUSH
30686: LD_VAR 0 9
30690: PPUSH
30691: CALL_OW 2
30695: ST_TO_ADDR
30696: GO 30727
// tmp := Insert ( tmp , tmp + 1 , j ) ;
30698: LD_ADDR_VAR 0 19
30702: PUSH
30703: LD_VAR 0 19
30707: PPUSH
30708: LD_VAR 0 19
30712: PUSH
30713: LD_INT 1
30715: PLUS
30716: PPUSH
30717: LD_VAR 0 9
30721: PPUSH
30722: CALL_OW 2
30726: ST_TO_ADDR
30727: GO 30655
30729: POP
30730: POP
// if tmp then
30731: LD_VAR 0 19
30735: IFFALSE 30747
// f := tmp ;
30737: LD_ADDR_VAR 0 12
30741: PUSH
30742: LD_VAR 0 19
30746: ST_TO_ADDR
// end ; x := personel [ i ] ;
30747: LD_ADDR_VAR 0 13
30751: PUSH
30752: LD_VAR 0 6
30756: PUSH
30757: LD_VAR 0 8
30761: ARRAY
30762: ST_TO_ADDR
// if x = - 1 then
30763: LD_VAR 0 13
30767: PUSH
30768: LD_INT 1
30770: NEG
30771: EQUAL
30772: IFFALSE 30981
// begin for j in f do
30774: LD_ADDR_VAR 0 9
30778: PUSH
30779: LD_VAR 0 12
30783: PUSH
30784: FOR_IN
30785: IFFALSE 30977
// repeat InitHc ;
30787: CALL_OW 19
// if GetBType ( j ) = b_barracks then
30791: LD_VAR 0 9
30795: PPUSH
30796: CALL_OW 266
30800: PUSH
30801: LD_INT 5
30803: EQUAL
30804: IFFALSE 30874
// begin if UnitsInside ( j ) < 3 then
30806: LD_VAR 0 9
30810: PPUSH
30811: CALL_OW 313
30815: PUSH
30816: LD_INT 3
30818: LESS
30819: IFFALSE 30855
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30821: LD_INT 0
30823: PPUSH
30824: LD_INT 5
30826: PUSH
30827: LD_INT 8
30829: PUSH
30830: LD_INT 9
30832: PUSH
30833: EMPTY
30834: LIST
30835: LIST
30836: LIST
30837: PUSH
30838: LD_VAR 0 17
30842: ARRAY
30843: PPUSH
30844: LD_VAR 0 4
30848: PPUSH
30849: CALL_OW 380
30853: GO 30872
// PrepareHuman ( false , i , skill ) ;
30855: LD_INT 0
30857: PPUSH
30858: LD_VAR 0 8
30862: PPUSH
30863: LD_VAR 0 4
30867: PPUSH
30868: CALL_OW 380
// end else
30872: GO 30891
// PrepareHuman ( false , i , skill ) ;
30874: LD_INT 0
30876: PPUSH
30877: LD_VAR 0 8
30881: PPUSH
30882: LD_VAR 0 4
30886: PPUSH
30887: CALL_OW 380
// un := CreateHuman ;
30891: LD_ADDR_VAR 0 14
30895: PUSH
30896: CALL_OW 44
30900: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30901: LD_ADDR_VAR 0 7
30905: PUSH
30906: LD_VAR 0 7
30910: PPUSH
30911: LD_INT 1
30913: PPUSH
30914: LD_VAR 0 14
30918: PPUSH
30919: CALL_OW 2
30923: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
30924: LD_VAR 0 14
30928: PPUSH
30929: LD_VAR 0 9
30933: PPUSH
30934: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
30938: LD_VAR 0 9
30942: PPUSH
30943: CALL_OW 313
30947: PUSH
30948: LD_INT 6
30950: EQUAL
30951: PUSH
30952: LD_VAR 0 9
30956: PPUSH
30957: CALL_OW 266
30961: PUSH
30962: LD_INT 32
30964: PUSH
30965: LD_INT 31
30967: PUSH
30968: EMPTY
30969: LIST
30970: LIST
30971: IN
30972: OR
30973: IFFALSE 30787
30975: GO 30784
30977: POP
30978: POP
// end else
30979: GO 31361
// for j = 1 to x do
30981: LD_ADDR_VAR 0 9
30985: PUSH
30986: DOUBLE
30987: LD_INT 1
30989: DEC
30990: ST_TO_ADDR
30991: LD_VAR 0 13
30995: PUSH
30996: FOR_TO
30997: IFFALSE 31359
// begin InitHc ;
30999: CALL_OW 19
// if not f then
31003: LD_VAR 0 12
31007: NOT
31008: IFFALSE 31097
// begin PrepareHuman ( false , i , skill ) ;
31010: LD_INT 0
31012: PPUSH
31013: LD_VAR 0 8
31017: PPUSH
31018: LD_VAR 0 4
31022: PPUSH
31023: CALL_OW 380
// un := CreateHuman ;
31027: LD_ADDR_VAR 0 14
31031: PUSH
31032: CALL_OW 44
31036: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31037: LD_ADDR_VAR 0 7
31041: PUSH
31042: LD_VAR 0 7
31046: PPUSH
31047: LD_INT 1
31049: PPUSH
31050: LD_VAR 0 14
31054: PPUSH
31055: CALL_OW 2
31059: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31060: LD_VAR 0 14
31064: PPUSH
31065: LD_VAR 0 1
31069: PPUSH
31070: CALL_OW 250
31074: PPUSH
31075: LD_VAR 0 1
31079: PPUSH
31080: CALL_OW 251
31084: PPUSH
31085: LD_INT 10
31087: PPUSH
31088: LD_INT 0
31090: PPUSH
31091: CALL_OW 50
// continue ;
31095: GO 30996
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
31097: LD_VAR 0 12
31101: PUSH
31102: LD_INT 1
31104: ARRAY
31105: PPUSH
31106: CALL_OW 313
31110: PUSH
31111: LD_VAR 0 12
31115: PUSH
31116: LD_INT 1
31118: ARRAY
31119: PPUSH
31120: CALL_OW 266
31124: PUSH
31125: LD_INT 32
31127: PUSH
31128: LD_INT 31
31130: PUSH
31131: EMPTY
31132: LIST
31133: LIST
31134: IN
31135: AND
31136: PUSH
31137: LD_VAR 0 12
31141: PUSH
31142: LD_INT 1
31144: ARRAY
31145: PPUSH
31146: CALL_OW 313
31150: PUSH
31151: LD_INT 6
31153: EQUAL
31154: OR
31155: IFFALSE 31175
// f := Delete ( f , 1 ) ;
31157: LD_ADDR_VAR 0 12
31161: PUSH
31162: LD_VAR 0 12
31166: PPUSH
31167: LD_INT 1
31169: PPUSH
31170: CALL_OW 3
31174: ST_TO_ADDR
// if not f then
31175: LD_VAR 0 12
31179: NOT
31180: IFFALSE 31198
// begin x := x + 2 ;
31182: LD_ADDR_VAR 0 13
31186: PUSH
31187: LD_VAR 0 13
31191: PUSH
31192: LD_INT 2
31194: PLUS
31195: ST_TO_ADDR
// continue ;
31196: GO 30996
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
31198: LD_VAR 0 12
31202: PUSH
31203: LD_INT 1
31205: ARRAY
31206: PPUSH
31207: CALL_OW 266
31211: PUSH
31212: LD_INT 5
31214: EQUAL
31215: IFFALSE 31289
// begin if UnitsInside ( f [ 1 ] ) < 3 then
31217: LD_VAR 0 12
31221: PUSH
31222: LD_INT 1
31224: ARRAY
31225: PPUSH
31226: CALL_OW 313
31230: PUSH
31231: LD_INT 3
31233: LESS
31234: IFFALSE 31270
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31236: LD_INT 0
31238: PPUSH
31239: LD_INT 5
31241: PUSH
31242: LD_INT 8
31244: PUSH
31245: LD_INT 9
31247: PUSH
31248: EMPTY
31249: LIST
31250: LIST
31251: LIST
31252: PUSH
31253: LD_VAR 0 17
31257: ARRAY
31258: PPUSH
31259: LD_VAR 0 4
31263: PPUSH
31264: CALL_OW 380
31268: GO 31287
// PrepareHuman ( false , i , skill ) ;
31270: LD_INT 0
31272: PPUSH
31273: LD_VAR 0 8
31277: PPUSH
31278: LD_VAR 0 4
31282: PPUSH
31283: CALL_OW 380
// end else
31287: GO 31306
// PrepareHuman ( false , i , skill ) ;
31289: LD_INT 0
31291: PPUSH
31292: LD_VAR 0 8
31296: PPUSH
31297: LD_VAR 0 4
31301: PPUSH
31302: CALL_OW 380
// un := CreateHuman ;
31306: LD_ADDR_VAR 0 14
31310: PUSH
31311: CALL_OW 44
31315: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31316: LD_ADDR_VAR 0 7
31320: PUSH
31321: LD_VAR 0 7
31325: PPUSH
31326: LD_INT 1
31328: PPUSH
31329: LD_VAR 0 14
31333: PPUSH
31334: CALL_OW 2
31338: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
31339: LD_VAR 0 14
31343: PPUSH
31344: LD_VAR 0 12
31348: PUSH
31349: LD_INT 1
31351: ARRAY
31352: PPUSH
31353: CALL_OW 52
// end ;
31357: GO 30996
31359: POP
31360: POP
// end ;
31361: GO 30298
31363: POP
31364: POP
// result := result ^ buildings ;
31365: LD_ADDR_VAR 0 7
31369: PUSH
31370: LD_VAR 0 7
31374: PUSH
31375: LD_VAR 0 18
31379: ADD
31380: ST_TO_ADDR
// end else
31381: GO 31524
// begin for i = 1 to personel do
31383: LD_ADDR_VAR 0 8
31387: PUSH
31388: DOUBLE
31389: LD_INT 1
31391: DEC
31392: ST_TO_ADDR
31393: LD_VAR 0 6
31397: PUSH
31398: FOR_TO
31399: IFFALSE 31522
// begin if i > 4 then
31401: LD_VAR 0 8
31405: PUSH
31406: LD_INT 4
31408: GREATER
31409: IFFALSE 31413
// break ;
31411: GO 31522
// x := personel [ i ] ;
31413: LD_ADDR_VAR 0 13
31417: PUSH
31418: LD_VAR 0 6
31422: PUSH
31423: LD_VAR 0 8
31427: ARRAY
31428: ST_TO_ADDR
// if x = - 1 then
31429: LD_VAR 0 13
31433: PUSH
31434: LD_INT 1
31436: NEG
31437: EQUAL
31438: IFFALSE 31442
// continue ;
31440: GO 31398
// PrepareHuman ( false , i , skill ) ;
31442: LD_INT 0
31444: PPUSH
31445: LD_VAR 0 8
31449: PPUSH
31450: LD_VAR 0 4
31454: PPUSH
31455: CALL_OW 380
// un := CreateHuman ;
31459: LD_ADDR_VAR 0 14
31463: PUSH
31464: CALL_OW 44
31468: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31469: LD_VAR 0 14
31473: PPUSH
31474: LD_VAR 0 1
31478: PPUSH
31479: CALL_OW 250
31483: PPUSH
31484: LD_VAR 0 1
31488: PPUSH
31489: CALL_OW 251
31493: PPUSH
31494: LD_INT 10
31496: PPUSH
31497: LD_INT 0
31499: PPUSH
31500: CALL_OW 50
// result := result ^ un ;
31504: LD_ADDR_VAR 0 7
31508: PUSH
31509: LD_VAR 0 7
31513: PUSH
31514: LD_VAR 0 14
31518: ADD
31519: ST_TO_ADDR
// end ;
31520: GO 31398
31522: POP
31523: POP
// end ; end ;
31524: LD_VAR 0 7
31528: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
31529: LD_INT 0
31531: PPUSH
31532: PPUSH
31533: PPUSH
31534: PPUSH
31535: PPUSH
31536: PPUSH
31537: PPUSH
31538: PPUSH
31539: PPUSH
31540: PPUSH
31541: PPUSH
31542: PPUSH
31543: PPUSH
31544: PPUSH
31545: PPUSH
31546: PPUSH
// result := false ;
31547: LD_ADDR_VAR 0 3
31551: PUSH
31552: LD_INT 0
31554: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
31555: LD_VAR 0 1
31559: NOT
31560: PUSH
31561: LD_VAR 0 1
31565: PPUSH
31566: CALL_OW 266
31570: PUSH
31571: LD_INT 32
31573: PUSH
31574: LD_INT 33
31576: PUSH
31577: EMPTY
31578: LIST
31579: LIST
31580: IN
31581: NOT
31582: OR
31583: IFFALSE 31587
// exit ;
31585: GO 32723
// nat := GetNation ( tower ) ;
31587: LD_ADDR_VAR 0 12
31591: PUSH
31592: LD_VAR 0 1
31596: PPUSH
31597: CALL_OW 248
31601: ST_TO_ADDR
// side := GetSide ( tower ) ;
31602: LD_ADDR_VAR 0 16
31606: PUSH
31607: LD_VAR 0 1
31611: PPUSH
31612: CALL_OW 255
31616: ST_TO_ADDR
// x := GetX ( tower ) ;
31617: LD_ADDR_VAR 0 10
31621: PUSH
31622: LD_VAR 0 1
31626: PPUSH
31627: CALL_OW 250
31631: ST_TO_ADDR
// y := GetY ( tower ) ;
31632: LD_ADDR_VAR 0 11
31636: PUSH
31637: LD_VAR 0 1
31641: PPUSH
31642: CALL_OW 251
31646: ST_TO_ADDR
// if not x or not y then
31647: LD_VAR 0 10
31651: NOT
31652: PUSH
31653: LD_VAR 0 11
31657: NOT
31658: OR
31659: IFFALSE 31663
// exit ;
31661: GO 32723
// weapon := 0 ;
31663: LD_ADDR_VAR 0 18
31667: PUSH
31668: LD_INT 0
31670: ST_TO_ADDR
// fac_list := [ ] ;
31671: LD_ADDR_VAR 0 17
31675: PUSH
31676: EMPTY
31677: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
31678: LD_ADDR_VAR 0 6
31682: PUSH
31683: LD_VAR 0 1
31687: PPUSH
31688: CALL_OW 274
31692: PPUSH
31693: LD_VAR 0 2
31697: PPUSH
31698: CALL 29301 0 2
31702: PPUSH
31703: LD_INT 30
31705: PUSH
31706: LD_INT 3
31708: PUSH
31709: EMPTY
31710: LIST
31711: LIST
31712: PPUSH
31713: CALL_OW 72
31717: ST_TO_ADDR
// if not factories then
31718: LD_VAR 0 6
31722: NOT
31723: IFFALSE 31727
// exit ;
31725: GO 32723
// for i in factories do
31727: LD_ADDR_VAR 0 8
31731: PUSH
31732: LD_VAR 0 6
31736: PUSH
31737: FOR_IN
31738: IFFALSE 31763
// fac_list := fac_list union AvailableWeaponList ( i ) ;
31740: LD_ADDR_VAR 0 17
31744: PUSH
31745: LD_VAR 0 17
31749: PUSH
31750: LD_VAR 0 8
31754: PPUSH
31755: CALL_OW 478
31759: UNION
31760: ST_TO_ADDR
31761: GO 31737
31763: POP
31764: POP
// if not fac_list then
31765: LD_VAR 0 17
31769: NOT
31770: IFFALSE 31774
// exit ;
31772: GO 32723
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
31774: LD_ADDR_VAR 0 5
31778: PUSH
31779: LD_INT 4
31781: PUSH
31782: LD_INT 5
31784: PUSH
31785: LD_INT 9
31787: PUSH
31788: LD_INT 10
31790: PUSH
31791: LD_INT 6
31793: PUSH
31794: LD_INT 7
31796: PUSH
31797: LD_INT 11
31799: PUSH
31800: EMPTY
31801: LIST
31802: LIST
31803: LIST
31804: LIST
31805: LIST
31806: LIST
31807: LIST
31808: PUSH
31809: LD_INT 27
31811: PUSH
31812: LD_INT 28
31814: PUSH
31815: LD_INT 26
31817: PUSH
31818: LD_INT 30
31820: PUSH
31821: EMPTY
31822: LIST
31823: LIST
31824: LIST
31825: LIST
31826: PUSH
31827: LD_INT 43
31829: PUSH
31830: LD_INT 44
31832: PUSH
31833: LD_INT 46
31835: PUSH
31836: LD_INT 45
31838: PUSH
31839: LD_INT 47
31841: PUSH
31842: LD_INT 49
31844: PUSH
31845: EMPTY
31846: LIST
31847: LIST
31848: LIST
31849: LIST
31850: LIST
31851: LIST
31852: PUSH
31853: EMPTY
31854: LIST
31855: LIST
31856: LIST
31857: PUSH
31858: LD_VAR 0 12
31862: ARRAY
31863: ST_TO_ADDR
// for i in list do
31864: LD_ADDR_VAR 0 8
31868: PUSH
31869: LD_VAR 0 5
31873: PUSH
31874: FOR_IN
31875: IFFALSE 31908
// if not i in fac_list then
31877: LD_VAR 0 8
31881: PUSH
31882: LD_VAR 0 17
31886: IN
31887: NOT
31888: IFFALSE 31906
// list := list diff i ;
31890: LD_ADDR_VAR 0 5
31894: PUSH
31895: LD_VAR 0 5
31899: PUSH
31900: LD_VAR 0 8
31904: DIFF
31905: ST_TO_ADDR
31906: GO 31874
31908: POP
31909: POP
// if not list then
31910: LD_VAR 0 5
31914: NOT
31915: IFFALSE 31919
// exit ;
31917: GO 32723
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
31919: LD_VAR 0 12
31923: PUSH
31924: LD_INT 3
31926: EQUAL
31927: PUSH
31928: LD_INT 49
31930: PUSH
31931: LD_VAR 0 5
31935: IN
31936: AND
31937: PUSH
31938: LD_INT 31
31940: PPUSH
31941: LD_VAR 0 16
31945: PPUSH
31946: CALL_OW 321
31950: PUSH
31951: LD_INT 2
31953: EQUAL
31954: AND
31955: IFFALSE 32015
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
31957: LD_INT 22
31959: PUSH
31960: LD_VAR 0 16
31964: PUSH
31965: EMPTY
31966: LIST
31967: LIST
31968: PUSH
31969: LD_INT 35
31971: PUSH
31972: LD_INT 49
31974: PUSH
31975: EMPTY
31976: LIST
31977: LIST
31978: PUSH
31979: LD_INT 91
31981: PUSH
31982: LD_VAR 0 1
31986: PUSH
31987: LD_INT 10
31989: PUSH
31990: EMPTY
31991: LIST
31992: LIST
31993: LIST
31994: PUSH
31995: EMPTY
31996: LIST
31997: LIST
31998: LIST
31999: PPUSH
32000: CALL_OW 69
32004: NOT
32005: IFFALSE 32015
// weapon := ru_time_lapser ;
32007: LD_ADDR_VAR 0 18
32011: PUSH
32012: LD_INT 49
32014: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
32015: LD_VAR 0 12
32019: PUSH
32020: LD_INT 1
32022: PUSH
32023: LD_INT 2
32025: PUSH
32026: EMPTY
32027: LIST
32028: LIST
32029: IN
32030: PUSH
32031: LD_INT 11
32033: PUSH
32034: LD_VAR 0 5
32038: IN
32039: PUSH
32040: LD_INT 30
32042: PUSH
32043: LD_VAR 0 5
32047: IN
32048: OR
32049: AND
32050: PUSH
32051: LD_INT 6
32053: PPUSH
32054: LD_VAR 0 16
32058: PPUSH
32059: CALL_OW 321
32063: PUSH
32064: LD_INT 2
32066: EQUAL
32067: AND
32068: IFFALSE 32233
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
32070: LD_INT 22
32072: PUSH
32073: LD_VAR 0 16
32077: PUSH
32078: EMPTY
32079: LIST
32080: LIST
32081: PUSH
32082: LD_INT 2
32084: PUSH
32085: LD_INT 35
32087: PUSH
32088: LD_INT 11
32090: PUSH
32091: EMPTY
32092: LIST
32093: LIST
32094: PUSH
32095: LD_INT 35
32097: PUSH
32098: LD_INT 30
32100: PUSH
32101: EMPTY
32102: LIST
32103: LIST
32104: PUSH
32105: EMPTY
32106: LIST
32107: LIST
32108: LIST
32109: PUSH
32110: LD_INT 91
32112: PUSH
32113: LD_VAR 0 1
32117: PUSH
32118: LD_INT 18
32120: PUSH
32121: EMPTY
32122: LIST
32123: LIST
32124: LIST
32125: PUSH
32126: EMPTY
32127: LIST
32128: LIST
32129: LIST
32130: PPUSH
32131: CALL_OW 69
32135: NOT
32136: PUSH
32137: LD_INT 22
32139: PUSH
32140: LD_VAR 0 16
32144: PUSH
32145: EMPTY
32146: LIST
32147: LIST
32148: PUSH
32149: LD_INT 2
32151: PUSH
32152: LD_INT 30
32154: PUSH
32155: LD_INT 32
32157: PUSH
32158: EMPTY
32159: LIST
32160: LIST
32161: PUSH
32162: LD_INT 30
32164: PUSH
32165: LD_INT 33
32167: PUSH
32168: EMPTY
32169: LIST
32170: LIST
32171: PUSH
32172: EMPTY
32173: LIST
32174: LIST
32175: LIST
32176: PUSH
32177: LD_INT 91
32179: PUSH
32180: LD_VAR 0 1
32184: PUSH
32185: LD_INT 12
32187: PUSH
32188: EMPTY
32189: LIST
32190: LIST
32191: LIST
32192: PUSH
32193: EMPTY
32194: LIST
32195: LIST
32196: LIST
32197: PUSH
32198: EMPTY
32199: LIST
32200: PPUSH
32201: CALL_OW 69
32205: PUSH
32206: LD_INT 2
32208: GREATER
32209: AND
32210: IFFALSE 32233
// weapon := [ us_radar , ar_radar ] [ nat ] ;
32212: LD_ADDR_VAR 0 18
32216: PUSH
32217: LD_INT 11
32219: PUSH
32220: LD_INT 30
32222: PUSH
32223: EMPTY
32224: LIST
32225: LIST
32226: PUSH
32227: LD_VAR 0 12
32231: ARRAY
32232: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
32233: LD_VAR 0 18
32237: NOT
32238: PUSH
32239: LD_INT 40
32241: PPUSH
32242: LD_VAR 0 16
32246: PPUSH
32247: CALL_OW 321
32251: PUSH
32252: LD_INT 2
32254: EQUAL
32255: AND
32256: PUSH
32257: LD_INT 7
32259: PUSH
32260: LD_VAR 0 5
32264: IN
32265: PUSH
32266: LD_INT 28
32268: PUSH
32269: LD_VAR 0 5
32273: IN
32274: OR
32275: PUSH
32276: LD_INT 45
32278: PUSH
32279: LD_VAR 0 5
32283: IN
32284: OR
32285: AND
32286: IFFALSE 32540
// begin hex := GetHexInfo ( x , y ) ;
32288: LD_ADDR_VAR 0 4
32292: PUSH
32293: LD_VAR 0 10
32297: PPUSH
32298: LD_VAR 0 11
32302: PPUSH
32303: CALL_OW 546
32307: ST_TO_ADDR
// if hex [ 1 ] then
32308: LD_VAR 0 4
32312: PUSH
32313: LD_INT 1
32315: ARRAY
32316: IFFALSE 32320
// exit ;
32318: GO 32723
// height := hex [ 2 ] ;
32320: LD_ADDR_VAR 0 15
32324: PUSH
32325: LD_VAR 0 4
32329: PUSH
32330: LD_INT 2
32332: ARRAY
32333: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
32334: LD_ADDR_VAR 0 14
32338: PUSH
32339: LD_INT 0
32341: PUSH
32342: LD_INT 2
32344: PUSH
32345: LD_INT 3
32347: PUSH
32348: LD_INT 5
32350: PUSH
32351: EMPTY
32352: LIST
32353: LIST
32354: LIST
32355: LIST
32356: ST_TO_ADDR
// for i in tmp do
32357: LD_ADDR_VAR 0 8
32361: PUSH
32362: LD_VAR 0 14
32366: PUSH
32367: FOR_IN
32368: IFFALSE 32538
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
32370: LD_ADDR_VAR 0 9
32374: PUSH
32375: LD_VAR 0 10
32379: PPUSH
32380: LD_VAR 0 8
32384: PPUSH
32385: LD_INT 5
32387: PPUSH
32388: CALL_OW 272
32392: PUSH
32393: LD_VAR 0 11
32397: PPUSH
32398: LD_VAR 0 8
32402: PPUSH
32403: LD_INT 5
32405: PPUSH
32406: CALL_OW 273
32410: PUSH
32411: EMPTY
32412: LIST
32413: LIST
32414: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
32415: LD_VAR 0 9
32419: PUSH
32420: LD_INT 1
32422: ARRAY
32423: PPUSH
32424: LD_VAR 0 9
32428: PUSH
32429: LD_INT 2
32431: ARRAY
32432: PPUSH
32433: CALL_OW 488
32437: IFFALSE 32536
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
32439: LD_ADDR_VAR 0 4
32443: PUSH
32444: LD_VAR 0 9
32448: PUSH
32449: LD_INT 1
32451: ARRAY
32452: PPUSH
32453: LD_VAR 0 9
32457: PUSH
32458: LD_INT 2
32460: ARRAY
32461: PPUSH
32462: CALL_OW 546
32466: ST_TO_ADDR
// if hex [ 1 ] then
32467: LD_VAR 0 4
32471: PUSH
32472: LD_INT 1
32474: ARRAY
32475: IFFALSE 32479
// continue ;
32477: GO 32367
// h := hex [ 2 ] ;
32479: LD_ADDR_VAR 0 13
32483: PUSH
32484: LD_VAR 0 4
32488: PUSH
32489: LD_INT 2
32491: ARRAY
32492: ST_TO_ADDR
// if h + 7 < height then
32493: LD_VAR 0 13
32497: PUSH
32498: LD_INT 7
32500: PLUS
32501: PUSH
32502: LD_VAR 0 15
32506: LESS
32507: IFFALSE 32536
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
32509: LD_ADDR_VAR 0 18
32513: PUSH
32514: LD_INT 7
32516: PUSH
32517: LD_INT 28
32519: PUSH
32520: LD_INT 45
32522: PUSH
32523: EMPTY
32524: LIST
32525: LIST
32526: LIST
32527: PUSH
32528: LD_VAR 0 12
32532: ARRAY
32533: ST_TO_ADDR
// break ;
32534: GO 32538
// end ; end ; end ;
32536: GO 32367
32538: POP
32539: POP
// end ; if not weapon then
32540: LD_VAR 0 18
32544: NOT
32545: IFFALSE 32605
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
32547: LD_ADDR_VAR 0 5
32551: PUSH
32552: LD_VAR 0 5
32556: PUSH
32557: LD_INT 11
32559: PUSH
32560: LD_INT 30
32562: PUSH
32563: LD_INT 49
32565: PUSH
32566: EMPTY
32567: LIST
32568: LIST
32569: LIST
32570: DIFF
32571: ST_TO_ADDR
// if not list then
32572: LD_VAR 0 5
32576: NOT
32577: IFFALSE 32581
// exit ;
32579: GO 32723
// weapon := list [ rand ( 1 , list ) ] ;
32581: LD_ADDR_VAR 0 18
32585: PUSH
32586: LD_VAR 0 5
32590: PUSH
32591: LD_INT 1
32593: PPUSH
32594: LD_VAR 0 5
32598: PPUSH
32599: CALL_OW 12
32603: ARRAY
32604: ST_TO_ADDR
// end ; if weapon then
32605: LD_VAR 0 18
32609: IFFALSE 32723
// begin tmp := CostOfWeapon ( weapon ) ;
32611: LD_ADDR_VAR 0 14
32615: PUSH
32616: LD_VAR 0 18
32620: PPUSH
32621: CALL_OW 451
32625: ST_TO_ADDR
// j := GetBase ( tower ) ;
32626: LD_ADDR_VAR 0 9
32630: PUSH
32631: LD_VAR 0 1
32635: PPUSH
32636: CALL_OW 274
32640: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
32641: LD_VAR 0 9
32645: PPUSH
32646: LD_INT 1
32648: PPUSH
32649: CALL_OW 275
32653: PUSH
32654: LD_VAR 0 14
32658: PUSH
32659: LD_INT 1
32661: ARRAY
32662: GREATEREQUAL
32663: PUSH
32664: LD_VAR 0 9
32668: PPUSH
32669: LD_INT 2
32671: PPUSH
32672: CALL_OW 275
32676: PUSH
32677: LD_VAR 0 14
32681: PUSH
32682: LD_INT 2
32684: ARRAY
32685: GREATEREQUAL
32686: AND
32687: PUSH
32688: LD_VAR 0 9
32692: PPUSH
32693: LD_INT 3
32695: PPUSH
32696: CALL_OW 275
32700: PUSH
32701: LD_VAR 0 14
32705: PUSH
32706: LD_INT 3
32708: ARRAY
32709: GREATEREQUAL
32710: AND
32711: IFFALSE 32723
// result := weapon ;
32713: LD_ADDR_VAR 0 3
32717: PUSH
32718: LD_VAR 0 18
32722: ST_TO_ADDR
// end ; end ;
32723: LD_VAR 0 3
32727: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
32728: LD_INT 0
32730: PPUSH
32731: PPUSH
// result := true ;
32732: LD_ADDR_VAR 0 3
32736: PUSH
32737: LD_INT 1
32739: ST_TO_ADDR
// if array1 = array2 then
32740: LD_VAR 0 1
32744: PUSH
32745: LD_VAR 0 2
32749: EQUAL
32750: IFFALSE 32810
// begin for i = 1 to array1 do
32752: LD_ADDR_VAR 0 4
32756: PUSH
32757: DOUBLE
32758: LD_INT 1
32760: DEC
32761: ST_TO_ADDR
32762: LD_VAR 0 1
32766: PUSH
32767: FOR_TO
32768: IFFALSE 32806
// if array1 [ i ] <> array2 [ i ] then
32770: LD_VAR 0 1
32774: PUSH
32775: LD_VAR 0 4
32779: ARRAY
32780: PUSH
32781: LD_VAR 0 2
32785: PUSH
32786: LD_VAR 0 4
32790: ARRAY
32791: NONEQUAL
32792: IFFALSE 32804
// begin result := false ;
32794: LD_ADDR_VAR 0 3
32798: PUSH
32799: LD_INT 0
32801: ST_TO_ADDR
// break ;
32802: GO 32806
// end ;
32804: GO 32767
32806: POP
32807: POP
// end else
32808: GO 32818
// result := false ;
32810: LD_ADDR_VAR 0 3
32814: PUSH
32815: LD_INT 0
32817: ST_TO_ADDR
// end ;
32818: LD_VAR 0 3
32822: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
32823: LD_INT 0
32825: PPUSH
32826: PPUSH
32827: PPUSH
// pom := GetBase ( fac ) ;
32828: LD_ADDR_VAR 0 5
32832: PUSH
32833: LD_VAR 0 1
32837: PPUSH
32838: CALL_OW 274
32842: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
32843: LD_ADDR_VAR 0 4
32847: PUSH
32848: LD_VAR 0 2
32852: PUSH
32853: LD_INT 1
32855: ARRAY
32856: PPUSH
32857: LD_VAR 0 2
32861: PUSH
32862: LD_INT 2
32864: ARRAY
32865: PPUSH
32866: LD_VAR 0 2
32870: PUSH
32871: LD_INT 3
32873: ARRAY
32874: PPUSH
32875: LD_VAR 0 2
32879: PUSH
32880: LD_INT 4
32882: ARRAY
32883: PPUSH
32884: CALL_OW 449
32888: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32889: LD_ADDR_VAR 0 3
32893: PUSH
32894: LD_VAR 0 5
32898: PPUSH
32899: LD_INT 1
32901: PPUSH
32902: CALL_OW 275
32906: PUSH
32907: LD_VAR 0 4
32911: PUSH
32912: LD_INT 1
32914: ARRAY
32915: GREATEREQUAL
32916: PUSH
32917: LD_VAR 0 5
32921: PPUSH
32922: LD_INT 2
32924: PPUSH
32925: CALL_OW 275
32929: PUSH
32930: LD_VAR 0 4
32934: PUSH
32935: LD_INT 2
32937: ARRAY
32938: GREATEREQUAL
32939: AND
32940: PUSH
32941: LD_VAR 0 5
32945: PPUSH
32946: LD_INT 3
32948: PPUSH
32949: CALL_OW 275
32953: PUSH
32954: LD_VAR 0 4
32958: PUSH
32959: LD_INT 3
32961: ARRAY
32962: GREATEREQUAL
32963: AND
32964: ST_TO_ADDR
// end ;
32965: LD_VAR 0 3
32969: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
32970: LD_INT 0
32972: PPUSH
32973: PPUSH
32974: PPUSH
32975: PPUSH
// pom := GetBase ( building ) ;
32976: LD_ADDR_VAR 0 3
32980: PUSH
32981: LD_VAR 0 1
32985: PPUSH
32986: CALL_OW 274
32990: ST_TO_ADDR
// if not pom then
32991: LD_VAR 0 3
32995: NOT
32996: IFFALSE 33000
// exit ;
32998: GO 33170
// btype := GetBType ( building ) ;
33000: LD_ADDR_VAR 0 5
33004: PUSH
33005: LD_VAR 0 1
33009: PPUSH
33010: CALL_OW 266
33014: ST_TO_ADDR
// if btype = b_armoury then
33015: LD_VAR 0 5
33019: PUSH
33020: LD_INT 4
33022: EQUAL
33023: IFFALSE 33033
// btype := b_barracks ;
33025: LD_ADDR_VAR 0 5
33029: PUSH
33030: LD_INT 5
33032: ST_TO_ADDR
// if btype = b_depot then
33033: LD_VAR 0 5
33037: PUSH
33038: LD_INT 0
33040: EQUAL
33041: IFFALSE 33051
// btype := b_warehouse ;
33043: LD_ADDR_VAR 0 5
33047: PUSH
33048: LD_INT 1
33050: ST_TO_ADDR
// if btype = b_workshop then
33051: LD_VAR 0 5
33055: PUSH
33056: LD_INT 2
33058: EQUAL
33059: IFFALSE 33069
// btype := b_factory ;
33061: LD_ADDR_VAR 0 5
33065: PUSH
33066: LD_INT 3
33068: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33069: LD_ADDR_VAR 0 4
33073: PUSH
33074: LD_VAR 0 5
33078: PPUSH
33079: LD_VAR 0 1
33083: PPUSH
33084: CALL_OW 248
33088: PPUSH
33089: CALL_OW 450
33093: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33094: LD_ADDR_VAR 0 2
33098: PUSH
33099: LD_VAR 0 3
33103: PPUSH
33104: LD_INT 1
33106: PPUSH
33107: CALL_OW 275
33111: PUSH
33112: LD_VAR 0 4
33116: PUSH
33117: LD_INT 1
33119: ARRAY
33120: GREATEREQUAL
33121: PUSH
33122: LD_VAR 0 3
33126: PPUSH
33127: LD_INT 2
33129: PPUSH
33130: CALL_OW 275
33134: PUSH
33135: LD_VAR 0 4
33139: PUSH
33140: LD_INT 2
33142: ARRAY
33143: GREATEREQUAL
33144: AND
33145: PUSH
33146: LD_VAR 0 3
33150: PPUSH
33151: LD_INT 3
33153: PPUSH
33154: CALL_OW 275
33158: PUSH
33159: LD_VAR 0 4
33163: PUSH
33164: LD_INT 3
33166: ARRAY
33167: GREATEREQUAL
33168: AND
33169: ST_TO_ADDR
// end ;
33170: LD_VAR 0 2
33174: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
33175: LD_INT 0
33177: PPUSH
33178: PPUSH
33179: PPUSH
// pom := GetBase ( building ) ;
33180: LD_ADDR_VAR 0 4
33184: PUSH
33185: LD_VAR 0 1
33189: PPUSH
33190: CALL_OW 274
33194: ST_TO_ADDR
// if not pom then
33195: LD_VAR 0 4
33199: NOT
33200: IFFALSE 33204
// exit ;
33202: GO 33305
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33204: LD_ADDR_VAR 0 5
33208: PUSH
33209: LD_VAR 0 2
33213: PPUSH
33214: LD_VAR 0 1
33218: PPUSH
33219: CALL_OW 248
33223: PPUSH
33224: CALL_OW 450
33228: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33229: LD_ADDR_VAR 0 3
33233: PUSH
33234: LD_VAR 0 4
33238: PPUSH
33239: LD_INT 1
33241: PPUSH
33242: CALL_OW 275
33246: PUSH
33247: LD_VAR 0 5
33251: PUSH
33252: LD_INT 1
33254: ARRAY
33255: GREATEREQUAL
33256: PUSH
33257: LD_VAR 0 4
33261: PPUSH
33262: LD_INT 2
33264: PPUSH
33265: CALL_OW 275
33269: PUSH
33270: LD_VAR 0 5
33274: PUSH
33275: LD_INT 2
33277: ARRAY
33278: GREATEREQUAL
33279: AND
33280: PUSH
33281: LD_VAR 0 4
33285: PPUSH
33286: LD_INT 3
33288: PPUSH
33289: CALL_OW 275
33293: PUSH
33294: LD_VAR 0 5
33298: PUSH
33299: LD_INT 3
33301: ARRAY
33302: GREATEREQUAL
33303: AND
33304: ST_TO_ADDR
// end ;
33305: LD_VAR 0 3
33309: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
33310: LD_INT 0
33312: PPUSH
33313: PPUSH
33314: PPUSH
33315: PPUSH
33316: PPUSH
33317: PPUSH
33318: PPUSH
33319: PPUSH
33320: PPUSH
33321: PPUSH
// result := false ;
33322: LD_ADDR_VAR 0 6
33326: PUSH
33327: LD_INT 0
33329: ST_TO_ADDR
// if not base or not btype or not x or not y then
33330: LD_VAR 0 1
33334: NOT
33335: PUSH
33336: LD_VAR 0 2
33340: NOT
33341: OR
33342: PUSH
33343: LD_VAR 0 3
33347: NOT
33348: OR
33349: PUSH
33350: LD_VAR 0 4
33354: NOT
33355: OR
33356: IFFALSE 33360
// exit ;
33358: GO 33951
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
33360: LD_ADDR_VAR 0 12
33364: PUSH
33365: LD_VAR 0 2
33369: PPUSH
33370: LD_VAR 0 3
33374: PPUSH
33375: LD_VAR 0 4
33379: PPUSH
33380: LD_VAR 0 5
33384: PPUSH
33385: LD_VAR 0 1
33389: PUSH
33390: LD_INT 1
33392: ARRAY
33393: PPUSH
33394: CALL_OW 248
33398: PPUSH
33399: LD_INT 0
33401: PPUSH
33402: CALL 34788 0 6
33406: ST_TO_ADDR
// if not hexes then
33407: LD_VAR 0 12
33411: NOT
33412: IFFALSE 33416
// exit ;
33414: GO 33951
// for i = 1 to hexes do
33416: LD_ADDR_VAR 0 7
33420: PUSH
33421: DOUBLE
33422: LD_INT 1
33424: DEC
33425: ST_TO_ADDR
33426: LD_VAR 0 12
33430: PUSH
33431: FOR_TO
33432: IFFALSE 33949
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33434: LD_ADDR_VAR 0 11
33438: PUSH
33439: LD_VAR 0 12
33443: PUSH
33444: LD_VAR 0 7
33448: ARRAY
33449: PUSH
33450: LD_INT 1
33452: ARRAY
33453: PPUSH
33454: LD_VAR 0 12
33458: PUSH
33459: LD_VAR 0 7
33463: ARRAY
33464: PUSH
33465: LD_INT 2
33467: ARRAY
33468: PPUSH
33469: CALL_OW 428
33473: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
33474: LD_VAR 0 12
33478: PUSH
33479: LD_VAR 0 7
33483: ARRAY
33484: PUSH
33485: LD_INT 1
33487: ARRAY
33488: PPUSH
33489: LD_VAR 0 12
33493: PUSH
33494: LD_VAR 0 7
33498: ARRAY
33499: PUSH
33500: LD_INT 2
33502: ARRAY
33503: PPUSH
33504: CALL_OW 351
33508: PUSH
33509: LD_VAR 0 12
33513: PUSH
33514: LD_VAR 0 7
33518: ARRAY
33519: PUSH
33520: LD_INT 1
33522: ARRAY
33523: PPUSH
33524: LD_VAR 0 12
33528: PUSH
33529: LD_VAR 0 7
33533: ARRAY
33534: PUSH
33535: LD_INT 2
33537: ARRAY
33538: PPUSH
33539: CALL_OW 488
33543: NOT
33544: OR
33545: PUSH
33546: LD_VAR 0 11
33550: PPUSH
33551: CALL_OW 247
33555: PUSH
33556: LD_INT 3
33558: EQUAL
33559: OR
33560: IFFALSE 33566
// exit ;
33562: POP
33563: POP
33564: GO 33951
// if not tmp then
33566: LD_VAR 0 11
33570: NOT
33571: IFFALSE 33575
// continue ;
33573: GO 33431
// result := true ;
33575: LD_ADDR_VAR 0 6
33579: PUSH
33580: LD_INT 1
33582: ST_TO_ADDR
// dep := FilterAllUnits ( [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33583: LD_ADDR_VAR 0 15
33587: PUSH
33588: LD_INT 22
33590: PUSH
33591: LD_VAR 0 11
33595: PPUSH
33596: CALL_OW 255
33600: PUSH
33601: EMPTY
33602: LIST
33603: LIST
33604: PUSH
33605: LD_INT 2
33607: PUSH
33608: LD_INT 30
33610: PUSH
33611: LD_INT 0
33613: PUSH
33614: EMPTY
33615: LIST
33616: LIST
33617: PUSH
33618: LD_INT 30
33620: PUSH
33621: LD_INT 1
33623: PUSH
33624: EMPTY
33625: LIST
33626: LIST
33627: PUSH
33628: EMPTY
33629: LIST
33630: LIST
33631: LIST
33632: PUSH
33633: EMPTY
33634: LIST
33635: LIST
33636: PPUSH
33637: CALL_OW 69
33641: ST_TO_ADDR
// if dep then
33642: LD_VAR 0 15
33646: IFFALSE 33782
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
33648: LD_ADDR_VAR 0 14
33652: PUSH
33653: LD_VAR 0 15
33657: PUSH
33658: LD_INT 1
33660: ARRAY
33661: PPUSH
33662: CALL_OW 250
33666: PPUSH
33667: LD_VAR 0 15
33671: PUSH
33672: LD_INT 1
33674: ARRAY
33675: PPUSH
33676: CALL_OW 254
33680: PPUSH
33681: LD_INT 5
33683: PPUSH
33684: CALL_OW 272
33688: PUSH
33689: LD_VAR 0 15
33693: PUSH
33694: LD_INT 1
33696: ARRAY
33697: PPUSH
33698: CALL_OW 251
33702: PPUSH
33703: LD_VAR 0 15
33707: PUSH
33708: LD_INT 1
33710: ARRAY
33711: PPUSH
33712: CALL_OW 254
33716: PPUSH
33717: LD_INT 5
33719: PPUSH
33720: CALL_OW 273
33724: PUSH
33725: EMPTY
33726: LIST
33727: LIST
33728: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
33729: LD_VAR 0 14
33733: PUSH
33734: LD_INT 1
33736: ARRAY
33737: PPUSH
33738: LD_VAR 0 14
33742: PUSH
33743: LD_INT 2
33745: ARRAY
33746: PPUSH
33747: CALL_OW 488
33751: IFFALSE 33782
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
33753: LD_VAR 0 11
33757: PPUSH
33758: LD_VAR 0 14
33762: PUSH
33763: LD_INT 1
33765: ARRAY
33766: PPUSH
33767: LD_VAR 0 14
33771: PUSH
33772: LD_INT 2
33774: ARRAY
33775: PPUSH
33776: CALL_OW 111
// continue ;
33780: GO 33431
// end ; end ; r := GetDir ( tmp ) ;
33782: LD_ADDR_VAR 0 13
33786: PUSH
33787: LD_VAR 0 11
33791: PPUSH
33792: CALL_OW 254
33796: ST_TO_ADDR
// if r = 5 then
33797: LD_VAR 0 13
33801: PUSH
33802: LD_INT 5
33804: EQUAL
33805: IFFALSE 33815
// r := 0 ;
33807: LD_ADDR_VAR 0 13
33811: PUSH
33812: LD_INT 0
33814: ST_TO_ADDR
// for j = r to 5 do
33815: LD_ADDR_VAR 0 8
33819: PUSH
33820: DOUBLE
33821: LD_VAR 0 13
33825: DEC
33826: ST_TO_ADDR
33827: LD_INT 5
33829: PUSH
33830: FOR_TO
33831: IFFALSE 33945
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
33833: LD_ADDR_VAR 0 9
33837: PUSH
33838: LD_VAR 0 11
33842: PPUSH
33843: CALL_OW 250
33847: PPUSH
33848: LD_VAR 0 8
33852: PPUSH
33853: LD_INT 2
33855: PPUSH
33856: CALL_OW 272
33860: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
33861: LD_ADDR_VAR 0 10
33865: PUSH
33866: LD_VAR 0 11
33870: PPUSH
33871: CALL_OW 251
33875: PPUSH
33876: LD_VAR 0 8
33880: PPUSH
33881: LD_INT 2
33883: PPUSH
33884: CALL_OW 273
33888: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
33889: LD_VAR 0 9
33893: PPUSH
33894: LD_VAR 0 10
33898: PPUSH
33899: CALL_OW 488
33903: PUSH
33904: LD_VAR 0 9
33908: PPUSH
33909: LD_VAR 0 10
33913: PPUSH
33914: CALL_OW 428
33918: NOT
33919: AND
33920: IFFALSE 33943
// begin ComMoveXY ( tmp , _x , _y ) ;
33922: LD_VAR 0 11
33926: PPUSH
33927: LD_VAR 0 9
33931: PPUSH
33932: LD_VAR 0 10
33936: PPUSH
33937: CALL_OW 111
// break ;
33941: GO 33945
// end ; end ;
33943: GO 33830
33945: POP
33946: POP
// end ;
33947: GO 33431
33949: POP
33950: POP
// end ;
33951: LD_VAR 0 6
33955: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
33956: LD_INT 0
33958: PPUSH
33959: PPUSH
33960: PPUSH
33961: PPUSH
33962: PPUSH
33963: PPUSH
33964: PPUSH
33965: PPUSH
33966: PPUSH
33967: PPUSH
// result := false ;
33968: LD_ADDR_VAR 0 6
33972: PUSH
33973: LD_INT 0
33975: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
33976: LD_VAR 0 1
33980: NOT
33981: PUSH
33982: LD_VAR 0 1
33986: PPUSH
33987: CALL_OW 266
33991: PUSH
33992: LD_INT 0
33994: PUSH
33995: LD_INT 1
33997: PUSH
33998: EMPTY
33999: LIST
34000: LIST
34001: IN
34002: NOT
34003: OR
34004: PUSH
34005: LD_VAR 0 2
34009: NOT
34010: OR
34011: PUSH
34012: LD_VAR 0 5
34016: PUSH
34017: LD_INT 0
34019: PUSH
34020: LD_INT 1
34022: PUSH
34023: LD_INT 2
34025: PUSH
34026: LD_INT 3
34028: PUSH
34029: LD_INT 4
34031: PUSH
34032: LD_INT 5
34034: PUSH
34035: EMPTY
34036: LIST
34037: LIST
34038: LIST
34039: LIST
34040: LIST
34041: LIST
34042: IN
34043: NOT
34044: OR
34045: PUSH
34046: LD_VAR 0 3
34050: PPUSH
34051: LD_VAR 0 4
34055: PPUSH
34056: CALL_OW 488
34060: NOT
34061: OR
34062: IFFALSE 34066
// exit ;
34064: GO 34783
// pom := GetBase ( depot ) ;
34066: LD_ADDR_VAR 0 10
34070: PUSH
34071: LD_VAR 0 1
34075: PPUSH
34076: CALL_OW 274
34080: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
34081: LD_ADDR_VAR 0 11
34085: PUSH
34086: LD_VAR 0 2
34090: PPUSH
34091: LD_VAR 0 1
34095: PPUSH
34096: CALL_OW 248
34100: PPUSH
34101: CALL_OW 450
34105: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
34106: LD_VAR 0 10
34110: PPUSH
34111: LD_INT 1
34113: PPUSH
34114: CALL_OW 275
34118: PUSH
34119: LD_VAR 0 11
34123: PUSH
34124: LD_INT 1
34126: ARRAY
34127: GREATEREQUAL
34128: PUSH
34129: LD_VAR 0 10
34133: PPUSH
34134: LD_INT 2
34136: PPUSH
34137: CALL_OW 275
34141: PUSH
34142: LD_VAR 0 11
34146: PUSH
34147: LD_INT 2
34149: ARRAY
34150: GREATEREQUAL
34151: AND
34152: PUSH
34153: LD_VAR 0 10
34157: PPUSH
34158: LD_INT 3
34160: PPUSH
34161: CALL_OW 275
34165: PUSH
34166: LD_VAR 0 11
34170: PUSH
34171: LD_INT 3
34173: ARRAY
34174: GREATEREQUAL
34175: AND
34176: NOT
34177: IFFALSE 34181
// exit ;
34179: GO 34783
// if GetBType ( depot ) = b_depot then
34181: LD_VAR 0 1
34185: PPUSH
34186: CALL_OW 266
34190: PUSH
34191: LD_INT 0
34193: EQUAL
34194: IFFALSE 34206
// dist := 28 else
34196: LD_ADDR_VAR 0 14
34200: PUSH
34201: LD_INT 28
34203: ST_TO_ADDR
34204: GO 34214
// dist := 36 ;
34206: LD_ADDR_VAR 0 14
34210: PUSH
34211: LD_INT 36
34213: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
34214: LD_VAR 0 1
34218: PPUSH
34219: LD_VAR 0 3
34223: PPUSH
34224: LD_VAR 0 4
34228: PPUSH
34229: CALL_OW 297
34233: PUSH
34234: LD_VAR 0 14
34238: GREATER
34239: IFFALSE 34243
// exit ;
34241: GO 34783
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
34243: LD_ADDR_VAR 0 12
34247: PUSH
34248: LD_VAR 0 2
34252: PPUSH
34253: LD_VAR 0 3
34257: PPUSH
34258: LD_VAR 0 4
34262: PPUSH
34263: LD_VAR 0 5
34267: PPUSH
34268: LD_VAR 0 1
34272: PPUSH
34273: CALL_OW 248
34277: PPUSH
34278: LD_INT 0
34280: PPUSH
34281: CALL 34788 0 6
34285: ST_TO_ADDR
// if not hexes then
34286: LD_VAR 0 12
34290: NOT
34291: IFFALSE 34295
// exit ;
34293: GO 34783
// hex := GetHexInfo ( x , y ) ;
34295: LD_ADDR_VAR 0 15
34299: PUSH
34300: LD_VAR 0 3
34304: PPUSH
34305: LD_VAR 0 4
34309: PPUSH
34310: CALL_OW 546
34314: ST_TO_ADDR
// if hex [ 1 ] then
34315: LD_VAR 0 15
34319: PUSH
34320: LD_INT 1
34322: ARRAY
34323: IFFALSE 34327
// exit ;
34325: GO 34783
// height := hex [ 2 ] ;
34327: LD_ADDR_VAR 0 13
34331: PUSH
34332: LD_VAR 0 15
34336: PUSH
34337: LD_INT 2
34339: ARRAY
34340: ST_TO_ADDR
// for i = 1 to hexes do
34341: LD_ADDR_VAR 0 7
34345: PUSH
34346: DOUBLE
34347: LD_INT 1
34349: DEC
34350: ST_TO_ADDR
34351: LD_VAR 0 12
34355: PUSH
34356: FOR_TO
34357: IFFALSE 34687
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
34359: LD_VAR 0 12
34363: PUSH
34364: LD_VAR 0 7
34368: ARRAY
34369: PUSH
34370: LD_INT 1
34372: ARRAY
34373: PPUSH
34374: LD_VAR 0 12
34378: PUSH
34379: LD_VAR 0 7
34383: ARRAY
34384: PUSH
34385: LD_INT 2
34387: ARRAY
34388: PPUSH
34389: CALL_OW 488
34393: NOT
34394: PUSH
34395: LD_VAR 0 12
34399: PUSH
34400: LD_VAR 0 7
34404: ARRAY
34405: PUSH
34406: LD_INT 1
34408: ARRAY
34409: PPUSH
34410: LD_VAR 0 12
34414: PUSH
34415: LD_VAR 0 7
34419: ARRAY
34420: PUSH
34421: LD_INT 2
34423: ARRAY
34424: PPUSH
34425: CALL_OW 428
34429: PUSH
34430: LD_INT 0
34432: GREATER
34433: OR
34434: PUSH
34435: LD_VAR 0 12
34439: PUSH
34440: LD_VAR 0 7
34444: ARRAY
34445: PUSH
34446: LD_INT 1
34448: ARRAY
34449: PPUSH
34450: LD_VAR 0 12
34454: PUSH
34455: LD_VAR 0 7
34459: ARRAY
34460: PUSH
34461: LD_INT 2
34463: ARRAY
34464: PPUSH
34465: CALL_OW 351
34469: OR
34470: IFFALSE 34476
// exit ;
34472: POP
34473: POP
34474: GO 34783
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34476: LD_ADDR_VAR 0 8
34480: PUSH
34481: LD_VAR 0 12
34485: PUSH
34486: LD_VAR 0 7
34490: ARRAY
34491: PUSH
34492: LD_INT 1
34494: ARRAY
34495: PPUSH
34496: LD_VAR 0 12
34500: PUSH
34501: LD_VAR 0 7
34505: ARRAY
34506: PUSH
34507: LD_INT 2
34509: ARRAY
34510: PPUSH
34511: CALL_OW 546
34515: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
34516: LD_VAR 0 8
34520: PUSH
34521: LD_INT 1
34523: ARRAY
34524: PUSH
34525: LD_VAR 0 8
34529: PUSH
34530: LD_INT 2
34532: ARRAY
34533: PUSH
34534: LD_VAR 0 13
34538: PUSH
34539: LD_INT 2
34541: PLUS
34542: GREATER
34543: OR
34544: PUSH
34545: LD_VAR 0 8
34549: PUSH
34550: LD_INT 2
34552: ARRAY
34553: PUSH
34554: LD_VAR 0 13
34558: PUSH
34559: LD_INT 2
34561: MINUS
34562: LESS
34563: OR
34564: PUSH
34565: LD_VAR 0 8
34569: PUSH
34570: LD_INT 3
34572: ARRAY
34573: PUSH
34574: LD_INT 0
34576: PUSH
34577: LD_INT 8
34579: PUSH
34580: LD_INT 9
34582: PUSH
34583: LD_INT 10
34585: PUSH
34586: LD_INT 11
34588: PUSH
34589: LD_INT 12
34591: PUSH
34592: LD_INT 13
34594: PUSH
34595: LD_INT 16
34597: PUSH
34598: LD_INT 17
34600: PUSH
34601: LD_INT 18
34603: PUSH
34604: LD_INT 19
34606: PUSH
34607: LD_INT 20
34609: PUSH
34610: LD_INT 21
34612: PUSH
34613: EMPTY
34614: LIST
34615: LIST
34616: LIST
34617: LIST
34618: LIST
34619: LIST
34620: LIST
34621: LIST
34622: LIST
34623: LIST
34624: LIST
34625: LIST
34626: LIST
34627: IN
34628: NOT
34629: OR
34630: PUSH
34631: LD_VAR 0 8
34635: PUSH
34636: LD_INT 5
34638: ARRAY
34639: NOT
34640: OR
34641: PUSH
34642: LD_VAR 0 8
34646: PUSH
34647: LD_INT 6
34649: ARRAY
34650: PUSH
34651: LD_INT 1
34653: PUSH
34654: LD_INT 2
34656: PUSH
34657: LD_INT 7
34659: PUSH
34660: LD_INT 9
34662: PUSH
34663: LD_INT 10
34665: PUSH
34666: LD_INT 11
34668: PUSH
34669: EMPTY
34670: LIST
34671: LIST
34672: LIST
34673: LIST
34674: LIST
34675: LIST
34676: IN
34677: NOT
34678: OR
34679: IFFALSE 34685
// exit ;
34681: POP
34682: POP
34683: GO 34783
// end ;
34685: GO 34356
34687: POP
34688: POP
// side := GetSide ( depot ) ;
34689: LD_ADDR_VAR 0 9
34693: PUSH
34694: LD_VAR 0 1
34698: PPUSH
34699: CALL_OW 255
34703: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
34704: LD_VAR 0 9
34708: PPUSH
34709: LD_VAR 0 3
34713: PPUSH
34714: LD_VAR 0 4
34718: PPUSH
34719: LD_INT 20
34721: PPUSH
34722: CALL 27455 0 4
34726: PUSH
34727: LD_INT 4
34729: ARRAY
34730: IFFALSE 34734
// exit ;
34732: GO 34783
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
34734: LD_VAR 0 2
34738: PUSH
34739: LD_INT 29
34741: PUSH
34742: LD_INT 30
34744: PUSH
34745: EMPTY
34746: LIST
34747: LIST
34748: IN
34749: PUSH
34750: LD_VAR 0 3
34754: PPUSH
34755: LD_VAR 0 4
34759: PPUSH
34760: LD_VAR 0 9
34764: PPUSH
34765: CALL_OW 440
34769: NOT
34770: AND
34771: IFFALSE 34775
// exit ;
34773: GO 34783
// result := true ;
34775: LD_ADDR_VAR 0 6
34779: PUSH
34780: LD_INT 1
34782: ST_TO_ADDR
// end ;
34783: LD_VAR 0 6
34787: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
34788: LD_INT 0
34790: PPUSH
34791: PPUSH
34792: PPUSH
34793: PPUSH
34794: PPUSH
34795: PPUSH
34796: PPUSH
34797: PPUSH
34798: PPUSH
34799: PPUSH
34800: PPUSH
34801: PPUSH
34802: PPUSH
34803: PPUSH
34804: PPUSH
34805: PPUSH
34806: PPUSH
34807: PPUSH
34808: PPUSH
34809: PPUSH
34810: PPUSH
34811: PPUSH
34812: PPUSH
34813: PPUSH
34814: PPUSH
34815: PPUSH
34816: PPUSH
34817: PPUSH
34818: PPUSH
34819: PPUSH
34820: PPUSH
34821: PPUSH
34822: PPUSH
34823: PPUSH
34824: PPUSH
34825: PPUSH
34826: PPUSH
34827: PPUSH
34828: PPUSH
34829: PPUSH
34830: PPUSH
34831: PPUSH
34832: PPUSH
34833: PPUSH
34834: PPUSH
34835: PPUSH
34836: PPUSH
34837: PPUSH
34838: PPUSH
34839: PPUSH
34840: PPUSH
34841: PPUSH
34842: PPUSH
34843: PPUSH
34844: PPUSH
34845: PPUSH
34846: PPUSH
34847: PPUSH
// result = [ ] ;
34848: LD_ADDR_VAR 0 7
34852: PUSH
34853: EMPTY
34854: ST_TO_ADDR
// temp_list = [ ] ;
34855: LD_ADDR_VAR 0 9
34859: PUSH
34860: EMPTY
34861: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
34862: LD_VAR 0 4
34866: PUSH
34867: LD_INT 0
34869: PUSH
34870: LD_INT 1
34872: PUSH
34873: LD_INT 2
34875: PUSH
34876: LD_INT 3
34878: PUSH
34879: LD_INT 4
34881: PUSH
34882: LD_INT 5
34884: PUSH
34885: EMPTY
34886: LIST
34887: LIST
34888: LIST
34889: LIST
34890: LIST
34891: LIST
34892: IN
34893: NOT
34894: PUSH
34895: LD_VAR 0 1
34899: PUSH
34900: LD_INT 0
34902: PUSH
34903: LD_INT 1
34905: PUSH
34906: EMPTY
34907: LIST
34908: LIST
34909: IN
34910: PUSH
34911: LD_VAR 0 5
34915: PUSH
34916: LD_INT 1
34918: PUSH
34919: LD_INT 2
34921: PUSH
34922: LD_INT 3
34924: PUSH
34925: EMPTY
34926: LIST
34927: LIST
34928: LIST
34929: IN
34930: NOT
34931: AND
34932: OR
34933: IFFALSE 34937
// exit ;
34935: GO 53322
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
34937: LD_VAR 0 1
34941: PUSH
34942: LD_INT 6
34944: PUSH
34945: LD_INT 7
34947: PUSH
34948: LD_INT 8
34950: PUSH
34951: LD_INT 13
34953: PUSH
34954: LD_INT 12
34956: PUSH
34957: LD_INT 15
34959: PUSH
34960: LD_INT 11
34962: PUSH
34963: LD_INT 14
34965: PUSH
34966: LD_INT 10
34968: PUSH
34969: EMPTY
34970: LIST
34971: LIST
34972: LIST
34973: LIST
34974: LIST
34975: LIST
34976: LIST
34977: LIST
34978: LIST
34979: IN
34980: IFFALSE 34990
// btype = b_lab ;
34982: LD_ADDR_VAR 0 1
34986: PUSH
34987: LD_INT 6
34989: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
34990: LD_VAR 0 6
34994: PUSH
34995: LD_INT 0
34997: PUSH
34998: LD_INT 1
35000: PUSH
35001: LD_INT 2
35003: PUSH
35004: EMPTY
35005: LIST
35006: LIST
35007: LIST
35008: IN
35009: NOT
35010: PUSH
35011: LD_VAR 0 1
35015: PUSH
35016: LD_INT 0
35018: PUSH
35019: LD_INT 1
35021: PUSH
35022: LD_INT 2
35024: PUSH
35025: LD_INT 3
35027: PUSH
35028: LD_INT 6
35030: PUSH
35031: LD_INT 36
35033: PUSH
35034: LD_INT 4
35036: PUSH
35037: LD_INT 5
35039: PUSH
35040: LD_INT 31
35042: PUSH
35043: LD_INT 32
35045: PUSH
35046: LD_INT 33
35048: PUSH
35049: EMPTY
35050: LIST
35051: LIST
35052: LIST
35053: LIST
35054: LIST
35055: LIST
35056: LIST
35057: LIST
35058: LIST
35059: LIST
35060: LIST
35061: IN
35062: NOT
35063: PUSH
35064: LD_VAR 0 6
35068: PUSH
35069: LD_INT 1
35071: EQUAL
35072: AND
35073: OR
35074: PUSH
35075: LD_VAR 0 1
35079: PUSH
35080: LD_INT 2
35082: PUSH
35083: LD_INT 3
35085: PUSH
35086: EMPTY
35087: LIST
35088: LIST
35089: IN
35090: NOT
35091: PUSH
35092: LD_VAR 0 6
35096: PUSH
35097: LD_INT 2
35099: EQUAL
35100: AND
35101: OR
35102: IFFALSE 35112
// mode = 0 ;
35104: LD_ADDR_VAR 0 6
35108: PUSH
35109: LD_INT 0
35111: ST_TO_ADDR
// case mode of 0 :
35112: LD_VAR 0 6
35116: PUSH
35117: LD_INT 0
35119: DOUBLE
35120: EQUAL
35121: IFTRUE 35125
35123: GO 46578
35125: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35126: LD_ADDR_VAR 0 11
35130: PUSH
35131: LD_INT 0
35133: PUSH
35134: LD_INT 0
35136: PUSH
35137: EMPTY
35138: LIST
35139: LIST
35140: PUSH
35141: LD_INT 0
35143: PUSH
35144: LD_INT 1
35146: NEG
35147: PUSH
35148: EMPTY
35149: LIST
35150: LIST
35151: PUSH
35152: LD_INT 1
35154: PUSH
35155: LD_INT 0
35157: PUSH
35158: EMPTY
35159: LIST
35160: LIST
35161: PUSH
35162: LD_INT 1
35164: PUSH
35165: LD_INT 1
35167: PUSH
35168: EMPTY
35169: LIST
35170: LIST
35171: PUSH
35172: LD_INT 0
35174: PUSH
35175: LD_INT 1
35177: PUSH
35178: EMPTY
35179: LIST
35180: LIST
35181: PUSH
35182: LD_INT 1
35184: NEG
35185: PUSH
35186: LD_INT 0
35188: PUSH
35189: EMPTY
35190: LIST
35191: LIST
35192: PUSH
35193: LD_INT 1
35195: NEG
35196: PUSH
35197: LD_INT 1
35199: NEG
35200: PUSH
35201: EMPTY
35202: LIST
35203: LIST
35204: PUSH
35205: LD_INT 1
35207: NEG
35208: PUSH
35209: LD_INT 2
35211: NEG
35212: PUSH
35213: EMPTY
35214: LIST
35215: LIST
35216: PUSH
35217: LD_INT 0
35219: PUSH
35220: LD_INT 2
35222: NEG
35223: PUSH
35224: EMPTY
35225: LIST
35226: LIST
35227: PUSH
35228: LD_INT 1
35230: PUSH
35231: LD_INT 1
35233: NEG
35234: PUSH
35235: EMPTY
35236: LIST
35237: LIST
35238: PUSH
35239: LD_INT 1
35241: PUSH
35242: LD_INT 2
35244: PUSH
35245: EMPTY
35246: LIST
35247: LIST
35248: PUSH
35249: LD_INT 0
35251: PUSH
35252: LD_INT 2
35254: PUSH
35255: EMPTY
35256: LIST
35257: LIST
35258: PUSH
35259: LD_INT 1
35261: NEG
35262: PUSH
35263: LD_INT 1
35265: PUSH
35266: EMPTY
35267: LIST
35268: LIST
35269: PUSH
35270: LD_INT 1
35272: PUSH
35273: LD_INT 3
35275: PUSH
35276: EMPTY
35277: LIST
35278: LIST
35279: PUSH
35280: LD_INT 0
35282: PUSH
35283: LD_INT 3
35285: PUSH
35286: EMPTY
35287: LIST
35288: LIST
35289: PUSH
35290: LD_INT 1
35292: NEG
35293: PUSH
35294: LD_INT 2
35296: PUSH
35297: EMPTY
35298: LIST
35299: LIST
35300: PUSH
35301: EMPTY
35302: LIST
35303: LIST
35304: LIST
35305: LIST
35306: LIST
35307: LIST
35308: LIST
35309: LIST
35310: LIST
35311: LIST
35312: LIST
35313: LIST
35314: LIST
35315: LIST
35316: LIST
35317: LIST
35318: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35319: LD_ADDR_VAR 0 12
35323: PUSH
35324: LD_INT 0
35326: PUSH
35327: LD_INT 0
35329: PUSH
35330: EMPTY
35331: LIST
35332: LIST
35333: PUSH
35334: LD_INT 0
35336: PUSH
35337: LD_INT 1
35339: NEG
35340: PUSH
35341: EMPTY
35342: LIST
35343: LIST
35344: PUSH
35345: LD_INT 1
35347: PUSH
35348: LD_INT 0
35350: PUSH
35351: EMPTY
35352: LIST
35353: LIST
35354: PUSH
35355: LD_INT 1
35357: PUSH
35358: LD_INT 1
35360: PUSH
35361: EMPTY
35362: LIST
35363: LIST
35364: PUSH
35365: LD_INT 0
35367: PUSH
35368: LD_INT 1
35370: PUSH
35371: EMPTY
35372: LIST
35373: LIST
35374: PUSH
35375: LD_INT 1
35377: NEG
35378: PUSH
35379: LD_INT 0
35381: PUSH
35382: EMPTY
35383: LIST
35384: LIST
35385: PUSH
35386: LD_INT 1
35388: NEG
35389: PUSH
35390: LD_INT 1
35392: NEG
35393: PUSH
35394: EMPTY
35395: LIST
35396: LIST
35397: PUSH
35398: LD_INT 1
35400: PUSH
35401: LD_INT 1
35403: NEG
35404: PUSH
35405: EMPTY
35406: LIST
35407: LIST
35408: PUSH
35409: LD_INT 2
35411: PUSH
35412: LD_INT 0
35414: PUSH
35415: EMPTY
35416: LIST
35417: LIST
35418: PUSH
35419: LD_INT 2
35421: PUSH
35422: LD_INT 1
35424: PUSH
35425: EMPTY
35426: LIST
35427: LIST
35428: PUSH
35429: LD_INT 1
35431: NEG
35432: PUSH
35433: LD_INT 1
35435: PUSH
35436: EMPTY
35437: LIST
35438: LIST
35439: PUSH
35440: LD_INT 2
35442: NEG
35443: PUSH
35444: LD_INT 0
35446: PUSH
35447: EMPTY
35448: LIST
35449: LIST
35450: PUSH
35451: LD_INT 2
35453: NEG
35454: PUSH
35455: LD_INT 1
35457: NEG
35458: PUSH
35459: EMPTY
35460: LIST
35461: LIST
35462: PUSH
35463: LD_INT 2
35465: NEG
35466: PUSH
35467: LD_INT 1
35469: PUSH
35470: EMPTY
35471: LIST
35472: LIST
35473: PUSH
35474: LD_INT 3
35476: NEG
35477: PUSH
35478: LD_INT 0
35480: PUSH
35481: EMPTY
35482: LIST
35483: LIST
35484: PUSH
35485: LD_INT 3
35487: NEG
35488: PUSH
35489: LD_INT 1
35491: NEG
35492: PUSH
35493: EMPTY
35494: LIST
35495: LIST
35496: PUSH
35497: EMPTY
35498: LIST
35499: LIST
35500: LIST
35501: LIST
35502: LIST
35503: LIST
35504: LIST
35505: LIST
35506: LIST
35507: LIST
35508: LIST
35509: LIST
35510: LIST
35511: LIST
35512: LIST
35513: LIST
35514: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35515: LD_ADDR_VAR 0 13
35519: PUSH
35520: LD_INT 0
35522: PUSH
35523: LD_INT 0
35525: PUSH
35526: EMPTY
35527: LIST
35528: LIST
35529: PUSH
35530: LD_INT 0
35532: PUSH
35533: LD_INT 1
35535: NEG
35536: PUSH
35537: EMPTY
35538: LIST
35539: LIST
35540: PUSH
35541: LD_INT 1
35543: PUSH
35544: LD_INT 0
35546: PUSH
35547: EMPTY
35548: LIST
35549: LIST
35550: PUSH
35551: LD_INT 1
35553: PUSH
35554: LD_INT 1
35556: PUSH
35557: EMPTY
35558: LIST
35559: LIST
35560: PUSH
35561: LD_INT 0
35563: PUSH
35564: LD_INT 1
35566: PUSH
35567: EMPTY
35568: LIST
35569: LIST
35570: PUSH
35571: LD_INT 1
35573: NEG
35574: PUSH
35575: LD_INT 0
35577: PUSH
35578: EMPTY
35579: LIST
35580: LIST
35581: PUSH
35582: LD_INT 1
35584: NEG
35585: PUSH
35586: LD_INT 1
35588: NEG
35589: PUSH
35590: EMPTY
35591: LIST
35592: LIST
35593: PUSH
35594: LD_INT 1
35596: NEG
35597: PUSH
35598: LD_INT 2
35600: NEG
35601: PUSH
35602: EMPTY
35603: LIST
35604: LIST
35605: PUSH
35606: LD_INT 2
35608: PUSH
35609: LD_INT 1
35611: PUSH
35612: EMPTY
35613: LIST
35614: LIST
35615: PUSH
35616: LD_INT 2
35618: PUSH
35619: LD_INT 2
35621: PUSH
35622: EMPTY
35623: LIST
35624: LIST
35625: PUSH
35626: LD_INT 1
35628: PUSH
35629: LD_INT 2
35631: PUSH
35632: EMPTY
35633: LIST
35634: LIST
35635: PUSH
35636: LD_INT 2
35638: NEG
35639: PUSH
35640: LD_INT 1
35642: NEG
35643: PUSH
35644: EMPTY
35645: LIST
35646: LIST
35647: PUSH
35648: LD_INT 2
35650: NEG
35651: PUSH
35652: LD_INT 2
35654: NEG
35655: PUSH
35656: EMPTY
35657: LIST
35658: LIST
35659: PUSH
35660: LD_INT 2
35662: NEG
35663: PUSH
35664: LD_INT 3
35666: NEG
35667: PUSH
35668: EMPTY
35669: LIST
35670: LIST
35671: PUSH
35672: LD_INT 3
35674: NEG
35675: PUSH
35676: LD_INT 2
35678: NEG
35679: PUSH
35680: EMPTY
35681: LIST
35682: LIST
35683: PUSH
35684: LD_INT 3
35686: NEG
35687: PUSH
35688: LD_INT 3
35690: NEG
35691: PUSH
35692: EMPTY
35693: LIST
35694: LIST
35695: PUSH
35696: EMPTY
35697: LIST
35698: LIST
35699: LIST
35700: LIST
35701: LIST
35702: LIST
35703: LIST
35704: LIST
35705: LIST
35706: LIST
35707: LIST
35708: LIST
35709: LIST
35710: LIST
35711: LIST
35712: LIST
35713: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35714: LD_ADDR_VAR 0 14
35718: PUSH
35719: LD_INT 0
35721: PUSH
35722: LD_INT 0
35724: PUSH
35725: EMPTY
35726: LIST
35727: LIST
35728: PUSH
35729: LD_INT 0
35731: PUSH
35732: LD_INT 1
35734: NEG
35735: PUSH
35736: EMPTY
35737: LIST
35738: LIST
35739: PUSH
35740: LD_INT 1
35742: PUSH
35743: LD_INT 0
35745: PUSH
35746: EMPTY
35747: LIST
35748: LIST
35749: PUSH
35750: LD_INT 1
35752: PUSH
35753: LD_INT 1
35755: PUSH
35756: EMPTY
35757: LIST
35758: LIST
35759: PUSH
35760: LD_INT 0
35762: PUSH
35763: LD_INT 1
35765: PUSH
35766: EMPTY
35767: LIST
35768: LIST
35769: PUSH
35770: LD_INT 1
35772: NEG
35773: PUSH
35774: LD_INT 0
35776: PUSH
35777: EMPTY
35778: LIST
35779: LIST
35780: PUSH
35781: LD_INT 1
35783: NEG
35784: PUSH
35785: LD_INT 1
35787: NEG
35788: PUSH
35789: EMPTY
35790: LIST
35791: LIST
35792: PUSH
35793: LD_INT 1
35795: NEG
35796: PUSH
35797: LD_INT 2
35799: NEG
35800: PUSH
35801: EMPTY
35802: LIST
35803: LIST
35804: PUSH
35805: LD_INT 0
35807: PUSH
35808: LD_INT 2
35810: NEG
35811: PUSH
35812: EMPTY
35813: LIST
35814: LIST
35815: PUSH
35816: LD_INT 1
35818: PUSH
35819: LD_INT 1
35821: NEG
35822: PUSH
35823: EMPTY
35824: LIST
35825: LIST
35826: PUSH
35827: LD_INT 1
35829: PUSH
35830: LD_INT 2
35832: PUSH
35833: EMPTY
35834: LIST
35835: LIST
35836: PUSH
35837: LD_INT 0
35839: PUSH
35840: LD_INT 2
35842: PUSH
35843: EMPTY
35844: LIST
35845: LIST
35846: PUSH
35847: LD_INT 1
35849: NEG
35850: PUSH
35851: LD_INT 1
35853: PUSH
35854: EMPTY
35855: LIST
35856: LIST
35857: PUSH
35858: LD_INT 1
35860: NEG
35861: PUSH
35862: LD_INT 3
35864: NEG
35865: PUSH
35866: EMPTY
35867: LIST
35868: LIST
35869: PUSH
35870: LD_INT 0
35872: PUSH
35873: LD_INT 3
35875: NEG
35876: PUSH
35877: EMPTY
35878: LIST
35879: LIST
35880: PUSH
35881: LD_INT 1
35883: PUSH
35884: LD_INT 2
35886: NEG
35887: PUSH
35888: EMPTY
35889: LIST
35890: LIST
35891: PUSH
35892: EMPTY
35893: LIST
35894: LIST
35895: LIST
35896: LIST
35897: LIST
35898: LIST
35899: LIST
35900: LIST
35901: LIST
35902: LIST
35903: LIST
35904: LIST
35905: LIST
35906: LIST
35907: LIST
35908: LIST
35909: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35910: LD_ADDR_VAR 0 15
35914: PUSH
35915: LD_INT 0
35917: PUSH
35918: LD_INT 0
35920: PUSH
35921: EMPTY
35922: LIST
35923: LIST
35924: PUSH
35925: LD_INT 0
35927: PUSH
35928: LD_INT 1
35930: NEG
35931: PUSH
35932: EMPTY
35933: LIST
35934: LIST
35935: PUSH
35936: LD_INT 1
35938: PUSH
35939: LD_INT 0
35941: PUSH
35942: EMPTY
35943: LIST
35944: LIST
35945: PUSH
35946: LD_INT 1
35948: PUSH
35949: LD_INT 1
35951: PUSH
35952: EMPTY
35953: LIST
35954: LIST
35955: PUSH
35956: LD_INT 0
35958: PUSH
35959: LD_INT 1
35961: PUSH
35962: EMPTY
35963: LIST
35964: LIST
35965: PUSH
35966: LD_INT 1
35968: NEG
35969: PUSH
35970: LD_INT 0
35972: PUSH
35973: EMPTY
35974: LIST
35975: LIST
35976: PUSH
35977: LD_INT 1
35979: NEG
35980: PUSH
35981: LD_INT 1
35983: NEG
35984: PUSH
35985: EMPTY
35986: LIST
35987: LIST
35988: PUSH
35989: LD_INT 1
35991: PUSH
35992: LD_INT 1
35994: NEG
35995: PUSH
35996: EMPTY
35997: LIST
35998: LIST
35999: PUSH
36000: LD_INT 2
36002: PUSH
36003: LD_INT 0
36005: PUSH
36006: EMPTY
36007: LIST
36008: LIST
36009: PUSH
36010: LD_INT 2
36012: PUSH
36013: LD_INT 1
36015: PUSH
36016: EMPTY
36017: LIST
36018: LIST
36019: PUSH
36020: LD_INT 1
36022: NEG
36023: PUSH
36024: LD_INT 1
36026: PUSH
36027: EMPTY
36028: LIST
36029: LIST
36030: PUSH
36031: LD_INT 2
36033: NEG
36034: PUSH
36035: LD_INT 0
36037: PUSH
36038: EMPTY
36039: LIST
36040: LIST
36041: PUSH
36042: LD_INT 2
36044: NEG
36045: PUSH
36046: LD_INT 1
36048: NEG
36049: PUSH
36050: EMPTY
36051: LIST
36052: LIST
36053: PUSH
36054: LD_INT 2
36056: PUSH
36057: LD_INT 1
36059: NEG
36060: PUSH
36061: EMPTY
36062: LIST
36063: LIST
36064: PUSH
36065: LD_INT 3
36067: PUSH
36068: LD_INT 0
36070: PUSH
36071: EMPTY
36072: LIST
36073: LIST
36074: PUSH
36075: LD_INT 3
36077: PUSH
36078: LD_INT 1
36080: PUSH
36081: EMPTY
36082: LIST
36083: LIST
36084: PUSH
36085: EMPTY
36086: LIST
36087: LIST
36088: LIST
36089: LIST
36090: LIST
36091: LIST
36092: LIST
36093: LIST
36094: LIST
36095: LIST
36096: LIST
36097: LIST
36098: LIST
36099: LIST
36100: LIST
36101: LIST
36102: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36103: LD_ADDR_VAR 0 16
36107: PUSH
36108: LD_INT 0
36110: PUSH
36111: LD_INT 0
36113: PUSH
36114: EMPTY
36115: LIST
36116: LIST
36117: PUSH
36118: LD_INT 0
36120: PUSH
36121: LD_INT 1
36123: NEG
36124: PUSH
36125: EMPTY
36126: LIST
36127: LIST
36128: PUSH
36129: LD_INT 1
36131: PUSH
36132: LD_INT 0
36134: PUSH
36135: EMPTY
36136: LIST
36137: LIST
36138: PUSH
36139: LD_INT 1
36141: PUSH
36142: LD_INT 1
36144: PUSH
36145: EMPTY
36146: LIST
36147: LIST
36148: PUSH
36149: LD_INT 0
36151: PUSH
36152: LD_INT 1
36154: PUSH
36155: EMPTY
36156: LIST
36157: LIST
36158: PUSH
36159: LD_INT 1
36161: NEG
36162: PUSH
36163: LD_INT 0
36165: PUSH
36166: EMPTY
36167: LIST
36168: LIST
36169: PUSH
36170: LD_INT 1
36172: NEG
36173: PUSH
36174: LD_INT 1
36176: NEG
36177: PUSH
36178: EMPTY
36179: LIST
36180: LIST
36181: PUSH
36182: LD_INT 1
36184: NEG
36185: PUSH
36186: LD_INT 2
36188: NEG
36189: PUSH
36190: EMPTY
36191: LIST
36192: LIST
36193: PUSH
36194: LD_INT 2
36196: PUSH
36197: LD_INT 1
36199: PUSH
36200: EMPTY
36201: LIST
36202: LIST
36203: PUSH
36204: LD_INT 2
36206: PUSH
36207: LD_INT 2
36209: PUSH
36210: EMPTY
36211: LIST
36212: LIST
36213: PUSH
36214: LD_INT 1
36216: PUSH
36217: LD_INT 2
36219: PUSH
36220: EMPTY
36221: LIST
36222: LIST
36223: PUSH
36224: LD_INT 2
36226: NEG
36227: PUSH
36228: LD_INT 1
36230: NEG
36231: PUSH
36232: EMPTY
36233: LIST
36234: LIST
36235: PUSH
36236: LD_INT 2
36238: NEG
36239: PUSH
36240: LD_INT 2
36242: NEG
36243: PUSH
36244: EMPTY
36245: LIST
36246: LIST
36247: PUSH
36248: LD_INT 3
36250: PUSH
36251: LD_INT 2
36253: PUSH
36254: EMPTY
36255: LIST
36256: LIST
36257: PUSH
36258: LD_INT 3
36260: PUSH
36261: LD_INT 3
36263: PUSH
36264: EMPTY
36265: LIST
36266: LIST
36267: PUSH
36268: LD_INT 2
36270: PUSH
36271: LD_INT 3
36273: PUSH
36274: EMPTY
36275: LIST
36276: LIST
36277: PUSH
36278: EMPTY
36279: LIST
36280: LIST
36281: LIST
36282: LIST
36283: LIST
36284: LIST
36285: LIST
36286: LIST
36287: LIST
36288: LIST
36289: LIST
36290: LIST
36291: LIST
36292: LIST
36293: LIST
36294: LIST
36295: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36296: LD_ADDR_VAR 0 17
36300: PUSH
36301: LD_INT 0
36303: PUSH
36304: LD_INT 0
36306: PUSH
36307: EMPTY
36308: LIST
36309: LIST
36310: PUSH
36311: LD_INT 0
36313: PUSH
36314: LD_INT 1
36316: NEG
36317: PUSH
36318: EMPTY
36319: LIST
36320: LIST
36321: PUSH
36322: LD_INT 1
36324: PUSH
36325: LD_INT 0
36327: PUSH
36328: EMPTY
36329: LIST
36330: LIST
36331: PUSH
36332: LD_INT 1
36334: PUSH
36335: LD_INT 1
36337: PUSH
36338: EMPTY
36339: LIST
36340: LIST
36341: PUSH
36342: LD_INT 0
36344: PUSH
36345: LD_INT 1
36347: PUSH
36348: EMPTY
36349: LIST
36350: LIST
36351: PUSH
36352: LD_INT 1
36354: NEG
36355: PUSH
36356: LD_INT 0
36358: PUSH
36359: EMPTY
36360: LIST
36361: LIST
36362: PUSH
36363: LD_INT 1
36365: NEG
36366: PUSH
36367: LD_INT 1
36369: NEG
36370: PUSH
36371: EMPTY
36372: LIST
36373: LIST
36374: PUSH
36375: LD_INT 1
36377: NEG
36378: PUSH
36379: LD_INT 2
36381: NEG
36382: PUSH
36383: EMPTY
36384: LIST
36385: LIST
36386: PUSH
36387: LD_INT 0
36389: PUSH
36390: LD_INT 2
36392: NEG
36393: PUSH
36394: EMPTY
36395: LIST
36396: LIST
36397: PUSH
36398: LD_INT 1
36400: PUSH
36401: LD_INT 1
36403: NEG
36404: PUSH
36405: EMPTY
36406: LIST
36407: LIST
36408: PUSH
36409: LD_INT 2
36411: PUSH
36412: LD_INT 0
36414: PUSH
36415: EMPTY
36416: LIST
36417: LIST
36418: PUSH
36419: LD_INT 2
36421: PUSH
36422: LD_INT 1
36424: PUSH
36425: EMPTY
36426: LIST
36427: LIST
36428: PUSH
36429: LD_INT 2
36431: PUSH
36432: LD_INT 2
36434: PUSH
36435: EMPTY
36436: LIST
36437: LIST
36438: PUSH
36439: LD_INT 1
36441: PUSH
36442: LD_INT 2
36444: PUSH
36445: EMPTY
36446: LIST
36447: LIST
36448: PUSH
36449: LD_INT 0
36451: PUSH
36452: LD_INT 2
36454: PUSH
36455: EMPTY
36456: LIST
36457: LIST
36458: PUSH
36459: LD_INT 1
36461: NEG
36462: PUSH
36463: LD_INT 1
36465: PUSH
36466: EMPTY
36467: LIST
36468: LIST
36469: PUSH
36470: LD_INT 2
36472: NEG
36473: PUSH
36474: LD_INT 0
36476: PUSH
36477: EMPTY
36478: LIST
36479: LIST
36480: PUSH
36481: LD_INT 2
36483: NEG
36484: PUSH
36485: LD_INT 1
36487: NEG
36488: PUSH
36489: EMPTY
36490: LIST
36491: LIST
36492: PUSH
36493: LD_INT 2
36495: NEG
36496: PUSH
36497: LD_INT 2
36499: NEG
36500: PUSH
36501: EMPTY
36502: LIST
36503: LIST
36504: PUSH
36505: EMPTY
36506: LIST
36507: LIST
36508: LIST
36509: LIST
36510: LIST
36511: LIST
36512: LIST
36513: LIST
36514: LIST
36515: LIST
36516: LIST
36517: LIST
36518: LIST
36519: LIST
36520: LIST
36521: LIST
36522: LIST
36523: LIST
36524: LIST
36525: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36526: LD_ADDR_VAR 0 18
36530: PUSH
36531: LD_INT 0
36533: PUSH
36534: LD_INT 0
36536: PUSH
36537: EMPTY
36538: LIST
36539: LIST
36540: PUSH
36541: LD_INT 0
36543: PUSH
36544: LD_INT 1
36546: NEG
36547: PUSH
36548: EMPTY
36549: LIST
36550: LIST
36551: PUSH
36552: LD_INT 1
36554: PUSH
36555: LD_INT 0
36557: PUSH
36558: EMPTY
36559: LIST
36560: LIST
36561: PUSH
36562: LD_INT 1
36564: PUSH
36565: LD_INT 1
36567: PUSH
36568: EMPTY
36569: LIST
36570: LIST
36571: PUSH
36572: LD_INT 0
36574: PUSH
36575: LD_INT 1
36577: PUSH
36578: EMPTY
36579: LIST
36580: LIST
36581: PUSH
36582: LD_INT 1
36584: NEG
36585: PUSH
36586: LD_INT 0
36588: PUSH
36589: EMPTY
36590: LIST
36591: LIST
36592: PUSH
36593: LD_INT 1
36595: NEG
36596: PUSH
36597: LD_INT 1
36599: NEG
36600: PUSH
36601: EMPTY
36602: LIST
36603: LIST
36604: PUSH
36605: LD_INT 1
36607: NEG
36608: PUSH
36609: LD_INT 2
36611: NEG
36612: PUSH
36613: EMPTY
36614: LIST
36615: LIST
36616: PUSH
36617: LD_INT 0
36619: PUSH
36620: LD_INT 2
36622: NEG
36623: PUSH
36624: EMPTY
36625: LIST
36626: LIST
36627: PUSH
36628: LD_INT 1
36630: PUSH
36631: LD_INT 1
36633: NEG
36634: PUSH
36635: EMPTY
36636: LIST
36637: LIST
36638: PUSH
36639: LD_INT 2
36641: PUSH
36642: LD_INT 0
36644: PUSH
36645: EMPTY
36646: LIST
36647: LIST
36648: PUSH
36649: LD_INT 2
36651: PUSH
36652: LD_INT 1
36654: PUSH
36655: EMPTY
36656: LIST
36657: LIST
36658: PUSH
36659: LD_INT 2
36661: PUSH
36662: LD_INT 2
36664: PUSH
36665: EMPTY
36666: LIST
36667: LIST
36668: PUSH
36669: LD_INT 1
36671: PUSH
36672: LD_INT 2
36674: PUSH
36675: EMPTY
36676: LIST
36677: LIST
36678: PUSH
36679: LD_INT 0
36681: PUSH
36682: LD_INT 2
36684: PUSH
36685: EMPTY
36686: LIST
36687: LIST
36688: PUSH
36689: LD_INT 1
36691: NEG
36692: PUSH
36693: LD_INT 1
36695: PUSH
36696: EMPTY
36697: LIST
36698: LIST
36699: PUSH
36700: LD_INT 2
36702: NEG
36703: PUSH
36704: LD_INT 0
36706: PUSH
36707: EMPTY
36708: LIST
36709: LIST
36710: PUSH
36711: LD_INT 2
36713: NEG
36714: PUSH
36715: LD_INT 1
36717: NEG
36718: PUSH
36719: EMPTY
36720: LIST
36721: LIST
36722: PUSH
36723: LD_INT 2
36725: NEG
36726: PUSH
36727: LD_INT 2
36729: NEG
36730: PUSH
36731: EMPTY
36732: LIST
36733: LIST
36734: PUSH
36735: EMPTY
36736: LIST
36737: LIST
36738: LIST
36739: LIST
36740: LIST
36741: LIST
36742: LIST
36743: LIST
36744: LIST
36745: LIST
36746: LIST
36747: LIST
36748: LIST
36749: LIST
36750: LIST
36751: LIST
36752: LIST
36753: LIST
36754: LIST
36755: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36756: LD_ADDR_VAR 0 19
36760: PUSH
36761: LD_INT 0
36763: PUSH
36764: LD_INT 0
36766: PUSH
36767: EMPTY
36768: LIST
36769: LIST
36770: PUSH
36771: LD_INT 0
36773: PUSH
36774: LD_INT 1
36776: NEG
36777: PUSH
36778: EMPTY
36779: LIST
36780: LIST
36781: PUSH
36782: LD_INT 1
36784: PUSH
36785: LD_INT 0
36787: PUSH
36788: EMPTY
36789: LIST
36790: LIST
36791: PUSH
36792: LD_INT 1
36794: PUSH
36795: LD_INT 1
36797: PUSH
36798: EMPTY
36799: LIST
36800: LIST
36801: PUSH
36802: LD_INT 0
36804: PUSH
36805: LD_INT 1
36807: PUSH
36808: EMPTY
36809: LIST
36810: LIST
36811: PUSH
36812: LD_INT 1
36814: NEG
36815: PUSH
36816: LD_INT 0
36818: PUSH
36819: EMPTY
36820: LIST
36821: LIST
36822: PUSH
36823: LD_INT 1
36825: NEG
36826: PUSH
36827: LD_INT 1
36829: NEG
36830: PUSH
36831: EMPTY
36832: LIST
36833: LIST
36834: PUSH
36835: LD_INT 1
36837: NEG
36838: PUSH
36839: LD_INT 2
36841: NEG
36842: PUSH
36843: EMPTY
36844: LIST
36845: LIST
36846: PUSH
36847: LD_INT 0
36849: PUSH
36850: LD_INT 2
36852: NEG
36853: PUSH
36854: EMPTY
36855: LIST
36856: LIST
36857: PUSH
36858: LD_INT 1
36860: PUSH
36861: LD_INT 1
36863: NEG
36864: PUSH
36865: EMPTY
36866: LIST
36867: LIST
36868: PUSH
36869: LD_INT 2
36871: PUSH
36872: LD_INT 0
36874: PUSH
36875: EMPTY
36876: LIST
36877: LIST
36878: PUSH
36879: LD_INT 2
36881: PUSH
36882: LD_INT 1
36884: PUSH
36885: EMPTY
36886: LIST
36887: LIST
36888: PUSH
36889: LD_INT 2
36891: PUSH
36892: LD_INT 2
36894: PUSH
36895: EMPTY
36896: LIST
36897: LIST
36898: PUSH
36899: LD_INT 1
36901: PUSH
36902: LD_INT 2
36904: PUSH
36905: EMPTY
36906: LIST
36907: LIST
36908: PUSH
36909: LD_INT 0
36911: PUSH
36912: LD_INT 2
36914: PUSH
36915: EMPTY
36916: LIST
36917: LIST
36918: PUSH
36919: LD_INT 1
36921: NEG
36922: PUSH
36923: LD_INT 1
36925: PUSH
36926: EMPTY
36927: LIST
36928: LIST
36929: PUSH
36930: LD_INT 2
36932: NEG
36933: PUSH
36934: LD_INT 0
36936: PUSH
36937: EMPTY
36938: LIST
36939: LIST
36940: PUSH
36941: LD_INT 2
36943: NEG
36944: PUSH
36945: LD_INT 1
36947: NEG
36948: PUSH
36949: EMPTY
36950: LIST
36951: LIST
36952: PUSH
36953: LD_INT 2
36955: NEG
36956: PUSH
36957: LD_INT 2
36959: NEG
36960: PUSH
36961: EMPTY
36962: LIST
36963: LIST
36964: PUSH
36965: EMPTY
36966: LIST
36967: LIST
36968: LIST
36969: LIST
36970: LIST
36971: LIST
36972: LIST
36973: LIST
36974: LIST
36975: LIST
36976: LIST
36977: LIST
36978: LIST
36979: LIST
36980: LIST
36981: LIST
36982: LIST
36983: LIST
36984: LIST
36985: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36986: LD_ADDR_VAR 0 20
36990: PUSH
36991: LD_INT 0
36993: PUSH
36994: LD_INT 0
36996: PUSH
36997: EMPTY
36998: LIST
36999: LIST
37000: PUSH
37001: LD_INT 0
37003: PUSH
37004: LD_INT 1
37006: NEG
37007: PUSH
37008: EMPTY
37009: LIST
37010: LIST
37011: PUSH
37012: LD_INT 1
37014: PUSH
37015: LD_INT 0
37017: PUSH
37018: EMPTY
37019: LIST
37020: LIST
37021: PUSH
37022: LD_INT 1
37024: PUSH
37025: LD_INT 1
37027: PUSH
37028: EMPTY
37029: LIST
37030: LIST
37031: PUSH
37032: LD_INT 0
37034: PUSH
37035: LD_INT 1
37037: PUSH
37038: EMPTY
37039: LIST
37040: LIST
37041: PUSH
37042: LD_INT 1
37044: NEG
37045: PUSH
37046: LD_INT 0
37048: PUSH
37049: EMPTY
37050: LIST
37051: LIST
37052: PUSH
37053: LD_INT 1
37055: NEG
37056: PUSH
37057: LD_INT 1
37059: NEG
37060: PUSH
37061: EMPTY
37062: LIST
37063: LIST
37064: PUSH
37065: LD_INT 1
37067: NEG
37068: PUSH
37069: LD_INT 2
37071: NEG
37072: PUSH
37073: EMPTY
37074: LIST
37075: LIST
37076: PUSH
37077: LD_INT 0
37079: PUSH
37080: LD_INT 2
37082: NEG
37083: PUSH
37084: EMPTY
37085: LIST
37086: LIST
37087: PUSH
37088: LD_INT 1
37090: PUSH
37091: LD_INT 1
37093: NEG
37094: PUSH
37095: EMPTY
37096: LIST
37097: LIST
37098: PUSH
37099: LD_INT 2
37101: PUSH
37102: LD_INT 0
37104: PUSH
37105: EMPTY
37106: LIST
37107: LIST
37108: PUSH
37109: LD_INT 2
37111: PUSH
37112: LD_INT 1
37114: PUSH
37115: EMPTY
37116: LIST
37117: LIST
37118: PUSH
37119: LD_INT 2
37121: PUSH
37122: LD_INT 2
37124: PUSH
37125: EMPTY
37126: LIST
37127: LIST
37128: PUSH
37129: LD_INT 1
37131: PUSH
37132: LD_INT 2
37134: PUSH
37135: EMPTY
37136: LIST
37137: LIST
37138: PUSH
37139: LD_INT 0
37141: PUSH
37142: LD_INT 2
37144: PUSH
37145: EMPTY
37146: LIST
37147: LIST
37148: PUSH
37149: LD_INT 1
37151: NEG
37152: PUSH
37153: LD_INT 1
37155: PUSH
37156: EMPTY
37157: LIST
37158: LIST
37159: PUSH
37160: LD_INT 2
37162: NEG
37163: PUSH
37164: LD_INT 0
37166: PUSH
37167: EMPTY
37168: LIST
37169: LIST
37170: PUSH
37171: LD_INT 2
37173: NEG
37174: PUSH
37175: LD_INT 1
37177: NEG
37178: PUSH
37179: EMPTY
37180: LIST
37181: LIST
37182: PUSH
37183: LD_INT 2
37185: NEG
37186: PUSH
37187: LD_INT 2
37189: NEG
37190: PUSH
37191: EMPTY
37192: LIST
37193: LIST
37194: PUSH
37195: EMPTY
37196: LIST
37197: LIST
37198: LIST
37199: LIST
37200: LIST
37201: LIST
37202: LIST
37203: LIST
37204: LIST
37205: LIST
37206: LIST
37207: LIST
37208: LIST
37209: LIST
37210: LIST
37211: LIST
37212: LIST
37213: LIST
37214: LIST
37215: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37216: LD_ADDR_VAR 0 21
37220: PUSH
37221: LD_INT 0
37223: PUSH
37224: LD_INT 0
37226: PUSH
37227: EMPTY
37228: LIST
37229: LIST
37230: PUSH
37231: LD_INT 0
37233: PUSH
37234: LD_INT 1
37236: NEG
37237: PUSH
37238: EMPTY
37239: LIST
37240: LIST
37241: PUSH
37242: LD_INT 1
37244: PUSH
37245: LD_INT 0
37247: PUSH
37248: EMPTY
37249: LIST
37250: LIST
37251: PUSH
37252: LD_INT 1
37254: PUSH
37255: LD_INT 1
37257: PUSH
37258: EMPTY
37259: LIST
37260: LIST
37261: PUSH
37262: LD_INT 0
37264: PUSH
37265: LD_INT 1
37267: PUSH
37268: EMPTY
37269: LIST
37270: LIST
37271: PUSH
37272: LD_INT 1
37274: NEG
37275: PUSH
37276: LD_INT 0
37278: PUSH
37279: EMPTY
37280: LIST
37281: LIST
37282: PUSH
37283: LD_INT 1
37285: NEG
37286: PUSH
37287: LD_INT 1
37289: NEG
37290: PUSH
37291: EMPTY
37292: LIST
37293: LIST
37294: PUSH
37295: LD_INT 1
37297: NEG
37298: PUSH
37299: LD_INT 2
37301: NEG
37302: PUSH
37303: EMPTY
37304: LIST
37305: LIST
37306: PUSH
37307: LD_INT 0
37309: PUSH
37310: LD_INT 2
37312: NEG
37313: PUSH
37314: EMPTY
37315: LIST
37316: LIST
37317: PUSH
37318: LD_INT 1
37320: PUSH
37321: LD_INT 1
37323: NEG
37324: PUSH
37325: EMPTY
37326: LIST
37327: LIST
37328: PUSH
37329: LD_INT 2
37331: PUSH
37332: LD_INT 0
37334: PUSH
37335: EMPTY
37336: LIST
37337: LIST
37338: PUSH
37339: LD_INT 2
37341: PUSH
37342: LD_INT 1
37344: PUSH
37345: EMPTY
37346: LIST
37347: LIST
37348: PUSH
37349: LD_INT 2
37351: PUSH
37352: LD_INT 2
37354: PUSH
37355: EMPTY
37356: LIST
37357: LIST
37358: PUSH
37359: LD_INT 1
37361: PUSH
37362: LD_INT 2
37364: PUSH
37365: EMPTY
37366: LIST
37367: LIST
37368: PUSH
37369: LD_INT 0
37371: PUSH
37372: LD_INT 2
37374: PUSH
37375: EMPTY
37376: LIST
37377: LIST
37378: PUSH
37379: LD_INT 1
37381: NEG
37382: PUSH
37383: LD_INT 1
37385: PUSH
37386: EMPTY
37387: LIST
37388: LIST
37389: PUSH
37390: LD_INT 2
37392: NEG
37393: PUSH
37394: LD_INT 0
37396: PUSH
37397: EMPTY
37398: LIST
37399: LIST
37400: PUSH
37401: LD_INT 2
37403: NEG
37404: PUSH
37405: LD_INT 1
37407: NEG
37408: PUSH
37409: EMPTY
37410: LIST
37411: LIST
37412: PUSH
37413: LD_INT 2
37415: NEG
37416: PUSH
37417: LD_INT 2
37419: NEG
37420: PUSH
37421: EMPTY
37422: LIST
37423: LIST
37424: PUSH
37425: EMPTY
37426: LIST
37427: LIST
37428: LIST
37429: LIST
37430: LIST
37431: LIST
37432: LIST
37433: LIST
37434: LIST
37435: LIST
37436: LIST
37437: LIST
37438: LIST
37439: LIST
37440: LIST
37441: LIST
37442: LIST
37443: LIST
37444: LIST
37445: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37446: LD_ADDR_VAR 0 22
37450: PUSH
37451: LD_INT 0
37453: PUSH
37454: LD_INT 0
37456: PUSH
37457: EMPTY
37458: LIST
37459: LIST
37460: PUSH
37461: LD_INT 0
37463: PUSH
37464: LD_INT 1
37466: NEG
37467: PUSH
37468: EMPTY
37469: LIST
37470: LIST
37471: PUSH
37472: LD_INT 1
37474: PUSH
37475: LD_INT 0
37477: PUSH
37478: EMPTY
37479: LIST
37480: LIST
37481: PUSH
37482: LD_INT 1
37484: PUSH
37485: LD_INT 1
37487: PUSH
37488: EMPTY
37489: LIST
37490: LIST
37491: PUSH
37492: LD_INT 0
37494: PUSH
37495: LD_INT 1
37497: PUSH
37498: EMPTY
37499: LIST
37500: LIST
37501: PUSH
37502: LD_INT 1
37504: NEG
37505: PUSH
37506: LD_INT 0
37508: PUSH
37509: EMPTY
37510: LIST
37511: LIST
37512: PUSH
37513: LD_INT 1
37515: NEG
37516: PUSH
37517: LD_INT 1
37519: NEG
37520: PUSH
37521: EMPTY
37522: LIST
37523: LIST
37524: PUSH
37525: LD_INT 1
37527: NEG
37528: PUSH
37529: LD_INT 2
37531: NEG
37532: PUSH
37533: EMPTY
37534: LIST
37535: LIST
37536: PUSH
37537: LD_INT 0
37539: PUSH
37540: LD_INT 2
37542: NEG
37543: PUSH
37544: EMPTY
37545: LIST
37546: LIST
37547: PUSH
37548: LD_INT 1
37550: PUSH
37551: LD_INT 1
37553: NEG
37554: PUSH
37555: EMPTY
37556: LIST
37557: LIST
37558: PUSH
37559: LD_INT 2
37561: PUSH
37562: LD_INT 0
37564: PUSH
37565: EMPTY
37566: LIST
37567: LIST
37568: PUSH
37569: LD_INT 2
37571: PUSH
37572: LD_INT 1
37574: PUSH
37575: EMPTY
37576: LIST
37577: LIST
37578: PUSH
37579: LD_INT 2
37581: PUSH
37582: LD_INT 2
37584: PUSH
37585: EMPTY
37586: LIST
37587: LIST
37588: PUSH
37589: LD_INT 1
37591: PUSH
37592: LD_INT 2
37594: PUSH
37595: EMPTY
37596: LIST
37597: LIST
37598: PUSH
37599: LD_INT 0
37601: PUSH
37602: LD_INT 2
37604: PUSH
37605: EMPTY
37606: LIST
37607: LIST
37608: PUSH
37609: LD_INT 1
37611: NEG
37612: PUSH
37613: LD_INT 1
37615: PUSH
37616: EMPTY
37617: LIST
37618: LIST
37619: PUSH
37620: LD_INT 2
37622: NEG
37623: PUSH
37624: LD_INT 0
37626: PUSH
37627: EMPTY
37628: LIST
37629: LIST
37630: PUSH
37631: LD_INT 2
37633: NEG
37634: PUSH
37635: LD_INT 1
37637: NEG
37638: PUSH
37639: EMPTY
37640: LIST
37641: LIST
37642: PUSH
37643: LD_INT 2
37645: NEG
37646: PUSH
37647: LD_INT 2
37649: NEG
37650: PUSH
37651: EMPTY
37652: LIST
37653: LIST
37654: PUSH
37655: EMPTY
37656: LIST
37657: LIST
37658: LIST
37659: LIST
37660: LIST
37661: LIST
37662: LIST
37663: LIST
37664: LIST
37665: LIST
37666: LIST
37667: LIST
37668: LIST
37669: LIST
37670: LIST
37671: LIST
37672: LIST
37673: LIST
37674: LIST
37675: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
37676: LD_ADDR_VAR 0 23
37680: PUSH
37681: LD_INT 0
37683: PUSH
37684: LD_INT 0
37686: PUSH
37687: EMPTY
37688: LIST
37689: LIST
37690: PUSH
37691: LD_INT 0
37693: PUSH
37694: LD_INT 1
37696: NEG
37697: PUSH
37698: EMPTY
37699: LIST
37700: LIST
37701: PUSH
37702: LD_INT 1
37704: PUSH
37705: LD_INT 0
37707: PUSH
37708: EMPTY
37709: LIST
37710: LIST
37711: PUSH
37712: LD_INT 1
37714: PUSH
37715: LD_INT 1
37717: PUSH
37718: EMPTY
37719: LIST
37720: LIST
37721: PUSH
37722: LD_INT 0
37724: PUSH
37725: LD_INT 1
37727: PUSH
37728: EMPTY
37729: LIST
37730: LIST
37731: PUSH
37732: LD_INT 1
37734: NEG
37735: PUSH
37736: LD_INT 0
37738: PUSH
37739: EMPTY
37740: LIST
37741: LIST
37742: PUSH
37743: LD_INT 1
37745: NEG
37746: PUSH
37747: LD_INT 1
37749: NEG
37750: PUSH
37751: EMPTY
37752: LIST
37753: LIST
37754: PUSH
37755: LD_INT 1
37757: NEG
37758: PUSH
37759: LD_INT 2
37761: NEG
37762: PUSH
37763: EMPTY
37764: LIST
37765: LIST
37766: PUSH
37767: LD_INT 0
37769: PUSH
37770: LD_INT 2
37772: NEG
37773: PUSH
37774: EMPTY
37775: LIST
37776: LIST
37777: PUSH
37778: LD_INT 1
37780: PUSH
37781: LD_INT 1
37783: NEG
37784: PUSH
37785: EMPTY
37786: LIST
37787: LIST
37788: PUSH
37789: LD_INT 2
37791: PUSH
37792: LD_INT 0
37794: PUSH
37795: EMPTY
37796: LIST
37797: LIST
37798: PUSH
37799: LD_INT 2
37801: PUSH
37802: LD_INT 1
37804: PUSH
37805: EMPTY
37806: LIST
37807: LIST
37808: PUSH
37809: LD_INT 2
37811: PUSH
37812: LD_INT 2
37814: PUSH
37815: EMPTY
37816: LIST
37817: LIST
37818: PUSH
37819: LD_INT 1
37821: PUSH
37822: LD_INT 2
37824: PUSH
37825: EMPTY
37826: LIST
37827: LIST
37828: PUSH
37829: LD_INT 0
37831: PUSH
37832: LD_INT 2
37834: PUSH
37835: EMPTY
37836: LIST
37837: LIST
37838: PUSH
37839: LD_INT 1
37841: NEG
37842: PUSH
37843: LD_INT 1
37845: PUSH
37846: EMPTY
37847: LIST
37848: LIST
37849: PUSH
37850: LD_INT 2
37852: NEG
37853: PUSH
37854: LD_INT 0
37856: PUSH
37857: EMPTY
37858: LIST
37859: LIST
37860: PUSH
37861: LD_INT 2
37863: NEG
37864: PUSH
37865: LD_INT 1
37867: NEG
37868: PUSH
37869: EMPTY
37870: LIST
37871: LIST
37872: PUSH
37873: LD_INT 2
37875: NEG
37876: PUSH
37877: LD_INT 2
37879: NEG
37880: PUSH
37881: EMPTY
37882: LIST
37883: LIST
37884: PUSH
37885: LD_INT 2
37887: NEG
37888: PUSH
37889: LD_INT 3
37891: NEG
37892: PUSH
37893: EMPTY
37894: LIST
37895: LIST
37896: PUSH
37897: LD_INT 1
37899: NEG
37900: PUSH
37901: LD_INT 3
37903: NEG
37904: PUSH
37905: EMPTY
37906: LIST
37907: LIST
37908: PUSH
37909: LD_INT 1
37911: PUSH
37912: LD_INT 2
37914: NEG
37915: PUSH
37916: EMPTY
37917: LIST
37918: LIST
37919: PUSH
37920: LD_INT 2
37922: PUSH
37923: LD_INT 1
37925: NEG
37926: PUSH
37927: EMPTY
37928: LIST
37929: LIST
37930: PUSH
37931: EMPTY
37932: LIST
37933: LIST
37934: LIST
37935: LIST
37936: LIST
37937: LIST
37938: LIST
37939: LIST
37940: LIST
37941: LIST
37942: LIST
37943: LIST
37944: LIST
37945: LIST
37946: LIST
37947: LIST
37948: LIST
37949: LIST
37950: LIST
37951: LIST
37952: LIST
37953: LIST
37954: LIST
37955: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
37956: LD_ADDR_VAR 0 24
37960: PUSH
37961: LD_INT 0
37963: PUSH
37964: LD_INT 0
37966: PUSH
37967: EMPTY
37968: LIST
37969: LIST
37970: PUSH
37971: LD_INT 0
37973: PUSH
37974: LD_INT 1
37976: NEG
37977: PUSH
37978: EMPTY
37979: LIST
37980: LIST
37981: PUSH
37982: LD_INT 1
37984: PUSH
37985: LD_INT 0
37987: PUSH
37988: EMPTY
37989: LIST
37990: LIST
37991: PUSH
37992: LD_INT 1
37994: PUSH
37995: LD_INT 1
37997: PUSH
37998: EMPTY
37999: LIST
38000: LIST
38001: PUSH
38002: LD_INT 0
38004: PUSH
38005: LD_INT 1
38007: PUSH
38008: EMPTY
38009: LIST
38010: LIST
38011: PUSH
38012: LD_INT 1
38014: NEG
38015: PUSH
38016: LD_INT 0
38018: PUSH
38019: EMPTY
38020: LIST
38021: LIST
38022: PUSH
38023: LD_INT 1
38025: NEG
38026: PUSH
38027: LD_INT 1
38029: NEG
38030: PUSH
38031: EMPTY
38032: LIST
38033: LIST
38034: PUSH
38035: LD_INT 1
38037: NEG
38038: PUSH
38039: LD_INT 2
38041: NEG
38042: PUSH
38043: EMPTY
38044: LIST
38045: LIST
38046: PUSH
38047: LD_INT 0
38049: PUSH
38050: LD_INT 2
38052: NEG
38053: PUSH
38054: EMPTY
38055: LIST
38056: LIST
38057: PUSH
38058: LD_INT 1
38060: PUSH
38061: LD_INT 1
38063: NEG
38064: PUSH
38065: EMPTY
38066: LIST
38067: LIST
38068: PUSH
38069: LD_INT 2
38071: PUSH
38072: LD_INT 0
38074: PUSH
38075: EMPTY
38076: LIST
38077: LIST
38078: PUSH
38079: LD_INT 2
38081: PUSH
38082: LD_INT 1
38084: PUSH
38085: EMPTY
38086: LIST
38087: LIST
38088: PUSH
38089: LD_INT 2
38091: PUSH
38092: LD_INT 2
38094: PUSH
38095: EMPTY
38096: LIST
38097: LIST
38098: PUSH
38099: LD_INT 1
38101: PUSH
38102: LD_INT 2
38104: PUSH
38105: EMPTY
38106: LIST
38107: LIST
38108: PUSH
38109: LD_INT 0
38111: PUSH
38112: LD_INT 2
38114: PUSH
38115: EMPTY
38116: LIST
38117: LIST
38118: PUSH
38119: LD_INT 1
38121: NEG
38122: PUSH
38123: LD_INT 1
38125: PUSH
38126: EMPTY
38127: LIST
38128: LIST
38129: PUSH
38130: LD_INT 2
38132: NEG
38133: PUSH
38134: LD_INT 0
38136: PUSH
38137: EMPTY
38138: LIST
38139: LIST
38140: PUSH
38141: LD_INT 2
38143: NEG
38144: PUSH
38145: LD_INT 1
38147: NEG
38148: PUSH
38149: EMPTY
38150: LIST
38151: LIST
38152: PUSH
38153: LD_INT 2
38155: NEG
38156: PUSH
38157: LD_INT 2
38159: NEG
38160: PUSH
38161: EMPTY
38162: LIST
38163: LIST
38164: PUSH
38165: LD_INT 1
38167: PUSH
38168: LD_INT 2
38170: NEG
38171: PUSH
38172: EMPTY
38173: LIST
38174: LIST
38175: PUSH
38176: LD_INT 2
38178: PUSH
38179: LD_INT 1
38181: NEG
38182: PUSH
38183: EMPTY
38184: LIST
38185: LIST
38186: PUSH
38187: LD_INT 3
38189: PUSH
38190: LD_INT 1
38192: PUSH
38193: EMPTY
38194: LIST
38195: LIST
38196: PUSH
38197: LD_INT 3
38199: PUSH
38200: LD_INT 2
38202: PUSH
38203: EMPTY
38204: LIST
38205: LIST
38206: PUSH
38207: EMPTY
38208: LIST
38209: LIST
38210: LIST
38211: LIST
38212: LIST
38213: LIST
38214: LIST
38215: LIST
38216: LIST
38217: LIST
38218: LIST
38219: LIST
38220: LIST
38221: LIST
38222: LIST
38223: LIST
38224: LIST
38225: LIST
38226: LIST
38227: LIST
38228: LIST
38229: LIST
38230: LIST
38231: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
38232: LD_ADDR_VAR 0 25
38236: PUSH
38237: LD_INT 0
38239: PUSH
38240: LD_INT 0
38242: PUSH
38243: EMPTY
38244: LIST
38245: LIST
38246: PUSH
38247: LD_INT 0
38249: PUSH
38250: LD_INT 1
38252: NEG
38253: PUSH
38254: EMPTY
38255: LIST
38256: LIST
38257: PUSH
38258: LD_INT 1
38260: PUSH
38261: LD_INT 0
38263: PUSH
38264: EMPTY
38265: LIST
38266: LIST
38267: PUSH
38268: LD_INT 1
38270: PUSH
38271: LD_INT 1
38273: PUSH
38274: EMPTY
38275: LIST
38276: LIST
38277: PUSH
38278: LD_INT 0
38280: PUSH
38281: LD_INT 1
38283: PUSH
38284: EMPTY
38285: LIST
38286: LIST
38287: PUSH
38288: LD_INT 1
38290: NEG
38291: PUSH
38292: LD_INT 0
38294: PUSH
38295: EMPTY
38296: LIST
38297: LIST
38298: PUSH
38299: LD_INT 1
38301: NEG
38302: PUSH
38303: LD_INT 1
38305: NEG
38306: PUSH
38307: EMPTY
38308: LIST
38309: LIST
38310: PUSH
38311: LD_INT 1
38313: NEG
38314: PUSH
38315: LD_INT 2
38317: NEG
38318: PUSH
38319: EMPTY
38320: LIST
38321: LIST
38322: PUSH
38323: LD_INT 0
38325: PUSH
38326: LD_INT 2
38328: NEG
38329: PUSH
38330: EMPTY
38331: LIST
38332: LIST
38333: PUSH
38334: LD_INT 1
38336: PUSH
38337: LD_INT 1
38339: NEG
38340: PUSH
38341: EMPTY
38342: LIST
38343: LIST
38344: PUSH
38345: LD_INT 2
38347: PUSH
38348: LD_INT 0
38350: PUSH
38351: EMPTY
38352: LIST
38353: LIST
38354: PUSH
38355: LD_INT 2
38357: PUSH
38358: LD_INT 1
38360: PUSH
38361: EMPTY
38362: LIST
38363: LIST
38364: PUSH
38365: LD_INT 2
38367: PUSH
38368: LD_INT 2
38370: PUSH
38371: EMPTY
38372: LIST
38373: LIST
38374: PUSH
38375: LD_INT 1
38377: PUSH
38378: LD_INT 2
38380: PUSH
38381: EMPTY
38382: LIST
38383: LIST
38384: PUSH
38385: LD_INT 0
38387: PUSH
38388: LD_INT 2
38390: PUSH
38391: EMPTY
38392: LIST
38393: LIST
38394: PUSH
38395: LD_INT 1
38397: NEG
38398: PUSH
38399: LD_INT 1
38401: PUSH
38402: EMPTY
38403: LIST
38404: LIST
38405: PUSH
38406: LD_INT 2
38408: NEG
38409: PUSH
38410: LD_INT 0
38412: PUSH
38413: EMPTY
38414: LIST
38415: LIST
38416: PUSH
38417: LD_INT 2
38419: NEG
38420: PUSH
38421: LD_INT 1
38423: NEG
38424: PUSH
38425: EMPTY
38426: LIST
38427: LIST
38428: PUSH
38429: LD_INT 2
38431: NEG
38432: PUSH
38433: LD_INT 2
38435: NEG
38436: PUSH
38437: EMPTY
38438: LIST
38439: LIST
38440: PUSH
38441: LD_INT 3
38443: PUSH
38444: LD_INT 1
38446: PUSH
38447: EMPTY
38448: LIST
38449: LIST
38450: PUSH
38451: LD_INT 3
38453: PUSH
38454: LD_INT 2
38456: PUSH
38457: EMPTY
38458: LIST
38459: LIST
38460: PUSH
38461: LD_INT 2
38463: PUSH
38464: LD_INT 3
38466: PUSH
38467: EMPTY
38468: LIST
38469: LIST
38470: PUSH
38471: LD_INT 1
38473: PUSH
38474: LD_INT 3
38476: PUSH
38477: EMPTY
38478: LIST
38479: LIST
38480: PUSH
38481: EMPTY
38482: LIST
38483: LIST
38484: LIST
38485: LIST
38486: LIST
38487: LIST
38488: LIST
38489: LIST
38490: LIST
38491: LIST
38492: LIST
38493: LIST
38494: LIST
38495: LIST
38496: LIST
38497: LIST
38498: LIST
38499: LIST
38500: LIST
38501: LIST
38502: LIST
38503: LIST
38504: LIST
38505: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
38506: LD_ADDR_VAR 0 26
38510: PUSH
38511: LD_INT 0
38513: PUSH
38514: LD_INT 0
38516: PUSH
38517: EMPTY
38518: LIST
38519: LIST
38520: PUSH
38521: LD_INT 0
38523: PUSH
38524: LD_INT 1
38526: NEG
38527: PUSH
38528: EMPTY
38529: LIST
38530: LIST
38531: PUSH
38532: LD_INT 1
38534: PUSH
38535: LD_INT 0
38537: PUSH
38538: EMPTY
38539: LIST
38540: LIST
38541: PUSH
38542: LD_INT 1
38544: PUSH
38545: LD_INT 1
38547: PUSH
38548: EMPTY
38549: LIST
38550: LIST
38551: PUSH
38552: LD_INT 0
38554: PUSH
38555: LD_INT 1
38557: PUSH
38558: EMPTY
38559: LIST
38560: LIST
38561: PUSH
38562: LD_INT 1
38564: NEG
38565: PUSH
38566: LD_INT 0
38568: PUSH
38569: EMPTY
38570: LIST
38571: LIST
38572: PUSH
38573: LD_INT 1
38575: NEG
38576: PUSH
38577: LD_INT 1
38579: NEG
38580: PUSH
38581: EMPTY
38582: LIST
38583: LIST
38584: PUSH
38585: LD_INT 1
38587: NEG
38588: PUSH
38589: LD_INT 2
38591: NEG
38592: PUSH
38593: EMPTY
38594: LIST
38595: LIST
38596: PUSH
38597: LD_INT 0
38599: PUSH
38600: LD_INT 2
38602: NEG
38603: PUSH
38604: EMPTY
38605: LIST
38606: LIST
38607: PUSH
38608: LD_INT 1
38610: PUSH
38611: LD_INT 1
38613: NEG
38614: PUSH
38615: EMPTY
38616: LIST
38617: LIST
38618: PUSH
38619: LD_INT 2
38621: PUSH
38622: LD_INT 0
38624: PUSH
38625: EMPTY
38626: LIST
38627: LIST
38628: PUSH
38629: LD_INT 2
38631: PUSH
38632: LD_INT 1
38634: PUSH
38635: EMPTY
38636: LIST
38637: LIST
38638: PUSH
38639: LD_INT 2
38641: PUSH
38642: LD_INT 2
38644: PUSH
38645: EMPTY
38646: LIST
38647: LIST
38648: PUSH
38649: LD_INT 1
38651: PUSH
38652: LD_INT 2
38654: PUSH
38655: EMPTY
38656: LIST
38657: LIST
38658: PUSH
38659: LD_INT 0
38661: PUSH
38662: LD_INT 2
38664: PUSH
38665: EMPTY
38666: LIST
38667: LIST
38668: PUSH
38669: LD_INT 1
38671: NEG
38672: PUSH
38673: LD_INT 1
38675: PUSH
38676: EMPTY
38677: LIST
38678: LIST
38679: PUSH
38680: LD_INT 2
38682: NEG
38683: PUSH
38684: LD_INT 0
38686: PUSH
38687: EMPTY
38688: LIST
38689: LIST
38690: PUSH
38691: LD_INT 2
38693: NEG
38694: PUSH
38695: LD_INT 1
38697: NEG
38698: PUSH
38699: EMPTY
38700: LIST
38701: LIST
38702: PUSH
38703: LD_INT 2
38705: NEG
38706: PUSH
38707: LD_INT 2
38709: NEG
38710: PUSH
38711: EMPTY
38712: LIST
38713: LIST
38714: PUSH
38715: LD_INT 2
38717: PUSH
38718: LD_INT 3
38720: PUSH
38721: EMPTY
38722: LIST
38723: LIST
38724: PUSH
38725: LD_INT 1
38727: PUSH
38728: LD_INT 3
38730: PUSH
38731: EMPTY
38732: LIST
38733: LIST
38734: PUSH
38735: LD_INT 1
38737: NEG
38738: PUSH
38739: LD_INT 2
38741: PUSH
38742: EMPTY
38743: LIST
38744: LIST
38745: PUSH
38746: LD_INT 2
38748: NEG
38749: PUSH
38750: LD_INT 1
38752: PUSH
38753: EMPTY
38754: LIST
38755: LIST
38756: PUSH
38757: EMPTY
38758: LIST
38759: LIST
38760: LIST
38761: LIST
38762: LIST
38763: LIST
38764: LIST
38765: LIST
38766: LIST
38767: LIST
38768: LIST
38769: LIST
38770: LIST
38771: LIST
38772: LIST
38773: LIST
38774: LIST
38775: LIST
38776: LIST
38777: LIST
38778: LIST
38779: LIST
38780: LIST
38781: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38782: LD_ADDR_VAR 0 27
38786: PUSH
38787: LD_INT 0
38789: PUSH
38790: LD_INT 0
38792: PUSH
38793: EMPTY
38794: LIST
38795: LIST
38796: PUSH
38797: LD_INT 0
38799: PUSH
38800: LD_INT 1
38802: NEG
38803: PUSH
38804: EMPTY
38805: LIST
38806: LIST
38807: PUSH
38808: LD_INT 1
38810: PUSH
38811: LD_INT 0
38813: PUSH
38814: EMPTY
38815: LIST
38816: LIST
38817: PUSH
38818: LD_INT 1
38820: PUSH
38821: LD_INT 1
38823: PUSH
38824: EMPTY
38825: LIST
38826: LIST
38827: PUSH
38828: LD_INT 0
38830: PUSH
38831: LD_INT 1
38833: PUSH
38834: EMPTY
38835: LIST
38836: LIST
38837: PUSH
38838: LD_INT 1
38840: NEG
38841: PUSH
38842: LD_INT 0
38844: PUSH
38845: EMPTY
38846: LIST
38847: LIST
38848: PUSH
38849: LD_INT 1
38851: NEG
38852: PUSH
38853: LD_INT 1
38855: NEG
38856: PUSH
38857: EMPTY
38858: LIST
38859: LIST
38860: PUSH
38861: LD_INT 1
38863: NEG
38864: PUSH
38865: LD_INT 2
38867: NEG
38868: PUSH
38869: EMPTY
38870: LIST
38871: LIST
38872: PUSH
38873: LD_INT 0
38875: PUSH
38876: LD_INT 2
38878: NEG
38879: PUSH
38880: EMPTY
38881: LIST
38882: LIST
38883: PUSH
38884: LD_INT 1
38886: PUSH
38887: LD_INT 1
38889: NEG
38890: PUSH
38891: EMPTY
38892: LIST
38893: LIST
38894: PUSH
38895: LD_INT 2
38897: PUSH
38898: LD_INT 0
38900: PUSH
38901: EMPTY
38902: LIST
38903: LIST
38904: PUSH
38905: LD_INT 2
38907: PUSH
38908: LD_INT 1
38910: PUSH
38911: EMPTY
38912: LIST
38913: LIST
38914: PUSH
38915: LD_INT 2
38917: PUSH
38918: LD_INT 2
38920: PUSH
38921: EMPTY
38922: LIST
38923: LIST
38924: PUSH
38925: LD_INT 1
38927: PUSH
38928: LD_INT 2
38930: PUSH
38931: EMPTY
38932: LIST
38933: LIST
38934: PUSH
38935: LD_INT 0
38937: PUSH
38938: LD_INT 2
38940: PUSH
38941: EMPTY
38942: LIST
38943: LIST
38944: PUSH
38945: LD_INT 1
38947: NEG
38948: PUSH
38949: LD_INT 1
38951: PUSH
38952: EMPTY
38953: LIST
38954: LIST
38955: PUSH
38956: LD_INT 2
38958: NEG
38959: PUSH
38960: LD_INT 0
38962: PUSH
38963: EMPTY
38964: LIST
38965: LIST
38966: PUSH
38967: LD_INT 2
38969: NEG
38970: PUSH
38971: LD_INT 1
38973: NEG
38974: PUSH
38975: EMPTY
38976: LIST
38977: LIST
38978: PUSH
38979: LD_INT 2
38981: NEG
38982: PUSH
38983: LD_INT 2
38985: NEG
38986: PUSH
38987: EMPTY
38988: LIST
38989: LIST
38990: PUSH
38991: LD_INT 1
38993: NEG
38994: PUSH
38995: LD_INT 2
38997: PUSH
38998: EMPTY
38999: LIST
39000: LIST
39001: PUSH
39002: LD_INT 2
39004: NEG
39005: PUSH
39006: LD_INT 1
39008: PUSH
39009: EMPTY
39010: LIST
39011: LIST
39012: PUSH
39013: LD_INT 3
39015: NEG
39016: PUSH
39017: LD_INT 1
39019: NEG
39020: PUSH
39021: EMPTY
39022: LIST
39023: LIST
39024: PUSH
39025: LD_INT 3
39027: NEG
39028: PUSH
39029: LD_INT 2
39031: NEG
39032: PUSH
39033: EMPTY
39034: LIST
39035: LIST
39036: PUSH
39037: EMPTY
39038: LIST
39039: LIST
39040: LIST
39041: LIST
39042: LIST
39043: LIST
39044: LIST
39045: LIST
39046: LIST
39047: LIST
39048: LIST
39049: LIST
39050: LIST
39051: LIST
39052: LIST
39053: LIST
39054: LIST
39055: LIST
39056: LIST
39057: LIST
39058: LIST
39059: LIST
39060: LIST
39061: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39062: LD_ADDR_VAR 0 28
39066: PUSH
39067: LD_INT 0
39069: PUSH
39070: LD_INT 0
39072: PUSH
39073: EMPTY
39074: LIST
39075: LIST
39076: PUSH
39077: LD_INT 0
39079: PUSH
39080: LD_INT 1
39082: NEG
39083: PUSH
39084: EMPTY
39085: LIST
39086: LIST
39087: PUSH
39088: LD_INT 1
39090: PUSH
39091: LD_INT 0
39093: PUSH
39094: EMPTY
39095: LIST
39096: LIST
39097: PUSH
39098: LD_INT 1
39100: PUSH
39101: LD_INT 1
39103: PUSH
39104: EMPTY
39105: LIST
39106: LIST
39107: PUSH
39108: LD_INT 0
39110: PUSH
39111: LD_INT 1
39113: PUSH
39114: EMPTY
39115: LIST
39116: LIST
39117: PUSH
39118: LD_INT 1
39120: NEG
39121: PUSH
39122: LD_INT 0
39124: PUSH
39125: EMPTY
39126: LIST
39127: LIST
39128: PUSH
39129: LD_INT 1
39131: NEG
39132: PUSH
39133: LD_INT 1
39135: NEG
39136: PUSH
39137: EMPTY
39138: LIST
39139: LIST
39140: PUSH
39141: LD_INT 1
39143: NEG
39144: PUSH
39145: LD_INT 2
39147: NEG
39148: PUSH
39149: EMPTY
39150: LIST
39151: LIST
39152: PUSH
39153: LD_INT 0
39155: PUSH
39156: LD_INT 2
39158: NEG
39159: PUSH
39160: EMPTY
39161: LIST
39162: LIST
39163: PUSH
39164: LD_INT 1
39166: PUSH
39167: LD_INT 1
39169: NEG
39170: PUSH
39171: EMPTY
39172: LIST
39173: LIST
39174: PUSH
39175: LD_INT 2
39177: PUSH
39178: LD_INT 0
39180: PUSH
39181: EMPTY
39182: LIST
39183: LIST
39184: PUSH
39185: LD_INT 2
39187: PUSH
39188: LD_INT 1
39190: PUSH
39191: EMPTY
39192: LIST
39193: LIST
39194: PUSH
39195: LD_INT 2
39197: PUSH
39198: LD_INT 2
39200: PUSH
39201: EMPTY
39202: LIST
39203: LIST
39204: PUSH
39205: LD_INT 1
39207: PUSH
39208: LD_INT 2
39210: PUSH
39211: EMPTY
39212: LIST
39213: LIST
39214: PUSH
39215: LD_INT 0
39217: PUSH
39218: LD_INT 2
39220: PUSH
39221: EMPTY
39222: LIST
39223: LIST
39224: PUSH
39225: LD_INT 1
39227: NEG
39228: PUSH
39229: LD_INT 1
39231: PUSH
39232: EMPTY
39233: LIST
39234: LIST
39235: PUSH
39236: LD_INT 2
39238: NEG
39239: PUSH
39240: LD_INT 0
39242: PUSH
39243: EMPTY
39244: LIST
39245: LIST
39246: PUSH
39247: LD_INT 2
39249: NEG
39250: PUSH
39251: LD_INT 1
39253: NEG
39254: PUSH
39255: EMPTY
39256: LIST
39257: LIST
39258: PUSH
39259: LD_INT 2
39261: NEG
39262: PUSH
39263: LD_INT 2
39265: NEG
39266: PUSH
39267: EMPTY
39268: LIST
39269: LIST
39270: PUSH
39271: LD_INT 2
39273: NEG
39274: PUSH
39275: LD_INT 3
39277: NEG
39278: PUSH
39279: EMPTY
39280: LIST
39281: LIST
39282: PUSH
39283: LD_INT 1
39285: NEG
39286: PUSH
39287: LD_INT 3
39289: NEG
39290: PUSH
39291: EMPTY
39292: LIST
39293: LIST
39294: PUSH
39295: LD_INT 3
39297: NEG
39298: PUSH
39299: LD_INT 1
39301: NEG
39302: PUSH
39303: EMPTY
39304: LIST
39305: LIST
39306: PUSH
39307: LD_INT 3
39309: NEG
39310: PUSH
39311: LD_INT 2
39313: NEG
39314: PUSH
39315: EMPTY
39316: LIST
39317: LIST
39318: PUSH
39319: EMPTY
39320: LIST
39321: LIST
39322: LIST
39323: LIST
39324: LIST
39325: LIST
39326: LIST
39327: LIST
39328: LIST
39329: LIST
39330: LIST
39331: LIST
39332: LIST
39333: LIST
39334: LIST
39335: LIST
39336: LIST
39337: LIST
39338: LIST
39339: LIST
39340: LIST
39341: LIST
39342: LIST
39343: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39344: LD_ADDR_VAR 0 29
39348: PUSH
39349: LD_INT 0
39351: PUSH
39352: LD_INT 0
39354: PUSH
39355: EMPTY
39356: LIST
39357: LIST
39358: PUSH
39359: LD_INT 0
39361: PUSH
39362: LD_INT 1
39364: NEG
39365: PUSH
39366: EMPTY
39367: LIST
39368: LIST
39369: PUSH
39370: LD_INT 1
39372: PUSH
39373: LD_INT 0
39375: PUSH
39376: EMPTY
39377: LIST
39378: LIST
39379: PUSH
39380: LD_INT 1
39382: PUSH
39383: LD_INT 1
39385: PUSH
39386: EMPTY
39387: LIST
39388: LIST
39389: PUSH
39390: LD_INT 0
39392: PUSH
39393: LD_INT 1
39395: PUSH
39396: EMPTY
39397: LIST
39398: LIST
39399: PUSH
39400: LD_INT 1
39402: NEG
39403: PUSH
39404: LD_INT 0
39406: PUSH
39407: EMPTY
39408: LIST
39409: LIST
39410: PUSH
39411: LD_INT 1
39413: NEG
39414: PUSH
39415: LD_INT 1
39417: NEG
39418: PUSH
39419: EMPTY
39420: LIST
39421: LIST
39422: PUSH
39423: LD_INT 1
39425: NEG
39426: PUSH
39427: LD_INT 2
39429: NEG
39430: PUSH
39431: EMPTY
39432: LIST
39433: LIST
39434: PUSH
39435: LD_INT 0
39437: PUSH
39438: LD_INT 2
39440: NEG
39441: PUSH
39442: EMPTY
39443: LIST
39444: LIST
39445: PUSH
39446: LD_INT 1
39448: PUSH
39449: LD_INT 1
39451: NEG
39452: PUSH
39453: EMPTY
39454: LIST
39455: LIST
39456: PUSH
39457: LD_INT 2
39459: PUSH
39460: LD_INT 0
39462: PUSH
39463: EMPTY
39464: LIST
39465: LIST
39466: PUSH
39467: LD_INT 2
39469: PUSH
39470: LD_INT 1
39472: PUSH
39473: EMPTY
39474: LIST
39475: LIST
39476: PUSH
39477: LD_INT 1
39479: PUSH
39480: LD_INT 2
39482: PUSH
39483: EMPTY
39484: LIST
39485: LIST
39486: PUSH
39487: LD_INT 0
39489: PUSH
39490: LD_INT 2
39492: PUSH
39493: EMPTY
39494: LIST
39495: LIST
39496: PUSH
39497: LD_INT 1
39499: NEG
39500: PUSH
39501: LD_INT 1
39503: PUSH
39504: EMPTY
39505: LIST
39506: LIST
39507: PUSH
39508: LD_INT 2
39510: NEG
39511: PUSH
39512: LD_INT 1
39514: NEG
39515: PUSH
39516: EMPTY
39517: LIST
39518: LIST
39519: PUSH
39520: LD_INT 2
39522: NEG
39523: PUSH
39524: LD_INT 2
39526: NEG
39527: PUSH
39528: EMPTY
39529: LIST
39530: LIST
39531: PUSH
39532: LD_INT 2
39534: NEG
39535: PUSH
39536: LD_INT 3
39538: NEG
39539: PUSH
39540: EMPTY
39541: LIST
39542: LIST
39543: PUSH
39544: LD_INT 2
39546: PUSH
39547: LD_INT 1
39549: NEG
39550: PUSH
39551: EMPTY
39552: LIST
39553: LIST
39554: PUSH
39555: LD_INT 3
39557: PUSH
39558: LD_INT 1
39560: PUSH
39561: EMPTY
39562: LIST
39563: LIST
39564: PUSH
39565: LD_INT 1
39567: PUSH
39568: LD_INT 3
39570: PUSH
39571: EMPTY
39572: LIST
39573: LIST
39574: PUSH
39575: LD_INT 1
39577: NEG
39578: PUSH
39579: LD_INT 2
39581: PUSH
39582: EMPTY
39583: LIST
39584: LIST
39585: PUSH
39586: LD_INT 3
39588: NEG
39589: PUSH
39590: LD_INT 2
39592: NEG
39593: PUSH
39594: EMPTY
39595: LIST
39596: LIST
39597: PUSH
39598: EMPTY
39599: LIST
39600: LIST
39601: LIST
39602: LIST
39603: LIST
39604: LIST
39605: LIST
39606: LIST
39607: LIST
39608: LIST
39609: LIST
39610: LIST
39611: LIST
39612: LIST
39613: LIST
39614: LIST
39615: LIST
39616: LIST
39617: LIST
39618: LIST
39619: LIST
39620: LIST
39621: LIST
39622: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39623: LD_ADDR_VAR 0 30
39627: PUSH
39628: LD_INT 0
39630: PUSH
39631: LD_INT 0
39633: PUSH
39634: EMPTY
39635: LIST
39636: LIST
39637: PUSH
39638: LD_INT 0
39640: PUSH
39641: LD_INT 1
39643: NEG
39644: PUSH
39645: EMPTY
39646: LIST
39647: LIST
39648: PUSH
39649: LD_INT 1
39651: PUSH
39652: LD_INT 0
39654: PUSH
39655: EMPTY
39656: LIST
39657: LIST
39658: PUSH
39659: LD_INT 1
39661: PUSH
39662: LD_INT 1
39664: PUSH
39665: EMPTY
39666: LIST
39667: LIST
39668: PUSH
39669: LD_INT 0
39671: PUSH
39672: LD_INT 1
39674: PUSH
39675: EMPTY
39676: LIST
39677: LIST
39678: PUSH
39679: LD_INT 1
39681: NEG
39682: PUSH
39683: LD_INT 0
39685: PUSH
39686: EMPTY
39687: LIST
39688: LIST
39689: PUSH
39690: LD_INT 1
39692: NEG
39693: PUSH
39694: LD_INT 1
39696: NEG
39697: PUSH
39698: EMPTY
39699: LIST
39700: LIST
39701: PUSH
39702: LD_INT 1
39704: NEG
39705: PUSH
39706: LD_INT 2
39708: NEG
39709: PUSH
39710: EMPTY
39711: LIST
39712: LIST
39713: PUSH
39714: LD_INT 0
39716: PUSH
39717: LD_INT 2
39719: NEG
39720: PUSH
39721: EMPTY
39722: LIST
39723: LIST
39724: PUSH
39725: LD_INT 1
39727: PUSH
39728: LD_INT 1
39730: NEG
39731: PUSH
39732: EMPTY
39733: LIST
39734: LIST
39735: PUSH
39736: LD_INT 2
39738: PUSH
39739: LD_INT 0
39741: PUSH
39742: EMPTY
39743: LIST
39744: LIST
39745: PUSH
39746: LD_INT 2
39748: PUSH
39749: LD_INT 1
39751: PUSH
39752: EMPTY
39753: LIST
39754: LIST
39755: PUSH
39756: LD_INT 2
39758: PUSH
39759: LD_INT 2
39761: PUSH
39762: EMPTY
39763: LIST
39764: LIST
39765: PUSH
39766: LD_INT 1
39768: PUSH
39769: LD_INT 2
39771: PUSH
39772: EMPTY
39773: LIST
39774: LIST
39775: PUSH
39776: LD_INT 1
39778: NEG
39779: PUSH
39780: LD_INT 1
39782: PUSH
39783: EMPTY
39784: LIST
39785: LIST
39786: PUSH
39787: LD_INT 2
39789: NEG
39790: PUSH
39791: LD_INT 0
39793: PUSH
39794: EMPTY
39795: LIST
39796: LIST
39797: PUSH
39798: LD_INT 2
39800: NEG
39801: PUSH
39802: LD_INT 1
39804: NEG
39805: PUSH
39806: EMPTY
39807: LIST
39808: LIST
39809: PUSH
39810: LD_INT 1
39812: NEG
39813: PUSH
39814: LD_INT 3
39816: NEG
39817: PUSH
39818: EMPTY
39819: LIST
39820: LIST
39821: PUSH
39822: LD_INT 1
39824: PUSH
39825: LD_INT 2
39827: NEG
39828: PUSH
39829: EMPTY
39830: LIST
39831: LIST
39832: PUSH
39833: LD_INT 3
39835: PUSH
39836: LD_INT 2
39838: PUSH
39839: EMPTY
39840: LIST
39841: LIST
39842: PUSH
39843: LD_INT 2
39845: PUSH
39846: LD_INT 3
39848: PUSH
39849: EMPTY
39850: LIST
39851: LIST
39852: PUSH
39853: LD_INT 2
39855: NEG
39856: PUSH
39857: LD_INT 1
39859: PUSH
39860: EMPTY
39861: LIST
39862: LIST
39863: PUSH
39864: LD_INT 3
39866: NEG
39867: PUSH
39868: LD_INT 1
39870: NEG
39871: PUSH
39872: EMPTY
39873: LIST
39874: LIST
39875: PUSH
39876: EMPTY
39877: LIST
39878: LIST
39879: LIST
39880: LIST
39881: LIST
39882: LIST
39883: LIST
39884: LIST
39885: LIST
39886: LIST
39887: LIST
39888: LIST
39889: LIST
39890: LIST
39891: LIST
39892: LIST
39893: LIST
39894: LIST
39895: LIST
39896: LIST
39897: LIST
39898: LIST
39899: LIST
39900: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39901: LD_ADDR_VAR 0 31
39905: PUSH
39906: LD_INT 0
39908: PUSH
39909: LD_INT 0
39911: PUSH
39912: EMPTY
39913: LIST
39914: LIST
39915: PUSH
39916: LD_INT 0
39918: PUSH
39919: LD_INT 1
39921: NEG
39922: PUSH
39923: EMPTY
39924: LIST
39925: LIST
39926: PUSH
39927: LD_INT 1
39929: PUSH
39930: LD_INT 0
39932: PUSH
39933: EMPTY
39934: LIST
39935: LIST
39936: PUSH
39937: LD_INT 1
39939: PUSH
39940: LD_INT 1
39942: PUSH
39943: EMPTY
39944: LIST
39945: LIST
39946: PUSH
39947: LD_INT 0
39949: PUSH
39950: LD_INT 1
39952: PUSH
39953: EMPTY
39954: LIST
39955: LIST
39956: PUSH
39957: LD_INT 1
39959: NEG
39960: PUSH
39961: LD_INT 0
39963: PUSH
39964: EMPTY
39965: LIST
39966: LIST
39967: PUSH
39968: LD_INT 1
39970: NEG
39971: PUSH
39972: LD_INT 1
39974: NEG
39975: PUSH
39976: EMPTY
39977: LIST
39978: LIST
39979: PUSH
39980: LD_INT 1
39982: NEG
39983: PUSH
39984: LD_INT 2
39986: NEG
39987: PUSH
39988: EMPTY
39989: LIST
39990: LIST
39991: PUSH
39992: LD_INT 1
39994: PUSH
39995: LD_INT 1
39997: NEG
39998: PUSH
39999: EMPTY
40000: LIST
40001: LIST
40002: PUSH
40003: LD_INT 2
40005: PUSH
40006: LD_INT 0
40008: PUSH
40009: EMPTY
40010: LIST
40011: LIST
40012: PUSH
40013: LD_INT 2
40015: PUSH
40016: LD_INT 1
40018: PUSH
40019: EMPTY
40020: LIST
40021: LIST
40022: PUSH
40023: LD_INT 2
40025: PUSH
40026: LD_INT 2
40028: PUSH
40029: EMPTY
40030: LIST
40031: LIST
40032: PUSH
40033: LD_INT 1
40035: PUSH
40036: LD_INT 2
40038: PUSH
40039: EMPTY
40040: LIST
40041: LIST
40042: PUSH
40043: LD_INT 0
40045: PUSH
40046: LD_INT 2
40048: PUSH
40049: EMPTY
40050: LIST
40051: LIST
40052: PUSH
40053: LD_INT 1
40055: NEG
40056: PUSH
40057: LD_INT 1
40059: PUSH
40060: EMPTY
40061: LIST
40062: LIST
40063: PUSH
40064: LD_INT 2
40066: NEG
40067: PUSH
40068: LD_INT 1
40070: NEG
40071: PUSH
40072: EMPTY
40073: LIST
40074: LIST
40075: PUSH
40076: LD_INT 2
40078: NEG
40079: PUSH
40080: LD_INT 2
40082: NEG
40083: PUSH
40084: EMPTY
40085: LIST
40086: LIST
40087: PUSH
40088: LD_INT 2
40090: NEG
40091: PUSH
40092: LD_INT 3
40094: NEG
40095: PUSH
40096: EMPTY
40097: LIST
40098: LIST
40099: PUSH
40100: LD_INT 2
40102: PUSH
40103: LD_INT 1
40105: NEG
40106: PUSH
40107: EMPTY
40108: LIST
40109: LIST
40110: PUSH
40111: LD_INT 3
40113: PUSH
40114: LD_INT 1
40116: PUSH
40117: EMPTY
40118: LIST
40119: LIST
40120: PUSH
40121: LD_INT 1
40123: PUSH
40124: LD_INT 3
40126: PUSH
40127: EMPTY
40128: LIST
40129: LIST
40130: PUSH
40131: LD_INT 1
40133: NEG
40134: PUSH
40135: LD_INT 2
40137: PUSH
40138: EMPTY
40139: LIST
40140: LIST
40141: PUSH
40142: LD_INT 3
40144: NEG
40145: PUSH
40146: LD_INT 2
40148: NEG
40149: PUSH
40150: EMPTY
40151: LIST
40152: LIST
40153: PUSH
40154: EMPTY
40155: LIST
40156: LIST
40157: LIST
40158: LIST
40159: LIST
40160: LIST
40161: LIST
40162: LIST
40163: LIST
40164: LIST
40165: LIST
40166: LIST
40167: LIST
40168: LIST
40169: LIST
40170: LIST
40171: LIST
40172: LIST
40173: LIST
40174: LIST
40175: LIST
40176: LIST
40177: LIST
40178: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40179: LD_ADDR_VAR 0 32
40183: PUSH
40184: LD_INT 0
40186: PUSH
40187: LD_INT 0
40189: PUSH
40190: EMPTY
40191: LIST
40192: LIST
40193: PUSH
40194: LD_INT 0
40196: PUSH
40197: LD_INT 1
40199: NEG
40200: PUSH
40201: EMPTY
40202: LIST
40203: LIST
40204: PUSH
40205: LD_INT 1
40207: PUSH
40208: LD_INT 0
40210: PUSH
40211: EMPTY
40212: LIST
40213: LIST
40214: PUSH
40215: LD_INT 1
40217: PUSH
40218: LD_INT 1
40220: PUSH
40221: EMPTY
40222: LIST
40223: LIST
40224: PUSH
40225: LD_INT 0
40227: PUSH
40228: LD_INT 1
40230: PUSH
40231: EMPTY
40232: LIST
40233: LIST
40234: PUSH
40235: LD_INT 1
40237: NEG
40238: PUSH
40239: LD_INT 0
40241: PUSH
40242: EMPTY
40243: LIST
40244: LIST
40245: PUSH
40246: LD_INT 1
40248: NEG
40249: PUSH
40250: LD_INT 1
40252: NEG
40253: PUSH
40254: EMPTY
40255: LIST
40256: LIST
40257: PUSH
40258: LD_INT 1
40260: NEG
40261: PUSH
40262: LD_INT 2
40264: NEG
40265: PUSH
40266: EMPTY
40267: LIST
40268: LIST
40269: PUSH
40270: LD_INT 0
40272: PUSH
40273: LD_INT 2
40275: NEG
40276: PUSH
40277: EMPTY
40278: LIST
40279: LIST
40280: PUSH
40281: LD_INT 1
40283: PUSH
40284: LD_INT 1
40286: NEG
40287: PUSH
40288: EMPTY
40289: LIST
40290: LIST
40291: PUSH
40292: LD_INT 2
40294: PUSH
40295: LD_INT 1
40297: PUSH
40298: EMPTY
40299: LIST
40300: LIST
40301: PUSH
40302: LD_INT 2
40304: PUSH
40305: LD_INT 2
40307: PUSH
40308: EMPTY
40309: LIST
40310: LIST
40311: PUSH
40312: LD_INT 1
40314: PUSH
40315: LD_INT 2
40317: PUSH
40318: EMPTY
40319: LIST
40320: LIST
40321: PUSH
40322: LD_INT 0
40324: PUSH
40325: LD_INT 2
40327: PUSH
40328: EMPTY
40329: LIST
40330: LIST
40331: PUSH
40332: LD_INT 1
40334: NEG
40335: PUSH
40336: LD_INT 1
40338: PUSH
40339: EMPTY
40340: LIST
40341: LIST
40342: PUSH
40343: LD_INT 2
40345: NEG
40346: PUSH
40347: LD_INT 0
40349: PUSH
40350: EMPTY
40351: LIST
40352: LIST
40353: PUSH
40354: LD_INT 2
40356: NEG
40357: PUSH
40358: LD_INT 1
40360: NEG
40361: PUSH
40362: EMPTY
40363: LIST
40364: LIST
40365: PUSH
40366: LD_INT 1
40368: NEG
40369: PUSH
40370: LD_INT 3
40372: NEG
40373: PUSH
40374: EMPTY
40375: LIST
40376: LIST
40377: PUSH
40378: LD_INT 1
40380: PUSH
40381: LD_INT 2
40383: NEG
40384: PUSH
40385: EMPTY
40386: LIST
40387: LIST
40388: PUSH
40389: LD_INT 3
40391: PUSH
40392: LD_INT 2
40394: PUSH
40395: EMPTY
40396: LIST
40397: LIST
40398: PUSH
40399: LD_INT 2
40401: PUSH
40402: LD_INT 3
40404: PUSH
40405: EMPTY
40406: LIST
40407: LIST
40408: PUSH
40409: LD_INT 2
40411: NEG
40412: PUSH
40413: LD_INT 1
40415: PUSH
40416: EMPTY
40417: LIST
40418: LIST
40419: PUSH
40420: LD_INT 3
40422: NEG
40423: PUSH
40424: LD_INT 1
40426: NEG
40427: PUSH
40428: EMPTY
40429: LIST
40430: LIST
40431: PUSH
40432: EMPTY
40433: LIST
40434: LIST
40435: LIST
40436: LIST
40437: LIST
40438: LIST
40439: LIST
40440: LIST
40441: LIST
40442: LIST
40443: LIST
40444: LIST
40445: LIST
40446: LIST
40447: LIST
40448: LIST
40449: LIST
40450: LIST
40451: LIST
40452: LIST
40453: LIST
40454: LIST
40455: LIST
40456: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40457: LD_ADDR_VAR 0 33
40461: PUSH
40462: LD_INT 0
40464: PUSH
40465: LD_INT 0
40467: PUSH
40468: EMPTY
40469: LIST
40470: LIST
40471: PUSH
40472: LD_INT 0
40474: PUSH
40475: LD_INT 1
40477: NEG
40478: PUSH
40479: EMPTY
40480: LIST
40481: LIST
40482: PUSH
40483: LD_INT 1
40485: PUSH
40486: LD_INT 0
40488: PUSH
40489: EMPTY
40490: LIST
40491: LIST
40492: PUSH
40493: LD_INT 1
40495: PUSH
40496: LD_INT 1
40498: PUSH
40499: EMPTY
40500: LIST
40501: LIST
40502: PUSH
40503: LD_INT 0
40505: PUSH
40506: LD_INT 1
40508: PUSH
40509: EMPTY
40510: LIST
40511: LIST
40512: PUSH
40513: LD_INT 1
40515: NEG
40516: PUSH
40517: LD_INT 0
40519: PUSH
40520: EMPTY
40521: LIST
40522: LIST
40523: PUSH
40524: LD_INT 1
40526: NEG
40527: PUSH
40528: LD_INT 1
40530: NEG
40531: PUSH
40532: EMPTY
40533: LIST
40534: LIST
40535: PUSH
40536: LD_INT 1
40538: NEG
40539: PUSH
40540: LD_INT 2
40542: NEG
40543: PUSH
40544: EMPTY
40545: LIST
40546: LIST
40547: PUSH
40548: LD_INT 1
40550: PUSH
40551: LD_INT 1
40553: NEG
40554: PUSH
40555: EMPTY
40556: LIST
40557: LIST
40558: PUSH
40559: LD_INT 2
40561: PUSH
40562: LD_INT 0
40564: PUSH
40565: EMPTY
40566: LIST
40567: LIST
40568: PUSH
40569: LD_INT 2
40571: PUSH
40572: LD_INT 1
40574: PUSH
40575: EMPTY
40576: LIST
40577: LIST
40578: PUSH
40579: LD_INT 1
40581: PUSH
40582: LD_INT 2
40584: PUSH
40585: EMPTY
40586: LIST
40587: LIST
40588: PUSH
40589: LD_INT 0
40591: PUSH
40592: LD_INT 2
40594: PUSH
40595: EMPTY
40596: LIST
40597: LIST
40598: PUSH
40599: LD_INT 1
40601: NEG
40602: PUSH
40603: LD_INT 1
40605: PUSH
40606: EMPTY
40607: LIST
40608: LIST
40609: PUSH
40610: LD_INT 2
40612: NEG
40613: PUSH
40614: LD_INT 0
40616: PUSH
40617: EMPTY
40618: LIST
40619: LIST
40620: PUSH
40621: LD_INT 2
40623: NEG
40624: PUSH
40625: LD_INT 1
40627: NEG
40628: PUSH
40629: EMPTY
40630: LIST
40631: LIST
40632: PUSH
40633: LD_INT 2
40635: NEG
40636: PUSH
40637: LD_INT 2
40639: NEG
40640: PUSH
40641: EMPTY
40642: LIST
40643: LIST
40644: PUSH
40645: LD_INT 2
40647: NEG
40648: PUSH
40649: LD_INT 3
40651: NEG
40652: PUSH
40653: EMPTY
40654: LIST
40655: LIST
40656: PUSH
40657: LD_INT 2
40659: PUSH
40660: LD_INT 1
40662: NEG
40663: PUSH
40664: EMPTY
40665: LIST
40666: LIST
40667: PUSH
40668: LD_INT 3
40670: PUSH
40671: LD_INT 1
40673: PUSH
40674: EMPTY
40675: LIST
40676: LIST
40677: PUSH
40678: LD_INT 1
40680: PUSH
40681: LD_INT 3
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: PUSH
40688: LD_INT 1
40690: NEG
40691: PUSH
40692: LD_INT 2
40694: PUSH
40695: EMPTY
40696: LIST
40697: LIST
40698: PUSH
40699: LD_INT 3
40701: NEG
40702: PUSH
40703: LD_INT 2
40705: NEG
40706: PUSH
40707: EMPTY
40708: LIST
40709: LIST
40710: PUSH
40711: EMPTY
40712: LIST
40713: LIST
40714: LIST
40715: LIST
40716: LIST
40717: LIST
40718: LIST
40719: LIST
40720: LIST
40721: LIST
40722: LIST
40723: LIST
40724: LIST
40725: LIST
40726: LIST
40727: LIST
40728: LIST
40729: LIST
40730: LIST
40731: LIST
40732: LIST
40733: LIST
40734: LIST
40735: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40736: LD_ADDR_VAR 0 34
40740: PUSH
40741: LD_INT 0
40743: PUSH
40744: LD_INT 0
40746: PUSH
40747: EMPTY
40748: LIST
40749: LIST
40750: PUSH
40751: LD_INT 0
40753: PUSH
40754: LD_INT 1
40756: NEG
40757: PUSH
40758: EMPTY
40759: LIST
40760: LIST
40761: PUSH
40762: LD_INT 1
40764: PUSH
40765: LD_INT 0
40767: PUSH
40768: EMPTY
40769: LIST
40770: LIST
40771: PUSH
40772: LD_INT 1
40774: PUSH
40775: LD_INT 1
40777: PUSH
40778: EMPTY
40779: LIST
40780: LIST
40781: PUSH
40782: LD_INT 0
40784: PUSH
40785: LD_INT 1
40787: PUSH
40788: EMPTY
40789: LIST
40790: LIST
40791: PUSH
40792: LD_INT 1
40794: NEG
40795: PUSH
40796: LD_INT 0
40798: PUSH
40799: EMPTY
40800: LIST
40801: LIST
40802: PUSH
40803: LD_INT 1
40805: NEG
40806: PUSH
40807: LD_INT 1
40809: NEG
40810: PUSH
40811: EMPTY
40812: LIST
40813: LIST
40814: PUSH
40815: LD_INT 1
40817: NEG
40818: PUSH
40819: LD_INT 2
40821: NEG
40822: PUSH
40823: EMPTY
40824: LIST
40825: LIST
40826: PUSH
40827: LD_INT 0
40829: PUSH
40830: LD_INT 2
40832: NEG
40833: PUSH
40834: EMPTY
40835: LIST
40836: LIST
40837: PUSH
40838: LD_INT 1
40840: PUSH
40841: LD_INT 1
40843: NEG
40844: PUSH
40845: EMPTY
40846: LIST
40847: LIST
40848: PUSH
40849: LD_INT 2
40851: PUSH
40852: LD_INT 1
40854: PUSH
40855: EMPTY
40856: LIST
40857: LIST
40858: PUSH
40859: LD_INT 2
40861: PUSH
40862: LD_INT 2
40864: PUSH
40865: EMPTY
40866: LIST
40867: LIST
40868: PUSH
40869: LD_INT 1
40871: PUSH
40872: LD_INT 2
40874: PUSH
40875: EMPTY
40876: LIST
40877: LIST
40878: PUSH
40879: LD_INT 1
40881: NEG
40882: PUSH
40883: LD_INT 1
40885: PUSH
40886: EMPTY
40887: LIST
40888: LIST
40889: PUSH
40890: LD_INT 2
40892: NEG
40893: PUSH
40894: LD_INT 0
40896: PUSH
40897: EMPTY
40898: LIST
40899: LIST
40900: PUSH
40901: LD_INT 2
40903: NEG
40904: PUSH
40905: LD_INT 1
40907: NEG
40908: PUSH
40909: EMPTY
40910: LIST
40911: LIST
40912: PUSH
40913: LD_INT 2
40915: NEG
40916: PUSH
40917: LD_INT 2
40919: NEG
40920: PUSH
40921: EMPTY
40922: LIST
40923: LIST
40924: PUSH
40925: LD_INT 1
40927: NEG
40928: PUSH
40929: LD_INT 3
40931: NEG
40932: PUSH
40933: EMPTY
40934: LIST
40935: LIST
40936: PUSH
40937: LD_INT 1
40939: PUSH
40940: LD_INT 2
40942: NEG
40943: PUSH
40944: EMPTY
40945: LIST
40946: LIST
40947: PUSH
40948: LD_INT 3
40950: PUSH
40951: LD_INT 2
40953: PUSH
40954: EMPTY
40955: LIST
40956: LIST
40957: PUSH
40958: LD_INT 2
40960: PUSH
40961: LD_INT 3
40963: PUSH
40964: EMPTY
40965: LIST
40966: LIST
40967: PUSH
40968: LD_INT 2
40970: NEG
40971: PUSH
40972: LD_INT 1
40974: PUSH
40975: EMPTY
40976: LIST
40977: LIST
40978: PUSH
40979: LD_INT 3
40981: NEG
40982: PUSH
40983: LD_INT 1
40985: NEG
40986: PUSH
40987: EMPTY
40988: LIST
40989: LIST
40990: PUSH
40991: EMPTY
40992: LIST
40993: LIST
40994: LIST
40995: LIST
40996: LIST
40997: LIST
40998: LIST
40999: LIST
41000: LIST
41001: LIST
41002: LIST
41003: LIST
41004: LIST
41005: LIST
41006: LIST
41007: LIST
41008: LIST
41009: LIST
41010: LIST
41011: LIST
41012: LIST
41013: LIST
41014: LIST
41015: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41016: LD_ADDR_VAR 0 35
41020: PUSH
41021: LD_INT 0
41023: PUSH
41024: LD_INT 0
41026: PUSH
41027: EMPTY
41028: LIST
41029: LIST
41030: PUSH
41031: LD_INT 0
41033: PUSH
41034: LD_INT 1
41036: NEG
41037: PUSH
41038: EMPTY
41039: LIST
41040: LIST
41041: PUSH
41042: LD_INT 1
41044: PUSH
41045: LD_INT 0
41047: PUSH
41048: EMPTY
41049: LIST
41050: LIST
41051: PUSH
41052: LD_INT 1
41054: PUSH
41055: LD_INT 1
41057: PUSH
41058: EMPTY
41059: LIST
41060: LIST
41061: PUSH
41062: LD_INT 0
41064: PUSH
41065: LD_INT 1
41067: PUSH
41068: EMPTY
41069: LIST
41070: LIST
41071: PUSH
41072: LD_INT 1
41074: NEG
41075: PUSH
41076: LD_INT 0
41078: PUSH
41079: EMPTY
41080: LIST
41081: LIST
41082: PUSH
41083: LD_INT 1
41085: NEG
41086: PUSH
41087: LD_INT 1
41089: NEG
41090: PUSH
41091: EMPTY
41092: LIST
41093: LIST
41094: PUSH
41095: LD_INT 2
41097: PUSH
41098: LD_INT 1
41100: PUSH
41101: EMPTY
41102: LIST
41103: LIST
41104: PUSH
41105: LD_INT 2
41107: NEG
41108: PUSH
41109: LD_INT 1
41111: NEG
41112: PUSH
41113: EMPTY
41114: LIST
41115: LIST
41116: PUSH
41117: EMPTY
41118: LIST
41119: LIST
41120: LIST
41121: LIST
41122: LIST
41123: LIST
41124: LIST
41125: LIST
41126: LIST
41127: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41128: LD_ADDR_VAR 0 36
41132: PUSH
41133: LD_INT 0
41135: PUSH
41136: LD_INT 0
41138: PUSH
41139: EMPTY
41140: LIST
41141: LIST
41142: PUSH
41143: LD_INT 0
41145: PUSH
41146: LD_INT 1
41148: NEG
41149: PUSH
41150: EMPTY
41151: LIST
41152: LIST
41153: PUSH
41154: LD_INT 1
41156: PUSH
41157: LD_INT 0
41159: PUSH
41160: EMPTY
41161: LIST
41162: LIST
41163: PUSH
41164: LD_INT 1
41166: PUSH
41167: LD_INT 1
41169: PUSH
41170: EMPTY
41171: LIST
41172: LIST
41173: PUSH
41174: LD_INT 0
41176: PUSH
41177: LD_INT 1
41179: PUSH
41180: EMPTY
41181: LIST
41182: LIST
41183: PUSH
41184: LD_INT 1
41186: NEG
41187: PUSH
41188: LD_INT 0
41190: PUSH
41191: EMPTY
41192: LIST
41193: LIST
41194: PUSH
41195: LD_INT 1
41197: NEG
41198: PUSH
41199: LD_INT 1
41201: NEG
41202: PUSH
41203: EMPTY
41204: LIST
41205: LIST
41206: PUSH
41207: LD_INT 1
41209: NEG
41210: PUSH
41211: LD_INT 2
41213: NEG
41214: PUSH
41215: EMPTY
41216: LIST
41217: LIST
41218: PUSH
41219: LD_INT 1
41221: PUSH
41222: LD_INT 2
41224: PUSH
41225: EMPTY
41226: LIST
41227: LIST
41228: PUSH
41229: EMPTY
41230: LIST
41231: LIST
41232: LIST
41233: LIST
41234: LIST
41235: LIST
41236: LIST
41237: LIST
41238: LIST
41239: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41240: LD_ADDR_VAR 0 37
41244: PUSH
41245: LD_INT 0
41247: PUSH
41248: LD_INT 0
41250: PUSH
41251: EMPTY
41252: LIST
41253: LIST
41254: PUSH
41255: LD_INT 0
41257: PUSH
41258: LD_INT 1
41260: NEG
41261: PUSH
41262: EMPTY
41263: LIST
41264: LIST
41265: PUSH
41266: LD_INT 1
41268: PUSH
41269: LD_INT 0
41271: PUSH
41272: EMPTY
41273: LIST
41274: LIST
41275: PUSH
41276: LD_INT 1
41278: PUSH
41279: LD_INT 1
41281: PUSH
41282: EMPTY
41283: LIST
41284: LIST
41285: PUSH
41286: LD_INT 0
41288: PUSH
41289: LD_INT 1
41291: PUSH
41292: EMPTY
41293: LIST
41294: LIST
41295: PUSH
41296: LD_INT 1
41298: NEG
41299: PUSH
41300: LD_INT 0
41302: PUSH
41303: EMPTY
41304: LIST
41305: LIST
41306: PUSH
41307: LD_INT 1
41309: NEG
41310: PUSH
41311: LD_INT 1
41313: NEG
41314: PUSH
41315: EMPTY
41316: LIST
41317: LIST
41318: PUSH
41319: LD_INT 1
41321: PUSH
41322: LD_INT 1
41324: NEG
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PUSH
41330: LD_INT 1
41332: NEG
41333: PUSH
41334: LD_INT 1
41336: PUSH
41337: EMPTY
41338: LIST
41339: LIST
41340: PUSH
41341: EMPTY
41342: LIST
41343: LIST
41344: LIST
41345: LIST
41346: LIST
41347: LIST
41348: LIST
41349: LIST
41350: LIST
41351: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41352: LD_ADDR_VAR 0 38
41356: PUSH
41357: LD_INT 0
41359: PUSH
41360: LD_INT 0
41362: PUSH
41363: EMPTY
41364: LIST
41365: LIST
41366: PUSH
41367: LD_INT 0
41369: PUSH
41370: LD_INT 1
41372: NEG
41373: PUSH
41374: EMPTY
41375: LIST
41376: LIST
41377: PUSH
41378: LD_INT 1
41380: PUSH
41381: LD_INT 0
41383: PUSH
41384: EMPTY
41385: LIST
41386: LIST
41387: PUSH
41388: LD_INT 1
41390: PUSH
41391: LD_INT 1
41393: PUSH
41394: EMPTY
41395: LIST
41396: LIST
41397: PUSH
41398: LD_INT 0
41400: PUSH
41401: LD_INT 1
41403: PUSH
41404: EMPTY
41405: LIST
41406: LIST
41407: PUSH
41408: LD_INT 1
41410: NEG
41411: PUSH
41412: LD_INT 0
41414: PUSH
41415: EMPTY
41416: LIST
41417: LIST
41418: PUSH
41419: LD_INT 1
41421: NEG
41422: PUSH
41423: LD_INT 1
41425: NEG
41426: PUSH
41427: EMPTY
41428: LIST
41429: LIST
41430: PUSH
41431: LD_INT 2
41433: PUSH
41434: LD_INT 1
41436: PUSH
41437: EMPTY
41438: LIST
41439: LIST
41440: PUSH
41441: LD_INT 2
41443: NEG
41444: PUSH
41445: LD_INT 1
41447: NEG
41448: PUSH
41449: EMPTY
41450: LIST
41451: LIST
41452: PUSH
41453: EMPTY
41454: LIST
41455: LIST
41456: LIST
41457: LIST
41458: LIST
41459: LIST
41460: LIST
41461: LIST
41462: LIST
41463: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41464: LD_ADDR_VAR 0 39
41468: PUSH
41469: LD_INT 0
41471: PUSH
41472: LD_INT 0
41474: PUSH
41475: EMPTY
41476: LIST
41477: LIST
41478: PUSH
41479: LD_INT 0
41481: PUSH
41482: LD_INT 1
41484: NEG
41485: PUSH
41486: EMPTY
41487: LIST
41488: LIST
41489: PUSH
41490: LD_INT 1
41492: PUSH
41493: LD_INT 0
41495: PUSH
41496: EMPTY
41497: LIST
41498: LIST
41499: PUSH
41500: LD_INT 1
41502: PUSH
41503: LD_INT 1
41505: PUSH
41506: EMPTY
41507: LIST
41508: LIST
41509: PUSH
41510: LD_INT 0
41512: PUSH
41513: LD_INT 1
41515: PUSH
41516: EMPTY
41517: LIST
41518: LIST
41519: PUSH
41520: LD_INT 1
41522: NEG
41523: PUSH
41524: LD_INT 0
41526: PUSH
41527: EMPTY
41528: LIST
41529: LIST
41530: PUSH
41531: LD_INT 1
41533: NEG
41534: PUSH
41535: LD_INT 1
41537: NEG
41538: PUSH
41539: EMPTY
41540: LIST
41541: LIST
41542: PUSH
41543: LD_INT 1
41545: NEG
41546: PUSH
41547: LD_INT 2
41549: NEG
41550: PUSH
41551: EMPTY
41552: LIST
41553: LIST
41554: PUSH
41555: LD_INT 1
41557: PUSH
41558: LD_INT 2
41560: PUSH
41561: EMPTY
41562: LIST
41563: LIST
41564: PUSH
41565: EMPTY
41566: LIST
41567: LIST
41568: LIST
41569: LIST
41570: LIST
41571: LIST
41572: LIST
41573: LIST
41574: LIST
41575: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41576: LD_ADDR_VAR 0 40
41580: PUSH
41581: LD_INT 0
41583: PUSH
41584: LD_INT 0
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: PUSH
41591: LD_INT 0
41593: PUSH
41594: LD_INT 1
41596: NEG
41597: PUSH
41598: EMPTY
41599: LIST
41600: LIST
41601: PUSH
41602: LD_INT 1
41604: PUSH
41605: LD_INT 0
41607: PUSH
41608: EMPTY
41609: LIST
41610: LIST
41611: PUSH
41612: LD_INT 1
41614: PUSH
41615: LD_INT 1
41617: PUSH
41618: EMPTY
41619: LIST
41620: LIST
41621: PUSH
41622: LD_INT 0
41624: PUSH
41625: LD_INT 1
41627: PUSH
41628: EMPTY
41629: LIST
41630: LIST
41631: PUSH
41632: LD_INT 1
41634: NEG
41635: PUSH
41636: LD_INT 0
41638: PUSH
41639: EMPTY
41640: LIST
41641: LIST
41642: PUSH
41643: LD_INT 1
41645: NEG
41646: PUSH
41647: LD_INT 1
41649: NEG
41650: PUSH
41651: EMPTY
41652: LIST
41653: LIST
41654: PUSH
41655: LD_INT 1
41657: PUSH
41658: LD_INT 1
41660: NEG
41661: PUSH
41662: EMPTY
41663: LIST
41664: LIST
41665: PUSH
41666: LD_INT 1
41668: NEG
41669: PUSH
41670: LD_INT 1
41672: PUSH
41673: EMPTY
41674: LIST
41675: LIST
41676: PUSH
41677: EMPTY
41678: LIST
41679: LIST
41680: LIST
41681: LIST
41682: LIST
41683: LIST
41684: LIST
41685: LIST
41686: LIST
41687: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41688: LD_ADDR_VAR 0 41
41692: PUSH
41693: LD_INT 0
41695: PUSH
41696: LD_INT 0
41698: PUSH
41699: EMPTY
41700: LIST
41701: LIST
41702: PUSH
41703: LD_INT 0
41705: PUSH
41706: LD_INT 1
41708: NEG
41709: PUSH
41710: EMPTY
41711: LIST
41712: LIST
41713: PUSH
41714: LD_INT 1
41716: PUSH
41717: LD_INT 0
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PUSH
41724: LD_INT 1
41726: PUSH
41727: LD_INT 1
41729: PUSH
41730: EMPTY
41731: LIST
41732: LIST
41733: PUSH
41734: LD_INT 0
41736: PUSH
41737: LD_INT 1
41739: PUSH
41740: EMPTY
41741: LIST
41742: LIST
41743: PUSH
41744: LD_INT 1
41746: NEG
41747: PUSH
41748: LD_INT 0
41750: PUSH
41751: EMPTY
41752: LIST
41753: LIST
41754: PUSH
41755: LD_INT 1
41757: NEG
41758: PUSH
41759: LD_INT 1
41761: NEG
41762: PUSH
41763: EMPTY
41764: LIST
41765: LIST
41766: PUSH
41767: LD_INT 1
41769: NEG
41770: PUSH
41771: LD_INT 2
41773: NEG
41774: PUSH
41775: EMPTY
41776: LIST
41777: LIST
41778: PUSH
41779: LD_INT 1
41781: PUSH
41782: LD_INT 1
41784: NEG
41785: PUSH
41786: EMPTY
41787: LIST
41788: LIST
41789: PUSH
41790: LD_INT 2
41792: PUSH
41793: LD_INT 0
41795: PUSH
41796: EMPTY
41797: LIST
41798: LIST
41799: PUSH
41800: LD_INT 2
41802: PUSH
41803: LD_INT 1
41805: PUSH
41806: EMPTY
41807: LIST
41808: LIST
41809: PUSH
41810: LD_INT 2
41812: PUSH
41813: LD_INT 2
41815: PUSH
41816: EMPTY
41817: LIST
41818: LIST
41819: PUSH
41820: LD_INT 1
41822: PUSH
41823: LD_INT 2
41825: PUSH
41826: EMPTY
41827: LIST
41828: LIST
41829: PUSH
41830: LD_INT 1
41832: NEG
41833: PUSH
41834: LD_INT 1
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: PUSH
41841: LD_INT 2
41843: NEG
41844: PUSH
41845: LD_INT 0
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: PUSH
41852: LD_INT 2
41854: NEG
41855: PUSH
41856: LD_INT 1
41858: NEG
41859: PUSH
41860: EMPTY
41861: LIST
41862: LIST
41863: PUSH
41864: LD_INT 2
41866: NEG
41867: PUSH
41868: LD_INT 2
41870: NEG
41871: PUSH
41872: EMPTY
41873: LIST
41874: LIST
41875: PUSH
41876: LD_INT 2
41878: NEG
41879: PUSH
41880: LD_INT 3
41882: NEG
41883: PUSH
41884: EMPTY
41885: LIST
41886: LIST
41887: PUSH
41888: LD_INT 2
41890: PUSH
41891: LD_INT 1
41893: NEG
41894: PUSH
41895: EMPTY
41896: LIST
41897: LIST
41898: PUSH
41899: LD_INT 3
41901: PUSH
41902: LD_INT 0
41904: PUSH
41905: EMPTY
41906: LIST
41907: LIST
41908: PUSH
41909: LD_INT 3
41911: PUSH
41912: LD_INT 1
41914: PUSH
41915: EMPTY
41916: LIST
41917: LIST
41918: PUSH
41919: LD_INT 3
41921: PUSH
41922: LD_INT 2
41924: PUSH
41925: EMPTY
41926: LIST
41927: LIST
41928: PUSH
41929: LD_INT 3
41931: PUSH
41932: LD_INT 3
41934: PUSH
41935: EMPTY
41936: LIST
41937: LIST
41938: PUSH
41939: LD_INT 2
41941: PUSH
41942: LD_INT 3
41944: PUSH
41945: EMPTY
41946: LIST
41947: LIST
41948: PUSH
41949: LD_INT 2
41951: NEG
41952: PUSH
41953: LD_INT 1
41955: PUSH
41956: EMPTY
41957: LIST
41958: LIST
41959: PUSH
41960: LD_INT 3
41962: NEG
41963: PUSH
41964: LD_INT 0
41966: PUSH
41967: EMPTY
41968: LIST
41969: LIST
41970: PUSH
41971: LD_INT 3
41973: NEG
41974: PUSH
41975: LD_INT 1
41977: NEG
41978: PUSH
41979: EMPTY
41980: LIST
41981: LIST
41982: PUSH
41983: LD_INT 3
41985: NEG
41986: PUSH
41987: LD_INT 2
41989: NEG
41990: PUSH
41991: EMPTY
41992: LIST
41993: LIST
41994: PUSH
41995: LD_INT 3
41997: NEG
41998: PUSH
41999: LD_INT 3
42001: NEG
42002: PUSH
42003: EMPTY
42004: LIST
42005: LIST
42006: PUSH
42007: EMPTY
42008: LIST
42009: LIST
42010: LIST
42011: LIST
42012: LIST
42013: LIST
42014: LIST
42015: LIST
42016: LIST
42017: LIST
42018: LIST
42019: LIST
42020: LIST
42021: LIST
42022: LIST
42023: LIST
42024: LIST
42025: LIST
42026: LIST
42027: LIST
42028: LIST
42029: LIST
42030: LIST
42031: LIST
42032: LIST
42033: LIST
42034: LIST
42035: LIST
42036: LIST
42037: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42038: LD_ADDR_VAR 0 42
42042: PUSH
42043: LD_INT 0
42045: PUSH
42046: LD_INT 0
42048: PUSH
42049: EMPTY
42050: LIST
42051: LIST
42052: PUSH
42053: LD_INT 0
42055: PUSH
42056: LD_INT 1
42058: NEG
42059: PUSH
42060: EMPTY
42061: LIST
42062: LIST
42063: PUSH
42064: LD_INT 1
42066: PUSH
42067: LD_INT 0
42069: PUSH
42070: EMPTY
42071: LIST
42072: LIST
42073: PUSH
42074: LD_INT 1
42076: PUSH
42077: LD_INT 1
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: PUSH
42084: LD_INT 0
42086: PUSH
42087: LD_INT 1
42089: PUSH
42090: EMPTY
42091: LIST
42092: LIST
42093: PUSH
42094: LD_INT 1
42096: NEG
42097: PUSH
42098: LD_INT 0
42100: PUSH
42101: EMPTY
42102: LIST
42103: LIST
42104: PUSH
42105: LD_INT 1
42107: NEG
42108: PUSH
42109: LD_INT 1
42111: NEG
42112: PUSH
42113: EMPTY
42114: LIST
42115: LIST
42116: PUSH
42117: LD_INT 1
42119: NEG
42120: PUSH
42121: LD_INT 2
42123: NEG
42124: PUSH
42125: EMPTY
42126: LIST
42127: LIST
42128: PUSH
42129: LD_INT 0
42131: PUSH
42132: LD_INT 2
42134: NEG
42135: PUSH
42136: EMPTY
42137: LIST
42138: LIST
42139: PUSH
42140: LD_INT 1
42142: PUSH
42143: LD_INT 1
42145: NEG
42146: PUSH
42147: EMPTY
42148: LIST
42149: LIST
42150: PUSH
42151: LD_INT 2
42153: PUSH
42154: LD_INT 1
42156: PUSH
42157: EMPTY
42158: LIST
42159: LIST
42160: PUSH
42161: LD_INT 2
42163: PUSH
42164: LD_INT 2
42166: PUSH
42167: EMPTY
42168: LIST
42169: LIST
42170: PUSH
42171: LD_INT 1
42173: PUSH
42174: LD_INT 2
42176: PUSH
42177: EMPTY
42178: LIST
42179: LIST
42180: PUSH
42181: LD_INT 0
42183: PUSH
42184: LD_INT 2
42186: PUSH
42187: EMPTY
42188: LIST
42189: LIST
42190: PUSH
42191: LD_INT 1
42193: NEG
42194: PUSH
42195: LD_INT 1
42197: PUSH
42198: EMPTY
42199: LIST
42200: LIST
42201: PUSH
42202: LD_INT 2
42204: NEG
42205: PUSH
42206: LD_INT 1
42208: NEG
42209: PUSH
42210: EMPTY
42211: LIST
42212: LIST
42213: PUSH
42214: LD_INT 2
42216: NEG
42217: PUSH
42218: LD_INT 2
42220: NEG
42221: PUSH
42222: EMPTY
42223: LIST
42224: LIST
42225: PUSH
42226: LD_INT 2
42228: NEG
42229: PUSH
42230: LD_INT 3
42232: NEG
42233: PUSH
42234: EMPTY
42235: LIST
42236: LIST
42237: PUSH
42238: LD_INT 1
42240: NEG
42241: PUSH
42242: LD_INT 3
42244: NEG
42245: PUSH
42246: EMPTY
42247: LIST
42248: LIST
42249: PUSH
42250: LD_INT 0
42252: PUSH
42253: LD_INT 3
42255: NEG
42256: PUSH
42257: EMPTY
42258: LIST
42259: LIST
42260: PUSH
42261: LD_INT 1
42263: PUSH
42264: LD_INT 2
42266: NEG
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: PUSH
42272: LD_INT 3
42274: PUSH
42275: LD_INT 2
42277: PUSH
42278: EMPTY
42279: LIST
42280: LIST
42281: PUSH
42282: LD_INT 3
42284: PUSH
42285: LD_INT 3
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: PUSH
42292: LD_INT 2
42294: PUSH
42295: LD_INT 3
42297: PUSH
42298: EMPTY
42299: LIST
42300: LIST
42301: PUSH
42302: LD_INT 1
42304: PUSH
42305: LD_INT 3
42307: PUSH
42308: EMPTY
42309: LIST
42310: LIST
42311: PUSH
42312: LD_INT 0
42314: PUSH
42315: LD_INT 3
42317: PUSH
42318: EMPTY
42319: LIST
42320: LIST
42321: PUSH
42322: LD_INT 1
42324: NEG
42325: PUSH
42326: LD_INT 2
42328: PUSH
42329: EMPTY
42330: LIST
42331: LIST
42332: PUSH
42333: LD_INT 3
42335: NEG
42336: PUSH
42337: LD_INT 2
42339: NEG
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: PUSH
42345: LD_INT 3
42347: NEG
42348: PUSH
42349: LD_INT 3
42351: NEG
42352: PUSH
42353: EMPTY
42354: LIST
42355: LIST
42356: PUSH
42357: EMPTY
42358: LIST
42359: LIST
42360: LIST
42361: LIST
42362: LIST
42363: LIST
42364: LIST
42365: LIST
42366: LIST
42367: LIST
42368: LIST
42369: LIST
42370: LIST
42371: LIST
42372: LIST
42373: LIST
42374: LIST
42375: LIST
42376: LIST
42377: LIST
42378: LIST
42379: LIST
42380: LIST
42381: LIST
42382: LIST
42383: LIST
42384: LIST
42385: LIST
42386: LIST
42387: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42388: LD_ADDR_VAR 0 43
42392: PUSH
42393: LD_INT 0
42395: PUSH
42396: LD_INT 0
42398: PUSH
42399: EMPTY
42400: LIST
42401: LIST
42402: PUSH
42403: LD_INT 0
42405: PUSH
42406: LD_INT 1
42408: NEG
42409: PUSH
42410: EMPTY
42411: LIST
42412: LIST
42413: PUSH
42414: LD_INT 1
42416: PUSH
42417: LD_INT 0
42419: PUSH
42420: EMPTY
42421: LIST
42422: LIST
42423: PUSH
42424: LD_INT 1
42426: PUSH
42427: LD_INT 1
42429: PUSH
42430: EMPTY
42431: LIST
42432: LIST
42433: PUSH
42434: LD_INT 0
42436: PUSH
42437: LD_INT 1
42439: PUSH
42440: EMPTY
42441: LIST
42442: LIST
42443: PUSH
42444: LD_INT 1
42446: NEG
42447: PUSH
42448: LD_INT 0
42450: PUSH
42451: EMPTY
42452: LIST
42453: LIST
42454: PUSH
42455: LD_INT 1
42457: NEG
42458: PUSH
42459: LD_INT 1
42461: NEG
42462: PUSH
42463: EMPTY
42464: LIST
42465: LIST
42466: PUSH
42467: LD_INT 1
42469: NEG
42470: PUSH
42471: LD_INT 2
42473: NEG
42474: PUSH
42475: EMPTY
42476: LIST
42477: LIST
42478: PUSH
42479: LD_INT 0
42481: PUSH
42482: LD_INT 2
42484: NEG
42485: PUSH
42486: EMPTY
42487: LIST
42488: LIST
42489: PUSH
42490: LD_INT 1
42492: PUSH
42493: LD_INT 1
42495: NEG
42496: PUSH
42497: EMPTY
42498: LIST
42499: LIST
42500: PUSH
42501: LD_INT 2
42503: PUSH
42504: LD_INT 0
42506: PUSH
42507: EMPTY
42508: LIST
42509: LIST
42510: PUSH
42511: LD_INT 2
42513: PUSH
42514: LD_INT 1
42516: PUSH
42517: EMPTY
42518: LIST
42519: LIST
42520: PUSH
42521: LD_INT 1
42523: PUSH
42524: LD_INT 2
42526: PUSH
42527: EMPTY
42528: LIST
42529: LIST
42530: PUSH
42531: LD_INT 0
42533: PUSH
42534: LD_INT 2
42536: PUSH
42537: EMPTY
42538: LIST
42539: LIST
42540: PUSH
42541: LD_INT 1
42543: NEG
42544: PUSH
42545: LD_INT 1
42547: PUSH
42548: EMPTY
42549: LIST
42550: LIST
42551: PUSH
42552: LD_INT 2
42554: NEG
42555: PUSH
42556: LD_INT 0
42558: PUSH
42559: EMPTY
42560: LIST
42561: LIST
42562: PUSH
42563: LD_INT 2
42565: NEG
42566: PUSH
42567: LD_INT 1
42569: NEG
42570: PUSH
42571: EMPTY
42572: LIST
42573: LIST
42574: PUSH
42575: LD_INT 1
42577: NEG
42578: PUSH
42579: LD_INT 3
42581: NEG
42582: PUSH
42583: EMPTY
42584: LIST
42585: LIST
42586: PUSH
42587: LD_INT 0
42589: PUSH
42590: LD_INT 3
42592: NEG
42593: PUSH
42594: EMPTY
42595: LIST
42596: LIST
42597: PUSH
42598: LD_INT 1
42600: PUSH
42601: LD_INT 2
42603: NEG
42604: PUSH
42605: EMPTY
42606: LIST
42607: LIST
42608: PUSH
42609: LD_INT 2
42611: PUSH
42612: LD_INT 1
42614: NEG
42615: PUSH
42616: EMPTY
42617: LIST
42618: LIST
42619: PUSH
42620: LD_INT 3
42622: PUSH
42623: LD_INT 0
42625: PUSH
42626: EMPTY
42627: LIST
42628: LIST
42629: PUSH
42630: LD_INT 3
42632: PUSH
42633: LD_INT 1
42635: PUSH
42636: EMPTY
42637: LIST
42638: LIST
42639: PUSH
42640: LD_INT 1
42642: PUSH
42643: LD_INT 3
42645: PUSH
42646: EMPTY
42647: LIST
42648: LIST
42649: PUSH
42650: LD_INT 0
42652: PUSH
42653: LD_INT 3
42655: PUSH
42656: EMPTY
42657: LIST
42658: LIST
42659: PUSH
42660: LD_INT 1
42662: NEG
42663: PUSH
42664: LD_INT 2
42666: PUSH
42667: EMPTY
42668: LIST
42669: LIST
42670: PUSH
42671: LD_INT 2
42673: NEG
42674: PUSH
42675: LD_INT 1
42677: PUSH
42678: EMPTY
42679: LIST
42680: LIST
42681: PUSH
42682: LD_INT 3
42684: NEG
42685: PUSH
42686: LD_INT 0
42688: PUSH
42689: EMPTY
42690: LIST
42691: LIST
42692: PUSH
42693: LD_INT 3
42695: NEG
42696: PUSH
42697: LD_INT 1
42699: NEG
42700: PUSH
42701: EMPTY
42702: LIST
42703: LIST
42704: PUSH
42705: EMPTY
42706: LIST
42707: LIST
42708: LIST
42709: LIST
42710: LIST
42711: LIST
42712: LIST
42713: LIST
42714: LIST
42715: LIST
42716: LIST
42717: LIST
42718: LIST
42719: LIST
42720: LIST
42721: LIST
42722: LIST
42723: LIST
42724: LIST
42725: LIST
42726: LIST
42727: LIST
42728: LIST
42729: LIST
42730: LIST
42731: LIST
42732: LIST
42733: LIST
42734: LIST
42735: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42736: LD_ADDR_VAR 0 44
42740: PUSH
42741: LD_INT 0
42743: PUSH
42744: LD_INT 0
42746: PUSH
42747: EMPTY
42748: LIST
42749: LIST
42750: PUSH
42751: LD_INT 0
42753: PUSH
42754: LD_INT 1
42756: NEG
42757: PUSH
42758: EMPTY
42759: LIST
42760: LIST
42761: PUSH
42762: LD_INT 1
42764: PUSH
42765: LD_INT 0
42767: PUSH
42768: EMPTY
42769: LIST
42770: LIST
42771: PUSH
42772: LD_INT 1
42774: PUSH
42775: LD_INT 1
42777: PUSH
42778: EMPTY
42779: LIST
42780: LIST
42781: PUSH
42782: LD_INT 0
42784: PUSH
42785: LD_INT 1
42787: PUSH
42788: EMPTY
42789: LIST
42790: LIST
42791: PUSH
42792: LD_INT 1
42794: NEG
42795: PUSH
42796: LD_INT 0
42798: PUSH
42799: EMPTY
42800: LIST
42801: LIST
42802: PUSH
42803: LD_INT 1
42805: NEG
42806: PUSH
42807: LD_INT 1
42809: NEG
42810: PUSH
42811: EMPTY
42812: LIST
42813: LIST
42814: PUSH
42815: LD_INT 1
42817: NEG
42818: PUSH
42819: LD_INT 2
42821: NEG
42822: PUSH
42823: EMPTY
42824: LIST
42825: LIST
42826: PUSH
42827: LD_INT 1
42829: PUSH
42830: LD_INT 1
42832: NEG
42833: PUSH
42834: EMPTY
42835: LIST
42836: LIST
42837: PUSH
42838: LD_INT 2
42840: PUSH
42841: LD_INT 0
42843: PUSH
42844: EMPTY
42845: LIST
42846: LIST
42847: PUSH
42848: LD_INT 2
42850: PUSH
42851: LD_INT 1
42853: PUSH
42854: EMPTY
42855: LIST
42856: LIST
42857: PUSH
42858: LD_INT 2
42860: PUSH
42861: LD_INT 2
42863: PUSH
42864: EMPTY
42865: LIST
42866: LIST
42867: PUSH
42868: LD_INT 1
42870: PUSH
42871: LD_INT 2
42873: PUSH
42874: EMPTY
42875: LIST
42876: LIST
42877: PUSH
42878: LD_INT 1
42880: NEG
42881: PUSH
42882: LD_INT 1
42884: PUSH
42885: EMPTY
42886: LIST
42887: LIST
42888: PUSH
42889: LD_INT 2
42891: NEG
42892: PUSH
42893: LD_INT 0
42895: PUSH
42896: EMPTY
42897: LIST
42898: LIST
42899: PUSH
42900: LD_INT 2
42902: NEG
42903: PUSH
42904: LD_INT 1
42906: NEG
42907: PUSH
42908: EMPTY
42909: LIST
42910: LIST
42911: PUSH
42912: LD_INT 2
42914: NEG
42915: PUSH
42916: LD_INT 2
42918: NEG
42919: PUSH
42920: EMPTY
42921: LIST
42922: LIST
42923: PUSH
42924: LD_INT 2
42926: NEG
42927: PUSH
42928: LD_INT 3
42930: NEG
42931: PUSH
42932: EMPTY
42933: LIST
42934: LIST
42935: PUSH
42936: LD_INT 2
42938: PUSH
42939: LD_INT 1
42941: NEG
42942: PUSH
42943: EMPTY
42944: LIST
42945: LIST
42946: PUSH
42947: LD_INT 3
42949: PUSH
42950: LD_INT 0
42952: PUSH
42953: EMPTY
42954: LIST
42955: LIST
42956: PUSH
42957: LD_INT 3
42959: PUSH
42960: LD_INT 1
42962: PUSH
42963: EMPTY
42964: LIST
42965: LIST
42966: PUSH
42967: LD_INT 3
42969: PUSH
42970: LD_INT 2
42972: PUSH
42973: EMPTY
42974: LIST
42975: LIST
42976: PUSH
42977: LD_INT 3
42979: PUSH
42980: LD_INT 3
42982: PUSH
42983: EMPTY
42984: LIST
42985: LIST
42986: PUSH
42987: LD_INT 2
42989: PUSH
42990: LD_INT 3
42992: PUSH
42993: EMPTY
42994: LIST
42995: LIST
42996: PUSH
42997: LD_INT 2
42999: NEG
43000: PUSH
43001: LD_INT 1
43003: PUSH
43004: EMPTY
43005: LIST
43006: LIST
43007: PUSH
43008: LD_INT 3
43010: NEG
43011: PUSH
43012: LD_INT 0
43014: PUSH
43015: EMPTY
43016: LIST
43017: LIST
43018: PUSH
43019: LD_INT 3
43021: NEG
43022: PUSH
43023: LD_INT 1
43025: NEG
43026: PUSH
43027: EMPTY
43028: LIST
43029: LIST
43030: PUSH
43031: LD_INT 3
43033: NEG
43034: PUSH
43035: LD_INT 2
43037: NEG
43038: PUSH
43039: EMPTY
43040: LIST
43041: LIST
43042: PUSH
43043: LD_INT 3
43045: NEG
43046: PUSH
43047: LD_INT 3
43049: NEG
43050: PUSH
43051: EMPTY
43052: LIST
43053: LIST
43054: PUSH
43055: EMPTY
43056: LIST
43057: LIST
43058: LIST
43059: LIST
43060: LIST
43061: LIST
43062: LIST
43063: LIST
43064: LIST
43065: LIST
43066: LIST
43067: LIST
43068: LIST
43069: LIST
43070: LIST
43071: LIST
43072: LIST
43073: LIST
43074: LIST
43075: LIST
43076: LIST
43077: LIST
43078: LIST
43079: LIST
43080: LIST
43081: LIST
43082: LIST
43083: LIST
43084: LIST
43085: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43086: LD_ADDR_VAR 0 45
43090: PUSH
43091: LD_INT 0
43093: PUSH
43094: LD_INT 0
43096: PUSH
43097: EMPTY
43098: LIST
43099: LIST
43100: PUSH
43101: LD_INT 0
43103: PUSH
43104: LD_INT 1
43106: NEG
43107: PUSH
43108: EMPTY
43109: LIST
43110: LIST
43111: PUSH
43112: LD_INT 1
43114: PUSH
43115: LD_INT 0
43117: PUSH
43118: EMPTY
43119: LIST
43120: LIST
43121: PUSH
43122: LD_INT 1
43124: PUSH
43125: LD_INT 1
43127: PUSH
43128: EMPTY
43129: LIST
43130: LIST
43131: PUSH
43132: LD_INT 0
43134: PUSH
43135: LD_INT 1
43137: PUSH
43138: EMPTY
43139: LIST
43140: LIST
43141: PUSH
43142: LD_INT 1
43144: NEG
43145: PUSH
43146: LD_INT 0
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: PUSH
43153: LD_INT 1
43155: NEG
43156: PUSH
43157: LD_INT 1
43159: NEG
43160: PUSH
43161: EMPTY
43162: LIST
43163: LIST
43164: PUSH
43165: LD_INT 1
43167: NEG
43168: PUSH
43169: LD_INT 2
43171: NEG
43172: PUSH
43173: EMPTY
43174: LIST
43175: LIST
43176: PUSH
43177: LD_INT 0
43179: PUSH
43180: LD_INT 2
43182: NEG
43183: PUSH
43184: EMPTY
43185: LIST
43186: LIST
43187: PUSH
43188: LD_INT 1
43190: PUSH
43191: LD_INT 1
43193: NEG
43194: PUSH
43195: EMPTY
43196: LIST
43197: LIST
43198: PUSH
43199: LD_INT 2
43201: PUSH
43202: LD_INT 1
43204: PUSH
43205: EMPTY
43206: LIST
43207: LIST
43208: PUSH
43209: LD_INT 2
43211: PUSH
43212: LD_INT 2
43214: PUSH
43215: EMPTY
43216: LIST
43217: LIST
43218: PUSH
43219: LD_INT 1
43221: PUSH
43222: LD_INT 2
43224: PUSH
43225: EMPTY
43226: LIST
43227: LIST
43228: PUSH
43229: LD_INT 0
43231: PUSH
43232: LD_INT 2
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: PUSH
43239: LD_INT 1
43241: NEG
43242: PUSH
43243: LD_INT 1
43245: PUSH
43246: EMPTY
43247: LIST
43248: LIST
43249: PUSH
43250: LD_INT 2
43252: NEG
43253: PUSH
43254: LD_INT 1
43256: NEG
43257: PUSH
43258: EMPTY
43259: LIST
43260: LIST
43261: PUSH
43262: LD_INT 2
43264: NEG
43265: PUSH
43266: LD_INT 2
43268: NEG
43269: PUSH
43270: EMPTY
43271: LIST
43272: LIST
43273: PUSH
43274: LD_INT 2
43276: NEG
43277: PUSH
43278: LD_INT 3
43280: NEG
43281: PUSH
43282: EMPTY
43283: LIST
43284: LIST
43285: PUSH
43286: LD_INT 1
43288: NEG
43289: PUSH
43290: LD_INT 3
43292: NEG
43293: PUSH
43294: EMPTY
43295: LIST
43296: LIST
43297: PUSH
43298: LD_INT 0
43300: PUSH
43301: LD_INT 3
43303: NEG
43304: PUSH
43305: EMPTY
43306: LIST
43307: LIST
43308: PUSH
43309: LD_INT 1
43311: PUSH
43312: LD_INT 2
43314: NEG
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: PUSH
43320: LD_INT 3
43322: PUSH
43323: LD_INT 2
43325: PUSH
43326: EMPTY
43327: LIST
43328: LIST
43329: PUSH
43330: LD_INT 3
43332: PUSH
43333: LD_INT 3
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: PUSH
43340: LD_INT 2
43342: PUSH
43343: LD_INT 3
43345: PUSH
43346: EMPTY
43347: LIST
43348: LIST
43349: PUSH
43350: LD_INT 1
43352: PUSH
43353: LD_INT 3
43355: PUSH
43356: EMPTY
43357: LIST
43358: LIST
43359: PUSH
43360: LD_INT 0
43362: PUSH
43363: LD_INT 3
43365: PUSH
43366: EMPTY
43367: LIST
43368: LIST
43369: PUSH
43370: LD_INT 1
43372: NEG
43373: PUSH
43374: LD_INT 2
43376: PUSH
43377: EMPTY
43378: LIST
43379: LIST
43380: PUSH
43381: LD_INT 3
43383: NEG
43384: PUSH
43385: LD_INT 2
43387: NEG
43388: PUSH
43389: EMPTY
43390: LIST
43391: LIST
43392: PUSH
43393: LD_INT 3
43395: NEG
43396: PUSH
43397: LD_INT 3
43399: NEG
43400: PUSH
43401: EMPTY
43402: LIST
43403: LIST
43404: PUSH
43405: EMPTY
43406: LIST
43407: LIST
43408: LIST
43409: LIST
43410: LIST
43411: LIST
43412: LIST
43413: LIST
43414: LIST
43415: LIST
43416: LIST
43417: LIST
43418: LIST
43419: LIST
43420: LIST
43421: LIST
43422: LIST
43423: LIST
43424: LIST
43425: LIST
43426: LIST
43427: LIST
43428: LIST
43429: LIST
43430: LIST
43431: LIST
43432: LIST
43433: LIST
43434: LIST
43435: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43436: LD_ADDR_VAR 0 46
43440: PUSH
43441: LD_INT 0
43443: PUSH
43444: LD_INT 0
43446: PUSH
43447: EMPTY
43448: LIST
43449: LIST
43450: PUSH
43451: LD_INT 0
43453: PUSH
43454: LD_INT 1
43456: NEG
43457: PUSH
43458: EMPTY
43459: LIST
43460: LIST
43461: PUSH
43462: LD_INT 1
43464: PUSH
43465: LD_INT 0
43467: PUSH
43468: EMPTY
43469: LIST
43470: LIST
43471: PUSH
43472: LD_INT 1
43474: PUSH
43475: LD_INT 1
43477: PUSH
43478: EMPTY
43479: LIST
43480: LIST
43481: PUSH
43482: LD_INT 0
43484: PUSH
43485: LD_INT 1
43487: PUSH
43488: EMPTY
43489: LIST
43490: LIST
43491: PUSH
43492: LD_INT 1
43494: NEG
43495: PUSH
43496: LD_INT 0
43498: PUSH
43499: EMPTY
43500: LIST
43501: LIST
43502: PUSH
43503: LD_INT 1
43505: NEG
43506: PUSH
43507: LD_INT 1
43509: NEG
43510: PUSH
43511: EMPTY
43512: LIST
43513: LIST
43514: PUSH
43515: LD_INT 1
43517: NEG
43518: PUSH
43519: LD_INT 2
43521: NEG
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: PUSH
43527: LD_INT 0
43529: PUSH
43530: LD_INT 2
43532: NEG
43533: PUSH
43534: EMPTY
43535: LIST
43536: LIST
43537: PUSH
43538: LD_INT 1
43540: PUSH
43541: LD_INT 1
43543: NEG
43544: PUSH
43545: EMPTY
43546: LIST
43547: LIST
43548: PUSH
43549: LD_INT 2
43551: PUSH
43552: LD_INT 0
43554: PUSH
43555: EMPTY
43556: LIST
43557: LIST
43558: PUSH
43559: LD_INT 2
43561: PUSH
43562: LD_INT 1
43564: PUSH
43565: EMPTY
43566: LIST
43567: LIST
43568: PUSH
43569: LD_INT 1
43571: PUSH
43572: LD_INT 2
43574: PUSH
43575: EMPTY
43576: LIST
43577: LIST
43578: PUSH
43579: LD_INT 0
43581: PUSH
43582: LD_INT 2
43584: PUSH
43585: EMPTY
43586: LIST
43587: LIST
43588: PUSH
43589: LD_INT 1
43591: NEG
43592: PUSH
43593: LD_INT 1
43595: PUSH
43596: EMPTY
43597: LIST
43598: LIST
43599: PUSH
43600: LD_INT 2
43602: NEG
43603: PUSH
43604: LD_INT 0
43606: PUSH
43607: EMPTY
43608: LIST
43609: LIST
43610: PUSH
43611: LD_INT 2
43613: NEG
43614: PUSH
43615: LD_INT 1
43617: NEG
43618: PUSH
43619: EMPTY
43620: LIST
43621: LIST
43622: PUSH
43623: LD_INT 1
43625: NEG
43626: PUSH
43627: LD_INT 3
43629: NEG
43630: PUSH
43631: EMPTY
43632: LIST
43633: LIST
43634: PUSH
43635: LD_INT 0
43637: PUSH
43638: LD_INT 3
43640: NEG
43641: PUSH
43642: EMPTY
43643: LIST
43644: LIST
43645: PUSH
43646: LD_INT 1
43648: PUSH
43649: LD_INT 2
43651: NEG
43652: PUSH
43653: EMPTY
43654: LIST
43655: LIST
43656: PUSH
43657: LD_INT 2
43659: PUSH
43660: LD_INT 1
43662: NEG
43663: PUSH
43664: EMPTY
43665: LIST
43666: LIST
43667: PUSH
43668: LD_INT 3
43670: PUSH
43671: LD_INT 0
43673: PUSH
43674: EMPTY
43675: LIST
43676: LIST
43677: PUSH
43678: LD_INT 3
43680: PUSH
43681: LD_INT 1
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: PUSH
43688: LD_INT 1
43690: PUSH
43691: LD_INT 3
43693: PUSH
43694: EMPTY
43695: LIST
43696: LIST
43697: PUSH
43698: LD_INT 0
43700: PUSH
43701: LD_INT 3
43703: PUSH
43704: EMPTY
43705: LIST
43706: LIST
43707: PUSH
43708: LD_INT 1
43710: NEG
43711: PUSH
43712: LD_INT 2
43714: PUSH
43715: EMPTY
43716: LIST
43717: LIST
43718: PUSH
43719: LD_INT 2
43721: NEG
43722: PUSH
43723: LD_INT 1
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: PUSH
43730: LD_INT 3
43732: NEG
43733: PUSH
43734: LD_INT 0
43736: PUSH
43737: EMPTY
43738: LIST
43739: LIST
43740: PUSH
43741: LD_INT 3
43743: NEG
43744: PUSH
43745: LD_INT 1
43747: NEG
43748: PUSH
43749: EMPTY
43750: LIST
43751: LIST
43752: PUSH
43753: EMPTY
43754: LIST
43755: LIST
43756: LIST
43757: LIST
43758: LIST
43759: LIST
43760: LIST
43761: LIST
43762: LIST
43763: LIST
43764: LIST
43765: LIST
43766: LIST
43767: LIST
43768: LIST
43769: LIST
43770: LIST
43771: LIST
43772: LIST
43773: LIST
43774: LIST
43775: LIST
43776: LIST
43777: LIST
43778: LIST
43779: LIST
43780: LIST
43781: LIST
43782: LIST
43783: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43784: LD_ADDR_VAR 0 47
43788: PUSH
43789: LD_INT 0
43791: PUSH
43792: LD_INT 0
43794: PUSH
43795: EMPTY
43796: LIST
43797: LIST
43798: PUSH
43799: LD_INT 0
43801: PUSH
43802: LD_INT 1
43804: NEG
43805: PUSH
43806: EMPTY
43807: LIST
43808: LIST
43809: PUSH
43810: LD_INT 1
43812: PUSH
43813: LD_INT 0
43815: PUSH
43816: EMPTY
43817: LIST
43818: LIST
43819: PUSH
43820: LD_INT 1
43822: PUSH
43823: LD_INT 1
43825: PUSH
43826: EMPTY
43827: LIST
43828: LIST
43829: PUSH
43830: LD_INT 0
43832: PUSH
43833: LD_INT 1
43835: PUSH
43836: EMPTY
43837: LIST
43838: LIST
43839: PUSH
43840: LD_INT 1
43842: NEG
43843: PUSH
43844: LD_INT 0
43846: PUSH
43847: EMPTY
43848: LIST
43849: LIST
43850: PUSH
43851: LD_INT 1
43853: NEG
43854: PUSH
43855: LD_INT 1
43857: NEG
43858: PUSH
43859: EMPTY
43860: LIST
43861: LIST
43862: PUSH
43863: LD_INT 1
43865: NEG
43866: PUSH
43867: LD_INT 2
43869: NEG
43870: PUSH
43871: EMPTY
43872: LIST
43873: LIST
43874: PUSH
43875: LD_INT 0
43877: PUSH
43878: LD_INT 2
43880: NEG
43881: PUSH
43882: EMPTY
43883: LIST
43884: LIST
43885: PUSH
43886: LD_INT 1
43888: PUSH
43889: LD_INT 1
43891: NEG
43892: PUSH
43893: EMPTY
43894: LIST
43895: LIST
43896: PUSH
43897: LD_INT 2
43899: NEG
43900: PUSH
43901: LD_INT 1
43903: NEG
43904: PUSH
43905: EMPTY
43906: LIST
43907: LIST
43908: PUSH
43909: LD_INT 2
43911: NEG
43912: PUSH
43913: LD_INT 2
43915: NEG
43916: PUSH
43917: EMPTY
43918: LIST
43919: LIST
43920: PUSH
43921: EMPTY
43922: LIST
43923: LIST
43924: LIST
43925: LIST
43926: LIST
43927: LIST
43928: LIST
43929: LIST
43930: LIST
43931: LIST
43932: LIST
43933: LIST
43934: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
43935: LD_ADDR_VAR 0 48
43939: PUSH
43940: LD_INT 0
43942: PUSH
43943: LD_INT 0
43945: PUSH
43946: EMPTY
43947: LIST
43948: LIST
43949: PUSH
43950: LD_INT 0
43952: PUSH
43953: LD_INT 1
43955: NEG
43956: PUSH
43957: EMPTY
43958: LIST
43959: LIST
43960: PUSH
43961: LD_INT 1
43963: PUSH
43964: LD_INT 0
43966: PUSH
43967: EMPTY
43968: LIST
43969: LIST
43970: PUSH
43971: LD_INT 1
43973: PUSH
43974: LD_INT 1
43976: PUSH
43977: EMPTY
43978: LIST
43979: LIST
43980: PUSH
43981: LD_INT 0
43983: PUSH
43984: LD_INT 1
43986: PUSH
43987: EMPTY
43988: LIST
43989: LIST
43990: PUSH
43991: LD_INT 1
43993: NEG
43994: PUSH
43995: LD_INT 0
43997: PUSH
43998: EMPTY
43999: LIST
44000: LIST
44001: PUSH
44002: LD_INT 1
44004: NEG
44005: PUSH
44006: LD_INT 1
44008: NEG
44009: PUSH
44010: EMPTY
44011: LIST
44012: LIST
44013: PUSH
44014: LD_INT 1
44016: NEG
44017: PUSH
44018: LD_INT 2
44020: NEG
44021: PUSH
44022: EMPTY
44023: LIST
44024: LIST
44025: PUSH
44026: LD_INT 0
44028: PUSH
44029: LD_INT 2
44031: NEG
44032: PUSH
44033: EMPTY
44034: LIST
44035: LIST
44036: PUSH
44037: LD_INT 1
44039: PUSH
44040: LD_INT 1
44042: NEG
44043: PUSH
44044: EMPTY
44045: LIST
44046: LIST
44047: PUSH
44048: LD_INT 2
44050: PUSH
44051: LD_INT 0
44053: PUSH
44054: EMPTY
44055: LIST
44056: LIST
44057: PUSH
44058: LD_INT 2
44060: PUSH
44061: LD_INT 1
44063: PUSH
44064: EMPTY
44065: LIST
44066: LIST
44067: PUSH
44068: EMPTY
44069: LIST
44070: LIST
44071: LIST
44072: LIST
44073: LIST
44074: LIST
44075: LIST
44076: LIST
44077: LIST
44078: LIST
44079: LIST
44080: LIST
44081: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44082: LD_ADDR_VAR 0 49
44086: PUSH
44087: LD_INT 0
44089: PUSH
44090: LD_INT 0
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: PUSH
44097: LD_INT 0
44099: PUSH
44100: LD_INT 1
44102: NEG
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: PUSH
44108: LD_INT 1
44110: PUSH
44111: LD_INT 0
44113: PUSH
44114: EMPTY
44115: LIST
44116: LIST
44117: PUSH
44118: LD_INT 1
44120: PUSH
44121: LD_INT 1
44123: PUSH
44124: EMPTY
44125: LIST
44126: LIST
44127: PUSH
44128: LD_INT 0
44130: PUSH
44131: LD_INT 1
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: PUSH
44138: LD_INT 1
44140: NEG
44141: PUSH
44142: LD_INT 0
44144: PUSH
44145: EMPTY
44146: LIST
44147: LIST
44148: PUSH
44149: LD_INT 1
44151: NEG
44152: PUSH
44153: LD_INT 1
44155: NEG
44156: PUSH
44157: EMPTY
44158: LIST
44159: LIST
44160: PUSH
44161: LD_INT 1
44163: PUSH
44164: LD_INT 1
44166: NEG
44167: PUSH
44168: EMPTY
44169: LIST
44170: LIST
44171: PUSH
44172: LD_INT 2
44174: PUSH
44175: LD_INT 0
44177: PUSH
44178: EMPTY
44179: LIST
44180: LIST
44181: PUSH
44182: LD_INT 2
44184: PUSH
44185: LD_INT 1
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: PUSH
44192: LD_INT 2
44194: PUSH
44195: LD_INT 2
44197: PUSH
44198: EMPTY
44199: LIST
44200: LIST
44201: PUSH
44202: LD_INT 1
44204: PUSH
44205: LD_INT 2
44207: PUSH
44208: EMPTY
44209: LIST
44210: LIST
44211: PUSH
44212: EMPTY
44213: LIST
44214: LIST
44215: LIST
44216: LIST
44217: LIST
44218: LIST
44219: LIST
44220: LIST
44221: LIST
44222: LIST
44223: LIST
44224: LIST
44225: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44226: LD_ADDR_VAR 0 50
44230: PUSH
44231: LD_INT 0
44233: PUSH
44234: LD_INT 0
44236: PUSH
44237: EMPTY
44238: LIST
44239: LIST
44240: PUSH
44241: LD_INT 0
44243: PUSH
44244: LD_INT 1
44246: NEG
44247: PUSH
44248: EMPTY
44249: LIST
44250: LIST
44251: PUSH
44252: LD_INT 1
44254: PUSH
44255: LD_INT 0
44257: PUSH
44258: EMPTY
44259: LIST
44260: LIST
44261: PUSH
44262: LD_INT 1
44264: PUSH
44265: LD_INT 1
44267: PUSH
44268: EMPTY
44269: LIST
44270: LIST
44271: PUSH
44272: LD_INT 0
44274: PUSH
44275: LD_INT 1
44277: PUSH
44278: EMPTY
44279: LIST
44280: LIST
44281: PUSH
44282: LD_INT 1
44284: NEG
44285: PUSH
44286: LD_INT 0
44288: PUSH
44289: EMPTY
44290: LIST
44291: LIST
44292: PUSH
44293: LD_INT 1
44295: NEG
44296: PUSH
44297: LD_INT 1
44299: NEG
44300: PUSH
44301: EMPTY
44302: LIST
44303: LIST
44304: PUSH
44305: LD_INT 2
44307: PUSH
44308: LD_INT 1
44310: PUSH
44311: EMPTY
44312: LIST
44313: LIST
44314: PUSH
44315: LD_INT 2
44317: PUSH
44318: LD_INT 2
44320: PUSH
44321: EMPTY
44322: LIST
44323: LIST
44324: PUSH
44325: LD_INT 1
44327: PUSH
44328: LD_INT 2
44330: PUSH
44331: EMPTY
44332: LIST
44333: LIST
44334: PUSH
44335: LD_INT 0
44337: PUSH
44338: LD_INT 2
44340: PUSH
44341: EMPTY
44342: LIST
44343: LIST
44344: PUSH
44345: LD_INT 1
44347: NEG
44348: PUSH
44349: LD_INT 1
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: PUSH
44356: EMPTY
44357: LIST
44358: LIST
44359: LIST
44360: LIST
44361: LIST
44362: LIST
44363: LIST
44364: LIST
44365: LIST
44366: LIST
44367: LIST
44368: LIST
44369: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44370: LD_ADDR_VAR 0 51
44374: PUSH
44375: LD_INT 0
44377: PUSH
44378: LD_INT 0
44380: PUSH
44381: EMPTY
44382: LIST
44383: LIST
44384: PUSH
44385: LD_INT 0
44387: PUSH
44388: LD_INT 1
44390: NEG
44391: PUSH
44392: EMPTY
44393: LIST
44394: LIST
44395: PUSH
44396: LD_INT 1
44398: PUSH
44399: LD_INT 0
44401: PUSH
44402: EMPTY
44403: LIST
44404: LIST
44405: PUSH
44406: LD_INT 1
44408: PUSH
44409: LD_INT 1
44411: PUSH
44412: EMPTY
44413: LIST
44414: LIST
44415: PUSH
44416: LD_INT 0
44418: PUSH
44419: LD_INT 1
44421: PUSH
44422: EMPTY
44423: LIST
44424: LIST
44425: PUSH
44426: LD_INT 1
44428: NEG
44429: PUSH
44430: LD_INT 0
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: PUSH
44437: LD_INT 1
44439: NEG
44440: PUSH
44441: LD_INT 1
44443: NEG
44444: PUSH
44445: EMPTY
44446: LIST
44447: LIST
44448: PUSH
44449: LD_INT 1
44451: PUSH
44452: LD_INT 2
44454: PUSH
44455: EMPTY
44456: LIST
44457: LIST
44458: PUSH
44459: LD_INT 0
44461: PUSH
44462: LD_INT 2
44464: PUSH
44465: EMPTY
44466: LIST
44467: LIST
44468: PUSH
44469: LD_INT 1
44471: NEG
44472: PUSH
44473: LD_INT 1
44475: PUSH
44476: EMPTY
44477: LIST
44478: LIST
44479: PUSH
44480: LD_INT 2
44482: NEG
44483: PUSH
44484: LD_INT 0
44486: PUSH
44487: EMPTY
44488: LIST
44489: LIST
44490: PUSH
44491: LD_INT 2
44493: NEG
44494: PUSH
44495: LD_INT 1
44497: NEG
44498: PUSH
44499: EMPTY
44500: LIST
44501: LIST
44502: PUSH
44503: EMPTY
44504: LIST
44505: LIST
44506: LIST
44507: LIST
44508: LIST
44509: LIST
44510: LIST
44511: LIST
44512: LIST
44513: LIST
44514: LIST
44515: LIST
44516: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44517: LD_ADDR_VAR 0 52
44521: PUSH
44522: LD_INT 0
44524: PUSH
44525: LD_INT 0
44527: PUSH
44528: EMPTY
44529: LIST
44530: LIST
44531: PUSH
44532: LD_INT 0
44534: PUSH
44535: LD_INT 1
44537: NEG
44538: PUSH
44539: EMPTY
44540: LIST
44541: LIST
44542: PUSH
44543: LD_INT 1
44545: PUSH
44546: LD_INT 0
44548: PUSH
44549: EMPTY
44550: LIST
44551: LIST
44552: PUSH
44553: LD_INT 1
44555: PUSH
44556: LD_INT 1
44558: PUSH
44559: EMPTY
44560: LIST
44561: LIST
44562: PUSH
44563: LD_INT 0
44565: PUSH
44566: LD_INT 1
44568: PUSH
44569: EMPTY
44570: LIST
44571: LIST
44572: PUSH
44573: LD_INT 1
44575: NEG
44576: PUSH
44577: LD_INT 0
44579: PUSH
44580: EMPTY
44581: LIST
44582: LIST
44583: PUSH
44584: LD_INT 1
44586: NEG
44587: PUSH
44588: LD_INT 1
44590: NEG
44591: PUSH
44592: EMPTY
44593: LIST
44594: LIST
44595: PUSH
44596: LD_INT 1
44598: NEG
44599: PUSH
44600: LD_INT 2
44602: NEG
44603: PUSH
44604: EMPTY
44605: LIST
44606: LIST
44607: PUSH
44608: LD_INT 1
44610: NEG
44611: PUSH
44612: LD_INT 1
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: PUSH
44619: LD_INT 2
44621: NEG
44622: PUSH
44623: LD_INT 0
44625: PUSH
44626: EMPTY
44627: LIST
44628: LIST
44629: PUSH
44630: LD_INT 2
44632: NEG
44633: PUSH
44634: LD_INT 1
44636: NEG
44637: PUSH
44638: EMPTY
44639: LIST
44640: LIST
44641: PUSH
44642: LD_INT 2
44644: NEG
44645: PUSH
44646: LD_INT 2
44648: NEG
44649: PUSH
44650: EMPTY
44651: LIST
44652: LIST
44653: PUSH
44654: EMPTY
44655: LIST
44656: LIST
44657: LIST
44658: LIST
44659: LIST
44660: LIST
44661: LIST
44662: LIST
44663: LIST
44664: LIST
44665: LIST
44666: LIST
44667: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44668: LD_ADDR_VAR 0 53
44672: PUSH
44673: LD_INT 0
44675: PUSH
44676: LD_INT 0
44678: PUSH
44679: EMPTY
44680: LIST
44681: LIST
44682: PUSH
44683: LD_INT 0
44685: PUSH
44686: LD_INT 1
44688: NEG
44689: PUSH
44690: EMPTY
44691: LIST
44692: LIST
44693: PUSH
44694: LD_INT 1
44696: PUSH
44697: LD_INT 0
44699: PUSH
44700: EMPTY
44701: LIST
44702: LIST
44703: PUSH
44704: LD_INT 1
44706: PUSH
44707: LD_INT 1
44709: PUSH
44710: EMPTY
44711: LIST
44712: LIST
44713: PUSH
44714: LD_INT 0
44716: PUSH
44717: LD_INT 1
44719: PUSH
44720: EMPTY
44721: LIST
44722: LIST
44723: PUSH
44724: LD_INT 1
44726: NEG
44727: PUSH
44728: LD_INT 0
44730: PUSH
44731: EMPTY
44732: LIST
44733: LIST
44734: PUSH
44735: LD_INT 1
44737: NEG
44738: PUSH
44739: LD_INT 1
44741: NEG
44742: PUSH
44743: EMPTY
44744: LIST
44745: LIST
44746: PUSH
44747: LD_INT 1
44749: NEG
44750: PUSH
44751: LD_INT 2
44753: NEG
44754: PUSH
44755: EMPTY
44756: LIST
44757: LIST
44758: PUSH
44759: LD_INT 0
44761: PUSH
44762: LD_INT 2
44764: NEG
44765: PUSH
44766: EMPTY
44767: LIST
44768: LIST
44769: PUSH
44770: LD_INT 1
44772: PUSH
44773: LD_INT 1
44775: NEG
44776: PUSH
44777: EMPTY
44778: LIST
44779: LIST
44780: PUSH
44781: LD_INT 2
44783: PUSH
44784: LD_INT 0
44786: PUSH
44787: EMPTY
44788: LIST
44789: LIST
44790: PUSH
44791: LD_INT 2
44793: PUSH
44794: LD_INT 1
44796: PUSH
44797: EMPTY
44798: LIST
44799: LIST
44800: PUSH
44801: LD_INT 2
44803: PUSH
44804: LD_INT 2
44806: PUSH
44807: EMPTY
44808: LIST
44809: LIST
44810: PUSH
44811: LD_INT 1
44813: PUSH
44814: LD_INT 2
44816: PUSH
44817: EMPTY
44818: LIST
44819: LIST
44820: PUSH
44821: LD_INT 0
44823: PUSH
44824: LD_INT 2
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: PUSH
44831: LD_INT 1
44833: NEG
44834: PUSH
44835: LD_INT 1
44837: PUSH
44838: EMPTY
44839: LIST
44840: LIST
44841: PUSH
44842: LD_INT 2
44844: NEG
44845: PUSH
44846: LD_INT 0
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: PUSH
44853: LD_INT 2
44855: NEG
44856: PUSH
44857: LD_INT 1
44859: NEG
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: PUSH
44865: LD_INT 2
44867: NEG
44868: PUSH
44869: LD_INT 2
44871: NEG
44872: PUSH
44873: EMPTY
44874: LIST
44875: LIST
44876: PUSH
44877: EMPTY
44878: LIST
44879: LIST
44880: LIST
44881: LIST
44882: LIST
44883: LIST
44884: LIST
44885: LIST
44886: LIST
44887: LIST
44888: LIST
44889: LIST
44890: LIST
44891: LIST
44892: LIST
44893: LIST
44894: LIST
44895: LIST
44896: LIST
44897: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44898: LD_ADDR_VAR 0 54
44902: PUSH
44903: LD_INT 0
44905: PUSH
44906: LD_INT 0
44908: PUSH
44909: EMPTY
44910: LIST
44911: LIST
44912: PUSH
44913: LD_INT 0
44915: PUSH
44916: LD_INT 1
44918: NEG
44919: PUSH
44920: EMPTY
44921: LIST
44922: LIST
44923: PUSH
44924: LD_INT 1
44926: PUSH
44927: LD_INT 0
44929: PUSH
44930: EMPTY
44931: LIST
44932: LIST
44933: PUSH
44934: LD_INT 1
44936: PUSH
44937: LD_INT 1
44939: PUSH
44940: EMPTY
44941: LIST
44942: LIST
44943: PUSH
44944: LD_INT 0
44946: PUSH
44947: LD_INT 1
44949: PUSH
44950: EMPTY
44951: LIST
44952: LIST
44953: PUSH
44954: LD_INT 1
44956: NEG
44957: PUSH
44958: LD_INT 0
44960: PUSH
44961: EMPTY
44962: LIST
44963: LIST
44964: PUSH
44965: LD_INT 1
44967: NEG
44968: PUSH
44969: LD_INT 1
44971: NEG
44972: PUSH
44973: EMPTY
44974: LIST
44975: LIST
44976: PUSH
44977: LD_INT 1
44979: NEG
44980: PUSH
44981: LD_INT 2
44983: NEG
44984: PUSH
44985: EMPTY
44986: LIST
44987: LIST
44988: PUSH
44989: LD_INT 0
44991: PUSH
44992: LD_INT 2
44994: NEG
44995: PUSH
44996: EMPTY
44997: LIST
44998: LIST
44999: PUSH
45000: LD_INT 1
45002: PUSH
45003: LD_INT 1
45005: NEG
45006: PUSH
45007: EMPTY
45008: LIST
45009: LIST
45010: PUSH
45011: LD_INT 2
45013: PUSH
45014: LD_INT 0
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: PUSH
45021: LD_INT 2
45023: PUSH
45024: LD_INT 1
45026: PUSH
45027: EMPTY
45028: LIST
45029: LIST
45030: PUSH
45031: LD_INT 2
45033: PUSH
45034: LD_INT 2
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: PUSH
45041: LD_INT 1
45043: PUSH
45044: LD_INT 2
45046: PUSH
45047: EMPTY
45048: LIST
45049: LIST
45050: PUSH
45051: LD_INT 0
45053: PUSH
45054: LD_INT 2
45056: PUSH
45057: EMPTY
45058: LIST
45059: LIST
45060: PUSH
45061: LD_INT 1
45063: NEG
45064: PUSH
45065: LD_INT 1
45067: PUSH
45068: EMPTY
45069: LIST
45070: LIST
45071: PUSH
45072: LD_INT 2
45074: NEG
45075: PUSH
45076: LD_INT 0
45078: PUSH
45079: EMPTY
45080: LIST
45081: LIST
45082: PUSH
45083: LD_INT 2
45085: NEG
45086: PUSH
45087: LD_INT 1
45089: NEG
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: PUSH
45095: LD_INT 2
45097: NEG
45098: PUSH
45099: LD_INT 2
45101: NEG
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: LIST
45111: LIST
45112: LIST
45113: LIST
45114: LIST
45115: LIST
45116: LIST
45117: LIST
45118: LIST
45119: LIST
45120: LIST
45121: LIST
45122: LIST
45123: LIST
45124: LIST
45125: LIST
45126: LIST
45127: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45128: LD_ADDR_VAR 0 55
45132: PUSH
45133: LD_INT 0
45135: PUSH
45136: LD_INT 0
45138: PUSH
45139: EMPTY
45140: LIST
45141: LIST
45142: PUSH
45143: LD_INT 0
45145: PUSH
45146: LD_INT 1
45148: NEG
45149: PUSH
45150: EMPTY
45151: LIST
45152: LIST
45153: PUSH
45154: LD_INT 1
45156: PUSH
45157: LD_INT 0
45159: PUSH
45160: EMPTY
45161: LIST
45162: LIST
45163: PUSH
45164: LD_INT 1
45166: PUSH
45167: LD_INT 1
45169: PUSH
45170: EMPTY
45171: LIST
45172: LIST
45173: PUSH
45174: LD_INT 0
45176: PUSH
45177: LD_INT 1
45179: PUSH
45180: EMPTY
45181: LIST
45182: LIST
45183: PUSH
45184: LD_INT 1
45186: NEG
45187: PUSH
45188: LD_INT 0
45190: PUSH
45191: EMPTY
45192: LIST
45193: LIST
45194: PUSH
45195: LD_INT 1
45197: NEG
45198: PUSH
45199: LD_INT 1
45201: NEG
45202: PUSH
45203: EMPTY
45204: LIST
45205: LIST
45206: PUSH
45207: LD_INT 1
45209: NEG
45210: PUSH
45211: LD_INT 2
45213: NEG
45214: PUSH
45215: EMPTY
45216: LIST
45217: LIST
45218: PUSH
45219: LD_INT 0
45221: PUSH
45222: LD_INT 2
45224: NEG
45225: PUSH
45226: EMPTY
45227: LIST
45228: LIST
45229: PUSH
45230: LD_INT 1
45232: PUSH
45233: LD_INT 1
45235: NEG
45236: PUSH
45237: EMPTY
45238: LIST
45239: LIST
45240: PUSH
45241: LD_INT 2
45243: PUSH
45244: LD_INT 0
45246: PUSH
45247: EMPTY
45248: LIST
45249: LIST
45250: PUSH
45251: LD_INT 2
45253: PUSH
45254: LD_INT 1
45256: PUSH
45257: EMPTY
45258: LIST
45259: LIST
45260: PUSH
45261: LD_INT 2
45263: PUSH
45264: LD_INT 2
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: PUSH
45271: LD_INT 1
45273: PUSH
45274: LD_INT 2
45276: PUSH
45277: EMPTY
45278: LIST
45279: LIST
45280: PUSH
45281: LD_INT 0
45283: PUSH
45284: LD_INT 2
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: PUSH
45291: LD_INT 1
45293: NEG
45294: PUSH
45295: LD_INT 1
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: PUSH
45302: LD_INT 2
45304: NEG
45305: PUSH
45306: LD_INT 0
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: PUSH
45313: LD_INT 2
45315: NEG
45316: PUSH
45317: LD_INT 1
45319: NEG
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: PUSH
45325: LD_INT 2
45327: NEG
45328: PUSH
45329: LD_INT 2
45331: NEG
45332: PUSH
45333: EMPTY
45334: LIST
45335: LIST
45336: PUSH
45337: EMPTY
45338: LIST
45339: LIST
45340: LIST
45341: LIST
45342: LIST
45343: LIST
45344: LIST
45345: LIST
45346: LIST
45347: LIST
45348: LIST
45349: LIST
45350: LIST
45351: LIST
45352: LIST
45353: LIST
45354: LIST
45355: LIST
45356: LIST
45357: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45358: LD_ADDR_VAR 0 56
45362: PUSH
45363: LD_INT 0
45365: PUSH
45366: LD_INT 0
45368: PUSH
45369: EMPTY
45370: LIST
45371: LIST
45372: PUSH
45373: LD_INT 0
45375: PUSH
45376: LD_INT 1
45378: NEG
45379: PUSH
45380: EMPTY
45381: LIST
45382: LIST
45383: PUSH
45384: LD_INT 1
45386: PUSH
45387: LD_INT 0
45389: PUSH
45390: EMPTY
45391: LIST
45392: LIST
45393: PUSH
45394: LD_INT 1
45396: PUSH
45397: LD_INT 1
45399: PUSH
45400: EMPTY
45401: LIST
45402: LIST
45403: PUSH
45404: LD_INT 0
45406: PUSH
45407: LD_INT 1
45409: PUSH
45410: EMPTY
45411: LIST
45412: LIST
45413: PUSH
45414: LD_INT 1
45416: NEG
45417: PUSH
45418: LD_INT 0
45420: PUSH
45421: EMPTY
45422: LIST
45423: LIST
45424: PUSH
45425: LD_INT 1
45427: NEG
45428: PUSH
45429: LD_INT 1
45431: NEG
45432: PUSH
45433: EMPTY
45434: LIST
45435: LIST
45436: PUSH
45437: LD_INT 1
45439: NEG
45440: PUSH
45441: LD_INT 2
45443: NEG
45444: PUSH
45445: EMPTY
45446: LIST
45447: LIST
45448: PUSH
45449: LD_INT 0
45451: PUSH
45452: LD_INT 2
45454: NEG
45455: PUSH
45456: EMPTY
45457: LIST
45458: LIST
45459: PUSH
45460: LD_INT 1
45462: PUSH
45463: LD_INT 1
45465: NEG
45466: PUSH
45467: EMPTY
45468: LIST
45469: LIST
45470: PUSH
45471: LD_INT 2
45473: PUSH
45474: LD_INT 0
45476: PUSH
45477: EMPTY
45478: LIST
45479: LIST
45480: PUSH
45481: LD_INT 2
45483: PUSH
45484: LD_INT 1
45486: PUSH
45487: EMPTY
45488: LIST
45489: LIST
45490: PUSH
45491: LD_INT 2
45493: PUSH
45494: LD_INT 2
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: PUSH
45501: LD_INT 1
45503: PUSH
45504: LD_INT 2
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: PUSH
45511: LD_INT 0
45513: PUSH
45514: LD_INT 2
45516: PUSH
45517: EMPTY
45518: LIST
45519: LIST
45520: PUSH
45521: LD_INT 1
45523: NEG
45524: PUSH
45525: LD_INT 1
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: PUSH
45532: LD_INT 2
45534: NEG
45535: PUSH
45536: LD_INT 0
45538: PUSH
45539: EMPTY
45540: LIST
45541: LIST
45542: PUSH
45543: LD_INT 2
45545: NEG
45546: PUSH
45547: LD_INT 1
45549: NEG
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: PUSH
45555: LD_INT 2
45557: NEG
45558: PUSH
45559: LD_INT 2
45561: NEG
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: PUSH
45567: EMPTY
45568: LIST
45569: LIST
45570: LIST
45571: LIST
45572: LIST
45573: LIST
45574: LIST
45575: LIST
45576: LIST
45577: LIST
45578: LIST
45579: LIST
45580: LIST
45581: LIST
45582: LIST
45583: LIST
45584: LIST
45585: LIST
45586: LIST
45587: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45588: LD_ADDR_VAR 0 57
45592: PUSH
45593: LD_INT 0
45595: PUSH
45596: LD_INT 0
45598: PUSH
45599: EMPTY
45600: LIST
45601: LIST
45602: PUSH
45603: LD_INT 0
45605: PUSH
45606: LD_INT 1
45608: NEG
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: PUSH
45614: LD_INT 1
45616: PUSH
45617: LD_INT 0
45619: PUSH
45620: EMPTY
45621: LIST
45622: LIST
45623: PUSH
45624: LD_INT 1
45626: PUSH
45627: LD_INT 1
45629: PUSH
45630: EMPTY
45631: LIST
45632: LIST
45633: PUSH
45634: LD_INT 0
45636: PUSH
45637: LD_INT 1
45639: PUSH
45640: EMPTY
45641: LIST
45642: LIST
45643: PUSH
45644: LD_INT 1
45646: NEG
45647: PUSH
45648: LD_INT 0
45650: PUSH
45651: EMPTY
45652: LIST
45653: LIST
45654: PUSH
45655: LD_INT 1
45657: NEG
45658: PUSH
45659: LD_INT 1
45661: NEG
45662: PUSH
45663: EMPTY
45664: LIST
45665: LIST
45666: PUSH
45667: LD_INT 1
45669: NEG
45670: PUSH
45671: LD_INT 2
45673: NEG
45674: PUSH
45675: EMPTY
45676: LIST
45677: LIST
45678: PUSH
45679: LD_INT 0
45681: PUSH
45682: LD_INT 2
45684: NEG
45685: PUSH
45686: EMPTY
45687: LIST
45688: LIST
45689: PUSH
45690: LD_INT 1
45692: PUSH
45693: LD_INT 1
45695: NEG
45696: PUSH
45697: EMPTY
45698: LIST
45699: LIST
45700: PUSH
45701: LD_INT 2
45703: PUSH
45704: LD_INT 0
45706: PUSH
45707: EMPTY
45708: LIST
45709: LIST
45710: PUSH
45711: LD_INT 2
45713: PUSH
45714: LD_INT 1
45716: PUSH
45717: EMPTY
45718: LIST
45719: LIST
45720: PUSH
45721: LD_INT 2
45723: PUSH
45724: LD_INT 2
45726: PUSH
45727: EMPTY
45728: LIST
45729: LIST
45730: PUSH
45731: LD_INT 1
45733: PUSH
45734: LD_INT 2
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: PUSH
45741: LD_INT 0
45743: PUSH
45744: LD_INT 2
45746: PUSH
45747: EMPTY
45748: LIST
45749: LIST
45750: PUSH
45751: LD_INT 1
45753: NEG
45754: PUSH
45755: LD_INT 1
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: PUSH
45762: LD_INT 2
45764: NEG
45765: PUSH
45766: LD_INT 0
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: PUSH
45773: LD_INT 2
45775: NEG
45776: PUSH
45777: LD_INT 1
45779: NEG
45780: PUSH
45781: EMPTY
45782: LIST
45783: LIST
45784: PUSH
45785: LD_INT 2
45787: NEG
45788: PUSH
45789: LD_INT 2
45791: NEG
45792: PUSH
45793: EMPTY
45794: LIST
45795: LIST
45796: PUSH
45797: EMPTY
45798: LIST
45799: LIST
45800: LIST
45801: LIST
45802: LIST
45803: LIST
45804: LIST
45805: LIST
45806: LIST
45807: LIST
45808: LIST
45809: LIST
45810: LIST
45811: LIST
45812: LIST
45813: LIST
45814: LIST
45815: LIST
45816: LIST
45817: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45818: LD_ADDR_VAR 0 58
45822: PUSH
45823: LD_INT 0
45825: PUSH
45826: LD_INT 0
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: PUSH
45833: LD_INT 0
45835: PUSH
45836: LD_INT 1
45838: NEG
45839: PUSH
45840: EMPTY
45841: LIST
45842: LIST
45843: PUSH
45844: LD_INT 1
45846: PUSH
45847: LD_INT 0
45849: PUSH
45850: EMPTY
45851: LIST
45852: LIST
45853: PUSH
45854: LD_INT 1
45856: PUSH
45857: LD_INT 1
45859: PUSH
45860: EMPTY
45861: LIST
45862: LIST
45863: PUSH
45864: LD_INT 0
45866: PUSH
45867: LD_INT 1
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: PUSH
45874: LD_INT 1
45876: NEG
45877: PUSH
45878: LD_INT 0
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: PUSH
45885: LD_INT 1
45887: NEG
45888: PUSH
45889: LD_INT 1
45891: NEG
45892: PUSH
45893: EMPTY
45894: LIST
45895: LIST
45896: PUSH
45897: LD_INT 1
45899: NEG
45900: PUSH
45901: LD_INT 2
45903: NEG
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: PUSH
45909: LD_INT 0
45911: PUSH
45912: LD_INT 2
45914: NEG
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: PUSH
45920: LD_INT 1
45922: PUSH
45923: LD_INT 1
45925: NEG
45926: PUSH
45927: EMPTY
45928: LIST
45929: LIST
45930: PUSH
45931: LD_INT 2
45933: PUSH
45934: LD_INT 0
45936: PUSH
45937: EMPTY
45938: LIST
45939: LIST
45940: PUSH
45941: LD_INT 2
45943: PUSH
45944: LD_INT 1
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: PUSH
45951: LD_INT 2
45953: PUSH
45954: LD_INT 2
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: PUSH
45961: LD_INT 1
45963: PUSH
45964: LD_INT 2
45966: PUSH
45967: EMPTY
45968: LIST
45969: LIST
45970: PUSH
45971: LD_INT 0
45973: PUSH
45974: LD_INT 2
45976: PUSH
45977: EMPTY
45978: LIST
45979: LIST
45980: PUSH
45981: LD_INT 1
45983: NEG
45984: PUSH
45985: LD_INT 1
45987: PUSH
45988: EMPTY
45989: LIST
45990: LIST
45991: PUSH
45992: LD_INT 2
45994: NEG
45995: PUSH
45996: LD_INT 0
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: PUSH
46003: LD_INT 2
46005: NEG
46006: PUSH
46007: LD_INT 1
46009: NEG
46010: PUSH
46011: EMPTY
46012: LIST
46013: LIST
46014: PUSH
46015: LD_INT 2
46017: NEG
46018: PUSH
46019: LD_INT 2
46021: NEG
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: PUSH
46027: EMPTY
46028: LIST
46029: LIST
46030: LIST
46031: LIST
46032: LIST
46033: LIST
46034: LIST
46035: LIST
46036: LIST
46037: LIST
46038: LIST
46039: LIST
46040: LIST
46041: LIST
46042: LIST
46043: LIST
46044: LIST
46045: LIST
46046: LIST
46047: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46048: LD_ADDR_VAR 0 59
46052: PUSH
46053: LD_INT 0
46055: PUSH
46056: LD_INT 0
46058: PUSH
46059: EMPTY
46060: LIST
46061: LIST
46062: PUSH
46063: LD_INT 0
46065: PUSH
46066: LD_INT 1
46068: NEG
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: PUSH
46074: LD_INT 1
46076: PUSH
46077: LD_INT 0
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: PUSH
46084: LD_INT 1
46086: PUSH
46087: LD_INT 1
46089: PUSH
46090: EMPTY
46091: LIST
46092: LIST
46093: PUSH
46094: LD_INT 0
46096: PUSH
46097: LD_INT 1
46099: PUSH
46100: EMPTY
46101: LIST
46102: LIST
46103: PUSH
46104: LD_INT 1
46106: NEG
46107: PUSH
46108: LD_INT 0
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: PUSH
46115: LD_INT 1
46117: NEG
46118: PUSH
46119: LD_INT 1
46121: NEG
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: LIST
46131: LIST
46132: LIST
46133: LIST
46134: LIST
46135: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46136: LD_ADDR_VAR 0 60
46140: PUSH
46141: LD_INT 0
46143: PUSH
46144: LD_INT 0
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: PUSH
46151: LD_INT 0
46153: PUSH
46154: LD_INT 1
46156: NEG
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: LD_INT 1
46164: PUSH
46165: LD_INT 0
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: PUSH
46172: LD_INT 1
46174: PUSH
46175: LD_INT 1
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: PUSH
46182: LD_INT 0
46184: PUSH
46185: LD_INT 1
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: PUSH
46192: LD_INT 1
46194: NEG
46195: PUSH
46196: LD_INT 0
46198: PUSH
46199: EMPTY
46200: LIST
46201: LIST
46202: PUSH
46203: LD_INT 1
46205: NEG
46206: PUSH
46207: LD_INT 1
46209: NEG
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: PUSH
46215: EMPTY
46216: LIST
46217: LIST
46218: LIST
46219: LIST
46220: LIST
46221: LIST
46222: LIST
46223: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46224: LD_ADDR_VAR 0 61
46228: PUSH
46229: LD_INT 0
46231: PUSH
46232: LD_INT 0
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PUSH
46239: LD_INT 0
46241: PUSH
46242: LD_INT 1
46244: NEG
46245: PUSH
46246: EMPTY
46247: LIST
46248: LIST
46249: PUSH
46250: LD_INT 1
46252: PUSH
46253: LD_INT 0
46255: PUSH
46256: EMPTY
46257: LIST
46258: LIST
46259: PUSH
46260: LD_INT 1
46262: PUSH
46263: LD_INT 1
46265: PUSH
46266: EMPTY
46267: LIST
46268: LIST
46269: PUSH
46270: LD_INT 0
46272: PUSH
46273: LD_INT 1
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: PUSH
46280: LD_INT 1
46282: NEG
46283: PUSH
46284: LD_INT 0
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: PUSH
46291: LD_INT 1
46293: NEG
46294: PUSH
46295: LD_INT 1
46297: NEG
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: PUSH
46303: EMPTY
46304: LIST
46305: LIST
46306: LIST
46307: LIST
46308: LIST
46309: LIST
46310: LIST
46311: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46312: LD_ADDR_VAR 0 62
46316: PUSH
46317: LD_INT 0
46319: PUSH
46320: LD_INT 0
46322: PUSH
46323: EMPTY
46324: LIST
46325: LIST
46326: PUSH
46327: LD_INT 0
46329: PUSH
46330: LD_INT 1
46332: NEG
46333: PUSH
46334: EMPTY
46335: LIST
46336: LIST
46337: PUSH
46338: LD_INT 1
46340: PUSH
46341: LD_INT 0
46343: PUSH
46344: EMPTY
46345: LIST
46346: LIST
46347: PUSH
46348: LD_INT 1
46350: PUSH
46351: LD_INT 1
46353: PUSH
46354: EMPTY
46355: LIST
46356: LIST
46357: PUSH
46358: LD_INT 0
46360: PUSH
46361: LD_INT 1
46363: PUSH
46364: EMPTY
46365: LIST
46366: LIST
46367: PUSH
46368: LD_INT 1
46370: NEG
46371: PUSH
46372: LD_INT 0
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: PUSH
46379: LD_INT 1
46381: NEG
46382: PUSH
46383: LD_INT 1
46385: NEG
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: LIST
46395: LIST
46396: LIST
46397: LIST
46398: LIST
46399: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46400: LD_ADDR_VAR 0 63
46404: PUSH
46405: LD_INT 0
46407: PUSH
46408: LD_INT 0
46410: PUSH
46411: EMPTY
46412: LIST
46413: LIST
46414: PUSH
46415: LD_INT 0
46417: PUSH
46418: LD_INT 1
46420: NEG
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: PUSH
46426: LD_INT 1
46428: PUSH
46429: LD_INT 0
46431: PUSH
46432: EMPTY
46433: LIST
46434: LIST
46435: PUSH
46436: LD_INT 1
46438: PUSH
46439: LD_INT 1
46441: PUSH
46442: EMPTY
46443: LIST
46444: LIST
46445: PUSH
46446: LD_INT 0
46448: PUSH
46449: LD_INT 1
46451: PUSH
46452: EMPTY
46453: LIST
46454: LIST
46455: PUSH
46456: LD_INT 1
46458: NEG
46459: PUSH
46460: LD_INT 0
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PUSH
46467: LD_INT 1
46469: NEG
46470: PUSH
46471: LD_INT 1
46473: NEG
46474: PUSH
46475: EMPTY
46476: LIST
46477: LIST
46478: PUSH
46479: EMPTY
46480: LIST
46481: LIST
46482: LIST
46483: LIST
46484: LIST
46485: LIST
46486: LIST
46487: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46488: LD_ADDR_VAR 0 64
46492: PUSH
46493: LD_INT 0
46495: PUSH
46496: LD_INT 0
46498: PUSH
46499: EMPTY
46500: LIST
46501: LIST
46502: PUSH
46503: LD_INT 0
46505: PUSH
46506: LD_INT 1
46508: NEG
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: PUSH
46514: LD_INT 1
46516: PUSH
46517: LD_INT 0
46519: PUSH
46520: EMPTY
46521: LIST
46522: LIST
46523: PUSH
46524: LD_INT 1
46526: PUSH
46527: LD_INT 1
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: PUSH
46534: LD_INT 0
46536: PUSH
46537: LD_INT 1
46539: PUSH
46540: EMPTY
46541: LIST
46542: LIST
46543: PUSH
46544: LD_INT 1
46546: NEG
46547: PUSH
46548: LD_INT 0
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: PUSH
46555: LD_INT 1
46557: NEG
46558: PUSH
46559: LD_INT 1
46561: NEG
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: LIST
46571: LIST
46572: LIST
46573: LIST
46574: LIST
46575: ST_TO_ADDR
// end ; 1 :
46576: GO 52473
46578: LD_INT 1
46580: DOUBLE
46581: EQUAL
46582: IFTRUE 46586
46584: GO 49209
46586: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46587: LD_ADDR_VAR 0 11
46591: PUSH
46592: LD_INT 1
46594: NEG
46595: PUSH
46596: LD_INT 3
46598: NEG
46599: PUSH
46600: EMPTY
46601: LIST
46602: LIST
46603: PUSH
46604: LD_INT 0
46606: PUSH
46607: LD_INT 3
46609: NEG
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: PUSH
46615: LD_INT 1
46617: PUSH
46618: LD_INT 2
46620: NEG
46621: PUSH
46622: EMPTY
46623: LIST
46624: LIST
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: LIST
46630: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46631: LD_ADDR_VAR 0 12
46635: PUSH
46636: LD_INT 2
46638: PUSH
46639: LD_INT 1
46641: NEG
46642: PUSH
46643: EMPTY
46644: LIST
46645: LIST
46646: PUSH
46647: LD_INT 3
46649: PUSH
46650: LD_INT 0
46652: PUSH
46653: EMPTY
46654: LIST
46655: LIST
46656: PUSH
46657: LD_INT 3
46659: PUSH
46660: LD_INT 1
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: LIST
46671: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46672: LD_ADDR_VAR 0 13
46676: PUSH
46677: LD_INT 3
46679: PUSH
46680: LD_INT 2
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PUSH
46687: LD_INT 3
46689: PUSH
46690: LD_INT 3
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: LD_INT 2
46699: PUSH
46700: LD_INT 3
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: LIST
46711: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46712: LD_ADDR_VAR 0 14
46716: PUSH
46717: LD_INT 1
46719: PUSH
46720: LD_INT 3
46722: PUSH
46723: EMPTY
46724: LIST
46725: LIST
46726: PUSH
46727: LD_INT 0
46729: PUSH
46730: LD_INT 3
46732: PUSH
46733: EMPTY
46734: LIST
46735: LIST
46736: PUSH
46737: LD_INT 1
46739: NEG
46740: PUSH
46741: LD_INT 2
46743: PUSH
46744: EMPTY
46745: LIST
46746: LIST
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: LIST
46752: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46753: LD_ADDR_VAR 0 15
46757: PUSH
46758: LD_INT 2
46760: NEG
46761: PUSH
46762: LD_INT 1
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: PUSH
46769: LD_INT 3
46771: NEG
46772: PUSH
46773: LD_INT 0
46775: PUSH
46776: EMPTY
46777: LIST
46778: LIST
46779: PUSH
46780: LD_INT 3
46782: NEG
46783: PUSH
46784: LD_INT 1
46786: NEG
46787: PUSH
46788: EMPTY
46789: LIST
46790: LIST
46791: PUSH
46792: EMPTY
46793: LIST
46794: LIST
46795: LIST
46796: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46797: LD_ADDR_VAR 0 16
46801: PUSH
46802: LD_INT 2
46804: NEG
46805: PUSH
46806: LD_INT 3
46808: NEG
46809: PUSH
46810: EMPTY
46811: LIST
46812: LIST
46813: PUSH
46814: LD_INT 3
46816: NEG
46817: PUSH
46818: LD_INT 2
46820: NEG
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: PUSH
46826: LD_INT 3
46828: NEG
46829: PUSH
46830: LD_INT 3
46832: NEG
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: LIST
46842: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46843: LD_ADDR_VAR 0 17
46847: PUSH
46848: LD_INT 1
46850: NEG
46851: PUSH
46852: LD_INT 3
46854: NEG
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: LD_INT 0
46862: PUSH
46863: LD_INT 3
46865: NEG
46866: PUSH
46867: EMPTY
46868: LIST
46869: LIST
46870: PUSH
46871: LD_INT 1
46873: PUSH
46874: LD_INT 2
46876: NEG
46877: PUSH
46878: EMPTY
46879: LIST
46880: LIST
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: LIST
46886: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46887: LD_ADDR_VAR 0 18
46891: PUSH
46892: LD_INT 2
46894: PUSH
46895: LD_INT 1
46897: NEG
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: PUSH
46903: LD_INT 3
46905: PUSH
46906: LD_INT 0
46908: PUSH
46909: EMPTY
46910: LIST
46911: LIST
46912: PUSH
46913: LD_INT 3
46915: PUSH
46916: LD_INT 1
46918: PUSH
46919: EMPTY
46920: LIST
46921: LIST
46922: PUSH
46923: EMPTY
46924: LIST
46925: LIST
46926: LIST
46927: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46928: LD_ADDR_VAR 0 19
46932: PUSH
46933: LD_INT 3
46935: PUSH
46936: LD_INT 2
46938: PUSH
46939: EMPTY
46940: LIST
46941: LIST
46942: PUSH
46943: LD_INT 3
46945: PUSH
46946: LD_INT 3
46948: PUSH
46949: EMPTY
46950: LIST
46951: LIST
46952: PUSH
46953: LD_INT 2
46955: PUSH
46956: LD_INT 3
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: LIST
46967: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46968: LD_ADDR_VAR 0 20
46972: PUSH
46973: LD_INT 1
46975: PUSH
46976: LD_INT 3
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: PUSH
46983: LD_INT 0
46985: PUSH
46986: LD_INT 3
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: PUSH
46993: LD_INT 1
46995: NEG
46996: PUSH
46997: LD_INT 2
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: PUSH
47004: EMPTY
47005: LIST
47006: LIST
47007: LIST
47008: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47009: LD_ADDR_VAR 0 21
47013: PUSH
47014: LD_INT 2
47016: NEG
47017: PUSH
47018: LD_INT 1
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: PUSH
47025: LD_INT 3
47027: NEG
47028: PUSH
47029: LD_INT 0
47031: PUSH
47032: EMPTY
47033: LIST
47034: LIST
47035: PUSH
47036: LD_INT 3
47038: NEG
47039: PUSH
47040: LD_INT 1
47042: NEG
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: PUSH
47048: EMPTY
47049: LIST
47050: LIST
47051: LIST
47052: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47053: LD_ADDR_VAR 0 22
47057: PUSH
47058: LD_INT 2
47060: NEG
47061: PUSH
47062: LD_INT 3
47064: NEG
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: PUSH
47070: LD_INT 3
47072: NEG
47073: PUSH
47074: LD_INT 2
47076: NEG
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: PUSH
47082: LD_INT 3
47084: NEG
47085: PUSH
47086: LD_INT 3
47088: NEG
47089: PUSH
47090: EMPTY
47091: LIST
47092: LIST
47093: PUSH
47094: EMPTY
47095: LIST
47096: LIST
47097: LIST
47098: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
47099: LD_ADDR_VAR 0 23
47103: PUSH
47104: LD_INT 0
47106: PUSH
47107: LD_INT 3
47109: NEG
47110: PUSH
47111: EMPTY
47112: LIST
47113: LIST
47114: PUSH
47115: LD_INT 1
47117: NEG
47118: PUSH
47119: LD_INT 4
47121: NEG
47122: PUSH
47123: EMPTY
47124: LIST
47125: LIST
47126: PUSH
47127: LD_INT 1
47129: PUSH
47130: LD_INT 3
47132: NEG
47133: PUSH
47134: EMPTY
47135: LIST
47136: LIST
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: LIST
47142: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
47143: LD_ADDR_VAR 0 24
47147: PUSH
47148: LD_INT 3
47150: PUSH
47151: LD_INT 0
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: PUSH
47158: LD_INT 3
47160: PUSH
47161: LD_INT 1
47163: NEG
47164: PUSH
47165: EMPTY
47166: LIST
47167: LIST
47168: PUSH
47169: LD_INT 4
47171: PUSH
47172: LD_INT 1
47174: PUSH
47175: EMPTY
47176: LIST
47177: LIST
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: LIST
47183: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
47184: LD_ADDR_VAR 0 25
47188: PUSH
47189: LD_INT 3
47191: PUSH
47192: LD_INT 3
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: PUSH
47199: LD_INT 4
47201: PUSH
47202: LD_INT 3
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: LD_INT 3
47211: PUSH
47212: LD_INT 4
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: LIST
47223: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
47224: LD_ADDR_VAR 0 26
47228: PUSH
47229: LD_INT 0
47231: PUSH
47232: LD_INT 3
47234: PUSH
47235: EMPTY
47236: LIST
47237: LIST
47238: PUSH
47239: LD_INT 1
47241: PUSH
47242: LD_INT 4
47244: PUSH
47245: EMPTY
47246: LIST
47247: LIST
47248: PUSH
47249: LD_INT 1
47251: NEG
47252: PUSH
47253: LD_INT 3
47255: PUSH
47256: EMPTY
47257: LIST
47258: LIST
47259: PUSH
47260: EMPTY
47261: LIST
47262: LIST
47263: LIST
47264: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
47265: LD_ADDR_VAR 0 27
47269: PUSH
47270: LD_INT 3
47272: NEG
47273: PUSH
47274: LD_INT 0
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: PUSH
47281: LD_INT 3
47283: NEG
47284: PUSH
47285: LD_INT 1
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: PUSH
47292: LD_INT 4
47294: NEG
47295: PUSH
47296: LD_INT 1
47298: NEG
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: LIST
47308: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
47309: LD_ADDR_VAR 0 28
47313: PUSH
47314: LD_INT 3
47316: NEG
47317: PUSH
47318: LD_INT 3
47320: NEG
47321: PUSH
47322: EMPTY
47323: LIST
47324: LIST
47325: PUSH
47326: LD_INT 3
47328: NEG
47329: PUSH
47330: LD_INT 4
47332: NEG
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: PUSH
47338: LD_INT 4
47340: NEG
47341: PUSH
47342: LD_INT 3
47344: NEG
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: LIST
47354: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
47355: LD_ADDR_VAR 0 29
47359: PUSH
47360: LD_INT 1
47362: NEG
47363: PUSH
47364: LD_INT 3
47366: NEG
47367: PUSH
47368: EMPTY
47369: LIST
47370: LIST
47371: PUSH
47372: LD_INT 0
47374: PUSH
47375: LD_INT 3
47377: NEG
47378: PUSH
47379: EMPTY
47380: LIST
47381: LIST
47382: PUSH
47383: LD_INT 1
47385: PUSH
47386: LD_INT 2
47388: NEG
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: PUSH
47394: LD_INT 1
47396: NEG
47397: PUSH
47398: LD_INT 4
47400: NEG
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: PUSH
47406: LD_INT 0
47408: PUSH
47409: LD_INT 4
47411: NEG
47412: PUSH
47413: EMPTY
47414: LIST
47415: LIST
47416: PUSH
47417: LD_INT 1
47419: PUSH
47420: LD_INT 3
47422: NEG
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: PUSH
47428: LD_INT 1
47430: NEG
47431: PUSH
47432: LD_INT 5
47434: NEG
47435: PUSH
47436: EMPTY
47437: LIST
47438: LIST
47439: PUSH
47440: LD_INT 0
47442: PUSH
47443: LD_INT 5
47445: NEG
47446: PUSH
47447: EMPTY
47448: LIST
47449: LIST
47450: PUSH
47451: LD_INT 1
47453: PUSH
47454: LD_INT 4
47456: NEG
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: PUSH
47462: LD_INT 1
47464: NEG
47465: PUSH
47466: LD_INT 6
47468: NEG
47469: PUSH
47470: EMPTY
47471: LIST
47472: LIST
47473: PUSH
47474: LD_INT 0
47476: PUSH
47477: LD_INT 6
47479: NEG
47480: PUSH
47481: EMPTY
47482: LIST
47483: LIST
47484: PUSH
47485: LD_INT 1
47487: PUSH
47488: LD_INT 5
47490: NEG
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: PUSH
47496: EMPTY
47497: LIST
47498: LIST
47499: LIST
47500: LIST
47501: LIST
47502: LIST
47503: LIST
47504: LIST
47505: LIST
47506: LIST
47507: LIST
47508: LIST
47509: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
47510: LD_ADDR_VAR 0 30
47514: PUSH
47515: LD_INT 2
47517: PUSH
47518: LD_INT 1
47520: NEG
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: PUSH
47526: LD_INT 3
47528: PUSH
47529: LD_INT 0
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: PUSH
47536: LD_INT 3
47538: PUSH
47539: LD_INT 1
47541: PUSH
47542: EMPTY
47543: LIST
47544: LIST
47545: PUSH
47546: LD_INT 3
47548: PUSH
47549: LD_INT 1
47551: NEG
47552: PUSH
47553: EMPTY
47554: LIST
47555: LIST
47556: PUSH
47557: LD_INT 4
47559: PUSH
47560: LD_INT 0
47562: PUSH
47563: EMPTY
47564: LIST
47565: LIST
47566: PUSH
47567: LD_INT 4
47569: PUSH
47570: LD_INT 1
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: PUSH
47577: LD_INT 4
47579: PUSH
47580: LD_INT 1
47582: NEG
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: PUSH
47588: LD_INT 5
47590: PUSH
47591: LD_INT 0
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: PUSH
47598: LD_INT 5
47600: PUSH
47601: LD_INT 1
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: PUSH
47608: LD_INT 5
47610: PUSH
47611: LD_INT 1
47613: NEG
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: PUSH
47619: LD_INT 6
47621: PUSH
47622: LD_INT 0
47624: PUSH
47625: EMPTY
47626: LIST
47627: LIST
47628: PUSH
47629: LD_INT 6
47631: PUSH
47632: LD_INT 1
47634: PUSH
47635: EMPTY
47636: LIST
47637: LIST
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: LIST
47643: LIST
47644: LIST
47645: LIST
47646: LIST
47647: LIST
47648: LIST
47649: LIST
47650: LIST
47651: LIST
47652: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
47653: LD_ADDR_VAR 0 31
47657: PUSH
47658: LD_INT 3
47660: PUSH
47661: LD_INT 2
47663: PUSH
47664: EMPTY
47665: LIST
47666: LIST
47667: PUSH
47668: LD_INT 3
47670: PUSH
47671: LD_INT 3
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: PUSH
47678: LD_INT 2
47680: PUSH
47681: LD_INT 3
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: PUSH
47688: LD_INT 4
47690: PUSH
47691: LD_INT 3
47693: PUSH
47694: EMPTY
47695: LIST
47696: LIST
47697: PUSH
47698: LD_INT 4
47700: PUSH
47701: LD_INT 4
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: PUSH
47708: LD_INT 3
47710: PUSH
47711: LD_INT 4
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: PUSH
47718: LD_INT 5
47720: PUSH
47721: LD_INT 4
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: PUSH
47728: LD_INT 5
47730: PUSH
47731: LD_INT 5
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: PUSH
47738: LD_INT 4
47740: PUSH
47741: LD_INT 5
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: PUSH
47748: LD_INT 6
47750: PUSH
47751: LD_INT 5
47753: PUSH
47754: EMPTY
47755: LIST
47756: LIST
47757: PUSH
47758: LD_INT 6
47760: PUSH
47761: LD_INT 6
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: PUSH
47768: LD_INT 5
47770: PUSH
47771: LD_INT 6
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: LIST
47782: LIST
47783: LIST
47784: LIST
47785: LIST
47786: LIST
47787: LIST
47788: LIST
47789: LIST
47790: LIST
47791: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
47792: LD_ADDR_VAR 0 32
47796: PUSH
47797: LD_INT 1
47799: PUSH
47800: LD_INT 3
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: PUSH
47807: LD_INT 0
47809: PUSH
47810: LD_INT 3
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: LD_INT 1
47819: NEG
47820: PUSH
47821: LD_INT 2
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: PUSH
47828: LD_INT 1
47830: PUSH
47831: LD_INT 4
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: PUSH
47838: LD_INT 0
47840: PUSH
47841: LD_INT 4
47843: PUSH
47844: EMPTY
47845: LIST
47846: LIST
47847: PUSH
47848: LD_INT 1
47850: NEG
47851: PUSH
47852: LD_INT 3
47854: PUSH
47855: EMPTY
47856: LIST
47857: LIST
47858: PUSH
47859: LD_INT 1
47861: PUSH
47862: LD_INT 5
47864: PUSH
47865: EMPTY
47866: LIST
47867: LIST
47868: PUSH
47869: LD_INT 0
47871: PUSH
47872: LD_INT 5
47874: PUSH
47875: EMPTY
47876: LIST
47877: LIST
47878: PUSH
47879: LD_INT 1
47881: NEG
47882: PUSH
47883: LD_INT 4
47885: PUSH
47886: EMPTY
47887: LIST
47888: LIST
47889: PUSH
47890: LD_INT 1
47892: PUSH
47893: LD_INT 6
47895: PUSH
47896: EMPTY
47897: LIST
47898: LIST
47899: PUSH
47900: LD_INT 0
47902: PUSH
47903: LD_INT 6
47905: PUSH
47906: EMPTY
47907: LIST
47908: LIST
47909: PUSH
47910: LD_INT 1
47912: NEG
47913: PUSH
47914: LD_INT 5
47916: PUSH
47917: EMPTY
47918: LIST
47919: LIST
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: LIST
47933: LIST
47934: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
47935: LD_ADDR_VAR 0 33
47939: PUSH
47940: LD_INT 2
47942: NEG
47943: PUSH
47944: LD_INT 1
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: PUSH
47951: LD_INT 3
47953: NEG
47954: PUSH
47955: LD_INT 0
47957: PUSH
47958: EMPTY
47959: LIST
47960: LIST
47961: PUSH
47962: LD_INT 3
47964: NEG
47965: PUSH
47966: LD_INT 1
47968: NEG
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: LD_INT 3
47976: NEG
47977: PUSH
47978: LD_INT 1
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: PUSH
47985: LD_INT 4
47987: NEG
47988: PUSH
47989: LD_INT 0
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: PUSH
47996: LD_INT 4
47998: NEG
47999: PUSH
48000: LD_INT 1
48002: NEG
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: PUSH
48008: LD_INT 4
48010: NEG
48011: PUSH
48012: LD_INT 1
48014: PUSH
48015: EMPTY
48016: LIST
48017: LIST
48018: PUSH
48019: LD_INT 5
48021: NEG
48022: PUSH
48023: LD_INT 0
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: PUSH
48030: LD_INT 5
48032: NEG
48033: PUSH
48034: LD_INT 1
48036: NEG
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: PUSH
48042: LD_INT 5
48044: NEG
48045: PUSH
48046: LD_INT 1
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: PUSH
48053: LD_INT 6
48055: NEG
48056: PUSH
48057: LD_INT 0
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PUSH
48064: LD_INT 6
48066: NEG
48067: PUSH
48068: LD_INT 1
48070: NEG
48071: PUSH
48072: EMPTY
48073: LIST
48074: LIST
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: LIST
48080: LIST
48081: LIST
48082: LIST
48083: LIST
48084: LIST
48085: LIST
48086: LIST
48087: LIST
48088: LIST
48089: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
48090: LD_ADDR_VAR 0 34
48094: PUSH
48095: LD_INT 2
48097: NEG
48098: PUSH
48099: LD_INT 3
48101: NEG
48102: PUSH
48103: EMPTY
48104: LIST
48105: LIST
48106: PUSH
48107: LD_INT 3
48109: NEG
48110: PUSH
48111: LD_INT 2
48113: NEG
48114: PUSH
48115: EMPTY
48116: LIST
48117: LIST
48118: PUSH
48119: LD_INT 3
48121: NEG
48122: PUSH
48123: LD_INT 3
48125: NEG
48126: PUSH
48127: EMPTY
48128: LIST
48129: LIST
48130: PUSH
48131: LD_INT 3
48133: NEG
48134: PUSH
48135: LD_INT 4
48137: NEG
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: PUSH
48143: LD_INT 4
48145: NEG
48146: PUSH
48147: LD_INT 3
48149: NEG
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: PUSH
48155: LD_INT 4
48157: NEG
48158: PUSH
48159: LD_INT 4
48161: NEG
48162: PUSH
48163: EMPTY
48164: LIST
48165: LIST
48166: PUSH
48167: LD_INT 4
48169: NEG
48170: PUSH
48171: LD_INT 5
48173: NEG
48174: PUSH
48175: EMPTY
48176: LIST
48177: LIST
48178: PUSH
48179: LD_INT 5
48181: NEG
48182: PUSH
48183: LD_INT 4
48185: NEG
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: PUSH
48191: LD_INT 5
48193: NEG
48194: PUSH
48195: LD_INT 5
48197: NEG
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: PUSH
48203: LD_INT 5
48205: NEG
48206: PUSH
48207: LD_INT 6
48209: NEG
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: PUSH
48215: LD_INT 6
48217: NEG
48218: PUSH
48219: LD_INT 5
48221: NEG
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: PUSH
48227: LD_INT 6
48229: NEG
48230: PUSH
48231: LD_INT 6
48233: NEG
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: LIST
48243: LIST
48244: LIST
48245: LIST
48246: LIST
48247: LIST
48248: LIST
48249: LIST
48250: LIST
48251: LIST
48252: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
48253: LD_ADDR_VAR 0 41
48257: PUSH
48258: LD_INT 0
48260: PUSH
48261: LD_INT 2
48263: NEG
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: PUSH
48269: LD_INT 1
48271: NEG
48272: PUSH
48273: LD_INT 3
48275: NEG
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: PUSH
48281: LD_INT 1
48283: PUSH
48284: LD_INT 2
48286: NEG
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: PUSH
48292: EMPTY
48293: LIST
48294: LIST
48295: LIST
48296: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
48297: LD_ADDR_VAR 0 42
48301: PUSH
48302: LD_INT 2
48304: PUSH
48305: LD_INT 0
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PUSH
48312: LD_INT 2
48314: PUSH
48315: LD_INT 1
48317: NEG
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: LD_INT 3
48325: PUSH
48326: LD_INT 1
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: LIST
48337: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
48338: LD_ADDR_VAR 0 43
48342: PUSH
48343: LD_INT 2
48345: PUSH
48346: LD_INT 2
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: PUSH
48353: LD_INT 3
48355: PUSH
48356: LD_INT 2
48358: PUSH
48359: EMPTY
48360: LIST
48361: LIST
48362: PUSH
48363: LD_INT 2
48365: PUSH
48366: LD_INT 3
48368: PUSH
48369: EMPTY
48370: LIST
48371: LIST
48372: PUSH
48373: EMPTY
48374: LIST
48375: LIST
48376: LIST
48377: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
48378: LD_ADDR_VAR 0 44
48382: PUSH
48383: LD_INT 0
48385: PUSH
48386: LD_INT 2
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: PUSH
48393: LD_INT 1
48395: PUSH
48396: LD_INT 3
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: PUSH
48403: LD_INT 1
48405: NEG
48406: PUSH
48407: LD_INT 2
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: PUSH
48414: EMPTY
48415: LIST
48416: LIST
48417: LIST
48418: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48419: LD_ADDR_VAR 0 45
48423: PUSH
48424: LD_INT 2
48426: NEG
48427: PUSH
48428: LD_INT 0
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: LD_INT 2
48437: NEG
48438: PUSH
48439: LD_INT 1
48441: PUSH
48442: EMPTY
48443: LIST
48444: LIST
48445: PUSH
48446: LD_INT 3
48448: NEG
48449: PUSH
48450: LD_INT 1
48452: NEG
48453: PUSH
48454: EMPTY
48455: LIST
48456: LIST
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: LIST
48462: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
48463: LD_ADDR_VAR 0 46
48467: PUSH
48468: LD_INT 2
48470: NEG
48471: PUSH
48472: LD_INT 2
48474: NEG
48475: PUSH
48476: EMPTY
48477: LIST
48478: LIST
48479: PUSH
48480: LD_INT 2
48482: NEG
48483: PUSH
48484: LD_INT 3
48486: NEG
48487: PUSH
48488: EMPTY
48489: LIST
48490: LIST
48491: PUSH
48492: LD_INT 3
48494: NEG
48495: PUSH
48496: LD_INT 2
48498: NEG
48499: PUSH
48500: EMPTY
48501: LIST
48502: LIST
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: LIST
48508: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
48509: LD_ADDR_VAR 0 47
48513: PUSH
48514: LD_INT 2
48516: NEG
48517: PUSH
48518: LD_INT 3
48520: NEG
48521: PUSH
48522: EMPTY
48523: LIST
48524: LIST
48525: PUSH
48526: LD_INT 1
48528: NEG
48529: PUSH
48530: LD_INT 3
48532: NEG
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48542: LD_ADDR_VAR 0 48
48546: PUSH
48547: LD_INT 1
48549: PUSH
48550: LD_INT 2
48552: NEG
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: PUSH
48558: LD_INT 2
48560: PUSH
48561: LD_INT 1
48563: NEG
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
48573: LD_ADDR_VAR 0 49
48577: PUSH
48578: LD_INT 3
48580: PUSH
48581: LD_INT 1
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: PUSH
48588: LD_INT 3
48590: PUSH
48591: LD_INT 2
48593: PUSH
48594: EMPTY
48595: LIST
48596: LIST
48597: PUSH
48598: EMPTY
48599: LIST
48600: LIST
48601: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
48602: LD_ADDR_VAR 0 50
48606: PUSH
48607: LD_INT 2
48609: PUSH
48610: LD_INT 3
48612: PUSH
48613: EMPTY
48614: LIST
48615: LIST
48616: PUSH
48617: LD_INT 1
48619: PUSH
48620: LD_INT 3
48622: PUSH
48623: EMPTY
48624: LIST
48625: LIST
48626: PUSH
48627: EMPTY
48628: LIST
48629: LIST
48630: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48631: LD_ADDR_VAR 0 51
48635: PUSH
48636: LD_INT 1
48638: NEG
48639: PUSH
48640: LD_INT 2
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: LD_INT 2
48649: NEG
48650: PUSH
48651: LD_INT 1
48653: PUSH
48654: EMPTY
48655: LIST
48656: LIST
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48662: LD_ADDR_VAR 0 52
48666: PUSH
48667: LD_INT 3
48669: NEG
48670: PUSH
48671: LD_INT 1
48673: NEG
48674: PUSH
48675: EMPTY
48676: LIST
48677: LIST
48678: PUSH
48679: LD_INT 3
48681: NEG
48682: PUSH
48683: LD_INT 2
48685: NEG
48686: PUSH
48687: EMPTY
48688: LIST
48689: LIST
48690: PUSH
48691: EMPTY
48692: LIST
48693: LIST
48694: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48695: LD_ADDR_VAR 0 53
48699: PUSH
48700: LD_INT 1
48702: NEG
48703: PUSH
48704: LD_INT 3
48706: NEG
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: PUSH
48712: LD_INT 0
48714: PUSH
48715: LD_INT 3
48717: NEG
48718: PUSH
48719: EMPTY
48720: LIST
48721: LIST
48722: PUSH
48723: LD_INT 1
48725: PUSH
48726: LD_INT 2
48728: NEG
48729: PUSH
48730: EMPTY
48731: LIST
48732: LIST
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: LIST
48738: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48739: LD_ADDR_VAR 0 54
48743: PUSH
48744: LD_INT 2
48746: PUSH
48747: LD_INT 1
48749: NEG
48750: PUSH
48751: EMPTY
48752: LIST
48753: LIST
48754: PUSH
48755: LD_INT 3
48757: PUSH
48758: LD_INT 0
48760: PUSH
48761: EMPTY
48762: LIST
48763: LIST
48764: PUSH
48765: LD_INT 3
48767: PUSH
48768: LD_INT 1
48770: PUSH
48771: EMPTY
48772: LIST
48773: LIST
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: LIST
48779: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48780: LD_ADDR_VAR 0 55
48784: PUSH
48785: LD_INT 3
48787: PUSH
48788: LD_INT 2
48790: PUSH
48791: EMPTY
48792: LIST
48793: LIST
48794: PUSH
48795: LD_INT 3
48797: PUSH
48798: LD_INT 3
48800: PUSH
48801: EMPTY
48802: LIST
48803: LIST
48804: PUSH
48805: LD_INT 2
48807: PUSH
48808: LD_INT 3
48810: PUSH
48811: EMPTY
48812: LIST
48813: LIST
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: LIST
48819: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48820: LD_ADDR_VAR 0 56
48824: PUSH
48825: LD_INT 1
48827: PUSH
48828: LD_INT 3
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: PUSH
48835: LD_INT 0
48837: PUSH
48838: LD_INT 3
48840: PUSH
48841: EMPTY
48842: LIST
48843: LIST
48844: PUSH
48845: LD_INT 1
48847: NEG
48848: PUSH
48849: LD_INT 2
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: LIST
48860: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48861: LD_ADDR_VAR 0 57
48865: PUSH
48866: LD_INT 2
48868: NEG
48869: PUSH
48870: LD_INT 1
48872: PUSH
48873: EMPTY
48874: LIST
48875: LIST
48876: PUSH
48877: LD_INT 3
48879: NEG
48880: PUSH
48881: LD_INT 0
48883: PUSH
48884: EMPTY
48885: LIST
48886: LIST
48887: PUSH
48888: LD_INT 3
48890: NEG
48891: PUSH
48892: LD_INT 1
48894: NEG
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: PUSH
48900: EMPTY
48901: LIST
48902: LIST
48903: LIST
48904: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48905: LD_ADDR_VAR 0 58
48909: PUSH
48910: LD_INT 2
48912: NEG
48913: PUSH
48914: LD_INT 3
48916: NEG
48917: PUSH
48918: EMPTY
48919: LIST
48920: LIST
48921: PUSH
48922: LD_INT 3
48924: NEG
48925: PUSH
48926: LD_INT 2
48928: NEG
48929: PUSH
48930: EMPTY
48931: LIST
48932: LIST
48933: PUSH
48934: LD_INT 3
48936: NEG
48937: PUSH
48938: LD_INT 3
48940: NEG
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: EMPTY
48947: LIST
48948: LIST
48949: LIST
48950: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
48951: LD_ADDR_VAR 0 59
48955: PUSH
48956: LD_INT 1
48958: NEG
48959: PUSH
48960: LD_INT 2
48962: NEG
48963: PUSH
48964: EMPTY
48965: LIST
48966: LIST
48967: PUSH
48968: LD_INT 0
48970: PUSH
48971: LD_INT 2
48973: NEG
48974: PUSH
48975: EMPTY
48976: LIST
48977: LIST
48978: PUSH
48979: LD_INT 1
48981: PUSH
48982: LD_INT 1
48984: NEG
48985: PUSH
48986: EMPTY
48987: LIST
48988: LIST
48989: PUSH
48990: EMPTY
48991: LIST
48992: LIST
48993: LIST
48994: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48995: LD_ADDR_VAR 0 60
48999: PUSH
49000: LD_INT 1
49002: PUSH
49003: LD_INT 1
49005: NEG
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: PUSH
49011: LD_INT 2
49013: PUSH
49014: LD_INT 0
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: PUSH
49021: LD_INT 2
49023: PUSH
49024: LD_INT 1
49026: PUSH
49027: EMPTY
49028: LIST
49029: LIST
49030: PUSH
49031: EMPTY
49032: LIST
49033: LIST
49034: LIST
49035: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49036: LD_ADDR_VAR 0 61
49040: PUSH
49041: LD_INT 2
49043: PUSH
49044: LD_INT 1
49046: PUSH
49047: EMPTY
49048: LIST
49049: LIST
49050: PUSH
49051: LD_INT 2
49053: PUSH
49054: LD_INT 2
49056: PUSH
49057: EMPTY
49058: LIST
49059: LIST
49060: PUSH
49061: LD_INT 1
49063: PUSH
49064: LD_INT 2
49066: PUSH
49067: EMPTY
49068: LIST
49069: LIST
49070: PUSH
49071: EMPTY
49072: LIST
49073: LIST
49074: LIST
49075: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49076: LD_ADDR_VAR 0 62
49080: PUSH
49081: LD_INT 1
49083: PUSH
49084: LD_INT 2
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: PUSH
49091: LD_INT 0
49093: PUSH
49094: LD_INT 2
49096: PUSH
49097: EMPTY
49098: LIST
49099: LIST
49100: PUSH
49101: LD_INT 1
49103: NEG
49104: PUSH
49105: LD_INT 1
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: PUSH
49112: EMPTY
49113: LIST
49114: LIST
49115: LIST
49116: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49117: LD_ADDR_VAR 0 63
49121: PUSH
49122: LD_INT 1
49124: NEG
49125: PUSH
49126: LD_INT 1
49128: PUSH
49129: EMPTY
49130: LIST
49131: LIST
49132: PUSH
49133: LD_INT 2
49135: NEG
49136: PUSH
49137: LD_INT 0
49139: PUSH
49140: EMPTY
49141: LIST
49142: LIST
49143: PUSH
49144: LD_INT 2
49146: NEG
49147: PUSH
49148: LD_INT 1
49150: NEG
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: PUSH
49156: EMPTY
49157: LIST
49158: LIST
49159: LIST
49160: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49161: LD_ADDR_VAR 0 64
49165: PUSH
49166: LD_INT 1
49168: NEG
49169: PUSH
49170: LD_INT 2
49172: NEG
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: PUSH
49178: LD_INT 2
49180: NEG
49181: PUSH
49182: LD_INT 1
49184: NEG
49185: PUSH
49186: EMPTY
49187: LIST
49188: LIST
49189: PUSH
49190: LD_INT 2
49192: NEG
49193: PUSH
49194: LD_INT 2
49196: NEG
49197: PUSH
49198: EMPTY
49199: LIST
49200: LIST
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: LIST
49206: ST_TO_ADDR
// end ; 2 :
49207: GO 52473
49209: LD_INT 2
49211: DOUBLE
49212: EQUAL
49213: IFTRUE 49217
49215: GO 52472
49217: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
49218: LD_ADDR_VAR 0 29
49222: PUSH
49223: LD_INT 4
49225: PUSH
49226: LD_INT 0
49228: PUSH
49229: EMPTY
49230: LIST
49231: LIST
49232: PUSH
49233: LD_INT 4
49235: PUSH
49236: LD_INT 1
49238: NEG
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: LD_INT 5
49246: PUSH
49247: LD_INT 0
49249: PUSH
49250: EMPTY
49251: LIST
49252: LIST
49253: PUSH
49254: LD_INT 5
49256: PUSH
49257: LD_INT 1
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: PUSH
49264: LD_INT 4
49266: PUSH
49267: LD_INT 1
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: PUSH
49274: LD_INT 3
49276: PUSH
49277: LD_INT 0
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: LD_INT 3
49286: PUSH
49287: LD_INT 1
49289: NEG
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: LD_INT 3
49297: PUSH
49298: LD_INT 2
49300: NEG
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: PUSH
49306: LD_INT 5
49308: PUSH
49309: LD_INT 2
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: LD_INT 3
49318: PUSH
49319: LD_INT 3
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: PUSH
49326: LD_INT 3
49328: PUSH
49329: LD_INT 2
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: PUSH
49336: LD_INT 4
49338: PUSH
49339: LD_INT 3
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: PUSH
49346: LD_INT 4
49348: PUSH
49349: LD_INT 4
49351: PUSH
49352: EMPTY
49353: LIST
49354: LIST
49355: PUSH
49356: LD_INT 3
49358: PUSH
49359: LD_INT 4
49361: PUSH
49362: EMPTY
49363: LIST
49364: LIST
49365: PUSH
49366: LD_INT 2
49368: PUSH
49369: LD_INT 3
49371: PUSH
49372: EMPTY
49373: LIST
49374: LIST
49375: PUSH
49376: LD_INT 2
49378: PUSH
49379: LD_INT 2
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: LD_INT 4
49388: PUSH
49389: LD_INT 2
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: PUSH
49396: LD_INT 2
49398: PUSH
49399: LD_INT 4
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: PUSH
49406: LD_INT 0
49408: PUSH
49409: LD_INT 4
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: PUSH
49416: LD_INT 0
49418: PUSH
49419: LD_INT 3
49421: PUSH
49422: EMPTY
49423: LIST
49424: LIST
49425: PUSH
49426: LD_INT 1
49428: PUSH
49429: LD_INT 4
49431: PUSH
49432: EMPTY
49433: LIST
49434: LIST
49435: PUSH
49436: LD_INT 1
49438: PUSH
49439: LD_INT 5
49441: PUSH
49442: EMPTY
49443: LIST
49444: LIST
49445: PUSH
49446: LD_INT 0
49448: PUSH
49449: LD_INT 5
49451: PUSH
49452: EMPTY
49453: LIST
49454: LIST
49455: PUSH
49456: LD_INT 1
49458: NEG
49459: PUSH
49460: LD_INT 4
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: PUSH
49467: LD_INT 1
49469: NEG
49470: PUSH
49471: LD_INT 3
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: PUSH
49478: LD_INT 2
49480: PUSH
49481: LD_INT 5
49483: PUSH
49484: EMPTY
49485: LIST
49486: LIST
49487: PUSH
49488: LD_INT 2
49490: NEG
49491: PUSH
49492: LD_INT 3
49494: PUSH
49495: EMPTY
49496: LIST
49497: LIST
49498: PUSH
49499: LD_INT 3
49501: NEG
49502: PUSH
49503: LD_INT 0
49505: PUSH
49506: EMPTY
49507: LIST
49508: LIST
49509: PUSH
49510: LD_INT 3
49512: NEG
49513: PUSH
49514: LD_INT 1
49516: NEG
49517: PUSH
49518: EMPTY
49519: LIST
49520: LIST
49521: PUSH
49522: LD_INT 2
49524: NEG
49525: PUSH
49526: LD_INT 0
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: PUSH
49533: LD_INT 2
49535: NEG
49536: PUSH
49537: LD_INT 1
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: LD_INT 3
49546: NEG
49547: PUSH
49548: LD_INT 1
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: PUSH
49555: LD_INT 4
49557: NEG
49558: PUSH
49559: LD_INT 0
49561: PUSH
49562: EMPTY
49563: LIST
49564: LIST
49565: PUSH
49566: LD_INT 4
49568: NEG
49569: PUSH
49570: LD_INT 1
49572: NEG
49573: PUSH
49574: EMPTY
49575: LIST
49576: LIST
49577: PUSH
49578: LD_INT 4
49580: NEG
49581: PUSH
49582: LD_INT 2
49584: NEG
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: PUSH
49590: LD_INT 2
49592: NEG
49593: PUSH
49594: LD_INT 2
49596: PUSH
49597: EMPTY
49598: LIST
49599: LIST
49600: PUSH
49601: LD_INT 4
49603: NEG
49604: PUSH
49605: LD_INT 4
49607: NEG
49608: PUSH
49609: EMPTY
49610: LIST
49611: LIST
49612: PUSH
49613: LD_INT 4
49615: NEG
49616: PUSH
49617: LD_INT 5
49619: NEG
49620: PUSH
49621: EMPTY
49622: LIST
49623: LIST
49624: PUSH
49625: LD_INT 3
49627: NEG
49628: PUSH
49629: LD_INT 4
49631: NEG
49632: PUSH
49633: EMPTY
49634: LIST
49635: LIST
49636: PUSH
49637: LD_INT 3
49639: NEG
49640: PUSH
49641: LD_INT 3
49643: NEG
49644: PUSH
49645: EMPTY
49646: LIST
49647: LIST
49648: PUSH
49649: LD_INT 4
49651: NEG
49652: PUSH
49653: LD_INT 3
49655: NEG
49656: PUSH
49657: EMPTY
49658: LIST
49659: LIST
49660: PUSH
49661: LD_INT 5
49663: NEG
49664: PUSH
49665: LD_INT 4
49667: NEG
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: PUSH
49673: LD_INT 5
49675: NEG
49676: PUSH
49677: LD_INT 5
49679: NEG
49680: PUSH
49681: EMPTY
49682: LIST
49683: LIST
49684: PUSH
49685: LD_INT 3
49687: NEG
49688: PUSH
49689: LD_INT 5
49691: NEG
49692: PUSH
49693: EMPTY
49694: LIST
49695: LIST
49696: PUSH
49697: LD_INT 5
49699: NEG
49700: PUSH
49701: LD_INT 3
49703: NEG
49704: PUSH
49705: EMPTY
49706: LIST
49707: LIST
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: LIST
49713: LIST
49714: LIST
49715: LIST
49716: LIST
49717: LIST
49718: LIST
49719: LIST
49720: LIST
49721: LIST
49722: LIST
49723: LIST
49724: LIST
49725: LIST
49726: LIST
49727: LIST
49728: LIST
49729: LIST
49730: LIST
49731: LIST
49732: LIST
49733: LIST
49734: LIST
49735: LIST
49736: LIST
49737: LIST
49738: LIST
49739: LIST
49740: LIST
49741: LIST
49742: LIST
49743: LIST
49744: LIST
49745: LIST
49746: LIST
49747: LIST
49748: LIST
49749: LIST
49750: LIST
49751: LIST
49752: LIST
49753: LIST
49754: LIST
49755: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
49756: LD_ADDR_VAR 0 30
49760: PUSH
49761: LD_INT 4
49763: PUSH
49764: LD_INT 4
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: PUSH
49771: LD_INT 4
49773: PUSH
49774: LD_INT 3
49776: PUSH
49777: EMPTY
49778: LIST
49779: LIST
49780: PUSH
49781: LD_INT 5
49783: PUSH
49784: LD_INT 4
49786: PUSH
49787: EMPTY
49788: LIST
49789: LIST
49790: PUSH
49791: LD_INT 5
49793: PUSH
49794: LD_INT 5
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: PUSH
49801: LD_INT 4
49803: PUSH
49804: LD_INT 5
49806: PUSH
49807: EMPTY
49808: LIST
49809: LIST
49810: PUSH
49811: LD_INT 3
49813: PUSH
49814: LD_INT 4
49816: PUSH
49817: EMPTY
49818: LIST
49819: LIST
49820: PUSH
49821: LD_INT 3
49823: PUSH
49824: LD_INT 3
49826: PUSH
49827: EMPTY
49828: LIST
49829: LIST
49830: PUSH
49831: LD_INT 5
49833: PUSH
49834: LD_INT 3
49836: PUSH
49837: EMPTY
49838: LIST
49839: LIST
49840: PUSH
49841: LD_INT 3
49843: PUSH
49844: LD_INT 5
49846: PUSH
49847: EMPTY
49848: LIST
49849: LIST
49850: PUSH
49851: LD_INT 0
49853: PUSH
49854: LD_INT 3
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: PUSH
49861: LD_INT 0
49863: PUSH
49864: LD_INT 2
49866: PUSH
49867: EMPTY
49868: LIST
49869: LIST
49870: PUSH
49871: LD_INT 1
49873: PUSH
49874: LD_INT 3
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: LD_INT 1
49883: PUSH
49884: LD_INT 4
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: PUSH
49891: LD_INT 0
49893: PUSH
49894: LD_INT 4
49896: PUSH
49897: EMPTY
49898: LIST
49899: LIST
49900: PUSH
49901: LD_INT 1
49903: NEG
49904: PUSH
49905: LD_INT 3
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: PUSH
49912: LD_INT 1
49914: NEG
49915: PUSH
49916: LD_INT 2
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: PUSH
49923: LD_INT 2
49925: PUSH
49926: LD_INT 4
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: PUSH
49933: LD_INT 2
49935: NEG
49936: PUSH
49937: LD_INT 2
49939: PUSH
49940: EMPTY
49941: LIST
49942: LIST
49943: PUSH
49944: LD_INT 4
49946: NEG
49947: PUSH
49948: LD_INT 0
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: PUSH
49955: LD_INT 4
49957: NEG
49958: PUSH
49959: LD_INT 1
49961: NEG
49962: PUSH
49963: EMPTY
49964: LIST
49965: LIST
49966: PUSH
49967: LD_INT 3
49969: NEG
49970: PUSH
49971: LD_INT 0
49973: PUSH
49974: EMPTY
49975: LIST
49976: LIST
49977: PUSH
49978: LD_INT 3
49980: NEG
49981: PUSH
49982: LD_INT 1
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: LD_INT 4
49991: NEG
49992: PUSH
49993: LD_INT 1
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: LD_INT 5
50002: NEG
50003: PUSH
50004: LD_INT 0
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: PUSH
50011: LD_INT 5
50013: NEG
50014: PUSH
50015: LD_INT 1
50017: NEG
50018: PUSH
50019: EMPTY
50020: LIST
50021: LIST
50022: PUSH
50023: LD_INT 5
50025: NEG
50026: PUSH
50027: LD_INT 2
50029: NEG
50030: PUSH
50031: EMPTY
50032: LIST
50033: LIST
50034: PUSH
50035: LD_INT 3
50037: NEG
50038: PUSH
50039: LD_INT 2
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: PUSH
50046: LD_INT 3
50048: NEG
50049: PUSH
50050: LD_INT 3
50052: NEG
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: LD_INT 3
50060: NEG
50061: PUSH
50062: LD_INT 4
50064: NEG
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: LD_INT 2
50072: NEG
50073: PUSH
50074: LD_INT 3
50076: NEG
50077: PUSH
50078: EMPTY
50079: LIST
50080: LIST
50081: PUSH
50082: LD_INT 2
50084: NEG
50085: PUSH
50086: LD_INT 2
50088: NEG
50089: PUSH
50090: EMPTY
50091: LIST
50092: LIST
50093: PUSH
50094: LD_INT 3
50096: NEG
50097: PUSH
50098: LD_INT 2
50100: NEG
50101: PUSH
50102: EMPTY
50103: LIST
50104: LIST
50105: PUSH
50106: LD_INT 4
50108: NEG
50109: PUSH
50110: LD_INT 3
50112: NEG
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: PUSH
50118: LD_INT 4
50120: NEG
50121: PUSH
50122: LD_INT 4
50124: NEG
50125: PUSH
50126: EMPTY
50127: LIST
50128: LIST
50129: PUSH
50130: LD_INT 2
50132: NEG
50133: PUSH
50134: LD_INT 4
50136: NEG
50137: PUSH
50138: EMPTY
50139: LIST
50140: LIST
50141: PUSH
50142: LD_INT 4
50144: NEG
50145: PUSH
50146: LD_INT 2
50148: NEG
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: PUSH
50154: LD_INT 0
50156: PUSH
50157: LD_INT 4
50159: NEG
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: LD_INT 0
50167: PUSH
50168: LD_INT 5
50170: NEG
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: PUSH
50176: LD_INT 1
50178: PUSH
50179: LD_INT 4
50181: NEG
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: PUSH
50187: LD_INT 1
50189: PUSH
50190: LD_INT 3
50192: NEG
50193: PUSH
50194: EMPTY
50195: LIST
50196: LIST
50197: PUSH
50198: LD_INT 0
50200: PUSH
50201: LD_INT 3
50203: NEG
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: PUSH
50209: LD_INT 1
50211: NEG
50212: PUSH
50213: LD_INT 4
50215: NEG
50216: PUSH
50217: EMPTY
50218: LIST
50219: LIST
50220: PUSH
50221: LD_INT 1
50223: NEG
50224: PUSH
50225: LD_INT 5
50227: NEG
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: PUSH
50233: LD_INT 2
50235: PUSH
50236: LD_INT 3
50238: NEG
50239: PUSH
50240: EMPTY
50241: LIST
50242: LIST
50243: PUSH
50244: LD_INT 2
50246: NEG
50247: PUSH
50248: LD_INT 5
50250: NEG
50251: PUSH
50252: EMPTY
50253: LIST
50254: LIST
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: LIST
50260: LIST
50261: LIST
50262: LIST
50263: LIST
50264: LIST
50265: LIST
50266: LIST
50267: LIST
50268: LIST
50269: LIST
50270: LIST
50271: LIST
50272: LIST
50273: LIST
50274: LIST
50275: LIST
50276: LIST
50277: LIST
50278: LIST
50279: LIST
50280: LIST
50281: LIST
50282: LIST
50283: LIST
50284: LIST
50285: LIST
50286: LIST
50287: LIST
50288: LIST
50289: LIST
50290: LIST
50291: LIST
50292: LIST
50293: LIST
50294: LIST
50295: LIST
50296: LIST
50297: LIST
50298: LIST
50299: LIST
50300: LIST
50301: LIST
50302: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
50303: LD_ADDR_VAR 0 31
50307: PUSH
50308: LD_INT 0
50310: PUSH
50311: LD_INT 4
50313: PUSH
50314: EMPTY
50315: LIST
50316: LIST
50317: PUSH
50318: LD_INT 0
50320: PUSH
50321: LD_INT 3
50323: PUSH
50324: EMPTY
50325: LIST
50326: LIST
50327: PUSH
50328: LD_INT 1
50330: PUSH
50331: LD_INT 4
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: LD_INT 1
50340: PUSH
50341: LD_INT 5
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: LD_INT 0
50350: PUSH
50351: LD_INT 5
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: PUSH
50358: LD_INT 1
50360: NEG
50361: PUSH
50362: LD_INT 4
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: LD_INT 1
50371: NEG
50372: PUSH
50373: LD_INT 3
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PUSH
50380: LD_INT 2
50382: PUSH
50383: LD_INT 5
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: PUSH
50390: LD_INT 2
50392: NEG
50393: PUSH
50394: LD_INT 3
50396: PUSH
50397: EMPTY
50398: LIST
50399: LIST
50400: PUSH
50401: LD_INT 3
50403: NEG
50404: PUSH
50405: LD_INT 0
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: PUSH
50412: LD_INT 3
50414: NEG
50415: PUSH
50416: LD_INT 1
50418: NEG
50419: PUSH
50420: EMPTY
50421: LIST
50422: LIST
50423: PUSH
50424: LD_INT 2
50426: NEG
50427: PUSH
50428: LD_INT 0
50430: PUSH
50431: EMPTY
50432: LIST
50433: LIST
50434: PUSH
50435: LD_INT 2
50437: NEG
50438: PUSH
50439: LD_INT 1
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: PUSH
50446: LD_INT 3
50448: NEG
50449: PUSH
50450: LD_INT 1
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: PUSH
50457: LD_INT 4
50459: NEG
50460: PUSH
50461: LD_INT 0
50463: PUSH
50464: EMPTY
50465: LIST
50466: LIST
50467: PUSH
50468: LD_INT 4
50470: NEG
50471: PUSH
50472: LD_INT 1
50474: NEG
50475: PUSH
50476: EMPTY
50477: LIST
50478: LIST
50479: PUSH
50480: LD_INT 4
50482: NEG
50483: PUSH
50484: LD_INT 2
50486: NEG
50487: PUSH
50488: EMPTY
50489: LIST
50490: LIST
50491: PUSH
50492: LD_INT 2
50494: NEG
50495: PUSH
50496: LD_INT 2
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: PUSH
50503: LD_INT 4
50505: NEG
50506: PUSH
50507: LD_INT 4
50509: NEG
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: PUSH
50515: LD_INT 4
50517: NEG
50518: PUSH
50519: LD_INT 5
50521: NEG
50522: PUSH
50523: EMPTY
50524: LIST
50525: LIST
50526: PUSH
50527: LD_INT 3
50529: NEG
50530: PUSH
50531: LD_INT 4
50533: NEG
50534: PUSH
50535: EMPTY
50536: LIST
50537: LIST
50538: PUSH
50539: LD_INT 3
50541: NEG
50542: PUSH
50543: LD_INT 3
50545: NEG
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: PUSH
50551: LD_INT 4
50553: NEG
50554: PUSH
50555: LD_INT 3
50557: NEG
50558: PUSH
50559: EMPTY
50560: LIST
50561: LIST
50562: PUSH
50563: LD_INT 5
50565: NEG
50566: PUSH
50567: LD_INT 4
50569: NEG
50570: PUSH
50571: EMPTY
50572: LIST
50573: LIST
50574: PUSH
50575: LD_INT 5
50577: NEG
50578: PUSH
50579: LD_INT 5
50581: NEG
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: PUSH
50587: LD_INT 3
50589: NEG
50590: PUSH
50591: LD_INT 5
50593: NEG
50594: PUSH
50595: EMPTY
50596: LIST
50597: LIST
50598: PUSH
50599: LD_INT 5
50601: NEG
50602: PUSH
50603: LD_INT 3
50605: NEG
50606: PUSH
50607: EMPTY
50608: LIST
50609: LIST
50610: PUSH
50611: LD_INT 0
50613: PUSH
50614: LD_INT 3
50616: NEG
50617: PUSH
50618: EMPTY
50619: LIST
50620: LIST
50621: PUSH
50622: LD_INT 0
50624: PUSH
50625: LD_INT 4
50627: NEG
50628: PUSH
50629: EMPTY
50630: LIST
50631: LIST
50632: PUSH
50633: LD_INT 1
50635: PUSH
50636: LD_INT 3
50638: NEG
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PUSH
50644: LD_INT 1
50646: PUSH
50647: LD_INT 2
50649: NEG
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: PUSH
50655: LD_INT 0
50657: PUSH
50658: LD_INT 2
50660: NEG
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PUSH
50666: LD_INT 1
50668: NEG
50669: PUSH
50670: LD_INT 3
50672: NEG
50673: PUSH
50674: EMPTY
50675: LIST
50676: LIST
50677: PUSH
50678: LD_INT 1
50680: NEG
50681: PUSH
50682: LD_INT 4
50684: NEG
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: LD_INT 2
50692: PUSH
50693: LD_INT 2
50695: NEG
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: PUSH
50701: LD_INT 2
50703: NEG
50704: PUSH
50705: LD_INT 4
50707: NEG
50708: PUSH
50709: EMPTY
50710: LIST
50711: LIST
50712: PUSH
50713: LD_INT 4
50715: PUSH
50716: LD_INT 0
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: PUSH
50723: LD_INT 4
50725: PUSH
50726: LD_INT 1
50728: NEG
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: PUSH
50734: LD_INT 5
50736: PUSH
50737: LD_INT 0
50739: PUSH
50740: EMPTY
50741: LIST
50742: LIST
50743: PUSH
50744: LD_INT 5
50746: PUSH
50747: LD_INT 1
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: PUSH
50754: LD_INT 4
50756: PUSH
50757: LD_INT 1
50759: PUSH
50760: EMPTY
50761: LIST
50762: LIST
50763: PUSH
50764: LD_INT 3
50766: PUSH
50767: LD_INT 0
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: LD_INT 3
50776: PUSH
50777: LD_INT 1
50779: NEG
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: LD_INT 3
50787: PUSH
50788: LD_INT 2
50790: NEG
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: LD_INT 5
50798: PUSH
50799: LD_INT 2
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: LIST
50810: LIST
50811: LIST
50812: LIST
50813: LIST
50814: LIST
50815: LIST
50816: LIST
50817: LIST
50818: LIST
50819: LIST
50820: LIST
50821: LIST
50822: LIST
50823: LIST
50824: LIST
50825: LIST
50826: LIST
50827: LIST
50828: LIST
50829: LIST
50830: LIST
50831: LIST
50832: LIST
50833: LIST
50834: LIST
50835: LIST
50836: LIST
50837: LIST
50838: LIST
50839: LIST
50840: LIST
50841: LIST
50842: LIST
50843: LIST
50844: LIST
50845: LIST
50846: LIST
50847: LIST
50848: LIST
50849: LIST
50850: LIST
50851: LIST
50852: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
50853: LD_ADDR_VAR 0 32
50857: PUSH
50858: LD_INT 4
50860: NEG
50861: PUSH
50862: LD_INT 0
50864: PUSH
50865: EMPTY
50866: LIST
50867: LIST
50868: PUSH
50869: LD_INT 4
50871: NEG
50872: PUSH
50873: LD_INT 1
50875: NEG
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: PUSH
50881: LD_INT 3
50883: NEG
50884: PUSH
50885: LD_INT 0
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: PUSH
50892: LD_INT 3
50894: NEG
50895: PUSH
50896: LD_INT 1
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: LD_INT 4
50905: NEG
50906: PUSH
50907: LD_INT 1
50909: PUSH
50910: EMPTY
50911: LIST
50912: LIST
50913: PUSH
50914: LD_INT 5
50916: NEG
50917: PUSH
50918: LD_INT 0
50920: PUSH
50921: EMPTY
50922: LIST
50923: LIST
50924: PUSH
50925: LD_INT 5
50927: NEG
50928: PUSH
50929: LD_INT 1
50931: NEG
50932: PUSH
50933: EMPTY
50934: LIST
50935: LIST
50936: PUSH
50937: LD_INT 5
50939: NEG
50940: PUSH
50941: LD_INT 2
50943: NEG
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: PUSH
50949: LD_INT 3
50951: NEG
50952: PUSH
50953: LD_INT 2
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: PUSH
50960: LD_INT 3
50962: NEG
50963: PUSH
50964: LD_INT 3
50966: NEG
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: PUSH
50972: LD_INT 3
50974: NEG
50975: PUSH
50976: LD_INT 4
50978: NEG
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: PUSH
50984: LD_INT 2
50986: NEG
50987: PUSH
50988: LD_INT 3
50990: NEG
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: PUSH
50996: LD_INT 2
50998: NEG
50999: PUSH
51000: LD_INT 2
51002: NEG
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: PUSH
51008: LD_INT 3
51010: NEG
51011: PUSH
51012: LD_INT 2
51014: NEG
51015: PUSH
51016: EMPTY
51017: LIST
51018: LIST
51019: PUSH
51020: LD_INT 4
51022: NEG
51023: PUSH
51024: LD_INT 3
51026: NEG
51027: PUSH
51028: EMPTY
51029: LIST
51030: LIST
51031: PUSH
51032: LD_INT 4
51034: NEG
51035: PUSH
51036: LD_INT 4
51038: NEG
51039: PUSH
51040: EMPTY
51041: LIST
51042: LIST
51043: PUSH
51044: LD_INT 2
51046: NEG
51047: PUSH
51048: LD_INT 4
51050: NEG
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: LD_INT 4
51058: NEG
51059: PUSH
51060: LD_INT 2
51062: NEG
51063: PUSH
51064: EMPTY
51065: LIST
51066: LIST
51067: PUSH
51068: LD_INT 0
51070: PUSH
51071: LD_INT 4
51073: NEG
51074: PUSH
51075: EMPTY
51076: LIST
51077: LIST
51078: PUSH
51079: LD_INT 0
51081: PUSH
51082: LD_INT 5
51084: NEG
51085: PUSH
51086: EMPTY
51087: LIST
51088: LIST
51089: PUSH
51090: LD_INT 1
51092: PUSH
51093: LD_INT 4
51095: NEG
51096: PUSH
51097: EMPTY
51098: LIST
51099: LIST
51100: PUSH
51101: LD_INT 1
51103: PUSH
51104: LD_INT 3
51106: NEG
51107: PUSH
51108: EMPTY
51109: LIST
51110: LIST
51111: PUSH
51112: LD_INT 0
51114: PUSH
51115: LD_INT 3
51117: NEG
51118: PUSH
51119: EMPTY
51120: LIST
51121: LIST
51122: PUSH
51123: LD_INT 1
51125: NEG
51126: PUSH
51127: LD_INT 4
51129: NEG
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: PUSH
51135: LD_INT 1
51137: NEG
51138: PUSH
51139: LD_INT 5
51141: NEG
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: PUSH
51147: LD_INT 2
51149: PUSH
51150: LD_INT 3
51152: NEG
51153: PUSH
51154: EMPTY
51155: LIST
51156: LIST
51157: PUSH
51158: LD_INT 2
51160: NEG
51161: PUSH
51162: LD_INT 5
51164: NEG
51165: PUSH
51166: EMPTY
51167: LIST
51168: LIST
51169: PUSH
51170: LD_INT 3
51172: PUSH
51173: LD_INT 0
51175: PUSH
51176: EMPTY
51177: LIST
51178: LIST
51179: PUSH
51180: LD_INT 3
51182: PUSH
51183: LD_INT 1
51185: NEG
51186: PUSH
51187: EMPTY
51188: LIST
51189: LIST
51190: PUSH
51191: LD_INT 4
51193: PUSH
51194: LD_INT 0
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: PUSH
51201: LD_INT 4
51203: PUSH
51204: LD_INT 1
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: PUSH
51211: LD_INT 3
51213: PUSH
51214: LD_INT 1
51216: PUSH
51217: EMPTY
51218: LIST
51219: LIST
51220: PUSH
51221: LD_INT 2
51223: PUSH
51224: LD_INT 0
51226: PUSH
51227: EMPTY
51228: LIST
51229: LIST
51230: PUSH
51231: LD_INT 2
51233: PUSH
51234: LD_INT 1
51236: NEG
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: PUSH
51242: LD_INT 2
51244: PUSH
51245: LD_INT 2
51247: NEG
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 4
51255: PUSH
51256: LD_INT 2
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PUSH
51263: LD_INT 4
51265: PUSH
51266: LD_INT 4
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: LD_INT 4
51275: PUSH
51276: LD_INT 3
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: PUSH
51283: LD_INT 5
51285: PUSH
51286: LD_INT 4
51288: PUSH
51289: EMPTY
51290: LIST
51291: LIST
51292: PUSH
51293: LD_INT 5
51295: PUSH
51296: LD_INT 5
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PUSH
51303: LD_INT 4
51305: PUSH
51306: LD_INT 5
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: PUSH
51313: LD_INT 3
51315: PUSH
51316: LD_INT 4
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: PUSH
51323: LD_INT 3
51325: PUSH
51326: LD_INT 3
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: PUSH
51333: LD_INT 5
51335: PUSH
51336: LD_INT 3
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: PUSH
51343: LD_INT 3
51345: PUSH
51346: LD_INT 5
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: LIST
51359: LIST
51360: LIST
51361: LIST
51362: LIST
51363: LIST
51364: LIST
51365: LIST
51366: LIST
51367: LIST
51368: LIST
51369: LIST
51370: LIST
51371: LIST
51372: LIST
51373: LIST
51374: LIST
51375: LIST
51376: LIST
51377: LIST
51378: LIST
51379: LIST
51380: LIST
51381: LIST
51382: LIST
51383: LIST
51384: LIST
51385: LIST
51386: LIST
51387: LIST
51388: LIST
51389: LIST
51390: LIST
51391: LIST
51392: LIST
51393: LIST
51394: LIST
51395: LIST
51396: LIST
51397: LIST
51398: LIST
51399: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
51400: LD_ADDR_VAR 0 33
51404: PUSH
51405: LD_INT 4
51407: NEG
51408: PUSH
51409: LD_INT 4
51411: NEG
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: PUSH
51417: LD_INT 4
51419: NEG
51420: PUSH
51421: LD_INT 5
51423: NEG
51424: PUSH
51425: EMPTY
51426: LIST
51427: LIST
51428: PUSH
51429: LD_INT 3
51431: NEG
51432: PUSH
51433: LD_INT 4
51435: NEG
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 3
51443: NEG
51444: PUSH
51445: LD_INT 3
51447: NEG
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: LD_INT 4
51455: NEG
51456: PUSH
51457: LD_INT 3
51459: NEG
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: PUSH
51465: LD_INT 5
51467: NEG
51468: PUSH
51469: LD_INT 4
51471: NEG
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: PUSH
51477: LD_INT 5
51479: NEG
51480: PUSH
51481: LD_INT 5
51483: NEG
51484: PUSH
51485: EMPTY
51486: LIST
51487: LIST
51488: PUSH
51489: LD_INT 3
51491: NEG
51492: PUSH
51493: LD_INT 5
51495: NEG
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: PUSH
51501: LD_INT 5
51503: NEG
51504: PUSH
51505: LD_INT 3
51507: NEG
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: PUSH
51513: LD_INT 0
51515: PUSH
51516: LD_INT 3
51518: NEG
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: PUSH
51524: LD_INT 0
51526: PUSH
51527: LD_INT 4
51529: NEG
51530: PUSH
51531: EMPTY
51532: LIST
51533: LIST
51534: PUSH
51535: LD_INT 1
51537: PUSH
51538: LD_INT 3
51540: NEG
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: PUSH
51546: LD_INT 1
51548: PUSH
51549: LD_INT 2
51551: NEG
51552: PUSH
51553: EMPTY
51554: LIST
51555: LIST
51556: PUSH
51557: LD_INT 0
51559: PUSH
51560: LD_INT 2
51562: NEG
51563: PUSH
51564: EMPTY
51565: LIST
51566: LIST
51567: PUSH
51568: LD_INT 1
51570: NEG
51571: PUSH
51572: LD_INT 3
51574: NEG
51575: PUSH
51576: EMPTY
51577: LIST
51578: LIST
51579: PUSH
51580: LD_INT 1
51582: NEG
51583: PUSH
51584: LD_INT 4
51586: NEG
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: PUSH
51592: LD_INT 2
51594: PUSH
51595: LD_INT 2
51597: NEG
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: PUSH
51603: LD_INT 2
51605: NEG
51606: PUSH
51607: LD_INT 4
51609: NEG
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: PUSH
51615: LD_INT 4
51617: PUSH
51618: LD_INT 0
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: PUSH
51625: LD_INT 4
51627: PUSH
51628: LD_INT 1
51630: NEG
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: LD_INT 5
51638: PUSH
51639: LD_INT 0
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: PUSH
51646: LD_INT 5
51648: PUSH
51649: LD_INT 1
51651: PUSH
51652: EMPTY
51653: LIST
51654: LIST
51655: PUSH
51656: LD_INT 4
51658: PUSH
51659: LD_INT 1
51661: PUSH
51662: EMPTY
51663: LIST
51664: LIST
51665: PUSH
51666: LD_INT 3
51668: PUSH
51669: LD_INT 0
51671: PUSH
51672: EMPTY
51673: LIST
51674: LIST
51675: PUSH
51676: LD_INT 3
51678: PUSH
51679: LD_INT 1
51681: NEG
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: PUSH
51687: LD_INT 3
51689: PUSH
51690: LD_INT 2
51692: NEG
51693: PUSH
51694: EMPTY
51695: LIST
51696: LIST
51697: PUSH
51698: LD_INT 5
51700: PUSH
51701: LD_INT 2
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: LD_INT 3
51710: PUSH
51711: LD_INT 3
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: PUSH
51718: LD_INT 3
51720: PUSH
51721: LD_INT 2
51723: PUSH
51724: EMPTY
51725: LIST
51726: LIST
51727: PUSH
51728: LD_INT 4
51730: PUSH
51731: LD_INT 3
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: LD_INT 4
51740: PUSH
51741: LD_INT 4
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: PUSH
51748: LD_INT 3
51750: PUSH
51751: LD_INT 4
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: PUSH
51758: LD_INT 2
51760: PUSH
51761: LD_INT 3
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: LD_INT 2
51770: PUSH
51771: LD_INT 2
51773: PUSH
51774: EMPTY
51775: LIST
51776: LIST
51777: PUSH
51778: LD_INT 4
51780: PUSH
51781: LD_INT 2
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PUSH
51788: LD_INT 2
51790: PUSH
51791: LD_INT 4
51793: PUSH
51794: EMPTY
51795: LIST
51796: LIST
51797: PUSH
51798: LD_INT 0
51800: PUSH
51801: LD_INT 4
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: PUSH
51808: LD_INT 0
51810: PUSH
51811: LD_INT 3
51813: PUSH
51814: EMPTY
51815: LIST
51816: LIST
51817: PUSH
51818: LD_INT 1
51820: PUSH
51821: LD_INT 4
51823: PUSH
51824: EMPTY
51825: LIST
51826: LIST
51827: PUSH
51828: LD_INT 1
51830: PUSH
51831: LD_INT 5
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: PUSH
51838: LD_INT 0
51840: PUSH
51841: LD_INT 5
51843: PUSH
51844: EMPTY
51845: LIST
51846: LIST
51847: PUSH
51848: LD_INT 1
51850: NEG
51851: PUSH
51852: LD_INT 4
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: PUSH
51859: LD_INT 1
51861: NEG
51862: PUSH
51863: LD_INT 3
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: PUSH
51870: LD_INT 2
51872: PUSH
51873: LD_INT 5
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: PUSH
51880: LD_INT 2
51882: NEG
51883: PUSH
51884: LD_INT 3
51886: PUSH
51887: EMPTY
51888: LIST
51889: LIST
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: LIST
51895: LIST
51896: LIST
51897: LIST
51898: LIST
51899: LIST
51900: LIST
51901: LIST
51902: LIST
51903: LIST
51904: LIST
51905: LIST
51906: LIST
51907: LIST
51908: LIST
51909: LIST
51910: LIST
51911: LIST
51912: LIST
51913: LIST
51914: LIST
51915: LIST
51916: LIST
51917: LIST
51918: LIST
51919: LIST
51920: LIST
51921: LIST
51922: LIST
51923: LIST
51924: LIST
51925: LIST
51926: LIST
51927: LIST
51928: LIST
51929: LIST
51930: LIST
51931: LIST
51932: LIST
51933: LIST
51934: LIST
51935: LIST
51936: LIST
51937: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
51938: LD_ADDR_VAR 0 34
51942: PUSH
51943: LD_INT 0
51945: PUSH
51946: LD_INT 4
51948: NEG
51949: PUSH
51950: EMPTY
51951: LIST
51952: LIST
51953: PUSH
51954: LD_INT 0
51956: PUSH
51957: LD_INT 5
51959: NEG
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: PUSH
51965: LD_INT 1
51967: PUSH
51968: LD_INT 4
51970: NEG
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: PUSH
51976: LD_INT 1
51978: PUSH
51979: LD_INT 3
51981: NEG
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: PUSH
51987: LD_INT 0
51989: PUSH
51990: LD_INT 3
51992: NEG
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: PUSH
51998: LD_INT 1
52000: NEG
52001: PUSH
52002: LD_INT 4
52004: NEG
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: PUSH
52010: LD_INT 1
52012: NEG
52013: PUSH
52014: LD_INT 5
52016: NEG
52017: PUSH
52018: EMPTY
52019: LIST
52020: LIST
52021: PUSH
52022: LD_INT 2
52024: PUSH
52025: LD_INT 3
52027: NEG
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: PUSH
52033: LD_INT 2
52035: NEG
52036: PUSH
52037: LD_INT 5
52039: NEG
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: PUSH
52045: LD_INT 3
52047: PUSH
52048: LD_INT 0
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: PUSH
52055: LD_INT 3
52057: PUSH
52058: LD_INT 1
52060: NEG
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: LD_INT 4
52068: PUSH
52069: LD_INT 0
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: PUSH
52076: LD_INT 4
52078: PUSH
52079: LD_INT 1
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: PUSH
52086: LD_INT 3
52088: PUSH
52089: LD_INT 1
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: PUSH
52096: LD_INT 2
52098: PUSH
52099: LD_INT 0
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: PUSH
52106: LD_INT 2
52108: PUSH
52109: LD_INT 1
52111: NEG
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PUSH
52117: LD_INT 2
52119: PUSH
52120: LD_INT 2
52122: NEG
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: LD_INT 4
52130: PUSH
52131: LD_INT 2
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: PUSH
52138: LD_INT 4
52140: PUSH
52141: LD_INT 4
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: PUSH
52148: LD_INT 4
52150: PUSH
52151: LD_INT 3
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: PUSH
52158: LD_INT 5
52160: PUSH
52161: LD_INT 4
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: PUSH
52168: LD_INT 5
52170: PUSH
52171: LD_INT 5
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: PUSH
52178: LD_INT 4
52180: PUSH
52181: LD_INT 5
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: PUSH
52188: LD_INT 3
52190: PUSH
52191: LD_INT 4
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: PUSH
52198: LD_INT 3
52200: PUSH
52201: LD_INT 3
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: LD_INT 5
52210: PUSH
52211: LD_INT 3
52213: PUSH
52214: EMPTY
52215: LIST
52216: LIST
52217: PUSH
52218: LD_INT 3
52220: PUSH
52221: LD_INT 5
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: PUSH
52228: LD_INT 0
52230: PUSH
52231: LD_INT 3
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: PUSH
52238: LD_INT 0
52240: PUSH
52241: LD_INT 2
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: LD_INT 1
52250: PUSH
52251: LD_INT 3
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: PUSH
52258: LD_INT 1
52260: PUSH
52261: LD_INT 4
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: LD_INT 0
52270: PUSH
52271: LD_INT 4
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: LD_INT 1
52280: NEG
52281: PUSH
52282: LD_INT 3
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 1
52291: NEG
52292: PUSH
52293: LD_INT 2
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 2
52302: PUSH
52303: LD_INT 4
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: LD_INT 2
52312: NEG
52313: PUSH
52314: LD_INT 2
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: PUSH
52321: LD_INT 4
52323: NEG
52324: PUSH
52325: LD_INT 0
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PUSH
52332: LD_INT 4
52334: NEG
52335: PUSH
52336: LD_INT 1
52338: NEG
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: PUSH
52344: LD_INT 3
52346: NEG
52347: PUSH
52348: LD_INT 0
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: LD_INT 3
52357: NEG
52358: PUSH
52359: LD_INT 1
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: PUSH
52366: LD_INT 4
52368: NEG
52369: PUSH
52370: LD_INT 1
52372: PUSH
52373: EMPTY
52374: LIST
52375: LIST
52376: PUSH
52377: LD_INT 5
52379: NEG
52380: PUSH
52381: LD_INT 0
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: PUSH
52388: LD_INT 5
52390: NEG
52391: PUSH
52392: LD_INT 1
52394: NEG
52395: PUSH
52396: EMPTY
52397: LIST
52398: LIST
52399: PUSH
52400: LD_INT 5
52402: NEG
52403: PUSH
52404: LD_INT 2
52406: NEG
52407: PUSH
52408: EMPTY
52409: LIST
52410: LIST
52411: PUSH
52412: LD_INT 3
52414: NEG
52415: PUSH
52416: LD_INT 2
52418: PUSH
52419: EMPTY
52420: LIST
52421: LIST
52422: PUSH
52423: EMPTY
52424: LIST
52425: LIST
52426: LIST
52427: LIST
52428: LIST
52429: LIST
52430: LIST
52431: LIST
52432: LIST
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: LIST
52438: LIST
52439: LIST
52440: LIST
52441: LIST
52442: LIST
52443: LIST
52444: LIST
52445: LIST
52446: LIST
52447: LIST
52448: LIST
52449: LIST
52450: LIST
52451: LIST
52452: LIST
52453: LIST
52454: LIST
52455: LIST
52456: LIST
52457: LIST
52458: LIST
52459: LIST
52460: LIST
52461: LIST
52462: LIST
52463: LIST
52464: LIST
52465: LIST
52466: LIST
52467: LIST
52468: LIST
52469: ST_TO_ADDR
// end ; end ;
52470: GO 52473
52472: POP
// case btype of b_depot , b_warehouse :
52473: LD_VAR 0 1
52477: PUSH
52478: LD_INT 0
52480: DOUBLE
52481: EQUAL
52482: IFTRUE 52492
52484: LD_INT 1
52486: DOUBLE
52487: EQUAL
52488: IFTRUE 52492
52490: GO 52693
52492: POP
// case nation of nation_american :
52493: LD_VAR 0 5
52497: PUSH
52498: LD_INT 1
52500: DOUBLE
52501: EQUAL
52502: IFTRUE 52506
52504: GO 52562
52506: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
52507: LD_ADDR_VAR 0 9
52511: PUSH
52512: LD_VAR 0 11
52516: PUSH
52517: LD_VAR 0 12
52521: PUSH
52522: LD_VAR 0 13
52526: PUSH
52527: LD_VAR 0 14
52531: PUSH
52532: LD_VAR 0 15
52536: PUSH
52537: LD_VAR 0 16
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: LIST
52546: LIST
52547: LIST
52548: LIST
52549: PUSH
52550: LD_VAR 0 4
52554: PUSH
52555: LD_INT 1
52557: PLUS
52558: ARRAY
52559: ST_TO_ADDR
52560: GO 52691
52562: LD_INT 2
52564: DOUBLE
52565: EQUAL
52566: IFTRUE 52570
52568: GO 52626
52570: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
52571: LD_ADDR_VAR 0 9
52575: PUSH
52576: LD_VAR 0 17
52580: PUSH
52581: LD_VAR 0 18
52585: PUSH
52586: LD_VAR 0 19
52590: PUSH
52591: LD_VAR 0 20
52595: PUSH
52596: LD_VAR 0 21
52600: PUSH
52601: LD_VAR 0 22
52605: PUSH
52606: EMPTY
52607: LIST
52608: LIST
52609: LIST
52610: LIST
52611: LIST
52612: LIST
52613: PUSH
52614: LD_VAR 0 4
52618: PUSH
52619: LD_INT 1
52621: PLUS
52622: ARRAY
52623: ST_TO_ADDR
52624: GO 52691
52626: LD_INT 3
52628: DOUBLE
52629: EQUAL
52630: IFTRUE 52634
52632: GO 52690
52634: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
52635: LD_ADDR_VAR 0 9
52639: PUSH
52640: LD_VAR 0 23
52644: PUSH
52645: LD_VAR 0 24
52649: PUSH
52650: LD_VAR 0 25
52654: PUSH
52655: LD_VAR 0 26
52659: PUSH
52660: LD_VAR 0 27
52664: PUSH
52665: LD_VAR 0 28
52669: PUSH
52670: EMPTY
52671: LIST
52672: LIST
52673: LIST
52674: LIST
52675: LIST
52676: LIST
52677: PUSH
52678: LD_VAR 0 4
52682: PUSH
52683: LD_INT 1
52685: PLUS
52686: ARRAY
52687: ST_TO_ADDR
52688: GO 52691
52690: POP
52691: GO 53240
52693: LD_INT 2
52695: DOUBLE
52696: EQUAL
52697: IFTRUE 52707
52699: LD_INT 3
52701: DOUBLE
52702: EQUAL
52703: IFTRUE 52707
52705: GO 52763
52707: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
52708: LD_ADDR_VAR 0 9
52712: PUSH
52713: LD_VAR 0 29
52717: PUSH
52718: LD_VAR 0 30
52722: PUSH
52723: LD_VAR 0 31
52727: PUSH
52728: LD_VAR 0 32
52732: PUSH
52733: LD_VAR 0 33
52737: PUSH
52738: LD_VAR 0 34
52742: PUSH
52743: EMPTY
52744: LIST
52745: LIST
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: PUSH
52751: LD_VAR 0 4
52755: PUSH
52756: LD_INT 1
52758: PLUS
52759: ARRAY
52760: ST_TO_ADDR
52761: GO 53240
52763: LD_INT 16
52765: DOUBLE
52766: EQUAL
52767: IFTRUE 52819
52769: LD_INT 17
52771: DOUBLE
52772: EQUAL
52773: IFTRUE 52819
52775: LD_INT 18
52777: DOUBLE
52778: EQUAL
52779: IFTRUE 52819
52781: LD_INT 19
52783: DOUBLE
52784: EQUAL
52785: IFTRUE 52819
52787: LD_INT 20
52789: DOUBLE
52790: EQUAL
52791: IFTRUE 52819
52793: LD_INT 21
52795: DOUBLE
52796: EQUAL
52797: IFTRUE 52819
52799: LD_INT 23
52801: DOUBLE
52802: EQUAL
52803: IFTRUE 52819
52805: LD_INT 24
52807: DOUBLE
52808: EQUAL
52809: IFTRUE 52819
52811: LD_INT 25
52813: DOUBLE
52814: EQUAL
52815: IFTRUE 52819
52817: GO 52875
52819: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
52820: LD_ADDR_VAR 0 9
52824: PUSH
52825: LD_VAR 0 35
52829: PUSH
52830: LD_VAR 0 36
52834: PUSH
52835: LD_VAR 0 37
52839: PUSH
52840: LD_VAR 0 38
52844: PUSH
52845: LD_VAR 0 39
52849: PUSH
52850: LD_VAR 0 40
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: LIST
52859: LIST
52860: LIST
52861: LIST
52862: PUSH
52863: LD_VAR 0 4
52867: PUSH
52868: LD_INT 1
52870: PLUS
52871: ARRAY
52872: ST_TO_ADDR
52873: GO 53240
52875: LD_INT 6
52877: DOUBLE
52878: EQUAL
52879: IFTRUE 52931
52881: LD_INT 7
52883: DOUBLE
52884: EQUAL
52885: IFTRUE 52931
52887: LD_INT 8
52889: DOUBLE
52890: EQUAL
52891: IFTRUE 52931
52893: LD_INT 13
52895: DOUBLE
52896: EQUAL
52897: IFTRUE 52931
52899: LD_INT 12
52901: DOUBLE
52902: EQUAL
52903: IFTRUE 52931
52905: LD_INT 15
52907: DOUBLE
52908: EQUAL
52909: IFTRUE 52931
52911: LD_INT 11
52913: DOUBLE
52914: EQUAL
52915: IFTRUE 52931
52917: LD_INT 14
52919: DOUBLE
52920: EQUAL
52921: IFTRUE 52931
52923: LD_INT 10
52925: DOUBLE
52926: EQUAL
52927: IFTRUE 52931
52929: GO 52987
52931: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
52932: LD_ADDR_VAR 0 9
52936: PUSH
52937: LD_VAR 0 41
52941: PUSH
52942: LD_VAR 0 42
52946: PUSH
52947: LD_VAR 0 43
52951: PUSH
52952: LD_VAR 0 44
52956: PUSH
52957: LD_VAR 0 45
52961: PUSH
52962: LD_VAR 0 46
52966: PUSH
52967: EMPTY
52968: LIST
52969: LIST
52970: LIST
52971: LIST
52972: LIST
52973: LIST
52974: PUSH
52975: LD_VAR 0 4
52979: PUSH
52980: LD_INT 1
52982: PLUS
52983: ARRAY
52984: ST_TO_ADDR
52985: GO 53240
52987: LD_INT 36
52989: DOUBLE
52990: EQUAL
52991: IFTRUE 52995
52993: GO 53051
52995: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
52996: LD_ADDR_VAR 0 9
53000: PUSH
53001: LD_VAR 0 47
53005: PUSH
53006: LD_VAR 0 48
53010: PUSH
53011: LD_VAR 0 49
53015: PUSH
53016: LD_VAR 0 50
53020: PUSH
53021: LD_VAR 0 51
53025: PUSH
53026: LD_VAR 0 52
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: LIST
53035: LIST
53036: LIST
53037: LIST
53038: PUSH
53039: LD_VAR 0 4
53043: PUSH
53044: LD_INT 1
53046: PLUS
53047: ARRAY
53048: ST_TO_ADDR
53049: GO 53240
53051: LD_INT 4
53053: DOUBLE
53054: EQUAL
53055: IFTRUE 53077
53057: LD_INT 5
53059: DOUBLE
53060: EQUAL
53061: IFTRUE 53077
53063: LD_INT 34
53065: DOUBLE
53066: EQUAL
53067: IFTRUE 53077
53069: LD_INT 37
53071: DOUBLE
53072: EQUAL
53073: IFTRUE 53077
53075: GO 53133
53077: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
53078: LD_ADDR_VAR 0 9
53082: PUSH
53083: LD_VAR 0 53
53087: PUSH
53088: LD_VAR 0 54
53092: PUSH
53093: LD_VAR 0 55
53097: PUSH
53098: LD_VAR 0 56
53102: PUSH
53103: LD_VAR 0 57
53107: PUSH
53108: LD_VAR 0 58
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: LIST
53117: LIST
53118: LIST
53119: LIST
53120: PUSH
53121: LD_VAR 0 4
53125: PUSH
53126: LD_INT 1
53128: PLUS
53129: ARRAY
53130: ST_TO_ADDR
53131: GO 53240
53133: LD_INT 31
53135: DOUBLE
53136: EQUAL
53137: IFTRUE 53183
53139: LD_INT 32
53141: DOUBLE
53142: EQUAL
53143: IFTRUE 53183
53145: LD_INT 33
53147: DOUBLE
53148: EQUAL
53149: IFTRUE 53183
53151: LD_INT 27
53153: DOUBLE
53154: EQUAL
53155: IFTRUE 53183
53157: LD_INT 26
53159: DOUBLE
53160: EQUAL
53161: IFTRUE 53183
53163: LD_INT 28
53165: DOUBLE
53166: EQUAL
53167: IFTRUE 53183
53169: LD_INT 29
53171: DOUBLE
53172: EQUAL
53173: IFTRUE 53183
53175: LD_INT 30
53177: DOUBLE
53178: EQUAL
53179: IFTRUE 53183
53181: GO 53239
53183: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
53184: LD_ADDR_VAR 0 9
53188: PUSH
53189: LD_VAR 0 59
53193: PUSH
53194: LD_VAR 0 60
53198: PUSH
53199: LD_VAR 0 61
53203: PUSH
53204: LD_VAR 0 62
53208: PUSH
53209: LD_VAR 0 63
53213: PUSH
53214: LD_VAR 0 64
53218: PUSH
53219: EMPTY
53220: LIST
53221: LIST
53222: LIST
53223: LIST
53224: LIST
53225: LIST
53226: PUSH
53227: LD_VAR 0 4
53231: PUSH
53232: LD_INT 1
53234: PLUS
53235: ARRAY
53236: ST_TO_ADDR
53237: GO 53240
53239: POP
// temp_list2 = [ ] ;
53240: LD_ADDR_VAR 0 10
53244: PUSH
53245: EMPTY
53246: ST_TO_ADDR
// for i in temp_list do
53247: LD_ADDR_VAR 0 8
53251: PUSH
53252: LD_VAR 0 9
53256: PUSH
53257: FOR_IN
53258: IFFALSE 53310
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
53260: LD_ADDR_VAR 0 10
53264: PUSH
53265: LD_VAR 0 10
53269: PUSH
53270: LD_VAR 0 8
53274: PUSH
53275: LD_INT 1
53277: ARRAY
53278: PUSH
53279: LD_VAR 0 2
53283: PLUS
53284: PUSH
53285: LD_VAR 0 8
53289: PUSH
53290: LD_INT 2
53292: ARRAY
53293: PUSH
53294: LD_VAR 0 3
53298: PLUS
53299: PUSH
53300: EMPTY
53301: LIST
53302: LIST
53303: PUSH
53304: EMPTY
53305: LIST
53306: ADD
53307: ST_TO_ADDR
53308: GO 53257
53310: POP
53311: POP
// result = temp_list2 ;
53312: LD_ADDR_VAR 0 7
53316: PUSH
53317: LD_VAR 0 10
53321: ST_TO_ADDR
// end ;
53322: LD_VAR 0 7
53326: RET
// export function EnemyInRange ( unit , dist ) ; begin
53327: LD_INT 0
53329: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
53330: LD_ADDR_VAR 0 3
53334: PUSH
53335: LD_VAR 0 1
53339: PPUSH
53340: CALL_OW 255
53344: PPUSH
53345: LD_VAR 0 1
53349: PPUSH
53350: CALL_OW 250
53354: PPUSH
53355: LD_VAR 0 1
53359: PPUSH
53360: CALL_OW 251
53364: PPUSH
53365: LD_VAR 0 2
53369: PPUSH
53370: CALL 27455 0 4
53374: PUSH
53375: LD_INT 4
53377: ARRAY
53378: ST_TO_ADDR
// end ;
53379: LD_VAR 0 3
53383: RET
// export function PlayerSeeMe ( unit ) ; begin
53384: LD_INT 0
53386: PPUSH
// result := See ( your_side , unit ) ;
53387: LD_ADDR_VAR 0 2
53391: PUSH
53392: LD_OWVAR 2
53396: PPUSH
53397: LD_VAR 0 1
53401: PPUSH
53402: CALL_OW 292
53406: ST_TO_ADDR
// end ;
53407: LD_VAR 0 2
53411: RET
// export function ReverseDir ( unit ) ; begin
53412: LD_INT 0
53414: PPUSH
// if not unit then
53415: LD_VAR 0 1
53419: NOT
53420: IFFALSE 53424
// exit ;
53422: GO 53470
// result := [ 3 , 4 , 5 , 0 , 1 , 2 ] [ GetDir ( unit ) + 1 ] ;
53424: LD_ADDR_VAR 0 2
53428: PUSH
53429: LD_INT 3
53431: PUSH
53432: LD_INT 4
53434: PUSH
53435: LD_INT 5
53437: PUSH
53438: LD_INT 0
53440: PUSH
53441: LD_INT 1
53443: PUSH
53444: LD_INT 2
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: LIST
53451: LIST
53452: LIST
53453: LIST
53454: PUSH
53455: LD_VAR 0 1
53459: PPUSH
53460: CALL_OW 254
53464: PUSH
53465: LD_INT 1
53467: PLUS
53468: ARRAY
53469: ST_TO_ADDR
// end ;
53470: LD_VAR 0 2
53474: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
53475: LD_INT 0
53477: PPUSH
53478: PPUSH
53479: PPUSH
53480: PPUSH
53481: PPUSH
// if not hexes then
53482: LD_VAR 0 2
53486: NOT
53487: IFFALSE 53491
// exit ;
53489: GO 53639
// dist := 9999 ;
53491: LD_ADDR_VAR 0 5
53495: PUSH
53496: LD_INT 9999
53498: ST_TO_ADDR
// for i = 1 to hexes do
53499: LD_ADDR_VAR 0 4
53503: PUSH
53504: DOUBLE
53505: LD_INT 1
53507: DEC
53508: ST_TO_ADDR
53509: LD_VAR 0 2
53513: PUSH
53514: FOR_TO
53515: IFFALSE 53627
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
53517: LD_VAR 0 1
53521: PPUSH
53522: LD_VAR 0 2
53526: PUSH
53527: LD_VAR 0 4
53531: ARRAY
53532: PUSH
53533: LD_INT 1
53535: ARRAY
53536: PPUSH
53537: LD_VAR 0 2
53541: PUSH
53542: LD_VAR 0 4
53546: ARRAY
53547: PUSH
53548: LD_INT 2
53550: ARRAY
53551: PPUSH
53552: CALL_OW 297
53556: PUSH
53557: LD_VAR 0 5
53561: LESS
53562: IFFALSE 53625
// begin hex := hexes [ i ] ;
53564: LD_ADDR_VAR 0 7
53568: PUSH
53569: LD_VAR 0 2
53573: PUSH
53574: LD_VAR 0 4
53578: ARRAY
53579: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53580: LD_ADDR_VAR 0 5
53584: PUSH
53585: LD_VAR 0 1
53589: PPUSH
53590: LD_VAR 0 2
53594: PUSH
53595: LD_VAR 0 4
53599: ARRAY
53600: PUSH
53601: LD_INT 1
53603: ARRAY
53604: PPUSH
53605: LD_VAR 0 2
53609: PUSH
53610: LD_VAR 0 4
53614: ARRAY
53615: PUSH
53616: LD_INT 2
53618: ARRAY
53619: PPUSH
53620: CALL_OW 297
53624: ST_TO_ADDR
// end ; end ;
53625: GO 53514
53627: POP
53628: POP
// result := hex ;
53629: LD_ADDR_VAR 0 3
53633: PUSH
53634: LD_VAR 0 7
53638: ST_TO_ADDR
// end ;
53639: LD_VAR 0 3
53643: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
53644: LD_INT 0
53646: PPUSH
53647: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
53648: LD_VAR 0 1
53652: NOT
53653: PUSH
53654: LD_VAR 0 1
53658: PUSH
53659: LD_INT 21
53661: PUSH
53662: LD_INT 2
53664: PUSH
53665: EMPTY
53666: LIST
53667: LIST
53668: PUSH
53669: LD_INT 23
53671: PUSH
53672: LD_INT 2
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: PUSH
53679: EMPTY
53680: LIST
53681: LIST
53682: PPUSH
53683: CALL_OW 69
53687: IN
53688: NOT
53689: OR
53690: IFFALSE 53694
// exit ;
53692: GO 53741
// for i = 1 to 3 do
53694: LD_ADDR_VAR 0 3
53698: PUSH
53699: DOUBLE
53700: LD_INT 1
53702: DEC
53703: ST_TO_ADDR
53704: LD_INT 3
53706: PUSH
53707: FOR_TO
53708: IFFALSE 53739
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
53710: LD_VAR 0 1
53714: PPUSH
53715: CALL_OW 250
53719: PPUSH
53720: LD_VAR 0 1
53724: PPUSH
53725: CALL_OW 251
53729: PPUSH
53730: LD_INT 1
53732: PPUSH
53733: CALL_OW 453
53737: GO 53707
53739: POP
53740: POP
// end ;
53741: LD_VAR 0 2
53745: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
53746: LD_INT 0
53748: PPUSH
53749: PPUSH
53750: PPUSH
53751: PPUSH
53752: PPUSH
53753: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
53754: LD_VAR 0 1
53758: NOT
53759: PUSH
53760: LD_VAR 0 2
53764: NOT
53765: OR
53766: PUSH
53767: LD_VAR 0 1
53771: PPUSH
53772: CALL_OW 314
53776: OR
53777: IFFALSE 53781
// exit ;
53779: GO 54222
// x := GetX ( enemy_unit ) ;
53781: LD_ADDR_VAR 0 7
53785: PUSH
53786: LD_VAR 0 2
53790: PPUSH
53791: CALL_OW 250
53795: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
53796: LD_ADDR_VAR 0 8
53800: PUSH
53801: LD_VAR 0 2
53805: PPUSH
53806: CALL_OW 251
53810: ST_TO_ADDR
// if not x or not y then
53811: LD_VAR 0 7
53815: NOT
53816: PUSH
53817: LD_VAR 0 8
53821: NOT
53822: OR
53823: IFFALSE 53827
// exit ;
53825: GO 54222
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
53827: LD_ADDR_VAR 0 6
53831: PUSH
53832: LD_VAR 0 7
53836: PPUSH
53837: LD_INT 0
53839: PPUSH
53840: LD_INT 4
53842: PPUSH
53843: CALL_OW 272
53847: PUSH
53848: LD_VAR 0 8
53852: PPUSH
53853: LD_INT 0
53855: PPUSH
53856: LD_INT 4
53858: PPUSH
53859: CALL_OW 273
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: PUSH
53868: LD_VAR 0 7
53872: PPUSH
53873: LD_INT 1
53875: PPUSH
53876: LD_INT 4
53878: PPUSH
53879: CALL_OW 272
53883: PUSH
53884: LD_VAR 0 8
53888: PPUSH
53889: LD_INT 1
53891: PPUSH
53892: LD_INT 4
53894: PPUSH
53895: CALL_OW 273
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: PUSH
53904: LD_VAR 0 7
53908: PPUSH
53909: LD_INT 2
53911: PPUSH
53912: LD_INT 4
53914: PPUSH
53915: CALL_OW 272
53919: PUSH
53920: LD_VAR 0 8
53924: PPUSH
53925: LD_INT 2
53927: PPUSH
53928: LD_INT 4
53930: PPUSH
53931: CALL_OW 273
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: PUSH
53940: LD_VAR 0 7
53944: PPUSH
53945: LD_INT 3
53947: PPUSH
53948: LD_INT 4
53950: PPUSH
53951: CALL_OW 272
53955: PUSH
53956: LD_VAR 0 8
53960: PPUSH
53961: LD_INT 3
53963: PPUSH
53964: LD_INT 4
53966: PPUSH
53967: CALL_OW 273
53971: PUSH
53972: EMPTY
53973: LIST
53974: LIST
53975: PUSH
53976: LD_VAR 0 7
53980: PPUSH
53981: LD_INT 4
53983: PPUSH
53984: LD_INT 4
53986: PPUSH
53987: CALL_OW 272
53991: PUSH
53992: LD_VAR 0 8
53996: PPUSH
53997: LD_INT 4
53999: PPUSH
54000: LD_INT 4
54002: PPUSH
54003: CALL_OW 273
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: PUSH
54012: LD_VAR 0 7
54016: PPUSH
54017: LD_INT 5
54019: PPUSH
54020: LD_INT 4
54022: PPUSH
54023: CALL_OW 272
54027: PUSH
54028: LD_VAR 0 8
54032: PPUSH
54033: LD_INT 5
54035: PPUSH
54036: LD_INT 4
54038: PPUSH
54039: CALL_OW 273
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: PUSH
54048: EMPTY
54049: LIST
54050: LIST
54051: LIST
54052: LIST
54053: LIST
54054: LIST
54055: ST_TO_ADDR
// for i = tmp downto 1 do
54056: LD_ADDR_VAR 0 4
54060: PUSH
54061: DOUBLE
54062: LD_VAR 0 6
54066: INC
54067: ST_TO_ADDR
54068: LD_INT 1
54070: PUSH
54071: FOR_DOWNTO
54072: IFFALSE 54173
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
54074: LD_VAR 0 6
54078: PUSH
54079: LD_VAR 0 4
54083: ARRAY
54084: PUSH
54085: LD_INT 1
54087: ARRAY
54088: PPUSH
54089: LD_VAR 0 6
54093: PUSH
54094: LD_VAR 0 4
54098: ARRAY
54099: PUSH
54100: LD_INT 2
54102: ARRAY
54103: PPUSH
54104: CALL_OW 488
54108: NOT
54109: PUSH
54110: LD_VAR 0 6
54114: PUSH
54115: LD_VAR 0 4
54119: ARRAY
54120: PUSH
54121: LD_INT 1
54123: ARRAY
54124: PPUSH
54125: LD_VAR 0 6
54129: PUSH
54130: LD_VAR 0 4
54134: ARRAY
54135: PUSH
54136: LD_INT 2
54138: ARRAY
54139: PPUSH
54140: CALL_OW 428
54144: PUSH
54145: LD_INT 0
54147: NONEQUAL
54148: OR
54149: IFFALSE 54171
// tmp := Delete ( tmp , i ) ;
54151: LD_ADDR_VAR 0 6
54155: PUSH
54156: LD_VAR 0 6
54160: PPUSH
54161: LD_VAR 0 4
54165: PPUSH
54166: CALL_OW 3
54170: ST_TO_ADDR
54171: GO 54071
54173: POP
54174: POP
// j := GetClosestHex ( unit , tmp ) ;
54175: LD_ADDR_VAR 0 5
54179: PUSH
54180: LD_VAR 0 1
54184: PPUSH
54185: LD_VAR 0 6
54189: PPUSH
54190: CALL 53475 0 2
54194: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
54195: LD_VAR 0 1
54199: PPUSH
54200: LD_VAR 0 5
54204: PUSH
54205: LD_INT 1
54207: ARRAY
54208: PPUSH
54209: LD_VAR 0 5
54213: PUSH
54214: LD_INT 2
54216: ARRAY
54217: PPUSH
54218: CALL_OW 111
// end ;
54222: LD_VAR 0 3
54226: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
54227: LD_INT 0
54229: PPUSH
54230: PPUSH
54231: PPUSH
// uc_side = 0 ;
54232: LD_ADDR_OWVAR 20
54236: PUSH
54237: LD_INT 0
54239: ST_TO_ADDR
// uc_nation = 0 ;
54240: LD_ADDR_OWVAR 21
54244: PUSH
54245: LD_INT 0
54247: ST_TO_ADDR
// InitHc ;
54248: CALL_OW 19
// InitVc ;
54252: CALL_OW 20
// if mastodonts then
54256: LD_VAR 0 6
54260: IFFALSE 54327
// for i = 1 to mastodonts do
54262: LD_ADDR_VAR 0 11
54266: PUSH
54267: DOUBLE
54268: LD_INT 1
54270: DEC
54271: ST_TO_ADDR
54272: LD_VAR 0 6
54276: PUSH
54277: FOR_TO
54278: IFFALSE 54325
// begin vc_chassis := 31 ;
54280: LD_ADDR_OWVAR 37
54284: PUSH
54285: LD_INT 31
54287: ST_TO_ADDR
// vc_control := control_rider ;
54288: LD_ADDR_OWVAR 38
54292: PUSH
54293: LD_INT 4
54295: ST_TO_ADDR
// animal := CreateVehicle ;
54296: LD_ADDR_VAR 0 12
54300: PUSH
54301: CALL_OW 45
54305: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54306: LD_VAR 0 12
54310: PPUSH
54311: LD_VAR 0 8
54315: PPUSH
54316: LD_INT 0
54318: PPUSH
54319: CALL 61072 0 3
// end ;
54323: GO 54277
54325: POP
54326: POP
// if horses then
54327: LD_VAR 0 5
54331: IFFALSE 54398
// for i = 1 to horses do
54333: LD_ADDR_VAR 0 11
54337: PUSH
54338: DOUBLE
54339: LD_INT 1
54341: DEC
54342: ST_TO_ADDR
54343: LD_VAR 0 5
54347: PUSH
54348: FOR_TO
54349: IFFALSE 54396
// begin hc_class := 21 ;
54351: LD_ADDR_OWVAR 28
54355: PUSH
54356: LD_INT 21
54358: ST_TO_ADDR
// hc_gallery :=  ;
54359: LD_ADDR_OWVAR 33
54363: PUSH
54364: LD_STRING 
54366: ST_TO_ADDR
// animal := CreateHuman ;
54367: LD_ADDR_VAR 0 12
54371: PUSH
54372: CALL_OW 44
54376: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54377: LD_VAR 0 12
54381: PPUSH
54382: LD_VAR 0 8
54386: PPUSH
54387: LD_INT 0
54389: PPUSH
54390: CALL 61072 0 3
// end ;
54394: GO 54348
54396: POP
54397: POP
// if birds then
54398: LD_VAR 0 1
54402: IFFALSE 54469
// for i = 1 to birds do
54404: LD_ADDR_VAR 0 11
54408: PUSH
54409: DOUBLE
54410: LD_INT 1
54412: DEC
54413: ST_TO_ADDR
54414: LD_VAR 0 1
54418: PUSH
54419: FOR_TO
54420: IFFALSE 54467
// begin hc_class = 18 ;
54422: LD_ADDR_OWVAR 28
54426: PUSH
54427: LD_INT 18
54429: ST_TO_ADDR
// hc_gallery =  ;
54430: LD_ADDR_OWVAR 33
54434: PUSH
54435: LD_STRING 
54437: ST_TO_ADDR
// animal := CreateHuman ;
54438: LD_ADDR_VAR 0 12
54442: PUSH
54443: CALL_OW 44
54447: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54448: LD_VAR 0 12
54452: PPUSH
54453: LD_VAR 0 8
54457: PPUSH
54458: LD_INT 0
54460: PPUSH
54461: CALL 61072 0 3
// end ;
54465: GO 54419
54467: POP
54468: POP
// if tigers then
54469: LD_VAR 0 2
54473: IFFALSE 54557
// for i = 1 to tigers do
54475: LD_ADDR_VAR 0 11
54479: PUSH
54480: DOUBLE
54481: LD_INT 1
54483: DEC
54484: ST_TO_ADDR
54485: LD_VAR 0 2
54489: PUSH
54490: FOR_TO
54491: IFFALSE 54555
// begin hc_class = class_tiger ;
54493: LD_ADDR_OWVAR 28
54497: PUSH
54498: LD_INT 14
54500: ST_TO_ADDR
// hc_gallery =  ;
54501: LD_ADDR_OWVAR 33
54505: PUSH
54506: LD_STRING 
54508: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
54509: LD_ADDR_OWVAR 35
54513: PUSH
54514: LD_INT 7
54516: NEG
54517: PPUSH
54518: LD_INT 7
54520: PPUSH
54521: CALL_OW 12
54525: ST_TO_ADDR
// animal := CreateHuman ;
54526: LD_ADDR_VAR 0 12
54530: PUSH
54531: CALL_OW 44
54535: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54536: LD_VAR 0 12
54540: PPUSH
54541: LD_VAR 0 8
54545: PPUSH
54546: LD_INT 0
54548: PPUSH
54549: CALL 61072 0 3
// end ;
54553: GO 54490
54555: POP
54556: POP
// if apemans then
54557: LD_VAR 0 3
54561: IFFALSE 54684
// for i = 1 to apemans do
54563: LD_ADDR_VAR 0 11
54567: PUSH
54568: DOUBLE
54569: LD_INT 1
54571: DEC
54572: ST_TO_ADDR
54573: LD_VAR 0 3
54577: PUSH
54578: FOR_TO
54579: IFFALSE 54682
// begin hc_class = class_apeman ;
54581: LD_ADDR_OWVAR 28
54585: PUSH
54586: LD_INT 12
54588: ST_TO_ADDR
// hc_gallery =  ;
54589: LD_ADDR_OWVAR 33
54593: PUSH
54594: LD_STRING 
54596: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
54597: LD_ADDR_OWVAR 35
54601: PUSH
54602: LD_INT 5
54604: NEG
54605: PPUSH
54606: LD_INT 5
54608: PPUSH
54609: CALL_OW 12
54613: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
54614: LD_ADDR_OWVAR 31
54618: PUSH
54619: LD_INT 1
54621: PPUSH
54622: LD_INT 3
54624: PPUSH
54625: CALL_OW 12
54629: PUSH
54630: LD_INT 1
54632: PPUSH
54633: LD_INT 3
54635: PPUSH
54636: CALL_OW 12
54640: PUSH
54641: LD_INT 0
54643: PUSH
54644: LD_INT 0
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: LIST
54651: LIST
54652: ST_TO_ADDR
// animal := CreateHuman ;
54653: LD_ADDR_VAR 0 12
54657: PUSH
54658: CALL_OW 44
54662: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54663: LD_VAR 0 12
54667: PPUSH
54668: LD_VAR 0 8
54672: PPUSH
54673: LD_INT 0
54675: PPUSH
54676: CALL 61072 0 3
// end ;
54680: GO 54578
54682: POP
54683: POP
// if enchidnas then
54684: LD_VAR 0 4
54688: IFFALSE 54755
// for i = 1 to enchidnas do
54690: LD_ADDR_VAR 0 11
54694: PUSH
54695: DOUBLE
54696: LD_INT 1
54698: DEC
54699: ST_TO_ADDR
54700: LD_VAR 0 4
54704: PUSH
54705: FOR_TO
54706: IFFALSE 54753
// begin hc_class = 13 ;
54708: LD_ADDR_OWVAR 28
54712: PUSH
54713: LD_INT 13
54715: ST_TO_ADDR
// hc_gallery =  ;
54716: LD_ADDR_OWVAR 33
54720: PUSH
54721: LD_STRING 
54723: ST_TO_ADDR
// animal := CreateHuman ;
54724: LD_ADDR_VAR 0 12
54728: PUSH
54729: CALL_OW 44
54733: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54734: LD_VAR 0 12
54738: PPUSH
54739: LD_VAR 0 8
54743: PPUSH
54744: LD_INT 0
54746: PPUSH
54747: CALL 61072 0 3
// end ;
54751: GO 54705
54753: POP
54754: POP
// if fishes then
54755: LD_VAR 0 7
54759: IFFALSE 54826
// for i = 1 to fishes do
54761: LD_ADDR_VAR 0 11
54765: PUSH
54766: DOUBLE
54767: LD_INT 1
54769: DEC
54770: ST_TO_ADDR
54771: LD_VAR 0 7
54775: PUSH
54776: FOR_TO
54777: IFFALSE 54824
// begin hc_class = 20 ;
54779: LD_ADDR_OWVAR 28
54783: PUSH
54784: LD_INT 20
54786: ST_TO_ADDR
// hc_gallery =  ;
54787: LD_ADDR_OWVAR 33
54791: PUSH
54792: LD_STRING 
54794: ST_TO_ADDR
// animal := CreateHuman ;
54795: LD_ADDR_VAR 0 12
54799: PUSH
54800: CALL_OW 44
54804: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
54805: LD_VAR 0 12
54809: PPUSH
54810: LD_VAR 0 9
54814: PPUSH
54815: LD_INT 0
54817: PPUSH
54818: CALL 61072 0 3
// end ;
54822: GO 54776
54824: POP
54825: POP
// end ;
54826: LD_VAR 0 10
54830: RET
// export function WantHeal ( sci , unit ) ; begin
54831: LD_INT 0
54833: PPUSH
// if GetTaskList ( sci ) > 0 then
54834: LD_VAR 0 1
54838: PPUSH
54839: CALL_OW 437
54843: PUSH
54844: LD_INT 0
54846: GREATER
54847: IFFALSE 54917
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
54849: LD_VAR 0 1
54853: PPUSH
54854: CALL_OW 437
54858: PUSH
54859: LD_INT 1
54861: ARRAY
54862: PUSH
54863: LD_INT 1
54865: ARRAY
54866: PUSH
54867: LD_STRING l
54869: EQUAL
54870: PUSH
54871: LD_VAR 0 1
54875: PPUSH
54876: CALL_OW 437
54880: PUSH
54881: LD_INT 1
54883: ARRAY
54884: PUSH
54885: LD_INT 4
54887: ARRAY
54888: PUSH
54889: LD_VAR 0 2
54893: EQUAL
54894: AND
54895: IFFALSE 54907
// result := true else
54897: LD_ADDR_VAR 0 3
54901: PUSH
54902: LD_INT 1
54904: ST_TO_ADDR
54905: GO 54915
// result := false ;
54907: LD_ADDR_VAR 0 3
54911: PUSH
54912: LD_INT 0
54914: ST_TO_ADDR
// end else
54915: GO 54925
// result := false ;
54917: LD_ADDR_VAR 0 3
54921: PUSH
54922: LD_INT 0
54924: ST_TO_ADDR
// end ;
54925: LD_VAR 0 3
54929: RET
// export function HealTarget ( sci ) ; begin
54930: LD_INT 0
54932: PPUSH
// if not sci then
54933: LD_VAR 0 1
54937: NOT
54938: IFFALSE 54942
// exit ;
54940: GO 55007
// result := 0 ;
54942: LD_ADDR_VAR 0 2
54946: PUSH
54947: LD_INT 0
54949: ST_TO_ADDR
// if GetTaskList ( sci ) then
54950: LD_VAR 0 1
54954: PPUSH
54955: CALL_OW 437
54959: IFFALSE 55007
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
54961: LD_VAR 0 1
54965: PPUSH
54966: CALL_OW 437
54970: PUSH
54971: LD_INT 1
54973: ARRAY
54974: PUSH
54975: LD_INT 1
54977: ARRAY
54978: PUSH
54979: LD_STRING l
54981: EQUAL
54982: IFFALSE 55007
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
54984: LD_ADDR_VAR 0 2
54988: PUSH
54989: LD_VAR 0 1
54993: PPUSH
54994: CALL_OW 437
54998: PUSH
54999: LD_INT 1
55001: ARRAY
55002: PUSH
55003: LD_INT 4
55005: ARRAY
55006: ST_TO_ADDR
// end ;
55007: LD_VAR 0 2
55011: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking , to_heal , healers , to_repair , repairs , empty_vehs , side ; begin
55012: LD_INT 0
55014: PPUSH
55015: PPUSH
55016: PPUSH
55017: PPUSH
55018: PPUSH
55019: PPUSH
55020: PPUSH
55021: PPUSH
55022: PPUSH
55023: PPUSH
55024: PPUSH
55025: PPUSH
55026: PPUSH
55027: PPUSH
55028: PPUSH
55029: PPUSH
55030: PPUSH
55031: PPUSH
55032: PPUSH
55033: PPUSH
55034: PPUSH
55035: PPUSH
55036: PPUSH
55037: PPUSH
55038: PPUSH
55039: PPUSH
55040: PPUSH
55041: PPUSH
55042: PPUSH
55043: PPUSH
55044: PPUSH
55045: PPUSH
55046: PPUSH
55047: PPUSH
// if not list then
55048: LD_VAR 0 1
55052: NOT
55053: IFFALSE 55057
// exit ;
55055: GO 59683
// base := list [ 1 ] ;
55057: LD_ADDR_VAR 0 3
55061: PUSH
55062: LD_VAR 0 1
55066: PUSH
55067: LD_INT 1
55069: ARRAY
55070: ST_TO_ADDR
// group := list [ 2 ] ;
55071: LD_ADDR_VAR 0 4
55075: PUSH
55076: LD_VAR 0 1
55080: PUSH
55081: LD_INT 2
55083: ARRAY
55084: ST_TO_ADDR
// path := list [ 3 ] ;
55085: LD_ADDR_VAR 0 5
55089: PUSH
55090: LD_VAR 0 1
55094: PUSH
55095: LD_INT 3
55097: ARRAY
55098: ST_TO_ADDR
// flags := list [ 4 ] ;
55099: LD_ADDR_VAR 0 6
55103: PUSH
55104: LD_VAR 0 1
55108: PUSH
55109: LD_INT 4
55111: ARRAY
55112: ST_TO_ADDR
// mined := [ ] ;
55113: LD_ADDR_VAR 0 27
55117: PUSH
55118: EMPTY
55119: ST_TO_ADDR
// bombed := [ ] ;
55120: LD_ADDR_VAR 0 28
55124: PUSH
55125: EMPTY
55126: ST_TO_ADDR
// healers := [ ] ;
55127: LD_ADDR_VAR 0 31
55131: PUSH
55132: EMPTY
55133: ST_TO_ADDR
// to_heal := [ ] ;
55134: LD_ADDR_VAR 0 30
55138: PUSH
55139: EMPTY
55140: ST_TO_ADDR
// repairs := [ ] ;
55141: LD_ADDR_VAR 0 33
55145: PUSH
55146: EMPTY
55147: ST_TO_ADDR
// to_repair := [ ] ;
55148: LD_ADDR_VAR 0 32
55152: PUSH
55153: EMPTY
55154: ST_TO_ADDR
// if not group or not path then
55155: LD_VAR 0 4
55159: NOT
55160: PUSH
55161: LD_VAR 0 5
55165: NOT
55166: OR
55167: IFFALSE 55171
// exit ;
55169: GO 59683
// side := GetSide ( group [ 1 ] ) ;
55171: LD_ADDR_VAR 0 35
55175: PUSH
55176: LD_VAR 0 4
55180: PUSH
55181: LD_INT 1
55183: ARRAY
55184: PPUSH
55185: CALL_OW 255
55189: ST_TO_ADDR
// if flags then
55190: LD_VAR 0 6
55194: IFFALSE 55338
// begin f_ignore_area := flags [ 1 ] ;
55196: LD_ADDR_VAR 0 17
55200: PUSH
55201: LD_VAR 0 6
55205: PUSH
55206: LD_INT 1
55208: ARRAY
55209: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
55210: LD_ADDR_VAR 0 18
55214: PUSH
55215: LD_VAR 0 6
55219: PUSH
55220: LD_INT 2
55222: ARRAY
55223: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
55224: LD_ADDR_VAR 0 19
55228: PUSH
55229: LD_VAR 0 6
55233: PUSH
55234: LD_INT 3
55236: ARRAY
55237: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
55238: LD_ADDR_VAR 0 20
55242: PUSH
55243: LD_VAR 0 6
55247: PUSH
55248: LD_INT 4
55250: ARRAY
55251: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
55252: LD_ADDR_VAR 0 21
55256: PUSH
55257: LD_VAR 0 6
55261: PUSH
55262: LD_INT 5
55264: ARRAY
55265: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
55266: LD_ADDR_VAR 0 22
55270: PUSH
55271: LD_VAR 0 6
55275: PUSH
55276: LD_INT 6
55278: ARRAY
55279: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
55280: LD_ADDR_VAR 0 23
55284: PUSH
55285: LD_VAR 0 6
55289: PUSH
55290: LD_INT 7
55292: ARRAY
55293: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
55294: LD_ADDR_VAR 0 24
55298: PUSH
55299: LD_VAR 0 6
55303: PUSH
55304: LD_INT 8
55306: ARRAY
55307: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
55308: LD_ADDR_VAR 0 25
55312: PUSH
55313: LD_VAR 0 6
55317: PUSH
55318: LD_INT 9
55320: ARRAY
55321: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
55322: LD_ADDR_VAR 0 26
55326: PUSH
55327: LD_VAR 0 6
55331: PUSH
55332: LD_INT 10
55334: ARRAY
55335: ST_TO_ADDR
// end else
55336: GO 55418
// begin f_ignore_area := false ;
55338: LD_ADDR_VAR 0 17
55342: PUSH
55343: LD_INT 0
55345: ST_TO_ADDR
// f_capture := false ;
55346: LD_ADDR_VAR 0 18
55350: PUSH
55351: LD_INT 0
55353: ST_TO_ADDR
// f_ignore_civ := false ;
55354: LD_ADDR_VAR 0 19
55358: PUSH
55359: LD_INT 0
55361: ST_TO_ADDR
// f_murder := false ;
55362: LD_ADDR_VAR 0 20
55366: PUSH
55367: LD_INT 0
55369: ST_TO_ADDR
// f_mines := false ;
55370: LD_ADDR_VAR 0 21
55374: PUSH
55375: LD_INT 0
55377: ST_TO_ADDR
// f_repair := false ;
55378: LD_ADDR_VAR 0 22
55382: PUSH
55383: LD_INT 0
55385: ST_TO_ADDR
// f_heal := false ;
55386: LD_ADDR_VAR 0 23
55390: PUSH
55391: LD_INT 0
55393: ST_TO_ADDR
// f_spacetime := false ;
55394: LD_ADDR_VAR 0 24
55398: PUSH
55399: LD_INT 0
55401: ST_TO_ADDR
// f_attack_depot := false ;
55402: LD_ADDR_VAR 0 25
55406: PUSH
55407: LD_INT 0
55409: ST_TO_ADDR
// f_crawl := false ;
55410: LD_ADDR_VAR 0 26
55414: PUSH
55415: LD_INT 0
55417: ST_TO_ADDR
// end ; if f_heal then
55418: LD_VAR 0 23
55422: IFFALSE 55449
// healers := UnitFilter ( group , [ f_class , 4 ] ) ;
55424: LD_ADDR_VAR 0 31
55428: PUSH
55429: LD_VAR 0 4
55433: PPUSH
55434: LD_INT 25
55436: PUSH
55437: LD_INT 4
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: PPUSH
55444: CALL_OW 72
55448: ST_TO_ADDR
// if f_repair then
55449: LD_VAR 0 22
55453: IFFALSE 55480
// repairs := UnitFilter ( group , [ f_class , 3 ] ) ;
55455: LD_ADDR_VAR 0 33
55459: PUSH
55460: LD_VAR 0 4
55464: PPUSH
55465: LD_INT 25
55467: PUSH
55468: LD_INT 3
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PPUSH
55475: CALL_OW 72
55479: ST_TO_ADDR
// units_path := [ ] ;
55480: LD_ADDR_VAR 0 16
55484: PUSH
55485: EMPTY
55486: ST_TO_ADDR
// for i = 1 to group do
55487: LD_ADDR_VAR 0 7
55491: PUSH
55492: DOUBLE
55493: LD_INT 1
55495: DEC
55496: ST_TO_ADDR
55497: LD_VAR 0 4
55501: PUSH
55502: FOR_TO
55503: IFFALSE 55532
// units_path := Replace ( units_path , i , path ) ;
55505: LD_ADDR_VAR 0 16
55509: PUSH
55510: LD_VAR 0 16
55514: PPUSH
55515: LD_VAR 0 7
55519: PPUSH
55520: LD_VAR 0 5
55524: PPUSH
55525: CALL_OW 1
55529: ST_TO_ADDR
55530: GO 55502
55532: POP
55533: POP
// repeat for i = group downto 1 do
55534: LD_ADDR_VAR 0 7
55538: PUSH
55539: DOUBLE
55540: LD_VAR 0 4
55544: INC
55545: ST_TO_ADDR
55546: LD_INT 1
55548: PUSH
55549: FOR_DOWNTO
55550: IFFALSE 59646
// begin wait ( 5 ) ;
55552: LD_INT 5
55554: PPUSH
55555: CALL_OW 67
// tmp := [ ] ;
55559: LD_ADDR_VAR 0 14
55563: PUSH
55564: EMPTY
55565: ST_TO_ADDR
// attacking := false ;
55566: LD_ADDR_VAR 0 29
55570: PUSH
55571: LD_INT 0
55573: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
55574: LD_VAR 0 4
55578: PUSH
55579: LD_VAR 0 7
55583: ARRAY
55584: PPUSH
55585: CALL_OW 301
55589: PUSH
55590: LD_VAR 0 4
55594: PUSH
55595: LD_VAR 0 7
55599: ARRAY
55600: NOT
55601: OR
55602: IFFALSE 55711
// begin if GetType ( group [ i ] ) = unit_human then
55604: LD_VAR 0 4
55608: PUSH
55609: LD_VAR 0 7
55613: ARRAY
55614: PPUSH
55615: CALL_OW 247
55619: PUSH
55620: LD_INT 1
55622: EQUAL
55623: IFFALSE 55669
// begin to_heal := to_heal diff group [ i ] ;
55625: LD_ADDR_VAR 0 30
55629: PUSH
55630: LD_VAR 0 30
55634: PUSH
55635: LD_VAR 0 4
55639: PUSH
55640: LD_VAR 0 7
55644: ARRAY
55645: DIFF
55646: ST_TO_ADDR
// healers := healers diff group [ i ] ;
55647: LD_ADDR_VAR 0 31
55651: PUSH
55652: LD_VAR 0 31
55656: PUSH
55657: LD_VAR 0 4
55661: PUSH
55662: LD_VAR 0 7
55666: ARRAY
55667: DIFF
55668: ST_TO_ADDR
// end ; group := Delete ( group , i ) ;
55669: LD_ADDR_VAR 0 4
55673: PUSH
55674: LD_VAR 0 4
55678: PPUSH
55679: LD_VAR 0 7
55683: PPUSH
55684: CALL_OW 3
55688: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
55689: LD_ADDR_VAR 0 16
55693: PUSH
55694: LD_VAR 0 16
55698: PPUSH
55699: LD_VAR 0 7
55703: PPUSH
55704: CALL_OW 3
55708: ST_TO_ADDR
// continue ;
55709: GO 55549
// end ; if f_repair then
55711: LD_VAR 0 22
55715: IFFALSE 56204
// begin if GetType ( group [ i ] ) = unit_vehicle then
55717: LD_VAR 0 4
55721: PUSH
55722: LD_VAR 0 7
55726: ARRAY
55727: PPUSH
55728: CALL_OW 247
55732: PUSH
55733: LD_INT 2
55735: EQUAL
55736: IFFALSE 55926
// begin if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_repair then
55738: LD_VAR 0 4
55742: PUSH
55743: LD_VAR 0 7
55747: ARRAY
55748: PPUSH
55749: CALL_OW 256
55753: PUSH
55754: LD_INT 700
55756: LESS
55757: PUSH
55758: LD_VAR 0 4
55762: PUSH
55763: LD_VAR 0 7
55767: ARRAY
55768: PUSH
55769: LD_VAR 0 32
55773: IN
55774: NOT
55775: AND
55776: IFFALSE 55800
// to_repair := to_repair union group [ i ] ;
55778: LD_ADDR_VAR 0 32
55782: PUSH
55783: LD_VAR 0 32
55787: PUSH
55788: LD_VAR 0 4
55792: PUSH
55793: LD_VAR 0 7
55797: ARRAY
55798: UNION
55799: ST_TO_ADDR
// if GetLives ( group [ i ] ) = 1000 and group [ i ] in to_repair then
55800: LD_VAR 0 4
55804: PUSH
55805: LD_VAR 0 7
55809: ARRAY
55810: PPUSH
55811: CALL_OW 256
55815: PUSH
55816: LD_INT 1000
55818: EQUAL
55819: PUSH
55820: LD_VAR 0 4
55824: PUSH
55825: LD_VAR 0 7
55829: ARRAY
55830: PUSH
55831: LD_VAR 0 32
55835: IN
55836: AND
55837: IFFALSE 55861
// to_repair := to_repair diff group [ i ] ;
55839: LD_ADDR_VAR 0 32
55843: PUSH
55844: LD_VAR 0 32
55848: PUSH
55849: LD_VAR 0 4
55853: PUSH
55854: LD_VAR 0 7
55858: ARRAY
55859: DIFF
55860: ST_TO_ADDR
// if group [ i ] in to_repair then
55861: LD_VAR 0 4
55865: PUSH
55866: LD_VAR 0 7
55870: ARRAY
55871: PUSH
55872: LD_VAR 0 32
55876: IN
55877: IFFALSE 55924
// begin if not IsInArea ( group [ i ] , f_repair ) then
55879: LD_VAR 0 4
55883: PUSH
55884: LD_VAR 0 7
55888: ARRAY
55889: PPUSH
55890: LD_VAR 0 22
55894: PPUSH
55895: CALL_OW 308
55899: NOT
55900: IFFALSE 55922
// ComMoveToArea ( group [ i ] , f_repair ) ;
55902: LD_VAR 0 4
55906: PUSH
55907: LD_VAR 0 7
55911: ARRAY
55912: PPUSH
55913: LD_VAR 0 22
55917: PPUSH
55918: CALL_OW 113
// continue ;
55922: GO 55549
// end ; end else
55924: GO 56204
// if group [ i ] in repairs then
55926: LD_VAR 0 4
55930: PUSH
55931: LD_VAR 0 7
55935: ARRAY
55936: PUSH
55937: LD_VAR 0 33
55941: IN
55942: IFFALSE 56204
// begin if IsInUnit ( group [ i ] ) then
55944: LD_VAR 0 4
55948: PUSH
55949: LD_VAR 0 7
55953: ARRAY
55954: PPUSH
55955: CALL_OW 310
55959: IFFALSE 56027
// begin z := IsInUnit ( group [ i ] ) ;
55961: LD_ADDR_VAR 0 13
55965: PUSH
55966: LD_VAR 0 4
55970: PUSH
55971: LD_VAR 0 7
55975: ARRAY
55976: PPUSH
55977: CALL_OW 310
55981: ST_TO_ADDR
// if z in to_repair and IsInArea ( z , f_repair ) then
55982: LD_VAR 0 13
55986: PUSH
55987: LD_VAR 0 32
55991: IN
55992: PUSH
55993: LD_VAR 0 13
55997: PPUSH
55998: LD_VAR 0 22
56002: PPUSH
56003: CALL_OW 308
56007: AND
56008: IFFALSE 56025
// ComExitVehicle ( group [ i ] ) ;
56010: LD_VAR 0 4
56014: PUSH
56015: LD_VAR 0 7
56019: ARRAY
56020: PPUSH
56021: CALL_OW 121
// end else
56025: GO 56204
// begin z := UnitFilter ( group , [ [ f_inarea , f_repair ] , [ f_empty ] ] ) ;
56027: LD_ADDR_VAR 0 13
56031: PUSH
56032: LD_VAR 0 4
56036: PPUSH
56037: LD_INT 95
56039: PUSH
56040: LD_VAR 0 22
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: PUSH
56049: LD_INT 58
56051: PUSH
56052: EMPTY
56053: LIST
56054: PUSH
56055: EMPTY
56056: LIST
56057: LIST
56058: PPUSH
56059: CALL_OW 72
56063: ST_TO_ADDR
// if not HasTask ( group [ i ] ) then
56064: LD_VAR 0 4
56068: PUSH
56069: LD_VAR 0 7
56073: ARRAY
56074: PPUSH
56075: CALL_OW 314
56079: NOT
56080: IFFALSE 56202
// begin x := NearestUnitToUnit ( z , group [ i ] ) ;
56082: LD_ADDR_VAR 0 10
56086: PUSH
56087: LD_VAR 0 13
56091: PPUSH
56092: LD_VAR 0 4
56096: PUSH
56097: LD_VAR 0 7
56101: ARRAY
56102: PPUSH
56103: CALL_OW 74
56107: ST_TO_ADDR
// if not x then
56108: LD_VAR 0 10
56112: NOT
56113: IFFALSE 56117
// continue ;
56115: GO 55549
// if GetLives ( x ) < 1000 then
56117: LD_VAR 0 10
56121: PPUSH
56122: CALL_OW 256
56126: PUSH
56127: LD_INT 1000
56129: LESS
56130: IFFALSE 56154
// ComRepairVehicle ( group [ i ] , x ) else
56132: LD_VAR 0 4
56136: PUSH
56137: LD_VAR 0 7
56141: ARRAY
56142: PPUSH
56143: LD_VAR 0 10
56147: PPUSH
56148: CALL_OW 129
56152: GO 56202
// if not ( f_heal and GetLives ( group [ i ] ) < 1000 ) then
56154: LD_VAR 0 23
56158: PUSH
56159: LD_VAR 0 4
56163: PUSH
56164: LD_VAR 0 7
56168: ARRAY
56169: PPUSH
56170: CALL_OW 256
56174: PUSH
56175: LD_INT 1000
56177: LESS
56178: AND
56179: NOT
56180: IFFALSE 56202
// ComEnterUnit ( group [ i ] , x ) ;
56182: LD_VAR 0 4
56186: PUSH
56187: LD_VAR 0 7
56191: ARRAY
56192: PPUSH
56193: LD_VAR 0 10
56197: PPUSH
56198: CALL_OW 120
// end ; continue ;
56202: GO 55549
// end ; end ; end ; if f_heal and GetType ( group [ i ] ) = unit_human then
56204: LD_VAR 0 23
56208: PUSH
56209: LD_VAR 0 4
56213: PUSH
56214: LD_VAR 0 7
56218: ARRAY
56219: PPUSH
56220: CALL_OW 247
56224: PUSH
56225: LD_INT 1
56227: EQUAL
56228: AND
56229: IFFALSE 56707
// begin if group [ i ] in healers then
56231: LD_VAR 0 4
56235: PUSH
56236: LD_VAR 0 7
56240: ARRAY
56241: PUSH
56242: LD_VAR 0 31
56246: IN
56247: IFFALSE 56520
// begin if not IsInArea ( group [ i ] , f_heal ) and not HasTask ( group [ i ] ) then
56249: LD_VAR 0 4
56253: PUSH
56254: LD_VAR 0 7
56258: ARRAY
56259: PPUSH
56260: LD_VAR 0 23
56264: PPUSH
56265: CALL_OW 308
56269: NOT
56270: PUSH
56271: LD_VAR 0 4
56275: PUSH
56276: LD_VAR 0 7
56280: ARRAY
56281: PPUSH
56282: CALL_OW 314
56286: NOT
56287: AND
56288: IFFALSE 56312
// ComMoveToArea ( group [ i ] , f_heal ) else
56290: LD_VAR 0 4
56294: PUSH
56295: LD_VAR 0 7
56299: ARRAY
56300: PPUSH
56301: LD_VAR 0 23
56305: PPUSH
56306: CALL_OW 113
56310: GO 56518
// if GetLives ( HealTarget ( group [ i ] ) ) = 1000 then
56312: LD_VAR 0 4
56316: PUSH
56317: LD_VAR 0 7
56321: ARRAY
56322: PPUSH
56323: CALL 54930 0 1
56327: PPUSH
56328: CALL_OW 256
56332: PUSH
56333: LD_INT 1000
56335: EQUAL
56336: IFFALSE 56355
// ComStop ( group [ i ] ) else
56338: LD_VAR 0 4
56342: PUSH
56343: LD_VAR 0 7
56347: ARRAY
56348: PPUSH
56349: CALL_OW 141
56353: GO 56518
// if not HasTask ( group [ i ] ) and to_heal then
56355: LD_VAR 0 4
56359: PUSH
56360: LD_VAR 0 7
56364: ARRAY
56365: PPUSH
56366: CALL_OW 314
56370: NOT
56371: PUSH
56372: LD_VAR 0 30
56376: AND
56377: IFFALSE 56518
// begin z := NearestUnitToUnit ( UnitFilter ( to_heal , [ f_not , [ f_inside ] ] ) , group [ i ] ) ;
56379: LD_ADDR_VAR 0 13
56383: PUSH
56384: LD_VAR 0 30
56388: PPUSH
56389: LD_INT 3
56391: PUSH
56392: LD_INT 54
56394: PUSH
56395: EMPTY
56396: LIST
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: PPUSH
56402: CALL_OW 72
56406: PPUSH
56407: LD_VAR 0 4
56411: PUSH
56412: LD_VAR 0 7
56416: ARRAY
56417: PPUSH
56418: CALL_OW 74
56422: ST_TO_ADDR
// if z then
56423: LD_VAR 0 13
56427: IFFALSE 56518
// if FilterAllUnits ( [ [ f_dist , z , 10 ] , [ f_enemy , GetSide ( z ) ] ] ) = 0 then
56429: LD_INT 91
56431: PUSH
56432: LD_VAR 0 13
56436: PUSH
56437: LD_INT 10
56439: PUSH
56440: EMPTY
56441: LIST
56442: LIST
56443: LIST
56444: PUSH
56445: LD_INT 81
56447: PUSH
56448: LD_VAR 0 13
56452: PPUSH
56453: CALL_OW 255
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: PPUSH
56466: CALL_OW 69
56470: PUSH
56471: LD_INT 0
56473: EQUAL
56474: IFFALSE 56498
// ComHeal ( group [ i ] , z ) else
56476: LD_VAR 0 4
56480: PUSH
56481: LD_VAR 0 7
56485: ARRAY
56486: PPUSH
56487: LD_VAR 0 13
56491: PPUSH
56492: CALL_OW 128
56496: GO 56518
// ComMoveToArea ( group [ i ] , f_heal ) ;
56498: LD_VAR 0 4
56502: PUSH
56503: LD_VAR 0 7
56507: ARRAY
56508: PPUSH
56509: LD_VAR 0 23
56513: PPUSH
56514: CALL_OW 113
// end ; continue ;
56518: GO 55549
// end ; if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_heal then
56520: LD_VAR 0 4
56524: PUSH
56525: LD_VAR 0 7
56529: ARRAY
56530: PPUSH
56531: CALL_OW 256
56535: PUSH
56536: LD_INT 700
56538: LESS
56539: PUSH
56540: LD_VAR 0 4
56544: PUSH
56545: LD_VAR 0 7
56549: ARRAY
56550: PUSH
56551: LD_VAR 0 30
56555: IN
56556: NOT
56557: AND
56558: IFFALSE 56582
// to_heal := to_heal union group [ i ] ;
56560: LD_ADDR_VAR 0 30
56564: PUSH
56565: LD_VAR 0 30
56569: PUSH
56570: LD_VAR 0 4
56574: PUSH
56575: LD_VAR 0 7
56579: ARRAY
56580: UNION
56581: ST_TO_ADDR
// if group [ i ] in to_heal then
56582: LD_VAR 0 4
56586: PUSH
56587: LD_VAR 0 7
56591: ARRAY
56592: PUSH
56593: LD_VAR 0 30
56597: IN
56598: IFFALSE 56707
// begin if GetLives ( group [ i ] ) = 1000 then
56600: LD_VAR 0 4
56604: PUSH
56605: LD_VAR 0 7
56609: ARRAY
56610: PPUSH
56611: CALL_OW 256
56615: PUSH
56616: LD_INT 1000
56618: EQUAL
56619: IFFALSE 56645
// to_heal := to_heal diff group [ i ] else
56621: LD_ADDR_VAR 0 30
56625: PUSH
56626: LD_VAR 0 30
56630: PUSH
56631: LD_VAR 0 4
56635: PUSH
56636: LD_VAR 0 7
56640: ARRAY
56641: DIFF
56642: ST_TO_ADDR
56643: GO 56707
// begin if not IsInArea ( group [ i ] , to_heal ) then
56645: LD_VAR 0 4
56649: PUSH
56650: LD_VAR 0 7
56654: ARRAY
56655: PPUSH
56656: LD_VAR 0 30
56660: PPUSH
56661: CALL_OW 308
56665: NOT
56666: IFFALSE 56690
// ComMoveToArea ( group [ i ] , f_heal ) else
56668: LD_VAR 0 4
56672: PUSH
56673: LD_VAR 0 7
56677: ARRAY
56678: PPUSH
56679: LD_VAR 0 23
56683: PPUSH
56684: CALL_OW 113
56688: GO 56705
// ComHold ( group [ i ] ) ;
56690: LD_VAR 0 4
56694: PUSH
56695: LD_VAR 0 7
56699: ARRAY
56700: PPUSH
56701: CALL_OW 140
// continue ;
56705: GO 55549
// end ; end ; end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
56707: LD_VAR 0 4
56711: PUSH
56712: LD_VAR 0 7
56716: ARRAY
56717: PPUSH
56718: LD_INT 10
56720: PPUSH
56721: CALL 53327 0 2
56725: NOT
56726: PUSH
56727: LD_VAR 0 16
56731: PUSH
56732: LD_VAR 0 7
56736: ARRAY
56737: PUSH
56738: EMPTY
56739: EQUAL
56740: NOT
56741: AND
56742: IFFALSE 57008
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
56744: LD_VAR 0 4
56748: PUSH
56749: LD_VAR 0 7
56753: ARRAY
56754: PPUSH
56755: CALL_OW 262
56759: PUSH
56760: LD_INT 1
56762: PUSH
56763: LD_INT 2
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: IN
56770: IFFALSE 56811
// if GetFuel ( group [ i ] ) < 10 then
56772: LD_VAR 0 4
56776: PUSH
56777: LD_VAR 0 7
56781: ARRAY
56782: PPUSH
56783: CALL_OW 261
56787: PUSH
56788: LD_INT 10
56790: LESS
56791: IFFALSE 56811
// SetFuel ( group [ i ] , 12 ) ;
56793: LD_VAR 0 4
56797: PUSH
56798: LD_VAR 0 7
56802: ARRAY
56803: PPUSH
56804: LD_INT 12
56806: PPUSH
56807: CALL_OW 240
// if units_path [ i ] then
56811: LD_VAR 0 16
56815: PUSH
56816: LD_VAR 0 7
56820: ARRAY
56821: IFFALSE 57006
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
56823: LD_VAR 0 4
56827: PUSH
56828: LD_VAR 0 7
56832: ARRAY
56833: PPUSH
56834: LD_VAR 0 16
56838: PUSH
56839: LD_VAR 0 7
56843: ARRAY
56844: PUSH
56845: LD_INT 1
56847: ARRAY
56848: PUSH
56849: LD_INT 1
56851: ARRAY
56852: PPUSH
56853: LD_VAR 0 16
56857: PUSH
56858: LD_VAR 0 7
56862: ARRAY
56863: PUSH
56864: LD_INT 1
56866: ARRAY
56867: PUSH
56868: LD_INT 2
56870: ARRAY
56871: PPUSH
56872: CALL_OW 297
56876: PUSH
56877: LD_INT 6
56879: GREATER
56880: IFFALSE 56955
// begin if not HasTask ( group [ i ] ) then
56882: LD_VAR 0 4
56886: PUSH
56887: LD_VAR 0 7
56891: ARRAY
56892: PPUSH
56893: CALL_OW 314
56897: NOT
56898: IFFALSE 56953
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
56900: LD_VAR 0 4
56904: PUSH
56905: LD_VAR 0 7
56909: ARRAY
56910: PPUSH
56911: LD_VAR 0 16
56915: PUSH
56916: LD_VAR 0 7
56920: ARRAY
56921: PUSH
56922: LD_INT 1
56924: ARRAY
56925: PUSH
56926: LD_INT 1
56928: ARRAY
56929: PPUSH
56930: LD_VAR 0 16
56934: PUSH
56935: LD_VAR 0 7
56939: ARRAY
56940: PUSH
56941: LD_INT 1
56943: ARRAY
56944: PUSH
56945: LD_INT 2
56947: ARRAY
56948: PPUSH
56949: CALL_OW 114
// end else
56953: GO 57006
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
56955: LD_ADDR_VAR 0 15
56959: PUSH
56960: LD_VAR 0 16
56964: PUSH
56965: LD_VAR 0 7
56969: ARRAY
56970: PPUSH
56971: LD_INT 1
56973: PPUSH
56974: CALL_OW 3
56978: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
56979: LD_ADDR_VAR 0 16
56983: PUSH
56984: LD_VAR 0 16
56988: PPUSH
56989: LD_VAR 0 7
56993: PPUSH
56994: LD_VAR 0 15
56998: PPUSH
56999: CALL_OW 1
57003: ST_TO_ADDR
// continue ;
57004: GO 55549
// end ; end ; end else
57006: GO 59644
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
57008: LD_ADDR_VAR 0 14
57012: PUSH
57013: LD_INT 81
57015: PUSH
57016: LD_VAR 0 4
57020: PUSH
57021: LD_VAR 0 7
57025: ARRAY
57026: PPUSH
57027: CALL_OW 255
57031: PUSH
57032: EMPTY
57033: LIST
57034: LIST
57035: PPUSH
57036: CALL_OW 69
57040: ST_TO_ADDR
// if not tmp then
57041: LD_VAR 0 14
57045: NOT
57046: IFFALSE 57050
// continue ;
57048: GO 55549
// if f_ignore_area then
57050: LD_VAR 0 17
57054: IFFALSE 57142
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
57056: LD_ADDR_VAR 0 15
57060: PUSH
57061: LD_VAR 0 14
57065: PPUSH
57066: LD_INT 3
57068: PUSH
57069: LD_INT 92
57071: PUSH
57072: LD_VAR 0 17
57076: PUSH
57077: LD_INT 1
57079: ARRAY
57080: PUSH
57081: LD_VAR 0 17
57085: PUSH
57086: LD_INT 2
57088: ARRAY
57089: PUSH
57090: LD_VAR 0 17
57094: PUSH
57095: LD_INT 3
57097: ARRAY
57098: PUSH
57099: EMPTY
57100: LIST
57101: LIST
57102: LIST
57103: LIST
57104: PUSH
57105: EMPTY
57106: LIST
57107: LIST
57108: PPUSH
57109: CALL_OW 72
57113: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
57114: LD_VAR 0 14
57118: PUSH
57119: LD_VAR 0 15
57123: DIFF
57124: IFFALSE 57142
// tmp := tmp diff tmp2 ;
57126: LD_ADDR_VAR 0 14
57130: PUSH
57131: LD_VAR 0 14
57135: PUSH
57136: LD_VAR 0 15
57140: DIFF
57141: ST_TO_ADDR
// end ; if not f_murder then
57142: LD_VAR 0 20
57146: NOT
57147: IFFALSE 57205
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
57149: LD_ADDR_VAR 0 15
57153: PUSH
57154: LD_VAR 0 14
57158: PPUSH
57159: LD_INT 3
57161: PUSH
57162: LD_INT 50
57164: PUSH
57165: EMPTY
57166: LIST
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: PPUSH
57172: CALL_OW 72
57176: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
57177: LD_VAR 0 14
57181: PUSH
57182: LD_VAR 0 15
57186: DIFF
57187: IFFALSE 57205
// tmp := tmp diff tmp2 ;
57189: LD_ADDR_VAR 0 14
57193: PUSH
57194: LD_VAR 0 14
57198: PUSH
57199: LD_VAR 0 15
57203: DIFF
57204: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
57205: LD_ADDR_VAR 0 14
57209: PUSH
57210: LD_VAR 0 4
57214: PUSH
57215: LD_VAR 0 7
57219: ARRAY
57220: PPUSH
57221: LD_VAR 0 14
57225: PPUSH
57226: LD_INT 1
57228: PPUSH
57229: LD_INT 1
57231: PPUSH
57232: CALL 26994 0 4
57236: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
57237: LD_VAR 0 4
57241: PUSH
57242: LD_VAR 0 7
57246: ARRAY
57247: PPUSH
57248: CALL_OW 257
57252: PUSH
57253: LD_INT 1
57255: EQUAL
57256: IFFALSE 57704
// begin if WantPlant ( group [ i ] ) then
57258: LD_VAR 0 4
57262: PUSH
57263: LD_VAR 0 7
57267: ARRAY
57268: PPUSH
57269: CALL 26495 0 1
57273: IFFALSE 57277
// continue ;
57275: GO 55549
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
57277: LD_VAR 0 18
57281: PUSH
57282: LD_VAR 0 4
57286: PUSH
57287: LD_VAR 0 7
57291: ARRAY
57292: PPUSH
57293: CALL_OW 310
57297: NOT
57298: AND
57299: PUSH
57300: LD_VAR 0 14
57304: PUSH
57305: LD_INT 1
57307: ARRAY
57308: PUSH
57309: LD_VAR 0 14
57313: PPUSH
57314: LD_INT 21
57316: PUSH
57317: LD_INT 2
57319: PUSH
57320: EMPTY
57321: LIST
57322: LIST
57323: PUSH
57324: LD_INT 58
57326: PUSH
57327: EMPTY
57328: LIST
57329: PUSH
57330: EMPTY
57331: LIST
57332: LIST
57333: PPUSH
57334: CALL_OW 72
57338: IN
57339: AND
57340: IFFALSE 57376
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
57342: LD_VAR 0 4
57346: PUSH
57347: LD_VAR 0 7
57351: ARRAY
57352: PPUSH
57353: LD_VAR 0 14
57357: PUSH
57358: LD_INT 1
57360: ARRAY
57361: PPUSH
57362: CALL_OW 120
// attacking := true ;
57366: LD_ADDR_VAR 0 29
57370: PUSH
57371: LD_INT 1
57373: ST_TO_ADDR
// continue ;
57374: GO 55549
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
57376: LD_VAR 0 26
57380: PUSH
57381: LD_VAR 0 4
57385: PUSH
57386: LD_VAR 0 7
57390: ARRAY
57391: PPUSH
57392: CALL_OW 257
57396: PUSH
57397: LD_INT 1
57399: EQUAL
57400: AND
57401: PUSH
57402: LD_VAR 0 4
57406: PUSH
57407: LD_VAR 0 7
57411: ARRAY
57412: PPUSH
57413: CALL_OW 256
57417: PUSH
57418: LD_INT 800
57420: LESS
57421: AND
57422: PUSH
57423: LD_VAR 0 4
57427: PUSH
57428: LD_VAR 0 7
57432: ARRAY
57433: PPUSH
57434: CALL_OW 318
57438: NOT
57439: AND
57440: IFFALSE 57457
// ComCrawl ( group [ i ] ) ;
57442: LD_VAR 0 4
57446: PUSH
57447: LD_VAR 0 7
57451: ARRAY
57452: PPUSH
57453: CALL_OW 137
// if f_mines then
57457: LD_VAR 0 21
57461: IFFALSE 57704
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
57463: LD_VAR 0 14
57467: PUSH
57468: LD_INT 1
57470: ARRAY
57471: PPUSH
57472: CALL_OW 247
57476: PUSH
57477: LD_INT 3
57479: EQUAL
57480: PUSH
57481: LD_VAR 0 14
57485: PUSH
57486: LD_INT 1
57488: ARRAY
57489: PUSH
57490: LD_VAR 0 27
57494: IN
57495: NOT
57496: AND
57497: IFFALSE 57704
// begin x := GetX ( tmp [ 1 ] ) ;
57499: LD_ADDR_VAR 0 10
57503: PUSH
57504: LD_VAR 0 14
57508: PUSH
57509: LD_INT 1
57511: ARRAY
57512: PPUSH
57513: CALL_OW 250
57517: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
57518: LD_ADDR_VAR 0 11
57522: PUSH
57523: LD_VAR 0 14
57527: PUSH
57528: LD_INT 1
57530: ARRAY
57531: PPUSH
57532: CALL_OW 251
57536: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
57537: LD_ADDR_VAR 0 12
57541: PUSH
57542: LD_VAR 0 4
57546: PUSH
57547: LD_VAR 0 7
57551: ARRAY
57552: PPUSH
57553: CALL 53412 0 1
57557: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
57558: LD_VAR 0 4
57562: PUSH
57563: LD_VAR 0 7
57567: ARRAY
57568: PPUSH
57569: LD_VAR 0 10
57573: PPUSH
57574: LD_VAR 0 11
57578: PPUSH
57579: LD_VAR 0 14
57583: PUSH
57584: LD_INT 1
57586: ARRAY
57587: PPUSH
57588: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
57592: LD_VAR 0 4
57596: PUSH
57597: LD_VAR 0 7
57601: ARRAY
57602: PPUSH
57603: LD_VAR 0 10
57607: PPUSH
57608: LD_VAR 0 12
57612: PPUSH
57613: LD_INT 7
57615: PPUSH
57616: CALL_OW 272
57620: PPUSH
57621: LD_VAR 0 11
57625: PPUSH
57626: LD_VAR 0 12
57630: PPUSH
57631: LD_INT 7
57633: PPUSH
57634: CALL_OW 273
57638: PPUSH
57639: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
57643: LD_VAR 0 4
57647: PUSH
57648: LD_VAR 0 7
57652: ARRAY
57653: PPUSH
57654: LD_INT 71
57656: PPUSH
57657: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
57661: LD_ADDR_VAR 0 27
57665: PUSH
57666: LD_VAR 0 27
57670: PPUSH
57671: LD_VAR 0 27
57675: PUSH
57676: LD_INT 1
57678: PLUS
57679: PPUSH
57680: LD_VAR 0 14
57684: PUSH
57685: LD_INT 1
57687: ARRAY
57688: PPUSH
57689: CALL_OW 1
57693: ST_TO_ADDR
// attacking := true ;
57694: LD_ADDR_VAR 0 29
57698: PUSH
57699: LD_INT 1
57701: ST_TO_ADDR
// continue ;
57702: GO 55549
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
57704: LD_VAR 0 4
57708: PUSH
57709: LD_VAR 0 7
57713: ARRAY
57714: PPUSH
57715: CALL_OW 257
57719: PUSH
57720: LD_INT 17
57722: EQUAL
57723: PUSH
57724: LD_VAR 0 4
57728: PUSH
57729: LD_VAR 0 7
57733: ARRAY
57734: PPUSH
57735: CALL_OW 110
57739: PUSH
57740: LD_INT 71
57742: EQUAL
57743: NOT
57744: AND
57745: IFFALSE 57891
// begin attacking := false ;
57747: LD_ADDR_VAR 0 29
57751: PUSH
57752: LD_INT 0
57754: ST_TO_ADDR
// k := 5 ;
57755: LD_ADDR_VAR 0 9
57759: PUSH
57760: LD_INT 5
57762: ST_TO_ADDR
// if tmp < k then
57763: LD_VAR 0 14
57767: PUSH
57768: LD_VAR 0 9
57772: LESS
57773: IFFALSE 57785
// k := tmp ;
57775: LD_ADDR_VAR 0 9
57779: PUSH
57780: LD_VAR 0 14
57784: ST_TO_ADDR
// for j = 1 to k do
57785: LD_ADDR_VAR 0 8
57789: PUSH
57790: DOUBLE
57791: LD_INT 1
57793: DEC
57794: ST_TO_ADDR
57795: LD_VAR 0 9
57799: PUSH
57800: FOR_TO
57801: IFFALSE 57889
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
57803: LD_VAR 0 14
57807: PUSH
57808: LD_VAR 0 8
57812: ARRAY
57813: PUSH
57814: LD_VAR 0 14
57818: PPUSH
57819: LD_INT 58
57821: PUSH
57822: EMPTY
57823: LIST
57824: PPUSH
57825: CALL_OW 72
57829: IN
57830: NOT
57831: IFFALSE 57887
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
57833: LD_VAR 0 4
57837: PUSH
57838: LD_VAR 0 7
57842: ARRAY
57843: PPUSH
57844: LD_VAR 0 14
57848: PUSH
57849: LD_VAR 0 8
57853: ARRAY
57854: PPUSH
57855: CALL_OW 115
// attacking := true ;
57859: LD_ADDR_VAR 0 29
57863: PUSH
57864: LD_INT 1
57866: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
57867: LD_VAR 0 4
57871: PUSH
57872: LD_VAR 0 7
57876: ARRAY
57877: PPUSH
57878: LD_INT 71
57880: PPUSH
57881: CALL_OW 109
// continue ;
57885: GO 57800
// end ; end ;
57887: GO 57800
57889: POP
57890: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
57891: LD_VAR 0 4
57895: PUSH
57896: LD_VAR 0 7
57900: ARRAY
57901: PPUSH
57902: CALL_OW 257
57906: PUSH
57907: LD_INT 8
57909: EQUAL
57910: PUSH
57911: LD_VAR 0 4
57915: PUSH
57916: LD_VAR 0 7
57920: ARRAY
57921: PPUSH
57922: CALL_OW 264
57926: PUSH
57927: LD_INT 28
57929: PUSH
57930: LD_INT 45
57932: PUSH
57933: LD_INT 7
57935: PUSH
57936: LD_INT 47
57938: PUSH
57939: EMPTY
57940: LIST
57941: LIST
57942: LIST
57943: LIST
57944: IN
57945: OR
57946: IFFALSE 58176
// begin attacking := false ;
57948: LD_ADDR_VAR 0 29
57952: PUSH
57953: LD_INT 0
57955: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
57956: LD_VAR 0 14
57960: PUSH
57961: LD_INT 1
57963: ARRAY
57964: PPUSH
57965: CALL_OW 266
57969: PUSH
57970: LD_INT 32
57972: PUSH
57973: LD_INT 31
57975: PUSH
57976: LD_INT 33
57978: PUSH
57979: LD_INT 4
57981: PUSH
57982: LD_INT 5
57984: PUSH
57985: EMPTY
57986: LIST
57987: LIST
57988: LIST
57989: LIST
57990: LIST
57991: IN
57992: IFFALSE 58176
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
57994: LD_ADDR_VAR 0 9
57998: PUSH
57999: LD_VAR 0 14
58003: PUSH
58004: LD_INT 1
58006: ARRAY
58007: PPUSH
58008: CALL_OW 266
58012: PPUSH
58013: LD_VAR 0 14
58017: PUSH
58018: LD_INT 1
58020: ARRAY
58021: PPUSH
58022: CALL_OW 250
58026: PPUSH
58027: LD_VAR 0 14
58031: PUSH
58032: LD_INT 1
58034: ARRAY
58035: PPUSH
58036: CALL_OW 251
58040: PPUSH
58041: LD_VAR 0 14
58045: PUSH
58046: LD_INT 1
58048: ARRAY
58049: PPUSH
58050: CALL_OW 254
58054: PPUSH
58055: LD_VAR 0 14
58059: PUSH
58060: LD_INT 1
58062: ARRAY
58063: PPUSH
58064: CALL_OW 248
58068: PPUSH
58069: LD_INT 0
58071: PPUSH
58072: CALL 34788 0 6
58076: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
58077: LD_ADDR_VAR 0 8
58081: PUSH
58082: LD_VAR 0 4
58086: PUSH
58087: LD_VAR 0 7
58091: ARRAY
58092: PPUSH
58093: LD_VAR 0 9
58097: PPUSH
58098: CALL 53475 0 2
58102: ST_TO_ADDR
// if j then
58103: LD_VAR 0 8
58107: IFFALSE 58176
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
58109: LD_VAR 0 8
58113: PUSH
58114: LD_INT 1
58116: ARRAY
58117: PPUSH
58118: LD_VAR 0 8
58122: PUSH
58123: LD_INT 2
58125: ARRAY
58126: PPUSH
58127: CALL_OW 488
58131: IFFALSE 58176
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
58133: LD_VAR 0 4
58137: PUSH
58138: LD_VAR 0 7
58142: ARRAY
58143: PPUSH
58144: LD_VAR 0 8
58148: PUSH
58149: LD_INT 1
58151: ARRAY
58152: PPUSH
58153: LD_VAR 0 8
58157: PUSH
58158: LD_INT 2
58160: ARRAY
58161: PPUSH
58162: CALL_OW 116
// attacking := true ;
58166: LD_ADDR_VAR 0 29
58170: PUSH
58171: LD_INT 1
58173: ST_TO_ADDR
// continue ;
58174: GO 55549
// end ; end ; end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
58176: LD_VAR 0 4
58180: PUSH
58181: LD_VAR 0 7
58185: ARRAY
58186: PPUSH
58187: CALL_OW 265
58191: PUSH
58192: LD_INT 11
58194: EQUAL
58195: IFFALSE 58473
// begin k := 10 ;
58197: LD_ADDR_VAR 0 9
58201: PUSH
58202: LD_INT 10
58204: ST_TO_ADDR
// x := 0 ;
58205: LD_ADDR_VAR 0 10
58209: PUSH
58210: LD_INT 0
58212: ST_TO_ADDR
// if tmp < k then
58213: LD_VAR 0 14
58217: PUSH
58218: LD_VAR 0 9
58222: LESS
58223: IFFALSE 58235
// k := tmp ;
58225: LD_ADDR_VAR 0 9
58229: PUSH
58230: LD_VAR 0 14
58234: ST_TO_ADDR
// for j = k downto 1 do
58235: LD_ADDR_VAR 0 8
58239: PUSH
58240: DOUBLE
58241: LD_VAR 0 9
58245: INC
58246: ST_TO_ADDR
58247: LD_INT 1
58249: PUSH
58250: FOR_DOWNTO
58251: IFFALSE 58326
// begin if GetType ( tmp [ j ] ) = unit_human then
58253: LD_VAR 0 14
58257: PUSH
58258: LD_VAR 0 8
58262: ARRAY
58263: PPUSH
58264: CALL_OW 247
58268: PUSH
58269: LD_INT 1
58271: EQUAL
58272: IFFALSE 58324
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
58274: LD_VAR 0 4
58278: PUSH
58279: LD_VAR 0 7
58283: ARRAY
58284: PPUSH
58285: LD_VAR 0 14
58289: PUSH
58290: LD_VAR 0 8
58294: ARRAY
58295: PPUSH
58296: CALL 53746 0 2
// x := tmp [ j ] ;
58300: LD_ADDR_VAR 0 10
58304: PUSH
58305: LD_VAR 0 14
58309: PUSH
58310: LD_VAR 0 8
58314: ARRAY
58315: ST_TO_ADDR
// attacking := true ;
58316: LD_ADDR_VAR 0 29
58320: PUSH
58321: LD_INT 1
58323: ST_TO_ADDR
// end ; end ;
58324: GO 58250
58326: POP
58327: POP
// if not x then
58328: LD_VAR 0 10
58332: NOT
58333: IFFALSE 58473
// begin attacking := true ;
58335: LD_ADDR_VAR 0 29
58339: PUSH
58340: LD_INT 1
58342: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
58343: LD_VAR 0 4
58347: PUSH
58348: LD_VAR 0 7
58352: ARRAY
58353: PPUSH
58354: CALL_OW 250
58358: PPUSH
58359: LD_VAR 0 4
58363: PUSH
58364: LD_VAR 0 7
58368: ARRAY
58369: PPUSH
58370: CALL_OW 251
58374: PPUSH
58375: CALL_OW 546
58379: PUSH
58380: LD_INT 2
58382: ARRAY
58383: PUSH
58384: LD_VAR 0 14
58388: PUSH
58389: LD_INT 1
58391: ARRAY
58392: PPUSH
58393: CALL_OW 250
58397: PPUSH
58398: LD_VAR 0 14
58402: PUSH
58403: LD_INT 1
58405: ARRAY
58406: PPUSH
58407: CALL_OW 251
58411: PPUSH
58412: CALL_OW 546
58416: PUSH
58417: LD_INT 2
58419: ARRAY
58420: EQUAL
58421: IFFALSE 58449
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
58423: LD_VAR 0 4
58427: PUSH
58428: LD_VAR 0 7
58432: ARRAY
58433: PPUSH
58434: LD_VAR 0 14
58438: PUSH
58439: LD_INT 1
58441: ARRAY
58442: PPUSH
58443: CALL 53746 0 2
58447: GO 58473
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
58449: LD_VAR 0 4
58453: PUSH
58454: LD_VAR 0 7
58458: ARRAY
58459: PPUSH
58460: LD_VAR 0 14
58464: PUSH
58465: LD_INT 1
58467: ARRAY
58468: PPUSH
58469: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
58473: LD_VAR 0 4
58477: PUSH
58478: LD_VAR 0 7
58482: ARRAY
58483: PPUSH
58484: CALL_OW 264
58488: PUSH
58489: LD_INT 29
58491: EQUAL
58492: IFFALSE 58858
// begin if WantsToAttack ( group [ i ] ) in bombed then
58494: LD_VAR 0 4
58498: PUSH
58499: LD_VAR 0 7
58503: ARRAY
58504: PPUSH
58505: CALL_OW 319
58509: PUSH
58510: LD_VAR 0 28
58514: IN
58515: IFFALSE 58519
// continue ;
58517: GO 55549
// k := 8 ;
58519: LD_ADDR_VAR 0 9
58523: PUSH
58524: LD_INT 8
58526: ST_TO_ADDR
// x := 0 ;
58527: LD_ADDR_VAR 0 10
58531: PUSH
58532: LD_INT 0
58534: ST_TO_ADDR
// if tmp < k then
58535: LD_VAR 0 14
58539: PUSH
58540: LD_VAR 0 9
58544: LESS
58545: IFFALSE 58557
// k := tmp ;
58547: LD_ADDR_VAR 0 9
58551: PUSH
58552: LD_VAR 0 14
58556: ST_TO_ADDR
// for j = 1 to k do
58557: LD_ADDR_VAR 0 8
58561: PUSH
58562: DOUBLE
58563: LD_INT 1
58565: DEC
58566: ST_TO_ADDR
58567: LD_VAR 0 9
58571: PUSH
58572: FOR_TO
58573: IFFALSE 58705
// begin if GetType ( tmp [ j ] ) = unit_building then
58575: LD_VAR 0 14
58579: PUSH
58580: LD_VAR 0 8
58584: ARRAY
58585: PPUSH
58586: CALL_OW 247
58590: PUSH
58591: LD_INT 3
58593: EQUAL
58594: IFFALSE 58703
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
58596: LD_VAR 0 14
58600: PUSH
58601: LD_VAR 0 8
58605: ARRAY
58606: PUSH
58607: LD_VAR 0 28
58611: IN
58612: NOT
58613: PUSH
58614: LD_VAR 0 14
58618: PUSH
58619: LD_VAR 0 8
58623: ARRAY
58624: PPUSH
58625: CALL_OW 313
58629: AND
58630: IFFALSE 58703
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
58632: LD_VAR 0 4
58636: PUSH
58637: LD_VAR 0 7
58641: ARRAY
58642: PPUSH
58643: LD_VAR 0 14
58647: PUSH
58648: LD_VAR 0 8
58652: ARRAY
58653: PPUSH
58654: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
58658: LD_ADDR_VAR 0 28
58662: PUSH
58663: LD_VAR 0 28
58667: PPUSH
58668: LD_VAR 0 28
58672: PUSH
58673: LD_INT 1
58675: PLUS
58676: PPUSH
58677: LD_VAR 0 14
58681: PUSH
58682: LD_VAR 0 8
58686: ARRAY
58687: PPUSH
58688: CALL_OW 1
58692: ST_TO_ADDR
// attacking := true ;
58693: LD_ADDR_VAR 0 29
58697: PUSH
58698: LD_INT 1
58700: ST_TO_ADDR
// break ;
58701: GO 58705
// end ; end ;
58703: GO 58572
58705: POP
58706: POP
// if not attacking and f_attack_depot then
58707: LD_VAR 0 29
58711: NOT
58712: PUSH
58713: LD_VAR 0 25
58717: AND
58718: IFFALSE 58813
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
58720: LD_ADDR_VAR 0 13
58724: PUSH
58725: LD_VAR 0 14
58729: PPUSH
58730: LD_INT 2
58732: PUSH
58733: LD_INT 30
58735: PUSH
58736: LD_INT 0
58738: PUSH
58739: EMPTY
58740: LIST
58741: LIST
58742: PUSH
58743: LD_INT 30
58745: PUSH
58746: LD_INT 1
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: PUSH
58753: EMPTY
58754: LIST
58755: LIST
58756: LIST
58757: PPUSH
58758: CALL_OW 72
58762: ST_TO_ADDR
// if z then
58763: LD_VAR 0 13
58767: IFFALSE 58813
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
58769: LD_VAR 0 4
58773: PUSH
58774: LD_VAR 0 7
58778: ARRAY
58779: PPUSH
58780: LD_VAR 0 13
58784: PPUSH
58785: LD_VAR 0 4
58789: PUSH
58790: LD_VAR 0 7
58794: ARRAY
58795: PPUSH
58796: CALL_OW 74
58800: PPUSH
58801: CALL_OW 115
// attacking := true ;
58805: LD_ADDR_VAR 0 29
58809: PUSH
58810: LD_INT 1
58812: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
58813: LD_VAR 0 4
58817: PUSH
58818: LD_VAR 0 7
58822: ARRAY
58823: PPUSH
58824: CALL_OW 256
58828: PUSH
58829: LD_INT 500
58831: LESS
58832: IFFALSE 58858
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
58834: LD_VAR 0 4
58838: PUSH
58839: LD_VAR 0 7
58843: ARRAY
58844: PPUSH
58845: LD_VAR 0 14
58849: PUSH
58850: LD_INT 1
58852: ARRAY
58853: PPUSH
58854: CALL_OW 115
// end ; if GetWeapon ( group [ i ] ) = ru_time_lapser then
58858: LD_VAR 0 4
58862: PUSH
58863: LD_VAR 0 7
58867: ARRAY
58868: PPUSH
58869: CALL_OW 264
58873: PUSH
58874: LD_INT 49
58876: EQUAL
58877: IFFALSE 58998
// begin if not HasTask ( group [ i ] ) then
58879: LD_VAR 0 4
58883: PUSH
58884: LD_VAR 0 7
58888: ARRAY
58889: PPUSH
58890: CALL_OW 314
58894: NOT
58895: IFFALSE 58998
// begin k := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) , group [ i ] ) ;
58897: LD_ADDR_VAR 0 9
58901: PUSH
58902: LD_INT 81
58904: PUSH
58905: LD_VAR 0 4
58909: PUSH
58910: LD_VAR 0 7
58914: ARRAY
58915: PPUSH
58916: CALL_OW 255
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: PPUSH
58925: CALL_OW 69
58929: PPUSH
58930: LD_VAR 0 4
58934: PUSH
58935: LD_VAR 0 7
58939: ARRAY
58940: PPUSH
58941: CALL_OW 74
58945: ST_TO_ADDR
// if k then
58946: LD_VAR 0 9
58950: IFFALSE 58998
// if GetDistUnits ( group [ i ] , k ) > 10 then
58952: LD_VAR 0 4
58956: PUSH
58957: LD_VAR 0 7
58961: ARRAY
58962: PPUSH
58963: LD_VAR 0 9
58967: PPUSH
58968: CALL_OW 296
58972: PUSH
58973: LD_INT 10
58975: GREATER
58976: IFFALSE 58998
// ComMoveUnit ( group [ i ] , k ) ;
58978: LD_VAR 0 4
58982: PUSH
58983: LD_VAR 0 7
58987: ARRAY
58988: PPUSH
58989: LD_VAR 0 9
58993: PPUSH
58994: CALL_OW 112
// end ; end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
58998: LD_VAR 0 4
59002: PUSH
59003: LD_VAR 0 7
59007: ARRAY
59008: PPUSH
59009: CALL_OW 256
59013: PUSH
59014: LD_INT 250
59016: LESS
59017: PUSH
59018: LD_VAR 0 4
59022: PUSH
59023: LD_VAR 0 7
59027: ARRAY
59028: PUSH
59029: LD_INT 21
59031: PUSH
59032: LD_INT 2
59034: PUSH
59035: EMPTY
59036: LIST
59037: LIST
59038: PUSH
59039: LD_INT 23
59041: PUSH
59042: LD_INT 2
59044: PUSH
59045: EMPTY
59046: LIST
59047: LIST
59048: PUSH
59049: EMPTY
59050: LIST
59051: LIST
59052: PPUSH
59053: CALL_OW 69
59057: IN
59058: AND
59059: IFFALSE 59184
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
59061: LD_ADDR_VAR 0 9
59065: PUSH
59066: LD_OWVAR 3
59070: PUSH
59071: LD_VAR 0 4
59075: PUSH
59076: LD_VAR 0 7
59080: ARRAY
59081: DIFF
59082: PPUSH
59083: LD_VAR 0 4
59087: PUSH
59088: LD_VAR 0 7
59092: ARRAY
59093: PPUSH
59094: CALL_OW 74
59098: ST_TO_ADDR
// if not k then
59099: LD_VAR 0 9
59103: NOT
59104: IFFALSE 59108
// continue ;
59106: GO 55549
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
59108: LD_VAR 0 9
59112: PUSH
59113: LD_INT 81
59115: PUSH
59116: LD_VAR 0 4
59120: PUSH
59121: LD_VAR 0 7
59125: ARRAY
59126: PPUSH
59127: CALL_OW 255
59131: PUSH
59132: EMPTY
59133: LIST
59134: LIST
59135: PPUSH
59136: CALL_OW 69
59140: IN
59141: PUSH
59142: LD_VAR 0 9
59146: PPUSH
59147: LD_VAR 0 4
59151: PUSH
59152: LD_VAR 0 7
59156: ARRAY
59157: PPUSH
59158: CALL_OW 296
59162: PUSH
59163: LD_INT 5
59165: LESS
59166: AND
59167: IFFALSE 59184
// ComAutodestruct ( group [ i ] ) ;
59169: LD_VAR 0 4
59173: PUSH
59174: LD_VAR 0 7
59178: ARRAY
59179: PPUSH
59180: CALL 53644 0 1
// end ; if f_attack_depot then
59184: LD_VAR 0 25
59188: IFFALSE 59300
// begin k := 6 ;
59190: LD_ADDR_VAR 0 9
59194: PUSH
59195: LD_INT 6
59197: ST_TO_ADDR
// if tmp < k then
59198: LD_VAR 0 14
59202: PUSH
59203: LD_VAR 0 9
59207: LESS
59208: IFFALSE 59220
// k := tmp ;
59210: LD_ADDR_VAR 0 9
59214: PUSH
59215: LD_VAR 0 14
59219: ST_TO_ADDR
// for j = 1 to k do
59220: LD_ADDR_VAR 0 8
59224: PUSH
59225: DOUBLE
59226: LD_INT 1
59228: DEC
59229: ST_TO_ADDR
59230: LD_VAR 0 9
59234: PUSH
59235: FOR_TO
59236: IFFALSE 59298
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
59238: LD_VAR 0 8
59242: PPUSH
59243: CALL_OW 266
59247: PUSH
59248: LD_INT 0
59250: PUSH
59251: LD_INT 1
59253: PUSH
59254: EMPTY
59255: LIST
59256: LIST
59257: IN
59258: IFFALSE 59296
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
59260: LD_VAR 0 4
59264: PUSH
59265: LD_VAR 0 7
59269: ARRAY
59270: PPUSH
59271: LD_VAR 0 14
59275: PUSH
59276: LD_VAR 0 8
59280: ARRAY
59281: PPUSH
59282: CALL_OW 115
// attacking := true ;
59286: LD_ADDR_VAR 0 29
59290: PUSH
59291: LD_INT 1
59293: ST_TO_ADDR
// break ;
59294: GO 59298
// end ;
59296: GO 59235
59298: POP
59299: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
59300: LD_VAR 0 4
59304: PUSH
59305: LD_VAR 0 7
59309: ARRAY
59310: PPUSH
59311: CALL_OW 302
59315: PUSH
59316: LD_VAR 0 29
59320: NOT
59321: AND
59322: IFFALSE 59644
// begin if GetTag ( group [ i ] ) = 71 then
59324: LD_VAR 0 4
59328: PUSH
59329: LD_VAR 0 7
59333: ARRAY
59334: PPUSH
59335: CALL_OW 110
59339: PUSH
59340: LD_INT 71
59342: EQUAL
59343: IFFALSE 59384
// begin if HasTask ( group [ i ] ) then
59345: LD_VAR 0 4
59349: PUSH
59350: LD_VAR 0 7
59354: ARRAY
59355: PPUSH
59356: CALL_OW 314
59360: IFFALSE 59366
// continue else
59362: GO 55549
59364: GO 59384
// SetTag ( group [ i ] , 0 ) ;
59366: LD_VAR 0 4
59370: PUSH
59371: LD_VAR 0 7
59375: ARRAY
59376: PPUSH
59377: LD_INT 0
59379: PPUSH
59380: CALL_OW 109
// end ; k := 8 ;
59384: LD_ADDR_VAR 0 9
59388: PUSH
59389: LD_INT 8
59391: ST_TO_ADDR
// x := 0 ;
59392: LD_ADDR_VAR 0 10
59396: PUSH
59397: LD_INT 0
59399: ST_TO_ADDR
// if tmp < k then
59400: LD_VAR 0 14
59404: PUSH
59405: LD_VAR 0 9
59409: LESS
59410: IFFALSE 59422
// k := tmp ;
59412: LD_ADDR_VAR 0 9
59416: PUSH
59417: LD_VAR 0 14
59421: ST_TO_ADDR
// for j = 1 to k do
59422: LD_ADDR_VAR 0 8
59426: PUSH
59427: DOUBLE
59428: LD_INT 1
59430: DEC
59431: ST_TO_ADDR
59432: LD_VAR 0 9
59436: PUSH
59437: FOR_TO
59438: IFFALSE 59536
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
59440: LD_VAR 0 14
59444: PUSH
59445: LD_VAR 0 8
59449: ARRAY
59450: PPUSH
59451: CALL_OW 247
59455: PUSH
59456: LD_INT 1
59458: EQUAL
59459: PUSH
59460: LD_VAR 0 14
59464: PUSH
59465: LD_VAR 0 8
59469: ARRAY
59470: PPUSH
59471: CALL_OW 256
59475: PUSH
59476: LD_INT 250
59478: LESS
59479: PUSH
59480: LD_VAR 0 20
59484: AND
59485: PUSH
59486: LD_VAR 0 20
59490: NOT
59491: PUSH
59492: LD_VAR 0 14
59496: PUSH
59497: LD_VAR 0 8
59501: ARRAY
59502: PPUSH
59503: CALL_OW 256
59507: PUSH
59508: LD_INT 250
59510: GREATEREQUAL
59511: AND
59512: OR
59513: AND
59514: IFFALSE 59534
// begin x := tmp [ j ] ;
59516: LD_ADDR_VAR 0 10
59520: PUSH
59521: LD_VAR 0 14
59525: PUSH
59526: LD_VAR 0 8
59530: ARRAY
59531: ST_TO_ADDR
// break ;
59532: GO 59536
// end ;
59534: GO 59437
59536: POP
59537: POP
// if x then
59538: LD_VAR 0 10
59542: IFFALSE 59566
// ComAttackUnit ( group [ i ] , x ) else
59544: LD_VAR 0 4
59548: PUSH
59549: LD_VAR 0 7
59553: ARRAY
59554: PPUSH
59555: LD_VAR 0 10
59559: PPUSH
59560: CALL_OW 115
59564: GO 59590
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
59566: LD_VAR 0 4
59570: PUSH
59571: LD_VAR 0 7
59575: ARRAY
59576: PPUSH
59577: LD_VAR 0 14
59581: PUSH
59582: LD_INT 1
59584: ARRAY
59585: PPUSH
59586: CALL_OW 115
// if not HasTask ( group [ i ] ) then
59590: LD_VAR 0 4
59594: PUSH
59595: LD_VAR 0 7
59599: ARRAY
59600: PPUSH
59601: CALL_OW 314
59605: NOT
59606: IFFALSE 59644
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
59608: LD_VAR 0 4
59612: PUSH
59613: LD_VAR 0 7
59617: ARRAY
59618: PPUSH
59619: LD_VAR 0 14
59623: PPUSH
59624: LD_VAR 0 4
59628: PUSH
59629: LD_VAR 0 7
59633: ARRAY
59634: PPUSH
59635: CALL_OW 74
59639: PPUSH
59640: CALL_OW 115
// end ; end ; end ;
59644: GO 55549
59646: POP
59647: POP
// wait ( 0 0$1 ) ;
59648: LD_INT 35
59650: PPUSH
59651: CALL_OW 67
// until group = [ ] or not FilterAllUnits ( [ f_enemy , side ] ) ;
59655: LD_VAR 0 4
59659: PUSH
59660: EMPTY
59661: EQUAL
59662: PUSH
59663: LD_INT 81
59665: PUSH
59666: LD_VAR 0 35
59670: PUSH
59671: EMPTY
59672: LIST
59673: LIST
59674: PPUSH
59675: CALL_OW 69
59679: NOT
59680: OR
59681: IFFALSE 55534
// end ;
59683: LD_VAR 0 2
59687: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
59688: LD_INT 0
59690: PPUSH
59691: PPUSH
59692: PPUSH
59693: PPUSH
// if not base_units then
59694: LD_VAR 0 1
59698: NOT
59699: IFFALSE 59703
// exit ;
59701: GO 59790
// result := false ;
59703: LD_ADDR_VAR 0 2
59707: PUSH
59708: LD_INT 0
59710: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
59711: LD_ADDR_VAR 0 5
59715: PUSH
59716: LD_VAR 0 1
59720: PPUSH
59721: LD_INT 21
59723: PUSH
59724: LD_INT 3
59726: PUSH
59727: EMPTY
59728: LIST
59729: LIST
59730: PPUSH
59731: CALL_OW 72
59735: ST_TO_ADDR
// if not tmp then
59736: LD_VAR 0 5
59740: NOT
59741: IFFALSE 59745
// exit ;
59743: GO 59790
// for i in tmp do
59745: LD_ADDR_VAR 0 3
59749: PUSH
59750: LD_VAR 0 5
59754: PUSH
59755: FOR_IN
59756: IFFALSE 59788
// begin result := EnemyInRange ( i , 22 ) ;
59758: LD_ADDR_VAR 0 2
59762: PUSH
59763: LD_VAR 0 3
59767: PPUSH
59768: LD_INT 22
59770: PPUSH
59771: CALL 53327 0 2
59775: ST_TO_ADDR
// if result then
59776: LD_VAR 0 2
59780: IFFALSE 59786
// exit ;
59782: POP
59783: POP
59784: GO 59790
// end ;
59786: GO 59755
59788: POP
59789: POP
// end ;
59790: LD_VAR 0 2
59794: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
59795: LD_INT 0
59797: PPUSH
59798: PPUSH
// if not units then
59799: LD_VAR 0 1
59803: NOT
59804: IFFALSE 59808
// exit ;
59806: GO 59878
// result := [ ] ;
59808: LD_ADDR_VAR 0 3
59812: PUSH
59813: EMPTY
59814: ST_TO_ADDR
// for i in units do
59815: LD_ADDR_VAR 0 4
59819: PUSH
59820: LD_VAR 0 1
59824: PUSH
59825: FOR_IN
59826: IFFALSE 59876
// if GetTag ( i ) = tag then
59828: LD_VAR 0 4
59832: PPUSH
59833: CALL_OW 110
59837: PUSH
59838: LD_VAR 0 2
59842: EQUAL
59843: IFFALSE 59874
// result := Insert ( result , result + 1 , i ) ;
59845: LD_ADDR_VAR 0 3
59849: PUSH
59850: LD_VAR 0 3
59854: PPUSH
59855: LD_VAR 0 3
59859: PUSH
59860: LD_INT 1
59862: PLUS
59863: PPUSH
59864: LD_VAR 0 4
59868: PPUSH
59869: CALL_OW 2
59873: ST_TO_ADDR
59874: GO 59825
59876: POP
59877: POP
// end ;
59878: LD_VAR 0 3
59882: RET
// export function IsDriver ( un ) ; begin
59883: LD_INT 0
59885: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
59886: LD_ADDR_VAR 0 2
59890: PUSH
59891: LD_VAR 0 1
59895: PUSH
59896: LD_INT 55
59898: PUSH
59899: EMPTY
59900: LIST
59901: PPUSH
59902: CALL_OW 69
59906: IN
59907: ST_TO_ADDR
// end ;
59908: LD_VAR 0 2
59912: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
59913: LD_INT 0
59915: PPUSH
59916: PPUSH
// list := [ ] ;
59917: LD_ADDR_VAR 0 5
59921: PUSH
59922: EMPTY
59923: ST_TO_ADDR
// case d of 0 :
59924: LD_VAR 0 3
59928: PUSH
59929: LD_INT 0
59931: DOUBLE
59932: EQUAL
59933: IFTRUE 59937
59935: GO 60070
59937: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
59938: LD_ADDR_VAR 0 5
59942: PUSH
59943: LD_VAR 0 1
59947: PUSH
59948: LD_INT 4
59950: MINUS
59951: PUSH
59952: LD_VAR 0 2
59956: PUSH
59957: LD_INT 4
59959: MINUS
59960: PUSH
59961: LD_INT 2
59963: PUSH
59964: EMPTY
59965: LIST
59966: LIST
59967: LIST
59968: PUSH
59969: LD_VAR 0 1
59973: PUSH
59974: LD_INT 3
59976: MINUS
59977: PUSH
59978: LD_VAR 0 2
59982: PUSH
59983: LD_INT 1
59985: PUSH
59986: EMPTY
59987: LIST
59988: LIST
59989: LIST
59990: PUSH
59991: LD_VAR 0 1
59995: PUSH
59996: LD_INT 4
59998: PLUS
59999: PUSH
60000: LD_VAR 0 2
60004: PUSH
60005: LD_INT 4
60007: PUSH
60008: EMPTY
60009: LIST
60010: LIST
60011: LIST
60012: PUSH
60013: LD_VAR 0 1
60017: PUSH
60018: LD_INT 3
60020: PLUS
60021: PUSH
60022: LD_VAR 0 2
60026: PUSH
60027: LD_INT 3
60029: PLUS
60030: PUSH
60031: LD_INT 5
60033: PUSH
60034: EMPTY
60035: LIST
60036: LIST
60037: LIST
60038: PUSH
60039: LD_VAR 0 1
60043: PUSH
60044: LD_VAR 0 2
60048: PUSH
60049: LD_INT 4
60051: PLUS
60052: PUSH
60053: LD_INT 0
60055: PUSH
60056: EMPTY
60057: LIST
60058: LIST
60059: LIST
60060: PUSH
60061: EMPTY
60062: LIST
60063: LIST
60064: LIST
60065: LIST
60066: LIST
60067: ST_TO_ADDR
// end ; 1 :
60068: GO 60768
60070: LD_INT 1
60072: DOUBLE
60073: EQUAL
60074: IFTRUE 60078
60076: GO 60211
60078: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
60079: LD_ADDR_VAR 0 5
60083: PUSH
60084: LD_VAR 0 1
60088: PUSH
60089: LD_VAR 0 2
60093: PUSH
60094: LD_INT 4
60096: MINUS
60097: PUSH
60098: LD_INT 3
60100: PUSH
60101: EMPTY
60102: LIST
60103: LIST
60104: LIST
60105: PUSH
60106: LD_VAR 0 1
60110: PUSH
60111: LD_INT 3
60113: MINUS
60114: PUSH
60115: LD_VAR 0 2
60119: PUSH
60120: LD_INT 3
60122: MINUS
60123: PUSH
60124: LD_INT 2
60126: PUSH
60127: EMPTY
60128: LIST
60129: LIST
60130: LIST
60131: PUSH
60132: LD_VAR 0 1
60136: PUSH
60137: LD_INT 4
60139: MINUS
60140: PUSH
60141: LD_VAR 0 2
60145: PUSH
60146: LD_INT 1
60148: PUSH
60149: EMPTY
60150: LIST
60151: LIST
60152: LIST
60153: PUSH
60154: LD_VAR 0 1
60158: PUSH
60159: LD_VAR 0 2
60163: PUSH
60164: LD_INT 3
60166: PLUS
60167: PUSH
60168: LD_INT 0
60170: PUSH
60171: EMPTY
60172: LIST
60173: LIST
60174: LIST
60175: PUSH
60176: LD_VAR 0 1
60180: PUSH
60181: LD_INT 4
60183: PLUS
60184: PUSH
60185: LD_VAR 0 2
60189: PUSH
60190: LD_INT 4
60192: PLUS
60193: PUSH
60194: LD_INT 5
60196: PUSH
60197: EMPTY
60198: LIST
60199: LIST
60200: LIST
60201: PUSH
60202: EMPTY
60203: LIST
60204: LIST
60205: LIST
60206: LIST
60207: LIST
60208: ST_TO_ADDR
// end ; 2 :
60209: GO 60768
60211: LD_INT 2
60213: DOUBLE
60214: EQUAL
60215: IFTRUE 60219
60217: GO 60348
60219: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
60220: LD_ADDR_VAR 0 5
60224: PUSH
60225: LD_VAR 0 1
60229: PUSH
60230: LD_VAR 0 2
60234: PUSH
60235: LD_INT 3
60237: MINUS
60238: PUSH
60239: LD_INT 3
60241: PUSH
60242: EMPTY
60243: LIST
60244: LIST
60245: LIST
60246: PUSH
60247: LD_VAR 0 1
60251: PUSH
60252: LD_INT 4
60254: PLUS
60255: PUSH
60256: LD_VAR 0 2
60260: PUSH
60261: LD_INT 4
60263: PUSH
60264: EMPTY
60265: LIST
60266: LIST
60267: LIST
60268: PUSH
60269: LD_VAR 0 1
60273: PUSH
60274: LD_VAR 0 2
60278: PUSH
60279: LD_INT 4
60281: PLUS
60282: PUSH
60283: LD_INT 0
60285: PUSH
60286: EMPTY
60287: LIST
60288: LIST
60289: LIST
60290: PUSH
60291: LD_VAR 0 1
60295: PUSH
60296: LD_INT 3
60298: MINUS
60299: PUSH
60300: LD_VAR 0 2
60304: PUSH
60305: LD_INT 1
60307: PUSH
60308: EMPTY
60309: LIST
60310: LIST
60311: LIST
60312: PUSH
60313: LD_VAR 0 1
60317: PUSH
60318: LD_INT 4
60320: MINUS
60321: PUSH
60322: LD_VAR 0 2
60326: PUSH
60327: LD_INT 4
60329: MINUS
60330: PUSH
60331: LD_INT 2
60333: PUSH
60334: EMPTY
60335: LIST
60336: LIST
60337: LIST
60338: PUSH
60339: EMPTY
60340: LIST
60341: LIST
60342: LIST
60343: LIST
60344: LIST
60345: ST_TO_ADDR
// end ; 3 :
60346: GO 60768
60348: LD_INT 3
60350: DOUBLE
60351: EQUAL
60352: IFTRUE 60356
60354: GO 60489
60356: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
60357: LD_ADDR_VAR 0 5
60361: PUSH
60362: LD_VAR 0 1
60366: PUSH
60367: LD_INT 3
60369: PLUS
60370: PUSH
60371: LD_VAR 0 2
60375: PUSH
60376: LD_INT 4
60378: PUSH
60379: EMPTY
60380: LIST
60381: LIST
60382: LIST
60383: PUSH
60384: LD_VAR 0 1
60388: PUSH
60389: LD_INT 4
60391: PLUS
60392: PUSH
60393: LD_VAR 0 2
60397: PUSH
60398: LD_INT 4
60400: PLUS
60401: PUSH
60402: LD_INT 5
60404: PUSH
60405: EMPTY
60406: LIST
60407: LIST
60408: LIST
60409: PUSH
60410: LD_VAR 0 1
60414: PUSH
60415: LD_INT 4
60417: MINUS
60418: PUSH
60419: LD_VAR 0 2
60423: PUSH
60424: LD_INT 1
60426: PUSH
60427: EMPTY
60428: LIST
60429: LIST
60430: LIST
60431: PUSH
60432: LD_VAR 0 1
60436: PUSH
60437: LD_VAR 0 2
60441: PUSH
60442: LD_INT 4
60444: MINUS
60445: PUSH
60446: LD_INT 3
60448: PUSH
60449: EMPTY
60450: LIST
60451: LIST
60452: LIST
60453: PUSH
60454: LD_VAR 0 1
60458: PUSH
60459: LD_INT 3
60461: MINUS
60462: PUSH
60463: LD_VAR 0 2
60467: PUSH
60468: LD_INT 3
60470: MINUS
60471: PUSH
60472: LD_INT 2
60474: PUSH
60475: EMPTY
60476: LIST
60477: LIST
60478: LIST
60479: PUSH
60480: EMPTY
60481: LIST
60482: LIST
60483: LIST
60484: LIST
60485: LIST
60486: ST_TO_ADDR
// end ; 4 :
60487: GO 60768
60489: LD_INT 4
60491: DOUBLE
60492: EQUAL
60493: IFTRUE 60497
60495: GO 60630
60497: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
60498: LD_ADDR_VAR 0 5
60502: PUSH
60503: LD_VAR 0 1
60507: PUSH
60508: LD_VAR 0 2
60512: PUSH
60513: LD_INT 4
60515: PLUS
60516: PUSH
60517: LD_INT 0
60519: PUSH
60520: EMPTY
60521: LIST
60522: LIST
60523: LIST
60524: PUSH
60525: LD_VAR 0 1
60529: PUSH
60530: LD_INT 3
60532: PLUS
60533: PUSH
60534: LD_VAR 0 2
60538: PUSH
60539: LD_INT 3
60541: PLUS
60542: PUSH
60543: LD_INT 5
60545: PUSH
60546: EMPTY
60547: LIST
60548: LIST
60549: LIST
60550: PUSH
60551: LD_VAR 0 1
60555: PUSH
60556: LD_INT 4
60558: PLUS
60559: PUSH
60560: LD_VAR 0 2
60564: PUSH
60565: LD_INT 4
60567: PUSH
60568: EMPTY
60569: LIST
60570: LIST
60571: LIST
60572: PUSH
60573: LD_VAR 0 1
60577: PUSH
60578: LD_VAR 0 2
60582: PUSH
60583: LD_INT 3
60585: MINUS
60586: PUSH
60587: LD_INT 3
60589: PUSH
60590: EMPTY
60591: LIST
60592: LIST
60593: LIST
60594: PUSH
60595: LD_VAR 0 1
60599: PUSH
60600: LD_INT 4
60602: MINUS
60603: PUSH
60604: LD_VAR 0 2
60608: PUSH
60609: LD_INT 4
60611: MINUS
60612: PUSH
60613: LD_INT 2
60615: PUSH
60616: EMPTY
60617: LIST
60618: LIST
60619: LIST
60620: PUSH
60621: EMPTY
60622: LIST
60623: LIST
60624: LIST
60625: LIST
60626: LIST
60627: ST_TO_ADDR
// end ; 5 :
60628: GO 60768
60630: LD_INT 5
60632: DOUBLE
60633: EQUAL
60634: IFTRUE 60638
60636: GO 60767
60638: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
60639: LD_ADDR_VAR 0 5
60643: PUSH
60644: LD_VAR 0 1
60648: PUSH
60649: LD_INT 4
60651: MINUS
60652: PUSH
60653: LD_VAR 0 2
60657: PUSH
60658: LD_INT 1
60660: PUSH
60661: EMPTY
60662: LIST
60663: LIST
60664: LIST
60665: PUSH
60666: LD_VAR 0 1
60670: PUSH
60671: LD_VAR 0 2
60675: PUSH
60676: LD_INT 4
60678: MINUS
60679: PUSH
60680: LD_INT 3
60682: PUSH
60683: EMPTY
60684: LIST
60685: LIST
60686: LIST
60687: PUSH
60688: LD_VAR 0 1
60692: PUSH
60693: LD_INT 4
60695: PLUS
60696: PUSH
60697: LD_VAR 0 2
60701: PUSH
60702: LD_INT 4
60704: PLUS
60705: PUSH
60706: LD_INT 5
60708: PUSH
60709: EMPTY
60710: LIST
60711: LIST
60712: LIST
60713: PUSH
60714: LD_VAR 0 1
60718: PUSH
60719: LD_INT 3
60721: PLUS
60722: PUSH
60723: LD_VAR 0 2
60727: PUSH
60728: LD_INT 4
60730: PUSH
60731: EMPTY
60732: LIST
60733: LIST
60734: LIST
60735: PUSH
60736: LD_VAR 0 1
60740: PUSH
60741: LD_VAR 0 2
60745: PUSH
60746: LD_INT 3
60748: PLUS
60749: PUSH
60750: LD_INT 0
60752: PUSH
60753: EMPTY
60754: LIST
60755: LIST
60756: LIST
60757: PUSH
60758: EMPTY
60759: LIST
60760: LIST
60761: LIST
60762: LIST
60763: LIST
60764: ST_TO_ADDR
// end ; end ;
60765: GO 60768
60767: POP
// result := list ;
60768: LD_ADDR_VAR 0 4
60772: PUSH
60773: LD_VAR 0 5
60777: ST_TO_ADDR
// end ;
60778: LD_VAR 0 4
60782: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
60783: LD_INT 0
60785: PPUSH
60786: PPUSH
60787: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
60788: LD_VAR 0 1
60792: NOT
60793: PUSH
60794: LD_VAR 0 2
60798: PUSH
60799: LD_INT 1
60801: PUSH
60802: LD_INT 2
60804: PUSH
60805: LD_INT 3
60807: PUSH
60808: LD_INT 4
60810: PUSH
60811: EMPTY
60812: LIST
60813: LIST
60814: LIST
60815: LIST
60816: IN
60817: NOT
60818: OR
60819: IFFALSE 60823
// exit ;
60821: GO 60915
// tmp := [ ] ;
60823: LD_ADDR_VAR 0 5
60827: PUSH
60828: EMPTY
60829: ST_TO_ADDR
// for i in units do
60830: LD_ADDR_VAR 0 4
60834: PUSH
60835: LD_VAR 0 1
60839: PUSH
60840: FOR_IN
60841: IFFALSE 60884
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
60843: LD_ADDR_VAR 0 5
60847: PUSH
60848: LD_VAR 0 5
60852: PPUSH
60853: LD_VAR 0 5
60857: PUSH
60858: LD_INT 1
60860: PLUS
60861: PPUSH
60862: LD_VAR 0 4
60866: PPUSH
60867: LD_VAR 0 2
60871: PPUSH
60872: CALL_OW 259
60876: PPUSH
60877: CALL_OW 2
60881: ST_TO_ADDR
60882: GO 60840
60884: POP
60885: POP
// if not tmp then
60886: LD_VAR 0 5
60890: NOT
60891: IFFALSE 60895
// exit ;
60893: GO 60915
// result := SortListByListDesc ( units , tmp ) ;
60895: LD_ADDR_VAR 0 3
60899: PUSH
60900: LD_VAR 0 1
60904: PPUSH
60905: LD_VAR 0 5
60909: PPUSH
60910: CALL_OW 77
60914: ST_TO_ADDR
// end ;
60915: LD_VAR 0 3
60919: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
60920: LD_INT 0
60922: PPUSH
60923: PPUSH
60924: PPUSH
// x := GetX ( building ) ;
60925: LD_ADDR_VAR 0 4
60929: PUSH
60930: LD_VAR 0 2
60934: PPUSH
60935: CALL_OW 250
60939: ST_TO_ADDR
// y := GetY ( building ) ;
60940: LD_ADDR_VAR 0 5
60944: PUSH
60945: LD_VAR 0 2
60949: PPUSH
60950: CALL_OW 251
60954: ST_TO_ADDR
// if GetTaskList ( unit ) then
60955: LD_VAR 0 1
60959: PPUSH
60960: CALL_OW 437
60964: IFFALSE 61059
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60966: LD_STRING e
60968: PUSH
60969: LD_VAR 0 1
60973: PPUSH
60974: CALL_OW 437
60978: PUSH
60979: LD_INT 1
60981: ARRAY
60982: PUSH
60983: LD_INT 1
60985: ARRAY
60986: EQUAL
60987: PUSH
60988: LD_VAR 0 4
60992: PUSH
60993: LD_VAR 0 1
60997: PPUSH
60998: CALL_OW 437
61002: PUSH
61003: LD_INT 1
61005: ARRAY
61006: PUSH
61007: LD_INT 2
61009: ARRAY
61010: EQUAL
61011: AND
61012: PUSH
61013: LD_VAR 0 5
61017: PUSH
61018: LD_VAR 0 1
61022: PPUSH
61023: CALL_OW 437
61027: PUSH
61028: LD_INT 1
61030: ARRAY
61031: PUSH
61032: LD_INT 3
61034: ARRAY
61035: EQUAL
61036: AND
61037: IFFALSE 61049
// result := true else
61039: LD_ADDR_VAR 0 3
61043: PUSH
61044: LD_INT 1
61046: ST_TO_ADDR
61047: GO 61057
// result := false ;
61049: LD_ADDR_VAR 0 3
61053: PUSH
61054: LD_INT 0
61056: ST_TO_ADDR
// end else
61057: GO 61067
// result := false ;
61059: LD_ADDR_VAR 0 3
61063: PUSH
61064: LD_INT 0
61066: ST_TO_ADDR
// end ;
61067: LD_VAR 0 3
61071: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
61072: LD_INT 0
61074: PPUSH
61075: PPUSH
61076: PPUSH
61077: PPUSH
// if not unit or not area then
61078: LD_VAR 0 1
61082: NOT
61083: PUSH
61084: LD_VAR 0 2
61088: NOT
61089: OR
61090: IFFALSE 61094
// exit ;
61092: GO 61258
// tmp := AreaToList ( area , i ) ;
61094: LD_ADDR_VAR 0 6
61098: PUSH
61099: LD_VAR 0 2
61103: PPUSH
61104: LD_VAR 0 5
61108: PPUSH
61109: CALL_OW 517
61113: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
61114: LD_ADDR_VAR 0 5
61118: PUSH
61119: DOUBLE
61120: LD_INT 1
61122: DEC
61123: ST_TO_ADDR
61124: LD_VAR 0 6
61128: PUSH
61129: LD_INT 1
61131: ARRAY
61132: PUSH
61133: FOR_TO
61134: IFFALSE 61256
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
61136: LD_ADDR_VAR 0 7
61140: PUSH
61141: LD_VAR 0 6
61145: PUSH
61146: LD_INT 1
61148: ARRAY
61149: PUSH
61150: LD_VAR 0 5
61154: ARRAY
61155: PUSH
61156: LD_VAR 0 6
61160: PUSH
61161: LD_INT 2
61163: ARRAY
61164: PUSH
61165: LD_VAR 0 5
61169: ARRAY
61170: PUSH
61171: EMPTY
61172: LIST
61173: LIST
61174: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
61175: LD_VAR 0 7
61179: PUSH
61180: LD_INT 1
61182: ARRAY
61183: PPUSH
61184: LD_VAR 0 7
61188: PUSH
61189: LD_INT 2
61191: ARRAY
61192: PPUSH
61193: CALL_OW 428
61197: PUSH
61198: LD_INT 0
61200: EQUAL
61201: IFFALSE 61254
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
61203: LD_VAR 0 1
61207: PPUSH
61208: LD_VAR 0 7
61212: PUSH
61213: LD_INT 1
61215: ARRAY
61216: PPUSH
61217: LD_VAR 0 7
61221: PUSH
61222: LD_INT 2
61224: ARRAY
61225: PPUSH
61226: LD_VAR 0 3
61230: PPUSH
61231: CALL_OW 48
// result := IsPlaced ( unit ) ;
61235: LD_ADDR_VAR 0 4
61239: PUSH
61240: LD_VAR 0 1
61244: PPUSH
61245: CALL_OW 305
61249: ST_TO_ADDR
// exit ;
61250: POP
61251: POP
61252: GO 61258
// end ; end ;
61254: GO 61133
61256: POP
61257: POP
// end ;
61258: LD_VAR 0 4
61262: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
61263: LD_INT 0
61265: PPUSH
61266: PPUSH
61267: PPUSH
// if not side or side > 8 then
61268: LD_VAR 0 1
61272: NOT
61273: PUSH
61274: LD_VAR 0 1
61278: PUSH
61279: LD_INT 8
61281: GREATER
61282: OR
61283: IFFALSE 61287
// exit ;
61285: GO 61474
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
61287: LD_ADDR_VAR 0 4
61291: PUSH
61292: LD_INT 22
61294: PUSH
61295: LD_VAR 0 1
61299: PUSH
61300: EMPTY
61301: LIST
61302: LIST
61303: PUSH
61304: LD_INT 21
61306: PUSH
61307: LD_INT 3
61309: PUSH
61310: EMPTY
61311: LIST
61312: LIST
61313: PUSH
61314: EMPTY
61315: LIST
61316: LIST
61317: PPUSH
61318: CALL_OW 69
61322: ST_TO_ADDR
// if not tmp then
61323: LD_VAR 0 4
61327: NOT
61328: IFFALSE 61332
// exit ;
61330: GO 61474
// enable_addtolog := true ;
61332: LD_ADDR_OWVAR 81
61336: PUSH
61337: LD_INT 1
61339: ST_TO_ADDR
// AddToLog ( [ ) ;
61340: LD_STRING [
61342: PPUSH
61343: CALL_OW 561
// for i in tmp do
61347: LD_ADDR_VAR 0 3
61351: PUSH
61352: LD_VAR 0 4
61356: PUSH
61357: FOR_IN
61358: IFFALSE 61465
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
61360: LD_STRING [
61362: PUSH
61363: LD_VAR 0 3
61367: PPUSH
61368: CALL_OW 266
61372: STR
61373: PUSH
61374: LD_STRING , 
61376: STR
61377: PUSH
61378: LD_VAR 0 3
61382: PPUSH
61383: CALL_OW 250
61387: STR
61388: PUSH
61389: LD_STRING , 
61391: STR
61392: PUSH
61393: LD_VAR 0 3
61397: PPUSH
61398: CALL_OW 251
61402: STR
61403: PUSH
61404: LD_STRING , 
61406: STR
61407: PUSH
61408: LD_VAR 0 3
61412: PPUSH
61413: CALL_OW 254
61417: STR
61418: PUSH
61419: LD_STRING , 
61421: STR
61422: PUSH
61423: LD_VAR 0 3
61427: PPUSH
61428: LD_INT 1
61430: PPUSH
61431: CALL_OW 268
61435: STR
61436: PUSH
61437: LD_STRING , 
61439: STR
61440: PUSH
61441: LD_VAR 0 3
61445: PPUSH
61446: LD_INT 2
61448: PPUSH
61449: CALL_OW 268
61453: STR
61454: PUSH
61455: LD_STRING ],
61457: STR
61458: PPUSH
61459: CALL_OW 561
// end ;
61463: GO 61357
61465: POP
61466: POP
// AddToLog ( ]; ) ;
61467: LD_STRING ];
61469: PPUSH
61470: CALL_OW 561
// end ;
61474: LD_VAR 0 2
61478: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
61479: LD_INT 0
61481: PPUSH
61482: PPUSH
61483: PPUSH
61484: PPUSH
61485: PPUSH
// if not area or not rate or not max then
61486: LD_VAR 0 1
61490: NOT
61491: PUSH
61492: LD_VAR 0 2
61496: NOT
61497: OR
61498: PUSH
61499: LD_VAR 0 4
61503: NOT
61504: OR
61505: IFFALSE 61509
// exit ;
61507: GO 61701
// while 1 do
61509: LD_INT 1
61511: IFFALSE 61701
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
61513: LD_ADDR_VAR 0 9
61517: PUSH
61518: LD_VAR 0 1
61522: PPUSH
61523: LD_INT 1
61525: PPUSH
61526: CALL_OW 287
61530: PUSH
61531: LD_INT 10
61533: MUL
61534: ST_TO_ADDR
// r := rate / 10 ;
61535: LD_ADDR_VAR 0 7
61539: PUSH
61540: LD_VAR 0 2
61544: PUSH
61545: LD_INT 10
61547: DIVREAL
61548: ST_TO_ADDR
// time := 1 1$00 ;
61549: LD_ADDR_VAR 0 8
61553: PUSH
61554: LD_INT 2100
61556: ST_TO_ADDR
// if amount < min then
61557: LD_VAR 0 9
61561: PUSH
61562: LD_VAR 0 3
61566: LESS
61567: IFFALSE 61585
// r := r * 2 else
61569: LD_ADDR_VAR 0 7
61573: PUSH
61574: LD_VAR 0 7
61578: PUSH
61579: LD_INT 2
61581: MUL
61582: ST_TO_ADDR
61583: GO 61611
// if amount > max then
61585: LD_VAR 0 9
61589: PUSH
61590: LD_VAR 0 4
61594: GREATER
61595: IFFALSE 61611
// r := r / 2 ;
61597: LD_ADDR_VAR 0 7
61601: PUSH
61602: LD_VAR 0 7
61606: PUSH
61607: LD_INT 2
61609: DIVREAL
61610: ST_TO_ADDR
// time := time / r ;
61611: LD_ADDR_VAR 0 8
61615: PUSH
61616: LD_VAR 0 8
61620: PUSH
61621: LD_VAR 0 7
61625: DIVREAL
61626: ST_TO_ADDR
// if time < 0 then
61627: LD_VAR 0 8
61631: PUSH
61632: LD_INT 0
61634: LESS
61635: IFFALSE 61652
// time := time * - 1 ;
61637: LD_ADDR_VAR 0 8
61641: PUSH
61642: LD_VAR 0 8
61646: PUSH
61647: LD_INT 1
61649: NEG
61650: MUL
61651: ST_TO_ADDR
// wait ( time ) ;
61652: LD_VAR 0 8
61656: PPUSH
61657: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
61661: LD_INT 35
61663: PPUSH
61664: LD_INT 875
61666: PPUSH
61667: CALL_OW 12
61671: PPUSH
61672: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
61676: LD_INT 1
61678: PPUSH
61679: LD_INT 5
61681: PPUSH
61682: CALL_OW 12
61686: PPUSH
61687: LD_VAR 0 1
61691: PPUSH
61692: LD_INT 1
61694: PPUSH
61695: CALL_OW 55
// end ;
61699: GO 61509
// end ;
61701: LD_VAR 0 5
61705: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
61706: LD_INT 0
61708: PPUSH
61709: PPUSH
61710: PPUSH
61711: PPUSH
61712: PPUSH
61713: PPUSH
61714: PPUSH
61715: PPUSH
// if not turrets or not factories then
61716: LD_VAR 0 1
61720: NOT
61721: PUSH
61722: LD_VAR 0 2
61726: NOT
61727: OR
61728: IFFALSE 61732
// exit ;
61730: GO 62039
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
61732: LD_ADDR_VAR 0 10
61736: PUSH
61737: LD_INT 5
61739: PUSH
61740: LD_INT 6
61742: PUSH
61743: EMPTY
61744: LIST
61745: LIST
61746: PUSH
61747: LD_INT 2
61749: PUSH
61750: LD_INT 4
61752: PUSH
61753: EMPTY
61754: LIST
61755: LIST
61756: PUSH
61757: LD_INT 3
61759: PUSH
61760: LD_INT 5
61762: PUSH
61763: EMPTY
61764: LIST
61765: LIST
61766: PUSH
61767: EMPTY
61768: LIST
61769: LIST
61770: LIST
61771: PUSH
61772: LD_INT 24
61774: PUSH
61775: LD_INT 25
61777: PUSH
61778: EMPTY
61779: LIST
61780: LIST
61781: PUSH
61782: LD_INT 23
61784: PUSH
61785: LD_INT 27
61787: PUSH
61788: EMPTY
61789: LIST
61790: LIST
61791: PUSH
61792: EMPTY
61793: LIST
61794: LIST
61795: PUSH
61796: LD_INT 42
61798: PUSH
61799: LD_INT 43
61801: PUSH
61802: EMPTY
61803: LIST
61804: LIST
61805: PUSH
61806: LD_INT 44
61808: PUSH
61809: LD_INT 46
61811: PUSH
61812: EMPTY
61813: LIST
61814: LIST
61815: PUSH
61816: LD_INT 45
61818: PUSH
61819: LD_INT 47
61821: PUSH
61822: EMPTY
61823: LIST
61824: LIST
61825: PUSH
61826: EMPTY
61827: LIST
61828: LIST
61829: LIST
61830: PUSH
61831: EMPTY
61832: LIST
61833: LIST
61834: LIST
61835: ST_TO_ADDR
// result := [ ] ;
61836: LD_ADDR_VAR 0 3
61840: PUSH
61841: EMPTY
61842: ST_TO_ADDR
// for i in turrets do
61843: LD_ADDR_VAR 0 4
61847: PUSH
61848: LD_VAR 0 1
61852: PUSH
61853: FOR_IN
61854: IFFALSE 62037
// begin nat := GetNation ( i ) ;
61856: LD_ADDR_VAR 0 7
61860: PUSH
61861: LD_VAR 0 4
61865: PPUSH
61866: CALL_OW 248
61870: ST_TO_ADDR
// weapon := 0 ;
61871: LD_ADDR_VAR 0 8
61875: PUSH
61876: LD_INT 0
61878: ST_TO_ADDR
// if not nat then
61879: LD_VAR 0 7
61883: NOT
61884: IFFALSE 61888
// continue ;
61886: GO 61853
// for j in list [ nat ] do
61888: LD_ADDR_VAR 0 5
61892: PUSH
61893: LD_VAR 0 10
61897: PUSH
61898: LD_VAR 0 7
61902: ARRAY
61903: PUSH
61904: FOR_IN
61905: IFFALSE 61946
// if GetBWeapon ( i ) = j [ 1 ] then
61907: LD_VAR 0 4
61911: PPUSH
61912: CALL_OW 269
61916: PUSH
61917: LD_VAR 0 5
61921: PUSH
61922: LD_INT 1
61924: ARRAY
61925: EQUAL
61926: IFFALSE 61944
// begin weapon := j [ 2 ] ;
61928: LD_ADDR_VAR 0 8
61932: PUSH
61933: LD_VAR 0 5
61937: PUSH
61938: LD_INT 2
61940: ARRAY
61941: ST_TO_ADDR
// break ;
61942: GO 61946
// end ;
61944: GO 61904
61946: POP
61947: POP
// if not weapon then
61948: LD_VAR 0 8
61952: NOT
61953: IFFALSE 61957
// continue ;
61955: GO 61853
// for k in factories do
61957: LD_ADDR_VAR 0 6
61961: PUSH
61962: LD_VAR 0 2
61966: PUSH
61967: FOR_IN
61968: IFFALSE 62033
// begin weapons := AvailableWeaponList ( k ) ;
61970: LD_ADDR_VAR 0 9
61974: PUSH
61975: LD_VAR 0 6
61979: PPUSH
61980: CALL_OW 478
61984: ST_TO_ADDR
// if not weapons then
61985: LD_VAR 0 9
61989: NOT
61990: IFFALSE 61994
// continue ;
61992: GO 61967
// if weapon in weapons then
61994: LD_VAR 0 8
61998: PUSH
61999: LD_VAR 0 9
62003: IN
62004: IFFALSE 62031
// begin result := [ i , weapon ] ;
62006: LD_ADDR_VAR 0 3
62010: PUSH
62011: LD_VAR 0 4
62015: PUSH
62016: LD_VAR 0 8
62020: PUSH
62021: EMPTY
62022: LIST
62023: LIST
62024: ST_TO_ADDR
// exit ;
62025: POP
62026: POP
62027: POP
62028: POP
62029: GO 62039
// end ; end ;
62031: GO 61967
62033: POP
62034: POP
// end ;
62035: GO 61853
62037: POP
62038: POP
// end ;
62039: LD_VAR 0 3
62043: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
62044: LD_INT 0
62046: PPUSH
// if not side or side > 8 then
62047: LD_VAR 0 3
62051: NOT
62052: PUSH
62053: LD_VAR 0 3
62057: PUSH
62058: LD_INT 8
62060: GREATER
62061: OR
62062: IFFALSE 62066
// exit ;
62064: GO 62125
// if not range then
62066: LD_VAR 0 4
62070: NOT
62071: IFFALSE 62082
// range := - 12 ;
62073: LD_ADDR_VAR 0 4
62077: PUSH
62078: LD_INT 12
62080: NEG
62081: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
62082: LD_VAR 0 1
62086: PPUSH
62087: LD_VAR 0 2
62091: PPUSH
62092: LD_VAR 0 3
62096: PPUSH
62097: LD_VAR 0 4
62101: PPUSH
62102: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
62106: LD_VAR 0 1
62110: PPUSH
62111: LD_VAR 0 2
62115: PPUSH
62116: LD_VAR 0 3
62120: PPUSH
62121: CALL_OW 331
// end ;
62125: LD_VAR 0 5
62129: RET
// export function Video ( mode ) ; begin
62130: LD_INT 0
62132: PPUSH
// ingame_video = mode ;
62133: LD_ADDR_OWVAR 52
62137: PUSH
62138: LD_VAR 0 1
62142: ST_TO_ADDR
// interface_hidden = mode ;
62143: LD_ADDR_OWVAR 54
62147: PUSH
62148: LD_VAR 0 1
62152: ST_TO_ADDR
// end ;
62153: LD_VAR 0 2
62157: RET
// export function Join ( array , element ) ; begin
62158: LD_INT 0
62160: PPUSH
// result := array ^ element ;
62161: LD_ADDR_VAR 0 3
62165: PUSH
62166: LD_VAR 0 1
62170: PUSH
62171: LD_VAR 0 2
62175: ADD
62176: ST_TO_ADDR
// end ;
62177: LD_VAR 0 3
62181: RET
// export function JoinUnion ( array , element ) ; begin
62182: LD_INT 0
62184: PPUSH
// result := array union element ;
62185: LD_ADDR_VAR 0 3
62189: PUSH
62190: LD_VAR 0 1
62194: PUSH
62195: LD_VAR 0 2
62199: UNION
62200: ST_TO_ADDR
// end ;
62201: LD_VAR 0 3
62205: RET
// export function GetBehemoths ( side ) ; begin
62206: LD_INT 0
62208: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
62209: LD_ADDR_VAR 0 2
62213: PUSH
62214: LD_INT 22
62216: PUSH
62217: LD_VAR 0 1
62221: PUSH
62222: EMPTY
62223: LIST
62224: LIST
62225: PUSH
62226: LD_INT 31
62228: PUSH
62229: LD_INT 25
62231: PUSH
62232: EMPTY
62233: LIST
62234: LIST
62235: PUSH
62236: EMPTY
62237: LIST
62238: LIST
62239: PPUSH
62240: CALL_OW 69
62244: ST_TO_ADDR
// end ;
62245: LD_VAR 0 2
62249: RET
// export function Shuffle ( array ) ; var i , index ; begin
62250: LD_INT 0
62252: PPUSH
62253: PPUSH
62254: PPUSH
// result := [ ] ;
62255: LD_ADDR_VAR 0 2
62259: PUSH
62260: EMPTY
62261: ST_TO_ADDR
// if not array then
62262: LD_VAR 0 1
62266: NOT
62267: IFFALSE 62271
// exit ;
62269: GO 62370
// Randomize ;
62271: CALL_OW 10
// for i = array downto 1 do
62275: LD_ADDR_VAR 0 3
62279: PUSH
62280: DOUBLE
62281: LD_VAR 0 1
62285: INC
62286: ST_TO_ADDR
62287: LD_INT 1
62289: PUSH
62290: FOR_DOWNTO
62291: IFFALSE 62368
// begin index := rand ( 1 , array ) ;
62293: LD_ADDR_VAR 0 4
62297: PUSH
62298: LD_INT 1
62300: PPUSH
62301: LD_VAR 0 1
62305: PPUSH
62306: CALL_OW 12
62310: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
62311: LD_ADDR_VAR 0 2
62315: PUSH
62316: LD_VAR 0 2
62320: PPUSH
62321: LD_VAR 0 2
62325: PUSH
62326: LD_INT 1
62328: PLUS
62329: PPUSH
62330: LD_VAR 0 1
62334: PUSH
62335: LD_VAR 0 4
62339: ARRAY
62340: PPUSH
62341: CALL_OW 2
62345: ST_TO_ADDR
// array := Delete ( array , index ) ;
62346: LD_ADDR_VAR 0 1
62350: PUSH
62351: LD_VAR 0 1
62355: PPUSH
62356: LD_VAR 0 4
62360: PPUSH
62361: CALL_OW 3
62365: ST_TO_ADDR
// end ;
62366: GO 62290
62368: POP
62369: POP
// end ; end_of_file
62370: LD_VAR 0 2
62374: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
62375: GO 62377
62377: DISABLE
// begin ru_radar := 98 ;
62378: LD_ADDR_EXP 29
62382: PUSH
62383: LD_INT 98
62385: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
62386: LD_ADDR_EXP 30
62390: PUSH
62391: LD_INT 89
62393: ST_TO_ADDR
// us_hack := 99 ;
62394: LD_ADDR_EXP 31
62398: PUSH
62399: LD_INT 99
62401: ST_TO_ADDR
// us_artillery := 97 ;
62402: LD_ADDR_EXP 32
62406: PUSH
62407: LD_INT 97
62409: ST_TO_ADDR
// ar_bio_bomb := 91 ;
62410: LD_ADDR_EXP 33
62414: PUSH
62415: LD_INT 91
62417: ST_TO_ADDR
// end ; end_of_file
62418: END
// export skirmish , debug_mc ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_teleport_exit_set , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver , mc_class , mc_class_case_use ; export function InitMacro ; var i ; begin
62419: LD_INT 0
62421: PPUSH
62422: PPUSH
// skirmish := false ;
62423: LD_ADDR_EXP 34
62427: PUSH
62428: LD_INT 0
62430: ST_TO_ADDR
// debug_mc := false ;
62431: LD_ADDR_EXP 35
62435: PUSH
62436: LD_INT 0
62438: ST_TO_ADDR
// mc_bases := [ ] ;
62439: LD_ADDR_EXP 36
62443: PUSH
62444: EMPTY
62445: ST_TO_ADDR
// mc_sides := [ ] ;
62446: LD_ADDR_EXP 62
62450: PUSH
62451: EMPTY
62452: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
62453: LD_ADDR_EXP 37
62457: PUSH
62458: EMPTY
62459: ST_TO_ADDR
// mc_building_repairs := [ ] ;
62460: LD_ADDR_EXP 38
62464: PUSH
62465: EMPTY
62466: ST_TO_ADDR
// mc_need_heal := [ ] ;
62467: LD_ADDR_EXP 39
62471: PUSH
62472: EMPTY
62473: ST_TO_ADDR
// mc_healers := [ ] ;
62474: LD_ADDR_EXP 40
62478: PUSH
62479: EMPTY
62480: ST_TO_ADDR
// mc_build_list := [ ] ;
62481: LD_ADDR_EXP 41
62485: PUSH
62486: EMPTY
62487: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
62488: LD_ADDR_EXP 68
62492: PUSH
62493: EMPTY
62494: ST_TO_ADDR
// mc_builders := [ ] ;
62495: LD_ADDR_EXP 42
62499: PUSH
62500: EMPTY
62501: ST_TO_ADDR
// mc_construct_list := [ ] ;
62502: LD_ADDR_EXP 43
62506: PUSH
62507: EMPTY
62508: ST_TO_ADDR
// mc_turret_list := [ ] ;
62509: LD_ADDR_EXP 44
62513: PUSH
62514: EMPTY
62515: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
62516: LD_ADDR_EXP 45
62520: PUSH
62521: EMPTY
62522: ST_TO_ADDR
// mc_miners := [ ] ;
62523: LD_ADDR_EXP 50
62527: PUSH
62528: EMPTY
62529: ST_TO_ADDR
// mc_mines := [ ] ;
62530: LD_ADDR_EXP 49
62534: PUSH
62535: EMPTY
62536: ST_TO_ADDR
// mc_minefields := [ ] ;
62537: LD_ADDR_EXP 51
62541: PUSH
62542: EMPTY
62543: ST_TO_ADDR
// mc_crates := [ ] ;
62544: LD_ADDR_EXP 52
62548: PUSH
62549: EMPTY
62550: ST_TO_ADDR
// mc_crates_collector := [ ] ;
62551: LD_ADDR_EXP 53
62555: PUSH
62556: EMPTY
62557: ST_TO_ADDR
// mc_crates_area := [ ] ;
62558: LD_ADDR_EXP 54
62562: PUSH
62563: EMPTY
62564: ST_TO_ADDR
// mc_vehicles := [ ] ;
62565: LD_ADDR_EXP 55
62569: PUSH
62570: EMPTY
62571: ST_TO_ADDR
// mc_attack := [ ] ;
62572: LD_ADDR_EXP 56
62576: PUSH
62577: EMPTY
62578: ST_TO_ADDR
// mc_produce := [ ] ;
62579: LD_ADDR_EXP 57
62583: PUSH
62584: EMPTY
62585: ST_TO_ADDR
// mc_defender := [ ] ;
62586: LD_ADDR_EXP 58
62590: PUSH
62591: EMPTY
62592: ST_TO_ADDR
// mc_parking := [ ] ;
62593: LD_ADDR_EXP 60
62597: PUSH
62598: EMPTY
62599: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
62600: LD_ADDR_EXP 46
62604: PUSH
62605: EMPTY
62606: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
62607: LD_ADDR_EXP 48
62611: PUSH
62612: EMPTY
62613: ST_TO_ADDR
// mc_scan := [ ] ;
62614: LD_ADDR_EXP 59
62618: PUSH
62619: EMPTY
62620: ST_TO_ADDR
// mc_scan_area := [ ] ;
62621: LD_ADDR_EXP 61
62625: PUSH
62626: EMPTY
62627: ST_TO_ADDR
// mc_tech := [ ] ;
62628: LD_ADDR_EXP 63
62632: PUSH
62633: EMPTY
62634: ST_TO_ADDR
// mc_class := [ ] ;
62635: LD_ADDR_EXP 77
62639: PUSH
62640: EMPTY
62641: ST_TO_ADDR
// mc_class_case_use := [ ] ;
62642: LD_ADDR_EXP 78
62646: PUSH
62647: EMPTY
62648: ST_TO_ADDR
// end ;
62649: LD_VAR 0 1
62653: RET
// export function MC_Kill ( base ) ; begin
62654: LD_INT 0
62656: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
62657: LD_ADDR_EXP 36
62661: PUSH
62662: LD_EXP 36
62666: PPUSH
62667: LD_VAR 0 1
62671: PPUSH
62672: EMPTY
62673: PPUSH
62674: CALL_OW 1
62678: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
62679: LD_ADDR_EXP 37
62683: PUSH
62684: LD_EXP 37
62688: PPUSH
62689: LD_VAR 0 1
62693: PPUSH
62694: EMPTY
62695: PPUSH
62696: CALL_OW 1
62700: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
62701: LD_ADDR_EXP 38
62705: PUSH
62706: LD_EXP 38
62710: PPUSH
62711: LD_VAR 0 1
62715: PPUSH
62716: EMPTY
62717: PPUSH
62718: CALL_OW 1
62722: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
62723: LD_ADDR_EXP 39
62727: PUSH
62728: LD_EXP 39
62732: PPUSH
62733: LD_VAR 0 1
62737: PPUSH
62738: EMPTY
62739: PPUSH
62740: CALL_OW 1
62744: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
62745: LD_ADDR_EXP 40
62749: PUSH
62750: LD_EXP 40
62754: PPUSH
62755: LD_VAR 0 1
62759: PPUSH
62760: EMPTY
62761: PPUSH
62762: CALL_OW 1
62766: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
62767: LD_ADDR_EXP 41
62771: PUSH
62772: LD_EXP 41
62776: PPUSH
62777: LD_VAR 0 1
62781: PPUSH
62782: EMPTY
62783: PPUSH
62784: CALL_OW 1
62788: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
62789: LD_ADDR_EXP 42
62793: PUSH
62794: LD_EXP 42
62798: PPUSH
62799: LD_VAR 0 1
62803: PPUSH
62804: EMPTY
62805: PPUSH
62806: CALL_OW 1
62810: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
62811: LD_ADDR_EXP 43
62815: PUSH
62816: LD_EXP 43
62820: PPUSH
62821: LD_VAR 0 1
62825: PPUSH
62826: EMPTY
62827: PPUSH
62828: CALL_OW 1
62832: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
62833: LD_ADDR_EXP 44
62837: PUSH
62838: LD_EXP 44
62842: PPUSH
62843: LD_VAR 0 1
62847: PPUSH
62848: EMPTY
62849: PPUSH
62850: CALL_OW 1
62854: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
62855: LD_ADDR_EXP 45
62859: PUSH
62860: LD_EXP 45
62864: PPUSH
62865: LD_VAR 0 1
62869: PPUSH
62870: EMPTY
62871: PPUSH
62872: CALL_OW 1
62876: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
62877: LD_ADDR_EXP 46
62881: PUSH
62882: LD_EXP 46
62886: PPUSH
62887: LD_VAR 0 1
62891: PPUSH
62892: EMPTY
62893: PPUSH
62894: CALL_OW 1
62898: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
62899: LD_ADDR_EXP 47
62903: PUSH
62904: LD_EXP 47
62908: PPUSH
62909: LD_VAR 0 1
62913: PPUSH
62914: LD_INT 0
62916: PPUSH
62917: CALL_OW 1
62921: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
62922: LD_ADDR_EXP 48
62926: PUSH
62927: LD_EXP 48
62931: PPUSH
62932: LD_VAR 0 1
62936: PPUSH
62937: EMPTY
62938: PPUSH
62939: CALL_OW 1
62943: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
62944: LD_ADDR_EXP 49
62948: PUSH
62949: LD_EXP 49
62953: PPUSH
62954: LD_VAR 0 1
62958: PPUSH
62959: EMPTY
62960: PPUSH
62961: CALL_OW 1
62965: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
62966: LD_ADDR_EXP 50
62970: PUSH
62971: LD_EXP 50
62975: PPUSH
62976: LD_VAR 0 1
62980: PPUSH
62981: EMPTY
62982: PPUSH
62983: CALL_OW 1
62987: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
62988: LD_ADDR_EXP 51
62992: PUSH
62993: LD_EXP 51
62997: PPUSH
62998: LD_VAR 0 1
63002: PPUSH
63003: EMPTY
63004: PPUSH
63005: CALL_OW 1
63009: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
63010: LD_ADDR_EXP 52
63014: PUSH
63015: LD_EXP 52
63019: PPUSH
63020: LD_VAR 0 1
63024: PPUSH
63025: EMPTY
63026: PPUSH
63027: CALL_OW 1
63031: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
63032: LD_ADDR_EXP 53
63036: PUSH
63037: LD_EXP 53
63041: PPUSH
63042: LD_VAR 0 1
63046: PPUSH
63047: EMPTY
63048: PPUSH
63049: CALL_OW 1
63053: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
63054: LD_ADDR_EXP 54
63058: PUSH
63059: LD_EXP 54
63063: PPUSH
63064: LD_VAR 0 1
63068: PPUSH
63069: EMPTY
63070: PPUSH
63071: CALL_OW 1
63075: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
63076: LD_ADDR_EXP 55
63080: PUSH
63081: LD_EXP 55
63085: PPUSH
63086: LD_VAR 0 1
63090: PPUSH
63091: EMPTY
63092: PPUSH
63093: CALL_OW 1
63097: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
63098: LD_ADDR_EXP 56
63102: PUSH
63103: LD_EXP 56
63107: PPUSH
63108: LD_VAR 0 1
63112: PPUSH
63113: EMPTY
63114: PPUSH
63115: CALL_OW 1
63119: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
63120: LD_ADDR_EXP 57
63124: PUSH
63125: LD_EXP 57
63129: PPUSH
63130: LD_VAR 0 1
63134: PPUSH
63135: EMPTY
63136: PPUSH
63137: CALL_OW 1
63141: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
63142: LD_ADDR_EXP 58
63146: PUSH
63147: LD_EXP 58
63151: PPUSH
63152: LD_VAR 0 1
63156: PPUSH
63157: EMPTY
63158: PPUSH
63159: CALL_OW 1
63163: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
63164: LD_ADDR_EXP 59
63168: PUSH
63169: LD_EXP 59
63173: PPUSH
63174: LD_VAR 0 1
63178: PPUSH
63179: EMPTY
63180: PPUSH
63181: CALL_OW 1
63185: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
63186: LD_ADDR_EXP 60
63190: PUSH
63191: LD_EXP 60
63195: PPUSH
63196: LD_VAR 0 1
63200: PPUSH
63201: EMPTY
63202: PPUSH
63203: CALL_OW 1
63207: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
63208: LD_ADDR_EXP 61
63212: PUSH
63213: LD_EXP 61
63217: PPUSH
63218: LD_VAR 0 1
63222: PPUSH
63223: EMPTY
63224: PPUSH
63225: CALL_OW 1
63229: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
63230: LD_ADDR_EXP 63
63234: PUSH
63235: LD_EXP 63
63239: PPUSH
63240: LD_VAR 0 1
63244: PPUSH
63245: EMPTY
63246: PPUSH
63247: CALL_OW 1
63251: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
63252: LD_ADDR_EXP 65
63256: PUSH
63257: LD_EXP 65
63261: PPUSH
63262: LD_VAR 0 1
63266: PPUSH
63267: EMPTY
63268: PPUSH
63269: CALL_OW 1
63273: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
63274: LD_ADDR_EXP 66
63278: PUSH
63279: LD_EXP 66
63283: PPUSH
63284: LD_VAR 0 1
63288: PPUSH
63289: EMPTY
63290: PPUSH
63291: CALL_OW 1
63295: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
63296: LD_ADDR_EXP 67
63300: PUSH
63301: LD_EXP 67
63305: PPUSH
63306: LD_VAR 0 1
63310: PPUSH
63311: EMPTY
63312: PPUSH
63313: CALL_OW 1
63317: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
63318: LD_ADDR_EXP 68
63322: PUSH
63323: LD_EXP 68
63327: PPUSH
63328: LD_VAR 0 1
63332: PPUSH
63333: EMPTY
63334: PPUSH
63335: CALL_OW 1
63339: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
63340: LD_ADDR_EXP 69
63344: PUSH
63345: LD_EXP 69
63349: PPUSH
63350: LD_VAR 0 1
63354: PPUSH
63355: EMPTY
63356: PPUSH
63357: CALL_OW 1
63361: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
63362: LD_ADDR_EXP 70
63366: PUSH
63367: LD_EXP 70
63371: PPUSH
63372: LD_VAR 0 1
63376: PPUSH
63377: EMPTY
63378: PPUSH
63379: CALL_OW 1
63383: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
63384: LD_ADDR_EXP 71
63388: PUSH
63389: LD_EXP 71
63393: PPUSH
63394: LD_VAR 0 1
63398: PPUSH
63399: EMPTY
63400: PPUSH
63401: CALL_OW 1
63405: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
63406: LD_ADDR_EXP 72
63410: PUSH
63411: LD_EXP 72
63415: PPUSH
63416: LD_VAR 0 1
63420: PPUSH
63421: EMPTY
63422: PPUSH
63423: CALL_OW 1
63427: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
63428: LD_ADDR_EXP 73
63432: PUSH
63433: LD_EXP 73
63437: PPUSH
63438: LD_VAR 0 1
63442: PPUSH
63443: EMPTY
63444: PPUSH
63445: CALL_OW 1
63449: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
63450: LD_ADDR_EXP 74
63454: PUSH
63455: LD_EXP 74
63459: PPUSH
63460: LD_VAR 0 1
63464: PPUSH
63465: EMPTY
63466: PPUSH
63467: CALL_OW 1
63471: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
63472: LD_ADDR_EXP 75
63476: PUSH
63477: LD_EXP 75
63481: PPUSH
63482: LD_VAR 0 1
63486: PPUSH
63487: EMPTY
63488: PPUSH
63489: CALL_OW 1
63493: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
63494: LD_ADDR_EXP 76
63498: PUSH
63499: LD_EXP 76
63503: PPUSH
63504: LD_VAR 0 1
63508: PPUSH
63509: EMPTY
63510: PPUSH
63511: CALL_OW 1
63515: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
63516: LD_ADDR_EXP 77
63520: PUSH
63521: LD_EXP 77
63525: PPUSH
63526: LD_VAR 0 1
63530: PPUSH
63531: EMPTY
63532: PPUSH
63533: CALL_OW 1
63537: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
63538: LD_ADDR_EXP 78
63542: PUSH
63543: LD_EXP 78
63547: PPUSH
63548: LD_VAR 0 1
63552: PPUSH
63553: LD_INT 0
63555: PPUSH
63556: CALL_OW 1
63560: ST_TO_ADDR
// end ;
63561: LD_VAR 0 2
63565: RET
// export function MC_Add ( side , units ) ; var base ; begin
63566: LD_INT 0
63568: PPUSH
63569: PPUSH
// base := mc_bases + 1 ;
63570: LD_ADDR_VAR 0 4
63574: PUSH
63575: LD_EXP 36
63579: PUSH
63580: LD_INT 1
63582: PLUS
63583: ST_TO_ADDR
// mc_sides := Replace ( mc_sides , base , side ) ;
63584: LD_ADDR_EXP 62
63588: PUSH
63589: LD_EXP 62
63593: PPUSH
63594: LD_VAR 0 4
63598: PPUSH
63599: LD_VAR 0 1
63603: PPUSH
63604: CALL_OW 1
63608: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , base , units ) ;
63609: LD_ADDR_EXP 36
63613: PUSH
63614: LD_EXP 36
63618: PPUSH
63619: LD_VAR 0 4
63623: PPUSH
63624: LD_VAR 0 2
63628: PPUSH
63629: CALL_OW 1
63633: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
63634: LD_ADDR_EXP 37
63638: PUSH
63639: LD_EXP 37
63643: PPUSH
63644: LD_VAR 0 4
63648: PPUSH
63649: EMPTY
63650: PPUSH
63651: CALL_OW 1
63655: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
63656: LD_ADDR_EXP 38
63660: PUSH
63661: LD_EXP 38
63665: PPUSH
63666: LD_VAR 0 4
63670: PPUSH
63671: EMPTY
63672: PPUSH
63673: CALL_OW 1
63677: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
63678: LD_ADDR_EXP 39
63682: PUSH
63683: LD_EXP 39
63687: PPUSH
63688: LD_VAR 0 4
63692: PPUSH
63693: EMPTY
63694: PPUSH
63695: CALL_OW 1
63699: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
63700: LD_ADDR_EXP 40
63704: PUSH
63705: LD_EXP 40
63709: PPUSH
63710: LD_VAR 0 4
63714: PPUSH
63715: EMPTY
63716: PPUSH
63717: CALL_OW 1
63721: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
63722: LD_ADDR_EXP 41
63726: PUSH
63727: LD_EXP 41
63731: PPUSH
63732: LD_VAR 0 4
63736: PPUSH
63737: EMPTY
63738: PPUSH
63739: CALL_OW 1
63743: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
63744: LD_ADDR_EXP 42
63748: PUSH
63749: LD_EXP 42
63753: PPUSH
63754: LD_VAR 0 4
63758: PPUSH
63759: EMPTY
63760: PPUSH
63761: CALL_OW 1
63765: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
63766: LD_ADDR_EXP 43
63770: PUSH
63771: LD_EXP 43
63775: PPUSH
63776: LD_VAR 0 4
63780: PPUSH
63781: EMPTY
63782: PPUSH
63783: CALL_OW 1
63787: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
63788: LD_ADDR_EXP 44
63792: PUSH
63793: LD_EXP 44
63797: PPUSH
63798: LD_VAR 0 4
63802: PPUSH
63803: EMPTY
63804: PPUSH
63805: CALL_OW 1
63809: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
63810: LD_ADDR_EXP 45
63814: PUSH
63815: LD_EXP 45
63819: PPUSH
63820: LD_VAR 0 4
63824: PPUSH
63825: EMPTY
63826: PPUSH
63827: CALL_OW 1
63831: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
63832: LD_ADDR_EXP 46
63836: PUSH
63837: LD_EXP 46
63841: PPUSH
63842: LD_VAR 0 4
63846: PPUSH
63847: EMPTY
63848: PPUSH
63849: CALL_OW 1
63853: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
63854: LD_ADDR_EXP 47
63858: PUSH
63859: LD_EXP 47
63863: PPUSH
63864: LD_VAR 0 4
63868: PPUSH
63869: LD_INT 0
63871: PPUSH
63872: CALL_OW 1
63876: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
63877: LD_ADDR_EXP 48
63881: PUSH
63882: LD_EXP 48
63886: PPUSH
63887: LD_VAR 0 4
63891: PPUSH
63892: EMPTY
63893: PPUSH
63894: CALL_OW 1
63898: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
63899: LD_ADDR_EXP 49
63903: PUSH
63904: LD_EXP 49
63908: PPUSH
63909: LD_VAR 0 4
63913: PPUSH
63914: EMPTY
63915: PPUSH
63916: CALL_OW 1
63920: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
63921: LD_ADDR_EXP 50
63925: PUSH
63926: LD_EXP 50
63930: PPUSH
63931: LD_VAR 0 4
63935: PPUSH
63936: EMPTY
63937: PPUSH
63938: CALL_OW 1
63942: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
63943: LD_ADDR_EXP 51
63947: PUSH
63948: LD_EXP 51
63952: PPUSH
63953: LD_VAR 0 4
63957: PPUSH
63958: EMPTY
63959: PPUSH
63960: CALL_OW 1
63964: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
63965: LD_ADDR_EXP 52
63969: PUSH
63970: LD_EXP 52
63974: PPUSH
63975: LD_VAR 0 4
63979: PPUSH
63980: EMPTY
63981: PPUSH
63982: CALL_OW 1
63986: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
63987: LD_ADDR_EXP 53
63991: PUSH
63992: LD_EXP 53
63996: PPUSH
63997: LD_VAR 0 4
64001: PPUSH
64002: EMPTY
64003: PPUSH
64004: CALL_OW 1
64008: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
64009: LD_ADDR_EXP 54
64013: PUSH
64014: LD_EXP 54
64018: PPUSH
64019: LD_VAR 0 4
64023: PPUSH
64024: EMPTY
64025: PPUSH
64026: CALL_OW 1
64030: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
64031: LD_ADDR_EXP 55
64035: PUSH
64036: LD_EXP 55
64040: PPUSH
64041: LD_VAR 0 4
64045: PPUSH
64046: EMPTY
64047: PPUSH
64048: CALL_OW 1
64052: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
64053: LD_ADDR_EXP 56
64057: PUSH
64058: LD_EXP 56
64062: PPUSH
64063: LD_VAR 0 4
64067: PPUSH
64068: EMPTY
64069: PPUSH
64070: CALL_OW 1
64074: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
64075: LD_ADDR_EXP 57
64079: PUSH
64080: LD_EXP 57
64084: PPUSH
64085: LD_VAR 0 4
64089: PPUSH
64090: EMPTY
64091: PPUSH
64092: CALL_OW 1
64096: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
64097: LD_ADDR_EXP 58
64101: PUSH
64102: LD_EXP 58
64106: PPUSH
64107: LD_VAR 0 4
64111: PPUSH
64112: EMPTY
64113: PPUSH
64114: CALL_OW 1
64118: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
64119: LD_ADDR_EXP 59
64123: PUSH
64124: LD_EXP 59
64128: PPUSH
64129: LD_VAR 0 4
64133: PPUSH
64134: EMPTY
64135: PPUSH
64136: CALL_OW 1
64140: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
64141: LD_ADDR_EXP 60
64145: PUSH
64146: LD_EXP 60
64150: PPUSH
64151: LD_VAR 0 4
64155: PPUSH
64156: EMPTY
64157: PPUSH
64158: CALL_OW 1
64162: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
64163: LD_ADDR_EXP 61
64167: PUSH
64168: LD_EXP 61
64172: PPUSH
64173: LD_VAR 0 4
64177: PPUSH
64178: EMPTY
64179: PPUSH
64180: CALL_OW 1
64184: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
64185: LD_ADDR_EXP 63
64189: PUSH
64190: LD_EXP 63
64194: PPUSH
64195: LD_VAR 0 4
64199: PPUSH
64200: EMPTY
64201: PPUSH
64202: CALL_OW 1
64206: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
64207: LD_ADDR_EXP 65
64211: PUSH
64212: LD_EXP 65
64216: PPUSH
64217: LD_VAR 0 4
64221: PPUSH
64222: EMPTY
64223: PPUSH
64224: CALL_OW 1
64228: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
64229: LD_ADDR_EXP 66
64233: PUSH
64234: LD_EXP 66
64238: PPUSH
64239: LD_VAR 0 4
64243: PPUSH
64244: EMPTY
64245: PPUSH
64246: CALL_OW 1
64250: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
64251: LD_ADDR_EXP 67
64255: PUSH
64256: LD_EXP 67
64260: PPUSH
64261: LD_VAR 0 4
64265: PPUSH
64266: EMPTY
64267: PPUSH
64268: CALL_OW 1
64272: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
64273: LD_ADDR_EXP 68
64277: PUSH
64278: LD_EXP 68
64282: PPUSH
64283: LD_VAR 0 4
64287: PPUSH
64288: EMPTY
64289: PPUSH
64290: CALL_OW 1
64294: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
64295: LD_ADDR_EXP 69
64299: PUSH
64300: LD_EXP 69
64304: PPUSH
64305: LD_VAR 0 4
64309: PPUSH
64310: EMPTY
64311: PPUSH
64312: CALL_OW 1
64316: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
64317: LD_ADDR_EXP 70
64321: PUSH
64322: LD_EXP 70
64326: PPUSH
64327: LD_VAR 0 4
64331: PPUSH
64332: EMPTY
64333: PPUSH
64334: CALL_OW 1
64338: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
64339: LD_ADDR_EXP 71
64343: PUSH
64344: LD_EXP 71
64348: PPUSH
64349: LD_VAR 0 4
64353: PPUSH
64354: EMPTY
64355: PPUSH
64356: CALL_OW 1
64360: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
64361: LD_ADDR_EXP 72
64365: PUSH
64366: LD_EXP 72
64370: PPUSH
64371: LD_VAR 0 4
64375: PPUSH
64376: EMPTY
64377: PPUSH
64378: CALL_OW 1
64382: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
64383: LD_ADDR_EXP 73
64387: PUSH
64388: LD_EXP 73
64392: PPUSH
64393: LD_VAR 0 4
64397: PPUSH
64398: EMPTY
64399: PPUSH
64400: CALL_OW 1
64404: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
64405: LD_ADDR_EXP 74
64409: PUSH
64410: LD_EXP 74
64414: PPUSH
64415: LD_VAR 0 4
64419: PPUSH
64420: EMPTY
64421: PPUSH
64422: CALL_OW 1
64426: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
64427: LD_ADDR_EXP 75
64431: PUSH
64432: LD_EXP 75
64436: PPUSH
64437: LD_VAR 0 4
64441: PPUSH
64442: EMPTY
64443: PPUSH
64444: CALL_OW 1
64448: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
64449: LD_ADDR_EXP 76
64453: PUSH
64454: LD_EXP 76
64458: PPUSH
64459: LD_VAR 0 4
64463: PPUSH
64464: EMPTY
64465: PPUSH
64466: CALL_OW 1
64470: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
64471: LD_ADDR_EXP 77
64475: PUSH
64476: LD_EXP 77
64480: PPUSH
64481: LD_VAR 0 4
64485: PPUSH
64486: EMPTY
64487: PPUSH
64488: CALL_OW 1
64492: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
64493: LD_ADDR_EXP 78
64497: PUSH
64498: LD_EXP 78
64502: PPUSH
64503: LD_VAR 0 4
64507: PPUSH
64508: LD_INT 0
64510: PPUSH
64511: CALL_OW 1
64515: ST_TO_ADDR
// result := base ;
64516: LD_ADDR_VAR 0 3
64520: PUSH
64521: LD_VAR 0 4
64525: ST_TO_ADDR
// end ;
64526: LD_VAR 0 3
64530: RET
// export function MC_Start ( ) ; var i ; begin
64531: LD_INT 0
64533: PPUSH
64534: PPUSH
// for i = 1 to mc_bases do
64535: LD_ADDR_VAR 0 2
64539: PUSH
64540: DOUBLE
64541: LD_INT 1
64543: DEC
64544: ST_TO_ADDR
64545: LD_EXP 36
64549: PUSH
64550: FOR_TO
64551: IFFALSE 65628
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff 0 ) ;
64553: LD_ADDR_EXP 36
64557: PUSH
64558: LD_EXP 36
64562: PPUSH
64563: LD_VAR 0 2
64567: PPUSH
64568: LD_EXP 36
64572: PUSH
64573: LD_VAR 0 2
64577: ARRAY
64578: PUSH
64579: LD_INT 0
64581: DIFF
64582: PPUSH
64583: CALL_OW 1
64587: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
64588: LD_ADDR_EXP 37
64592: PUSH
64593: LD_EXP 37
64597: PPUSH
64598: LD_VAR 0 2
64602: PPUSH
64603: EMPTY
64604: PPUSH
64605: CALL_OW 1
64609: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
64610: LD_ADDR_EXP 38
64614: PUSH
64615: LD_EXP 38
64619: PPUSH
64620: LD_VAR 0 2
64624: PPUSH
64625: EMPTY
64626: PPUSH
64627: CALL_OW 1
64631: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
64632: LD_ADDR_EXP 39
64636: PUSH
64637: LD_EXP 39
64641: PPUSH
64642: LD_VAR 0 2
64646: PPUSH
64647: EMPTY
64648: PPUSH
64649: CALL_OW 1
64653: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
64654: LD_ADDR_EXP 40
64658: PUSH
64659: LD_EXP 40
64663: PPUSH
64664: LD_VAR 0 2
64668: PPUSH
64669: EMPTY
64670: PUSH
64671: EMPTY
64672: PUSH
64673: EMPTY
64674: LIST
64675: LIST
64676: PPUSH
64677: CALL_OW 1
64681: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
64682: LD_ADDR_EXP 41
64686: PUSH
64687: LD_EXP 41
64691: PPUSH
64692: LD_VAR 0 2
64696: PPUSH
64697: EMPTY
64698: PPUSH
64699: CALL_OW 1
64703: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
64704: LD_ADDR_EXP 68
64708: PUSH
64709: LD_EXP 68
64713: PPUSH
64714: LD_VAR 0 2
64718: PPUSH
64719: EMPTY
64720: PPUSH
64721: CALL_OW 1
64725: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
64726: LD_ADDR_EXP 42
64730: PUSH
64731: LD_EXP 42
64735: PPUSH
64736: LD_VAR 0 2
64740: PPUSH
64741: EMPTY
64742: PPUSH
64743: CALL_OW 1
64747: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
64748: LD_ADDR_EXP 43
64752: PUSH
64753: LD_EXP 43
64757: PPUSH
64758: LD_VAR 0 2
64762: PPUSH
64763: EMPTY
64764: PPUSH
64765: CALL_OW 1
64769: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ) ;
64770: LD_ADDR_EXP 44
64774: PUSH
64775: LD_EXP 44
64779: PPUSH
64780: LD_VAR 0 2
64784: PPUSH
64785: LD_EXP 36
64789: PUSH
64790: LD_VAR 0 2
64794: ARRAY
64795: PPUSH
64796: LD_INT 2
64798: PUSH
64799: LD_INT 30
64801: PUSH
64802: LD_INT 32
64804: PUSH
64805: EMPTY
64806: LIST
64807: LIST
64808: PUSH
64809: LD_INT 30
64811: PUSH
64812: LD_INT 33
64814: PUSH
64815: EMPTY
64816: LIST
64817: LIST
64818: PUSH
64819: EMPTY
64820: LIST
64821: LIST
64822: LIST
64823: PPUSH
64824: CALL_OW 72
64828: PPUSH
64829: CALL_OW 1
64833: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
64834: LD_ADDR_EXP 45
64838: PUSH
64839: LD_EXP 45
64843: PPUSH
64844: LD_VAR 0 2
64848: PPUSH
64849: LD_EXP 36
64853: PUSH
64854: LD_VAR 0 2
64858: ARRAY
64859: PPUSH
64860: LD_INT 2
64862: PUSH
64863: LD_INT 30
64865: PUSH
64866: LD_INT 32
64868: PUSH
64869: EMPTY
64870: LIST
64871: LIST
64872: PUSH
64873: LD_INT 30
64875: PUSH
64876: LD_INT 31
64878: PUSH
64879: EMPTY
64880: LIST
64881: LIST
64882: PUSH
64883: EMPTY
64884: LIST
64885: LIST
64886: LIST
64887: PUSH
64888: LD_INT 58
64890: PUSH
64891: EMPTY
64892: LIST
64893: PUSH
64894: EMPTY
64895: LIST
64896: LIST
64897: PPUSH
64898: CALL_OW 72
64902: PPUSH
64903: CALL_OW 1
64907: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
64908: LD_ADDR_EXP 46
64912: PUSH
64913: LD_EXP 46
64917: PPUSH
64918: LD_VAR 0 2
64922: PPUSH
64923: EMPTY
64924: PPUSH
64925: CALL_OW 1
64929: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
64930: LD_ADDR_EXP 50
64934: PUSH
64935: LD_EXP 50
64939: PPUSH
64940: LD_VAR 0 2
64944: PPUSH
64945: EMPTY
64946: PPUSH
64947: CALL_OW 1
64951: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
64952: LD_ADDR_EXP 49
64956: PUSH
64957: LD_EXP 49
64961: PPUSH
64962: LD_VAR 0 2
64966: PPUSH
64967: EMPTY
64968: PPUSH
64969: CALL_OW 1
64973: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
64974: LD_ADDR_EXP 51
64978: PUSH
64979: LD_EXP 51
64983: PPUSH
64984: LD_VAR 0 2
64988: PPUSH
64989: EMPTY
64990: PPUSH
64991: CALL_OW 1
64995: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
64996: LD_ADDR_EXP 52
65000: PUSH
65001: LD_EXP 52
65005: PPUSH
65006: LD_VAR 0 2
65010: PPUSH
65011: EMPTY
65012: PPUSH
65013: CALL_OW 1
65017: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
65018: LD_ADDR_EXP 53
65022: PUSH
65023: LD_EXP 53
65027: PPUSH
65028: LD_VAR 0 2
65032: PPUSH
65033: EMPTY
65034: PPUSH
65035: CALL_OW 1
65039: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
65040: LD_ADDR_EXP 54
65044: PUSH
65045: LD_EXP 54
65049: PPUSH
65050: LD_VAR 0 2
65054: PPUSH
65055: EMPTY
65056: PPUSH
65057: CALL_OW 1
65061: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
65062: LD_ADDR_EXP 55
65066: PUSH
65067: LD_EXP 55
65071: PPUSH
65072: LD_VAR 0 2
65076: PPUSH
65077: EMPTY
65078: PPUSH
65079: CALL_OW 1
65083: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
65084: LD_ADDR_EXP 56
65088: PUSH
65089: LD_EXP 56
65093: PPUSH
65094: LD_VAR 0 2
65098: PPUSH
65099: EMPTY
65100: PPUSH
65101: CALL_OW 1
65105: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
65106: LD_ADDR_EXP 57
65110: PUSH
65111: LD_EXP 57
65115: PPUSH
65116: LD_VAR 0 2
65120: PPUSH
65121: EMPTY
65122: PPUSH
65123: CALL_OW 1
65127: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
65128: LD_ADDR_EXP 58
65132: PUSH
65133: LD_EXP 58
65137: PPUSH
65138: LD_VAR 0 2
65142: PPUSH
65143: EMPTY
65144: PPUSH
65145: CALL_OW 1
65149: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
65150: LD_ADDR_EXP 47
65154: PUSH
65155: LD_EXP 47
65159: PPUSH
65160: LD_VAR 0 2
65164: PPUSH
65165: LD_INT 0
65167: PPUSH
65168: CALL_OW 1
65172: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
65173: LD_ADDR_EXP 60
65177: PUSH
65178: LD_EXP 60
65182: PPUSH
65183: LD_VAR 0 2
65187: PPUSH
65188: LD_INT 0
65190: PPUSH
65191: CALL_OW 1
65195: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
65196: LD_ADDR_EXP 48
65200: PUSH
65201: LD_EXP 48
65205: PPUSH
65206: LD_VAR 0 2
65210: PPUSH
65211: EMPTY
65212: PPUSH
65213: CALL_OW 1
65217: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
65218: LD_ADDR_EXP 59
65222: PUSH
65223: LD_EXP 59
65227: PPUSH
65228: LD_VAR 0 2
65232: PPUSH
65233: LD_INT 0
65235: PPUSH
65236: CALL_OW 1
65240: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
65241: LD_ADDR_EXP 61
65245: PUSH
65246: LD_EXP 61
65250: PPUSH
65251: LD_VAR 0 2
65255: PPUSH
65256: EMPTY
65257: PPUSH
65258: CALL_OW 1
65262: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
65263: LD_ADDR_EXP 64
65267: PUSH
65268: LD_EXP 64
65272: PPUSH
65273: LD_VAR 0 2
65277: PPUSH
65278: LD_INT 0
65280: PPUSH
65281: CALL_OW 1
65285: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
65286: LD_ADDR_EXP 65
65290: PUSH
65291: LD_EXP 65
65295: PPUSH
65296: LD_VAR 0 2
65300: PPUSH
65301: EMPTY
65302: PPUSH
65303: CALL_OW 1
65307: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
65308: LD_ADDR_EXP 66
65312: PUSH
65313: LD_EXP 66
65317: PPUSH
65318: LD_VAR 0 2
65322: PPUSH
65323: EMPTY
65324: PPUSH
65325: CALL_OW 1
65329: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
65330: LD_ADDR_EXP 67
65334: PUSH
65335: LD_EXP 67
65339: PPUSH
65340: LD_VAR 0 2
65344: PPUSH
65345: EMPTY
65346: PPUSH
65347: CALL_OW 1
65351: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
65352: LD_ADDR_EXP 69
65356: PUSH
65357: LD_EXP 69
65361: PPUSH
65362: LD_VAR 0 2
65366: PPUSH
65367: LD_EXP 36
65371: PUSH
65372: LD_VAR 0 2
65376: ARRAY
65377: PPUSH
65378: LD_INT 2
65380: PUSH
65381: LD_INT 30
65383: PUSH
65384: LD_INT 6
65386: PUSH
65387: EMPTY
65388: LIST
65389: LIST
65390: PUSH
65391: LD_INT 30
65393: PUSH
65394: LD_INT 7
65396: PUSH
65397: EMPTY
65398: LIST
65399: LIST
65400: PUSH
65401: LD_INT 30
65403: PUSH
65404: LD_INT 8
65406: PUSH
65407: EMPTY
65408: LIST
65409: LIST
65410: PUSH
65411: EMPTY
65412: LIST
65413: LIST
65414: LIST
65415: LIST
65416: PPUSH
65417: CALL_OW 72
65421: PPUSH
65422: CALL_OW 1
65426: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
65427: LD_ADDR_EXP 70
65431: PUSH
65432: LD_EXP 70
65436: PPUSH
65437: LD_VAR 0 2
65441: PPUSH
65442: EMPTY
65443: PPUSH
65444: CALL_OW 1
65448: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
65449: LD_ADDR_EXP 71
65453: PUSH
65454: LD_EXP 71
65458: PPUSH
65459: LD_VAR 0 2
65463: PPUSH
65464: EMPTY
65465: PPUSH
65466: CALL_OW 1
65470: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , i , [ ] ) ;
65471: LD_ADDR_EXP 72
65475: PUSH
65476: LD_EXP 72
65480: PPUSH
65481: LD_VAR 0 2
65485: PPUSH
65486: EMPTY
65487: PPUSH
65488: CALL_OW 1
65492: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
65493: LD_ADDR_EXP 73
65497: PUSH
65498: LD_EXP 73
65502: PPUSH
65503: LD_VAR 0 2
65507: PPUSH
65508: EMPTY
65509: PPUSH
65510: CALL_OW 1
65514: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
65515: LD_ADDR_EXP 74
65519: PUSH
65520: LD_EXP 74
65524: PPUSH
65525: LD_VAR 0 2
65529: PPUSH
65530: EMPTY
65531: PPUSH
65532: CALL_OW 1
65536: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
65537: LD_ADDR_EXP 75
65541: PUSH
65542: LD_EXP 75
65546: PPUSH
65547: LD_VAR 0 2
65551: PPUSH
65552: EMPTY
65553: PPUSH
65554: CALL_OW 1
65558: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
65559: LD_ADDR_EXP 76
65563: PUSH
65564: LD_EXP 76
65568: PPUSH
65569: LD_VAR 0 2
65573: PPUSH
65574: EMPTY
65575: PPUSH
65576: CALL_OW 1
65580: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , [ ] ) ;
65581: LD_ADDR_EXP 77
65585: PUSH
65586: LD_EXP 77
65590: PPUSH
65591: LD_VAR 0 2
65595: PPUSH
65596: EMPTY
65597: PPUSH
65598: CALL_OW 1
65602: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , i , 0 ) ;
65603: LD_ADDR_EXP 78
65607: PUSH
65608: LD_EXP 78
65612: PPUSH
65613: LD_VAR 0 2
65617: PPUSH
65618: LD_INT 0
65620: PPUSH
65621: CALL_OW 1
65625: ST_TO_ADDR
// end ;
65626: GO 64550
65628: POP
65629: POP
// MC_InitSides ( ) ;
65630: CALL 65916 0 0
// MC_InitResearch ( ) ;
65634: CALL 65655 0 0
// CustomInitMacro ( ) ;
65638: CALL 1408 0 0
// skirmish := true ;
65642: LD_ADDR_EXP 34
65646: PUSH
65647: LD_INT 1
65649: ST_TO_ADDR
// end ;
65650: LD_VAR 0 1
65654: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
65655: LD_INT 0
65657: PPUSH
65658: PPUSH
65659: PPUSH
65660: PPUSH
65661: PPUSH
65662: PPUSH
// if not mc_bases then
65663: LD_EXP 36
65667: NOT
65668: IFFALSE 65672
// exit ;
65670: GO 65911
// for i = 1 to 8 do
65672: LD_ADDR_VAR 0 2
65676: PUSH
65677: DOUBLE
65678: LD_INT 1
65680: DEC
65681: ST_TO_ADDR
65682: LD_INT 8
65684: PUSH
65685: FOR_TO
65686: IFFALSE 65712
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
65688: LD_ADDR_EXP 63
65692: PUSH
65693: LD_EXP 63
65697: PPUSH
65698: LD_VAR 0 2
65702: PPUSH
65703: EMPTY
65704: PPUSH
65705: CALL_OW 1
65709: ST_TO_ADDR
65710: GO 65685
65712: POP
65713: POP
// tmp := [ ] ;
65714: LD_ADDR_VAR 0 5
65718: PUSH
65719: EMPTY
65720: ST_TO_ADDR
// for i = 1 to mc_sides do
65721: LD_ADDR_VAR 0 2
65725: PUSH
65726: DOUBLE
65727: LD_INT 1
65729: DEC
65730: ST_TO_ADDR
65731: LD_EXP 62
65735: PUSH
65736: FOR_TO
65737: IFFALSE 65795
// if not mc_sides [ i ] in tmp then
65739: LD_EXP 62
65743: PUSH
65744: LD_VAR 0 2
65748: ARRAY
65749: PUSH
65750: LD_VAR 0 5
65754: IN
65755: NOT
65756: IFFALSE 65793
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
65758: LD_ADDR_VAR 0 5
65762: PUSH
65763: LD_VAR 0 5
65767: PPUSH
65768: LD_VAR 0 5
65772: PUSH
65773: LD_INT 1
65775: PLUS
65776: PPUSH
65777: LD_EXP 62
65781: PUSH
65782: LD_VAR 0 2
65786: ARRAY
65787: PPUSH
65788: CALL_OW 2
65792: ST_TO_ADDR
65793: GO 65736
65795: POP
65796: POP
// if not tmp then
65797: LD_VAR 0 5
65801: NOT
65802: IFFALSE 65806
// exit ;
65804: GO 65911
// for j in tmp do
65806: LD_ADDR_VAR 0 3
65810: PUSH
65811: LD_VAR 0 5
65815: PUSH
65816: FOR_IN
65817: IFFALSE 65909
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
65819: LD_ADDR_VAR 0 6
65823: PUSH
65824: LD_INT 22
65826: PUSH
65827: LD_VAR 0 3
65831: PUSH
65832: EMPTY
65833: LIST
65834: LIST
65835: PPUSH
65836: CALL_OW 69
65840: ST_TO_ADDR
// if not un then
65841: LD_VAR 0 6
65845: NOT
65846: IFFALSE 65850
// continue ;
65848: GO 65816
// nation := GetNation ( un [ 1 ] ) ;
65850: LD_ADDR_VAR 0 4
65854: PUSH
65855: LD_VAR 0 6
65859: PUSH
65860: LD_INT 1
65862: ARRAY
65863: PPUSH
65864: CALL_OW 248
65868: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
65869: LD_ADDR_EXP 63
65873: PUSH
65874: LD_EXP 63
65878: PPUSH
65879: LD_VAR 0 3
65883: PPUSH
65884: LD_VAR 0 3
65888: PPUSH
65889: LD_VAR 0 4
65893: PPUSH
65894: LD_INT 1
65896: PPUSH
65897: CALL 19867 0 3
65901: PPUSH
65902: CALL_OW 1
65906: ST_TO_ADDR
// end ;
65907: GO 65816
65909: POP
65910: POP
// end ;
65911: LD_VAR 0 1
65915: RET
// export function MC_InitSides ( ) ; var i ; begin
65916: LD_INT 0
65918: PPUSH
65919: PPUSH
// if not mc_bases then
65920: LD_EXP 36
65924: NOT
65925: IFFALSE 65929
// exit ;
65927: GO 66003
// for i = 1 to mc_bases do
65929: LD_ADDR_VAR 0 2
65933: PUSH
65934: DOUBLE
65935: LD_INT 1
65937: DEC
65938: ST_TO_ADDR
65939: LD_EXP 36
65943: PUSH
65944: FOR_TO
65945: IFFALSE 66001
// if mc_bases [ i ] then
65947: LD_EXP 36
65951: PUSH
65952: LD_VAR 0 2
65956: ARRAY
65957: IFFALSE 65999
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
65959: LD_ADDR_EXP 62
65963: PUSH
65964: LD_EXP 62
65968: PPUSH
65969: LD_VAR 0 2
65973: PPUSH
65974: LD_EXP 36
65978: PUSH
65979: LD_VAR 0 2
65983: ARRAY
65984: PUSH
65985: LD_INT 1
65987: ARRAY
65988: PPUSH
65989: CALL_OW 255
65993: PPUSH
65994: CALL_OW 1
65998: ST_TO_ADDR
65999: GO 65944
66001: POP
66002: POP
// end ;
66003: LD_VAR 0 1
66007: RET
// every 0 0$01 trigger skirmish do
66008: LD_EXP 34
66012: IFFALSE 66166
66014: GO 66016
66016: DISABLE
// begin enable ;
66017: ENABLE
// MC_CheckBuildings ( ) ;
66018: CALL 70655 0 0
// MC_CheckPeopleLife ( ) ;
66022: CALL 70780 0 0
// RaiseSailEvent ( 100 ) ;
66026: LD_INT 100
66028: PPUSH
66029: CALL_OW 427
// RaiseSailEvent ( 103 ) ;
66033: LD_INT 103
66035: PPUSH
66036: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
66040: LD_INT 104
66042: PPUSH
66043: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
66047: LD_INT 105
66049: PPUSH
66050: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
66054: LD_INT 106
66056: PPUSH
66057: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
66061: LD_INT 107
66063: PPUSH
66064: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
66068: LD_INT 108
66070: PPUSH
66071: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
66075: LD_INT 109
66077: PPUSH
66078: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
66082: LD_INT 110
66084: PPUSH
66085: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
66089: LD_INT 111
66091: PPUSH
66092: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
66096: LD_INT 112
66098: PPUSH
66099: CALL_OW 427
// RaiseSailEvent ( 113 ) ;
66103: LD_INT 113
66105: PPUSH
66106: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
66110: LD_INT 120
66112: PPUSH
66113: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
66117: LD_INT 121
66119: PPUSH
66120: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
66124: LD_INT 122
66126: PPUSH
66127: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
66131: LD_INT 123
66133: PPUSH
66134: CALL_OW 427
// RaiseSailEvent ( 124 ) ;
66138: LD_INT 124
66140: PPUSH
66141: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
66145: LD_INT 125
66147: PPUSH
66148: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
66152: LD_INT 126
66154: PPUSH
66155: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
66159: LD_INT 200
66161: PPUSH
66162: CALL_OW 427
// end ;
66166: END
// on SailEvent ( event ) do begin if event < 100 then
66167: LD_VAR 0 1
66171: PUSH
66172: LD_INT 100
66174: LESS
66175: IFFALSE 66186
// CustomEvent ( event ) ;
66177: LD_VAR 0 1
66181: PPUSH
66182: CALL 19066 0 1
// if event = 100 then
66186: LD_VAR 0 1
66190: PUSH
66191: LD_INT 100
66193: EQUAL
66194: IFFALSE 66200
// MC_ClassManager ( ) ;
66196: CALL 66592 0 0
// if event = 101 then
66200: LD_VAR 0 1
66204: PUSH
66205: LD_INT 101
66207: EQUAL
66208: IFFALSE 66214
// MC_RepairBuildings ( ) ;
66210: CALL 71376 0 0
// if event = 102 then
66214: LD_VAR 0 1
66218: PUSH
66219: LD_INT 102
66221: EQUAL
66222: IFFALSE 66228
// MC_Heal ( ) ;
66224: CALL 71782 0 0
// if event = 103 then
66228: LD_VAR 0 1
66232: PUSH
66233: LD_INT 103
66235: EQUAL
66236: IFFALSE 66242
// MC_Build ( ) ;
66238: CALL 72204 0 0
// if event = 104 then
66242: LD_VAR 0 1
66246: PUSH
66247: LD_INT 104
66249: EQUAL
66250: IFFALSE 66256
// MC_TurretWeapon ( ) ;
66252: CALL 73817 0 0
// if event = 105 then
66256: LD_VAR 0 1
66260: PUSH
66261: LD_INT 105
66263: EQUAL
66264: IFFALSE 66270
// MC_BuildUpgrade ( ) ;
66266: CALL 73368 0 0
// if event = 106 then
66270: LD_VAR 0 1
66274: PUSH
66275: LD_INT 106
66277: EQUAL
66278: IFFALSE 66284
// MC_PlantMines ( ) ;
66280: CALL 74247 0 0
// if event = 107 then
66284: LD_VAR 0 1
66288: PUSH
66289: LD_INT 107
66291: EQUAL
66292: IFFALSE 66298
// MC_CollectCrates ( ) ;
66294: CALL 75281 0 0
// if event = 108 then
66298: LD_VAR 0 1
66302: PUSH
66303: LD_INT 108
66305: EQUAL
66306: IFFALSE 66312
// MC_LinkRemoteControl ( ) ;
66308: CALL 77038 0 0
// if event = 109 then
66312: LD_VAR 0 1
66316: PUSH
66317: LD_INT 109
66319: EQUAL
66320: IFFALSE 66326
// MC_ProduceVehicle ( ) ;
66322: CALL 77219 0 0
// if event = 110 then
66326: LD_VAR 0 1
66330: PUSH
66331: LD_INT 110
66333: EQUAL
66334: IFFALSE 66340
// MC_SendAttack ( ) ;
66336: CALL 77700 0 0
// if event = 111 then
66340: LD_VAR 0 1
66344: PUSH
66345: LD_INT 111
66347: EQUAL
66348: IFFALSE 66354
// MC_Defend ( ) ;
66350: CALL 77808 0 0
// if event = 112 then
66354: LD_VAR 0 1
66358: PUSH
66359: LD_INT 112
66361: EQUAL
66362: IFFALSE 66368
// MC_Research ( ) ;
66364: CALL 78435 0 0
// if event = 113 then
66368: LD_VAR 0 1
66372: PUSH
66373: LD_INT 113
66375: EQUAL
66376: IFFALSE 66382
// MC_MinesTrigger ( ) ;
66378: CALL 79549 0 0
// if event = 120 then
66382: LD_VAR 0 1
66386: PUSH
66387: LD_INT 120
66389: EQUAL
66390: IFFALSE 66396
// MC_RepairVehicle ( ) ;
66392: CALL 79648 0 0
// if event = 121 then
66396: LD_VAR 0 1
66400: PUSH
66401: LD_INT 121
66403: EQUAL
66404: IFFALSE 66410
// MC_TameApe ( ) ;
66406: CALL 80391 0 0
// if event = 122 then
66410: LD_VAR 0 1
66414: PUSH
66415: LD_INT 122
66417: EQUAL
66418: IFFALSE 66424
// MC_ChangeApeClass ( ) ;
66420: CALL 81220 0 0
// if event = 123 then
66424: LD_VAR 0 1
66428: PUSH
66429: LD_INT 123
66431: EQUAL
66432: IFFALSE 66438
// MC_Bazooka ( ) ;
66434: CALL 81870 0 0
// if event = 124 then
66438: LD_VAR 0 1
66442: PUSH
66443: LD_INT 124
66445: EQUAL
66446: IFFALSE 66452
// MC_TeleportExit ( ) ;
66448: CALL 82068 0 0
// if event = 125 then
66452: LD_VAR 0 1
66456: PUSH
66457: LD_INT 125
66459: EQUAL
66460: IFFALSE 66466
// MC_Deposits ( ) ;
66462: CALL 82715 0 0
// if event = 126 then
66466: LD_VAR 0 1
66470: PUSH
66471: LD_INT 126
66473: EQUAL
66474: IFFALSE 66480
// MC_RemoteDriver ( ) ;
66476: CALL 83340 0 0
// if event = 200 then
66480: LD_VAR 0 1
66484: PUSH
66485: LD_INT 200
66487: EQUAL
66488: IFFALSE 66494
// MC_Idle ( ) ;
66490: CALL 85073 0 0
// end ;
66494: PPOPN 1
66496: END
// export function MC_Reset ( base , tag ) ; var i ; begin
66497: LD_INT 0
66499: PPUSH
66500: PPUSH
// if not mc_bases [ base ] or not tag then
66501: LD_EXP 36
66505: PUSH
66506: LD_VAR 0 1
66510: ARRAY
66511: NOT
66512: PUSH
66513: LD_VAR 0 2
66517: NOT
66518: OR
66519: IFFALSE 66523
// exit ;
66521: GO 66587
// for i in mc_bases [ base ] union mc_ape [ base ] do
66523: LD_ADDR_VAR 0 4
66527: PUSH
66528: LD_EXP 36
66532: PUSH
66533: LD_VAR 0 1
66537: ARRAY
66538: PUSH
66539: LD_EXP 65
66543: PUSH
66544: LD_VAR 0 1
66548: ARRAY
66549: UNION
66550: PUSH
66551: FOR_IN
66552: IFFALSE 66585
// if GetTag ( i ) = tag then
66554: LD_VAR 0 4
66558: PPUSH
66559: CALL_OW 110
66563: PUSH
66564: LD_VAR 0 2
66568: EQUAL
66569: IFFALSE 66583
// SetTag ( i , 0 ) ;
66571: LD_VAR 0 4
66575: PPUSH
66576: LD_INT 0
66578: PPUSH
66579: CALL_OW 109
66583: GO 66551
66585: POP
66586: POP
// end ;
66587: LD_VAR 0 3
66591: RET
// export function MC_ClassManager ( ) ; var i , j , tmp , p , b , e , k ; begin
66592: LD_INT 0
66594: PPUSH
66595: PPUSH
66596: PPUSH
66597: PPUSH
66598: PPUSH
66599: PPUSH
66600: PPUSH
66601: PPUSH
// if not mc_bases then
66602: LD_EXP 36
66606: NOT
66607: IFFALSE 66611
// exit ;
66609: GO 67069
// for i = 1 to mc_bases do
66611: LD_ADDR_VAR 0 2
66615: PUSH
66616: DOUBLE
66617: LD_INT 1
66619: DEC
66620: ST_TO_ADDR
66621: LD_EXP 36
66625: PUSH
66626: FOR_TO
66627: IFFALSE 67067
// begin tmp := MC_ClassCheckReq ( i ) ;
66629: LD_ADDR_VAR 0 4
66633: PUSH
66634: LD_VAR 0 2
66638: PPUSH
66639: CALL 67074 0 1
66643: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , tmp ) ;
66644: LD_ADDR_EXP 77
66648: PUSH
66649: LD_EXP 77
66653: PPUSH
66654: LD_VAR 0 2
66658: PPUSH
66659: LD_VAR 0 4
66663: PPUSH
66664: CALL_OW 1
66668: ST_TO_ADDR
// if not tmp then
66669: LD_VAR 0 4
66673: NOT
66674: IFFALSE 66678
// continue ;
66676: GO 66626
// b := [ UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ] ;
66678: LD_ADDR_VAR 0 6
66682: PUSH
66683: LD_EXP 36
66687: PUSH
66688: LD_VAR 0 2
66692: ARRAY
66693: PPUSH
66694: LD_INT 2
66696: PUSH
66697: LD_INT 30
66699: PUSH
66700: LD_INT 4
66702: PUSH
66703: EMPTY
66704: LIST
66705: LIST
66706: PUSH
66707: LD_INT 30
66709: PUSH
66710: LD_INT 5
66712: PUSH
66713: EMPTY
66714: LIST
66715: LIST
66716: PUSH
66717: EMPTY
66718: LIST
66719: LIST
66720: LIST
66721: PPUSH
66722: CALL_OW 72
66726: PUSH
66727: LD_EXP 36
66731: PUSH
66732: LD_VAR 0 2
66736: ARRAY
66737: PPUSH
66738: LD_INT 2
66740: PUSH
66741: LD_INT 30
66743: PUSH
66744: LD_INT 0
66746: PUSH
66747: EMPTY
66748: LIST
66749: LIST
66750: PUSH
66751: LD_INT 30
66753: PUSH
66754: LD_INT 1
66756: PUSH
66757: EMPTY
66758: LIST
66759: LIST
66760: PUSH
66761: EMPTY
66762: LIST
66763: LIST
66764: LIST
66765: PPUSH
66766: CALL_OW 72
66770: PUSH
66771: LD_EXP 36
66775: PUSH
66776: LD_VAR 0 2
66780: ARRAY
66781: PPUSH
66782: LD_INT 30
66784: PUSH
66785: LD_INT 3
66787: PUSH
66788: EMPTY
66789: LIST
66790: LIST
66791: PPUSH
66792: CALL_OW 72
66796: PUSH
66797: LD_EXP 36
66801: PUSH
66802: LD_VAR 0 2
66806: ARRAY
66807: PPUSH
66808: LD_INT 2
66810: PUSH
66811: LD_INT 30
66813: PUSH
66814: LD_INT 6
66816: PUSH
66817: EMPTY
66818: LIST
66819: LIST
66820: PUSH
66821: LD_INT 30
66823: PUSH
66824: LD_INT 7
66826: PUSH
66827: EMPTY
66828: LIST
66829: LIST
66830: PUSH
66831: LD_INT 30
66833: PUSH
66834: LD_INT 8
66836: PUSH
66837: EMPTY
66838: LIST
66839: LIST
66840: PUSH
66841: EMPTY
66842: LIST
66843: LIST
66844: LIST
66845: LIST
66846: PPUSH
66847: CALL_OW 72
66851: PUSH
66852: EMPTY
66853: LIST
66854: LIST
66855: LIST
66856: LIST
66857: ST_TO_ADDR
// for j = 1 to 4 do
66858: LD_ADDR_VAR 0 3
66862: PUSH
66863: DOUBLE
66864: LD_INT 1
66866: DEC
66867: ST_TO_ADDR
66868: LD_INT 4
66870: PUSH
66871: FOR_TO
66872: IFFALSE 67063
// begin if not tmp [ j ] then
66874: LD_VAR 0 4
66878: PUSH
66879: LD_VAR 0 3
66883: ARRAY
66884: NOT
66885: IFFALSE 66889
// continue ;
66887: GO 66871
// for p in tmp [ j ] do
66889: LD_ADDR_VAR 0 5
66893: PUSH
66894: LD_VAR 0 4
66898: PUSH
66899: LD_VAR 0 3
66903: ARRAY
66904: PUSH
66905: FOR_IN
66906: IFFALSE 67059
// begin if not b [ j ] then
66908: LD_VAR 0 6
66912: PUSH
66913: LD_VAR 0 3
66917: ARRAY
66918: NOT
66919: IFFALSE 66923
// break ;
66921: GO 67059
// e := 0 ;
66923: LD_ADDR_VAR 0 7
66927: PUSH
66928: LD_INT 0
66930: ST_TO_ADDR
// for k in b [ j ] do
66931: LD_ADDR_VAR 0 8
66935: PUSH
66936: LD_VAR 0 6
66940: PUSH
66941: LD_VAR 0 3
66945: ARRAY
66946: PUSH
66947: FOR_IN
66948: IFFALSE 66975
// if IsNotFull ( k ) then
66950: LD_VAR 0 8
66954: PPUSH
66955: CALL 23893 0 1
66959: IFFALSE 66973
// begin e := k ;
66961: LD_ADDR_VAR 0 7
66965: PUSH
66966: LD_VAR 0 8
66970: ST_TO_ADDR
// break ;
66971: GO 66975
// end ;
66973: GO 66947
66975: POP
66976: POP
// if e and not UnitGoingToBuilding ( p , e ) then
66977: LD_VAR 0 7
66981: PUSH
66982: LD_VAR 0 5
66986: PPUSH
66987: LD_VAR 0 7
66991: PPUSH
66992: CALL 60920 0 2
66996: NOT
66997: AND
66998: IFFALSE 67057
// begin if IsInUnit ( p ) then
67000: LD_VAR 0 5
67004: PPUSH
67005: CALL_OW 310
67009: IFFALSE 67020
// ComExitBuilding ( p ) ;
67011: LD_VAR 0 5
67015: PPUSH
67016: CALL_OW 122
// ComEnterUnit ( p , e ) ;
67020: LD_VAR 0 5
67024: PPUSH
67025: LD_VAR 0 7
67029: PPUSH
67030: CALL_OW 120
// AddComChangeProfession ( p , j ) ;
67034: LD_VAR 0 5
67038: PPUSH
67039: LD_VAR 0 3
67043: PPUSH
67044: CALL_OW 183
// AddComExitBuilding ( p ) ;
67048: LD_VAR 0 5
67052: PPUSH
67053: CALL_OW 182
// end ; end ;
67057: GO 66905
67059: POP
67060: POP
// end ;
67061: GO 66871
67063: POP
67064: POP
// end ;
67065: GO 66626
67067: POP
67068: POP
// end ;
67069: LD_VAR 0 1
67073: RET
// export function MC_ClassCheckReq ( base ) ; var i , tmp , sol , eng , mech , sci , sort , j , p , b , bcount ; begin
67074: LD_INT 0
67076: PPUSH
67077: PPUSH
67078: PPUSH
67079: PPUSH
67080: PPUSH
67081: PPUSH
67082: PPUSH
67083: PPUSH
67084: PPUSH
67085: PPUSH
67086: PPUSH
67087: PPUSH
// if not base or not mc_bases [ base ] or not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
67088: LD_VAR 0 1
67092: NOT
67093: PUSH
67094: LD_EXP 36
67098: PUSH
67099: LD_VAR 0 1
67103: ARRAY
67104: NOT
67105: OR
67106: PUSH
67107: LD_EXP 36
67111: PUSH
67112: LD_VAR 0 1
67116: ARRAY
67117: PPUSH
67118: LD_INT 2
67120: PUSH
67121: LD_INT 30
67123: PUSH
67124: LD_INT 0
67126: PUSH
67127: EMPTY
67128: LIST
67129: LIST
67130: PUSH
67131: LD_INT 30
67133: PUSH
67134: LD_INT 1
67136: PUSH
67137: EMPTY
67138: LIST
67139: LIST
67140: PUSH
67141: EMPTY
67142: LIST
67143: LIST
67144: LIST
67145: PPUSH
67146: CALL_OW 72
67150: NOT
67151: OR
67152: IFFALSE 67156
// exit ;
67154: GO 70650
// tmp := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
67156: LD_ADDR_VAR 0 4
67160: PUSH
67161: LD_EXP 36
67165: PUSH
67166: LD_VAR 0 1
67170: ARRAY
67171: PPUSH
67172: LD_INT 2
67174: PUSH
67175: LD_INT 25
67177: PUSH
67178: LD_INT 1
67180: PUSH
67181: EMPTY
67182: LIST
67183: LIST
67184: PUSH
67185: LD_INT 25
67187: PUSH
67188: LD_INT 2
67190: PUSH
67191: EMPTY
67192: LIST
67193: LIST
67194: PUSH
67195: LD_INT 25
67197: PUSH
67198: LD_INT 3
67200: PUSH
67201: EMPTY
67202: LIST
67203: LIST
67204: PUSH
67205: LD_INT 25
67207: PUSH
67208: LD_INT 4
67210: PUSH
67211: EMPTY
67212: LIST
67213: LIST
67214: PUSH
67215: LD_INT 25
67217: PUSH
67218: LD_INT 5
67220: PUSH
67221: EMPTY
67222: LIST
67223: LIST
67224: PUSH
67225: LD_INT 25
67227: PUSH
67228: LD_INT 8
67230: PUSH
67231: EMPTY
67232: LIST
67233: LIST
67234: PUSH
67235: LD_INT 25
67237: PUSH
67238: LD_INT 9
67240: PUSH
67241: EMPTY
67242: LIST
67243: LIST
67244: PUSH
67245: EMPTY
67246: LIST
67247: LIST
67248: LIST
67249: LIST
67250: LIST
67251: LIST
67252: LIST
67253: LIST
67254: PPUSH
67255: CALL_OW 72
67259: ST_TO_ADDR
// for i in tmp do
67260: LD_ADDR_VAR 0 3
67264: PUSH
67265: LD_VAR 0 4
67269: PUSH
67270: FOR_IN
67271: IFFALSE 67302
// if GetTag ( i ) then
67273: LD_VAR 0 3
67277: PPUSH
67278: CALL_OW 110
67282: IFFALSE 67300
// tmp := tmp diff i ;
67284: LD_ADDR_VAR 0 4
67288: PUSH
67289: LD_VAR 0 4
67293: PUSH
67294: LD_VAR 0 3
67298: DIFF
67299: ST_TO_ADDR
67300: GO 67270
67302: POP
67303: POP
// if not tmp then
67304: LD_VAR 0 4
67308: NOT
67309: IFFALSE 67313
// exit ;
67311: GO 70650
// sol := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
67313: LD_ADDR_VAR 0 5
67317: PUSH
67318: LD_EXP 36
67322: PUSH
67323: LD_VAR 0 1
67327: ARRAY
67328: PPUSH
67329: LD_INT 2
67331: PUSH
67332: LD_INT 25
67334: PUSH
67335: LD_INT 1
67337: PUSH
67338: EMPTY
67339: LIST
67340: LIST
67341: PUSH
67342: LD_INT 25
67344: PUSH
67345: LD_INT 5
67347: PUSH
67348: EMPTY
67349: LIST
67350: LIST
67351: PUSH
67352: LD_INT 25
67354: PUSH
67355: LD_INT 8
67357: PUSH
67358: EMPTY
67359: LIST
67360: LIST
67361: PUSH
67362: LD_INT 25
67364: PUSH
67365: LD_INT 9
67367: PUSH
67368: EMPTY
67369: LIST
67370: LIST
67371: PUSH
67372: EMPTY
67373: LIST
67374: LIST
67375: LIST
67376: LIST
67377: LIST
67378: PPUSH
67379: CALL_OW 72
67383: ST_TO_ADDR
// eng := UnitFilter ( mc_bases [ base ] , [ f_class , 2 ] ) ;
67384: LD_ADDR_VAR 0 6
67388: PUSH
67389: LD_EXP 36
67393: PUSH
67394: LD_VAR 0 1
67398: ARRAY
67399: PPUSH
67400: LD_INT 25
67402: PUSH
67403: LD_INT 2
67405: PUSH
67406: EMPTY
67407: LIST
67408: LIST
67409: PPUSH
67410: CALL_OW 72
67414: ST_TO_ADDR
// mech := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
67415: LD_ADDR_VAR 0 7
67419: PUSH
67420: LD_EXP 36
67424: PUSH
67425: LD_VAR 0 1
67429: ARRAY
67430: PPUSH
67431: LD_INT 25
67433: PUSH
67434: LD_INT 3
67436: PUSH
67437: EMPTY
67438: LIST
67439: LIST
67440: PPUSH
67441: CALL_OW 72
67445: ST_TO_ADDR
// sci := UnitFilter ( mc_bases [ base ] , [ [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
67446: LD_ADDR_VAR 0 8
67450: PUSH
67451: LD_EXP 36
67455: PUSH
67456: LD_VAR 0 1
67460: ARRAY
67461: PPUSH
67462: LD_INT 25
67464: PUSH
67465: LD_INT 4
67467: PUSH
67468: EMPTY
67469: LIST
67470: LIST
67471: PUSH
67472: LD_INT 24
67474: PUSH
67475: LD_INT 251
67477: PUSH
67478: EMPTY
67479: LIST
67480: LIST
67481: PUSH
67482: EMPTY
67483: LIST
67484: LIST
67485: PPUSH
67486: CALL_OW 72
67490: ST_TO_ADDR
// if mc_scan [ base ] then
67491: LD_EXP 59
67495: PUSH
67496: LD_VAR 0 1
67500: ARRAY
67501: IFFALSE 67962
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 4 ) ;
67503: LD_ADDR_EXP 78
67507: PUSH
67508: LD_EXP 78
67512: PPUSH
67513: LD_VAR 0 1
67517: PPUSH
67518: LD_INT 4
67520: PPUSH
67521: CALL_OW 1
67525: ST_TO_ADDR
// b := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
67526: LD_ADDR_VAR 0 12
67530: PUSH
67531: LD_EXP 36
67535: PUSH
67536: LD_VAR 0 1
67540: ARRAY
67541: PPUSH
67542: LD_INT 2
67544: PUSH
67545: LD_INT 30
67547: PUSH
67548: LD_INT 4
67550: PUSH
67551: EMPTY
67552: LIST
67553: LIST
67554: PUSH
67555: LD_INT 30
67557: PUSH
67558: LD_INT 5
67560: PUSH
67561: EMPTY
67562: LIST
67563: LIST
67564: PUSH
67565: EMPTY
67566: LIST
67567: LIST
67568: LIST
67569: PPUSH
67570: CALL_OW 72
67574: ST_TO_ADDR
// if not b then
67575: LD_VAR 0 12
67579: NOT
67580: IFFALSE 67584
// exit ;
67582: GO 70650
// p := [ ] ;
67584: LD_ADDR_VAR 0 11
67588: PUSH
67589: EMPTY
67590: ST_TO_ADDR
// if sci >= 2 then
67591: LD_VAR 0 8
67595: PUSH
67596: LD_INT 2
67598: GREATEREQUAL
67599: IFFALSE 67630
// sci := [ sci [ 1 ] , sci [ 2 ] ] else
67601: LD_ADDR_VAR 0 8
67605: PUSH
67606: LD_VAR 0 8
67610: PUSH
67611: LD_INT 1
67613: ARRAY
67614: PUSH
67615: LD_VAR 0 8
67619: PUSH
67620: LD_INT 2
67622: ARRAY
67623: PUSH
67624: EMPTY
67625: LIST
67626: LIST
67627: ST_TO_ADDR
67628: GO 67691
// if sci = 1 then
67630: LD_VAR 0 8
67634: PUSH
67635: LD_INT 1
67637: EQUAL
67638: IFFALSE 67659
// sci := [ sci [ 1 ] ] else
67640: LD_ADDR_VAR 0 8
67644: PUSH
67645: LD_VAR 0 8
67649: PUSH
67650: LD_INT 1
67652: ARRAY
67653: PUSH
67654: EMPTY
67655: LIST
67656: ST_TO_ADDR
67657: GO 67691
// if sci = 0 then
67659: LD_VAR 0 8
67663: PUSH
67664: LD_INT 0
67666: EQUAL
67667: IFFALSE 67691
// p := SortBySkill ( tmp , 4 ) [ 1 ] ;
67669: LD_ADDR_VAR 0 11
67673: PUSH
67674: LD_VAR 0 4
67678: PPUSH
67679: LD_INT 4
67681: PPUSH
67682: CALL 60783 0 2
67686: PUSH
67687: LD_INT 1
67689: ARRAY
67690: ST_TO_ADDR
// if eng > 4 then
67691: LD_VAR 0 6
67695: PUSH
67696: LD_INT 4
67698: GREATER
67699: IFFALSE 67745
// for i = eng downto 4 do
67701: LD_ADDR_VAR 0 3
67705: PUSH
67706: DOUBLE
67707: LD_VAR 0 6
67711: INC
67712: ST_TO_ADDR
67713: LD_INT 4
67715: PUSH
67716: FOR_DOWNTO
67717: IFFALSE 67743
// eng := eng diff eng [ i ] ;
67719: LD_ADDR_VAR 0 6
67723: PUSH
67724: LD_VAR 0 6
67728: PUSH
67729: LD_VAR 0 6
67733: PUSH
67734: LD_VAR 0 3
67738: ARRAY
67739: DIFF
67740: ST_TO_ADDR
67741: GO 67716
67743: POP
67744: POP
// tmp := tmp diff ( sol union eng union mech union sci ) ;
67745: LD_ADDR_VAR 0 4
67749: PUSH
67750: LD_VAR 0 4
67754: PUSH
67755: LD_VAR 0 5
67759: PUSH
67760: LD_VAR 0 6
67764: UNION
67765: PUSH
67766: LD_VAR 0 7
67770: UNION
67771: PUSH
67772: LD_VAR 0 8
67776: UNION
67777: DIFF
67778: ST_TO_ADDR
// bcount := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) + UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) * 6 ;
67779: LD_ADDR_VAR 0 13
67783: PUSH
67784: LD_EXP 36
67788: PUSH
67789: LD_VAR 0 1
67793: ARRAY
67794: PPUSH
67795: LD_INT 2
67797: PUSH
67798: LD_INT 30
67800: PUSH
67801: LD_INT 32
67803: PUSH
67804: EMPTY
67805: LIST
67806: LIST
67807: PUSH
67808: LD_INT 30
67810: PUSH
67811: LD_INT 31
67813: PUSH
67814: EMPTY
67815: LIST
67816: LIST
67817: PUSH
67818: EMPTY
67819: LIST
67820: LIST
67821: LIST
67822: PPUSH
67823: CALL_OW 72
67827: PUSH
67828: LD_EXP 36
67832: PUSH
67833: LD_VAR 0 1
67837: ARRAY
67838: PPUSH
67839: LD_INT 2
67841: PUSH
67842: LD_INT 30
67844: PUSH
67845: LD_INT 4
67847: PUSH
67848: EMPTY
67849: LIST
67850: LIST
67851: PUSH
67852: LD_INT 30
67854: PUSH
67855: LD_INT 5
67857: PUSH
67858: EMPTY
67859: LIST
67860: LIST
67861: PUSH
67862: EMPTY
67863: LIST
67864: LIST
67865: LIST
67866: PPUSH
67867: CALL_OW 72
67871: PUSH
67872: LD_INT 6
67874: MUL
67875: PLUS
67876: ST_TO_ADDR
// if bcount < tmp then
67877: LD_VAR 0 13
67881: PUSH
67882: LD_VAR 0 4
67886: LESS
67887: IFFALSE 67933
// for i = tmp downto bcount do
67889: LD_ADDR_VAR 0 3
67893: PUSH
67894: DOUBLE
67895: LD_VAR 0 4
67899: INC
67900: ST_TO_ADDR
67901: LD_VAR 0 13
67905: PUSH
67906: FOR_DOWNTO
67907: IFFALSE 67931
// tmp := Delete ( tmp , tmp ) ;
67909: LD_ADDR_VAR 0 4
67913: PUSH
67914: LD_VAR 0 4
67918: PPUSH
67919: LD_VAR 0 4
67923: PPUSH
67924: CALL_OW 3
67928: ST_TO_ADDR
67929: GO 67906
67931: POP
67932: POP
// result := [ tmp , 0 , 0 , p ] ;
67933: LD_ADDR_VAR 0 2
67937: PUSH
67938: LD_VAR 0 4
67942: PUSH
67943: LD_INT 0
67945: PUSH
67946: LD_INT 0
67948: PUSH
67949: LD_VAR 0 11
67953: PUSH
67954: EMPTY
67955: LIST
67956: LIST
67957: LIST
67958: LIST
67959: ST_TO_ADDR
// exit ;
67960: GO 70650
// end ; if not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
67962: LD_EXP 36
67966: PUSH
67967: LD_VAR 0 1
67971: ARRAY
67972: PPUSH
67973: LD_INT 2
67975: PUSH
67976: LD_INT 30
67978: PUSH
67979: LD_INT 6
67981: PUSH
67982: EMPTY
67983: LIST
67984: LIST
67985: PUSH
67986: LD_INT 30
67988: PUSH
67989: LD_INT 7
67991: PUSH
67992: EMPTY
67993: LIST
67994: LIST
67995: PUSH
67996: LD_INT 30
67998: PUSH
67999: LD_INT 8
68001: PUSH
68002: EMPTY
68003: LIST
68004: LIST
68005: PUSH
68006: EMPTY
68007: LIST
68008: LIST
68009: LIST
68010: LIST
68011: PPUSH
68012: CALL_OW 72
68016: NOT
68017: PUSH
68018: LD_EXP 36
68022: PUSH
68023: LD_VAR 0 1
68027: ARRAY
68028: PPUSH
68029: LD_INT 30
68031: PUSH
68032: LD_INT 3
68034: PUSH
68035: EMPTY
68036: LIST
68037: LIST
68038: PPUSH
68039: CALL_OW 72
68043: NOT
68044: AND
68045: IFFALSE 68117
// begin if eng = tmp then
68047: LD_VAR 0 6
68051: PUSH
68052: LD_VAR 0 4
68056: EQUAL
68057: IFFALSE 68061
// exit ;
68059: GO 70650
// mc_class_case_use := Replace ( mc_class_case_use , base , 1 ) ;
68061: LD_ADDR_EXP 78
68065: PUSH
68066: LD_EXP 78
68070: PPUSH
68071: LD_VAR 0 1
68075: PPUSH
68076: LD_INT 1
68078: PPUSH
68079: CALL_OW 1
68083: ST_TO_ADDR
// result := [ 0 , tmp diff eng , 0 , 0 ] ;
68084: LD_ADDR_VAR 0 2
68088: PUSH
68089: LD_INT 0
68091: PUSH
68092: LD_VAR 0 4
68096: PUSH
68097: LD_VAR 0 6
68101: DIFF
68102: PUSH
68103: LD_INT 0
68105: PUSH
68106: LD_INT 0
68108: PUSH
68109: EMPTY
68110: LIST
68111: LIST
68112: LIST
68113: LIST
68114: ST_TO_ADDR
// exit ;
68115: GO 70650
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
68117: LD_EXP 63
68121: PUSH
68122: LD_EXP 62
68126: PUSH
68127: LD_VAR 0 1
68131: ARRAY
68132: ARRAY
68133: PUSH
68134: LD_EXP 36
68138: PUSH
68139: LD_VAR 0 1
68143: ARRAY
68144: PPUSH
68145: LD_INT 2
68147: PUSH
68148: LD_INT 30
68150: PUSH
68151: LD_INT 6
68153: PUSH
68154: EMPTY
68155: LIST
68156: LIST
68157: PUSH
68158: LD_INT 30
68160: PUSH
68161: LD_INT 7
68163: PUSH
68164: EMPTY
68165: LIST
68166: LIST
68167: PUSH
68168: LD_INT 30
68170: PUSH
68171: LD_INT 8
68173: PUSH
68174: EMPTY
68175: LIST
68176: LIST
68177: PUSH
68178: EMPTY
68179: LIST
68180: LIST
68181: LIST
68182: LIST
68183: PPUSH
68184: CALL_OW 72
68188: AND
68189: PUSH
68190: LD_EXP 36
68194: PUSH
68195: LD_VAR 0 1
68199: ARRAY
68200: PPUSH
68201: LD_INT 30
68203: PUSH
68204: LD_INT 3
68206: PUSH
68207: EMPTY
68208: LIST
68209: LIST
68210: PPUSH
68211: CALL_OW 72
68215: NOT
68216: AND
68217: IFFALSE 68431
// begin if sci >= 6 then
68219: LD_VAR 0 8
68223: PUSH
68224: LD_INT 6
68226: GREATEREQUAL
68227: IFFALSE 68231
// exit ;
68229: GO 70650
// mc_class_case_use := Replace ( mc_class_case_use , base , 2 ) ;
68231: LD_ADDR_EXP 78
68235: PUSH
68236: LD_EXP 78
68240: PPUSH
68241: LD_VAR 0 1
68245: PPUSH
68246: LD_INT 2
68248: PPUSH
68249: CALL_OW 1
68253: ST_TO_ADDR
// sort := SortBySkill ( tmp diff sci , 4 ) ;
68254: LD_ADDR_VAR 0 9
68258: PUSH
68259: LD_VAR 0 4
68263: PUSH
68264: LD_VAR 0 8
68268: DIFF
68269: PPUSH
68270: LD_INT 4
68272: PPUSH
68273: CALL 60783 0 2
68277: ST_TO_ADDR
// p := [ ] ;
68278: LD_ADDR_VAR 0 11
68282: PUSH
68283: EMPTY
68284: ST_TO_ADDR
// if sci < 6 and sort > 6 then
68285: LD_VAR 0 8
68289: PUSH
68290: LD_INT 6
68292: LESS
68293: PUSH
68294: LD_VAR 0 9
68298: PUSH
68299: LD_INT 6
68301: GREATER
68302: AND
68303: IFFALSE 68384
// begin for i = 1 to 6 - sci do
68305: LD_ADDR_VAR 0 3
68309: PUSH
68310: DOUBLE
68311: LD_INT 1
68313: DEC
68314: ST_TO_ADDR
68315: LD_INT 6
68317: PUSH
68318: LD_VAR 0 8
68322: MINUS
68323: PUSH
68324: FOR_TO
68325: IFFALSE 68380
// begin p := Insert ( p , p + 1 , sort [ 1 ] ) ;
68327: LD_ADDR_VAR 0 11
68331: PUSH
68332: LD_VAR 0 11
68336: PPUSH
68337: LD_VAR 0 11
68341: PUSH
68342: LD_INT 1
68344: PLUS
68345: PPUSH
68346: LD_VAR 0 9
68350: PUSH
68351: LD_INT 1
68353: ARRAY
68354: PPUSH
68355: CALL_OW 2
68359: ST_TO_ADDR
// sort := Delete ( sort , 1 ) ;
68360: LD_ADDR_VAR 0 9
68364: PUSH
68365: LD_VAR 0 9
68369: PPUSH
68370: LD_INT 1
68372: PPUSH
68373: CALL_OW 3
68377: ST_TO_ADDR
// end ;
68378: GO 68324
68380: POP
68381: POP
// end else
68382: GO 68404
// if sort then
68384: LD_VAR 0 9
68388: IFFALSE 68404
// p := sort [ 1 ] ;
68390: LD_ADDR_VAR 0 11
68394: PUSH
68395: LD_VAR 0 9
68399: PUSH
68400: LD_INT 1
68402: ARRAY
68403: ST_TO_ADDR
// result := [ 0 , 0 , 0 , p ] ;
68404: LD_ADDR_VAR 0 2
68408: PUSH
68409: LD_INT 0
68411: PUSH
68412: LD_INT 0
68414: PUSH
68415: LD_INT 0
68417: PUSH
68418: LD_VAR 0 11
68422: PUSH
68423: EMPTY
68424: LIST
68425: LIST
68426: LIST
68427: LIST
68428: ST_TO_ADDR
// exit ;
68429: GO 70650
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
68431: LD_EXP 63
68435: PUSH
68436: LD_EXP 62
68440: PUSH
68441: LD_VAR 0 1
68445: ARRAY
68446: ARRAY
68447: PUSH
68448: LD_EXP 36
68452: PUSH
68453: LD_VAR 0 1
68457: ARRAY
68458: PPUSH
68459: LD_INT 2
68461: PUSH
68462: LD_INT 30
68464: PUSH
68465: LD_INT 6
68467: PUSH
68468: EMPTY
68469: LIST
68470: LIST
68471: PUSH
68472: LD_INT 30
68474: PUSH
68475: LD_INT 7
68477: PUSH
68478: EMPTY
68479: LIST
68480: LIST
68481: PUSH
68482: LD_INT 30
68484: PUSH
68485: LD_INT 8
68487: PUSH
68488: EMPTY
68489: LIST
68490: LIST
68491: PUSH
68492: EMPTY
68493: LIST
68494: LIST
68495: LIST
68496: LIST
68497: PPUSH
68498: CALL_OW 72
68502: AND
68503: PUSH
68504: LD_EXP 36
68508: PUSH
68509: LD_VAR 0 1
68513: ARRAY
68514: PPUSH
68515: LD_INT 30
68517: PUSH
68518: LD_INT 3
68520: PUSH
68521: EMPTY
68522: LIST
68523: LIST
68524: PPUSH
68525: CALL_OW 72
68529: AND
68530: IFFALSE 69264
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 3 ) ;
68532: LD_ADDR_EXP 78
68536: PUSH
68537: LD_EXP 78
68541: PPUSH
68542: LD_VAR 0 1
68546: PPUSH
68547: LD_INT 3
68549: PPUSH
68550: CALL_OW 1
68554: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
68555: LD_ADDR_VAR 0 2
68559: PUSH
68560: LD_INT 0
68562: PUSH
68563: LD_INT 0
68565: PUSH
68566: LD_INT 0
68568: PUSH
68569: LD_INT 0
68571: PUSH
68572: EMPTY
68573: LIST
68574: LIST
68575: LIST
68576: LIST
68577: ST_TO_ADDR
// if not eng then
68578: LD_VAR 0 6
68582: NOT
68583: IFFALSE 68646
// begin p := SortBySkill ( tmp , 2 ) [ 1 ] ;
68585: LD_ADDR_VAR 0 11
68589: PUSH
68590: LD_VAR 0 4
68594: PPUSH
68595: LD_INT 2
68597: PPUSH
68598: CALL 60783 0 2
68602: PUSH
68603: LD_INT 1
68605: ARRAY
68606: ST_TO_ADDR
// result := Replace ( result , 2 , p ) ;
68607: LD_ADDR_VAR 0 2
68611: PUSH
68612: LD_VAR 0 2
68616: PPUSH
68617: LD_INT 2
68619: PPUSH
68620: LD_VAR 0 11
68624: PPUSH
68625: CALL_OW 1
68629: ST_TO_ADDR
// tmp := tmp diff p ;
68630: LD_ADDR_VAR 0 4
68634: PUSH
68635: LD_VAR 0 4
68639: PUSH
68640: LD_VAR 0 11
68644: DIFF
68645: ST_TO_ADDR
// end ; if tmp and sci < 6 then
68646: LD_VAR 0 4
68650: PUSH
68651: LD_VAR 0 8
68655: PUSH
68656: LD_INT 6
68658: LESS
68659: AND
68660: IFFALSE 68848
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 4 ) ;
68662: LD_ADDR_VAR 0 9
68666: PUSH
68667: LD_VAR 0 4
68671: PUSH
68672: LD_VAR 0 8
68676: PUSH
68677: LD_VAR 0 7
68681: UNION
68682: DIFF
68683: PPUSH
68684: LD_INT 4
68686: PPUSH
68687: CALL 60783 0 2
68691: ST_TO_ADDR
// p := [ ] ;
68692: LD_ADDR_VAR 0 11
68696: PUSH
68697: EMPTY
68698: ST_TO_ADDR
// if sort then
68699: LD_VAR 0 9
68703: IFFALSE 68819
// for i = 1 to 6 - sci do
68705: LD_ADDR_VAR 0 3
68709: PUSH
68710: DOUBLE
68711: LD_INT 1
68713: DEC
68714: ST_TO_ADDR
68715: LD_INT 6
68717: PUSH
68718: LD_VAR 0 8
68722: MINUS
68723: PUSH
68724: FOR_TO
68725: IFFALSE 68817
// begin if i = sort then
68727: LD_VAR 0 3
68731: PUSH
68732: LD_VAR 0 9
68736: EQUAL
68737: IFFALSE 68741
// break ;
68739: GO 68817
// if GetClass ( i ) = 4 then
68741: LD_VAR 0 3
68745: PPUSH
68746: CALL_OW 257
68750: PUSH
68751: LD_INT 4
68753: EQUAL
68754: IFFALSE 68758
// continue ;
68756: GO 68724
// p := Insert ( p , p + 1 , sort [ i ] ) ;
68758: LD_ADDR_VAR 0 11
68762: PUSH
68763: LD_VAR 0 11
68767: PPUSH
68768: LD_VAR 0 11
68772: PUSH
68773: LD_INT 1
68775: PLUS
68776: PPUSH
68777: LD_VAR 0 9
68781: PUSH
68782: LD_VAR 0 3
68786: ARRAY
68787: PPUSH
68788: CALL_OW 2
68792: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
68793: LD_ADDR_VAR 0 4
68797: PUSH
68798: LD_VAR 0 4
68802: PUSH
68803: LD_VAR 0 9
68807: PUSH
68808: LD_VAR 0 3
68812: ARRAY
68813: DIFF
68814: ST_TO_ADDR
// end ;
68815: GO 68724
68817: POP
68818: POP
// if p then
68819: LD_VAR 0 11
68823: IFFALSE 68848
// result := Replace ( result , 4 , p ) ;
68825: LD_ADDR_VAR 0 2
68829: PUSH
68830: LD_VAR 0 2
68834: PPUSH
68835: LD_INT 4
68837: PPUSH
68838: LD_VAR 0 11
68842: PPUSH
68843: CALL_OW 1
68847: ST_TO_ADDR
// end ; if tmp and mech < 6 then
68848: LD_VAR 0 4
68852: PUSH
68853: LD_VAR 0 7
68857: PUSH
68858: LD_INT 6
68860: LESS
68861: AND
68862: IFFALSE 69050
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
68864: LD_ADDR_VAR 0 9
68868: PUSH
68869: LD_VAR 0 4
68873: PUSH
68874: LD_VAR 0 8
68878: PUSH
68879: LD_VAR 0 7
68883: UNION
68884: DIFF
68885: PPUSH
68886: LD_INT 3
68888: PPUSH
68889: CALL 60783 0 2
68893: ST_TO_ADDR
// p := [ ] ;
68894: LD_ADDR_VAR 0 11
68898: PUSH
68899: EMPTY
68900: ST_TO_ADDR
// if sort then
68901: LD_VAR 0 9
68905: IFFALSE 69021
// for i = 1 to 6 - mech do
68907: LD_ADDR_VAR 0 3
68911: PUSH
68912: DOUBLE
68913: LD_INT 1
68915: DEC
68916: ST_TO_ADDR
68917: LD_INT 6
68919: PUSH
68920: LD_VAR 0 7
68924: MINUS
68925: PUSH
68926: FOR_TO
68927: IFFALSE 69019
// begin if i = sort then
68929: LD_VAR 0 3
68933: PUSH
68934: LD_VAR 0 9
68938: EQUAL
68939: IFFALSE 68943
// break ;
68941: GO 69019
// if GetClass ( i ) = 3 then
68943: LD_VAR 0 3
68947: PPUSH
68948: CALL_OW 257
68952: PUSH
68953: LD_INT 3
68955: EQUAL
68956: IFFALSE 68960
// continue ;
68958: GO 68926
// p := Insert ( p , p + 1 , sort [ i ] ) ;
68960: LD_ADDR_VAR 0 11
68964: PUSH
68965: LD_VAR 0 11
68969: PPUSH
68970: LD_VAR 0 11
68974: PUSH
68975: LD_INT 1
68977: PLUS
68978: PPUSH
68979: LD_VAR 0 9
68983: PUSH
68984: LD_VAR 0 3
68988: ARRAY
68989: PPUSH
68990: CALL_OW 2
68994: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
68995: LD_ADDR_VAR 0 4
68999: PUSH
69000: LD_VAR 0 4
69004: PUSH
69005: LD_VAR 0 9
69009: PUSH
69010: LD_VAR 0 3
69014: ARRAY
69015: DIFF
69016: ST_TO_ADDR
// end ;
69017: GO 68926
69019: POP
69020: POP
// if p then
69021: LD_VAR 0 11
69025: IFFALSE 69050
// result := Replace ( result , 3 , p ) ;
69027: LD_ADDR_VAR 0 2
69031: PUSH
69032: LD_VAR 0 2
69036: PPUSH
69037: LD_INT 3
69039: PPUSH
69040: LD_VAR 0 11
69044: PPUSH
69045: CALL_OW 1
69049: ST_TO_ADDR
// end ; if tmp > 6 and eng < 6 then
69050: LD_VAR 0 4
69054: PUSH
69055: LD_INT 6
69057: GREATER
69058: PUSH
69059: LD_VAR 0 6
69063: PUSH
69064: LD_INT 6
69066: LESS
69067: AND
69068: IFFALSE 69262
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
69070: LD_ADDR_VAR 0 9
69074: PUSH
69075: LD_VAR 0 4
69079: PUSH
69080: LD_VAR 0 8
69084: PUSH
69085: LD_VAR 0 7
69089: UNION
69090: PUSH
69091: LD_VAR 0 6
69095: UNION
69096: DIFF
69097: PPUSH
69098: LD_INT 2
69100: PPUSH
69101: CALL 60783 0 2
69105: ST_TO_ADDR
// p := [ ] ;
69106: LD_ADDR_VAR 0 11
69110: PUSH
69111: EMPTY
69112: ST_TO_ADDR
// if sort then
69113: LD_VAR 0 9
69117: IFFALSE 69233
// for i = 1 to 6 - eng do
69119: LD_ADDR_VAR 0 3
69123: PUSH
69124: DOUBLE
69125: LD_INT 1
69127: DEC
69128: ST_TO_ADDR
69129: LD_INT 6
69131: PUSH
69132: LD_VAR 0 6
69136: MINUS
69137: PUSH
69138: FOR_TO
69139: IFFALSE 69231
// begin if i = sort then
69141: LD_VAR 0 3
69145: PUSH
69146: LD_VAR 0 9
69150: EQUAL
69151: IFFALSE 69155
// break ;
69153: GO 69231
// if GetClass ( i ) = 2 then
69155: LD_VAR 0 3
69159: PPUSH
69160: CALL_OW 257
69164: PUSH
69165: LD_INT 2
69167: EQUAL
69168: IFFALSE 69172
// continue ;
69170: GO 69138
// p := Insert ( p , p + 1 , sort [ i ] ) ;
69172: LD_ADDR_VAR 0 11
69176: PUSH
69177: LD_VAR 0 11
69181: PPUSH
69182: LD_VAR 0 11
69186: PUSH
69187: LD_INT 1
69189: PLUS
69190: PPUSH
69191: LD_VAR 0 9
69195: PUSH
69196: LD_VAR 0 3
69200: ARRAY
69201: PPUSH
69202: CALL_OW 2
69206: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
69207: LD_ADDR_VAR 0 4
69211: PUSH
69212: LD_VAR 0 4
69216: PUSH
69217: LD_VAR 0 9
69221: PUSH
69222: LD_VAR 0 3
69226: ARRAY
69227: DIFF
69228: ST_TO_ADDR
// end ;
69229: GO 69138
69231: POP
69232: POP
// if p then
69233: LD_VAR 0 11
69237: IFFALSE 69262
// result := Replace ( result , 2 , p ) ;
69239: LD_ADDR_VAR 0 2
69243: PUSH
69244: LD_VAR 0 2
69248: PPUSH
69249: LD_INT 2
69251: PPUSH
69252: LD_VAR 0 11
69256: PPUSH
69257: CALL_OW 1
69261: ST_TO_ADDR
// end ; exit ;
69262: GO 70650
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and mc_build_list [ base ] then
69264: LD_EXP 63
69268: PUSH
69269: LD_EXP 62
69273: PUSH
69274: LD_VAR 0 1
69278: ARRAY
69279: ARRAY
69280: NOT
69281: PUSH
69282: LD_EXP 36
69286: PUSH
69287: LD_VAR 0 1
69291: ARRAY
69292: PPUSH
69293: LD_INT 30
69295: PUSH
69296: LD_INT 3
69298: PUSH
69299: EMPTY
69300: LIST
69301: LIST
69302: PPUSH
69303: CALL_OW 72
69307: AND
69308: PUSH
69309: LD_EXP 41
69313: PUSH
69314: LD_VAR 0 1
69318: ARRAY
69319: AND
69320: IFFALSE 69928
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 5 ) ;
69322: LD_ADDR_EXP 78
69326: PUSH
69327: LD_EXP 78
69331: PPUSH
69332: LD_VAR 0 1
69336: PPUSH
69337: LD_INT 5
69339: PPUSH
69340: CALL_OW 1
69344: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
69345: LD_ADDR_VAR 0 2
69349: PUSH
69350: LD_INT 0
69352: PUSH
69353: LD_INT 0
69355: PUSH
69356: LD_INT 0
69358: PUSH
69359: LD_INT 0
69361: PUSH
69362: EMPTY
69363: LIST
69364: LIST
69365: LIST
69366: LIST
69367: ST_TO_ADDR
// if sci > 1 then
69368: LD_VAR 0 8
69372: PUSH
69373: LD_INT 1
69375: GREATER
69376: IFFALSE 69404
// tmp := tmp diff ( sci diff sci [ 1 ] ) ;
69378: LD_ADDR_VAR 0 4
69382: PUSH
69383: LD_VAR 0 4
69387: PUSH
69388: LD_VAR 0 8
69392: PUSH
69393: LD_VAR 0 8
69397: PUSH
69398: LD_INT 1
69400: ARRAY
69401: DIFF
69402: DIFF
69403: ST_TO_ADDR
// if tmp and not sci then
69404: LD_VAR 0 4
69408: PUSH
69409: LD_VAR 0 8
69413: NOT
69414: AND
69415: IFFALSE 69484
// begin sort := SortBySkill ( tmp , 4 ) ;
69417: LD_ADDR_VAR 0 9
69421: PUSH
69422: LD_VAR 0 4
69426: PPUSH
69427: LD_INT 4
69429: PPUSH
69430: CALL 60783 0 2
69434: ST_TO_ADDR
// if sort then
69435: LD_VAR 0 9
69439: IFFALSE 69455
// p := sort [ 1 ] ;
69441: LD_ADDR_VAR 0 11
69445: PUSH
69446: LD_VAR 0 9
69450: PUSH
69451: LD_INT 1
69453: ARRAY
69454: ST_TO_ADDR
// if p then
69455: LD_VAR 0 11
69459: IFFALSE 69484
// result := Replace ( result , 4 , p ) ;
69461: LD_ADDR_VAR 0 2
69465: PUSH
69466: LD_VAR 0 2
69470: PPUSH
69471: LD_INT 4
69473: PPUSH
69474: LD_VAR 0 11
69478: PPUSH
69479: CALL_OW 1
69483: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
69484: LD_ADDR_VAR 0 4
69488: PUSH
69489: LD_VAR 0 4
69493: PUSH
69494: LD_VAR 0 7
69498: DIFF
69499: ST_TO_ADDR
// if tmp and mech < 6 then
69500: LD_VAR 0 4
69504: PUSH
69505: LD_VAR 0 7
69509: PUSH
69510: LD_INT 6
69512: LESS
69513: AND
69514: IFFALSE 69702
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
69516: LD_ADDR_VAR 0 9
69520: PUSH
69521: LD_VAR 0 4
69525: PUSH
69526: LD_VAR 0 8
69530: PUSH
69531: LD_VAR 0 7
69535: UNION
69536: DIFF
69537: PPUSH
69538: LD_INT 3
69540: PPUSH
69541: CALL 60783 0 2
69545: ST_TO_ADDR
// p := [ ] ;
69546: LD_ADDR_VAR 0 11
69550: PUSH
69551: EMPTY
69552: ST_TO_ADDR
// if sort then
69553: LD_VAR 0 9
69557: IFFALSE 69673
// for i = 1 to 6 - mech do
69559: LD_ADDR_VAR 0 3
69563: PUSH
69564: DOUBLE
69565: LD_INT 1
69567: DEC
69568: ST_TO_ADDR
69569: LD_INT 6
69571: PUSH
69572: LD_VAR 0 7
69576: MINUS
69577: PUSH
69578: FOR_TO
69579: IFFALSE 69671
// begin if i = sort then
69581: LD_VAR 0 3
69585: PUSH
69586: LD_VAR 0 9
69590: EQUAL
69591: IFFALSE 69595
// break ;
69593: GO 69671
// if GetClass ( i ) = 3 then
69595: LD_VAR 0 3
69599: PPUSH
69600: CALL_OW 257
69604: PUSH
69605: LD_INT 3
69607: EQUAL
69608: IFFALSE 69612
// continue ;
69610: GO 69578
// p := Insert ( p , p + 1 , sort [ i ] ) ;
69612: LD_ADDR_VAR 0 11
69616: PUSH
69617: LD_VAR 0 11
69621: PPUSH
69622: LD_VAR 0 11
69626: PUSH
69627: LD_INT 1
69629: PLUS
69630: PPUSH
69631: LD_VAR 0 9
69635: PUSH
69636: LD_VAR 0 3
69640: ARRAY
69641: PPUSH
69642: CALL_OW 2
69646: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
69647: LD_ADDR_VAR 0 4
69651: PUSH
69652: LD_VAR 0 4
69656: PUSH
69657: LD_VAR 0 9
69661: PUSH
69662: LD_VAR 0 3
69666: ARRAY
69667: DIFF
69668: ST_TO_ADDR
// end ;
69669: GO 69578
69671: POP
69672: POP
// if p then
69673: LD_VAR 0 11
69677: IFFALSE 69702
// result := Replace ( result , 3 , p ) ;
69679: LD_ADDR_VAR 0 2
69683: PUSH
69684: LD_VAR 0 2
69688: PPUSH
69689: LD_INT 3
69691: PPUSH
69692: LD_VAR 0 11
69696: PPUSH
69697: CALL_OW 1
69701: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
69702: LD_ADDR_VAR 0 4
69706: PUSH
69707: LD_VAR 0 4
69711: PUSH
69712: LD_VAR 0 6
69716: DIFF
69717: ST_TO_ADDR
// if tmp and eng < 6 then
69718: LD_VAR 0 4
69722: PUSH
69723: LD_VAR 0 6
69727: PUSH
69728: LD_INT 6
69730: LESS
69731: AND
69732: IFFALSE 69926
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
69734: LD_ADDR_VAR 0 9
69738: PUSH
69739: LD_VAR 0 4
69743: PUSH
69744: LD_VAR 0 8
69748: PUSH
69749: LD_VAR 0 7
69753: UNION
69754: PUSH
69755: LD_VAR 0 6
69759: UNION
69760: DIFF
69761: PPUSH
69762: LD_INT 2
69764: PPUSH
69765: CALL 60783 0 2
69769: ST_TO_ADDR
// p := [ ] ;
69770: LD_ADDR_VAR 0 11
69774: PUSH
69775: EMPTY
69776: ST_TO_ADDR
// if sort then
69777: LD_VAR 0 9
69781: IFFALSE 69897
// for i = 1 to 6 - eng do
69783: LD_ADDR_VAR 0 3
69787: PUSH
69788: DOUBLE
69789: LD_INT 1
69791: DEC
69792: ST_TO_ADDR
69793: LD_INT 6
69795: PUSH
69796: LD_VAR 0 6
69800: MINUS
69801: PUSH
69802: FOR_TO
69803: IFFALSE 69895
// begin if i = sort then
69805: LD_VAR 0 3
69809: PUSH
69810: LD_VAR 0 9
69814: EQUAL
69815: IFFALSE 69819
// break ;
69817: GO 69895
// if GetClass ( i ) = 2 then
69819: LD_VAR 0 3
69823: PPUSH
69824: CALL_OW 257
69828: PUSH
69829: LD_INT 2
69831: EQUAL
69832: IFFALSE 69836
// continue ;
69834: GO 69802
// p := Insert ( p , p + 1 , sort [ i ] ) ;
69836: LD_ADDR_VAR 0 11
69840: PUSH
69841: LD_VAR 0 11
69845: PPUSH
69846: LD_VAR 0 11
69850: PUSH
69851: LD_INT 1
69853: PLUS
69854: PPUSH
69855: LD_VAR 0 9
69859: PUSH
69860: LD_VAR 0 3
69864: ARRAY
69865: PPUSH
69866: CALL_OW 2
69870: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
69871: LD_ADDR_VAR 0 4
69875: PUSH
69876: LD_VAR 0 4
69880: PUSH
69881: LD_VAR 0 9
69885: PUSH
69886: LD_VAR 0 3
69890: ARRAY
69891: DIFF
69892: ST_TO_ADDR
// end ;
69893: GO 69802
69895: POP
69896: POP
// if p then
69897: LD_VAR 0 11
69901: IFFALSE 69926
// result := Replace ( result , 2 , p ) ;
69903: LD_ADDR_VAR 0 2
69907: PUSH
69908: LD_VAR 0 2
69912: PPUSH
69913: LD_INT 2
69915: PPUSH
69916: LD_VAR 0 11
69920: PPUSH
69921: CALL_OW 1
69925: ST_TO_ADDR
// end ; exit ;
69926: GO 70650
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and not mc_build_list [ base ] then
69928: LD_EXP 63
69932: PUSH
69933: LD_EXP 62
69937: PUSH
69938: LD_VAR 0 1
69942: ARRAY
69943: ARRAY
69944: NOT
69945: PUSH
69946: LD_EXP 36
69950: PUSH
69951: LD_VAR 0 1
69955: ARRAY
69956: PPUSH
69957: LD_INT 30
69959: PUSH
69960: LD_INT 3
69962: PUSH
69963: EMPTY
69964: LIST
69965: LIST
69966: PPUSH
69967: CALL_OW 72
69971: AND
69972: PUSH
69973: LD_EXP 41
69977: PUSH
69978: LD_VAR 0 1
69982: ARRAY
69983: NOT
69984: AND
69985: IFFALSE 70650
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 6 ) ;
69987: LD_ADDR_EXP 78
69991: PUSH
69992: LD_EXP 78
69996: PPUSH
69997: LD_VAR 0 1
70001: PPUSH
70002: LD_INT 6
70004: PPUSH
70005: CALL_OW 1
70009: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
70010: LD_ADDR_VAR 0 2
70014: PUSH
70015: LD_INT 0
70017: PUSH
70018: LD_INT 0
70020: PUSH
70021: LD_INT 0
70023: PUSH
70024: LD_INT 0
70026: PUSH
70027: EMPTY
70028: LIST
70029: LIST
70030: LIST
70031: LIST
70032: ST_TO_ADDR
// if sci >= 1 then
70033: LD_VAR 0 8
70037: PUSH
70038: LD_INT 1
70040: GREATEREQUAL
70041: IFFALSE 70063
// tmp := tmp diff sci [ 1 ] ;
70043: LD_ADDR_VAR 0 4
70047: PUSH
70048: LD_VAR 0 4
70052: PUSH
70053: LD_VAR 0 8
70057: PUSH
70058: LD_INT 1
70060: ARRAY
70061: DIFF
70062: ST_TO_ADDR
// if tmp and not sci then
70063: LD_VAR 0 4
70067: PUSH
70068: LD_VAR 0 8
70072: NOT
70073: AND
70074: IFFALSE 70143
// begin sort := SortBySkill ( tmp , 4 ) ;
70076: LD_ADDR_VAR 0 9
70080: PUSH
70081: LD_VAR 0 4
70085: PPUSH
70086: LD_INT 4
70088: PPUSH
70089: CALL 60783 0 2
70093: ST_TO_ADDR
// if sort then
70094: LD_VAR 0 9
70098: IFFALSE 70114
// p := sort [ 1 ] ;
70100: LD_ADDR_VAR 0 11
70104: PUSH
70105: LD_VAR 0 9
70109: PUSH
70110: LD_INT 1
70112: ARRAY
70113: ST_TO_ADDR
// if p then
70114: LD_VAR 0 11
70118: IFFALSE 70143
// result := Replace ( result , 4 , p ) ;
70120: LD_ADDR_VAR 0 2
70124: PUSH
70125: LD_VAR 0 2
70129: PPUSH
70130: LD_INT 4
70132: PPUSH
70133: LD_VAR 0 11
70137: PPUSH
70138: CALL_OW 1
70142: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
70143: LD_ADDR_VAR 0 4
70147: PUSH
70148: LD_VAR 0 4
70152: PUSH
70153: LD_VAR 0 7
70157: DIFF
70158: ST_TO_ADDR
// if tmp and mech < 6 then
70159: LD_VAR 0 4
70163: PUSH
70164: LD_VAR 0 7
70168: PUSH
70169: LD_INT 6
70171: LESS
70172: AND
70173: IFFALSE 70355
// begin sort := SortBySkill ( tmp diff mech , 3 ) ;
70175: LD_ADDR_VAR 0 9
70179: PUSH
70180: LD_VAR 0 4
70184: PUSH
70185: LD_VAR 0 7
70189: DIFF
70190: PPUSH
70191: LD_INT 3
70193: PPUSH
70194: CALL 60783 0 2
70198: ST_TO_ADDR
// p := [ ] ;
70199: LD_ADDR_VAR 0 11
70203: PUSH
70204: EMPTY
70205: ST_TO_ADDR
// if sort then
70206: LD_VAR 0 9
70210: IFFALSE 70326
// for i = 1 to 6 - mech do
70212: LD_ADDR_VAR 0 3
70216: PUSH
70217: DOUBLE
70218: LD_INT 1
70220: DEC
70221: ST_TO_ADDR
70222: LD_INT 6
70224: PUSH
70225: LD_VAR 0 7
70229: MINUS
70230: PUSH
70231: FOR_TO
70232: IFFALSE 70324
// begin if i = sort then
70234: LD_VAR 0 3
70238: PUSH
70239: LD_VAR 0 9
70243: EQUAL
70244: IFFALSE 70248
// break ;
70246: GO 70324
// if GetClass ( i ) = 3 then
70248: LD_VAR 0 3
70252: PPUSH
70253: CALL_OW 257
70257: PUSH
70258: LD_INT 3
70260: EQUAL
70261: IFFALSE 70265
// continue ;
70263: GO 70231
// p := Insert ( p , p + 1 , sort [ i ] ) ;
70265: LD_ADDR_VAR 0 11
70269: PUSH
70270: LD_VAR 0 11
70274: PPUSH
70275: LD_VAR 0 11
70279: PUSH
70280: LD_INT 1
70282: PLUS
70283: PPUSH
70284: LD_VAR 0 9
70288: PUSH
70289: LD_VAR 0 3
70293: ARRAY
70294: PPUSH
70295: CALL_OW 2
70299: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
70300: LD_ADDR_VAR 0 4
70304: PUSH
70305: LD_VAR 0 4
70309: PUSH
70310: LD_VAR 0 9
70314: PUSH
70315: LD_VAR 0 3
70319: ARRAY
70320: DIFF
70321: ST_TO_ADDR
// end ;
70322: GO 70231
70324: POP
70325: POP
// if p then
70326: LD_VAR 0 11
70330: IFFALSE 70355
// result := Replace ( result , 3 , p ) ;
70332: LD_ADDR_VAR 0 2
70336: PUSH
70337: LD_VAR 0 2
70341: PPUSH
70342: LD_INT 3
70344: PPUSH
70345: LD_VAR 0 11
70349: PPUSH
70350: CALL_OW 1
70354: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
70355: LD_ADDR_VAR 0 4
70359: PUSH
70360: LD_VAR 0 4
70364: PUSH
70365: LD_VAR 0 6
70369: DIFF
70370: ST_TO_ADDR
// if tmp and eng < 4 then
70371: LD_VAR 0 4
70375: PUSH
70376: LD_VAR 0 6
70380: PUSH
70381: LD_INT 4
70383: LESS
70384: AND
70385: IFFALSE 70575
// begin sort := SortBySkill ( tmp diff ( mech union eng ) , 2 ) ;
70387: LD_ADDR_VAR 0 9
70391: PUSH
70392: LD_VAR 0 4
70396: PUSH
70397: LD_VAR 0 7
70401: PUSH
70402: LD_VAR 0 6
70406: UNION
70407: DIFF
70408: PPUSH
70409: LD_INT 2
70411: PPUSH
70412: CALL 60783 0 2
70416: ST_TO_ADDR
// p := [ ] ;
70417: LD_ADDR_VAR 0 11
70421: PUSH
70422: EMPTY
70423: ST_TO_ADDR
// if sort then
70424: LD_VAR 0 9
70428: IFFALSE 70544
// for i = 1 to 4 - eng do
70430: LD_ADDR_VAR 0 3
70434: PUSH
70435: DOUBLE
70436: LD_INT 1
70438: DEC
70439: ST_TO_ADDR
70440: LD_INT 4
70442: PUSH
70443: LD_VAR 0 6
70447: MINUS
70448: PUSH
70449: FOR_TO
70450: IFFALSE 70542
// begin if i = sort then
70452: LD_VAR 0 3
70456: PUSH
70457: LD_VAR 0 9
70461: EQUAL
70462: IFFALSE 70466
// break ;
70464: GO 70542
// if GetClass ( i ) = 2 then
70466: LD_VAR 0 3
70470: PPUSH
70471: CALL_OW 257
70475: PUSH
70476: LD_INT 2
70478: EQUAL
70479: IFFALSE 70483
// continue ;
70481: GO 70449
// p := Insert ( p , p + 1 , sort [ i ] ) ;
70483: LD_ADDR_VAR 0 11
70487: PUSH
70488: LD_VAR 0 11
70492: PPUSH
70493: LD_VAR 0 11
70497: PUSH
70498: LD_INT 1
70500: PLUS
70501: PPUSH
70502: LD_VAR 0 9
70506: PUSH
70507: LD_VAR 0 3
70511: ARRAY
70512: PPUSH
70513: CALL_OW 2
70517: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
70518: LD_ADDR_VAR 0 4
70522: PUSH
70523: LD_VAR 0 4
70527: PUSH
70528: LD_VAR 0 9
70532: PUSH
70533: LD_VAR 0 3
70537: ARRAY
70538: DIFF
70539: ST_TO_ADDR
// end ;
70540: GO 70449
70542: POP
70543: POP
// if p then
70544: LD_VAR 0 11
70548: IFFALSE 70573
// result := Replace ( result , 2 , p ) ;
70550: LD_ADDR_VAR 0 2
70554: PUSH
70555: LD_VAR 0 2
70559: PPUSH
70560: LD_INT 2
70562: PPUSH
70563: LD_VAR 0 11
70567: PPUSH
70568: CALL_OW 1
70572: ST_TO_ADDR
// end else
70573: GO 70619
// for i = eng downto 5 do
70575: LD_ADDR_VAR 0 3
70579: PUSH
70580: DOUBLE
70581: LD_VAR 0 6
70585: INC
70586: ST_TO_ADDR
70587: LD_INT 5
70589: PUSH
70590: FOR_DOWNTO
70591: IFFALSE 70617
// tmp := tmp union eng [ i ] ;
70593: LD_ADDR_VAR 0 4
70597: PUSH
70598: LD_VAR 0 4
70602: PUSH
70603: LD_VAR 0 6
70607: PUSH
70608: LD_VAR 0 3
70612: ARRAY
70613: UNION
70614: ST_TO_ADDR
70615: GO 70590
70617: POP
70618: POP
// result := Replace ( result , 1 , tmp diff sol ) ;
70619: LD_ADDR_VAR 0 2
70623: PUSH
70624: LD_VAR 0 2
70628: PPUSH
70629: LD_INT 1
70631: PPUSH
70632: LD_VAR 0 4
70636: PUSH
70637: LD_VAR 0 5
70641: DIFF
70642: PPUSH
70643: CALL_OW 1
70647: ST_TO_ADDR
// exit ;
70648: GO 70650
// end ; end ;
70650: LD_VAR 0 2
70654: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
70655: LD_INT 0
70657: PPUSH
70658: PPUSH
70659: PPUSH
// if not mc_bases then
70660: LD_EXP 36
70664: NOT
70665: IFFALSE 70669
// exit ;
70667: GO 70775
// for i = 1 to mc_bases do
70669: LD_ADDR_VAR 0 2
70673: PUSH
70674: DOUBLE
70675: LD_INT 1
70677: DEC
70678: ST_TO_ADDR
70679: LD_EXP 36
70683: PUSH
70684: FOR_TO
70685: IFFALSE 70766
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
70687: LD_ADDR_VAR 0 3
70691: PUSH
70692: LD_EXP 36
70696: PUSH
70697: LD_VAR 0 2
70701: ARRAY
70702: PPUSH
70703: LD_INT 21
70705: PUSH
70706: LD_INT 3
70708: PUSH
70709: EMPTY
70710: LIST
70711: LIST
70712: PUSH
70713: LD_INT 3
70715: PUSH
70716: LD_INT 24
70718: PUSH
70719: LD_INT 1000
70721: PUSH
70722: EMPTY
70723: LIST
70724: LIST
70725: PUSH
70726: EMPTY
70727: LIST
70728: LIST
70729: PUSH
70730: EMPTY
70731: LIST
70732: LIST
70733: PPUSH
70734: CALL_OW 72
70738: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
70739: LD_ADDR_EXP 37
70743: PUSH
70744: LD_EXP 37
70748: PPUSH
70749: LD_VAR 0 2
70753: PPUSH
70754: LD_VAR 0 3
70758: PPUSH
70759: CALL_OW 1
70763: ST_TO_ADDR
// end ;
70764: GO 70684
70766: POP
70767: POP
// RaiseSailEvent ( 101 ) ;
70768: LD_INT 101
70770: PPUSH
70771: CALL_OW 427
// end ;
70775: LD_VAR 0 1
70779: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
70780: LD_INT 0
70782: PPUSH
70783: PPUSH
70784: PPUSH
70785: PPUSH
70786: PPUSH
70787: PPUSH
70788: PPUSH
// if not mc_bases then
70789: LD_EXP 36
70793: NOT
70794: IFFALSE 70798
// exit ;
70796: GO 71371
// for i = 1 to mc_bases do
70798: LD_ADDR_VAR 0 2
70802: PUSH
70803: DOUBLE
70804: LD_INT 1
70806: DEC
70807: ST_TO_ADDR
70808: LD_EXP 36
70812: PUSH
70813: FOR_TO
70814: IFFALSE 71362
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 750 ] ] ] ] ) ;
70816: LD_ADDR_VAR 0 5
70820: PUSH
70821: LD_EXP 36
70825: PUSH
70826: LD_VAR 0 2
70830: ARRAY
70831: PUSH
70832: LD_EXP 65
70836: PUSH
70837: LD_VAR 0 2
70841: ARRAY
70842: UNION
70843: PPUSH
70844: LD_INT 21
70846: PUSH
70847: LD_INT 1
70849: PUSH
70850: EMPTY
70851: LIST
70852: LIST
70853: PUSH
70854: LD_INT 1
70856: PUSH
70857: LD_INT 3
70859: PUSH
70860: LD_INT 54
70862: PUSH
70863: EMPTY
70864: LIST
70865: PUSH
70866: EMPTY
70867: LIST
70868: LIST
70869: PUSH
70870: LD_INT 3
70872: PUSH
70873: LD_INT 24
70875: PUSH
70876: LD_INT 750
70878: PUSH
70879: EMPTY
70880: LIST
70881: LIST
70882: PUSH
70883: EMPTY
70884: LIST
70885: LIST
70886: PUSH
70887: EMPTY
70888: LIST
70889: LIST
70890: LIST
70891: PUSH
70892: EMPTY
70893: LIST
70894: LIST
70895: PPUSH
70896: CALL_OW 72
70900: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
70901: LD_ADDR_VAR 0 6
70905: PUSH
70906: LD_EXP 36
70910: PUSH
70911: LD_VAR 0 2
70915: ARRAY
70916: PPUSH
70917: LD_INT 21
70919: PUSH
70920: LD_INT 1
70922: PUSH
70923: EMPTY
70924: LIST
70925: LIST
70926: PUSH
70927: LD_INT 1
70929: PUSH
70930: LD_INT 3
70932: PUSH
70933: LD_INT 54
70935: PUSH
70936: EMPTY
70937: LIST
70938: PUSH
70939: EMPTY
70940: LIST
70941: LIST
70942: PUSH
70943: LD_INT 3
70945: PUSH
70946: LD_INT 24
70948: PUSH
70949: LD_INT 250
70951: PUSH
70952: EMPTY
70953: LIST
70954: LIST
70955: PUSH
70956: EMPTY
70957: LIST
70958: LIST
70959: PUSH
70960: EMPTY
70961: LIST
70962: LIST
70963: LIST
70964: PUSH
70965: EMPTY
70966: LIST
70967: LIST
70968: PPUSH
70969: CALL_OW 72
70973: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
70974: LD_ADDR_VAR 0 7
70978: PUSH
70979: LD_VAR 0 5
70983: PUSH
70984: LD_VAR 0 6
70988: DIFF
70989: ST_TO_ADDR
// if not need_heal_1 then
70990: LD_VAR 0 6
70994: NOT
70995: IFFALSE 71028
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , [ ] ) else
70997: LD_ADDR_EXP 39
71001: PUSH
71002: LD_EXP 39
71006: PPUSH
71007: LD_VAR 0 2
71011: PUSH
71012: LD_INT 1
71014: PUSH
71015: EMPTY
71016: LIST
71017: LIST
71018: PPUSH
71019: EMPTY
71020: PPUSH
71021: CALL 26559 0 3
71025: ST_TO_ADDR
71026: GO 71098
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , UnitFilter ( mc_need_heal [ i ] [ 1 ] , [ f_not , [ f_lives , 1000 ] ] ) union need_heal_1 ) ;
71028: LD_ADDR_EXP 39
71032: PUSH
71033: LD_EXP 39
71037: PPUSH
71038: LD_VAR 0 2
71042: PUSH
71043: LD_INT 1
71045: PUSH
71046: EMPTY
71047: LIST
71048: LIST
71049: PPUSH
71050: LD_EXP 39
71054: PUSH
71055: LD_VAR 0 2
71059: ARRAY
71060: PUSH
71061: LD_INT 1
71063: ARRAY
71064: PPUSH
71065: LD_INT 3
71067: PUSH
71068: LD_INT 24
71070: PUSH
71071: LD_INT 1000
71073: PUSH
71074: EMPTY
71075: LIST
71076: LIST
71077: PUSH
71078: EMPTY
71079: LIST
71080: LIST
71081: PPUSH
71082: CALL_OW 72
71086: PUSH
71087: LD_VAR 0 6
71091: UNION
71092: PPUSH
71093: CALL 26559 0 3
71097: ST_TO_ADDR
// if not need_heal_2 then
71098: LD_VAR 0 7
71102: NOT
71103: IFFALSE 71136
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , [ ] ) else
71105: LD_ADDR_EXP 39
71109: PUSH
71110: LD_EXP 39
71114: PPUSH
71115: LD_VAR 0 2
71119: PUSH
71120: LD_INT 2
71122: PUSH
71123: EMPTY
71124: LIST
71125: LIST
71126: PPUSH
71127: EMPTY
71128: PPUSH
71129: CALL 26559 0 3
71133: ST_TO_ADDR
71134: GO 71168
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
71136: LD_ADDR_EXP 39
71140: PUSH
71141: LD_EXP 39
71145: PPUSH
71146: LD_VAR 0 2
71150: PUSH
71151: LD_INT 2
71153: PUSH
71154: EMPTY
71155: LIST
71156: LIST
71157: PPUSH
71158: LD_VAR 0 7
71162: PPUSH
71163: CALL 26559 0 3
71167: ST_TO_ADDR
// if need_heal_2 then
71168: LD_VAR 0 7
71172: IFFALSE 71344
// for j in need_heal_2 do
71174: LD_ADDR_VAR 0 3
71178: PUSH
71179: LD_VAR 0 7
71183: PUSH
71184: FOR_IN
71185: IFFALSE 71342
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
71187: LD_ADDR_VAR 0 5
71191: PUSH
71192: LD_EXP 36
71196: PUSH
71197: LD_VAR 0 2
71201: ARRAY
71202: PPUSH
71203: LD_INT 2
71205: PUSH
71206: LD_INT 30
71208: PUSH
71209: LD_INT 6
71211: PUSH
71212: EMPTY
71213: LIST
71214: LIST
71215: PUSH
71216: LD_INT 30
71218: PUSH
71219: LD_INT 7
71221: PUSH
71222: EMPTY
71223: LIST
71224: LIST
71225: PUSH
71226: LD_INT 30
71228: PUSH
71229: LD_INT 8
71231: PUSH
71232: EMPTY
71233: LIST
71234: LIST
71235: PUSH
71236: LD_INT 30
71238: PUSH
71239: LD_INT 0
71241: PUSH
71242: EMPTY
71243: LIST
71244: LIST
71245: PUSH
71246: LD_INT 30
71248: PUSH
71249: LD_INT 1
71251: PUSH
71252: EMPTY
71253: LIST
71254: LIST
71255: PUSH
71256: LD_INT 25
71258: PUSH
71259: LD_INT 4
71261: PUSH
71262: EMPTY
71263: LIST
71264: LIST
71265: PUSH
71266: EMPTY
71267: LIST
71268: LIST
71269: LIST
71270: LIST
71271: LIST
71272: LIST
71273: LIST
71274: PPUSH
71275: CALL_OW 72
71279: ST_TO_ADDR
// if tmp then
71280: LD_VAR 0 5
71284: IFFALSE 71340
// begin k := NearestUnitToUnit ( tmp , j ) ;
71286: LD_ADDR_VAR 0 4
71290: PUSH
71291: LD_VAR 0 5
71295: PPUSH
71296: LD_VAR 0 3
71300: PPUSH
71301: CALL_OW 74
71305: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
71306: LD_VAR 0 3
71310: PPUSH
71311: LD_VAR 0 4
71315: PPUSH
71316: CALL_OW 296
71320: PUSH
71321: LD_INT 7
71323: GREATER
71324: IFFALSE 71340
// ComMoveUnit ( j , k ) ;
71326: LD_VAR 0 3
71330: PPUSH
71331: LD_VAR 0 4
71335: PPUSH
71336: CALL_OW 112
// end ; end ;
71340: GO 71184
71342: POP
71343: POP
// if not need_heal_1 and not need_heal_2 then
71344: LD_VAR 0 6
71348: NOT
71349: PUSH
71350: LD_VAR 0 7
71354: NOT
71355: AND
71356: IFFALSE 71360
// continue ;
71358: GO 70813
// end ;
71360: GO 70813
71362: POP
71363: POP
// RaiseSailEvent ( 102 ) ;
71364: LD_INT 102
71366: PPUSH
71367: CALL_OW 427
// end ;
71371: LD_VAR 0 1
71375: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp ; begin
71376: LD_INT 0
71378: PPUSH
71379: PPUSH
71380: PPUSH
71381: PPUSH
71382: PPUSH
// if not mc_bases then
71383: LD_EXP 36
71387: NOT
71388: IFFALSE 71392
// exit ;
71390: GO 71777
// for i = 1 to mc_bases do
71392: LD_ADDR_VAR 0 2
71396: PUSH
71397: DOUBLE
71398: LD_INT 1
71400: DEC
71401: ST_TO_ADDR
71402: LD_EXP 36
71406: PUSH
71407: FOR_TO
71408: IFFALSE 71775
// begin if not mc_building_need_repair [ i ] then
71410: LD_EXP 37
71414: PUSH
71415: LD_VAR 0 2
71419: ARRAY
71420: NOT
71421: IFFALSE 71459
// begin mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
71423: LD_ADDR_EXP 38
71427: PUSH
71428: LD_EXP 38
71432: PPUSH
71433: LD_VAR 0 2
71437: PPUSH
71438: EMPTY
71439: PPUSH
71440: CALL_OW 1
71444: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
71445: LD_VAR 0 2
71449: PPUSH
71450: LD_INT 101
71452: PPUSH
71453: CALL 66497 0 2
// continue ;
71457: GO 71407
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
71459: LD_ADDR_EXP 42
71463: PUSH
71464: LD_EXP 42
71468: PPUSH
71469: LD_VAR 0 2
71473: PPUSH
71474: EMPTY
71475: PPUSH
71476: CALL_OW 1
71480: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
71481: LD_VAR 0 2
71485: PPUSH
71486: LD_INT 103
71488: PPUSH
71489: CALL 66497 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
71493: LD_ADDR_VAR 0 5
71497: PUSH
71498: LD_EXP 36
71502: PUSH
71503: LD_VAR 0 2
71507: ARRAY
71508: PUSH
71509: LD_EXP 65
71513: PUSH
71514: LD_VAR 0 2
71518: ARRAY
71519: UNION
71520: PPUSH
71521: LD_INT 2
71523: PUSH
71524: LD_INT 25
71526: PUSH
71527: LD_INT 2
71529: PUSH
71530: EMPTY
71531: LIST
71532: LIST
71533: PUSH
71534: LD_INT 25
71536: PUSH
71537: LD_INT 16
71539: PUSH
71540: EMPTY
71541: LIST
71542: LIST
71543: PUSH
71544: EMPTY
71545: LIST
71546: LIST
71547: LIST
71548: PUSH
71549: EMPTY
71550: LIST
71551: PPUSH
71552: CALL_OW 72
71556: ST_TO_ADDR
// if not tmp then
71557: LD_VAR 0 5
71561: NOT
71562: IFFALSE 71566
// continue ;
71564: GO 71407
// for j in tmp do
71566: LD_ADDR_VAR 0 3
71570: PUSH
71571: LD_VAR 0 5
71575: PUSH
71576: FOR_IN
71577: IFFALSE 71771
// begin if mc_need_heal [ i ] then
71579: LD_EXP 39
71583: PUSH
71584: LD_VAR 0 2
71588: ARRAY
71589: IFFALSE 71637
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
71591: LD_VAR 0 3
71595: PUSH
71596: LD_EXP 39
71600: PUSH
71601: LD_VAR 0 2
71605: ARRAY
71606: PUSH
71607: LD_INT 1
71609: ARRAY
71610: IN
71611: PUSH
71612: LD_VAR 0 3
71616: PUSH
71617: LD_EXP 39
71621: PUSH
71622: LD_VAR 0 2
71626: ARRAY
71627: PUSH
71628: LD_INT 2
71630: ARRAY
71631: IN
71632: OR
71633: IFFALSE 71637
// continue ;
71635: GO 71576
// if IsInUnit ( j ) then
71637: LD_VAR 0 3
71641: PPUSH
71642: CALL_OW 310
71646: IFFALSE 71657
// ComExitBuilding ( j ) ;
71648: LD_VAR 0 3
71652: PPUSH
71653: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
71657: LD_VAR 0 3
71661: PUSH
71662: LD_EXP 38
71666: PUSH
71667: LD_VAR 0 2
71671: ARRAY
71672: IN
71673: NOT
71674: IFFALSE 71732
// begin SetTag ( j , 101 ) ;
71676: LD_VAR 0 3
71680: PPUSH
71681: LD_INT 101
71683: PPUSH
71684: CALL_OW 109
// mc_building_repairs := ReplaceIn ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
71688: LD_ADDR_EXP 38
71692: PUSH
71693: LD_EXP 38
71697: PPUSH
71698: LD_VAR 0 2
71702: PUSH
71703: LD_EXP 38
71707: PUSH
71708: LD_VAR 0 2
71712: ARRAY
71713: PUSH
71714: LD_INT 1
71716: PLUS
71717: PUSH
71718: EMPTY
71719: LIST
71720: LIST
71721: PPUSH
71722: LD_VAR 0 3
71726: PPUSH
71727: CALL 26559 0 3
71731: ST_TO_ADDR
// end ; wait ( 1 ) ;
71732: LD_INT 1
71734: PPUSH
71735: CALL_OW 67
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) ;
71739: LD_VAR 0 3
71743: PPUSH
71744: LD_EXP 37
71748: PUSH
71749: LD_VAR 0 2
71753: ARRAY
71754: PPUSH
71755: LD_VAR 0 3
71759: PPUSH
71760: CALL_OW 74
71764: PPUSH
71765: CALL_OW 130
// end ;
71769: GO 71576
71771: POP
71772: POP
// end ;
71773: GO 71407
71775: POP
71776: POP
// end ;
71777: LD_VAR 0 1
71781: RET
// export function MC_Heal ; var i , j , tmp ; begin
71782: LD_INT 0
71784: PPUSH
71785: PPUSH
71786: PPUSH
71787: PPUSH
// if not mc_bases then
71788: LD_EXP 36
71792: NOT
71793: IFFALSE 71797
// exit ;
71795: GO 72199
// for i = 1 to mc_bases do
71797: LD_ADDR_VAR 0 2
71801: PUSH
71802: DOUBLE
71803: LD_INT 1
71805: DEC
71806: ST_TO_ADDR
71807: LD_EXP 36
71811: PUSH
71812: FOR_TO
71813: IFFALSE 72197
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
71815: LD_EXP 39
71819: PUSH
71820: LD_VAR 0 2
71824: ARRAY
71825: PUSH
71826: LD_INT 1
71828: ARRAY
71829: NOT
71830: PUSH
71831: LD_EXP 39
71835: PUSH
71836: LD_VAR 0 2
71840: ARRAY
71841: PUSH
71842: LD_INT 2
71844: ARRAY
71845: NOT
71846: AND
71847: IFFALSE 71885
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
71849: LD_ADDR_EXP 40
71853: PUSH
71854: LD_EXP 40
71858: PPUSH
71859: LD_VAR 0 2
71863: PPUSH
71864: EMPTY
71865: PPUSH
71866: CALL_OW 1
71870: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
71871: LD_VAR 0 2
71875: PPUSH
71876: LD_INT 102
71878: PPUSH
71879: CALL 66497 0 2
// continue ;
71883: GO 71812
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
71885: LD_ADDR_VAR 0 4
71889: PUSH
71890: LD_EXP 36
71894: PUSH
71895: LD_VAR 0 2
71899: ARRAY
71900: PPUSH
71901: LD_INT 25
71903: PUSH
71904: LD_INT 4
71906: PUSH
71907: EMPTY
71908: LIST
71909: LIST
71910: PPUSH
71911: CALL_OW 72
71915: ST_TO_ADDR
// if not tmp then
71916: LD_VAR 0 4
71920: NOT
71921: IFFALSE 71925
// continue ;
71923: GO 71812
// if mc_taming [ i ] then
71925: LD_EXP 67
71929: PUSH
71930: LD_VAR 0 2
71934: ARRAY
71935: IFFALSE 71959
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
71937: LD_ADDR_EXP 67
71941: PUSH
71942: LD_EXP 67
71946: PPUSH
71947: LD_VAR 0 2
71951: PPUSH
71952: EMPTY
71953: PPUSH
71954: CALL_OW 1
71958: ST_TO_ADDR
// for j in tmp do
71959: LD_ADDR_VAR 0 3
71963: PUSH
71964: LD_VAR 0 4
71968: PUSH
71969: FOR_IN
71970: IFFALSE 72193
// begin if IsInUnit ( j ) then
71972: LD_VAR 0 3
71976: PPUSH
71977: CALL_OW 310
71981: IFFALSE 71992
// ComExitBuilding ( j ) ;
71983: LD_VAR 0 3
71987: PPUSH
71988: CALL_OW 122
// if not j in mc_healers [ i ] then
71992: LD_VAR 0 3
71996: PUSH
71997: LD_EXP 40
72001: PUSH
72002: LD_VAR 0 2
72006: ARRAY
72007: IN
72008: NOT
72009: IFFALSE 72055
// mc_healers := ReplaceIn ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
72011: LD_ADDR_EXP 40
72015: PUSH
72016: LD_EXP 40
72020: PPUSH
72021: LD_VAR 0 2
72025: PUSH
72026: LD_EXP 40
72030: PUSH
72031: LD_VAR 0 2
72035: ARRAY
72036: PUSH
72037: LD_INT 1
72039: PLUS
72040: PUSH
72041: EMPTY
72042: LIST
72043: LIST
72044: PPUSH
72045: LD_VAR 0 3
72049: PPUSH
72050: CALL 26559 0 3
72054: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
72055: LD_VAR 0 3
72059: PPUSH
72060: CALL_OW 110
72064: PUSH
72065: LD_INT 102
72067: NONEQUAL
72068: IFFALSE 72082
// SetTag ( j , 102 ) ;
72070: LD_VAR 0 3
72074: PPUSH
72075: LD_INT 102
72077: PPUSH
72078: CALL_OW 109
// Wait ( 3 ) ;
72082: LD_INT 3
72084: PPUSH
72085: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
72089: LD_EXP 39
72093: PUSH
72094: LD_VAR 0 2
72098: ARRAY
72099: PUSH
72100: LD_INT 1
72102: ARRAY
72103: IFFALSE 72135
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
72105: LD_VAR 0 3
72109: PPUSH
72110: LD_EXP 39
72114: PUSH
72115: LD_VAR 0 2
72119: ARRAY
72120: PUSH
72121: LD_INT 1
72123: ARRAY
72124: PUSH
72125: LD_INT 1
72127: ARRAY
72128: PPUSH
72129: CALL_OW 128
72133: GO 72191
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
72135: LD_VAR 0 3
72139: PPUSH
72140: CALL_OW 314
72144: NOT
72145: PUSH
72146: LD_EXP 39
72150: PUSH
72151: LD_VAR 0 2
72155: ARRAY
72156: PUSH
72157: LD_INT 2
72159: ARRAY
72160: AND
72161: IFFALSE 72191
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
72163: LD_VAR 0 3
72167: PPUSH
72168: LD_EXP 39
72172: PUSH
72173: LD_VAR 0 2
72177: ARRAY
72178: PUSH
72179: LD_INT 2
72181: ARRAY
72182: PUSH
72183: LD_INT 1
72185: ARRAY
72186: PPUSH
72187: CALL_OW 128
// end ;
72191: GO 71969
72193: POP
72194: POP
// end ;
72195: GO 71812
72197: POP
72198: POP
// end ;
72199: LD_VAR 0 1
72203: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
72204: LD_INT 0
72206: PPUSH
72207: PPUSH
72208: PPUSH
72209: PPUSH
72210: PPUSH
// if not mc_bases then
72211: LD_EXP 36
72215: NOT
72216: IFFALSE 72220
// exit ;
72218: GO 73363
// for i = 1 to mc_bases do
72220: LD_ADDR_VAR 0 2
72224: PUSH
72225: DOUBLE
72226: LD_INT 1
72228: DEC
72229: ST_TO_ADDR
72230: LD_EXP 36
72234: PUSH
72235: FOR_TO
72236: IFFALSE 73361
// begin if mc_scan [ i ] then
72238: LD_EXP 59
72242: PUSH
72243: LD_VAR 0 2
72247: ARRAY
72248: IFFALSE 72252
// continue ;
72250: GO 72235
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
72252: LD_EXP 41
72256: PUSH
72257: LD_VAR 0 2
72261: ARRAY
72262: NOT
72263: PUSH
72264: LD_EXP 43
72268: PUSH
72269: LD_VAR 0 2
72273: ARRAY
72274: NOT
72275: AND
72276: PUSH
72277: LD_EXP 42
72281: PUSH
72282: LD_VAR 0 2
72286: ARRAY
72287: AND
72288: IFFALSE 72326
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
72290: LD_ADDR_EXP 42
72294: PUSH
72295: LD_EXP 42
72299: PPUSH
72300: LD_VAR 0 2
72304: PPUSH
72305: EMPTY
72306: PPUSH
72307: CALL_OW 1
72311: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
72312: LD_VAR 0 2
72316: PPUSH
72317: LD_INT 103
72319: PPUSH
72320: CALL 66497 0 2
// continue ;
72324: GO 72235
// end ; if mc_construct_list [ i ] then
72326: LD_EXP 43
72330: PUSH
72331: LD_VAR 0 2
72335: ARRAY
72336: IFFALSE 72556
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
72338: LD_ADDR_VAR 0 4
72342: PUSH
72343: LD_EXP 36
72347: PUSH
72348: LD_VAR 0 2
72352: ARRAY
72353: PPUSH
72354: LD_INT 25
72356: PUSH
72357: LD_INT 2
72359: PUSH
72360: EMPTY
72361: LIST
72362: LIST
72363: PPUSH
72364: CALL_OW 72
72368: PUSH
72369: LD_EXP 38
72373: PUSH
72374: LD_VAR 0 2
72378: ARRAY
72379: DIFF
72380: ST_TO_ADDR
// if not tmp then
72381: LD_VAR 0 4
72385: NOT
72386: IFFALSE 72390
// continue ;
72388: GO 72235
// for j in tmp do
72390: LD_ADDR_VAR 0 3
72394: PUSH
72395: LD_VAR 0 4
72399: PUSH
72400: FOR_IN
72401: IFFALSE 72552
// begin if not mc_builders [ i ] then
72403: LD_EXP 42
72407: PUSH
72408: LD_VAR 0 2
72412: ARRAY
72413: NOT
72414: IFFALSE 72472
// begin SetTag ( j , 103 ) ;
72416: LD_VAR 0 3
72420: PPUSH
72421: LD_INT 103
72423: PPUSH
72424: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
72428: LD_ADDR_EXP 42
72432: PUSH
72433: LD_EXP 42
72437: PPUSH
72438: LD_VAR 0 2
72442: PUSH
72443: LD_EXP 42
72447: PUSH
72448: LD_VAR 0 2
72452: ARRAY
72453: PUSH
72454: LD_INT 1
72456: PLUS
72457: PUSH
72458: EMPTY
72459: LIST
72460: LIST
72461: PPUSH
72462: LD_VAR 0 3
72466: PPUSH
72467: CALL 26559 0 3
72471: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
72472: LD_VAR 0 3
72476: PPUSH
72477: CALL_OW 310
72481: IFFALSE 72492
// ComExitBuilding ( j ) ;
72483: LD_VAR 0 3
72487: PPUSH
72488: CALL_OW 122
// wait ( 3 ) ;
72492: LD_INT 3
72494: PPUSH
72495: CALL_OW 67
// if not mc_construct_list [ i ] then
72499: LD_EXP 43
72503: PUSH
72504: LD_VAR 0 2
72508: ARRAY
72509: NOT
72510: IFFALSE 72514
// break ;
72512: GO 72552
// if not HasTask ( j ) then
72514: LD_VAR 0 3
72518: PPUSH
72519: CALL_OW 314
72523: NOT
72524: IFFALSE 72550
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
72526: LD_VAR 0 3
72530: PPUSH
72531: LD_EXP 43
72535: PUSH
72536: LD_VAR 0 2
72540: ARRAY
72541: PUSH
72542: LD_INT 1
72544: ARRAY
72545: PPUSH
72546: CALL 29410 0 2
// end ;
72550: GO 72400
72552: POP
72553: POP
// end else
72554: GO 73359
// if mc_build_list [ i ] then
72556: LD_EXP 41
72560: PUSH
72561: LD_VAR 0 2
72565: ARRAY
72566: IFFALSE 73359
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
72568: LD_ADDR_VAR 0 5
72572: PUSH
72573: LD_EXP 36
72577: PUSH
72578: LD_VAR 0 2
72582: ARRAY
72583: PPUSH
72584: LD_INT 2
72586: PUSH
72587: LD_INT 30
72589: PUSH
72590: LD_INT 0
72592: PUSH
72593: EMPTY
72594: LIST
72595: LIST
72596: PUSH
72597: LD_INT 30
72599: PUSH
72600: LD_INT 1
72602: PUSH
72603: EMPTY
72604: LIST
72605: LIST
72606: PUSH
72607: EMPTY
72608: LIST
72609: LIST
72610: LIST
72611: PPUSH
72612: CALL_OW 72
72616: ST_TO_ADDR
// if depot then
72617: LD_VAR 0 5
72621: IFFALSE 72639
// depot := depot [ 1 ] else
72623: LD_ADDR_VAR 0 5
72627: PUSH
72628: LD_VAR 0 5
72632: PUSH
72633: LD_INT 1
72635: ARRAY
72636: ST_TO_ADDR
72637: GO 72647
// depot := 0 ;
72639: LD_ADDR_VAR 0 5
72643: PUSH
72644: LD_INT 0
72646: ST_TO_ADDR
// if IsExtension ( mc_build_list [ i ] [ 1 ] [ 1 ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) then
72647: LD_EXP 41
72651: PUSH
72652: LD_VAR 0 2
72656: ARRAY
72657: PUSH
72658: LD_INT 1
72660: ARRAY
72661: PUSH
72662: LD_INT 1
72664: ARRAY
72665: PPUSH
72666: CALL 29240 0 1
72670: PUSH
72671: LD_EXP 36
72675: PUSH
72676: LD_VAR 0 2
72680: ARRAY
72681: PPUSH
72682: LD_INT 2
72684: PUSH
72685: LD_INT 30
72687: PUSH
72688: LD_INT 2
72690: PUSH
72691: EMPTY
72692: LIST
72693: LIST
72694: PUSH
72695: LD_INT 30
72697: PUSH
72698: LD_INT 3
72700: PUSH
72701: EMPTY
72702: LIST
72703: LIST
72704: PUSH
72705: EMPTY
72706: LIST
72707: LIST
72708: LIST
72709: PPUSH
72710: CALL_OW 72
72714: NOT
72715: AND
72716: IFFALSE 72821
// begin for j = 1 to mc_build_list [ i ] do
72718: LD_ADDR_VAR 0 3
72722: PUSH
72723: DOUBLE
72724: LD_INT 1
72726: DEC
72727: ST_TO_ADDR
72728: LD_EXP 41
72732: PUSH
72733: LD_VAR 0 2
72737: ARRAY
72738: PUSH
72739: FOR_TO
72740: IFFALSE 72819
// if mc_build_list [ i ] [ j ] [ 1 ] = b_workshop then
72742: LD_EXP 41
72746: PUSH
72747: LD_VAR 0 2
72751: ARRAY
72752: PUSH
72753: LD_VAR 0 3
72757: ARRAY
72758: PUSH
72759: LD_INT 1
72761: ARRAY
72762: PUSH
72763: LD_INT 2
72765: EQUAL
72766: IFFALSE 72817
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , j , 1 , false ) ) ;
72768: LD_ADDR_EXP 41
72772: PUSH
72773: LD_EXP 41
72777: PPUSH
72778: LD_VAR 0 2
72782: PPUSH
72783: LD_EXP 41
72787: PUSH
72788: LD_VAR 0 2
72792: ARRAY
72793: PPUSH
72794: LD_VAR 0 3
72798: PPUSH
72799: LD_INT 1
72801: PPUSH
72802: LD_INT 0
72804: PPUSH
72805: CALL 25977 0 4
72809: PPUSH
72810: CALL_OW 1
72814: ST_TO_ADDR
// break ;
72815: GO 72819
// end ;
72817: GO 72739
72819: POP
72820: POP
// end ; if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilt ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
72821: LD_EXP 41
72825: PUSH
72826: LD_VAR 0 2
72830: ARRAY
72831: PUSH
72832: LD_INT 1
72834: ARRAY
72835: PUSH
72836: LD_INT 1
72838: ARRAY
72839: PUSH
72840: LD_INT 0
72842: EQUAL
72843: PUSH
72844: LD_VAR 0 5
72848: PUSH
72849: LD_VAR 0 5
72853: PPUSH
72854: LD_EXP 41
72858: PUSH
72859: LD_VAR 0 2
72863: ARRAY
72864: PUSH
72865: LD_INT 1
72867: ARRAY
72868: PUSH
72869: LD_INT 1
72871: ARRAY
72872: PPUSH
72873: LD_EXP 41
72877: PUSH
72878: LD_VAR 0 2
72882: ARRAY
72883: PUSH
72884: LD_INT 1
72886: ARRAY
72887: PUSH
72888: LD_INT 2
72890: ARRAY
72891: PPUSH
72892: LD_EXP 41
72896: PUSH
72897: LD_VAR 0 2
72901: ARRAY
72902: PUSH
72903: LD_INT 1
72905: ARRAY
72906: PUSH
72907: LD_INT 3
72909: ARRAY
72910: PPUSH
72911: LD_EXP 41
72915: PUSH
72916: LD_VAR 0 2
72920: ARRAY
72921: PUSH
72922: LD_INT 1
72924: ARRAY
72925: PUSH
72926: LD_INT 4
72928: ARRAY
72929: PPUSH
72930: CALL 33956 0 5
72934: AND
72935: OR
72936: IFFALSE 73217
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
72938: LD_ADDR_VAR 0 4
72942: PUSH
72943: LD_EXP 36
72947: PUSH
72948: LD_VAR 0 2
72952: ARRAY
72953: PPUSH
72954: LD_INT 25
72956: PUSH
72957: LD_INT 2
72959: PUSH
72960: EMPTY
72961: LIST
72962: LIST
72963: PPUSH
72964: CALL_OW 72
72968: PUSH
72969: LD_EXP 38
72973: PUSH
72974: LD_VAR 0 2
72978: ARRAY
72979: DIFF
72980: ST_TO_ADDR
// if not tmp then
72981: LD_VAR 0 4
72985: NOT
72986: IFFALSE 72990
// continue ;
72988: GO 72235
// for j in tmp do
72990: LD_ADDR_VAR 0 3
72994: PUSH
72995: LD_VAR 0 4
72999: PUSH
73000: FOR_IN
73001: IFFALSE 73213
// begin if not mc_builders [ i ] then
73003: LD_EXP 42
73007: PUSH
73008: LD_VAR 0 2
73012: ARRAY
73013: NOT
73014: IFFALSE 73072
// begin SetTag ( j , 103 ) ;
73016: LD_VAR 0 3
73020: PPUSH
73021: LD_INT 103
73023: PPUSH
73024: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
73028: LD_ADDR_EXP 42
73032: PUSH
73033: LD_EXP 42
73037: PPUSH
73038: LD_VAR 0 2
73042: PUSH
73043: LD_EXP 42
73047: PUSH
73048: LD_VAR 0 2
73052: ARRAY
73053: PUSH
73054: LD_INT 1
73056: PLUS
73057: PUSH
73058: EMPTY
73059: LIST
73060: LIST
73061: PPUSH
73062: LD_VAR 0 3
73066: PPUSH
73067: CALL 26559 0 3
73071: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
73072: LD_VAR 0 3
73076: PPUSH
73077: CALL_OW 310
73081: IFFALSE 73092
// ComExitBuilding ( j ) ;
73083: LD_VAR 0 3
73087: PPUSH
73088: CALL_OW 122
// wait ( 3 ) ;
73092: LD_INT 3
73094: PPUSH
73095: CALL_OW 67
// if not mc_build_list [ i ] then
73099: LD_EXP 41
73103: PUSH
73104: LD_VAR 0 2
73108: ARRAY
73109: NOT
73110: IFFALSE 73114
// break ;
73112: GO 73213
// if not HasTask ( j ) then
73114: LD_VAR 0 3
73118: PPUSH
73119: CALL_OW 314
73123: NOT
73124: IFFALSE 73211
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
73126: LD_VAR 0 3
73130: PPUSH
73131: LD_EXP 41
73135: PUSH
73136: LD_VAR 0 2
73140: ARRAY
73141: PUSH
73142: LD_INT 1
73144: ARRAY
73145: PUSH
73146: LD_INT 1
73148: ARRAY
73149: PPUSH
73150: LD_EXP 41
73154: PUSH
73155: LD_VAR 0 2
73159: ARRAY
73160: PUSH
73161: LD_INT 1
73163: ARRAY
73164: PUSH
73165: LD_INT 2
73167: ARRAY
73168: PPUSH
73169: LD_EXP 41
73173: PUSH
73174: LD_VAR 0 2
73178: ARRAY
73179: PUSH
73180: LD_INT 1
73182: ARRAY
73183: PUSH
73184: LD_INT 3
73186: ARRAY
73187: PPUSH
73188: LD_EXP 41
73192: PUSH
73193: LD_VAR 0 2
73197: ARRAY
73198: PUSH
73199: LD_INT 1
73201: ARRAY
73202: PUSH
73203: LD_INT 4
73205: ARRAY
73206: PPUSH
73207: CALL_OW 145
// end ;
73211: GO 73000
73213: POP
73214: POP
// end else
73215: GO 73359
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
73217: LD_EXP 36
73221: PUSH
73222: LD_VAR 0 2
73226: ARRAY
73227: PPUSH
73228: LD_EXP 41
73232: PUSH
73233: LD_VAR 0 2
73237: ARRAY
73238: PUSH
73239: LD_INT 1
73241: ARRAY
73242: PUSH
73243: LD_INT 1
73245: ARRAY
73246: PPUSH
73247: LD_EXP 41
73251: PUSH
73252: LD_VAR 0 2
73256: ARRAY
73257: PUSH
73258: LD_INT 1
73260: ARRAY
73261: PUSH
73262: LD_INT 2
73264: ARRAY
73265: PPUSH
73266: LD_EXP 41
73270: PUSH
73271: LD_VAR 0 2
73275: ARRAY
73276: PUSH
73277: LD_INT 1
73279: ARRAY
73280: PUSH
73281: LD_INT 3
73283: ARRAY
73284: PPUSH
73285: LD_EXP 41
73289: PUSH
73290: LD_VAR 0 2
73294: ARRAY
73295: PUSH
73296: LD_INT 1
73298: ARRAY
73299: PUSH
73300: LD_INT 4
73302: ARRAY
73303: PPUSH
73304: CALL 33310 0 5
73308: NOT
73309: IFFALSE 73359
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
73311: LD_ADDR_EXP 41
73315: PUSH
73316: LD_EXP 41
73320: PPUSH
73321: LD_VAR 0 2
73325: PPUSH
73326: LD_EXP 41
73330: PUSH
73331: LD_VAR 0 2
73335: ARRAY
73336: PPUSH
73337: LD_INT 1
73339: PPUSH
73340: LD_INT 1
73342: NEG
73343: PPUSH
73344: LD_INT 0
73346: PPUSH
73347: CALL 25977 0 4
73351: PPUSH
73352: CALL_OW 1
73356: ST_TO_ADDR
// continue ;
73357: GO 72235
// end ; end ; end ;
73359: GO 72235
73361: POP
73362: POP
// end ;
73363: LD_VAR 0 1
73367: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
73368: LD_INT 0
73370: PPUSH
73371: PPUSH
73372: PPUSH
73373: PPUSH
73374: PPUSH
73375: PPUSH
// if not mc_bases then
73376: LD_EXP 36
73380: NOT
73381: IFFALSE 73385
// exit ;
73383: GO 73812
// for i = 1 to mc_bases do
73385: LD_ADDR_VAR 0 2
73389: PUSH
73390: DOUBLE
73391: LD_INT 1
73393: DEC
73394: ST_TO_ADDR
73395: LD_EXP 36
73399: PUSH
73400: FOR_TO
73401: IFFALSE 73810
// begin tmp := mc_build_upgrade [ i ] ;
73403: LD_ADDR_VAR 0 4
73407: PUSH
73408: LD_EXP 68
73412: PUSH
73413: LD_VAR 0 2
73417: ARRAY
73418: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
73419: LD_ADDR_VAR 0 6
73423: PUSH
73424: LD_EXP 69
73428: PUSH
73429: LD_VAR 0 2
73433: ARRAY
73434: PPUSH
73435: LD_INT 2
73437: PUSH
73438: LD_INT 30
73440: PUSH
73441: LD_INT 6
73443: PUSH
73444: EMPTY
73445: LIST
73446: LIST
73447: PUSH
73448: LD_INT 30
73450: PUSH
73451: LD_INT 7
73453: PUSH
73454: EMPTY
73455: LIST
73456: LIST
73457: PUSH
73458: EMPTY
73459: LIST
73460: LIST
73461: LIST
73462: PPUSH
73463: CALL_OW 72
73467: ST_TO_ADDR
// if not tmp and not lab then
73468: LD_VAR 0 4
73472: NOT
73473: PUSH
73474: LD_VAR 0 6
73478: NOT
73479: AND
73480: IFFALSE 73484
// continue ;
73482: GO 73400
// if tmp then
73484: LD_VAR 0 4
73488: IFFALSE 73608
// for j in tmp do
73490: LD_ADDR_VAR 0 3
73494: PUSH
73495: LD_VAR 0 4
73499: PUSH
73500: FOR_IN
73501: IFFALSE 73606
// begin if UpgradeCost ( j ) then
73503: LD_VAR 0 3
73507: PPUSH
73508: CALL 32970 0 1
73512: IFFALSE 73604
// begin ComUpgrade ( j ) ;
73514: LD_VAR 0 3
73518: PPUSH
73519: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
73523: LD_ADDR_EXP 68
73527: PUSH
73528: LD_EXP 68
73532: PPUSH
73533: LD_VAR 0 2
73537: PPUSH
73538: LD_EXP 68
73542: PUSH
73543: LD_VAR 0 2
73547: ARRAY
73548: PUSH
73549: LD_VAR 0 3
73553: DIFF
73554: PPUSH
73555: CALL_OW 1
73559: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
73560: LD_ADDR_EXP 43
73564: PUSH
73565: LD_EXP 43
73569: PPUSH
73570: LD_VAR 0 2
73574: PUSH
73575: LD_EXP 43
73579: PUSH
73580: LD_VAR 0 2
73584: ARRAY
73585: PUSH
73586: LD_INT 1
73588: PLUS
73589: PUSH
73590: EMPTY
73591: LIST
73592: LIST
73593: PPUSH
73594: LD_VAR 0 3
73598: PPUSH
73599: CALL 26559 0 3
73603: ST_TO_ADDR
// end ; end ;
73604: GO 73500
73606: POP
73607: POP
// if not lab or not mc_lab_upgrade [ i ] then
73608: LD_VAR 0 6
73612: NOT
73613: PUSH
73614: LD_EXP 70
73618: PUSH
73619: LD_VAR 0 2
73623: ARRAY
73624: NOT
73625: OR
73626: IFFALSE 73630
// continue ;
73628: GO 73400
// for j in lab do
73630: LD_ADDR_VAR 0 3
73634: PUSH
73635: LD_VAR 0 6
73639: PUSH
73640: FOR_IN
73641: IFFALSE 73806
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
73643: LD_VAR 0 3
73647: PPUSH
73648: CALL_OW 266
73652: PUSH
73653: LD_INT 6
73655: PUSH
73656: LD_INT 7
73658: PUSH
73659: EMPTY
73660: LIST
73661: LIST
73662: IN
73663: PUSH
73664: LD_VAR 0 3
73668: PPUSH
73669: CALL_OW 461
73673: PUSH
73674: LD_INT 1
73676: NONEQUAL
73677: AND
73678: IFFALSE 73804
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
73680: LD_VAR 0 3
73684: PPUSH
73685: LD_EXP 70
73689: PUSH
73690: LD_VAR 0 2
73694: ARRAY
73695: PUSH
73696: LD_INT 1
73698: ARRAY
73699: PPUSH
73700: CALL 33175 0 2
73704: IFFALSE 73804
// begin ComCancel ( j ) ;
73706: LD_VAR 0 3
73710: PPUSH
73711: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
73715: LD_VAR 0 3
73719: PPUSH
73720: LD_EXP 70
73724: PUSH
73725: LD_VAR 0 2
73729: ARRAY
73730: PUSH
73731: LD_INT 1
73733: ARRAY
73734: PPUSH
73735: CALL_OW 207
// if not j in mc_construct_list [ i ] then
73739: LD_VAR 0 3
73743: PUSH
73744: LD_EXP 43
73748: PUSH
73749: LD_VAR 0 2
73753: ARRAY
73754: IN
73755: NOT
73756: IFFALSE 73802
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
73758: LD_ADDR_EXP 43
73762: PUSH
73763: LD_EXP 43
73767: PPUSH
73768: LD_VAR 0 2
73772: PUSH
73773: LD_EXP 43
73777: PUSH
73778: LD_VAR 0 2
73782: ARRAY
73783: PUSH
73784: LD_INT 1
73786: PLUS
73787: PUSH
73788: EMPTY
73789: LIST
73790: LIST
73791: PPUSH
73792: LD_VAR 0 3
73796: PPUSH
73797: CALL 26559 0 3
73801: ST_TO_ADDR
// break ;
73802: GO 73806
// end ; end ; end ;
73804: GO 73640
73806: POP
73807: POP
// end ;
73808: GO 73400
73810: POP
73811: POP
// end ;
73812: LD_VAR 0 1
73816: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , tmp2 , t , tw , busy , weapon ; begin
73817: LD_INT 0
73819: PPUSH
73820: PPUSH
73821: PPUSH
73822: PPUSH
73823: PPUSH
73824: PPUSH
73825: PPUSH
73826: PPUSH
73827: PPUSH
// if not mc_bases then
73828: LD_EXP 36
73832: NOT
73833: IFFALSE 73837
// exit ;
73835: GO 74242
// for i = 1 to mc_bases do
73837: LD_ADDR_VAR 0 2
73841: PUSH
73842: DOUBLE
73843: LD_INT 1
73845: DEC
73846: ST_TO_ADDR
73847: LD_EXP 36
73851: PUSH
73852: FOR_TO
73853: IFFALSE 74240
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
73855: LD_EXP 44
73859: PUSH
73860: LD_VAR 0 2
73864: ARRAY
73865: NOT
73866: PUSH
73867: LD_EXP 36
73871: PUSH
73872: LD_VAR 0 2
73876: ARRAY
73877: PPUSH
73878: LD_INT 30
73880: PUSH
73881: LD_INT 3
73883: PUSH
73884: EMPTY
73885: LIST
73886: LIST
73887: PPUSH
73888: CALL_OW 72
73892: NOT
73893: OR
73894: IFFALSE 73898
// continue ;
73896: GO 73852
// busy := false ;
73898: LD_ADDR_VAR 0 8
73902: PUSH
73903: LD_INT 0
73905: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
73906: LD_ADDR_VAR 0 4
73910: PUSH
73911: LD_EXP 36
73915: PUSH
73916: LD_VAR 0 2
73920: ARRAY
73921: PPUSH
73922: LD_INT 30
73924: PUSH
73925: LD_INT 3
73927: PUSH
73928: EMPTY
73929: LIST
73930: LIST
73931: PPUSH
73932: CALL_OW 72
73936: ST_TO_ADDR
// t := UnitFilter ( mc_turret_list [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ;
73937: LD_ADDR_VAR 0 6
73941: PUSH
73942: LD_EXP 44
73946: PUSH
73947: LD_VAR 0 2
73951: ARRAY
73952: PPUSH
73953: LD_INT 2
73955: PUSH
73956: LD_INT 30
73958: PUSH
73959: LD_INT 32
73961: PUSH
73962: EMPTY
73963: LIST
73964: LIST
73965: PUSH
73966: LD_INT 30
73968: PUSH
73969: LD_INT 33
73971: PUSH
73972: EMPTY
73973: LIST
73974: LIST
73975: PUSH
73976: EMPTY
73977: LIST
73978: LIST
73979: LIST
73980: PPUSH
73981: CALL_OW 72
73985: ST_TO_ADDR
// if not t then
73986: LD_VAR 0 6
73990: NOT
73991: IFFALSE 73995
// continue ;
73993: GO 73852
// for j in tmp do
73995: LD_ADDR_VAR 0 3
73999: PUSH
74000: LD_VAR 0 4
74004: PUSH
74005: FOR_IN
74006: IFFALSE 74036
// if not BuildingStatus ( j ) = bs_idle then
74008: LD_VAR 0 3
74012: PPUSH
74013: CALL_OW 461
74017: PUSH
74018: LD_INT 2
74020: EQUAL
74021: NOT
74022: IFFALSE 74034
// begin busy := true ;
74024: LD_ADDR_VAR 0 8
74028: PUSH
74029: LD_INT 1
74031: ST_TO_ADDR
// break ;
74032: GO 74036
// end ;
74034: GO 74005
74036: POP
74037: POP
// if busy then
74038: LD_VAR 0 8
74042: IFFALSE 74046
// continue ;
74044: GO 73852
// tw := UnitFilter ( t , [ f_bweapon , 0 ] ) ;
74046: LD_ADDR_VAR 0 7
74050: PUSH
74051: LD_VAR 0 6
74055: PPUSH
74056: LD_INT 35
74058: PUSH
74059: LD_INT 0
74061: PUSH
74062: EMPTY
74063: LIST
74064: LIST
74065: PPUSH
74066: CALL_OW 72
74070: ST_TO_ADDR
// if tw then
74071: LD_VAR 0 7
74075: IFFALSE 74152
// begin tw := tw [ 1 ] ;
74077: LD_ADDR_VAR 0 7
74081: PUSH
74082: LD_VAR 0 7
74086: PUSH
74087: LD_INT 1
74089: ARRAY
74090: ST_TO_ADDR
// weapon := GetTurretWeapon ( tw , mc_scan_area [ i ] ) ;
74091: LD_ADDR_VAR 0 9
74095: PUSH
74096: LD_VAR 0 7
74100: PPUSH
74101: LD_EXP 61
74105: PUSH
74106: LD_VAR 0 2
74110: ARRAY
74111: PPUSH
74112: CALL 31529 0 2
74116: ST_TO_ADDR
// if mc_allowed_tower_weapons [ i ] then
74117: LD_EXP 75
74121: PUSH
74122: LD_VAR 0 2
74126: ARRAY
74127: IFFALSE 74150
// if not weapon in mc_allowed_tower_weapons [ i ] then
74129: LD_VAR 0 9
74133: PUSH
74134: LD_EXP 75
74138: PUSH
74139: LD_VAR 0 2
74143: ARRAY
74144: IN
74145: NOT
74146: IFFALSE 74150
// continue ;
74148: GO 73852
// end else
74150: GO 74215
// begin tmp2 := UpgradeTurretsWeapon ( mc_turret_list [ i ] , tmp ) ;
74152: LD_ADDR_VAR 0 5
74156: PUSH
74157: LD_EXP 44
74161: PUSH
74162: LD_VAR 0 2
74166: ARRAY
74167: PPUSH
74168: LD_VAR 0 4
74172: PPUSH
74173: CALL 61706 0 2
74177: ST_TO_ADDR
// if not tmp2 then
74178: LD_VAR 0 5
74182: NOT
74183: IFFALSE 74187
// continue ;
74185: GO 73852
// tw := tmp2 [ 1 ] ;
74187: LD_ADDR_VAR 0 7
74191: PUSH
74192: LD_VAR 0 5
74196: PUSH
74197: LD_INT 1
74199: ARRAY
74200: ST_TO_ADDR
// weapon := tmp2 [ 2 ] ;
74201: LD_ADDR_VAR 0 9
74205: PUSH
74206: LD_VAR 0 5
74210: PUSH
74211: LD_INT 2
74213: ARRAY
74214: ST_TO_ADDR
// end ; if not weapon then
74215: LD_VAR 0 9
74219: NOT
74220: IFFALSE 74224
// continue ;
74222: GO 73852
// ComPlaceWeapon ( tw , weapon ) ;
74224: LD_VAR 0 7
74228: PPUSH
74229: LD_VAR 0 9
74233: PPUSH
74234: CALL_OW 148
// end ;
74238: GO 73852
74240: POP
74241: POP
// end ;
74242: LD_VAR 0 1
74246: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
74247: LD_INT 0
74249: PPUSH
74250: PPUSH
74251: PPUSH
74252: PPUSH
74253: PPUSH
74254: PPUSH
// if not mc_bases then
74255: LD_EXP 36
74259: NOT
74260: IFFALSE 74264
// exit ;
74262: GO 75276
// for i = 1 to mc_bases do
74264: LD_ADDR_VAR 0 2
74268: PUSH
74269: DOUBLE
74270: LD_INT 1
74272: DEC
74273: ST_TO_ADDR
74274: LD_EXP 36
74278: PUSH
74279: FOR_TO
74280: IFFALSE 75274
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] then
74282: LD_EXP 49
74286: PUSH
74287: LD_VAR 0 2
74291: ARRAY
74292: NOT
74293: PUSH
74294: LD_EXP 49
74298: PUSH
74299: LD_VAR 0 2
74303: ARRAY
74304: PUSH
74305: LD_EXP 50
74309: PUSH
74310: LD_VAR 0 2
74314: ARRAY
74315: EQUAL
74316: OR
74317: IFFALSE 74321
// continue ;
74319: GO 74279
// if mc_miners [ i ] then
74321: LD_EXP 50
74325: PUSH
74326: LD_VAR 0 2
74330: ARRAY
74331: IFFALSE 74961
// begin k := 1 ;
74333: LD_ADDR_VAR 0 4
74337: PUSH
74338: LD_INT 1
74340: ST_TO_ADDR
// for j = mc_miners [ i ] downto 1 do
74341: LD_ADDR_VAR 0 3
74345: PUSH
74346: DOUBLE
74347: LD_EXP 50
74351: PUSH
74352: LD_VAR 0 2
74356: ARRAY
74357: INC
74358: ST_TO_ADDR
74359: LD_INT 1
74361: PUSH
74362: FOR_DOWNTO
74363: IFFALSE 74959
// begin if IsDead ( mc_miners [ i ] [ j ] ) or GetClass ( mc_miners [ i ] [ j ] ) <> 1 then
74365: LD_EXP 50
74369: PUSH
74370: LD_VAR 0 2
74374: ARRAY
74375: PUSH
74376: LD_VAR 0 3
74380: ARRAY
74381: PPUSH
74382: CALL_OW 301
74386: PUSH
74387: LD_EXP 50
74391: PUSH
74392: LD_VAR 0 2
74396: ARRAY
74397: PUSH
74398: LD_VAR 0 3
74402: ARRAY
74403: PPUSH
74404: CALL_OW 257
74408: PUSH
74409: LD_INT 1
74411: NONEQUAL
74412: OR
74413: IFFALSE 74476
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
74415: LD_ADDR_VAR 0 5
74419: PUSH
74420: LD_EXP 50
74424: PUSH
74425: LD_VAR 0 2
74429: ARRAY
74430: PUSH
74431: LD_EXP 50
74435: PUSH
74436: LD_VAR 0 2
74440: ARRAY
74441: PUSH
74442: LD_VAR 0 3
74446: ARRAY
74447: DIFF
74448: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
74449: LD_ADDR_EXP 50
74453: PUSH
74454: LD_EXP 50
74458: PPUSH
74459: LD_VAR 0 2
74463: PPUSH
74464: LD_VAR 0 5
74468: PPUSH
74469: CALL_OW 1
74473: ST_TO_ADDR
// continue ;
74474: GO 74362
// end ; if WantPlant ( mc_miners [ i ] [ j ] ) and ( DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] or DangerAtRange ( mc_miners [ i ] [ j ] , 10 ) [ 4 ] ) then
74476: LD_EXP 50
74480: PUSH
74481: LD_VAR 0 2
74485: ARRAY
74486: PUSH
74487: LD_VAR 0 3
74491: ARRAY
74492: PPUSH
74493: CALL 26495 0 1
74497: PUSH
74498: LD_EXP 50
74502: PUSH
74503: LD_VAR 0 2
74507: ARRAY
74508: PUSH
74509: LD_VAR 0 3
74513: ARRAY
74514: PPUSH
74515: CALL_OW 255
74519: PPUSH
74520: LD_EXP 49
74524: PUSH
74525: LD_VAR 0 2
74529: ARRAY
74530: PUSH
74531: LD_VAR 0 4
74535: ARRAY
74536: PUSH
74537: LD_INT 1
74539: ARRAY
74540: PPUSH
74541: LD_EXP 49
74545: PUSH
74546: LD_VAR 0 2
74550: ARRAY
74551: PUSH
74552: LD_VAR 0 4
74556: ARRAY
74557: PUSH
74558: LD_INT 2
74560: ARRAY
74561: PPUSH
74562: LD_INT 15
74564: PPUSH
74565: CALL 27455 0 4
74569: PUSH
74570: LD_INT 4
74572: ARRAY
74573: PUSH
74574: LD_EXP 50
74578: PUSH
74579: LD_VAR 0 2
74583: ARRAY
74584: PUSH
74585: LD_VAR 0 3
74589: ARRAY
74590: PPUSH
74591: LD_INT 10
74593: PPUSH
74594: CALL 29152 0 2
74598: PUSH
74599: LD_INT 4
74601: ARRAY
74602: OR
74603: AND
74604: IFFALSE 74627
// ComStop ( mc_miners [ i ] [ j ] ) ;
74606: LD_EXP 50
74610: PUSH
74611: LD_VAR 0 2
74615: ARRAY
74616: PUSH
74617: LD_VAR 0 3
74621: ARRAY
74622: PPUSH
74623: CALL_OW 141
// if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] = 0 and not HasTask ( mc_miners [ i ] [ j ] ) then
74627: LD_EXP 50
74631: PUSH
74632: LD_VAR 0 2
74636: ARRAY
74637: PUSH
74638: LD_VAR 0 3
74642: ARRAY
74643: PPUSH
74644: CALL_OW 257
74648: PUSH
74649: LD_INT 1
74651: EQUAL
74652: PUSH
74653: LD_EXP 50
74657: PUSH
74658: LD_VAR 0 2
74662: ARRAY
74663: PUSH
74664: LD_VAR 0 3
74668: ARRAY
74669: PPUSH
74670: CALL_OW 459
74674: NOT
74675: AND
74676: PUSH
74677: LD_EXP 50
74681: PUSH
74682: LD_VAR 0 2
74686: ARRAY
74687: PUSH
74688: LD_VAR 0 3
74692: ARRAY
74693: PPUSH
74694: CALL_OW 255
74698: PPUSH
74699: LD_EXP 49
74703: PUSH
74704: LD_VAR 0 2
74708: ARRAY
74709: PUSH
74710: LD_VAR 0 4
74714: ARRAY
74715: PUSH
74716: LD_INT 1
74718: ARRAY
74719: PPUSH
74720: LD_EXP 49
74724: PUSH
74725: LD_VAR 0 2
74729: ARRAY
74730: PUSH
74731: LD_VAR 0 4
74735: ARRAY
74736: PUSH
74737: LD_INT 2
74739: ARRAY
74740: PPUSH
74741: LD_INT 15
74743: PPUSH
74744: CALL 27455 0 4
74748: PUSH
74749: LD_INT 4
74751: ARRAY
74752: PUSH
74753: LD_INT 0
74755: EQUAL
74756: AND
74757: PUSH
74758: LD_EXP 50
74762: PUSH
74763: LD_VAR 0 2
74767: ARRAY
74768: PUSH
74769: LD_VAR 0 3
74773: ARRAY
74774: PPUSH
74775: CALL_OW 314
74779: NOT
74780: AND
74781: IFFALSE 74957
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
74783: LD_EXP 50
74787: PUSH
74788: LD_VAR 0 2
74792: ARRAY
74793: PUSH
74794: LD_VAR 0 3
74798: ARRAY
74799: PPUSH
74800: CALL_OW 310
74804: IFFALSE 74827
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
74806: LD_EXP 50
74810: PUSH
74811: LD_VAR 0 2
74815: ARRAY
74816: PUSH
74817: LD_VAR 0 3
74821: ARRAY
74822: PPUSH
74823: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
74827: LD_EXP 50
74831: PUSH
74832: LD_VAR 0 2
74836: ARRAY
74837: PUSH
74838: LD_VAR 0 3
74842: ARRAY
74843: PPUSH
74844: CALL_OW 314
74848: NOT
74849: IFFALSE 74917
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 0 ) ;
74851: LD_EXP 50
74855: PUSH
74856: LD_VAR 0 2
74860: ARRAY
74861: PUSH
74862: LD_VAR 0 3
74866: ARRAY
74867: PPUSH
74868: LD_EXP 49
74872: PUSH
74873: LD_VAR 0 2
74877: ARRAY
74878: PUSH
74879: LD_VAR 0 4
74883: ARRAY
74884: PUSH
74885: LD_INT 1
74887: ARRAY
74888: PPUSH
74889: LD_EXP 49
74893: PUSH
74894: LD_VAR 0 2
74898: ARRAY
74899: PUSH
74900: LD_VAR 0 4
74904: ARRAY
74905: PUSH
74906: LD_INT 2
74908: ARRAY
74909: PPUSH
74910: LD_INT 0
74912: PPUSH
74913: CALL_OW 193
// k := k + 1 ;
74917: LD_ADDR_VAR 0 4
74921: PUSH
74922: LD_VAR 0 4
74926: PUSH
74927: LD_INT 1
74929: PLUS
74930: ST_TO_ADDR
// if k > mc_mines [ i ] then
74931: LD_VAR 0 4
74935: PUSH
74936: LD_EXP 49
74940: PUSH
74941: LD_VAR 0 2
74945: ARRAY
74946: GREATER
74947: IFFALSE 74957
// k := 1 ;
74949: LD_ADDR_VAR 0 4
74953: PUSH
74954: LD_INT 1
74956: ST_TO_ADDR
// end ; end ;
74957: GO 74362
74959: POP
74960: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
74961: LD_ADDR_VAR 0 5
74965: PUSH
74966: LD_EXP 36
74970: PUSH
74971: LD_VAR 0 2
74975: ARRAY
74976: PPUSH
74977: LD_INT 2
74979: PUSH
74980: LD_INT 30
74982: PUSH
74983: LD_INT 4
74985: PUSH
74986: EMPTY
74987: LIST
74988: LIST
74989: PUSH
74990: LD_INT 30
74992: PUSH
74993: LD_INT 5
74995: PUSH
74996: EMPTY
74997: LIST
74998: LIST
74999: PUSH
75000: LD_INT 30
75002: PUSH
75003: LD_INT 32
75005: PUSH
75006: EMPTY
75007: LIST
75008: LIST
75009: PUSH
75010: EMPTY
75011: LIST
75012: LIST
75013: LIST
75014: LIST
75015: PPUSH
75016: CALL_OW 72
75020: ST_TO_ADDR
// if not tmp then
75021: LD_VAR 0 5
75025: NOT
75026: IFFALSE 75030
// continue ;
75028: GO 74279
// list := [ ] ;
75030: LD_ADDR_VAR 0 6
75034: PUSH
75035: EMPTY
75036: ST_TO_ADDR
// for j in tmp do
75037: LD_ADDR_VAR 0 3
75041: PUSH
75042: LD_VAR 0 5
75046: PUSH
75047: FOR_IN
75048: IFFALSE 75117
// begin for k in UnitsInside ( j ) do
75050: LD_ADDR_VAR 0 4
75054: PUSH
75055: LD_VAR 0 3
75059: PPUSH
75060: CALL_OW 313
75064: PUSH
75065: FOR_IN
75066: IFFALSE 75113
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
75068: LD_VAR 0 4
75072: PPUSH
75073: CALL_OW 257
75077: PUSH
75078: LD_INT 1
75080: EQUAL
75081: PUSH
75082: LD_VAR 0 4
75086: PPUSH
75087: CALL_OW 459
75091: NOT
75092: AND
75093: IFFALSE 75111
// list := list ^ k ;
75095: LD_ADDR_VAR 0 6
75099: PUSH
75100: LD_VAR 0 6
75104: PUSH
75105: LD_VAR 0 4
75109: ADD
75110: ST_TO_ADDR
75111: GO 75065
75113: POP
75114: POP
// end ;
75115: GO 75047
75117: POP
75118: POP
// list := list diff mc_miners [ i ] ;
75119: LD_ADDR_VAR 0 6
75123: PUSH
75124: LD_VAR 0 6
75128: PUSH
75129: LD_EXP 50
75133: PUSH
75134: LD_VAR 0 2
75138: ARRAY
75139: DIFF
75140: ST_TO_ADDR
// if not list then
75141: LD_VAR 0 6
75145: NOT
75146: IFFALSE 75150
// continue ;
75148: GO 74279
// k := mc_mines [ i ] - mc_miners [ i ] ;
75150: LD_ADDR_VAR 0 4
75154: PUSH
75155: LD_EXP 49
75159: PUSH
75160: LD_VAR 0 2
75164: ARRAY
75165: PUSH
75166: LD_EXP 50
75170: PUSH
75171: LD_VAR 0 2
75175: ARRAY
75176: MINUS
75177: ST_TO_ADDR
// if k > list then
75178: LD_VAR 0 4
75182: PUSH
75183: LD_VAR 0 6
75187: GREATER
75188: IFFALSE 75200
// k := list ;
75190: LD_ADDR_VAR 0 4
75194: PUSH
75195: LD_VAR 0 6
75199: ST_TO_ADDR
// for j = 1 to k do
75200: LD_ADDR_VAR 0 3
75204: PUSH
75205: DOUBLE
75206: LD_INT 1
75208: DEC
75209: ST_TO_ADDR
75210: LD_VAR 0 4
75214: PUSH
75215: FOR_TO
75216: IFFALSE 75270
// mc_miners := ReplaceIn ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
75218: LD_ADDR_EXP 50
75222: PUSH
75223: LD_EXP 50
75227: PPUSH
75228: LD_VAR 0 2
75232: PUSH
75233: LD_EXP 50
75237: PUSH
75238: LD_VAR 0 2
75242: ARRAY
75243: PUSH
75244: LD_INT 1
75246: PLUS
75247: PUSH
75248: EMPTY
75249: LIST
75250: LIST
75251: PPUSH
75252: LD_VAR 0 6
75256: PUSH
75257: LD_VAR 0 3
75261: ARRAY
75262: PPUSH
75263: CALL 26559 0 3
75267: ST_TO_ADDR
75268: GO 75215
75270: POP
75271: POP
// end ;
75272: GO 74279
75274: POP
75275: POP
// end ;
75276: LD_VAR 0 1
75280: RET
// export function MC_CollectCrates ( ) ; var i , j , k , tmp , target , cargo , depot , fac , components ; begin
75281: LD_INT 0
75283: PPUSH
75284: PPUSH
75285: PPUSH
75286: PPUSH
75287: PPUSH
75288: PPUSH
75289: PPUSH
75290: PPUSH
75291: PPUSH
75292: PPUSH
// if not mc_bases then
75293: LD_EXP 36
75297: NOT
75298: IFFALSE 75302
// exit ;
75300: GO 77033
// for i = 1 to mc_bases do
75302: LD_ADDR_VAR 0 2
75306: PUSH
75307: DOUBLE
75308: LD_INT 1
75310: DEC
75311: ST_TO_ADDR
75312: LD_EXP 36
75316: PUSH
75317: FOR_TO
75318: IFFALSE 77031
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
75320: LD_EXP 36
75324: PUSH
75325: LD_VAR 0 2
75329: ARRAY
75330: NOT
75331: PUSH
75332: LD_EXP 43
75336: PUSH
75337: LD_VAR 0 2
75341: ARRAY
75342: OR
75343: IFFALSE 75347
// continue ;
75345: GO 75317
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
75347: LD_EXP 52
75351: PUSH
75352: LD_VAR 0 2
75356: ARRAY
75357: NOT
75358: PUSH
75359: LD_EXP 53
75363: PUSH
75364: LD_VAR 0 2
75368: ARRAY
75369: AND
75370: IFFALSE 75408
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
75372: LD_ADDR_EXP 53
75376: PUSH
75377: LD_EXP 53
75381: PPUSH
75382: LD_VAR 0 2
75386: PPUSH
75387: EMPTY
75388: PPUSH
75389: CALL_OW 1
75393: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
75394: LD_VAR 0 2
75398: PPUSH
75399: LD_INT 107
75401: PPUSH
75402: CALL 66497 0 2
// continue ;
75406: GO 75317
// end ; target := [ ] ;
75408: LD_ADDR_VAR 0 6
75412: PUSH
75413: EMPTY
75414: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
75415: LD_ADDR_VAR 0 3
75419: PUSH
75420: DOUBLE
75421: LD_EXP 52
75425: PUSH
75426: LD_VAR 0 2
75430: ARRAY
75431: INC
75432: ST_TO_ADDR
75433: LD_INT 1
75435: PUSH
75436: FOR_DOWNTO
75437: IFFALSE 75697
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
75439: LD_EXP 52
75443: PUSH
75444: LD_VAR 0 2
75448: ARRAY
75449: PUSH
75450: LD_VAR 0 3
75454: ARRAY
75455: PUSH
75456: LD_INT 2
75458: ARRAY
75459: PPUSH
75460: LD_EXP 52
75464: PUSH
75465: LD_VAR 0 2
75469: ARRAY
75470: PUSH
75471: LD_VAR 0 3
75475: ARRAY
75476: PUSH
75477: LD_INT 3
75479: ARRAY
75480: PPUSH
75481: CALL_OW 488
75485: PUSH
75486: LD_EXP 52
75490: PUSH
75491: LD_VAR 0 2
75495: ARRAY
75496: PUSH
75497: LD_VAR 0 3
75501: ARRAY
75502: PUSH
75503: LD_INT 2
75505: ARRAY
75506: PPUSH
75507: LD_EXP 52
75511: PUSH
75512: LD_VAR 0 2
75516: ARRAY
75517: PUSH
75518: LD_VAR 0 3
75522: ARRAY
75523: PUSH
75524: LD_INT 3
75526: ARRAY
75527: PPUSH
75528: CALL_OW 284
75532: PUSH
75533: LD_INT 0
75535: EQUAL
75536: AND
75537: IFFALSE 75592
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
75539: LD_ADDR_VAR 0 5
75543: PUSH
75544: LD_EXP 52
75548: PUSH
75549: LD_VAR 0 2
75553: ARRAY
75554: PPUSH
75555: LD_VAR 0 3
75559: PPUSH
75560: CALL_OW 3
75564: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
75565: LD_ADDR_EXP 52
75569: PUSH
75570: LD_EXP 52
75574: PPUSH
75575: LD_VAR 0 2
75579: PPUSH
75580: LD_VAR 0 5
75584: PPUSH
75585: CALL_OW 1
75589: ST_TO_ADDR
// continue ;
75590: GO 75436
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 30 ) [ 4 ] = 0 then
75592: LD_EXP 36
75596: PUSH
75597: LD_VAR 0 2
75601: ARRAY
75602: PUSH
75603: LD_INT 1
75605: ARRAY
75606: PPUSH
75607: CALL_OW 255
75611: PPUSH
75612: LD_EXP 52
75616: PUSH
75617: LD_VAR 0 2
75621: ARRAY
75622: PUSH
75623: LD_VAR 0 3
75627: ARRAY
75628: PUSH
75629: LD_INT 2
75631: ARRAY
75632: PPUSH
75633: LD_EXP 52
75637: PUSH
75638: LD_VAR 0 2
75642: ARRAY
75643: PUSH
75644: LD_VAR 0 3
75648: ARRAY
75649: PUSH
75650: LD_INT 3
75652: ARRAY
75653: PPUSH
75654: LD_INT 30
75656: PPUSH
75657: CALL 27455 0 4
75661: PUSH
75662: LD_INT 4
75664: ARRAY
75665: PUSH
75666: LD_INT 0
75668: EQUAL
75669: IFFALSE 75695
// begin target := mc_crates [ i ] [ j ] ;
75671: LD_ADDR_VAR 0 6
75675: PUSH
75676: LD_EXP 52
75680: PUSH
75681: LD_VAR 0 2
75685: ARRAY
75686: PUSH
75687: LD_VAR 0 3
75691: ARRAY
75692: ST_TO_ADDR
// break ;
75693: GO 75697
// end ; end ;
75695: GO 75436
75697: POP
75698: POP
// if not target then
75699: LD_VAR 0 6
75703: NOT
75704: IFFALSE 75708
// continue ;
75706: GO 75317
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
75708: LD_ADDR_VAR 0 7
75712: PUSH
75713: LD_EXP 55
75717: PUSH
75718: LD_VAR 0 2
75722: ARRAY
75723: PPUSH
75724: LD_INT 2
75726: PUSH
75727: LD_INT 3
75729: PUSH
75730: LD_INT 58
75732: PUSH
75733: EMPTY
75734: LIST
75735: PUSH
75736: EMPTY
75737: LIST
75738: LIST
75739: PUSH
75740: LD_INT 61
75742: PUSH
75743: EMPTY
75744: LIST
75745: PUSH
75746: LD_INT 33
75748: PUSH
75749: LD_INT 5
75751: PUSH
75752: EMPTY
75753: LIST
75754: LIST
75755: PUSH
75756: LD_INT 33
75758: PUSH
75759: LD_INT 3
75761: PUSH
75762: EMPTY
75763: LIST
75764: LIST
75765: PUSH
75766: EMPTY
75767: LIST
75768: LIST
75769: LIST
75770: LIST
75771: LIST
75772: PUSH
75773: LD_INT 2
75775: PUSH
75776: LD_INT 34
75778: PUSH
75779: LD_INT 32
75781: PUSH
75782: EMPTY
75783: LIST
75784: LIST
75785: PUSH
75786: LD_INT 34
75788: PUSH
75789: LD_INT 51
75791: PUSH
75792: EMPTY
75793: LIST
75794: LIST
75795: PUSH
75796: LD_INT 34
75798: PUSH
75799: LD_INT 12
75801: PUSH
75802: EMPTY
75803: LIST
75804: LIST
75805: PUSH
75806: EMPTY
75807: LIST
75808: LIST
75809: LIST
75810: LIST
75811: PUSH
75812: EMPTY
75813: LIST
75814: LIST
75815: PPUSH
75816: CALL_OW 72
75820: ST_TO_ADDR
// if not cargo then
75821: LD_VAR 0 7
75825: NOT
75826: IFFALSE 76469
// begin if mc_crates_collector [ i ] < 5 then
75828: LD_EXP 53
75832: PUSH
75833: LD_VAR 0 2
75837: ARRAY
75838: PUSH
75839: LD_INT 5
75841: LESS
75842: IFFALSE 76208
// begin if mc_ape [ i ] then
75844: LD_EXP 65
75848: PUSH
75849: LD_VAR 0 2
75853: ARRAY
75854: IFFALSE 75901
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
75856: LD_ADDR_VAR 0 5
75860: PUSH
75861: LD_EXP 65
75865: PUSH
75866: LD_VAR 0 2
75870: ARRAY
75871: PPUSH
75872: LD_INT 25
75874: PUSH
75875: LD_INT 16
75877: PUSH
75878: EMPTY
75879: LIST
75880: LIST
75881: PUSH
75882: LD_INT 24
75884: PUSH
75885: LD_INT 750
75887: PUSH
75888: EMPTY
75889: LIST
75890: LIST
75891: PUSH
75892: EMPTY
75893: LIST
75894: LIST
75895: PPUSH
75896: CALL_OW 72
75900: ST_TO_ADDR
// if not tmp then
75901: LD_VAR 0 5
75905: NOT
75906: IFFALSE 75953
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
75908: LD_ADDR_VAR 0 5
75912: PUSH
75913: LD_EXP 36
75917: PUSH
75918: LD_VAR 0 2
75922: ARRAY
75923: PPUSH
75924: LD_INT 25
75926: PUSH
75927: LD_INT 2
75929: PUSH
75930: EMPTY
75931: LIST
75932: LIST
75933: PUSH
75934: LD_INT 24
75936: PUSH
75937: LD_INT 750
75939: PUSH
75940: EMPTY
75941: LIST
75942: LIST
75943: PUSH
75944: EMPTY
75945: LIST
75946: LIST
75947: PPUSH
75948: CALL_OW 72
75952: ST_TO_ADDR
// if mc_ape [ i ] and UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) and tmp < 5 then
75953: LD_EXP 65
75957: PUSH
75958: LD_VAR 0 2
75962: ARRAY
75963: PUSH
75964: LD_EXP 36
75968: PUSH
75969: LD_VAR 0 2
75973: ARRAY
75974: PPUSH
75975: LD_INT 25
75977: PUSH
75978: LD_INT 2
75980: PUSH
75981: EMPTY
75982: LIST
75983: LIST
75984: PUSH
75985: LD_INT 24
75987: PUSH
75988: LD_INT 750
75990: PUSH
75991: EMPTY
75992: LIST
75993: LIST
75994: PUSH
75995: EMPTY
75996: LIST
75997: LIST
75998: PPUSH
75999: CALL_OW 72
76003: AND
76004: PUSH
76005: LD_VAR 0 5
76009: PUSH
76010: LD_INT 5
76012: LESS
76013: AND
76014: IFFALSE 76096
// begin for j in UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) do
76016: LD_ADDR_VAR 0 3
76020: PUSH
76021: LD_EXP 36
76025: PUSH
76026: LD_VAR 0 2
76030: ARRAY
76031: PPUSH
76032: LD_INT 25
76034: PUSH
76035: LD_INT 2
76037: PUSH
76038: EMPTY
76039: LIST
76040: LIST
76041: PUSH
76042: LD_INT 24
76044: PUSH
76045: LD_INT 750
76047: PUSH
76048: EMPTY
76049: LIST
76050: LIST
76051: PUSH
76052: EMPTY
76053: LIST
76054: LIST
76055: PPUSH
76056: CALL_OW 72
76060: PUSH
76061: FOR_IN
76062: IFFALSE 76094
// begin tmp := tmp union j ;
76064: LD_ADDR_VAR 0 5
76068: PUSH
76069: LD_VAR 0 5
76073: PUSH
76074: LD_VAR 0 3
76078: UNION
76079: ST_TO_ADDR
// if tmp >= 5 then
76080: LD_VAR 0 5
76084: PUSH
76085: LD_INT 5
76087: GREATEREQUAL
76088: IFFALSE 76092
// break ;
76090: GO 76094
// end ;
76092: GO 76061
76094: POP
76095: POP
// end ; if not tmp then
76096: LD_VAR 0 5
76100: NOT
76101: IFFALSE 76105
// continue ;
76103: GO 75317
// for j in tmp do
76105: LD_ADDR_VAR 0 3
76109: PUSH
76110: LD_VAR 0 5
76114: PUSH
76115: FOR_IN
76116: IFFALSE 76206
// if not GetTag ( j ) then
76118: LD_VAR 0 3
76122: PPUSH
76123: CALL_OW 110
76127: NOT
76128: IFFALSE 76204
// begin mc_crates_collector := ReplaceIn ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
76130: LD_ADDR_EXP 53
76134: PUSH
76135: LD_EXP 53
76139: PPUSH
76140: LD_VAR 0 2
76144: PUSH
76145: LD_EXP 53
76149: PUSH
76150: LD_VAR 0 2
76154: ARRAY
76155: PUSH
76156: LD_INT 1
76158: PLUS
76159: PUSH
76160: EMPTY
76161: LIST
76162: LIST
76163: PPUSH
76164: LD_VAR 0 3
76168: PPUSH
76169: CALL 26559 0 3
76173: ST_TO_ADDR
// SetTag ( j , 107 ) ;
76174: LD_VAR 0 3
76178: PPUSH
76179: LD_INT 107
76181: PPUSH
76182: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
76186: LD_EXP 53
76190: PUSH
76191: LD_VAR 0 2
76195: ARRAY
76196: PUSH
76197: LD_INT 5
76199: GREATEREQUAL
76200: IFFALSE 76204
// break ;
76202: GO 76206
// end ;
76204: GO 76115
76206: POP
76207: POP
// end ; if mc_crates_collector [ i ] and target then
76208: LD_EXP 53
76212: PUSH
76213: LD_VAR 0 2
76217: ARRAY
76218: PUSH
76219: LD_VAR 0 6
76223: AND
76224: IFFALSE 76467
// begin if mc_crates_collector [ i ] < target [ 1 ] then
76226: LD_EXP 53
76230: PUSH
76231: LD_VAR 0 2
76235: ARRAY
76236: PUSH
76237: LD_VAR 0 6
76241: PUSH
76242: LD_INT 1
76244: ARRAY
76245: LESS
76246: IFFALSE 76266
// tmp := mc_crates_collector [ i ] else
76248: LD_ADDR_VAR 0 5
76252: PUSH
76253: LD_EXP 53
76257: PUSH
76258: LD_VAR 0 2
76262: ARRAY
76263: ST_TO_ADDR
76264: GO 76280
// tmp := target [ 1 ] ;
76266: LD_ADDR_VAR 0 5
76270: PUSH
76271: LD_VAR 0 6
76275: PUSH
76276: LD_INT 1
76278: ARRAY
76279: ST_TO_ADDR
// k := 0 ;
76280: LD_ADDR_VAR 0 4
76284: PUSH
76285: LD_INT 0
76287: ST_TO_ADDR
// for j in mc_crates_collector [ i ] do
76288: LD_ADDR_VAR 0 3
76292: PUSH
76293: LD_EXP 53
76297: PUSH
76298: LD_VAR 0 2
76302: ARRAY
76303: PUSH
76304: FOR_IN
76305: IFFALSE 76465
// begin k := k + 1 ;
76307: LD_ADDR_VAR 0 4
76311: PUSH
76312: LD_VAR 0 4
76316: PUSH
76317: LD_INT 1
76319: PLUS
76320: ST_TO_ADDR
// if k > tmp then
76321: LD_VAR 0 4
76325: PUSH
76326: LD_VAR 0 5
76330: GREATER
76331: IFFALSE 76335
// break ;
76333: GO 76465
// if not GetClass ( j ) in [ 2 , 16 ] then
76335: LD_VAR 0 3
76339: PPUSH
76340: CALL_OW 257
76344: PUSH
76345: LD_INT 2
76347: PUSH
76348: LD_INT 16
76350: PUSH
76351: EMPTY
76352: LIST
76353: LIST
76354: IN
76355: NOT
76356: IFFALSE 76409
// begin mc_crates_collector := Replace ( mc_crates_collector , i , mc_crates_collector [ i ] diff j ) ;
76358: LD_ADDR_EXP 53
76362: PUSH
76363: LD_EXP 53
76367: PPUSH
76368: LD_VAR 0 2
76372: PPUSH
76373: LD_EXP 53
76377: PUSH
76378: LD_VAR 0 2
76382: ARRAY
76383: PUSH
76384: LD_VAR 0 3
76388: DIFF
76389: PPUSH
76390: CALL_OW 1
76394: ST_TO_ADDR
// SetTag ( j , 0 ) ;
76395: LD_VAR 0 3
76399: PPUSH
76400: LD_INT 0
76402: PPUSH
76403: CALL_OW 109
// continue ;
76407: GO 76304
// end ; if IsInUnit ( j ) then
76409: LD_VAR 0 3
76413: PPUSH
76414: CALL_OW 310
76418: IFFALSE 76429
// ComExitBuilding ( j ) ;
76420: LD_VAR 0 3
76424: PPUSH
76425: CALL_OW 122
// wait ( 3 ) ;
76429: LD_INT 3
76431: PPUSH
76432: CALL_OW 67
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
76436: LD_VAR 0 3
76440: PPUSH
76441: LD_VAR 0 6
76445: PUSH
76446: LD_INT 2
76448: ARRAY
76449: PPUSH
76450: LD_VAR 0 6
76454: PUSH
76455: LD_INT 3
76457: ARRAY
76458: PPUSH
76459: CALL_OW 117
// end ;
76463: GO 76304
76465: POP
76466: POP
// end ; end else
76467: GO 77029
// begin for j in cargo do
76469: LD_ADDR_VAR 0 3
76473: PUSH
76474: LD_VAR 0 7
76478: PUSH
76479: FOR_IN
76480: IFFALSE 77027
// begin if GetTag ( j ) <> 0 then
76482: LD_VAR 0 3
76486: PPUSH
76487: CALL_OW 110
76491: PUSH
76492: LD_INT 0
76494: NONEQUAL
76495: IFFALSE 76499
// continue ;
76497: GO 76479
// if GetLives ( j ) < 1000 and not IsInArea ( j , mc_parking [ i ] ) then
76499: LD_VAR 0 3
76503: PPUSH
76504: CALL_OW 256
76508: PUSH
76509: LD_INT 1000
76511: LESS
76512: PUSH
76513: LD_VAR 0 3
76517: PPUSH
76518: LD_EXP 60
76522: PUSH
76523: LD_VAR 0 2
76527: ARRAY
76528: PPUSH
76529: CALL_OW 308
76533: NOT
76534: AND
76535: IFFALSE 76557
// ComMoveToArea ( j , mc_parking [ i ] ) ;
76537: LD_VAR 0 3
76541: PPUSH
76542: LD_EXP 60
76546: PUSH
76547: LD_VAR 0 2
76551: ARRAY
76552: PPUSH
76553: CALL_OW 113
// if GetLives ( j ) < 1000 and IsInArea ( j , mc_parking [ i ] ) then
76557: LD_VAR 0 3
76561: PPUSH
76562: CALL_OW 256
76566: PUSH
76567: LD_INT 1000
76569: LESS
76570: PUSH
76571: LD_VAR 0 3
76575: PPUSH
76576: LD_EXP 60
76580: PUSH
76581: LD_VAR 0 2
76585: ARRAY
76586: PPUSH
76587: CALL_OW 308
76591: AND
76592: IFFALSE 76596
// continue ;
76594: GO 76479
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
76596: LD_VAR 0 3
76600: PPUSH
76601: CALL_OW 262
76605: PUSH
76606: LD_INT 2
76608: EQUAL
76609: PUSH
76610: LD_VAR 0 3
76614: PPUSH
76615: CALL_OW 261
76619: PUSH
76620: LD_INT 15
76622: LESS
76623: AND
76624: IFFALSE 76628
// continue ;
76626: GO 76479
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
76628: LD_VAR 0 3
76632: PPUSH
76633: CALL_OW 262
76637: PUSH
76638: LD_INT 1
76640: EQUAL
76641: PUSH
76642: LD_VAR 0 3
76646: PPUSH
76647: CALL_OW 261
76651: PUSH
76652: LD_INT 10
76654: LESS
76655: AND
76656: IFFALSE 76966
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
76658: LD_ADDR_VAR 0 8
76662: PUSH
76663: LD_EXP 36
76667: PUSH
76668: LD_VAR 0 2
76672: ARRAY
76673: PPUSH
76674: LD_INT 2
76676: PUSH
76677: LD_INT 30
76679: PUSH
76680: LD_INT 0
76682: PUSH
76683: EMPTY
76684: LIST
76685: LIST
76686: PUSH
76687: LD_INT 30
76689: PUSH
76690: LD_INT 1
76692: PUSH
76693: EMPTY
76694: LIST
76695: LIST
76696: PUSH
76697: EMPTY
76698: LIST
76699: LIST
76700: LIST
76701: PPUSH
76702: CALL_OW 72
76706: ST_TO_ADDR
// if not depot then
76707: LD_VAR 0 8
76711: NOT
76712: IFFALSE 76716
// continue ;
76714: GO 76479
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
76716: LD_VAR 0 3
76720: PPUSH
76721: LD_VAR 0 8
76725: PPUSH
76726: LD_VAR 0 3
76730: PPUSH
76731: CALL_OW 74
76735: PPUSH
76736: CALL_OW 296
76740: PUSH
76741: LD_INT 6
76743: LESS
76744: IFFALSE 76760
// SetFuel ( j , 100 ) else
76746: LD_VAR 0 3
76750: PPUSH
76751: LD_INT 100
76753: PPUSH
76754: CALL_OW 240
76758: GO 76966
// if GetFuel ( j ) = 0 then
76760: LD_VAR 0 3
76764: PPUSH
76765: CALL_OW 261
76769: PUSH
76770: LD_INT 0
76772: EQUAL
76773: IFFALSE 76966
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
76775: LD_ADDR_EXP 55
76779: PUSH
76780: LD_EXP 55
76784: PPUSH
76785: LD_VAR 0 2
76789: PPUSH
76790: LD_EXP 55
76794: PUSH
76795: LD_VAR 0 2
76799: ARRAY
76800: PUSH
76801: LD_VAR 0 3
76805: DIFF
76806: PPUSH
76807: CALL_OW 1
76811: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
76812: LD_VAR 0 3
76816: PPUSH
76817: CALL_OW 263
76821: PUSH
76822: LD_INT 1
76824: EQUAL
76825: IFFALSE 76841
// ComExitVehicle ( IsInUnit ( j ) ) ;
76827: LD_VAR 0 3
76831: PPUSH
76832: CALL_OW 310
76836: PPUSH
76837: CALL_OW 121
// if GetControl ( j ) = control_remote then
76841: LD_VAR 0 3
76845: PPUSH
76846: CALL_OW 263
76850: PUSH
76851: LD_INT 2
76853: EQUAL
76854: IFFALSE 76865
// ComUnlink ( j ) ;
76856: LD_VAR 0 3
76860: PPUSH
76861: CALL_OW 136
// fac := MC_GetBuilding ( i , b_factory ) ;
76865: LD_ADDR_VAR 0 9
76869: PUSH
76870: LD_VAR 0 2
76874: PPUSH
76875: LD_INT 3
76877: PPUSH
76878: CALL 86070 0 2
76882: ST_TO_ADDR
// if fac then
76883: LD_VAR 0 9
76887: IFFALSE 76964
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
76889: LD_ADDR_VAR 0 10
76893: PUSH
76894: LD_VAR 0 9
76898: PPUSH
76899: LD_VAR 0 3
76903: PPUSH
76904: CALL_OW 265
76908: PPUSH
76909: LD_VAR 0 3
76913: PPUSH
76914: CALL_OW 262
76918: PPUSH
76919: LD_VAR 0 3
76923: PPUSH
76924: CALL_OW 263
76928: PPUSH
76929: LD_VAR 0 3
76933: PPUSH
76934: CALL_OW 264
76938: PPUSH
76939: CALL 24159 0 5
76943: ST_TO_ADDR
// if components then
76944: LD_VAR 0 10
76948: IFFALSE 76964
// MC_InsertProduceList ( i , components ) ;
76950: LD_VAR 0 2
76954: PPUSH
76955: LD_VAR 0 10
76959: PPUSH
76960: CALL 85698 0 2
// end ; continue ;
76964: GO 76479
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
76966: LD_VAR 0 3
76970: PPUSH
76971: LD_INT 1
76973: PPUSH
76974: CALL_OW 289
76978: PUSH
76979: LD_INT 100
76981: LESS
76982: PUSH
76983: LD_VAR 0 3
76987: PPUSH
76988: CALL_OW 314
76992: NOT
76993: AND
76994: IFFALSE 77023
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
76996: LD_VAR 0 3
77000: PPUSH
77001: LD_VAR 0 6
77005: PUSH
77006: LD_INT 2
77008: ARRAY
77009: PPUSH
77010: LD_VAR 0 6
77014: PUSH
77015: LD_INT 3
77017: ARRAY
77018: PPUSH
77019: CALL_OW 117
// break ;
77023: GO 77027
// end ;
77025: GO 76479
77027: POP
77028: POP
// end ; end ;
77029: GO 75317
77031: POP
77032: POP
// end ;
77033: LD_VAR 0 1
77037: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
77038: LD_INT 0
77040: PPUSH
77041: PPUSH
77042: PPUSH
77043: PPUSH
// if not mc_bases then
77044: LD_EXP 36
77048: NOT
77049: IFFALSE 77053
// exit ;
77051: GO 77214
// for i = 1 to mc_bases do
77053: LD_ADDR_VAR 0 2
77057: PUSH
77058: DOUBLE
77059: LD_INT 1
77061: DEC
77062: ST_TO_ADDR
77063: LD_EXP 36
77067: PUSH
77068: FOR_TO
77069: IFFALSE 77212
// begin tmp := UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) ;
77071: LD_ADDR_VAR 0 4
77075: PUSH
77076: LD_EXP 55
77080: PUSH
77081: LD_VAR 0 2
77085: ARRAY
77086: PUSH
77087: LD_EXP 58
77091: PUSH
77092: LD_VAR 0 2
77096: ARRAY
77097: UNION
77098: PPUSH
77099: LD_INT 33
77101: PUSH
77102: LD_INT 2
77104: PUSH
77105: EMPTY
77106: LIST
77107: LIST
77108: PPUSH
77109: CALL_OW 72
77113: ST_TO_ADDR
// if tmp then
77114: LD_VAR 0 4
77118: IFFALSE 77210
// for j in tmp do
77120: LD_ADDR_VAR 0 3
77124: PUSH
77125: LD_VAR 0 4
77129: PUSH
77130: FOR_IN
77131: IFFALSE 77208
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
77133: LD_VAR 0 3
77137: PPUSH
77138: CALL_OW 312
77142: NOT
77143: PUSH
77144: LD_VAR 0 3
77148: PPUSH
77149: CALL_OW 256
77153: PUSH
77154: LD_INT 250
77156: GREATEREQUAL
77157: AND
77158: IFFALSE 77171
// Connect ( j ) else
77160: LD_VAR 0 3
77164: PPUSH
77165: CALL 29492 0 1
77169: GO 77206
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
77171: LD_VAR 0 3
77175: PPUSH
77176: CALL_OW 256
77180: PUSH
77181: LD_INT 250
77183: LESS
77184: PUSH
77185: LD_VAR 0 3
77189: PPUSH
77190: CALL_OW 312
77194: AND
77195: IFFALSE 77206
// ComUnlink ( j ) ;
77197: LD_VAR 0 3
77201: PPUSH
77202: CALL_OW 136
77206: GO 77130
77208: POP
77209: POP
// end ;
77210: GO 77068
77212: POP
77213: POP
// end ;
77214: LD_VAR 0 1
77218: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
77219: LD_INT 0
77221: PPUSH
77222: PPUSH
77223: PPUSH
77224: PPUSH
77225: PPUSH
// if not mc_bases then
77226: LD_EXP 36
77230: NOT
77231: IFFALSE 77235
// exit ;
77233: GO 77695
// for i = 1 to mc_bases do
77235: LD_ADDR_VAR 0 2
77239: PUSH
77240: DOUBLE
77241: LD_INT 1
77243: DEC
77244: ST_TO_ADDR
77245: LD_EXP 36
77249: PUSH
77250: FOR_TO
77251: IFFALSE 77693
// begin if not mc_produce [ i ] then
77253: LD_EXP 57
77257: PUSH
77258: LD_VAR 0 2
77262: ARRAY
77263: NOT
77264: IFFALSE 77268
// continue ;
77266: GO 77250
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
77268: LD_ADDR_VAR 0 5
77272: PUSH
77273: LD_EXP 36
77277: PUSH
77278: LD_VAR 0 2
77282: ARRAY
77283: PPUSH
77284: LD_INT 30
77286: PUSH
77287: LD_INT 3
77289: PUSH
77290: EMPTY
77291: LIST
77292: LIST
77293: PPUSH
77294: CALL_OW 72
77298: ST_TO_ADDR
// if not fac then
77299: LD_VAR 0 5
77303: NOT
77304: IFFALSE 77308
// continue ;
77306: GO 77250
// for j in fac do
77308: LD_ADDR_VAR 0 3
77312: PUSH
77313: LD_VAR 0 5
77317: PUSH
77318: FOR_IN
77319: IFFALSE 77689
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] or UnitsInside ( j ) = 0 then
77321: LD_VAR 0 3
77325: PPUSH
77326: CALL_OW 461
77330: PUSH
77331: LD_INT 2
77333: NONEQUAL
77334: PUSH
77335: LD_VAR 0 3
77339: PPUSH
77340: LD_INT 15
77342: PPUSH
77343: CALL 29152 0 2
77347: PUSH
77348: LD_INT 4
77350: ARRAY
77351: OR
77352: PUSH
77353: LD_VAR 0 3
77357: PPUSH
77358: CALL_OW 313
77362: PUSH
77363: LD_INT 0
77365: EQUAL
77366: OR
77367: IFFALSE 77371
// continue ;
77369: GO 77318
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
77371: LD_VAR 0 3
77375: PPUSH
77376: LD_EXP 57
77380: PUSH
77381: LD_VAR 0 2
77385: ARRAY
77386: PUSH
77387: LD_INT 1
77389: ARRAY
77390: PUSH
77391: LD_INT 1
77393: ARRAY
77394: PPUSH
77395: LD_EXP 57
77399: PUSH
77400: LD_VAR 0 2
77404: ARRAY
77405: PUSH
77406: LD_INT 1
77408: ARRAY
77409: PUSH
77410: LD_INT 2
77412: ARRAY
77413: PPUSH
77414: LD_EXP 57
77418: PUSH
77419: LD_VAR 0 2
77423: ARRAY
77424: PUSH
77425: LD_INT 1
77427: ARRAY
77428: PUSH
77429: LD_INT 3
77431: ARRAY
77432: PPUSH
77433: LD_EXP 57
77437: PUSH
77438: LD_VAR 0 2
77442: ARRAY
77443: PUSH
77444: LD_INT 1
77446: ARRAY
77447: PUSH
77448: LD_INT 4
77450: ARRAY
77451: PPUSH
77452: CALL_OW 448
77456: PUSH
77457: LD_VAR 0 3
77461: PPUSH
77462: LD_EXP 57
77466: PUSH
77467: LD_VAR 0 2
77471: ARRAY
77472: PUSH
77473: LD_INT 1
77475: ARRAY
77476: PUSH
77477: LD_INT 1
77479: ARRAY
77480: PUSH
77481: LD_EXP 57
77485: PUSH
77486: LD_VAR 0 2
77490: ARRAY
77491: PUSH
77492: LD_INT 1
77494: ARRAY
77495: PUSH
77496: LD_INT 2
77498: ARRAY
77499: PUSH
77500: LD_EXP 57
77504: PUSH
77505: LD_VAR 0 2
77509: ARRAY
77510: PUSH
77511: LD_INT 1
77513: ARRAY
77514: PUSH
77515: LD_INT 3
77517: ARRAY
77518: PUSH
77519: LD_EXP 57
77523: PUSH
77524: LD_VAR 0 2
77528: ARRAY
77529: PUSH
77530: LD_INT 1
77532: ARRAY
77533: PUSH
77534: LD_INT 4
77536: ARRAY
77537: PUSH
77538: EMPTY
77539: LIST
77540: LIST
77541: LIST
77542: LIST
77543: PPUSH
77544: CALL 32823 0 2
77548: AND
77549: IFFALSE 77687
// begin AddComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
77551: LD_VAR 0 3
77555: PPUSH
77556: LD_EXP 57
77560: PUSH
77561: LD_VAR 0 2
77565: ARRAY
77566: PUSH
77567: LD_INT 1
77569: ARRAY
77570: PUSH
77571: LD_INT 1
77573: ARRAY
77574: PPUSH
77575: LD_EXP 57
77579: PUSH
77580: LD_VAR 0 2
77584: ARRAY
77585: PUSH
77586: LD_INT 1
77588: ARRAY
77589: PUSH
77590: LD_INT 2
77592: ARRAY
77593: PPUSH
77594: LD_EXP 57
77598: PUSH
77599: LD_VAR 0 2
77603: ARRAY
77604: PUSH
77605: LD_INT 1
77607: ARRAY
77608: PUSH
77609: LD_INT 3
77611: ARRAY
77612: PPUSH
77613: LD_EXP 57
77617: PUSH
77618: LD_VAR 0 2
77622: ARRAY
77623: PUSH
77624: LD_INT 1
77626: ARRAY
77627: PUSH
77628: LD_INT 4
77630: ARRAY
77631: PPUSH
77632: CALL_OW 185
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
77636: LD_ADDR_VAR 0 4
77640: PUSH
77641: LD_EXP 57
77645: PUSH
77646: LD_VAR 0 2
77650: ARRAY
77651: PPUSH
77652: LD_INT 1
77654: PPUSH
77655: CALL_OW 3
77659: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
77660: LD_ADDR_EXP 57
77664: PUSH
77665: LD_EXP 57
77669: PPUSH
77670: LD_VAR 0 2
77674: PPUSH
77675: LD_VAR 0 4
77679: PPUSH
77680: CALL_OW 1
77684: ST_TO_ADDR
// break ;
77685: GO 77689
// end ; end ;
77687: GO 77318
77689: POP
77690: POP
// end ;
77691: GO 77250
77693: POP
77694: POP
// end ;
77695: LD_VAR 0 1
77699: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
77700: LD_INT 0
77702: PPUSH
77703: PPUSH
77704: PPUSH
// if not mc_bases then
77705: LD_EXP 36
77709: NOT
77710: IFFALSE 77714
// exit ;
77712: GO 77803
// for i = 1 to mc_bases do
77714: LD_ADDR_VAR 0 2
77718: PUSH
77719: DOUBLE
77720: LD_INT 1
77722: DEC
77723: ST_TO_ADDR
77724: LD_EXP 36
77728: PUSH
77729: FOR_TO
77730: IFFALSE 77801
// begin if mc_attack [ i ] then
77732: LD_EXP 56
77736: PUSH
77737: LD_VAR 0 2
77741: ARRAY
77742: IFFALSE 77799
// begin tmp := mc_attack [ i ] [ 1 ] ;
77744: LD_ADDR_VAR 0 3
77748: PUSH
77749: LD_EXP 56
77753: PUSH
77754: LD_VAR 0 2
77758: ARRAY
77759: PUSH
77760: LD_INT 1
77762: ARRAY
77763: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
77764: LD_ADDR_EXP 56
77768: PUSH
77769: LD_EXP 56
77773: PPUSH
77774: LD_VAR 0 2
77778: PPUSH
77779: EMPTY
77780: PPUSH
77781: CALL_OW 1
77785: ST_TO_ADDR
// Attack ( tmp ) ;
77786: LD_VAR 0 3
77790: PPUSH
77791: CALL 55012 0 1
// exit ;
77795: POP
77796: POP
77797: GO 77803
// end ; end ;
77799: GO 77729
77801: POP
77802: POP
// end ;
77803: LD_VAR 0 1
77807: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
77808: LD_INT 0
77810: PPUSH
77811: PPUSH
77812: PPUSH
77813: PPUSH
77814: PPUSH
77815: PPUSH
77816: PPUSH
// if not mc_bases then
77817: LD_EXP 36
77821: NOT
77822: IFFALSE 77826
// exit ;
77824: GO 78430
// for i = 1 to mc_bases do
77826: LD_ADDR_VAR 0 2
77830: PUSH
77831: DOUBLE
77832: LD_INT 1
77834: DEC
77835: ST_TO_ADDR
77836: LD_EXP 36
77840: PUSH
77841: FOR_TO
77842: IFFALSE 78428
// begin if not mc_bases [ i ] then
77844: LD_EXP 36
77848: PUSH
77849: LD_VAR 0 2
77853: ARRAY
77854: NOT
77855: IFFALSE 77859
// continue ;
77857: GO 77841
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
77859: LD_ADDR_VAR 0 7
77863: PUSH
77864: LD_EXP 36
77868: PUSH
77869: LD_VAR 0 2
77873: ARRAY
77874: PUSH
77875: LD_INT 1
77877: ARRAY
77878: PPUSH
77879: CALL 23463 0 1
77883: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
77884: LD_ADDR_EXP 59
77888: PUSH
77889: LD_EXP 59
77893: PPUSH
77894: LD_VAR 0 2
77898: PPUSH
77899: LD_EXP 36
77903: PUSH
77904: LD_VAR 0 2
77908: ARRAY
77909: PUSH
77910: LD_INT 1
77912: ARRAY
77913: PPUSH
77914: CALL_OW 255
77918: PPUSH
77919: LD_EXP 61
77923: PUSH
77924: LD_VAR 0 2
77928: ARRAY
77929: PPUSH
77930: CALL 21423 0 2
77934: PPUSH
77935: CALL_OW 1
77939: ST_TO_ADDR
// if not mc_scan [ i ] then
77940: LD_EXP 59
77944: PUSH
77945: LD_VAR 0 2
77949: ARRAY
77950: NOT
77951: IFFALSE 78106
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
77953: LD_ADDR_VAR 0 4
77957: PUSH
77958: LD_EXP 36
77962: PUSH
77963: LD_VAR 0 2
77967: ARRAY
77968: PPUSH
77969: LD_INT 2
77971: PUSH
77972: LD_INT 25
77974: PUSH
77975: LD_INT 5
77977: PUSH
77978: EMPTY
77979: LIST
77980: LIST
77981: PUSH
77982: LD_INT 25
77984: PUSH
77985: LD_INT 8
77987: PUSH
77988: EMPTY
77989: LIST
77990: LIST
77991: PUSH
77992: LD_INT 25
77994: PUSH
77995: LD_INT 9
77997: PUSH
77998: EMPTY
77999: LIST
78000: LIST
78001: PUSH
78002: EMPTY
78003: LIST
78004: LIST
78005: LIST
78006: LIST
78007: PPUSH
78008: CALL_OW 72
78012: ST_TO_ADDR
// if not tmp then
78013: LD_VAR 0 4
78017: NOT
78018: IFFALSE 78022
// continue ;
78020: GO 77841
// for j in tmp do
78022: LD_ADDR_VAR 0 3
78026: PUSH
78027: LD_VAR 0 4
78031: PUSH
78032: FOR_IN
78033: IFFALSE 78104
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
78035: LD_VAR 0 3
78039: PPUSH
78040: CALL_OW 310
78044: PPUSH
78045: CALL_OW 266
78049: PUSH
78050: LD_INT 5
78052: EQUAL
78053: PUSH
78054: LD_VAR 0 3
78058: PPUSH
78059: CALL_OW 257
78063: PUSH
78064: LD_INT 1
78066: EQUAL
78067: AND
78068: PUSH
78069: LD_VAR 0 3
78073: PPUSH
78074: CALL_OW 459
78078: NOT
78079: AND
78080: PUSH
78081: LD_VAR 0 7
78085: AND
78086: IFFALSE 78102
// ComChangeProfession ( j , class ) ;
78088: LD_VAR 0 3
78092: PPUSH
78093: LD_VAR 0 7
78097: PPUSH
78098: CALL_OW 123
78102: GO 78032
78104: POP
78105: POP
// end ; if mc_scan [ i ] and not mc_defender [ i ] and not UnitFilter ( mc_bases [ i ] , [ f_btype , b_bunker ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) then
78106: LD_EXP 59
78110: PUSH
78111: LD_VAR 0 2
78115: ARRAY
78116: PUSH
78117: LD_EXP 58
78121: PUSH
78122: LD_VAR 0 2
78126: ARRAY
78127: NOT
78128: AND
78129: PUSH
78130: LD_EXP 36
78134: PUSH
78135: LD_VAR 0 2
78139: ARRAY
78140: PPUSH
78141: LD_INT 30
78143: PUSH
78144: LD_INT 32
78146: PUSH
78147: EMPTY
78148: LIST
78149: LIST
78150: PPUSH
78151: CALL_OW 72
78155: NOT
78156: AND
78157: PUSH
78158: LD_EXP 36
78162: PUSH
78163: LD_VAR 0 2
78167: ARRAY
78168: PPUSH
78169: LD_INT 2
78171: PUSH
78172: LD_INT 30
78174: PUSH
78175: LD_INT 4
78177: PUSH
78178: EMPTY
78179: LIST
78180: LIST
78181: PUSH
78182: LD_INT 30
78184: PUSH
78185: LD_INT 5
78187: PUSH
78188: EMPTY
78189: LIST
78190: LIST
78191: PUSH
78192: EMPTY
78193: LIST
78194: LIST
78195: LIST
78196: PPUSH
78197: CALL_OW 72
78201: NOT
78202: AND
78203: IFFALSE 78335
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
78205: LD_ADDR_VAR 0 4
78209: PUSH
78210: LD_EXP 36
78214: PUSH
78215: LD_VAR 0 2
78219: ARRAY
78220: PPUSH
78221: LD_INT 2
78223: PUSH
78224: LD_INT 25
78226: PUSH
78227: LD_INT 1
78229: PUSH
78230: EMPTY
78231: LIST
78232: LIST
78233: PUSH
78234: LD_INT 25
78236: PUSH
78237: LD_INT 5
78239: PUSH
78240: EMPTY
78241: LIST
78242: LIST
78243: PUSH
78244: LD_INT 25
78246: PUSH
78247: LD_INT 8
78249: PUSH
78250: EMPTY
78251: LIST
78252: LIST
78253: PUSH
78254: LD_INT 25
78256: PUSH
78257: LD_INT 9
78259: PUSH
78260: EMPTY
78261: LIST
78262: LIST
78263: PUSH
78264: EMPTY
78265: LIST
78266: LIST
78267: LIST
78268: LIST
78269: LIST
78270: PPUSH
78271: CALL_OW 72
78275: ST_TO_ADDR
// tmp := tmp diff FilterByTag ( tmp , 18 ) ;
78276: LD_ADDR_VAR 0 4
78280: PUSH
78281: LD_VAR 0 4
78285: PUSH
78286: LD_VAR 0 4
78290: PPUSH
78291: LD_INT 18
78293: PPUSH
78294: CALL 59795 0 2
78298: DIFF
78299: ST_TO_ADDR
// if tmp then
78300: LD_VAR 0 4
78304: IFFALSE 78335
// begin BasicDefend ( i , tmp , mc_scan_area [ i ] ) ;
78306: LD_VAR 0 2
78310: PPUSH
78311: LD_VAR 0 4
78315: PPUSH
78316: LD_EXP 61
78320: PUSH
78321: LD_VAR 0 2
78325: ARRAY
78326: PPUSH
78327: CALL 21458 0 3
// exit ;
78331: POP
78332: POP
78333: GO 78430
// end ; end ; if mc_scan [ i ] and mc_defender [ i ] then
78335: LD_EXP 59
78339: PUSH
78340: LD_VAR 0 2
78344: ARRAY
78345: PUSH
78346: LD_EXP 58
78350: PUSH
78351: LD_VAR 0 2
78355: ARRAY
78356: AND
78357: IFFALSE 78426
// begin tmp := mc_defender [ i ] ;
78359: LD_ADDR_VAR 0 4
78363: PUSH
78364: LD_EXP 58
78368: PUSH
78369: LD_VAR 0 2
78373: ARRAY
78374: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
78375: LD_ADDR_EXP 58
78379: PUSH
78380: LD_EXP 58
78384: PPUSH
78385: LD_VAR 0 2
78389: PPUSH
78390: EMPTY
78391: PPUSH
78392: CALL_OW 1
78396: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
78397: LD_VAR 0 2
78401: PPUSH
78402: LD_VAR 0 4
78406: PPUSH
78407: LD_EXP 59
78411: PUSH
78412: LD_VAR 0 2
78416: ARRAY
78417: PPUSH
78418: CALL 21956 0 3
// exit ;
78422: POP
78423: POP
78424: GO 78430
// end ; end ;
78426: GO 77841
78428: POP
78429: POP
// end ;
78430: LD_VAR 0 1
78434: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 , researching , idle_lab ; begin
78435: LD_INT 0
78437: PPUSH
78438: PPUSH
78439: PPUSH
78440: PPUSH
78441: PPUSH
78442: PPUSH
78443: PPUSH
78444: PPUSH
78445: PPUSH
78446: PPUSH
78447: PPUSH
// if not mc_bases then
78448: LD_EXP 36
78452: NOT
78453: IFFALSE 78457
// exit ;
78455: GO 79544
// for i = 1 to mc_bases do
78457: LD_ADDR_VAR 0 2
78461: PUSH
78462: DOUBLE
78463: LD_INT 1
78465: DEC
78466: ST_TO_ADDR
78467: LD_EXP 36
78471: PUSH
78472: FOR_TO
78473: IFFALSE 79542
// begin tmp := mc_lab [ i ] ;
78475: LD_ADDR_VAR 0 6
78479: PUSH
78480: LD_EXP 69
78484: PUSH
78485: LD_VAR 0 2
78489: ARRAY
78490: ST_TO_ADDR
// if not tmp then
78491: LD_VAR 0 6
78495: NOT
78496: IFFALSE 78500
// continue ;
78498: GO 78472
// idle_lab := 0 ;
78500: LD_ADDR_VAR 0 11
78504: PUSH
78505: LD_INT 0
78507: ST_TO_ADDR
// for j in tmp do
78508: LD_ADDR_VAR 0 3
78512: PUSH
78513: LD_VAR 0 6
78517: PUSH
78518: FOR_IN
78519: IFFALSE 79538
// begin researching := false ;
78521: LD_ADDR_VAR 0 10
78525: PUSH
78526: LD_INT 0
78528: ST_TO_ADDR
// side := GetSide ( j ) ;
78529: LD_ADDR_VAR 0 4
78533: PUSH
78534: LD_VAR 0 3
78538: PPUSH
78539: CALL_OW 255
78543: ST_TO_ADDR
// if not mc_tech [ side ] then
78544: LD_EXP 63
78548: PUSH
78549: LD_VAR 0 4
78553: ARRAY
78554: NOT
78555: IFFALSE 78559
// continue ;
78557: GO 78518
// if BuildingStatus ( j ) = bs_idle then
78559: LD_VAR 0 3
78563: PPUSH
78564: CALL_OW 461
78568: PUSH
78569: LD_INT 2
78571: EQUAL
78572: IFFALSE 78760
// begin if idle_lab and UnitsInside ( j ) < 6 then
78574: LD_VAR 0 11
78578: PUSH
78579: LD_VAR 0 3
78583: PPUSH
78584: CALL_OW 313
78588: PUSH
78589: LD_INT 6
78591: LESS
78592: AND
78593: IFFALSE 78664
// begin tmp2 := UnitsInside ( idle_lab ) ;
78595: LD_ADDR_VAR 0 9
78599: PUSH
78600: LD_VAR 0 11
78604: PPUSH
78605: CALL_OW 313
78609: ST_TO_ADDR
// if tmp2 then
78610: LD_VAR 0 9
78614: IFFALSE 78656
// for x in tmp2 do
78616: LD_ADDR_VAR 0 7
78620: PUSH
78621: LD_VAR 0 9
78625: PUSH
78626: FOR_IN
78627: IFFALSE 78654
// begin ComExitBuilding ( x ) ;
78629: LD_VAR 0 7
78633: PPUSH
78634: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
78638: LD_VAR 0 7
78642: PPUSH
78643: LD_VAR 0 3
78647: PPUSH
78648: CALL_OW 180
// end ;
78652: GO 78626
78654: POP
78655: POP
// idle_lab := 0 ;
78656: LD_ADDR_VAR 0 11
78660: PUSH
78661: LD_INT 0
78663: ST_TO_ADDR
// end ; for t in mc_tech [ side ] do
78664: LD_ADDR_VAR 0 5
78668: PUSH
78669: LD_EXP 63
78673: PUSH
78674: LD_VAR 0 4
78678: ARRAY
78679: PUSH
78680: FOR_IN
78681: IFFALSE 78741
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
78683: LD_VAR 0 3
78687: PPUSH
78688: LD_VAR 0 5
78692: PPUSH
78693: CALL_OW 430
78697: PUSH
78698: LD_VAR 0 4
78702: PPUSH
78703: LD_VAR 0 5
78707: PPUSH
78708: CALL 20528 0 2
78712: AND
78713: IFFALSE 78739
// begin researching := true ;
78715: LD_ADDR_VAR 0 10
78719: PUSH
78720: LD_INT 1
78722: ST_TO_ADDR
// ComResearch ( j , t ) ;
78723: LD_VAR 0 3
78727: PPUSH
78728: LD_VAR 0 5
78732: PPUSH
78733: CALL_OW 124
// break ;
78737: GO 78741
// end ;
78739: GO 78680
78741: POP
78742: POP
// if not researching then
78743: LD_VAR 0 10
78747: NOT
78748: IFFALSE 78760
// idle_lab := j ;
78750: LD_ADDR_VAR 0 11
78754: PUSH
78755: LD_VAR 0 3
78759: ST_TO_ADDR
// end ; if BuildingStatus ( j ) = bs_need_ape then
78760: LD_VAR 0 3
78764: PPUSH
78765: CALL_OW 461
78769: PUSH
78770: LD_INT 10
78772: EQUAL
78773: IFFALSE 79361
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
78775: LD_EXP 65
78779: PUSH
78780: LD_VAR 0 2
78784: ARRAY
78785: NOT
78786: PUSH
78787: LD_EXP 66
78791: PUSH
78792: LD_VAR 0 2
78796: ARRAY
78797: NOT
78798: AND
78799: PUSH
78800: LD_EXP 63
78804: PUSH
78805: LD_VAR 0 4
78809: ARRAY
78810: PUSH
78811: LD_INT 1
78813: GREATER
78814: AND
78815: IFFALSE 78946
// begin ComCancel ( j ) ;
78817: LD_VAR 0 3
78821: PPUSH
78822: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
78826: LD_ADDR_EXP 63
78830: PUSH
78831: LD_EXP 63
78835: PPUSH
78836: LD_VAR 0 4
78840: PPUSH
78841: LD_EXP 63
78845: PUSH
78846: LD_VAR 0 4
78850: ARRAY
78851: PPUSH
78852: LD_EXP 63
78856: PUSH
78857: LD_VAR 0 4
78861: ARRAY
78862: PUSH
78863: LD_INT 1
78865: MINUS
78866: PPUSH
78867: LD_EXP 63
78871: PUSH
78872: LD_VAR 0 4
78876: ARRAY
78877: PPUSH
78878: LD_INT 0
78880: PPUSH
78881: CALL 25977 0 4
78885: PPUSH
78886: CALL_OW 1
78890: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
78891: LD_ADDR_EXP 63
78895: PUSH
78896: LD_EXP 63
78900: PPUSH
78901: LD_VAR 0 4
78905: PPUSH
78906: LD_EXP 63
78910: PUSH
78911: LD_VAR 0 4
78915: ARRAY
78916: PPUSH
78917: LD_EXP 63
78921: PUSH
78922: LD_VAR 0 4
78926: ARRAY
78927: PPUSH
78928: LD_INT 1
78930: PPUSH
78931: LD_INT 0
78933: PPUSH
78934: CALL 25977 0 4
78938: PPUSH
78939: CALL_OW 1
78943: ST_TO_ADDR
// continue ;
78944: GO 78518
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
78946: LD_EXP 65
78950: PUSH
78951: LD_VAR 0 2
78955: ARRAY
78956: PUSH
78957: LD_EXP 66
78961: PUSH
78962: LD_VAR 0 2
78966: ARRAY
78967: NOT
78968: AND
78969: IFFALSE 79096
// begin mc_ape_in_lab := ReplaceIn ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
78971: LD_ADDR_EXP 66
78975: PUSH
78976: LD_EXP 66
78980: PPUSH
78981: LD_VAR 0 2
78985: PUSH
78986: LD_EXP 66
78990: PUSH
78991: LD_VAR 0 2
78995: ARRAY
78996: PUSH
78997: LD_INT 1
78999: PLUS
79000: PUSH
79001: EMPTY
79002: LIST
79003: LIST
79004: PPUSH
79005: LD_EXP 65
79009: PUSH
79010: LD_VAR 0 2
79014: ARRAY
79015: PUSH
79016: LD_INT 1
79018: ARRAY
79019: PPUSH
79020: CALL 26559 0 3
79024: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
79025: LD_EXP 65
79029: PUSH
79030: LD_VAR 0 2
79034: ARRAY
79035: PUSH
79036: LD_INT 1
79038: ARRAY
79039: PPUSH
79040: LD_INT 112
79042: PPUSH
79043: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
79047: LD_ADDR_VAR 0 9
79051: PUSH
79052: LD_EXP 65
79056: PUSH
79057: LD_VAR 0 2
79061: ARRAY
79062: PPUSH
79063: LD_INT 1
79065: PPUSH
79066: CALL_OW 3
79070: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
79071: LD_ADDR_EXP 65
79075: PUSH
79076: LD_EXP 65
79080: PPUSH
79081: LD_VAR 0 2
79085: PPUSH
79086: LD_VAR 0 9
79090: PPUSH
79091: CALL_OW 1
79095: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
79096: LD_EXP 65
79100: PUSH
79101: LD_VAR 0 2
79105: ARRAY
79106: PUSH
79107: LD_EXP 66
79111: PUSH
79112: LD_VAR 0 2
79116: ARRAY
79117: AND
79118: PUSH
79119: LD_EXP 66
79123: PUSH
79124: LD_VAR 0 2
79128: ARRAY
79129: PUSH
79130: LD_INT 1
79132: ARRAY
79133: PPUSH
79134: CALL_OW 310
79138: NOT
79139: AND
79140: PUSH
79141: LD_VAR 0 3
79145: PPUSH
79146: CALL_OW 313
79150: PUSH
79151: LD_INT 6
79153: EQUAL
79154: AND
79155: IFFALSE 79211
// begin tmp2 := UnitsInside ( j ) ;
79157: LD_ADDR_VAR 0 9
79161: PUSH
79162: LD_VAR 0 3
79166: PPUSH
79167: CALL_OW 313
79171: ST_TO_ADDR
// if tmp2 = 6 then
79172: LD_VAR 0 9
79176: PUSH
79177: LD_INT 6
79179: EQUAL
79180: IFFALSE 79211
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
79182: LD_VAR 0 9
79186: PUSH
79187: LD_INT 1
79189: ARRAY
79190: PPUSH
79191: LD_INT 112
79193: PPUSH
79194: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
79198: LD_VAR 0 9
79202: PUSH
79203: LD_INT 1
79205: ARRAY
79206: PPUSH
79207: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
79211: LD_EXP 66
79215: PUSH
79216: LD_VAR 0 2
79220: ARRAY
79221: PUSH
79222: LD_EXP 66
79226: PUSH
79227: LD_VAR 0 2
79231: ARRAY
79232: PUSH
79233: LD_INT 1
79235: ARRAY
79236: PPUSH
79237: CALL_OW 314
79241: NOT
79242: AND
79243: PUSH
79244: LD_EXP 66
79248: PUSH
79249: LD_VAR 0 2
79253: ARRAY
79254: PUSH
79255: LD_INT 1
79257: ARRAY
79258: PPUSH
79259: CALL_OW 310
79263: NOT
79264: AND
79265: IFFALSE 79291
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
79267: LD_EXP 66
79271: PUSH
79272: LD_VAR 0 2
79276: ARRAY
79277: PUSH
79278: LD_INT 1
79280: ARRAY
79281: PPUSH
79282: LD_VAR 0 3
79286: PPUSH
79287: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
79291: LD_EXP 66
79295: PUSH
79296: LD_VAR 0 2
79300: ARRAY
79301: PUSH
79302: LD_INT 1
79304: ARRAY
79305: PPUSH
79306: CALL_OW 310
79310: PUSH
79311: LD_EXP 66
79315: PUSH
79316: LD_VAR 0 2
79320: ARRAY
79321: PUSH
79322: LD_INT 1
79324: ARRAY
79325: PPUSH
79326: CALL_OW 310
79330: PPUSH
79331: CALL_OW 461
79335: PUSH
79336: LD_INT 3
79338: NONEQUAL
79339: AND
79340: IFFALSE 79361
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
79342: LD_EXP 66
79346: PUSH
79347: LD_VAR 0 2
79351: ARRAY
79352: PUSH
79353: LD_INT 1
79355: ARRAY
79356: PPUSH
79357: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
79361: LD_VAR 0 3
79365: PPUSH
79366: CALL_OW 461
79370: PUSH
79371: LD_INT 6
79373: EQUAL
79374: PUSH
79375: LD_VAR 0 6
79379: PUSH
79380: LD_INT 1
79382: GREATER
79383: AND
79384: IFFALSE 79536
// begin sci := [ ] ;
79386: LD_ADDR_VAR 0 8
79390: PUSH
79391: EMPTY
79392: ST_TO_ADDR
// for x in ( tmp diff j ) do
79393: LD_ADDR_VAR 0 7
79397: PUSH
79398: LD_VAR 0 6
79402: PUSH
79403: LD_VAR 0 3
79407: DIFF
79408: PUSH
79409: FOR_IN
79410: IFFALSE 79462
// begin if sci = 6 then
79412: LD_VAR 0 8
79416: PUSH
79417: LD_INT 6
79419: EQUAL
79420: IFFALSE 79424
// break ;
79422: GO 79462
// if BuildingStatus ( x ) = bs_idle then
79424: LD_VAR 0 7
79428: PPUSH
79429: CALL_OW 461
79433: PUSH
79434: LD_INT 2
79436: EQUAL
79437: IFFALSE 79460
// sci := sci ^ UnitsInside ( x ) ;
79439: LD_ADDR_VAR 0 8
79443: PUSH
79444: LD_VAR 0 8
79448: PUSH
79449: LD_VAR 0 7
79453: PPUSH
79454: CALL_OW 313
79458: ADD
79459: ST_TO_ADDR
// end ;
79460: GO 79409
79462: POP
79463: POP
// if not sci then
79464: LD_VAR 0 8
79468: NOT
79469: IFFALSE 79473
// continue ;
79471: GO 78518
// for x in sci do
79473: LD_ADDR_VAR 0 7
79477: PUSH
79478: LD_VAR 0 8
79482: PUSH
79483: FOR_IN
79484: IFFALSE 79534
// if IsInUnit ( x ) and not HasTask ( x ) then
79486: LD_VAR 0 7
79490: PPUSH
79491: CALL_OW 310
79495: PUSH
79496: LD_VAR 0 7
79500: PPUSH
79501: CALL_OW 314
79505: NOT
79506: AND
79507: IFFALSE 79532
// begin ComExitBuilding ( x ) ;
79509: LD_VAR 0 7
79513: PPUSH
79514: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
79518: LD_VAR 0 7
79522: PPUSH
79523: LD_VAR 0 3
79527: PPUSH
79528: CALL_OW 180
// end ;
79532: GO 79483
79534: POP
79535: POP
// end ; end ;
79536: GO 78518
79538: POP
79539: POP
// end ;
79540: GO 78472
79542: POP
79543: POP
// end ;
79544: LD_VAR 0 1
79548: RET
// export function MC_MinesTrigger ( ) ; var i ; begin
79549: LD_INT 0
79551: PPUSH
79552: PPUSH
// if not mc_bases then
79553: LD_EXP 36
79557: NOT
79558: IFFALSE 79562
// exit ;
79560: GO 79643
// for i = 1 to mc_bases do
79562: LD_ADDR_VAR 0 2
79566: PUSH
79567: DOUBLE
79568: LD_INT 1
79570: DEC
79571: ST_TO_ADDR
79572: LD_EXP 36
79576: PUSH
79577: FOR_TO
79578: IFFALSE 79641
// if mc_mines [ i ] and mc_miners [ i ] then
79580: LD_EXP 49
79584: PUSH
79585: LD_VAR 0 2
79589: ARRAY
79590: PUSH
79591: LD_EXP 50
79595: PUSH
79596: LD_VAR 0 2
79600: ARRAY
79601: AND
79602: IFFALSE 79639
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
79604: LD_EXP 50
79608: PUSH
79609: LD_VAR 0 2
79613: ARRAY
79614: PUSH
79615: LD_INT 1
79617: ARRAY
79618: PPUSH
79619: CALL_OW 255
79623: PPUSH
79624: LD_EXP 49
79628: PUSH
79629: LD_VAR 0 2
79633: ARRAY
79634: PPUSH
79635: CALL 23616 0 2
79639: GO 79577
79641: POP
79642: POP
// end ;
79643: LD_VAR 0 1
79647: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
79648: LD_INT 0
79650: PPUSH
79651: PPUSH
79652: PPUSH
79653: PPUSH
79654: PPUSH
79655: PPUSH
79656: PPUSH
79657: PPUSH
// if not mc_bases or not mc_parking then
79658: LD_EXP 36
79662: NOT
79663: PUSH
79664: LD_EXP 60
79668: NOT
79669: OR
79670: IFFALSE 79674
// exit ;
79672: GO 80386
// for i = 1 to mc_bases do
79674: LD_ADDR_VAR 0 2
79678: PUSH
79679: DOUBLE
79680: LD_INT 1
79682: DEC
79683: ST_TO_ADDR
79684: LD_EXP 36
79688: PUSH
79689: FOR_TO
79690: IFFALSE 80384
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
79692: LD_EXP 36
79696: PUSH
79697: LD_VAR 0 2
79701: ARRAY
79702: NOT
79703: PUSH
79704: LD_EXP 60
79708: PUSH
79709: LD_VAR 0 2
79713: ARRAY
79714: NOT
79715: OR
79716: IFFALSE 79720
// continue ;
79718: GO 79689
// if mc_scan [ i ] then
79720: LD_EXP 59
79724: PUSH
79725: LD_VAR 0 2
79729: ARRAY
79730: IFFALSE 79756
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
79732: LD_ADDR_EXP 48
79736: PUSH
79737: LD_EXP 48
79741: PPUSH
79742: LD_VAR 0 2
79746: PPUSH
79747: EMPTY
79748: PPUSH
79749: CALL_OW 1
79753: ST_TO_ADDR
// continue ;
79754: GO 79689
// end ; side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
79756: LD_ADDR_VAR 0 5
79760: PUSH
79761: LD_EXP 36
79765: PUSH
79766: LD_VAR 0 2
79770: ARRAY
79771: PUSH
79772: LD_INT 1
79774: ARRAY
79775: PPUSH
79776: CALL_OW 255
79780: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
79781: LD_ADDR_VAR 0 6
79785: PUSH
79786: LD_EXP 36
79790: PUSH
79791: LD_VAR 0 2
79795: ARRAY
79796: PPUSH
79797: LD_INT 30
79799: PUSH
79800: LD_INT 3
79802: PUSH
79803: EMPTY
79804: LIST
79805: LIST
79806: PPUSH
79807: CALL_OW 72
79811: ST_TO_ADDR
// if not fac then
79812: LD_VAR 0 6
79816: NOT
79817: IFFALSE 79868
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
79819: LD_ADDR_VAR 0 6
79823: PUSH
79824: LD_EXP 36
79828: PUSH
79829: LD_VAR 0 2
79833: ARRAY
79834: PPUSH
79835: LD_INT 2
79837: PUSH
79838: LD_INT 30
79840: PUSH
79841: LD_INT 0
79843: PUSH
79844: EMPTY
79845: LIST
79846: LIST
79847: PUSH
79848: LD_INT 30
79850: PUSH
79851: LD_INT 1
79853: PUSH
79854: EMPTY
79855: LIST
79856: LIST
79857: PUSH
79858: EMPTY
79859: LIST
79860: LIST
79861: LIST
79862: PPUSH
79863: CALL_OW 72
79867: ST_TO_ADDR
// if not fac then
79868: LD_VAR 0 6
79872: NOT
79873: IFFALSE 79877
// continue ;
79875: GO 79689
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , fac [ 1 ] , 25 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
79877: LD_ADDR_VAR 0 7
79881: PUSH
79882: LD_EXP 60
79886: PUSH
79887: LD_VAR 0 2
79891: ARRAY
79892: PPUSH
79893: LD_INT 22
79895: PUSH
79896: LD_VAR 0 5
79900: PUSH
79901: EMPTY
79902: LIST
79903: LIST
79904: PUSH
79905: LD_INT 21
79907: PUSH
79908: LD_INT 2
79910: PUSH
79911: EMPTY
79912: LIST
79913: LIST
79914: PUSH
79915: LD_INT 3
79917: PUSH
79918: LD_INT 24
79920: PUSH
79921: LD_INT 1000
79923: PUSH
79924: EMPTY
79925: LIST
79926: LIST
79927: PUSH
79928: EMPTY
79929: LIST
79930: LIST
79931: PUSH
79932: EMPTY
79933: LIST
79934: LIST
79935: LIST
79936: PPUSH
79937: CALL_OW 70
79941: PUSH
79942: LD_INT 22
79944: PUSH
79945: LD_VAR 0 5
79949: PUSH
79950: EMPTY
79951: LIST
79952: LIST
79953: PUSH
79954: LD_INT 91
79956: PUSH
79957: LD_VAR 0 6
79961: PUSH
79962: LD_INT 1
79964: ARRAY
79965: PUSH
79966: LD_INT 25
79968: PUSH
79969: EMPTY
79970: LIST
79971: LIST
79972: LIST
79973: PUSH
79974: LD_INT 21
79976: PUSH
79977: LD_INT 2
79979: PUSH
79980: EMPTY
79981: LIST
79982: LIST
79983: PUSH
79984: LD_INT 3
79986: PUSH
79987: LD_INT 24
79989: PUSH
79990: LD_INT 1000
79992: PUSH
79993: EMPTY
79994: LIST
79995: LIST
79996: PUSH
79997: EMPTY
79998: LIST
79999: LIST
80000: PUSH
80001: EMPTY
80002: LIST
80003: LIST
80004: LIST
80005: LIST
80006: PPUSH
80007: CALL_OW 69
80011: UNION
80012: ST_TO_ADDR
// if not vehs then
80013: LD_VAR 0 7
80017: NOT
80018: IFFALSE 80044
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
80020: LD_ADDR_EXP 48
80024: PUSH
80025: LD_EXP 48
80029: PPUSH
80030: LD_VAR 0 2
80034: PPUSH
80035: EMPTY
80036: PPUSH
80037: CALL_OW 1
80041: ST_TO_ADDR
// continue ;
80042: GO 79689
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
80044: LD_ADDR_VAR 0 8
80048: PUSH
80049: LD_EXP 36
80053: PUSH
80054: LD_VAR 0 2
80058: ARRAY
80059: PPUSH
80060: LD_INT 30
80062: PUSH
80063: LD_INT 3
80065: PUSH
80066: EMPTY
80067: LIST
80068: LIST
80069: PPUSH
80070: CALL_OW 72
80074: ST_TO_ADDR
// if tmp then
80075: LD_VAR 0 8
80079: IFFALSE 80182
// begin for j in tmp do
80081: LD_ADDR_VAR 0 3
80085: PUSH
80086: LD_VAR 0 8
80090: PUSH
80091: FOR_IN
80092: IFFALSE 80180
// for k in UnitsInside ( j ) do
80094: LD_ADDR_VAR 0 4
80098: PUSH
80099: LD_VAR 0 3
80103: PPUSH
80104: CALL_OW 313
80108: PUSH
80109: FOR_IN
80110: IFFALSE 80176
// if k then
80112: LD_VAR 0 4
80116: IFFALSE 80174
// if not k in mc_repair_vehicle [ i ] then
80118: LD_VAR 0 4
80122: PUSH
80123: LD_EXP 48
80127: PUSH
80128: LD_VAR 0 2
80132: ARRAY
80133: IN
80134: NOT
80135: IFFALSE 80174
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
80137: LD_ADDR_EXP 48
80141: PUSH
80142: LD_EXP 48
80146: PPUSH
80147: LD_VAR 0 2
80151: PPUSH
80152: LD_EXP 48
80156: PUSH
80157: LD_VAR 0 2
80161: ARRAY
80162: PUSH
80163: LD_VAR 0 4
80167: UNION
80168: PPUSH
80169: CALL_OW 1
80173: ST_TO_ADDR
80174: GO 80109
80176: POP
80177: POP
80178: GO 80091
80180: POP
80181: POP
// end ; if not mc_repair_vehicle [ i ] then
80182: LD_EXP 48
80186: PUSH
80187: LD_VAR 0 2
80191: ARRAY
80192: NOT
80193: IFFALSE 80197
// continue ;
80195: GO 79689
// for j in mc_repair_vehicle [ i ] do
80197: LD_ADDR_VAR 0 3
80201: PUSH
80202: LD_EXP 48
80206: PUSH
80207: LD_VAR 0 2
80211: ARRAY
80212: PUSH
80213: FOR_IN
80214: IFFALSE 80380
// begin if GetClass ( j ) <> 3 then
80216: LD_VAR 0 3
80220: PPUSH
80221: CALL_OW 257
80225: PUSH
80226: LD_INT 3
80228: NONEQUAL
80229: IFFALSE 80270
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] diff j ) ;
80231: LD_ADDR_EXP 48
80235: PUSH
80236: LD_EXP 48
80240: PPUSH
80241: LD_VAR 0 2
80245: PPUSH
80246: LD_EXP 48
80250: PUSH
80251: LD_VAR 0 2
80255: ARRAY
80256: PUSH
80257: LD_VAR 0 3
80261: DIFF
80262: PPUSH
80263: CALL_OW 1
80267: ST_TO_ADDR
// continue ;
80268: GO 80213
// end ; if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
80270: LD_VAR 0 3
80274: PPUSH
80275: CALL_OW 311
80279: NOT
80280: PUSH
80281: LD_VAR 0 3
80285: PUSH
80286: LD_EXP 39
80290: PUSH
80291: LD_VAR 0 2
80295: ARRAY
80296: PUSH
80297: LD_INT 1
80299: ARRAY
80300: IN
80301: NOT
80302: AND
80303: PUSH
80304: LD_VAR 0 3
80308: PUSH
80309: LD_EXP 39
80313: PUSH
80314: LD_VAR 0 2
80318: ARRAY
80319: PUSH
80320: LD_INT 2
80322: ARRAY
80323: IN
80324: NOT
80325: AND
80326: IFFALSE 80378
// begin if IsInUnit ( j ) then
80328: LD_VAR 0 3
80332: PPUSH
80333: CALL_OW 310
80337: IFFALSE 80348
// ComExitBuilding ( j ) ;
80339: LD_VAR 0 3
80343: PPUSH
80344: CALL_OW 122
// if not HasTask ( j ) then
80348: LD_VAR 0 3
80352: PPUSH
80353: CALL_OW 314
80357: NOT
80358: IFFALSE 80378
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
80360: LD_VAR 0 3
80364: PPUSH
80365: LD_VAR 0 7
80369: PUSH
80370: LD_INT 1
80372: ARRAY
80373: PPUSH
80374: CALL_OW 189
// end ; end ;
80378: GO 80213
80380: POP
80381: POP
// end ;
80382: GO 79689
80384: POP
80385: POP
// end ;
80386: LD_VAR 0 1
80390: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
80391: LD_INT 0
80393: PPUSH
80394: PPUSH
80395: PPUSH
80396: PPUSH
80397: PPUSH
80398: PPUSH
80399: PPUSH
80400: PPUSH
80401: PPUSH
80402: PPUSH
80403: PPUSH
// if not mc_bases then
80404: LD_EXP 36
80408: NOT
80409: IFFALSE 80413
// exit ;
80411: GO 81215
// for i = 1 to mc_bases do
80413: LD_ADDR_VAR 0 2
80417: PUSH
80418: DOUBLE
80419: LD_INT 1
80421: DEC
80422: ST_TO_ADDR
80423: LD_EXP 36
80427: PUSH
80428: FOR_TO
80429: IFFALSE 81213
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
80431: LD_EXP 64
80435: PUSH
80436: LD_VAR 0 2
80440: ARRAY
80441: NOT
80442: PUSH
80443: LD_EXP 39
80447: PUSH
80448: LD_VAR 0 2
80452: ARRAY
80453: PUSH
80454: LD_INT 1
80456: ARRAY
80457: OR
80458: PUSH
80459: LD_EXP 39
80463: PUSH
80464: LD_VAR 0 2
80468: ARRAY
80469: PUSH
80470: LD_INT 2
80472: ARRAY
80473: OR
80474: PUSH
80475: LD_EXP 62
80479: PUSH
80480: LD_VAR 0 2
80484: ARRAY
80485: PPUSH
80486: LD_INT 1
80488: PPUSH
80489: CALL_OW 325
80493: NOT
80494: OR
80495: PUSH
80496: LD_EXP 59
80500: PUSH
80501: LD_VAR 0 2
80505: ARRAY
80506: OR
80507: IFFALSE 80511
// continue ;
80509: GO 80428
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
80511: LD_ADDR_VAR 0 8
80515: PUSH
80516: LD_EXP 36
80520: PUSH
80521: LD_VAR 0 2
80525: ARRAY
80526: PPUSH
80527: LD_INT 25
80529: PUSH
80530: LD_INT 4
80532: PUSH
80533: EMPTY
80534: LIST
80535: LIST
80536: PUSH
80537: LD_INT 50
80539: PUSH
80540: EMPTY
80541: LIST
80542: PUSH
80543: LD_INT 3
80545: PUSH
80546: LD_INT 60
80548: PUSH
80549: EMPTY
80550: LIST
80551: PUSH
80552: EMPTY
80553: LIST
80554: LIST
80555: PUSH
80556: EMPTY
80557: LIST
80558: LIST
80559: LIST
80560: PPUSH
80561: CALL_OW 72
80565: PUSH
80566: LD_EXP 40
80570: PUSH
80571: LD_VAR 0 2
80575: ARRAY
80576: DIFF
80577: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
80578: LD_ADDR_VAR 0 9
80582: PUSH
80583: LD_EXP 36
80587: PUSH
80588: LD_VAR 0 2
80592: ARRAY
80593: PPUSH
80594: LD_INT 2
80596: PUSH
80597: LD_INT 30
80599: PUSH
80600: LD_INT 0
80602: PUSH
80603: EMPTY
80604: LIST
80605: LIST
80606: PUSH
80607: LD_INT 30
80609: PUSH
80610: LD_INT 1
80612: PUSH
80613: EMPTY
80614: LIST
80615: LIST
80616: PUSH
80617: EMPTY
80618: LIST
80619: LIST
80620: LIST
80621: PPUSH
80622: CALL_OW 72
80626: ST_TO_ADDR
// if not tmp or not dep then
80627: LD_VAR 0 8
80631: NOT
80632: PUSH
80633: LD_VAR 0 9
80637: NOT
80638: OR
80639: IFFALSE 80643
// continue ;
80641: GO 80428
// side := GetSide ( tmp [ 1 ] ) ;
80643: LD_ADDR_VAR 0 11
80647: PUSH
80648: LD_VAR 0 8
80652: PUSH
80653: LD_INT 1
80655: ARRAY
80656: PPUSH
80657: CALL_OW 255
80661: ST_TO_ADDR
// dep := dep [ 1 ] ;
80662: LD_ADDR_VAR 0 9
80666: PUSH
80667: LD_VAR 0 9
80671: PUSH
80672: LD_INT 1
80674: ARRAY
80675: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
80676: LD_ADDR_VAR 0 7
80680: PUSH
80681: LD_EXP 64
80685: PUSH
80686: LD_VAR 0 2
80690: ARRAY
80691: PPUSH
80692: LD_INT 22
80694: PUSH
80695: LD_INT 0
80697: PUSH
80698: EMPTY
80699: LIST
80700: LIST
80701: PUSH
80702: LD_INT 25
80704: PUSH
80705: LD_INT 12
80707: PUSH
80708: EMPTY
80709: LIST
80710: LIST
80711: PUSH
80712: EMPTY
80713: LIST
80714: LIST
80715: PPUSH
80716: CALL_OW 70
80720: PUSH
80721: LD_INT 22
80723: PUSH
80724: LD_INT 0
80726: PUSH
80727: EMPTY
80728: LIST
80729: LIST
80730: PUSH
80731: LD_INT 25
80733: PUSH
80734: LD_INT 12
80736: PUSH
80737: EMPTY
80738: LIST
80739: LIST
80740: PUSH
80741: LD_INT 91
80743: PUSH
80744: LD_VAR 0 9
80748: PUSH
80749: LD_INT 20
80751: PUSH
80752: EMPTY
80753: LIST
80754: LIST
80755: LIST
80756: PUSH
80757: EMPTY
80758: LIST
80759: LIST
80760: LIST
80761: PPUSH
80762: CALL_OW 69
80766: UNION
80767: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
80768: LD_ADDR_VAR 0 10
80772: PUSH
80773: LD_EXP 64
80777: PUSH
80778: LD_VAR 0 2
80782: ARRAY
80783: PPUSH
80784: LD_INT 81
80786: PUSH
80787: LD_VAR 0 11
80791: PUSH
80792: EMPTY
80793: LIST
80794: LIST
80795: PPUSH
80796: CALL_OW 70
80800: ST_TO_ADDR
// if not apes or danger_at_area then
80801: LD_VAR 0 7
80805: NOT
80806: PUSH
80807: LD_VAR 0 10
80811: OR
80812: IFFALSE 80862
// begin if mc_taming [ i ] then
80814: LD_EXP 67
80818: PUSH
80819: LD_VAR 0 2
80823: ARRAY
80824: IFFALSE 80860
// begin MC_Reset ( i , 121 ) ;
80826: LD_VAR 0 2
80830: PPUSH
80831: LD_INT 121
80833: PPUSH
80834: CALL 66497 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
80838: LD_ADDR_EXP 67
80842: PUSH
80843: LD_EXP 67
80847: PPUSH
80848: LD_VAR 0 2
80852: PPUSH
80853: EMPTY
80854: PPUSH
80855: CALL_OW 1
80859: ST_TO_ADDR
// end ; continue ;
80860: GO 80428
// end ; for j in tmp do
80862: LD_ADDR_VAR 0 3
80866: PUSH
80867: LD_VAR 0 8
80871: PUSH
80872: FOR_IN
80873: IFFALSE 81209
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
80875: LD_VAR 0 3
80879: PUSH
80880: LD_EXP 67
80884: PUSH
80885: LD_VAR 0 2
80889: ARRAY
80890: IN
80891: NOT
80892: PUSH
80893: LD_EXP 67
80897: PUSH
80898: LD_VAR 0 2
80902: ARRAY
80903: PUSH
80904: LD_INT 3
80906: LESS
80907: AND
80908: IFFALSE 80966
// begin SetTag ( j , 121 ) ;
80910: LD_VAR 0 3
80914: PPUSH
80915: LD_INT 121
80917: PPUSH
80918: CALL_OW 109
// mc_taming := ReplaceIn ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
80922: LD_ADDR_EXP 67
80926: PUSH
80927: LD_EXP 67
80931: PPUSH
80932: LD_VAR 0 2
80936: PUSH
80937: LD_EXP 67
80941: PUSH
80942: LD_VAR 0 2
80946: ARRAY
80947: PUSH
80948: LD_INT 1
80950: PLUS
80951: PUSH
80952: EMPTY
80953: LIST
80954: LIST
80955: PPUSH
80956: LD_VAR 0 3
80960: PPUSH
80961: CALL 26559 0 3
80965: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
80966: LD_VAR 0 3
80970: PUSH
80971: LD_EXP 67
80975: PUSH
80976: LD_VAR 0 2
80980: ARRAY
80981: IN
80982: IFFALSE 81207
// begin if GetClass ( j ) <> 4 then
80984: LD_VAR 0 3
80988: PPUSH
80989: CALL_OW 257
80993: PUSH
80994: LD_INT 4
80996: NONEQUAL
80997: IFFALSE 81050
// begin mc_taming := Replace ( mc_taming , i , mc_taming [ i ] diff j ) ;
80999: LD_ADDR_EXP 67
81003: PUSH
81004: LD_EXP 67
81008: PPUSH
81009: LD_VAR 0 2
81013: PPUSH
81014: LD_EXP 67
81018: PUSH
81019: LD_VAR 0 2
81023: ARRAY
81024: PUSH
81025: LD_VAR 0 3
81029: DIFF
81030: PPUSH
81031: CALL_OW 1
81035: ST_TO_ADDR
// SetTag ( j , 0 ) ;
81036: LD_VAR 0 3
81040: PPUSH
81041: LD_INT 0
81043: PPUSH
81044: CALL_OW 109
// continue ;
81048: GO 80872
// end ; if IsInUnit ( j ) then
81050: LD_VAR 0 3
81054: PPUSH
81055: CALL_OW 310
81059: IFFALSE 81070
// ComExitBuilding ( j ) ;
81061: LD_VAR 0 3
81065: PPUSH
81066: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
81070: LD_ADDR_VAR 0 6
81074: PUSH
81075: LD_VAR 0 7
81079: PPUSH
81080: LD_VAR 0 3
81084: PPUSH
81085: CALL_OW 74
81089: ST_TO_ADDR
// if not ape then
81090: LD_VAR 0 6
81094: NOT
81095: IFFALSE 81099
// break ;
81097: GO 81209
// x := GetX ( ape ) ;
81099: LD_ADDR_VAR 0 4
81103: PUSH
81104: LD_VAR 0 6
81108: PPUSH
81109: CALL_OW 250
81113: ST_TO_ADDR
// y := GetY ( ape ) ;
81114: LD_ADDR_VAR 0 5
81118: PUSH
81119: LD_VAR 0 6
81123: PPUSH
81124: CALL_OW 251
81128: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
81129: LD_VAR 0 4
81133: PPUSH
81134: LD_VAR 0 5
81138: PPUSH
81139: CALL_OW 488
81143: NOT
81144: PUSH
81145: LD_VAR 0 11
81149: PPUSH
81150: LD_VAR 0 4
81154: PPUSH
81155: LD_VAR 0 5
81159: PPUSH
81160: LD_INT 20
81162: PPUSH
81163: CALL 27455 0 4
81167: PUSH
81168: LD_INT 4
81170: ARRAY
81171: OR
81172: IFFALSE 81176
// break ;
81174: GO 81209
// if not HasTask ( j ) then
81176: LD_VAR 0 3
81180: PPUSH
81181: CALL_OW 314
81185: NOT
81186: IFFALSE 81207
// ComTameXY ( j , x , y ) ;
81188: LD_VAR 0 3
81192: PPUSH
81193: LD_VAR 0 4
81197: PPUSH
81198: LD_VAR 0 5
81202: PPUSH
81203: CALL_OW 131
// end ; end ;
81207: GO 80872
81209: POP
81210: POP
// end ;
81211: GO 80428
81213: POP
81214: POP
// end ;
81215: LD_VAR 0 1
81219: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
81220: LD_INT 0
81222: PPUSH
81223: PPUSH
81224: PPUSH
81225: PPUSH
81226: PPUSH
81227: PPUSH
81228: PPUSH
81229: PPUSH
// if not mc_bases then
81230: LD_EXP 36
81234: NOT
81235: IFFALSE 81239
// exit ;
81237: GO 81865
// for i = 1 to mc_bases do
81239: LD_ADDR_VAR 0 2
81243: PUSH
81244: DOUBLE
81245: LD_INT 1
81247: DEC
81248: ST_TO_ADDR
81249: LD_EXP 36
81253: PUSH
81254: FOR_TO
81255: IFFALSE 81863
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
81257: LD_EXP 65
81261: PUSH
81262: LD_VAR 0 2
81266: ARRAY
81267: NOT
81268: PUSH
81269: LD_EXP 65
81273: PUSH
81274: LD_VAR 0 2
81278: ARRAY
81279: PPUSH
81280: LD_INT 25
81282: PUSH
81283: LD_INT 12
81285: PUSH
81286: EMPTY
81287: LIST
81288: LIST
81289: PPUSH
81290: CALL_OW 72
81294: NOT
81295: OR
81296: IFFALSE 81300
// continue ;
81298: GO 81254
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
81300: LD_ADDR_VAR 0 5
81304: PUSH
81305: LD_EXP 65
81309: PUSH
81310: LD_VAR 0 2
81314: ARRAY
81315: PUSH
81316: LD_INT 1
81318: ARRAY
81319: PPUSH
81320: CALL_OW 255
81324: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
81325: LD_VAR 0 5
81329: PPUSH
81330: LD_INT 2
81332: PPUSH
81333: CALL_OW 325
81337: IFFALSE 81590
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
81339: LD_ADDR_VAR 0 4
81343: PUSH
81344: LD_EXP 65
81348: PUSH
81349: LD_VAR 0 2
81353: ARRAY
81354: PPUSH
81355: LD_INT 25
81357: PUSH
81358: LD_INT 16
81360: PUSH
81361: EMPTY
81362: LIST
81363: LIST
81364: PPUSH
81365: CALL_OW 72
81369: ST_TO_ADDR
// if tmp < 6 then
81370: LD_VAR 0 4
81374: PUSH
81375: LD_INT 6
81377: LESS
81378: IFFALSE 81590
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
81380: LD_ADDR_VAR 0 6
81384: PUSH
81385: LD_EXP 36
81389: PUSH
81390: LD_VAR 0 2
81394: ARRAY
81395: PPUSH
81396: LD_INT 2
81398: PUSH
81399: LD_INT 30
81401: PUSH
81402: LD_INT 0
81404: PUSH
81405: EMPTY
81406: LIST
81407: LIST
81408: PUSH
81409: LD_INT 30
81411: PUSH
81412: LD_INT 1
81414: PUSH
81415: EMPTY
81416: LIST
81417: LIST
81418: PUSH
81419: EMPTY
81420: LIST
81421: LIST
81422: LIST
81423: PPUSH
81424: CALL_OW 72
81428: ST_TO_ADDR
// if depot then
81429: LD_VAR 0 6
81433: IFFALSE 81590
// begin selected := 0 ;
81435: LD_ADDR_VAR 0 7
81439: PUSH
81440: LD_INT 0
81442: ST_TO_ADDR
// for j in depot do
81443: LD_ADDR_VAR 0 3
81447: PUSH
81448: LD_VAR 0 6
81452: PUSH
81453: FOR_IN
81454: IFFALSE 81485
// begin if UnitsInside ( j ) < 6 then
81456: LD_VAR 0 3
81460: PPUSH
81461: CALL_OW 313
81465: PUSH
81466: LD_INT 6
81468: LESS
81469: IFFALSE 81483
// begin selected := j ;
81471: LD_ADDR_VAR 0 7
81475: PUSH
81476: LD_VAR 0 3
81480: ST_TO_ADDR
// break ;
81481: GO 81485
// end ; end ;
81483: GO 81453
81485: POP
81486: POP
// if selected then
81487: LD_VAR 0 7
81491: IFFALSE 81590
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
81493: LD_ADDR_VAR 0 3
81497: PUSH
81498: LD_EXP 65
81502: PUSH
81503: LD_VAR 0 2
81507: ARRAY
81508: PPUSH
81509: LD_INT 25
81511: PUSH
81512: LD_INT 12
81514: PUSH
81515: EMPTY
81516: LIST
81517: LIST
81518: PPUSH
81519: CALL_OW 72
81523: PUSH
81524: FOR_IN
81525: IFFALSE 81588
// if not HasTask ( j ) then
81527: LD_VAR 0 3
81531: PPUSH
81532: CALL_OW 314
81536: NOT
81537: IFFALSE 81586
// begin if not IsInUnit ( j ) then
81539: LD_VAR 0 3
81543: PPUSH
81544: CALL_OW 310
81548: NOT
81549: IFFALSE 81565
// ComEnterUnit ( j , selected ) ;
81551: LD_VAR 0 3
81555: PPUSH
81556: LD_VAR 0 7
81560: PPUSH
81561: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
81565: LD_VAR 0 3
81569: PPUSH
81570: LD_INT 16
81572: PPUSH
81573: CALL_OW 183
// AddComExitBuilding ( j ) ;
81577: LD_VAR 0 3
81581: PPUSH
81582: CALL_OW 182
// end ;
81586: GO 81524
81588: POP
81589: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
81590: LD_VAR 0 5
81594: PPUSH
81595: LD_INT 11
81597: PPUSH
81598: CALL_OW 325
81602: IFFALSE 81861
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
81604: LD_ADDR_VAR 0 4
81608: PUSH
81609: LD_EXP 65
81613: PUSH
81614: LD_VAR 0 2
81618: ARRAY
81619: PPUSH
81620: LD_INT 25
81622: PUSH
81623: LD_INT 16
81625: PUSH
81626: EMPTY
81627: LIST
81628: LIST
81629: PPUSH
81630: CALL_OW 72
81634: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
81635: LD_VAR 0 4
81639: PUSH
81640: LD_INT 6
81642: GREATEREQUAL
81643: PUSH
81644: LD_VAR 0 5
81648: PPUSH
81649: LD_INT 2
81651: PPUSH
81652: CALL_OW 325
81656: NOT
81657: OR
81658: IFFALSE 81861
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
81660: LD_ADDR_VAR 0 8
81664: PUSH
81665: LD_EXP 36
81669: PUSH
81670: LD_VAR 0 2
81674: ARRAY
81675: PPUSH
81676: LD_INT 2
81678: PUSH
81679: LD_INT 30
81681: PUSH
81682: LD_INT 4
81684: PUSH
81685: EMPTY
81686: LIST
81687: LIST
81688: PUSH
81689: LD_INT 30
81691: PUSH
81692: LD_INT 5
81694: PUSH
81695: EMPTY
81696: LIST
81697: LIST
81698: PUSH
81699: EMPTY
81700: LIST
81701: LIST
81702: LIST
81703: PPUSH
81704: CALL_OW 72
81708: ST_TO_ADDR
// if barracks then
81709: LD_VAR 0 8
81713: IFFALSE 81861
// begin selected := 0 ;
81715: LD_ADDR_VAR 0 7
81719: PUSH
81720: LD_INT 0
81722: ST_TO_ADDR
// for j in barracks do
81723: LD_ADDR_VAR 0 3
81727: PUSH
81728: LD_VAR 0 8
81732: PUSH
81733: FOR_IN
81734: IFFALSE 81765
// begin if UnitsInside ( j ) < 6 then
81736: LD_VAR 0 3
81740: PPUSH
81741: CALL_OW 313
81745: PUSH
81746: LD_INT 6
81748: LESS
81749: IFFALSE 81763
// begin selected := j ;
81751: LD_ADDR_VAR 0 7
81755: PUSH
81756: LD_VAR 0 3
81760: ST_TO_ADDR
// break ;
81761: GO 81765
// end ; end ;
81763: GO 81733
81765: POP
81766: POP
// if selected then
81767: LD_VAR 0 7
81771: IFFALSE 81861
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
81773: LD_ADDR_VAR 0 3
81777: PUSH
81778: LD_EXP 65
81782: PUSH
81783: LD_VAR 0 2
81787: ARRAY
81788: PPUSH
81789: LD_INT 25
81791: PUSH
81792: LD_INT 12
81794: PUSH
81795: EMPTY
81796: LIST
81797: LIST
81798: PPUSH
81799: CALL_OW 72
81803: PUSH
81804: FOR_IN
81805: IFFALSE 81859
// if not IsInUnit ( j ) and not HasTask ( j ) then
81807: LD_VAR 0 3
81811: PPUSH
81812: CALL_OW 310
81816: NOT
81817: PUSH
81818: LD_VAR 0 3
81822: PPUSH
81823: CALL_OW 314
81827: NOT
81828: AND
81829: IFFALSE 81857
// begin ComEnterUnit ( j , selected ) ;
81831: LD_VAR 0 3
81835: PPUSH
81836: LD_VAR 0 7
81840: PPUSH
81841: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
81845: LD_VAR 0 3
81849: PPUSH
81850: LD_INT 15
81852: PPUSH
81853: CALL_OW 183
// end ;
81857: GO 81804
81859: POP
81860: POP
// end ; end ; end ; end ; end ;
81861: GO 81254
81863: POP
81864: POP
// end ;
81865: LD_VAR 0 1
81869: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
81870: LD_INT 0
81872: PPUSH
81873: PPUSH
81874: PPUSH
81875: PPUSH
// if not mc_bases then
81876: LD_EXP 36
81880: NOT
81881: IFFALSE 81885
// exit ;
81883: GO 82063
// for i = 1 to mc_bases do
81885: LD_ADDR_VAR 0 2
81889: PUSH
81890: DOUBLE
81891: LD_INT 1
81893: DEC
81894: ST_TO_ADDR
81895: LD_EXP 36
81899: PUSH
81900: FOR_TO
81901: IFFALSE 82061
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
81903: LD_ADDR_VAR 0 4
81907: PUSH
81908: LD_EXP 36
81912: PUSH
81913: LD_VAR 0 2
81917: ARRAY
81918: PPUSH
81919: LD_INT 25
81921: PUSH
81922: LD_INT 9
81924: PUSH
81925: EMPTY
81926: LIST
81927: LIST
81928: PPUSH
81929: CALL_OW 72
81933: ST_TO_ADDR
// if not tmp then
81934: LD_VAR 0 4
81938: NOT
81939: IFFALSE 81943
// continue ;
81941: GO 81900
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
81943: LD_EXP 62
81947: PUSH
81948: LD_VAR 0 2
81952: ARRAY
81953: PPUSH
81954: LD_INT 29
81956: PPUSH
81957: CALL_OW 325
81961: NOT
81962: PUSH
81963: LD_EXP 62
81967: PUSH
81968: LD_VAR 0 2
81972: ARRAY
81973: PPUSH
81974: LD_INT 28
81976: PPUSH
81977: CALL_OW 325
81981: NOT
81982: AND
81983: IFFALSE 81987
// continue ;
81985: GO 81900
// for j in tmp do
81987: LD_ADDR_VAR 0 3
81991: PUSH
81992: LD_VAR 0 4
81996: PUSH
81997: FOR_IN
81998: IFFALSE 82057
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
82000: LD_VAR 0 3
82004: PUSH
82005: LD_EXP 39
82009: PUSH
82010: LD_VAR 0 2
82014: ARRAY
82015: PUSH
82016: LD_INT 1
82018: ARRAY
82019: IN
82020: NOT
82021: PUSH
82022: LD_VAR 0 3
82026: PUSH
82027: LD_EXP 39
82031: PUSH
82032: LD_VAR 0 2
82036: ARRAY
82037: PUSH
82038: LD_INT 2
82040: ARRAY
82041: IN
82042: NOT
82043: AND
82044: IFFALSE 82055
// ComSpaceTimeShoot ( j ) ;
82046: LD_VAR 0 3
82050: PPUSH
82051: CALL 20619 0 1
82055: GO 81997
82057: POP
82058: POP
// end ;
82059: GO 81900
82061: POP
82062: POP
// end ;
82063: LD_VAR 0 1
82067: RET
// export function MC_TeleportExit ( ) ; var i , j , x , y , save_point , tmp , teleports , sci ; begin
82068: LD_INT 0
82070: PPUSH
82071: PPUSH
82072: PPUSH
82073: PPUSH
82074: PPUSH
82075: PPUSH
82076: PPUSH
82077: PPUSH
82078: PPUSH
// if not mc_bases then
82079: LD_EXP 36
82083: NOT
82084: IFFALSE 82088
// exit ;
82086: GO 82710
// for i = 1 to mc_bases do
82088: LD_ADDR_VAR 0 2
82092: PUSH
82093: DOUBLE
82094: LD_INT 1
82096: DEC
82097: ST_TO_ADDR
82098: LD_EXP 36
82102: PUSH
82103: FOR_TO
82104: IFFALSE 82708
// begin if not mc_teleport_exit [ i ] or GetTech ( tech_targTeleport , mc_sides [ i ] ) <> state_researched then
82106: LD_EXP 71
82110: PUSH
82111: LD_VAR 0 2
82115: ARRAY
82116: NOT
82117: PUSH
82118: LD_INT 38
82120: PPUSH
82121: LD_EXP 62
82125: PUSH
82126: LD_VAR 0 2
82130: ARRAY
82131: PPUSH
82132: CALL_OW 321
82136: PUSH
82137: LD_INT 2
82139: NONEQUAL
82140: OR
82141: IFFALSE 82145
// continue ;
82143: GO 82103
// teleports := UnitFilter ( mc_bases [ i ] , [ f_btype , b_teleport ] ) ;
82145: LD_ADDR_VAR 0 8
82149: PUSH
82150: LD_EXP 36
82154: PUSH
82155: LD_VAR 0 2
82159: ARRAY
82160: PPUSH
82161: LD_INT 30
82163: PUSH
82164: LD_INT 34
82166: PUSH
82167: EMPTY
82168: LIST
82169: LIST
82170: PPUSH
82171: CALL_OW 72
82175: ST_TO_ADDR
// sci := FilterByTag ( UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) , 0 ) ;
82176: LD_ADDR_VAR 0 9
82180: PUSH
82181: LD_EXP 36
82185: PUSH
82186: LD_VAR 0 2
82190: ARRAY
82191: PPUSH
82192: LD_INT 25
82194: PUSH
82195: LD_INT 4
82197: PUSH
82198: EMPTY
82199: LIST
82200: LIST
82201: PPUSH
82202: CALL_OW 72
82206: PPUSH
82207: LD_INT 0
82209: PPUSH
82210: CALL 59795 0 2
82214: ST_TO_ADDR
// if not sci or not teleports or FilterByTag ( mc_bases [ i ] , 124 ) then
82215: LD_VAR 0 9
82219: NOT
82220: PUSH
82221: LD_VAR 0 8
82225: NOT
82226: OR
82227: PUSH
82228: LD_EXP 36
82232: PUSH
82233: LD_VAR 0 2
82237: ARRAY
82238: PPUSH
82239: LD_INT 124
82241: PPUSH
82242: CALL 59795 0 2
82246: OR
82247: IFFALSE 82251
// continue ;
82249: GO 82103
// if mc_teleport_exit_set [ i ] < mc_teleport_exit [ i ] and mc_teleport_exit_set [ i ] < teleports then
82251: LD_EXP 72
82255: PUSH
82256: LD_VAR 0 2
82260: ARRAY
82261: PUSH
82262: LD_EXP 71
82266: PUSH
82267: LD_VAR 0 2
82271: ARRAY
82272: LESS
82273: PUSH
82274: LD_EXP 72
82278: PUSH
82279: LD_VAR 0 2
82283: ARRAY
82284: PUSH
82285: LD_VAR 0 8
82289: LESS
82290: AND
82291: IFFALSE 82706
// begin tmp := sci [ 1 ] ;
82293: LD_ADDR_VAR 0 7
82297: PUSH
82298: LD_VAR 0 9
82302: PUSH
82303: LD_INT 1
82305: ARRAY
82306: ST_TO_ADDR
// SetTag ( tmp , 124 ) ;
82307: LD_VAR 0 7
82311: PPUSH
82312: LD_INT 124
82314: PPUSH
82315: CALL_OW 109
// for j = mc_teleport_exit [ i ] downto mc_teleport_exit [ i ] do
82319: LD_ADDR_VAR 0 3
82323: PUSH
82324: DOUBLE
82325: LD_EXP 71
82329: PUSH
82330: LD_VAR 0 2
82334: ARRAY
82335: INC
82336: ST_TO_ADDR
82337: LD_EXP 71
82341: PUSH
82342: LD_VAR 0 2
82346: ARRAY
82347: PUSH
82348: FOR_DOWNTO
82349: IFFALSE 82692
// begin if IsInUnit ( tmp ) then
82351: LD_VAR 0 7
82355: PPUSH
82356: CALL_OW 310
82360: IFFALSE 82371
// ComExitBuilding ( tmp ) ;
82362: LD_VAR 0 7
82366: PPUSH
82367: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
82371: LD_INT 35
82373: PPUSH
82374: CALL_OW 67
// until not IsInUnit ( tmp ) and not HasTask ( tmp ) ;
82378: LD_VAR 0 7
82382: PPUSH
82383: CALL_OW 310
82387: NOT
82388: PUSH
82389: LD_VAR 0 7
82393: PPUSH
82394: CALL_OW 314
82398: NOT
82399: AND
82400: IFFALSE 82371
// save_point := [ GetX ( tmp ) , GetY ( tmp ) ] ;
82402: LD_ADDR_VAR 0 6
82406: PUSH
82407: LD_VAR 0 7
82411: PPUSH
82412: CALL_OW 250
82416: PUSH
82417: LD_VAR 0 7
82421: PPUSH
82422: CALL_OW 251
82426: PUSH
82427: EMPTY
82428: LIST
82429: LIST
82430: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
82431: LD_INT 35
82433: PPUSH
82434: CALL_OW 67
// x := mc_teleport_exit [ i ] [ j ] [ 1 ] ;
82438: LD_ADDR_VAR 0 4
82442: PUSH
82443: LD_EXP 71
82447: PUSH
82448: LD_VAR 0 2
82452: ARRAY
82453: PUSH
82454: LD_VAR 0 3
82458: ARRAY
82459: PUSH
82460: LD_INT 1
82462: ARRAY
82463: ST_TO_ADDR
// y := mc_teleport_exit [ i ] [ j ] [ 2 ] ;
82464: LD_ADDR_VAR 0 5
82468: PUSH
82469: LD_EXP 71
82473: PUSH
82474: LD_VAR 0 2
82478: ARRAY
82479: PUSH
82480: LD_VAR 0 3
82484: ARRAY
82485: PUSH
82486: LD_INT 2
82488: ARRAY
82489: ST_TO_ADDR
// if DangerAtRange ( tmp , 10 ) [ 4 ] then
82490: LD_VAR 0 7
82494: PPUSH
82495: LD_INT 10
82497: PPUSH
82498: CALL 29152 0 2
82502: PUSH
82503: LD_INT 4
82505: ARRAY
82506: IFFALSE 82544
// begin ComMoveXY ( tmp , save_point [ 1 ] , save_point [ 2 ] ) ;
82508: LD_VAR 0 7
82512: PPUSH
82513: LD_VAR 0 6
82517: PUSH
82518: LD_INT 1
82520: ARRAY
82521: PPUSH
82522: LD_VAR 0 6
82526: PUSH
82527: LD_INT 2
82529: ARRAY
82530: PPUSH
82531: CALL_OW 111
// wait ( 0 0$10 ) ;
82535: LD_INT 350
82537: PPUSH
82538: CALL_OW 67
// end else
82542: GO 82570
// begin ComMoveXY ( tmp , x , y ) ;
82544: LD_VAR 0 7
82548: PPUSH
82549: LD_VAR 0 4
82553: PPUSH
82554: LD_VAR 0 5
82558: PPUSH
82559: CALL_OW 111
// wait ( 0 0$3 ) ;
82563: LD_INT 105
82565: PPUSH
82566: CALL_OW 67
// end ; until IsAt ( tmp , x , y ) ;
82570: LD_VAR 0 7
82574: PPUSH
82575: LD_VAR 0 4
82579: PPUSH
82580: LD_VAR 0 5
82584: PPUSH
82585: CALL_OW 307
82589: IFFALSE 82431
// ComTeleportExit ( tmp , x , y , teleports [ j ] ) ;
82591: LD_VAR 0 7
82595: PPUSH
82596: LD_VAR 0 4
82600: PPUSH
82601: LD_VAR 0 5
82605: PPUSH
82606: LD_VAR 0 8
82610: PUSH
82611: LD_VAR 0 3
82615: ARRAY
82616: PPUSH
82617: CALL_OW 156
// repeat wait ( 0 0$1 ) ;
82621: LD_INT 35
82623: PPUSH
82624: CALL_OW 67
// until not HasTask ( tmp ) ;
82628: LD_VAR 0 7
82632: PPUSH
82633: CALL_OW 314
82637: NOT
82638: IFFALSE 82621
// mc_teleport_exit_set := ReplaceIn ( mc_teleport_exit_set , [ i , mc_teleport_exit_set [ i ] + 1 ] , teleports [ j ] ) ;
82640: LD_ADDR_EXP 72
82644: PUSH
82645: LD_EXP 72
82649: PPUSH
82650: LD_VAR 0 2
82654: PUSH
82655: LD_EXP 72
82659: PUSH
82660: LD_VAR 0 2
82664: ARRAY
82665: PUSH
82666: LD_INT 1
82668: PLUS
82669: PUSH
82670: EMPTY
82671: LIST
82672: LIST
82673: PPUSH
82674: LD_VAR 0 8
82678: PUSH
82679: LD_VAR 0 3
82683: ARRAY
82684: PPUSH
82685: CALL 26559 0 3
82689: ST_TO_ADDR
// end ;
82690: GO 82348
82692: POP
82693: POP
// MC_Reset ( i , 124 ) ;
82694: LD_VAR 0 2
82698: PPUSH
82699: LD_INT 124
82701: PPUSH
82702: CALL 66497 0 2
// end ; end ;
82706: GO 82103
82708: POP
82709: POP
// end ;
82710: LD_VAR 0 1
82714: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
82715: LD_INT 0
82717: PPUSH
82718: PPUSH
82719: PPUSH
// if not mc_bases then
82720: LD_EXP 36
82724: NOT
82725: IFFALSE 82729
// exit ;
82727: GO 83335
// for i = 1 to mc_bases do
82729: LD_ADDR_VAR 0 2
82733: PUSH
82734: DOUBLE
82735: LD_INT 1
82737: DEC
82738: ST_TO_ADDR
82739: LD_EXP 36
82743: PUSH
82744: FOR_TO
82745: IFFALSE 83333
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
82747: LD_ADDR_VAR 0 3
82751: PUSH
82752: LD_EXP 36
82756: PUSH
82757: LD_VAR 0 2
82761: ARRAY
82762: PPUSH
82763: LD_INT 25
82765: PUSH
82766: LD_INT 4
82768: PUSH
82769: EMPTY
82770: LIST
82771: LIST
82772: PPUSH
82773: CALL_OW 72
82777: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
82778: LD_VAR 0 3
82782: NOT
82783: PUSH
82784: LD_EXP 73
82788: PUSH
82789: LD_VAR 0 2
82793: ARRAY
82794: NOT
82795: OR
82796: PUSH
82797: LD_EXP 36
82801: PUSH
82802: LD_VAR 0 2
82806: ARRAY
82807: PPUSH
82808: LD_INT 2
82810: PUSH
82811: LD_INT 30
82813: PUSH
82814: LD_INT 0
82816: PUSH
82817: EMPTY
82818: LIST
82819: LIST
82820: PUSH
82821: LD_INT 30
82823: PUSH
82824: LD_INT 1
82826: PUSH
82827: EMPTY
82828: LIST
82829: LIST
82830: PUSH
82831: EMPTY
82832: LIST
82833: LIST
82834: LIST
82835: PPUSH
82836: CALL_OW 72
82840: NOT
82841: OR
82842: IFFALSE 82892
// begin if mc_deposits_finder [ i ] then
82844: LD_EXP 74
82848: PUSH
82849: LD_VAR 0 2
82853: ARRAY
82854: IFFALSE 82890
// begin MC_Reset ( i , 125 ) ;
82856: LD_VAR 0 2
82860: PPUSH
82861: LD_INT 125
82863: PPUSH
82864: CALL 66497 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
82868: LD_ADDR_EXP 74
82872: PUSH
82873: LD_EXP 74
82877: PPUSH
82878: LD_VAR 0 2
82882: PPUSH
82883: EMPTY
82884: PPUSH
82885: CALL_OW 1
82889: ST_TO_ADDR
// end ; continue ;
82890: GO 82744
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
82892: LD_EXP 73
82896: PUSH
82897: LD_VAR 0 2
82901: ARRAY
82902: PUSH
82903: LD_INT 1
82905: ARRAY
82906: PUSH
82907: LD_INT 3
82909: ARRAY
82910: PUSH
82911: LD_INT 1
82913: EQUAL
82914: PUSH
82915: LD_INT 20
82917: PPUSH
82918: LD_EXP 62
82922: PUSH
82923: LD_VAR 0 2
82927: ARRAY
82928: PPUSH
82929: CALL_OW 321
82933: PUSH
82934: LD_INT 2
82936: NONEQUAL
82937: AND
82938: IFFALSE 82988
// begin if mc_deposits_finder [ i ] then
82940: LD_EXP 74
82944: PUSH
82945: LD_VAR 0 2
82949: ARRAY
82950: IFFALSE 82986
// begin MC_Reset ( i , 125 ) ;
82952: LD_VAR 0 2
82956: PPUSH
82957: LD_INT 125
82959: PPUSH
82960: CALL 66497 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
82964: LD_ADDR_EXP 74
82968: PUSH
82969: LD_EXP 74
82973: PPUSH
82974: LD_VAR 0 2
82978: PPUSH
82979: EMPTY
82980: PPUSH
82981: CALL_OW 1
82985: ST_TO_ADDR
// end ; continue ;
82986: GO 82744
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
82988: LD_EXP 73
82992: PUSH
82993: LD_VAR 0 2
82997: ARRAY
82998: PUSH
82999: LD_INT 1
83001: ARRAY
83002: PUSH
83003: LD_INT 1
83005: ARRAY
83006: PPUSH
83007: LD_EXP 73
83011: PUSH
83012: LD_VAR 0 2
83016: ARRAY
83017: PUSH
83018: LD_INT 1
83020: ARRAY
83021: PUSH
83022: LD_INT 2
83024: ARRAY
83025: PPUSH
83026: LD_EXP 62
83030: PUSH
83031: LD_VAR 0 2
83035: ARRAY
83036: PPUSH
83037: CALL_OW 440
83041: IFFALSE 83084
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
83043: LD_ADDR_EXP 73
83047: PUSH
83048: LD_EXP 73
83052: PPUSH
83053: LD_VAR 0 2
83057: PPUSH
83058: LD_EXP 73
83062: PUSH
83063: LD_VAR 0 2
83067: ARRAY
83068: PPUSH
83069: LD_INT 1
83071: PPUSH
83072: CALL_OW 3
83076: PPUSH
83077: CALL_OW 1
83081: ST_TO_ADDR
83082: GO 83331
// begin if not mc_deposits_finder [ i ] then
83084: LD_EXP 74
83088: PUSH
83089: LD_VAR 0 2
83093: ARRAY
83094: NOT
83095: IFFALSE 83147
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
83097: LD_ADDR_EXP 74
83101: PUSH
83102: LD_EXP 74
83106: PPUSH
83107: LD_VAR 0 2
83111: PPUSH
83112: LD_VAR 0 3
83116: PUSH
83117: LD_INT 1
83119: ARRAY
83120: PUSH
83121: EMPTY
83122: LIST
83123: PPUSH
83124: CALL_OW 1
83128: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
83129: LD_VAR 0 3
83133: PUSH
83134: LD_INT 1
83136: ARRAY
83137: PPUSH
83138: LD_INT 125
83140: PPUSH
83141: CALL_OW 109
// end else
83145: GO 83331
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
83147: LD_EXP 74
83151: PUSH
83152: LD_VAR 0 2
83156: ARRAY
83157: PUSH
83158: LD_INT 1
83160: ARRAY
83161: PPUSH
83162: CALL_OW 310
83166: IFFALSE 83189
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
83168: LD_EXP 74
83172: PUSH
83173: LD_VAR 0 2
83177: ARRAY
83178: PUSH
83179: LD_INT 1
83181: ARRAY
83182: PPUSH
83183: CALL_OW 122
83187: GO 83331
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
83189: LD_EXP 74
83193: PUSH
83194: LD_VAR 0 2
83198: ARRAY
83199: PUSH
83200: LD_INT 1
83202: ARRAY
83203: PPUSH
83204: CALL_OW 314
83208: NOT
83209: PUSH
83210: LD_EXP 74
83214: PUSH
83215: LD_VAR 0 2
83219: ARRAY
83220: PUSH
83221: LD_INT 1
83223: ARRAY
83224: PPUSH
83225: LD_EXP 73
83229: PUSH
83230: LD_VAR 0 2
83234: ARRAY
83235: PUSH
83236: LD_INT 1
83238: ARRAY
83239: PUSH
83240: LD_INT 1
83242: ARRAY
83243: PPUSH
83244: LD_EXP 73
83248: PUSH
83249: LD_VAR 0 2
83253: ARRAY
83254: PUSH
83255: LD_INT 1
83257: ARRAY
83258: PUSH
83259: LD_INT 2
83261: ARRAY
83262: PPUSH
83263: CALL_OW 297
83267: PUSH
83268: LD_INT 6
83270: GREATER
83271: AND
83272: IFFALSE 83331
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
83274: LD_EXP 74
83278: PUSH
83279: LD_VAR 0 2
83283: ARRAY
83284: PUSH
83285: LD_INT 1
83287: ARRAY
83288: PPUSH
83289: LD_EXP 73
83293: PUSH
83294: LD_VAR 0 2
83298: ARRAY
83299: PUSH
83300: LD_INT 1
83302: ARRAY
83303: PUSH
83304: LD_INT 1
83306: ARRAY
83307: PPUSH
83308: LD_EXP 73
83312: PUSH
83313: LD_VAR 0 2
83317: ARRAY
83318: PUSH
83319: LD_INT 1
83321: ARRAY
83322: PUSH
83323: LD_INT 2
83325: ARRAY
83326: PPUSH
83327: CALL_OW 111
// end ; end ; end ;
83331: GO 82744
83333: POP
83334: POP
// end ;
83335: LD_VAR 0 1
83339: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts , mcts , x ; begin
83340: LD_INT 0
83342: PPUSH
83343: PPUSH
83344: PPUSH
83345: PPUSH
83346: PPUSH
83347: PPUSH
83348: PPUSH
83349: PPUSH
83350: PPUSH
83351: PPUSH
83352: PPUSH
// if not mc_bases then
83353: LD_EXP 36
83357: NOT
83358: IFFALSE 83362
// exit ;
83360: GO 84086
// for i = 1 to mc_bases do
83362: LD_ADDR_VAR 0 2
83366: PUSH
83367: DOUBLE
83368: LD_INT 1
83370: DEC
83371: ST_TO_ADDR
83372: LD_EXP 36
83376: PUSH
83377: FOR_TO
83378: IFFALSE 84084
// begin if not mc_bases [ i ] then
83380: LD_EXP 36
83384: PUSH
83385: LD_VAR 0 2
83389: ARRAY
83390: NOT
83391: IFFALSE 83395
// continue ;
83393: GO 83377
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
83395: LD_ADDR_VAR 0 7
83399: PUSH
83400: LD_EXP 36
83404: PUSH
83405: LD_VAR 0 2
83409: ARRAY
83410: PUSH
83411: LD_INT 1
83413: ARRAY
83414: PPUSH
83415: CALL_OW 248
83419: ST_TO_ADDR
// if nation = 3 or not UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) then
83420: LD_VAR 0 7
83424: PUSH
83425: LD_INT 3
83427: EQUAL
83428: PUSH
83429: LD_EXP 55
83433: PUSH
83434: LD_VAR 0 2
83438: ARRAY
83439: PUSH
83440: LD_EXP 58
83444: PUSH
83445: LD_VAR 0 2
83449: ARRAY
83450: UNION
83451: PPUSH
83452: LD_INT 33
83454: PUSH
83455: LD_INT 2
83457: PUSH
83458: EMPTY
83459: LIST
83460: LIST
83461: PPUSH
83462: CALL_OW 72
83466: NOT
83467: OR
83468: IFFALSE 83472
// continue ;
83470: GO 83377
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
83472: LD_ADDR_VAR 0 9
83476: PUSH
83477: LD_EXP 36
83481: PUSH
83482: LD_VAR 0 2
83486: ARRAY
83487: PPUSH
83488: LD_INT 30
83490: PUSH
83491: LD_INT 36
83493: PUSH
83494: EMPTY
83495: LIST
83496: LIST
83497: PPUSH
83498: CALL_OW 72
83502: ST_TO_ADDR
// mcts := UnitFilter ( mc_vehicles [ i ] , [ f_weapon , ar_control_tower ] ) ;
83503: LD_ADDR_VAR 0 10
83507: PUSH
83508: LD_EXP 55
83512: PUSH
83513: LD_VAR 0 2
83517: ARRAY
83518: PPUSH
83519: LD_INT 34
83521: PUSH
83522: LD_INT 31
83524: PUSH
83525: EMPTY
83526: LIST
83527: LIST
83528: PPUSH
83529: CALL_OW 72
83533: ST_TO_ADDR
// if not cts and not mcts then
83534: LD_VAR 0 9
83538: NOT
83539: PUSH
83540: LD_VAR 0 10
83544: NOT
83545: AND
83546: IFFALSE 83550
// continue ;
83548: GO 83377
// x := cts ;
83550: LD_ADDR_VAR 0 11
83554: PUSH
83555: LD_VAR 0 9
83559: ST_TO_ADDR
// if not x then
83560: LD_VAR 0 11
83564: NOT
83565: IFFALSE 83577
// x := mcts ;
83567: LD_ADDR_VAR 0 11
83571: PUSH
83572: LD_VAR 0 10
83576: ST_TO_ADDR
// if mc_remote_driver [ i ] then
83577: LD_EXP 76
83581: PUSH
83582: LD_VAR 0 2
83586: ARRAY
83587: IFFALSE 83856
// for j in mc_remote_driver [ i ] do
83589: LD_ADDR_VAR 0 3
83593: PUSH
83594: LD_EXP 76
83598: PUSH
83599: LD_VAR 0 2
83603: ARRAY
83604: PUSH
83605: FOR_IN
83606: IFFALSE 83854
// begin if GetClass ( j ) <> 3 then
83608: LD_VAR 0 3
83612: PPUSH
83613: CALL_OW 257
83617: PUSH
83618: LD_INT 3
83620: NONEQUAL
83621: IFFALSE 83674
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff j ) ;
83623: LD_ADDR_EXP 76
83627: PUSH
83628: LD_EXP 76
83632: PPUSH
83633: LD_VAR 0 2
83637: PPUSH
83638: LD_EXP 76
83642: PUSH
83643: LD_VAR 0 2
83647: ARRAY
83648: PUSH
83649: LD_VAR 0 3
83653: DIFF
83654: PPUSH
83655: CALL_OW 1
83659: ST_TO_ADDR
// SetTag ( j , 0 ) ;
83660: LD_VAR 0 3
83664: PPUSH
83665: LD_INT 0
83667: PPUSH
83668: CALL_OW 109
// continue ;
83672: GO 83605
// end ; if not IsInUnit ( j ) or ( GetBType ( IsInUnit ( j ) ) <> b_control_tower and not IsDriver ( j ) ) then
83674: LD_VAR 0 3
83678: PPUSH
83679: CALL_OW 310
83683: NOT
83684: PUSH
83685: LD_VAR 0 3
83689: PPUSH
83690: CALL_OW 310
83694: PPUSH
83695: CALL_OW 266
83699: PUSH
83700: LD_INT 36
83702: NONEQUAL
83703: PUSH
83704: LD_VAR 0 3
83708: PPUSH
83709: CALL 59883 0 1
83713: NOT
83714: AND
83715: OR
83716: IFFALSE 83852
// begin if IsInUnit ( j ) then
83718: LD_VAR 0 3
83722: PPUSH
83723: CALL_OW 310
83727: IFFALSE 83738
// ComExitBuilding ( j ) ;
83729: LD_VAR 0 3
83733: PPUSH
83734: CALL_OW 122
// ct := 0 ;
83738: LD_ADDR_VAR 0 8
83742: PUSH
83743: LD_INT 0
83745: ST_TO_ADDR
// for k in x do
83746: LD_ADDR_VAR 0 4
83750: PUSH
83751: LD_VAR 0 11
83755: PUSH
83756: FOR_IN
83757: IFFALSE 83830
// if ( GetWeapon ( k ) = ar_control_tower and not IsDrivenBy ( k ) ) or ( GetBType ( k ) = b_control_tower and UnitsInside ( k ) < 3 ) then
83759: LD_VAR 0 4
83763: PPUSH
83764: CALL_OW 264
83768: PUSH
83769: LD_INT 31
83771: EQUAL
83772: PUSH
83773: LD_VAR 0 4
83777: PPUSH
83778: CALL_OW 311
83782: NOT
83783: AND
83784: PUSH
83785: LD_VAR 0 4
83789: PPUSH
83790: CALL_OW 266
83794: PUSH
83795: LD_INT 36
83797: EQUAL
83798: PUSH
83799: LD_VAR 0 4
83803: PPUSH
83804: CALL_OW 313
83808: PUSH
83809: LD_INT 3
83811: LESS
83812: AND
83813: OR
83814: IFFALSE 83828
// begin ct := k ;
83816: LD_ADDR_VAR 0 8
83820: PUSH
83821: LD_VAR 0 4
83825: ST_TO_ADDR
// break ;
83826: GO 83830
// end ;
83828: GO 83756
83830: POP
83831: POP
// if ct then
83832: LD_VAR 0 8
83836: IFFALSE 83852
// ComEnterUnit ( j , ct ) ;
83838: LD_VAR 0 3
83842: PPUSH
83843: LD_VAR 0 8
83847: PPUSH
83848: CALL_OW 120
// end ; end ;
83852: GO 83605
83854: POP
83855: POP
// places := 0 ;
83856: LD_ADDR_VAR 0 5
83860: PUSH
83861: LD_INT 0
83863: ST_TO_ADDR
// for j = 1 to x do
83864: LD_ADDR_VAR 0 3
83868: PUSH
83869: DOUBLE
83870: LD_INT 1
83872: DEC
83873: ST_TO_ADDR
83874: LD_VAR 0 11
83878: PUSH
83879: FOR_TO
83880: IFFALSE 83935
// if GetWeapon ( x [ j ] ) = ar_control_tower then
83882: LD_VAR 0 11
83886: PUSH
83887: LD_VAR 0 3
83891: ARRAY
83892: PPUSH
83893: CALL_OW 264
83897: PUSH
83898: LD_INT 31
83900: EQUAL
83901: IFFALSE 83919
// places := places + 1 else
83903: LD_ADDR_VAR 0 5
83907: PUSH
83908: LD_VAR 0 5
83912: PUSH
83913: LD_INT 1
83915: PLUS
83916: ST_TO_ADDR
83917: GO 83933
// places := places + 3 ;
83919: LD_ADDR_VAR 0 5
83923: PUSH
83924: LD_VAR 0 5
83928: PUSH
83929: LD_INT 3
83931: PLUS
83932: ST_TO_ADDR
83933: GO 83879
83935: POP
83936: POP
// tmp := SortBySkill ( UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] , 3 ) ;
83937: LD_ADDR_VAR 0 6
83941: PUSH
83942: LD_EXP 36
83946: PUSH
83947: LD_VAR 0 2
83951: ARRAY
83952: PPUSH
83953: LD_INT 25
83955: PUSH
83956: LD_INT 3
83958: PUSH
83959: EMPTY
83960: LIST
83961: LIST
83962: PPUSH
83963: CALL_OW 72
83967: PUSH
83968: LD_EXP 76
83972: PUSH
83973: LD_VAR 0 2
83977: ARRAY
83978: DIFF
83979: PPUSH
83980: LD_INT 3
83982: PPUSH
83983: CALL 60783 0 2
83987: ST_TO_ADDR
// if not tmp then
83988: LD_VAR 0 6
83992: NOT
83993: IFFALSE 83997
// continue ;
83995: GO 83377
// places := places - mc_remote_driver [ i ] ;
83997: LD_ADDR_VAR 0 5
84001: PUSH
84002: LD_VAR 0 5
84006: PUSH
84007: LD_EXP 76
84011: PUSH
84012: LD_VAR 0 2
84016: ARRAY
84017: MINUS
84018: ST_TO_ADDR
// if places then
84019: LD_VAR 0 5
84023: IFFALSE 84082
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
84025: LD_ADDR_EXP 76
84029: PUSH
84030: LD_EXP 76
84034: PPUSH
84035: LD_VAR 0 2
84039: PPUSH
84040: LD_EXP 76
84044: PUSH
84045: LD_VAR 0 2
84049: ARRAY
84050: PUSH
84051: LD_VAR 0 6
84055: PUSH
84056: LD_INT 1
84058: ARRAY
84059: UNION
84060: PPUSH
84061: CALL_OW 1
84065: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
84066: LD_VAR 0 6
84070: PUSH
84071: LD_INT 1
84073: ARRAY
84074: PPUSH
84075: LD_INT 126
84077: PPUSH
84078: CALL_OW 109
// end ; end ;
84082: GO 83377
84084: POP
84085: POP
// end ;
84086: LD_VAR 0 1
84090: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
84091: LD_INT 0
84093: PPUSH
84094: PPUSH
84095: PPUSH
84096: PPUSH
84097: PPUSH
84098: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
84099: LD_VAR 0 1
84103: NOT
84104: PUSH
84105: LD_VAR 0 2
84109: NOT
84110: OR
84111: PUSH
84112: LD_VAR 0 3
84116: NOT
84117: OR
84118: PUSH
84119: LD_VAR 0 4
84123: PUSH
84124: LD_INT 1
84126: PUSH
84127: LD_INT 2
84129: PUSH
84130: LD_INT 3
84132: PUSH
84133: LD_INT 4
84135: PUSH
84136: LD_INT 5
84138: PUSH
84139: LD_INT 8
84141: PUSH
84142: LD_INT 9
84144: PUSH
84145: LD_INT 15
84147: PUSH
84148: LD_INT 16
84150: PUSH
84151: EMPTY
84152: LIST
84153: LIST
84154: LIST
84155: LIST
84156: LIST
84157: LIST
84158: LIST
84159: LIST
84160: LIST
84161: IN
84162: NOT
84163: OR
84164: IFFALSE 84168
// exit ;
84166: GO 85068
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
84168: LD_ADDR_VAR 0 2
84172: PUSH
84173: LD_VAR 0 2
84177: PPUSH
84178: LD_INT 21
84180: PUSH
84181: LD_INT 3
84183: PUSH
84184: EMPTY
84185: LIST
84186: LIST
84187: PUSH
84188: LD_INT 24
84190: PUSH
84191: LD_INT 250
84193: PUSH
84194: EMPTY
84195: LIST
84196: LIST
84197: PUSH
84198: EMPTY
84199: LIST
84200: LIST
84201: PPUSH
84202: CALL_OW 72
84206: ST_TO_ADDR
// case class of 1 , 15 :
84207: LD_VAR 0 4
84211: PUSH
84212: LD_INT 1
84214: DOUBLE
84215: EQUAL
84216: IFTRUE 84226
84218: LD_INT 15
84220: DOUBLE
84221: EQUAL
84222: IFTRUE 84226
84224: GO 84311
84226: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
84227: LD_ADDR_VAR 0 8
84231: PUSH
84232: LD_VAR 0 2
84236: PPUSH
84237: LD_INT 2
84239: PUSH
84240: LD_INT 30
84242: PUSH
84243: LD_INT 32
84245: PUSH
84246: EMPTY
84247: LIST
84248: LIST
84249: PUSH
84250: LD_INT 30
84252: PUSH
84253: LD_INT 31
84255: PUSH
84256: EMPTY
84257: LIST
84258: LIST
84259: PUSH
84260: EMPTY
84261: LIST
84262: LIST
84263: LIST
84264: PPUSH
84265: CALL_OW 72
84269: PUSH
84270: LD_VAR 0 2
84274: PPUSH
84275: LD_INT 2
84277: PUSH
84278: LD_INT 30
84280: PUSH
84281: LD_INT 4
84283: PUSH
84284: EMPTY
84285: LIST
84286: LIST
84287: PUSH
84288: LD_INT 30
84290: PUSH
84291: LD_INT 5
84293: PUSH
84294: EMPTY
84295: LIST
84296: LIST
84297: PUSH
84298: EMPTY
84299: LIST
84300: LIST
84301: LIST
84302: PPUSH
84303: CALL_OW 72
84307: ADD
84308: ST_TO_ADDR
84309: GO 84557
84311: LD_INT 2
84313: DOUBLE
84314: EQUAL
84315: IFTRUE 84325
84317: LD_INT 16
84319: DOUBLE
84320: EQUAL
84321: IFTRUE 84325
84323: GO 84371
84325: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
84326: LD_ADDR_VAR 0 8
84330: PUSH
84331: LD_VAR 0 2
84335: PPUSH
84336: LD_INT 2
84338: PUSH
84339: LD_INT 30
84341: PUSH
84342: LD_INT 0
84344: PUSH
84345: EMPTY
84346: LIST
84347: LIST
84348: PUSH
84349: LD_INT 30
84351: PUSH
84352: LD_INT 1
84354: PUSH
84355: EMPTY
84356: LIST
84357: LIST
84358: PUSH
84359: EMPTY
84360: LIST
84361: LIST
84362: LIST
84363: PPUSH
84364: CALL_OW 72
84368: ST_TO_ADDR
84369: GO 84557
84371: LD_INT 3
84373: DOUBLE
84374: EQUAL
84375: IFTRUE 84379
84377: GO 84425
84379: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
84380: LD_ADDR_VAR 0 8
84384: PUSH
84385: LD_VAR 0 2
84389: PPUSH
84390: LD_INT 2
84392: PUSH
84393: LD_INT 30
84395: PUSH
84396: LD_INT 2
84398: PUSH
84399: EMPTY
84400: LIST
84401: LIST
84402: PUSH
84403: LD_INT 30
84405: PUSH
84406: LD_INT 3
84408: PUSH
84409: EMPTY
84410: LIST
84411: LIST
84412: PUSH
84413: EMPTY
84414: LIST
84415: LIST
84416: LIST
84417: PPUSH
84418: CALL_OW 72
84422: ST_TO_ADDR
84423: GO 84557
84425: LD_INT 4
84427: DOUBLE
84428: EQUAL
84429: IFTRUE 84433
84431: GO 84490
84433: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
84434: LD_ADDR_VAR 0 8
84438: PUSH
84439: LD_VAR 0 2
84443: PPUSH
84444: LD_INT 2
84446: PUSH
84447: LD_INT 30
84449: PUSH
84450: LD_INT 6
84452: PUSH
84453: EMPTY
84454: LIST
84455: LIST
84456: PUSH
84457: LD_INT 30
84459: PUSH
84460: LD_INT 7
84462: PUSH
84463: EMPTY
84464: LIST
84465: LIST
84466: PUSH
84467: LD_INT 30
84469: PUSH
84470: LD_INT 8
84472: PUSH
84473: EMPTY
84474: LIST
84475: LIST
84476: PUSH
84477: EMPTY
84478: LIST
84479: LIST
84480: LIST
84481: LIST
84482: PPUSH
84483: CALL_OW 72
84487: ST_TO_ADDR
84488: GO 84557
84490: LD_INT 5
84492: DOUBLE
84493: EQUAL
84494: IFTRUE 84510
84496: LD_INT 8
84498: DOUBLE
84499: EQUAL
84500: IFTRUE 84510
84502: LD_INT 9
84504: DOUBLE
84505: EQUAL
84506: IFTRUE 84510
84508: GO 84556
84510: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
84511: LD_ADDR_VAR 0 8
84515: PUSH
84516: LD_VAR 0 2
84520: PPUSH
84521: LD_INT 2
84523: PUSH
84524: LD_INT 30
84526: PUSH
84527: LD_INT 4
84529: PUSH
84530: EMPTY
84531: LIST
84532: LIST
84533: PUSH
84534: LD_INT 30
84536: PUSH
84537: LD_INT 5
84539: PUSH
84540: EMPTY
84541: LIST
84542: LIST
84543: PUSH
84544: EMPTY
84545: LIST
84546: LIST
84547: LIST
84548: PPUSH
84549: CALL_OW 72
84553: ST_TO_ADDR
84554: GO 84557
84556: POP
// if not tmp then
84557: LD_VAR 0 8
84561: NOT
84562: IFFALSE 84566
// exit ;
84564: GO 85068
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
84566: LD_VAR 0 4
84570: PUSH
84571: LD_INT 1
84573: PUSH
84574: LD_INT 15
84576: PUSH
84577: EMPTY
84578: LIST
84579: LIST
84580: IN
84581: PUSH
84582: LD_EXP 45
84586: PUSH
84587: LD_VAR 0 1
84591: ARRAY
84592: AND
84593: IFFALSE 84749
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
84595: LD_ADDR_VAR 0 9
84599: PUSH
84600: LD_EXP 45
84604: PUSH
84605: LD_VAR 0 1
84609: ARRAY
84610: PUSH
84611: LD_INT 1
84613: ARRAY
84614: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
84615: LD_VAR 0 9
84619: PUSH
84620: LD_EXP 46
84624: PUSH
84625: LD_VAR 0 1
84629: ARRAY
84630: IN
84631: NOT
84632: IFFALSE 84747
// begin mc_busy_turret_list := ReplaceIn ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
84634: LD_ADDR_EXP 46
84638: PUSH
84639: LD_EXP 46
84643: PPUSH
84644: LD_VAR 0 1
84648: PUSH
84649: LD_EXP 46
84653: PUSH
84654: LD_VAR 0 1
84658: ARRAY
84659: PUSH
84660: LD_INT 1
84662: PLUS
84663: PUSH
84664: EMPTY
84665: LIST
84666: LIST
84667: PPUSH
84668: LD_VAR 0 9
84672: PPUSH
84673: CALL 26559 0 3
84677: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
84678: LD_ADDR_EXP 45
84682: PUSH
84683: LD_EXP 45
84687: PPUSH
84688: LD_VAR 0 1
84692: PPUSH
84693: LD_EXP 45
84697: PUSH
84698: LD_VAR 0 1
84702: ARRAY
84703: PUSH
84704: LD_VAR 0 9
84708: DIFF
84709: PPUSH
84710: CALL_OW 1
84714: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
84715: LD_VAR 0 3
84719: PPUSH
84720: LD_EXP 46
84724: PUSH
84725: LD_VAR 0 1
84729: ARRAY
84730: PUSH
84731: LD_EXP 46
84735: PUSH
84736: LD_VAR 0 1
84740: ARRAY
84741: ARRAY
84742: PPUSH
84743: CALL_OW 120
// end ; exit ;
84747: GO 85068
// end ; if tmp > 1 then
84749: LD_VAR 0 8
84753: PUSH
84754: LD_INT 1
84756: GREATER
84757: IFFALSE 84861
// for i = 2 to tmp do
84759: LD_ADDR_VAR 0 6
84763: PUSH
84764: DOUBLE
84765: LD_INT 2
84767: DEC
84768: ST_TO_ADDR
84769: LD_VAR 0 8
84773: PUSH
84774: FOR_TO
84775: IFFALSE 84859
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
84777: LD_VAR 0 8
84781: PUSH
84782: LD_VAR 0 6
84786: ARRAY
84787: PPUSH
84788: CALL_OW 461
84792: PUSH
84793: LD_INT 6
84795: EQUAL
84796: IFFALSE 84857
// begin x := tmp [ i ] ;
84798: LD_ADDR_VAR 0 9
84802: PUSH
84803: LD_VAR 0 8
84807: PUSH
84808: LD_VAR 0 6
84812: ARRAY
84813: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
84814: LD_ADDR_VAR 0 8
84818: PUSH
84819: LD_VAR 0 8
84823: PPUSH
84824: LD_VAR 0 6
84828: PPUSH
84829: CALL_OW 3
84833: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
84834: LD_ADDR_VAR 0 8
84838: PUSH
84839: LD_VAR 0 8
84843: PPUSH
84844: LD_INT 1
84846: PPUSH
84847: LD_VAR 0 9
84851: PPUSH
84852: CALL_OW 2
84856: ST_TO_ADDR
// end ;
84857: GO 84774
84859: POP
84860: POP
// for i in tmp do
84861: LD_ADDR_VAR 0 6
84865: PUSH
84866: LD_VAR 0 8
84870: PUSH
84871: FOR_IN
84872: IFFALSE 84941
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
84874: LD_VAR 0 6
84878: PPUSH
84879: CALL_OW 313
84883: PUSH
84884: LD_INT 6
84886: LESS
84887: PUSH
84888: LD_VAR 0 6
84892: PPUSH
84893: CALL_OW 266
84897: PUSH
84898: LD_INT 31
84900: PUSH
84901: LD_INT 32
84903: PUSH
84904: EMPTY
84905: LIST
84906: LIST
84907: IN
84908: NOT
84909: AND
84910: PUSH
84911: LD_VAR 0 6
84915: PPUSH
84916: CALL_OW 313
84920: PUSH
84921: LD_INT 0
84923: EQUAL
84924: OR
84925: IFFALSE 84939
// begin j := i ;
84927: LD_ADDR_VAR 0 7
84931: PUSH
84932: LD_VAR 0 6
84936: ST_TO_ADDR
// break ;
84937: GO 84941
// end ; end ;
84939: GO 84871
84941: POP
84942: POP
// if j then
84943: LD_VAR 0 7
84947: IFFALSE 84965
// ComEnterUnit ( unit , j ) else
84949: LD_VAR 0 3
84953: PPUSH
84954: LD_VAR 0 7
84958: PPUSH
84959: CALL_OW 120
84963: GO 85068
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
84965: LD_ADDR_VAR 0 10
84969: PUSH
84970: LD_VAR 0 2
84974: PPUSH
84975: LD_INT 2
84977: PUSH
84978: LD_INT 30
84980: PUSH
84981: LD_INT 0
84983: PUSH
84984: EMPTY
84985: LIST
84986: LIST
84987: PUSH
84988: LD_INT 30
84990: PUSH
84991: LD_INT 1
84993: PUSH
84994: EMPTY
84995: LIST
84996: LIST
84997: PUSH
84998: EMPTY
84999: LIST
85000: LIST
85001: LIST
85002: PPUSH
85003: CALL_OW 72
85007: ST_TO_ADDR
// if depot then
85008: LD_VAR 0 10
85012: IFFALSE 85068
// begin depot := NearestUnitToUnit ( depot , unit ) ;
85014: LD_ADDR_VAR 0 10
85018: PUSH
85019: LD_VAR 0 10
85023: PPUSH
85024: LD_VAR 0 3
85028: PPUSH
85029: CALL_OW 74
85033: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
85034: LD_VAR 0 3
85038: PPUSH
85039: LD_VAR 0 10
85043: PPUSH
85044: CALL_OW 296
85048: PUSH
85049: LD_INT 10
85051: GREATER
85052: IFFALSE 85068
// ComStandNearbyBuilding ( unit , depot ) ;
85054: LD_VAR 0 3
85058: PPUSH
85059: LD_VAR 0 10
85063: PPUSH
85064: CALL 21236 0 2
// end ; end ; end ;
85068: LD_VAR 0 5
85072: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
85073: LD_INT 0
85075: PPUSH
85076: PPUSH
85077: PPUSH
85078: PPUSH
// if not mc_bases then
85079: LD_EXP 36
85083: NOT
85084: IFFALSE 85088
// exit ;
85086: GO 85327
// for i = 1 to mc_bases do
85088: LD_ADDR_VAR 0 2
85092: PUSH
85093: DOUBLE
85094: LD_INT 1
85096: DEC
85097: ST_TO_ADDR
85098: LD_EXP 36
85102: PUSH
85103: FOR_TO
85104: IFFALSE 85325
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
85106: LD_ADDR_VAR 0 4
85110: PUSH
85111: LD_EXP 36
85115: PUSH
85116: LD_VAR 0 2
85120: ARRAY
85121: PPUSH
85122: LD_INT 21
85124: PUSH
85125: LD_INT 1
85127: PUSH
85128: EMPTY
85129: LIST
85130: LIST
85131: PPUSH
85132: CALL_OW 72
85136: PUSH
85137: LD_EXP 65
85141: PUSH
85142: LD_VAR 0 2
85146: ARRAY
85147: UNION
85148: ST_TO_ADDR
// if not tmp then
85149: LD_VAR 0 4
85153: NOT
85154: IFFALSE 85158
// continue ;
85156: GO 85103
// for j in tmp do
85158: LD_ADDR_VAR 0 3
85162: PUSH
85163: LD_VAR 0 4
85167: PUSH
85168: FOR_IN
85169: IFFALSE 85321
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
85171: LD_VAR 0 3
85175: PPUSH
85176: CALL_OW 110
85180: NOT
85181: PUSH
85182: LD_VAR 0 3
85186: PPUSH
85187: CALL_OW 314
85191: NOT
85192: AND
85193: PUSH
85194: LD_VAR 0 3
85198: PPUSH
85199: CALL_OW 311
85203: NOT
85204: AND
85205: PUSH
85206: LD_VAR 0 3
85210: PPUSH
85211: CALL_OW 310
85215: NOT
85216: AND
85217: PUSH
85218: LD_VAR 0 3
85222: PUSH
85223: LD_EXP 39
85227: PUSH
85228: LD_VAR 0 2
85232: ARRAY
85233: PUSH
85234: LD_INT 1
85236: ARRAY
85237: IN
85238: NOT
85239: AND
85240: PUSH
85241: LD_VAR 0 3
85245: PUSH
85246: LD_EXP 39
85250: PUSH
85251: LD_VAR 0 2
85255: ARRAY
85256: PUSH
85257: LD_INT 2
85259: ARRAY
85260: IN
85261: NOT
85262: AND
85263: PUSH
85264: LD_VAR 0 3
85268: PUSH
85269: LD_EXP 48
85273: PUSH
85274: LD_VAR 0 2
85278: ARRAY
85279: IN
85280: NOT
85281: AND
85282: IFFALSE 85319
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
85284: LD_VAR 0 2
85288: PPUSH
85289: LD_EXP 36
85293: PUSH
85294: LD_VAR 0 2
85298: ARRAY
85299: PPUSH
85300: LD_VAR 0 3
85304: PPUSH
85305: LD_VAR 0 3
85309: PPUSH
85310: CALL_OW 257
85314: PPUSH
85315: CALL 84091 0 4
// end ;
85319: GO 85168
85321: POP
85322: POP
// end ;
85323: GO 85103
85325: POP
85326: POP
// end ;
85327: LD_VAR 0 1
85331: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
85332: LD_INT 0
85334: PPUSH
85335: PPUSH
85336: PPUSH
85337: PPUSH
85338: PPUSH
85339: PPUSH
// if not mc_bases [ base ] then
85340: LD_EXP 36
85344: PUSH
85345: LD_VAR 0 1
85349: ARRAY
85350: NOT
85351: IFFALSE 85355
// exit ;
85353: GO 85537
// tmp := [ ] ;
85355: LD_ADDR_VAR 0 6
85359: PUSH
85360: EMPTY
85361: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
85362: LD_ADDR_VAR 0 7
85366: PUSH
85367: LD_VAR 0 3
85371: PPUSH
85372: LD_INT 0
85374: PPUSH
85375: CALL_OW 517
85379: ST_TO_ADDR
// if not list then
85380: LD_VAR 0 7
85384: NOT
85385: IFFALSE 85389
// exit ;
85387: GO 85537
// for i = 1 to amount do
85389: LD_ADDR_VAR 0 5
85393: PUSH
85394: DOUBLE
85395: LD_INT 1
85397: DEC
85398: ST_TO_ADDR
85399: LD_VAR 0 2
85403: PUSH
85404: FOR_TO
85405: IFFALSE 85485
// begin x := rand ( 1 , list [ 1 ] ) ;
85407: LD_ADDR_VAR 0 8
85411: PUSH
85412: LD_INT 1
85414: PPUSH
85415: LD_VAR 0 7
85419: PUSH
85420: LD_INT 1
85422: ARRAY
85423: PPUSH
85424: CALL_OW 12
85428: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
85429: LD_ADDR_VAR 0 6
85433: PUSH
85434: LD_VAR 0 6
85438: PPUSH
85439: LD_VAR 0 5
85443: PPUSH
85444: LD_VAR 0 7
85448: PUSH
85449: LD_INT 1
85451: ARRAY
85452: PUSH
85453: LD_VAR 0 8
85457: ARRAY
85458: PUSH
85459: LD_VAR 0 7
85463: PUSH
85464: LD_INT 2
85466: ARRAY
85467: PUSH
85468: LD_VAR 0 8
85472: ARRAY
85473: PUSH
85474: EMPTY
85475: LIST
85476: LIST
85477: PPUSH
85478: CALL_OW 1
85482: ST_TO_ADDR
// end ;
85483: GO 85404
85485: POP
85486: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
85487: LD_ADDR_EXP 49
85491: PUSH
85492: LD_EXP 49
85496: PPUSH
85497: LD_VAR 0 1
85501: PPUSH
85502: LD_VAR 0 6
85506: PPUSH
85507: CALL_OW 1
85511: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
85512: LD_ADDR_EXP 51
85516: PUSH
85517: LD_EXP 51
85521: PPUSH
85522: LD_VAR 0 1
85526: PPUSH
85527: LD_VAR 0 3
85531: PPUSH
85532: CALL_OW 1
85536: ST_TO_ADDR
// end ;
85537: LD_VAR 0 4
85541: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
85542: LD_INT 0
85544: PPUSH
// if not mc_bases [ base ] then
85545: LD_EXP 36
85549: PUSH
85550: LD_VAR 0 1
85554: ARRAY
85555: NOT
85556: IFFALSE 85560
// exit ;
85558: GO 85585
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
85560: LD_ADDR_EXP 41
85564: PUSH
85565: LD_EXP 41
85569: PPUSH
85570: LD_VAR 0 1
85574: PPUSH
85575: LD_VAR 0 2
85579: PPUSH
85580: CALL_OW 1
85584: ST_TO_ADDR
// end ;
85585: LD_VAR 0 3
85589: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
85590: LD_INT 0
85592: PPUSH
// if not mc_bases [ base ] then
85593: LD_EXP 36
85597: PUSH
85598: LD_VAR 0 1
85602: ARRAY
85603: NOT
85604: IFFALSE 85608
// exit ;
85606: GO 85645
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union list ) ;
85608: LD_ADDR_EXP 41
85612: PUSH
85613: LD_EXP 41
85617: PPUSH
85618: LD_VAR 0 1
85622: PPUSH
85623: LD_EXP 41
85627: PUSH
85628: LD_VAR 0 1
85632: ARRAY
85633: PUSH
85634: LD_VAR 0 2
85638: UNION
85639: PPUSH
85640: CALL_OW 1
85644: ST_TO_ADDR
// end ;
85645: LD_VAR 0 3
85649: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
85650: LD_INT 0
85652: PPUSH
// if not mc_bases [ base ] then
85653: LD_EXP 36
85657: PUSH
85658: LD_VAR 0 1
85662: ARRAY
85663: NOT
85664: IFFALSE 85668
// exit ;
85666: GO 85693
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
85668: LD_ADDR_EXP 57
85672: PUSH
85673: LD_EXP 57
85677: PPUSH
85678: LD_VAR 0 1
85682: PPUSH
85683: LD_VAR 0 2
85687: PPUSH
85688: CALL_OW 1
85692: ST_TO_ADDR
// end ;
85693: LD_VAR 0 3
85697: RET
// export function MC_InsertProduceList ( base , components ) ; begin
85698: LD_INT 0
85700: PPUSH
// if not mc_bases [ base ] then
85701: LD_EXP 36
85705: PUSH
85706: LD_VAR 0 1
85710: ARRAY
85711: NOT
85712: IFFALSE 85716
// exit ;
85714: GO 85753
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ components ) ;
85716: LD_ADDR_EXP 57
85720: PUSH
85721: LD_EXP 57
85725: PPUSH
85726: LD_VAR 0 1
85730: PPUSH
85731: LD_EXP 57
85735: PUSH
85736: LD_VAR 0 1
85740: ARRAY
85741: PUSH
85742: LD_VAR 0 2
85746: ADD
85747: PPUSH
85748: CALL_OW 1
85752: ST_TO_ADDR
// end ;
85753: LD_VAR 0 3
85757: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
85758: LD_INT 0
85760: PPUSH
// if not mc_bases [ base ] then
85761: LD_EXP 36
85765: PUSH
85766: LD_VAR 0 1
85770: ARRAY
85771: NOT
85772: IFFALSE 85776
// exit ;
85774: GO 85830
// mc_defender := Replace ( mc_defender , base , deflist ) ;
85776: LD_ADDR_EXP 58
85780: PUSH
85781: LD_EXP 58
85785: PPUSH
85786: LD_VAR 0 1
85790: PPUSH
85791: LD_VAR 0 2
85795: PPUSH
85796: CALL_OW 1
85800: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
85801: LD_ADDR_EXP 47
85805: PUSH
85806: LD_EXP 47
85810: PPUSH
85811: LD_VAR 0 1
85815: PPUSH
85816: LD_VAR 0 2
85820: PUSH
85821: LD_INT 0
85823: PLUS
85824: PPUSH
85825: CALL_OW 1
85829: ST_TO_ADDR
// end ;
85830: LD_VAR 0 3
85834: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
85835: LD_INT 0
85837: PPUSH
// if not mc_bases [ base ] then
85838: LD_EXP 36
85842: PUSH
85843: LD_VAR 0 1
85847: ARRAY
85848: NOT
85849: IFFALSE 85853
// exit ;
85851: GO 85878
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
85853: LD_ADDR_EXP 47
85857: PUSH
85858: LD_EXP 47
85862: PPUSH
85863: LD_VAR 0 1
85867: PPUSH
85868: LD_VAR 0 2
85872: PPUSH
85873: CALL_OW 1
85877: ST_TO_ADDR
// end ;
85878: LD_VAR 0 3
85882: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
85883: LD_INT 0
85885: PPUSH
85886: PPUSH
85887: PPUSH
85888: PPUSH
// if not mc_bases [ base ] then
85889: LD_EXP 36
85893: PUSH
85894: LD_VAR 0 1
85898: ARRAY
85899: NOT
85900: IFFALSE 85904
// exit ;
85902: GO 85969
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
85904: LD_ADDR_EXP 56
85908: PUSH
85909: LD_EXP 56
85913: PPUSH
85914: LD_VAR 0 1
85918: PUSH
85919: LD_EXP 56
85923: PUSH
85924: LD_VAR 0 1
85928: ARRAY
85929: PUSH
85930: LD_INT 1
85932: PLUS
85933: PUSH
85934: EMPTY
85935: LIST
85936: LIST
85937: PPUSH
85938: LD_VAR 0 1
85942: PUSH
85943: LD_VAR 0 2
85947: PUSH
85948: LD_VAR 0 3
85952: PUSH
85953: LD_VAR 0 4
85957: PUSH
85958: EMPTY
85959: LIST
85960: LIST
85961: LIST
85962: LIST
85963: PPUSH
85964: CALL 26559 0 3
85968: ST_TO_ADDR
// end ;
85969: LD_VAR 0 5
85973: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
85974: LD_INT 0
85976: PPUSH
// if not mc_bases [ base ] then
85977: LD_EXP 36
85981: PUSH
85982: LD_VAR 0 1
85986: ARRAY
85987: NOT
85988: IFFALSE 85992
// exit ;
85990: GO 86017
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
85992: LD_ADDR_EXP 73
85996: PUSH
85997: LD_EXP 73
86001: PPUSH
86002: LD_VAR 0 1
86006: PPUSH
86007: LD_VAR 0 2
86011: PPUSH
86012: CALL_OW 1
86016: ST_TO_ADDR
// end ;
86017: LD_VAR 0 3
86021: RET
// export function MC_GetMinesField ( base ) ; begin
86022: LD_INT 0
86024: PPUSH
// result := mc_mines [ base ] ;
86025: LD_ADDR_VAR 0 2
86029: PUSH
86030: LD_EXP 49
86034: PUSH
86035: LD_VAR 0 1
86039: ARRAY
86040: ST_TO_ADDR
// end ;
86041: LD_VAR 0 2
86045: RET
// export function MC_GetProduceList ( base ) ; begin
86046: LD_INT 0
86048: PPUSH
// result := mc_produce [ base ] ;
86049: LD_ADDR_VAR 0 2
86053: PUSH
86054: LD_EXP 57
86058: PUSH
86059: LD_VAR 0 1
86063: ARRAY
86064: ST_TO_ADDR
// end ;
86065: LD_VAR 0 2
86069: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
86070: LD_INT 0
86072: PPUSH
86073: PPUSH
// if not mc_bases then
86074: LD_EXP 36
86078: NOT
86079: IFFALSE 86083
// exit ;
86081: GO 86148
// if mc_bases [ base ] then
86083: LD_EXP 36
86087: PUSH
86088: LD_VAR 0 1
86092: ARRAY
86093: IFFALSE 86148
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
86095: LD_ADDR_VAR 0 3
86099: PUSH
86100: LD_EXP 36
86104: PUSH
86105: LD_VAR 0 1
86109: ARRAY
86110: PPUSH
86111: LD_INT 30
86113: PUSH
86114: LD_VAR 0 2
86118: PUSH
86119: EMPTY
86120: LIST
86121: LIST
86122: PPUSH
86123: CALL_OW 72
86127: ST_TO_ADDR
// if result then
86128: LD_VAR 0 3
86132: IFFALSE 86148
// result := result [ 1 ] ;
86134: LD_ADDR_VAR 0 3
86138: PUSH
86139: LD_VAR 0 3
86143: PUSH
86144: LD_INT 1
86146: ARRAY
86147: ST_TO_ADDR
// end ; end ;
86148: LD_VAR 0 3
86152: RET
// export function MC_SetTame ( base , area ) ; begin
86153: LD_INT 0
86155: PPUSH
// if not mc_bases or not base then
86156: LD_EXP 36
86160: NOT
86161: PUSH
86162: LD_VAR 0 1
86166: NOT
86167: OR
86168: IFFALSE 86172
// exit ;
86170: GO 86197
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
86172: LD_ADDR_EXP 64
86176: PUSH
86177: LD_EXP 64
86181: PPUSH
86182: LD_VAR 0 1
86186: PPUSH
86187: LD_VAR 0 2
86191: PPUSH
86192: CALL_OW 1
86196: ST_TO_ADDR
// end ;
86197: LD_VAR 0 3
86201: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
86202: LD_INT 0
86204: PPUSH
86205: PPUSH
// if not mc_bases or not base then
86206: LD_EXP 36
86210: NOT
86211: PUSH
86212: LD_VAR 0 1
86216: NOT
86217: OR
86218: IFFALSE 86222
// exit ;
86220: GO 86324
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
86222: LD_ADDR_VAR 0 4
86226: PUSH
86227: LD_EXP 36
86231: PUSH
86232: LD_VAR 0 1
86236: ARRAY
86237: PPUSH
86238: LD_INT 30
86240: PUSH
86241: LD_VAR 0 2
86245: PUSH
86246: EMPTY
86247: LIST
86248: LIST
86249: PPUSH
86250: CALL_OW 72
86254: ST_TO_ADDR
// if not tmp then
86255: LD_VAR 0 4
86259: NOT
86260: IFFALSE 86264
// exit ;
86262: GO 86324
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
86264: LD_ADDR_EXP 68
86268: PUSH
86269: LD_EXP 68
86273: PPUSH
86274: LD_VAR 0 1
86278: PPUSH
86279: LD_EXP 68
86283: PUSH
86284: LD_VAR 0 1
86288: ARRAY
86289: PPUSH
86290: LD_EXP 68
86294: PUSH
86295: LD_VAR 0 1
86299: ARRAY
86300: PUSH
86301: LD_INT 1
86303: PLUS
86304: PPUSH
86305: LD_VAR 0 4
86309: PUSH
86310: LD_INT 1
86312: ARRAY
86313: PPUSH
86314: CALL_OW 2
86318: PPUSH
86319: CALL_OW 1
86323: ST_TO_ADDR
// end ;
86324: LD_VAR 0 3
86328: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
86329: LD_INT 0
86331: PPUSH
86332: PPUSH
// if not mc_bases or not base or not kinds then
86333: LD_EXP 36
86337: NOT
86338: PUSH
86339: LD_VAR 0 1
86343: NOT
86344: OR
86345: PUSH
86346: LD_VAR 0 2
86350: NOT
86351: OR
86352: IFFALSE 86356
// exit ;
86354: GO 86417
// for i in kinds do
86356: LD_ADDR_VAR 0 4
86360: PUSH
86361: LD_VAR 0 2
86365: PUSH
86366: FOR_IN
86367: IFFALSE 86415
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
86369: LD_ADDR_EXP 70
86373: PUSH
86374: LD_EXP 70
86378: PPUSH
86379: LD_VAR 0 1
86383: PUSH
86384: LD_EXP 70
86388: PUSH
86389: LD_VAR 0 1
86393: ARRAY
86394: PUSH
86395: LD_INT 1
86397: PLUS
86398: PUSH
86399: EMPTY
86400: LIST
86401: LIST
86402: PPUSH
86403: LD_VAR 0 4
86407: PPUSH
86408: CALL 26559 0 3
86412: ST_TO_ADDR
86413: GO 86366
86415: POP
86416: POP
// end ;
86417: LD_VAR 0 3
86421: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
86422: LD_INT 0
86424: PPUSH
// if not mc_bases or not base or not areas then
86425: LD_EXP 36
86429: NOT
86430: PUSH
86431: LD_VAR 0 1
86435: NOT
86436: OR
86437: PUSH
86438: LD_VAR 0 2
86442: NOT
86443: OR
86444: IFFALSE 86448
// exit ;
86446: GO 86473
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
86448: LD_ADDR_EXP 54
86452: PUSH
86453: LD_EXP 54
86457: PPUSH
86458: LD_VAR 0 1
86462: PPUSH
86463: LD_VAR 0 2
86467: PPUSH
86468: CALL_OW 1
86472: ST_TO_ADDR
// end ;
86473: LD_VAR 0 3
86477: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
86478: LD_INT 0
86480: PPUSH
// if not mc_bases or not base or not teleports_exit then
86481: LD_EXP 36
86485: NOT
86486: PUSH
86487: LD_VAR 0 1
86491: NOT
86492: OR
86493: PUSH
86494: LD_VAR 0 2
86498: NOT
86499: OR
86500: IFFALSE 86504
// exit ;
86502: GO 86529
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
86504: LD_ADDR_EXP 71
86508: PUSH
86509: LD_EXP 71
86513: PPUSH
86514: LD_VAR 0 1
86518: PPUSH
86519: LD_VAR 0 2
86523: PPUSH
86524: CALL_OW 1
86528: ST_TO_ADDR
// end ;
86529: LD_VAR 0 3
86533: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
86534: LD_INT 0
86536: PPUSH
86537: PPUSH
86538: PPUSH
// if not mc_bases or not base or not ext_list then
86539: LD_EXP 36
86543: NOT
86544: PUSH
86545: LD_VAR 0 1
86549: NOT
86550: OR
86551: PUSH
86552: LD_VAR 0 5
86556: NOT
86557: OR
86558: IFFALSE 86562
// exit ;
86560: GO 86735
// tmp := GetFacExtXYD ( x , y , d ) ;
86562: LD_ADDR_VAR 0 8
86566: PUSH
86567: LD_VAR 0 2
86571: PPUSH
86572: LD_VAR 0 3
86576: PPUSH
86577: LD_VAR 0 4
86581: PPUSH
86582: CALL 59913 0 3
86586: ST_TO_ADDR
// if not tmp then
86587: LD_VAR 0 8
86591: NOT
86592: IFFALSE 86596
// exit ;
86594: GO 86735
// for i in tmp do
86596: LD_ADDR_VAR 0 7
86600: PUSH
86601: LD_VAR 0 8
86605: PUSH
86606: FOR_IN
86607: IFFALSE 86733
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
86609: LD_ADDR_EXP 41
86613: PUSH
86614: LD_EXP 41
86618: PPUSH
86619: LD_VAR 0 1
86623: PPUSH
86624: LD_EXP 41
86628: PUSH
86629: LD_VAR 0 1
86633: ARRAY
86634: PPUSH
86635: LD_EXP 41
86639: PUSH
86640: LD_VAR 0 1
86644: ARRAY
86645: PUSH
86646: LD_INT 1
86648: PLUS
86649: PPUSH
86650: LD_VAR 0 5
86654: PUSH
86655: LD_INT 1
86657: ARRAY
86658: PUSH
86659: LD_VAR 0 7
86663: PUSH
86664: LD_INT 1
86666: ARRAY
86667: PUSH
86668: LD_VAR 0 7
86672: PUSH
86673: LD_INT 2
86675: ARRAY
86676: PUSH
86677: LD_VAR 0 7
86681: PUSH
86682: LD_INT 3
86684: ARRAY
86685: PUSH
86686: EMPTY
86687: LIST
86688: LIST
86689: LIST
86690: LIST
86691: PPUSH
86692: CALL_OW 2
86696: PPUSH
86697: CALL_OW 1
86701: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
86702: LD_ADDR_VAR 0 5
86706: PUSH
86707: LD_VAR 0 5
86711: PPUSH
86712: LD_INT 1
86714: PPUSH
86715: CALL_OW 3
86719: ST_TO_ADDR
// if not ext_list then
86720: LD_VAR 0 5
86724: NOT
86725: IFFALSE 86731
// exit ;
86727: POP
86728: POP
86729: GO 86735
// end ;
86731: GO 86606
86733: POP
86734: POP
// end ;
86735: LD_VAR 0 6
86739: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
86740: LD_INT 0
86742: PPUSH
// if not mc_bases or not base or not weapon_list then
86743: LD_EXP 36
86747: NOT
86748: PUSH
86749: LD_VAR 0 1
86753: NOT
86754: OR
86755: PUSH
86756: LD_VAR 0 2
86760: NOT
86761: OR
86762: IFFALSE 86766
// exit ;
86764: GO 86791
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
86766: LD_ADDR_EXP 75
86770: PUSH
86771: LD_EXP 75
86775: PPUSH
86776: LD_VAR 0 1
86780: PPUSH
86781: LD_VAR 0 2
86785: PPUSH
86786: CALL_OW 1
86790: ST_TO_ADDR
// end ;
86791: LD_VAR 0 3
86795: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
86796: LD_INT 0
86798: PPUSH
// if not mc_bases or not base or not tech_list then
86799: LD_EXP 36
86803: NOT
86804: PUSH
86805: LD_VAR 0 1
86809: NOT
86810: OR
86811: PUSH
86812: LD_VAR 0 2
86816: NOT
86817: OR
86818: IFFALSE 86822
// exit ;
86820: GO 86847
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
86822: LD_ADDR_EXP 63
86826: PUSH
86827: LD_EXP 63
86831: PPUSH
86832: LD_VAR 0 1
86836: PPUSH
86837: LD_VAR 0 2
86841: PPUSH
86842: CALL_OW 1
86846: ST_TO_ADDR
// end ;
86847: LD_VAR 0 3
86851: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
86852: LD_INT 0
86854: PPUSH
// if not mc_bases or not parking_area or not base then
86855: LD_EXP 36
86859: NOT
86860: PUSH
86861: LD_VAR 0 2
86865: NOT
86866: OR
86867: PUSH
86868: LD_VAR 0 1
86872: NOT
86873: OR
86874: IFFALSE 86878
// exit ;
86876: GO 86903
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
86878: LD_ADDR_EXP 60
86882: PUSH
86883: LD_EXP 60
86887: PPUSH
86888: LD_VAR 0 1
86892: PPUSH
86893: LD_VAR 0 2
86897: PPUSH
86898: CALL_OW 1
86902: ST_TO_ADDR
// end ;
86903: LD_VAR 0 3
86907: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
86908: LD_INT 0
86910: PPUSH
// if not mc_bases or not base or not scan_area then
86911: LD_EXP 36
86915: NOT
86916: PUSH
86917: LD_VAR 0 1
86921: NOT
86922: OR
86923: PUSH
86924: LD_VAR 0 2
86928: NOT
86929: OR
86930: IFFALSE 86934
// exit ;
86932: GO 86959
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
86934: LD_ADDR_EXP 61
86938: PUSH
86939: LD_EXP 61
86943: PPUSH
86944: LD_VAR 0 1
86948: PPUSH
86949: LD_VAR 0 2
86953: PPUSH
86954: CALL_OW 1
86958: ST_TO_ADDR
// end ;
86959: LD_VAR 0 3
86963: RET
// export function MC_NotTameApeman ( base ) ; var ape_techs ; begin
86964: LD_INT 0
86966: PPUSH
86967: PPUSH
// if not mc_bases or not base then
86968: LD_EXP 36
86972: NOT
86973: PUSH
86974: LD_VAR 0 1
86978: NOT
86979: OR
86980: IFFALSE 86984
// exit ;
86982: GO 87048
// ape_techs := [ 1 , 2 , 3 , 4 , 11 ] ;
86984: LD_ADDR_VAR 0 3
86988: PUSH
86989: LD_INT 1
86991: PUSH
86992: LD_INT 2
86994: PUSH
86995: LD_INT 3
86997: PUSH
86998: LD_INT 4
87000: PUSH
87001: LD_INT 11
87003: PUSH
87004: EMPTY
87005: LIST
87006: LIST
87007: LIST
87008: LIST
87009: LIST
87010: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , mc_tech [ base ] diff ape_techs ) ;
87011: LD_ADDR_EXP 63
87015: PUSH
87016: LD_EXP 63
87020: PPUSH
87021: LD_VAR 0 1
87025: PPUSH
87026: LD_EXP 63
87030: PUSH
87031: LD_VAR 0 1
87035: ARRAY
87036: PUSH
87037: LD_VAR 0 3
87041: DIFF
87042: PPUSH
87043: CALL_OW 1
87047: ST_TO_ADDR
// end ;
87048: LD_VAR 0 2
87052: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
87053: LD_INT 0
87055: PPUSH
// result := mc_vehicles [ base ] ;
87056: LD_ADDR_VAR 0 3
87060: PUSH
87061: LD_EXP 55
87065: PUSH
87066: LD_VAR 0 1
87070: ARRAY
87071: ST_TO_ADDR
// if onlyCombat then
87072: LD_VAR 0 2
87076: IFFALSE 87241
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] , [ f_weapon , ru_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ) ;
87078: LD_ADDR_VAR 0 3
87082: PUSH
87083: LD_VAR 0 3
87087: PUSH
87088: LD_VAR 0 3
87092: PPUSH
87093: LD_INT 2
87095: PUSH
87096: LD_INT 34
87098: PUSH
87099: LD_INT 12
87101: PUSH
87102: EMPTY
87103: LIST
87104: LIST
87105: PUSH
87106: LD_INT 34
87108: PUSH
87109: LD_INT 51
87111: PUSH
87112: EMPTY
87113: LIST
87114: LIST
87115: PUSH
87116: LD_INT 34
87118: PUSH
87119: LD_EXP 30
87123: PUSH
87124: EMPTY
87125: LIST
87126: LIST
87127: PUSH
87128: LD_INT 34
87130: PUSH
87131: LD_INT 32
87133: PUSH
87134: EMPTY
87135: LIST
87136: LIST
87137: PUSH
87138: LD_INT 34
87140: PUSH
87141: LD_INT 13
87143: PUSH
87144: EMPTY
87145: LIST
87146: LIST
87147: PUSH
87148: LD_INT 34
87150: PUSH
87151: LD_INT 52
87153: PUSH
87154: EMPTY
87155: LIST
87156: LIST
87157: PUSH
87158: LD_INT 34
87160: PUSH
87161: LD_INT 14
87163: PUSH
87164: EMPTY
87165: LIST
87166: LIST
87167: PUSH
87168: LD_INT 34
87170: PUSH
87171: LD_INT 53
87173: PUSH
87174: EMPTY
87175: LIST
87176: LIST
87177: PUSH
87178: LD_INT 34
87180: PUSH
87181: LD_EXP 29
87185: PUSH
87186: EMPTY
87187: LIST
87188: LIST
87189: PUSH
87190: LD_INT 34
87192: PUSH
87193: LD_INT 31
87195: PUSH
87196: EMPTY
87197: LIST
87198: LIST
87199: PUSH
87200: LD_INT 34
87202: PUSH
87203: LD_INT 48
87205: PUSH
87206: EMPTY
87207: LIST
87208: LIST
87209: PUSH
87210: LD_INT 34
87212: PUSH
87213: LD_INT 8
87215: PUSH
87216: EMPTY
87217: LIST
87218: LIST
87219: PUSH
87220: EMPTY
87221: LIST
87222: LIST
87223: LIST
87224: LIST
87225: LIST
87226: LIST
87227: LIST
87228: LIST
87229: LIST
87230: LIST
87231: LIST
87232: LIST
87233: LIST
87234: PPUSH
87235: CALL_OW 72
87239: DIFF
87240: ST_TO_ADDR
// end ; end_of_file
87241: LD_VAR 0 3
87245: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
87246: LD_INT 0
87248: PPUSH
87249: PPUSH
87250: PPUSH
// if not mc_bases or not skirmish then
87251: LD_EXP 36
87255: NOT
87256: PUSH
87257: LD_EXP 34
87261: NOT
87262: OR
87263: IFFALSE 87267
// exit ;
87265: GO 87432
// for i = 1 to mc_bases do
87267: LD_ADDR_VAR 0 4
87271: PUSH
87272: DOUBLE
87273: LD_INT 1
87275: DEC
87276: ST_TO_ADDR
87277: LD_EXP 36
87281: PUSH
87282: FOR_TO
87283: IFFALSE 87430
// begin if sci in mc_bases [ i ] then
87285: LD_VAR 0 2
87289: PUSH
87290: LD_EXP 36
87294: PUSH
87295: LD_VAR 0 4
87299: ARRAY
87300: IN
87301: IFFALSE 87428
// begin mc_ape := ReplaceIn ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
87303: LD_ADDR_EXP 65
87307: PUSH
87308: LD_EXP 65
87312: PPUSH
87313: LD_VAR 0 4
87317: PUSH
87318: LD_EXP 65
87322: PUSH
87323: LD_VAR 0 4
87327: ARRAY
87328: PUSH
87329: LD_INT 1
87331: PLUS
87332: PUSH
87333: EMPTY
87334: LIST
87335: LIST
87336: PPUSH
87337: LD_VAR 0 1
87341: PPUSH
87342: CALL 26559 0 3
87346: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
87347: LD_ADDR_VAR 0 5
87351: PUSH
87352: LD_EXP 36
87356: PUSH
87357: LD_VAR 0 4
87361: ARRAY
87362: PPUSH
87363: LD_INT 2
87365: PUSH
87366: LD_INT 30
87368: PUSH
87369: LD_INT 0
87371: PUSH
87372: EMPTY
87373: LIST
87374: LIST
87375: PUSH
87376: LD_INT 30
87378: PUSH
87379: LD_INT 1
87381: PUSH
87382: EMPTY
87383: LIST
87384: LIST
87385: PUSH
87386: EMPTY
87387: LIST
87388: LIST
87389: LIST
87390: PPUSH
87391: CALL_OW 72
87395: PPUSH
87396: LD_VAR 0 1
87400: PPUSH
87401: CALL_OW 74
87405: ST_TO_ADDR
// if tmp then
87406: LD_VAR 0 5
87410: IFFALSE 87426
// ComStandNearbyBuilding ( ape , tmp ) ;
87412: LD_VAR 0 1
87416: PPUSH
87417: LD_VAR 0 5
87421: PPUSH
87422: CALL 21236 0 2
// break ;
87426: GO 87430
// end ; end ;
87428: GO 87282
87430: POP
87431: POP
// end ;
87432: LD_VAR 0 3
87436: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
87437: LD_INT 0
87439: PPUSH
87440: PPUSH
87441: PPUSH
// if not mc_bases or not skirmish then
87442: LD_EXP 36
87446: NOT
87447: PUSH
87448: LD_EXP 34
87452: NOT
87453: OR
87454: IFFALSE 87458
// exit ;
87456: GO 87547
// for i = 1 to mc_bases do
87458: LD_ADDR_VAR 0 4
87462: PUSH
87463: DOUBLE
87464: LD_INT 1
87466: DEC
87467: ST_TO_ADDR
87468: LD_EXP 36
87472: PUSH
87473: FOR_TO
87474: IFFALSE 87545
// begin if building in mc_busy_turret_list [ i ] then
87476: LD_VAR 0 1
87480: PUSH
87481: LD_EXP 46
87485: PUSH
87486: LD_VAR 0 4
87490: ARRAY
87491: IN
87492: IFFALSE 87543
// begin tmp := mc_busy_turret_list [ i ] diff building ;
87494: LD_ADDR_VAR 0 5
87498: PUSH
87499: LD_EXP 46
87503: PUSH
87504: LD_VAR 0 4
87508: ARRAY
87509: PUSH
87510: LD_VAR 0 1
87514: DIFF
87515: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
87516: LD_ADDR_EXP 46
87520: PUSH
87521: LD_EXP 46
87525: PPUSH
87526: LD_VAR 0 4
87530: PPUSH
87531: LD_VAR 0 5
87535: PPUSH
87536: CALL_OW 1
87540: ST_TO_ADDR
// break ;
87541: GO 87545
// end ; end ;
87543: GO 87473
87545: POP
87546: POP
// end ;
87547: LD_VAR 0 3
87551: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
87552: LD_INT 0
87554: PPUSH
87555: PPUSH
87556: PPUSH
// if not mc_bases or not skirmish then
87557: LD_EXP 36
87561: NOT
87562: PUSH
87563: LD_EXP 34
87567: NOT
87568: OR
87569: IFFALSE 87573
// exit ;
87571: GO 87772
// for i = 1 to mc_bases do
87573: LD_ADDR_VAR 0 5
87577: PUSH
87578: DOUBLE
87579: LD_INT 1
87581: DEC
87582: ST_TO_ADDR
87583: LD_EXP 36
87587: PUSH
87588: FOR_TO
87589: IFFALSE 87770
// if building in mc_bases [ i ] then
87591: LD_VAR 0 1
87595: PUSH
87596: LD_EXP 36
87600: PUSH
87601: LD_VAR 0 5
87605: ARRAY
87606: IN
87607: IFFALSE 87768
// begin tmp := mc_bases [ i ] diff building ;
87609: LD_ADDR_VAR 0 6
87613: PUSH
87614: LD_EXP 36
87618: PUSH
87619: LD_VAR 0 5
87623: ARRAY
87624: PUSH
87625: LD_VAR 0 1
87629: DIFF
87630: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
87631: LD_ADDR_EXP 36
87635: PUSH
87636: LD_EXP 36
87640: PPUSH
87641: LD_VAR 0 5
87645: PPUSH
87646: LD_VAR 0 6
87650: PPUSH
87651: CALL_OW 1
87655: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
87656: LD_VAR 0 1
87660: PUSH
87661: LD_EXP 44
87665: PUSH
87666: LD_VAR 0 5
87670: ARRAY
87671: IN
87672: IFFALSE 87711
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
87674: LD_ADDR_EXP 44
87678: PUSH
87679: LD_EXP 44
87683: PPUSH
87684: LD_VAR 0 5
87688: PPUSH
87689: LD_EXP 44
87693: PUSH
87694: LD_VAR 0 5
87698: ARRAY
87699: PUSH
87700: LD_VAR 0 1
87704: DIFF
87705: PPUSH
87706: CALL_OW 1
87710: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
87711: LD_VAR 0 1
87715: PUSH
87716: LD_EXP 45
87720: PUSH
87721: LD_VAR 0 5
87725: ARRAY
87726: IN
87727: IFFALSE 87766
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
87729: LD_ADDR_EXP 45
87733: PUSH
87734: LD_EXP 45
87738: PPUSH
87739: LD_VAR 0 5
87743: PPUSH
87744: LD_EXP 45
87748: PUSH
87749: LD_VAR 0 5
87753: ARRAY
87754: PUSH
87755: LD_VAR 0 1
87759: DIFF
87760: PPUSH
87761: CALL_OW 1
87765: ST_TO_ADDR
// break ;
87766: GO 87770
// end ;
87768: GO 87588
87770: POP
87771: POP
// end ;
87772: LD_VAR 0 4
87776: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
87777: LD_INT 0
87779: PPUSH
87780: PPUSH
87781: PPUSH
// if not mc_bases or not skirmish or not side in mc_sides then
87782: LD_EXP 36
87786: NOT
87787: PUSH
87788: LD_EXP 34
87792: NOT
87793: OR
87794: PUSH
87795: LD_VAR 0 3
87799: PUSH
87800: LD_EXP 62
87804: IN
87805: NOT
87806: OR
87807: IFFALSE 87811
// exit ;
87809: GO 87934
// for i = 1 to mc_vehicles do
87811: LD_ADDR_VAR 0 6
87815: PUSH
87816: DOUBLE
87817: LD_INT 1
87819: DEC
87820: ST_TO_ADDR
87821: LD_EXP 55
87825: PUSH
87826: FOR_TO
87827: IFFALSE 87932
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
87829: LD_VAR 0 2
87833: PUSH
87834: LD_EXP 55
87838: PUSH
87839: LD_VAR 0 6
87843: ARRAY
87844: IN
87845: PUSH
87846: LD_VAR 0 1
87850: PUSH
87851: LD_EXP 55
87855: PUSH
87856: LD_VAR 0 6
87860: ARRAY
87861: IN
87862: OR
87863: IFFALSE 87930
// begin tmp := mc_vehicles [ i ] diff old ;
87865: LD_ADDR_VAR 0 7
87869: PUSH
87870: LD_EXP 55
87874: PUSH
87875: LD_VAR 0 6
87879: ARRAY
87880: PUSH
87881: LD_VAR 0 2
87885: DIFF
87886: ST_TO_ADDR
// tmp := tmp diff new ;
87887: LD_ADDR_VAR 0 7
87891: PUSH
87892: LD_VAR 0 7
87896: PUSH
87897: LD_VAR 0 1
87901: DIFF
87902: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
87903: LD_ADDR_EXP 55
87907: PUSH
87908: LD_EXP 55
87912: PPUSH
87913: LD_VAR 0 6
87917: PPUSH
87918: LD_VAR 0 7
87922: PPUSH
87923: CALL_OW 1
87927: ST_TO_ADDR
// break ;
87928: GO 87932
// end ;
87930: GO 87826
87932: POP
87933: POP
// end ;
87934: LD_VAR 0 5
87938: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
87939: LD_INT 0
87941: PPUSH
87942: PPUSH
87943: PPUSH
87944: PPUSH
// if not mc_bases or not skirmish then
87945: LD_EXP 36
87949: NOT
87950: PUSH
87951: LD_EXP 34
87955: NOT
87956: OR
87957: IFFALSE 87961
// exit ;
87959: GO 88344
// side := GetSide ( vehicle ) ;
87961: LD_ADDR_VAR 0 5
87965: PUSH
87966: LD_VAR 0 1
87970: PPUSH
87971: CALL_OW 255
87975: ST_TO_ADDR
// for i = 1 to mc_bases do
87976: LD_ADDR_VAR 0 4
87980: PUSH
87981: DOUBLE
87982: LD_INT 1
87984: DEC
87985: ST_TO_ADDR
87986: LD_EXP 36
87990: PUSH
87991: FOR_TO
87992: IFFALSE 88342
// begin if factory in mc_bases [ i ] then
87994: LD_VAR 0 2
87998: PUSH
87999: LD_EXP 36
88003: PUSH
88004: LD_VAR 0 4
88008: ARRAY
88009: IN
88010: IFFALSE 88340
// begin if mc_defender [ i ] < mc_defender_limit [ i ] and not GetWeapon ( vehicle ) in [ ar_control_tower , ar_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , us_cargo_bay , ar_radar , ru_radar , us_radar , ru_bulldozer , us_bulldozer , ar_bio_bomb , ar_selfpropelled_bomb , us_hack , us_crane , ru_crane , ru_siberium_rocket , us_siberium_rocket ] then
88012: LD_EXP 58
88016: PUSH
88017: LD_VAR 0 4
88021: ARRAY
88022: PUSH
88023: LD_EXP 47
88027: PUSH
88028: LD_VAR 0 4
88032: ARRAY
88033: LESS
88034: PUSH
88035: LD_VAR 0 1
88039: PPUSH
88040: CALL_OW 264
88044: PUSH
88045: LD_INT 31
88047: PUSH
88048: LD_INT 32
88050: PUSH
88051: LD_INT 51
88053: PUSH
88054: LD_EXP 30
88058: PUSH
88059: LD_INT 12
88061: PUSH
88062: LD_INT 30
88064: PUSH
88065: LD_EXP 29
88069: PUSH
88070: LD_INT 11
88072: PUSH
88073: LD_INT 53
88075: PUSH
88076: LD_INT 14
88078: PUSH
88079: LD_EXP 33
88083: PUSH
88084: LD_INT 29
88086: PUSH
88087: LD_EXP 31
88091: PUSH
88092: LD_INT 13
88094: PUSH
88095: LD_INT 52
88097: PUSH
88098: LD_INT 48
88100: PUSH
88101: LD_INT 8
88103: PUSH
88104: EMPTY
88105: LIST
88106: LIST
88107: LIST
88108: LIST
88109: LIST
88110: LIST
88111: LIST
88112: LIST
88113: LIST
88114: LIST
88115: LIST
88116: LIST
88117: LIST
88118: LIST
88119: LIST
88120: LIST
88121: LIST
88122: IN
88123: NOT
88124: AND
88125: IFFALSE 88166
// mc_defender := Replace ( mc_defender , i , mc_defender [ i ] ^ vehicle ) else
88127: LD_ADDR_EXP 58
88131: PUSH
88132: LD_EXP 58
88136: PPUSH
88137: LD_VAR 0 4
88141: PPUSH
88142: LD_EXP 58
88146: PUSH
88147: LD_VAR 0 4
88151: ARRAY
88152: PUSH
88153: LD_VAR 0 1
88157: ADD
88158: PPUSH
88159: CALL_OW 1
88163: ST_TO_ADDR
88164: GO 88210
// mc_vehicles := ReplaceIn ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
88166: LD_ADDR_EXP 55
88170: PUSH
88171: LD_EXP 55
88175: PPUSH
88176: LD_VAR 0 4
88180: PUSH
88181: LD_EXP 55
88185: PUSH
88186: LD_VAR 0 4
88190: ARRAY
88191: PUSH
88192: LD_INT 1
88194: PLUS
88195: PUSH
88196: EMPTY
88197: LIST
88198: LIST
88199: PPUSH
88200: LD_VAR 0 1
88204: PPUSH
88205: CALL 26559 0 3
88209: ST_TO_ADDR
// if not mc_scan [ i ] then
88210: LD_EXP 59
88214: PUSH
88215: LD_VAR 0 4
88219: ARRAY
88220: NOT
88221: IFFALSE 88340
// begin if GetControl ( vehicle ) = control_remote then
88223: LD_VAR 0 1
88227: PPUSH
88228: CALL_OW 263
88232: PUSH
88233: LD_INT 2
88235: EQUAL
88236: IFFALSE 88256
// repeat wait ( 0 0$1 ) ;
88238: LD_INT 35
88240: PPUSH
88241: CALL_OW 67
// until IsControledBy ( vehicle ) ;
88245: LD_VAR 0 1
88249: PPUSH
88250: CALL_OW 312
88254: IFFALSE 88238
// ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
88256: LD_VAR 0 1
88260: PPUSH
88261: LD_EXP 60
88265: PUSH
88266: LD_VAR 0 4
88270: ARRAY
88271: PPUSH
88272: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
88276: LD_VAR 0 1
88280: PPUSH
88281: CALL_OW 263
88285: PUSH
88286: LD_INT 1
88288: NONEQUAL
88289: IFFALSE 88293
// break ;
88291: GO 88342
// repeat wait ( 0 0$1 ) ;
88293: LD_INT 35
88295: PPUSH
88296: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
88300: LD_VAR 0 1
88304: PPUSH
88305: LD_EXP 60
88309: PUSH
88310: LD_VAR 0 4
88314: ARRAY
88315: PPUSH
88316: CALL_OW 308
88320: IFFALSE 88293
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
88322: LD_VAR 0 1
88326: PPUSH
88327: CALL_OW 311
88331: PPUSH
88332: CALL_OW 121
// exit ;
88336: POP
88337: POP
88338: GO 88344
// end ; end ; end ;
88340: GO 87991
88342: POP
88343: POP
// end ;
88344: LD_VAR 0 3
88348: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
88349: LD_INT 0
88351: PPUSH
88352: PPUSH
88353: PPUSH
88354: PPUSH
// if not mc_bases or not skirmish then
88355: LD_EXP 36
88359: NOT
88360: PUSH
88361: LD_EXP 34
88365: NOT
88366: OR
88367: IFFALSE 88371
// exit ;
88369: GO 88724
// repeat wait ( 0 0$1 ) ;
88371: LD_INT 35
88373: PPUSH
88374: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
88378: LD_VAR 0 2
88382: PPUSH
88383: LD_VAR 0 3
88387: PPUSH
88388: CALL_OW 284
88392: IFFALSE 88371
// if GetResourceTypeXY ( x , y ) = mat_artefact then
88394: LD_VAR 0 2
88398: PPUSH
88399: LD_VAR 0 3
88403: PPUSH
88404: CALL_OW 283
88408: PUSH
88409: LD_INT 4
88411: EQUAL
88412: IFFALSE 88416
// exit ;
88414: GO 88724
// for i = 1 to mc_bases do
88416: LD_ADDR_VAR 0 7
88420: PUSH
88421: DOUBLE
88422: LD_INT 1
88424: DEC
88425: ST_TO_ADDR
88426: LD_EXP 36
88430: PUSH
88431: FOR_TO
88432: IFFALSE 88722
// begin if mc_crates_area [ i ] then
88434: LD_EXP 54
88438: PUSH
88439: LD_VAR 0 7
88443: ARRAY
88444: IFFALSE 88555
// for j in mc_crates_area [ i ] do
88446: LD_ADDR_VAR 0 8
88450: PUSH
88451: LD_EXP 54
88455: PUSH
88456: LD_VAR 0 7
88460: ARRAY
88461: PUSH
88462: FOR_IN
88463: IFFALSE 88553
// if InArea ( x , y , j ) then
88465: LD_VAR 0 2
88469: PPUSH
88470: LD_VAR 0 3
88474: PPUSH
88475: LD_VAR 0 8
88479: PPUSH
88480: CALL_OW 309
88484: IFFALSE 88551
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
88486: LD_ADDR_EXP 52
88490: PUSH
88491: LD_EXP 52
88495: PPUSH
88496: LD_VAR 0 7
88500: PUSH
88501: LD_EXP 52
88505: PUSH
88506: LD_VAR 0 7
88510: ARRAY
88511: PUSH
88512: LD_INT 1
88514: PLUS
88515: PUSH
88516: EMPTY
88517: LIST
88518: LIST
88519: PPUSH
88520: LD_VAR 0 4
88524: PUSH
88525: LD_VAR 0 2
88529: PUSH
88530: LD_VAR 0 3
88534: PUSH
88535: EMPTY
88536: LIST
88537: LIST
88538: LIST
88539: PPUSH
88540: CALL 26559 0 3
88544: ST_TO_ADDR
// exit ;
88545: POP
88546: POP
88547: POP
88548: POP
88549: GO 88724
// end ;
88551: GO 88462
88553: POP
88554: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
88555: LD_ADDR_VAR 0 9
88559: PUSH
88560: LD_EXP 36
88564: PUSH
88565: LD_VAR 0 7
88569: ARRAY
88570: PPUSH
88571: LD_INT 2
88573: PUSH
88574: LD_INT 30
88576: PUSH
88577: LD_INT 0
88579: PUSH
88580: EMPTY
88581: LIST
88582: LIST
88583: PUSH
88584: LD_INT 30
88586: PUSH
88587: LD_INT 1
88589: PUSH
88590: EMPTY
88591: LIST
88592: LIST
88593: PUSH
88594: EMPTY
88595: LIST
88596: LIST
88597: LIST
88598: PPUSH
88599: CALL_OW 72
88603: ST_TO_ADDR
// if not depot then
88604: LD_VAR 0 9
88608: NOT
88609: IFFALSE 88613
// continue ;
88611: GO 88431
// for j in depot do
88613: LD_ADDR_VAR 0 8
88617: PUSH
88618: LD_VAR 0 9
88622: PUSH
88623: FOR_IN
88624: IFFALSE 88718
// if GetDistUnitXY ( j , x , y ) < 30 then
88626: LD_VAR 0 8
88630: PPUSH
88631: LD_VAR 0 2
88635: PPUSH
88636: LD_VAR 0 3
88640: PPUSH
88641: CALL_OW 297
88645: PUSH
88646: LD_INT 30
88648: LESS
88649: IFFALSE 88716
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
88651: LD_ADDR_EXP 52
88655: PUSH
88656: LD_EXP 52
88660: PPUSH
88661: LD_VAR 0 7
88665: PUSH
88666: LD_EXP 52
88670: PUSH
88671: LD_VAR 0 7
88675: ARRAY
88676: PUSH
88677: LD_INT 1
88679: PLUS
88680: PUSH
88681: EMPTY
88682: LIST
88683: LIST
88684: PPUSH
88685: LD_VAR 0 4
88689: PUSH
88690: LD_VAR 0 2
88694: PUSH
88695: LD_VAR 0 3
88699: PUSH
88700: EMPTY
88701: LIST
88702: LIST
88703: LIST
88704: PPUSH
88705: CALL 26559 0 3
88709: ST_TO_ADDR
// exit ;
88710: POP
88711: POP
88712: POP
88713: POP
88714: GO 88724
// end ;
88716: GO 88623
88718: POP
88719: POP
// end ;
88720: GO 88431
88722: POP
88723: POP
// end ;
88724: LD_VAR 0 6
88728: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
88729: LD_INT 0
88731: PPUSH
88732: PPUSH
88733: PPUSH
88734: PPUSH
// if not mc_bases or not skirmish then
88735: LD_EXP 36
88739: NOT
88740: PUSH
88741: LD_EXP 34
88745: NOT
88746: OR
88747: IFFALSE 88751
// exit ;
88749: GO 89028
// side := GetSide ( lab ) ;
88751: LD_ADDR_VAR 0 4
88755: PUSH
88756: LD_VAR 0 2
88760: PPUSH
88761: CALL_OW 255
88765: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
88766: LD_VAR 0 4
88770: PUSH
88771: LD_EXP 62
88775: IN
88776: NOT
88777: PUSH
88778: LD_EXP 63
88782: NOT
88783: OR
88784: PUSH
88785: LD_EXP 36
88789: NOT
88790: OR
88791: IFFALSE 88795
// exit ;
88793: GO 89028
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
88795: LD_ADDR_EXP 63
88799: PUSH
88800: LD_EXP 63
88804: PPUSH
88805: LD_VAR 0 4
88809: PPUSH
88810: LD_EXP 63
88814: PUSH
88815: LD_VAR 0 4
88819: ARRAY
88820: PUSH
88821: LD_VAR 0 1
88825: DIFF
88826: PPUSH
88827: CALL_OW 1
88831: ST_TO_ADDR
// for i = 1 to mc_bases do
88832: LD_ADDR_VAR 0 5
88836: PUSH
88837: DOUBLE
88838: LD_INT 1
88840: DEC
88841: ST_TO_ADDR
88842: LD_EXP 36
88846: PUSH
88847: FOR_TO
88848: IFFALSE 89026
// begin if lab in mc_bases [ i ] then
88850: LD_VAR 0 2
88854: PUSH
88855: LD_EXP 36
88859: PUSH
88860: LD_VAR 0 5
88864: ARRAY
88865: IN
88866: IFFALSE 89024
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
88868: LD_VAR 0 1
88872: PUSH
88873: LD_INT 11
88875: PUSH
88876: LD_INT 4
88878: PUSH
88879: LD_INT 3
88881: PUSH
88882: LD_INT 2
88884: PUSH
88885: EMPTY
88886: LIST
88887: LIST
88888: LIST
88889: LIST
88890: IN
88891: PUSH
88892: LD_EXP 66
88896: PUSH
88897: LD_VAR 0 5
88901: ARRAY
88902: AND
88903: IFFALSE 89024
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
88905: LD_ADDR_VAR 0 6
88909: PUSH
88910: LD_EXP 66
88914: PUSH
88915: LD_VAR 0 5
88919: ARRAY
88920: PUSH
88921: LD_INT 1
88923: ARRAY
88924: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
88925: LD_ADDR_EXP 66
88929: PUSH
88930: LD_EXP 66
88934: PPUSH
88935: LD_VAR 0 5
88939: PPUSH
88940: EMPTY
88941: PPUSH
88942: CALL_OW 1
88946: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
88947: LD_VAR 0 6
88951: PPUSH
88952: LD_INT 0
88954: PPUSH
88955: CALL_OW 109
// ComExitBuilding ( tmp ) ;
88959: LD_VAR 0 6
88963: PPUSH
88964: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
88968: LD_ADDR_EXP 65
88972: PUSH
88973: LD_EXP 65
88977: PPUSH
88978: LD_VAR 0 5
88982: PPUSH
88983: LD_EXP 65
88987: PUSH
88988: LD_VAR 0 5
88992: ARRAY
88993: PPUSH
88994: LD_INT 1
88996: PPUSH
88997: LD_VAR 0 6
89001: PPUSH
89002: CALL_OW 2
89006: PPUSH
89007: CALL_OW 1
89011: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
89012: LD_VAR 0 5
89016: PPUSH
89017: LD_INT 112
89019: PPUSH
89020: CALL 66497 0 2
// end ; end ; end ;
89024: GO 88847
89026: POP
89027: POP
// end ;
89028: LD_VAR 0 3
89032: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
89033: LD_INT 0
89035: PPUSH
89036: PPUSH
89037: PPUSH
89038: PPUSH
89039: PPUSH
89040: PPUSH
89041: PPUSH
89042: PPUSH
// if not mc_bases or not skirmish then
89043: LD_EXP 36
89047: NOT
89048: PUSH
89049: LD_EXP 34
89053: NOT
89054: OR
89055: IFFALSE 89059
// exit ;
89057: GO 90075
// for i = 1 to mc_bases do
89059: LD_ADDR_VAR 0 3
89063: PUSH
89064: DOUBLE
89065: LD_INT 1
89067: DEC
89068: ST_TO_ADDR
89069: LD_EXP 36
89073: PUSH
89074: FOR_TO
89075: IFFALSE 90073
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
89077: LD_VAR 0 1
89081: PUSH
89082: LD_EXP 36
89086: PUSH
89087: LD_VAR 0 3
89091: ARRAY
89092: IN
89093: PUSH
89094: LD_VAR 0 1
89098: PUSH
89099: LD_EXP 43
89103: PUSH
89104: LD_VAR 0 3
89108: ARRAY
89109: IN
89110: OR
89111: PUSH
89112: LD_VAR 0 1
89116: PUSH
89117: LD_EXP 55
89121: PUSH
89122: LD_VAR 0 3
89126: ARRAY
89127: IN
89128: OR
89129: PUSH
89130: LD_VAR 0 1
89134: PUSH
89135: LD_EXP 65
89139: PUSH
89140: LD_VAR 0 3
89144: ARRAY
89145: IN
89146: OR
89147: PUSH
89148: LD_VAR 0 1
89152: PUSH
89153: LD_EXP 66
89157: PUSH
89158: LD_VAR 0 3
89162: ARRAY
89163: IN
89164: OR
89165: IFFALSE 90071
// begin if un in mc_ape [ i ] then
89167: LD_VAR 0 1
89171: PUSH
89172: LD_EXP 65
89176: PUSH
89177: LD_VAR 0 3
89181: ARRAY
89182: IN
89183: IFFALSE 89222
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
89185: LD_ADDR_EXP 65
89189: PUSH
89190: LD_EXP 65
89194: PPUSH
89195: LD_VAR 0 3
89199: PPUSH
89200: LD_EXP 65
89204: PUSH
89205: LD_VAR 0 3
89209: ARRAY
89210: PUSH
89211: LD_VAR 0 1
89215: DIFF
89216: PPUSH
89217: CALL_OW 1
89221: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
89222: LD_VAR 0 1
89226: PUSH
89227: LD_EXP 66
89231: PUSH
89232: LD_VAR 0 3
89236: ARRAY
89237: IN
89238: IFFALSE 89262
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
89240: LD_ADDR_EXP 66
89244: PUSH
89245: LD_EXP 66
89249: PPUSH
89250: LD_VAR 0 3
89254: PPUSH
89255: EMPTY
89256: PPUSH
89257: CALL_OW 1
89261: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and ( GetTag ( un ) = 20 or un in mc_defender [ i ] ) then
89262: LD_VAR 0 1
89266: PPUSH
89267: CALL_OW 247
89271: PUSH
89272: LD_INT 2
89274: EQUAL
89275: PUSH
89276: LD_VAR 0 1
89280: PPUSH
89281: CALL_OW 110
89285: PUSH
89286: LD_INT 20
89288: EQUAL
89289: PUSH
89290: LD_VAR 0 1
89294: PUSH
89295: LD_EXP 58
89299: PUSH
89300: LD_VAR 0 3
89304: ARRAY
89305: IN
89306: OR
89307: AND
89308: IFFALSE 89411
// begin fac := MC_GetBuilding ( i , b_factory ) ;
89310: LD_ADDR_VAR 0 8
89314: PUSH
89315: LD_VAR 0 3
89319: PPUSH
89320: LD_INT 3
89322: PPUSH
89323: CALL 86070 0 2
89327: ST_TO_ADDR
// if fac then
89328: LD_VAR 0 8
89332: IFFALSE 89411
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
89334: LD_ADDR_VAR 0 9
89338: PUSH
89339: LD_VAR 0 8
89343: PPUSH
89344: LD_VAR 0 1
89348: PPUSH
89349: CALL_OW 265
89353: PPUSH
89354: LD_VAR 0 1
89358: PPUSH
89359: CALL_OW 262
89363: PPUSH
89364: LD_VAR 0 1
89368: PPUSH
89369: CALL_OW 263
89373: PPUSH
89374: LD_VAR 0 1
89378: PPUSH
89379: CALL_OW 264
89383: PPUSH
89384: CALL 24159 0 5
89388: ST_TO_ADDR
// if components then
89389: LD_VAR 0 9
89393: IFFALSE 89409
// MC_InsertProduceList ( i , components ) ;
89395: LD_VAR 0 3
89399: PPUSH
89400: LD_VAR 0 9
89404: PPUSH
89405: CALL 85698 0 2
// break ;
89409: GO 90073
// end ; end ; if GetType ( un ) = unit_building then
89411: LD_VAR 0 1
89415: PPUSH
89416: CALL_OW 247
89420: PUSH
89421: LD_INT 3
89423: EQUAL
89424: IFFALSE 89739
// begin btype := GetBType ( un ) ;
89426: LD_ADDR_VAR 0 5
89430: PUSH
89431: LD_VAR 0 1
89435: PPUSH
89436: CALL_OW 266
89440: ST_TO_ADDR
// if btype = b_warehouse then
89441: LD_VAR 0 5
89445: PUSH
89446: LD_INT 1
89448: EQUAL
89449: IFFALSE 89467
// begin btype := b_depot ;
89451: LD_ADDR_VAR 0 5
89455: PUSH
89456: LD_INT 0
89458: ST_TO_ADDR
// pos := 1 ;
89459: LD_ADDR_VAR 0 6
89463: PUSH
89464: LD_INT 1
89466: ST_TO_ADDR
// end ; if btype = b_factory then
89467: LD_VAR 0 5
89471: PUSH
89472: LD_INT 3
89474: EQUAL
89475: IFFALSE 89493
// begin btype := b_workshop ;
89477: LD_ADDR_VAR 0 5
89481: PUSH
89482: LD_INT 2
89484: ST_TO_ADDR
// pos := 1 ;
89485: LD_ADDR_VAR 0 6
89489: PUSH
89490: LD_INT 1
89492: ST_TO_ADDR
// end ; if btype = b_barracks then
89493: LD_VAR 0 5
89497: PUSH
89498: LD_INT 5
89500: EQUAL
89501: IFFALSE 89511
// btype := b_armoury ;
89503: LD_ADDR_VAR 0 5
89507: PUSH
89508: LD_INT 4
89510: ST_TO_ADDR
// if btype in [ b_lab_half , b_lab_full ] then
89511: LD_VAR 0 5
89515: PUSH
89516: LD_INT 7
89518: PUSH
89519: LD_INT 8
89521: PUSH
89522: EMPTY
89523: LIST
89524: LIST
89525: IN
89526: IFFALSE 89536
// btype := b_lab ;
89528: LD_ADDR_VAR 0 5
89532: PUSH
89533: LD_INT 6
89535: ST_TO_ADDR
// mc_build_list := ReplaceIn ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
89536: LD_ADDR_EXP 41
89540: PUSH
89541: LD_EXP 41
89545: PPUSH
89546: LD_VAR 0 3
89550: PUSH
89551: LD_EXP 41
89555: PUSH
89556: LD_VAR 0 3
89560: ARRAY
89561: PUSH
89562: LD_INT 1
89564: PLUS
89565: PUSH
89566: EMPTY
89567: LIST
89568: LIST
89569: PPUSH
89570: LD_VAR 0 5
89574: PUSH
89575: LD_VAR 0 1
89579: PPUSH
89580: CALL_OW 250
89584: PUSH
89585: LD_VAR 0 1
89589: PPUSH
89590: CALL_OW 251
89594: PUSH
89595: LD_VAR 0 1
89599: PPUSH
89600: CALL_OW 254
89604: PUSH
89605: EMPTY
89606: LIST
89607: LIST
89608: LIST
89609: LIST
89610: PPUSH
89611: CALL 26559 0 3
89615: ST_TO_ADDR
// if pos = 1 then
89616: LD_VAR 0 6
89620: PUSH
89621: LD_INT 1
89623: EQUAL
89624: IFFALSE 89739
// begin tmp := mc_build_list [ i ] ;
89626: LD_ADDR_VAR 0 7
89630: PUSH
89631: LD_EXP 41
89635: PUSH
89636: LD_VAR 0 3
89640: ARRAY
89641: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
89642: LD_VAR 0 7
89646: PPUSH
89647: LD_INT 2
89649: PUSH
89650: LD_INT 30
89652: PUSH
89653: LD_INT 0
89655: PUSH
89656: EMPTY
89657: LIST
89658: LIST
89659: PUSH
89660: LD_INT 30
89662: PUSH
89663: LD_INT 1
89665: PUSH
89666: EMPTY
89667: LIST
89668: LIST
89669: PUSH
89670: EMPTY
89671: LIST
89672: LIST
89673: LIST
89674: PPUSH
89675: CALL_OW 72
89679: IFFALSE 89689
// pos := 2 ;
89681: LD_ADDR_VAR 0 6
89685: PUSH
89686: LD_INT 2
89688: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
89689: LD_ADDR_VAR 0 7
89693: PUSH
89694: LD_VAR 0 7
89698: PPUSH
89699: LD_VAR 0 6
89703: PPUSH
89704: LD_VAR 0 7
89708: PPUSH
89709: CALL 26885 0 3
89713: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
89714: LD_ADDR_EXP 41
89718: PUSH
89719: LD_EXP 41
89723: PPUSH
89724: LD_VAR 0 3
89728: PPUSH
89729: LD_VAR 0 7
89733: PPUSH
89734: CALL_OW 1
89738: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
89739: LD_VAR 0 1
89743: PUSH
89744: LD_EXP 36
89748: PUSH
89749: LD_VAR 0 3
89753: ARRAY
89754: IN
89755: IFFALSE 89794
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
89757: LD_ADDR_EXP 36
89761: PUSH
89762: LD_EXP 36
89766: PPUSH
89767: LD_VAR 0 3
89771: PPUSH
89772: LD_EXP 36
89776: PUSH
89777: LD_VAR 0 3
89781: ARRAY
89782: PUSH
89783: LD_VAR 0 1
89787: DIFF
89788: PPUSH
89789: CALL_OW 1
89793: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
89794: LD_VAR 0 1
89798: PUSH
89799: LD_EXP 43
89803: PUSH
89804: LD_VAR 0 3
89808: ARRAY
89809: IN
89810: IFFALSE 89849
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
89812: LD_ADDR_EXP 43
89816: PUSH
89817: LD_EXP 43
89821: PPUSH
89822: LD_VAR 0 3
89826: PPUSH
89827: LD_EXP 43
89831: PUSH
89832: LD_VAR 0 3
89836: ARRAY
89837: PUSH
89838: LD_VAR 0 1
89842: DIFF
89843: PPUSH
89844: CALL_OW 1
89848: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
89849: LD_VAR 0 1
89853: PUSH
89854: LD_EXP 55
89858: PUSH
89859: LD_VAR 0 3
89863: ARRAY
89864: IN
89865: IFFALSE 89904
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
89867: LD_ADDR_EXP 55
89871: PUSH
89872: LD_EXP 55
89876: PPUSH
89877: LD_VAR 0 3
89881: PPUSH
89882: LD_EXP 55
89886: PUSH
89887: LD_VAR 0 3
89891: ARRAY
89892: PUSH
89893: LD_VAR 0 1
89897: DIFF
89898: PPUSH
89899: CALL_OW 1
89903: ST_TO_ADDR
// end ; if un in mc_defender [ i ] then
89904: LD_VAR 0 1
89908: PUSH
89909: LD_EXP 58
89913: PUSH
89914: LD_VAR 0 3
89918: ARRAY
89919: IN
89920: IFFALSE 89959
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
89922: LD_ADDR_EXP 58
89926: PUSH
89927: LD_EXP 58
89931: PPUSH
89932: LD_VAR 0 3
89936: PPUSH
89937: LD_EXP 58
89941: PUSH
89942: LD_VAR 0 3
89946: ARRAY
89947: PUSH
89948: LD_VAR 0 1
89952: DIFF
89953: PPUSH
89954: CALL_OW 1
89958: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
89959: LD_VAR 0 1
89963: PUSH
89964: LD_EXP 45
89968: PUSH
89969: LD_VAR 0 3
89973: ARRAY
89974: IN
89975: IFFALSE 90014
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
89977: LD_ADDR_EXP 45
89981: PUSH
89982: LD_EXP 45
89986: PPUSH
89987: LD_VAR 0 3
89991: PPUSH
89992: LD_EXP 45
89996: PUSH
89997: LD_VAR 0 3
90001: ARRAY
90002: PUSH
90003: LD_VAR 0 1
90007: DIFF
90008: PPUSH
90009: CALL_OW 1
90013: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
90014: LD_VAR 0 1
90018: PUSH
90019: LD_EXP 44
90023: PUSH
90024: LD_VAR 0 3
90028: ARRAY
90029: IN
90030: IFFALSE 90069
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
90032: LD_ADDR_EXP 44
90036: PUSH
90037: LD_EXP 44
90041: PPUSH
90042: LD_VAR 0 3
90046: PPUSH
90047: LD_EXP 44
90051: PUSH
90052: LD_VAR 0 3
90056: ARRAY
90057: PUSH
90058: LD_VAR 0 1
90062: DIFF
90063: PPUSH
90064: CALL_OW 1
90068: ST_TO_ADDR
// end ; break ;
90069: GO 90073
// end ;
90071: GO 89074
90073: POP
90074: POP
// end ;
90075: LD_VAR 0 2
90079: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
90080: LD_INT 0
90082: PPUSH
90083: PPUSH
90084: PPUSH
// if not mc_bases or not skirmish then
90085: LD_EXP 36
90089: NOT
90090: PUSH
90091: LD_EXP 34
90095: NOT
90096: OR
90097: IFFALSE 90101
// exit ;
90099: GO 90316
// for i = 1 to mc_bases do
90101: LD_ADDR_VAR 0 3
90105: PUSH
90106: DOUBLE
90107: LD_INT 1
90109: DEC
90110: ST_TO_ADDR
90111: LD_EXP 36
90115: PUSH
90116: FOR_TO
90117: IFFALSE 90314
// begin if building in mc_construct_list [ i ] then
90119: LD_VAR 0 1
90123: PUSH
90124: LD_EXP 43
90128: PUSH
90129: LD_VAR 0 3
90133: ARRAY
90134: IN
90135: IFFALSE 90312
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
90137: LD_ADDR_EXP 43
90141: PUSH
90142: LD_EXP 43
90146: PPUSH
90147: LD_VAR 0 3
90151: PPUSH
90152: LD_EXP 43
90156: PUSH
90157: LD_VAR 0 3
90161: ARRAY
90162: PUSH
90163: LD_VAR 0 1
90167: DIFF
90168: PPUSH
90169: CALL_OW 1
90173: ST_TO_ADDR
// if building in mc_lab [ i ] then
90174: LD_VAR 0 1
90178: PUSH
90179: LD_EXP 69
90183: PUSH
90184: LD_VAR 0 3
90188: ARRAY
90189: IN
90190: IFFALSE 90245
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
90192: LD_ADDR_EXP 70
90196: PUSH
90197: LD_EXP 70
90201: PPUSH
90202: LD_VAR 0 3
90206: PPUSH
90207: LD_EXP 70
90211: PUSH
90212: LD_VAR 0 3
90216: ARRAY
90217: PPUSH
90218: LD_INT 1
90220: PPUSH
90221: LD_EXP 70
90225: PUSH
90226: LD_VAR 0 3
90230: ARRAY
90231: PPUSH
90232: LD_INT 0
90234: PPUSH
90235: CALL 25977 0 4
90239: PPUSH
90240: CALL_OW 1
90244: ST_TO_ADDR
// if not building in mc_bases [ i ] then
90245: LD_VAR 0 1
90249: PUSH
90250: LD_EXP 36
90254: PUSH
90255: LD_VAR 0 3
90259: ARRAY
90260: IN
90261: NOT
90262: IFFALSE 90308
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
90264: LD_ADDR_EXP 36
90268: PUSH
90269: LD_EXP 36
90273: PPUSH
90274: LD_VAR 0 3
90278: PUSH
90279: LD_EXP 36
90283: PUSH
90284: LD_VAR 0 3
90288: ARRAY
90289: PUSH
90290: LD_INT 1
90292: PLUS
90293: PUSH
90294: EMPTY
90295: LIST
90296: LIST
90297: PPUSH
90298: LD_VAR 0 1
90302: PPUSH
90303: CALL 26559 0 3
90307: ST_TO_ADDR
// exit ;
90308: POP
90309: POP
90310: GO 90316
// end ; end ;
90312: GO 90116
90314: POP
90315: POP
// end ;
90316: LD_VAR 0 2
90320: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
90321: LD_INT 0
90323: PPUSH
90324: PPUSH
90325: PPUSH
90326: PPUSH
90327: PPUSH
90328: PPUSH
90329: PPUSH
// if not mc_bases or not skirmish then
90330: LD_EXP 36
90334: NOT
90335: PUSH
90336: LD_EXP 34
90340: NOT
90341: OR
90342: IFFALSE 90346
// exit ;
90344: GO 91007
// for i = 1 to mc_bases do
90346: LD_ADDR_VAR 0 3
90350: PUSH
90351: DOUBLE
90352: LD_INT 1
90354: DEC
90355: ST_TO_ADDR
90356: LD_EXP 36
90360: PUSH
90361: FOR_TO
90362: IFFALSE 91005
// begin if building in mc_construct_list [ i ] then
90364: LD_VAR 0 1
90368: PUSH
90369: LD_EXP 43
90373: PUSH
90374: LD_VAR 0 3
90378: ARRAY
90379: IN
90380: IFFALSE 91003
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
90382: LD_ADDR_EXP 43
90386: PUSH
90387: LD_EXP 43
90391: PPUSH
90392: LD_VAR 0 3
90396: PPUSH
90397: LD_EXP 43
90401: PUSH
90402: LD_VAR 0 3
90406: ARRAY
90407: PUSH
90408: LD_VAR 0 1
90412: DIFF
90413: PPUSH
90414: CALL_OW 1
90418: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
90419: LD_ADDR_EXP 36
90423: PUSH
90424: LD_EXP 36
90428: PPUSH
90429: LD_VAR 0 3
90433: PUSH
90434: LD_EXP 36
90438: PUSH
90439: LD_VAR 0 3
90443: ARRAY
90444: PUSH
90445: LD_INT 1
90447: PLUS
90448: PUSH
90449: EMPTY
90450: LIST
90451: LIST
90452: PPUSH
90453: LD_VAR 0 1
90457: PPUSH
90458: CALL 26559 0 3
90462: ST_TO_ADDR
// btype := GetBType ( building ) ;
90463: LD_ADDR_VAR 0 5
90467: PUSH
90468: LD_VAR 0 1
90472: PPUSH
90473: CALL_OW 266
90477: ST_TO_ADDR
// side := GetSide ( building ) ;
90478: LD_ADDR_VAR 0 8
90482: PUSH
90483: LD_VAR 0 1
90487: PPUSH
90488: CALL_OW 255
90492: ST_TO_ADDR
// if btype = b_lab then
90493: LD_VAR 0 5
90497: PUSH
90498: LD_INT 6
90500: EQUAL
90501: IFFALSE 90551
// begin mc_lab := ReplaceIn ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
90503: LD_ADDR_EXP 69
90507: PUSH
90508: LD_EXP 69
90512: PPUSH
90513: LD_VAR 0 3
90517: PUSH
90518: LD_EXP 69
90522: PUSH
90523: LD_VAR 0 3
90527: ARRAY
90528: PUSH
90529: LD_INT 1
90531: PLUS
90532: PUSH
90533: EMPTY
90534: LIST
90535: LIST
90536: PPUSH
90537: LD_VAR 0 1
90541: PPUSH
90542: CALL 26559 0 3
90546: ST_TO_ADDR
// exit ;
90547: POP
90548: POP
90549: GO 91007
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
90551: LD_VAR 0 5
90555: PUSH
90556: LD_INT 0
90558: PUSH
90559: LD_INT 2
90561: PUSH
90562: LD_INT 4
90564: PUSH
90565: EMPTY
90566: LIST
90567: LIST
90568: LIST
90569: IN
90570: IFFALSE 90694
// begin if btype = b_armoury then
90572: LD_VAR 0 5
90576: PUSH
90577: LD_INT 4
90579: EQUAL
90580: IFFALSE 90590
// btype := b_barracks ;
90582: LD_ADDR_VAR 0 5
90586: PUSH
90587: LD_INT 5
90589: ST_TO_ADDR
// if btype = b_depot then
90590: LD_VAR 0 5
90594: PUSH
90595: LD_INT 0
90597: EQUAL
90598: IFFALSE 90608
// btype := b_warehouse ;
90600: LD_ADDR_VAR 0 5
90604: PUSH
90605: LD_INT 1
90607: ST_TO_ADDR
// if btype = b_workshop then
90608: LD_VAR 0 5
90612: PUSH
90613: LD_INT 2
90615: EQUAL
90616: IFFALSE 90626
// btype := b_factory ;
90618: LD_ADDR_VAR 0 5
90622: PUSH
90623: LD_INT 3
90625: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
90626: LD_VAR 0 5
90630: PPUSH
90631: LD_VAR 0 8
90635: PPUSH
90636: CALL_OW 323
90640: PUSH
90641: LD_INT 1
90643: EQUAL
90644: IFFALSE 90690
// mc_build_upgrade := ReplaceIn ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
90646: LD_ADDR_EXP 68
90650: PUSH
90651: LD_EXP 68
90655: PPUSH
90656: LD_VAR 0 3
90660: PUSH
90661: LD_EXP 68
90665: PUSH
90666: LD_VAR 0 3
90670: ARRAY
90671: PUSH
90672: LD_INT 1
90674: PLUS
90675: PUSH
90676: EMPTY
90677: LIST
90678: LIST
90679: PPUSH
90680: LD_VAR 0 1
90684: PPUSH
90685: CALL 26559 0 3
90689: ST_TO_ADDR
// exit ;
90690: POP
90691: POP
90692: GO 91007
// end ; if btype in [ b_bunker , b_turret ] then
90694: LD_VAR 0 5
90698: PUSH
90699: LD_INT 32
90701: PUSH
90702: LD_INT 33
90704: PUSH
90705: EMPTY
90706: LIST
90707: LIST
90708: IN
90709: IFFALSE 90999
// begin mc_turret_list := ReplaceIn ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
90711: LD_ADDR_EXP 44
90715: PUSH
90716: LD_EXP 44
90720: PPUSH
90721: LD_VAR 0 3
90725: PUSH
90726: LD_EXP 44
90730: PUSH
90731: LD_VAR 0 3
90735: ARRAY
90736: PUSH
90737: LD_INT 1
90739: PLUS
90740: PUSH
90741: EMPTY
90742: LIST
90743: LIST
90744: PPUSH
90745: LD_VAR 0 1
90749: PPUSH
90750: CALL 26559 0 3
90754: ST_TO_ADDR
// if btype = b_bunker then
90755: LD_VAR 0 5
90759: PUSH
90760: LD_INT 32
90762: EQUAL
90763: IFFALSE 90999
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
90765: LD_ADDR_EXP 45
90769: PUSH
90770: LD_EXP 45
90774: PPUSH
90775: LD_VAR 0 3
90779: PUSH
90780: LD_EXP 45
90784: PUSH
90785: LD_VAR 0 3
90789: ARRAY
90790: PUSH
90791: LD_INT 1
90793: PLUS
90794: PUSH
90795: EMPTY
90796: LIST
90797: LIST
90798: PPUSH
90799: LD_VAR 0 1
90803: PPUSH
90804: CALL 26559 0 3
90808: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
90809: LD_ADDR_VAR 0 6
90813: PUSH
90814: LD_EXP 36
90818: PUSH
90819: LD_VAR 0 3
90823: ARRAY
90824: PPUSH
90825: LD_INT 25
90827: PUSH
90828: LD_INT 1
90830: PUSH
90831: EMPTY
90832: LIST
90833: LIST
90834: PUSH
90835: LD_INT 3
90837: PUSH
90838: LD_INT 54
90840: PUSH
90841: EMPTY
90842: LIST
90843: PUSH
90844: EMPTY
90845: LIST
90846: LIST
90847: PUSH
90848: EMPTY
90849: LIST
90850: LIST
90851: PPUSH
90852: CALL_OW 72
90856: ST_TO_ADDR
// if tmp then
90857: LD_VAR 0 6
90861: IFFALSE 90867
// exit ;
90863: POP
90864: POP
90865: GO 91007
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
90867: LD_ADDR_VAR 0 6
90871: PUSH
90872: LD_EXP 36
90876: PUSH
90877: LD_VAR 0 3
90881: ARRAY
90882: PPUSH
90883: LD_INT 2
90885: PUSH
90886: LD_INT 30
90888: PUSH
90889: LD_INT 4
90891: PUSH
90892: EMPTY
90893: LIST
90894: LIST
90895: PUSH
90896: LD_INT 30
90898: PUSH
90899: LD_INT 5
90901: PUSH
90902: EMPTY
90903: LIST
90904: LIST
90905: PUSH
90906: EMPTY
90907: LIST
90908: LIST
90909: LIST
90910: PPUSH
90911: CALL_OW 72
90915: ST_TO_ADDR
// if not tmp then
90916: LD_VAR 0 6
90920: NOT
90921: IFFALSE 90927
// exit ;
90923: POP
90924: POP
90925: GO 91007
// for j in tmp do
90927: LD_ADDR_VAR 0 4
90931: PUSH
90932: LD_VAR 0 6
90936: PUSH
90937: FOR_IN
90938: IFFALSE 90997
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
90940: LD_ADDR_VAR 0 7
90944: PUSH
90945: LD_VAR 0 4
90949: PPUSH
90950: CALL_OW 313
90954: PPUSH
90955: LD_INT 25
90957: PUSH
90958: LD_INT 1
90960: PUSH
90961: EMPTY
90962: LIST
90963: LIST
90964: PPUSH
90965: CALL_OW 72
90969: ST_TO_ADDR
// if units then
90970: LD_VAR 0 7
90974: IFFALSE 90995
// begin ComExitBuilding ( units [ 1 ] ) ;
90976: LD_VAR 0 7
90980: PUSH
90981: LD_INT 1
90983: ARRAY
90984: PPUSH
90985: CALL_OW 122
// exit ;
90989: POP
90990: POP
90991: POP
90992: POP
90993: GO 91007
// end ; end ;
90995: GO 90937
90997: POP
90998: POP
// end ; end ; exit ;
90999: POP
91000: POP
91001: GO 91007
// end ; end ;
91003: GO 90361
91005: POP
91006: POP
// end ;
91007: LD_VAR 0 2
91011: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
91012: LD_INT 0
91014: PPUSH
91015: PPUSH
91016: PPUSH
91017: PPUSH
91018: PPUSH
91019: PPUSH
91020: PPUSH
// if not mc_bases or not skirmish then
91021: LD_EXP 36
91025: NOT
91026: PUSH
91027: LD_EXP 34
91031: NOT
91032: OR
91033: IFFALSE 91037
// exit ;
91035: GO 91268
// btype := GetBType ( building ) ;
91037: LD_ADDR_VAR 0 6
91041: PUSH
91042: LD_VAR 0 1
91046: PPUSH
91047: CALL_OW 266
91051: ST_TO_ADDR
// x := GetX ( building ) ;
91052: LD_ADDR_VAR 0 7
91056: PUSH
91057: LD_VAR 0 1
91061: PPUSH
91062: CALL_OW 250
91066: ST_TO_ADDR
// y := GetY ( building ) ;
91067: LD_ADDR_VAR 0 8
91071: PUSH
91072: LD_VAR 0 1
91076: PPUSH
91077: CALL_OW 251
91081: ST_TO_ADDR
// d := GetDir ( building ) ;
91082: LD_ADDR_VAR 0 9
91086: PUSH
91087: LD_VAR 0 1
91091: PPUSH
91092: CALL_OW 254
91096: ST_TO_ADDR
// for i = 1 to mc_bases do
91097: LD_ADDR_VAR 0 4
91101: PUSH
91102: DOUBLE
91103: LD_INT 1
91105: DEC
91106: ST_TO_ADDR
91107: LD_EXP 36
91111: PUSH
91112: FOR_TO
91113: IFFALSE 91266
// begin if not mc_build_list [ i ] then
91115: LD_EXP 41
91119: PUSH
91120: LD_VAR 0 4
91124: ARRAY
91125: NOT
91126: IFFALSE 91130
// continue ;
91128: GO 91112
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
91130: LD_VAR 0 6
91134: PUSH
91135: LD_VAR 0 7
91139: PUSH
91140: LD_VAR 0 8
91144: PUSH
91145: LD_VAR 0 9
91149: PUSH
91150: EMPTY
91151: LIST
91152: LIST
91153: LIST
91154: LIST
91155: PPUSH
91156: LD_EXP 41
91160: PUSH
91161: LD_VAR 0 4
91165: ARRAY
91166: PUSH
91167: LD_INT 1
91169: ARRAY
91170: PPUSH
91171: CALL 32728 0 2
91175: IFFALSE 91264
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
91177: LD_ADDR_EXP 41
91181: PUSH
91182: LD_EXP 41
91186: PPUSH
91187: LD_VAR 0 4
91191: PPUSH
91192: LD_EXP 41
91196: PUSH
91197: LD_VAR 0 4
91201: ARRAY
91202: PPUSH
91203: LD_INT 1
91205: PPUSH
91206: CALL_OW 3
91210: PPUSH
91211: CALL_OW 1
91215: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
91216: LD_ADDR_EXP 43
91220: PUSH
91221: LD_EXP 43
91225: PPUSH
91226: LD_VAR 0 4
91230: PUSH
91231: LD_EXP 43
91235: PUSH
91236: LD_VAR 0 4
91240: ARRAY
91241: PUSH
91242: LD_INT 1
91244: PLUS
91245: PUSH
91246: EMPTY
91247: LIST
91248: LIST
91249: PPUSH
91250: LD_VAR 0 1
91254: PPUSH
91255: CALL 26559 0 3
91259: ST_TO_ADDR
// exit ;
91260: POP
91261: POP
91262: GO 91268
// end ; end ;
91264: GO 91112
91266: POP
91267: POP
// end ;
91268: LD_VAR 0 3
91272: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
91273: LD_INT 0
91275: PPUSH
91276: PPUSH
91277: PPUSH
// if not mc_bases or not skirmish then
91278: LD_EXP 36
91282: NOT
91283: PUSH
91284: LD_EXP 34
91288: NOT
91289: OR
91290: IFFALSE 91294
// exit ;
91292: GO 91484
// for i = 1 to mc_bases do
91294: LD_ADDR_VAR 0 4
91298: PUSH
91299: DOUBLE
91300: LD_INT 1
91302: DEC
91303: ST_TO_ADDR
91304: LD_EXP 36
91308: PUSH
91309: FOR_TO
91310: IFFALSE 91397
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
91312: LD_VAR 0 1
91316: PUSH
91317: LD_EXP 44
91321: PUSH
91322: LD_VAR 0 4
91326: ARRAY
91327: IN
91328: PUSH
91329: LD_VAR 0 1
91333: PUSH
91334: LD_EXP 45
91338: PUSH
91339: LD_VAR 0 4
91343: ARRAY
91344: IN
91345: NOT
91346: AND
91347: IFFALSE 91395
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
91349: LD_ADDR_EXP 45
91353: PUSH
91354: LD_EXP 45
91358: PPUSH
91359: LD_VAR 0 4
91363: PUSH
91364: LD_EXP 45
91368: PUSH
91369: LD_VAR 0 4
91373: ARRAY
91374: PUSH
91375: LD_INT 1
91377: PLUS
91378: PUSH
91379: EMPTY
91380: LIST
91381: LIST
91382: PPUSH
91383: LD_VAR 0 1
91387: PPUSH
91388: CALL 26559 0 3
91392: ST_TO_ADDR
// break ;
91393: GO 91397
// end ; end ;
91395: GO 91309
91397: POP
91398: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
91399: LD_VAR 0 1
91403: PPUSH
91404: CALL_OW 257
91408: PUSH
91409: LD_EXP 62
91413: IN
91414: PUSH
91415: LD_VAR 0 1
91419: PPUSH
91420: CALL_OW 266
91424: PUSH
91425: LD_INT 5
91427: EQUAL
91428: AND
91429: PUSH
91430: LD_VAR 0 2
91434: PPUSH
91435: CALL_OW 110
91439: PUSH
91440: LD_INT 18
91442: NONEQUAL
91443: AND
91444: IFFALSE 91484
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
91446: LD_VAR 0 2
91450: PPUSH
91451: CALL_OW 257
91455: PUSH
91456: LD_INT 5
91458: PUSH
91459: LD_INT 8
91461: PUSH
91462: LD_INT 9
91464: PUSH
91465: EMPTY
91466: LIST
91467: LIST
91468: LIST
91469: IN
91470: IFFALSE 91484
// SetClass ( unit , 1 ) ;
91472: LD_VAR 0 2
91476: PPUSH
91477: LD_INT 1
91479: PPUSH
91480: CALL_OW 336
// end ;
91484: LD_VAR 0 3
91488: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
91489: LD_INT 0
91491: PPUSH
91492: PPUSH
// if not mc_bases or not skirmish then
91493: LD_EXP 36
91497: NOT
91498: PUSH
91499: LD_EXP 34
91503: NOT
91504: OR
91505: IFFALSE 91509
// exit ;
91507: GO 91625
// if GetLives ( abandoned_vehicle ) > 250 then
91509: LD_VAR 0 2
91513: PPUSH
91514: CALL_OW 256
91518: PUSH
91519: LD_INT 250
91521: GREATER
91522: IFFALSE 91526
// exit ;
91524: GO 91625
// for i = 1 to mc_bases do
91526: LD_ADDR_VAR 0 6
91530: PUSH
91531: DOUBLE
91532: LD_INT 1
91534: DEC
91535: ST_TO_ADDR
91536: LD_EXP 36
91540: PUSH
91541: FOR_TO
91542: IFFALSE 91623
// begin if driver in mc_bases [ i ] then
91544: LD_VAR 0 1
91548: PUSH
91549: LD_EXP 36
91553: PUSH
91554: LD_VAR 0 6
91558: ARRAY
91559: IN
91560: IFFALSE 91621
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
91562: LD_VAR 0 1
91566: PPUSH
91567: LD_EXP 36
91571: PUSH
91572: LD_VAR 0 6
91576: ARRAY
91577: PPUSH
91578: LD_INT 2
91580: PUSH
91581: LD_INT 30
91583: PUSH
91584: LD_INT 0
91586: PUSH
91587: EMPTY
91588: LIST
91589: LIST
91590: PUSH
91591: LD_INT 30
91593: PUSH
91594: LD_INT 1
91596: PUSH
91597: EMPTY
91598: LIST
91599: LIST
91600: PUSH
91601: EMPTY
91602: LIST
91603: LIST
91604: LIST
91605: PPUSH
91606: CALL_OW 72
91610: PUSH
91611: LD_INT 1
91613: ARRAY
91614: PPUSH
91615: CALL_OW 112
// break ;
91619: GO 91623
// end ; end ;
91621: GO 91541
91623: POP
91624: POP
// end ;
91625: LD_VAR 0 5
91629: RET
